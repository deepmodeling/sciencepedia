{"hands_on_practices": [{"introduction": "Before tackling the general Hamiltonian Cycle problem, it's insightful to study it within specific, well-structured families of graphs. This exercise focuses on complete bipartite graphs, denoted as $K_{m,n}$, where the vertex set is partitioned into two disjoint subsets. By determining the precise conditions under which a Hamiltonian cycle can exist in such a graph, you will develop a deeper intuition for the strict structural properties that a Hamiltonian cycle imposes on a graph's topology [@problem_id:1457281].", "problem": "In graph theory, a graph $G$ is defined by a pair of sets $(V, E)$, where $V$ is a set of vertices and $E$ is a set of edges connecting pairs of vertices. A special type of graph is a **complete bipartite graph**, denoted $K_{m,n}$, where $m$ and $n$ are positive integers. In such a graph, the vertex set $V$ can be partitioned into two disjoint subsets, $U$ and $W$, such that $|U|=m$ and $|W|=n$. An edge connects a vertex in $U$ to a vertex in $W$; in fact, for every vertex $u \\in U$ and every vertex $w \\in W$, the edge $(u,w)$ exists in $E$. No edges exist between vertices within the same partition.\n\nA **Hamiltonian cycle** is a closed loop in a graph that visits every vertex exactly once and returns to the starting vertex.\n\nGiven a complete bipartite graph $K_{m,n}$, which of the following conditions on the integers $m$ and $n$ is both necessary and sufficient for the graph to possess a Hamiltonian cycle?\n\nA. $m = n$ and $m \\ge 2$\n\nB. $m$ and $n$ are both positive even integers.\n\nC. $m+n$ is an even integer and $m, n \\ge 2$.\n\nD. $m \\ge 2$ and $n \\ge 2$.\n\nE. $m=n$ and $m \\ge 1$.", "solution": "We analyze necessary conditions first. In any bipartite graph with partition sets $U$ and $W$, every cycle must alternate between vertices in $U$ and $W$, since no edge joins two vertices within the same partition. Therefore, any cycle has an even number of vertices, containing equally many vertices from $U$ and from $W$.\n\nIf the graph has a Hamiltonian cycle, that cycle visits every vertex exactly once and hence includes all $m$ vertices of $U$ and all $n$ vertices of $W$. By the alternation property, the number of vertices from $U$ on the cycle must equal the number from $W$, which forces\n$$\nm = n.\n$$\nMoreover, a cycle in a simple bipartite graph must have length at least $4$, so we must have at least two vertices in each part. Thus a Hamiltonian cycle in $K_{m,n}$ necessitates\n$$\nm = n \\quad \\text{and} \\quad m \\ge 2.\n$$\n\nWe now show sufficiency. Assume $m = n$ with $n \\ge 2$. Label the vertices as $U = \\{u_{1}, u_{2}, \\ldots, u_{n}\\}$ and $W = \\{w_{1}, w_{2}, \\ldots, w_{n}\\}$. In $K_{n,n}$ every pair $(u_{i}, w_{j})$ is an edge. Consider the closed walk\n$$\nu_{1} \\to w_{1} \\to u_{2} \\to w_{2} \\to \\cdots \\to u_{n} \\to w_{n} \\to u_{1}.\n$$\nEach step uses an edge between $U$ and $W$, which exists in $K_{n,n}$. This walk visits every vertex exactly once and returns to the starting vertex, hence it is a Hamiltonian cycle.\n\nTherefore, the condition $m = n$ and $m \\ge 2$ is both necessary and sufficient for $K_{m,n}$ to have a Hamiltonian cycle, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1457281"}, {"introduction": "The Hamiltonian Cycle problem is closely related to the famous Traveling Salesperson Problem (TSP), where the goal is to find the shortest tour in a weighted graph. A natural and intuitive approach is a greedy one: from your current location, always travel to the nearest unvisited location. This hands-on exercise demonstrates why this \"nearest-neighbor\" heuristic can fail to find the optimal solution, providing a concrete example of why such problems are considered computationally \"hard\" [@problem_id:1457266].", "problem": "Consider a complete, undirected, weighted graph $G$ with the set of vertices $V = \\{V_1, V_2, V_3, V_4\\}$. The weights of the edges between any two vertices are given as follows:\n- The weight of the edge between $V_1$ and $V_2$ is $101$.\n- The weight of the edge between $V_1$ and $V_3$ is $101$.\n- The weight of the edge between $V_1$ and $V_4$ is $400$.\n- The weight of the edge between $V_2$ and $V_3$ is $4$.\n- The weight of the edge between $V_2$ and $V_4$ is $101$.\n- The weight of the edge between $V_3$ and $V_4$ is $101$.\n\nA common heuristic for finding a low-weight Hamiltonian cycle is the nearest-neighbor algorithm. The algorithm proceeds as follows:\n1.  Start at a designated vertex. This vertex begins the path.\n2.  From the current vertex, travel to the nearest unvisited vertex (i.e., the one connected by the edge with the minimum weight).\n3.  In case of a tie for the nearest unvisited vertex, the algorithm selects the vertex with the lowest index (e.g., $V_i$ is chosen over $V_j$ if $i  j$).\n4.  Repeat step 2 until all vertices in the graph have been visited.\n5.  Finally, travel from the last visited vertex back to the starting vertex to complete the cycle.\n\nApply the nearest-neighbor algorithm to the graph $G$, starting from vertex $V_1$. Calculate the total weight of the resulting Hamiltonian cycle.", "solution": "We apply the nearest-neighbor algorithm starting at $V_{1}$, using the given edge weights $w(V_{i},V_{j})$ and the tie-break rule favoring the lowest index.\n\nStep 1 (Start): Current vertex $V_{1}$. Unvisited vertices are $\\{V_{2},V_{3},V_{4}\\}$. The candidate edges are $w(V_{1},V_{2})=101$, $w(V_{1},V_{3})=101$, and $w(V_{1},V_{4})=400$. The minimum weight among unvisited choices is $101$, tied between $V_{2}$ and $V_{3}$. By the tie-break rule, choose the lower index, so move to $V_{2}$. Path so far: $V_{1}\\to V_{2}$ with cost $101$.\n\nStep 2: Current vertex $V_{2}$. Unvisited vertices are $\\{V_{3},V_{4}\\}$. The candidate edges are $w(V_{2},V_{3})=4$ and $w(V_{2},V_{4})=101$. The minimum is $4$, so move to $V_{3}$. Path so far: $V_{1}\\to V_{2}\\to V_{3}$ with additional cost $4$.\n\nStep 3: Current vertex $V_{3}$. Unvisited vertex is $\\{V_{4}\\}$ only. Move to $V_{4}$ via $w(V_{3},V_{4})=101$. Path so far: $V_{1}\\to V_{2}\\to V_{3}\\to V_{4}$ with additional cost $101$.\n\nStep 4 (Return to start): All vertices have been visited. Return from $V_{4}$ to the start $V_{1}$ with cost $w(V_{4},V_{1})=400$.\n\nThe resulting Hamiltonian cycle is $V_{1}\\to V_{2}\\to V_{3}\\to V_{4}\\to V_{1}$, and its total weight is\n$$101+4+101+400=606.$$", "answer": "$$\\boxed{606}$$", "id": "1457266"}, {"introduction": "The NP-completeness of the Hamiltonian Cycle problem implies that a universally fast algorithm is unlikely to exist. However, we can often design efficient algorithms for graphs that possess special structural properties. This advanced problem introduces the powerful concept of treewidth and guides you through the logic of a dynamic programming solution that leverages this structure, showcasing a key strategy from the field of parameterized complexity for taming intractable problems [@problem_id:1457286].", "problem": "A logistics company is optimizing the routes for its new fleet of delivery drones in a dense urban environment. The network of possible drop-off locations and the flight paths between them forms a graph $G=(V, E)$. To ensure maximum efficiency for a full-load delivery, a drone must start at a depot, visit every single drop-off location exactly once, and then return to the depot. This specific routing requirement is known as finding a Hamiltonian Cycle in the graph.\n\nWhile the Hamiltonian Cycle problem is NP-complete in general, the company's network analysts have discovered that their city's network graph has a low treewidth, which allows for a more efficient solution using Dynamic Programming (DP). The algorithm operates on a *tree decomposition* of the graph.\n\nA **tree decomposition** of a graph $G=(V, E)$ is a pair $(T, \\{X_i\\}_{i \\in V(T)})$, where $T$ is a tree and $\\{X_i\\}$ is a family of subsets of $V$ (called \"bags\"), one for each node $i$ of $T$, that satisfies:\n1.  **Node Coverage**: Every vertex of $G$ is in at least one bag $X_i$.\n2.  **Edge Coverage**: For every edge $(u,v)$ in $G$, there is some bag $X_i$ that contains both $u$ and $v$.\n3.  **Connectivity Property**: For any vertex $v \\in V$, the set of nodes $\\{i \\in V(T) \\mid v \\in X_i\\}$ forms a connected subtree of $T$.\n\nThe **width** of a tree decomposition is $\\max_{i \\in V(T)} |X_i| - 1$. The **treewidth** of a graph $G$, denoted $tw(G)$, is the minimum width over all possible tree decompositions of $G$.\n\nThe DP algorithm works by processing the tree decomposition from the leaves up to the root. The state of the DP at a node $i$ of the tree decomposition must summarize how the vertices *within* its bag, $X_i$, are connected by path segments that use vertices already processed in the subgraph corresponding to the subtree rooted at $i$. These path segments are partial fragments of the potential Hamiltonian cycle.\n\nA DP state for a bag $X_i$ can be characterized by a matching on a subset of vertices in $X_i$. A pair of vertices $\\{u, v\\}$ in the matching indicates that a path segment starting at $u$ and ending at $v$ has been formed using vertices not in $X_i$ (but in bags \"below\" $i$). Vertices in $X_i$ that are not part of any pair are considered endpoints of path segments that do not connect to another vertex within the bag. Since a Hamiltonian cycle is a single cycle, the partial paths within any subgraph must not form premature cycles.\n\nYour task is to determine the size of the DP state space for a single bag. Specifically, calculate the total number of distinct connectivity patterns (matchings) that the DP algorithm must consider for a single bag $X_i$ in a graph with a treewidth of 4. Assume the tree decomposition used has the maximal bag size allowed by this treewidth.", "solution": "The treewidth is given as 4, so any tree decomposition achieving this width has maximal bag size\n$$|X_{i}|=\\text{tw}(G)+1=5.$$\nBy the problem’s DP characterization, a state for a bag is a matching on a subset of the bag’s vertices: a choice of disjoint unordered pairs among the 5 labeled vertices, with the remaining vertices (if any) left unmatched. Premature cycles are disallowed; representing states as matchings (i.e., collections of disjoint pairs) ensures no cycles are formed within the bag’s summary.\n\nFor a bag of size $k$, the total number of such matchings (partial matchings) is the number of ways to choose $m$ disjoint pairs for any $m$ with $0 \\leq m \\leq \\lfloor k/2 \\rfloor$. For a fixed $m$:\n- Choose the $2m$ vertices to be matched: $\\binom{k}{2m}$.\n- Pair these $2m$ labeled vertices into $m$ unordered pairs: $(2m-1)!!=\\frac{(2m)!}{2^{m} m!}$.\n\nThus the total number of states is\n$$\nM(k)=\\sum_{m=0}^{\\lfloor k/2 \\rfloor} \\binom{k}{2m} (2m-1)!!=\\sum_{m=0}^{\\lfloor k/2 \\rfloor} \\binom{k}{2m}\\frac{(2m)!}{2^{m} m!}=\\sum_{m=0}^{\\lfloor k/2 \\rfloor} \\frac{k!}{(k-2m)! \\, 2^{m} \\, m!}.\n$$\nSubstituting $k=5$:\n$$\nM(5)=\\sum_{m=0}^{2} \\frac{5!}{(5-2m)! \\, 2^{m} \\, m!}\n= 1 + 10 + 15 = 26.\n$$\nTherefore, the DP must consider $26$ distinct connectivity patterns (matchings) for a single bag of size $5$.", "answer": "$$\\boxed{26}$$", "id": "1457286"}]}