{"hands_on_practices": [{"introduction": "The best way to understand the Traveling Salesman Problem is to solve one. This first practice provides a concrete, small-scale scenario that allows you to find the optimal tour by examining every possibility. By working through this drone delivery problem [@problem_id:1464546] manually, you'll gain a solid intuition for what constitutes a 'tour' and how the decision version of the problem uses a budget constraint to frame a 'yes' or 'no' question. This brute-force method highlights the combinatorial nature of the problem, which is the very reason it becomes computationally infeasible for a large number of cities.", "problem": "A small drone delivery company, \"AeroSwift,\" is setting up a delivery route for a single drone. The drone must start at the company's headquarters (H), visit three clients located at points A, B, and C, and then return to the headquarters. The drone must visit each client exactly once. The distances between all pairs of locations are known and are given in the table below. All distances are in meters and are symmetric, meaning the distance from location X to Y is the same as from Y to X.\n\n| From/To | H   | A   | B   | C   |\n|---------|-----|-----|-----|-----|\n| H       | 0   | 150 | 200 | 250 |\n| A       | 150 | 0   | 300 | 400 |\n| B       | 200 | 300 | 0   | 350 |\n| C       | 250 | 400 | 350 | 0   |\n\nThe company's management is investigating the feasibility of this route under a strict fuel budget. The problem they face is a specific instance of the Traveling Salesman Problem Decision Version (TSP-DECISION), which asks whether a tour exists with a total length not exceeding a given bound, $K$.\n\nFor this particular route, the company has set a maximum allowed total tour length of $K = 1075$ meters. Does a valid tour exist that meets this budget constraint? Your task is to solve this TSP-DECISION problem by finding the length of the shortest possible tour and comparing it to $K$.\n\nWhich of the following statements correctly answers the question and provides the correct justification?\n\nA. Yes, a tour satisfying the constraint exists because the shortest possible tour has a total length of 1050 meters.\n\nB. Yes, a tour satisfying the constraint exists, and the shortest possible tour has a total length of 1100 meters.\n\nC. No, a tour satisfying the constraint does not exist because the shortest possible tour has a total length of 1100 meters.\n\nD. No, a tour satisfying the constraint does not exist because the shortest possible tour has a total length of 1150 meters.\n\nE. It is not possible to answer definitively for a general instance of TSP, but for this small case, the shortest tour is 1075 meters.", "solution": "We are asked to solve a specific instance of TSP-DECISION: determine whether there exists a Hamiltonian cycle (tour) starting and ending at $H$ that visits each of $A$, $B$, and $C$ exactly once, with total length not exceeding the bound $K=1075$. The decision can be made by computing the shortest possible tour length and comparing it to $K$.\n\nFor a start and end fixed at $H$ with three intermediate nodes, every possible tour corresponds to one of the $3!=6$ permutations of the clients. For any permutation $(p_{1},p_{2},p_{3})$ of $(A,B,C)$, the tour length is\n$$\nL(H,p_{1},p_{2},p_{3},H) = d(H,p_{1}) + d(p_{1},p_{2}) + d(p_{2},p_{3}) + d(p_{3},H),\n$$\nwhere $d(X,Y)$ is the symmetric distance given in the table.\n\nCompute all six tour lengths using the given distances:\n1. $(A,B,C)$:\n$$\nL_{1} = d(H,A) + d(A,B) + d(B,C) + d(C,H) = 150 + 300 + 350 + 250 = 1050.\n$$\n2. $(A,C,B)$:\n$$\nL_{2} = d(H,A) + d(A,C) + d(C,B) + d(B,H) = 150 + 400 + 350 + 200 = 1100.\n$$\n3. $(B,A,C)$:\n$$\nL_{3} = d(H,B) + d(B,A) + d(A,C) + d(C,H) = 200 + 300 + 400 + 250 = 1150.\n$$\n4. $(B,C,A)$:\n$$\nL_{4} = d(H,B) + d(B,C) + d(C,A) + d(A,H) = 200 + 350 + 400 + 150 = 1100.\n$$\n5. $(C,A,B)$:\n$$\nL_{5} = d(H,C) + d(C,A) + d(A,B) + d(B,H) = 250 + 400 + 300 + 200 = 1150.\n$$\n6. $(C,B,A)$:\n$$\nL_{6} = d(H,C) + d(C,B) + d(B,A) + d(A,H) = 250 + 350 + 300 + 150 = 1050.\n$$\n\nThe shortest possible tour length is therefore\n$$\nL_{\\min} = \\min\\{1050, 1100, 1150, 1100, 1150, 1050\\} = 1050.\n$$\n\nTo answer the TSP-DECISION question, compare $L_{\\min}$ to $K$:\n$$\nL_{\\min} = 1050 \\leq K = 1075.\n$$\nThus, a valid tour satisfying the constraint exists, and the correct statement among the options is that the shortest possible tour has total length $1050$ and therefore meets the budget. This corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1464546"}, {"introduction": "Now that we've seen a concrete example, let's simplify the problem to uncover its fundamental structure. This exercise [@problem_id:1464558] presents a special case of TSP-DECISION where all paths have a uniform cost. This thought experiment strips away the complexity of varying weights, forcing us to focus on the core challenge: finding a route that visits every location exactly once. By exploring this scenario, you will see how the TSP is deeply connected to a cornerstone problem in graph theory, the Hamiltonian Cycle Problem.", "problem": "The Traveling Salesman Problem - Decision Version (TSP-DECISION) is a well-known problem in computer science. It is formally defined as follows: Given a complete graph $G$ with $n$ vertices, a function assigning a positive integer weight to each edge, and a positive integer budget $B$, does there exist a tour (a simple cycle that visits every vertex exactly once) with a total weight less than or equal to $B$?\n\nNow, consider a special instance of this problem. You are given a graph with $n$ vertices, where $n \\geq 3$. For every pair of distinct vertices, if an edge exists between them, its weight is exactly 1. We are not guaranteed that the graph is complete. For this specific type of graph, we set the budget for the TSP-DECISION problem to be exactly $B=n$.\n\nDetermining whether the answer to this specific instance of TSP-DECISION is \"yes\" is equivalent to solving which one of the following fundamental graph problems on the same $n$-vertex graph?\n\nA. The Hamiltonian Cycle Problem: Deciding if the graph contains a cycle that visits every vertex exactly once.\n\nB. The Eulerian Circuit Problem: Deciding if there exists a trail in the graph that visits every edge exactly once and starts and ends at the same vertex.\n\nC. The Minimum Spanning Tree Problem: Finding a spanning tree of the graph with the minimum possible total edge weight.\n\nD. The Graph Bipartiteness Problem: Deciding if the vertices of the graph can be divided into two disjoint and independent sets.\n\nE. The All-Pairs Shortest Path Problem: Finding the shortest path distance between every pair of vertices in the graph.", "solution": "Let $G=(V,E)$ with $|V|=n$ and $n \\ge 3$. For every edge $e \\in E$, the weight function satisfies $w(e)=1$. The TSP-DECISION instance asks whether there exists a tour, i.e., a simple cycle visiting every vertex exactly once, whose total weight is at most the budget $B=n$.\n\nBy definition, any tour in $G$ that visits all $n$ vertices exactly once is a Hamiltonian cycle and uses exactly $n$ edges. Since each used edge has weight $1$, the total weight of any such tour $T$ is\n$$\nW(T)=\\sum_{e \\in T} w(e)=\\sum_{e \\in T} 1 = n.\n$$\nTherefore, the TSP-DECISION query “Is there a tour with total weight $\\le B$ with $B=n$?” is equivalent to asking whether there exists a Hamiltonian cycle, because:\n- If $G$ has a Hamiltonian cycle $H$, then $W(H)=n \\le B$, so the TSP-DECISION answer is “yes.”\n- Conversely, if the TSP-DECISION answer is “yes,” then there exists a tour $T$ with $W(T) \\le n$. But any tour visiting all $n$ vertices uses exactly $n$ edges of weight $1$ each, so $W(T)=n$, and $T$ is a Hamiltonian cycle.\n\nHence, deciding TSP-DECISION with $B=n$ on this unit-weight, not-necessarily-complete graph is exactly equivalent to deciding whether $G$ has a Hamiltonian cycle. This matches option A. The other listed problems (Eulerian circuit, minimum spanning tree, bipartiteness, and all-pairs shortest paths) are not equivalent to the existence of a Hamiltonian cycle under these constraints.", "answer": "$$\\boxed{A}$$", "id": "1464558"}, {"introduction": "Understanding a problem's computational difficulty requires placing it within a formal complexity class. This final practice [@problem_id:1464528] shifts our focus from *solving* TSP to *classifying* it. By considering a slight variation, the TSP-EXACT problem, you will apply the formal definition of the class NP. This exercise is key to grasping why TSP is considered 'hard'—not because a given solution is difficult to check, but because finding that solution in the first place is believed to be intractable.", "problem": "In computational complexity theory, the standard decision version of the Traveling Salesman Problem (TSP) is defined as follows:\n\n**TSP-DECISION:** Given a complete graph $G$ with $n$ vertices, where each edge has a positive integer weight, and a positive integer $k$, does there exist a tour (a simple cycle that visits every vertex exactly once) with a total weight of *at most* $k$?\n\nThe TSP-DECISION problem is a well-known member of the complexity class NP (Nondeterministic Polynomial time).\n\nNow, consider a modified version of this problem, which we will call TSP-EXACT:\n\n**TSP-EXACT:** Given a complete graph $G$ with $n$ vertices, where each edge has a positive integer weight, and a positive integer $k$, does there exist a tour with a total weight of *exactly* $k$?\n\nBased on the formal definition of the complexity class NP, is the TSP-EXACT problem in NP?\n\nA. Yes, because a proposed tour can be given as a certificate, and a deterministic algorithm can verify in polynomial time that it is a valid tour and its weight is exactly $k$.\n\nB. No, because finding a tour with an exact weight is computationally harder than finding one with a weight at most $k$. This additional difficulty moves the problem out of NP.\n\nC. It is unknown. Determining if TSP-EXACT is in NP is equivalent to solving the P versus NP problem.\n\nD. No, because for a \"yes\" instance, the certificate would be a tour of length exactly $k$. However, for a \"no\" instance, verifying that no such tour exists would require checking all possible tours, which cannot be done in polynomial time.\n\nE. Yes, but only if the problem is also in the complexity class P. Since we do not know if TSP is in P, we cannot conclude that TSP-EXACT is in NP.", "solution": "We recall the formal definition of NP: A language $L$ is in NP if there exists a polynomial $p$ and a deterministic polynomial-time verifier $V$ such that for every input $x$, $x \\in L$ if and only if there exists a certificate $y$ with $|y| \\leq p(|x|)$ for which $V(x,y)$ accepts. Equivalently, for yes-instances $x \\in L$, there is a short certificate that can be checked in polynomial time; there is no requirement to efficiently verify no-instances.\n\nConsider TSP-EXACT with input $(G,k)$, where $G=(V,E)$ is a complete graph on $n=|V|$ vertices, edge weights are positive integers given in binary via a function $w:E \\to \\mathbb{Z}_{>0}$, and $k \\in \\mathbb{Z}_{>0}$. The language is\n$$\nL_{\\text{TSP-EXACT}}=\\{(G,k) \\mid \\text{there exists a tour } C \\text{ in } G \\text{ with total weight exactly } k\\}.\n$$\n\nWe propose a certificate for yes-instances $(G,k) \\in L_{\\text{TSP-EXACT}}$ to be an ordered list of vertices\n$$\ny=(v_{1},v_{2},\\dots,v_{n}),\n$$\nintended to represent a Hamiltonian cycle $v_{1} \\to v_{2} \\to \\dots \\to v_{n} \\to v_{1}$.\n\nVerification algorithm $V$ on input $((G,k),y)$ performs the following checks:\n1. Check that each $v_{i} \\in V$ and that all $v_{i}$ are distinct. This verifies that $(v_{1},\\dots,v_{n})$ is a permutation of $V$, so it encodes a simple cycle visiting each vertex exactly once. This can be done in time $O(n \\log n)$ by sorting or $O(n)$ with hashing, both polynomial in the input size.\n2. Compute the total weight\n$$\nW=\\sum_{i=1}^{n} w(\\{v_{i},v_{i+1}\\}),\n$$\nwhere $v_{n+1}=v_{1}$. Since $G$ is complete, each edge $\\{v_{i},v_{i+1}\\}$ is in $E$, and each $w(\\{v_{i},v_{i+1}\\}) \\in \\mathbb{Z}_{>0}$ is given in binary. Adding $n$ binary integers whose bit-lengths are bounded by the input size is computable in time polynomial in the input size. Thus, computing $W$ is polynomial time.\n3. Accept if and only if $W=k$.\n\nCorrectness: If $(G,k) \\in L_{\\text{TSP-EXACT}}$, then there exists a tour of exact weight $k$, and its vertex order provides a certificate $y$ that $V$ accepts, since the checks above will compute $W=k$. Conversely, if $V$ accepts for some $y$, then $y$ defines a valid tour with total weight exactly $k$, so $(G,k) \\in L_{\\text{TSP-EXACT}}$.\n\nCertificate size and running time: The certificate $y$ consists of $n$ vertex identifiers, each encodable in $O(\\log n)$ bits, so $|y|=O(n \\log n)$, which is polynomial in the input size. The verifier runs in time polynomial in the input size, as argued.\n\nTherefore, TSP-EXACT satisfies the definition of NP. Note that NP only requires efficient verification for yes-instances; it does not require efficiently certifying no-instances. Hence objections based on the difficulty of disproving existence of an exact-$k$ tour are irrelevant to NP membership.\n\nAmong the provided options, this is exactly the reasoning in option A. Options B, C, D, and E misunderstand NP’s definition or its relation to P.", "answer": "$$\\boxed{A}$$", "id": "1464528"}]}