{"hands_on_practices": [{"introduction": "Before tackling the full complexity of the Clique problem, it's essential to build a foundation with a simpler, more manageable version. This first exercise asks you to consider finding a small, fixed-size clique of size 3. By designing and analyzing a straightforward \"brute-force\" algorithm, you will practice fundamental skills in algorithmic thinking and Big O notation, establishing a baseline for understanding why the general problem is so challenging [@problem_id:1455658].", "problem": "In computational graph theory, a social network can be modeled as an undirected graph $G = (V, E)$, where $V$ is a set of vertices representing individuals, and $E$ is a set of edges representing mutual acquaintance. A $k$-clique in such a graph is a subset of $k$ vertices where every two distinct vertices in the subset are connected by an edge. In the context of a social network, a 3-clique represents a group of three individuals who all mutually know each other.\n\nYou are tasked with analyzing the computational cost of finding such a group. Consider a graph $G$ with a set of $V$ vertices. The structure of the graph is provided to you in the form of an adjacency matrix, $A$, where the entry $A[i][j]$ is 1 if an edge exists between vertex $i$ and vertex $j$, and 0 otherwise.\n\nDesign an algorithm to solve the 3-CLIQUE problem, which is the problem of determining whether the graph $G$ contains at least one 3-clique. Based on your algorithm, determine its worst-case time complexity as a function of the number of vertices, $V$. Express your answer using Big O notation.", "solution": "Let the input be an undirected graph given by its adjacency matrix $A \\in \\{0,1\\}^{V \\times V}$, where $A[i][j]=1$ if and only if there is an edge between vertices $i$ and $j$. We design a simple algorithm that checks all triples of distinct vertices.\n\nAlgorithm (high-level):\n- For each $i$ from $1$ to $V-2$:\n  - For each $j$ from $i+1$ to $V-1$:\n    - For each $k$ from $j+1$ to $V$:\n      - If $A[i][j]=1$, $A[i][k]=1$, and $A[j][k]=1$, then return YES (a 3-clique exists).\n- If no such triple is found, return NO.\n\nCorrectness follows directly: a 3-clique on vertices $\\{i,j,k\\}$ exists if and only if the three edges $(i,j)$, $(i,k)$, and $(j,k)$ are present, which is exactly what the algorithm checks.\n\nWorst-case time complexity analysis:\n- The algorithm iterates over all unordered triples of distinct vertices. The number of such triples is\n$$\n\\binom{V}{3}=\\frac{V(V-1)(V-2)}{6}.\n$$\n- For each triple, it performs a constant number of adjacency-matrix lookups and comparisons, each in $O(1)$ time.\n- Therefore, the total worst-case time is\n$$\nT(V)=\\Theta\\!\\left(\\binom{V}{3}\\right)=\\Theta\\!\\left(\\frac{V(V-1)(V-2)}{6}\\right)=\\Theta(V^{3}),\n$$\nwhich implies\n$$\nT(V)\\in O(V^{3}).\n$$\n\nThus, the worst-case time complexity as a function of $V$ is $O(V^{3})$.", "answer": "$$\\boxed{O(V^{3})}$$", "id": "1455658"}, {"introduction": "While finding a 3-clique is computationally feasible, finding the *maximum* clique in a general graph is an NP-hard problem, meaning no known efficient algorithm exists. This exercise introduces a practical approach for dealing with such problems: a greedy heuristic. You will apply a specific greedy strategy to find a large, though not guaranteed to be maximum, clique, providing insight into the trade-offs between computational speed and solution optimality [@problem_id:1455645].", "problem": "In graph theory, a clique is a subset of vertices of an undirected graph such that every two distinct vertices in the subset are adjacent (i.e., there is an edge connecting them). The problem of finding the maximum clique (the largest possible clique in a graph) is known to be computationally difficult. However, heuristic algorithms can quickly find a clique that is large, though not necessarily of maximum size.\n\nConsider an undirected graph $G = (V, E)$ with the vertex set $V = \\{A, B, C, D, E, F, G, H\\}$ and the edge set $E$ containing the following 16 edges:\n$E = \\{\\{A,B\\}, \\{A,E\\}, \\{A,F\\}, \\{A,H\\}, \\{B,D\\}, \\{B,E\\}, \\{B,F\\}, \\{B,H\\}, \\{C,G\\}, \\{C,H\\}, \\{D,E\\}, \\{D,F\\}, \\{D,H\\}, \\{E,G\\}, \\{E,H\\}, \\{G,H\\}\\}$.\n\nYou are to find a clique in this graph by applying the following greedy algorithm:\n\n1.  Construct an ordered list of all vertices, $L$, by sorting the vertices in descending order of their degree. A vertex's degree is the number of edges connected to it. Any ties in degree should be broken alphabetically in ascending order (e.g., A comes before B).\n2.  Initialize an empty set $K$, which will represent the clique being constructed.\n3.  Iterate through the vertices in the ordered list $L$. For each vertex $v$ from $L$, if $v$ is connected by an edge to every vertex already in the set $K$, add $v$ to $K$.\n\nWhich of the following sets is the final clique $K$ produced by this algorithm?\n\nA. $\\{A, B, E, H\\}$\n\nB. $\\{B, D, E, H\\}$\n\nC. $\\{A, D, F\\}$\n\nD. $\\{A, B, D, E\\}$\n\nE. $\\{C, G, H\\}$", "solution": "We are given the undirected graph $G=(V,E)$ with $V=\\{A,B,C,D,E,F,G,H\\}$ and\n$$\nE=\\{\\{A,B\\},\\{A,E\\},\\{A,F\\},\\{A,H\\},\\{B,D\\},\\{B,E\\},\\{B,F\\},\\{B,H\\},\\{C,G\\},\\{C,H\\},\\{D,E\\},\\{D,F\\},\\{D,H\\},\\{E,G\\},\\{E,H\\},\\{G,H\\}\\}.\n$$\nStep 1 requires sorting vertices by degree in descending order, breaking ties alphabetically. Compute degrees:\n$$\n\\deg(A)=4 \\text{ (neighbors } B,E,F,H),\\quad \\deg(B)=5 \\text{ (neighbors } A,D,E,F,H),\n$$\n$$\n\\deg(C)=2 \\text{ (neighbors } G,H),\\quad \\deg(D)=4 \\text{ (neighbors } B,E,F,H),\n$$\n$$\n\\deg(E)=5 \\text{ (neighbors } A,B,D,G,H),\\quad \\deg(F)=3 \\text{ (neighbors } A,B,D),\n$$\n$$\n\\deg(G)=3 \\text{ (neighbors } C,E,H),\\quad \\deg(H)=6 \\text{ (neighbors } A,B,C,D,E,G).\n$$\nThus, in descending order with alphabetical tie-breaking, the ordered list is\n$$\nL=[H,B,E,A,D,F,G,C].\n$$\n\nInitialize $K=\\varnothing$.\n\nIterate through $L$ and include a vertex if it is adjacent to all vertices already in $K$:\n- Take $H$: since $K=\\varnothing$, vacuously $H$ is adjacent to all in $K$, so $K=\\{H\\}$.\n- Take $B$: check $\\{B,H\\}\\in E$, so include $B$; now $K=\\{H,B\\}$.\n- Take $E$: check $\\{E,H\\}\\in E$ and $\\{E,B\\}\\in E$, so include $E$; now $K=\\{H,B,E\\}$.\n- Take $A$: check $\\{A,H\\}\\in E$, $\\{A,B\\}\\in E$, and $\\{A,E\\}\\in E$, so include $A$; now $K=\\{H,B,E,A\\}$.\n- Take $D$: must be adjacent to all of $H,B,E,A$. While $\\{D,H\\},\\{D,B\\},\\{D,E\\}\\in E$, we have $\\{D,A\\}\\notin E$, so do not include $D$.\n- Take $F$: must be adjacent to $H,B,E,A$. Since $\\{F,H\\}\\notin E$, do not include $F$.\n- Take $G$: must be adjacent to $H,B,E,A$. Although $\\{G,H\\}\\in E$ and $\\{G,E\\}\\in E$, we have $\\{G,B\\}\\notin E$, so do not include $G$.\n- Take $C$: must be adjacent to $H,B,E,A$. Although $\\{C,H\\}\\in E$, we have $\\{C,B\\}\\notin E$, so do not include $C$.\n\nTherefore the final clique produced by the greedy algorithm is\n$$\nK=\\{A,B,E,H\\},\n$$\nwhich matches option A. For completeness, verify it is a clique: all pairs among $\\{A,B,E,H\\}$ are edges, namely $\\{A,B\\},\\{A,E\\},\\{A,H\\},\\{B,E\\},\\{B,H\\},\\{E,H\\}\\subset E$.", "answer": "$$\\boxed{A}$$", "id": "1455645"}, {"introduction": "The computational difficulty of a problem often depends on the structure of the input. This practice demonstrates that the NP-hard MAX-CLIQUE problem becomes efficiently solvable on special classes of graphs, such as chordal graphs. By using a given \"Perfect Elimination Ordering\" (PEO), you will see how leveraging specific structural properties of a graph can lead to elegant and surprisingly efficient algorithms for problems that are intractable in the general case [@problem_id:1455663].", "problem": "A large-scale data analysis is to be performed on a distributed system composed of $n=12$ specialized data processing units (DPUs), labeled $P_1, P_2, \\ldots, P_{12}$. Due to data dependencies and communication patterns, some pairs of DPUs can process their assigned data chunks concurrently, while others cannot. The network of possible concurrencies can be modeled as a graph $G$, where the vertices are the DPUs and an edge connects two vertices if the corresponding DPUs can operate concurrently. This graph is known to be a chordal graph.\n\nA systems analyst has determined a specific ordering of the DPUs, $P_1, P_2, \\ldots, P_{12}$, which constitutes a Perfect Elimination Ordering (PEO) for the graph $G$. For each DPU $P_i$ (where $i$ ranges from 1 to 12), the number of other DPUs $P_j$ with a higher index ($j > i$) that can operate concurrently with $P_i$ has been recorded. Let this number be denoted by $c_i$. The sequence of these counts is given as:\n$c_1=6, c_2=6, c_3=5, c_4=5, c_5=4, c_6=3, c_7=3, c_8=3, c_9=2, c_{10}=1, c_{11}=1, c_{12}=0$.\n\nA set of DPUs that can all operate concurrently with each other corresponds to a clique in the graph $G$. Your task is to determine the maximum number of DPUs that can operate concurrently in this system.", "solution": "We model the system as a chordal graph $G$ with a given Perfect Elimination Ordering (PEO) $P_{1},P_{2},\\ldots,P_{12}$. For each $i$, let $N^{+}(P_{i})=\\{P_{j}: j>i \\text{ and } P_{i}P_{j} \\text{ is an edge}\\}$ denote the set of higher-index neighbors of $P_{i}$ in the PEO. By the defining property of a PEO in a chordal graph, for every $i$, the set $N^{+}(P_{i})$ is a clique.\n\nTherefore, for each $i$, the set $\\{P_{i}\\} \\cup N^{+}(P_{i})$ forms a clique of size $1+c_{i}$, where $c_{i}=|N^{+}(P_{i})|$ is given. This yields a lower bound on the clique number $\\omega(G)$:\n$$\n\\omega(G) \\geq \\max_{1 \\leq i \\leq 12} (1+c_{i})=1+\\max_{1 \\leq i \\leq 12} c_{i}.\n$$\nConversely, any clique $K$ in a chordal graph with a PEO has a unique earliest vertex $P_{i}$ (minimum index in $K$), and all other vertices of $K$ must lie in $N^{+}(P_{i})$ by the PEO property. Hence $|K| \\leq 1 + |N^{+}(P_{i})| = 1 + c_{i}$. Taking the maximum over all cliques shows the reverse inequality, so we have the exact formula\n$$\n\\omega(G)=1+\\max_{1 \\leq i \\leq 12} c_{i}.\n$$\nFrom the data $c_{1}=6, c_{2}=6, c_{3}=5, c_{4}=5, c_{5}=4, c_{6}=3, c_{7}=3, c_{8}=3, c_{9}=2, c_{10}=1, c_{11}=1, c_{12}=0$, the maximum is $\\max_{i} c_{i}=6$. Therefore,\n$$\n\\omega(G)=1+6=7.\n$$\nThe maximum number of DPUs that can operate concurrently equals the size of a maximum clique, which is $7$.", "answer": "$$\\boxed{7}$$", "id": "1455663"}]}