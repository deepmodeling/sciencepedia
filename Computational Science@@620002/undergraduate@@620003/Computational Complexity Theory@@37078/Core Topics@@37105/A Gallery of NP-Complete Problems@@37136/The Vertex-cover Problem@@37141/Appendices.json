{"hands_on_practices": [{"introduction": "Before tackling complex optimization, it is crucial to master the fundamentals. This first exercise provides a direct application of the vertex cover definition in a familiar context: network security. Your task is to act as a network administrator and verify a proposed monitoring setup, which challenges you to confirm whether a given set of nodes truly covers every connection in the network. This practice solidifies your understanding of the core requirement that every edge must be incident to at least one vertex in the cover. [@problem_id:1466177]", "problem": "In network administration, a vertex cover is a crucial concept for monitoring and security. A set of nodes (servers, routers, etc.) is considered a vertex cover if every direct connection (edge) in the network is linked to at least one node in the set. This ensures that by monitoring only the nodes in the cover set, all traffic along every connection can be observed.\n\nAn automated network analysis tool has been run on a small corporate network. The network consists of eight servers, labeled A, B, C, D, E, F, G, and H. The direct, bidirectional connections between these servers are given by the set of pairs:\n{(A, B), (A, C), (B, C), (B, D), (C, E), (D, E), (D, F), (E, G), (F, H), (G, H)}.\n\nThe tool claims that the set of servers {A, B, C, D, E, G} constitutes a valid vertex cover for the entire network. Your task is to verify this claim. You have found that the claim is false and there is exactly one connection that is not covered by the proposed set of servers.\n\nWhich of the following connections proves that the tool's claim is incorrect?\n\nA. (B, C)\n\nB. (D, F)\n\nC. (E, G)\n\nD. (F, H)\n\nE. (G, H)", "solution": "A vertex cover $S$ in a graph with edge set $E$ satisfies the condition that for every edge $(u,v) \\in E$, at least one endpoint is in $S$, i.e., $u \\in S$ or $v \\in S$.\n\nGiven $S=\\{A,B,C,D,E,G\\}$ and \n$$E=\\{(A,B),(A,C),(B,C),(B,D),(C,E),(D,E),(D,F),(E,G),(F,H),(G,H)\\},$$\ncheck each edge:\n- $(A,B)$: $A \\in S$ and $B \\in S$; covered.\n- $(A,C)$: $A \\in S$ and $C \\in S$; covered.\n- $(B,C)$: $B \\in S$ and $C \\in S$; covered.\n- $(B,D)$: $B \\in S$ and $D \\in S$; covered.\n- $(C,E)$: $C \\in S$ and $E \\in S$; covered.\n- $(D,E)$: $D \\in S$ and $E \\in S$; covered.\n- $(D,F)$: $D \\in S$ (regardless of $F \\notin S$); covered.\n- $(E,G)$: $E \\in S$ and $G \\in S$; covered.\n- $(F,H)$: $F \\notin S$ and $H \\notin S$; not covered.\n- $(G,H)$: $G \\in S$ (regardless of $H \\notin S$); covered.\n\nExactly one edge is not covered, namely $(F,H)$, which corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1466177"}, {"introduction": "Moving from verification to optimization, this problem asks you to determine the size of a minimum vertex cover in a fully interconnected system, modeled as a complete graph $K_n$. This scenario introduces a powerful and elegant problem-solving principle: the duality between a vertex cover and its complement, an independent set. By analyzing the properties of the vertices *not* included in the cover, you can derive a sharp and provable bound on the minimum cover size. [@problem_id:1466204]", "problem": "In a new quantum computing architecture, $n$ qubits are designed to be fully interconnected, meaning every qubit can interact directly with every other qubit. A diagnostic tool needs to be placed on a subset of these qubits to monitor all interactions. The rule for placing the tool is that for any given pair of interacting qubits, the tool must be present on at least one of the two qubits in that pair. The company wants to minimize the cost, which is directly proportional to the number of qubits on which the tool is installed.\n\nLet $C(n)$ be the minimum number of qubits that must have the diagnostic tool installed in a system with $n$ qubits, where $n \\ge 2$. Find a formula for $C(n)$ in terms of $n$.", "solution": "Model the $n$ qubits as the vertices $V$ of the complete graph $K_{n}$, where each pair of qubits corresponds to an edge. Let $S \\subseteq V$ be the set of qubits on which the diagnostic tool is installed. The rule that every interacting pair must include at least one qubit with the tool is exactly the definition of a vertex cover: for every edge $uv$, at least one of $u$ or $v$ lies in $S$.\n\nEquivalently, the complement $T = V \\setminus S$ must be an independent set (no two vertices in $T$ can be adjacent). In $K_{n}$, every pair of distinct vertices is adjacent, so the largest independent set has size $1$. Therefore,\n$$\n|T| \\leq 1 \\quad \\Rightarrow \\quad |S| = n - |T| \\geq n - 1.\n$$\nThis gives the lower bound $C(n) \\geq n - 1$.\n\nTo achieve this bound, select any single vertex $v \\in V$ to exclude, and set $S = V \\setminus \\{v\\}$. Then $|S| = n - 1$, and every edge either has both endpoints in $S$ or exactly one endpoint in $S$, so all edges are covered. Hence this $S$ is a valid vertex cover of size $n - 1$, proving optimality.\n\nTherefore, the minimum number of qubits that must have the diagnostic tool installed is\n$$\nC(n) = n - 1 \\quad \\text{for} \\quad n \\geq 2.\n$$", "answer": "$$\\boxed{n-1}$$", "id": "1466204"}, {"introduction": "The Vertex Cover problem is famous for being computationally difficult. This exercise provides a hands-on look at *why* it is considered hard by guiding you through a polynomial-time reduction, a foundational technique in complexity theory. You will construct a graph from a given 2-satisfiability (2-SAT) formula and find its minimum vertex cover, thereby revealing the deep connection between graph problems and logical satisfiability. [@problem_id:1466189]", "problem": "A common technique in computational complexity theory involves transforming a problem from one domain into another. This problem explores a specific transformation from a Boolean satisfiability problem to a graph theory problem.\n\nConsider a method for converting any Boolean formula in 2-Conjunctive Normal Form (2-CNF) into an undirected graph $G=(V, E)$. A 2-CNF formula $\\Phi$ has $n$ variables $x_1, \\dots, x_n$ and $m$ clauses $C_1, \\dots, C_m$, where each clause is the disjunction (OR) of two literals. A literal is either a variable $x_i$ or its negation $\\neg x_i$.\n\nThe graph $G$ is constructed according to the following rules:\n\n1.  **Variable-Nodes**: For each variable $x_i$ (from $i=1$ to $n$), create a pair of nodes: one labeled $v_i$ representing the literal $x_i$, and another labeled $v'_i$ representing the literal $\\neg x_i$. For each pair, add an edge connecting them, i.e., the edge $(v_i, v'_i)$.\n\n2.  **Clause-Nodes**: For each clause $C_j = (l_a \\lor l_b)$ (from $j=1$ to $m$), where $l_a$ and $l_b$ are literals, create a pair of nodes: one labeled $c_{j,a}$ and another labeled $c_{j,b}$. Add an edge connecting this pair, i.e., the edge $(c_{j,a}, c_{j,b})$.\n\n3.  **Connecting Edges**: For each clause-node, add an edge connecting it to the variable-node that represents the same literal. Specifically, for a clause $C_j = (l_a \\lor l_b)$, the node $c_{j,a}$ is connected to the variable-node for literal $l_a$, and the node $c_{j,b}$ is connected to the variable-node for literal $l_b$. For example, if $l_a$ is the literal $\\neg x_k$, an edge is created between $c_{j,a}$ and the variable-node $v'_k$.\n\nApply this construction procedure to the following 2-CNF formula:\n$$ \\Phi = (x_1 \\lor \\neg x_3) \\land (\\neg x_1 \\lor x_2) \\land (\\neg x_2 \\lor x_3) $$\n\nYour task is to determine the size of the minimum vertex cover for the resulting graph $G$. Recall that a vertex cover of a graph is a subset of its vertices such that every edge in the graph is incident to (i.e., touches) at least one vertex in the subset.", "solution": "Construct the graph $G=(V,E)$ following the rules:\n\n1) Variable-nodes and their edges:\n- Variables: $x_1,x_2,x_3$.\n- Variable-nodes: $v_1$ for $x_1$, $v'_1$ for $\\neg x_1$; $v_2$ for $x_2$, $v'_2$ for $\\neg x_2$; $v_3$ for $x_3$, $v'_3$ for $\\neg x_3$.\n- Variable-pair edges:\n$$\nE_{\\text{var}}=\\{(v_1,v'_1),\\ (v_2,v'_2),\\ (v_3,v'_3)\\}.\n$$\n\n2) Clause-nodes and their edges:\n- Clauses: $C_1=(x_1\\lor \\neg x_3)$, $C_2=(\\neg x_1\\lor x_2)$, $C_3=(\\neg x_2\\lor x_3)$.\n- Clause-nodes: for each $C_j=(l_a\\lor l_b)$, nodes $c_{j,a}$ and $c_{j,b}$ with edge $(c_{j,a},c_{j,b})$.\nThus the clause-pair edges are\n$$\nE_{\\text{cl}}=\\{(c_{1,a},c_{1,b}),\\ (c_{2,a},c_{2,b}),\\ (c_{3,a},c_{3,b})\\}.\n$$\n\n3) Connecting edges from each clause-node to its corresponding literalâ€™s variable-node:\n- For $C_1=(x_1\\lor \\neg x_3)$: $(c_{1,a},v_1)$, $(c_{1,b},v'_3)$.\n- For $C_2=(\\neg x_1\\lor x_2)$: $(c_{2,a},v'_1)$, $(c_{2,b},v_2)$.\n- For $C_3=(\\neg x_2\\lor x_3)$: $(c_{3,a},v'_2)$, $(c_{3,b},v_3)$.\n\nLower bound via matching:\nConsider the set of edges\n$$\nM=E_{\\text{var}}\\cup E_{\\text{cl}}=\\{(v_1,v'_1),\\ (v_2,v'_2),\\ (v_3,v'_3),\\ (c_{1,a},c_{1,b}),\\ (c_{2,a},c_{2,b}),\\ (c_{3,a},c_{3,b})\\}.\n$$\nThese six edges are pairwise vertex-disjoint: the three variable-pair edges share no endpoints with each other and use only variable-nodes, and the three clause-pair edges share no endpoints with each other and use only clause-nodes; variable-nodes and clause-nodes are disjoint. Hence $M$ is a matching of size $|M|=6$. By the general inequality that the size of any vertex cover is at least the size of any matching, every vertex cover has size at least $6$.\n\nUpper bound via explicit cover of size $6$:\nExhibit a vertex cover of size $6$ as follows. Choose the assignment $x_1=\\text{True}$, $x_2=\\text{True}$, $x_3=\\text{True}$. Select the corresponding variable-nodes\n$$\nS_{\\text{var}}=\\{v_1,v_2,v_3\\}.\n$$\nFor each clause, pick the clause-node that corresponds to the literal whose variable-node is not in $S_{\\text{var}}$:\n- For $C_1=(x_1\\lor \\neg x_3)$, select $c_{1,b}$ (the node for $\\neg x_3$).\n- For $C_2=(\\neg x_1\\lor x_2)$, select $c_{2,a}$ (the node for $\\neg x_1$).\n- For $C_3=(\\neg x_2\\lor x_3)$, select $c_{3,a}$ (the node for $\\neg x_2$).\nThus\n$$\nS_{\\text{cl}}=\\{c_{1,b},c_{2,a},c_{3,a}\\},\\quad S=S_{\\text{var}}\\cup S_{\\text{cl}},\\quad |S|=6.\n$$\nVerify coverage of all edges:\n- Each variable-pair edge $(v_i,v'_i)$ is covered since exactly one of its endpoints from $\\{v_i,v'_i\\}$ lies in $S_{\\text{var}}$ for each $i \\in \\{1,2,3\\}$.\n- Each clause-pair edge $(c_{j,a},c_{j,b})$ is covered since $S_{\\text{cl}}$ contains exactly one endpoint for each $j \\in \\{1,2,3\\}$.\n- Connecting edges: For $C_1$, $(c_{1,a},v_1)$ is covered by $v_1 \\in S$, and $(c_{1,b},v'_3)$ is covered by $c_{1,b} \\in S$. For $C_2$, $(c_{2,a},v'_1)$ is covered by $c_{2,a} \\in S$, and $(c_{2,b},v_2)$ is covered by $v_2 \\in S$. For $C_3$, $(c_{3,a},v'_2)$ is covered by $c_{3,a} \\in S$, and $(c_{3,b},v_3)$ is covered by $v_3 \\in S$.\n\nTherefore $S$ is a vertex cover of size $6$. Combined with the matching lower bound, the minimum vertex cover size is exactly $6$.", "answer": "$$\\boxed{6}$$", "id": "1466189"}]}