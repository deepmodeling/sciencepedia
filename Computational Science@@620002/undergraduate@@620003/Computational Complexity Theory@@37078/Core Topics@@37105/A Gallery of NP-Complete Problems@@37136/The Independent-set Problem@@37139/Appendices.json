{"hands_on_practices": [{"introduction": "To begin our practical exploration, we will tackle the Independent Set problem on one of the most fundamental graph structures: the path graph. This exercise [@problem_id:1458499] serves as an excellent entry point, allowing you to build intuition by applying the definitions to a simple, linear arrangement of vertices. The process of deriving a closed-form solution will introduce you to a powerful proof strategy: establishing a lower bound by construction and an upper bound by a partitioning argument.", "problem": "In computational graph theory, an *independent set* of a graph is a subset of vertices in which no two vertices are adjacent. The *maximum independent set* problem is the task of finding an independent set of the largest possible size.\n\nConsider a special type of graph called a *path graph*, denoted $P_n$, which consists of $n$ vertices labeled $v_1, v_2, \\ldots, v_n$, and edges connecting $v_i$ to $v_{i+1}$ for all $1 \\le i  n$. This structure can model various real-world scenarios, such as stations along a linear assembly line or communication nodes in a simple chain.\n\nYour task is to determine a closed-form expression for the size of the maximum independent set of a path graph $P_n$ as a function of the number of vertices, $n$. Your expression should use standard mathematical functions and should not be a recursive formula. For this problem, you may use the ceiling function, denoted $\\lceil x \\rceil$, which gives the smallest integer greater than or equal to $x$.", "solution": "Let the path graph be $P_n$ with vertex set $V = \\{v_1, v_2, \\ldots, v_n\\}$ and edge set $E = \\{(v_i, v_{i+1}) \\mid 1 \\le i  n\\}$. We are looking for the size of the maximum independent set, which we denote as $\\alpha(P_n)$. To find this value, we will establish both a lower bound and an upper bound for $\\alpha(P_n)$ and show that they are equal.\n\nFirst, to establish a lower bound, we can construct a valid independent set and calculate its size. The size of the maximum independent set must be at least as large as the size of any particular independent set. Consider the set of vertices with odd indices: $S_{odd} = \\{v_1, v_3, v_5, \\ldots\\}$. An edge in $P_n$ only connects vertices with consecutive indices. Since any two vertices $v_i, v_j$ in $S_{odd}$ have indices that differ by at least 2, no two vertices in $S_{odd}$ are adjacent. Therefore, $S_{odd}$ is an independent set.\n\nNow, let's determine the size of $S_{odd}$.\n- If $n$ is odd, we can write $n = 2k-1$ for some integer $k \\ge 1$. The odd indices are $1, 3, \\ldots, 2k-1$. There are exactly $k$ such indices. We can express $k$ in terms of $n$ as $k = \\frac{n+1}{2}$.\n- If $n$ is even, we can write $n = 2k$ for some integer $k \\ge 1$. The odd indices are $1, 3, \\ldots, 2k-1$. There are exactly $k$ such indices. We can express $k$ in terms of $n$ as $k = \\frac{n}{2}$.\n\nWe can unify these two cases using the ceiling function.\n- If $n=2k-1$ (odd), then $\\lceil n/2 \\rceil = \\lceil (2k-1)/2 \\rceil = \\lceil k - 1/2 \\rceil = k$.\n- If $n=2k$ (even), then $\\lceil n/2 \\rceil = \\lceil (2k)/2 \\rceil = \\lceil k \\rceil = k$.\nIn both cases, the size of our constructed independent set $S_{odd}$ is $|S_{odd}| = \\lceil n/2 \\rceil$. Since we have found an independent set of this size, the maximum size must be at least this large. Thus, we have the lower bound: $\\alpha(P_n) \\ge \\lceil n/2 \\rceil$.\n\nNext, to establish an upper bound, we will show that no independent set can be larger than $\\lceil n/2 \\rceil$. We can partition the vertices of the path graph into groups of adjacent vertices. Consider the set of $\\lfloor n/2 \\rfloor$ disjoint edges (pairs of adjacent vertices): $\\{(v_1, v_2), (v_3, v_4), \\ldots, (v_{2\\lfloor n/2 \\rfloor-1}, v_{2\\lfloor n/2 \\rfloor})\\}$.\nAn independent set can, by definition, contain at most one vertex from any adjacent pair.\n\n- Case 1: $n$ is even. Let $n = 2k$. The vertex set can be perfectly partitioned into $k$ pairs of adjacent vertices: $\\{v_1, v_2\\}, \\{v_3, v_4\\}, \\ldots, \\{v_{2k-1}, v_{2k}\\}$. An independent set can choose at most one vertex from each of these $k$ pairs. Therefore, the maximum possible size of an independent set is $k$. Since $n=2k$, this is $n/2$. For even $n$, $n/2 = \\lceil n/2 \\rceil$. So, for even $n$, $\\alpha(P_n) \\le n/2 = \\lceil n/2 \\rceil$.\n\n- Case 2: $n$ is odd. Let $n = 2k+1$. We can form $k$ pairs of adjacent vertices $\\{v_1, v_2\\}, \\{v_3, v_4\\}, \\ldots, \\{v_{2k-1}, v_{2k}\\}$, which leaves one vertex, $v_{2k+1}$, unpaired. An independent set can take at most one vertex from each of the $k$ pairs, and it can also include the single remaining vertex $v_{2k+1}$. Thus, the maximum possible size of an independent set is $k+1$. For $n=2k+1$, we have $k+1 = (n-1)/2 + 1 = (n+1)/2$. For odd $n$, $(n+1)/2 = \\lceil n/2 \\rceil$. So, for odd $n$, $\\alpha(P_n) \\le (n+1)/2 = \\lceil n/2 \\rceil$.\n\nIn both cases, we have shown that $\\alpha(P_n) \\le \\lceil n/2 \\rceil$.\n\nCombining our results, we have established that $\\alpha(P_n) \\ge \\lceil n/2 \\rceil$ (the lower bound) and $\\alpha(P_n) \\le \\lceil n/2 \\rceil$ (the upper bound). The only way for both of these inequalities to be true is if the size of the maximum independent set is exactly equal to this value.\n\nTherefore, the closed-form expression for the size of the maximum independent set of a path graph $P_n$ is $\\lceil n/2 \\rceil$.", "answer": "$$\\boxed{\\lceil \\frac{n}{2} \\rceil}$$", "id": "1458499"}, {"introduction": "Beyond analyzing single graph structures, it is crucial to understand how different graph problems relate to one another. This next practice [@problem_id:1458479] explores the deep connection between finding an independent set and its dual problem, the vertex cover. By proving this relationship, you will uncover a fundamental theorem in graph theory that provides a powerful theoretical tool for analysis and problem-solving, demonstrating that these two objectives are two sides of the same coin.", "problem": "In computational social science, a network of individuals can be modeled as a graph $G=(V, E)$, where the set of vertices $V$ represents the individuals and the set of edges $E$ represents a direct relationship (e.g., friendship or collaboration) between pairs of individuals.\n\nConsider a social network with $n$ individuals. Within this network, we want to identify a \"monitoring group.\" A monitoring group is a subset of individuals chosen such that every direct relationship in the network involves at least one individual from this group. For operational efficiency, the goal is to find a monitoring group with the smallest possible size. After a thorough analysis of the network structure, it is determined that the minimum size for such a group is $k$.\n\nSeparately, we want to form a \"focus group.\" A focus group is a subset of individuals where no two members have a direct relationship with each other. To maximize diverse, independent opinions, the goal is to form a focus group with the largest possible size.\n\nGiven the information above, determine the maximum possible size of the focus group. Express your answer as a symbolic expression in terms of $n$ and $k$.", "solution": "Interpret the social network as a finite, simple, undirected graph $G=(V,E)$ with $|V|=n$. A monitoring group is a vertex cover: a set $C \\subseteq V$ such that every edge in $E$ has at least one endpoint in $C$. The problem states that the minimum size of such a set is $k$, so the vertex cover number is $\\tau(G)=k$.\n\nA focus group is an independent set: a set $I \\subseteq V$ such that no two vertices in $I$ are adjacent. Its maximum possible size is the independence number $\\alpha(G)$, which we are to determine in terms of $n$ and $k$.\n\nFirst, observe that the complement of any vertex cover is an independent set. Indeed, let $C \\subseteq V$ be a vertex cover. If there were an edge with both endpoints in $V \\setminus C$, that edge would have no endpoint in $C$, contradicting the definition of a vertex cover. Hence $V \\setminus C$ is independent. Taking $C$ to be a minimum vertex cover with $|C|=\\tau(G)=k$, we obtain an independent set of size $|V \\setminus C|=n-k$, so\n$$\n\\alpha(G) \\geq n - \\tau(G) = n - k.\n$$\n\nConversely, the complement of any independent set is a vertex cover. Let $I \\subseteq V$ be independent. For any edge, it cannot have both endpoints in $I$, so at least one endpoint lies in $V \\setminus I$, implying $V \\setminus I$ covers all edges. Therefore $|V \\setminus I| \\geq \\tau(G)$ for every independent set $I$, and in particular for a maximum independent set of size $\\alpha(G)$,\n$$\n\\tau(G) \\leq n - \\alpha(G) \\quad \\Longrightarrow \\quad \\alpha(G) \\leq n - \\tau(G) = n - k.\n$$\n\nCombining the two inequalities yields\n$$\n\\alpha(G) = n - \\tau(G) = n - k.\n$$\nTherefore, the maximum possible size of the focus group is $n - k$.", "answer": "$$\\boxed{n-k}$$", "id": "1458479"}, {"introduction": "While the Independent Set problem is computationally hard for general graphs, its complexity can change dramatically when we restrict our attention to specific graph classes. This exercise [@problem_id:1458498] challenges you to move from combinatorial proofs to algorithmic design by tackling the problem on a tree structure. You will develop an efficient dynamic programming algorithm, a vital technique in computer science, to see how a problem's perceived difficulty can be overcome by exploiting its underlying structure.", "problem": "A technology company with 12 employees, numbered 0 through 11, has a strict hierarchical reporting structure. Employee 0 is the Chief Executive Officer (CEO). The direct manager for each other employee is specified by the following list, where the element at index `i` denotes the manager of employee `i+1`: `[0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 5]`. For example, employee 1's manager is employee 0.\n\nThe company is forming a special task force. To ensure diverse perspectives and avoid conflicts of interest, the selection process has one firm rule: no employee can be on the task force with their direct manager. Your task is to determine the maximum possible number of employees that can be selected for this task force while adhering to this rule.", "solution": "This problem asks for the size of the largest possible set of employees such that no two employees in the set have a direct manager-report relationship. This is equivalent to finding the size of a maximum independent set in a tree. The company's hierarchical structure forms a tree, where employees are nodes and a direct reporting link is an edge.\n\nWe can solve this problem efficiently using dynamic programming on the tree. Let's process the tree from the leaves up to the root (a post-order traversal). For each employee (node) `u`, we will compute two values:\n1.  $S_{in}(u)$: The size of the largest valid task force within the subtree of employees managed by `u` (including `u` itself), *given that `u` is selected* for the task force.\n2.  $S_{out}(u)$: The size of the largest valid task force within the subtree of employees managed by `u` (including `u` itself), *given that `u` is not selected* for the task force.\n\nThe recurrence relations for these values are as follows:\n\nIf employee `u` is selected for the task force, then none of their direct reports can be selected. Thus, to maximize the size, we must choose the largest possible task force from each direct report's subtree under the condition that the report is *not* selected.\n$$S_{in}(u) = 1 + \\sum_{v \\in \\text{children}(u)} S_{out}(v)$$\nThe `1` accounts for employee `u` being selected.\n\nIf employee `u` is not selected, then for each of their direct reports `v`, we are free to either select `v` or not. To maximize the total size, we should choose the better option for each child's subtree independently. The best we can do for `v`'s subtree is $\\max(S_{in}(v), S_{out}(v))$.\n$$S_{out}(u) = \\sum_{v \\in \\text{children}(u)} \\max(S_{in}(v), S_{out}(v))$$\n\nThe base cases for this recursion are the leaf nodes (employees with no direct reports). For any leaf employee `l`:\n- $S_{in}(l) = 1$ (the task force consists only of `l`).\n- $S_{out}(l) = 0$ (the task force from this subtree is empty).\n\nAfter computing these values for all employees up to the root (CEO, employee 0), the final answer is the maximum of the two possibilities for the entire company: $\\max(S_{in}(0), S_{out}(0))$.\n\nFirst, let's represent the company structure as a list of children for each manager:\n- Children of 0: {1, 2}\n- Children of 1: {3, 4}\n- Children of 2: {5, 6}\n- Children of 3: {7, 8}\n- Children of 4: {9}\n- Children of 5: {10, 11}\n- Employees 6, 7, 8, 9, 10, 11 are leaves (have no children).\n\nNow, we compute the values in a post-order traversal (from leaves up to the root). We denote the pair of values for employee `u` as $[S_{out}(u), S_{in}(u)]$.\n\n1.  **Leaf Employees (6, 7, 8, 9, 10, 11):**\n    For any leaf `l`, $[S_{out}(l), S_{in}(l)] = [0, 1]$.\n\n2.  **Employee 9 (leaf):** Values are $[0, 1]$.\n\n3.  **Employee 4 (manager of 9):**\n    $S_{in}(4) = 1 + S_{out}(9) = 1 + 0 = 1$.\n    $S_{out}(4) = \\max(S_{in}(9), S_{out}(9)) = \\max(1, 0) = 1$.\n    Values for 4: $[1, 1]$.\n\n4.  **Employees 7, 8 (leaves):** Values are $[0, 1]$.\n\n5.  **Employee 3 (manager of 7, 8):**\n    $S_{in}(3) = 1 + S_{out}(7) + S_{out}(8) = 1 + 0 + 0 = 1$.\n    $S_{out}(3) = \\max(S_{in}(7), S_{out}(7)) + \\max(S_{in}(8), S_{out}(8)) = 1 + 1 = 2$.\n    Values for 3: $[2, 1]$.\n\n6.  **Employee 1 (manager of 3, 4):**\n    $S_{in}(1) = 1 + S_{out}(3) + S_{out}(4) = 1 + 2 + 1 = 4$.\n    $S_{out}(1) = \\max(S_{in}(3), S_{out}(3)) + \\max(S_{in}(4), S_{out}(4)) = \\max(1, 2) + \\max(1, 1) = 2 + 1 = 3$.\n    Values for 1: $[3, 4]$.\n\n7.  **Employees 10, 11 (leaves):** Values are $[0, 1]$.\n\n8.  **Employee 5 (manager of 10, 11):**\n    $S_{in}(5) = 1 + S_{out}(10) + S_{out}(11) = 1 + 0 + 0 = 1$.\n    $S_{out}(5) = \\max(S_{in}(10), S_{out}(10)) + \\max(S_{in}(11), S_{out}(11)) = 1 + 1 = 2$.\n    Values for 5: $[2, 1]$.\n\n9.  **Employee 6 (leaf):** Values are $[0, 1]$.\n\n10. **Employee 2 (manager of 5, 6):**\n    $S_{in}(2) = 1 + S_{out}(5) + S_{out}(6) = 1 + 2 + 0 = 3$.\n    $S_{out}(2) = \\max(S_{in}(5), S_{out}(5)) + \\max(S_{in}(6), S_{out}(6)) = \\max(1, 2) + \\max(1, 0) = 2 + 1 = 3$.\n    Values for 2: $[3, 3]$.\n\n11. **Employee 0 (CEO, manager of 1, 2):**\n    $S_{in}(0) = 1 + S_{out}(1) + S_{out}(2) = 1 + 3 + 3 = 7$.\n    $S_{out}(0) = \\max(S_{in}(1), S_{out}(1)) + \\max(S_{in}(2), S_{out}(2)) = \\max(4, 3) + \\max(3, 3) = 4 + 3 = 7$.\n    Values for 0: $[7, 7]$.\n\nFinally, the maximum size of the task force is the best result we can get starting from the CEO, which is $\\max(S_{in}(0), S_{out}(0)) = \\max(7, 7) = 7$.", "answer": "$$\\boxed{7}$$", "id": "1458498"}]}