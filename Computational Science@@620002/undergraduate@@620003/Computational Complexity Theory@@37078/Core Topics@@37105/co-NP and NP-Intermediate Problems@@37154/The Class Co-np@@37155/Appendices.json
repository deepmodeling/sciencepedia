{"hands_on_practices": [{"introduction": "To begin our practical exploration of the class co-NP, we start with a problem rooted in graph theory. This exercise asks whether a universal property holds for *every* path between two points in a graph, a classic signature of problems potentially in co-NP. By tackling this problem [@problem_id:1451814], you will practice the fundamental skill of defining the complement of a problem and analyzing its membership in NP, the first step in classifying any co-NP problem.", "problem": "Consider the following decision problem, which we will call `UNIVERSAL-OBSTRUCTION`.\n\nAn instance of the problem is given by a tuple $\\langle G, s, t, F \\rangle$, where:\n- $G=(V, E)$ is a directed graph with a set of vertices $V$ and a set of directed edges $E$.\n- $s \\in V$ is a designated source vertex.\n- $t \\in V$ is a designated sink vertex, where $s \\neq t$.\n- $F \\subseteq V$ is a set of \"forbidden\" vertices.\n\nThe question is: **Is it true that every path from the source vertex $s$ to the sink vertex $t$ must pass through at least one vertex in the set $F$?**\n\nA path is a sequence of vertices $(v_0, v_1, \\ldots, v_k)$ such that $v_0=s$, $v_k=t$, and for each $i \\in \\{0, \\ldots, k-1\\}$, the edge $(v_i, v_{i+1})$ is in $E$. A path \"passes through\" a vertex $v$ if $v$ is one of the vertices in the sequence $(v_0, v_1, \\ldots, v_k)$.\n\nAnalyze the computational complexity of the `UNIVERSAL-OBSTRUCTION` problem. Which of the following statements about its complexity are correct? Select all that apply.\n\n(You may assume that the complexity classes P, NP, and co-NP are distinct from each other where necessary, for example P $\\neq$ NP.)\n\nA. `UNIVERSAL-OBSTRUCTION` is in P.\n\nB. `UNIVERSAL-OBSTRUCTION` is in NP.\n\nC. `UNIVERSAL-OBSTRUCTION` is in co-NP.\n\nD. `UNIVERSAL-OBSTRUCTION` is NP-complete.\n\nE. `UNIVERSAL-OBSTRUCTION` is co-NP-complete.\n\nF. `UNIVERSAL-OBSTRUCTION` is not in NP.\n\nG. `UNIVERSAL-OBSTRUCTION` is not in co-NP.", "solution": "To determine the complexity of the `UNIVERSAL-OBSTRUCTION` problem, we will analyze its properties with respect to the complexity classes P, NP, and co-NP.\n\nFirst, let's analyze the structure of the problem. The question asks if a property (\"passes through a forbidden vertex\") holds for *every* path from $s$ to $t$. Problems with this universal quantifier (\"for all...\") are often candidates for the class co-NP.\n\nA decision problem is in the class **co-NP** if its complement is in the class **NP**. Let's define the complement of `UNIVERSAL-OBSTRUCTION`. The original problem asks if ALL $s-t$ paths are \"obstructed\". A \"no\" answer to this question means that it is *not* true that all paths are obstructed. This is equivalent to saying that there *exists at least one* $s-t$ path that is *not* obstructed.\n\nLet's call this complement problem `AVOIDING-PATH`.\n- **Instance:** $\\langle G, s, t, F \\rangle$\n- **Question:** Does there exist a path from $s$ to $t$ that does not pass through any vertex in the set $F$?\n\nNow, let's determine if `AVOIDING-PATH` is in NP. A problem is in NP if a \"yes\" answer can be verified in polynomial time given a suitable certificate.\nFor `AVOIDING-PATH`, a certificate for a \"yes\" instance would be the path itself. Let's say the path is $p = (v_0, v_1, \\ldots, v_k)$.\nA polynomial-time verifier can check the following:\n1.  The path starts at $s$ and ends at $t$: check if $v_0 = s$ and $v_k = t$.\n2.  The path is valid in $G$: for each $i \\in \\{0, \\ldots, k-1\\}$, check if the edge $(v_i, v_{i+1})$ exists in $E$.\n3.  The path avoids all forbidden vertices: for each vertex $v_i$ in the path, check that $v_i \\notin F$.\n\nThe length of such a path is at most $|V|$, so the certificate size is polynomial in the input size. Each of the verification steps can be performed in polynomial time. Thus, `AVOIDING-PATH` is in NP.\n\nSince the complement of `UNIVERSAL-OBSTRUCTION` is in NP, by definition, **`UNIVERSAL-OBSTRUCTION` is in co-NP**. This means option **C** is correct.\n\nNow, let's investigate if the problem belongs to a more restrictive class, namely P. A problem is in P if it can be solved by a deterministic algorithm in polynomial time. Let's reconsider the `AVOIDING-PATH` problem. We can devise a direct algorithm to solve it.\n\n**Algorithm for `AVOIDING-PATH`:**\n1.  Construct a new graph $G'$ by removing all forbidden vertices from $G$. The set of vertices in $G'$ is $V' = V \\setminus F$. The set of edges $E'$ consists of all edges $(u,v) \\in E$ such that both $u$ and $v$ are in $V'$.\n2.  The problem `AVOIDING-PATH` is now equivalent to asking if there is a path from $s$ to $t$ in the graph $G'$.\n3.  This is a standard graph reachability problem. Before we solve it, we must first check if $s$ or $t$ were removed. If $s \\in F$ or $t \\in F$, then no path consisting entirely of non-forbidden vertices can exist, so the answer to `AVOIDING-PATH` is \"no\".\n4.  If $s \\notin F$ and $t \\notin F$, we can run a graph traversal algorithm like Breadth-First Search (BFS) or Depth-First Search (DFS) starting from $s$ on the graph $G'$. If the search reaches $t$, an avoiding path exists. If the search finishes without reaching $t$, no such path exists.\n\nThe construction of $G'$ and the execution of BFS/DFS both take polynomial time (specifically, $O(|V| + |E|)$). Therefore, `AVOIDING-PATH` is in P.\n\nThe class P is closed under complementation (i.e., if a language $L$ is in P, then its complement $\\bar{L}$ is also in P). Since `AVOIDING-PATH` is in P, its complement, **`UNIVERSAL-OBSTRUCTION`, must also be in P**. This means option **A** is correct.\n\nNow we can evaluate all the options:\n- **A. `UNIVERSAL-OBSTRUCTION` is in P.** This is **correct**, as we have demonstrated a polynomial-time algorithm for it.\n- **B. `UNIVERSAL-OBSTRUCTION` is in NP.** This is **correct**. Any problem in P is also in NP (P $\\subseteq$ NP). A polynomial-time decider for the problem can also act as a verifier that ignores the certificate.\n- **C. `UNIVERSAL-OBSTRUCTION` is in co-NP.** This is also **correct**. Any problem in P is also in co-NP (P $\\subseteq$ co-NP). We also showed this directly by proving its complement is in NP.\n- **D. `UNIVERSAL-OBSTRUCTION` is NP-complete.** This is **incorrect**. A problem in P can only be NP-complete if P=NP. The problem statement allows us to assume P $\\neq$ NP.\n- **E. `UNIVERSAL-OBSTRUCTION` is co-NP-complete.** This is **incorrect**. A problem in P can only be co-NP-complete if P=co-NP. Since P $\\subseteq$ co-NP, this would again imply P=co-NP. Given our assumption, this is false.\n- **F. `UNIVERSAL-OBSTRUCTION` is not in NP.** This is **incorrect**, as it is in P and thus in NP.\n- **G. `UNIVERSAL-OBSTRUCTION` is not in co-NP.** This is **incorrect**, as it is in P and thus in co-NP.\n\nTherefore, the correct statements are A, B, and C.", "answer": "$$\\boxed{ABC}$$", "id": "1451814"}, {"introduction": "We now shift our focus to the heart of computational logic to explore a canonical co-NP-complete problem. Determining if a Boolean formula is a tautology—true for all possible inputs—is a quintessential verification task. This practice [@problem_id:1451848] guides you through the elegant connection between the tautology problem for DNF formulas and the satisfiability problem for CNF formulas, demonstrating the profound relationship between NP and co-NP via De Morgan's laws.", "problem": "You are a junior software engineer on a quality assurance team for a company that designs custom logic circuits. The design team provides the functional specification of a circuit as a Boolean formula. Your task is to write a verification program that checks if a circuit's output is *always* logically true, regardless of the inputs. This property is crucial for safety-critical applications.\n\nThe formulas are provided in Disjunctive Normal Form (DNF). A brief review of the terminology is as follows:\n- A *variable* is a symbol, like $x_1$, that can be either true or false.\n- A *literal* is either a variable ($x_i$) or its negation ($\\neg x_i$).\n- A *term* is a conjunction (AND, denoted by $\\land$) of one or more literals. For example, $(x_1 \\land \\neg x_2 \\land x_3)$ is a term.\n- A formula in **Disjunctive Normal Form (DNF)** is a disjunction (OR, denoted by $\\lor$) of one or more terms. For example, $(x_1 \\land \\neg x_2) \\lor (\\neg x_1 \\land x_3)$ is a formula in DNF.\n- A *tautology* is a Boolean formula that evaluates to true for every possible assignment of truth values to its variables.\n\nThe problem of determining if an arbitrary DNF formula is a tautology is known as the DNF-TAUTOLOGY problem. To properly design your verification software and estimate its performance limitations, you need to understand its computational complexity.\n\nWhat is the most specific (i.e., smallest) well-known complexity class from the list below that is guaranteed to contain the DNF-TAUTOLOGY problem?\n\nA. P (Polynomial Time)\n\nB. NP (Nondeterministic Polynomial Time)\n\nC. co-NP\n\nD. PSPACE (Polynomial Space)", "solution": "Let a DNF formula be written as $F=\\bigvee_{i=1}^{k} T_{i}$ where each term $T_{i}$ is a conjunction of literals, $T_{i}=\\bigwedge_{j=1}^{m_{i}} \\ell_{ij}$. Using De Morgan’s laws and distributivity of negation over Boolean connectives, we have\n$$\n\\neg F \\;=\\; \\neg\\left(\\bigvee_{i=1}^{k} T_{i}\\right) \\;=\\; \\bigwedge_{i=1}^{k} \\neg T_{i}, \n\\qquad\n\\neg T_{i} \\;=\\; \\neg\\left(\\bigwedge_{j=1}^{m_{i}} \\ell_{ij}\\right) \\;=\\; \\bigvee_{j=1}^{m_{i}} \\neg \\ell_{ij}.\n$$\nHence $\\neg F$ is a CNF formula with exactly $k$ clauses, and the size of $\\neg F$ is linear in the size of $F$.\n\n$F$ is a tautology if and only if $\\neg F$ is unsatisfiable:\n$$\nF \\text{ is tautological} \\;\\Longleftrightarrow\\; \\forall a,\\; F(a)=\\text{true} \\;\\Longleftrightarrow\\; \\neg\\exists a,\\; \\neg F(a)=\\text{true} \\;\\Longleftrightarrow\\; \\neg F \\text{ is unsatisfiable}.\n$$\nTherefore, DNF-TAUTOLOGY is polynomial-time many-one equivalent to CNF-UNSAT. Since CNF-UNSAT is co-NP-complete (as the complement of SAT, which is NP-complete), it follows that DNF-TAUTOLOGY is co-NP-hard.\n\nMembership in co-NP holds because the complement problem (DNF non-tautology) admits a polynomial-time verifiable certificate: an assignment $a$ such that $F(a)=\\text{false}$. Given $a$, one can in polynomial time verify that every term $T_{i}$ evaluates to false (equivalently, for each $i$ there exists a literal in $T_{i}$ falsified by $a$), hence $F(a)=\\text{false}$.\n\nThus DNF-TAUTOLOGY is co-NP-complete, so among the listed classes, the smallest class that is guaranteed to contain it is co-NP.", "answer": "$$\\boxed{C}$$", "id": "1451848"}, {"introduction": "This final practice challenges you to apply your understanding of co-NP to a more nuanced question about Boolean formulas: uniqueness. Instead of asking if a formula is always true, we ask if it has at most one satisfying assignment. This problem [@problem_id:1451869] is an excellent exercise in proving co-NP-completeness by showing that its complement, finding at least two distinct solutions, is itself NP-complete.", "problem": "In computational complexity theory, we classify problems based on the resources required to solve them. A central topic is the study of Boolean satisfiability. A Boolean variable can take the value true (1) or false (0). A literal is either a variable (e.g., $x_i$) or its negation (e.g., $\\neg x_i$). A clause is a disjunction (OR, denoted by $\\lor$) of literals, for example $(x_1 \\lor \\neg x_2 \\lor x_3)$. A Boolean formula is in Conjunctive Normal Form (CNF) if it is a conjunction (AND, denoted by $\\land$) of clauses. For instance, $\\phi = (x_1 \\lor \\neg x_2) \\land (\\neg x_1 \\lor x_2)$ is a CNF formula.\n\nA truth assignment for a formula with $n$ variables is a function that assigns a value of true or false to each of the variables $x_1, \\dots, x_n$. A truth assignment is said to be a *satisfying assignment* if it makes the entire formula evaluate to true.\n\nConsider the following decision problem, which we define as a language called `AT_MOST_ONE_SAT`:\nThe input is the encoding of a Boolean formula $\\phi$ in CNF. The formula $\\phi$ is in the language `AT_MOST_ONE_SAT` if and only if $\\phi$ has at most one satisfying truth assignment (i.e., it has either zero satisfying assignments or exactly one satisfying assignment).\n\nBased on the standard definitions of complexity classes P, NP, and co-NP, which of the following statements provides the most accurate and provable classification for the language `AT_MOST_ONE_SAT`?\n\nA. The language `AT_MOST_ONE_SAT` is in P.\n\nB. The language `AT_MOST_ONE_SAT` is in NP.\n\nC. The language `AT_MOST_ONE_SAT` is in co-NP.\n\nD. `AT_MOST_ONE_SAT` is undecidable.\n\nE. `AT_MOST_ONE_SAT` is in NP and also in co-NP.", "solution": "We define the auxiliary language\n$$A_{2}\\mathrm{SAT}=\\{\\phi:\\ \\exists\\ \\text{two distinct assignments }a,b\\ \\text{such that }\\phi(a)=\\phi(b)=1\\}.$$\nBy definition of the target language,\n$$\\mathrm{AT\\_MOST\\_ONE\\_SAT}=\\{\\phi:\\ \\neg(\\exists\\ \\text{two distinct satisfying assignments})\\}=\\overline{A_{2}\\mathrm{SAT}}.$$\n\nFirst, $A_{2}\\mathrm{SAT}\\in\\mathrm{NP}$. A nondeterministic verifier can take as a certificate two assignments $(a,b)$, each of length $n$ for a formula on $n$ variables, check in polynomial time that $a\\neq b$, and evaluate $\\phi$ on $a$ and on $b$ in polynomial time to confirm $\\phi(a)=\\phi(b)=1$.\n\nSecond, $A_{2}\\mathrm{SAT}$ is NP-hard via a polynomial-time many-one reduction from $\\mathrm{SAT}$. Given any CNF formula $\\phi$, construct\n$$\\phi'=\\phi\\land(y\\lor\\neg y),$$\nwhere $y$ is a fresh variable. This transformation is computable in polynomial time and preserves CNF. If $\\phi$ is satisfiable, then for any satisfying assignment to the variables of $\\phi$, extending it with $y=0$ and $y=1$ yields at least two distinct satisfying assignments of $\\phi'$, so $\\phi'\\in A_{2}\\mathrm{SAT}$. If $\\phi$ is unsatisfiable, then $\\phi'$ is unsatisfiable and thus $\\phi'\\notin A_{2}\\mathrm{SAT}$. Hence $\\phi\\in\\mathrm{SAT}$ if and only if $\\phi'\\in A_{2}\\mathrm{SAT}$, proving $\\mathrm{SAT}\\leq_{m}^{p}A_{2}\\mathrm{SAT}$. Since $\\mathrm{SAT}$ is NP-complete and $A_{2}\\mathrm{SAT}\\in\\mathrm{NP}$, it follows that $A_{2}\\mathrm{SAT}$ is NP-complete.\n\nTherefore,\n$$\\mathrm{AT\\_MOST\\_ONE\\_SAT}=\\overline{A_{2}\\mathrm{SAT}}$$\nis in co-NP, and in fact is co-NP-complete. Among the provided options, the most accurate and provable classification is that it is in co-NP.", "answer": "$$\\boxed{C}$$", "id": "1451869"}]}