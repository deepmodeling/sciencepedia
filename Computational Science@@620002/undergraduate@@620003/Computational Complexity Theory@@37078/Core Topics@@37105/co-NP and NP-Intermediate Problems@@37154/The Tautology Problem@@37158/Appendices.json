{"hands_on_practices": [{"introduction": "The most fundamental way to determine if a formula is a tautology is to test it against all possible truth assignments. This exercise guides you through this foundational process using a truth table, the most direct application of the definition of a tautology. Mastering this \"brute-force\" method not only provides a guaranteed path to the correct answer for simple formulas but also builds a strong intuition for the behavior of logical connectives [@problem_id:1464066].", "problem": "In a course on formal logic, students are tasked with classifying propositional formulas. A formula is defined as a **tautology** if it is true for all possible truth value assignments to its propositional variables. A formula is a **contradiction** if it is false for all such assignments. A formula that is neither a tautology nor a contradiction is called a **contingency**.\n\nA student named Alex has analyzed four different formulas involving the propositional variables $p$ and $q$, and has made one claim for each. Your task is to determine which one of Alex's claims is correct.\n\nA. The formula $((p \\rightarrow q) \\land \\neg q) \\rightarrow \\neg p$ is a tautology.\n\nB. The formula $(p \\lor q) \\land (\\neg p \\land \\neg q)$ is a contingency.\n\nC. The formula $(p \\rightarrow q) \\rightarrow p$ is a tautology.\n\nD. The formula $(p \\land \\neg p) \\rightarrow q$ is a contradiction.", "solution": "To determine which claim is correct, we will analyze each formula by constructing its truth table. The truth values True and False are represented by T and F, respectively.\n\n**Analysis of Option A:**\nThe formula is $F_A = ((p \\rightarrow q) \\land \\neg q) \\rightarrow \\neg p$.\nWe construct the truth table for this formula step-by-step. The columns will represent the variables and sub-expressions.\nThe implication $p \\rightarrow q$ is false only when $p$ is T and $q$ is F.\n| $p$ | $q$ | $\\neg p$ | $\\neg q$ | $p \\rightarrow q$ | $(p \\rightarrow q) \\land \\neg q$ | $F_A$ |\n|---|---|---|---|---|---|---|\n| T | T | F | F | T | F | T |\n| T | F | F | T | F | F | T |\n| F | T | T | F | T | F | T |\n| F | F | T | T | T | T | T |\nThe final column for $F_A$ contains only T values. This means the formula is a tautology. Therefore, Alex's claim in option A is correct.\n\n**Analysis of Option B:**\nThe formula is $F_B = (p \\lor q) \\land (\\neg p \\land \\neg q)$.\nWe construct its truth table.\n| $p$ | $q$ | $\\neg p$ | $\\neg q$ | $p \\lor q$ | $\\neg p \\land \\neg q$ | $F_B$ |\n|---|---|---|---|---|---|---|\n| T | T | F | F | T | F | F |\n| T | F | F | T | T | F | F |\n| F | T | T | F | T | F | F |\n| F | F | T | T | F | T | F |\nThe final column for $F_B$ contains only F values. This means the formula is a contradiction. Alex claimed it is a contingency. Therefore, the claim in option B is incorrect.\n\n**Analysis of Option C:**\nThe formula is $F_C = (p \\rightarrow q) \\rightarrow p$.\nWe construct its truth table.\n| $p$ | $q$ | $p \\rightarrow q$ | $F_C$ |\n|---|---|---|---|\n| T | T | T | T |\n| T | F | F | T |\n| F | T | T | F |\n| F | F | T | F |\nThe final column for $F_C$ contains both T and F values. This means the formula is a contingency. Alex claimed it is a tautology. Therefore, the claim in option C is incorrect.\n\n**Analysis of Option D:**\nThe formula is $F_D = (p \\land \\neg p) \\rightarrow q$.\nThe sub-expression $p \\land \\neg p$ is a contradiction, meaning it is always false. The implication $A \\rightarrow B$ is true whenever the antecedent $A$ is false, regardless of the truth value of the consequent $B$. In this case, the antecedent is $p \\land \\neg p$, which is always false. Thus, the implication $F_D$ must always be true.\nLet's verify this with a truth table.\n| $p$ | $q$ | $\\neg p$ | $p \\land \\neg p$ | $F_D$ |\n|---|---|---|---|---|\n| T | T | F | F | T |\n| T | F | F | F | T |\n| F | T | T | F | T |\n| F | F | T | F | T |\nThe final column for $F_D$ contains only T values, so the formula is a tautology. Alex claimed it is a contradiction. Therefore, the claim in option D is incorrect.\n\nBased on the analysis of all four options, only the claim in option A is correct.", "answer": "$$\\boxed{A}$$", "id": "1464066"}, {"introduction": "While truth tables are definitive, they become impractical as the number of variables increases. This practice introduces a more elegant and often more efficient technique: simplifying logical expressions using established laws of equivalence. By manipulating the formula algebraically, you can prove it is a tautology without enumerating every case, developing a crucial skill for logical reasoning and formal proofs [@problem_id:1464065].", "problem": "In propositional logic, a compound proposition is classified based on its truth value across all possible truth assignments of its atomic propositions. A proposition is a **tautology** if it is always true, a **contradiction** if it is always false, and a **contingency** if it is neither always true nor always false.\n\nConsider the logical expression involving two propositions, $p$ and $q$:\n$$\n(p \\rightarrow q) \\lor (q \\rightarrow p)\n$$\nwhere $\\rightarrow$ denotes logical implication (if-then) and $\\lor$ denotes logical disjunction (or).\n\nUsing the laws of logical equivalence, simplify this expression and determine its classification. Which of the following statements is correct?\n\nA. The expression is a tautology.\n\nB. The expression is a contradiction.\n\nC. The expression is a contingency.\n\nD. The expression is logically equivalent to $p \\land q$.\n\nE. The expression is logically equivalent to $p \\leftrightarrow q$.", "solution": "Start from the given expression and use the equivalence for implication. By definition of implication, for any propositions $r$ and $s$, $r \\rightarrow s \\equiv \\lnot r \\lor s$. Applying this twice gives\n$$\n(p \\rightarrow q) \\lor (q \\rightarrow p) \\equiv (\\lnot p \\lor q) \\lor (\\lnot q \\lor p).\n$$\nUse associativity and commutativity of $\\lor$ to reorder and regroup the disjuncts:\n$$\n(\\lnot p \\lor q) \\lor (\\lnot q \\lor p) \\equiv \\lnot p \\lor p \\lor q \\lor \\lnot q \\equiv (p \\lor \\lnot p) \\lor (q \\lor \\lnot q).\n$$\nInvoke the law of excluded middle, which states that for any proposition $r$, $r \\lor \\lnot r \\equiv \\top$ (a tautology). Therefore,\n$$\n(p \\lor \\lnot p) \\lor (q \\lor \\lnot q) \\equiv \\top \\lor \\top \\equiv \\top.\n$$\nSince the expression simplifies to a tautology, it is always true under all truth assignments. Hence, the correct classification is that the expression is a tautology, corresponding to option A.", "answer": "$$\\boxed{A}$$", "id": "1464065"}, {"introduction": "Bridging the gap between logic and computation, this problem asks you to think algorithmically about the Tautology problem. You will analyze a recursive algorithm that formalizes the truth-table method, providing a clear model of how a computer might tackle this task. By calculating the total number of function calls, you will gain a tangible understanding of the exponential nature of this approach, a key insight into why Tautology is a central problem in computational complexity theory [@problem_id:1464042].", "problem": "A computer science student is developing a recursive algorithm to determine if a given propositional logic formula is a tautology. The algorithm, named `CheckTautology`, operates as follows:\n\nThe function is defined as `CheckTautology(F, A)`, where `F` is a propositional formula and `A` is a set of assignments mapping variables to boolean values (`True` or `False`). Let `V(F)` be the set of unique variables present in the formula `F`. The behavior of the function is defined by a base case and a recursive step:\n\n- **Base Case**: If the set of variables assigned in `A` is the same as the set of variables in the formula, `V(F)`, the function evaluates the formula `F` using the assignments in `A` and returns the resulting boolean value (`True` or `False`).\n- **Recursive Step**: If there are unassigned variables in `V(F)`, the algorithm selects the first variable `p` in alphabetical order that has not yet been assigned a value in `A`. It then makes two recursive calls: one with `p` assigned to `True` and another with `p` assigned to `False`. The function returns `True` if and only if both of these recursive calls return `True`; otherwise, it returns `False`.\n\nTo check if a formula `F` is a tautology, an initial call is made to `CheckTautology(F, A_0)`, where `A_0` is the empty set of assignments.\n\nConsider the following propositional formula $\\phi$:\n$$ \\phi = (p \\to (q \\to r)) \\to ((p \\to q) \\to (p \\to r)) $$\n\nWhat is the total number of calls made to the `CheckTautology` function to determine whether $\\phi$ is a tautology, including the initial call?", "solution": "Let $V(\\phi)$ denote the set of variables in the formula. For $\\phi=(p \\to (q \\to r)) \\to ((p \\to q) \\to (p \\to r))$, we have\n$$\nV(\\phi)=\\{p,q,r\\}, \\quad |V(\\phi)|=3.\n$$\nThe function CheckTautology evaluates $\\phi$ under all assignments when $\\phi$ is a tautology, because at each non-base call it makes two recursive calls (for the first unassigned variable set to $\\text{True}$ and to $\\text{False}$) and returns $\\text{True}$ if and only if both return $\\text{True}$. Since $\\phi$ is indeed a tautology, no branch returns $\\text{False}$, so no early termination can occur and the entire binary recursion tree is explored.\n\nLet $T(n)$ be the total number of calls (including the initial call) made by CheckTautology on a formula with $n$ distinct variables when the formula is a tautology. Then:\n- Base case: when $n=0$, there is exactly one call that immediately evaluates and returns, so\n$$\nT(0)=1.\n$$\n- Recursive step: for $n \\geq 1$, the top-level call makes two recursive calls on formulas with $n-1$ remaining unassigned variables, and we count the current call itself, hence\n$$\nT(n)=1+2\\,T(n-1).\n$$\nSolve the recurrence by defining $S(n)=T(n)+1$. Then\n$$\nS(n)=T(n)+1=\\bigl(1+2\\,T(n-1)\\bigr)+1=2\\bigl(T(n-1)+1\\bigr)=2\\,S(n-1),\n$$\nwith $S(0)=T(0)+1=2$. Therefore\n$$\nS(n)=2^{n+1} \\quad \\Longrightarrow \\quad T(n)=S(n)-1=2^{n+1}-1.\n$$\nFor $n=3$,\n$$\nT(3)=2^{4}-1=15.\n$$\nEquivalently, this matches the total number of nodes in a full binary tree of height $3$, given by $\\sum_{k=0}^{3}2^{k}=2^{4}-1$.\n\nThus, the total number of calls, including the initial call, is $15$.", "answer": "$$\\boxed{15}$$", "id": "1464042"}]}