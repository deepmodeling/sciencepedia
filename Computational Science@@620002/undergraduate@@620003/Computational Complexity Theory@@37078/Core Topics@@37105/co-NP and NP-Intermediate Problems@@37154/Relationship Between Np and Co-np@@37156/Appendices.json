{"hands_on_practices": [{"introduction": "The fundamental asymmetry between the complexity classes $NP$ and $co-NP$ is perfectly captured by their canonical complete problems, the Boolean Satisfiability Problem ($SAT$) and the Tautology Problem ($TAUTOLOGY$). This exercise challenges you to formalize this relationship using a hypothetical \"oracle\" that can instantly solve $SAT$. Successfully navigating this thought experiment demonstrates how a question about universal truth (a $co-NP$ property) can be transformed into a question about existence (an $NP$ property), which is a cornerstone of complexity theory. [@problem_id:1444878]", "problem": "In the field of computational complexity theory, a hypothetical machine called an oracle can solve a specific decision problem in a single computational step. Imagine you have access to an oracle for the Boolean Satisfiability Problem (SAT). This oracle takes any Boolean formula as input and instantly returns one of two outputs: \"SATISFIABLE\" if there exists at least one assignment of truth values to the variables that makes the formula true, or \"UNSATISFIABLE\" otherwise.\n\nYour task is to use this SAT oracle to solve an instance of the TAUTOLOGY problem. A Boolean formula is a tautology if it evaluates to true for *all* possible assignments of truth values to its variables.\n\nGiven an arbitrary Boolean formula $\\psi$ over a set of variables $\\{x_1, x_2, \\ldots, x_n\\}$, which of the following procedures correctly determines whether $\\psi$ is a tautology?\n\nA. Construct the formula $\\phi = \\psi$. Feed $\\phi$ to the SAT oracle. Conclude that $\\psi$ is a tautology if and only if the oracle reports \"SATISFIABLE\".\n\nB. Construct the formula $\\phi = \\psi$. Feed $\\phi$ to the SAT oracle. Conclude that $\\psi$ is a tautology if and only if the oracle reports \"UNSATISFIABLE\".\n\nC. Construct the formula $\\phi = \\neg\\psi$. Feed $\\phi$ to the SAT oracle. Conclude that $\\psi$ is a tautology if and only if the oracle reports \"SATISFIABLE\".\n\nD. Construct the formula $\\phi = \\neg\\psi$. Feed $\\phi$ to the SAT oracle. Conclude that $\\psi$ is a tautology if and only if the oracle reports \"UNSATISFIABLE\".\n\nE. The TAUTOLOGY problem cannot be solved using a SAT oracle because TAUTOLOGY is a co-NP-complete problem, whereas SAT is an NP-complete problem.", "solution": "The goal is to determine if a given Boolean formula $\\psi$ is a tautology by using an oracle for the Boolean Satisfiability Problem (SAT).\n\nBy definition, a formula $\\psi$ is a tautology if it is true for *all* possible truth assignments to its variables.\n\nLet's consider the negation of this statement. The formula $\\psi$ is *not* a tautology if there exists *at least one* truth assignment for which $\\psi$ is false.\n\nIf there is a truth assignment that makes $\\psi$ false, then by the definition of logical negation, that same truth assignment must make the formula $\\neg\\psi$ true.\n\nConversely, if there is a truth assignment that makes $\\neg\\psi$ true, then that same assignment must make $\\psi$ false. This would mean that $\\psi$ is not true for all assignments, and therefore is not a tautology.\n\nSo, we have established a crucial logical equivalence:\nThe formula $\\psi$ is *not* a tautology $\\iff$ there exists at least one assignment that makes $\\neg\\psi$ true.\n\nThe statement \"there exists at least one assignment that makes $\\neg\\psi$ true\" is precisely the definition of the formula $\\neg\\psi$ being satisfiable. The SAT oracle is designed to answer this exact question. If we provide the formula $\\neg\\psi$ to the SAT oracle, it will return \"SATISFIABLE\" if such an assignment exists.\n\nThus, we can update our equivalence:\nThe formula $\\psi$ is *not* a tautology $\\iff$ the formula $\\neg\\psi$ is satisfiable.\n\nThe problem, however, asks for the condition under which $\\psi$ *is* a tautology. We can find this by negating both sides of the equivalence above. The negation of \"$\\psi$ is not a tautology\" is \"$\\psi$ is a tautology\". The negation of \"$\\neg\\psi$ is satisfiable\" is \"$\\neg\\psi$ is not satisfiable\" (or \"$\\neg\\psi$ is unsatisfiable\").\n\nThis gives us the final, decisive equivalence:\nThe formula $\\psi$ *is* a tautology $\\iff$ the formula $\\neg\\psi$ is unsatisfiable.\n\nTherefore, the correct procedure is:\n1.  Take the input formula $\\psi$.\n2.  Construct a new formula $\\phi$ which is the negation of the input formula, i.e., $\\phi = \\neg\\psi$.\n3.  Feed this new formula $\\phi$ into the SAT oracle.\n4.  If the oracle returns \"UNSATISFIABLE\", we can conclude that $\\psi$ is a tautology. If it returns \"SATISFIABLE\", we conclude that $\\psi$ is not a tautology.\n\nThis procedure matches option D.\n\nLet's analyze why the other options are incorrect:\n- Option A: Testing if $\\psi$ is satisfiable only tells us that $\\psi$ is not a contradiction. A formula can be satisfiable without being a tautology (e.g., $\\psi = x_1$).\n- Option B: Testing if $\\psi$ is unsatisfiable is a test for whether $\\psi$ is a contradiction (i.e., false for all assignments), which is the opposite of a tautology.\n- Option C: This inverts the conclusion. If $\\neg\\psi$ is satisfiable, it means $\\psi$ is *not* a tautology.\n- Option E: This is a common misconception. The existence of an oracle for an NP-complete problem like SAT allows for the efficient solution of all problems in the complexity class NP, as well as all problems in the class co-NP. Since TAUTOLOGY is the canonical co-NP-complete problem, it can indeed be solved using a SAT oracle. The described procedure is an example of a polynomial-time reduction from a co-NP problem to an NP problem, given an oracle.", "answer": "$$\\boxed{D}$$", "id": "1444878"}, {"introduction": "Building on the inherent duality between $NP$ and $co-NP$, we now consider a hypothetical scenario that erases the distinction between them. This problem explores the dramatic consequences if $TAUTOLOGY$, the classic $co-NP$-complete problem, were proven to have polynomial-time verifiable certificates for 'yes' instances, placing it firmly in $NP$. Answering this question correctly reveals the power of reductions and the rigid structure they impose on the entire complexity landscape. [@problem_id:1444859]", "problem": "In computational complexity theory, decision problems are categorized into classes based on the resources required to solve them. Two fundamental classes are NP and co-NP.\n\n- The class **NP (Nondeterministic Polynomial time)** consists of all decision problems for which a 'yes' instance can be verified in polynomial time by a deterministic Turing machine, given a suitable certificate or proof.\n- The class **co-NP** consists of all decision problems whose complements are in NP. Equivalently, a problem is in co-NP if a 'no' instance has a certificate that can be verified in polynomial time.\n\nConsider the **TAUTOLOGY** problem: given a Boolean logic formula, is the formula true for every possible assignment of truth values to its variables? For example, the formula `A or (not A)` is a tautology.\n\nIt is a well-established result that TAUTOLOGY is in co-NP. Now, consider a hypothetical scenario where a computer scientist proves that TAUTOLOGY is also in NP. Which of the following would be the most direct and significant consequence for the relationship between these complexity classes?\n\nA. P = NP\n\nB. NP = co-NP\n\nC. SAT (the Boolean Satisfiability problem) would be proven to be in P.\n\nD. The complexity class PSPACE would collapse to NP.\n\nE. P ≠ NP", "solution": "Let's break down the logic step-by-step.\n\n1.  **TAUTOLOGY is co-NP-complete:** This means that every problem in the class co-NP can be transformed (or \"reduced\") into an instance of TAUTOLOGY in polynomial time. TAUTOLOGY is considered one of the \"hardest\" problems in co-NP.\n\n2.  **The Hypothesis: TAUTOLOGY is in NP:** We are asked to assume that TAUTOLOGY, in addition to being in co-NP, is also in NP.\n\n3.  **Consequence 1: co-NP is a subset of NP (co-NP ⊆ NP):** Since every problem in co-NP can be reduced to TAUTOLOGY, and we are assuming TAUTOLOGY is in NP, it follows that every problem in co-NP can be solved as if it were an NP problem. This implies that the entire class of co-NP is contained within NP.\n\n4.  **Consequence 2: NP is a subset of co-NP (NP ⊆ co-NP):** This follows from the symmetry of the classes. If a co-NP-complete problem like TAUTOLOGY is in NP, then its complement, SAT (which is NP-complete), must be in co-NP. Since every problem in NP can be reduced to SAT, and SAT is now in co-NP, it follows that every problem in NP is also in co-NP.\n\n5.  **Conclusion: NP = co-NP:** If co-NP is contained within NP, and NP is also contained within co-NP, the only possibility is that the two classes are identical.\n\nTherefore, if the co-NP-complete problem TAUTOLOGY were found to be in NP, the direct and major consequence would be the collapse of co-NP into NP, making them the same class. This does not automatically imply that P = NP or that PSPACE collapses.\n\nThis makes option B the correct answer.", "answer": "$$\\boxed{B}$$", "id": "1444859"}, {"introduction": "Our final practice explores the most dramatic possible collapse of the polynomial hierarchy, bringing the class $P$ into the relationship between $NP$ and $co-NP$. We consider a hypothetical problem that is known to be hard for both $NP$ and $co-NP$ and then imagine that a polynomial-time algorithm for it is discovered. This thought experiment will test your understanding of what it means for a problem to be 'hard' for a class and reveals the ultimate consequence of finding an efficient solution to such a powerful problem. [@problem_id:1444869]", "problem": "In computational complexity theory, we classify decision problems based on the resources required to solve them. Let us define a few key complexity classes:\n- **P (Polynomial time):** The class of decision problems that can be solved by an algorithm in a number of steps that is a polynomial function of the input size.\n- **NP (Nondeterministic Polynomial time):** The class of decision problems for which a 'yes' answer can be verified in polynomial time, given a suitable certificate.\n- **co-NP:** The class of decision problems whose complement is in NP. Equivalently, these are problems for which a 'no' answer can be verified in polynomial time.\n\nA problem $L_1$ is said to be polynomial-time reducible to a problem $L_2$ if there is a polynomial-time algorithm that transforms any instance of $L_1$ into an instance of $L_2$ such that the answer ('yes' or 'no') is preserved. A problem is **NP-hard** if every problem in the class NP is polynomial-time reducible to it. Similarly, a problem is **co-NP-hard** if every problem in the class co-NP is polynomial-time reducible to it.\n\nSuppose that after years of research, a specific problem, let's call it $X$, is proven to be both NP-hard and co-NP-hard. In a surprising turn of events, a computer scientist then discovers a polynomial-time algorithm that solves problem $X$.\n\nAssuming all these findings are correct, what is the definitive consequence for the relationship between the complexity classes P, NP, and co-NP?\n\nA. P = NP, but NP ≠ co-NP.\n\nB. NP = co-NP, but P remains a proper subset of NP.\n\nC. P = NP = co-NP.\n\nD. P is a proper subset of the intersection of NP and co-NP, i.e., P ⊂ (NP ∩ co-NP).\n\nE. The situation described is a logical contradiction, implying at least one of the initial proofs about problem $X$ must be incorrect.", "solution": "By hypothesis, problem $X$ is NP-hard, co-NP-hard, and can be solved in polynomial time (meaning $X$ is in P).\n\nLet's analyze the consequences:\n\n1.  **Consequence of being NP-hard and in P:**\n    A problem being NP-hard means that every problem in NP can be reduced to it in polynomial time. If we have a polynomial-time algorithm for $X$, we can solve any problem in NP by first reducing it to $X$ and then solving the instance of $X$. Since both steps take polynomial time, the entire process takes polynomial time. This means every problem in NP can be solved in polynomial time, which implies that NP is a subset of P (NP ⊆ P). Since we already know P is a subset of NP (P ⊆ NP), the only conclusion is that **P = NP**.\n\n2.  **Consequence of being co-NP-hard and in P:**\n    The same logic applies to co-NP. A problem being co-NP-hard means that every problem in co-NP can be reduced to it in polynomial time. Since we have a polynomial-time algorithm for $X$, this implies that every problem in co-NP can be solved in polynomial time. Therefore, co-NP is a subset of P (co-NP ⊆ P). We already know that P is a subset of co-NP (P ⊆ co-NP), so we must conclude that **P = co-NP**.\n\nCombining these two results, we get **P = NP** and **P = co-NP**. This means all three classes are identical: **P = NP = co-NP**.\n\nTherefore, the definitive consequence is that all three classes collapse into one. Among the given options, this is exactly option C.", "answer": "$$\\boxed{C}$$", "id": "1444869"}]}