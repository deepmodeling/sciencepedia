{"hands_on_practices": [{"introduction": "We begin our hands-on practice with the most fundamental type of Turing Machine computation: a single, linear scan of the input tape. This exercise analyzes a machine that verifies if a string is composed of alternating 0s and 1s. The underlying principle is that for many decision problems, the machine only needs to pass over the input once to gather enough information, making the number of computational steps directly proportional to the input length, $n$. Mastering this analysis is the first step toward understanding time complexity, as it establishes the baseline class of linear time, $O(n)$ [@problem_id:1466953].", "problem": "Consider a single-tape Turing Machine (TM) designed to decide the language $L$ of strings consisting of alternating 0s and 1s over the alphabet $\\Sigma = \\{0, 1\\}$. Examples of strings in $L$ include the empty string, \"0\", \"1\", \"010\", and \"10101\". An input string $w$ of length $n = |w|$ is placed on the otherwise blank tape. The TM starts with its read/write head on the leftmost symbol of $w$. If $w$ is the empty string, the head starts on a blank symbol, $\\sqcup$.\n\nThe TM is deterministic and operates according to the following high-level description:\n\n1.  The TM begins in a starting state, $q_{start}$.\n2.  If the symbol under the head is the blank symbol, $\\sqcup$, it transitions to the halt-accept state, $q_{accept}$. This handles the case of the empty string.\n3.  If the symbol is '0', it transitions to a state $q_{expect\\_1}$ and moves its head one cell to the right.\n4.  If the symbol is '1', it transitions to a state $q_{expect\\_0}$ and moves its head one cell to the right.\n5.  When in state $q_{expect\\_1}$:\n    a. If it reads a '1', it transitions to state $q_{expect\\_0}$ and moves its head one cell to the right.\n    b. If it reads the blank symbol $\\sqcup$, it transitions to the halt-accept state, $q_{accept}$.\n    c. If it reads a '0', it transitions to the halt-reject state, $q_{reject}$.\n6.  When in state $q_{expect\\_0}$:\n    a. If it reads a '0', it transitions to state $q_{expect\\_1}$ and moves its head one cell to the right.\n    b. If it reads the blank symbol $\\sqcup$, it transitions to the halt-accept state, $q_{accept}$.\n    c. If it reads a '1', it transitions to the halt-reject state, $q_{reject}$.\n7.  Once the TM enters $q_{accept}$ or $q_{reject}$, it halts.\n\nA single computational step for this TM consists of reading a symbol, changing the state, and moving the head (or halting). What is the worst-case time complexity, $T(n)$, of this TM for an input string of length $n > 0$, expressed using Big-O notation?\n\nA. $O(1)$\n\nB. $O(\\log n)$\n\nC. $O(n)$\n\nD. $O(n \\log n)$\n\nE. $O(n^2)$", "solution": "Let $n$ denote the input length with $n>0$. Define $S(w)$ as the number of computational steps on input $w$, and define the worst-case time complexity as $T(n)=\\max_{|w|=n}S(w)$.\n\nEach computational step consists of reading the current symbol, changing state, and moving the head one cell to the right (or halting). The given transition rules ensure that the TM never moves left; it scans strictly left-to-right and halts either upon detecting a mismatch or upon seeing the blank symbol after the last input symbol.\n\nFor any nonempty input $w$ with $|w|=n$:\n- At position $1$, in state $q_{start}$, the machine reads $w_{1}$, transitions to either $q_{expect\\_1}$ or $q_{expect\\_0}$, and moves right. This is $1$ step.\n- For each subsequent position $i$ with $2 \\leq i \\leq n$, if the prefix up to $w_{i}$ is consistent with alternation, the machine reads $w_{i}$, transitions between $q_{expect\\_0}$ and $q_{expect\\_1}$, and moves right. Each such position contributes exactly $1$ step. If a violation occurs at position $i$, the machine transitions to $q_{reject}$ and halts, so $S(w)=i$ in that case.\n- If no violation occurs through position $n$, then after the $n$-th step the head is on the blank cell to the right of the input, and the machine performs exactly one final step on $\\sqcup$ to enter $q_{accept}$ and halt. Thus, for an alternating string, $S(w)=n+1$.\n\nHence, the worst-case arises when $w$ is perfectly alternating, yielding\n$$\nT(n)=\\max_{|w|=n}S(w)=n+1.\n$$\nTherefore, in Big-O notation,\n$$\nT(n)\\in O(n).\n$$\nAmong the given choices, this corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1466953"}, {"introduction": "Moving beyond a simple scan, we now explore a more sophisticated multi-pass algorithm designed to decide if an input string $a^n$ has a length $n$ that is a power of two. This Turing Machine implements a form of algorithmic division by repeatedly halving the number of effective symbols in successive passes. This problem illustrates a crucial concept: while each pass over the tape takes linear time, the number of passes required is logarithmic with respect to the input size, leading to a total time complexity of $O(n \\log n)$. This practice provides valuable insight into how \"divide-and-conquer\" strategies manifest in the context of Turing Machines [@problem_id:1466990].", "problem": "Consider a single-tape Turing Machine (TM) that decides the language $L = \\{a^n \\mid n = 2^k \\text{ for some integer } k \\ge 0\\}$ over the input alphabet $\\Sigma = \\{a\\}$. The tape alphabet is $\\Gamma = \\{a, x, \\sqcup\\}$, where $\\sqcup$ is the blank symbol.\n\nThe TM operates according to the following algorithm on an input string of length $n$:\n\n1.  If the tape is blank (input is the empty string, $n=0$), the machine halts and rejects.\n2.  The machine sweeps from left to right across the tape. During the sweep, it counts the number of symbols `a`.\n3.  If the count of `a`'s is exactly one, the machine halts and accepts.\n4.  If the count of `a`'s is odd and greater than one, the machine halts and rejects.\n5.  If the count of `a`'s is even and greater than one, the machine prepares for another pass. It rewinds its head to the leftmost cell. Then, it initiates a new sweep from left to right. In this new sweep, it marks every second `a` it encounters by overwriting it with the symbol `x`.\n6.  After a marking sweep is complete, the machine rewinds its head to the leftmost cell and returns to step 2 to count the remaining unmarked `a`'s.\n\nWhat is the time complexity of this TM, expressed in big-O notation as a function of the input length $n$?\n\nA. $O(n)$\n\nB. $O(n \\log n)$\n\nC. $O(n^2)$\n\nD. $O(\\log n)$\n\nE. $O(2^n)$", "solution": "Let the input length be $n$. The machine repeatedly performs passes consisting of:\n- a left-to-right counting sweep over the used portion of the tape, which is of length $n$ because no blanks are introduced during marking (symbols are only changed from $a$ to $x$),\n- conditional rewinds to the left end (each a right-to-left sweep over at most $n$ cells),\n- and, when the count is even and greater than one, a left-to-right marking sweep that marks every second $a$ (again scanning up to $n$ cells), followed by another rewind.\n\nTherefore, each full halving round (counting, rewind, marking, rewind) costs at most a constant multiple of $n$. The counting sweep alone costs at most a constant multiple of $n$.\n\nLet $v_{2}(n)$ be the largest integer $t$ with $2^{t} \\mid n$. Each time the count is even and greater than one, the number of unmarked $a$'s is halved, so there are exactly $v_{2}(n)$ marking rounds before the machine reaches an odd count (greater than one) and rejects, or reaches $1$ and accepts. Consequently:\n- Counting sweeps occur $v_{2}(n) + 1$ times (once per round, including the final halting round),\n- Marking sweeps occur $v_{2}(n)$ times,\n- Rewinds occur $2 v_{2}(n)$ times (one after each counting sweep that leads to marking, and one after each marking sweep).\n\nEach sweep or rewind scans at most $n$ cells, hence there exists a constant $c > 0$ such that\n$$\nT(n) \\le c\\,n\\,( (v_{2}(n)+1) + v_{2}(n) + 2 v_{2}(n) ) = c\\,n\\,(4 v_{2}(n) + 1).\n$$\nSince $v_{2}(n) \\le \\lfloor \\log_{2}(n) \\rfloor$, it follows that\n$$\nT(n) = O\\!\\left(n \\log_{2}(n)\\right).\n$$\nThus, the time complexity is $O(n \\log n)$, which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1466990"}, {"introduction": "Our final practice problem demonstrates how the architecture of a single-tape Turing Machine can lead to significant computational costs, even for seemingly simple tasks like duplicating a string. The described algorithm works by iteratively copying symbols, which forces the read/write head to travel back and forth across a tape that grows with each step. This repeated traversal is the key to understanding the resulting quadratic time complexity of $O(n^2)$. This exercise is essential for appreciating how data movement and storage limitations inherent to the computational model directly influence an algorithm's efficiency [@problem_id:1466996].", "problem": "A single-tape Turing Machine (TM) is tasked with duplicating a given input string. The input is a string $w$ of length $n$, composed of symbols from the alphabet $\\Sigma = \\{a, b\\}$. The tape alphabet is $\\Gamma = \\{a, b, \\dot{a}, \\dot{b}, \\sqcup\\}$, where $\\dot{a}$ and $\\dot{b}$ are \"marked\" versions of $a$ and $b$, and $\\sqcup$ is the blank symbol.\n\nInitially, the tape contains `...$\\sqcup$ w $\\sqcup$...`, and the tape head is at the first symbol of $w$. The TM must halt with the tape containing `...$\\sqcup$ ww $\\sqcup$...`. The final position of the tape head is not important.\n\nThe TM executes the following algorithm:\n1.  **Main Loop:** This loop repeats for each symbol in the original input string $w$. For the $i$-th iteration (where $i=1, \\dots, n$):\n    a. Starting from the left end of the tape, the head moves right to find the first unmarked symbol (which is the $i$-th symbol of the original string). Let this symbol be $\\sigma$. It reads $\\sigma$ and replaces it with its marked version, $\\dot{\\sigma}$.\n    b. The head moves to the right end of all non-blank symbols on the tape until it finds the first blank cell $\\sqcup$.\n    c. The head writes the symbol $\\sigma$ in that blank cell.\n    d. The head moves all the way back to the left, returning to the first cell of the tape to begin the next iteration.\n\n2.  **Cleanup Phase:** After the main loop completes, the tape contains $\\dot{w}w$, where $\\dot{w}$ is the marked version of the original string. The TM performs one final scan from the beginning of the tape, replacing each of the $n$ marked symbols $\\dot{\\sigma}$ with its original version $\\sigma$.\n\nDetermine the overall time complexity of this complete algorithm, which is defined as the total number of individual steps (read, write, or move left/right) performed by the tape head. Express your answer using Big-O notation as a function of $n$, the length of the input string $w$.", "solution": "We count primitive tape-head actions: each read, each write, and each single-cell move counts as one step. Let the input length be $n$. During the $i$-th iteration of the main loop (with $i \\in \\{1,\\dots,n\\}$), the tape before writing the copy has $n+(i-1)$ non-blank symbols; after writing the $i$-th copied symbol it has $n+i$ non-blank symbols.\n\nFor iteration $i$, decompose the cost $T_{i}$ into four parts corresponding to steps (a)–(d):\n\n- Step (a): From the left end (first symbol) to the first unmarked symbol (which is the $i$-th symbol), the head examines $i$ cells, moving right over the first $i-1$ marked cells and stopping on the $i$-th. This entails $i$ reads, $(i-1)$ right moves, and $1$ write to mark, for\n$$\nA_{i} = i + (i-1) + 1 = 2i.\n$$\n\n- Step (b): From position $i$ to the first blank to the right, the head must traverse exactly $n$ positions (the remaining $n-i$ original symbols and the previously appended $i-1$ symbols, plus one move into the blank). Each traversal step consists of one move and one read, so\n$$\nB_{i} = n + n = 2n.\n$$\n\n- Step (c): Writing the symbol $\\sigma$ in the blank is a single write:\n$$\nC_{i} = 1.\n$$\n\n- Step (d): Returning to the first (leftmost) symbol is achieved by moving left until the left blank is seen and then moving right once to the first symbol. After step (c), there are $n+i$ non-blank symbols. Hence moving from the rightmost non-blank to the left blank takes $(n+i)$ left moves with $(n+i)$ reads, then one right move and one read to land on and recognize the first symbol. Thus\n$$\nD_{i} = (n+i) + (n+i) + 1 + 1 = 2(n+i) + 2.\n$$\n\nSumming these four contributions for iteration $i$ gives\n$$\nT_{i} = A_{i} + B_{i} + C_{i} + D_{i} = 2i + 2n + 1 + 2(n+i) + 2 = 4n + 4i + 3.\n$$\n\nThe main loop total is therefore\n$$\n\\sum_{i=1}^{n} T_{i} = \\sum_{i=1}^{n} \\left(4n + 4i + 3\\right) = 4n^{2} + 4 \\cdot \\frac{n(n+1)}{2} + 3n = 6n^{2} + 5n,\n$$\nwhich is $O(n^{2})$.\n\nCleanup phase: After the main loop, the tape holds $\\dot{w}w$ with $|\\dot{w}| = n$. The final scan replaces each marked symbol by its unmarked version in a single left-to-right pass across the first $n$ cells. This uses a constant number of steps per cell (one read, one write, and moves between adjacent cells), so the cleanup cost is $O(n)$.\n\nCombining both parts, the overall time complexity is\n$$\nO(n^{2}) + O(n) = O(n^{2}).\n$$\n\nFor completeness, there is also a matching lower bound: each iteration necessarily moves from somewhere near the left to the far right end and back across a tape segment of length $\\Theta(n+i)$, so the total number of moves is at least on the order of $\\sum_{i=1}^{n} n = \\Theta(n^{2})$. Thus the algorithm runs in $\\Theta(n^{2})$, and in Big-O notation the time complexity is $O(n^{2})$.", "answer": "$$\\boxed{O(n^{2})}$$", "id": "1466996"}]}