{"hands_on_practices": [{"introduction": "Many real-world challenges, from scheduling meetings to designing circuits, can be distilled into simpler, abstract problems. This exercise explores a classic constraint satisfaction problem through the lens of graph theory. The task of assigning team members to two slots without conflict is equivalent to determining if a graph is bipartiteâ€”a property that can be checked efficiently, demonstrating how a practical problem falls into the complexity class P [@problem_id:1453873].", "problem": "A technology company is organizing its project teams for a new initiative. For each project, some pairs of team members have pre-existing scheduling conflicts and cannot be assigned to the same meeting slot. The project manager needs to determine if it's possible to schedule all members of a team into just two distinct meeting slots, \"Morning\" and \"Afternoon\", without any conflicts.\n\nAn arrangement is called 'schedulable' if every team member can be assigned to either the Morning or Afternoon slot such that for every pair of members with a conflict, one is in the Morning slot and the other is in the Afternoon slot.\n\nYou are given the specifications for four different project teams. For each project, the team members are represented by numbers, and the conflicts are given as pairs of members.\n\n- **Project A**:\n  - Members: $\\{1, 2, 3, 4, 5\\}$\n  - Conflicts: $\\{(1,4), (1,5), (2,4), (3,5)\\}$\n\n- **Project B**:\n  - Members: $\\{1, 2, 3, 4, 5, 6\\}$\n  - Conflicts: $\\{(1,2), (1,4), (1,6), (2,3), (3,4), (5,6)\\}$\n\n- **Project C**:\n  - Members: $\\{1, 2, 3, 4\\}$\n  - Conflicts: $\\{(1,2), (2,3), (3,1)\\}$\n\n- **Project D**:\n  - Members: $\\{1, 2, 3, 4, 5\\}$\n  - Conflicts: $\\{(1,2), (2,3), (3,4), (4,5), (5,1)\\}$\n\nWhich of the following statements correctly identifies all the schedulable arrangements?\n\nA. Only the arrangement for Project A is schedulable.\n\nB. Only the arrangement for Project B is schedulable.\n\nC. The arrangements for Project A and C are schedulable.\n\nD. The arrangements for Project A and B are schedulable.\n\nE. The arrangements for Project C and D are schedulable.\n\nF. All four arrangements are schedulable.", "solution": "Interpret each project as a graph whose vertices are team members and edges are conflict pairs. The arrangement is schedulable if and only if the graph is bipartite, i.e., admits a 2-coloring (Morning vs. Afternoon) such that every edge has endpoints in opposite colors. Equivalently, a graph is bipartite if and only if it has no odd cycle.\n\nProject A: Members are $\\{1,2,3,4,5\\}$ with edges $(1,4)$, $(1,5)$, $(2,4)$, $(3,5)$. Assign $1$ to Morning. Then $4$ and $5$ must be Afternoon due to $(1,4)$ and $(1,5)$. From $(2,4)$, since $4$ is Afternoon, $2$ must be Morning. From $(3,5)$, since $5$ is Afternoon, $3$ must be Morning. The Morning set is $\\{1,2,3\\}$ and the Afternoon set is $\\{4,5\\}$, and no listed edge lies within a single set. Hence Project A is bipartite and schedulable.\n\nProject B: Members are $\\{1,2,3,4,5,6\\}$ with edges $(1,2)$, $(1,4)$, $(1,6)$, $(2,3)$, $(3,4)$, $(5,6)$. Assign $1$ to Morning. Then $2,4,6$ must be Afternoon due to $(1,2)$, $(1,4)$, $(1,6)$. From $(2,3)$, since $2$ is Afternoon, $3$ must be Morning. From $(3,4)$, since $4$ is Afternoon, $3$ remains Morning, consistent. From $(5,6)$, since $6$ is Afternoon, $5$ must be Morning. The Morning set is $\\{1,3,5\\}$ and the Afternoon set is $\\{2,4,6\\}$, and no listed edge lies within a single set. Hence Project B is bipartite and schedulable.\n\nProject C: Members are $\\{1,2,3,4\\}$ with edges $(1,2)$, $(2,3)$, $(3,1)$. The subgraph on $\\{1,2,3\\}$ is a $3$-cycle, which is an odd cycle and therefore not bipartite. Explicitly, assign $1$ to Morning, then $(1,2)$ forces $2$ to Afternoon, then $(2,3)$ forces $3$ to Morning, but $(3,1)$ then forces $3$ to be Afternoon, a contradiction. Hence Project C is not schedulable.\n\nProject D: Members are $\\{1,2,3,4,5\\}$ with edges $(1,2)$, $(2,3)$, $(3,4)$, $(4,5)$, $(5,1)$, which form a $5$-cycle, an odd cycle. Therefore the graph is not bipartite. Explicitly, assign $1$ to Morning, then $2$ to Afternoon, $3$ to Morning, $4$ to Afternoon, $5$ to Morning by propagation, but edge $(5,1)$ requires $5$ and $1$ to be in opposite slots, a contradiction. Hence Project D is not schedulable.\n\nTherefore, exactly Projects A and B are schedulable.", "answer": "$$\\boxed{D}$$", "id": "1453873"}, {"introduction": "Network optimization is a cornerstone of logistics, computer networking, and infrastructure planning. This practice focuses on finding the most cost-effective way to connect a set of points, a problem solved by finding a Minimum Spanning Tree (MST). While finding the \"best\" of anything can often be computationally hard, this exercise shows that efficient, polynomial-time algorithms like Kruskal's can solve the MST problem, placing it firmly in P. By exploring the conditions for a unique MST, you will gain a deeper insight into the logic of these powerful greedy algorithms [@problem_id:1453878].", "problem": "Consider an undirected graph $G = (V, E)$ with a set of vertices $V = \\{A, B, C, D, E\\}$ and a set of weighted edges $E$ given by the following list of tuples $(u, v, w)$, where $u$ and $v$ are vertices and $w$ is the integer weight of the edge connecting them:\n$E = \\{(A, B, 1), (A, C, 3), (B, C, 2), (B, D, 4), (C, D, 4), (C, E, 5), (D, E, 6)\\}$.\n\nA Minimum Spanning Tree (MST) for this graph is a subset of the edges that connects all the vertices together, without any cycles and with the minimum possible total edge weight. For the given graph $G$, determine if the MST is unique. Which of the following statements is correct?\n\nA. The MST is unique and its total weight is 12.\n\nB. The MST is not unique, and there are exactly two possible MSTs.\n\nC. The MST is unique because all edge weights are distinct.\n\nD. The MST is not unique, and there are more than two possible MSTs.\n\nE. The MST is unique and its total weight is 11.", "solution": "To determine the Minimum Spanning Tree (MST) and its uniqueness, we can use Kruskal's algorithm. This algorithm builds an MST by iteratively adding the edge with the lowest weight that does not form a cycle with the edges already selected. A key insight is that an MST is unique if and only if for every cut of the graph, there is a unique minimum-weight edge crossing the cut. A simpler way to test this with Kruskal's algorithm is to see if we ever have a choice between multiple edges of the same weight that could be added to the tree without forming a cycle.\n\nFirst, we list the edges of the graph sorted by their weight in non-decreasing order:\n1.  $(A, B), w=1$\n2.  $(B, C), w=2$\n3.  $(A, C), w=3$\n4.  $(B, D), w=4$\n5.  $(C, D), w=4$\n6.  $(C, E), w=5$\n7.  $(D, E), w=6$\n\nWe start with an empty set of edges for the MST and five disjoint sets of vertices, one for each vertex: $\\{A\\}, \\{B\\}, \\{C\\}, \\{D\\}, \\{E\\}$.\n\nStep 1: Add the edge with the smallest weight, which is $(A, B)$ with weight 1.\nThe MST edge set is $\\{(A, B)\\}$.\nThe vertex sets are merged: $\\{A, B\\}, \\{C\\}, \\{D\\}, \\{E\\}$.\n\nStep 2: Add the next smallest weight edge, $(B, C)$ with weight 2. This does not form a cycle.\nThe MST edge set is $\\{(A, B), (B, C)\\}$.\nThe vertex sets are merged: $\\{A, B, C\\}, \\{D\\}, \\{E\\}$.\n\nStep 3: Consider the next edge, $(A, C)$ with weight 3. Both vertices A and C are already in the same component $\\{A, B, C\\}$. Adding this edge would form a cycle A-B-C-A. Therefore, we reject this edge.\n\nStep 4: The next edges in the sorted list are $(B, D)$ and $(C, D)$, both with weight 4. This is a critical point. Kruskal's algorithm has a choice. To check for uniqueness, we must explore the consequences of this tie.\n\nCase 1: We choose to add the edge $(B, D)$.\n- The edge $(B, D)$ connects component $\\{A, B, C\\}$ to $\\{D\\}$. It does not form a cycle.\n- MST edge set so far: $\\{(A, B), (B, C), (B, D)\\}$.\n- Vertex sets are merged: $\\{A, B, C, D\\}, \\{E\\}$.\n- Now, consider the other edge of the same weight, $(C, D)$. Both vertices C and D are now in the same component $\\{A, B, C, D\\}$. Adding this edge would form a cycle B-C-D-B. So, we must reject it.\n- The next edge is $(C, E)$ with weight 5. It connects component $\\{A, B, C, D\\}$ to $\\{E\\}$. It does not form a cycle.\n- We add $(C, E)$. The MST edge set is now $\\{(A, B), (B, C), (B, D), (C, E)\\}$.\n- We have $V-1 = 5-1=4$ edges, so we have formed a spanning tree. This is our first MST.\n- The total weight of this MST is $1 + 2 + 4 + 5 = 12$.\n\nCase 2: We go back to the choice at Step 4 and instead choose to add the edge $(C, D)$.\n- The edge $(C, D)$ connects component $\\{A, B, C\\}$ to $\\{D\\}$. It does not form a cycle.\n- MST edge set so far: $\\{(A, B), (B, C), (C, D)\\}$.\n- Vertex sets are merged: $\\{A, B, C, D\\}, \\{E\\}$.\n- Now, consider the other edge of the same weight, $(B, D)$. Both vertices B and D are now in the same component $\\{A, B, C, D\\}$. Adding this edge would form a cycle B-C-D-B. So, we must reject it.\n- The next edge is $(C, E)$ with weight 5. It connects component $\\{A, B, C, D\\}$ to $\\{E\\}$. It does not form a cycle.\n- We add $(C, E)$. The MST edge set is now $\\{(A, B), (B, C), (C, D), (C, E)\\}$.\n- We have $V-1 = 4$ edges, forming a spanning tree. This is our second MST.\n- The total weight of this MST is $1 + 2 + 4 + 5 = 12$.\n\nWe have found two different sets of edges that both result in a spanning tree with the minimum possible total weight of 12.\nMST 1: $\\{(A, B), (B, C), (B, D), (C, E)\\}$\nMST 2: $\\{(A, B), (B, C), (C, D), (C, E)\\}$\n\nSince there is more than one set of edges that forms an MST, the MST is not unique. We have found exactly two such sets.\nLet's analyze the options:\nA. The MST is unique and its total weight is 12. (Incorrect, not unique)\nB. The MST is not unique, and there are exactly two possible MSTs. (Correct)\nC. The MST is unique because all edge weights are distinct. (Incorrect, weights are not distinct and the MST is not unique)\nD. The MST is not unique, and there are more than two possible MSTs. (Incorrect, we found exactly two)\nE. The MST is unique and its total weight is 11. (Incorrect, not unique and wrong weight)\n\nThus, the correct statement is B.", "answer": "$$\\boxed{B}$$", "id": "1453878"}, {"introduction": "Some computational problems appear complex and combinatorial at first glance, suggesting a brute-force approach that would be incredibly slow. This exercise, centered on a domino-chain puzzle, illustrates a key concept in computer science: problem reduction. By modeling the dominoes and colors as a graph, the seemingly difficult puzzle is transformed into the well-known problem of finding an Eulerian path, which has a remarkably simple and efficient polynomial-time solution. This practice highlights how abstracting a problem correctly is crucial for finding an efficient algorithm and proving membership in P [@problem_id:1453847].", "problem": "Consider the `DOMINO-CHAIN` decision problem. You are given a set of $n$ dominoes. Each domino is a tile with two ends, and each end is painted a specific color. For the purpose of this problem, colors can be represented by positive integers. A single domino is thus specified by the pair of colors on its ends, for example, $\\{c_1, c_2\\}$.\n\nThe question asked by the `DOMINO-CHAIN` problem is: Is it possible to arrange all $n$ dominoes in a single continuous line such that for any two adjacent dominoes in the line, their touching ends have the same color? Note that any domino can be flipped. For instance, a domino with colors $\\{c_a, c_b\\}$ can be placed in the line to match a $c_a$ end or a $c_b$ end with an adjacent domino.\n\nWhich of the following statements about the computational complexity of the `DOMINO-CHAIN` problem is correct?\n\nA. `DOMINO-CHAIN` is in P, and this can be efficiently determined by reducing the problem to the Hamiltonian Path problem on a specially constructed graph.\n\nB. `DOMINO-CHAIN` is in P, and this can be efficiently determined by modeling the problem in terms of a graph and checking for the existence of an Eulerian path.\n\nC. `DOMINO-CHAIN` is NP-complete because it is a variation of the Traveling Salesperson Problem where the cities are colors.\n\nD. `DOMINO-CHAIN` is likely not in P because any algorithm must, in the worst case, check an exponential number of possible domino arrangements, which is on the order of $n! \\times 2^n$.\n\nE. `DOMINO-CHAIN` is an undecidable problem.", "solution": "The `DOMINO-CHAIN` problem is a decision problem that asks whether a \"yes\" or \"no\" answer can be given for any input set of dominoes. To determine its computational complexity, we need to find the most efficient algorithm that solves it and analyze its runtime. The key is to model this problem using graph theory.\n\nLet's construct a multigraph $G = (V, E)$.\nThe set of vertices $V$ will be the set of all unique colors that appear on the dominoes.\nThe set of edges $E$ represents the set of $n$ dominoes. For each domino with colors $\\{c_a, c_b\\}$, we add an edge connecting vertex $c_a$ and vertex $c_b$ in the graph. Since multiple dominoes can connect the same pair of colors, this is a multigraph.\n\nThe problem of arranging all dominoes in a single line where adjacent ends match color is equivalent to finding a sequence of all edges in the graph, $e_1, e_2, \\dots, e_n$, that forms a single continuous path. Such a path, which traverses every edge of the graph exactly once, is known as an Eulerian path.\n\nTherefore, the `DOMINO-CHAIN` problem is equivalent to asking: \"Does the multigraph $G$ constructed from the dominoes have an Eulerian path?\"\n\nA well-known theorem in graph theory states the conditions for the existence of an Eulerian path in an undirected multigraph:\n1. The graph must be connected, considering only the vertices with a degree greater than zero. That is, all colors involved must belong to a single component of the graph.\n2. The number of vertices with an odd degree must be either zero or two.\n    - If there are zero vertices with an odd degree, the graph has an Eulerian circuit (a path that starts and ends at the same vertex). This corresponds to a domino chain that can be formed into a loop.\n    - If there are two vertices with an odd degree, the graph has an Eulerian path that starts at one of the odd-degree vertices and ends at the other. This corresponds to a domino chain with two distinct end colors.\n\nWe can design a polynomial-time algorithm to check these two conditions:\n1.  **Construct the graph and calculate degrees:** We can iterate through the $n$ dominoes. We use a hash map or an array to store the degree of each color (vertex). For each domino $\\{c_a, c_b\\}$, we increment the degree counters for $c_a$ and $c_b$. This step takes time proportional to $n$, i.e., $O(n)$. Let $k$ be the number of unique colors; $k$ can be at most $2n$.\n\n2.  **Check the odd-degree condition:** After computing all degrees, we iterate through the $k$ vertices and count how many have an odd degree. This takes $O(k)$ or $O(n)$ time. If the count is not 0 or 2, the answer is \"no\".\n\n3.  **Check the connectivity condition:** We can verify connectivity of all non-isolated vertices using a single graph traversal algorithm like Breadth-First Search (BFS) or Depth-First Search (DFS). We start the traversal from any vertex with a degree greater than zero. After the traversal, we check if all other vertices with non-zero degrees have been visited. A BFS or DFS on our graph takes $O(k + n)$ time, which is $O(n)$. If this condition fails, the answer is \"no\".\n\nSince all steps can be performed in time that is a polynomial function of the input size $n$ (in fact, it's linear time, $O(n)$), there exists a polynomial-time algorithm to solve the `DOMINO-CHAIN` problem. Therefore, `DOMINO-CHAIN` is in the complexity class P.\n\nNow let's evaluate the given options:\n-   **A:** Incorrect. The Hamiltonian Path problem is NP-complete. Reducing an unknown problem *to* an NP-complete problem does not prove it is in P. Furthermore, the problem is related to Eulerian paths (traversing edges), not Hamiltonian paths (visiting vertices).\n-   **B:** Correct. As shown above, the problem can be modeled as finding an Eulerian path in a graph, and the conditions for an Eulerian path can be checked in polynomial time. This places the problem in P.\n-   **C:** Incorrect. The Traveling Salesperson Problem (TSP) and related problems like Hamiltonian Path involve visiting each *vertex* once. Our problem requires using each *edge* (domino) once, which is fundamentally different and computationally easier.\n-   **D:** Incorrect. This statement describes the complexity of a naive brute-force algorithm. The complexity class of a problem is determined by the *most efficient* possible algorithm, not by an inefficient one. The existence of a polynomial-time algorithm proves the problem is in P, regardless of the existence of exponential-time brute-force solutions.\n-   **E:** Incorrect. The problem is clearly decidable, as we have just outlined a deterministic algorithm that always terminates and gives the correct answer.\n\nThus, the only correct statement is B.", "answer": "$$\\boxed{B}$$", "id": "1453847"}]}