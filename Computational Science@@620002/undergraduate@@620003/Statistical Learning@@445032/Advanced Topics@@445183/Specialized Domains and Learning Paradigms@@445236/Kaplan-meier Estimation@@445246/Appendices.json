{"hands_on_practices": [{"introduction": "Before we can apply the powerful Kaplan-Meier formula, we must first learn how to process raw time-to-event data. This foundational exercise guides you through summarizing a dataset by identifying the distinct event times and, for each one, carefully counting the number of subjects at risk ($Y_j$), the number of events ($d_j$), and the number of individuals censored in the preceding interval ($c_j$). Mastering this preliminary step [@problem_id:1961488] is essential for ensuring accuracy and building a solid intuition for the mechanics of survival analysis.", "problem": "A clinical trial is conducted to evaluate the efficacy of a new drug, \"Neurostabil,\" in preventing the recurrence of a neurological symptom. Fifteen subjects participate in the study, which is planned for a duration of 12 months. For each subject, the data is recorded as a pair `(time, status)`, where `time` is the number of months until either the symptom recurs (an event) or the subject is censored, and `status` is an indicator variable (1 for an event, 0 for censored). A subject is censored if they drop out of the study or if the study ends before they experience an event.\n\nThe data for the 15 subjects are as follows:\n(3, 1), (5, 1), (12, 0), (7, 1), (4, 0), (9, 1), (7, 1), (10, 0), (11, 1), (12, 0), (3, 1), (7, 1), (8, 0), (5, 0), (9, 1)\n\nTo prepare for a Kaplan-Meier survival analysis, you are asked to summarize this data. Let $t_1  t_2  \\dots  t_k$ be the sequence of unique, ordered event times. For each distinct event time $t_j$ (where $j=1, \\dots, k$), we define the following quantities:\n- $Y_j$: The number of subjects at risk just prior to time $t_j$. A subject is considered at risk if they have not yet had an event or been censored before time $t_j$.\n- $d_j$: The number of subjects who experience an event at time $t_j$.\n- $c_j$: The number of subjects who are censored in the time interval $[t_{j-1}, t_j)$, where $t_0 = 0$.\n\nDetermine the sequence of triples $(Y_j, d_j, c_j)$ for all distinct event times. Present your answer as a matrix where the $j$-th row contains the triple for the $j$-th event time.", "solution": "We have a total of 15 subjects. Let the distinct ordered event times be $t_1  t_2  \\dots  t_k$. From the data, the times with events (status equal to 1) are $3,5,7,9,11$. Sorting and counting multiplicities gives:\n- $t_1=3$ with $d_1=2$ events,\n- $t_2=5$ with $d_2=1$ event,\n- $t_3=7$ with $d_3=3$ events,\n- $t_4=9$ with $d_4=2$ events,\n- $t_5=11$ with $d_5=1$ event.\nThus $k=5$ and $(d_1,d_2,d_3,d_4,d_5)=(2,1,3,2,1)$.\n\nCensoring times (status equal to 0) are $4,5,8,10,12,12$. By definition, for each $j$, $c_j$ counts the number censored in the interval $[t_{j-1}, t_j)$, where $t_0 = 0$. Therefore:\n- $c_1$ counts censoring in $[0,3)$: none, so $c_1=0$.\n- $c_2$ counts censoring in $[3,5)$: time $4$ only, so $c_2=1$.\n- $c_3$ counts censoring in $[5,7)$: time $5$ only, so $c_3=1$.\n- $c_4$ counts censoring in $[7,9)$: time $8$ only, so $c_4=1$.\n- $c_5$ counts censoring in $[9,11)$: time $10$ only, so $c_5=1$.\nCensorings at time $12$ lie in $[11,\\infty)$ and thus do not contribute to any $c_j$ for $j=1,\\dots,5$.\n\nBy definition, $Y_j$ is the number at risk just prior to $t_j$. Using $n=15$ and the recursive update that removes events at $t_{j-1}$ and censorings in $[t_{j-1}, t_j)$, we have:\n$$\nY_1=n-c_1=15-0=15,\n$$\nand for $j\\geq 2$,\n$$\nY_j=Y_{j-1}-d_{j-1}-c_j.\n$$\nCompute successively:\n- $Y_2=Y_1-d_1-c_2=15-2-1=12$,\n- $Y_3=Y_2-d_2-c_3=12-1-1=10$,\n- $Y_4=Y_3-d_3-c_4=10-3-1=6$,\n- $Y_5=Y_4-d_4-c_5=6-2-1=3$.\n\nCollecting $(Y_j,d_j,c_j)$ for $j=1,\\dots,5$ in the order of event times $t_j=(3,5,7,9,11)$ yields the matrix with rows\n$(15,2,0)$, $(12,1,1)$, $(10,3,1)$, $(6,2,1)$, $(3,1,1)$.", "answer": "$$\\boxed{\\begin{pmatrix}\n15  2  0 \\\\\n12  1  1 \\\\\n10  3  1 \\\\\n6  2  1 \\\\\n3  1  1\n\\end{pmatrix}}$$", "id": "1961488"}, {"introduction": "Once the data is organized, we can proceed to the core task of estimating the survival function. This practice asks you to apply the Kaplan-Meier product-limit formula, $\\hat{S}(t) = \\prod_{i: t_i \\le t} (1 - d_i/n_i)$, to calculate the survival probability at a specific point in time. By working through this calculation step-by-step [@problem_id:1961438], you will gain a concrete understanding of how the survival curve is constructed, observing how each event contributes to a decrease in the estimated probability of survival.", "problem": "A materials science research group is testing the durability of a new type of biodegradable electronic component. A total of 8 components are subjected to an accelerated aging test. An \"event\" is defined as the component failing. Due to limitations in the testing apparatus, some tests are stopped before the component fails; these are considered \"censored\" observations. The study recorded the following data, where each pair represents (time in hours, status), with status '1' indicating a failure and status '0' indicating the observation was censored at that time:\n\n(15, 1), (25, 1), (40, 1), (30, 0), (50, 1), (35, 0), (55, 0), (20, 1)\n\nCalculate the Kaplan-Meier estimate of the survival function, $\\hat{S}(t)$, evaluated at the exact time of the second observed failure event in the study. Express your answer as a decimal rounded to three significant figures.", "solution": "The problem asks for the Kaplan-Meier estimate of the survival function, $\\hat{S}(t)$, at a specific time. The Kaplan-Meier estimator is a non-parametric statistic used to estimate the survival function from lifetime data, which may be censored. The formula for the estimator is the product-limit formula:\n$$ \\hat{S}(t) = \\prod_{i: t_i \\le t} \\left( 1 - \\frac{d_i}{n_i} \\right) $$\nwhere $t_i$ are the distinct times at which an event (failure) occurs, $d_i$ is the number of events at time $t_i$, and $n_i$ is the number of individuals at risk (i.e., components still under observation and not having failed) just prior to time $t_i$.\n\nFirst, we must organize the data chronologically. The dataset consists of 8 components with their event/censoring times: (15, 1), (25, 1), (40, 1), (30, 0), (50, 1), (35, 0), (55, 0), (20, 1). Sorting these by time gives:\n\n1.  Time 15: Failure (Event)\n2.  Time 20: Failure (Event)\n3.  Time 25: Failure (Event)\n4.  Time 30: Censored\n5.  Time 35: Censored\n6.  Time 40: Failure (Event)\n7.  Time 50: Failure (Event)\n8.  Time 55: Censored\n\nThe problem asks for the estimate $\\hat{S}(t)$ at the time of the *second observed failure event*. From the ordered list, the first failure event occurs at $t=15$ hours, and the second failure event occurs at $t=20$ hours. Therefore, we need to calculate $\\hat{S}(20)$.\n\nThe calculation involves taking a product over all distinct event times up to and including $t=20$. The relevant event times are $t_1 = 15$ and $t_2 = 20$.\n\nAt the beginning of the study, at $t=0$, all 8 components are at risk.\n\n**Step 1: Calculate the survival factor for the first event at $t_1 = 15$.**\n- The number of components at risk just before $t=15$ is $n_1 = 8$.\n- The number of failures at $t=15$ is $d_1 = 1$.\n- The survival probability estimate just after this event is calculated. The factor for this step is $\\left(1 - \\frac{d_1}{n_1}\\right) = \\left(1 - \\frac{1}{8}\\right) = \\frac{7}{8}$.\n- The Kaplan-Meier estimate for any time $t$ in the interval $[15, 20)$ is $\\hat{S}(t) = \\frac{7}{8}$.\n\n**Step 2: Calculate the survival factor for the second event at $t_2 = 20$.**\n- To find the number of components at risk just before $t=20$, we start with the number at risk before the previous event ($n_1=8$) and subtract all individuals who had an event or were censored between that time and the current time. One component failed at $t=15$. No components were censored between $t=15$ and $t=20$.\n- So, the number of components at risk just before $t=20$ is $n_2 = 8 - 1 = 7$.\n- The number of failures at $t=20$ is $d_2 = 1$.\n- The factor for this step is $\\left(1 - \\frac{d_2}{n_2}\\right) = \\left(1 - \\frac{1}{7}\\right) = \\frac{6}{7}$.\n\n**Step 3: Combine the factors to find $\\hat{S}(20)$.**\nThe value of the Kaplan-Meier estimator at $t=20$ is the product of all survival factors for events occurring at or before this time.\n$$ \\hat{S}(20) = \\prod_{i: t_i \\le 20} \\left( 1 - \\frac{d_i}{n_i} \\right) = \\left(1 - \\frac{d_1}{n_1}\\right) \\times \\left(1 - \\frac{d_2}{n_2}\\right) $$\n$$ \\hat{S}(20) = \\left(\\frac{7}{8}\\right) \\times \\left(\\frac{6}{7}\\right) $$\nThe '7' terms cancel out:\n$$ \\hat{S}(20) = \\frac{6}{8} = \\frac{3}{4} $$\nAs a decimal, this is $0.75$.\n\nThe problem requires the answer to be rounded to three significant figures. To express $0.75$ with three significant figures, we add a trailing zero.\n\nTherefore, the Kaplan-Meier estimate is $0.750$.", "answer": "$$\\boxed{0.750}$$", "id": "1961438"}, {"introduction": "Real-world studies rarely have perfectly clean data; complexities such as staggered entry, where subjects begin observation at different times, are common. This advanced practice introduces the concept of left-truncated data and challenges you to adapt the Kaplan-Meier estimator by correctly redefining the risk set. By implementing and comparing a naive estimator with one that properly accounts for delayed entry [@problem_id:3135812], you will not only sharpen your programming skills but also learn to recognize and correct for potential biases in survival analysis.", "problem": "Consider a time-to-event setting with right censoring and staggered starts. Each subject $i$ has a delayed entry time $l_i \\ge 0$ (the subject is not under observation before $l_i$), an observed follow-up time $t_i \\ge l_i$ (the minimum of event time and censoring time), and an event indicator $\\delta_i \\in \\{0,1\\}$, where $\\delta_i=1$ denotes an event at time $t_i$ and $\\delta_i=0$ denotes right censoring at time $t_i$. The survival function is $S(t) = \\mathbb{P}(Tt)$ for a nonnegative failure time $T$. In the presence of delayed entry, risk sets must be formed conditionally on subjects having entered observation by time $t$.\n\nStarting from the definitions of the survival function and the logic of risk sets under right censoring and left truncation, implement a program that:\n- Constructs the nonparametric estimator of the survival function based on the product of conditional survival factors over distinct event times, using risk sets that correctly account for delayed entry.\n- Constructs a naive estimator that ignores delayed entry by treating all $l_i$ as $0$ when forming risk sets (while still respecting right censoring).\n- Evaluates both estimators at specified time points.\n\nYour program must process the following test suite. In each case, return two lists of survival values (rounded to $6$ decimal places): the first list is the naive estimate evaluated at the given times, and the second list is the left-truncation-corrected estimate evaluated at the same times. Aggregate all cases into a single list.\n\nTest Suite:\n- Case $1$ (general staggered entry and mixed events/censoring):\n  - Delayed entry times $l$: $[0,1,2,2,3,0,4,5]$\n  - Observed times $t$: $[2,4,6,3,8,7,10,5]$\n  - Event indicators $\\delta$: $[1,1,1,0,0,1,0,1]$\n  - Evaluation times $\\tau$: $[0,2,4,6,8,10]$\n- Case $2$ (immediate events at entry and late entries):\n  - Delayed entry times $l$: $[3,1,5,2]$\n  - Observed times $t$: $[3,6,7,2]$\n  - Event indicators $\\delta$: $[1,1,0,1]$\n  - Evaluation times $\\tau$: $[1,2,3,4,6,7]$\n- Case $3$ (no left truncation; all entries at $0$):\n  - Delayed entry times $l$: $[0,0,0,0,0]$\n  - Observed times $t$: $[1,3,4,6,9]$\n  - Event indicators $\\delta$: $[1,1,0,1,0]$\n  - Evaluation times $\\tau$: $[0,1,3,4,6,9]$\n- Case $4$ (tied events with heterogeneous entries):\n  - Delayed entry times $l$: $[0,2,2,4,5]$\n  - Observed times $t$: $[4,4,6,4,7]$\n  - Event indicators $\\delta$: $[1,1,1,1,0]$\n  - Evaluation times $\\tau$: $[2,4,6,7]$\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each element of this outer list corresponds to a case and must be a pair of lists $[\\text{naive},\\text{left\\_trunc}]$, where each inner list contains the survival values at the specified evaluation times. Format each survival value as a decimal rounded to $6$ places (for example, $0.123456$). The final output must have no spaces anywhere in the line. For example, a syntactically valid output with two cases would look like $[[[0.900000,0.800000],[0.950000,0.850000]],[[0.750000],[0.700000]]]$.", "solution": "The user requests the implementation and comparison of two survival function estimators in a time-to-event setting characterized by right censoring and left truncation (delayed entry). The first estimator is a naive one that ignores left truncation, while the second correctly accounts for it.\n\nThe problem is scientifically valid. It is grounded in the well-established statistical theory of survival analysis, specifically the Kaplan-Meier product-limit estimator and its extension to handle left-truncated data. The definitions and constraints ($l_i$, $t_i$, $\\delta_i$) are standard, and the task is a well-posed computational problem with a unique solution for each test case.\n\n### 1. Theoretical Foundation\n\nLet $T$ be a non-negative random variable representing the time until an event of interest occurs. The **survival function**, $S(t)$, is defined as the probability that the event time $T$ is greater than some time $t$:\n$$\nS(t) = \\mathbb{P}(T > t)\n$$\nIn many practical scenarios, we cannot observe the true event time $T_i$ for every subject $i$. The observation may be terminated by right censoring or initiated after time zero (left truncation).\n\nThe data for each subject $i$ consists of a triplet $(l_i, t_i, \\delta_i)$:\n- $l_i \\ge 0$: The left-truncation or delayed entry time. The subject is not under observation during the interval $[0, l_i)$.\n- $t_i \\ge l_i$: The observed time, which is the minimum of the true event time and a censoring time.\n- $\\delta_i \\in \\{0, 1\\}$: The event indicator, where $\\delta_i = 1$ if the event was observed at time $t_i$, and $\\delta_i = 0$ if the observation was right-censored at $t_i$.\n\n### 2. The Product-Limit Estimator\n\nThe Kaplan-Meier estimator, also known as the product-limit estimator, provides a non-parametric estimate of the survival function. It is based on estimating the conditional probability of surviving past each distinct event time, given that the subject was at risk just prior to that time.\n\nLet the distinct event times observed in the sample be $t_{(1)}  t_{(2)}  \\dots  t_{(k)}$. The estimated survival function $\\hat{S}(t)$ is given by the product:\n$$\n\\hat{S}(t) = \\prod_{j: t_{(j)} \\le t} \\left(1 - \\frac{d_j}{n_j}\\right)\n$$\nwhere for each distinct event time $t_{(j)}$:\n- $d_j$: The number of subjects who experience the event at time $t_{(j)}$.\n- $n_j$: The number of subjects in the **risk set** just before time $t_{(j)}$.\n\nThe core of the problem lies in the correct definition of the risk set, which differs between the naive and the corrected estimators.\n\n#### 2.1. Naive Estimator (Ignoring Left Truncation)\n\nThis estimator computes the standard Kaplan-Meier estimate, effectively assuming all subjects enter the study at time $0$ (i.e., all $l_i = 0$). The risk set at any time $u$, denoted $R_{\\text{naive}}(u)$, consists of all subjects who have not yet experienced an event or been censored.\n$$\nR_{\\text{naive}}(u) = \\{i \\mid t_i \\ge u\\}\n$$\nThus, the number of subjects at risk for an event at time $t_{(j)}$ is:\n$$\nn_j^{\\text{naive}} = |\\{i \\mid t_i \\ge t_{(j)}\\}| = \\sum_{i} \\mathbb{I}(t_i \\ge t_{(j)})\n$$\nwhere $\\mathbb{I}(\\cdot)$ is the indicator function.\n\n#### 2.2. Left-Truncation Corrected Estimator\n\nWhen subjects have delayed entry times $l_i > 0$, they are not at risk of an event until they enter the study. A subject is only at risk at time $u$ if they have entered the study at or before time $u$ AND they are still under observation (have not failed or been censored). The corrected risk set, $R_{\\text{corr}}(u)$, is therefore:\n$$\nR_{\\text{corr}}(u) = \\{i \\mid l_i \\le u \\text{ and } t_i \\ge u\\}\n$$\nThe number of subjects at risk for an event at time $t_{(j)}$ is correctly calculated as:\n$$\nn_j^{\\text{corr}} = |\\{i \\mid l_i \\le t_{(j)} \\text{ and } t_i \\ge t_{(j)}\\}| = \\sum_{i} \\mathbb{I}(l_i \\le t_{(j)} \\land t_i \\ge t_{(j)})\n$$\nThis modification ensures that the denominator of the survival factor correctly reflects the true population at risk at each event time, providing a consistent estimator for $S(t)$ under left truncation.\n\n### 3. Algorithmic Implementation\n\nFor both estimators, the algorithm proceeds as follows:\n1.  Identify the unique event times from the data, $t_{(1)}, t_{(2)}, \\dots, t_{(k)}$, and sort them in ascending order.\n2.  Initialize the estimated survival probability $\\hat{S}(t) = 1.0$ for $t  t_{(1)}$.\n3.  Iterate through the sorted unique event times $t_{(j)}$ for $j=1, \\dots, k$:\n    a. Count the number of events (deaths) at $t_{(j)}$: $d_j = \\sum_{i} \\mathbb{I}(t_i = t_{(j)} \\land \\delta_i = 1)$.\n    b. Calculate the size of the risk set, $n_j$, using the appropriate definition (naive or corrected).\n    c. If $n_j > 0$, compute the conditional survival probability: $p_j = 1 - d_j/n_j$.\n    d. Update the survival estimate: $\\hat{S}(t_{(j)}) = \\hat{S}(t_{(j-1)}) \\times p_j$. For times $t$ such that $t_{(j-1)} \\le t  t_{(j)}$, $\\hat{S}(t) = \\hat{S}(t_{(j-1)})$.\n4.  To evaluate the survival function at a set of specified times $\\tau$, for each $\\tau_k$, we find the value of the estimated step function $\\hat{S}(\\tau_k)$. This is the survival probability calculated at the largest event time $t_{(j)}$ such that $t_{(j)} \\le \\tau_k$. If $\\tau_k$ is before the first event time $t_{(1)}$, then $\\hat{S}(\\tau_k) = 1.0$.\n\nThe implementation will apply this logic to each test case, producing two lists of survival probabilities corresponding to the naive and corrected estimators evaluated at the given time points.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the survival analysis problem for all test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"l\": [0, 1, 2, 2, 3, 0, 4, 5],\n            \"t\": [2, 4, 6, 3, 8, 7, 10, 5],\n            \"delta\": [1, 1, 1, 0, 0, 1, 0, 1],\n            \"tau\": [0, 2, 4, 6, 8, 10],\n        },\n        {\n            \"l\": [3, 1, 5, 2],\n            \"t\": [3, 6, 7, 2],\n            \"delta\": [1, 1, 0, 1],\n            \"tau\": [1, 2, 3, 4, 6, 7],\n        },\n        {\n            \"l\": [0, 0, 0, 0, 0],\n            \"t\": [1, 3, 4, 6, 9],\n            \"delta\": [1, 1, 0, 1, 0],\n            \"tau\": [0, 1, 3, 4, 6, 9],\n        },\n        {\n            \"l\": [0, 2, 2, 4, 5],\n            \"t\": [4, 4, 6, 4, 7],\n            \"delta\": [1, 1, 1, 1, 0],\n            \"tau\": [2, 4, 6, 7],\n        },\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        l_arr = np.array(case[\"l\"])\n        t_arr = np.array(case[\"t\"])\n        delta_arr = np.array(case[\"delta\"])\n        tau_eval = case[\"tau\"]\n\n        naive_survival = compute_survival(\n            l_arr, t_arr, delta_arr, tau_eval, use_truncation=False\n        )\n        corrected_survival = compute_survival(\n            l_arr, t_arr, delta_arr, tau_eval, use_truncation=True\n        )\n\n        all_results.append([naive_survival, corrected_survival])\n    \n    # Format the final output string exactly as required.\n    # str() conversion followed by .replace() is a reliable way to get the format.\n    # The requirement is for no spaces and 6 decimal places. The formatted\n    # f-string approach in the helper ensures the precision, and the final\n    # string manipulation ensures no spaces.\n    \n    result_str = f\"[\"\n    for i, case_res in enumerate(all_results):\n        naive_str = f\"[{','.join(f'{x:.6f}' for x in case_res[0])}]\"\n        corr_str = f\"[{','.join(f'{x:.6f}' for x in case_res[1])}]\"\n        result_str += f\"[{naive_str},{corr_str}]\"\n        if i  len(all_results) - 1:\n            result_str += \",\"\n    result_str += \"]\"\n\n    print(result_str)\n\n\ndef compute_survival(l, t, delta, tau_eval, use_truncation):\n    \"\"\"\n    Computes the survival function estimate.\n    \n    Args:\n        l (np.array): Delayed entry times.\n        t (np.array): Observed follow-up times.\n        delta (np.array): Event indicators.\n        tau_eval (list): Time points to evaluate the survival function at.\n        use_truncation (bool): If True, account for left truncation.\n                               If False, use the naive estimator.\n    \n    Returns:\n        list: A list of survival probabilities rounded to 6 decimal places.\n    \"\"\"\n    # Find unique event times and sort them\n    event_mask = delta == 1\n    unique_event_times = np.unique(t[event_mask])\n    \n    survival_map = {}\n    current_survival = 1.0\n\n    for t_j in unique_event_times:\n        # Number of events at time t_j\n        d_j = np.sum((t == t_j)  (delta == 1))\n\n        # Size of the risk set at time t_j\n        if use_truncation:\n            at_risk_mask = (l = t_j)  (t = t_j)\n        else: # Naive estimator\n            at_risk_mask = (t = t_j)\n        \n        n_j = np.sum(at_risk_mask)\n\n        if n_j > 0:\n            survival_factor = 1.0 - (d_j / n_j)\n            current_survival *= survival_factor\n        \n        survival_map[t_j] = current_survival\n\n    # Evaluate the survival function at the specified times\n    evaluated_survival = []\n    \n    sorted_event_times = sorted(survival_map.keys())\n\n    for tau in tau_eval:\n        # Find the index of the last event time = tau\n        # np.searchsorted gives the insertion point, so idx-1 is the correct index\n        idx = np.searchsorted(sorted_event_times, tau, side='right')\n        \n        if idx == 0:\n            # tau is before the first event\n            s_tau = 1.0\n        else:\n            # The survival probability is determined by the last event at or before tau\n            event_time_key = sorted_event_times[idx - 1]\n            s_tau = survival_map[event_time_key]\n            \n        evaluated_survival.append(round(s_tau, 6))\n        \n    return evaluated_survival\n\nsolve()\n\n```", "id": "3135812"}]}