{"hands_on_practices": [{"introduction": "To build a solid understanding of Rademacher complexity, we start with a foundational calculation. This exercise asks you to compute the empirical Rademacher complexity for a highly simplified hypothesis class, which allows for a direct analytical solution through combinatorial reasoning [@problem_id:694900]. Working through this problem will clarify the role of the expectation over Rademacher variables and how it measures the class's capacity to correlate with random noise.", "problem": "In statistical learning theory, the empirical Rademacher complexity is a measure of the richness of a class of functions with respect to a given data set. It plays a crucial role in deriving data-dependent generalization bounds.\n\nLet $S = \\{z_1, z_2, \\ldots, z_n\\}$ be a fixed set of $n$ distinct points in $\\mathbb{R}$. Let $\\boldsymbol{\\sigma} = (\\sigma_1, \\sigma_2, \\ldots, \\sigma_n)$ be a vector of independent Rademacher random variables, where each $\\sigma_i$ takes values in $\\{-1, 1\\}$ with equal probability: $P(\\sigma_i = 1) = P(\\sigma_i = -1) = 1/2$.\n\nThe empirical Rademacher complexity of a class of functions $\\mathcal{F}$, where each $f \\in \\mathcal{F}$ maps from $\\mathbb{R}$ to $\\mathbb{R}$, with respect to the set $S$ is defined as:\n$$\n\\hat{\\mathfrak{R}}_S(\\mathcal{F}) = \\mathbb{E}_{\\boldsymbol{\\sigma}} \\left[ \\sup_{f \\in \\mathcal{F}} \\frac{1}{n} \\sum_{i=1}^n \\sigma_i f(z_i) \\right]\n$$\n\nConsider a hypothesis class $\\mathcal{H}$ of functions from $\\mathbb{R}$ to $\\{-1, 1\\}$. When these functions are evaluated on the data points in $S$, they produce a set of vectors in $\\mathbb{R}^n$. Suppose this set of vectors, denoted by $\\mathcal{H}|_S = \\{ (h(z_1), \\ldots, h(z_n)) \\mid h \\in \\mathcal{H} \\}$, consists of exactly two vectors, $\\mathbf{v}$ and $-\\mathbf{v}$, for some vector $\\mathbf{v} \\in \\{-1, 1\\}^n$.\n\nYour task is to compute the empirical Rademacher complexity $\\hat{\\mathfrak{R}}_S(\\mathcal{H})$ for this class. The final expression should be a closed-form formula in terms of $n$.", "solution": "1. Definition:\n\n$$\n\\hat{\\mathfrak{R}}_S(\\mathcal{H})\n=\\mathbb{E}_{\\boldsymbol{\\sigma}}\\left[\\sup_{h\\in\\mathcal{H}}\\frac{1}{n}\\sum_{i=1}^n\\sigma_i\\,h(z_i)\\right].\n$$\n\n2. Since $\\mathcal{H}|_S=\\{\\mathbf{v},-\\mathbf{v}\\}$,\n\n$$\n\\sup_{h\\in\\mathcal{H}}\\sum_{i=1}^n\\sigma_i\\,h(z_i)\n=\\max\\left\\{\\sum_i\\sigma_i v_i,\\,-\\sum_i\\sigma_i v_i\\right\\}\n=\\left|\\sum_{i=1}^n\\sigma_i v_i\\right|.\n$$\n\n3. Set $\\tau_i=\\sigma_i v_i$. Since $v_i \\in \\{-1, 1\\}$, the variables $\\tau_i$ are independent and identically distributed Rademacher variables. Then,\n\n$$\n\\hat{\\mathfrak{R}}_S(\\mathcal{H})\n=\\frac{1}{n}\\,\\mathbb{E}\\left[\\left|\\sum_{i=1}^n\\tau_i\\right|\\right]\n=\\frac{1}{n}\\,\\mathbb{E}\\left[|S_n|\\right],\\quad\nS_n=\\sum_{i=1}^n\\tau_i.\n$$\n\n4. A known combinatorial formula for the expected absolute value of a sum of $n$ Rademacher variables yields\n\n$$\n\\mathbb{E}|S_n|\n=\\sum_{k=0}^n\\left|2k-n\\right|\\binom{n}{k}2^{-n}\n=n\\,\\frac{\\binom{n-1}{\\lfloor\\frac{n-1}2\\rfloor}}{2^{n-1}}.\n$$\n\n5. Therefore\n\n$$\n\\hat{\\mathfrak{R}}_S(\\mathcal{H})\n=\\frac{1}{n}\\mathbb{E}|S_n|\n=\\frac{\\binom{n-1}{\\lfloor\\frac{n-1}{2}\\rfloor}}{2^{n-1}}.\n$$", "answer": "$$\\boxed{\\frac{\\binom{n-1}{\\lfloor\\frac{n-1}2\\rfloor}}{2^{n-1}}}$$", "id": "694900"}, {"introduction": "Moving from finite hypothesis sets to continuous function classes is a critical step in applying learning theory. This problem explores the Rademacher complexity of the unit ball within a Reproducing Kernel Hilbert Space (RKHS), a setting fundamental to kernel methods [@problem_id:759130]. You will use the kernel trick to see how the complexity is directly related to the geometry of the data points, as encoded by the Gram matrix.", "problem": "Let $\\mathcal{F}$ be a class of real-valued functions. The empirical Rademacher complexity of $\\mathcal{F}$ with respect to a finite set of points $S = \\{x_1, \\dots, x_n\\} \\subset \\mathbb{R}$ is defined as\n$$ \\hat{\\mathcal{R}}_S(\\mathcal{F}) = \\frac{1}{n} \\mathbb{E}_{\\boldsymbol{\\sigma}} \\left[ \\sup_{f \\in \\mathcal{F}} \\sum_{i=1}^n \\sigma_i f(x_i) \\right] $$\nwhere $\\boldsymbol{\\sigma} = (\\sigma_1, \\dots, \\sigma_n)$ is a vector of independent Rademacher random variables, with $\\mathbb{P}(\\sigma_i = 1) = \\mathbb{P}(\\sigma_i = -1) = 1/2$ for each $i$.\n\nConsider a function class that is the unit ball of a Reproducing Kernel Hilbert Space (RKHS). Let the RKHS $\\mathcal{H}_k$ be generated by the periodic kernel $k(x, x') = \\cos(\\omega(x-x'))$, where $\\omega = 2\\pi/P$ for a given period $P > 0$. The space $\\mathcal{H}_k$ consists of functions of the form $f(x) = a \\cos(\\omega x) + b \\sin(\\omega x)$ for $a, b \\in \\mathbb{R}$, with the RKHS norm squared given by $\\|f\\|_{\\mathcal{H}_k}^2 = a^2+b^2$.\n\nThe function class of interest is the unit ball in this RKHS:\n$$ \\mathcal{F} = \\left\\{ f \\in \\mathcal{H}_k : \\|f\\|_{\\mathcal{H}_k} \\le 1 \\right\\} $$\n\nCalculate the empirical Rademacher complexity $\\hat{\\mathcal{R}}_S(\\mathcal{F})$ for this function class $\\mathcal{F}$ evaluated on the specific set of $n=3$ points $S = \\{x_1, x_2, x_3\\} = \\{0, P/4, P/2\\}$.", "solution": "1. We use the representer-trick: for any RKHS $\\mathcal{H}_k$ with kernel $k$, and any Rademacher vector $\\boldsymbol{\\sigma}$,  \n   $$\\sup_{\\|f\\|_{\\mathcal{H}_k}\\le1}\\sum_{i=1}^n\\sigma_i f(x_i)\n     = \\left\\|\\sum_{i=1}^n\\sigma_i k(x_i,\\cdot)\\right\\|_{\\mathcal{H}_k}.$$\n2. Hence\n   $$\\hat{\\mathfrak{R}}_S(\\mathcal{F})\n     = \\frac{1}{n} \\mathbb{E}_{\\boldsymbol{\\sigma}}\\left[\\left\\|\\sum_{i=1}^3\\sigma_i k(x_i,\\cdot)\\right\\|_{\\mathcal{H}_k}\\right]\n     = \\frac{1}{n} \\mathbb{E}_{\\boldsymbol{\\sigma}}\\left[\\sqrt{\\sum_{i,j=1}^3\\sigma_i\\sigma_j\\,k(x_i,x_j)}\\right].$$\n3. For $x_1=0,\\;x_2=P/4,\\;x_3=P/2$, and $\\omega=2\\pi/P$,  \n   $k(x_i,x_j)=\\cos\\bigl(\\omega(x_i-x_j)\\bigr)$ gives the Gram matrix\n   $$K=\\begin{pmatrix}\n     1 & 0 & -1\\\\\n     0 & 1 & 0\\\\\n    -1 & 0 & 1\n   \\end{pmatrix}.$$\n   Thus\n   $$\\sum_{i,j}\\sigma_i\\sigma_j\\,k(x_i,x_j)\n     =\\sigma_1^2+\\sigma_2^2+\\sigma_3^2-2\\sigma_1\\sigma_3\n     =3-2\\sigma_1\\sigma_3.$$\n4. Since $\\sigma_1\\sigma_3$ takes values $\\pm1$ each with probability $1/2$,  \n   $$\\mathbb{E}\\left[\\sqrt{3-2\\sigma_1\\sigma_3}\\right]\n     =\\frac{1}{2}\\sqrt{3-2\\cdot1}+\\frac{1}{2}\\sqrt{3-2\\cdot(-1)}\n     =\\frac{1}{2}(1+\\sqrt{5}).$$\n5. Therefore, with $n=3$,\n   $$\\hat{\\mathfrak{R}}_S(\\mathcal{F})\n     =\\frac{1}{3}\\cdot\\frac{1+\\sqrt{5}}{2}\n     =\\frac{1+\\sqrt{5}}{6}.$$", "answer": "$$\\boxed{\\frac{1+\\sqrt{5}}{6}}$$", "id": "759130"}, {"introduction": "Analytical computation of Rademacher complexity is often infeasible for practical models. This hands-on coding exercise demonstrates how to estimate it using Monte Carlo methods for ridge-regularized linear models, a workhorse of applied machine learning [@problem_id:3165153]. By analyzing the relationship between the estimated complexity and the model's test error across different regularization strengths, you will empirically validate the core idea that Rademacher complexity is a powerful predictor of generalization performance.", "problem": "You will write a complete program that estimates the empirical Rademacher complexity for linear predictors with ridge regularization and compares its empirical trend to test performance by measuring the monotonic association across a grid of regularization strengths. The task must be solved purely from first principles using core definitions. For reproducibility and universality, datasets will be generated synthetically but designed to emulate realistic linear modeling conditions.\n\nStart from the following foundational definitions and facts.\n\n1. Empirical Rademacher complexity. For a sample $S = \\{x_1,\\dots,x_n\\} \\subset \\mathbb{R}^d$ and a hypothesis class $\\mathcal{F}$ of real-valued functions $f:\\mathbb{R}^d \\to \\mathbb{R}$, the empirical Rademacher complexity is\n$$\n\\hat{\\mathfrak{R}}_S(\\mathcal{F}) \\;=\\; \\mathbb{E}_{\\sigma}\\left[\\frac{1}{n}\\sup_{f \\in \\mathcal{F}} \\sum_{i=1}^{n} \\sigma_i f(x_i)\\right],\n$$\nwhere the expectation is with respect to independent Rademacher variables $\\sigma_i$ taking values in $\\{-1,+1\\}$ with equal probability.\n\n2. Linear class with an $\\ell_2$-norm bound. For the class of linear functions $\\mathcal{F}_B = \\{f_w(x) = w^\\top x: \\| w \\|_2 \\le B\\}$ and fixed inputs $x_1,\\dots,x_n$, the inner supremum has the closed form\n$$\n\\sup_{\\| w \\|_2 \\le B} \\sum_{i=1}^n \\sigma_i w^\\top x_i \\;=\\; B \\left\\| \\sum_{i=1}^n \\sigma_i x_i \\right\\|_2,\n$$\nso that\n$$\n\\hat{\\mathfrak{R}}_S(\\mathcal{F}_B) \\;=\\; \\frac{B}{n}\\,\\mathbb{E}_\\sigma\\left[\\left\\| \\sum_{i=1}^n \\sigma_i x_i \\right\\|_2\\right].\n$$\nWhen the expectation is not computed analytically, it can be estimated by Monte Carlo averaging over $R$ independent draws of $\\sigma \\in \\{-1,+1\\}^n$.\n\n3. Ridge-regularized linear prediction. Given data $(x_i,y_i) \\in \\mathbb{R}^d \\times \\mathbb{R}$ for $i \\in \\{1,\\dots,n\\}$ and a regularization parameter $\\lambda > 0$, the ridge estimator $w_\\lambda \\in \\mathbb{R}^d$ is any minimizer of\n$$\n\\frac{1}{n}\\sum_{i=1}^n \\left(y_i - w^\\top x_i\\right)^2 + \\lambda \\| w \\|_2^2.\n$$\nA well-tested fact is that a solution satisfies the normal equations\n$$\n\\left(\\frac{1}{n}X^\\top X + \\lambda I_d\\right)w_\\lambda \\;=\\; \\frac{1}{n}X^\\top y,\n$$\nwith $X \\in \\mathbb{R}^{n \\times d}$ the design matrix and $y \\in \\mathbb{R}^n$ the response vector.\n\nProblem objective. For each prescribed dataset and a grid of regularization strengths $\\lambda$, you will:\n- Fit ridge regression to obtain $w_\\lambda$.\n- Set $B_\\lambda = \\| w_\\lambda \\|_2$ and compute the empirical Rademacher complexity $\\hat{\\mathfrak{R}}_S(\\mathcal{F}_{B_\\lambda})$ on the training inputs via Monte Carlo.\n- Evaluate the test mean squared error\n$$\n\\text{MSE}_\\lambda \\;=\\; \\frac{1}{n_{\\text{test}}}\\sum_{j=1}^{n_{\\text{test}}}\\left(w_\\lambda^\\top x_j^{(\\text{test})} - y_j^{(\\text{test})}\\right)^2.\n$$\n- Compute the Spearman rank correlation coefficient between the vector of empirical Rademacher complexities $\\{\\hat{\\mathfrak{R}}_S(\\mathcal{F}_{B_\\lambda})\\}$ and the vector of test mean squared errors $\\{\\text{MSE}_\\lambda\\}$ over the grid of $\\lambda$ values. The Spearman correlation is a real number in $[-1,1]$ that quantifies monotone association.\n\nData generation protocol (self-contained). For each test case, generate data from a linear model with additive Gaussian noise as follows:\n- Draw a ground-truth vector $w_\\star \\in \\mathbb{R}^d$ with independent standard normal entries and rescale it so that $\\| w_\\star \\|_2 = 1$.\n- Draw design matrices $X_{\\text{train}} \\in \\mathbb{R}^{n_{\\text{train}} \\times d}$ and $X_{\\text{test}} \\in \\mathbb{R}^{n_{\\text{test}} \\times d}$ with entries independently sampled from a normal distribution with mean $0$ and variance $1/d$. This scaling ensures $\\mathbb{E}\\| x \\|_2^2 \\approx 1$.\n- Draw independent noise vectors $\\varepsilon_{\\text{train}} \\in \\mathbb{R}^{n_{\\text{train}}}$ and $\\varepsilon_{\\text{test}} \\in \\mathbb{R}^{n_{\\text{test}}}$ with entries independently sampled from a normal distribution with mean $0$ and variance $\\sigma^2$.\n- Set $y_{\\text{train}} = X_{\\text{train}} w_\\star + \\varepsilon_{\\text{train}}$ and $y_{\\text{test}} = X_{\\text{test}} w_\\star + \\varepsilon_{\\text{test}}$.\n\nEstimation of empirical Rademacher complexity. For a given $B_\\lambda$ and training inputs $S=\\{x_i\\}_{i=1}^{n_{\\text{train}}}$, estimate\n$$\n\\hat{\\mathfrak{R}}_S(\\mathcal{F}_{B_\\lambda}) \\;\\approx\\; \\frac{B_\\lambda}{n_{\\text{train}}} \\cdot \\frac{1}{R}\\sum_{r=1}^{R}\\left\\| \\sum_{i=1}^{n_{\\text{train}}} \\sigma_i^{(r)} x_i \\right\\|_2,\n$$\nwhere each $\\sigma^{(r)} \\in \\{-1,+1\\}^{n_{\\text{train}}}$ has independent Rademacher entries, and $R$ is a positive integer that you must fix in your program.\n\nTest suite. Use the following three test cases, each specified by a tuple $(\\text{seed}, n_{\\text{train}}, n_{\\text{test}}, d, \\sigma)$:\n- Case $1$: $(0,\\, 40,\\, 200,\\, 100,\\, 0.1)$.\n- Case $2$: $(1,\\, 120,\\, 200,\\, 20,\\, 0.5)$.\n- Case $3$: $(2,\\, 50,\\, 200,\\, 200,\\, 1.0)$.\n\nRegularization grid. Use the same grid of $\\lambda$ values for all cases:\n$$\n\\Lambda \\;=\\; \\{10^{-6},\\, 10^{-4},\\, 10^{-3},\\, 10^{-2},\\, 10^{-1},\\, 1,\\, 10\\}.\n$$\n\nWhat your program must do for each case:\n- Generate the data using the specified tuple and the given seed to initialize the random number generator.\n- For each $\\lambda \\in \\Lambda$, fit ridge regression on the training set, compute $B_\\lambda$, estimate $\\hat{\\mathfrak{R}}_S(\\mathcal{F}_{B_\\lambda})$ using a Monte Carlo sample size $R$ of your choice (fix $R$ to a single value used for all cases), and compute $\\text{MSE}_\\lambda$ on the test set.\n- Compute the Spearman rank correlation coefficient between the vectors $\\{\\hat{\\mathfrak{R}}_S(\\mathcal{F}_{B_\\lambda})\\}_{\\lambda \\in \\Lambda}$ and $\\{\\text{MSE}_\\lambda\\}_{\\lambda \\in \\Lambda}$.\n- Record the correlation as a floating-point number for the case.\n\nAnswer specification and final output format:\n- The answer for each test case is a single floating-point number: the Spearman rank correlation coefficient in $[-1,1]$ as defined above.\n- Your program should produce a single line of output containing the three correlation coefficients, in order of the cases, as a comma-separated list enclosed in square brackets, for example, $[c_1,c_2,c_3]$.\n- No physical units are involved in this task.", "solution": "The problem has been validated and found to be scientifically sound, well-posed, and self-contained. It presents a standard computational experiment from statistical learning theory, requiring the implementation of data generation, model fitting, and complexity measurement from first principles. The objective is to empirically investigate the relationship between the Rademacher complexity of a regularized linear model class and its generalization performance. A complete and reasoned solution will now be provided.\n\nThe core of the problem is to analyze the monotonic association between two quantities across a range of regularization strengths, $\\lambda$. These quantities are:\n$1$. The empirical Rademacher complexity of a class of linear predictors, $\\hat{\\mathfrak{R}}_S(\\mathcal{F}_{B_\\lambda})$. The class $\\mathcal{F}_{B_\\lambda} = \\{f_w(x) = w^\\top x: \\| w \\|_2 \\le B_\\lambda\\}$ is defined by a data-dependent radius $B_\\lambda = \\| w_\\lambda \\|_2$, where $w_\\lambda$ is the solution to the ridge regression problem for a given $\\lambda$.\n$2$. The mean squared error (MSE) on a held-out test set, $\\text{MSE}_\\lambda$, which serves as an estimate of the model's generalization error.\n\nThe analysis will proceed according to the following steps for each specified test case.\n\n**1. Synthetic Data Generation**\nData is generated from a ground-truth linear model $y = Xw_\\star + \\varepsilon$.\n- A true parameter vector $w_\\star \\in \\mathbb{R}^d$ is created by sampling from a standard normal distribution and normalizing its $\\ell_2$-norm to $1$, i.e., $\\| w_\\star \\|_2 = 1$.\n- Training and testing design matrices, $X_{\\text{train}} \\in \\mathbb{R}^{n_{\\text{train}} \\times d}$ and $X_{\\text{test}} \\in \\mathbb{R}^{n_{\\text{test}} \\times d}$, are populated with independent and identically distributed entries drawn from a normal distribution $N(0, 1/d)$. The variance scaling ensures that the expected squared $\\ell_2$-norm of a feature vector $x_i$ is $\\mathbb{E}[\\| x_i \\|_2^2] = d \\cdot (1/d) = 1$.\n- Additive noise vectors, $\\varepsilon_{\\text{train}}$ and $\\varepsilon_{\\text{test}}$, are generated with entries drawn from $N(0, \\sigma^2)$, where $\\sigma$ is a specified noise standard deviation.\n- The final response vectors are computed as $y_{\\text{train}} = X_{\\text{train}} w_\\star + \\varepsilon_{\\text{train}}$ and $y_{\\text{test}} = X_{\\text{test}} w_\\star + \\varepsilon_{\\text{test}}$.\n\n**2. Ridge Regression**\nFor each value of the regularization parameter $\\lambda$ in the specified grid $\\Lambda$, the ridge estimator $w_\\lambda$ is found by solving the normal equations:\n$$\n\\left(\\frac{1}{n_{\\text{train}}}X_{\\text{train}}^\\top X_{\\text{train}} + \\lambda I_d\\right)w_\\lambda = \\frac{1}{n_{\\text{train}}}X_{\\text{train}}^\\top y_{\\text{train}}\n$$\nwhere $I_d$ is the $d \\times d$ identity matrix. This constitutes a linear system of the form $A\\mathbf{w}=\\mathbf{b}$, where $A = (\\frac{1}{n_{\\text{train}}}X_{\\text{train}}^\\top X_{\\text{train}} + \\lambda I_d)$ and $\\mathbf{b} = (\\frac{1}{n_{\\text{train}}}X_{\\text{train}}^\\top y_{\\text{train}})$. Since $\\lambda > 0$ and $X_{\\text{train}}^\\top X_{\\text{train}}$ is positive semi-definite, the matrix $A$ is positive definite and thus invertible, guaranteeing a unique solution for $w_\\lambda$. This system is solved using standard numerical linear algebra routines.\n\n**3. Empirical Rademacher Complexity Estimation**\nThe analytical expression for the empirical Rademacher complexity of the class $\\mathcal{F}_{B_\\lambda}$ on the training sample $S = \\{x_1, \\dots, x_{n_{\\text{train}}}\\}$ is:\n$$\n\\hat{\\mathfrak{R}}_S(\\mathcal{F}_{B_\\lambda}) = \\frac{B_\\lambda}{n_{\\text{train}}}\\,\\mathbb{E}_\\sigma\\left[\\left\\| \\sum_{i=1}^{n_{\\text{train}}} \\sigma_i x_i \\right\\|_2\\right]\n$$\nwhere $B_\\lambda = \\| w_\\lambda \\|_2$ and the expectation is over Rademacher variables $\\sigma_i \\in \\{-1, +1\\}$.\nThe expectation is estimated via Monte Carlo simulation. We draw $R$ independent random vectors $\\sigma^{(r)} = (\\sigma_1^{(r)}, \\dots, \\sigma_{n_{\\text{train}}}^{(r)})$, for $r=1, \\dots, R$. The estimate is then:\n$$\n\\hat{\\mathfrak{R}}_S(\\mathcal{F}_{B_\\lambda}) \\approx \\frac{B_\\lambda}{n_{\\text{train}}} \\cdot \\frac{1}{R}\\sum_{r=1}^{R}\\left\\| \\sum_{i=1}^{n_{\\text{train}}} \\sigma_i^{(r)} x_i \\right\\|_2\n$$\nComputationally, if we form a matrix $\\Sigma \\in \\mathbb{R}^{R \\times n_{\\text{train}}}$ where each row is a vector $\\sigma^{(r)}$, the sums $\\sum_i \\sigma_i^{(r)} x_i$ for all $r$ can be computed efficiently as a single matrix product $\\Sigma X_{\\text{train}}$. The $\\ell_2$-norms of the resulting $R$ vectors in $\\mathbb{R}^d$ are then calculated and averaged.\n\n**4. Test Error Evaluation**\nThe performance of each learned model $w_\\lambda$ is evaluated on the unseen test data. The test mean squared error is calculated as:\n$$\n\\text{MSE}_\\lambda = \\frac{1}{n_{\\text{test}}}\\sum_{j=1}^{n_{\\text{test}}}\\left(w_\\lambda^\\top x_j^{(\\text{test})} - y_j^{(\\text{test})}\\right)^2\n$$\n\n**5. Monotonic Association Analysis**\nAfter computing the vectors of complexities $\\{\\hat{\\mathfrak{R}}_S(\\mathcal{F}_{B_\\lambda})\\}_{\\lambda \\in \\Lambda}$ and test errors $\\{\\text{MSE}_\\lambda\\}_{\\lambda \\in \\Lambda}$, the monotonic association between them is quantified using the Spearman rank correlation coefficient, $\\rho$. This coefficient is equivalent to the Pearson correlation coefficient computed on the rank-transformed data. It is insensitive to the specific functional relationship between the variables, capturing only the strength and direction of the monotonic trend. A value of $\\rho = 1$ indicates a perfect increasing monotonic relationship, $\\rho = -1$ indicates a perfect decreasing monotonic relationship, and $\\rho = 0$ indicates no monotonic relationship. A high positive correlation would suggest that the empirical Rademacher complexity is a good indicator of the model's generalization behavior across different levels of regularization.", "answer": "```python\nimport numpy as np\nfrom scipy.stats import spearmanr\n\ndef solve():\n    \"\"\"\n    Solves the problem of estimating empirical Rademacher complexity for ridge\n    regression and comparing it to test performance via Spearman correlation.\n    \"\"\"\n    test_cases = [\n        # (seed, n_train, n_test, d, sigma_noise)\n        (0, 40, 200, 100, 0.1),\n        (1, 120, 200, 20, 0.5),\n        (2, 50, 200, 200, 1.0),\n    ]\n\n    lambda_grid = np.array([1e-6, 1e-4, 1e-3, 1e-2, 1e-1, 1, 10])\n\n    # Fix the number of Monte Carlo samples for Rademacher complexity estimation.\n    R = 500\n\n    correlation_results = []\n\n    for seed, n_train, n_test, d, sigma_noise in test_cases:\n        rng = np.random.default_rng(seed)\n\n        # 1. Synthetic Data Generation\n        # Generate ground-truth vector w_star (d x 1) and normalize\n        w_star = rng.standard_normal(size=(d, 1))\n        w_star /= np.linalg.norm(w_star)\n\n        # Generate design matrices (n x d)\n        X_train = rng.normal(loc=0.0, scale=1.0/np.sqrt(d), size=(n_train, d))\n        X_test = rng.normal(loc=0.0, scale=1.0/np.sqrt(d), size=(n_test, d))\n\n        # Generate noise vectors (n x 1)\n        eps_train = rng.normal(loc=0.0, scale=sigma_noise, size=(n_train, 1))\n        eps_test = rng.normal(loc=0.0, scale=sigma_noise, size=(n_test, 1))\n\n        # Generate response vectors y (n x 1)\n        y_train = X_train @ w_star + eps_train\n        y_test = X_test @ w_star + eps_test\n\n        rademacher_complexities = []\n        test_mses = []\n\n        # Pre-compute parts for Rademacher complexity estimation that do not depend on lambda\n        # Generate R Rademacher random vectors\n        sigma_vectors = rng.choice([-1.0, 1.0], size=(R, n_train))\n        # Compute the sum of sigma_i * x_i for each of the R vectors\n        sum_sigma_x = sigma_vectors @ X_train  # Resulting shape (R, d)\n        # Compute the L2 norm for each of the R resulting d-dimensional vectors\n        norms_of_sum_sigma_x = np.linalg.norm(sum_sigma_x, axis=1)\n        # Compute the Monte Carlo estimate of the expectation term\n        mean_norm_expectation_part = np.mean(norms_of_sum_sigma_x)\n\n        # Pre-compute parts for ridge regression\n        XtX = X_train.T @ X_train\n        Xty = X_train.T @ y_train\n        I_d = np.identity(d)\n        \n        for lambda_val in lambda_grid:\n            # 2. Ridge Regression\n            # Solve (1/n * XtX + lambda * I) w = 1/n * Xty\n            A = (1.0 / n_train) * XtX + lambda_val * I_d\n            b = (1.0 / n_train) * Xty\n            w_lambda = np.linalg.solve(A, b)\n\n            # 3. Empirical Rademacher Complexity Estimation\n            B_lambda = np.linalg.norm(w_lambda)\n            rad_comp = (B_lambda / n_train) * mean_norm_expectation_part\n            rademacher_complexities.append(rad_comp)\n\n            # 4. Test Error Evaluation\n            y_pred_test = X_test @ w_lambda\n            mse = np.mean((y_pred_test - y_test)**2)\n            test_mses.append(mse)\n\n        # 5. Monotonic Association Analysis\n        # Use scipy.stats.spearmanr to compute the correlation coefficient.\n        # The result object has 'correlation' and 'pvalue' attributes.\n        correlation_result = spearmanr(rademacher_complexities, test_mses)\n        correlation_results.append(correlation_result.correlation)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, correlation_results))}]\")\n\nsolve()\n```", "id": "3165153"}]}