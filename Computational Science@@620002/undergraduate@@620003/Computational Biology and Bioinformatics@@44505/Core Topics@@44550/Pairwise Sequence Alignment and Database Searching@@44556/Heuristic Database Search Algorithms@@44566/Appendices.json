{"hands_on_practices": [{"introduction": "Heuristic database search algorithms are built on a fundamental trade-off between speed and sensitivity, which is heavily influenced by the initial \"seeding\" step. A core parameter you can tune is the seed word size, $W$. This practice will guide you through a foundational calculation to understand this trade-off quantitatively: deriving the probability of a seed word matching a random database sequence purely by chance [@problem_id:2396864]. Mastering this concept is the first step toward developing an intuition for how algorithms like BLAST manage to be so fast.", "problem": "Consider seed-and-extend heuristic database search as used in tools such as the Basic Local Alignment Search Tool (BLAST). A query contains a fixed contiguous seed word of length $W$ over an alphabet of size $k$. Model a target database as a single long sequence of length $N$ in which characters are independently and identically distributed, each uniformly drawn from the $k$ letters. Assume that for each possible starting position in the database, whether the seed matches exactly at that position can be treated as an independent Bernoulli trial. Under this model, derive a closed-form analytic expression, in terms of $W$, $k$, and $N$, for the probability that the database contains at least one exact occurrence of the seed. Provide your answer as a single analytic expression. Do not include any units.", "solution": "The problem statement must first be rigorously validated.\n\nStep 1: Extract Givens.\n- A query contains a contiguous seed word of length $W$.\n- The alphabet has a size of $k$.\n- A target database is a single sequence of length $N$.\n- Database characters are independently and identically distributed (i.i.d.), each uniformly drawn from the $k$ letters.\n- For each possible starting position in the database, the event of an exact seed match is treated as an independent Bernoulli trial.\n- The objective is to derive a closed-form analytic expression for the probability that the database contains at least one exact occurrence of the seed, in terms of $W$, $k$, and $N$.\n\nStep 2: Validate Using Extracted Givens.\nThe problem is scientifically grounded, as it employs a standard probabilistic model used in the introductory analysis of bioinformatics algorithms. The assumption that match events at different starting positions are independent Bernoulli trials is a significant simplification of reality—in a real sequence, overlapping potential matches are not independent—however, the problem explicitly instructs us to use this model. As such, this is a feature of the given theoretical framework, not a flaw in the problem statement itself. The problem is well-posed, objective, and contains sufficient information for a unique solution within the specified model. It is mathematically formalizable and free of contradictions or logical fallacies.\n\nVerdict: The problem is valid. We will proceed to derive the solution.\n\nThe event of interest is that the database contains at least one exact occurrence of the seed. Let us denote this event by $A$. It is often simpler to calculate the probability of the complementary event, denoted $A^c$, which is the event that the database contains *no* exact occurrences of the seed. The law of total probability states that $P(A) = 1 - P(A^c)$.\n\nFirst, we must determine the probability of an exact match at a single, specific starting position in the database. Let us call this event $E_i$ for a starting position $i$. The seed word has length $W$. For an exact match to occur at position $i$, the character at position $i$ in the database must match the first character of the seed, the character at $i+1$ must match the second, and so on, up to position $i+W-1$.\n\nThe problem states that the characters in the database are drawn uniformly from an alphabet of size $k$. Thus, the probability of any single database character matching a specific character from the seed is $\\frac{1}{k}$. Since the database characters are also i.i.d., the probability of a sequence of $W$ specific characters occurring contiguously is the product of their individual probabilities. Therefore, the probability of an exact match at any single given starting position, let us call this probability $p$, is:\n$$p = \\left(\\frac{1}{k}\\right)^W = k^{-W}$$\n\nThis is the probability of \"success\" for a single Bernoulli trial. The probability of \"failure,\" i.e., no match at a given position, is $1-p$.\n$$1-p = 1 - k^{-W}$$\n\nNext, we must determine the number of possible starting positions for the seed in the database. The database has length $N$ and the seed has length $W$. We assume $N \\ge W$, as otherwise, a match is impossible. The first possible starting position is at index $1$ (spanning database characters $1$ through $W$). The last possible starting position is at index $N-W+1$ (spanning characters $N-W+1$ through $N$). Thus, there are a total of $M$ possible starting positions, where:\n$$M = (N - W + 1) - 1 + 1 = N - W + 1$$\n\nThe problem explicitly states that we are to treat these $M$ possible match events as independent Bernoulli trials. The event $A^c$—that no exact matches occur in the entire database—is equivalent to the event that we observe failure at all $M$ independent trials. The probability of this compound event is the product of the probabilities of the individual failures:\n$$P(A^c) = (1 - p)^M = \\left(1 - k^{-W}\\right)^{N-W+1}$$\n\nFinally, the probability of at least one exact match, $P(A)$, is found by substituting this result back into the complementary probability formula:\n$$P(A) = 1 - P(A^c) = 1 - \\left(1 - k^{-W}\\right)^{N-W+1}$$\n\nThis expression is a closed-form analytic solution for the requested probability in terms of the given parameters $W$, $k$, and $N$.", "answer": "$$\n\\boxed{1 - \\left(1 - k^{-W}\\right)^{N-W+1}}\n$$", "id": "2396864"}, {"introduction": "While simple contiguous word matches are fast, they can fail to detect evolutionarily distant relationships where conservation patterns are more sparse. To address this, modern search tools often employ discontiguous or \"spaced\" seeds, which can be significantly more sensitive. This hands-on coding exercise challenges you to implement detectors for both contiguous and discontiguous seed patterns, allowing you to directly compare their performance on carefully designed sequence pairs [@problem_id:2396841]. You will discover why a seemingly minor change in seed design represents a major leap in heuristic search performance.", "problem": "You are given a formal model of seed-based detection for sequence similarity, designed to evaluate the utility of discontiguous word seeds (also called spaced seeds) versus contiguous seeds for detecting potential remote protein homologs. Let a protein sequence be a finite string over the standard $20$-symbol amino acid alphabet. A binary seed pattern is a finite binary string of length $L$, written as $b_0 b_1 \\dots b_{L-1}$, where $b_j \\in \\{0,1\\}$ for each index $j$. The weight $w$ of a seed is the number of positions $j$ for which $b_j = 1$. A seed hit occurs between two equal-length sequences $Q$ and $T$ if there exists an index $i$ such that, for all $j \\in \\{0,1,\\dots,L-1\\}$ with $b_j = 1$, one has $Q[i+j] = T[i+j]$. A discontiguous seed is any seed that is not all ones; a contiguous seed of weight $w$ is the special case with $L = w$ and $b_0 = b_1 = \\dots = b_{w-1} = 1$.\n\nFor a given pair of sequences $(Q,T)$, define the detection decision for a seed pattern $b$ as a boolean value $D(b;Q,T)$ that is `true` if and only if there exists an index $i$ with $0 \\le i \\le |Q|-L$ that satisfies the above seed hit condition, and `false` otherwise. All sequence indices are $0$-based, and the only alignments considered are co-linear, index-aligned windows, meaning no gaps or offsets are permitted between $Q$ and $T$. If $|Q| \\ne |T|$ or if $|Q|  L$, then $D(b;Q,T)$ is defined to be `false`.\n\nFix the discontiguous seed pattern $p = `1101001`$, which has length $L = 7$ and weight $w = 4$. Define the corresponding fair contiguous comparator seed $c$ to be the contiguous seed of weight $w$, so $c = `1111`$ with length $4$.\n\nFor each tested pair $(Q,T)$, define the comparative advantage value $A(Q,T)$ as an integer according to the rule\n- $A(Q,T) = 1$ if $D(p;Q,T) = \\`true\\`$ and $D(c;Q,T) = \\`false\\`$,\n- $A(Q,T) = -1$ if $D(p;Q,T) = \\`false\\`$ and $D(c;Q,T) = \\`true\\`$,\n- $A(Q,T) = 0$ otherwise.\n\nYour task is to compute $A(Q,T)$ for each of the following test cases. In every case, both sequences are over the standard $20$-amino-acid alphabet and have the same length. The seed pattern $p$ is always `1101001`, and the comparator contiguous seed $c$ is always `1111`.\n\nTest suite:\n- Case $1$ (remote-homolog-like, spaced-only detection expected): \n  - $Q_1$ = MKTAYIAKQRQISFVKSHFS\n  - $T_1$ = LLLLLIALQLLILLLLLLLL\n- Case $2$ (perfect identity, both detections expected):\n  - $Q_2$ = ACDEFGHIKL\n  - $T_2$ = ACDEFGHIKL\n- Case $3$ (completely mismatched, no detections expected):\n  - $Q_3$ = AAAAAAAAAAAAAAA\n  - $T_3$ = CCCCCCCCCCCCCCC\n- Case $4$ (local contiguous match without spaced pattern match over the $L=7$ window, contiguous-only detection expected):\n  - $Q_4$ = ABCDEFG\n  - $T_4$ = MNCDEFP\n- Case $5$ (boundary length shorter than $L=7$, contiguous-only detection possible):\n  - $Q_5$ = ACDE\n  - $T_5$ = ACDE\n\nYour program must compute the list $[A(Q_1,T_1), A(Q_2,T_2), A(Q_3,T_3), A(Q_4,T_4), A(Q_5,T_5)]$ and produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, $[x_1,x_2,x_3,x_4,x_5]$, where each $x_k$ is an integer in $\\{-1,0,1\\}$.", "solution": "The problem presented requires the computation of a comparative advantage value, denoted as $A(Q,T)$, for pairs of protein sequences $(Q,T)$ using two different seed patterns: a discontiguous (or spaced) seed and a contiguous seed. The problem is scientifically grounded in the principles of heuristic-based sequence similarity searching, a fundamental concept in bioinformatics. All definitions are precise and the problem is well-posed. We shall proceed with a systematic, case-by-case analysis.\n\nFirst, let us formalize the given definitions.\n\nA seed hit for a binary seed pattern $b$ of length $L$ occurs between two sequences $Q$ and $T$ if there exists a starting index $i$, where $0 \\le i \\le |Q|-L$, such that for every position $j \\in \\{0, 1, \\dots, L-1\\}$ with $b_j = 1$, the condition $Q[i+j] = T[i+j]$ holds.\n\nThe detection decision function, $D(b;Q,T)$, is defined as follows:\n- $D(b;Q,T)$ is `true` if a seed hit for pattern $b$ exists between $Q$ and $T$.\n- $D(b;Q,T)$ is `false` if no seed hit exists.\n- By definition, if $|Q| \\ne |T|$ or if $|Q|  L$, then $D(b;Q,T)$ is `false`.\n\nThe two seed patterns are fixed:\n1. The discontiguous seed pattern is $p = `1101001`$. Its length is $L_p = 7$ and its weight (number of $1$s) is $w=4$. The required matching positions within a window of length $7$ are at relative indices $0, 1, 3,$ and $6$.\n2. The fair contiguous comparator seed is $c = `1111`$. Its length is $L_c = 4$ and its weight is $w=4$. This requires a contiguous block of $4$ matching characters.\n\nThe comparative advantage value, $A(Q,T)$, is an integer determined by the outcomes of the two detection functions:\n- $A(Q,T) = 1$ if $D(p;Q,T)$ is `true` and $D(c;Q,T)$ is `false`.\n- $A(Q,T) = -1$ if $D(p;Q,T)$ is `false` and $D(c;Q,T)$ is `true`.\n- $A(Q,T) = 0$ if $D(p;Q,T)=D(c;Q,T)$ (i.e., both are true or both are false).\n\nWe will now compute $A(Q_k,T_k)$ for each test case $k=1, \\dots, 5$.\n\n**Case 1:**\n-   $Q_1$ = `MKTAYIAKQRQISFVKSHFS` ($|Q_1|=20$)\n-   $T_1$ = `LLLLLIALQLLILLLLLLLL` ($|T_1|=20$)\n-   Both sequences have length $20$, which is greater than both $L_p=7$ and $L_c=4$.\n\n- **Evaluation of $D(p; Q_1, T_1)$:**\n  We must search for a window of length $7$, starting at index $i$ ($0 \\le i \\le 13$), where $Q_1[i+j]=T_1[i+j]$ for $j \\in \\{0, 1, 3, 6\\}$.\n  Let us test the window starting at $i=5$:\n  The window in $Q_1$ is $Q_1[5 \\dots 11]$ = `IAKQRQI`.\n  The window in $T_1$ is $T_1[5 \\dots 11]$ = `IALQLLI`.\n  Let's check the required positions:\n  -   $j=0$: $Q_1[5] = \\text{'I'}$, $T_1[5] = \\text{'I'}$. Match.\n  -   $j=1$: $Q_1[6] = \\text{'A'}$, $T_1[6] = \\text{'A'}$. Match.\n  -   $j=3$: $Q_1[8] = \\text{'Q'}$, $T_1[8] = \\text{'Q'}$. Match.\n  -   $j=6$: $Q_1[11] = \\text{'I'}$, $T_1[11] = \\text{'I'}$. Match.\n  A hit is found at $i=5$. Therefore, $D(p; Q_1, T_1)$ is `true`.\n\n- **Evaluation of $D(c; Q_1, T_1)$:**\n  We must search for a common contiguous substring of length $L_c=4$. A systematic search reveals no such common substring between $Q_1$ and $T_1$. Therefore, $D(c; Q_1, T_1)$ is `false`.\n\n- **Calculation of $A(Q_1, T_1)$:**\n  Since $D(p; Q_1, T_1)$ is `true` and $D(c; Q_1, T_1)$ is `false`, we have $A(Q_1, T_1) = 1$.\n\n**Case 2:**\n-   $Q_2$ = `ACDEFGHIKL` ($|Q_2|=10$)\n-   $T_2$ = `ACDEFGHIKL` ($|T_2|=10$)\n-   The sequences are identical. Length is $10$, which is greater than both $L_p=7$ and $L_c=4$.\n\n- **Evaluation of $D(p; Q_2, T_2)$:**\n  Since $Q_2[j]=T_2[j]$ for all $j$, any valid window will result in a hit. For $i=0$, the conditions $Q_2[0]=T_2[0]$, $Q_2[1]=T_2[1]$, $Q_2[3]=T_2[3]$, and $Q_2[6]=T_2[6]$ are trivially satisfied. Thus, $D(p; Q_2, T_2)$ is `true`.\n\n- **Evaluation of $D(c; Q_2, T_2)$:**\n  Similarly, for any window of length $4$, say at $i=0$, we have $Q_2[0 \\dots 3] = T_2[0 \\dots 3]$. A hit is guaranteed. Thus, $D(c; Q_2, T_2)$ is `true`.\n\n- **Calculation of $A(Q_2, T_2)$:**\n  Since both detection functions are true, $A(Q_2, T_2) = 0$.\n\n**Case 3:**\n-   $Q_3$ = `AAAAAAAAAAAAAAA` ($|Q_3|=15$)\n-   $T_3$ = `CCCCCCCCCCCCCCC` ($|T_3|=15$)\n-   Sequence length is $15$, sufficient for both seeds.\n\n- **Evaluation of $D(p; Q_3, T_3)$:**\n  For any index $j$, $Q_3[j] = \\text{'A'}$ and $T_3[j] = \\text{'C'}$. Since $Q_3[j] \\ne T_3[j]$ for all $j$, no match is possible at any position. Thus, no seed hit can occur. $D(p; Q_3, T_3)$ is `false`.\n\n- **Evaluation of $D(c; Q_3, T_3)$:**\n  For the same reason, no contiguous block of matching characters exists. $D(c; Q_3, T_3)$ is `false`.\n\n- **Calculation of $A(Q_3, T_3)$:**\n  Since both detection functions are false, $A(Q_3, T_3) = 0$.\n\n**Case 4:**\n-   $Q_4$ = `ABCDEFG` ($|Q_4|=7$)\n-   $T_4$ = `MNCDEFP` ($|T_4|=7$)\n-   Sequence length is $7$, sufficient for both seeds ($7 \\ge 7$ and $7 \\ge 4$).\n\n- **Evaluation of $D(p; Q_4, T_4)$:**\n  The only possible window is the entire sequence, starting at $i=0$, as $|Q_4|-L_p = 7-7=0$. We check the required match positions $\\{0, 1, 3, 6\\}$:\n  -   $j=0$: $Q_4[0] = \\text{'A'}$, $T_4[0] = \\text{'M'}$. No match.\n  A hit does not occur. Thus, $D(p; Q_4, T_4)$ is `false`.\n\n- **Evaluation of $D(c; Q_4, T_4)$:**\n  We search for a common contiguous substring of length $4$. The possible starting indices are $i \\in \\{0, 1, 2, 3\\}$.\n  -   $i=0$: `ABCD` vs `MNCD`. No match.\n  -   $i=1$: `BCDE` vs `NCDE`. No match.\n  -   $i=2$: `CDEF` vs `CDEF`. Match found.\n  A hit is found. Thus, $D(c; Q_4, T_4)$ is `true`.\n\n- **Calculation of $A(Q_4, T_4)$:**\n  Since $D(p; Q_4, T_4)$ is `false` and $D(c; Q_4, T_4)$ is `true`, we have $A(Q_4, T_4) = -1$.\n\n**Case 5:**\n-   $Q_5$ = `ACDE` ($|Q_5|=4$)\n-   $T_5$ = `ACDE` ($|T_5|=4$)\n-   Sequence length is $4$.\n\n- **Evaluation of $D(p; Q_5, T_5)$:**\n  The length of the seed is $L_p=7$. The length of the sequences is $|Q_5|=4$. Since $|Q_5|  L_p$, by definition, $D(p; Q_5, T_5)$ is `false`.\n\n- **Evaluation of $D(c; Q_5, T_5)$:**\n  The length of the seed is $L_c=4$. The length of the sequences is $|Q_5|=4$. Since $|Q_5| \\ge L_c$ ($4 \\ge 4$), we proceed. The only possible window starts at $i=0$. Since $Q_5$ and $T_5$ are identical, the window $Q_5[0 \\dots 3]$ matches $T_5[0 \\dots 3]$. A hit is found. Thus, $D(c; Q_5, T_5)$ is `true`.\n\n- **Calculation of $A(Q_5, T_5)$:**\n  Since $D(p; Q_5, T_5)$ is `false` and $D(c; Q_5, T_5)$ is `true`, we have $A(Q_5, T_5) = -1$.\n\n**Final Results Summary:**\nThe calculated values are:\n-   $A(Q_1, T_1) = 1$\n-   $A(Q_2, T_2) = 0$\n-   $A(Q_3, T_3) = 0$\n-   $A(Q_4, T_4) = -1$\n-   $A(Q_5, T_5) = -1$\n\nThe final list is $[1, 0, 0, -1, -1]$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\n# No external libraries are necessary for this problem.\n\ndef detect_hit(Q, T, seed_pattern):\n    \"\"\"\n    Determines if a seed hit occurs between two sequences for a given seed pattern.\n\n    Args:\n        Q (str): The query sequence.\n        T (str): The target sequence.\n        seed_pattern (str): The binary seed pattern (e.g., '1101001').\n\n    Returns:\n        bool: True if a hit is found, False otherwise.\n    \"\"\"\n    len_Q = len(Q)\n    len_T = len(T)\n    len_L = len(seed_pattern)\n\n    # Per problem definition, D(b;Q,T) is false if lengths are unequal or Q is too short.\n    if len_Q != len_T or len_Q  len_L:\n        return False\n\n    # Extract the indices that must match (where seed pattern is '1').\n    match_indices = [j for j, bit in enumerate(seed_pattern) if bit == '1']\n\n    # Iterate through all possible start positions 'i' for the seed window.\n    for i in range(len_Q - len_L + 1):\n        is_hit = True\n        # Check if all required positions in the window match.\n        for j in match_indices:\n            if Q[i + j] != T[i + j]:\n                is_hit = False\n                break  # Mismatch found, this window is not a hit.\n        \n        if is_hit:\n            return True  # A hit was found, no need to search further.\n\n    # If the loop completes without finding any hit, return False.\n    return False\n\ndef calculate_A(Q, T, p_pattern, c_pattern):\n    \"\"\"\n    Computes the comparative advantage value A(Q, T).\n\n    Args:\n        Q (str): The query sequence.\n        T (str): The target sequence.\n        p_pattern (str): The discontiguous seed pattern.\n        c_pattern (str): The contiguous seed pattern.\n\n    Returns:\n        int: The comparative advantage value (-1, 0, or 1).\n    \"\"\"\n    d_p = detect_hit(Q, T, p_pattern)\n    d_c = detect_hit(Q, T, c_pattern)\n    \n    if d_p and not d_c:\n        return 1\n    elif not d_p and d_c:\n        return -1\n    else: # This covers cases where both are True or both are False.\n        return 0\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print the results.\n    \"\"\"\n    # The fixed seed patterns from the problem statement.\n    p_pattern = '1101001'\n    c_pattern = '1111'\n\n    # The test suite provided in the problem statement.\n    test_cases = [\n        # Case 1\n        (\"MKTAYIAKQRQISFVKSHFS\", \"LLLLLIALQLLILLLLLLLL\"),\n        # Case 2\n        (\"ACDEFGHIKL\", \"ACDEFGHIKL\"),\n        # Case 3\n        (\"AAAAAAAAAAAAAAA\", \"CCCCCCCCCCCCCCC\"),\n        # Case 4\n        (\"ABCDEFG\", \"MNCDEFP\"),\n        # Case 5\n        (\"ACDE\", \"ACDE\"),\n    ]\n\n    results = []\n    for Q, T in test_cases:\n        result = calculate_A(Q, T, p_pattern, c_pattern)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2396841"}, {"introduction": "After a seed hit is extended into a high-scoring alignment, how do we know if it's biologically meaningful or just a product of random chance? The answer lies in the robust statistical framework developed by Karlin and Altschul, which underpins the E-values reported by BLAST. In this practice, you will delve into the heart of this theory by re-deriving the key statistical parameter $\\lambda$ from first principles for a simplified scoring system [@problem_id:2396829]. This exercise demystifies where the statistical significance of an alignment score comes from.", "problem": "Consider random alignments of deoxyribonucleic acid (DNA) letters under the independent and identically distributed (i.i.d.) background model with uniform base frequencies, that is, $p_{A}=p_{C}=p_{G}=p_{T}=\\frac{1}{4}$. Let the pairwise scoring scheme be $s(a,b)=+1$ if $a=b$ (match) and $s(a,b)=-3$ if $a \\neq b$ (mismatch). In the Karlin–Altschul statistical framework for ungapped local alignments, the parameter $\\lambda$ is defined as the unique positive real number satisfying\n$$\n\\sum_{a \\in \\{A,C,G,T\\}} \\sum_{b \\in \\{A,C,G,T\\}} p_{a} p_{b} \\exp\\!\\big(\\lambda\\, s(a,b)\\big) \\;=\\; 1.\n$$\nUsing only this definition together with the stated model and scoring scheme, determine the numerical value of $\\lambda$. Round your answer to $4$ significant figures. Express your final result as a dimensionless number without units.", "solution": "The problem statement will first be subjected to a rigorous validation process.\n\nStep 1: Extract Givens\nThe explicit information provided in the problem statement is as follows:\n- Model: Random alignments of DNA letters under the independent and identically distributed (i.i.d.) background model.\n- Base frequencies: $p_{A}=p_{C}=p_{G}=p_{T}=\\frac{1}{4}$.\n- Pairwise scoring scheme: $s(a,b)=+1$ if $a=b$ (match) and $s(a,b)=-3$ if $a \\neq b$ (mismatch).\n- Definition of $\\lambda$: The unique positive real number satisfying the equation\n$$ \\sum_{a \\in \\{A,C,G,T\\}} \\sum_{b \\in \\{A,C,G,T\\}} p_{a} p_{b} \\exp(\\lambda s(a,b)) = 1 $$\n- Requirement: Determine the numerical value of $\\lambda$, rounded to $4$ significant figures.\n\nStep 2: Validate Using Extracted Givens\nThe problem is assessed against the criteria for validity.\n- **Scientifically Grounded:** The problem is based on the foundational Karlin-Altschul statistical theory, which is a critical component of modern bioinformatics, particularly for a tool such as BLAST. The equation provided is the core definition of the parameter $\\lambda$ in this context. The model and scoring scheme are standard for illustrative purposes. The problem is scientifically sound.\n- **Well-Posed:** The problem provides a well-defined equation and asks for a unique positive real solution. The theory of Karlin and Altschul guarantees that such a unique positive $\\lambda$ exists if and only if the expected score $E[s(a,b)]$ is negative. Let us compute this value. The probability of any specific pair $(a,b)$ is $p_a p_b = (\\frac{1}{4})(\\frac{1}{4}) = \\frac{1}{16}$. There are $4$ possible matches and $12$ possible mismatches. The expected score is:\n$$ E[s(a,b)] = \\sum_{a,b} p_a p_b s(a,b) = (4 \\times \\frac{1}{16} \\times (+1)) + (12 \\times \\frac{1}{16} \\times (-3)) = \\frac{4}{16} - \\frac{36}{16} = -\\frac{32}{16} = -2 $$\nSince $E[s(a,b)] = -2  0$, a unique positive solution for $\\lambda$ exists. The problem is well-posed.\n- **Objective:** The problem is stated using precise mathematical language and definitions, free of any subjectivity or ambiguity.\n\nStep 3: Verdict and Action\nThe problem is valid as it is scientifically grounded, well-posed, objective, and self-contained. Therefore, a solution will be derived.\n\nThe defining equation for $\\lambda$ is:\n$$ \\sum_{a \\in \\{A,C,G,T\\}} \\sum_{b \\in \\{A,C,G,T\\}} p_{a} p_{b} \\exp(\\lambda s(a,b)) = 1 $$\nThe set of all possible pairs of letters $(a,b)$ can be partitioned into two disjoint sets: matches, where $a=b$, and mismatches, where $a \\neq b$. The summation can be split accordingly:\n$$ \\sum_{a=b} p_{a} p_{b} \\exp(\\lambda s(a,b)) + \\sum_{a \\neq b} p_{a} p_{b} \\exp(\\lambda s(a,b)) = 1 $$\nThe DNA alphabet has $4$ letters. Thus, there are $4$ possible matching pairs (A,A), (C,C), (G,G), (T,T) and $4 \\times 4 - 4 = 12$ possible mismatching pairs.\nThe probabilities are uniform, so for any pair $(a,b)$, $p_a p_b = \\frac{1}{4} \\times \\frac{1}{4} = \\frac{1}{16}$.\nFor matches, the score is $s(a,b) = +1$. The first sum becomes:\n$$ \\sum_{a=b} p_{a} p_{b} \\exp(\\lambda s(a,b)) = 4 \\times \\left( \\frac{1}{16} \\exp(\\lambda \\cdot 1) \\right) = \\frac{4}{16} \\exp(\\lambda) = \\frac{1}{4} \\exp(\\lambda) $$\nFor mismatches, the score is $s(a,b) = -3$. The second sum becomes:\n$$ \\sum_{a \\neq b} p_{a} p_{b} \\exp(\\lambda s(a,b)) = 12 \\times \\left( \\frac{1}{16} \\exp(\\lambda \\cdot (-3)) \\right) = \\frac{12}{16} \\exp(-3\\lambda) = \\frac{3}{4} \\exp(-3\\lambda) $$\nSubstituting these expressions back into the main equation yields:\n$$ \\frac{1}{4} \\exp(\\lambda) + \\frac{3}{4} \\exp(-3\\lambda) = 1 $$\nTo solve for $\\lambda$, we can multiply the entire equation by $4$:\n$$ \\exp(\\lambda) + 3 \\exp(-3\\lambda) = 4 $$\nLet $x = \\exp(\\lambda)$. Since we are seeking a positive $\\lambda$, we must have $x  1$. The equation transforms into an algebraic equation in terms of $x$:\n$$ x + 3x^{-3} = 4 $$\nMultiplying by $x^3$ (which is non-zero) to clear the negative exponent gives a polynomial equation:\n$$ x^4 + 3 = 4x^3 $$\nRearranging into standard form:\n$$ x^4 - 4x^3 + 3 = 0 $$\nWe seek the roots of this quartic polynomial. By the rational root theorem, any rational root must be a divisor of the constant term $3$. The possible rational roots are $\\pm 1$ and $\\pm 3$.\nTesting $x=1$:\n$$ (1)^4 - 4(1)^3 + 3 = 1 - 4 + 3 = 0 $$\nSo, $x=1$ is a root. This corresponds to $\\lambda = \\ln(1) = 0$, which is the trivial solution that always exists when $\\sum p_a p_b = 1$. We are interested in the unique *positive* solution for $\\lambda$, which corresponds to $x  1$.\nSince $x=1$ is a root, $(x-1)$ is a factor of the polynomial. We perform polynomial division:\n$$ \\frac{x^4 - 4x^3 + 3}{x-1} = x^3 - 3x^2 - 3x - 3 $$\nThus, the equation becomes:\n$$ (x-1)(x^3 - 3x^2 - 3x - 3) = 0 $$\nThe non-trivial roots are the solutions to the cubic equation:\n$$ P(x) = x^3 - 3x^2 - 3x - 3 = 0 $$\nThis equation does not have simple rational roots. We must find the relevant root numerically. Let's analyze the function $P(x)$ to locate the root we seek. We found that $P(3) = (3)^3 - 3(3)^2 - 3(3) - 3 = 27 - 27 - 9 - 3 = -12$ and $P(4) = (4)^3 - 3(4)^2 - 3(4) - 3 = 64 - 48 - 12 - 3 = 1$.\nSince $P(3)  0$ and $P(4)  0$, and $P(x)$ is continuous, there is a root between $3$ and $4$. As this root is greater than $1$, it will give the required positive $\\lambda$. Using a numerical method, such as Newton's method or a computational solver, we find the root to be:\n$$ x \\approx 3.9526368 $$\nNow, we solve for $\\lambda$ using the relation $x = \\exp(\\lambda)$:\n$$ \\lambda = \\ln(x) = \\ln(3.9526368) $$\n$$ \\lambda \\approx 1.374333 $$\nThe problem requires the answer to be rounded to $4$ significant figures. The first four significant digits are $1, 3, 7, 4$. The following digit is $3$, so we round down.\n$$ \\lambda \\approx 1.374 $$\nThis is the required numerical value.", "answer": "$$\n\\boxed{1.374}\n$$", "id": "2396829"}]}