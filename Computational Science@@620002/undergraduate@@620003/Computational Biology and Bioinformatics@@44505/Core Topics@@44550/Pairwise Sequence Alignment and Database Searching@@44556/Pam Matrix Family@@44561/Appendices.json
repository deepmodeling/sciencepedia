{"hands_on_practices": [{"introduction": "Understanding a model often means building it from the ground up. This exercise [@problem_id:2411852] guides you through the complete, step-by-step process of creating a log-odds scoring matrix generator for any given evolutionary distance, known as a PAM distance $d$. By implementing the mathematical pipeline—from constructing a rate matrix based on background frequencies and exchangeabilities to calculating the final log-odds scores—you will gain a deep, practical understanding of the continuous-time Markov models that form the theoretical bedrock of the PAM family.", "problem": "You are given a finite amino acid alphabet and a continuous-time, time-homogeneous, reversible Markov model of amino acid substitutions. The goal is to compute, for any real-valued positive PAM distance $d > 0$, the log-odds score matrix $PAM_d$ in bits. The $PAM_d$ matrix has entries $S_{ij}(d)$ that quantify the log-odds (base 2) of observing amino acid $j$ in a homologous position given the starting amino acid $i$ at PAM distance $d$ relative to the chance alignment background.\n\nUse the following setup.\n\n- Alphabet order and background frequencies (these sum to $1$):\n  $$\\Sigma = [A, R, N, D, C], \\quad \\mathbf{p} = [0.30, 0.20, 0.20, 0.20, 0.10].$$\n\n- Symmetric exchangeability matrix $\\mathbf{R}$ (with $R_{ii} = 0$ and $R_{ij} = R_{ji}$ for $i \\neq j$). The order of rows and columns matches $\\Sigma$:\n  $$\n  \\mathbf{R} =\n  \\begin{bmatrix}\n  0 & 1.0 & 0.7 & 0.5 & 0.05 \\\\\n  1.0 & 0 & 0.8 & 0.4 & 0.05 \\\\\n  0.7 & 0.8 & 0 & 1.2 & 0.05 \\\\\n  0.5 & 0.4 & 1.2 & 0 & 0.02 \\\\\n  0.05 & 0.05 & 0.05 & 0.02 & 0\n  \\end{bmatrix}.\n  $$\n\n- Construct the instantaneous rate matrix $\\mathbf{Q}$ using detailed balance with $\\mathbf{p}$ and $\\mathbf{R}$:\n  $$q_{ij} = R_{ij}\\,p_j \\quad \\text{for } i \\neq j, \\qquad q_{ii} = -\\sum_{j \\neq i} q_{ij}.$$\n\n- Calibrate $\\mathbf{Q}$ to the Percent Accepted Mutation (PAM) time unit so that the expected number of accepted substitutions per site per unit PAM distance equals $0.01$. Let\n  $$\\rho = -\\sum_{i=1}^{5} p_i\\, q_{ii}, \\quad \\text{and define the scaled rate matrix } \\tilde{\\mathbf{Q}} = \\frac{0.01}{\\rho}\\,\\mathbf{Q}.$$\n\n- For any real $d > 0$, define the substitution probability matrix at PAM distance $d$ by the matrix exponential\n  $$\\mathbf{P}(d) = \\exp\\big(\\tilde{\\mathbf{Q}}\\, d\\big).$$\n\n- Define the log-odds score matrix in bits by\n  $$S_{ij}(d) = \\log_2 \\left( \\frac{P_{ij}(d)}{p_j} \\right), \\quad \\text{for all } i,j \\in \\{1,\\dots,5\\}.$$\n\nYour task is to implement a program that constructs $PAM_d = \\big[S_{ij}(d)\\big]$ for any real $d > 0$ using the definitions above.\n\nTest Suite:\nFor each test case below, return the single entry $S_{ij}(d)$ for the specified $d$ and ordered amino acid pair $(i,j)$ using the alphabet order $\\Sigma = [A,R,N,D,C]$. Angles or physical units are not involved. Report each numeric answer as a floating-point number rounded to six digits after the decimal point.\n\n- Test 1 (near-identity regime): $d = 0.01$, pair $(A,A)$.\n- Test 2 (moderate distance, mismatch): $d = 1.0$, pair $(A,R)$.\n- Test 3 (long distance, convergence): $d = 250.0$, pair $(N,C)$.\n- Test 4 (boundary, extremely small distance): $d = 10^{-6}$, pair $(D,D)$.\n- Test 5 (intermediate distance, typical mismatch): $d = 50.0$, pair $(R,N)$.\n\nFinal Output Format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of Tests 1 through 5. For example,\n$$[\\text{result}_1,\\text{result}_2,\\text{result}_3,\\text{result}_4,\\text{result}_5],$$\nwhere each $\\text{result}_k$ is a float rounded to six decimal places as specified.", "solution": "The problem as stated is valid. It is a well-posed, scientifically grounded exercise in computational biology, based on the established principles of continuous-time Markov models for sequence evolution. All necessary data and definitions are provided, and they are internally consistent. The task is to implement the specified mathematical procedure.\n\nThe solution proceeds through the following sequence of computations.\n\n1.  **Construction of the Instantaneous Rate Matrix $\\mathbf{Q}$**:\n    The elements of the rate matrix $\\mathbf{Q}$ are determined from the symmetric exchangeability matrix $\\mathbf{R}$ and the background frequencies $\\mathbf{p} = [p_A, p_R, p_N, p_D, p_C]^T = [0.30, 0.20, 0.20, 0.20, 0.10]^T$. The off-diagonal elements are given by $q_{ij} = R_{ij} p_j$ for $i \\neq j$. The diagonal elements are set to enforce that the sum of each row is zero: $q_{ii} = -\\sum_{j \\neq i} q_{ij}$. With the provided $\\mathbf{R}$ and $\\mathbf{p}$ for the alphabet $\\Sigma = [A, R, N, D, C]$, this yields the matrix:\n    $$\n    \\mathbf{Q} =\n    \\begin{bmatrix}\n    -0.445 & 0.200 & 0.140 & 0.100 & 0.005 \\\\\n     0.300 & -0.545 & 0.160 & 0.080 & 0.005 \\\\\n     0.210 & 0.160 & -0.615 & 0.240 & 0.005 \\\\\n     0.150 & 0.080 & 0.240 & -0.472 & 0.002 \\\\\n     0.015 & 0.010 & 0.010 & 0.004 & -0.039\n    \\end{bmatrix}\n    $$\n    This matrix satisfies the detailed balance condition $p_i q_{ij} = p_j q_{ji}$, which confirms that $\\mathbf{p}$ is the stationary distribution of the Markov process described by $\\mathbf{Q}$.\n\n2.  **Calibration to the PAM Time Unit**:\n    The matrix $\\mathbf{Q}$ must be scaled to conform to the Percent Accepted Mutation (PAM) distance definition, where $1$ PAM unit corresponds to an expected $0.01$ substitutions per site. The average rate of substitution for the process governed by $\\mathbf{Q}$ is calculated as $\\rho = -\\sum_{i} p_i q_{ii}$.\n    Using the given values:\n    $$ \\rho = - (0.30(-0.445) + 0.20(-0.545) + 0.20(-0.615) + 0.20(-0.472) + 0.10(-0.039)) $$\n    $$ \\rho = -(-0.1335 - 0.1090 - 0.1230 - 0.0944 - 0.0039) = 0.4638 $$\n    The calibrated rate matrix $\\tilde{\\mathbf{Q}}$ is then obtained by scaling $\\mathbf{Q}$ such that the average substitution rate is $0.01$:\n    $$ \\tilde{\\mathbf{Q}} = \\frac{0.01}{\\rho} \\mathbf{Q} = \\frac{0.01}{0.4638} \\mathbf{Q} \\approx 0.02156101768... \\times \\mathbf{Q} $$\n\n3.  **Computation of the Substitution Probability Matrix $\\mathbf{P}(d)$**:\n    For a given PAM distance $d > 0$, the matrix of substitution probabilities $\\mathbf{P}(d)$ is found by computing the matrix exponential of the scaled rate matrix multiplied by the distance:\n    $$ \\mathbf{P}(d) = \\exp(\\tilde{\\mathbf{Q}} d) $$\n    This computation is performed using standard numerical library functions, specifically `scipy.linalg.expm` for the matrix exponential.\n\n4.  **Calculation of Log-Odds Scores $S_{ij}(d)$**:\n    Finally, the log-odds score for an alignment of amino acid $i$ with amino acid $j$ is calculated. The score, in bits, quantifies the likelihood of the observed substitution $P_{ij}(d)$ relative to the background probability of observing amino acid $j$ by chance, $p_j$.\n    $$ S_{ij}(d) = \\log_2 \\left( \\frac{P_{ij}(d)}{p_j} \\right) $$\n\nThis procedure is implemented and applied to the five specified test cases. The indices for the amino acids $[A, R, N, D, C]$ are $[0, 1, 2, 3, 4]$, respectively. The required values $S_{ij}(d)$ are computed for each test case and formatted as required by the problem statement.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import expm\n\ndef solve():\n    \"\"\"\n    Computes log-odds scores for a continuous-time Markov model of amino acid substitution.\n    \"\"\"\n    # Define the problem parameters as specified.\n    alphabet = ['A', 'R', 'N', 'D', 'C']\n    p = np.array([0.30, 0.20, 0.20, 0.20, 0.10])\n    R = np.array([\n        [0.0, 1.0, 0.7, 0.5, 0.05],\n        [1.0, 0.0, 0.8, 0.4, 0.05],\n        [0.7, 0.8, 0.0, 1.2, 0.05],\n        [0.5, 0.4, 1.2, 0.0, 0.02],\n        [0.05, 0.05, 0.05, 0.02, 0.0]\n    ])\n    \n    # Create a mapping from amino acids to matrix indices.\n    aa_to_idx = {aa: i for i, aa in enumerate(alphabet)}\n    \n    # Step 1: Construct the instantaneous rate matrix Q.\n    n_states = len(alphabet)\n    Q = np.zeros((n_states, n_states))\n    \n    # Off-diagonal elements are q_{ij} = R_{ij} * p_j.\n    for i in range(n_states):\n        for j in range(n_states):\n            if i != j:\n                Q[i, j] = R[i, j] * p[j]\n    \n    # Diagonal elements are set so that rows sum to zero.\n    for i in range(n_states):\n        Q[i, i] = -np.sum(Q[i, :])\n        \n    # Step 2: Calibrate Q to the PAM time unit.\n    # The average rate of substitution is rho = -sum(p_i * q_ii).\n    rho = -np.dot(p, np.diag(Q))\n    \n    # The scaled rate matrix ensures 0.01 expected substitutions per PAM unit.\n    Q_tilde = (0.01 / rho) * Q\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        {'d': 0.01, 'pair': ('A', 'A')},    # Test 1\n        {'d': 1.0, 'pair': ('A', 'R')},     # Test 2\n        {'d': 250.0, 'pair': ('N', 'C')},   # Test 3\n        {'d': 1e-6, 'pair': ('D', 'D')},    # Test 4\n        {'d': 50.0, 'pair': ('R', 'N')}     # Test 5\n    ]\n    \n    results = []\n    \n    for case in test_cases:\n        d = case['d']\n        i_char, j_char = case['pair']\n        i = aa_to_idx[i_char]\n        j = aa_to_idx[j_char]\n        \n        # Step 3: Compute the substitution probability matrix P(d) = exp(Q_tilde * d).\n        P_d = expm(Q_tilde * d)\n        \n        # Step 4: Calculate the log-odds score S_ij(d) in bits.\n        P_ij_d = P_d[i, j]\n        p_j = p[j]\n        \n        score = np.log2(P_ij_d / p_j)\n        results.append(score)\n        \n    # Format the final output as a comma-separated list of floating-point numbers\n    # rounded to six decimal places, enclosed in square brackets.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2411852"}, {"introduction": "While the definition $PAM_N = M^N$ is simple, its direct computation for large evolutionary distances $N$ is inefficient and prone to numerical errors. This practice [@problem_id:2411821] challenges you to implement a robust and elegant solution using matrix eigendecomposition, a cornerstone of linear algebra. By leveraging eigenvalues and eigenvectors to compute matrix powers, you will develop a critical computational skill and appreciate how theoretical mathematics provides powerful tools for modeling long-term evolutionary processes.", "problem": "You are given a discrete-time, time-homogeneous Markov chain on a reduced amino acid alphabet with four classes that groups amino acids by physicochemical similarity. The one-accepted-mutation transition probability matrix for one evolutionary step, denoted by $M \\in \\mathbb{R}^{4 \\times 4}$, is specified as\n$$\nM \\;=\\;\n\\begin{bmatrix}\n0.99 & 0.002 & 0.004 & 0.004\\\\\n0.002 & 0.99 & 0.004 & 0.004\\\\\n0.004 & 0.004 & 0.99 & 0.002\\\\\n0.004 & 0.004 & 0.002 & 0.99\n\\end{bmatrix}.\n$$\nIn the Point Accepted Mutation (PAM) family of substitution matrices, the $N$-step substitution probability matrix is defined by\n$$\nPAM_{N} \\;=\\; M^{N} $$,\nwhere $N \\in \\mathbb{N}$ is the number of one-step accepted mutation intervals.\n\nTask: For each specified $N$, compute the top-left entry (first row, first column) of $PAM_{N}$ in a numerically stable manner. Round each reported value to $10$ decimal places using standard rounding.\n\nTest suite of exponents:\n- $N = 0$,\n- $N = 1$,\n- $N = 2$,\n- $N = 10$,\n- $N = 500$.\n\nAnswer specification:\n- For each $N$ in the order above, produce the top-left entry of $PAM_{N}$ as a floating-point number rounded to $10$ decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. For example, if the results were $x_{0}, x_{1}, \\dots, x_{k}$, the output format must be\n$$\n[x_{0},x_{1},\\dots,x_{k}].\n$$\nNo other text should be printed.", "solution": "The problem has been validated and is determined to be sound. It is scientifically grounded in the theory of Markov chains applied to molecular evolution, is mathematically well-posed, and all its terms and conditions are specified objectively and without contradiction.\n\nThe core of the problem is the computation of the matrix power $M^N$ for a given $4 \\times 4$ transition probability matrix $M$ and several integer exponents $N$. The task is to find the top-left element of the resulting matrix, $(M^N)_{11}$. A naive approach of iteratively multiplying $M$ by itself $N-1$ times is computationally inefficient for large $N$ (e.g., $N=500$) and can lead to the accumulation of floating-point errors. The call for a \"numerically stable manner\" indicates that a more sophisticated and robust method is required. The method of choice for computing matrix powers is eigendecomposition.\n\nThe given transition matrix is\n$$\nM \\;=\\;\n\\begin{bmatrix}\n0.99 & 0.002 & 0.004 & 0.004\\\\\n0.002 & 0.99 & 0.004 & 0.004\\\\\n0.004 & 0.004 & 0.99 & 0.002\\\\\n0.004 & 0.004 & 0.002 & 0.99\n\\end{bmatrix}.\n$$\nThis matrix is symmetric. For a symmetric matrix, there exists an orthogonal matrix $P$ and a diagonal matrix $D$ such that $M = PDP^T$. The columns of $P$ are the orthonormal eigenvectors of $M$, and the diagonal entries of $D$ are the corresponding eigenvalues. The matrix power $M^N$ can then be computed efficiently as\n$$\nM^N = (PDP^T)^N = PD(P^T P)D(P^T P) \\dots D P^T = PD^N P^T.\n$$\nSince $D$ is diagonal, $D^N$ is found by simply raising its diagonal entries (the eigenvalues) to the power of $N$.\n\nFirst, we find the eigenvalues and eigenvectors of $M$. Let the matrix be represented as\n$$\nM =\n\\begin{bmatrix}\na & b & c & c\\\\\nb & a & c & c\\\\\nc & c & a & b\\\\\nc & c & b & a\n\\end{bmatrix}\n$$\nwith $a = 0.99$, $b = 0.002$, and $c = 0.004$. The characteristic equation is $\\det(M - \\lambda I)=0$. Due to the matrix's structure, we can identify eigenvectors by inspection.\nThe eigenvalues $\\lambda_i$ and a corresponding orthogonal basis of eigenvectors $v_i$ are:\n\\begin{enumerate}\n    \\item For $\\lambda_1 = a+b+2c = 0.99 + 0.002 + 2(0.004) = 1$, the eigenvector is $v_1 = [1, 1, 1, 1]^T$.\n    \\item For the eigenvalue $\\lambda_2 = a-b = 0.99 - 0.002 = 0.988$ (with multiplicity 2), the eigenspace is spanned by the orthogonal vectors $v_2 = [1, -1, 0, 0]^T$ and $v_3 = [0, 0, 1, -1]^T$.\n    \\item For $\\lambda_4 = a+b-2c = 0.99 + 0.002 - 2(0.004) = 0.984$, the eigenvector is $v_4 = [1, 1, -1, -1]^T$.\n\\end{enumerate}\nNormalizing these eigenvectors yields an orthonormal basis $\\{u_1, u_2, u_3, u_4\\}$:\n$u_1 = \\frac{1}{2}[1, 1, 1, 1]^T$\n$u_2 = \\frac{1}{\\sqrt{2}}[1, -1, 0, 0]^T$\n$u_3 = \\frac{1}{\\sqrt{2}}[0, 0, 1, -1]^T$\n$u_4 = \\frac{1}{2}[1, 1, -1, -1]^T$\n\nThe spectral decomposition of $M^N$ is given by\n$$\nM^N = \\lambda_1^N P_1 + \\lambda_2^N P_2 + \\lambda_4^N P_4\n$$\nwhere $P_i$ are the projection matrices onto the eigenspaces.\nFor the non-degenerate eigenvalues $\\lambda_1=1$ and $\\lambda_4=0.984$, the projectors are $P_1 = u_1 u_1^T$ and $P_4 = u_4 u_4^T$.\nFor the degenerate eigenvalue $\\lambda_2=0.988$, the projector is $P_2 = u_2 u_2^T + u_3 u_3^T$.\n\nWe require the element $(M^N)_{11}$, which is the dot product of the first standard basis vector $e_1=[1,0,0,0]^T$ with $M^N e_1$.\n$$\n(M^N)_{11} = e_1^T M^N e_1 = \\lambda_1^N (e_1^T u_1 u_1^T e_1) + \\lambda_2^N (e_1^T (u_2 u_2^T + u_3 u_3^T) e_1) + \\lambda_4^N (e_1^T u_4 u_4^T e_1).\n$$\nThis simplifies to\n$$\n(M^N)_{11} = \\lambda_1^N (u_{1,1})^2 + \\lambda_2^N ((u_{2,1})^2 + (u_{3,1})^2) + \\lambda_4^N (u_{4,1})^2,\n$$\nwhere $u_{i,1}$ is the first component of eigenvector $u_i$.\nSubstituting the components:\n$u_{1,1} = 1/2$\n$u_{2,1} = 1/\\sqrt{2}$\n$u_{3,1} = 0$\n$u_{4,1} = 1/2$\n\nThus, we obtain the analytical expression:\n$$\n(M^N)_{11} = (1)^N \\left(\\frac{1}{2}\\right)^2 + (0.988)^N \\left( \\left(\\frac{1}{\\sqrt{2}}\\right)^2 + 0^2 \\right) + (0.984)^N \\left(\\frac{1}{2}\\right)^2\n$$\n$$\n(M^N)_{11} = 0.25 \\cdot (1)^N + 0.5 \\cdot (0.988)^N + 0.25 \\cdot (0.984)^N\n$$\nThis formula provides a direct, efficient, and numerically stable way to compute the required value for any $N$. The problem states $N \\in \\mathbb{N}$, and the test cases include $N=0$. We assume the standard where natural numbers include zero ($\\mathbb{N} = \\{0, 1, 2, \\ldots\\}$).\n\nWe now apply this formula to the specified values of $N$:\n\\begin{itemize}\n    \\item For $N=0$: $(M^0)_{11} = 0.25 + 0.5 + 0.25 = 1.0$. This is correct as $M^0$ is the identity matrix $I$.\n    \\item For $N=1$: $(M^1)_{11} = 0.25 + 0.5(0.988) + 0.25(0.984) = 0.25 + 0.494 + 0.246 = 0.99$. Correct.\n    \\item For $N=2$: $(M^2)_{11} = 0.25 + 0.5(0.988)^2 + 0.25(0.984)^2 = 0.25 + 0.5(0.976144) + 0.25(0.968256) = 0.980136$.\n    \\item For $N=10$: $(M^{10})_{11} = 0.25 + 0.5(0.988)^{10} + 0.25(0.984)^{10} \\approx 0.9057967600$.\n    \\item For $N=500$: $(M^{500})_{11} = 0.25 + 0.5(0.988)^{500} + 0.25(0.984)^{500} \\approx 0.2512842902$.\n\\end{itemize}\nAs $N \\to \\infty$, since $|\\lambda_i| < 1$ for $i=2,4$, the terms $(0.988)^N$ and $(0.984)^N$ approach $0$. Therefore, $\\lim_{N \\to \\infty} (M^N)_{11} = 0.25$. This corresponds to the stationary distribution of the Markov chain, which is uniform, $\\pi = [0.25, 0.25, 0.25, 0.25]$.\n\nThe final values, rounded to $10$ decimal places, are calculated using the derived formula.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the top-left entry of the N-step substitution probability matrix PAM_N.\n    \"\"\"\n    # Test suite of exponents as specified in the problem statement.\n    test_cases = [0, 1, 2, 10, 500]\n\n    # The analytical formula for the (1,1) entry of M^N is derived from the\n    # eigendecomposition of the matrix M. The formula is:\n    # (M^N)_11 = 0.25 * (1)^N + 0.5 * (0.988)^N + 0.25 * (0.984)^N\n    # This is numerically stable and computationally efficient.\n    \n    # Eigenvalues from the derivation\n    lambda_2 = 0.988\n    lambda_4 = 0.984\n\n    results = []\n    for N in test_cases:\n        # Calculate the value using the derived analytical formula.\n        # The term with eigenvalue 1 simplifies to 0.25.\n        value = 0.25 + 0.5 * (lambda_2 ** N) + 0.25 * (lambda_4 ** N)\n        \n        # Format the result to 10 decimal places as specified.\n        # The f-string format specifier handles standard rounding correctly.\n        results.append(f\"{value:.10f}\")\n\n    # Final print statement in the exact required format.\n    # The output is a single line with a comma-separated list in brackets.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2411821"}, {"introduction": "The PAM model is ultimately rooted in the biological reality of DNA and protein evolution. This problem [@problem_id:2411854] provides a concrete way to test this connection by asking you to analyze the relationship between substitution scores and the structure of the genetic code. By quantifying whether amino acid pairs reachable by a single nucleotide mutation have more favorable scores, you will reinforce your understanding that these matrices are powerful because they encapsulate fundamental evolutionary principles.", "problem": "Amino acid substitution scoring matrices in the Point Accepted Mutation (PAM) family quantify the log-odds of observing a substitution between two amino acids under an evolutionary model of accepted point mutations. The structure of the standard genetic code constrains which amino acid changes are accessible via a single nucleotide point mutation in a codon.\n\nConsider the following four amino acids and their codon sets in the standard genetic code (using DNA alphabet):\n- Tryptophan (W): TGG\n- Cysteine (C): TGT, TGC\n- Lysine (K): AAA, AAG\n- Phenylalanine (F): TTT, TTC\n\nDefine two amino acids to be single-nucleotide reachable if there exists at least one codon of the first and one codon of the second that differ at exactly one nucleotide position (Hamming distance $1$).\n\nYou are given a symmetric PAM1-derived log-odds score matrix $S$ restricted to these four amino acids (only off-diagonal entries are listed; $S$ is symmetric, and $S(a,a)$ is not used here):\n- $S(\\mathrm{W},\\mathrm{C})=-0.3$\n- $S(\\mathrm{C},\\mathrm{F})=0.2$\n- $S(\\mathrm{W},\\mathrm{F})=-0.8$\n- $S(\\mathrm{W},\\mathrm{K})=-1.4$\n- $S(\\mathrm{C},\\mathrm{K})=-1.0$\n- $S(\\mathrm{K},\\mathrm{F})=-0.7$\n\nLet $\\mathcal{P}$ be the set of all unordered amino acid pairs from $\\{\\mathrm{W},\\mathrm{C},\\mathrm{K},\\mathrm{F}\\}$, so $|\\mathcal{P}|=6$. Partition $\\mathcal{P}$ into $\\mathcal{R}$ (pairs that are single-nucleotide reachable) and $\\mathcal{N}$ (pairs that are not). Using equal weighting over unordered pairs, define the mean scores\n$$\\mu_{\\mathcal{R}}=\\frac{1}{|\\mathcal{R}|}\\sum_{(a,b)\\in\\mathcal{R}} S(a,b), \\quad \\mu_{\\mathcal{N}}=\\frac{1}{|\\mathcal{N}|}\\sum_{(a,b)\\in\\mathcal{N}} S(a,b).$$\nCompute the difference\n$$\\Delta=\\mu_{\\mathcal{R}}-\\mu_{\\mathcal{N}}.$$\n\nReport the value of $\\Delta$ rounded to four significant figures. No units are required.", "solution": "The problem statement is critically validated and found to be valid. It is scientifically grounded, well-posed, objective, and internally consistent. We shall proceed with the solution.\n\nThe problem requires us to partition the set of all unordered pairs of the amino acids $\\{\\mathrm{W}, \\mathrm{C}, \\mathrm{K}, \\mathrm{F}\\}$ into two disjoint subsets: $\\mathcal{R}$, containing pairs where the amino acids are single-nucleotide reachable, and $\\mathcal{N}$, containing pairs that are not. Subsequently, we must compute the difference between the mean log-odds scores for these two sets.\n\nFirst, we must identify which pairs are single-nucleotide reachable. The definition states that two amino acids are single-nucleotide reachable if there exists at least one codon for each that differ by a Hamming distance of exactly $1$. The given amino acids and their codons in the standard DNA genetic code are:\n- Tryptophan ($\\mathrm{W}$): $\\mathrm{TGG}$\n- Cysteine ($\\mathrm{C}$): $\\mathrm{TGT}$, $\\mathrm{TGC}$\n- Lysine ($\\mathrm{K}$): $\\mathrm{AAA}$, $\\mathrm{AAG}$\n- Phenylalanine ($\\mathrm{F}$): $\\mathrm{TTT}$, $\\mathrm{TTC}$\n\nWe examine each of the $\\binom{4}{2} = 6$ unordered pairs:\n\n1.  **Pair ($\\mathrm{W}, \\mathrm{C}$):**\n    - Codon for $\\mathrm{W}$: $\\mathrm{TGG}$.\n    - Codons for $\\mathrm{C}$: $\\mathrm{TGT}$, $\\mathrm{TGC}$.\n    - Comparing $\\mathrm{TGG}$ and $\\mathrm{TGT}$, the Hamming distance is $1$ (difference in the $3^{rd}$ position).\n    - Thus, the pair $(\\mathrm{W, C})$ is single-nucleotide reachable. $(\\mathrm{W, C}) \\in \\mathcal{R}$.\n\n2.  **Pair ($\\mathrm{W}, \\mathrm{K}$):**\n    - Codon for $\\mathrm{W}$: $\\mathrm{TGG}$.\n    - Codons for $\\mathrm{K}$: $\\mathrm{AAA}$, $\\mathrm{AAG}$.\n    - Comparing $\\mathrm{TGG}$ and $\\mathrm{AAA}$, the Hamming distance is $3$.\n    - Comparing $\\mathrm{TGG}$ and $\\mathrm{AAG}$, the Hamming distance is $2$.\n    - Thus, the pair $(\\mathrm{W, K})$ is not single-nucleotide reachable. $(\\mathrm{W, K}) \\in \\mathcal{N}$.\n\n3.  **Pair ($\\mathrm{W}, \\mathrm{F}$):**\n    - Codon for $\\mathrm{W}$: $\\mathrm{TGG}$.\n    - Codons for $\\mathrm{F}$: $\\mathrm{TTT}$, $\\mathrm{TTC}$.\n    - Comparing $\\mathrm{TGG}$ and $\\mathrm{TTT}$, the Hamming distance is $2$.\n    - Comparing $\\mathrm{TGG}$ and $\\mathrm{TTC}$, the Hamming distance is $2$.\n    - Thus, the pair $(\\mathrm{W, F})$ is not single-nucleotide reachable. $(\\mathrm{W, F}) \\in \\mathcal{N}$.\n\n4.  **Pair ($\\mathrm{C}, \\mathrm{K}$):**\n    - Codons for $\\mathrm{C}$: $\\mathrm{TGT}$, $\\mathrm{TGC}$.\n    - Codons for $\\mathrm{K}$: $\\mathrm{AAA}$, $\\mathrm{AAG}$.\n    - All codon comparisons result in a Hamming distance of $2$ or $3$. For example, $\\mathrm{TGT}$ vs. $\\mathrm{AAG}$ has distance $2$.\n    - Thus, the pair $(\\mathrm{C, K})$ is not single-nucleotide reachable. $(\\mathrm{C, K}) \\in \\mathcal{N}$.\n\n5.  **Pair ($\\mathrm{C}, \\mathrm{F}$):**\n    - Codons for $\\mathrm{C}$: $\\mathrm{TGT}$, $\\mathrm{TGC}$.\n    - Codons for $\\mathrm{F}$: $\\mathrm{TTT}$, $\\mathrm{TTC}$.\n    - Comparing $\\mathrm{TGT}$ and $\\mathrm{TTT}$, the Hamming distance is $1$ (difference in the $2^{nd}$ position).\n    - Thus, the pair $(\\mathrm{C, F})$ is single-nucleotide reachable. $(\\mathrm{C, F}) \\in \\mathcal{R}$.\n\n6.  **Pair ($\\mathrm{K}, \\mathrm{F}$):**\n    - Codons for $\\mathrm{K}$: $\\mathrm{AAA}$, $\\mathrm{AAG}$.\n    - Codons for $\\mathrm{F}$: $\\mathrm{TTT}$, $\\mathrm{TTC}$.\n    - All codon comparisons result in a Hamming distance of $2$ or $3$. For example, $\\mathrm{AAG}$ vs. $\\mathrm{TTC}$ has distance $2$.\n    - Thus, the pair $(\\mathrm{K, F})$ is not single-nucleotide reachable. $(\\mathrm{K, F}) \\in \\mathcal{N}$.\n\nBased on this analysis, the partitions are:\n- $\\mathcal{R} = \\{(\\mathrm{W}, \\mathrm{C}), (\\mathrm{C}, \\mathrm{F})\\}$, so $|\\mathcal{R}| = 2$.\n- $\\mathcal{N} = \\{(\\mathrm{W}, \\mathrm{K}), (\\mathrm{W}, \\mathrm{F}), (\\mathrm{C}, \\mathrm{K}), (\\mathrm{K}, \\mathrm{F})\\}$, so $|\\mathcal{N}| = 4$.\n\nNext, we calculate the mean scores $\\mu_{\\mathcal{R}}$ and $\\mu_{\\mathcal{N}}$ using the provided score matrix $S$.\nThe scores for the reachable pairs in $\\mathcal{R}$ are $S(\\mathrm{W},\\mathrm{C}) = -0.3$ and $S(\\mathrm{C},\\mathrm{F}) = 0.2$.\nThe mean score for $\\mathcal{R}$ is:\n$$ \\mu_{\\mathcal{R}} = \\frac{1}{|\\mathcal{R}|} \\sum_{(a,b)\\in\\mathcal{R}} S(a,b) = \\frac{1}{2} (S(\\mathrm{W},\\mathrm{C}) + S(\\mathrm{C},\\mathrm{F})) = \\frac{1}{2} (-0.3 + 0.2) = \\frac{-0.1}{2} = -0.05 $$\n\nThe scores for the non-reachable pairs in $\\mathcal{N}$ are $S(\\mathrm{W},\\mathrm{K}) = -1.4$, $S(\\mathrm{W},\\mathrm{F}) = -0.8$, $S(\\mathrm{C},\\mathrm{K}) = -1.0$, and $S(\\mathrm{K},\\mathrm{F}) = -0.7$.\nThe mean score for $\\mathcal{N}$ is:\n$$ \\mu_{\\mathcal{N}} = \\frac{1}{|\\mathcal{N}|} \\sum_{(a,b)\\in\\mathcal{N}} S(a,b) = \\frac{1}{4} (S(\\mathrm{W},\\mathrm{K}) + S(\\mathrm{W},\\mathrm{F}) + S(\\mathrm{C},\\mathrm{K}) + S(\\mathrm{K},\\mathrm{F})) $$\n$$ \\mu_{\\mathcal{N}} = \\frac{1}{4} (-1.4 - 0.8 - 1.0 - 0.7) = \\frac{1}{4} (-3.9) = -0.975 $$\n\nFinally, we compute the difference $\\Delta = \\mu_{\\mathcal{R}} - \\mu_{\\mathcal{N}}$:\n$$ \\Delta = (-0.05) - (-0.975) = -0.05 + 0.975 = 0.925 $$\n\nThe problem requires the answer to be rounded to four significant figures. The value $0.925$ has three significant figures. To express it with four, we add a trailing zero.\n$$ \\Delta \\approx 0.9250 $$\nThis result indicates that, on average, amino acid pairs reachable by a single nucleotide mutation have a significantly higher log-odds score in this dataset than pairs which are not, consistent with evolutionary principles where single-step mutations are more probable than multi-step ones.", "answer": "$$\\boxed{0.9250}$$", "id": "2411854"}]}