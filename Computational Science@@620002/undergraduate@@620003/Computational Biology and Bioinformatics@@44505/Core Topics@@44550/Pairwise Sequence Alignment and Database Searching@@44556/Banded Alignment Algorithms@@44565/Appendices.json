{"hands_on_practices": [{"introduction": "Mastering any algorithm begins with understanding its core mechanics. This first practice invites you to roll up your sleeves and perform a banded alignment by hand. By manually filling the dynamic programming matrix for two short sequences, you will gain a concrete, step-by-step intuition for how the algorithm navigates the search space under the constraints of a fixed band half-width, $w$ [@problem_id:2374044].", "problem": "You are given two deoxyribonucleic acid (DNA) sequences and asked to compute a banded global alignment using dynamic programming (DP), then perform a traceback to identify the optimal path. Work within the standard global alignment framework (Needleman–Wunsch (NW)) with a linear gap penalty, but restrict computation to a diagonal band of fixed half-width. Use the following data and definitions.\n\n- Sequences: $S = \\text{``GACT''}$ of length $m = 4$ and $T = \\text{``GAT''}$ of length $n = 3$.\n- Scoring scheme: match $= +2$, mismatch $= -1$, gap $= -2$.\n- Banded constraint: only DP cells $(i,j)$ with $|i - j| \\le w$ are permitted, where the band half-width is $w = 1$. Any transition that would require entering a cell with $|i - j| > w$ is disallowed and treated as having score $-\\infty$.\n- Initialization follows the definition of global alignment: aligning a nonempty prefix to the empty string costs the number of letters times the gap penalty, but only where the cell lies inside the band. Concretely, set $D(0,0) = 0$, and for any $i \\ge 1$, if $|i - 0| \\le w$ then $D(i,0) = i \\times (-2)$; for any $j \\ge 1$, if $|0 - j| \\le w$ then $D(0,j) = j \\times (-2)$. Any boundary cell outside the band is disallowed.\n\nTasks:\n1. Manually fill in all permitted DP cells $D(i,j)$ under the band constraint using the global alignment optimal substructure principle (consider diagonal, up, and left transitions only from permitted predecessor cells).\n2. Perform a traceback within the band to identify one optimal banded global alignment path from $(i,j) = (m,n)$ to $(0,0)$.\n3. Using your completed DP table and traceback, state the optimal banded global alignment score $D(m,n)$.\n\nReport only the final optimal banded global alignment score as your answer. No rounding is required, and no units apply. Your final answer must be a single real-valued number.", "solution": "The problem statement has been critically evaluated and is deemed valid. It is scientifically grounded in the established principles of bioinformatics, specifically the Needleman-Wunsch algorithm for global sequence alignment, augmented with a standard banded constraint. The problem is well-posed, providing all necessary parameters: the two sequences $S$ and $T$, their lengths $m$ and $n$, a complete scoring scheme (match, mismatch, gap penalties), and a precise definition for the band half-width $w$ and initialization conditions. The objective is clear and formalizable. Therefore, we proceed with the solution.\n\nThe goal is to compute the optimal score for a banded global alignment of two DNA sequences, $S = \\text{``GACT''}$ (length $m=4$) and $T = \\text{``GAT''}$ (length $n=3$). The dynamic programming (DP) table, denoted by $D$, will have dimensions $(m+1) \\times (n+1)$, which is $5 \\times 4$. The indices $i$ range from $0$ to $4$ corresponding to prefixes of $S$, and $j$ ranges from $0$ to $3$ for prefixes of $T$.\n\nThe computation is restricted to a band defined by the constraint $|i - j| \\le w$, where the half-width $w=1$. Any cell $(i,j)$ not satisfying this condition is considered inaccessible, equivalent to having a score of $-\\infty$. The allowed cells within the $5 \\times 4$ DP grid are those for which $|i - j| \\le 1$.\n\nThe scoring scheme is: match score $s_{match} = +2$, mismatch score $s_{mismatch} = -1$, and a linear gap penalty $g = -2$.\n\nThe recurrence relation for a cell $D(i,j)$ within the band is derived from the standard Needleman-Wunsch algorithm:\n$$\nD(i,j) = \\max\n\\begin{cases}\nD(i-1, j-1) + \\text{score}(S_i, T_j) & \\text{(from diagonal)} \\\\\nD(i-1, j) + g & \\text{(from up)} \\\\\nD(i, j-1) + g & \\text{(from left)}\n\\end{cases}\n$$\nwhere $\\text{score}(S_i, T_j)$ is $s_{match}$ if $S_i = T_j$ and $s_{mismatch}$ otherwise. A predecessor cell outside the band provides a score of $-\\infty$ to this maximization, effectively disallowing transitions from it.\n\n**Step 1: Initialization**\nAccording to the problem, $D(0,0) = 0$. For the first row and column, we initialize cells that lie within the band:\n- For $i \\ge 1$, $D(i,0) = i \\times g$ if $|i-0| \\le w=1$. This holds only for $i=1$. Thus, $D(1,0) = 1 \\times (-2) = -2$. The cell $(2,0)$ is outside the band since $|2-0| > 1$.\n- For $j \\ge 1$, $D(0,j) = j \\times g$ if $|0-j| \\le w=1$. This holds only for $j=1$. Thus, $D(0,1) = 1 \\times (-2) = -2$. The cell $(0,2)$ is outside the band since $|0-2| > 1$.\nAll other boundary cells are outside the band and are not computed.\n\nSummary of initialized cells (X denotes outside the band):\n- $D(0,0)=0$\n- $D(1,0)=-2$\n- $D(0,1)=-2$\n- $D(i,j) = X$ for $(i,j) \\in \\{(2,0), (3,0), (4,0), (0,2), (0,3)\\}$\n\n**Step 2: Filling the DP Table**\nWe compute the scores for the remaining accessible cells in an order that respects data dependencies (e.g., row-by-row or column-by-column).\n\n- **Cell (1,1):** $|1-1|=0 \\le 1$.\n$S_1=\\text{'G'}, T_1=\\text{'G'}$ (match).\n$D(1,1) = \\max(D(0,0)+s_{match}, D(0,1)+g, D(1,0)+g) = \\max(0+2, -2-2, -2-2) = 2$.\n\n- **Cell (1,2):** $|1-2|=1 \\le 1$.\n$S_1=\\text{'G'}, T_2=\\text{'A'}$ (mismatch). Predecessor $(0,2)$ is outside the band.\n$D(1,2) = \\max(D(0,1)+s_{mismatch}, D(1,1)+g) = \\max(-2-1, 2-2) = 0$.\n\n- **Cell (2,1):** $|2-1|=1 \\le 1$.\n$S_2=\\text{'A'}, T_1=\\text{'G'}$ (mismatch). Predecessor $(2,0)$ is outside the band.\n$D(2,1) = \\max(D(1,0)+s_{mismatch}, D(1,1)+g) = \\max(-2-1, 2-2) = 0$.\n\n- **Cell (2,2):** $|2-2|=0 \\le 1$.\n$S_2=\\text{'A'}, T_2=\\text{'A'}$ (match).\n$D(2,2) = \\max(D(1,1)+s_{match}, D(1,2)+g, D(2,1)+g) = \\max(2+2, 0-2, 0-2) = 4$.\n\n- **Cell (2,3):** $|2-3|=1 \\le 1$.\n$S_2=\\text{'A'}, T_3=\\text{'T'}$ (mismatch). Predecessor $(1,3)$ is outside the band.\n$D(2,3) = \\max(D(1,2)+s_{mismatch}, D(2,2)+g) = \\max(0-1, 4-2) = 2$.\n\n- **Cell (3,2):** $|3-2|=1 \\le 1$.\n$S_3=\\text{'C'}, T_2=\\text{'A'}$ (mismatch). Predecessor $(3,1)$ is outside the band.\n$D(3,2) = \\max(D(2,1)+s_{mismatch}, D(2,2)+g) = \\max(0-1, 4-2) = 2$.\n\n- **Cell (3,3):** $|3-3|=0 \\le 1$.\n$S_3=\\text{'C'}, T_3=\\text{'T'}$ (mismatch).\n$D(3,3) = \\max(D(2,2)+s_{mismatch}, D(2,3)+g, D(3,2)+g) = \\max(4-1, 2-2, 2-2) = 3$.\n\n- **Cell (4,3):** $|4-3|=1 \\le 1$. This is the final cell $D(m,n)$.\n$S_4=\\text{'T'}, T_3=\\text{'T'}$ (match). Predecessor $(4,2)$ is outside the band.\n$D(4,3) = \\max(D(3,2)+s_{match}, D(3,3)+g) = \\max(2+2, 3-2) = 4$.\n\n**Step 3: Traceback and Final Score**\nThe computed DP matrix, showing only the accessible cells, is as follows:\n$$\n\\begin{array}{c|cccc}\nD & \\epsilon & \\text{G} & \\text{A} & \\text{T} \\\\\n\\hline\n\\epsilon & 0 & -2 & X & X \\\\\n\\text{G} & -2 & 2 & 0 & X \\\\\n\\text{A} & X & 0 & 4 & 2 \\\\\n\\text{C} & X & X & 2 & 3 \\\\\n\\text{T} & X & X & X & 4 \\\\\n\\end{array}\n$$\nThe optimal score for the banded global alignment is the value in the bottom-rightmost accessible cell, $D(m,n) = D(4,3)$. From our calculation, this score is $4$.\n\nA traceback from $D(4,3)$ confirms this score. The value $D(4,3)=4$ was obtained from the diagonal predecessor $D(3,2)$, corresponding to aligning $S_4=\\text{'T'}$ with $T_3=\\text{'T'}$. The value $D(3,2)=2$ came from the 'up' predecessor $D(2,2)$, corresponding to aligning $S_3=\\text{'C'}$ with a gap. The value $D(2,2)=4$ came from the diagonal predecessor $D(1,1)$, aligning $S_2=\\text{'A'}$ with $T_2=\\text{'A'}$. Finally, $D(1,1)=2$ came from the diagonal predecessor $D(0,0)=0$, aligning $S_1=\\text{'G'}$ with $T_1=\\text{'G'}$. This yields the alignment:\nS: G A C T\nT: G A - T\nThe score is $(+2) + (+2) + (-2) + (+2) = 4$, which is consistent.\n\nThe final optimal banded global alignment score is $D(4,3)$.", "answer": "$$\\boxed{4}$$", "id": "2374044"}, {"introduction": "Banded alignment embodies a fundamental trade-off between computational speed and alignment sensitivity. While a narrow band accelerates the alignment, it risks missing the optimal path if it deviates too far from the main diagonal. This exercise challenges you to explore this trade-off by determining the minimum band half-width, $k_{\\min}$, required to guarantee finding the true optimal alignment for a specific pair of sequences, directly linking biological features like large insertions or deletions to the necessary computational parameters [@problem_id:2373995].", "problem": "Two deoxyribonucleic acid (DNA) sequences are to be globally aligned using the Needleman–Wunsch (NW) algorithm with affine gap penalties. Let sequence $S$ be\nAAAAAACCCCCCTTTTTTGGGGGG\nand let sequence $T$ be\nAAAAAACCCCCCGGGGGG.\nThe scoring scheme is as follows: match $+1$, mismatch $-2$, gap opening $-2$, and gap extension $-1$. Under affine penalties, a single contiguous gap of length $\\ell$ contributes a score of $-2-(\\ell-1)\\cdot 1$.\n\nConsider a banded implementation of the dynamic programming (DP) solution that restricts computation to cells $(i,j)$ satisfying $\\lvert i-j\\rvert \\leq k$, where $i$ indexes positions in $S$ (from $0$ to $n$) and $j$ indexes positions in $T$ (from $0$ to $m$). Determine the smallest nonnegative integer band half-width $k_{\\min}$ such that the banded algorithm is guaranteed to discover the true optimal global alignment score for these two sequences under the given scoring scheme.\n\nProvide your final answer as a single integer. No rounding is required.", "solution": "The problem requires the determination of the smallest non-negative integer band half-width, denoted $k_{\\min}$, for a banded implementation of the Needleman-Wunsch algorithm. This $k_{\\min}$ must be sufficient to guarantee that the true optimal global alignment score is found for two specific DNA sequences, $S$ and $T$, under an affine gap penalty model.\n\nFirst, we must formalize the given information.\nThe sequences are:\n$S = \\text{AAAAAACCCCCCTTTTTTGGGGGG}$\n$T = \\text{AAAAAACCCCCCGGGGGG}$\nThe length of sequence $S$ is $n=24$. The length of sequence $T$ is $m=18$.\n\nThe scoring scheme is as follows:\n- Match score: $s_{\\text{match}} = +1$\n- Mismatch score: $s_{\\text{mismatch}} = -2$\n- Gap opening penalty: $g_{\\text{open}} = -2$\n- Gap extension penalty: $g_{\\text{extend}} = -1$\n\nA contiguous gap of length $\\ell$ incurs a total penalty of $G(\\ell) = g_{\\text{open}} + (\\ell-1)g_{\\text{extend}} = -2 - (\\ell-1)$.\n\nThe banded alignment algorithm restricts the dynamic programming computation to a band of cells $(i,j)$ in the DP matrix, where $i$ is the index for sequence $S$ (from $0$ to $n$) and $j$ is the index for sequence $T$ (from $0$ to $m$), such that the condition $|i-j| \\leq k$ is met. The algorithm is guaranteed to find the optimal alignment if and only if the entire path corresponding to the optimal alignment lies within this band. Therefore, the minimum required half-width $k_{\\min}$ is the maximum value of $|i-j|$ over all cells $(i,j)$ that constitute the optimal alignment path.\n\nOur task is thus to identify the optimal global alignment of $S$ and $T$ and then calculate the maximum value of $|i-j|$ along its corresponding path in the DP matrix.\n\nLet us analyze the structure of the sequences.\nSequence $S$ is composed of four blocks of six identical nucleotides:\n$S = S_1 S_2 S_3 S_4$, where $S_1=\\text{A}_6$, $S_2=\\text{C}_6$, $S_3=\\text{T}_6$, $S_4=\\text{G}_6$.\nSequence $T$ is composed of three blocks of six identical nucleotides:\n$T = T_1 T_2 T_3$, where $T_1=\\text{A}_6$, $T_2=\\text{C}_6$, $T_3=\\text{G}_6$.\n\nAn optimal alignment will maximize the total score by aligning identical blocks where possible. The blocks $S_1$ and $T_1$, $S_2$ and $T_2$, and $S_4$ and $T_3$ are identical. The block $S_3 = \\text{TTTTTT}$ in sequence $S$ has no homologous counterpart in sequence $T$.\n\nThe optimal alignment strategy is intuitively clear:\n1. Align $S_1S_2$ with $T_1T_2$. This is an alignment of $\\text{AAAAAACCCCCC}$ with $\\text{AAAAAACCCCCC}$, consisting of $12$ matches. The score for this part is $12 \\times s_{\\text{match}} = 12 \\times 1 = 12$.\n2. Address the block $S_3 = \\text{TTTTTT}$. It can either be aligned with a gap in $T$ or be mismatched against the next block in $T$, which is $T_3 = \\text{GGGGGG}$.\n   - Option A: Align $S_3$ with a gap of length $\\ell=6$ in sequence $T$. The score from this is the gap penalty $G(6) = -2 - (6-1) \\times 1 = -7$.\n   - Option B: Align $S_3$ with $T_3$. This would result in $6$ mismatches (`T` vs `G`). The score would be $6 \\times s_{\\text{mismatch}} = 6 \\times (-2) = -12$.\n   Since $-7 > -12$, aligning $S_3$ with a gap is the optimal choice for this segment.\n3. Align the remaining block $S_4 = \\text{GGGGGG}$ with $T_3 = \\text{GGGGGG}$. This alignment provides $6$ matches, with a score of $6 \\times s_{\\text{match}} = 6 \\times 1 = 6$.\n\nThe resulting optimal alignment is:\n$S$: AAAAAACCCCCCTTTTTTGGGGGG\n$T$: AAAAAACCCCC------GGGGGG\n\nThe total score for this alignment is $12 + (-7) + 6 = 11$. Any other alignment would introduce mismatches or suboptimal gaps, leading to a lower score. For example, breaking up the perfect match blocks would replace match scores ($+1$) with mismatch ($-2$) or gap ($-2$ for opening) scores, which is clearly suboptimal.\n\nNow we must trace the path of this optimal alignment in the DP matrix of size $(n+1) \\times (m+1) = 25 \\times 19$. The indices are $i \\in [0, 24]$ and $j \\in [0, 18]$. The path starts at $(0,0)$ and ends at $(24,18)$.\n\n1.  The alignment of the first $12$ characters ($\\text{AAAAAACCCCCC}$) is a perfect match. This corresponds to $12$ diagonal steps in the DP matrix. The path goes from $(0,0)$ to $(12,12)$. For any cell $(i,j)$ on this segment, we have $i=j$, so $|i-j|=0$.\n\n2.  The alignment of $\\text{TTTTTT}$ from $S$ with a gap in $T$ corresponds to $6$ vertical steps in the DP matrix (since we are consuming characters from $S$ but not from $T$). The path goes from $(12,12)$ to $(18,12)$. For any cell $(i,j)$ on this segment, $j=12$ while $i$ ranges from $13$ to $18$. The value of $|i-j|$ is $|i-12|$. This value increases from $|13-12|=1$ to a maximum of $|18-12|=6$ at the cell $(18,12)$.\n\n3.  The alignment of the final $6$ characters ($\\text{GGGGGG}$) is another perfect match. This corresponds to $6$ diagonal steps. The path goes from $(18,12)$ to $(24,18)$. For any cell $(i,j)$ on this segment, the relationship between the indices is $j = i-6$. This is because for each step $d \\in \\{1, \\dots, 6\\}$, the cell is $(18+d, 12+d)$. The difference is $(18+d)-(12+d)=6$. Thus, for this entire segment, $|i-j| = |6| = 6$.\n\nCombining these three segments, the value of $|i-j|$ along the path is first $0$, then it increases from $1$ to $6$, and finally remains constant at $6$. The maximum value of $|i-j|$ encountered along the entire optimal path is therefore $6$.\n\nTo guarantee that the banded alignment algorithm finds this optimal path, the band half-width $k$ must be at least this maximum value.\n$$k_{\\min} = \\max_{(i,j) \\in \\text{optimal path}} |i-j| = 6$$\nThus, the smallest non-negative integer band half-width is $6$.", "answer": "$$\\boxed{6}$$", "id": "2373995"}, {"introduction": "The primary motivation for using a banded alignment is to reduce the computational cost from a quadratic to a near-linear dependency on sequence length. Having built an intuition for the algorithm's mechanics and its limitations, we now turn to a formal analysis of its efficiency. This practice guides you to derive the exact number of computations required for a banded alignment of two sequences of length $n$ with a half-bandwidth $w$, providing a precise mathematical expression for the performance gains that justify its use [@problem_id:2374058].", "problem": "Consider a banded global alignment algorithm for two deoxyribonucleic acid (DNA) sequences using dynamic programming (DP). Let $S$ and $T$ be two sequences over the alphabet $\\{\\mathrm{A}, \\mathrm{C}, \\mathrm{G}, \\mathrm{T}\\}$, each of length $n$, where $n$ is a positive integer. The DP matrix has $(n+1)$ rows and $(n+1)$ columns, indexed from $(0,0)$ to $(n,n)$. The banded algorithm computes a cell $(i,j)$ if and only if $|i - j| \\leq w$, where $w$ is an integer half-bandwidth satisfying $0 \\leq w \\leq n$. Assume a unit-time cost to compute any individual cell that is computed by the algorithm (including boundary cells within the band).\n\nYou must work from the definition of the banded DP to determine, in the worst case over all sequence pairs and scoring schemes that keep the optimal global alignment path entirely within the band from $(0,0)$ to $(n,n)$, the exact number of DP cells computed as a function of $n$ and $w$. Additionally, construct an explicit pair of sequences $S$ and $T$ and a scoring scheme with match reward $+a$, mismatch penalty $-b$, and gap penalty $-g$, where $a,b,g$ are positive real numbers, that forces this worst-case behavior in the sense that the optimal path remains within the band for all rows and uses the full allowable band wherever permitted by the matrix boundaries.\n\nReport, as your final answer, a single closed-form analytic expression giving the exact number of DP cells computed as a function of $n$ and $w$. Do not provide any intermediate steps. No rounding is required, and no units are to be included in the final answer.", "solution": "The problem statement must first be subjected to rigorous validation.\n\nStep 1: Extract Givens\n- Algorithm: Banded global alignment via dynamic programming (DP).\n- Sequences: $S$ and $T$, two DNA sequences over alphabet $\\{\\mathrm{A}, \\mathrm{C}, \\mathrm{G}, \\mathrm{T}\\}$.\n- Lengths: Both sequences have length $n$, a positive integer.\n- DP Matrix: Size is $(n+1) \\times (n+1)$, with indices $(i,j)$ from $(0,0)$ to $(n,n)$.\n- Band Condition: A cell $(i,j)$ is computed if and only if $|i - j| \\leq w$.\n- Half-Bandwidth: $w$ is an integer satisfying $0 \\leq w \\leq n$.\n- Cost: Unit-time cost per computed cell.\n- Objective 1: Find the exact number of computed DP cells as a function of $n$ and $w$.\n- Objective 2: Construct an explicit example of sequences $S, T$ and a scoring scheme ($+a, -b, -g$) that demonstrates the worst-case path behavior as described.\n\nStep 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, as it concerns the analysis of the well-established banded dynamic programming algorithm for sequence alignment. It is objective and well-posed. The primary task is a well-defined combinatorial counting problem. The variables $n$ and $w$ and the conditions for cell computation are stated with mathematical precision. There are no contradictions. The values $0 \\le w \\le n$ are consistent with the typical application domain of this algorithm. The secondary task of constructing an example is also valid; for any given alignment path, it is known to be possible to construct sequences and a scoring scheme that make this path optimal. The condition that the optimal path remains within the band is a prerequisite for the banded algorithm to find the true global optimum, and its inclusion does not constitute a flaw.\n\nStep 3: Verdict and Action\nThe problem is deemed valid. We will proceed to derive the solution.\n\nThe problem asks for the total number of DP cells $(i,j)$ that are computed by the algorithm. According to the problem statement, these are precisely the cells that satisfy the conditions:\n1.  $0 \\le i \\le n$\n2.  $0 \\le j \\le n$\n3.  $|i - j| \\le w$\n\nThis is a problem of counting integer points within a specified region of a two-dimensional grid. We can solve this by summing the number of contributing cells along each diagonal of the DP matrix that falls within the band.\n\nA diagonal is defined by a constant value of the difference $k = i - j$. The condition $|i - j| \\le w$ is equivalent to $|-k| \\le w$, or $|k| \\le w$. This means we must consider a total of $2w+1$ diagonals, for $k \\in \\{-w, -w+1, \\ldots, 0, \\ldots, w-1, w\\}$.\n\nFor each diagonal specified by $k$, we must count the number of cells $(i,j)$ that lie on it and also within the grid boundaries $0 \\le i \\le n$ and $0 \\le j \\le n$. Substituting $j = i - k$ into the boundary conditions for $j$, we get $0 \\le i-k \\le n$, which implies $k \\le i \\le n+k$. Combined with the condition $0 \\le i \\le n$, the valid range for the index $i$ is $\\max(0, k) \\le i \\le \\min(n, n+k)$.\nThe number of cells on the diagonal $k$, denoted $N_k$, is thus $\\min(n, n+k) - \\max(0, k) + 1$.\n\nWe analyze this for two cases based on the sign of $k$:\nCase 1: $k \\ge 0$. Since $w \\le n$, we have $k \\le n$. The range for $i$ becomes $k \\le i \\le n$. The number of cells is $N_k = n - k + 1$. This applies for $k = 0, 1, \\ldots, w$.\nCase 2: $k < 0$. The range for $i$ becomes $0 \\le i \\le n+k$. The number of cells is $N_k = (n+k) - 0 + 1 = n+k+1$. This applies for $k = -1, -2, \\ldots, -w$.\n\nThe total number of computed cells, $N$, is the sum of $N_k$ over all valid $k$:\n$$N = \\sum_{k=-w}^{w} N_k = \\sum_{k=-w}^{-1} (n+k+1) + \\sum_{k=0}^{w} (n-k+1)$$\n\nLet us evaluate these two sums separately. The second sum is:\n$$\\sum_{k=0}^{w} (n-k+1) = (n+1)\\sum_{k=0}^{w} 1 - \\sum_{k=0}^{w} k = (w+1)(n+1) - \\frac{w(w+1)}{2}$$\nThis counts the cells on the main diagonal and the $w$ diagonals above it.\n\nFor the first sum, let us change the index of summation. Let $m = -k$. As $k$ runs from $-w$ to $-1$, $m$ runs from $w$ to $1$:\n$$\\sum_{k=-w}^{-1} (n+k+1) = \\sum_{m=1}^{w} (n-m+1)$$\nThis sum counts the cells on the $w$ diagonals below the main diagonal. The expression is identical to the sum from $k=1$ to $w$ in the previous part.\n$$\\sum_{m=1}^{w} (n-m+1) = \\sum_{k=1}^{w} (n-k+1) = \\left(\\sum_{k=0}^{w} (n-k+1)\\right) - (n-0+1) = \\left((w+1)(n+1) - \\frac{w(w+1)}{2}\\right) - (n+1)$$\n\nCombining the sums:\n$$N = \\left( (w+1)(n+1) - \\frac{w(w+1)}{2} \\right) + \\left( (w+1)(n+1) - \\frac{w(w+1)}{2} - (n+1) \\right)$$\n$$N = 2(w+1)(n+1) - w(w+1) - (n+1)$$\n$$N = (2w+2-1)(n+1) - w(w+1)$$\n$$N = (2w+1)(n+1) - w(w+1)$$\n\nThis is the exact number of computed cells. This expression can be verified with boundary conditions.\n- For $w=0$, the band is the main diagonal. $N = (1)(n+1) - 0 = n+1$, which is correct.\n- For $w=n$, the band covers the entire matrix. $N = (2n+1)(n+1) - n(n+1) = (2n+1-n)(n+1) = (n+1)(n+1) = (n+1)^2$, which is also correct.\n\nThe construction of sequences that force the alignment path to the band edges $|i-j|=w$ is possible by creating sequences with alternating blocks that do not match, forcing gapped alignments, and choosing a scoring scheme where mismatches are heavily penalized relative to gaps (e.g., $b \\gg g$). For example, let $S = (\\text{A}^w \\text{C}^w)^k \\text{A}^{n \\pmod{2w}}$ and $T = (\\text{C}^w \\text{A}^w)^k \\text{C}^{n \\pmod{2w}}$ for $n=2wk+ (n \\pmod{2w})$. With a scoring scheme where the mismatch penalty $-b$ is much larger in magnitude than the gap penalty $-g$, the optimal path will prefer to introduce blocks of $w$ gaps to align matching blocks (e.g., $\\text{C}^w$ with $\\text{C}^w$), forcing the path to coordinates $(i,j)$ where $|i-j|=w$. This demonstrates feasibility for the second part of the problem. However, the final answer requires only the analytic expression for the cell count.", "answer": "$$\\boxed{(2w+1)(n+1) - w(w+1)}$$", "id": "2374058"}]}