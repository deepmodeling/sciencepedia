{"hands_on_practices": [{"introduction": "The power of BLAST stems from its ability to rapidly distinguish biologically significant sequence similarities from those that occur merely by chance. To appreciate this, we must first build a quantitative understanding of random sequence matching. This exercise guides you through a foundational calculation to model the probability of finding a short, exact match (a \"seed\") in a large database purely by random chance, providing the statistical baseline against which real alignments are judged [@problem_id:2434603].", "problem": "In the seed stage of the Basic Local Alignment Search Tool (BLAST), a seed is a contiguous word of fixed length. Consider a fixed seed of length $w$ over a finite alphabet $\\Sigma$ of size $|\\Sigma|$. Suppose a database is modeled as a single sequence of length $D$, where each position is an independent and identically distributed draw from the uniform distribution over $\\Sigma$. Define a hit as an exact match of the seed to a contiguous length-$w$ substring of the database. Treat the $D - w + 1$ possible starting positions for length-$w$ substrings as independent trials. Under this model, what is the closed-form expression for the probability that the database contains at least one hit of the seed? Express your answer in terms of $D$, $w$, and $|\\Sigma|$. Do not approximate or round; provide an exact expression.", "solution": "The problem statement will first be subjected to a rigorous validation process before any attempt at a solution is made.\n\n### Step 1: Extract Givens\n- **Domain**: Basic Local Alignment Search Tool (BLAST), seed stage.\n- **Seed**: A fixed contiguous word of length $w$.\n- **Alphabet**: A finite set $\\Sigma$ of size $|\\Sigma|$.\n- **Database**: A single sequence of length $D$.\n- **Probabilistic Model**: Each position in the database is an independent and identically distributed (i.i.d.) random draw from the uniform distribution over $\\Sigma$.\n- **Definition of Hit**: An exact match of the seed to a contiguous length-$w$ substring of the database.\n- **Explicit Assumption**: The $D - w + 1$ possible starting positions for length-$w$ substrings in the database are to be treated as independent trials.\n- **Objective**: Derive the closed-form expression for the probability that the database contains at least one hit. The expression must be in terms of $D$, $w$, and $|\\Sigma|$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is assessed against the criteria for validity.\n\n1.  **Scientific Grounding**: The problem describes a simplified but standard probabilistic model for analyzing sequence alignment statistics. The BLAST algorithm and its seed-based heuristic are fundamental concepts in computational biology. The model of sequences as i.i.d. random variables is a common first-order approximation in this field. The problem is scientifically grounded.\n2.  **Well-Posedness**: The problem is well-posed. It asks for a specific probability under a fully specified model. All necessary parameters ($D$, $w$, $|\\Sigma|$) are provided symbolically. The objective is unambiguous. The explicit instruction to assume independence of trials, while a simplification of the real-world scenario of overlapping substrings, removes ambiguity and makes the problem uniquely solvable. This assumption is a feature of the model to be analyzed, not a flaw in the problem's statement.\n3.  **Objectivity**: The problem is stated in precise, objective, and mathematical language. It is free of subjective or opinion-based content.\n\n### Step 3: Verdict and Action\nThe problem is deemed **valid**. It is a self-contained, consistent, and well-posed question based on a standard simplified model in bioinformatics. Proceeding to the solution.\n\nThe objective is to find the probability of observing at least one exact match of a fixed seed of length $w$ within a database sequence of length $D$.\n\nLet $A$ be the event that the database contains at least one hit. It is computationally more straightforward to first calculate the probability of the complement event, $A^c$, which is the event that the database contains no hits. The desired probability is then given by the relation $P(A) = 1 - P(A^c)$.\n\nThe database sequence has length $D$. A contiguous substring of length $w$ can start at any position from $1$ to $D - w + 1$. We assume $D \\geq w$, otherwise no substring of length $w$ exists and the probability of a hit is trivially $0$. The total number of possible starting positions for a length-$w$ substring, which we will treat as trials, is $N = D - w + 1$.\n\nLet's first determine the probability of a hit in a single trial. A trial consists of comparing the fixed seed to a specific length-$w$ substring of the database. Let the seed be $s_1 s_2 \\dots s_w$ and a database substring be $d_1 d_2 \\dots d_w$. A hit occurs if $s_i = d_i$ for all $i \\in \\{1, 2, \\dots, w\\}$.\n\nAccording to the model, each character $d_i$ in the database is drawn independently and uniformly from the alphabet $\\Sigma$ of size $|\\Sigma|$. The probability that a single character $d_i$ matches the corresponding character $s_i$ of the fixed seed is $\\frac{1}{|\\Sigma|}$.\n\nSince the characters within the database substring are drawn independently, the probability that all $w$ characters of the substring match the seed is the product of the individual character match probabilities. Let $p$ be the probability of a hit in a single trial.\n$$p = \\left(\\frac{1}{|\\Sigma|}\\right) \\times \\left(\\frac{1}{|\\Sigma|}\\right) \\times \\dots \\times \\left(\\frac{1}{|\\Sigma|}\\right) \\quad (w \\text{ times})$$\n$$p = \\left(\\frac{1}{|\\Sigma|}\\right)^{w} = \\frac{1}{|\\Sigma|^w}$$\n\nThe event $A^c$ is the event that there are no hits across all $N$ possible starting positions. The problem explicitly states that these $N$ trials are to be treated as independent. Let $E_i$ be the event of a hit at the $i$-th starting position. We are looking for $P(\\bigcap_{i=1}^{N} E_i^c)$.\nDue to the independence of trials:\n$$P(A^c) = P(\\text{no hit in trial } 1 \\text{ AND no hit in trial } 2 \\dots \\text{ AND no hit in trial } N)$$\n$$P(A^c) = \\prod_{i=1}^{N} P(E_i^c)$$\n\nThe probability of not having a hit in any single trial is $P(E_i^c) = 1 - P(E_i) = 1 - p$.\n$$P(E_i^c) = 1 - \\frac{1}{|\\Sigma|^w}$$\nSince the probability model is identical for all starting positions, $P(E_i^c)$ is the same for all $i$. Therefore, the probability of no hits in any of the $N$ trials is:\n$$P(A^c) = (1 - p)^N = \\left(1 - \\frac{1}{|\\Sigma|^w}\\right)^{N}$$\nSubstituting $N = D - w + 1$:\n$$P(A^c) = \\left(1 - \\frac{1}{|\\Sigma|^w}\\right)^{D-w+1}$$\n\nFinally, the probability of at least one hit, $P(A)$, is:\n$$P(A) = 1 - P(A^c) = 1 - \\left(1 - \\frac{1}{|\\Sigma|^w}\\right)^{D-w+1}$$\nThis is the closed-form expression for the probability of the database containing at least one hit under the specified model and its simplifying assumption of independence. This expression is valid for $D \\ge w$. If $D < w$, then $D-w+1 \\le 0$, which implies $0$ trials. The probability of an event in $0$ trials is $0$. Our formula correctly gives $1 - (\\dots)^0 = 1 - 1 = 0$ for the case $D-w+1=0$.", "answer": "$$\\boxed{1 - \\left(1 - \\frac{1}{|\\Sigma|^{w}}\\right)^{D-w+1}}$$", "id": "2434603"}, {"introduction": "The BLAST algorithm is not a single monolithic entity, but a finely tuned pipeline of \"seed, extend, and evaluate\" stages, where each component relies on a shared set of rules and parameters. This thought experiment explores the internal consistency of that architecture by posing a practical question: what happens when you provide a protein search program (`blastp`) with a nucleotide scoring matrix? By predicting the outcome, you will develop a deeper understanding of the critical dependencies between the sequence alphabet, the scoring matrix, and the statistical framework that make the entire system function correctly [@problem_id:2434631].", "problem": "A user attempts to run protein Basic Local Alignment Search Tool (BLAST) (blastp) with a nucleotide scoring matrix such as NUC.4.4 by specifying a custom matrix file on the command line. Consider the Basic Local Alignment Search Tool (BLAST) seed–extend–evaluate architecture. In BLAST, the scoring system is defined by a substitution matrix $S(a,b)$ over an alphabet $\\mathcal{A}$, where for protein alignments $\\mathcal{A}_{\\mathrm{aa}}$ has size $|\\mathcal{A}_{\\mathrm{aa}}| = 20$ and for nucleotide alignments $\\mathcal{A}_{\\mathrm{nt}}$ has size $|\\mathcal{A}_{\\mathrm{nt}}| = 4$. The seed stage constructs neighborhoods of $w$-letter words based on scores from $S(a,b)$, the extend stage accumulates scores $\\sum_i S(x_i, y_i)$ to grow high-scoring segment pairs, and the evaluate stage estimates $E$-values under the Karlin–Altschul theory, which requires parameters $\\lambda$ and $K$ defined for the chosen $S(a,b)$ and background frequencies and satisfying the usual conditions (including a negative expected score).\n\nPredict the operational consequence of trying to use NUC.4.4 in blastp. Assume no undocumented automatic coercions; the software must be able to define $S(a,b)$ on $\\mathcal{A}_{\\mathrm{aa}} \\times \\mathcal{A}_{\\mathrm{aa}}$ and to compute valid statistical parameters for the evaluate stage.\n\nWhich of the following outcomes is most consistent with the BLAST architecture and its statistical foundations?\n\nA. blastp completes normally by internally expanding the $4 \\times 4$ matrix to a $20 \\times 20$ matrix by assigning zero scores to all undefined amino acid pairs, which inflates the number of high-scoring segment pairs and yields deflated $E$-values.\n\nB. blastp runs, but the seed stage only admits words composed of residues in $\\{A,C,G,T\\}$, so sensitivity drops; nevertheless, extension and evaluation proceed, and some true homologs are still found.\n\nC. blastp rejects the matrix at initialization because the substitution matrix alphabet and dimensionality ($4 \\times 4$ versus $20 \\times 20$) are incompatible with $\\mathcal{A}_{\\mathrm{aa}}$; as a result, neighbor word generation, extension scoring, and Karlin–Altschul parameters cannot be defined, and the run terminates with an error and no alignments.\n\nD. blastp silently falls back to the default protein matrix (for example, BLOSUM62) and proceeds, possibly issuing a warning, so results are essentially unchanged relative to a standard run.", "solution": "The problem statement is subjected to validation.\n\n### Step 1: Extract Givens\n- **Program**: Protein Basic Local Alignment Search Tool (`blastp`).\n- **User Action**: Attempting to use a nucleotide scoring matrix (e.g., `NUC.4.4`) with `blastp`.\n- **BLAST Architecture**: Consists of three stages: seed, extend, evaluate.\n- **Scoring System**: Defined by a substitution matrix $S(a,b)$ over an alphabet $\\mathcal{A}$.\n- **Protein Alphabet**: $\\mathcal{A}_{\\mathrm{aa}}$, with size $|\\mathcal{A}_{\\mathrm{aa}}| = 20$.\n- **Nucleotide Alphabet**: $\\mathcal{A}_{\\mathrm{nt}}$, with size $|\\mathcal{A}_{\\mathrm{nt}}| = 4$.\n- **Seed Stage**: Constructs neighborhoods of $w$-letter words using scores from $S(a,b)$.\n- **Extend Stage**: Accumulates scores for high-scoring segment pairs (HSPs) via the sum $\\sum_i S(x_i, y_i)$.\n- **Evaluate Stage**: Estimates $E$-values using Karlin–Altschul theory, which requires statistical parameters $\\lambda$ and $K$ derived from $S(a,b)$ and background residue frequencies.\n- **Karlin–Altschul Prerequisite**: The expected score for a random alignment must be negative.\n- **Problem Constraints**:\n    1.  \"Assume no undocumented automatic coercions\".\n    2.  The software is expected to define $S(a,b)$ on $\\mathcal{A}_{\\mathrm{aa}} \\times \\mathcal{A}_{\\mathrm{aa}}$.\n    3.  The software is expected to compute valid statistical parameters for the evaluation stage.\n\n### Step 2: Validate Using Extracted Givens\nThe problem describes a specific, technically plausible scenario involving the use of the BLAST software. The question asks for the operational consequence of providing mismatched input—a nucleotide matrix for a protein search. This query is grounded in the real-world application and theoretical underpinnings of computational biology algorithms.\n\n- **Scientifically Grounded**: The problem correctly describes the `blastp` program, its three-stage architecture (seed-extend-evaluate), the role of the substitution matrix $S(a,b)$, the alphabets for proteins ($\\mathcal{A}_{\\mathrm{aa}}$) and nucleotides ($\\mathcal{A}_{\\mathrm{nt}}$), and the statistical basis in Karlin–Altschul theory. These are all established facts in bioinformatics.\n- **Well-Posed**: The problem is clearly stated and asks for a prediction of a program's behavior based on its known architecture and constraints. It provides sufficient information to deduce a logical outcome.\n- **Objective**: The problem is free of subjective language and presents a purely technical question.\n\n### Step 3: Verdict and Action\nThe problem statement is valid. It is a well-formulated question about the behavior of a standard bioinformatics algorithm under erroneous but well-defined conditions. We shall proceed to a full analysis.\n\n### Solution Derivation\n\nThe core of the problem is a fundamental type mismatch. The `blastp` program is designed to operate on protein sequences, which are strings over the amino acid alphabet $\\mathcal{A}_{\\mathrm{aa}}$ of size $20$. All its core operations are predicated on the existence of a scoring matrix $S(a,b)$ defined for all pairs $(a,b) \\in \\mathcal{A}_{\\mathrm{aa}} \\times \\mathcal{A}_{\\mathrm{aa}}$, meaning a $20 \\times 20$ matrix. The user provides a nucleotide matrix, such as `NUC.4.4`, which is a $4 \\times 4$ matrix defined over the alphabet $\\mathcal{A}_{\\mathrm{nt}}$. While some letters are shared between the typical representations of these alphabets (e.g., 'A' for Alanine and Adenine, 'C' for Cysteine and Cytosine, etc.), this is a superficial ambiguity. Fundamentally, the provided matrix is specified for only $4$ of the $20$ entities `blastp` expects to handle.\n\nA robust and correctly implemented scientific program must validate its inputs before initiating computation. Let us analyze the consequences of this mismatch for each stage of the BLAST algorithm, assuming the program did not halt at initialization.\n\n1.  **Initialization and Parameterization**: Before the search begins, BLAST must be configured. This includes loading the substitution matrix $S(a,b)$ and determining the statistical parameters $\\lambda$ and $K$.\n    -   **Matrix Loading**: The program expects a $20 \\times 20$ matrix. When it reads the user-provided file for `NUC.4.4`, it will find a $4 \\times 4$ matrix. This dimensionality mismatch is a critical failure condition. The matrix $S(a,b)$ is simply not defined for pairs like (Leucine, Proline) or any pair involving the $16$ amino acids not in the set $\\{A, C, G, T\\}$. The requirement that the software \"must be able to define $S(a,b)$ on $\\mathcal{A}_{\\mathrm{aa}} \\times \\mathcal{A}_{\\mathrm{aa}}$\" is impossible to satisfy with the given input.\n    -   **Statistical Parameters**: The calculation of $\\lambda$ and $K$ requires solving an equation involving the expected score $E = \\sum_{i \\in \\mathcal{A}_{\\mathrm{aa}}} \\sum_{j \\in \\mathcal{A}_{\\mathrm{aa}}} p_i p_j S(i,j)$, where $p_i$ is the background frequency of amino acid $i$. Since $S(i,j)$ is undefined for most pairs, this sum cannot be computed. The prerequisite of a negative expected score cannot be verified. Therefore, valid statistical parameters cannot be computed.\n\n2.  **Seed Stage**: This stage identifies short, high-scoring word pairs (seeds). To do this, for each $w$-letter word in the query, BLAST generates a \"neighborhood\" of words that score above a threshold $T$ when aligned with the query word. This scoring is performed using $S(a,b)$. If a query word contains any amino acid other than Alanine, Cysteine, Glycine, or Threonine (the amino acids sharing single-letter codes with nucleotides), its score against any other word cannot be computed. The seeding mechanism would be inoperable for the vast majority of a typical protein sequence.\n\n3.  **Extend Stage**: This stage extends seeds to generate HSPs. The score of the alignment is the sum of substitution scores from $S(a,b)$. If an alignment contains a pair of residues for which $S(a,b)$ is not defined, the extension cannot proceed.\n\n4.  **Evaluate Stage**: This stage is contingent on the successful generation of HSPs and the pre-computation of $\\lambda$ and $K$. As both of these preceding requirements fail, this stage is unreachable.\n\nThe only logical conclusion is that a properly designed program would detect this fundamental incompatibility at the very beginning—during the initialization and validation phase—and terminate with an error. It cannot proceed to any of the search stages.\n\n### Option-by-Option Analysis\n\n**A. blastp completes normally by internally expanding the $4 \\times 4$ matrix to a $20 \\times 20$ matrix by assigning zero scores to all undefined amino acid pairs, which inflates the number of high-scoring segment pairs and yields deflated $E$-values.**\n\nThis proposal is illogical and contradicts the problem constraints. Assigning a score of $0$ is an arbitrary choice, not a \"neutral\" one. This action would constitute an \"undocumented automatic coercion,\" which the problem statement forbids us from assuming. Furthermore, a matrix populated heavily with zeros would likely violate the Karlin-Altschul condition of a negative expected score, invalidating any statistical evaluation. The claim of \"deflated E-values\" is unsubstantiated speculation. This option describes reckless program behavior, not a valid operational consequence. **Incorrect**.\n\n**B. blastp runs, but the seed stage only admits words composed of residues in $\\{A,C,G,T\\}$, so sensitivity drops; nevertheless, extension and evaluation proceed, and some true homologs are still found.**\n\nThis describes a crippled execution that is inconsistent with the design of BLAST. The algorithm is designed to process entire sequences. It would not selectively ignore parts of the query and database it cannot score. Upon encountering the first pair of amino acids for which the score is undefined—which would happen almost immediately for any typical protein—the program would face a fatal execution error. The notion that extension and evaluation could \"proceed\" is false, as the necessary components (a complete scoring matrix and statistical parameters) are absent. **Incorrect**.\n\n**C. blastp rejects the matrix at initialization because the substitution matrix alphabet and dimensionality ($4 \\times 4$ versus $20 \\times 20$) are incompatible with $\\mathcal{A}_{\\mathrm{aa}}$; as a result, neighbor word generation, extension scoring, and Karlin–Altschul parameters cannot be defined, and the run terminates with an error and no alignments.**\n\nThis outcome is the only one consistent with sound software engineering principles and the theoretical requirements of the BLAST algorithm. A program must validate its inputs. The provided matrix is fundamentally incompatible with the requirements of `blastp`. This incompatibility of dimensionality and alphabet makes it impossible to define the scoring function for protein alignments, which in turn prevents the calculation of statistical parameters, the generation of seed neighborhoods, and the scoring of extensions. The only correct and safe action for the program is to report the error and terminate at initialization. **Correct**.\n\n**D. blastp silently falls back to the default protein matrix (for example, BLOSUM62) and proceeds, possibly issuing a warning, so results are essentially unchanged relative to a standard run.**\n\n\"Silently\" falling back to a default after the user has explicitly provided a custom input is dangerously poor design. It subverts the user's intent and can lead to profound misinterpretation of results. While a program might fall back *with a clear and prominent warning*, the most robust behavior for an invalid input of this nature is a hard failure. The option suggesting a \"silent\" fallback is particularly egregious and also constitutes a form of \"coercion.\" Therefore, this is not the expected behavior of a well-designed scientific tool. **Incorrect**.", "answer": "$$\\boxed{C}$$", "id": "2434631"}, {"introduction": "In computational biology, there is often a trade-off between speed and rigor, and the design of BLAST is a masterclass in managing this balance. BLAST achieves its remarkable speed by using a heuristic \"seeding\" strategy, which means it doesn't guarantee finding every possible alignment. This problem challenges you to directly confront this limitation by finding a pair of sequences that the exhaustive Smith-Waterman algorithm would identify as similar, but that BLAST would miss entirely due to its seeding requirements, offering a concrete lesson in the meaning of algorithmic heuristics [@problem_id:2434642].", "problem": "You are comparing two approaches to local sequence alignment: the Smith–Waterman (SW) dynamic programming algorithm and the Basic Local Alignment Search Tool (BLAST). Consider nucleotide BLAST (BLASTN) configured with the following fixed architecture and parameters for the seeding, extension, and evaluation phases: seeding requires at least one exact word match of length $k=11$ on the plus strand (single-hit seeding; no neighborhood words); extension proceeds only from such seeds; evaluation is irrelevant if seeding never occurs. Low-complexity filtering is disabled. The SW algorithm computes the optimal local alignment score by dynamic programming without any seeding heuristic. Use the affine scoring scheme: match $+1$, mismatch $-1$, gap-open $-2$, gap-extend $-1$.\n\nYour task is to identify which candidate pair consists of a query sequence and a database sequence that would be aligned by Smith–Waterman with a positive local score, but would be missed by BLAST solely because its seeding heuristic finds no exact $11$-mer shared between the two sequences.\n\nAssumptions:\n- All comparisons are on the plus strand only (no reverse-complement consideration).\n- BLAST uses exactly the fixed single-hit exact-word seeding with word size $k=11$ as stated above.\n\nChoose exactly one option.\n\nA. \n- Query $Q_A$: 5'- ACGTACGTACGTACG -3' \n- Database $D_A$: 5'- ACGTACGAACGTACG -3'\n\nB.\n- Query $Q_B$: 5'- TTGATTACAGATTCC -3'\n- Database $D_B$: 5'- AAGATTACAGATTGG -3'\n\nC.\n- Query $Q_C$: 5'- CGTACGTAGCTAGGTT -3'\n- Database $D_C$: 5'- CGTACGTAGCTAAATT -3'\n\nD.\n- Query $Q_D$: 5'- GCAAATTTCCCGGG -3'\n- Database $D_D$: 5'- GCAAATTTCCCAGG -3'\n\nWhich option satisfies the requirement that Smith–Waterman would align the pair with a positive local score, but BLAST would miss it due to the seeding heuristic?", "solution": "The task is to identify a pair of sequences, a query $Q$ and a database sequence $D$, which satisfies two distinct conditions simultaneously:\n$1$. The optimal local alignment score as computed by the Smith–Waterman (SW) algorithm is positive.\n$2$. The Basic Local Alignment Search Tool (BLAST), configured with a word size of $k=11$, fails to find an alignment because there is no exact shared substring of length $k=11$ to act as a seed.\n\nWe are given the affine scoring scheme: match score of $+1$, mismatch score of $-1$, gap-opening penalty of $-2$, and gap-extension penalty of $-1$. We will analyze each provided option against these two conditions.\n\n**Option A:**\nQuery $Q_A$: 5'-ACGTACGTACGTACG-3'\nDatabase $D_A$: 5'-ACGTACGAACGTACG-3'\n\n**Condition 2 (BLAST Seeding):**\nThe length of both sequences is $15$ nucleotides. We compare $Q_A$ and $D_A$ to find the longest common substring.\n$Q_A$: `ACGTACG` `T` `ACGTACG`\n$D_A$: `ACGTACG` `A` `ACGTACG`\nThe sequences differ only at position $8$. Any substring that includes position $8$ cannot be an exact match between the two sequences. The longest possible shared substring is one that does not span this mismatch. The longest shared substring preceding the mismatch is `ACGTACG`, which has a length of $7$. The longest shared substring following the mismatch is also `ACGTACG`, with a length of $7$.\nThus, the longest common substring for the pair $(Q_A, D_A)$ has a length of $7$. Since the required seed length is $k=11$, and $7  11$, there is no exact word match of length $11$. Consequently, the BLAST seeding heuristic will fail, and BLAST will miss this alignment. This option satisfies the second condition.\n\n**Condition 1 (Smith–Waterman Score):**\nNow we must verify if the optimal local alignment score is positive. The Smith–Waterman algorithm finds the highest-scoring local alignment. It is sufficient to demonstrate *any* local alignment with a positive score, as the optimal score must be greater than or equal to this value. Consider the simple gapless alignment over the entire length of the sequences:\n5'-ACGTACGTACGTACG-3'\n5'-ACGTACGAACGTACG-3'\nThis alignment contains $14$ matching pairs and $1$ mismatch. Using the provided scoring scheme (match $= +1$, mismatch $= -1$), the score of this alignment is $(14 \\times (+1)) + (1 \\times (-1)) = 14 - 1 = 13$.\nSince we have found a local alignment with a score of $13$, and $13 > 0$, the optimal local alignment score found by Smith–Waterman must be at least $13$, and is therefore positive. This option satisfies the first condition.\n\n**Verdict for A:** This option satisfies both conditions. **Correct**.\n\n**Option B:**\nQuery $Q_B$: 5'-TTGATTACAGATTCC-3'\nDatabase $D_B$: 5'-AAGATTACAGATTGG-3'\n\n**Condition 2 (BLAST Seeding):**\nWe search for a common substring of length $k=11$.\n$Q_B$: `TT` `GATTACAGATT` `CC`\n$D_B$: `AA` `GATTACAGATT` `GG`\nThe substring `GATTACAGATT` is present in both sequences. It has a length of $11$. This exact match serves as a valid seed for BLAST. Therefore, BLAST would not miss this alignment.\n\n**Verdict for B:** This option fails the second condition. **Incorrect**.\n\n**Option C:**\nQuery $Q_C$: 5'-CGTACGTAGCTAGGTT-3'\nDatabase $D_C$: 5'-CGTACGTAGCTAAATT-3'\n\n**Condition 2 (BLAST Seeding):**\nWe search for a common substring of length $k=11$.\n$Q_C$: `CGTACGTAGCTA` `GGTT`\n$D_C$: `CGTACGTAGCTA` `AATT`\nThe substring `CGTACGTAGCTA` is common to both sequences and has a length of $12$. Since $12 \\ge k=11$, there exists at least one shared word of length $11$ (e.g., the prefix `CGTACGTAGCT`). BLAST would find this seed and proceed with the alignment.\n\n**Verdict for C:** This option fails the second condition. **Incorrect**.\n\n**Option D:**\nQuery $Q_D$: 5'-GCAAATTTCCCGGG-3'\nDatabase $D_D$: 5'-GCAAATTTCCCAGG-3'\n\n**Condition 2 (BLAST Seeding):**\nWe search for a common substring of length $k=11$.\n$Q_D$: `GCAAATTTCCC` `GGG`\n$D_D$: `GCAAATTTCCC` `AGG`\nThe substring `GCAAATTTCCC` is common to both sequences and has a length of exactly $11$. This is a valid seed word. BLAST would initiate an alignment from this seed.\n\n**Verdict for D:** This option fails the second condition. **Incorrect**.\n\nBased on the analysis, only the pair in Option A would be assigned a positive score by Smith–Waterman but be missed by the specified BLAST configuration due to the failure of its seeding heuristic.", "answer": "$$\\boxed{A}$$", "id": "2434642"}]}