{"hands_on_practices": [{"introduction": "Moving from theoretical understanding to practical application is a crucial step in mastering any scientific concept. This first exercise challenges you to derive the optimal seed weight $W$ from first principles. You will learn to translate the biological goals of sensitivity (finding true similarities) and specificity (avoiding false alarms) into a mathematical optimization problem, revealing the fundamental trade-off at the heart of all heuristic search algorithms [@problem_id:2441114].", "problem": "Two orthologous deoxyribonucleic acid (DNA) segments of length $N$ are compared using a seed-and-extend strategy. The alphabet size is $|\\Sigma|=4$, and sites evolve independently under a time-homogeneous, symmetric substitution process so that the average per-site divergence between the two species is $d$, meaning the per-site match probability is $p=1-d$. A seed is defined by a binary pattern of span $s$ and weight $W$, where $W$ positions (the ones) must match and the remaining $s-W$ positions (the zeros) are ignored; such a seed is called a spaced seed of weight $W$. You place the seed at $t$ non-overlapping positions along the alignment, with $t$ treated as an external design parameter (for example, $t \\approx \\lfloor N/s \\rfloor$ when using stride $s$ so that placements are independent).\n\nAssume the following well-tested modeling facts:\n- Under the independence model, for a single placement in homologous sequence, the probability that a seed of weight $W$ matches exactly is $p^{W}$, because $W$ specified sites must match independently.\n- Against an unrelated background generated by an independent, uniform four-letter source, the probability that a seed of weight $W$ matches at a given placement is $4^{-W}$.\n- Over $t$ independent placements, the probability of at least one hit is $1-(1-q)^{t}$ when the per-placement success probability is $q$.\n\nYou adopt the decision rule “declare related if and only if there is at least one seed hit among the $t$ placements.” Your design objective is to distinguish the species by maximizing specificity (minimizing the false-positive probability) subject to a required sensitivity constraint: the probability of at least one hit under homology must be at least a prescribed target $\\tau \\in (0,1)$.\n\nStarting only from the modeling assumptions above, derive a closed-form expression for the optimal seed weight $W^{\\star}$ that minimizes the false-positive probability subject to the sensitivity constraint. Express $W^{\\star}$ in terms of $d$, $t$, and $\\tau$. Give your final answer as a single analytic expression. Do not round.", "solution": "The problem as stated is subjected to validation.\n\n**Step 1: Extracted Givens**\n- Two orthologous DNA segments of length $N$.\n- Alphabet size is $|\\Sigma|=4$.\n- Per-site divergence is $d$.\n- Per-site match probability is $p=1-d$.\n- A spaced seed has span $s$ and weight $W$.\n- The seed is placed at $t$ non-overlapping positions.\n- The probability that a seed of weight $W$ matches in homologous sequence is $p^{W}$.\n- The probability that a seed of weight $W$ matches in an unrelated background is $4^{-W}$.\n- The probability of at least one hit over $t$ independent placements is $1-(1-q)^{t}$, where $q$ is the per-placement success probability.\n- The decision rule is to declare sequences related if at least one seed hit occurs among the $t$ placements.\n- The objective is to minimize the false-positive probability.\n- There is a sensitivity constraint: the probability of at least one hit under homology must be at least $\\tau \\in (0,1)$.\n- The goal is to find a closed-form expression for the optimal seed weight $W^{\\star}$ in terms of $d$, $t$, and $\\tau$.\n\n**Step 2: Validation**\nThe problem is scientifically grounded, well-posed, and objective. It formalizes a standard trade-off in sequence alignment heuristic design, specifically balancing sensitivity and specificity. The modeling assumptions, such as independent sites and independent seed placements, are common and necessary simplifications in bioinformatics to make the analysis tractable. All necessary parameters and relationships ($p$, $d$, $t$, $\\tau$, and the probability formulas) are provided. The problem is not contradictory, incomplete, or ambiguous. It represents a valid optimization problem within computational biology.\n\n**Verdict**\nThe problem is deemed valid. A solution will be derived.\n\n**Derivation of the Solution**\nThe problem is to find the optimal seed weight $W^{\\star}$ that minimizes the false-positive probability while satisfying a minimum sensitivity requirement. We shall formalize these quantities based on the provided model.\n\nLet $S(W)$ be the sensitivity, which is the probability of at least one seed hit between the two homologous DNA segments. The per-placement probability of a hit is given as $q_{true} = p^W$. With $t$ independent placements, the total probability of at least one hit is:\n$$S(W) = 1 - (1 - p^W)^t$$\nThe sensitivity constraint requires that $S(W) \\ge \\tau$.\n\nLet $FP(W)$ be the false-positive probability, which is the probability of at least one seed hit when comparing unrelated sequences. The per-placement probability of a hit against a random background is given as $q_{false} = 4^{-W}$. With $t$ independent placements, the false-positive probability is:\n$$FP(W) = 1 - (1 - 4^{-W})^t$$\nThe objective is to minimize $FP(W)$.\n\nTo minimize $FP(W) = 1 - (1 - 4^{-W})^t$, we must maximize the term $(1 - 4^{-W})^t$. Since $t$ is a positive parameter, this is equivalent to maximizing the base, $1 - 4^{-W}$. Maximizing $1 - 4^{-W}$ is equivalent to minimizing $4^{-W}$. The function $f(x) = 4^{-x}$ is a decreasing function of $x$. Therefore, minimizing $4^{-W}$ is equivalent to maximizing the seed weight $W$.\n\nThe problem is thus transformed into finding the maximum possible value of $W$ that satisfies the sensitivity constraint:\n$$S(W) \\ge \\tau$$\n$$1 - (1 - p^W)^t \\ge \\tau$$\nWe proceed to solve this inequality for $W$.\n$$(1 - p^W)^t \\le 1 - \\tau$$\nSince $\\tau \\in (0,1)$ and $t$ is positive, we can take the $t$-th root of both sides without changing the inequality's direction:\n$$1 - p^W \\le (1 - \\tau)^{1/t}$$\nRearranging the terms to isolate $p^W$:\n$$p^W \\ge 1 - (1 - \\tau)^{1/t}$$\nTo solve for $W$, we take the natural logarithm of both sides. The per-site divergence $d$ is typically non-zero, so $d > 0$, which implies $p = 1-d < 1$. Consequently, $\\ln(p)$ is a negative number. When we apply the logarithm, we must be prepared to reverse the inequality upon division by $\\ln(p)$.\n$$\\ln(p^W) \\ge \\ln\\left(1 - (1 - \\tau)^{1/t}\\right)$$\n$$W \\ln(p) \\ge \\ln\\left(1 - (1 - \\tau)^{1/t}\\right)$$\nDividing by $\\ln(p)$ and reversing the inequality sign yields:\n$$W \\le \\frac{\\ln\\left(1 - (1 - \\tau)^{1/t}\\right)}{\\ln(p)}$$\nThis inequality provides an upper bound on the seed weight $W$. Since our objective is to maximize $W$, the optimal value $W^{\\star}$ is the maximum value allowed by the constraint, which is the upper bound itself.\n$$W^{\\star} = \\frac{\\ln\\left(1 - (1 - \\tau)^{1/t}\\right)}{\\ln(p)}$$\nFinally, we substitute the definition $p = 1-d$ into the expression for $W^{\\star}$:\n$$W^{\\star} = \\frac{\\ln\\left(1 - (1 - \\tau)^{1/t}\\right)}{\\ln(1-d)}$$\nThis is the closed-form expression for the optimal seed weight, treated as a continuous variable, which minimizes the false-positive probability under the specified sensitivity constraint. The numerator is negative because $1 - (1-\\tau)^{1/t} < 1$, and the denominator is negative because $1-d < 1$, so $W^{\\star}$ is positive, as expected for a weight.", "answer": "$$\\boxed{\\frac{\\ln\\left(1 - (1 - \\tau)^{1/t}\\right)}{\\ln(1-d)}}$$", "id": "2441114"}, {"introduction": "While a single well-chosen seed can be effective, performance can often be significantly improved by using a set of multiple seeds. This practice explores the concept of seed complementarity, where the goal is to design a second seed that successfully detects homologous regions missed by the first. By analyzing the probabilistic interaction between two seeds, you will uncover the key principle for maximizing joint sensitivity, which is to minimize the overlap between their required-match positions [@problem_id:2441164].", "problem": "You are designing a seed-and-extend homology search for Deoxyribonucleic Acid (DNA) using spaced seeds. A spaced seed is specified by a pattern of length (span) $S$ consisting of required-match symbols and wildcard symbols; a seed hits a window if all positions marked as required-match in its pattern match exactly. The seed weight is denoted by $W$, i.e., the number of required-match positions in the pattern.\n\nSuppose your first seed $S_{1}$ has span $S = 11$ and weight $W = 5$, with required-match positions at index set $R_{1} = \\{1, 3, 5, 8, 11\\}$ (for clarity, the pattern can be written as $\\# - \\# - \\# - - \\# - - \\#$, where $\\#$ denotes a required match and $-$ a wildcard). You plan to add a second seed $S_2$, also with span $S = 11$ and weight $W = 5$, to improve sensitivity.\n\nAssume a simple homologous alignment model in which each position within a true homologous window independently matches with probability $\\pi \\in (0, 1)$ and mismatches with probability $1 - \\pi$, and positions are independent across the window. You aim to design $S_{2}$ to be “complementary” to $S_{1}$, in the sense that it tends to find hits in homologous windows that $S_{1}$ misses because of a mismatch at one or more of its required-match positions.\n\nWhich of the following design strategies for $S_{2}$ best achieves this goal under the stated model, while keeping $S$ and $W$ unchanged?\n\nA. Place the required-match positions of $S_{2}$ entirely within the wildcard positions of $S_{1}$, i.e., choose an index set $R_{2} \\subseteq \\{1, 2, \\dots, 11\\} \\setminus R_{1}$ with $|R_{2}| = 5$, spreading them across the span as needed.\n\nB. Make $S_{2}$ identical to $S_{1}$ but shifted by $1$ position to the right within the span (wrapping as necessary), so that most required positions overlap but not perfectly.\n\nC. Increase the weight of $S_{2}$ to $W = 7$ at the same span $S = 11$ to reduce false positives, accepting fewer matches per seed.\n\nD. Use a contiguous word seed for $S_{2}$ with $W = 5$ (i.e., five consecutive required-match positions anywhere within the span), keeping the same span $S = 11$.", "solution": "The problem statement is first subjected to validation.\n\n**Step 1: Extract Givens**\n- Task: Design a second spaced seed, $S_2$, to complement a first seed, $S_1$, for DNA homology search.\n- Spaced seed definition: A pattern of span $S$ with required-match and wildcard positions. A hit occurs if all required positions match.\n- Seed weight $W$: The number of required-match positions.\n- First seed $S_1$: Span $S = 11$, weight $W = 5$, required-match positions $R_1 = \\{1, 3, 5, 8, 11\\}$.\n- Second seed $S_2$: To be designed with span $S = 11$ and weight $W = 5$.\n- Homologous model: Each position matches independently with probability $\\pi \\in (0, 1)$.\n- Goal: Design $S_2$ to be \"complementary\" to $S_1$, meaning it tends to find hits in homologous windows that $S_1$ misses.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientific Grounding**: The problem is based on the well-established bioinformatics concept of spaced seeds for sequence alignment, a core topic in computational biology. The probabilistic model is a standard simplification used for theoretical analysis.\n- **Well-Posedness**: The goal of designing a \"complementary\" seed is clearly defined within a probabilistic model, allowing for a unique optimal strategy to be determined among the given choices.\n- **Objectivity**: The problem is stated using precise, technical language, free of subjective elements.\n- **Completeness and Consistency**: The problem provides all necessary parameters ($S$, $W$, $R_1$, $\\pi$) and constraints for designing $S_2$. There are no internal contradictions.\n- **Feasibility**: The parameters are realistic for spaced seed design.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A solution will be derived.\n\n**Derivation of Principle**\n\nLet $H_1$ be the event that seed $S_1$ hits a homologous window, and $H_2$ be the event that seed $S_2$ hits the same window. The problem requires us to improve sensitivity by designing $S_2$ to be complementary to $S_1$. This is mathematically interpreted as maximizing the probability that at least one seed hits, $P(H_1 \\cup H_2)$.\n\nLet $R_1$ and $R_2$ be the sets of required-match positions for $S_1$ and $S_2$, respectively. According to the problem statement, we have $|R_1| = W = 5$ and $|R_2| = W = 5$.\nUnder the assumption of independent matches, the probability of a hit for a single seed with weight $W$ is:\n$$ P(H_1) = \\pi^{|R_1|} = \\pi^W $$\n$$ P(H_2) = \\pi^{|R_2|} = \\pi^W $$\n\nThe probability of both seeds hitting is the probability of matches at all positions in the union of their required-match sets, $R_1 \\cup R_2$:\n$$ P(H_1 \\cap H_2) = \\pi^{|R_1 \\cup R_2|} $$\nUsing the principle of inclusion-exclusion for set sizes, we have $|R_1 \\cup R_2| = |R_1| + |R_2| - |R_1 \\cap R_2| = 2W - |R_1 \\cap R_2|$.\nTherefore, $P(H_1 \\cap H_2) = \\pi^{2W - |R_1 \\cap R_2|}$.\n\nThe overall sensitivity, or the probability of at least one hit, is given by:\n$$ P(H_1 \\cup H_2) = P(H_1) + P(H_2) - P(H_1 \\cap H_2) $$\n$$ P(H_1 \\cup H_2) = \\pi^W + \\pi^W - \\pi^{2W - |R_1 \\cap R_2|} = 2\\pi^W - \\pi^{2W - |R_1 \\cap R_2|} $$\nTo maximize this sensitivity, we must maximize the function $f(x) = 2\\pi^W - \\pi^{2W - x}$, where $x = |R_1 \\cap R_2|$ is the number of overlapping required positions between the two seeds.\nSince $2\\pi^W$ is a constant with respect to the design of $S_2$, we need to maximize $-\\pi^{2W - x}$, which is equivalent to minimizing the term $\\pi^{2W - x}$.\nGiven that the base of the exponentiation is $\\pi \\in (0, 1)$, the function $y=\\pi^z$ is a strictly decreasing function of $z$. Thus, to minimize $\\pi^{2W - x}$, we must maximize its exponent, $2W - x$.\nMaximizing $2W - x$ is equivalent to minimizing $x$, which is the overlap $|R_1 \\cap R_2|$.\n\nThe optimal strategy is therefore to design $S_2$ such that the number of shared required-match positions with $S_1$ is minimized. The minimum possible overlap is $|R_1 \\cap R_2| = 0$, which occurs when the sets of required positions are disjoint, i.e., $R_1 \\cap R_2 = \\emptyset$.\n\nWe are given $R_1 = \\{1, 3, 5, 8, 11\\}$. The set of positions within the span $S=11$ is $\\{1, 2, ..., 11\\}$.\nThe positions not required by $S_1$ (wildcard positions) are $\\{1, 2, ..., 11\\} \\setminus R_1 = \\{2, 4, 6, 7, 9, 10\\}$. This set contains $6$ positions.\nTo achieve minimum overlap $|R_1 \\cap R_2| = 0$, the $5$ required positions for $S_2$ must be chosen from this set of $6$ wildcard positions. This is a feasible task.\n\n**Option-by-Option Analysis**\n\nA. **Place the required-match positions of $S_{2}$ entirely within the wildcard positions of $S_{1}$, i.e., choose an index set $R_{2} \\subseteq \\{1, 2, \\dots, 11\\} \\setminus R_{1}$ with $|R_{2}| = 5$, spreading them across the span as needed.**\nThis strategy proposes to choose $R_2$ from the set $\\{2, 4, 6, 7, 9, 10\\}$. Since we need $|R_2| = 5$, we can, for example, choose $R_2 = \\{2, 4, 6, 7, 9\\}$. With this choice, $R_1 \\cap R_2 = \\emptyset$, so the overlap $|R_1 \\cap R_2| = 0$. This achieves the theoretical minimum for overlap, thereby maximizing sensitivity according to our derivation.\nVerdict: **Correct**.\n\nB. **Make $S_{2}$ identical to $S_{1}$ but shifted by $1$ position to the right within the span (wrapping as necessary), so that most required positions overlap but not perfectly.**\nThe initial set of positions is $R_1 = \\{1, 3, 5, 8, 11\\}$. Shifting each position by $+1$ and wrapping the position $12$ back to $1$ gives the new set $R_2 = \\{2, 4, 6, 9, 1\\}$. The overlap with $R_1$ is $R_1 \\cap R_2 = \\{1\\}$. Thus, $|R_1 \\cap R_2| = 1$. Since $1 > 0$, this strategy is suboptimal compared to the strategy in option A. A non-zero overlap reduces complementarity and overall sensitivity.\nVerdict: **Incorrect**.\n\nC. **Increase the weight of $S_{2}$ to $W = 7$ at the same span $S = 11$ to reduce false positives, accepting fewer matches per seed.**\nThis strategy violates a constraint of the problem, which is to design a second seed $S_2$ keeping the weight $W$ unchanged (i.e., $W=5$). Furthermore, increasing the weight to $W=7$ would make $S_2$ less sensitive ($P(H_2) = \\pi^7 < \\pi^5 = P(H_1)$), which contradicts the goal of improving overall sensitivity by capturing hits missed by $S_1$.\nVerdict: **Incorrect**.\n\nD. **Use a contiguous word seed for $S_{2}$ with $W = 5$ (i.e., five consecutive required-match positions anywhere within the span), keeping the same span $S = 11$.**\nA contiguous seed would have required positions like $R_2 = \\{i, i+1, i+2, i+3, i+4\\}$ for some starting position $i$. We must check if any such seed can achieve zero overlap. The wildcard regions of $S_1$ are at indices $\\{2\\}$, $\\{4\\}$, $\\{6, 7\\}$, and $\\{9, 10\\}$. The largest contiguous block of wildcards has length $2$. It is impossible to place $5$ consecutive required-match positions without overlapping with at least one position from $R_1 = \\{1, 3, 5, 8, 11\\}$. For example, placing the contiguous seed at positions $R_2 = \\{6, 7, 8, 9, 10\\}$ results in an overlap of $|R_1 \\cap R_2| = |\\{8\\}| = 1$. This is the minimum achievable overlap for a contiguous seed in this case. Since an overlap of $1$ is greater than the achievable overlap of $0$ from option A, this strategy is suboptimal.\nVerdict: **Incorrect**.", "answer": "$$\\boxed{A}$$", "id": "2441164"}, {"introduction": "An elegant algorithm is only useful if it can be implemented with available computational resources. This final practice provides a crucial reality check by asking you to calculate the memory footprint of a spaced seed index for the entire human genome. By connecting abstract parameters like seed weight and genome length to a concrete memory requirement in gigabytes, you will gain essential skills in resource estimation—a vital part of designing and deploying bioinformatics tools at scale [@problem_id:2441116].", "problem": "You are building an index for spaced seeds over the haploid human reference genome to support seed-and-extend alignment. A spaced seed is defined by a binary mask of span $S$ and weight $W$, where the mask selects $W$ informative positions within a window of $S$ nucleotides. For this problem, the mask has weight $W=12$ and span $S=18$. The index to be built is a direct-address hash index with the following specification:\n\n- The haploid human genome length is $L=3.2\\times 10^{9}$ bases. Assume there are no ambiguous nucleotides ($N$) anywhere in the genome.\n- For each genomic offset $t$ from $1$ to $L-S+1$, extract the spaced seed defined by the mask at the window $[t, t+S-1]$. Consider only the forward strand.\n- Each spaced seed is encoded by $2W$ bits (two bits per nucleotide), yielding $4^{W}$ possible keys in total.\n- The index consists of two arrays:\n  1. A primary direct-address array of length $4^{W}$, keyed by the $2W$-bit code of the seed. For each key, store two unsigned $32$-bit integers: the starting offset and the count of positions for that key in the positions array. No other metadata is stored.\n  2. A positions array containing one unsigned $32$-bit integer per valid window, storing the genomic start coordinate $t$ of each spaced-seed occurrence. Entries are laid out by grouping all positions for the same key contiguously (in arbitrary key order).\n- Ignore any memory overhead from the operating system or memory allocator; compute only the raw byte sizes of these arrays.\n- Use the decimal definition of Gigabyte (Gigabyte (GB) $=10^{9}$ bytes).\n\nUnder these assumptions, what is the total memory required to store the complete index, expressed in Gigabytes? Round your answer to three significant figures.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- Spaced seed mask span: $S=18$\n- Spaced seed mask weight: $W=12$\n- Haploid human genome length: $L=3.2 \\times 10^{9}$ bases\n- Nucleotide encoding: $2$ bits per nucleotide\n- Seed key encoding: $2W$ bits\n- Total possible keys: $4^{W}$\n- Index structure:\n    1. Primary direct-address array:\n        - Length: $4^{W}$\n        - Entry content: two unsigned $32$-bit integers\n    2. Positions array:\n        - Content: one unsigned $32$-bit integer per valid window\n        - Valid windows: for genomic offsets $t$ from $1$ to $L-S+1$\n- Data types: unsigned $32$-bit integers\n- Memory overhead (OS, allocator): ignore\n- Unit definition: $1$ Gigabyte (GB) $= 10^9$ bytes\n- Output requirement: Total memory in GB, rounded to three significant figures.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is evaluated against the specified criteria.\n- **Scientifically Grounded**: The problem describes the construction of a spaced seed index, a fundamental and widely used data structure in bioinformatics for sequence alignment. The parameters given ($L, S, W$) are realistic for indexing a human genome. The concept is sound.\n- **Well-Posed**: The problem is clearly specified. All necessary parameters and definitions are provided to calculate the sizes of the two arrays comprising the index. A unique numerical solution exists.\n- **Objective**: The language is precise and quantitative. There are no subjective or ambiguous statements.\n- **Completeness and Consistency**: The problem is self-contained. The data types (unsigned $32$-bit integer) are sufficient to store the required information; a $32$-bit integer can hold values up to $2^{32}-1 \\approx 4.29 \\times 10^9$, which is greater than the maximum genomic offset $L-S+1 \\approx 3.2 \\times 10^9$. The constraints are consistent.\n\n**Step 3: Verdict and Action**\nThe problem is valid. It is scientifically sound, well-posed, and complete. A solution will be derived.\n\nThe total memory requirement, denoted by $M_{\\text{total}}$, is the sum of the memory required for the primary direct-address array, $M_{\\text{primary}}$, and the memory required for the positions array, $M_{\\text{pos}}$.\n$$M_{\\text{total}} = M_{\\text{primary}} + M_{\\text{pos}}$$\n\nFirst, we calculate the size of the primary direct-address array, $M_{\\text{primary}}$.\nThis array is indexed by all possible spaced seed keys. The number of possible keys, $N_{\\text{keys}}$, is determined by the seed weight $W$. With an alphabet of $4$ nucleotides and a weight of $W$, the number of distinct keys is:\n$$N_{\\text{keys}} = 4^{W}$$\nGiven $W=12$:\n$$N_{\\text{keys}} = 4^{12} = (2^2)^{12} = 2^{24} = 16,777,216$$\nEach entry in this array consists of two unsigned $32$-bit integers. An unsigned $32$-bit integer occupies $32$ bits, which is $\\frac{32}{8} = 4$ bytes. Therefore, the size of each entry is $2 \\times 4 = 8$ bytes.\nThe total size of the primary array is the number of entries multiplied by the size of each entry:\n$$M_{\\text{primary}} = N_{\\text{keys}} \\times (\\text{size of one entry})$$\n$$M_{\\text{primary}} = 16,777,216 \\times 8 \\text{ bytes} = 134,217,728 \\text{ bytes}$$\n\nNext, we calculate the size of the positions array, $M_{\\text{pos}}$.\nThis array stores one entry for each valid window in the genome. The number of valid windows, $N_{\\text{windows}}$, corresponds to the number of possible starting positions $t$ for a seed of span $S$ within a genome of length $L$. The starting positions range from $t=1$ to $t=L-S+1$.\n$$N_{\\text{windows}} = (L-S+1) - 1 + 1 = L-S+1$$\nSubstituting the given values $L=3.2 \\times 10^9$ and $S=18$:\n$$N_{\\text{windows}} = 3.2 \\times 10^9 - 18 + 1 = 3.2 \\times 10^9 - 17$$\n$$N_{\\text{windows}} = 3,200,000,000 - 17 = 3,199,999,983$$\nEach entry in the positions array is a single unsigned $32$-bit integer, which is $4$ bytes.\nThe total size of the positions array is the number of windows multiplied by the size of each entry:\n$$M_{\\text{pos}} = N_{\\text{windows}} \\times (\\text{size of one entry})$$\n$$M_{\\text{pos}} = (3.2 \\times 10^9 - 17) \\times 4 \\text{ bytes}$$\n$$M_{\\text{pos}} = 3,199,999,983 \\times 4 \\text{ bytes} = 12,799,999,932 \\text{ bytes}$$\n\nNow, we compute the total memory requirement by summing the sizes of the two arrays:\n$$M_{\\text{total}} = M_{\\text{primary}} + M_{\\text{pos}}$$\n$$M_{\\text{total}} = 134,217,728 \\text{ bytes} + 12,799,999,932 \\text{ bytes}$$\n$$M_{\\text{total}} = 12,934,217,660 \\text{ bytes}$$\n\nThe problem requires the answer in Gigabytes (GB), using the definition $1 \\text{ GB} = 10^9 \\text{ bytes}$.\n$$M_{\\text{total}} (\\text{in GB}) = \\frac{12,934,217,660}{10^9} = 12.934217660 \\text{ GB}$$\n\nFinally, we round the result to three significant figures. The number is $12.9342...$. The first three significant digits are $1$, $2$, and $9$. The fourth significant digit is $3$, which is less than $5$, so we round down.\n$$M_{\\text{total}} (\\text{in GB}) \\approx 12.9$$", "answer": "$$\\boxed{12.9}$$", "id": "2441116"}]}