{"hands_on_practices": [{"introduction": "The Codon Adaptation Index ($CAI$) is a widely used metric to estimate a gene's potential expression level based on its codon usage. This practical exercise [@problem_id:2381997] will solidify your understanding of the $CAI$ formula by challenging you to determine the theoretical range of possible scores for a sequence containing ambiguous nucleotides. By finding the minimum and maximum $CAI$, you will gain a hands-on appreciation for how individual codon choices collectively determine a gene's adaptation to the host's translational machinery.", "problem": "A genomic fragment in a fixed reading frame is analyzed for codon usage bias using the Codon Adaptation Index (CAI). By definition, for a coding sequence of length $L$ codons in a fixed reading frame, the CAI is the geometric mean of the relative adaptiveness weights $w_{c}$ of its codons:\n$$\\mathrm{CAI}=\\left(\\prod_{i=1}^{L} w_{c_i}\\right)^{1/L}.$$\nEach $w_{c}$ is a dimensionless relative adaptiveness weight in the interval $(0,1]$ defined with respect to a fixed reference set. Consider the DNA sequence (frame starting at the first base):\nATGGCNCGNTTNCCN\nwhere the ambiguous character $\\mathrm{N}$ denotes any nucleotide in $\\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$, independently at each position. The reading frame partitions this sequence into $L=5$ codons: $\\mathrm{ATG}$, $\\mathrm{GCN}$, $\\mathrm{CGN}$, $\\mathrm{TTN}$, $\\mathrm{CCN}$. By construction, none of the possible codons generated by these ambiguous positions is a stop codon in this frame.\n\nThe relative adaptiveness weights $w_{c}$ for all codons that can appear in this frame are given by:\n- $w(\\mathrm{ATG})=1$.\n- For $\\mathrm{GCN}$: $w(\\mathrm{GCA})=0.2$, $w(\\mathrm{GCC})=1$, $w(\\mathrm{GCG})=0.7$, $w(\\mathrm{GCT})=0.4$.\n- For $\\mathrm{CGN}$: $w(\\mathrm{CGA})=0.1$, $w(\\mathrm{CGC})=1$, $w(\\mathrm{CGG})=0.8$, $w(\\mathrm{CGT})=0.6$.\n- For $\\mathrm{TTN}$: $w(\\mathrm{TTA})=0.05$, $w(\\mathrm{TTC})=1$, $w(\\mathrm{TTG})=0.1$, $w(\\mathrm{TTT})=0.5$.\n- For $\\mathrm{CCN}$: $w(\\mathrm{CCA})=0.3$, $w(\\mathrm{CCC})=1$, $w(\\mathrm{CCG})=0.9$, $w(\\mathrm{CCT})=0.6$.\n\nOver all possible assignments of $\\mathrm{N}$ to nucleotides that respect the fixed reading frame, determine the minimum and maximum possible CAI values for this sequence. Report your answers as the ordered pair (minimum, maximum). Round your answers to four significant figures. The CAI is dimensionless; do not include units.", "solution": "The problem posed is well-defined and grounded in the principles of computational biology. We shall proceed with its solution directly.\n\nThe Codon Adaptation Index (CAI) for a coding sequence of length $L$ codons is defined as the geometric mean of the relative adaptiveness weights $w_{c_i}$ of its constituent codons:\n$$ \\mathrm{CAI} = \\left(\\prod_{i=1}^{L} w_{c_i}\\right)^{1/L} $$\nThe given DNA sequence is $\\mathrm{ATGGCNCGNTTNCCN}$. With the reading frame starting at the first base, the sequence is partitioned into $L=5$ codons:\n$c_1 = \\mathrm{ATG}$, $c_2 = \\mathrm{GCN}$, $c_3 = \\mathrm{CGN}$, $c_4 = \\mathrm{TTN}$, $c_5 = \\mathrm{CCN}$.\n\nThe weight of the first codon is given as $w(\\mathrm{ATG})=1$. This is a constant factor. The subsequent codons contain the ambiguous nucleotide $\\mathrm{N}$, which can be any of $\\mathrm{A}$, $\\mathrm{C}$, $\\mathrm{G}$, or $\\mathrm{T}$. The choices for $\\mathrm{N}$ at each ambiguous position are independent.\nThe expression for the CAI is therefore:\n$$ \\mathrm{CAI} = \\left( w(\\mathrm{ATG}) \\cdot w(\\mathrm{GCN}) \\cdot w(\\mathrm{CGN}) \\cdot w(\\mathrm{TTN}) \\cdot w(\\mathrm{CCN}) \\right)^{1/5} $$\n$$ \\mathrm{CAI} = \\left( 1 \\cdot w(\\mathrm{GCN}) \\cdot w(\\mathrm{CGN}) \\cdot w(\\mathrm{TTN}) \\cdot w(\\mathrm{CCN}) \\right)^{1/5} $$\nThe function $f(x) = x^{1/5}$ is a strictly increasing function for positive arguments $x$. Since all given weights $w_c$ are in the interval $(0, 1]$, their product will also be a positive number. Consequently, to find the minimum and maximum possible values of the CAI, we must find the minimum and maximum of the product of the weights $\\prod_{i=1}^{5} w_{c_i}$.\nDue to the independence of the nucleotide choice for each `N`, the total product is maximized by choosing the sequence of codons that maximizes each individual weight, and minimized by choosing the sequence that minimizes each individual weight.\n\nFirst, let us determine the maximum possible CAI. This requires us to select the nucleotide for each `N` such that the corresponding codon weight is maximal. We examine the weights provided for each ambiguous codon family:\n- For $c_2 = \\mathrm{GCN}$: The available weights are $w(\\mathrm{GCA})=0.2$, $w(\\mathrm{GCC})=1$, $w(\\mathrm{GCG})=0.7$, and $w(\\mathrm{GCT})=0.4$. The maximum weight is $w_{\\max}(\\mathrm{GCN}) = 1$.\n- For $c_3 = \\mathrm{CGN}$: The available weights are $w(\\mathrm{CGA})=0.1$, $w(\\mathrm{CGC})=1$, $w(\\mathrm{CGG})=0.8$, and $w(\\mathrm{CGT})=0.6$. The maximum weight is $w_{\\max}(\\mathrm{CGN}) = 1$.\n- For $c_4 = \\mathrm{TTN}$: The available weights are $w(\\mathrm{TTA})=0.05$, $w(\\mathrm{TTC})=1$, $w(\\mathrm{TTG})=0.1$, and $w(\\mathrm{TTT})=0.5$. The maximum weight is $w_{\\max}(\\mathrm{TTN}) = 1$.\n- For $c_5 = \\mathrm{CCN}$: The available weights are $w(\\mathrm{CCA})=0.3$, $w(\\mathrm{CCC})=1$, $w(\\mathrm{CCG})=0.9$, and $w(\\mathrm{CCT})=0.6$. The maximum weight is $w_{\\max}(\\mathrm{CCN}) = 1$.\n\nThe product of the maximum possible weights is:\n$$ P_{\\max} = w(\\mathrm{ATG}) \\cdot w_{\\max}(\\mathrm{GCN}) \\cdot w_{\\max}(\\mathrm{CGN}) \\cdot w_{\\max}(\\mathrm{TTN}) \\cdot w_{\\max}(\\mathrm{CCN}) $$\n$$ P_{\\max} = 1 \\cdot 1 \\cdot 1 \\cdot 1 \\cdot 1 = 1 $$\nThe maximum CAI is the fifth root of this product:\n$$ \\mathrm{CAI}_{\\max} = (1)^{1/5} = 1 $$\nAs the problem requires rounding to four significant figures, the maximum value is $1.000$.\n\nNext, we determine the minimum possible CAI. This requires selecting the nucleotide for each `N` that results in the minimum codon weight.\n- For $c_2 = \\mathrm{GCN}$: The minimum weight is $w_{\\min}(\\mathrm{GCN}) = \\min\\{0.2, 1, 0.7, 0.4\\} = 0.2$.\n- For $c_3 = \\mathrm{CGN}$: The minimum weight is $w_{\\min}(\\mathrm{CGN}) = \\min\\{0.1, 1, 0.8, 0.6\\} = 0.1$.\n- For $c_4 = \\mathrm{TTN}$: The minimum weight is $w_{\\min}(\\mathrm{TTN}) = \\min\\{0.05, 1, 0.1, 0.5\\} = 0.05$.\n- For $c_5 = \\mathrm{CCN}$: The minimum weight is $w_{\\min}(\\mathrm{CCN}) = \\min\\{0.3, 1, 0.9, 0.6\\} = 0.3$.\n\nThe product of the minimum possible weights is:\n$$ P_{\\min} = w(\\mathrm{ATG}) \\cdot w_{\\min}(\\mathrm{GCN}) \\cdot w_{\\min}(\\mathrm{CGN}) \\cdot w_{\\min}(\\mathrm{TTN}) \\cdot w_{\\min}(\\mathrm{CCN}) $$\n$$ P_{\\min} = 1 \\cdot 0.2 \\cdot 0.1 \\cdot 0.05 \\cdot 0.3 $$\n$$ P_{\\min} = 0.02 \\cdot 0.05 \\cdot 0.3 = 0.001 \\cdot 0.3 = 0.0003 $$\nThe minimum CAI is the fifth root of this product:\n$$ \\mathrm{CAI}_{\\min} = (0.0003)^{1/5} $$\nTo find the numerical value, we compute:\n$$ \\mathrm{CAI}_{\\min} = (3 \\times 10^{-4})^{1/5} \\approx 0.19743286 $$\nRounding to four significant figures, the minimum value is $0.1974$.\n\nThe problem asks for the ordered pair of (minimum, maximum) CAI values. This pair is $(0.1974, 1.000)$.", "answer": "$$\n\\boxed{\\begin{pmatrix} 0.1974 & 1.000 \\end{pmatrix}}\n$$", "id": "2381997"}, {"introduction": "Beyond specific metrics like $CAI$, we can use concepts from information theory to quantify codon usage bias. This exercise [@problem_id:2382006] introduces Shannon entropy as a powerful tool to measure the uniformity of codon usage, where lower entropy corresponds to higher bias. You will calculate the difference in entropy between a gene-specific codon distribution and a genome-wide background, a key technique for identifying potentially highly expressed genes which often exhibit strong codon preferences.", "problem": "You are given a formal comparison task involving codon usage bias for gene prediction. Let $\\mathcal{A}$ be the set of all sense codons in the Standard Genetic Code, defined as all strings of length 3 over the alphabet $\\{ \\text{A}, \\text{C}, \\text{G}, \\text{T} \\}$ except the three stop codons $\\{\\text{TAA}, \\text{TAG}, \\text{TGA}\\}$. Thus $|\\mathcal{A}| = 61$. Given a coding sequence $S$ over $\\{ \\text{A}, \\text{C}, \\text{G}, \\text{T} \\}$ of length divisible by $3$, define its codon composition by parsing $S$ into consecutive, non-overlapping triplets from the first position (reading frame starts at the first nucleotide), counting only codons in $\\mathcal{A}$. For each codon $i \\in \\mathcal{A}$ with count $c_i \\ge 0$, define the empirical codon probability $p_i = c_i / \\sum_{j \\in \\mathcal{A}} c_j$. For any probability distribution $R = (r_i)_{i \\in \\mathcal{A}}$ on $\\mathcal{A}$, define the Shannon entropy in bits by\n$$\nH(R) = - \\sum_{i \\in \\mathcal{A}} r_i \\log_2 r_i,\n$$\nwith the convention that $0 \\log_2 0 = 0$.\n\nYour task is to compute, for each of the following test cases, the entropy $H(P)$ of the codon distribution $P$ derived from a single highly expressed gene (its coding sequence is specified below), the entropy $H(Q)$ of a specified genome-wide codon distribution $Q$ on the same alphabet $\\mathcal{A}$, and the difference\n$$\nD = H(Q) - H(P).\n$$\nAll entropies must be computed in bits (base-$2$ logarithm).\n\nTest suite (three cases):\n\n- Case $1$ (guanine-cytosine (GC)-biased gene and GC-biased genome):\n  - Gene sequence $S_1$: form the sequence by concatenating, in lexicographic order, all codons in $\\mathcal{A}$ whose third nucleotide is either $\\text{C}$ or $\\text{G}$, and then repeating that block exactly twice (no separators). This yields a sequence of $62$ codons.\n  - Genome-wide distribution $Q_1$: for each codon $i \\in \\mathcal{A}$, assign weight $w_i = 2$ if the third nucleotide of $i$ is in $\\{\\text{C}, \\text{G}\\}$ and $w_i = 1$ otherwise; then set $q_i = w_i / \\sum_{j \\in \\mathcal{A}} w_j$.\n\n- Case $2$ (extremely biased gene and uniform genome):\n  - Gene sequence $S_2$: the codon $\\text{GCT}$ repeated $120$ times, yielding $120$ codons.\n  - Genome-wide distribution $Q_2$: uniform on $\\mathcal{A}$, that is, $q_i = 1/61$ for all $i \\in \\mathcal{A}$.\n\n- Case $3$ (uniform gene and strongly skewed genome):\n  - Gene sequence $S_3$: concatenate, in lexicographic order, each codon in $\\mathcal{A}$ exactly once, yielding $61$ codons.\n  - Genome-wide distribution $Q_3$: assign probability $q_{\\text{GCT}} = 1/2$, and distribute the remaining mass equally across the other $60$ codons, that is, for $i \\ne \\text{GCT}$, set $q_i = \\frac{1/2}{60}$.\n\nFor each case, compute $D = H(Q) - H(P)$. All logarithms must be base $2$, and results must be expressed in bits. The final program output must be a single line containing a list of the three $D$ values in the order of Cases $1$–$3$, each rounded to exactly six digits after the decimal point.\n\nFinal output format requirement:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[result1,result2,result3]\"), where each result is a float formatted with exactly six digits after the decimal point.", "solution": "The problem requires the calculation of the difference in Shannon entropy, $D = H(Q) - H(P)$, between a genome-wide codon frequency distribution, $Q$, and a gene-specific codon frequency distribution, $P$. This quantity is a fundamental concept in bioinformatics for analyzing codon usage bias. A high entropy value signifies a uniform, or unbiased, usage of codons, whereas a low entropy value indicates a skewed distribution, where certain codons are strongly preferred. A positive value for $D$ suggests that the gene's codon usage ($P$) is more biased (has lower entropy) than the genomic average ($Q$), a common feature of highly expressed genes.\n\nThe Shannon entropy of a discrete probability distribution $R = (r_i)_{i \\in \\mathcal{A}}$ is given in bits by the formula:\n$$\nH(R) = - \\sum_{i \\in \\mathcal{A}} r_i \\log_2 r_i\n$$\nwhere the summation is over all $61$ sense codons in the set $\\mathcal{A}$. By convention, $0 \\log_2 0 = 0$.\n\nWe will now solve each of the three test cases methodically.\n\nFirst, we establish the set of sense codons, $\\mathcal{A}$. The genetic code consists of $4^3 = 64$ possible codons. The three stop codons are $\\text{TAA}$, $\\text{TAG}$, and $\\text{TGA}$. Therefore, the set $\\mathcal{A}$ of sense codons has $|\\mathcal{A}| = 61$ members.\n\n**Case 1: GC-biased gene and GC-biased genome**\n\n-   **Gene Distribution $P_1$**:\n    The gene sequence $S_1$ is constructed from codons in $\\mathcal{A}$ whose third nucleotide is 'C' or 'G'. Let this subset of codons be $\\mathcal{A}_{GC3}$. There are $4 \\times 4 = 16$ possible codons ending in 'C' and $16$ ending in 'G'. None of the three stop codons end in 'C'. One stop codon, $\\text{TAG}$, is in the set of codons ending in 'G'. Thus, there are $16$ sense codons ending in 'C' and $16 - 1 = 15$ sense codons ending in 'G'. The total size of $\\mathcal{A}_{GC3}$ is $|\\mathcal{A}_{GC3}| = 16 + 15 = 31$.\n    The sequence $S_1$ is formed by concatenating these $31$ codons, repeated twice. The total number of codons in the sequence is $N_1 = 31 \\times 2 = 62$. Each codon $i \\in \\mathcal{A}_{GC3}$ appears twice, so its empirical probability is $p_i = 2/62 = 1/31$. Codons not in $\\mathcal{A}_{GC3}$ have a probability of $0$. This constitutes a uniform distribution over the $31$ codons in $\\mathcal{A}_{GC3}$.\n    The entropy of this distribution is:\n    $$\n    H(P_1) = - \\sum_{i \\in \\mathcal{A}_{GC3}} \\frac{1}{31} \\log_2\\left(\\frac{1}{31}\\right) = -31 \\left(\\frac{1}{31} \\log_2\\left(\\frac{1}{31}\\right)\\right) = -\\log_2\\left(\\frac{1}{31}\\right) = \\log_2(31)\n    $$\n\n-   **Genome Distribution $Q_1$**:\n    For each codon $i \\in \\mathcal{A}_{GC3}$ (size $31$), the weight is $w_i = 2$. For the remaining $61 - 31 = 30$ codons, the weight is $w_i = 1$. The sum of all weights is $\\sum_{j \\in \\mathcal{A}} w_j = (31 \\times 2) + (30 \\times 1) = 62 + 30 = 92$.\n    The probabilities are $q_i = 2/92$ for $i \\in \\mathcal{A}_{GC3}$ and $q_i = 1/92$ for $i \\notin \\mathcal{A}_{GC3}$. The entropy is:\n    $$\n    H(Q_1) = - \\left( \\sum_{i \\in \\mathcal{A}_{GC3}} \\frac{2}{92} \\log_2\\left(\\frac{2}{92}\\right) + \\sum_{i \\in \\mathcal{A} \\setminus \\mathcal{A}_{GC3}} \\frac{1}{92} \\log_2\\left(\\frac{1}{92}\\right) \\right)\n    $$\n    $$\n    H(Q_1) = - \\left( 31 \\cdot \\frac{2}{92} \\log_2\\left(\\frac{2}{92}\\right) + 30 \\cdot \\frac{1}{92} \\log_2\\left(\\frac{1}{92}\\right) \\right)\n    $$\n\n-   **Difference $D_1$**: $D_1 = H(Q_1) - H(P_1)$.\n\n**Case 2: Extremely biased gene and uniform genome**\n\n-   **Gene Distribution $P_2$**:\n    The sequence $S_2$ is composed of $120$ repetitions of the codon $\\text{GCT}$. This results in a deterministic distribution where $p_{\\text{GCT}} = 120/120 = 1$, and $p_i = 0$ for all other $60$ codons. The entropy of a distribution with no uncertainty is zero.\n    $$\n    H(P_2) = - \\left( 1 \\cdot \\log_2(1) + \\sum_{i=1}^{60} 0 \\cdot \\log_2(0) \\right) = 0\n    $$\n\n-   **Genome Distribution $Q_2$**:\n    This is a uniform distribution over all $61$ sense codons, so $q_i = 1/61$ for all $i \\in \\mathcal{A}$. The entropy is maximal for a $61$-state system:\n    $$\n    H(Q_2) = - \\sum_{i \\in \\mathcal{A}} \\frac{1}{61} \\log_2\\left(\\frac{1}{61}\\right) = -61 \\left(\\frac{1}{61} \\log_2\\left(\\frac{1}{61}\\right)\\right) = \\log_2(61)\n    $$\n\n-   **Difference $D_2$**: $D_2 = H(Q_2) - H(P_2) = \\log_2(61) - 0 = \\log_2(61)$.\n\n**Case 3: Uniform gene and strongly skewed genome**\n\n-   **Gene Distribution $P_3$**:\n    The sequence $S_3$ contains each of the $61$ sense codons exactly once. This leads to a uniform distribution where $p_i = 1/61$ for all $i \\in \\mathcal{A}$. The entropy is identical to $H(Q_2)$ from the previous case.\n    $$\n    H(P_3) = \\log_2(61)\n    $$\n\n-   **Genome Distribution $Q_3$**:\n    This distribution is highly skewed: $q_{\\text{GCT}} = 1/2$, and for the other $60$ codons, $q_i = \\frac{1/2}{60} = 1/120$. The entropy is:\n    $$\n    H(Q_3) = - \\left( \\frac{1}{2} \\log_2\\left(\\frac{1}{2}\\right) + \\sum_{i \\in \\mathcal{A} \\setminus \\{\\text{GCT}\\}} \\frac{1}{120} \\log_2\\left(\\frac{1}{120}\\right) \\right)\n    $$\n    $$\n    H(Q_3) = - \\left( \\frac{1}{2}(-1) + 60 \\cdot \\frac{1}{120} \\log_2\\left(\\frac{1}{120}\\right) \\right) = \\frac{1}{2} - \\frac{1}{2} \\log_2\\left(\\frac{1}{120}\\right) = \\frac{1}{2} (1 + \\log_2(120))\n    $$\n\n-   **Difference $D_3$**: $D_3 = H(Q_3) - H(P_3) = \\frac{1}{2}(1 + \\log_2(120)) - \\log_2(61)$.\n\nThe numerical values will be computed and formatted as required.", "answer": "```python\nimport numpy as np\nfrom itertools import product\n\ndef solve():\n    \"\"\"\n    Solves the codon usage bias problem by calculating entropy differences\n    for three specified test cases.\n    \"\"\"\n\n    # --- Global Setup ---\n    # Define the set of all 64 codons and the 61 sense codons\n    NUCLEOTIDES = ['A', 'C', 'G', 'T']\n    ALL_64_CODONS = sorted([''.join(p) for p in product(NUCLEOTIDES, repeat=3)])\n    STOP_CODONS = {'TAA', 'TAG', 'TGA'}\n    SENSE_CODONS = [c for c in ALL_64_CODONS if c not in STOP_CODONS]\n    CODON_TO_IDX = {codon: i for i, codon in enumerate(SENSE_CODONS)}\n    NUM_SENSE_CODONS = len(SENSE_CODONS) # Should be 61\n\n    def calculate_entropy(probs):\n        \"\"\"\n        Calculates the Shannon entropy in bits for a given probability distribution.\n        \"\"\"\n        # Ensure probs is a numpy array for vectorized operations\n        probs = np.array(probs, dtype=np.float64)\n        # Filter out zero probabilities to handle the 0*log(0) = 0 convention\n        non_zero_probs = probs[probs > 0]\n        if non_zero_probs.size == 0:\n            return 0.0\n        return -np.sum(non_zero_probs * np.log2(non_zero_probs))\n\n    results = []\n\n    # --- Case 1: GC-biased gene and GC-biased genome ---\n    \n    # Gene Distribution P1\n    codons_gc3 = [c for c in SENSE_CODONS if c[2] in ('C', 'G')]\n    num_gc3 = len(codons_gc3) # This is 31\n    # For a uniform distribution over N states, H = log2(N)\n    H_P1 = np.log2(num_gc3)\n    \n    # Genome Distribution Q1\n    num_non_gc3 = NUM_SENSE_CODONS - num_gc3 # This is 30\n    total_weight_q1 = num_gc3 * 2.0 + num_non_gc3 * 1.0 # This is 92.0\n    \n    q1_probs = np.zeros(NUM_SENSE_CODONS, dtype=np.float64)\n    prob_gc3 = 2.0 / total_weight_q1\n    prob_non_gc3 = 1.0 / total_weight_q1\n    \n    for i, codon in enumerate(SENSE_CODONS):\n        if codon[2] in ('C','G'):\n            q1_probs[i] = prob_gc3\n        else:\n            q1_probs[i] = prob_non_gc3\n            \n    H_Q1 = calculate_entropy(q1_probs)\n    \n    D1 = H_Q1 - H_P1\n    results.append(D1)\n\n    # --- Case 2: Extremely biased gene and uniform genome ---\n\n    # Gene Distribution P2\n    # Deterministic distribution (only GCT), entropy is 0\n    H_P2 = 0.0\n\n    # Genome Distribution Q2\n    # Uniform distribution over 61 codons, entropy is log2(61)\n    H_Q2 = np.log2(NUM_SENSE_CODONS)\n    \n    D2 = H_Q2 - H_P2\n    results.append(D2)\n\n    # --- Case 3: Uniform gene and strongly skewed genome ---\n    \n    # Gene Distribution P3\n    # Uniform distribution over 61 codons, entropy is log2(61)\n    H_P3 = np.log2(NUM_SENSE_CODONS)\n\n    # Genome Distribution Q3\n    q3_probs = np.full(NUM_SENSE_CODONS, (0.5 / (NUM_SENSE_CODONS - 1)), dtype=np.float64)\n    q3_probs[CODON_TO_IDX['GCT']] = 0.5\n    H_Q3 = calculate_entropy(q3_probs)\n\n    D3 = H_Q3 - H_P3\n    results.append(D3)\n    \n    # --- Final Output Formatting ---\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2382006"}, {"introduction": "The principles of codon usage bias are not only for analyzing existing genes but are also crucial for designing new ones in synthetic biology. This practice exercise [@problem_id:2381987] puts you in the role of a synthetic biologist, tasking you with designing a DNA sequence that encodes a given protein while achieving a specific target Codon Adaptation Index ($CAI$). This optimization problem mimics the real-world challenge of tuning gene expression levels for applications in biotechnology and metabolic engineering.", "problem": "You are given a fixed target Codon Adaptation Index (CAI) value $v=0.7$. For a protein fragment represented by an amino acid sequence of length $L$, a DNA coding sequence is a concatenation of codons, one per amino acid, taken from the standard genetic code but restricted to the codons and weights enumerated below. Each codon $c$ has an associated relative adaptiveness weight $w(c)$ in the interval $(0,1]$. For a coding sequence $S=c_1c_2\\ldots c_L$, the Codon Adaptation Index is defined as the geometric mean\n$$\n\\mathrm{CAI}(S)=\\left(\\prod_{i=1}^{L} w(c_i)\\right)^{1/L}.\n$$\nYour task, for each provided amino acid sequence, is to determine a DNA coding sequence $S$ that encodes the amino acid sequence and minimizes the absolute difference $|\\mathrm{CAI}(S)-v|$. If multiple sequences attain the same minimal absolute difference, prefer a sequence with $\\mathrm{CAI}(S)\\le v$ over one with $\\mathrm{CAI}(S)>v$. If a tie remains, choose the lexicographically smallest DNA sequence under the usual alphabetical order on characters $A<C<G<T$. All weights provided below are strictly positive, and you must only use the listed codons for each amino acid.\n\nRelative adaptiveness weights $w(c)$ for codons (DNA alphabet) are specified for the amino acids that appear in the test suite:\n- Alanine ($\\mathrm{A}$): GCT ($0.35$), GCC ($1.0$), GCA ($0.25$), GCG ($0.5$).\n- Glycine ($\\mathrm{G}$): GGT ($0.3$), GGC ($1.0$), GGA ($0.2$), GGG ($0.5$).\n- Leucine ($\\mathrm{L}$): TTA ($0.2$), TTG ($0.3$), CTT ($0.25$), CTC ($0.5$), CTA ($0.1$), CTG ($1.0$).\n- Serine ($\\mathrm{S}$): TCT ($0.4$), TCC ($0.6$), TCA ($0.3$), TCG ($1.0$), AGT ($0.2$), AGC ($0.8$).\n- Threonine ($\\mathrm{T}$): ACT ($0.4$), ACC ($1.0$), ACA ($0.3$), ACG ($0.7$).\n- Lysine ($\\mathrm{K}$): AAA ($0.6$), AAG ($1.0$).\n- Isoleucine ($\\mathrm{I}$): ATT ($0.85$), ATC ($1.0$), ATA ($0.1$).\n- Arginine ($\\mathrm{R}$): CGT ($0.7$), CGC ($1.0$), CGA ($0.1$), CGG ($0.2$), AGA ($0.05$), AGG ($0.05$).\n- Methionine ($\\mathrm{M}$): ATG ($1.0$).\n- Tryptophan ($\\mathrm{W}$): TGG ($1.0$).\n\nTest suite:\n- Case $1$: amino acid sequence \"MKT\".\n- Case $2$: amino acid sequence \"GAS\".\n- Case $3$: amino acid sequence \"ILRW\".\n- Case $4$: amino acid sequence \"MWM\".\n\nFor each case, report only the CAI value of your selected optimal coding sequence, rounded to exactly $6$ digits after the decimal point as a decimal number. Use the fixed target $v=0.7$ for all cases. Your program should produce a single line of output containing the results in order for Cases $1$ through $4$, as a comma-separated list enclosed in square brackets. For example: \"[r1,r2,r3,r4]\".", "solution": "The problem statement has been analyzed and is determined to be valid. It is scientifically grounded in the principles of molecular biology, specifically codon usage bias, and is mathematically well-posed. All necessary data and constraints are provided, and no contradictions exist. We shall proceed with a formal solution.\n\nThe problem asks us to find a DNA coding sequence $S$ for a given amino acid sequence of length $L$, such that the Codon Adaptation Index, $\\mathrm{CAI}(S)$, is as close as possible to a target value $v=0.7$. The $\\mathrm{CAI}$ is defined as the geometric mean of the relative adaptiveness weights $w(c_i)$ of the constituent codons $c_i$:\n$$\n\\mathrm{CAI}(S) = \\left( \\prod_{i=1}^{L} w(c_i) \\right)^{1/L}\n$$\nThe primary objective is to minimize the absolute difference $|\\mathrm{CAI}(S) - v|$. A set of tie-breaking rules is specified for cases where multiple sequences yield the same minimal difference.\n\nThis is a combinatorial optimization problem. For an amino acid sequence $a_1 a_2 \\ldots a_L$, let the number of synonymous codons for each amino acid $a_i$ be $n_i$. The total number of possible DNA sequences that encode the given protein fragment is the product $\\prod_{i=1}^L n_i$. We must search this discrete space for an optimal solution.\n\nLet us evaluate the size of the search space for each test case to determine the feasibility of a brute-force approach.\n- Case $1$ (\"MKT\", $L=3$): The number of choices are $1$ for Methionine (M), $2$ for Lysine (K), and $4$ for Threonine (T). The total number of sequences is $1 \\times 2 \\times 4 = 8$.\n- Case $2$ (\"GAS\", $L=3$): The number of choices are $4$ for Glycine (G), $4$ for Alanine (A), and $6$ for Serine (S). The total is $4 \\times 4 \\times 6 = 96$.\n- Case $3$ (\"ILRW\", $L=4$): The choices are $3$ for Isoleucine (I), $6$ for Leucine (L), $6$ for Arginine (R), and $1$ for Tryptophan (W). The total is $3 \\times 6 \\times 6 \\times 1 = 108$.\n- Case $4$ (\"MWM\", $L=3$): The choices are $1$ for M, $1$ for W, and $1$ for M. There is only $1 \\times 1 \\times 1 = 1$ possible sequence.\n\nThe number of candidate sequences is small in all cases, making a brute-force enumeration computationally trivial and algorithmically sound. The method is as follows:\n1.  Generate all possible DNA coding sequences for the given amino acid sequence. This is done by taking the Cartesian product of the sets of available codons for each position in the amino acid sequence.\n2.  For each generated sequence $S = c_1 c_2 \\ldots c_L$, calculate its $\\mathrm{CAI}(S)$. This involves computing the product of weights $P = \\prod_{i=1}^L w(c_i)$ and then taking the $L$-th root, $\\mathrm{CAI}(S) = P^{1/L}$.\n3.  Identify the optimal sequence by applying the specified criteria in hierarchical order.\n\nThe selection criteria are:\n1.  Minimize $|\\mathrm{CAI}(S) - v|$, where $v=0.7$.\n2.  If a tie exists in criterion $1$, prefer sequences where $\\mathrm{CAI}(S) \\le v$.\n3.  If a tie still persists, choose the lexicographically smallest DNA sequence $S$.\n\nA robust method to implement this multi-level optimization is to sort all candidate solutions. For each candidate solution, represented by its DNA sequence $S$ and its calculated $\\mathrm{CAI}$ value, we can construct a composite sort key. A suitable key is the tuple:\n$$\n\\left( |\\mathrm{CAI}(S) - v|, (\\mathrm{CAI}(S) > v), S \\right)\n$$\nSorting a list of these tuples in ascending order will place the optimal solution at the very beginning. The logic is as follows:\n- The primary sorting is on $|\\mathrm{CAI}(S) - v|$, which addresses the main objective.\n- For ties in the first element, the second element, a Boolean $(\\mathrm{CAI}(S) > v)$, is used. In computation, `False` is treated as $0$ and `True` as $1$. Therefore, a solution with $\\mathrm{CAI}(S) \\le v$ (evaluating to `False`) will be ranked before a solution with $\\mathrm{CAI}(S) > v$ (evaluating to `True`), satisfying the second criterion.\n- If both of the first two elements are identical for two solutions, the third element, the sequence string $S$ itself, is used for comparison. Standard lexicographical string comparison will identify the alphabetically smallest sequence, satisfying the third criterion.\n\nThe algorithm to be implemented is therefore:\nFor each amino acid sequence:\n1.  Construct a list of all possible coding sequences and their corresponding $\\mathrm{CAI}$ values.\n2.  Sort this list using the composite key defined above.\n3.  The first element of the sorted list is the optimal solution.\n4.  Extract the $\\mathrm{CAI}$ value of this optimal solution, round it to the required precision ($6$ decimal places), and report it.\n\nThis procedure guarantees finding the unique optimal solution according to the problem's rules. For the specific case of Arginine (R) which has two codons (AGA, AGG) with the same weight $w=0.05$, the lexicographical tie-breaker on $S$ ensures a unique choice is made if they are part of otherwise identical optimal candidates.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport itertools\n\ndef solve():\n    \"\"\"\n    Validates and solves the codon adaptation index optimization problem.\n    \"\"\"\n    # The target Codon Adaptation Index (CAI) value.\n    v = 0.7\n\n    # Relative adaptiveness weights w(c) for codons, sorted lexicographically by codon.\n    codon_data = {\n        'A': sorted([('GCT', 0.35), ('GCC', 1.0), ('GCA', 0.25), ('GCG', 0.5)]),\n        'G': sorted([('GGT', 0.3), ('GGC', 1.0), ('GGA', 0.2), ('GGG', 0.5)]),\n        'L': sorted([('TTA', 0.2), ('TTG', 0.3), ('CTT', 0.25), ('CTC', 0.5), ('CTA', 0.1), ('CTG', 1.0)]),\n        'S': sorted([('TCT', 0.4), ('TCC', 0.6), ('TCA', 0.3), ('TCG', 1.0), ('AGT', 0.2), ('AGC', 0.8)]),\n        'T': sorted([('ACT', 0.4), ('ACC', 1.0), ('ACA', 0.3), ('ACG', 0.7)]),\n        'K': sorted([('AAA', 0.6), ('AAG', 1.0)]),\n        'I': sorted([('ATT', 0.85), ('ATC', 1.0), ('ATA', 0.1)]),\n        'R': sorted([('CGT', 0.7), ('CGC', 1.0), ('CGA', 0.1), ('CGG', 0.2), ('AGA', 0.05), ('AGG', 0.05)]),\n        'M': sorted([('ATG', 1.0)]),\n        'W': sorted([('TGG', 1.0)]),\n    }\n\n    # Test suite of amino acid sequences.\n    test_cases = [\n        \"MKT\",\n        \"GAS\",\n        \"ILRW\",\n        \"MWM\",\n    ]\n\n    results = []\n    for aa_seq in test_cases:\n        L = len(aa_seq)\n        \n        # Get codon options for each position in the amino acid sequence.\n        # Each option is a tuple of (codon_string, weight).\n        codon_options_per_position = [codon_data[aa] for aa in aa_seq]\n\n        # Generate all possible combinations of codon choices.\n        # itertools.product generates the Cartesian product of input iterables.\n        all_codon_combinations = itertools.product(*codon_options_per_position)\n        \n        candidate_solutions = []\n        for combo in all_codon_combinations:\n            # combo is a tuple of (codon, weight) pairs, e.g., (('ATG', 1.0), ('AAG', 1.0), ...)\n            \n            # Construct the full DNA sequence string.\n            sequence_str = \"\".join([c[0] for c in combo])\n            \n            # Extract weights for CAI calculation.\n            weights = [c[1] for c in combo]\n            \n            # Calculate the product of weights.\n            prod_weights = np.prod(weights)\n            \n            # Calculate the Codon Adaptation Index (CAI).\n            cai = prod_weights**(1.0 / L)\n            \n            candidate_solutions.append({'seq': sequence_str, 'cai': cai})\n        \n        # Sort candidates to find the optimal one based on the hierarchical criteria.\n        # The sort key is a tuple: (abs_difference, preference_for_cai<=v, lexicographical_order).\n        # Python's tuple sorting handles the priorities correctly.\n        # (cai > v) is a boolean; False < True, so cai<=v is preferred in ties.\n        optimal_solution = sorted(\n            candidate_solutions, \n            key=lambda s: (abs(s['cai'] - v), s['cai'] > v, s['seq'])\n        )[0]\n        \n        # Format the result to 6 decimal places.\n        results.append(f\"{optimal_solution['cai']:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2381987"}]}