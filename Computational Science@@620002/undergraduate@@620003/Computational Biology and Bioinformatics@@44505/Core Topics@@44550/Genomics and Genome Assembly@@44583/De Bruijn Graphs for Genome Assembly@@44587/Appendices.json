{"hands_on_practices": [{"introduction": "To master de Bruijn graphs, we must begin with their fundamental construction. This exercise challenges you to build a de Bruijn graph from a simple, highly repetitive, linear genome, carefully accounting for every k-mer. By analyzing the graph structure for different values of $k$, you will gain a concrete understanding of how vertices, edges, and edge multiplicities arise, and see firsthand how the graph's properties, such as the existence of an Eulerian path, depend on these choices [@problem_id:2384050].", "problem": "A linear genome $G$ is defined as the concatenation of $N$ copies of the $4$-nucleotide pattern $\\text{ATCG}$, i.e., $G = (\\text{ATCG})^N$, with $N \\ge 2$. Consider the de Bruijn graph (dBG) of order $k$ used in genome assembly, defined as follows: the vertex set consists of all distinct $(k-1)$-mers present as substrings of $G$, and for every occurrence of a $k$-mer $\\alpha_1 \\alpha_2 \\cdots \\alpha_k$ in $G$, a directed edge is added from the vertex corresponding to its $(k-1)$-prefix $\\alpha_1 \\cdots \\alpha_{k-1}$ to the vertex corresponding to its $(k-1)$-suffix $\\alpha_2 \\cdots \\alpha_k$. Edge multiplicities equal the number of occurrences of the corresponding $k$-mer in $G$. The genome is linear, so no wrap-around substrings are added across the ends of $G$.\n\nWhich option correctly describes the structure of the dBG for $k=4$, $k=5$, and $k=3$?\n\nA. For $k \\in \\{3,4,5\\}$, the dBG is a single directed $4$-cycle in which all vertices have equal in-degree and out-degree (an Eulerian cycle in each case).\n\nB. For $k=4$, the vertices are $\\text{ATC}$, $\\text{TCG}$, $\\text{CGA}$, $\\text{GAT}$ and each of the four edges among them occurs exactly $N$ times; for $k=5$, the vertices are $\\text{ATCG}$, $\\text{TCGA}$, $\\text{CGAT}$, $\\text{GATC}$ and each directed edge among them occurs exactly $N$ times; for $k=3$, the vertices are $\\text{AT}$, $\\text{TC}$, $\\text{CG}$, $\\text{GA}$ and each of the four edges among them occurs exactly $N$ times. Thus all three are Eulerian cycles.\n\nC. For $k=4$, the vertices are $\\text{ATC}$, $\\text{TCG}$, $\\text{CGA}$, $\\text{GAT}$ arranged in a single directed $4$-cycle with edge multiplicities: $\\text{ATC} \\to \\text{TCG}$ occurs $N$ times while $\\text{TCG} \\to \\text{CGA}$, $\\text{CGA} \\to \\text{GAT}$, and $\\text{GAT} \\to \\text{ATC}$ each occur $N-1$ times; only $\\text{ATC}$ and $\\text{TCG}$ are imbalanced by $\\pm 1$, so there is a unique Eulerian path from $\\text{ATC}$ to $\\text{TCG}$. For $k=5$, the vertices are $\\text{ATCG}$, $\\text{TCGA}$, $\\text{CGAT}$, $\\text{GATC}$ in a single directed $4$-cycle with each of the four edges occurring $N-1$ times; all vertices are balanced, so there is an Eulerian cycle. For $k=3$, the vertices are $\\text{AT}$, $\\text{TC}$, $\\text{CG}$, $\\text{GA}$ in a single directed $4$-cycle with edge multiplicities: $\\text{AT} \\to \\text{TC}$ and $\\text{TC} \\to \\text{CG}$ occur $N$ times, while $\\text{CG} \\to \\text{GA}$ and $\\text{GA} \\to \\text{AT}$ occur $N-1$ times; only $\\text{AT}$ and $\\text{CG}$ are imbalanced by $\\pm 1$, so there is a unique Eulerian path from $\\text{AT}$ to $\\text{CG}$.\n\nD. For $k=3$, repeated $\\!2$-mers cause branching: vertices $\\text{AT}$, $\\text{TC}$, $\\text{CG}$, $\\text{GA}$ have out-degree $2$; for $k=4$ and $k=5$, the dBG is a simple directed path with no cycle structure.", "solution": "The analysis will proceed by constructing the de Bruijn graph for each specified value of $k$. The genome is $G = (\\text{ATCG})^N$, a linear sequence of length $4N$. The number of $k$-mers in $G$ is $(4N - k + 1)$.\n\n**Case 1: Analysis for $k=4$**\n\nThe vertices of the dBG are the distinct $(k-1)$-mers, which are $3$-mers. The periodic nature of $G$ produces only four distinct $3$-mers: $\\text{ATC}$, $\\text{TCG}$, $\\text{CGA}$, and $\\text{GAT}$. Thus, the vertex set is $V_4 = \\{\\text{ATC}, \\text{TCG}, \\text{CGA}, \\text{GAT}\\}$.\n\nThe edges are determined by the $4$-mers in $G$. The distinct $4$-mers are $\\text{ATCG}$, $\\text{TCGA}$, $\\text{CGAT}$, and $\\text{GATC}$. These correspond to the edges:\n1.  $\\text{ATCG}$: edge from $\\text{ATC}$ to $\\text{TCG}$.\n2.  $\\text{TCGA}$: edge from $\\text{TCG}$ to $\\text{CGA}$.\n3.  $\\text{CGAT}$: edge from $\\text{CGA}$ to $\\text{GAT}$.\n4.  $\\text{GATC}$: edge from $\\text{GAT}$ to $\\text{ATC}$.\nThese four edges form a single directed $4$-cycle.\n\nWe must now calculate the multiplicity of each edge by counting the occurrences of the corresponding $4$-mer in the linear sequence $G$. A $k$-mer starting at position $i$ must satisfy $i+k-1 \\le 4N$, which for $k=4$ is $i \\le 4N-3$.\n-   Occurrences of $\\text{ATCG}$: Start at positions $1, 5, \\dots, 4(N-1)+1$. The last starting position is $4N-3$, which is valid. Thus, there are $N$ occurrences. Multiplicity of $\\text{ATC} \\to \\text{TCG}$ is $N$.\n-   Occurrences of $\\text{TCGA}$: Start at positions $2, 6, \\dots, 4(j)+2$. We require $4j+2 \\le 4N-3$, so $4j \\le 4N-5$, meaning $j \\le N-2$. So $j$ ranges from $0$ to $N-2$, giving $N-1$ occurrences. Multiplicity of $\\text{TCG} \\to \\text{CGA}$ is $N-1$.\n-   Occurrences of $\\text{CGAT}$: Start at positions $3, 7, \\dots, 4(j)+3$. We require $4j+3 \\le 4N-3$, so $4j \\le 4N-6$, meaning $j \\le N-2$. This gives $N-1$ occurrences. Multiplicity of $\\text{CGA} \\to \\text{GAT}$ is $N-1$.\n-   Occurrences of $\\text{GATC}$: Start at positions $4, 8, \\dots, 4(j)+4$. We require $4j+4 \\le 4N-3$, so $4j \\le 4N-7$, meaning $j \\le N-2$. This gives $N-1$ occurrences. Multiplicity of $\\text{GAT} \\to \\text{ATC}$ is $N-1$.\n\nVertex degrees:\n-   Vertex $\\text{ATC}$: $\\text{out-degree} = N$, $\\text{in-degree} = N-1$. Imbalance of $+1$.\n-   Vertex $\\text{TCG}$: $\\text{out-degree} = N-1$, $\\text{in-degree} = N$. Imbalance of $-1$.\n-   Vertex $\\text{CGA}$: $\\text{out-degree} = N-1$, $\\text{in-degree} = N-1$. Balanced.\n-   Vertex $\\text{GAT}$: $\\text{out-degree} = N-1$, $\\text{in-degree} = N-1$. Balanced.\n\nA graph has an Eulerian path if and only if it is connected and has at most one vertex with $\\text{out-degree} - \\text{in-degree} = 1$ and at most one vertex with $\\text{in-degree} - \\text{out-degree} = 1$. This graph satisfies these conditions, with a unique Eulerian path from $\\text{ATC}$ to $\\text{TCG}$.\n\n**Case 2: Analysis for $k=5$**\n\nThe vertices are the distinct $4$-mers: $V_5 = \\{\\text{ATCG}, \\text{TCGA}, \\text{CGAT}, \\text{GATC}\\}$.\nThe edges are determined by the $5$-mers. The distinct $5$-mers are $\\text{ATCGA}$, $\\text{TCGAT}$, $\\text{CGATC}$, and $\\text{GATCG}$. These form a directed $4$-cycle: $\\text{ATCG} \\to \\text{TCGA} \\to \\text{CGAT} \\to \\text{GATC} \\to \\text{ATCG}$.\n\nA $5$-mer starting at position $i$ must satisfy $i \\le 4N-4$.\n-   Occurrences of $\\text{ATCGA}$ (starts at $4j+1$): $4j+1 \\le 4N-4 \\Rightarrow j \\le N-2$. Total $N-1$ occurrences.\n-   Occurrences of $\\text{TCGAT}$ (starts at $4j+2$): $4j+2 \\le 4N-4 \\Rightarrow j \\le N-2$. Total $N-1$ occurrences.\n-   Occurrences of $\\text{CGATC}$ (starts at $4j+3$): $4j+3 \\le 4N-4 \\Rightarrow j \\le N-2$. Total $N-1$ occurrences.\n-   Occurrences of $\\text{GATCG}$ (starts at $4j+4$): $4j+4 \\le 4N-4 \\Rightarrow j \\le N-2$. Total $N-1$ occurrences.\n\nAll four edges in the cycle have a multiplicity of $N-1$. Therefore, for every vertex, the in-degree equals the out-degree $(N-1)$. The graph is strongly connected and every vertex is balanced. Thus, the graph contains an Eulerian cycle.\n\n**Case 3: Analysis for $k=3$**\n\nThe vertices are the distinct $2$-mers: $V_3 = \\{\\text{AT}, \\text{TC}, \\text{CG}, \\text{GA}\\}$.\nThe edges are determined by the $3$-mers: $\\text{ATC}$, $\\text{TCG}$, $\\text{CGA}$, and $\\text{GAT}$. These form a directed $4$-cycle: $\\text{AT} \\to \\text{TC} \\to \\text{CG} \\to \\text{GA} \\to \\text{AT}$.\n\nA $3$-mer starting at position $i$ must satisfy $i \\le 4N-2$.\n-   Occurrences of $\\text{ATC}$ (starts at $4j+1$): $4j+1 \\le 4N-2 \\Rightarrow j \\le N-1$. Total $N$ occurrences. Edge $\\text{AT} \\to \\text{TC}$.\n-   Occurrences of $\\text{TCG}$ (starts at $4j+2$): $4j+2 \\le 4N-2 \\Rightarrow j \\le N-1$. Total $N$ occurrences. Edge $\\text{TC} \\to \\text{CG}$.\n-   Occurrences of $\\text{CGA}$ (starts at $4j+3$): $4j+3 \\le 4N-2 \\Rightarrow j \\le N-2$. Total $N-1$ occurrences. Edge $\\text{CG} \\to \\text{GA}$.\n-   Occurrences of $\\text{GAT}$ (starts at $4j+4$): $4j+4 \\le 4N-2 \\Rightarrow j \\le N-2$. Total $N-1$ occurrences. Edge $\\text{GA} \\to \\text{AT}$.\n\nVertex degrees:\n-   Vertex $\\text{AT}$: $\\text{out-degree} = N$, $\\text{in-degree} = N-1$. Imbalance of $+1$.\n-   Vertex $\\text{TC}$: $\\text{out-degree} = N$, $\\text{in-degree} = N$. Balanced.\n-   Vertex $\\text{CG}$: $\\text{out-degree} = N-1$, $\\text{in-degree} = N$. Imbalance of $-1$.\n-   Vertex $\\text{GA}$: $\\text{out-degree} = N-1$, $\\text{in-degree} = N-1$. Balanced.\n\nThe graph has one vertex ($\\text{AT}$) with an imbalance of $+1$ and one vertex ($\\text{CG}$) with an imbalance of $-1$. Thus, there exists a unique Eulerian path from $\\text{AT}$ to $\\text{CG}$.\n\n**Evaluation of Options**\n\nA. For $k \\in \\{3,4,5\\}$, the dBG is a single directed $4$-cycle in which all vertices have equal in-degree and out-degree (an Eulerian cycle in each case).\n**Incorrect**. This statement is false for $k=3$ and $k=4$, where vertices are imbalanced due to the linear nature of the genome. Only for $k=5$ are all vertices balanced.\n\nB. For $k=4$, the vertices are $\\text{ATC}$, $\\text{TCG}$, $\\text{CGA}$, $\\text{GAT}$ and each of the four edges among them occurs exactly $N$ times; for $k=5$, the vertices are $\\text{ATCG}$, $\\text{TCGA}$, $\\text{CGAT}$, $\\text{GATC}$ and each directed edge among them occurs exactly $N$ times; for $k=3$, the vertices are $\\text{AT}$, $\\text{TC}$, $\\text{CG}$, $\\text{GA}$ and each of the four edges among them occurs exactly $N$ times. Thus all three are Eulerian cycles.\n**Incorrect**. This option states incorrect multiplicities for all three cases. For $k=4$, multiplicities are $N, N-1, N-1, N-1$. For $k=5$, multiplicities are all $N-1$. For $k=3$, multiplicities are $N, N, N-1, N-1$. The conclusion of three Eulerian cycles is therefore flawed.\n\nC. For $k=4$, the vertices are $\\text{ATC}$, $\\text{TCG}$, $\\text{CGA}$, $\\text{GAT}$ arranged in a single directed $4$-cycle with edge multiplicities: $\\text{ATC} \\to \\text{TCG}$ occurs $N$ times while $\\text{TCG} \\to \\text{CGA}$, $\\text{CGA} \\to \\text{GAT}$, and $\\text{GAT} \\to \\text{ATC}$ each occur $N-1$ times; only $\\text{ATC}$ and $\\text{TCG}$ are imbalanced by $\\pm 1$, so there is a unique Eulerian path from $\\text{ATC}$ to $\\text{TCG}$. For $k=5$, the vertices are $\\text{ATCG}$, $\\text{TCGA}$, $\\text{CGAT}$, $\\text{GATC}$ in a single directed $4$-cycle with each of the four edges occurring $N-1$ times; all vertices are balanced, so there is an Eulerian cycle. For $k=3$, the vertices are $\\text{AT}$, $\\text{TC}$, $\\text{CG}$, $\\text{GA}$ in a single directed $4$-cycle with edge multiplicities: $\\text{AT} \\to \\text{TC}$ and $\\text{TC} \\to \\text{CG}$ occur $N$ times, while $\\text{CG} \\to \\text{GA}$ and $\\text{GA} \\to \\text{AT}$ occur $N-1$ times; only $\\text{AT}$ and $\\text{CG}$ are imbalanced by $\\pm 1$, so there is a unique Eulerian path from $\\text{AT}$ to $\\text{CG}$.\n**Correct**. This option accurately describes the vertices, edge multiplicities, vertex balance, and resulting graph traversal properties (Eulerian path or cycle) for all three cases, consistent with our derivation from first principles.\n\nD. For $k=3$, repeated $\\!2$-mers cause branching: vertices $\\text{AT}$, $\\text{TC}$, $\\text{CG}$, $\\text{GA}$ have out-degree $2$; for $k=4$ and $k=5$, the dBG is a simple directed path with no cycle structure.\n**Incorrect**. The analysis showed that in all cases, the graph is a single directed $4$-cycle. There is no branching; the out-degree of any vertex (ignoring multiplicity) is $1$. The graphs for $k=4$ and $k=5$ are cyclical, not simple paths. This option is fundamentally wrong in its description of the topology.", "answer": "$$\\boxed{C}$$", "id": "2384050"}, {"introduction": "A de Bruijn graph is a powerful abstraction, but like all models, it simplifies reality by discarding some information. This problem asks you to critically evaluate the consequences of breaking reads into k-mers by comparing the de Bruijn graph to the alternative overlap-graph model. Understanding what information is lost is key to recognizing why challenges like phasing heterozygous variants and resolving long repeats are so difficult in genome assembly from short reads [@problem_id:2384010].", "problem": "You are given a set of error-free, single-end sequencing reads of uniform length $L$ sampled from a diploid genome. Consider two assembly graph models built from the same reads: (i) an overlap graph in the Overlap-Layout-Consensus (OLC) paradigm, where each read is a vertex and directed edges represent significant suffix-prefix overlaps between reads; and (ii) a de Bruijn graph with a fixed $k$-mer size $k$ (with $1 \\ll k < L$), where vertices are $(k-1)$-mers and directed edges correspond to observed $k$-mers. Assume no paired-end or long-read information is available, and coverage is sufficient for all true $k$-mers to be present. Analyze the implications of moving from the overlap graph to the de Bruijn graph, focusing on which genomic features are most affected by the information that is not explicitly retained when reads are decomposed into $k$-mers.\n\nWhich of the following genomic features will be most significantly affected by the loss of information when moving from the overlap graph to the de Bruijn graph? Select all that apply.\n\nA. Distinguishing copies of an exact interspersed repeat whose repeat unit has length strictly between $k+1$ and $L$ and occurs in different flanking sequence contexts.\n\nB. Phasing two heterozygous single-nucleotide variants on the same chromosome that are separated by a genomic distance $d$ satisfying $k < d \\leq L$.\n\nC. Identifying a single-nucleotide variant located inside a unique genomic region, with $k < L$.\n\nD. Reconstructing a long unique contig whose internal segments are all unique and substantially longer than $k$.\n\nE. Resolving the copy number and placement of a tandem repeat array whose repeat unit length $r$ satisfies $r < k$ but whose total array length lies strictly between $k+1$ and $L$.", "solution": "We begin from the graph definitions. In an overlap graph under the Overlap-Layout-Consensus (OLC) paradigm, vertices are full reads of length $L$, and edges link reads whose suffix-prefix overlaps exceed a threshold, thereby preserving read-level coherence across lengths up to $L$. In contrast, a de Bruijn graph with $k$-mer size $k$ represents observed $k$-mers as edges between $(k-1)$-mer vertices, losing explicit read identities and the long-range linkage within each read beyond $(k-1)$ bases. Consequently, any distinction that requires tracking which $k$-mers co-occur within the same read across more than $k$ bases may be lost or greatly diminished in the de Bruijn representation.\n\nWe evaluate each option using these principles.\n\nOption A: Distinguishing copies of an exact interspersed repeat whose unit length is strictly between $k+1$ and $L$ and occurs in different flanking contexts.\nIf the repeated sequence has length $> k$, all $k$-mers internal to the repeat are shared among its copies. In a de Bruijn graph, this produces a single collapsed path for the repeat, erasing distinctions between copies, and creating branch points only at flanking unique contexts. In an overlap graph, reads of length $L$ that extend from unique flanks into the repeat can be threaded via overlaps that preserve which unique flank connects to which repeat instance, provided $L$ exceeds the repeat unit length and there is sufficient unique sequence on either side. Therefore, the information needed to distinguish repeat copies with different flanks is retained in the overlap graph but largely collapsed in the de Bruijn graph. Verdict: Correct.\n\nOption B: Phasing two heterozygous single-nucleotide variants on the same chromosome separated by $d$ bases with $k < d \\leq L$.\nPhasing requires knowing whether the two variants co-occur on the same haplotype within the same read path. In a de Bruijn graph, the path segment between the two sites collapses if it is composed of $k$-mers shared between haplotypes; the graph alone does not preserve which $k$-mers are traversed by the same read across distances $> k$. In an overlap graph, a single read of length $L$ (or a chain of overlapping reads) that spans both sites retains this linkage, allowing phasing when $d \\leq L$. Thus, moving to a de Bruijn graph removes read-level linkage crucial for phasing when $k < d \\leq L$. Verdict: Correct.\n\nOption C: Identifying a single-nucleotide variant located inside a unique genomic region, with $k < L$.\nA single-nucleotide variant in unique sequence is typically represented in a de Bruijn graph as a simple bubble: two alternative $k$-mer paths differing locally, which is a hallmark used by many variant callers. The overlap graph also captures this as a mismatch within overlaps. Since both representations support detection, there is no major information loss specific to the move from overlap to de Bruijn for this feature. Verdict: Incorrect.\n\nOption D: Reconstructing a long unique contig whose internal segments are all unique and substantially longer than $k$.\nIn unique sequence, both the de Bruijn graph and the overlap graph become essentially linear. The de Bruijn graph’s compression is faithful, and no critical information is lost for assembly of such regions. Therefore, this is not significantly affected by the information loss relative to an overlap graph. Verdict: Incorrect.\n\nOption E: Resolving the copy number and placement of a tandem repeat array with unit length $r < k$ and total array length strictly between $k+1$ and $L$.\nEven when $r < k$, a sufficiently long tandem array produces many identical $k$-mers due to periodicity, causing the de Bruijn graph to collapse the array into a short cycle or path that does not encode copy number, often requiring abundance heuristics. In an overlap graph, reads of length $L$ that span the entire array between unique flanks can preserve array length and placement because overlaps maintain read coherence across the repeat. Since the array length is between $k+1$ and $L$, the overlap graph can, in principle, resolve it, while the de Bruijn graph typically cannot from topology alone. Verdict: Correct.\n\nIn summary, the loss is most significant for features that require retaining read-level linkage across distances greater than $k$, notably long exact repeats in different contexts, long-range phasing of variants, and tandem arrays whose total length exceeds $k$ but can be spanned by reads.", "answer": "$$\\boxed{ABE}$$", "id": "2384010"}, {"introduction": "Beyond pure graph theory, de Bruijn graph concepts are central to analyzing real sequencing data. This practical exercise guides you through one of the first steps in any assembly project: estimating the genome size from the k-mer frequency spectrum. You will learn to distinguish signal (true genomic k-mers) from noise (sequencing errors) and apply a first-principles model to connect k-mer counts to a fundamental biological parameter [@problem_id:2384041].", "problem": "You are given a multiset of nucleotide $k$-mers obtained from shotgun sequencing, represented by a histogram of $k$-mer multiplicities. Consider the directed de Bruijn graph (DBG) of order $k$, whose vertices are $(k-1)$-mers and whose directed edges are $k$-mers. Low-abundance $k$-mers are predominantly caused by sequencing errors and should be excluded from the estimation. After excluding error-prone $k$-mers below a specified multiplicity threshold, estimate the genome size $G$ in base pairs.\n\nFormally, for each test case you are provided with:\n- A positive integer $k$ (the $k$-mer length).\n- A positive integer $\\tau$ (the multiplicity threshold). Only $k$-mers with observed multiplicity greater than or equal to $\\tau$ are considered trusted.\n- A histogram given as a finite set of pairs $\\{(i, H[i])\\}$, where $i$ is a positive integer multiplicity and $H[i]$ is the number of distinct $k$-mers observed exactly $i$ times. If a multiplicity $i$ is not listed, interpret $H[i]=0$.\n\nYour estimate must satisfy the following conditions grounded in first principles:\n- Let $S=\\sum_{i \\ge \\tau} i \\cdot H[i]$ be the total number of trusted $k$-mer observations.\n- Let $c_{\\text{peak}}$ be the multiplicity $i \\ge \\tau$ at which $H[i]$ attains its maximum over trusted multiplicities. If there are multiple such $i$, use the smallest such $i$.\n- The estimated number of distinct genomic $k$-mers is $S / c_{\\text{peak}}$.\n- For a linear haploid genome, estimate the genome size in base pairs as $G \\approx S / c_{\\text{peak}} + k - 1$.\n- If there are no trusted $k$-mers (that is, if $\\sum_{i \\ge \\tau} H[i] = 0$), define the estimate to be $0$ base pairs.\n\nExpress each estimated genome size in base pairs (bp) as a floating-point number rounded to $3$ decimal places. The output must not include unit symbols.\n\nTest suite. Use the following $5$ test cases. Each case is a triple $(k, \\tau, \\{(i, H[i])\\})$:\n- Case $1$: $k = 21$, $\\tau = 4$, histogram pairs\n  $(1, 120)$, $(2, 90)$, $(3, 60)$, $(25, 150)$, $(26, 180)$, $(27, 220)$, $(28, 240)$, $(29, 260)$, $(30, 250)$, $(31, 230)$, $(32, 200)$.\n- Case $2$: $k = 31$, $\\tau = 2$, histogram pairs\n  $(1, 300)$, $(2, 700)$, $(3, 350)$, $(4, 120)$.\n- Case $3$: $k = 17$, $\\tau = 5$, histogram pairs\n  $(1, 1000)$, $(2, 500)$, $(3, 200)$, $(4, 100)$.\n- Case $4$: $k = 25$, $\\tau = 5$, histogram pairs\n  $(1, 400)$, $(2, 300)$, $(3, 200)$, $(4, 150)$, $(55, 180)$, $(56, 200)$, $(57, 220)$, $(58, 240)$, $(59, 260)$, $(60, 280)$, $(61, 270)$, $(62, 250)$, $(63, 230)$.\n- Case $5$: $k = 19$, $\\tau = 5$, histogram pairs\n  $(1, 300)$, $(2, 250)$, $(3, 200)$, $(4, 150)$, $(18, 100)$, $(19, 150)$, $(20, 200)$, $(21, 220)$, $(22, 210)$, $(38, 120)$, $(39, 180)$, $(40, 240)$, $(41, 200)$, $(42, 160)$.\n\nFinal output format. Your program should produce a single line of output containing the results for the $5$ test cases as a comma-separated list enclosed in square brackets, in the same order as listed above. For example, the output must have the form\n$[r_1,r_2,r_3,r_4,r_5]$,\nwhere each $r_j$ is the rounded floating-point estimate as specified.", "solution": "The core formula for genome size estimation is:\n$$\nG \\approx \\frac{S}{c_{\\text{peak}}} + k - 1\n$$\nwhere $k$ is the $k$-mer length, $S = \\sum_{i \\ge \\tau} i \\cdot H[i]$ is the total count of trusted $k$-mer observations (with $\\tau$ being the multiplicity threshold), and $c_{\\text{peak}}$ is the multiplicity corresponding to the highest frequency $H[i]$ for $i \\ge \\tau$.\n\n**Case 1:**\n- Given: $k = 21$, $\\tau = 4$.\n- The histogram provides pairs $(i, H[i])$. We consider only those with multiplicity $i \\ge 4$.\n- The trusted histogram entries are: $\\{(25, 150), (26, 180), (27, 220), (28, 240), (29, 260), (30, 250), (31, 230), (32, 200)\\}$.\n- The maximum value of $H[i]$ for $i \\ge 4$ is $260$, which occurs at $i = 29$. Thus, $c_{\\text{peak}} = 29$.\n- The total number of trusted $k$-mer observations, $S$, is calculated as:\n$$\nS = (25 \\cdot 150) + (26 \\cdot 180) + (27 \\cdot 220) + (28 \\cdot 240) + (29 \\cdot 260) + (30 \\cdot 250) + (31 \\cdot 230) + (32 \\cdot 200)\n$$\n$$\nS = 3750 + 4680 + 5940 + 6720 + 7540 + 7500 + 7130 + 6400 = 49660\n$$\n- The estimated genome size $G$ is:\n$$\nG \\approx \\frac{49660}{29} + 21 - 1 \\approx 1712.41379 + 20 \\approx 1732.414 \\text{ bp}\n$$\n\n**Case 2:**\n- Given: $k = 31$, $\\tau = 2$.\n- The trusted histogram entries are: $\\{(2, 700), (3, 350), (4, 120)\\}$.\n- The maximum value of $H[i]$ for $i \\ge 2$ is $700$, which occurs at $i = 2$. Thus, $c_{\\text{peak}} = 2$.\n- The total number of trusted $k$-mer observations, $S$, is:\n$$\nS = (2 \\cdot 700) + (3 \\cdot 350) + (4 \\cdot 120) = 1400 + 1050 + 480 = 2930\n$$\n- The estimated genome size $G$ is:\n$$\nG \\approx \\frac{2930}{2} + 31 - 1 = 1465 + 30 = 1495.000 \\text{ bp}\n$$\n\n**Case 3:**\n- Given: $k = 17$, $\\tau = 5$.\n- The provided histogram entries are $\\{(1, 1000), (2, 500), (3, 200), (4, 100)\\}$.\n- There are no entries with multiplicity $i \\ge \\tau = 5$. The set of trusted $k$-mers is empty.\n- As per the problem definition, if $\\sum_{i \\ge \\tau} H[i] = 0$, the estimate is $G = 0$.\n- Estimated genome size: $G = 0.000 \\text{ bp}$.\n\n**Case 4:**\n- Given: $k = 25$, $\\tau = 5$.\n- The trusted histogram entries are: $\\{(55, 180), (56, 200), (57, 220), (58, 240), (59, 260), (60, 280), (61, 270), (62, 250), (63, 230)\\}$.\n- The maximum value of $H[i]$ for $i \\ge 5$ is $280$, which occurs at $i = 60$. Thus, $c_{\\text{peak}} = 60$.\n- The total number of trusted $k$-mer observations, $S$, is:\n$$\nS = (55 \\cdot 180) + (56 \\cdot 200) + (57 \\cdot 220) + (58 \\cdot 240) + (59 \\cdot 260) + (60 \\cdot 280) + (61 \\cdot 270) + (62 \\cdot 250) + (63 \\cdot 230)\n$$\n$$\nS = 9900 + 11200 + 12540 + 13920 + 15340 + 16800 + 16470 + 15500 + 14490 = 126160\n$$\n- The estimated genome size $G$ is:\n$$\nG \\approx \\frac{126160}{60} + 25 - 1 \\approx 2102.6666... + 24 \\approx 2126.667 \\text{ bp}\n$$\n\n**Case 5:**\n- Given: $k = 19$, $\\tau = 5$.\n- The trusted histogram entries are: $\\{(18, 100), (19, 150), (20, 200), (21, 220), (22, 210), (38, 120), (39, 180), (40, 240), (41, 200), (42, 160)\\}$. The distribution for trusted $k$-mers is bimodal.\n- The maximum value of H[i] for $i \\ge 5$ is $240$, which occurs at $i = 40$. Thus, $c_{\\text{peak}} = 40$.\n- The total number of trusted $k$-mer observations, $S$, is:\n$$\nS = (18 \\cdot 100) + (19 \\cdot 150) + (20 \\cdot 200) + (21 \\cdot 220) + (22 \\cdot 210) + (38 \\cdot 120) + (39 \\cdot 180) + (40 \\cdot 240) + (41 \\cdot 200) + (42 \\cdot 160)\n$$\n$$\nS = 1800 + 2850 + 4000 + 4620 + 4620 + 4560 + 7020 + 9600 + 8200 + 6720 = 53990\n$$\n- The estimated genome size $G$ is:\n$$\nG \\approx \\frac{53990}{40} + 19 - 1 = 1349.75 + 18 = 1367.750 \\text{ bp}\n$$", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport scipy as sp\n\ndef solve():\n    \"\"\"\n    Calculates the estimated genome size for a series of test cases based on k-mer histograms.\n    \"\"\"\n    test_cases = [\n        (21, 4, {1: 120, 2: 90, 3: 60, 25: 150, 26: 180, 27: 220, 28: 240, 29: 260, 30: 250, 31: 230, 32: 200}),\n        (31, 2, {1: 300, 2: 700, 3: 350, 4: 120}),\n        (17, 5, {1: 1000, 2: 500, 3: 200, 4: 100}),\n        (25, 5, {1: 400, 2: 300, 3: 200, 4: 150, 55: 180, 56: 200, 57: 220, 58: 240, 59: 260, 60: 280, 61: 270, 62: 250, 63: 230}),\n        (19, 5, {1: 300, 2: 250, 3: 200, 4: 150, 18: 100, 19: 150, 20: 200, 21: 220, 22: 210, 38: 120, 39: 180, 40: 240, 41: 200, 42: 160})\n    ]\n\n    results = []\n    for k, tau, hist in test_cases:\n        # Filter the histogram to include only trusted k-mers (multiplicity >= tau)\n        trusted_hist = {i: h for i, h in hist.items() if i >= tau}\n\n        # If there are no trusted k-mers, the estimated genome size is 0.\n        if not trusted_hist:\n            G = 0.0\n        else:\n            # Calculate S, the total number of trusted k-mer observations.\n            s_total = sum(i * h for i, h in trusted_hist.items())\n\n            # Find c_peak, the multiplicity at which H[i] is maximum for trusted k-mers.\n            # If there's a tie, the smallest multiplicity is chosen.\n            max_h_val = max(trusted_hist.values())\n            c_peak = min(i for i, h in trusted_hist.items() if h == max_h_val)\n\n            # Estimate genome size G using the provided formula.\n            G = (s_total / c_peak) + k - 1\n        \n        # Format the result to 3 decimal places.\n        results.append(f\"{G:.3f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2384041"}]}