{"hands_on_practices": [{"introduction": "The strength of a promoter is fundamentally tied to how stably the transcriptional machinery can bind to it. We can model this relationship using principles from statistical mechanics, where the binding free energy ($ \\Delta G $) of a transcription factor to DNA directly informs the probability of that binding event. This exercise [@problem_id:2802123] provides a foundational, quantitative link between the physical chemistry of protein-DNA interactions and biological activity, allowing you to calculate how different combinations of DNA motifs can result in vastly different gene expression potentials.", "problem": "Transcription initiation by RNA polymerase II depends critically on the assembly of the pre-initiation complex (PIC), which is nucleated by Transcription Factor II D (TFIID) at core promoters. Canonical core promoter motifs such as the TATA box (TATA), Initiator (Inr), and Downstream Promoter Element (DPE) modulate TFIID affinity. Consider a thermodynamic equilibrium model in which the probability that a promoter assembles a pre-initiation complex (PIC) is proportional to the Boltzmann weight of TFIID bound to the available motif configuration. Assume the following modeling principles:\n- The binding free energy contributions of individual motifs to TFIID binding are additive when motifs co-occur, so that the total binding free energy is the sum of motif-specific free energies.\n- The relative probability of PIC assembly across promoter classes is governed by the ratio of their Boltzmann weights, consistent with equilibrium statistical mechanics.\n- Use the Boltzmann factor $\\exp\\!\\left(-\\Delta G/(R T)\\right)$ for a state with binding free energy $\\Delta G$, where $R$ is the gas constant and $T$ is absolute temperature.\n\nTwo promoter classes are compared:\n- Class A: contains TATA and Inr (denote this as TATA+Inr).\n- Class B: contains Inr and DPE (denote this as Inr+DPE).\n\nYou are given the motif-specific binding free energies at temperature $T=300\\,\\text{K}$:\n- $\\Delta G_{\\text{TATA}}=-7\\,\\text{kcal}\\,\\text{mol}^{-1}$,\n- $\\Delta G_{\\text{Inr}}=-3\\,\\text{kcal}\\,\\text{mol}^{-1}$,\n- $\\Delta G_{\\text{DPE}}=-2\\,\\text{kcal}\\,\\text{mol}^{-1}$.\n\nUse the gas constant $R=1.987\\times 10^{-3}\\,\\text{kcal}\\,\\text{mol}^{-1}\\,\\text{K}^{-1}$. Compute the relative probability of PIC assembly, defined as the ratio $P_{\\text{PIC}}(\\text{TATA}+\\text{Inr})/P_{\\text{PIC}}(\\text{Inr}+\\text{DPE})$, under the above assumptions. Round your final result to three significant figures. Report your answer as a single dimensionless number (a decimal or in scientific notation, without a percentage sign).", "solution": "The problem statement must first be validated for scientific coherence and logical consistency.\n\n**Step 1: Extraction of Givens**\n- Model Principle 1: Binding free energy contributions of individual motifs are additive. $\\Delta G_{\\text{total}} = \\sum \\Delta G_{\\text{motif}}$.\n- Model Principle 2: The relative probability of Pre-initiation Complex (PIC) assembly is given by the ratio of the Boltzmann weights of the corresponding states.\n- Definition of Boltzmann factor: $\\exp(-\\Delta G / (RT))$, where $\\Delta G$ is the binding free energy, $R$ is the gas constant, and $T$ is the absolute temperature.\n- Promoter Class A: Composition is TATA+Inr.\n- Promoter Class B: Composition is Inr+DPE.\n- Given free energies:\n  - $\\Delta G_{\\text{TATA}} = -7\\,\\text{kcal}\\,\\text{mol}^{-1}$\n  - $\\Delta G_{\\text{Inr}} = -3\\,\\text{kcal}\\,\\text{mol}^{-1}$\n  - $\\Delta G_{\\text{DPE}} = -2\\,\\text{kcal}\\,\\text{mol}^{-1}$\n- Given constants:\n  - Temperature $T = 300\\,\\text{K}$\n  - Gas constant $R = 1.987 \\times 10^{-3}\\,\\text{kcal}\\,\\text{mol}^{-1}\\,\\text{K}^{-1}$\n- Required computation: The ratio $\\frac{P_{\\text{PIC}}(\\text{TATA}+\\text{Inr})}{P_{\\text{PIC}}(\\text{Inr}+\\text{DPE})}$.\n- Final instruction: Round result to three significant figures.\n\n**Step 2: Validation of Problem Statement**\nThe problem is scientifically grounded. It presents a simplified but standard thermodynamic equilibrium model to describe protein-DNA interactions, a fundamental concept in molecular biophysics and genetics. The use of the Boltzmann distribution to relate free energy differences to probabilities of states is a cornerstone of statistical mechanics. The additivity of free energies is a common and useful approximation in such models. The problem is well-posed, providing all necessary data and definitions with no internal contradictions or ambiguities. The values are physically plausible.\n\n**Verdict:** The problem is deemed valid and a solution will be furnished.\n\nThe task is to compute the relative probability of PIC assembly for two promoter classes, which we denote as A (TATA+Inr) and B (Inr+DPE). This relative probability is the ratio of their individual probabilities, $P_A$ and $P_B$. According to the problem statement, the probability of a given state is proportional to its Boltzmann factor. Therefore, the ratio of probabilities is the ratio of their Boltzmann factors:\n$$ \\frac{P_A}{P_B} = \\frac{P_{\\text{PIC}}(\\text{TATA}+\\text{Inr})}{P_{\\text{PIC}}(\\text{Inr}+\\text{DPE})} = \\frac{k \\cdot \\exp\\left(-\\frac{\\Delta G_A}{RT}\\right)}{k \\cdot \\exp\\left(-\\frac{\\Delta G_B}{RT}\\right)} $$\nThe proportionality constant $k$ cancels, and we can combine the exponential terms:\n$$ \\frac{P_A}{P_B} = \\exp\\left(-\\frac{\\Delta G_A}{RT} + \\frac{\\Delta G_B}{RT}\\right) = \\exp\\left(-\\frac{\\Delta G_A - \\Delta G_B}{RT}\\right) $$\nHere, $\\Delta G_A$ and $\\Delta G_B$ are the total binding free energies for promoter classes A and B, respectively.\n\nThe principle of additivity of free energies dictates that the total binding free energy for a promoter with multiple motifs is the sum of the energies of the individual motifs.\nFor promoter class A (TATA+Inr), the total binding free energy is:\n$$ \\Delta G_A = \\Delta G_{\\text{TATA}} + \\Delta G_{\\text{Inr}} $$\nSubstituting the given values:\n$$ \\Delta G_A = (-7\\,\\text{kcal}\\,\\text{mol}^{-1}) + (-3\\,\\text{kcal}\\,\\text{mol}^{-1}) = -10\\,\\text{kcal}\\,\\text{mol}^{-1} $$\nFor promoter class B (Inr+DPE), the total binding free energy is:\n$$ \\Delta G_B = \\Delta G_{\\text{Inr}} + \\Delta G_{\\text{DPE}} $$\nSubstituting the given values:\n$$ \\Delta G_B = (-3\\,\\text{kcal}\\,\\text{mol}^{-1}) + (-2\\,\\text{kcal}\\,\\text{mol}^{-1}) = -5\\,\\text{kcal}\\,\\text{mol}^{-1} $$\nNow, we find the difference in total binding free energies, $\\Delta G_A - \\Delta G_B$:\n$$ \\Delta G_A - \\Delta G_B = (-10\\,\\text{kcal}\\,\\text{mol}^{-1}) - (-5\\,\\text{kcal}\\,\\text{mol}^{-1}) = -5\\,\\text{kcal}\\,\\text{mol}^{-1} $$\nNext, we compute the thermal energy term, $RT$:\n$$ R = 1.987 \\times 10^{-3}\\,\\text{kcal}\\,\\text{mol}^{-1}\\,\\text{K}^{-1} $$\n$$ T = 300\\,\\text{K} $$\n$$ RT = (1.987 \\times 10^{-3}\\,\\text{kcal}\\,\\text{mol}^{-1}\\,\\text{K}^{-1}) \\times (300\\,\\text{K}) = 0.5961\\,\\text{kcal}\\,\\text{mol}^{-1} $$\nNow we can compute the exponent in our ratio expression:\n$$ -\\frac{\\Delta G_A - \\Delta G_B}{RT} = -\\frac{-5\\,\\text{kcal}\\,\\text{mol}^{-1}}{0.5961\\,\\text{kcal}\\,\\text{mol}^{-1}} = \\frac{5}{0.5961} \\approx 8.387854 $$\nThe units cancel as required, yielding a dimensionless exponent. Finally, we compute the relative probability ratio by taking the exponential of this value:\n$$ \\frac{P_A}{P_B} = \\exp\\left(\\frac{5}{0.5961}\\right) \\approx \\exp(8.387854) \\approx 4393.35 $$\nThe problem requires the answer to be rounded to three significant figures.\n$$ 4393.35 \\approx 4390 $$\nThis can be expressed in scientific notation as $4.39 \\times 10^3$. This result signifies that a promoter with TATA and Inr motifs is approximately $4390$ times more likely to assemble a PIC compared to a promoter with Inr and DPE motifs, under the assumptions of this thermodynamic model.", "answer": "$$\\boxed{4.39 \\times 10^{3}}$$", "id": "2802123"}, {"introduction": "Gene regulation is not determined by the static DNA sequence alone; epigenetic modifications like DNA methylation can dynamically alter a transcription factor's ability to bind. This practice [@problem_id:2802152] extends the standard Position Weight Matrix (PWM) model to incorporate the impact of methylation, teaching you how to mathematically adjust binding scores when a recognition site is modified. This exercise is key to building sophisticated, context-aware models that reflect the true complexity of gene regulation in a cell.", "problem": "A transcription factor (TF) that regulates a regulatory promoter within a CpG island binds DNA according to a position weight matrix (PWM) model with log-odds scoring. In this model, for a candidate site of length $L$, the log-odds score is\n$$\nS \\;=\\; \\sum_{i=1}^{L} \\ln\\!\\left(\\frac{p_{i}(b_{i})}{b(b_{i})}\\right),\n$$\nwhere $p_{i}(x)$ is the position-specific probability for base $x \\in \\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$ at position $i$, $b(x)$ is the genomic background frequency of base $x$, and $\\ln$ denotes the natural logarithm. Consider the following length-$6$ motif with position-specific probability vectors (in the order $\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}$):\n- Position $1$: $(0.5,\\,0.1,\\,0.3,\\,0.1)$\n- Position $2$: $(0.1,\\,0.6,\\,0.2,\\,0.1)$\n- Position $3$: $(0.2,\\,0.1,\\,0.6,\\,0.1)$\n- Position $4$: $(0.1,\\,0.5,\\,0.3,\\,0.1)$\n- Position $5$: $(0.1,\\,0.1,\\,0.7,\\,0.1)$\n- Position $6$: $(0.2,\\,0.1,\\,0.3,\\,0.4)$\n\nThe background base frequencies within this CpG island are $b(\\mathrm{A})=0.2$, $b(\\mathrm{C})=0.3$, $b(\\mathrm{G})=0.3$, $b(\\mathrm{T})=0.2$. A candidate binding site within the regulatory promoter is the sequence $S=\\mathrm{ACGCGT}$ (positions $1$ through $6$), which contains two CpG dinucleotides at positions $(2,3)$ and $(4,5)$.\n\nThe TF is methylation-sensitive: when a cytosine in a CpG context at position $i$ is methylated, the PWM entry for cytosine at that position is penalized multiplicatively by a factor $\\alpha_{i} \\in (0,1)$ and the entire column is renormalized to sum to $1$. Explicitly, if methylation occurs at position $i$, then\n$$\np_{i}^{(\\mathrm{meth})}(\\mathrm{C}) \\;=\\; \\frac{\\alpha_{i}\\,p_{i}(\\mathrm{C})}{Z_{i}}, \n\\qquad \np_{i}^{(\\mathrm{meth})}(x\\neq \\mathrm{C}) \\;=\\; \\frac{p_{i}(x)}{Z_{i}},\n\\qquad \nZ_{i} \\;=\\; 1 - (1-\\alpha_{i})\\,p_{i}(\\mathrm{C}).\n$$\nAssume methylation can occur only for cytosines in CpG dinucleotides. For the two CpG-cytosines in $S$, the multiplicative penalties and methylation probabilities are:\n- Position $2$: $\\alpha_{2}=0.4$, methylation probability $m_{2}=0.7$.\n- Position $4$: $\\alpha_{4}=0.2$, methylation probability $m_{4}=0.5$.\n\nAll other positions are unaffected. Using the PWM log-odds model above with natural logarithms, compute the expected change in the log-odds score, $\\mathbb{E}[S_{\\mathrm{meth}}-S]$, for the sequence $S$ under the described methylation model. Round your answer to $4$ significant figures. Express the final score change in natural-log units (nats).", "solution": "The problem requires the calculation of the expected change in the log-odds score, $\\mathbb{E}[S_{\\mathrm{meth}}-S]$, for a given DNA sequence under a probabilistic methylation model.\n\nThe log-odds score $S$ for a candidate site of length $L$ is a sum over the positions:\n$$\nS = \\sum_{i=1}^{L} S_i \\quad \\text{where} \\quad S_i = \\ln\\left(\\frac{p_{i}(b_{i})}{b(b_{i})}\\right)\n$$\nHere, $L=6$, and the sequence is $S_{\\mathrm{seq}} = \\mathrm{ACGCGT}$. The bases are $b_1=\\mathrm{A}$, $b_2=\\mathrm{C}$, $b_3=\\mathrm{G}$, $b_4=\\mathrm{C}$, $b_5=\\mathrm{G}$, $b_6=\\mathrm{T}$.\n\nMethylation is stated to occur only for cytosines in CpG dinucleotides. In the sequence $\\mathrm{ACGCGT}$, CpG dinucleotides are at positions $(2,3)$ and $(4,5)$. Therefore, only the cytosines at positions $i=2$ and $i=4$ are subject to methylation. For all other positions $i \\in \\{1, 3, 5, 6\\}$, the score contribution $S_i$ is unaffected by methylation, meaning $S_{i, \\mathrm{meth}} = S_i$.\n\nThe total change in score, $\\Delta S = S_{\\mathrm{meth}} - S$, is the sum of changes at each position. Since only positions $2$ and $4$ are affected, this simplifies to:\n$$\n\\Delta S = (S_{2, \\mathrm{meth}} - S_2) + (S_{4, \\mathrm{meth}} - S_4)\n$$\nWe need to compute the expected value of $\\Delta S$. By the linearity of expectation, we have:\n$$\n\\mathbb{E}[\\Delta S] = \\mathbb{E}[S_{2, \\mathrm{meth}} - S_2] + \\mathbb{E}[S_{4, \\mathrm{meth}} - S_4]\n$$\nLet's analyze the expected change for a single susceptible position $i$. The methylation at position $i$ is a random event, occurring with probability $m_i$. If methylation occurs, the score changes by $S_{i, \\mathrm{meth}} - S_i$. If it does not occur (with probability $1-m_i$), the change is $0$. The expected change at position $i$ is thus:\n$$\n\\mathbb{E}[S_{i, \\mathrm{meth}} - S_i] = m_i \\cdot (S_{i, \\mathrm{meth}} - S_i) + (1-m_i) \\cdot 0 = m_i (S_{i, \\mathrm{meth}} - S_i)\n$$\nThe total expected change in score is the sum of these expected contributions:\n$$\n\\mathbb{E}[\\Delta S] = m_2(S_{2, \\mathrm{meth}} - S_2) + m_4(S_{4, \\mathrm{meth}} - S_4)\n$$\nThe change in score at a position $i$ where the base is cytosine ($\\mathrm{C}$) is given by:\n$$\nS_{i, \\mathrm{meth}} - S_i = \\ln\\left(\\frac{p_i^{(\\mathrm{meth})}(\\mathrm{C})}{b(\\mathrm{C})}\\right) - \\ln\\left(\\frac{p_i(\\mathrm{C})}{b(\\mathrm{C})}\\right) = \\ln\\left(\\frac{p_i^{(\\mathrm{meth})}(\\mathrm{C})}{p_i(\\mathrm{C})}\\right)\n$$\nUsing the provided model for methylation, $p_i^{(\\mathrm{meth})}(\\mathrm{C}) = \\frac{\\alpha_i p_i(\\mathrm{C})}{Z_i}$, the change simplifies to:\n$$\nS_{i, \\mathrm{meth}} - S_i = \\ln\\left(\\frac{\\alpha_i p_i(\\mathrm{C})/Z_i}{p_i(\\mathrm{C})}\\right) = \\ln\\left(\\frac{\\alpha_i}{Z_i}\\right)\n$$\nwhere the normalization factor is $Z_i = 1 - (1-\\alpha_i)p_i(\\mathrm{C})$.\n\nNow we will perform the calculations for each affected position.\n\n**Position $i=2$**:\nThe base is $b_2=\\mathrm{C}$. The given parameters are $p_2(\\mathrm{C})=0.6$, $\\alpha_2=0.4$, and methylation probability $m_2=0.7$.\nFirst, we compute the normalization factor $Z_2$:\n$$\nZ_2 = 1 - (1-\\alpha_2)p_2(\\mathrm{C}) = 1 - (1-0.4)(0.6) = 1 - (0.6)(0.6) = 1 - 0.36 = 0.64\n$$\nThe change in score at position $2$ upon methylation is:\n$$\nS_{2, \\mathrm{meth}} - S_2 = \\ln\\left(\\frac{\\alpha_2}{Z_2}\\right) = \\ln\\left(\\frac{0.4}{0.64}\\right) = \\ln\\left(\\frac{40}{64}\\right) = \\ln\\left(\\frac{5}{8}\\right)\n$$\n\n**Position $i=4$**:\nThe base is $b_4=\\mathrm{C}$. The given parameters are $p_4(\\mathrm{C})=0.5$, $\\alpha_4=0.2$, and methylation probability $m_4=0.5$.\nFirst, we compute the normalization factor $Z_4$:\n$$\nZ_4 = 1 - (1-\\alpha_4)p_4(\\mathrm{C}) = 1 - (1-0.2)(0.5) = 1 - (0.8)(0.5) = 1 - 0.4 = 0.6\n$$\nThe change in score at position $4$ upon methylation is:\n$$\nS_{4, \\mathrm{meth}} - S_4 = \\ln\\left(\\frac{\\alpha_4}{Z_4}\\right) = \\ln\\left(\\frac{0.2}{0.6}\\right) = \\ln\\left(\\frac{1}{3}\\right)\n$$\n\n**Total Expected Change**:\nWe combine these results to find the total expected change in score:\n$$\n\\mathbb{E}[\\Delta S] = m_2 \\left(S_{2, \\mathrm{meth}} - S_2\\right) + m_4 \\left(S_{4, \\mathrm{meth}} - S_4\\right) = 0.7 \\ln\\left(\\frac{5}{8}\\right) + 0.5 \\ln\\left(\\frac{1}{3}\\right)\n$$\nNow we compute the numerical value:\n$$\n\\ln\\left(\\frac{5}{8}\\right) = \\ln(0.625) \\approx -0.4700036\n$$\n$$\n\\ln\\left(\\frac{1}{3}\\right) = -\\ln(3) \\approx -1.0986123\n$$\n$$\n\\mathbb{E}[\\Delta S] \\approx 0.7 \\times (-0.4700036) + 0.5 \\times (-1.0986123)\n$$\n$$\n\\mathbb{E}[\\Delta S] \\approx -0.32900252 - 0.54930615 = -0.87830867\n$$\nRounding the final result to $4$ significant figures, we get $-0.8783$.", "answer": "$$\\boxed{-0.8783}$$", "id": "2802152"}, {"introduction": "Understanding how mutations within enhancers alter gene expression is a central challenge in regulatory genomics. In this capstone exercise [@problem_id:2419851], you will build a complete computational pipeline to simulate this process by creating an \"in silico mutagenizer\". You will implement a program that introduces random mutations into an enhancer sequence and then predicts the functional consequences using a biophysical model that integrates both activator and repressor inputs, providing invaluable hands-on experience in building predictive models from first principles.", "problem": "You are given an idealized biophysical scoring framework to approximate how changes in a cis-regulatory DNA enhancer affect gene expression by altering transcription factor binding sites. Assume the Central Dogma of Molecular Biology (DNA to RNA to protein) and the standard thermodynamic occupancy view of transcriptional regulation: transcription factor occupancy of regulatory DNA modulates promoter activity, which is mapped to measurable expression via a monotonic link function.\n\nFundamental base and modeling assumptions:\n- A transcription factor recognizes DNA sequence features summarized by a Position Weight Matrix (PWM) of length $L$, with per-position categorical probabilities $p_{i,b}$ for base $b \\in \\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$ at position $i \\in \\{1,\\dots,L\\}$, and an independent background base frequency $f_b$ (assume $f_{\\text{A}}=f_{\\text{C}}=f_{\\text{G}}=f_{\\text{T}}=0.25$).\n- The log-odds score for a window $w$ of length $L$ with bases $b_1,\\dots,b_L$ is\n$$\ns(w) \\;=\\; \\sum_{i=1}^{L} \\log\\left(\\frac{p_{i,b_i}}{f_{b_i}}\\right)\n$$\nwhere $\\log(\\cdot)$ denotes the natural logarithm.\n- The best site score for a sequence is taken as the maximum log-odds score across all windows on both the forward strand and the reverse-complement strand. If the sequence is shorter than $L$, the best site score is defined as $0$. Negative best site scores are clipped at $0$ before entering the expression model.\n- Let $S_{\\text{A}}$ be the best site score for the activator PWM and $S_{\\text{R}}$ be the best site score for the repressor PWM. Expression is mapped via a logistic link\n$$\nE \\;=\\; \\frac{1}{1 + \\exp\\!\\left(-\\left(w_{\\text{A}}\\,S_{\\text{A}} - w_{\\text{R}}\\,S_{\\text{R}} + b\\right)\\right)}\n$$\nwith weights $w_{\\text{A}}$ and $w_{\\text{R}}$ and bias $b$.\n\nPWM construction from consensus:\n- Activator PWM: length $L_{\\text{A}}=6$, consensus sequence $c^{\\text{A}}=$ \"ACGTAC\". At each position $i$, the consensus base has probability $p_{i,c^{\\text{A}}_i}=0.7$ and the other three bases share the remaining mass equally, that is $p_{i,b\\neq c^{\\text{A}}_i}=0.1$.\n- Repressor PWM: length $L_{\\text{R}}=6$, consensus sequence $c^{\\text{R}}=$ \"TGCACC\". At each position $i$, the consensus base has probability $p_{i,c^{\\text{R}}_i}=0.65$ and the other three bases share the remaining mass equally, that is $p_{i,b\\neq c^{\\text{R}}_i}=\\frac{0.35}{3}$.\n- Use the same background $f_b=0.25$ for all bases in both PWMs.\n\nExpression mapping parameters:\n- Use $w_{\\text{A}}=1.0$, $w_{\\text{R}}=1.2$, and $b=-2.0$.\n\nMutagenizer model:\n- The DNA alphabet is $\\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$.\n- A \"mutagenizer\" applies $n$ edit events to a sequence. Each event is sampled independently with probabilities $(p_{\\text{point}}, p_{\\text{ins}}, p_{\\text{del}})$ for point mutation, insertion, and deletion, respectively, with $p_{\\text{point}}+p_{\\text{ins}}+p_{\\text{del}}=1$.\n- Point mutation: choose a position uniformly at random and replace the base by a uniformly random different base.\n- Insertion: choose a position uniformly from $\\{0,\\dots,|\\text{seq}|\\}$, choose an insertion length $\\ell_{\\text{ins}}$ uniformly from $\\{1,\\dots,L_{\\max}^{\\text{ins}}\\}$, and insert a random $\\ell_{\\text{ins}}$-mer with independent uniformly random bases.\n- Deletion: choose a start position uniformly from $\\{0,\\dots,|\\text{seq}|-1\\}$, choose a deletion length $\\ell_{\\text{del}}$ uniformly from $\\{1,\\dots,L_{\\max}^{\\text{del}}\\}$, and delete bases from the start position up to the chosen length, clipping to the current sequence end if necessary. If the sequence becomes empty, subsequent deletions are no-ops.\n- Randomness must be generated by a pseudorandom number generator initialized with a given integer seed to ensure reproducibility.\n\nBaseline enhancer sequence:\n- Use the following baseline sequence of length $80$ nucleotides:\n\"ATGCGTACGATCGATGACGTACGTACTTGACCTGAACTGCGTATCGATCGTGCACCGATTACAAGCTTAGGCTAATCGAA\"\n\nTasks:\n- Implement a program that:\n    1. Constructs the activator and repressor PWMs from the given consensus sequences and probabilities, converts them to log-odds with background $f_b=0.25$, and scans both strands of a DNA sequence to obtain $S_{\\text{A}}$ and $S_{\\text{R}}$ as described above.\n    2. Implements the mutagenizer with the three event types. All randomness must be derived from a seedable generator.\n    3. Computes the baseline expression $E_0$ for the given baseline sequence and the mutated expression $E_1$ after applying a specified number of edit events. Report the expression change $\\Delta E = E_1 - E_0$ for each test case below.\n- Scanning both strands means you must also consider the reverse-complement of each window when finding the maximum log-odds score.\n\nTest suite:\n- For each tuple $(\\text{seed}, n, p_{\\text{point}}, p_{\\text{ins}}, p_{\\text{del}}, L_{\\max}^{\\text{ins}}, L_{\\max}^{\\text{del}})$, start from the baseline sequence, initialize the random generator with the given seed, apply $n$ events using the given probabilities and maximum event lengths, and output the resulting $\\Delta E$ as a floating-point number. Use the following five test cases that probe typical behavior, a no-op boundary, deletion extremes, and insertion-only creation effects:\n    1. $(42, 0, 1.0, 0.0, 0.0, 3, 3)$\n    2. $(7, 1, 1.0, 0.0, 0.0, 3, 3)$\n    3. $(123, 2, 0.5, 0.25, 0.25, 4, 4)$\n    4. $(999, 3, 0.0, 0.0, 1.0, 3, 50)$\n    5. $(2024, 2, 0.0, 1.0, 0.0, 6, 3)$\n\nAnswer specification:\n- For each test case, your program must compute $\\Delta E$ and round it to exactly six digits after the decimal point.\n- Your program should produce a single line of output containing the five rounded results as a comma-separated list enclosed in square brackets, for example $[\\Delta E_1,\\Delta E_2,\\Delta E_3,\\Delta E_4,\\Delta E_5]$ with each $\\Delta E_i$ formatted to six digits after the decimal point.", "solution": "The problem statement is subjected to rigorous validation.\n\nStep 1: Extract Givens.\n- **DNA Alphabet**: $\\Sigma = \\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$\n- **Background Base Frequencies**: $f_b = 0.25$ for all $b \\in \\Sigma$.\n- **Log-odds Score for a window $w=b_1...b_L$**: $s(w) = \\sum_{i=1}^{L} \\log\\left(\\frac{p_{i,b_i}}{f_{b_i}}\\right)$, where $\\log$ is the natural logarithm.\n- **Best Site Score**: Maximum log-odds score over all windows on forward and reverse-complement strands. Score is $0$ if sequence length is less than PWM length $L$. Negative best scores are clipped to $0$.\n- **Activator PWM**: Length $L_{\\text{A}}=6$. Consensus $c^{\\text{A}}=$ \"ACGTAC\". Probabilities: $p_{i,c^{\\text{A}}_i}=0.7$, $p_{i,b\\neq c^{\\text{A}}_i}=0.1$.\n- **Repressor PWM**: Length $L_{\\text{R}}=6$. Consensus $c^{\\text{R}}=$ \"TGCACC\". Probabilities: $p_{i,c^{\\text{R}}_i}=0.65$, $p_{i,b\\neq c^{\\text{R}}_i}=\\frac{0.35}{3}$.\n- **Expression Model**: $E = \\frac{1}{1 + \\exp\\!\\left(-\\left(w_{\\text{A}}\\,S_{\\text{A}} - w_{\\text{R}}\\,S_{\\text{R}} + b\\right)\\right)}$.\n- **Expression Parameters**: $w_{\\text{A}}=1.0$, $w_{\\text{R}}=1.2$, $b=-2.0$.\n- **Baseline Sequence**: \"ATGCGTACGATCGATGACGTACGTACTTGACCTGAACTGCGTATCGATCGTGCACCGATTACAAGCTTAGGCTAATCGAA\" (length $80$).\n- **Mutagenizer Model**: Applies $n$ edit events with probabilities $p_{\\text{point}}, p_{\\text{ins}}, p_{\\text{del}}$ summing to $1$.\n- **Point Mutation**: Uniformly random position, replace with a uniformly random different base.\n- **Insertion**: Uniformly random position $\\{0,\\dots,|\\text{seq}|\\}$, uniform length $\\ell_{\\text{ins}} \\in \\{1,\\dots,L_{\\max}^{\\text{ins}}\\}$, insert random $\\ell_{\\text{ins}}$-mer.\n- **Deletion**: Uniformly random start $\\{0,\\dots,|\\text{seq}|-1\\}$, uniform length $\\ell_{\\text{del}} \\in \\{1,\\dots,L_{\\max}^{\\text{del}}\\}$, delete segment, clipping at sequence end.\n- **Randomness**: Seeded pseudorandom number generator for reproducibility.\n- **Task**: Compute expression change $\\Delta E = E_1 - E_0$.\n- **Test Cases**:\n    1. $(\\text{seed}=42, n=0, p_{\\text{point}}=1.0, p_{\\text{ins}}=0.0, p_{\\text{del}}=0.0, L_{\\max}^{\\text{ins}}=3, L_{\\max}^{\\text{del}}=3)$\n    2. $(\\text{seed}=7, n=1, p_{\\text{point}}=1.0, p_{\\text{ins}}=0.0, p_{\\text{del}}=0.0, L_{\\max}^{\\text{ins}}=3, L_{\\max}^{\\text{del}}=3)$\n    3. $(\\text{seed}=123, n=2, p_{\\text{point}}=0.5, p_{\\text{ins}}=0.25, p_{\\text{del}}=0.25, L_{\\max}^{\\text{ins}}=4, L_{\\max}^{\\text{del}}=4)$\n    4. $(\\text{seed}=999, n=3, p_{\\text{point}}=0.0, p_{\\text{ins}}=0.0, p_{\\text{del}}=1.0, L_{\\max}^{\\text{ins}}=3, L_{\\max}^{\\text{del}}=50)$\n    5. $(\\text{seed}=2024, n=2, p_{\\text{point}}=0.0, p_{\\text{ins}}=1.0, p_{\\text{del}}=0.0, L_{\\max}^{\\text{ins}}=6, L_{\\max}^{\\text{del}}=3)$\n\nStep 2: Validate Using Extracted Givens.\n- **Scientific Grounding**: The problem uses a simplified but standard biophysical model of transcriptional regulation. Position Weight Matrices (PWMs), log-odds scores for binding affinity, and logistic link functions are staple concepts in computational biology and bioinformatics. The model is a valid, albeit idealized, representation of cis-regulatory logic.\n- **Well-Posedness**: The problem is specified with mathematical precision. All parameters, formulas, and procedural rules (including for random processes and edge cases) are defined. The use of a seeded random number generator ensures that for each test case, a unique, deterministic solution can be computed.\n- **Objectivity**: The language is formal and quantitative, devoid of subjective or ambiguous terminology.\n- **Completeness and Consistency**: The problem is self-contained. It provides all necessary data and constraints, which are internally consistent. The probabilities for mutation events sum to $1$. All lengths, weights, and constants are specified.\n\nStep 3: Verdict and Action.\nThe problem is valid. It is a well-defined computational exercise grounded in established scientific principles. A complete solution will be provided.\n\n**Solution Design**\n\nThe solution requires a systematic implementation of the provided biophysical model and mutagenizer. The procedure follows these logical steps:\n\n1.  **PWM Log-Odds Matrix Construction**: First, we construct the Position Weight Matrices (PWMs) for the activator and repressor. A PWM is represented as a matrix of probabilities $p_{i,b}$. This is then converted into a log-odds scoring matrix. For each position $i \\in \\{1, \\dots, L\\}$ and base $b \\in \\{\\text{A, C, G, T}\\}$, the score entry is computed as:\n    $$\n    M_{i,b} = \\log\\left(\\frac{p_{i,b}}{f_b}\\right)\n    $$\n    where $p_{i,b}$ are the probabilities defined by the consensus sequence and $f_b = 0.25$ is the background probability. Two such matrices, $M_{\\text{A}}$ and $M_{\\text{R}}$, of dimensions $L_{\\text{A}} \\times 4$ and $L_{\\text{R}} \\times 4$ respectively, must be created. The base order (e.g., A, C, G, T) must be consistent throughout the implementation.\n\n2.  **Sequence Scanning and Score Calculation**: A function is required to compute the best site score, $S$, for a given DNA sequence and a log-odds matrix $M$. This involves:\n    a. Generating the reverse-complement of the input sequence. The reverse-complement of a sequence $s = b_1b_2...b_k$ is $s' = \\text{comp}(b_k)...\\text{comp}(b_2)\\text{comp}(b_1)$, where $\\text{comp}(\\text{A})=\\text{T}$, $\\text{comp}(\\text{T})=\\text{A}$, $\\text{comp}(\\text{C})=\\text{G}$, and $\\text{comp}(\\text{G})=\\text{C}$.\n    b. Iterating through all possible windows of length $L$ on both the forward sequence and its reverse-complement. For a window $w=b_1...b_L$, the score is $\\sum_{j=1}^{L} M_{j,b_j}$.\n    c. The highest score found across all windows on both strands is the initial best score.\n    d. Per the problem rules, if the sequence is shorter than $L$, the score is $0$. If the calculated best score is negative, it is clipped to $0$. Let us denote this function `FindBestSiteScore(sequence, matrix)`.\n\n3.  **Expression Calculation**: With the best site scores for the activator, $S_{\\text{A}}$, and the repressor, $S_{\\text{R}}$, the expression level $E$ is calculated using the provided logistic function:\n    $$\n    E(S_{\\text{A}}, S_{\\text{R}}) = \\frac{1}{1 + \\exp(-(w_{\\text{A}}S_{\\text{A}} - w_{\\text{R}}S_{\\text{R}} + b))}\n    $$\n    The parameters $w_{\\text{A}}=1.0$, $w_{\\text{R}}=1.2$, and $b=-2.0$ are used.\n\n4.  **Mutagenesis Simulation**: A function must implement the mutagenizer. It takes the initial sequence, a seed for the random number generator, and the mutation parameters $(n, p_{\\text{point}}, p_{\\text{ins}}, p_{\\text{del}}, L_{\\max}^{\\text{ins}}, L_{\\max}^{\\text{del}})$.\n    a. Initialize a pseudorandom number generator (PRNG) with the given seed.\n    b. Loop $n$ times. In each iteration:\n        i. Sample an event type (point mutation, insertion, deletion) using the PRNG and the probabilities $(p_{\\text{point}}, p_{\\text{ins}}, p_{\\text{del}})$.\n        ii. Execute the chosen event on the current sequence, using the PRNG for all random choices (position, length, base) according to the precise rules given in the problem statement. Special care must be taken with sequence indexing and handling of edge cases, such as an empty sequence.\n\n5.  **Main Execution Logic**: The program will first compute the baseline expression $E_0$ for the provided initial sequence. This involves calculating $S_{\\text{A},0} = \\text{FindBestSiteScore}(\\text{baseline\\_seq}, M_{\\text{A}})$ and $S_{\\text{R},0} = \\text{FindBestSiteScore}(\\text{baseline\\_seq}, M_{\\text{R}})$, then $E_0 = E(S_{\\text{A},0}, S_{\\text{R},0})$. Subsequently, for each test case provided:\n    a. The mutagenizer is called with the baseline sequence and the test case parameters to produce a mutated sequence.\n    b. The expression $E_1$ for the mutated sequence is calculated in the same manner as $E_0$.\n    c. The change in expression, $\\Delta E = E_1 - E_0$, is computed, rounded to six decimal places, and stored.\n    d. The final output is a list of these $\\Delta E$ values, formatted as specified.\n\nThis structured approach ensures that each component of the model is accurately implemented before being integrated into the final simulation for solving the test cases.", "answer": "```python\nimport numpy as np\n\ndef build_log_odds_pwm(length, consensus, p_consensus, p_other, bg_freq, base_map):\n    \"\"\"Constructs a log-odds scoring matrix from PWM specifications.\"\"\"\n    log_odds_matrix = np.zeros((length, 4))\n    for i in range(length):\n        for base, idx in base_map.items():\n            prob = p_consensus if base == consensus[i] else p_other\n            log_odds_matrix[i, idx] = np.log(prob / bg_freq)\n    return log_odds_matrix\n\ndef get_reverse_complement(seq):\n    \"\"\"Computes the reverse-complement of a DNA sequence.\"\"\"\n    complement_map = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n    return \"\".join(complement_map[base] for base in reversed(seq))\n\ndef find_best_site_score(sequence, log_odds_pwm, base_map):\n    \"\"\"Finds the maximum log-odds score for a sequence, scanning both strands.\"\"\"\n    pwm_len = log_odds_pwm.shape[0]\n    if len(sequence)  pwm_len:\n        return 0.0\n\n    max_score = -np.inf\n    \n    sequences_to_scan = [sequence, get_reverse_complement(sequence)]\n\n    for seq in sequences_to_scan:\n        for i in range(len(seq) - pwm_len + 1):\n            window = seq[i:i+pwm_len]\n            current_score = 0.0\n            for j in range(pwm_len):\n                base = window[j]\n                current_score += log_odds_pwm[j, base_map[base]]\n            max_score = max(max_score, current_score)\n\n    return max(0.0, max_score)\n\ndef calculate_expression(s_a, s_r, w_a, w_r, b):\n    \"\"\"Calculates gene expression using the logistic link function.\"\"\"\n    exponent = -(w_a * s_a - w_r * s_r + b)\n    return 1.0 / (1.0 + np.exp(exponent))\n\ndef mutagenizer(sequence, seed, n, p_point, p_ins, p_del, l_max_ins, l_max_del):\n    \"\"\"Applies a series of mutations to a DNA sequence.\"\"\"\n    rng = np.random.default_rng(seed)\n    current_seq = sequence\n    bases = np.array(list('ACGT'))\n\n    for _ in range(n):\n        event_type = rng.choice(['point', 'ins', 'del'], p=[p_point, p_ins, p_del])\n        \n        seq_len = len(current_seq)\n        \n        if event_type == 'point':\n            if seq_len == 0: continue\n            pos = rng.integers(0, seq_len)\n            original_base = current_seq[pos]\n            new_base = rng.choice([b for b in bases if b != original_base])\n            current_seq = current_seq[:pos] + new_base + current_seq[pos+1:]\n        \n        elif event_type == 'ins':\n            pos = rng.integers(0, seq_len + 1)\n            length = rng.integers(1, l_max_ins + 1)\n            insert_seq = \"\".join(rng.choice(bases, size=length))\n            current_seq = current_seq[:pos] + insert_seq + current_seq[pos:]\n            \n        elif event_type == 'del':\n            if seq_len == 0: continue\n            start_pos = rng.integers(0, seq_len)\n            length = rng.integers(1, l_max_del + 1)\n            end_pos = start_pos + length\n            current_seq = current_seq[:start_pos] + current_seq[end_pos:]\n            \n    return current_seq\n\ndef solve():\n    \"\"\"Main function to execute the problem logic.\"\"\"\n    # Constants and Givens\n    BASE_SEQ = \"ATGCGTACGATCGATGACGTACGTACTTGACCTGAACTGCGTATCGATCGTGCACCGATTACAAGCTTAGGCTAATCGAA\"\n    BASE_MAP = {'A': 0, 'C': 1, 'G': 2, 'T': 3}\n    BG_FREQ = 0.25\n\n    # Activator PWM\n    L_A = 6\n    CONSENSUS_A = \"ACGTAC\"\n    P_CONS_A = 0.7\n    P_OTHER_A = 0.1\n    log_pwm_A = build_log_odds_pwm(L_A, CONSENSUS_A, P_CONS_A, P_OTHER_A, BG_FREQ, BASE_MAP)\n\n    # Repressor PWM\n    L_R = 6\n    CONSENSUS_R = \"TGCACC\"\n    P_CONS_R = 0.65\n    P_OTHER_R = 0.35 / 3.0\n    log_pwm_R = build_log_odds_pwm(L_R, CONSENSUS_R, P_CONS_R, P_OTHER_R, BG_FREQ, BASE_MAP)\n    \n    # Expression parameters\n    W_A, W_R, B = 1.0, 1.2, -2.0\n\n    # Test Cases\n    test_cases = [\n        (42, 0, 1.0, 0.0, 0.0, 3, 3),\n        (7, 1, 1.0, 0.0, 0.0, 3, 3),\n        (123, 2, 0.5, 0.25, 0.25, 4, 4),\n        (999, 3, 0.0, 0.0, 1.0, 3, 50),\n        (2024, 2, 0.0, 1.0, 0.0, 6, 3),\n    ]\n\n    # Calculate baseline expression E0\n    s_a0 = find_best_site_score(BASE_SEQ, log_pwm_A, BASE_MAP)\n    s_r0 = find_best_site_score(BASE_SEQ, log_pwm_R, BASE_MAP)\n    e0 = calculate_expression(s_a0, s_r0, W_A, W_R, B)\n    \n    results = []\n    for case in test_cases:\n        seed, n, p_point, p_ins, p_del, l_max_ins, l_max_del = case\n        \n        mutated_seq = mutagenizer(BASE_SEQ, seed, n, p_point, p_ins, p_del, l_max_ins, l_max_del)\n        \n        s_a1 = find_best_site_score(mutated_seq, log_pwm_A, BASE_MAP)\n        s_r1 = find_best_site_score(mutated_seq, log_pwm_R, BASE_MAP)\n        e1 = calculate_expression(s_a1, s_r1, W_A, W_R, B)\n        \n        delta_e = e1 - e0\n        results.append(f\"{delta_e:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2419851"}]}