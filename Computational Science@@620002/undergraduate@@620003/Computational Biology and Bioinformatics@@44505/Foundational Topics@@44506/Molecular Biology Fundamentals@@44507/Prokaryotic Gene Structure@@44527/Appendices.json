{"hands_on_practices": [{"introduction": "Before we can analyze or engineer genes, we must understand their fundamental syntax. This exercise [@problem_id:2058155] presents a common error in gene construct design to reinforce the non-negotiable order of key elements like the promoter and ribosome binding site. Understanding why this sequence is critical for the central dogma to proceed from DNA to protein is a foundational skill in molecular biology and synthetic biology.", "problem": "A synthetic biology student is designing a genetic construct to express a Green Fluorescent Protein (GFP) in the prokaryote *Escherichia coli*. The goal is to have the bacteria produce GFP, causing them to glow under UV light. For expression in prokaryotes, a typical functional gene cassette on the DNA requires several key elements in a specific order. These elements include:\n\n-   A **Promoter**: A DNA region that recruits RNA polymerase to initiate transcription.\n-   A **Ribosome Binding Site (RBS)**: A sequence on the DNA which, when transcribed into messenger RNA (mRNA), serves as the binding site for the ribosome to initiate translation.\n-   A **Coding Sequence (CDS)**: The DNA sequence that encodes the amino acid sequence of the protein. It begins with a start codon and ends with a stop codon.\n-   A **Terminator**: A DNA sequence that signals the end of transcription.\n\nThe student assembles the DNA construct with the following arrangement of elements (read from 5' to 3' on the coding strand):\n\nRBS -> Promoter -> CDS (for GFP) -> Terminator\n\nAfter introducing this construct into *E. coli*, the student observes that the bacterial colonies do not fluoresce, indicating a failure to produce the GFP protein. Which of the following statements provides the most accurate and primary explanation for this result?\n\nA. The terminator sequence is positioned incorrectly, which will cause the ribosome to dissociate from the mRNA prematurely.\nB. The presence of the RBS sequence before the promoter will physically block RNA polymerase from binding to the promoter region.\nC. The mRNA transcript produced from this construct will not contain the RBS sequence, thus preventing the ribosome from binding and initiating translation.\nD. Transcription will fail to terminate properly, leading to an unstable, excessively long mRNA molecule that is quickly degraded.\nE. The start codon within the CDS will be transcribed but not translated because the promoter sequence is not included in the mRNA.", "solution": "In bacterial gene expression, the functional order of elements on the DNA must be Promoter → RBS → CDS → Terminator for proper transcription and translation. The promoter is a DNA element that recruits RNA polymerase and defines the transcription start site; crucially, promoter sequences are not transcribed into the mRNA. The ribosome binding site (e.g., Shine-Dalgarno sequence) must be located on the mRNA upstream of the start codon to recruit the ribosome and correctly position it for translation initiation. Therefore, the RBS must lie downstream of the promoter on the DNA so that it is included in the transcribed mRNA.\n\nGiven the student’s construct order, RBS → Promoter → CDS → Terminator, transcription initiated at the promoter will produce an mRNA that includes the CDS and terminator-derived sequence but excludes the upstream RBS. Consequently, the mRNA lacks an RBS, preventing the ribosome from binding and initiating translation, so no GFP is produced.\n\nEvaluating the options:\n- A is incorrect because the terminator influences transcription termination, not ribosome dissociation during translation.\n- B is incorrect because an RBS upstream of the promoter does not physically block RNA polymerase binding to the promoter.\n- C is correct because the misplacement of the RBS upstream of the promoter prevents its inclusion in the mRNA, abolishing translation initiation.\n- D is incorrect because there is no reason to expect failed transcription termination from the given arrangement.\n- E is incorrect because promoters are normally not included in mRNA and their absence from mRNA does not prevent translation; the critical missing element is the RBS on the mRNA.\n\nTherefore, the primary explanation is that the mRNA lacks the RBS, preventing translation initiation.", "answer": "$$\\boxed{C}$$", "id": "2058155"}, {"introduction": "The genetic code is read in consecutive, non-overlapping groups of three bases called codons, a process that is critically dependent on the starting point, or \"reading frame.\" This practice problem [@problem_id:2058202] provides a hands-on look at what happens when a single base is deleted from a coding sequence. You will see how this simple error causes a frameshift mutation, leading to a completely different and likely non-functional protein.", "problem": "A synthetic biology student is engineering an *Escherichia coli* bacterium to produce a small, custom-designed peptide. The Deoxyribonucleic acid (DNA) sequence corresponding to the coding strand (the 5' to 3' strand that is not used as the template for transcription) for this peptide is as follows:\n\n5'-ATG GCG TTA CCG AGT TGA-3'\n\nDuring plasmid construction, a mutation occurs. DNA sequencing reveals that a single base pair has been deleted, corresponding to the 7th base from the 5' end of the provided coding strand sequence. Assume the start and stop signals for transcription are unaffected.\n\nUsing the provided partial genetic code table, where codons are read from the messenger RNA (mRNA), determine the most likely consequence of this single base pair deletion on the resulting peptide.\n\n**Partial Genetic Code Table (Codon -> Amino Acid):**\n- AGT -> Serine (Ser)\n- ATG -> Methionine (Met, Start)\n- CCG -> Proline (Pro)\n- CGA -> Arginine (Arg)\n- GCG -> Alanine (Ala)\n- GTA -> Valine (Val)\n- GTT -> Valine (Val)\n- TAC -> Tyrosine (Tyr)\n- TGA -> STOP\n- TTA -> Leucine (Leu)\n\nWhich of the following statements best describes the outcome?\n\nA. The resulting protein will be identical to the intended protein, but it will be synthesized at a much lower rate.\nB. The resulting protein will have a single incorrect amino acid (a substitution) but will otherwise be identical to the intended protein.\nC. The first two amino acids of the protein will be correct, but all subsequent amino acids will be different from the intended sequence, likely producing a non-functional protein.\nD. The resulting protein will be shorter than the intended protein due to the immediate introduction of a premature stop codon at the site of the deletion.\nE. No protein will be produced because the deletion damages the start codon.", "solution": "The coding strand is given as 5'-ATG GCG TTA CCG AGT TGA-3'. For translation, the mRNA has the same sequence as the coding strand except that U replaces T, but since the provided table lists triplets using T, we can translate directly using these triplets.\n\nFirst, determine the intended translation by grouping from the start codon:\nATG | GCG | TTA | CCG | AGT | TGA\nUsing the provided table:\nATG → Met, GCG → Ala, TTA → Leu, CCG → Pro, AGT → Ser, TGA → Stop.\nThus, the intended peptide is Met-Ala-Leu-Pro-Ser followed by termination.\n\nA single base deletion occurs at the 7th base from the 5' end. Indexing the original sequence positions:\n1 A, 2 T, 3 G, 4 G, 5 C, 6 G, 7 T, 8 T, 9 A, 10 C, 11 C, 12 G, 13 A, 14 G, 15 T, 16 T, 17 G, 18 A.\nDeleting base 7 (T) yields the new sequence (positions after deletion):\n1 A, 2 T, 3 G, 4 G, 5 C, 6 G, 7 T, 8 A, 9 C, 10 C, 11 G, 12 A, 13 G, 14 T, 15 T, 16 G, 17 A.\nRegrouping into codons from the original start:\nATG | GCG | TAC | CGA | GTT | (GA incomplete)\nTranslating these codons with the provided table:\nATG → Met, GCG → Ala, TAC → Tyr, CGA → Arg, GTT → Val.\nThe first two amino acids (Met, Ala) remain the same as intended because the deletion occurs at the first base of the third codon, but the reading frame shifts at that point. Consequently, all amino acids from the third position onward change relative to the intended sequence. There is no immediate stop codon introduced at the deletion site (the third codon becomes TAC, which codes for Tyr, not a stop), and translation would continue in the new frame until a stop codon is encountered downstream.\n\nTherefore, the most accurate description is that the first two amino acids are correct, but all subsequent amino acids are altered due to a frameshift, likely yielding a non-functional protein.", "answer": "$$\\boxed{C}$$", "id": "2058202"}, {"introduction": "How can we identify functional elements like promoters within an unannotated genome? This advanced practice [@problem_id:2419472] moves from theory to application, challenging you to build a computational program that distinguishes between bacterial and archaeal promoter sequences. By implementing a scoring model based on position-specific probability matrices, you will learn a core bioinformatics technique for scanning vast amounts of DNA data to find these crucial regulatory signals.", "problem": "You are given a binary classification task grounded in prokaryotic promoter architecture. In Bacteria, promoters typically contain a $-35$ box and a $-10$ box, often approximated by the consensus hexamers $TTGACA$ and $TATAAT$ with start-to-start offset near $17$. In Archaea, promoters typically contain a TATA-box (here simplified as the hexamer family $TATAWA$, where $W \\in \\{A,T\\}$). Your task is to write a program that, for each provided Deoxyribonucleic Acid (DNA) sequence over the alphabet $\\Sigma=\\{A,C,G,T\\}$, predicts whether it is more consistent with an archaeal promoter (label $1$) or a bacterial promoter (label $0$) under the motif-based definitions below.\n\nDefinitions:\n\n1. Motif representation. Each motif is represented by a position-specific probability matrix (also called a position weight matrix), one distribution per position over $\\{A,C,G,T\\}$. For a motif with length $\\ell$, define the probability of observing a specific $\\ell$-mer $x_{1:\\ell}$ at a specific start position as the product $\\prod_{p=1}^{\\ell} P(x_p \\mid \\text{motif position } p)$. For numerical stability and comparability, define the per-position average log-likelihood of an $\\ell$-mer under a motif as\n$$\nS(x_{1:\\ell}) \\;=\\; \\frac{1}{\\ell} \\sum_{p=1}^{\\ell} \\log P(x_p \\mid \\text{motif position } p),\n$$\nwhere $\\log$ denotes the natural logarithm.\n\n2. Bacterial promoter model. It consists of two hexamer motifs:\n   - The $-35$ box with consensus $TTGACA$.\n   - The $-10$ box with consensus $TATAAT$.\nFor each of the two motifs, at each position $p \\in \\{1,2,3,4,5,6\\}$, the probability of the consensus nucleotide is $0.8$ and the probability of each non-consensus nucleotide is $0.06666666666666667$ (so that probabilities sum to $1.0$ at each position). A bacterial promoter instance in a sequence occurs when a $-35$ box starts at index $i$ and a $-10$ box starts at index $j$ with $j-i \\in \\{16,17,18\\}$ and both motifs are fully contained within the sequence bounds. The score of a specific bacterial instance is the average of the per-position log-likelihoods across the two hexamers, that is\n$$\nS_{\\text{bact}}(i,j) \\;=\\; \\frac{1}{12} \\Bigg( \\sum_{p=1}^{6} \\log P_{-35}(x_{i+p-1},p) \\;+\\; \\sum_{p=1}^{6} \\log P_{-10}(x_{j+p-1},p) \\Bigg).\n$$\nThe bacterial model score for a sequence is the maximum value of $S_{\\text{bact}}(i,j)$ over all valid $(i,j)$ satisfying $j-i \\in \\{16,17,18\\}$.\n\n3. Archaeal promoter model. It consists of a single hexamer TATA-box motif with consensus pattern $TATAWA$. At positions $p \\in \\{1,2,3,4,6\\}$ the probability of the consensus nucleotide is $0.8$ and the probability of each non-consensus nucleotide is $0.06666666666666667$. At position $p=5$, the probabilities are $P(A)=0.4$, $P(T)=0.4$, $P(C)=0.1$, $P(G)=0.1$. An archaeal promoter instance starts at any index $k$ such that the hexamer is fully contained within the sequence bounds. Its score is\n$$\nS_{\\text{arch}}(k) \\;=\\; \\frac{1}{6} \\sum_{p=1}^{6} \\log P_{\\text{TATA}}(x_{k+p-1},p).\n$$\nThe archaeal model score for a sequence is the maximum value of $S_{\\text{arch}}(k)$ over all valid $k$.\n\n4. Classification rule. For each sequence, compute its bacterial model score (maximum average log-likelihood across valid pairs) and its archaeal model score (maximum average log-likelihood across valid starts). If the archaeal model score is strictly greater than the bacterial model score by at least a tolerance of $\\epsilon = 10^{-12}$, output the integer $1$. If the bacterial model score exceeds the archaeal model score by at least $\\epsilon$, output the integer $0$. In case the absolute difference is less than $\\epsilon$, output the integer $0$.\n\nInput data (test suite):\n\nYou must classify the following DNA sequences (each is a single contiguous string over $\\{A,C,G,T\\}$):\n\n- Case $1$ (typical bacterial with $-35/-10$ pair and spacing near $17$):\n  \"ACGTATTGACAGCCGAGTTCGATATAATGCGTACCGTAGCGTGATCGGCTAACGTCG\"\n\n- Case $2$ (typical archaeal with prominent TATA-box instances):\n  \"GCGGATCGTCTATAAATATATAAGCCGATCGATCGTACG\"\n\n- Case $3$ (contains $-35$ and $-10$ boxes, but not at allowed spacing; contains TATA-box signal):\n  \"AAACTTGACAGGGGGTATAATCCCCCTATAAAGGGG\"\n\n- Case $4$ (edge case with no clear motifs; GC-rich background):\n  \"GCGCGGCGGCCGCGGCGCCGCGGCGCCGCGGCG\"\n\n- Case $5$ (bacterial-like with a single-base mutation in the $-10$ box at allowed spacing):\n  \"TTTATTTGACACCCCCCCCCCCTATGATAAAAAAAAAAA\"\n\nFinal output format:\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The list must contain one integer per case, in the same order as above. For example, a valid output for five cases has the form \"[a,b,c,d,e]\" where each of $a,b,c,d,e$ is either $0$ or $1$.", "solution": "The task is to classify a given Deoxyribonucleic Acid (DNA) sequence, drawn from the alphabet $\\Sigma=\\{A,C,G,T\\}$, as being more consistent with a bacterial promoter model (label $0$) or an archaeal promoter model (label $1$). The classification decision rests on a comparison of scores, where each score represents the maximum per-position average log-likelihood of a sequence segment under the respective model.\n\nFirst, we formalize the models by constructing Position-Specific Probability Matrices (PSPMs) for the given motifs. For numerical stability and computational convenience, we will work with the natural logarithm of these probabilities, thus forming log-PSPMs. An alphabet mapping is defined as $\\{'A':0, 'C':1, 'G':2, 'T':3\\}$. The probability for a consensus nucleotide is $P_{cons} = 0.8$, and for each of the three non-consensus nucleotides, it is $P_{non-cons} = (1 - P_{cons})/3 = 1/15$.\n\nThe bacterial model involves two hexameric motifs:\n1.  The $-35$ box with consensus $TTGACA$.\n2.  The $-10$ box with consensus $TATAAT$.\n\nThe log-PSPM for each of these $6 \\times 4$ matrices is constructed by assigning $\\log(0.8)$ to the matrix entry corresponding to the consensus nucleotide at each position and $\\log(1/15)$ to the entries for non-consensus nucleotides.\n\nThe archaeal model uses a single hexameric TATA-box motif with consensus $TATAWA$.\nThe log-PSPM for this motif is constructed similarly, with the exception of position $5$ (corresponding to 'W', which means 'A' or 'T'). At this position, the specified probabilities are $P(A)=0.4$, $P(T)=0.4$, $P(C)=0.1$, and $P(G)=0.1$. The corresponding log-probabilities are used for the fifth row of the TATA-box log-PSPM.\n\nWith the log-PSPMs defined, we design algorithms to compute the score for each model.\n\nTo compute the archaeal model score, $S_A$, for a given DNA sequence of length $L$:\nWe must find the maximum score over all possible instances of the TATA-box motif. An instance can start at any index $k$ such that the hexamer is contained within the sequence, i.e., $k \\in \\{0, 1, \\dots, L-6\\}$.\nThe score for an instance starting at $k$, which corresponds to the subsequence $x_{k:k+6}$, is given by the formula:\n$$S_{\\text{arch}}(k) = \\frac{1}{6} \\sum_{p=1}^{6} \\log P_{\\text{TATA}}(x_{k+p-1}, p)$$\nWe initialize a maximum score variable, $S_{A,max}$, to $-\\infty$. Then, we iterate $k$ from $0$ to $L-6$. In each iteration, we calculate $S_{\\text{arch}}(k)$ by summing the appropriate log-probabilities from the TATA-box log-PSPM for the 6-mer starting at $k$. We update $S_{A,max} = \\max(S_{A,max}, S_{\\text{arch}}(k))$. If the sequence length $L < 6$, no instances are possible, and the score remains $-\\infty$. The final archaeal score for the sequence is $S_A = S_{A,max}$.\n\nTo compute the bacterial model score, $S_B$, for a sequence of length $L$:\nWe must find the maximum score over all validly spaced pairs of $-35$ and $-10$ boxes. A bacterial promoter instance is defined by a pair of start indices $(i,j)$ for the $-35$ and $-10$ boxes, respectively, where the spacing constraint $j-i \\in \\{16, 17, 18\\}$ holds. Both motifs must be fully contained within the sequence.\nThe score for a specific pair $(i,j)$ is:\n$$S_{\\text{bact}}(i,j) = \\frac{1}{12} \\left( \\sum_{p=1}^{6} \\log P_{-35}(x_{i+p-1}, p) + \\sum_{p=1}^{6} \\log P_{-10}(x_{j+p-1}, p) \\right)$$\nWe initialize a maximum score variable, $S_{B,max}$, to $-\\infty$. We iterate through all possible start indices $i$ for the $-35$ box. For each $i$, we iterate through the allowed spacings $d \\in \\{16, 17, 18\\}$. We calculate the corresponding start index for the $-10$ box, $j=i+d$. We then check if both motifs, starting at $i$ and $j$, are within the sequence bounds (i.e., $i+6 \\le L$ and $j+6 \\le L$). If the pair is valid, we compute $S_{\\text{bact}}(i,j)$ by summing the log-probabilities from the respective log-PSPMs and dividing by the total length, $12$. We update $S_{B,max} = \\max(S_{B,max}, S_{\\text{bact}}(i,j))$. If no valid pair $(i,j)$ exists, the score remains $-\\infty$. The final bacterial score for the sequence is $S_B = S_{B,max}$.\n\nFinally, the classification rule is applied. Given the computed scores $S_A$ and $S_B$ and the tolerance $\\epsilon = 10^{-12}$:\n- If $S_A > S_B + \\epsilon$, the sequence is classified as archaeal, and the output is $1$.\n- Otherwise (i.e., if $S_B \\ge S_A - \\epsilon$), the sequence is classified as bacterial, and the output is $0$. This case correctly includes both $S_B$ being substantially larger than $S_A$ and the cases where their absolute difference is less than or equal to $\\epsilon$.\n\nThis entire procedure is implemented in a single program that processes the provided test cases and outputs the resulting classifications in the specified format. The use of NumPy allows for efficient vector-based calculations of the motif scores.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the prokaryotic promoter classification problem.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        \"ACGTATTGACAGCCGAGTTCGATATAATGCGTACCGTAGCGTGATCGGCTAACGTCG\",\n        \"GCGGATCGTCTATAAATATATAAGCCGATCGATCGTACG\",\n        \"AAACTTGACAGGGGGTATAATCCCCCTATAAAGGGG\",\n        \"GCGCGGCGGCCGCGGCGCCGCGGCGCCGCGGCG\",\n        \"TTTATTTGACACCCCCCCCCCCTATGATAAAAAAAAAAA\",\n    ]\n\n    # --- Model and Algorithm Implementation ---\n\n    # Define base mapping to indices for matrix lookup\n    base_map = {'A': 0, 'C': 1, 'G': 2, 'T': 3}\n    \n    def create_log_pspm(consensus, special_pos=None):\n        \"\"\"\n        Creates a log-Position Specific Probability Matrix (log-PSPM).\n        \n        Args:\n            consensus (str): The consensus sequence for the motif.\n            special_pos (dict): A dictionary for positions with special probabilities.\n                                Format: {pos_index: {'A':p, 'C':p, 'G':p, 'T':p}}\n        \n        Returns:\n            np.ndarray: A 6x4 numpy array of log-probabilities.\n        \"\"\"\n        motif_len = len(consensus)\n        log_pspm = np.zeros((motif_len, 4))\n        \n        p_cons = 0.8\n        p_non_cons = (1.0 - p_cons) / 3.0\n        \n        lp_cons = np.log(p_cons)\n        lp_non_cons = np.log(p_non_cons)\n\n        base_to_vec = {\n            'A': np.array([lp_cons, lp_non_cons, lp_non_cons, lp_non_cons]),\n            'C': np.array([lp_non_cons, lp_cons, lp_non_cons, lp_non_cons]),\n            'G': np.array([lp_non_cons, lp_non_cons, lp_cons, lp_non_cons]),\n            'T': np.array([lp_non_cons, lp_non_cons, lp_non_cons, lp_cons]),\n        }\n\n        for i, base in enumerate(consensus):\n            if special_pos and i in special_pos:\n                probs = special_pos[i]\n                log_pspm[i, :] = np.log(np.array([probs['A'], probs['C'], probs['G'], probs['T']]))\n            else:\n                log_pspm[i, :] = base_to_vec[base]\n                \n        return log_pspm\n\n    # Create log-PSPMs for all motifs\n    log_pspm_35 = create_log_pspm(\"TTGACA\")\n    log_pspm_10 = create_log_pspm(\"TATAAT\")\n    \n    # Special probabilities for the 'W' at position 5 (0-indexed 4) of TATAWA\n    tata_special = {4: {'A': 0.4, 'T': 0.4, 'C': 0.1, 'G': 0.1}}\n    log_pspm_tata = create_log_pspm(\"TATAWA\", tata_special)\n    \n    def get_archaeal_score(sequence, log_pspm, base_map):\n        \"\"\"Calculates the maximum archaeal model score for a sequence.\"\"\"\n        seq_len = len(sequence)\n        motif_len = 6\n        if seq_len < motif_len:\n            return -np.inf\n            \n        max_score = -np.inf\n        \n        indices = np.array([base_map[b] for b in sequence], dtype=int)\n        \n        for k in range(seq_len - motif_len + 1):\n            subseq_indices = indices[k : k + motif_len]\n            # Sum of log-probabilities for the 6-mer\n            current_sum_log_p = log_pspm[np.arange(motif_len), subseq_indices].sum()\n            # Per-position average log-likelihood\n            current_score = current_sum_log_p / motif_len\n            if current_score > max_score:\n                max_score = current_score\n        \n        return max_score\n\n    def get_bacterial_score(sequence, log_pspm35, log_pspm10, base_map):\n        \"\"\"Calculates the maximum bacterial model score for a sequence.\"\"\"\n        seq_len = len(sequence)\n        motif_len = 6\n        spacings = [16, 17, 18]\n        \n        # Minimum length required for a valid pair with max spacing\n        if seq_len < motif_len + spacings[-1] + motif_len:\n            # Check if any smaller spacing is possible\n            if seq_len < motif_len + spacings[0] + motif_len:\n                 return -np.inf\n\n        max_score = -np.inf\n\n        indices = np.array([base_map[b] for b in sequence], dtype=int)\n\n        for i in range(seq_len - motif_len + 1):\n            sum_log_p_35 = log_pspm35[np.arange(motif_len), indices[i:i+motif_len]].sum()\n            \n            for d in spacings:\n                j = i + d\n                if j + motif_len <= seq_len:\n                    sum_log_p_10 = log_pspm10[np.arange(motif_len), indices[j:j+motif_len]].sum()\n                    \n                    # Total average log-likelihood over 12 positions\n                    current_score = (sum_log_p_35 + sum_log_p_10) / (2 * motif_len)\n                    if current_score > max_score:\n                        max_score = current_score\n        \n        return max_score\n\n    # --- Main Classification Loop ---\n    \n    results = []\n    epsilon = 1e-12\n\n    for seq in test_cases:\n        s_arch = get_archaeal_score(seq, log_pspm_tata, base_map)\n        s_bact = get_bacterial_score(seq, log_pspm_35, log_pspm_10, base_map)\n        \n        if s_arch > s_bact + epsilon:\n            results.append(1)\n        else:\n            results.append(0)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2419472"}]}