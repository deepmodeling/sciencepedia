{"hands_on_practices": [{"introduction": "Effective gene regulation often hinges on competition, where multiple promoters may vie for the attention of a single shared enhancer. This exercise explores how to quantify the outcome of such competition using the principles of thermodynamic equilibrium. By modeling the system as a set of reversible binding reactions, we can calculate the probability that the enhancer is engaged with a specific promoter, providing a quantitative basis for understanding regulatory logic [@problem_id:2436287].", "problem": "A single genomic enhancer can contact promoters via chromatin looping and activate transcription only when it is physically engaged with one promoter. Consider an enhancer, denoted by $E$, located in a gene-dense region with three nearby promoters $P_{1}$, $P_{2}$, and $P_{3}$. The enhancer can be in exactly one of the following mutually exclusive states: unbound, bound to $P_{1}$, bound to $P_{2}$, or bound to $P_{3}$. Binding between $E$ and each promoter $P_{i}$ is described by the reversible reaction $E + P_{i} \\rightleftharpoons C_{i}$, where $C_{i}$ is the enhancer–promoter complex. At thermodynamic equilibrium, the equilibrium dissociation constant is defined by $K_{i} = \\frac{[E][P_{i}]}{[C_{i}]}$ for $i \\in \\{1,2,3\\}$.\n\nAssume:\n- The enhancer is unique, so the total enhancer concentration $[E]_{\\mathrm{T}}$ is such that only a single binding event can occur at a time.\n- Each promoter $P_{i}$ is effectively present at a constant local concentration $c_{i}$ that reflects its three-dimensional encounter frequency with the enhancer (effective molarity).\n- The system is well mixed on the relevant scale and obeys the law of mass action.\n- Binding of the enhancer to any one promoter does not significantly perturb the effective concentrations $c_{i}$ of the others.\n\nYou are given the following experimentally determined parameters, expressed in nanomolar (nM):\n- $c_{1} = 100~\\text{nM}$, $c_{2} = 50~\\text{nM}$, $c_{3} = 200~\\text{nM}$,\n- $K_{1} = 10~\\text{nM}$, $K_{2} = 25~\\text{nM}$, $K_{3} = 100~\\text{nM}$.\n\nUnder these assumptions, what is the equilibrium probability that the enhancer is bound to promoter $P_{1}$? Provide your answer as a dimensionless decimal number, rounded to four significant figures.", "solution": "The problem asks for the equilibrium probability of an enhancer $E$ being bound to a specific promoter $P_{1}$ in a system where it can also be unbound or bound to two other promoters, $P_{2}$ and $P_{3}$. This is a classic problem of competitive binding at thermodynamic equilibrium, which can be solved using the principles of statistical mechanics.\n\nThe system has four mutually exclusive states for the enhancer:\n1.  Unbound, which we denote as state $S_{0}$. The species is the free enhancer, $E$.\n2.  Bound to promoter $P_{1}$, forming complex $C_{1}$. We denote this as state $S_{1}$.\n3.  Bound to promoter $P_{2}$, forming complex $C_{2}$. We denote this as state $S_{2}$.\n4.  Bound to promoter $P_{3}$, forming complex $C_{3}$. We denote this as state $S_{3}$.\n\nThe probability of the enhancer being in any particular state $S_{i}$ is proportional to the concentration of the corresponding species at equilibrium. Let $p_{i}$ be the probability of being in state $S_{i}$. Then:\n$p_{0} \\propto [E]$\n$p_{1} \\propto [C_{1}]$\n$p_{2} \\propto [C_{2}]$\n$p_{3} \\propto [C_{3}]$\n\nThe total probability must sum to $1$: $p_{0} + p_{1} + p_{2} + p_{3} = 1$.\n\nTo find the relationship between the concentrations of the different species, we use the given equilibrium dissociation constants, $K_{i} = \\frac{[E][P_{i}]}{[C_{i}]}$. We can rearrange this to express the concentration of each complex $[C_{i}]$ in terms of the concentration of the free enhancer $[E]$:\n$$[C_{i}] = \\frac{[E][P_{i}]}{K_{i}}$$\n\nThe problem states that each promoter $P_{i}$ is present at a constant effective concentration, denoted by $c_{i}$. Therefore, we can substitute $[P_{i}] = c_{i}$:\n$$[C_{1}] = \\frac{[E]c_{1}}{K_{1}}$$\n$$[C_{2}] = \\frac{[E]c_{2}}{K_{2}}$$\n$$[C_{3}] = \\frac{[E]c_{3}}{K_{3}}$$\n\nThe probability of finding the enhancer in a specific state is the concentration of that state's species divided by the total concentration of all species containing the enhancer. The total concentration of the enhancer in all its possible forms is $[E]_{\\mathrm{T}} = [E] + [C_{1}] + [C_{2}] + [C_{3}]$.\n\nThe probability of the enhancer being bound to promoter $P_{1}$ is given by:\n$$p_{1} = \\frac{[C_{1}]}{[E]_{\\mathrm{T}}} = \\frac{[C_{1}]}{[E] + [C_{1}] + [C_{2}] + [C_{3}]}$$\n\nWe can express all terms in the denominator as a function of the free enhancer concentration $[E]$:\n$$p_{1} = \\frac{\\frac{[E]c_{1}}{K_{1}}}{[E] + \\frac{[E]c_{1}}{K_{1}} + \\frac{[E]c_{2}}{K_{2}} + \\frac{[E]c_{3}}{K_{3}}}$$\n\nThe term $[E]$ is common to all terms in the numerator and denominator, and thus it cancels out. This is a key insight from statistical mechanics: the absolute concentration of the reference state does not affect the relative probabilities.\n$$p_{1} = \\frac{\\frac{c_{1}}{K_{1}}}{1 + \\frac{c_{1}}{K_{1}} + \\frac{c_{2}}{K_{2}} + \\frac{c_{3}}{K_{3}}}$$\n\nThis expression is equivalent to the formulation using a partition function, $Z$. The statistical weight of the unbound state is taken as $W_{0} = 1$. The statistical weights of the bound states are $W_{i} = \\frac{c_{i}}{K_{i}}$. The partition function is the sum of all statistical weights: $Z = W_{0} + W_{1} + W_{2} + W_{3}$. The probability of any state $i$ is $p_{i} = \\frac{W_{i}}{Z}$. For the state $S_{1}$, this is precisely the formula derived above.\n\nNow, we substitute the given numerical values into the expression.\nGiven parameters are:\n- $c_{1} = 100~\\text{nM}$\n- $c_{2} = 50~\\text{nM}$\n- $c_{3} = 200~\\text{nM}$\n- $K_{1} = 10~\\text{nM}$\n- $K_{2} = 25~\\text{nM}$\n- $K_{3} = 100~\\text{nM}$\n\nFirst, we calculate the dimensionless ratios $\\frac{c_{i}}{K_{i}}$:\n$$\\frac{c_{1}}{K_{1}} = \\frac{100}{10} = 10$$\n$$\\frac{c_{2}}{K_{2}} = \\frac{50}{25} = 2$$\n$$\\frac{c_{3}}{K_{3}} = \\frac{200}{100} = 2$$\n\nNow, we can compute the probability $p_{1}$:\n$$p_{1} = \\frac{10}{1 + 10 + 2 + 2} = \\frac{10}{15}$$\n\nSimplifying the fraction gives:\n$$p_{1} = \\frac{2}{3}$$\n\nThe problem requires the answer as a decimal number rounded to four significant figures.\n$$p_{1} = \\frac{2}{3} \\approx 0.666666...$$\nRounding to four significant figures, we get $0.6667$.\nThis is the equilibrium probability that the enhancer is bound to promoter $P_{1}$.", "answer": "$$\\boxed{0.6667}$$", "id": "2436287"}, {"introduction": "For transcription to begin, a transcription factor must first locate its specific target sequence within the vast landscape of the genome. This fundamental search process can be modeled as a one-dimensional random walk along the DNA polymer, where the factor slides along the DNA but also faces the risk of detaching completely. This practice [@problem_id:2436198] allows you to build a computational model to determine the probability and expected time of a successful search, offering a window into the physical principles that govern protein-DNA targeting.", "problem": "A transcription factor scanning along a deoxyribonucleic acid (DNA) polymer can be idealized as a continuous-time, one-dimensional random walk on a discrete lattice of sites $\\{0,1,\\dots,L-1\\}$. There is a unique target site at index $s^{\\star}$; when the factor reaches $s^{\\star}$, the search terminates in success. From any non-target site $i$, the factor attempts to move one site to the left with rate $k_{\\ell}$ and one site to the right with rate $k_{r}$, and it can dissociate (unbind) from DNA irreversibly with rate $k_{\\mathrm{off}}$. The boundaries at $i=0$ and $i=L-1$ are reflecting: a left move attempt at $i=0$ does not change the position, and a right move attempt at $i=L-1$ does not change the position; these reflected moves do not occur and should be modeled by absence of those transitions rather than by self-transitions. The target site $s^{\\star}$ is absorbing for success, meaning that once reached, the process stops immediately and no dissociation occurs thereafter. All rates are constants in units of $\\mathrm{s}^{-1}$, and time must be reported in seconds.\n\nFor a given starting site $i_{0}$, define the following two quantities:\n- The probability $p(i_{0})$ that the process reaches $s^{\\star}$ before dissociation.\n- The conditional mean search time $m(i_{0}) = \\mathbb{E}[T \\mid \\text{reach } s^{\\star} \\text{ before dissociation}, X(0)=i_{0}]$, where $T$ is the time to reach $s^{\\star}$ and $X(0)$ is the initial position. If $p(i_{0})=0$, define $m(i_{0})=0$.\n\nAssume symmetric sliding rates $k_{\\ell}=k_{r}=k$ in all test cases below. Your program must compute, for each test case, the pair of real numbers $\\big(p(i_{0}), m(i_{0})\\big)$, with $m(i_{0})$ expressed in seconds. Each real number must be rounded to exactly six digits after the decimal point.\n\nTest suite parameters are as follows, each specified as a tuple $(L, s^{\\star}, i_{0}, k, k_{\\mathrm{off}})$ with all integers and reals given explicitly:\n- Case A (general interior target): $(L,s^{\\star},i_{0},k,k_{\\mathrm{off}}) = (21, 10, 0, 100.0, 1.0)$.\n- Case B (starting at target): $(L,s^{\\star},i_{0},k,k_{\\mathrm{off}}) = (21, 10, 10, 100.0, 1.0)$.\n- Case C (far target with strong dissociation): $(L,s^{\\star},i_{0},k,k_{\\mathrm{off}}) = (21, 20, 0, 50.0, 50.0)$.\n- Case D (minimal lattice without dissociation): $(L,s^{\\star},i_{0},k,k_{\\mathrm{off}}) = (2, 1, 0, 2.0, 0.0)$.\n\nYour program should produce a single line of output containing the results aggregated in order, as a comma-separated list enclosed in square brackets, with no spaces. The list must contain the two floats for each test case in the order listed above, i.e., $[p(\\text{A}), m(\\text{A}), p(\\text{B}), m(\\text{B}), p(\\text{C}), m(\\text{C}), p(\\text{D}), m(\\text{D})]$, where each float is rounded to six digits after the decimal point.", "solution": "We will derive the systems of linear equations governing the success probability $p(i)$ and the conditional mean search time $m(i)$ for any starting site $i \\in \\mathcal{S}$.\n\n**1. Success Probability $p(i)$**\n\nLet $p_i$ denote the probability of eventually reaching the target site $s^{\\star}$ starting from site $i$. By definition, if the process starts at the target, it has succeeded, so we have the boundary condition $p_{s^{\\star}} = 1$. For any non-target site $i \\neq s^{\\star}$, we can write a master equation for $p_i$ based on the outcome of the first step. The total rate of leaving site $i$ is $\\lambda_i$.\n- For an interior site $i \\in \\{1, \\dots, L-2\\}$, $\\lambda_i = k+k+k_{\\mathrm{off}} = 2k+k_{\\mathrm{off}}$.\n- For a boundary site $i \\in \\{0, L-1\\}$, $\\lambda_i = k+k_{\\mathrm{off}}$.\n\nConditioning on the first move, $p_i$ is the weighted average of the success probabilities from the subsequent sites:\n$p_i = \\sum_{j} \\frac{k_{i \\to j}}{\\lambda_i} p_j$.\nThe transition to a dissociated state has a success probability of $0$.\n\nFor an interior site $i \\in \\{1, \\dots, L-2\\}$ (where $i \\neq s^{\\star}$):\n$$ (2k+k_{\\mathrm{off}})p_i = k p_{i-1} + k p_{i+1} $$\nFor the boundary at $i=0$ (if $0 \\neq s^{\\star}$):\n$$ (k+k_{\\mathrm{off}})p_0 = k p_1 $$\nFor the boundary at $i=L-1$ (if $L-1 \\neq s^{\\star}$):\n$$ (k+k_{\\mathrm{off}})p_{L-1} = k p_{L-2} $$\n\nThese relations form a system of $L-1$ linear equations for the $L-1$ unknown probabilities $\\{p_i\\}_{i \\in \\mathcal{S} \\setminus \\{s^{\\star}\\}}$. The system may be written in matrix form $A\\mathbf{p} = \\mathbf{b}$, where $\\mathbf{p}$ is the vector of unknown probabilities. The matrix $A$ is tridiagonal, and the vector $\\mathbf{b}$ contains terms arising from transitions to the known state $p_{s^\\star}=1$. A special case is when $k_{\\mathrm{off}}=0$; in this scenario, dissociation is impossible, so the particle must eventually find the target, yielding $p_i = 1$ for all $i$.\n\n**2. Conditional Mean Search Time $m(i)$**\n\nLet $m_i$ be the conditional mean time to reach $s^{\\star}$ starting from $i$, given that the search is successful. By definition, $m_{s^{\\star}}=0$. For a rigorous derivation, it is convenient to first solve for the unnormalized conditional mean time, $M_i = p_i m_i$. This quantity obeys a similar set of linear equations, but with an inhomogeneous source term related to the mean residence time at each site.\n\nFor any site $i \\neq s^{\\star}$, the governing equation for $M_i$ is:\n$$ \\lambda_i M_i = p_i + \\sum_{j \\text{ (neighbor)}} k_{i \\to j} M_j $$\nThis equation states that the flux of \"successful time\" out of a state equals the contribution from staying in that state (mean residence time $1/\\lambda_i$, weighted by success probability $p_i$) plus the flux of successful time from neighboring states.\n\nFor an interior site $i \\in \\{1, \\dots, L-2\\}$ (where $i \\neq s^{\\star}$):\n$$ (2k+k_{\\mathrm{off}})M_i = p_i + k M_{i-1} + k M_{i+1} \\implies k M_{i-1} - (2k+k_{\\mathrm{off}})M_i + k M_{i+1} = -p_i $$\nFor the boundary at $i=0$ (if $0 \\neq s^{\\star}$):\n$$ (k+k_{\\mathrm{off}})M_0 = p_0 + k M_1 \\implies -(k+k_{\\mathrm{off}})M_0 + k M_1 = -p_0 $$\nFor the boundary at $i=L-1$ (if $L-1 \\neq s^{\\star}$):\n$$ (k+k_{\\mathrm{off}})M_{L-1} = p_{L-1} + k M_{L-2} \\implies k M_{L-2} - (k+k_{\\mathrm{off}})M_{L-1} = -p_{L-1} $$\n\nThis is a system of $L-1$ linear equations for the unknowns $\\{M_i\\}_{i \\in \\mathcal{S} \\setminus \\{s^{\\star}\\}}$. Crucially, the matrix of coefficients on the left-hand side is identical to the matrix $A$ from the probability calculation. The right-hand side vector is now simply the negative of the solution vector $\\mathbf{p}$ (for the corresponding unknown sites). The boundary condition is $M_{s^{\\star}} = p_{s^{\\star}}m_{s^{\\star}} = 1 \\cdot 0 = 0$.\n\n**Algorithm**\nThe solution for $(p(i_0), m(i_0))$ is found via the following steps:\n1.  For a given test case $(L, s^{\\star}, i_{0}, k, k_{\\mathrm{off}})$, check for the trivial starting condition $i_{0} = s^{\\star}$. If true, the result is $(1.0, 0.0)$.\n2.  If $k_{\\mathrm{off}} = 0$, set all $p_i = 1$. Otherwise, construct the $(L-1) \\times (L-1)$ matrix $A$ and right-hand side vector $\\mathbf{b}_p$ for the probabilities $\\{p_i\\}_{i \\neq s^{\\star}}$. Solve the linear system $A\\mathbf{p} = \\mathbf{b}_p$.\n3.  Construct the right-hand side vector $\\mathbf{b}_M = -\\mathbf{p}$ using the computed probabilities for the unknown sites.\n4.  Solve the linear system $A\\mathbf{M} = \\mathbf{b}_M$ for the unnormalized times $\\{M_i\\}_{i \\neq s^{\\star}}$. The matrix $A$ is the same as in step 2.\n5.  For the specified starting site $i_{0}$, compute the conditional mean search time $m(i_{0}) = M_{i_0} / p(i_{0})$. If $p(i_0)=0$, $m(i_0)=0$ by definition.\n6.  Return the pair $(p(i_{0}), m(i_{0}))$.\n\nThis procedure will be implemented for each test case.", "answer": "```python\nimport numpy as np\n\ndef _calculate_pair(L, s_star, i0, k, k_off):\n    \"\"\"\n    Calculates the success probability and conditional mean search time for a given\n    set of parameters by solving the corresponding systems of linear equations.\n\n    Args:\n        L (int): The number of sites on the DNA lattice, {0, 1, ..., L-1}.\n        s_star (int): The index of the target site.\n        i0 (int): The index of the starting site.\n        k (float): The symmetric hopping rate (k_l = k_r = k).\n        k_off (float): The dissociation rate.\n\n    Returns:\n        tuple[float, float]: A pair (p(i0), m(i0)) containing the success probability\n                             and the conditional mean search time.\n    \"\"\"\n    # Trivial case: starting at the target site.\n    if i0 == s_star:\n        return 1.0, 0.0\n\n    # Define the set of sites with unknown probabilities and times.\n    unknown_sites = [i for i in range(L) if i != s_star]\n    site_to_idx = {site: i for i, site in enumerate(unknown_sites)}\n    N = len(unknown_sites)\n\n    # =========================================================================\n    # Step 1: Solve for success probabilities p_i\n    # =========================================================================\n    p_vec_full = np.zeros(L)\n    \n    # Case with no dissociation: success is guaranteed.\n    if k_off == 0:\n        p_vec_full.fill(1.0)\n    else:\n        # Construct the linear system A*p = b for p_i where i != s_star.\n        A = np.zeros((N, N))\n        b = np.zeros(N)\n\n        for i in unknown_sites:\n            j = site_to_idx[i]\n            \n            # The diagonal element is the negative total rate of leaving site i.\n            rate_out = k_off\n            if i > 0: rate_out += k\n            if i  L - 1: rate_out += k\n            A[j, j] = -rate_out\n\n            # Off-diagonal elements represent transitions from neighbors.\n            # If a neighbor is the target, its contribution (k*p_s_star) goes to the RHS.\n            if i > 0:\n                pred = i - 1\n                if pred == s_star:\n                    b[j] -= k\n                else:\n                    A[j, site_to_idx[pred]] = k\n            \n            if i  L - 1:\n                succ = i + 1\n                if succ == s_star:\n                    b[j] -= k\n                else:\n                    A[j, site_to_idx[succ]] = k\n\n        p_sol = np.linalg.solve(A, b)\n\n        # Populate the full probability vector.\n        p_vec_full[s_star] = 1.0\n        for i, val in zip(unknown_sites, p_sol):\n            p_vec_full[i] = val\n    \n    p_i0 = p_vec_full[i0]\n    # If success is impossible, mean time is 0 by definition.\n    if p_i0 == 0:\n        return 0.0, 0.0\n\n    # =========================================================================\n    # Step 2: Solve for unnormalized mean times M_i = p_i * m_i\n    # =========================================================================\n    # The matrix A is identical to the one for probabilities.\n    # Re-construct it if it wasn't built (for k_off=0 case).\n    if k_off > 0:\n        pass  # A is already built\n    else:\n        A = np.zeros((N, N))\n        for i in unknown_sites:\n            j = site_to_idx[i]\n            rate_out = 0.0\n            if i > 0: rate_out += k\n            if i  L - 1: rate_out += k\n            A[j, j] = -rate_out\n            if i > 0 and (i - 1) != s_star: A[j, site_to_idx[i-1]] = k\n            if i  L - 1 and (i + 1) != s_star: A[j, site_to_idx[i+1]] = k\n\n    # The RHS is -p_i for each unknown site.\n    p_unknowns = np.array([p_vec_full[i] for i in unknown_sites])\n    b_M = -p_unknowns\n\n    M_sol = np.linalg.solve(A, b_M)\n\n    M_vec_full = np.zeros(L)\n    # M_s_star = 0 by definition.\n    for i, val in zip(unknown_sites, M_sol):\n        M_vec_full[i] = val\n\n    # =========================================================================\n    # Step 3: Calculate conditional mean times m_i = M_i / p_i\n    # =========================================================================\n    m_i0 = M_vec_full[i0] / p_i0\n    \n    return p_i0, m_i0\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print results.\n    \"\"\"\n    test_cases = [\n        # Case A: (L, s_star, i0, k, k_off)\n        (21, 10, 0, 100.0, 1.0),\n        # Case B\n        (21, 10, 10, 100.0, 1.0),\n        # Case C\n        (21, 20, 0, 50.0, 50.0),\n        # Case D\n        (2, 1, 0, 2.0, 0.0),\n    ]\n\n    results = []\n    for case in test_cases:\n        L, s_star, i0, k, k_off = case\n        p, m = _calculate_pair(L, s_star, i0, k, k_off)\n        results.extend([p, m])\n\n    # Format output as a list of strings rounded to 6 decimal places.\n    formatted_results = [f\"{x:.6f}\" for x in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2436198"}, {"introduction": "At highly expressed genes, transcription is a dynamic process with a steady flow of RNA polymerase (RNAP) molecules initiating and elongating. This high traffic can lead to congestion, particularly at common bottleneck points like the promoter-proximal pause site. This problem [@problem_id:2436273] introduces queuing theory as a powerful framework to model and analyze these RNAP \"traffic jams,\" allowing you to derive key properties of the system, such as the probability of observing significant congestion based on the rates of polymerase arrival and clearance.", "problem": "A single highly active eukaryotic gene exhibits promoter-proximal pausing and clearance that creates a bottleneck for ribonucleic acid (RNA) polymerase II. Model the promoter-proximal region as a single service channel that admits one polymerase at a time into productive elongation, with the following assumptions that connect transcriptional kinetics to a canonical queuing model. Polymerase initiation attempts occur as a Poisson process with rate $\\lambda$ (arrivals per minute). The promoter-proximal clearance time for a bound polymerase is exponentially distributed with rate $\\mu$ (services per minute). Polymerases that arrive when the promoter-proximal site is occupied wait in a first-in, first-out line along the promoter-proximal region; the number of polymerases in this promoter-proximal system (the one in clearance plus those waiting) is modeled as a time-homogeneous continuous-time Markov chain with constant birth rate $\\lambda$ and death rate $\\mu$ for all states $n \\ge 1$. Assume the system operates in steady state with $\\lambda  \\mu$.\n\nDefine a “traffic jam” as the event that at a randomly chosen time there are at least $k$ polymerases in the promoter-proximal system (including the one in clearance). Starting from the fundamental definitions of a birth–death process and steady-state (detailed) balance for such a system, derive an analytical expression for the steady-state probability of a traffic jam as a function of $\\lambda$, $\\mu$, and $k$. Then evaluate it for the biologically plausible parameters $\\lambda = 3.5$ min$^{-1}$, $\\mu = 4.0$ min$^{-1}$, and $k = 6$. Express your final answer as a decimal fraction with no unit, rounded to four significant figures.", "solution": "The system described is a birth-death process on the state space $S = \\{0, 1, 2, \\dots\\}$, where a state $n$ represents the number of RNA polymerase II molecules in the promoter-proximal system (in clearance or waiting). This is a canonical M/M/1 queuing model. The birth rates $\\lambda_n$ (arrivals) and death rates $\\mu_n$ (services) are given as:\n$$ \\lambda_n = \\lambda \\quad \\text{for } n = 0, 1, 2, \\dots $$\n$$ \\mu_n = \\mu \\quad \\text{for } n = 1, 2, 3, \\dots $$\nwith $\\mu_0 = 0$.\n\nIn steady state, the rate of transitions into any state $n$ must equal the rate of transitions out of state $n$. This principle of detailed balance for a birth-death process yields the following set of equations, where $P_n$ is the steady-state probability of being in state $n$:\n$$ \\lambda_{n-1} P_{n-1} = \\mu_n P_n \\quad \\text{for } n \\ge 1 $$\nSubstituting the given rates:\n$$ \\lambda P_{n-1} = \\mu P_n \\quad \\text{for } n \\ge 1 $$\nWe can write a recurrence relation for $P_n$:\n$$ P_n = \\left(\\frac{\\lambda}{\\mu}\\right) P_{n-1} $$\nLet us define the traffic intensity, $\\rho = \\frac{\\lambda}{\\mu}$. The problem states $\\lambda  \\mu$, which ensures $\\rho  1$. The recurrence becomes:\n$$ P_n = \\rho P_{n-1} $$\nBy repeated application, we can express each $P_n$ in terms of $P_0$, the probability that the system is empty:\n$$ P_1 = \\rho P_0 $$\n$$ P_2 = \\rho P_1 = \\rho^2 P_0 $$\n...\n$$ P_n = \\rho^n P_0 $$\nTo determine $P_0$, we use the normalization condition that the sum of all probabilities must equal $1$:\n$$ \\sum_{n=0}^{\\infty} P_n = 1 $$\n$$ \\sum_{n=0}^{\\infty} \\rho^n P_0 = P_0 \\sum_{n=0}^{\\infty} \\rho^n = 1 $$\nThe summation is a geometric series. Since $\\rho  1$, the series converges:\n$$ \\sum_{n=0}^{\\infty} \\rho^n = \\frac{1}{1-\\rho} $$\nSubstituting this result back into the normalization equation gives:\n$$ P_0 \\left( \\frac{1}{1-\\rho} \\right) = 1 \\implies P_0 = 1-\\rho $$\nThus, the steady-state probability distribution for the number of polymerases in the system is a geometric distribution:\n$$ P_n = (1-\\rho) \\rho^n \\quad \\text{for } n \\ge 0 $$\nA \"traffic jam\" is defined as the event that there are at least $k$ polymerases in the system. The probability of this event, which we denote as $P_{jam}$, is the sum of the probabilities of all states from $k$ to infinity:\n$$ P_{jam} = P(N \\ge k) = \\sum_{n=k}^{\\infty} P_n $$\nThis is more efficiently calculated using the complement rule:\n$$ P(N \\ge k) = 1 - P(N  k) = 1 - \\sum_{n=0}^{k-1} P_n $$\n$$ P(N \\ge k) = 1 - \\sum_{n=0}^{k-1} (1-\\rho) \\rho^n = 1 - (1-\\rho) \\sum_{n=0}^{k-1} \\rho^n $$\nThe term $\\sum_{n=0}^{k-1} \\rho^n$ is a finite geometric series with the sum $\\frac{1-\\rho^k}{1-\\rho}$. Substituting this, we obtain:\n$$ P(N \\ge k) = 1 - (1-\\rho) \\left( \\frac{1-\\rho^k}{1-\\rho} \\right) = 1 - (1-\\rho^k) = \\rho^k $$\nSo, the analytical expression for the probability of a traffic jam is simply $\\rho^k$.\n$$ P_{jam}(\\lambda, \\mu, k) = \\left(\\frac{\\lambda}{\\mu}\\right)^k $$\nThis is the first part of the required derivation. Now, we must evaluate this expression for the provided parameters: $\\lambda = 3.5$ min$^{-1}$, $\\mu = 4.0$ min$^{-1}$, and $k = 6$.\nFirst, calculate the traffic intensity $\\rho$:\n$$ \\rho = \\frac{\\lambda}{\\mu} = \\frac{3.5}{4.0} = \\frac{7}{8} = 0.875 $$\nNext, calculate the probability of a traffic jam, $P(N \\ge 6)$:\n$$ P(N \\ge 6) = \\rho^k = (0.875)^6 $$\nThe numerical computation yields:\n$$ (0.875)^6 = 0.4487955322265625 $$\nThe problem requires this result to be rounded to four significant figures. The first four significant digits are $4, 4, 8, 7$. The fifth digit is $9$, which is greater than or equal to $5$, so we round up the fourth digit.\n$$ P(N \\ge 6) \\approx 0.4488 $$", "answer": "$$\\boxed{0.4488}$$", "id": "2436273"}]}