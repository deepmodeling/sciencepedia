{"hands_on_practices": [{"introduction": "The translation of a messenger RNA (mRNA) sequence into a protein is a cornerstone of molecular biology. This process follows a precise set of rules, known as the genetic code, which dictates how nucleotide triplets, or codons, correspond to specific amino acids. This first exercise provides fundamental practice in applying these rules, starting from identifying the correct initiation site to reading the code in the proper frame until a termination signal is reached [@problem_id:1527156]. Mastering this core skill is the first step toward understanding any aspect of protein synthesis, from normal gene expression to the effects of genetic mutation.", "problem": "A molecular biologist has isolated a short fragment of a mature messenger ribonucleic acid (mRNA) from a novel thermophilic bacterium. The sequence of this mRNA fragment, read from the 5' to the 3' end, is:\n\n5'-GCAUGGUUAGCAGCACGUAG-3'\n\nTranslation of this mRNA into a polypeptide chain begins at the first start codon (AUG) and terminates upon reaching the first in-frame stop codon. Using the provided standard genetic code table, determine the correct amino acid sequence of the polypeptide synthesized from this mRNA fragment.\n\n**Genetic Code Table (Codon -> Amino Acid):**\n\n*   **Alanine (Ala):** GCU, GCC, GCA, GCG\n*   **Arginine (Arg):** CGU, CGC, CGA, CGG, AGA, AGG\n*   **Asparagine (Asn):** AAU, AAC\n*   **Aspartic acid (Asp):** GAU, GAC\n*   **Cysteine (Cys):** UGU, UGC\n*   **Glutamic acid (Glu):** GAA, GAG\n*   **Glutamine (Gln):** CAA, CAG\n*   **Glycine (Gly):** GGU, GGC, GGA, GGG\n*   **Histidine (His):** CAU, CAC\n*   **Isoleucine (Ile):** AUU, AUC, AUA\n*   **Leucine (Leu):** UUA, UUG, CUU, CUC, CUA, CUG\n*   **Lysine (Lys):** AAA, AAG\n*   **Methionine (Met) / START:** AUG\n*   **Phenylalanine (Phe):** UUU, UUC\n*   **Proline (Pro):** CCU, CCC, CCA, CCG\n*   **Serine (Ser):** UCU, UCC, UCA, UCG, AGU, AGC\n*   **Threonine (Thr):** ACU, ACC, ACA, ACG\n*   **Tryptophan (Trp):** UGG\n*   **Tyrosine (Tyr):** UAU, UAC\n*   **Valine (Val):** GUU, GUC, GUA, GUG\n*   **STOP:** UAA, UAG, UGA\n\nWhich of the following represents the correct polypeptide sequence?\n\nA. Ala-Trp-Leu-Ala-Ala-Arg\n\nB. Met-Val-Ser-Ser-Thr\n\nC. Ala-Gly-Ser-Ser-Thr\n\nD. Met-Val-Ser-Ser-Thr-Tyr\n\nE. Met-Gly-Ser-Ser-Thr-Arg", "solution": "Principles:\n- Translation of mRNA begins at the first start codon AUG encountered by the scanning ribosome from the 5' end and proceeds in that reading frame.\n- Codons are read in non-overlapping triplets from the start site until the first in-frame stop codon (UAA, UAG, or UGA).\n\nProcedure:\n1) The given mRNA (5' to 3') is GCAUGGUUAGCAGCACGUAG. Scan for the first AUG. The first AUG occurs starting at the third nucleotide, yielding the reading frame beginning with AUG.\n\n2) Partition the sequence into codons from that AUG:\nAUG GUU AGC AGC ACG UAG\n\n3) Translate each codon using the provided genetic code:\n- AUG → Methionine (Met), start\n- GUU → Valine (Val)\n- AGC → Serine (Ser)\n- AGC → Serine (Ser)\n- ACG → Threonine (Thr)\n- UAG → Stop\n\n4) The polypeptide sequence synthesized is Met-Val-Ser-Ser-Thr, terminating at the UAG stop codon.\n\n5) Match with the options: this corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1527156"}, {"introduction": "The integrity of the genetic code's reading frame is paramount for producing a functional protein. While single base substitutions can sometimes be benign, mutations that add or remove nucleotides can have far more drastic consequences. This practice explores the critical difference between an in-frame mutation (a deletion of three nucleotides) and a frameshift mutation (a deletion of a single nucleotide) [@problem_id:2342150]. By comparing these two scenarios, you will gain a deeper appreciation for why maintaining the triplet reading frame is essential and how its disruption can lead to a complete loss of protein function.", "problem": "A researcher is studying a gene that encodes a small, 150-amino-acid enzyme crucial for cellular metabolism. The normal function of this enzyme depends on its precise three-dimensional structure. The beginning of the coding sequence for this gene on the template strand of the DNA is:\n`3'-TAC CCG AAT GCT...-5'`\nThis corresponds to the messenger RNA (mRNA) sequence that is translated by the ribosome:\n`5'-AUG GGC UUA CGA...-3'`\n\nTwo different mutations are introduced into separate cell cultures at this locus.\n\n*   **Mutation 1:** A deletion of the first cytosine (C) nucleotide in the second codon of the template DNA strand.\n*   **Mutation 2:** A deletion of the entire second codon, \"CCG\", from the template DNA strand.\n\nAssume that in both cases transcription and translation proceed past the mutation site and that the genetic code is read in non-overlapping triplets. Which of the following statements most accurately predicts and compares the functional consequences for the enzymes produced from these two mutated genes?\n\nA. Both mutations will be equally catastrophic, resulting in completely non-functional proteins, because they both occur near the start of the gene.\n\nB. Mutation 2 is likely to be more detrimental to enzyme function than Mutation 1, as it involves the loss of a greater quantity of genetic material.\n\nC. Mutation 1 is likely to have a more severe effect on enzyme function than Mutation 2, as it will alter the entire sequence of amino acids downstream from the mutation and likely cause a premature termination of translation.\n\nD. Mutation 2 will have a more severe effect because deleting an entire codon is a change the cell's proofreading mechanisms cannot correct, unlike a single base deletion.\n\nE. Mutation 1 will be less severe because only a single nucleotide is lost, leading to a protein that is almost identical to the original, whereas Mutation 2 results in the loss of a full amino acid.", "solution": "Interpretation of the provided sequences and genetic code principles:\n- The template DNA strand is given 3' to 5' as: 3'-TAC CCG AAT GCT...-5'. By standard base-pairing rules and antiparallel transcription, the mRNA is 5'-AUG GGC UUA CGA...-3', which translates as: AUG (Met), GGC (Gly), UUA (Leu), CGA (Arg), ...\n- The ribosome reads mRNA in non-overlapping triplets starting at AUG; any insertion or deletion not in multiples of three shifts the reading frame (frameshift), altering all downstream codons and typically introducing an early stop codon.\n\nAnalyze Mutation 1 (deletion of the first C in the second template codon):\n- Original template around the start: 3'-TAC CCG AAT GCT...-5'.\n- Deleting the first C of the second codon yields: 3'-TAC CGA ATG CT...-5'.\n- Transcribing from the start codon, the mRNA remains 5'-AUG at the beginning (unchanged first codon). Continuing past the deletion, the template bases after the initial TAC are now CGA ATG CT..., which transcribe to mRNA bases GCU UAC GA..., so the mutated mRNA from the start reads: 5'-AUG GCU UAC GA...-3'.\n- Grouping into codons from the AUG start: AUG | GCU | UAC | GA..., which differs from the original AUG | GGC | UUA | CGA....\n- This is a frameshift beginning at the second codon: every downstream codon is altered, and a premature stop codon (UAA, UAG, or UGA) is likely to appear shortly thereafter, producing a truncated, misfolded, and almost certainly non-functional enzyme. Because this frameshift occurs near the start, the truncation will be early and severe.\n\nAnalyze Mutation 2 (deletion of the entire second template codon CCG):\n- Removing the template 3'-CCG-5' yields the template: 3'-TAC AAT GCT...-5'.\n- The corresponding mRNA is 5'-AUG UUA CGA...-3'.\n- Translation from the start gives AUG (Met), UUA (Leu), CGA (Arg), ...; the reading frame is preserved, and the only change is the loss of the glycine residue encoded by the deleted codon. The remainder of the protein sequence is unchanged.\n- An in-frame single–amino-acid deletion can affect function if the residue is critical, but in general it is far less disruptive than an early frameshift that scrambles the sequence and causes early termination.\n\nComparison and conclusion:\n- Mutation 1 causes a frameshift near the start, altering all downstream amino acids and likely introducing an early stop codon, producing a severely truncated, non-functional enzyme.\n- Mutation 2 removes one amino acid but preserves the reading frame; the rest of the protein sequence is maintained, so the functional impact is typically less severe than a frameshift.\n- Therefore, the most accurate statement is that Mutation 1 is likely to have a more severe effect than Mutation 2 for the reasons above.\n\nThus, the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "2342150"}, {"introduction": "The standard genetic code is not a random assortment of codon assignments; it is widely believed to be a product of natural selection, optimized to minimize the effects of mutation and translation errors. This advanced computational exercise challenges you to test this hypothesis directly [@problem_id:2435520]. You will implement a quantitative model to score the \"cost\" of mutations based on changes in amino acid chemistry and compare the standard code's cost against a large ensemble of randomly generated codes. This practice bridges the gap between theoretical concepts and data-driven bioinformatic research, offering a hands-on look at how scientists investigate the code's evolutionary origins.", "problem": "You are given the canonical Standard Genetic Code (National Center for Biotechnology Information translation table $1$) mapping the set of all RNA codons over the alphabet $\\{U,C,A,G\\}$ to the set of $20$ amino acids plus a stop signal. You are also given a scalar physico-chemical property for each amino acid, specifically the Kyte–Doolittle hydropathy index. Define a cost functional that quantifies the sensitivity of encoded amino acid properties to single-nucleotide mutations as follows.\n\nLet $\\mathcal{C}$ be the set of all $64$ RNA codons and let $\\mathcal{S} \\subset \\mathcal{C}$ be the subset of sense codons (that is, $\\mathcal{C}$ excluding stop codons). Define an undirected adjacency set $\\mathcal{E} \\subset \\{\\{c_i,c_j\\} \\mid c_i,c_j \\in \\mathcal{S}, c_i \\neq c_j\\}$ that contains exactly those unordered pairs $\\{c_i,c_j\\}$ such that the Hamming distance between $c_i$ and $c_j$ is $1$ (that is, $c_i$ and $c_j$ differ in exactly one nucleotide). For any adjacent pair $\\{c_i,c_j\\} \\in \\mathcal{E}$, define a mutation weight $w(c_i,c_j)$ by $w(c_i,c_j) = w_t$ if the differing nucleotides form a transition (purine $\\leftrightarrow$ purine or pyrimidine $\\leftrightarrow$ pyrimidine, where $\\{A,G\\}$ are purines and $\\{C,U\\}$ are pyrimidines), and $w(c_i,c_j) = w_v$ otherwise (transversion).\n\nLet $h:\\mathcal{A} \\to \\mathbb{R}$ be the Kyte–Doolittle hydropathy index on the set $\\mathcal{A}$ of the $20$ amino acids. For a genetic code (a mapping $g:\\mathcal{C} \\to \\mathcal{A}\\cup\\{\\text{Stop}\\}$), define the error cost\n$$\n\\operatorname{Cost}(g;w_t,w_v) \\;=\\; \\frac{1}{|\\mathcal{E}|} \\sum_{\\{c_i,c_j\\}\\in\\mathcal{E}} w(c_i,c_j)\\,\\big(h(g(c_i)) - h(g(c_j))\\big)^2.\n$$\n\nYou will compare the Standard Genetic Code $g_{\\text{std}}$ to ensembles of randomly generated alternative codes under two models:\n- Degeneracy-preserving model: For each amino acid $a\\in \\mathcal{A}$, let $n_a$ be the number of sense codons mapped to $a$ by $g_{\\text{std}}$. A random code $g$ is sampled uniformly from all bijections $g:\\mathcal{S}\\to L$ where $L$ is a multiset containing each amino acid $a$ exactly $n_a$ times; stop codons remain fixed as stop.\n- Unconstrained model: Each sense codon in $\\mathcal{S}$ is assigned an amino acid drawn independently and uniformly from $\\mathcal{A}$; stop codons remain fixed as stop.\n\nFor given parameters $(M,w_t,w_v,b,\\text{seed})$, where $M$ is the number of random codes to generate, $w_t$ and $w_v$ are nonnegative real weights, $b\\in\\{0,1\\}$ indicates the model ($b=1$ for degeneracy-preserving, $b=0$ for unconstrained), and $\\text{seed}$ initializes a pseudorandom number generator, compute the fraction\n$$\nq \\;=\\; \\frac{1}{M}\\sum_{m=1}^{M} \\mathbf{1}\\left\\{\\operatorname{Cost}(g^{(m)};w_t,w_v) \\;<\\; \\operatorname{Cost}(g_{\\text{std}};w_t,w_v)\\right\\},\n$$\nwhere $g^{(m)}$ are the sampled random codes and $\\mathbf{1}\\{\\cdot\\}$ is the indicator function.\n\nUse the following explicit data:\n\n- The Standard Genetic Code mapping $g_{\\text{std}}$ (RNA codons to one-letter amino acid codes, with Stop):\n$UUU\\mapsto F$, $UUC\\mapsto F$, $UUA\\mapsto L$, $UUG\\mapsto L$, $UCU\\mapsto S$, $UCC\\mapsto S$, $UCA\\mapsto S$, $UCG\\mapsto S$, $UAU\\mapsto Y$, $UAC\\mapsto Y$, $UAA\\mapsto \\text{Stop}$, $UAG\\mapsto \\text{Stop}$, $UGU\\mapsto C$, $UGC\\mapsto C$, $UGA\\mapsto \\text{Stop}$, $UGG\\mapsto W$, $CUU\\mapsto L$, $CUC\\mapsto L$, $CUA\\mapsto L$, $CUG\\mapsto L$, $CCU\\mapsto P$, $CCC\\mapsto P$, $CCA\\mapsto P$, $CCG\\mapsto P$, $CAU\\mapsto H$, $CAC\\mapsto H$, $CAA\\mapsto Q$, $CAG\\mapsto Q$, $CGU\\mapsto R$, $CGC\\mapsto R$, $CGA\\mapsto R$, $CGG\\mapsto R$, $AUU\\mapsto I$, $AUC\\mapsto I$, $AUA\\mapsto I$, $AUG\\mapsto M$, $ACU\\mapsto T$, $ACC\\mapsto T$, $ACA\\mapsto T$, $ACG\\mapsto T$, $AAU\\mapsto N$, $AAC\\mapsto N$, $AAA\\mapsto K$, $AAG\\mapsto K$, $AGU\\mapsto S$, $AGC\\mapsto S$, $AGA\\mapsto R$, $AGG\\mapsto R$, $GUU\\mapsto V$, $GUC\\mapsto V$, $GUA\\mapsto V$, $GUG\\mapsto V$, $GCU\\mapsto A$, $GCC\\mapsto A$, $GCA\\mapsto A$, $GCG\\mapsto A$, $GAU\\mapsto D$, $GAC\\mapsto D$, $GAA\\mapsto E$, $GAG\\mapsto E$, $GGU\\mapsto G$, $GGC\\mapsto G$, $GGA\\mapsto G$, $GGG\\mapsto G$.\n\n- The Kyte–Doolittle hydropathy index $h$ (amino acid one-letter code to real value):\n$A\\mapsto 1.8$, $R\\mapsto -4.5$, $N\\mapsto -3.5$, $D\\mapsto -3.5$, $C\\mapsto 2.5$, $Q\\mapsto -3.5$, $E\\mapsto -3.5$, $G\\mapsto -0.4$, $H\\mapsto -3.2$, $I\\mapsto 4.5$, $L\\mapsto 3.8$, $K\\mapsto -3.9$, $M\\mapsto 1.9$, $F\\mapsto 2.8$, $P\\mapsto -1.6$, $S\\mapsto -0.8$, $T\\mapsto -0.7$, $W\\mapsto -0.9$, $Y\\mapsto -1.3$, $V\\mapsto 4.2$.\n\nTest suite. For each of the following parameter sets $(M,w_t,w_v,b,\\text{seed})$, compute the corresponding value of $q$ and report all results in the order listed:\n- Case $1$: $(M,w_t,w_v,b,\\text{seed})=(10000,2.0,1.0,1,42)$.\n- Case $2$: $(M,w_t,w_v,b,\\text{seed})=(4000,1.0,1.0,1,123)$.\n- Case $3$: $(M,w_t,w_v,b,\\text{seed})=(2000,4.0,1.0,0,999)$.\n\nFinal output format. Your program should produce a single line of output containing the three real-valued results as a comma-separated list enclosed in square brackets (for example, $[r_1,r_2,r_3]$). No extra whitespace or text is permitted in the output line.", "solution": "The problem statement is a valid, well-posed, and scientifically grounded exercise in computational biology. It asks for an evaluation of the Standard Genetic Code's robustness against single-nucleotide mutations, quantified by the change in the physico-chemical properties of the encoded amino acids. I will proceed with a full solution.\n\nThe core of the problem is to compute a cost functional for the Standard Genetic Code, $g_{\\text{std}}$, and compare it to the costs of a large ensemble of randomly generated alternative codes. The final quantity to be calculated, $q$, represents the fraction of random codes that are more \"optimal\" (i.e., have a lower cost) than the standard code under the given metric.\n\nFirst, we must formalize the provided data and definitions into a computational framework.\nThe set of nucleic acids is $\\mathcal{N} = \\{U, C, A, G\\}$. The set of all codons is $\\mathcal{C} = \\mathcal{N}^3$, so $|\\mathcal{C}|=4^3=64$. The provided Standard Genetic Code, $g_{\\text{std}}$, partitions $\\mathcal{C}$ into $21$ sets: one for each of the $20$ amino acids in the set $\\mathcal{A}$, and one for the 'Stop' signal. We are given that there are $3$ stop codons, which means the subset of sense codons, $\\mathcal{S}$, has size $|\\mathcal{S}| = 64 - 3 = 61$. The Kyte-Doolittle hydropathy index is a function $h: \\mathcal{A} \\to \\mathbb{R}$. Both $g_{\\text{std}}$ and $h$ are provided and will be stored in dictionary data structures for efficient lookup.\n\nThe cost functional is defined as:\n$$\n\\operatorname{Cost}(g;w_t,w_v) \\;=\\; \\frac{1}{|\\mathcal{E}|} \\sum_{\\{c_i,c_j\\}\\in\\mathcal{E}} w(c_i,c_j)\\,\\big(h(g(c_i)) - h(g(c_j))\\big)^2\n$$\nTo evaluate this, we must first construct the adjacency set $\\mathcal{E}$. $\\mathcal{E}$ consists of all unordered pairs of distinct sense codons $\\{c_i, c_j\\}$ that differ by a Hamming distance of $1$. We will iterate through all $\\binom{61}{2}$ pairs of sense codons, check their Hamming distance, and if it is $1$, add the pair to a list representing $\\mathcal{E}$. For determinism, we establish a fixed, sorted order for the $61$ sense codons. The elements of $\\mathcal{E}$ can then be stored as pairs of indices into this ordered list.\n\nFor each pair $\\{c_i, c_j\\} \\in \\mathcal{E}$, we must also determine the mutation weight $w(c_i, c_j)$. This weight depends on whether the single nucleotide substitution is a transition or a transversion. A transition is a substitution within the same chemical class: purine $\\leftrightarrow$ purine ($\\{A,G\\}$) or pyrimidine $\\leftrightarrow$ pyrimidine ($\\{C,U\\}$). A transversion is a substitution between classes. If the mutation is a transition, $w(c_i, c_j)=w_t$; otherwise, it is a transversion and $w(c_i, c_j)=w_v$. During the construction of $\\mathcal{E}$, we identify the differing nucleotide in each pair and classify the mutation, storing this information alongside the pair of indices. This pre-computation of the codon graph and mutation types is performed once, as it is independent of the genetic code mapping $g$ and the weights $w_t, w_v$.\n\nWith these structures in place, we can implement a function `calculate_cost(g, wt, wv)` which takes a code $g$ (represented as an ordered list of amino acid assignments for the sense codons) and the weights $w_t$ and $w_v$. The function iterates through the pre-computed set $\\mathcal{E}$. For each edge $\\{c_i, c_j\\}$, it retrieves the assigned amino acids $a_i = g(c_i)$ and $a_j = g(c_j)$, finds their hydropathy values $h(a_i)$ and $h(a_j)$, determines the appropriate weight $w_t$ or $w_v$, and adds the term $w(c_i, c_j)(h(a_i) - h(a_j))^2$ to a running sum. Finally, this sum is normalized by the total number of edges, $|\\mathcal{E}|$.\n\nThe main procedure involves several steps for each test case $(M, w_t, w_v, b, \\text{seed})$:\n1. Initialize a pseudorandom number generator with the given `seed` for reproducibility. We use `numpy.random.default_rng`.\n2. Compute the reference cost, $\\operatorname{Cost}_{\\text{std}} = \\operatorname{Cost}(g_{\\text{std}}; w_t, w_v)$. This is the benchmark against which random codes will be compared.\n3. A counter for \"better\" codes is initialized to $0$.\n4. A loop runs $M$ times. In each iteration, a random code $g^{(m)}$ is generated according to the model specified by the parameter $b$.\n    - If $b=1$ (degeneracy-preserving model), we must preserve the exact number of codons assigned to each amino acid as in the standard code. This is achieved by creating a list of the $61$ amino acids assigned by $g_{\\text{std}}$ to the sense codons and then generating a random permutation of this list. This permuted list represents the amino acid assignments of the new random code $g^{(m)}$.\n    - If $b=0$ (unconstrained model), each of the $61$ sense codons is assigned an amino acid by drawing independently and uniformly with replacement from the set $\\mathcal{A}$ of $20$ amino acids.\n5. For each randomly generated code $g^{(m)}$, its cost $\\operatorname{Cost}(g^{(m)}; w_t, w_v)$ is computed.\n6. This cost is compared to $\\operatorname{Cost}_{\\text{std}}$. If $\\operatorname{Cost}(g^{(m)}) < \\operatorname{Cost}_{\\text{std}}$, the counter is incremented.\n7. After $M$ iterations, the final result $q$ is the value of the counter divided by $M$.\n\nThis entire process is encapsulated in a single program. The pre-computation steps are performed first, followed by a loop over the specified test cases, each performing the simulation and calculating the corresponding value of $q$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of evaluating the Standard Genetic Code's optimality.\n    \"\"\"\n    # Define the biological data as provided in the problem statement.\n    GENETIC_CODE_RAW = {\n        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',\n        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',\n        'UAU': 'Y', 'UAC': 'Y', 'UAA': 'Stop', 'UAG': 'Stop',\n        'UGU': 'C', 'UGC': 'C', 'UGA': 'Stop', 'UGG': 'W',\n        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',\n        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',\n        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',\n        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',\n        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',\n        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',\n        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',\n        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',\n        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',\n        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',\n        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',\n        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'\n    }\n\n    HYDROPATHY_RAW = {\n        'A': 1.8, 'R': -4.5, 'N': -3.5, 'D': -3.5, 'C': 2.5,\n        'Q': -3.5, 'E': -3.5, 'G': -0.4, 'H': -3.2, 'I': 4.5,\n        'L': 3.8, 'K': -3.9, 'M': 1.9, 'F': 2.8, 'P': -1.6,\n        'S': -0.8, 'T': -0.7, 'W': -0.9, 'Y': -1.3, 'V': 4.2\n    }\n\n    NUCLEOTIDES = ['U', 'C', 'A', 'G']\n    PURINES = {'A', 'G'}\n    PYRIMIDINES = {'U', 'C'}\n\n    # 1. Pre-computation steps, performed once.\n    # Generate all codons and identify sense codons in a fixed order.\n    all_codons = sorted([n1 + n2 + n3 for n1 in NUCLEOTIDES for n2 in NUCLEOTIDES for n3 in NUCLEOTIDES])\n    \n    sense_codons = []\n    std_aa_assignments = []\n    for codon in all_codons:\n        aa = GENETIC_CODE_RAW.get(codon)\n        if aa != 'Stop':\n            sense_codons.append(codon)\n            std_aa_assignments.append(aa)\n\n    # 2. Build the adjacency graph E for sense codons.\n    # Store edges as {'i': <idx1>, 'j': <idx2>, 'type': <'transition'|'transversion'>}\n    num_sense_codons = len(sense_codons)\n    adjacency_info = []\n    for i in range(num_sense_codons):\n        for j in range(i + 1, num_sense_codons):\n            c1, c2 = sense_codons[i], sense_codons[j]\n            \n            diff_count = 0\n            diff_pos = -1\n            for k in range(3):\n                if c1[k] != c2[k]:\n                    diff_count += 1\n                    diff_pos = k\n            \n            if diff_count == 1:\n                nuc1, nuc2 = c1[diff_pos], c2[diff_pos]\n                is_transversion = (nuc1 in PURINES and nuc2 in PYRIMIDINES) or \\\n                                  (nuc1 in PYRIMIDINES and nuc2 in PURINES)\n                mut_type = 'transversion' if is_transversion else 'transition'\n                adjacency_info.append({'i': i, 'j': j, 'type': mut_type})\n    \n    num_edges = len(adjacency_info)\n\n    # 3. Define the cost function using pre-computed graph structure.\n    def calculate_cost(aa_assignments, wt, wv):\n        total_squared_error = 0.0\n        for edge in adjacency_info:\n            i, j = edge['i'], edge['j']\n            weight = wt if edge['type'] == 'transition' else wv\n            \n            h1 = HYDROPATHY_RAW[aa_assignments[i]]\n            h2 = HYDROPATHY_RAW[aa_assignments[j]]\n            \n            total_squared_error += weight * (h1 - h2)**2\n            \n        return total_squared_error / num_edges\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (10000, 2.0, 1.0, 1, 42),\n        (4000, 1.0, 1.0, 1, 123),\n        (2000, 4.0, 1.0, 0, 999),\n    ]\n\n    results = []\n    amino_acid_pool = list(HYDROPATHY_RAW.keys())\n    \n    # Process each test case.\n    for M, wt, wv, b, seed in test_cases:\n        rng = np.random.default_rng(seed)\n        \n        # Calculate cost for the standard code as a benchmark.\n        cost_std = calculate_cost(std_aa_assignments, wt, wv)\n        \n        better_code_count = 0\n        for _ in range(M):\n            # Generate a random code based on the specified model.\n            if b == 1: # Degeneracy-preserving model\n                random_aa_assignments = rng.permutation(std_aa_assignments)\n            else: # Unconstrained model (b=0)\n                random_aa_assignments = rng.choice(amino_acid_pool, size=num_sense_codons, replace=True)\n            \n            # Calculate cost for the random code.\n            cost_random = calculate_cost(random_aa_assignments, wt, wv)\n            \n            # Compare to the standard code's cost.\n            if cost_random < cost_std:\n                better_code_count += 1\n                \n        q = better_code_count / M\n        results.append(q)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2435520"}]}