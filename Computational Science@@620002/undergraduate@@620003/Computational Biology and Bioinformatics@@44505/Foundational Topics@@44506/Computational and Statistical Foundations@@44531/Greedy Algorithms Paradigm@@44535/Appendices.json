{"hands_on_practices": [{"introduction": "Greedy algorithms operate on the principle of making the best possible choice at each immediate step. This exercise uses the familiar concept of \"making change\" to illustrate one of the most fundamental limitations of this paradigm. Framed in the context of designing a restriction digest, you will see how a series of locally optimal choices—always selecting the largest possible fragment—does not necessarily lead to the most efficient global solution [@problem_id:2396137]. This practice is a foundational check on algorithmic intuition, training you to identify scenarios where a simple greedy approach may fall short.", "problem": "In an in silico planning exercise for restriction digest design in deoxyribonucleic acid (DNA) workflows, consider the following abstracted change-making model. You have a synthetic backbone containing standardized, tandemly repeated size modules. Each module corresponds to a fragment that can be excised by a specific restriction enzyme. An application of any enzyme excises exactly one module of a fixed size and incurs a monetary cost of $1$ unit. Enzymes can be applied any number of times, and modules may be excised in any order. The goal is to excise modules whose total length equals a target length $L$, leaving behind the desired remaining construct. The available module sizes (in kilobase pairs (kbp)) are:\n- $1$ kbp,\n- $3$ kbp,\n- $4$ kbp.\n\nLet the target length be $L = 6$ kbp. A commonly used greedy policy in this setting chooses, at each step, the largest available module size that does not exceed the remaining length to be excised.\n\nWorking from the definitions above, determine the total cost incurred by this greedy policy and the minimal possible total cost over all valid excision sequences for this instance. Report, as a single number, the difference (greedy total cost) $-$ (optimal minimal total cost). Express the final answer as an integer without units.", "solution": "The problem statement is first validated for scientific and logical soundness.\n\n**1. Extraction of Givens:**\n- Problem Type: An abstracted change-making model derived from a bioinformatics context (restriction digest).\n- Available Module Sizes (denominations): $\\{1, 3, 4\\}$ kilobase pairs (kbp).\n- Cost: Each excision (module selection) costs $1$ unit.\n- Target Length ($L$): $L = 6$ kbp.\n- Greedy Policy Definition: At each step, select the largest available module size that does not exceed the remaining length to be excised.\n- Objective: Calculate the difference between the total cost incurred by the greedy policy and the minimal possible total cost (optimal solution).\n\n**2. Validation:**\n- Scientific Grounding: The problem is a computational abstraction of restriction mapping, a valid concept in molecular biology. It is mathematically equivalent to the classic change-making problem, which is a fundamental topic in computer science and algorithms. The problem is scientifically and mathematically sound.\n- Well-Posedness and Objectivity: The problem is well-posed, with all necessary parameters ($L$, module sizes, cost function, and greedy algorithm definition) explicitly stated. The terminology is precise and objective. A unique greedy solution and at least one optimal solution exist.\n- Verdict: The problem is valid. It is a standard exercise in algorithm analysis.\n\n**Solution Derivation:**\nThe problem requires the calculation of two quantities: the cost of a specific greedy algorithm and the cost of an optimal solution for making change for a target value $L$ using a given set of denominations. The cost is defined as the number of items (modules) used.\n\nLet the set of available module sizes be $S = \\{1, 3, 4\\}$. The target length is $L = 6$.\n\n**Part 1: Calculation of the Greedy Policy Cost**\nThe greedy policy dictates that at each step, we must choose the largest module size from $S$ that is less than or equal to the remaining length.\n\nLet $L_{rem}$ be the remaining length to be excised. Initially, $L_{rem} = 6$.\n\n- **Step 1:** The current remaining length is $L_{rem} = 6$. The available module sizes are $\\{1, 3, 4\\}$. The largest module size less than or equal to $6$ is $4$.\n  - We excise a module of size $4$ kbp.\n  - The new remaining length is $L_{rem} = 6 - 4 = 2$.\n  - The cost incurred so far is $1$.\n\n- **Step 2:** The current remaining length is $L_{rem} = 2$. The available module sizes are $\\{1, 3, 4\\}$. The largest module size less than or equal to $2$ is $1$.\n  - We excise a module of size $1$ kbp.\n  - The new remaining length is $L_{rem} = 2 - 1 = 1$.\n  - The total cost is now $1 + 1 = 2$.\n\n- **Step 3:** The current remaining length is $L_{rem} = 1$. The available module sizes are $\\{1, 3, 4\\}$. The largest module size less than or equal to $1$ is $1$.\n  - We excise a module of size $1$ kbp.\n  - The new remaining length is $L_{rem} = 1 - 1 = 0$.\n  - The total cost is now $2 + 1 = 3$.\n\nThe process terminates as the remaining length is $0$. The sequence of excised modules according to the greedy policy is $(4, 1, 1)$. The total cost, which is the number of modules excised, is $3$. Let this be $C_{greedy}$.\n$$C_{greedy} = 3$$\n\n**Part 2: Calculation of the Optimal (Minimal) Cost**\nThe optimal solution corresponds to finding a linear combination of the module sizes that sums to $L$ while minimizing the number of terms. We are looking for non-negative integers $n_1, n_3, n_4$ such that:\n$$1 \\cdot n_1 + 3 \\cdot n_3 + 4 \\cdot n_4 = 6$$\nand the total cost, $C = n_1 + n_3 + n_4$, is minimized.\n\nWe can find the optimal solution by systematically examining combinations of the available module sizes that sum to $6$.\n- **Combination 1:** Use two modules of size $3$ kbp.\n  - Total length: $3 + 3 = 6$.\n  - Total cost (number of modules): $2$. This is a valid solution.\n- **Combination 2:** Use one module of size $4$ kbp.\n  - Remaining length to be covered: $6 - 4 = 2$.\n  - The only way to form a length of $2$ is by using two modules of size $1$ kbp.\n  - The full combination is $(4, 1, 1)$.\n  - Total length: $4 + 1 + 1 = 6$.\n  - Total cost: $3$. This is the greedy solution found previously.\n- **Combination 3:** Use only modules of size $1$ kbp.\n  - The combination is $(1, 1, 1, 1, 1, 1)$.\n  - Total cost: $6$.\n- **Combination 4:** Use one module of size $3$ kbp.\n  - Remaining length: $6 - 3 = 3$.\n  - This can be filled with one more module of size $3$ kbp (which is Combination 1) or three modules of size $1$ kbp.\n  - The latter combination is $(3, 1, 1, 1)$.\n  - Total cost: $4$.\n\nBy comparing the costs of all valid combinations, we have:\n- Cost of $(3, 3)$ is $2$.\n- Cost of $(4, 1, 1)$ is $3$.\n- Cost of $(1, 1, 1, 1, 1, 1)$ is $6$.\n- Cost of $(3, 1, 1, 1)$ is $4$.\n\nThe minimum cost is $2$. Let this be $C_{optimal}$.\n$$C_{optimal} = 2$$\nThis demonstrates the well-known property that a greedy algorithm is not always optimal for the general change-making problem.\n\n**Part 3: Final Calculation**\nThe problem asks for the difference between the greedy cost and the optimal cost.\n$$\\text{Difference} = C_{greedy} - C_{optimal} = 3 - 2 = 1$$\nThe difference is $1$.", "answer": "$$\\boxed{1}$$", "id": "2396137"}, {"introduction": "Building on the idea that local optima can be misleading, this problem models the biological process of axon guidance as a greedy walk on a graph. The goal of the axon is to reach the point with the highest concentration of a chemical attractant, but it can only sense its immediate surroundings. This exercise is designed to demonstrate how a greedy strategy can become trapped in a \"local optimum\"—a point that is better than its neighbors but not the best overall—preventing it from reaching the true target [@problem_id:2396175]. This concept of getting stuck on a suboptimal peak in a \"fitness landscape\" is a critical takeaway for understanding the limitations of many optimization algorithms in biology.", "problem": "In axon guidance during neural development, growth cones respond to extracellular chemical cues, tending to move up net chemoattractive gradients. Consider a simplified discrete model in which an axon growth cone is modeled as a greedy walk on a graph. Let the environment be a grid graph $G=(V,E)$ with $V=\\{p_{x,y}\\mid x,y\\in\\{0,1,2\\}\\}$, where $p_{x,y}$ denotes the lattice site at integer coordinates $x$ and $y$. There is an undirected edge $\\{p_{x,y},p_{x',y'}\\}\\in E$ if and only if $|x-x'|+|y-y'|=1$ (four-neighbor connectivity). A scalar field $U:V\\to\\mathbb{R}$ encodes the net guidance potential (higher $U$ is more attractive), which can be interpreted as the combined effect of multiple attractants and repellents after receptor weighting at the growth cone.\n\nThe greedy walk rule is: starting at $S=p_{0,1}$, at each step at node $x\\in V$, among the neighbors $N(x)=\\{v\\in V\\mid \\{x,v\\}\\in E\\}$, choose a node $v^\\star\\in N(x)$ that maximizes the increase $\\Delta U=U(v)-U(x)$ subject to $U(v)>U(x)$; move to $v^\\star$. If no neighbor has $U(v)>U(x)$, stop (the growth cone halts at a local maximum of $U$).\n\nThere are two special nodes: the correct target $C=p_{2,2}$ and a wrong target $W=p_{2,0}$. Your task is to analyze four candidate gradient maps (assignments of $U$ values) and determine which one will cause the greedy axon starting at $S$ to terminate at the wrong target $W$ rather than at the correct target $C$, even though $C$ is the unique global maximizer of $U$ over $V$.\n\nChoose exactly one option.\n\nA. Map $\\mathcal{M}_A$:\n- $U(p_{0,1})=0$ (start $S$), $U(p_{1,1})=1$, $U(p_{0,0})=3$, $U(p_{0,2})=2$.\n- $U(p_{1,0})=5$, $U(p_{2,0})=8$ (wrong target $W$), $U(p_{2,1})=7$.\n- $U(p_{1,2})=6$, $U(p_{2,2})=10$ (correct target $C$).\n\nB. Map $\\mathcal{M}_B$:\n- $U(p_{0,1})=0$ (start $S$), $U(p_{1,1})=3$, $U(p_{0,0})=1$, $U(p_{0,2})=4$.\n- $U(p_{1,0})=2$, $U(p_{2,0})=6$ (wrong target $W$), $U(p_{2,1})=8$.\n- $U(p_{1,2})=7$, $U(p_{2,2})=10$ (correct target $C$).\n\nC. Map $\\mathcal{M}_C$:\n- $U(p_{0,1})=0$ (start $S$), $U(p_{1,1})=1$, $U(p_{0,0})=3$, $U(p_{0,2})=2$.\n- $U(p_{1,0})=5$, $U(p_{2,0})=12$ (wrong target $W$), $U(p_{2,1})=7$.\n- $U(p_{1,2})=6$, $U(p_{2,2})=10$ (correct target $C$).\n\nD. Map $\\mathcal{M}_D$:\n- $U(p_{0,1})=0$ (start $S$), $U(p_{1,1})=4$, $U(p_{0,0})=2$, $U(p_{0,2})=3$.\n- $U(p_{1,0})=1$, $U(p_{2,0})=8$ (wrong target $W$), $U(p_{2,1})=5$.\n- $U(p_{1,2})=2$, $U(p_{2,2})=10$ (correct target $C$).\n\nWhich map satisfies the stated condition?", "solution": "The problem statement is subjected to validation before a solution is attempted.\n\nFirst, we extract the given information verbatim:\n- The graph is a grid graph $G=(V,E)$ with vertices $V=\\{p_{x,y}\\mid x,y\\in\\{0,1,2\\}\\}$.\n- An edge $\\{p_{x,y},p_{x',y'}\\}\\in E$ exists if and only if $|x-x'|+|y-y'|=1$.\n- A scalar potential field $U:V\\to\\mathbb{R}$ is defined on the vertices.\n- The starting node is $S=p_{0,1}$.\n- The greedy walk rule: from a node $x$, move to a neighbor $v^\\star$ that maximizes the increase $\\Delta U=U(v)-U(x)$ subject to the constraint $U(v)>U(x)$. The walk halts if no such neighbor exists.\n- The correct target is $C=p_{2,2}$.\n- The wrong target is $W=p_{2,0}$.\n- The task is to find which of four specified potential maps causes the greedy walk to terminate at $W$, under the condition that $C$ is the unique global maximizer of $U$.\n\nNext, we validate the problem statement against established criteria.\n- **Scientific Grounding**: The problem presents a highly simplified but conceptually sound model of axon guidance. Using a discrete graph, a potential field, and a greedy algorithm to model chemotaxis is a standard approach in computational biology and an acceptable abstraction. It is not based on pseudoscience.\n- **Well-Posedness**: The graph structure, starting point, and greedy walk rule are defined unambiguously. The rule is deterministic, guaranteeing a unique path and termination point for any given potential map. The question is precise and allows for a single verifiable answer.\n- **Objectivity**: The problem is stated in formal mathematical language, free of subjective or ambiguous terms.\n- **Completeness**: All necessary data (the potential values for each map) are provided to perform the analysis. The problem is self-contained.\n\nThe problem statement is found to be valid. It is a well-posed problem in graph theory and algorithms, relevant to computational biology. We may proceed with the solution.\n\nThe problem requires us to identify which potential map $\\mathcal{M}$ satisfies two conditions simultaneously:\n1. The greedy walk starting at $S=p_{0,1}$ terminates at the wrong target $W=p_{2,0}$.\n2. The correct target $C=p_{2,2}$ is the unique global maximizer of the potential $U$ on the vertex set $V$.\n\nWe will analyze each of the four candidate maps. The set of vertices is $V = \\{p_{0,0}, p_{0,1}, p_{0,2}, p_{1,0}, p_{1,1}, p_{1,2}, p_{2,0}, p_{2,1}, p_{2,2}\\}$.\n\n**Analysis of Map $\\mathcal{M}_A$**\nThe potential values are:\n$U(p_{0,1})=0$, $U(p_{1,1})=1$, $U(p_{0,0})=3$, $U(p_{0,2})=2$.\n$U(p_{1,0})=5$, $U(p_{2,0})=8$, $U(p_{2,1})=7$.\n$U(p_{1,2})=6$, $U(p_{2,2})=10$.\n\nFirst, we check the global maximum condition. The maximum potential value is $U(p_{2,2})=10$. This value is unique across all vertices. Thus, $C=p_{2,2}$ is the unique global maximizer. The condition is satisfied.\n\nNext, we trace the greedy walk:\n- **Step 1:** Start at $S=p_{0,1}$, where $U(p_{0,1})=0$. The neighbors are $p_{0,0}$, $p_{1,1}$, and $p_{0,2}$.\n  - $U(p_{0,0})=3$, so $\\Delta U = 3-0=3$.\n  - $U(p_{1,1})=1$, so $\\Delta U = 1-0=1$.\n  - $U(p_{0,2})=2$, so $\\Delta U = 2-0=2$.\n  The maximum increase is $\\Delta U = 3$, corresponding to the move to $p_{0,0}$. The path begins: $p_{0,1} \\to p_{0,0}$.\n\n- **Step 2:** The current node is $p_{0,0}$, with $U(p_{0,0})=3$. The neighbors are $p_{0,1}$ and $p_{1,0}$.\n  - $U(p_{0,1})=0$, which is less than $U(p_{0,0})=3$. This move is disallowed.\n  - $U(p_{1,0})=5$, so $\\Delta U = 5-3=2$.\n  The only valid move is to $p_{1,0}$. The path is now: $p_{0,1} \\to p_{0,0} \\to p_{1,0}$.\n\n- **Step 3:** The current node is $p_{1,0}$, with $U(p_{1,0})=5$. The neighbors are $p_{0,0}$, $p_{1,1}$, and $p_{2,0}$.\n  - $U(p_{0,0})=3 < 5$.\n  - $U(p_{1,1})=1 < 5$.\n  - $U(p_{2,0})=8$, so $\\Delta U = 8-5=3$.\n  The only valid move is to $p_{2,0}$. The path is: $p_{0,1} \\to p_{0,0} \\to p_{1,0} \\to p_{2,0}$.\n\n- **Step 4:** The current node is $p_{2,0}=W$, with $U(p_{2,0})=8$. The neighbors are $p_{1,0}$ and $p_{2,1}$.\n  - $U(p_{1,0})=5 < 8$.\n  - $U(p_{2,1})=7 < 8$.\n  There are no neighbors $v$ such that $U(v)>U(p_{2,0})$. The walk halts at $p_{2,0}$.\n\nThe walk terminates at $W=p_{2,0}$. Both conditions are met for map $\\mathcal{M}_A$.\nVerdict for Option A: **Correct**.\n\n**Analysis of Map $\\mathcal{M}_B$**\nThe potential values are:\n$U(p_{0,1})=0$, $U(p_{1,1})=3$, $U(p_{0,0})=1$, $U(p_{0,2})=4$.\n$U(p_{1,0})=2$, $U(p_{2,0})=6$, $U(p_{2,1})=8$.\n$U(p_{1,2})=7$, $U(p_{2,2})=10$.\n\nThe maximum potential is $U(p_{2,2})=10$, which is unique. The global maximum condition is satisfied.\n\nWe trace the greedy walk:\n- **Step 1:** Start at $S=p_{0,1}$, where $U(p_{0,1})=0$. Neighbors are $p_{0,0}$, $p_{1,1}$, $p_{0,2}$.\n  - $U(p_{0,0})=1$, $\\Delta U=1$.\n  - $U(p_{1,1})=3$, $\\Delta U=3$.\n  - $U(p_{0,2})=4$, $\\Delta U=4$.\n  The maximum increase is $\\Delta U = 4$, moving to $p_{0,2}$. Path: $p_{0,1} \\to p_{0,2}$.\n\n- **Step 2:** Current node is $p_{0,2}$, $U(p_{0,2})=4$. Neighbors are $p_{0,1}$ and $p_{1,2}$.\n  - $U(p_{0,1})=0 < 4$.\n  - $U(p_{1,2})=7$, so $\\Delta U = 7-4=3$.\n  Move to $p_{1,2}$. Path: $p_{0,1} \\to p_{0,2} \\to p_{1,2}$.\n\n- **Step 3:** Current node is $p_{1,2}$, $U(p_{1,2})=7$. Neighbors are $p_{0,2}$, $p_{1,1}$, $p_{2,2}$.\n  - $U(p_{0,2})=4 < 7$.\n  - $U(p_{1,1})=3 < 7$.\n  - $U(p_{2,2})=10$, so $\\Delta U = 10-7=3$.\n  Move to $p_{2,2}$. Path: $p_{0,1} \\to p_{0,2} \\to p_{1,2} \\to p_{2,2}$.\n\n- **Step 4:** Current node is $p_{2,2}=C$, $U(p_{2,2})=10$. This is the global maximum, so no neighbor has a higher potential. The walk halts.\n\nThe walk terminates at $C=p_{2,2}$, not $W$.\nVerdict for Option B: **Incorrect**.\n\n**Analysis of Map $\\mathcal{M}_C$**\nThe potential values are:\n$U(p_{0,1})=0$, $U(p_{1,1})=1$, $U(p_{0,0})=3$, $U(p_{0,2})=2$.\n$U(p_{1,0})=5$, $U(p_{2,0})=12$, $U(p_{2,1})=7$.\n$U(p_{1,2})=6$, $U(p_{2,2})=10$.\n\nWe check the global maximum condition. The potential values are $\\{0, 1, 2, 3, 5, 6, 7, 10, 12\\}$. The maximum value is $U(p_{2,0})=12$. The problem requires that $C=p_{2,2}$ be the unique global maximizer, but here $U(p_{2,2})=10$ is not the maximum. The global maximizer is in fact $W=p_{2,0}$. This map violates a fundamental premise of the question. Therefore, this option cannot be the correct answer.\nVerdict for Option C: **Incorrect**.\n\n**Analysis of Map $\\mathcal{M}_D$**\nThe potential values are:\n$U(p_{0,1})=0$, $U(p_{1,1})=4$, $U(p_{0,0})=2$, $U(p_{0,2})=3$.\n$U(p_{1,0})=1$, $U(p_{2,0})=8$, $U(p_{2,1})=5$.\n$U(p_{1,2})=2$, $U(p_{2,2})=10$.\n\nThe maximum potential is $U(p_{2,2})=10$, which is unique. The global maximum condition is satisfied.\n\nWe trace the greedy walk:\n- **Step 1:** Start at $S=p_{0,1}$, where $U(p_{0,1})=0$. Neighbors are $p_{0,0}$, $p_{1,1}$, $p_{0,2}$.\n  - $U(p_{0,0})=2$, $\\Delta U=2$.\n  - $U(p_{1,1})=4$, $\\Delta U=4$.\n  - $U(p_{0,2})=3$, $\\Delta U=3$.\n  The maximum increase is $\\Delta U = 4$, moving to $p_{1,1}$. Path: $p_{0,1} \\to p_{1,1}$.\n\n- **Step 2:** Current node is $p_{1,1}$, $U(p_{1,1})=4$. Neighbors are $p_{0,1}, p_{1,0}, p_{2,1}, p_{1,2}$.\n  - $U(p_{0,1})=0 < 4$.\n  - $U(p_{1,0})=1 < 4$.\n  - $U(p_{2,1})=5$, so $\\Delta U = 5-4=1$.\n  - $U(p_{1,2})=2 < 4$.\n  The only valid move is to $p_{2,1}$. Path: $p_{0,1} \\to p_{1,1} \\to p_{2,1}$.\n\n- **Step 3:** Current node is $p_{2,1}$, $U(p_{2,1})=5$. Neighbors are $p_{1,1}, p_{2,0}, p_{2,2}$.\n  - $U(p_{1,1})=4 < 5$.\n  - $U(p_{2,0})=8$, so $\\Delta U = 8-5=3$.\n  - $U(p_{2,2})=10$, so $\\Delta U = 10-5=5$.\n  The maximum increase is $\\Delta U = 5$, moving to $p_{2,2}$. Path: $p_{0,1} \\to p_{1,1} \\to p_{2,1} \\to p_{2,2}$.\n\n- **Step 4:** Current node is $p_{2,2}=C$, $U(p_{2,2})=10$. This is the global maximum, so the walk halts.\n\nThe walk terminates at $C=p_{2,2}$, not $W$.\nVerdict for Option D: **Incorrect**.\n\nConclusion: Only Map $\\mathcal{M}_A$ leads the greedy walk to the wrong target $W$ while satisfying the condition that the correct target $C$ is the unique global maximum. The existence of a local maximum at $W$ traps the greedy algorithm.", "answer": "$$\\boxed{A}$$", "id": "2396175"}, {"introduction": "We now move from illustrative counterexamples to a core task in bioinformatics: phylogenetic tree reconstruction. This practice challenges you to compare two different algorithms for building a tree from a distance matrix: a naive greedy heuristic and the widely used Unweighted Pair Group Method with Arithmetic mean (UPGMA) [@problem_id:2396166]. By analyzing a case where these two methods produce different tree topologies, you will explore a crucial subtlety in algorithm design. You will learn how the decision to update the problem state (in this case, recalculating inter-cluster distances) after each greedy choice separates a simple heuristic from a more robust, though still greedy, standard algorithm.", "problem": "In distance-based phylogenetic reconstruction for four taxa $\\{A,B,C,D\\}$, consider the following two procedures:\n\n- Unweighted Pair Group Method with Arithmetic mean (UPGMA): Start with each taxon as its own cluster. At each iteration, identify the pair of current clusters with the smallest inter-cluster distance and merge them into a new cluster. The distance between the new cluster and any other cluster is defined as the arithmetic mean of the distances between all members of the two clusters.\n\n- Greedy Taxon-Pair Heuristic: Start with each taxon as its own cluster. Repeatedly select the pair of distinct taxa that have not yet been merged into any cluster and have the smallest pairwise distance in the original matrix; merge each such pair into a cluster. Continue until exactly two clusters remain, then connect these two clusters. Inter-cluster distances are never considered during pairing, and distances are never updated.\n\nWhich of the following symmetric distance matrices (all entries are in the same units, with $0$ on the diagonal) yields a rooted tree topology for the Greedy Taxon-Pair Heuristic that is different from the rooted topology produced by UPGMA?\n\nA.\n$$\n\\begin{pmatrix}\n0 & 2 & 3 & 9\\\\\n2 & 0 & 3 & 9\\\\\n3 & 3 & 0 & 5\\\\\n9 & 9 & 5 & 0\n\\end{pmatrix}\n$$\n\nB.\n$$\n\\begin{pmatrix}\n0 & 2 & 8 & 8\\\\\n2 & 0 & 8 & 8\\\\\n8 & 8 & 0 & 3\\\\\n8 & 8 & 3 & 0\n\\end{pmatrix}\n$$\n\nC.\n$$\n\\begin{pmatrix}\n0 & 1 & 4 & 7\\\\\n1 & 0 & 5 & 8\\\\\n4 & 5 & 0 & 2\\\\\n7 & 8 & 2 & 0\n\\end{pmatrix}\n$$\n\nD.\n$$\n\\begin{pmatrix}\n0 & 3 & 6 & 6\\\\\n3 & 0 & 6 & 6\\\\\n6 & 6 & 0 & 2\\\\\n6 & 6 & 2 & 0\n\\end{pmatrix}\n$$\n\nSelect one option.", "solution": "The problem statement has been validated and is found to be scientifically grounded, well-posed, and objective. It describes two deterministic algorithms for phylogenetic reconstruction and provides the necessary data to compare their outputs. We may proceed with the solution.\n\nThe problem requires a comparison of rooted tree topologies generated by two distinct methods for four taxa $\\{A, B, C, D\\}$. The topology of a rooted tree for four taxa is defined by the first two divergent lineages from the root. There are three possible topologies: $((A,B),(C,D))$, $((A,C),(B,D))$, and $((A,D),(B,C))$.\n\nLet us formally define the two procedures as described.\n\n**Procedure 1: Unweighted Pair Group Method with Arithmetic mean (UPGMA)**\nThis is a standard hierarchical clustering algorithm.\n1.  Begin with each taxon as an individual cluster.\n2.  In each step, identify the two clusters, $C_i$ and $C_j$, with the smallest inter-cluster distance, $d(C_i, C_j)$.\n3.  Merge $C_i$ and $C_j$ into a new cluster, $C_{new} = C_i \\cup C_j$.\n4.  The distance from this new cluster to any other cluster $C_k$ is computed as the arithmetic average:\n    $$d(C_{new}, C_k) = \\frac{1}{|C_{new}| |C_k|} \\sum_{u \\in C_{new}, v \\in C_k} d(u,v)$$\n5.  Repeat until a single cluster containing all taxa remains. The sequence of merges defines the tree topology.\n\n**Procedure 2: Greedy Taxon-Pair Heuristic (GH)**\nThis is a non-standard heuristic defined in the problem. For four taxa, its execution is as follows:\n1.  From the original distance matrix, identify the pair of taxa $\\{i,j\\}$ with the absolute minimum pairwise distance.\n2.  These two taxa are merged into one cluster $(i,j)$.\n3.  The problem states to continue until two clusters remain. With four taxa, after identifying the first pair $\\{i,j\\}$, the remaining two taxa $\\{k,l\\}$ are the only ones not yet in a cluster. The heuristic rule \"select the pair of distinct taxa that have not yet been merged\" forces the pairing of $\\{k,l\\}$.\n4.  Thus, two clusters $(i,j)$ and $(k,l)$ are formed. These are then connected.\n5.  The resulting topology is invariably of the form $((i,j),(k,l))$, determined solely by the smallest entry in the original distance matrix.\n\nWe will now analyze each provided distance matrix. Let the taxa $\\{A,B,C,D\\}$ correspond to indices $\\{1,2,3,4\\}$.\n\n### Option A Analysis\nThe distance matrix is:\n$$ D_A = \\begin{pmatrix} 0 & 2 & 3 & 9\\\\ 2 & 0 & 3 & 9\\\\ 3 & 3 & 0 & 5\\\\ 9 & 9 & 5 & 0 \\end{pmatrix} $$\nThe pairwise distances are $d(A,B)=2$, $d(A,C)=3$, $d(B,C)=3$, $d(C,D)=5$, $d(A,D)=9$, $d(B,D)=9$.\n\n**GH Topology for A:**\nThe minimum distance in the matrix $D_A$ is $d(A,B)=2$. Following the GH procedure, taxa $A$ and $B$ are clustered together. The remaining taxa, $C$ and $D$, form the second cluster. The resulting topology is $((A,B),(C,D))$.\n\n**UPGMA Topology for A:**\n- **Step 1:** The initial clusters are $\\{A\\}, \\{B\\}, \\{C\\}, \\{D\\}$. The minimum distance is $d(A,B)=2$. We merge $A$ and $B$ to form cluster $(A,B)$. The current clusters are $\\{(A,B), \\{C\\}, \\{D\\}\\}$.\n- **Step 2:** We compute the new distance matrix for these clusters. The distance $d(C,D)=5$ is retained. The new distances involving the cluster $(A,B)$ are:\n  $$ d((A,B),C) = \\frac{d(A,C) + d(B,C)}{2} = \\frac{3+3}{2} = 3 $$\n  $$ d((A,B),D) = \\frac{d(A,D) + d(B,D)}{2} = \\frac{9+9}{2} = 9 $$\n- **Step 3:** The distances between the current clusters are $d((A,B),C)=3$, $d((A,B),D)=9$, and $d(C,D)=5$. The minimum among these is $3$.\n- **Step 4:** UPGMA therefore merges the cluster $(A,B)$ with the cluster $\\{C\\}$, forming a new cluster $((A,B),C)$. The final step merges this with $\\{D\\}$.\nThe sequence of merges is $(A,B)$, then $((A,B),C)$, then $(((A,B),C),D)$. This corresponds to the rooted topology $(((A,B),C),D)$, where $D$ is the outgroup to the $(A,B,C)$ clade.\n\n**Conclusion for A:**\nThe GH topology is $((A,B),(C,D))$. The UPGMA topology is $(((A,B),C),D)$. These are different topologies. Therefore, matrix A yields different results for the two procedures.\n\nVerdict for Option A: **Correct**.\n\n### Option B Analysis\nThe distance matrix is:\n$$ D_B = \\begin{pmatrix} 0 & 2 & 8 & 8\\\\ 2 & 0 & 8 & 8\\\\ 8 & 8 & 0 & 3\\\\ 8 & 8 & 3 & 0 \\end{pmatrix} $$\nThe pairwise distances are $d(A,B)=2$, $d(C,D)=3$, and all others are $8$.\n\n**GH Topology for B:**\nThe minimum distance in $D_B$ is $d(A,B)=2$. The GH procedure clusters $(A,B)$ and $(C,D)$. The topology is $((A,B),(C,D))$.\n\n**UPGMA Topology for B:**\n- **Step 1:** The minimum distance is $d(A,B)=2$. Merge $A$ and $B$. Current clusters: $\\{(A,B), \\{C\\}, \\{D\\}\\}$.\n- **Step 2:** Compute new distances:\n  $$ d((A,B),C) = \\frac{d(A,C) + d(B,C)}{2} = \\frac{8+8}{2} = 8 $$\n  $$ d((A,B),D) = \\frac{d(A,D) + d(B,D)}{2} = \\frac{8+8}{2} = 8 $$\n- **Step 3:** The distances between current clusters are $d((A,B),C)=8$, $d((A,B),D)=8$, and $d(C,D)=3$. The minimum is $d(C,D)=3$.\n- **Step 4:** UPGMA merges $C$ and $D$. The two resulting clusters are $(A,B)$ and $(C,D)$. The final step merges these two.\nThe topology is $((A,B),(C,D))$.\n\n**Conclusion for B:**\nBoth GH and UPGMA yield the topology $((A,B),(C,D))$. The topologies are identical.\n\nVerdict for Option B: **Incorrect**.\n\n### Option C Analysis\nThe distance matrix is:\n$$ D_C = \\begin{pmatrix} 0 & 1 & 4 & 7\\\\ 1 & 0 & 5 & 8\\\\ 4 & 5 & 0 & 2\\\\ 7 & 8 & 2 & 0 \\end{pmatrix} $$\nThe pairwise distances are $d(A,B)=1$, $d(C,D)=2$, $d(A,C)=4$, $d(B,C)=5$, $d(A,D)=7$, $d(B,D)=8$.\n\n**GH Topology for C:**\nThe minimum distance in $D_C$ is $d(A,B)=1$. The GH procedure clusters $(A,B)$ and $(C,D)$. The topology is $((A,B),(C,D))$.\n\n**UPGMA Topology for C:**\n- **Step 1:** The minimum distance is $d(A,B)=1$. Merge $A$ and $B$. Current clusters: $\\{(A,B), \\{C\\}, \\{D\\}\\}$.\n- **Step 2:** Compute new distances:\n  $$ d((A,B),C) = \\frac{d(A,C) + d(B,C)}{2} = \\frac{4+5}{2} = 4.5 $$\n  $$ d((A,B),D) = \\frac{d(A,D) + d(B,D)}{2} = \\frac{7+8}{2} = 7.5 $$\n- **Step 3:** The distances between current clusters are $d((A,B),C)=4.5$, $d((A,B),D)=7.5$, and $d(C,D)=2$. The minimum is $d(C,D)=2$.\n- **Step 4:** UPGMA merges $C$ and $D$. The two resulting clusters are $(A,B)$ and $(C,D)$. The final step merges these two.\nThe topology is $((A,B),(C,D))$.\n\n**Conclusion for C:**\nBoth GH and UPGMA yield the topology $((A,B),(C,D))$. The topologies are identical.\n\nVerdict for Option C: **Incorrect**.\n\n### Option D Analysis\nThe distance matrix is:\n$$ D_D = \\begin{pmatrix} 0 & 3 & 6 & 6\\\\ 3 & 0 & 6 & 6\\\\ 6 & 6 & 0 & 2\\\\ 6 & 6 & 2 & 0 \\end{pmatrix} $$\nThe pairwise distances are $d(C,D)=2$, $d(A,B)=3$, and all others are $6$.\n\n**GH Topology for D:**\nThe minimum distance in $D_D$ is $d(C,D)=2$. The GH procedure clusters $(C,D)$ and $(A,B)$. The topology is $((A,B),(C,D))$.\n\n**UPGMA Topology for D:**\n- **Step 1:** The minimum distance is $d(C,D)=2$. Merge $C$ and $D$. Current clusters: $\\{(C,D), \\{A\\}, \\{B\\}\\}$.\n- **Step 2:** Compute new distances:\n  $$ d((C,D),A) = \\frac{d(C,A) + d(D,A)}{2} = \\frac{6+6}{2} = 6 $$\n  $$ d((C,D),B) = \\frac{d(C,B) + d(D,B)}{2} = \\frac{6+6}{2} = 6 $$\n- **Step 3:** The distances between current clusters are $d((C,D),A)=6$, $d((C,D),B)=6$, and $d(A,B)=3$. The minimum is $d(A,B)=3$.\n- **Step 4:** UPGMA merges $A$ and $B$. The two resulting clusters are $(C,D)$ and $(A,B)$. The final step merges these two.\nThe topology is $((A,B),(C,D))$.\n\n**Conclusion for D:**\nBoth GH and UPGMA yield the topology $((A,B),(C,D))$. The topologies are identical.\n\nVerdict for Option D: **Incorrect**.\n\n### Final Conclusion\nThe only matrix for which the Greedy Taxon-Pair Heuristic and UPGMA produce different rooted tree topologies is matrix A. The discrepancy arises because UPGMA's distance averaging step can alter the relative closeness of clusters, changing the merge order compared to a simple heuristic that only considers the original pairwise distances. In case A, the averaged distance $d((A,B),C)=3$ becomes smaller than the original distance $d(C,D)=5$, leading UPGMA to group $C$ with $(A,B)$ before $D$ is considered, resulting in an asymmetric topology. For options B, C, and D, this reordering does not occur.", "answer": "$$\\boxed{A}$$", "id": "2396166"}]}