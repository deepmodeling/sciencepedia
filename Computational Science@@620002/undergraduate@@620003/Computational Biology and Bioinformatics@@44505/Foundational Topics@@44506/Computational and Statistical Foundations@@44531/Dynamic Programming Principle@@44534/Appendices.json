{"hands_on_practices": [{"introduction": "When first encountering sequence alignment, a common question arises: why not simply make the best local choice at each step? This practice directly tackles that question by leading you through a comparison of a simple \"greedy\" strategy against the globally optimal solution found via dynamic programming. By analyzing a case where the greedy approach fails, you will gain a crucial insight into the power of the dynamic programming principle to guarantee optimality where myopic strategies fall short [@problem_id:2387141].", "problem": "An essential application of the dynamic programming principle in computational biology and bioinformatics is global sequence alignment. Consider the deoxyribonucleic acid alphabet $\\Sigma=\\{\\texttt{A},\\texttt{C},\\texttt{G},\\texttt{T}\\}$ and define a substitution scoring function $s:\\Sigma\\times\\Sigma\\to\\mathbb{R}$ by $s(x,y)=+2$ if $x=y$ and $s(x,y)=-1$ if $x\\neq y$. Use a linear gap penalty $g=-2$ for aligning any letter with a gap.\n\nLet the two sequences be $X=\\texttt{ACG}$ and $Y=\\texttt{AG}$. You will compare two strategies:\n\n1. A globally optimal alignment computed using the dynamic programming principle for global alignment (the Needlemanâ€“Wunsch algorithm), which relies on the optimal substructure property of prefixes.\n2. A greedy alignment strategy defined as follows: at each step, given the next unaligned letters $x_i$ and $y_j$, choose the action with the highest immediate score among the three possibilities: align $x_i$ with $y_j$ with score $s(x_i,y_j)$, align $x_i$ with a gap with score $g$, or align $y_j$ with a gap with score $g$. In case of ties, prefer aligning $x_i$ with $y_j$, and if still tied, prefer inserting a gap opposite $x_i$ rather than opposite $y_j$. Continue until both sequences are fully aligned.\n\nUsing only the dynamic programming principle and the definitions above (without invoking any unprovided formulas), compute:\n- the optimal global alignment score $F$ for aligning $X$ and $Y$ under $s$ and $g$,\n- the greedy alignment score $G$ produced by the greedy rule above,\n- and finally the difference $\\Delta=F-G$.\n\nReport only the value of $\\Delta$ as your final answer. No rounding is needed, and no units are required.", "solution": "The problem statement is subjected to validation.\n\nStep 1: Extracted Givens\n- Alphabet: $\\Sigma=\\{\\texttt{A},\\texttt{C},\\texttt{G},\\texttt{T}\\}$\n- Substitution scoring function $s(x,y)$: $s(x,y)=+2$ if $x=y$ and $s(x,y)=-1$ if $x \\neq y$.\n- Linear gap penalty: $g=-2$.\n- Sequences: $X=\\texttt{ACG}$, $Y=\\texttt{AG}$.\n- Strategy 1: Globally optimal alignment using the dynamic programming principle. The score is denoted $F$.\n- Strategy 2: A specified greedy alignment strategy. The score is denoted $G$.\n- Greedy tie-breaking rules: In case of a tie in scores, the preferred order of operations is: first, align $x_i$ with $y_j$; second, align $x_i$ with a gap; third, align $y_j$ with a gap.\n- Objective: Compute the difference $\\Delta=F-G$.\n\nStep 2: Validation\nThe problem is scientifically grounded, as it concerns the Needleman-Wunsch algorithm, a fundamental concept in computational biology. It is well-posed, providing all necessary sequences, a complete scoring function, and unambiguous rules for both the optimal and greedy procedures. The language is objective and precise. The problem is self-contained and does not violate any physical or mathematical principles. All terms are clearly defined.\n\nStep 3: Verdict\nThe problem is valid. A complete solution will be developed.\n\nThe task requires the computation of two alignment scores for the sequences $X=\\texttt{ACG}$ and $Y=\\texttt{AG}$ based on the provided scoring scheme: $s(x,y)=+2$ for a match, $s(x,y)=-1$ for a mismatch, and a linear gap penalty $g=-2$.\n\nFirst, we will compute the optimal global alignment score, $F$, using the dynamic programming principle. Let $m$ be the length of sequence $X$ and $n$ be the length of sequence $Y$. Here, $m=3$ and $n=2$. We define a matrix $F(i,j)$ representing the score of the optimal alignment of the prefixes $X[1..i]$ and $Y[1..j]$. The value of $F(i,j)$ is derived from the optimal substructure property, which dictates that the optimal alignment of prefixes must be constructed from optimal alignments of smaller prefixes. The value of each cell is determined by the maximum of three possible preceding states:\n1. Aligning $X[i]$ with $Y[j]$: score is $F(i-1, j-1) + s(X[i], Y[j])$.\n2. Aligning $X[i]$ with a gap: score is $F(i-1, j) + g$.\n3. Aligning $Y[j]$ with a gap: score is $F(i, j-1) + g$.\n\nThus, the recurrence relation is:\n$$F(i,j) = \\max\\left\\{ F(i-1, j-1) + s(X[i], Y[j]),\\; F(i-1, j) + g,\\; F(i, j-1) + g \\right\\}$$\nThe base conditions are for alignments of a prefix with an empty string:\n$F(0,0) = 0$\n$F(i,0) = i \\times g$ for $i > 0$\n$F(0,j) = j \\times g$ for $j > 0$\n\nWe construct a $(m+1) \\times (n+1)$ or $4 \\times 3$ matrix.\nInitialization:\n$F(0,0) = 0$\n$F(1,0) = 1 \\times (-2) = -2$\n$F(2,0) = 2 \\times (-2) = -4$\n$F(3,0) = 3 \\times (-2) = -6$\n$F(0,1) = 1 \\times (-2) = -2$\n$F(0,2) = 2 \\times (-2) = -4$\n\nFilling the matrix for $i \\in \\{1,2,3\\}$ and $j \\in \\{1,2\\}$:\n$F(1,1)$: Align $X_1=\\texttt{A}$ and $Y_1=\\texttt{A}$. $s(\\texttt{A},\\texttt{A})=+2$.\n$F(1,1) = \\max\\{F(0,0)+2, F(0,1)-2, F(1,0)-2\\} = \\max\\{0+2, -2-2, -2-2\\} = 2$.\n\n$F(2,1)$: Align $X_2=\\texttt{C}$ and $Y_1=\\texttt{A}$. $s(\\texttt{C},\\texttt{A})=-1$.\n$F(2,1) = \\max\\{F(1,0)-1, F(1,1)-2, F(2,0)-2\\} = \\max\\{-2-1, 2-2, -4-2\\} = \\max\\{-3, 0, -6\\} = 0$.\n\n$F(3,1)$: Align $X_3=\\texttt{G}$ and $Y_1=\\texttt{A}$. $s(\\texttt{G},\\texttt{A})=-1$.\n$F(3,1) = \\max\\{F(2,0)-1, F(2,1)-2, F(3,0)-2\\} = \\max\\{-4-1, 0-2, -6-2\\} = \\max\\{-5, -2, -8\\} = -2$.\n\n$F(1,2)$: Align $X_1=\\texttt{A}$ and $Y_2=\\texttt{G}$. $s(\\texttt{A},\\texttt{G})=-1$.\n$F(1,2) = \\max\\{F(0,1)-1, F(0,2)-2, F(1,1)-2\\} = \\max\\{-2-1, -4-2, 2-2\\} = \\max\\{-3, -6, 0\\} = 0$.\n\n$F(2,2)$: Align $X_2=\\texttt{C}$ and $Y_2=\\texttt{G}$. $s(\\texttt{C},\\texttt{G})=-1$.\n$F(2,2) = \\max\\{F(1,1)-1, F(1,2)-2, F(2,1)-2\\} = \\max\\{2-1, 0-2, 0-2\\} = \\max\\{1, -2, -2\\} = 1$.\n\n$F(3,2)$: Align $X_3=\\texttt{G}$ and $Y_2=\\texttt{G}$. $s(\\texttt{G},\\texttt{G})=+2$.\n$F(3,2) = \\max\\{F(2,1)+2, F(2,2)-2, F(3,1)-2\\} = \\max\\{0+2, 1-2, -2-2\\} = \\max\\{2, -1, -4\\} = 2$.\n\nThe complete DP matrix is:\n$$\n\\begin{array}{c|ccc}\n & \\text{ } & \\texttt{A} & \\texttt{G} \\\\\n\\hline\n\\text{ } & 0 & -2 & -4 \\\\\n\\texttt{A} & -2 & 2 & 0 \\\\\n\\texttt{C} & -4 & 0 & 1 \\\\\n\\texttt{G} & -6 & -2 & 2\n\\end{array}\n$$\nThe optimal global alignment score is the value in the bottom-right cell, $F = F(3,2) = 2$.\n\nNext, we compute the greedy alignment score, $G$. The greedy strategy considers the next unaligned letters and chooses the action with the maximum immediate score. Let $i$ and $j$ be pointers to the current characters in $X$ and $Y$, starting at $i=1, j=1$. The total score $G$ is initialized to $0$.\n\nStep 1: $i=1, j=1$. Current letters are $X_1=\\texttt{A}, Y_1=\\texttt{A}$.\n- Action 1 (Align $X_1$ with $Y_1$): Score $s(\\texttt{A},\\texttt{A}) = +2$.\n- Action 2 (Align $X_1$ with gap): Score $g = -2$.\n- Action 3 (Align $Y_1$ with gap): Score $g = -2$.\nThe maximum score is $2$. We align $\\texttt{A}$ with $\\texttt{A}$.\n$G$ becomes $0+2=2$. We advance both pointers to $i=2, j=2$. The alignment is $\\texttt{A}$ -- $\\texttt{A}$.\n\nStep 2: $i=2, j=2$. Current letters are $X_2=\\texttt{C}, Y_2=\\texttt{G}$.\n- Action 1 (Align $X_2$ with $Y_2$): Score $s(\\texttt{C},\\texttt{G}) = -1$.\n- Action 2 (Align $X_2$ with gap): Score $g = -2$.\n- Action 3 (Align $Y_2$ with gap): Score $g = -2$.\nThe maximum score is $-1$. We align $\\texttt{C}$ with $\\texttt{G}$.\n$G$ becomes $2+(-1)=1$. We advance both pointers to $i=3, j=3$. The alignment is $\\texttt{AC}$ -- $\\texttt{AG}$.\n\nStep 3: $i=3, j=3$. Sequence $Y$ is exhausted as $j > n=2$.\nThe only remaining action is to align the rest of sequence $X$ with gaps. The remaining character is $X_3=\\texttt{G}$.\nWe align $\\texttt{G}$ with a gap, which has a score of $g=-2$.\n$G$ becomes $1+(-2)=-1$. We advance $i$ to $4$. The alignment is $\\texttt{ACG}$ -- $\\texttt{AG-}$.\n\nBoth sequences are now fully aligned. The final greedy alignment score is $G=-1$.\n\nFinally, we compute the difference $\\Delta=F-G$.\n$F = 2$\n$G = -1$\n$\\Delta = F - G = 2 - (-1) = 3$.\n\nThe difference between the optimal score obtained via dynamic programming and the score from the specified greedy strategy is $3$.", "answer": "$$\n\\boxed{3}\n$$", "id": "2387141"}, {"introduction": "The dynamic programming principle is not limited to aligning two distinct sequences; its true power lies in its adaptability to a wide range of optimization problems. This exercise demonstrates this versatility by challenging you to find the longest palindromic subsequence within a single DNA string. You will discover how this seemingly different problem can be ingeniously transformed into a classic longest common subsequence (LCS) problem, solvable with the familiar dynamic programming table [@problem_id:2387070].", "problem": "A deoxyribonucleic acid (DNA) segment is modeled as a finite string $S$ over the alphabet $\\{\\text{A}, \\text{C}, \\text{G}, \\text{T}\\}$. A subsequence of $S$ is obtained by deleting zero or more characters of $S$ without changing the order of the remaining characters. A palindrome is a string that is identical to its reverse. Consider the DNA string $S = \\text{ACGTCAGCAT}$ of length $10$.\n\nUsing only the definitions above and the dynamic programming principle, determine the length of the longest palindromic subsequence of $S$ (not necessarily contiguous). Report the length as a single integer with no units. No rounding is required.", "solution": "The posed problem is subjected to validation.\n\n**Step 1: Extract Givens**\n-   **Domain**: A deoxyribonucleic acid (DNA) segment is modeled as a finite string $S$ over the alphabet $\\{\\text{A}, \\text{C}, \\text{G}, \\text{T}\\}$.\n-   **Definition of Subsequence**: A subsequence of $S$ is obtained by deleting zero or more characters of $S$ without changing the order of the remaining characters.\n-   **Definition of Palindrome**: A palindrome is a string that is identical to its reverse.\n-   **Input String**: $S = \\text{ACGTCAGCAT}$.\n-   **Length of Input String**: $10$.\n-   **Objective**: Determine the length of the longest palindromic subsequence of $S$.\n-   **Constraint**: The solution must use the dynamic programming principle.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem statement is assessed against the required criteria:\n-   **Scientific Grounding**: The problem is well-grounded in computational biology and computer science. The representation of DNA as a string and the analysis of its subsequences are standard and valid abstractions.\n-   **Well-Posedness**: The problem of finding the length of the longest palindromic subsequence is a classic, well-defined problem with a unique solution. All necessary data ($S$) and definitions are provided.\n-   **Objectivity**: The language is formal, precise, and devoid of any subjectivity or ambiguity.\n\n**Verdict:** The problem is valid. It is a standard exercise in dynamic programming, is self-contained, and scientifically sound. Proceeding to solution.\n\nThe problem is to find the length of the longest palindromic subsequence (LPS) of a given string $S$. A fundamental result from the theory of algorithms states that the length of the LPS of a string $S$ is equivalent to the length of the longest common subsequence (LCS) of $S$ and its reverse, denoted as $S_{rev}$. We will use dynamic programming to solve this equivalent LCS problem.\n\nLet the given string be $S = \\text{ACGTCAGCAT}$. Its length is $n=10$.\nThe reverse of $S$ is $S_{rev} = \\text{TACGACGTCA}$.\n\nLet $L(i, j)$ denote the length of the LCS of the prefix of $S$ of length $i$ (i.e., $S[1..i]$) and the prefix of $S_{rev}$ of length $j$ (i.e., $S_{rev}[1..j]$). Our goal is to compute $L(n, n) = L(10, 10)$.\n\nThe dynamic programming recurrence relation for $L(i, j)$ is as follows, for $i, j \\in \\{1, \\dots, n\\}$:\n$$\nL(i, j) =\n\\begin{cases}\n    L(i-1, j-1) + 1 & \\text{if } S[i] = S_{rev}[j] \\\\\n    \\max(L(i-1, j), L(i, j-1)) & \\text{if } S[i] \\neq S_{rev}[j]\n\\end{cases}\n$$\nThe base cases are $L(i, 0) = 0$ for all $i \\in \\{0, \\dots, n\\}$ and $L(0, j) = 0$ for all $j \\in \\{0, \\dots, n\\}$.\n\nWe construct an $(n+1) \\times (n+1)$ table to store the values of $L(i, j)$. The rows are indexed by characters of $S$ (from $i=1$ to $10$) and columns by characters of $S_{rev}$ (from $j=1$ to $10$). The $0$-th row and column are initialized to $0$.\n\nLet $S_i$ be the $i$-th character of $S$ and $(S_{rev})_j$ be the $j$-th character of $S_{rev}$.\n$S = \\text{A}_1 \\text{C}_2 \\text{G}_3 \\text{T}_4 \\text{C}_5 \\text{A}_6 \\text{G}_7 \\text{C}_8 \\text{A}_9 \\text{T}_{10}$\n$S_{rev} = \\text{T}_1 \\text{A}_2 \\text{C}_3 \\text{G}_4 \\text{A}_5 \\text{C}_6 \\text{G}_7 \\text{T}_8 \\text{C}_9 \\text{A}_{10}$\n\nThe table is populated as follows:\n$$\n\\begin{array}{c|ccccccccccc}\nL(i,j) & \\text{} & \\text{T}_1 & \\text{A}_2 & \\text{C}_3 & \\text{G}_4 & \\text{A}_5 & \\text{C}_6 & \\text{G}_7 & \\text{T}_8 & \\text{C}_9 & \\text{A}_{10} \\\\\n\\hline\n\\text{} & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\\text{A}_1 & 0 & 0 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\\\\n\\text{C}_2 & 0 & 0 & 1 & 2 & 2 & 2 & 2 & 2 & 2 & 2 & 2 \\\\\n\\text{G}_3 & 0 & 0 & 1 & 2 & 3 & 3 & 3 & 3 & 3 & 3 & 3 \\\\\n\\text{T}_4 & 0 & 1 & 1 & 2 & 3 & 3 & 3 & 3 & 4 & 4 & 4 \\\\\n\\text{C}_5 & 0 & 1 & 1 & 2 & 3 & 3 & 4 & 4 & 4 & 5 & 5 \\\\\n\\text{A}_6 & 0 & 1 & 2 & 2 & 3 & 4 & 4 & 4 & 4 & 5 & 6 \\\\\n\\text{G}_7 & 0 & 1 & 2 & 2 & 3 & 4 & 4 & 5 & 5 & 5 & 6 \\\\\n\\text{C}_8 & 0 & 1 & 2 & 3 & 3 & 4 & 5 & 5 & 5 & 6 & 6 \\\\\n\\text{A}_9 & 0 & 1 & 2 & 3 & 3 & 4 & 5 & 5 & 5 & 6 & 7 \\\\\n\\text{T}_{10} & 0 & 1 & 2 & 3 & 3 & 4 & 5 & 5 & 6 & 6 & 7 \\\\\n\\end{array}\n$$\nLet us verify a few key entries to ensure correctness.\n-   $L(6, 10)$: $S[6] = \\text{'A'}$ and $S_{rev}[10] = \\text{'A'}$. Thus, $L(6, 10) = L(5, 9) + 1 = 5 + 1 = 6$.\n-   $L(8, 9)$: $S[8] = \\text{'C'}$ and $S_{rev}[9] = \\text{'C'}$. Thus, $L(8, 9) = L(7, 8) + 1 = 5 + 1 = 6$.\n-   $L(9, 10)$: $S[9] = \\text{'A'}$ and $S_{rev}[10] = \\text{'A'}$. Thus, $L(9, 10) = L(8, 9) + 1 = 6 + 1 = 7$.\n-   $L(10, 10)$: $S[10] = \\text{'T'}$ and $S_{rev}[10] = \\text{'A'}$. They are not equal. Thus, $L(10, 10) = \\max(L(9, 10), L(10, 9)) = \\max(7, 6) = 7$.\n\nThe final entry in the table, $L(10, 10)$, gives the length of the LCS of $S$ and $S_{rev}$, which is the length of the LPS of $S$.\nFrom the table, the value of $L(10, 10)$ is $7$.\nA possible longest palindromic subsequence is $\\text{ACGAGCA}$. This can be constructed by tracking back the path in the table.\n\nThe length of the longest palindromic subsequence is $7$.", "answer": "$$\\boxed{7}$$", "id": "2387070"}, {"introduction": "Many crucial questions in biology, such as identifying conserved functional regions across species, require comparing more than two sequences simultaneously. This practice moves beyond pairwise alignment and challenges you to generalize the dynamic programming framework to three dimensions for a multiple sequence alignment. By working with a 3D scoring matrix and a more complex recurrence relation, you will build the foundational skills needed to understand the algorithms that power modern multiple sequence alignment tools [@problem_id:2387093].", "problem": "Consider three deoxyribonucleic acid (DNA) sequences over the alphabet $\\mathcal{A}=\\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$: $X=(\\text{A},\\text{G},\\text{C})$, $Y=(\\text{A},\\text{C})$, and $Z=(\\text{A},\\text{G})$. An alignment is a sequence of columns, each column being an element of $(\\mathcal{A}\\cup\\{-\\})^{3}$ in which not all three entries are $-$, such that the total number of non-gap occurrences drawn from each sequence equals its length. The score of an alignment is the sum over its columns of a custom triplet scoring function $S$ that depends on the three entries in the column and is not reducible to a sum of pairwise scores. The function $S$ is defined for any triple $(u,v,w)\\in(\\mathcal{A}\\cup\\{-\\})^{3}$ as follows:\n- If there are no gaps, that is $u,v,w\\in\\mathcal{A}$, then\n  - if $u=v=w$, $S(u,v,w)=\\alpha$;\n  - if exactly two of $u,v,w$ are equal, $S(u,v,w)=\\beta$;\n  - if $u$, $v$, and $w$ are all distinct, $S(u,v,w)=\\gamma$.\n- If there is exactly one gap, for letters $a,b\\in\\mathcal{A}$,\n  - $S(a,b,-)=S(a,-,b)=S(-,a,b)=\\delta$ if $a=b$,\n  - $S(a,b,-)=S(a,-,b)=S(-,a,b)=\\epsilon$ if $a\\neq b$.\n- If there are exactly two gaps, for any $a\\in\\mathcal{A}$,\n  - $S(a,-,-)=S(-,a,-)=S(-,-,a)=\\zeta$.\n\nUse the parameter values $\\alpha=5$, $\\beta=2$, $\\gamma=-1$, $\\delta=1$, $\\epsilon=-2$, and $\\zeta=-3$. Compute the optimal global three-sequence alignment score of $X$, $Y$, and $Z$ under this scheme, where the alignment score is the sum of $S$ over its columns. Give the exact integer value (no rounding). Do not include units in your answer.", "solution": "The user has submitted a problem that must be validated before a solution is attempted.\n\n### Step 1: Extract Givens\n- **Sequences**:\n  - $X = (\\text{A}, \\text{G}, \\text{C})$ of length $n_x=3$.\n  - $Y = (\\text{A}, \\text{C})$ of length $n_y=2$.\n  - $Z = (\\text{A}, \\text{G})$ of length $n_z=2$.\n- **Alphabet**: $\\mathcal{A} = \\{\\text{A}, \\text{C}, \\text{G}, \\text{T}\\}$.\n- **Scoring Function** $S(u,v,w)$ for $(u,v,w) \\in (\\mathcal{A} \\cup \\{-\\})^3$:\n  - **Zero gaps**: $S(u,v,w) = \\alpha$ if $u=v=w$; $S(u,v,w) = \\beta$ if exactly two are equal; $S(u,v,w) = \\gamma$ if all are distinct.\n  - **One gap**: $S(a,b,-) = S(a,-,b) = S(-,a,b) = \\delta$ if $a=b$; $S(a,b,-) = S(a,-,b) = S(-,a,b) = \\epsilon$ if $a \\neq b$.\n  - **Two gaps**: $S(a,-,-) = S(-,a,-) = S(-,-,a) = \\zeta$.\n- **Parameter Values**:\n  - $\\alpha = 5$\n  - $\\beta = 2$\n  - $\\gamma = -1$\n  - $\\delta = 1$\n  - $\\epsilon = -2$\n  - $\\zeta = -3$\n- **Objective**: Compute the optimal global three-sequence alignment score.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is assessed against the validation criteria.\n- **Scientifically Grounded**: The problem is a standard multiple sequence alignment task, a fundamental concept in computational biology and bioinformatics. The scoring scheme is well-defined. This is valid.\n- **Well-Posed**: The problem asks for an optimal score under a given scoring function. This is a classic optimization problem solvable with dynamic programming. A unique optimal score exists. This is valid.\n- **Objective**: The problem is stated with precise definitions and numerical values, free of subjective or ambiguous language. This is valid.\n- **Completeness and Consistency**: All required information (sequences, alphabet, scoring function, parameters) is provided. There are no contradictions. This is valid.\n- **Feasibility**: The sequences are short, making the problem computationally tractable by hand, which is appropriate for an exercise. This is valid.\n\n### Step 3: Verdict and Action\nThe problem is scientifically sound, well-posed, and complete. It is a valid problem. Proceeding to solution.\n\nThis problem requires the computation of the optimal score for a global alignment of three sequences. This is a classic application of the dynamic programming principle. We define a 3D matrix, $F$, where $F(i, j, k)$ represents the maximum score for an alignment of the prefixes $X[1..i]$, $Y[1..j]$, and $Z[1..k]$. The sequences are $X=(\\text{A}, \\text{G}, \\text{C})$, $Y=(\\text{A}, \\text{C})$, and $Z=(\\text{A}, \\text{G})$ with lengths $n_x=3$, $n_y=2$, and $n_z=2$, respectively. Our goal is to compute $F(3, 2, 2)$.\n\nThe scoring parameters are given as $\\alpha=5$, $\\beta=2$, $\\gamma=-1$, $\\delta=1$, $\\epsilon=-2$, and $\\zeta=-3$.\n\nThe value of $F(i, j, k)$ is determined by taking the maximum over $7$ possible preceding states, corresponding to the $7$ non-null alignment column types:\n$$\nF(i, j, k) = \\max \\begin{cases}\nF(i-1, j-1, k-1) + S(x_i, y_j, z_k) & \\text{(align } x_i, y_j, z_k \\text{)} \\\\\nF(i-1, j-1, k) + S(x_i, y_j, -) & \\text{(align } x_i, y_j \\text{ with gap)} \\\\\nF(i-1, j, k-1) + S(x_i, -, z_k) & \\text{(align } x_i, z_k \\text{ with gap)} \\\\\nF(i, j-1, k-1) + S(-, y_j, z_k) & \\text{(align } y_j, z_k \\text{ with gap)} \\\\\nF(i-1, j, k) + S(x_i, -, -) & \\text{(align } x_i \\text{ with two gaps)} \\\\\nF(i, j-1, k) + S(-, y_j, -) & \\text{(align } y_j \\text{ with two gaps)} \\\\\nF(i, j, k-1) + S(-, -, z_k) & \\text{(align } z_k \\text{ with two gaps)}\n\\end{cases}\n$$\n\n**Initialization**:\nThe score of aligning to empty sequences is $0$, so $F(0, 0, 0) = 0$. Aligning a prefix of one sequence against two empty sequences involves introducing only gaps.\n$F(i, 0, 0) = i \\times \\zeta$ for $i \\in \\{1, 2, 3\\}$.\n$F(0, j, 0) = j \\times \\zeta$ for $j \\in \\{1, 2\\}$.\n$F(0, 0, k) = k \\times \\zeta$ for $k \\in \\{1, 2\\}$.\n\nAligning prefixes of two sequences against one empty sequence is a standard pairwise alignment problem where a gap corresponds to a score of $\\zeta$ and a match/mismatch corresponds to $S(a,b,-)$.\n$F(i, j, 0) = \\max(F(i-1, j, 0) + \\zeta, F(i, j-1, 0) + \\zeta, F(i-1, j-1, 0) + S(x_i, y_j, -))$.\nSimilar relations hold for $F(i, 0, k)$ and $F(0, j, k)$.\n\nWe fill the $4 \\times 3 \\times 3$ dynamic programming table, $F(i,j,k)$ for $i \\in [0,3], j \\in [0,2], k \\in [0,2]$.\n\n**Plane $k=0$**:\n$F(0,0,0) = 0$\n$F(1,0,0)=-3$, $F(2,0,0)=-6$, $F(3,0,0)=-9$\n$F(0,1,0)=-3$, $F(0,2,0)=-6$\n$F(1,1,0) = \\max(F(0,0,0)+S(\\text{A},\\text{A},-), F(1,0,0)+\\zeta, F(0,1,0)+\\zeta) = \\max(0+\\delta, -3-3, -3-3) = 1$\n$F(1,2,0) = \\max(F(0,1,0)+S(\\text{A},\\text{C},-), F(1,1,0)+\\zeta, F(0,2,0)+\\zeta) = \\max(-3+\\epsilon, 1-3, -6-3) = -2$\n$F(2,1,0) = \\max(F(1,0,0)+S(\\text{G},\\text{A},-), F(2,0,0)+\\zeta, F(1,1,0)+\\zeta) = \\max(-3+\\epsilon, -6-3, 1-3) = -2$\n$F(2,2,0) = \\max(F(1,1,0)+S(\\text{G},\\text{C},-), F(2,1,0)+\\zeta, F(1,2,0)+\\zeta) = \\max(1+\\epsilon, -2-3, -2-3) = -1$\n$F(3,1,0) = \\max(F(2,0,0)+S(\\text{C},\\text{A},-), F(3,0,0)+\\zeta, F(2,1,0)+\\zeta) = \\max(-6+\\epsilon, -9-3, -2-3) = -5$\n$F(3,2,0) = \\max(F(2,1,0)+S(\\text{C},\\text{C},-), F(3,1,0)+\\zeta, F(2,2,0)+\\zeta) = \\max(-2+\\delta, -5-3, -1-3) = -1$\n\n**Plane $k=1$**:\n$F(0,0,1)=-3$, $F(0,1,1)=1$, $F(0,2,1)=-2$\n$F(1,0,1)=1$, $F(2,0,1)=-2$, $F(3,0,1)=-5$\n$F(1,1,1) = \\max(F(0,0,0)+S(\\text{A},\\text{A},\\text{A}), \\dots) = \\max(0+\\alpha, F(0,0,1)+S(\\text{A},\\text{A},-), \\dots) = \\max(5, -3+\\delta, \\dots) = 5$\n$F(1,2,1) = \\max(F(0,1,0)+S(\\text{A},\\text{C},\\text{A}), \\dots, F(1,1,1)+S(-,\\text{C},-), \\dots) = \\max(-3+\\beta, \\dots, 5+\\zeta, \\dots) = \\max(-1, 2) = 2$\n$F(2,1,1) = \\max(F(1,0,0)+S(\\text{G},\\text{A},\\text{A}), \\dots, F(1,1,1)+S(\\text{G},-,-), \\dots) = \\max(-3+\\beta, \\dots, 5+\\zeta, \\dots) = \\max(-1, 2) = 2$\n$F(2,2,1) = \\max(F(1,1,0)+S(\\text{G},\\text{C},\\text{A}), \\dots, F(1,1,1)+S(\\text{G},\\text{C},-), \\dots) = \\max(1+\\gamma, \\dots, 5+\\epsilon, \\dots) = \\max(0, 3) = 3$\n$F(3,1,1) = \\max(F(2,0,0)+S(\\text{C},\\text{A},\\text{A}), \\dots, F(2,1,1)+S(\\text{C},-,-), \\dots) = \\max(-6+\\beta, \\dots, 2+\\zeta, \\dots) = \\max(-4, -1) = -1$\n$F(3,2,1) = \\max(F(2,1,0)+S(\\text{C},\\text{C},\\text{A}), \\dots, F(2,1,1)+S(\\text{C},\\text{C},-), \\dots) = \\max(-2+\\beta, \\dots, 2+\\delta, \\dots) = \\max(0, 3) = 3$\n\n**Plane $k=2$**:\n$F(0,0,2)=-6$, $F(0,1,2)=-2$, $F(0,2,2)=-1$\n$F(1,0,2)=-2$, $F(2,0,2)=2$, $F(3,0,2)=-1$\n$F(1,1,2) = \\max(F(0,0,1)+S(\\text{A},\\text{A},\\text{G}), \\dots, F(1,1,1)+S(-,-,\\text{G}), \\dots) = \\max(-3+\\beta, \\dots, 5+\\zeta, \\dots) = \\max(-1, 2) = 2$\n$F(1,2,2) = \\max(F(0,1,1)+S(\\text{A},\\text{C},\\text{G}), \\dots, F(1,1,1)+S(-,\\text{C},\\text{G}), \\dots) = \\max(1+\\gamma, \\dots, 5+\\epsilon, \\dots) = \\max(0, 3) = 3$\n$F(2,1,2) = \\max(F(1,0,1)+S(\\text{G},\\text{A},\\text{G}), \\dots, F(1,1,1)+S(G,-,G), \\dots) = \\max(1+\\beta, \\dots, 5+\\delta, \\dots) = \\max(3, 6) = 6$\n$F(2,2,2) = \\max(F(1,1,1)+S(\\text{G},\\text{C},\\text{G}), \\dots) = \\max(5+\\beta, \\dots) = \\max(7, \\dots) = 7$\n$F(3,1,2) = \\max(\\dots, F(2,0,2)+S(\\text{C},\\text{A},-), \\dots, F(2,1,2)+S(\\text{C},-,-), \\dots) = \\max(\\dots, 2+\\epsilon, \\dots, 6+\\zeta, \\dots) = \\max(\\dots, 0, \\dots, 3, \\dots) = 3$\n\nFinally, we compute $F(3,2,2)$, the optimal score for the full sequences:\n$$\nF(3,2,2) = \\max \\begin{cases}\nF(2,1,1) + S(x_3, y_2, z_2) = F(2,1,1) + S(\\text{C},\\text{C},\\text{G}) = 2 + \\beta = 2+2=4 \\\\\nF(2,1,2) + S(x_3, y_2, -) = F(2,1,2) + S(\\text{C},\\text{C},-) = 6 + \\delta = 6+1=7 \\\\\nF(2,2,1) + S(x_3, -, z_2) = F(2,2,1) + S(\\text{C},-,\\text{G}) = 3 + \\epsilon = 3-2=1 \\\\\nF(3,1,1) + S(-, y_2, z_2) = F(3,1,1) + S(-,\\text{C},\\text{G}) = -1+\\epsilon = -1-2=-3 \\\\\nF(2,2,2) + S(x_3, -, -) = F(2,2,2) + S(\\text{C},-,-) = 7 + \\zeta = 7-3=4 \\\\\nF(3,1,2) + S(-, y_2, -) = F(3,1,2) + S(-,\\text{C},-) = 3+\\zeta = 3-3=0 \\\\\nF(3,2,1) + S(-, -, z_2) = F(3,2,1) + S(-,-,\\text{G}) = 3+\\zeta = 3-3=0\n\\end{cases}\n$$\nThe maximum of these values is $7$.\nThe optimal alignment score is $F(3,2,2)=7$. This optimal score is achieved via the path $F(0,0,0) \\to F(1,1,1) \\to F(2,1,2) \\to F(3,2,2)$, which corresponds to the alignment:\n$$\n\\begin{pmatrix} \\text{A} & \\text{G} & \\text{C} \\\\ \\text{A} & - & \\text{C} \\\\ \\text{A} & \\text{G} & - \\end{pmatrix}\n$$\nThe score for this alignment is $S(\\text{A},\\text{A},\\text{A}) + S(\\text{G},-, \\text{G}) + S(\\text{C},\\text{C},-) = \\alpha + \\delta + \\delta = 5 + 1 + 1 = 7$, confirming the result.", "answer": "$$\\boxed{7}$$", "id": "2387093"}]}