{"hands_on_practices": [{"introduction": "A cornerstone of modern biology and bioinformatics is the synthesis of custom DNA sequences, or oligonucleotides. However, the chemical process of synthesis is not perfect, and errors can occur at each step. This exercise shows how we can use the binomial distribution to model this process and calculate the probability of producing a flawless DNA strand, treating each nucleotide incorporation as an independent trial [@problem_id:2381059]. Understanding this allows us to quantify the yield of perfect sequences, a critical metric for any high-throughput biological experiment.", "problem": "In a high-throughput chemical synthesis of an oligonucleotide of length $100$, each nucleotide incorporation event is independent, and at each position there is a misincorporation (error) probability of $1/500$. An oligonucleotide is considered perfect only if no misincorporations occur anywhere along its length.\n\nWhat is the probability that a synthesized $100$-mer is perfect under these assumptions? Provide your answer as a decimal and round to $4$ significant figures.", "solution": "The problem statement is first subjected to critical validation.\n\nGivens extracted verbatim are:\n1.  Length of oligonucleotide: $100$.\n2.  Each nucleotide incorporation event is independent.\n3.  Probability of misincorporation at each position: $1/500$.\n4.  An oligonucleotide is considered perfect only if no misincorporations occur.\n5.  The final answer must be a decimal rounded to $4$ significant figures.\n\nValidation assessment:\n-   **Scientifically Grounded:** The problem presents a simplified but standard and scientifically valid model for errors in oligonucleotide synthesis. The parameters given are realistic.\n-   **Well-Posed:** The problem is well-defined. The givens are sufficient and consistent for calculating a unique probability.\n-   **Objective:** The language is quantitative and precise, free from any subjective or ambiguous terms.\n\nThe problem is deemed valid as it is scientifically grounded, well-posed, objective, and does not violate any of the criteria for invalidity. We may proceed with the solution.\n\nLet $L$ be the length of the oligonucleotide, so $L=100$.\nLet $p_{error}$ be the probability of a misincorporation at any single position. We are given $p_{error} = \\frac{1}{500}$.\nThe incorporation events at each of the $L$ positions are independent.\nFor an oligonucleotide to be perfect, a correct incorporation must occur at every position.\nLet $p_{correct}$ be the probability of a correct incorporation at a single position. Since this is the complementary event to a misincorporation, its probability is:\n$$p_{correct} = 1 - p_{error} = 1 - \\frac{1}{500} = \\frac{499}{500}$$\nFor the entire $100$-mer to be perfect, there must be $100$ independent correct incorporations. The probability of a sequence of independent events is the product of their individual probabilities.\nLet $P(\\text{perfect})$ be the probability that a synthesized $100$-mer is perfect. This requires a correct incorporation at position $1$, AND at position $2$, ..., AND at position $100$.\nTherefore, $P(\\text{perfect})$ is the product of $p_{correct}$ with itself $L$ times:\n$$P(\\text{perfect}) = (p_{correct})^{L}$$\nSubstituting the given values:\n$$P(\\text{perfect}) = \\left(\\frac{499}{500}\\right)^{100}$$\nThis problem can also be formally described using the binomial distribution. Let $X$ be the random variable representing the number of misincorporations in a sequence of length $L=100$. Then $X$ follows a binomial distribution $X \\sim B(n, p)$, where the number of trials is $n=L=100$ and the probability of \"success\" (defined here as a misincorporation) is $p=p_{error}=\\frac{1}{500}$.\nThe probability of observing exactly $k$ misincorporations is given by the probability mass function:\n$$P(X=k) = \\binom{n}{k} p^k (1-p)^{n-k}$$\nA perfect oligonucleotide corresponds to the case where there are zero misincorporations, i.e., $k=0$.\n$$P(X=0) = \\binom{100}{0} \\left(\\frac{1}{500}\\right)^{0} \\left(1-\\frac{1}{500}\\right)^{100-0}$$\nUsing the identities $\\binom{n}{0} = 1$ and $x^0 = 1$ for any non-zero $x$, this simplifies to:\n$$P(X=0) = 1 \\cdot 1 \\cdot \\left(\\frac{499}{500}\\right)^{100} = \\left(\\frac{499}{500}\\right)^{100}$$\nThis confirms the initial reasoning. We now compute the numerical value.\n$$P(\\text{perfect}) = (0.998)^{100}$$\nCalculating this value gives:\n$$P(\\text{perfect}) \\approx 0.8185852503...$$\nThe problem requires the answer to be rounded to $4$ significant figures. The first four significant figures are $8$, $1$, $8$, and $5$. The fifth significant figure is $8$, which is greater than or equal to $5$, so we must round up the fourth significant figure.\n$$P(\\text{perfect}) \\approx 0.8186$$\nThis is the final probability.", "answer": "$$\\boxed{0.8186}$$", "id": "2381059"}, {"introduction": "Many continuous biological variables, from the height of an organism to the expression level of a gene, tend to cluster around an average value, forming a characteristic bell shape. The normal distribution provides a powerful mathematical model for these phenomena. This practice problem explores how to use this distribution to analyze the lengths of genes in a bacterial genome [@problem_id:2381054]. You will practice the essential technique of standardizing a normally distributed variable to calculate probabilities, a skill fundamental to statistical analysis in genomics and beyond.", "problem": "In a comparative genomics analysis of a bacterial species, suppose the length (in base pairs) of a randomly chosen gene is modeled as a continuous random variable $L$ that follows a normal distribution with mean $\\mu$ and variance $\\sigma^{2}$. Specifically, assume $L \\sim \\mathcal{N}(\\mu,\\sigma^{2})$ with $\\mu = 950$ and $\\sigma = 300$. Using only the definition of the normal distribution and properties of linear transformations and the cumulative distribution function (CDF) of the standard normal law, determine the proportion of genes that are shorter than $500$ base pairs (bp). Express your final result as a decimal and round to $4$ significant figures.", "solution": "The problem presented is valid and scientifically grounded, although the use of a normal distribution for a strictly positive quantity like gene length represents a common theoretical simplification. The potential for non-physical negative lengths under this model is negligible, as the mean $\\mu = 950$ is sufficiently large relative to the standard deviation $\\sigma = 300$ ($\\mu/\\sigma \\approx 3.17$). We will now proceed with the formal solution.\n\nThe length of a gene, denoted by the continuous random variable $L$, is modeled by a normal distribution $L \\sim \\mathcal{N}(\\mu, \\sigma^2)$. The given parameters are the mean $\\mu = 950$ and the standard deviation $\\sigma = 300$. Our objective is to calculate the proportion of genes that are shorter than $500$ base pairs, which is the probability $P(L  500)$.\n\nThe problem explicitly requires the use of a linear transformation to standardize the variable. This is the correct and standard procedure. Any normally distributed random variable $X$ with mean $\\mu$ and variance $\\sigma^2$ can be converted to the standard normal random variable $Z \\sim \\mathcal{N}(0, 1)$ using the following transformation:\n$$Z = \\frac{X - \\mu}{\\sigma}$$\nApplying this transformation to the random variable $L$, we can express the desired probability in terms of $Z$. The event $L  500$ is equivalent to the event involving $Z$:\n$$P(L  500) = P\\left(\\frac{L - \\mu}{\\sigma}  \\frac{500 - \\mu}{\\sigma}\\right)$$\nSubstituting the given values for $\\mu$ and $\\sigma$:\n$$P(L  500) = P\\left(Z  \\frac{500 - 950}{300}\\right)$$\nWe perform the arithmetic calculation for the standardized value, which is often called the z-score:\n$$z = \\frac{500 - 950}{300} = \\frac{-450}{300} = -1.5$$\nThus, the problem reduces to finding the probability that the standard normal random variable $Z$ is less than $-1.5$:\n$$P(L  500) = P(Z  -1.5)$$\nThis probability is, by definition, the value of the cumulative distribution function (CDF) of the standard normal distribution, denoted $\\Phi(z)$, evaluated at $z = -1.5$.\n$$P(L  500) = \\Phi(-1.5)$$\nThe value of $\\Phi(-1.5)$ must be obtained from a standard normal probability table or a reliable computational source. The value is approximately:\n$$\\Phi(-1.5) \\approx 0.0668072$$\nThe problem requires this result to be rounded to $4$ significant figures. The first four significant figures in $0.0668072$ are $6$, $6$, $8$, and $0$. The fifth significant figure is $7$, which is greater than or equal to $5$, so we round up the fourth significant digit.\n$$0.0668072 \\approx 0.06681$$\nTherefore, the proportion of genes with a length shorter than $500$ base pairs is approximately $0.06681$.", "answer": "$$\\boxed{0.06681}$$", "id": "2381054"}, {"introduction": "Modeling the growth of a microbial population is a classic problem in computational biology that requires a versatile probabilistic toolkit. This multi-part challenge asks you to analyze a simple model of population dynamics where individual cells can divide, die, or survive at each time step [@problem_id:2381044]. By tackling its different cases, you will see how various distributions are applied depending on the specific question and scale: exact multinomial calculations for small populations, the normal approximation for large ones, and the Skellam distribution for handling net changes when the initial state is itself random. This exercise provides a capstone experience, integrating multiple concepts to build a richer understanding of stochastic processes in biology.", "problem": "A microbial population evolves in discrete time steps. At each step, every cell independently undergoes one of three mutually exclusive outcomes: division into two cells with probability $p_d$, death with probability $p_m$, or remaining as a single cell with probability $1 - p_d - p_m$. All cells act independently of each other and of the past, conditional on the current time step. Let $N_0$ denote the number of cells at the beginning of a step and $N_1$ the number at the end of that step. Unless otherwise specified, all probabilities must be reported as decimals rounded to six decimal places.\n\nGiven this model, compute the requested probabilities for the following parameter sets. Each part is a separate test case; the final program output must aggregate the results in the order listed below.\n\nTest Suite:\n\n- Case A (exact, fixed initial size): Given $N_0 = n_0$ cells with $n_0 = 10$, $p_d = 0.3$, $p_m = 0.2$, compute the exact probability that after one step the total number of cells is exactly $k_A = 12$.\n\n- Case B (large-population approximation): Given $N_0 = n_0$ cells with $n_0 = 3000$, $p_d = 0.02$, $p_m = 0.015$, model the total after one step as approximately Gaussian with parameters determined by the per-cell outcome distribution and independence implied by the model. Under this approximation, compute the probability that the total number of cells is less than or equal to $k_B = 3050$. Interpret the Gaussian approximation as a continuous distribution over the real line and do not apply continuity corrections.\n\n- Case C (Poisson-initial population, net change): Suppose $N_0$ is a Poisson random variable with mean $\\lambda_0 = 200$. With $p_d = 0.04$ and $p_m = 0.06$, compute the exact probability that the net change in the number of cells over one step is $\\Delta = N_1 - N_0 = r_C = -5$.\n\n- Case D (edge case with no division): Given $N_0 = n_0$ cells with $n_0 = 25$, $p_d = 0$, $p_m = 0.1$, compute the exact probability that after one step the total number of cells is exactly $k_D = 22$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order $[\\text{Case A result}, \\text{Case B result}, \\text{Case C result}, \\text{Case D result}]$. For example, it should look like $[x_A,x_B,x_C,x_D]$ where each $x_\\cdot$ is a decimal rounded to six places.", "solution": "The problem statement has been subjected to rigorous validation. The model described is a standard discrete-time branching process, a fundamental construct in stochastic modeling. All parameters are provided, the questions are mathematically precise, and the framework is scientifically sound. There are no contradictions, ambiguities, or factual inaccuracies. The problem is deemed valid and a complete solution will now be provided.\n\nThe core of the model is the set of outcomes for a single cell over one time step. A cell can divide into $2$, survive as $1$, or die, resulting in $0$ cells. Let the random variable $X$ denote the number of cells produced by a single progenitor at the end of a step. The probability mass function of $X$ is:\n$$\nP(X=k) = \n\\begin{cases} \np_d  \\text{if } k=2 \\\\\np_m  \\text{if } k=0 \\\\\n1 - p_d - p_m  \\text{if } k=1 \n\\end{cases}\n$$\nIf the initial population size is $N_0 = n_0$, the population size after one step, $N_1$, is the sum of $n_0$ independent and identically distributed random variables, $X_i$, each distributed as $X$:\n$$ N_1 = \\sum_{i=1}^{n_0} X_i $$\nThis framework will be applied to each case.\n\nCase A: The initial population is fixed at $N_0 = n_0 = 10$. The probabilities are $p_d = 0.3$ and $p_m = 0.2$, which implies the survival probability is $p_s = 1 - 0.3 - 0.2 = 0.5$. We must compute the exact probability that $N_1 = k_A = 12$.\n\nLet $d$, $m$, and $s$ be the number of cells that divide, die, and survive, respectively, out of the initial $n_0=10$ cells. These numbers must satisfy $d+m+s=10$. The total number of cells after one step is $N_1 = 2d + 1s + 0m$. We are given $N_1=12$.\nWe can express $N_1$ in terms of $d$, $m$, and $n_0$ by substituting $s = n_0 - d - m$:\n$$N_1 = 2d + (n_0 - d - m) = n_0 + d - m$$\nFor this case, we have $12 = 10 + d - m$, which simplifies to the condition $d - m = 2$.\nWe must find all non-negative integer pairs $(d,m)$ subject to the constraints $d-m=2$ and $d+m \\le 10$. The possible pairs are $(d,m) \\in \\{(2,0), (3,1), (4,2), (5,3), (6,4)\\}$.\nThe probability of any specific configuration $(d,m,s)$ is given by the multinomial probability mass function:\n$$P(D=d, M=m, S=s) = \\frac{n_0!}{d!m!s!} p_d^d p_m^m p_s^s$$\nThe total probability is the sum over all valid configurations:\n$$P(N_1=12) = \\sum_{(d,m,s)} \\frac{10!}{d!m!s!} (0.3)^d (0.2)^m (0.5)^s$$\nThe sum is over the five combinations derived from $d-m=2$:\n\\begin{itemize}\n    \\item $(d,m,s)=(2,0,8)$: $\\frac{10!}{2!0!8!}(0.3)^2(0.2)^0(0.5)^8 \\approx 0.015800$\n    \\item $(d,m,s)=(3,1,6)$: $\\frac{10!}{3!1!6!}(0.3)^3(0.2)^1(0.5)^6 = 0.070875$\n    \\item $(d,m,s)=(4,2,4)$: $\\frac{10!}{4!2!4!}(0.3)^4(0.2)^2(0.5)^4 = 0.063788$\n    \\item $(d,m,s)=(5,3,2)$: $\\frac{10!}{5!3!2!}(0.3)^5(0.2)^3(0.5)^2 = 0.012247$\n    \\item $(d,m,s)=(6,4,0)$: $\\frac{10!}{6!4!0!}(0.3)^6(0.2)^4(0.5)^0 \\approx 0.000246$\n\\end{itemize}\nSumming these probabilities gives $P(N_1=12) \\approx 0.162956$.\n\nCase B: The initial population is large, $N_0 = n_0 = 3000$, with $p_d = 0.02$ and $p_m = 0.015$. The survival probability is $p_s = 1 - 0.02 - 0.015 = 0.965$. We are to use a Gaussian approximation for $N_1$ to find $P(N_1 \\le k_B = 3050)$.\nBy the Central Limit Theorem, for large $n_0$, the distribution of $N_1 = \\sum_{i=1}^{n_0} X_i$ approaches a normal distribution $\\mathcal{N}(\\mu_{N_1}, \\sigma^2_{N_1})$. The parameters are determined by the mean and variance of the single-cell outcome distribution $X$.\nThe mean of $X$ is $E[X] = 2 \\cdot p_d + 1 \\cdot p_s + 0 \\cdot p_m = 2(0.02) + 1(0.965) = 1.005$.\nThe mean of $N_1$ is $\\mu_{N_1} = n_0 E[X] = 3000 \\cdot 1.005 = 3015$.\nTo find the variance, we first compute $E[X^2] = 2^2 \\cdot p_d + 1^2 \\cdot p_s + 0^2 \\cdot p_m = 4(0.02) + 1(0.965) = 1.045$.\nThe variance of $X$ is $Var(X) = E[X^2] - (E[X])^2 = 1.045 - (1.005)^2 = 1.045 - 1.010025 = 0.034975$.\nThe variance of $N_1$ is $\\sigma^2_{N_1} = n_0 Var(X) = 3000 \\cdot 0.034975 = 104.925$.\nThe standard deviation is $\\sigma_{N_1} = \\sqrt{104.925} \\approx 10.24329$.\nWe seek $P(N_1 \\le 3050)$ where $N_1 \\sim \\mathcal{N}(3015, 104.925)$. We standardize the value $3050$:\n$$Z = \\frac{3050 - \\mu_{N_1}}{\\sigma_{N_1}} = \\frac{3050 - 3015}{\\sqrt{104.925}} = \\frac{35}{10.24329} \\approx 3.41680$$\nThe desired probability is the value of the standard normal cumulative distribution function $\\Phi(Z)$:\n$$P(N_1 \\le 3050) = \\Phi(3.41680) \\approx 0.999685$$\n\nCase C: The initial population $N_0$ is a Poisson random variable with mean $\\lambda_0 = 200$. The probabilities are $p_d=0.04$ and $p_m=0.06$, so $p_s=0.9$. We must find the exact probability of a net change $\\Delta = N_1 - N_0 = r_C = -5$.\nA key property of Poisson processes states that if a Poisson-distributed number of individuals are independently subjected to a multinomial classification, the number of individuals in each resulting category are independent Poisson random variables.\nLet $N_d$, $N_m$, and $N_s$ be the number of initial cells that divide, die, and survive. Then:\n$N_d \\sim \\text{Poisson}(\\lambda_d = \\lambda_0 p_d = 200 \\cdot 0.04 = 8)$\n$N_m \\sim \\text{Poisson}(\\lambda_m = \\lambda_0 p_m = 200 \\cdot 0.06 = 12)$\n$N_s \\sim \\text{Poisson}(\\lambda_s = \\lambda_0 p_s = 200 \\cdot 0.9 = 180)$\nThe total population sizes are $N_0 = N_d + N_m + N_s$ and $N_1 = 2N_d + 1N_s + 0N_m$.\nThe net change is $\\Delta = N_1 - N_0 = (2N_d + N_s) - (N_d + N_m + N_s) = N_d - N_m$.\nWe need to find $P(N_d - N_m = -5)$. The difference of two independent Poisson random variables follows a Skellam distribution. Let $Y = N_d - N_m$. Then $Y \\sim \\text{Skellam}(\\mu_1=\\lambda_d, \\mu_2=\\lambda_m)$.\nWe require the probability $P(Y = -5)$ with parameters $\\mu_1 = 8$ and $\\mu_2 = 12$. The probability mass function of the Skellam distribution is $P(Y=k) = e^{-(\\mu_1+\\mu_2)} (\\frac{\\mu_1}{\\mu_2})^{k/2} I_{|k|}(2\\sqrt{\\mu_1\\mu_2})$, where $I_{|k|}$ is the modified Bessel function of the first kind. Using a computational library to evaluate this function for $k=-5$, $\\mu_1=8$, and $\\mu_2=12$ yields $P(\\Delta = -5) \\approx 0.064560$.\n\nCase D: The initial population is $N_0 = n_0 = 25$, with $p_d=0$ and $p_m=0.1$. The survival probability is $p_s = 1 - 0 - 0.1 = 0.9$. We must find the exact probability that $N_1 = k_D = 22$.\nSince $p_d=0$, no cells divide. A cell either survives (with probability $0.9$) or dies (with probability $0.1$). The final population size $N_1$ is simply the number of cells that survive. This is a classic binomial trials problem. The number of surviving cells, $S$, follows a binomial distribution:\n$$S \\sim \\text{Binomial}(n=n_0, p=p_s) = \\text{Binomial}(n=25, p=0.9)$$\nWe need to compute $P(N_1=22) = P(S=22)$. Using the binomial probability mass function:\n$$P(S=k) = \\binom{n}{k} p^k (1-p)^{n-k}$$\n$$P(S=22) = \\binom{25}{22} (0.9)^{22} (1-0.9)^{25-22} = \\frac{25 \\cdot 24 \\cdot 23}{3 \\cdot 2 \\cdot 1} (0.9)^{22} (0.1)^3$$\n$$P(S=22) = 2300 \\cdot (0.9)^{22} \\cdot (0.001) \\approx 0.226498$$\nThis concludes the derivation for all cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import norm, skellam, binom\nfrom scipy.special import comb\n\n# language: Python\n# version: 3.12\n# libraries:\n#   - name: numpy\n#     version: 1.23.5\n#   - name: scipy\n#     version: 1.11.4\n\ndef solve_case_a(n0, pd, pm, kA):\n    \"\"\"\n    Computes the exact probability P(N1=kA) for a fixed initial population size.\n    This involves summing probabilities over all state configurations (d, m, s)\n    that result in the target population size.\n    \"\"\"\n    ps = 1 - pd - pm\n    # We require N1 = n0 + d - m = kA, which means d - m = kA - n0.\n    delta = kA - n0\n\n    total_prob = 0.0\n    # Iterate through all possible numbers of deaths 'm'\n    for m in range(n0 + 1):\n        # From d - m = delta, we get d = m + delta\n        d = m + delta\n        # The numbers of divisions and deaths must be non-negative\n        if d  0:\n            continue\n        # The sum of cells undergoing any fate cannot exceed the initial population\n        if d + m  n0:\n            break\n        \n        s = n0 - d - m\n        \n        # Multinomial coefficient: n! / (d! * m! * s!)\n        # Calculated as comb(n,d) * comb(n-d,m) to avoid large numbers in factorial\n        coeff = comb(n0, d, exact=True) * comb(n0 - d, m, exact=True)\n        prob = coeff * (pd ** d) * (pm ** m) * (ps ** s)\n        total_prob += prob\n        \n    return total_prob\n\ndef solve_case_b(n0, pd, pm, kB):\n    \"\"\"\n    Computes P(N1 = kB) using a Gaussian approximation for the final population size.\n    \"\"\"\n    ps = 1 - pd - pm\n    # Mean and variance of the number of offspring from a single cell (X)\n    mu_x = 2 * pd + 1 * ps\n    e_x_sq = 4 * pd + 1 * ps\n    var_x = e_x_sq - mu_x**2\n    \n    # Mean and variance of the total final population (N1)\n    mu_n1 = n0 * mu_x\n    var_n1 = n0 * var_x\n    \n    # Use the CDF of the normal distribution\n    return norm.cdf(kB, loc=mu_n1, scale=np.sqrt(var_n1))\n\ndef solve_case_c(lambda0, pd, pm, rC):\n    \"\"\"\n    Computes the exact probability that the net change N1 - N0 is rC,\n    when the initial population N0 is a Poisson random variable.\n    \"\"\"\n    # The number of dividing and dying cells are independent Poisson variables\n    lambda_d = lambda0 * pd\n    lambda_m = lambda0 * pm\n    \n    # The net change N1 - N0 is the difference between the number of divisions \n    # and the number of deaths, which follows a Skellam distribution.\n    return skellam.pmf(rC, lambda_d, lambda_m)\n\ndef solve_case_d(n0, pd, pm, kD):\n    \"\"\"\n    Computes the exact probability P(N1=kD) in the case of no divisions (pd=0).\n    This simplifies to a binomial probability.\n    \"\"\"\n    ps = 1 - pd - pm\n    # With no divisions, N1 is the number of surviving cells, which follows\n    # a binomial distribution.\n    return binom.pmf(kD, n0, ps)\n\ndef solve():\n    \"\"\"\n    Solves all test cases and prints the results in the required format.\n    \"\"\"\n    # Define test case parameters.\n    # Case A: (n0, pd, pm, kA)\n    # Case B: (n0, pd, pm, kB)\n    # Case C: (lambda0, pd, pm, rC)\n    # Case D: (n0, pd, pm, kD)\n    test_cases = {\n        'A': (10, 0.3, 0.2, 12),\n        'B': (3000, 0.02, 0.015, 3050),\n        'C': (200, 0.04, 0.06, -5),\n        'D': (25, 0.0, 0.1, 22),\n    }\n\n    # Calculate results for each case\n    result_a = solve_case_a(*test_cases['A'])\n    result_b = solve_case_b(*test_cases['B'])\n    result_c = solve_case_c(*test_cases['C'])\n    result_d = solve_case_d(*test_cases['D'])\n\n    results = [result_a, result_b, result_c, result_d]\n\n    # Format results to six decimal places and print\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2381044"}]}