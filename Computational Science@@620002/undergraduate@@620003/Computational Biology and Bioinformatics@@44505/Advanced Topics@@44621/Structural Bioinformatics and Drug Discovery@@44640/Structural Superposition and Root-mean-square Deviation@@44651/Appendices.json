{"hands_on_practices": [{"introduction": "The Root-Mean-Square Deviation (RMSD) compresses the complex, three-dimensional difference between two structures into a single, convenient number. However, it's crucial to remember that this value is an average over all compared atoms. This thought experiment [@problem_id:2431541] challenges you to explore the mathematical limits of the RMSD metric, helping you build a deeper intuition for how a single average value can relate to individual atomic deviations. By calculating the theoretical maximum displacement for a single atom given a fixed overall RMSD, you will see how large local differences can sometimes be masked by a seemingly modest global RMSD value.", "problem": "Two conformations of the same protein, each containing $100$ residues, are optimally aligned by a rigid-body superposition using only the carbon alpha ($\\mathrm{C}\\alpha$) atoms. The root-mean-square deviation (RMSD) across the $N=100$ matched $\\mathrm{C}\\alpha$ atoms is measured to be $3.0$ Å. By definition, the root-mean-square deviation (RMSD) over $N$ atoms is\n$$\n\\mathrm{RMSD} \\equiv \\sqrt{\\frac{1}{N}\\sum_{i=1}^{N} \\|\\Delta \\mathbf{r}_{i}\\|^{2}},\n$$\nwhere $\\Delta \\mathbf{r}_{i}$ is the displacement vector of atom $i$ between the two conformations after optimal superposition, and $\\|\\cdot\\|$ denotes the Euclidean norm. Without assuming any additional constraints beyond the definition above, determine the theoretical maximum possible value of $\\|\\Delta \\mathbf{r}_{j}\\|$ for a single atom $j$ that is consistent with the given RMSD. Give an exact value and express your answer in Ångstroms (Å). Do not include units in your final answer.", "solution": "The problem statement must first be subjected to rigorous validation.\n\nStep 1: Extract Givens.\nThe givens are:\n- The number of residues is $100$.\n- The atoms used for superposition and RMSD calculation are the carbon alpha ($\\mathrm{C}\\alpha$) atoms.\n- The number of matched atoms for the RMSD calculation is $N=100$.\n- The measured root-mean-square deviation is $\\mathrm{RMSD} = 3.0$ Å.\n- The definition of RMSD is given as $\\mathrm{RMSD} \\equiv \\sqrt{\\frac{1}{N}\\sum_{i=1}^{N} \\|\\Delta \\mathbf{r}_{i}\\|^{2}}$, where $\\Delta \\mathbf{r}_{i}$ is the displacement vector for atom $i$.\n- The task is to find the theoretical maximum possible value of $\\|\\Delta \\mathbf{r}_{j}\\|$ for a single, arbitrary atom $j$.\n- The problem states we must not assume any additional constraints beyond the provided definition.\n\nStep 2: Validate Using Extracted Givens.\nThe problem is evaluated against the validation criteria.\n- **Scientifically Grounded:** The problem is based on the standard definition of Root-Mean-Square Deviation (RMSD), a fundamental concept in structural bioinformatics for comparing macromolecular structures. The values provided ($N=100$ atoms, $\\mathrm{RMSD}=3.0$ Å) are physically realistic.\n- **Well-Posed:** The problem is a well-posed mathematical extremum problem. It asks for the maximum value of one component of a set, given a constraint on the root-mean-square of the entire set. A unique solution exists.\n- **Objective:** The problem is stated in precise, objective language. There is no ambiguity.\n\nThe problem exhibits none of the flaws listed for invalidity. It is scientifically sound, formalizable, complete, and well-posed. The condition of \"optimal superposition\" establishes the context in which the RMSD was measured, but the core of the problem is a mathematical question about the properties of the RMSD metric itself, as explicitly stated by the constraint \"Without assuming any additional constraints beyond the definition above\".\n\nStep 3: Verdict and Action.\nThe problem is valid. A solution will be derived.\n\nThe solution proceeds from the definition of RMSD. We are given:\n$$\n\\mathrm{RMSD} = \\sqrt{\\frac{1}{N}\\sum_{i=1}^{N} d_{i}^{2}}\n$$\nwhere for notational simplicity, we define $d_{i} \\equiv \\|\\Delta \\mathbf{r}_{i}\\|$ as the scalar magnitude of the displacement for atom $i$. We are given $N=100$ and $\\mathrm{RMSD}=3.0$.\n\nSubstituting the given values into the definition:\n$$\n3.0 = \\sqrt{\\frac{1}{100}\\sum_{i=1}^{100} d_{i}^{2}}\n$$\nTo analyze the sum, we square both sides of the equation:\n$$\n(3.0)^{2} = \\frac{1}{100}\\sum_{i=1}^{100} d_{i}^{2}\n$$\n$$\n9.0 = \\frac{1}{100}\\sum_{i=1}^{100} d_{i}^{2}\n$$\nThis provides a fixed constraint on the sum of the squared displacements:\n$$\n\\sum_{i=1}^{100} d_{i}^{2} = 9.0 \\times 100 = 900\n$$\nThe unit of this quantity is Å$^{2}$.\n\nOur objective is to determine the theoretical maximum possible value for a single displacement magnitude, which we denote as $d_{j}$ for an arbitrary atom $j$. We can isolate the term $d_{j}^{2}$ from the sum:\n$$\n\\sum_{i=1}^{100} d_{i}^{2} = d_{j}^{2} + \\sum_{i \\neq j} d_{i}^{2}\n$$\nSubstituting this back into our constraint equation:\n$$\nd_{j}^{2} + \\sum_{i \\neq j} d_{i}^{2} = 900\n$$\nTo maximize the value of $d_{j}$, and consequently $d_{j}^{2}$ (since $d_{j}$ is a non-negative magnitude), we must minimize the value of the term being subtracted from the constant $900$. That is, we must minimize the sum of the squared displacements of all other atoms, $\\sum_{i \\neq j} d_{i}^{2}$.\n\nBy definition, the magnitude of a vector $d_{i} = \\|\\Delta \\mathbf{r}_{i}\\|$ must be non-negative, $d_{i} \\ge 0$. Therefore, the square of the magnitude must also be non-negative, $d_{i}^{2} \\ge 0$. The minimum possible value for each term $d_{i}^{2}$ is $0$. This corresponds to a physical situation where the displacement of atom $i$ is zero.\n\nThe minimum value of the sum $\\sum_{i \\neq j} d_{i}^{2}$ is achieved when every term in the sum is at its minimum value. Thus, we set $d_{i}^{2} = 0$ for all $i \\neq j$.\n$$\n\\min\\left(\\sum_{i \\neq j} d_{i}^{2}\\right) = \\sum_{i \\neq j} 0 = 0\n$$\nSubstituting this minimum value back into the equation for $d_{j}^{2}$:\n$$\n(d_{j}^{2})_{\\max} + 0 = 900\n$$\n$$\n(d_{j}^{2})_{\\max} = 900\n$$\nTaking the square root to find the maximum possible displacement magnitude, $(d_{j})_{\\max}$:\n$$\n(d_{j})_{\\max} = \\sqrt{900} = 30\n$$\nThis result corresponds to a scenario where $N-1 = 99$ atoms are perfectly superimposed ($d_{i}=0$ for $i \\neq j$) and the entire sum of squared deviations is contributed by the single atom $j$. This is the theoretical upper limit for the deviation of any single atom, given the overall RMSD. The value is $30$ Å.", "answer": "$$\n\\boxed{30}\n$$", "id": "2431541"}, {"introduction": "In real-world structural biology, we often encounter imperfect data. For instance, highly flexible loops in a protein may not be resolved in an experimental structure, leading to gaps in the atomic model. This practical scenario [@problem_id:2431604] forces us to think critically about how to perform a scientifically valid and meaningful comparison when the atom sets do not perfectly correspond. By evaluating several possible procedures, you will learn the best practice for handling missing data, which is fundamental to robust structural analysis.", "problem": "You are given two three-dimensional structural models of the same protein at atomic resolution. Let the protein have residue indices $1,2,\\dots,L$. Model $\\mathcal{A}$ contains Cartesian coordinates $\\mathbf{x}_i \\in \\mathbb{R}^3$ for the $\\mathrm{C}_{\\alpha}$ atom of every residue $i \\in \\{1,\\dots,L\\}$. Model $\\mathcal{B}$ is missing a contiguous loop comprising residues $\\ell,\\ell+1,\\dots,\\ell+k-1$ (with $k \\ge 1$), but otherwise contains Cartesian coordinates $\\mathbf{y}_i \\in \\mathbb{R}^3$ for the $\\mathrm{C}_{\\alpha}$ atom of each residue $i \\in \\{1,\\dots,L\\}\\setminus\\{\\ell,\\dots,\\ell+k-1\\}$. You wish to compute a single scalar root-mean-square deviation ($\\mathrm{RMSD}$) that meaningfully summarizes the structural difference between the two models by superposing them as rigid bodies.\n\nWhich procedure yields a meaningful $\\mathrm{RMSD}$ for this scenario?\n\nA. Define the common-index set $\\mathcal{J}=\\{1,\\dots,L\\}\\setminus\\{\\ell,\\dots,\\ell+k-1\\}$. Find the rigid-body rotation $\\mathbf{R}\\in SO(3)$ and translation $\\mathbf{t}\\in \\mathbb{R}^3$ that minimize $\\sum_{i\\in \\mathcal{J}} \\lVert \\mathbf{R}\\mathbf{x}_i+\\mathbf{t}-\\mathbf{y}_i\\rVert^2$ over $i\\in\\mathcal{J}$, then compute $\\mathrm{RMSD}=\\sqrt{\\frac{1}{|\\mathcal{J}|}\\sum_{i\\in \\mathcal{J}} \\lVert \\mathbf{R}\\mathbf{x}_i+\\mathbf{t}-\\mathbf{y}_i\\rVert^2}$ over $i\\in\\mathcal{J}$, and additionally report the coverage fraction $|\\mathcal{J}|/L$ alongside the $\\mathrm{RMSD}$.\n\nB. For each missing residue index $i\\in\\{\\ell,\\dots,\\ell+k-1\\}$ in model $\\mathcal{B}$, impute a placeholder coordinate by setting $\\mathbf{y}_i$ equal to the centroid of the observed $\\{\\mathbf{y}_j: j\\in \\{1,\\dots,L\\}\\setminus\\{\\ell,\\dots,\\ell+k-1\\}\\}$, then perform rigid-body superposition on all $L$ residues and compute the $\\mathrm{RMSD}$ over all $L$ indices.\n\nC. Perform rigid-body superposition using all $L$ residue indices by treating each missing residue index $i\\in\\{\\ell,\\dots,\\ell+k-1\\}$ as contributing a fixed penalty distance $d_p>0$ to the sum of squared distances, and compute $\\mathrm{RMSD}=\\sqrt{\\frac{1}{L}\\left(\\sum_{i\\in \\{1,\\dots,L\\}\\setminus\\{\\ell,\\dots,\\ell+k-1\\}} \\lVert \\mathbf{R}\\mathbf{x}_i+\\mathbf{t}-\\mathbf{y}_i\\rVert^2 + \\sum_{i=\\ell}^{\\ell+k-1} d_p^2\\right)}$.\n\nD. Determine the optimal rigid-body superposition using only the common indices $i\\in\\mathcal{J}$, but then evaluate the $\\mathrm{RMSD}$ over all $L$ indices by substituting $\\mathbf{y}_i=\\mathbf{R}\\mathbf{x}_i+\\mathbf{t}$ for $i\\in\\{\\ell,\\dots,\\ell+k-1\\}$ so that the missing loop contributes zero distance after superposition.", "solution": "The problem statement poses a standard question in computational structural biology: how to meaningfully compare two protein structures when one of them has missing atomic coordinates. This is a valid problem, as it is scientifically grounded, well-posed, and describes a common scenario in the analysis of protein structures from experimental methods like X-ray crystallography or Cryo-EM, or from computational modeling.\n\nThe core principle for a meaningful comparison is that it must be based on observed, empirical data. Any procedure that invents, imputes, or assumes data for the missing regions introduces artifacts and renders the resulting metric scientifically unsound. The comparison should quantify the difference between the parts of the structures that can actually be compared.\n\nThe standard metric for structural comparison is the Root-Mean-Square Deviation (RMSD). The RMSD between two sets of $N$ points, $\\{\\mathbf{a}_i\\}$ and $\\{\\mathbf{b}_i\\}$, is defined after an optimal rigid-body superposition (a rotation $\\mathbf{R}$ and translation $\\mathbf{t}$ that minimizes the sum of squared distances):\n$$\n\\mathrm{RMSD}(\\{\\mathbf{a}_i\\}, \\{\\mathbf{b}_i\\}) = \\min_{\\mathbf{R}, \\mathbf{t}} \\sqrt{\\frac{1}{N} \\sum_{i=1}^N \\lVert \\mathbf{R}\\mathbf{a}_i + \\mathbf{t} - \\mathbf{b}_i \\rVert^2}\n$$\nIn the given problem, the two sets of points (the $\\mathrm{C}_{\\alpha}$ coordinates) do not correspond over the full set of indices $\\{1, \\dots, L\\}$. A correspondence only exists for the subset of indices $\\mathcal{J}=\\{1,\\dots,L\\}\\setminus\\{\\ell,\\dots,\\ell+k-1\\}$, for which both models $\\mathcal{A}$ and $\\mathcal{B}$ provide coordinates.\n\nA meaningful procedure must, therefore, restrict both the superposition step and the RMSD calculation to this common set of residues $\\mathcal{J}$. Furthermore, to ensure the scientific interpretability of the resulting RMSD value, it is crucial to report the extent of the comparison, i.e., the number of residues used ($|\\mathcal{J}|$) or the fraction of the total protein they represent ($|\\mathcal{J}|/L$).\n\nBased on this principle, let us analyze each option.\n\nA. Define the common-index set $\\mathcal{J}=\\{1,\\dots,L\\}\\setminus\\{\\ell,\\dots,\\ell+k-1\\}$. Find the rigid-body rotation $\\mathbf{R}\\in SO(3)$ and translation $\\mathbf{t}\\in \\mathbb{R}^3$ that minimize $\\sum_{i\\in \\mathcal{J}} \\lVert \\mathbf{R}\\mathbf{x}_i+\\mathbf{t}-\\mathbf{y}_i\\rVert^2$ over $i\\in\\mathcal{J}$, then compute $\\mathrm{RMSD}=\\sqrt{\\frac{1}{|\\mathcal{J}|}\\sum_{i\\in \\mathcal{J}} \\lVert \\mathbf{R}\\mathbf{x}_i+\\mathbf{t}-\\mathbf{y}_i\\rVert^2}$ over $i\\in\\mathcal{J}$, and additionally report the coverage fraction $|\\mathcal{J}|/L$ alongside the $\\mathrm{RMSD}$.\n\nThis procedure is scientifically rigorous and represents the standard best practice in the field.\n1. It correctly identifies the set of residues, $\\mathcal{J}$, common to both structures.\n2. It correctly performs the rigid-body superposition by minimizing the sum of squared distances over only these common residues. This ensures that the alignment is not influenced by non-existent data.\n3. It correctly calculates the RMSD as the root of the mean of the squared distances over the same set of common residues. The normalization factor is $|\\mathcal{J}|$, the number of terms in the sum, which is the correct definition of a mean.\n4. It advocates for reporting the coverage fraction, which provides essential context and ensures the comparison is transparent and not misleading.\nThis entire procedure is sound and produces a \"meaningful\" result.\nVerdict: **Correct**.\n\nB. For each missing residue index $i\\in\\{\\ell,\\dots,\\ell+k-1\\}$ in model $\\mathcal{B}$, impute a placeholder coordinate by setting $\\mathbf{y}_i$ equal to the centroid of the observed $\\{\\mathbf{y}_j: j\\in \\{1,\\dots,L\\}\\setminus\\{\\ell,\\dots,\\ell+k-1\\}\\}$, then perform rigid-body superposition on all $L$ residues and compute the $\\mathrm{RMSD}$ over all $L$ indices.\n\nThis procedure is fundamentally flawed. The imputation of coordinates for the missing loop at the centroid of the observed structure is an arbitrary, non-physical assumption. There is no scientific basis to believe the missing loop is located at the protein's centroid. Including these artificial points in the superposition calculation will skew the optimal rotation $\\mathbf{R}$ and translation $\\mathbf{t}$, leading to a poorer alignment of the parts that are actually present in both structures. The final RMSD value would be a meaningless composite of real distances and distances to these arbitrarily placed points.\nVerdict: **Incorrect**.\n\nC. Perform rigid-body superposition using all $L$ residue indices by treating each missing residue index $i\\in\\{\\ell,\\dots,\\ell+k-1\\}$ as contributing a fixed penalty distance $d_p>0$ to the sum of squared distances, and compute $\\mathrm{RMSD}=\\sqrt{\\frac{1}{L}\\left(\\sum_{i\\in \\{1,\\dots,L\\}\\setminus\\{\\ell,\\dots,\\ell+k-1\\}} \\lVert \\mathbf{R}\\mathbf{x}_i+\\mathbf{t}-\\mathbf{y}_i\\rVert^2 + \\sum_{i=\\ell}^{\\ell+k-1} d_p^2\\right)}$.\n\nThis procedure introduces an arbitrary penalty parameter $d_p$. The choice of $d_p$ is subjective and will directly affect the final computed value. If the penalty term $\\sum_{i=\\ell}^{\\ell+k-1} d_p^2 = k d_p^2$ is included in the objective function for superposition, it is simply a constant and does not affect the determination of $\\mathbf{R}$ and $\\mathbf{t}$. The superposition would be identical to that in option A. However, the final RMSD calculation is distorted. It averages physically meaningful squared distances with an arbitrary penalty term, and normalizes by $L$ instead of $|\\mathcal{J}|$. The resulting value is not an RMSD in the true sense; it is a hybrid metric that conflates structural similarity with data completeness, dependent on the arbitrary choice of $d_p$.\nVerdict: **Incorrect**.\n\nD. Determine the optimal rigid-body superposition using only the common indices $i\\in\\mathcal{J}$, but then evaluate the $\\mathrm{RMSD}$ over all $L$ indices by substituting $\\mathbf{y}_i=\\mathbf{R}\\mathbf{x}_i+\\mathbf{t}$ for $i\\in\\{\\ell,\\dots,\\ell+k-1\\}$ so that the missing loop contributes zero distance after superposition.\n\nThis procedure, while correctly performing the superposition on the common residues, is scientifically dishonest in its reporting. By substituting $\\mathbf{y}_i = \\mathbf{R}\\mathbf{x}_i + \\mathbf{t}$ for the missing residues, it artificially assumes that the missing loop in structure $\\mathcal{B}$ perfectly matches the corresponding loop in structure $\\mathcal{A}$ after alignment. This forces the distance contribution from the missing residues to be exactly zero. The final RMSD is then calculated as $\\sqrt{\\frac{1}{L} \\sum_{i \\in \\mathcal{J}} (\\text{distances}^2)}$. This dilutes the true RMSD of the comparable regions by averaging the sum of squares over a larger number of residues ($L$) than were actually compared ($|\\mathcal{J}|$). This method gives a deceptively low RMSD value and conceals the fact that a portion of the structure was missing and not actually compared.\nVerdict: **Incorrect**.", "answer": "$$\n\\boxed{A}\n$$", "id": "2431604"}, {"introduction": "When comparing two protein structures, it is common to find that some regions are highly conserved (the \"structural core\") while other regions, such as surface loops, are highly flexible and divergent. A single RMSD calculated over all atoms can be misleadingly high due to these flexible regions. This advanced hands-on practice [@problem_id:2431533] guides you to implement an algorithm that identifies the largest possible subset of atoms that can be superimposed below a given RMSD threshold. This technique is essential for distinguishing the structurally conserved core from variable regions, providing a more nuanced and insightful comparison.", "problem": "Implement a program that, for each provided pair of three-dimensional point sets with one-to-one atom correspondences, identifies a subset of matched atom indices of maximum possible size such that there exists a rigid-body superposition whose Root-Mean-Square Deviation (RMSD) over that subset is less than or equal to a given threshold. A rigid-body superposition is defined as a rotation by an orthonormal matrix with determinant $+1$ (no reflections or scaling) followed by a translation. The Root-Mean-Square Deviation (RMSD) between two equally sized subsets $\\{ \\mathbf{x}_i \\}_{i \\in S}$ and $\\{ \\mathbf{y}_i \\}_{i \\in S}$ under a rotation $\\mathbf{R}$ and translation $\\mathbf{t}$ is\n$$\n\\mathrm{RMSD}(\\mathbf{R},\\mathbf{t};S) \\;=\\; \\sqrt{\\frac{1}{|S|} \\sum_{i \\in S} \\left\\| \\mathbf{R}\\,\\mathbf{x}_i + \\mathbf{t} - \\mathbf{y}_i \\right\\|_2^2 } \\,.\n$$\nYour task is to determine, for each test case, a subset $S^\\star$ of indices that maximizes $|S|$ subject to $\\min_{\\mathbf{R},\\mathbf{t}} \\mathrm{RMSD}(\\mathbf{R},\\mathbf{t};S) \\le \\tau$, where $\\tau$ is the given threshold, $\\mathbf{R}$ is a rotation matrix with $\\det(\\mathbf{R}) = +1$, and $\\mathbf{t}$ is a translation vector in $\\mathbb{R}^3$. Among all subsets with maximal cardinality, select the one that attains the minimal possible RMSD; if there is still a tie, select the subset with the lexicographically smallest ordered index tuple. Angles are specified in radians. Coordinates are specified in ångströms, and the RMSD must be reported in ångströms, rounded to exactly $6$ decimal places. The threshold constraint uses the condition “less than or equal to.”\n\nAll input data are fixed within this problem; no external input is required. Let the base structure $A$ consist of $N$ atoms with indices $0,1,\\dots,N-1$ and Cartesian coordinates $\\mathbf{x}_i \\in \\mathbb{R}^3$. The corresponding structure $B$ has coordinates $\\mathbf{y}_i \\in \\mathbb{R}^3$ for the same indices.\n\nDefinitions for the base structure $A$ used in all test cases:\n- $N = 8$ atoms with coordinates in ångströms:\n  - Index $0$: $(0.0,\\,0.0,\\,0.0)$\n  - Index $1$: $(1.0,\\,0.0,\\,0.0)$\n  - Index $2$: $(0.0,\\,1.0,\\,0.0)$\n  - Index $3$: $(0.0,\\,0.0,\\,1.0)$\n  - Index $4$: $(1.0,\\,1.0,\\,0.0)$\n  - Index $5$: $(1.0,\\,0.0,\\,1.0)$\n  - Index $6$: $(0.0,\\,1.0,\\,1.0)$\n  - Index $7$: $(1.0,\\,1.0,\\,1.0)$\n\nDefine the following rotation matrices (angles in radians):\n- $\\theta_z = \\pi/6$, $\\theta_x = \\pi/9$.\n- $\\mathbf{R}_z(\\theta_z) = \\begin{bmatrix}\n\\cos\\theta_z & -\\sin\\theta_z & 0\\\\\n\\sin\\theta_z & \\cos\\theta_z & 0\\\\\n0 & 0 & 1\n\\end{bmatrix}$,\n$\\mathbf{R}_x(\\theta_x) = \\begin{bmatrix}\n1 & 0 & 0\\\\\n0 & \\cos\\theta_x & -\\sin\\theta_x\\\\\n0 & \\sin\\theta_x & \\cos\\theta_x\n\\end{bmatrix}$,\nand composite rotation $\\mathbf{R} = \\mathbf{R}_x(\\theta_x)\\,\\mathbf{R}_z(\\theta_z)$.\nDefine translation $\\mathbf{t} = (0.5,\\,-0.3,\\,0.8)$.\n\nConstruct the test suite as follows:\n- Test case $1$ (happy path): Let $B^{(1)}$ be obtained from $A$ by the rigid transform $\\mathbf{R}$ and $\\mathbf{t}$, i.e., for each index $i$, $\\mathbf{y}^{(1)}_i = \\mathbf{R}\\,\\mathbf{x}_i + \\mathbf{t}$. Threshold $\\tau_1 = 10^{-8}$ ångströms.\n- Test case $2$ (outliers present): Start from $B^{(1)}$ and define $B^{(2)}$ by adding a displacement vector $\\mathbf{d} = (3.0,\\,-2.0,\\,1.5)$ ångströms to atoms with indices $1$ and $6$ only: for $i \\in \\{1,6\\}$ set $\\mathbf{y}^{(2)}_i = \\mathbf{y}^{(1)}_i + \\mathbf{d}$, and for all other indices $i$ set $\\mathbf{y}^{(2)}_i = \\mathbf{y}^{(1)}_i$. Threshold $\\tau_2 = 0.05$ ångströms.\n- Test case $3$ (degenerate small set): Define a two-atom structure $A^{(3)}$ with indices $0,1$ and coordinates $(0.0,\\,0.0,\\,0.0)$ and $(2.0,\\,0.0,\\,0.0)$ ångströms, respectively. Define $B^{(3)}$ by applying the same $\\mathbf{R}$ and $\\mathbf{t}$ as above: $\\mathbf{y}^{(3)}_i = \\mathbf{R}\\,\\mathbf{x}^{(3)}_i + \\mathbf{t}$ for $i \\in \\{0,1\\}$. Threshold $\\tau_3 = 10^{-8}$ ångströms.\n\nFor each test case, your program must:\n- Determine the subset $S^\\star$ of maximal size such that there exists a rigid-body superposition with $\\mathrm{RMSD} \\le \\tau$ on $S^\\star$.\n- Among all subsets with maximal size, pick one with minimal RMSD; if there remains a tie, choose the lexicographically smallest ordered index tuple.\n\nFinal output format:\n- For each test case $j \\in \\{1,2,3\\}$, output a pair $[k_j, r_j]$ where $k_j = |S^\\star|$ is an integer and $r_j$ is the minimal achievable RMSD on $S^\\star$ rounded to exactly $6$ decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the test cases $1,2,3$. For example: $[[k_1,r_1],[k_2,r_2],[k_3,r_3]]$.", "solution": "The problem as stated is valid. It is a well-posed, scientifically grounded problem in computational structural biology that is free of contradictions or ambiguity. All necessary data and constraints are provided to arrive at a unique, verifiable solution. We shall therefore proceed with the derivation and implementation of a solution.\n\nThe problem requires us to find a subset of atom indices, $S^\\star$, of maximum possible size, for which there exists a rigid-body superposition (rotation $\\mathbf{R}$ and translation $\\mathbf{t}$) of two corresponding point sets, $\\{\\mathbf{x}_i\\}_{i \\in S^\\star}$ and $\\{\\mathbf{y}_i\\}_{i \\in S^\\star}$, such that the root-mean-square deviation (RMSD) is no greater than a given threshold $\\tau$. Formally, we must find $S^\\star$ that solves the optimization problem:\n$$ S^\\star = \\arg\\max_{S \\subseteq \\{0, ..., N-1\\}} |S| \\quad \\text{subject to} \\quad \\min_{\\mathbf{R},\\mathbf{t}} \\mathrm{RMSD}(\\mathbf{R},\\mathbf{t};S) \\le \\tau $$\nwhere $\\det(\\mathbf{R})=+1$. Tie-breaking rules are specified: among subsets of maximal size, select the one with the minimum RMSD, and subsequently, the one with the lexicographically smallest sorted index tuple.\n\nThis problem is a combinatorial search for an optimal subset. In the general case, this is an NP-hard problem, equivalent to finding the maximum clique in a graph where vertices represent atoms and edges connect pairs that are mutually superimposable within the given tolerance. However, for the small number of atoms given in the test cases ($N=8$ and $N=2$), an exhaustive search through all possible subsets is computationally feasible.\n\nOur strategy is therefore as follows:\n1.  Iterate through all possible subset sizes $k$ in descending order, from $N$ down to $1$.\n2.  For a given size $k$, generate all subsets of indices of that size.\n3.  For each subset, calculate the minimum possible RMSD between the corresponding point sets.\n4.  If the calculated RMSD is less than or equal to the threshold $\\tau$, the subset is a valid candidate.\n5.  Since we iterate from largest $k$ downwards, the first size $k$ for which we find any valid candidate(s) is the maximum possible cardinality, $|S^\\star|$. We then collect all valid candidates for this size $k$.\n6.  From this collection of maximal-size candidates, we select the one that satisfies the tie-breaking criteria: minimum RMSD, then lexicographically smallest index tuple.\n\nThe central component of this strategy is the calculation of the minimal RMSD for a given pair of point sets. This is a classic problem solved by the Kabsch algorithm, which finds the optimal rigid-body transformation.\n\nLet the two sets of coordinates for a given subset $S$ of size $k$ be $\\{\\mathbf{x}_i\\}_{i \\in S}$ and $\\{\\mathbf{y}_i\\}_{i \\in S}$. The Kabsch algorithm proceeds as follows:\n\nFirst, the minimization of RMSD can be decoupled. The optimal translation $\\mathbf{t}$ depends on the optimal rotation $\\mathbf{R}$. The squared RMSD is minimized by first centering both point sets at the origin. We compute the centroids:\n$$ \\mathbf{c}_x = \\frac{1}{k} \\sum_{i \\in S} \\mathbf{x}_i \\quad \\text{and} \\quad \\mathbf{c}_y = \\frac{1}{k} \\sum_{i \\in S} \\mathbf{y}_i $$\nThe centered coordinate vectors are $\\mathbf{x}'_i = \\mathbf{x}_i - \\mathbf{c}_x$ and $\\mathbf{y}'_i = \\mathbf{y}_i - \\mathbf{c}_y$. The problem reduces to finding the rotation $\\mathbf{R}$ that minimizes the sum of squared errors $\\sum_{i \\in S} \\|\\mathbf{R}\\mathbf{x}'_i - \\mathbf{y}'_i\\|^2$.\n\nSecond, we construct the $3 \\times 3$ covariance matrix $H$. In matrix notation, let $X'$ and $Y'$ be $k \\times 3$ matrices whose rows are the centered coordinate vectors $\\{\\mathbf{x}'_i\\}$ and $\\{\\mathbf{y}'_i\\}$. The covariance matrix is given by:\n$$ H = (X')^T Y' $$\n\nThird, we perform a singular value decomposition (SVD) on the covariance matrix $H$:\n$$ H = U \\Sigma V^T $$\nwhere $U$ and $V$ are $3 \\times 3$ orthogonal matrices and $\\Sigma$ is a diagonal matrix of non-negative singular values.\n\nFourth, the optimal rotation matrix is determined from the SVD components. The rotation that maximizes the overlap (and thus minimizes the RMSD) is $\\mathbf{R} = VU^T$. A critical check is required to ensure this is a proper rotation (i.e., no reflection), as specified by the condition $\\det(\\mathbf{R})=+1$. If $\\det(VU^T) = -1$, the calculated matrix represents a roto-reflection. To obtain the closest proper rotation, we must correct this. The standard correction is to invert the sign of the column of $V$ corresponding to the smallest singular value before re-computing $\\mathbf{R}$. This ensures $\\det(\\mathbf{R}) = +1$. Let this corrected rotation be $\\mathbf{R}^\\star$.\n\nFinally, with the optimal rotation $\\mathbf{R}^\\star$ determined, the optimal translation is given by $\\mathbf{t}^\\star = \\mathbf{c}_y - \\mathbf{R}^\\star\\mathbf{c}_x$. The minimal RMSD can then be computed directly using its definition:\n$$ \\mathrm{RMSD}_{\\min} = \\sqrt{\\frac{1}{k} \\sum_{i \\in S} \\|\\mathbf{R}^\\star\\mathbf{x}_i + \\mathbf{t}^\\star - \\mathbf{y}_i\\|^2} $$\n\nThis procedure will be implemented and applied to all subsets as described in the overall strategy to find the solution for each test case. Special attention is given to the cases with few points ($k<3$). For $k=1$ or $k=2$, the minimal RMSD is always $0.0$, as one or two points can always be perfectly superimposed (assuming the inter-point distance is conserved, which is true in the problem setup). The general Kabsch implementation is robust to these cases.\n```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport math\nfrom itertools import combinations\n\ndef solve():\n    \"\"\"\n    Main solver function that orchestrates the test cases and prints the final result.\n    \"\"\"\n\n    def calculate_rmsd(P, Q):\n        \"\"\"\n        Calculates the minimum RMSD for two sets of points P and Q using the Kabsch algorithm.\n        P and Q are numpy arrays of shape (k, 3), where k is the number of points.\n        \"\"\"\n        k = P.shape[0]\n        if k == 0:\n            return 0.0\n\n        # Center the point sets\n        c_P = np.mean(P, axis=0)\n        c_Q = np.mean(Q, axis=0)\n        P_c = P - c_P\n        Q_c = Q - c_Q\n\n        # For subsets of size 1, RMSD is trivially 0.\n        # For subsets of size 2, RMSD is also 0 as they can always be perfectly aligned.\n        # The Kabsch algorithm below should handle k=1,2,3... robustly, but this is a conceptual note.\n        # Let's test the k==1 edge case for robustness. P_c will be all zeros. H will be zeros.\n        # SVD of zeros is zeros. R will be identity. RMSD is 0. So it's fine.\n        \n        # Compute the covariance matrix\n        H = P_c.T @ Q_c\n\n        # Perform Singular Value Decomposition\n        try:\n            U, _, Vt = np.linalg.svd(H)\n        except np.linalg.LinAlgError:\n            # This can happen in degenerate cases, e.g., all points are identical.\n            # RMSD is essentially the std dev of the difference between point clouds.\n            return np.sqrt(np.mean(np.sum((P - Q)**2, axis=1)))\n\n        V = Vt.T\n\n        # Calculate the optimal rotation matrix\n        R = V @ U.T\n\n        # Check for and correct reflection (improper rotation)\n        if np.linalg.det(R) < 0:\n            V[:, -1] *= -1\n            R = V @ U.T\n\n        # Apply the rotation to the centered P point cloud\n        P_rot = (R @ P_c.T).T\n\n        # Calculate the RMSD\n        diff = P_rot - Q_c\n        rmsd = np.sqrt(np.sum(diff ** 2) / k)\n\n        return rmsd\n\n    def solve_case(A, B, tau):\n        \"\"\"\n        Finds the largest subset of atoms with RMSD <= tau.\n        \"\"\"\n        N = A.shape[0]\n\n        # Iterate from the largest possible subset size down to 1\n        for k in range(N, 0, -1):\n            candidate_subsets = []\n            \n            # Generate all combinations of indices of size k\n            for indices in combinations(range(N), k):\n                P = A[list(indices)]\n                Q = B[list(indices)]\n                \n                rmsd = calculate_rmsd(P, Q)\n                \n                if rmsd <= tau:\n                    candidate_subsets.append({'rmsd': rmsd, 'indices': indices})\n            \n            # If we found any valid subsets of size k, this is the maximal size.\n            if candidate_subsets:\n                # Sort candidates: first by RMSD (ascending), then by lexicographical order of indices\n                candidate_subsets.sort(key=lambda x: (x['rmsd'], x['indices']))\n                \n                best_candidate = candidate_subsets[0]\n                best_k = k\n                best_rmsd = best_candidate['rmsd']\n                \n                # Return the result for this test case\n                return [best_k, best_rmsd]\n\n        # This part should be unreachable as a subset of size 1 always has an RMSD of 0.\n        return [0, 0.0]\n\n    # --- SETUP ---\n    # Define rigid transformation parameters\n    theta_z = math.pi / 6.0\n    theta_x = math.pi / 9.0\n    \n    cos_tz, sin_tz = math.cos(theta_z), math.sin(theta_z)\n    cos_tx, sin_tx = math.cos(theta_x), math.sin(theta_x)\n\n    Rz = np.array([\n        [cos_tz, -sin_tz, 0],\n        [sin_tz,  cos_tz, 0],\n        [0,       0,      1]\n    ])\n    Rx = np.array([\n        [1, 0,       0],\n        [0, cos_tx, -sin_tx],\n        [0, sin_tx,  cos_tx]\n    ])\n    \n    R = Rx @ Rz\n    t = np.array([0.5, -0.3, 0.8])\n\n    # Base structure A for test cases 1 and 2 (vertices of a unit cube)\n    A1_A2 = np.array([\n        [0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0],\n        [1.0, 1.0, 0.0], [1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 1.0]\n    ])\n\n    results = []\n\n    # --- Test Case 1 ---\n    # Structure B is a perfect rigid transformation of A.\n    B1 = (R @ A1_A2.T).T + t\n    tau1 = 1e-8\n    k1, r1 = solve_case(A1_A2, B1, tau1)\n    results.append([k1, round(r1, 6)])\n\n    # --- Test Case 2 ---\n    # Structure B has two outliers.\n    d = np.array([3.0, -2.0, 1.5])\n    B2 = np.copy(B1)\n    B2[1] += d\n    B2[6] += d\n    tau2 = 0.05\n    k2, r2 = solve_case(A1_A2, B2, tau2)\n    results.append([k2, round(r2, 6)])\n\n    # --- Test Case 3 ---\n    # A small, two-atom structure.\n    A3 = np.array([[0.0, 0.0, 0.0], [2.0, 0.0, 0.0]])\n    B3 = (R @ A3.T).T + t\n    tau3 = 1e-8\n    k3, r3 = solve_case(A3, B3, tau3)\n    results.append([k3, round(r3, 6)])\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "answer": "`[[8, 0.000000], [6, 0.000000], [2, 0.000000]]`", "id": "2431533"}]}