{"hands_on_practices": [{"introduction": "The ultimate test of any contact prediction method is its accuracy. This exercise provides fundamental, hands-on practice in evaluating the performance of a coevolutionary predictor using the precision metric. By calculating precision under different scenarios, you will gain a practical understanding of how evaluation metrics are implemented and, importantly, how sensitive they are to seemingly small choices, such as the distance cutoff used to define a 'true' contact [@problem_id:2380714]. This skill is essential for critically interpreting the performance claims of various computational tools.", "problem": "You are given a synthetic benchmarking setup to study how the definition of residue-residue contact in three-dimensional space affects the reported precision of a coevolution-based predictor. In coevolutionary analysis for contact prediction, such as Direct Coupling Analysis (DCA), residue pairs are ranked by a score that reflects coevolutionary coupling strength. A residue-residue pair is considered a contact if the distance between their beta-carbon positions (C-beta) is less than or equal to a specified cutoff. You will implement a precise evaluation of how changing the contact definition threshold influences the measured precision at a fixed number of top-ranked predictions.\n\nFundamental base and definitions:\n- The pairwise Euclidean distance between residues at coordinates $\\left(x_{i}, y_{i}, z_{i}\\right)$ and $\\left(x_{j}, y_{j}, z_{j}\\right)$ is\n$$\nd_{ij} = \\sqrt{(x_{i}-x_{j})^{2} + (y_{i}-y_{j})^{2} + (z_{i}-z_{j})^{2}}.\n$$\n- A pair $\\left(i,j\\right)$ is labeled a positive contact if $d_{ij} \\le d_{c}$, where $d_{c}$ is the contact cutoff expressed in Angstroms.\n- Precision at top-$k$ is defined as\n$$\n\\text{Precision}(k, d_{c}) = \\frac{\\text{number of true contacts among the top-}k\\text{ eligible predictions}}{\\text{number of evaluated predictions}},\n$$\nwhere “eligible” means the sequence separation satisfies $\\lvert i-j \\rvert \\ge g$ to exclude trivial local neighbors. If there are fewer than $k$ eligible predictions, evaluate all available eligible predictions and divide by that count. Report precision as a decimal rounded to exactly three digits after the decimal point.\n\nData for this task:\n- A single polypeptide chain of length $L=10$ residues. Each residue index $i \\in \\{1,2,\\dots,10\\}$ has a fixed C-beta coordinate given below in Angstroms. All $z$-coordinates are $0$:\n  - Residue $1$: $(0.0, 0.0, 0.0)$\n  - Residue $2$: $(3.8, 0.0, 0.0)$\n  - Residue $3$: $(7.6, 0.0, 0.0)$\n  - Residue $4$: $(11.4, 0.0, 0.0)$\n  - Residue $5$: $(15.2, 0.0, 0.0)$\n  - Residue $6$: $(0.0, 6.0, 0.0)$\n  - Residue $7$: $(3.8, 6.0, 0.0)$\n  - Residue $8$: $(7.6, 6.0, 0.0)$\n  - Residue $9$: $(11.4, 6.0, 0.0)$\n  - Residue $10$: $(15.2, 6.0, 0.0)$\n- A list of DCA-style predicted residue pairs with associated scores, interpreted such that higher scores indicate stronger coevolutionary coupling. Each tuple is $(i, j, s_{ij})$ with $i<j$ and a real-valued score $s_{ij}$. The list is:\n  - $(2,7,0.95)$\n  - $(3,8,0.94)$\n  - $(1,6,0.93)$\n  - $(4,9,0.92)$\n  - $(5,10,0.91)$\n  - $(1,7,0.84)$\n  - $(2,8,0.83)$\n  - $(3,9,0.82)$\n  - $(4,10,0.81)$\n  - $(2,6,0.80)$\n  - $(3,7,0.79)$\n  - $(5,9,0.78)$\n  - $(1,8,0.77)$\n  - $(1,5,0.76)$\n  - $(6,10,0.75)$\n  - $(4,8,0.745)$\n  - $(2,9,0.74)$\n  - $(3,10,0.73)$\n- Use a sequence-separation eligibility threshold $g=4$, that is, only pairs with $\\lvert i-j \\rvert \\ge 4$ are eligible to be evaluated. All distances are in Angstroms. All precision values must be reported as decimals rounded to exactly three digits after the decimal point.\n\nTask:\n- Write a complete program that, for each test case $(d_{c}, k)$ in the test suite below, computes the precision at top-$k$ under the contact definition cutoff $d_{c}$, using the above coordinates and predictions. You must use Euclidean distance to derive contact labels from the coordinates, you must respect the eligibility constraint $\\lvert i-j \\rvert \\ge g$, and you must treat $d_{ij} \\le d_{c}$ as contact.\n\nTest suite to evaluate:\n- Case A: $d_{c}=6.0$, $k=10$\n- Case B: $d_{c}=8.0$, $k=10$\n- Case C: $d_{c}=10.0$, $k=10$\n- Case D: $d_{c}=8.0$, $k=5$\n- Case E: $d_{c}=6.0$, $k=25$ (note: $k$ exceeds the number of eligible predictions)\n- Case F: $d_{c}=8.0$, $k=13$\n- Case G: $d_{c}=10.0$, $k=13$\n\nFinal output format:\n- Your program should produce a single line of output containing the precision results for the cases A through G, in order, as a comma-separated list enclosed in square brackets, for example, $\\left[\\dots\\right]$. Each value must be rounded to exactly three digits after the decimal point.", "solution": "The problem as stated is valid. It is scientifically grounded in the principles of computational protein structure analysis, well-posed with all necessary data and definitions provided, and entirely objective. There are no logical contradictions, missing data, or ambiguities. We shall proceed with a systematic solution.\n\nThe task is to compute the precision of a coevolutionary contact predictor for several test cases, where each case is defined by a pair of parameters: a contact distance cutoff $d_c$ and the number of top predictions to consider, $k$.\n\nThe procedure is as follows:\n1.  Filter the provided list of predicted pairs to retain only those that are \"eligible\" based on a sequence separation criterion.\n2.  For each eligible pair, calculate the true Euclidean distance between the residues using their given C-beta coordinates.\n3.  For each test case $(d_c, k)$, identify the set of predictions to be evaluated and calculate the precision.\n\n**Step 1: Data Representation and Filtering**\n\nThe coordinates of the $L=10$ residues are provided. We represent them as a mapping from residue index $i$ to coordinate $(x_i, y_i, z_i)$. Let the coordinate of residue $i$ be $C_i$.\nThe coordinates are:\n$C_1=(0.0, 0.0, 0.0)$, $C_2=(3.8, 0.0, 0.0)$, $C_3=(7.6, 0.0, 0.0)$, $C_4=(11.4, 0.0, 0.0)$, $C_5=(15.2, 0.0, 0.0)$, $C_6=(0.0, 6.0, 0.0)$, $C_7=(3.8, 6.0, 0.0)$, $C_8=(7.6, 6.0, 0.0)$, $C_9=(11.4, 6.0, 0.0)$, $C_{10}=(15.2, 6.0, 0.0)$.\n\nThe problem provides a list of $18$ predicted pairs $(i, j, s_{ij})$, already sorted in descending order of the score $s_{ij}$. These predictions must be filtered by the eligibility criterion $|i-j| \\ge g$, with $g=4$.\n\nLet us examine each prediction:\n- $(2,7)$: $|7-2|=5 \\ge 4$. Eligible.\n- $(3,8)$: $|8-3|=5 \\ge 4$. Eligible.\n- $(1,6)$: $|6-1|=5 \\ge 4$. Eligible.\n- $(4,9)$: $|9-4|=5 \\ge 4$. Eligible.\n- $(5,10)$: $|10-5|=5 \\ge 4$. Eligible.\n- $(1,7)$: $|7-1|=6 \\ge 4$. Eligible.\n- $(2,8)$: $|8-2|=6 \\ge 4$. Eligible.\n- $(3,9)$: $|9-3|=6 \\ge 4$. Eligible.\n- $(4,10)$: $|10-4|=6 \\ge 4$. Eligible.\n- $(2,6)$: $|6-2|=4 \\ge 4$. Eligible.\n- $(3,7)$: $|7-3|=4 \\ge 4$. Eligible.\n- $(5,9)$: $|9-5|=4 \\ge 4$. Eligible.\n- $(1,8)$: $|8-1|=7 \\ge 4$. Eligible.\n- $(1,5)$: $|5-1|=4 \\ge 4$. Eligible.\n- $(6,10)$: $|10-6|=4 \\ge 4$. Eligible.\n- $(4,8)$: $|8-4|=4 \\ge 4$. Eligible.\n- $(2,9)$: $|9-2|=7 \\ge 4$. Eligible.\n- $(3,10)$: $|10-3|=7 \\ge 4$. Eligible.\n\nAll $18$ predictions satisfy the eligibility criterion. Thus, the list of eligible predictions is the full list of predictions, and its size is $N_{eligible} = 18$.\n\n**Step 2: Distance Calculation**\n\nFor each of the $18$ eligible pairs $(i,j)$, we compute the Euclidean distance $d_{ij} = \\sqrt{(x_i - x_j)^2 + (y_i - y_j)^2 + (z_i - z_j)^2}$. Since all $z$-coordinates are $0$, this simplifies to $d_{ij} = \\sqrt{(x_i - x_j)^2 + (y_i - y_j)^2}$.\n\nThe calculated distances for the sorted list of eligible predictions are:\n1.  Pair $(2,7)$: $d_{2,7} = \\sqrt{(3.8-3.8)^2 + (0.0-6.0)^2} = 6.0$\n2.  Pair $(3,8)$: $d_{3,8} = \\sqrt{(7.6-7.6)^2 + (0.0-6.0)^2} = 6.0$\n3.  Pair $(1,6)$: $d_{1,6} = \\sqrt{(0.0-0.0)^2 + (0.0-6.0)^2} = 6.0$\n4.  Pair $(4,9)$: $d_{4,9} = \\sqrt{(11.4-11.4)^2 + (0.0-6.0)^2} = 6.0$\n5.  Pair $(5,10)$: $d_{5,10} = \\sqrt{(15.2-15.2)^2 + (0.0-6.0)^2} = 6.0$\n6.  Pair $(1,7)$: $d_{1,7} = \\sqrt{(0.0-3.8)^2 + (0.0-6.0)^2} = \\sqrt{14.44 + 36} = \\sqrt{50.44} \\approx 7.102$\n7.  Pair $(2,8)$: $d_{2,8} = \\sqrt{(3.8-7.6)^2 + (0.0-6.0)^2} = \\sqrt{14.44 + 36} = \\sqrt{50.44} \\approx 7.102$\n8.  Pair $(3,9)$: $d_{3,9} = \\sqrt{(7.6-11.4)^2 + (0.0-6.0)^2} = \\sqrt{14.44 + 36} = \\sqrt{50.44} \\approx 7.102$\n9.  Pair $(4,10)$: $d_{4,10} = \\sqrt{(11.4-15.2)^2 + (0.0-6.0)^2} = \\sqrt{14.44 + 36} = \\sqrt{50.44} \\approx 7.102$\n10. Pair $(2,6)$: $d_{2,6} = \\sqrt{(3.8-0.0)^2 + (0.0-6.0)^2} = \\sqrt{14.44 + 36} = \\sqrt{50.44} \\approx 7.102$\n11. Pair $(3,7)$: $d_{3,7} = \\sqrt{(7.6-3.8)^2 + (0.0-6.0)^2} = \\sqrt{14.44 + 36} = \\sqrt{50.44} \\approx 7.102$\n12. Pair $(5,9)$: $d_{5,9} = \\sqrt{(15.2-11.4)^2 + (0.0-6.0)^2} = \\sqrt{14.44 + 36} = \\sqrt{50.44} \\approx 7.102$\n13. Pair $(1,8)$: $d_{1,8} = \\sqrt{(0.0-7.6)^2 + (0.0-6.0)^2} = \\sqrt{57.76 + 36} = \\sqrt{93.76} \\approx 9.683$\n14. Pair $(1,5)$: $d_{1,5} = \\sqrt{(0.0-15.2)^2 + (0.0-0.0)^2} = 15.2$\n15. Pair $(6,10)$: $d_{6,10} = \\sqrt{(0.0-15.2)^2 + (6.0-6.0)^2} = 15.2$\n16. Pair $(4,8)$: $d_{4,8} = \\sqrt{(11.4-7.6)^2 + (0.0-6.0)^2} = \\sqrt{14.44 + 36} = \\sqrt{50.44} \\approx 7.102$\n17. Pair $(2,9)$: $d_{2,9} = \\sqrt{(3.8-11.4)^2 + (0.0-6.0)^2} = \\sqrt{57.76 + 36} = \\sqrt{93.76} \\approx 9.683$\n18. Pair $(3,10)$: $d_{3,10} = \\sqrt{(7.6-15.2)^2 + (0.0-6.0)^2} = \\sqrt{57.76 + 36} = \\sqrt{93.76} \\approx 9.683$\n\nA pair $(i,j)$ is a true contact if $d_{ij} \\le d_c$.\n\n**Step 3: Precision Calculation for Each Test Case**\n\nWe now evaluate each case. Precision is $\\frac{TP}{N_{eval}}$, where $TP$ is the number of true contacts (True Positives) and $N_{eval} = \\min(k, N_{eligible})$ is the number of evaluated predictions. Here $N_{eligible} = 18$.\n\n**Case A: $d_{c}=6.0$, $k=10$**\n- $N_{eval} = \\min(10, 18) = 10$.\n- We consider the top $10$ predictions.\n- We check the condition $d_{ij} \\le 6.0$. Pairs $1$ to $5$ have $d_{ij}=6.0$; pairs $6$ to $10$ have $d_{ij} \\approx 7.102 > 6.0$.\n- $TP = 5$.\n- Precision = $5/10 = 0.5$. Result: $0.500$.\n\n**Case B: $d_{c}=8.0$, $k=10$**\n- $N_{eval} = \\min(10, 18) = 10$.\n- We consider the top $10$ predictions.\n- We check the condition $d_{ij} \\le 8.0$. Pairs $1$ to $5$ have $d_{ij}=6.0$; pairs $6$ to $10$ have $d_{ij} \\approx 7.102$. Both are $\\le 8.0$.\n- $TP = 10$.\n- Precision = $10/10 = 1.0$. Result: $1.000$.\n\n**Case C: $d_{c}=10.0$, $k=10$**\n- $N_{eval} = \\min(10, 18) = 10$.\n- We consider the top $10$ predictions.\n- We check the condition $d_{ij} \\le 10.0$. All distances for the top $10$ pairs are $\\le 7.102$, hence $\\le 10.0$.\n- $TP = 10$.\n- Precision = $10/10 = 1.0$. Result: $1.000$.\n\n**Case D: $d_{c}=8.0$, $k=5$**\n- $N_{eval} = \\min(5, 18) = 5$.\n- We consider the top $5$ predictions.\n- We check the condition $d_{ij} \\le 8.0$. All distances for the top $5$ pairs are $6.0$, which is $\\le 8.0$.\n- $TP = 5$.\n- Precision = $5/5 = 1.0$. Result: $1.000$.\n\n**Case E: $d_{c}=6.0$, $k=25$**\n- $N_{eval} = \\min(25, 18) = 18$. We evaluate all eligible predictions.\n- We consider all $18$ predictions.\n- We check the condition $d_{ij} \\le 6.0$. Only pairs $1$ to $5$ satisfy this.\n- $TP = 5$.\n- Precision = $5/18 \\approx 0.2777...$. Rounded to $3$ decimals: $0.278$.\n\n**Case F: $d_{c}=8.0$, $k=13$**\n- $N_{eval} = \\min(13, 18) = 13$.\n- We consider the top $13$ predictions.\n- We check $d_{ij} \\le 8.0$. Pairs $1$-$5$ have $d_{ij}=6.0$. Pairs $6$-$12$ have $d_{ij} \\approx 7.102$. Pair $13$ has $d_{ij} \\approx 9.683 > 8.0$. Also note pair $16$ ($d_{ij} \\approx 7.102$) is ranked lower than pair $13$.\n- The top $13$ predictions are pairs $1, \\dots, 13$. Their distances are $6.0$ (5 times), $7.102$ (7 times), and $9.683$ (1 time).\n- The pairs with distance $\\le 8.0$ are the first $12$ pairs.\n- $TP = 12$.\n- Precision = $12/13 \\approx 0.92307...$. Rounded to $3$ decimals: $0.923$.\n\n**Case G: $d_{c}=10.0$, $k=13$**\n- $N_{eval} = \\min(13, 18) = 13$.\n- We consider the top $13$ predictions.\n- We check $d_{ij} \\le 10.0$. The distances for the top $13$ pairs are $6.0$ (5 times), $7.102$ (7 times), and $\\approx 9.683$ (1 time). All are $\\le 10.0$.\n- $TP = 13$.\n- Precision = $13/13 = 1.0$. Result: $1.000$.\n\nThe final vector of precision values for cases A through G is $[0.500, 1.000, 1.000, 1.000, 0.278, 0.923, 1.000]$.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes precision for coevolutionary contact predictions based on specified parameters.\n    \"\"\"\n    # Define residue coordinates (1-based indexing for convenience)\n    coords = {\n        1: np.array([0.0, 0.0, 0.0]),\n        2: np.array([3.8, 0.0, 0.0]),\n        3: np.array([7.6, 0.0, 0.0]),\n        4: np.array([11.4, 0.0, 0.0]),\n        5: np.array([15.2, 0.0, 0.0]),\n        6: np.array([0.0, 6.0, 0.0]),\n        7: np.array([3.8, 6.0, 0.0]),\n        8: np.array([7.6, 6.0, 0.0]),\n        9: np.array([11.4, 6.0, 0.0]),\n        10: np.array([15.2, 6.0, 0.0]),\n    }\n\n    # List of predictions (i, j, score), already sorted by score\n    predictions = [\n        (2, 7, 0.95), (3, 8, 0.94), (1, 6, 0.93), (4, 9, 0.92), (5, 10, 0.91),\n        (1, 7, 0.84), (2, 8, 0.83), (3, 9, 0.82), (4, 10, 0.81), (2, 6, 0.80),\n        (3, 7, 0.79), (5, 9, 0.78), (1, 8, 0.77), (1, 5, 0.76), (6, 10, 0.75),\n        (4, 8, 0.745), (2, 9, 0.74), (3, 10, 0.73)\n    ]\n    \n    g = 4  # Sequence separation threshold\n\n    # Filter for eligible predictions and calculate distances\n    eligible_predictions = []\n    for i, j, score in predictions:\n        if abs(i - j) >= g:\n            dist = np.linalg.norm(coords[i] - coords[j])\n            eligible_predictions.append({'pair': (i, j), 'dist': dist})\n\n    # Test suite to evaluate\n    test_cases = [\n        {'d_c': 6.0, 'k': 10},   # Case A\n        {'d_c': 8.0, 'k': 10},   # Case B\n        {'d_c': 10.0, 'k': 10},  # Case C\n        {'d_c': 8.0, 'k': 5},    # Case D\n        {'d_c': 6.0, 'k': 25},   # Case E\n        {'d_c': 8.0, 'k': 13},   # Case F\n        {'d_c': 10.0, 'k': 13},  # Case G\n    ]\n\n    results = []\n    for case in test_cases:\n        d_c = case['d_c']\n        k = case['k']\n\n        # Determine the number of predictions to evaluate\n        num_eligible = len(eligible_predictions)\n        num_to_evaluate = min(k, num_eligible)\n\n        if num_to_evaluate == 0:\n            # Handle edge case of no predictions to evaluate\n            precision = 0.0\n        else:\n            # Get the top predictions to evaluate\n            top_predictions = eligible_predictions[:num_to_evaluate]\n            \n            # Count true positives (TPs)\n            true_positives = 0\n            for pred in top_predictions:\n                if pred['dist'] = d_c:\n                    true_positives += 1\n            \n            # Calculate precision\n            precision = true_positives / num_to_evaluate\n        \n        # Format the result to exactly three decimal places\n        results.append(f\"{precision:.3f}\")\n\n    # Print the final output in the required format\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2380714"}, {"introduction": "Coevolutionary analysis is not limited to predicting a single, static three-dimensional structure. This practice problem introduces a powerful advanced technique known as differential analysis, where we compare the coevolutionary patterns of protein families adapted to different conditions. By subtracting the coupling matrices of thermophilic and mesophilic orthologs, you will learn how to identify the specific residue interactions that may be critical for functional adaptations like thermal stability, moving beyond simple contact prediction into the realm of functional genomics [@problem_id:2380688].", "problem": "You are given two coupling matrices derived from the Potts model representation of protein sequence coevolution for two physiological conditions: thermophilic and mesophilic. For a protein of length $L$ over an alphabet of size $q$, a Potts model coupling matrix is an array $J \\in \\mathbb{R}^{(Lq) \\times (Lq)}$ whose elements $J_{i\\alpha,\\,j\\beta}$ quantify the statistical coupling between residue state $\\alpha \\in \\{0,1,\\dots,q-1\\}$ at position $i \\in \\{0,1,\\dots,L-1\\}$ and residue state $\\beta \\in \\{0,1,\\dots,q-1\\}$ at position $j \\in \\{0,1,\\dots,L-1\\}$. The problem is to perform a differential analysis between thermophilic and mesophilic orthologs by subtracting their coupling matrices and identifying position pairs whose coupling differences have the largest magnitude, interpreted as contacts most critical for thermal stability.\n\nDefine the differential coupling matrix as $\\Delta J = J^{\\mathrm{thermo}} - J^{\\mathrm{meso}}$. For each unordered pair of distinct positions $(i,j)$ with $0 \\leq i  j \\leq L-1$, define the $q \\times q$ block $\\Delta J_{ij}$ as the submatrix of $\\Delta J$ obtained by selecting rows indexed by $\\{i q, i q + 1, \\dots, i q + (q-1)\\}$ and columns indexed by $\\{j q, j q + 1, \\dots, j q + (q-1)\\}$. Define the score for the pair $(i,j)$ as the Frobenius norm $S_{ij} = \\left\\| \\Delta J_{ij} \\right\\|_{F} = \\sqrt{\\sum_{\\alpha=0}^{q-1} \\sum_{\\beta=0}^{q-1} \\left( \\Delta J_{i\\alpha,\\,j\\beta} \\right)^2 }$. You must rank all pairs $(i,j)$ by descending $S_{ij}$. In the event of ties in $S_{ij}$, break ties by lexicographic order on $(i,j)$, meaning that $(i_{1},j_{1})$ precedes $(i_{2},j_{2})$ if and only if $i_{1}  i_{2}$, or $i_{1} = i_{2}$ and $j_{1}  j_{2}$.\n\nFor each test case, return the top $K$ pairs after ranking, encoded as integers by flattening $(i,j)$ to $r = i \\cdot L + j$ using $0$-based indexing. Ignore all diagonal blocks $(i = j)$. Any block not explicitly specified is to be treated as the zero matrix. Diagonal $q \\times q$ blocks $(i = j)$ are to be treated as zero. If a block is specified for $(i,j)$ with $i  j$, interpret the corresponding $(j,i)$ block as its transpose so that $J_{j\\beta,\\,i\\alpha} = J_{i\\alpha,\\,j\\beta}$.\n\nTest Suite and Required Outputs:\nFor each test case below, compute the specified result and produce the final output as a single line containing a comma-separated list of the per-case results, where each per-case result is a list of integers. The exact required final output format is a single line string of the form $[ [r_{1,1}, r_{1,2}, \\dots], [r_{2,1}, r_{2,2}, \\dots], \\dots ]$ with no spaces inserted except those necessary to separate list brackets and commas.\n\n- Test Case $1$:\n  - $L = 3$, $q = 2$, $K = 2$.\n  - $J^{\\mathrm{meso}}$ is the zero matrix in $\\mathbb{R}^{6 \\times 6}$.\n  - $J^{\\mathrm{thermo}}$ is defined by the following off-diagonal blocks for $(i,j)$ with $ij$:\n    - $\\Delta J_{0,1} = \\begin{bmatrix} 1  0 \\\\ 0  1 \\end{bmatrix}$,\n    - $\\Delta J_{0,2} = \\begin{bmatrix} 2  0 \\\\ 0  0 \\end{bmatrix}$,\n    - $\\Delta J_{1,2} = \\begin{bmatrix} 0  0.5 \\\\ 0.5  0 \\end{bmatrix}$.\n  - All unspecified blocks are zero. Interpret $(j,i)$ blocks as transposes of $(i,j)$ blocks.\n\n- Test Case $2$:\n  - $L = 4$, $q = 2$, $K = 3$.\n  - $J^{\\mathrm{thermo}}$ and $J^{\\mathrm{meso}}$ are both the zero matrix in $\\mathbb{R}^{8 \\times 8}$.\n\n- Test Case $3$:\n  - $L = 3$, $q = 3$, $K = 2$.\n  - $J^{\\mathrm{meso}}$ is the zero matrix in $\\mathbb{R}^{9 \\times 9}$.\n  - $J^{\\mathrm{thermo}}$ is defined by the following off-diagonal blocks for $(i,j)$ with $ij$:\n    - $\\Delta J_{0,1} = \\begin{bmatrix} -1  0  0 \\\\ 0  -1  0 \\\\ 0  0  -1 \\end{bmatrix}$,\n    - $\\Delta J_{0,2} = \\begin{bmatrix} 0.5  0.5  0.5 \\\\ 0.5  0.5  0.5 \\\\ 0.5  0.5  0.5 \\end{bmatrix}$,\n    - $\\Delta J_{1,2} = \\begin{bmatrix} -1.5  0  0 \\\\ 0  0  0 \\\\ 0  0  0 \\end{bmatrix}$.\n  - All unspecified blocks are zero. Interpret $(j,i)$ blocks as transposes of $(i,j)$ blocks.\n\nFinal Output Format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where the result for each test case is the list of the top $K$ flattened indices $r = i \\cdot L + j$ in the required order. For example, a valid overall output would look like $[[x_{1},x_{2}],[y_{1},y_{2},y_{3}],[z_{1},z_{2}]]$ where $x_{k}$, $y_{k}$, and $z_{k}$ are integers.", "solution": "The problem as stated is valid. It is scientifically grounded in the principles of computational biophysics and bioinformatics, specifically concerning the coevolutionary analysis of protein sequences. The methodology, involving the comparison of Potts model coupling matrices to identify differential selection pressures, is a standard and robust technique for studying protein adaptation, such as thermal stability. The problem is well-posed, with all parameters, data, and procedural steps defined with mathematical precision, ensuring a unique and verifiable solution.\n\nThe core of the problem is to quantify the difference in statistical couplings between amino acid positions for a protein under two different physiological conditions, thermophilic and mesophilic. The hypothesis is that positions exhibiting a large change in coupling strength are critical for the functional adaptation, in this case, thermal stability. The coupling matrices, $J^{\\mathrm{thermo}}$ and $J^{\\mathrm{meso}}$, derived from a Potts model, capture these pairwise statistical dependencies.\n\nThe analysis proceeds through the following logical steps:\n\n1.  **Differential Coupling Matrix Construction**: The first step is to compute the differential coupling matrix, $\\Delta J = J^{\\mathrm{thermo}} - J^{\\mathrm{meso}}$. This matrix highlights the changes in coupling strengths between the two conditions. In the given test cases, $J^{\\mathrm{meso}}$ is the zero matrix, which simplifies the calculation to $\\Delta J = J^{\\mathrm{thermo}}$.\n\n2.  **Position Pair Scoring**: We are interested in the interactions between distinct pairs of positions $(i,j)$ in the protein sequence, where $0 \\leq i  j \\leq L-1$. For each such pair, the interaction is not a single value but is described by a $q \\times q$ matrix of couplings between all possible amino acid states at these two positions. This is the block submatrix $\\Delta J_{ij}$. To reduce this matrix to a single scalar score representing the magnitude of the differential coupling, we employ the Frobenius norm, $S_{ij} = \\|\\Delta J_{ij}\\|_F$. The Frobenius norm is defined as $S_{ij} = \\sqrt{\\sum_{\\alpha=0}^{q-1} \\sum_{\\beta=0}^{q-1} (\\Delta J_{i\\alpha, j\\beta})^2}$, which is the square root of the sum of the squares of all elements in the block. This is analogous to the Euclidean distance in a higher-dimensional space and provides a robust measure of the magnitude of the change in the coupling block.\n\n3.  **Ranking**: After computing the score $S_{ij}$ for all relevant pairs $(i,j)$, these pairs are ranked. The primary sorting criterion is the score $S_{ij}$ in descending order, to prioritize pairs with the largest change in coupling. A secondary tie-breaking rule is specified: if two pairs have the same score, they are ordered lexicographically by the pair indices $(i,j)$. This means $(i_1, j_1)$ precedes $(i_2, j_2)$ if $i_1  i_2$, or if $i_1 = i_2$ and $j_1  j_2$. This ensures a unique and deterministic ranking.\n\n4.  **Output Generation**: From the fully ranked list, the top $K$ pairs are selected. Each pair $(i,j)$ is then converted into a flattened (or raster scan) integer index $r = i \\cdot L + j$ for a compact representation.\n\nLet us apply this procedure to the provided test cases.\n\n**Test Case 1**:\n- Parameters: $L = 3$, $q = 2$, $K = 2$.\n- $J^{\\mathrm{meso}} = 0$, thus $\\Delta J = J^{\\mathrm{thermo}}$.\n- The pairs to evaluate are $(0,1)$, $(0,2)$, and $(1,2)$ with $L=3$.\n- For pair $(0,1)$: $\\Delta J_{01} = \\begin{pmatrix} 1  0 \\\\ 0  1 \\end{pmatrix}$. The squared score is $S_{01}^2 = 1^2 + 0^2 + 0^2 + 1^2 = 2$.\n- For pair $(0,2)$: $\\Delta J_{02} = \\begin{pmatrix} 2  0 \\\\ 0  0 \\end{pmatrix}$. The squared score is $S_{02}^2 = 2^2 + 0^2 + 0^2 + 0^2 = 4$.\n- For pair $(1,2)$: $\\Delta J_{12} = \\begin{pmatrix} 0  0.5 \\\\ 0.5  0 \\end{pmatrix}$. The squared score is $S_{12}^2 = 0^2 + (0.5)^2 + (0.5)^2 + 0^2 = 0.5$.\n- The scores are $S_{02} = \\sqrt{4} = 2$, $S_{01} = \\sqrt{2} \\approx 1.414$, and $S_{12} = \\sqrt{0.5} \\approx 0.707$.\n- The descending order of scores gives the pair ordering: $(0,2)$, $(0,1)$, $(1,2)$.\n- The top $K=2$ pairs are $(0,2)$ and $(0,1)$.\n- Flattened indices: $r_1 = 0 \\cdot 3 + 2 = 2$ for $(0,2)$, and $r_2 = 0 \\cdot 3 + 1 = 1$ for $(0,1)$.\n- The result is the list $[2, 1]$.\n\n**Test Case 2**:\n- Parameters: $L = 4$, $q = 2$, $K = 3$.\n- Both $J^{\\mathrm{thermo}}$ and $J^{\\mathrm{meso}}$ are zero matrices, so $\\Delta J = 0$.\n- Consequently, all blocks $\\Delta J_{ij}$ are zero matrices, and all scores $S_{ij} = 0$.\n- The ranking is determined entirely by the tie-breaking rule (lexicographical order).\n- The pairs $(i,j)$ with $0 \\leq i  j \\leq 3$ are: $(0,1), (0,2), (0,3), (1,2), (1,3), (2,3)$.\n- This is already the lexicographically sorted order.\n- The top $K=3$ pairs are $(0,1), (0,2), (0,3)$.\n- Flattened indices: $r_1 = 0 \\cdot 4 + 1 = 1$, $r_2 = 0 \\cdot 4 + 2 = 2$, $r_3 = 0 \\cdot 4 + 3 = 3$.\n- The result is the list $[1, 2, 3]$.\n\n**Test Case 3**:\n- Parameters: $L = 3$, $q = 3$, $K = 2$.\n- $J^{\\mathrm{meso}} = 0$, thus $\\Delta J = J^{\\mathrm{thermo}}$.\n- The pairs to evaluate are $(0,1)$, $(0,2)$, and $(1,2)$.\n- For pair $(0,1)$: $\\Delta J_{01} = \\begin{pmatrix} -1  0  0 \\\\ 0  -1  0 \\\\ 0  0  -1 \\end{pmatrix}$. The squared score is $S_{01}^2 = (-1)^2 + (-1)^2 + (-1)^2 = 3$.\n- For pair $(0,2)$: $\\Delta J_{02} = \\begin{pmatrix} 0.5  0.5  0.5 \\\\ 0.5  0.5  0.5 \\\\ 0.5  0.5  0.5 \\end{pmatrix}$. The squared score is $S_{02}^2 = 9 \\times (0.5)^2 = 2.25$.\n- For pair $(1,2)$: $\\Delta J_{12} = \\begin{pmatrix} -1.5  0  0 \\\\ 0  0  0 \\\\ 0  0  0 \\end{pmatrix}$. The squared score is $S_{12}^2 = (-1.5)^2 = 2.25$.\n- The scores are $S_{01} = \\sqrt{3} \\approx 1.732$, $S_{02} = \\sqrt{2.25} = 1.5$, and $S_{12} = \\sqrt{2.25} = 1.5$.\n- There is a tie between pairs $(0,2)$ and $(1,2)$.\n- The ranking is:\n  1. Pair $(0,1)$ with score $\\sqrt{3}$.\n  2. For the tie at score $1.5$, we compare $(0,2)$ and $(1,2)$. Lexicographically, $(0,2)$ comes before $(1,2)$.\n- The sorted order of pairs is $(0,1)$, $(0,2)$, $(1,2)$.\n- The top $K=2$ pairs are $(0,1)$ and $(0,2)$.\n- Flattened indices: $r_1 = 0 \\cdot 3 + 1 = 1$, $r_2 = 0 \\cdot 3 + 2 = 2$.\n- The result is the list $[1, 2]$.\n\nThe implementation will follow this logic precisely, using numerical libraries for efficient calculation of the Frobenius norm.", "answer": "```python\nimport numpy as np\n\ndef calculate_top_pairs(L, q, K, delta_j_blocks):\n    \"\"\"\n    Calculates and ranks differential coupling scores for position pairs.\n\n    Args:\n        L (int): Protein length.\n        q (int): Alphabet size.\n        K (int): Number of top pairs to return.\n        delta_j_blocks (dict): A dictionary mapping tuples (i, j) to the \n                               qxq numpy array for the block Delta J_ij.\n    \n    Returns:\n        list: A list of the top K flattened indices r = i*L + j.\n    \"\"\"\n    scored_pairs = []\n    \n    # Iterate over all unordered pairs of distinct positions (i, j)\n    for i in range(L):\n        for j in range(i + 1, L):\n            # Get the differential coupling block for the pair (i, j)\n            # If not specified, it's a zero matrix.\n            block = delta_j_blocks.get((i, j), np.zeros((q, q)))\n            \n            # Calculate the score S_ij (Frobenius norm)\n            score = np.linalg.norm(block, 'fro')\n            \n            # Store the score and pair indices. The score is negated for descending sort.\n            scored_pairs.append((-score, i, j))\n    \n    # Sort the pairs. Primary key is score (descending), secondary is i (ascending),\n    # tertiary is j (ascending). This is Python's default tuple sorting behavior.\n    scored_pairs.sort()\n    \n    # Select the top K pairs and compute their flattened indices\n    top_k_indices = []\n    num_pairs_to_take = min(K, len(scored_pairs))\n    for k in range(num_pairs_to_take):\n        score, i, j = scored_pairs[k]\n        flattened_index = i * L + j\n        top_k_indices.append(flattened_index)\n        \n    return top_k_indices\n\ndef solve():\n    \"\"\"\n    Solves the problem for all provided test cases.\n    \"\"\"\n    test_cases = [\n        # Test Case 1\n        {\n            \"L\": 3, \"q\": 2, \"K\": 2,\n            \"delta_j_blocks\": {\n                (0, 1): np.array([[1.0, 0.0], [0.0, 1.0]]),\n                (0, 2): np.array([[2.0, 0.0], [0.0, 0.0]]),\n                (1, 2): np.array([[0.0, 0.5], [0.5, 0.0]])\n            }\n        },\n        # Test Case 2\n        {\n            \"L\": 4, \"q\": 2, \"K\": 3,\n            \"delta_j_blocks\": {}\n        },\n        # Test Case 3\n        {\n            \"L\": 3, \"q\": 3, \"K\": 2,\n            \"delta_j_blocks\": {\n                (0, 1): np.array([[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]),\n                (0, 2): np.array([[0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5]]),\n                (1, 2): np.array([[-1.5, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])\n            }\n        }\n    ]\n\n    all_results = []\n    for case in test_cases:\n        result = calculate_top_pairs(\n            case[\"L\"],\n            case[\"q\"],\n            case[\"K\"],\n            case[\"delta_j_blocks\"]\n        )\n        all_results.append(result)\n    \n    # Format the final output string exactly as required, without extra spaces.\n    # str(list) produces spaces, so they are removed.\n    results_str = [str(r).replace(' ', '') for r in all_results]\n    print(f\"[{','.join(results_str)}]\")\n\nsolve()\n```", "id": "2380688"}, {"introduction": "To truly master a computational method, one must understand not only its strengths but also its limitations. This exercise presents a carefully constructed scenario where standard pairwise coevolutionary models might fail to detect a clear dependency because it is captured by a three-body, rather than a two-body, interaction. By stepping through the statistical inference for a higher-order model, you will directly confront the underlying assumptions of DCA methods and appreciate why more complex models are sometimes necessary to fully describe the sequence landscape [@problem_id:2380732].", "problem": "A researcher studies residue coevolution using a small multiple sequence alignment of length $L=3$, encoded as binary variables $s_i \\in \\{-1,+1\\}$ for positions $i \\in \\{1,2,3\\}$. The alignment contains $100$ sequences with the following exact counts for each configuration $\\mathbf{s}=(s_1,s_2,s_3)$:\n\n- Even-parity configurations ($s_1 s_2 s_3=+1$), each with $20$ sequences:\n  - $(+1,+1,+1)$\n  - $(+1,-1,-1)$\n  - $(-1,+1,-1)$\n  - $(-1,-1,+1)$\n\n- Odd-parity configurations ($s_1 s_2 s_3=-1$), each with $5$ sequences:\n  - $(+1,+1,-1)$\n  - $(+1,-1,+1)$\n  - $(-1,+1,+1)$\n  - $(-1,-1,-1)$\n\nOn this dataset, pseudo-likelihood maximization Direct Coupling Analysis (plmDCA) restricted to pairwise Ising couplings finds vanishing pairwise couplings due to the empirical single-site frequencies and pairwise correlations being uniform and zero. However, a more expressive and computationally expensive maximum-entropy model with a pure three-body interaction,\n$$\nP(\\mathbf{s})=\\frac{1}{Z(K)}\\exp\\!\\big(K\\, s_1 s_2 s_3\\big),\n$$\ncan capture the observed dependence structure.\n\nAssuming the model above and using only the information provided, determine the maximum likelihood estimate of the three-body interaction parameter $K$ that fits this alignment. Express your final answer in exact analytic form (no rounding).", "solution": "The problem is subjected to validation and is found to be scientifically grounded, well-posed, and objective. It is a standard problem in statistical inference applied to a model from statistical physics and computational biology. All data are self-contained and consistent. No flaws are detected. We may proceed with the solution.\n\nThe objective is to find the maximum likelihood estimate (MLE) of the parameter $K$ for the given probability model and data. The model for a sequence $\\mathbf{s}=(s_1,s_2,s_3)$ with $s_i \\in \\{-1,+1\\}$ is given by the three-body Ising-like distribution:\n$$\nP(\\mathbf{s}|K) = \\frac{1}{Z(K)}\\exp(K s_1 s_2 s_3)\n$$\nwhere $Z(K)$ is the partition function.\n\nThe data consists of an alignment of $M=100$ sequences. The log-likelihood function $\\ell(K)$ for the entire dataset $\\mathcal{D} = \\{\\mathbf{s}^{(1)}, \\dots, \\mathbf{s}^{(M)}\\}$ is the sum of the log-probabilities of each observed sequence:\n$$\n\\ell(K) = \\ln \\left( \\prod_{m=1}^{M} P(\\mathbf{s}^{(m)}|K) \\right) = \\sum_{m=1}^{M} \\ln P(\\mathbf{s}^{(m)}|K)\n$$\nSubstituting the expression for $P(\\mathbf{s}|K)$:\n$$\n\\ell(K) = \\sum_{m=1}^{M} \\left( K s_1^{(m)} s_2^{(m)} s_3^{(m)} - \\ln Z(K) \\right) = K \\left( \\sum_{m=1}^{M} s_1^{(m)} s_2^{(m)} s_3^{(m)} \\right) - M \\ln Z(K)\n$$\nTo find the MLE for $K$, we differentiate the log-likelihood with respect to $K$ and set the result to zero:\n$$\n\\frac{d\\ell(K)}{dK} = \\sum_{m=1}^{M} s_1^{(m)} s_2^{(m)} s_3^{(m)} - M \\frac{d}{dK}\\ln Z(K) = 0\n$$\nDividing by $M$, we obtain the fundamental equation for the MLE in exponential family models: the empirical average of the sufficient statistic must equal its model expectation value.\n$$\n\\frac{1}{M}\\sum_{m=1}^{M} s_1^{(m)} s_2^{(m)} s_3^{(m)} = \\frac{d}{dK}\\ln Z(K)\n$$\nThe left-hand side is the empirical average $\\langle s_1 s_2 s_3 \\rangle_{\\text{emp}}$. The right-hand side is the model's expectation value $\\langle s_1 s_2 s_3 \\rangle_{\\text{model}}$. Thus, the condition is:\n$$\n\\langle s_1 s_2 s_3 \\rangle_{\\text{emp}} = \\langle s_1 s_2 s_3 \\rangle_{\\text{model}}\n$$\nFirst, we compute the empirical average from the provided data. The product $s_1 s_2 s_3$ can take values $+1$ (even parity) or $-1$ (odd parity).\nThe problem states there are $4$ even-parity configurations, each with a count of $20$. The total count for $s_1 s_2 s_3 = +1$ is $N_{even} = 4 \\times 20 = 80$.\nThere are $4$ odd-parity configurations, each with a count of $5$. The total count for $s_1 s_2 s_3 = -1$ is $N_{odd} = 4 \\times 5 = 20$.\nThe total number of sequences is $M = N_{even} + N_{odd} = 80 + 20 = 100$, consistent with the problem statement.\nThe empirical average is:\n$$\n\\langle s_1 s_2 s_3 \\rangle_{\\text{emp}} = \\frac{1}{M} \\big( N_{even} \\cdot (+1) + N_{odd} \\cdot (-1) \\big) = \\frac{80 - 20}{100} = \\frac{60}{100} = \\frac{3}{5}\n$$\nNext, we compute the model's expectation value. The partition function $Z(K)$ is the sum over all $2^3 = 8$ possible configurations of $\\mathbf{s}$:\n$$\nZ(K) = \\sum_{\\mathbf{s}} \\exp(K s_1 s_2 s_3)\n$$\nSince there are $4$ configurations with $s_1 s_2 s_3 = +1$ and $4$ configurations with $s_1 s_2 s_3 = -1$, the partition function is:\n$$\nZ(K) = 4 \\cdot \\exp(K \\cdot (+1)) + 4 \\cdot \\exp(K \\cdot (-1)) = 4(\\exp(K) + \\exp(-K))\n$$\nUsing the definition of the hyperbolic cosine, $\\cosh(K) = \\frac{\\exp(K) + \\exp(-K)}{2}$, we have:\n$$\nZ(K) = 8 \\cosh(K)\n$$\nThe model's expectation value is:\n$$\n\\langle s_1 s_2 s_3 \\rangle_{\\text{model}} = \\frac{d}{dK}\\ln Z(K) = \\frac{1}{Z(K)}\\frac{dZ(K)}{dK}\n$$\nThe derivative of $Z(K)$ is:\n$$\n\\frac{dZ(K)}{dK} = 4(\\exp(K) - \\exp(-K)) = 8 \\sinh(K)\n$$\nwhere $\\sinh(K) = \\frac{\\exp(K) - \\exp(-K)}{2}$ is the hyperbolic sine.\nTherefore, the model expectation is:\n$$\n\\langle s_1 s_2 s_3 \\rangle_{\\text{model}} = \\frac{8 \\sinh(K)}{8 \\cosh(K)} = \\tanh(K)\n$$\nEquating the empirical and model expectations, we obtain the equation for $K$:\n$$\n\\tanh(K) = \\frac{3}{5}\n$$\nTo find $K$, we take the inverse hyperbolic tangent of both sides:\n$$\nK = \\operatorname{arctanh}\\left(\\frac{3}{5}\\right)\n$$\nThe problem requires an exact analytic form. We use the logarithmic representation of the inverse hyperbolic tangent function, $\\operatorname{arctanh}(x) = \\frac{1}{2}\\ln\\left(\\frac{1+x}{1-x}\\right)$:\n$$\nK = \\frac{1}{2}\\ln\\left(\\frac{1 + \\frac{3}{5}}{1 - \\frac{3}{5}}\\right) = \\frac{1}{2}\\ln\\left(\\frac{\\frac{8}{5}}{\\frac{2}{5}}\\right) = \\frac{1}{2}\\ln\\left(\\frac{8}{2}\\right) = \\frac{1}{2}\\ln(4)\n$$\nSince $\\ln(4) = \\ln(2^2) = 2\\ln(2)$, the final expression for $K$ is:\n$$\nK = \\frac{1}{2}(2\\ln(2)) = \\ln(2)\n$$\nThis is the maximum likelihood estimate for the three-body interaction parameter.", "answer": "$$\n\\boxed{\\ln(2)}\n$$", "id": "2380732"}]}