{"hands_on_practices": [{"introduction": "The heart of any molecular dynamics simulation is the force field, a set of equations and parameters that describe the potential energy of the system. While these equations can seem abstract, each parameter has a direct physical meaning. This exercise [@problem_id:2417106] invites you to explore this connection by considering a hypothetical change to the Lennard-Jones parameter $\\sigma$, which defines the effective size of an atom. By predicting the consequences for a protein's overall size, packing, and movement, you will build crucial intuition for how the microscopic rules of the force field govern the macroscopic behavior we observe.", "problem": "A single-chain globular protein is simulated in explicit water using all-atom Molecular Dynamics (MD). All nonbonded parameters are standard except that the Lennard–Jones $\\sigma$ parameter for all backbone $\\alpha$-carbons is uniformly increased by $15\\%$. The Lennard–Jones $\\epsilon$ parameters and all electrostatic partial charges remain unchanged. Assume standard Lorentz–Berthelot mixing rules for unlike pairs and that the simulation is run at constant temperature and pressure long enough to re-equilibrate. Which statement best describes the expected qualitative change in the protein’s dynamics and packing relative to the unmodified simulation?\n\nA. The effective van der Waals exclusion around backbone carbons increases, shifting preferred interatomic separations outward; the average radius of gyration $R_g$ increases slightly and the number of native intramolecular contacts decreases, and the translational diffusion coefficient $D$ decreases.\n\nB. The outward shift of the Lennard–Jones minimum increases the attractive range and stabilizes tighter packing; the average radius of gyration $R_g$ decreases and the translational diffusion coefficient $D$ increases.\n\nC. No appreciable change is expected because only $\\alpha$-carbons are modified and they do not control packing; both packing metrics and the translational diffusion coefficient $D$ remain unchanged.\n\nD. The increase in Lennard–Jones $\\sigma$ effectively increases the protein’s mass, which reduces root-mean-square fluctuations and leaves the radius of gyration $R_g$ unchanged.", "solution": "The problem statement will be validated first, as is required.\n\n**Step 1: Extract Givens**\n- System: Single-chain globular protein in explicit water.\n- Simulation: All-atom Molecular Dynamics (MD).\n- Force Field Perturbation: The Lennard–Jones (LJ) $\\sigma$ parameter for all backbone $\\alpha$-carbons ($C_\\alpha$) is uniformly increased by $15\\%$.\n- Unchanged Parameters: LJ $\\epsilon$ parameters and all electrostatic partial charges.\n- Mixing Rules: Standard Lorentz–Berthelot mixing rules.\n- Simulation Ensemble: Constant temperature and pressure (NPT).\n- Equilibration: The system is allowed to re-equilibrate.\n- Question: Describe the expected qualitative change in protein dynamics (translational diffusion coefficient $D$) and packing (radius of gyration $R_g$, native contacts) relative to an unmodified simulation.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem describes a well-defined computational experiment within the framework of classical molecular dynamics. The components—protein, explicit water, all-atom force field, Lennard-Jones potential, Lorentz-Berthelot rules, and NPT ensemble—are standard in the field of computational biophysics. The modification of a force field parameter ($\\sigma$) is a common technique to study the energetic and structural consequences of atomic interactions. The observables mentioned ($R_g$, $D$, intramolecular contacts) are standard metrics for characterizing protein structure and dynamics. The problem is scientifically grounded, self-contained, objective, and well-posed. It asks for a qualitative prediction based on fundamental principles of statistical mechanics and polymer physics.\n\n**Step 3: Verdict and Action**\nThe problem statement is valid. A solution will be derived.\n\n**Derivation of Solution**\nThe Lennard-Jones potential, which models van der Waals interactions, is given by:\n$$V_{LJ}(r_{ij}) = 4\\epsilon_{ij} \\left[ \\left(\\frac{\\sigma_{ij}}{r_{ij}}\\right)^{12} - \\left(\\frac{\\sigma_{ij}}{r_{ij}}\\right)^{6} \\right]$$\nHere, $r_{ij}$ is the distance between atoms $i$ and $j$. The parameter $\\sigma_{ij}$ represents the finite distance at which the inter-particle potential is zero and is directly related to the effective atomic size or van der Waals radius. The repulsive term, proportional to $(r_{ij})^{-12}$, dominates at short distances and models steric exclusion. The attractive term, proportional to $(r_{ij})^{-6}$, dominates at intermediate distances. The potential reaches its minimum at a distance $r_{min} = 2^{1/6}\\sigma_{ij}$.\n\nThe problem states that for an $\\alpha$-carbon atom $i$, its self-interaction parameter $\\sigma_{ii}$ is increased: $\\sigma'_{ii} = 1.15 \\times \\sigma_{ii}$. According to the Lorentz–Berthelot mixing rule for an unlike pair of atoms $(i,j)$, where $i$ is a $C_\\alpha$, the mixed parameter $\\sigma'_{ij}$ becomes:\n$$ \\sigma'_{ij} = \\frac{\\sigma'_{ii} + \\sigma_{jj}}{2} = \\frac{1.15\\sigma_{ii} + \\sigma_{jj}}{2} $$\nSince $\\sigma_{ii}$ and $\\sigma_{jj}$ are positive definite, it is clear that $\\sigma'_{ij} > \\sigma_{ij}$, where $\\sigma_{ij} = (\\sigma_{ii} + \\sigma_{jj})/2$.\n\nThis increase in $\\sigma'_{ij}$ has two primary consequences:\n1.  **Increased Steric Repulsion:** The repulsive wall of the potential is pushed outward. For any given interatomic distance $r_{ij}$, the repulsive energy $4\\epsilon_{ij}(\\sigma'_{ij}/r_{ij})^{12}$ is significantly larger than before. This means that other atoms are more strongly repelled by the $C_\\alpha$ carbons. This constitutes an increase in the effective van der Waals exclusion volume around these backbone atoms.\n2.  **Shift in Potential Minimum:** The optimal interaction distance, $r'_{min} = 2^{1/6}\\sigma'_{ij}$, increases. Atoms interacting with the backbone $\\alpha$-carbons will now prefer to be at a larger separation.\n\nSince the $\\alpha$-carbons form the backbone of the polypeptide chain, they are structurally critical. Increasing their effective size forces the entire chain to adjust. To avoid energetically unfavorable steric clashes, the protein must expand. This leads to a less compact overall structure.\n- Consequently, the average radius of gyration, $R_g$, a measure of the protein's size, will **increase**.\n- This expansion perturbs the finely-tuned packing of the native state. Side chains will rearrange, and the optimal network of interactions will be disrupted. Thus, the number of native intramolecular contacts is expected to **decrease**.\n\nNext, we consider the effect on dynamics. The translational diffusion coefficient, $D$, describes how quickly the protein moves through the solvent. For a roughly spherical object in a viscous fluid, this is described by the Stokes-Einstein equation:\n$$ D = \\frac{k_B T}{6 \\pi \\eta R_h} $$\nwhere $k_B$ is the Boltzmann constant, $T$ is the temperature, $\\eta$ is the viscosity of the solvent (water), and $R_h$ is the hydrodynamic radius of the protein. The hydrodynamic radius is a measure of the effective size of the macromolecule as it tumbles and diffuses in solution. It is strongly correlated with the radius of gyration, $R_g$. Since we have established that the protein expands ($R_g$ increases), its hydrodynamic radius $R_h$ will also **increase**. Because $D$ is inversely proportional to $R_h$, the translational diffusion coefficient $D$ will **decrease**. The larger, expanded protein will experience more drag from the solvent and diffuse more slowly.\n\nIn summary, the modification leads to: increased steric exclusion, an increase in $R_g$, a decrease in native contacts, and a decrease in $D$.\n\n**Evaluation of Options**\n\n**A. The effective van der Waals exclusion around backbone carbons increases, shifting preferred interatomic separations outward; the average radius of gyration $R_g$ increases slightly and the number of native intramolecular contacts decreases, and the translational diffusion coefficient $D$ decreases.**\nThis statement aligns perfectly with the derivation. The increase in $\\sigma$ increases van der Waals exclusion and shifts preferred distances outward. This causes the protein to expand ($R_g$ increases), which disrupts native packing (contacts decrease). The larger size leads to slower diffusion ($D$ decreases).\n**Verdict: Correct.**\n\n**B. The outward shift of the Lennard–Jones minimum increases the attractive range and stabilizes tighter packing; the average radius of gyration $R_g$ decreases and the translational diffusion coefficient $D$ increases.**\nThis statement is incorrect. While the attractive *range* technically extends further, the dominant effect of increasing $\\sigma$ is the much stronger repulsion at shorter distances, which *destabilizes* tight packing. This leads to an increase, not a decrease, in $R_g$. An increased $R_g$ corresponds to a decrease, not an increase, in $D$.\n**Verdict: Incorrect.**\n\n**C. No appreciable change is expected because only $\\alpha$-carbons are modified and they do not control packing; both packing metrics and the translational diffusion coefficient $D$ remain unchanged.**\nThis statement is based on a false premise. The backbone $C_\\alpha$ atoms are fundamental to defining the protein's fold and overall packing. Modifying their effective size is a significant perturbation that will cause appreciable changes in both structure and dynamics.\n**Verdict: Incorrect.**\n\n**D. The increase in Lennard–Jones $\\sigma$ effectively increases the protein’s mass, which reduces root-mean-square fluctuations and leaves the radius of gyration $R_g$ unchanged.**\nThis statement confuses the LJ size parameter $\\sigma$ with mass. These are distinct physical quantities. Increasing $\\sigma$ does not change the mass of any atom in the simulation. The subsequent conclusions based on this flawed premise are therefore invalid. Furthermore, $R_g$ is expected to change, not remain unchanged.\n**Verdict: Incorrect.**", "answer": "$$\\boxed{A}$$", "id": "2417106"}, {"introduction": "A correctly implemented MD simulation guarantees that it will sample states according to their thermodynamic probabilities, but it makes no such guarantee about the physical realism of the kinetic pathways it explores. This is a critical distinction that can lead to significant artifacts. This thought experiment [@problem_id:2417122] presents a case study in which an unphysically high friction coefficient, $\\gamma$, in a Langevin thermostat disproportionately slows down different types of molecular motion. Your task is to diagnose how this parameter choice could bias the observed binding mechanism, leading a researcher to an incorrect conclusion, and to propose a sound methodological remedy.", "problem": "A protein receptor can adopt two interconverting conformational states, an open state $P_{\\mathrm{O}}$ that presents a fully formed binding pocket and a closed state $P_{\\mathrm{C}}$ in which the pocket is occluded. In the absence of ligand, $P_{\\mathrm{O}} \\rightleftharpoons P_{\\mathrm{C}}$ transitions occur on a submicrosecond time scale at temperature $T=300\\ \\mathrm{K}$. A small ligand $L$ associates from bulk solution. A researcher simulates the binding process using Molecular Dynamics (MD) with a Langevin thermostat at friction coefficient $\\gamma=100\\ \\mathrm{ps}^{-1}$ in implicit solvent, an integration time step of $2\\ \\mathrm{fs}$, and observes multiple binding events in which $L$ first forms a loose, nonspecific contact with $P_{\\mathrm{C}}$, followed by a slower conformational change of the protein into $P_{\\mathrm{O}}$ while $L$ remains associated. Based on these trajectories, the researcher concludes that the binding mechanism is induced fit (that is, conformational change after ligand association). No experimental kinetic data are available for this system. All simulations are run long enough to converge the equilibrium populations of bound and unbound states.\n\nWhich option best explains why this conclusion could be incorrect due to the choice of $\\gamma$, and identifies an appropriate methodological change to test the mechanism inference?\n\nA. Very large $\\gamma$ drives the overdamped regime that disproportionately suppresses protein conformational transition rates relative to ligand translational diffusion, biasing the time order toward apparent induced fit; the remedy is to reduce $\\gamma$ to a physically realistic range (for example, $\\gamma\\sim 1\\ \\mathrm{ps}^{-1}$), verify that equilibrium statistics are unchanged, and compare the inferred sequence of events and effective diffusion against known physical values.\n\nB. Very large $\\gamma$ alters the canonical equilibrium distribution, increasing the population of $P_{\\mathrm{C}}$ and thus enforcing induced fit; the remedy is to run longer at the same $\\gamma$ until the equilibrium shifts back.\n\nC. Very large $\\gamma$ violates the fluctuation–dissipation relationship and breaks detailed balance, introducing a nonphysical drift that favors post-association conformational change; the remedy is to set the random force to zero while keeping the friction term.\n\nD. Very large $\\gamma$ improves numerical stability and accuracy of barrier crossing estimates, so the observed induced fit is more reliable than at lower $\\gamma$; the remedy is to further increase the time step to accelerate sampling without changing $\\gamma$.", "solution": "The problem statement describes a computational experiment designed to elucidate the binding mechanism of a ligand $L$ to a protein receptor that exists in two conformations, $P_{\\mathrm{O}}$ (open) and $P_{\\mathrm{C}}$ (closed). The validity of the problem setup must be established before proceeding.\n\n**Problem Validation**\n\n**Step 1: Extracted Givens**\n- System: Protein with states $P_{\\mathrm{O}}$ and $P_{\\mathrm{C}}$, and a ligand $L$.\n- Apo-protein equilibrium: $P_{\\mathrm{O}} \\rightleftharpoons P_{\\mathrm{C}}$.\n- Apo-protein kinetics: Transitions occur on a submicrosecond time scale.\n- Simulation Temperature: $T=300\\ \\mathrm{K}$.\n- Simulation Method: Molecular Dynamics (MD) with a Langevin thermostat.\n- Solvent Model: Implicit solvent.\n- Friction Coefficient: $\\gamma=100\\ \\mathrm{ps}^{-1}$.\n- Integration Time Step: $2\\ \\mathrm{fs}$.\n- Simulation Observation: Ligand $L$ associates with $P_{\\mathrm{C}}$, followed by protein conformational change to $P_{\\mathrm{O}}$.\n- Researcher's Conclusion: The mechanism is induced fit.\n- Data Constraint: No experimental kinetic data are available.\n- Convergence: Simulations are sufficiently long to converge equilibrium populations.\n\n**Step 2: Validation Analysis**\nThe problem is scientifically grounded. It presents a standard scenario in computational biology concerning the study of protein-ligand binding mechanisms. The concepts of induced fit versus conformational selection are central to this field. The use of molecular dynamics with a Langevin thermostat is a well-established technique. The core of the problem lies in the critical evaluation of a specific simulation parameter, the friction coefficient $\\gamma$, and its impact on kinetic pathways. This is a non-trivial and important methodological consideration in MD simulations. The value of $\\gamma=100\\ \\mathrm{ps}^{-1}$ is specified, which is known to be significantly higher than the friction corresponding to liquid water (typically modeled with $\\gamma \\approx 1\\ \\mathrm{ps}^{-1}$). The question of how such a parameter choice might create artifacts in the observed dynamics is a valid and well-posed scientific question. The problem statement is self-contained, objective, and does not violate any fundamental principles of physics or chemistry. It describes a realistic, albeit potentially flawed, computational study.\n\n**Step 3: Verdict**\nThe problem statement is valid. I will now proceed to the solution.\n\n**Derivation of Solution**\n\nThe objective is to analyze why a conclusion of an \"induced fit\" mechanism, based on MD simulations with a high friction coefficient $\\gamma=100\\ \\mathrm{ps}^{-1}$, might be erroneous.\n\nThe dynamics of the system are governed by the Langevin equation of motion for each atom $i$:\n$$ m_i \\frac{d^2\\mathbf{r}_i}{dt^2} = \\mathbf{F}_i(\\{\\mathbf{r}_j\\}) - \\gamma m_i \\frac{d\\mathbf{r}_i}{dt} + \\mathbf{R}_i(t) $$\nHere, $\\mathbf{F}_i$ is the conservative force derived from the potential energy function, the second term is the frictional drag, and $\\mathbf{R}_i(t)$ is a stochastic force representing random collisions with the implicit solvent. The friction and random forces are linked by the fluctuation-dissipation theorem, which ensures that for any positive $\\gamma$, the system will correctly sample the canonical (NVT) ensemble, provided the simulation is run to convergence. The problem states that equilibrium populations have converged, meaning the thermodynamics (i.e., the relative free energies of the states) are correctly sampled. The researcher's conclusion, however, is about the *mechanism*, which is a statement about kinetics and reaction pathways, not thermodynamics.\n\nThe friction coefficient $\\gamma$ critically determines the system's dynamics. A very large value of $\\gamma$, such as $\\gamma=100\\ \\mathrm{ps}^{-1}$, pushes the system into the high-friction or \"overdamped\" regime. In this regime, inertial effects are negligible, and motion is dominated by the balance of systematic forces and friction.\n\nThe effect of high friction on different types of motion is key.\n1.  **Ligand Diffusion:** The translational diffusion of the ligand $L$ is a random walk process. Its diffusion coefficient $D$ is inversely related to the friction coefficient, $D \\propto 1/\\gamma$. A high $\\gamma$ slows down the ligand's approach to the protein.\n2.  **Protein Conformational Change:** The transition $P_{\\mathrm{C}} \\rightleftharpoons P_{\\mathrm{O}}$ is a large-scale, collective motion that involves crossing a significant energy barrier. According to Kramers' theory for barrier crossing in the overdamped limit, the rate constant $k_{conf}$ for this process is also inversely proportional to the friction, $k_{conf} \\propto 1/\\gamma$.\n\nWhile both processes are slowed, they are not necessarily slowed to the same extent. Large-scale conformational changes in a macromolecule are often much more sensitive to an increase in friction than the simple translational diffusion of a small molecule. A high, unphysical viscosity can disproportionately suppress the slow, collective modes of the protein. The apo-protein's intrinsic conformational dynamics ($P_{\\mathrm{C}} \\rightleftharpoons P_{\\mathrm{O}}$), which occur on a sub-microsecond timescale in reality, are artificially slowed by orders of magnitude.\n\nThis creates a kinetic artifact. The simulation effectively \"freezes\" the protein's natural conformational fluctuations. The ligand, though also slowed, diffuses and encounters a protein that appears static on the timescale of its approach. If the $P_{\\mathrm{C}}$ state is the dominant conformation at equilibrium (or simply the first one the ligand encounters), the ligand will associate with it. The subsequent, much slower, transition of the $P_{\\mathrm{C}}L$ complex to the final $P_{\\mathrm{O}}L$ state is then observed. This sequence of events—ligand association followed by conformational change—is the definition of induced fit.\n\nHowever, this observed pathway may not be the true physical one. In reality, with a physical (low) friction, the protein might rapidly fluctuate between $P_{\\mathrm{C}}$ and $P_{\\mathrm{O}}$. The ligand might wait in solution until a binding-competent $P_{\\mathrm{O}}$ state presents itself, and then bind rapidly. This would be a \"conformational selection\" mechanism. The high-friction simulation has kinetically blocked this pathway by making the $P_{\\mathrm{C}} \\to P_{\\mathrm{O}}$ conversion artificially slow, thus biasing the result toward induced fit.\n\nThe correct methodological approach to test this hypothesis is to reduce $\\gamma$ to a physically plausible value (e.g., $\\gamma \\approx 1-5\\ \\mathrm{ps}^{-1}$, which better represents the viscosity of water) and repeat the simulations. If the binding mechanism changes (e.g., conformational selection events are now observed), then the original conclusion was indeed an artifact of the simulation parameters. As a control, one must verify that the equilibrium populations of all states remain unchanged, as they are properties of the force field and temperature, not the kinetic parameter $\\gamma$.\n\n**Evaluation of Options**\n\n**A. Very large $\\gamma$ drives the overdamped regime that disproportionately suppresses protein conformational transition rates relative to ligand translational diffusion, biasing the time order toward apparent induced fit; the remedy is to reduce $\\gamma$ to a physically realistic range (for example, $\\gamma\\sim 1\\ \\mathrm{ps}^{-1}$), verify that equilibrium statistics are unchanged, and compare the inferred sequence of events and effective diffusion against known physical values.**\nThis option correctly identifies that high $\\gamma$ leads to the overdamped regime. It correctly posits that this disproportionately suppresses the slow, collective protein conformational changes relative to other motions, leading to a kinetic bias that makes the induced fit pathway appear dominant. The proposed remedy is scientifically sound: reduce $\\gamma$ to a physical value, re-run the simulations to observe the kinetics, and use the equilibrium properties as a sanity check. This is the correct analysis. **Correct**.\n\n**B. Very large $\\gamma$ alters the canonical equilibrium distribution, increasing the population of $P_{\\mathrm{C}}$ and thus enforcing induced fit; the remedy is to run longer at the same $\\gamma$ until the equilibrium shifts back.**\nThis statement is fundamentally incorrect. A correctly implemented Langevin thermostat ensures sampling of the canonical equilibrium distribution regardless of the value of $\\gamma > 0$. The friction coefficient affects kinetics, not the equilibrium state probabilities, which are determined by the potential energy function. The problem also explicitly states that equilibrium populations have converged. The remedy is nonsensical for these reasons. **Incorrect**.\n\n**C. Very large $\\gamma$ violates the fluctuation–dissipation relationship and breaks detailed balance, introducing a nonphysical drift that favors post-association conformational change; the remedy is to set the random force to zero while keeping the friction term.**\nThe choice of a large $\\gamma$ does not in itself violate the fluctuation-dissipation theorem or detailed balance; these are properties of the integration algorithm. The artifact is kinetic, not a fundamental breakdown of the thermostat's statistical mechanical foundation. The proposed remedy is disastrous: removing the random force while keeping friction eliminates the heat source, causing the system to cool to absolute zero ($T=0\\ \\mathrm{K}$) and cease all motion. This would not be a simulation at $T=300\\ \\mathrm{K}$. **Incorrect**.\n\n**D. Very large $\\gamma$ improves numerical stability and accuracy of barrier crossing estimates, so the observed induced fit is more reliable than at lower $\\gamma$; the remedy is to further increase the time step to accelerate sampling without changing $\\gamma$.**\nThis statement is dangerously misleading. While high friction might enhance numerical stability for some integrators, it fundamentally distorts the physical kinetics of barrier crossing. An artifactual result is, by definition, not \"more reliable\". The goal is physical accuracy, not mere numerical stability. The remedy of increasing the time step is also flawed; a $2\\ \\mathrm{fs}$ time step is already near the limit for many biomolecular systems, and increasing it further risks introducing significant integration errors, compounding the existing physical inaccuracy. **Incorrect**.", "answer": "$$\\boxed{A}$$", "id": "2417122"}, {"introduction": "One of the great powers of molecular dynamics is its ability to act as a \"computational microscope\" to calculate macroscopic material properties from the underlying atomic interactions. This practice [@problem_id:2417123] moves from conceptual understanding to quantitative analysis by tasking you with calculating the shear viscosity of water from raw simulation data. By applying the fundamental definition of viscosity, $\\sigma_{xz} = \\eta \\, \\partial v_x / \\partial z$, to data from a non-equilibrium simulation, you will engage in the authentic work of a computational scientist: processing simulation output to extract a physically meaningful and measurable quantity.", "problem": "You are tasked with designing a non-equilibrium molecular dynamics simulation to calculate the shear viscosity of the transferable intermolecular potential three point (TIP3P) water model. The fundamental definition of shear viscosity is that for a homogeneous steady shear flow, the shear stress component $\\sigma_{xz}$ is proportional to the velocity gradient $\\partial v_x / \\partial z$ through the relation $\\sigma_{xz} = \\eta \\, \\partial v_x / \\partial z$, where $\\eta$ is the shear viscosity. In a non-equilibrium molecular dynamics steady-state simulation of TIP3P water under uniform shear using periodic boundary conditions, a slab-averaged velocity profile $v_x(z)$ is measured along the gradient direction $z$, together with the time-averaged microscopic shear stress $\\sigma_{xz}$. The system has box length $L_z$ along $z$.\n\nFor each test case described below, assume that the steady-state shear rate is the unique constant $a$ such that the linear function $v_x(z) = a z + b$ minimizes the sum of squared deviations from the provided data points $(z_i, v_{x,i})$ restricted to the interior interval $z \\in [\\alpha L_z, (1-\\alpha)L_z]$, where $\\alpha$ is given for each case. Use this $a$ as the shear rate $\\partial v_x / \\partial z$ to compute $\\eta$ from the defining relation. All positions $z_i$ and $L_z$ are given in nanometers and must be converted to meters. All velocities $v_{x,i}$ are given in meters per second. All stresses $\\sigma_{xz}$ are given in Pascals. Express the final viscosity $\\eta$ in millipascal-seconds (mPa·s), rounded to three decimal places.\n\nTest suite (each case provides $L_z$, $\\alpha$, $\\sigma_{xz}$, and the list of $(z_i, v_{x,i})$ pairs):\n\n- Case 1:\n  - $L_z = 10$ nanometers\n  - $\\alpha = 0.2$\n  - $\\sigma_{xz} = 9.0 \\times 10^{6}$ Pascals\n  - $(z_i \\text{ in nanometers}, v_{x,i} \\text{ in meters per second})$ list:\n    [$(0, -50)$, $(1, -40)$, $(2, -30)$, $(3, -20)$, $(4, -10)$, $(5, 0)$, $(6, 10)$, $(7, 20)$, $(8, 30)$, $(9, 40)$, $(10, 50)$]\n- Case 2:\n  - $L_z = 8$ nanometers\n  - $\\alpha = 0.25$\n  - $\\sigma_{xz} = -4.0 \\times 10^{6}$ Pascals\n  - $(z_i \\text{ in nanometers}, v_{x,i} \\text{ in meters per second})$ list:\n    [$(0, 20.2)$, $(1, 14.9)$, $(2, 10.3)$, $(3, 4.8)$, $(4, 0.0)$, $(5, -4.9)$, $(6, -10.3)$, $(7, -14.8)$, $(8, -20.1)$]\n- Case 3:\n  - $L_z = 12$ nanometers\n  - $\\alpha = 0.2$\n  - $\\sigma_{xz} = 1.9 \\times 10^{5}$ Pascals\n  - $(z_i \\text{ in nanometers}, v_{x,i} \\text{ in meters per second})$ list:\n    [$(0, -1.2)$, $(2, -0.8)$, $(4, -0.4)$, $(6, 0.0)$, $(8, 0.4)$, $(10, 0.8)$, $(12, 1.2)$]\n- Case 4:\n  - $L_z = 10$ nanometers\n  - $\\alpha = 0.3$\n  - $\\sigma_{xz} = 1.26 \\times 10^{7}$ Pascals\n  - $(z_i \\text{ in nanometers}, v_{x,i} \\text{ in meters per second})$ list:\n    [$(0, -52)$, $(1, -44)$, $(2, -36)$, $(3, -24)$, $(4, -12)$, $(5, 0)$, $(6, 12)$, $(7, 24)$, $(8, 36)$, $(9, 44)$, $(10, 52)$]\n\nYour program must, for each case, compute the shear viscosity $\\eta$ in millipascal-seconds using only the fundamental relation $\\sigma_{xz} = \\eta \\, \\partial v_x / \\partial z$ and the definition of the shear rate as the slope $a$ of the best linear approximation of $v_x(z)$ on the specified interior interval. All calculations must use the International System of Units (SI). The final output must be a single line containing a comma-separated list of the four viscosities in millipascal-seconds, rounded to three decimal places, enclosed in square brackets, for example $[x_1,x_2,x_3,x_4]$.", "solution": "The governing principle is Newton’s law of viscosity for simple shear, which states that the shear stress $\\sigma_{xz}$ is proportional to the velocity gradient $\\partial v_x / \\partial z$ through the proportionality constant $\\eta$, the shear viscosity. Mathematically, $\\sigma_{xz} = \\eta \\, \\partial v_x / \\partial z$. Therefore, once the steady-state shear rate $\\partial v_x / \\partial z$ is known, the viscosity can be obtained as $\\eta = \\sigma_{xz} / (\\partial v_x / \\partial z)$.\n\nIn a non-equilibrium molecular dynamics steady shear simulation of transferable intermolecular potential three point (TIP3P) water, the measured slab-averaged profile $v_x(z)$ versus $z$ should be approximately linear in the bulk interior. To mitigate boundary-layer distortions near the periodic images or walls, we restrict attention to an interior fraction $z \\in [\\alpha L_z, (1-\\alpha)L_z]$, with case-specific $\\alpha$. The steady shear rate is defined here as the slope $a$ of the linear function $v_x(z) = a z + b$ that minimizes the sum of squared deviations from the provided data points within the interior segment. This is the unique least-squares best-fit slope,\n$$\na \\;=\\; \\frac{\\sum_{i} \\left(z_i - \\bar{z}\\right)\\left(v_{x,i} - \\bar{v}\\right)}{\\sum_{i} \\left(z_i - \\bar{z}\\right)^2},\n$$\nwhere the sums are taken over all points with $z_i \\in [\\alpha L_z, (1-\\alpha)L_z]$, $\\bar{z}$ is the mean of these $z_i$, and $\\bar{v}$ is the mean of the corresponding $v_{x,i}$. All $z_i$ and $L_z$ must be converted from nanometers to meters before computing $a$, so that $a$ has units of inverse seconds. With $a$ in $\\mathrm{s}^{-1}$ and $\\sigma_{xz}$ in Pascals, the ratio $\\eta = \\sigma_{xz}/a$ yields viscosity in Pascal-seconds, which is converted to millipascal-seconds by multiplying by $1000$.\n\nApplying this to each case:\n\n- Case 1: The interior is $z \\in [\\alpha L_z, (1-\\alpha)L_z] = [0.2 \\times 10, (1-0.2) \\times 10]$ nanometers $= [2, 8]$ nanometers. The listed profile is exactly linear with slope $10$ meters per second per nanometer in the interior. Converting nanometers to meters gives $a = 10 / (10^{-9}) = 1.0 \\times 10^{10}$ seconds$^{-1}$. Therefore,\n$$\n\\eta = \\frac{9.0 \\times 10^{6}}{1.0 \\times 10^{10}} = 9.0 \\times 10^{-4} \\text{ Pa·s} = 0.900 \\text{ mPa·s}.\n$$\n\n- Case 2: The interior is $z \\in [0.25 \\times 8, (1-0.25) \\times 8]$ nanometers $= [2, 6]$ nanometers. Using the provided five interior points and the least-squares formula, one obtains a slope approximately $a \\approx -5.09 \\times 10^{9}$ seconds$^{-1}$ (the negative sign reflects the negative gradient). With $\\sigma_{xz} = -4.0 \\times 10^{6}$ Pascals,\n$$\n\\eta = \\frac{-4.0 \\times 10^{6}}{-5.09 \\times 10^{9}} \\approx 7.861 \\times 10^{-4} \\text{ Pa·s} \\approx 0.786 \\text{ mPa·s}.\n$$\n\n- Case 3: The interior is $z \\in [0.2 \\times 12, (1-0.2) \\times 12]$ nanometers $= [2.4, 9.6]$ nanometers. The interior points are at $z=4, 6, \\text{ and } 8$ nanometers. The least-squares slope is exactly $0.2$ meters per second per nanometer, so $a = 0.2 / (10^{-9}) = 2.0 \\times 10^{8}$ seconds$^{-1}$. With $\\sigma_{xz} = 1.9 \\times 10^{5}$ Pascals,\n$$\n\\eta = \\frac{1.9 \\times 10^{5}}{2.0 \\times 10^{8}} = 9.5 \\times 10^{-4} \\text{ Pa·s} = 0.950 \\text{ mPa·s}.\n$$\n\n- Case 4: The interior is $z \\in [0.3 \\times 10, (1-0.3) \\times 10]$ nanometers $= [3, 7]$ nanometers. The interior points are linear with slope $12$ meters per second per nanometer, giving $a = 12 / (10^{-9}) = 1.2 \\times 10^{10}$ seconds$^{-1}$. With $\\sigma_{xz} = 1.26 \\times 10^{7}$ Pascals,\n$$\n\\eta = \\frac{1.26 \\times 10^{7}}{1.2 \\times 10^{10}} = 1.05 \\times 10^{-3} \\text{ Pa·s} = 1.050 \\text{ mPa·s}.\n$$\n\nCollecting the results in millipascal-seconds and rounding to three decimal places yields the list $[0.900, 0.786, 0.950, 1.050]$, which matches the requirements for the final output format.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef best_fit_slope_in_interval(z_nm, v_ms, Lz_nm, alpha):\n    \"\"\"\n    Compute the least-squares slope a of v(z) = a z + b over the interior\n    interval [alpha*Lz, (1-alpha)*Lz], converting z from nm to m so that\n    a has units of 1/s.\n    \"\"\"\n    z_nm = np.asarray(z_nm, dtype=float)\n    v_ms = np.asarray(v_ms, dtype=float)\n    # Select interior points\n    z_min = alpha * Lz_nm\n    z_max = (1.0 - alpha) * Lz_nm\n    mask = (z_nm >= z_min) & (z_nm <= z_max)\n    z_sel_nm = z_nm[mask]\n    v_sel = v_ms[mask]\n    # Convert nm to m\n    z_sel_m = z_sel_nm * 1e-9\n    # Least-squares slope\n    z_mean = np.mean(z_sel_m)\n    v_mean = np.mean(v_sel)\n    dz = z_sel_m - z_mean\n    dv = v_sel - v_mean\n    denom = np.sum(dz * dz)\n    if denom == 0.0:\n        raise ValueError(\"Insufficient variation in z to determine slope.\")\n    a = np.sum(dz * dv) / denom  # units: (m/s)/m = 1/s\n    return a\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each case: (Lz_nm, alpha, sigma_Pa, list_of_pairs (z_nm, v_ms))\n    test_cases = [\n        (\n            10.0,\n            0.2,\n            9.0e6,\n            [\n                (0.0, -50.0), (1.0, -40.0), (2.0, -30.0), (3.0, -20.0), (4.0, -10.0),\n                (5.0, 0.0), (6.0, 10.0), (7.0, 20.0), (8.0, 30.0), (9.0, 40.0), (10.0, 50.0)\n            ]\n        ),\n        (\n            8.0,\n            0.25,\n            -4.0e6,\n            [\n                (0.0, 20.2), (1.0, 14.9), (2.0, 10.3), (3.0, 4.8), (4.0, 0.0),\n                (5.0, -4.9), (6.0, -10.3), (7.0, -14.8), (8.0, -20.1)\n            ]\n        ),\n        (\n            12.0,\n            0.2,\n            1.9e5,\n            [\n                (0.0, -1.2), (2.0, -0.8), (4.0, -0.4), (6.0, 0.0),\n                (8.0, 0.4), (10.0, 0.8), (12.0, 1.2)\n            ]\n        ),\n        (\n            10.0,\n            0.3,\n            1.26e7,\n            [\n                (0.0, -52.0), (1.0, -44.0), (2.0, -36.0), (3.0, -24.0), (4.0, -12.0),\n                (5.0, 0.0), (6.0, 12.0), (7.0, 24.0), (8.0, 36.0), (9.0, 44.0), (10.0, 52.0)\n            ]\n        ),\n    ]\n\n    results = []\n    for Lz_nm, alpha, sigma_Pa, pairs in test_cases:\n        z_nm = [p[0] for p in pairs]\n        v_ms = [p[1] for p in pairs]\n        a = best_fit_slope_in_interval(z_nm, v_ms, Lz_nm, alpha)  # 1/s\n        eta_Pa_s = sigma_Pa / a  # Pa*s\n        eta_mPa_s = eta_Pa_s * 1e3  # mPa*s\n        results.append(eta_mPa_s)\n\n    # Round to three decimal places and format as required.\n    formatted = [f\"{x:.3f}\" for x in results]\n    print(f\"[{','.join(formatted)}]\")\n\nsolve()\n```", "id": "2417123"}]}