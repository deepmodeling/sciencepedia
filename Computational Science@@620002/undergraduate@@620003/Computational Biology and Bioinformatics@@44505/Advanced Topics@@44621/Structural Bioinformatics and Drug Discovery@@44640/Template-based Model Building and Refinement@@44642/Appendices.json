{"hands_on_practices": [{"introduction": "Template-based modeling requires more than simply copying coordinates; it demands an understanding of how sequence differences impact structure. This exercise challenges you to apply your knowledge of amino acid stereochemistry to predict a common structural distortion caused by a single, critical substitution. Developing this structural intuition is essential for critically evaluating and refining computer-generated models [@problem_id:2434238].", "problem": "You are performing template-based modeling of a protein using a high-identity template. In the template, a residue in the middle of a well-formed alpha-helix is glycine, but in the target sequence, the aligned residue is proline. You build an initial model by copying the template backbone coordinates and mutating side chains, followed by restrained refinement. Considering the physical chemistry of the polypeptide backbone and canonical alpha-helix geometry, predict the most likely local structural distortion that will arise specifically due to this glycine-to-proline substitution in the helical core after refinement.\n\nChoose the single best prediction.\n\nA. A localized kink or partial break in the helix centered at the proline, with loss of the backbone hydrogen bond that would have been donated by residue $i$ to residue $i-4$, leading to a bend of the helical axis by roughly $10$–$30^{\\circ}$ and possible exposure of the carbonyl of residue $i-4$.\n\nB. A tighter, more regular alpha-helix with decreased radius and increased hydrogen bond density, because proline enforces helical dihedral angles and improves packing relative to glycine.\n\nC. No appreciable change; both glycine and proline are small residues, so the helix remains straight and fully hydrogen-bonded upon refinement.\n\nD. A conversion of the helical segment into a beta-hairpin, because proline disfavors alpha-helical conformations and promotes beta-strand formation, forcing a secondary structure switch in the middle of the segment.", "solution": "The problem statement describes a standard scenario in comparative protein modeling. We must validate its scientific and logical integrity before proceeding.\n\n### Step 1: Extract Givens\n- **Modeling Task**: Template-based modeling of a protein.\n- **Template**: High-identity template protein structure is available.\n- **Sequence Alignment**: A residue in the target sequence is proline (Pro). The aligned residue in the template structure is glycine (Gly).\n- **Location**: The substitution occurs in the middle of a well-formed alpha-helix.\n- **Modeling Protocol**: An initial model is built by copying the backbone coordinates from the template. Side chains are then mutated (Gly to Pro). The model is subsequently subjected to restrained refinement.\n- **Question**: Predict the most likely local structural distortion caused by the Glycine-to-Proline substitution in the core of an alpha-helix after refinement.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is subjected to validation against established principles of biochemistry and structural biology.\n\n1.  **Scientific Grounding**: The problem is grounded in the fundamental principles of protein structure. The alpha-helix is a canonical secondary structure element. The properties of glycine and proline, particularly their distinct effects on polypeptide backbone conformation, are well-characterized and central to protein structural analysis. The process described—template-based modeling followed by refinement—is a standard workflow in computational biology. The scenario is scientifically realistic and testable.\n2.  **Well-Posedness**: The problem is well-posed. It provides sufficient context (high-identity template, alpha-helix core) and specifies a single, well-defined perturbation (Gly $\\to$ Pro substitution). The question asks for the \"most likely\" outcome, which implies a prediction based on the dominant energetic and stereochemical consequences, leading to a unique and meaningful answer.\n3.  **Objectivity**: The language is objective and precise. Terms like \"alpha-helix,\" \"backbone coordinates,\" \"refinement,\" \"glycine,\" and \"proline\" have unambiguous scientific definitions.\n\nThe problem statement contains no scientific or factual unsoundness, is formalizable, complete, and well-structured. It does not violate any of the criteria for an invalid problem.\n\n### Step 3: Verdict and Action\nThe problem is **valid**. A solution will be derived from first principles.\n\n### Derivation\nThe core of this problem lies in understanding the unique stereochemical properties of proline and contrasting them with glycine in the context of an alpha-helical secondary structure.\n\n1.  **Canonical Alpha-Helix Structure**: A right-handed alpha-helix is stabilized by a regular pattern of backbone hydrogen bonds. The carbonyl oxygen ($C=O$) of residue $i$ acts as a hydrogen bond acceptor for the amide proton ($N-H$) of residue $i+4$. This arrangement requires the backbone dihedral angles, $\\phi$ and $\\psi$, to be in a specific region of the Ramachandran plot, nominally around $\\phi \\approx -60^{\\circ}$ and $\\psi \\approx -40^{\\circ}$.\n\n2.  **Glycine in an Alpha-Helix**: Glycine, with a single hydrogen atom as its side chain, possesses the highest conformational flexibility of all $20$ proteinogenic amino acids. It can readily adopt the $\\phi$/$\\psi$ angles required for an alpha-helix. Its small size prevents steric clashes. While its high flexibility can sometimes lead to it being classified as a \"helix breaker\" because it can easily adopt non-helical conformations, it is frequently observed within stable alpha-helices. Its presence in the template's helix is unremarkable.\n\n3.  **Proline and its Consequences**: Proline is unique. Its side chain is a five-membered ring formed by a covalent bond between its side chain $\\delta$-carbon and its backbone $\\alpha$-nitrogen. This has two critical consequences for its inclusion in an alpha-helix at a position $i$:\n    *   **Backbone Dihedral Angle $\\phi$**: The cyclic structure rigidly constrains the backbone $\\phi$ angle to a narrow range, typically around $-60^{\\circ}$ to $-75^{\\circ}$. This value is, in fact, compatible with the $\\phi$ angle of a canonical alpha-helix. Therefore, restriction of the $\\phi$ angle is not the primary source of disruption.\n    *   **Backbone Amide Proton**: The crucial feature is that the backbone nitrogen of proline (when not at the N-terminus of a polypeptide) is a secondary amine. It has no attached hydrogen atom. Consequently, proline at position $i$ **cannot act as a hydrogen bond donor**.\n\n4.  **The Glycine-to-Proline Substitution**: When glycine at position $i$ is substituted with proline, the following occurs:\n    *   The hydrogen bond between the amide proton of residue $i$ and the carbonyl oxygen of residue $i-4$ is irrevocably broken. The template model, where this bond might have been implicitly present for glycine, loses this stabilizing interaction upon mutation to proline.\n    *   The carbonyl oxygen of residue $i-4$ is now an unsatisfied hydrogen bond acceptor within the hydrophobic core of the helix.\n    *   The loss of this single hydrogen bond is energetically significant enough to destabilize the local helical structure.\n    *   To relieve the resulting strain and potential unfavorable interaction of the unsatisfied carbonyl, the polypeptide chain distorts. The most common and lowest-energy distortion is a \"kink\" or a bend in the helical axis, centered at or near the proline residue.\n    *   Published structural analyses and molecular dynamics simulations consistently show that proline induces a bend in an alpha-helix with an average angle of approximately $20^{\\circ}$ to $30^{\\circ}$. This bending exposes the previously buried carbonyl oxygen of residue $i-4$, allowing it to potentially interact with solvent or other polar groups.\n\nBased on this analysis, the substitution introduces a definitive structural defect characterized by a broken hydrogen bond and a resulting kink in the helix.\n\n### Option-by-Option Analysis\n\n**A. A localized kink or partial break in the helix centered at the proline, with loss of the backbone hydrogen bond that would have been donated by residue $i$ to residue $i-4$, leading to a bend of the helical axis by roughly $10$–$30^{\\circ}$ and possible exposure of the carbonyl of residue $i-4$.**\nThis option provides a precise and complete description of the expected outcome. It correctly identifies the loss of the $i \\to i-4$ hydrogen bond, the resulting kink, the accepted range for the bend angle ($10$–$30^{\\circ}$), and the consequence for the carbonyl of residue $i-4$. This aligns perfectly with our derivation from first principles.\n**Verdict: Correct**\n\n**B. A tighter, more regular alpha-helix with decreased radius and increased hydrogen bond density, because proline enforces helical dihedral angles and improves packing relative to glycine.**\nThis statement is fundamentally incorrect. Proline *decreases* hydrogen bond density by one bond. It *disrupts* the helix, it does not make it tighter or more regular. The loss of a key stabilizing interaction leads to destabilization, not improvement.\n**Verdict: Incorrect**\n\n**C. No appreciable change; both glycine and proline are small residues, so the helix remains straight and fully hydrogen-bonded upon refinement.**\nThis is incorrect on multiple counts. First, while glycine is the smallest residue, proline is conformationally restricted and sterically bulky due to its ring structure; they are not comparable in terms of their effect on the backbone. Second, and most critically, the helix cannot remain \"fully hydrogen-bonded\" because the proline at position $i$ lacks the amide proton to form a hydrogen bond with the carbonyl of residue $i-4$. An appreciable change is guaranteed.\n**Verdict: Incorrect**\n\n**D. A conversion of the helical segment into a beta-hairpin, because proline disfavors alpha-helical conformations and promotes beta-strand formation, forcing a secondary structure switch in the middle of the segment.**\nThis proposes an overly drastic structural rearrangement. While proline is a known \"helix breaker,\" a single substitution within an otherwise stable helix typically results in a *local* perturbation (a kink). A complete conversion to a beta-hairpin is an extensive conformational change that is energetically much more costly and thus far less likely. Proline is frequently found in beta-turns, which connect strands, but it is not a strong promoter of beta-strand conformation itself. The principle of minimal change dictates that a local kink is the most probable outcome.\n**Verdict: Incorrect**", "answer": "$$\\boxed{A}$$", "id": "2434238"}, {"introduction": "Once a model is generated, we need objective ways to measure its quality. This practice introduces the Root-Mean-Square Deviation ($RMSD$), a fundamental metric for quantifying the structural difference between a model and its template. By focusing the calculation on the functionally critical active site, you will learn to assess local accuracy, which is often more relevant for functional inference than global similarity [@problem_id:2434226].", "problem": "A template-based homology model has been built for an enzyme using a single template. To assess local accuracy relevant to functional inference, compute the root-mean-square deviation (RMSD) between the model and the template restricted to the C-alpha atoms of the annotated active site residues. The model and template have already been brought into a common coordinate frame by optimal rigid-body superposition of their full backbones. Use only the C-alpha coordinates given below.\n\nActive site residues (by template numbering), with three-dimensional Cartesian coordinates in Ångström (Å):\n\n- Residue $102$: template $\\left(12.432,\\, 5.781,\\, 3.227\\right)$ Å; model $\\left(12.646,\\, 5.476,\\, 3.347\\right)$ Å\n- Residue $105$: template $\\left(10.115,\\, 7.946,\\, 2.018\\right)$ Å; model $\\left(9.664,\\, 8.308,\\, 1.797\\right)$ Å\n- Residue $136$: template $\\left(8.883,\\, 6.102,\\, 5.337\\right)$ Å; model $\\left(9.216,\\, 5.924,\\, 5.746\\right)$ Å\n- Residue $164$: template $\\left(6.552,\\, 4.218,\\, 4.771\\right)$ Å; model $\\left(6.425,\\, 4.313,\\, 4.259\\right)$ Å\n- Residue $189$: template $\\left(9.764,\\, 2.937,\\, 6.503\\right)$ Å; model $\\left(10.053,\\, 2.596,\\, 6.676\\right)$ Å\n\nCompute the RMSD using only these five C-alpha atom pairs. Round your answer to four significant figures and express the result in Ångström (Å). The final answer must be a single real-valued number.", "solution": "The problem statement as presented is scientifically grounded, well-posed, and objective. It presents a standard calculation in computational structural biology—the computation of the root-mean-square deviation (RMSD) for a specific subset of atoms between two protein structures. All necessary data, namely the Cartesian coordinates for the specified atom pairs, are provided. The condition that the structures have already been superimposed is a crucial and correct simplification, as RMSD calculation without prior superposition is a different and more complex problem. Therefore, the problem is valid and a solution can be derived.\n\nThe root-mean-square deviation ($RMSD$) between two sets of $N$ corresponding atoms is defined as the square root of the mean of the squared Euclidean distances between each atom pair. The formula is:\n$$\nRMSD = \\sqrt{\\frac{1}{N} \\sum_{i=1}^{N} d_i^2}\n$$\nwhere $N$ is the number of atom pairs, and $d_i$ is the distance between the $i$-th atom in the model and the $i$-th atom in the template.\n\nIn this problem, we are given the coordinates of $N=5$ pairs of C-alpha atoms. Let the coordinates of the $i$-th template atom be $\\vec{t}_i = (x_{t,i}, y_{t,i}, z_{t,i})$ and the coordinates of the corresponding model atom be $\\vec{m}_i = (x_{m,i}, y_{m,i}, z_{m,i})$. The squared distance $d_i^2$ for each pair is given by:\n$$\nd_i^2 = |\\vec{m}_i - \\vec{t}_i|^2 = (x_{m,i} - x_{t,i})^2 + (y_{m,i} - y_{t,i})^2 + (z_{m,i} - z_{t,i})^2\n$$\nSince the problem states the structures are already optimally superimposed, we can proceed directly with the calculation of these distances. We will calculate the squared distance for each of the five atom pairs. The coordinates are given in Ångström (Å).\n\nFor Residue $102$:\n$\\vec{t}_1 = (12.432, 5.781, 3.227)$\n$\\vec{m}_1 = (12.646, 5.476, 3.347)$\n$$\nd_1^2 = (12.646 - 12.432)^2 + (5.476 - 5.781)^2 + (3.347 - 3.227)^2\n$$\n$$\nd_1^2 = (0.214)^2 + (-0.305)^2 + (0.120)^2 = 0.045796 + 0.093025 + 0.014400 = 0.153221\n$$\n\nFor Residue $105$:\n$\\vec{t}_2 = (10.115, 7.946, 2.018)$\n$\\vec{m}_2 = (9.664, 8.308, 1.797)$\n$$\nd_2^2 = (9.664 - 10.115)^2 + (8.308 - 7.946)^2 + (1.797 - 2.018)^2\n$$\n$$\nd_2^2 = (-0.451)^2 + (0.362)^2 + (-0.221)^2 = 0.203401 + 0.131044 + 0.048841 = 0.383286\n$$\n\nFor Residue $136$:\n$\\vec{t}_3 = (8.883, 6.102, 5.337)$\n$\\vec{m}_3 = (9.216, 5.924, 5.746)$\n$$\nd_3^2 = (9.216 - 8.883)^2 + (5.924 - 6.102)^2 + (5.746 - 5.337)^2\n$$\n$$\nd_3^2 = (0.333)^2 + (-0.178)^2 + (0.409)^2 = 0.110889 + 0.031684 + 0.167281 = 0.309854\n$$\n\nFor Residue $164$:\n$\\vec{t}_4 = (6.552, 4.218, 4.771)$\n$\\vec{m}_4 = (6.425, 4.313, 4.259)$\n$$\nd_4^2 = (6.425 - 6.552)^2 + (4.313 - 4.218)^2 + (4.259 - 4.771)^2\n$$\n$$\nd_4^2 = (-0.127)^2 + (0.095)^2 + (-0.512)^2 = 0.016129 + 0.009025 + 0.262144 = 0.287298\n$$\n\nFor Residue $189$:\n$\\vec{t}_5 = (9.764, 2.937, 6.503)$\n$\\vec{m}_5 = (10.053, 2.596, 6.676)$\n$$\nd_5^2 = (10.053 - 9.764)^2 + (2.596 - 2.937)^2 + (6.676 - 6.503)^2\n$$\n$$\nd_5^2 = (0.289)^2 + (-0.341)^2 + (0.173)^2 = 0.083521 + 0.116281 + 0.029929 = 0.229731\n$$\n\nNow, we sum these squared distances:\n$$\n\\sum_{i=1}^{5} d_i^2 = 0.153221 + 0.383286 + 0.309854 + 0.287298 + 0.229731 = 1.36339\n$$\nNext, we calculate the mean squared deviation (MSD) by dividing the sum by $N=5$:\n$$\nMSD = \\frac{1}{5} \\sum_{i=1}^{5} d_i^2 = \\frac{1.36339}{5} = 0.272678\n$$\nFinally, the RMSD is the square root of the MSD:\n$$\nRMSD = \\sqrt{0.272678} \\approx 0.52218579...\n$$\nThe problem requires the answer to be rounded to four significant figures.\n$$\nRMSD \\approx 0.5222 \\text{ Å}\n$$\nThis value represents the average deviation of the active site C-alpha atoms in the model from their corresponding positions in the template structure, providing a quantitative measure of local model accuracy.", "answer": "$$\n\\boxed{0.5222}\n$$", "id": "2434226"}, {"introduction": "Choosing the right template is the most crucial step in homology modeling, and simple sequence identity is often not the best guide. This advanced practice moves you from being a user of bioinformatics tools to a designer of them. You will implement a sophisticated scoring function from first principles, learning how to combine global and local information to create a more intelligent template ranking algorithm [@problem_id:2434250].", "problem": "You are asked to implement, from first principles, a ranking score for template-based protein model building that explicitly prioritizes the conservation of active site residues over overall sequence identity, using only formalized definitions. Your program must compute the ranking for a small, fixed test suite and output the index of the highest-scoring template for each test case on a single line. The inputs to each test case are a target amino-acid sequence, a set of aligned candidate template sequences of equal length, a set of active site positions, a neighborhood radius, and tunable weights governing the relative importance of active site conservation versus overall identity. There is no external input; your program should encode and use the provided test suite directly.\n\nFundamental base and required modeling assumptions:\n\n- Proteins are polymer sequences of amino acids. The Central Dogma of molecular biology states that sequence determines structure and function. For template-based modeling, preserving functionally critical residues such as those in an active site is known to be more predictive of a usable model than maximizing global identity alone.\n- A substitution matrix such as BLOSUM $62$ provides log-odds scores for amino-acid substitutions. If $M(x,y)$ denotes the log-odds score of substituting amino acid $x$ by amino acid $y$, then larger values of $M(x,y)$ reflect more favorable or frequently observed substitutions, and smaller values reflect less favorable substitutions, based on empirical observations.\n- To combine heterogeneous terms, scores must be put on a common scale. You must place substitution scores on a unit interval by an order-preserving affine transformation that maps the minimum entry of the chosen substitution matrix to $0$ and the maximum entry to $1$. This requirement implies a unique linear rescaling on the set of matrix entries.\n- The contribution of a residue to functional conservation can extend to its local neighborhood. For each active site index $a$, the contribution from an aligned position at index $j$ must be down-weighted by a factor that decays geometrically with the sequence distance $d=\\lvert j-a\\rvert$, with a per-step ratio of $1/2$. These position weights must be normalized over the window so that they sum to $1$ for each active residue window.\n- Global sequence identity is defined as the fraction of alignment positions where the target and template have the same amino acid, computed over positions where both are not gaps. Positions containing a gap character do not contribute to the denominator or the numerator for identity.\n- Gaps in a template’s alignment that fall within the active-site neighborhood of radius $r$ should incur an explicit penalty proportional to the normalized positional weight that the gap would have contributed, thereby discouraging deletions at or near active residues.\n\nYour task is to derive a single scalar score for each template as follows.\n\n1) Define the scaled substitution score. Let $S_{\\min}$ and $S_{\\max}$ denote the minimum and maximum over all amino-acid pairs $(x,y)$ in the chosen substitution matrix. For any aligned pair of non-gap residues $(x,y)$, compute a scaled score on $[0,1]$ by applying the unique order-preserving affine mapping that sends $S_{\\min}$ to $0$ and $S_{\\max}$ to $1$. If at a position either the target or the template has a gap, the scaled score at that position is taken to be $0$ for the purposes of active-site conservation aggregation described below.\n\n2) Define the active-site neighborhood aggregation. For each active site index $a$ and neighborhood radius $r$, consider indices $j$ with $\\lvert j-a\\rvert \\le r$ and $0 \\le j < L$, where $L$ is the common alignment length. Assign each such position a raw weight equal to $(1/2)^{\\lvert j-a\\rvert}$, then normalize these raw weights so that their sum over the window equals $1$. The contribution for active site $a$ is the weighted average of the scaled substitution scores in this window, minus a penalty $\\gamma$ times the total normalized weight of positions in this window where the template has a gap. Aggregate these per-active-site contributions by averaging over all active site indices.\n\n3) Define the global identity term as the fraction of positions $j$ where both target and template are non-gap and equal, divided by the number of positions where both are non-gap.\n\n4) Combine the two terms into a single score as a convex combination with active site weight $\\alpha$ and identity weight $\\beta$, where $\\alpha \\in (0,1)$, $\\beta = 1-\\alpha$, and $\\alpha > \\beta$. The overall score is the weighted sum of the active-site conservation term and the global identity term.\n\n5) Define tie-breaking. If two templates have equal combined scores up to a tolerance of $10^{-12}$, break ties by preferring the template with the higher mean scaled substitution score averaged over positions where both characters are non-gap. If still tied, choose the template with the smallest index.\n\nAll angles, if any, should be interpreted in radians. There are no physical units in this problem. All outputs must be numeric indices and must not contain units or textual explanations.\n\nTest suite to be hard-coded in your program:\n\n- Common alignment length is $L=12$ for all sequences below. The gap character is the hyphen $-$.\n\nTest case $1$:\n- Target: \"MKTAYIAKQRQL\"\n- Templates (indexed $0,1,2$):\n  - $0$: \"MKTGYIAEQRQL\"\n  - $1$: \"QKTAYLVKQHQL\"\n  - $2$: \"MRTAYIAKQREL\"\n- Active site indices (zero-based): $\\{3,7\\}$\n- Neighborhood radius: $r=1$\n- Active-site weight: $\\alpha=0.7$ (thus $\\beta=0.3$)\n- Gap penalty: $\\gamma=0.25$\n\nTest case $2$:\n- Target: \"MKTAYIAKQRQL\"\n- Templates (indexed $0,1,2$):\n  - $0$: \"MKTA-IAKQRQL\"\n  - $1$: \"MKTSYIAKQRQL\"\n  - $2$: \"MKTAYIAKQ-QL\"\n- Active site indices (zero-based): $\\{3,7\\}$\n- Neighborhood radius: $r=1$\n- Active-site weight: $\\alpha=0.8$ (thus $\\beta=0.2$)\n- Gap penalty: $\\gamma=0.5$\n\nTest case $3$:\n- Target: \"MKTAYIAKQRQL\"\n- Templates (indexed $0,1,2$):\n  - $0$: \"LKTAYIAKQRQI\"\n  - $1$: \"AKTAYIAKQRQG\"\n  - $2$: \"GATGYVAEGRAA\"\n- Active site indices (zero-based): $\\{3,7\\}$\n- Neighborhood radius: $r=0$\n- Active-site weight: $\\alpha=0.6$ (thus $\\beta=0.4$)\n- Gap penalty: $\\gamma=0.0$\n\nTest case $4$:\n- Target: \"MKTAYIAKQRQL\"\n- Templates (indexed $0,1,2$):\n  - $0$: \"MKTGYIAEQRQL\"\n  - $1$: \"QKTAYLVKQHQL\"\n  - $2$: \"WSTAYIVKLRAV\"\n- Active site indices (zero-based): $\\{3,7\\}$\n- Neighborhood radius: $r=0$\n- Active-site weight: $\\alpha=0.95$ (thus $\\beta=0.05$)\n- Gap penalty: $\\gamma=0.0$\n\nFinal output requirement:\n\n- Your program should produce a single line of output containing the selected template index for each test case, as a comma-separated list enclosed in square brackets, with no spaces. For example, an output with four integers should look like \"[0,2,1,0]\". The actual results must correspond to the test suite above and the scoring rules specified herein.", "solution": "The problem statement has been critically evaluated and is determined to be valid. It is scientifically grounded in the principles of computational protein structure prediction, well-posed with a clear and deterministic set of rules, and formulated with objective, unambiguous language. The task is to implement a scoring function for ranking protein templates based on a weighted combination of active site residue conservation and overall sequence identity. All required parameters and test data are provided. The reference to the BLOSUM$62$ matrix is standard for the field, and its canonical form will be used.\n\nThe solution will be constructed by formalizing the components of the scoring function as prescribed.\n\nLet $T$ be the target sequence and $P$ be a template sequence, aligned over a length of $L$ positions. Let $A_S \\subset \\{0, 1, \\dots, L-1\\}$ be the set of zero-based indices of active site residues.\n\n**1. Scaled Substitution Score**\n\nThe foundation of the score is the BLOSUM$62$ substitution matrix, which we denote as $M(x, y)$ for the score of substituting amino acid $x$ with $y$. To combine scores from different sources, we must normalize them. The problem mandates an affine transformation to map the raw substitution scores onto the unit interval $[0, 1]$.\nLet $S_{\\min}$ and $S_{\\max}$ be the minimum and maximum values in the standard $20 \\times 20$ amino acid BLOSUM$62$ matrix. For standard implementations, $S_{\\min}=-4$ and $S_{\\max}=11$. The scaled score $S_{\\text{scaled}}(x, y)$ for a pair of non-gap residues $(x, y)$ is given by:\n$$S_{\\text{scaled}}(x, y) = \\frac{M(x, y) - S_{\\min}}{S_{\\max} - S_{\\min}} = \\frac{M(x, y) + 4}{15}$$\nIf either the target or template has a gap character at a given position, its contribution to the active site score aggregation is defined to be $0$, so we set $S_{\\text{scaled}} = 0$ in that case.\n\n**2. Active Site Conservation Score ($A$)**\n\nThis component measures the conservation of residues within and around functionally critical active sites. Its calculation involves three steps:\n\nFirst, for each active site at index $a \\in A_S$, a neighborhood of radius $r$ is defined as the set of indices $j$ such that $|j-a| \\le r$ and $0 \\le j < L$. The influence of each position $j$ in this neighborhood is weighted by a geometric decay function. The unnormalized weight $w_{\\text{raw}}$ for position $j$ relative to active site $a$ is:\n$$w_{\\text{raw}}(j, a) = \\left(\\frac{1}{2}\\right)^{|j-a|}$$\nThese weights are then normalized to sum to $1$ over the neighborhood of $a$:\n$$w_{\\text{norm}}(j, a) = \\frac{w_{\\text{raw}}(j, a)}{\\sum_{k : |k-a| \\le r} w_{\\text{raw}}(k, a)}$$\n\nSecond, the conservation score for a single active site $a$, denoted $C_a$, is calculated. It is the weighted average of the scaled substitution scores within its neighborhood, adjusted by a penalty for any gaps introduced by the template. Let $T_j$ and $P_j$ be the residues at position $j$ in the target and template sequences, respectively. The gap penalty is controlled by a parameter $\\gamma$.\n$$C_a = \\left( \\sum_{j : |j-a| \\le r} w_{\\text{norm}}(j, a) \\cdot S_{\\text{scaled}}(T_j, P_j) \\right) - \\gamma \\cdot \\left( \\sum_{j : |j-a| \\le r \\text{ and } P_j = \\text{'--'}} w_{\\text{norm}}(j, a) \\right)$$\n\nFinally, the total active site conservation score, $A$, is the arithmetic mean of the individual scores for all active sites:\n$$A = \\frac{1}{|A_S|} \\sum_{a \\in A_S} C_a$$\n\n**3. Global Sequence Identity ($I$)**\n\nThis term captures the overall similarity between the target and template, a classical measure of homology. It is defined as the fraction of positions where the target and template residues are identical, computed only over positions where neither sequence has a gap. Let $\\mathcal{J}_{\\text{non-gap}} = \\{j \\mid T_j \\neq \\text{'-'} \\land P_j \\neq \\text{'-'}\\}$.\n$$I = \\frac{|\\{j \\in \\mathcal{J}_{\\text{non-gap}} \\mid T_j = P_j\\}|}{|\\mathcal{J}_{\\text{non-gap}}|}$$\n\n**4. Overall Score and Ranking**\n\nThe final score $S$ for a template is a convex combination of the active site conservation score $A$ and the global identity score $I$. The weights $\\alpha$ and $\\beta=1-\\alpha$ control their relative contributions.\n$$S = \\alpha A + \\beta I$$\n\nTemplates are ranked in descending order of their score $S$. To resolve ties (scores equal within a tolerance of $10^{-12}$), the following rules are applied in order:\n1.  The template with the higher mean scaled substitution score is preferred. This score is the average of $S_{\\text{scaled}}(T_j, P_j)$ over all non-gap positions $j \\in \\mathcal{J}_{\\text{non-gap}}$.\n2.  If scores are still tied, the template with the lower original index (i.e., its position in the input list) is chosen.\n\nThis completes the formal definition of the algorithm. The implementation will proceed by systematically applying these equations to the provided test suite.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the template ranking problem for a hard-coded test suite.\n    This function implements the scoring and ranking logic as specified,\n    calculates the best template for each test case, and prints the\n    indices in the required format.\n    \"\"\"\n\n    # Standard BLOSUM62 matrix for 20 common amino acids.\n    # The order of amino acids is 'ARNDCQEGHILKMFPSTWYV'.\n    amino_acids = 'ARNDCQEGHILKMFPSTWYV'\n    aa_map = {acid: i for i, acid in enumerate(amino_acids)}\n    blosum62_matrix = np.array([\n        [4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2, 0],   # A\n        [-1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2, 2, -1, -3, -2, -1, -1, -3, -2, -3],   # R\n        [-2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 0, -2, -3, -2, 1, 0, -4, -2, -3],   # N\n        [-2, -2, 1, 6, -3, 0, 2, -1, -1, -3, -4, -1, -3, -3, -1, 0, -1, -4, -3, -3],   # D\n        [0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1],   # C\n        [-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2],   # Q\n        [-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2],   # E\n        [0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3],   # G\n        [-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3],   # H\n        [-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3],   # I\n        [-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1],   # L\n        [-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2],   # K\n        [-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1],   # M\n        [-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1],   # F\n        [-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2],   # P\n        [1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2],   # S\n        [0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0],   # T\n        [-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3],  # W\n        [-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1],   # Y\n        [0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4]    # V\n    ])\n    \n    S_min, S_max = -4.0, 11.0\n\n    def get_blosum_score(res1, res2):\n        if res1 not in aa_map or res2 not in aa_map:\n            raise ValueError(f\"Invalid amino acid in pair ({res1}, {res2})\")\n        return blosum62_matrix[aa_map[res1], aa_map[res2]]\n\n    def scaled_score(res1, res2):\n        if res1 == '-' or res2 == '-':\n            return 0.0\n        score = get_blosum_score(res1, res2)\n        return (score - S_min) / (S_max - S_min)\n\n    def calculate_template_scores(target, template, active_sites, r, alpha, gamma):\n        L = len(target)\n        beta = 1.0 - alpha\n        \n        # 1. Active Site Conservation Score (A)\n        active_site_scores = []\n        for a in active_sites:\n            window_indices = [j for j in range(L) if abs(j - a) <= r]\n            \n            raw_weights = {(1/2)**abs(j-a) for j in window_indices}\n            \n            # Use NumPy for precision and convenience\n            raw_weights_arr = np.array([0.5**abs(j-a) for j in window_indices])\n            norm_weights_arr = raw_weights_arr / np.sum(raw_weights_arr)\n            norm_weights = {idx: weight for idx, weight in zip(window_indices, norm_weights_arr)}\n\n            weighted_score_sum = 0.0\n            gap_penalty_sum = 0.0\n\n            for j in window_indices:\n                t_res, p_res = target[j], template[j]\n                \n                s_scaled = scaled_score(t_res, p_res)\n                weighted_score_sum += norm_weights[j] * s_scaled\n                \n                if p_res == '-':\n                    gap_penalty_sum += norm_weights[j]\n\n            C_a = weighted_score_sum - gamma * gap_penalty_sum\n            active_site_scores.append(C_a)\n\n        A = np.mean(active_site_scores)\n\n        # 2. Global Identity Score (I)\n        identicals = 0\n        non_gap_pairs = 0\n        for j in range(L):\n            if target[j] != '-' and template[j] != '-':\n                non_gap_pairs += 1\n                if target[j] == template[j]:\n                    identicals += 1\n        \n        I = identicals / non_gap_pairs if non_gap_pairs > 0 else 0.0\n\n        # 3. Overall Score (S)\n        S = alpha * A + beta * I\n        \n        # 4. Tie-breaker: Mean scaled substitution score\n        total_scaled_score = 0.0\n        for j in range(L):\n            if target[j] != '-' and template[j] != '-':\n                total_scaled_score += scaled_score(target[j], template[j])\n        \n        mean_scaled_score = total_scaled_score / non_gap_pairs if non_gap_pairs > 0 else 0.0\n\n        return S, mean_scaled_score\n\n    test_suite = [\n        {\n            \"target\": \"MKTAYIAKQRQL\",\n            \"templates\": [\"MKTGYIAEQRQL\", \"QKTAYLVKQHQL\", \"MRTAYIAKQREL\"],\n            \"active_sites\": {3, 7}, \"r\": 1, \"alpha\": 0.7, \"gamma\": 0.25\n        },\n        {\n            \"target\": \"MKTAYIAKQRQL\",\n            \"templates\": [\"MKTA-IAKQRQL\", \"MKTSYIAKQRQL\", \"MKTAYIAKQ-QL\"],\n            \"active_sites\": {3, 7}, \"r\": 1, \"alpha\": 0.8, \"gamma\": 0.5\n        },\n        {\n            \"target\": \"MKTAYIAKQRQL\",\n            \"templates\": [\"LKTAYIAKQRQI\", \"AKTAYIAKQRQG\", \"GATGYVAEGRAA\"],\n            \"active_sites\": {3, 7}, \"r\": 0, \"alpha\": 0.6, \"gamma\": 0.0\n        },\n        {\n            \"target\": \"MKTAYIAKQRQL\",\n            \"templates\": [\"MKTGYIAEQRQL\", \"QKTAYLVKQHQL\", \"WSTAYIVKLRAV\"],\n            \"active_sites\": {3, 7}, \"r\": 0, \"alpha\": 0.95, \"gamma\": 0.0\n        }\n    ]\n\n    final_results = []\n    \n    for case in test_suite:\n        target = case[\"target\"]\n        templates = case[\"templates\"]\n        active_sites = case[\"active_sites\"]\n        r, alpha, gamma = case[\"r\"], case[\"alpha\"], case[\"gamma\"]\n\n        template_results = []\n        for i, template in enumerate(templates):\n            score, tie_breaker = calculate_template_scores(target, template, active_sites, r, alpha, gamma)\n            template_results.append({\n                \"index\": i,\n                \"score\": score,\n                \"tie_breaker\": tie_breaker\n            })\n        \n        # Sort templates based on score (desc), tie_breaker (desc), and index (asc)\n        # Using a tolerance for score comparison as per problem spec (10^-12),\n        # but direct sorting on floats is generally fine here. For strictness,\n        # sorting by a tuple key `(-score, -tie_breaker, index)` is equivalent and robust.\n        sorted_templates = sorted(\n            template_results, \n            key=lambda x: (-x['score'], -x['tie_breaker'], x['index'])\n        )\n        \n        best_template_index = sorted_templates[0]['index']\n        final_results.append(best_template_index)\n\n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n```", "id": "2434250"}]}