{"hands_on_practices": [{"introduction": "Let's begin by translating simple biological rules into the formal language of machines. This exercise [@problem_id:2390533] challenges you to design a deterministic finite automaton (DFA) that recognizes amino acid sequences based on specific criteria—a starting amino acid and the absence of another. In doing so, you will practice the fundamental concept of DFA minimization and gain an intuitive understanding of how states can represent the memory of processed input, including valid, invalid, and initial states.", "problem": "In computational biology, an amino acid sequence can be modeled as a finite string over the alphabet $\\Sigma$ of the $20$ standard amino acid one-letter codes. Let $\\Sigma = \\{ \\mathrm{A}, \\mathrm{C}, \\mathrm{D}, \\mathrm{E}, \\mathrm{F}, \\mathrm{G}, \\mathrm{H}, \\mathrm{I}, \\mathrm{K}, \\mathrm{L}, \\mathrm{M}, \\mathrm{N}, \\mathrm{P}, \\mathrm{Q}, \\mathrm{R}, \\mathrm{S}, \\mathrm{T}, \\mathrm{V}, \\mathrm{W}, \\mathrm{Y} \\}$. Consider the language $L \\subseteq \\Sigma^{*}$ consisting of exactly those sequences that start with $\\mathrm{M}$ and contain no $\\mathrm{C}$ anywhere.\n\nDesign a Deterministic Finite Automaton (DFA) that recognizes $L$. Then, determine the minimal number of states required by any DFA over $\\Sigma$ that recognizes $L$. Provide your final answer as a single integer. No rounding is needed.", "solution": "The problem requires the determination of the minimal number of states for a Deterministic Finite Automaton (DFA) that recognizes a given language $L$ over the alphabet $\\Sigma$ of the $20$ standard amino acids.\n\nThe alphabet is given as $\\Sigma = \\{ \\mathrm{A}, \\mathrm{C}, \\mathrm{D}, \\mathrm{E}, \\mathrm{F}, \\mathrm{G}, \\mathrm{H}, \\mathrm{I}, \\mathrm{K}, \\mathrm{L}, \\mathrm{M}, \\mathrm{N}, \\mathrm{P}, \\mathrm{Q}, \\mathrm{R}, \\mathrm{S}, \\mathrm{T}, \\mathrm{V}, \\mathrm{W}, \\mathrm{Y} \\}$. The size of the alphabet is $|\\Sigma| = 20$.\n\nThe language $L$ is a subset of $\\Sigma^*$, the set of all finite strings over $\\Sigma$. A string $w \\in \\Sigma^*$ belongs to $L$ if and only if it satisfies two conditions:\n1. The string must start with the symbol $\\mathrm{M}$.\n2. The string must not contain the symbol $\\mathrm{C}$ anywhere.\n\nTo find the minimum number of states for a DFA recognizing $L$, we utilize the Myhill-Nerode theorem. This theorem establishes a direct correspondence between the states of the minimal DFA for a regular language and the equivalence classes of the indistinguishability relation $R_L$. Two strings $x$ and $y$ from $\\Sigma^*$ are indistinguishable, written $x \\ R_L \\ y$, if for all strings $z \\in \\Sigma^*$, the string $xz$ is in $L$ if and only if $yz$ is in $L$.  The number of states in the minimal DFA is precisely the number of distinct equivalence classes of $R_L$.\n\nWe proceed by identifying these equivalence classes by considering the properties of prefixes of strings in $L$.\n\n1.  **Equivalence Class 1: The initial condition.**\n    This class corresponds to the state of having read no input symbols, represented by the empty string, $\\epsilon$. To determine which other strings belong to this class, we analyze the condition for a string $z$ to be a valid \"continuation.\" For the prefix $\\epsilon$, the string $\\epsilon z = z$ is in $L$ if and only if $z$ itself is in $L$. This means $z$ must start with $\\mathrm{M}$ and contain no $\\mathrm{C}$. Let us denote this equivalence class by $C_0 = [\\epsilon]_{R_L}$. This class will correspond to the start state of our DFA. This state is non-accepting because $\\epsilon \\notin L$.\n\n2.  **Equivalence Class 2: The valid, accepting condition.**\n    This class contains prefixes that represent valid strings in $L$ and can be extended to form other valid strings. Let's consider the simplest string in $L$, which is $x_1 = \\mathrm{M}$. What are its valid continuations? For a string $z \\in \\Sigma^*$, the concatenated string $x_1 z = \\mathrm{M}z$ is in $L$ if and only if $z$ contains no symbol $\\mathrm{C}$. The set of valid continuations for $x_1 = \\mathrm{M}$ is $\\{ z \\in \\Sigma^* \\mid \\mathrm{C} \\notin z \\}$, which is different from the set of valid continuations for $\\epsilon$. For instance, the string $z = \\mathrm{A}$ is a valid continuation for $x_1=\\mathrm{M}$ (making $\\mathrm{MA} \\in L$), but not for $x_0=\\epsilon$ (as $\\mathrm{A} \\notin L$). Thus, $\\epsilon$ and $\\mathrm{M}$ are distinguishable, and $[\\epsilon]_{R_L} \\neq [\\mathrm{M}]_{R_L}$.\n    This new equivalence class, $C_1 = [\\mathrm{M}]_{R_L}$, contains all strings that start with $\\mathrm{M}$ and contain no $\\mathrm{C}$. Any string in this class is, by definition, a member of $L$. Hence, the corresponding state in the DFA must be an accepting state.\n\n3.  **Equivalence Class 3: The invalid, trap condition.**\n    This class comprises all prefixes that can never be completed into a string in $L$, regardless of the suffix. Such a prefix is \"dead.\" A prefix $x$ falls into this class if it violates at least one of the conditions for membership in $L$.\n    a) The prefix does not start with $\\mathrm{M}$. For example, consider $x = \\mathrm{A}$. For any suffix $z \\in \\Sigma^*$, the string $xz = \\mathrm{A}z$ will not begin with $\\mathrm{M}$, so $xz \\notin L$.\n    b) The prefix contains the symbol $\\mathrm{C}$. For example, consider $x = \\mathrm{MC}$. For any suffix $z \\in \\Sigma^*$, the string $xz = \\mathrm{MC}z$ contains $\\mathrm{C}$, so $xz \\notin L$.\n    All such prefixes are equivalent with respect to $R_L$ because for any such prefix $x$, there is no suffix $z$ that can make $xz \\in L$. The set of valid continuations is the empty set, $\\emptyset$.\n    This class, let us call it $C_2$, is distinct from both $C_0$ and $C_1$.\n    - To distinguish $C_2$ from $C_0$, take $x_2 = \\mathrm{A} \\in C_2$ and $x_0 = \\epsilon \\in C_0$. The suffix $z = \\mathrm{M}$ distinguishes them: $x_0 z = \\mathrm{M} \\in L$, but $x_2 z = \\mathrm{AM} \\notin L$.\n    - To distinguish $C_2$ from $C_1$, take $x_2 = \\mathrm{A} \\in C_2$ and $x_1 = \\mathrm{M} \\in C_1$. The suffix $z = \\epsilon$ distinguishes them: $x_1 z = \\mathrm{M} \\in L$, but $x_2 z = \\mathrm{A} \\notin L$.\n\nWe have identified exactly three distinct equivalence classes:\n- $C_0$: The class containing prefixes that have not yet determined the validity or invalidity of the string (only $\\epsilon$).\n- $C_1$: The class containing prefixes that satisfy the conditions of $L$.\n- $C_2$: The class containing prefixes that have violated the conditions of $L$.\n\nAccording to the Myhill-Nerode theorem, the number of states in the minimal DFA is equal to the number of these equivalence classes. Therefore, the minimal number of states required is $3$.\n\nFor completeness, we can describe the minimal DFA, $(Q, \\Sigma, \\delta, q_0, F)$:\n- Set of states: $Q = \\{q_0, q_1, q_2\\}$, where $q_0$ corresponds to $C_0$, $q_1$ to $C_1$, and $q_2$ to $C_2$.\n- Alphabet: $\\Sigma = \\{ \\mathrm{A}, \\mathrm{C}, \\dots, \\mathrm{Y} \\}$.\n- Start state: $q_0$.\n- Set of final states: $F = \\{q_1\\}$.\n- Transition function $\\delta: Q \\times \\Sigma \\to Q$:\n  - $\\delta(q_0, \\mathrm{M}) = q_1$\n  - $\\delta(q_0, \\mathrm{C}) = q_2$\n  - $\\delta(q_0, s) = q_2$ for any $s \\in \\Sigma \\setminus \\{\\mathrm{M}, \\mathrm{C}\\}$\n  - $\\delta(q_1, \\mathrm{C}) = q_2$\n  - $\\delta(q_1, s) = q_1$ for any $s \\in \\Sigma \\setminus \\{\\mathrm{C}\\}$\n  - $\\delta(q_2, s) = q_2$ for any $s \\in \\Sigma$\n\nThis construction demonstrates a DFA with $3$ states. As established by the Myhill-Nerode analysis, no DFA with fewer states can recognize the language $L$. Thus, the minimal number of states is $3$.", "answer": "$$\\boxed{3}$$", "id": "2390533"}, {"introduction": "The genetic code is read in discrete units of three nucleotides, known as codons. This exercise [@problem_id:2390456] models this fundamental biological structure by asking you to design an automaton that accepts only sequences whose length is a multiple of three. This will introduce you to cyclic DFAs, which act as counters, demonstrating how these simple machines can recognize properties of an infinite number of strings while also connecting automata theory to generating functions, a powerful mathematical tool for counting valid sequences.", "problem": "In computational genomics, messenger ribonucleic acid (mRNA) is translated in triplets of nucleotides called codons. Consider the deoxyribonucleic acid (DNA) alphabet $\\Sigma = \\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$. Let $L$ be the language of all strings over $\\Sigma$ whose length is a multiple of $3$, representing sequences that can be partitioned into complete codons without a partial codon at the end.\n\nDesign a deterministic finite automaton (DFA) that recognizes $L$ and is minimal with respect to the number of states. Then, let $a_n$ denote the number of strings in $L$ of length $n$, and define the ordinary generating function $G(z)$ by\n$$\nG(z) = \\sum_{n=0}^{\\infty} a_n z^n.\n$$\nProvide $G(z)$ as a single closed-form analytic expression. Your final answer must be this expression only. No rounding is required.", "solution": "The problem statement must first be subjected to rigorous validation.\n\nStep 1: Extract Givens\nThe givens are:\n- Alphabet: $\\Sigma = \\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$.\n- Language: $L$ is the set of all strings over $\\Sigma$ whose length is a multiple of $3$.\n- Sequence: $a_n$ is the number of strings in $L$ of length $n$.\n- Generating Function: $G(z) = \\sum_{n=0}^{\\infty} a_n z^n$.\n- Objective: Design a minimal deterministic finite automaton (DFA) for $L$ and provide the closed-form expression for $G(z)$.\n\nStep 2: Validate Using Extracted Givens\nThe problem is evaluated against the required criteria.\n- **Scientifically Grounded**: The problem is based on established principles of computational biology (DNA alphabet, codons), formal language theory (regular languages, DFAs), and combinatorics (generating functions). The premise that genetic information is read in triplets (codons) is a fundamental fact of molecular biology, providing a sound scientific context for the formal problem. The problem is a standard exercise in automata theory.\n- **Well-Posed**: The language $L$ is unambiguously defined. The tasks of constructing a minimal DFA and finding a corresponding generating function are well-defined mathematical problems with unique solutions.\n- **Objective**: The problem statement is precise, quantitative, and free of any subjective or ambiguous language.\n\nThe problem does not exhibit any of the flaws listed for invalidation. It is scientifically sound, well-posed, and objective.\n\nStep 3: Verdict and Action\nThe problem is valid. A complete solution will now be furnished.\n\nThe first task is to construct a minimal DFA that recognizes the language $L$. The language $L$ consists of all strings $w$ over the alphabet $\\Sigma = \\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$ such that the length of the string, $|w|$, is a multiple of $3$. This can be expressed as $|w| \\equiv 0 \\pmod 3$.\n\nThis property suggests a DFA with states that track the length of the input string modulo $3$. We define a DFA $M = (Q, \\Sigma, \\delta, q_0, F)$ with three states:\n- $Q = \\{q_0, q_1, q_2\\}$, where the machine is in state $q_i$ if the length of the string read so far is congruent to $i \\pmod 3$.\n- $\\Sigma = \\{\\mathrm{A}, \\mathrm{C}, \\mathrm{G}, \\mathrm{T}\\}$ is the input alphabet. The size of the alphabet is $|\\Sigma| = 4$.\n- $q_0$ is the start state. This is appropriate because the empty string $\\epsilon$ has length $0$, and $0 \\equiv 0 \\pmod 3$.\n- $F = \\{q_0\\}$ is the set of accepting states, since the language consists of strings whose length is a multiple of $3$.\n- The transition function $\\delta: Q \\times \\Sigma \\to Q$ is defined as follows. For any symbol $s \\in \\Sigma$:\n  - $\\delta(q_0, s) = q_1$, because if a string has length $n \\equiv 0 \\pmod 3$, appending one symbol results in a string of length $n+1 \\equiv 1 \\pmod 3$.\n  - $\\delta(q_1, s) = q_2$, because if a string has length $n \\equiv 1 \\pmod 3$, appending one symbol results in a string of length $n+1 \\equiv 2 \\pmod 3$.\n  - $\\delta(q_2, s) = q_0$, because if a string has length $n \\equiv 2 \\pmod 3$, appending one symbol results in a string of length $n+1 \\equiv 3 \\equiv 0 \\pmod 3$.\n\nTo prove this $3$-state DFA is minimal, we must show that all pairs of states are distinguishable.\n- The pair $(q_0, q_1)$ is distinguishable because $q_0 \\in F$ and $q_1 \\notin F$. Similarly, $(q_0, q_2)$ is distinguishable.\n- To distinguish between $q_1$ and $q_2$, we must find a string $w$ such that one of $\\delta(q_1, w)$ and $\\delta(q_2, w)$ is in $F$ and the other is not. Let's choose a string of length one, for instance $w = \\mathrm{A}$.\n  - From state $q_1$, reading 'A' leads to state $\\delta(q_1, \\mathrm{A}) = q_2$, which is not a final state.\n  - From state $q_2$, reading 'A' leads to state $\\delta(q_2, \\mathrm{A}) = q_0$, which is a final state.\nSince the outcomes are different (one accepting, one not), the states $q_1$ and $q_2$ are distinguishable. As all pairs of states $(q_0, q_1)$, $(q_0, q_2)$, and $(q_1, q_2)$ are distinguishable, the DFA is minimal.\n\nThe second task is to find the ordinary generating function $G(z) = \\sum_{n=0}^{\\infty} a_n z^n$, where $a_n$ is the number of strings in $L$ of length $n$.\nA string is in $L$ if and only if its length $n$ is a non-negative multiple of $3$.\nFor a given length $n$, the number of possible strings over the alphabet $\\Sigma$ of size $4$ is $4^n$.\nTherefore, the sequence $a_n$ is described as:\n- If $n$ is a multiple of $3$ (i.e., $n = 3k$ for some integer $k \\ge 0$), then $a_n = 4^n$.\n- If $n$ is not a multiple of $3$, then $a_n = 0$.\n\nWe can now write the generating function $G(z)$ by substituting this definition of $a_n$:\n$$\nG(z) = \\sum_{n=0}^{\\infty} a_n z^n = a_0 z^0 + a_3 z^3 + a_6 z^6 + \\dots\n$$\nThe terms for $n$ not divisible by $3$ are zero. We are left with terms where $n=3k$ for $k = 0, 1, 2, \\dots$:\n$$\nG(z) = \\sum_{k=0}^{\\infty} a_{3k} z^{3k}\n$$\nSubstituting $a_{3k} = 4^{3k}$:\n$$\nG(z) = \\sum_{k=0}^{\\infty} 4^{3k} z^{3k} = \\sum_{k=0}^{\\infty} (4^3 z^3)^k = \\sum_{k=0}^{\\infty} (64 z^3)^k\n$$\nThis is a standard geometric series of the form $\\sum_{k=0}^{\\infty} r^k$ with the common ratio $r = 64 z^3$. The sum of such a series is given by the formula $\\frac{1}{1-r}$, provided $|r|  1$.\nThus, the closed-form expression for the generating function is:\n$$\nG(z) = \\frac{1}{1 - 64z^3}\n$$\nThis result can be verified using the transfer matrix method on the derived DFA. Let $G_i(z)$ be the generating function for strings that take the machine from the start state $q_0$ to state $q_i$. We have the following system of linear equations, where the term $1$ in the equation for $G_0(z)$ accounts for the empty string:\n\\begin{align*}\nG_0(z) = 1 + 4z G_2(z) \\\\\nG_1(z) = 4z G_0(z) \\\\\nG_2(z) = 4z G_1(z)\n\\end{align*}\nThe language's generating function is $G(z) = G_0(z)$ as $q_0$ is the only accepting state. Substituting the second equation into the third gives $G_2(z) = 4z (4z G_0(z)) = 16z^2 G_0(z)$. Substituting this into the first equation:\n$$\nG_0(z) = 1 + 4z (16z^2 G_0(z)) = 1 + 64z^3 G_0(z)\n$$\nSolving for $G_0(z)$:\n$$\nG_0(z) (1 - 64z^3) = 1 \\implies G_0(z) = \\frac{1}{1 - 64z^3}\n$$\nThis confirms the result obtained through direct combinatorial counting.", "answer": "$$\n\\boxed{\\frac{1}{1 - 64z^3}}\n$$", "id": "2390456"}, {"introduction": "Moving from the theory of automata to a practical application, this problem [@problem_id:2390535] tackles a core task in bioinformatics: text mining for gene mentions in literature or clinical reports. You will use regular expressions, the practical counterpart to finite automata, to define a pattern that finds specific gene names while handling variations like capitalization. Furthermore, this exercise will challenge you to apply principles of probability to predict how often these gene names might appear by chance, a key step in assessing the statistical significance of findings.", "problem": "In clinical genomics text mining, one often needs to detect mentions of specific gene symbols within free text. Consider the set of Human Gene Nomenclature Committee (HGNC) gene symbols: TP53, BRCA1, EGFR, and MSH2. You will model detection with regular expressions and the statistical behavior of matches under a simple text generation model.\n\nYou are given the following setup.\n\n- Alphabet: The clinical report is a string over the characters consisting of uppercase Latin letters, lowercase Latin letters, decimal digits, and other characters. For the purposes of modeling, assume characters are drawn independently and identically distributed (i.i.d.) as follows: with total probability $p_{U}$ an uppercase letter is emitted and, conditional on being uppercase, each of the $26$ uppercase letters is equally likely; with total probability $p_{L}$ a lowercase letter is emitted and, conditional on being lowercase, each of the $26$ lowercase letters is equally likely; with total probability $p_{D}$ a digit is emitted and, conditional on being a digit, each of the $10$ digits is equally likely; with the remaining probability, any other character is emitted (you do not need its exact distribution). Assume $p_{U} + p_{L} + p_{D} \\leq 1$. \n- Mentions: For this problem, define a mention of a gene symbol as an occurrence of its exact character sequence as a contiguous substring, ignoring case for letters, and matching digits exactly. For example, “tp53”, “Tp53”, and “TP53” all count as mentions of TP53, and “BrCa1” counts as a mention of BRCA1.\n\nTasks:\n\n1) Starting from the formal definitions of regular expressions (union, concatenation, and character classes), write a case-insensitive regular expression over the given alphabet that matches exactly the four gene symbols TP53, BRCA1, EGFR, and MSH2 as contiguous substrings, allowing any capitalization of letters but requiring exact digit matching.\n\n2) Using the independent and identically distributed character model above, consider a clinical report of length $N$, with $N \\geq 5$. Define the random variable that counts the total number of (possibly overlapping) mentions of any of the four gene symbols anywhere in the report. Derive, from first principles (indicator variables and linearity of expectation), a closed-form expression for the expected value of this count as a function of $N$, $p_{U}$, $p_{L}$, and $p_{D}$. Express your final answer in simplest analytic form in terms of $N$, $p_{U}$, $p_{L}$, and $p_{D}$. Do not provide a numerical approximation.", "solution": "The problem proposed is first subjected to rigorous validation.\n\n**Step 1: Extract Givens**\n- **Gene Symbols:** TP53, BRCA1, EGFR, MSH2.\n- **Alphabet  Model:** Characters are drawn independently and identically distributed (i.i.d.) from an alphabet of uppercase letters, lowercase letters, digits, and other characters.\n- **Probabilities:**\n    - Total probability for an uppercase letter: $p_{U}$. Each of the $26$ uppercase letters is equally likely.\n    - Total probability for a lowercase letter: $p_{L}$. Each of the $26$ lowercase letters is equally likely.\n    - Total probability for a digit: $p_{D}$. Each of the $10$ digits is equally likely.\n    - Constraint: $p_{U} + p_{L} + p_{D} \\leq 1$.\n- **Mention Definition:** A contiguous substring matching a gene symbol's sequence. Matching is case-insensitive for letters and exact for digits.\n- **Report Length:** $N$, with $N \\geq 5$.\n- **Tasks:**\n    1.  Construct a case-insensitive regular expression for the four gene symbols.\n    2.  Derive the expected total number of mentions in a report of length $N$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is evaluated against the validation criteria.\n- **Scientifically Grounded:** The problem uses standard concepts from computational biology (gene symbol detection), computer science (regular expressions), and probability theory (i.i.d. models, linearity of expectation). While the i.i.d. character model is a simplification of natural language, it is a common and valid assumption for such theoretical problems.\n- **Well-Posed:** All necessary information is provided. The definitions of gene mentions and the probabilistic model are precise. The tasks are clearly stated and lead to unique, derivable solutions. The condition $N \\geq 5$ ensures that the longest gene symbol (BRCA1, length $5$) can be present in the text.\n- **Objective:** The problem is stated in formal, objective language, free of ambiguity or subjective claims.\n\n**Step 3: Verdict and Action**\nThe problem is scientifically sound, well-posed, and objective. It contains no contradictions or missing information. Therefore, the problem is deemed **valid**, and a formal solution will be derived.\n\n**Part 1: Regular Expression Construction**\n\nThe task is to construct a single regular expression that matches any of the four specified gene symbols: `TP53`, `BRCA1`, `EGFR`, and `MSH2`. The matching must be case-insensitive for letters and exact for digits. The construction will be based on the formal operations of union (denoted by `$|$$`) and concatenation (implicit by adjacency).\n\nFor a single alphabetic character, say `$T$`, case-insensitive matching requires it to match either `$T$` or `$t$`. This is expressed as the union `$(T|t)$`. For a digit, say `$5$`, matching is exact, so the expression is simply `$5$`.\n\nWe construct the expression for each gene symbol by concatenating the expressions for its constituent characters:\n- For `TP53`: Two letters followed by two digits. The regular expression is `$(T|t)(P|p)53$`.\n- For `BRCA1`: Four letters followed by one digit. The regular expression is `$(B|b)(R|r)(C|c)(A|a)1$`.\n- For `EGFR`: Four letters. The regular expression is `$(E|e)(G|g)(F|f)(R|r)$`.\n- For `MSH2`: Three letters followed by one digit. The regular expression is `$(M|m)(S|s)(H|h)2$`.\n\nTo match any of these four gene symbols, we take the union of their individual regular expressions. This results in the final composite regular expression:\n```\n((T|t)(P|p)53)|((B|b)(R|r)(C|c)(A|a)1)|((E|e)(G|g)(F|f)(R|r))|((M|m)(S|s)(H|h)2)\n```\nThis expression correctly models the matching criteria as specified.\n\n**Part 2: Derivation of Expected Number of Mentions**\n\nLet $X$ be the random variable representing the total number of (possibly overlapping) mentions of any of the four gene symbols in a text of length $N$. We are asked to find the expected value of $X$, denoted $E[X]$. We proceed from first principles using indicator variables and the linearity of expectation.\n\nLet $\\mathcal{S} = \\{\\text{TP53, BRCA1, EGFR, MSH2}\\}$ be the set of gene symbols. For each symbol $S \\in \\mathcal{S}$, let $L_S$ be its length.\n- $L_{\\text{TP53}} = 4$\n- $L_{\\text{BRCA1}} = 5$\n- $L_{\\text{EGFR}} = 4$\n- $L_{\\text{MSH2}} = 4$\n\nFor each symbol $S \\in \\mathcal{S}$ and each possible starting position $i$ in the text (where $1 \\leq i \\leq N - L_S + 1$), we define an indicator random variable $X_{i,S}$:\n$$ X_{i,S} = \\begin{cases} 1  \\text{if a mention of symbol } S \\text{ starts at position } i \\\\ 0  \\text{otherwise} \\end{cases} $$\nThe total count $X$ is the sum of these indicator variables over all symbols and all valid starting positions:\n$$ X = \\sum_{S \\in \\mathcal{S}} \\sum_{i=1}^{N - L_S + 1} X_{i,S} $$\nBy the linearity of expectation, the expected value of $X$ is:\n$$ E[X] = E\\left[\\sum_{S \\in \\mathcal{S}} \\sum_{i=1}^{N - L_S + 1} X_{i,S}\\right] = \\sum_{S \\in \\mathcal{S}} \\sum_{i=1}^{N - L_S + 1} E[X_{i,S}] $$\nThe expectation of an indicator variable is the probability of the event it indicates. Thus, $E[X_{i,S}] = P(X_{i,S} = 1)$.\nLet $P_S = P(X_{i,S} = 1)$ be the probability that a mention of symbol $S$ starts at an arbitrary position $i$. Since the characters are i.i.d., this probability is independent of the position $i$.\n\nThe next step is to calculate $P_S$ for each $S \\in \\mathcal{S}$. We first determine the probability of matching a single character.\n- The probability of drawing a specific uppercase letter is $\\frac{p_U}{26}$.\n- The probability of drawing a specific lowercase letter is $\\frac{p_L}{26}$.\n- For a case-insensitive match of a letter, say `C`, we require either uppercase `C` or lowercase `c`. The probability of this event is $\\frac{p_U}{26} + \\frac{p_L}{26} = \\frac{p_U + p_L}{26}$. Let us denote this probability by $P_{char}$.\n- The probability of drawing a specific digit is $\\frac{p_D}{10}$. Let us denote this by $P_{digit}$.\n\nUsing the i.i.d. assumption, the probability $P_S$ of matching a gene symbol string is the product of the probabilities of matching each character in the string.\n- For $S = \\text{TP53}$ (2 letters, 2 digits):\n$$ P_{\\text{TP53}} = (P_{char})^2 (P_{digit})^2 = \\left(\\frac{p_U + p_L}{26}\\right)^2 \\left(\\frac{p_D}{10}\\right)^2 $$\n- For $S = \\text{BRCA1}$ (4 letters, 1 digit):\n$$ P_{\\text{BRCA1}} = (P_{char})^4 (P_{digit})^1 = \\left(\\frac{p_U + p_L}{26}\\right)^4 \\left(\\frac{p_D}{10}\\right) $$\n- For $S = \\text{EGFR}$ (4 letters, 0 digits):\n$$ P_{\\text{EGFR}} = (P_{char})^4 = \\left(\\frac{p_U + p_L}{26}\\right)^4 $$\n- For $S = \\text{MSH2}$ (3 letters, 1 digit):\n$$ P_{\\text{MSH2}} = (P_{char})^3 (P_{digit})^1 = \\left(\\frac{p_U + p_L}{26}\\right)^3 \\left(\\frac{p_D}{10}\\right) $$\n\nNow, we can substitute these probabilities back into the expression for $E[X]$.\n$$ E[X] = \\sum_{S \\in \\mathcal{S}} \\sum_{i=1}^{N - L_S + 1} P_S = \\sum_{S \\in \\mathcal{S}} (N - L_S + 1) P_S $$\nExpanding this sum for the four gene symbols:\n$$ E[X] = (N - L_{\\text{TP53}} + 1)P_{\\text{TP53}} + (N - L_{\\text{BRCA1}} + 1)P_{\\text{BRCA1}} + (N - L_{\\text{EGFR}} + 1)P_{\\text{EGFR}} + (N - L_{\\text{MSH2}} + 1)P_{\\text{MSH2}} $$\nSubstituting the lengths $L_S$:\n$$ E[X] = (N - 4 + 1)P_{\\text{TP53}} + (N - 5 + 1)P_{\\text{BRCA1}} + (N - 4 + 1)P_{\\text{EGFR}} + (N - 4 + 1)P_{\\text{MSH2}} $$\n$$ E[X] = (N - 3)P_{\\text{TP53}} + (N - 4)P_{\\text{BRCA1}} + (N - 3)P_{\\text{EGFR}} + (N - 3)P_{\\text{MSH2}} $$\nWe can group terms with the same coefficient:\n$$ E[X] = (N - 3)(P_{\\text{TP53}} + P_{\\text{EGFR}} + P_{\\text{MSH2}}) + (N - 4)P_{\\text{BRCA1}} $$\nFinally, we substitute the expressions for the probabilities to obtain the final closed-form expression for the expected count in terms of $N$, $p_U$, $p_L$, and $p_D$:\n$$ E[X] = (N - 3)\\left[ \\left(\\frac{p_U + p_L}{26}\\right)^2 \\left(\\frac{p_D}{10}\\right)^2 + \\left(\\frac{p_U + p_L}{26}\\right)^4 + \\left(\\frac{p_U + p_L}{26}\\right)^3 \\left(\\frac{p_D}{10}\\right) \\right] + (N - 4)\\left(\\frac{p_U + p_L}{26}\\right)^4 \\left(\\frac{p_D}{10}\\right) $$\nThis expression represents the final analytical solution derived from the given principles.", "answer": "$$\\boxed{(N - 3)\\left[ \\left(\\frac{p_U + p_L}{26}\\right)^{2} \\left(\\frac{p_D}{10}\\right)^{2} + \\left(\\frac{p_U + p_L}{26}\\right)^{4} + \\left(\\frac{p_U + p_L}{26}\\right)^{3} \\left(\\frac{p_D}{10}\\right) \\right] + (N - 4)\\left(\\frac{p_U + p_L}{26}\\right)^{4} \\left(\\frac{p_D}{10}\\right)}$$", "id": "2390535"}]}