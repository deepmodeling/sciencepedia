{"hands_on_practices": [{"introduction": "To truly understand how a Markov chain models a sequence, we must first learn to translate biological or physical constraints into the language of mathematics. This exercise [@problem_id:2402072] challenges you to build the transition matrix for a hypothetical DNA sequence that alternates between purines and pyrimidines. By then calculating the model's entropy rate, you'll gain hands-on experience with how the transition matrix directly governs the statistical properties and complexity of the sequences it generates.", "problem": "A deoxyribonucleic acid (DNA) sequence over the nucleotide alphabet $\\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$ is modeled as a first-order Markov chain with the following biological constraint: the sequence perfectly alternates between purines $\\{\\mathrm{A},\\mathrm{G}\\}$ and pyrimidines $\\{\\mathrm{C},\\mathrm{T}\\}$. Whenever the current nucleotide is a purine, the next nucleotide is chosen uniformly at random from the pyrimidines, and whenever the current nucleotide is a pyrimidine, the next nucleotide is chosen uniformly at random from the purines. Transitions that do not respect this alternation have probability $0$. Assume the initial distribution equals the unique stationary distribution of this chain.\n\nUsing the ordered state space $(\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T})$, write down the transition matrix $P$ that encodes these rules. Then, using the definition of the Shannon entropy rate for a stationary first-order Markov chain, determine the entropy rate $H$ of this process using the natural logarithm. Express the final answer in nats. The final answer must be a single closed-form expression. No rounding is required.", "solution": "Let the state space be $\\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$ with the ordered indexing $(\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T})$. The biological constraint imposes that from any purine (states $\\mathrm{A}$ or $\\mathrm{G}$) the next state must be a pyrimidine (states $\\mathrm{C}$ or $\\mathrm{T}$), chosen uniformly, and from any pyrimidine (states $\\mathrm{C}$ or $\\mathrm{T}$) the next state must be a purine (states $\\mathrm{A}$ or $\\mathrm{G}$), chosen uniformly. Therefore, for any purine state $i \\in \\{\\mathrm{A},\\mathrm{G}\\}$ and pyrimidine state $j \\in \\{\\mathrm{C},\\mathrm{T}\\}$, the transition probability is $P_{ij}=\\frac{1}{2}$, while $P_{ij}=0$ if $i$ and $j$ are both purines or both pyrimidines. Writing this as a matrix $P$ under the ordering $(\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T})$, we have\n$$\nP \\;=\\;\n\\begin{pmatrix}\n0 & \\tfrac{1}{2} & 0 & \\tfrac{1}{2} \\\\\n\\tfrac{1}{2} & 0 & \\tfrac{1}{2} & 0 \\\\\n0 & \\tfrac{1}{2} & 0 & \\tfrac{1}{2} \\\\\n\\tfrac{1}{2} & 0 & \\tfrac{1}{2} & 0\n\\end{pmatrix}.\n$$\nWe verify that each row sums to $1$, so $P$ is a valid transition matrix.\n\nNext, we determine the stationary distribution $\\pi$. By symmetry between purines and between pyrimidines, and symmetry of the transition structure, the stationary distribution is uniform: $\\pi_{\\mathrm{A}}=\\pi_{\\mathrm{C}}=\\pi_{\\mathrm{G}}=\\pi_{\\mathrm{T}}=\\frac{1}{4}$. One can confirm that $\\pi P=\\pi$ by direct multiplication.\n\nFor a stationary first-order Markov chain with stationary distribution $\\pi$ and transition probabilities $P$, the Shannon entropy rate in nats is defined by\n$$\nH \\;=\\; -\\sum_{i} \\pi_{i} \\sum_{j} P_{ij} \\ln P_{ij}.\n$$\nIn the present chain, each row $i$ has exactly two nonzero transition probabilities, both equal to $\\tfrac{1}{2}$. Therefore, for any state $i$,\n$$\n\\sum_{j} P_{ij} \\ln P_{ij} \\;=\\; \\tfrac{1}{2}\\ln\\!\\big(\\tfrac{1}{2}\\big) \\;+\\; \\tfrac{1}{2}\\ln\\!\\big(\\tfrac{1}{2}\\big)\n\\;=\\; \\ln\\!\\big(\\tfrac{1}{2}\\big).\n$$\nSubstituting into the entropy rate formula,\n$$\nH \\;=\\; -\\sum_{i} \\pi_{i}\\,\\ln\\!\\big(\\tfrac{1}{2}\\big)\n\\;=\\; -\\ln\\!\\big(\\tfrac{1}{2}\\big)\\,\\sum_{i}\\pi_{i}\n\\;=\\; -\\ln\\!\\big(\\tfrac{1}{2}\\big)\n\\;=\\; \\ln 2.\n$$\nThus, the entropy rate of this alternating purineâ€“pyrimidine Markov chain is $\\ln 2$ nats.", "answer": "$$\\boxed{\\ln 2}$$", "id": "2402072"}, {"introduction": "A theoretical model is only as good as its parameters, which are typically estimated from real data. This practice [@problem_id:2402066] explores what happens when we train a model on highly repetitive data, a common scenario in genomics. You will analyze the critical difference between raw Maximum Likelihood Estimation and estimation using pseudocounts, a fundamental technique for preventing overfitting and building more robust sequence models.", "problem": "Consider a deoxyribonucleic acid (DNA) sequence over the alphabet $\\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$. You train a first-order Markov chain on a single linear training string $s = (\\mathrm{CAG})^n$ formed by concatenating the motif $\\mathrm{CAG}$ exactly $n$ times for an integer $n \\ge 2$. You count adjacent pairs $(x_i,x_{i+1})$ left-to-right and do not wrap around at the end of the string. You estimate transition probabilities by maximum likelihood estimation (MLE), that is, for each predecessor symbol $x$, the row of the transition matrix is obtained by normalizing the observed counts of successors $y$ following $x$ so that the probabilities in that row sum to $1$. In a second scenario, you apply symmetric Dirichlet pseudocounts of strength $\\alpha>0$ by adding $\\alpha$ to the count of every possible transition $x\\to y$ for each fixed predecessor $x$ before renormalizing each row to sum to $1$.\n\nWhich statement best describes the estimated transition probabilities in this setting, both without and with pseudocounts?\n\nA. Under MLE on $s=(\\mathrm{CAG})^n$, the only observed transitions are $\\mathrm{C}\\to\\mathrm{A}$, $\\mathrm{A}\\to\\mathrm{G}$, and $\\mathrm{G}\\to\\mathrm{C}$, each estimated with probability $1$ in their respective rows (for rows with at least one observed predecessor), while all other transition probabilities in those rows are $0$; the row for $\\mathrm{T}$ is not estimable because $\\mathrm{T}$ never appears as a predecessor. With symmetric Dirichlet pseudocounts of strength $\\alpha>0$, every row becomes well-defined with strictly positive probabilities, and for each predecessor $x$ and successor $y$ the smoothed estimate has the form $(N_{xy}+\\alpha)/(N_x+4\\alpha)$, where $N_{xy}$ is the observed count of $x\\to y$ and $N_x$ is the total number of times $x$ is observed with a successor. The three observed cyclic transitions remain close to $1$ when $n$ is large but strictly less than $1$ for any finite $n$, and all previously unobserved transitions become small but nonzero; as $n\\to\\infty$, the smoothed estimates for $\\mathrm{C}\\to\\mathrm{A}$, $\\mathrm{A}\\to\\mathrm{G}$, and $\\mathrm{G}\\to\\mathrm{C}$ converge to $1$.\n\nB. Under MLE on $s=(\\mathrm{CAG})^n$, the stationary distribution is uniform over $\\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$ because each nucleotide appears equally often, regardless of the transition structure, and pseudocounts affect only the stationary distribution while leaving the transition probabilities unchanged.\n\nC. Pseudocounts only replace zero transition probabilities by small positive values but do not alter any transition probability that was already equal to $1$; therefore, after smoothing, $\\mathrm{C}\\to\\mathrm{A}$, $\\mathrm{A}\\to\\mathrm{G}$, and $\\mathrm{G}\\to\\mathrm{C}$ remain exactly $1$.\n\nD. Under MLE on $s=(\\mathrm{CAG})^n$, the states $\\mathrm{C}$, $\\mathrm{A}$, and $\\mathrm{G}$ are absorbing because they only transition to themselves, and pseudocounts remove these absorbing states by forcing the transition matrix to be uniform over all $16$ possible transitions.", "solution": "The problem statement has been validated and is scientifically grounded, well-posed, and objective. It presents a standard theoretical exercise in training a first-order Markov chain, which is a fundamental topic in computational biology. All terms are well-defined, and the premises are consistent. We may proceed with the solution.\n\nThe problem asks for an analysis of transition probabilities estimated from a DNA sequence $s = (\\mathrm{CAG})^n$ for an integer $n \\ge 2$, under two different estimation schemes: Maximum Likelihood Estimation (MLE) and MLE with symmetric Dirichlet pseudocounts. The alphabet is $\\mathcal{A} = \\{\\mathrm{A}, \\mathrm{C}, \\mathrm{G}, \\mathrm{T}\\}$.\n\nFirst, we analyze the structure of the training string $s$ to determine the transition counts. The string is $s = \\mathrm{CAGCAG...CAG}$, a concatenation of the motif $\\mathrm{CAG}$ $n$ times. The length of the string is $3n$. We count adjacent pairs $(x_i, x_{i+1})$ for $i = 1, \\dots, 3n-1$.\n\nLet $N_{xy}$ be the number of times nucleotide $x$ is followed by nucleotide $y$. Let $N_x = \\sum_{y \\in \\mathcal{A}} N_{xy}$ be the total number of times $x$ appears as a predecessor.\n\nFor the sequence $s = (\\mathrm{CAG})^n$:\n- The transition $\\mathrm{C}\\to\\mathrm{A}$ occurs when a $\\mathrm{C}$ is at position $3k-2$ for $k=1, \\dots, n$. This accounts for all occurrences of $\\mathrm{C}$ as a predecessor. Thus, $N_C = n$ and $N_{CA} = n$. All other counts $N_{Cy}$ are $0$.\n- The transition $\\mathrm{A}\\to\\mathrm{G}$ occurs when an $\\mathrm{A}$ is at position $3k-1$ for $k=1, \\dots, n$. This accounts for all occurrences of $\\mathrm{A}$ as a predecessor. Thus, $N_A = n$ and $N_{AG} = n$. All other counts $N_{Ay}$ are $0$.\n- The transition $\\mathrm{G}\\to\\mathrm{C}$ occurs when a $\\mathrm{G}$ is at position $3k$ for $k=1, \\dots, n-1$. The last $\\mathrm{G}$ at position $3n$ is at the end of the string and is not a predecessor. This accounts for all occurrences of $\\mathrm{G}$ as a predecessor. Thus, $N_G = n-1$ and $N_{GC} = n-1$. All other counts $N_{Gy}$ are $0$. The condition $n \\ge 2$ ensures that $N_G \\ge 1$.\n- The nucleotide $\\mathrm{T}$ never appears in the sequence, so $N_T=0$ and $N_{Ty}=0$ for all $y \\in \\mathcal{A}$.\n\n**Scenario 1: Maximum Likelihood Estimation (MLE)**\n\nThe MLE for the transition probability $P(y|x)$ is given by the ratio of counts: $P(y|x) = \\frac{N_{xy}}{N_x}$.\n\n- **Row C (from C):** $N_C=n$.\n  $P(\\mathrm{A}|\\mathrm{C}) = \\frac{N_{CA}}{N_C} = \\frac{n}{n} = 1$.\n  $P(\\mathrm{C}|\\mathrm{C}) = P(\\mathrm{G}|\\mathrm{C}) = P(\\mathrm{T}|\\mathrm{C}) = 0$.\n- **Row A (from A):** $N_A=n$.\n  $P(\\mathrm{G}|\\mathrm{A}) = \\frac{N_{AG}}{N_A} = \\frac{n}{n} = 1$.\n  $P(\\mathrm{A}|\\mathrm{A}) = P(\\mathrm{C}|\\mathrm{A}) = P(\\mathrm{T}|\\mathrm{A}) = 0$.\n- **Row G (from G):** $N_G=n-1$. Since $n \\ge 2$, $N_G \\ge 1$.\n  $P(\\mathrm{C}|\\mathrm{G}) = \\frac{N_{GC}}{N_G} = \\frac{n-1}{n-1} = 1$.\n  $P(\\mathrm{A}|\\mathrm{G}) = P(\\mathrm{G}|\\mathrm{G}) = P(\\mathrm{T}|\\mathrm{G}) = 0$.\n- **Row T (from T):** $N_T=0$. The denominator is zero, so the probabilities for transitions from $\\mathrm{T}$ are not estimable from the data.\n\nThe MLE transition matrix $P_{MLE}$ is therefore (with `u` for undefined):\n$$\nP_{MLE} = \\begin{pmatrix}\n  P(A|A) & P(C|A) & P(G|A) & P(T|A) \\\\\n  P(A|C) & P(C|C) & P(G|C) & P(T|C) \\\\\n  P(A|G) & P(C|G) & P(G|G) & P(T|G) \\\\\n  P(A|T) & P(C|T) & P(G|T) & P(T|T)\n \\end{pmatrix}\n =\n \\begin{pmatrix}\n  0 & 0 & 1 & 0 \\\\\n  1 & 0 & 0 & 0 \\\\\n  0 & 1 & 0 & 0 \\\\\n  u & u & u & u\n \\end{pmatrix}\n$$\n(assuming row order A, C, G, T).\n\n**Scenario 2: Symmetric Dirichlet Pseudocounts**\n\nWith a symmetric Dirichlet prior of strength $\\alpha > 0$, we add a pseudocount of $\\alpha$ to every transition count $N_{xy}$. The smoothed probability $P_{\\alpha}(y|x)$ is:\n$$ P_{\\alpha}(y|x) = \\frac{N_{xy} + \\alpha}{N_x + k\\alpha} $$\nwhere $k$ is the size of the alphabet, which is $k=4$.\n\n- **Row C (from C):** $N_C=n$.\n  $P_{\\alpha}(\\mathrm{A}|\\mathrm{C}) = \\frac{N_{CA}+\\alpha}{N_C+4\\alpha} = \\frac{n+\\alpha}{n+4\\alpha}$.\n  $P_{\\alpha}(\\mathrm{C}|\\mathrm{C}) = P_{\\alpha}(\\mathrm{G}|\\mathrm{C}) = P_{\\alpha}(\\mathrm{T}|\\mathrm{C}) = \\frac{0+\\alpha}{n+4\\alpha} = \\frac{\\alpha}{n+4\\alpha}$.\n- **Row A (from A):** $N_A=n$.\n  $P_{\\alpha}(\\mathrm{G}|\\mathrm{A}) = \\frac{N_{AG}+\\alpha}{N_A+4\\alpha} = \\frac{n+\\alpha}{n+4\\alpha}$.\n  $P_{\\alpha}(\\mathrm{A}|\\mathrm{A}) = P_{\\alpha}(\\mathrm{C}|\\mathrm{A}) = P_{\\alpha}(\\mathrm{T}|\\mathrm{A}) = \\frac{\\alpha}{n+4\\alpha}$.\n- **Row G (from G):** $N_G=n-1$.\n  $P_{\\alpha}(\\mathrm{C}|\\mathrm{G}) = \\frac{N_{GC}+\\alpha}{N_G+4\\alpha} = \\frac{n-1+\\alpha}{n-1+4\\alpha}$.\n  $P_{\\alpha}(\\mathrm{A}|\\mathrm{G}) = P_{\\alpha}(\\mathrm{G}|\\mathrm{G}) = P_{\\alpha}(\\mathrm{T}|\\mathrm{G}) = \\frac{\\alpha}{n-1+4\\alpha}$.\n- **Row T (from T):** $N_T=0$.\n  $P_{\\alpha}(y|\\mathrm{T}) = \\frac{N_{Ty}+\\alpha}{N_T+4\\alpha} = \\frac{0+\\alpha}{0+4\\alpha} = \\frac{1}{4}$ for all $y \\in \\{\\mathrm{A}, \\mathrm{C}, \\mathrm{G}, \\mathrm{T}\\}$.\n\nWith pseudocounts, every transition probability is strictly positive. The probabilities for the observed transitions $\\mathrm{C}\\to\\mathrm{A}$, $\\mathrm{A}\\to\\mathrm{G}$, and $\\mathrm{G}\\to\\mathrm{C}$ are all strictly less than $1$ for any finite $n$ and $\\alpha > 0$. For instance, $\\frac{n+\\alpha}{n+4\\alpha} = 1 - \\frac{3\\alpha}{n+4\\alpha} < 1$. As $n \\to \\infty$, these probabilities approach $1$. For example, $\\lim_{n \\to \\infty} \\frac{n+\\alpha}{n+4\\alpha} = \\lim_{n \\to \\infty} \\frac{1+\\alpha/n}{1+4\\alpha/n} = 1$.\n\nNow, we evaluate the given options.\n\n**Option A:**\n- *\"Under MLE on $s=(\\mathrm{CAG})^n$, the only observed transitions are $\\mathrm{C}\\to\\mathrm{A}$, $\\mathrm{A}\\to\\mathrm{G}$, and $\\mathrm{G}\\to\\mathrm{C}$, each estimated with probability $1$ in their respective rows (for rows with at least one observed predecessor), while all other transition probabilities in those rows are $0$.\"* This is correct, as derived above.\n- *\"the row for $\\mathrm{T}$ is not estimable because $\\mathrm{T}$ never appears as a predecessor.\"* This is correct.\n- *\"With symmetric Dirichlet pseudocounts of strength $\\alpha>0$, every row becomes well-defined with strictly positive probabilities,...\"* This is correct. Denominators become $N_x+4\\alpha > 0$ and numerators become $N_{xy}+\\alpha > 0$.\n- *\"...for each predecessor $x$ and successor $y$ the smoothed estimate has the form $(N_{xy}+\\alpha)/(N_x+4\\alpha)$, where $N_{xy}$ is the observed count of $x\\to y$ and $N_x$ is the total number of times $x$ is observed with a successor.\"* This is the correct formula for this type of smoothing.\n- *\"The three observed cyclic transitions remain close to $1$ when $n$ is large but strictly less than $1$ for any finite $n$, and all previously unobserved transitions become small but nonzero.\"* This is correct.\n- *\"as $n\\to\\infty$, the smoothed estimates for $\\mathrm{C}\\to\\mathrm{A}$, $\\mathrm{A}\\to\\mathrm{G}$, and $\\mathrm{G}\\to\\mathrm{C}$ converge to $1$.\"* This is also correct.\nVerdict: **Correct**.\n\n**Option B:**\n- *\"Under MLE on $s=(\\mathrm{CAG})^n$, the stationary distribution is uniform over $\\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$ because each nucleotide appears equally often,...\"* This is incorrect. The nucleotide $\\mathrm{T}$ does not appear at all, so the premise of equal frequency is false. Furthermore, the stationary distribution is derived from the transition matrix, not directly from base composition, and in this case, the chain is not irreducible, complicating the notion of a unique stationary distribution over all four states. In the communicating class $\\{\\mathrm{A}, \\mathrm{C}, \\mathrm{G}\\}$, the stationary distribution would be $(\\frac{1}{3}, \\frac{1}{3}, \\frac{1}{3})$, but it would be $0$ for $\\mathrm{T}$.\n- *\"...and pseudocounts affect only the stationary distribution while leaving the transition probabilities unchanged.\"* This is fundamentally incorrect. The entire purpose of pseudocounts is to alter the transition probabilities to avoid zero-probability events.\nVerdict: **Incorrect**.\n\n**Option C:**\n- *\"Pseudocounts only replace zero transition probabilities by small positive values but do not alter any transition probability that was already equal to $1$.\"* This is incorrect. As shown in the derivation, a probability of $1$ (e.g., $P(\\mathrm{A}|\\mathrm{C})=1$) gets changed to $P_\\alpha(\\mathrm{A}|\\mathrm{C}) = \\frac{n+\\alpha}{n+4\\alpha}$, which is strictly less than $1$. Smoothing affects all probability estimates in a given row, not just the zero-valued ones.\n- *\"...therefore, after smoothing, $\\mathrm{C}\\to\\mathrm{A}$, $\\mathrm{A}\\to\\mathrm{G}$, and $\\mathrm{G}\\to\\mathrm{C}$ remain exactly $1$.\"* This is a false conclusion based on a false premise.\nVerdict: **Incorrect**.\n\n**Option D:**\n- *\"Under MLE on $s=(\\mathrm{CAG})^n$, the states $\\mathrm{C}$, $\\mathrm{A}$, and $\\mathrm{G}$ are absorbing because they only transition to themselves,...\"* This is incorrect. An absorbing state $x$ has $P(x|x)=1$. Here, we have $P(\\mathrm{C}|\\mathrm{C})=0$, $P(\\mathrm{A}|\\mathrm{A})=0$, and $P(\\mathrm{G}|\\mathrm{G})=0$. These states form a deterministic cycle, they are not absorbing.\n- *\"...and pseudocounts remove these absorbing states by forcing the transition matrix to be uniform over all $16$ possible transitions.\"* This is incorrect. While pseudocounts ensure all transitions are possible (thus removing any absorbing states if they existed), they do not result in a uniform matrix. The smoothed probabilities heavily depend on the original non-zero counts. Only the row for T, which had no observed counts, becomes uniform.\nVerdict: **Incorrect**.\n\nIn conclusion, Option A provides a complete and accurate description of the outcomes for both estimation methods.", "answer": "$$\\boxed{A}$$", "id": "2402066"}, {"introduction": "So far, we have explored models of a fixed order, but a critical question in sequence analysis is choosing the *right* order. A model that is too simple will miss important patterns, while one that is too complex will overfit the data. This final hands-on practice [@problem_id:2402020] challenges you to implement the Bayesian Information Criterion (BIC), a powerful method for model selection, to find the optimal Markov chain order for various DNA sequences, bridging theory with practical application.", "problem": "You are given a deoxyribonucleic acid (DNA) sequence over the alphabet $\\{A,C,G,T\\}$ and an integer upper bound $k_{\\max}$. For each integer model order $k$ with $0 \\le k \\le k_{\\max}$, consider a $k$th-order Markov model for the sequence. Let the sequence be $x_1,x_2,\\dots,x_n$ with length $n$. For each $k$, define the conditional likelihood\n$$\nL_k(x_{1:n}) \\;=\\; \\prod_{t=k+1}^{n} P\\!\\left(x_t \\,\\middle|\\, x_{t-k},x_{t-k+1},\\dots,x_{t-1}\\right),\n$$\nand define the log-likelihood\n$$\n\\ell_k(x_{1:n}) \\;=\\; \\sum_{t=k+1}^{n} \\log P\\!\\left(x_t \\,\\middle|\\, x_{t-k},x_{t-k+1},\\dots,x_{t-1}\\right),\n$$\nwhere $\\log$ denotes the natural logarithm. For each $k$, estimate the conditional transition probabilities by the Maximum Likelihood Estimator (MLE): for every length-$k$ context $s \\in \\{A,C,G,T\\}^k$ that appears among $\\{x_{t-k},\\dots,x_{t-1}\\}$ for some $t \\in \\{k+1,\\dots,n\\}$, and for each symbol $a \\in \\{A,C,G,T\\}$,\n$$\n\\widehat{P}(a \\mid s) \\;=\\; \\frac{N(s,a)}{N(s,\\ast)},\n$$\nwhere $N(s,a)$ is the number of indices $t \\in \\{k+1,\\dots,n\\}$ with $(x_{t-k},\\dots,x_{t-1})=s$ and $x_t=a$, and $N(s,\\ast)=\\sum_{b \\in \\{A,C,G,T\\}} N(s,b)$. If a context $s$ is not observed (that is, $N(s,\\ast)=0$), it contributes neither to the likelihood nor to the parameter count defined below.\n\nDefine the Bayesian Information Criterion (BIC) for order $k$ as\n$$\n\\mathrm{BIC}(k) \\;=\\; -2\\,\\ell_k(x_{1:n}) \\;+\\; p_k \\,\\log T_k,\n$$\nwhere $T_k = n-k$ is the effective sample size (the number of conditioned prediction events), and $p_k$ is the number of free parameters in the fitted model, taken here as\n$$\np_k \\;=\\; \\left(\\#\\text{ of distinct observed length-}k\\text{ contexts } s \\text{ with } N(s,\\ast)>0\\right)\\times(4-1).\n$$\nFor $k=0$, interpret the context as the empty string with a single observed context if $n \\ge 1$, and take $T_0 = n$. In all cases, use the natural logarithm.\n\nYour task is to determine, for each test case, the optimal order $k^\\star \\in \\{0,1,\\dots,k_{\\max}\\}$ that minimizes $\\mathrm{BIC}(k)$. In the event of a tie (multiple $k$ achieving the same minimal value), select the smallest such $k$.\n\nThe program you write must implement the definitions above directly from first principles. No external input is required; the program must internally evaluate the following test suite, each specified by a DNA sequence $x_{1:n}$ and an integer $k_{\\max}$, with the constraint $0 \\le k_{\\max} \\le n-1$ so that $T_k \\ge 1$ for all considered $k$.\n\nTest suite:\n- Test case $1$: sequence = \"ATATATATATAT\", $k_{\\max} = 3$.\n- Test case $2$: sequence = \"AC\", $k_{\\max} = 1$.\n- Test case $3$: sequence = \"ATATATAA\", $k_{\\max} = 2$.\n- Test case $4$: sequence = \"GATTACA\", $k_{\\max} = 0$.\n- Test case $5$: sequence = \"ACGTA\", $k_{\\max} = 4$.\n- Test case $6$: sequence = \"AAAAAAA\", $k_{\\max} = 4$.\n\nYour program should produce a single line of output containing the results as a comma-separated list of integers enclosed in square brackets (for example, \"[0,1,2]\" if there were three test cases). The required output for this problem is a single line of the form\n\"[k1,k2,k3,k4,k5,k6]\"\nwhere each $k_i$ is the optimal order for test case $i$ as defined above. No physical units are involved in this problem; all outputs are pure integers.", "solution": "The problem presents a task of model order selection for Markov chains modeling a given deoxyribonucleic acid (DNA) sequence. This is a standard problem in statistical inference and computational biology. The validity of the problem statement is confirmed as it is scientifically grounded in established statistical theory, well-posed with all necessary information and constraints provided, and objective in its formulation. All definitions, including the log-likelihood $\\ell_k$, the Maximum Likelihood Estimator (MLE) for transition probabilities, the number of free parameters $p_k$, the effective sample size $T_k$, and the Bayesian Information Criterion (BIC), are standard and internally consistent.\n\nThe core principle is the application of the Bayesian Information Criterion (BIC) to select the optimal order $k$ for a Markov model of a sequence $x_{1:n}$. The BIC for a model of order $k$ is defined as:\n$$\n\\mathrm{BIC}(k) = -2\\,\\ell_k(x_{1:n}) + p_k \\,\\log T_k\n$$\nThis criterion embodies the principle of parsimony, or Occam's razor, by balancing the model's goodness-of-fit to the data with its complexity.\n- The term $-2\\,\\ell_k(x_{1:n})$ measures the lack of fit. Here, $\\ell_k(x_{1:n})$ is the conditional log-likelihood of the sequence given the model. A higher log-likelihood indicates a better fit, which leads to a smaller value for this term.\n- The term $p_k \\,\\log T_k$ is a penalty for model complexity. $p_k$ is the number of free parameters in the model, and $T_k = n-k$ is the effective sample size for a $k$th-order model. A more complex model (larger $p_k$) is penalized more heavily, especially when the sample size $T_k$ is small.\n\nOur goal is to find the order $k^\\star \\in \\{0, 1, \\dots, k_{\\max}\\}$ that minimizes $\\mathrm{BIC}(k)$. To achieve this, we will implement an algorithm that iterates through each possible order $k$ from $0$ to $k_{\\max}$, calculates $\\mathrm{BIC}(k)$ for each, and then identifies the $k$ that yields the minimum BIC value.\n\nThe calculation of $\\mathrm{BIC}(k)$ for a given sequence $x_{1:n}$ and order $k$ proceeds as follows:\n\nFirst, we determine the number of free parameters, $p_k$. The problem specifies that\n$$\np_k = (\\#\\text{ of distinct observed length-}k\\text{ contexts } s \\text{ with } N(s,\\ast)>0)\\times(4-1)\n$$\nFor each distinct observed context (a prefix of length $k$), there are $4$ possible subsequent symbols from the alphabet $\\{A,C,G,T\\}$. The probabilities of these $4$ outcomes must sum to $1$, which leaves $4-1=3$ free parameters to estimate for that context. Thus, $p_k$ is $3$ times the number of unique length-$k$ substrings that appear in the sequence as contexts for subsequent symbols.\nFor the special case $k=0$, the context is the empty string. If the sequence is non-empty ($n \\ge 1$), this single context is always observed. Hence, $p_0 = 1 \\times 3 = 3$.\n\nSecond, we calculate the conditional log-likelihood, $\\ell_k$. The formula is:\n$$\n\\ell_k(x_{1:n}) = \\sum_{t=k+1}^{n} \\log \\widehat{P}(x_t \\mid x_{t-k}, \\dots, x_{t-1})\n$$\nThe probabilities $\\widehat{P}(a \\mid s)$ are estimated using the Method of Maximum Likelihood (MLE), which in this case corresponds to the empirical frequencies:\n$$\n\\widehat{P}(a \\mid s) = \\frac{N(s,a)}{N(s,\\ast)}\n$$\nwhere $N(s,a)$ is the number of times the substring $sa$ appears in the sequence (in the appropriate positions) and $N(s,\\ast)$ is the total count of the context $s$. The log-likelihood sum can be computed more efficiently by grouping identical terms:\n$$\n\\ell_k(x_{1:n}) = \\sum_{s,a} N(s,a) \\log \\left( \\frac{N(s,a)}{N(s,\\ast)} \\right)\n$$\nwhere the sum is over all observed context-symbol pairs $(s,a)$. This requires counting all relevant substrings of length $k$ (contexts) and length $k+1$ (transitions).\n\nFor the case $k=0$, the model assumes symbols are independent and identically distributed. The probability of a symbol $a$ is its overall frequency in the sequence, $\\widehat{P}(a) = N(a)/n$. The log-likelihood is:\n$$\n\\ell_0(x_{1:n}) = \\sum_{a \\in \\{A,C,G,T\\}} N(a) \\log \\left( \\frac{N(a)}{n} \\right)\n$$\n\nFinally, having computed $\\ell_k$ and $p_k$, and with $T_k = n-k$, we can calculate $\\mathrm{BIC}(k)$. Note that the logarithm is the natural logarithm, $\\log(\\cdot) = \\ln(\\cdot)$. If $T_k=1$, then $\\log T_k = 0$, and the penalty term vanishes. The problem constraints ($0 \\le k_{\\max} \\le n-1$) ensure that $T_k \\ge 1$ for all considered $k$.\n\nThe overall algorithm is as follows:\n1. For each test case (sequence `x`, `k_max`):\n2. Initialize an empty list to store BIC values.\n3. For each integer $k$ from $0$ to $k_{\\max}$:\n    a. If $k=0$: Count symbol frequencies $\\{N(a)\\}$. Calculate $\\ell_0$ and $p_0=3$. Compute $\\mathrm{BIC}(0) = -2\\ell_0 + p_0 \\log n$.\n    b. If $k>0$:\n        i. Iterate through the sequence from index $k$ to $n-1$ to identify all $n-k$ transition events.\n        ii. Count the occurrences of all unique length-$k$ contexts, $N(s,\\ast)$, and all unique length-$(k+1)$ transition sequences, $N(s,a)$.\n        iii. Calculate $p_k$ based on the number of unique contexts.\n        iv. Calculate $\\ell_k$ using the counts.\n        v. Compute $\\mathrm{BIC}(k) = -2\\ell_k + p_k \\log(n-k)$.\n    c. Store the calculated $\\mathrm{BIC}(k)$.\n4. Find the index $k^\\star$ that corresponds to the minimum value in the list of BIC scores. The problem states to choose the smallest such $k$ in case of a tie, which is handled naturally by finding the first occurrence of the minimum value.\n5. Collect the optimal $k^\\star$ values for all test cases and format them as the final result.", "answer": "```python\nimport numpy as np\n\ndef calculate_bic_k(seq: str, k: int) -> float:\n    \"\"\"\n    Calculates the Bayesian Information Criterion (BIC) for a k-th order Markov model.\n\n    Args:\n        seq: The DNA sequence.\n        k: The order of the Markov model.\n\n    Returns:\n        The BIC value for the model.\n    \"\"\"\n    n = len(seq)\n    \n    if k == 0:\n        # --- Handle 0-th order model ---\n        T_k = n\n        if T_k < 1:\n            return float('inf')\n\n        # Count symbol frequencies\n        counts = {}\n        for char in seq:\n            counts[char] = counts.get(char, 0) + 1\n        \n        # Calculate log-likelihood ell_0\n        log_likelihood = 0.0\n        for char_count in counts.values():\n            if char_count > 0:\n                prob = char_count / n\n                log_likelihood += char_count * np.log(prob)\n        \n        # Number of free parameters p_0\n        # One context (empty string) means 4-1=3 free parameters.\n        p_k = 3\n        \n    else: # k > 0\n        # --- Handle k-th order model (k > 0) ---\n        T_k = n - k\n        if T_k < 1:\n            return float('inf')\n\n        # Count contexts (k-mers) and transitions (k+1)-mers\n        context_counts = {}\n        transition_counts = {}\n        \n        for i in range(k, n):\n            context = seq[i-k:i]\n            symbol = seq[i]\n            \n            context_counts[context] = context_counts.get(context, 0) + 1\n            \n            transition_key = (context, symbol)\n            transition_counts[transition_key] = transition_counts.get(transition_key, 0) + 1\n\n        if not context_counts:\n            # This case occurs if n <= k, which is prevented by the problem's\n            # constraint k_max <= n-1. Still, as a safeguard:\n            return 0.0 if T_k <= 1 else float('inf')\n\n        # Calculate log-likelihood ell_k\n        log_likelihood = 0.0\n        for (context, _), trans_count in transition_counts.items():\n            ctx_count = context_counts[context]\n            # Probability P(symbol | context) = N(context, symbol) / N(context, *)\n            prob = trans_count / ctx_count\n            # Summand is N(s,a) * log(P(a|s))\n            log_likelihood += trans_count * np.log(prob)\n        \n        # Number of free parameters p_k\n        num_distinct_contexts = len(context_counts)\n        p_k = num_distinct_contexts * (4 - 1)\n\n    # Calculate BIC penalty term: p_k * log(T_k)\n    # The term is 0 if T_k=1, as log(1)=0.\n    penalty_term = 0.0\n    if T_k > 1:\n        penalty_term = p_k * np.log(T_k)\n        \n    bic = -2 * log_likelihood + penalty_term\n    return bic\n\ndef find_optimal_k(seq: str, k_max: int) -> int:\n    \"\"\"\n    Finds the optimal Markov model order k that minimizes the BIC.\n\n    Args:\n        seq: The DNA sequence.\n        k_max: The maximum order to test.\n\n    Returns:\n        The optimal order k*.\n    \"\"\"\n    bic_values = []\n    for k in range(k_max + 1):\n        bic_k = calculate_bic_k(seq, k)\n        bic_values.append(bic_k)\n    \n    # Find the index of the minimum BIC value.\n    # np.argmin() correctly breaks ties by returning the first index.\n    min_bic = float('inf')\n    optimal_k = -1\n\n    for k, bic in enumerate(bic_values):\n        if bic < min_bic:\n            min_bic = bic\n            optimal_k = k\n            \n    return optimal_k\n\ndef solve():\n    \"\"\"\n    Solves the problem for the given suite of test cases.\n    \"\"\"\n    test_cases = [\n        {\"sequence\": \"ATATATATATAT\", \"k_max\": 3},\n        {\"sequence\": \"AC\", \"k_max\": 1},\n        {\"sequence\": \"ATATATAA\", \"k_max\": 2},\n        {\"sequence\": \"GATTACA\", \"k_max\": 0},\n        {\"sequence\": \"ACGTA\", \"k_max\": 4},\n        {\"sequence\": \"AAAAAAA\", \"k_max\": 4},\n    ]\n\n    results = []\n    for case in test_cases:\n        seq = case[\"sequence\"]\n        k_max = case[\"k_max\"]\n        \n        # Ensure constraint k_max <= n-1 is met, as per problem.\n        n = len(seq)\n        if not (0 <= k_max <= n - 1):\n            raise ValueError(f\"Invalid k_max={k_max} for sequence length n={n}\")\n            \n        optimal_k = find_optimal_k(seq, k_max)\n        results.append(optimal_k)\n\n    # Print the final result in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2402020"}]}