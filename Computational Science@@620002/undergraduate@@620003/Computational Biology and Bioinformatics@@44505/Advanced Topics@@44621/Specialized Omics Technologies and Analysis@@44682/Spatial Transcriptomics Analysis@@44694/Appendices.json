{"hands_on_practices": [{"introduction": "The first step in many spatial analyses is to move beyond simple visual inspection and quantitatively determine if gene expression is randomly distributed or exhibits a meaningful spatial pattern. Moran's $I$ is a fundamental statistic that measures spatial autocorrelation, allowing us to test whether nearby locations tend to have similar (positive autocorrelation) or dissimilar (negative autocorrelation) values. This exercise provides direct practice in computing Moran's $I$ from the ground up, helping you build a core intuition for how spatial patterns are quantified using gene expression values and a spatial neighborhood graph [@problem_id:2430178].", "problem": "In a simplified Spatial Transcriptomics (ST) assay, consider a tissue section measured at $4$ spatial spots labeled $1, 2, 3, 4$ arranged in a $2 \\times 2$ grid. The undirected spatial adjacency is encoded by the symmetric spatial weights matrix $W$ with zero diagonal:\n$$\nW \\;=\\; \\begin{pmatrix}\n0 & 1 & 1 & 0 \\\\\n1 & 0 & 0 & 1 \\\\\n1 & 0 & 0 & 1 \\\\\n0 & 1 & 1 & 0\n\\end{pmatrix}.\n$$\nA gene set consists of two genes $g_1$ and $g_2$. Their normalized expression values at the $4$ spots are given by\n$$\ng_1: \\;(8,\\;7,\\;2,\\;3), \\qquad g_2: \\;(10,\\;9,\\;1,\\;2).\n$$\nDefine the spot-wise gene set expression $x_i$ to be the arithmetic mean of the two gene expressions at spot $i$, that is $x_i = \\frac{1}{2}\\left(g_1(i) + g_2(i)\\right)$. Let $\\bar{x}$ denote the mean of $x_i$ across all spots. Using the conventional definition of Moran’s $I$ for a single variable on a fixed spatial weights matrix without row-standardization,\n$$\nI \\;=\\; \\frac{n}{S_0} \\cdot \\frac{\\sum_{i=1}^{n}\\sum_{j=1}^{n} w_{ij}\\,\\bigl(x_i - \\bar{x}\\bigr)\\bigl(x_j - \\bar{x}\\bigr)}{\\sum_{i=1}^{n} \\bigl(x_i - \\bar{x}\\bigr)^2},\n$$\nwith $n = 4$ and $S_0 = \\sum_{i=1}^{n}\\sum_{j=1}^{n} w_{ij}$, compute the Moran’s $I$ statistic on the gene set average expression. Provide the final Moran’s $I$ as an exact simplified fraction (dimensionless). Do not round your answer.", "solution": "The problem statement has been rigorously validated. It is self-contained, scientifically grounded in the field of spatial statistics as applied to bioinformatics, and mathematically well-posed. All necessary data and definitions are provided without ambiguity or contradiction. Therefore, the problem is valid, and we proceed with the a complete, reasoned solution.\n\nThe task is to compute the Moran's $I$ statistic for a given gene set's average expression across $n=4$ spatial spots. The formula for Moran's $I$ is given as:\n$$\nI \\;=\\; \\frac{n}{S_0} \\cdot \\frac{\\sum_{i=1}^{n}\\sum_{j=1}^{n} w_{ij}\\,\\bigl(x_i - \\bar{x}\\bigr)\\bigl(x_j - \\bar{x}\\bigr)}{\\sum_{i=1}^{n} \\bigl(x_i - \\bar{x}\\bigr)^2}\n$$\n\nFirst, we calculate the spot-wise gene set expression, $x_i$, which is the arithmetic mean of the expressions of genes $g_1$ and $g_2$ at each spot $i$. The gene expression values are given as vectors for spots $1, 2, 3, 4$:\n$$\ng_1: \\;(8,\\;7,\\;2,\\;3) \\\\\ng_2: \\;(10,\\;9,\\;1,\\;2)\n$$\nThe spot-wise average expressions $x_i$ are:\n$$\nx_1 = \\frac{1}{2}(g_1(1) + g_2(1)) = \\frac{1}{2}(8 + 10) = 9 \\\\\nx_2 = \\frac{1}{2}(g_1(2) + g_2(2)) = \\frac{1}{2}(7 + 9) = 8 \\\\\nx_3 = \\frac{1}{2}(g_1(3) + g_2(3)) = \\frac{1}{2}(2 + 1) = \\frac{3}{2} \\\\\nx_4 = \\frac{1}{2}(g_1(4) + g_2(4)) = \\frac{1}{2}(3 + 2) = \\frac{5}{2}\n$$\nThe vector of gene set expressions is $X = \\begin{pmatrix} 9 & 8 & \\frac{3}{2} & \\frac{5}{2} \\end{pmatrix}^T$.\n\nNext, we calculate the mean expression $\\bar{x}$ across all $n=4$ spots:\n$$\n\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n} x_i = \\frac{1}{4} \\left(9 + 8 + \\frac{3}{2} + \\frac{5}{2}\\right) = \\frac{1}{4} \\left(17 + \\frac{8}{2}\\right) = \\frac{1}{4}(17 + 4) = \\frac{21}{4}\n$$\n\nNow, we compute the deviation of each spot's expression from the mean, $z_i = x_i - \\bar{x}$:\n$$\nz_1 = 9 - \\frac{21}{4} = \\frac{36 - 21}{4} = \\frac{15}{4} \\\\\nz_2 = 8 - \\frac{21}{4} = \\frac{32 - 21}{4} = \\frac{11}{4} \\\\\nz_3 = \\frac{3}{2} - \\frac{21}{4} = \\frac{6 - 21}{4} = -\\frac{15}{4} \\\\\nz_4 = \\frac{5}{2} - \\frac{21}{4} = \\frac{10 - 21}{4} = -\\frac{11}{4}\n$$\nLet $Z$ be the column vector of these deviations: $Z = \\begin{pmatrix} \\frac{15}{4} & \\frac{11}{4} & -\\frac{15}{4} & -\\frac{11}{4} \\end{pmatrix}^T$.\n\nWe then compute the denominator of the Moran's $I$ fraction, which is the sum of squared deviations:\n$$\n\\sum_{i=1}^{4} (x_i - \\bar{x})^2 = \\sum_{i=1}^{4} z_i^2 = \\left(\\frac{15}{4}\\right)^2 + \\left(\\frac{11}{4}\\right)^2 + \\left(-\\frac{15}{4}\\right)^2 + \\left(-\\frac{11}{4}\\right)^2 \\\\\n= \\frac{225}{16} + \\frac{121}{16} + \\frac{225}{16} + \\frac{121}{16} = \\frac{2 \\times (225 + 121)}{16} = \\frac{2 \\times 346}{16} = \\frac{346}{8} = \\frac{173}{4}\n$$\n\nNext, we evaluate the terms in the numerator. First, $S_0$ is the sum of all weights in the matrix $W$:\n$$\nW = \\begin{pmatrix}\n0 & 1 & 1 & 0 \\\\\n1 & 0 & 0 & 1 \\\\\n1 & 0 & 0 & 1 \\\\\n0 & 1 & 1 & 0\n\\end{pmatrix}\n$$\n$$\nS_0 = \\sum_{i=1}^{4}\\sum_{j=1}^{4} w_{ij} = 1+1+1+1+1+1+1+1 = 8\n$$\nThe quadratic form in the numerator can be expressed in matrix notation as $Z^T W Z$:\n$$\n\\sum_{i=1}^{4}\\sum_{j=1}^{4} w_{ij}\\,(x_i - \\bar{x})(x_j - \\bar{x}) = Z^T W Z\n$$\nWe first compute the product $W Z$:\n$$\nW Z = \\begin{pmatrix}\n0 & 1 & 1 & 0 \\\\\n1 & 0 & 0 & 1 \\\\\n1 & 0 & 0 & 1 \\\\\n0 & 1 & 1 & 0\n\\end{pmatrix}\n\\begin{pmatrix}\n15/4 \\\\\n11/4 \\\\\n-15/4 \\\\\n-11/4\n\\end{pmatrix} =\n\\begin{pmatrix}\n(1)(\\frac{11}{4}) + (1)(-\\frac{15}{4}) \\\\\n(1)(\\frac{15}{4}) + (1)(-\\frac{11}{4}) \\\\\n(1)(\\frac{15}{4}) + (1)(-\\frac{11}{4}) \\\\\n(1)(\\frac{11}{4}) + (1)(-\\frac{15}{4})\n\\end{pmatrix} =\n\\begin{pmatrix}\n-4/4 \\\\\n4/4 \\\\\n4/4 \\\\\n-4/4\n\\end{pmatrix} =\n\\begin{pmatrix}\n-1 \\\\\n1 \\\\\n1 \\\\\n-1\n\\end{pmatrix}\n$$\nNow we compute the final quadratic form:\n$$\nZ^T W Z = \\begin{pmatrix} \\frac{15}{4} & \\frac{11}{4} & -\\frac{15}{4} & -\\frac{11}{4} \\end{pmatrix}\n\\begin{pmatrix}\n-1 \\\\\n1 \\\\\n1 \\\\\n-1\n\\end{pmatrix} \\\\\n= \\left(\\frac{15}{4}\\right)(-1) + \\left(\\frac{11}{4}\\right)(1) + \\left(-\\frac{15}{4}\\right)(1) + \\left(-\\frac{11}{4}\\right)(-1) \\\\\n= -\\frac{15}{4} + \\frac{11}{4} - \\frac{15}{4} + \\frac{11}{4} = \\frac{-15+11-15+11}{4} = \\frac{-8}{4} = -2\n$$\n\nFinally, we substitute all computed values into the Moran's $I$ formula:\n$$\nI = \\frac{n}{S_0} \\cdot \\frac{Z^T W Z}{\\sum z_i^2} = \\frac{4}{8} \\cdot \\frac{-2}{173/4} = \\frac{1}{2} \\cdot \\frac{-2 \\times 4}{173} = \\frac{1}{2} \\cdot \\frac{-8}{173} = -\\frac{4}{173}\n$$\nThe result is an exact, simplified fraction as required. The negative value indicates negative spatial autocorrelation for the given gene set expression, meaning that adjacent spots tend to have dissimilar expression values.", "answer": "$$\n\\boxed{-\\frac{4}{173}}\n$$", "id": "2430178"}, {"introduction": "Beyond identifying broad patterns, we can leverage spatial information to uncover novel biological states. Cells at the interface between two distinct tissue types, for example, often exhibit unique expression profiles as they mediate cross-tissue communication. This practice guides you in defining cell populations not by pre-existing labels alone, but by their spatial context, specifically classifying them as 'boundary' or 'interior' based on the identity of their nearest neighbors [@problem_id:2430130]. By implementing an algorithm to perform differential expression analysis between these spatially-defined groups, you will learn a powerful technique for discovering genes that mediate tissue organization and maintain microenvironmental niches.", "problem": "Given a set of spatially resolved messenger ribonucleic acid (mRNA) expression measurements and two-dimensional (2D) coordinates for individual cells, consider a fixed target cell type labeled by an integer $t^\\star$. Let $X \\in \\mathbb{R}^{n \\times g}$ denote the nonnegative expression matrix with $n$ rows (cells) and $g$ columns (genes), where entry $x_{ij}$ is the expression of gene $j$ in cell $i$. Let $C \\in \\mathbb{R}^{n \\times 2}$ denote the coordinate matrix, where the $i$-th row gives the 2D location of cell $i$. Let $T \\in \\{0,1,2,\\dots\\}^n$ be the vector of integer cell-type labels. All indices are zero-based; genes are indexed by $j \\in \\{0,1,\\dots,g-1\\}$ and cells by $i \\in \\{0,1,\\dots,n-1\\}$.\n\nDefine the $k$-nearest neighbors (KNN) of a cell $i$ to be the set of exactly $k$ distinct indices of other cells that minimize the Euclidean distance in $C$ to cell $i$. The Euclidean distance between cells $i$ and $i'$ is\n$$\nd(i,i') = \\sqrt{(C_{i,0} - C_{i',0})^2 + (C_{i,1} - C_{i',1})^2}.\n$$\nIf there is a tie at the $k$-th smallest distance, break ties deterministically by sorting candidate neighbors by the pair $(d(i,i'), i')$ in ascending lexicographic order (distance first, then index), and then taking the first $k$ indices. For a fixed $t^\\star$, a cell $i$ with $T_i = t^\\star$ is called a boundary cell if at least one of its $k$-nearest neighbors has a label different from $t^\\star$. A cell $i$ with $T_i = t^\\star$ is called an interior cell if all of its $k$-nearest neighbors have label exactly $t^\\star$.\n\nFor each gene $j$, define the boundary set $B = \\{ i \\in \\{0,\\dots,n-1\\} : T_i = t^\\star \\text{ and } i \\text{ is boundary} \\}$ and the interior set $I = \\{ i \\in \\{0,\\dots,n-1\\} : T_i = t^\\star \\text{ and } i \\text{ is interior} \\}$. Let\n$$\n\\mu_B(j) = \\frac{1}{|B|} \\sum_{i \\in B} x_{ij}, \\quad \\mu_I(j) = \\frac{1}{|I|} \\sum_{i \\in I} x_{ij},\n$$\nwhenever $|B| \\ge 1$ and $|I| \\ge 1$. Given a threshold $\\tau > 0$, gene $j$ is called differentially expressed (DE) between boundary and interior cells (within the same type $t^\\star$) if and only if $|B| \\ge 1$, $|I| \\ge 1$, and\n$$\n|\\mu_B(j) - \\mu_I(j)| \\ge \\tau.\n$$\nIf either $|B| = 0$ or $|I| = 0$, then no gene is called DE and the output for that test case must be the empty list.\n\nYour task is to implement a program that, for each provided test case, computes the sorted list of gene indices $j$ that satisfy the DE criterion above. The final program output must aggregate the results for all test cases into a single line containing the lists as a comma-separated sequence enclosed in square brackets, for example, $[ [a], [b], [c] ]$ (without spaces in the actual program output).\n\nTest suite (three test cases):\n\nTest case $1$:\n- Parameters: $t^\\star = 0$, $k = 2$, $\\tau = 3$.\n- Coordinates:\n$$\nC = \\begin{bmatrix}\n0 & 0 \\\\\n1 & 0 \\\\\n2 & 0 \\\\\n1 & 1 \\\\\n2 & 1 \\\\\n3 & 0 \\\\\n0 & 1\n\\end{bmatrix}.\n$$\n- Labels:\n$$\nT = \\begin{bmatrix}\n0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 1 \\\\ 1 \\\\ 0\n\\end{bmatrix}.\n$$\n- Expression ($n=7$, $g=3$):\n$$\nX = \\begin{bmatrix}\n2 & 5 & 8 \\\\\n2 & 5 & 8 \\\\\n10 & 5 & 1 \\\\\n9 & 5 & 2 \\\\\n3 & 5 & 7 \\\\\n4 & 5 & 6 \\\\\n2 & 5 & 8\n\\end{bmatrix}.\n$$\n\nTest case $2$:\n- Parameters: $t^\\star = 0$, $k = 2$, $\\tau = 3$.\n- Coordinates:\n$$\nC = \\begin{bmatrix}\n0 & 0 \\\\\n0 & 1 \\\\\n0 & 2 \\\\\n10 & 0 \\\\\n10 & 1 \\\\\n10 & 2\n\\end{bmatrix}.\n$$\n- Labels:\n$$\nT = \\begin{bmatrix}\n0 \\\\ 0 \\\\ 0 \\\\ 1 \\\\ 1 \\\\ 1\n\\end{bmatrix}.\n$$\n- Expression ($n=6$, $g=2$):\n$$\nX = \\begin{bmatrix}\n1 & 1 \\\\\n2 & 2 \\\\\n3 & 3 \\\\\n4 & 4 \\\\\n5 & 5 \\\\\n6 & 6\n\\end{bmatrix}.\n$$\n\nTest case $3$:\n- Parameters: $t^\\star = 0$, $k = 1$, $\\tau = 3$.\n- Coordinates:\n$$\nC = \\begin{bmatrix}\n0 & 0 \\\\\n1 & 0 \\\\\n0 & 1 \\\\\n-1 & 0\n\\end{bmatrix}.\n$$\n- Labels:\n$$\nT = \\begin{bmatrix}\n0 \\\\ 1 \\\\ 0 \\\\ 0\n\\end{bmatrix}.\n$$\n- Expression ($n=4$, $g=2$):\n$$\nX = \\begin{bmatrix}\n9 & 3 \\\\\n4 & 4 \\\\\n1 & 3 \\\\\n1 & 3\n\\end{bmatrix}.\n$$\n\nRequired final output format: Your program must produce exactly one line containing the results as a comma-separated sequence of the per-test-case lists enclosed in square brackets, with no spaces; for example, if the three answers are lists $L_1$, $L_2$, and $L_3$, print $[L_1,L_2,L_3]$. Each $L_i$ must be a list of zero-based gene indices in ascending order.", "solution": "The problem is assessed to be **valid**. It is scientifically grounded in the field of computational biology, specifically spatial transcriptomics analysis. The definitions provided are mathematically precise and objective, allowing for a unique and verifiable solution. The problem is well-posed, providing all necessary data and constraints, including a deterministic tie-breaking rule for nearest neighbor identification. There are no contradictions, ambiguities, or factual inaccuracies in the problem statement.\n\nThe solution is implemented by following a sequence of well-defined computational steps. For each test case, we are given a set of cell coordinates $C \\in \\mathbb{R}^{n \\times 2}$, an expression matrix $X \\in \\mathbb{R}^{n \\times g}$, a vector of cell-type labels $T \\in \\{0,1,2,\\dots\\}^n$, a target cell type $t^\\star$, a neighbor count $k$, and a differential expression threshold $\\tau > 0$. The objective is to find all genes that are differentially expressed between boundary and interior cells of type $t^\\star$.\n\nThe algorithm proceeds as follows:\n\n1.  **Identification of Target Cells and Nearest Neighbors**:\n    First, we identify the set of indices for cells of the target type $t^\\star$, i.e., $S_{t^\\star} = \\{ i \\mid T_i = t^\\star \\}$. For each cell $i \\in S_{t^\\star}$, we must find its $k$-nearest neighbors (KNN). This process begins with the computation of the Euclidean distance $d(i,i') = \\sqrt{(C_{i,0} - C_{i',0})^2 + (C_{i,1} - C_{i',1})^2}$ from cell $i$ to every other cell $i' \\neq i$. To do this efficiently for all cells, we can pre-compute an $n \\times n$ matrix of pairwise distances. The problem specifies a deterministic tie-breaking rule: if multiple cells are equidistant at the $k$-th position, candidates are sorted lexicographically by the pair $(d(i,i'), i')$, and the first $k$ are chosen. This ensures a unique set of neighbors for each cell. Computationally, this is achieved by performing a lexicographical sort based on the primary key (distance) and the secondary key (cell index).\n\n2.  **Classification of Target Cells**:\n    Once the $k$-nearest neighbors are identified for a cell $i \\in S_{t^\\star}$, we classify it as either a boundary or an interior cell. Let $N_i$ be the set of indices of the $k$-nearest neighbors for cell $i$.\n    -   If all neighbors $i' \\in N_i$ have the same label as cell $i$ (i.e., $T_{i'} = t^\\star$ for all $i' \\in N_i$), then cell $i$ is classified as an **interior** cell.\n    -   If at least one neighbor $i' \\in N_i$ has a different label (i.e., $T_{i'} \\neq t^\\star$), then cell $i$ is classified as a **boundary** cell.\n    This process partitions the set of target cells $S_{t^\\star}$ into the boundary set $B$ and the interior set $I$.\n\n3.  **Differential Expression Analysis**:\n    The analysis proceeds only if both the boundary set $B$ and the interior set $I$ are non-empty, i.e., $|B| \\ge 1$ and $|I| \\ge 1$. If either set is empty, no genes are considered differentially expressed (DE), and the result is an empty list.\n    If both sets are non-empty, we compute the mean expression for each gene $j \\in \\{0, \\dots, g-1\\}$ across the boundary and interior cell populations:\n    $$\n    \\mu_B(j) = \\frac{1}{|B|} \\sum_{i \\in B} x_{ij}\n    $$\n    $$\n    \\mu_I(j) = \\frac{1}{|I|} \\sum_{i \\in I} x_{ij}\n    $$\n    A gene $j$ is then identified as differentially expressed if the absolute difference between these mean expression values meets or exceeds the given threshold $\\tau$:\n    $$\n    |\\mu_B(j) - \\mu_I(j)| \\ge \\tau\n    $$\n\n4.  **Final Result**:\n    The indices of all genes satisfying the DE criterion are collected. The resulting list of indices for each test case is sorted in ascending order. The final output is an aggregation of these lists.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print the final results.\n    \"\"\"\n    test_cases = [\n        {\n            \"t_star\": 0, \"k\": 2, \"tau\": 3.0,\n            \"C\": np.array([\n                [0, 0], [1, 0], [2, 0], [1, 1], [2, 1], [3, 0], [0, 1]\n            ]),\n            \"T\": np.array([0, 0, 0, 0, 1, 1, 0]),\n            \"X\": np.array([\n                [2, 5, 8], [2, 5, 8], [10, 5, 1], [9, 5, 2],\n                [3, 5, 7], [4, 5, 6], [2, 5, 8]\n            ])\n        },\n        {\n            \"t_star\": 0, \"k\": 2, \"tau\": 3.0,\n            \"C\": np.array([\n                [0, 0], [0, 1], [0, 2], [10, 0], [10, 1], [10, 2]\n            ]),\n            \"T\": np.array([0, 0, 0, 1, 1, 1]),\n            \"X\": np.array([\n                [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]\n            ])\n        },\n        {\n            \"t_star\": 0, \"k\": 1, \"tau\": 3.0,\n            \"C\": np.array([\n                [0, 0], [1, 0], [0, 1], [-1, 0]\n            ]),\n            \"T\": np.array([0, 1, 0, 0]),\n            \"X\": np.array([\n                [9, 3], [4, 4], [1, 3], [1, 3]\n            ])\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = analyze_spatial_de(\n            case[\"t_star\"], case[\"k\"], case[\"tau\"],\n            case[\"C\"], case[\"T\"], case[\"X\"]\n        )\n        results.append(result)\n\n    # Format the final output string exactly as required, with no spaces.\n    final_output = str(results).replace(\" \", \"\")\n    print(final_output)\n\ndef analyze_spatial_de(t_star, k, tau, C, T, X):\n    \"\"\"\n    Analyzes a single spatial transcriptomics dataset to find differentially\n    expressed genes between boundary and interior cells of a target type.\n    \"\"\"\n    n, g = X.shape\n    \n    # Compute pairwise Euclidean distance matrix\n    # C is shape (n, 2). Reshape for broadcasting to (n, 1, 2) and (1, n, 2).\n    # The difference is (n, n, 2), representing coordinate differences.\n    # Sum squares along the coordinate axis and take sqrt.\n    diff = C[:, np.newaxis, :] - C[np.newaxis, :, :]\n    dist_matrix = np.sqrt(np.sum(diff**2, axis=-1))\n\n    # Exclude self-neighbors by setting diagonal distance to infinity.\n    np.fill_diagonal(dist_matrix, np.inf)\n\n    target_cell_indices = np.where(T == t_star)[0]\n    \n    boundary_cells = []\n    interior_cells = []\n    \n    all_indices = np.arange(n)\n\n    for i in target_cell_indices:\n        distances_from_i = dist_matrix[i, :]\n        \n        # Lexicographical sort on (distance, index) to break ties deterministically.\n        # np.lexsort sorts by the last key first.\n        sorted_neighbor_indices = np.lexsort((all_indices, distances_from_i))\n        \n        knn_indices = sorted_neighbor_indices[:k]\n        neighbor_labels = T[knn_indices]\n        \n        # If all neighbors have the same label as the target cell, it's interior.\n        if np.all(neighbor_labels == t_star):\n            interior_cells.append(i)\n        else:\n            boundary_cells.append(i)\n            \n    # If either set is empty, no DE genes can be found.\n    if not boundary_cells or not interior_cells:\n        return []\n\n    # Calculate mean expression for boundary and interior cells\n    X_boundary = X[boundary_cells, :]\n    X_interior = X[interior_cells, :]\n    \n    mu_B = np.mean(X_boundary, axis=0)\n    mu_I = np.mean(X_interior, axis=0)\n    \n    # Identify DE genes based on the threshold tau\n    diff_expression = np.abs(mu_B - mu_I)\n    de_gene_indices = np.where(diff_expression >= tau)[0]\n    \n    # The result must be a sorted list of indices. np.where provides this.\n    return de_gene_indices.tolist()\n\nsolve()\n```", "id": "2430130"}, {"introduction": "The spatial organization of gene expression is often driven by tangible biological mechanisms, chief among them being direct communication between cells via ligand-receptor interactions. This final practice asks you to implement a widely-used quantitative model of cell-cell communication that integrates molecular data (ligand and receptor abundance) with physical location. You will calculate a communication score as an interaction potential that is modulated by an exponential distance-decay function, a core concept in systems biology, reflecting the principle that signaling is stronger between cells that are closer together [@problem_id:2430164]. Building this model provides hands-on experience with a core concept in systems biology, empowering you to move from observing spatial patterns to computationally modeling the mechanisms that may underlie them.", "problem": "You are given a formal model for cell-cell communication in a spatial transcriptomics context. There are $N$ cells indexed by $i \\in \\{1,\\dots,N\\}$, each at a two-dimensional coordinate $c_i \\in \\mathbb{R}^2$. For each cell $i$, there is a nonnegative ligand abundance vector $L_i \\in \\mathbb{R}_{\\ge 0}^K$ and a nonnegative receptor abundance vector $R_i \\in \\mathbb{R}_{\\ge 0}^K$ defined on the same $K$ ligand-receptor pairs. For a fixed length-scale parameter $\\lambda \\in \\mathbb{R}_{>0}$, define a directed weighted graph on the $N$ cells with edge weight from $i$ to $j$ given by\n$$\nw_{i \\to j} =\n\\begin{cases}\n\\left(\\sum_{k=1}^{K} L_{i,k}\\,R_{j,k}\\right)\\exp\\!\\left(-\\dfrac{\\lVert c_i-c_j\\rVert_2}{\\lambda}\\right), & i \\ne j,\\\\[1em]\n0, & i=j.\n\\end{cases}\n$$\nFor a designated target cell index $t \\in \\{1,\\dots,N\\}$, define the total incoming communication to $t$ as\n$$\nT_t \\;=\\; \\sum_{\\substack{i=1\\\\ i\\ne t}}^{N} w_{i \\to t}.\n$$\nYour task is to compute $T_t$ for each of the following test cases. Each output value must be rounded to $6$ decimal places as a decimal fraction. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $[x_1,x_2,x_3]$), in the order of the test cases below.\n\nTest Suite:\n\n- Test Case $1$:\n  - $N=3$, $K=2$, $\\lambda=2$.\n  - Coordinates: $c_1=(0,0)$, $c_2=(1,0)$, $c_3=(0,2)$.\n  - Ligands: $L_1=(2,1)$, $L_2=(1,3)$, $L_3=(0,2)$.\n  - Receptors: $R_1=(1,0)$, $R_2=(2,1)$, $R_3=(1,1)$.\n  - Target index: $t=2$.\n\n- Test Case $2$:\n  - $N=4$, $K=1$, $\\lambda=0.5$.\n  - Coordinates: $c_1=(0,0)$, $c_2=(0,1)$, $c_3=(0,2)$, $c_4=(10,0)$.\n  - Ligands: $L_1=(0)$, $L_2=(5)$, $L_3=(1)$, $L_4=(2)$.\n  - Receptors: $R_1=(3)$, $R_2=(0)$, $R_3=(1)$, $R_4=(4)$.\n  - Target index: $t=3$.\n\n- Test Case $3$:\n  - $N=3$, $K=3$, $\\lambda=1$.\n  - Coordinates: $c_1=(1,1)$, $c_2=(1,1)$, $c_3=(2,1)$.\n  - Ligands: $L_1=(1,0,2)$, $L_2=(0,1,1)$, $L_3=(2,2,0)$.\n  - Receptors: $R_1=(0,1,1)$, $R_2=(1,0,2)$, $R_3=(2,1,1)$.\n  - Target index: $t=1$.\n\nFinal Output Format:\n\n- Your program must output a single line: a list $[T_1,T_2,T_3]$ where each $T_\\ell$ is the rounded value (to $6$ decimal places) of the total incoming communication to the designated target cell in Test Case $\\ell$, in the same order as listed above. No additional characters, spaces beyond those inside the list, or lines should be printed.", "solution": "The problem statement has been analyzed and is determined to be valid. It is scientifically grounded, well-posed, objective, and contains all necessary information for a unique solution. The model presented is a standard, albeit simplified, mathematical formulation for ligand-receptor-mediated cell-cell communication within a spatial context, commonly used in computational biology. The presence of co-located cells in Test Case $3$ is a valid edge case within the defined model and does not constitute a contradiction or an invalidating flaw.\n\nThe task is to compute the total incoming communication, $T_t$, to a specified target cell $t$. This quantity is defined as the sum of all incoming communication weights from all other cells in the system. The formula is given by:\n$$\nT_t = \\sum_{\\substack{i=1\\\\ i \\ne t}}^{N} w_{i \\to t}\n$$\nwhere $N$ is the total number of cells. The weight of the directed edge from a source cell $i$ to a target cell $j$, $w_{i \\to j}$, is defined as:\n$$\nw_{i \\to j} = \\left(\\sum_{k=1}^{K} L_{i,k}\\,R_{j,k}\\right)\\exp\\!\\left(-\\dfrac{\\lVert c_i-c_j\\rVert_2}{\\lambda}\\right) \\quad \\text{for } i \\ne j\n$$\nHere, $L_i \\in \\mathbb{R}_{\\ge 0}^K$ is the ligand abundance vector for cell $i$, $R_j \\in \\mathbb{R}_{\\ge 0}^K$ is the receptor abundance vector for cell $j$, $c_i, c_j \\in \\mathbb{R}^2$ are their respective coordinates, $\\lambda \\in \\mathbb{R}_{>0}$ is a length-scale parameter, and $K$ is the number of ligand-receptor pairs.\n\nThe weight $w_{i \\to j}$ can be conceptualized as a product of two terms: an interaction potential and a spatial attenuation factor.\nThe interaction potential, $I_{i \\to j} = \\sum_{k=1}^{K} L_{i,k}\\,R_{j,k}$, is the dot product $L_i \\cdot R_j$. It models the aggregate strength of all possible ligand-receptor bindings between the two cells.\nThe spatial attenuation factor, $S_{i \\to j} = \\exp(-\\lVert c_i-c_j\\rVert_2 / \\lambda)$, models the decay of the signal with increasing Euclidean distance $\\lVert c_i-c_j\\rVert_2$ between the cells.\n\nWe will now compute $T_t$ for each of the three specified test cases.\n\n**Test Case $1$**\nGiven parameters: $N=3$, $K=2$, $\\lambda=2$, and target cell $t=2$.\nCoordinates: $c_1=(0,0)$, $c_2=(1,0)$, $c_3=(0,2)$.\nLigands: $L_1=(2,1)$, $L_2=(1,3)$, $L_3=(0,2)$.\nReceptors: $R_1=(1,0)$, $R_2=(2,1)$, $R_3=(1,1)$.\n\nThe total incoming communication to cell $t=2$ is $T_2 = w_{1 \\to 2} + w_{3 \\to 2}$.\nFirst, we compute the weight $w_{1 \\to 2}$ from cell $i=1$ to target $t=2$:\nThe interaction potential is $I_{1 \\to 2} = L_1 \\cdot R_2 = (2)(2) + (1)(1) = 5$.\nThe distance is $d_{12} = \\lVert c_1-c_2\\rVert_2 = \\lVert (0,0)-(1,0)\\rVert_2 = \\sqrt{(0-1)^2 + (0-0)^2} = 1$.\nThe spatial factor is $S_{1 \\to 2} = \\exp(-d_{12}/\\lambda) = \\exp(-1/2)$.\nThus, $w_{1 \\to 2} = I_{1 \\to 2} \\cdot S_{1 \\to 2} = 5 \\exp(-0.5)$.\n\nNext, we compute the weight $w_{3 \\to 2}$ from cell $i=3$ to target $t=2$:\nThe interaction potential is $I_{3 \\to 2} = L_3 \\cdot R_2 = (0)(2) + (2)(1) = 2$.\nThe distance is $d_{32} = \\lVert c_3-c_2\\rVert_2 = \\lVert (0,2)-(1,0)\\rVert_2 = \\sqrt{(0-1)^2 + (2-0)^2} = \\sqrt{1+4} = \\sqrt{5}$.\nThe spatial factor is $S_{3 \\to 2} = \\exp(-d_{32}/\\lambda) = \\exp(-\\sqrt{5}/2)$.\nThus, $w_{3 \\to 2} = I_{3 \\to 2} \\cdot S_{3 \\to 2} = 2 \\exp(-\\sqrt{5}/2)$.\n\nThe total communication is the sum: $T_2 = 5 \\exp(-0.5) + 2 \\exp(-\\sqrt{5}/2) \\approx 3.68645353$. Rounded to $6$ decimal places, this is $3.686454$.\n\n**Test Case $2$**\nGiven parameters: $N=4$, $K=1$, $\\lambda=0.5$, and target cell $t=3$.\nCoordinates: $c_1=(0,0)$, $c_2=(0,1)$, $c_3=(0,2)$, $c_4=(10,0)$.\nLigands: $L_1=(0)$, $L_2=(5)$, $L_3=(1)$, $L_4=(2)$.\nReceptors: $R_1=(3)$, $R_2=(0)$, $R_3=(1)$, $R_4=(4)$.\n\nThe total incoming communication to cell $t=3$ is $T_3 = w_{1 \\to 3} + w_{2 \\to 3} + w_{4 \\to 3}$.\nThe receptor vector for the target cell is $R_3=(1)$.\n\nFor the weight $w_{1 \\to 3}$ from cell $i=1$:\nThe interaction potential is $I_{1 \\to 3} = L_1 \\cdot R_3 = (0)(1) = 0$. This implies $w_{1 \\to 3}=0$.\n\nFor the weight $w_{2 \\to 3}$ from cell $i=2$:\nThe interaction potential is $I_{2 \\to 3} = L_2 \\cdot R_3 = (5)(1) = 5$.\nThe distance is $d_{23} = \\lVert c_2-c_3\\rVert_2 = \\lVert (0,1)-(0,2)\\rVert_2 = \\sqrt{(0-0)^2+(1-2)^2} = 1$.\nThe spatial factor is $S_{2 \\to 3} = \\exp(-d_{23}/\\lambda) = \\exp(-1/0.5) = \\exp(-2)$.\nThus, $w_{2 \\to 3} = 5 \\exp(-2)$.\n\nFor the weight $w_{4 \\to 3}$ from cell $i=4$:\nThe interaction potential is $I_{4 \\to 3} = L_4 \\cdot R_3 = (2)(1) = 2$.\nThe distance is $d_{43} = \\lVert c_4-c_3\\rVert_2 = \\lVert (10,0)-(0,2)\\rVert_2 = \\sqrt{(10-0)^2+(0-2)^2} = \\sqrt{100+4} = \\sqrt{104}$.\nThe spatial factor is $S_{4 \\to 3} = \\exp(-d_{43}/\\lambda) = \\exp(-\\sqrt{104}/0.5) = \\exp(-2\\sqrt{104})$.\nThus, $w_{4 \\to 3} = 2 \\exp(-2\\sqrt{104})$.\n\nThe total communication is the sum: $T_3 = 0 + 5 \\exp(-2) + 2 \\exp(-2\\sqrt{104})$. The term $2 \\exp(-2\\sqrt{104})$ is negligibly small.\n$T_3 \\approx 0.67667642$. Rounded to $6$ decimal places, this is $0.676676$.\n\n**Test Case $3$**\nGiven parameters: $N=3$, $K=3$, $\\lambda=1$, and target cell $t=1$.\nCoordinates: $c_1=(1,1)$, $c_2=(1,1)$, $c_3=(2,1)$.\nLigands: $L_1=(1,0,2)$, $L_2=(0,1,1)$, $L_3=(2,2,0)$.\nReceptors: $R_1=(0,1,1)$, $R_2=(1,0,2)$, $R_3=(2,1,1)$.\n\nThe total incoming communication to cell $t=1$ is $T_1 = w_{2 \\to 1} + w_{3 \\to 1}$.\nThe receptor vector for the target cell is $R_1=(0,1,1)$.\n\nFor the weight $w_{2 \\to 1}$ from cell $i=2$:\nThe interaction potential is $I_{2 \\to 1} = L_2 \\cdot R_1 = (0)(0) + (1)(1) + (1)(1) = 2$.\nThe distance is $d_{21} = \\lVert c_2-c_1\\rVert_2 = \\lVert (1,1)-(1,1)\\rVert_2 = 0$.\nThe spatial factor is $S_{2 \\to 1} = \\exp(-d_{21}/\\lambda) = \\exp(-0/1) = \\exp(0) = 1$.\nThus, $w_{2 \\to 1} = 2 \\cdot 1 = 2$.\n\nFor the weight $w_{3 \\to 1}$ from cell $i=3$:\nThe interaction potential is $I_{3 \\to 1} = L_3 \\cdot R_1 = (2)(0) + (2)(1) + (0)(1) = 2$.\nThe distance is $d_{31} = \\lVert c_3-c_1\\rVert_2 = \\lVert (2,1)-(1,1)\\rVert_2 = \\sqrt{(2-1)^2 + (1-1)^2} = 1$.\nThe spatial factor is $S_{3 \\to 1} = \\exp(-d_{31}/\\lambda) = \\exp(-1/1) = \\exp(-1)$.\nThus, $w_{3 \\to 1} = 2 \\exp(-1)$.\n\nThe total communication is the sum: $T_1 = 2 + 2 \\exp(-1) \\approx 2.73575888$. Rounded to $6$ decimal places, this is $2.735759$.\n\nIn summary, the results for the three test cases are:\n$T_1 \\approx 3.686454$ for the first case (with target $t=2$).\n$T_2 \\approx 0.676676$ for the second case (with target $t=3$).\n$T_3 \\approx 2.735759$ for the third case (with target $t=1$).\nThe final program implements these calculations.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef compute_total_incoming_communication(N, K, lambda_val, coords, ligands, receptors, target_index):\n    \"\"\"\n    Computes the total incoming communication T_t for a target cell t.\n    \"\"\"\n    total_comm = 0.0\n    # Adjust for 0-based indexing\n    t = target_index - 1\n    \n    c_t = coords[t]\n    R_t = receptors[t]\n    \n    for i in range(N):\n        if i == t:\n            continue\n            \n        c_i = coords[i]\n        L_i = ligands[i]\n        \n        # 1. Compute ligand-receptor interaction potential (dot product)\n        interaction = np.dot(L_i, R_t)\n        \n        # 2. Compute Euclidean distance\n        distance = np.linalg.norm(c_i - c_t)\n        \n        # 3. Compute spatial attenuation factor\n        spatial_factor = np.exp(-distance / lambda_val)\n        \n        # 4. Compute the edge weight w_{i -> t}\n        w_i_to_t = interaction * spatial_factor\n        \n        # 5. Add to total incoming communication\n        total_comm += w_i_to_t\n        \n    return total_comm\n\ndef solve():\n    \"\"\"\n    Defines and runs the test cases according to the problem statement.\n    \"\"\"\n    test_cases = [\n        {\n            \"N\": 3, \"K\": 2, \"lambda\": 2.0, \"t\": 2,\n            \"coords\": np.array([[0.0, 0.0], [1.0, 0.0], [0.0, 2.0]]),\n            \"ligands\": np.array([[2.0, 1.0], [1.0, 3.0], [0.0, 2.0]]),\n            \"receptors\": np.array([[1.0, 0.0], [2.0, 1.0], [1.0, 1.0]])\n        },\n        {\n            \"N\": 4, \"K\": 1, \"lambda\": 0.5, \"t\": 3,\n            \"coords\": np.array([[0.0, 0.0], [0.0, 1.0], [0.0, 2.0], [10.0, 0.0]]),\n            \"ligands\": np.array([[0.0], [5.0], [1.0], [2.0]]),\n            \"receptors\": np.array([[3.0], [0.0], [1.0], [4.0]])\n       },\n        {\n            \"N\": 3, \"K\": 3, \"lambda\": 1.0, \"t\": 1,\n            \"coords\": np.array([[1.0, 1.0], [1.0, 1.0], [2.0, 1.0]]),\n            \"ligands\": np.array([[1.0, 0.0, 2.0], [0.0, 1.0, 1.0], [2.0, 2.0, 0.0]]),\n            \"receptors\": np.array([[0.0, 1.0, 1.0], [1.0, 0.0, 2.0], [2.0, 1.0, 1.0]])\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = compute_total_incoming_communication(\n            N=case[\"N\"],\n            K=case[\"K\"],\n            lambda_val=case[\"lambda\"],\n            coords=case[\"coords\"],\n            ligands=case[\"ligands\"],\n            receptors=case[\"receptors\"],\n            target_index=case[\"t\"]\n        )\n        # Round the result to 6 decimal places\n        results.append(round(result, 6))\n\n    # Format the final output string\n    output_str = f\"[{','.join(map(str, results))}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2430164"}]}