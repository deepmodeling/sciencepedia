{"hands_on_practices": [{"introduction": "The core of RNA velocity lies in a simple yet powerful kinetic model describing the balance between the production and degradation of spliced messenger RNA (mRNA). This practice helps solidify your understanding of the fundamental velocity equation by exploring a hypothetical scenario: the introduction of a spliceosome inhibitor [@problem_id:2427354]. By calculating how this perturbation changes the velocity, you will gain a deeper intuition for how the rate of splicing, represented by the term $\\beta u(t)$, and the rate of degradation, $\\gamma s(t)$, collectively determine the dynamic state of a gene.", "problem": "Consider a two-compartment kinetic model for Ribonucleic Acid (RNA) transcription, splicing, and degradation. Let $u(t)$ denote unspliced RNA counts and $s(t)$ denote spliced RNA counts at time $t$. The system is modeled by the following Ordinary Differential Equations (ODEs): \n$$\\frac{du}{dt} = \\alpha - \\beta \\, u(t), \\quad \\frac{ds}{dt} = \\beta \\, u(t) - \\gamma \\, s(t).$$\nHere, $\\alpha$ is the transcription rate (in molecules per hour), $\\beta$ is the splicing rate (in per hour), and $\\gamma$ is the degradation rate of spliced RNA (in per hour). A drug that specifically inhibits the spliceosome is introduced and fully blocks the conversion of $u(t)$ to $s(t)$; in this drug condition, the conversion term governed by $\\beta$ is removed (while transcription and spliced RNA degradation remain unchanged). Define the instantaneous RNA velocity as $v(t) = \\frac{ds}{dt}$ at the current moment.\n\nGiven parameter values $\\alpha$, $\\beta$, $\\gamma$ (with the units described above) and observed counts $u$ and $s$ (in molecules) at the same moment $t$, compute:\n- the baseline instantaneous RNA velocity $v_{\\mathrm{normal}} = \\left.\\frac{ds}{dt}\\right|_{\\text{normal}}$,\n- the drug-condition instantaneous RNA velocity $v_{\\mathrm{inhib}} = \\left.\\frac{ds}{dt}\\right|_{\\text{drug}}$,\n- the change $\\Delta v = v_{\\mathrm{inhib}} - v_{\\mathrm{normal}}$.\n\nExpress each velocity as a decimal number in molecules per hour. For output, round each value to one decimal place.\n\nUse the following test suite of five cases, each specified as $(\\alpha,\\beta,\\gamma,u,s)$, with all parameters in the units defined above and $u,s$ in molecules:\n- Case A: $(\\alpha,\\beta,\\gamma,u,s) = (50, 0.2, 0.05, 120, 800)$.\n- Case B: $(\\alpha,\\beta,\\gamma,u,s) = (10, 0.5, 0.1, 100, 0)$.\n- Case C: $(\\alpha,\\beta,\\gamma,u,s) = (10, 0.5, 0.1, 0, 1000)$.\n- Case D: $(\\alpha,\\beta,\\gamma,u,s) = (100, 1.0, 0.5, 100, 200)$.\n- Case E: $(\\alpha,\\beta,\\gamma,u,s) = (200, 0.05, 0.2, 4000, 500)$.\n\nYour program must compute, for each case, the triple $[\\,v_{\\mathrm{normal}}, v_{\\mathrm{inhib}}, \\Delta v\\,]$ as floating-point numbers rounded to one decimal place, all in molecules per hour.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each element is itself a bracketed triple for one test case, without any spaces. For example: \"[[x1,y1,z1],[x2,y2,z2],...]\" where each $x_i,y_i,z_i$ is the rounded decimal value for case $i$ in molecules per hour.", "solution": "The problem will first be subjected to rigorous validation before any attempt at a solution is made.\n\n### Step 1: Extract Givens\nThe problem provides the following information:\n- A two-compartment kinetic model for RNA.\n- Variables: unspliced RNA counts $u(t)$ and spliced RNA counts $s(t)$.\n- Governing ODEs for the normal condition:\n$$\n\\frac{du}{dt} = \\alpha - \\beta \\, u(t)\n$$\n$$\n\\frac{ds}{dt} = \\beta \\, u(t) - \\gamma \\, s(t)\n$$\n- Parameters: $\\alpha$ (transcription rate, molecules/hour), $\\beta$ (splicing rate, 1/hour), $\\gamma$ (degradation rate, 1/hour).\n- Drug condition: The term governed by $\\beta$ is removed.\n- Definition of instantaneous RNA velocity: $v(t) = \\frac{ds}{dt}$.\n-\nQuantities to compute given $(\\alpha, \\beta, \\gamma, u, s)$:\n    1.  $v_{\\mathrm{normal}} = \\left.\\frac{ds}{dt}\\right|_{\\text{normal}}$\n    2.  $v_{\\mathrm{inhib}} = \\left.\\frac{ds}{dt}\\right|_{\\text{drug}}$\n    3.  $\\Delta v = v_{\\mathrm{inhib}} - v_{\\mathrm{normal}}$\n- Test Cases:\n    - Case A: $(\\alpha,\\beta,\\gamma,u,s) = (50, 0.2, 0.05, 120, 800)$\n    - Case B: $(\\alpha,\\beta,\\gamma,u,s) = (10, 0.5, 0.1, 100, 0)$\n    - Case C: $(\\alpha,\\beta,\\gamma,u,s) = (10, 0.5, 0.1, 0, 1000)$\n    - Case D: $(\\alpha,\\beta,\\gamma,u,s) = (100, 1.0, 0.5, 100, 200)$\n    - Case E: $(\\alpha,\\beta,\\gamma,u,s) = (200, 0.05, 0.2, 4000, 500)$\n\n### Step 2: Validate Using Extracted Givens\nThe problem is assessed against the required criteria.\n- **Scientifically Grounded**: The kinetic model is a standard and widely used simplification in computational biology for RNA dynamics, forming the basis of RNA velocity estimation. It is scientifically sound.\n- **Well-Posed**: All necessary equations, parameters, and initial state values ($u$, $s$) required for the calculation are provided. The objective is clearly defined, and a unique, stable solution exists for each test case.\n- **Objective**: The problem is stated using precise mathematical formalism and objective language. There are no subjective or opinion-based claims.\n- **Flaw Analysis**:\n    1.  Scientific/Factual Unsoundness: None.\n    2.  Non-Formalizable/Irrelevant: None. The problem is formal and directly relevant to computational biology.\n    3.  Incomplete/Contradictory Setup: None. All required information is present and self-consistent. The use of dollar signs within numerical listings, e.g., `$\\$50\\$`, is an unconventional formatting choice but its intent as a numerical value is unambiguous and does not constitute a substantive flaw.\n    4.  Unrealistic/Infeasible: None. The parameter and count values are within physically and biologically plausible ranges.\n    5.  Ill-Posed/Poorly Structured: None. The problem is clearly structured and asks for direct application of defined formulas.\n    6.  Outside Scientific Verifiability: None. The calculations are entirely verifiable.\n\n### Step 3: Verdict and Action\nThe problem is **valid**. A solution will be derived.\n\n### Solution Derivation\n\nThe problem requires the calculation of RNA velocity under two conditions based on a system of ordinary differential equations.\n\n**1. Baseline RNA Velocity ($v_{\\mathrm{normal}}$)**\n\nThe instantaneous RNA velocity is defined as $v(t) = \\frac{ds}{dt}$. Under normal physiological conditions, the rate of change of spliced RNA, $s(t)$, is given by the second differential equation:\n$$\nv_{\\mathrm{normal}} = \\left.\\frac{ds}{dt}\\right|_{\\text{normal}} = \\beta \\, u(t) - \\gamma \\, s(t)\n$$\nThis calculation uses the provided instantaneous counts $u$ and $s$ (at some time $t$), and the parameters $\\beta$ and $\\gamma$. The transcription rate $\\alpha$ is not required for calculating the instantaneous velocity, as the state $(u, s)$ is given.\n\n**2. Drug-Condition RNA Velocity ($v_{\\mathrm{inhib}}$)**\n\nUnder the drug condition, a spliceosome inhibitor blocks the conversion of unspliced RNA $u(t)$ to spliced RNA $s(t)$. The problem states this removes the term \"governed by $\\beta$\". This means the term $\\beta u(t)$, which represents the rate of splicing, becomes zero in the system. The modified ODE for $s(t)$ is:\n$$\n\\left.\\frac{ds}{dt}\\right|_{\\text{drug}} = 0 - \\gamma \\, s(t) = -\\gamma \\, s(t)\n$$\nTherefore, the instantaneous velocity in the presence of the inhibitor is:\n$$\nv_{\\mathrm{inhib}} = -\\gamma \\, s(t)\n$$\nThis calculation depends only on the degradation rate $\\gamma$ and the instantaneous count of spliced RNA $s$.\n\n**3. Change in RNA Velocity ($\\Delta v$)**\n\nThe change in velocity is defined as the difference between the inhibited and normal velocities:\n$$\n\\Delta v = v_{\\mathrm{inhib}} - v_{\\mathrm{normal}}\n$$\nSubstituting the expressions derived above:\n$$\n\\Delta v = (-\\gamma \\, s(t)) - (\\beta \\, u(t) - \\gamma \\, s(t))\n$$\nSimplifying the expression yields:\n$$\n\\Delta v = -\\gamma \\, s(t) - \\beta \\, u(t) + \\gamma \\, s(t)\n$$\n$$\n\\Delta v = -\\beta \\, u(t)\n$$\nThis result is logical: the change in the rate of production of spliced RNA is precisely the rate of splicing that was inhibited by the drug.\n\n**4. Calculations for Test Cases**\n\nThe derived formulas will now be applied to each test case. All results are in molecules per hour and will be rounded to one decimal place.\n\n**Case A:** $(\\alpha, \\beta, \\gamma, u, s) = (50, 0.2, 0.05, 120, 800)$\n- $v_{\\mathrm{normal}} = (0.2)(120) - (0.05)(800) = 24.0 - 40.0 = -16.0$\n- $v_{\\mathrm{inhib}} = -(0.05)(800) = -40.0$\n- $\\Delta v = -40.0 - (-16.0) = -24.0$\n- Result: $[-16.0, -40.0, -24.0]$\n\n**Case B:** $(\\alpha, \\beta, \\gamma, u, s) = (10, 0.5, 0.1, 100, 0)$\n- $v_{\\mathrm{normal}} = (0.5)(100) - (0.1)(0) = 50.0 - 0.0 = 50.0$\n- $v_{\\mathrm{inhib}} = -(0.1)(0) = 0.0$\n- $\\Delta v = 0.0 - 50.0 = -50.0$\n- Result: $[50.0, 0.0, -50.0]$\n\n**Case C:** $(\\alpha, \\beta, \\gamma, u, s) = (10, 0.5, 0.1, 0, 1000)$\n- $v_{\\mathrm{normal}} = (0.5)(0) - (0.1)(1000) = 0.0 - 100.0 = -100.0$\n- $v_{\\mathrm{inhib}} = -(0.1)(1000) = -100.0$\n- $\\Delta v = -100.0 - (-100.0) = 0.0$\n- Result: $[-100.0, -100.0, 0.0]$\n\n**Case D:** $(\\alpha, \\beta, \\gamma, u, s) = (100, 1.0, 0.5, 100, 200)$\n- $v_{\\mathrm{normal}} = (1.0)(100) - (0.5)(200) = 100.0 - 100.0 = 0.0$\n- $v_{\\mathrm{inhib}} = -(0.5)(200) = -100.0$\n- $\\Delta v = -100.0 - 0.0 = -100.0$\n- Result: $[0.0, -100.0, -100.0]$\n\n**Case E:** $(\\alpha, \\beta, \\gamma, u, s) = (200, 0.05, 0.2, 4000, 500)$\n- $v_{\\mathrm{normal}} = (0.05)(4000) - (0.2)(500) = 200.0 - 100.0 = 100.0$\n- $v_{\\mathrm{inhib}} = -(0.2)(500) = -100.0$\n- $\\Delta v = -100.0 - 100.0 = -200.0$\n- Result: $[100.0, -100.0, -200.0]$", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes RNA velocities for a series of test cases based on a two-compartment kinetic model.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (alpha, beta, gamma, u, s)\n    test_cases = [\n        (50, 0.2, 0.05, 120, 800),    # Case A\n        (10, 0.5, 0.1, 100, 0),        # Case B\n        (10, 0.5, 0.1, 0, 1000),      # Case C\n        (100, 1.0, 0.5, 100, 200),    # Case D\n        (200, 0.05, 0.2, 4000, 500),  # Case E\n    ]\n\n    all_results = []\n    for case in test_cases:\n        _alpha, beta, gamma, u, s = case\n\n        # 1. Calculate the baseline instantaneous RNA velocity (v_normal).\n        # v_normal = ds/dt = beta * u - gamma * s\n        v_normal = beta * u - gamma * s\n\n        # 2. Calculate the drug-condition instantaneous RNA velocity (v_inhib).\n        # The splicing term (beta * u) is removed.\n        # v_inhib = ds/dt = -gamma * s\n        v_inhib = -gamma * s\n\n        # 3. Calculate the change in velocity (delta_v).\n        # delta_v = v_inhib - v_normal\n        # This simplifies to -beta * u.\n        delta_v = v_inhib - v_normal\n\n        # Round each calculated value to one decimal place.\n        v_normal_r = round(v_normal, 1)\n        v_inhib_r = round(v_inhib, 1)\n        delta_v_r = round(delta_v, 1)\n\n        # Store the triplet of results for the current case.\n        all_results.append([v_normal_r, v_inhib_r, delta_v_r])\n\n    # Format the final output string according to the specified format.\n    # Example: [[x1,y1,z1],[x2,y2,z2],...]\n    # No spaces are allowed in the final output string.\n    result_strings = [f\"[{v},{i},{d}]\" for v, i, d in all_results]\n    final_output_string = f\"[{','.join(result_strings)}]\"\n    \n    # Print the final result to standard output.\n    print(final_output_string)\n\nsolve()\n```", "id": "2427354"}, {"introduction": "While individual gene velocities are informative, the true power of RNA velocity analysis emerges when we combine information across thousands of genes to predict the future state of a cell. This exercise guides you through a complete, albeit simplified, workflow for inferring cellular trajectory from single-cell data [@problem_id:2941032]. You will learn how to project high-dimensional velocity vectors onto a low-dimensional embedding, such as pseudotime, to determine the overall direction of differentiation within a population of cells.", "problem": "You are given a simplified, principled kinetic framework for inferring ribonucleic acid (RNA) velocity and the net direction of differentiation in a small, synthetic single-cell dataset that contains mixed progenitors and early differentiating cells. The model is derived from the Central Dogma of Molecular Biology and standard first-order reaction kinetics for transcriptional splicing and decay. For each gene $g$ and cell $i$, let $u_{ig}$ denote the unspliced RNA count and $s_{ig}$ denote the spliced RNA count. The kinetic assumptions are:\n- Transcription produces unspliced RNA at rate $\\alpha_g$.\n- Splicing converts unspliced to spliced RNA at rate $\\beta_g$ (first order in $u_{ig}$).\n- Spliced RNA is degraded at rate $\\gamma_g$ (first order in $s_{ig}$).\n\nUnder these well-tested assumptions, the instantaneous time derivative of the spliced RNA for gene $g$ in cell $i$ is\n$$\n\\frac{ds_{ig}}{dt} \\;=\\; \\beta_g\\,u_{ig} \\;-\\; \\gamma_g\\,s_{ig}.\n$$\nDefine the gene-wise RNA velocity as $v_{ig} \\equiv \\beta_g\\,u_{ig} - \\gamma_g\\,s_{ig}$. To infer the net direction of differentiation along a one-dimensional embedding (for example, pseudotime) $t_i$ for cell $i$, approximate $t$ locally as a first-order linear function of spliced expression,\n$$\nt_i \\;\\approx\\; a \\;+\\; \\sum_{g} w_g\\,s_{ig},\n$$\nwhere $a$ is an intercept and $w_g$ are regression coefficients. By the chain rule,\n$$\n\\frac{dt_i}{dt} \\;=\\; \\sum_{g} \\frac{\\partial t_i}{\\partial s_{ig}} \\,\\frac{ds_{ig}}{dt}\n\\;\\approx\\; \\sum_{g} w_g\\,v_{ig}.\n$$\nDefine the per-cell predicted time rate $r_i \\equiv \\sum_g w_g\\,v_{ig}$ and the dataset-average\n$$\n\\bar{r} \\;\\equiv\\; \\frac{1}{N}\\sum_{i=1}^{N} r_i,\n$$\nwhere $N$ is the number of cells. Use a small tolerance $\\varepsilon$ to decide the net direction: return $+1$ if $\\bar{r}  \\varepsilon$, return $-1$ if $\\bar{r}  -\\varepsilon$, and return $0$ otherwise.\n\nImplement a program that, for each provided test case, does the following:\n1. Fits the linear model $t \\approx a + \\sum_g w_g s_g$ by least squares to estimate $a$ and $w_g$ using the provided spliced matrix $S$ and pseudotime vector $t$.\n2. Computes the velocity matrix $V$ with entries $v_{ig} = \\beta_g u_{ig} - \\gamma_g s_{ig}$ using the provided unspliced matrix $U$ and the per-gene rate constants $\\beta_g$ and $\\gamma_g$.\n3. Computes $r_i = \\sum_g w_g v_{ig}$ and $\\bar{r}$, then outputs the integer in $\\{-1,0,+1\\}$ according to the rule above with tolerance $\\varepsilon$.\n\nAll numerical values below are dimensionless counts or rates. Use the following fixed tolerance $\\varepsilon = 0.05$.\n\nTest suite specification:\n- Genes are ordered as $g \\in \\{A,B,C\\}$ with rate constants\n$$\n\\beta \\;=\\; [\\,1.0,\\;0.9,\\;1.1\\,], \\qquad \\gamma \\;=\\; [\\,0.3,\\;0.5,\\;0.4\\,].\n$$\n- All test cases share the same pseudotime vector (progenitors near small $t$, early differentiating near large $t$):\n$$\nt \\;=\\; \\begin{bmatrix} 0.10 \\\\ 0.15 \\\\ 0.20 \\\\ 0.60 \\\\ 0.70 \\\\ 0.80 \\end{bmatrix}.\n$$\n\nTest case $1$ (mixed progenitors and early differentiating cells; expected positive net flow):\n- Spliced matrix $S^{(1)}$ (rows are cells $i=1,\\dots,6$, columns are genes $A,B,C$):\n$$\nS^{(1)} \\;=\\;\n\\begin{bmatrix}\n2.0  1.0  3.0 \\\\\n2.5  1.2  3.5 \\\\\n3.0  1.5  4.0 \\\\\n5.5  3.5  6.0 \\\\\n6.5  4.2  7.2 \\\\\n7.0  5.0  8.0\n\\end{bmatrix}.\n$$\n- Unspliced matrix $U^{(1)}$:\n$$\nU^{(1)} \\;=\\;\n\\begin{bmatrix}\n6.0  4.5  5.5 \\\\\n5.8  4.0  5.0 \\\\\n5.5  3.8  4.6 \\\\\n3.5  2.7  3.2 \\\\\n2.5  2.2  2.5 \\\\\n2.0  1.8  2.1\n\\end{bmatrix}.\n$$\n\nTest case $2$ (near steady-state, ambiguous net flow): same $S^{(1)}$ and $t$, but $U^{(2)}$ chosen so that $v_{ig} \\approx 0$ for all $i,g$ via $u_{ig} = (\\gamma_g/\\beta_g)\\,s_{ig}$. Numerically,\n$$\nU^{(2)} \\;=\\;\n\\begin{bmatrix}\n0.6  0.5555556  1.0909091 \\\\\n0.75  0.6666667  1.2727273 \\\\\n0.9  0.8333333  1.4545455 \\\\\n1.65  1.9444444  2.1818182 \\\\\n1.95  2.3333334  2.6181818 \\\\\n2.1  2.7777778  2.9090909\n\\end{bmatrix}.\n$$\n\nTest case $3$ (net negative flow, consistent with dedifferentiation or strong downregulation): same $S^{(1)}$ and $t$, but $U^{(3)} = 0.1\\,U^{(1)}$,\n$$\nU^{(3)} \\;=\\;\n\\begin{bmatrix}\n0.6  0.45  0.55 \\\\\n0.58  0.40  0.50 \\\\\n0.55  0.38  0.46 \\\\\n0.35  0.27  0.32 \\\\\n0.25  0.22  0.25 \\\\\n0.20  0.18  0.21\n\\end{bmatrix}.\n$$\n\nYour program must implement the procedure above for each of the three test cases and output a single line containing the results as a comma-separated list enclosed in square brackets, in the order of the test cases. The output values must be integers in $\\{-1,0,+1\\}$. For example, a valid output format is\n$$\n[\\,1,0,-1\\,].\n$$", "solution": "The problem statement provided is subjected to rigorous validation.\n\n**Step 1: Extract Givens**\n\nThe problem defines a kinetic model for RNA dynamics and a method for inferring differentiation direction.\n\n- **Model Equations:**\n  - The instantaneous change in spliced RNA for gene $g$ in cell $i$ is given by:\n    $$\n    \\frac{ds_{ig}}{dt} = \\beta_g u_{ig} - \\gamma_g s_{ig}\n    $$\n  - Gene-wise RNA velocity is defined as:\n    $$\n    v_{ig} \\equiv \\beta_g u_{ig} - \\gamma_g s_{ig}\n    $$\n  - Pseudotime is approximated as a linear function of spliced expression:\n    $$\n    t_i \\approx a + \\sum_{g} w_g s_{ig}\n    $$\n  - The per-cell predicted time rate of pseudotime change is:\n    $$\n    r_i \\equiv \\sum_{g} w_g v_{ig}\n    $$\n  - The dataset-average time rate is:\n    $$\n    \\bar{r} \\equiv \\frac{1}{N} \\sum_{i=1}^{N} r_i\n    $$\n\n- **Decision Rule:**\n  - Let $\\varepsilon$ be a small tolerance.\n  - If $\\bar{r}  \\varepsilon$, the output is $+1$.\n  - If $\\bar{r}  -\\varepsilon$, the output is $-1$.\n  - Otherwise, the output is $0$.\n\n- **Constants and Data:**\n  - Tolerance: $\\varepsilon = 0.05$.\n  - Number of cells $N=6$. Number of genes $G=3$. Genes are $\\{A, B, C\\}$.\n  - Splicing rate constants: $\\beta = [1.0, 0.9, 1.1]$.\n  - Degradation rate constants: $\\gamma = [0.3, 0.5, 0.4]$.\n  - Pseudotime vector $t$:\n    $$\n    t = \\begin{bmatrix} 0.10 \\\\ 0.15 \\\\ 0.20 \\\\ 0.60 \\\\ 0.70 \\\\ 0.80 \\end{bmatrix}\n    $$\n  - Spliced matrix $S^{(1)}$ (used for all test cases):\n    $$\n    S^{(1)} =\n    \\begin{bmatrix}\n    2.0  1.0  3.0 \\\\\n    2.5  1.2  3.5 \\\\\n    3.0  1.5  4.0 \\\\\n    5.5  3.5  6.0 \\\\\n    6.5  4.2  7.2 \\\\\n    7.0  5.0  8.0\n    \\end{bmatrix}\n    $$\n  - Test Case $1$ Unspliced Matrix $U^{(1)}$:\n    $$\n    U^{(1)} =\n    \\begin{bmatrix}\n    6.0  4.5  5.5 \\\\\n    5.8  4.0  5.0 \\\\\n    5.5  3.8  4.6 \\\\\n    3.5  2.7  3.2 \\\\\n    2.5  2.2  2.5 \\\\\n    2.0  1.8  2.1\n    \\end{bmatrix}\n    $$\n  - Test Case $2$ Unspliced Matrix $U^{(2)}$:\n    $$\n    U^{(2)} =\n    \\begin{bmatrix}\n    0.6  0.5555556  1.0909091 \\\\\n    0.75  0.6666667  1.2727273 \\\\\n    0.9  0.8333333  1.4545455 \\\\\n    1.65  1.9444444  2.1818182 \\\\\n    1.95  2.3333334  2.6181818 \\\\\n    2.1  2.7777778  2.9090909\n    \\end{bmatrix}\n    $$\n  - Test Case $3$ Unspliced Matrix $U^{(3)}$:\n    $$\n    U^{(3)} =\n    \\begin{bmatrix}\n    0.6  0.45  0.55 \\\\\n    0.58  0.40  0.50 \\\\\n    0.55  0.38  0.46 \\\\\n    0.35  0.27  0.32 \\\\\n    0.25  0.22  0.25 \\\\\n    0.20  0.18  0.21\n    \\end{bmatrix}\n    $$\n\n**Step 2: Validate Using Extracted Givens**\n\nThe problem is evaluated against the required criteria.\n1.  **Scientifically Grounded:** The problem is based on the well-established RNA velocity model, which uses first-order kinetics to describe transcription, splicing, and degradation. This framework is a standard tool in computational and systems biology. The premises are scientifically sound.\n2.  **Well-Posed:** The problem requires a sequence of well-defined operations: a linear regression, element-wise matrix calculations, a matrix-vector product, and an averaging step, followed by a simple threshold-based decision. The linear regression problem is solvable if the design matrix is of full rank. Given the provided matrix $S^{(1)}$, its columns are linearly independent, ensuring a unique least-squares solution. The problem is well-posed.\n3.  **Objective:** The problem is stated using precise mathematical language and quantitative data. It is free of ambiguity, subjectivity, or opinion.\n4.  **Completeness:** All necessary data, including matrices, vectors, and constants, are provided. The problem is self-contained.\n5.  **Consistency:** The provided data and models are internally consistent. There are no contradictions in the setup.\n\n**Step 3: Verdict and Action**\n\nThe problem is deemed **valid**. It is a clear, self-contained, and scientifically sound computational task. A solution will be constructed as specified.\n\n**Solution Procedure**\n\nThe solution requires implementing the three steps described in the problem for each of the three test cases. Let $N$ be the number of cells ($N=6$) and $G$ be the number of genes ($G=3$).\n\n**Part 1: Linear Regression to Determine Weights**\n\nThe first step is to solve for the intercept $a$ and the weights $w_g$ from the linear model $t_i \\approx a + \\sum_{g=1}^{G} w_g s_{ig}$. This is a standard ordinary least squares (OLS) problem. We can write this in matrix form as:\n$$\nt \\approx X\\theta\n$$\nwhere $t$ is the $N \\times 1$ vector of pseudotimes, $X$ is the $N \\times (G+1)$ design matrix, and $\\theta$ is the $(G+1) \\times 1$ vector of coefficients. The design matrix $X$ is formed by prepending a column of ones to the spliced data matrix $S^{(1)}$. The coefficient vector is $\\theta = [a, w_A, w_B, w_C]^T$.\n\nThe OLS solution $\\hat{\\theta}$ minimizes the sum of squared residuals and is given by:\n$$\n\\hat{\\theta} = (X^T X)^{-1} X^T t\n$$\nSince the matrices $S^{(1)}$ and vector $t$ are common to all test cases, the coefficients $a$ and $w_g$ need to be computed only once. Numerically, it is more stable to use a pseudoinverse or a dedicated linear least squares solver rather than computing the matrix inverse directly. From the computed vector $\\hat{\\theta}$, we extract the weights $w = [w_A, w_B, w_C]^T$.\n\n**Part 2: Computation of RNA Velocity**\n\nFor each test case $k \\in \\{1, 2, 3\\}$, the RNA velocity matrix $V^{(k)}$ of size $N \\times G$ is computed. The elements $v_{ig}^{(k)}$ are given by the formula:\n$$\nv_{ig}^{(k)} = \\beta_g u_{ig}^{(k)} - \\gamma_g s_{ig}\n$$\nIn matrix notation, this is performed by element-wise operations. Let $U^{(k)}$ be the unspliced matrix for test case $k$, and $S = S^{(1)}$ be the spliced matrix. Let $B$ and $\\Gamma$ be $N \\times G$ matrices formed by broadcasting the gene-specific rate vectors $\\beta = [\\beta_A, \\beta_B, \\beta_C]$ and $\\gamma = [\\gamma_A, \\gamma_B, \\gamma_C]$ across the $N$ rows. Then, the velocity matrix is:\n$$\nV^{(k)} = U^{(k)} \\odot B - S \\odot \\Gamma\n$$\nwhere $\\odot$ denotes the Hadamard (element-wise) product. This calculation is performed for each of the three unspliced matrices $U^{(1)}$, $U^{(2)}$, and $U^{(3)}$.\n\n**Part 3: Calculation of Net Differentiation Flow and Decision**\n\nFor each test case $k$, we compute the vector of per-cell predicted time rates, $r^{(k)}$, of size $N \\times 1$. Each element $r_i^{(k)}$ is the dot product of the $i$-th cell's velocity vector (the $i$-th row of $V^{(k)}$) and the weight vector $w$:\n$$\nr_i^{(k)} = \\sum_{g=1}^{G} w_g v_{ig}^{(k)}\n$$\nIn matrix form, this is a product of the velocity matrix and the weight vector:\n$$\nr^{(k)} = V^{(k)} w\n$$\nThe dataset-average rate $\\bar{r}^{(k)}$ is then the mean of the elements of $r^{(k)}$:\n$$\n\\bar{r}^{(k)} = \\frac{1}{N} \\sum_{i=1}^{N} r_i^{(k)}\n$$\nFinally, the decision rule is applied with the tolerance $\\varepsilon = 0.05$. For each test case $k$:\n- If $\\bar{r}^{(k)}  0.05$, the result is $1$.\n- If $\\bar{r}^{(k)}  -0.05$, the result is $-1$.\n- If $-0.05 \\le \\bar{r}^{(k)} \\le 0.05$, the result is $0$.\n\nThe final output is a list containing the integer results for the three test cases in order.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements the RNA velocity inference procedure for three test cases.\n    \"\"\"\n\n    # --- Step 0: Define constants and shared data ---\n\n    # Tolerance for decision rule\n    epsilon = 0.05\n\n    # Rate constants for genes {A, B, C}\n    beta = np.array([1.0, 0.9, 1.1])\n    gamma = np.array([0.3, 0.5, 0.4])\n\n    # Pseudotime vector (shared across all cases)\n    t = np.array([0.10, 0.15, 0.20, 0.60, 0.70, 0.80])\n\n    # Spliced data matrix (shared across all cases)\n    S_matrix = np.array([\n        [2.0, 1.0, 3.0],\n        [2.5, 1.2, 3.5],\n        [3.0, 1.5, 4.0],\n        [5.5, 3.5, 6.0],\n        [6.5, 4.2, 7.2],\n        [7.0, 5.0, 8.0]\n    ])\n\n    # Define the unspliced matrices for the three test cases\n    test_cases_U = [\n        # Test case 1\n        np.array([\n            [6.0, 4.5, 5.5],\n            [5.8, 4.0, 5.0],\n            [5.5, 3.8, 4.6],\n            [3.5, 2.7, 3.2],\n            [2.5, 2.2, 2.5],\n            [2.0, 1.8, 2.1]\n        ]),\n        # Test case 2\n        np.array([\n            [0.6, 0.5555556, 1.0909091],\n            [0.75, 0.6666667, 1.2727273],\n            [0.9, 0.8333333, 1.4545455],\n            [1.65, 1.9444444, 2.1818182],\n            [1.95, 2.3333334, 2.6181818],\n            [2.1, 2.7777778, 2.9090909]\n        ]),\n        # Test case 3\n        np.array([\n            [0.6, 0.45, 0.55],\n            [0.58, 0.40, 0.50],\n            [0.55, 0.38, 0.46],\n            [0.35, 0.27, 0.32],\n            [0.25, 0.22, 0.25],\n            [0.20, 0.18, 0.21]\n        ])\n    ]\n\n    results = []\n\n    # --- Step 1: Linear Regression to find weights (common for all cases) ---\n    \n    # Create the design matrix X by adding a column of ones for the intercept\n    # X has shape (num_cells, num_genes + 1)\n    num_cells = S_matrix.shape[0]\n    X_design = np.hstack([np.ones((num_cells, 1)), S_matrix])\n\n    # Solve the linear least squares problem t ~ X * theta\n    # theta = [intercept, w_A, w_B, w_C]\n    theta, _, _, _ = np.linalg.lstsq(X_design, t, rcond=None)\n    \n    # Extract the weights w_g for the genes\n    weights = theta[1:]\n\n    # --- Loop through each test case ---\n    for U_matrix in test_cases_U:\n        \n        # --- Step 2: Compute the RNA velocity matrix V ---\n        # v_ig = beta_g * u_ig - gamma_g * s_ig\n        # This is V = U * B - S * G in an element-wise fashion\n        # numpy's broadcasting handles this automatically:\n        # U_matrix (6,3) * beta (3,) - element-wise product along rows\n        velocity_matrix = U_matrix * beta - S_matrix * gamma\n\n        # --- Step 3: Compute predicted time rates and the average ---\n        # r_i = sum_g(w_g * v_ig)\n        # In matrix form: r = V * w\n        # r is a (num_cells, 1) vector\n        r_per_cell = np.dot(velocity_matrix, weights)\n\n        # Compute the dataset-average rate r_bar\n        r_bar = np.mean(r_per_cell)\n\n        # --- Step 4: Apply the decision rule ---\n        if r_bar  epsilon:\n            decision = 1\n        elif r_bar  -epsilon:\n            decision = -1\n        else:\n            decision = 0\n        \n        results.append(decision)\n\n    # --- Final Output Formatting ---\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2941032"}, {"introduction": "The standard RNA velocity model assumes that splicing occurs at a rate linearly proportional to the amount of unspliced mRNA. However, the cellular machinery that performs splicing can become saturated at high concentrations of its substrate. This practice challenges you to refine the basic model by incorporating Michaelis-Menten kinetics, a more realistic description of enzyme-catalyzed reactions [@problem_id:2427330]. This exercise will demonstrate how foundational models can be extended to capture more complex and biologically faithful principles.", "problem": "You are tasked with extending a standard ribonucleic acid (RNA) velocity model to account for saturation of the splicing machinery at high transcriptional activity. In the standard two-compartment description of pre-messenger RNA dynamics in single-cell RNA sequencing (scRNA-seq), the unspliced and spliced transcript abundances are denoted by $u$ and $s$, respectively. Assume the following principles as your starting point: (i) mass balance for molecular populations, (ii) the central dogma that transcription produces unspliced RNA, splicing converts unspliced to spliced RNA, and degradation removes both species, (iii) enzyme saturation captured by Michaelis–Menten kinetics for the splicing step, and (iv) the deterministic, well-mixed limit described by an Ordinary Differential Equation (ODE) model.\n\nBegin from the following foundational statements:\n- The splicing step is catalyzed by a limited pool of spliceosome complexes acting on unspliced RNA $u$, and its net conversion flux is governed by Michaelis–Menten kinetics in the substrate $u$ with maximum rate $V_{\\max}$ and Michaelis constant $K_M$.\n- Spliced RNA $s$ is degraded with a first-order rate constant $\\gamma_s$.\n\nTask A (derivation): Using mass balance and the Michaelis–Menten description of the splicing conversion flux as a function of $u$, derive from first principles the instantaneous velocity for the spliced RNA, i.e., the time derivative $\\dfrac{ds}{dt}$, in terms of $u$, $s$, $V_{\\max}$, $K_M$, and $\\gamma_s$. Your derivation must start from the verbal principles above without assuming any prewritten target formula and must clearly identify the physically interpretable influx and efflux terms that determine $\\dfrac{ds}{dt}$.\n\nTask B (implementation): Write a complete, runnable program that evaluates the derived instantaneous spliced velocity $\\dfrac{ds}{dt}$ for the following test suite of parameter sets, where each case provides $(V_{\\max}, K_M, \\gamma_s, u, s)$:\n- Case $1$: $(12.0, 25.0, 0.10, 20.0, 50.0)$\n- Case $2$: $(8.0, 10.0, 0.25, 0.0, 40.0)$\n- Case $3$: $(15.0, 5.0, 0.20, 500.0, 60.0)$\n- Case $4$: $(9.0, 30.0, 0.50, 30.0, 25.0)$\n- Case $5$: $(7.5, 1.0, 0.05, 2.0, 20.0)$\n- Case $6$: $(0.0, 10.0, 0.10, 100.0, 10.0)$\n\nInterpret $u$ and $s$ as arbitrary concentration-like units and time in an arbitrary time-unit. Report the instantaneous spliced velocity $\\dfrac{ds}{dt}$ in the same concentration-like units per time-unit. Your program must:\n- Compute a floating-point value for each case.\n- Round each result to $6$ decimal places.\n- Produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test cases (for example, $[x_1,x_2,\\dots]$).\n\nNo input should be read from the user or files. The program must be self-contained and runnable as is.", "solution": "The problem statement has been validated and is deemed sound. It is scientifically grounded in the principles of chemical kinetics and molecular biology, is well-posed, and provides a complete and consistent set of information for deriving and evaluating the specified model. We will now proceed with the derivation and subsequent implementation.\n\nThe task is to derive the instantaneous velocity of spliced RNA, denoted by $\\dfrac{ds}{dt}$, based on the principles of mass balance and Michaelis–Menten kinetics for an enzymatic process. The system consists of two species: unspliced RNA, $u$, and spliced RNA, $s$.\n\nThe fundamental principle governing the dynamics of any chemical species in a well-mixed system is the law of mass balance. This law states that the net rate of change of the concentration of a species is equal to the sum of all influx rates (production) minus the sum of all efflux rates (consumption or degradation). For the spliced RNA species, $s$, this can be written as the following ordinary differential equation:\n$$\n\\frac{ds}{dt} = \\sum (\\text{Influx to } s) - \\sum (\\text{Efflux from } s)\n$$\n\nWe must now identify the specific influx and efflux terms for $s$ from the problem description.\n\n1.  **Influx Term for Spliced RNA, $s$**:\n    The problem states that spliced RNA, $s$, is produced from the conversion of unspliced RNA, $u$. This conversion process, splicing, is catalyzed by the spliceosome machinery. The problem specifies that this process follows Michaelis–Menten kinetics, where the unspliced RNA, $u$, acts as the substrate. The rate of an enzymatic reaction described by Michaelis–Menten kinetics is given by the expression:\n    $$\n    \\text{Reaction Rate} = \\frac{V_{\\max} [\\text{Substrate}]}{K_M + [\\text{Substrate}]}\n    $$\n    Here, $V_{\\max}$ is the maximum rate of the reaction when the enzyme is saturated with substrate, and $K_M$ (the Michaelis constant) is the substrate concentration at which the reaction rate is half of $V_{\\max}$.\n    In our context, the substrate is $u$. Therefore, the rate of splicing, which constitutes the sole influx to the population of $s$, is given by:\n    $$\n    \\text{Influx to } s = \\text{Splicing Rate} = \\frac{V_{\\max} u}{K_M + u}\n    $$\n    This term represents the rate of production of spliced RNA molecules.\n\n2.  **Efflux Term for Spliced RNA, $s$**:\n    The problem states that spliced RNA, $s$, is removed from the system via a first-order degradation process. The rate constant for this process is given as $\\gamma_s$. In a first-order process, the rate of degradation is directly proportional to the concentration of the species being degraded.\n    Thus, the efflux from the population of $s$ is:\n    $$\n    \\text{Efflux from } s = \\text{Degradation Rate} = \\gamma_s s\n    $$\n    This term represents the rate of removal of spliced RNA molecules.\n\n3.  **Complete Equation for $\\dfrac{ds}{dt}$**:\n    By substituting the derived influx and efflux terms into the mass balance equation, we obtain the complete expression for the instantaneous velocity of spliced RNA:\n    $$\n    \\frac{ds}{dt} = \\left( \\frac{V_{\\max} u}{K_M + u} \\right) - (\\gamma_s s)\n    $$\n    This equation describes the net rate of change of spliced RNA abundance. The first term, $\\dfrac{V_{\\max} u}{K_M + u}$, is the production rate due to splicing, which is a saturating function of the precursor $u$. The second term, $\\gamma_s s$, is the degradation rate, which is a linear function of the species $s$ itself. The \"velocity\" $\\dfrac{ds}{dt}$ is positive when production exceeds degradation and negative when degradation exceeds production. This derived formula is now ready for implementation.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the instantaneous spliced RNA velocity ds/dt for a suite of test cases\n    based on a Michaelis-Menten model of splicing saturation.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (V_max, K_M, gamma_s, u, s)\n    test_cases = [\n        (12.0, 25.0, 0.10, 20.0, 50.0),  # Case 1\n        (8.0, 10.0, 0.25, 0.0, 40.0),   # Case 2\n        (15.0, 5.0, 0.20, 500.0, 60.0),  # Case 3\n        (9.0, 30.0, 0.50, 30.0, 25.0),   # Case 4\n        (7.5, 1.0, 0.05, 2.0, 20.0),    # Case 5\n        (0.0, 10.0, 0.10, 100.0, 10.0)   # Case 6\n    ]\n\n    results = []\n    for case in test_cases:\n        # Unpack parameters for clarity\n        V_max, K_M, gamma_s, u, s = case\n\n        # Calculate the splicing influx term based on Michaelis-Menten kinetics.\n        # This represents the production rate of spliced RNA.\n        splicing_influx = (V_max * u) / (K_M + u)\n\n        # Calculate the degradation efflux term based on first-order kinetics.\n        # This represents the removal rate of spliced RNA.\n        degradation_efflux = gamma_s * s\n\n        # The instantaneous velocity of spliced RNA (ds/dt) is the influx minus the efflux.\n        ds_dt = splicing_influx - degradation_efflux\n        \n        # Round the result to 6 decimal places and append to the list.\n        # Using format specifier to ensure consistent output format with trailing zeros.\n        results.append(f\"{ds_dt:.6f}\")\n\n    # Final print statement in the exact required format: [res1,res2,...,resN]\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2427330"}]}