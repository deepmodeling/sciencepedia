{"hands_on_practices": [{"introduction": "A fundamental challenge in functional profiling is that the raw data—sequencing read counts—do not directly reflect the true abundance of organisms or functions in a community. This exercise uses a hypothetical scenario to explore the key biases that can distort these measurements, such as variations in gene copy number and DNA extraction efficiency. By dissecting a common but flawed assumption, you will develop a crucial intuition for why sophisticated normalization methods are not just optional, but essential for drawing accurate biological conclusions from metagenomic data [@problem_id:2392677].", "problem": "In shotgun metagenomic functional profiling, short reads are sampled from the pool of extracted deoxyribonucleic acid (DNA) and then mapped to gene families to estimate their abundances. Consider a community with two bacterial species, denoted $S_1$ and $S_2$, present at equal cell counts of $N_1 = N_2 = 10^6$ cells. Both species carry a gene family $g$ encoding a specific enzyme relevant to antibiotic resistance. In $S_1$, $g$ is present on the chromosome at $c_{1g} = 1$ copy per cell. In $S_2$, $g$ is present at $c_{2g} = 3$ chromosomal copies per cell and additionally on a plasmid at an average of $h_{2g} = 8$ copies per cell. The DNA extraction efficiency differs between the species due to cell-wall properties: $e_1 = 0.5$ for $S_1$ and $e_2 = 1.0$ for $S_2$. Assume fixed read length, random fragmentation, and that reads are sampled approximately uniformly from the extracted DNA pool. Let the length of $g$ be $L_g$ nucleotides, and assume it is the same in both taxa for this scenario.\n\nA common simplifying assumption in functional profiling is that the abundance of a gene family $g$ in the sequencing data is directly proportional to the abundance of the organism(s) carrying $g$. Based on first principles of shotgun sequencing and the setup above, which of the following statements correctly identify biases introduced by this assumption when applied to real metagenomes?\n\nA. Organisms with higher per-cell copy number of $g$ (including copies on chromosomes or extrachromosomal elements) will appear more abundant than equally frequent organisms with fewer copies, even if their cell counts are the same.\n\nB. Differences in genome size between organisms systematically cause more reads to map to $g$ in species with larger genomes, biasing organism abundance upward for those species, even when per-cell copy number and extraction efficiency are equal.\n\nC. Differential DNA extraction or lysis efficiency decouples read counts from cell counts, so organisms that yield more extractable DNA per cell will appear more abundant based on $g$ than organisms that are harder to lyse.\n\nD. If $g$ resides on a high-copy plasmid or other mobile genetic element, its read abundance can be inflated relative to the host’s cell abundance, leading to an overestimation of the host organism’s abundance when reads are attributed back to that host.\n\nE. Without normalization by gene length, longer instances of $g$ generate more reads per cell, so organisms with longer $g$ alleles will appear more abundant than organisms with shorter $g$ alleles, even at equal cell counts.\n\nSelect all that apply.", "solution": "The problem statement must first be validated for scientific soundness, consistency, and clarity.\n\nStep 1: Extract Givens.\n-   Community composition: Two species, $S_1$ and $S_2$.\n-   Cell counts: $N_1 = 10^6$ cells, $N_2 = 10^6$ cells.\n-   Gene of interest: $g$, with length $L_g$ (same in both species).\n-   Gene copy number in $S_1$: $c_{1g} = 1$ (chromosomal), no plasmid copies mentioned, so plasmid copy number $h_{1g} = 0$. Total copies per cell: $C_{1g} = c_{1g} + h_{1g} = 1$.\n-   Gene copy number in $S_2$: $c_{2g} = 3$ (chromosomal), $h_{2g} = 8$ (plasmid). Total copies per cell: $C_{2g} = c_{2g} + h_{2g} = 3 + 8 = 11$.\n-   DNA extraction efficiency: $e_1 = 0.5$ for $S_1$, $e_2 = 1.0$ for $S_2$.\n-   Sequencing assumptions: Fixed read length, random fragmentation, uniform sampling from extracted DNA.\n-   The core assumption to be tested: \"the abundance of a gene family $g$ in the sequencing data is directly proportional to the abundance of the organism(s) carrying $g$.\"\n-   The question: Identify statements that correctly describe biases introduced by this assumption in real metagenomes, based on first principles and the provided setup.\n\nStep 2: Validate Using Extracted Givens.\nThe problem is scientifically grounded. The scenario described is a standard model used to explain common biases in shotgun metagenomics, such as variations in gene copy number, plasmid abundance, and differential DNA extraction efficiency. The problem is well-posed, providing a clear question and sufficient, consistent data to analyze the underlying principles. The terminology is standard for computational biology and bioinformatics. The problem is objective and free of non-scientific claims.\n\nStep 3: Verdict and Action.\nThe problem is valid. I will proceed with the derivation and solution.\n\nThe fundamental principle of shotgun sequencing is that, under the assumption of random sampling, the number of reads originating from a specific DNA sequence is proportional to the total length of that sequence present in the extracted DNA pool.\n\nLet $R_{ig}$ be the number of reads mapping to gene $g$ from species $S_i$.\nThe total length of gene $g$ from species $S_i$ in the initial community is the product of the number of cells ($N_i$), the number of copies of gene $g$ per cell ($C_{ig}$), and the length of the gene ($L_{ig}$).\nThe extraction process has an efficiency $e_i$. Thus, the total length of gene $g$ from species $S_i$ in the *extracted DNA pool* is proportional to $e_i N_i C_{ig} L_{ig}$.\n\nThe number of reads $R_{ig}$ is therefore proportional to this quantity:\n$$ R_{ig} \\propto e_i N_i C_{ig} L_{ig} $$\nThe simplifying assumption states that read abundance is proportional to organism abundance. In our case, this would mean the ratio of reads from $S_2$ to $S_1$ should equal the ratio of their cell counts:\n$$ \\frac{R_{2g}}{R_{1g}} \\stackrel{?}{=} \\frac{N_2}{N_1} $$\nGiven $N_1=N_2=10^6$, the assumption implies we should find $R_{2g} / R_{1g} = 1$.\n\nNow, let us calculate the ratio based on first principles:\n$$ \\frac{R_{2g}}{R_{1g}} = \\frac{e_2 N_2 C_{2g} L_{2g}}{e_1 N_1 C_{1g} L_{1g}} $$\nWe are given $N_1 = N_2 = 10^6$, $e_1 = 0.5$, $e_2 = 1.0$, $L_{1g} = L_{2g} = L_g$, $C_{1g} = 1$, and $C_{2g} = 11$.\nSubstituting these values:\n$$ \\frac{R_{2g}}{R_{1g}} = \\frac{(1.0) \\cdot (10^6) \\cdot (11) \\cdot L_g}{(0.5) \\cdot (10^6) \\cdot (1) \\cdot L_g} = \\frac{11}{0.5} = 22 $$\nThe actual ratio of reads is $22$, which is significantly different from the ratio of $1$ predicted by the simplifying assumption. The factors causing this discrepancy are the biases in question. Our model shows these biases arise from differences in extraction efficiency ($e_i$), per-cell gene copy number ($C_{ig}$), and potentially gene length ($L_{ig}$), even when cell counts ($N_i$) are identical.\n\nNow, we evaluate each statement.\n\nA. **Organisms with higher per-cell copy number of $g$ (including copies on chromosomes or extrachromosomal elements) will appear more abundant than equally frequent organisms with fewer copies, even if their cell counts are the same.**\nOur model shows that $R_{ig}$ is directly proportional to $C_{ig}$, the per-cell copy number. In the problem, $S_2$ has $C_{2g}=11$ copies while $S_1$ has $C_{1g}=1$. This $11$-fold difference in copy number directly contributes to the $22$-fold difference in reads, even though $N_1=N_2$. Therefore, the higher copy number in $S_2$ makes it seem more abundant based on reads from gene $g$. The statement is a correct description of this bias.\nVerdict: **Correct**.\n\nB. **Differences in genome size between organisms systematically cause more reads to map to $g$ in species with larger genomes, biasing organism abundance upward for those species, even when per-cell copy number and extraction efficiency are equal.**\nThis statement is incorrect. The number of reads for a gene is proportional to its fraction of the *total* DNA in the sample. Let $G_i$ be the genome size of species $i$. The total amount of DNA in the extracted pool is proportional to $\\sum_j e_j N_j G_j$. A single-copy gene in a species with a larger genome $G_i$ constitutes a smaller fraction of that genome's total DNA. Therefore, for the same number of cells, the species with the larger genome will contribute *fewer* reads to that gene, not more. The gene's signal is diluted by the larger genome. This statement proposes the opposite effect.\nVerdict: **Incorrect**.\n\nC. **Differential DNA extraction or lysis efficiency decouples read counts from cell counts, so organisms that yield more extractable DNA per cell will appear more abundant based on $g$ than organisms that are harder to lyse.**\nOur model shows $R_{ig}$ is directly proportional to the extraction efficiency $e_i$. In the problem, $S_2$ has twice the extraction efficiency of $S_1$ ($e_2 = 1.0$ vs. $e_1 = 0.5$). This contributes a factor of $2$ to the final read ratio of $22$. An organism that is easier to lyse (higher $e_i$) will be overrepresented in the sequencing data relative to its actual cell count. The statement accurately describes this bias.\nVerdict: **Correct**.\n\nD. **If $g$ resides on a high-copy plasmid or other mobile genetic element, its read abundance can be inflated relative to the host’s cell abundance, leading to an overestimation of the host organism’s abundance when reads are attributed back to that host.**\nThis is a specific, and very important, case of the bias described in statement A. In the problem, gene $g$ in species $S_2$ has $h_{2g}=8$ copies on a plasmid, contributing significantly to its total copy number of $C_{2g}=11$. This high-copy plasmid \"inflates\" the abundance of gene $g$ far beyond what would be expected from a chromosomal gene. If these reads are used to infer the abundance of species $S_2$, an overestimation will occur. The statement is correct.\nVerdict: **Correct**.\n\nE. **Without normalization by gene length, longer instances of $g$ generate more reads per cell, so organisms with longer $g$ alleles will appear more abundant than organisms with shorter $g$ alleles, even at equal cell counts.**\nOur model shows $R_{ig} \\propto L_{ig}$. A longer gene provides a larger target for random DNA fragmentation and sequencing. Consequently, all else being equal, a longer version of a gene will generate more reads. If this is not corrected for by normalization (e.g., as in RPKM or TPM calculations), the organism with the longer allele will appear more abundant. The question asks about biases in \"real metagenomes,\" where gene lengths can vary between orthologs. Although the problem's specific scenario sets $L_{1g}=L_{2g}$ for simplicity, the principle described in this statement is a fundamental bias in shotgun sequencing.\nVerdict: **Correct**.", "answer": "$$\\boxed{ACDE}$$", "id": "2392677"}, {"introduction": "Having established the major sources of bias, we now turn to a practical application of correcting for one of them: average genome size. In shotgun sequencing, where reads are sampled from the community's total DNA pool, a gene within a large genome represents a smaller fraction of the total DNA compared to the same gene within a small genome. This hands-on calculation will guide you through the process of normalizing for this dilution effect, a critical step for accurately comparing the per-genome functional capacity of different microbial communities [@problem_id:2392656].", "problem": "Two complex microbial communities are shotgun-sequenced to compare the abundance of a specific metabolic function encoded by a single orthologous gene. Community A is bacteria-dominated with average genome size $\\bar{G_A}$, and Community B is archaea-dominated with average genome size $\\bar{G_B}$. Assume that shotgun reads are sampled uniformly from total community DNA such that the expected fraction of reads mapping to any feature is proportional to the total nucleotide length of that feature in the community. The function of interest is encoded by a single gene of conserved length $L$ across the two communities, and the per-base mappability and read lengths are the same in both datasets. Let $p_A$ and $p_B$ denote the expected average copies per genome of the function in Community A and Community B, respectively.\n\nThe sequencing results are:\n- Community A: total quality-filtered reads $N_A = 6.0 \\times 10^{7}$, reads mapping to the function $n_A = 9.0 \\times 10^{4}$, average genome size $\\bar{G_A} = 4.8 \\times 10^{6}$ base pairs.\n- Community B: total quality-filtered reads $N_B = 4.0 \\times 10^{7}$, reads mapping to the function $n_B = 4.0 \\times 10^{4}$, average genome size $\\bar{G_B} = 2.3 \\times 10^{6}$ base pairs.\n\nUnder the stated assumptions, compute the genome-size-corrected fold-change in per-genome functional prevalence between the communities, defined as the ratio $p_A / p_B$. Express your final answer as a unitless real number and round your answer to four significant figures.", "solution": "Let $r_A$ and $r_B$ be the observed fractions of reads mapping to the function in Community A and Community B, respectively. By definition,\n$$\nr_A = \\frac{n_A}{N_A}, \\quad r_B = \\frac{n_B}{N_B}.\n$$\nUnder uniform sampling of reads from total community DNA, the expected fraction of reads mapping to the function equals the total nucleotide length of the function across the community divided by the total nucleotide length of all genomes in the community. If the function has conserved gene length $L$ and the expected average copies per genome is $p$, then for a community with $M$ genomes and average genome size $\\bar{G}$, the total nucleotide length of the function is $M \\cdot p \\cdot L$ and the total nucleotide length of the community is $M \\cdot \\bar{G}$. Therefore, the expected read fraction is\n$$\nr = \\frac{M \\cdot p \\cdot L}{M \\cdot \\bar{G}} = \\frac{p \\cdot L}{\\bar{G}}.\n$$\nSolving for $p$ gives\n$$\np = r \\cdot \\frac{\\bar{G}}{L}.\n$$\nApplying this to the two communities, the fold-change in per-genome prevalence is\n$$\n\\frac{p_A}{p_B} = \\frac{r_A \\cdot \\frac{\\bar{G_A}}{L}}{r_B \\cdot \\frac{\\bar{G_B}}{L}} = \\frac{r_A}{r_B} \\cdot \\frac{\\bar{G_A}}{\\bar{G_B}}.\n$$\nCompute $r_A$ and $r_B$ from the data:\n$$\nr_A = \\frac{9.0 \\times 10^{4}}{6.0 \\times 10^{7}} = 1.5 \\times 10^{-3}, \\quad r_B = \\frac{4.0 \\times 10^{4}}{4.0 \\times 10^{7}} = 1.0 \\times 10^{-3}.\n$$\nCompute the average genome size ratio:\n$$\n\\frac{\\bar{G_A}}{\\bar{G_B}} = \\frac{4.8 \\times 10^{6}}{2.3 \\times 10^{6}} = \\frac{4.8}{2.3} \\approx 2.0869565\\ldots\n$$\nTherefore,\n$$\n\\frac{p_A}{p_B} = \\left(\\frac{1.5 \\times 10^{-3}}{1.0 \\times 10^{-3}}\\right) \\cdot \\left(\\frac{4.8 \\times 10^{6}}{2.3 \\times 10^{6}}\\right) = 1.5 \\times 2.0869565\\ldots \\approx 3.1304347\\ldots\n$$\nRounding to four significant figures yields $3.130$.", "answer": "$$\\boxed{3.130}$$", "id": "2392656"}, {"introduction": "We now synthesize our understanding of normalization and correction into a complete, practical workflow. This exercise challenges you to build a computational pipeline that addresses a ubiquitous problem in metagenomics: contamination from a known host organism. You will implement a sequence of steps from raw count correction to final pathway aggregation, applying standard normalization techniques like Transcripts Per Million (TPM) along the way to produce a robust functional profile from messy, realistic data [@problem_id:2392678].", "problem": "You are given a simplified mathematical model of functional profiling for shotgun metagenomic sequencing of a microbial community that is contaminated by DNA from a known host organism. The scientific setting follows the Central Dogma of Molecular Biology (DNA to RNA to protein) and widely used count-based profiling in metagenomics: sequencing reads originate from genomic DNA, align to reference gene families, and are length-normalized to obtain compositional abundances suitable for downstream functional aggregation. Your task is to derive, implement, and evaluate a robust pipeline that corrects observed gene-family counts for host contamination when the host organism is known.\n\nBase definitions and assumptions:\n- Let there be $G$ gene families indexed by $g \\in \\{1,\\dots,G\\}$ and $P$ functional pathways indexed by $p \\in \\{1,\\dots,P\\}$. Let $\\mathbf{W} \\in \\{0,1\\}^{P \\times G}$ be the binary pathway-to-gene-family membership matrix with entries $W_{p,g} = 1$ if gene family $g$ contributes to pathway $p$, and $W_{p,g} = 0$ otherwise. A gene family may contribute to multiple pathways.\n- Let $\\mathbf{L} \\in \\mathbb{R}_{>0}^G$ denote gene-family lengths in base pairs (bp). Assume gene family $g$ has length $L_g$ bp.\n- Let $N$ be the total number of sequenced reads and $c \\in [0,1]$ be the host contamination fraction (as a decimal). Thus, the expected number of host-derived reads is $cN$, and the expected number of microbe-derived reads is $(1-c)N$.\n- Let $\\mathbf{y} \\in \\mathbb{N}_0^G$ be the observed counts of reads aligned to each gene family after a naive mapping procedure that does not proactively exclude host reads.\n- Let $\\mathbf{m} \\in [0,1]^G$ encode, for the known host organism, the per-read probability that a host-derived read aligns (spuriously) to gene family $g$ in the catalog used to compute $\\mathbf{y}$. The entries of $\\mathbf{m}$ do not need to sum to $1$ because a host read may fail to align to any gene family in the catalog; they represent marginal alignment probabilities to the modeled gene families.\n\nFrom first principles, use the following reasoning to design a robust estimator for microbial-only gene-family counts and derive a functional profile:\n- Additivity and non-negativity: For each $g$, the observed count $y_g$ is the sum of a non-negative microbial signal and a non-negative host-induced alignment signal. Reads are discrete events; it is standard to model read counts with independent Poisson distributions conditioned on rates determined by underlying genome content, length, and mappability.\n- Law of total expectation: Given the host fraction $c$, the total reads $N$, and the host alignment probabilities $\\mathbf{m}$, it is justified to treat $cN \\cdot m_g$ as the expected number of host-aligned reads for gene family $g$. Use this expectation to build a contamination-corrected estimator for the microbial-only counts that respects non-negativity.\n- Length normalization and compositional scaling: Convert corrected counts to Reads Per Kilobase (RPK) using lengths in kilobases, then scale to Transcripts (or Tags) Per Million (TPM) to obtain a composition over gene families.\n- Pathway aggregation with overlap: To avoid double-counting gene families that contribute to multiple pathways, split each gene family’s TPM evenly across all pathways to which it belongs before summation.\n- Diversity summary: Summarize each pathway composition with the Gini–Simpson diversity index, defined as $1 - \\sum_{p=1}^{P} \\pi_p^2$, where $\\pi_p$ is the pathway-level composition normalized to sum to $1$.\n\nYour program must implement the following steps in this exact order:\n1) Compute a host-corrected estimate of microbial-only counts for each gene family using the information above, enforcing that no corrected count is negative.\n2) Convert corrected counts to RPK by dividing by gene length in kilobases.\n3) Convert RPK to TPM by dividing by the sum of all RPK values and multiplying by $10^6$.\n4) For each gene family $g$, compute its pathway membership count $d_g = \\sum_{p=1}^{P} W_{p,g}$. Distribute $g$’s TPM evenly across all pathways it belongs to; that is, contribute $\\frac{\\mathrm{TPM}_g}{d_g}$ to each such pathway. If $d_g = 0$ for some $g$, it contributes zero to all pathways.\n5) Normalize the resulting pathway abundances to a probability vector $\\boldsymbol{\\pi}$ by dividing by their sum, and compute the Gini–Simpson diversity $1 - \\sum_{p=1}^{P} \\pi_p^2$ as a decimal.\n\nTest suite:\nUse $G = 5$ gene families and $P = 3$ pathways with the same $\\mathbf{L}$ and $\\mathbf{W}$ across all test cases.\n- Gene lengths (bp): $\\mathbf{L} = [1000, 1500, 800, 1200, 500]$.\n- Pathway mapping matrix rows correspond to pathways $p=1,2,3$ and columns to gene families $g=1,\\dots,5$:\n  - Pathway $1$: $[1, 1, 0, 0, 0]$.\n  - Pathway $2$: $[0, 0, 1, 0, 1]$.\n  - Pathway $3$: $[0, 1, 0, 1, 1]$.\nThus, gene family $2$ belongs to two pathways, and gene family $5$ belongs to two pathways; the others belong to one pathway.\n\nFor each test case, the tuple is $(N, c, \\mathbf{y}, \\mathbf{m})$:\n- Case A (happy path): $N = 100000$, $c = 0.2$, $\\mathbf{y} = [8000, 6000, 2000, 3000, 1000]$, $\\mathbf{m} = [0.12, 0.05, 0.02, 0.01, 0.0]$.\n- Case B (zero contamination): $N = 100000$, $c = 0.0$, $\\mathbf{y} = [8000, 6000, 2000, 3000, 1000]$, $\\mathbf{m} = [0.12, 0.05, 0.02, 0.01, 0.0]$.\n- Case C (high contamination but still informative): $N = 100000$, $c = 0.6$, $\\mathbf{y} = [8000, 6000, 2000, 3000, 1000]$, $\\mathbf{m} = [0.12, 0.05, 0.02, 0.01, 0.0]$.\n- Case D (extreme contamination with clipping at zero): $N = 100000$, $c = 0.95$, $\\mathbf{y} = [8000, 6000, 2000, 3000, 1000]$, $\\mathbf{m} = [0.12, 0.05, 0.02, 0.01, 0.0]$.\n\nAngle units do not apply. No physical units appear in the requested outputs.\n\nYour required output:\n- For each test case, compute the single scalar Gini–Simpson diversity value as a decimal.\n- Your program should produce a single line of output containing the four results as a comma-separated list enclosed in square brackets, in the order of the cases A, B, C, D. Each value must be rounded to six digits after the decimal point. Example format: \"[0.123456,0.234567,0.345678,0.456789]\".", "solution": "The problem as stated is scientifically sound, mathematically well-posed, and free of contradictions or ambiguity. It outlines a simplified but standard workflow for functional profiling in metagenomics, specifically addressing the common issue of host DNA contamination. The problem provides all necessary data and definitions to construct a deterministic computational pipeline. We shall proceed with deriving the solution by following the prescribed sequence of operations with rigorous adherence to the provided model.\n\nLet there be $G$ gene families and $P$ pathways. The provided data are: the total read count $N$; the host contamination fraction $c$; the observed, uncorrected read counts aligned to each gene family, $\\mathbf{y} \\in \\mathbb{N}_0^G$; the per-read probability of a host-derived read spuriously aligning to a microbial gene family, $\\mathbf{m} \\in [0,1]^G$; the gene family lengths in base pairs, $\\mathbf{L} \\in \\mathbb{R}_{>0}^G$; and the pathway-to-gene membership matrix, $\\mathbf{W} \\in \\{0,1\\}^{P \\times G}$.\n\nThe objective is to compute a single scalar, the Gini-Simpson diversity index of the corrected and aggregated pathway functional profile. The procedure is as follows:\n\n**Step 1: Estimation of Microbial-Only Gene Counts**\n\nThe observed read count for a gene family $g$, denoted $y_g$, is modeled as an additive composite of reads from the microbial community and spurious alignments from the host genome. The expected number of reads originating from the host and aligning to gene family $g$ is the product of the total number of host-derived reads, $cN$, and the per-read alignment probability, $m_g$.\n\nExpected host count for gene family $g$:\n$$ E[\\text{host counts}_g] = c \\cdot N \\cdot m_g $$\n\nAn estimator for the true microbial-only count, which we denote $\\mathbf{y'}$, is obtained by subtracting this expected host contribution from the observed count $y_g$. As read counts cannot be negative, we enforce a non-negativity constraint by taking the maximum of the difference and zero. For each gene family $g \\in \\{1, \\dots, G\\}$, the corrected microbial count $y'_g$ is:\n$$ y'_g = \\max(0, y_g - c \\cdot N \\cdot m_g) $$\n\n**Step 2: Conversion to Reads Per Kilobase (RPK)**\n\nTo account for the fact that longer genes are more likely to be sequenced, the corrected counts $\\mathbf{y'}$ must be normalized by gene length. The lengths $\\mathbf{L}$ are given in base pairs (bp), but the standard RPK unit requires length in kilobases (kb). The length of gene $g$ in kilobases is $L_g^{\\text{kb}} = L_g / 1000$.\n\nThe RPK value for gene family $g$, which we denote $r_g$, is calculated as:\n$$ r_g = \\frac{y'_g}{L_g / 1000} $$\nIf $y'_g=0$, then $r_g=0$. Since the problem specifies $L_g > 0$, division by zero is not a concern here.\n\n**Step 3: Conversion to Transcripts Per Million (TPM)**\n\nRPK values normalize for gene length but do not account for sequencing depth, making them unsuitable for comparing compositions across samples. TPM normalization resolves this by scaling RPK values to a common total, typically $10^6$. First, we compute the sum of all RPK values across all gene families:\n$$ S_{\\text{RPK}} = \\sum_{k=1}^{G} r_k $$\nThen, the TPM value for gene family $g$, denoted $t_g$, is:\n$$ t_g = \\left( \\frac{r_g}{S_{\\text{RPK}}} \\right) \\cdot 10^6 $$\nIf $S_{\\text{RPK}} = 0$ (which occurs if and only if all corrected counts $y'_g$ are zero), then all $t_g$ are also zero. The collection of TPM values, $\\mathbf{t} = [t_1, \\dots, t_G]$, represents the compositional abundance of gene families, where $\\sum_{g=1}^{G} t_g = 10^6$.\n\n**Step 4: Aggregation of Gene-Family Abundances into Pathways**\n\nFunctional analysis requires aggregating gene-level information to the level of biological pathways. A gene family $g$ may belong to multiple pathways. To prevent double-counting its contribution, its abundance $t_g$ is distributed evenly among all pathways to which it belongs. First, we determine the pathway membership count for each gene family $g$, $d_g$, by summing the corresponding column of the membership matrix $\\mathbf{W}$:\n$$ d_g = \\sum_{p=1}^{P} W_{p,g} $$\nThe abundance of pathway $p$, denoted $A_p$, is the sum of contributions from all its member gene families. If $d_g > 0$, gene $g$ contributes $t_g/d_g$ to each of its pathways. If $d_g=0$, it contributes nothing.\n$$ A_p = \\sum_{g=1}^{G} W_{p,g} \\cdot \\frac{t_g}{d_g} \\quad (\\text{with the convention that } \\frac{t_g}{0} = 0) $$\nThis yields a vector of pathway abundances $\\mathbf{A} = [A_1, \\dots, A_P]$. It is a property of this method that the total pathway abundance equals the total gene family abundance: $\\sum_{p=1}^{P} A_p = \\sum_{g=1}^{G} t_g = 10^6$.\n\n**Step 5: Calculation of Gini-Simpson Diversity Index**\n\nFinally, we summarize the structure of the resulting pathway functional profile using a diversity index. We first normalize the pathway abundances $\\mathbf{A}$ to a probability distribution $\\boldsymbol{\\pi}$, where each element $\\pi_p$ represents the relative abundance of pathway $p$:\n$$ \\pi_p = \\frac{A_p}{\\sum_{k=1}^{P} A_k} $$\nIf $\\sum_{k=1}^{P} A_k = 0$, we define $\\pi_p = 0$ for all $p$.\n\nThe Gini-Simpson index, $D$, is then computed. It is defined as one minus the Simpson index, which is the probability that two randomly drawn entities from the population belong to the same type.\n$$ D = 1 - \\sum_{p=1}^{P} \\pi_p^2 $$\nThe value of $D$ ranges from $0$ (a community with only one pathway) to $1 - 1/P$ (a perfectly even community). If all $\\pi_p=0$, the sum of squares is $0$ and $D=1$. This scalar value is the final result for each test case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the metagenomic functional profiling problem for a series of test cases.\n    \"\"\"\n    # Define the fixed parameters for all test cases.\n    # Gene lengths in base pairs (bp)\n    L_bp = np.array([1000, 1500, 800, 1200, 500], dtype=np.float64)\n    # Pathway-to-gene-family membership matrix (P x G)\n    W = np.array([\n        [1, 1, 0, 0, 0],  # Pathway 1\n        [0, 0, 1, 0, 1],  # Pathway 2\n        [0, 1, 0, 1, 1],  # Pathway 3\n    ], dtype=np.float64)\n\n    # Define the test cases as a list of tuples (N, c, y, m).\n    test_cases = [\n        # Case A: Happy path\n        (100000, 0.2, [8000, 6000, 2000, 3000, 1000], [0.12, 0.05, 0.02, 0.01, 0.0]),\n        # Case B: Zero contamination\n        (100000, 0.0, [8000, 6000, 2000, 3000, 1000], [0.12, 0.05, 0.02, 0.01, 0.0]),\n        # Case C: High contamination\n        (100000, 0.6, [8000, 6000, 2000, 3000, 1000], [0.12, 0.05, 0.02, 0.01, 0.0]),\n        # Case D: Extreme contamination with clipping\n        (100000, 0.95, [8000, 6000, 2000, 3000, 1000], [0.12, 0.05, 0.02, 0.01, 0.0]),\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        N, c, y_obs, m = case\n        y_obs = np.array(y_obs, dtype=np.float64)\n        m = np.array(m, dtype=np.float64)\n\n        # Step 1: Compute host-corrected estimate of microbial-only counts.\n        expected_host_counts = c * N * m\n        corrected_counts = np.maximum(0, y_obs - expected_host_counts)\n\n        # Step 2: Convert corrected counts to RPK (Reads Per Kilobase).\n        L_kb = L_bp / 1000.0\n        # This division is safe since L_bp > 0 is a given.\n        rpk = corrected_counts / L_kb\n\n        # Step 3: Convert RPK to TPM (Transcripts Per Million).\n        sum_rpk = np.sum(rpk)\n        if sum_rpk == 0:\n            tpm = np.zeros_like(rpk)\n        else:\n            tpm = (rpk / sum_rpk) * 1e6\n\n        # Step 4: Aggregate TPMs into pathway abundances.\n        # d_g: pathway membership count for each gene family g.\n        pathway_membership_counts = np.sum(W, axis=0)\n        \n        # Calculate contribution of each gene's TPM to a single pathway.\n        # This handles division by zero for genes not in any pathway (d_g=0).\n        with np.errstate(divide='ignore', invalid='ignore'):\n            tpm_contribution_per_pathway = tpm / pathway_membership_counts\n        \n        # Set contribution to 0 if pathway_membership_counts was 0.\n        tpm_contribution_per_pathway[np.isinf(tpm_contribution_per_pathway)] = 0\n        tpm_contribution_per_pathway[np.isnan(tpm_contribution_per_pathway)] = 0\n        \n        # Matrix multiplication aggregates contributions into pathways.\n        pathway_abundances = W @ tpm_contribution_per_pathway\n\n        # Step 5: Normalize pathway abundances and compute Gini-Simpson diversity.\n        sum_pathway_abundances = np.sum(pathway_abundances)\n        if sum_pathway_abundances == 0:\n            # If no functions detected, diversity is ill-defined.\n            # A community with no members can be seen as maximally diverse, or the index is 1.\n            # 1 - sum(0^2) = 1.\n            diversity = 1.0\n        else:\n            pi = pathway_abundances / sum_pathway_abundances\n            diversity = 1.0 - np.sum(pi**2)\n            \n        results.append(diversity)\n\n    # Format the results into the required string format.\n    # Each value is rounded to six digits after the decimal point.\n    output_str = f\"[{','.join(f'{r:.6f}' for r in results)}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2392678"}]}