{"hands_on_practices": [{"introduction": "Pseudotime analysis is a powerful computational tool, but like any method, it rests on core assumptions about the process being modeled. A critical first step in any trajectory analysis is to ensure that the biological process of interest aligns with the model's assumptions. This practice challenges you to consider the fundamental topological difference between a directed process like cell differentiation and a cyclical one like the cell cycle, a crucial distinction for the valid application of many standard trajectory inference algorithms [@problem_id:1465922].", "problem": "In systems biology, single-cell RNA sequencing (scRNA-seq) allows for the profiling of gene expression in individual cells. A common computational technique applied to scRNA-seq data is pseudotime analysis. This method aims to order cells along a trajectory that represents a continuous biological process, such as cellular differentiation, by using transitional expression states. The resulting \"pseudotime\" value for each cell represents its progress through the process.\n\nWhile pseudotime analysis is highly effective for modeling the differentiation of hematopoietic stem cells into various mature blood cell types, it is known to be fundamentally challenging to apply to cells progressing through the cell cycle (G1, S, G2, M phases).\n\nWhich of the following statements provides the most accurate and fundamental reason for this discrepancy?\n\nA. The number of genes that are differentially expressed during the cell cycle is too small to provide the resolution needed to accurately construct a continuous trajectory.\n\nB. The cell cycle is an inherently cyclical process, which violates the core assumption of a directed, acyclic progression that underlies most standard pseudotime inference algorithms.\n\nC. Cellular differentiation processes are typically much slower than the cell cycle, allowing for a more stable capture of intermediate cell states in a scRNA-seq experiment.\n\nD. Gene expression during the cell cycle is primarily random and stochastic, whereas gene expression during differentiation follows a highly deterministic and predictable program.", "solution": "Pseudotime analysis aims to impose an ordering of cells along a one-dimensional trajectory that represents progression through a biological process. Most standard pseudotime inference algorithms (e.g., those based on minimum spanning trees, trees in low-dimensional embeddings, or directed acyclic graph abstractions) assume a directed, acyclic structure: a path or a branching tree where there is a well-defined start and no topological cycles. This assumption is well matched to cellular differentiation, which is typically modeled as a branching process with a direction from progenitor to mature fates and no return to the progenitor state.\n\nBy contrast, the cell cycle is a periodic process with circular topology: cells progress through G1, S, G2, and M phases and return to G1. Topologically, this corresponds to a loop (homeomorphic to a circle), which cannot be embedded as a single directed acyclic trajectory without introducing an arbitrary “cut” that breaks the cycle. This violates the core assumption of most standard pseudotime algorithms and leads to ambiguity in defining a unique start and end, seam artifacts, and misordering near the cut.\n\nEvaluating the options:\n- Option A is not fundamental; numerous genes exhibit robust, phase-specific periodic expression sufficient to recover structure, so the difficulty is not due to too few differentially expressed genes.\n- Option B correctly identifies the core topological mismatch: the cyclic nature of the cell cycle conflicts with the directed, acyclic assumption of standard pseudotime models.\n- Option C concerns timescale and measurement stability, which may affect practical resolution but is not the fundamental reason for the discrepancy.\n- Option D is incorrect; the cell cycle is governed by a well-regulated periodic program rather than being primarily random, and differentiation also involves stochastic elements.\n\nTherefore, the most accurate and fundamental reason is the cyclic topology of the cell cycle violating the directed, acyclic assumption.", "answer": "$$\\boxed{B}$$", "id": "1465922"}, {"introduction": "Once a trajectory is established, we can extract more than just the sequential ordering of cells. The distribution of cells along the pseudotime axis reveals the dynamics of the underlying process, where regions of high cell density often correspond to slower, more stable transitional states. This exercise introduces the concept of \"differentiation speed\" by relating it to cell density, providing a quantitative framework to calculate this property from a given pseudotime distribution [@problem_id:2437529].", "problem": "A single-cell RNA sequencing (scRNA-seq) study uses trajectory inference to assign a pseudotime $\\tau \\in [0,1]$ to each of $N$ cells. In a particular lineage, the distribution of pseudotime assignments is well-approximated by a Beta distribution with shape parameters $\\alpha = 2$ and $\\beta = 3$, with probability density function $f(\\tau) = 12\\,\\tau\\,(1-\\tau)^{2}$ on $[0,1]$. There are $N=800$ cells in total. Define the \"speed of differentiation\" at pseudotime $\\tau$ as the rate of change of the expected cumulative cell count with respect to pseudotime, $\\frac{d}{d\\tau}\\big(\\text{expected number of cells with pseudotime} \\le \\tau\\big)$. Compute this speed at $\\tau = 0.25$. Express your answer as an exact number of cells per unit pseudotime, with no rounding.", "solution": "The problem statement is subjected to validation before proceeding.\n\nStep 1: Extract Givens.\n- Total number of cells: $N = 800$.\n- Pseudotime variable: $\\tau \\in [0, 1]$.\n- The probability density function (PDF) for the distribution of pseudotime assignments follows a Beta distribution with shape parameters $\\alpha = 2$ and $\\beta = 3$.\n- The specific form of the PDF is given as $f(\\tau) = 12\\tau(1-\\tau)^{2}$ for $\\tau \\in [0, 1]$.\n- The \"speed of differentiation\" is defined as the rate of change of the expected cumulative cell count with respect to pseudotime: $\\frac{d}{d\\tau}\\big(\\text{expected number of cells with pseudotime} \\le \\tau\\big)$.\n- The task is to compute this speed at the specific pseudotime $\\tau = 0.25$.\n\nStep 2: Validate Using Extracted Givens.\nThe problem is scientifically grounded, well-posed, and objective. It concerns trajectory inference, a standard topic in computational biology. The use of a Beta distribution to model a variable on the interval $[0, 1]$ is appropriate. The PDF provided, $f(\\tau) = 12\\tau(1-\\tau)^{2}$, is correctly normalized for a Beta distribution with parameters $\\alpha=2$ and $\\beta=3$, since the Beta function $B(\\alpha, \\beta)$ is $B(2, 3) = \\frac{\\Gamma(2)\\Gamma(3)}{\\Gamma(2+3)} = \\frac{1!2!}{4!} = \\frac{2}{24} = \\frac{1}{12}$, and the general form of the Beta PDF is $\\frac{\\tau^{\\alpha-1}(1-\\tau)^{\\beta-1}}{B(\\alpha, \\beta)}$. All definitions are clear and mathematically formalizable. No contradictions or missing information are present.\n\nStep 3: Verdict and Action.\nThe problem is valid. A solution will be constructed.\n\nThe solution proceeds as follows. Let $T$ be the random variable representing the pseudotime of a randomly selected cell. The probability density function of $T$ is given as $f(\\tau) = 12\\tau(1-\\tau)^{2}$ for $\\tau \\in [0, 1]$.\n\nThe cumulative distribution function (CDF), denoted $F(\\tau)$, gives the probability that a cell has a pseudotime less than or equal to $\\tau$. It is defined by the integral of the PDF:\n$$F(\\tau) = P(T \\le \\tau) = \\int_{0}^{\\tau} f(t) \\, dt$$\nFor a total of $N$ cells, the expected number of cells with a pseudotime less than or equal to $\\tau$, which we denote as $E(\\tau)$, is the total number of cells multiplied by this probability:\n$$E(\\tau) = N \\cdot F(\\tau) = N \\int_{0}^{\\tau} f(t) \\, dt$$\nThe problem defines the \"speed of differentiation,\" let us call it $S(\\tau)$, as the rate of change of this expected cumulative cell count with respect to pseudotime. This is the derivative of $E(\\tau)$ with respect to $\\tau$:\n$$S(\\tau) = \\frac{d}{d\\tau} E(\\tau) = \\frac{d}{d\\tau} \\left( N \\int_{0}^{\\tau} f(t) \\, dt \\right)$$\nSince $N$ is a constant, it can be moved outside the derivative:\n$$S(\\tau) = N \\frac{d}{d\\tau} \\left( \\int_{0}^{\\tau} f(t) \\, dt \\right)$$\nBy the Fundamental Theorem of Calculus, the derivative of an integral with respect to its upper limit is the integrand evaluated at that limit. Therefore:\n$$\\frac{d}{d\\tau} \\left( \\int_{0}^{\\tau} f(t) \\, dt \\right) = f(\\tau)$$\nSubstituting this back into the expression for $S(\\tau)$, we obtain a simple relationship:\n$$S(\\tau) = N f(\\tau)$$\nThis result is logical: the rate at which cells accumulate at a certain pseudotime point is directly proportional to the density of cells at that point.\n\nWe are required to compute this speed at $\\tau = 0.25$. We have $N = 800$ and $f(\\tau) = 12\\tau(1-\\tau)^{2}$. We substitute $\\tau = 0.25$, which is equivalent to $\\frac{1}{4}$.\n\nFirst, evaluate the PDF $f(\\tau)$ at $\\tau = \\frac{1}{4}$:\n$$f\\left(\\frac{1}{4}\\right) = 12 \\left(\\frac{1}{4}\\right) \\left(1 - \\frac{1}{4}\\right)^{2}$$\n$$f\\left(\\frac{1}{4}\\right) = 12 \\left(\\frac{1}{4}\\right) \\left(\\frac{3}{4}\\right)^{2}$$\n$$f\\left(\\frac{1}{4}\\right) = 3 \\left(\\frac{9}{16}\\right)$$\n$$f\\left(\\frac{1}{4}\\right) = \\frac{27}{16}$$\nNow, we compute the speed $S(\\tau)$ at this point using $S(\\frac{1}{4}) = N f(\\frac{1}{4})$:\n$$S\\left(\\frac{1}{4}\\right) = 800 \\times \\frac{27}{16}$$\nTo simplify the calculation, we divide $800$ by $16$:\n$$\\frac{800}{16} = \\frac{100 \\times 8}{16} = \\frac{100}{2} = 50$$\nFinally, we multiply this result by $27$:\n$$S\\left(\\frac{1}{4}\\right) = 50 \\times 27 = 1350$$\nThe speed of differentiation at $\\tau = 0.25$ is $1350$ cells per unit pseudotime.", "answer": "$$\\boxed{1350}$$", "id": "2437529"}, {"introduction": "A primary goal of trajectory inference is to uncover the genetic mechanisms that drive a biological process. When a trajectory reveals a bifurcation, representing a cell fate decision, a key question is which genes govern this choice. This exercise provides a formal, albeit simplified, model for how gene expression might diverge between two branches, allowing you to apply a precise mathematical criterion to identify these critical \"decision genes\" [@problem_id:2437555].", "problem": "You are given a formalization of branch-specific gene expression around a bifurcation in pseudotime. Consider a collection of cells, each characterized by a pseudotime value $t \\in [0,1]$ and a branch label $b \\in \\{0,1\\}$. For a fixed bifurcation time $t_0 \\in [0,1]$, define the branch-conditional expected expression of gene $i$ as a function of pseudotime by\n$$\n\\mu_{i,b}(t) = \\mathbb{E}[X_i \\mid t, b],\n$$\nwhere $X_i$ denotes the expression of gene $i$. A gene $i$ is called a decision gene at the bifurcation $t_0$ if the two branches have different right-sided derivatives of the conditional mean at $t_0$, with difference at least a prescribed threshold $\\delta > 0$:\n$$\nD_i \\equiv \\left| \\left.\\frac{\\partial}{\\partial t^+}\\mu_{i,1}(t)\\right|_{t=t_0} - \\left.\\frac{\\partial}{\\partial t^+}\\mu_{i,0}(t)\\right|_{t=t_0} \\right| \\ge \\delta.\n$$\nThroughout, assume that for each gene $i$, $\\mu_{i,b}(t)$ is piecewise differentiable in a neighborhood of $t_0$ and that the left-sided derivatives at $t_0$ are equal across branches.\n\nFor the test suite below, the data-generating mechanism for observed expression is given by the deterministic, piecewise-linear model\n$$\nX_{i}(t,b) = a_i + c_i\\, t + d_{i,b}\\, \\max\\{0,\\, t - t_0\\} + \\eta_{i}(t,b),\n$$\nwhere $a_i \\in \\mathbb{R}$, $c_i \\in \\mathbb{R}$ are gene-specific constants, $d_{i,b} \\in \\mathbb{R}$ are branch- and gene-specific divergence coefficients that act only after the bifurcation, and $\\eta_{i}(t,b)$ is additive noise with mean $0$ and standard deviation $\\sigma \\ge 0$. The right-sided derivative at $t_0$ is, by definition of the model,\n$$\n\\left.\\frac{\\partial}{\\partial t^+}\\mu_{i,b}(t)\\right|_{t=t_0} = c_i + d_{i,b}.\n$$\nThus, in this model,\n$$\nD_i = \\left| (c_i + d_{i,1}) - (c_i + d_{i,0}) \\right| = |d_{i,1} - d_{i,0}|.\n$$\n\nYour program must, for each test case, return the sorted list (in ascending order) of all gene indices $i$ that satisfy $D_i \\ge \\delta$. Use zero-based indexing for genes. The observed cells per branch are positioned at equally spaced pseudotimes $t \\in \\{0, \\frac{1}{N-1}, \\frac{2}{N-1}, \\dots, 1\\}$, but because $\\sigma = 0$ in all test cases, the classification is fully determined by the parameters and independent of the particular sampling of $t$.\n\nTest suite. For each case $k$, you are given the tuple of parameters $(G, t_0, \\delta, N, \\mathbf{a}, \\mathbf{c}, \\mathbf{d}^{(0)}, \\mathbf{d}^{(1)}, \\sigma)$, where $G$ is the number of genes, $N$ is the number of cells per branch, $\\mathbf{a} = (a_0,\\dots,a_{G-1})$, $\\mathbf{c} = (c_0,\\dots,c_{G-1})$, $\\mathbf{d}^{(0)} = (d_{0,0},\\dots,d_{G-1,0})$, $\\mathbf{d}^{(1)} = (d_{0,1},\\dots,d_{G-1,1})$, and $\\sigma$ is the noise standard deviation.\n\n- Case $1$:\n  - $G = 5$, $t_0 = 0.5$, $\\delta = 0.2$, $N = 20$, $\\sigma = 0$.\n  - $\\mathbf{a} = (0.0, 0.0, 0.0, 0.0, 0.0)$.\n  - $\\mathbf{c} = (0.0, 0.2, -0.1, 0.0, 0.3)$.\n  - $\\mathbf{d}^{(0)} = (-0.8, 0.0, 0.05, 0.19, 0.0)$.\n  - $\\mathbf{d}^{(1)} = (0.8, 0.0, 0.05, 0.0, 0.2)$.\n\n- Case $2$:\n  - $G = 4$, $t_0 = 0.5$, $\\delta = 0.5$, $N = 30$, $\\sigma = 0$.\n  - $\\mathbf{a} = (1.0, -2.0, 0.5, 0.0)$.\n  - $\\mathbf{c} = (0.5, 0.0, 0.1, -0.2)$.\n  - $\\mathbf{d}^{(0)} = (0.0, -0.3, 0.2, -0.25)$.\n  - $\\mathbf{d}^{(1)} = (0.0, 0.3, 0.4, -0.24)$.\n\n- Case $3$:\n  - $G = 3$, $t_0 = 0.8$, $\\delta = 1.0$, $N = 25$, $\\sigma = 0$.\n  - $\\mathbf{a} = (0.0, 0.0, 0.0)$.\n  - $\\mathbf{c} = (0.0, 0.0, 0.0)$.\n  - $\\mathbf{d}^{(0)} = (0.0, -1.0, 0.49)$.\n  - $\\mathbf{d}^{(1)} = (0.0, 1.0, -0.49)$.\n\n- Case $4$:\n  - $G = 4$, $t_0 = 0.0$, $\\delta = 0.6$, $N = 10$, $\\sigma = 0$.\n  - $\\mathbf{a} = (0.0, 0.0, 0.0, 0.0)$.\n  - $\\mathbf{c} = (0.0, 0.0, 0.0, 0.0)$.\n  - $\\mathbf{d}^{(0)} = (0.0, 0.3, 0.59, 0.6)$.\n  - $\\mathbf{d}^{(1)} = (0.0, -0.3, -0.59, 0.6)$.\n\nFinal output format. Your program should produce a single line of output containing the results as a comma-separated list of lists, each inner list being the sorted zero-based indices of decision genes for the corresponding test case. For example, a valid format is $[[i_{1,0},\\dots],[i_{2,0},\\dots],\\dots]$ with no spaces added by the program.", "solution": "The problem statement is subjected to validation.\n\n### Step 1: Extract Givens\n- **Domain**: A collection of cells, each with a pseudotime $t \\in [0,1]$ and a branch label $b \\in \\{0,1\\}$.\n- **Bifurcation Time**: A fixed time $t_0 \\in [0,1]$.\n- **Conditional Mean Expression**: $\\mu_{i,b}(t) = \\mathbb{E}[X_i \\mid t, b]$, where $X_i$ is the expression of gene $i$.\n- **Assumption on Derivatives**: For each gene $i$, $\\mu_{i,b}(t)$ is piecewise differentiable near $t_0$, and the left-sided derivatives at $t_0$ are equal across branches.\n- **Definition of Decision Gene**: A gene $i$ is a decision gene if the difference in right-sided derivatives at $t_0$ meets a threshold $\\delta > 0$. The difference is defined as $D_i \\equiv \\left| \\left.\\frac{\\partial}{\\partial t^+}\\mu_{i,1}(t)\\right|_{t=t_0} - \\left.\\frac{\\partial}{\\partial t^+}\\mu_{i,0}(t)\\right|_{t=t_0} \\right|$, and the condition is $D_i \\ge \\delta$.\n- **Data-Generating Model**:\n  - The observed expression is $X_{i}(t,b) = a_i + c_i\\, t + d_{i,b}\\, \\max\\{0,\\, t - t_0\\} + \\eta_{i}(t,b)$.\n  - Parameters: $a_i \\in \\mathbb{R}$ (gene-specific constant), $c_i \\in \\mathbb{R}$ (gene-specific constant), $d_{i,b} \\in \\mathbb{R}$ (branch- and gene-specific divergence coefficient).\n  - Noise: $\\eta_{i}(t,b)$ with mean $0$ and standard deviation $\\sigma \\ge 0$.\n- **Derived Formulas for the Model**:\n  - Right-sided derivative: $\\left.\\frac{\\partial}{\\partial t^+}\\mu_{i,b}(t)\\right|_{t=t_0} = c_i + d_{i,b}$.\n  - Derivative difference: $D_i = |(c_i + d_{i,1}) - (c_i + d_{i,0})| = |d_{i,1} - d_{i,0}|$.\n- **Task**: For each test case, return the sorted list (ascending order) of zero-based gene indices $i$ that satisfy $D_i \\ge \\delta$.\n- **Cell Sampling**: Observed cells are at pseudotimes $t \\in \\{0, \\frac{1}{N-1}, \\ldots, 1\\}$.\n- **Test Case Parameters**: Each case provides $(G, t_0, \\delta, N, \\mathbf{a}, \\mathbf{c}, \\mathbf{d}^{(0)}, \\mathbf{d}^{(1)}, \\sigma)$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is assessed against the validation criteria.\n- **Scientifically Grounded**: The problem is a formalization of a concept in computational biology, specifically trajectory inference. The piecewise-linear model is a standard simplified model used in this field. It does not violate any scientific principles.\n- **Well-Posed**: The problem is well-posed. A clear mathematical definition of a \"decision gene\" is provided, along with a specific model for which this definition is to be evaluated. All necessary parameters for the model are given in the test suite. The task is unambiguous: identify gene indices satisfying a given inequality.\n- **Objective**: The language is precise, mathematical, and free of subjective claims.\n- **Completeness**: The problem is self-contained. All necessary equations, definitions, and data are provided.\n- **Consistency**: The givens are internally consistent. The derivation of $D_i = |d_{i,1} - d_{i,0}|$ from the model is correct and simplifies the problem significantly.\n- **Realism**: The model is an idealization ($\\sigma=0$), but this is a common practice in problem statements designed to test understanding of a core concept without the complication of statistical estimation.\n\n### Step 3: Verdict and Action\nThe problem is deemed **valid**. It is a well-defined mathematical exercise set in a computational biology context. The solution process may proceed.\n\n### Solution\nThe objective is to identify \"decision genes\" for several test cases. A gene $i$ is classified as a decision gene if the absolute difference between its expression-rate changes in the two branches at the bifurcation point $t_0$ is at least a threshold $\\delta$.\n\nThe problem states that this condition is formally written as:\n$$\nD_i \\equiv \\left| \\left.\\frac{\\partial}{\\partial t^+}\\mu_{i,1}(t)\\right|_{t=t_0} - \\left.\\frac{\\partial}{\\partial t^+}\\mu_{i,0}(t)\\right|_{t=t_0} \\right| \\ge \\delta\n$$\nThe problem provides a specific deterministic, piecewise-linear model for the expected gene expression, for which the noise term has mean zero ($\\mathbb{E}[\\eta_i(t,b)] = 0$). Thus, $\\mu_{i,b}(t) = a_i + c_i\\, t + d_{i,b}\\, \\max\\{0,\\, t - t_0\\}$.\nFor $t > t_0$, $\\max\\{0,\\, t - t_0\\} = t - t_0$, so $\\mu_{i,b}(t) = a_i + c_i\\, t + d_{i,b}(t - t_0) = (a_i - d_{i,b}t_0) + (c_i + d_{i,b})t$. The slope for $t > t_0$ is $c_i + d_{i,b}$. This corresponds to the right-sided derivative at $t_0$:\n$$\n\\left.\\frac{\\partial}{\\partial t^+}\\mu_{i,b}(t)\\right|_{t=t_0} = c_i + d_{i,b}\n$$\nSubstituting this into the definition of $D_i$ gives a remarkably simple expression:\n$$\nD_i = |(c_i + d_{i,1}) - (c_i + d_{i,0})| = |d_{i,1} - d_{i,0}|\n$$\nThis simplification is critical. The task reduces to checking the condition $|d_{i,1} - d_{i,0}| \\ge \\delta$ for each gene $i$. The parameters $G$, $\\delta$, $\\mathbf{d}^{(0)}$, and $\\mathbf{d}^{(1)}$ are sufficient. The other parameters, namely $t_0$, $N$, $\\mathbf{a}$, $\\mathbf{c}$, and $\\sigma$ (which is $0$), are extraneous to this calculation.\n\nThe algorithm is as follows:\n$1$. For each test case, extract the vectors of divergence coefficients, $\\mathbf{d}^{(0)}$ and $\\mathbf{d}^{(1)}$, and the decision threshold $\\delta$.\n$2$. For each gene index $i$ from $0$ to $G-1$:\n    a. Retrieve the coefficients $d_{i,0}$ from $\\mathbf{d}^{(0)}$ and $d_{i,1}$ from $\\mathbf{d}^{(1)}$.\n    b. Calculate the decision metric $D_i = |d_{i,1} - d_{i,0}|$.\n    c. If $D_i \\ge \\delta$, add the index $i$ to a list of decision genes.\n$3$. Sort the resulting list of indices in ascending order.\n\nThis procedure is now applied to each test case.\n\n**Case 1:**\n- Parameters: $G=5$, $\\delta = 0.2$, $\\mathbf{d}^{(0)} = (-0.8, 0.0, 0.05, 0.19, 0.0)$, $\\mathbf{d}^{(1)} = (0.8, 0.0, 0.05, 0.0, 0.2)$.\n- Gene $i=0$: $D_0 = |0.8 - (-0.8)| = 1.6$. Since $1.6 \\ge 0.2$, gene $0$ is a decision gene.\n- Gene $i=1$: $D_1 = |0.0 - 0.0| = 0.0$. Since $0.0 < 0.2$, gene $1$ is not a decision gene.\n- Gene $i=2$: $D_2 = |0.05 - 0.05| = 0.0$. Since $0.0 < 0.2$, gene $2$ is not a decision gene.\n- Gene $i=3$: $D_3 = |0.0 - 0.19| = 0.19$. Since $0.19 < 0.2$, gene $3$ is not a decision gene.\n- Gene $i=4$: $D_4 = |0.2 - 0.0| = 0.2$. Since $0.2 \\ge 0.2$, gene $4$ is a decision gene.\nThe sorted list of decision gene indices is $[0, 4]$.\n\n**Case 2:**\n- Parameters: $G=4$, $\\delta = 0.5$, $\\mathbf{d}^{(0)} = (0.0, -0.3, 0.2, -0.25)$, $\\mathbf{d}^{(1)} = (0.0, 0.3, 0.4, -0.24)$.\n- Gene $i=0$: $D_0 = |0.0 - 0.0| = 0.0$. Since $0.0 < 0.5$, gene $0$ is not a decision gene.\n- Gene $i=1$: $D_1 = |0.3 - (-0.3)| = 0.6$. Since $0.6 \\ge 0.5$, gene $1$ is a decision gene.\n- Gene $i=2$: $D_2 = |0.4 - 0.2| = 0.2$. Since $0.2 < 0.5$, gene $2$ is not a decision gene.\n- Gene $i=3$: $D_3 = |-0.24 - (-0.25)| = 0.01$. Since $0.01 < 0.5$, gene $3$ is not a decision gene.\nThe sorted list of decision gene indices is $[1]$.\n\n**Case 3:**\n- Parameters: $G=3$, $\\delta = 1.0$, $\\mathbf{d}^{(0)} = (0.0, -1.0, 0.49)$, $\\mathbf{d}^{(1)} = (0.0, 1.0, -0.49)$.\n- Gene $i=0$: $D_0 = |0.0 - 0.0| = 0.0$. Since $0.0 < 1.0$, gene $0$ is not a decision gene.\n- Gene $i=1$: $D_1 = |1.0 - (-1.0)| = 2.0$. Since $2.0 \\ge 1.0$, gene $1$ is a decision gene.\n- Gene $i=2$: $D_2 = |-0.49 - 0.49| = 0.98$. Since $0.98 < 1.0$, gene $2$ is not a decision gene.\nThe sorted list of decision gene indices is $[1]$.\n\n**Case 4:**\n- Parameters: $G=4$, $\\delta = 0.6$, $\\mathbf{d}^{(0)} = (0.0, 0.3, 0.59, 0.6)$, $\\mathbf{d}^{(1)} = (0.0, -0.3, -0.59, 0.6)$.\n- Gene $i=0$: $D_0 = |0.0 - 0.0| = 0.0$. Since $0.0 < 0.6$, gene $0$ is not a decision gene.\n- Gene $i=1$: $D_1 = |-0.3 - 0.3| = 0.6$. Since $0.6 \\ge 0.6$, gene $1$ is a decision gene.\n- Gene $i=2$: $D_2 = |-0.59 - 0.59| = 1.18$. Since $1.18 \\ge 0.6$, gene $2$ is a decision gene.\n- Gene $i=3$: $D_3 = |0.6 - 0.6| = 0.0$. Since $0.0 < 0.6$, gene $3$ is not a decision gene.\nThe sorted list of decision gene indices is $[1, 2]$.\n\nThe final results are compiled from these individual analyses.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for decision genes based on a piecewise-linear model of expression.\n    \"\"\"\n    # Test suite containing tuples of parameters:\n    # (G, t0, delta, N, a, c, d^(0), d^(1), sigma)\n    test_cases = [\n        (\n            5, 0.5, 0.2, 20,\n            np.array([0.0, 0.0, 0.0, 0.0, 0.0]),\n            np.array([0.0, 0.2, -0.1, 0.0, 0.3]),\n            np.array([-0.8, 0.0, 0.05, 0.19, 0.0]),\n            np.array([0.8, 0.0, 0.05, 0.0, 0.2]),\n            0.0\n        ),\n        (\n            4, 0.5, 0.5, 30,\n            np.array([1.0, -2.0, 0.5, 0.0]),\n            np.array([0.5, 0.0, 0.1, -0.2]),\n            np.array([0.0, -0.3, 0.2, -0.25]),\n            np.array([0.0, 0.3, 0.4, -0.24]),\n            0.0\n        ),\n        (\n            3, 0.8, 1.0, 25,\n            np.array([0.0, 0.0, 0.0]),\n            np.array([0.0, 0.0, 0.0]),\n            np.array([0.0, -1.0, 0.49]),\n            np.array([0.0, 1.0, -0.49]),\n            0.0\n        ),\n        (\n            4, 0.0, 0.6, 10,\n            np.array([0.0, 0.0, 0.0, 0.0]),\n            np.array([0.0, 0.0, 0.0, 0.0]),\n            np.array([0.0, 0.3, 0.59, 0.6]),\n            np.array([0.0, -0.3, -0.59, 0.6]),\n            0.0\n        )\n    ]\n\n    all_results = []\n    for case in test_cases:\n        G, t0, delta, N, a, c, d0, d1, sigma = case\n\n        decision_genes = []\n        for i in range(G):\n            # The decision metric D_i is |d_{i,1} - d_{i,0}|\n            D_i = np.abs(d1[i] - d0[i])\n            if D_i >= delta:\n                decision_genes.append(i)\n        \n        # The problem requires the list of indices to be sorted.\n        # They are already generated in ascending order, so sort() is not strictly needed\n        # but is included for correctness.\n        decision_genes.sort()\n        all_results.append(decision_genes)\n\n    # Format the output as a string representation of a list of lists with no spaces,\n    # e.g., [[0,4],[1],[1],[1,2]]\n    output_string = str(all_results).replace(\" \", \"\")\n    \n    print(output_string)\n\nsolve()\n```", "id": "2437555"}]}