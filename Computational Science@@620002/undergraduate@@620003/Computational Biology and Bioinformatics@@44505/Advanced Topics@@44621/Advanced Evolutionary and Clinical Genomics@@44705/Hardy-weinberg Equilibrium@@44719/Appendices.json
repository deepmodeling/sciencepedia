{"hands_on_practices": [{"introduction": "The Hardy-Weinberg principle provides a powerful baseline for understanding population genetics. This first exercise grounds your understanding by tackling a classic scenario: estimating the frequency of heterozygous carriers from observable trait data. By working backward from the prevalence of a recessive phenotype, you will practice the fundamental calculations that link allele frequencies ($p$ and $q$) to genotype frequencies ($p^2$, $2pq$, and $q^2$). This skill is foundational, enabling geneticists to estimate the hidden genetic load of deleterious alleles within a population.", "problem": "A team of wildlife biologists is studying an isolated population of the Eastern Timber Wolf (*Canis lupus lycaon*). They are monitoring a benign genetic trait known as \"Sable Coat,\" a distinct dark-tipped fur pattern. This trait is controlled by a single gene with two alleles. The allele for the standard grey coat is dominant ($G$), while the allele for the Sable Coat is recessive ($g$). Individuals with the genotype $gg$ exhibit the Sable Coat phenotype. The population is large, mates randomly, and is believed to be in Hardy-Weinberg equilibrium with respect to this gene. After an extensive survey, the biologists determine that the prevalence of the Sable Coat phenotype in the population is 1 out of every 175 wolves. Based on this observation, calculate the expected frequency of heterozygous wolves (carriers of the recessive allele) in this population. Express your answer as a decimal rounded to three significant figures.", "solution": "Let $p$ denote the frequency of the dominant allele $G$ and $q$ the frequency of the recessive allele $g$. Under Hardy-Weinberg equilibrium, genotype frequencies are $p^{2}$ (GG), $2pq$ (Gg), and $q^{2}$ (gg). The recessive phenotype (Sable Coat) occurs with frequency $q^{2}$, and the survey gives $q^{2} = \\frac{1}{175}$.\n\nFirst, solve for $q$, the frequency of the recessive allele:\n$$ q = \\sqrt{\\frac{1}{175}} \\approx 0.07559 $$\n\nNext, calculate $p$, the frequency of the dominant allele:\n$$ p = 1 - q = 1 - 0.07559 \\approx 0.92441 $$\n\nFinally, calculate the frequency of heterozygous individuals ($2pq$):\n$$ 2pq = 2 \\times 0.92441 \\times 0.07559 \\approx 0.139757 $$\n\nRounding to three significant figures, the expected frequency of heterozygous wolves is 0.140.", "answer": "$$\\boxed{0.140}$$", "id": "1852869"}, {"introduction": "While the Hardy-Weinberg principle describes an ideal state of equilibrium, real populations are dynamic. This practice moves you from assuming equilibrium to statistically testing for it using the Pearson's chi-squared ($\\chi^2$) test. You will not only calculate the overall test statistic but also dissect it to identify which specific genotypes (e.g., an excess of heterozygotes) contribute most to the deviation from equilibrium. This analytical skill is crucial in modern genomics for data quality control and for flagging loci that may be under the influence of evolutionary forces like selection or inbreeding.", "problem": "A biallelic autosomal locus is genotyped in a cohort of $n$ diploid individuals. The observed genotype counts are $O_{AA}=150$, $O_{Aa}=300$, and $O_{aa}=50$, so that $n=500$. Under the null hypothesis of Hardy-Weinberg equilibrium (HWE), use the sample to estimate the allele frequency of allele $A$, then obtain the corresponding expected genotype counts. Using the chi-squared ($\\chi^{2}$) goodness-of-fit framework for HWE based on these expected counts, compute the per-genotype contributions $\\left(O_{g}-E_{g}\\right)^{2}/E_{g}$ for $g\\in\\{AA,Aa,aa\\}$ and determine the largest single contribution. Report only the numerical value of this largest per-genotype contribution. Round your answer to three significant figures.", "solution": "The first step is to estimate the allele frequencies from the observed sample data. Let $\\hat{p}$ be the estimated frequency of allele $A$ and $\\hat{q}$ be the estimated frequency of allele $a$. The total number of alleles in the sample of $n=500$ diploid individuals is $2n = 1000$. The frequency of allele $A$ is calculated by counting all $A$ alleles and dividing by the total number of alleles.\n\nThe number of $A$ alleles is given by $2 \\times O_{AA} + O_{Aa}$.\n$$ \\text{Count}(A) = 2 \\times 150 + 300 = 300 + 300 = 600 $$\nThe estimated frequency of allele $A$ is therefore:\n$$ \\hat{p} = \\frac{600}{1000} = 0.6 $$\n\nThe estimated frequency of allele $a$ is $\\hat{q} = 1 - \\hat{p} = 0.4$.\n\nNext, under the null hypothesis of Hardy-Weinberg equilibrium, we calculate the expected genotype counts ($E_{g}$) using these estimated allele frequencies. The expected counts are the genotype frequencies multiplied by the total sample size $n$.\n\nThe expected count for genotype $AA$ is:\n$$ E_{AA} = n \\times \\hat{p}^2 = 500 \\times (0.6)^2 = 500 \\times 0.36 = 180 $$\n\nThe expected count for genotype $Aa$ is:\n$$ E_{Aa} = n \\times 2\\hat{p}\\hat{q} = 500 \\times 2 \\times 0.6 \\times 0.4 = 500 \\times 0.48 = 240 $$\n\nThe expected count for genotype $aa$ is:\n$$ E_{aa} = n \\times \\hat{q}^2 = 500 \\times (0.4)^2 = 500 \\times 0.16 = 80 $$\n\nFinally, we compute the per-genotype contribution to the chi-squared statistic using the formula $\\frac{(O_{g}-E_{g})^{2}}{E_{g}}$.\n\nFor genotype $AA$:\n$$ \\chi_{AA}^2 = \\frac{(O_{AA} - E_{AA})^2}{E_{AA}} = \\frac{(150 - 180)^2}{180} = \\frac{(-30)^2}{180} = \\frac{900}{180} = 5 $$\n\nFor genotype $Aa$:\n$$ \\chi_{Aa}^2 = \\frac{(O_{Aa} - E_{Aa})^2}{E_{Aa}} = \\frac{(300 - 240)^2}{240} = \\frac{(60)^2}{240} = \\frac{3600}{240} = 15 $$\n\nFor genotype $aa$:\n$$ \\chi_{aa}^2 = \\frac{(O_{aa} - E_{aa})^2}{E_{aa}} = \\frac{(50 - 80)^2}{80} = \\frac{(-30)^2}{80} = \\frac{900}{80} = 11.25 $$\n\nThe per-genotype contributions are $5$, $15$, and $11.25$. The largest single contribution is from the heterozygote genotype, which has a value of 15. Rounding to three significant figures, the answer is 15.0.", "answer": "$$\\boxed{15.0}$$", "id": "2396513"}, {"introduction": "Statistical tests come with assumptions, and understanding their limits is as important as knowing how to apply them. This computational exercise challenges you to build a simulation to explore the reliability of the chi-squared test for Hardy-Weinberg equilibrium. By generating data where equilibrium is known to be true, you will investigate how factors like small sample size can lead to misleading, statistically significant deviations by chance alone. This hands-on simulation develops a critical intuition for the behavior of statistical methods and reinforces the importance of interpreting results in the context of data quality and study design.", "problem": "You are asked to implement a complete, runnable program that simulates genotype data under Hardyâ€“Weinberg equilibrium (HWE) and quantifies how small sample sizes, combined with the large-sample chi-square approximation, can produce statistically significant but false deviations purely by chance. The core of the simulation must adhere to first principles: ideal random mating with no selection, mutation, migration, or inbreeding, and accurate accounting of allele frequencies and genotype counts. The goal is to compute the empirical false positive rate under the null hypothesis that HWE holds exactly.\n\nFoundational base:\n- Under random mating in a diploid organism with a bi-allelic locus and true allele-$A$ frequency $p$, with $q = 1 - p$, the genotype probabilities are given by the binomial expansion of $(p + q)^2$, yielding $p^2$ for $AA$, $2pq$ for $Aa$, and $q^2$ for $aa$.\n- A goodness-of-fit chi-square test compares observed counts to expected counts. When the allele frequency is estimated from the data, the appropriate degrees of freedom is $1$.\n\nYour program must:\n- Simulate $R$ replicate samples of $n$ diploid individuals under exact HWE at a specified true allele-$A$ frequency $p$.\n- In each replicate, compute the sample allele-$A$ frequency $\\hat{p}$ from observed genotype counts, compute the expected genotype counts under HWE at $\\hat{p}$, compute the Pearson chi-square statistic with $1$ degree of freedom, and the associated $p$-value using the chi-square survival function.\n- Record whether the replicate is a false positive, defined as the event that the $p$-value is strictly less than the nominal significance level $\\alpha$, even though the data were generated under true HWE.\n- Return the fraction of false positives (a decimal in $[0,1]$) across the $R$ replicates for each test case.\n\nMathematical specification:\n- For a given replicate with observed genotype counts $(O_{AA}, O_{Aa}, O_{aa})$ summing to $n$, compute the sample allele-$A$ frequency $\\hat{p} = \\dfrac{2 O_{AA} + O_{Aa}}{2n}$ and $\\hat{q} = 1 - \\hat{p}$.\n- Compute the expected counts under HWE at $\\hat{p}$: $E_{AA} = n \\hat{p}^2$, $E_{Aa} = n \\cdot 2 \\hat{p} \\hat{q}$, $E_{aa} = n \\hat{q}^2$.\n- Compute the Pearson chi-square statistic\n\n$$\nX^2 \\;=\\; \\sum_{g \\in \\{AA, Aa, aa\\}} \\frac{(O_g - E_g)^2}{E_g}.\n$$\n\n- Compute the $p$-value as $P(\\chi^2_{1} \\ge X^2)$, where $\\chi^2_{1}$ denotes a chi-square random variable with $1$ degree of freedom.\n\nImplementation requirements:\n- All random number generation must be reproducible by using the provided integer seeds.\n- Genotype sampling under HWE must be performed directly from a multinomial distribution with category probabilities $p^2$, $2p(1-p)$, and $(1-p)^2$ for $(AA, Aa, aa)$, respectively.\n- The final answers for each test case must be expressed as decimals in $[0,1]$ rounded to exactly four digits after the decimal point. Do not use the percentage sign.\n\nTest suite:\nImplement the simulation for the following parameter sets. Each test case is a tuple $(n, p, \\alpha, R, \\text{seed})$.\n- Case A: $(n = 20, p = 0.5, \\alpha = 0.05, R = 50000, \\text{seed} = 314159)$.\n- Case B: $(n = 50, p = 0.05, \\alpha = 0.05, R = 100000, \\text{seed} = 271828)$.\n- Case C: $(n = 200, p = 0.5, \\alpha = 0.05, R = 50000, \\text{seed} = 161803)$.\n- Case D: $(n = 1000, p = 0.5, \\alpha = 0.05, R = 50000, \\text{seed} = 141421)$.\n\nOutput specification:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the test cases above. Each entry must be a float rounded to exactly four digits after the decimal point. For example, an output with four results must look like $[0.0612,0.0840,0.0504,0.0489]$.\n\nNotes on coverage and edge cases:\n- Case A probes small-sample behavior around the common recommendation that expected counts be at least $5$.\n- Case B probes a rare-allele regime where small expected counts can inflate the false positive rate under the chi-square approximation.\n- Cases C and D probe larger $n$, illustrating that with increasing $n$, the false positive rate should approach the nominal $\\alpha$ under the ideal null.\n- There are no physical units involved. All numerical answers must be decimals as specified.", "solution": "The task is to perform a Monte Carlo simulation to estimate the true Type I error rate (the false positive rate) of the Pearson's chi-square test for Hardy-Weinberg equilibrium. The null hypothesis, $H_0$, is that the population is in HWE. The simulation generates data for which $H_0$ is true by design. Any rejection of $H_0$ is therefore a Type I error. The fraction of such rejections across many replicates provides an empirical estimate of this error rate. The expectation is that this rate will approximate the nominal significance level $\\alpha$ only when the assumptions of the chi-square test are met, namely, sufficiently large expected counts for each genotype.\n\nThe algorithmic procedure for each test case is as follows:\n\n1.  **Initialization**: The random number generator is initialized with the specified `seed` to ensure reproducibility.\n\n2.  **Data Generation**: For each of the $R$ replicates, a random sample of $n$ individuals' genotypes is generated. The counts of genotypes $(O_{AA}, O_{Aa}, O_{aa})$ follow a multinomial distribution with probabilities $\\{p^2, 2p(1-p), (1-p)^2\\}$.\n\n3.  **Parameter Estimation**: For each replicate, the allele-$A$ frequency is estimated from the sampled data. The maximum likelihood estimate, $\\hat{p}$, is calculated from the observed genotype counts:\n    $$\n    \\hat{p} = \\frac{2 \\cdot O_{AA} + 1 \\cdot O_{Aa}}{2n}\n    $$\n\n4.  **Calculation of Expected Counts**: Based on the estimated allele frequency $\\hat{p}$, the expected genotype counts under HWE are calculated for each replicate:\n    $$\n    E_{AA} = n \\hat{p}^2, \\quad E_{Aa} = n \\cdot 2\\hat{p}(1-\\hat{p}), \\quad E_{aa} = n (1-\\hat{p})^2\n    $$\n\n5.  **Chi-Square Statistic Calculation**: Pearson's chi-square statistic, $X^2$, is computed for each replicate:\n    $$\n    X^2 = \\sum_{g \\in \\{AA, Aa, aa\\}} \\frac{(O_g - E_g)^2}{E_g}\n    $$\n    Care is taken to handle cases where an expected count $E_g$ is zero; the corresponding term in the sum is defined as 0.\n\n6.  **P-Value Determination**: The $X^2$ statistic asymptotically follows a chi-square distribution with 1 degree of freedom. The $p$-value for each replicate is calculated using the survival function of the $\\chi^2_1$ distribution: $p\\text{-value} = P(\\chi^2_{df=1} \\ge X^2)$.\n\n7.  **False Positive Rate**: A replicate results in a false positive if its $p$-value is less than the significance level $\\alpha$. The empirical false positive rate is the total number of false positives divided by the total number of replicates, $R$. This value is then rounded to four decimal places.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import chi2\n\ndef solve():\n    \"\"\"\n    Simulates genotype data under Hardy-Weinberg equilibrium (HWE) to\n    calculate the empirical false positive rate of the chi-square test.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (n, p, alpha, R, seed)\n        (20, 0.5, 0.05, 50000, 314159),   # Case A\n        (50, 0.05, 0.05, 100000, 271828), # Case B\n        (200, 0.5, 0.05, 50000, 161803),  # Case C\n        (1000, 0.5, 0.05, 50000, 141421), # Case D\n    ]\n\n    results = []\n    \n    for n, p, alpha, R, seed in test_cases:\n        # 1. Initialization\n        # Set the seed for reproducible random number generation.\n        rng = np.random.default_rng(seed)\n        \n        # 2. Data Generation\n        # Define HWE genotype probabilities: p^2 for AA, 2pq for Aa, q^2 for aa.\n        q = 1.0 - p\n        hwe_probs = np.array([p**2, 2*p*q, q**2])\n        \n        # Generate R replicate samples of size n from the multinomial distribution.\n        # observed_counts will be an (R, 3) NumPy array.\n        observed_counts = rng.multinomial(n, hwe_probs, size=R)\n        \n        # 3. Parameter Estimation\n        # Calculate the sample allele-A frequency (p_hat) for each replicate.\n        # O_AA is in column 0, O_Aa is in column 1.\n        p_hat = (2 * observed_counts[:, 0] + observed_counts[:, 1]) / (2 * n)\n        q_hat = 1.0 - p_hat\n        \n        # 4. Calculation of Expected Counts\n        # Calculate expected counts under HWE using the estimated p_hat.\n        E_AA = n * p_hat**2\n        E_Aa = n * 2 * p_hat * q_hat\n        E_aa = n * q_hat**2\n        \n        expected_counts = np.stack([E_AA, E_Aa, E_aa], axis=1)\n        \n        # 5. Chi-Square Statistic Calculation\n        # Compute the chi-square statistic for each replicate.\n        # Handle the case where expected_counts can be zero to avoid division by zero.\n        # If E_g is 0, then O_g must also be 0, and the term (O_g-E_g)^2/E_g is 0.\n        diff_sq = (observed_counts - expected_counts)**2\n        \n        # Initialize terms to zero.\n        terms = np.zeros_like(diff_sq)\n        \n        # Create a mask to avoid division by zero.\n        # This is the correct way to handle the sum: only divide where expected > 0.\n        mask = expected_counts > 0\n        terms[mask] = diff_sq[mask] / expected_counts[mask]\n        \n        # Sum the terms over the three genotypes for each replicate.\n        chi2_stat = np.sum(terms, axis=1)\n        \n        # 6. P-Value Determination\n        # Calculate the p-value from the chi-square survival function with df=1.\n        # The degrees of freedom is 1 (3 categories - 1 constraint - 1 estimated param).\n        p_values = chi2.sf(chi2_stat, df=1)\n        \n        # 7. False Positive Rate\n        # Count how many p-values are less than the significance level alpha.\n        false_positives_count = np.sum(p_values  alpha)\n        \n        # The empirical false positive rate is the fraction of false positives.\n        fp_rate = false_positives_count / R\n        \n        # Store the result.\n        results.append(fp_rate)\n\n    # Format the final results to exactly four decimal places.\n    formatted_results = [f\"{r:.4f}\" for r in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2396474"}]}