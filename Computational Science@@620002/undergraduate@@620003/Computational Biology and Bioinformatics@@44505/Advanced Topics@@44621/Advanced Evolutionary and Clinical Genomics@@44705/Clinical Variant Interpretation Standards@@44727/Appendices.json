{"hands_on_practices": [{"introduction": "The American College of Medical Genetics and Genomics (ACMG) and the Association for Molecular Pathology (AMP) guidelines are built upon a set of rules for combining different types of evidence. This practice transforms these qualitative rules into a formal computational challenge, asking you to find the most efficient path to a \"Pathogenic\" classification [@problem_id:2378889]. By treating this as an optimization problem, you will develop skills in translating complex decision-making logic into an algorithm and learn to think strategically about evidence collection.", "problem": "You are asked to formalize a subset of the American College of Medical Genetics and Genomics (ACMG) guidelines for clinical variant interpretation as a decision logic over evidence categories and to compute the minimal number of evidence codes required to support a \"Pathogenic\" classification. For this problem, you will consider only the evidence categories used to support pathogenicity and their strength tiers: Pathogenic Very Strong (PVS), Pathogenic Strong (PS), Pathogenic Moderate (PM), and Pathogenic Supporting (PP). Let the available counts of evidence codes be bounded by nonnegative integers $V_{\\max}$, $S_{\\max}$, $M_{\\max}$, and $P_{\\max}$ for PVS, PS, PM, and PP, respectively. The decision logic below specifies sufficient combinations for a \"Pathogenic\" classification, based on the 2015 ACMG/AMP framework, restricted to the following sufficiency conditions.\n\nA variant is deemed \"Pathogenic\" if any one of the following combinations is satisfied by a selected multiset of evidence codes $(v, s, m, p)$ with $0 \\le v \\le V_{\\max}$, $0 \\le s \\le S_{\\max}$, $0 \\le m \\le M_{\\max}$, and $0 \\le p \\le P_{\\max}$:\n- Condition P1: $v \\ge 1$ and $s \\ge 1$.\n- Condition P2: $v \\ge 1$ and $m \\ge 2$.\n- Condition P3: $v \\ge 1$ and $m \\ge 1$ and $p \\ge 1$.\n- Condition P4: $v \\ge 1$ and $p \\ge 2$.\n- Condition P5: $s \\ge 2$.\n- Condition P6: $s \\ge 1$ and $m \\ge 3$.\n- Condition P7: $s \\ge 1$ and $m \\ge 2$ and $p \\ge 2$.\n- Condition P8: $s \\ge 1$ and $m \\ge 1$ and $p \\ge 4$.\n\nYour task is to determine, for each test case, the minimal total number of evidence codes $T = v + s + m + p$ such that at least one of the conditions P1–P8 is satisfied while respecting the availability bounds $(V_{\\max}, S_{\\max}, M_{\\max}, P_{\\max})$. If no combination can satisfy any of P1–P8 under the given availability bounds, return $-1$.\n\nModeling assumptions:\n- Each individual evidence code, regardless of its category, contributes a unit cost of $1$ toward the total $T$.\n- Only the sufficiency conditions P1–P8 above are to be used to determine a \"Pathogenic\" classification.\n- The objective is to minimize $T$ subject to the constraints.\n\nTest suite:\nFor each of the following test cases, compute the minimal $T$ or $-1$ if impossible. Each test case is provided as the quadruple $\\left(V_{\\max}, S_{\\max}, M_{\\max}, P_{\\max}\\right)$.\n\n1. $\\left(0, 2, 0, 0\\right)$\n2. $\\left(1, 1, 0, 0\\right)$\n3. $\\left(1, 0, 0, 3\\right)$\n4. $\\left(0, 1, 3, 0\\right)$\n5. $\\left(0, 0, 5, 10\\right)$\n6. $\\left(1, 0, 1, 1\\right)$\n7. $\\left(1, 1, 5, 5\\right)$\n8. $\\left(0, 1, 1, 4\\right)$\n9. $\\left(0, 1, 2, 2\\right)$\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite above. For example, the format must be like \"[r1,r2,r3,...,r9]\" where each $r_i$ is an integer equal to the minimal $T$ for test case $i$, or $-1$ if no \"Pathogenic\" classification is achievable under the given bounds.", "solution": "The problem requires the determination of the minimal total number of evidence codes required to classify a genetic variant as \"Pathogenic\" according to a specified subset of the ACMG/AMP guidelines. This can be formalized as a discrete optimization problem.\n\nThe state of the system is defined by a multiset of evidence codes, represented by the quadruple of non-negative integers $(v, s, m, p)$, where $v$ is the count of Pathogenic Very Strong (PVS) codes, $s$ is the count of Pathogenic Strong (PS) codes, $m$ is the count of Pathogenic Moderate (PM) codes, and $p$ is the count of Pathogenic Supporting (PP) codes.\n\nThe objective is to minimize the total number of codes, given by the linear objective function:\n$$T = v + s + m + p$$\n\nThis minimization is subject to two sets of constraints. First, the number of available codes of each type is bounded:\n$$0 \\le v \\le V_{\\max}$$\n$$0 \\le s \\le S_{\\max}$$\n$$0 \\le m \\le M_{\\max}$$\n$$0 \\le p \\le P_{\\max}$$\nwhere $(V_{\\max}, S_{\\max}, M_{\\max}, P_{\\max})$ is the given availability for a specific test case.\n\nSecond, for a \"Pathogenic\" classification to be made, at least one of eight logical conditions, denoted P1 through P8, must be satisfied. These conditions are expressed as a logical disjunction:\n$$P_1 \\lor P_2 \\lor P_3 \\lor P_4 \\lor P_5 \\lor P_6 \\lor P_7 \\lor P_8$$\nEach condition $P_i$ is a conjunction of inequalities on the counts $(v, s, m, p)$.\n\nTo minimize the total cost $T$, we must choose the values of $v, s, m, p$ as small as possible. This implies that for any given condition $P_i$ that we aim to satisfy, we should use exactly the minimum number of codes required by that condition's inequalities, and zero for any other categories not specified in the condition.\n\nThe solution methodology proceeds by evaluating each of the eight conditions independently. For each condition, we determine the minimal set of required codes and the corresponding total cost $T$. We then check if this minimal set is permissible under the given availability bounds $(V_{\\max}, S_{\\max}, M_{\\max}, P_{\\max})$.\n\nLet's analyze each condition:\n1.  Condition P1: $v \\ge 1$ and $s \\ge 1$. Minimal required codes: $(v, s, m, p) = (1, 1, 0, 0)$. The cost is $T_{P1} = 1 + 1 + 0 + 0 = 2$. This is achievable if $V_{\\max} \\ge 1$ and $S_{\\max} \\ge 1$.\n2.  Condition P2: $v \\ge 1$ and $m \\ge 2$. Minimal required codes: $(v, s, m, p) = (1, 0, 2, 0)$. The cost is $T_{P2} = 1 + 0 + 2 + 0 = 3$. This is achievable if $V_{\\max} \\ge 1$ and $M_{\\max} \\ge 2$.\n3.  Condition P3: $v \\ge 1$ and $m \\ge 1$ and $p \\ge 1$. Minimal required codes: $(v, s, m, p) = (1, 0, 1, 1)$. The cost is $T_{P3} = 1 + 0 + 1 + 1 = 3$. This is achievable if $V_{\\max} \\ge 1$, $M_{\\max} \\ge 1$, and $P_{\\max} \\ge 1$.\n4.  Condition P4: $v \\ge 1$ and $p \\ge 2$. Minimal required codes: $(v, s, m, p) = (1, 0, 0, 2)$. The cost is $T_{P4} = 1 + 0 + 0 + 2 = 3$. This is achievable if $V_{\\max} \\ge 1$ and $P_{\\max} \\ge 2$.\n5.  Condition P5: $s \\ge 2$. Minimal required codes: $(v, s, m, p) = (0, 2, 0, 0)$. The cost is $T_{P5} = 0 + 2 + 0 + 0 = 2$. This is achievable if $S_{\\max} \\ge 2$.\n6.  Condition P6: $s \\ge 1$ and $m \\ge 3$. Minimal required codes: $(v, s, m, p) = (0, 1, 3, 0)$. The cost is $T_{P6} = 0 + 1 + 3 + 0 = 4$. This is achievable if $S_{\\max} \\ge 1$ and $M_{\\max} \\ge 3$.\n7.  Condition P7: $s \\ge 1$ and $m \\ge 2$ and $p \\ge 2$. Minimal required codes: $(v, s, m, p) = (0, 1, 2, 2)$. The cost is $T_{P7} = 0 + 1 + 2 + 2 = 5$. This is achievable if $S_{\\max} \\ge 1$, $M_{\\max} \\ge 2$, and $P_{\\max} \\ge 2$.\n8.  Condition P8: $s \\ge 1$ and $m \\ge 1$ and $p \\ge 4$. Minimal required codes: $(v, s, m, p) = (0, 1, 1, 4)$. The cost is $T_{P8} = 0 + 1 + 1 + 4 = 6$. This is achievable if $S_{\\max} \\ge 1$, $M_{\\max} \\ge 1$, and $P_{\\max} \\ge 4$.\n\nFor each test case $(V_{\\max}, S_{\\max}, M_{\\max}, P_{\\max})$, we construct a set of achievable costs, $\\mathcal{T}_{\\text{achievable}}$, by including $T_{P_i}$ if and only if its corresponding condition is satisfiable under the given bounds. The final answer for the test case is the minimum value in this set:\n$$T_{\\min} = \\min(\\mathcal{T}_{\\text{achievable}})$$\nIf the set $\\mathcal{T}_{\\text{achievable}}$ is empty, it means no condition can be satisfied, and the problem is infeasible. In this case, the result is defined to be $-1$. This constitutes a complete algorithm for solving the problem. The algorithm is implemented by iterating through the test suite, applying this logic to each case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy import ...\n\ndef solve():\n    \"\"\"\n    Solves the problem for a predefined test suite of ACMG evidence code bounds.\n    \"\"\"\n\n    # Each test case is a tuple (V_max, S_max, M_max, P_max).\n    test_cases = [\n        (0, 2, 0, 0),\n        (1, 1, 0, 0),\n        (1, 0, 0, 3),\n        (0, 1, 3, 0),\n        (0, 0, 5, 10),\n        (1, 0, 1, 1),\n        (1, 1, 5, 5),\n        (0, 1, 1, 4),\n        (0, 1, 2, 2),\n    ]\n\n    results = []\n    for case in test_cases:\n        result = _find_minimal_evidence_count(case)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef _find_minimal_evidence_count(bounds):\n    \"\"\"\n    Calculates the minimal total number of evidence codes required to satisfy\n    at least one pathogenic condition, given the availability bounds.\n\n    Args:\n        bounds (tuple): A tuple of four integers (V_max, S_max, M_max, P_max)\n                        representing the maximum available counts for each\n                        evidence category.\n\n    Returns:\n        int: The minimal total number of codes, or -1 if no condition can be met.\n    \"\"\"\n    v_max, s_max, m_max, p_max = bounds\n    possible_costs = []\n\n    # The problem defines the objective as minimizing T = v + s + m + p.\n    # To do so, for each condition, we use the exact minimum number of codes\n    # required by that condition.\n\n    # Condition P1: v >= 1 and s >= 1. Cost (1+1=2)\n    if v_max >= 1 and s_max >= 1:\n        possible_costs.append(2)\n\n    # Condition P2: v >= 1 and m >= 2. Cost (1+2=3)\n    if v_max >= 1 and m_max >= 2:\n        possible_costs.append(3)\n\n    # Condition P3: v >= 1 and m >= 1 and p >= 1. Cost (1+1+1=3)\n    if v_max >= 1 and m_max >= 1 and p_max >= 1:\n        possible_costs.append(3)\n\n    # Condition P4: v >= 1 and p >= 2. Cost (1+2=3)\n    if v_max >= 1 and p_max >= 2:\n        possible_costs.append(3)\n\n    # Condition P5: s >= 2. Cost (2)\n    if s_max >= 2:\n        possible_costs.append(2)\n\n    # Condition P6: s >= 1 and m >= 3. Cost (1+3=4)\n    if s_max >= 1 and m_max >= 3:\n        possible_costs.append(4)\n\n    # Condition P7: s >= 1 and m >= 2 and p >= 2. Cost (1+2+2=5)\n    if s_max >= 1 and m_max >= 2 and p_max >= 2:\n        possible_costs.append(5)\n\n    # Condition P8: s >= 1 and m >= 1 and p >= 4. Cost (1+1+4=6)\n    if s_max >= 1 and m_max >= 1 and p_max >= 4:\n        possible_costs.append(6)\n\n    if not possible_costs:\n        return -1\n    else:\n        return min(possible_costs)\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2378889"}, {"introduction": "While the ACMG/AMP framework uses qualitative strength categories, a more rigorous approach is to quantify evidence using a probabilistic model. This exercise introduces the Bayesian framework for variant interpretation, where each piece of evidence updates our belief in a variant's pathogenicity [@problem_id:2378888]. You will implement a model that uses likelihood ratios, $\\operatorname{LR}$, to calculate the posterior probability of pathogenicity, $p_{\\text{post}}$, providing a foundational understanding of modern quantitative evidence integration.", "problem": "You will model the accumulation of American College of Medical Genetics and Genomics (ACMG) evidence codes as Bayesian updating of the prior probability of pathogenicity. Assume that each evidence code contributes a likelihood ratio in favor of pathogenicity, and that all evidence items are conditionally independent given the true pathogenicity state. Let the prior probability of pathogenicity be denoted by $p_0 \\in (0,1)$, and let the evidence be a finite sequence $E = (e_1, e_2, \\ldots, e_n)$ drawn from a fixed set of code categories. Define the prior odds as $O_0 = \\dfrac{p_0}{1 - p_0}$, the likelihood ratio as $\\operatorname{LR}(e_i)$ for each evidence $e_i$, and the posterior odds as\n$$\nO_{\\text{post}} = O_0 \\times \\prod_{i=1}^{n} \\operatorname{LR}(e_i).\n$$\nConvert odds back to probability via\n$$\np_{\\text{post}} = \\frac{O_{\\text{post}}}{1 + O_{\\text{post}}}.\n$$\nIf $E$ is empty, take the empty product to be $1$, so that $p_{\\text{post}} = p_0$.\n\nUse the following likelihood ratio calibration for ACMG evidence strengths, which are standard in the Bayesian reinterpretation of ACMG criteria. The likelihood ratios are in favor of pathogenicity; benign criteria use reciprocal values:\n- Pathogenic Very Strong ($\\text{PVS}$): $\\operatorname{LR} = 350$.\n- Pathogenic Strong ($\\text{PS}$): $\\operatorname{LR} = 18.7$.\n- Pathogenic Moderate ($\\text{PM}$): $\\operatorname{LR} = 4.3$.\n- Pathogenic Supporting ($\\text{PP}$): $\\operatorname{LR} = 2.08$.\n- Benign Stand-alone ($\\text{BA}$): $\\operatorname{LR} = \\dfrac{1}{350}$.\n- Benign Strong ($\\text{BS}$): $\\operatorname{LR} = \\dfrac{1}{18.7}$.\n- Benign Supporting ($\\text{BP}$): $\\operatorname{LR} = \\dfrac{1}{2.08}$.\n\nImplement a program that, for each test case, computes $p_{\\text{post}}$ according to the definitions above. Express each posterior probability as a decimal rounded to six digits after the decimal point.\n\nTest suite (each case is $(p_0, E)$):\n- Case $1$: $(p_0 = 0.1, E = [\\text{\"PS\"}, \\text{\"PM\"}, \\text{\"BP\"}])$.\n- Case $2$: $(p_0 = 0.1, E = [])$ (no evidence).\n- Case $3$: $(p_0 = 0.5, E = [\\text{\"PVS\"}])$.\n- Case $4$: $(p_0 = 0.99, E = [\\text{\"BS\"}])$.\n- Case $5$: $(p_0 = 0.01, E = [\\text{\"BA\"}])$.\n- Case $6$: $(p_0 = 0.2, E = [\\text{\"PP\"}, \\text{\"PP\"}, \\text{\"BP\"}])$.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite, for example $[\\text{result}_1,\\text{result}_2,\\ldots]$. Each $\\text{result}_i$ must be a decimal number rounded to six digits after the decimal point, such as $[0.123456,0.500000,0.999000]$.", "solution": "The problem presented is scientifically sound and mathematically well-posed. It is grounded in the established principles of Bayesian statistics, specifically applying Bayes' theorem in its odds-and-likelihood-ratio form to the problem of evidence integration in clinical variant interpretation. This approach is a recognized and published methodology for quantifying evidence strength under the American College of Medical Genetics and Genomics (ACMG) framework. Therefore, the problem is valid, and we proceed to the solution.\n\nThe core of the problem is Bayesian updating. Let $H$ be the hypothesis that a genetic variant is pathogenic, and $\\neg H$ be the complementary hypothesis that it is not. The prior probability of pathogenicity is given as $p_0 = P(H)$. The prior odds in favor of pathogenicity are defined as the ratio of the prior probability of the hypothesis to the prior probability of its complement:\n$$\nO_0 = \\frac{P(H)}{P(\\neg H)} = \\frac{p_0}{1 - p_0}\n$$\nWe are given a sequence of evidence items, $E = (e_1, e_2, \\ldots, e_n)$. For each piece of evidence $e_i$, its strength is quantified by a likelihood ratio, $\\operatorname{LR}(e_i)$, defined as:\n$$\n\\operatorname{LR}(e_i) = \\frac{P(e_i | H)}{P(e_i | \\neg H)}\n$$\nBayes' theorem in odds form states that the posterior odds are the product of the prior odds and the likelihood ratio: $O_{\\text{post}} = O_0 \\times \\operatorname{LR}(E)$. The problem states that the evidence items are conditionally independent given the true pathogenicity state. This critical assumption allows us to calculate the likelihood ratio for the entire sequence of evidence $E$ as the product of the individual likelihood ratios:\n$$\n\\operatorname{LR}(E) = \\operatorname{LR}(e_1, e_2, \\ldots, e_n) = \\prod_{i=1}^{n} \\operatorname{LR}(e_i)\n$$\nThus, the posterior odds, $O_{\\text{post}}$, after observing all evidence items in $E$, are calculated as:\n$$\nO_{\\text{post}} = O_0 \\times \\prod_{i=1}^{n} \\operatorname{LR}(e_i)\n$$\nIf the evidence set $E$ is empty, the product is taken to be $1$, so $O_{\\text{post}} = O_0$.\n\nFinally, the posterior odds are converted back to a posterior probability, $p_{\\text{post}} = P(H|E)$, using the formula:\n$$\np_{\\text{post}} = \\frac{O_{\\text{post}}}{1 + O_{\\text{post}}}\n$$\nThe problem provides the calibrated likelihood ratios for different ACMG evidence strength categories:\n- Pathogenic Very Strong ($\\text{PVS}$): $\\operatorname{LR} = 350$\n- Pathogenic Strong ($\\text{PS}$): $\\operatorname{LR} = 18.7$\n- Pathogenic Moderate ($\\text{PM}$): $\\operatorname{LR} = 4.3$\n- Pathogenic Supporting ($\\text{PP}$): $\\operatorname{LR} = 2.08$\n- Benign Stand-alone ($\\text{BA}$): $\\operatorname{LR} = 1/350$\n- Benign Strong ($\\text{BS}$): $\\operatorname{LR} = 1/18.7$\n- Benign Supporting ($\\text{BP}$): $\\operatorname{LR} = 1/2.08$\n\nWe will now apply this methodology to each test case.\n\nCase $1$: $(p_0 = 0.1, E = [\\text{\"PS\"}, \\text{\"PM\"}, \\text{\"BP\"}])$\n- Prior probability $p_0 = 0.1$.\n- Prior odds $O_0 = \\frac{0.1}{1 - 0.1} = \\frac{0.1}{0.9} = \\frac{1}{9}$.\n- Total likelihood ratio $\\operatorname{LR}_{\\text{total}} = \\operatorname{LR}(\\text{PS}) \\times \\operatorname{LR}(\\text{PM}) \\times \\operatorname{LR}(\\text{BP}) = 18.7 \\times 4.3 \\times \\frac{1}{2.08} = \\frac{80.41}{2.08}$.\n- Posterior odds $O_{\\text{post}} = \\frac{1}{9} \\times \\frac{80.41}{2.08} = \\frac{80.41}{18.72} \\approx 4.29540598$.\n- Posterior probability $p_{\\text{post}} = \\frac{4.29540598}{1 + 4.29540598} \\approx 0.8111580$. Rounded to six decimal places, this is $0.811158$.\n\nCase $2$: $(p_0 = 0.1, E = [])$\n- Prior probability $p_0 = 0.1$.\n- The evidence list is empty. The product of likelihood ratios is $1$.\n- Posterior odds $O_{\\text{post}} = O_0 = \\frac{0.1}{0.9} = \\frac{1}{9}$.\n- Posterior probability $p_{\\text{post}} = \\frac{1/9}{1 + 1/9} = \\frac{1}{10} = 0.1$. This is equivalent to $p_0$, as expected. Rounded to six decimal places, this is $0.100000$.\n\nCase $3$: $(p_0 = 0.5, E = [\\text{\"PVS\"}])$\n- Prior probability $p_0 = 0.5$.\n- Prior odds $O_0 = \\frac{0.5}{1 - 0.5} = 1$.\n- Total likelihood ratio $\\operatorname{LR}_{\\text{total}} = \\operatorname{LR}(\\text{PVS}) = 350$.\n- Posterior odds $O_{\\text{post}} = 1 \\times 350 = 350$.\n- Posterior probability $p_{\\text{post}} = \\frac{350}{1 + 350} = \\frac{350}{351} \\approx 0.997150997$. Rounded to six decimal places, this is $0.997151$.\n\nCase $4$: $(p_0 = 0.99, E = [\\text{\"BS\"}])$\n- Prior probability $p_0 = 0.99$.\n- Prior odds $O_0 = \\frac{0.99}{1 - 0.99} = \\frac{0.99}{0.01} = 99$.\n- Total likelihood ratio $\\operatorname{LR}_{\\text{total}} = \\operatorname{LR}(\\text{BS}) = \\frac{1}{18.7}$.\n- Posterior odds $O_{\\text{post}} = 99 \\times \\frac{1}{18.7} = \\frac{99}{18.7}$.\n- Posterior probability $p_{\\text{post}} = \\frac{99/18.7}{1 + 99/18.7} = \\frac{99}{18.7 + 99} = \\frac{99}{117.7} \\approx 0.841121495$. Rounded to six decimal places, this is $0.841121$.\n\nCase $5$: $(p_0 = 0.01, E = [\\text{\"BA\"}])$\n- Prior probability $p_0 = 0.01$.\n- Prior odds $O_0 = \\frac{0.01}{1 - 0.01} = \\frac{0.01}{0.99} = \\frac{1}{99}$.\n- Total likelihood ratio $\\operatorname{LR}_{\\text{total}} = \\operatorname{LR}(\\text{BA}) = \\frac{1}{350}$.\n- Posterior odds $O_{\\text{post}} = \\frac{1}{99} \\times \\frac{1}{350} = \\frac{1}{34650}$.\n- Posterior probability $p_{\\text{post}} = \\frac{1/34650}{1 + 1/34650} = \\frac{1}{34650 + 1} = \\frac{1}{34651} \\approx 0.000028859$. Rounded to six decimal places, this is $0.000029$.\n\nCase $6$: $(p_0 = 0.2, E = [\\text{\"PP\"}, \\text{\"PP\"}, \\text{\"BP\"}])$\n- Prior probability $p_0 = 0.2$.\n- Prior odds $O_0 = \\frac{0.2}{1 - 0.2} = \\frac{0.2}{0.8} = 0.25$.\n- Total likelihood ratio $\\operatorname{LR}_{\\text{total}} = \\operatorname{LR}(\\text{PP}) \\times \\operatorname{LR}(\\text{PP}) \\times \\operatorname{LR}(\\text{BP}) = 2.08 \\times 2.08 \\times \\frac{1}{2.08} = 2.08$.\n- Posterior odds $O_{\\text{post}} = 0.25 \\times 2.08 = 0.52$.\n- Posterior probability $p_{\\text{post}} = \\frac{0.52}{1 + 0.52} = \\frac{0.52}{1.52} = \\frac{13}{38} \\approx 0.342105263$. Rounded to six decimal places, this is $0.342105$.\n\nThe computed posterior probabilities for the six test cases are: $0.811158$, $0.100000$, $0.997151$, $0.841121$, $0.000029$, and $0.342105$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes posterior probabilities of pathogenicity based on a Bayesian\n    reinterpretation of ACMG evidence codes.\n    \"\"\"\n\n    # Define the likelihood ratio (LR) calibration for ACMG evidence strengths.\n    # The LRs are given in favor of pathogenicity.\n    lr_map = {\n        \"PVS\": 350.0,\n        \"PS\": 18.7,\n        \"PM\": 4.3,\n        \"PP\": 2.08,\n        \"BA\": 1.0 / 350.0,\n        \"BS\": 1.0 / 18.7,\n        \"BP\": 1.0 / 2.08,\n    }\n\n    # Define the test suite. Each case is a tuple (p0, evidence_list).\n    # p0 is the prior probability of pathogenicity.\n    test_cases = [\n        (0.1, [\"PS\", \"PM\", \"BP\"]),\n        (0.1, []),\n        (0.5, [\"PVS\"]),\n        (0.99, [\"BS\"]),\n        (0.01, [\"BA\"]),\n        (0.2, [\"PP\", \"PP\", \"BP\"]),\n    ]\n\n    results = []\n    for p0, evidence_codes in test_cases:\n        # Step 1: Calculate prior odds from prior probability p0.\n        # O_0 = p0 / (1 - p0)\n        # A check for p0=1 is good practice but not needed for given test cases.\n        prior_odds = p0 / (1.0 - p0)\n\n        # Step 2: Calculate the total likelihood ratio from the evidence codes.\n        # The total LR is the product of individual LRs due to conditional independence.\n        if not evidence_codes:\n            # The product of an empty set of LRs is 1.\n            total_lr = 1.0\n        else:\n            # Look up LR for each code and compute the product.\n            # np.prod is convenient for this.\n            lr_values = [lr_map[code] for code in evidence_codes]\n            total_lr = np.prod(lr_values)\n\n        # Step 3: Calculate posterior odds.\n        # O_post = O_0 * LR_total\n        posterior_odds = prior_odds * total_lr\n\n        # Step 4: Convert posterior odds back to posterior probability.\n        # p_post = O_post / (1 + O_post)\n        posterior_prob = posterior_odds / (1.0 + posterior_odds)\n\n        # Append the formatted result to the list.\n        # The result must be a string rounded to six decimal places.\n        results.append(f\"{posterior_prob:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2378888"}, {"introduction": "Clinical guidelines, while powerful, are not universally applicable and must be used with a deep understanding of their underlying assumptions. This practice focuses on the `BA1` \"common variant\" rule, challenging you to build a model from population genetics principles to determine when this rule might be misleading [@problem_id:2378900]. By calculating the maximum allele frequency, $q_{\\max}$, compatible with a disease model, you will learn to critically evaluate evidence in its specific genetic and disease context.", "problem": "You are asked to formalize when application of the American College of Medical Genetics and Genomics (ACMG) evidence code BA1 (the “common variant” benign rule) could be misleading for clinical variant interpretation. Consider a single bi-allelic locus with population allele frequency $f \\in [0,1]$. A laboratory uses a fixed BA1 decision threshold $\\tau \\in (0,1)$: BA1 would be applied whenever $f \\ge \\tau$. For a specific Mendelian condition, you are given the following parameters: disease prevalence $p \\in (0,1)$, penetrance $r \\in (0,1]$, gene-level contribution $h \\in (0,1]$ (the proportion of all cases attributable to the gene), and an upper bound on the variant’s allelic contribution $a \\in (0,1]$ (the maximum proportion of the gene’s cases attributable to this single variant). The mode of inheritance $m$ is either Autosomal Recessive (AR) or Autosomal Dominant (AD). Assume Hardy–Weinberg Equilibrium (HWE), the rare-allele approximation for the AD model, and that the case fraction attributable to the variant equals the product $p \\cdot h \\cdot a$.\n\nDefine the “maximum allele frequency compatible with pathogenicity” under the provided model, $q_{\\max}(m)$, as the largest value of the population allele frequency $q$ such that the expected frequency of affected individuals due to the variant does not exceed the variant-attributable disease burden. Concretely, under the Autosomal Recessive (AR) model, affected individuals arise primarily from homozygotes, whose frequency under HWE is $q^2$, and penetrance $r$ scales observed disease; under the Autosomal Dominant (AD) model with the rare-allele approximation, affected individuals arise primarily from heterozygotes of expected frequency $2q$ and penetrance $r$ scales observed disease. Using these governing relationships, $q_{\\max}(m)$ is the solution obtained by equating the variant’s expected contribution under the model to $p \\cdot h \\cdot a$.\n\nYour task is to determine, for each provided case, whether BA1 “might be misleading.” For this problem, define the flag as a boolean that is true if and only if both conditions hold: $(\\mathrm{i})$ BA1 would be applied for the observed frequency, i.e., $f \\ge \\tau$, and $(\\mathrm{ii})$ the observed frequency does not exceed the model-consistent maximum, i.e., $f \\le q_{\\max}(m)$. Otherwise, the flag is false.\n\nImplement a program that, for each test case below, computes this flag and outputs all results in a single line as a comma-separated list enclosed in square brackets, preserving the order of cases. No units are required because all quantities are proportions in $[0,1]$.\n\nUse the following test suite. Each case is a tuple $(m, p, r, h, a, \\tau, f)$ with the parameters defined above:\n- Case A: (AR, p=0.004, r=1.0, h=0.5, a=0.5, $\\tau$=0.01, f=0.02)\n- Case B: (AR, p=0.0001, r=1.0, h=1.0, a=1.0, $\\tau$=0.01, f=0.02)\n- Case C: (AR, p=0.004, r=1.0, h=0.5, a=0.5, $\\tau$=0.03, f=0.02)\n- Case D: (AD, p=0.001, r=0.2, h=1.0, a=0.5, $\\tau$=0.0008, f=0.001)\n- Case E: (AR, p=0.0004, r=1.0, h=1.0, a=1.0, $\\tau$=0.02, f=0.02)\n- Case F: (AD, p=0.01, r=0.5, h=0.1, a=0.05, $\\tau$=0.0001, f=0.0002)\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $[x_1,x_2,\\ldots,x_k]$), where each $x_i$ is either true or false, corresponding to Cases A through F in order.", "solution": "The problem requires a formal validation of its premises before a solution is attempted.\n\n### Step 1: Extract Givens\nThe provided parameters and definitions are as follows:\n- Population allele frequency of a variant: $f \\in [0,1]$.\n- BA1 decision threshold: $\\tau \\in (0,1)$. The BA1 rule is applied if $f \\ge \\tau$.\n- Disease prevalence: $p \\in (0,1)$.\n- Variant penetrance: $r \\in (0,1]$.\n- Gene-level contribution to disease: $h \\in (0,1]$.\n- Variant's allelic contribution to the gene's cases: $a \\in (0,1]$.\n- Mode of inheritance: $m \\in \\{\\text{Autosomal Recessive (AR), Autosomal Dominant (AD)}\\}$.\n- Assumptions: Hardy–Weinberg Equilibrium (HWE) holds, and the rare-allele approximation is used for the AD model.\n- The fraction of cases attributable to the variant is defined as the product $p \\cdot h \\cdot a$.\n- The \"maximum allele frequency compatible with pathogenicity,\" $q_{\\max}(m)$, is the largest allele frequency $q$ where the expected frequency of affected individuals due to the variant does not exceed the variant-attributable disease burden.\n- The governing relationships for the expected frequency of affected individuals for a variant with allele frequency $q$ and penetrance $r$ are:\n    - For AR: $q^2 r$.\n    - For AD (with rare-allele approximation): $2qr$.\n- The definition of the \"misleading\" flag is a boolean that is true if and only if two conditions are met:\n    1. $f \\ge \\tau$ (BA1 rule is applied).\n    2. $f \\le q_{\\max}(m)$ (the observed frequency is compatible with pathogenicity under the model).\n- The test cases provided are:\n    - Case A: $(m=\\text{AR},\\, p=0.004,\\, r=1.0,\\, h=0.5,\\, a=0.5,\\, \\tau=0.01,\\, f=0.02)$\n    - Case B: $(m=\\text{AR},\\, p=0.0001,\\, r=1.0,\\, h=1.0,\\, a=1.0,\\, \\tau=0.01,\\, f=0.02)$\n    - Case C: $(m=\\text{AR},\\, p=0.004,\\, r=1.0,\\, h=0.5,\\, a=0.5,\\, \\tau=0.03,\\, f=0.02)$\n    - Case D: $(m=\\text{AD},\\, p=0.001,\\, r=0.2,\\, h=1.0,\\, a=0.5,\\, \\tau=0.0008,\\, f=0.001)$\n    - Case E: $(m=\\text{AR},\\, p=0.0004,\\, r=1.0,\\, h=1.0,\\, a=1.0,\\, \\tau=0.02,\\, f=0.02)$\n    - Case F: $(m=\\text{AD},\\, p=0.01,\\, r=0.5,\\, h=0.1,\\, a=0.05,\\, \\tau=0.0001,\\, f=0.0002)$\n\n### Step 2: Validate Using Extracted Givens\nThe problem statement is subjected to validation against the specified criteria.\n- **Scientifically Grounded**: The problem is based on fundamental principles of population genetics, specifically the Hardy-Weinberg principle, and Mendelian inheritance. The parameters $p, r, h, a, f$ are standard metrics in medical and population genetics. The model, though simplified, provides a scientifically reasonable framework for estimating the maximum allele frequency of a pathogenic variant. The formulation does not violate any known scientific laws and is directly relevant to the field of computational biology and bioinformatics.\n- **Well-Posed**: The problem is clearly structured. It provides all necessary definitions, equations, and data for each test case. The objective is to compute a boolean flag based on a set of unambiguous conditions. A unique solution exists for each test case.\n- **Objective**: The problem is expressed in precise, mathematical language. It is free of ambiguity, subjectivity, or opinion-based claims.\n\nThe problem exhibits none of the specified flaws (e.g., factual unsoundness, incompleteness, contradiction, or poor structure). It is a self-contained, formalizable, and scientifically valid problem.\n\n### Step 3: Verdict and Action\nThe problem is valid. A solution will be provided.\n\n### Solution Derivation\nThe task is to determine if applying the ACMG BA1 criterion is \"misleading\" for a given set of parameters. This is defined as true if and only if $f \\ge \\tau$ and $f \\le q_{\\max}(m)$. The core of the problem is to derive and compute $q_{\\max}(m)$.\n\nThe quantity $q_{\\max}(m)$ represents the maximum allele frequency a variant can have while still being consistent with causing a certain fraction of a Mendelian disease. This maximum is found by equating the expected number of affected individuals from the variant to the total disease burden attributed to that variant.\n\nThe variant-attributable disease burden, which we denote as $B_v$, is given as:\n$$ B_v = p \\cdot h \\cdot a $$\nwhere $p$ is disease prevalence, $h$ is the gene-level contribution, and $a$ is the variant's allelic contribution.\n\nThe expected frequency of affected individuals, $A(q, m, r)$, depends on the mode of inheritance $m$, the allele frequency $q$, and the penetrance $r$.\n\n**1. Autosomal Recessive (AR) Model**\nFor an autosomal recessive condition, affected individuals are predominantly homozygotes for the pathogenic allele. Under Hardy-Weinberg Equilibrium, the frequency of homozygotes is $q^2$. With penetrance $r$, the frequency of affected individuals is:\n$$ A(q, \\text{AR}, r) = q^2 r $$\nTo find $q_{\\max}(\\text{AR})$, we set $A(q_{\\max}, \\text{AR}, r) = B_v$:\n$$ (q_{\\max}(\\text{AR}))^2 r = p \\cdot h \\cdot a $$\nSolving for $q_{\\max}(\\text{AR})$:\n$$ q_{\\max}(\\text{AR}) = \\sqrt{\\frac{p \\cdot h \\cdot a}{r}} $$\n\n**2. Autosomal Dominant (AD) Model**\nFor an autosomal dominant condition, and using the rare-allele approximation ($q \\ll 1$), affected individuals are predominantly heterozygotes. The frequency of heterozygotes under HWE is $2q(1-q)$, which approximates to $2q$ for small $q$. With penetrance $r$, the frequency of affected individuals is:\n$$ A(q, \\text{AD}, r) \\approx 2qr $$\nTo find $q_{\\max}(\\text{AD})$, we set $A(q_{\\max}, \\text{AD}, r) = B_v$:\n$$ 2q_{\\max}(\\text{AD}) r = p \\cdot h \\cdot a $$\nSolving for $q_{\\max}(\\text{AD})$:\n$$ q_{\\max}(\\text{AD}) = \\frac{p \\cdot h \\cdot a}{2r} $$\n\nThe \"misleading\" flag is then computed by evaluating the logical expression $(f \\ge \\tau) \\land (f \\le q_{\\max})$.\n\n### Calculations for Test Cases\n\n**Case A:** $(m=\\text{AR},\\, p=0.004,\\, r=1.0,\\, h=0.5,\\, a=0.5,\\, \\tau=0.01,\\, f=0.02)$\n1.  Calculate $q_{\\max}(\\text{AR})$:\n    $$ q_{\\max}(\\text{AR}) = \\sqrt{\\frac{0.004 \\cdot 0.5 \\cdot 0.5}{1.0}} = \\sqrt{0.001} \\approx 0.03162 $$\n2.  Check conditions:\n    - $f \\ge \\tau$: $0.02 \\ge 0.01$ is True.\n    - $f \\le q_{\\max}(\\text{AR})$: $0.02 \\le 0.03162$ is True.\n3.  Result: True $\\land$ True $\\implies$ True.\n\n**Case B:** $(m=\\text{AR},\\, p=0.0001,\\, r=1.0,\\, h=1.0,\\, a=1.0,\\, \\tau=0.01,\\, f=0.02)$\n1.  Calculate $q_{\\max}(\\text{AR})$:\n    $$ q_{\\max}(\\text{AR}) = \\sqrt{\\frac{0.0001 \\cdot 1.0 \\cdot 1.0}{1.0}} = \\sqrt{0.0001} = 0.01 $$\n2.  Check conditions:\n    - $f \\ge \\tau$: $0.02 \\ge 0.01$ is True.\n    - $f \\le q_{\\max}(\\text{AR})$: $0.02 \\le 0.01$ is False.\n3.  Result: True $\\land$ False $\\implies$ False.\n\n**Case C:** $(m=\\text{AR},\\, p=0.004,\\, r=1.0,\\, h=0.5,\\, a=0.5,\\, \\tau=0.03,\\, f=0.02)$\n1.  Calculate $q_{\\max}(\\text{AR})$:\n    $$ q_{\\max}(\\text{AR}) = \\sqrt{\\frac{0.004 \\cdot 0.5 \\cdot 0.5}{1.0}} = \\sqrt{0.001} \\approx 0.03162 $$\n2.  Check conditions:\n    - $f \\ge \\tau$: $0.02 \\ge 0.03$ is False.\n3.  Result: The first condition is false, so the combined result is False.\n\n**Case D:** $(m=\\text{AD},\\, p=0.001,\\, r=0.2,\\, h=1.0,\\, a=0.5,\\, \\tau=0.0008,\\, f=0.001)$\n1.  Calculate $q_{\\max}(\\text{AD})$:\n    $$ q_{\\max}(\\text{AD}) = \\frac{0.001 \\cdot 1.0 \\cdot 0.5}{2 \\cdot 0.2} = \\frac{0.0005}{0.4} = 0.00125 $$\n2.  Check conditions:\n    - $f \\ge \\tau$: $0.001 \\ge 0.0008$ is True.\n    - $f \\le q_{\\max}(\\text{AD})$: $0.001 \\le 0.00125$ is True.\n3.  Result: True $\\land$ True $\\implies$ True.\n\n**Case E:** $(m=\\text{AR},\\, p=0.0004,\\, r=1.0,\\, h=1.0,\\, a=1.0,\\, \\tau=0.02,\\, f=0.02)$\n1.  Calculate $q_{\\max}(\\text{AR})$:\n    $$ q_{\\max}(\\text{AR}) = \\sqrt{\\frac{0.0004 \\cdot 1.0 \\cdot 1.0}{1.0}} = \\sqrt{0.0004} = 0.02 $$\n2.  Check conditions:\n    - $f \\ge \\tau$: $0.02 \\ge 0.02$ is True.\n    - $f \\le q_{\\max}(\\text{AR})$: $0.02 \\le 0.02$ is True.\n3.  Result: True $\\land$ True $\\implies$ True.\n\n**Case F:** $(m=\\text{AD},\\, p=0.01,\\, r=0.5,\\, h=0.1,\\, a=0.05,\\, \\tau=0.0001,\\, f=0.0002)$\n1.  Calculate $q_{\\max}(\\text{AD})$:\n    $$ q_{\\max}(\\text{AD}) = \\frac{0.01 \\cdot 0.1 \\cdot 0.05}{2 \\cdot 0.5} = \\frac{0.00005}{1.0} = 0.00005 $$\n2.  Check conditions:\n    - $f \\ge \\tau$: $0.0002 \\ge 0.0001$ is True.\n    - $f \\le q_{\\max}(\\text{AD})$: $0.0002 \\le 0.00005$ is False.\n3.  Result: True $\\land$ False $\\implies$ False.\n\nThe final sequence of boolean results for cases A through F is: True, False, False, True, True, False.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes a 'misleading' flag for the application of the ACMG BA1 rule\n    for several test cases, based on a population genetics model.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (m, p, r, h, a, tau, f)\n    # m: Mode of inheritance ('AR' or 'AD')\n    # p: Disease prevalence\n    # r: Penetrance\n    # h: Gene-level contribution\n    # a: Variant's allelic contribution\n    # tau: BA1 decision threshold\n    # f: Observed population allele frequency\n    test_cases = [\n        ('AR', 0.004, 1.0, 0.5, 0.5, 0.01, 0.02),      # Case A\n        ('AR', 0.0001, 1.0, 1.0, 1.0, 0.01, 0.02),     # Case B\n        ('AR', 0.004, 1.0, 0.5, 0.5, 0.03, 0.02),      # Case C\n        ('AD', 0.001, 0.2, 1.0, 0.5, 0.0008, 0.001),    # Case D\n        ('AR', 0.0004, 1.0, 1.0, 1.0, 0.02, 0.02),     # Case E\n        ('AD', 0.01, 0.5, 0.1, 0.05, 0.0001, 0.0002),   # Case F\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        m, p, r, h, a, tau, f = case\n\n        # Calculate the variant-attributable disease burden\n        variant_burden = p * h * a\n\n        # Calculate the maximum allele frequency compatible with pathogenicity (q_max)\n        # based on the mode of inheritance.\n        q_max = 0.0\n        if m == 'AR':\n            # For Autosomal Recessive, q_max = sqrt((p*h*a) / r)\n            q_max = np.sqrt(variant_burden / r)\n        elif m == 'AD':\n            # For Autosomal Dominant, q_max = (p*h*a) / (2*r)\n            q_max = variant_burden / (2 * r)\n\n        # A \"misleading\" flag is True if both conditions are met:\n        # 1. BA1 would be applied for the observed frequency (f >= tau)\n        # 2. The observed frequency is compatible with the model (f <= q_max)\n        is_misleading = (f >= tau) and (f <= q_max)\n        \n        results.append(is_misleading)\n\n    # Format the final output as a comma-separated list of booleans\n    # within square brackets, e.g., [True,False,...]\n    # The default str() conversion for booleans ('True', 'False') is used.\n    # To get lowercase 'true'/'false', one would use str(r).lower().\n    # However, the standard representation is clearer.\n    print(f\"[{','.join(str(res).lower() for res in results)}]\")\n\nsolve()\n```", "id": "2378900"}]}