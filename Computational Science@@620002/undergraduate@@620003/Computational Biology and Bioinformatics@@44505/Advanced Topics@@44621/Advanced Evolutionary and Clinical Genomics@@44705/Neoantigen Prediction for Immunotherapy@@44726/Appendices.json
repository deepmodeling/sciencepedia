{"hands_on_practices": [{"introduction": "A crucial first step in any neoantigen discovery pipeline is to filter a vast pool of potential candidates down to a high-confidence set. This practice [@problem_id:2409285] guides you through building a rule-based classifier that emulates this process. You will learn to integrate multiple data types—genomic (Variant Allele Fraction), transcriptomic (expression), and immunoinformatic (MHC binding)—to distinguish true somatic neoantigens from germline variants or other artifacts, a foundational skill for any computational immunologist.", "problem": "You are given a formal decision problem grounded in the biological definition of a neoantigen. A neoantigen is a peptide derived from a somatic alteration that is present in the tumor but absent from the patient’s germline, and that is presented by at least one Human Leukocyte Antigen (HLA) molecule with sufficiently strong binding, and whose source transcript is expressed in the tumor. For each candidate peptide, you are provided with read counts for alternate and reference alleles in both tumor and normal samples, predicted binding affinities to one or more HLA alleles (in nanomolar), and tumor expression in Transcripts Per Million (TPM). Your task is to implement a classifier that decides whether each candidate meets the formal definition of a true neoantigen, and to apply it to a fixed test suite.\n\nDefinitions and notation. For each candidate, you are given nonnegative integers $T_{\\mathrm{ref}}$, $T_{\\mathrm{alt}}$, $N_{\\mathrm{ref}}$, $N_{\\mathrm{alt}}$ for the tumor and normal sample reference and alternate read counts, respectively. Define tumor coverage $T_{\\mathrm{cov}} = T_{\\mathrm{ref}} + T_{\\mathrm{alt}}$ and normal coverage $N_{\\mathrm{cov}} = N_{\\mathrm{ref}} + N_{\\mathrm{alt}}$. Define tumor variant allele fraction (VAF) as\n$$\n\\mathrm{VAF}_T = \n\\begin{cases}\n\\dfrac{T_{\\mathrm{alt}}}{T_{\\mathrm{ref}} + T_{\\mathrm{alt}}}, & \\text{if } T_{\\mathrm{ref}} + T_{\\mathrm{alt}} > 0,\\\\\n0, & \\text{if } T_{\\mathrm{ref}} + T_{\\mathrm{alt}} = 0,\n\\end{cases}\n$$\nand normal variant allele fraction as\n$$\n\\mathrm{VAF}_N = \n\\begin{cases}\n\\dfrac{N_{\\mathrm{alt}}}{N_{\\mathrm{ref}} + N_{\\mathrm{alt}}}, & \\text{if } N_{\\mathrm{ref}} + N_{\\mathrm{alt}} > 0,\\\\\n0, & \\text{if } N_{\\mathrm{ref}} + N_{\\mathrm{alt}} = 0.\n\\end{cases}\n$$\nLet the list of predicted binding affinities (in nanomolar) be $A = [a_1, a_2, \\dots, a_m]$ with $m \\geq 1$, and the tumor expression be a nonnegative real number $E$ in Transcripts Per Million (TPM).\n\nClassifier specification. A candidate is classified as a true neoantigen if and only if all of the following conditions hold simultaneously:\n1. Adequate sequencing support in both samples: $T_{\\mathrm{cov}} \\geq c_{\\min}$ and $N_{\\mathrm{cov}} \\geq c_{\\min}$.\n2. Somatic alteration consistent with tumor-enriched alternate allele and germline absence: $\\mathrm{VAF}_T \\geq \\tau_{\\mathrm{tumor}}$ and $\\mathrm{VAF}_N < \\tau_{\\mathrm{germ}}$.\n3. At least one sufficiently strong Human Leukocyte Antigen binding prediction: $\\min(A) \\leq \\theta_{\\mathrm{bind}}$ (nanomolar).\n4. Sufficient tumor expression: $E \\geq \\theta_{\\mathrm{expr}}$ (TPM).\n\nUse the following fixed thresholds: $c_{\\min} = 10$, $\\tau_{\\mathrm{tumor}} = 0.05$, $\\tau_{\\mathrm{germ}} = 0.20$, $\\theta_{\\mathrm{bind}} = 500$ (nanomolar), and $\\theta_{\\mathrm{expr}} = 1.0$ (TPM). There are no physical units besides nanomolar for binding affinity and TPM for expression; no angle units are involved. All comparisons are to be interpreted in the standard real-number sense.\n\nTest suite. Apply your classifier to the following seven candidates. Each candidate is given as a tuple $(T_{\\mathrm{ref}}, T_{\\mathrm{alt}}, N_{\\mathrm{ref}}, N_{\\mathrm{alt}}, A, E)$, where $A$ is a list of one or more real numbers.\n\n- Candidate $1$: $(30, 20, 50, 0, [120.0, 720.0], 8.5)$.\n- Candidate $2$: $(25, 35, 30, 30, [50.0, 80.0], 12.0)$.\n- Candidate $3$: $(42, 18, 55, 0, [650.0, 800.0], 9.0)$.\n- Candidate $4$: $(15, 15, 40, 0, [100.0], 0.5)$.\n- Candidate $5$: $(28, 12, 5, 0, [30.0, 40.0], 10.0)$.\n- Candidate $6$: $(25, 25, 38, 2, [200.0, 400.0], 3.0)$.\n- Candidate $7$: $(50, 0, 60, 0, [5.0], 9.0)$.\n\nYour program must compute the classification for each candidate according to the specification above and produce a single line of output containing the results as a comma-separated list of integers enclosed in square brackets, where $1$ denotes “true neoantigen” and $0$ denotes “not a true neoantigen.” For example, an output for three candidates might look like $[1,0,1]$.\n\nYour implementation must be self-contained with the test suite embedded in the program. No external input is required or permitted.", "solution": "The problem statement submitted for analysis is deemed valid. It presents a formal, self-contained, and scientifically grounded computational task in bioinformatics. The objective is to implement a deterministic classifier for neoantigen candidates based on a precise set of rules and a fixed test suite. The problem is well-posed, with all definitions, parameters, and data provided explicitly. There are no contradictions, ambiguities, or violations of scientific principles. We will now proceed with the solution.\n\nThe classification of a candidate peptide as a true neoantigen requires the simultaneous satisfaction of four distinct criteria. A candidate is assigned a classification of $1$ (true neoantigen) if all four conditions are met, and $0$ otherwise. The required parameters for these conditions are fixed as follows:\n- Minimum coverage: $c_{\\min} = 10$ reads.\n- Minimum tumor Variant Allele Fraction (VAF): $\\tau_{\\mathrm{tumor}} = 0.05$.\n- Maximum germline VAF: $\\tau_{\\mathrm{germ}} = 0.20$.\n- Maximum binding affinity: $\\theta_{\\mathrm{bind}} = 500$ nanomolar (nM).\n- Minimum tumor expression: $\\theta_{\\mathrm{expr}} = 1.0$ Transcripts Per Million (TPM).\n\nThe four conditions are:\n1.  **Sequencing Coverage**: Tumor coverage $T_{\\mathrm{cov}} = T_{\\mathrm{ref}} + T_{\\mathrm{alt}}$ and normal coverage $N_{\\mathrm{cov}} = N_{\\mathrm{ref}} + N_{\\mathrm{alt}}$ must both be at least $c_{\\min}$.\n2.  **Somatic Origin**: Tumor VAF $\\mathrm{VAF}_T = T_{\\mathrm{alt}} / T_{\\mathrm{cov}}$ must be at least $\\tau_{\\mathrm{tumor}}$, and normal VAF $\\mathrm{VAF}_N = N_{\\mathrm{alt}} / N_{\\mathrm{cov}}$ must be strictly less than $\\tau_{\\mathrm{germ}}$. The VAF is defined as $0$ if coverage is $0$.\n3.  **HLA Binding**: The minimum predicted binding affinity, $\\min(A)$, must be less than or equal to $\\theta_{\\mathrm{bind}}$.\n4.  **Gene Expression**: The source transcript expression $E$ must be at least $\\theta_{\\mathrm{expr}}$.\n\nWe will now apply this classification logic systematically to each of the seven provided candidates.\n\n**Candidate 1**: Input is $(T_{\\mathrm{ref}}, T_{\\mathrm{alt}}, N_{\\mathrm{ref}}, N_{\\mathrm{alt}}, A, E) = (30, 20, 50, 0, [120.0, 720.0], 8.5)$.\n1.  Coverage: $T_{\\mathrm{cov}} = 30 + 20 = 50 \\geq 10$. $N_{\\mathrm{cov}} = 50 + 0 = 50 \\geq 10$. This condition is satisfied.\n2.  VAF: $\\mathrm{VAF}_T = \\frac{20}{50} = 0.4 \\geq 0.05$. $\\mathrm{VAF}_N = \\frac{0}{50} = 0 < 0.20$. This condition is satisfied.\n3.  Binding: $\\min(A) = \\min([120.0, 720.0]) = 120.0 \\leq 500$. This condition is satisfied.\n4.  Expression: $E = 8.5 \\geq 1.0$. This condition is satisfied.\nAll four conditions are met. Classification: $1$.\n\n**Candidate 2**: Input is $(25, 35, 30, 30, [50.0, 80.0], 12.0)$.\n1.  Coverage: $T_{\\mathrm{cov}} = 25 + 35 = 60 \\geq 10$. $N_{\\mathrm{cov}} = 30 + 30 = 60 \\geq 10$. This condition is satisfied.\n2.  VAF: $\\mathrm{VAF}_T = \\frac{35}{60} \\approx 0.583 \\geq 0.05$. However, $\\mathrm{VAF}_N = \\frac{30}{60} = 0.5$, which is not less than $0.20$. This condition is not satisfied.\nThe candidate fails on the somatic origin criterion, indicating a likely germline variant.\nClassification: $0$.\n\n**Candidate 3**: Input is $(42, 18, 55, 0, [650.0, 800.0], 9.0)$.\n1.  Coverage: $T_{\\mathrm{cov}} = 42 + 18 = 60 \\geq 10$. $N_{\\mathrm{cov}} = 55 + 0 = 55 \\geq 10$. This condition is satisfied.\n2.  VAF: $\\mathrm{VAF}_T = \\frac{18}{60} = 0.3 \\geq 0.05$. $\\mathrm{VAF}_N = \\frac{0}{55} = 0 < 0.20$. This condition is satisfied.\n3.  Binding: $\\min(A) = \\min([650.0, 800.0]) = 650.0$. This value is not less than or equal to $500$. This condition is not satisfied.\nThe candidate fails due to weak predicted binding affinity.\nClassification: $0$.\n\n**Candidate 4**: Input is $(15, 15, 40, 0, [100.0], 0.5)$.\n1.  Coverage: $T_{\\mathrm{cov}} = 15 + 15 = 30 \\geq 10$. $N_{\\mathrm{cov}} = 40 + 0 = 40 \\geq 10$. This condition is satisfied.\n2.  VAF: $\\mathrm{VAF}_T = \\frac{15}{30} = 0.5 \\geq 0.05$. $\\mathrm{VAF}_N = \\frac{0}{40} = 0 < 0.20$. This condition is satisfied.\n3.  Binding: $\\min(A) = \\min([100.0]) = 100.0 \\leq 500$. This condition is satisfied.\n4.  Expression: $E = 0.5$. This value is not greater than or equal to $1.0$. This condition is not satisfied.\nThe candidate fails due to insufficient expression of the source transcript.\nClassification: $0$.\n\n**Candidate 5**: Input is $(28, 12, 5, 0, [30.0, 40.0], 10.0)$.\n1.  Coverage: $T_{\\mathrm{cov}} = 28 + 12 = 40 \\geq 10$. However, $N_{\\mathrm{cov}} = 5 + 0 = 5$, which is not greater than or equal to $10$. This condition is not satisfied.\nThe candidate fails due to inadequate sequencing coverage in the normal sample.\nClassification: $0$.\n\n**Candidate 6**: Input is $(25, 25, 38, 2, [200.0, 400.0], 3.0)$.\n1.  Coverage: $T_{\\mathrm{cov}} = 25 + 25 = 50 \\geq 10$. $N_{\\mathrm{cov}} = 38 + 2 = 40 \\geq 10$. This condition is satisfied.\n2.  VAF: $\\mathrm{VAF}_T = \\frac{25}{50} = 0.5 \\geq 0.05$. $\\mathrm{VAF}_N = \\frac{2}{40} = 0.05 < 0.20$. This condition is satisfied.\n3.  Binding: $\\min(A) = \\min([200.0, 400.0]) = 200.0 \\leq 500$. This condition is satisfied.\n4.  Expression: $E = 3.0 \\geq 1.0$. This condition is satisfied.\nAll four conditions are met.\nClassification: $1$.\n\n**Candidate 7**: Input is $(50, 0, 60, 0, [5.0], 9.0)$.\n1.  Coverage: $T_{\\mathrm{cov}} = 50 + 0 = 50 \\geq 10$. $N_{\\mathrm{cov}} = 60 + 0 = 60 \\geq 10$. This condition is satisfied.\n2.  VAF: $\\mathrm{VAF}_T = \\frac{0}{50} = 0$. This value is not greater than or equal to $0.05$. This condition is not satisfied.\nThe candidate fails because there is no evidence of the alternate allele in the tumor sample.\nClassification: $0$.\n\nThe final classification vector is $[1, 0, 0, 0, 0, 1, 0]$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements a classifier for neoantigens based on a formal set of criteria\n    and applies it to a fixed test suite.\n    \"\"\"\n    \n    # Define fixed thresholds as per the problem specification.\n    C_MIN = 10         # Minimum read coverage\n    TAU_TUMOR = 0.05   # Minimum tumor VAF\n    TAU_GERM = 0.20    # Maximum normal VAF\n    THETA_BIND = 500   # Maximum binding affinity in nM\n    THETA_EXPR = 1.0   # Minimum expression in TPM\n\n    # Define the test suite of candidate peptides.\n    # Each tuple is (T_ref, T_alt, N_ref, N_alt, A, E).\n    test_cases = [\n        (30, 20, 50, 0, [120.0, 720.0], 8.5),   # Candidate 1\n        (25, 35, 30, 30, [50.0, 80.0], 12.0),  # Candidate 2\n        (42, 18, 55, 0, [650.0, 800.0], 9.0),  # Candidate 3\n        (15, 15, 40, 0, [100.0], 0.5),          # Candidate 4\n        (28, 12, 5, 0, [30.0, 40.0], 10.0),    # Candidate 5\n        (25, 25, 38, 2, [200.0, 400.0], 3.0),  # Candidate 6\n        (50, 0, 60, 0, [5.0], 9.0),            # Candidate 7\n    ]\n\n    def calculate_vaf(alt_reads, ref_reads):\n        \"\"\"\n        Calculates the Variant Allele Fraction (VAF).\n        Returns 0 if total coverage is 0, as specified.\n        \"\"\"\n        coverage = alt_reads + ref_reads\n        if coverage == 0:\n            return 0.0\n        return alt_reads / coverage\n\n    results = []\n    for case in test_cases:\n        t_ref, t_alt, n_ref, n_alt, a_list, e_val = case\n        \n        # Calculate intermediate values needed for the classification logic.\n        t_cov = t_ref + t_alt\n        n_cov = n_ref + n_alt\n        vaf_t = calculate_vaf(t_alt, t_ref)\n        vaf_n = calculate_vaf(n_alt, n_ref)\n        min_binding_affinity = np.min(a_list)\n        \n        # Condition 1: Adequate sequencing support in both samples.\n        cond1 = (t_cov >= C_MIN) and (n_cov >= C_MIN)\n        \n        # Condition 2: Somatic alteration signature.\n        cond2 = (vaf_t >= TAU_TUMOR) and (vaf_n < TAU_GERM)\n        \n        # Condition 3: Sufficiently strong HLA binding prediction.\n        cond3 = min_binding_affinity <= THETA_BIND\n        \n        # Condition 4: Sufficient tumor expression.\n        cond4 = e_val >= THETA_EXPR\n        \n        # A candidate is a true neoantigen if and only if all conditions hold.\n        if cond1 and cond2 and cond3 and cond4:\n            results.append(1)\n        else:\n            results.append(0)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2409285"}, {"introduction": "Once a somatic variant is identified, a critical question is whether it is present in all tumor cells (clonal) or just a fraction (subclonal), as clonal neoantigens make superior therapeutic targets. This exercise [@problem_id:2409282] challenges you to implement a model that estimates this clonality from sequencing data. By accounting for tumor purity and copy number, you will transform a raw Variant Allele Fraction (VAF) into a robust quantitative estimate of a neoantigen's prevalence within the tumor.", "problem": "You are given a mathematical model to quantify the clonality of a candidate neoantigen-bearing somatic variant in a mixed specimen consisting of tumor and normal cells. The sample is modeled as a mixture of a fraction $p$ of tumor cells and a fraction $1 - p$ of normal cells, where $p \\in [0,1]$ is the tumor purity expressed as a decimal. At the genomic locus of interest, each tumor cell has a total copy number $C_T \\in \\mathbb{N}$ and each normal cell has a total copy number $C_N \\in \\mathbb{N}$. The variant is present in a fraction $f \\in [0,1]$ of tumor cells (the unknown to estimate), and in those variant-carrying tumor cells it occurs on $m \\in \\{1,2,\\dots,C_T\\}$ copies (the allelic multiplicity). Sequencing reads are assumed to be sampled without allelic bias. The observed Variant Allele Fraction (VAF) $v \\in [0,1]$ is defined as the expected ratio of mutated allele counts to total allele counts across all cells in the specimen, expressed as a decimal.\n\nDefine the clonality score $S$ for the variant as the estimated fraction $f$ of tumor cells that carry the variant, computed from first principles under the above model and then truncated to the closed interval $[0,1]$ by setting $S = 0$ if the raw estimate is negative and $S = 1$ if the raw estimate exceeds $1$. All quantities involving proportions must be expressed as decimals, not percentages.\n\nWrite a program that, for each parameter set in the test suite below, computes the clonality score $S$ and outputs the results as floating-point numbers rounded to exactly $6$ decimal places.\n\nTest suite (each tuple is $(p, C_T, C_N, m, v)$ with all proportions as decimals):\n- Case 1: $(0.8, 2, 2, 1, 0.4)$\n- Case 2: $(0.7, 2, 2, 1, 0.0875)$\n- Case 3: $(0.9, 3, 2, 2, 0.6206896551724138)$\n- Case 4: $(0.2, 2, 2, 1, 0.1)$\n- Case 5: $(1.0, 2, 2, 1, 0.52)$\n- Case 6: $(0.6, 1, 2, 1, 0.42857142857142855)$\n- Case 7: $(0.85, 4, 2, 1, 0.011486486486486488)$\n- Case 8: $(0.95, 5, 2, 3, 0.3525773195876289)$\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with no spaces, in the same order as the test cases. For example, the output must look like [$x_1,x_2,\\dots,x_8$], where each $x_i$ is the rounded clonality score for case $i$ with exactly 6 digits after the decimal point.", "solution": "The problem statement has been subjected to rigorous validation and is deemed valid. It is scientifically grounded in the principles of cancer genomics, well-posed, objective, and internally consistent. No flaws pertaining to scientific soundness, completeness, or logical structure have been identified. We may therefore proceed with the derivation of the solution.\n\nThe objective is to compute the clonality score, $S$, which is the estimated fraction, $f$, of tumor cells harboring a specific somatic variant. The score is derived from the observed Variant Allele Fraction (VAF), $v$, within a mixed sample of tumor and normal cells.\n\nThe VAF, $v$, is defined as the expected ratio of the count of mutated alleles to the total count of all alleles at the locus of interest, across the entire cell population.\n$$ v = \\frac{\\text{Number of mutated alleles}}{\\text{Total number of alleles}} $$\n\nWe will now derive expressions for the numerator and the denominator of this fraction based on the model parameters provided. Let the total number of cells in the specimen be normalized to $1$. The specimen is composed of a fraction $p$ of tumor cells and a fraction $1-p$ of normal cells.\n\nFirst, we determine the total number of alleles (the denominator). This is the sum of alleles from the tumor and normal cell compartments.\nThe contribution from the tumor compartment, which has fraction $p$ and total copy number $C_T$ per cell, is proportional to $p \\cdot C_T$.\nThe contribution from the normal compartment, which has fraction $1-p$ and total copy number $C_N$ per cell, is proportional to $(1-p) \\cdot C_N$.\nTherefore, the total number of alleles in the specimen is proportional to the sum of these contributions:\n$$ \\text{Total Alleles} \\propto p \\cdot C_T + (1-p) \\cdot C_N $$\n\nNext, we determine the number of mutated alleles (the numerator). The somatic variant is assumed to be absent in normal cells. It is present only in a fraction $f$ of the tumor cells.\nThe fraction of the total specimen corresponding to variant-carrying tumor cells is $p \\cdot f$.\nIn each of these variant-carrying cells, the mutated allele is present on $m$ copies, where $m$ is the allelic multiplicity.\nThus, the number of mutated alleles in the specimen is proportional to the product of the fraction of variant-carrying cells and the multiplicity of the variant:\n$$ \\text{Mutated Alleles} \\propto p \\cdot f \\cdot m $$\n\nBy substituting these expressions into the definition of VAF, we obtain the fundamental relationship:\n$$ v = \\frac{p \\cdot f \\cdot m}{p \\cdot C_T + (1-p) \\cdot C_N} $$\n\nOur goal is to estimate $f$. We rearrange this equation to solve for $f$. Let this raw estimate be denoted $\\hat{f}$.\n$$ v \\cdot (p \\cdot C_T + (1-p) \\cdot C_N) = p \\cdot f \\cdot m $$\nGiven that $p \\in (0, 1]$ for all test cases and $m \\in \\{1, 2, \\dots, C_T\\}$ (implying $m \\ge 1$), the term $p \\cdot m$ is non-zero. We can therefore isolate $\\hat{f}$:\n$$ \\hat{f} = \\frac{v \\cdot (p \\cdot C_T + (1-p) \\cdot C_N)}{p \\cdot m} $$\n\nThe clonality score, $S$, is defined as this raw estimate, $\\hat{f}$, truncated to the valid closed interval $[0, 1]$. This is to account for potential noise in real-world measurements or model misspecification which might yield physically impossible values (i.e., $\\hat{f} < 0$ or $\\hat{f} > 1$). The truncation is performed as follows:\n$$ S = \\begin{cases} 0 & \\text{if } \\hat{f} < 0 \\\\ 1 & \\text{if } \\hat{f} > 1 \\\\ \\hat{f} & \\text{if } 0 \\le \\hat{f} \\le 1 \\end{cases} $$\nThis can be expressed concisely as $S = \\max(0, \\min(1, \\hat{f}))$.\n\nThis formula provides a complete and correct method for computing the clonality score $S$ for each of the given test cases. We will now implement this computation.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the clonality score for a somatic variant based on a given\n    mathematical model of a mixed tumor-normal specimen.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each tuple is (p, C_T, C_N, m, v)\n    test_cases = [\n        (0.8, 2, 2, 1, 0.4),\n        (0.7, 2, 2, 1, 0.0875),\n        (0.9, 3, 2, 2, 0.6206896551724138),\n        (0.2, 2, 2, 1, 0.1),\n        (1.0, 2, 2, 1, 0.52),\n        (0.6, 1, 2, 1, 0.42857142857142855),\n        (0.85, 4, 2, 1, 0.011486486486486488),\n        (0.95, 5, 2, 3, 0.3525773195876289),\n    ]\n\n    results = []\n    for case in test_cases:\n        p, C_T, C_N, m, v = case\n\n        # Numerator of the f_hat equation: v * (total alleles)\n        # Denominator of the f_hat equation: p * m\n        \n        # Calculate the weighted average copy number across the specimen,\n        # which is proportional to the total number of alleles.\n        total_allelic_content = p * C_T + (1 - p) * C_N\n        \n        # Calculate the denominator for the f_hat expression.\n        # From the problem constraints, p > 0 and m >= 1, so no division by zero.\n        f_hat_denominator = p * m\n        \n        # Calculate the raw estimate of the clonality fraction, f_hat.\n        f_hat = (v * total_allelic_content) / f_hat_denominator\n        \n        # The clonality score S is f_hat truncated to the interval [0, 1].\n        # np.clip is efficient for this operation.\n        clonality_score = np.clip(f_hat, 0.0, 1.0)\n        \n        results.append(clonality_score)\n\n    # Format the results to exactly 6 decimal places and create the final output string.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2409282"}, {"introduction": "After identifying a set of high-confidence neoantigen candidates, the final computational step is to rank them by their predicted immunogenicity to select the best ones for a vaccine. This practice [@problem_id:2409290] focuses on this vital task by having you develop a composite scoring function. You will combine key determinants of immunogenicity—MHC binding affinity ($IC_{50}$), gene expression ($TPM$), and foreignness—into a single, unified score to prioritize the most promising peptides.", "problem": "A researcher is prioritizing candidate neoantigen peptides for cancer immunotherapy by combining three measurable determinants of immunogenic potential: binding affinity to Major Histocompatibility Complex (MHC) as Inhibitory Concentration at $50$ percent ($IC_{50}$, in nM), source gene expression as Transcripts Per Million ($TPM$), and a unitless foreignness score $F \\in [0,1]$ that quantifies dissimilarity to any self-peptide. To obtain a dimensionless prioritization score that increases with stronger binding, higher expression, and greater foreignness, define the score $S$ by first mapping each determinant to a monotonic, dimensionless factor and then combining multiplicatively:\n- Affinity strength: $a = \\max\\{0, \\ln(IC_{50}^{\\mathrm{ref}}/IC_{50})\\}$ with $IC_{50}^{\\mathrm{ref}} = 500\\,\\mathrm{nM}$.\n- Expression strength: $e = \\ln(1 + TPM)$.\n- Foreignness: $F$ as given.\n- Overall score: $S = a \\cdot e \\cdot F$.\nHere $\\ln$ denotes the natural logarithm.\n\nFor a candidate peptide with $IC_{50} = 50\\,\\mathrm{nM}$, $TPM = 12$, and $F = 0.70$, compute the value of $S$. Report your final answer as a single real number rounded to $4$ significant figures. The score $S$ is dimensionless; do not include units in your answer.", "solution": "The problem statement is subjected to validation before proceeding.\n\n**Step 1: Extract Givens**\n-   Binding affinity to MHC: $IC_{50}$, in units of nM.\n-   Reference binding affinity: $IC_{50}^{\\mathrm{ref}} = 500\\,\\mathrm{nM}$.\n-   Source gene expression: $TPM$.\n-   Foreignness score: $F \\in [0,1]$.\n-   Affinity strength factor: $a = \\max\\{0, \\ln(IC_{50}^{\\mathrm{ref}}/IC_{50})\\}$.\n-   Expression strength factor: $e = \\ln(1 + TPM)$.\n-   Overall prioritization score: $S = a \\cdot e \\cdot F$.\n-   Values for the candidate peptide: $IC_{50} = 50\\,\\mathrm{nM}$, $TPM = 12$, $F = 0.70$.\n-   Requirement: Compute $S$ and round the result to $4$ significant figures.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded, presenting a simplified but conceptually valid scoring model for neoantigen prioritization used in computational immunology. The metrics ($IC_{50}$, $TPM$, foreignness) and their mathematical transformations are standard in the field. The problem is well-posed, as all necessary formulas and data are provided for a unique numerical solution. The language is objective and precise. The provided numerical values are physically and biologically plausible. The problem is self-contained, consistent, and requires a direct application of the given model.\n\n**Step 3: Verdict and Action**\nThe problem is deemed valid. A solution will be derived.\n\nThe task is to compute the prioritization score $S$ for a candidate neoantigen peptide using the provided formulas and data. The score $S$ is a multiplicative combination of three dimensionless factors: the affinity strength $a$, the expression strength $e$, and the foreignness $F$.\n\nFirst, we calculate the affinity strength factor $a$. The formula is given by:\n$$a = \\max\\{0, \\ln(IC_{50}^{\\mathrm{ref}}/IC_{50})\\}$$\nThe given values are $IC_{50}^{\\mathrm{ref}} = 500\\,\\mathrm{nM}$ and $IC_{50} = 50\\,\\mathrm{nM}$. Substituting these values into the formula yields:\n$$a = \\max\\{0, \\ln\\left(\\frac{500}{50}\\right)\\} = \\max\\{0, \\ln(10)\\}$$\nSince the natural logarithm of $10$ is a positive number ($\\ln(10) \\approx 2.3026$), the maximum value is $\\ln(10)$.\n$$a = \\ln(10)$$\n\nSecond, we calculate the expression strength factor $e$. The formula is:\n$$e = \\ln(1 + TPM)$$\nThe given value for Transcripts Per Million is $TPM = 12$. Substituting this value, we get:\n$$e = \\ln(1 + 12) = \\ln(13)$$\n\nThird, the foreignness score $F$ is given directly as a dimensionless number:\n$$F = 0.70$$\n\nFinally, we compute the overall score $S$ by multiplying these three factors:\n$$S = a \\cdot e \\cdot F$$\nSubstituting the calculated expressions for $a$ and $e$, and the value for $F$:\n$$S = \\ln(10) \\cdot \\ln(13) \\cdot 0.70$$\nWe now compute the numerical value. Using the approximate values for the natural logarithms, $\\ln(10) \\approx 2.302585$ and $\\ln(13) \\approx 2.564949$.\n$$S \\approx (2.302585) \\cdot (2.564949) \\cdot 0.70$$\n$$S \\approx 5.905963 \\cdot 0.70$$\n$$S \\approx 4.134174$$\nThe problem requires the final answer to be rounded to $4$ significant figures. The first four significant figures are $4$, $1$, $3$, and $4$. The fifth significant digit is $1$, which is less than $5$, so we round down.\n$$S \\approx 4.134$$\nThis is the final dimensionless score for the candidate peptide.", "answer": "$$\\boxed{4.134}$$", "id": "2409290"}]}