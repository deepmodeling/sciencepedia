{"hands_on_practices": [{"introduction": "Before relying on computational solvers, it is invaluable to understand what happens \"under the hood\" of Flux Balance Analysis. By working through a minimal model where an analytical solution is possible, we can build a strong intuition for how the optimal solution is governed by the underlying stoichiometry and flux constraints. This practice [@problem_id:2390880] guides you in deriving the maximal biomass flux as a direct function of model parameters, providing a clear demonstration of how sensitive a metabolic network's output can be to changes in reaction yields.", "problem": "Consider a minimal metabolic network analyzed by Flux Balance Analysis (FBA), represented by a stoichiometric matrix $S$ with metabolites $\\{\\text{Glc}, \\text{ATP}_{e}\\}$ and reactions $\\{R_{\\text{glc\\_upt}}, R_{\\text{gly}}, R_{\\text{atp\\_syn}}, R_{\\text{maint}}, R_{\\text{biom}}\\}$. The pseudo-metabolite $\\text{ATP}_{e}$ represents an energy balance pool. The reactions and their stoichiometric contributions to $S$ are:\n- For $\\text{Glc}$: $R_{\\text{glc\\_upt}}$ has coefficient $+1$, $R_{\\text{gly}}$ has coefficient $-1$, and the remaining reactions have coefficient $0$.\n- For $\\text{ATP}_{e}$: $R_{\\text{gly}}$ has coefficient $+2$, $R_{\\text{atp\\_syn}}$ has coefficient $+y$, $R_{\\text{maint}}$ has coefficient $-1$, and $R_{\\text{biom}}$ has coefficient $-b$, while $R_{\\text{glc\\_upt}}$ has coefficient $0$.\n\nLet the flux vector be $v = (v_{\\text{glc\\_upt}}, v_{\\text{gly}}, v_{\\text{atp\\_syn}}, v_{\\text{maint}}, v_{\\text{biom}})$. The steady-state constraints $S v = 0$ are:\n- $\\text{Glc}$ balance: $v_{\\text{glc\\_upt}} - v_{\\text{gly}} = 0$.\n- Energy balance: $2 v_{\\text{gly}} + y \\, v_{\\text{atp\\_syn}} - v_{\\text{maint}} - b \\, v_{\\text{biom}} = 0$.\n\nThe flux bounds are:\n- $0 \\le v_{\\text{glc\\_upt}} \\le G$,\n- $0 \\le v_{\\text{gly}}$ (unbounded above),\n- $0 \\le v_{\\text{atp\\_syn}} \\le S$,\n- $M \\le v_{\\text{maint}}$ (unbounded above),\n- $0 \\le v_{\\text{biom}}$ (unbounded above).\n\nThe objective is to maximize the biomass flux $v_{\\text{biom}}$.\n\nThe parameter $y$ is the adenosine triphosphate (ATP) yield coefficient of the ATP synthase reaction $R_{\\text{atp\\_syn}}$ in the stoichiometric matrix $S$. In the baseline model, $y = y_0$. In the perturbed model, the ATP yield is increased by a factor of $1.10$, i.e., $y = 1.10 \\, y_0$.\n\nTask: For each parameter set in the test suite below, compute the change in the optimal biomass objective value, defined as $\\Delta v_{\\text{biom}}^{\\star} = v_{\\text{biom}}^{\\star}(1.10\\,y_0) - v_{\\text{biom}}^{\\star}(y_0)$, where $v_{\\text{biom}}^{\\star}(y)$ denotes the optimal biomass flux under the parameters and yield $y$. All fluxes, including the reported changes, must be expressed in $\\text{mmol}\\,(\\text{gDW}\\cdot \\text{h})^{-1}$. Express each reported change as a floating-point number rounded to six decimal places.\n\nTest suite (each tuple is $(G, S, M, b, y_0)$ in $\\text{mmol}\\,(\\text{gDW}\\cdot \\text{h})^{-1}$ for $G, S, M$ and dimensionless for $b, y_0$):\n- Case $1$: $(G, S, M, b, y_0) = (\\,5,\\, 2,\\, 3,\\, 10,\\, 3.0\\,)$.\n- Case $2$: $(G, S, M, b, y_0) = (\\,5,\\, 0,\\, 3,\\, 10,\\, 3.0\\,)$.\n- Case $3$: $(G, S, M, b, y_0) = (\\,1,\\, 1,\\, 5,\\, 10,\\, 3.0\\,)$.\n- Case $4$: $(G, S, M, b, y_0) = (\\,0,\\, 4,\\, 10,\\, 10,\\, 3.0\\,)$.\n- Case $5$: $(G, S, M, b, y_0) = (\\,2,\\, 5,\\, 1,\\, 10,\\, 3.0\\,)$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite, for example, $[r_1, r_2, r_3, r_4, r_5]$, where each $r_i$ is the rounded floating-point change $\\Delta v_{\\text{biom}}^{\\star}$ for case $i$ in $\\text{mmol}\\,(\\text{gDW}\\cdot \\text{h})^{-1}$.", "solution": "The problem statement is subjected to validation before a solution is attempted.\n\n**Problem Validation**\n\nThe givens are extracted verbatim: a metabolic network with metabolites $\\{\\text{Glc}, \\text{ATP}_{e}\\}$ and reactions $\\{R_{\\text{glc\\_upt}}, R_{\\text{gly}}, R_{\\text{atp\\_syn}}, R_{\\text{maint}}, R_{\\text{biom}}\\}$. The stoichiometric matrix $S$ leads to the steady-state constraints $S v = 0$:\n1. $v_{\\text{glc\\_upt}} - v_{\\text{gly}} = 0$\n2. $2 v_{\\text{gly}} + y \\, v_{\\text{atp\\_syn}} - v_{\\text{maint}} - b \\, v_{\\text{biom}} = 0$\n\nFlux bounds are given as: $0 \\le v_{\\text{glc\\_upt}} \\le G$, $0 \\le v_{\\text{gly}}$, $0 \\le v_{\\text{atp\\_syn}} \\le S$, $M \\le v_{\\text{maint}}$, and $0 \\le v_{\\text{biom}}$. The objective is to maximize $v_{\\text{biom}}$. The parameter $y$ is perturbed from a baseline $y_0$ to $1.10 \\, y_0$. The task is to compute the change in the maximal biomass flux, $\\Delta v_{\\text{biom}}^{\\star}$.\n\nThe problem is a standard application of Flux Balance Analysis (FBA), a cornerstone technique in computational biology. It is mathematically formulated as a linear programming (LP) problem. The terms are precisely defined, the structure is logical, and it is scientifically grounded in the principles of metabolic modeling. There are no contradictions, ambiguities, or factual inaccuracies. The problem is therefore deemed **valid**.\n\n**Analytical Solution**\n\nThe task is to solve the following linear programming problem for the optimal biomass flux, $v_{\\text{biom}}^{\\star}$:\nMaximize $v_{\\text{biom}}$ subject to the following constraints:\n1. $v_{\\text{glc\\_upt}} - v_{\\text{gly}} = 0$\n2. $2 v_{\\text{gly}} + y \\, v_{\\text{atp\\_syn}} - v_{\\text{maint}} - b \\, v_{\\text{biom}} = 0$\n3. $0 \\le v_{\\text{glc\\_upt}} \\le G$\n4. $v_{\\text{gly}} \\ge 0$\n5. $0 \\le v_{\\text{atp\\_syn}} \\le S$\n6. $v_{\\text{maint}} \\ge M$\n7. $v_{\\text{biom}} \\ge 0$\n\nWe proceed by simplifying the system. From the first equality constraint, we deduce $v_{\\text{glc\\_upt}} = v_{\\text{gly}}$. Combining this with the bounds on $v_{\\text{glc\\_upt}}$ and $v_{\\text{gly}}$, we obtain a single effective bound for the glycolysis flux:\n$$0 \\le v_{\\text{gly}} \\le G$$\n\nNext, we rearrange the second equality constraint to express the objective variable, $v_{\\text{biom}}$, in terms of the other fluxes. Given that the biomass stoichiometric coefficient $b$ is specified as $10$ in all test cases, we can assume $b > 0$ and write:\n$$b \\, v_{\\text{biom}} = 2 v_{\\text{gly}} + y \\, v_{\\text{atp\\_syn}} - v_{\\text{maint}}$$\n$$v_{\\text{biom}} = \\frac{1}{b} (2 v_{\\text{gly}} + y \\, v_{\\text{atp\\_syn}} - v_{\\text{maint}})$$\n\nTo maximize $v_{\\text{biom}}$, we must maximize the right-hand side of this equation. The expression is a linear combination of the fluxes $v_{\\text{gly}}$, $v_{\\text{atp\\_syn}}$, and $v_{\\text{maint}}$. Since their bounds are independent, we can optimize each term separately:\n- The coefficient of $v_{\\text{gly}}$ is $2/b$, which is positive. To maximize the expression, we must maximize $v_{\\text{gly}}$. Its maximum allowed value is $G$. Thus, we set $v_{\\text{gly}} = G$.\n- The coefficient of $v_{\\text{atp\\_syn}}$ is $y/b$. The ATP yield $y$ is given by positive values ($y_0=3.0$), so this coefficient is positive. We must maximize $v_{\\text{atp\\_syn}}$, setting it to its upper bound, $S$.\n- The coefficient of $v_{\\text{maint}}$ is $-1/b$, which is negative. To maximize the expression, we must minimize $v_{\\text{maint}}$. Its minimum allowed value is $M$. Thus, we set $v_{\\text{maint}} = M$.\n\nSubstituting these optimal choices into the expression for $v_{\\text{biom}}$ yields the maximum potential biomass flux:\n$$v_{\\text{biom}}^{\\text{potential}} = \\frac{2G + yS - M}{b}$$\nHowever, we must also satisfy the non-negativity constraint $v_{\\text{biom}} \\ge 0$. If the nutrient supply ($G, S$) is insufficient to meet the maintenance energy demand ($M$), the numerator could be negative, which is biologically infeasible for biomass production. Therefore, the true optimal biomass flux, $v_{\\text{biom}}^{\\star}$, is the maximum of $0$ and the potential value:\n$$v_{\\text{biom}}^{\\star}(y) = \\max \\left( 0, \\frac{2G + yS - M}{b} \\right)$$\nThis formula provides the analytical solution for the optimal biomass flux for a given set of parameters $(G, S, M, b, y)$.\n\nThe required calculation is the change in this optimal flux when $y$ is changed from $y_0$ to $y_1 = 1.10 \\, y_0$:\n$$\\Delta v_{\\text{biom}}^{\\star} = v_{\\text{biom}}^{\\star}(1.10 \\, y_0) - v_{\\text{biom}}^{\\star}(y_0)$$\nSubstituting the derived expression for $v_{\\text{biom}}^{\\star}(y)$:\n$$\\Delta v_{\\text{biom}}^{\\star} = \\max \\left( 0, \\frac{2G + (1.10 \\, y_0)S - M}{b} \\right) - \\max \\left( 0, \\frac{2G + y_0 S - M}{b} \\right)$$\nThis final expression is implemented for each test case to obtain the numerical results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Flux Balance Analysis problem for a series of test cases.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each tuple is (G, S, M, b, y0).\n    test_cases = [\n        (5.0, 2.0, 3.0, 10.0, 3.0),\n        (5.0, 0.0, 3.0, 10.0, 3.0),\n        (1.0, 1.0, 5.0, 10.0, 3.0),\n        (0.0, 4.0, 10.0, 10.0, 3.0),\n        (2.0, 5.0, 1.0, 10.0, 3.0),\n    ]\n\n    results = []\n\n    def calculate_v_biom_star(G, S, M, b, y):\n        \"\"\"\n        Calculates the optimal biomass flux based on the derived analytical solution.\n\n        The formula is v_biom* = max(0, (2*G + y*S - M) / b).\n\n        Args:\n            G (float): Maximum glucose uptake rate.\n            S (float): Maximum ATP synthase flux.\n            M (float): Minimum maintenance ATP requirement.\n            b (float): Stoichiometric coefficient for biomass in energy balance.\n            y (float): ATP yield coefficient.\n\n        Returns:\n            float: The optimal biomass flux v_biom*.\n        \"\"\"\n        # The parameter b is assumed > 0 from the problem context.\n        # If b were 0, the problem would be ill-defined (unbounded or infeasible).\n        numerator = 2 * G + y * S - M\n        v_biom_potential = numerator / b\n        \n        # The biomass flux cannot be negative.\n        return np.maximum(0, v_biom_potential)\n\n    for case in test_cases:\n        G, S, M, b, y0 = case\n        \n        # ATP yield in the perturbed model\n        y1 = 1.10 * y0\n        \n        # Calculate optimal biomass for baseline and perturbed models\n        v_biom_star_y0 = calculate_v_biom_star(G, S, M, b, y0)\n        v_biom_star_y1 = calculate_v_biom_star(G, S, M, b, y1)\n        \n        # Calculate the change in optimal biomass flux\n        delta_v_biom_star = v_biom_star_y1 - v_biom_star_y0\n        \n        results.append(delta_v_biom_star)\n\n    # Format results to six decimal places as strings.\n    formatted_results = [f\"{r:.6f}\" for r in results]\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2390880"}, {"introduction": "With a foundational understanding of the FBA solution space, we can now use computational tools to model and predict complex biological behaviors. This exercise [@problem_id:2390906] challenges you to apply FBA to a classic question in microbiology: which nutrient will a cell consume first when presented with multiple options? You will build a model from scratch and use it to test the hypothesis that cells prioritize the carbon source that maximizes their growth rate, a principle that helps explain the phenomenon of catabolite repression.", "problem": "You are asked to implement a complete, runnable program that uses Flux Balance Analysis (FBA) to predict which of several available carbon sources a cell will consume first, under the hypothesis that regulatory catabolite repression selects the substrate that yields the highest maximal growth rate. Your implementation must start from first principles: steady-state mass balance and linear programming, with no shortcut formulas. You will encode a simplified, scientifically plausible metabolic network that tracks a carbon-precursor pool and adenosine triphosphate (ATP), and you will determine, for each offered set of substrates and environmental bounds, which substrate would be preferred based on its single-substrate maximal biomass production rate.\n\n#### Fundamental Principles\n\nFlux Balance Analysis (FBA) assumes a steady state of intracellular metabolite concentrations so that the net production of each internal metabolite is zero. If $S \\in \\mathbb{R}^{m \\times n}$ is the stoichiometric matrix and $v \\in \\mathbb{R}^{n}$ is the vector of reaction fluxes, the steady state constraint is $S v = 0$. Each flux $v_j$ is constrained by lower and upper bounds, and an objective (here, biomass production) is optimized. Solve a Linear Programming (LP) problem of maximizing the biomass reaction flux subject to mass balance and bounds.\n\n#### Network Definition\n\nUse the following internal metabolites: glucose (internal) $glc_c$, acetate (internal) $ac_c$, glycerol (internal) $glyc_c$, oxygen (internal) $o2_c$, carbon dioxide (internal) $co2_c$, a generic carbon precursor pool $C_c$, and ATP $atp_c$. The following reactions comprise the network, written with stoichiometric coefficients for internal metabolites:\n\n- Substrate and oxygen imports (boundary sources with upper bounds):\n    - $r_0$: $\\emptyset \\rightarrow glc_c$\n    - $r_1$: $\\emptyset \\rightarrow ac_c$\n    - $r_2$: $\\emptyset \\rightarrow glyc_c$\n    - $r_3$: $\\emptyset \\rightarrow o2_c$\n\n- Carbon dioxide export (boundary sink with upper bound):\n    - $r_4$: $co2_c \\rightarrow \\emptyset$\n\n- Assimilation and energy-yielding internal reactions (irreversible, non-negative fluxes):\n    - $r_5$: $glc_c \\rightarrow 6\\, C_c + 2\\, atp_c$\n    - $r_6$: $glyc_c \\rightarrow 3\\, C_c + 1\\, atp_c$\n    - $r_7$: $ac_c \\rightarrow 2\\, C_c$\n    - $r_8$: $C_c + o2_c \\rightarrow co2_c + 10\\, atp_c$  (aerobic respiration)\n    - $r_9$: $C_c \\rightarrow co2_c + 2\\, atp_c$  (fermentation, anaerobic ATP production)\n\n- Biomass synthesis (objective reaction, irreversible):\n    - $r_{10}$: $5\\, C_c + 20\\, atp_c \\rightarrow \\text{biomass}$\n\nSteady-state mass balance must be enforced for the internal metabolites $glc_c$, $ac_c$, $glyc_c$, $o2_c$, $co2_c$, $C_c$, and $atp_c$. The biomass pool is not a balanced metabolite; its production flux $v_{10}$ is the objective to be maximized.\n\n#### Bounds\n\nAll internal reaction fluxes are non-negative, i.e., $v_j \\ge 0$ for $j \\in \\{5,6,7,8,9,10\\}$. The carbon dioxide export $r_4$ has bounds $0 \\le v_4 \\le 1000$. For imports $r_0$, $r_1$, $r_2$, and $r_3$, the bounds are $0 \\le v_j \\le U_j$ where $U_0 = U_{\\mathrm{glc}}$, $U_1 = U_{\\mathrm{ac}}$, $U_2 = U_{\\mathrm{glyc}}$, and $U_3 = U_{\\mathrm{O2}}$. All rates are to be interpreted as in mmol per gram dry weight per hour, but the final program’s output will be dimensionless integers as specified below.\n\n#### Computational Task\n\nGiven a set of available carbon sources with specified import bounds and an oxygen import bound, predict which single carbon source would be consumed first according to the following decision rule: For each available carbon source $s$ in the set, compute the maximal biomass flux $v_{10}^{(s)}$ by solving the FBA problem with only that source’s import bound set to its specified $U_s$ (all other carbon source import bounds set to $0$ for that run), respecting the given oxygen bound $U_{\\mathrm{O2}}$. The preferred source is the one with the largest maximal biomass flux. In the case of a tie within a numerical tolerance of $10^{-7}$, choose the source with the smallest index according to the mapping below.\n\n#### Source Index Mapping\n\n- Glucose $\\mapsto 0$\n- Acetate $\\mapsto 1$\n- Glycerol $\\mapsto 2$\n\n#### Test Suite\n\nYour program must hard-code and process the following five test cases. For each case, you are given the import bounds for glucose $U_{\\mathrm{glc}}$, acetate $U_{\\mathrm{ac}}$, glycerol $U_{\\mathrm{glyc}}$, and oxygen $U_{\\mathrm{O2}}$. A source is considered available in a case if and only if its $U_s > 0$.\n\n- Case A (abundant oxygen, glucose and acetate available): $U_{\\mathrm{glc}} = 10$, $U_{\\mathrm{ac}} = 10$, $U_{\\mathrm{glyc}} = 0$, $U_{\\mathrm{O2}} = 1000$.\n- Case B (abundant oxygen, acetate and glycerol available): $U_{\\mathrm{glc}} = 0$, $U_{\\mathrm{ac}} = 10$, $U_{\\mathrm{glyc}} = 10$, $U_{\\mathrm{O2}} = 1000$.\n- Case C (oxygen-limited, all three available): $U_{\\mathrm{glc}} = 10$, $U_{\\mathrm{ac}} = 10$, $U_{\\mathrm{glyc}} = 10$, $U_{\\mathrm{O2}} = 3$.\n- Case D (anaerobic, all three available): $U_{\\mathrm{glc}} = 10$, $U_{\\mathrm{ac}} = 10$, $U_{\\mathrm{glyc}} = 10$, $U_{\\mathrm{O2}} = 0$.\n- Case E (glucose scarce, glycerol abundant, aerobic): $U_{\\mathrm{glc}} = 2$, $U_{\\mathrm{ac}} = 0$, $U_{\\mathrm{glyc}} = 20$, $U_{\\mathrm{O2}} = 1000$.\n\n#### Final Output Specification\n\nYour program should produce a single line of output containing the results as a comma-separated list of integers enclosed in square brackets. The list must contain, in order, the preferred source index for Cases A through E. For example, an output might look like $[0,2,0,0,2]$ (this is only an example placeholder; your program must compute the actual values).", "solution": "The problem statement has been evaluated and is deemed valid. It is a well-posed problem in computational systems biology, based on the established principles of Flux Balance Analysis (FBA). The metabolic network, while simplified, is scientifically plausible, and the task is a standard optimization problem that can be solved using linear programming.\n\nThe core principle of Flux Balance Analysis is the assumption of a pseudo-steady state for internal metabolite concentrations. This is expressed by the mass balance equation $S v = 0$, where $S \\in \\mathbb{R}^{m \\times n}$ is the stoichiometric matrix for $m$ metabolites and $n$ reactions, and $v \\in \\mathbb{R}^{n}$ is the vector of reaction fluxes. Each flux $v_j$ is further constrained by lower and upper bounds, $l_j \\le v_j \\le u_j$. The analysis seeks to optimize a cellular objective, which is formulated as a linear combination of fluxes, $Z = c^T v$. For this problem, the objective is to maximize the rate of biomass production, which corresponds to the flux of reaction $r_{10}$.\n\nThis constitutes a Linear Programming (LP) problem, which can be stated in canonical form as:\n$$\n\\begin{aligned}\n\\text{maximize} \\quad & c^T v \\\\\n\\text{subject to} \\quad & S v = 0 \\\\\n& l \\le v \\le u\n\\end{aligned}\n$$\n\nWe must first construct the components of this LP problem for the given metabolic network.\n\nThe network consists of $m=7$ internal metabolites and $n=11$ reactions. Let us establish a consistent ordering for each.\nMetabolites:\n$0$: $glc_c$ (internal glucose)\n$1$: $ac_c$ (internal acetate)\n$2$: $glyc_c$ (internal glycerol)\n$3$: $o2_c$ (internal oxygen)\n$4$: $co2_c$ (internal carbon dioxide)\n$5$: $C_c$ (carbon precursor pool)\n$6$: $atp_c$ (ATP)\n\nReactions (fluxes $v_j$):\n$v_0$: $r_0: \\emptyset \\rightarrow glc_c$\n$v_1$: $r_1: \\emptyset \\rightarrow ac_c$\n$v_2$: $r_2: \\emptyset \\rightarrow glyc_c$\n$v_3$: $r_3: \\emptyset \\rightarrow o2_c$\n$v_4$: $r_4: co2_c \\rightarrow \\emptyset$\n$v_5$: $r_5: glc_c \\rightarrow 6\\, C_c + 2\\, atp_c$\n$v_6$: $r_6: glyc_c \\rightarrow 3\\, C_c + 1\\, atp_c$\n$v_7$: $r_7: ac_c \\rightarrow 2\\, C_c$\n$v_8$: $r_8: C_c + o2_c \\rightarrow co2_c + 10\\, atp_c$\n$v_9$: $r_9: C_c \\rightarrow co2_c + 2\\, atp_c$\n$v_{10}$: $r_{10}: 5\\, C_c + 20\\, atp_c \\rightarrow \\text{biomass}$\n\nThe stoichiometric matrix $S$ of size $7 \\times 11$ is constructed by populating its entries $S_{ij}$ with the stoichiometric coefficient of metabolite $i$ in reaction $j$. Reactants have negative coefficients and products have positive coefficients.\n\n$$\nS =\n\\begin{pmatrix}\n% v0  v1  v2  v3  v4  v5  v6  v7  v8  v9 v10\n  1 &  0 &  0 &  0 &  0 & -1 &  0 &  0 &  0 &  0 &  0 \\\\  % glc_c\n  0 &  1 &  0 &  0 &  0 &  0 &  0 & -1 &  0 &  0 &  0 \\\\  % ac_c\n  0 &  0 &  1 &  0 &  0 &  0 & -1 &  0 &  0 &  0 &  0 \\\\  % glyc_c\n  0 &  0 &  0 &  1 &  0 &  0 &  0 &  0 & -1 &  0 &  0 \\\\  % o2_c\n  0 &  0 &  0 &  0 & -1 &  0 &  0 &  0 &  1 &  1 &  0 \\\\  % co2_c\n  0 &  0 &  0 &  0 &  0 &  6 &  3 &  2 & -1 & -1 & -5 \\\\  % C_c\n  0 &  0 &  0 &  0 &  0 &  2 &  1 &  0 & 10 &  2 & -20   % atp_c\n\\end{pmatrix}\n$$\n\nThe objective is to maximize $v_{10}$. The objective vector $c$ is therefore a vector of zeros with a $1$ at the position corresponding to $v_{10}$.\n$$ c^T = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1] $$\nSince standard LP solvers often minimize, we will minimize $-c^T v$.\n\nThe flux bounds are defined by the problem statement.\n- $0 \\le v_0 \\le U_{\\mathrm{glc}}$\n- $0 \\le v_1 \\le U_{\\mathrm{ac}}$\n- $0 \\le v_2 \\le U_{\\mathrm{glyc}}$\n- $0 \\le v_3 \\le U_{\\mathrm{O2}}$\n- $0 \\le v_4 \\le 1000$\n- $v_j \\ge 0$ for $j \\in \\{5, 6, 7, 8, 9, 10\\}$. The upper bounds for these internal fluxes are effectively infinite.\n\nThe computational task requires us to process five test cases. For each case, we must determine which single available carbon source (glucose, acetate, or glycerol) yields the highest maximal biomass production rate $v_{10}$. A source is available if its uptake bound $U_s > 0$. The procedure for each test case is as follows:\n\n1. Identify the set of available carbon sources based on their non-zero uptake bounds. The sources are mapped to indices: glucose $\\mapsto 0$, acetate $\\mapsto 1$, glycerol $\\mapsto 2$.\n\n2. For each available carbon source $s$, solve a separate FBA problem:\n   a. Set the upper bound for the import flux of source $s$ (i.e., $v_0$, $v_1$, or $v_2$) to its specified value $U_s$.\n   b. Set the upper bounds for the import fluxes of all other carbon sources to $0$. This ensures only one carbon source is consumed.\n   c. The oxygen uptake bound $v_3$ is set to the value $U_{\\mathrm{O2}}$ given for the test case.\n   d. All other bounds remain as specified.\n   e. Solve the LP to find the maximum possible flux for the biomass reaction, $v_{10}^{(s)}$.\n\n3. Compare the maximum biomass fluxes obtained for each available source. The preferred source is the one yielding the highest $v_{10}^{(s)}$.\n\n4. If two or more sources yield a maximal biomass flux that is equal within a tolerance of $10^{-7}$, the tie is broken by selecting the source with the smallest index ($0 < 1 < 2$).\n\nThis algorithm will be implemented in Python using the `scipy.optimize.linprog` function to solve the LP problems. For each of the five test cases, we will execute this procedure and determine the index of the preferred carbon source. The final output will be a list of these indices.\nThe program will hard-code the stoichiometric matrix, the objective vector, and the parameters for the five test cases. A function will be defined to set up and solve the LP for a given set of flux bounds. The main part of the program will iterate through the test cases, call the solver function for each available substrate, and apply the decision logic to find the optimal substrate for each case. The results will then be compiled and printed in the specified format.", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves a series of Flux Balance Analysis problems to determine the preferred carbon source\n    for a simplified metabolic model under different environmental conditions.\n    \"\"\"\n\n    # Stoichiometric matrix S (7 metabolites x 11 reactions)\n    # Metabolites: glc_c, ac_c, glyc_c, o2_c, co2_c, C_c, atp_c\n    # Reactions: v0-v10\n    S = np.array([\n        # v0  v1  v2  v3  v4  v5  v6  v7  v8  v9 v10\n        [ 1,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0],  # glc_c\n        [ 0,  1,  0,  0,  0,  0,  0, -1,  0,  0,  0],  # ac_c\n        [ 0,  0,  1,  0,  0,  0, -1,  0,  0,  0,  0],  # glyc_c\n        [ 0,  0,  0,  1,  0,  0,  0,  0, -1,  0,  0],  # o2_c\n        [ 0,  0,  0,  0, -1,  0,  0,  0,  1,  1,  0],  # co2_c\n        [ 0,  0,  0,  0,  0,  6,  3,  2, -1, -1, -5],  # C_c\n        [ 0,  0,  0,  0,  0,  2,  1,  0, 10,  2, -20]  # atp_c\n    ], dtype=np.float64)\n\n    # Objective function: maximize v_10 (biomass).\n    # linprog minimizes, so we minimize -v_10.\n    c = np.zeros(11, dtype=np.float64)\n    c[10] = -1.0\n\n    # Steady-state constraint: Sv = 0\n    b_eq = np.zeros(7, dtype=np.float64)\n\n    # Substrate mapping: name -> (index, uptake_reaction_index)\n    substrates = {\n        'glucose': (0, 0),\n        'acetate': (1, 1),\n        'glycerol': (2, 2)\n    }\n\n    # Test cases: (U_glc, U_ac, U_glyc, U_O2)\n    test_cases = [\n        # Case A: abundant oxygen, glucose and acetate available\n        {'U_glc': 10.0, 'U_ac': 10.0, 'U_glyc': 0.0, 'U_O2': 1000.0},\n        # Case B: abundant oxygen, acetate and glycerol available\n        {'U_glc': 0.0, 'U_ac': 10.0, 'U_glyc': 10.0, 'U_O2': 1000.0},\n        # Case C: oxygen-limited, all three available\n        {'U_glc': 10.0, 'U_ac': 10.0, 'U_glyc': 10.0, 'U_O2': 3.0},\n        # Case D: anaerobic, all three available\n        {'U_glc': 10.0, 'U_ac': 10.0, 'U_glyc': 10.0, 'U_O2': 0.0},\n        # Case E: glucose scarce, glycerol abundant, aerobic\n        {'U_glc': 2.0, 'U_ac': 0.0, 'U_glyc': 20.0, 'U_O2': 1000.0}\n    ]\n\n    final_results = []\n    \n    # Process each test case\n    for case in test_cases:\n        uptake_bounds = {\n            'glucose': case['U_glc'],\n            'acetate': case['U_ac'],\n            'glycerol': case['U_glyc']\n        }\n        oxygen_bound = case['U_O2']\n        \n        # Identify available substrates for the current case\n        available_substrates = []\n        for name, u_bound in uptake_bounds.items():\n            if u_bound > 0:\n                available_substrates.append(name)\n        \n        case_results = []\n\n        # Run FBA for each available substrate individually\n        for sub_name in available_substrates:\n            sub_idx, reaction_idx = substrates[sub_name]\n            \n            # Define flux bounds for this specific FBA run\n            bounds = [(0.0, None)] * 11\n            bounds[4] = (0.0, 1000.0)\n            \n            # Set carbon source bounds: only one is allowed to be non-zero\n            for name, (idx, rxn_idx) in substrates.items():\n                if name == sub_name:\n                    bounds[rxn_idx] = (0.0, uptake_bounds[name])\n                else:\n                    bounds[rxn_idx] = (0.0, 0.0)\n\n            # Set oxygen bound\n            bounds[3] = (0.0, oxygen_bound)\n            \n            # Solve the linear programming problem\n            res = linprog(c, A_eq=S, b_eq=b_eq, bounds=bounds, method='highs')\n            \n            max_biomass = 0.0\n            if res.success:\n                max_biomass = -res.fun\n            \n            case_results.append({'biomass': max_biomass, 'index': sub_idx})\n\n        # Determine the preferred substrate based on max biomass and tie-breaking rule\n        if not case_results:\n            # Should not happen with the given test cases, but good practice\n            # If no substrate is available, there's no preferred one.\n            # We can represent this with a placeholder like -1, but the problem\n            # guarantees at least one source.\n            continue\n            \n        max_biomass_val = -1.0\n        for r in case_results:\n            if r['biomass'] > max_biomass_val:\n                max_biomass_val = r['biomass']\n\n        # Find all substrates that achieve the max biomass within tolerance\n        tied_winners = [r for r in case_results if abs(r['biomass'] - max_biomass_val)  1e-7]\n        \n        # Tie-break by choosing the one with the smallest index\n        best_substrate_idx = min(r['index'] for r in tied_winners)\n        final_results.append(best_substrate_idx)\n\n    # Print the final result in the specified format\n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n```", "id": "2390906"}, {"introduction": "One of the most powerful applications of FBA is performing *in silico* experiments to probe a network's structure and function. This practice [@problem_id:2390901] introduces the essential technique of simulating reaction knockouts to identify critical \"choke-point\" reactions, whose absence leads to metabolic collapse and the toxic accumulation of precursors. By systematically deleting reactions and testing for model feasibility, you will learn a fundamental approach used in drug target discovery and metabolic engineering to identify a system's vulnerabilities.", "problem": "You are given a series of steady-state metabolic networks and asked to identify, for a specified precursor metabolite, which reactions are \"choke-point\" consumers whose deletion would force the accumulation of that precursor. Work in the standard Flux Balance Analysis (FBA) setting from first principles.\n\nUse the following fundamental base:\n- Steady-state mass balance is represented by the stoichiometric matrix $S \\in \\mathbb{R}^{m \\times n}$ and the flux vector $v \\in \\mathbb{R}^{n}$ via the linear constraints\n$$\nS\\,v = 0.\n$$\n- Each reaction $j \\in \\{0,1,\\dots,n-1\\}$ has lower and upper flux bounds $l_j \\le v_j \\le u_j$, collected as vectors $l, u \\in \\mathbb{R}^{n}$.\n- To represent the fact that a particular precursor metabolite $m^{\\star}$ is supplied by the environment or an upstream module at a strictly positive rate, a designated \"source reaction\" $s$ is required to satisfy the bound\n$$\nv_s \\ge p_{\\min},\n$$\nfor a given constant $p_{\\min}  0$. All reaction indices are zero-based, i.e., $\\{0,1,\\dots,n-1\\}$.\n\nDefinition of choke-point consumer for $m^{\\star}$ used in this task:\n- A reaction $r$ is a candidate consumer of $m^{\\star}$ if and only if the stoichiometric coefficient $S_{m^{\\star}, r}  0$ and the upper bound $u_r  0$ (so that consumption is directionally and capacity-wise possible).\n- A candidate consumer $r$ is a choke-point for $m^{\\star}$ if the following two conditions hold:\n  1. The baseline model with the enforced production of $m^{\\star}$ at rate at least $p_{\\min}$ is feasible, i.e., there exists $v$ such that $S v = 0$, $l \\le v \\le u$, and $v_s \\ge p_{\\min}$.\n  2. After deleting reaction $r$ by enforcing $v_r = 0$ (i.e., setting $l_r = u_r = 0$) while keeping all other constraints the same, the model becomes infeasible.\nIntuitively, if deletion of $r$ destroys steady-state feasibility under a strictly positive enforced production of $m^{\\star}$, then the network can no longer consume $m^{\\star}$ sufficiently, which would cause its accumulation in any dynamic relaxation.\n\nYour task:\n- For each test case below, determine the sorted list of indices (zero-based) of all choke-point consumers for the specified $m^{\\star}$.\n- If the baseline model (with $v_s \\ge p_{\\min}$) is infeasible for a test case, return the empty list for that case.\n\nTest suite:\nFor each case, you are given the matrix $S$, the bound vectors $l$ and $u$, the index $m^{\\star}$ of the target metabolite row, the index $s$ of the source reaction, and the value $p_{\\min}$. All entries are real numbers. The symbol $\\mathrm{DM}$ denotes a generic drain/export reaction to maintain steady state, modeled as a reaction consuming the indicated metabolite.\n\n- Case A (single consumer must carry all production):\n  - Metabolites ordered as $[M,\\;B]$, reactions ordered as $[R_0,R_1,R_2]$ with $R_0$ an uptake producing $M$, $R_1$ converting $M \\rightarrow B$, and $R_2$ a demand on $B$.\n  - Stoichiometry:\n    $$\n    S \\;=\\; \\begin{bmatrix}\n    +1  -1  0 \\\\\n    0   +1  -1\n    \\end{bmatrix}.\n    $$\n  - Bounds:\n    $$\n    l = \\begin{bmatrix} 1 \\\\ 0 \\\\ 0 \\end{bmatrix},\\quad\n    u = \\begin{bmatrix} 10 \\\\ 10 \\\\ 10 \\end{bmatrix}.\n    $$\n  - Target metabolite index $m^{\\star} = 0$ (row for $M$), source reaction index $s = 0$, and $p_{\\min} = 1$.\n\n- Case B (two parallel consumers, either suffices):\n  - Metabolites ordered as $[M,\\;B_1,\\;B_2]$, reactions ordered as $[R_0,R_1,R_2,R_3,R_4]$ with $R_0$ an uptake producing $M$, $R_1$ converting $M \\rightarrow B_1$, $R_2$ converting $M \\rightarrow B_2$, and $R_3,R_4$ demands on $B_1,B_2$ respectively.\n  - Stoichiometry:\n    $$\n    S \\;=\\; \\begin{bmatrix}\n    +1  -1  -1  0   0 \\\\\n    0   +1  0    -1  0 \\\\\n    0   0   +1   0   -1\n    \\end{bmatrix}.\n    $$\n  - Bounds:\n    $$\n    l = \\begin{bmatrix} 2 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\end{bmatrix},\\quad\n    u = \\begin{bmatrix} 10 \\\\ 10 \\\\ 10 \\\\ 10 \\\\ 10 \\end{bmatrix}.\n    $$\n  - Target metabolite index $m^{\\star} = 0$ (row for $M$), source reaction index $s = 0$, and $p_{\\min} = 2$.\n\n- Case C (single reversible consumer):\n  - Metabolites ordered as $[M,\\;X]$, reactions ordered as $[R_0,R_1,R_2]$ with $R_0$ an uptake producing $M$, $R_1$ reversible interconversion $M \\rightleftharpoons X$, and $R_2$ a demand on $X$.\n  - Stoichiometry:\n    $$\n    S \\;=\\; \\begin{bmatrix}\n    +1  -1  0 \\\\\n    0   +1  -1\n    \\end{bmatrix}.\n    $$\n  - Bounds:\n    $$\n    l = \\begin{bmatrix} 1 \\\\ -10 \\\\ 0 \\end{bmatrix},\\quad\n    u = \\begin{bmatrix} 10 \\\\ 10 \\\\ 10 \\end{bmatrix}.\n    $$\n  - Target metabolite index $m^{\\star} = 0$, source reaction index $s = 0$, and $p_{\\min} = 1$.\n\n- Case D (capacity-limited alternative consumer):\n  - Metabolites ordered as $[M]$, reactions ordered as $[R_0,R_1,R_2]$ with $R_0$ an uptake producing $M$, and $R_1,R_2$ two distinct drains of $M$.\n  - Stoichiometry:\n    $$\n    S \\;=\\; \\begin{bmatrix}\n    +1  -1  -1\n    \\end{bmatrix}.\n    $$\n  - Bounds:\n    $$\n    l = \\begin{bmatrix} 1 \\\\ 0 \\\\ 0 \\end{bmatrix},\\quad\n    u = \\begin{bmatrix} 10 \\\\ 1 \\\\ 0.6 \\end{bmatrix}.\n    $$\n  - Target metabolite index $m^{\\star} = 0$, source reaction index $s = 0$, and $p_{\\min} = 1$.\n\n- Case E (baseline infeasible: no consumer exists):\n  - Metabolites ordered as $[M]$, reactions ordered as $[R_0]$ with $R_0$ an uptake producing $M$.\n  - Stoichiometry:\n    $$\n    S \\;=\\; \\begin{bmatrix}\n    +1\n    \\end{bmatrix}.\n    $$\n  - Bounds:\n    $$\n    l = \\begin{bmatrix} 1 \\end{bmatrix},\\quad\n    u = \\begin{bmatrix} 10 \\end{bmatrix}.\n    $$\n  - Target metabolite index $m^{\\star} = 0$, source reaction index $s = 0$, and $p_{\\min} = 1$.\n\nFinal output format:\n- Your program must output a single line containing a list of results, one per test case, aggregated in order as a comma-separated list enclosed in square brackets.\n- Each result must itself be a list of zero-based reaction indices of choke-point consumers for that test case, in ascending order.\n- The final printed line must therefore look like\n$$\n[\\,[\\dots],\\,[\\dots],\\,[\\dots],\\,[\\dots],\\,[\\dots]\\,]\n$$\nwith no spaces. For example, a valid output could be\n$$\n[[1],[],[1],[1],[]]\n$$\nif those are the results for Cases A through E respectively.", "solution": "We start from the steady-state assumption of Flux Balance Analysis (FBA), which imposes the linear constraints $S v = 0$ with flux bounds $l \\le v \\le u$. For a particular precursor metabolite $m^{\\star}$, the problem asks us to identify reactions whose deletion would force accumulation of $m^{\\star}$. Since FBA does not explicitly model dynamic accumulation (it enforces $S v = 0$), we instead enforce a strictly positive production of $m^{\\star}$ from a designated source reaction $s$ by requiring $v_s \\ge p_{\\min}$ for a given $p_{\\min}  0$. If after deleting a reaction $r$ the model becomes infeasible under these constraints, then it is impossible to maintain steady state with $v_s \\ge p_{\\min}$, which means that in any dynamic relaxation $m^{\\star}$ would accumulate (because the system cannot consume it sufficiently to balance its forced production). This is a standard way to diagnose accumulation risk within the static FBA framework.\n\nWe formalize the choke-point criterion as follows. A reaction $r$ is a candidate consumer if $S_{m^{\\star}, r}  0$ and $u_r  0$, which means the reaction can consume $m^{\\star}$ in the forward direction within its capacity. Then $r$ is a choke-point if:\n1. The baseline feasibility problem has a solution:\n$$\n\\text{find } v \\in \\mathbb{R}^{n} \\text{ such that } S v = 0,\\quad l \\le v \\le u,\\quad v_s \\ge p_{\\min}.\n$$\n2. The modified feasibility problem with $r$ deleted, i.e., with bounds replaced by $l_r = u_r = 0$, has no solution.\n\nThis yields a pure feasibility check. Computationally, this can be implemented as a linear program with a zero objective, i.e., minimize $0$ subject to the constraints above. A modern linear programming solver can determine feasibility for each case.\n\nAlgorithmic design:\n- For each test case, construct the matrix $S$, bounds $l, u$, the target index $m^{\\star}$, source index $s$, and the scalar $p_{\\min}$.\n- Define the baseline bounds by raising the lower bound at index $s$ to at least $p_{\\min}$, i.e., replace $l_s$ by $\\max(l_s, p_{\\min})$. Solve the linear program\n$$\n\\min\\ 0 \\quad \\text{s.t. } S v = 0,\\; l \\le v \\le u.\n$$\nIf infeasible, return the empty list for this case.\n- Otherwise, form the list of candidate consumers $\\mathcal{C} = \\{ r \\in \\{0,\\dots,n-1\\} \\mid S_{m^{\\star}, r}  0 \\text{ and } u_r  0 \\}$.\n- For each $r \\in \\mathcal{C}$, construct modified bounds with $l_r = u_r = 0$ and resolve the feasibility problem. If infeasible, add $r$ to the choke-point set.\n- Return the sorted list of choke-point indices.\n\nWhy this is correct under the stated definition:\n- If the baseline is infeasible, then the network cannot maintain steady state with enforced production, regardless of deletions; we return the empty list as specified.\n- If deletion of $r$ makes the system infeasible, then with $v_s \\ge p_{\\min}$ enforced, there is no way to satisfy $S v = 0$; $m^{\\star}$ cannot be consumed sufficiently by the remaining network. Therefore, $m^{\\star}$ would accumulate in any dynamic interpretation, and $r$ is a choke-point.\n- Conversely, if deletion of $r$ leaves the system feasible, then there exists a steady-state flux vector that balances the enforced production; hence no forced accumulation.\n\nNow we analyze the given cases.\n\nCase A:\n- $S$ and bounds allow $v_0 \\ge 1$, $v_1$ converts $M$ to $B$, and $v_2$ drains $B$. Mass balance for $M$ requires $v_0 - v_1 = 0$, so $v_1 = v_0 \\ge 1$ is feasible within $u_1 = 10$. The only consumer candidate for $M$ is $R_1$ (index $1$). Deleting $R_1$ enforces $v_1 = 0$, which makes $v_0 - v_1 = v_0 \\ge 1$ impossible to balance. Thus the modified system is infeasible. The choke-point set is $[1]$.\n\nCase B:\n- Baseline requires $v_0 \\ge 2$ and $v_1 + v_2 = v_0$, with $v_1, v_2 \\le 10$, and drains $v_3 = v_1$, $v_4 = v_2$. This is feasible. Consumers of $M$ are $R_1$ (index $1$) and $R_2$ (index $2$). Deleting either one still allows the other to carry the full $v_0 \\ge 2$ within capacity, so feasibility remains. The choke-point set is $[]$.\n\nCase C:\n- Baseline: $v_0 \\ge 1$, mass balance for $M$ gives $v_1 = v_0$, for $X$ gives $v_2 = v_1$, which is feasible within $v_1 \\in [-10,10]$ and $v_2 \\in [0,10]$. The only consumer of $M$ is $R_1$ (index $1$). Deleting $R_1$ forces $v_1 = 0$ and thus $v_0 = 0$, contradicting $v_0 \\ge 1$, causing infeasibility. The choke-point set is $[1]$.\n\nCase D:\n- Baseline: $v_0 \\ge 1$ with $v_1 + v_2 = v_0$, $0 \\le v_1 \\le 1$, $0 \\le v_2 \\le 0.6$. Feasible choices exist, e.g., $v_1 = 0.4$, $v_2 = 0.6$, $v_0 = 1$. Consumers are $R_1$ (index $1$) and $R_2$ (index $2$). Deleting $R_1$ leaves $v_2 \\le 0.6$ unable to balance $v_0 \\ge 1$, rendering infeasibility; deleting $R_2$ still permits $v_1 = 1$ to balance. Thus the choke-point set is $[1]$.\n\nCase E:\n- Baseline: $v_0 \\ge 1$ with no consumers, so $S v = 0$ cannot be satisfied. The baseline is infeasible by definition, so the result is the empty list $[]$.\n\nTherefore, the aggregated results for Cases A through E are\n$$\n[[1],[],[1],[1],[]].\n$$\n\nThe program implements the feasibility checks via linear programming with a zero objective and prints the final aggregated list in the required single-line, no-spaces format.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport json\nfrom scipy.optimize import linprog\n\ndef is_feasible(S, l_bounds, u_bounds):\n    \"\"\"\n    Check feasibility of S v = 0 with bounds l = v = u by minimizing a zero objective.\n    Returns True if feasible, False otherwise.\n    \"\"\"\n    m, n = S.shape\n    c = np.zeros(n)\n    A_eq = S\n    b_eq = np.zeros(m)\n    bounds = list(zip(l_bounds, u_bounds))\n    res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method=\"highs\")\n    return res.status == 0\n\ndef find_choke_points(S, l, u, m_star, s_idx, p_min):\n    \"\"\"\n    Identify choke-point consumers for metabolite m_star.\n    - Enforce baseline feasibility with v_s >= p_min (raise l_s if needed).\n    - Candidate consumers r satisfy S[m_star, r]  0 and u[r] > 0.\n    - r is a choke-point if deleting r (setting its bounds to 0) makes the system infeasible.\n    Returns sorted list of reaction indices.\n    \"\"\"\n    S = np.array(S, dtype=float)\n    l = np.array(l, dtype=float)\n    u = np.array(u, dtype=float)\n\n    # Enforce the minimal production bound at the source reaction\n    l_base = l.copy()\n    l_base[s_idx] = max(l_base[s_idx], p_min)\n\n    # Baseline feasibility check\n    if not is_feasible(S, l_base, u):\n        return []\n\n    # Identify candidate consumers for m_star\n    consumers = [j for j in range(S.shape[1]) if S[m_star, j]  0 and u[j] > 0]\n\n    choke = []\n    for r in consumers:\n        l_mod = l_base.copy()\n        u_mod = u.copy()\n        # Delete reaction r\n        l_mod[r] = 0.0\n        u_mod[r] = 0.0\n        if not is_feasible(S, l_mod, u_mod):\n            choke.append(r)\n\n    return sorted(choke)\n\ndef solve():\n    # Define the test cases from the problem statement.\n\n    # Case A\n    S_A = np.array([\n        [ +1, -1,  0],\n        [  0, +1, -1],\n    ], dtype=float)\n    l_A = np.array([1, 0, 0], dtype=float)\n    u_A = np.array([10, 10, 10], dtype=float)\n    m_star_A = 0\n    s_A = 0\n    pmin_A = 1\n\n    # Case B\n    S_B = np.array([\n        [ +1, -1, -1,  0,  0],\n        [  0, +1,  0, -1,  0],\n        [  0,  0, +1,  0, -1],\n    ], dtype=float)\n    l_B = np.array([2, 0, 0, 0, 0], dtype=float)\n    u_B = np.array([10,10,10,10,10], dtype=float)\n    m_star_B = 0\n    s_B = 0\n    pmin_B = 2\n\n    # Case C\n    S_C = np.array([\n        [ +1, -1,  0],\n        [  0, +1, -1],\n    ], dtype=float)\n    l_C = np.array([1, -10, 0], dtype=float)\n    u_C = np.array([10, 10, 10], dtype=float)\n    m_star_C = 0\n    s_C = 0\n    pmin_C = 1\n\n    # Case D\n    S_D = np.array([\n        [ +1, -1, -1],\n    ], dtype=float)\n    l_D = np.array([1, 0, 0], dtype=float)\n    u_D = np.array([10, 1, 0.6], dtype=float)\n    m_star_D = 0\n    s_D = 0\n    pmin_D = 1\n\n    # Case E\n    S_E = np.array([\n        [ +1 ],\n    ], dtype=float)\n    l_E = np.array([1], dtype=float)\n    u_E = np.array([10], dtype=float)\n    m_star_E = 0\n    s_E = 0\n    pmin_E = 1\n\n    test_cases = [\n        (S_A, l_A, u_A, m_star_A, s_A, pmin_A),\n        (S_B, l_B, u_B, m_star_B, s_B, pmin_B),\n        (S_C, l_C, u_C, m_star_C, s_C, pmin_C),\n        (S_D, l_D, u_D, m_star_D, s_D, pmin_D),\n        (S_E, l_E, u_E, m_star_E, s_E, pmin_E),\n    ]\n\n    results = []\n    for S, l, u, m_star, s_idx, p_min in test_cases:\n        choke_list = find_choke_points(S, l, u, m_star, s_idx, p_min)\n        results.append(choke_list)\n\n    # Final print statement in the exact required format: no spaces.\n    print(json.dumps(results, separators=(',',':')))\n\nsolve()\n```", "id": "2390901"}]}