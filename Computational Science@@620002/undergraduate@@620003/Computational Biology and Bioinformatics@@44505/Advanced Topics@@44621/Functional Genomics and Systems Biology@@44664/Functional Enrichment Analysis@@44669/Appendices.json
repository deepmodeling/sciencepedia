{"hands_on_practices": [{"introduction": "At the heart of functional enrichment is a simple question: is the number of genes from a given list that fall into a specific biological pathway more than what one would expect by chance? The hypergeometric test provides the exact probability for this scenario, modeling the process as sampling without replacement. This fundamental exercise allows you to calculate this critical $p$-value from first principles and contrast it with an empirical estimate from a permutation test, building a solid intuition for the statistical foundations of Over-Representation Analysis (ORA). [@problem_id:2392301]", "problem": "In a functional enrichment analysis, consider a background of $N=100$ genes, a biological pathway containing $n=10$ genes, and a query gene list of size $k=5$. In an experiment, the observed overlap between the query gene list and the pathway is $x=3$ genes.\n\nAssume the null hypothesis that the query gene list is formed by sampling $k$ genes uniformly at random without replacement from the $N$ genes.\n\nUsing first principles of combinatorial counting, compute the one-sided hypergeometric $p$-value defined as the probability of observing an overlap of at least $x$ genes under the null hypothesis. Separately, a permutation-based test is conducted by generating $m=10{,}000$ independent random gene lists of size $k$ from the same background; among these, $h=61$ lists have an overlap with the pathway that is at least $x$.\n\nCompute the absolute difference between the hypergeometric $p$-value and the permutation-based $p$-value estimate. Express your final answer as a decimal. Round your answer to $4$ significant figures.", "solution": "The problem is subjected to rigorous validation before any attempt at a solution is made.\n\nStep 1: Extract Givens\nThe problem provides the following parameters:\n- Total number of genes in the background: $N=100$.\n- Number of genes in the biological pathway (successes in population): $n=10$.\n- Size of the query gene list (sample size): $k=5$.\n- Observed overlap (successes in sample): $x=3$.\n- Null hypothesis: The query gene list is a simple random sample of size $k$ drawn without replacement from the background of $N$ genes.\n- Definition of the one-sided hypergeometric $p$-value: The probability of observing an overlap of *at least* $x$ genes.\n- Number of permutations in a permutation test: $m=10,000$.\n- Number of permuted lists with overlap of at least $x$: $h=61$.\n\nStep 2: Validate Using Extracted Givens\nThe problem is evaluated against the required criteria.\n- **Scientifically Grounded**: The problem describes a canonical scenario in bioinformatics for functional enrichment analysis. The use of the hypergeometric distribution to model sampling without replacement and the concept of a permutation test to empirically estimate significance are fundamental and standard methods in this field. The setup is scientifically and mathematically sound.\n- **Well-Posed**: All necessary parameters ($N$, $n$, $k$, $x$, $m$, $h$) for the required calculations are explicitly provided. The questions posed—calculating two types of $p$-values and their difference—are unambiguous and lead to a single, verifiable numerical solution.\n- **Objective**: The problem is stated in precise, quantitative terms, free from any subjective or biased language.\n\nThe problem does not exhibit any flaws such as scientific unsoundness, incompleteness, contradiction, or ambiguity. The values provided are realistic for a model problem.\n\nStep 3: Verdict and Action\nThe problem is deemed **valid**. A complete solution will now be provided.\n\nThe first task is to compute the theoretical one-sided hypergeometric $p$-value using first principles. Under the null hypothesis, the number of genes, $X$, from the pathway found in a randomly selected query list follows a hypergeometric distribution. The total number of ways to choose $k$ genes from a background of $N$ is given by the binomial coefficient $\\binom{N}{k}$. The number of ways to choose $i$ genes from the pathway of size $n$ and $k-i$ genes from the remaining $N-n$ genes is $\\binom{n}{i}\\binom{N-n}{k-i}$.\n\nThe probability mass function for observing exactly $i$ overlapping genes is:\n$$ P(X=i) = \\frac{\\binom{n}{i} \\binom{N-n}{k-i}}{\\binom{N}{k}} $$\nThe problem asks for the one-sided $p$-value, $p_{\\text{hyper}}$, which is the probability of observing an overlap of at least $x=3$. Since the query list size is $k=5$, the maximum possible overlap is $\\min(n, k) = \\min(10, 5) = 5$.\nTherefore, we must calculate the cumulative probability $P(X \\ge 3)$.\n$$ p_{\\text{hyper}} = P(X \\ge 3) = P(X=3) + P(X=4) + P(X=5) = \\sum_{i=3}^{5} \\frac{\\binom{10}{i} \\binom{100-10}{5-i}}{\\binom{100}{5}} $$\nWe calculate the components of this sum.\nThe denominator is the total number of possible query gene lists of size $5$:\n$$ \\binom{N}{k} = \\binom{100}{5} = \\frac{100 \\times 99 \\times 98 \\times 97 \\times 96}{5 \\times 4 \\times 3 \\times 2 \\times 1} = 75,287,520 $$\nThe numerators for $i=3, 4, 5$ are:\n- For $i=3$: The number of ways to choose $3$ genes from the pathway and $2$ from outside the pathway.\n$$ \\binom{10}{3} \\binom{90}{2} = \\left(\\frac{10 \\times 9 \\times 8}{3 \\times 2 \\times 1}\\right) \\left(\\frac{90 \\times 89}{2 \\times 1}\\right) = (120)(4005) = 480,600 $$\n- For $i=4$: The number of ways to choose $4$ genes from the pathway and $1$ from outside.\n$$ \\binom{10}{4} \\binom{90}{1} = \\left(\\frac{10 \\times 9 \\times 8 \\times 7}{4 \\times 3 \\times 2 \\times 1}\\right) (90) = (210)(90) = 18,900 $$\n- For $i=5$: The number of ways to choose $5$ genes from the pathway and $0$ from outside.\n$$ \\binom{10}{5} \\binom{90}{0} = \\left(\\frac{10 \\times 9 \\times 8 \\times 7 \\times 6}{5 \\times 4 \\times 3 \\times 2 \\times 1}\\right) (1) = (252)(1) = 252 $$\nThe total number of favorable outcomes (overlap $\\ge 3$) is the sum of these numerators:\n$$ 480,600 + 18,900 + 252 = 499,752 $$\nThe hypergeometric $p$-value is the ratio of favorable outcomes to the total number of outcomes:\n$$ p_{\\text{hyper}} = \\frac{499,752}{75,287,520} \\approx 0.006637653 $$\nThe second task is to compute the permutation-based $p$-value estimate, $p_{\\text{perm}}$. This is an empirical estimate derived from simulations. It is given as the ratio of the number of permutations, $h$, that meet or exceed the observed statistic to the total number of permutations, $m$.\n$$ p_{\\text{perm}} = \\frac{h}{m} = \\frac{61}{10,000} = 0.0061 $$\nFinally, we compute the absolute difference between the theoretical hypergeometric $p$-value and the permutation-based estimate.\n$$ \\text{Difference} = | p_{\\text{hyper}} - p_{\\text{perm}} | = | 0.006637653... - 0.0061 | = 0.000537653... $$\nThe problem requires this result to be rounded to $4$ significant figures. The first significant figure is $5$, followed by $3$, $7$, and $6$. The subsequent digit is $5$, so we round up the last significant digit.\n$$ \\text{Difference} \\approx 0.0005377 $$", "answer": "$$\\boxed{0.0005377}$$", "id": "2392301"}, {"introduction": "The statistical significance of an enrichment analysis can be dramatically altered by the choice of the background or \"universe\" gene set. A common pitfall is to use a default, overly broad universe, which can obscure true signals or generate spurious ones. This practical coding exercise tasks you with quantifying the impact of this choice, demonstrating how defining a context-specific background (e.g., only genes expressed in the relevant biological system) is a critical step for obtaining meaningful results. [@problem_id:2392318]", "problem": "You are given a framework to quantify how using a mis-specified \"universe\" of genes alters enrichment significance in a one-sided over-representation analysis. Consider finite sets of genes where a \"universe\" is a set of genes from which a selection is made without replacement, a \"term\" is a subset of the universe that defines success states, and a \"selected set\" is the observed subset of genes of interest. For a given configuration, let $N$ be the size of the correct universe, $K$ be the number of universe genes annotated to the term, $n$ be the number of selected genes that belong to the universe, and $k$ be the number of selected genes that are annotated to the term. Define the $p$-value for enrichment as the probability, under random sampling without replacement of $n$ genes from $N$ with $K$ successes available, of observing at least $k$ successes. Formally, for given $N$, $K$, $n$, and $k$, the enrichment $p$-value is\n$$\np_{\\text{true}}(N,K,n,k) \\equiv \\sum_{i=k}^{\\min(n,K)} \\frac{\\binom{K}{i}\\binom{N-K}{n-i}}{\\binom{N}{n}}.\n$$\nNow suppose a mis-specified \"expressed\" universe is used that only includes genes deemed expressed. Let $N'$ be the size of this mis-specified universe, $K'$ be the number of genes annotated to the term within this mis-specified universe, $n'$ be the number of selected genes within this mis-specified universe, and $k'$ be the number of selected genes annotated to the term within this mis-specified universe. The corresponding enrichment $p$-value is\n$$\np_{\\text{mis}}(N',K',n',k') \\equiv \\sum_{i=k'}^{\\min(n',K')} \\frac{\\binom{K'}{i}\\binom{N'-K'}{n'-i}}{\\binom{N'}{n'}}.\n$$\nFor each test case below, compute the base-$10$ logarithm of the ratio of these $p$-values,\n$$\nr \\equiv \\log_{10}\\!\\left(\\frac{p_{\\text{mis}}(N',K',n',k')}{p_{\\text{true}}(N,K,n,k)}\\right).\n$$\nPositive $r$ indicates that the mis-specified universe yields a larger $p$-value (less significant), negative $r$ indicates a smaller $p$-value (more significant), and $r=0$ indicates no change. Return each $r$ rounded to $6$ decimal places as a decimal number.\n\nTest suite of parameter values:\n- Case A: $N=20000$, $K=500$, $n=200$, $k=12$; $N'=12000$, $K'=320$, $n'=180$, $k'=10$.\n- Case B: $N=15000$, $K=600$, $n=100$, $k=0$; $N'=9000$, $K'=400$, $n'=80$, $k'=0$.\n- Case C: $N=18000$, $K=150$, $n=40$, $k=30$; $N'=11000$, $K'=120$, $n'=35$, $k'=28$.\n- Case D: $N=25000$, $K=60$, $n=20$, $k=20$; $N'=10000$, $K'=30$, $n'=12$, $k'=12$.\n- Case E: $N=12000$, $K=400$, $n=150$, $k=8$; $N'=12000$, $K'=400$, $n'=150$, $k'=8$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the above cases, with each value rounded to $6$ decimal places (for example, $[x_A,x_B,x_C,x_D,x_E]$ where each $x_\\cdot$ is a decimal number).", "solution": "The problem statement has been subjected to validation and is found to be valid. It is scientifically grounded, well-posed, and objective. The problem describes a standard procedure in computational biology—over-representation analysis—and correctly formulates it as a hypergeometric test. The core of the task is to quantify the change in statistical significance when the background set of genes (the \"universe\") is altered, a known and important issue in bioinformatics. All provided parameters are consistent and sufficient for a unique solution. We therefore proceed to derive the computational solution.\n\nThe fundamental principle is the hypergeometric probability distribution. This distribution models sampling without replacement. Given a population of size $N$ containing $K$ items of interest (\"successes\"), the probability of drawing a sample of size $n$ that contains exactly $i$ successes is given by the probability mass function (PMF):\n$$\nP(X=i) = \\frac{\\binom{K}{i}\\binom{N-K}{n-i}}{\\binom{N}{n}}\n$$\nwhere $X$ is the random variable representing the count of successes in the sample.\n\nThe problem defines the enrichment $p$-value as the probability of observing at least $k$ successes. This corresponds to the tail probability of the distribution, also known as the survival function (SF). It is calculated by summing the probabilities of observing $k, k+1, \\dots, \\min(n,K)$ successes:\n$$\np(N,K,n,k) = P(X \\ge k) = \\sum_{i=k}^{\\min(n,K)} P(X=i)\n$$\nThis is the value defined as $p_{\\text{true}}$ and $p_{\\text{mis}}$ for the \"true\" and \"mis-specified\" parameter sets, respectively.\n\nDirect computation of the binomial coefficients, $\\binom{a}{b}$, is numerically unstable and computationally infeasible for the large numbers involved (e.g., $N=20000$). The correct computational approach is to use a library function that implements the hypergeometric distribution's properties using log-gamma functions for stability. The survival function, $P(X \\ge k)$, is equivalent to $1 - P(X \\le k-1)$, which is $SF(k-1)$. Most scientific computing libraries provide this function. We will use `scipy.stats.hypergeom.sf` from the `scipy` library. The parameters for this function are: the quantile $k-1$, the population size $M$ (our $N$), the total number of successes in the population $n$ (our $K$), and the sample size $N$ (our $n$).\n\nThe algorithm is as follows:\n1.  For each test case, we are given a \"true\" parameter set $(N, K, n, k)$ and a \"mis-specified\" set $(N', K', n', k')$.\n2.  The $p$-value for the true case, $p_{\\text{true}}$, is calculated using the hypergeometric survival function with parameters corresponding to the true universe: `hypergeom.sf(k-1, M=N, n=K, N=n)`.\n3.  Similarly, the $p$-value for the mis-specified case, $p_{\\text{mis}}$, is calculated using its corresponding parameters: `hypergeom.sf(k'-1, M=N', n=K', N=n')`.\n4.  The objective is to compute the quantity $r \\equiv \\log_{10}\\!\\left(\\frac{p_{\\text{mis}}}{p_{\\text{true}}}\\right)$. This is computed as $\\log_{10}(p_{\\text{mis}}) - \\log_{10}(p_{\\text{true}})$ to maintain numerical precision.\n5.  Two special cases are noteworthy. First, for Case B, where $k=0$ and $k'=0$, the $p$-value is the sum over all possible outcomes, which must be $1$. Thus, $p_{\\text{true}}=1$ and $p_{\\text{mis}}=1$, leading to $r=0$. The survival function `sf(k-1)` correctly handles this, as for $k=0$, it evaluates `sf(-1)`, which is defined as $1$.\n6.  Second, for Case E, the \"true\" and \"mis-specified\" parameters are identical. Consequently, $p_{\\text{true}} = p_{\\text{mis}}$, the ratio is $1$, and $r = \\log_{10}(1) = 0$. This serves as a trivial check on the implementation.\n7.  The final value of $r$ for each case is rounded to $6$ decimal places and presented in the required list format.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import hypergeom\n\ndef solve():\n    \"\"\"\n    Computes the log-ratio of p-values from a mis-specified universe\n    in a hypergeometric test for over-representation analysis.\n    \"\"\"\n\n    # Test cases are defined as tuples of:\n    # (N, K, n, k, N', K', n', k')\n    test_cases = [\n        # Case A\n        (20000, 500, 200, 12, 12000, 320, 180, 10),\n        # Case B\n        (15000, 600, 100, 0, 9000, 400, 80, 0),\n        # Case C\n        (18000, 150, 40, 30, 11000, 120, 35, 28),\n        # Case D\n        (25000, 60, 20, 20, 10000, 30, 12, 12),\n        # Case E\n        (12000, 400, 150, 8, 12000, 400, 150, 8),\n    ]\n\n    def calculate_p_value(N, K, n, k):\n        \"\"\"\n        Calculates the p-value for over-representation using the\n        hypergeometric survival function.\n\n        Args:\n            N (int): Population size (universe).\n            K (int): Number of successes in population (term size).\n            n (int): Sample size (selected set size).\n            k (int): Number of successes in sample.\n\n        Returns:\n            float: The p-value, P(X >= k).\n        \"\"\"\n        # The probability P(X >= k) is calculated by the survival function (sf)\n        # evaluated at k-1.\n        # Parameters for scipy.stats.hypergeom:\n        # M: The total number of items (our N, universe size).\n        # n: The total number of type I items (our K, term size).\n        # N: The number of items drawn (our n, selected set size).\n        return hypergeom.sf(k - 1, M=N, n=K, N=n)\n\n    results = []\n    for case in test_cases:\n        N, K, n, k, N_prime, K_prime, n_prime, k_prime = case\n\n        # Calculate p-value for the correct universe\n        p_true = calculate_p_value(N, K, n, k)\n\n        # Calculate p-value for the mis-specified universe\n        p_mis = calculate_p_value(N_prime, K_prime, n_prime, k_prime)\n        \n        # Guard against zero p-values to avoid issues with log.\n        # Based on problem validation, p_true is non-zero for all test cases.\n        if p_true == 0.0 or p_mis == 0.0:\n            if p_true == p_mis: # Both are 0\n                r = 0.0 # Define log(0/0) as 0, indicating no relative change\n            elif p_mis == 0.0:\n                 r = -np.inf # Transition to zero p-value\n            else: # p_true is 0, p_mis is not\n                 r = np.inf # Transition from impossible to possible\n        else:\n            # Compute the base-10 logarithm of the ratio\n            r = np.log10(p_mis / p_true)\n\n        results.append(r)\n\n    # Format output as a list of strings, with each number rounded to 6 decimal places.\n    # The f-string formatting handles rounding as required.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2392318"}, {"introduction": "Moving beyond simple over-representation, we explore Gene Set Enrichment Analysis (GSEA), a powerful method that uses ranked gene lists to detect coordinated changes. However, no algorithm is a magic bullet, and understanding its mechanics is key to correctly interpreting results. This conceptual problem challenges you to predict GSEA's behavior in a common biological scenario where a pathway is regulated in two directions, revealing a key limitation of the standard algorithm and underscoring the importance of choosing the right analytical strategy. [@problem_id:2392269]", "problem": "A researcher applies GSEA to a ranked list of $N$ genes, where each gene $i$ has a signed ranking metric $r_i$ that reflects the strength and direction of association with a phenotype. Consider a single gene set $S$ of size $k$ that represents a homeostatic pathway and is expected to contain two biologically coherent subsets: $S_{\\text{up}}$ genes with large positive $r_i$ (up-regulated) near the top of the ranking, and $S_{\\text{down}}$ genes with large negative $r_i$ (down-regulated) near the bottom of the ranking, with $|S_{\\text{up}}| = k_u$, $|S_{\\text{down}}| = k_d$, and $k_u + k_d = k$. In standard Gene Set Enrichment Analysis (GSEA), the running-sum statistic increases when encountering members of $S$ (with hit weights normalized to sum to $1$ across all $k$ members of $S$) and decreases when encountering genes not in $S$ (with miss penalties normalized to sum to $1$ across the $N - k$ non-members). The enrichment score is the maximum deviation of this running-sum from $0$, with the sign indicating whether enrichment is at the top or bottom of the ranked list, and significance is assessed by phenotype-label or gene-label permutations to obtain a $p$-value and a False Discovery Rate (FDR).\n\nWhich statement best describes the expected behavior when testing $S$ as a single set in this scenario?\n\nA. The absolute enrichment score tends to be attenuated because the hit weight is split between $S_{\\text{up}}$ and $S_{\\text{down}}$ at opposite ends of the ranking, reducing the maximum deviation of the running-sum; consequently, the $p$-value is typically larger (lower power), and a common remedy is to split $S$ into two direction-specific sets or perform direction-specific tests.\n\nB. The algorithm computes and reports two independent enrichment scores for $S$, one positive and one negative, and their normalized scores are summed to yield significance for $S$.\n\nC. The enrichment score magnitude is typically increased because contributions from both $S_{\\text{up}}$ and $S_{\\text{down}}$ add in the same signed running-sum, leading to smaller $p$-values even when effects oppose in direction.\n\nD. Because the method uses only gene ranks and ignores the signs of $r_i$, the presence of $S_{\\text{up}}$ and $S_{\\text{down}}$ does not affect the enrichment score magnitude; significance depends only on whether members of $S$ lie near either end of the ranked list, not on direction.", "solution": "The problem will first be subjected to a rigorous validation process.\n\n### Step 1: Extract Givens\n- Total number of genes in the ranked list: $N$.\n- Each gene $i$ has a signed ranking metric $r_i$. The list is ranked by $r_i$.\n- A gene set $S$ of size $k$.\n- The set $S$ is composed of two subsets:\n    - $S_{\\text{up}}$: genes with large positive $r_i$ (at the top of the ranked list). The size is $|S_{\\text{up}}| = k_u$.\n    - $S_{\\text{down}}$: genes with large negative $r_i$ (at the bottom of the ranked list). The size is $|S_{\\text{down}}| = k_d$.\n- The total size of the set is $k = k_u + k_d$.\n- The Gene Set Enrichment Analysis (GSEA) running-sum statistic is defined as follows:\n    - It increases when encountering a member of $S$ (a \"hit\"). Hit weights are normalized to sum to $1$ across all $k$ members.\n    - It decreases when encountering a gene not in $S$ (a \"miss\"). Miss penalties are normalized to sum to $1$ across the $N - k$ non-members.\n- The Enrichment Score ($ES$) is the maximum deviation of the running-sum from $0$.\n- The sign of the $ES$ indicates enrichment at the top (positive) or bottom (negative) of the list.\n- Significance ($p$-value, FDR) is determined by permutation testing.\n- The question asks for the expected behavior when testing $S$ as a single set in this scenario.\n\n### Step 2: Validate Using Extracted Givens\nThe problem statement is scrutinized for its scientific and logical integrity.\n- **Scientifically Grounded**: The description of the GSEA algorithm is a correct, albeit simplified, representation of the standard method published by Subramanian et al. (2005). The scenario of a gene set containing both up-regulated and down-regulated genes is a common and realistic occurrence in biological systems, particularly in complex pathways involving both activation and feedback inhibition.\n- **Well-Posed**: The problem is well-posed. It describes a specific initial condition (a gene set with bimodal enrichment) and asks for the resulting behavior of a well-defined algorithm (GSEA). The question requests a qualitative but definite conclusion.\n- **Objective**: The language used is precise and technical, free from subjectivity or ambiguity. Terms such as \"running-sum\", \"enrichment score\", and \"ranked list\" have specific meanings in the context of bioinformatics.\n- **Completeness and Consistency**: The problem provides sufficient information to deduce the behavior of the GSEA running-sum. The definitions of hits, misses, and the structure of gene set $S$ are clear and consistent.\n- **Realism**: The scenario is highly realistic. Many signaling pathways are not monolithically up- or down-regulated, but instead show a complex perturbation pattern. Analyzing such pathways is a standard challenge in functional genomics.\n\n### Step 3: Verdict and Action\nThe problem statement is valid. It is scientifically sound, well-posed, and based on realistic assumptions in the field of computational biology. I will proceed with a full derivation and analysis.\n\n### Derivation of the Correct Answer\nThe core of GSEA is the calculation of a running-sum enrichment score, let us denote it $ES_{\\text{run}}$. We walk down the ranked list of $N$ genes, from $i=1$ to $N$. The list is ordered by the metric $r_i$ from the largest positive value to the largest negative value.\n\nAccording to the problem description, the increment for a \"hit\" (gene in $S$) is $1/k$, and the decrement for a \"miss\" (gene not in $S$) is $1/(N-k)$. The running sum at position $j$, $ES_{\\text{run}}(j)$, is given by:\n$$ES_{\\text{run}}(j) = \\sum_{i=1}^{j} \\left( \\mathbb{I}(g_i \\in S) \\cdot \\frac{1}{k} - \\mathbb{I}(g_i \\notin S) \\cdot \\frac{1}{N-k} \\right)$$\nwhere $\\mathbb{I}(\\cdot)$ is the indicator function. The final Enrichment Score, $ES$, is the maximum absolute deviation of $ES_{\\text{run}}(j)$ from $0$ over all $j$.\n$$ES = \\text{signed_value_of} \\left( \\max_{j} |ES_{\\text{run}}(j)| \\right)$$\n\nLet us trace the behavior of $ES_{\\text{run}}(j)$ in the described scenario:\n1.  **Top of the list**: Here we find the $k_u$ genes belonging to $S_{\\text{up}}$. As we encounter these genes, the $ES_{\\text{run}}$ value increases. These frequent \"hits\" cause the sum to climb, forming a positive peak. Let us call this peak $P_{\\text{up}}$. The magnitude of this peak depends on the concentration of the $k_u$ genes at the top of the list and the step size for each hit, which is $1/k = 1/(k_u + k_d)$.\n\n2.  **Middle of the list**: This region contains genes that are neither strongly up- nor down-regulated. By assumption, these genes are not in $S$. Therefore, we encounter a long sequence of \"misses\". With each miss, the $ES_{\\text{run}}$ value decreases by $1/(N-k)$. The running sum will drop from its positive peak, $P_{\\text{up}}$, and trend downwards, likely crossing $0$.\n\n3.  **Bottom of the list**: Here we find the $k_d$ genes belonging to $S_{\\text{down}}$. These genes are also members of the set $S$. Therefore, when we encounter them, they are treated as \"hits\", and the $ES_{\\text{run}}$ *increases* by $1/k$ for each one. This counteracts the decreasing trend caused by misses. Instead of continuing to decrease to a large negative value, the running sum is pulled back up towards $0$. The sum must return to exactly $0$ at position $N$, since $k \\cdot (1/k) - (N-k) \\cdot (1/(N-k)) = 1-1=0$.\n\nThe consequence of this behavior is twofold:\n- The positive peak, $P_{\\text{up}}$, is attenuated. If we were testing only the set $S_{\\text{up}}$ of size $k_u$, the contribution of each hit would be $1/k_u$. Since we are testing $S$ of size $k=k_u+k_d$, the contribution of each hit is only $1/(k_u+k_d)$. Since $k_u  k_u+k_d$, the step size is smaller, and the resulting peak is lower. The \"hit budget\" is diluted by including the $S_{\\text{down}}$ genes.\n- A significant negative peak is never formed. The presence of $S_{\\text{down}}$ hits at the bottom of the list prevents the running sum from reaching a large negative deviation.\n\nThe final $ES$ is the maximum absolute deviation from $0$. In this case, it will be the value of the attenuated positive peak, $P_{\\text{up}}$. A smaller $ES$ is less likely to be deemed statistically significant when compared to the null distribution of scores generated from permutations, resulting in a larger $p$-value and reduced statistical power. The standard and logical remedy for this is to split the biologically bi-directional set $S$ into two directionally coherent sets, $S_{\\text{up}}$ and $S_{\\text{down}}$, and test them independently.\n\n### Option-by-Option Analysis\n\n**A. The absolute enrichment score tends to be attenuated because the hit weight is split between $S_{\\text{up}}$ and $S_{\\text{down}}$ at opposite ends of the ranking, reducing the maximum deviation of the running-sum; consequently, the $p$-value is typically larger (lower power), and a common remedy is to split $S$ into two direction-specific sets or perform direction-specific tests.**\nThis statement is a precise and accurate description of the phenomenon derived above. The dilution of hit weights attenuates the positive enrichment signal from $S_{\\text{up}}$, while the presence of $S_{\\text{down}}$ hits at the bottom of the list cancels out any potential negative enrichment signal. This leads to a smaller overall $|ES|$, lower power, and a higher $p$-value. Splitting the set is the correct and common solution.\n**Verdict: Correct.**\n\n**B. The algorithm computes and reports two independent enrichment scores for $S$, one positive and one negative, and their normalized scores are summed to yield significance for $S$.**\nThis is factually incorrect. Standard GSEA, as described in the problem and in its original formulation, calculates a single running-sum path for a given gene set and derives a single primary enrichment score ($ES$) from it, which corresponds to the maximum deviation (positive or negative) from zero. It does not compute two independent scores and sum them. This describes a different, non-standard analytical approach.\n**Verdict: Incorrect.**\n\n**C. The enrichment score magnitude is typically increased because contributions from both $S_{\\text{up}}$ and $S_{\\text{down}}$ add in the same signed running-sum, leading to smaller $p$-values even when effects oppose in direction.**\nThis reflects a fundamental misunderstanding of the running-sum dynamic. While it is true that all hits contribute a positive increment to the running sum, their positions at opposite ends of the ranked list cause a cancellation effect, not an additive one. The $S_{\\text{up}}$ genes create a positive peak at the top, which is then eroded by misses in the middle, and the $S_{\\text{down}}$ genes at the bottom only serve to pull the depleted sum back towards zero. The net effect is a smaller, not larger, score magnitude.\n**Verdict: Incorrect.**\n\n**D. Because the method uses only gene ranks and ignores the signs of $r_i$, the presence of $S_{\\text{up}}$ and $S_{\\text{down}}$ does not affect the enrichment score magnitude; significance depends only on whether members of $S$ lie near either end of the ranked list, not on direction.**\nThis statement is false. The problem explicitly states that a \"signed ranking metric $r_i$\" is used to order the gene list. This means the sign is fundamental to the ranking itself, placing positively correlated genes at one end and negatively correlated genes at the other. GSEA is designed specifically to detect enrichment that is dependent on this directionality. Ignoring the sign would correspond to ranking by $|r_i|$, which is a different analytical choice and not what standard GSEA does. The relative positions of $S_{\\text{up}}$ and $S_{\\text{down}}$ are the direct cause of the ES attenuation.\n**Verdict: Incorrect.**", "answer": "$$\\boxed{A}$$", "id": "2392269"}]}