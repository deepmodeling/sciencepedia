{"hands_on_practices": [{"introduction": "The heart of any stochastic simulation is the propensity function, which defines the probability of a reaction occurring. Getting this right is non-negotiable for a valid model. This first exercise [@problem_id:2430872] hones in on a subtle but critical detail: the combinatorial difference between a reaction of two different molecules ($A+B$) and a reaction of two identical molecules ($A+A$). Correctly accounting for the number of distinct reactant pairs is a foundational skill for building accurate stochastic models.", "problem": "In a well-stirred, isothermal system simulated by the Gillespie Stochastic Simulation Algorithm (SSA), consider two reaction channels that may fire from the same state:\n- Reaction $\\mathrm{R}_1$: $A + B \\to C$ with stochastic rate constant $k$ and propensity $a_1 = k \\, X_A X_B$.\n- Reaction $\\mathrm{R}_2$: $A + A \\to D$ with the same stochastic rate constant $k$ and propensity $a_2 = k \\, X_A \\, (X_A - 1)/2$.\n\nAssume the current state has molecular counts $X_A = 4$, $X_B = 3$, $X_C = 0$, and $X_D = 0$. Let the total propensity be $a_0 = a_1 + a_2$. One SSA step proceeds by selecting which reaction fires next with probability proportional to its propensity and then updating the state according to the reaction stoichiometry.\n\nWhich option correctly and completely describes the following four items for this step: \n(i) $a_0$, \n(ii) the probability that $\\mathrm{R}_1$ fires next, \n(iii) the state update imposed by each reaction occurrence, and \n(iv) the new propensities $a_1'$ and $a_2'$ immediately after a single occurrence of $\\mathrm{R}_1$ from the given state?\n\nA. $a_0 = 18k$; $\\mathbb{P}(\\mathrm{R}_1 \\text{ next}) = 2/3$; if $\\mathrm{R}_1$ fires then $X_A \\to 3$, $X_B \\to 2$, $X_C \\to 1$, $X_D$ unchanged, and if $\\mathrm{R}_2$ fires then $X_A \\to 2$, $X_D \\to 1$, $X_B$, $X_C$ unchanged; after $\\mathrm{R}_1$ fires, $a_1' = 6k$, $a_2' = 3k$.\n\nB. $a_0 = 28k$; $\\mathbb{P}(\\mathrm{R}_1 \\text{ next}) = 3/7$; if $\\mathrm{R}_1$ fires then $X_A \\to 3$, $X_B \\to 2$, $X_C \\to 1$; if $\\mathrm{R}_2$ fires then $X_A \\to 2$, $X_D \\to 1$; after $\\mathrm{R}_1$ fires, $a_1' = 6k$, $a_2' = 9k$.\n\nC. $a_0 = 18k$ with $a_1 = k \\, X_A X_B / 2$ and $a_2 = k \\, X_A (X_A - 1)$; $\\mathbb{P}(\\mathrm{R}_1 \\text{ next}) = 1/3$; if $\\mathrm{R}_2$ fires then $X_A \\to 2$, $X_D \\to 1$; after $\\mathrm{R}_1$ fires, $a_1' = 3k$, $a_2' = 6k$.\n\nD. $a_0 = 18k$; $\\mathbb{P}(\\mathrm{R}_1 \\text{ next}) = 2/3$; if $\\mathrm{R}_1$ fires then $X_A \\to 3$, $X_B \\to 2$, $X_C \\to 1$; if $\\mathrm{R}_2$ fires then $X_A \\to 2$, $X_D \\to 1$; after $\\mathrm{R}_1$ fires, $a_1' = 6k$, $a_2' = 6k$.", "solution": "We use the definitions of propensities under the chemical master equation for elementary reactions:\n- For a heterodimerization $A + B \\to C$, the number of distinct reactant pairs is $X_A X_B$, so $a_1 = k \\, X_A X_B$.\n- For a homodimerization $A + A \\to D$, the number of unordered reactant pairs is $\\binom{X_A}{2} = X_A (X_A - 1)/2$, so $a_2 = k \\, X_A (X_A - 1)/2$.\nThe total propensity is $a_0 = a_1 + a_2$, and the probability that reaction $\\mathrm{R}_j$ fires next is $a_j / a_0$. Upon a single occurrence, the state is updated by the stoichiometric change vector of the fired reaction.\n\nFrom the given state $X_A = 4$ and $X_B = 3$:\n- Compute $a_1$: $a_1 = k \\cdot 4 \\cdot 3 = 12k$.\n- Compute $a_2$: $a_2 = k \\cdot 4 \\cdot (4 - 1)/2 = k \\cdot 4 \\cdot 3 / 2 = 6k$.\nTherefore, $a_0 = a_1 + a_2 = 12k + 6k = 18k$, and $\\mathbb{P}(\\mathrm{R}_1 \\text{ next}) = a_1/a_0 = 12k/18k = 2/3$.\n\nState updates for single occurrences:\n- If $\\mathrm{R}_1$ fires ($A + B \\to C$): $X_A \\to 4 - 1 = 3$, $X_B \\to 3 - 1 = 2$, $X_C \\to 0 + 1 = 1$, $X_D$ unchanged.\n- If $\\mathrm{R}_2$ fires ($A + A \\to D$): $X_A \\to 4 - 2 = 2$ (two consumed), $X_D \\to 0 + 1 = 1$, $X_B$, $X_C$ unchanged.\n\nIf $\\mathrm{R}_1$ fires, the new state is $X_A = 3$, $X_B = 2$, $X_C = 1$, $X_D = 0$. Recompute propensities:\n- $a_1' = k \\cdot X_A \\cdot X_B = k \\cdot 3 \\cdot 2 = 6k$.\n- $a_2' = k \\cdot X_A (X_A - 1)/2 = k \\cdot 3 \\cdot 2 / 2 = 3k$.\n\nOption-by-option analysis:\n\nA. Reports $a_0 = 18k$, $\\mathbb{P}(\\mathrm{R}_1 \\text{ next}) = 2/3$, correct stoichiometric updates for both reactions (consuming one $A$ and one $B$ for $\\mathrm{R}_1$, consuming two $A$ for $\\mathrm{R}_2$), and after $\\mathrm{R}_1$ fires gives $a_1' = 6k$, $a_2' = 3k$. All are consistent with the calculations above. Verdict — Correct.\n\nB. Uses $a_2 = k X_A^2$ implicitly (since $a_0 = 28k$ and $a_1 = 12k$ would imply $a_2 = 16k$), which double-counts ordered pairs and is incorrect for homodimerization. It also reports $a_2'$ after $\\mathrm{R}_1$ fires as $9k$ (again reflecting $k X_A^2$). Verdict — Incorrect.\n\nC. Divides the heterodimer propensity by $2$ and omits the $1/2$ in the homodimer propensity, both of which are incorrect. The derived probabilities and post-reaction propensities follow from those wrong formulas and are thus incorrect. Verdict — Incorrect.\n\nD. Gives correct $a_0$ and $\\mathbb{P}(\\mathrm{R}_1 \\text{ next})$ and correct updates for $\\mathrm{R}_1$, but lists an incorrect $a_2'$ after $\\mathrm{R}_1$ fires ($6k$ instead of $3k$). Verdict — Incorrect.\n\nTherefore, only option A correctly and completely captures the differences in implementing $A + B \\to C$ versus $A + A \\to D$ within the Gillespie SSA, including the combinatorial factor for the homodimerization propensity, the correct selection probability, and the correct stoichiometric and propensity updates.", "answer": "$$\\boxed{A}$$", "id": "2430872"}, {"introduction": "With the rules for propensities established, let's see the Gillespie algorithm in action. This practice problem [@problem_id:2678033] takes you through the core mechanics of the simulation loop, step-by-step and by hand. By manually calculating the inter-event times and choosing which reaction fires next, you will build a solid, intuitive understanding of how a system's stochastic trajectory unfolds over time.", "problem": "Consider a single-species birth–death process for a molecular population $X(t)$, with two reaction channels:\n- Birth: $X \\to X + 1$ occurring at a constant rate $\\lambda$ (this is equivalent to $\\varnothing \\to X$ with propensity $\\lambda$).\n- Death: $X \\to X - 1$ occurring at a rate proportional to the current population, with propensity $\\mu X$.\n\nAssume $\\lambda = 2\\,\\mathrm{s^{-1}}$, $\\mu = 0.25\\,\\mathrm{s^{-1}}$ per molecule, and initial condition $X(0) = 3$. Using the Gillespie direct method (also known as the Stochastic Simulation Algorithm), treat each inter-event waiting time as an exponential random variable with rate equal to the instantaneous total propensity, and select the channel of the next reaction according to probabilities proportional to the current propensities. You are provided with three independent pairs of uniform random seeds $(u_{1,k},u_{2,k})$ for $k \\in \\{1,2,3\\}$, where for each event $k$, $u_{1,k}$ is used to sample the waiting time and $u_{2,k}$ is used to select the reaction channel:\n- $(u_{1,1},u_{2,1}) = \\big(\\exp(-1.1),\\,0.8\\big)$,\n- $(u_{1,2},u_{2,2}) = \\big(\\exp(-0.05),\\,0.2\\big)$,\n- $(u_{1,3},u_{2,3}) = \\big(\\exp(-0.3),\\,0.55\\big)$.\n\nCarry out, by hand, the first three events of the Gillespie direct method, starting at time $t=0$, updating the state $X$ and the absolute time after each event. Using only the definitions stated above, determine the absolute time $t_3$ at which the third reaction event occurs. Express your final answer as an exact value in seconds. Do not round; provide an exact fraction if possible. The final answer must be a single real number.", "solution": "The simulation proceeds event by event, updating the system state $(t, X)$ at each step. The state at the beginning of step $k$ is $(t_{k-1}, X_{k-1})$.\n\n**Initial State ($k=0$):**\nThe system begins at time $t_0 = 0$ with an initial population of $X_0 = 3$.\n\n**Event 1 ($k=1$):**\nFirst, we calculate the propensities for the two reaction channels based on the state $(t_0, X_0)$.\n- Birth propensity: $a_1 = \\lambda = 2$.\n- Death propensity: $a_2 = \\mu X_0 = (0.25) \\cdot 3 = 0.75$.\n\nThe total propensity is the sum of the individual propensities:\n$$a_{total,0} = a_1 + a_2 = 2 + 0.75 = 2.75 = \\frac{11}{4}$$\nThe waiting time for the first event, $\\tau_1$, is calculated using the first random seed $u_{1,1} = \\exp(-1.1)$.\n$$\\tau_1 = \\frac{1}{a_{total,0}} \\ln\\left(\\frac{1}{u_{1,1}}\\right) = \\frac{1}{11/4} \\ln\\left(\\frac{1}{\\exp(-1.1)}\\right) = \\frac{4}{11} \\ln(\\exp(1.1)) = \\frac{4}{11} \\cdot (1.1) = \\frac{4.4}{11} = 0.4 = \\frac{2}{5}$$\nThe time of the first event is:\n$$t_1 = t_0 + \\tau_1 = 0 + 0.4 = 0.4$$\nNext, we determine which reaction occurs using the second random seed $u_{2,1} = 0.8$. The birth reaction (channel $1$) occurs if $u_{2,1} \\le \\frac{a_1}{a_{total,0}}$.\n$$\\frac{a_1}{a_{total,0}} = \\frac{2}{2.75} = \\frac{2}{11/4} = \\frac{8}{11} \\approx 0.727$$\nSince $u_{2,1} = 0.8 > \\frac{8}{11}$, the death reaction (channel $2$) is selected. The population is updated accordingly:\n$$X_1 = X_0 - 1 = 3 - 1 = 2$$\nThe state after the first event is $(t_1, X_1) = (0.4, 2)$.\n\n**Event 2 ($k=2$):**\nWe proceed from the state $(t_1, X_1) = (0.4, 2)$.\n- Birth propensity: $a_1 = \\lambda = 2$.\n- Death propensity: $a_2 = \\mu X_1 = (0.25) \\cdot 2 = 0.5$.\n\nThe total propensity is:\n$$a_{total,1} = a_1 + a_2 = 2 + 0.5 = 2.5 = \\frac{5}{2}$$\nThe waiting time for the second event, $\\tau_2$, is calculated using $u_{1,2} = \\exp(-0.05)$.\n$$\\tau_2 = \\frac{1}{a_{total,1}} \\ln\\left(\\frac{1}{u_{1,2}}\\right) = \\frac{1}{5/2} \\ln\\left(\\frac{1}{\\exp(-0.05)}\\right) = \\frac{2}{5} \\ln(\\exp(0.05)) = \\frac{2}{5} \\cdot (0.05) = \\frac{0.1}{5} = 0.02 = \\frac{1}{50}$$\nThe time of the second event is:\n$$t_2 = t_1 + \\tau_2 = 0.4 + 0.02 = 0.42 = \\frac{42}{100} = \\frac{21}{50}$$\nThe reaction is selected using $u_{2,2} = 0.2$. The condition for a birth reaction is $u_{2,2} \\le \\frac{a_1}{a_{total,1}}$.\n$$\\frac{a_1}{a_{total,1}} = \\frac{2}{2.5} = \\frac{4}{5} = 0.8$$\nSince $u_{2,2} = 0.2 \\le 0.8$, the birth reaction is selected. The population becomes:\n$$X_2 = X_1 + 1 = 2 + 1 = 3$$\nThe state after the second event is $(t_2, X_2) = (0.42, 3)$.\n\n**Event 3 ($k=3$):**\nWe proceed from the state $(t_2, X_2) = (0.42, 3)$. The population count has returned to its initial value.\n- Birth propensity: $a_1 = \\lambda = 2$.\n- Death propensity: $a_2 = \\mu X_2 = (0.25) \\cdot 3 = 0.75$.\n\nThe total propensity is identical to the first step:\n$$a_{total,2} = a_1 + a_2 = 2 + 0.75 = 2.75 = \\frac{11}{4}$$\nThe waiting time for the third event, $\\tau_3$, is calculated using $u_{1,3} = \\exp(-0.3)$.\n$$\\tau_3 = \\frac{1}{a_{total,2}} \\ln\\left(\\frac{1}{u_{1,3}}\\right) = \\frac{1}{11/4} \\ln\\left(\\frac{1}{\\exp(-0.3)}\\right) = \\frac{4}{11} \\ln(\\exp(0.3)) = \\frac{4}{11} \\cdot (0.3) = \\frac{1.2}{11} = \\frac{12}{110} = \\frac{6}{55}$$\nThe absolute time of the third event, $t_3$, is the cumulative sum of the waiting times:\n$$t_3 = t_2 + \\tau_3 = \\frac{21}{50} + \\frac{6}{55}$$\nTo add these fractions, we find a common denominator, which is $\\mathrm{lcm}(50, 55) = \\mathrm{lcm}(2 \\cdot 5^2, 5 \\cdot 11) = 2 \\cdot 5^2 \\cdot 11 = 550$.\n$$t_3 = \\frac{21 \\cdot 11}{50 \\cdot 11} + \\frac{6 \\cdot 10}{55 \\cdot 10} = \\frac{231}{550} + \\frac{60}{550} = \\frac{231 + 60}{550} = \\frac{291}{550}$$\nThe fraction $\\frac{291}{550}$ is irreducible because the prime factors of the numerator are $291 = 3 \\cdot 97$ and the prime factors of the denominator are $550 = 2 \\cdot 5^2 \\cdot 11$, with no factors in common.\n\nThe question only asks for the time $t_3$. For completeness, the third reaction would be a birth, since $u_{2,3} = 0.55 \\le \\frac{8}{11}$.\n\nThe final answer is the absolute time at which the third event occurs.", "answer": "$$\\boxed{\\frac{291}{550}}$$", "id": "2678033"}, {"introduction": "Now we move from manual calculation to computational power, applying the Stochastic Simulation Algorithm (SSA) to a system with genuinely interesting behavior. In this problem [@problem_id:2430922], you will implement the SSA in code to explore an autocatalytic network known for its bimodal outcomes—either the population explodes or it goes extinct. This exercise demonstrates the ultimate value of the SSA: its ability to function as a computational microscope, revealing the probabilistic nature of complex biological systems.", "problem": "You are to implement the exact Stochastic Simulation Algorithm (SSA), also known as the Gillespie algorithm, to study an autocatalytic reaction network that displays bimodal outcomes. The chemical system is composed of two reactions under well-mixed, isothermal, constant-volume conditions and follows elementary mass-action kinetics:\n- Reaction $\\mathrm{R}_1$: $A + X \\rightarrow 2X$\n- Reaction $\\mathrm{R}_2$: $X \\rightarrow \\varnothing$\n\nStart from the fundamental definition of the Chemical Master Equation for a well-mixed Markov jump process and the mass-action principle for elementary steps. For a state with molecule counts $A$ and $X$, the reaction propensities are:\n- $a_1(A,X) = c \\cdot A \\cdot X$\n- $a_2(A,X) = d \\cdot X$\n\nThe total propensity is $a_0(A,X) = a_1(A,X) + a_2(A,X)$. The waiting time to the next reaction is an exponential random variable with mean $1/a_0$, and the next reaction index is chosen with probabilities proportional to the propensities. This system exhibits two competing absorbing boundaries under finite resources:\n- Extinction boundary: $X$ reaches $0$ (no autocatalyst to sustain growth).\n- Explosion boundary (resource exhaustion): $A$ reaches $0$ (substrate fully converted before extinction).\n\nYour task is to implement the exact SSA for this two-reaction system and estimate, by repeated simulation, the empirical probabilities of the two outcomes by a fixed horizon time $T_{\\max}$:\n- The empirical probability of extinction is the fraction of trajectories for which $X$ hits $0$ before $A$ hits $0$ and before time $T_{\\max}$.\n- The empirical probability of explosion is the fraction of trajectories for which $A$ hits $0$ before $X$ hits $0$ and before time $T_{\\max}$.\nTrajectories that do not hit either absorbing boundary by time $T_{\\max}$ are counted as neither outcome.\n\nUsing the above definitions, implement a program that, for each test case, runs $N$ independent trajectories under a fixed random seed to ensure reproducibility, and returns two floats: the empirical probability of extinction and the empirical probability of explosion, each rounded to three decimal places. The algorithm must be the exact Gillespie method, drawing the time increment $\\tau$ from the exponential distribution with rate $a_0$ and the reaction index according to $a_1/a_0$ and $a_2/a_0$ at each step.\n\nTest suite:\n- Case $1$ (extinction-dominated regime): $(A_0, X_0, c, d, T_{\\max}, N, \\text{seed}) = (60, 3, 0.001, 0.2, 200.0, 2000, 1729)$\n- Case $2$ (near-threshold regime): $(A_0, X_0, c, d, T_{\\max}, N, \\text{seed}) = (100, 10, 0.005, 0.5, 100.0, 2000, 1733)$\n- Case $3$ (explosion-dominated regime): $(A_0, X_0, c, d, T_{\\max}, N, \\text{seed}) = (200, 5, 0.01, 0.05, 50.0, 2000, 1737)$\n\nImplementation requirements:\n- Use the exact Gillespie algorithm grounded in the Chemical Master Equation and mass-action propensities as described above.\n- For each case, simulate $N$ trajectories starting at $(A_0, X_0)$ until either $A=0$, $X=0$, or $t \\ge T_{\\max}$.\n- Define the two outcomes exactly as above.\n- Report, for each case, two floats: the empirical probability of extinction and the empirical probability of explosion, each rounded to three decimal places.\n- The final output format: Your program should produce a single line of output containing the results for all three test cases as a comma-separated list of six floats enclosed in square brackets. The order must be Case $1$ extinction probability, Case $1$ explosion probability, Case $2$ extinction probability, Case $2$ explosion probability, Case $3$ extinction probability, Case $3$ explosion probability. For example: \"[0.913,0.085,0.501,0.495,0.002,0.997]\".\n- No physical units are required in the output since probabilities are dimensionless. All reported numbers must be decimals, not percentages.\n\nYour program must be self-contained and require no input. It must deterministically reproduce the same results by seeding the random number generator with the provided seed for each case before running the $N$ trajectories of that case.", "solution": "The task is to simulate a stochastic chemical system using the exact Stochastic Simulation Algorithm (SSA), commonly known as the Gillespie algorithm. This algorithm generates statistically correct trajectories of a Markov jump process governed by the Chemical Master Equation (CME).\n\nThe system consists of two chemical species, a substrate $A$ and an autocatalyst $X$, involved in two elementary reactions within a well-mixed volume at constant temperature:\n1.  Autocatalytic production of $X$: $R_1: A + X \\xrightarrow{c} 2X$\n2.  Degradation of $X$: $R_2: X \\xrightarrow{d} \\varnothing$\n\nThe state of the system at any time $t$ is defined by the integer vector of molecule counts $\\mathbf{n}(t) = (A(t), X(t))$. The change in state due to each reaction is given by the state-change vectors:\n- For $R_1$: $\\mathbf{v}_1 = (-1, +1)$, signifying one molecule of $A$ is converted into one molecule of $X$.\n- For $R_2$: $\\mathbf{v}_2 = (0, -1)$, signifying one molecule of $X$ is removed.\n\nUnder the principle of mass-action kinetics for elementary reactions, the rate of each reaction is proportional to the product of the counts of its reactants. These rates are defined as propensity functions, $a_j(\\mathbf{n})$:\n- Propensity for $R_1$: $a_1(A, X) = c \\cdot A \\cdot X$\n- Propensity for $R_2$: $a_2(X) = d \\cdot X$\n\nThe total propensity, $a_0(\\mathbf{n})$, is the sum of individual propensities and represents the total rate at which any reaction can occur:\n$$a_0(A, X) = a_1(A, X) + a_2(X) = c \\cdot A \\cdot X + d \\cdot X$$\n\nThe Gillespie algorithm is an exact simulation method that proceeds by answering two questions at each step: when will the next reaction occur, and which reaction will it be?\n\n1.  **Time to the next reaction ($\\tau$)**: For a system in state $\\mathbf{n}$, the time $\\tau$ until the next reaction event is a random variable drawn from an exponential distribution with rate parameter $a_0(\\mathbf{n})$. Its probability density function is $p(\\tau | \\mathbf{n}) = a_0(\\mathbf{n}) e^{-a_0(\\mathbf{n})\\tau}$. A value for $\\tau$ can be generated using inverse transform sampling:\n    $$\\tau = \\frac{1}{a_0(\\mathbf{n})} \\ln\\left(\\frac{1}{r_1}\\right)$$\n    where $r_1$ is a random number drawn from a uniform distribution on $(0, 1)$.\n\n2.  **Identity of the next reaction ($\\mu$)**: The probability that the next reaction is $R_j$ is given by the ratio of its propensity to the total propensity, $P(\\mu=j | \\mathbf{n}) = a_j(\\mathbf{n}) / a_0(\\mathbf{n})$. The specific reaction is chosen by drawing a second uniform random number $r_2 \\in U(0, 1)$ and finding the smallest integer index $\\mu$ that satisfies the condition:\n    $$\\sum_{j=1}^{\\mu} a_j(\\mathbf{n}) > r_2 \\cdot a_0(\\mathbf{n})$$\n    For our two-reaction system, this simplifies to:\n    - If $r_2 \\cdot a_0 \\le a_1$, the next reaction is $R_1$.\n    - Otherwise, the next reaction is $R_2$.\n\nThe step-by-step simulation of a single trajectory is as follows:\n- **Initialization**: Set time $t = 0.0$ and initial molecule counts $(A, X) = (A_0, X_0)$.\n- **Iteration Loop**: While the termination conditions are not met:\n    1.  Calculate propensities $a_1 = c \\cdot A \\cdot X$ and $a_2 = d \\cdot X$, and the total propensity $a_0 = a_1 + a_2$.\n    2.  If $a_0 = 0$, the system is in an absorbing state (which for this system implies $X=0$). The simulation for the trajectory ends.\n    3.  Generate the time step $\\tau$ by drawing from an exponential distribution with rate $a_0$.\n    4.  Check for time horizon: if the next event time $t + \\tau$ is greater than or equal to the maximum simulation time $T_{\\max}$, the trajectory terminates due to the time limit. No outcome is recorded for this trajectory.\n    5.  Update time: $t \\leftarrow t + \\tau$.\n    6.  Select the reaction $\\mu$ based on the propensities.\n    7.  Update the state: $(A, X) \\leftarrow (A, X) + \\mathbf{v}_{\\mu}$.\n    8.  Check for absorbing boundaries: if $A = 0$ or $X = 0$, the trajectory terminates.\n\nTo estimate the empirical probabilities, this process is repeated for $N$ independent trajectories. Each trajectory starts from the same initial state $(A_0, X_0)$ but follows a different path due to stochasticity. A counter is maintained for each of the two specified outcomes:\n- **Extinction**: A trajectory is counted as an \"extinction\" event if it terminates because $X$ becomes $0$ while $A > 0$ and $t < T_{\\max}$.\n- **Explosion**: A trajectory is counted as an \"explosion\" (resource exhaustion) event if it terminates because $A$ becomes $0$ while $X > 0$ and $t < T_{\\max}$.\n\nAfter running all $N$ trajectories for a given parameter set, the empirical probabilities are calculated as the fraction of trajectories that resulted in each outcome:\n$$P_{\\text{extinction}} = \\frac{\\text{extinction\\_count}}{N}$$\n$$P_{\\text{explosion}} = \\frac{\\text{explosion\\_count}}{N}$$\n\nFor reproducibility, the random number generator is seeded with the specified value before starting the $N$ simulations for each test case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements the exact Stochastic Simulation Algorithm (Gillespie algorithm)\n    to study an autocatalytic reaction network and estimate the probabilities\n    of extinction and explosion outcomes.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (A_0, X_0, c, d, T_max, N, seed)\n        (60, 3, 0.001, 0.2, 200.0, 2000, 1729),  # Case 1: extinction-dominated\n        (100, 10, 0.005, 0.5, 100.0, 2000, 1733), # Case 2: near-threshold\n        (200, 5, 0.01, 0.05, 50.0, 2000, 1737),   # Case 3: explosion-dominated\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        A0, X0, c, d, T_max, N, seed = case\n        \n        # Initialize random number generator with the specified seed for reproducibility\n        rng = np.random.default_rng(seed)\n\n        extinction_count = 0\n        explosion_count = 0\n\n        # Run N independent trajectories\n        for _ in range(N):\n            t = 0.0\n            A = A0\n            X = X0\n\n            # Main Gillespie algorithm loop for a single trajectory\n            while True:\n                # Check for absorbing state termination (species depletion)\n                # These checks are placed before the time check to correctly attribute\n                # the outcome if the boundary is hit at the start of an interval.\n                if X == 0:\n                    # Condition for extinction: X depletes before A and before T_max\n                    extinction_count += 1\n                    break\n                if A == 0:\n                    # Condition for explosion: A depletes before X and before T_max\n                    explosion_count += 1\n                    break\n                \n                # Check for time horizon termination\n                if t >= T_max:\n                    # Trajectory ends due to time limit, neither outcome is counted.\n                    break\n\n                # Step 1: Calculate propensity functions\n                propensity_r1 = c * A * X\n                propensity_r2 = d * X\n                propensity_total = propensity_r1 + propensity_r2\n\n                # If total propensity is zero, no more reactions can occur.\n                # In this system, this only happens if X is zero, which is already handled.\n                if propensity_total = 0:\n                    break\n\n                # Step 2: Draw time to next reaction from exponential distribution\n                # tau = (1.0 / propensity_total) * np.log(1.0 / rng.random()) is equivalent\n                tau = rng.exponential(scale=1.0 / propensity_total)\n\n                # Check if the next reaction would occur after the time horizon\n                if t + tau >= T_max:\n                    # The trajectory runs until T_max but doesn't hit a boundary in time.\n                    break\n                \n                # Step 4: Update time\n                t += tau\n\n                # Step 3: Choose which reaction occurs\n                if rng.random() * propensity_total  propensity_r1:\n                    # Reaction R1: A + X -> 2X\n                    # Stoichiometry vector: (-1, +1)\n                    A -= 1\n                    X += 1\n                else:\n                    # Reaction R2: X -> 0\n                    # Stoichiometry vector: (0, -1)\n                    X -= 1\n\n        # Calculate empirical probabilities\n        prob_extinction = extinction_count / N\n        prob_explosion = explosion_count / N\n        \n        # Append results formatted to three decimal places\n        results.append(f\"{prob_extinction:.3f}\")\n        results.append(f\"{prob_explosion:.3f}\")\n        \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2430922"}]}