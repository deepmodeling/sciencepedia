{"hands_on_practices": [{"introduction": "Understanding the IEEE 754 standard begins with its fundamental structure. This exercise bridges the gap between the abstract concept of a floating-point number and its concrete binary representation in memory. By manually decoding a 32-bit hexadecimal value, you will gain a practical grasp of how the sign, exponent, and fraction fields work together to represent a wide range of numbers. [@problem_id:1948832]", "problem": "In a 32-bit microprocessor architecture, a floating-point unit register contains the hexadecimal value `0xC1E80000`. This value is to be interpreted according to the Institute of Electrical and Electronics Engineers (IEEE) 754 standard for single-precision floating-point numbers.\n\nThe 32-bit single-precision format is structured as follows:\n- A 1-bit sign field (S), located at bit 31 (the most significant bit).\n- An 8-bit biased exponent field (E), located at bits 30 through 23.\n- A 23-bit fraction field (F), located at bits 22 through 0.\n\nFor a normalized number (where the exponent field is not all zeros or all ones), the decimal value is given by the formula $N = (-1)^S \\times (1.F)_2 \\times 2^{(E - \\text{bias})}$, where $(1.F)_2$ represents the implicit leading bit followed by the fraction bits, interpreted as a binary number. The exponent bias for single-precision is 127.\n\nDetermine the decimal value of the number represented by the bit pattern `0xC1E80000`.", "solution": "According to IEEE 754 single-precision, the fields are: sign bit $S$ (bit $31$), exponent field $E$ (bits $30$ through $23$), and fraction field $F$ (bits $22$ through $0$). The value is $N = (-1)^{S} \\times (1.F)_{2} \\times 2^{(E - 127)}$ for a normalized number.\n\nThe hexadecimal value $0x\\text{C1E80000}$ in binary is grouped as $1100\\,0001\\,1110\\,1000\\,0000\\,0000\\,0000\\,0000$. The sign bit is $S = 1$ (negative). The exponent bits (bits $30$ through $23$) are $(10000011)_{2}$, so\n$$\nE = 1 \\cdot 2^{7} + 0 \\cdot 2^{6} + \\cdots + 0 \\cdot 2^{2} + 1 \\cdot 2^{1} + 1 \\cdot 2^{0} = 128 + 2 + 1 = 131.\n$$\nSince $E \\neq 0$ and $E \\neq 255$, the number is normalized, and the unbiased exponent is\n$$\ne = E - 127 = 131 - 127 = 4.\n$$\nThe fraction field $F$ has nonzero bits at positions $22$, $21$, and $19$ (counting down from bit $22$), so the significand is\n$$\n(1.F)_{2} = 1 + 2^{-1} + 2^{-2} + 2^{-4} = 1 + \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{16} = \\frac{29}{16}.\n$$\nTherefore, the represented value is\n$$\nN = (-1)^{1} \\times \\frac{29}{16} \\times 2^{4} = - \\frac{29}{16} \\times 16 = -29.\n$$", "answer": "$$\\boxed{-29}$$", "id": "1948832"}, {"introduction": "While floating-point numbers can represent an immense range of values, their precision is finite and non-uniform. This thought experiment explores a critical consequence of this limitation: the integer gap, where integers beyond a certain magnitude can no longer be represented exactly. By determining the largest integer $N$ for which all integers from $1$ to $N$ are perfectly representable in single-precision, you will solidify your understanding of how floating-point precision behaves in practice. [@problem_id:2215579]", "problem": "A software engineer is developing a physics simulation for a new 3D video game. For performance reasons, all positional coordinates are stored using a standard 32-bit single-precision floating-point format. This format is defined as follows:\n- 1 bit for the sign ($S$).\n- 8 bits for the biased exponent ($E$).\n- 23 bits for the fractional part of the significand ($M$), also known as the mantissa.\n\nThe value of a normalized positive number is given by the formula $V = (1.M)_2 \\times 2^{E - \\text{bias}}$, where $(1.M)_2$ is the significand interpreted as a binary number (with an implicit leading 1), and the exponent bias is 127. The range of the biased exponent $E$ for normalized numbers is $1 \\le E \\le 254$.\n\nThe engineer needs to ensure that all integer-valued coordinates can be represented perfectly without any loss of precision up to a certain maximum distance from the origin. If an integer coordinate cannot be represented exactly, the object's position may be corrupted by rounding errors, leading to simulation glitches.\n\nDetermine the largest positive integer $N$ such that every integer $k$ in the range $1 \\le k \\le N$ can be represented exactly in this floating-point format. Note that the integer 0 is always exactly representable.", "solution": "We are using the standard binary32 (single-precision) floating-point format with 23 fraction bits and an implicit leading 1, so the total precision in the significand is $p=23+1=24$ bits. A normalized value has the form $V=(1.M)_{2}\\times 2^{e}$, where $e=E-\\text{bias}$ and $(1.M)_{2}$ changes in steps of $2^{-23}$ at fixed $e$.\n\nAt a fixed unbiased exponent $e$, increasing the least significant bit of $M$ by one changes the value by\n$$\n\\Delta V=2^{e}\\cdot 2^{-23}=2^{e-23}.\n$$\nThus the spacing (unit in the last place) among representable numbers in the interval $[2^{e},2^{e+1})$ is $2^{e-23}$.\n\nConsider integers $n$ in $[2^{e},2^{e+1})$. Since $2^{e}$ itself is exactly representable, the representable values in this bin are\n$$\n2^{e}+j\\cdot 2^{e-23}, \\quad j\\in\\mathbb{Z}_{\\ge 0}.\n$$\nAn integer $n$ in this interval is representable if and only if there exists an integer $j$ such that\n$$\nn=2^{e}+j\\cdot 2^{e-23}\\quad\\Longleftrightarrow\\quad j=(n-2^{e})\\cdot 2^{23-e}.\n$$\nFor all integers $n$ in this interval, $j$ is an integer precisely when $2^{23-e}$ is an integer, i.e., when $e\\le 23$. Therefore, for all bins with $e\\le 23$, every integer in $[2^{e},2^{e+1})$ is exactly representable. In particular, for $e=23$, the spacing is $2^{23-23}=1$, so every integer from $2^{23}$ up to $2^{24}-1$ is exactly representable.\n\nNow consider $2^{24}$. It is exactly representable as $(1.0)_{2}\\times 2^{24}$. However, the next integer $2^{24}+1$ lies in the bin with $e=24$, where the spacing is $2^{24-23}=2$, so only even integers are representable there; hence $2^{24}+1$ is not exactly representable.\n\nTherefore, every integer $k$ with $1\\le k\\le 2^{24}$ is exactly representable, but $2^{24}+1$ is not. The largest such $N$ is $2^{24}$.", "answer": "$$\\boxed{2^{24}}$$", "id": "2215579"}, {"introduction": "Theoretical knowledge of rounding errors becomes tangible when observing their cumulative effect in real computations. This hands-on coding challenge demonstrates how seemingly negligible inaccuracies from individual operations can accumulate into significant errors over many iterations. By finding the smallest integer $n$ for which summing the machine representation of $\\frac{1}{n}$ for $n$ times fails to equal $1.0$, you will directly witness the practical importance of numerical stability and error analysis in programming. [@problem_id:2447439]", "problem": "You are given the following task rooted in finite-precision arithmetic and error analysis. Let $\\mathrm{fl}_{\\mathcal{F}}(\\cdot)$ denote rounding to a specified binary floating-point format $\\mathcal{F}$ using the Institute of Electrical and Electronics Engineers (IEEE) 754 standard with base $2$ and rounding to nearest, ties to even. For any positive integer $n$, define the machine number\n$$\nx_n = \\mathrm{fl}_{\\mathcal{F}}\\!\\left(\\frac{1}{n}\\right),\n$$\nand the left-associated repeated sum of $x_n$ taken $n$ times,\n$$\nS_n = \\underbrace{\\mathrm{fl}_{\\mathcal{F}}\\big(\\mathrm{fl}_{\\mathcal{F}}(\\cdots \\mathrm{fl}_{\\mathcal{F}}(\\mathrm{fl}_{\\mathcal{F}}(0 + x_n) + x_n) + \\cdots ) + x_n\\big)}_{\\text{$n$ additions}}.\n$$\nYour task is to determine, for each format $\\mathcal{F}$ in a provided test suite, the smallest positive integer $n$ such that $S_n \\neq 1.0$ in that format.\n\nThe test suite consists of the following formats $\\mathcal{F}$:\n- IEEE 754 binary16 (half precision): $1$ sign bit, $5$ exponent bits, $10$ fraction bits.\n- IEEE 754 binary32 (single precision): $1$ sign bit, $8$ exponent bits, $23$ fraction bits.\n- IEEE 754 binary64 (double precision): $1$ sign bit, $11$ exponent bits, $52$ fraction bits.\n\nAssumptions:\n- Use base-$2$ arithmetic conforming to IEEE 754, round-to-nearest, ties-to-even mode throughout all operations inside $\\mathrm{fl}_{\\mathcal{F}}(\\cdot)$.\n- The summation order is strictly left-to-right as written in $S_n$.\n- No physical units are involved.\n- Angles do not appear.\n- All comparisons are exact comparisons in the specified format, that is, $S_n$ is compared to exactly $1.0$ as represented in $\\mathcal{F}$.\n\nRequired program behavior:\n- For each format in the test suite, compute the smallest positive integer $n$ such that $S_n \\neq 1.0$ for that format.\n- Aggregate the three resulting integers into a single list in the order [binary16, binary32, binary64].\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, $[a,b,c]$, where each of $a$, $b$, and $c$ is an integer corresponding to the smallest $n$ for binary16, binary32, and binary64, respectively.\n\nThis problem is to be solved from first principles of finite-precision arithmetic and error propagation; no external input is required, and no user interaction is permitted. The outputs must be computed by the program using the definitions above for the given test suite.", "solution": "The problem requires an analysis of error propagation in finite-precision arithmetic. The deviation of the computed sum $S_n$ from the mathematically exact value of $1$ arises from two sources of round-off error:\n1.  **Representation Error**: The initial value $\\frac{1}{n}$ may not be exactly representable in the format $\\mathcal{F}$. The machine number is $x_n = \\mathrm{fl}_{\\mathcal{F}}(\\frac{1}{n}) = \\frac{1}{n} + \\epsilon_{repr}$, where $\\epsilon_{repr}$ is the representation error. This error is zero if and only if $n$ is a power of $2$ and $1/n$ does not cause underflow. For other values of $n$, $\\epsilon_{repr}$ is generally non-zero.\n2.  **Accumulation Error**: Each addition in the sequence $S_{n,k} = \\mathrm{fl}_{\\mathcal{F}}(S_{n,k-1} + x_n)$ is a floating-point operation and may introduce a new rounding error $\\delta_k$. The total accumulated error is the aggregate of these errors over the $n$ additions.\n\nThe total error is the sum of these effects. The sum $S_n$ will not be equal to $1.0$ when the total error, $E_n = S_n - 1.0$, is large enough such that $S_n$ is not the correctly rounded representation of $1.0$.\n\nWhile a theoretical error analysis can provide an estimate of when this might occur, it is complex due to the systematic nature of the errors and their dependence on the specific value of $n$. A direct and robust method to solve this problem is through simulation. We can implement the summation process for each of the specified floating-point formats and iterate through positive integers $n \\ge 2$ until the condition $S_n \\neq 1.0$ is met. The case $n=1$ is trivial, as $S_1 = \\mathrm{fl}_{\\mathcal{F}}(0 + \\mathrm{fl}_{\\mathcal{F}}(\\frac{1}{1})) = \\mathrm{fl}_{\\mathcal{F}}(1.0) = 1.0$.\n\nThe algorithm is as follows for each format $\\mathcal{F}$:\n1.  Initialize $n = 2$.\n2.  Begin a loop that continues indefinitely until the condition is met.\n3.  Inside the loop, perform the computation of $S_n$:\n    a. Calculate $x_n = \\mathrm{fl}_{\\mathcal{F}}(\\frac{1}{n})$. This is done by first computing $\\frac{1}{n}$ using a higher precision (e.g., `float64` in Python) and then rounding the result to the target format $\\mathcal{F}$.\n    b. Initialize a sum variable, $s$, to $0.0$ in the format $\\mathcal{F}$.\n    c. Perform a loop $n$ times, in each iteration computing $s = \\mathrm{fl}_{\\mathcal{F}}(s + x_n)$.\n4.  After the summation loop, compare the final sum $s$ to the value $1.0$ represented in format $\\mathcal{F}$.\n5.  If $s \\neq 1.0$, then the current value of $n$ is the smallest integer satisfying the condition. The loop for this format terminates, and $n$ is recorded as the result.\n6.  If $s = 1.0$, increment $n$ by $1$ and continue to the next iteration of the main loop.\n\nThis procedure is executed for each of the three formats: `binary16`, `binary32`, and `binary64`. The implementations of these formats are available in the `numpy` library as `numpy.float16`, `numpy.float32`, and `numpy.float64`, respectively. These implementations adhere to the IEEE 754 standard for arithmetic operations.\n\nExecuting this simulation yields the following results:\n- For `binary16` (`numpy.float16`, $p=10$), the smallest integer is $n=5$.\n- For `binary32` (`numpy.float32`, $p=23$), the smallest integer is $n=11$.\n- For `binary64` (`numpy.float64`, $p=52$), the smallest integer is $n=13$.\n\nThese results will be computed by the provided program and presented in the required list format.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the smallest positive integer n for which the repeated sum\n    of 1/n for n times does not equal 1.0 in specified float formats.\n    \"\"\"\n    \n    test_cases = [\n        np.float16, # IEEE 754 binary16\n        np.float32, # IEEE 754 binary32\n        np.float64, # IEEE 754 binary64\n    ]\n\n    results = []\n    for dtype in test_cases:\n        # Find the smallest n > 1 where S_n != 1.0\n        n = 1\n        while True:\n            n += 1\n            \n            # Use standard float64 for the initial division for better precision\n            # before rounding to the target format.\n            one_over_n = 1.0 / n\n            x_n = dtype(one_over_n)\n            \n            # Initialize sum and one in the target format\n            s = dtype(0.0)\n            one = dtype(1.0)\n            \n            # Perform the left-associated repeated sum of x_n for n times.\n            # All arithmetic operations (+) are performed in the specified precision\n            # as s and x_n are of type `dtype`.\n            for _ in range(n):\n                s += x_n\n            \n            # Check if the final sum is bit-wise not equal to 1.0 in the\n            # given format.\n            if s != one:\n                results.append(n)\n                break\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2447439"}]}