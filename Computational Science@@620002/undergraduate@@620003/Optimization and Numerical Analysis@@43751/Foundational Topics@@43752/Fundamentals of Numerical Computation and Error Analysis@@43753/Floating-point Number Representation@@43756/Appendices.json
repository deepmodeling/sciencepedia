{"hands_on_practices": [{"introduction": "Understanding floating-point numbers begins with the fundamental skill of converting a familiar decimal value into its binary representation. This exercise guides you through encoding a negative fractional value into a custom, compact 8-bit format. By manually calculating the sign, biased exponent, and fraction, you will gain a concrete understanding of the core mechanics that underpin all floating-point systems, from simple microcontrollers to powerful supercomputers [@problem_id:1937491].", "problem": "An engineer is designing a specialized, low-power microcontroller for an environmental sensor node. To save on hardware resources, the microcontroller employs a custom 8-bit floating-point number format to store sensor readings. This format is defined as follows:\n- 1 bit for the sign (S), where 1 indicates a negative number.\n- 4 bits for the biased exponent (E). The exponent bias is 7.\n- 3 bits for the fraction (F), representing the mantissa.\n\nThe value of a normalized number in this format is given by the formula $V = (-1)^{S} \\times (1.F)_{2} \\times 2^{(E - \\text{bias})}$, where $(1.F)_{2}$ is the significand with an implicit leading 1.\n\nThe sensor has recorded a temperature deviation value of $-0.375$. Your task is to determine the correct 8-bit binary representation of this value in the custom floating-point format, expressed as a single binary string S EEEE FFF.\n\nWhich of the following represents the value $-0.375$ in this 8-bit format?\n\nA. 10110100\n\nB. 00101100\n\nC. 10101100\n\nD. 10101011\n\nE. 10111011", "solution": "We are given a custom 8-bit floating-point format with fields: sign bit $S$, 4-bit biased exponent $E$ with bias $7$, and 3-bit fraction $F$. For a normalized number, the value is\n$$\nV = (-1)^{S} \\times (1.F)_{2} \\times 2^{E - \\text{bias}}.\n$$\nWe need to represent $-0.375$. First convert the magnitude to binary:\n$$\n0.375 = \\frac{3}{8} = \\frac{1}{4} + \\frac{1}{8} = 0.011_{2}.\n$$\nNormalize to the form $(1.F)_{2} \\times 2^{e}$. Shifting $0.011_{2}$ left by two places gives\n$$\n0.011_{2} = 1.1_{2} \\times 2^{-2}.\n$$\nThus the true exponent is $e = -2$, and the normalized significand is $(1.F)_{2} = 1.100\\ldots_{2}$. With 3 fraction bits, we take $F = 100$ exactly (no rounding needed).\n\nThe stored exponent is the biased value\n$$\nE = e + \\text{bias} = -2 + 7 = 5,\n$$\nwhose 4-bit binary representation is $0101$.\n\nThe sign is negative, so $S = 1$.\n\nTherefore, the 8-bit pattern $S\\,EEEE\\,FFF$ is\n$$\n1\\ 0101\\ 100 \\quad \\text{which is} \\quad 10101100.\n$$\nThis corresponds to option C. Verifying the value:\n$$\nV = (-1)^{1} \\times (1.100)_{2} \\times 2^{5-7} = -\\left(1.5\\right) \\times 2^{-2} = -0.375,\n$$\nwhich is correct.", "answer": "$$\\boxed{C}$$", "id": "1937491"}, {"introduction": "While floating-point formats can represent an enormous range of values, their precision is finite. This thought experiment explores a profound consequence of this limitation by challenging you to find the smallest positive integer that cannot be exactly represented in the standard IEEE 754 single-precision format. Engaging with this problem [@problem_id:2173582] reveals how the spacing between representable numbers changes with magnitude, ultimately explaining why floating-point variables can fail to store even seemingly simple integer values.", "problem": "In modern computing, real numbers are often approximated using a floating-point representation. A widely adopted standard for this is the Institute of Electrical and Electronics Engineers (IEEE) 754 standard. The single-precision format under this standard uses 32 bits to represent a number.\n\nThe 32 bits are allocated as follows:\n- 1 bit for the sign ($s$).\n- 8 bits for the biased exponent ($E$).\n- 23 bits for the fraction ($f$).\n\nFor a positive, normalized number (where the sign bit $s=0$), its value $V$ is determined by the formula:\n$$V = 2^{E-127} \\times (1.f)_2$$\nHere, $127$ is the exponent bias. The term $(1.f)_2$ represents the significand in binary, where the '1.' is an implicit leading bit that is not stored, and $f$ is the 23-bit binary fraction stored in the fraction bits. For normalized numbers, the biased exponent $E$ can range from 1 to 254.\n\nWhile this format can represent a vast range of numbers, its finite precision means that not all numbers can be represented exactly. This limitation is particularly interesting when considering integers. For example, the integer 5 can be written as $1.25 \\times 4 = (1.01)_2 \\times 2^2$. This corresponds to a fraction $f=0100...0$ and an exponent part that yields a power of 2, so 5 is exactly representable.\n\nYour task is to find the smallest positive integer that cannot be represented exactly in the IEEE 754 single-precision floating-point format.", "solution": "A normalized single-precision value has the form\n$$V=2^{e}\\,(1.f)_{2},\\quad e=E-127,$$\nwhere the significand has one implicit leading bit plus 23 stored fraction bits, giving an effective precision of $p=24$ bits. Increasing the fraction $f$ by one unit changes $(1.f)_{2}$ by $2^{-23}$, so for a fixed exponent $e$ the spacing (unit in the last place) between consecutive representable numbers is\n$$\\mathrm{ulp}(e)=2^{e}\\cdot 2^{-23}=2^{e-23}.$$\n\nTo represent every integer in some interval exactly, the spacing there must be at most $1$. Thus we require\n$$\\mathrm{ulp}(e)\\leq 1 \\quad \\Longleftrightarrow \\quad 2^{e-23}\\leq 1 \\quad \\Longleftrightarrow \\quad e\\leq 23.$$\nNumbers in the range $[2^{23},\\,2^{24})$ have $e=23$ and hence $\\mathrm{ulp}=1$, so every integer in that range is representable. The value $2^{24}$ itself is exactly representable as a power of two with significand $(1.0)_{2}$ and $e=24$.\n\nFor the next range $[2^{24},\\,2^{25})$, we have $e=24$ and therefore\n$$\\mathrm{ulp}(24)=2^{24-23}=2,$$\nso only multiples of $2$ are representable there. Consequently, the smallest integer in this range that is not exactly representable is the smallest odd integer,\n$$2^{24}+1.$$\n\nSince all positive integers less than or equal to $2^{24}$ are exactly representable and $2^{24}+1$ is not, the smallest positive integer that cannot be represented exactly in IEEE 754 single precision is $2^{24}+1$.", "answer": "$$\\boxed{16777217}$$", "id": "2173582"}, {"introduction": "The finite precision of floating-point numbers has profound implications for arithmetic, sometimes violating the familiar laws of mathematics. This exercise demonstrates one of the most important consequences: the failure of the associative property of addition, where $(A+B)+C$ may not equal $A+(B+C)$. By performing calculations within a constrained 6-bit system [@problem_id:1937506], you will see exactly how intermediate rounding steps can alter a final result, a crucial lesson in numerical stability.", "problem": "Consider a custom 6-bit floating-point number representation designed for a simple embedded system. This format uses 1 bit for the sign (S), 3 bits for the exponent (E), and 2 bits for the fraction (F). The bits are arranged as S E E E F F.\n\nThe value of a number is determined by the following rules:\n- If the exponent field E is not all 0s or all 1s (i.e., for $1 \\leq E_{decimal} \\leq 6$), the number is a normalized value given by $V = (-1)^S \\times (1.F)_2 \\times 2^{E_{decimal} - 3}$. The term `3` is the exponent bias.\n- If the exponent field E is all 0s, the number is a denormalized value given by $V = (-1)^S \\times (0.F)_2 \\times 2^{-2}$. Zero is represented by all bits being 0.\n- If the exponent field E is all 1s, the number represents infinity (if F=00) or Not a Number (NaN) (if F is not 00).\n\nAll arithmetic operations involving these numbers must adhere to the following procedure: the operation is performed with full precision, and then the result is rounded back to fit the 6-bit format before any subsequent operation. The rounding scheme used is \"round-to-nearest, ties-to-even\".\n\nYou are given three numbers, $A$, $B$, and $C$, represented in this 6-bit format:\n- $A = \\text{011010}$\n- $B = \\text{111010}$\n- $C = \\text{000100}$\n\nYour task is to demonstrate the non-associativity of floating-point addition. First, calculate the result of $X = (A+B)+C$. Second, calculate the result of $Y = A+(B+C)$. Finally, compute the absolute difference $|X-Y|$.\n\nExpress your final answer as a single decimal number.", "solution": "The 6-bit format uses $S$ (sign), $E$ (3-bit exponent with bias $3$), and $F$ (2-bit fraction). For normalized numbers ($1 \\leq E_{\\text{decimal}} \\leq 6$), the value is $V = (-1)^{S}(1.F)_{2}2^{E_{\\text{decimal}}-3}$. For denormalized numbers ($E=0$), $V = (-1)^{S}(0.F)_{2}2^{-2}$. Arithmetic is performed exactly, then rounded to the 6-bit format (round-to-nearest, ties-to-even) before any subsequent operation.\n\nDecode $A=011010$. Here $S=0$, $E=110$ so $E_{\\text{decimal}}=6$, and $F=10$. This is normalized with exponent $e=6-3=3$ and significand $(1.F)_{2}=1+2^{-1}= \\frac{3}{2}$. Hence\n$$\nA = \\frac{3}{2}\\cdot 2^{3} = 12.\n$$\n\nDecode $B=111010$. Here $S=1$, $E=110$ so $e=3$, and $F=10$; thus $B=-\\frac{3}{2}\\cdot 2^{3}=-12$.\n\nDecode $C=000100$. Here $S=0$, $E=001$ so $e=1-3=-2$, and $F=00$; thus $(1.F)_{2}=1$ and\n$$\nC = 1\\cdot 2^{-2} = \\frac{1}{4}.\n$$\n\nCompute $X=(A+B)+C$ with rounding after each operation.\nFirst, the exact sum is\n$$\nA+B = 12 + (-12) = 0,\n$$\nwhich is exactly representable, so $\\operatorname{round}(A+B)=0$. Next,\n$$\n0 + C = \\frac{1}{4},\n$$\nand $\\frac{1}{4}$ is exactly representable (normalized with $E=001$, $F=00$), so $X=\\frac{1}{4}$.\n\nCompute $Y=A+(B+C)$ with rounding after each operation.\nFirst,\n$$\nB+C = -12 + \\frac{1}{4} = -\\frac{47}{4} = -11.75.\n$$\nThe nearest representable normalized values at exponent $e=3$ are of the form $(1+\\frac{q}{4})2^{3}$ for $q\\in\\{0,1,2,3\\}$, namely $8,10,12,14$ in magnitude, giving $\\{-14,-12,-10,-8\\}$ when negative. The distances are\n$$\n\\left|-\\frac{47}{4}-(-12)\\right|=\\frac{1}{4},\\quad \\left|-\\frac{47}{4}-(-10)\\right|=\\frac{7}{4},\n$$\nso by round-to-nearest (no tie), $\\operatorname{round}(B+C)=-12$. Then\n$$\nA+(-12) = 12+(-12)=0,\n$$\nwhich is exactly representable, so $Y=0$.\n\nFinally,\n$$\n|X-Y| = \\left|\\frac{1}{4}-0\\right| = \\frac{1}{4} = 0.25.\n$$", "answer": "$$\\boxed{0.25}$$", "id": "1937506"}]}