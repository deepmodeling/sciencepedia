{"hands_on_practices": [{"introduction": "To truly grasp the Discrete Fourier Transform (DFT), there's no substitute for applying the formula from scratch. This first exercise takes you back to basics, asking you to compute the DFT for the simplest non-trivial signal: a sequence with just two points [@problem_id:2213507]. Working through this foundational example helps demystify the mathematics and reveals the core operations of weighted summation at the heart of Fourier analysis.", "problem": "The Discrete Fourier Transform (DFT) is a fundamental tool in digital signal processing that converts a finite sequence of equally-spaced samples of a function into an equivalent-length sequence of equally-spaced samples of the discrete-time Fourier transform. For a finite sequence of $N$ numbers $x = [x_0, x_1, \\dots, x_{N-1}]$, its DFT, denoted by $X = [X_0, X_1, \\dots, X_{N-1}]$, is defined by the formula:\n$$X_k = \\sum_{n=0}^{N-1} x_n \\cdot \\exp\\left(-i \\frac{2\\pi kn}{N}\\right)$$\nfor $k = 0, 1, \\dots, N-1$. Here, $i$ is the imaginary unit, satisfying $i^2 = -1$.\n\nConsider a simple, real-valued sequence of length $N=2$ given by $x = [a, b]$, where $a$ and $b$ are arbitrary real constants.\n\nCalculate the 2-point DFT of this sequence. Express your answer as a row vector containing the components $X_0$ and $X_1$ in that order.", "solution": "We are asked to find the 2-point Discrete Fourier Transform (DFT) of the sequence $x = [x_0, x_1] = [a, b]$. The size of the sequence is $N=2$. The general formula for the DFT is:\n$$X_k = \\sum_{n=0}^{N-1} x_n \\cdot \\exp\\left(-i \\frac{2\\pi kn}{N}\\right)$$\n\nWe need to calculate the components $X_0$ and $X_1$.\n\nFirst, let's calculate the component $X_0$ by setting $k=0$ in the formula:\n$$X_0 = \\sum_{n=0}^{1} x_n \\cdot \\exp\\left(-i \\frac{2\\pi (0)n}{2}\\right)$$\n$$X_0 = \\sum_{n=0}^{1} x_n \\cdot \\exp(0)$$\nSince $\\exp(0) = 1$, the expression simplifies to:\n$$X_0 = \\sum_{n=0}^{1} x_n = x_0 + x_1$$\nSubstituting the given values $x_0 = a$ and $x_1 = b$, we get:\n$$X_0 = a + b$$\n\nNext, we calculate the component $X_1$ by setting $k=1$ in the formula:\n$$X_1 = \\sum_{n=0}^{1} x_n \\cdot \\exp\\left(-i \\frac{2\\pi (1)n}{2}\\right)$$\n$$X_1 = \\sum_{n=0}^{1} x_n \\cdot \\exp(-i \\pi n)$$\nLet's expand the sum:\n$$X_1 = x_0 \\cdot \\exp(-i \\pi \\cdot 0) + x_1 \\cdot \\exp(-i \\pi \\cdot 1)$$\n$$X_1 = x_0 \\cdot \\exp(0) + x_1 \\cdot \\exp(-i \\pi)$$\nWe know that $\\exp(0)=1$. For the second term, we use Euler's identity, $\\exp(i\\theta) = \\cos(\\theta) + i\\sin(\\theta)$.\n$$\\exp(-i\\pi) = \\cos(-\\pi) + i\\sin(-\\pi) = -1 + i(0) = -1$$\nSubstituting these values back into the expression for $X_1$:\n$$X_1 = x_0 \\cdot (1) + x_1 \\cdot (-1)$$\n$$X_1 = x_0 - x_1$$\nSubstituting the given values $x_0 = a$ and $x_1 = b$, we get:\n$$X_1 = a - b$$\n\nThe resulting DFT sequence is $X = [X_0, X_1] = [a+b, a-b]$. The problem asks for a row vector containing these components in order.", "answer": "$$\\boxed{\\begin{pmatrix} a+b & a-b \\end{pmatrix}}$$", "id": "2213507"}, {"introduction": "The power of the DFT and its fast counterpart, the FFT, lies in transforming abstract data into a meaningful frequency spectrum. But how do we translate the numerical output of an FFT into real-world units like hertz? This practice problem bridges that gap, showing you how to convert an FFT's frequency index into a physical frequency based on the signal's sampling rate [@problem_id:2213513]. This skill is fundamental for anyone working with digital signals, from audio engineering to biomedical analysis.", "problem": "A biomedical engineer is analyzing an Electromyography (EMG) signal, which measures the electrical activity of skeletal muscles, to study muscle fatigue. The signal is captured from an athlete's leg muscle using a surface electrode. The data is sampled at a constant rate of $f_s = 400$ Hz. For spectral analysis, a segment of the signal containing $N = 128$ consecutive data points is processed using a Fast Fourier Transform (FFT) algorithm. The resulting frequency spectrum reveals a prominent peak at the frequency index $k=10$. This peak represents a dominant frequency component in the muscle's firing rate during a specific contraction. Assuming the index $k=0$ corresponds to the DC (Direct Current) component, determine the physical frequency of this dominant component.\n\nExpress your answer as a numerical value in hertz (Hz).", "solution": "For a discrete-time signal sampled at rate $f_s$ and analyzed with an $N$-point DFT/FFT, the frequency spacing (resolution) is\n$$\n\\Delta f = \\frac{f_s}{N}.\n$$\nThe physical frequency corresponding to index $k$ (with $k=0$ as the DC component) is\n$$\nf_k = k\\,\\Delta f = \\frac{k f_s}{N}.\n$$\nWith $f_s = 400$ Hz, $N = 128$, and $k = 10$,\n$$\nf_{10} = \\frac{10 \\times 400}{128} = \\frac{4000}{128} = \\frac{250}{8} = 31.25 \\text{ Hz}.\n$$\nThus, the dominant component is at 31.25 Hz.", "answer": "$$\\boxed{31.25}$$", "id": "2213513"}, {"introduction": "The \"Fast\" in Fast Fourier Transform points to its incredible computational efficiency, which enables a wide range of applications. A prime example is its use in performing convolutions, a common operation in signal filtering and image processing. This exercise demonstrates how to set up a problem for fast linear convolution using the FFT, focusing on the crucial step of zero-padding to ensure a correct result [@problem_id:2213563]. Mastering this concept is key to leveraging the FFT for high-performance scientific computing.", "problem": "A data scientist is analyzing a segment of a high-frequency financial time series. The data segment consists of $N_1 = 50$ discrete data points. To reduce noise and identify underlying trends, the scientist decides to apply a smoothing filter using a moving average. The impulse response of this moving average filter has a length of $N_2 = 10$ points.\n\nThe scientist plans to perform the filtering operation by computing the linear convolution of the data segment with the filter's impulse response. For computational efficiency, this operation will be implemented using the Fast Fourier Transform (FFT) algorithm. To ensure the result is equivalent to a linear convolution (and not a circular one), the signals must be appropriately zero-padded before transformation. The FFT algorithm is most efficient when the transform length is a power of two.\n\nWhat is the minimum power-of-two FFT length required to correctly compute the linear convolution between the data segment and the filter response?", "solution": "Let the data segment length be $N_{1}=50$ and the filter impulse response length be $N_{2}=10$. The length of the linear convolution of two finite-length sequences is\n$$\nN_{\\text{lin}}=N_{1}+N_{2}-1.\n$$\nTo compute the linear convolution via an FFT-based circular convolution, each sequence must be zero-padded so that the circular convolution length $L$ satisfies\n$$\nL\\geq N_{\\text{lin}}=N_{1}+N_{2}-1.\n$$\nBecause the FFT is most efficient for power-of-two lengths, the minimum valid FFT length is the smallest power of two not less than $N_{1}+N_{2}-1$, namely\n$$\nL_{\\min}=2^{\\lceil \\log_{2}(N_{1}+N_{2}-1)\\rceil}.\n$$\nSubstituting the given lengths,\n$$\nN_{\\text{lin}}=50+10-1=59.\n$$\nFind the smallest integer $m$ such that $2^{m}\\geq 59$. Since $2^{5}=32<59$ and $2^{6}=64\\geq 59$, it follows that $m=6$, and hence\n$$\nL_{\\min}=2^{6}=64.\n$$\nTherefore, the minimum power-of-two FFT length required is $64$.", "answer": "$$\\boxed{64}$$", "id": "2213563"}]}