{"hands_on_practices": [{"introduction": "The first step in wielding the power of the Burrows-Wheeler Transform (BWT) is to understand how it is created. This exercise guides you through the fundamental mechanics of the forward BWT, a reversible permutation that rearranges a string's characters based on their context. By working through this example [@problem_id:1606440], you will see how the transform uses cyclic shifts and lexicographical sorting to group similar characters, a key property that makes the output highly amenable to compression.", "problem": "The Burrows-Wheeler Transform (BWT) is a reversible permutation of a string's characters, widely used in data compression algorithms. The transformation process is as follows:\n\n1.  Given an input string `S` of length `n`, append a special end-of-string marker, denoted by `$`. This marker is not present in the original string and is defined to be lexicographically smaller than any other character in the string. Let the new string be `T`.\n2.  Generate all `n+1` cyclic shifts (or rotations) of the string `T`.\n3.  Sort these cyclic shifts lexicographically (alphabetically).\n4.  The output of the BWT, denoted as `L`, is the string formed by concatenating the last character of each sorted cyclic shift.\n\nGiven the binary input string `S = 101101`, determine its Burrows-Wheeler Transform `L`.\n\nWhich of the following represents the correct BWT output `L`?\n\nA. `11101$0`\nB. `$001111`\nC. `1101$01`\nD. `0$10111`\nE. `101101$`", "solution": "We begin with the input string $S=\\text{101101}$ and append the special end-of-string marker, which is defined to be lexicographically smaller than any other character. This produces $T=\\text{101101\\$}$.\n\nGenerate all cyclic shifts of $T$:\n- $\\text{r}_{0}=\\text{101101\\$}$\n- $\\text{r}_{1}=\\text{01101\\$1}$\n- $\\text{r}_{2}=\\text{1101\\$10}$\n- $\\text{r}_{3}=\\text{101\\$101}$\n- $\\text{r}_{4}=\\text{01\\$1011}$\n- $\\text{r}_{5}=\\text{1\\$10110}$\n- $\\text{r}_{6}=\\text{\\$101101}$\n\nSort these cyclic shifts lexicographically using the order $\\$\\lt 0 \\lt 1$:\n- $\\text{r}_{6}=\\text{\\$101101}$\n- $\\text{r}_{4}=\\text{01\\$1011}$\n- $\\text{r}_{1}=\\text{01101\\$1}$\n- $\\text{r}_{5}=\\text{1\\$10110}$\n- $\\text{r}_{3}=\\text{101\\$101}$\n- $\\text{r}_{0}=\\text{101101\\$}$\n- $\\text{r}_{2}=\\text{1101\\$10}$\n\nForm $L$ by taking the last character of each sorted row in order. The last characters are, respectively: $1,1,1,0,1,\\$,0$. Concatenating these gives the BWT output that matches option A.", "answer": "$$\\boxed{A}$$", "id": "1606440"}, {"introduction": "A transformation is only truly useful in data processing if it can be perfectly undone. This practice [@problem_id:1606417] introduces the elegant 'Last-to-First' (LF) mapping, the core algorithm for reversing the BWT. Here, you will use the LF property to reconstruct the original string from its transformed state and a primary index, demonstrating that the BWT preserves all the original information in a structured, recoverable format.", "problem": "The Burrows-Wheeler Transform (BWT) is a reversible text transformation used in data compression algorithms. It rearranges a string of characters into runs of similar characters, which is often more compressible. The transform of an input string is generated by creating a conceptual matrix of all cyclic shifts of the string, sorting these shifts lexicographically, and then extracting the last column of this matrix.\n\nThe output of the BWT consists of two components:\n1.  The transformed string `L`, which is the last column of the sorted matrix of cyclic shifts.\n2.  A primary index `I`, which is the 0-based row index of the original string in the sorted matrix.\n\nTo ensure the original string has a unique representation in the sorted list of shifts and to mark its end, a special end-of-string character, denoted as `$`, is appended to the input string before the transform. This character is defined to be lexicographically smaller than any other character in the alphabet.\n\nGiven the last column `L = 'bb$aa'` and the primary index `I = 2`, determine the original input string. Your final answer should be the reconstructed string *without* the `$` character.", "solution": "We invert the Burrows-Wheeler Transform using the LF-mapping. Let $L$ be the last column, of length $n$. Define the first column $F$ as the characters of $L$ sorted lexicographically, with the end-of-string character $\\$$ ordered before any other character. Define the function $C(c)$ as the number of characters in $L$ that are strictly less than $c$, and for each position $j$ in $L$, define the rank $r(j)$ as the number of occurrences of $L[j]$ in $L[0..j]$. The LF-mapping is then given by\n$$\n\\operatorname{LF}(j)=C(L[j]) + r(j) - 1.\n$$\nStarting from the primary index $I$, which is the row index of the original string in the sorted matrix, the original string with the terminal character, denoted $S\\$, is reconstructed by iterating\n$$\ns[k] = L[j], \\quad j \\leftarrow \\operatorname{LF}(j)\n$$\nfor $k$ from $n-1$ down to $0$, initializing $j=I$.\n\nFor the given data, $L$ has length $n=5$ with positions and characters\n$$\n(0,b),\\ (1,b),\\ (2,\\$),\\ (3,a),\\ (4,a).\n$$\nSorting the characters gives\n$$\nF = [\\$, a, a, b, b].\n$$\nCompute $C(c)$ for the alphabet $\\{\\$,a,b\\}$:\n$$\nC(\\$)=0,\\quad C(a)=1,\\quad C(b)=3.\n$$\nCompute ranks $r(j)$ by scanning $L$ left to right:\n$$\nr(0)=1\\ \\text{for}\\ b,\\quad r(1)=2\\ \\text{for}\\ b,\\quad r(2)=1\\ \\text{for}\\ \\$,\\quad r(3)=1\\ \\text{for}\\ a,\\quad r(4)=2\\ \\text{for}\\ a.\n$$\nApply the LF-mapping:\n$$\n\\operatorname{LF}(0)=3,\\ \\operatorname{LF}(1)=4,\\ \\operatorname{LF}(2)=0,\\ \\operatorname{LF}(3)=1,\\ \\operatorname{LF}(4)=2.\n$$\nReconstruct starting at $j=I=2$:\n$$\nk=4:\\ s[4]=L[2]=\\$, \\ j\\leftarrow \\operatorname{LF}(2)=0;\n$$\n$$\nk=3:\\ s[3]=L[0]=b, \\ j\\leftarrow \\operatorname{LF}(0)=3;\n$$\n$$\nk=2:\\ s[2]=L[3]=a, \\ j\\leftarrow \\operatorname{LF}(3)=1;\n$$\n$$\nk=1:\\ s[1]=L[1]=b, \\ j\\leftarrow \\operatorname{LF}(1)=4;\n$$\n$$\nk=0:\\ s[0]=L[4]=a, \\ j\\leftarrow \\operatorname{LF}(4)=2.\n$$\nThus the reconstructed string with terminator is\n$$ S\\$ = \\text{abab\\$} $$\nso the original input string (without the $\\$$ character) is\n$$\n\\text{abab}.\n$$", "answer": "$$\\boxed{abab}$$", "id": "1606417"}, {"introduction": "Beyond its role as a precursor to compression, the BWT enables incredibly efficient search operations on the original text using only its transformed version. This practice [@problem_id:1606387] challenges you to apply the properties of the Last-to-First (LF) mapping to retrieve a specific character from an unknown original string. Solving this problem reveals why the BWT is a cornerstone of modern bioinformatics tools, allowing for rapid queries on massive genomic datasets without full decompression.", "problem": "In bioinformatics, the Burrows-Wheeler Transform (BWT) is a key component of algorithms used for efficient DNA sequence searching, such as in the FM-index. The BWT rearranges a string into runs of similar characters, making it more compressible. A critical property of the BWT is that it allows for searching and character retrieval without decompressing or fully reconstructing the original string.\n\nOne of the essential data structures derived from the BWT is the `Psi` array (also known as the `Next` array). For a string `T` of length `N`, the `Psi` array is a permutation of `0, 1, ..., N-1` defined by the property `SA[Psi[i]] = (SA[i] + 1) mod N`, where `SA` is the suffix array of `T`. This property means that if the `i`-th row of the BWT matrix corresponds to the suffix starting at index `k`, then the `Psi[i]`-th row corresponds to the suffix starting at index `k+1`. This allows for \"stepping forward\" through the original string's suffixes.\n\nConsider an unknown DNA sequence `S` composed of characters from the alphabet `{A, C, G, T}`. The BWT was applied to the string `S$` (the original string `S` appended with a special end-of-string character `$`, which is defined to be lexicographically smaller than any character in the DNA alphabet). The last column `L` of the resulting BWT matrix is found to be:\n\n```\nL = \"T$GAC\"\n```\n\nYour task is to determine the character at index 2 of the original string `S` (i.e., find `S[2]`, using 0-based indexing). You must do this by using the properties of the BWT and its auxiliary structures, without fully reconstructing the string `S`.", "solution": "Let $T = S\\$$, where $\\$$ is lexicographically smallest. The BWT last column is $L = \\text{\"T\\$GAC\"}$ with indices $0,\\dots,4$:\n- $L[0] = \\text{T}$, $L[1] = \\$$, $L[2] = \\text{G}$, $L[3] = \\text{A}$, $L[4] = \\text{C}$.\n\nThe first column $F$ is the sorted multiset of $L$:\n$$F = \\text{\"\\$ACGT\"},$$\nso $F[0] = \\$$, $F[1] = \\text{A}$, $F[2] = \\text{C}$, $F[3] = \\text{G}$, $F[4] = \\text{T}$.\n\nDefine $C[c]$ as the number of characters in $T$ that are strictly less than $c$ under the order $\\$ < \\text{A} < \\text{C} < \\text{G} < \\text{T}$. From $L$ we obtain\n$$C[\\$] = 0,\\quad C[\\text{A}] = 1,\\quad C[\\text{C}] = 2,\\quad C[\\text{G}] = 3,\\quad C[\\text{T}] = 4.$$\nDefine $\\operatorname{occ}(c,i)$ as the number of occurrences of $c$ in $L[0..i-1]$. The LF-mapping is\n$$\\operatorname{LF}(i) = C[L[i]] + \\operatorname{occ}(L[i], i).$$\nComputing $\\operatorname{occ}$ and $\\operatorname{LF}$ for each $i$:\n- $i=0$: $L[0]=\\text{T}$, $\\operatorname{occ}(\\text{T},0)=0$, so $\\operatorname{LF}(0)=4+0=4$.\n- $i=1$: $L[1]=\\$$, $\\operatorname{occ}(\\$,1)=0$, so $\\operatorname{LF}(1)=0+0=0$.\n- $i=2$: $L[2]=\\text{G}$, $\\operatorname{occ}(\\text{G},2)=0$, so $\\operatorname{LF}(2)=3+0=3$.\n- $i=3$: $L[3]=\\text{A}$, $\\operatorname{occ}(\\text{A},3)=0$, so $\\operatorname{LF(3)}=1+0=1$.\n- $i=4$: $L[4]=\\text{C}$, $\\operatorname{occ}(\\text{C},4)=0$, so $\\operatorname{LF}(4)=2+0=2$.\n\nThus\n$$\\operatorname{LF}: 0\\mapsto 4,\\;1\\mapsto 0,\\;2\\mapsto 3,\\;3\\mapsto 1,\\;4\\mapsto 2.$$\n\nThe $\\Psi$ mapping is the inverse of $\\operatorname{LF}$, defined by $SA[\\Psi[i]] = (SA[i] + 1) \\bmod N$ and equivalently $\\operatorname{LF}(\\Psi(i)) = i$. Inverting the above,\n$$\\Psi(0)=1,\\quad \\Psi(1)=3,\\quad \\Psi(2)=4,\\quad \\Psi(3)=2,\\quad \\Psi(4)=0.$$\n\nBy definition of the BWT, for each row index $i$,\n$$L[i] = T[(SA[i] - 1) \\bmod N].$$\nTherefore, if $SA[i] = (k+1) \\bmod N$, then\n$$L[i] = T[k].$$\n\nWe are asked for $S[2] = T[2]$. Hence we need the row index $i$ such that $SA[i] = 3$. Let $r$ be the row with $SA[r] = N-1$, which is the unique row whose first column entry is $\\$$, i.e., $F[r]=\\$$. From $F$ we see $r=0$.\n\nUsing the property $SA[\\Psi[i]] = (SA[i] + 1) \\bmod N$, starting at $i_{0}=r=0$ (so $SA[i_{0}]=4$), we iterate:\n$$i_{1}=\\Psi(i_{0})=\\Psi(0)=1\\Rightarrow SA[i_{1}]=0,$$\n$$i_{2}=\\Psi(i_{1})=\\Psi(1)=3\\Rightarrow SA[i_{2}]=1,$$\n$$i_{3}=\\Psi(i_{2})=\\Psi(3)=2\\Rightarrow SA[i_{3}]=2,$$\n$$i_{4}=\\Psi(i_{3})=\\Psi(2)=4\\Rightarrow SA[i_{4}]=3.$$\nThus the desired row is $i=i_{4}=4$. Therefore\n$$S[2] = T[2] = L[i] = L[4] = \\text{C}.$$", "answer": "$$\\boxed{C}$$", "id": "1606387"}]}