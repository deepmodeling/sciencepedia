{"hands_on_practices": [{"introduction": "To build a solid foundation in arithmetic coding, we begin with a direct application of its core mechanism. This exercise [@problem_id:1619687] walks you through the step-by-step process of encoding a symbol sequence, showing precisely how the initial interval $[0, 1)$ is progressively narrowed down. By performing this fundamental calculation, you will gain hands-on experience with the iterative update rules that are at the heart of mapping a message to its unique fractional representation.", "problem": "Consider a memoryless source that generates symbols from the alphabet $\\mathcal{S} = \\{A, B, C\\}$. The probability of occurrence for each symbol is given by $P(A) = 0.6$, $P(B) = 0.3$, and $P(C) = 0.1$. You are tasked with encoding the sequence of symbols \"BCA\" using the arithmetic coding algorithm. The initial encoding interval is $[0, 1)$. Determine the final interval $[L_{\\text{final}}, H_{\\text{final}})$ that represents the entire sequence. Express the final lower bound $L_{\\text{final}}$ and the final upper bound $H_{\\text{final}}$ as fractions.", "solution": "The problem asks for the final interval after applying arithmetic coding to the sequence \"BCA\" given a source with specific probabilities. We start with the initial interval $[L_0, H_0) = [0, 1)$.\n\nFirst, we need to establish the cumulative probability distribution for the symbols in the alphabet $\\mathcal{S} = \\{A, B, C\\}$. We will order the alphabet as (A, B, C). The probability of each symbol is $P(A) = 0.6$, $P(B) = 0.3$, and $P(C) = 0.1$.\n\nThe cumulative probability function, which we denote as $F(s)$, gives the sum of probabilities of all symbols that come before $s$ in the defined order. The range for each symbol will be a subinterval of $[0, 1)$ of width equal to its probability.\n-   Symbol A: Range corresponds to $[F(A), F(A)+P(A)) = [0, 0.6)$. So, $F(A)=0$.\n-   Symbol B: Range corresponds to $[F(B), F(B)+P(B)) = [0.6, 0.6+0.3) = [0.6, 0.9)$. So, $F(B)=0.6$.\n-   Symbol C: Range corresponds to $[F(C), F(C)+P(C)) = [0.9, 0.9+0.1) = [0.9, 1.0)$. So, $F(C)=0.9$.\n\nLet's express these probabilities and cumulative probabilities as fractions:\n$P(A) = \\frac{6}{10}$, $P(B) = \\frac{3}{10}$, $P(C) = \\frac{1}{10}$.\n$F(A) = 0$, $F(B) = \\frac{6}{10}$, $F(C) = \\frac{9}{10}$.\n\nThe arithmetic coding algorithm iteratively updates the interval $[L, H)$ for each symbol in the sequence. The update rules are:\n$L_{k+1} = L_k + (H_k - L_k) \\times F(s_{k+1})$\n$H_{k+1} = L_k + (H_k - L_k) \\times (F(s_{k+1}) + P(s_{k+1}))$\nwhere $s_{k+1}$ is the $(k+1)$-th symbol being encoded.\n\n**Step 1: Encode the first symbol, 'B'**\nThe initial interval is $[L_0, H_0) = [0, 1)$. The width of the interval is $W_0 = H_0 - L_0 = 1$.\nThe symbol to encode is 'B'. We use $F(B) = \\frac{6}{10}$ and $P(B) = \\frac{3}{10}$.\n\n$L_1 = L_0 + W_0 \\times F(B) = 0 + 1 \\times \\frac{6}{10} = \\frac{6}{10}$.\n$H_1 = L_0 + W_0 \\times (F(B) + P(B)) = 0 + 1 \\times \\left(\\frac{6}{10} + \\frac{3}{10}\\right) = \\frac{9}{10}$.\n\nAfter encoding 'B', the new interval is $[L_1, H_1) = \\left[\\frac{6}{10}, \\frac{9}{10}\\right)$.\n\n**Step 2: Encode the second symbol, 'C'**\nThe current interval is $[L_1, H_1) = \\left[\\frac{6}{10}, \\frac{9}{10}\\right)$. The width is $W_1 = H_1 - L_1 = \\frac{9}{10} - \\frac{6}{10} = \\frac{3}{10}$.\nThe symbol to encode is 'C'. We use $F(C) = \\frac{9}{10}$ and $P(C) = \\frac{1}{10}$.\n\n$L_2 = L_1 + W_1 \\times F(C) = \\frac{6}{10} + \\frac{3}{10} \\times \\frac{9}{10} = \\frac{6}{10} + \\frac{27}{100} = \\frac{60}{100} + \\frac{27}{100} = \\frac{87}{100}$.\n$H_2 = L_1 + W_1 \\times (F(C) + P(C)) = \\frac{6}{10} + \\frac{3}{10} \\times \\left(\\frac{9}{10} + \\frac{1}{10}\\right) = \\frac{6}{10} + \\frac{3}{10} \\times 1 = \\frac{6}{10} + \\frac{3}{10} = \\frac{9}{10}$.\n\nAfter encoding 'C', the new interval is $[L_2, H_2) = \\left[\\frac{87}{100}, \\frac{9}{10}\\right) = \\left[\\frac{87}{100}, \\frac{90}{100}\\right)$.\n\n**Step 3: Encode the third symbol, 'A'**\nThe current interval is $[L_2, H_2) = \\left[\\frac{87}{100}, \\frac{90}{100}\\right)$. The width is $W_2 = H_2 - L_2 = \\frac{90}{100} - \\frac{87}{100} = \\frac{3}{100}$.\nThe symbol to encode is 'A'. We use $F(A) = 0$ and $P(A) = \\frac{6}{10}$.\n\n$L_{\\text{final}} = L_2 + W_2 \\times F(A) = \\frac{87}{100} + \\frac{3}{100} \\times 0 = \\frac{87}{100}$.\n$H_{\\textorial}} = L_2 + W_2 \\times (F(A) + P(A)) = \\frac{87}{100} + \\frac{3}{100} \\times \\left(0 + \\frac{6}{10}\\right) = \\frac{87}{100} + \\frac{18}{1000} = \\frac{870}{1000} + \\frac{18}{1000} = \\frac{888}{1000}$.\n\nThe final interval after encoding the sequence \"BCA\" is $\\left[\\frac{87}{100}, \\frac{888}{1000}\\right)$.\n\nThe problem asks for the bounds as fractions. We can simplify the upper bound:\n$L_{\\text{final}} = \\frac{87}{100}$. This is irreducible as 87 = 3 * 29 and 100 = 2^2 * 5^2.\n$H_{\\text{final}} = \\frac{888}{1000} = \\frac{444}{500} = \\frac{222}{250} = \\frac{111}{125}$.\n\nSo, the final interval is $\\left[\\frac{87}{100}, \\frac{111}{125}\\right)$.", "answer": "$$\\boxed{\\begin{pmatrix} \\frac{87}{100} & \\frac{111}{125} \\end{pmatrix}}$$", "id": "1619687"}, {"introduction": "Beyond simple calculation, a deeper understanding of arithmetic coding comes from exploring how different inputs affect the output. This thought experiment [@problem_id:1633340] challenges you to predict the relative position of the final interval based on the order of symbols in the input sequence, without using specific probability values. By analyzing the encoding process algebraically, you will uncover an important principle regarding how the composition of the source sequence influences the final interval's location on the number line.", "problem": "In arithmetic coding, a sequence of symbols is mapped to a sub-interval of the interval $[0, 1)$. This problem explores how the order of symbols in a sequence affects the resulting interval's position.\n\nConsider an alphabet $\\mathcal{A} = \\{X, Y, Z\\}$ with respective probabilities of occurrence $P(X)$, $P(Y)$, and $P(Z)$, which are all positive. We are given the relation $P(X) > P(Y) > P(Z)$, and it holds that $P(X) + P(Y) + P(Z) = 1$.\n\nThe encoding process is defined as follows:\n1.  The initial interval is $[0, 1)$.\n2.  The interval is partitioned into sub-intervals for each symbol based on a fixed alphabetical order: X, then Y, then Z.\n    - The sub-interval for X is $[0, P(X))$.\n    - The sub-interval for Y is $[P(X), P(X)+P(Y))$.\n    - The sub-interval for Z is $[P(X)+P(Y), 1)$.\n3.  For each symbol in an input sequence, the current interval is updated to become the corresponding sub-interval, scaled and shifted appropriately. Specifically, if the current interval is $[L, U)$ with width $W = U-L$, processing a symbol $s$ updates the interval to $[L', U')$ where:\n    - $L' = L + W \\cdot C(s)$\n    - $U' = L + W \\cdot (C(s) + P(s))$\n    and $C(s)$ is the cumulative probability of all symbols that appear before $s$ in the fixed alphabetical order (i.e., $C(X)=0$, $C(Y)=P(X)$, $C(Z)=P(X)+P(Y)$).\n\nConsider the two three-symbol sequences: 'XYZ' and 'ZYX'. By applying the arithmetic coding algorithm described, each sequence is mapped to a final interval. Which of these two sequences results in a final interval with a larger lower bound?\n\nA. The sequence 'XYZ'\n\nB. The sequence 'ZYX'\n\nC. The lower bounds are equal.\n\nD. The relationship depends on the specific numerical values of the probabilities $P(X)$, $P(Y)$, and $P(Z)$.", "solution": "The problem asks which sequence, 'XYZ' or 'ZYX', results in a final interval with a larger lower bound. The key insight lies in the first symbol of each sequence and how the initial interval $[0, 1)$ is partitioned. This property, where the numerical order of intervals on the number line corresponds to the lexicographical order of the sequences, is a fundamental feature of arithmetic coding.\n\nAccording to the problem description, the interval is partitioned based on a fixed alphabetical order of the symbols: X, then Y, then Z.\n- The sub-interval for sequences starting with 'X' is $[0, P(X))$.\n- The sub-interval for sequences starting with 'Y' is $[P(X), P(X)+P(Y))$.\n- The sub-interval for sequences starting with 'Z' is $[P(X)+P(Y), 1)$.\n\nThe sequence 'XYZ' starts with the symbol 'X'. Therefore, its final encoded interval, regardless of the subsequent symbols, must be a sub-interval of the initial interval for 'X', which is $[0, P(X))$. This means the lower bound of the final interval for 'XYZ', $L_{\\text{XYZ}}$, must be within this range, so $0 \\le L_{\\text{XYZ}}  P(X)$.\n\nThe sequence 'ZYX' starts with the symbol 'Z'. Its final encoded interval must be a sub-interval of the initial interval for 'Z', which is $[P(X)+P(Y), 1)$. This means the lower bound of the final interval for 'ZYX', $L_{\\text{ZYX}}$, must be greater than or equal to $P(X)+P(Y)$.\n\nSince all probabilities are positive, we have $P(X)+P(Y) > P(X)$. Therefore, we can definitively conclude:\n$$L_{\\text{ZYX}} \\ge P(X)+P(Y) > P(X) > L_{\\text{XYZ}}$$\nThe lower bound for 'ZYX' is strictly larger than the lower bound for 'XYZ'. This result is independent of the specific numerical values of the probabilities, as long as they are positive.", "answer": "$$\\boxed{B}$$", "id": "1633340"}, {"introduction": "The theoretical result of arithmetic coding is a mathematical interval, but a practical compressor must output a finite sequence of bits. This problem [@problem_id:1602898] bridges that gap by tasking you with finding the shortest binary fraction that uniquely identifies the final encoded interval. This final step is crucial for understanding how the abstract concept of a real-valued interval is translated into an efficient, prefix-free binary code ready for transmission or storage.", "problem": "A simple weather model for a remote planet generates one of two states each day: 'Clear' (C) or 'Storm' (S). Based on long-term data, the probability of a 'Clear' day is $P(C) = 2/3$, and the probability of a 'Storm' day is $P(S) = 1/3$. To save bandwidth, a sequence of weather states is compressed into a single binary number using an encoding scheme.\n\nThe scheme works as follows:\n1.  Start with the real interval $[0, 1)$.\n2.  For the first observation in the sequence, partition the current interval into sub-intervals corresponding to the possible states, ordered alphabetically ('Clear', 'Storm'). The size of each sub-interval is proportional to the probability of that state.\n3.  Select the sub-interval that corresponds to the observed state. This becomes the new current interval.\n4.  Repeat steps 2 and 3 for each subsequent observation in the sequence.\n\nThe final encoded message must be a binary fraction that serves as a prefix code. This means the dyadic interval corresponding to the binary fraction (e.g., the fraction $0.101$ corresponds to the interval $[0.101_2, 0.110_2) = [5/8, 6/8)$) must be entirely contained within the final interval calculated from the encoding scheme.\n\nFor an observed two-day sequence of 'Clear' then 'Storm', determine the shortest possible binary fraction (e.g., 0.1, 0.01, 0.110) that can be used as the encoded message.", "solution": "The problem asks for the shortest binary fraction that can uniquely encode the sequence 'Clear'-'Storm' (CS). We first need to determine the final interval corresponding to this sequence using the described arithmetic encoding procedure.\n\nLet the alphabet be ordered alphabetically: (C, S). The probabilities are given as $P(C) = 2/3$ and $P(S) = 1/3$.\n\n**Step 1: Process the first symbol 'C'.**\nThe initial interval is $[L_0, H_0) = [0, 1)$. The width of this interval is $W_0 = H_0 - L_0 = 1$.\nWe partition this interval based on the probabilities of C and S.\nThe sub-interval for 'C' is $[L_0, L_0 + P(C) \\times W_0)$, which is $[0, 0 + (2/3) \\times 1) = [0, 2/3)$.\nThe sub-interval for 'S' is $[L_0 + P(C) \\times W_0, H_0)$, which is $[2/3, 1)$.\nSince the first symbol is 'C', the new interval is $[L_1, H_1) = [0, 2/3)$.\n\n**Step 2: Process the second symbol 'S'.**\nThe current interval is $[L_1, H_1) = [0, 2/3)$. The width of this interval is $W_1 = H_1 - L_1 = 2/3$.\nWe partition this new interval for the second symbol.\nThe sub-interval for 'C' is $[L_1, L_1 + P(C) \\times W_1) = [0, 0 + (2/3) \\times (2/3)) = [0, 4/9)$.\nThe sub-interval for 'S' is $[L_1 + P(C) \\times W_1, H_1) = [0 + (2/3) \\times (2/3), 2/3) = [4/9, 2/3)$.\nSince the second symbol is 'S', the final interval for the sequence 'CS' is $[L_{final}, H_{final}) = [4/9, 2/3)$.\n\n**Step 3: Find the shortest binary fraction for the prefix code.**\nThe final interval is $[4/9, 2/3)$. In decimal, this is approximately $[0.444..., 0.666...)$.\nWe need to find the shortest binary fraction, let's call it $T = (0.b_1b_2...b_k)_2$, such that the dyadic interval it represents, $[T, T + 2^{-k})$, is completely contained within $[4/9, 2/3)$.\n\nLet's test for increasing lengths $k$.\n\nFor $k=1$:\nThe possible dyadic intervals are $[0, 1/2)$ and $[1/2, 1)$.\nNeither is fully contained in $[4/9, 2/3) \\approx [0.444, 0.667)$. For example, $[1/2, 1)$ has an upper bound of 1, which is greater than $2/3$.\n\nFor $k=2$:\nThe dyadic intervals are of width $2^{-2} = 1/4$. They are $[0, 1/4)$, $[1/4, 1/2)$, $[1/2, 3/4)$, and $[3/4, 1)$.\nLet's check the interval $[1/2, 3/4) = [0.5, 0.75)$.\nThe lower bound $1/2 = 0.5$ is greater than $4/9 \\approx 0.444$. So $1/2$ is in the final interval.\nThe upper bound $3/4 = 0.75$ is greater than $2/3 \\approx 0.667$. So this dyadic interval is not fully contained in the final interval. No other 2-bit dyadic interval is a candidate.\n\nFor $k=3$:\nThe dyadic intervals are of width $2^{-3} = 1/8 = 0.125$.\nLet's check the dyadic intervals around our target range $[0.444..., 0.667...)$.\nThe interval starting at $0.5$ is a good candidate. This corresponds to the binary prefix '100', so the fraction is $T = (0.100)_2 = 1/2 = 4/8$.\nThe dyadic interval is $[(0.100)_2, (0.100)_2 + 2^{-3}) = [1/2, 1/2 + 1/8) = [4/8, 5/8) = [0.5, 0.625)$.\nLet's check if this interval is contained in $[4/9, 2/3)$:\n- Check lower bound: Is $4/9 \\le 1/2$? Yes, since $8 \\le 9$.\n- Check upper bound: Is $5/8  2/3$? Yes, since $15  16$.\nBoth conditions are met. The dyadic interval $[1/2, 5/8)$ is entirely contained within $[4/9, 2/3)$.\n\nSince we found a valid prefix code of length 3, and we showed that no code of length 1 or 2 exists, the shortest possible prefix code must have length 3. The specific prefix is '100'.\nThe binary fraction corresponding to this shortest prefix is $(0.100)_2$.\n\nThus, the shortest binary fraction that satisfies the prefix code condition is $0.100$. Note that while the value is $0.5$, the representation must be given with three bits to signify that it is a 3-bit prefix code, distinguishing it from the insufficient 1-bit prefix '1' (representing $0.1_2$) or 2-bit prefix '10' (representing $0.10_2$).", "answer": "$$\\boxed{0.100}$$", "id": "1602898"}]}