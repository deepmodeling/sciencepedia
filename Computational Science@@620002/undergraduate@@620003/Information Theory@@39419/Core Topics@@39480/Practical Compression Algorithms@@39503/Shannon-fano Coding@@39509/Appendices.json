{"hands_on_practices": [{"introduction": "The first step in mastering any algorithm is to apply it directly. This exercise provides a concrete scenario with a simple information source, allowing you to walk through the Shannon-Fano encoding procedure step-by-step. By sorting symbols by probability and recursively partitioning them, you will practice the core mechanics of generating an efficient, variable-length prefix code [@problem_id:1658125].", "problem": "A deep-space probe monitors a specific stellar phenomenon and transmits observations back to Earth. The probe can send one of three distinct signal types, denoted as `{A, B, C}`. Due to the nature of the phenomenon, these signals are not sent with equal frequency. Long-term observation has established the following probabilities for each signal: the probability of signal `A` is $p_A = 0.55$, the probability of signal `B` is $p_B = 0.30$, and the probability of signal `C` is $p_C = 0.15$.\n\nTo conserve transmission power, the probe uses a specific algorithm to generate a variable-length binary code for these signals. The algorithm follows these steps:\n1.  List the signals in descending order of their probabilities.\n2.  Divide this sorted list into two contiguous sub-groups. The division point is chosen such that the sum of probabilities in the first sub-group is as close as possible to the sum of probabilities in the second sub-group.\n3.  Assign the bit `0` as the prefix for all signals in the first sub-group and the bit `1` as the prefix for all signals in the second sub-group.\n4.  Repeat steps 2 and 3 on each sub-group that contains more than one signal, appending new bits to the codes, until every signal is in a sub-group of its own.\n\nUsing this specific encoding algorithm, determine the final binary string that would be transmitted for the message sequence `ABA`.", "solution": "We apply the stated variable-length coding algorithm (Shannon-Fano style) to the signals with probabilities $p_A = 0.55$, $p_B = 0.30$, and $p_C = 0.15$. First, sort in descending order: $(A, 0.55)$, $(B, 0.30)$, $(C, 0.15)$. Next, choose the division point to make the sums of the two contiguous sub-groups as close as possible. If we split after $A$, then\n$$\nS_{1} = 0.55,\\quad S_{2} = 0.30 + 0.15 = 0.45,\\quad |S_{1} - S_{2}| = 0.10.\n$$\nIf we split after $B$, then\n$$\nS_{1} = 0.55 + 0.30 = 0.85,\\quad S_{2} = 0.15,\\quad |S_{1} - S_{2}| = 0.70.\n$$\nThe split after $A$ minimizes the difference, so assign prefix $0$ to the first sub-group $\\{A\\}$ and prefix $1$ to the second sub-group $\\{B, C\\}$. Now recurse on $\\{B, C\\}$, which is $(B, 0.30)$, $(C, 0.15)$. The only contiguous split is between $B$ and $C$, giving\n$$\nS_{1} = 0.30,\\quad S_{2} = 0.15,\\quad |S_{1} - S_{2}| = 0.15.\n$$\nAssign $0$ to $B$ and $1$ to $C$ within this sub-group, appending to their existing prefix $1$. Therefore, the final codewords are\n$$\nA \\to 0,\\quad B \\to 10,\\quad C \\to 11.\n$$\nTo encode the message sequence $A B A$, concatenate the corresponding codewords:\n$$\nA \\to 0,\\quad B \\to 10,\\quad A \\to 0 \\;\\;\\Rightarrow\\;\\; 0\\,10\\,0 = 0100.\n$$\nThus, the transmitted binary string for $A B A$ is $0100$.", "answer": "$$\\boxed{0100}$$", "id": "1658125"}, {"introduction": "A deeper understanding of an algorithm comes from the ability to reason backward from its results. This problem challenges you to do just that by providing a finished Shannon-Fano codebook and asking you to deduce the original probability distribution's characteristics. Solving this will reinforce your intuition about the fundamental principle that Shannon-Fano assigns shorter codewords to more probable symbols [@problem_id:1658114].", "problem": "An information source is modeled as a discrete memoryless source with a three-symbol alphabet $S = \\{A, B, C\\}$. The probabilities of these symbols are denoted by $p_A$, $p_B$, and $p_C$, respectively. It is known that all three probabilities are non-zero and distinct from one another.\n\nA variable-length binary code for this source is constructed using the Shannon-Fano algorithm. The resulting codeword assignment is as follows:\n- Symbol A is encoded as '0'.\n- Symbol B is encoded as '10'.\n- Symbol C is encoded as '11'.\n\nBased on this information, which one of the following statements correctly describes the relationship between the symbol probabilities?\n\nA. $p_A > p_B > p_C$\n\nB. $p_C > p_B > p_A$\n\nC. $p_B > p_A > p_C$\n\nD. $p_A > p_C > p_B$\n\nE. $p_C > p_A > p_B$\n\nF. The given code is impossible to generate with the Shannon-Fano algorithm for any probability distribution.", "solution": "The problem requires us to deduce the ordering of the probabilities $p_A$, $p_B$, and $p_C$ by reverse-engineering the steps of the Shannon-Fano algorithm that led to the given codebook.\n\nThe Shannon-Fano algorithm proceeds as follows:\n1.  The source symbols are sorted in descending order of their probabilities.\n2.  The sorted list is partitioned into two contiguous sub-lists such that the sum of probabilities in each sub-list is as close to equal as possible.\n3.  All symbols in the first sub-list are assigned a '0' as the first bit of their code, and all symbols in the second sub-list are assigned a '1'.\n4.  The process is repeated recursively for each sub-list until each sub-list contains only a single symbol.\n\nLet's analyze the given codebook in reverse.\n\n**Step 1: Analyze the first partition.**\nThe codewords are $C(A) = '0'$, $C(B) = '10'$, and $C(C) = '11'$.\nNotice that the code for symbol A starts with a '0', while the codes for symbols B and C both start with a '1'. This implies that at the very first step of the algorithm, the set of symbols $\\{A, B, C\\}$ was partitioned into two groups: $\\{A\\}$ and $\\{B, C\\}$. The first group, $\\{A\\}$, was assigned the bit '0', and the second group, $\\{B, C\\}$, was assigned the bit '1'.\n\n**Step 2: Relate the first partition to the symbol probabilities.**\nFor the partition to be $\\{A\\}$ and $\\{B, C\\}$, symbol A must be at one end of the probability-sorted list (either the most or least probable symbol) so that it can be separated contiguously. The fundamental principle of efficient variable-length coding is to assign shorter codewords to more probable symbols. Since symbol A received the shortest possible non-empty codeword (length 1), it must correspond to the symbol with the highest probability. Therefore, $p_A$ must be the largest probability.\n\n**Step 3: Analyze the second partition.**\nThe sub-list $\\{B, C\\}$ was processed next, with the prefix '1' already assigned. The algorithm is applied to this sub-list.\n1.  The symbols B and C are sorted by probability.\n2.  The sorted list is partitioned. Since there are only two, the partition is simply $\\{s'_1\\}$ and $\\{s'_2\\}$, where $s'_1$ is the more probable of the two and $s'_2$ is the less probable.\n3.  A '0' is appended for the first symbol ($s'_1$) and a '1' is appended for the second ($s'_2$).\n\nThe resulting codes are $C(B) = '10'$ and $C(C) = '11'$. The bit appended to the common prefix '1' is '0' for symbol B and '1' for symbol C.\nAccording to the algorithm's convention (assigning '0' to the first part of a split), the '0' is assigned to the symbol with the higher probability within the subgroup. Therefore, B must be more probable than C.\nThis gives us the relation: $p_B > p_C$.\n\n**Step 4: Combine the findings.**\nFrom Step 2, we deduced that $p_A$ is the largest probability:\n$p_A > p_B$ and $p_A > p_C$.\n\nFrom Step 3, we deduced the relative ordering of the other two probabilities:\n$p_B > p_C$.\n\nCombining these two results, we get the complete probability ordering:\n$p_A > p_B > p_C$.\n\nThis corresponds to option A. Let's confirm this logic holds. If $p_A > p_B > p_C$, the sorted list is (A, B, C). The first split is between {A} and {B, C} if $|p_A - (p_B+p_C)|  |(p_A+p_B) - p_C|$. This inequality generally holds if $p_A$ is sufficiently large (e.g., $p_A \\ge p_B+p_C$). Assuming this condition, the first split is {A} | {B, C}. Assigning '0' to the first group and '1' to the second gives $C(A)='0'$ and a prefix of '1' for B and C. The subgroup {B, C} is already sorted ($p_B > p_C$), so the split is {B} | {C}. Assigning '0' to the first and '1' to the second gives the final codes $C(B)='10'$ and $C(C)='11'$. The logic is consistent.", "answer": "$$\\boxed{A}$$", "id": "1658114"}, {"introduction": "Why are the steps of an algorithm, like sorting, so crucial? This thought experiment demonstrates the importance of the initial probability-sorting step in the Shannon-Fano method by comparing its performance to a hypothetical flawed procedure. By calculating and comparing the average codeword length, $L = \\sum p_i l_i$, in both cases, you will gain a quantitative appreciation for how the algorithm's design directly impacts its compression efficiency [@problem_id:1658132].", "problem": "A discrete memoryless source emits symbols from an alphabet $S = \\{S_1, S_2, S_3, S_4\\}$ with corresponding probabilities of occurrence $P = \\{0.1, 0.5, 0.2, 0.2\\}$.\n\nThe standard Shannon-Fano encoding algorithm for generating a prefix-free binary code is defined by the following recursive procedure:\n1.  Sort the source symbols in descending order of their probabilities.\n2.  Partition the sorted list of symbols into two sub-lists, such that the sum of probabilities in each sub-list is as nearly equal as possible.\n3.  Assign the bit '0' as the prefix for all symbols in the first sub-list, and the bit '1' for all symbols in the second sub-list.\n4.  Repeat this process for each sub-list containing more than one symbol until every symbol has a unique codeword.\n\nNow, consider a flawed procedure where an engineer forgets the first step. They apply the Shannon-Fano partitioning directly to the symbols in the given, unsorted order: $S_1$ (with probability 0.1), followed by $S_2$ (0.5), then $S_3$ (0.2), and finally $S_4$ (0.2). In this flawed procedure, the relative order of symbols is never changed.\n\nCalculate the absolute difference between the average codeword length obtained from the standard (correct) Shannon-Fano algorithm and the one obtained from this specific flawed procedure. Express your final answer in bits/symbol.", "solution": "We are given a discrete memoryless source with symbols $S=\\{S_{1},S_{2},S_{3},S_{4}\\}$ and probabilities $P=\\{0.1,0.5,0.2,0.2\\}$. The average codeword length for a code with codeword lengths $\\{l_{i}\\}$ is defined as\n$$\nL=\\sum_{i=1}^{4} p_{i} l_{i}.\n$$\n\nFirst, apply the standard (correct) Shannon-Fano algorithm.\n\nStep 1 (sort): Order symbols by descending probabilities: $S_{2}$ with $0.5$, $S_{3}$ with $0.2$, $S_{4}$ with $0.2$, $S_{1}$ with $0.1$.\n\nStep 2 (first partition): Split into two sublists with sums as equal as possible. Taking $\\{S_{2}\\}$ gives sum $0.5$ and the remainder $\\{S_{3},S_{4},S_{1}\\}$ also sums to $0.5$. Assign prefix $0$ to $\\{S_{2}\\}$ and $1$ to $\\{S_{3},S_{4},S_{1}\\}$.\n\nStep 3 (second partition on $\\{S_{3},S_{4},S_{1}\\}$): The ordered list has probabilities $0.2,0.2,0.1$ with total $0.5$. Possible splits:\n- $\\{S_{3}\\}$ vs $\\{S_{4},S_{1}\\}$ gives $0.2$ vs $0.3$ (difference $0.1$),\n- $\\{S_{3},S_{4}\\}$ vs $\\{S_{1}\\}$ gives $0.4$ vs $0.1$ (difference $0.3$).\nChoose $\\{S_{3}\\}$ vs $\\{S_{4},S_{1}\\}$. Assign an extra $0$ to $\\{S_{3}\\}$ and $1$ to $\\{S_{4},S_{1}\\}$, yielding prefixes $10$ for $S_{3}$ and $11$ for $S_{4},S_{1}$.\n\nStep 4 (third partition on $\\{S_{4},S_{1}\\}$): Split $\\{S_{4}\\}$ (sum $0.2$) vs $\\{S_{1}\\}$ (sum $0.1$). Assign $0$ to $S_{4}$ and $1$ to $S_{1}$, yielding codes $110$ for $S_{4}$ and $111$ for $S_{1}$.\n\nThus the standard Shannon-Fano codes and lengths are:\n- $S_{2}: 0$ with $l_{2}=1$,\n- $S_{3}: 10$ with $l_{3}=2$,\n- $S_{4}: 110$ with $l_{4}=3$,\n- $S_{1}: 111$ with $l_{1}=3$.\n\nCompute the average length:\n$$\nL_{\\text{SF}}=0.5\\cdot 1+0.2\\cdot 2+0.2\\cdot 3+0.1\\cdot 3=0.5+0.4+0.6+0.3=1.8.\n$$\n\nNext, apply the flawed procedure (no sorting; preserve the initial order $S_{1},S_{2},S_{3},S_{4}$).\n\nStep 1 (first partition on $[S_{1},S_{2},S_{3},S_{4}]$): Cumulative sums are $0.1$, $0.6$, $0.8$. Candidate splits:\n- $\\{S_{1}\\}$ vs $\\{S_{2},S_{3},S_{4}\\}$ gives $0.1$ vs $0.9$ (difference $0.8$),\n- $\\{S_{1},S_{2}\\}$ vs $\\{S_{3},S_{4}\\}$ gives $0.6$ vs $0.4$ (difference $0.2$),\n- $\\{S_{1},S_{2},S_{3}\\}$ vs $\\{S_{4}\\}$ gives $0.8$ vs $0.2$ (difference $0.6$).\nChoose $\\{S_{1},S_{2}\\}$ vs $\\{S_{3},S_{4}\\}$. Assign $0$ to $\\{S_{1},S_{2}\\}$ and $1$ to $\\{S_{3},S_{4}\\}$.\n\nStep 2 (second partition on $\\{S_{1},S_{2}\\}$ with probabilities $0.1,0.5$): Split $\\{S_{1}\\}$ vs $\\{S_{2}\\}$, assign $0$ to $S_{1}$ and $1$ to $S_{2}$. Codes become $00$ for $S_{1}$ and $01$ for $S_{2}$.\n\nStep 3 (second partition on $\\{S_{3},S_{4}\\}$ with probabilities $0.2,0.2$): Split $\\{S_{3}\\}$ vs $\\{S_{4}\\}$, assign $0$ to $S_{3}$ and $1$ to $S_{4}$. Codes become $10$ for $S_{3}$ and $11$ for $S_{4}$.\n\nThus the flawed codes have lengths $l_{1}=2$, $l_{2}=2$, $l_{3}=2$, $l_{4}=2$. The average length is\n$$\nL_{\\text{flawed}}=\\sum_{i=1}^{4} p_{i}\\cdot 2=2.\n$$\n\nThe requested absolute difference between the average codeword lengths is\n$$\n|L_{\\text{SF}}-L_{\\text{flawed}}|=|1.8-2|=0.2.\n$$\nThis value is in bits per symbol.", "answer": "$$\\boxed{0.2}$$", "id": "1658132"}]}