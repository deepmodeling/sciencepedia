{"hands_on_practices": [{"introduction": "To build a solid foundation, we begin with a direct application of Hamming distance. This exercise asks you to compute the 'dissimilarity metric' between two commands in a hypothetical digital system, which is precisely the Hamming distance between their binary representations [@problem_id:1628141]. By working through this calculation, you will solidify your understanding of the fundamental definition of Hamming distance as a simple count of differing bits.", "problem": "In a legacy digital control system, numerical commands are entered as two-digit decimal numbers, ranging from 00 to 99. Each decimal digit is individually converted into a 4-bit binary representation before being processed. The encoding scheme is as follows: '0' is encoded as 0000, '1' as 0001, '2' as 0010, '3' as 0011, '4' as 0100, '5' as 0101, '6' as 0110, '7' as 0111, '8' as 1000, and '9' as 1001. A two-digit number, say $D_1 D_0$, is therefore represented by an 8-bit binary string formed by concatenating the 4-bit code for $D_1$ and the 4-bit code for $D_0$.\n\nThe system's diagnostic software includes a function to compute a 'dissimilarity metric' between two commands, which is defined as the total number of bit positions at which their 8-bit binary representations differ.\n\nCalculate the dissimilarity metric between the command '27' and the command '91'.", "solution": "The encoding is the standard 4-bit mapping for each decimal digit. For the two-digit commands, the 8-bit representation is formed by concatenating the codes of the two digits.\n\nEncode each digit:\n$$2 \\mapsto 0010,\\quad 7 \\mapsto 0111,\\quad 9 \\mapsto 1001,\\quad 1 \\mapsto 0001.$$\nThus,\n$$\\text{command }27 \\rightarrow 0010\\,0111,\\quad \\text{command }91 \\rightarrow 1001\\,0001.$$\n\nThe dissimilarity metric equals the Hamming distance, which is the number of differing bit positions, equivalently the Hamming weight of the bitwise XOR. Compute XOR nibble-wise:\n$$0010 \\oplus 1001 = 1011 \\quad \\text{(Hamming weight }=3),$$\n$$0111 \\oplus 0001 = 0110 \\quad \\text{(Hamming weight }=2).$$\nSumming gives the total number of differing bits:\n$$3+2=5.$$", "answer": "$$\\boxed{5}$$", "id": "1628141"}, {"introduction": "Beyond comparing two individual strings, the true power of Hamming distance in information theory lies in characterizing entire sets of valid messages, known as codebooks. This practice challenges you to determine the minimum Hamming distance of a given codebook, a crucial metric that defines the code's error-detecting capability [@problem_id:1628128]. Understanding how to find this value is the first step toward designing robust communication systems.", "problem": "In a rudimentary digital communication system designed for a small set of commands, information is encoded using a binary block code. The set of all valid binary sequences that can be transmitted is called the codebook. For this system, each command is represented by a 4-bit codeword. The codebook, denoted by $C$, is defined as the set:\n$$C = \\{0011, 1100, 1010, 0101\\}$$\nTo evaluate the error-detecting capability of this code, we need to determine its minimum Hamming distance. The Hamming distance, $d(v, w)$, between two binary strings $v$ and $w$ of equal length is defined as the number of positions at which their corresponding bits are different. The minimum Hamming distance of a codebook, $d_{min}$, is the smallest Hamming distance found between any two distinct codewords within that codebook.\n\nCalculate the minimum Hamming distance, $d_{min}$, for the given codebook $C$.", "solution": "The problem asks for the minimum Hamming distance, $d_{min}$, of the codebook $C = \\{0011, 1100, 1010, 0101\\}$. The minimum Hamming distance is the smallest distance between any pair of distinct codewords in $C$.\n\nLet the four codewords be:\n$c_1 = 0011$\n$c_2 = 1100$\n$c_3 = 1010$\n$c_4 = 0101$\n\nTo find $d_{min}$, we must compute the Hamming distance for all $\\binom{4}{2} = 6$ pairs of distinct codewords. A convenient way to do this is to compute the bitwise Exclusive OR (XOR) for each pair and then count the number of 1s (the Hamming weight) in the result.\n\n1.  $d(c_1, c_2) = d(0011, 1100)$: $0011 \\oplus 1100 = 1111$. Weight is 4.\n2.  $d(c_1, c_3) = d(0011, 1010)$: $0011 \\oplus 1010 = 1001$. Weight is 2.\n3.  $d(c_1, c_4) = d(0011, 0101)$: $0011 \\oplus 0101 = 0110$. Weight is 2.\n4.  $d(c_2, c_3) = d(1100, 1010)$: $1100 \\oplus 1010 = 0110$. Weight is 2.\n5.  $d(c_2, c_4) = d(1100, 0101)$: $1100 \\oplus 0101 = 1001$. Weight is 2.\n6.  $d(c_3, c_4) = d(1010, 0101)$: $1010 \\oplus 0101 = 1111$. Weight is 4.\n\nThe set of all pairwise Hamming distances is $\\{4, 2, 2, 2, 2, 4\\}$.\n\nThe minimum Hamming distance, $d_{min}$, is the smallest value in this set.\n$$d_{min} = \\min(\\{4, 2, 2, 2, 2, 4\\}) = 2$$\nTherefore, the minimum Hamming distance of the codebook $C$ is 2.", "answer": "$$\\boxed{2}$$", "id": "1628128"}, {"introduction": "Real-world communication channels are rarely perfect; they introduce errors or 'noise'. This final practice moves from the deterministic world of code design to the probabilistic reality of a noisy channel by calculating the expected Hamming distance for a message sent over a Binary Symmetric Channel (BSC) [@problem_id:1628134]. This exercise will help you connect the abstract properties of a code to its practical performance under uncertainty, a key skill in communication engineering.", "problem": "A digital communication system is designed to transmit a single bit of information ('0' or '1') by using a simple error-correcting code. The code used is the repetition code of length 5, denoted as $R_5$. In this scheme, the bit '0' is encoded as the codeword $C_0 = \\text{'00000'}$ and the bit '1' is encoded as the codeword $C_1 = \\text{'11111'}$.\n\nThe encoded message is sent over a Binary Symmetric Channel (BSC), a communication channel where each transmitted bit independently has a probability $p$ of being flipped to the opposite value. Suppose the codeword $C_0$ is transmitted through a BSC with a bit-flip probability of $p = 0.15$. Let the received word be denoted by $W_R$.\n\nThe Hamming distance between two binary strings of equal length is defined as the number of positions at which the corresponding symbols are different.\n\nCalculate the expected Hamming distance between the received word $W_R$ and the codeword $C_1$ that was *not* sent. Give your answer as a real number rounded to three significant figures.", "solution": "The transmitted codeword is $C_{0}=\\text{'00000'}$. Through a Binary Symmetric Channel with bit-flip probability $p$, each transmitted $0$ remains $0$ with probability $1-p$ and flips to $1$ with probability $p$, independently across positions.\n\nLet $W_{R}$ be the received word and consider the Hamming distance to $C_{1}=\\text{'11111'}$. The Hamming distance counts positions where $W_{R}$ differs from $1$, which are precisely the positions where $W_{R}$ equals $0$. Define indicator variables $X_{i}$ for $i=1,\\dots,5$ by\n$$\nX_{i}=\\begin{cases}\n1, & \\text{if } W_{R,i}\\neq 1 \\\\\n0, & \\text{otherwise}\n\\end{cases}\n$$\nSince $C_{0}$ was sent, $W_{R,i}=0$ with probability $1-p$, hence\n$$\n\\mathbb{P}(X_{i}=1)=1-p,\\quad \\mathbb{E}[X_{i}]=1-p.\n$$\nThe Hamming distance is $D=\\sum_{i=1}^{5}X_{i}$. By linearity of expectation,\n$$\n\\mathbb{E}[D]=\\sum_{i=1}^{5}\\mathbb{E}[X_{i}]=5(1-p).\n$$\nSubstituting $p=0.15$,\n$$\n\\mathbb{E}[D]=5(1-0.15)=5\\cdot 0.85=4.25.\n$$\nRounded to three significant figures, the expected Hamming distance is $4.25$.", "answer": "$$\\boxed{4.25}$$", "id": "1628134"}]}