{"hands_on_practices": [{"introduction": "The Kraft-McMillan inequality serves as a fundamental checkpoint in the design of prefix codes. Before investing time in constructing a code, we must first verify if the desired codeword lengths are even theoretically possible. This exercise provides essential practice in applying this litmus test to determine the feasibility of different code length schemes. [@problem_id:1636182]", "problem": "An engineer is designing a binary encoding scheme for a simplified control system. The system has four unique commands that need to be represented as binary codewords. For a code to be instantaneously decodable, it must be a prefix code, meaning no codeword is a prefix of any other codeword. The engineer is evaluating two possible sets of codeword lengths (in bits) for the four commands:\n\nScheme A: A set of lengths $\\{1, 3, 3, 3\\}$.\n\nScheme B: A set of lengths $\\{2, 2, 2, 3\\}$.\n\nWhich of the following statements is correct regarding the feasibility of constructing a binary prefix code from these length sets?\n\nA. Only Scheme A can be used to construct a valid prefix code.\n\nB. Only Scheme B can be used to construct a valid prefix code.\n\nC. Both Scheme A and Scheme B can be used to construct a valid prefix code.\n\nD. Neither Scheme A nor Scheme B can be used to construct a valid prefix code.", "solution": "To determine whether a given multiset of binary codeword lengths can form an instantaneous (prefix) code, use the Kraft-McMillan inequality for binary codes: for lengths $\\{l_{i}\\}_{i=1}^{n}$, a binary prefix code exists if and only if\n$$\n\\sum_{i=1}^{n}2^{-l_{i}} \\leq 1.\n$$\n\nEvaluate Scheme A with lengths $\\{1,3,3,3\\}$:\n$$\n\\sum 2^{-l_{i}} = 2^{-1} + 2^{-3} + 2^{-3} + 2^{-3} = \\frac{1}{2} + 3 \\cdot \\frac{1}{8} = \\frac{4}{8} + \\frac{3}{8} = \\frac{7}{8} \\leq 1.\n$$\nBy the Kraft-McMillan inequality, a binary prefix code exists for Scheme A.\n\nEvaluate Scheme B with lengths $\\{2,2,2,3\\}$:\n$$\n\\sum 2^{-l_{i}} = 3 \\cdot 2^{-2} + 2^{-3} = 3 \\cdot \\frac{1}{4} + \\frac{1}{8} = \\frac{3}{4} + \\frac{1}{8} = \\frac{6}{8} + \\frac{1}{8} = \\frac{7}{8} \\leq 1.\n$$\nBy the same criterion, a binary prefix code also exists for Scheme B.\n\nSince the Kraft-McMillan inequality is both necessary and sufficient for the existence of a binary prefix code with given lengths, both schemes are feasible.", "answer": "$$\\boxed{C}$$", "id": "1636182"}, {"introduction": "Moving beyond simple verification, this practice delves into a common engineering challenge: optimization under constraints. Imagine you have a large set of desired codeword lengths, but you cannot use them all. This problem demonstrates how to treat the Kraft-McMillan inequality as a budget constraint and apply an efficient greedy algorithm to select the largest possible subset of codewords that can form a valid prefix code. [@problem_id:1636248]", "problem": "An information theorist is designing a binary prefix code for a set of symbols. Due to specific constraints related to the symbol semantics, a list of desired codeword lengths has been proposed. However, it is not guaranteed that a prefix code with this exact set of lengths can be constructed.\n\nFor any binary prefix code with $N$ codewords of lengths $l_1, l_2, \\ldots, l_N$, the Kraft-McMillan inequality must be satisfied:\n$$ \\sum_{i=1}^{N} 2^{-l_i} \\le 1 $$\nConversely, if a set of integer lengths satisfies this inequality, a binary prefix code with these lengths is guaranteed to exist.\n\nThe proposed multiset of codeword lengths is given by the following counts:\n- One codeword of length 2\n- Two codewords of length 3\n- Six codewords of length 4\n- Six codewords of length 5\n\nYour task is to determine the size of the largest possible subset of these proposed codewords that can form a valid binary prefix code. In other words, what is the maximum number of codewords that can be selected from the given multiset such that their lengths satisfy the Kraft-McMillan inequality?", "solution": "The problem asks for the maximum number of codewords we can select from a given multiset of lengths, such that the selected lengths $\\{l_i\\}$ satisfy the Kraft-McMillan inequality for a binary alphabet, $\\sum_i 2^{-l_i} \\le 1$.\n\nLet the given multiset of lengths be $L$. We need to find a subset $S \\subseteq L$ that maximizes the size $|S|$ while satisfying $\\sum_{l \\in S} 2^{-l} \\le 1$.\n\nThis is an optimization problem. We want to maximize the number of items in our set $S$, where each item $l \\in L$ has a \"cost\" of $2^{-l}$ and contributes 1 to the total count. The total \"cost\" cannot exceed a budget of 1. To maximize the number of items we can fit within this budget, we should prioritize including the items with the lowest cost.\n\nThe cost of including a codeword of length $l$ is $2^{-l}$. This cost is a decreasing function of $l$. Therefore, longer codewords are \"cheaper\" to include in our sum than shorter ones. This suggests a greedy algorithm: we should iterate through the available codeword lengths, from longest to shortest, and add as many as possible at each step without exceeding the Kraft sum limit of 1.\n\nThe available codeword lengths are given by counts:\n- Length 5: 6 codewords\n- Length 4: 6 codewords\n- Length 3: 2 codewords\n- Length 2: 1 codeword\n\nLet's apply the greedy strategy. We initialize the Kraft sum, $K=0$, and the number of selected codewords, $N=0$.\n\nStep 1: Consider the longest available length, $l=5$.\nThere are 6 codewords of length 5. The cost to include all of them is $6 \\times 2^{-5} = 6 \\times \\frac{1}{32} = \\frac{6}{32} = \\frac{3}{16}$.\nOur current sum is $K = \\frac{3}{16}$. Since $\\frac{3}{16} \\le 1$, we can include all 6 of these codewords.\nOur current count is $N=6$.\n\nStep 2: Consider the next longest length, $l=4$.\nThere are 6 codewords of length 4. The cost to include all of them is $6 \\times 2^{-4} = 6 \\times \\frac{1}{16} = \\frac{6}{16} = \\frac{3}{8}$.\nIf we add these, the new Kraft sum would be $K = \\frac{3}{16} + \\frac{3}{8} = \\frac{3}{16} + \\frac{6}{16} = \\frac{9}{16}$.\nSince $\\frac{9}{16} \\le 1$, we can include all 6 of these codewords.\nOur current count becomes $N = 6 + 6 = 12$. Our current sum is $K = \\frac{9}{16}$.\n\nStep 3: Consider the next longest length, $l=3$.\nThere are 2 codewords of length 3. The cost to include both is $2 \\times 2^{-3} = 2 \\times \\frac{1}{8} = \\frac{2}{8} = \\frac{1}{4}$.\nIf we add these, the new Kraft sum would be $K = \\frac{9}{16} + \\frac{1}{4} = \\frac{9}{16} + \\frac{4}{16} = \\frac{13}{16}$.\nSince $\\frac{13}{16} \\le 1$, we can include both of these codewords.\nOur current count becomes $N = 12 + 2 = 14$. Our current sum is $K = \\frac{13}{16}$.\n\nStep 4: Consider the shortest length, $l=2$.\nThere is 1 codeword of length 2. The cost to include it is $1 \\times 2^{-2} = \\frac{1}{4}$.\nIf we add this, the new Kraft sum would be $K = \\frac{13}{16} + \\frac{1}{4} = \\frac{13}{16} + \\frac{4}{16} = \\frac{17}{16}$.\nSince $\\frac{17}{16} > 1$, we cannot include this codeword. The budget of 1 would be exceeded.\n\nThe greedy process concludes here. We have selected all 6 codewords of length 5, all 6 codewords of length 4, and both codewords of length 3. The codeword of length 2 was rejected.\n\nThe total number of selected codewords is $N = 6 + 6 + 2 = 14$. This is the maximum number of codewords that can be chosen from the proposed set to form a valid binary prefix code. The selected lengths $\\{5,5,5,5,5,5, 4,4,4,4,4,4, 3,3\\}$ satisfy the Kraft-McMillan inequality as their sum is $\\frac{13}{16} \\le 1$.", "answer": "$$\\boxed{14}$$", "id": "1636248"}, {"introduction": "The true power of a mathematical theorem is revealed when it's used not just for calculation, but for reasoning about fundamental limits. This thought-provoking exercise challenges you to investigate whether a complete prefix code can be constructed under a peculiar design constraint: all codeword lengths must be odd. By combining the Kraft-McMillan equality with basic number theory, you will uncover deep structural impossibilities in code design. [@problem_id:1636241]", "problem": "An engineer is tasked with designing a data compression scheme for a source that produces four distinct symbols: $\\{s_1, s_2, s_3, s_4\\}$. The design requires the creation of a binary prefix code, where no codeword is a prefix of any other. Furthermore, the code must be \"complete,\" which means that it is not possible to add another codeword of any length to the codebook without violating the prefix condition. A known theorem states that a binary prefix code is complete if and only if its codeword lengths, $l_1, l_2, l_3, l_4$, satisfy the equality $\\sum_{i=1}^{4} 2^{-l_i} = 1$.\n\nDue to a peculiar constraint in the transmission hardware, the length of every codeword assigned to the symbols must be a positive odd integer.\n\nCan such a complete, binary prefix code with four odd-integer-length codewords be constructed?\n\nA. Yes, a complete code can be constructed with the lengths {3, 5, 5, 5}.\n\nB. Yes, a complete code can be constructed, but only if the hardware constraint is relaxed for at least one codeword.\n\nC. No, it is impossible, because the sum of four odd-length codewords will always result in a total length that is incompatible with binary tree structures.\n\nD. No, it is impossible, because the sum $\\sum_{i=1}^{4} 2^{-l_i}$ can never equal 1 if all $l_i$ are odd integers.\n\nE. The possibility depends on the specific probability distribution of the source symbols.", "solution": "We need a binary prefix code for four symbols that is complete and has all codeword lengths $l_{1},l_{2},l_{3},l_{4}$ as positive odd integers. By the Kraft-McMillan theorem, a binary prefix code is complete if and only if the lengths satisfy\n$$\n\\sum_{i=1}^{4}2^{-l_{i}}=1.\n$$\nImpose the constraint that each $l_{i}$ is a positive odd integer. Then there exist nonnegative integers $k_{i}$ such that\n$$\nl_{i}=2k_{i}+1 \\quad \\text{for } i=1,2,3,4.\n$$\nSubstitute into the Kraft equality:\n$$\n\\sum_{i=1}^{4}2^{-l_{i}}=\\sum_{i=1}^{4}2^{-(2k_{i}+1)}=\\sum_{i=1}^{4}\\frac{1}{2}\\cdot 4^{-k_{i}}=\\frac{1}{2}\\sum_{i=1}^{4}4^{-k_{i}}=1.\n$$\nTherefore the equality is equivalent to\n$$\n\\sum_{i=1}^{4}4^{-k_{i}}=2.\n$$\nEach term satisfies $4^{-k_{i}}\\in\\{1, \\tfrac{1}{4}, \\tfrac{1}{16},\\dots\\}$ and is strictly positive. We consider all possibilities to see whether the sum can equal $2$:\n- If all $k_{i}\\geq 1$, then $4^{-k_{i}}\\leq \\tfrac{1}{4}$ for each $i$, hence\n$$\n\\sum_{i=1}^{4}4^{-k_{i}}\\leq 4\\cdot \\tfrac{1}{4}=1<2,\n$$\nwhich is impossible.\n- If exactly one $k_{i}=0$ and the other three satisfy $k_{j}\\geq 1$, then\n$$\n\\sum_{i=1}^{4}4^{-k_{i}}\\leq 1+3\\cdot \\tfrac{1}{4}=\\tfrac{7}{4}<2,\n$$\nwhich is impossible.\n- If exactly two $k_{i}=0$ and the other two satisfy $k_{j}\\geq 1$, then the sum is $1+1+4^{-k_a}+4^{-k_b} = 2 + 4^{-k_a}+4^{-k_b} > 2$, which overshoots.\n- If at least three $k_{i}=0$, then the sum is at least $3>2$, which again overshoots.\n\nIn all cases, the sum cannot be exactly $2$. Therefore, there do not exist four positive odd integers $l_{i}$ satisfying the Kraft equality. Hence no complete binary prefix code with four codewords all of odd length can exist.\n\nOption A proposes lengths $\\{3,5,5,5\\}$; their Kraft sum is\n$$\n2^{-3}+3\\cdot 2^{-5}=\\tfrac{1}{8}+3\\cdot \\tfrac{1}{32}=\\tfrac{7}{32}\\neq 1,\n$$\nso it is not complete. Option B speaks about relaxing the hardware constraint; while allowing an even length can make a complete code possible, this does not satisfy the stated constraint. Option C is not a correct reason. Option E is irrelevant because the existence of a complete prefix code with given lengths depends on Kraft’s equality, not on symbol probabilities.\n\nTherefore the correct choice is that it is impossible because the sum $\\sum_{i=1}^{4}2^{-l_{i}}$ can never equal $1$ if all $l_{i}$ are odd integers.", "answer": "$$\\boxed{D}$$", "id": "1636241"}]}