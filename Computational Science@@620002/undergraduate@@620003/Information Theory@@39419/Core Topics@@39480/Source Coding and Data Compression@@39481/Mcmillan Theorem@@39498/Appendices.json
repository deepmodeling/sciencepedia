{"hands_on_practices": [{"introduction": "Before investing time in creating specific codewords, we must first determine if a chosen set of lengths is even viable. The McMillan theorem provides a powerful tool, the Kraft inequality, to answer this question definitively, as demonstrated in this problem about designing a communication protocol for a rover [@problem_id:1640967]. By simply plugging the proposed lengths $l_i$ and the alphabet size $D$ into the formula $\\sum D^{-l_i} \\le 1$, we can immediately check for the theoretical possibility of constructing a uniquely decodable code.", "problem": "A team of robotics engineers is designing a communication protocol for a simple autonomous rover. The rover needs to process a set of five distinct commands: `MOVE_FORWARD`, `TURN_LEFT`, `TURN_RIGHT`, `STOP`, and `REPORT_STATUS`. To optimize data transmission, they decide to use a variable-length binary code, meaning each command will be represented by a sequence of 0s and 1s of potentially different lengths. The proposed design allocates codeword lengths to the five commands as follows: two commands are assigned codewords of length 2, and the remaining three commands are assigned codewords of length 3.\n\nThe fundamental requirement for any such code is that it must be uniquely decodable; that is, any sequence of concatenated codewords must correspond to exactly one sequence of commands. Based on the proposed set of codeword lengths, $\\{2, 2, 3, 3, 3\\}$, and a binary code alphabet (size 2), is it theoretically possible to construct such a uniquely decodable code?\n\nA. Yes, a uniquely decodable code with these codeword lengths can be constructed.\n\nB. No, it is not possible to construct a uniquely decodable code with these codeword lengths.\n\nC. This is only possible if the code is also an instantaneous (prefix) code.\n\nD. There is not enough information; the specific binary sequences for the codewords must be known.", "solution": "Let the binary code alphabet have size $D=2$ and the codeword lengths be $l_{1}=2$, $l_{2}=2$, $l_{3}=3$, $l_{4}=3$, $l_{5}=3$. By the Kraft–McMillan theorem, for any uniquely decodable code over a $D$-ary alphabet, the lengths must satisfy\n$$\n\\sum_{i=1}^{5} D^{-l_{i}} \\leq 1.\n$$\nConversely, if a set of lengths satisfies this inequality, then there exists a prefix (instantaneous) code with exactly these lengths, and every prefix code is uniquely decodable.\n\nCompute the Kraft sum for $D=2$:\n$$\n2^{-2}+2^{-2}+2^{-3}+2^{-3}+2^{-3}=\\frac{1}{4}+\\frac{1}{4}+\\frac{1}{8}+\\frac{1}{8}+\\frac{1}{8}=\\frac{7}{8}\\leq 1.\n$$\nSince the inequality holds, there exists a prefix code with lengths $\\{2,2,3,3,3\\}$; hence a uniquely decodable code with these lengths exists. Therefore, it is theoretically possible, and in fact a prefix code can be constructed, so no additional information about specific codewords is required.\n\nThus the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1640967"}, {"introduction": "While the Kraft-McMillan inequality tells us if a code is possible, the equality condition, $\\sum D^{-l_{i}} = 1$, signifies a *complete* and maximally efficient code where no capacity is wasted. This practice [@problem_id:1640977] challenges you to think about code design from an optimization perspective. You will determine how to \"fill\" the remaining coding space to create a complete, prefix-free set of commands for a robotic arm.", "problem": "An engineer is designing a binary communication protocol for a robotic arm. Each command is a unique sequence of bits (0s or 1s). For the system to be efficient, the set of all command codewords must be prefix-free, meaning no codeword is the beginning of another codeword. This property allows for instantaneous decoding.\n\nThe current design includes one high-priority command, which has been assigned a codeword of length 1. To handle a new set of standard operations, the engineer plans to add several new codewords, all of which will have a fixed length of 3 bits.\n\nThe goal is to create a *complete* codebook. A complete codebook is a prefix-free set of codewords to which no new codeword (of any length) can be added without violating the prefix-free property. What is the exact number of 3-bit codewords that must be added to achieve this complete codebook?", "solution": "For a binary prefix-free code, the Kraft-McMillan inequality states that a set of codeword lengths $\\{l_{i}\\}$ is prefix-free if and only if\n$$\n\\sum_{i} 2^{-l_{i}} \\leq 1,\n$$\nand the code is complete if and only if equality holds:\n$$\n\\sum_{i} 2^{-l_{i}} = 1.\n$$\nHere, there is one codeword of length $1$ and $n$ additional codewords of length $3$. The Kraft sum is therefore\n$$\n2^{-1} + n \\cdot 2^{-3}.\n$$\nCompleteness requires\n$$\n2^{-1} + n \\cdot 2^{-3} = 1.\n$$\nMultiplying both sides by $2^{3}$ gives\n$$\n2^{2} + n = 2^{3},\n$$\nso\n$$\nn = 2^{3} - 2^{2} = 8 - 4 = 4.\n$$\nFeasibility is assured: with one length-$1$ codeword occupying one root branch of the binary tree, the other branch contains exactly $2^{3-1} = 4$ available length-$3$ leaves, and selecting all of them yields a prefix-free set with Kraft sum $1$, hence a complete codebook.", "answer": "$$\\boxed{4}$$", "id": "1640977"}, {"introduction": "The McMillan theorem is powerful because it applies to all uniquely decodable codes, not just the simpler-to-decode prefix codes. This exercise [@problem_id:1641032] delves into this crucial distinction by asking you to construct a code that is uniquely decodable but deliberately violates the prefix condition. Successfully solving this problem demonstrates a deeper understanding of the boundaries and nuances of information encoding.", "problem": "A research group is designing a custom data compression scheme for a simplified model of a particle detector. The detector reports one of three possible events, which we will label as 'Alpha', 'Beta', and 'Gamma'. Based on an analysis of the event frequencies, the optimal binary codeword lengths for these events have been determined to be 1, 2, and 2, respectively.\n\nYour task is to design a binary code for these three events that is **uniquely decodable** but is **not a prefix code**.\n\n- A code is **uniquely decodable** if any sequence of concatenated codewords can be parsed back into the original sequence of source symbols in only one way.\n- A code is a **prefix code** (or an instantaneous code) if no codeword is a prefix of any other codeword.\n\nAssign the codeword of length 1 to the 'Alpha' event, and the two codewords of length 2 to the 'Beta' and 'Gamma' events. Provide one complete set of valid binary codewords $\\{c(\\text{Alpha}), c(\\text{Beta}), c(\\text{Gamma})\\}$. Present your answer as a list of three binary strings, in that specific order.", "solution": "We are given target codeword lengths of $1,2,2$ for the three events and must construct a binary code that is uniquely decodable but not a prefix code, with the length-$1$ codeword assigned to Alpha and the two length-$2$ codewords assigned to Beta and Gamma.\n\nChoose the codewords as follows:\n- Assign $c(\\text{Alpha})=0$ (length $1$).\n- Assign $c(\\text{Beta})=01$ (length $2$).\n- Assign $c(\\text{Gamma})=11$ (length $2$).\n\nVerification that the code is not a prefix code: By definition, a code is prefix-free if no codeword is a prefix of any other. Here $c(\\text{Alpha})=0$ is a prefix of $c(\\text{Beta})=01$. Therefore, the code is not a prefix code.\n\nVerification that the code is uniquely decodable: Use the Sardinas–Patterson test. Let $C=\\{0,01,11\\}$. Define\n$$\nS_{1}=\\{u:\\exists x,y\\in C,\\ x\\neq y,\\ x=y\\,u\\},\n$$\nand recursively\n$$\nS_{k+1}=\\{u:\\exists u'\\in S_{k},\\ \\exists x\\in C\\ \\text{such that}\\ (u'=x\\,u)\\ \\text{or}\\ (x=u'\\,u)\\}.\n$$\nA code is uniquely decodable if and only if the empty string never appears in any $S_{k}$.\n\nCompute $S_{1}$: The only nontrivial prefix relation among codewords is $01=0\\,1$, which yields the nonempty suffix $u=1$. Hence $S_{1}=\\{1\\}$.\n\nCompute $S_{2}$ from $u'=1$. For the condition $u'=x\\,u$, we require a codeword $x$ that is a prefix of $1$. None of $0,01,11$ is a prefix of $1$, so this yields no elements. For the condition $x=u'\\,u$, we require codewords beginning with $1$. The only such codeword is $11$, which gives $11=1\\,1$ and hence $u=1$. Therefore $S_{2}=\\{1\\}$.\n\nRepeating this recursion yields $S_{k}=\\{1\\}$ for all $k\\geq 1$, and the empty string never appears. Therefore, by the Sardinas–Patterson criterion, the code is uniquely decodable.\n\nThus, the set $\\{0,01,11\\}$ satisfies all the requirements: lengths are $1,2,2$ in the prescribed order, the code is not prefix-free, and it is uniquely decodable.\n\nTherefore, a valid assignment is\n$$\n\\big(c(\\text{Alpha}),\\,c(\\text{Beta}),\\,c(\\text{Gamma})\\big)=(0,01,11).\n$$", "answer": "$$\\boxed{\\begin{pmatrix}0 & 01 & 11\\end{pmatrix}}$$", "id": "1641032"}]}