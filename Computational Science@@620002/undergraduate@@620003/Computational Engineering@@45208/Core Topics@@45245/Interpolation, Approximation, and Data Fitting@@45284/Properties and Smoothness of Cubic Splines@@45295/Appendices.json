{"hands_on_practices": [{"introduction": "Understanding cubic splines begins with their construction. This exercise takes you back to first principles, requiring you to build a spline from the ground up by translating physical requirements into mathematical constraints. By setting up and solving the system of linear equations for a spline with custom boundary conditions—simulating a specific launch acceleration—you will gain a deep, practical understanding of how splines can be flexibly tailored to model complex, real-world systems. [@problem_id:2429242]", "problem": "A vertical launch is sampled at three times $t_0$, $t_1$, and $t_2$ with $t_0=0\\,\\text{s}$, $t_1=1\\,\\text{s}$, and $t_2=2\\,\\text{s}$. The measured heights are $y_0=0\\,\\text{m}$, $y_1=1\\,\\text{m}$, and $y_2=0\\,\\text{m}$. Let $S(t)$ be the unique cubic spline that is piecewise cubic on $[t_0,t_1]$ and $[t_1,t_2]$, globally twice continuously differentiable, and interpolates the data $S(t_i)=y_i$ for $i\\in\\{0,1,2\\}$. To model a launch with a specified initial acceleration, replace the usual clamped left-endpoint velocity condition with the nonzero acceleration condition $S''(t_0)=2\\,\\text{m}/\\text{s}^2$, and at the right endpoint impose a clamped velocity $S'(t_2)=0\\,\\text{m}/\\text{s}$.\n\nUsing this spline $S(t)$, determine the interpolated height at $t=0.5\\,\\text{s}$. Express your final answer in meters.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- Data points: $(t_0, y_0) = (0, 0)$, $(t_1, y_1) = (1, 1)$, $(t_2, y_2) = (2, 0)$.\n- Spline definition: $S(t)$ is a cubic spline, piecewise cubic on $[0, 1]$ and $[1, 2]$.\n- Smoothness: $S(t)$ is globally twice continuously differentiable ($C^2$).\n- Interpolation conditions: $S(t_i) = y_i$ for $i \\in \\{0, 1, 2\\}$.\n- Boundary conditions: $S''(0) = 2\\,\\text{m}/\\text{s}^2$ and $S'(2) = 0\\,\\text{m}/\\text{s}$.\n- Objective: Determine the value of $S(0.5)$.\n\n**Step 2: Validate Using Extracted Givens**\n- The problem is **scientifically grounded** as it deals with cubic splines, a standard topic in numerical analysis and computational engineering.\n- The problem is **well-posed**. It provides $8$ conditions (3 interpolation points which give 4 constraints, 2 continuity constraints for the first and second derivatives at the interior knot, and 2 boundary conditions) to determine the $8$ coefficients of the two piecewise cubic polynomials. This setup leads to a unique solution.\n- The problem is **objective**, stated in precise mathematical language without subjective elements.\n- The problem is complete, consistent, and formalizable.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A solution will be provided.\n\nLet the cubic spline $S(t)$ be defined piecewise as:\n$$\nS(t) =\n\\begin{cases}\nS_0(t) & \\text{for } t \\in [0, 1] \\\\\nS_1(t) & \\text{for } t \\in [1, 2]\n\\end{cases}\n$$\nWe define the two cubic polynomials. For computational convenience, the second polynomial is defined relative to the knot $t_1=1$.\n$S_0(t) = a_0 + b_0 t + c_0 t^2 + d_0 t^3$\n$S_1(t) = a_1 + b_1 (t-1) + c_1 (t-1)^2 + d_1 (t-1)^3$\n\nThe first and second derivatives are:\n$S_0'(t) = b_0 + 2c_0 t + 3d_0 t^2$\n$S_0''(t) = 2c_0 + 6d_0 t$\n$S_1'(t) = b_1 + 2c_1 (t-1) + 3d_1 (t-1)^2$\n$S_1''(t) = 2c_1 + 6d_1 (t-1)$\n\nWe apply the given conditions to determine the $8$ coefficients: $a_0, b_0, c_0, d_0, a_1, b_1, c_1, d_1$.\n\n1.  **Interpolation Conditions:**\n    - $S(0) = y_0 \\implies S_0(0) = 0 \\implies a_0 = 0$.\n    - $S(1) = y_1 \\implies S_0(1) = 1 \\implies a_0 + b_0 + c_0 + d_0 = 1$. With $a_0=0$, this gives $b_0 + c_0 + d_0 = 1$.\n    - $S(1) = y_1 \\implies S_1(1) = 1 \\implies a_1 = 1$.\n    - $S(2) = y_2 \\implies S_1(2) = 0 \\implies a_1 + b_1(2-1) + c_1(2-1)^2 + d_1(2-1)^3 = 0$. With $a_1=1$, this gives $1 + b_1 + c_1 + d_1 = 0$.\n\n2.  **Continuity Conditions at $t=1$:**\n    - $S_0'(1) = S_1'(1) \\implies b_0 + 2c_0 + 3d_0 = b_1$.\n    - $S_0''(1) = S_1''(1) \\implies 2c_0 + 6d_0 = 2c_1 \\implies c_0 + 3d_0 = c_1$.\n\n3.  **Boundary Conditions:**\n    - $S''(0) = 2 \\implies S_0''(0) = 2c_0 = 2 \\implies c_0 = 1$.\n    - $S'(2) = 0 \\implies S_1'(2) = 0 \\implies b_1 + 2c_1(2-1) + 3d_1(2-1)^2 = 0 \\implies b_1 + 2c_1 + 3d_1 = 0$.\n\nWe have now determined three coefficients: $a_0=0$, $a_1=1$, and $c_0=1$. We substitute $c_0=1$ into the system of equations for the remaining five coefficients ($b_0, d_0, b_1, c_1, d_1$):\n(A) $b_0 + 1 + d_0 = 1 \\implies b_0 + d_0 = 0$.\n(B) $1 + b_1 + c_1 + d_1 = 0$.\n(C) $b_0 + 2(1) + 3d_0 = b_1 \\implies b_0 + 2 + 3d_0 = b_1$.\n(D) $1 + 3d_0 = c_1$.\n(E) $b_1 + 2c_1 + 3d_1 = 0$.\n\nFrom equation (A), we find $b_0 = -d_0$.\nSubstitute this into (C): $-d_0 + 2 + 3d_0 = b_1 \\implies b_1 = 2 + 2d_0$.\nNow we have expressions for $b_1$ and $c_1$ in terms of $d_0$. We substitute these into equations (B) and (E) to create a system for $d_0$ and $d_1$.\n\nSubstitute $b_1$ and $c_1$ into (B):\n$1 + (2 + 2d_0) + (1 + 3d_0) + d_1 = 0$\n$4 + 5d_0 + d_1 = 0 \\implies d_1 = -4 - 5d_0$.\n\nSubstitute $b_1$ and $c_1$ into (E):\n$(2 + 2d_0) + 2(1 + 3d_0) + 3d_1 = 0$\n$2 + 2d_0 + 2 + 6d_0 + 3d_1 = 0$\n$4 + 8d_0 + 3d_1 = 0$.\n\nNow, substitute the expression for $d_1$ into this last equation:\n$4 + 8d_0 + 3(-4 - 5d_0) = 0$\n$4 + 8d_0 - 12 - 15d_0 = 0$\n$-8 - 7d_0 = 0$\n$7d_0 = -8 \\implies d_0 = -\\frac{8}{7}$.\n\nTo find the value of $S(0.5)$, we only need the coefficients of the polynomial $S_0(t)$. We have:\n- $a_0 = 0$\n- $c_0 = 1$\n- $d_0 = -\\frac{8}{7}$\n- $b_0 = -d_0 = -(-\\frac{8}{7}) = \\frac{8}{7}$.\n\nThe polynomial for the interval $t \\in [0, 1]$ is:\n$S_0(t) = a_0 + b_0 t + c_0 t^2 + d_0 t^3 = 0 + \\frac{8}{7}t + 1 \\cdot t^2 - \\frac{8}{7}t^3$.\n$S_0(t) = \\frac{8}{7}t + t^2 - \\frac{8}{7}t^3$.\n\nFinally, we evaluate $S(0.5) = S_0(0.5)$. Let $t = 0.5 = \\frac{1}{2}$.\n$S(0.5) = \\frac{8}{7}\\left(\\frac{1}{2}\\right) + \\left(\\frac{1}{2}\\right)^2 - \\frac{8}{7}\\left(\\frac{1}{2}\\right)^3$\n$S(0.5) = \\frac{4}{7} + \\frac{1}{4} - \\frac{8}{7}\\left(\\frac{1}{8}\\right)$\n$S(0.5) = \\frac{4}{7} + \\frac{1}{4} - \\frac{1}{7}$\n$S(0.5) = \\left(\\frac{4}{7} - \\frac{1}{7}\\right) + \\frac{1}{4}$\n$S(0.5) = \\frac{3}{7} + \\frac{1}{4}$\nTo sum these fractions, we find a common denominator, which is $28$.\n$S(0.5) = \\frac{3 \\cdot 4}{7 \\cdot 4} + \\frac{1 \\cdot 7}{4 \\cdot 7} = \\frac{12}{28} + \\frac{7}{28} = \\frac{19}{28}$.\n\nThe interpolated height at $t=0.5\\,\\text{s}$ is $\\frac{19}{28}\\,\\text{m}$.", "answer": "$$\\boxed{\\frac{19}{28}}$$", "id": "2429242"}, {"introduction": "Once a spline model is constructed, we often need to analyze its geometric features. This practice guides you through the analytical process of locating a spline's local extrema—the peaks and valleys of the interpolated curve. Because the derivative of a cubic spline is a series of connected quadratic polynomials, finding these critical points becomes a solvable algebraic problem, strengthening your ability to apply calculus to analyze complex, data-driven functions. [@problem_id:2429285]", "problem": "Consider the natural cubic spline $S(x)$ that interpolates the data $\\{(x_i,y_i)\\}_{i=0}^{3}$ with knots $x_0=0$, $x_1=1$, $x_2=2$, $x_3=3$ and values $y_0=0$, $y_1=2$, $y_2=1$, $y_3=2$. By definition, a natural cubic spline is a twice continuously differentiable, piecewise-cubic function that interpolates the data and satisfies $S''(x_0)=0$ and $S''(x_3)=0$. Using only these defining properties and the requirement that $S'(x)$ is piecewise quadratic, analytically determine all interior local extrema of $S(x)$, that is, all $x^{\\star}\\in(x_0,x_3)$ such that $S'(x^{\\star})=0$.\n\nProvide the $x$-coordinates of all interior local extrema in exact form (no rounding), listed in increasing order, as a single row matrix. Do not classify the extrema and do not report endpoint behavior.", "solution": "The user has provided a problem statement that requires validation before a solution is attempted.\n\n**Step 1: Extract Givens**\n-   Function type: Natural cubic spline, $S(x)$.\n-   Data points: $\\{(x_i, y_i)\\}_{i=0}^{3}$.\n-   Knot coordinates: $x_0=0$, $x_1=1$, $x_2=2$, $x_3=3$.\n-   Data values: $y_0=0$, $y_1=2$, $y_2=1$, $y_3=2$.\n-   Properties of $S(x)$:\n    -   $S(x)$ is a piecewise-cubic function.\n    -   $S(x)$ is twice continuously differentiable, $S(x) \\in C^2$.\n    -   $S(x_i) = y_i$ for $i=0,1,2,3$.\n    -   Natural boundary conditions: $S''(x_0)=0$ and $S''(x_3)=0$.\n-   Stated property of the derivative: $S'(x)$ is piecewise quadratic.\n-   Objective: Find all $x^{\\star} \\in (x_0, x_3)$ such that $S'(x^{\\star})=0$.\n-   Output requirement: The $x$-coordinates of all interior local extrema, in exact form and increasing order, as a single row matrix.\n\n**Step 2: Validate Using Extracted Givens**\n-   **Scientific Groundedness**: The problem is rooted in the standard theory of spline interpolation, a fundamental topic in numerical analysis and computational engineering. The concept of a natural cubic spline is well-defined and rigorously established. The problem is scientifically and mathematically sound.\n-   **Well-Posedness**: The problem of finding a unique natural cubic spline for a given set of four data points is well-posed. The subsequent task of finding the roots of its derivative is a standard analytical procedure. The problem is structured to yield a unique and meaningful solution.\n-   **Objectivity**: The problem is stated in precise, objective mathematical language, free from any subjective or ambiguous terminology.\n-   **Completeness and Consistency**: The problem statement provides all necessary information (data points, knot locations, and boundary conditions) to uniquely determine the spline $S(x)$. The given information is self-consistent. The statement that $S'(x)$ is piecewise quadratic is a direct and correct consequence of $S(x)$ being piecewise cubic.\n\n**Step 3: Verdict and Action**\nThe problem is valid. It is a well-posed, self-contained, and scientifically grounded problem from the field of computational engineering. I will proceed with the analytical solution.\n\n**Solution**\n\nA cubic spline $S(x)$ is defined piecewise on each subinterval $[x_i, x_{i+1}]$. Let $M_i = S''(x_i)$ be the second derivative of the spline at knot $x_i$. For a natural cubic spline, the boundary conditions are $M_0 = S''(x_0)=0$ and $M_n=S''(x_n)=0$. In this problem, $n=3$, so $M_0=0$ and $M_3=0$.\n\nThe knots are equally spaced with a step size of $h = x_{i+1} - x_i = 1$. The continuity of the first derivative $S'(x)$ at the interior knots $x_1$ and $x_2$ imposes constraints on the values of $M_i$. For equally spaced knots, this relationship is given by the following system of linear equations:\n$$M_{i-1} + 4M_i + M_{i+1} = \\frac{6}{h^2}(y_{i+1} - 2y_i + y_{i-1})$$\nWith $h=1$, this simplifies to:\n$$M_{i-1} + 4M_i + M_{i+1} = 6(y_{i+1} - 2y_i + y_{i-1})$$\nWe apply this formula for the interior knots, $i=1$ and $i=2$.\n\nFor $i=1$:\n$M_0 + 4M_1 + M_2 = 6(y_2 - 2y_1 + y_0)$\nSubstituting the given values $M_0=0$, $y_0=0$, $y_1=2$, $y_2=1$:\n$0 + 4M_1 + M_2 = 6(1 - 2(2) + 0) = 6(-3) = -18$\n$$4M_1 + M_2 = -18 \\quad (1)$$\n\nFor $i=2$:\n$M_1 + 4M_2 + M_3 = 6(y_3 - 2y_2 + y_1)$\nSubstituting the given values $M_3=0$, $y_1=2$, $y_2=1$, $y_3=2$:\n$M_1 + 4M_2 + 0 = 6(2 - 2(1) + 2) = 6(2) = 12$\n$$M_1 + 4M_2 = 12 \\quad (2)$$\n\nWe solve the system of linear equations for $M_1$ and $M_2$:\nFrom equation (2), $M_1 = 12 - 4M_2$. Substituting into equation (1):\n$4(12 - 4M_2) + M_2 = -18$\n$48 - 16M_2 + M_2 = -18$\n$-15M_2 = -66 \\implies M_2 = \\frac{66}{15} = \\frac{22}{5}$.\nNow, we find $M_1$:\n$M_1 = 12 - 4\\left(\\frac{22}{5}\\right) = \\frac{60 - 88}{5} = -\\frac{28}{5}$.\nSo, the second derivatives at the knots are: $M_0=0$, $M_1 = -\\frac{28}{5}$, $M_2 = \\frac{22}{5}$, $M_3=0$.\n\nThe first derivative of the spline segment $S_i(x)$ on an interval $[x_i, x_{i+1}]$ can be expressed as a quadratic function of $u = x-x_i$:\n$$S'_i(x) = 3A_i u^2 + 2B_i u + C_i$$\nwhere the coefficients are given by ($h=1$):\n$A_i = \\frac{M_{i+1}-M_i}{6}$\n$B_i = \\frac{M_i}{2}$\n$C_i = (y_{i+1}-y_i) - \\frac{M_{i+1}+2M_i}{6}$\nWe seek roots of $S'_i(x)=0$ within each open interval $(x_i, x_{i+1})$.\n\n**Interval 1: $[0, 1]$ ($i=0$)**\nHere, $u=x$. We find coefficients $A_0, B_0, C_0$:\n$A_0 = \\frac{M_1-M_0}{6} = \\frac{-28/5 - 0}{6} = -\\frac{28}{30} = -\\frac{14}{15}$.\n$B_0 = \\frac{M_0}{2} = 0$.\n$C_0 = (y_1-y_0) - \\frac{M_1+2M_0}{6} = (2-0) - \\frac{-28/5}{6} = 2 + \\frac{28}{30} = 2 + \\frac{14}{15} = \\frac{44}{15}$.\nThe equation $S'_0(x)=0$ becomes:\n$$3\\left(-\\frac{14}{15}\\right) x^2 + 0 + \\frac{44}{15} = 0$$\n$$-\\frac{14}{5}x^2 = -\\frac{44}{15} \\implies x^2 = \\frac{44}{15} \\cdot \\frac{5}{14} = \\frac{22}{21}$$\nThe solutions are $x = \\pm\\sqrt{\\frac{22}{21}}$. As $\\sqrt{\\frac{22}{21}} > 1$, neither solution lies in the interval $(0,1)$. There are no extrema in this interval.\n\n**Interval 2: $[1, 2]$ ($i=1$)**\nHere, $u=x-1$. We find coefficients $A_1, B_1, C_1$:\n$A_1 = \\frac{M_2-M_1}{6} = \\frac{22/5 - (-28/5)}{6} = \\frac{50/5}{6} = \\frac{10}{6} = \\frac{5}{3}$.\n$B_1 = \\frac{M_1}{2} = \\frac{-28/5}{2} = -\\frac{14}{5}$.\n$C_1 = (y_2-y_1) - \\frac{M_2+2M_1}{6} = (1-2) - \\frac{22/5 + 2(-28/5)}{6} = -1 - \\frac{-34/5}{6} = -1 + \\frac{17}{15} = \\frac{2}{15}$.\nThe equation $S'_1(x)=0$ becomes:\n$$3\\left(\\frac{5}{3}\\right)u^2 + 2\\left(-\\frac{14}{5}\\right)u + \\frac{2}{15} = 0$$\n$$5u^2 - \\frac{28}{5}u + \\frac{2}{15} = 0$$\nMultiplying by $15$ yields $75u^2 - 84u + 2 = 0$.\nUsing the quadratic formula for $u$:\n$$u = \\frac{-(-84) \\pm \\sqrt{(-84)^2 - 4(75)(2)}}{2(75)} = \\frac{84 \\pm \\sqrt{7056 - 600}}{150} = \\frac{84 \\pm \\sqrt{6456}}{150}$$\nTo simplify the radical, we note that $\\sqrt{6456} = \\sqrt{4 \\cdot 1614} = 2\\sqrt{1614}$.\n$$u = \\frac{84 \\pm 2\\sqrt{1614}}{150} = \\frac{42 \\pm \\sqrt{1614}}{75}$$\nWe need $u \\in (0,1)$. We know $40^2=1600$ and $41^2=1681$, so $40 < \\sqrt{1614} < 41$.\nFor $u_1 = \\frac{42 + \\sqrt{1614}}{75}$, the numerator is approximately $42+40.17=82.17$, so $u_1 > 1$. This solution is outside the interval.\nFor $u_2 = \\frac{42 - \\sqrt{1614}}{75}$, the numerator is approximately $42-40.17=1.83$, which is positive. The denominator is $75$, so $0 < u_2 < 1$. This solution is valid.\nThe corresponding $x$-coordinate is $x^{\\star}_1 = 1 + u_2 = 1 + \\frac{42 - \\sqrt{1614}}{75} = \\frac{75 + 42 - \\sqrt{1614}}{75} = \\frac{117 - \\sqrt{1614}}{75}$.\n\n**Interval 3: $[2, 3]$ ($i=2$)**\nHere, $u=x-2$. We find coefficients $A_2, B_2, C_2$:\n$A_2 = \\frac{M_3-M_2}{6} = \\frac{0 - 22/5}{6} = -\\frac{22}{30} = -\\frac{11}{15}$.\n$B_2 = \\frac{M_2}{2} = \\frac{22/5}{2} = \\frac{11}{5}$.\n$C_2 = (y_3-y_2) - \\frac{M_3+2M_2}{6} = (2-1) - \\frac{0 + 2(22/5)}{6} = 1 - \\frac{44/5}{6} = 1 - \\frac{22}{15} = -\\frac{7}{15}$.\nThe equation $S'_2(x)=0$ becomes:\n$$3\\left(-\\frac{11}{15}\\right)u^2 + 2\\left(\\frac{11}{5}\\right)u - \\frac{7}{15} = 0$$\n$$-\\frac{11}{5}u^2 + \\frac{22}{5}u - \\frac{7}{15} = 0$$\nMultiplying by $-15$ yields $33u^2 - 66u + 7 = 0$.\nUsing the quadratic formula for $u$:\n$$u = \\frac{-(-66) \\pm \\sqrt{(-66)^2 - 4(33)(7)}}{2(33)} = \\frac{66 \\pm \\sqrt{4356 - 924}}{66} = \\frac{66 \\pm \\sqrt{3432}}{66}$$\nWe simplify the radical: $\\sqrt{3432} = \\sqrt{4 \\cdot 858} = 2\\sqrt{858}$.\n$$u = \\frac{66 \\pm 2\\sqrt{858}}{66} = 1 \\pm \\frac{\\sqrt{858}}{33}$$\nWe need $u \\in (0,1)$.\nFor $u_1 = 1 + \\frac{\\sqrt{858}}{33}$, clearly $u_1 > 1$, so this solution is invalid.\nFor $u_2 = 1 - \\frac{\\sqrt{858}}{33}$, we know $29^2=841$ and $30^2=900$, so $29 < \\sqrt{858} < 30$.\nThus, $\\frac{29}{33} < \\frac{\\sqrt{858}}{33} < \\frac{30}{33}$, which means $0 < u_2 < 1$. This solution is valid.\nThe corresponding $x$-coordinate is $x^{\\star}_2 = 2 + u_2 = 2 + 1 - \\frac{\\sqrt{858}}{33} = 3 - \\frac{\\sqrt{858}}{33}$.\n\nThe two interior local extrema are located at $x^{\\star}_1 = \\frac{117 - \\sqrt{1614}}{75}$ and $x^{\\star}_2 = 3 - \\frac{\\sqrt{858}}{33}$.\nNumerically, $x^{\\star}_1 \\approx 1.024$ and $x^{\\star}_2 \\approx 2.112$.\nThe problem requires these to be listed in increasing order.\n\nThe final answer is the ordered set of these two $x$-coordinates.", "answer": "$$\\boxed{\\begin{pmatrix} \\frac{117 - \\sqrt{1614}}{75} & 3 - \\frac{\\sqrt{858}}{33} \\end{pmatrix}}$$", "id": "2429285"}, {"introduction": "Moving from analytical theory to computational practice, this final exercise introduces regression splines, a powerful tool for modeling trends in noisy data. You will implement an algorithm to find the optimal placement for a single knot, a fundamental task in statistical model selection that balances model flexibility and goodness-of-fit. This hands-on coding problem demonstrates how splines are used in modern data science and computational engineering, providing a practical foundation for building more advanced non-parametric models. [@problem_id:2429284]", "problem": "You are given several data sets of points $\\{(x_i,y_i)\\}_{i=1}^m$ with strictly increasing abscissae $x_1 < x_2 < \\dots < x_m$. Consider the space of cubic regression splines that are $C^2$-continuous (i.e., the function, its first derivative, and its second derivative are continuous everywhere). A standard way to represent a cubic spline with a single interior knot at $\\tau$ that enforces $C^2$ continuity is the truncated power basis\n$$\ns(x;\\boldsymbol{\\theta},\\tau) \\;=\\; \\beta_0 + \\beta_1 x + \\beta_2 x^2 + \\beta_3 x^3 + \\gamma\\,(x-\\tau)_+^3,\n$$\nwhere $(x-\\tau)_+^3 = \\max\\{x-\\tau,0\\}^3$, and $\\boldsymbol{\\theta} = (\\beta_0,\\beta_1,\\beta_2,\\beta_3,\\gamma)$ are coefficients to be determined from the data by least squares. The pure cubic polynomial $p(x)=\\beta_0 + \\beta_1 x + \\beta_2 x^2 + \\beta_3 x^3$ is recovered when $\\gamma=0$ (i.e., no interior knot). The data misfit is measured by the Residual Sum of Squares (RSS),\n$$\n\\mathrm{RSS}(\\tau) \\;=\\; \\min_{\\boldsymbol{\\theta}} \\sum_{i=1}^m \\left(s(x_i;\\boldsymbol{\\theta},\\tau)-y_i\\right)^2,\n$$\nand the no-knot baseline error is\n$$\n\\mathrm{RSS}_0 \\;=\\; \\min_{\\beta_0,\\beta_1,\\beta_2,\\beta_3} \\sum_{i=1}^m \\left(\\beta_0 + \\beta_1 x_i + \\beta_2 x_i^2 + \\beta_3 x_i^3 - y_i\\right)^2.\n$$\nBecause the model with one interior knot contains the no-knot model as the special case $\\gamma=0$, the error with a knot cannot exceed the baseline error.\n\nYour task is to programmatically determine, for each provided data set, the interior knot location $\\tau^\\star$ that most reduces the overall approximation error, by minimizing $\\mathrm{RSS}(\\tau)$ over a discrete candidate set. The candidate set must be the set of interior abscissae, i.e., all $x_i$ strictly between the smallest and largest $x_i$ values in the data set. Break ties by choosing the smallest $\\tau$ among those that achieve the minimum within a numerical tolerance. The fitted spline must be $C^2$-continuous everywhere as guaranteed by the truncated power basis.\n\nYou must implement the least squares fits directly using the truncated power basis design matrices. Do not assume any pre-existing spline fitting beyond linear least squares. Your program must:\n- Construct the baseline cubic polynomial design matrix with columns $[1, x, x^2, x^3]$ and compute $\\mathrm{RSS}_0$.\n- For each candidate $\\tau$, construct the augmented design matrix with columns $[1, x, x^2, x^3, (x-\\tau)_+^3]$ and compute $\\mathrm{RSS}(\\tau)$.\n- Select $\\tau^\\star$ as the smallest candidate $\\tau$ that achieves the minimal $\\mathrm{RSS}(\\tau)$ within a tolerance (use a fixed absolute tolerance $\\varepsilon = 10^{-12}$ on $\\mathrm{RSS}$ differences).\n- Output $\\tau^\\star$ for each test case.\n\nFundamental base and properties to use:\n- A cubic polynomial has continuous first and second derivatives everywhere.\n- The truncated power function $(x-\\tau)_+^3$ and its first and second derivatives vanish for $x\\le \\tau$ and are cubic, quadratic, and linear functions for $x>\\tau$, respectively. Therefore, $s(x;\\boldsymbol{\\theta},\\tau)$ is $C^2$-continuous at $x=\\tau$.\n- Ordinary least squares projection onto a linear model subspace minimizes the sum of squared residuals.\n\nTest suite:\n- Case $1$ (happy path, knot in the middle). Use $m=11$ with\n  $x = [\\,0.0,\\,0.1,\\,0.2,\\,0.3,\\,0.4,\\,0.5,\\,0.6,\\,0.7,\\,0.8,\\,0.9,\\,1.0\\,]$,\n  and define\n  $y_i = x_i^3 + (x_i-0.5)_+^3$ for each $i$. This is exactly representable by the model with the true knot at $\\tau=0.5$.\n- Case $2$ (tie case, data are exactly cubic). Use $m=11$ with\n  $x = [\\,0.0,\\,0.1,\\,0.2,\\,0.3,\\,0.4,\\,0.5,\\,0.6,\\,0.7,\\,0.8,\\,0.9,\\,1.0\\,]$,\n  and\n  $y_i = x_i^3 - 2 x_i$. The baseline cubic fits exactly, so $\\mathrm{RSS}_0=0$. All candidate knots yield the same minimal residual (up to numerical tolerance). Your tie-breaking rule should return $\\tau^\\star=0.1$ (the smallest interior abscissa).\n- Case $3$ (nonuniform grid, off-center knot). Use $m=12$ with\n  $x = [\\,0.0,\\,0.05,\\,0.1,\\,0.15,\\,0.2,\\,0.25,\\,0.3,\\,0.4,\\,0.55,\\,0.7,\\,0.85,\\,1.0\\,]$,\n  and\n  $y_i = 2 x_i^3 + 5 (x_i-0.25)_+^3$. This is exactly representable by the model with the true knot at $\\tau=0.25$.\n\nAngle units are not involved. There are no physical units in this problem.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with each $\\tau^\\star$ formatted as a decimal number rounded to exactly $6$ decimal places (for example, $[0.500000,0.100000,0.250000]$). The order must correspond to Cases $1$, $2$, and $3$ respectively.", "solution": "The problem as stated is valid. It is scientifically grounded in the theory of regression splines and linear algebra, it is well-posed with a clear objective and constraints, and it is objective in its formulation. All necessary data and definitions are provided. I will now present the solution.\n\nThe objective is to determine the optimal location $\\tau^\\star$ for a single interior knot in a $C^2$-continuous cubic regression spline. The criterion for optimality is the minimization of the Residual Sum of Squares (RSS). The search for $\\tau^\\star$ is restricted to a discrete set of candidate locations, which are the interior abscissae of the given data set $\\{ (x_i, y_i) \\}_{i=1}^m$.\n\nThe model for the spline function $s(x)$ with a knot at $\\tau$ is given by the truncated power basis representation:\n$$\ns(x; \\boldsymbol{\\theta}, \\tau) = \\beta_0 + \\beta_1 x + \\beta_2 x^2 + \\beta_3 x^3 + \\gamma (x - \\tau)_+^3\n$$\nwhere $(x - \\tau)_+^3 = \\max\\{0, x - \\tau\\}^3$. The coefficients $\\boldsymbol{\\theta} = (\\beta_0, \\beta_1, \\beta_2, \\beta_3, \\gamma)^T$ are determined by minimizing the RSS for a given knot $\\tau$. This is a linear least squares problem.\n\nFor a set of $m$ data points, we can express the model in matrix-vector form as $\\mathbf{y} = \\mathbf{X}(\\tau)\\boldsymbol{\\theta} + \\boldsymbol{\\epsilon}$, where $\\mathbf{y} \\in \\mathbb{R}^m$ is the vector of observed responses $y_i$, $\\mathbf{X}(\\tau) \\in \\mathbb{R}^{m \\times 5}$ is the design matrix, $\\boldsymbol{\\theta} \\in \\mathbb{R}^5$ is the vector of coefficients, and $\\boldsymbol{\\epsilon} \\in \\mathbb{R}^m$ is the vector of errors.\n\nThe design matrix $\\mathbf{X}(\\tau)$ depends on the chosen knot $\\tau$. Its $i$-th row corresponds to the data point $x_i$:\n$$\n[\\mathbf{X}(\\tau)]_{i,:} = \\begin{bmatrix} 1 & x_i & x_i^2 & x_i^3 & (x_i - \\tau)_+^3 \\end{bmatrix}\n$$\nThe Ordinary Least Squares (OLS) estimate $\\hat{\\boldsymbol{\\theta}}$ for the coefficients minimizes the RSS, defined as $\\mathrm{RSS}(\\tau) = \\|\\mathbf{y} - \\mathbf{X}(\\tau)\\boldsymbol{\\theta}\\|_2^2$. The solution to this minimization problem is given by solving the normal equations:\n$$\n(\\mathbf{X}(\\tau)^T \\mathbf{X}(\\tau)) \\hat{\\boldsymbol{\\theta}} = \\mathbf{X}(\\tau)^T \\mathbf{y}\n$$\nThe minimal sum of squared residuals for a given $\\tau$ is then:\n$$\n\\mathrm{RSS}(\\tau) = \\|\\mathbf{y} - \\mathbf{X}(\\tau)\\hat{\\boldsymbol{\\theta}}\\|_2^2\n$$\nNumerically, it is preferable to solve for $\\hat{\\boldsymbol{\\theta}}$ and compute the RSS using robust linear algebra routines, such as those based on QR decomposition, rather than by explicitly forming and inverting $\\mathbf{X}(\\tau)^T \\mathbf{X}(\\tau)$.\n\nThe algorithmic procedure to find the optimal knot $\\tau^\\star$ is as follows:\n$1$. For a given data set $(\\mathbf{x}, \\mathbf{y})$ of size $m$, identify the set of candidate knots $\\mathcal{T} = \\{x_2, x_3, \\dots, x_{m-1}\\}$.\n$2$. For each candidate knot $\\tau_k \\in \\mathcal{T}$:\n    a. Construct the $m \\times 5$ design matrix $\\mathbf{X}(\\tau_k)$.\n    b. Solve the linear least squares problem to find the RSS, which we denote $\\mathrm{RSS}(\\tau_k)$. This value is obtained directly from a standard numerical solver for linear least squares.\n$3$. After computing $\\mathrm{RSS}(\\tau_k)$ for all $\\tau_k \\in \\mathcal{T}$, find the minimum value:\n$$\n\\mathrm{RSS}_{\\min} = \\min_{\\tau_k \\in \\mathcal{T}} \\mathrm{RSS}(\\tau_k)\n$$\n$4$. Identify the set of all candidate knots that achieve this minimum RSS within a specified numerical tolerance, $\\varepsilon = 10^{-12}$:\n$$\n\\mathcal{T}_{\\min} = \\{ \\tau_k \\in \\mathcal{T} \\mid \\mathrm{RSS}(\\tau_k) \\le \\mathrm{RSS}_{\\min} + \\varepsilon \\}\n$$\n$5$. Apply the tie-breaking rule by selecting the smallest knot from this set:\n$$\n\\tau^\\star = \\min(\\mathcal{T}_{\\min})\n$$\nThis procedure is deterministic and guarantees a unique solution $\\tau^\\star$ for any given data set. The provided test cases are designed to verify the correct implementation of this logic, including cases where the data is perfectly representable by the model for a specific knot and cases requiring the tie-breaking rule. The accompanying program implements this algorithm directly.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Finds the optimal single interior knot for a C^2 cubic regression spline\n    by minimizing the Residual Sum of Squares (RSS) over a discrete set of\n    candidate knots.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple of (x_data, y_data)\n    m1 = 11\n    x1 = np.linspace(0.0, 1.0, m1)\n    y1 = x1**3 + np.maximum(0, x1 - 0.5)**3\n    \n    m2 = 11\n    x2 = np.linspace(0.0, 1.0, m2)\n    y2 = x2**3 - 2 * x2\n\n    m3 = 12\n    x3 = np.array([0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.55, 0.7, 0.85, 1.0])\n    y3 = 2 * x3**3 + 5 * np.maximum(0, x3 - 0.25)**3\n    \n    test_cases = [\n        (x1, y1),\n        (x2, y2),\n        (x3, y3),\n    ]\n\n    results = []\n    \n    # Absolute tolerance for comparing RSS values\n    tolerance = 1e-12\n\n    for x, y in test_cases:\n        m = len(x)\n        # Candidate knots are the interior data points\n        candidate_taus = x[1:-1]\n        \n        rss_results = []\n\n        for tau in candidate_taus:\n            # Construct the design matrix X for the current knot tau\n            # Columns: 1, x, x^2, x^3, (x-tau)_+^3\n            X = np.zeros((m, 5))\n            X[:, 0] = 1.0\n            X[:, 1] = x\n            X[:, 2] = x**2\n            X[:, 3] = x**3\n            X[:, 4] = np.maximum(0, x - tau)**3\n            \n            # Solve the least squares problem.\n            # np.linalg.lstsq returns:\n            # 1. coefficients (solution)\n            # 2. residuals (sum of squared residuals), an array\n            # 3. rank of the matrix\n            # 4. singular values of the matrix\n            # We only need the sum of squared residuals.\n            # rcond=None is specified to use the machine-precision-based default.\n            _, rss_array, _, _ = np.linalg.lstsq(X, y, rcond=None)\n            \n            # rss_array is empty if m  5. If it's not empty, it contains one value.\n            current_rss = rss_array[0] if rss_array.size > 0 else 0.0\n            \n            rss_results.append((current_rss, tau))\n\n        # Find the minimum RSS achieved\n        if not rss_results:\n            # This case should not happen with the given test data\n            # (m > 2, so interior points exist)\n            results.append(np.nan)\n            continue\n            \n        min_rss = min(res[0] for res in rss_results)\n        \n        # Identify all knots that achieve the minimum RSS within the tolerance\n        tied_taus = [tau for rss, tau in rss_results if rss = min_rss + tolerance]\n        \n        # Apply the tie-breaking rule: choose the smallest tau\n        optimal_tau = min(tied_taus)\n        \n        results.append(optimal_tau)\n\n    # Format the final output according to the problem specification\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2429284"}]}