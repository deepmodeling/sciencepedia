{"hands_on_practices": [{"introduction": "Before building complex models, it's crucial to master the fundamental operation of assembly: correctly mapping local element contributions to the global system. This exercise challenges you to act as a code debugger, ignoring a faulty result and relying on first principles to calculate a single, correct entry in the global stiffness matrix $K$. By focusing on the contribution of each element to a specific global entry, you will solidify your understanding of how mesh connectivity dictates the structure of $K$ [@problem_id:2371849].", "problem": "Consider a scalar diffusion problem on the unit square discretized for the Finite Element Method (FEM) using linear triangular elements. The mesh has nodes at coordinates $(0,0)$, $(1,0)$, $(1,1)$, and $(0,1)$, labeled as global nodes $1$, $2$, $3$, and $4$, respectively. The elements are defined by the connectivities $e_{1}=(1,2,3)$ and $e_{2}=(1,3,4)$. The local stiffness matrices (for unit, nondimensional conductivity and linear shape functions) are known to be\n$$\nK^{(1)}=\\begin{pmatrix}\n0.5 & -0.5 & 0 \\\\\n-0.5 & 1 & -0.5 \\\\\n0 & -0.5 & 0.5\n\\end{pmatrix},\n\\quad\nK^{(2)}=\\begin{pmatrix}\n0.5 & 0 & -0.5 \\\\\n0 & 0.5 & -0.5 \\\\\n-0.5 & -0.5 & 1\n\\end{pmatrix},\n$$\nwhere $K^{(1)}$ is ordered according to local nodes corresponding to global nodes $(1,2,3)$ and $K^{(2)}$ is ordered according to local nodes corresponding to global nodes $(1,3,4)$. An implementation produced the following assembled global stiffness matrix $\\tilde{K}$:\n$$\n\\tilde{K}=\\begin{pmatrix}\n1.0 & -0.5 & -0.5 & 0 \\\\\n-0.5 & 1.0 & -0.5 & 0 \\\\\n-0.5 & -0.5 & 1.5 & -0.5 \\\\\n0 & 0 & -0.5 & 0.5\n\\end{pmatrix}.\n$$\nAssuming $K^{(1)}$ and $K^{(2)}$ are correct and the only issue is a fault in the assembly procedure, determine the correct value of the global stiffness matrix entry $K_{1,4}$ that should result from a correct assembly using the given element connectivities and local stiffness matrices. Provide the answer as an exact number with no units.", "solution": "The assembly of the global stiffness matrix $K$ is based on the principle of direct stiffness summation, where contributions from each element's local stiffness matrix are added to the global matrix based on connectivity. A global entry $K_{I,J}$ is the sum of contributions from all elements that contain both global node $I$ and global node $J$.\n\nWe need to find the correct value of the entry $K_{1,4}$. We must examine the connectivity of each element to see which ones contribute.\n- Element $e_1$ connects global nodes $(1, 2, 3)$. It does not contain node 4, so its contribution to $K_{1,4}$ is zero.\n- Element $e_2$ connects global nodes $(1, 3, 4)$. It contains both node 1 and node 4, so it is the only element that contributes to the $K_{1,4}$ entry.\n\nTherefore, the value of $K_{1,4}$ is determined solely by the corresponding entry from the local stiffness matrix of element $e_2$, which is $K^{(2)}$.\n\nThe problem states that for element $e_2$, the local nodes are ordered according to the global nodes $(1, 3, 4)$. This defines the mapping from local node indices to global node indices:\n- Local node 1 $\\rightarrow$ Global node 1\n- Local node 2 $\\rightarrow$ Global node 3\n- Local node 3 $\\rightarrow$ Global node 4\n\nThe local stiffness matrix for element $e_2$ is given as:\n$$\nK^{(2)} = \\begin{pmatrix} k^{(2)}_{11} & k^{(2)}_{12} & k^{(2)}_{13} \\\\ k^{(2)}_{21} & k^{(2)}_{22} & k^{(2)}_{23} \\\\ k^{(2)}_{31} & k^{(2)}_{32} & k^{(2)}_{33} \\end{pmatrix} = \\begin{pmatrix} 0.5 & 0 & -0.5 \\\\ 0 & 0.5 & -0.5 \\\\ -0.5 & -0.5 & 1 \\end{pmatrix}\n$$\nWe need to find the entry in $K^{(2)}$ that maps to the global entry $K_{1,4}$.\n- The global row index is $I=1$, which corresponds to local node 1.\n- The global column index is $J=4$, which corresponds to local node 3.\nThe required contribution is therefore the local matrix entry $k^{(2)}_{1,3}$.\n\nFrom the given matrix $K^{(2)}$, the entry in the first row and third column is:\n$$\nk^{(2)}_{1,3} = -0.5\n$$\nSince this is the only contribution, the correct value of the assembled global stiffness matrix entry is $K_{1,4} = -0.5$. The provided faulty matrix $\\tilde{K}$ is irrelevant to this calculation.", "answer": "$$\n\\boxed{-0.5}\n$$", "id": "2371849"}, {"introduction": "A deep understanding of assembly isn't just about constructing the global matrix; it's also about being able to deconstruct it. This practice presents a reverse-engineering puzzle: given a final assembled matrix $K$ and partial information about the mesh, your task is to deduce the missing element connectivity. By isolating an element's contribution using the principle that $K$ is the sum of expanded element matrices, you will gain a powerful appreciation for how the global matrix encodes the entire mesh topology [@problem_id:2371858].", "problem": "Consider a scalar, two-dimensional diffusion problem discretized by the Finite Element Method (FEM) using linear triangular elements, with one degree of freedom per global node. The finite element assembly rule states that the global stiffness matrix $K$ is obtained by summing element stiffness contributions into $K$ according to the element-to-global connectivity.\n\nA small mesh with $4$ global nodes has two triangular elements, $e_1$ and $e_2$. The local stiffness matrices $k^{e_1}$ and $k^{e_2}$ have already been computed from the weak form using standard linear shape functions but are provided to you numerically:\n$$\nk^{e_1} \\;=\\;\n\\begin{pmatrix}\n2 & -1 & -1 \\\\\n-1 & 1 & 0 \\\\\n-1 & 0 & 1\n\\end{pmatrix},\n\\qquad\nk^{e_2} \\;=\\;\n\\begin{pmatrix}\n3 & -2 & -1 \\\\\n-2 & 2 & 0 \\\\\n-1 & 0 & 1\n\\end{pmatrix}.\n$$\nThe connectivity of $e_1$ is fully known: its local nodes $\\{1,2,3\\}$ map to the global nodes $\\{1,2,3\\}$, respectively. The connectivity of $e_2$ is only partially known: its local nodes $\\{1,2,3\\}$ map to the global nodes $\\{2,\\;?,\\;4\\}$, respectively, where $?$ is an unknown global node index in $\\{1,2,3,4\\}$ that is distinct from $2$ and $4$.\n\nThe assembled global stiffness matrix $K \\in \\mathbb{R}^{4 \\times 4}$ is given as\n$$\nK \\;=\\;\n\\begin{pmatrix}\n4 & -3 & -1 & 0 \\\\\n-3 & 4 & 0 & -1 \\\\\n-1 & 0 & 1 & 0 \\\\\n0 & -1 & 0 & 1\n\\end{pmatrix}.\n$$\n\nUsing only the foundational FEM assembly principle derived from the weak form (namely, that $K$ is the sum of element stiffness matrices placed into $K$ according to the connectivity), and without introducing any unprovided formulas, deduce the missing global node index $?$ in the connectivity of $e_2$ that is consistent with the given $K$, $k^{e_1}$, $k^{e_2}$, and the known mapping of $e_1$.\n\nProvide your final answer as the single integer value of $?$ (no units). No rounding is required.", "solution": "The core principle of assembly in the Finite Element Method is that the global stiffness matrix $K$ is the sum of the element stiffness matrices ($k^e$) after they are expanded and mapped to the global degrees of freedom. For this two-element system, this relationship is expressed as:\n$$K = K^{(1)} + K^{(2)}$$\nwhere $K^{(1)}$ and $K^{(2)}$ are the $4 \\times 4$ global contribution matrices from elements $e_1$ and $e_2$, respectively. We can isolate the contribution of element $e_2$ by rearranging this equation:\n$$K^{(2)} = K - K^{(1)}$$\nFirst, we construct the global contribution matrix for element $e_1$, $K^{(1)}$. The connectivity for $e_1$ maps its local nodes $\\{1, 2, 3\\}$ to global nodes $\\{1, 2, 3\\}$. This means its local stiffness matrix $k^{e_1}$ is placed in the top-left $3 \\times 3$ block of a $4 \\times 4$ zero matrix:\n$$\nK^{(1)} =\n\\begin{pmatrix}\n2 & -1 & -1 & 0 \\\\\n-1 & 1 & 0 & 0 \\\\\n-1 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 0\n\\end{pmatrix}\n$$\nNext, we subtract this from the given global matrix $K$ to find $K^{(2)}$:\n$$\nK^{(2)} =\n\\begin{pmatrix}\n4 & -3 & -1 & 0 \\\\\n-3 & 4 & 0 & -1 \\\\\n-1 & 0 & 1 & 0 \\\\\n0 & -1 & 0 & 1\n\\end{pmatrix}\n-\n\\begin{pmatrix}\n2 & -1 & -1 & 0 \\\\\n-1 & 1 & 0 & 0 \\\\\n-1 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 0\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n2 & -2 & 0 & 0 \\\\\n-2 & 3 & 0 & -1 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & -1 & 0 & 1\n\\end{pmatrix}\n$$\nThe non-zero entries in the resulting matrix $K^{(2)}$ reveal which global nodes are part of element $e_2$. We can see that the rows and columns corresponding to global nodes 1, 2, and 4 have non-zero entries, while the row and column for global node 3 are all zero. Therefore, element $e_2$ must connect the global nodes $\\{1, 2, 4\\}$.\n\nThe problem states the partial connectivity of $e_2$ is $\\{2, ?, 4\\}$, where $?$ is an integer distinct from $2$ and $4$. Based on our deduction that the element connects nodes $\\{1, 2, 4\\}$, the missing node index $?$ must be $1$.", "answer": "$$\\boxed{1}$$", "id": "2371858"}, {"introduction": "This comprehensive exercise bridges the gap from theory to a complete, functional Finite Element Method (FEM) program. Starting from the Principle of Virtual Work, you will implement the entire workflow to analyze a composite structure, where material properties like Young's modulus $E$ vary between elements. This practice demonstrates the true power of the assembly procedure, which elegantly handles material heterogeneity by building the global system one element at a time, providing a flexible framework for tackling complex engineering problems [@problem_id:2371824].", "problem": "You are to write a complete program that assembles the global stiffness matrix for a two-dimensional linear elastic composite using the Finite Element Method (FEM) starting from the Principle of Virtual Work and the small-strain, linear isotropic constitutive law. Use plane stress kinematics. The objective is to compute displacement responses for a simple mesh where adjacent elements have different Youngâ€™s moduli that may differ by several orders of magnitude. All distances must be expressed in meters, forces in newtons, and stresses in pascals. Angles are not needed. All outputs must be expressed in meters.\n\nThe fundamental base you must use includes: (i) the Principle of Virtual Work for linear elasticity, (ii) the small-strain tensor definition for two dimensions, and (iii) the linear, isotropic plane stress constitutive relation. From these principles, you must derive the element stiffness and assemble the global stiffness matrix, then apply boundary conditions and loads to solve for displacements.\n\nDomain and mesh:\n- Consider a rectangular domain of size $L_x = 2$ meters and $L_y = 1$ meter, with constant thickness $t = 1$ meter (plane stress through-thickness assumption, but keep thickness for load equivalence).\n- Use the following nodal set with coordinates $(x_i,y_i)$ in meters:\n  - Node index $0$: $(0,0)$,\n  - Node index $1$: $(1,0)$,\n  - Node index $2$: $(2,0)$,\n  - Node index $3$: $(0,1)$,\n  - Node index $4$: $(1,1)$,\n  - Node index $5$: $(2,1)$.\n- Use four linear triangular elements with the following node connectivity (each triplet lists the indices of the nodes of the triangle):\n  - Element $0$: $(0,1,4)$,\n  - Element $1$: $(0,4,3)$,\n  - Element $2$: $(1,2,5)$,\n  - Element $3$: $(1,5,4)$.\n\nComposite material assignment:\n- Each triangle with centroid $x$-coordinate strictly less than $1$ meter uses material $E_1$; otherwise it uses material $E_2$.\n- Poissonâ€™s ratio is uniform and equal to $\\nu = 0.3$ for all elements.\n\nLoading and boundary conditions:\n- Apply a uniform traction $\\mathbf{t} = (t_x,t_y)$ with $t_x = 10^6$ pascals and $t_y = 0$ on the boundary at $x = L_x$, i.e., along the edge between node indices $2$ and $5$. Treat this as a physical traction (force per area), and convert to equivalent nodal line loads using the standard consistent load approach by integrating along the edge and multiplying by the thickness $t$.\n- Impose homogeneous Dirichlet boundary conditions on the displacement components at all nodes with $x = 0$ meters (node indices $0$ and $3$): set $u_x = 0$ and $u_y = 0$ at those nodes.\n\nGoverning equations and discretization framework:\n- Start from the Principle of Virtual Work for linear elasticity in two dimensions and the small-strain definitions to obtain the bilinear form that defines the stiffness operator and the linear functional for Neumann boundary conditions. Use linear triangular elements with constant strain per element. For each element, compute the standard strain-displacement matrix $B$ and the plane stress elasticity matrix $D$ from the constitutive law with the elementâ€™s Youngâ€™s modulus and $\\nu$.\n- Assemble the global stiffness matrix $K$ by summing element contributions mapped by the element connectivity.\n- Assemble the global force vector $f$ by adding the consistent nodal forces from the applied traction on the boundary edge at $x = L_x$.\n\nSolution and requested outputs:\n- Enforce the Dirichlet boundary conditions by eliminating the prescribed degrees of freedom and solve the resulting linear system for the unknown displacement degrees of freedom.\n- For each test case listed below, compute the displacement magnitude at node index $5$ (the top-right corner at $(2,1)$ meters), i.e., $\\|\\mathbf{u}_5\\|_2 = \\sqrt{u_x^2 + u_y^2}$ in meters.\n\nTest suite:\n- Case $1$ (extreme contrast): $E_1 = 10^{12}$ pascals, $E_2 = 10^{6}$ pascals.\n- Case $2$ (moderate contrast): $E_1 = 10^{9}$ pascals, $E_2 = 10^{6}$ pascals.\n- Case $3$ (uniform reference): $E_1 = 10^{9}$ pascals, $E_2 = 10^{9}$ pascals.\n\nOutput specification:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in meters, for the three test cases in the order above. Use scientific notation with exactly $6$ significant digits for each float. For example, a valid output format is like $[1.234560\\text{e-}03,4.321000\\text{e+}00,5.000000\\text{e-}02]$.", "solution": "The solution is derived from the Principle of Virtual Work, which for a linear elastic solid without body forces is:\n$$\n\\int_V \\boldsymbol{\\sigma} : \\delta\\boldsymbol{\\varepsilon} \\, dV = \\int_{S_t} \\mathbf{t} \\cdot \\delta\\mathbf{u} \\, dS\n$$\nWe discretize this equation using the Finite Element Method. For each 3-node linear triangular element, the displacement field $\\mathbf{u}$ is approximated using shape functions $\\mathbf{N}$ and nodal displacements $\\mathbf{d}_e$, such that $\\mathbf{u} = \\mathbf{N}\\mathbf{d}_e$. The strain vector $\\boldsymbol{\\varepsilon}$ is then related to nodal displacements via the strain-displacement matrix $\\mathbf{B}$, where $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\mathbf{d}_e$. The stress vector $\\boldsymbol{\\sigma}$ is given by the plane stress constitutive law $\\boldsymbol{\\sigma} = \\mathbf{D}\\boldsymbol{\\varepsilon}$, where the elasticity matrix $\\mathbf{D}$ depends on the element's Young's modulus ($E_1$ or $E_2$) and Poisson's ratio $\\nu$.\n\nSubstituting these into the weak form and integrating over the element volume yields the element stiffness matrix:\n$$\n\\mathbf{K}_e = t A_e \\mathbf{B}^T \\mathbf{D} \\mathbf{B}\n$$\nwhere $t$ is the thickness and $A_e$ is the element area. The global stiffness matrix $\\mathbf{K}$ is assembled by summing the contributions from all $\\mathbf{K}_e$ according to the mesh connectivity.\n\nThe applied traction $\\mathbf{t}$ is converted into a consistent nodal force vector $\\mathbf{f}$. The edge between nodes 2 and 5 has a length of 1 m, so the total force in the x-direction is $F_x = 10^6 \\text{ Pa} \\times 1 \\text{ m} \\times 1 \\text{ m} = 10^6$ N. For a linear element, this force is distributed equally, yielding nodal forces of $5 \\times 10^5$ N at nodes 2 and 5.\n\nAfter assembling $\\mathbf{K}$ and $\\mathbf{f}$, the homogeneous Dirichlet boundary conditions ($u_x=u_y=0$ at nodes 0 and 3) are enforced by removing the corresponding rows and columns from the system. The resulting reduced linear system $\\mathbf{K}_{red} \\mathbf{d}_{red} = \\mathbf{f}_{red}$ is solved for the unknown displacements. Finally, the displacement magnitude at node 5, $\\|\\mathbf{u}_5\\|_2$, is calculated for each of the three material test cases. The material for each element is determined by its centroid's x-coordinate: elements 0 and 1 (with centroid $x < 1$) use $E_1$, and elements 2 and 3 (with centroid $x \\ge 1$) use $E_2$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 2D linear elasticity problem using the Finite Element Method.\n    \"\"\"\n    \n    # Define problem parameters\n    nodes = np.array([\n        [0.0, 0.0], [1.0, 0.0], [2.0, 0.0],\n        [0.0, 1.0], [1.0, 1.0], [2.0, 1.0]\n    ])\n    \n    elements = np.array([\n        [0, 1, 4], [0, 4, 3],\n        [1, 2, 5], [1, 5, 4]\n    ])\n    \n    nu = 0.3  # Poisson's ratio\n    thickness = 1.0  # meters\n    traction_x = 1e6  # Pascals\n    \n    # Define test cases\n    test_cases = [\n        (1e12, 1e6), # Case 1\n        (1e9, 1e6),  # Case 2\n        (1e9, 1e9)   # Case 3\n    ]\n    \n    results = []\n\n    for E1, E2 in test_cases:\n        \n        n_nodes = nodes.shape[0]\n        n_dofs = 2 * n_nodes\n        \n        K = np.zeros((n_dofs, n_dofs))\n        f = np.zeros(n_dofs)\n        \n        # Assemble global stiffness matrix K\n        for elem_nodes in elements:\n            # Determine material properties for the element\n            coords = nodes[elem_nodes]\n            centroid_x = np.mean(coords[:, 0])\n            \n            E = E1 if centroid_x  1.0 else E2\n            \n            # Constitutive matrix D for plane stress\n            D_factor = E / (1.0 - nu**2)\n            D = D_factor * np.array([\n                [1.0, nu, 0.0],\n                [nu, 1.0, 0.0],\n                [0.0, 0.0, (1.0 - nu) / 2.0]\n            ])\n            \n            # Strain-displacement matrix B for linear triangle\n            (x1, y1), (x2, y2), (x3, y3) = coords[0], coords[1], coords[2]\n            \n            # Area of the element must be positive for the formulation to work.\n            # Using the absolute value of the determinant formula handles any node ordering (CW or CCW).\n            area = 0.5 * abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1))\n\n            B = (1.0 / (2.0 * area)) * np.array([\n                [y2 - y3, 0,       y3 - y1, 0,       y1 - y2, 0      ],\n                [0,       x3 - x2, 0,       x1 - x3, 0,       x2 - x1],\n                [x3 - x2, y2 - y3, x1 - x3, y3 - y1, x2 - x1, y1 - y2]\n            ])\n            \n            # Element stiffness matrix\n            Ke = thickness * area * (B.T @ D @ B)\n            \n            # Assemble Ke into K\n            dof_indices = []\n            for node_idx in elem_nodes:\n                dof_indices.extend([2 * node_idx, 2 * node_idx + 1])\n            \n            # Use np.ix_ for convenient submatrix assignment\n            K[np.ix_(dof_indices, dof_indices)] += Ke\n\n        # Assemble global force vector f\n        edge_len_2_5 = np.linalg.norm(nodes[5] - nodes[2])\n        total_force = traction_x * edge_len_2_5 * thickness\n        \n        # Distribute force to nodes 2 and 5 (consistent nodal loads for linear element)\n        f[2 * 2] += total_force / 2.0  # Force on node 2 in x-direction\n        f[2 * 5] += total_force / 2.0  # Force on node 5 in x-direction\n        \n        # Apply boundary conditions\n        prescribed_dofs = [0, 1, 6, 7] # DOFs for nodes 0 (0,1) and 3 (6,7)\n        all_dofs = np.arange(n_dofs)\n        free_dofs = np.setdiff1d(all_dofs, prescribed_dofs)\n        \n        # Solve for unknown displacements\n        K_reduced = K[np.ix_(free_dofs, free_dofs)]\n        f_reduced = f[free_dofs]\n        \n        u_reduced = np.linalg.solve(K_reduced, f_reduced)\n        \n        # Reconstruct full displacement vector\n        u = np.zeros(n_dofs)\n        u[free_dofs] = u_reduced\n        \n        # Calculate displacement magnitude at node 5\n        u5x, u5y = u[10], u[11]\n        disp_magnitude = np.sqrt(u5x**2 + u5y**2)\n        \n        results.append(disp_magnitude)\n\n    # Format output according to specification\n    formatted_results = [f\"{res:.6e}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2371824"}]}