{"hands_on_practices": [{"introduction": "The power of the Finite Element Method lies in its ability to transform a complex boundary value problem, expressed in its weak form, into a system of linear algebraic equations. This exercise provides a foundational, hands-on experience in this process [@problem_id:2440325]. By manually assembling the stiffness matrix and force vector for a simple two-element model, you will gain a concrete understanding of how the abstract terms in the weak formulation translate directly into the tangible components of the matrix system $K\\mathbf{u} = \\mathbf{F}$ that computers are tasked with solving.", "problem": "Consider the steady one-dimensional boundary value problem (BVP) for diffusion on the interval $\\left(0,1\\right)$:\n$$\n- \\frac{d}{dx}\\!\\left(k\\,\\frac{du}{dx}\\right) \\;=\\; f_0 \\quad \\text{in } \\left(0,1\\right),\n$$\nwith the essential boundary condition $u(0)=0$ and the natural boundary condition $k\\,u'(1)=t_0$, where $k>0$, $f_0$ and $t_0$ are given constants. Discretize the weak form of this problem using the standard Galerkin Finite Element Method (FEM) with two uniform linear elements on $\\left[0,1\\right]$ (nodes at $x_0=0$, $x_1=\\tfrac{1}{2}$, $x_2=1$). After imposing the essential boundary condition $u(0)=0$, manually construct the assembled reduced $2\\times 2$ global stiffness matrix and the corresponding right-hand side force vector associated with the unknown nodal values $u_1$ and $u_2$. \n\nProvide your final answer as the determinant of this assembled reduced $2\\times 2$ stiffness matrix, expressed as a simplified analytical expression in terms of $k$ only. Do not include units. No rounding is required.", "solution": "The problem statement will first be subjected to rigorous validation.\n\n**Step 1: Extract Givens**\n- Differential Equation: $- \\frac{d}{dx}\\!\\left(k\\,\\frac{du}{dx}\\right) = f_0$\n- Domain: $x \\in (0,1)$\n- Boundary Conditions: $u(0)=0$ (essential) and $k\\,u'(1)=t_0$ (natural)\n- Constants: $k>0$, $f_0$, $t_0$ are given constants.\n- Discretization: Standard Galerkin Finite Element Method (FEM) with two uniform linear elements.\n- Nodes: $x_0=0$, $x_1=\\tfrac{1}{2}$, $x_2=1$.\n- Goal: Construct the reduced $2\\times 2$ global stiffness matrix and force vector for unknown nodal values $u_1$ and $u_2$, then find the determinant of this stiffness matrix.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is a standard, second-order, one-dimensional boundary value problem for diffusion.\n- **Scientifically Grounded:** The problem is a canonical representation of steady-state heat conduction or diffusion, a fundamental concept in physics and engineering. It is scientifically sound.\n- **Well-Posed:** The combination of an essential boundary condition at one end and a natural (Neumann) boundary condition at the other for a second-order elliptic equation ensures a unique and stable solution exists. The problem is well-posed.\n- **Objective:** The problem is stated using precise mathematical language, with no subjective or ambiguous terms.\n- **Completeness:** All necessary information, including the differential equation, domain, boundary conditions, discretization scheme, and required output, is explicitly provided. The problem is self-contained.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A complete solution will be developed.\n\nThe starting point is the strong form of the boundary value problem:\n$$\n- \\frac{d}{dx}\\!\\left(k\\,\\frac{du}{dx}\\right) = f_0 \\quad \\text{for } x \\in (0,1)\n$$\nwith boundary conditions $u(0)=0$ and $k \\frac{du}{dx}(1) = t_0$.\n\nTo derive the weak form, we multiply the differential equation by a suitable test function $v(x)$ and integrate over the domain $\\Omega = (0,1)$:\n$$\n-\\int_{0}^{1} v \\frac{d}{dx}\\!\\left(k\\,\\frac{du}{dx}\\right) dx = \\int_{0}^{1} v f_0 dx\n$$\nApplying integration by parts to the left-hand side term gives:\n$$\n\\int_{0}^{1} \\frac{dv}{dx} k \\frac{du}{dx} dx - \\left[ v k \\frac{du}{dx} \\right]_{0}^{1} = \\int_{0}^{1} v f_0 dx\n$$\nRearranging and substituting the boundary conditions:\n$$\n\\int_{0}^{1} k \\frac{du}{dx} \\frac{dv}{dx} dx = \\int_{0}^{1} f_0 v dx + v(1) \\left(k \\frac{du}{dx}(1)\\right) - v(0) \\left(k \\frac{du}{dx}(0)\\right)\n$$\nThe essential boundary condition is $u(0)=0$. The test function $v$ must belong to a space of functions where this condition is met in its homogeneous form, i.e., $v(0)=0$. This causes the term involving $v(0)$ to vanish. The natural boundary condition is $k \\frac{du}{dx}(1) = t_0$. This value is substituted directly.\n\nThe weak form is: Find $u(x) \\in V = \\{ w \\in H^1(0,1) | w(0)=0 \\}$ such that for all $v(x) \\in V$:\n$$\n\\int_{0}^{1} k u'(x) v'(x) dx = \\int_{0}^{1} f_0 v(x) dx + t_0 v(1)\n$$\nThe domain $[0,1]$ is discretized into two uniform elements, denoted $\\Omega_1 = [0, \\tfrac{1}{2}]$ and $\\Omega_2 = [\\tfrac{1}{2}, 1]$. The nodes are at $x_0=0$, $x_1=\\tfrac{1}{2}$, and $x_2=1$. The element length is $h = \\tfrac{1}{2}$.\n\nWe approximate the solution $u(x)$ using linear basis (shape) functions $N_i(x)$:\n$$\nu(x) \\approx u^h(x) = \\sum_{j=0}^{2} u_j N_j(x) = u_0 N_0(x) + u_1 N_1(x) + u_2 N_2(x)\n$$\nwhere $u_j = u(x_j)$ are the nodal values. The Galerkin method uses the basis functions as test functions, $v(x) = N_i(x)$.\n\nThe elemental stiffness matrix for a linear element of length $h$ is given by $K^{(e)}_{ij} = \\int_{\\Omega_e} k \\frac{dN_j}{dx} \\frac{dN_i}{dx} dx$. For a constant $k$ and element length $h$, this is:\n$$\nK^{(e)} = \\frac{k}{h} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}\n$$\nSince $h=\\tfrac{1}{2}$, the stiffness matrix for both elements is:\n$$\nK^{(1)} = K^{(2)} = \\frac{k}{1/2} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} = \\begin{pmatrix} 2k & -2k \\\\ -2k & 2k \\end{pmatrix}\n$$\nThe elemental force vector from the source term $f_0$ is $F^{(e)}_{f,i} = \\int_{\\Omega_e} f_0 N_i dx$. For a constant $f_0$ and linear element, this is:\n$$\nF^{(e)}_f = \\frac{f_0 h}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\n$$\nSince $h=\\tfrac{1}{2}$, the force vector for both elements is:\n$$\nF^{(1)}_f = F^{(2)}_f = \\frac{f_0 (1/2)}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} f_0/4 \\\\ f_0/4 \\end{pmatrix}\n$$\nNow, we assemble the $3 \\times 3$ global system $K \\mathbf{u} = F$.\nThe global stiffness matrix $K$ is assembled by summing the contributions from each element:\n$$\nK_{00} = K^{(1)}_{11} = 2k\n$$\n$$\nK_{11} = K^{(1)}_{22} + K^{(2)}_{11} = 2k + 2k = 4k\n$$\n$$\nK_{22} = K^{(2)}_{22} = 2k\n$$\n$$\nK_{01} = K_{10} = K^{(1)}_{12} = -2k\n$$\n$$\nK_{12} = K_{21} = K^{(2)}_{12} = -2k\n$$\nSo, the global stiffness matrix is:\n$$\nK = \\begin{pmatrix} 2k & -2k & 0 \\\\ -2k & 4k & -2k \\\\ 0 & -2k & 2k \\end{pmatrix}\n$$\nThe global force vector $F$ has contributions from the source term $f_0$ and the natural boundary condition $t_0$. The total force vector is $F_i = \\int_0^1 f_0 N_i dx + t_0 N_i(1)$.\n$$\nF_0 = \\int_{\\Omega_1} f_0 N_0 dx + t_0 N_0(1) = f_0/4 + t_0(0) = f_0/4\n$$\n$$\nF_1 = \\int_{\\Omega_1} f_0 N_1 dx + \\int_{\\Omega_2} f_0 N_1 dx + t_0 N_1(1) = f_0/4 + f_0/4 + t_0(0) = f_0/2\n$$\n$$\nF_2 = \\int_{\\Omega_2} f_0 N_2 dx + t_0 N_2(1) = f_0/4 + t_0(1) = f_0/4 + t_0\n$$\nThe assembled system is:\n$$\n\\begin{pmatrix} 2k & -2k & 0 \\\\ -2k & 4k & -2k \\\\ 0 & -2k & 2k \\end{pmatrix} \\begin{pmatrix} u_0 \\\\ u_1 \\\\ u_2 \\end{pmatrix} = \\begin{pmatrix} f_0/4 \\\\ f_0/2 \\\\ f_0/4 + t_0 \\end{pmatrix}\n$$\nNext, we impose the essential boundary condition $u(0)=u_0=0$. This reduces the system to a $2 \\times 2$ system for the unknown nodal values $u_1$ and $u_2$. We consider the second and third rows of the full system and substitute $u_0=0$:\n$$\n-2k(u_0) + 4k u_1 - 2k u_2 = f_0/2 \\implies 4k u_1 - 2k u_2 = f_0/2\n$$\n$$\n0(u_0) - 2k u_1 + 2k u_2 = f_0/4 + t_0 \\implies -2k u_1 + 2k u_2 = f_0/4 + t_0\n$$\nThe resulting reduced $2 \\times 2$ system is:\n$$\n\\begin{pmatrix} 4k & -2k \\\\ -2k & 2k \\end{pmatrix} \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix} = \\begin{pmatrix} f_0/2 \\\\ f_0/4 + t_0 \\end{pmatrix}\n$$\nThe problem asks for the determinant of the assembled reduced $2 \\times 2$ global stiffness matrix, which is:\n$$\nK_{reduced} = \\begin{pmatrix} 4k & -2k \\\\ -2k & 2k \\end{pmatrix}\n$$\nThe determinant is calculated as:\n$$\n\\det(K_{reduced}) = (4k)(2k) - (-2k)(-2k) = 8k^2 - 4k^2 = 4k^2\n$$\nThis is the required expression.", "answer": "$$\\boxed{4k^{2}}$$", "id": "2440325"}, {"introduction": "One of the most significant advantages of the weak formulation is its ability to naturally handle singular loads and sources, such as concentrated forces or point heat sources. This practice explores this capability by analyzing a heat conduction problem where a source is modeled with a Dirac delta function, $\\delta(x-x_p)$ [@problem_id:2440379]. Stepping through the derivation and solution highlights how the integral-based weak form elegantly incorporates such phenomena, a task that is far more cumbersome in the context of the strong form, which would require dealing with discontinuities in the solution's derivatives.", "problem": "A slender rod of length $L$ and constant cross-sectional area $A$ conducts heat in steady state with constant thermal conductivity $k$. There is no distributed volumetric heat source, but a concentrated point heat input of total rate $Q$ (in Watts) is applied at position $x_p$, where $0 < x_p < a < L$. The boundary temperatures are prescribed as $u(0) = 0$ and $u(L) = 0$. You will derive the strong form and weak form of the boundary value problem, then approximate the solution using the Finite Element Method (FEM) with a mesh of two linear elements and three nodes at $x_0 = 0$, $x_1 = a$, and $x_2 = L$, deliberately choosing $x_p \\neq x_i$ for any node so that the point source lies strictly within the left element.\n\nStarting only from conservation of energy and Fourier’s law, and without assuming any shortcut formulas:\n\n- Derive the strong form for the temperature field $u(x)$ on $(0,L)$ that models this situation, including all boundary conditions.\n- Derive the weak form by multiplying the strong form by an arbitrary smooth test function $v(x)$ satisfying the essential boundary conditions and integrating by parts exactly once, identifying the function spaces involved.\n- Construct the two-node linear shape functions on each element and use the weak form to obtain the element-level and assembled global finite element equilibrium equations for the three nodal temperatures $u_0$, $u_1$, and $u_2$.\n- Enforce the essential boundary conditions $u_0 = 0$ and $u_2 = 0$ and solve the resulting reduced system in closed form for the interior nodal temperature $u_1$ as a function of $Q$, $k$, $A$, $L$, $a$, and $x_p$.\n\nProvide your final result as a single closed-form analytic expression for $u_1$. Express the temperature in Kelvin.", "solution": "The problem will be validated before any attempt at a solution is made. This is not optional; it is a necessity for rigorous scientific work.\n\nStep 1: Extract Givens.\n- A slender rod of length $L$ and constant cross-sectional area $A$.\n- Heat conduction is in steady state.\n- Thermal conductivity $k$ is constant.\n- There is no distributed volumetric heat source.\n- A concentrated point heat input of total rate $Q$ is applied at position $x_p$.\n- The position of the source satisfies $0 < x_p < a < L$.\n- Prescribed boundary temperatures: $u(0) = 0$ and $u(L) = 0$.\n- The solution is to be approximated using the Finite Element Method (FEM) with a mesh of two linear elements.\n- The three nodes are at $x_0 = 0$, $x_1 = a$, and $x_2 = L$.\n- The point source is located strictly within the first element, as $x_p \\neq x_i$ for any node $i$.\n- The final result for the nodal temperature $u_1$ must be a single closed-form analytic expression.\n- The temperature is to be expressed in Kelvin.\n\nStep 2: Validate Using Extracted Givens.\nThe problem is assessed against the criteria for validity.\n- **Scientific Grounding**: The problem is based on the fundamental principles of heat transfer, namely the conservation of energy and Fourier's law of heat conduction. The use of a point heat source, mathematically represented by a Dirac delta function, is a standard and valid idealization in physics and engineering analysis. The problem is scientifically sound.\n- **Well-Posedness**: The problem describes a second-order ordinary differential equation with prescribed Dirichlet boundary conditions at both ends. This constitutes a well-posed boundary value problem, for which a unique solution is expected to exist.\n- **Objectivity**: The problem is stated using precise, unambiguous technical language. It is free of subjective or opinion-based content.\n- **Completeness and Consistency**: All necessary parameters ($L, A, k, Q, x_p, a$), boundary conditions, and geometric constraints are provided. The conditions are internally consistent (e.g., $0 < x_p < a < L$ correctly places the source within the first element of the defined mesh).\n- **Physical Realism**: While a boundary condition of $u(0) = 0$ Kelvin is physically impossible, it is a common mathematical simplification in theoretical problems, typically representing a temperature difference relative to a reference. We will proceed under this understanding that it is a mathematical idealization.\n\nStep 3: Verdict and Action.\nThe problem is valid. A solution will be derived.\n\nThe derivation will proceed in the four stages requested.\n\nFirst, we derive the strong form of the boundary value problem.\nThe governing principle is the conservation of energy in steady state. For any arbitrary segment of the rod $[x_a, x_b]$ not containing the source at $x_p$, the rate of heat entering at $x_a$ must equal the rate of heat exiting at $x_b$. The heat flow rate is given by the product of heat flux, $q(x)$, and area, $A$. Thus, $q(x_a)A - q(x_b)A = 0$.\nFourier's law states that $q(x) = -k \\frac{du}{dx}$. Substituting this into the energy balance gives $-kA\\frac{du}{dx}|_{x_a} - (-kA\\frac{du}{dx}|_{x_b}) = 0$. Since this holds for any interval $[x_a, x_b]$, it implies that the quantity $-kA \\frac{du}{dx}$ is constant. Differentiating with respect to $x$ gives the governing differential equation for regions without sources:\n$$\n\\frac{d}{dx}\\left(-kA\\frac{du}{dx}\\right) = 0\n$$\nSince $k$ and $A$ are constant, this simplifies to $\\frac{d^2u}{dx^2} = 0$ for $x \\in (0, L)$ and $x \\neq x_p$.\n\nAt the location of the point source, $x_p$, we perform an energy balance over an infinitesimal control volume $[x_p - \\epsilon, x_p + \\epsilon]$ as $\\epsilon \\to 0$. The balance is: (heat in at $x_p-\\epsilon$) - (heat out at $x_p+\\epsilon$) + (source term) = $0$.\n$$\n\\left(-kA\\frac{du}{dx}\\right)\\bigg|_{x_p-\\epsilon} - \\left(-kA\\frac{du}{dx}\\right)\\bigg|_{x_p+\\epsilon} + Q = 0\n$$\nThis represents a discontinuity in the heat flux. We can express the source term $Q$ distributed over the domain using the Dirac delta function, $\\delta(x-x_p)$. The governing equation for the entire domain $(0,L)$ becomes:\n$$\n-kA\\frac{d^2u}{dx^2} = Q \\delta(x-x_p)\n$$\nThe strong form is to find the temperature field $u(x)$ that satisfies this differential equation subject to the prescribed Dirichlet boundary conditions: $u(0)=0$ and $u(L)=0$.\n\nSecond, we derive the weak form.\nWe multiply the strong form's differential equation by a smooth test function $v(x)$ and integrate over the domain $\\Omega = (0, L)$. The test function $v(x)$ must belong to a function space $V$ where functions satisfy the homogeneous form of the essential boundary conditions, i.e., $v(0)=0$ and $v(L)=0$.\n$$\n\\int_0^L \\left(-kA\\frac{d^2u}{dx^2} - Q \\delta(x-x_p)\\right) v(x) \\,dx = 0\n$$\nThis must hold for all $v \\in V$. We separate the terms:\n$$\n-\\int_0^L kA\\frac{d^2u}{dx^2} v(x) \\,dx - \\int_0^L Q \\delta(x-x_p) v(x) \\,dx = 0\n$$\nThe second integral is evaluated using the sifting property of the Dirac delta function: $\\int_0^L Q \\delta(x-x_p) v(x) \\,dx = Q v(x_p)$.\nWe apply integration by parts to the first term, $\\int u''v = [u'v] - \\int u'v'$:\n$$\n-\\int_0^L kA\\frac{d^2u}{dx^2} v(x) \\,dx = -kA \\left[ \\frac{du}{dx} v(x) \\right]_0^L + \\int_0^L kA \\frac{du}{dx} \\frac{dv}{dx} \\,dx\n$$\nThe boundary term, $-kA \\left( \\frac{du}{dx}|_L v(L) - \\frac{du}{dx}|_0 v(0) \\right)$, vanishes because $v(L)=0$ and $v(0)=0$ for any test function $v \\in V$.\nSubstituting back, the equation becomes:\n$$\n\\int_0^L kA \\frac{du}{dx} \\frac{dv}{dx} \\,dx - Q v(x_p) = 0\n$$\nThe weak form is: Find $u \\in U = \\{u \\in H^1(0,L) \\mid u(0)=0, u(L)=0\\}$ such that for all $v \\in V = \\{v \\in H^1(0,L) \\mid v(0)=0, v(L)=0\\}$, the following relation holds:\n$$\n\\int_0^L kA \\frac{du}{dx} \\frac{dv}{dx} \\,dx = Q v(x_p)\n$$\nHere, $H^1(0,L)$ is the Sobolev space of functions defined on $(0,L)$ with square-integrable first derivatives.\n\nThird, we construct the finite element approximation.\nThe domain $[0, L]$ is discretized by nodes $x_0=0, x_1=a, x_2=L$, forming two elements: element $1$ over $[0,a]$ and element $2$ over $[a,L]$.\nThe temperature field $u(x)$ and test function $v(x)$ are approximated using linear shape functions $N_i(x)$:\n$u(x) \\approx u_h(x) = \\sum_{i=0}^{2} u_i N_i(x)$ and $v(x) \\approx v_h(x) = \\sum_{j=0}^{2} c_j N_j(x)$, where $u_i$ are the unknown nodal temperatures and $c_j$ are arbitrary coefficients.\n\nThe global shape functions $N_i(x)$ are piecewise linear.\nFor element $1$ ($x \\in [0, a]$, length $L_e^{(1)}=a$):\n$N_0^{(1)}(x) = 1 - \\frac{x}{a}$, $N_1^{(1)}(x) = \\frac{x}{a}$.\nTheir derivatives are $\\frac{dN_0^{(1)}}{dx} = -\\frac{1}{a}$, $\\frac{dN_1^{(1)}}{dx} = \\frac{1}{a}$.\n\nFor element $2$ ($x \\in [a, L]$, length $L_e^{(2)}=L-a$):\n$N_1^{(2)}(x) = 1 - \\frac{x-a}{L-a} = \\frac{L-x}{L-a}$, $N_2^{(2)}(x) = \\frac{x-a}{L-a}$.\nTheir derivatives are $\\frac{dN_1^{(2)}}{dx} = -\\frac{1}{L-a}$, $\\frac{dN_2^{(2)}}{dx} = \\frac{1}{L-a}$.\n\nSubstituting these approximations into the weak form gives the algebraic system $[K]\\{u\\}=\\{F\\}$.\nThe stiffness matrix components are $K_{ji} = \\int_0^L kA \\frac{dN_j}{dx} \\frac{dN_i}{dx} dx$.\nThe force vector components are $F_j = Q N_j(x_p)$.\n\nThe element stiffness matrix for a 1D linear element of length $L_e$ is $k^{(e)} = \\frac{kA}{L_e} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}$.\nFor element $1$ (nodes $0, 1$), $L_e=a$: $k^{(1)} = \\frac{kA}{a} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}$.\nFor element $2$ (nodes $1, 2$), $L_e=L-a$: $k^{(2)} = \\frac{kA}{L-a} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}$.\n\nThe source $Q$ at $x_p$ is located within element $1$ since $0 < x_p < a$.\nThe element force vector is $F^{(e)}_j = \\int_{L_e} Q \\delta(x-x_p) N_j^{(e)}(x) dx = Q N_j^{(e)}(x_p)$.\nFor element 1 (nodes 0, 1): $F^{(1)} = \\begin{pmatrix} Q N_0^{(1)}(x_p) \\\\ Q N_1^{(1)}(x_p) \\end{pmatrix} = Q \\begin{pmatrix} 1-x_p/a \\\\ x_p/a \\end{pmatrix}$.\nFor element 2, there is no source: $F^{(2)} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}$.\n\nAssembling the global system for nodes $(0, 1, 2)$:\n$K_{00} = k^{(1)}_{00} = \\frac{kA}{a}$\n$K_{11} = k^{(1)}_{11} + k^{(2)}_{11} = \\frac{kA}{a} + \\frac{kA}{L-a}$\n$K_{22} = k^{(2)}_{22} = \\frac{kA}{L-a}$\n$K_{01}=K_{10} = k^{(1)}_{01} = -\\frac{kA}{a}$\n$K_{12}=K_{21} = k^{(2)}_{12} = -\\frac{kA}{L-a}$\n$K_{02}=K_{20} = 0$\nThe global stiffness matrix is $K = kA \\begin{pmatrix} \\frac{1}{a} & -\\frac{1}{a} & 0 \\\\ -\\frac{1}{a} & \\frac{1}{a} + \\frac{1}{L-a} & -\\frac{1}{L-a} \\\\ 0 & -\\frac{1}{L-a} & \\frac{1}{L-a} \\end{pmatrix}$.\n\nThe global force vector is $F = \\begin{pmatrix} F^{(1)}_0 \\\\ F^{(1)}_1 + F^{(2)}_1 \\\\ F^{(2)}_2 \\end{pmatrix} = \\begin{pmatrix} Q(1-x_p/a) \\\\ Q(x_p/a) \\\\ 0 \\end{pmatrix}$.\n\nThe full system of equations is:\n$$\nkA \\begin{pmatrix} \\frac{1}{a} & -\\frac{1}{a} & 0 \\\\ -\\frac{1}{a} & \\frac{1}{a} + \\frac{1}{L-a} & -\\frac{1}{L-a} \\\\ 0 & -\\frac{1}{L-a} & \\frac{1}{L-a} \\end{pmatrix} \\begin{pmatrix} u_0 \\\\ u_1 \\\\ u_2 \\end{pmatrix} = Q \\begin{pmatrix} 1 - \\frac{x_p}{a} \\\\ \\frac{x_p}{a} \\\\ 0 \\end{pmatrix}\n$$\n\nFourth, we enforce boundary conditions and solve for $u_1$.\nThe essential boundary conditions are $u_0 = 0$ and $u_2 = 0$. These nodes are constrained. The only unknown is the temperature $u_1$ at the free node $x_1=a$. We only need the equation corresponding to this degree of freedom, which is the second row of the matrix system:\n$$\nkA \\left[ -\\frac{1}{a} u_0 + \\left(\\frac{1}{a} + \\frac{1}{L-a}\\right)u_1 - \\frac{1}{L-a} u_2 \\right] = Q \\frac{x_p}{a}\n$$\nSubstituting $u_0 = 0$ and $u_2 = 0$:\n$$\nkA \\left(\\frac{1}{a} + \\frac{1}{L-a}\\right)u_1 = Q \\frac{x_p}{a}\n$$\nWe simplify the term in the parenthesis:\n$$\n\\frac{1}{a} + \\frac{1}{L-a} = \\frac{L-a+a}{a(L-a)} = \\frac{L}{a(L-a)}\n$$\nThe equation for $u_1$ becomes:\n$$\nkA \\frac{L}{a(L-a)} u_1 = Q \\frac{x_p}{a}\n$$\nFinally, we solve for $u_1$:\n$$\nu_1 = \\frac{Q x_p/a}{kA L / (a(L-a))} = \\frac{Q x_p}{a} \\cdot \\frac{a(L-a)}{kA L}\n$$\n$$\nu_1 = \\frac{Q x_p (L-a)}{kA L}\n$$\nThis is the closed-form solution for the temperature at node $x_1=a$. The unit analysis $\\frac{[W][m][m]}{[W/(m \\cdot K)][m^2][m]} = [K]$ confirms the result is a temperature, consistent with the problem's request.", "answer": "$$\n\\boxed{\\frac{Q x_p (L-a)}{k A L}}\n$$", "id": "2440379"}, {"introduction": "Moving from theory to practice, the integrals in the weak form are almost always computed numerically using quadrature rules. This computational exercise investigates the crucial link between the accuracy of this numerical integration and the quality of the final finite element solution [@problem_id:2440375]. By intentionally using an inaccurate quadrature rule—a so-called \"variational crime\"—and comparing the results against a sufficiently accurate one, you will gain practical insight into how theoretical convergence rates can be compromised in real-world code and why rigorous implementation is paramount.", "problem": "Consider the one-dimensional, second-order, linear, self-adjoint boundary value problem on the open interval $\\Omega = (0,1)$ with homogeneous Dirichlet boundary conditions:\nfind $u:\\,[0,1]\\to\\mathbb{R}$ such that\n$-(a(x)\\,u^{\\prime}(x))^{\\prime} = f(x)$ for $x \\in (0,1)$, with $u(0)=0$ and $u(1)=0$.\nAssume a manufactured exact solution $u_{\\text{ex}}(x) = \\sin(\\pi x)$. For a given coefficient function $a(x)$, define the source term $f(x)$ by $f(x) = -\\big(a^{\\prime}(x)\\,u_{\\text{ex}}^{\\prime}(x) + a(x)\\,u_{\\text{ex}}^{\\prime\\prime}(x)\\big)$, where $u_{\\text{ex}}^{\\prime}(x) = \\pi \\cos(\\pi x)$ and $u_{\\text{ex}}^{\\prime\\prime}(x) = -\\pi^{2}\\sin(\\pi x)$. The weak form is: find $u \\in H_{0}^{1}(0,1)$ such that for all $v \\in H_{0}^{1}(0,1)$,\n$\\int_{0}^{1} a(x)\\,u^{\\prime}(x)\\,v^{\\prime}(x)\\,dx = \\int_{0}^{1} f(x)\\,v(x)\\,dx$.\n\nDiscretize using a continuous, piecewise linear finite element space on a uniform partition of $[0,1]$ into $N$ elements of size $h = 1/N$. Assemble and solve the resulting linear system for the nodal values of the discrete solution.\n\nDefine two per-element numerical quadrature rules to approximate the bilinear and linear forms:\n- Accurate quadrature $Q_{\\text{acc}}$: the $3$-point Gauss–Legendre rule on the reference interval $[-1,1]$ with nodes $\\{\\xi_{q}\\} = \\{-\\sqrt{3/5},\\,0,\\,\\sqrt{3/5}\\}$ and weights $\\{w_{q}\\} = \\{5/9,\\,8/9,\\,5/9\\}$.\n- Inaccurate quadrature $Q_{\\text{crime}}$: the $1$-point midpoint rule on $[-1,1]$ with node $\\xi_{1} = 0$ and weight $w_{1} = 2$.\n\nMeasure the discretization error in the $L^{2}$ norm, $\\|u_{h} - u_{\\text{ex}}\\|_{L^{2}(0,1)} = \\left(\\int_{0}^{1} (u_{h}(x) - u_{\\text{ex}}(x))^{2}\\,dx\\right)^{1/2}$, where the integral is to be numerically evaluated with a $5$-point Gauss–Legendre rule on each element.\n\nFor each coefficient function $a(x)$ in the test suite below, and for each quadrature choice $\\{Q_{\\text{acc}}, Q_{\\text{crime}}\\}$, compute the finite element solution for a sequence of mesh sizes $\\{N\\}$, compute the corresponding $L^{2}$ errors, and report the empirical convergence rate as the least-squares slope of $\\log(\\|u_{h}-u_{\\text{ex}}\\|_{L^{2}})$ versus $\\log(h)$.\n\nTest suite:\n- Coefficient cases:\n  1. $a_{1}(x) = 1$.\n  2. $a_{2}(x) = 1 + x$.\n  3. $a_{3}(x) = e^{2x}$.\n- Mesh sizes: $N \\in \\{8,\\,16,\\,32,\\,64\\}$.\n\nFinal output format:\nYour program should produce a single line of output containing the six empirical convergence rates as a comma-separated list enclosed in square brackets, ordered as\n$[r_{1,\\text{acc}}, r_{1,\\text{crime}}, r_{2,\\text{acc}}, r_{2,\\text{crime}}, r_{3,\\text{acc}}, r_{3,\\text{crime}}]$,\nwhere $r_{k,\\cdot}$ denotes the empirical rate for coefficient case $k \\in \\{1,2,3\\}$ under the specified quadrature. Each $r_{k,\\cdot}$ must be reported as a floating-point number.", "solution": "The problem presented is a well-posed, standard exercise in computational engineering, specifically in the application of the finite element method (FEM) to a one-dimensional boundary value problem. It asks for an analysis of the convergence rate of the numerical solution under different numerical quadrature schemes. The problem statement is complete, scientifically sound, and unambiguous. We shall proceed with a formal solution.\n\nThe problem is to find the function $u(x)$ that satisfies the differential equation and boundary conditions:\n$$\n-\\frac{d}{dx}\\left(a(x)\\frac{du}{dx}\\right) = f(x) \\quad \\text{for } x \\in (0,1)\n$$\n$$\nu(0) = 0, \\quad u(1) = 0\n$$\nThis is the **strong form** of the problem. For the finite element method, we work with the **weak form**. To derive it, we multiply the differential equation by a test function $v(x)$ from a suitable space and integrate over the domain $\\Omega = (0,1)$. The space of test functions, like the solution space, must satisfy the homogeneous Dirichlet boundary conditions. We choose the Sobolev space $H_0^1(0,1)$, which contains functions that are zero at the boundaries and have square-integrable first derivatives.\n\n$$\n-\\int_0^1 \\frac{d}{dx}\\left(a(x)\\frac{du}{dx}\\right) v(x) \\,dx = \\int_0^1 f(x) v(x) \\,dx\n$$\nWe apply integration by parts to the left-hand side term:\n$$\n\\int_0^1 a(x)\\frac{du}{dx}\\frac{dv}{dx} \\,dx - \\left[a(x)\\frac{du}{dx}v(x)\\right]_0^1 = \\int_0^1 f(x) v(x) \\,dx\n$$\nThe boundary term $\\left[a(x)\\frac{du}{dx}v(x)\\right]_0^1$ vanishes because $v(0)=0$ and $v(1)=0$. This yields the weak form: find $u \\in H_0^1(0,1)$ such that for all $v \\in H_0^1(0,1)$:\n$$\nB(u,v) \\equiv \\int_0^1 a(x)u'(x)v'(x) \\,dx = \\int_0^1 f(x)v(x) \\,dx \\equiv L(v)\n$$\nHere, $B(u,v)$ is the bilinear form and $L(v)$ is the linear form.\n\nNext, we discretize the problem. The domain $[0,1]$ is partitioned into $N$ subintervals (elements) of uniform length $h=1/N$. The nodes are located at $x_i = ih$ for $i=0, 1, \\dots, N$. We seek an approximate solution $u_h(x)$ within a finite-dimensional subspace $V_h \\subset H_0^1(0,1)$. For this problem, $V_h$ is the space of continuous, piecewise linear functions that are zero at $x=0$ and $x=1$. A basis for this space is the set of \"hat\" functions $\\{\\phi_j(x)\\}_{j=1}^{N-1}$, where $\\phi_j(x)$ is linear on each element, equals $1$ at node $x_j$, and is $0$ at all other nodes. The approximate solution is written as a linear combination of these basis functions:\n$$\nu_h(x) = \\sum_{j=1}^{N-1} U_j \\phi_j(x)\n$$\nwhere $U_j$ are the unknown nodal values of the solution. The discrete problem is to find $u_h \\in V_h$ such that $B(u_h, v_h) = L(v_h)$ for all $v_h \\in V_h$. By choosing $v_h = \\phi_i(x)$ for each $i=1, \\dots, N-1$, we obtain a system of linear algebraic equations:\n$$\n\\sum_{j=1}^{N-1} U_j B(\\phi_j, \\phi_i) = L(\\phi_i) \\quad \\text{for } i=1, \\dots, N-1\n$$\nThis is the linear system $K\\mathbf{U} = \\mathbf{F}$, where $\\mathbf{U}$ is the vector of unknown nodal values, $K$ is the stiffness matrix with entries $K_{ij} = B(\\phi_j, \\phi_i)$, and $\\mathbf{F}$ is the load vector with entries $F_i = L(\\phi_i)$.\n\nThe entries of the stiffness matrix and load vector are computed by assembling contributions from each element. For a generic element $e_k = [x_k, x_{k+1}]$, the element stiffness matrix $K^e$ and load vector $\\mathbf{F}^e$ have entries:\n$$\nK^e_{ij} = \\int_{x_k}^{x_{k+1}} a(x) \\phi_j'(x) \\phi_i'(x) \\,dx \\quad \\text{and} \\quad F^e_i = \\int_{x_k}^{x_{k+1}} f(x) \\phi_i(x) \\,dx\n$$\nwhere $\\phi_i, \\phi_j$ here are the local basis functions on element $e_k$. These integrals are generally computed numerically. We transform the integral to a reference element $\\hat{e} = [-1,1]$ using a linear mapping $x(\\xi) = x_k + \\frac{h}{2}(\\xi+1)$, with Jacobian $J = dx/d\\xi = h/2$.\nThe derivatives of basis functions transform as $\\phi'(x) = \\frac{d\\phi}{d\\xi}\\frac{d\\xi}{dx} = \\frac{d\\phi}{d\\xi} \\frac{1}{J}$. On the reference element, the linear basis functions are $\\hat{\\phi}_1(\\xi) = \\frac{1-\\xi}{2}$ and $\\hat{\\phi}_2(\\xi) = \\frac{1+\\xi}{2}$, with derivatives $\\mp\\frac{1}{2}$. Thus, the derivatives on the physical element are constant, $\\mp\\frac{1}{h}$.\n\nThe integrals are approximated using a numerical quadrature rule with nodes $\\xi_q$ and weights $w_q$ on $[-1,1]$:\n$$\nK^e_{ij} \\approx \\sum_{q} w_q \\left(a(x(\\xi_q)) \\phi_j'(x(\\xi_q)) \\phi_i'(x(\\xi_q))\\right) \\frac{h}{2}\n$$\n$$\nF^e_i \\approx \\sum_{q} w_q \\left(f(x(\\xi_q)) \\phi_i(x(\\xi_q))\\right) \\frac{h}{2}\n$$\nThe problem specifies two quadrature rules: a $3$-point Gauss rule ($Q_{\\text{acc}}$), which is accurate for this problem, and a $1$-point midpoint rule ($Q_{\\text{crime}}$), which may be inaccurate. This deliberate inaccuracy is termed a \"variational crime\". Its effect on the convergence rate is the subject of this study. For piecewise linear elements, the theoretical convergence rate of the error in the $L^2$ norm, $\\|u_h - u_{\\text{ex}}\\|_{L^2}$, is $O(h^2)$, provided the quadrature rules are sufficiently accurate. The use of an inaccurate rule like $Q_{\\text{crime}}$ can potentially degrade this rate.\n\nAfter assembling the global $(N-1) \\times (N-1)$ matrix $K$ and vector $\\mathbf{F}$ and solving $K\\mathbf{U} = \\mathbf{F}$, we obtain the numerical solution $u_h(x)$. The error is measured in the $L^2$ norm:\n$$\n\\|u_h - u_{\\text{ex}}\\|_{L^{2}(0,1)} = \\left(\\int_{0}^{1} (u_h(x) - u_{\\text{ex}}(x))^{2}\\,dx\\right)^{1/2}\n$$\nThis integral is itself computed numerically using a high-order ($5$-point Gauss) quadrature rule to ensure its accuracy does not pollute the measurement of the discretization error.\n\nFinally, we analyze the convergence. Assuming the error $E = \\|u_h - u_{\\text{ex}}\\|_{L^2}$ behaves as $E \\approx C h^p$, where $p$ is the convergence rate, we can write $\\log(E) \\approx \\log(C) + p \\log(h)$. By computing the error for a sequence of mesh sizes $h$, we can determine the empirical rate $p$ by finding the slope of the best-fit line to the points $(\\log(h), \\log(E))$. This is a linear least-squares regression problem. The procedure is repeated for each coefficient function $a(x)$ and each quadrature rule.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D BVP using FEM and calculates empirical convergence rates.\n    \"\"\"\n\n    # Quadrature rules on [-1, 1]\n    Q_ACC = (\n        np.array([-np.sqrt(3./5.), 0., np.sqrt(3./5.)]),  # nodes\n        np.array([5./9., 8./9., 5./9.])                  # weights\n    )\n    Q_CRIME = (\n        np.array([0.]),     # node\n        np.array([2.])      # weight\n    )\n    Q_ERROR = (\n        np.array([-0.906179845938664, -0.538469310105683, 0, 0.538469310105683, 0.906179845938664]),\n        np.array([0.236926885056189, 0.478628670499366, 0.568888888888889, 0.478628670499366, 0.236926885056189])\n    )\n    \n    # Mesh sizes\n    Ns = [8, 16, 32, 64]\n    hs = [1.0 / n for n in Ns]\n\n    # Manufactured solution and its derivatives\n    pi = np.pi\n    u_ex = lambda x: np.sin(pi * x)\n    u_ex_prime = lambda x: pi * np.cos(pi * x)\n    u_ex_prime_prime = lambda x: -pi**2 * np.sin(pi * x)\n\n    # Test cases: coefficient functions a(x) and their derivatives a'(x)\n    test_suite = [\n        (lambda x: 1.0, lambda x: 0.0),                               # a1(x) = 1\n        (lambda x: 1.0 + x, lambda x: 1.0),                           # a2(x) = 1 + x\n        (lambda x: np.exp(2 * x), lambda x: 2 * np.exp(2 * x))         # a3(x) = e^(2x)\n    ]\n    \n    quad_choices = {\"acc\": Q_ACC, \"crime\": Q_CRIME}\n\n    results = []\n\n    def fem_1d_solver(N, a_func, f_func, quad_rule):\n        \"\"\"Assembles and solves the FEM system for a given case.\"\"\"\n        h = 1.0 / N\n        num_unknowns = N - 1\n        K = np.zeros((num_unknowns, num_unknowns))\n        F = np.zeros(num_unknowns)\n\n        quad_nodes, quad_weights = quad_rule\n        \n        # Local basis functions (hat functions) on reference element [-1, 1]\n        phi_ref = [lambda xi: (1.0 - xi) / 2.0, lambda xi: (1.0 + xi) / 2.0]\n        # Derivatives of local basis functions on physical element (constant)\n        dphi_dx = np.array([-1.0 / h, 1.0 / h])\n\n        for k in range(N):  # Loop over elements\n            x_k = k * h\n            \n            # Element stiffness matrix and load vector\n            K_e = np.zeros((2, 2))\n            F_e = np.zeros(2)\n\n            for q_idx, xi_q in enumerate(quad_nodes):\n                w_q = quad_weights[q_idx]\n                x_q = x_k + h / 2.0 * (xi_q + 1.0)\n                \n                #\n                # Element stiffness matrix contribution\n                # K_ij = integral( a(x) * phi_j' * phi_i' dx)\n                #\n                a_val = a_func(x_q)\n                for i in range(2):\n                    for j in range(2):\n                        K_e[i, j] += w_q * a_val * dphi_dx[j] * dphi_dx[i] * (h / 2.0)\n                \n                #\n                # Element load vector contribution\n                # F_i = integral( f(x) * phi_i dx )\n                #\n                f_val = f_func(x_q)\n                for i in range(2):\n                    F_e[i] += w_q * f_val * phi_ref[i](xi_q) * (h / 2.0)\n\n            # Assemble into global system\n            for i in range(2):\n                global_i = k + i\n                if 0 < global_i < N: # Is it an interior node?\n                    F[global_i - 1] += F_e[i]\n                    for j in range(2):\n                        global_j = k + j\n                        if 0 < global_j < N:\n                            K[global_i - 1, global_j - 1] += K_e[i, j]\n        \n        # Solve for nodal values\n        U_interior = np.linalg.solve(K, F)\n        \n        # Construct full solution vector (including boundaries)\n        U_h = np.zeros(N + 1)\n        U_h[1:-1] = U_interior\n        \n        return U_h\n\n    def calculate_l2_error(N, U_h, u_ex_func):\n        \"\"\"Calculates the L2 norm of the error.\"\"\"\n        h = 1.0 / N\n        total_error_sq = 0.0\n        \n        nodes, weights = Q_ERROR\n        # Local basis functions (hat functions) on reference element [-1, 1]\n        phi_ref = [lambda xi: (1.0 - xi) / 2.0, lambda xi: (1.0 + xi) / 2.0]\n\n        for k in range(N): # Loop over elements\n            x_k = k * h\n            \n            U_local = U_h[k:k+2] # Nodal values for this element\n            \n            element_error_sq = 0.0\n            for q_idx, xi_q in enumerate(nodes):\n                w_q = weights[q_idx]\n                x_q = x_k + h / 2.0 * (xi_q + 1.0)\n                \n                # Interpolate numerical solution at quadrature point\n                u_h_val = U_local[0] * phi_ref[0](xi_q) + U_local[1] * phi_ref[1](xi_q)\n                \n                # Evaluate exact solution\n                u_ex_val = u_ex_func(x_q)\n                \n                # Add to integral\n                element_error_sq += w_q * (u_h_val - u_ex_val)**2 * (h / 2.0)\n            \n            total_error_sq += element_error_sq\n            \n        return np.sqrt(total_error_sq)\n\n    for a_func, a_prime_func in test_suite:\n        # Define source term f(x) for the current a(x)\n        f_func = lambda x: -(a_prime_func(x) * u_ex_prime(x) + a_func(x) * u_ex_prime_prime(x))\n        \n        for name, quad in quad_choices.items():\n            errors = []\n            for N in Ns:\n                # 1. Solve the system\n                U_h = fem_1d_solver(N, a_func, f_func, quad)\n                \n                # 2. Calculate error\n                error = calculate_l2_error(N, U_h, u_ex)\n                errors.append(error)\n\n            # 3. Compute convergence rate\n            log_h = np.log(hs)\n            log_err = np.log(errors)\n            # F(x) = m*x + c. We want m.\n            rate = np.polyfit(log_h, log_err, 1)[0]\n            results.append(rate)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2440375"}]}