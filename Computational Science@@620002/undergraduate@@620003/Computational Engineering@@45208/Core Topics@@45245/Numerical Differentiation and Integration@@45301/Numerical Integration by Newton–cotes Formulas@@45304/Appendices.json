{"hands_on_practices": [{"introduction": "A key property of a numerical integration rule is its \"degree of precision\"â€”the highest degree of polynomial that it can integrate exactly. This exercise explores this concept with Boole's rule, a closed Newton-Cotes formula for $n=4$. Because the degree of precision for an even-$n$ rule is $n+1$, Boole's rule is exact for polynomials up to degree five, a fact this practice demonstrates concretely [@problem_id:2419300].", "problem": "A scalar response function in a computational model is represented exactly on an element by the quartic polynomial $f(x) = 2x^{4} - x^{3} + 3x^{2} - 5x + 1$ over the interval $[0,4]$. Using a single application of the closed Newton-Cotes formula with $n=4$ (Boole's rule) over the entire interval $[0,4]$, compute the value of the integral $I = \\displaystyle \\int_{0}^{4} f(x)\\,dx$. Report the exact value; no rounding is required.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- The function to be integrated is $f(x) = 2x^{4} - x^{3} + 3x^{2} - 5x + 1$.\n- The interval of integration is $[0, 4]$.\n- The numerical integration method is a single application of the closed Newton-Cotes formula with $n=4$ (Boole's rule).\n- The task is to compute the exact value of the integral $I = \\displaystyle \\int_{0}^{4} f(x)\\,dx$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded. It requires the application of a standard, well-defined numerical integration formula, Boole's rule, to a polynomial function. The function is a polynomial of degree $4$. A key property of the closed $n$-point Newton-Cotes formula is its degree of precision. For an even value of $n$, the formula is exact for all polynomials of degree up to and including $n+1$. In this case, $n=4$ (even), so the degree of precision is $4+1 = 5$. Since the given function is a polynomial of degree $4$, which is less than or equal to $5$, Boole's rule will yield the exact value of the integral, not an approximation. The problem is well-posed, providing all necessary information, and is free of contradictions or ambiguities.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A complete solution will be provided.\n\nThe closed Newton-Cotes formula for $n=4$, known as Boole's rule, for an integral over the interval $[a, b]$ is given by:\n$$ \\int_a^b f(x) \\, dx \\approx \\frac{b-a}{90} [7f(x_0) + 32f(x_1) + 12f(x_2) + 32f(x_3) + 7f(x_4)] $$\nThis can also be written using the step size $h = \\frac{b-a}{n}$. With $n=4$, this becomes:\n$$ \\int_a^b f(x) \\, dx \\approx \\frac{4h}{90} [7f(x_0) + 32f(x_1) + 12f(x_2) + 32f(x_3) + 7f(x_4)] = \\frac{2h}{45} [7f(x_0) + 32f(x_1) + 12f(x_2) + 32f(x_3) + 7f(x_4)] $$\nwhere the evaluation points are $x_i = a + ih$ for $i=0, 1, 2, 3, 4$.\n\nFor this specific problem, we have:\n- Interval $[a, b] = [0, 4]$.\n- Number of subintervals $n=4$.\n- The step size is $h = \\frac{b-a}{n} = \\frac{4-0}{4} = 1$.\n\nThe five equally spaced points are:\n- $x_0 = a + 0h = 0 + 0(1) = 0$\n- $x_1 = a + 1h = 0 + 1(1) = 1$\n- $x_2 = a + 2h = 0 + 2(1) = 2$\n- $x_3 = a + 3h = 0 + 3(1) = 3$\n- $x_4 = a + 4h = 0 + 4(1) = 4$\n\nNext, we evaluate the function $f(x) = 2x^{4} - x^{3} + 3x^{2} - 5x + 1$ at these points:\n- $f(x_0) = f(0) = 2(0)^{4} - (0)^{3} + 3(0)^{2} - 5(0) + 1 = 1$\n- $f(x_1) = f(1) = 2(1)^{4} - (1)^{3} + 3(1)^{2} - 5(1) + 1 = 2 - 1 + 3 - 5 + 1 = 0$\n- $f(x_2) = f(2) = 2(2)^{4} - (2)^{3} + 3(2)^{2} - 5(2) + 1 = 2(16) - 8 + 3(4) - 10 + 1 = 32 - 8 + 12 - 10 + 1 = 27$\n- $f(x_3) = f(3) = 2(3)^{4} - (3)^{3} + 3(3)^{2} - 5(3) + 1 = 2(81) - 27 + 3(9) - 15 + 1 = 162 - 27 + 27 - 15 + 1 = 148$\n- $f(x_4) = f(4) = 2(4)^{4} - (4)^{3} + 3(4)^{2} - 5(4) + 1 = 2(256) - 64 + 3(16) - 20 + 1 = 512 - 64 + 48 - 20 + 1 = 477$\n\nNow, substitute these values into Boole's rule:\n$$ I = \\frac{2(1)}{45} [7f(0) + 32f(1) + 12f(2) + 32f(3) + 7f(4)] $$\n$$ I = \\frac{2}{45} [7(1) + 32(0) + 12(27) + 32(148) + 7(477)] $$\n$$ I = \\frac{2}{45} [7 + 0 + 324 + 4736 + 3339] $$\nThe sum inside the brackets is:\n$$ 7 + 324 + 4736 + 3339 = 331 + 4736 + 3339 = 5067 + 3339 = 8406 $$\nSubstituting this sum back into the expression for $I$:\n$$ I = \\frac{2}{45} (8406) = \\frac{16812}{45} $$\nTo simplify the fraction, we note that the sum of the digits of the numerator is $1+6+8+1+2=18$, which is divisible by $9$. The denominator $45$ is also divisible by $9$.\n$$ I = \\frac{16812 \\div 9}{45 \\div 9} = \\frac{1868}{5} $$\nAs established, this result is exact. For completeness, we verify this through direct analytical integration:\n$$ \\int_{0}^{4} (2x^{4} - x^{3} + 3x^{2} - 5x + 1) \\,dx = \\left[ \\frac{2x^{5}}{5} - \\frac{x^{4}}{4} + \\frac{3x^{3}}{3} - \\frac{5x^{2}}{2} + x \\right]_{0}^{4} $$\n$$ = \\left[ \\frac{2}{5}x^{5} - \\frac{1}{4}x^{4} + x^{3} - \\frac{5}{2}x^{2} + x \\right]_{0}^{4} $$\n$$ = \\left( \\frac{2}{5}(4)^{5} - \\frac{1}{4}(4)^{4} + (4)^{3} - \\frac{5}{2}(4)^{2} + 4 \\right) - (0) $$\n$$ = \\frac{2}{5}(1024) - \\frac{1}{4}(256) + 64 - \\frac{5}{2}(16) + 4 $$\n$$ = \\frac{2048}{5} - 64 + 64 - 40 + 4 $$\n$$ = \\frac{2048}{5} - 36 $$\n$$ = \\frac{2048}{5} - \\frac{180}{5} = \\frac{1868}{5} $$\nThe analytical result confirms the value obtained from Boole's rule. The required value is $\\frac{1868}{5}$.", "answer": "$$\\boxed{\\frac{1868}{5}}$$", "id": "2419300"}, {"introduction": "While some integrals can be solved exactly, most real-world applications rely on approximation. The central challenge then becomes understanding and quantifying the error. This practice involves using the widely-known Simpson's rule to approximate $\\pi$ and then computationally verifying its theoretical rate of convergence. By observing how the error scales as you refine the integration grid, you will gain practical, hands-on experience with the performance and predictability of a core numerical method [@problem_id:2419339].", "problem": "You are to study numerical integration using closed Newton-Cotes formulas through a fully specified computational task. Let $I$ denote the definite integral\n$$\nI \\;=\\; \\int_{0}^{1} \\frac{4}{1+x^{2}}\\,dx,\n$$\nwhich equals $\\pi$ by the antiderivative of $\\frac{4}{1+x^{2}}$. Using the closed Newton-Cotes formula of degree $2$ (composite Simpson's rule) with $N$ equal-width subintervals (where $N$ is even), compute the approximation $S_{N}$ to $I$, and quantify the accuracy. For each prescribed $N$, compute the absolute error $E_{N} = \\lvert S_{N} - \\pi \\rvert$. For each successive pair $\\left(N_{k},N_{k+1}\\right)$ in the test suite, compute the observed convergence order\n$$\np_{k} \\;=\\; \\log_{2}\\!\\left(\\frac{E_{N_{k}}}{E_{N_{k+1}}}\\right),\n$$\nwhich measures how the error scales under refinement from $N_{k}$ to $N_{k+1}$.\n\nTest Suite:\n- Use the following values of the number of subintervals $N$: $\\{2,4,8,16,32,64\\}$. This set covers the smallest admissible even case $N=2$, several successive refinements by a factor of $2$, and a moderately fine resolution.\n\nRequired final output format:\n- Your program should produce a single line of output containing a nested, comma-separated list with no spaces of the form\n$[ [S_{N_{1}},S_{N_{2}},\\dots], [E_{N_{1}},E_{N_{2}},\\dots], [p_{1},p_{2},\\dots] ]$,\nthat is, a list of three lists: the approximations $S_{N}$ in the order of the test suite, the corresponding absolute errors $E_{N}$ in the same order, and the observed orders $p_{k}$ for each consecutive pair $(N_{k},N_{k+1})$ in the test suite. The third list therefore has one fewer entry than the first two. For example, the syntactic shape (not the numeric values) is\n\"[[S_{1},S_{2},\\dots],[E_{1},E_{2},\\dots],[p_{1},p_{2},\\dots]]\"\nwith no spaces anywhere in the line.\n\nAll answers are pure numbers (dimensionless real numbers). Angles are not used, and no physical units are involved. The program must be self-contained and require no input.", "solution": "The problem statement is subjected to validation and is found to be well-posed, scientifically grounded, and unambiguous. It constitutes a standard exercise in numerical analysis. We shall proceed with the solution.\n\nThe task is to approximate the definite integral\n$$\nI = \\int_{0}^{1} f(x) \\,dx \\quad \\text{where} \\quad f(x) = \\frac{4}{1+x^2}\n$$\nusing the composite Simpson's rule for a sequence of partitions and to analyze the convergence of the approximation. The exact value of the integral is known to be $I = \\pi$.\n\nThe composite Simpson's rule, which is the closed Newton-Cotes formula of degree $2$, approximates the integral over an interval $[a, b]$ by dividing it into an even number $N$ of subintervals of equal width $h = (b-a)/N$. The formula is given by:\n$$\nS_N = \\frac{h}{3} \\left[ f(x_0) + 4\\sum_{i=1, i \\text{ odd}}^{N-1} f(x_i) + 2\\sum_{i=2, i \\text{ even}}^{N-2} f(x_i) + f(x_N) \\right]\n$$\nwhere $x_i = a + ih$ for $i = 0, 1, \\dots, N$. For this problem, the interval is $[0, 1]$, so $a=0$, $b=1$, and the step size is $h=1/N$. The evaluation points, or nodes, are $x_i = i/N$.\n\nThe accuracy of this approximation for a given $N$ is measured by the absolute error, defined as:\n$$\nE_N = \\lvert S_N - \\pi \\rvert\n$$\n\nTo quantify the rate of convergence as $N$ increases, we compute the observed order of convergence, $p_k$, for each successive pair of subinterval counts $(N_k, N_{k+1})$ from the test suite $\\{2, 4, 8, 16, 32, 64\\}$. The formula for this measure is:\n$$\np_{k} = \\log_{2}\\!\\left(\\frac{E_{N_{k}}}{E_{N_{k+1}}}\\right)\n$$\nThis calculation is relevant for the specific refinement strategy where each step doubles the number of intervals, i.e., $N_{k+1} = 2N_k$.\n\nThe error of the composite Simpson's rule for a sufficiently smooth function is given by the leading term of the Euler-Maclaurin formula, which is:\n$$\nI - S_N = -\\frac{(b-a)h^4}{180} f^{(4)}(\\xi)\n$$\nfor some $\\xi \\in (a,b)$. This implies an error dependence of $E_N \\propto h^4$ or, equivalently, $E_N \\propto N^{-4}$. When we double the number of subintervals, such that $N_{k+1} = 2N_k$, the step size is halved, $h_{k+1} = h_k/2$. The ratio of successive errors is therefore expected to approach a constant value as $N \\to \\infty$:\n$$\n\\frac{E_{N_k}}{E_{N_{k+1}}} \\approx \\frac{C \\cdot h_k^4}{C \\cdot (h_k/2)^4} = 2^4 = 16\n$$\nConsequently, the theoretical order of convergence is $p = \\log_2(16) = 4$. The computed values $p_k$ are expected to approach $4$ as $N$ becomes large and the asymptotic error behavior dominates. Deviations from this value for small $N$ are anticipated due to the influence of higher-order error terms and the non-constant nature of the fourth derivative $f^{(4)}(x)$ over the interval $[0, 1]$.\n\nThe computational procedure is as follows:\n1. Define the integrand $f(x) = \\frac{4}{1+x^2}$.\n2. For each number of subintervals $N$ in the set $\\{2, 4, 8, 16, 32, 64\\}$:\n   a. Compute the step size $h = 1/N$.\n   b. Generate the nodes $x_i = i \\cdot h$ for $i = 0, \\dots, N$.\n   c. Evaluate $f(x_i)$ at all nodes.\n   d. Compute the sum $S_N$ using the composite Simpson's rule formula.\n   e. Calculate the absolute error $E_N = |S_N - \\pi|$, using a high-precision value for $\\pi$ provided by the numerical library.\n3. Store the sequences of computed values $\\{S_N\\}$ and $\\{E_N\\}$.\n4. Using the sequence $\\{E_N\\}$, compute the sequence of observed orders $\\{p_k\\}$ for $k=1, \\dots, 5$.\n5. The final result will be presented as a nested list containing these three sequences of numbers, as specified in the problem statement. This concludes the formal design of the solution.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes an approximation of pi using the composite Simpson's rule\n    and analyzes its convergence properties.\n    \"\"\"\n    # Define the set of subinterval counts for the test suite.\n    subinterval_counts = [2, 4, 8, 16, 32, 64]\n\n    # The exact value of the integral is pi. Use numpy's high-precision value.\n    pi_exact = np.pi\n\n    # Define the integrand function f(x) = 4 / (1 + x^2).\n    def f(x):\n        return 4.0 / (1.0 + x**2)\n\n    # Lists to store the results: approximations, errors, and convergence orders.\n    approximations = []\n    errors = []\n    \n    # Iterate through each specified number of subintervals N.\n    for N in subinterval_counts:\n        # The integration interval is [0, 1].\n        a, b = 0.0, 1.0\n        \n        # Calculate the step size h.\n        h = (b - a) / N\n        \n        # Generate N+1 equally spaced nodes from a to b.\n        x_nodes = np.linspace(a, b, N + 1)\n        \n        # Evaluate the function at the nodes.\n        y_values = f(x_nodes)\n        \n        # Apply the composite Simpson's rule formula:\n        # S_N = (h/3) * [f(x_0) + 4*f(x_1) + 2*f(x_2) + ... + f(x_N)]\n        # The sum is structured as: y[0] + y[-1] + 4*sum(odd_indices) + 2*sum(even_indices)\n        s_approx = (h / 3.0) * (\n            y_values[0] \n            + y_values[-1] \n            + 4.0 * np.sum(y_values[1:-1:2]) \n            + 2.0 * np.sum(y_values[2:-1:2])\n        )\n        \n        # Store the computed approximation.\n        approximations.append(s_approx)\n        \n        # Calculate the absolute error and store it.\n        error = np.abs(s_approx - pi_exact)\n        errors.append(error)\n\n    # Compute the observed convergence orders for successive pairs of errors.\n    # The list of orders will have one fewer element than the lists of errors/approximations.\n    orders = []\n    for k in range(len(errors) - 1):\n        # p_k = log2(E_{N_k} / E_{N_{k+1}})\n        order = np.log2(errors[k] / errors[k+1])\n        orders.append(order)\n\n    # Format the results into the required single-line string format.\n    # e.g., \"[[S1,S2,...],[E1,E2,...],[p1,p2,...]]\" with no spaces.\n    s_str = \",\".join(map(str, approximations))\n    e_str = \",\".join(map(str, errors))\n    p_str = \",\".join(map(str, orders))\n    \n    final_output = f\"[[{s_str}],[{e_str}],[{p_str}]]\"\n    \n    print(final_output)\n\nsolve()\n```", "id": "2419339"}, {"introduction": "Beyond just applying existing formulas, a deep understanding of numerical methods allows us to construct more powerful tools from simpler ones. This exercise introduces the powerful technique of Richardson extrapolation, which uses the known error structure of a low-order method to create a higher-order one. You will derive Simpson's rule by combining results from the Trapezoidal rule, providing a clear demonstration of how to cancel leading error terms and accelerate convergence [@problem_id:2419361].", "problem": "You are given a sequence of composite trapezoidal approximations of definite integrals evaluated on two uniform meshes with step sizes $h$ and $h/2$ over a closed interval $[a,b]$. Denote these approximations by $T(h)$ and $T(h/2)$, respectively. Construct, from first principles and without invoking any named method, a linear combination of $T(h)$ and $T(h/2)$ that produces a new approximation $\\widehat{I}(h)$ whose truncation error order is strictly greater than that of the composite trapezoidal rule when the integrand is sufficiently smooth. Apply this construction to the following test suite and report the absolute errors with respect to the exact integrals. Use angles in radians for all trigonometric functions.\n\nLet $f:[a,b]\\to\\mathbb{R}$ be integrable and let $n\\in\\mathbb{N}$ be the number of subintervals used to define $h=(b-a)/n$ for the coarse uniform mesh, so that the fine mesh uses $2n$ subintervals. For each test case below, compute $T(h)$ with $n$ subintervals, $T(h/2)$ with $2n$ subintervals, construct the higher-order approximation $\\widehat{I}(h)$ from these two values as described above, and then compute the absolute error $|\\widehat{I}(h)-I_{\\text{exact}}|$. No rounding is required; report the raw floating-point values.\n\nTest suite:\n- Case $\\mathsf{A}$ (general smooth exponential): $f_{\\mathsf{A}}(x)=e^{x}$ on $[a,b]=[0,1]$, with $n=10$. Exact integral $I_{\\text{exact}}=e-1$.\n- Case $\\mathsf{B}$ (cubic polynomial, degree at most $3$): $f_{\\mathsf{B}}(x)=3x^{3}-2x^{2}+x-5$ on $[a,b]=[-2,2]$, with $n=8$. Exact integral $I_{\\text{exact}}=-\\dfrac{92}{3}$.\n- Case $\\mathsf{C}$ (zero-length interval boundary condition): $f_{\\mathsf{C}}(x)=\\cos(x)$ on $[a,b]=[\\pi,\\pi]$, with $n=4$. Exact integral $I_{\\text{exact}}=0$.\n- Case $\\mathsf{D}$ (oscillatory trigonometric, angle in radians): $f_{\\mathsf{D}}(x)=\\sin(5x)$ on $[a,b]=[0,\\pi]$, with $n=16$. Exact integral $I_{\\text{exact}}=\\dfrac{2}{5}$.\n- Case $\\mathsf{E}$ (nonsmooth absolute value): $f_{\\mathsf{E}}(x)=|x|$ on $[a,b]=[-1,1]$, with $n=64$. Exact integral $I_{\\text{exact}}=1$.\n\nFinal output format:\nYour program should produce a single line of output containing the absolute errors for Cases $\\mathsf{A}$ through $\\mathsf{E}$, in that order, as a comma-separated list enclosed in square brackets (for example, $\\,[\\text{result}_{\\mathsf{A}},\\text{result}_{\\mathsf{B}},\\text{result}_{\\mathsf{C}},\\text{result}_{\\mathsf{D}},\\text{result}_{\\mathsf{E}}]$\\,). Each entry must be a floating-point number.", "solution": "Let $I=\\int_{a}^{b} f(x)\\,dx$ denote the exact integral of a sufficiently smooth function $f$. The composite trapezoidal approximation on a uniform mesh with step size $h=(b-a)/n$ is\n$$\nT(h)=h\\left(\\frac{f(a)}{2}+\\sum_{k=1}^{n-1} f(a+kh)+\\frac{f(b)}{2}\\right).\n$$\nUnder adequate smoothness, the global error of the composite trapezoidal rule admits an asymptotic expansion in even powers of $h$,\n$$\nT(h)=I + C_{2}h^{2}+C_{4}h^{4}+C_{6}h^{6}+\\cdots,\n$$\nwhere the constants $C_{2m}$ depend on $f$ and its derivatives at the endpoints (this follows from the Eulerâ€“Maclaurin summation formula). Evaluating the same approximation on the refined mesh with step size $h/2$ yields\n$$\nT\\!\\left(\\frac{h}{2}\\right)=I + C_{2}\\left(\\frac{h}{2}\\right)^{2}+C_{4}\\left(\\frac{h}{2}\\right)^{4}+C_{6}\\left(\\frac{h}{2}\\right)^{6}+\\cdots \\,=\\, I + \\frac{C_{2}}{4}h^{2}+\\frac{C_{4}}{16}h^{4}+\\frac{C_{6}}{64}h^{6}+\\cdots.\n$$\n\nWe seek a linear combination\n$$\n\\widehat{I}(h)=\\alpha\\,T\\!\\left(\\frac{h}{2}\\right)+\\beta\\,T(h),\n$$\nwith coefficients $\\alpha$ and $\\beta$ chosen to eliminate the leading error term proportional to $h^{2}$ while preserving exactness on the constant term. Imposing the conditions\n$$\n\\alpha+\\beta=1 \\quad\\text{and}\\quad \\frac{\\alpha}{4}+\\beta=0,\n$$\nwe solve for $\\alpha$ and $\\beta$. Subtracting the second equation from the first (after multiplying the second by $4$) gives\n$$\n\\alpha+\\beta=1, \\quad \\alpha+4\\beta=0 \\;\\Rightarrow\\; (\\alpha+4\\beta)-(\\alpha+\\beta)=0-1 \\;\\Rightarrow\\; 3\\beta=-1 \\;\\Rightarrow\\; \\beta=-\\frac{1}{3},\n$$\nand therefore\n$$\n\\alpha=1-\\beta=1+\\frac{1}{3}=\\frac{4}{3}.\n$$\nHence,\n$$\n\\widehat{I}(h)=\\frac{4\\,T\\!\\left(\\frac{h}{2}\\right)-T(h)}{3}=I - \\frac{1}{4}C_4h^4 + \\mathcal{O}(h^6),\n$$\nwhich is a fourth-order accurate approximation. This construction coincides with the classical Simpson composite formula evaluated on the refined grid, but it has been derived directly from the asymptotic error expansion and linear combination constraints, without naming any specific algorithm.\n\nAlgorithmic realization for each test case:\n- Given $f$, $a$, $b$, and $n$, compute $h=(b-a)/n$ and the composite trapezoidal approximation $T(h)$.\n- Compute $T(h/2)$ by evaluating the composite trapezoidal rule with $2n$ subintervals.\n- Form the higher-order estimate $\\widehat{I}(h)=\\left(4\\,T(h/2)-T(h)\\right)/3$.\n- Use the provided exact integral $I_{\\text{exact}}$ to compute the absolute error $|\\widehat{I}(h)-I_{\\text{exact}}|$.\n\nVerification on the test suite:\n- Case $\\mathsf{A}$: $f_{\\mathsf{A}}(x)=e^{x}$ on $[0,1]$, $I_{\\text{exact}}=e-1$. The error should scale proportionally to $h^{4}$ for sufficiently smooth $f$.\n- Case $\\mathsf{B}$: $f_{\\mathsf{B}}(x)=3x^{3}-2x^{2}+x-5$ on $[-2,2]$. Since the constructed estimate is exact for polynomials of degree at most $3$, we expect $|\\widehat{I}(h)-I_{\\text{exact}}|=0$ up to floating-point rounding.\n- Case $\\mathsf{C}$: $[a,b]=[\\pi,\\pi]$ implies $h=0$, so $T(h)=T(h/2)=0$ and $\\widehat{I}(h)=0$, matching $I_{\\text{exact}}=0$.\n- Case $\\mathsf{D}$: $f_{\\mathsf{D}}(x)=\\sin(5x)$ on $[0,\\pi]$, $I_{\\text{exact}}=2/5$. The function is smooth and oscillatory; the higher-order estimate reduces the error significantly compared to the composite trapezoidal rule for the same coarse mesh.\n- Case $\\mathsf{E}$: $f_{\\mathsf{E}}(x)=|x|$ on $[-1,1]$, $I_{\\text{exact}}=1$. The function is not differentiable at $x=0$, so the formal error order may not be observed; nonetheless, the construction remains valid and produces a finite approximation with a well-defined absolute error.\n\nThe program computes these absolute errors in the specified order and prints them as a single bracketed, comma-separated list.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef composite_trapezoid(f, a, b, n):\n    \"\"\"Composite trapezoidal rule on [a,b] with n subintervals.\"\"\"\n    if n = 0 or a == b:\n        # Handle zero-length interval or non-positive n robustly\n        return 0.0\n    x = np.linspace(a, b, n + 1)\n    fx = f(x)\n    h = (b - a) / n\n    # Trapezoidal sum: h * (0.5*f(a) + sum_{i=1}^{n-1} f(x_i) + 0.5*f(b))\n    return h * (0.5 * fx[0] + fx[1:-1].sum() + 0.5 * fx[-1])\n\ndef higher_order_from_trap(f, a, b, n):\n    \"\"\"Construct higher-order estimate from T(h) and T(h/2).\"\"\"\n    T_h = composite_trapezoid(f, a, b, n)\n    T_h2 = composite_trapezoid(f, a, b, 2 * n if n > 0 else 0)\n    # Linear combination that cancels the leading h^2 error term\n    return (4.0 * T_h2 - T_h) / 3.0\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Angles are in radians.\n    test_cases = [\n        # Case A: f(x) = exp(x) on [0,1], n=10, exact = e - 1\n        {\n            \"f\": lambda x: np.exp(x),\n            \"a\": 0.0,\n            \"b\": 1.0,\n            \"n\": 10,\n            \"I_exact\": np.e - 1.0,\n        },\n        # Case B: f(x) = 3x^3 - 2x^2 + x - 5 on [-2,2], n=8, exact = -92/3\n        {\n            \"f\": lambda x: 3.0 * x**3 - 2.0 * x**2 + x - 5.0,\n            \"a\": -2.0,\n            \"b\": 2.0,\n            \"n\": 8,\n            \"I_exact\": -92.0 / 3.0,\n        },\n        # Case C: f(x) = cos(x) on [pi, pi], n=4, exact = 0\n        {\n            \"f\": lambda x: np.cos(x),\n            \"a\": float(np.pi),\n            \"b\": float(np.pi),\n            \"n\": 4,\n            \"I_exact\": 0.0,\n        },\n        # Case D: f(x) = sin(5x) on [0, pi], n=16, exact = 2/5\n        {\n            \"f\": lambda x: np.sin(5.0 * x),\n            \"a\": 0.0,\n            \"b\": float(np.pi),\n            \"n\": 16,\n            \"I_exact\": 2.0 / 5.0,\n        },\n        # Case E: f(x) = |x| on [-1,1], n=64, exact = 1\n        {\n            \"f\": lambda x: np.abs(x),\n            \"a\": -1.0,\n            \"b\": 1.0,\n            \"n\": 64,\n            \"I_exact\": 1.0,\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        f = case[\"f\"]\n        a = case[\"a\"]\n        b = case[\"b\"]\n        n = case[\"n\"]\n        exact = case[\"I_exact\"]\n        I_hat = higher_order_from_trap(f, a, b, n)\n        abs_err = abs(I_hat - exact)\n        results.append(abs_err)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2419361"}]}