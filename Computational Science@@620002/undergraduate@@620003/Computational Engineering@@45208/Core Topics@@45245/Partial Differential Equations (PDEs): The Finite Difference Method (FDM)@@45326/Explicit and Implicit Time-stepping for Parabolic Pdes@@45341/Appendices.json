{"hands_on_practices": [{"introduction": "Theory comes to life through application. This first practice grounds your understanding by guiding you through the implementation of a numerical solver for the classic one-dimensional heat equation. By coding the explicit Forward-Time, Centered-Space (FTCS) scheme, you will translate the discretized partial differential equation into a working simulation. This exercise focuses on the fundamental mechanics of time-stepping and reinforces your understanding by comparing your numerical results against a precise analytical solution, a crucial skill in code verification [@problem_id:2483476].", "problem": "You are to implement a numerical simulator for one-dimensional transient heat conduction using the explicit Forward Time Centered Space (FTCS) scheme. Begin from the conservation of energy and Fourier’s law of heat conduction, leading to the one-dimensional heat equation for a homogeneous rod with constant thermal diffusivity $\\alpha$, and homogeneous Dirichlet boundary conditions. The rod occupies $x \\in [0,L]$. The boundary temperatures are fixed at $T(0,t)=0$ and $T(L,t)=0$ for all $t \\ge 0$. The initial condition is a single-mode sinusoid $T(x,0) = T_{\\mathrm{amp}} \\sin\\!\\left(\\frac{\\pi x}{L}\\right)$.\n\nYour task is to:\n- Discretize the spatial domain with a uniform grid of $N$ nodes including both boundaries, with spacing $\\Delta x = L/(N-1)$, and discretize time using a constant time step $\\Delta t$. Use the FTCS explicit scheme to update interior nodes while enforcing the boundary conditions at every time step.\n- For each provided test case, choose $\\Delta t$ to satisfy a specified nondimensional ratio $r = \\alpha \\,\\Delta t/\\Delta x^2$. The values of $r$ and all other parameters are given in the test suite below. Assume that $\\Delta t$ is chosen so that $t_{\\mathrm{end}}/\\Delta t$ is an integer. Evolve the solution from $t=0$ to $t=t_{\\mathrm{end}}$.\n- At the specified node index $i_{\\star}$ (with zero-based indexing), compute the numerical temperature $T_{\\mathrm{num}}$ and the analytical temperature $T_{\\mathrm{ana}}$ for the same location and time, and return the absolute error $|T_{\\mathrm{num}} - T_{\\mathrm{ana}}|$ for each test case.\n\nFundamental base to use:\n- Conservation of energy for a differential control volume combined with Fourier’s law leads to the one-dimensional transient heat equation $\\frac{\\partial T}{\\partial t} = \\alpha \\frac{\\partial^2 T}{\\partial x^2}$ for a homogeneous medium with constant $\\alpha$.\n- The analytical solution for the given initial and boundary conditions is given by separation of variables as a single decaying mode $T(x,t) = T_{\\mathrm{amp}} \\sin\\!\\left(\\frac{\\pi x}{L}\\right) \\exp\\!\\left(-\\alpha \\left(\\frac{\\pi}{L}\\right)^2 t\\right)$.\n- The FTCS scheme is the explicit time-stepping method that uses a forward difference in time and a centered second-order difference in space.\n\nAssumptions and requirements:\n- Use zero-based indexing for nodes $i=0,1,\\dots,N-1$, with $x_i = i\\,\\Delta x$.\n- Initialize the numerical solution as $T_i^0 = T_{\\mathrm{amp}} \\sin\\!\\left(\\frac{\\pi x_i}{L}\\right)$ for all nodes, and enforce $T_0^n=0$ and $T_{N-1}^n=0$ for all time steps $n$.\n- For each test case, compute $\\Delta x$, then compute $\\Delta t$ from the given $r$ by $\\Delta t = r\\,\\Delta x^2/\\alpha$, and take exactly $n_{\\mathrm{steps}} = t_{\\mathrm{end}}/\\Delta t$ time steps.\n- Compute the absolute error at the specified node $i_{\\star}$ as a real number.\n\nPhysical units:\n- Express all temperatures in kelvin. The final reported errors must be expressed in kelvin. Times are in seconds, lengths in meters, and thermal diffusivity in $\\mathrm{m^2/s}$.\n\nTest suite:\n- Case $1$: $L=1\\,\\mathrm{m}$, $\\alpha=1.0\\times 10^{-4}\\,\\mathrm{m^2/s}$, $T_{\\mathrm{amp}}=10\\,\\mathrm{K}$, $N=51$, $r=0.4$, $t_{\\mathrm{end}}=160\\,\\mathrm{s}$, $i_{\\star}=25$.\n- Case $2$: $L=1\\,\\mathrm{m}$, $\\alpha=1.0\\times 10^{-4}\\,\\mathrm{m^2/s}$, $T_{\\mathrm{amp}}=10\\,\\mathrm{K}$, $N=41$, $r=0.5$, $t_{\\mathrm{end}}=31.25\\,\\mathrm{s}$, $i_{\\star}=20$.\n- Case $3$: $L=1\\,\\mathrm{m}$, $\\alpha=1.0\\times 10^{-4}\\,\\mathrm{m^2/s}$, $T_{\\mathrm{amp}}=5\\,\\mathrm{K}$, $N=11$, $r=0.2$, $t_{\\mathrm{end}}=200\\,\\mathrm{s}$, $i_{\\star}=5$.\n- Case $4$: $L=1\\,\\mathrm{m}$, $\\alpha=1.0\\times 10^{-4}\\,\\mathrm{m^2/s}$, $T_{\\mathrm{amp}}=10\\,\\mathrm{K}$, $N=101$, $r=0.1$, $t_{\\mathrm{end}}=10\\,\\mathrm{s}$, $i_{\\star}=0$.\n\nNumerical output specification:\n- For each case, compute the scalar absolute error $|T_{\\mathrm{num}} - T_{\\mathrm{ana}}|$ at $t=t_{\\mathrm{end}}$ and node $i_{\\star}$, in kelvin.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of Cases $1$ through $4$ (for example, $\\left[\\text{result}_1,\\text{result}_2,\\text{result}_3,\\text{result}_4\\right]$). Each entry must be a floating-point number representing kelvin.", "solution": "The problem statement is subjected to validation before a solution is attempted.\n\n### Problem Validation\n\n#### Step 1: Extract Givens\n\nThe governing partial differential equation is the one-dimensional heat equation for a homogeneous medium with constant thermal diffusivity $\\alpha$:\n$$\n\\frac{\\partial T}{\\partial t} = \\alpha \\frac{\\partial^2 T}{\\partial x^2}\n$$\nThe domain is a rod of length $L$ defined by $x \\in [0, L]$.\n\nBoundary Conditions (BCs): Homogeneous Dirichlet conditions.\n$$\nT(0, t) = 0 \\quad \\text{for all } t \\ge 0\n$$\n$$\nT(L, t) = 0 \\quad \\text{for all } t \\ge 0\n$$\n\nInitial Condition (IC): A single-mode sinusoid.\n$$\nT(x, 0) = T_{\\mathrm{amp}} \\sin\\left(\\frac{\\pi x}{L}\\right)\n$$\n\nAnalytical Solution:\n$$\nT(x, t) = T_{\\mathrm{amp}} \\sin\\left(\\frac{\\pi x}{L}\\right) \\exp\\left(-\\alpha \\left(\\frac{\\pi}{L}\\right)^2 t\\right)\n$$\n\nNumerical Scheme: Explicit Forward Time Centered Space (FTCS).\n-   Spatial discretization: Uniform grid with $N$ nodes, spacing $\\Delta x = L/(N-1)$.\n-   Node indexing: $i = 0, 1, \\dots, N-1$, with $x_i = i\\,\\Delta x$.\n-   Time discretization: Constant time step $\\Delta t$.\n-   Nondimensional ratio: $r = \\alpha \\,\\Delta t/\\Delta x^2$.\n-   Time evolution: From $t=0$ to $t=t_{\\mathrm{end}}$. The number of steps $t_{\\mathrm{end}}/\\Delta t$ is an integer.\n-   Initial numerical solution: $T_i^0 = T_{\\mathrm{amp}} \\sin\\left(\\frac{\\pi x_i}{L}\\right)$.\n-   Task: At time $t_{\\mathrm{end}}$, compute the numerical temperature $T_{\\mathrm{num}}$ and analytical temperature $T_{\\mathrm{ana}}$ at node index $i_{\\star}$, and return the absolute error $|T_{\\mathrm{num}} - T_{\\mathrm{ana}}|$.\n\nTest Suite Parameters:\n-   Case $1$: $L=1\\,\\mathrm{m}$, $\\alpha=1.0\\times 10^{-4}\\,\\mathrm{m^2/s}$, $T_{\\mathrm{amp}}=10\\,\\mathrm{K}$, $N=51$, $r=0.4$, $t_{\\mathrm{end}}=160\\,\\mathrm{s}$, $i_{\\star}=25$.\n-   Case $2$: $L=1\\,\\mathrm{m}$, $\\alpha=1.0\\times 10^{-4}\\,\\mathrm{m^2/s}$, $T_{\\mathrm{amp}}=10\\,\\mathrm{K}$, $N=41$, $r=0.5$, $t_{\\mathrm{end}}=31.25\\,\\mathrm{s}$, $i_{\\star}=20$.\n-   Case $3$: $L=1\\,\\mathrm{m}$, $\\alpha=1.0\\times 10^{-4}\\,\\mathrm{m^2/s}$, $T_{\\mathrm{amp}}=5\\,\\mathrm{K}$, $N=11$, $r=0.2$, $t_{\\mathrm{end}}=200\\,\\mathrm{s}$, $i_{\\star}=5$.\n-   Case $4$: $L=1\\,\\mathrm{m}$, $\\alpha=1.0\\times 10^{-4}\\,\\mathrm{m^2/s}$, $T_{\\mathrm{amp}}=10\\,\\mathrm{K}$, $N=101$, $r=0.1$, $t_{\\mathrm{end}}=10\\,\\mathrm{s}$, $i_{\\star}=0$.\n\n#### Step 2: Validate Using Extracted Givens\n\n1.  **Scientifically Grounded**: The problem is based on the authoritative one-dimensional heat equation, a fundamental principle derived from conservation of energy and Fourier's law of conduction. The FTCS method is a standard, well-documented finite difference scheme for parabolic partial differential equations. The analytical solution provided is the correct solution for the given initial and boundary conditions. The problem is scientifically and mathematically sound.\n\n2.  **Well-Posed**: The problem is a well-posed initial-boundary value problem for a parabolic PDE. The stability of the FTCS scheme for the one-dimensional heat equation is governed by the Courant–Friedrichs–Lewy (CFL) condition, which requires the non-dimensional parameter $r = \\alpha \\,\\Delta t/\\Delta x^2$ to satisfy $r \\le 0.5$.\n    -   Case $1$: $r = 0.4 \\le 0.5$. Stable.\n    -   Case $2$: $r = 0.5 \\le 0.5$. Marginally stable, which is a valid condition.\n    -   Case $3$: $r = 0.2 \\le 0.5$. Stable.\n    -   Case $4$: $r = 0.1 \\le 0.5$. Stable.\n    All test cases adhere to the stability criterion, ensuring a meaningful numerical solution.\n\n3.  **Objective**: The problem is stated with unambiguous, objective language, and all parameters are defined with precise numerical values. There are no subjective or opinion-based statements.\n\n4.  **Completeness and Consistency**: The problem provides all necessary information: the governing equation, initial and boundary conditions, discretization method, all physical and numerical parameters for each test case, and a clear definition of the required output. The parameters are self-consistent. For example, in Case $4$, the evaluation node is $i_{\\star}=0$. The boundary condition fixes $T(0,t)=0$, and the analytical solution also yields $T(0,t)=0$. Thus, the expected absolute error is $0$, which is a valid test of boundary condition implementation.\n\n#### Step 3: Verdict and Action\n\nThe problem is **valid**. It is scientifically sound, well-posed, complete, and devoid of ambiguity. A solution will be furnished.\n\n### Solution Derivation and Algorithm\n\nThe governing equation is the one-dimensional heat equation:\n$$\n\\frac{\\partial T}{\\partial t} = \\alpha \\frac{\\partial^2 T}{\\partial x^2}\n$$\nWe discretize this equation on a grid where $T_i^n$ denotes the temperature at spatial node $i$ and time step $n$. The spatial coordinates are $x_i = i\\Delta x$ for $i=0, 1, \\dots, N-1$, and time is $t_n = n\\Delta t$.\n\nThe FTCS scheme employs a forward difference for the time derivative and a second-order central difference for the spatial derivative:\n$$\n\\frac{\\partial T}{\\partial t}\\bigg|_{(x_i, t_n)} \\approx \\frac{T_i^{n+1} - T_i^n}{\\Delta t}\n$$\n$$\n\\frac{\\partial^2 T}{\\partial x^2}\\bigg|_{(x_i, t_n)} \\approx \\frac{T_{i+1}^n - 2T_i^n + T_{i-1}^n}{\\Delta x^2}\n$$\n\nSubstituting these approximations into the heat equation yields:\n$$\n\\frac{T_i^{n+1} - T_i^n}{\\Delta t} = \\alpha \\frac{T_{i+1}^n - 2T_i^n + T_{i-1}^n}{\\Delta x^2}\n$$\n\nSolving for the temperature at the next time step, $T_i^{n+1}$, gives the explicit update rule:\n$$\nT_i^{n+1} = T_i^n + \\frac{\\alpha \\Delta t}{\\Delta x^2} \\left( T_{i+1}^n - 2T_i^n + T_{i-1}^n \\right)\n$$\n\nIntroducing the non-dimensional diffusion number, $r = \\frac{\\alpha \\Delta t}{\\Delta x^2}$, simplifies the expression:\n$$\nT_i^{n+1} = T_i^n + r \\left( T_{i+1}^n - 2T_i^n + T_{i-1}^n \\right)\n$$\nThis can be rearranged for computational efficiency:\n$$\nT_i^{n+1} = r T_{i-1}^n + (1 - 2r) T_i^n + r T_{i+1}^n\n$$\nThis update rule is applied to all interior nodes, i.e., for $i = 1, 2, \\dots, N-2$. The boundary nodes $i=0$ and $i=N-1$ are held fixed at $0\\,\\mathrm{K}$ for all time steps, as per the Dirichlet boundary conditions.\n\nThe algorithm for each test case is as follows:\n1.  Define the physical and numerical parameters from the test case: $L$, $\\alpha$, $T_{\\mathrm{amp}}$, $N$, $r$, $t_{\\mathrm{end}}$, and $i_{\\star}$.\n2.  Calculate the grid spacing $\\Delta x = L / (N - 1)$ and the time step $\\Delta t = r \\cdot \\Delta x^2 / \\alpha$.\n3.  Calculate the total number of time steps required to reach $t_{\\mathrm{end}}$, which is $n_{\\mathrm{steps}} = \\text{round}(t_{\\mathrm{end}} / \\Delta t)$. The problem statement guarantees this is an integer.\n4.  Create a spatial grid $x_i = i \\Delta x$ for $i=0, \\dots, N-1$.\n5.  Initialize the temperature array $T$ at time $t=0$ using the initial condition: $T_i = T_{\\mathrm{amp}} \\sin(\\pi x_i / L)$ for all $i$.\n6.  Begin the time-stepping loop from $n=0$ to $n_{\\mathrm{steps}}-1$:\n    a. Create a new array, $T_{\\text{new}}$, to store the temperatures at the next time step, $n+1$.\n    b. For each interior node $i$ from $1$ to $N-2$, calculate $T_{\\text{new},i}$ using the FTCS update rule: $T_{\\text{new},i} = r T_{i-1} + (1-2r) T_i + r T_{i+1}$.\n    c. Enforce the boundary conditions: $T_{\\text{new},0} = 0$ and $T_{\\text{new},N-1} = 0$.\n    d. Update the current temperature array for the next iteration: $T \\leftarrow T_{\\text{new}}$.\n7.  After the loop completes, the array $T$ contains the numerical solution at $t = t_{\\mathrm{end}}$. The numerical temperature at the specified node is $T_{\\mathrm{num}} = T_{i_{\\star}}$.\n8.  Calculate the analytical solution at the same position and time. The position is $x_{\\star} = i_{\\star} \\Delta x$.\n    $$\n    T_{\\mathrm{ana}} = T_{\\mathrm{amp}} \\sin\\left(\\frac{\\pi x_{\\star}}{L}\\right) \\exp\\left(-\\alpha \\left(\\frac{\\pi}{L}\\right)^2 t_{\\mathrm{end}}\\right)\n    $$\n9.  Compute and record the absolute error, $|T_{\\mathrm{num}} - T_{\\mathrm{ana}}|$.\n\nThis procedure is repeated for all four test cases to generate the final results.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements a 1D transient heat conduction simulator using the FTCS scheme\n    and computes the error against the analytical solution for given test cases.\n    \"\"\"\n    test_cases = [\n        # Case 1\n        {'L': 1.0, 'alpha': 1.0e-4, 'T_amp': 10.0, 'N': 51, 'r': 0.4, 't_end': 160.0, 'i_star': 25},\n        # Case 2\n        {'L': 1.0, 'alpha': 1.0e-4, 'T_amp': 10.0, 'N': 41, 'r': 0.5, 't_end': 31.25, 'i_star': 20},\n        # Case 3\n        {'L': 1.0, 'alpha': 1.0e-4, 'T_amp': 5.0, 'N': 11, 'r': 0.2, 't_end': 200.0, 'i_star': 5},\n        # Case 4\n        {'L': 1.0, 'alpha': 1.0e-4, 'T_amp': 10.0, 'N': 101, 'r': 0.1, 't_end': 10.0, 'i_star': 0},\n    ]\n\n    results = []\n    for case in test_cases:\n        # Extract parameters\n        L = case['L']\n        alpha = case['alpha']\n        T_amp = case['T_amp']\n        N = case['N']\n        r = case['r']\n        t_end = case['t_end']\n        i_star = case['i_star']\n\n        # Discretization parameters\n        dx = L / (N - 1)\n        dt = r * dx**2 / alpha\n        \n        # Ensure n_steps is an integer as per problem statement\n        n_steps = int(round(t_end / dt))\n\n        # Spatial grid\n        x = np.linspace(0, L, N)\n\n        # Initialize temperature array based on the initial condition\n        T = T_amp * np.sin(np.pi * x / L)\n\n        # Time-stepping loop\n        for _ in range(n_steps):\n            # Store the current temperature profile\n            T_old = T.copy()\n            # Update interior nodes using the FTCS formula\n            for i in range(1, N - 1):\n                T[i] = T_old[i] + r * (T_old[i+1] - 2*T_old[i] + T_old[i-1])\n            # The boundary conditions T[0]=0 and T[N-1]=0 are enforced implicitly\n            # by the loop range and because the initial values at boundaries\n            # are already 0 from the sin function. A more robust implementation\n            # would explicitly set them after each update.\n            T[0] = 0.0\n            T[N-1] = 0.0\n\n        # Numerical solution at the specified node and time\n        T_num = T[i_star]\n\n        # Analytical solution at the same position and time\n        x_star = i_star * dx\n        decay_term = -alpha * (np.pi / L)**2 * t_end\n        T_ana = T_amp * np.sin(np.pi * x_star / L) * np.exp(decay_term)\n\n        # Compute the absolute error\n        error = abs(T_num - T_ana)\n        results.append(error)\n\n    # Format and print the final output\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2483476"}, {"introduction": "After building a solver, a computational engineer must learn to recognize and diagnose its potential failures. This exercise explores a common and often startling pitfall of explicit methods: the emergence of unphysical results, such as negative concentrations or temperatures. Starting from first principles, you will analyze why a simple explicit update can violate physical bounds, connecting this failure to the non-dimensional stability parameter $r = \\frac{D \\Delta t}{(\\Delta x)^2}$. This practice is key to developing intuition about numerical stability and understanding why it's not just a mathematical curiosity but a prerequisite for physically meaningful simulations [@problem_id:2523742].", "problem": "A one-dimensional species transport problem is posed on the interval $x \\in [0,L]$ with molecular diffusion only. The species concentration $c(x,t)$ obeys local conservation of mass and the Fickian constitutive relation for the diffusive flux. Initially, the concentration is nonnegative everywhere, with a sharp step near the left boundary: $c(x,0) \\ge 0$, $c(0,t)=c_{0}>0$, and $c(L,t)=0$. Consider a uniform grid of spacing $\\Delta x$ and an explicit-in-time, centered-in-space finite-volume update for $c$ at interior nodes. Let the diffusivity be $D>0$ constant. You are told that, at early times when the gradient near $x=0$ is very steep, the explicit computation yields $c<0$ at some interior nodes, even though all initial and boundary values are nonnegative.\n\nUsing only (i) the differential species balance $\\partial c/\\partial t + \\nabla \\cdot \\boldsymbol{J} = 0$ applied to a one-dimensional control volume and (ii) Fick’s law $\\boldsymbol{J}_{d} = -D \\nabla c$ with constant $D$, reason from first principles why such negative values can arise in an explicit scheme under steep gradients. In your reasoning, identify the non-dimensional grouping formed by $(D,\\Delta t,\\Delta x)$ that controls whether the explicit update is a convex combination of neighboring values. For the specific values $L=1\\,\\mathrm{mm}$, $\\Delta x=20\\,\\mu\\mathrm{m}$, $D=1\\times 10^{-9}\\,\\mathrm{m^{2}/s}$, and a chosen time step $\\Delta t=0.5\\,\\mathrm{s}$, evaluate this non-dimensional number and state whether the update is a convex combination. Then, select the option that best explains the appearance of negative concentrations and correctly suggests a boundedness-preserving alternative.\n\nOptions:\nA. Negative concentrations arise because, for sufficiently large $\\frac{D \\Delta t}{(\\Delta x)^2}$, the explicit update ceases to be a convex combination of nonnegative neighbor values; with steep gradients the discrete Laplacian is large, and the forward Euler step overshoots below zero. A boundedness-preserving alternative is to either enforce $\\frac{D \\Delta t}{(\\Delta x)^2} \\le 1/2$ so that the explicit weights remain nonnegative, or to use a fully implicit backward-Euler diffusion step whose coefficient matrix is an $M$-matrix satisfying a discrete maximum principle for any $\\Delta t$.\n\nB. Negative concentrations indicate that Fick’s law fails at high gradients and violates the second law; replacing it with a nonlinear constitutive relation $J=-D(c)\\,\\frac{\\partial c}{\\partial x}$ with $D(c)$ increasing in $c$ unconditionally restores positivity for explicit schemes at any $\\Delta t$.\n\nC. The observed negativity is due solely to floating-point round-off; using double precision arithmetic eliminates it without changing the discretization or time step.\n\nD. Central differencing in space combined with a leapfrog time integrator for diffusion is unconditionally non-oscillatory and preserves nonnegativity for any $\\Delta t$; thus switching to leapfrog time stepping resolves the issue without changing $\\Delta t$ or the spatial stencil.", "solution": "The problem statement will be validated before a solution is attempted.\n\n**Step 1: Extract Givens**\n- **Domain:** One dimension, $x \\in [0,L]$.\n- **Physical Process:** Molecular diffusion only.\n- **Governing Equation:** Differential species balance, $\\frac{\\partial c}{\\partial t} + \\nabla \\cdot \\boldsymbol{J} = 0$.\n- **Constitutive Relation:** Fick's law, $\\boldsymbol{J}_{d} = -D \\nabla c$.\n- **Diffusivity:** $D>0$, constant.\n- **Initial Condition:** $c(x,0) \\ge 0$.\n- **Boundary Conditions:** $c(0,t)=c_{0}>0$, $c(L,t)=0$.\n- **Discretization:** Uniform grid with spacing $\\Delta x$. Explicit-in-time, centered-in-space finite-volume update for interior nodes.\n- **Observation:** For steep gradients, the computation yields $c<0$ at some interior nodes.\n- **Given Values:** $L=1\\,\\mathrm{mm}$, $\\Delta x=20\\,\\mu\\mathrm{m}$, $D=1\\times 10^{-9}\\,\\mathrm{m^{2}/s}$, $\\Delta t=0.5\\,\\mathrm{s}$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem describes the one-dimensional diffusion equation and its numerical solution using the Forward-Time Centered-Space (FTCS) finite difference/volume method. The appearance of non-physical negative concentrations is a well-known phenomenon resulting from the conditional stability of this explicit scheme. The problem asks for a first-principles explanation of this numerical instability, the identification of the controlling non-dimensional parameter, and an evaluation based on given data.\n\n- **Scientific Grounding:** The problem is firmly grounded in the fields of heat and mass transfer and numerical analysis of partial differential equations. The diffusion equation, Fick's law, and the FTCS scheme are all standard, well-established concepts. The issue of numerical stability is a cornerstone of computational physics and engineering.\n- **Well-Posedness:** The underlying physical problem is a well-posed parabolic PDE. The numerical question is also well-posed, asking for the derivation of a known stability condition. A unique and meaningful answer exists.\n- **Objectivity:** The problem is stated using precise, objective, and technical language, free from ambiguity or subjective claims.\n\nThe problem statement has no scientific or factual unsoundness, is formalizable, self-contained, and poses a verifiable question. The provided data are physically consistent. Therefore, the problem is valid.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A solution will be derived.\n\n**Derivation from First Principles**\n\nThe species conservation equation in one dimension is:\n$$ \\frac{\\partial c}{\\partial t} + \\frac{\\partial J}{\\partial x} = 0 $$\nwhere $c(x,t)$ is the species concentration and $J(x,t)$ is the species flux. With Fick's law for diffusion, $J = -D \\frac{\\partial c}{\\partial x}$, and a constant diffusivity $D$, the conservation equation becomes the standard diffusion equation:\n$$ \\frac{\\partial c}{\\partial t} = D \\frac{\\partial^2 c}{\\partial x^2} $$\nWe now discretize this equation using a finite-volume approach on a uniform grid with spacing $\\Delta x$. Consider a control volume of width $\\Delta x$ centered at node $i$. Integrating the conservation law over this control volume, from $x_{i-1/2}$ to $x_{i+1/2}$:\n$$ \\int_{x_{i-1/2}}^{x_{i+1/2}} \\frac{\\partial c}{\\partial t} \\,dx = - \\int_{x_{i-1/2}}^{x_{i+1/2}} \\frac{\\partial J}{\\partial x} \\,dx $$\nApproximating the integral on the left and applying the fundamental theorem of calculus on the right gives:\n$$ \\frac{d c_i}{dt} \\Delta x \\approx -[J(x_{i+1/2}) - J(x_{i-1/2})] = J_{i-1/2} - J_{i+1/2} $$\nwhere $c_i$ is the average concentration in the control volume around node $i$. The fluxes at the control volume faces are approximated using a centered difference scheme:\n$$ J_{i+1/2} \\approx -D \\frac{c_{i+1} - c_i}{\\Delta x} $$\n$$ J_{i-1/2} \\approx -D \\frac{c_i - c_{i-1}}{\\Delta x} $$\nSubstituting these fluxes into the semi-discretized equation yields:\n$$ \\frac{d c_i}{dt} \\Delta x = \\left(-D \\frac{c_i - c_{i-1}}{\\Delta x}\\right) - \\left(-D \\frac{c_{i+1} - c_i}{\\Delta x}\\right) = \\frac{D}{\\Delta x} (c_{i+1} - 2c_i + c_{i-1}) $$\n$$ \\frac{d c_i}{dt} = \\frac{D}{(\\Delta x)^2} (c_{i+1} - 2c_i + c_{i-1}) $$\nNow, we apply an explicit-in-time (Forward Euler) discretization to the time derivative, where the superscript $n$ denotes the time level $t=n\\Delta t$:\n$$ \\frac{c_i^{n+1} - c_i^n}{\\Delta t} = \\frac{D}{(\\Delta x)^2} (c_{i+1}^n - 2c_i^n + c_{i-1}^n) $$\nSolving for the concentration at the next time step, $c_i^{n+1}$:\n$$ c_i^{n+1} = c_i^n + \\frac{D \\Delta t}{(\\Delta x)^2} (c_{i+1}^n - 2c_i^n + c_{i-1}^n) $$\nLet us define the non-dimensional grouping $\\alpha = \\frac{D \\Delta t}{(\\Delta x)^2}$. This parameter is the grid Fourier number, or diffusion number. The update equation can be rewritten by grouping terms at the time level $n$:\n$$ c_i^{n+1} = \\alpha c_{i-1}^n + (1 - 2\\alpha) c_i^n + \\alpha c_{i+1}^n $$\nFor the updated value $c_i^{n+1}$ to be guaranteed non-negative when all values at the previous time step ($c_{j}^n$) are non-negative, the update must be a convex combination of its neighbors. This means the coefficients of $c_{j}^n$ in the expression for $c_i^{n+1}$ must be non-negative and sum to $1$. The sum of the coefficients is $\\alpha + (1-2\\alpha) + \\alpha = 1$. The non-negativity condition requires:\n1. $\\alpha \\ge 0$. Since $D>0$, $\\Delta t > 0$, and $(\\Delta x)^2 > 0$, this is always true.\n2. $1 - 2\\alpha \\ge 0$, which implies $2\\alpha \\le 1$, or $\\alpha \\le \\frac{1}{2}$.\n\nTherefore, the non-dimensional grouping that controls whether the update is a convex combination is $\\alpha = \\frac{D \\Delta t}{(\\Delta x)^2}$, and the condition is $\\frac{D \\Delta t}{(\\Delta x)^2} \\le \\frac{1}{2}$.\n\nIf this condition is violated (i.e., $\\alpha > 1/2$), the coefficient $(1-2\\alpha)$ becomes negative. In a region of steep gradients, it is possible for a node $i$ to have a high concentration $c_i^n > 0$ while its neighbors are near zero, $c_{i-1}^n \\approx 0$ and $c_{i+1}^n \\approx 0$. In this scenario, the update becomes $c_i^{n+1} \\approx (1-2\\alpha)c_i^n$. Since $c_i^n > 0$ and $(1-2\\alpha)  0$, the result $c_i^{n+1}$ will be negative. This numerical \"overshoot\" below zero is a direct consequence of the instability of the explicit scheme when the time step is too large for the given grid spacing and diffusivity.\n\n**Evaluation of the Non-dimensional Number**\nUsing the given values:\n$D = 1 \\times 10^{-9}\\,\\mathrm{m^2/s}$\n$\\Delta t = 0.5\\,\\mathrm{s}$\n$\\Delta x = 20\\,\\mu\\mathrm{m} = 20 \\times 10^{-6}\\,\\mathrm{m} = 2 \\times 10^{-5}\\,\\mathrm{m}$\n\nThe non-dimensional number is calculated as:\n$$ \\alpha = \\frac{D \\Delta t}{(\\Delta x)^2} = \\frac{(1 \\times 10^{-9}\\,\\mathrm{m^2/s}) \\times (0.5\\,\\mathrm{s})}{(2 \\times 10^{-5}\\,\\mathrm{m})^2} = \\frac{0.5 \\times 10^{-9}}{4 \\times 10^{-10}} = \\frac{5 \\times 10^{-10}}{4 \\times 10^{-10}} = \\frac{5}{4} = 1.25 $$\nThe condition for the update to be a convex combination is $\\alpha \\le 1/2$, which is $1.25 \\le 0.5$. This inequality is false. Thus, with the chosen parameters, the update is **not** a convex combination.\n\n**Option-by-Option Analysis**\n\n**A. Negative concentrations arise because, for sufficiently large $\\frac{D \\Delta t}{(\\Delta x)^2}$, the explicit update ceases to be a convex combination of nonnegative neighbor values; with steep gradients the discrete Laplacian is large, and the forward Euler step overshoots below zero. A boundedness-preserving alternative is to either enforce $\\frac{D \\Delta t}{(\\Delta x)^2} \\le 1/2$ so that the explicit weights remain nonnegative, or to use a fully implicit backward-Euler diffusion step whose coefficient matrix is an $M$-matrix satisfying a discrete maximum principle for any $\\Delta t$.**\nThis option correctly identifies the non-dimensional group $\\frac{D \\Delta t}{(\\Delta x)^2}$ and the critical value of $1/2$ for maintaining the convex combination property. It correctly explains the mechanism of overshoot. It also correctly proposes two standard remedies: reducing the time step to satisfy the stability condition for the explicit scheme, or switching to a fully implicit scheme, which is unconditionally stable and positivity-preserving for any $\\Delta t  0$ due to its M-matrix property. The reasoning is entirely sound.\n**Verdict: Correct**\n\n**B. Negative concentrations indicate that Fick’s law fails at high gradients and violates the second law; replacing it with a nonlinear constitutive relation $J=-D(c)\\,\\frac{\\partial c}{\\partial x}$ with $D(c)$ increasing in $c$ unconditionally restores positivity for explicit schemes at any $\\Delta t$.**\nThis option incorrectly blames the physical model (Fick's law) for a numerical artifact. The diffusion PDE itself guarantees non-negativity. The proposed \"solution\" of using a nonlinear diffusivity does not remove the conditional stability of an explicit time-stepping scheme. The claim that this change \"unconditionally restores positivity... at any $\\Delta t$\" is false.\n**Verdict: Incorrect**\n\n**C. The observed negativity is due solely to floating-point round-off; using double precision arithmetic eliminates it without changing the discretization or time step.**\nThis option confuses stability error with round-off error. The negative values arise from the amplification of errors inherent to the unstable numerical scheme, resulting in values that can be orders of magnitude different from zero. This is a truncation error issue, not a precision issue. Switching from single to double precision will not stabilize a fundamentally unstable scheme.\n**Verdict: Incorrect**\n\n**D. Central differencing in space combined with a leapfrog time integrator for diffusion is unconditionally non-oscillatory and preserves nonnegativity for any $\\Delta t$; thus switching to leapfrog time stepping resolves the issue without changing $\\Delta t$ or the spatial stencil.**\nThis option suggests using the leapfrog scheme for time integration. The leapfrog scheme ($\\frac{c^{n+1}-c^{n-1}}{2\\Delta t} = \\dots$) is known to be unconditionally unstable when applied to the diffusion equation. It is suitable for hyperbolic equations (like the wave equation) but not for parabolic equations. The claim that it is \"unconditionally non-oscillatory\" for diffusion is the opposite of the truth.\n**Verdict: Incorrect**", "answer": "$$\\boxed{A}$$", "id": "2523742"}, {"introduction": "With an understanding of the strict stability limits of explicit methods, we can now address the core strategic question: when is it better to use an implicit scheme? This practice illuminates the fundamental trade-off between the low per-step cost of an explicit method and the unconditional stability of an implicit one. By modeling the computational cost for a \"stiff\" problem—one with vastly different scales—you will quantify how the tiny, stability-enforced time steps of an explicit method can lead to prohibitive runtimes, making the more complex implicit approach far more efficient in practice [@problem_id:2390373].", "problem": "Consider one-dimensional heat conduction in a composite rod occupying the interval $[0,L]$, with a material interface at $x=L/2$. Let $T(x,t)$ denote temperature. The governing equation is the linear heat equation with piecewise constant thermal diffusivity $\\alpha(x)$,\n$$\n\\frac{\\partial T}{\\partial t}(x,t) = \\alpha(x)\\,\\frac{\\partial^2 T}{\\partial x^2}(x,t),\\quad x\\in(0,L),\\ t0,\n$$\nsubject to homogeneous Dirichlet boundary conditions $T(0,t)=0$ and $T(L,t)=0$ for all $t\\ge 0$, and an arbitrary initial condition $T(x,0)=T_0(x)$ that is bounded and compatible with the boundary conditions. The thermal diffusivity is piecewise constant with\n$$\n\\alpha(x)=\\begin{cases} \\alpha_1,  \\text{for } 0 \\le x  L/2 \\\\ \\alpha_2,  \\text{for } L/2 \\le x \\le L \\end{cases},\n$$\nand the two materials satisfy a contrast ratio of $1000\\times$ in thermal conductivity while having the same volumetric heat capacity; model this by taking $\\alpha_2 = 1000\\,\\alpha_1$.\n\nDiscretize space using a uniform grid of $N$ points including the endpoints, with spacing $h=L/(N-1)$. Let $M=N-2$ denote the number of interior points. Consider two time discretizations:\n- An explicit forward Euler method applied to the semi-discrete system formed by the second-order centered finite-difference approximation of $\\partial^2 T/\\partial x^2$ on the uniform grid.\n- An implicit backward Euler method applied to the same spatial discretization, leading at each time step to the solution of a symmetric tridiagonal linear system of size $M\\times M$.\n\nFor the explicit method, use the largest time step that guarantees linear stability for the discretization on this uniform grid. For a conservative estimate in the presence of spatially varying $\\alpha(x)$ with piecewise constant values, take\n$$\n\\Delta t_{\\mathrm{exp},\\max} = \\frac{h^2}{2\\,\\max(\\alpha_1,\\alpha_2)}.\n$$\nFor the implicit method, assume unconditional linear stability, and define the computational cost per time step as the number of floating-point additions and multiplications needed to solve the tridiagonal linear system by an optimal direct method. Use the following operation-count model:\n- For the explicit update, count exactly $6$ floating-point operations per interior grid point per time step, so that one explicit step costs $6\\,M$ operations. Neglect all one-time precomputations.\n- For the implicit step, count exactly $8$ floating-point operations per interior grid point per step to solve the tridiagonal system, so that one implicit step costs $8\\,M$ operations. Neglect assembly and any other overhead.\n\nGiven a final simulation time $T_{\\mathrm{final}}$, define the following quantities to be computed for each parameter set:\n1. The maximum stable explicit time step in seconds, $\\Delta t_{\\mathrm{exp},\\max}$, as defined above.\n2. The minimum number of explicit time steps needed to reach $T_{\\mathrm{final}}$ using $\\Delta t_{\\mathrm{exp},\\max}$, namely $N_{\\mathrm{exp}}=\\lceil T_{\\mathrm{final}}/\\Delta t_{\\mathrm{exp},\\max}\\rceil$.\n3. The total explicit cost to reach $T_{\\mathrm{final}}$ using $\\Delta t_{\\mathrm{exp},\\max}$, namely $C_{\\mathrm{exp}}=6\\,M\\,N_{\\mathrm{exp}}$.\n4. The implicit cost per time step, $C_{\\mathrm{imp,step}}=8\\,M$.\n5. The total implicit cost to reach $T_{\\mathrm{final}}$ if the same number of steps as the explicit method is used, $C_{\\mathrm{imp,same}}=8\\,M\\,N_{\\mathrm{exp}}$.\n6. The minimal implicit total cost if the entire interval $[0,T_{\\mathrm{final}}]$ is advanced in a single step, $C_{\\mathrm{imp,min}}=8\\,M$.\n\nAll physical units must be interpreted as follows: length in meters, time in seconds, thermal diffusivity in $\\mathrm{m}^2/\\mathrm{s}$. All costs are pure counts of floating-point additions or multiplications and are unitless integers. All angle quantities are irrelevant to this problem. Any ratio must be reported as a decimal number.\n\nTest suite:\n- Test $1$ (two-material contrast case): $(L,N,\\alpha_1,\\alpha_2,T_{\\mathrm{final}}) = (1.0,\\ 1001,\\ 10^{-6},\\ 10^{-3},\\ 0.5)$.\n- Test $2$ (uniform low-diffusivity case): $(L,N,\\alpha_1,\\alpha_2,T_{\\mathrm{final}}) = (1.0,\\ 201,\\ 10^{-6},\\ 10^{-6},\\ 0.1)$.\n- Test $3$ (fine grid with high contrast): $(L,N,\\alpha_1,\\alpha_2,T_{\\mathrm{final}}) = (0.2,\\ 2001,\\ 10^{-5},\\ 10^{-2},\\ 0.01)$.\n\nRequired final output format. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. For each test case, output the list $[\\Delta t_{\\mathrm{exp},\\max}, N_{\\mathrm{exp}}, C_{\\mathrm{exp}}, C_{\\mathrm{imp,step}}, C_{\\mathrm{imp,same}}, C_{\\mathrm{imp,min}}]$ in that order. Aggregate the three test-case lists into a single list, without any spaces, for example, $[[\\cdot],[\\cdot],[\\cdot]]$. All time-step values must be in seconds, and all costs and counts must be integers. No other text should be printed.", "solution": "The problem statement has been subjected to rigorous validation and is determined to be valid. It is a well-posed computational exercise in the numerical analysis of partial differential equations, grounded in established scientific and mathematical principles. All necessary parameters and definitions are provided, and the task is free from ambiguity, contradiction, or factual unsoundness. We may therefore proceed with the solution.\n\nThe problem requires the calculation of several quantities related to the computational cost and stability of explicit and implicit time-stepping schemes for the one-dimensional heat equation with piecewise constant thermal diffusivity. The governing equation is given by\n$$\n\\frac{\\partial T}{\\partial t}(x,t) = \\alpha(x)\\,\\frac{\\partial^2 T}{\\partial x^2}(x,t)\n$$\non a spatial domain $x \\in [0,L]$ with homogeneous Dirichlet boundary conditions. The thermal diffusivity $\\alpha(x)$ is piecewise constant.\n\nThe solution methodology involves a direct application of the formulas provided for each test case, which are specified by the tuple $(L, N, \\alpha_1, \\alpha_2, T_{\\mathrm{final}})$. The computational steps are as follows:\n\n1.  **Discretization Parameters**: The spatial domain of length $L$ is discretized using a uniform grid of $N$ points. The grid spacing, $h$, is the distance between adjacent points and is calculated as $h = L / (N-1)$. The number of interior grid points, $M$, subject to the homogeneous Dirichlet boundary conditions, is $M = N-2$.\n\n2.  **Maximum Explicit Time Step ($\\Delta t_{\\mathrm{exp},\\max}$)**: The forward Euler scheme applied to the centered finite-difference spatial discretization of the heat equation is only conditionally stable. The stability is governed by the Courant-Friedrichs-Lewy (CFL) condition. For the 1D heat equation, this condition is $\\alpha \\Delta t / h^2 \\le 1/2$. In the presence of spatially varying diffusivity, a conservative stability criterion uses the maximum diffusivity value over the domain. Thus, the maximum stable time step is given by the formula:\n    $$\n    \\Delta t_{\\mathrm{exp},\\max} = \\frac{h^2}{2\\,\\max(\\alpha_1, \\alpha_2)}\n    $$\n    This value represents the largest time step for which the explicit numerical solution is guaranteed not to exhibit unbounded growth.\n\n3.  **Number of Explicit Steps ($N_{\\mathrm{exp}}$)**: To simulate up to a final time $T_{\\mathrm{final}}$ using the maximum stable time step, the required number of steps, $N_{\\mathrm{exp}}$, is determined by dividing the total simulation time by the step size and taking the ceiling of the result. This ensures the simulation time reaches or exceeds $T_{\\mathrm{final}}$.\n    $$\n    N_{\\mathrm{exp}} = \\left\\lceil \\frac{T_{\\mathrm{final}}}{\\Delta t_{\\mathrm{exp},\\max}} \\right\\rceil\n    $$\n\n4.  **Total Explicit Cost ($C_{\\mathrm{exp}}$)**: The computational cost is modeled as a count of floating-point operations. Given a cost of $6M$ operations per time step for the explicit method, the total cost to reach $T_{\\mathrm{final}}$ is the product of the per-step cost and the number of steps:\n    $$\n    C_{\\mathrm{exp}} = 6 \\cdot M \\cdot N_{\\mathrm{exp}}\n    $$\n\n5.  **Implicit Method Costs**: The backward Euler method is unconditionally stable, meaning the time step size is not constrained by stability but rather by accuracy considerations.\n    - The cost per step, $C_{\\mathrm{imp,step}}$, is given as $8M$. This reflects the cost of solving the $M \\times M$ symmetric tridiagonal linear system that arises at each implicit step, for instance, using the Thomas algorithm.\n      $$\n      C_{\\mathrm{imp,step}} = 8 \\cdot M\n      $$\n    - To provide a direct comparison with the explicit method, the total cost of the implicit method using the *same number of steps* as the explicit method, $N_{\\mathrm{exp}}$, is calculated as:\n      $$\n      C_{\\mathrm{imp,same}} = 8 \\cdot M \\cdot N_{\\mathrm{exp}}\n      $$\n    - The theoretical minimal cost for the implicit method, $C_{\\mathrm{imp,min}}$, corresponds to advancing the solution from $t=0$ to $t=T_{\\mathrm{final}}$ in a single time step. While this would yield a solution with very large temporal error, it represents the lower bound on computational cost.\n      $$\n      C_{\\mathrm{imp,min}} = 8 \\cdot M\n      $$\n\nThese calculations are performed for each of the three test cases provided in the problem statement. The results are then aggregated and formatted precisely as required.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the computational engineering problem for three test cases,\n    calculating stability and cost metrics for explicit and implicit schemes\n    for the 1D heat equation.\n    \"\"\"\n    # Test cases defined as (L, N, alpha1, alpha2, T_final)\n    test_cases = [\n        (1.0, 1001, 1e-6, 1e-3, 0.5),\n        (1.0, 201, 1e-6, 1e-6, 0.1),\n        (0.2, 2001, 1e-5, 1e-2, 0.01)\n    ]\n\n    all_results_str = []\n\n    for case in test_cases:\n        L, N, alpha1, alpha2, T_final = case\n\n        # Step 1: Calculate discretization parameters\n        h = L / (N - 1)\n        M = N - 2\n\n        # Step 2: Calculate maximum stable explicit time step\n        max_alpha = max(alpha1, alpha2)\n        dt_exp_max = h**2 / (2 * max_alpha)\n\n        # Step 3: Calculate the minimum number of explicit steps\n        # The result must be an integer. np.ceil returns a float.\n        N_exp = int(np.ceil(T_final / dt_exp_max))\n\n        # Step 4: Calculate total explicit cost\n        C_exp = 6 * M * N_exp\n\n        # Step 5: Calculate implicit method costs\n        C_imp_step = 8 * M\n        C_imp_same = 8 * M * N_exp\n        C_imp_min = 8 * M\n\n        # Assemble the list of results for the current test case\n        case_results = [\n            dt_exp_max,\n            N_exp,\n            C_exp,\n            C_imp_step,\n            C_imp_same,\n            C_imp_min\n        ]\n\n        # Format the list into a string representation with no spaces\n        case_str = f\"[{','.join(map(str, case_results))}]\"\n        all_results_str.append(case_str)\n\n    # Aggregate the string representations of each test case's results\n    # into a final string representing a list of lists, with no spaces.\n    final_output_str = f\"[{','.join(all_results_str)}]\"\n    print(final_output_str)\n\nsolve()\n```", "id": "2390373"}]}