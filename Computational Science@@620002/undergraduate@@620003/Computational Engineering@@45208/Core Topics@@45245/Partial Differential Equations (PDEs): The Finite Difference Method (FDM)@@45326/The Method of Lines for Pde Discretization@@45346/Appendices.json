{"hands_on_practices": [{"introduction": "Applying the Method of Lines to the interior of a domain is often a standard procedure, but the real art lies in correctly incorporating boundary conditions. This practice challenges you to derive the semi-discrete equation for a boundary node governed by a Robin condition, a common scenario in heat and mass transfer problems. By using a \"ghost point\" and a centered-difference approximation, you will learn a fundamental technique for maintaining numerical accuracy at the edges of your computational domain [@problem_id:2444675].", "problem": "Consider the one-dimensional heat conduction partial differential equation (PDE) $u_{t}(x,t) = \\kappa\\,u_{xx}(x,t)$ on the spatial interval $x \\in [0,L]$ with thermal diffusivity $\\kappa > 0$. At the left boundary $x=0$, the heat flux is governed by a Robin boundary condition $u_{x}(0,t) + a\\,u(0,t) = b$ with $a \\ge 0$ and $b$ constant. At the right boundary $x=L$, assume a Dirichlet condition $u(L,t)=0$; the right boundary condition will not be needed in what follows. You will discretize space using the Method of Lines (MOL), which turns the PDE into a system of ordinary differential equations (ODEs) by discretizing only in space.\n\nLet the spatial grid be uniform with $M+1$ nodes $x_{j} = j h$ for $j=0,1,\\dots,M$ and spacing $h = L/M$. Define the semi-discrete unknowns $u_{j}(t) \\approx u(x_{j},t)$. For interior points, approximate the second derivative by the second-order central difference. At the boundary node $j=0$, approximate $u_{xx}(0,t)$ using the same three-point second-order central difference stencil, which introduces a ghost value $u_{-1}(t)$. Enforce the Robin boundary condition using a second-order centered approximation for $u_{x}(0,t)$ to eliminate $u_{-1}(t)$ in favor of $u_{0}(t)$ and $u_{1}(t)$.\n\nUsing only these standard second-order finite difference approximations and the governing PDE, derive the closed-form expression $F(u_{0},u_{1};a,b,h,\\kappa)$ such that the semi-discrete ODE for the boundary node is $u_{0}'(t) = F(u_{0},u_{1};a,b,h,\\kappa)$. Provide your final result as a single analytic expression for $F(u_{0},u_{1};a,b,h,\\kappa)$. No numerical evaluation is required.", "solution": "The problem statement has been validated and is deemed valid. It presents a well-posed, scientifically grounded problem in the field of computational engineering that requests the derivation of the semi-discrete ordinary differential equation (ODE) at a boundary node using the Method of Lines. All necessary components—the governing partial differential equation (PDE), the boundary condition, and the specified numerical approximation schemes—are provided and are consistent. We will now proceed with the formal derivation.\n\nThe governing PDE is the one-dimensional heat equation:\n$$\nu_{t}(x,t) = \\kappa\\,u_{xx}(x,t)\n$$\nwhere $u_{t} = \\frac{\\partial u}{\\partial t}$ and $u_{xx} = \\frac{\\partial^2 u}{\\partial x^2}$. We are tasked with finding the ODE for the semi-discrete approximation $u_{0}(t) \\approx u(0,t)$ at the boundary point $x=0$. Applying the Method of Lines, we evaluate the PDE at the spatial node $x_0 = 0$:\n$$\n\\frac{d u_0}{d t}(t) = \\kappa \\, u_{xx}(0,t)\n$$\nThe problem specifies the use of a second-order central difference approximation for the second spatial derivative, $u_{xx}$. At the node $x_0$, this stencil involves the points $x_{-1} = -h$, $x_0 = 0$, and $x_1 = h$:\n$$\nu_{xx}(0,t) \\approx \\frac{u(x_1,t) - 2u(x_0,t) + u(x_{-1},t)}{h^2} = \\frac{u_1(t) - 2u_0(t) + u_{-1}(t)}{h^2}\n$$\nHere, $u_{-1}(t) \\approx u(-h,t)$ is a fictitious \"ghost point\" value, as the point $x_{-1}$ is outside the physical domain $[0,L]$. Substituting this approximation into the ODE for $u_0(t)$ yields:\n$$\n\\frac{d u_0}{d t}(t) = \\frac{\\kappa}{h^2} \\left[ u_1(t) - 2u_0(t) + u_{-1}(t) \\right]\n$$\nThis equation is not yet closed, as it depends on the unknown ghost value $u_{-1}(t)$. To eliminate this term, we must use the Robin boundary condition specified at $x=0$:\n$$\nu_{x}(0,t) + a\\,u(0,t) = b\n$$\nThe problem requires approximating the spatial derivative $u_{x}(0,t)$ with a second-order central difference. This approximation involves the points $x_{-1}$ and $x_1$:\n$$\nu_{x}(0,t) \\approx \\frac{u(x_1,t) - u(x_{-1},t)}{2h} = \\frac{u_1(t) - u_{-1}(t)}{2h}\n$$\nSubstituting this approximation into the boundary condition gives a discrete algebraic relation:\n$$\n\\frac{u_1(t) - u_{-1}(t)}{2h} + a\\,u_0(t) = b\n$$\nWe now solve this equation for the ghost value $u_{-1}(t)$ in terms of the physical values $u_0(t)$ and $u_1(t)$.\n$$\nu_1(t) - u_{-1}(t) = 2h \\left( b - a\\,u_0(t) \\right)\n$$\n$$\nu_{-1}(t) = u_1(t) - 2h \\left( b - a\\,u_0(t) \\right) = u_1(t) - 2hb + 2ha\\,u_0(t)\n$$\nNow we have an expression for $u_{-1}(t)$ that can be substituted back into the semi-discrete ODE for $u_0(t)$. Doing so eliminates the ghost point and closes the system at the boundary.\n$$\n\\frac{d u_0}{d t}(t) = \\frac{\\kappa}{h^2} \\left[ u_1(t) - 2u_0(t) + \\left( u_1(t) - 2hb + 2ha\\,u_0(t) \\right) \\right]\n$$\nThe next step is to collect and simplify the terms on the right-hand side.\n$$\n\\frac{d u_0}{d t}(t) = \\frac{\\kappa}{h^2} \\left[ (u_1(t) + u_1(t)) + (-2u_0(t) + 2ha\\,u_0(t)) - 2hb \\right]\n$$\n$$\n\\frac{d u_0}{d t}(t) = \\frac{\\kappa}{h^2} \\left[ 2u_1(t) + (2ha - 2)u_0(t) - 2hb \\right]\n$$\nFactoring out the common term $2$ gives the final form of the ODE for the boundary node $u_0(t)$:\n$$\n\\frac{d u_0}{d t}(t) = \\frac{2\\kappa}{h^2} \\left[ u_1(t) + (ha - 1)u_0(t) - hb \\right]\n$$\nThe problem asks for the function $F(u_{0},u_{1};a,b,h,\\kappa)$ such that $u_{0}'(t) = F(u_{0},u_{1};a,b,h,\\kappa)$. By direct comparison, we identify the function $F$ as the right-hand side of the derived equation. The time dependence is implicitly understood in the semi-discrete formulation, so we write the function in terms of the variables $u_0$ and $u_1$.\n$$\nF(u_{0},u_{1};a,b,h,\\kappa) = \\frac{2\\kappa}{h^2} \\left[ u_1 + (ha - 1)u_0 - hb \\right]\n$$\nThis expression is the required closed-form expression for the time derivative of the solution at the left boundary.", "answer": "$$\n\\boxed{\\frac{2\\kappa}{h^2}\\left(u_1 + (ha-1)u_0 - hb\\right)}\n$$", "id": "2444675"}, {"introduction": "The stability of a numerical solution is paramount, and the choice of discretization scheme is a deciding factor, especially in problems where advection dominates diffusion. This practical coding exercise tasks you with comparing a second-order centered-difference scheme against a first-order upwind scheme for the advection-diffusion equation [@problem_id:2444647]. You will discover firsthand why the formally more accurate centered scheme can fail spectacularly, and how the upwind scheme's inherent numerical dissipation provides the necessary stability for a physically meaningful solution.", "problem": "Consider the one-dimensional linear advection–diffusion partial differential equation (PDE) with periodic boundary conditions,\n$$\n\\frac{\\partial u}{\\partial t}(x,t) + a \\,\\frac{\\partial u}{\\partial x}(x,t) = \\nu \\,\\frac{\\partial^2 u}{\\partial x^2}(x,t), \\quad x \\in [0,1], \\quad t \\in [0,T],\n$$\nwith spatial periodicity $u(0,t) = u(1,t)$ for all $t \\in [0,T]$ and initial condition\n$$\nu(x,0) = \\sin(2\\pi x) + 0.1 \\sin(16\\pi x).\n$$\nLet the spatial grid be uniform with $N$ points, spacing $\\Delta x = 1/N$, and periodic indexing. Define two semi-discrete spatial operators on the grid values $u_j(t) \\approx u(x_j,t)$ with $x_j = j \\,\\Delta x$:\n- Centered advection with second-order central difference and second derivative diffusion,\n$$\n\\left.\\frac{\\mathrm{d}u_j}{\\mathrm{d}t}\\right|_{\\text{centered}} = -a \\,\\frac{u_{j+1} - u_{j-1}}{2\\Delta x} + \\nu \\,\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}.\n$$\n- Upwind advection (first-order upwind consistent with the sign of $a$) and second derivative diffusion,\n$$\n\\left.\\frac{\\mathrm{d}u_j}{\\mathrm{d}t}\\right|_{\\text{upwind}} =\n\\begin{cases}\n-a \\,\\frac{u_j - u_{j-1}}{\\Delta x} + \\nu \\,\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}, & a \\ge 0 \\\\[6pt]\n-a \\,\\frac{u_{j+1} - u_j}{\\Delta x} + \\nu \\,\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}, & a < 0\n\\end{cases}\n$$\nAdvance in time by the explicit forward Euler method with time step $\\Delta t$ until the final time $T$. For each simulation, define the discrete $L^2$ norm at time level $n$ by\n$$\n\\|u^n\\|_2 = \\left( \\Delta x \\sum_{j=0}^{N-1} \\left(u_j^n\\right)^2 \\right)^{1/2}.\n$$\nDeclare a run “stable” if the maximum norm over all time steps satisfies\n$$\n\\max_{0 \\le n \\le N_t} \\|u^n\\|_2 \\le G_{\\max} \\,\\|u^0\\|_2,\n$$\nand “unstable” otherwise, where $G_{\\max} = 5$ is fixed and $N_t$ is the number of time steps taken to reach $T$. Choose the time step from the minimum of advection and diffusion bounds determined by non-dimensional factors $C_{\\mathrm{adv}}$ and $C_{\\mathrm{diff}}$ as follows:\n$$\n\\Delta t =\n\\min\\!\\left(\n\\begin{array}{l}\nC_{\\mathrm{adv}} \\,\\frac{\\Delta x}{|a|} \\quad \\text{if } |a|>0, \\text{ otherwise } +\\infty \\\\[6pt]\nC_{\\mathrm{diff}} \\,\\frac{\\Delta x^2}{2\\nu} \\quad \\text{if } \\nu>0, \\text{ otherwise } +\\infty\n\\end{array}\n\\right).\n$$\nIf both $|a|=0$ and $\\nu=0$, this setup is not considered in the tests.\n\nYour task is to implement the above definitions and determine, for each test case below, whether the centered scheme and the upwind scheme are stable under the same $\\Delta t$ computed from the given parameters. The domain is nondimensional, and no physical units are required in the output.\n\nUse the following test suite, where each case specifies $(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T)$:\n- Test $1$: $(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T) = (\\,1.0,\\,0.001,\\,200,\\,0.5,\\,0.4,\\,0.5\\,)$.\n- Test $2$: $(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T) = (\\,20.0,\\,0.0001,\\,400,\\,0.8,\\,0.2,\\,0.2\\,)$.\n- Test $3$: $(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T) = (\\,0.0,\\,0.01,\\,100,\\,0.5,\\,0.4,\\,0.5\\,)$.\n- Test $4$: $(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T) = (\\,1.0,\\,0.0,\\,200,\\,0.99,\\,0.0,\\,0.5\\,)$.\n\nYour program must:\n- Use the same $\\Delta t$ for both centered and upwind schemes in each test case, computed exactly as defined above.\n- Integrate to the specified final time $T$ (if $\\Delta t$ does not divide $T$, take $N_t = \\lceil T/\\Delta t \\rceil$ and use a uniform time step of $T/N_t$).\n- For each test, return two boolean values in the order $\\big[$centered scheme stability, upwind scheme stability$\\big]$ based on the criterion with $G_{\\max} = 5$.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Concatenate the results from the four tests in the order of the tests, flattening the booleans into a single list. For example, the output format should be like\n$$\n[\\text{c}_1,\\text{u}_1,\\text{c}_2,\\text{u}_2,\\text{c}_3,\\text{u}_3,\\text{c}_4,\\text{u}_4],\n$$\nwhere $\\text{c}_k$ and $\\text{u}_k$ are the boolean stability outcomes for the centered and upwind schemes, respectively, in test $k$.", "solution": "The posed problem is subjected to validation and is found to be valid. It is scientifically grounded, well-posed, objective, and contains all necessary information for a unique, verifiable solution. We may therefore proceed with the derivation and implementation of the solution.\n\nThe problem requires the numerical solution of the one-dimensional linear advection-diffusion equation,\n$$\n\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = \\nu \\frac{\\partial^2 u}{\\partial x^2},\n$$\non the domain $x \\in [0,1]$ with periodic boundary conditions. The solution is to be obtained using the Method of Lines (MOL), where the spatial derivatives are discretized first, converting the partial differential equation (PDE) into a system of coupled ordinary differential equations (ODEs). This system is then integrated in time.\n\nFirst, we define the discrete spatial grid. The domain $[0,1]$ is discretized into $N$ uniform segments of length $\\Delta x = 1/N$. The grid points are $x_j = j\\Delta x$ for $j = 0, 1, \\dots, N-1$. The solution on this grid is represented by a vector $\\vec{u}(t)$ where the $j$-th component is $u_j(t) \\approx u(x_j, t)$. The periodic boundary condition implies $u_{j+N} = u_j$ for any integer $j$.\n\nThe MOL transforms the PDE into the form $\\frac{d\\vec{u}}{dt} = \\mathbf{L}\\vec{u}$, where $\\mathbf{L}$ is a matrix representing the discretized spatial operator. We are asked to evaluate two different discretizations for the advective term $\\frac{\\partial u}{\\partial x}$, while the diffusive term $\\frac{\\partial^2 u}{\\partial x^2}$ is consistently discretized using a standard second-order central difference.\n\nThe second-order central difference approximation for the second derivative is:\n$$\n\\left.\\frac{\\partial^2 u}{\\partial x^2}\\right|_{x_j} \\approx \\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}.\n$$\nThis operator is applied for both schemes.\n\nScheme 1: Centered Advection\nThe advective term is approximated using a second-order central difference:\n$$\n\\left.\\frac{\\partial u}{\\partial x}\\right|_{x_j} \\approx \\frac{u_{j+1} - u_{j-1}}{2\\Delta x}.\n$$\nCombining these, the semi-discrete system for the centered scheme is:\n$$\n\\frac{d u_j}{d t} = -a \\left(\\frac{u_{j+1} - u_{j-1}}{2\\Delta x}\\right) + \\nu \\left(\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}\\right).\n$$\n\nScheme 2: Upwind Advection\nThe advective term is approximated using a first-order upwind difference, the stencil of which depends on the sign of the advection speed $a$. This choice is made to introduce numerical dissipation that enhances stability.\nIf $a \\ge 0$, a backward difference is used:\n$$\n\\left.\\frac{\\partial u}{\\partial x}\\right|_{x_j} \\approx \\frac{u_j - u_{j-1}}{\\Delta x}.\n$$\nIf $a < 0$, a forward difference is used:\n$$\n\\left.\\frac{\\partial u}{\\partial x}\\right|_{x_j} \\approx \\frac{u_{j+1} - u_j}{\\Delta x}.\n$$\nThe corresponding semi-discrete system for the upwind scheme is thus:\n$$\n\\frac{d u_j}{d t} =\n\\begin{cases}\n-a \\left(\\frac{u_j - u_{j-1}}{\\Delta x}\\right) + \\nu \\left(\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}\\right), & a \\ge 0 \\\\\n-a \\left(\\frac{u_{j+1} - u_j}{\\Delta x}\\right) + \\nu \\left(\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}\\right), & a < 0\n\\end{cases}\n$$\n\nFor time integration, the explicit forward Euler method is specified. Given the solution vector $\\vec{u}^n$ at time $t_n$, the solution at the next time step $t_{n+1} = t_n + \\Delta t$ is computed as:\n$$\n\\vec{u}^{n+1} = \\vec{u}^n + \\Delta t \\cdot \\frac{d\\vec{u}}{dt}\\bigg|_{\\vec{u}=\\vec{u}^n}.\n$$\nThe time step $\\Delta t$ must be chosen carefully to ensure numerical stability. The forward Euler method is only conditionally stable. The problem provides a specific formula for a preliminary time step, $\\Delta t_{cfl}$, based on the Courant-Friedrichs-Lewy (CFL) conditions for advection and diffusion:\n$$\n\\Delta t_{cfl} = \\min\\left( C_{\\mathrm{adv}} \\frac{\\Delta x}{|a|}, \\; C_{\\mathrm{diff}} \\frac{\\Delta x^2}{2\\nu} \\right).\n$$\nThe terms are considered infinite if their denominators ($|a|$ or $\\nu$) are zero. To ensure the simulation ends exactly at time $T$, the number of steps is fixed as $N_t = \\lceil T/\\Delta t_{cfl} \\rceil$, and a uniform actual time step $\\Delta t = T/N_t$ is used for the integration. This ensures $\\Delta t \\le \\Delta t_{cfl}$, preserving the stability constraints.\n\nThe stability of each simulation run is assessed quantitatively. A run is declared \"stable\" if the maximum discrete $L^2$ norm observed over the entire simulation does not exceed a certain multiple of the initial norm. The discrete $L^2$ norm at time step $n$ is:\n$$\n\\|u^n\\|_2 = \\left( \\Delta x \\sum_{j=0}^{N-1} (u_j^n)^2 \\right)^{1/2}.\n$$\nThe stability criterion is:\n$$\n\\max_{0 \\le n \\le N_t} \\|u^n\\|_2 \\le G_{\\max} \\|u^0\\|_2,\n$$\nwhere the growth factor is given as $G_{\\max} = 5$. The initial condition is given by $u(x,0) = \\sin(2\\pi x) + 0.1 \\sin(16\\pi x)$, which is evaluated on the grid to provide the initial vector $\\vec{u}^0$.\n\nThe algorithmic procedure for each test case is as follows:\n1.  Set parameters $(a, \\nu, N, C_{\\mathrm{adv}}, C_{\\mathrm{diff}}, T)$.\n2.  Compute grid spacing $\\Delta x = 1/N$ and create the grid points $x_j$.\n3.  Generate the initial condition vector $\\vec{u}^0$ by evaluating $u(x_j, 0)$.\n4.  Calculate the initial norm $\\|u^0\\|_2$ and the stability threshold $G_{\\max} \\|u^0\\|_2$.\n5.  Calculate $\\Delta t_{cfl}$ and then the actual time step $\\Delta t = T/\\lceil T/\\Delta t_{cfl} \\rceil$.\n6.  For each scheme (centered and upwind):\n    a. Initialize the solution vector $\\vec{u} = \\vec{u}^0$ and set $\\text{max\\_norm} = \\|u^0\\|_2$.\n    b. Loop $N_t$ times:\n        i.   Compute the right-hand side vector $\\frac{d\\vec{u}}{dt}$ using the appropriate finite difference formulas.\n        ii.  Update the solution using the forward Euler step: $\\vec{u} \\leftarrow \\vec{u} + \\Delta t \\frac{d\\vec{u}}{dt}$.\n        iii. Calculate the current norm $\\|\\vec{u}\\|_2$ and update $\\text{max\\_norm}$ if necessary. If the solution becomes non-finite, $\\text{max\\_norm}$ becomes infinite.\n    c. Compare the final $\\text{max\\_norm}$ to the threshold to determine stability (True/False).\n7.  Collect the boolean stability results for both schemes and append them to a global list.\n\nThis procedure will be implemented for all provided test cases, and the final list of boolean results will be formatted as specified. The use of vectorized operations, particularly with periodic shifts, is efficient for implementing the finite differences on the periodic grid.", "answer": "```python\nimport numpy as np\nimport math\n\ndef get_rhs_calculator(a, nu, N, scheme):\n    \"\"\"\n    Returns a function that computes the right-hand side of the semi-discretized PDE.\n    This corresponds to the spatial operator applied to the solution vector u.\n    \"\"\"\n    dx = 1.0 / N\n    d2udx2_term_func = lambda u: (np.roll(u, -1) - 2 * u + np.roll(u, 1)) / (dx**2)\n\n    if scheme == 'centered':\n        def rhs_centered(u):\n            dudx_adv = (np.roll(u, -1) - np.roll(u, 1)) / (2 * dx)\n            return -a * dudx_adv + nu * d2udx2_term_func(u)\n        return rhs_centered\n    elif scheme == 'upwind':\n        def rhs_upwind(u):\n            if a >= 0:\n                dudx_adv = (u - np.roll(u, 1)) / dx\n            else:  # a < 0\n                dudx_adv = (np.roll(u, -1) - u) / dx\n            return -a * dudx_adv + nu * d2udx2_term_func(u)\n        return rhs_upwind\n    else:\n        raise ValueError(\"Unknown scheme type\")\n\ndef check_stability(params, scheme, G_max):\n    \"\"\"\n    Runs a single simulation for a given test case and scheme, then reports its stability.\n    \"\"\"\n    a, nu, N, C_adv, C_diff, T = params\n\n    # 1. Grid and Initial Condition\n    dx = 1.0 / N\n    x = np.arange(N, dtype=float) / N\n    u = np.sin(2 * np.pi * x) + 0.1 * np.sin(16 * np.pi * x)\n\n    # 2. Initial norm and stability threshold\n    norm_initial = np.sqrt(dx * np.sum(u**2))\n    if norm_initial == 0:\n        return True  # Trivial case: zero initial condition is always stable\n    max_norm = norm_initial\n\n    # 3. Time step calculation\n    dt_adv = C_adv * dx / abs(a) if abs(a) > 0 else float('inf')\n    dt_diff = C_diff * dx**2 / (2 * nu) if nu > 0 else float('inf')\n    dt_cfl = min(dt_adv, dt_diff)\n\n    if T == 0:\n        return True\n    if dt_cfl == float('inf'): # Corresponds to a=0 and nu=0 case, u(x,t) is constant.\n      return True\n\n    num_steps = math.ceil(T / dt_cfl)\n    dt = T / num_steps\n    \n    # 4. Get the appropriate RHS function for the scheme\n    rhs_calculator = get_rhs_calculator(a, nu, N, scheme)\n\n    # 5. Time integration loop\n    for _ in range(num_steps):\n        u = u + dt * rhs_calculator(u)\n        \n        current_norm = np.sqrt(dx * np.sum(u**2))\n        \n        if np.isnan(current_norm) or np.isinf(current_norm):\n            max_norm = float('inf')\n            break\n            \n        if current_norm > max_norm:\n            max_norm = current_norm\n            \n    # 6. Check stability criterion\n    return max_norm <= G_max * norm_initial\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the results.\n    \"\"\"\n    test_cases = [\n        # (a,      nu,       N,   C_adv, C_diff, T)\n        (1.0,    0.001,    200, 0.5,   0.4,    0.5),\n        (20.0,   0.0001,   400, 0.8,   0.2,    0.2),\n        (0.0,    0.01,     100, 0.5,   0.4,    0.5),\n        (1.0,    0.0,      200, 0.99,  0.0,    0.5),\n    ]\n\n    G_max = 5.0\n    results = []\n\n    for i, case in enumerate(test_cases):\n        is_stable_cen = check_stability(case, 'centered', G_max)\n        is_stable_upw = check_stability(case, 'upwind', G_max)\n        results.extend([is_stable_cen, is_stable_upw])\n\n    # Final print statement in the exact required format.\n    # str(True) -> 'True', str(False) -> 'False'\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2444647"}, {"introduction": "A hallmark of a robust numerical scheme is its ability to respect the fundamental conservation laws of the governing PDE, such as the conservation of mass or energy. This analytical practice explores the crucial concept of discrete conservation by asking you to examine three different spatial-discretization schemes for the linear advection equation [@problem_id:2444736]. Your task is to prove that, despite their different formulations, all three schemes perfectly conserve the total integrated quantity of the system on a periodic domain, a key property for ensuring the long-term stability and physical fidelity of a simulation.", "problem": "Consider the linear advection partial differential equation (PDE) $u_{t} + a\\,u_{x} = 0$ for a constant advection speed $a \\neq 0$ on a one-dimensional periodic domain $[0,L]$. Let $N \\geq 3$ be an integer, let $\\Delta x = L/N$, and define grid points $x_{j} = j\\,\\Delta x$ for $j=0,1,\\dots,N-1$, with periodic indexing $u_{j+N}(t) = u_{j}(t)$ for all $j$ and $t \\geq 0$. Assume all quantities are nondimensional.\n\nUsing the method of lines, approximate $u(x_{j},t)$ by $u_{j}(t)$ and consider the following three spatial semi-discretizations of $u_{x}$:\n\n1. Second-order centered difference (non-conservative form): for each $j$,\n$${\\frac{d u_{j}}{dt}} = -\\,a\\,\\frac{u_{j+1} - u_{j-1}}{2\\,\\Delta x}.$$\n\n2. First-order upwind scheme for $a>0$ written in conservative flux-difference form with numerical flux $F_{j+\\frac{1}{2}} = a\\,u_{j}$: for each $j$,\n$${\\frac{d u_{j}}{dt}} = -\\,\\frac{F_{j+\\frac{1}{2}} - F_{j-\\frac{1}{2}}}{\\Delta x} = -\\,\\frac{a\\,u_{j} - a\\,u_{j-1}}{\\Delta x}.$$\n\n3. Lax–Friedrichs flux-difference form with parameter $\\lambda > 0$ and numerical flux $F_{j+\\frac{1}{2}} = \\frac{a}{2}\\left(u_{j} + u_{j+1}\\right) - \\frac{\\lambda}{2}\\left(u_{j+1} - u_{j}\\right)$: for each $j$,\n$${\\frac{d u_{j}}{dt}} = -\\,\\frac{F_{j+\\frac{1}{2}} - F_{j-\\frac{1}{2}}}{\\Delta x}.$$\n\nDefine the discrete total quantity (discrete mass)\n$$M_{h}(t) = \\Delta x \\sum_{j=0}^{N-1} u_{j}(t).$$\n\nCompute the exact expression for $\\frac{d}{dt} M_{h}(t)$ implied by each of the three semi-discretizations above on the periodic grid described, and state their common value as a single exact quantity. Your final answer must be a single real number or a single closed-form analytic expression with no units. No rounding is required.", "solution": "The problem requires the computation of the time derivative of the discrete total quantity, or mass, $M_{h}(t)$, for three different semi-discretizations of the linear advection equation $u_{t} + a\\,u_{x} = 0$ on a periodic domain.\n\nThe discrete total quantity is defined as:\n$$M_{h}(t) = \\Delta x \\sum_{j=0}^{N-1} u_{j}(t)$$\nIts time derivative is found by differentiating under the summation sign, as the sum is finite and $\\Delta x$ is a constant:\n$$\\frac{d M_{h}}{dt} = \\frac{d}{dt} \\left( \\Delta x \\sum_{j=0}^{N-1} u_{j}(t) \\right) = \\Delta x \\sum_{j=0}^{N-1} \\frac{d u_{j}}{dt}$$\nWe must evaluate this expression for each of the three given semi-discretization schemes, utilizing the periodic boundary condition $u_{j+N}(t) = u_{j}(t)$ for any integer $j$. This periodicity implies that any grid function $Q_j$ that depends on the solution $u_j$ is also periodic with period $N$, so $Q_{j+N} = Q_j$. A direct consequence for sums over the grid is that for any integer shift $k$, the sum remains invariant:\n$$\\sum_{j=0}^{N-1} u_{j+k} = \\sum_{j=0}^{N-1} u_{j}$$\nThis is because the set of indices $\\{k, k+1, \\dots, k+N-1\\}$ modulo $N$ is identical to the set $\\{0, 1, \\dots, N-1\\}$, so the sum is merely a reordering of the same terms.\n\nCase 1: Second-order centered difference\nThe semi-discretization is given by:\n$$\\frac{d u_{j}}{dt} = -a \\frac{u_{j+1} - u_{j-1}}{2\\,\\Delta x}$$\nSubstituting this into the expression for $\\frac{d M_{h}}{dt}$:\n$$\\frac{d M_{h}}{dt} = \\Delta x \\sum_{j=0}^{N-1} \\left( -a \\frac{u_{j+1} - u_{j-1}}{2\\,\\Delta x} \\right) = -\\frac{a}{2} \\sum_{j=0}^{N-1} (u_{j+1} - u_{j-1})$$\nWe can split the sum into two parts:\n$$\\frac{d M_{h}}{dt} = -\\frac{a}{2} \\left( \\sum_{j=0}^{N-1} u_{j+1} - \\sum_{j=0}^{N-1} u_{j-1} \\right)$$\nUsing the property of sums over a periodic grid mentioned above, we have:\n$$\\sum_{j=0}^{N-1} u_{j+1} = \\sum_{j=0}^{N-1} u_{j} \\quad \\text{and} \\quad \\sum_{j=0}^{N-1} u_{j-1} = \\sum_{j=0}^{N-1} u_{j}$$\nTherefore, the two sums are equal, and their difference is zero.\n$$\\frac{d M_{h}}{dt} = -\\frac{a}{2} \\left( \\sum_{j=0}^{N-1} u_{j} - \\sum_{j=0}^{N-1} u_{j} \\right) = -\\frac{a}{2} \\times 0 = 0$$\n\nCase 2: First-order upwind scheme (for $a>0$)\nThe semi-discretization is given in conservative form:\n$$\\frac{d u_{j}}{dt} = -\\frac{F_{j+\\frac{1}{2}} - F_{j-\\frac{1}{2}}}{\\Delta x} = -\\frac{a\\,u_{j} - a\\,u_{j-1}}{\\Delta x}$$\nwhere the numerical flux is identified as $F_{j+\\frac{1}{2}} = a\\,u_{j}$. Let us verify the conservative property directly without relying on the flux notation.\n$$\\frac{d M_{h}}{dt} = \\Delta x \\sum_{j=0}^{N-1} \\left( -\\frac{a\\,u_{j} - a\\,u_{j-1}}{\\Delta x} \\right) = -a \\sum_{j=0}^{N-1} (u_{j} - u_{j-1})$$\nSplitting the sum:\n$$\\frac{d M_{h}}{dt} = -a \\left( \\sum_{j=0}^{N-1} u_{j} - \\sum_{j=0}^{N-1} u_{j-1} \\right)$$\nAs in the first case, the periodicity of the grid implies $\\sum_{j=0}^{N-1} u_{j-1} = \\sum_{j=0}^{N-1} u_{j}$.\n$$\\frac{d M_{h}}{dt} = -a \\left( \\sum_{j=0}^{N-1} u_{j} - \\sum_{j=0}^{N-1} u_{j} \\right) = -a \\times 0 = 0$$\n\nCase 3: Lax–Friedrichs flux-difference form\nThe semi-discretization is given explicitly in conservative form:\n$$\\frac{d u_{j}}{dt} = -\\frac{F_{j+\\frac{1}{2}} - F_{j-\\frac{1}{2}}}{\\Delta x}$$\nwith the numerical flux $F_{j+\\frac{1}{2}} = \\frac{a}{2}\\left(u_{j} + u_{j+1}\\right) - \\frac{\\lambda}{2}\\left(u_{j+1} - u_{j}\\right)$.\nFor any scheme in this form, the rate of change of the total mass is:\n$$\\frac{d M_{h}}{dt} = \\Delta x \\sum_{j=0}^{N-1} \\left( -\\frac{F_{j+\\frac{1}{2}} - F_{j-\\frac{1}{2}}}{\\Delta x} \\right) = -\\sum_{j=0}^{N-1} (F_{j+\\frac{1}{2}} - F_{j-\\frac{1}{2}})$$\nThis is a telescoping sum over a periodic domain. Let us define an auxiliary grid function $G_j = F_{j-\\frac{1}{2}}$. The sum becomes $-\\sum_{j=0}^{N-1} (G_{j+1} - G_j)$. The sum evaluates to:\n$$\\sum_{j=0}^{N-1} (G_{j+1} - G_j) = (G_1 - G_0) + (G_2 - G_1) + \\dots + (G_N - G_{N-1}) = G_N - G_0$$\nSubstituting back the definition of $G_j$:\n$$\\frac{d M_{h}}{dt} = -(G_N - G_0) = -(F_{N-\\frac{1}{2}} - F_{-\\frac{1}{2}})$$\nThe numerical flux $F_{j+\\frac{1}{2}}$ is a function of $u_j$ and $u_{j+1}$, i.e., $F_{j+\\frac{1}{2}} = F(u_j, u_{j+1})$. Due to the periodicity of the solution $u_{j+N}=u_j$, the numerical flux must also be periodic in its index, i.e., $F_{j+N+\\frac{1}{2}} = F(u_{j+N}, u_{j+N+1}) = F(u_j, u_{j+1}) = F_{j+\\frac{1}{2}}$.\nWe apply this periodicity property to relate $F_{N-\\frac{1}{2}}$ and $F_{-\\frac{1}{2}}$. Setting $j = -1$ in the periodicity relation gives $F_{-1+N+\\frac{1}{2}} = F_{-1+\\frac{1}{2}}$, which simplifies to $F_{N-\\frac{1}{2}} = F_{-\\frac{1}{2}}$.\nTherefore, the difference is zero:\n$$\\frac{d M_{h}}{dt} = -(F_{N-\\frac{1}{2}} - F_{N-\\frac{1}{2}}) = 0$$\n\nIn conclusion, for all three semi-discretization schemes on a periodic domain, the time derivative of the discrete total mass is exactly zero. This demonstrates that all three schemes are conservative in the discrete sense, mimicking the conservation property of the original partial differential equation $\\frac{d}{dt}\\int_0^L u \\, dx = 0$. The common value for $\\frac{d}{dt} M_{h}(t)$ is $0$.", "answer": "$$\\boxed{0}$$", "id": "2444736"}]}