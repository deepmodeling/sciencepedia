{"hands_on_practices": [{"introduction": "Understanding numerical stability is paramount for any practitioner of computational methods. This exercise moves beyond simply knowing the stability condition for the Forward-Time Central-Space (FTCS) scheme and asks you to analytically pinpoint the precise cause of its failure. By calculating the specific wavenumber that experiences the most rapid growth [@problem_id:2392558], you will gain a concrete understanding of why high-frequency, grid-scale oscillations are the characteristic signature of this common instability.", "problem": "Consider the one-dimensional diffusion equation $u_{t}=\\alpha u_{xx}$ with constant diffusivity $\\alpha>0$ on a spatially periodic domain of length $L>0$. Discretize space with an even number $N$ of uniformly spaced grid points $x_{j}=j\\,\\Delta x$ for $j\\in\\{0,1,\\ldots,N-1\\}$, where $\\Delta x=L/N$, and advance in time with step $\\Delta t>0$ using the Forward Time, Central Space (FTCS) scheme\n$$\nu_{j}^{n+1}=u_{j}^{n}+\\frac{\\alpha\\,\\Delta t}{\\Delta x^{2}}\\left(u_{j+1}^{n}-2\\,u_{j}^{n}+u_{j-1}^{n}\\right),\n$$\nwith periodic boundary conditions. Suppose the time step and grid spacing are chosen such that $\\alpha\\,\\Delta t/\\Delta x^{2}>\\tfrac{1}{2}$, so the scheme is unstable.\n\nAmong all discrete spatial Fourier modes permitted by the grid and periodicity, identify the single wavenumber $\\kappa^{\\star}$ (in radians per meter) whose mode experiences the largest one-step amplification in magnitude under this scheme. Report $\\kappa^{\\star}$ chosen from the principal interval $(-\\pi/\\Delta x,\\pi/\\Delta x]$. Express your final answer as a closed-form analytic expression in terms of $\\Delta x$. No rounding is required, and express the wavenumber in radians per meter.", "solution": "The problem asks to identify the wavenumber $\\kappa^{\\star}$ of the spatial Fourier mode that experiences the largest amplification in magnitude for the Forward Time, Central Space (FTCS) scheme applied to the one-dimensional diffusion equation, under the condition of instability.\n\nThe one-dimensional diffusion equation is given by\n$$u_{t} = \\alpha u_{xx}$$\nwhere $u(x,t)$ is the diffusing quantity, $t$ is time, $x$ is the spatial coordinate, and $\\alpha > 0$ is the constant diffusivity. The domain is periodic with length $L$.\n\nThe FTCS discretization is\n$$u_{j}^{n+1} = u_{j}^{n} + \\frac{\\alpha \\Delta t}{\\Delta x^{2}}(u_{j+1}^{n} - 2u_{j}^{n} + u_{j-1}^{n})$$\nwhere $u_j^n \\approx u(j\\Delta x, n\\Delta t)$, $\\Delta x = L/N$ is the spatial step with $N$ being an even integer, and $\\Delta t$ is the time step. Let us define the diffusion number $r = \\frac{\\alpha \\Delta t}{\\Delta x^{2}}$. The problem states that the scheme is unstable, which corresponds to the condition $r > \\frac{1}{2}$.\n\nTo analyze the stability of the scheme, we use the von Neumann stability analysis. We consider a single Fourier mode as a solution:\n$$u_{j}^{n} = \\hat{u}^{n}(\\kappa) e^{i \\kappa x_{j}} = \\hat{u}^{n}(\\kappa) e^{i \\kappa j \\Delta x}$$\nwhere $\\kappa$ is the wavenumber and $\\hat{u}^{n}(\\kappa)$ is the amplitude of the mode at time step $n$. The amplification of the mode from one time step to the next is given by the amplification factor $G(\\kappa) = \\frac{\\hat{u}^{n+1}(\\kappa)}{\\hat{u}^{n}(\\kappa)}$.\n\nSubstituting the Fourier mode into the FTCS scheme:\n$$\\hat{u}^{n+1}(\\kappa) e^{i \\kappa j \\Delta x} = \\hat{u}^{n}(\\kappa) e^{i \\kappa j \\Delta x} + r \\left( \\hat{u}^{n}(\\kappa) e^{i \\kappa (j+1) \\Delta x} - 2\\hat{u}^{n}(\\kappa) e^{i \\kappa j \\Delta x} + \\hat{u}^{n}(\\kappa) e^{i \\kappa (j-1) \\Delta x} \\right)$$\nDividing by $\\hat{u}^{n}(\\kappa) e^{i \\kappa j \\Delta x}$ (assuming a non-trivial mode), we obtain the amplification factor $G(\\kappa)$:\n$$G(\\kappa) = 1 + r (e^{i \\kappa \\Delta x} - 2 + e^{-i \\kappa \\Delta x})$$\nUsing Euler's identity $e^{i\\theta} + e^{-i\\theta} = 2\\cos(\\theta)$, we can simplify the expression:\n$$G(\\kappa) = 1 + r (2\\cos(\\kappa \\Delta x) - 2) = 1 - 2r(1 - \\cos(\\kappa \\Delta x))$$\nUsing the half-angle trigonometric identity $1 - \\cos(\\theta) = 2\\sin^2(\\frac{\\theta}{2})$, the amplification factor becomes:\n$$G(\\kappa) = 1 - 4r \\sin^2\\left(\\frac{\\kappa \\Delta x}{2}\\right)$$\nWe are tasked with finding the wavenumber $\\kappa^{\\star}$ that maximizes the magnitude of the amplification factor, $|G(\\kappa)|$, for wavenumbers in the principal interval $\\kappa \\in (-\\pi/\\Delta x, \\pi/\\Delta x]$. Since $\\kappa$ is a real number, $G(\\kappa)$ is also a real number. Therefore, we seek to maximize $|G(\\kappa)| = \\left|1 - 4r \\sin^2\\left(\\frac{\\kappa \\Delta x}{2}\\right)\\right|$.\n\nLet the variable $\\theta = \\frac{\\kappa \\Delta x}{2}$. As $\\kappa$ ranges over $(-\\pi/\\Delta x, \\pi/\\Delta x]$, $\\theta$ ranges over $(-\\pi/2, \\pi/2]$.\nLet $S = \\sin^2(\\theta)$. For $\\theta \\in (-\\pi/2, \\pi/2]$, the values of $\\sin(\\theta)$ range from just above $-1$ to $1$, so $S = \\sin^2(\\theta)$ ranges over the interval $[0, 1]$. Specifically, $S=0$ when $\\theta=0$ (i.e. $\\kappa=0$), and $S=1$ when $\\theta=\\pm\\pi/2$ (i.e. $\\kappa=\\pm\\pi/\\Delta x$). The value $\\theta=\\pi/2$ is included in the domain.\n\nThe problem reduces to finding the maximum of the function $f(S) = |1 - 4rS|$ over the interval $S \\in [0, 1]$, with the given condition $r > \\frac{1}{2}$.\nThe function $g(S) = 1 - 4rS$ is linear in $S$. The maximum value of its magnitude, $|g(S)|$, on a closed interval must be attained at one of the endpoints of the interval.\nLet us evaluate $f(S)$ at the endpoints $S=0$ and $S=1$:\n1. At $S=0$: $f(0) = |1 - 4r(0)| = |1| = 1$.\n2. At $S=1$: $f(1) = |1 - 4r(1)| = |1 - 4r|$.\nGiven that $r > \\frac{1}{2}$, it follows that $4r > 2$, and thus $1 - 4r < 1 - 2 = -1$.\nTherefore, $|1 - 4r| = -(1 - 4r) = 4r - 1$.\nComparing the two values, since $r > \\frac{1}{2}$, we have $4r - 1 > 4(\\frac{1}{2}) - 1 = 2-1 = 1$.\nThus, the maximum magnitude of the amplification factor is $4r - 1$, and it occurs when $S=1$.\n\nThe wavenumber $\\kappa^{\\star}$ we seek is the one for which $S = \\sin^2\\left(\\frac{\\kappa^{\\star} \\Delta x}{2}\\right) = 1$.\nThis implies $\\sin\\left(\\frac{\\kappa^{\\star} \\Delta x}{2}\\right) = \\pm 1$.\nThe general solution for this is $\\frac{\\kappa^{\\star} \\Delta x}{2} = \\frac{\\pi}{2} + n\\pi$ for any integer $n$.\nSolving for $\\kappa^{\\star}$:\n$$\\kappa^{\\star} \\Delta x = \\pi + 2n\\pi = (2n+1)\\pi$$\n$$\\kappa^{\\star} = \\frac{(2n+1)\\pi}{\\Delta x}$$\nWe must select the value of $\\kappa^{\\star}$ that lies within the specified principal interval $\\kappa^{\\star} \\in (-\\pi/\\Delta x, \\pi/\\Delta x]$.\n- If $n=0$, $\\kappa^{\\star} = \\frac{\\pi}{\\Delta x}$. This value is in the interval, as $\\pi/\\Delta x \\in (-\\pi/\\Delta x, \\pi/\\Delta x]$.\n- If $n=-1$, $\\kappa^{\\star} = \\frac{-\\pi}{\\Delta x}$. This value is not in the interval, because the lower bound is open.\n- For any other integer $n$, the value of $\\kappa^{\\star}$ will lie outside the interval.\n\nTherefore, the unique wavenumber in the given interval that corresponds to the maximum amplification is $\\kappa^{\\star} = \\frac{\\pi}{\\Delta x}$. This wavenumber corresponds to the highest frequency mode that can be represented on the grid, with a wavelength of $\\lambda = 2\\Delta x$. This is the Nyquist frequency of the spatial grid. This mode has the pattern $u_j \\propto (-1)^j$, which is known to be the most unstable mode for the FTCS scheme when $r > 1/2$.\nThe problem states that the grid has an even number of points, $N$. The set of discrete wavenumbers supported by such a grid is $\\kappa_m = \\frac{2\\pi m}{N\\Delta x}$ for $m \\in \\{-N/2+1, \\dots, N/2\\}$. The wavenumber $\\kappa^{\\star} = \\frac{\\pi}{\\Delta x}$ is part of this discrete set, corresponding to the index $m=N/2$. Thus, our solution is consistent with the discrete nature of the problem.\nThe final answer is the expression for this wavenumber.", "answer": "$$\\boxed{\\frac{\\pi}{\\Delta x}}$$", "id": "2392558"}, {"introduction": "While instability is a catastrophic failure, even stable schemes can introduce non-physical artifacts. This practice explores the subtle but critical concept of numerical diffusion, where the algorithm may artificially smooth the solution beyond what is physically accurate. By comparing the behavior of an explicit (FTCS) and an unconditionally stable implicit (BTCS) scheme in response to a sharp initial step [@problem_id:2483560], you will learn to quantify this effect and appreciate the trade-offs between different time-integration strategies.", "problem": "A one-dimensional homogeneous solid with thermal diffusivity $\\alpha$ obeys the transient heat conduction equation $\\partial T/\\partial t = \\alpha \\,\\partial^{2}T/\\partial x^{2}$. Consider a uniform infinite grid with nodes $x_{i} = i\\,\\Delta x$ and a uniform time step $\\Delta t$. Let $r \\equiv \\alpha\\,\\Delta t/\\Delta x^{2}$. The initial condition is a dimensionless step (Heaviside) profile located midway between nodes $i=0$ and $i=1$:\n$$\nu_{i}^{0} =\n\\begin{cases}\n0, & i \\leq 0,\\\\\n1, & i \\geq 1,\n\\end{cases}\n$$\nwhere $u = (T - T_{\\min})/(T_{\\max} - T_{\\min})$ so that the left half-space is $0$ and the right half-space is $1$ at $t=0$. Assume the far-field remains at these constant states for all time.\n\nUsing the standard Forward-Time Central-Space (FTCS) and Backward-Time Central-Space (BTCS) finite difference schemes for the heat equation on this grid, perform the following, starting from first principles and standard discretization procedures:\n\n1) Determine the first-step nodal values $u_{0}^{1}$ and $u_{1}^{1}$ produced by FTCS and by BTCS, and from these compute the first-step jump across the interface,\n$$\nJ^{(1)} \\equiv u_{1}^{1} - u_{0}^{1}.\n$$\n\n2) Define the first-step numerical smoothing as the reduction of the jump,\n$$\nS^{(1)} \\equiv 1 - J^{(1)}.\n$$\nIntroduce an equivalent diffusion coefficient $\\beta$ by requiring that this first-step smoothing be representable by a purely diffusive two-node update with coefficient $\\beta$, namely $S^{(1)} = 2\\,\\beta\\,\\Delta t/\\Delta x^{2}$. Using this definition, find the equivalent diffusion coefficients for FTCS and BTCS, denoted $\\beta_{\\mathrm{FTCS}}$ and $\\beta_{\\mathrm{BTCS}}$.\n\n3) Define the BTCS numerical diffusion increment relative to the physical diffusivity as\n$$\nD_{\\mathrm{num}} \\equiv \\beta_{\\mathrm{BTCS}} - \\alpha.\n$$\nProvide a closed-form analytic expression for $D_{\\mathrm{num}}$ in terms of $\\alpha$ and $r$ (you may use $r=\\alpha\\,\\Delta t/\\Delta x^{2}$). No numerical evaluation or rounding is required. The final answer must be a single analytic expression.", "solution": "The problem requires a step-by-step derivation of a quantity representing numerical diffusion for the Backward-Time Central-Space (BTCS) scheme, based on a specific set of definitions. We must first validate the problem. The problem is scientifically grounded in the field of numerical heat transfer, is well-posed with all necessary information provided, and is objectively formulated. No inconsistencies, contradictions, or invalid premises are present. We may therefore proceed with the solution.\n\nThe one-dimensional heat conduction equation for the dimensionless temperature $u$ is given by:\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}\n$$\nwhere $\\alpha$ is the thermal diffusivity. We are given a uniform grid $x_i = i\\,\\Delta x$ and a uniform time step $\\Delta t$. The dimensionless parameter $r$ is defined as $r \\equiv \\alpha\\,\\Delta t/\\Delta x^2$. The temperature at node $i$ and time step $n$ is denoted by $u_i^n$.\n\nThe initial condition is a step function:\n$$\nu_i^0 =\n\\begin{cases}\n0, & i \\leq 0,\\\\\n1, & i \\geq 1,\n\\end{cases}\n$$\nThe initial jump across the interface between nodes $i=0$ and $i=1$ is $u_1^0 - u_0^0 = 1-0 = 1$.\n\nFirst, we write the finite difference schemes.\n\nThe Forward-Time Central-Space (FTCS) scheme is explicit:\n$$\n\\frac{u_i^{n+1} - u_i^n}{\\Delta t} = \\alpha \\frac{u_{i+1}^n - 2u_i^n + u_{i-1}^n}{\\Delta x^2}\n$$\n$$\nu_i^{n+1} = u_i^n + r (u_{i+1}^n - 2u_i^n + u_{i-1}^n)\n$$\n\nThe Backward-Time Central-Space (BTCS) scheme is implicit:\n$$\n\\frac{u_i^{n+1} - u_i^n}{\\Delta t} = \\alpha \\frac{u_{i+1}^{n+1} - 2u_i^{n+1} + u_{i-1}^{n+1}}{\\Delta x^2}\n$$\n$$\n-r u_{i-1}^{n+1} + (1+2r) u_i^{n+1} - r u_{i+1}^{n+1} = u_i^n\n$$\n\nNow we perform the tasks specified in the problem.\n\n**Part 1: First-step nodal values and jump**\n\nFor the FTCS scheme, we compute the nodal values at the first time step ($n=1$) using the initial conditions ($n=0$):\nFor node $i=0$:\n$$\nu_0^1 = u_0^0 + r(u_1^0 - 2u_0^0 + u_{-1}^0) = 0 + r(1 - 2(0) + 0) = r\n$$\nFor node $i=1$:\n$$\nu_1^1 = u_1^0 + r(u_2^0 - 2u_1^0 + u_0^0) = 1 + r(1 - 2(1) + 0) = 1 - r\n$$\nThe first-step jump for FTCS is:\n$$\nJ_{\\mathrm{FTCS}}^{(1)} = u_1^1 - u_0^1 = (1-r) - r = 1 - 2r\n$$\n\nFor the BTCS scheme, we must solve a system of linear equations for the unknown values $u_i^1$. For an infinite domain with the given step-function source term $u_i^0$, the solution can be found using the discrete Green's function for the infinite tridiagonal system. The solution for the new nodal values $u_i^1$ in terms of the initial values $u_j^0$ is given by the convolution $u_i^1 = \\sum_{j=-\\infty}^{\\infty} G_{i-j} u_j^0$. Since $u_j^0 = 1$ for $j \\ge 1$ and $u_j^0 = 0$ for $j \\le 0$, this sum becomes $u_i^1 = \\sum_{j=1}^{\\infty} G_{i-j}$. The Green's function (the inverse of the BTCS operator) is $G_k = \\frac{\\lambda_s^{|k|}}{\\sqrt{1+4r}}$, where $\\lambda_s = \\frac{1+2r - \\sqrt{1+4r}}{2r}$ is the stable root of the characteristic polynomial $r\\lambda^2 - (1+2r)\\lambda + r=0$.\n\nWe calculate $u_0^1$ and $u_1^1$:\n$$\nu_0^1 = \\sum_{j=1}^{\\infty} G_{-j} = \\sum_{j=1}^{\\infty} \\frac{\\lambda_s^j}{\\sqrt{1+4r}} = \\frac{1}{\\sqrt{1+4r}} \\left( \\frac{\\lambda_s}{1-\\lambda_s} \\right)\n$$\nThe geometric series sum is $\\frac{\\lambda_s}{1-\\lambda_s} = \\frac{\\sqrt{1+4r}-1}{2}$. Thus,\n$$\nu_0^1 = \\frac{1}{\\sqrt{1+4r}} \\frac{\\sqrt{1+4r}-1}{2} = \\frac{1}{2}\\left(1 - \\frac{1}{\\sqrt{1+4r}}\\right)\n$$\nSimilarly for $u_1^1$:\n$$\nu_1^1 = \\sum_{j=1}^{\\infty} G_{1-j} = \\sum_{k=0}^{\\infty} G_{-k} = \\sum_{k=0}^{\\infty} \\frac{\\lambda_s^k}{\\sqrt{1+4r}} = \\frac{1}{\\sqrt{1+4r}} \\left( \\frac{1}{1-\\lambda_s} \\right)\n$$\nThe sum is $\\frac{1}{1-\\lambda_s} = \\frac{\\sqrt{1+4r}+1}{2}$. Thus,\n$$\nu_1^1 = \\frac{1}{\\sqrt{1+4r}} \\frac{\\sqrt{1+4r}+1}{2} = \\frac{1}{2}\\left(1 + \\frac{1}{\\sqrt{1+4r}}\\right)\n$$\nThe first-step jump for BTCS is:\n$$\nJ_{\\mathrm{BTCS}}^{(1)} = u_1^1 - u_0^1 = \\frac{1}{2}\\left(1 + \\frac{1}{\\sqrt{1+4r}}\\right) - \\frac{1}{2}\\left(1 - \\frac{1}{\\sqrt{1+4r}}\\right) = \\frac{1}{\\sqrt{1+4r}}\n$$\n\n**Part 2: Numerical smoothing and equivalent diffusion coefficient**\n\nThe numerical smoothing is defined as $S^{(1)} \\equiv 1 - J^{(1)}$.\nFor FTCS:\n$$\nS_{\\mathrm{FTCS}}^{(1)} = 1 - (1 - 2r) = 2r\n$$\nFor BTCS:\n$$\nS_{\\mathrm{BTCS}}^{(1)} = 1 - \\frac{1}{\\sqrt{1+4r}}\n$$\nThe equivalent diffusion coefficient $\\beta$ is defined by $S^{(1)} = 2 \\beta \\frac{\\Delta t}{\\Delta x^2}$.\n\nFor FTCS, we have:\n$$\n2r = 2 \\beta_{\\mathrm{FTCS}} \\frac{\\Delta t}{\\Delta x^2}\n$$\nSubstituting $r=\\alpha \\frac{\\Delta t}{\\Delta x^2}$:\n$$\n2\\alpha \\frac{\\Delta t}{\\Delta x^2} = 2 \\beta_{\\mathrm{FTCS}} \\frac{\\Delta t}{\\Delta x^2} \\implies \\beta_{\\mathrm{FTCS}} = \\alpha\n$$\nThis indicates that, by this specific measure, the FTCS scheme exhibits no additional diffusion beyond the physical one.\n\nFor BTCS, we have:\n$$\n1 - \\frac{1}{\\sqrt{1+4r}} = 2 \\beta_{\\mathrm{BTCS}} \\frac{\\Delta t}{\\Delta x^2}\n$$\nSolving for $\\beta_{\\mathrm{BTCS}}$:\n$$\n\\beta_{\\mathrm{BTCS}} = \\frac{\\Delta x^2}{2\\Delta t} \\left(1 - \\frac{1}{\\sqrt{1+4r}}\\right)\n$$\nUsing the relation $\\frac{\\Delta x^2}{\\Delta t} = \\frac{\\alpha}{r}$:\n$$\n\\beta_{\\mathrm{BTCS}} = \\frac{\\alpha}{2r} \\left(1 - \\frac{1}{\\sqrt{1+4r}}\\right)\n$$\n\n**Part 3: BTCS numerical diffusion increment**\n\nThe numerical diffusion increment $D_{\\mathrm{num}}$ is defined as $D_{\\mathrm{num}} \\equiv \\beta_{\\mathrm{BTCS}} - \\alpha$.\nSubstituting the expression for $\\beta_{\\mathrm{BTCS}}$:\n$$\nD_{\\mathrm{num}} = \\frac{\\alpha}{2r} \\left(1 - \\frac{1}{\\sqrt{1+4r}}\\right) - \\alpha = \\alpha \\left[ \\frac{1}{2r} \\left(1 - \\frac{1}{\\sqrt{1+4r}}\\right) - 1 \\right]\n$$\nTo simplify the expression for $\\beta_{\\mathrm{BTCS}}$, we algebraicly manipulate the term in the parenthesis:\n$$\n\\frac{1}{2r} \\left(\\frac{\\sqrt{1+4r}-1}{\\sqrt{1+4r}}\\right) = \\frac{1}{2r} \\left(\\frac{(\\sqrt{1+4r}-1)(\\sqrt{1+4r}+1)}{\\sqrt{1+4r}(\\sqrt{1+4r}+1)}\\right) = \\frac{1}{2r} \\left(\\frac{1+4r-1}{1+4r+\\sqrt{1+4r}}\\right) = \\frac{4r}{2r(1+4r+\\sqrt{1+4r})} = \\frac{2}{1+4r+\\sqrt{1+4r}}\n$$\nSo, we have a simplified expression for $\\beta_{\\mathrm{BTCS}}$:\n$$\n\\beta_{\\mathrm{BTCS}} = \\alpha \\left( \\frac{2}{1+4r+\\sqrt{1+4r}} \\right)\n$$\nNow we compute $D_{\\mathrm{num}}$:\n$$\nD_{\\mathrm{num}} = \\beta_{\\mathrm{BTCS}} - \\alpha = \\alpha \\left( \\frac{2}{1+4r+\\sqrt{1+4r}} - 1 \\right)\n$$\nCombining the terms inside the parenthesis over a common denominator:\n$$\nD_{\\mathrm{num}} = \\alpha \\left( \\frac{2 - (1+4r+\\sqrt{1+4r})}{1+4r+\\sqrt{1+4r}} \\right) = \\alpha \\left( \\frac{1 - 4r - \\sqrt{1+4r}}{1+4r+\\sqrt{1+4r}} \\right)\n$$\nThis is the required closed-form analytic expression for $D_{\\mathrm{num}}$ in terms of $\\alpha$ and $r$.", "answer": "$$\\boxed{\\alpha \\left( \\frac{1 - 4r - \\sqrt{1+4r}}{1+4r+\\sqrt{1+4r}} \\right)}$$", "id": "2483560"}, {"introduction": "The ultimate goal of learning numerical methods is to solve problems that often involve complex geometries. This capstone exercise [@problem_id:2392562] challenges you to build a complete two-dimensional finite difference solver for a steady-state diffusion problem governed by Laplace's equation. You will translate theory into practice by handling boundary conditions on an irregular internal surface, assembling a large sparse linear system, and verifying your code's accuracy against a manufactured solution.", "problem": "Consider the steady diffusion of a scalar field $u(x,y)$ with constant diffusivity $k$ in a two-dimensional domain $\\Omega$ that is a square with an internal circular hole. Starting from the conservation of flux and Fick's law, the governing Partial Differential Equation (PDE) for steady diffusion with no volumetric sources is\n$$\n-\\nabla \\cdot (k \\nabla u) = 0 \\quad \\text{in } \\Omega \\setminus \\mathcal{H},\n$$\nwhere $\\mathcal{H}$ is the interior of the hole. On both the external square boundary $\\partial \\Omega$ and the internal boundary $\\partial \\mathcal{H}$, impose Dirichlet boundary conditions $u=g(x,y)$, where $g(x,y)$ is prescribed. For numerical verification, use the method of manufactured solutions with the exact solution\n$$\nu^{\\star}(x,y) = e^{x}\\cos(y),\n$$\nand set $k=1$. Then the source term compatible with $u^{\\star}(x,y)$ satisfies\n$$\n-\\nabla \\cdot (k \\nabla u^{\\star}) = 0,\n$$\nso the PDE remains homogeneous inside $\\Omega \\setminus \\mathcal{H}$ and the Dirichlet data are $u=g=u^{\\star}$ on both boundaries. Discretize $\\Omega=[-1,1]\\times[-1,1]$ with a uniform Cartesian grid of $N\\times N$ nodes, where $N$ is a given integer greater than or equal to $5$, and grid spacing $h = \\frac{2}{N-1}$. Let the node coordinates be $x_i=-1+ih$ and $y_j=-1+jh$ for $i,j\\in\\{0,1,\\dots,N-1\\}$. Define the circular hole by its center $(x_c,y_c)$ and radius $r$. The internal boundary is to be handled as follows:\n- Mark as hole-interior every grid node $(i,j)$ whose center satisfies $(x_i-x_c)^2+(y_j-y_c)^2<r^2$; these nodes are excluded from the computational domain.\n- Mark as internal boundary every grid node $(i,j)$ that is not hole-interior and has at least one of the four grid neighbors hole-interior; impose Dirichlet data $u_{i,j}=u^{\\star}(x_i,y_j)$ on those nodes.\n- Mark as external boundary the nodes with $i\\in\\{0,N-1\\}$ or $j\\in\\{0,N-1\\}$; impose Dirichlet data $u_{i,j}=u^{\\star}(x_i,y_j)$ on those nodes.\n- The unknowns are all remaining nodes, i.e., nodes that are not hole-interior and are not on any boundary.\n\nOn the set of unknowns, derive and implement the second-order five-point Finite Difference Method (FDM) approximation of the Laplacian consistent with the fundamental definition of second derivatives, namely that for any interior unknown $(i,j)$,\n$$\n4u_{i,j} - u_{i-1,j} - u_{i+1,j} - u_{i,j-1} - u_{i,j+1} = 0,\n$$\nwith neighbor contributions moved to the right-hand side if that neighbor is a boundary node with known value. Assemble the resulting linear system in the canonical sparse format and solve for $u$ at unknown nodes. After solving, compute the maximum absolute error with respect to $u^{\\star}$ over all unknown nodes:\n$$\nE_{\\infty} = \\max_{(i,j)\\in \\mathcal{U}} \\left| u_{i,j} - u^{\\star}(x_i,y_j) \\right|,\n$$\nwhere $\\mathcal{U}$ is the index set of unknowns.\n\nThere are no physical units to report in this problem. Angles in $u^{\\star}(x,y)$ use radians, because $y$ is a Cartesian coordinate and the cosine function is in radians.\n\nImplement a complete program that performs the above computation for the following test suite, each specified by $(N, x_c, y_c, r)$:\n- Test $1$: $N=65$, $x_c=0.2$, $y_c=-0.1$, $r=0.35$.\n- Test $2$: $N=65$, $x_c=0.0$, $y_c=0.0$, $r=0.12$.\n- Test $3$: $N=33$, $x_c=-0.3$, $y_c=0.4$, $r=0.30$.\n- Test $4$: $N=97$, $x_c=0.55$, $y_c=0.0$, $r=0.40$.\n\nFor each test, compute $E_{\\infty}$ as defined above. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with each error formatted in scientific notation with eight digits after the decimal point (for example, $[1.23456789\\mathrm{e}{-04},5.00000000\\mathrm{e}{-05}]$).", "solution": "The problem statement is critically examined and found to be valid. It is scientifically grounded, well-posed, objective, and self-contained. It describes a standard problem in computational engineering: solving the Laplace equation on a complex domain using the finite difference method with a manufactured solution for verification. We proceed with the derivation and implementation.\n\nThe governing partial differential equation for steady diffusion with constant diffusivity $k=1$ and no sources is the two-dimensional Laplace equation:\n$$\n\\nabla^2 u = \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} = 0\n$$\nThis equation holds in the domain $\\Omega \\setminus \\mathcal{H}$, where $\\Omega = [-1,1] \\times [-1,1]$ is a square and $\\mathcal{H}$ is an internal circular hole. Dirichlet boundary conditions are prescribed on the external boundary $\\partial\\Omega$ and the internal boundary $\\partial\\mathcal{H}$ using the manufactured solution $u^{\\star}(x,y) = e^{x}\\cos(y)$.\n\nThe domain is discretized using a uniform Cartesian grid of $N \\times N$ nodes. The coordinates of a node $(i,j)$ for $i,j \\in \\{0, 1, \\dots, N-1\\}$ are given by $(x_i, y_j)$, where $x_i = -1 + ih$ and $y_j = -1 + jh$. The grid spacing is $h = \\frac{2}{N-1}$. Let $u_{i,j}$ denote the numerical approximation of $u(x_i, y_j)$.\n\nThe Laplace operator is approximated at an interior node $(x_i, y_j)$ using second-order central differences:\n$$\n\\frac{\\partial^2 u}{\\partial x^2}\\bigg|_{(x_i, y_j)} \\approx \\frac{u_{i-1,j} - 2u_{i,j} + u_{i+1,j}}{h^2}\n$$\n$$\n\\frac{\\partial^2 u}{\\partial y^2}\\bigg|_{(x_i, y_j)} \\approx \\frac{u_{i,j-1} - 2u_{i,j} + u_{i,j+1}}{h^2}\n$$\nSubstituting these approximations into the Laplace equation and multiplying by $h^2$ yields the five-point finite difference stencil:\n$$\n(u_{i-1,j} - 2u_{i,j} + u_{i+1,j}) + (u_{i,j-1} - 2u_{i,j} + u_{i,j+1}) = 0\n$$\nRearranging the terms gives the equation for each unknown interior node:\n$$\n4u_{i,j} - u_{i-1,j} - u_{i+1,j} - u_{i,j-1} - u_{i,j+1} = 0\n$$\n\nThe core of the numerical procedure is the classification of each grid node $(i,j)$ to determine whether its value $u_{i,j}$ is an unknown to be solved for or a known boundary value. We define three categories of nodes:\n1.  **Hole Nodes**: Nodes whose coordinates $(x_i, y_j)$ satisfy $(x_i - x_c)^2 + (y_j - y_c)^2 < r^2$. These nodes are excluded from the computation.\n2.  **Boundary Nodes**: These are nodes where the value of $u$ is prescribed. This category includes:\n    (a) External boundary nodes on $\\partial\\Omega$, where $i \\in \\{0, N-1\\}$ or $j \\in \\{0, N-1\\}$.\n    (b) Internal boundary nodes, which are non-hole nodes that have at least one of their four cardinal neighbors (left, right, top, bottom) classified as a hole node.\n    For all boundary nodes, the value is set to the exact solution, $u_{i,j} = u^{\\star}(x_i, y_j)$.\n3.  **Unknown Nodes**: These are all nodes within the domain $\\Omega \\setminus \\mathcal{H}$ that are not classified as boundary nodes. The values $u_{i,j}$ at these nodes are the unknowns of the problem.\n\nLet there be $M$ unknown nodes. We construct a linear system of equations $A\\mathbf{u}_{\\text{unk}} = \\mathbf{b}$ of size $M \\times M$. The vector $\\mathbf{u}_{\\text{unk}}$ contains the $M$ unknown values of $u$. A mapping is established between the two-dimensional index $(i,j)$ of an unknown node and a one-dimensional index $k \\in \\{0, 1, \\dots, M-1\\}$.\n\nFor each unknown node $(i,j)$ with corresponding index $k$, we write the $k$-th equation of the linear system based on the five-point stencil. The matrix $A$ and vector $\\mathbf{b}$ are assembled as follows:\n- The diagonal entry is $A_{k,k} = 4$.\n- The right-hand side vector entry $b_k$ is initialized to $0$.\n- For each of the four neighbors of $(i,j)$, say at index $(i', j')$:\n    - If the neighbor is also an unknown node with index $p$, we set the off-diagonal entry $A_{k,p} = -1$.\n    - If the neighbor is a boundary node (either internal or external), its value $u_{i',j'}$ is known. This known value is moved to the right-hand side of the equation. So, we add its value to $b_k$: $b_k \\leftarrow b_k + u^{\\star}(x_{i'}, y_{j'})$.\n\nThe resulting matrix $A$ is sparse, symmetric, and diagonally dominant, which guarantees that a unique solution exists. This system is efficiently solved for $\\mathbf{u}_{\\text{unk}}$ using a sparse linear algebra solver.\n\nAfter obtaining the numerical solution $u_{i,j}$ at all unknown nodes, the maximum absolute error $E_{\\infty}$ is computed to assess the accuracy of the method. The error is calculated with respect to the known manufactured solution $u^{\\star}$:\n$$\nE_{\\infty} = \\max_{(i,j) \\in \\mathcal{U}} | u_{i,j} - u^{\\star}(x_i,y_j) |\n$$\nwhere $\\mathcal{U}$ is the set of indices corresponding to all unknown nodes. This procedure is implemented and applied to the specified test cases.", "answer": "```python\nimport numpy as np\nfrom scipy.sparse import lil_matrix\nfrom scipy.sparse.linalg import spsolve\nfrom scipy.ndimage import binary_dilation\n\ndef solve_one_case(N, xc, yc, r):\n    \"\"\"\n    Solves the 2D Laplace equation on a square domain with a circular hole\n    for a single set of parameters.\n    \"\"\"\n    # Node type constants\n    HOLE = -1\n    UNKNOWN = 0\n    BOUNDARY = 1\n\n    # 1. Grid Generation and Node Classification\n    x = np.linspace(-1, 1, N)\n    y = np.linspace(-1, 1, N)\n    xx, yy = np.meshgrid(x, y, indexing='ij')\n\n    node_type = np.full((N, N), UNKNOWN, dtype=int)\n\n    # Classify hole nodes\n    is_hole = (xx - xc)**2 + (yy - yc)**2 < r**2\n    node_type[is_hole] = HOLE\n\n    # Classify boundary nodes (both external and internal)\n    is_boundary = np.zeros_like(node_type, dtype=bool)\n    \n    # External boundaries\n    is_boundary[0, :] = True\n    is_boundary[N - 1, :] = True\n    is_boundary[:, 0] = True\n    is_boundary[:, N - 1] = True\n    \n    # Internal boundaries (nodes adjacent to the hole)\n    # A 5-point cross-shaped structuring element identifies cardinal neighbors.\n    struct = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]], dtype=bool)\n    dilated_hole = binary_dilation(is_hole, structure=struct)\n    is_internal_boundary = dilated_hole & ~is_hole\n    is_boundary |= is_internal_boundary\n\n    # Apply boundary classification, ensuring hole nodes are not overwritten.\n    node_type[is_boundary & ~is_hole] = BOUNDARY\n\n    # 2. Map unknown nodes to linear indices for the linear system\n    unknown_indices = np.where(node_type == UNKNOWN)\n    num_unknowns = len(unknown_indices[0])\n    \n    map_ij_to_k = { (i, j): k for k, (i, j) in enumerate(zip(*unknown_indices)) }\n\n    # 3. Assemble the linear system Ax = b\n    # LIL format is efficient for building the sparse matrix\n    A = lil_matrix((num_unknowns, num_unknowns), dtype=float)\n    b = np.zeros(num_unknowns, dtype=float)\n    \n    u_exact = np.exp(xx) * np.cos(yy)\n\n    for k in range(num_unknowns):\n        i, j = unknown_indices[0][k], unknown_indices[1][k]\n        \n        # Diagonal term from the 5-point stencil\n        A[k, k] = 4.0\n        \n        # Consider the four cardinal neighbors\n        for ni, nj in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            neighbor_type = node_type[ni, nj]\n            \n            if neighbor_type == UNKNOWN:\n                # Off-diagonal term for an unknown neighbor\n                p = map_ij_to_k[(ni, nj)]\n                A[k, p] = -1.0\n            elif neighbor_type == BOUNDARY:\n                # Known value from a boundary neighbor contributes to the RHS\n                b[k] += u_exact[ni, nj]\n\n    # 4. Solve the sparse linear system\n    # Convert to CSR format for efficient solving\n    A_csr = A.tocsr()\n    u_vec_numeric = spsolve(A_csr, b)\n\n    # 5. Compute the maximum absolute error\n    u_vec_exact = u_exact[unknown_indices]\n    max_abs_error = np.max(np.abs(u_vec_numeric - u_vec_exact))\n    \n    return max_abs_error\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (N, xc, yc, r)\n        (65, 0.2, -0.1, 0.35),\n        (65, 0.0, 0.0, 0.12),\n        (33, -0.3, 0.4, 0.30),\n        (97, 0.55, 0.0, 0.40),\n    ]\n\n    results = []\n    for case in test_cases:\n        error = solve_one_case(*case)\n        results.append(error)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{e:.8e}' for e in results)}]\")\n\nsolve()\n```", "id": "2392562"}]}