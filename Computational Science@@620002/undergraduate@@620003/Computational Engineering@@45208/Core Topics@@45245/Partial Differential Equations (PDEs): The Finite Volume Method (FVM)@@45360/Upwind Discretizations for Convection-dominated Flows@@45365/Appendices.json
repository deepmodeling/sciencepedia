{"hands_on_practices": [{"introduction": "Understanding the stability of a numerical scheme is the first critical step before its application. This practice guides you through a von Neumann stability analysis for a first-order upwind scheme applied to a linear convection-reaction equation. By working through this problem [@problem_id:2449011], you will derive how the time step is constrained not only by the advection speed, through the Courant–Friedrichs–Lewy (CFL) number $\\sigma$, but also by the reaction term, providing a deeper understanding of how different physical processes interact within a numerical framework.", "problem": "Consider the one-dimensional, linear, convection–reaction initial value problem defined by the partial differential equation $$u_t + a\\,u_x = -\\epsilon\\,u,$$ where $u=u(x,t)$ is dimensionless, $a$ is a constant advection speed, and $\\epsilon \\ge 0$ is a constant reaction (sink) coefficient. Assume a uniform spatial grid with spacing $\\Delta x$ and an explicit forward-Euler time discretization with time step $\\Delta t$. Use the first-order upwind spatial discretization of the convective term selected by the sign of $a$ (upwind to the left if $a \\ge 0$ and upwind to the right if $a < 0$), and treat the sink term explicitly. All quantities are dimensionless, so no physical units are required.\n\nYour tasks are:\n- Starting from the conservation-law interpretation and the definitions of the forward-Euler method for ordinary differential equations and the first-order upwind finite difference for spatial advection, derive the one-step update formula for the grid values $u_i^n$ at grid point index $i$ and time level $n$. Then, perform a Fourier (von Neumann) stability analysis by substituting the single-mode ansatz $u_i^n = G^n \\exp(\\mathrm{i} k x_i)$, and derive the amplification factor $G(k)$ as a function of the wavenumber $k$.\n- From the amplification factor, determine the necessary and sufficient condition for linear stability, namely $\\max_k |G(k)| \\le 1$, in terms of the nondimensional parameters $r = \\epsilon\\,\\Delta t$ and $\\sigma = |a|\\,\\Delta t / \\Delta x$. Show that the extreme wavenumbers $k = 0$ and $k = \\pi/\\Delta x$ control the bound, and obtain an explicit formula for the largest stable time step $\\Delta t_{\\max}$ as a function of $a$, $\\epsilon$, and $\\Delta x$.\n- Explain qualitatively how the distributed sink (through $\\epsilon$) interacts with upwinding to alter the admissible Courant–Friedrichs–Lewy (CFL) condition.\n\nProgram specification:\n- Implement a program that, for each test case listed below, computes the maximum linearly stable time step $\\Delta t_{\\max}$ obtained from your von Neumann analysis for the described explicit forward-Euler in time and first-order upwind in space scheme.\n- Use the following test suite of parameter triples $(a,\\epsilon,\\Delta x)$:\n    - Test $1$: $(a,\\epsilon,\\Delta x) = (1.0, 0.5, 0.01)$.\n    - Test $2$: $(a,\\epsilon,\\Delta x) = (2.0, 0.0, 0.05)$.\n    - Test $3$: $(a,\\epsilon,\\Delta x) = (0.0, 4.0, 0.01)$.\n    - Test $4$: $(a,\\epsilon,\\Delta x) = (-3.0, 1.0, 0.02)$.\n    - Test $5$: $(a,\\epsilon,\\Delta x) = (0.75, 1.5, 0.10)$.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, \"[0.1, 0.2, 0.3]\"). The output list must contain the five floating-point values of $\\Delta t_{\\max}$ for Tests $1$ through $5$, in that order.\n\nAnswer type:\n- Each test case result must be a floating-point number. Aggregate the five results into a single list as specified above, printed on a single line.", "solution": "The problem statement is subjected to validation prior to any attempt at a solution.\n\n### Step 1: Extract Givens\n- **Partial Differential Equation (PDE)**: $u_t + a\\,u_x = -\\epsilon\\,u$\n- **Variables and Constants**: $u=u(x,t)$ is the dimensionless dependent variable, $a$ is a constant advection speed, $\\epsilon \\ge 0$ is a constant reaction (sink) coefficient.\n- **Discretization Parameters**: $\\Delta x$ is the uniform spatial grid spacing, $\\Delta t$ is the time step.\n- **Numerical Scheme**:\n    - **Time Integration**: Explicit forward-Euler method.\n    - **Spatial Discretization**: First-order upwind scheme for the convective term $a\\,u_x$. The direction of upwinding depends on the sign of $a$.\n    - **Source Term Treatment**: The sink term $-\\epsilon\\,u$ is treated explicitly.\n- **Analysis Task**: Perform a von Neumann stability analysis to find the amplification factor $G(k)$ and the stability condition $\\max_k |G(k)| \\le 1$.\n- **Derivation Task**: From the stability condition, derive the maximum stable time step $\\Delta t_{\\max}$ as a function of $a$, $\\epsilon$, and $\\Delta x$.\n- **Qualitative Task**: Explain the interaction between the sink term and the upwind discretization on the stability condition.\n\n### Step 2: Validate Using Extracted Givens\n- **Scientifically Grounded**: The problem is based on the one-dimensional linear convection-reaction equation, a fundamental model in transport phenomena. The numerical methods specified (forward-Euler, first-order upwind) and the analysis technique (von Neumann stability) are standard and rigorously defined topics in computational engineering and numerical analysis. The problem is scientifically and mathematically sound.\n- **Well-Posed**: The problem is clearly specified. The PDE, numerical scheme, and objectives are defined without ambiguity. It is structured to lead to a unique and meaningful solution.\n- **Objective**: The problem is stated in precise, objective mathematical language. It is free of subjective claims or non-scientific content.\n\n### Step 3: Verdict and Action\nThe problem is valid. It is a standard, well-posed problem in numerical methods for PDEs. A complete solution will be provided.\n\n### Derivation and Analysis\n\nThe governing partial differential equation is:\n$$\nu_t + a\\,u_x = -\\epsilon\\,u\n$$\nThis can be rearranged into the semi-discrete form for a grid point $i$ as an ordinary differential equation (ODE) in time:\n$$\n\\frac{d u_i}{d t} = -a (u_x)_i - \\epsilon u_i\n$$\nApplying the explicit forward-Euler method for time integration, we have:\n$$\n\\frac{u_i^{n+1} - u_i^n}{\\Delta t} = -a (u_x)_i^n - \\epsilon u_i^n\n$$\nwhere the superscript $n$ denotes the time level $t^n = n\\,\\Delta t$. The one-step update formula is:\n$$\nu_i^{n+1} = u_i^n - a\\,\\Delta t\\,(u_x)_i^n - \\epsilon\\,\\Delta t\\,u_i^n\n$$\nNext, we discretize the spatial derivative $(u_x)_i^n$ using the first-order upwind scheme, which depends on the sign of the advection speed $a$.\n\n**Case 1: Advection speed $a \\ge 0$**\nThe upwind direction is to the left (against the flow), so we use a backward difference:\n$$\n(u_x)_i^n \\approx \\frac{u_i^n - u_{i-1}^n}{\\Delta x}\n$$\nSubstituting this into the update formula yields:\n$$\nu_i^{n+1} = u_i^n - a\\,\\Delta t\\,\\left(\\frac{u_i^n - u_{i-1}^n}{\\Delta x}\\right) - \\epsilon\\,\\Delta t\\,u_i^n\n$$\nLet us define the non-dimensional parameters: the Courant number $\\sigma = \\frac{|a|\\,\\Delta t}{\\Delta x}$ and the reaction number $r = \\epsilon\\,\\Delta t$. Since $a \\ge 0$, $|a|=a$. The equation becomes:\n$$\nu_i^{n+1} = u_i^n - \\sigma(u_i^n - u_{i-1}^n) - r\\,u_i^n = (1 - \\sigma - r)u_i^n + \\sigma u_{i-1}^n\n$$\n\n**Case 2: Advection speed $a < 0$**\nThe upwind direction is to the right, so we use a forward difference:\n$$\n(u_x)_i^n \\approx \\frac{u_{i+1}^n - u_i^n}{\\Delta x}\n$$\nSubstituting this into the update formula:\n$$\nu_i^{n+1} = u_i^n - a\\,\\Delta t\\,\\left(\\frac{u_{i+1}^n - u_i^n}{\\Delta x}\\right) - \\epsilon\\,\\Delta t\\,u_i^n\n$$\nWith $\\sigma = \\frac{|a|\\,\\Delta t}{\\Delta x} = \\frac{-a\\,\\Delta t}{\\Delta x}$, we have $a\\,\\Delta t = -\\sigma\\,\\Delta x$. The equation becomes:\n$$\nu_i^{n+1} = u_i^n - (-\\sigma\\,\\Delta x)\\,\\left(\\frac{u_{i+1}^n - u_i^n}{\\Delta x}\\right) - r\\,u_i^n = u_i^n + \\sigma(u_{i+1}^n - u_i^n) - r\\,u_i^n\n$$\n$$\nu_i^{n+1} = (1 - \\sigma - r)u_i^n + \\sigma u_{i+1}^n\n$$\n\n**Fourier (von Neumann) Stability Analysis**\nWe postulate a single Fourier mode solution of the form $u_i^n = G^n e^{\\mathrm{i} k x_i}$, where $x_i = i\\,\\Delta x$, $k$ is the wavenumber, $\\mathrm{i} = \\sqrt{-1}$, and $G(k)$ is the complex amplification factor per time step.\n\nFor $a \\ge 0$:\n$$\nG^{n+1} e^{\\mathrm{i} k i \\Delta x} = (1 - \\sigma - r)G^n e^{\\mathrm{i} k i \\Delta x} + \\sigma G^n e^{\\mathrm{i} k (i-1) \\Delta x}\n$$\nDividing by $G^n e^{\\mathrm{i} k i \\Delta x}$ gives the amplification factor $G$:\n$$\nG = (1 - \\sigma - r) + \\sigma e^{-\\mathrm{i} k \\Delta x}\n$$\nFor $a < 0$:\n$$\nG^{n+1} e^{\\mathrm{i} k i \\Delta x} = (1 - \\sigma - r)G^n e^{\\mathrm{i} k i \\Delta x} + \\sigma G^n e^{\\mathrm{i} k (i+1) \\Delta x}\n$$\nDividing by $G^n e^{\\mathrm{i} k i \\Delta x}$ gives:\n$$\nG = (1 - \\sigma - r) + \\sigma e^{\\mathrm{i} k \\Delta x}\n$$\nLet $\\theta = k\\,\\Delta x$ be the dimensionless wavenumber. The magnitude squared of $G$ is what determines stability. For both cases, $|G|^2$ has the same form:\n$$\n|G(\\theta)|^2 = |(1 - \\sigma - r) + \\sigma(\\cos\\theta \\mp \\mathrm{i}\\sin\\theta)|^2 = \\left( (1 - \\sigma - r) + \\sigma\\cos\\theta \\right)^2 + (\\mp\\sigma\\sin\\theta)^2\n$$\n$$\n|G(\\theta)|^2 = (1 - \\sigma - r)^2 + 2\\sigma(1 - \\sigma - r)\\cos\\theta + \\sigma^2\\cos^2\\theta + \\sigma^2\\sin^2\\theta\n$$\n$$\n|G(\\theta)|^2 = (1 - \\sigma - r)^2 + \\sigma^2 + 2\\sigma(1 - \\sigma - r)\\cos\\theta\n$$\nThe scheme is linearly stable if and only if $|G(\\theta)| \\le 1$ for all $\\theta \\in [-\\pi, \\pi]$. This is equivalent to $|G(\\theta)|^2 \\le 1$. The expression for $|G(\\theta)|^2$ is a linear function of $\\cos\\theta$. Its extrema occur at the boundaries of the range of $\\cos\\theta$, which are $\\cos\\theta = 1$ (for $\\theta = 0$, $k=0$) and $\\cos\\theta = -1$ (for $\\theta = \\pi$, $k=\\pi/\\Delta x$).\n\n1.  **At $\\theta = 0$ ($k=0$):** $\\cos\\theta = 1$.\n    $$\n    |G(0)|^2 = (1 - \\sigma - r)^2 + \\sigma^2 + 2\\sigma(1 - \\sigma - r) = [(1 - \\sigma - r) + \\sigma]^2 = (1 - r)^2\n    $$\n    The stability condition $|G(0)|^2 \\le 1$ implies $(1-r)^2 \\le 1$, which is $-1 \\le 1-r \\le 1$.\n    Since $r = \\epsilon\\,\\Delta t \\ge 0$, the inequality $1-r \\le 1$ is always true. The other inequality, $-1 \\le 1-r$, gives $r \\le 2$.\n\n2.  **At $\\theta = \\pi$ ($k=\\pi/\\Delta x$):** $\\cos\\theta = -1$.\n    $$\n    |G(\\pi)|^2 = (1 - \\sigma - r)^2 + \\sigma^2 - 2\\sigma(1 - \\sigma - r) = [(1 - \\sigma - r) - \\sigma]^2 = (1 - 2\\sigma - r)^2\n    $$\n    The stability condition $|G(\\pi)|^2 \\le 1$ implies $(1 - 2\\sigma - r)^2 \\le 1$, which is $-1 \\le 1 - 2\\sigma - r \\le 1$.\n    The right inequality, $1 - 2\\sigma - r \\le 1$, gives $-2\\sigma - r \\le 0$, or $2\\sigma + r \\ge 0$. Since $\\sigma \\ge 0$ and $r \\ge 0$, this is always satisfied.\n    The left inequality, $-1 \\le 1 - 2\\sigma - r$, gives $2\\sigma + r \\le 2$.\n\n**Combined Stability Condition and Maximum Time Step**\nThe scheme is stable if both conditions, $r \\le 2$ and $2\\sigma + r \\le 2$, are met. Since $\\sigma \\ge 0$, the second condition $2\\sigma + r \\le 2$ implies $r \\le 2 - 2\\sigma \\le 2$. Thus, $2\\sigma + r \\le 2$ is the single necessary and sufficient condition for stability.\n\nWe substitute the definitions of $\\sigma$ and $r$:\n$$\n2 \\left(\\frac{|a|\\,\\Delta t}{\\Delta x}\\right) + \\epsilon\\,\\Delta t \\le 2\n$$\nFactoring out $\\Delta t$:\n$$\n\\Delta t \\left( \\frac{2|a|}{\\Delta x} + \\epsilon \\right) \\le 2\n$$\nFrom this, we derive the maximum stable time step, $\\Delta t_{\\max}$:\n$$\n\\Delta t_{\\max} = \\frac{2}{\\frac{2|a|}{\\Delta x} + \\epsilon}\n$$\nThis formula holds for all cases, including when $a=0$ or $\\epsilon=0$.\n- If $\\epsilon=0$ (pure advection), $\\Delta t_{\\max} = \\frac{2}{2|a|/\\Delta x} = \\frac{\\Delta x}{|a|}$, which corresponds to the classic CFL condition $\\sigma \\le 1$.\n- If $a=0$ (pure reaction), $\\Delta t_{\\max} = \\frac{2}{\\epsilon}$, which is the stability limit for forward Euler on the ODE $u'=-\\epsilon u$, corresponding to $r \\le 2$.\n\n**Qualitative Explanation of Stability Interaction**\nThe stability condition can be rewritten as $\\sigma + r/2 \\le 1$.\n- The term $\\sigma = |a|\\Delta t/\\Delta x$ represents the stability requirement from the explicit upwind discretization of the convection term. By itself, stability requires $\\sigma \\le 1$.\n- The term $r/2 = \\epsilon \\Delta t / 2$ represents the stability requirement from the explicit treatment of the reaction term. By itself, stability requires $r \\le 2$.\n\nThe combined condition $\\sigma + r/2 \\le 1$ demonstrates that the time step restrictions from the two phenomena are additive. While the sink term $-\\epsilon u$ is physically dissipative and damps the solution, its *explicit* numerical treatment via the forward-Euler method introduces its own constraint on the time step. The forward-Euler method is only conditionally stable for problems with negative real eigenvalues (stiff or dissipative systems). The total \"demand\" on stability, represented by the sum of the Courant number and half the reaction number, cannot exceed unity. Consequently, the presence of an explicitly treated sink term ($\\epsilon > 0$) makes the overall time step restriction *more stringent* than the CFL condition for pure advection. The time step must be small enough to stably resolve both the advective and reactive dynamics simultaneously within the limitations of the chosen explicit time integration scheme.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the maximum linearly stable time step for a 1D convection-reaction\n    equation discretized with forward-Euler in time and first-order upwind in space.\n    \"\"\"\n    \n    # Test cases defined as tuples of (a, epsilon, delta_x)\n    test_cases = [\n        (1.0, 0.5, 0.01),   # Test 1\n        (2.0, 0.0, 0.05),   # Test 2\n        (0.0, 4.0, 0.01),   # Test 3\n        (-3.0, 1.0, 0.02),  # Test 4\n        (0.75, 1.5, 0.10)   # Test 5\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        a, epsilon, delta_x = case\n        \n        # The stability analysis yields the formula for the maximum stable time step:\n        # dt_max = 2 / (2*|a|/dx + epsilon)\n        \n        # Denominator of the formula\n        denominator = (2.0 * abs(a) / delta_x) + epsilon\n        \n        # Calculate the maximum stable time step.\n        # This formula correctly handles the edge cases where a=0 or epsilon=0.\n        # If the denominator is zero (a=0 and epsilon=0), the PDE is u_t = 0,\n        # which is unconditionally stable. The time step would be infinite,\n        # but this case is not in the test suite.\n        if denominator == 0.0:\n            # This case corresponds to a=0 and epsilon=0.\n            # The scheme is unconditionally stable for u_t = 0.\n            # Representing this as infinity.\n            dt_max = float('inf')\n        else:\n            dt_max = 2.0 / denominator\n            \n        results.append(dt_max)\n\n    # Format the output as a comma-separated list of floating-point numbers\n    # enclosed in square brackets.\n    output_str = f\"[{','.join(map(str, results))}]\"\n    \n    print(output_str)\n\nsolve()\n```", "id": "2449011"}, {"introduction": "Real-world flows rarely have a constant velocity, and a robust numerical scheme must handle this complexity. This exercise [@problem_id:2448947] challenges you to generalize the upwind concept to a linear conservation law where the wave speed $a(x)$ varies in space and even changes sign within the domain. You will implement a finite volume method where the upwind direction is determined locally at each cell interface, a crucial skill for building solvers for complex engineering problems involving spatially varying material properties or flow fields.", "problem": "Consider the linear conservation law on a one-dimensional periodic domain\n$$ u_t + \\partial_x\\!\\big(a(x)\\,u\\big) = 0 \\quad \\text{for } x \\in [0,1], \\; t \\ge 0, $$\nwith wave speed\n$$ a(x) = 2\\,(x - \\tfrac{1}{2}). $$\nThe domain is partitioned into a uniform mesh of $N$ control volumes (cells) with periodic boundary conditions. Let the cell centers be\n$$ x_i = \\frac{i + \\tfrac{1}{2}}{N}, \\quad i = 0,1,\\dots,N-1, $$\nand the cell faces be\n$$ x_{i+\\tfrac{1}{2}} = \\frac{i+1}{N}, \\quad i = 0,1,\\dots,N-1, $$\nwith periodic indexing understood modulo $N$. Let the cell width be $\\Delta x = \\tfrac{1}{N}$ and a single time step of size $\\Delta t$ be applied from time level $n$ to $n+1$.\n\nDefine the first-order explicit conservative finite volume update\n$$ u_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x}\\,\\big(F_{i+\\tfrac{1}{2}}^n - F_{i-\\tfrac{1}{2}}^n\\big), $$\nwhere the numerical flux at face $x_{i+\\tfrac{1}{2}}$ is\n$$ F_{i+\\tfrac{1}{2}}^n = \n\\begin{cases}\na(x_{i+\\tfrac{1}{2}})\\,u_i^n, & \\text{if } a(x_{i+\\tfrac{1}{2}}) \\ge 0 \\\\\na(x_{i+\\tfrac{1}{2}})\\,u_{i+1}^n, & \\text{if } a(x_{i+\\tfrac{1}{2}}) < 0\n\\end{cases}\n$$\nwith periodic wrap-around at the domain boundaries. This stencil is upwinded locally according to the sign of $a(x)$ at each face, which changes within the domain because $a(x)$ changes sign.\n\nFor all test cases below, initialize $u_i^0$ by pointwise sampling of the initial condition at the cell centers, i.e.,\n$$ u_i^0 = u_0(x_i). $$\nAll quantities are dimensionless; no physical units are involved.\n\nImplement the above single-step update and compute the requested scalar quantity for each of the following four test cases. Your program must produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the test cases $1$ through $4$, for example, $[r_1,r_2,r_3,r_4]$, where each $r_k$ is a decimal number.\n\nTest suite:\n\n- Test case $1$ (general case with sign change in $a(x)$ and smooth data):\n  - $N = 20$, $\\Delta t = 0.02$.\n  - $u_0(x) = \\sin(2\\pi x) + 1$.\n  - Output the value of $u_{10}^{1}$ (i.e., the updated value in cell index $i = 10$ after one time step).\n\n- Test case $2$ (face-aligned zero wave speed and conservation at the interface):\n  - $N = 16$, $\\Delta t = 0.01$.\n  - $u_0(x) = x$.\n  - Output the absolute value of the numerical flux $|F_{i+\\tfrac{1}{2}}^0|$ at the face where $x_{i+\\tfrac{1}{2}} = \\tfrac{1}{2}$ (the interface where $a(x)=0$).\n\n- Test case $3$ (zero time step edge case):\n  - $N = 10$, $\\Delta t = 0$.\n  - $u_0(x) = \\sqrt{x\\,(1-x)}$.\n  - Output the maximum absolute change $\\max_i |u_i^{1} - u_i^{0}|$.\n\n- Test case $4$ (periodic wrap-around with upwind direction reversal across the domain):\n  - $N = 4$, $\\Delta t = 0.2$.\n  - $u_0(x) = 2$ for $x \\in [\\tfrac{3}{4},1]$ and $u_0(x) = 0$ otherwise.\n  - Output the value of $u_{0}^{1}$ (the updated value in cell index $i = 0$ after one time step).\n\nFinal output format:\n\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[r_1,r_2,r_3,r_4]$), where each $r_k$ is the scalar result required by the corresponding test case.", "solution": "The problem presented is a well-posed exercise in computational engineering, specifically concerning the numerical solution of a linear conservation law using a first-order finite volume method. The problem is scientifically sound, fully specified, and contains no contradictions. A unique solution exists for each test case. We shall proceed with the analysis.\n\nThe governing equation is the linear conservation law given by\n$$ u_t + \\partial_x(a(x)u) = 0, $$\non a periodic domain $x \\in [0,1]$. The wave speed is non-constant: $a(x) = 2(x - \\tfrac{1}{2})$. The equation describes the transport (advection) of a quantity $u$ with a velocity that varies linearly in space. The velocity is zero at the domain center $x=0.5$, negative for $x < 0.5$, and positive for $x > 0.5$. This implies that the quantity $u$ is transported away from the center towards the boundaries, where it re-enters the domain due to periodic boundary conditions.\n\nThe numerical method employed is a finite volume scheme. This approach is based on the integral form of the conservation law over each control volume (cell) $C_i = [x_{i-\\tfrac{1}{2}}, x_{i+\\tfrac{1}{2}}]$. The change of the average value of $u$ in a cell is balanced by the net flux across its boundaries:\n$$ \\frac{d}{dt} \\int_{x_{i-\\tfrac{1}{2}}}^{x_{i+\\tfrac{1}{2}}} u(x,t) dx + \\big(a(x_{i+\\tfrac{1}{2}})u(x_{i+\\tfrac{1}{2}},t) - a(x_{i-\\tfrac{1}{2}})u(x_{i-\\tfrac{1}{2}},t)\\big) = 0. $$\nApproximating the cell average $u_i(t) \\approx \\frac{1}{\\Delta x} \\int_{C_i} u(x,t) dx$ and discretizing in time with an explicit Euler step yields the conservative update formula:\n$$ u_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x} \\big(F_{i+\\tfrac{1}{2}}^n - F_{i-\\tfrac{1}{2}}^n\\big). $$\nHere, $u_i^n$ is the approximation of the cell-average of $u$ in cell $i$ at time $t_n$, $\\Delta x = 1/N$ is the cell width, and $F_{i+\\tfrac{1}{2}}^n$ is the numerical flux approximating the physical flux $a(x)u$ at the cell face $x_{i+\\tfrac{1}{2}}$.\n\nThe numerical flux is specified as a first-order upwind flux:\n$$ F_{i+\\tfrac{1}{2}}^n = \\begin{cases} a(x_{i+\\tfrac{1}{2}})\\,u_i^n, & \\text{if } a(x_{i+\\tfrac{1}{2}}) \\ge 0 \\\\ a(x_{i+\\tfrac{1}{2}})\\,u_{i+1}^n, & \\text{if } a(x_{i+\\tfrac{1}{2}}) < 0 \\end{cases} $$\nThe principle of upwinding dictates that the flux at an interface is determined by the state in the \"upwind\" cell, from which information is flowing. If the wave speed $a(x_{i+\\tfrac{1}{2}})$ at the face between cell $i$ and cell $i+1$ is positive, the flow is from left to right, so the flux depends on the state in cell $i$. If the wave speed is negative, the flow is from right to left, and the flux depends on the state in cell $i+1$. This is crucial for the stability of the numerical scheme for convection-dominated problems.\n\nWe now address each test case systematically.\n\n**Test case 1**\n\nParameters: $N = 20$, $\\Delta t = 0.02$, initial condition $u_0(x) = \\sin(2\\pi x) + 1$. We are asked to find $u_{10}^{1}$.\n\nFirst, we establish the discrete grid. Cell width is $\\Delta x = 1/20 = 0.05$. The cell centers are $x_i = (i+0.5)/20$ for $i=0, \\dots, 19$. The cell faces are $x_{i+1/2} = (i+1)/20$. The time step update for cell $i=10$ is\n$$ u_{10}^{1} = u_{10}^{0} - \\frac{\\Delta t}{\\Delta x} \\big( F_{10+\\tfrac{1}{2}}^{0} - F_{10-\\tfrac{1}{2}}^{0} \\big). $$\nThe initial value is $u_{10}^0 = u_0(x_{10}) = u_0((10+0.5)/20) = u_0(0.525) = \\sin(2\\pi \\times 0.525) + 1 = \\sin(1.05\\pi) + 1$.\nThe ratio $\\Delta t / \\Delta x = 0.02 / 0.05 = 0.4$.\n\nWe must compute the fluxes at the faces bounding cell $10$, which are $x_{9+\\tfrac{1}{2}}$ and $x_{10+\\tfrac{1}{2}}$.\nFace $x_{10+\\tfrac{1}{2}} = x_{10.5} = (10+1)/20 = 0.55$. The wave speed here is $a(0.55) = 2(0.55 - 0.5) = 0.1$. Since $a(x_{10.5}) > 0$, the upwind direction is from cell $10$. Thus, the flux is $F_{10.5}^0 = a(x_{10.5}) u_{10}^0 = 0.1 \\times u_{10}^0$.\nFace $x_{9+\\tfrac{1}{2}} = x_{9.5} = (9+1)/20 = 0.5$. The wave speed is $a(0.5) = 2(0.5 - 0.5) = 0$. The condition for the flux is $a \\ge 0$, which is met. The upwind direction is from cell $9$. So, $F_{9.5}^0 = a(x_{9.5}) u_{9}^0 = 0 \\times u_{9}^0 = 0$.\n\nSubstituting the fluxes into the update equation:\n$$ u_{10}^{1} = u_{10}^{0} - 0.4 \\big( (0.1 \\times u_{10}^0) - 0 \\big) = u_{10}^{0} - 0.04 u_{10}^{0} = 0.96 u_{10}^{0}. $$\nFinally, we compute the numerical value:\n$$ u_{10}^{1} = 0.96 \\times (\\sin(1.05\\pi) + 1) \\approx 0.96 \\times (-0.156434465 + 1) \\approx 0.809822913. $$\n\n**Test case 2**\n\nParameters: $N = 16$, $\\Delta t = 0.01$, initial condition $u_0(x) = x$. We need the absolute value of the flux, $|F_{i+\\tfrac{1}{2}}^0|$, at the face where $x_{i+\\tfrac{1}{2}} = 1/2$.\n\nFirst, identify the face index $i$. $x_{i+\\tfrac{1}{2}} = (i+1)/N = (i+1)/16 = 1/2$. This yields $i+1=8$, so $i=7$. We need to compute $|F_{7+\\tfrac{1}{2}}^0|$.\nThe face is $x_{7.5} = 0.5$. The wave speed at this face is $a(0.5) = 2(0.5 - 0.5) = 0$.\nAccording to the flux definition, if $a(x_{i+\\tfrac{1}{2}}) \\ge 0$, the flux is $F_{i+\\tfrac{1}{2}}^n = a(x_{i+\\tfrac{1}{2}}) u_i^n$. Here, $a(x_{7.5}) = 0$, so the condition is met. The cell to the left is $i=7$.\nThe flux is $F_{7.5}^0 = a(x_{7.5}) u_7^0 = 0 \\times u_7^0 = 0$.\nThe value of $u_7^0$ is irrelevant. The flux is zero because the transport velocity at the interface is zero.\nThe requested value is $|F_{7.5}^0| = |0| = 0$.\n\n**Test case 3**\n\nParameters: $N = 10$, $\\Delta t = 0$, initial condition $u_0(x) = \\sqrt{x(1-x)}$. The output is the maximum absolute change $\\max_i |u_i^1 - u_i^0|$.\n\nThe finite volume update is $u_i^1 = u_i^0 - \\frac{\\Delta t}{\\Delta x}(F_{i+\\tfrac{1}{2}}^0 - F_{i-\\tfrac{1}{2}}^0)$.\nGiven $\\Delta t = 0$, the update term is zero regardless of the flux values:\n$$ u_i^1 = u_i^0 - \\frac{0}{\\Delta x}(\\dots) = u_i^0. $$\nTherefore, $u_i^1 = u_i^0$ for all $i=0, \\dots, N-1$. The change is identically zero for all cells.\nThe maximum absolute change is $\\max_i |u_i^1 - u_i^0| = \\max_i |u_i^0 - u_i^0| = \\max_i(0) = 0$.\n\n**Test case 4**\n\nParameters: $N = 4$, $\\Delta t = 0.2$, initial condition $u_0(x) = 2$ for $x \\in [3/4, 1]$ and $u_0(x) = 0$ otherwise. We need to find $u_0^1$.\n\nFirst, establish the discrete initial conditions. $\\Delta x = 1/4 = 0.25$.\nCell centers are $x_0 = 0.125$, $x_1 = 0.375$, $x_2 = 0.625$, $x_3 = 0.875$.\nEvaluating $u_0(x)$ at these centers:\n$u_0^0 = u_0(0.125) = 0$.\n$u_1^0 = u_0(0.375) = 0$.\n$u_2^0 = u_0(0.625) = 0$.\n$u_3^0 = u_0(0.875) = 2$ (since $0.75 \\le 0.875 \\le 1$).\nThe initial state vector is $u^0 = [0, 0, 0, 2]$.\n\nThe update for cell $i=0$ is\n$$ u_0^1 = u_0^0 - \\frac{\\Delta t}{\\Delta x} \\big( F_{0+\\tfrac{1}{2}}^0 - F_{0-\\tfrac{1}{2}}^0 \\big). $$\nWith periodic indexing, the face $x_{0-\\tfrac{1}{2}}$ is the same as $x_{3+\\tfrac{1}{2}}$. So we need fluxes $F_{0.5}^0$ and $F_{3.5}^0$.\nThe ratio $\\Delta t / \\Delta x = 0.2 / 0.25 = 0.8$.\n\nWe compute the required fluxes:\nFace $x_{0.5} = (0+1)/4 = 0.25$. The wave speed is $a(0.25) = 2(0.25-0.5) = -0.5$. Since $a < 0$, flow is from right to left, so the flux depends on the state in cell $i+1=1$.\n$F_{0.5}^0 = a(x_{0.5}) u_1^0 = -0.5 \\times 0 = 0$.\nFace $x_{3.5} = (3+1)/4 = 1.0$. The wave speed is $a(1.0) = 2(1.0-0.5) = 1.0$. Since $a > 0$, flow is from left to right, so the flux depends on the state in cell $i=3$.\n$F_{3.5}^0 = a(x_{3.5}) u_3^0 = 1.0 \\times 2 = 2$.\n\nNow, substitute these into the update formula for $u_0^1$:\n$$ u_0^1 = u_0^0 - 0.8 \\big( F_{0.5}^0 - F_{3.5}^0 \\big) = 0 - 0.8 \\big( 0 - 2 \\big) = -0.8(-2) = 1.6. $$\nThe result is $u_0^1 = 1.6$. This is physically consistent: the high value in cell $3$ is advected to the right (increasing index), wrapping around the periodic domain to enter cell $0$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef a_wave_speed(x):\n    \"\"\"Calculates the wave speed a(x) = 2*(x - 0.5).\"\"\"\n    return 2.0 * (x - 0.5)\n\ndef perform_single_step(N, dt, u0):\n    \"\"\"\n    Performs a single time step of the first-order upwind finite volume method.\n    Returns the updated solution array u1 and the array of fluxes F.\n    \"\"\"\n    if N == 0:\n        return np.array([]), np.array([])\n        \n    dx = 1.0 / N\n    \n    # Locations of cell faces (interfaces)\n    x_faces = (np.arange(N) + 1.0) / N\n    \n    # Wave speed at each face\n    a_at_faces = a_wave_speed(x_faces)\n    \n    # Calculate numerical fluxes F_{i+1/2} (indexed by i)\n    fluxes = np.zeros(N)\n    for i in range(N):\n        if a_at_faces[i] >= 0:\n            # Flow is rightward, use value from cell i\n            fluxes[i] = a_at_faces[i] * u0[i]\n        else:\n            # Flow is leftward, use value from cell i+1 (with periodic wrap-around)\n            fluxes[i] = a_at_faces[i] * u0[(i + 1) % N]\n            \n    # Update solution u_i for all cells\n    u1 = np.zeros(N)\n    # The term dt/dx can be zero, which is a valid case\n    cfl_factor = dt / dx if dx > 0 else 0.0\n    \n    for i in range(N):\n        F_right = fluxes[i]\n        F_left = fluxes[(i - 1 + N) % N]  # Periodic wrap-around for left flux\n        u1[i] = u0[i] - cfl_factor * (F_right - F_left)\n        \n    return u1, fluxes\n\ndef solve():\n    \"\"\"\n    Solves the four test cases specified in the problem statement and prints the results.\n    \"\"\"\n    test_cases = [\n        # Test Case 1\n        {'N': 20, 'dt': 0.02, 'u0_func': lambda x: np.sin(2 * np.pi * x) + 1, 'output_req': ('u_val', 10)},\n        # Test Case 2\n        {'N': 16, 'dt': 0.01, 'u0_func': lambda x: x, 'output_req': ('flux_abs', 7)},\n        # Test Case 3\n        {'N': 10, 'dt': 0.0, 'u0_func': lambda x: np.sqrt(x * (1 - x)), 'output_req': ('max_abs_change',)},\n        # Test Case 4\n        {'N': 4, 'dt': 0.2, 'u0_func': lambda x: 2.0 if (x >= 0.75 and x <= 1.0) else 0.0, 'output_req': ('u_val', 0)},\n    ]\n\n    results = []\n\n    for case in test_cases:\n        N = case['N']\n        dt = case['dt']\n        u0_func = case['u0_func']\n        output_req = case['output_req']\n        \n        # Initialize u0 by sampling at cell centers\n        x_centers = (np.arange(N) + 0.5) / N\n        u0 = np.array([u0_func(xc) for xc in x_centers])\n\n        # Perform one time step\n        u1, fluxes = perform_single_step(N, dt, u0)\n        \n        # Extract the requested result\n        req_type = output_req[0]\n        if req_type == 'u_val':\n            index = output_req[1]\n            results.append(u1[index])\n        elif req_type == 'flux_abs':\n            index = output_req[1]\n            results.append(np.abs(fluxes[index]))\n        elif req_type == 'max_abs_change':\n            results.append(np.max(np.abs(u1 - u0)))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2448947"}, {"introduction": "While stable, the first-order upwind scheme is not perfectly accurate; its primary error manifests as an artificial smearing, or numerical diffusion, which can obscure sharp features in a solution. This advanced practice [@problem_id:2449005] offers a unique perspective by framing this concept as an inverse problem: given a numerically smeared result, you will estimate the underlying numerical diffusivity $\\mu_{\\text{num}}$ of the scheme. This exercise provides a powerful connection between the theoretical modified equation of a scheme and its observable, practical consequences, teaching you how to quantify one of the most important trade-offs in computational fluid dynamics.", "problem": "Consider the one-dimensional linear advection of a scalar field governed by $u_t + a\\,u_x = 0$ on the real line, with a Riemann step initial condition $u(x,0) = u_L$ for $x < x_0$ and $u(x,0) = u_R$ for $x > x_0$, where $a > 0$ is constant. An unknown but stable upwind finite difference scheme was used to compute the numerical solution at a final time $T$, on a uniform grid of spacing $\\Delta x$ with time step $\\Delta t$, and Courant–Friedrichs–Lewy (CFL) number $\\nu = a\\,\\Delta t / \\Delta x$. You are told only the following: the scheme’s leading-order modified equation is well modeled by the constant-coefficient advection–diffusion equation $u_t + a\\,u_x = \\mu_{\\text{num}}\\,u_{xx}$ with an unknown numerical diffusivity $\\mu_{\\text{num}} \\ge 0$, and the reported numerical output at time $T$ has been shifted into the co-moving frame so that the coordinate $\\xi = x - (x_0 + a\\,T)$ places the advected discontinuity nominally at $\\xi = 0$.\n\nDefine the $10$–$90$ thickness $\\delta_{10\\text{–}90}$ of the observed profile as the difference between the two $\\xi$-locations where $u$ reaches the levels $u = u_R + 0.1\\,(u_L - u_R)$ and $u = u_R + 0.9\\,(u_L - u_R)$, respectively. Assume the observation window is large enough that boundary effects are negligible. Under these assumptions, estimate the value of $\\mu_{\\text{num}}$ for each independent test configuration below.\n\nAll quantities are dimensionless; no physical units are required.\n\nTest suite (each item is an independent case):\n- Case A (general case): $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.005$, $\\nu = 0.5$, $T = 0.2$, $u_L = 1$, $u_R = 0$, measured $\\delta_{10\\text{–}90} = 0.08105244$.\n- Case B (boundary case with minimal smearing): $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.01$, $\\nu = 1$, $T = 0.2$, $u_L = 1$, $u_R = 0$, measured $\\delta_{10\\text{–}90} = 0$.\n- Case C (stronger smearing): $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.002$, $\\nu = 0.2$, $T = 0.1$, $u_L = 1$, $u_R = 0$, measured $\\delta_{10\\text{–}90} = 0.07249550416$.\n\nYour program must compute, for each case, the single scalar estimate of $\\mu_{\\text{num}}$ consistent with the given data and assumptions, and aggregate the three results in the specified format.\n\nFinal output format:\nYour program should produce a single line of output containing the three estimated values as a comma-separated list enclosed in square brackets (e.g., $[result1,result2,result3]$), in the order Case A, Case B, Case C.", "solution": "The problem statement is first subjected to a rigorous validation process.\n\n**Step 1: Extracted Givens**\n- Governing Partial Differential Equation (PDE): $u_t + a\\,u_x = 0$\n- Initial Condition: Riemann step, $u(x,0) = u_L$ for $x < x_0$ and $u(x,0) = u_R$ for $x > x_0$.\n- Advection Speed: $a > 0$, constant.\n- Numerical Scheme: An unspecified stable, upwind finite difference scheme.\n- Discretization Parameters: Grid spacing $\\Delta x$, time step $\\Delta t$, Courant–Friedrichs–Lewy (CFL) number $\\nu = a\\,\\Delta t / \\Delta x$.\n- Leading-Order Modified Equation: $u_t + a\\,u_x = \\mu_{\\text{num}}\\,u_{xx}$, with numerical diffusivity $\\mu_{\\text{num}} \\ge 0$.\n- Final Time: $T$.\n- Co-moving Coordinate: $\\xi = x - (x_0 + a\\,T)$.\n- Definition of Profile Thickness: $\\delta_{10\\text{–}90}$ is the difference in $\\xi$-coordinates where $u = u_R + 0.1\\,(u_L - u_R)$ and $u = u_R + 0.9\\,(u_L - u_R)$.\n- Test Case A: $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.005$, $\\nu = 0.5$, $T = 0.2$, $u_L = 1$, $u_R = 0$, measured $\\delta_{10\\text{–}90} = 0.08105244$.\n- Test Case B: $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.01$, $\\nu = 1$, $T = 0.2$, $u_L = 1$, $u_R = 0$, measured $\\delta_{10\\text{–}90} = 0$.\n- Test Case C: $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.002$, $\\nu = 0.2$, $T = 0.1$, $u_L = 1$, $u_R = 0$, measured $\\delta_{10\\text{–}90} = 0.07249550416$.\n\n**Step 2: Validation of Extracted Givens**\nThe problem is scientifically grounded, as it is based on the standard concept of the modified equation for analyzing the dissipative error of numerical schemes for hyperbolic conservation laws. The advection-diffusion equation is the correct leading-order model for a first-order upwind scheme. The problem is well-posed, objective, and self-contained, providing all necessary information to derive a relationship between the measured profile thickness and the unknown numerical diffusivity. The data provided for each test case is internally consistent, e.g., for Case A, $a\\,\\Delta t / \\Delta x = 1 \\times 0.005 / 0.01 = 0.5$, which matches the given $\\nu = 0.5$. The problem has no identifiable flaws.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A solution will be derived based on first principles.\n\nThe fundamental principle is that the observed numerical solution at time $T$ is approximated by the analytical solution of the modified advection-diffusion equation, $u_t + a\\,u_x = \\mu_{\\text{num}}\\,u_{xx}$, with the specified step initial condition. We will derive this analytical solution, use it to express the thickness $\\delta_{10\\text{–}90}$ as a function of $\\mu_{\\text{num}}$ and $T$, and then invert this relationship to find $\\mu_{\\text{num}}$.\n\nFirst, we transform the PDE into a co-moving frame of reference, $\\eta = x - a t$. The spatial and temporal derivatives transform as $\\partial/\\partial x \\to \\partial/\\partial \\eta$ and $\\partial/\\partial t \\to \\partial/\\partial t - a\\,\\partial/\\partial \\eta$. Substituting these into the modified equation yields:\n$$\n(\\frac{\\partial u}{\\partial t} - a\\frac{\\partial u}{\\partial \\eta}) + a(\\frac{\\partial u}{\\partial \\eta}) = \\mu_{\\text{num}}\\frac{\\partial^2 u}{\\partial \\eta^2}\n$$\nThis simplifies to the standard one-dimensional heat (or diffusion) equation in the moving frame:\n$$\n\\frac{\\partial u}{\\partial t} = \\mu_{\\text{num}}\\frac{\\partial^2 u}{\\partial \\eta^2}\n$$\nThe initial condition $u(x,0) = u_L$ for $x < x_0$ and $u(x,0) = u_R$ for $x > x_0$ becomes, in a shifted frame $\\eta' = x - x_0 - at$, a step at $\\eta'=0$: $u(\\eta',0) = u_L$ for $\\eta' < 0$ and $u(\\eta',0) = u_R$ for $\\eta' > 0$. The well-known solution to the heat equation for such initial data is given in terms of the complementary error function, $\\text{erfc}(z)$:\n$$\nu(\\eta', t) = u_R + \\frac{u_L - u_R}{2} \\text{erfc}\\left(\\frac{\\eta'}{\\sqrt{4 \\mu_{\\text{num}} t}}\\right)\n$$\nThe problem specifies the final observation in the coordinate $\\xi = x - (x_0 + aT)$. At the final time $t=T$, the coordinate $\\eta'$ is $\\eta' = x - x_0 - aT$, which is identical to $\\xi$. Therefore, the solution profile at time $T$ is:\n$$\nu(\\xi, T) = u_R + \\frac{u_L - u_R}{2} \\text{erfc}\\left(\\frac{\\xi}{\\sqrt{4 \\mu_{\\text{num}} T}}\\right)\n$$\nNext, we use the definition of $\\delta_{10\\text{–}90}$. We must find the locations $\\xi_{90}$ and $\\xi_{10}$ corresponding to the solution values $u = u_R + 0.9\\,(u_L - u_R)$ and $u = u_R + 0.1\\,(u_L - u_R)$, respectively.\nFor the $90\\%$ level (at $\\xi_{90}$):\n$$\nu_R + 0.9(u_L - u_R) = u_R + \\frac{u_L - u_R}{2} \\text{erfc}\\left(\\frac{\\xi_{90}}{\\sqrt{4 \\mu_{\\text{num}} T}}\\right)\n$$\n$$\n0.9 = \\frac{1}{2} \\text{erfc}(z_{90}) \\implies \\text{erfc}(z_{90}) = 1.8 \\implies 1 - \\text{erf}(z_{90}) = 1.8 \\implies \\text{erf}(z_{90}) = -0.8\n$$\nwhere $z_{90} = \\xi_{90} / \\sqrt{4 \\mu_{\\text{num}} T}$. Thus, $z_{90} = \\text{erf}^{-1}(-0.8) = -\\text{erf}^{-1}(0.8)$.\n\nFor the $10\\%$ level (at $\\xi_{10}$):\n$$\nu_R + 0.1(u_L - u_R) = u_R + \\frac{u_L - u_R}{2} \\text{erfc}\\left(\\frac{\\xi_{10}}{\\sqrt{4 \\mu_{\\text{num}} T}}\\right)\n$$\n$$\n0.1 = \\frac{1}{2} \\text{erfc}(z_{10}) \\implies \\text{erfc}(z_{10}) = 0.2 \\implies 1 - \\text{erf}(z_{10}) = 0.2 \\implies \\text{erf}(z_{10}) = 0.8\n$$\nwhere $z_{10} = \\xi_{10} / \\sqrt{4 \\mu_{\\text{num}} T}$. Thus, $z_{10} = \\text{erf}^{-1}(0.8)$.\n\nFrom these, we find the locations:\n$$\n\\xi_{90} = \\sqrt{4 \\mu_{\\text{num}} T} \\cdot z_{90} = -\\sqrt{4 \\mu_{\\text{num}} T} \\cdot \\text{erf}^{-1}(0.8)\n$$\n$$\n\\xi_{10} = \\sqrt{4 \\mu_{\\text{num}} T} \\cdot z_{10} = \\sqrt{4 \\mu_{\\text{num}} T} \\cdot \\text{erf}^{-1}(0.8)\n$$\nSince $u_L > u_R$, the solution profile decreases as $\\xi$ increases, so $\\xi_{10} > \\xi_{90}$. The thickness $\\delta_{10\\text{–}90}$ is defined as the difference between these locations:\n$$\n\\delta_{10\\text{–}90} = \\xi_{10} - \\xi_{90} = 2 \\sqrt{4 \\mu_{\\text{num}} T} \\cdot \\text{erf}^{-1}(0.8) = 4 \\sqrt{\\mu_{\\text{num}} T} \\cdot \\text{erf}^{-1}(0.8)\n$$\nWe now invert this expression to solve for $\\mu_{\\text{num}}$:\n$$\n\\sqrt{\\mu_{\\text{num}}} = \\frac{\\delta_{10\\text{–}90}}{4 \\sqrt{T} \\cdot \\text{erf}^{-1}(0.8)}\n$$\n$$\n\\mu_{\\text{num}} = \\left( \\frac{\\delta_{10\\text{–}90}}{4 \\sqrt{T} \\cdot \\text{erf}^{-1}(0.8)} \\right)^2 = \\frac{\\delta_{10\\text{–}90}^2}{16 \\cdot T \\cdot (\\text{erf}^{-1}(0.8))^2}\n$$\nThis is the final formula for estimating $\\mu_{\\text{num}}$. This formula will be applied to each test case.\nFor Case B, $\\delta_{10\\text{–}90} = 0$, which immediately gives $\\mu_{\\text{num}} = 0$. This is physically correct, as a CFL number of $\\nu=1$ for the first-order upwind scheme results in exact advection with zero numerical diffusion.\nFor Cases A and C, we substitute the provided values for $\\delta_{10\\text{–}90}$ and $T$ into the derived formula. The constant $\\text{erf}^{-1}(0.8)$ is a known numerical value.\nThe calculations proceed as follows:\n- Let $C = \\text{erf}^{-1}(0.8) \\approx 0.9061938$.\n- Case A: $\\mu_{\\text{num,A}} = \\frac{(0.08105244)^2}{16 \\cdot 0.2 \\cdot C^2} = 0.0025$.\n- Case B: $\\mu_{\\text{num,B}} = \\frac{0^2}{16 \\cdot 0.2 \\cdot C^2} = 0$.\n- Case C: $\\mu_{\\text{num,C}} = \\frac{(0.07249550416)^2}{16 \\cdot 0.1 \\cdot C^2} = 0.004$.\nThese values constitute the solution to the problem.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import erfinv\n\ndef solve():\n    \"\"\"\n    Computes the numerical diffusivity mu_num for each test case based on the \n    analytical solution to the advection-diffusion equation.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (measured_delta_10_90, final_time_T)\n    test_cases = [\n        (0.08105244, 0.2),       # Case A\n        (0.0, 0.2),              # Case B\n        (0.07249550416, 0.1)     # Case C\n    ]\n\n    results = []\n\n    # Pre-calculate the constant C_erf = erf_inv(0.8)\n    # This value is derived from the definition of the 10-90 thickness.\n    try:\n        C_erf = erfinv(0.8)\n    except NameError:\n        # Fallback in case scipy is not available, though problem spec guarantees it.\n        # This constant is approximately 0.9061938024368232.\n        # This fallback is for robustness and not expected to be used.\n        C_erf = 0.9061938024368232\n\n    # The formula for mu_num is derived from the analytical solution:\n    # delta = 4 * sqrt(mu_num * T) * C_erf\n    # mu_num = delta^2 / (16 * T * C_erf^2)\n\n    for delta, T in test_cases:\n        # Handle the special case where delta is zero, corresponding to no numerical\n        # diffusion (e.g., when CFL=1 for first-order upwind).\n        # This also avoids any potential floating point inaccuracies.\n        if delta == 0.0:\n            mu_num = 0.0\n        else:\n            # Apply the derived formula to estimate the numerical diffusivity.\n            mu_num = delta**2 / (16 * T * C_erf**2)\n        \n        results.append(mu_num)\n\n    # The problem asks for the results as a comma-separated list in brackets.\n    # The default string conversion for floats is sufficient here.\n    # Example: [0.0025, 0.0, 0.004]\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2449005"}]}