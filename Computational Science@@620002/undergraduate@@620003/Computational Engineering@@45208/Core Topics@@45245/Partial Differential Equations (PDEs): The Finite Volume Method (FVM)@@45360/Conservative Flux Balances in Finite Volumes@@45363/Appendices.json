{"hands_on_practices": [{"introduction": "The foundation of the finite volume method lies in applying an integral conservation law to discrete volumes. This first practice challenges you to derive the semi-discrete equations for a diffusion process on a hexagonal grid, starting from first principles. This exercise will strengthen your ability to translate a continuous partial differential equation into a discrete system by applying the divergence theorem and approximating fluxes at cell faces, a core skill in computational modeling. [@problem_id:2379775]", "problem": "Consider a transient diffusion process of a scalar field $\\phi(\\boldsymbol{x}, t)$ in a two-dimensional ($2$D) domain tessellated by congruent regular hexagonal control volumes. The governing partial differential equation (PDE) in conservative form is\n$$\n\\frac{\\partial \\phi}{\\partial t} + \\nabla \\cdot \\boldsymbol{j} = s(\\boldsymbol{x}, t),\n$$\nwith constitutive relation (Fickâ€™s law) $\\boldsymbol{j} = - D(\\boldsymbol{x}) \\nabla \\phi$, where $D(\\boldsymbol{x})$ is a strictly positive diffusivity field and $s(\\boldsymbol{x}, t)$ is a volumetric source. Use the finite volume method (FVM) with unit thickness ($1$) in the out-of-plane direction.\n\nFocus on a single interior hexagonal control volume $V_i$ with area $A_i$ and boundary $\\partial V_i$ comprised of $6$ straight faces indexed by $k \\in \\{1,\\dots,6\\}$. Let $\\ell_k$ denote the length of face $k$ and $\\boldsymbol{n}_k$ its outward unit normal. Let $N_k$ denote the neighbor control volume that shares face $k$ with $V_i$. Denote by $\\phi_i(t)$ and $D_i$ the cell-averaged scalar and diffusivity in $V_i$, and by $\\phi_{N_k}(t)$ and $D_{N_k}$ the corresponding quantities in neighbor $N_k$. Assume the line connecting the centroids of $V_i$ and $N_k$ is orthogonal to face $k$, with centroid-to-centroid distance $d_k>0$. Define the cell-averaged source $S_i(t) \\equiv \\frac{1}{A_i}\\int_{V_i} s(\\boldsymbol{x}, t)\\,\\mathrm{d}V$.\n\nApproximate the face-normal diffusive flux across face $k$ using a two-point, face-normal gradient based on cell-center values and the harmonic average of diffusivity at the interface:\n$$\nD_{f,k} \\equiv \\frac{2 D_i D_{N_k}}{D_i + D_{N_k}},\n\\qquad\n\\nabla \\phi \\cdot \\boldsymbol{n}_k \\big|_{f,k} \\approx \\frac{\\phi_{N_k} - \\phi_i}{d_k}.\n$$\n\nStarting from first principles (local conservation over $V_i$), derive the semi-discrete conservative flux balance for the interior cell $i$ and express its right-hand side in terms of $\\{\\phi_i, \\phi_{N_k}, D_i, D_{N_k}, \\ell_k, d_k, A_i, S_i\\}$. Your final answer must be a single closed-form analytic expression for the right-hand side $R_i$ defined implicitly by\n$$\nA_i \\,\\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} \\;=\\; R_i.\n$$\nDo not include an equality sign in your final result. No numerical evaluation or rounding is required. Express your answer symbolically.", "solution": "The problem statement is scientifically grounded, well-posed, and objective. It describes a standard application of the finite volume method to a transient diffusion equation, a fundamental task in computational engineering. All necessary data and approximations are provided, and there are no contradictions or ambiguities. I will proceed with the derivation.\n\nThe starting point is the governing partial differential equation in conservative form, provided as:\n$$\n\\frac{\\partial \\phi}{\\partial t} + \\nabla \\cdot \\boldsymbol{j} = s(\\boldsymbol{x}, t)\n$$\nThe finite volume method is based on the integral form of the conservation law. We integrate this equation over the arbitrary interior control volume $V_i$:\n$$\n\\int_{V_i} \\left( \\frac{\\partial \\phi}{\\partial t} + \\nabla \\cdot \\boldsymbol{j} \\right) \\mathrm{d}V = \\int_{V_i} s(\\boldsymbol{x}, t) \\mathrm{d}V\n$$\nUsing the linearity of the integral, this equation is split into three terms:\n$$\n\\int_{V_i} \\frac{\\partial \\phi}{\\partial t} \\mathrm{d}V + \\int_{V_i} \\nabla \\cdot \\boldsymbol{j} \\mathrm{d}V = \\int_{V_i} s(\\boldsymbol{x}, t) \\mathrm{d}V\n$$\nWe now treat each term by introducing the provided approximations for cell-averaged quantities.\n\nThe first term represents the time rate of change of the scalar $\\phi$ integrated over the volume $V_i$. The cell-averaged scalar $\\phi_i(t)$ is defined as $\\phi_i(t) \\equiv \\frac{1}{A_i}\\int_{V_i} \\phi(\\boldsymbol{x}, t)\\,\\mathrm{d}V$. Since the control volume $V_i$ is fixed in time, we can interchange the order of integration and time differentiation:\n$$\n\\int_{V_i} \\frac{\\partial \\phi}{\\partial t} \\mathrm{d}V = \\frac{\\mathrm{d}}{\\mathrm{d}t} \\int_{V_i} \\phi(\\boldsymbol{x}, t) \\mathrm{d}V = \\frac{\\mathrm{d}}{\\mathrm{d}t} \\left(A_i \\phi_i(t)\\right) = A_i \\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t}\n$$\nThe right-hand side of the equation is the integrated source term. Using the provided definition of the cell-averaged source, $S_i(t) \\equiv \\frac{1}{A_i}\\int_{V_i} s(\\boldsymbol{x}, t)\\,\\mathrm{d}V$, we obtain:\n$$\n\\int_{V_i} s(\\boldsymbol{x}, t) \\mathrm{d}V = A_i S_i(t)\n$$\nThe second term on the left-hand side is the volume integral of the divergence of the flux vector $\\boldsymbol{j}$. We apply the Gauss-Ostrogradsky divergence theorem to convert this volume integral into a surface integral over the boundary $\\partial V_i$:\n$$\n\\int_{V_i} \\nabla \\cdot \\boldsymbol{j} \\mathrm{d}V = \\oint_{\\partial V_i} \\boldsymbol{j} \\cdot \\boldsymbol{n} \\, \\mathrm{d}S\n$$\nwhere $\\boldsymbol{n}$ is the outward-pointing unit normal vector on the boundary surface. The boundary of the hexagonal control volume consists of $6$ faces, indexed by $k \\in \\{1,\\dots,6\\}$. The total flux through the boundary is the sum of the fluxes through each face:\n$$\n\\oint_{\\partial V_i} \\boldsymbol{j} \\cdot \\boldsymbol{n} \\, \\mathrm{d}S = \\sum_{k=1}^{6} \\int_{f_k} \\boldsymbol{j} \\cdot \\boldsymbol{n}_k \\, \\mathrm{d}S\n$$\nThe problem specifies a $2$D domain with a unit thickness of $1$. The surface element $\\mathrm{d}S$ on a face $f_k$ is therefore $\\mathrm{d}\\ell \\times 1$, where $\\mathrm{d}\\ell$ is the differential line element. Assuming the flux component normal to the face, $\\boldsymbol{j} \\cdot \\boldsymbol{n}_k$, is constant across each face $f_k$, the integral over the face is approximated as:\n$$\n\\int_{f_k} \\boldsymbol{j} \\cdot \\boldsymbol{n}_k \\, \\mathrm{d}\\ell \\approx (\\boldsymbol{j} \\cdot \\boldsymbol{n}_k)|_{f,k} \\cdot \\ell_k\n$$\nwhere $\\ell_k$ is the length of face $k$.\nWe now substitute the constitutive relation (Fick's law), $\\boldsymbol{j} = - D(\\boldsymbol{x}) \\nabla \\phi$, into the face flux term. The normal component of the flux vector at the face is $(\\boldsymbol{j} \\cdot \\boldsymbol{n}_k)|_{f,k} = (-D \\nabla\\phi \\cdot \\boldsymbol{n}_k)|_{f,k}$. This is approximated using the provided face diffusivity $D_{f,k}$ and face-normal gradient:\n$$\n(\\boldsymbol{j} \\cdot \\boldsymbol{n}_k)|_{f,k} \\approx -D_{f,k} \\left(\\nabla \\phi \\cdot \\boldsymbol{n}_k \\big|_{f,k}\\right)\n$$\nSubstituting the given expressions for $D_{f,k}$ and the gradient approximation:\n$$\nD_{f,k} = \\frac{2 D_i D_{N_k}}{D_i + D_{N_k}} \\quad \\text{and} \\quad \\nabla \\phi \\cdot \\boldsymbol{n}_k \\big|_{f,k} \\approx \\frac{\\phi_{N_k} - \\phi_i}{d_k}\n$$\nThe total flux out of cell $i$ through face $k$ is thus approximated as:\n$$\n\\int_{f_k} \\boldsymbol{j} \\cdot \\boldsymbol{n}_k \\, \\mathrm{d}\\ell \\approx - \\left( \\frac{2 D_i D_{N_k}}{D_i + D_{N_k}} \\right) \\left( \\frac{\\phi_{N_k} - \\phi_i}{d_k} \\right) \\ell_k\n$$\nWe now assemble all the approximated terms into the integral balance equation:\n$$\nA_i \\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} + \\sum_{k=1}^{6} \\left[ - \\frac{2 \\ell_k D_i D_{N_k}}{d_k (D_i + D_{N_k})} (\\phi_{N_k} - \\phi_i) \\right] = A_i S_i\n$$\nThe problem asks for the right-hand side, $R_i$, of the equation $A_i \\,\\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} = R_i$. We rearrange the derived equation to this form by moving the summation term to the right-hand side:\n$$\nA_i \\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} = A_i S_i - \\sum_{k=1}^{6} \\left[ - \\frac{2 \\ell_k D_i D_{N_k}}{d_k (D_i + D_{N_k})} (\\phi_{N_k} - \\phi_i) \\right]\n$$\nSimplifying this expression yields the final form for the right-hand side:\n$$\nA_i \\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} = A_i S_i + \\sum_{k=1}^{6} \\frac{2 \\ell_k D_i D_{N_k}}{d_k (D_i + D_{N_k})} (\\phi_{N_k} - \\phi_i)\n$$\nThis expression, representing the net effect of sources and diffusive fluxes from all neighbors, is the required right-hand side $R_i$. The time dependencies of $\\phi_i$, $\\phi_{N_k}$, and $S_i$ are implicitly understood.", "answer": "$$\n\\boxed{\\sum_{k=1}^{6} \\left( \\frac{2 \\ell_k D_i D_{N_k}}{d_k (D_i + D_{N_k})} \\left(\\phi_{N_k} - \\phi_i\\right) \\right) + A_i S_i}\n$$", "id": "2379775"}, {"introduction": "Moving from derivation to implementation, this practice guides you through building a complete one-dimensional finite volume solver. A key focus here is the use of \"ghost cells\" to elegantly enforce boundary conditions, a standard and powerful technique in finite volume method codes. By implementing a solver for a problem with a known analytical solution, you will gain hands-on experience in code validation and error analysis, ensuring your numerical model is physically and mathematically sound. [@problem_id:2379797]", "problem": "You are to implement a one-dimensional conservative Finite Volume Method (FVM) for a steady, source-free diffusion problem with mixed boundary conditions using ghost cells. The fundamental base is the integral conservation law: the net outward flux through the boundary of any control volume is zero in the steady, source-free case. The governing law is that the total flux is the diffusive flux, $\\; \\vec{f} = -k \\nabla u \\;$, where $k$ is a positive constant, and $u$ is a scalar field. On the domain $\\; x \\in [0,L] \\;$, assume $k$ is spatially constant and positive. The conservation statement for a control volume is that the integral of $\\vec{f} \\cdot \\hat{n}$ over its boundary is zero. In one space dimension, this reduces to the statement that the left-face flux equals the right-face flux for each control volume at steady state.\n\nUse a uniform grid of $\\; N \\;$ control volumes with centers located at $\\; x_i \\in (0,L) \\;$ and spacing $\\; \\Delta x = L/N \\;$. Employ ghost cells outside the domain to impose boundary conditions. Approximate face gradients by second-order central differences between adjacent cell centers (including ghost centers for boundary faces). The left boundary at $\\; x=0 \\;$ is a Neumann condition on the total flux, $\\; \\vec{f} \\cdot \\hat{n} = g \\;$, where $\\; \\hat{n} \\;$ is the outward unit normal. The right boundary at $\\; x=L \\;$ is a Dirichlet condition on the solution, $\\; u = u_R \\;$. All quantities are to be treated as dimensionless.\n\nTasks to complete:\n- Starting from the integral conservation law and the definition of diffusive flux, construct a conservative flux balance for each interior control volume using second-order central differences for the face-normal gradients. Introduce ghost cells to enforce the left Neumann boundary $\\; \\vec{f} \\cdot \\hat{n} = g \\;$ and the right Dirichlet boundary $\\; u = u_R \\;$ at the discrete level via face fluxes and face values. Assemble the resulting linear system for the interior unknowns $\\; \\{u_i\\}_{i=1}^{N} \\;$ and solve it.\n- For validation, derive the exact continuous solution implied by the conservation law and the given boundary conditions and evaluate it at the control-volume centers $\\; x_i = (i - \\tfrac{1}{2}) \\Delta x \\;$ for $\\; i = 1, \\dots, N \\;$. Compute the maximum absolute error between the numerical and exact solutions over all interior centers.\n- Design your implementation to be parameterized by $\\; (N, L, k, g, u_R) \\;$.\n\nTest suite:\n- Case $\\; 1 \\;$ (happy path): $\\; N = 10 \\;$, $\\; L = 1.0 \\;$, $\\; k = 2.0 \\;$, $\\; g = 1.0 \\;$, $\\; u_R = 3.0 \\;$.\n- Case $\\; 2 \\;$ (single cell edge case): $\\; N = 1 \\;$, $\\; L = 1.0 \\;$, $\\; k = 2.0 \\;$, $\\; g = 1.0 \\;$, $\\; u_R = 3.0 \\;$.\n- Case $\\; 3 \\;$ (sign change for flux): $\\; N = 8 \\;$, $\\; L = 2.0 \\;$, $\\; k = 0.5 \\;$, $\\; g = -1.0 \\;$, $\\; u_R = 0.0 \\;$.\n- Case $\\; 4 \\;$ (small domain, large conductivity): $\\; N = 3 \\;$, $\\; L = 0.3 \\;$, $\\; k = 10.0 \\;$, $\\; g = 1.5 \\;$, $\\; u_R = 1.2 \\;$.\n\nRequired final program behavior:\n- Implement the conservative FVM with ghost cells as described, solve the linear system for each test case, compute the maximum absolute error against the exact solution at cell centers for that case, and report that error.\n- Output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test cases, with each error rounded to $\\; 10 \\;$ decimal places (e.g., $\\;[0.0000000000,0.1234500000,0.0000000000,0.0000000000]\\;$).", "solution": "The user requires the implementation of a one-dimensional, steady-state, source-free Finite Volume Method (FVM) for the diffusion equation using a conservative flux balance approach with ghost cells for boundary conditions.\n\nThe governing conservation law in integral form for a control volume $V$ is $\\oint_{\\partial V} \\vec{f} \\cdot \\hat{n} \\, dS = 0$, where $\\vec{f}$ is the flux vector and $\\hat{n}$ is the outward unit normal. In one dimension on the domain $x \\in [0, L]$, for a control volume $V_i = [x_{i-1/2}, x_{i+1/2}]$, this reduces to the flux balance:\n$$f(x_{i+1/2}) - f(x_{i-1/2}) = 0$$\nThis implies that the flux $f(x)$ is constant throughout the domain. The flux is defined as $\\vec{f} = -k \\nabla u$, which in one dimension is $f(x) = -k \\frac{du}{dx}$, where $k$ is a positive constant.\n\nThe boundary conditions are:\n1.  Left boundary at $x=0$: A Neumann condition on the total flux, $\\vec{f} \\cdot \\hat{n} = g$. The outward normal is $\\hat{n} = -1$ in the $x$-direction, so $(f(0)\\hat{i}) \\cdot (-\\hat{i}) = -f(0) = g$. This means the flux at the left boundary is $f(0) = -g$. Since the flux must be constant everywhere, we have $f(x) = -g$ for all $x \\in [0, L]$.\n2.  Right boundary at $x=L$: A Dirichlet condition, $u(L) = u_R$.\n\nFrom the constant flux relation, we can derive the exact analytical solution:\n$$-k \\frac{du}{dx} = -g \\implies \\frac{du}{dx} = \\frac{g}{k}$$\nIntegrating with respect to $x$ yields:\n$$u(x) = \\frac{g}{k}x + C$$\nApplying the Dirichlet condition at $x=L$:\n$$u(L) = \\frac{g}{k}L + C = u_R \\implies C = u_R - \\frac{gL}{k}$$\nThus, the exact solution is:\n$$u_{exact}(x) = \\frac{g}{k}x + u_R - \\frac{gL}{k} = \\frac{g}{k}(x - L) + u_R$$\n\nFor the FVM implementation, we discretize the domain into $N$ uniform control volumes (cells) of width $\\Delta x = L/N$. The center of cell $i$ is at $x_i = (i - \\frac{1}{2})\\Delta x$ for $i = 1, \\dots, N$. The faces are located at $x_{i+1/2} = i \\Delta x$.\n\nThe flux balance for cell $i$ is $f_{i+1/2} - f_{i-1/2} = 0$, where $f_{i \\pm 1/2}$ is the flux at the cell faces. We approximate the face flux using a second-order central difference between adjacent cell centers. For a generic face at $x_{i-1/2}$ between cell $i-1$ and cell $i$, the flux is:\n$$f_{i-1/2} \\approx -k \\frac{u_i - u_{i-1}}{\\Delta x}$$\nSubstituting this into the flux balance equation for an interior cell $i$ (where $1 < i < N$):\n$$-k \\frac{u_{i+1} - u_i}{\\Delta x} - \\left(-k \\frac{u_i - u_{i-1}}{\\Delta x}\\right) = 0$$\n$$\\implies -u_{i-1} + 2u_i - u_{i+1} = 0$$\n\nTo handle the boundary conditions, we introduce a ghost cell $0$ to the left of cell $1$ and a ghost cell $N+1$ to the right of cell $N$.\nAt the left boundary ($x=0$, face $x_{1/2}$), the flux is known: $f_{1/2} = -g$. We enforce this by setting our numerical flux approximation equal to this value:\n$$f_{1/2} = -k \\frac{u_1 - u_0}{\\Delta x} = -g \\implies u_0 = u_1 - \\frac{g \\Delta x}{k}$$\nThe FVM equation for cell $i=1$ is $-u_0 + 2u_1 - u_2 = 0$. Substituting the expression for the ghost value $u_0$:\n$$-(u_1 - \\frac{g \\Delta x}{k}) + 2u_1 - u_2 = 0 \\implies u_1 - u_2 = -\\frac{g \\Delta x}{k}$$\n\nAt the right boundary ($x=L$, face $x_{N+1/2}$), the field value is known: $u(L) = u_R$. We use a second-order approximation for the value at the boundary by assuming it is the average of the adjacent cell-center values:\n$$u_R = \\frac{u_N + u_{N+1}}{2} \\implies u_{N+1} = 2u_R - u_N$$\nThe FVM equation for cell $i=N$ is $-u_{N-1} + 2u_N - u_{N+1} = 0$. Substituting the expression for $u_{N+1}$:\n$$-u_{N-1} + 2u_N - (2u_R - u_N) = 0 \\implies -u_{N-1} + 3u_N = 2u_R$$\n\nThis results in a linear system $A\\mathbf{u} = \\mathbf{b}$ for the unknown cell-center values $\\mathbf{u} = [u_1, u_2, \\dots, u_N]^T$. For $N > 1$, the matrix $A$ and vector $\\mathbf{b}$ are constructed as follows:\n-   Row $1$: $A_{1,1}=1$, $A_{1,2}=-1$. $b_1 = -g\\Delta x/k$.\n-   Rows $i=2, \\dots, N-1$: $A_{i,i-1}=-1$, $A_{i,i}=2$, $A_{i,i+1}=-1$. $b_i = 0$.\n-   Row $N$: $A_{N,N-1}=-1$, $A_{N,N}=3$. $b_N = 2u_R$.\n\nFor the edge case $N=1$, the cell is bounded by both domain boundaries. The FVM equation $-u_0 + 2u_1 - u_2 = 0$ requires substituting both ghost cell values:\n$$-(u_1 - \\frac{g \\Delta x}{k}) + 2u_1 - (2u_R - u_1) = 0$$\n$$2u_1 = 2u_R - \\frac{g \\Delta x}{k} \\implies u_1 = u_R - \\frac{g \\Delta x}{2k}$$\nSince $\\Delta x=L$ for $N=1$, this is $u_1 = u_R - gL/(2k)$.\n\nThe numerical solution is obtained by solving this linear system. The error is then calculated as the maximum absolute difference between the numerical solution $u_i$ and the exact solution $u_{exact}(x_i)$ at all cell centers. Notably, since the exact solution is a linear function of $x$, its second and higher derivatives are zero. The truncation errors of the FVM stencil and the boundary condition approximations involve these higher-order derivatives. Consequently, the method is exact for this specific problem, and the computed error should be zero up to machine floating-point precision.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_fvm(N, L, k, g, u_R):\n    \"\"\"\n    Solves a 1D steady-state diffusion problem using the Finite Volume Method.\n\n    This function implements the conservative FVM with ghost cells for a\n    1D diffusion problem on the domain [0, L] with a Neumann condition at x=0\n    and a Dirichlet condition at x=L.\n\n    Args:\n        N (int): Number of control volumes.\n        L (float): Length of the domain.\n        k (float): Diffusion coefficient.\n        g (float): Prescribed flux at the left boundary (f_vec . n_out = g).\n        u_R (float): Prescribed value at the right boundary.\n\n    Returns:\n        float: The maximum absolute error between the numerical and exact solutions.\n    \"\"\"\n    dx = L / N\n\n    # Calculate numerical solution u_numerical\n    if N == 1:\n        # Special case for a single control volume\n        u_numerical = np.array([u_R - (g * dx) / (2 * k)])\n    else:\n        # Assemble the linear system A*u = b for N > 1\n        A = np.zeros((N, N))\n        b = np.zeros(N)\n\n        # First row (Neumann BC at x=0)\n        A[0, 0] = 1.0\n        A[0, 1] = -1.0\n        b[0] = -g * dx / k\n\n        # Interior rows\n        for i in range(1, N - 1):\n            A[i, i - 1] = -1.0\n            A[i, i] = 2.0\n            A[i, i + 1] = -1.0\n            b[i] = 0.0\n\n        # Last row (Dirichlet BC at x=L)\n        A[N - 1, N - 2] = -1.0\n        A[N - 1, N - 1] = 3.0\n        b[N - 1] = 2 * u_R\n\n        # Solve the linear system for cell-centered values\n        u_numerical = np.linalg.solve(A, b)\n\n    # Calculate cell center coordinates\n    x_coords = dx * (np.arange(1, N + 1) - 0.5)\n\n    # Calculate the exact solution at cell centers\n    # u_exact(x) = (g/k)*(x - L) + u_R\n    u_exact = (g / k) * (x_coords - L) + u_R\n\n    # Compute the maximum absolute error\n    max_error = np.max(np.abs(u_numerical - u_exact))\n\n    return max_error\n\n\ndef solve():\n    \"\"\"\n    Runs the FVM solver for the test cases specified in the problem statement\n    and prints the results in the required format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (N, L, k, g, u_R)\n        (10, 1.0, 2.0, 1.0, 3.0),\n        (1, 1.0, 2.0, 1.0, 3.0),\n        (8, 2.0, 0.5, -1.0, 0.0),\n        (3, 0.3, 10.0, 1.5, 1.2),\n    ]\n\n    results = []\n    for case in test_cases:\n        N, L, k, g, u_R = case\n        error = solve_fvm(N, L, k, g, u_R)\n        results.append(f\"{error:.10f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2379797"}, {"introduction": "What makes a finite volume scheme truly \"conservative\"? This final practice explores that question by tasking you with implementing a scheme that, while plausible, intentionally violates the strict flux-balancing principle. By simulating the non-physical creation or destruction of mass and comparing it to a theoretical prediction, you will gain a crucial, first-hand understanding of why the conservative form is a non-negotiable cornerstone of the finite volume method. [@problem_id:2379829]", "problem": "Consider the one-dimensional linear advection equation on a periodic domain with uniform cells, posed in dimensionless form,\n$$\n\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0,\\quad x \\in [0,L],\\quad t \\ge 0,\n$$\nwith periodic boundary conditions on $[0,L]$ and a spatially constant advection speed $a \\in \\mathbb{R}$. Let the domain be partitioned into $N$ uniform finite volumes (cells) of width $\\Delta x = L/N$, with cell centers at $x_i = (i+\\tfrac{1}{2})\\Delta x$ for $i \\in \\{0,1,\\dots,N-1\\}$. Let $u_i^n$ denote the cell average of $u(x,t)$ over cell $i$ at discrete time level $t^n = n\\,\\Delta t$ for integer $n \\ge 0$ and time step $\\Delta t > 0$. All quantities are dimensionless.\n\nDefine the numerical face flux at the interface $x_{i+\\frac{1}{2}}$ by the upwind choice\n$$\nF_{i+\\frac{1}{2}}^n =\n\\begin{cases}\na\\,u_i^n, & a \\ge 0, \\\\\na\\,u_{i+1}^n, & a < 0,\n\\end{cases}\n$$\nwith periodic indexing modulo $N$. Consider the following face-imbalanced update, which uses weights that differ on the right and left faces of each cell:\n$$\nu_i^{n+1} \\;=\\; u_i^n \\;-\\; \\frac{\\Delta t}{\\Delta x}\\Big[(1+\\eta)\\,F_{i+\\frac{1}{2}}^n \\;-\\; (1-\\eta)\\,F_{i-\\frac{1}{2}}^n\\Big],\n$$\nwhere $\\eta \\in \\mathbb{R}$ is a fixed bias parameter. This update appears plausible as a weighted face balance but is not a strict telescoping flux difference when $\\eta \\ne 0$.\n\nInitial data are prescribed as cell averages sampled from the periodic profile\n$$\nu(x,0) = 1 + 0.2 \\,\\sin(2\\pi x/L).\n$$\nYou must implement the scheme above on a uniform grid with periodic boundaries and compute, for each test case, the final relative global mass error at the final time $t^{n_{\\text{steps}}} = n_{\\text{steps}}\\,\\Delta t$. The discrete global mass at time level $n$ is\n$$\nM^n = \\Delta x \\sum_{i=0}^{N-1} u_i^n.\n$$\nReport, for each test case, the pair of floats\n$$\n\\Big[\\,E_{\\text{num}},\\;E_{\\text{theory}}\\,\\Big]\n\\quad\\text{with}\\quad\nE_{\\text{num}} = \\frac{M^{n_{\\text{steps}}} - M^0}{M^0},\\qquad\nE_{\\text{theory}} = \\left(1 - 2\\,\\eta\\,a\\,\\frac{\\Delta t}{\\Delta x}\\right)^{n_{\\text{steps}}} - 1,\n$$\nwhere $E_{\\text{theory}}$ is the analytically predicted relative mass error implied by the update rule above under periodic indexing.\n\nTest suite (all with $L=1$):\n- Case $1$ (happy path): $N=100$, $a=1$, $\\Delta t=0.005$, $\\eta=0.1$, $n_{\\text{steps}}=40$.\n- Case $2$ (conservative boundary): $N=64$, $a=1$, $\\Delta t=0.0046875$, $\\eta=0$, $n_{\\text{steps}}=50$.\n- Case $3$ (mass growth with negative advection): $N=80$, $a=-1.5$, $\\Delta t=\\tfrac{1}{300}$, $\\eta=0.25$, $n_{\\text{steps}}=5$.\n- Case $4$ (zero advection): $N=32$, $a=0$, $\\Delta t=0.01$, $\\eta=0.3$, $n_{\\text{steps}}=100$.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list of lists, where each inner list corresponds to a test case and is ordered as $[E_{\\text{num}},E_{\\text{theory}}]$. For example, the output must have the form\n$$\n\\big[ [e_{1,\\text{num}},e_{1,\\text{theory}}], [e_{2,\\text{num}},e_{2,\\text{theory}}], [e_{3,\\text{num}},e_{3,\\text{theory}}], [e_{4,\\text{num}},e_{4,\\text{theory}}] \\big].\n$$\nOnly this single line should be printed.", "solution": "The problem as stated is subjected to validation.\n\n**Step 1: Extracted Givens**\n*   **Governing Equation**: One-dimensional linear advection equation, $\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0$.\n*   **Domain**: $x \\in [0,L]$, $t \\ge 0$, with periodic boundary conditions.\n*   **Advection Speed**: $a \\in \\mathbb{R}$, constant.\n*   **Discretization**: $N$ uniform finite volumes of width $\\Delta x = L/N$. Cell centers are at $x_i = (i+\\tfrac{1}{2})\\Delta x$ for $i \\in \\{0,1,\\dots,N-1\\}$.\n*   **State Variable**: $u_i^n$ is the cell-averaged value in cell $i$ at time $t^n = n\\Delta t$.\n*   **Numerical Flux**: Upwind flux at face $x_{i+\\frac{1}{2}}$ is $F_{i+\\frac{1}{2}}^n = \\begin{cases} a\\,u_i^n, & a \\ge 0 \\\\ a\\,u_{i+1}^n, & a < 0 \\end{cases}$, with periodic indexing.\n*   **Update Scheme**: $u_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x}\\Big[(1+\\eta)\\,F_{i+\\frac{1}{2}}^n - (1-\\eta)\\,F_{i-\\frac{1}{2}}^n\\Big]$ for a bias parameter $\\eta \\in \\mathbb{R}$.\n*   **Initial Condition**: Cell averages sampled from $u(x,0) = 1 + 0.2 \\,\\sin(2\\pi x/L)$.\n*   **Quantity of Interest**: The discrete global mass $M^n = \\Delta x \\sum_{i=0}^{N-1} u_i^n$.\n*   **Outputs**: For each test case, report the pair $[E_{\\text{num}}, E_{\\text{theory}}]$, where:\n    *   $E_{\\text{num}} = \\frac{M^{n_{\\text{steps}}} - M^0}{M^0}$\n    *   $E_{\\text{theory}} = \\left(1 - 2\\,\\eta\\,a\\,\\frac{\\Delta t}{\\Delta x}\\right)^{n_{\\text{steps}}} - 1$\n*   **Test Cases**: All with $L=1$.\n    1.  $N=100$, $a=1$, $\\Delta t=0.005$, $\\eta=0.1$, $n_{\\text{steps}}=40$.\n    2.  $N=64$, $a=1$, $\\Delta t=0.0046875$, $\\eta=0$, $n_{\\text{steps}}=50$.\n    3.  $N=80$, $a=-1.5$, $\\Delta t=\\tfrac{1}{300}$, $\\eta=0.25$, $n_{\\text{steps}}=5$.\n    4.  $N=32$, $a=0$, $\\Delta t=0.01$, $\\eta=0.3$, $n_{\\text{steps}}=100$.\n\n**Step 2: Validation**\nThe problem is subjected to rigorous scientific and logical scrutiny.\n*   **Scientific Grounding**: The problem concerns the numerical solution of the linear advection equation, a fundamental topic in computational engineering and physics. The proposed numerical scheme is a variation of the standard finite volume method. The analysis of its non-conservative properties is a valid and instructive exercise. The theoretical mass error formula is derivable from first principles as shown below, confirming its scientific soundness.\n*   **Well-Posedness**: The problem is well-posed. All required parameters, initial conditions, boundary conditions, and definitions are provided. The tasks are specified without ambiguity. The stability of the scheme for the given test cases is satisfied, as the Courant-Friedrichs-Lewy (CFL) number, $C = |a|\\frac{\\Delta t}{\\Delta x}$, is less than or equal to $1$ for all cases.\n*   **Consistency and Completeness**: The problem is self-contained and internally consistent. There are no missing data or contradictory constraints.\n\n**Step 3: Verdict**\nThe problem is deemed **valid**. It is a clear, consistent, and scientifically sound problem in numerical analysis.\n\n**Solution Derivation**\nThe fundamental principle of a finite volume method is the conservation of a quantity, which is enforced by ensuring that the sum of fluxes entering and leaving a domain boundary is zero. The standard conservative update for cell $i$ is $u_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x}(F_{i+\\frac{1}{2}}^n - F_{i-\\frac{1}{2}}^n)$. When summed over all cells on a periodic domain, the flux terms form a telescoping sum that cancels to zero, and thus the total mass $M^n = \\Delta x \\sum_{i=0}^{N-1} u_i^n$ is conserved, $M^{n+1} = M^n$.\n\nThe specified scheme, $u_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x}\\Big[(1+\\eta)\\,F_{i+\\frac{1}{2}}^n - (1-\\eta)\\,F_{i-\\frac{1}{2}}^n\\Big]$, is a non-conservative modification for $\\eta \\ne 0$. We must analyze the evolution of the total mass $M^n$ under this rule.\n\nSum the update rule over all cells $i=0, \\dots, N-1$ and multiply by $\\Delta x$:\n$$\n\\Delta x \\sum_{i=0}^{N-1} u_i^{n+1} = \\Delta x \\sum_{i=0}^{N-1} u_i^n - \\Delta t \\sum_{i=0}^{N-1} \\Big[(1+\\eta)\\,F_{i+\\frac{1}{2}}^n - (1-\\eta)\\,F_{i-\\frac{1}{2}}^n\\Big]\n$$\nThis is equivalent to:\n$$\nM^{n+1} = M^n - \\Delta t \\left[ (1+\\eta)\\sum_{i=0}^{N-1}F_{i+\\frac{1}{2}}^n - (1-\\eta)\\sum_{i=0}^{N-1}F_{i-\\frac{1}{2}}^n \\right]\n$$\nDue to periodic indexing, summing over faces $i-\\frac{1}{2}$ is identical to summing over faces $i+\\frac{1}{2}$: $\\sum_{i=0}^{N-1} F_{i-\\frac{1}{2}}^n = \\sum_{j=-1}^{N-2} F_{j+\\frac{1}{2}}^n = \\sum_{j=0}^{N-1} F_{j+\\frac{1}{2}}^n$. Let $\\mathcal{F}^n = \\sum_{i=0}^{N-1}F_{i+\\frac{1}{2}}^n$. The expression simplifies:\n$$\nM^{n+1} = M^n - \\Delta t \\Big[ (1+\\eta)\\mathcal{F}^n - (1-\\eta)\\mathcal{F}^n \\Big] = M^n - 2\\eta\\Delta t \\mathcal{F}^n\n$$\nNow, we evaluate the total flux $\\mathcal{F}^n$. The upwind flux definition is used.\nIf $a \\ge 0$, then $F_{i+\\frac{1}{2}}^n = a u_i^n$. The sum is $\\mathcal{F}^n = \\sum_{i=0}^{N-1} a u_i^n = a \\sum_{i=0}^{N-1} u_i^n = \\frac{a}{\\Delta x} M^n$.\nIf $a < 0$, then $F_{i+\\frac{1}{2}}^n = a u_{i+1}^n$. The sum is $\\mathcal{F}^n = \\sum_{i=0}^{N-1} a u_{i+1}^n = a \\sum_{j=1}^{N} u_j^n$. Due to periodicity ($u_N^n=u_0^n$), this is again $\\mathcal{F}^n = a \\sum_{j=0}^{N-1} u_j^n = \\frac{a}{\\Delta x} M^n$.\nThis result holds for any $a \\in \\mathbb{R}$.\n\nSubstituting the expression for $\\mathcal{F}^n$ into the mass evolution equation gives a recurrence relation for $M^n$:\n$$\nM^{n+1} = M^n - 2\\eta\\Delta t \\left(\\frac{a}{\\Delta x} M^n\\right) = M^n \\left(1 - 2\\eta a \\frac{\\Delta t}{\\Delta x}\\right)\n$$\nThis is a geometric progression. After $n_{\\text{steps}}$ time steps, the final mass $M^{n_{\\text{steps}}}$ is related to the initial mass $M^0$ by:\n$$\nM^{n_{\\text{steps}}} = M^0 \\left(1 - 2\\eta a \\frac{\\Delta t}{\\Delta x}\\right)^{n_{\\text{steps}}}\n$$\nThe theoretical relative mass error $E_{\\text{theory}}$ is therefore:\n$$\nE_{\\text{theory}} = \\frac{M^{n_{\\text{steps}}} - M^0}{M^0} = \\left(1 - 2\\eta a \\frac{\\Delta t}{\\Delta x}\\right)^{n_{\\text{steps}}} - 1\n$$\nThis confirms the formula provided in the problem statement. The task reduces to implementing the numerical scheme and comparing its computed mass error $E_{\\text{num}}$ with this analytical prediction.\n\n**Algorithm Implementation**\n1.  For each test case, define the grid parameters: cell width $\\Delta x = L/N$ and cell center coordinates $x_i = (i+0.5)\\Delta x$ for $i \\in \\{0, \\dots, N-1\\}$.\n2.  Initialize the solution vector $u^0$ by sampling the initial profile at the cell centers: $u_i^0 = 1 + 0.2 \\sin(2\\pi x_i/L)$.\n3.  Calculate the initial global mass $M^0 = \\Delta x \\sum_{i=0}^{N-1} u_i^0$. For the given initial profile, analytical integration shows $M^0 = L$. Pointwise sampling also yields $M^0 = L$ due to the symmetry of the sine function.\n4.  Begin the time-stepping loop, from $n=0$ to $n_{\\text{steps}}-1$.\n5.  Inside the loop, for the current solution $u^n$:\n    a.  Compute the vector of face fluxes $F_{i+\\frac{1}{2}}^n$. This is done based on the sign of $a$. Vectorized operations using array shifts (e.g., `numpy.roll`) are efficient for handling periodic boundaries.\n    b.  Construct the fluxes at the left faces, $F_{i-\\frac{1}{2}}^n$, by a periodic shift of the right-face flux vector.\n    c.  Apply the face-imbalanced update formula to compute the entire solution vector $u^{n+1}$ simultaneously.\n6.  After the loop terminates, calculate the final global mass $M^{n_{\\text{steps}}} = \\Delta x \\sum_{i=0}^{N-1} u_i^{n_{\\text{steps}}}$.\n7.  Compute the numerical and theoretical relative mass errors, $E_{\\text{num}}$ and $E_{\\text{theory}}$, using their definitions.\n8.  Store the pair $[E_{\\text{num}}, E_{\\text{theory}}]$ and proceed to the next test case.\n9.  Format the final collection of results as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef run_simulation(L, N, a, dt, eta, n_steps):\n    \"\"\"\n    Runs a single simulation of the face-imbalanced finite volume scheme.\n\n    Args:\n        L (float): Domain length.\n        N (int): Number of cells.\n        a (float): Advection speed.\n        dt (float): Time step size.\n        eta (float): Face imbalance parameter.\n        n_steps (int): Number of time steps.\n\n    Returns:\n        list: A list containing [E_num, E_theory].\n    \"\"\"\n    # 1. Grid setup\n    dx = L / N\n    # Cell centers, not cell boundaries\n    x_centers = (np.arange(N) + 0.5) * dx\n\n    # 2. Initial condition\n    # Sampled at cell centers.\n    u = 1.0 + 0.2 * np.sin(2 * np.pi * x_centers / L)\n\n    # 3. Initial mass calculation\n    # For this IC, M0 is analytically L, but we compute from the discrete data\n    # to maintain consistency for E_num calculation.\n    M0 = dx * np.sum(u)\n\n    # 4. Time-stepping loop\n    for _ in range(n_steps):\n        # 5a. Compute fluxes at right faces (i + 1/2) using upwinding\n        if a >= 0:\n            # Information comes from cell i (the current cell)\n            flux_right_faces = a * u\n        else:\n            # Information comes from cell i+1 (the cell to the right)\n            # np.roll(u, -1) provides the array of right neighbors u_{i+1}\n            flux_right_faces = a * np.roll(u, -1)\n        \n        # 5b. Compute fluxes at left faces (i - 1/2)\n        # The flux at face i-1/2 is the same as flux_right_faces for cell i-1.\n        # This is a circular shift to the right.\n        flux_left_faces = np.roll(flux_right_faces, 1)\n\n        # 5c. Apply the face-imbalanced update rule\n        u = u - (dt / dx) * ((1 + eta) * flux_right_faces - (1 - eta) * flux_left_faces)\n\n    # 6. Final mass calculation\n    Mf = dx * np.sum(u)\n\n    # 7. Compute numerical and theoretical errors\n    E_num = (Mf - M0) / M0\n    E_theory = (1 - 2 * eta * a * dt / dx)**n_steps - 1\n\n    # In cases where theory predicts exactly 0, ensure output is 0.0, not a small float.\n    if np.isclose(E_num, 0.0):\n        E_num = 0.0\n    if np.isclose(E_theory, 0.0):\n        E_theory = 0.0\n\n    return [E_num, E_theory]\n\ndef solve():\n    \"\"\"\n    Defines and runs the test suite, then prints the results in the required format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (L, N, a, dt, eta, n_steps)\n        # Case 1: happy path\n        (1.0, 100, 1.0, 0.005, 0.1, 40),\n        # Case 2: conservative boundary\n        (1.0, 64, 1.0, 0.0046875, 0.0, 50),\n        # Case 3: mass growth with negative advection\n        (1.0, 80, -1.5, 1.0/300.0, 0.25, 5),\n        # Case 4: zero advection\n        (1.0, 32, 0.0, 0.01, 0.3, 100),\n    ]\n\n    results = []\n    for case in test_cases:\n        result = run_simulation(*case)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    # The format string produces output like: [[v1,v2],[v3,v4]]\n    # where map(str, results) converts each inner list [v1, v2] to its string '[v1, v2]'.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2379829"}]}