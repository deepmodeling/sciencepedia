{"hands_on_practices": [{"introduction": "To effectively use numerical methods, we must first learn how to select an appropriate time step $h$. This initial exercise provides a practical application of stability theory to a physical system. By analyzing a model of thermal relaxation, you will practice the essential skill of deriving the critical time step $h_{crit}$, the threshold above which the explicit Euler method becomes numerically unstable, ensuring your simulations remain reliable and accurate [@problem_id:2172206].", "problem": "The thermal behavior of a small, highly conductive metal probe in an environment with a rapidly oscillating temperature is being modeled. The probe's temperature, $T(t)$, as a function of time $t$ is described by the first-order linear ordinary differential equation:\n$$ \\frac{dT}{dt} = -k \\left( T - T_{ambient}(t) \\right) $$\nwhere the ambient temperature is given by $T_{ambient}(t) = T_0 + A \\sin(\\omega t)$. The initial temperature of the probe is $T(0) = T_i$.\n\nFor a specific experiment, the parameters are:\n- Thermal relaxation rate constant, $k = 100 \\text{ s}^{-1}$\n- Mean ambient temperature, $T_0 = 300 \\text{ K}$\n- Amplitude of temperature oscillation, $A = 2 \\text{ K}$\n- Angular frequency of oscillation, $\\omega = 1 \\text{ rad/s}$\n- Initial probe temperature, $T_i = 301 \\text{ K}$\n\nTo solve for $T(t)$, a numerical approach using the explicit Euler method is employed. Due to the high value of $k$, this differential equation is considered \"stiff,\" and it is known that the explicit Euler method can become numerically unstable, producing wildly oscillating and divergent solutions if the time step, $h$, is too large.\n\nDetermine the critical time step, $h_{crit}$, above which the explicit Euler method for this system becomes unstable. Express your answer in seconds as an exact decimal value.", "solution": "The problem asks for the critical time step $h_{crit}$ for the stability of the explicit Euler method applied to a given ordinary differential equation (ODE).\n\nThe explicit Euler method for a first-order ODE of the form $\\frac{dy}{dt} = f(t, y)$ is given by the update rule:\n$$y_{n+1} = y_n + h \\cdot f(t_n, y_n)$$\nwhere $y_n$ is the numerical approximation of $y(t_n)$ and $h$ is the time step.\n\nThe given ODE is:\n$$ \\frac{dT}{dt} = -k \\left( T - T_{ambient}(t) \\right) = -k \\left( T - (T_0 + A \\sin(\\omega t)) \\right) $$\nLet's rearrange this to match the standard form $y' = \\lambda y + g(t)$. Here, our dependent variable is $T$.\n$$ \\frac{dT}{dt} = -kT + k(T_0 + A \\sin(\\omega t)) $$\nThis is a linear first-order ODE. The function $f(t, T)$ is:\n$$ f(t, T) = -kT + k(T_0 + A \\sin(\\omega t)) $$\n\nThe stability of the explicit Euler method for a linear ODE is determined by the behavior of its homogeneous part. We can analyze the stability by considering a test equation of the form $y' = \\lambda y$, where $\\lambda$ is the eigenvalue of the system's Jacobian matrix. For a single linear ODE, $\\lambda$ is simply the coefficient of the dependent variable.\n\nIn our equation, the coefficient of $T$ is $-k$. So, we set $\\lambda = -k$. The non-homogeneous part of the equation, $g(t) = k(T_0 + A \\sin(\\omega t))$, and the initial condition $T(0) = T_i$ do not affect the stability condition of the method itself.\n\nThe explicit Euler method applied to the test equation $y' = \\lambda y$ is:\n$$ y_{n+1} = y_n + h(\\lambda y_n) = (1 + h\\lambda) y_n $$\nFor the numerical solution to remain stable (not grow unboundedly), the magnitude of the amplification factor $(1 + h\\lambda)$ must be less than or equal to one. This gives the stability condition:\n$$ |1 + h\\lambda| \\le 1 $$\nNow, we substitute the value of $\\lambda = -k$ into this condition:\n$$ |1 + h(-k)| \\le 1 $$\n$$ |1 - hk| \\le 1 $$\nThis absolute value inequality is equivalent to the compound inequality:\n$$ -1 \\le 1 - hk \\le 1 $$\nWe can split this into two separate inequalities:\n\n1.  $1 - hk \\le 1$\n    $$ -hk \\le 0 $$\n    Since both the time step $h$ and the rate constant $k$ are positive physical quantities ($h0, k0$), their product $hk$ is always positive. Therefore, $-hk$ is always negative, and the inequality $-hk \\le 0$ is always satisfied.\n\n2.  $-1 \\le 1 - hk$\n    $$ hk \\le 2 $$\n    $$ h \\le \\frac{2}{k} $$\n\nCombining the results, the explicit Euler method is stable for time steps $h$ in the range $0  h \\le \\frac{2}{k}$. The critical time step, $h_{crit}$, is the maximum value of $h$ for which the method is stable. Therefore, the method becomes unstable for any $h  \\frac{2}{k}$. The boundary of this stability region is:\n$$ h_{crit} = \\frac{2}{k} $$\nThe problem provides the value of the thermal relaxation rate constant as $k = 100 \\text{ s}^{-1}$. Substituting this value into our expression for $h_{crit}$:\n$$ h_{crit} = \\frac{2}{100 \\text{ s}^{-1}} = 0.02 \\text{ s} $$\nThus, the critical time step is 0.02 seconds. For any time step larger than this, the numerical solution will become unstable. The values of $T_0$, $A$, $\\omega$, and $T_i$ are not needed to determine the stability threshold. The problem asks for the answer in seconds as an exact decimal.", "answer": "$$\\boxed{0.02}$$", "id": "2172206"}, {"introduction": "Having learned to calculate the stability limit, we now explore the dramatic consequences of violating it, especially in \"stiff\" systems where different physical processes occur on vastly different timescales. This problem presents a scenario where a chosen time step is stable for one part of the system but unstable for another. Calculating the numerical result under these conditions provides a powerful and memorable lesson on how instability can lead to a solution that is not just inaccurate, but qualitatively and catastrophically wrong [@problem_id:2438055].", "problem": "Consider the linear, time-invariant system of ordinary differential equations (ODEs)\n$$\n\\frac{d\\mathbf{u}}{dt} = A\\,\\mathbf{u}, \\quad A = \\begin{pmatrix} -1  0 \\\\ 0  -100 \\end{pmatrix},\n$$\nwith initial condition\n$$\n\\mathbf{u}(0) = \\begin{pmatrix} 1 \\\\ 10^{-3} \\end{pmatrix}.\n$$\nStarting from $t=0$, apply the explicit Euler time-stepping method with constant step size $h = 0.05$ up to final time $T = 0.20$. Determine the explicit Euler approximation to the second component at time $T$, denoted $u_2(T)$, and provide its exact value (no rounding).", "solution": "The problem will first be subject to rigorous validation.\n\nStep 1: Extract Givens\nThe given information is as follows:\n- A system of ordinary differential equations (ODEs): $\\frac{d\\mathbf{u}}{dt} = A\\,\\mathbf{u}$\n- The matrix $A$: $A = \\begin{pmatrix} -1  0 \\\\ 0  -100 \\end{pmatrix}$\n- The initial condition: $\\mathbf{u}(0) = \\begin{pmatrix} 1 \\\\ 10^{-3} \\end{pmatrix}$\n- The numerical method: explicit Euler time-stepping method\n- The constant time step size: $h = 0.05$\n- The starting time: $t=0$\n- The final time: $T = 0.20$\n- The quantity to be determined: The explicit Euler approximation to the second component at time $T$, denoted $u_2(T)$.\n\nStep 2: Validate Using Extracted Givens\nThe problem is a standard exercise in the field of numerical analysis for ordinary differential equations, specifically computational engineering. It is scientifically grounded, well-posed, and objective. The problem asks for the result of applying a specific, well-defined numerical algorithm (explicit Euler) to a well-defined linear system of ODEs with given parameters.\n\nThe system is a stiff system, as the eigenvalues of matrix $A$ are $\\lambda_1 = -1$ and $\\lambda_2 = -100$, which have significantly different magnitudes. The stability of the explicit Euler method for an equation of the form $y' = \\lambda y$ is governed by the condition $|1 + h\\lambda| \\le 1$. For the second component of the system, we have $\\lambda_2 = -100$ and $h=0.05$. This gives $|1 + (0.05)(-100)| = |1 - 5| = |-4| = 4$. Since $4  1$, the time step $h=0.05$ violates the stability condition for the faster-decaying component.\n\nThis violation does not render the problem invalid. It simply means the numerical solution for this component will be unstable and will diverge from the true solution. The task is to compute the result of this unstable process, which is a mathematically sound and well-defined calculation. The problem provides all necessary information and contains no contradictions or ambiguities.\n\nStep 3: Verdict and Action\nThe problem is valid. A solution will be derived.\n\nThe explicit Euler method for the system $\\frac{d\\mathbf{u}}{dt} = A\\mathbf{u}$ is given by the recurrence relation:\n$$\n\\mathbf{u}^{n+1} = \\mathbf{u}^n + h A \\mathbf{u}^n\n$$\nwhere $\\mathbf{u}^n$ is the numerical approximation of $\\mathbf{u}(t_n)$ at time $t_n = n h$. This can be rewritten as:\n$$\n\\mathbf{u}^{n+1} = (\\mathbf{I} + hA) \\mathbf{u}^n\n$$\nwhere $\\mathbf{I}$ is the identity matrix.\n\nThe matrix $A$ is diagonal, which means the system of equations is decoupled. The two components $u_1$ and $u_2$ of the vector $\\mathbf{u} = \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix}$ evolve independently. We are asked to find the approximation for the second component, $u_2(T)$. The governing differential equation for $u_2$ is:\n$$\n\\frac{du_2}{dt} = -100 u_2\n$$\nwith the initial condition $u_2(0) = 10^{-3}$.\n\nThe explicit Euler scheme for this scalar equation is:\n$$\nu_2^{n+1} = u_2^n + h (-100 u_2^n) = (1 - 100h) u_2^n\n$$\nWe are given $h = 0.05$. Substituting this value into the recurrence relation gives:\n$$\nu_2^{n+1} = (1 - 100 \\times 0.05) u_2^n = (1 - 5) u_2^n = -4 u_2^n\n$$\nThis relation describes how the numerical approximation $u_2$ evolves from one time step to the next. The initial value is $u_2^0 = u_2(0) = 10^{-3}$.\n\nThe final time is $T = 0.20$ and the time step is $h=0.05$. The total number of steps, $N$, required to reach the final time is:\n$$\nN = \\frac{T}{h} = \\frac{0.20}{0.05} = 4\n$$\nWe need to find the value of $u_2$ after $4$ steps, which is $u_2^4$. We can apply the recurrence relation four times:\n\n- At $n=0$, $t_1 = 0.05$:\n$$\nu_2^1 = -4 u_2^0 = -4 \\times 10^{-3}\n$$\n- At $n=1$, $t_2 = 0.10$:\n$$\nu_2^2 = -4 u_2^1 = -4 \\times (-4 \\times 10^{-3}) = 16 \\times 10^{-3}\n$$\n- At $n=2$, $t_3 = 0.15$:\n$$\nu_2^3 = -4 u_2^2 = -4 \\times (16 \\times 10^{-3}) = -64 \\times 10^{-3}\n$$\n- At $n=3$, $t_4 = 0.20 = T$:\n$$\nu_2^4 = -4 u_2^3 = -4 \\times (-64 \\times 10^{-3}) = 256 \\times 10^{-3}\n$$\nAlternatively, the solution to the recurrence relation $u_2^{n+1} = (-4) u_2^n$ is $u_2^n = (-4)^n u_2^0$. For $n=4$:\n$$\nu_2^4 = (-4)^4 u_2^0 = 256 \\times 10^{-3}\n$$\nThe value of the explicit Euler approximation to the second component at time $T=0.20$ is:\n$$\nu_2(T) \\approx u_2^4 = 256 \\times 10^{-3} = 0.256\n$$\nThis result, a large and positive value, is in stark contrast to the true solution $u_2(t) = 10^{-3} \\exp(-100t)$, which at $t=0.20$ is $u_2(0.20) = 10^{-3} \\exp(-20)$, a number extremely close to zero. The large error is the direct consequence of the numerical instability noted during the validation phase. The calculation is nonetheless correct according to the rules of the specified method.", "answer": "$$\n\\boxed{0.256}\n$$", "id": "2438055"}, {"introduction": "Our final practice moves from analyzing specific cases to building a global, geometric understanding of stability. The behavior of the explicit Euler method is governed by the complex parameter $z = h\\lambda$, and the stability region is a specific domain in the complex plane. In this coding exercise, you will write a program to \"paint\" this region by classifying various points $z$ as stable, neutrally stable, or unstable, thereby translating abstract mathematical theory into a tangible computational map [@problem_id:2441545].", "problem": "Consider the explicit Euler method applied to the linear test equation in the complex plane, resulting in the linear recurrence\n$$\nw_{n+1} = (1+z)\\,w_n,\n$$\nwhere $z \\in \\mathbb{C}$ is a fixed complex parameter and $w_0 \\in \\mathbb{C}$ is an initial condition. Define asymptotic stability, neutral stability, and instability for this recurrence as follows:\n- Asymptotically stable: $\\lim_{n \\to \\infty} w_n = 0$ for every $w_0 \\in \\mathbb{C}$,\n- Neutrally stable: $\\{|w_n|\\}_{n \\in \\mathbb{N}}$ is bounded and does not converge to $0$ for some $w_0 \\in \\mathbb{C}$,\n- Unstable: $\\{|w_n|\\}_{n \\in \\mathbb{N}}$ is unbounded for some $w_0 \\in \\mathbb{C}$.\n\nFor each fixed $z \\in \\mathbb{C}$, define the divergence rate per step (in the extended real numbers) by the limit\n$$\ng(z) = \\lim_{n \\to \\infty} \\frac{1}{n}\\,\\ln |w_n|,\n$$\nwhere $\\ln$ denotes the natural logarithm. If the limit equals negative infinity, represent it as $-\\infty$.\n\nWrite a complete and runnable program that, for the following test suite of complex parameters $z$, determines for each $z$:\n- an integer stability classification $S(z)$ with the convention $S(z)=1$ for asymptotically stable, $S(z)=0$ for neutrally stable, and $S(z)=-1$ for unstable, and\n- the divergence rate $g(z)$.\n\nUse the test suite:\n- $z_1 = -0.5 + 0.0\\,\\mathrm{i}$,\n- $z_2 = -2.0 + 0.0\\,\\mathrm{i}$,\n- $z_3 = 0.2 + 0.3\\,\\mathrm{i}$,\n- $z_4 = -1.0 + 0.0\\,\\mathrm{i}$,\n- $z_5 = -0.5 + 0.8660254037844386\\,\\mathrm{i}$,\n- $z_6 = -1.0 + 0.5\\,\\mathrm{i}$,\n- $z_7 = 1.0 + 0.0\\,\\mathrm{i}$.\n\nYour program must compute $S(z_k)$ and $g(z_k)$ for each $k \\in \\{1,2,3,4,5,6,7\\}$ using only the mathematical definitions given above. All floating-point outputs for $g(z_k)$ must be rounded to $6$ decimal places; if $g(z_k)=-\\infty$, output it as $-\\infty$ without rounding. The final program output must be a single line containing a comma-separated list enclosed in square brackets of the form\n$$\n[\\;S(z_1),\\,g(z_1),\\,S(z_2),\\,g(z_2),\\,\\dots,\\,S(z_7),\\,g(z_7)\\;],\n$$\nwith no spaces. For example, an admissible format is\n$$\n[1,-0.693147,0,0.000000,\\dots].\n$$", "solution": "The problem statement is subjected to validation.\n\nStep 1: Extract Givens\n- Recurrence relation: $$w_{n+1} = (1+z)\\,w_n$$\n- Parameters: `$z \\in \\mathbb{C}$`, `$w_0 \\in \\mathbb{C}$`.\n- Stability definitions:\n  - Asymptotically stable: `$\\lim_{n \\to \\infty} w_n = 0$` for every `$w_0 \\in \\mathbb{C}$`.\n  - Neutrally stable: `$\\{|w_n|\\}_{n \\in \\mathbb{N}}$` is bounded and does not converge to `$0$` for some `$w_0 \\in \\mathbb{C}$`.\n  - Unstable: `$\\{|w_n|\\}_{n \\in \\mathbb{N}}$` is unbounded for some `$w_0 \\in \\mathbb{C}$`.\n- Divergence rate: $$g(z) = \\lim_{n \\to \\infty} \\frac{1}{n}\\,\\ln |w_n|$$\n- Stability classification: `$S(z)=1$` for asymptotically stable, `$S(z)=0$` for neutrally stable, `$S(z)=-1$` for unstable.\n- Test suite:\n  - `$z_1 = -0.5 + 0.0\\,\\mathrm{i}$`\n  - `$z_2 = -2.0 + 0.0\\,\\mathrm{i}$`\n  - `$z_3 = 0.2 + 0.3\\,\\mathrm{i}$`\n  - `$z_4 = -1.0 + 0.0\\,\\mathrm{i}$`\n  - `$z_5 = -0.5 + 0.8660254037844386\\,\\mathrm{i}$`\n  - `$z_6 = -1.0 + 0.5\\,\\mathrm{i}$`\n  - `$z_7 = 1.0 + 0.0\\,\\mathrm{i}$`\n- Output requirement: A single-line list `$[\\;S(z_1),\\,g(z_1),\\,S(z_2),\\,g(z_2),\\,\\dots,\\,S(z_7),\\,g(z_7)\\;]$` with `$g(z_k)$` rounded to `$6$` decimal places or as `$-\\infty$`.\n\nStep 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, well-posed, and objective. It is a standard problem in the stability analysis of numerical methods for ordinary differential equations, specifically the application of the explicit Euler method to the linear test equation `$y' = \\lambda y$`, for which `$z = h\\lambda$`. The definitions of stability and the divergence rate are standard and unambiguous. The problem is self-contained and free of contradictions or scientifically unsound premises.\n\nStep 3: Verdict and Action\nThe problem is valid. A reasoned solution will be provided.\n\nThe provided linear recurrence relation is\n$$w_{n+1} = (1+z) w_n$$\nwhere `$z \\in \\mathbb{C}$` is a constant parameter. This is a first-order linear homogeneous recurrence relation with constant coefficients. Its solution can be found by induction. Starting from an initial condition `$w_0$`, we have:\n`$w_1 = (1+z)w_0$`\n`$w_2 = (1+z)w_1 = (1+z)^2 w_0$`\n`$w_3 = (1+z)w_2 = (1+z)^3 w_0$`\nand so on. The general solution is given by\n$$w_n = (1+z)^n w_0$$\nThe long-term behavior of the sequence `$\\{w_n\\}$` is determined by the complex number `$1+z$`, which is known as the amplification factor. Let us analyze the magnitude of `$w_n$`:\n$$|w_n| = |(1+z)^n w_0| = |(1+z)^n| |w_0| = |1+z|^n |w_0|$$\nLet `$R = |1+z|$`. Then, `$|w_n| = R^n |w_0|$`. The stability of the system depends entirely on the value of `$R$`.\n\n1.  **Stability Analysis**: We use the provided definitions.\n    - If `$R  1$`, then `$\\lim_{n \\to \\infty} R^n = 0$`. Consequently, `$\\lim_{n \\to \\infty} |w_n| = 0$`, which implies `$\\lim_{n \\to \\infty} w_n = 0$` for any `$w_0$`. This corresponds to asymptotic stability. Thus, `$S(z)=1$`.\n    - If `$R = 1$`, then `$|w_n| = 1^n |w_0| = |w_0|$` for all `$n$`. For any `$w_0 \\neq 0$`, the sequence of magnitudes `$\\{|w_n|\\}$` is a constant positive sequence `$\\{|w_0|, |w_0|, \\dots\\}$`. It is bounded but does not converge to `$0$`. This matches the definition of neutral stability. Thus, `$S(z)=0$`.\n    - If `$R  1$`, then `$\\lim_{n \\to \\infty} R^n = \\infty$`. For any `$w_0 \\neq 0$`, the sequence `$\\{|w_n|\\}$` is unbounded. This corresponds to instability. Thus, `$S(z)=-1$`.\n    In summary, the stability classification `$S(z)$` is determined by comparing `$|1+z|$` to `$1$`.\n\n2.  **Divergence Rate Analysis**: The divergence rate `$g(z)$` is defined as:\n    $$g(z) = \\lim_{n \\to \\infty} \\frac{1}{n}\\,\\ln |w_n|$$\n    Assuming a non-trivial initial condition `$w_0 \\neq 0$`, we substitute `$|w_n| = R^n |w_0|$`:\n    $$g(z) = \\lim_{n \\to \\infty} \\frac{1}{n}\\,\\ln (R^n |w_0|) = \\lim_{n \\to \\infty} \\frac{1}{n}\\,(n \\ln R + \\ln|w_0|) = \\lim_{n \\to \\infty} \\left( \\ln R + \\frac{\\ln|w_0|}{n} \\right)$$\n    As `$n \\to \\infty$`, the term `$\\frac{\\ln|w_0|}{n} \\to 0$`. Therefore, the limit is:\n    $$g(z) = \\ln R = \\ln|1+z|$$\n    A special case arises if `$|1+z|=0$`, which occurs when `$z=-1$`. In this case, `$w_n=0$` for `$n \\ge 1$`, and `$\\ln|w_n| = \\ln(0) = -\\infty$`. The limit `$g(-1)$` is `$-\\infty$`. This is consistent with the formula `$g(-1) = \\ln|1-1| = \\ln(0)$`.\n\nNow we apply these findings to each `$z_k$` from the test suite.\n\n- For `$z_1 = -0.5 + 0.0\\,\\mathrm{i}$`:\n  `$1+z_1 = 0.5 + 0.0\\,\\mathrm{i}$`.\n  `$R_1 = |1+z_1| = 0.5$`.\n  Since `$R_1  1$`, the system is asymptotically stable, `$S(z_1)=1$`.\n  `$g(z_1) = \\ln(0.5) \\approx -0.693147$`.\n\n- For `$z_2 = -2.0 + 0.0\\,\\mathrm{i}$`:\n  `$1+z_2 = -1.0 + 0.0\\,\\mathrm{i}$`.\n  `$R_2 = |1+z_2| = 1$`.\n  Since `$R_2 = 1$`, the system is neutrally stable, `$S(z_2)=0$`.\n  `$g(z_2) = \\ln(1) = 0.000000$`.\n\n- For `$z_3 = 0.2 + 0.3\\,\\mathrm{i}$`:\n  `$1+z_3 = 1.2 + 0.3\\,\\mathrm{i}$`.\n  `$R_3 = |1+z_3| = \\sqrt{1.2^2 + 0.3^2} = \\sqrt{1.44 + 0.09} = \\sqrt{1.53}$`.\n  Since `$R_3 = \\sqrt{1.53} \\approx 1.2369  1$`, the system is unstable, `$S(z_3)=-1$`.\n  `$g(z_3) = \\ln(\\sqrt{1.53}) = \\frac{1}{2}\\ln(1.53) \\approx 0.212634$`.\n\n- For `$z_4 = -1.0 + 0.0\\,\\mathrm{i}$`:\n  `$1+z_4 = 0.0 + 0.0\\,\\mathrm{i}$`.\n  `$R_4 = |1+z_4| = 0$`.\n  Since `$R_4  1$`, the system is asymptotically stable, `$S(z_4)=1$`. The sequence reaches `$0$` in one step.\n  `$g(z_4) = \\ln(0) = -\\infty$`.\n\n- For `$z_5 = -0.5 + 0.8660254037844386\\,\\mathrm{i}$`:\n  This is `$z_5 = -0.5 + i\\frac{\\sqrt{3}}{2}$`.\n  `$1+z_5 = 0.5 + i\\frac{\\sqrt{3}}{2}$`.\n  `$R_5 = |1+z_5| = \\sqrt{(0.5)^2 + (\\frac{\\sqrt{3}}{2})^2} = \\sqrt{0.25 + 0.75} = \\sqrt{1} = 1$`.\n  Since `$R_5 = 1$`, the system is neutrally stable, `$S(z_5)=0$`.\n  `$g(z_5) = \\ln(1) = 0.000000$`.\n\n- For `$z_6 = -1.0 + 0.5\\,\\mathrm{i}$`:\n  `$1+z_6 = 0.0 + 0.5\\,\\mathrm{i}$`.\n  `$R_6 = |1+z_6| = |0.5\\mathrm{i}| = 0.5$`.\n  Since `$R_6  1$`, the system is asymptotically stable, `$S(z_6)=1$`.\n  `$g(z_6) = \\ln(0.5) \\approx -0.693147$`.\n\n- For `$z_7 = 1.0 + 0.0\\,\\mathrm{i}$`:\n  `$1+z_7 = 2.0 + 0.0\\,\\mathrm{i}$`.\n  `$R_7 = |1+z_7| = 2$`.\n  Since `$R_7  1$`, the system is unstable, `$S(z_7)=-1$`.\n  `$g(z_7) = \\ln(2) \\approx 0.693147$`.\n\nThese calculations provide all the necessary values for constructing the final output. The implementation will follow this logic.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes stability classification and divergence rates for the explicit\n    Euler method applied to the linear test equation for a given suite of\n    complex parameters.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        -0.5 + 0.0j,                             # z_1\n        -2.0 + 0.0j,                             # z_2\n        0.2 + 0.3j,                              # z_3\n        -1.0 + 0.0j,                             # z_4\n        -0.5 + 0.8660254037844386j,              # z_5\n        -1.0 + 0.5j,                             # z_6\n        1.0 + 0.0j,                              # z_7\n    ]\n\n    results = []\n    # A small tolerance for floating-point comparisons to 1.0\n    tolerance = 1e-9\n\n    for z in test_cases:\n        # The stability and divergence are determined by the amplification factor (1+z).\n        amplification_factor = 1.0 + z\n        \n        # Calculate the modulus of the amplification factor.\n        magnitude = np.abs(amplification_factor)\n\n        # Determine stability classification S(z) and divergence rate g(z).\n        s_val = 0\n        g_val = 0.0\n\n        if magnitude  1.0 - tolerance:\n            # Asymptotically stable region: |1+z|  1\n            s_val = 1\n            if np.isclose(magnitude, 0.0):\n                # Special case for z = -1, where log(0) -> -inf\n                g_val = -np.inf\n            else:\n                g_val = np.log(magnitude)\n        elif magnitude  1.0 + tolerance:\n            # Unstable region: |1+z|  1\n            s_val = -1\n            g_val = np.log(magnitude)\n        else:\n            # Neutrally stable region: |1+z| = 1\n            s_val = 0\n            g_val = 0.0  # log(1) = 0\n\n        # Append the stability classification to the results.\n        results.append(str(s_val))\n        \n        # Format and append the divergence rate to the results.\n        if g_val == -np.inf:\n            results.append(\"-inf\")\n        else:\n            results.append(f\"{g_val:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2441545"}]}