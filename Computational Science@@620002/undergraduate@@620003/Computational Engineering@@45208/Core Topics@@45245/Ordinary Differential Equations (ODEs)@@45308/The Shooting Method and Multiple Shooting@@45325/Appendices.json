{"hands_on_practices": [{"introduction": "The first step in wielding any powerful numerical tool is to master its setup. This exercise challenges you to create the essential mathematical blueprint for solving a boundary value problem (BVP) using both single and multiple shooting methods. By correctly formulating the residual function, the sensitivity equations, and the system for multiple shooting, you will build the conceptual foundation needed to translate a BVP into a problem that a computer can solve iteratively [@problem_id:2445807]. This practice is crucial for handling complex scenarios, especially those involving nonlinear boundary conditions.", "problem": "Consider the boundary value problem for the scalar function $y$ on the interval $[0,1]$ given by the second-order Ordinary Differential Equation (ODE)\n$y''(x) + y(x) = \\sin(x)$ for $x \\in (0,1)$,\nsubject to the boundary conditions $y(0) = 0$ and $y(1) + \\left(y'(1)\\right)^2 = 1$.\n\nA common reformulation for numerical treatment introduces the first-order state $z(x) = \\begin{bmatrix} z_1(x) \\\\ z_2(x) \\end{bmatrix} = \\begin{bmatrix} y(x) \\\\ y'(x) \\end{bmatrix}$ and a shooting parameter $s = y'(0)$ for a single-shooting approach. For a two-segment multiple-shooting approach with one interior interface at $x = c \\in (0,1)$, one may introduce independent segment initial states and enforce continuity constraints.\n\nWhich option provides a correct formulation consisting of: (i) a valid single-shooting scalar residual $R(s)$ associated with the terminal nonlinear boundary condition together with a consistent linear sensitivity initial value problem (Initial Value Problem, IVP) for computing $\\mathrm{d}R/\\mathrm{d}s$, and (ii) a consistent two-segment multiple-shooting unknown vector and residual vector that enforce interior continuity and the terminal boundary condition?\n\nA. Single shooting: Define $f(x,z) = \\begin{bmatrix} z_2 \\\\ -z_1 + \\sin(x) \\end{bmatrix}$ so that $z'(x) = f(x,z(x))$ with $z(0) = \\begin{bmatrix} 0 \\\\ s \\end{bmatrix}$. Define the residual $R(s) = z_1(1;s) + \\left(z_2(1;s)\\right)^2 - 1$. The sensitivity $w(x) = \\partial z(x;s)/\\partial s$ satisfies $w'(x) = \\left(\\partial f/\\partial z\\right)(x,z(x;s))\\,w(x)$ with $w(0) = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$, where $\\left(\\partial f/\\partial z\\right)(x,z) = \\begin{bmatrix} 0 & 1 \\\\ -1 & 0 \\end{bmatrix}$. Then $\\mathrm{d}R/\\mathrm{d}s = w_1(1) + 2\\,z_2(1;s)\\,w_2(1)$. Multiple shooting (two segments with interface at $x=c$): Unknown vector $u = \\begin{bmatrix} s \\\\ q_1 \\\\ q_2 \\end{bmatrix}$, where $q = \\begin{bmatrix} q_1 \\\\ q_2 \\end{bmatrix}$ is the initial state at $x=c$ for the right segment. Residual vector $F(u) = \\begin{bmatrix} z_1(c;s) - q_1 \\\\ z_2(c;s) - q_2 \\\\ \\tilde z_1(1;q) + \\left(\\tilde z_2(1;q)\\right)^2 - 1 \\end{bmatrix}$, where $\\tilde z(x;q)$ solves $z'(x) = f(x,z)$ on $[c,1]$ with $z(c) = q$.\n\nB. Single shooting: $R(s) = z_1(1;s) - 1$. The sensitivity IVP uses $w'(x) = \\left(\\partial f/\\partial z\\right)(x,z)\\,w(x)$ with $w(0) = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix}$, and $\\mathrm{d}R/\\mathrm{d}s = w_1(1)$. Multiple shooting: Unknown vector $u = \\begin{bmatrix} s \\\\ q_1 \\end{bmatrix}$ and residual vector $F(u) = \\begin{bmatrix} z_1(c;s) - q_1 \\\\ \\tilde z_1(1;q_1) + \\left(\\tilde z_2(1;q_1)\\right)^2 - 1 \\end{bmatrix}$, where the right segment starts from $z(c) = \\begin{bmatrix} q_1 \\\\ 0 \\end{bmatrix}$.\n\nC. Single shooting: $R(s) = z_1(1;s) + z_2(1;s) - 1$. The sensitivity IVP augments $w'(x) = \\left(\\partial f/\\partial z\\right)(x,z)\\,w(x) + \\begin{bmatrix} 0 \\\\ 2\\,z_2(x;s)\\,w_2(x) \\end{bmatrix}$ with $w(0) = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$, and $\\mathrm{d}R/\\mathrm{d}s = w_1(1) + w_2(1)$. Multiple shooting: Unknown vector $u = \\begin{bmatrix} s \\\\ q_1 \\\\ q_2 \\end{bmatrix}$ and residual vector $F(u) = \\begin{bmatrix} \\left(z_1(c;s) - q_1\\right)^2 + \\left(z_2(c;s) - q_2\\right)^2 \\\\ \\tilde z_1(1;q) + \\tilde z_2(1;q) - 1 \\\\ q_2 \\end{bmatrix}$.\n\nD. Single shooting: $R(s) = z_1(1;s) + \\left(z_2(1;s)\\right)^2 - 1$, and $w'(x) = \\begin{bmatrix} 0 & 1 \\\\ -1 & 1 \\end{bmatrix} w(x)$ with $w(0) = \\begin{bmatrix} 0 \\\\ -1 \\end{bmatrix}$ so that $\\mathrm{d}R/\\mathrm{d}s = w_1(1) + 2\\,z_2(1;s)\\,w_2(1)$. Multiple shooting: Unknown vector $u = \\begin{bmatrix} y_0 \\\\ s \\\\ q_1 \\\\ q_2 \\end{bmatrix}$ with $y_0$ representing $y(0)$, and residual vector $F(u) = \\begin{bmatrix} y_0 \\\\ z_1(c;s) - q_1 \\\\ z_2(c;s) - q_2 \\\\ \\tilde z_1(1;q) + \\left(\\tilde z_2(1;q)\\right)^2 - 1 \\end{bmatrix}$.", "solution": "**Derivation of the Correct Formulation**\n\n**Part (i): Single Shooting Method**\n\n1.  **First-Order System:**\n    Let $z_1(x) = y(x)$ and $z_2(x) = y'(x)$. Then the derivatives are:\n    $z_1'(x) = y'(x) = z_2(x)$\n    $z_2'(x) = y''(x) = -y(x) + \\sin(x) = -z_1(x) + \\sin(x)$\n    This can be written as a vector-valued initial value problem (IVP):\n    $$z'(x) = \\begin{bmatrix} z_1'(x) \\\\ z_2'(x) \\end{bmatrix} = \\begin{bmatrix} z_2(x) \\\\ -z_1(x) + \\sin(x) \\end{bmatrix} = f(x, z(x))$$\n    where $f(x,z) = \\begin{bmatrix} z_2 \\\\ -z_1 + \\sin(x) \\end{bmatrix}$.\n\n2.  **Initial Conditions and Residual:**\n    The BC at $x=0$ is $y(0)=0$. The value of $y'(0)$ is unknown and is designated as the shooting parameter, $s$. Thus, the initial condition for the IVP is:\n    $$z(0) = \\begin{bmatrix} y(0) \\\\ y'(0) \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ s \\end{bmatrix}$$\n    We solve this IVP from $x=0$ to $x=1$. The solution, which depends on $s$, is denoted $z(x;s)$.\n    The shooting method seeks a value of $s$ such that the second BC, $y(1) + (y'(1))^2 = 1$, is satisfied. This BC translates to $z_1(1;s) + (z_2(1;s))^2 = 1$.\n    The scalar residual function $R(s)$ is defined such that its root, $R(s)=0$, satisfies this condition:\n    $$R(s) = z_1(1;s) + (z_2(1;s))^2 - 1$$\n\n3.  **Sensitivity Analysis:**\n    To solve $R(s)=0$ with a Newton-Raphson method, we need the derivative $\\mathrm{d}R/\\mathrm{d}s$.\n    Let $w(x) = \\frac{\\partial z(x;s)}{\\partial s} = \\begin{bmatrix} \\partial z_1(x;s)/\\partial s \\\\ \\partial z_2(x;s)/\\partial s \\end{bmatrix} = \\begin{bmatrix} w_1(x) \\\\ w_2(x) \\end{bmatrix}$.\n    Applying the chain rule to $R(s)$:\n    $$\\frac{\\mathrm{d}R}{\\mathrm{d}s} = \\frac{\\partial z_1(1;s)}{\\partial s} + 2 z_2(1;s) \\frac{\\partial z_2(1;s)}{\\partial s} = w_1(1) + 2 z_2(1;s) w_2(1)$$\n    The sensitivity vector $w(x)$ is found by differentiating the ODE system $z'(x;s) = f(x, z(x;s))$ with respect to $s$:\n    $$\\frac{\\partial}{\\partial s} \\left( z'(x;s) \\right) = \\frac{\\mathrm{d}}{\\mathrm{d}x} \\left( \\frac{\\partial z(x;s)}{\\partial s} \\right) = w'(x)$$\n    $$w'(x) = \\frac{\\partial}{\\partial s} f(x, z(x;s)) = \\frac{\\partial f}{\\partial z}(x, z(x;s)) \\frac{\\partial z(x;s)}{\\partial s} = \\frac{\\partial f}{\\partial z}(x, z(x;s)) w(x)$$\n    The Jacobian matrix $\\partial f / \\partial z$ is:\n    $$\\frac{\\partial f}{\\partial z} = \\begin{bmatrix} \\frac{\\partial f_1}{\\partial z_1} & \\frac{\\partial f_1}{\\partial z_2} \\\\ \\frac{\\partial f_2}{\\partial z_1} & \\frac{\\partial f_2}{\\partial z_2} \\end{bmatrix} = \\begin{bmatrix} 0 & 1 \\\\ -1 & 0 \\end{bmatrix}$$\n    The initial condition for $w(x)$ is found by differentiating the initial condition for $z(x;s)$:\n    $$w(0) = \\frac{\\partial z(0;s)}{\\partial s} = \\frac{\\partial}{\\partial s} \\begin{bmatrix} 0 \\\\ s \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$$\n    Thus, the sensitivity IVP is $w'(x) = \\begin{bmatrix} 0 & 1 \\\\ -1 & 0 \\end{bmatrix} w(x)$ with $w(0) = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$.\n\n**Part (ii): Two-Segment Multiple Shooting Method**\n\n1.  **Unknowns:**\n    The domain $[0,1]$ is split into $[0,c]$ and $[c,1]$.\n    - For the first segment $[0,c]$, we have the IVP $z'(x) = f(x,z)$ with $z(0)=\\begin{bmatrix} 0 \\\\ s \\end{bmatrix}$. The unknown is $s$.\n    - For the second segment $[c,1]$, we define a new initial state at the interface $x=c$, which is unknown. Let this state be $q = \\begin{bmatrix} q_1 \\\\ q_2 \\end{bmatrix}$. This gives two more unknowns, $q_1$ and $q_2$.\n    The total vector of unknowns is $u = \\begin{bmatrix} s \\\\ q_1 \\\\ q_2 \\end{bmatrix}$, which is a vector of size $3$.\n\n2.  **Residuals:**\n    We need $3$ equations to solve for the $3$ unknowns.\n    - **Continuity at $x=c$:** The solution from the first segment at $x=c$, denoted $z(c;s)$, must be equal to the initial state of the second segment, $q$. This provides two equations:\n        $F_1(u) = z_1(c;s) - q_1 = 0$\n        $F_2(u) = z_2(c;s) - q_2 = 0$\n    - **Terminal Condition at $x=1$:** The solution of the second segment, denoted $\\tilde{z}(x;q)$, which solves $\\tilde{z}'=f(x,\\tilde{z})$ with $\\tilde{z}(c)=q$, must satisfy the terminal BC.\n        $\\tilde{z}_1(1;q) + (\\tilde{z}_2(1;q))^2 - 1 = 0$\n        This gives the third equation: $F_3(u) = \\tilde{z}_1(1;q) + (\\tilde{z}_2(1;q))^2 - 1 = 0$.\n    The complete residual vector is:\n    $$F(u) = \\begin{bmatrix} z_1(c;s) - q_1 \\\\ z_2(c;s) - q_2 \\\\ \\tilde{z}_1(1;q) + (\\tilde{z}_2(1;q))^2 - 1 \\end{bmatrix}$$\n\n**Evaluation of Options**\n\n*   **Option A:**\n    - **Single Shooting:** The residual $R(s)$, the ODE system function $f(x,z)$, the sensitivity IVP (equation, Jacobian, and initial condition), and the expression for $\\mathrm{d}R/\\mathrm{d}s$ all match the derivation exactly.\n    - **Multiple Shooting:** The unknown vector $u$ and the residual vector $F(u)$ also match the derivation perfectly.\n    - **Verdict:** Correct.\n\n*   **Option B:**\n    - **Single Shooting:** The residual $R(s) = z_1(1;s) - 1$ is incorrect; it corresponds to a different BC, $y(1)=1$. The sensitivity initial condition $w(0) = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix}$ is incorrect; it would correspond to shooting on $y(0)$, but the parameter is $s=y'(0)$.\n    - **Multiple Shooting:** The unknown vector $u = \\begin{bmatrix} s \\\\ q_1 \\end{bmatrix}$ is incomplete. It arbitrarily fixes the second state variable at the interface, $z_2(c)=0$, which is unjustified. The system is ill-posed as it has fewer unknowns and equations than required.\n    - **Verdict:** Incorrect.\n\n*   **Option C:**\n    - **Single Shooting:** The residual $R(s) = z_1(1;s) + z_2(1;s) - 1$ is incorrect; it corresponds to a linear BC $y(1)+y'(1)=1$. The sensitivity ODE is given as non-homogeneous, which is fundamentally wrong. The sensitivity ODE for a parameter-independent $f$ must be linear and homogeneous, $w'=Jw$.\n    - **Multiple Shooting:** The residual vector uses a squared norm for continuity, $(\\dots)^2+(\\dots)^2=0$, which reduces two required equations to one, making the system underdetermined. It also includes an arbitrary condition $q_2=0$. The formulation is entirely flawed.\n    - **Verdict:** Incorrect.\n\n*   **Option D:**\n    - **Single Shooting:** The Jacobian matrix for the sensitivity equation is given as $\\begin{bmatrix} 0 & 1 \\\\ -1 & 1 \\end{bmatrix}$, which is incorrect. The correct Jacobian is $\\begin{bmatrix} 0 & 1 \\\\ -1 & 0 \\end{bmatrix}$. The sensitivity initial condition $w(0)=\\begin{bmatrix} 0 \\\\ -1 \\end{bmatrix}$ is also incorrect due to the wrong sign.\n    - **Multiple Shooting:** The unknown vector $u$ incorrectly includes $y_0=y(0)$ as a variable. Since $y(0)=0$ is a given fixed value, it should not be part of the unknown vector in a standard formulation.\n    - **Verdict:** Incorrect.\n\nBased on this step-by-step analysis, only Option A provides a completely correct and consistent formulation for both the single and multiple shooting methods as applied to the given boundary value problem.", "answer": "$$\\boxed{A}$$", "id": "2445807"}, {"introduction": "Standard shooting methods can struggle with problems that are highly sensitive to initial conditions, where a minuscule change in the initial \"shot\" causes a massive divergence at the endpoint. Troesch's problem is a classic example of such a sensitive BVP. This practice focuses on the core iterative engine of a sophisticated shooting algorithm: a single update step using Newton's method [@problem_id:1127747]. By using pre-computed values for the solution and its sensitivity, you will see precisely how the algorithm corrects its aim, providing a tangible feel for the power and mechanics of Newton-based solvers.", "problem": "The following boundary value problem, known as Troesch's problem, is notoriously sensitive to initial conditions, making it a challenge for standard shooting methods:\n$$ y'' = \\lambda \\sinh(\\lambda y), \\quad x \\in [0, 1] $$\nwith boundary conditions $y(0) = 0$ and $y(1) = B$.\n\nTo solve this problem numerically, we can use a multiple shooting method. The interval $[0,1]$ is partitioned by an interior node at $x_m$. The goal is to find the correct initial slope $s = y'(0)$ that satisfies the boundary condition at $x=1$. This is equivalent to finding a root of the function $F(s) = y(1; s) - B$, where $y(1; s)$ is the value of the solution at $x=1$ corresponding to an initial slope $s$.\n\nWe employ Newton's method to find the root of $F(s)=0$. An initial guess $s_{guess}$ is updated to a new estimate $s_{next}$ via the iteration:\n$$ s_{next} = s_{guess} - \\frac{F(s_{guess})}{F'(s_{guess})} $$\nThe derivative $F'(s)$ is given by $u(1; s) = \\frac{\\partial y(1;s)}{\\partial s}$, where the sensitivity function $u(x)$ solves the variational equation\n$$ u'' = \\lambda^2 \\cosh(\\lambda y) u $$\nwith initial conditions $u(0)=0$ and $u'(0)=1$.\n\nConsider the case where $\\lambda=5$, $B=1$, and the interior shooting node is at $x_m = 1/2$. Let the initial guess for the slope be $s_{guess}$. A numerical integration of the coupled system for $(y, y', u, u')$ is performed, first from $x=0$ to $x_m$ and then from $x_m$ to $x=1$. For an initial guess of $s_{guess} = 0.01$, the integration yields the following values at the final point $x=1$:\n- The solution value: $y(1; s_{guess}) = 29.89310035$\n- The sensitivity value: $u(1; s_{guess}) = 10091.24038$\n\nUsing this information, compute the improved estimate for the slope, $s_{next}$.", "solution": "1. Newton update:\n$$s_{\\rm next}=s_{\\rm guess}-\\frac{F(s_{\\rm guess})}{F'(s_{\\rm guess})},$$\nwith $F(s_{\\rm guess})=y(1;s_{\\rm guess})-B$ and $F'(s_{\\rm guess})=u(1;s_{\\rm guess})$.\n\n2. Substitute given values:\n$$s_{\\rm next}\n=0.01-\\frac{29.89310035-1}{10091.24038}\n=0.01-\\frac{28.89310035}{10091.24038}.$$\n\n3. Compute the division:\n$$\\frac{28.89310035}{10091.24038}\\approx0.0028631863,$$\nso\n$$s_{\\rm next}\\approx0.01-0.0028631863=0.0071368137.$$", "answer": "$$\\boxed{0.0071368137}$$", "id": "1127747"}, {"introduction": "Now it's time to put all the pieces together and build a complete shooting method from the ground up. This hands-on problem moves beyond finding a single answer and into the exciting realm of exploring the rich behavior of nonlinear systems [@problem_id:2377656]. By implementing a shooting algorithm to solve a nonlinear BVP, you'll discover that multiple, distinct solutions can exist. This exercise serves as a capstone, solidifying your understanding of how to integrate an ODE, define a residual, and use a root-finder to uncover the hidden complexities of differential equations.", "problem": "Consider the nonlinear boundary value problem for an ordinary differential equation on a finite interval: find a function $y(x)$ satisfying\n$$\ny''(x) + y(x)^3 = 0 \\quad \\text{for } x \\in [0,L], \\quad \\text{with} \\quad y(0)=0, \\; y(L)=0,\n$$\nwhere $L>0$ is a given length. This problem is a model for the motion of a unit-mass particle in a quartic potential $V(y)=\\tfrac{1}{4}y^4$, with $x$ playing the role of time. From first principles in classical mechanics and ordinary differential equations, do the following.\n\n1) Starting from Newton's second law and the definition of mechanical energy for a unit mass, use the potential $V(y)=\\tfrac{1}{4}y^4$ to justify that the initial value problem with initial conditions $y(0)=0$ and $y'(0)=s$ conserves the energy\n$$\nE = \\tfrac{1}{2}\\,[y'(x)]^2 + \\tfrac{1}{4}\\, [y(x)]^4,\n$$\nand that, for $s>0$, the solution $y(x)$ is periodic in $x$ and oscillates between symmetric turning points $\\pm A$ determined by the energy. Then, using only these fundamental facts (without invoking any pre-derived period formulas), argue qualitatively why the boundary value problem can admit multiple distinct solutions for a fixed $L$: different choices of the initial slope $s$ can produce trajectories in which one or more half-oscillations fit exactly into the interval $[0,L]$, all satisfying the same final boundary condition $y(L)=0$.\n\n2) Implement a shooting method to reveal this non-uniqueness numerically. Treat the initial slope $s=y'(0)$ as an adjustable shooting parameter, and define the residual\n$$\nR(s;L) := y(L;s),\n$$\nwhere $y(x;s)$ solves the initial value problem with $y(0)=0$, $y'(0)=s$. Use a numerically stable ordinary differential equation integrator for the first-order system equivalent to the second-order equation, and a robust bracketing-based one-dimensional root finder to locate distinct positive roots of $R(s;L)=0$. Specifically:\n- Convert the second-order equation to the first-order system $y_1' = y_2$, $y_2' = -y_1^3$, with $y_1(0)=0$ and $y_2(0)=s$.\n- For each given $L$, compute the two smallest distinct positive shooting values $s_1(L)$ and $s_2(L)$, with $s_2(L) > s_1(L) > 0$, such that $|R(s_k;L)| \\le \\varepsilon$ for tolerance $\\varepsilon = 10^{-8}$.\n- Exclude the trivial solution $s=0$ from consideration.\n\n3) Test suite. Run your program on the following set of three domain lengths:\n- $L_1 = 1.00$,\n- $L_2 = 1.20$,\n- $L_3 = 0.75$.\nFor each $L_i$, return the list $[s_1(L_i), s_2(L_i)]$ rounded to $6$ decimal places. Your final program output must be a single line containing the results as a comma-separated list enclosed in square brackets, in the order $L_1, L_2, L_3$, for example:\n$[[s_1(L_1),s_2(L_1)],[s_1(L_2),s_2(L_2)],[s_1(L_3),s_2(L_3)]]$.\nAll numbers must be written in decimal notation. No additional text should be printed.\n\nAdditional implementation requirements:\n- Use a standard adaptive-step ordinary differential equation solver with absolute and relative tolerances at or below $10^{-9}$.\n- Use a bracketing root-finding method with an absolute solution tolerance at or below $10^{-10}$ on $s$.\n- Ensure robustness by using a sign-change scan in $s$ over a sufficiently large interval to isolate at least two distinct positive roots for each $L_i$.", "solution": "The solution is presented in two parts as requested: first, a theoretical justification from first principles, and second, a description of the numerical shooting method designed to solve the problem.\n\n**1. Theoretical Justification and Qualitative Analysis**\n\nThe problem concerns the motion of a particle of unit mass, $m=1$, under the influence of a force $F(y)$ derived from a potential energy function $V(y)$. Newton's second law states that $ma = F$, where the acceleration is $a = y''(x)$, with $x$ representing time. The force is conservative, given by $F(y) = -V'(y)$. For the given potential $V(y) = \\frac{1}{4}y^4$, the corresponding force is $F(y) = -\\frac{d}{dy}(\\frac{1}{4}y^4) = -y^3$. Substituting these into Newton's law for $m=1$ gives:\n$$\n(1) y''(x) = -y(x)^3\n$$\nwhich rearranges to the specified ordinary differential equation (ODE):\n$$\ny''(x) + y(x)^3 = 0.\n$$\nThis confirms the physical origin of the governing equation.\n\nTo demonstrate the conservation of mechanical energy, we multiply the ODE by the velocity, $y'(x)$:\n$$\ny''(x) y'(x) + y(x)^3 y'(x) = 0.\n$$\nThis expression is equivalent to the total time derivative of the energy. Recognizing that $y'' y' = \\frac{d}{dx}(\\frac{1}{2}[y'(x)]^2)$ and $y^3 y' = \\frac{d}{dx}(\\frac{1}{4}[y(x)]^4)$, we have:\n$$\n\\frac{d}{dx} \\left( \\frac{1}{2}[y'(x)]^2 + \\frac{1}{4}[y(x)]^4 \\right) = 0.\n$$\nThis implies that the quantity within the parentheses, which is the total mechanical energy $E$, is a constant of motion:\n$$\nE = \\frac{1}{2}[y'(x)]^2 + \\frac{1}{4}[y(x)]^4 = \\text{constant}.\n$$\nThe energy $E$ is determined by the initial conditions. For the initial value problem (IVP) with $y(0)=0$ and $y'(0)=s$, the energy is:\n$$\nE = \\frac{1}{2}[y'(0)]^2 + \\frac{1}{4}[y(0)]^4 = \\frac{1}{2}s^2 + \\frac{1}{4}(0)^4 = \\frac{1}{2}s^2.\n$$\nFor any $s > 0$, the energy $E > 0$. The particle's motion is confined by the potential. The turning points of the oscillation, denoted $\\pm A$, occur where the velocity $y'(x)$ is zero. At these points, the kinetic energy is zero, and all energy is potential: $E = V(A) = \\frac{1}{4}A^4$. Equating the two expressions for energy gives:\n$$\n\\frac{1}{2}s^2 = \\frac{1}{4}A^4 \\implies A = (2s^2)^{1/4}.\n$$\nThe particle starts at $y(0)=0$ with positive velocity $s$, moves towards the positive turning point $+A$, reverses direction, passes through $y=0$ with velocity $-s$, reaches the negative turning point $-A$, and returns to $y=0$. This cycle constitutes a periodic motion.\n\nThe non-uniqueness of solutions for the BVP arises from the periodic nature of the IVP solutions. The boundary condition $y(L)=0$ requires the particle to be at the origin at time $x=L$. Starting from $y(0)=0$, the particle reaches $y=0$ again after one half-period, two half-periods (a full period), three half-periods, and so on. Let $T_{1/2}(s)$ denote the half-period of the oscillation corresponding to the initial slope $s$. The boundary condition $y(L)=0$ is satisfied if the interval length $L$ is an integer multiple of the half-period:\n$$\nL = k \\cdot T_{1/2}(s) \\quad \\text{for } k = 1, 2, 3, \\dots\n$$\nThe period of this anharmonic oscillator depends on its energy, and therefore on $s$. By changing $s$, we change the period. For a fixed length $L$, the above equation becomes an implicit equation for $s$. It is plausible that this equation can be solved for different values of $s$, each corresponding to a different integer $k$. For $k=1$, we seek an initial slope $s_1$ such that the particle just completes its first half-oscillation in the interval $[0, L]$. This yields the fundamental solution, a single arch. For $k=2$, we seek a different slope $s_2$ such that the particle completes two half-oscillations (one full wave) in $[0, L]$. These distinct values $s_1, s_2, \\dots$ all produce solutions $y(x; s_k)$ that satisfy both boundary conditions, $y(0)=0$ and $y(L)=0$, thus explaining the existence of multiple, non-trivial solutions to the BVP.\n\n**2. Numerical Design: The Shooting Method**\n\nTo find these distinct initial slopes numerically, we employ the shooting method. This method reframes the BVP as a root-finding problem.\n\nThe shooting parameter is the unknown initial slope, $s = y'(0)$.\nThe IVP is defined as:\n$$\ny''(x) + y(x)^3 = 0, \\quad y(0)=0, \\quad y'(0)=s.\n$$\nTo solve this numerically, we convert the second-order ODE into an equivalent first-order system. Let $y_1(x) = y(x)$ and $y_2(x) = y'(x)$. The system is:\n$$\n\\begin{cases}\ny_1'(x) = y_2(x) \\\\\ny_2'(x) = -y_1(x)^3\n\\end{cases}\n$$\nwith initial conditions at $x=0$:\n$$\n\\begin{pmatrix} y_1(0) \\\\ y_2(0) \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ s \\end{pmatrix}.\n$$\nWe integrate this system from $x=0$ to $x=L$. The solution at $x=L$, which we denote $y(L;s)$, depends on the choice of $s$. The second boundary condition $y(L)=0$ (or $y_1(L)=0$) is satisfied only for specific values of $s$. We define a residual function $R(s;L)$ which measures the mismatch at the final boundary:\n$$\nR(s;L) = y_1(L;s).\n$$\nThe problem is now to find the roots of the equation $R(s;L) = 0$.\n\nThe numerical procedure is as follows:\n1.  **Define the Residual Function**: Create a function that, for a given $s$ and $L$, numerically solves the IVP from $x=0$ to $x=L$ using a high-precision, adaptive-step ODE integrator (such as `scipy.integrate.solve_ivp` with absolute and relative tolerances set to $10^{-10}$). This function returns the value of $y_1(L)$.\n2.  **Bracket the Roots**: As argued qualitatively, the residual $R(s;L)$ will be an oscillatory function of $s$. To find its roots, we first need to isolate them in intervals. We achieve this by evaluating $R(s;L)$ over a grid of $s$ values and identifying pairs of adjacent points, $(s_a, s_b)$, where $R(s_a;L)$ and $R(s_b;L)$ have opposite signs. Each such interval $[s_a, s_b]$ is guaranteed to contain at least one root.\n3.  **Solve for the Roots**: For each bracket $[s_a, s_b]$ found, a robust one-dimensional bracketing root-finder (such as Brent's method, `scipy.optimize.brentq`) is used to locate the root $s_k$ to a high degree of accuracy (tolerance on $s$ set to $10^{-11}$).\n4.  **Collect and Report**: We apply this procedure for each given length $L_i$ to find the two smallest distinct positive roots, $s_{1}(L_i)$ and $s_{2}(L_i)$, round them to the specified precision, and format the output as required. The trivial solution $s=0$ is explicitly excluded.\n\nThis combination of a high-fidelity ODE solver and a reliable root-finding algorithm provides a robust and accurate method for determining the non-unique solutions of the nonlinear BVP.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import brentq\n\ndef solve():\n    \"\"\"\n    Solves the nonlinear BVP y'' + y^3 = 0 with y(0)=0, y(L)=0\n    using a shooting method to find the first two non-trivial positive\n    initial slopes s = y'(0) for given lengths L.\n    \"\"\"\n\n    # --- 1. Define the core components of the shooting method ---\n\n    # ODE system: y' = f(x, y), where y = [y_1, y_2] = [y, y']\n    def ode_system(t, y):\n        \"\"\"First-order system for y'' = -y^3\"\"\"\n        return [y[1], -y[0]**3]\n\n    # Residual function R(s; L) = y(L; s)\n    def residual(s, L):\n        \"\"\"\n        Computes the residual R(s;L) = y(L;s) by solving the IVP.\n\n        Args:\n            s (float): The initial slope y'(0), our shooting parameter.\n            L (float): The length of the interval [0, L].\n\n        Returns:\n            float: The value of y(L), which we want to be zero.\n        \"\"\"\n        if s == 0:\n            return 0.0 # Trivial solution y(x)=0 for all x\n\n        # Initial conditions for the IVP: y(0)=0, y'(0)=s\n        y0 = [0.0, s]\n        \n        # Integration interval\n        t_span = [0, L]\n        \n        # High-precision ODE solver settings\n        atol = 1e-10\n        rtol = 1e-10\n\n        # Solve the initial value problem\n        sol = solve_ivp(\n            fun=ode_system,\n            t_span=t_span,\n            y0=y0,\n            method='DOP853',\n            atol=atol,\n            rtol=rtol,\n        )\n        \n        # Return the final value of y(x), which is y_1(L)\n        # sol.y is a 2xN array. We need the first component at the last time step.\n        return sol.y[0, -1]\n\n    # --- 2. Implement the root-finding logic ---\n\n    def find_shooting_values(L, num_roots=2):\n        \"\"\"\n        Finds the first `num_roots` positive values of s for a given L.\n        \"\"\"\n        roots = []\n        \n        # Scan for sign changes to find brackets for the roots.\n        # The required s values increase as L decreases. The scan range\n        # must be large enough to find the required number of roots.\n        s_scan_points = np.linspace(0.1, 100.0, 500)\n        r_values = np.array([residual(s, L) for s in s_scan_points])\n        \n        # Find intervals where the sign of the residual changes\n        for i in range(len(s_scan_points) - 1):\n            if np.sign(r_values[i]) != np.sign(r_values[i+1]):\n                s_a, s_b = s_scan_points[i], s_scan_points[i+1]\n                \n                try:\n                    # Use a robust bracketing root-finder\n                    root = brentq(\n                        residual, \n                        a=s_a, \n                        b=s_b, \n                        args=(L,), \n                        xtol=1e-11 # Tolerance on the root s\n                    )\n                    roots.append(root)\n                    \n                    if len(roots) == num_roots:\n                        break\n                except ValueError:\n                    # brentq can fail if signs are not opposite, though our check prevents this.\n                    continue\n        \n        if len(roots) < num_roots:\n            raise RuntimeError(f\"Could not find {num_roots} roots for L={L}. Try increasing the scan range for s.\")\n        \n        return sorted(roots)\n\n    # --- 3. Execute for the test suite ---\n\n    # Define the test cases from the problem statement.\n    test_cases = [1.00, 1.20, 0.75]\n    \n    all_results = []\n    \n    for L_val in test_cases:\n        # Find the two smallest positive shooting values\n        s1, s2 = find_shooting_values(L_val, num_roots=2)\n        \n        # Round to 6 decimal places as required\n        result_pair = [round(s1, 6), round(s2, 6)]\n        all_results.append(result_pair)\n    \n    # Format the final output string exactly as specified\n    # e.g., [[val1,val2],[val3,val4]]\n    output_str = \"[\" + \",\".join([str(pair) for pair in all_results]) + \"]\"\n    \n    # Final print statement in the exact required format.\n    print(output_str.replace(\" \", \"\"))\n\nsolve()\n```", "id": "2377656"}]}