{"hands_on_practices": [{"introduction": "The cornerstone of dimensional analysis is the principle of homogeneity: every term in a valid physical equation must have the same dimensions. This first practice challenges you to apply this principle to a real-world scenario from hydrology [@problem_id:2384795]. By analyzing an empirical formula, you will practice deducing the dimensions of an unknown coefficient, a fundamental skill for validating models and understanding the physical relationships they represent.", "problem": "In computational hydrology within computational engineering, consider an empirical relation for volumetric river discharge given by $Q = c\\,A^{1.2}\\,S^{0.5}$, where $Q$ is volumetric flow rate, $A$ is wetted cross-sectional area, and $S$ is channel bed slope. Assume $Q$ is measured in the International System of Units (SI) as $\\mathrm{m}^{3}\\,\\mathrm{s}^{-1}$, $A$ is measured in $\\mathrm{m}^{2}$, and $S$ is dimensionless. Let the base dimensions be mass $M$, length $L$, and time $T$. Determine the exponents $m$, $l$, and $t$ such that the dimensional formula of $c$ can be written as $[c] = M^{m} L^{l} T^{t}$. Provide your final answer as the row matrix $\\begin{pmatrix} m & l & t \\end{pmatrix}$. Provide exact values; do not round.", "solution": "The problem statement will first be subjected to a rigorous validation process.\n\n**Step 1: Extract Givens**\nThe following information is provided verbatim from the problem statement:\n- Empirical relation: $Q = c\\,A^{1.2}\\,S^{0.5}$\n- $Q$ is volumetric flow rate.\n- $A$ is wetted cross-sectional area.\n- $S$ is channel bed slope.\n- Unit of $Q$: $\\mathrm{m}^{3}\\,\\mathrm{s}^{-1}$.\n- Unit of $A$: $\\mathrm{m}^{2}$.\n- $S$ is dimensionless.\n- Base dimensions: Mass ($M$), Length ($L$), and Time ($T$).\n- The dimensional formula of the constant $c$ is to be expressed as $[c] = M^{m} L^{l} T^{t}$.\n- The objective is to determine the exponents $m$, $l$, and $t$.\n- The final answer format is a row matrix $\\begin{pmatrix} m & l & t \\end{pmatrix}$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is analyzed against the established criteria.\n- **Scientifically Grounded:** The problem is based on the principle of dimensional homogeneity, a fundamental concept in physics and engineering. The empirical formula provided is analogous to well-known hydrological models like the Manning or Ch√©zy formula, which relate flow rate to geometric and hydraulic properties. Thus, it is scientifically sound.\n- **Well-Posed:** The problem provides all necessary information to determine the dimensions of the constant $c$. The dimensions of $Q$, $A$, and $S$ are explicitly stated or can be inferred directly from their definitions and units. The problem structure allows for a unique solution for the exponents $m$, $l$, and $t$.\n- **Objective:** The problem is stated using clear, precise, and quantitative language, free of any subjectivity or ambiguity.\n\nBased on this analysis, the problem is found to be free of any flaws. It is self-contained, consistent, and scientifically valid. Therefore, a solution will be provided.\n\n**Step 3: Verdict and Action**\nThe problem is valid. The solution proceeds.\n\nThe fundamental principle governing this problem is the principle of dimensional homogeneity, which states that for any physically meaningful equation, the dimensions of all terms must be identical. The given empirical relation is $Q = c\\,A^{1.2}\\,S^{0.5}$.\n\nTo find the dimensions of the coefficient $c$, we first express the equation in terms of dimensions:\n$$\n[Q] = [c] [A]^{1.2} [S]^{0.5}\n$$\nHere, $[X]$ denotes the dimensions of the quantity $X$. We must determine the dimensions of each variable in terms of the base dimensions of Mass ($M$), Length ($L$), and Time ($T$).\n\n1.  The volumetric flow rate $Q$ is given in units of $\\mathrm{m}^{3}\\,\\mathrm{s}^{-1}$. The meter ($\\mathrm{m}$) is the base unit of length, and the second ($\\mathrm{s}$) is the base unit of time. Therefore, the dimensions of $Q$ are volume per time, which is length cubed per time:\n    $$\n    [Q] = \\frac{L^3}{T} = L^{3} T^{-1}\n    $$\n2.  The wetted cross-sectional area $A$ is given in units of $\\mathrm{m}^{2}$. This corresponds to dimensions of length squared:\n    $$\n    [A] = L^2\n    $$\n3.  The channel bed slope $S$ is stated to be dimensionless. A dimensionless quantity has no physical units, and its dimensional representation is unity:\n    $$\n    [S] = M^0 L^0 T^0 = 1\n    $$\n\nNow, we substitute these dimensional formulas back into the dimensional equation:\n$$\nL^{3} T^{-1} = [c] (L^{2})^{1.2} (1)^{0.5}\n$$\nWe simplify the right side of the equation. Using the rule of exponents $(x^a)^b = x^{ab}$:\n$$\nL^{3} T^{-1} = [c] L^{2 \\times 1.2} \\times 1\n$$\n$$\nL^{3} T^{-1} = [c] L^{2.4}\n$$\nTo determine the dimensions of $c$, we isolate $[c]$:\n$$\n[c] = \\frac{L^{3} T^{-1}}{L^{2.4}}\n$$\nUsing the rule of exponents for division $x^a / x^b = x^{a-b}$:\n$$\n[c] = L^{3 - 2.4} T^{-1}\n$$\n$$\n[c] = L^{0.6} T^{-1}\n$$\nThe problem requires the answer to be exact. The exponent $0.6$ can be expressed as the fraction $\\frac{6}{10}$, which simplifies to $\\frac{3}{5}$. Therefore:\n$$\n[c] = L^{3/5} T^{-1}\n$$\nThe problem asks for the dimensional formula to be written in the form $[c] = M^{m} L^{l} T^{t}$. By comparing our result with this general form, we can identify the exponents:\n$$\n[c] = M^0 L^{3/5} T^{-1}\n$$\nFrom this comparison, we deduce:\n- $m = 0$\n- $l = \\frac{3}{5}$\n- $t = -1$\n\nThese are the exact values for the exponents. The solution is presented as a row matrix as requested.", "answer": "$$\n\\boxed{\\begin{pmatrix} 0 & \\frac{3}{5} & -1 \\end{pmatrix}}\n$$", "id": "2384795"}, {"introduction": "While dimensional analysis helps formulate correct equations, failing to respect units during implementation can lead to catastrophic failures. This exercise presents a hypothetical but highly realistic debugging scenario where a simple unit mismatch between milliseconds and seconds occurs within a numerical integration routine [@problem_id:2384811]. By quantifying the resulting error, you'll gain a tangible appreciation for why meticulous unit handling is not merely academic, but critical for the reliability of any simulation software.", "problem": "A one-dimensional tracking routine in a computational engineering system estimates position $x$ by numerically integrating a logged velocity signal $v(t)$ measured in $\\mathrm{m/s}$. The processor samples the velocity uniformly every $\\Delta t_{\\mathrm{ms}} = 5 \\ \\mathrm{ms}$ for a physical duration $T = 12 \\ \\mathrm{s}$. The code uses the explicit forward Euler update $x_{k+1} = x_k + v_k \\,\\Delta t$ with $x_0 = 0$, where $v_k$ is the sampled velocity at step $k$. The physical velocity is constant and equal to $v(t) = 1.8 \\ \\mathrm{m/s}$ for all $t \\in [0, T]$. Due to a bug, the numeric value $5$ from $\\Delta t_{\\mathrm{ms}}$ is used directly as if it were in seconds (that is, $\\Delta t$ is taken as $5$ instead of the correct $0.005$).\n\nWhich option correctly characterizes the dimensional error and its quantitative effect at $t = T$, and prescribes a minimal change that restores dimensional consistency?\n\nA. The computed final position will be $1000$ times larger than the true position. The correct fix is to convert milliseconds to seconds by multiplying $\\Delta t_{\\mathrm{ms}}$ by $10^{-3}$ before use.\n\nB. The computed final position will be $1000$ times smaller than the true position. The correct fix is to multiply $\\Delta t_{\\mathrm{ms}}$ by $10^{3}$ before use.\n\nC. The numerical position equals the true position because both $v$ and $T$ are constant, so the units cancel in the sum and no change is needed.\n\nD. The computed final position error factor is $200$ because there are $200$ samples per second at $5 \\ \\mathrm{ms}$. The correct fix is to reduce the number of integration steps by a factor of $200$ while keeping $\\Delta t$ unchanged.", "solution": "The problem statement is submitted for validation.\n\n**Step 1: Extract Givens**\n- The system estimates position $x$.\n- The integration method is explicit forward Euler: $x_{k+1} = x_k + v_k \\,\\Delta t$.\n- The initial condition is $x_0 = 0$.\n- The physical velocity is constant: $v(t) = 1.8 \\ \\mathrm{m/s}$ for $t \\in [0, T]$.\n- The velocity unit is $\\mathrm{m/s}$.\n- The physical duration of the process is $T = 12 \\ \\mathrm{s}$.\n- The velocity signal is sampled uniformly with a time step given as $\\Delta t_{\\mathrm{ms}} = 5 \\ \\mathrm{ms}$.\n- The bug: The code uses the numeric value $5$ directly from $\\Delta t_{\\mathrm{ms}}$ as the time step $\\Delta t$, treating it as if its units were seconds. Thus, the computational time step used is $\\Delta t_{bug} = 5 \\ \\mathrm{s}$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded, describing a standard numerical integration scenario (Euler's method for kinematics) common in computational engineering. It is well-posed, providing all necessary data to compute both the correct physical outcome and the result from the flawed computation. The language is objective and precise. The scenario of a unit conversion error (milliseconds vs. seconds) is a highly realistic and frequent type of bug in scientific programming. The problem is self-contained, consistent, and requires a straightforward application of dimensional analysis and numerical integration principles. There are no identifiable flaws.\n\n**Step 3: Verdict and Action**\nThe problem is **valid**. Proceeding to solution.\n\n**Derivation of Solution**\n\nFirst, we determine the true final position. The position $x(t)$ is the time integral of the velocity $v(t)$. Given a constant velocity $v(t) = v_{const} = 1.8 \\ \\mathrm{m/s}$ and an initial position $x(0) = 0$, the true position at time $T = 12 \\ \\mathrm{s}$ is:\n$$\nx_{true}(T) = \\int_{0}^{T} v_{const} \\, dt = v_{const} \\times T\n$$\n$$\nx_{true}(T) = (1.8 \\ \\mathrm{m/s}) \\times (12 \\ \\mathrm{s}) = 21.6 \\ \\mathrm{m}\n$$\n\nNext, we analyze the computation performed by the code. The processor samples the velocity at a physical interval of $\\Delta t_{correct} = 5 \\ \\mathrm{ms} = 5 \\times 10^{-3} \\ \\mathrm{s} = 0.005 \\ \\mathrm{s}$. Over a total duration of $T = 12 \\ \\mathrm{s}$, the total number of integration steps, $N$, is:\n$$\nN = \\frac{T}{\\Delta t_{correct}} = \\frac{12 \\ \\mathrm{s}}{0.005 \\ \\mathrm{s}} = 2400\n$$\nThe code performs $N=2400$ update steps. In each step, it uses the sampled velocity $v_k = 1.8 \\ \\mathrm{m/s}$ (since velocity is constant) but applies an incorrect time step $\\Delta t_{bug} = 5 \\ \\mathrm{s}$. The numerical integration unfolds as a sum:\n$$\nx_{computed} = x_0 + \\sum_{k=0}^{N-1} v_k \\Delta t_{bug}\n$$\nWith $x_0 = 0$, $v_k = 1.8 \\ \\mathrm{m/s}$, $N=2400$, and $\\Delta t_{bug} = 5 \\ \\mathrm{s}$, the computed final position is:\n$$\nx_{computed} = \\sum_{k=0}^{2399} (1.8 \\ \\mathrm{m/s}) \\times (5 \\ \\mathrm{s}) = N \\times (1.8 \\ \\mathrm{m/s}) \\times (5 \\ \\mathrm{s})\n$$\n$$\nx_{computed} = 2400 \\times 1.8 \\times 5 = 21600 \\ \\mathrm{m}\n$$\nThe computed position is $21600 \\ \\mathrm{m}$, or $21.6 \\ \\mathrm{km}$.\n\nNow we determine the quantitative effect, which is the ratio of the computed position to the true position:\n$$\n\\text{Error Factor} = \\frac{x_{computed}}{x_{true}} = \\frac{21600 \\ \\mathrm{m}}{21.6 \\ \\mathrm{m}} = 1000\n$$\nThe computed final position is a factor of $1000$ larger than the true position.\n\nFinally, we prescribe the minimal change to restore dimensional consistency. The bug arises because the numerical value $5$ from the variable $\\Delta t_{\\mathrm{ms}}$ (in milliseconds) is used in a formula expecting seconds. The correct time step value in seconds is $\\Delta t_{correct} = 5 \\ \\mathrm{ms} = 0.005 \\ \\mathrm{s}$. To perform this conversion correctly, the value in milliseconds must be multiplied by the conversion factor $10^{-3} \\ \\mathrm{s/ms}$.\n$$\n\\Delta t (\\text{in s}) = \\Delta t_{\\mathrm{ms}} (\\text{in ms}) \\times 10^{-3} \\ \\frac{\\mathrm{s}}{\\mathrm{ms}}\n$$\nSo, the numeric value $5$ should be multiplied by $10^{-3}$ before its use in the integration formula.\n\n**Evaluation of Options**\n\n- **A. The computed final position will be $1000$ times larger than the true position. The correct fix is to convert milliseconds to seconds by multiplying $\\Delta t_{\\mathrm{ms}}$ by $10^{-3}$ before use.**\n  - The analysis shows the error factor is precisely $1000$, and the computed position is larger. This part is correct.\n  - The analysis shows the correct fix is to multiply the millisecond value by $10^{-3}$ to obtain the value in seconds. This part is also correct.\n  - **Verdict: Correct.**\n\n- **B. The computed final position will be $1000$ times smaller than the true position. The correct fix is to multiply $\\Delta t_{\\mathrm{ms}}$ by $10^{3}$ before use.**\n  - The computed position is larger, not smaller. The first statement is false.\n  - Multiplying by $10^3$ would be the correct procedure to convert from seconds to milliseconds, which is the opposite of what is required. This part is also false.\n  - **Verdict: Incorrect.**\n\n- **C. The numerical position equals the true position because both $v$ and $T$ are constant, so the units cancel in the sum and no change is needed.**\n  - This statement is fundamentally flawed. A unit error in a parameter ($\\Delta t$) does not vanish; it propagates and magnifies through the calculation. The constancy of other parameters ($v$, $T$) simplifies the analysis but does not eliminate the error. Our calculation shows a substantial difference between the computed and true results.\n  - **Verdict: Incorrect.**\n\n- **D. The computed final position error factor is $200$ because there are $200$ samples per second at $5 \\ \\mathrm{ms}$. The correct fix is to reduce the number of integration steps by a factor of $200$ while keeping $\\Delta t$ unchanged.**\n  - The sampling rate is indeed $1 / (0.005 \\ \\mathrm{s}) = 200 \\ \\mathrm{Hz}$, but this is not the error factor. The error factor is $1000$, derived from the ratio of the incorrect time step used ($5 \\ \\mathrm{s}$) to the correct one ($0.005 \\ \\mathrm{s}$).\n  - Changing the number of steps ($N$) does not fix the core problem, which is a dimensionally inconsistent value for $\\Delta t$. Such a \"fix\" is illogical and would not yield the correct physical result.\n  - **Verdict: Incorrect.**", "answer": "$$\\boxed{A}$$", "id": "2384811"}, {"introduction": "The most effective way to prevent unit errors is to design software that understands them from the ground up. In this final practice, you will move from diagnosing errors to proactively preventing them by implementing a dimensionally-aware `\\texttt{Distance}` class [@problem_id:2384770]. This exercise introduces an object-oriented approach where quantities, not just numbers, are the subjects of computation, thereby using the type system itself to enforce dimensional consistency and create more robust, reliable code.", "problem": "You must write a complete program that enforces dimensional consistency for distances and performs unit-correct computations using a consistent base unit. The base unit is the meter. The program must define a model of a distance quantity with three admissible units: meters, feet, and light-years, and must use the following physically grounded definitions.\n\nDefinitions and requirements:\n- A physical distance quantity has dimension of length. Addition and subtraction are only valid between two distances. Multiplication or division by a dimensionless scalar is allowed; multiplication or division of two distances is not admitted in this task.\n- All internal calculations must be performed in the base unit of meters.\n- Valid input units are the meter $\\text{m}$, the foot $\\text{ft}$, and the light-year $\\text{ly}$.\n- The foot is defined exactly as $1\\,\\text{ft} = 0.3048\\,\\text{m}$.\n- The light-year is defined for this problem as the distance traveled by light in one Julian year. Use the exact speed of light $c = 299{,}792{,}458\\,\\text{m}\\,\\text{s}^{-1}$ and the Julian year duration $T = 365.25$ days. One day has $24$ hours and one hour has $3600$ seconds. Therefore, one Julian year has $T_{\\text{s}} = 365.25 \\times 24 \\times 3600 = 31{,}557{,}600\\,\\text{s}$, and one light-year is $1\\,\\text{ly} = c \\times T_{\\text{s}}\\,\\text{m}$.\n- When comparing distances for equality across units, define the equality predicate as follows: two distances are considered equal if, after conversion to meters, the absolute difference is less than or equal to a tolerance $\\varepsilon = 10^{-12}\\,\\text{m}$.\n- All numerical distance outputs must be expressed in meters, rounded to six decimal places.\n- Angles are not involved. No angle units are required.\n\nTest suite to implement and evaluate:\nCompute the following results in the order listed below. Where an operation is not dimensionally valid, output a boolean indicating dimensional validity as $ \\text{True} $ or $ \\text{False} $ according to the rules above. For numerical results, output the rounded distance in meters.\n\n1. Compute $3\\,\\text{m} + 10\\,\\text{ft}$, in meters, rounded to six decimal places.\n2. Compute $1\\,\\text{ly} - 10^{16}\\,\\text{m}$, in meters, rounded to six decimal places.\n3. Convert $5280\\,\\text{ft}$ to meters, rounded to six decimal places.\n4. Determine whether $5\\,\\text{ft} + 3$ (where $3$ is dimensionless) is dimensionally valid. Output a boolean.\n5. Determine whether $1\\,\\text{m}$ and $3.280839895013123\\,\\text{ft}$ are equal under the tolerance $\\varepsilon = 10^{-12}\\,\\text{m}$. Output a boolean.\n6. Compute $2 \\times \\left(-5\\,\\text{ft}\\right)$, in meters, rounded to six decimal places.\n7. Compute $0\\,\\text{m} + 0\\,\\text{ft}$, in meters, rounded to six decimal places.\n\nFinal output format:\nYour program should produce a single line of output containing the results, in the order of the test suite above, as a comma-separated list enclosed in square brackets. Numerical entries must be the computed meter values rounded to six decimal places, and logical entries must be booleans. For example, an output should look like: \"[x1,x2,x3,x4,x5,x6,x7]\" where $x_1$, $x_2$, and $x_3$, $x_6$, $x_7$ are floats in meters rounded to six decimal places, and $x_4$, $x_5$ are booleans.", "solution": "The problem statement has been critically examined and is determined to be **valid**. It is scientifically grounded, well-posed, objective, and contains all necessary information to construct a unique and verifiable solution. It presents a clear task in computational engineering, specifically concerning dimensional consistency and unit management, which are fundamental concepts in scientific computing.\n\nThe solution will be implemented by designing a computational model that represents a physical distance quantity, enforcing the rules of dimensional analysis. An object-oriented approach is chosen for its suitability in encapsulating data and behavior. A Python class, which we will call `Distance`, will be created to model this quantity.\n\n**Core Design Principles**\n\n1.  **Base Unit Representation**: To ensure consistency and simplify arithmetic, all distance values will be internally stored in a single base unit: the meter ($\\text{m}$). The internal value of a distance $d$ will be denoted $d_{\\text{m}}$.\n\n2.  **Unit Conversion on Initialization**: The `Distance` class constructor will accept a numerical value and a unit string ($\\text{'m'}$, $\\text{'ft'}$, or $\\text{'ly'}$). It will immediately convert the input value to meters using the precise conversion factors defined in the problem. The conversion factors are:\n    - From feet to meters: $1\\,\\text{ft} = 0.3048\\,\\text{m}$.\n    - From light-years to meters: one light-year ($1\\,\\text{ly}$) is the distance light travels in a Julian year.\n      - Speed of light, $c = 299{,}792{,}458\\,\\text{m}\\,\\text{s}^{-1}$.\n      - Julian year in seconds, $T_{\\text{s}} = 365.25\\,\\text{days} \\times 24\\,\\text{h/day} \\times 3600\\,\\text{s/h} = 31{,}557{,}600\\,\\text{s}$.\n      - Therefore, $1\\,\\text{ly} = c \\times T_{\\text{s}} = 9{,}460{,}730{,}472{,}580{,}800\\,\\text{m}$.\n\n3.  **Dimensionally-Aware Arithmetic**: The standard arithmetic operators will be overloaded to enforce dimensional correctness.\n    - **Addition and Subtraction**: The `+` and `-` operators will be defined to operate only between two `Distance` objects. The result of $d_1 \\pm d_2$ is a new `Distance` object whose internal value is $d_{1,\\text{m}} \\pm d_{2,\\text{m}}$. An operation between a `Distance` object and a dimensionless scalar (e.g., $5\\,\\text{ft} + 3$) is a violation of dimensional homogeneity and is therefore invalid.\n    - **Scalar Multiplication**: The `*` operator will be defined for multiplication of a `Distance` object by a dimensionless scalar, $\\alpha$. The result is a new `Distance` object with an internal value of $\\alpha \\times d_{\\text{m}}$.\n\n4.  **Equality with Tolerance**: The equality operator `==` will compare two `Distance` objects, $d_1$ and $d_2$, by checking if the absolute difference of their meter-based values is within a specified tolerance, $\\varepsilon = 10^{-12}\\,\\text{m}$. Thus, $d_1 = d_2$ if and only if $|d_{1,\\text{m}} - d_{2,\\text{m}}| \\le \\varepsilon$.\n\n**Evaluation of the Test Suite**\n\nThe test cases will be evaluated using this `Distance` model.\n\n1.  **Compute $3\\,\\text{m} + 10\\,\\text{ft}$**:\n    - A `Distance` object for $3\\,\\text{m}$ has $d_{1,\\text{m}} = 3.0\\,\\text{m}$.\n    - A `Distance` object for $10\\,\\text{ft}$ has $d_{2,\\text{m}} = 10 \\times 0.3048 = 3.048\\,\\text{m}$.\n    - The sum has an internal value of $3.0 + 3.048 = 6.048\\,\\text{m}$. Rounded to six decimal places, the result is $6.048000$.\n\n2.  **Compute $1\\,\\text{ly} - 10^{16}\\,\\text{m}$**:\n    - A `Distance` object for $1\\,\\text{ly}$ has $d_{1,\\text{m}} = 9{,}460{,}730{,}472{,}580{,}800\\,\\text{m}$.\n    - A `Distance` object for $10^{16}\\,\\text{m}$ has $d_{2,\\text{m}} = 10{,}000{,}000{,}000{,}000{,}000\\,\\text{m}$.\n    - The difference has an internal value of $9{,}460{,}730{,}472{,}580{,}800 - 10{,}000{,}000{,}000{,}000{,}000 = -539{,}269{,}527{,}419{,}200\\,\\text{m}$. Rounded, the result is $-539269527419200.000000$.\n\n3.  **Convert $5280\\,\\text{ft}$ to meters**:\n    - A `Distance` object for $5280\\,\\text{ft}$ has an internal value of $5280 \\times 0.3048 = 1609.344\\,\\text{m}$. Rounded, this is $1609.344000$.\n\n4.  **Determine if $5\\,\\text{ft} + 3$ is dimensionally valid**:\n    - This is an addition between a `Distance` object ($5\\,\\text{ft}$) and a dimensionless scalar ($3$). This violates the principle of dimensional homogeneity. The operation is invalid. The result is `False`.\n\n5.  **Determine if $1\\,\\text{m}$ and $3.280839895013123\\,\\text{ft}$ are equal**:\n    - $d_1$ is $1\\,\\text{m}$, so $d_{1,\\text{m}} = 1.0\\,\\text{m}$.\n    - $d_2$ is $3.280839895013123\\,\\text{ft}$. Its value in meters is $d_{2,\\text{m}} = 3.280839895013123 \\times 0.3048 \\approx 0.9999999999999999\\,\\text{m}$.\n    - The absolute difference is $|1.0 - 0.9999999999999999| \\approx 1.11 \\times 10^{-16}\\,\\text{m}$.\n    - Since $1.11 \\times 10^{-16} \\le 10^{-12}$, the two distances are considered equal. The result is `True`.\n\n6.  **Compute $2 \\times (-5\\,\\text{ft})$**:\n    - A `Distance` object for $-5\\,\\text{ft}$ has an internal value of $-5 \\times 0.3048 = -1.524\\,\\text{m}$.\n    - Multiplication by the scalar $2$ yields a new `Distance` with a value of $2 \\times (-1.524) = -3.048\\,\\text{m}$. Rounded, the result is $-3.048000$.\n\n7.  **Compute $0\\,\\text{m} + 0\\,\\text{ft}$**:\n    - A `Distance` for $0\\,\\text{m}$ has $d_{1,\\text{m}} = 0.0\\,\\text{m}$.\n    - A `Distance` for $0\\,\\text{ft}$ has $d_{2,\\text{m}} = 0 \\times 0.3048 = 0.0\\,\\text{m}$.\n    - The sum has a value of $0.0 + 0.0 = 0.0\\,\\text{m}$. Rounded, the result is $0.000000$.\n\nThis systematic, principle-based approach ensures correctness and robustness, and forms the basis for the following program.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves a set of problems related to dimensional consistency and unit conversions\n    for a custom Distance quantity.\n    \"\"\"\n\n    # Define physical and problem-specific constants.\n    # Speed of light in m/s (exact by definition).\n    SPEED_OF_LIGHT = 299792458\n    # Duration of a Julian year in seconds.\n    SECONDS_PER_JULIAN_YEAR = 365.25 * 24 * 3600\n    \n    # Define conversion factors to the base unit (meter).\n    CONVERSION_FACTORS = {\n        'm': 1.0,\n        'ft': 0.3048,  # International foot definition\n        'ly': SPEED_OF_LIGHT * SECONDS_PER_JULIAN_YEAR\n    }\n\n    # Tolerance for equality comparison, as per problem specification.\n    EQUALITY_TOLERANCE = 1e-12\n\n    class Distance:\n        \"\"\"\n        Represents a physical distance quantity, enforcing dimensional consistency.\n        All internal calculations are performed in meters.\n        \"\"\"\n        def __init__(self, value, unit):\n            \"\"\"\n            Initializes a Distance object.\n            \n            Args:\n                value (float or int): The magnitude of the distance.\n                unit (str): The unit of the distance ('m', 'ft', 'ly').\n            \n            Raises:\n                ValueError: If the unit is not one of the admissible units.\n            \"\"\"\n            if unit not in CONVERSION_FACTORS:\n                raise ValueError(f\"Unit '{unit}' is not a valid distance unit.\")\n            \n            # Store the value internally in the base unit (meters).\n            self.value_m = float(value) * CONVERSION_FACTORS[unit]\n\n        def __add__(self, other):\n            \"\"\"\n            Defines addition between two Distance objects.\n            \"\"\"\n            if not isinstance(other, Distance):\n                return NotImplemented\n            return Distance(self.value_m + other.value_m, 'm')\n\n        def __sub__(self, other):\n            \"\"\"\n            Defines subtraction between two Distance objects.\n            \"\"\"\n            if not isinstance(other, Distance):\n                return NotImplemented\n            return Distance(self.value_m - other.value_m, 'm')\n\n        def __mul__(self, other):\n            \"\"\"\n            Defines multiplication of a Distance by a scalar.\n            \"\"\"\n            if not isinstance(other, (int, float)):\n                return NotImplemented\n            return Distance(self.value_m * other, 'm')\n\n        def __rmul__(self, other):\n            \"\"\"\n            Handles right-multiplication by a scalar (e.g., 2 * distance).\n            \"\"\"\n            return self.__mul__(other)\n\n        def __eq__(self, other):\n            \"\"\"\n            Defines equality comparison based on a tolerance.\n            \"\"\"\n            if not isinstance(other, Distance):\n                return False\n            return abs(self.value_m - other.value_m) = EQUALITY_TOLERANCE\n\n        def __repr__(self):\n            \"\"\"\n            Provides a string representation of the Distance object.\n            \"\"\"\n            return f\"Distance({self.value_m} m)\"\n\n    # List to store the results of the test suite.\n    results = []\n\n    # 1. Compute 3 m + 10 ft\n    d1 = Distance(3, 'm')\n    d2 = Distance(10, 'ft')\n    result1 = d1 + d2\n    results.append(f\"{result1.value_m:.6f}\")\n\n    # 2. Compute 1 ly - 10^16 m\n    d3 = Distance(1, 'ly')\n    d4 = Distance(1e16, 'm')\n    result2 = d3 - d4\n    results.append(f\"{result2.value_m:.6f}\")\n\n    # 3. Convert 5280 ft to meters\n    d5 = Distance(5280, 'ft')\n    result3 = d5\n    results.append(f\"{result3.value_m:.6f}\")\n\n    # 4. Determine whether 5 ft + 3 is dimensionally valid\n    # According to the rules, addition is only valid between two distances.\n    # An operation with a scalar is not valid.\n    # We check if the scalar operand is an instance of the Distance class.\n    scalar_val = 3\n    is_valid_op = isinstance(scalar_val, Distance)\n    results.append(is_valid_op)\n\n    # 5. Determine whether 1 m and 3.280839895013123 ft are equal\n    d6 = Distance(1, 'm')\n    d7 = Distance(3.280839895013123, 'ft')\n    result5 = (d6 == d7)\n    results.append(result5)\n\n    # 6. Compute 2 * (-5 ft)\n    d8 = Distance(-5, 'ft')\n    result6 = 2 * d8\n    results.append(f\"{result6.value_m:.6f}\")\n\n    # 7. Compute 0 m + 0 ft\n    d9 = Distance(0, 'm')\n    d10 = Distance(0, 'ft')\n    result7 = d9 + d10\n    results.append(f\"{result7.value_m:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2384770"}]}