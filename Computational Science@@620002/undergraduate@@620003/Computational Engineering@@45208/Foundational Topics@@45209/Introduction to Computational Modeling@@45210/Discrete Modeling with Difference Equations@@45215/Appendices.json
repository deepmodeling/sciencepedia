{"hands_on_practices": [{"introduction": "This practice grounds our study in a classic combinatorial puzzle that is surprisingly relevant to algorithm design. By analyzing the different ways to ascend a staircase, you will learn to construct a difference equation from first principles, a core skill for turning real-world constraints into a mathematical model [@problem_id:2385634]. This exercise highlights the power of recursive thinking by demonstrating how a complex counting problem can be solved by relating it to simpler, preceding cases.", "problem": "A discrete-time climb controller in a computational engineering application models ascending a staircase of $N$ identical risers. At each discrete time step, the controller commands a move that advances the climber by either $1$, $2$, or $3$ risers. Let $W_{N}$ denote the number of distinct ordered command sequences that result in exactly reaching riser $N$ starting from riser $0$.\n\nUsing first principles of counting and the physical constraints described, derive the linear difference equation satisfied by $W_{N}$ together with the necessary initial conditions implied by the scenario. Then, using your model, determine $W_{30}$.\n\nAnswer specification:\n- Provide the final answer as the exact integer value of $W_{30}$ (no rounding).\n- No physical units are required.", "solution": "The problem statement will first be subjected to a rigorous validation procedure.\n\n**Step 1: Extract Givens**\n- The total number of risers to ascend is $N$.\n- The climber starts at riser $0$ and must reach riser $N$.\n- At each discrete time step, the controller can command a move of $1$, $2$, or $3$ risers.\n- $W_N$ is defined as the number of distinct ordered command sequences to reach riser $N$.\n- The objective is to derive the linear difference equation for $W_N$, state the initial conditions, and compute $W_{30}$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is subjected to analysis against the required criteria.\n- **Scientific Grounding**: The problem is a classic exercise in combinatorics, specifically involving recurrence relations (also known as difference equations). This is a fundamental topic in discrete mathematics, which is a cornerstone of computational science and engineering. The model is an abstraction but is mathematically and logically sound. It does not violate any scientific principles.\n- **Well-Posedness**: The problem is clearly defined. The variable $W_N$ has a precise meaning. The constraints (allowed moves) are explicit. The question asks for the governing equation, initial conditions, and a specific value, all of which are derivable from the premises. A unique, meaningful solution exists.\n- **Objectivity**: The problem statement is expressed in precise, objective language, free of subjective or ambiguous terminology.\n- **Completeness**: While the initial conditions are not given as explicit numbers, the problem states they are \"implied by the scenario\". Deriving these conditions from first principles is a standard part of solving such problems. The information provided is sufficient for a complete solution.\n\n**Step 3: Verdict and Action**\nThe problem is scientifically grounded, well-posed, and objective. It is deemed **valid**. We may proceed with the solution.\n\nThe core of this problem lies in establishing a recurrence relation for $W_N$. We will derive this from first principles of counting.\n\nConsider the set of all possible command sequences to reach riser $N$. Any such sequence must end with one of the three allowed moves: a step of size $1$, $2$, or $3$. We can partition the set of all valid sequences into three mutually exclusive subsets based on the final move.\n1.  **The last move is a $1$-riser step**: If the final move is a step of size $1$, the climber must have been at riser $N-1$ just before this move. The number of ways to reach riser $N-1$ is, by definition, $W_{N-1}$. Each of these sequences can be uniquely extended to a sequence for riser $N$ by appending a $1$-riser step. Thus, there are $W_{N-1}$ such sequences.\n2.  **The last move is a $2$-riser step**: Similarly, if the final move is a step of size $2$, the climber must have been at riser $N-2$. The number of ways to reach riser $N-2$ is $W_{N-2}$. There are $W_{N-2}$ sequences of this type.\n3.  **The last move is a $3$-riser step**: If the final move is a step of size $3$, the climber must have come from riser $N-3$. The number of ways to reach this position is $W_{N-3}$.\n\nSince these three cases are exhaustive and mutually exclusive, the total number of ways to reach riser $N$, $W_N$, is the sum of the ways in each case. This gives the linear homogeneous difference equation with constant coefficients:\n$$W_N = W_{N-1} + W_{N-2} + W_{N-3}$$\nThis equation is valid for $N \\ge 3$.\n\nNext, we must determine the initial conditions, as implied by the physical scenario. A third-order difference equation requires three initial conditions to define the sequence uniquely. We will determine $W_0$, $W_1$, and $W_2$.\n- **$W_0$**: This is the number of ways to reach riser $0$ starting from riser $0$. There is exactly one way to do this: take no steps (an empty sequence of commands). Therefore, $W_0 = 1$. This base case is conceptually necessary for the recursion to be grounded.\n- **$W_1$**: To reach riser $1$, there is only one possible sequence of moves: a single step of size $1$. Thus, $W_1 = 1$.\n- **$W_2$**: To reach riser $2$, there are two possible sequences: ($1,1$) or ($2$). Thus, $W_2 = 2$.\n\nWe can verify the consistency of these initial conditions with the derived recurrence relation. The relation $W_3 = W_2 + W_1 + W_0$ should hold.\nBy direct enumeration for $N=3$: The sequences are ($1,1,1$), ($1,2$), ($2,1$), and ($3$). There are $4$ ways, so $W_3 = 4$.\nUsing the recurrence and our initial values: $W_3 = W_2 + W_1 + W_0 = 2 + 1 + 1 = 4$. The values are consistent.\n\nThe problem is now reduced to computing $W_{30}$ using the recurrence relation:\n$$W_N = W_{N-1} + W_{N-2} + W_{N-3}$$\nwith initial conditions $W_0 = 1$, $W_1 = 1$, and $W_2 = 2$.\n\nWe compute the terms of the sequence iteratively:\n$W_0 = 1$\n$W_1 = 1$\n$W_2 = 2$\n$W_3 = W_2 + W_1 + W_0 = 2 + 1 + 1 = 4$\n$W_4 = W_3 + W_2 + W_1 = 4 + 2 + 1 = 7$\n$W_5 = 7 + 4 + 2 = 13$\n$W_6 = 13 + 7 + 4 = 24$\n$W_7 = 24 + 13 + 7 = 44$\n$W_8 = 44 + 24 + 13 = 81$\n$W_9 = 81 + 44 + 24 = 149$\n$W_{10} = 149 + 81 + 44 = 274$\n$W_{11} = 274 + 149 + 81 = 504$\n$W_{12} = 504 + 274 + 149 = 927$\n$W_{13} = 927 + 504 + 274 = 1705$\n$W_{14} = 1705 + 927 + 504 = 3136$\n$W_{15} = 3136 + 1705 + 927 = 5768$\n$W_{16} = 5768 + 3136 + 1705 = 10609$\n$W_{17} = 10609 + 5768 + 3136 = 19513$\n$W_{18} = 19513 + 10609 + 5768 = 35890$\n$W_{19} = 35890 + 19513 + 10609 = 66012$\n$W_{20} = 66012 + 35890 + 19513 = 121415$\n$W_{21} = 121415 + 66012 + 35890 = 223317$\n$W_{22} = 223317 + 121415 + 66012 = 410744$\n$W_{23} = 410744 + 223317 + 121415 = 755476$\n$W_{24} = 755476 + 410744 + 223317 = 1389537$\n$W_{25} = 1389537 + 755476 + 410744 = 2555757$\n$W_{26} = 2555757 + 1389537 + 755476 = 4700770$\n$W_{27} = 4700770 + 2555757 + 1389537 = 8646064$\n$W_{28} = 8646064 + 4700770 + 2555757 = 15902591$\n$W_{29} = 15902591 + 8646064 + 4700770 = 29249425$\n$W_{30} = 29249425 + 15902591 + 8646064 = 53798080$\n\nThe number of distinct ordered command sequences to reach riser $30$ is $W_{30}$.", "answer": "$$\n\\boxed{53798080}\n$$", "id": "2385634"}, {"introduction": "We now shift from a combinatorial puzzle to a practical application in computational finance. This exercise tasks you with modeling the evolution of an asset's value, which involves both proportional growth and fixed deductionsâ€”a common pattern in many engineering and economic systems [@problem_id:2385573]. Solving this problem provides hands-on experience with first-order non-homogeneous difference equations and the methods used to find their closed-form solutions.", "problem": "A cryptocurrency wallet is used for staking. At the end of each monthly epoch, the network credits a staking reward to the wallet and then deducts a fixed maintenance amount. Specifically, let $V_k$ denote the wallet balance immediately after the $k$-th monthly maintenance deduction, with initial condition $V_0 = 1000$ (tokens). The network advertises an annual percentage rate (APR) of $0.12$, apportioned uniformly across $12$ equal monthly epochs, and it deducts a fixed maintenance amount of $2$ (tokens) immediately after each monthly reward is credited. Assume tokens are infinitely divisible and that no rounding occurs at intermediate steps.\n\nUsing first principles:\n1. Write a difference equation relating $V_{k+1}$ to $V_k$.\n2. Solve the difference equation in closed form to obtain $V_n$ as a function of $n$, $V_0$, the monthly reward fraction, and the monthly deduction.\n3. Evaluate $V_{24}$ for the given parameters. Round your final numerical answer to four significant figures. Express the final balance in tokens.", "solution": "The problem is first subjected to validation.\n\n**Step 1: Extract Givens**\n- $V_k$: Wallet balance after the $k$-th monthly maintenance deduction.\n- Initial condition: $V_0 = 1000$ tokens.\n- Annual Percentage Rate (APR): $0.12$.\n- The APR is apportioned uniformly across $12$ monthly epochs.\n- Fixed monthly maintenance deduction: $d = 2$ tokens.\n- The deduction is applied after the monthly reward is credited.\n- A request to write a difference equation for $V_{k+1}$ in terms of $V_k$.\n- A request to solve the difference equation for $V_n$.\n- A request to evaluate $V_{24}$ and round to four significant figures.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is a well-defined exercise in discrete modeling using first-order linear difference equations.\n- **Scientifically Grounded:** Yes. The problem is based on standard financial mathematics, specifically compound interest with regular withdrawals. This is a fundamental application of recurrence relations, a core topic in computational engineering and applied mathematics.\n- **Well-Posed:** Yes. All necessary parameters and initial conditions are provided. The order of operations (reward, then deduction) is explicitly stated, removing ambiguity. The problem structure leads to a unique, stable, and meaningful solution.\n- **Objective:** Yes. The problem is stated using precise, objective language without subjective claims.\n\n**Step 3: Verdict and Action**\nThe problem is deemed **valid**. A solution will be provided.\n\nThe problem requires a three-part solution: deriving the difference equation, solving it, and evaluating the solution for specific parameters.\n\n**Part 1: Derivation of the Difference Equation**\n\nLet $V_k$ be the balance in the wallet immediately after the $k$-th monthly epoch's maintenance deduction. The balance at the beginning of the $(k+1)$-th epoch is therefore $V_k$.\n\nThe annual percentage rate (APR) is given as $0.12$. This is apportioned uniformly over $12$ monthly epochs. The monthly reward fraction, denoted by $r$, is:\n$$r = \\frac{0.12}{12} = 0.01$$\nAt the end of the $(k+1)$-th month, a reward is credited to the wallet based on the balance $V_k$. The reward amount is $r V_k$. The balance after the reward is credited becomes:\n$$V_k + r V_k = (1+r) V_k$$\nImmediately after the reward is credited, a fixed maintenance amount, denoted by $d$, is deducted. Here, $d=2$ tokens. The balance after this deduction is $V_{k+1}$.\nTherefore, the relationship between $V_{k+1}$ and $V_k$ is:\n$$V_{k+1} = (1+r) V_k - d$$\nThis is the first-order linear non-homogeneous difference equation that models the system. Substituting the given values for $r$ and $d$, the specific equation is:\n$$V_{k+1} = 1.01 V_k - 2$$\n\n**Part 2: Closed-Form Solution of the Difference Equation**\n\nThe general form of the equation is $V_{k+1} = a V_k + b$, with $a = 1+r$ and $b = -d$.\nTo solve this, we first seek a fixed point, or equilibrium solution, $V^*$, where $V_{k+1} = V_k = V^*$.\n$$V^* = a V^* + b$$\n$$V^* (1-a) = b$$\n$$V^* = \\frac{b}{1-a}$$\nSubstituting $a = 1+r$ and $b = -d$:\n$$V^* = \\frac{-d}{1 - (1+r)} = \\frac{-d}{-r} = \\frac{d}{r}$$\nNow, we define a new variable $U_k = V_k - V^*$. The recurrence for $U_k$ is:\n$$U_{k+1} = V_{k+1} - V^* = (a V_k + b) - V^*$$\nSince $V^* = a V^* + b$, we have $b = V^* - a V^*$. Substituting this into the expression for $U_{k+1}$:\n$$U_{k+1} = a V_k + (V^* - a V^*) - V^* = a V_k - a V^* = a(V_k - V^*) = a U_k$$\nThe relation $U_{k+1} = a U_k$ describes a geometric progression. Its solution is $U_n = a^n U_0$.\nSubstituting back $V_n$ and $V_0$:\n$$V_n - V^* = a^n (V_0 - V^*)$$\n$$V_n = a^n (V_0 - V^*) + V^*$$\nFinally, substituting $a = 1+r$ and $V^* = \\frac{d}{r}$, we obtain the closed-form solution for $V_n$ as a function of $n$, $V_0$, $r$, and $d$:\n$$V_n = (1+r)^n \\left( V_0 - \\frac{d}{r} \\right) + \\frac{d}{r}$$\n\n**Part 3: Evaluation of $V_{24}$**\n\nWe are asked to evaluate the balance after $24$ months, which is $V_{24}$. The given parameters are:\n- Initial balance $V_0 = 1000$.\n- Monthly reward fraction $r = 0.01$.\n- Monthly deduction $d = 2$.\n- Number of epochs $n = 24$.\n\nFirst, we calculate the term $\\frac{d}{r}$:\n$$\\frac{d}{r} = \\frac{2}{0.01} = 200$$\nNow, substitute the parameters into the closed-form solution:\n$$V_{24} = (1+0.01)^{24} \\left( 1000 - 200 \\right) + 200$$\n$$V_{24} = (1.01)^{24} (800) + 200$$\nWe must now compute the value of $(1.01)^{24}$:\n$$(1.01)^{24} \\approx 1.2697346485$$\nSubstituting this value back into the expression for $V_{24}$:\n$$V_{24} \\approx 1.2697346485 \\times 800 + 200$$\n$$V_{24} \\approx 1015.7877188 + 200$$\n$$V_{24} \\approx 1215.7877188$$\nThe problem requires the final answer to be rounded to four significant figures. The number is $1215.7877188...$. The first four significant digits are $1$, $2$, $1$, and $5$. The fifth digit is $7$, which is greater than or equal to $5$, so we round up the fourth significant digit ($5$) to $6$.\nThe final balance, rounded to four significant figures, is $1216$ tokens.", "answer": "$$\n\\boxed{1216}\n$$", "id": "2385573"}, {"introduction": "This final practice challenges you to work like a control engineer by tackling an inverse problem: deducing a system's governing equation from its observed response to a known input [@problem_id:2385566]. This exercise not only provides essential practice with the Z-transform but also deepens your understanding of how a system's internal dynamics are revealed through its external behavior.", "problem": "A discrete-time, single-input single-output (SISO), causal, linear time-invariant (LTI) system is described by a monic linear constant-coefficient difference equation relating the input sequence $u_n$ and the output sequence $y_n$. The system is initially at rest. When driven by the unit step input $u_n$ defined by $u_n = 1$ for $n \\ge 0$ and $u_n = 0$ for $n < 0$, the observed output for $n \\ge 0$ is\n$$\ny_n = 1 - \\left(\\frac{1}{2}\\right)^{n}\n$$.\nAssume the governing equation is of minimal order among all such monic equations that are causal and LTI. Determine the coefficients of the difference equation in the canonical form\n$$\ny_n + a_1 y_{n-1} = b_0 u_n + b_1 u_{n-1}\n$$.\nProvide your final answer as the row matrix $\\big(a_1, b_0, b_1\\big)$ in that order. No rounding is required.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It presents a standard problem in the analysis of linear time-invariant (LTI) systems which is solvable using established methods. All necessary information is provided, and the problem is free of contradictions or ambiguities. Thus, a solution will be furnished.\n\nThe system is described by the linear constant-coefficient difference equation of the form:\n$$\ny_n + a_1 y_{n-1} = b_0 u_n + b_1 u_{n-1}\n$$\nThis is a first-order LTI system. The relationship between the input $u_n$ and output $y_n$ can be effectively analyzed in the Z-domain. Assuming the system is causal and starts from rest ($y_k = 0$ for $k < 0$), taking the Z-transform of the difference equation yields:\n$$\n\\mathcal{Z}\\{y_n\\} + a_1 \\mathcal{Z}\\{y_{n-1}\\} = b_0 \\mathcal{Z}\\{u_n\\} + b_1 \\mathcal{Z}\\{u_{n-1}\\}\n$$\nLet $Y(z) = \\mathcal{Z}\\{y_n\\}$ and $U(z) = \\mathcal{Z}\\{u_n\\}$. Using the time-shifting property of the Z-transform, $\\mathcal{Z}\\{x_{n-k}\\} = z^{-k}X(z)$, we get:\n$$\nY(z) + a_1 z^{-1}Y(z) = b_0 U(z) + b_1 z^{-1}U(z)\n$$\nFactoring out $Y(z)$ and $U(z)$:\n$$\nY(z)(1 + a_1 z^{-1}) = U(z)(b_0 + b_1 z^{-1})\n$$\nThe system's transfer function, $H(z)$, is defined as the ratio of the output transform to the input transform:\n$$\nH(z) = \\frac{Y(z)}{U(z)} = \\frac{b_0 + b_1 z^{-1}}{1 + a_1 z^{-1}}\n$$\nOur objective is to determine the coefficients $a_1$, $b_0$, and $b_1$ by first finding the specific $H(z)$ for the given input-output pair.\n\nThe input is the unit step sequence, defined as $u_n = 1$ for $n \\ge 0$ and $u_n = 0$ for $n < 0$. Its Z-transform is:\n$$\nU(z) = \\sum_{n=0}^{\\infty} u_n z^{-n} = \\sum_{n=0}^{\\infty} z^{-n} = \\frac{1}{1-z^{-1}}\n$$\nThe output sequence for $n \\ge 0$ is given by $y_n = 1 - \\left(\\frac{1}{2}\\right)^{n}$. We can express this as the difference of two sequences for $n \\ge 0$: the unit step and a decaying exponential. The Z-transform of the output is found by applying the transform to each term:\n$$\nY(z) = \\mathcal{Z}\\left\\{1 \\cdot u_n - \\left(\\frac{1}{2}\\right)^{n} u_n\\right\\} = \\mathcal{Z}\\{u_n\\} - \\mathcal{Z}\\left\\{\\left(\\frac{1}{2}\\right)^{n} u_n\\right\\}\n$$\nUsing the standard Z-transform pairs, we have:\n$$\nY(z) = \\frac{1}{1-z^{-1}} - \\frac{1}{1 - \\frac{1}{2}z^{-1}}\n$$\nTo find a single rational expression for $Y(z)$, we combine the terms:\n$$\nY(z) = \\frac{\\left(1 - \\frac{1}{2}z^{-1}\\right) - \\left(1 - z^{-1}\\right)}{\\left(1-z^{-1}\\right)\\left(1 - \\frac{1}{2}z^{-1}\\right)} = \\frac{1 - \\frac{1}{2}z^{-1} - 1 + z^{-1}}{\\left(1-z^{-1}\\right)\\left(1 - \\frac{1}{2}z^{-1}\\right)} = \\frac{\\frac{1}{2}z^{-1}}{\\left(1-z^{-1}\\right)\\left(1 - \\frac{1}{2}z^{-1}\\right)}\n$$\nNow, we can compute the system's transfer function $H(z)$ using $Y(z)$ and $U(z)$:\n$$\nH(z) = \\frac{Y(z)}{U(z)} = \\frac{\\frac{\\frac{1}{2}z^{-1}}{\\left(1-z^{-1}\\right)\\left(1 - \\frac{1}{2}z^{-1}\\right)}}{\\frac{1}{1-z^{-1}}}\n$$\nCanceling the common factor $(1-z^{-1})$ in the numerator and denominator gives:\n$$\nH(z) = \\frac{\\frac{1}{2}z^{-1}}{1 - \\frac{1}{2}z^{-1}}\n$$\nThe condition that the difference equation is of minimal order is satisfied, as a zeroth-order system, $y_n = b_0 u_n$, would imply $y_n$ is constant for $n \\ge 0$, which contradicts the given output $y_n = 1 - (\\frac{1}{2})^n$. Thus, a first-order system is the minimal one possible.\n\nBy comparing the derived transfer function with the general form, we can identify the coefficients.\n$$\nH(z) = \\frac{b_0 + b_1 z^{-1}}{1 + a_1 z^{-1}} = \\frac{0 + \\frac{1}{2}z^{-1}}{1 + \\left(-\\frac{1}{2}\\right)z^{-1}}\n$$\nBy equating the coefficients of corresponding powers of $z^{-1}$ in the numerator and the denominator, we find:\n$$\nb_0 = 0\n$$\n$$\nb_1 = \\frac{1}{2}\n$$\n$$\na_1 = -\\frac{1}{2}\n$$\nTherefore, the coefficients of the difference equation are $a_1 = -\\frac{1}{2}$, $b_0 = 0$, and $b_1 = \\frac{1}{2}$. The resulting difference equation is:\n$$\ny_n - \\frac{1}{2} y_{n-1} = \\frac{1}{2} u_{n-1}\n$$\nThis equation correctly describes the given system response. The required coefficients are compiled into the specified matrix form.", "answer": "$$\n\\boxed{\\begin{pmatrix} -\\frac{1}{2} & 0 & \\frac{1}{2} \\end{pmatrix}}\n$$", "id": "2385566"}]}