{"hands_on_practices": [{"introduction": "We begin with a foundational thought experiment to build intuition about how Galerkin projection interacts with the underlying physics of a system. This exercise explores a simple two-dimensional harmonic oscillator which is governed by a skew-symmetric operator and is therefore energy-conserving. By deriving the one-dimensional reduced-order model, you will uncover a fundamental principle: Galerkin projection correctly preserves the energy-conserving nature of the original system, a result that holds true regardless of the specific POD basis vector chosen [@problem_id:2432084].", "problem": "Consider a two-dimensional linear Ordinary Differential Equation (ODE) of the form $\\dot{\\boldsymbol{x}}(t) = A \\boldsymbol{x}(t)$ with $A \\in \\mathbb{R}^{2 \\times 2}$ and the standard Euclidean inner product on $\\mathbb{R}^{2}$. Let $A$ be the skew-symmetric matrix\n$$\nA \\;=\\; \\begin{pmatrix} 0 & -\\omega \\\\[4pt] \\omega & 0 \\end{pmatrix},\n$$\nwhere $\\omega > 0$ is a fixed real constant. Suppose we collect a continuous-time snapshot ensemble by evolving the system from the initial condition $\\boldsymbol{x}(0) = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$ over the time interval $[0,\\, 2\\pi/\\omega]$ with uniform time weighting, and we build a one-dimensional basis using Proper Orthogonal Decomposition (POD), defined as the dominant eigenvector of the snapshot correlation operator computed with the Euclidean inner product.\n\nUsing only fundamental definitions of Proper Orthogonal Decomposition (POD) and Galerkin projection, and the standard properties of linear time-invariant systems, derive the one-dimensional Galerkin-reduced model $\\dot{a}(t) = a_r\\, a(t)$ obtained by projecting the full system onto the one-dimensional POD subspace. Then, compute the scalar coefficient $a_r$ as an explicit real number.\n\nYour final answer must be the value of $a_r$. No rounding is required, and no units are needed. Express the final answer as a single real number.", "solution": "The problem is first subjected to validation.\n\nStep 1: Extract Givens.\n- The system dynamics are described by the linear Ordinary Differential Equation (ODE) $\\dot{\\boldsymbol{x}}(t) = A \\boldsymbol{x}(t)$, where $\\boldsymbol{x}(t) \\in \\mathbb{R}^{2}$ and $t$ is time.\n- The system matrix $A$ is given as the skew-symmetric matrix $A = \\begin{pmatrix} 0 & -\\omega \\\\ \\omega & 0 \\end{pmatrix}$ for a constant $\\omega > 0$.\n- The inner product is the standard Euclidean inner product on $\\mathbb{R}^{2}$.\n- A continuous-time snapshot ensemble is generated from the initial condition $\\boldsymbol{x}(0) = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$ over the time interval $[0, 2\\pi/\\omega]$. The time weighting is uniform.\n- A one-dimensional basis is to be constructed using Proper Orthogonal Decomposition (POD). This basis is specified as the dominant eigenvector of the snapshot correlation operator.\n- The full system is to be projected onto this one-dimensional POD subspace using Galerkin projection to obtain a reduced-order model of the form $\\dot{a}(t) = a_r a(t)$.\n- The task is to derive this model and compute the scalar coefficient $a_r$.\n\nStep 2: Validate Using Extracted Givens.\nThe problem is scientifically grounded, dealing with standard methods in computational engineering (reduced-order modeling, POD, Galerkin projection) applied to a fundamental linear dynamical system (a harmonic oscillator). The problem is objective and well-defined, providing all necessary mathematical objects and parameters. A minor ambiguity exists in the term \"the dominant eigenvector\", as the symmetry of the problem's trajectory leads to a correlation operator with degenerate eigenvalues. However, as will be demonstrated, the final demanded result is independent of the choice of eigenvector from the resulting eigenspace. Thus, this ambiguity does not render the problem ill-posed or unsolvable. The problem is valid.\n\nStep 3: Proceed with Solution.\nThe objective is to find the scalar coefficient $a_r$ in the one-dimensional reduced-order model $\\dot{a}(t) = a_r a(t)$. This model is obtained by a Galerkin projection of the full system $\\dot{\\boldsymbol{x}} = A \\boldsymbol{x}$ onto a one-dimensional POD basis.\n\nLet the one-dimensional POD basis be denoted by the vector $\\boldsymbol{\\phi} \\in \\mathbb{R}^{2}$. By definition, POD basis vectors are orthonormal, so we have $\\boldsymbol{\\phi}^T \\boldsymbol{\\phi} = 1$.\n\nThe reduced-order model (ROM) seeks an approximation of the state $\\boldsymbol{x}(t)$ in the form $\\boldsymbol{\\hat{x}}(t) = a(t) \\boldsymbol{\\phi}$, where $a(t)$ is the time-varying coordinate in the reduced basis.\n\nThe Galerkin projection method requires the residual of the ODE, when evaluated with the approximation $\\boldsymbol{\\hat{x}}(t)$, to be orthogonal to the basis vector $\\boldsymbol{\\phi}$. The residual is $R(t) = \\dot{\\boldsymbol{\\hat{x}}}(t) - A \\boldsymbol{\\hat{x}}(t)$.\n\nThe orthogonality condition is expressed using the Euclidean inner product:\n$$\n\\boldsymbol{\\phi}^T R(t) = 0\n$$\nSubstituting the expressions for $\\boldsymbol{\\hat{x}}(t)$ and its time derivative $\\dot{\\boldsymbol{\\hat{x}}}(t) = \\dot{a}(t) \\boldsymbol{\\phi}$:\n$$\n\\boldsymbol{\\phi}^T (\\dot{a}(t) \\boldsymbol{\\phi} - A (a(t) \\boldsymbol{\\phi})) = 0\n$$\nBy linearity of the inner product, we can separate the terms:\n$$\n\\boldsymbol{\\phi}^T (\\dot{a}(t) \\boldsymbol{\\phi}) - \\boldsymbol{\\phi}^T (a(t) A \\boldsymbol{\\phi}) = 0\n$$\nThe scalar coefficients $\\dot{a}(t)$ and $a(t)$ can be factored out:\n$$\n\\dot{a}(t) (\\boldsymbol{\\phi}^T \\boldsymbol{\\phi}) - a(t) (\\boldsymbol{\\phi}^T A \\boldsymbol{\\phi}) = 0\n$$\nGiven that the basis vector $\\boldsymbol{\\phi}$ is normalized, $\\boldsymbol{\\phi}^T \\boldsymbol{\\phi} = 1$. The equation simplifies to:\n$$\n\\dot{a}(t) = (\\boldsymbol{\\phi}^T A \\boldsymbol{\\phi}) a(t)\n$$\nThis is the one-dimensional Galerkin-reduced model. By comparing this to the required form $\\dot{a}(t) = a_r a(t)$, we identify the coefficient $a_r$ as:\n$$\na_r = \\boldsymbol{\\phi}^T A \\boldsymbol{\\phi}\n$$\nThe value $a_r$ is a scalar, representing the Rayleigh quotient of the matrix $A$ with respect to the vector $\\boldsymbol{\\phi}$.\n\nWe can determine the value of $a_r$ by exploiting the properties of the matrix $A$, without needing to explicitly compute the POD basis vector $\\boldsymbol{\\phi}$. The problem states that $A$ is a skew-symmetric matrix. By definition, a matrix is skew-symmetric if its transpose is equal to its negative, i.e., $A^T = -A$.\n\nLet us consider the transpose of the scalar $a_r$. As a scalar, $a_r$ is equal to its own transpose: $a_r^T = a_r$.\nNow, let's compute the transpose of the expression for $a_r$:\n$$\na_r^T = (\\boldsymbol{\\phi}^T A \\boldsymbol{\\phi})^T\n$$\nUsing the property of matrix transpose $(BC)^T = C^T B^T$, and noting that $\\boldsymbol{\\phi}$ is a column vector so $\\boldsymbol{\\phi}^T$ is a row vector, we have:\n$$\na_r^T = \\boldsymbol{\\phi}^T A^T (\\boldsymbol{\\phi}^T)^T = \\boldsymbol{\\phi}^T A^T \\boldsymbol{\\phi}\n$$\nNow, we use the skew-symmetric property, $A^T = -A$:\n$$\na_r^T = \\boldsymbol{\\phi}^T (-A) \\boldsymbol{\\phi} = -(\\boldsymbol{\\phi}^T A \\boldsymbol{\\phi})\n$$\nBy the definition of $a_r$, this means:\n$$\na_r^T = -a_r\n$$\nWe have thus established two facts: $a_r = a_r^T$ and $a_r^T = -a_r$. Combining these gives:\n$$\na_r = -a_r\n$$\nThis equation implies $2 a_r = 0$, which has the unique solution for a real number $a_r$:\n$$\na_r = 0\n$$\nThis result is general for any one-dimensional Galerkin projection of a linear system governed by a real skew-symmetric matrix. It is independent of the specific basis vector $\\boldsymbol{\\phi}$ used for the projection. Therefore, despite the degeneracy of the POD problem for this specific circular trajectory (where the correlation matrix is proportional to the identity matrix, $C = \\frac{\\pi}{\\omega}I$, and any vector is an eigenvector), the resulting reduced model coefficient $a_r$ is unique and unambiguous. The reduced model is $\\dot{a}(t) = 0$, which correctly captures the energy-conserving nature of the full system, as the reduced \"energy\" $\\frac{1}{2}a(t)^2$ is constant.", "answer": "$$\\boxed{0}$$", "id": "2432084"}, {"introduction": "Building on the principle of projecting physical operators, we now tackle a more complex and ubiquitous model in engineering: the one-dimensional advection-diffusion equation. This practice requires you to perform a Galerkin projection to derive the reduced-order mass, advection, and diffusion matrices from first principles [@problem_id:2432108]. You will analyze how the distinct mathematical properties of the advection operator (skew-symmetric) and the diffusion operator (symmetric positive-definite) manifest in the reduced model, reinforcing your understanding of how ROMs capture energy conservation and dissipation.", "problem": "Consider the one-dimensional advection-diffusion equation on the spatial interval $x \\in (0,1)$ with homogeneous Dirichlet boundary conditions\n$$\n\\frac{\\partial u}{\\partial t} + a\\,\\frac{\\partial u}{\\partial x} = \\nu\\,\\frac{\\partial^2 u}{\\partial x^2}, \\quad u(0,t)=u(1,t)=0,\n$$\nwhere $a>0$ is the constant advection speed and $\\nu>0$ is the constant kinematic viscosity. Suppose a Proper Orthogonal Decomposition (POD) basis is available and coincides with the first $r$ sine eigenfunctions of the Dirichlet Laplacian, namely\n$$\n\\phi_k(x) = \\sqrt{2}\\,\\sin(k\\pi x), \\quad k=1,\\dots,r,\n$$\nwhich are orthonormal in the $L^2(0,1)$ inner product. Use a standard Galerkin projection onto $\\text{span}\\{\\phi_1,\\dots,\\phi_r\\}$ with the $L^2(0,1)$ inner product to derive the reduced-order model (ROM) for the generalized coordinates $q_k(t)$ defined by the ansatz\n$$\nu(x,t) \\approx \\sum_{k=1}^r q_k(t)\\,\\phi_k(x).\n$$\nIdentify the reduced advection matrix and reduced diffusion matrix by expressing the ROM in the form\n$$\nM\\,\\dot{\\boldsymbol{q}}(t) + a\\,C\\,\\boldsymbol{q}(t) + \\nu\\,K\\,\\boldsymbol{q}(t) = \\boldsymbol{0},\n$$\nwhere $M$ is the reduced mass matrix, $C$ is the reduced advection matrix, and $K$ is the reduced diffusion (stiffness) matrix. Then analyze the energetic roles of $C$ and $K$ in terms of the evolution of the reduced kinetic energy defined by $\\frac{1}{2}\\|\\boldsymbol{q}(t)\\|_2^2$.\n\nFinally, let $r=4$ and define the following dimensionless scalar that quantifies, at the reduced level, the worst-case ratio of advection to diffusion strengths:\n$$\n\\rho_4 \\equiv \\frac{a\\,\\max_{1\\leq i\\neq j\\leq 4} |C_{ij}|}{\\nu\\,\\max_{1\\leq i\\leq 4} K_{ii}}.\n$$\nCompute a closed-form analytical expression for $\\rho_4$ in terms of $a$, $\\nu$, and $\\pi$. Your final answer must be a single expression. No rounding is required, and no units should be included in the final expression.", "solution": "The problem statement is subjected to validation prior to any attempt at a solution.\n\nStep 1: Extract Givens\n-   Partial Differential Equation (PDE): $\\frac{\\partial u}{\\partial t} + a\\,\\frac{\\partial u}{\\partial x} = \\nu\\,\\frac{\\partial^2 u}{\\partial x^2}$ on the domain $x \\in (0,1)$.\n-   Boundary Conditions (BCs): $u(0,t)=u(1,t)=0$.\n-   Constants: advection speed $a>0$, kinematic viscosity $\\nu>0$.\n-   Proper Orthogonal Decomposition (POD) Basis: $\\phi_k(x) = \\sqrt{2}\\,\\sin(k\\pi x)$ for $k=1,\\dots,r$. The basis is specified to be orthonormal in the $L^2(0,1)$ inner product, which is $\\langle f, g \\rangle = \\int_0^1 f(x)g(x)\\,dx$.\n-   Ansatz for reduced-order model (ROM): $u(x,t) \\approx \\sum_{k=1}^r q_k(t)\\,\\phi_k(x)$.\n-   Projection Method: Standard Galerkin projection using the $L^2(0,1)$ inner product.\n-   Target ROM form: $M\\,\\dot{\\boldsymbol{q}}(t) + a\\,C\\,\\boldsymbol{q}(t) + \\nu\\,K\\,\\boldsymbol{q}(t) = \\boldsymbol{0}$.\n-   Task 1: Derive the matrices $M$, $C$, and $K$.\n-   Task 2: Analyze the energetic roles of $C$ and $K$ on the evolution of the reduced kinetic energy, $\\frac{1}{2}\\|\\boldsymbol{q}(t)\\|_2^2$.\n-   Task 3: For $r=4$, compute the dimensionless ratio $\\rho_4 \\equiv \\frac{a\\,\\max_{1\\leq i\\neq j\\leq 4} |C_{ij}|}{\\nu\\,\\max_{1\\leq i\\leq 4} K_{ii}}$.\n\nStep 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, well-posed, and objective. It concerns the application of standard model reduction techniques (POD and Galerkin projection) to a fundamental model equation in engineering and physics (the advection-diffusion equation). The problem is self-contained, providing all necessary definitions, equations, and basis functions. The tasks are mathematically precise and lead to a unique, verifiable solution. There are no scientific or logical flaws, no ambiguities, and no reliance on subjective claims.\n\nStep 3: Verdict and Action\nThe problem is valid. A solution will be constructed.\n\nDerivation of the Reduced-Order Model (ROM)\n\nWe substitute the ansatz $u(x,t) = \\sum_{k=1}^r q_k(t)\\phi_k(x)$ into the governing PDE:\n$$\n\\frac{\\partial}{\\partial t}\\left(\\sum_{k=1}^r q_k(t)\\phi_k(x)\\right) + a\\,\\frac{\\partial}{\\partial x}\\left(\\sum_{k=1}^r q_k(t)\\phi_k(x)\\right) = \\nu\\,\\frac{\\partial^2}{\\partial x^2}\\left(\\sum_{k=1}^r q_k(t)\\phi_k(x)\\right)\n$$\nBy linearity of the derivatives, this becomes:\n$$\n\\sum_{k=1}^r \\dot{q}_k(t)\\phi_k(x) + a\\sum_{k=1}^r q_k(t)\\frac{d\\phi_k}{dx}(x) - \\nu\\sum_{k=1}^r q_k(t)\\frac{d^2\\phi_k}{dx^2}(x) = 0\n$$\nThe Galerkin projection requires the residual of this equation to be orthogonal to each basis function $\\phi_j(x)$ for $j=1,\\dots,r$. This is expressed using the $L^2(0,1)$ inner product $\\langle \\cdot, \\cdot \\rangle$:\n$$\n\\left\\langle \\sum_{k=1}^r \\dot{q}_k\\phi_k + a\\sum_{k=1}^r q_k\\frac{d\\phi_k}{dx} - \\nu\\sum_{k=1}^r q_k\\frac{d^2\\phi_k}{dx^2}, \\phi_j \\right\\rangle = 0 \\quad \\text{for } j=1,\\dots,r\n$$\nExploiting the linearity of the inner product, we obtain a system of ordinary differential equations:\n$$\n\\sum_{k=1}^r \\langle \\phi_k, \\phi_j \\rangle \\dot{q}_k(t) + a \\sum_{k=1}^r \\left\\langle \\frac{d\\phi_k}{dx}, \\phi_j \\right\\rangle q_k(t) - \\nu \\sum_{k=1}^r \\left\\langle \\frac{d^2\\phi_k}{dx^2}, \\phi_j \\right\\rangle q_k(t) = 0\n$$\nThis system can be written in the matrix form $M\\dot{\\boldsymbol{q}} + aC\\boldsymbol{q} + \\nu K\\boldsymbol{q} = \\boldsymbol{0}$ by defining the matrix entries as follows:\n$M_{jk} = \\langle \\phi_k, \\phi_j \\rangle$\n$C_{jk} = \\left\\langle \\frac{d\\phi_k}{dx}, \\phi_j \\right\\rangle$\n$K_{jk} = -\\left\\langle \\frac{d^2\\phi_k}{dx^2}, \\phi_j \\right\\rangle$\n\nWe now compute the entries for each matrix.\nReduced Mass Matrix $M$: Since the basis $\\{\\phi_k\\}$ is orthonormal, $M_{jk} = \\langle \\phi_k, \\phi_j \\rangle = \\delta_{jk}$, where $\\delta_{jk}$ is the Kronecker delta. Thus, $M$ is the $r \\times r$ identity matrix, $I$.\n\nReduced Stiffness (Diffusion) Matrix $K$: The basis functions are eigenfunctions of the negative Laplacian with Dirichlet boundary conditions. First, we compute the second derivative of $\\phi_k(x)$:\n$$\n\\frac{d^2\\phi_k}{dx^2} = \\frac{d^2}{dx^2}\\left(\\sqrt{2}\\sin(k\\pi x)\\right) = -(k\\pi)^2 \\sqrt{2}\\sin(k\\pi x) = -(k\\pi)^2 \\phi_k(x)\n$$\nSubstituting this into the definition of $K_{jk}$:\n$$\nK_{jk} = -\\langle -(k\\pi)^2\\phi_k, \\phi_j \\rangle = (k\\pi)^2 \\langle \\phi_k, \\phi_j \\rangle = (k\\pi)^2 \\delta_{jk}\n$$\nThe matrix $K$ is therefore a diagonal matrix with entries $K_{kk} = (k\\pi)^2$.\n\nReduced Advection Matrix $C$: The entries are given by the integral:\n$$\nC_{jk} = \\left\\langle \\frac{d\\phi_k}{dx}, \\phi_j \\right\\rangle = \\int_0^1 \\left(\\frac{d}{dx}(\\sqrt{2}\\sin(k\\pi x))\\right)(\\sqrt{2}\\sin(j\\pi x))\\,dx = 2k\\pi \\int_0^1 \\cos(k\\pi x)\\sin(j\\pi x)\\,dx\n$$\nUsing the product-to-sum identity $\\sin(A)\\cos(B) = \\frac{1}{2}(\\sin(A+B)+\\sin(A-B))$, we get:\n$$\nC_{jk} = k\\pi \\int_0^1 \\left( \\sin((j+k)\\pi x) + \\sin((j-k)\\pi x) \\right)\\,dx\n$$\nIf $j=k$, the integrand is $\\sin(2k\\pi x)$, whose integral over $[0,1]$ is $0$. Thus, $C_{kk}=0$. This is consistent with the general property that $C$ is skew-symmetric ($C_{jk} = -C_{kj}$) due to the homogeneous boundary conditions, which can be shown via integration by parts: $C_{jk} = \\int_0^1 \\phi_j \\phi_k' dx = [\\phi_j \\phi_k]_0^1 - \\int_0^1 \\phi_j' \\phi_k dx = 0 - C_{kj}$.\nIf $j \\neq k$:\n$$\nC_{jk} = k\\pi \\left[ -\\frac{\\cos((j+k)\\pi x)}{(j+k)\\pi} - \\frac{\\cos((j-k)\\pi x)}{(j-k)\\pi} \\right]_0^1 = -k \\left( \\frac{(-1)^{j+k}-1}{j+k} + \\frac{(-1)^{j-k}-1}{j-k} \\right)\n$$\nAs $(-1)^{j-k} = (-1)^{j+k}$, we simplify:\n$$\nC_{jk} = -k ((-1)^{j+k}-1) \\left( \\frac{1}{j+k} + \\frac{1}{j-k} \\right) = -k ((-1)^{j+k}-1) \\frac{2j}{j^2-k^2} = \\frac{2jk}{k^2-j^2}((-1)^{j+k}-1)\n$$\nIf $j+k$ is even, $(-1)^{j+k}-1=0$, so $C_{jk}=0$.\nIf $j+k$ is odd, $(-1)^{j+k}-1=-2$, so $C_{jk} = \\frac{2jk}{k^2-j^2}(-2) = \\frac{4jk}{j^2-k^2}$.\n\nEnergetic Analysis of $C$ and $K$\nThe reduced system is $\\dot{\\boldsymbol{q}}(t) + a\\,C\\,\\boldsymbol{q}(t) + \\nu\\,K\\,\\boldsymbol{q}(t) = \\boldsymbol{0}$. The reduced kinetic energy is $E(t) = \\frac{1}{2}\\|\\boldsymbol{q}(t)\\|_2^2 = \\frac{1}{2}\\boldsymbol{q}(t)^T\\boldsymbol{q}(t)$. Its time derivative is:\n$$\n\\frac{dE}{dt} = \\frac{1}{2}(\\dot{\\boldsymbol{q}}^T\\boldsymbol{q} + \\boldsymbol{q}^T\\dot{\\boldsymbol{q}}) = \\boldsymbol{q}^T\\dot{\\boldsymbol{q}}\n$$\nSubstituting $\\dot{\\boldsymbol{q}} = -aC\\boldsymbol{q} - \\nu K\\boldsymbol{q}$:\n$$\n\\frac{dE}{dt} = \\boldsymbol{q}^T(-aC\\boldsymbol{q} - \\nu K\\boldsymbol{q}) = -a\\,\\boldsymbol{q}^T C \\boldsymbol{q} - \\nu\\,\\boldsymbol{q}^T K \\boldsymbol{q}\n$$\n-   Role of $C$: The matrix $C$ is skew-symmetric, i.e., $C^T = -C$. For any vector $\\boldsymbol{q}$, the quadratic form $\\boldsymbol{q}^T C \\boldsymbol{q}$ is always zero. This is because $\\boldsymbol{q}^T C \\boldsymbol{q} = (\\boldsymbol{q}^T C \\boldsymbol{q})^T = \\boldsymbol{q}^T C^T \\boldsymbol{q} = -\\boldsymbol{q}^T C \\boldsymbol{q}$, which implies $2\\boldsymbol{q}^T C \\boldsymbol{q}=0$. Therefore, the advection term $-a\\,\\boldsymbol{q}^T C \\boldsymbol{q}$ does not contribute to the change in energy. The reduced advection operator is energy-conserving.\n-   Role of $K$: The matrix $K$ is diagonal with entries $(k\\pi)^2 > 0$. Thus, $K$ is symmetric and positive definite. The quadratic form is $\\boldsymbol{q}^T K \\boldsymbol{q} = \\sum_{k=1}^r (k\\pi)^2 q_k^2 \\ge 0$. This term is zero only if $\\boldsymbol{q}=\\boldsymbol{0}$. Since $\\nu>0$, the diffusion term $-\\nu\\,\\boldsymbol{q}^T K \\boldsymbol{q}$ is always less than or equal to zero. The reduced diffusion operator is purely dissipative, continuously removing energy from the system unless it is at rest.\n\nComputation of $\\rho_4$\nThe expression to compute is $\\rho_4 = \\frac{a\\,\\max_{1\\leq i\\neq j\\leq 4} |C_{ij}|}{\\nu\\,\\max_{1\\leq i\\leq 4} K_{ii}}$, where $r=4$.\n\nDenominator: The diagonal entries of $K$ are $K_{ii} = (i\\pi)^2$. We need the maximum for $i \\in \\{1,2,3,4\\}$.\n$$\n\\max_{1\\leq i\\leq 4} K_{ii} = \\max\\{(1\\pi)^2, (2\\pi)^2, (3\\pi)^2, (4\\pi)^2\\} = (4\\pi)^2 = 16\\pi^2\n$$\n\nNumerator: We need to find the maximum of $|C_{ij}|$ for $1 \\leq i \\neq j \\leq 4$. We only need to check pairs $(i,j)$ where $i+j$ is odd, and we can assume $i<j$ due to symmetry of the absolute value, $|C_{ij}|=|C_{ji}|$.\nThe non-zero off-diagonal entries are for pairs with opposite parity:\n-   $(i,j)=(1,2)$: $i+j=3$ (odd). $|C_{12}| = \\left|\\frac{4(1)(2)}{1^2-2^2}\\right| = \\left|\\frac{8}{-3}\\right| = \\frac{8}{3}$.\n-   $(i,j)=(1,4)$: $i+j=5$ (odd). $|C_{14}| = \\left|\\frac{4(1)(4)}{1^2-4^2}\\right| = \\left|\\frac{16}{-15}\\right| = \\frac{16}{15}$.\n-   $(i,j)=(2,3)$: $i+j=5$ (odd). $|C_{23}| = \\left|\\frac{4(2)(3)}{2^2-3^2}\\right| = \\left|\\frac{24}{-5}\\right| = \\frac{24}{5}$.\n-   $(i,j)=(3,4)$: $i+j=7$ (odd). $|C_{34}| = \\left|\\frac{4(3)(4)}{3^2-4^2}\\right| = \\left|\\frac{48}{9-16}\\right| = \\left|\\frac{48}{-7}\\right| = \\frac{48}{7}$.\nAll other pairs $(i,j)$ with $i<j$ have $i+j$ even: $(1,3)$, $(2,4)$. Thus $C_{13}=C_{24}=0$.\nWe must find the maximum of $\\{\\frac{8}{3}, \\frac{16}{15}, \\frac{24}{5}, \\frac{48}{7}\\}$.\nConverting to decimals for comparison:\n$\\frac{8}{3} \\approx 2.667$\n$\\frac{16}{15} \\approx 1.067$\n$\\frac{24}{5} = 4.8$\n$\\frac{48}{7} \\approx 6.857$\nThe maximum value is $\\frac{48}{7}$.\n\nFinal Assembly of $\\rho_4$:\nSubstituting the maximum values into the expression for $\\rho_4$:\n$$\n\\rho_4 = \\frac{a \\left( \\frac{48}{7} \\right)}{\\nu (16\\pi^2)} = \\frac{a}{\\nu} \\frac{48}{7 \\cdot 16\\pi^2} = \\frac{a}{\\nu} \\frac{3 \\cdot 16}{7 \\cdot 16\\pi^2} = \\frac{3a}{7\\nu\\pi^2}\n$$", "answer": "$$\n\\boxed{\\frac{3a}{7\\nu\\pi^{2}}}\n$$", "id": "2432108"}, {"introduction": "This final practice provides a comprehensive, hands-on experience by guiding you through the full workflow of building and analyzing a reduced-order model for a two-dimensional heat transfer problem. Starting from the discretization of the heat equation on an L-shaped domain, you will generate simulation data, compute a POD basis, and construct a Galerkin-projected ROM [@problem_id:2432054]. This capstone exercise bridges theory and practice, demonstrating how these powerful techniques are applied to solve practical engineering problems with complex geometries and dynamics.", "problem": "Consider the two-dimensional heat equation on an L-shaped domain. Let the spatial domain be the open unit square with the upper-right quarter removed, namely\n$$\n\\Omega_L = (0,1)\\times(0,1)\\setminus([0.5,1]\\times[0.5,1]).\n$$\nLet $u(x,y,t)$ satisfy the homogeneous Dirichlet initial-boundary value problem\n$$\n\\frac{\\partial u}{\\partial t}(x,y,t) = \\kappa \\,\\Delta u(x,y,t)\\ \\text{for}\\ (x,y)\\in \\Omega_L,\\ t>0,\\quad\nu(x,y,t)=0\\ \\text{for}\\ (x,y)\\in \\partial \\Omega_L,\\ t\\ge 0,\\quad\nu(x,y,0)=u_0(x,y),\n$$\nwith diffusivity $\\kappa = 1$ and initial condition\n$$\nu_0(x,y)=\\exp\\!\\left(-\\frac{(x-0.5)^2+(y-0.5)^2}{\\sigma^2}\\right),\\quad \\sigma=0.12.\n$$\nDiscretize $\\Omega_L$ on a uniform Cartesian grid with $N=41$ points in each spatial direction, uniform spacing $h=1/(N-1)$, and consider the interior grid nodes with indices $i,j\\in\\{1,2,\\dots,N-2\\}$ as unknowns. A node $(x_i,y_j)$ is included in the computational set if and only if it belongs to $\\Omega_L$, i.e., if $\\neg(x_i\\ge 0.5 \\wedge y_j\\ge 0.5)$. Use the standard five-point discrete Laplacian with homogeneous Dirichlet conditions enforced by substituting zero for neighbors outside $\\Omega_L$ or on the outer boundary, which yields a symmetric negative semidefinite matrix operator $L\\in\\mathbb{R}^{n\\times n}$ with diagonal entries $-4/h^2$ and off-diagonal entries $1/h^2$ for each existing neighbor in the grid graph, where $n$ is the number of included nodes.\n\nAdvance the semi-discrete system in time using uniform time steps with backward Euler (also called implicit Euler). Let the time step be $\\Delta t=5\\times 10^{-4}$ and the number of time steps be $N_t=240$, so the final time is $T=N_t\\,\\Delta t=0.12$. Collect a sequence of state snapshots at every $s_{\\text{skip}}=6$ steps, producing $m=40$ snapshots that form the snapshot matrix $X\\in\\mathbb{R}^{n\\times m}$.\n\nFrom $X$, define the Proper Orthogonal Decomposition (POD) basis of rank $r$ as the first $r$ left singular vectors of $X$ under the standard Euclidean inner product on $\\mathbb{R}^n$ (which is equivalent to the discrete $L^2$ inner product up to the constant factor $h^2$ on this grid). Let $V_r\\in\\mathbb{R}^{n\\times r}$ denote the matrix of these orthonormal columns. Define the Reduced-Order Model (ROM) obtained by Galerkin projection of the semi-discrete operator onto the POD subspace, with reduced operator\n$$\nA_r = V_r^\\top L V_r\\in\\mathbb{R}^{r\\times r},\n$$\nand reduced state $a(t)\\in\\mathbb{R}^r$ evolving according to $a'(t)=A_r a(t)$ with initial condition $a(0)=V_r^\\top u_0$, advanced in time to $T$ by the same backward Euler scheme and time step used for the full model. Let $u(T)\\in\\mathbb{R}^n$ denote the fully discrete state at time $T$, and $u_r(T)=V_r a(T)$ the ROM reconstruction at time $T$.\n\nFor a given rank $r$, define:\n- The POD energy capture\n$$\nE_r=\\frac{\\sum_{i=1}^{r}\\sigma_i^2}{\\sum_{i=1}^{m}\\sigma_i^2},\n$$\nwhere $\\{\\sigma_i\\}$ are the singular values of $X$ in nonincreasing order.\n- The final-time relative state error\n$$\nR_r=\\frac{\\lVert u(T)-u_r(T)\\rVert_2}{\\lVert u(T)\\rVert_2}.\n$$\n- A corner concentration metric for the leading POD mode $v_1$ that quantifies energy near the re-entrant corner at $(0.5,0.5)$:\n$$\nC_r(\\rho)=\\frac{\\sum_{k: \\sqrt{(x_k-0.5)^2+(y_k-0.5)^2}\\le \\rho} \\left(v_1\\right)_k^2}{\\sum_{k=1}^{n} \\left(v_1\\right)_k^2},\n$$\nwhere $(x_k,y_k)$ are the physical coordinates of the grid node corresponding to the $k$-th degree of freedom. If $r=0$, define $C_0(\\rho)=0$ by convention. If $r$ exceeds the numerical rank of $X$, use all available modes.\n\nTest suite. Use the fixed discretization and time-integration parameters above, and evaluate the triple $(E_r,R_r,C_r(\\rho))$ for the following four cases:\n1. $r=0$, $\\rho=0.10$.\n2. $r=1$, $\\rho=0.08$.\n3. $r=5$, $\\rho=0.12$.\n4. $r=20$, $\\rho=0.15$.\n\nRequired final output format. Your program should produce a single line of output containing the $12$ floating-point results as a flat, comma-separated list enclosed in square brackets, ordered as\n$$\n[E_{r_1},R_{r_1},C_{r_1}(\\rho_1),E_{r_2},R_{r_2},C_{r_2}(\\rho_2),E_{r_3},R_{r_3},C_{r_3}(\\rho_3),E_{r_4},R_{r_4},C_{r_4}(\\rho_4)].\n$$\nEach floating-point value must be rounded to six decimal places. There are no physical units; all quantities are dimensionless. Angles are not used. Percentages must not be used; report $E_r$ and $R_r$ as decimals.", "solution": "The problem requires the construction and evaluation of a Reduced-Order Model (ROM) for the two-dimensional heat equation on a specific L-shaped domain. This will be accomplished through a series of well-defined steps: spatial and temporal discretization to create a Full-Order Model (FOM), simulation of the FOM to generate state data, application of Proper Orthogonal Decomposition (POD) to extract a low-dimensional basis, and finally, Galerkin projection to construct and solve the ROM. The accuracy and properties of the ROM will be quantified using a set of prescribed metrics.\n\nFirst, we address the Full-Order Model (FOM). The governing partial differential equation is the heat equation, $\\frac{\\partial u}{\\partial t} = \\kappa \\Delta u$, on the domain $\\Omega_L = (0,1)\\times(0,1)\\setminus([0.5,1]\\times[0.5,1])$ with diffusivity $\\kappa=1$ and homogeneous Dirichlet boundary conditions. The domain is discretized using a uniform Cartesian grid with $N=41$ points in each direction, resulting in a grid spacing of $h = 1/(N-1) = 1/40$. The degrees of freedom for our model are the values of the temperature $u$ at the interior grid nodes. The L-shape of the domain is realized by excluding all interior nodes $(x_i, y_j)$ for which both $x_i \\geq 0.5$ and $y_j \\geq 0.5$. This results in a total of $n=1121$ interior nodes. We establish a mapping from the two-dimensional grid indices $(i,j)$ of these $n$ nodes to a single one-dimensional index $k \\in \\{0, 1, \\dots, n-1\\}$, which allows us to represent the state of the system as a vector $\\mathbf{u}(t) \\in \\mathbb{R}^n$.\n\nThe spatial operator, the Laplacian $\\Delta$, is discretized using a standard five-point finite difference stencil. This results in a linear system of ordinary differential equations (ODEs), a semi-discretization known as the method of lines: $\\frac{d\\mathbf{u}}{dt} = L\\mathbf{u}(t)$. Here, $L \\in \\mathbb{R}^{n \\times n}$ is the matrix representation of the discrete Laplacian operator. For each node $k$, the corresponding diagonal entry is $L_{kk} = -4/h^2$. For each neighboring node $k'$ that is also within the computational domain, the off-diagonal entry is $L_{k'k} = L_{kk'} = 1/h^2$. Due to the homogeneous Dirichlet boundary conditions, neighbors on the boundary or outside the domain contribute nothing to the equations. The resulting matrix $L$ is symmetric and negative semidefinite, correctly reflecting the properties of the continuous operator.\n\nFor time integration, the backward Euler method is employed. Given a state $\\mathbf{u}_k$ at time $t_k$, the state $\\mathbf{u}_{k+1}$ at time $t_{k+1}=t_k+\\Delta t$ is found by solving the linear system $(\\mathbf{u}_{k+1} - \\mathbf{u}_k)/\\Delta t = L\\mathbf{u}_{k+1}$. Rearranging gives $(I - \\Delta t L)\\mathbf{u}_{k+1} = \\mathbf{u}_k$. The matrix $A_{BE} = I - \\Delta t L$ is sparse, symmetric, and positive-definite, and it remains constant throughout the simulation. We can pre-factorize it (e.g., using an LU or Cholesky decomposition) to efficiently solve for $\\mathbf{u}_{k+1}$ at each time step. The FOM is simulated from $t=0$ to the final time $T=0.12$ using the specified time step $\\Delta t = 5 \\times 10^{-4}$. The initial condition is a Gaussian pulse, $\\mathbf{u}(0) = \\mathbf{u}_0$, evaluated at the grid nodes. During the simulation, we collect snapshots of the state vector every $s_{\\text{skip}}=6$ steps, forming a snapshot matrix $X = [\\mathbf{u}^{(1)}, \\mathbf{u}^{(2)}, \\dots, \\mathbf{u}^{(m)}] \\in \\mathbb{R}^{n \\times m}$, where $m=40$.\n\nNext, we construct the ROM. The foundation of the ROM is the POD basis, which provides an optimal low-rank approximation for the snapshot data. This basis is obtained by computing the Singular Value Decomposition (SVD) of the snapshot matrix, $X = U \\Sigma W^\\top$. The columns of the matrix $U \\in \\mathbb{R}^{n \\times m}$ are the left singular vectors, also known as the POD modes. These modes are orthonormal and ordered by the amount of energy they capture from the snapshots, which is quantified by the corresponding singular values $\\sigma_i$ on the diagonal of $\\Sigma$. The POD basis of rank $r$, denoted $V_r \\in \\mathbb{R}^{n \\times r}$, is formed by taking the first $r$ columns of $U$.\n\nThe ROM is derived using Galerkin projection. We seek an approximate solution of the form $\\mathbf{u}(t) \\approx V_r \\mathbf{a}(t)$, where $\\mathbf{a}(t) \\in \\mathbb{R}^r$ is the vector of reduced coordinates. Substituting this ansatz into the semi-discrete FOM equation gives $V_r \\frac{d\\mathbf{a}}{dt} \\approx L V_r \\mathbf{a}(t)$. To solve for $\\mathbf{a}(t)$, we project this equation onto the subspace spanned by the basis vectors. Since the basis is orthonormal ($V_r^\\top V_r = I_r$), this yields the reduced system of ODEs: $\\frac{d\\mathbf{a}}{dt} = (V_r^\\top L V_r) \\mathbf{a}(t) = A_r \\mathbf{a}(t)$. The reduced operator $A_r \\in \\mathbb{R}^{r \\times r}$ is much smaller than $L$. The initial condition for the ROM is the projection of the full initial condition: $\\mathbf{a}(0) = V_r^\\top \\mathbf{u}_0$. This small $r \\times r$ system is then integrated in time using the same backward Euler scheme to find the reduced state $\\mathbf{a}(T)$ at the final time. The approximate full-state solution is then reconstructed as $\\mathbf{u}_r(T) = V_r \\mathbf{a}(T)$.\n\nFinally, we evaluate the specified metrics for each test case $(r, \\rho)$.\nThe POD energy capture, $E_r = (\\sum_{i=1}^{r} \\sigma_i^2) / (\\sum_{i=1}^{m} \\sigma_i^2)$, measures the fraction of the total variance in the snapshot data captured by the first $r$ modes. For $r=0$, $E_0=0$.\nThe final-time relative state error, $R_r = \\lVert \\mathbf{u}(T) - \\mathbf{u}_r(T) \\rVert_2 / \\lVert \\mathbf{u}(T) \\rVert_2$, quantifies the accuracy of the ROM solution. For $r=0$, the ROM basis is empty, so $\\mathbf{u}_0(T)=\\mathbf{0}$, leading to $R_0 = 1$.\nThe corner concentration metric, $C_r(\\rho) = (\\sum_{k: d_k \\le \\rho} (v_1)_k^2) / (\\sum_{k=1}^{n} (v_1)_k^2)$, where $d_k$ is the distance of node $k$ from the re-entrant corner $(0.5, 0.5)$ and $v_1$ is the leading POD mode. Since $v_1$ is a unit vector, the denominator is unity. By convention, $C_0(\\rho)=0$. For $r>0$, this metric quantifies how much of the \"energy\" of the most dominant dynamic mode is concentrated within a radius $\\rho$ of the domain's corner singularity.\n\nThe implementation will proceed by first setting up the grid and FOM operator $L$. Then, the FOM will be simulated to generate snapshots and the final state $\\mathbf{u}(T)$. SVD of the snapshot matrix will yield the POD modes $U$ and singular values $\\sigma$. For each test case, the corresponding metrics will be computed using these pre-computed quantities and, where necessary, by simulating the appropriate ROM.", "answer": "```python\nimport numpy as np\nfrom scipy import sparse\nfrom scipy.sparse.linalg import splu\nfrom scipy.linalg import lu_factor, lu_solve\n\ndef solve():\n    \"\"\"\n    Solves the problem of reduced-order modeling for the 2D heat equation\n    on an L-shaped domain.\n    \"\"\"\n    #\n    # === 1. Problem Parameters and Grid Setup ===\n    #\n    N = 41\n    h = 1.0 / (N - 1)\n    kappa = 1.0\n    sigma_ic = 0.12\n    dt = 5.0e-4\n    Nt = 240\n    T_final = Nt * dt\n    s_skip = 6\n    m = Nt // s_skip\n\n    # Define test cases\n    test_cases = [\n        {'r': 0, 'rho': 0.10},\n        {'r': 1, 'rho': 0.08},\n        {'r': 5, 'rho': 0.12},\n        {'r': 20, 'rho': 0.15},\n    ]\n\n    # Generate grid and identify interior nodes for the L-shaped domain\n    interior_nodes = []\n    node_map = {}\n    \n    # Grid coordinates including boundaries\n    x_coords = np.linspace(0, 1, N)\n    y_coords = np.linspace(0, 1, N)\n\n    # Interior indices are from 1 to N-2\n    for j in range(1, N - 1):\n        for i in range(1, N - 1):\n            x, y = i * h, j * h\n            if not (x >= 0.5 and y >= 0.5):\n                node_idx = len(interior_nodes)\n                interior_nodes.append({'glob_idx': (i, j), 'coords': (x, y)})\n                node_map[(i, j)] = node_idx\n    \n    n = len(interior_nodes) # Number of degrees of freedom\n\n    #\n    # === 2. Full-Order Model (FOM) Assembly ===\n    #\n    L = sparse.lil_matrix((n, n), dtype=np.float64)\n    h2_inv = 1.0 / (h * h)\n    \n    for k, node_info in enumerate(interior_nodes):\n        i, j = node_info['glob_idx']\n        L[k, k] = -4.0 * h2_inv\n        \n        neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n        for neighbor_glob_idx in neighbors:\n            if neighbor_glob_idx in node_map:\n                neighbor_k = node_map[neighbor_glob_idx]\n                L[k, neighbor_k] = 1.0 * h2_inv\n\n    # Convert to CSC format for efficient computations\n    L_csc = L.tocsc()\n\n    #\n    # === 3. FOM Time Integration and Snapshot Collection ===\n    #\n    u0 = np.zeros(n, dtype=np.float64)\n    for k, node_info in enumerate(interior_nodes):\n        x, y = node_info['coords']\n        u0[k] = np.exp(-((x - 0.5)**2 + (y - 0.5)**2) / sigma_ic**2)\n\n    A_BE = sparse.identity(n, format='csc') - dt * kappa * L_csc\n    solver = splu(A_BE)\n\n    snapshots = []\n    u_current = u0.copy()\n    \n    # Store initial state if t=0 snapshots are included (not the case here)\n    # The first snapshot is at t=dt*s_skip\n    \n    for step in range(1, Nt + 1):\n        u_current = solver.solve(u_current)\n        if step % s_skip == 0:\n            snapshots.append(u_current)\n\n    uT_fom = u_current\n    X = np.array(snapshots).T # Shape (n, m)\n\n    #\n    # === 4. POD Basis Computation ===\n    #\n    # full_matrices=False is important for efficiency\n    U, s, _ = np.linalg.svd(X, full_matrices=False)\n    \n    s_sq = s**2\n    total_energy = np.sum(s_sq)\n    \n    #\n    # === 5. ROM Simulation and Metrics Calculation ===\n    #\n    results = []\n\n    # Get coordinate array for C_r calculation\n    node_coordinates = np.array([node['coords'] for node in interior_nodes])\n    distances_from_corner = np.linalg.norm(node_coordinates - np.array([0.5, 0.5]), axis=1)\n    \n    # The leading POD mode v1 is the first column of U\n    v1 = U[:, 0]\n    # Denominator for C_r is norm(v1)^2 which is 1\n    v1_sq = v1**2\n\n    uT_fom_norm = np.linalg.norm(uT_fom)\n\n    for case in test_cases:\n        r, rho = case['r'], case['rho']\n\n        # --- Handle r=0 case ---\n        if r == 0:\n            E_r = 0.0\n            # For r=0, ROM solution u_r(T) is the zero vector.\n            # R_r = ||u(T) - 0|| / ||u(T)|| = 1\n            R_r = 1.0\n            # C_r is defined as 0 for r=0\n            C_r = 0.0\n            results.extend([E_r, R_r, C_r])\n            continue\n            \n        # --- Handle r > 0 cases ---\n        \n        # Metric E_r\n        E_r = np.sum(s_sq[:r]) / total_energy\n        \n        # Metric R_r: Needs ROM simulation\n        Vr = U[:, :r]\n        a0_rom = Vr.T @ u0\n        \n        # Build and simulate ROM\n        # Note: L @ Vr is a dense matrix multiplication\n        Ar = Vr.T @ (L_csc @ Vr)\n        Ar_BE = np.identity(r) - dt * kappa * Ar\n        \n        # Dense LU factorization for the small ROM system\n        lu_r, piv_r = lu_factor(Ar_BE)\n        \n        a_current_rom = a0_rom.copy()\n        for _ in range(Nt):\n            a_current_rom = lu_solve((lu_r, piv_r), a_current_rom)\n        \n        aT_rom = a_current_rom\n        uT_rom = Vr @ aT_rom\n        \n        R_r = np.linalg.norm(uT_fom - uT_rom) / uT_fom_norm\n\n        # Metric C_r\n        # This metric always uses the leading mode v1, irrespective of r > 0\n        indices_in_radius = np.where(distances_from_corner = rho)[0]\n        C_r = np.sum(v1_sq[indices_in_radius])\n        \n        results.extend([E_r, R_r, C_r])\n\n    #\n    # === 6. Final Output ===\n    #\n    formatted_results = [f\"{x:.6f}\" for x in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2432054"}]}