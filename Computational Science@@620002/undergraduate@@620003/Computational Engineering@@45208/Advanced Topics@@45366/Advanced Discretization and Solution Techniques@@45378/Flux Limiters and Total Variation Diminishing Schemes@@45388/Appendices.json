{"hands_on_practices": [{"introduction": "Before building good schemes, it's instructive to analyze why some seemingly reasonable schemes can fail. In this exercise, we will re-cast the classic second-order Beam-Warming method into the modern flux-limiter framework by deriving its corresponding limiter function $\\phi(r)$. By analyzing this function against the established Total Variation Diminishing (TVD) criteria [@problem_id:2394439], you will gain a concrete understanding of why this method can produce spurious oscillations and why the TVD conditions are so crucial for robust shock-capturing schemes.", "problem": "Consider the linear advection equation $u_{t} + a\\,u_{x} = 0$ with constant positive wave speed $a>0$ on a uniform grid with spacing $\\Delta x$ and a forward Euler time update of size $\\Delta t$. Denote the Courant number by $\\nu = a\\,\\Delta t/\\Delta x$, with $0<\\nu\\leq 1$. Work in a conservative finite volume framework,\n$$\nu_{i}^{n+1} \\;=\\; u_{i}^{n} \\;-\\; \\frac{\\Delta t}{\\Delta x}\\left(F_{i+1/2}^{n} - F_{i-1/2}^{n}\\right),\n$$\nand use the standard upwind numerical flux $F_{i+1/2}^{n}=a\\,u_{i+1/2}^{-,n}$ for $a>0$, where $u_{i+1/2}^{-,n}$ is a left-sided reconstruction of $u$ at the interface $x_{i+1/2}$. Let the smoothness indicator be\n$$\nr_{i}^{n} \\;=\\; \\frac{\\Delta_{i-1/2}^{n}}{\\Delta_{i+1/2}^{n}}, \n\\quad \\text{where} \\quad \\Delta_{j+1/2}^{n} \\;=\\; u_{j+1}^{n} - u_{j}^{n}.\n$$\nIn the high-resolution flux-limiter formulation for $a>0$, the fully discrete update can be written in the one-parameter form\n$$\nu_{i}^{n+1} \\;=\\; u_{i}^{n} \\;-\\; \\nu\\left(u_{i}^{n}-u_{i-1}^{n}\\right)\n\\;-\\; \\frac{1}{2}\\,\\nu\\left(1-\\nu\\right)\\left[\\,\\phi\\!\\left(r_{i}^{n}\\right)\\left(u_{i+1}^{n}-u_{i}^{n}\\right) \\;-\\; \\phi\\!\\left(r_{i-1}^{n}\\right)\\left(u_{i}^{n}-u_{i-1}^{n}\\right)\\right].\n$$\nThe classic Beam–Warming scheme is the second-order accurate upwind-biased method that, for $a>0$, uses the upwind one-sided slope in its reconstruction so that the anti-diffusive correction at each interface is proportional to the upwind gradient.\n\nTask:\n1) From first principles, determine the unique flux limiter function $\\phi(r)$ that makes the above flux-limiter update reduce to the classic Beam–Warming scheme for $a>0$.\n2) Using well-established Total Variation Diminishing (TVD) constraints (Sweby’s sufficient conditions) for explicit schemes with $0<\\nu\\leq 1$, namely that for $r\\ge 0$ one must have $0\\le \\phi(r)\\le \\min\\{2r,\\,2\\}$ and that $\\phi(r)\\ge 0$ whenever $r\\ge 0$ (and no anti-diffusion is permitted at non-monotone points, typically necessitating $\\phi(r)=0$ for $r\\le 0$), explain concisely why the identified $\\phi(r)$ does not define a TVD scheme.\n\nYour final answer must be the single closed-form expression for $\\phi(r)$. No numerical rounding is required.", "solution": "The problem requires, first, the derivation of the flux limiter function $\\phi(r)$ that corresponds to the classic Beam-Warming scheme, and second, an explanation for why this function does not result in a Total Variation Diminishing (TVD) scheme.\n\n**Part 1: Derivation of the Flux Limiter Function $\\phi(r)$**\n\nThe analysis starts from the conservative finite volume update for the linear advection equation $u_t + a u_x = 0$ with $a>0$:\n$$\nu_{i}^{n+1} = u_{i}^{n} - \\frac{\\Delta t}{\\Delta x}\\left(F_{i+1/2}^{n} - F_{i-1/2}^{n}\\right)\n$$\nThe problem gives the general high-resolution flux-limiter update in the one-parameter form:\n$$\nu_{i}^{n+1} = u_{i}^{n} - \\nu\\left(u_{i}^{n}-u_{i-1}^{n}\\right) - \\frac{1}{2}\\nu\\left(1-\\nu\\right)\\left[\\phi(r_{i}^{n})\\left(u_{i+1}^{n}-u_{i}^{n}\\right) - \\phi(r_{i-1}^{n})\\left(u_{i}^{n}-u_{i-1}^{n}\\right)\\right]\n$$\nwhere $\\nu = a \\Delta t / \\Delta x$ is the Courant number. This update form is generated by a numerical flux $F_{i+1/2}$ that combines a low-order (first-order upwind) flux and a limited high-order correction term. The corresponding numerical flux is:\n$$\nF_{i+1/2}^n = \\underbrace{a u_i^n}_{\\text{1st-order upwind flux}} + \\underbrace{\\frac{1}{2}a(1-\\nu)\\phi(r_i^n)(u_{i+1}^n - u_i^n)}_{\\text{anti-diffusive correction flux}}\n$$\nThe Beam-Warming scheme is a second-order accurate upwind-biased method. For $a>0$, its reconstruction is based on an upwind-biased stencil. The scheme can be understood as a modification of the second-order Lax-Wendroff scheme. The flux for the Lax-Wendroff scheme is:\n$$\nF_{i+1/2}^{\\text{LW}} = a u_i^n + \\frac{1}{2}a(1-\\nu)(u_{i+1}^n - u_i^n)\n$$\nThe anti-diffusive correction term, $\\frac{1}{2}a(1-\\nu)(u_{i+1}^n - u_i^n)$, depends on the downwind difference $(u_{i+1}^n - u_i^n)$ for $a>0$.\n\nThe problem states that the Beam-Warming scheme \"uses the upwind one-sided slope in its reconstruction\". This implies that the anti-diffusive correction term must be proportional to the upwind difference, which for $a>0$ is $(u_{i}^n - u_{i-1}^n)$. Thus, we replace the downwind difference in the Lax-Wendroff correction with the upwind difference to obtain the Beam-Warming flux:\n$$\nF_{i+1/2}^{\\text{BW}} = a u_i^n + \\frac{1}{2}a(1-\\nu)(u_i^n - u_{i-1}^n)\n$$\nTo find the flux limiter function $\\phi(r)$ for the Beam-Warming scheme, we equate the general flux-limiter expression for $F_{i+1/2}^n$ with $F_{i+1/2}^{\\text{BW}}$:\n$$\na u_i^n + \\frac{1}{2}a(1-\\nu)\\phi(r_i^n)(u_{i+1}^n - u_i^n) = a u_i^n + \\frac{1}{2}a(1-\\nu)(u_i^n - u_{i-1}^n)\n$$\nAssuming $a(1-\\nu) \\neq 0$ and $u_{i+1}^n - u_i^n \\neq 0$, we can cancel terms and isolate $\\phi(r_i^n)$:\n$$\n\\phi(r_i^n)(u_{i+1}^n - u_i^n) = (u_i^n - u_{i-1}^n)\n$$\n$$\n\\phi(r_i^n) = \\frac{u_i^n - u_{i-1}^n}{u_{i+1}^n - u_i^n}\n$$\nThe problem defines the smoothness indicator $r_i^n$ as the ratio of consecutive gradients:\n$$\nr_{i}^{n} = \\frac{\\Delta_{i-1/2}^{n}}{\\Delta_{i+1/2}^{n}} = \\frac{u_{i}^{n} - u_{i-1}^{n}}{u_{i+1}^{n} - u_{i}^{n}}\n$$\nComparing our result for $\\phi(r_i^n)$ with the definition of $r_i^n$, we find that the flux limiter function is simply the identity function:\n$$\n\\phi(r) = r\n$$\n\n**Part 2: TVD Analysis**\n\nA numerical scheme is TVD if its total variation does not increase over time. For explicit schemes of the form given, sufficient conditions for the scheme to be TVD (known as Sweby's conditions) are provided for the flux limiter $\\phi(r)$ when $0 < \\nu \\le 1$:\n1.  For non-monotone data ($r \\le 0$), no anti-diffusion is permitted: $\\phi(r) = 0$.\n2.  For monotone data ($r > 0$), the limiter must lie within a specific region: $0 \\le \\phi(r) \\le \\min\\{2r, 2\\}$.\n\nWe now test the Beam-Warming limiter, $\\phi(r) = r$, against these two conditions.\n\n- **Condition 1 ($r \\le 0$):** The TVD condition is $\\phi(r) = 0$. The limiter for Beam-Warming is $\\phi(r) = r$. For any $r < 0$, $\\phi(r) = r \\neq 0$. Thus, the scheme violates this condition. This violation means the scheme adds anti-diffusion at local extrema, which is a known source of spurious oscillations near discontinuities.\n\n- **Condition 2 ($r > 0$):** This condition breaks into two parts:\n    -   $0 \\le \\phi(r) \\le 2r$: For $\\phi(r)=r$, this becomes $0 \\le r \\le 2r$. This is true for all $r > 0$.\n    -   $0 \\le \\phi(r) \\le 2$: For $\\phi(r)=r$, this becomes $0 \\le r \\le 2$. This inequality is only satisfied when $r$ is in the interval $(0, 2]$. For any $r > 2$, we have $\\phi(r) = r > 2$, which violates the condition.\n\nSince the flux limiter $\\phi(r) = r$ for the Beam-Warming scheme fails to satisfy the sufficient TVD conditions for all $r < 0$ and for all $r > 2$, the scheme is not TVD. Graphically, in the Sweby diagram (a plot of $\\phi$ versus $r$), the line $\\phi = r$ exits the polygonal TVD region, confirming its non-TVD nature and explaining its propensity to produce oscillations.", "answer": "$$\n\\boxed{\\phi(r) = r}\n$$", "id": "2394439"}, {"introduction": "Having established the theoretical importance of the TVD conditions, we now turn to their practical application. This comprehensive coding exercise challenges you to implement a finite volume solver to observe how different popular flux limiters perform on a classic benchmark: the advection of a square wave [@problem_id:2448960]. By quantitatively measuring error and non-physical oscillations, you will gain first-hand experience with the characteristic trade-offs between the sharp, compressive nature of limiters like Superbee and the more dissipative but robust behavior of limiters like Minmod.", "problem": "Consider the one-dimensional linear advection equation\n$$\n\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0\n$$\non the periodic spatial domain $[0,1)$ with constant positive velocity $a>0$. All quantities are dimensionless. The initial condition is a unit-amplitude square wave\n$$\nu(x,0) = \\begin{cases}\n1, & x \\in [0.25,\\,0.5),\\\\\n0, & \\text{otherwise,}\n\\end{cases}\n$$\nwith periodic boundary conditions.\n\nUse a uniform grid of $N$ control volumes with mesh width $\\Delta x = 1/N$, and denote by $u_i^n$ the cell average in cell $i \\in \\{0,1,\\dots,N-1\\}$ at time level $t^n$. Let the non-dimensional Courant number be\n$$\n\\lambda \\equiv \\frac{a\\,\\Delta t}{\\Delta x}.\n$$\nEvolve the cell averages with the conservative explicit update\n$$\nu_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x}\\left(F_{i+\\frac{1}{2}}^n - F_{i-\\frac{1}{2}}^n\\right),\n$$\nwhere, for $a>0$, the numerical flux at the interface $x_{i+\\frac{1}{2}}$ is defined by the flux-limited high-resolution upwind form\n$$\nF_{i+\\frac{1}{2}}^n = a\\,u_i^n + \\frac{a}{2}\\left(1-\\lambda\\right)\\,\\phi(r_i^n)\\,\\left(u_{i+1}^n - u_i^n\\right),\n$$\nwith periodic indexing modulo $N$. The smoothness indicator $r_i^n$ is given by\n$$\nr_i^n = \\frac{u_i^n - u_{i-1}^n}{u_{i+1}^n - u_i^n + \\varepsilon},\n$$\nwhere $\\varepsilon$ is a small positive number to avoid division by zero, and $\\phi(\\cdot)$ is a flux limiter chosen from the following set:\n- Minmod limiter:\n$$\n\\phi_{\\text{minmod}}(r) = \\max\\left(0, \\min(1, r)\\right).\n$$\n- Superbee limiter:\n$$\n\\phi_{\\text{superbee}}(r) = \\max\\left(0, \\min(2r,1), \\min(r,2)\\right).\n$$\n- Van Leer limiter:\n$$\n\\phi_{\\text{van\\,Leer}}(r) = \\frac{r + |r|}{1 + |r|}.\n$$\n\nInitialize $u_i^0$ as the exact cell averages of the square wave over each control volume. Evolve the solution to the final time $T=1$ (one full advection period for $a=1$ on $[0,1)$), using a time step $\\Delta t$ such that $\\lambda \\le \\text{CFL}$, where the number of time steps is chosen to exactly reach $T$.\n\nFor each simulation, compute the following three quantitative diagnostics at $t=T$:\n- The discrete $L^1$ error against the exact solution $u(x,T) = u(x,0)$:\n$$\nE_1 = \\sum_{i=0}^{N-1} \\left|u_i^N - u_i^0\\right|\\,\\Delta x.\n$$\n- The maximum overshoot above the nominal maximum value $1$:\n$$\nO = \\max\\left(0, \\max_{i} u_i^N - 1\\right).\n$$\n- The minimum undershoot below the nominal minimum value $0$:\n$$\nU = \\min\\left(0, \\min_{i} u_i^N\\right).\n$$\n\nAdopt the following fixed parameters for all tests: $a=1$, $T=1$, and $\\varepsilon = 10^{-12}$. All quantities are dimensionless. Use periodic boundary conditions for all indexing operations.\n\nTest Suite:\nCompute $(E_1, O, U)$ for each of the following parameter sets $(N,\\ \\text{CFL},\\ \\text{limiter})$:\n1. $(200,\\ 0.5,\\ \\text{minmod})$\n2. $(200,\\ 0.5,\\ \\text{superbee})$\n3. $(200,\\ 0.5,\\ \\text{van\\,Leer})$\n4. $(200,\\ 0.95,\\ \\text{superbee})$\n5. $(40,\\ 0.5,\\ \\text{van\\,Leer})$\n\nFinal Output Format:\nYour program should produce a single line of output containing the results as a comma-separated list of floats enclosed in square brackets. Aggregate the nine values by flattening the triplets case-by-case in the exact order of the test suite, i.e.,\n$$\n[E_1^{(1)},\\,O^{(1)},\\,U^{(1)},\\,E_1^{(2)},\\,O^{(2)},\\,U^{(2)},\\,E_1^{(3)},\\,O^{(3)},\\,U^{(3)},\\,E_1^{(4)},\\,O^{(4)},\\,U^{(4)},\\,E_1^{(5)},\\,O^{(5)},\\,U^{(5)}].\n$$\nEach float must be rounded to exactly $6$ decimal places in the printed output. No additional text should be printed.", "solution": "The problem statement has been subjected to rigorous validation and is found to be scientifically sound, complete, and well-posed. It constitutes a standard benchmark problem in the field of computational methods for hyperbolic conservation laws. We will proceed to construct the solution.\n\nThe problem requires the numerical solution of the one-dimensional linear advection equation,\n$$\n\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0,\n$$\nfor a scalar quantity $u(x,t)$ with a constant positive advection speed $a > 0$ on a periodic domain $x \\in [0,1)$. This equation is the archetypal hyperbolic conservation law. Its exact solution is a simple translation of the initial profile, $u(x,t) = u_0(x-at)$. For the given parameters $a=1$ and final time $T=1$, the exact solution on the periodic domain $[0,1)$ is identical to the initial condition, $u(x,T) = u(x-1,0) = u(x,0)$.\n\nThe numerical solution will be obtained using a finite volume method. The domain is discretized into $N$ uniform control volumes, or cells, each of width $\\Delta x = 1/N$. The $i$-th cell, for $i \\in \\{0, 1, \\dots, N-1\\}$, occupies the spatial interval $[x_{i-1/2}, x_{i+1/2}]$, where $x_{i-1/2} = i\\Delta x$. The numerical solution is represented by the cell averages,\n$$\nu_i^n \\approx \\frac{1}{\\Delta x} \\int_{x_{i-1/2}}^{x_{i+1/2}} u(x, t^n) \\, dx.\n$$\nThe initial condition $u_i^0$ is calculated by exactly evaluating this integral for the given square wave profile $u(x,0)$. For a cell $i$, the initial average value is the fraction of the cell's volume occupied by the wave, which is given by\n$$\nu_i^0 = \\frac{1}{\\Delta x} \\int_{i\\Delta x}^{(i+1)\\Delta x} u(x,0) \\, dx = \\frac{\\text{length}([i\\Delta x, (i+1)\\Delta x] \\cap [0.25, 0.5))}{\\Delta x}.\n$$\nThis is computed as $u_i^0 = \\max(0, \\min((i+1)\\Delta x, 0.5) - \\max(i\\Delta x, 0.25)) / \\Delta x$. This initialization ensures that the discrete total mass, $\\sum_i u_i^0 \\Delta x$, is consistent with the continuous initial condition.\n\nThe time evolution is governed by the explicit conservative formula:\n$$\nu_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x} \\left( F_{i+\\frac{1}{2}}^n - F_{i-\\frac{1}{2}}^n \\right).\n$$\nThis form guarantees that the change in the average value in cell $i$ is solely due to the net flux across its boundaries at $x_{i-1/2}$ and $x_{i+1/2}$, thus ensuring discrete conservation. The time step $\\Delta t$ is determined such that the final time $T$ is reached in an integer number of steps, $N_t$. Given a Courant-Friedrichs-Lewy (CFL) number, the maximum allowable time step is $\\Delta t_{\\max} = \\text{CFL} \\cdot \\Delta x / a$. We choose the number of time steps as $N_t = \\lceil T/\\Delta t_{\\max} \\rceil$, and the actual time step is then $\\Delta t = T/N_t$. The resulting Courant number $\\lambda = a \\Delta t / \\Delta x$ is guaranteed to be less than or equal to the specified $\\text{CFL}$ value, which is a necessary condition for the stability of explicit schemes.\n\nThe core of the method lies in the definition of the numerical flux, $F_{i+1/2}^n$. The specified flux is a high-resolution, flux-limited scheme. For $a>0$, the flux at the interface $x_{i+1/2}$ between cells $i$ and $i+1$ is given by\n$$\nF_{i+\\frac{1}{2}}^n = a\\,u_i^n + \\frac{a}{2}\\left(1-\\lambda\\right)\\,\\phi(r_i^n)\\,\\left(u_{i+1}^n - u_i^n\\right).\n$$\nThe first term, $a\\,u_i^n$, is the first-order upwind flux. This flux alone would yield a stable but very dissipative scheme that smears sharp features. The second term is a limited anti-diffusive correction. It is constructed to counteract the excessive numerical diffusion of the first-order scheme while preventing the introduction of spurious oscillations, a common problem with higher-order linear schemes (e.g., Lax-Wendroff) near discontinuities.\n\nThe correction term is modulated by a flux limiter function, $\\phi(r)$, which depends on the smoothness indicator,\n$$\nr_i^n = \\frac{u_i^n - u_{i-1}^n}{u_{i+1}^n - u_i^n + \\varepsilon}.\n$$\nThe ratio $r_i^n$ compares the gradient in the upwind cell $(u_i^n - u_{i-1}^n)$ to the gradient in the downwind cell $(u_{i+1}^n - u_i^n)$. In smooth regions of the solution, $r \\approx 1$, and the limiter $\\phi(r)$ should be chosen such that the scheme approaches a higher order of accuracy. Near discontinuities or extrema, $r$ can vary significantly, and the limiter must reduce the magnitude of the correction term, i.e., $\\phi \\to 0$, forcing the scheme to revert to the robust first-order upwind method. This adaptive behavior is key to achieving high resolution without oscillations, a property known as being Total Variation Diminishing (TVD). The parameter $\\varepsilon=10^{-12}$ is a small number to prevent division by zero when the gradient $u_{i+1}^n - u_i^n$ is zero.\n\nThe problem specifies three different flux limiters:\n1.  **Minmod**: $\\phi_{\\text{minmod}}(r) = \\max(0, \\min(1, r))$. This is the most dissipative of the TVD limiters, providing strong enforcement of monotonicity (no new extrema) at the cost of smearing profiles more than other limiters.\n2.  **Superbee**: $\\phi_{\\text{superbee}}(r) = \\max(0, \\min(2r,1), \\min(r,2))$. This is a more compressive limiter, designed to maintain sharp resolution of contact discontinuities. It is less dissipative than Minmod but can slightly steepen smooth profiles.\n3.  **Van Leer**: $\\phi_{\\text{van\\,Leer}}(r) = \\frac{r + |r|}{1 + |r|}$. This limiter provides a good balance between controlling oscillations and maintaining accuracy, and is differentiable, which can be advantageous in some contexts.\n\nThe simulation proceeds by iteratively applying the update formula for $N_t$ steps. Periodic boundary conditions are enforced by using modular arithmetic for all spatial indices, e.g., $u_{N} \\equiv u_0$ and $u_{-1} \\equiv u_{N-1}$. After reaching the final time $T$, the numerical solution $u_i^{N_t}$ is compared to the initial (and exact final) solution $u_i^0$ to compute the $L^1$ error $E_1$, the maximum overshoot $O$, and the minimum undershoot $U$. These diagnostics quantify the accuracy and monotonicity-preserving properties of the scheme for each parameter set.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D linear advection equation using a high-resolution flux-limited scheme\n    for a set of test cases and prints the diagnostic results.\n    \"\"\"\n\n    # --- Flux Limiter Functions ---\n    def limiter_minmod(r):\n        return np.maximum(0, np.minimum(1, r))\n\n    def limiter_superbee(r):\n        term1 = np.minimum(2 * r, 1)\n        term2 = np.minimum(r, 2)\n        return np.maximum(0, np.maximum(term1, term2))\n\n    def limiter_vanleer(r):\n        # Note: abs(r) is used, equivalent to |r|\n        return (r + np.abs(r)) / (1 + np.abs(r))\n\n    limiter_map = {\n        'minmod': limiter_minmod,\n        'superbee': limiter_superbee,\n        'van_Leer': limiter_vanleer\n    }\n\n    # --- Problem Parameters ---\n    a = 1.0\n    T = 1.0\n    epsilon = 1e-12\n\n    test_cases = [\n        (200, 0.5, 'minmod'),\n        (200, 0.5, 'superbee'),\n        (200, 0.5, 'van_Leer'),\n        (200, 0.95, 'superbee'),\n        (40, 0.5, 'van_Leer'),\n    ]\n\n    all_results = []\n\n    for N, CFL, limiter_name in test_cases:\n        # --- Discretization ---\n        dx = 1.0 / N\n        x_faces = np.linspace(0.0, 1.0, N + 1)\n        \n        # --- Initial Condition (Cell Averages) ---\n        # u(x,0) is 1 on [0.25, 0.5), 0 otherwise\n        overlap = np.maximum(0, np.minimum(x_faces[1:], 0.5) - np.maximum(x_faces[:-1], 0.25))\n        u0 = overlap / dx\n        \n        # --- Time Stepping ---\n        dt_max = CFL * dx / a\n        num_steps = int(np.ceil(T / dt_max))\n        dt = T / num_steps\n        lambda_val = a * dt / dx\n\n        # --- Select Limiter ---\n        selected_limiter = limiter_map[limiter_name]\n        \n        # --- Time Evolution Loop ---\n        u_current = u0.copy()\n        \n        for _ in range(num_steps):\n            # Enforce periodic boundary conditions using np.roll\n            u_im1 = np.roll(u_current, 1)  # u_{i-1}\n            u_ip1 = np.roll(u_current, -1) # u_{i+1}\n            \n            # Gradients\n            du_forward = u_ip1 - u_current  # u_{i+1} - u_i\n            du_backward = u_current - u_im1 # u_i - u_{i-1}\n            \n            # Smoothness indicator r\n            # Suppress division by zero warnings, handled by epsilon\n            with np.errstate(divide='ignore', invalid='ignore'):\n                r = du_backward / (du_forward + epsilon)\n                r[np.isnan(r)] = 0  # Handle potential 0/0 -> NaN cases\n\n            # Limiter values\n            phi = selected_limiter(r)\n            \n            # Numerical flux F_{i+1/2}\n            # F[i] corresponds to F_{i+1/2}\n            flux = a * u_current + (a / 2.0) * (1.0 - lambda_val) * phi * du_forward\n            \n            # Flux difference across cell i: F_{i+1/2} - F_{i-1/2}\n            flux_diff = flux - np.roll(flux, 1)\n            \n            # Update solution\n            u_current -= (dt / dx) * flux_diff\n\n        u_final = u_current\n\n        # --- Diagnostics ---\n        # L1 error\n        e1 = np.sum(np.abs(u_final - u0)) * dx\n        \n        # Overshoot\n        overshoot = np.maximum(0, np.max(u_final) - 1.0)\n        \n        # Undershoot\n        # np.min(u_final) could be positive, so we need min(0, ...)\n        undershoot = np.minimum(0, np.min(u_final))\n        \n        # Append results for this case\n        all_results.extend([e1, overshoot, undershoot])\n\n    # --- Final Output Formatting ---\n    formatted_results = [f\"{val:.6f}\" for val in all_results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2448960"}, {"introduction": "The global performance of a TVD scheme is the direct result of how its flux limiter behaves locally at each cell interface from one moment to the next. This practice zooms in on that microscopic level, asking you to analyze the response of several limiters to specific, critical data configurations representing local extrema ($r=0$), sharp fronts ($r \\to \\infty$), and flat regions ($r$ is undefined) [@problem_id:2394421]. Mastering these edge cases is essential for building a deep, intuitive understanding of how limiters work and for developing robust code that handles any eventuality.", "problem": "Consider the one-dimensional linear advection equation with constant positive wave speed $a>0$ discretized on a uniform grid with cell-averaged values $\\{u_i\\}$. A high-resolution Total Variation Diminishing (TVD) method uses a flux-limiter function $\\phi(r)$ that depends on the ratio of consecutive gradients\n$$\nr \\equiv \\frac{u_i - u_{i-1}}{u_{i+1} - u_i},\n$$\nevaluated at the interface between cells $i$ and $i+1$. When the denominator in $r$ is zero and the numerator is positive, take $r=+\\infty$. When both numerator and denominator are zero, $r$ is undefined.\n\nFour classical limiter functions are defined (for all real $r$) as:\n- Minmod: $\\displaystyle \\phi_{\\mathrm{MM}}(r) = \\max\\!\\big(0,\\;\\min(1,\\,r)\\big)$.\n- Superbee: $\\displaystyle \\phi_{\\mathrm{SB}}(r) = \\max\\!\\big(0,\\;\\min(2r,\\,1),\\;\\min(r,\\,2)\\big)$.\n- Van Leer: $\\displaystyle \\phi_{\\mathrm{VL}}(r) = \\frac{r + |r|}{1 + |r|}$.\n- Van Albada: $\\displaystyle \\phi_{\\mathrm{VA}}(r) = \\max\\!\\Big(0,\\;\\frac{r^2 + r}{1 + r^2}\\Big)$.\n\nAnalyze the following three local data configurations around a fixed index $i$ for $a>0$:\n\n- Configuration I: $(u_{i-1},u_i,u_{i+1})=(0,\\,1,\\,1)$.\n- Configuration II: $(u_{i-1},u_i,u_{i+1})=(0,\\,0,\\,1)$.\n- Configuration III: $(u_{i-1},u_i,u_{i+1})=(c,\\,c,\\,c)$ for any constant $c\\in\\mathbb{R}$.\n\nAssume flux evaluation uses the above $\\phi(r)$ as given, and in any implementation $r=+\\infty$ is interpreted as the limit $r\\to+\\infty$ of $\\phi(r)$.\n\nWhich of the following statements are correct?\n\nA. In Configuration I, one has $r=+\\infty$, and the Superbee and Van Leer limiters both give $\\phi=2$, while the Minmod and Van Albada limiters both give $\\phi=1$.\n\nB. In Configuration II, one has $r=0$, and all four limiters give $\\phi=0$.\n\nC. In Configuration III, $r$ is undefined ($0/0$). A robust implementation should detect this and set $\\phi=0$ to preserve the constant solution and avoid division by zero.\n\nD. In Configuration I, the Van Albada limiter yields $\\phi=2$ because $\\lim_{r\\to+\\infty}\\phi_{\\mathrm{VA}}(r)=2$.\n\nE. In Configuration II, the Minmod limiter yields $\\phi=1$ because $\\min(1,r)=1$ at $r=0$.", "solution": "The problem statement is subjected to validation.\n\n### Step 1: Extract Givens\n- **Equation**: One-dimensional linear advection equation, $u_t + a u_x = 0$, with constant wave speed $a>0$.\n- **Discretization**: Cell-averaged values $\\{u_i\\}$ on a uniform grid.\n- **Methodology**: High-resolution Total Variation Diminishing (TVD) scheme using a flux-limiter function $\\phi(r)$.\n- **Gradient Ratio**: The ratio $r$ is defined at the interface between cells $i$ and $i+1$ as $r \\equiv \\frac{u_i - u_{i-1}}{u_{i+1} - u_i}$.\n- **Special Cases for r**:\n    - If $u_{i+1} - u_i = 0$ and $u_i - u_{i-1} > 0$, then $r=+\\infty$.\n    - If $u_{i+1} - u_i = 0$ and $u_i - u_{i-1} = 0$, then $r$ is undefined.\n- **Limiter Functions**:\n    - Minmod: $\\phi_{\\mathrm{MM}}(r) = \\max\\!\\big(0,\\;\\min(1,\\,r)\\big)$\n    - Superbee: $\\phi_{\\mathrm{SB}}(r) = \\max\\!\\big(0,\\;\\min(2r,\\,1),\\;\\min(r,\\,2)\\big)$\n    - Van Leer: $\\phi_{\\mathrm{VL}}(r) = \\frac{r + |r|}{1 + |r|}$\n    - Van Albada: $\\phi_{\\mathrm{VA}}(r) = \\max\\!\\Big(0,\\;\\frac{r^2 + r}{1 + r^2}\\Big)$\n- **Data Configurations**:\n    - Configuration I: $(u_{i-1},u_i,u_{i+1})=(0,\\,1,\\,1)$\n    - Configuration II: $(u_{i-1},u_i,u_{i+1})=(0,\\,0,\\,1)$\n    - Configuration III: $(u_{i-1},u_i,u_{i+1})=(c,\\,c,\\,c)$ for any $c\\in\\mathbb{R}$\n- **Implementation Assumption**: The case $r=+\\infty$ is handled by taking the limit of $\\phi(r)$ as $r\\to+\\infty$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, well-posed, and objective. It concerns standard, well-established concepts and techniques in the field of computational engineering and numerical solutions to partial differential equations. The definitions of the flux limiters are standard. The local data configurations are simple, valid test cases. All necessary information is provided, and there are no contradictions. The problem asks for the direct application and evaluation of clearly defined mathematical functions and principles.\n\n### Step 3: Verdict and Action\nThe problem statement is valid. A full solution will be derived.\n\n### Analysis of Configurations\n\nFirst, we analyze each data configuration to determine the value of the gradient ratio $r$ and the corresponding values of the limiter functions.\n\n**Configuration I: $(u_{i-1},u_i,u_{i+1})=(0,\\,1,\\,1)$**\nThe differences are $u_i - u_{i-1} = 1 - 0 = 1$ and $u_{i+1} - u_i = 1 - 1 = 0$.\nThe numerator is positive ($1$), and the denominator is zero. According to the problem statement, this corresponds to $r = +\\infty$. We must evaluate the limit of each limiter function as $r \\to +\\infty$.\n\n- **Minmod**: $\\lim_{r\\to+\\infty} \\phi_{\\mathrm{MM}}(r) = \\lim_{r\\to+\\infty} \\max(0, \\min(1, r))$. As $r \\to +\\infty$, $\\min(1,r) \\to 1$. Thus, the limit is $\\max(0,1) = 1$.\n- **Superbee**: $\\lim_{r\\to+\\infty} \\phi_{\\mathrm{SB}}(r) = \\lim_{r\\to+\\infty} \\max(0, \\min(2r, 1), \\min(r, 2))$. As $r \\to \\infty$, $\\min(2r, 1) \\to 1$ and $\\min(r, 2) \\to 2$. The limit is $\\max(0, 1, 2) = 2$.\n- **Van Leer**: $\\lim_{r\\to+\\infty} \\phi_{\\mathrm{VL}}(r) = \\lim_{r\\to+\\infty} \\frac{r + |r|}{1 + |r|}$. For large positive $r$, $|r|=r$, so $\\phi_{\\mathrm{VL}}(r) = \\frac{r+r}{1+r} = \\frac{2r}{1+r}$. The limit is $\\lim_{r\\to+\\infty} \\frac{2r}{1+r} = \\lim_{r\\to+\\infty} \\frac{2}{1/r+1} = 2$.\n- **Van Albada**: $\\lim_{r\\to+\\infty} \\phi_{\\mathrm{VA}}(r) = \\lim_{r\\to+\\infty} \\max\\Big(0, \\frac{r^2 + r}{1 + r^2}\\Big)$. The limit of the rational function is determined by the ratio of leading coefficients: $\\lim_{r\\to+\\infty} \\frac{r^2+r}{1+r^2} = 1$. Thus, the limit is $\\max(0,1) = 1$.\n\nSummary for Configuration I: $\\phi_{\\mathrm{MM}} = 1$, $\\phi_{\\mathrm{SB}} = 2$, $\\phi_{\\mathrm{VL}} = 2$, $\\phi_{\\mathrm{VA}} = 1$.\n\n**Configuration II: $(u_{i-1},u_i,u_{i+1})=(0,\\,0,\\,1)$**\nThe differences are $u_i - u_{i-1} = 0 - 0 = 0$ and $u_{i+1} - u_i = 1 - 0 = 1$.\nThe gradient ratio is $r = \\frac{0}{1} = 0$. We evaluate each limiter at $r=0$.\n\n- **Minmod**: $\\phi_{\\mathrm{MM}}(0) = \\max(0, \\min(1, 0)) = \\max(0, 0) = 0$.\n- **Superbee**: $\\phi_{\\mathrm{SB}}(0) = \\max(0, \\min(2 \\cdot 0, 1), \\min(0, 2)) = \\max(0, \\min(0,1), \\min(0,2)) = \\max(0, 0, 0) = 0$.\n- **Van Leer**: $\\phi_{\\mathrm{VL}}(0) = \\frac{0 + |0|}{1 + |0|} = \\frac{0}{1} = 0$.\n- **Van Albada**: $\\phi_{\\mathrm{VA}}(0) = \\max\\Big(0, \\frac{0^2 + 0}{1 + 0^2}\\Big) = \\max(0, 0) = 0$.\n\nSummary for Configuration II: All four limiters yield $\\phi=0$.\n\n**Configuration III: $(u_{i-1},u_i,u_{i+1})=(c,\\,c,\\,c)$**\nThe differences are $u_i - u_{i-1} = c - c = 0$ and $u_{i+1} - u_i = c - c = 0$.\nThe gradient ratio is $r = \\frac{0}{0}$, which is undefined as stated in the problem. In any numerical implementation, this case must be handled explicitly to avoid a floating-point exception (division by zero).\nA fundamental consistency condition for any sensible numerical scheme for conservation laws is that it must exactly preserve a constant state (this is sometimes called zero-th order accuracy). For a finite volume scheme $u_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x}(F_{i+1/2} - F_{i-1/2})$, this requires the numerical flux difference to be zero, i.e., $F_{i+1/2} = F_{i-1/2}$, when the solution is constant. A high-resolution flux is of the form $F_{i+1/2} = F_{i+1/2}^{\\text{low}} + \\psi_{i+1/2}$, where the correction term $\\psi_{i+1/2}$ is proportional to $u_{i+1}-u_i$. For instance, a common form is $\\psi = \\phi(r) \\cdot (\\text{something}) \\cdot (u_{i+1}-u_i)$. In a constant state, $u_{i+1}-u_i=0$, so the correction term is zero *regardless of the value of $\\phi(r)$*, provided $\\phi(r)$ is finite.\nThe statement in option C proposes that a robust implementation should detect the $0/0$ case and set $\\phi=0$. This is a sound engineering practice. The primary reason is to prevent a fatal runtime error from the division. The choice of the value to assign to $\\phi$ is secondary for preserving the constant state, but setting $\\phi=0$ is a simple and effective choice. It corresponds to locally reverting to the first-order scheme, which is exact for a constant state. Another common practice is to set $r=1$ (since a constant state is the smoothest possible state), which would yield $\\phi=1$. Both choices are valid and lead to a robust, constant-preserving scheme. The claim that an implementation *should* detect this case and can set $\\phi = 0$ is a perfectly valid statement about robust numerical coding.\n\n### Evaluation of Options\n\n**A. In Configuration I, one has $r=+\\infty$, and the Superbee and Van Leer limiters both give $\\phi=2$, while the Minmod and Van Albada limiters both give $\\phi=1$.**\nAs determined in our analysis of Configuration I, $r=+\\infty$. The limit values are indeed $\\phi_{\\mathrm{SB}}=2$, $\\phi_{\\mathrm{VL}}=2$, $\\phi_{\\mathrm{MM}}=1$, and $\\phi_{\\mathrm{VA}}=1$. This statement is a precise summary of our findings.\n**Verdict: Correct.**\n\n**B. In Configuration II, one has $r=0$, and all four limiters give $\\phi=0$.**\nAs determined in our analysis of Configuration II, $r=0$. The value for all four limiters at $r=0$ is indeed $\\phi=0$. This statement is also a precise summary of our findings.\n**Verdict: Correct.**\n\n**C. In Configuration III, $r$ is undefined ($0/0$). A robust implementation should detect this and set $\\phi=0$ to preserve the constant solution and avoid division by zero.**\nOur analysis of Configuration III confirms that $r$ is undefined ($0/0$). It is an absolute necessity for a robust computer program to detect and handle this case to prevent division by zero. While setting $\\phi=0$ is not the only option (e.g., setting $\\phi=1$ also works), it is a common, valid, and safe one. The stated reasons—to preserve the constant solution and avoid division by zero—are correct. The preservation of the constant state is guaranteed because the term multiplied by $\\phi$ is zero, and avoiding division by zero is the primary driver for handling this case. The statement accurately describes a key aspect of a robust numerical implementation.\n**Verdict: Correct.**\n\n**D. In Configuration I, the Van Albada limiter yields $\\phi=2$ because $\\lim_{r\\to+\\infty}\\phi_{\\mathrm{VA}}(r)=2$.**\nOur analysis for Configuration I showed that for the Van Albada limiter, $\\lim_{r\\to+\\infty}\\phi_{\\mathrm{VA}}(r)=1$. The statement claims the limit is $2$ and thus $\\phi=2$. Both the justification and the conclusion are false.\n**Verdict: Incorrect.**\n\n**E. In Configuration II, the Minmod limiter yields $\\phi=1$ because $\\min(1,r)=1$ at $r=0$.**\nOur analysis for Configuration II showed that $r=0$ and $\\phi_{\\mathrm{MM}}(0)=0$. The statement claims $\\phi=1$. This is false. The justification provided is \"$\\min(1,r)=1$ at $r=0$\". This is also false, as $\\min(1,0)=0$. The statement is incorrect on all counts.\n**Verdict: Incorrect.**\n\nFinal correct statements are A, B, and C.", "answer": "$$\\boxed{ABC}$$", "id": "2394421"}]}