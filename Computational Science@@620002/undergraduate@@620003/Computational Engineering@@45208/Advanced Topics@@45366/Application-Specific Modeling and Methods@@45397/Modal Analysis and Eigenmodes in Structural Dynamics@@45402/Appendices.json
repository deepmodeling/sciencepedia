{"hands_on_practices": [{"introduction": "Many real-world structures are too complex for exact analytical solutions, making numerical methods like the Finite Element Method (FEM) essential tools. This foundational exercise [@problem_id:2414089] guides you through comparing the exact vibrational modes of a simple string with those computed from an FEM model. By analyzing the errors, you will gain crucial hands-on insight into the concept of discretization and how mesh refinement impacts the accuracy of your simulation.", "problem": "Consider an ideal taut string of length $L$ under constant tension $T$ with uniform linear mass density $\\mu$. The transverse displacement $u(x,t)$ satisfies the one-dimensional wave equation with fixed-fixed boundary conditions, namely $u(0,t)=0$ and $u(L,t)=0$. Treat the system as continuous to obtain the exact eigenfrequencies and eigenmodes, and also approximate it using a uniform, piecewise-linear finite element model to obtain discrete eigenfrequencies and eigenmodes.\n\nYour program must, for each specified test case, do the following from first principles:\n- For the continuous string, derive the exact $n$-th angular eigenfrequency $\\omega_n^{\\mathrm{exact}}$ and the corresponding normalized exact mode shape $\\phi_n^{\\mathrm{exact}}(x)$, where normalization is with respect to the Euclidean norm of the vector of nodal samples on a uniform mesh.\n- For the finite element discretization with $N_e$ uniform linear elements over $[0,L]$, assemble the exact global stiffness and mass matrices by integrating the weak form over each element, impose the fixed boundary conditions at $x=0$ and $x=L$, and solve the resulting generalized eigenvalue problem to obtain the $n$-th discrete angular eigenfrequency $\\omega_n^{\\mathrm{fem}}$ and the corresponding normalized discrete mode shape vector $\\phi_n^{\\mathrm{fem}}$ (normalized by the Euclidean norm of the full nodal vector, including the zero boundary nodes).\n- Compare the discrete mode shape to the exact mode shape sampled at the same mesh nodes by first aligning the sign of $\\phi_n^{\\mathrm{fem}}$ to maximize the dot product with the sampled exact mode vector, then computing the maximum absolute nodal error.\n- Compute two metrics for each test case: the relative angular frequency error $|\\omega_n^{\\mathrm{fem}}-\\omega_n^{\\mathrm{exact}}|/\\omega_n^{\\mathrm{exact}}$ (dimensionless) and the maximum absolute nodal mode shape error $\\max_i|\\phi_{n,i}^{\\mathrm{fem}}-\\phi_{n,i}^{\\mathrm{exact}}|$ (dimensionless), where $i$ ranges over all mesh nodes including the boundary nodes.\n\nUse the following physical parameters for all test cases: length $L=1\\,\\mathrm{m}$, tension $T=100\\,\\mathrm{N}$, and linear density $\\mu=0.01\\,\\mathrm{kg/m}$. Angular quantities must be in radians per second. Report all errors as dimensionless real numbers.\n\nTest suite (each test case is a pair $(N_e,n)$ of the number of uniform elements and the mode index):\n- Case $1$: $(N_e,n)=(2,1)$.\n- Case $2$: $(N_e,n)=(4,1)$.\n- Case $3$: $(N_e,n)=(8,2)$.\n- Case $4$: $(N_e,n)=(16,3)$.\n- Case $5$: $(N_e,n)=(8,7)$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case result is itself a two-element list of real numbers $[\\text{frequency\\_relative\\_error},\\text{mode\\_shape\\_max\\_nodal\\_error}]$. For the five cases above, the final output format must be\n$[[e_{1,f},e_{1,s}],[e_{2,f},e_{2,s}],[e_{3,f},e_{3,s}],[e_{4,f},e_{4,s}],[e_{5,f},e_{5,s}]]$\nwhere $e_{k,f}$ is the relative angular frequency error and $e_{k,s}$ is the maximum absolute nodal mode shape error for case $k$.", "solution": "The problem presented is a well-defined exercise in computational structural dynamics, specifically the comparison of an analytical solution with a numerical approximation via the Finite Element Method (FEM). It is scientifically grounded, mathematically consistent, and all necessary parameters are provided. Therefore, the problem is valid and I will proceed with a full derivation and solution.\n\nThe analysis is divided into three parts: first, the derivation of the exact eigen-solution for the continuous system; second, the formulation and solution of the discrete finite element model; and third, the definition of error metrics for comparison.\n\n**1. Continuous System: Exact Analytical Solution**\n\nThe transverse displacement $u(x,t)$ of an ideal taut string is governed by the one-dimensional wave equation:\n$$\n\\mu \\frac{\\partial^2 u}{\\partial t^2} - T \\frac{\\partial^2 u}{\\partial x^2} = 0, \\quad x \\in [0, L]\n$$\nwhere $\\mu$ is the linear mass density, $T$ is the tension, $L$ is the length of the string, $x$ is the spatial coordinate, and $t$ is time. The boundary conditions are fixed-fixed, meaning $u(0,t) = 0$ and $u(L,t) = 0$.\n\nTo find the natural frequencies and mode shapes (the eigen-solution), we seek standing wave solutions using the method of separation of variables. We assume a solution of the form $u(x,t) = \\phi(x)q(t)$. Substituting this into the wave equation and rearranging yields:\n$$\n\\frac{1}{q(t)} \\frac{d^2 q}{dt^2} = \\frac{T}{\\mu} \\frac{1}{\\phi(x)} \\frac{d^2 \\phi}{dx^2}\n$$\nSince the left side depends only on $t$ and the right side only on $x$, both must be equal to a constant, which we denote as $-\\omega^2$. This yields two ordinary differential equations:\n$$\n\\frac{d^2 q}{dt^2} + \\omega^2 q = 0\n$$\n$$\n\\frac{d^2 \\phi}{dx^2} + k^2 \\phi = 0, \\quad \\text{where } k^2 = \\frac{\\mu \\omega^2}{T}\n$$\nThe spatial equation for the mode shape $\\phi(x)$ has the general solution:\n$$\n\\phi(x) = A \\sin(kx) + B \\cos(kx)\n$$\nApplying the boundary conditions:\n1.  $\\phi(0) = 0 \\implies A \\sin(0) + B \\cos(0) = 0 \\implies B = 0$.\n2.  $\\phi(L) = 0 \\implies A \\sin(kL) = 0$. For a non-trivial solution ($A \\neq 0$), we must have $\\sin(kL) = 0$.\n\nThis condition is satisfied when $kL = n\\pi$ for any integer $n=1, 2, 3, \\dots$. This quantizes the admissible wavenumbers $k_n$:\n$$\nk_n = \\frac{n\\pi}{L}\n$$\nSubstituting this back into the relation for $\\omega^2$, we find the discrete set of angular eigenfrequencies $\\omega_n^{\\mathrm{exact}}$:\n$$\n(\\omega_n^{\\mathrm{exact}})^2 = \\frac{T}{\\mu} k_n^2 = \\frac{T}{\\mu} \\left(\\frac{n\\pi}{L}\\right)^2 \\implies \\omega_n^{\\mathrm{exact}} = \\frac{n\\pi}{L} \\sqrt{\\frac{T}{\\mu}}\n$$\nThe corresponding mode shapes (eigenmodes) are given by:\n$$\n\\phi_n^{\\mathrm{exact}}(x) = \\sin\\left(\\frac{n\\pi x}{L}\\right)\n$$\nwhere the amplitude has been set to $1$ for simplicity, as it will be handled by normalization. For comparison with the FEM solution on a mesh with $N_e$ elements (and thus $N_e+1$ nodes), we sample this continuous function at the nodal coordinates $x_i = i \\cdot (L/N_e)$ for $i=0, 1, \\dots, N_e$. The resulting sampled vector must be normalized by its Euclidean norm, yielding the vector $\\boldsymbol{\\phi}_n^{\\mathrm{exact}}$.\n\n**2. Discrete System: Finite Element Method**\n\nWe begin with the weak form of the spatial governing equation, $-T u'' = \\omega^2 \\mu u$. For a test function $v(x)$ that satisfies the same homogeneous boundary conditions (i.e., $v(0)=v(L)=0$), the weak form is:\n$$\n\\int_0^L v(-T u'') dx = \\int_0^L v(\\omega^2 \\mu u) dx\n$$\nIntegrating the left side by parts gives:\n$$\n\\int_0^L T u' v' dx - [T u' v]_0^L = \\omega^2 \\int_0^L \\mu u v dx\n$$\nThe boundary term $[T u' v]_0^L$ vanishes because $v(0)=v(L)=0$. The weak form becomes:\n$$\n\\int_0^L T u' v' dx = \\omega^2 \\int_0^L \\mu u v dx\n$$\nWe discretize the domain $[0,L]$ into $N_e$ linear elements, each of length $h = L/N_e$. Within each element, the displacement is approximated by linear shape functions $N_1(\\xi), N_2(\\xi)$, where $\\xi \\in [0,h]$ is the local coordinate: $u^e(\\xi) = N_1(\\xi) d_1 + N_2(\\xi) d_2$. The shape functions are $N_1(\\xi) = 1-\\xi/h$ and $N_2(\\xi)=\\xi/h$.\n\nThe element stiffness matrix $k^e$ and mass matrix $m^e$ are derived by substituting the approximation into the weak form, integrating over one element:\n$$\nk_{ij}^e = \\int_0^h T N_i' N_j' d\\xi = \\frac{T}{h} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}\n$$\n$$\nm_{ij}^e = \\int_0^h \\mu N_i N_j d\\xi = \\frac{\\mu h}{6} \\begin{pmatrix} 2 & 1 \\\\ 1 & 2 \\end{pmatrix}\n$$\nThis is the consistent mass matrix formulation, as required for accurate eigen-analysis. The global matrices $K$ and $M$ of size $(N_e+1) \\times (N_e+1)$ are assembled by summing the contributions from all $N_e$ elements. This results in the global generalized eigenvalue problem:\n$$\nK\\boldsymbol{\\phi} = \\omega^2 M\\boldsymbol{\\phi}\n$$\nThe fixed boundary conditions $u(0)=0$ and $u(L)=0$ mean that the first and last nodal displacements are zero. We enforce this by removing the first and last rows and columns from $K$ and $M$, creating the reduced system $K_{red}\\boldsymbol{\\phi}_{red} = \\omega^2 M_{red}\\boldsymbol{\\phi}_{red}$ of size $(N_e-1) \\times (N_e-1)$ for the internal nodes.\n\nSolving this reduced eigenvalue problem yields $N_e-1$ pairs of eigenvalues $(\\omega_n^{\\mathrm{fem}})^2$ and eigenvectors $\\boldsymbol{\\phi}_{n,red}^{\\mathrm{fem}}$. The full mode shape vector $\\boldsymbol{\\phi}_n^{\\mathrm{fem}}$ is reconstructed by padding the reduced eigenvector with zeros at the boundaries. This full vector is then normalized by its Euclidean norm.\n\n**3. Error Computation**\n\nFor each test case $(N_e, n)$, we compute the two specified metrics:\n- **Relative Frequency Error**: The relative error between the $n$-th FEM eigenfrequency and the $n$-th exact eigenfrequency.\n$$\ne_f = \\frac{|\\omega_n^{\\mathrm{fem}} - \\omega_n^{\\mathrm{exact}}|}{\\omega_n^{\\mathrm{exact}}}\n$$\n- **Maximum Nodal Mode Shape Error**: First, we must align the sign of the numerically computed eigenvector. An eigenvector $\\boldsymbol{\\phi}$ and its negative $-\\boldsymbol{\\phi}$ are mathematically equivalent. We ensure a consistent comparison by multiplying $\\boldsymbol{\\phi}_n^{\\mathrm{fem}}$ by $\\text{sign}(\\boldsymbol{\\phi}_n^{\\mathrm{fem}} \\cdot \\boldsymbol{\\phi}_n^{\\mathrm{exact}})$, where $\\boldsymbol{\\phi}_n^{\\mathrm{exact}}$ is the vector of sampled exact mode shape values. After alignment, the error is the maximum absolute difference between the components of the normalized FEM and normalized exact mode vectors.\n$$\ne_s = \\max_i |\\phi_{n,i}^{\\mathrm{fem}} - \\phi_{n,i}^{\\mathrm{exact}}|\n$$\nThis procedure provides a rigorous quantification of the accuracy of the finite element model for both frequency and mode shape prediction. Higher-order modes and coarser meshes are expected to yield larger errors.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import eigh\n\ndef solve():\n    \"\"\"\n    Solves for the eigenfrequencies and eigenmodes of a taut string using both an\n    analytical continuous model and a discrete finite element model, and computes\n    the error between them for specified test cases.\n    \"\"\"\n    # Physical parameters\n    L = 1.0  # m\n    T = 100.0  # N\n    MU = 0.01  # kg/m\n\n    # Test suite: (Number of elements Ne, Mode index n)\n    test_cases = [\n        (2, 1),\n        (4, 1),\n        (8, 2),\n        (16, 3),\n        (8, 7),\n    ]\n\n    all_results = []\n\n    for Ne, n_mode in test_cases:\n        # --- 1. Exact Analytical Solution ---\n        # Exact angular eigenfrequency\n        omega_exact = (n_mode * np.pi / L) * np.sqrt(T / MU)\n\n        # Nodal coordinates for a mesh with Ne elements\n        num_nodes = Ne + 1\n        nodes = np.linspace(0, L, num_nodes)\n\n        # Sample the exact mode shape at the nodes\n        phi_exact_sampled = np.sin(n_mode * np.pi * nodes / L)\n        \n        # Normalize the sampled exact mode shape vector by its Euclidean norm\n        norm_exact = np.linalg.norm(phi_exact_sampled)\n        # Avoid division by zero if the mode shape is accidentally all zeros\n        phi_exact_normalized = phi_exact_sampled / norm_exact if norm_exact > 0 else phi_exact_sampled\n\n        # --- 2. Finite Element Method (FEM) Solution ---\n        h = L / Ne  # Element length\n\n        # Element stiffness matrix k^e\n        k_e = (T / h) * np.array([[1, -1], [-1, 1]])\n\n        # Element consistent mass matrix m^e\n        m_e = (MU * h / 6.0) * np.array([[2, 1], [1, 2]])\n\n        # Assemble global matrices K and M\n        K_global = np.zeros((num_nodes, num_nodes))\n        M_global = np.zeros((num_nodes, num_nodes))\n\n        for i in range(Ne):\n            # Assembly indices for the two nodes of element i\n            idx = np.array([i, i + 1])\n            K_global[np.ix_(idx, idx)] += k_e\n            M_global[np.ix_(idx, idx)] += m_e\n\n        # Apply fixed-fixed boundary conditions by reducing the system\n        # (remove first and last rows/columns, corresponding to nodes 0 and Ne)\n        internal_dofs = slice(1, Ne)\n        K_red = K_global[internal_dofs, internal_dofs]\n        M_red = M_global[internal_dofs, internal_dofs]\n\n        # Solve the generalized eigenvalue problem: K_red * v = lambda * M_red * v\n        # eigh returns eigenvalues in ascending order and corresponding eigenvectors\n        # The number of internal DoFs is Ne - 1.\n        # This will fail if n_mode > Ne - 1, as the model cannot capture that mode.\n        if n_mode > Ne - 1:\n            # This case is physically not representable by the mesh,\n            # though the problem setup avoids this.\n            all_results.append([np.inf, np.inf])\n            continue\n            \n        eigenvalues, eigenvectors = eigh(K_red, M_red)\n\n        # The n-th eigenvalue (_lambda) corresponds to omega^2\n        # Use (n_mode - 1) for 0-based indexing\n        _lambda = eigenvalues[n_mode - 1]\n        omega_fem = np.sqrt(_lambda)\n\n        # Get the corresponding eigenvector for the reduced system\n        phi_fem_red = eigenvectors[:, n_mode - 1]\n\n        # Reconstruct the full mode shape vector including boundary nodes\n        phi_fem_full = np.zeros(num_nodes)\n        phi_fem_full[internal_dofs] = phi_fem_red\n        \n        # Normalize the full FEM mode shape vector by its Euclidean norm\n        norm_fem = np.linalg.norm(phi_fem_full)\n        phi_fem_normalized = phi_fem_full / norm_fem if norm_fem > 0 else phi_fem_full\n\n        # --- 3. Comparison and Error Calculation ---\n\n        # Align sign of FEM eigenvector to match the exact one\n        if np.dot(phi_fem_normalized, phi_exact_normalized)  0:\n            phi_fem_normalized *= -1.0\n\n        # Relative angular frequency error\n        freq_rel_error = np.abs(omega_fem - omega_exact) / omega_exact\n\n        # Maximum absolute nodal mode shape error\n        mode_shape_max_error = np.max(np.abs(phi_fem_normalized - phi_exact_normalized))\n\n        all_results.append([freq_rel_error, mode_shape_max_error])\n\n    # Format the final output string\n    output_str = \"[\" + \",\".join([f\"[{e[0]},{e[1]}]\" for e in all_results]) + \"]\"\n    print(output_str)\n\nsolve()\n```", "id": "2414089"}, {"introduction": "The dynamic behavior of a structure can change dramatically with small adjustments to its physical properties, a critical consideration in design and optimization. This exercise [@problem_id:2414070] simulates the phenomenon of \"mode veering,\" where the natural frequencies of a system approach each other and their corresponding mode shapes rapidly exchange character. By tracking modes with the Modal Assurance Criterion (MAC), you will learn how to detect and quantify these interactions, a key skill in diagnosing potential resonance issues in complex systems.", "problem": "Consider an undamped, linear, time-invariant multi-degree-of-freedom structural system with symmetric, positive-definite mass matrix $M \\in \\mathbb{R}^{n \\times n}$ in kilograms and symmetric, positive-definite stiffness matrix $K(p) \\in \\mathbb{R}^{n \\times n}$ in newtons per meter, depending on a scalar tuning parameter $p$ measured in newtons per meter. For each fixed value of $p$, the free vibration problem is governed by the generalized eigenvalue problem\n$$\nK(p)\\,\\phi = \\lambda\\,M\\,\\phi,\n$$\nwhere $\\lambda \\ge 0$ and the corresponding natural circular frequencies in radians per second are given by $\\omega = \\sqrt{\\lambda}$. The associated mode shapes are the eigenvectors $\\phi \\ne 0$, defined up to a nonzero scalar. The Modal Assurance Criterion (MAC) between two mode shapes $\\phi$ and $\\psi$ with respect to the mass matrix $M$ is defined as\n$$\n\\mathrm{MAC}_M(\\phi,\\psi) = \\frac{\\left|\\phi^\\top M \\psi\\right|^2}{\\left(\\phi^\\top M \\phi\\right)\\left(\\psi^\\top M \\psi\\right)} \\in [0,1].\n$$\nMode veering refers to the phenomenon whereby, under a slow change of $p$, two nearby modes exchange their characteristics without actual eigenfrequency crossing, typically observed when there is weak coupling between two subsystems.\n\nYour task is to write a complete, runnable program that, for each test case specified below, evaluates the two smallest natural circular frequencies across a given finite set of parameter values, detects the parameter at which their separation is minimal, and quantifies whether the first mode at the smallest parameter value correlates more strongly with the first or the second mode at the largest parameter value using the Modal Assurance Criterion.\n\nFor each test case $i$, perform the following using the exact parameter sets provided:\n1) For each listed value of $p$, solve the generalized eigenvalue problem, compute the two smallest natural circular frequencies (in radians per second), and compute their absolute difference (the frequency gap, in radians per second). Identify the parameter value $p^\\star$ (in newtons per meter) at which this gap is minimal. In case of a tie, select the smallest $p$ among those achieving the minimum gap.\n2) Let $p_{\\min}$ be the smallest listed $p$ and $p_{\\max}$ be the largest listed $p$. Let $\\phi_1(p_{\\min})$ denote the first mode (associated with the smallest natural circular frequency) at $p_{\\min}$, and let $\\phi_1(p_{\\max})$ and $\\phi_2(p_{\\max})$ denote the first and second modes at $p_{\\max}$, respectively. Compute $\\mathrm{MAC}_M\\!\\left(\\phi_1(p_{\\min}),\\phi_1(p_{\\max})\\right)$ and $\\mathrm{MAC}_M\\!\\left(\\phi_1(p_{\\min}),\\phi_2(p_{\\max})\\right)$. Define an integer exchange indicator equal to $1$ if\n$$\n\\mathrm{MAC}_M\\!\\left(\\phi_1(p_{\\min}),\\phi_2(p_{\\max})\\right) > \\mathrm{MAC}_M\\!\\left(\\phi_1(p_{\\min}),\\phi_1(p_{\\max})\\right),\n$$\nand equal to $0$ otherwise.\n\nUnits and reporting:\n- Report $p^\\star$ in newtons per meter, rounded to $6$ decimal places.\n- Report the minimum frequency gap in radians per second, rounded to $6$ decimal places.\n- Report the exchange indicator as an integer $0$ or $1$.\n- Angles are not involved; no angle units are required.\n- No percentages are involved.\n\nTest Suite (three cases):\n- Case $1$ (two degrees of freedom): $M = \\mathrm{diag}(1,1)$ kilograms, and\n$$\nK(p) = \\begin{bmatrix} p + 0.3  -0.3 \\\\ -0.3  2.0 + 0.3 \\end{bmatrix} \\ \\text{newtons per meter},\n$$\nwith the parameter set\n$$\np \\in \\{\\, 0.5,\\, 0.8,\\, 1.1,\\, 1.4,\\, 1.7,\\, 2.0,\\, 2.3,\\, 2.6,\\, 2.9 \\,\\} \\ \\text{newtons per meter}.\n$$\n- Case $2$ (two degrees of freedom, uncoupled edge case): $M = \\mathrm{diag}(1,1)$ kilograms, and\n$$\nK(p) = \\begin{bmatrix} p  0.0 \\\\ 0.0  2.0 \\end{bmatrix} \\ \\text{newtons per meter},\n$$\nwith the same parameter set\n$$\np \\in \\{\\, 0.5,\\, 0.8,\\, 1.1,\\, 1.4,\\, 1.7,\\, 2.0,\\, 2.3,\\, 2.6,\\, 2.9 \\,\\} \\ \\text{newtons per meter}.\n$$\n- Case $3$ (three degrees of freedom with a stiff third mode): $M = \\mathrm{diag}(1,1,1)$ kilograms, and\n$$\nK(p) = \\begin{bmatrix}\np + 0.2  -0.2  0.0 \\\\\n-0.2  2.5 + 0.2  0.0 \\\\\n0.0  0.0  40.0\n\\end{bmatrix} \\ \\text{newtons per meter},\n$$\nwith the parameter set\n$$\np \\in \\{\\, 1.5,\\, 1.8,\\, 2.1,\\, 2.4,\\, 2.7,\\, 3.0 \\,\\} \\ \\text{newtons per meter}.\n$$\n\nRequired final output format:\n- Your program should produce a single line of output containing the results as a comma-separated list of three lists, in order for Cases $1$, $2$, and $3$. Each inner list must be of the form $[p^\\star,\\ \\text{gap}_{\\min},\\ \\text{exchange}]$, where $p^\\star$ and $\\text{gap}_{\\min}$ are floats rounded to $6$ decimal places and $\\text{exchange}$ is an integer $0$ or $1$.\n- For example, the output must have the form\n$$\n[\\,[p^\\star_1,\\ \\text{gap}_{\\min,1},\\ \\text{exchange}_1],\\ [p^\\star_2,\\ \\text{gap}_{\\min,2},\\ \\text{exchange}_2],\\ [p^\\star_3,\\ \\text{gap}_{\\min,3},\\ \\text{exchange}_3]\\,],\n$$\nprinted on a single line with no additional text.", "solution": "The problem as stated is valid. It is scientifically grounded in the principles of linear structural dynamics, specifically the analysis of free vibrations in multi-degree-of-freedom systems. The definitions of the mass matrix $M$, stiffness matrix $K(p)$, the generalized eigenvalue problem, natural frequencies $\\omega$, mode shapes $\\phi$, and the Modal Assurance Criterion ($\\mathrm{MAC}$) are all standard and correct. The provided matrices are symmetric, and it has been verified that for the given ranges of the parameter $p$, they are also positive-definite, ensuring a well-posed physical problem with real, positive frequencies. The task is a clear and objective computational exercise, for which a unique solution can be determined. We shall proceed with the solution.\n\nThe core of the problem is to solve the generalized eigenvalue problem for a structural system:\n$$\nK(p)\\,\\phi = \\lambda\\,M\\,\\phi\n$$\nHere, $K(p)$ is the stiffness matrix dependent on a parameter $p$, $M$ is the mass matrix, $\\lambda$ are the eigenvalues (squared natural circular frequencies), and $\\phi$ are the eigenvectors (mode shapes). We are tasked with analyzing the behavior of the two lowest natural frequencies, $\\omega_1(p) = \\sqrt{\\lambda_1(p)}$ and $\\omega_2(p) = \\sqrt{\\lambda_2(p)}$, as $p$ varies over a given discrete set.\n\nThe solution will be implemented via the following systematic procedure for each test case:\n\n1.  **Iterative Eigensolution**: For each value of the parameter $p$ in the specified set $\\{p_j\\}$, we construct the specific stiffness matrix $K(p_j)$. We then solve the generalized eigenvalue problem $K(p_j)\\phi = \\lambda M \\phi$ using a reliable numerical algorithm. This yields a set of eigenvalues $\\lambda_i(p_j)$ sorted in ascending order and their corresponding M-orthonormal eigenvectors $\\phi_i(p_j)$. We are concerned with the first two eigenpairs: $(\\lambda_1, \\phi_1)$ and $(\\lambda_2, \\phi_2)$.\n\n2.  **Frequency Gap Calculation**: From the eigenvalues, we compute the two smallest natural circular frequencies, $\\omega_1(p_j) = \\sqrt{\\lambda_1(p_j)}$ and $\\omega_2(p_j) = \\sqrt{\\lambda_2(p_j)}$. The frequency gap is then the absolute difference, $\\Delta\\omega(p_j) = \\omega_2(p_j) - \\omega_1(p_j)$. We collect these gaps for all $p_j$.\n\n3.  **Identification of Minimum Gap**: We search through the computed gaps to find the minimum value. The parameter value $p$ at which this minimum occurs is designated as $p^\\star$. If multiple $p_j$ values yield the same minimal gap, the smallest such $p_j$ is selected, as per the problem's tie-breaking rule. The minimal gap itself is denoted $\\text{gap}_{\\min}$.\n\n4.  **Mode Shape Correlation Analysis**: This step quantifies the phenomenon of mode veering. We identify the first mode shape at the minimum parameter value, $\\phi_1(p_{\\min})$, and the first two mode shapes at the maximum parameter value, $\\phi_1(p_{\\max})$ and $\\phi_2(p_{\\max})$. We then employ the Modal Assurance Criterion, defined as:\n    $$\n    \\mathrm{MAC}_M(\\phi_a,\\psi_b) = \\frac{\\left|\\phi_a^\\top M \\psi_b\\right|^2}{\\left(\\phi_a^\\top M \\phi_a\\right)\\left(\\psi_b^\\top M \\psi_b\\right)}\n    $$\n    This criterion provides a scalar value between $0$ (uncorrelated) and $1$ (fully correlated) for any two mode shapes $\\phi_a$ and $\\psi_b$. Note that since the eigenvectors from the numerical solver are already normalized such that $\\phi^\\top M \\phi = 1$, the denominator in the $\\mathrm{MAC}$ expression is unity, which simplifies the calculation. However, for numerical robustness, we compute the full expression.\n\n5.  **Exchange Indicator**: We compute two $\\mathrm{MAC}$ values: the first compares the initial first mode with the final first mode, $C_{11} = \\mathrm{MAC}_M(\\phi_1(p_{\\min}), \\phi_1(p_{\\max}))$, and the second compares the initial first mode with the final second mode, $C_{12} = \\mathrm{MAC}_M(\\phi_1(p_{\\min}), \\phi_2(p_{\\max}))$. A mode exchange has occurred if the initial mode shape is more similar to the final second mode shape. Thus, the exchange indicator is defined as an integer equal to $1$ if $C_{12} > C_{11}$, and $0$ otherwise.\n\nThis complete algorithm will be applied to each of the three test cases provided. The results, comprising $p^\\star$, $\\text{gap}_{\\min}$, and the exchange indicator for each case, will be formatted and presented as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import eigh\n\ndef solve():\n    \"\"\"\n    Main function to solve the modal analysis problem for the given test cases.\n    \"\"\"\n\n    def mac_m(phi_a, phi_b, M):\n        \"\"\"\n        Calculates the Mass-based Modal Assurance Criterion (MAC).\n        \n        Args:\n            phi_a (np.ndarray): First mode shape vector.\n            phi_b (np.ndarray): Second mode shape vector.\n            M (np.ndarray): Mass matrix.\n        \n        Returns:\n            float: The MAC value.\n        \"\"\"\n        numerator = np.abs(phi_a.T @ M @ phi_b)**2\n        denominator = (phi_a.T @ M @ phi_a) * (phi_b.T @ M @ phi_b)\n        \n        # Avoid division by zero in case of null vectors, though not expected here.\n        if denominator  1e-12:\n            return 0.0\n        return numerator / denominator\n\n    def process_case(M, K_func, p_values):\n        \"\"\"\n        Processes a single test case to find p_star, min_gap, and exchange_indicator.\n        \"\"\"\n        modal_data = []\n        p_values_sorted = sorted(p_values)\n\n        for p in p_values_sorted:\n            K = K_func(p)\n            \n            # Solve the generalized eigenvalue problem: K*phi = lambda*M*phi\n            # scipy.linalg.eigh returns eigenvalues in ascending order.\n            eigenvalues, eigenvectors = eigh(K, M)\n            \n            # We need the two smallest natural frequencies and their modes.\n            omega_1 = np.sqrt(eigenvalues[0])\n            omega_2 = np.sqrt(eigenvalues[1])\n            gap = omega_2 - omega_1\n            \n            phi_1 = eigenvectors[:, 0]\n            phi_2 = eigenvectors[:, 1]\n            \n            modal_data.append({'p': p, 'gap': gap, 'phi1': phi_1, 'phi2': phi_2})\n            \n        # 1) Find p_star for minimum gap, with tie-breaking for smallest p.\n        min_gap_data = min(modal_data, key=lambda x: (x['gap'], x['p']))\n        p_star = min_gap_data['p']\n        min_gap = min_gap_data['gap']\n        \n        # 2) Get modes at p_min and p_max for MAC calculation.\n        # Since p_values are sorted, modal_data is also implicitly sorted by 'p'.\n        phi1_at_p_min = modal_data[0]['phi1']\n        \n        p_max_data = modal_data[-1]\n        phi1_at_p_max = p_max_data['phi1']\n        phi2_at_p_max = p_max_data['phi2']\n        \n        # Compute MAC values to check for mode exchange.\n        mac_11 = mac_m(phi1_at_p_min, phi1_at_p_max, M)\n        mac_12 = mac_m(phi1_at_p_min, phi2_at_p_max, M)\n        \n        exchange_indicator = 1 if mac_12 > mac_11 else 0\n        \n        return [p_star, min_gap, exchange_indicator]\n\n    # Define the test cases from the problem statement.\n    # --- Case 1 ---\n    M1 = np.diag([1.0, 1.0])\n    def K1_func(p):\n        return np.array([\n            [p + 0.3, -0.3],\n            [-0.3, 2.0 + 0.3]\n        ])\n    p1_values = [0.5, 0.8, 1.1, 1.4, 1.7, 2.0, 2.3, 2.6, 2.9]\n    \n    # --- Case 2 ---\n    M2 = np.diag([1.0, 1.0])\n    def K2_func(p):\n        return np.array([\n            [p, 0.0],\n            [0.0, 2.0]\n        ])\n    p2_values = p1_values\n    \n    # --- Case 3 ---\n    M3 = np.diag([1.0, 1.0, 1.0])\n    def K3_func(p):\n        return np.array([\n            [p + 0.2, -0.2, 0.0],\n            [-0.2, 2.5 + 0.2, 0.0],\n            [0.0, 0.0, 40.0]\n        ])\n    p3_values = [1.5, 1.8, 2.1, 2.4, 2.7, 3.0]\n    \n    test_cases = [\n        (M1, K1_func, p1_values),\n        (M2, K2_func, p2_values),\n        (M3, K3_func, p3_values)\n    ]\n\n    all_results = []\n    for M, K_func, p_values in test_cases:\n        result = process_case(M, K_func, p_values)\n        all_results.append(result)\n\n    # Format the final output string as specified.\n    result_strings = []\n    for res in all_results:\n        p_star, min_gap, exchange = res\n        result_strings.append(f'[{p_star:.6f}, {min_gap:.6f}, {exchange}]')\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(result_strings)}]\")\n\nsolve()\n```", "id": "2414070"}, {"introduction": "While undamped models are useful, real structures dissipate energy, often in ways that are not distributed uniformly with mass or stiffness. This practice [@problem_id:2414124] explores the consequences of such non-proportional damping, which requires solving a quadratic eigenvalue problem to find complex eigenvalues and eigenvectors. You will discover that the resulting \"complex modes\" are no longer simple standing waves but represent oscillations with distinct phase lags between different parts of the structure, a crucial concept for advanced vibration analysis.", "problem": "Consider a linear time-invariant three-degree-of-freedom structural model with generalized mass matrix $\\mathbf{M}$, stiffness matrix $\\mathbf{K}$, and viscous damping matrix $\\mathbf{C}$, governed by the second-order system $\\mathbf{M}\\,\\ddot{\\mathbf{x}}(t)+\\mathbf{C}\\,\\dot{\\mathbf{x}}(t)+\\mathbf{K}\\,\\mathbf{x}(t)=\\mathbf{0}$. The generalized mass matrix is $\\mathbf{M}=\\operatorname{diag}(1,1,1)$ (in consistent units), and the generalized stiffness matrix is $\\mathbf{K}=\\operatorname{diag}(9,9,16)$ (in consistent units), corresponding to three independent single-degree-of-freedom springs to ground with undamped natural frequencies $\\omega_{1}=\\omega_{2}=3$ and $\\omega_{3}=4$. Define a symmetric, positive-definite, non-proportional viscous damping matrix that couples only the first two degrees of freedom and leaves the third uncoupled as\n$$\n\\mathbf{C}=\\begin{bmatrix}\n1  0.6  0\\\\\n0.6  1  0\\\\\n0  0  0.8\n\\end{bmatrix}.\n$$\nStarting from the governing equations of motion, formulate the associated quadratic eigenvalue problem, determine the complex eigenvalues and corresponding displacement eigenvectors, and give a concise physical interpretation of each eigenmode in terms of the relative motion of the coordinates. Finally, what is the damped natural frequency (the magnitude of the imaginary part of the eigenvalue) of the out-of-phase mode associated with the first two degrees of freedom? Express the final answer in radians per second and round your answer to four significant figures.", "solution": "The problem will first be validated for scientific soundness, clarity, and completeness.\n\n### Step 1: Extract Givens\n- **Governing Equation**: $\\mathbf{M}\\,\\ddot{\\mathbf{x}}(t)+\\mathbf{C}\\,\\dot{\\mathbf{x}}(t)+\\mathbf{K}\\,\\mathbf{x}(t)=\\mathbf{0}$\n- **Generalized Mass Matrix**: $\\mathbf{M}=\\operatorname{diag}(1,1,1) = \\begin{bmatrix} 1  0  0 \\\\ 0  1  0 \\\\ 0  0  1 \\end{bmatrix}$\n- **Generalized Stiffness Matrix**: $\\mathbf{K}=\\operatorname{diag}(9,9,16) = \\begin{bmatrix} 9  0  0 \\\\ 0  9  0 \\\\ 0  0  16 \\end{bmatrix}$\n- **Generalized Damping Matrix**: $\\mathbf{C}=\\begin{bmatrix} 1  0.6  0\\\\ 0.6  1  0\\\\ 0  0  0.8 \\end{bmatrix}$\n- **Task**: Formulate the quadratic eigenvalue problem, find complex eigenvalues and eigenvectors, interpret the modes, and find the damped natural frequency of the out-of-phase mode for the first two degrees of freedom. The final numerical answer must be rounded to four significant figures.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is assessed against the required criteria.\n- **Scientifically Grounded**: The problem describes a linear time-invariant (LTI) multi-degree-of-freedom mechanical system with viscous damping. The governing equation and the subsequent modal analysis via a quadratic eigenvalue problem (QEP) are standard, fundamental concepts in structural dynamics and computational engineering. The problem is scientifically sound.\n- **Well-Posed**: The problem provides all necessary information. The mass matrix $\\mathbf{M}$ is the identity matrix, hence positive definite. The stiffness matrix $\\mathbf{K}$ is diagonal with positive entries, hence positive definite. The damping matrix $\\mathbf{C}$ is symmetric and its positive definiteness can be checked by its eigenvalues or Sylvester's criterion. The leading principal minors are $\\det(1)=1 > 0$ and $\\det \\begin{pmatrix} 1  0.6 \\\\ 0.6  1 \\end{pmatrix} = 1 - 0.36 = 0.64 > 0$, and $\\det(\\mathbf{C}) = 0.64 \\times 0.8 = 0.512 > 0$. Thus, $\\mathbf{C}$ is positive definite. A system with positive definite $\\mathbf{M}$, $\\mathbf{K}$, and $\\mathbf{C}$ matrices is well-behaved and leads to a well-posed eigenvalue problem.\n- **Objective**: The problem is stated using precise mathematical and engineering terminology, free from any subjectivity or ambiguity.\n\n### Step 3: Verdict and Action\nThe problem is valid. It is a standard, well-posed problem in structural dynamics. A complete solution will be provided.\n\n### Solution\nThe dynamics of the system are governed by the second-order matrix differential equation:\n$$\n\\mathbf{M}\\,\\ddot{\\mathbf{x}}(t)+\\mathbf{C}\\,\\dot{\\mathbf{x}}(t)+\\mathbf{K}\\,\\mathbf{x}(t)=\\mathbf{0}\n$$\nTo find the eigenmodes of the system, we assume a solution of the form $\\mathbf{x}(t) = \\mathbf{u} e^{\\lambda t}$, where $\\lambda$ is a complex eigenvalue and $\\mathbf{u}$ is the corresponding complex eigenvector. Substituting this into the governing equation yields:\n$$\n\\mathbf{M}(\\lambda^2 \\mathbf{u} e^{\\lambda t}) + \\mathbf{C}(\\lambda \\mathbf{u} e^{\\lambda t}) + \\mathbf{K}(\\mathbf{u} e^{\\lambda t}) = \\mathbf{0}\n$$\nSince $\\mathbf{u} e^{\\lambda t}$ cannot be the zero vector for a non-trivial solution, we can factor it out, which leads to the quadratic eigenvalue problem (QEP):\n$$\n(\\lambda^2 \\mathbf{M} + \\lambda \\mathbf{C} + \\mathbf{K}) \\mathbf{u} = \\mathbf{0}\n$$\nSubstituting the given matrices $\\mathbf{M}$, $\\mathbf{C}$, and $\\mathbf{K}$:\n$$\n\\left( \\lambda^2 \\begin{bmatrix} 1  0  0 \\\\ 0  1  0 \\\\ 0  0  1 \\end{bmatrix} + \\lambda \\begin{bmatrix} 1  0.6  0 \\\\ 0.6  1  0 \\\\ 0  0  0.8 \\end{bmatrix} + \\begin{bmatrix} 9  0  0 \\\\ 0  9  0 \\\\ 0  0  16 \\end{bmatrix} \\right) \\mathbf{u} = \\mathbf{0}\n$$\nThis combines into the matrix polynomial $\\mathbf{P}(\\lambda)$:\n$$\n\\mathbf{P}(\\lambda) = \\begin{bmatrix} \\lambda^2 + \\lambda + 9  0.6\\lambda  0 \\\\ 0.6\\lambda  \\lambda^2 + \\lambda + 9  0 \\\\ 0  0  \\lambda^2 + 0.8\\lambda + 16 \\end{bmatrix}\n$$\nFor a non-trivial eigenvector $\\mathbf{u}$, the determinant of the matrix polynomial must be zero:\n$$\n\\det(\\mathbf{P}(\\lambda)) = 0\n$$\nDue to the block-diagonal structure of $\\mathbf{P}(\\lambda)$, the third degree of freedom is uncoupled from the first two. The determinant calculation simplifies to:\n$$\n(\\lambda^2 + 0.8\\lambda + 16) \\det \\begin{pmatrix} \\lambda^2 + \\lambda + 9  0.6\\lambda \\\\ 0.6\\lambda  \\lambda^2 + \\lambda + 9 \\end{pmatrix} = 0\n$$\nThis gives two separate characteristic equations:\n1. For the third degree of freedom: $\\lambda^2 + 0.8\\lambda + 16 = 0$\n2. For the first two coupled degrees of freedom: $(\\lambda^2 + \\lambda + 9)^2 - (0.6\\lambda)^2 = 0$\n\nFirst, we analyze the third degree of freedom. Its characteristic equation is:\n$$\n\\lambda^2 + 0.8\\lambda + 16 = 0\n$$\nThe eigenvalues are found using the quadratic formula:\n$$\n\\lambda_{1,2} = \\frac{-0.8 \\pm \\sqrt{0.8^2 - 4(1)(16)}}{2} = \\frac{-0.8 \\pm \\sqrt{0.64 - 64}}{2} = \\frac{-0.8 \\pm \\sqrt{-63.36}}{2} = -0.4 \\pm i\\sqrt{15.84}\n$$\nNumerically, $\\lambda_{1,2} \\approx -0.4 \\pm i3.9799$. The eigenvector for this mode is evidently $\\mathbf{u} \\propto [0, 0, 1]^T$. This mode represents a simple damped oscillation of the third mass, independent of the other two, with a damped natural frequency of $\\omega_{d,3} = \\sqrt{15.84}$ rad/s.\n\nNext, we analyze the coupled first and second degrees of freedom. The characteristic equation is a difference of squares:\n$$\n(\\lambda^2 + \\lambda + 9)^2 - (0.6\\lambda)^2 = 0\n$$\nThis equation can be factored into two separate quadratic equations:\n$$\n(\\lambda^2 + \\lambda + 9 - 0.6\\lambda) (\\lambda^2 + \\lambda + 9 + 0.6\\lambda) = 0\n$$\n$$\n(\\lambda^2 + 0.4\\lambda + 9) (\\lambda^2 + 1.6\\lambda + 9) = 0\n$$\nThis yields two sets of eigenvalues.\n\nCase A: $\\lambda^2 + 0.4\\lambda + 9 = 0$\n$$\n\\lambda_{3,4} = \\frac{-0.4 \\pm \\sqrt{0.4^2 - 4(1)(9)}}{2} = \\frac{-0.4 \\pm \\sqrt{0.16 - 36}}{2} = \\frac{-0.4 \\pm \\sqrt{-35.84}}{2} = -0.2 \\pm i\\sqrt{8.96}\n$$\nTo find the corresponding eigenvector shape for these eigenvalues, we return to the $2 \\times 2$ QEP sub-problem:\n$$\n\\begin{pmatrix} \\lambda^2 + \\lambda + 9  0.6\\lambda \\\\ 0.6\\lambda  \\lambda^2 + \\lambda + 9 \\end{pmatrix} \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}\n$$\nFrom the characteristic equation for this case, we have $\\lambda^2 + 0.4\\lambda + 9 = 0$, which implies $\\lambda^2 + \\lambda + 9 = 0.6\\lambda$. Substituting this into the matrix equation:\n$$\n\\begin{pmatrix} 0.6\\lambda  0.6\\lambda \\\\ 0.6\\lambda  0.6\\lambda \\end{pmatrix} \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}\n$$\nThis gives the relation $0.6\\lambda(u_1 + u_2) = 0$. Since $\\lambda \\neq 0$, we must have $u_1 + u_2 = 0$, or $u_1 = -u_2$. This corresponds to an **out-of-phase** motion. The eigenvector is of the form $\\mathbf{u} \\propto [1, -1, 0]^T$. The damped natural frequency for this mode is $\\omega_d = \\text{Im}(\\lambda) = \\sqrt{8.96}$ rad/s.\n\nCase B: $\\lambda^2 + 1.6\\lambda + 9 = 0$\n$$\n\\lambda_{5,6} = \\frac{-1.6 \\pm \\sqrt{1.6^2 - 4(1)(9)}}{2} = \\frac{-1.6 \\pm \\sqrt{2.56 - 36}}{2} = \\frac{-1.6 \\pm \\sqrt{-33.44}}{2} = -0.8 \\pm i\\sqrt{8.36}\n$$\nAgain, we find the eigenvector shape. From this characteristic equation, $\\lambda^2 + 1.6\\lambda + 9 = 0$, which implies $\\lambda^2 + \\lambda + 9 = -0.6\\lambda$. Substituting into the matrix equation:\n$$\n\\begin{pmatrix} -0.6\\lambda  0.6\\lambda \\\\ 0.6\\lambda  -0.6\\lambda \\end{pmatrix} \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}\n$$\nThis gives the relation $0.6\\lambda(-u_1 + u_2) = 0$. Since $\\lambda \\neq 0$, we must have $u_1 = u_2$. This corresponds to an **in-phase** motion. The eigenvector is of the form $\\mathbf{u} \\propto [1, 1, 0]^T$. The damped natural frequency for this mode is $\\omega_d = \\text{Im}(\\lambda) = \\sqrt{8.36}$ rad/s.\n\nThe problem specifically asks for the damped natural frequency of the out-of-phase mode associated with the first two degrees of freedom. This corresponds to Case A. The damped natural frequency is the magnitude of the imaginary part of the eigenvalues $\\lambda_{3,4}$:\n$$\n\\omega_{d, \\text{out-of-phase}} = \\sqrt{8.96} \\text{ rad/s}\n$$\nNow, we compute the numerical value and round to four significant figures:\n$$\n\\omega_{d, \\text{out-of-phase}} = \\sqrt{8.96} \\approx 2.9933259... \\text{ rad/s}\n$$\nRounding to four significant figures, the result is $2.993$.", "answer": "$$\\boxed{2.993}$$", "id": "2414124"}]}