{"hands_on_practices": [{"introduction": "Before implementing numerical schemes, it is crucial to understand the mathematical properties of the equations you are solving. This practice challenges you to analyze the well-posedness of the Pressure Poisson Equation (PPE) that arises in projection methods, particularly within the common scenario of a periodic channel flow [@problem_id:2428874]. By exploring concepts like solution uniqueness and the compatibility conditions required for a solution to exist, you will build a solid theoretical foundation for constructing robust and accurate solvers.", "problem": "Consider incompressible, isothermal flow of a Newtonian fluid with density $\\rho$ and kinematic viscosity $\\nu$ in a two-dimensional channel domain $\\Omega = [0,L]\\times[0,H]$. The flow is periodic in the streamwise ($x$) direction with period $L$ and bounded by stationary no-slip walls at $y=0$ and $y=H$. The governing equations are the incompressible Navier–Stokes equations,\n$$\n\\frac{\\partial \\boldsymbol{u}}{\\partial t} + (\\boldsymbol{u}\\cdot\\nabla)\\boldsymbol{u} = -\\frac{1}{\\rho}\\nabla p + \\nu \\nabla^2 \\boldsymbol{u} + \\boldsymbol{f},\\qquad \\nabla\\cdot \\boldsymbol{u} = 0,\n$$\nwhere $\\boldsymbol{u}(x,y,t)$ is the velocity, $p(x,y,t)$ is the pressure, and $\\boldsymbol{f}(x,y,t)$ is a body force. A fractional-step (projection) time integration is used from time $t^n$ to $t^{n+1}=t^n+\\Delta t$:\n- A provisional velocity $\\boldsymbol{u}^\\ast$ is computed without the pressure gradient term.\n- The velocity is corrected by a pressure at the new time level according to\n$$\n\\boldsymbol{u}^{n+1} = \\boldsymbol{u}^\\ast - \\frac{\\Delta t}{\\rho}\\,\\nabla p^{n+1},\n$$\nand enforced to satisfy the divergence-free constraint $\\nabla\\cdot \\boldsymbol{u}^{n+1}=0$.\nOn the solid walls, no-slip and no-penetration are prescribed for the physical velocity $\\boldsymbol{u}$, and periodic boundary conditions are applied in the $x$-direction to all fields consistent with the method.\n\nWhich of the following statements about the well-posedness, boundary conditions, and uniqueness of the pressure problem in this setting are correct? Select all that apply.\n\nA. With periodicity in $x$ and enforcing no-penetration on $y=0$ and $y=H$, the pressure Poisson problem that arises in the projection step always has a solution and yields a unique pressure without any additional constraint, because the divergence-free condition alone determines the pressure level.\n\nB. In the stated periodic channel, the pressure from the projection step is determined only up to an arbitrary additive constant; a common and sufficient way to ensure uniqueness is to impose a zero-mean condition on $p^{n+1}$ at each time step.\n\nC. If the flow is driven by a constant mean streamwise pressure gradient, then a strictly periodic pressure field in $x$ cannot represent that mean gradient; a standard remedy is to add an equivalent constant body force $\\boldsymbol{f}$ in the momentum equation and solve only for a periodic pressure fluctuation with zero spatial mean.\n\nD. To fix the pressure level in the Poisson problem, one may impose a Dirichlet condition $p^{n+1}=0$ at a single point on a wall; this approach is incompatible with the projection method because it violates global mass conservation.\n\nE. Under the stated periodic and no-slip boundary conditions, the solvability (compatibility) condition for the pressure Poisson equation reduces to requiring zero normal pressure gradient at the walls, independently of the provisional velocity $\\boldsymbol{u}^\\ast$.", "solution": "From the incompressibility condition $\\nabla\\cdot \\boldsymbol{u}^{n+1}=0$ and the correction step\n$$\n\\boldsymbol{u}^{n+1} = \\boldsymbol{u}^\\ast - \\frac{\\Delta t}{\\rho}\\,\\nabla p^{n+1},\n$$\nwe obtain, by taking the divergence,\n$$\n0 = \\nabla\\cdot \\boldsymbol{u}^{n+1} = \\nabla\\cdot \\boldsymbol{u}^\\ast - \\frac{\\Delta t}{\\rho}\\,\\nabla\\cdot\\nabla p^{n+1}\n= \\nabla\\cdot \\boldsymbol{u}^\\ast - \\frac{\\Delta t}{\\rho}\\,\\nabla^2 p^{n+1}.\n$$\nTherefore, the pressure $p^{n+1}$ satisfies the Poisson equation\n$$\n\\nabla^2 p^{n+1} = \\frac{\\rho}{\\Delta t}\\,\\nabla\\cdot \\boldsymbol{u}^\\ast \\quad \\text{in } \\Omega.\n$$\nTo determine boundary conditions for $p^{n+1}$, require that the corrected velocity satisfies the normal velocity condition at the solid walls. For a stationary wall at $y=0$ and $y=H$, the no-penetration condition is $ \\boldsymbol{n}\\cdot \\boldsymbol{u}^{n+1} = 0$, where $\\boldsymbol{n}$ is the outward unit normal. Using the correction formula,\n$$\n\\boldsymbol{n}\\cdot \\boldsymbol{u}^{n+1} = \\boldsymbol{n}\\cdot \\boldsymbol{u}^\\ast - \\frac{\\Delta t}{\\rho}\\,\\boldsymbol{n}\\cdot \\nabla p^{n+1} = 0\n\\;\\;\\Rightarrow\\;\\;\n\\frac{\\partial p^{n+1}}{\\partial n} = \\frac{\\rho}{\\Delta t}\\,\\boldsymbol{n}\\cdot \\boldsymbol{u}^\\ast \\quad \\text{on } y=0,H.\n$$\nIf the provisional velocity is constructed to satisfy $\\boldsymbol{n}\\cdot \\boldsymbol{u}^\\ast=0$ at the walls (a standard consistent choice), then the boundary condition simplifies to homogeneous Neumann,\n$$\n\\frac{\\partial p^{n+1}}{\\partial n} = 0 \\quad \\text{on } y=0,H.\n$$\nIn the streamwise direction $x$, the fields are periodic with period $L$, so $p^{n+1}$ and its derivatives are periodic in $x$.\n\nWe now analyze solvability and uniqueness. Integrate the Poisson equation over $\\Omega$ and apply the divergence theorem:\n$$\n\\int_{\\Omega} \\nabla^2 p^{n+1}\\, \\mathrm{d}\\Omega = \\int_{\\partial \\Omega} \\frac{\\partial p^{n+1}}{\\partial n}\\, \\mathrm{d}S\n= \\frac{\\rho}{\\Delta t} \\int_{\\Omega} \\nabla\\cdot \\boldsymbol{u}^\\ast \\, \\mathrm{d}\\Omega.\n$$\nFor a rectangular domain with periodic boundaries at $x=0$ and $x=L$, the contributions from the two periodic boundaries cancel exactly because the pressure and its normal derivative are periodic. At the solid walls $y=0$ and $y=H$, if $\\boldsymbol{n}\\cdot \\boldsymbol{u}^\\ast=0$ then $\\partial p^{n+1}/\\partial n = 0$, so the boundary integral vanishes. Thus, the compatibility (solvability) condition becomes\n$$\n\\int_{\\Omega} \\nabla^2 p^{n+1}\\, \\mathrm{d}\\Omega = 0\n\\quad \\Leftrightarrow \\quad\n\\frac{\\rho}{\\Delta t} \\int_{\\Omega} \\nabla\\cdot \\boldsymbol{u}^\\ast \\, \\mathrm{d}\\Omega = 0.\n$$\nThis condition is satisfied if the provisional velocity has zero net divergence in an integral sense, which holds for consistent discretizations that respect the discrete divergence theorem and wall-normal conditions. However, even when solvability holds, with periodic and Neumann boundary conditions the Laplacian operator has a nontrivial nullspace consisting of constants, so $p^{n+1}$ is determined only up to an arbitrary additive constant. To obtain a unique solution, one must fix the pressure level, for example by prescribing the spatial mean of $p^{n+1}$ to be zero or by anchoring $p^{n+1}$ at a single point.\n\nNow consider a flow driven by a constant mean streamwise pressure gradient. In a periodic domain, a pressure field that is strictly periodic in $x$ cannot have a nonzero mean gradient in $x$. A standard practice is to decompose the pressure into a mean linear component and a periodic fluctuation, or equivalently to move the mean gradient into the body force $\\boldsymbol{f}$ in the momentum equation and solve the Poisson problem only for the periodic fluctuation with zero mean. This maintains periodicity of the solved pressure field while representing the physical driving.\n\nEvaluate each statement:\n\nA. The first part, that the pressure Poisson problem has a solution, is contingent on the compatibility condition $\\int_{\\Omega} (\\rho/\\Delta t)\\,\\nabla\\cdot \\boldsymbol{u}^\\ast\\,\\mathrm{d}\\Omega=0$, which is satisfied under consistent construction of $\\boldsymbol{u}^\\ast$ and the stated boundary conditions. However, the claim that the pressure is unique without any additional constraint is false. With periodic and homogeneous Neumann boundary conditions, the solution is determined only up to an additive constant. Verdict: Incorrect.\n\nB. This states that the pressure is determined up to an additive constant and that imposing a zero-mean condition suffices for uniqueness. This is precisely the standard resolution of the constant nullspace of the Laplacian with periodic/Neumann boundary conditions. Verdict: Correct.\n\nC. This asserts that a constant mean streamwise pressure gradient cannot be represented by a strictly periodic pressure field and that one can instead include a constant body force and solve for a periodic, zero-mean pressure fluctuation. This is the standard approach in periodic channel simulations and is consistent with the decomposition of pressure into mean and fluctuating parts. Verdict: Correct.\n\nD. Fixing the pressure level by imposing $p^{n+1}=0$ at a single point is a common technique to eliminate the constant nullspace; it does not, by itself, violate mass conservation provided the Poisson right-hand side satisfies the compatibility condition. It is compatible with the projection method. The claim that it is incompatible and violates global mass conservation is false. Verdict: Incorrect.\n\nE. The solvability condition is an integral condition tying the domain integral of the right-hand side to the boundary fluxes of $\\partial p^{n+1}/\\partial n$. It does not reduce to “requiring zero normal pressure gradient at the walls” independently of $\\boldsymbol{u}^\\ast$; rather, homogeneous Neumann at the walls arises from enforcing no-penetration via the correction, and solvability requires the volume integral of $\\nabla\\cdot \\boldsymbol{u}^\\ast$ to vanish (with periodic side cancellations). The statement confuses a boundary condition with the compatibility condition. Verdict: Incorrect.", "answer": "$$\\boxed{BC}$$", "id": "2428874"}, {"introduction": "Applying boundary conditions correctly is a common source of error in computational fluid dynamics, and the splitting inherent in projection methods introduces unique challenges. This exercise focuses on the practical implementation of a zero-gradient outflow condition, a frequent requirement in simulations [@problem_id:2428887]. You will investigate how to consistently set boundary conditions for both the intermediate velocity and the pressure potential to ensure the physical intent is met, a key skill for developing reliable flow simulations.", "problem": "Consider the incompressible Navier–Stokes equations in a two-dimensional channel domain $\\Omega$ with velocity $\\mathbf{u} = (u,v)$ and pressure $p$, density $\\rho$, and kinematic viscosity $\\nu$:\n$$\n\\frac{\\partial \\mathbf{u}}{\\partial t} + \\nabla \\cdot (\\mathbf{u}\\mathbf{u}) = -\\frac{1}{\\rho}\\nabla p + \\nu \\nabla^2 \\mathbf{u}, \n\\qquad \n\\nabla \\cdot \\mathbf{u} = 0.\n$$\nA standard projection (fractional-step) method advances the velocity from time level $n$ to $n+1$ by computing an intermediate velocity $\\mathbf{u}^*$ without the pressure term, solving a Pressure Poisson Equation (PPE) for a scalar potential $\\phi$, and then correcting the velocity via\n$$\n\\mathbf{u}^{n+1} = \\mathbf{u}^* - \\Delta t \\nabla \\phi, \n\\qquad \n\\nabla^2 \\phi = \\frac{1}{\\Delta t} \\nabla \\cdot \\mathbf{u}^*,\n$$\nso that $\\nabla \\cdot \\mathbf{u}^{n+1} = 0$. Consider an outflow boundary $\\Gamma_o$ at $x=L$ where the modeling intent is to impose a zero-gradient (do-nothing) condition on velocity, i.e., the normal derivative of each velocity component vanishes:\n$$\n(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^{n+1} = \\mathbf{0} \\quad \\text{on } \\Gamma_o,\n$$\nwith $\\mathbf{n}$ the unit normal pointing outward. No value of the normal velocity component is prescribed at $\\Gamma_o$; instead, the flow should exit freely.\n\nWithin the projection framework described above, which option best characterizes a consistent and commonly used way to handle the outflow zero-gradient condition on velocity at $\\Gamma_o$?\n\nA. Enforce the zero-normal-gradient condition on the intermediate velocity by extrapolation, e.g., $(\\mathbf{n}\\cdot \\nabla)\\mathbf{u}^*=\\mathbf{0}$ on $\\Gamma_o$ (in discrete form, copying interior values to ghost cells), and impose a homogeneous Neumann condition for the PPE, $\\partial \\phi/\\partial n = 0$ on $\\Gamma_o$, so that the correction does not change the boundary normal velocity and preserves the zero-gradient character at outflow.\n\nB. Impose a Dirichlet condition $\\phi=0$ on $\\Gamma_o$ for the PPE while also using zero-normal-gradient extrapolation for $\\mathbf{u}^*$, since fixing the potential value at outflow guarantees that the corrected velocity retains zero gradient there.\n\nC. Impose $\\partial \\phi/\\partial n = \\frac{1}{\\Delta t}\\,\\mathbf{n}\\cdot \\mathbf{u}^*$ on $\\Gamma_o$ for the PPE so that $\\mathbf{n}\\cdot \\mathbf{u}^{n+1} = 0$ after correction, thereby achieving the zero-gradient outflow condition.\n\nD. Do not modify $\\mathbf{u}^*$ on $\\Gamma_o$ and impose homogeneous Neumann $\\partial \\phi/\\partial n = 0$ for the PPE, relying on the divergence-free projection alone to enforce the intended outflow zero-gradient behavior.", "solution": "The problem investigates the numerical implementation of a zero-gradient outflow condition, $(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^{n+1} = \\mathbf{0}$ on the boundary $\\Gamma_o$, within the framework of a fractional-step projection method. The velocity at the new time level $n+1$ is obtained from an intermediate velocity $\\mathbf{u}^*$ via the correction step:\n$$\n\\mathbf{u}^{n+1} = \\mathbf{u}^* - \\Delta t \\nabla \\phi\n$$\nwhere $\\phi$ is the solution to the Pressure Poisson Equation (PPE):\n$$\n\\nabla^2 \\phi = \\frac{1}{\\Delta t} \\nabla \\cdot \\mathbf{u}^*\n$$\nThe goal is to select boundary conditions for the intermediate velocity, $\\mathbf{u}^*$, and the potential, $\\phi$, on the outflow boundary $\\Gamma_o$ that correctly enforce the condition $(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^{n+1} = \\mathbf{0}$.\n\nLet us apply the normal derivative operator, $(\\mathbf{n} \\cdot \\nabla)$, to the velocity correction equation on the boundary $\\Gamma_o$:\n$$\n(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^{n+1} = (\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^* - \\Delta t (\\mathbf{n} \\cdot \\nabla)(\\nabla \\phi)\n$$\nTo satisfy the desired condition, we must ensure that the right-hand side is zero:\n$$\n(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^* - \\Delta t (\\mathbf{n} \\cdot \\nabla)(\\nabla \\phi) = \\mathbf{0} \\quad \\text{on } \\Gamma_o\n$$\nThis is the consistency condition that the boundary conditions for $\\mathbf{u}^*$ and $\\phi$ must satisfy. Due to the splitting error inherent to projection methods, satisfying this condition perfectly with simple, local boundary conditions can be difficult. Therefore, we examine common, practical implementations.\n\n### Option-by-Option Analysis\n\n**A. Enforce the zero-normal-gradient condition on the intermediate velocity by extrapolation, e.g., $(\\mathbf{n}\\cdot \\nabla)\\mathbf{u}^*=\\mathbf{0}$ on $\\Gamma_o$ (in discrete form, copying interior values to ghost cells), and impose a homogeneous Neumann condition for the PPE, $\\partial \\phi/\\partial n = 0$ on $\\Gamma_o$, so that the correction does not change the boundary normal velocity and preserves the zero-gradient character at outflow.**\n\nThis option proposes two boundary conditions:\n1.  $(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^* = \\mathbf{0}$ on $\\Gamma_o$.\n2.  $\\frac{\\partial \\phi}{\\partial n} = 0$ on $\\Gamma_o$.\n\nLet us analyze the consequences of this choice.\nFirst, consider the normal component of the velocity correction at the boundary: $\\mathbf{n} \\cdot \\mathbf{u}^{n+1} = \\mathbf{n} \\cdot \\mathbf{u}^* - \\Delta t (\\mathbf{n} \\cdot \\nabla \\phi)$. Since $\\mathbf{n} \\cdot \\nabla \\phi = \\frac{\\partial \\phi}{\\partial n}$, the condition $\\frac{\\partial \\phi}{\\partial n} = 0$ leads to:\n$$\n\\mathbf{n} \\cdot \\mathbf{u}^{n+1} = \\mathbf{n} \\cdot \\mathbf{u}^* \\quad \\text{on } \\Gamma_o\n$$\nThis means the normal velocity at the boundary is not altered by the projection step, which is a desirable property for stability, as it prevents the implicit step from unexpectedly altering the mass flux.\n\nNext, we check the consistency condition. With $(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^* = \\mathbf{0}$, the condition simplifies to $\\Delta t (\\mathbf{n} \\cdot \\nabla)(\\nabla \\phi) = \\mathbf{0}$.\nLet the outward normal be $\\mathbf{n}=(1,0)$ at $x=L$. The boundary condition is $\\frac{\\partial \\phi}{\\partial x}=0$. Differentiating this along the boundary (in the $y$-direction) yields $\\frac{\\partial}{\\partial y}(\\frac{\\partial \\phi}{\\partial x}) = \\frac{\\partial^2 \\phi}{\\partial x \\partial y} = 0$. This implies that the zero-gradient condition for the tangential velocity component $v$ is preserved: $(\\mathbf{n} \\cdot \\nabla)v^{n+1} = (\\mathbf{n} \\cdot \\nabla)v^* - \\Delta t \\frac{\\partial^2 \\phi}{\\partial x \\partial y} = 0 - 0 = 0$.\nHowever, for the normal velocity component $u$, we need $\\frac{\\partial^2 \\phi}{\\partial x^2}=0$. From the PPE on the boundary, $\\frac{\\partial^2 \\phi}{\\partial x^2} + \\frac{\\partial^2 \\phi}{\\partial y^2} = \\frac{1}{\\Delta t} \\nabla \\cdot \\mathbf{u}^*$. Since we set $\\frac{\\partial u^*}{\\partial x}=0$, this becomes $\\frac{\\partial^2 \\phi}{\\partial x^2} = \\frac{1}{\\Delta t}\\frac{\\partial v^*}{\\partial y} - \\frac{\\partial^2 \\phi}{\\partial y^2}$. This term is not zero in general.\n\nTherefore, the condition $(\\mathbf{n} \\cdot \\nabla)u^{n+1}=0$ is not perfectly satisfied. There is a remaining splitting error. Nevertheless, this combination of boundary conditions, $(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^* = \\mathbf{0}$ and $\\frac{\\partial \\phi}{\\partial n} = 0$, represents the most common, simple, and pragmatic approach used in countless CFD codes for \"do-nothing\" outflow conditions. The justification in the option is slightly imprecise about \"preserv[ing] the zero-gradient character\" completely, but it correctly identifies the consequences on the normal velocity value and describes the standard methodology. Among the given choices, this is the best characterization.\n\nVerdict: **Correct**\n\n**B. Impose a Dirichlet condition $\\phi=0$ on $\\Gamma_o$ for the PPE while also using zero-normal-gradient extrapolation for $\\mathbf{u}^*$, since fixing the potential value at outflow guarantees that the corrected velocity retains zero gradient there.**\n\nThis option suggests $(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^*=\\mathbf{0}$ and $\\phi=0$ on $\\Gamma_o$. A Dirichlet condition $\\phi=0$ is analogous to setting the pressure to a constant value at the outflow. While this is a valid physical boundary condition, let's test its consistency with the zero-gradient velocity condition.\nIf $\\phi=0$ on $\\Gamma_o$, then derivatives tangent to the boundary are also zero, e.g., $\\frac{\\partial \\phi}{\\partial y}=0$. The correction for the tangential velocity is $v^{n+1} = v^* - \\Delta t \\frac{\\partial \\phi}{\\partial y}$, so $v^{n+1}=v^*$ on $\\Gamma_o$. Applying the normal derivative, $(\\mathbf{n} \\cdot \\nabla)v^{n+1} = (\\mathbf{n} \\cdot \\nabla)v^*$. If we set this to zero for $\\mathbf{u}^*$, it is preserved. So far, so good.\nFor the normal velocity, $u^{n+1} = u^* - \\Delta t \\frac{\\partial \\phi}{\\partial x}$. We want $(\\mathbf{n} \\cdot \\nabla)u^{n+1} = \\frac{\\partial u^{n+1}}{\\partial x} = 0$. Setting $\\frac{\\partial u^*}{\\partial x}=0$ requires $\\frac{\\partial^2 \\phi}{\\partial x^2}=0$. A Dirichlet condition $\\phi=0$ provides no guarantee that the second normal derivative of the solution, $\\frac{\\partial^2 \\phi}{\\partial x^2}$, will be zero. Its value depends on the full solution in the domain. The justification provided is false.\n\nVerdict: **Incorrect**\n\n**C. Impose $\\partial \\phi/\\partial n = \\frac{1}{\\Delta t}\\,\\mathbf{n}\\cdot \\mathbf{u}^*$ on $\\Gamma_o$ for the PPE so that $\\mathbf{n}\\cdot \\mathbf{u}^{n+1} = 0$ after correction, thereby achieving the zero-gradient outflow condition.**\n\nLet us examine the consequence of the proposed boundary condition for $\\phi$. Substituting $\\frac{\\partial \\phi}{\\partial n} = \\frac{1}{\\Delta t}\\mathbf{n} \\cdot \\mathbf{u}^*$ into the normal velocity correction equation:\n$$\n\\mathbf{n} \\cdot \\mathbf{u}^{n+1} = \\mathbf{n} \\cdot \\mathbf{u}^* - \\Delta t \\left( \\frac{1}{\\Delta t}\\mathbf{n} \\cdot \\mathbf{u}^* \\right) = \\mathbf{n} \\cdot \\mathbf{u}^* - \\mathbf{n} \\cdot \\mathbf{u}^* = 0\n$$\nThis procedure enforces $\\mathbf{n} \\cdot \\mathbf{u}^{n+1} = 0$ on the boundary. This is a condition for an impermeable wall (zero normal velocity), not a zero-gradient outflow condition. The problem asks for $(\\mathbf{n} \\cdot \\nabla)\\mathbf{u}^{n+1} = \\mathbf{0}$. The option confuses a zero-value condition with a zero-gradient condition.\n\nVerdict: **Incorrect**\n\n**D. Do not modify $\\mathbf{u}^*$ on $\\Gamma_o$ and impose homogeneous Neumann $\\partial \\phi/\\partial n = 0$ for the PPE, relying on the divergence-free projection alone to enforce the intended outflow zero-gradient behavior.**\n\nThis option suggests not applying any explicit boundary condition to the intermediate velocity $\\mathbf{u}^*$ at the outflow boundary. The numerical solution of the advection-diffusion equation for $\\mathbf{u}^*$ requires boundary conditions on all boundaries. Failing to provide one is mathematically ill-posed and, in a discrete setting, will lead to an undefined or unstable computation. The projection step enforces $\\nabla \\cdot \\mathbf{u}^{n+1} = 0$ in the domain interior; it does not magically create a desired boundary condition at the outflow. The behavior at the boundary must be explicitly defined through boundary conditions on both the intermediate velocity equation and the PPE.\n\nVerdict: **Incorrect**", "answer": "$$\\boxed{A}$$", "id": "2428887"}, {"introduction": "The projection step's core purpose is to enforce the incompressibility constraint, which is mathematically equivalent to achieving a divergence-free velocity field. This hands-on coding exercise demonstrates the direct link between the accuracy of the Pressure Poisson Equation solution and the quality of mass conservation in the final flow field [@problem_id:2428935]. By implementing and experimenting with iterative solvers, you will gain a practical appreciation for why a high-quality projection is not just a numerical detail but a cornerstone of physically meaningful incompressible flow simulation.", "problem": "Consider the two-dimensional incompressible flow projection in a periodic square domain. Let the domain be $\\Omega = [0,1] \\times [0,1]$ with periodic boundary conditions in both directions. Let $\\rho > 0$ denote the constant density and $\\nu \\ge 0$ the kinematic viscosity. Let $N \\in \\mathbb{N}$ be the number of uniformly spaced grid points per direction, with grid spacing $h = 1/N$. Use a collocated, cell-centered discretization with the following discrete operators built from second-order central differences with periodic wrapping:\n\n- The discrete gradient $\\nabla_h$ and divergence $\\nabla_h \\cdot$ act componentwise using central differences with stride $h$.\n- The discrete Laplacian $\\Delta_h$ is the standard five-point stencil\n$$\n(\\Delta_h \\phi)_{i,j} = \\frac{\\phi_{i+1,j} + \\phi_{i-1,j} + \\phi_{i,j+1} + \\phi_{i,j-1} - 4 \\phi_{i,j}}{h^2},\n$$\nwith periodic indexing for $(i \\pm 1)$ and $(j \\pm 1)$.\n\nDefine an initial discrete velocity field $u^0 = (u^0_x, u^0_y)$ from a discrete streamfunction $\\psi$ sampled at cell centers $x_j = (j + \\tfrac{1}{2}) h$, $y_i = (i + \\tfrac{1}{2}) h$ by\n$$\nu^0_x = \\frac{\\partial \\psi}{\\partial y}\\Big|_h, \\quad u^0_y = -\\frac{\\partial \\psi}{\\partial x}\\Big|_h,\n$$\nwhere $\\psi(x,y) = \\sin(2\\pi x)\\sin(2\\pi y)$ and $\\tfrac{\\partial}{\\partial x}\\big|_h$, $\\tfrac{\\partial}{\\partial y}\\big|_h$ are the central-difference operators. This construction yields a discrete field with $\\nabla_h \\cdot u^0 = 0$.\n\nLet $\\phi(x,y) = \\sin(2\\pi x)\\sin(2\\pi y)$ be a discrete scalar potential sampled at the same grid points, and define a discrete forcing $f = (f_x,f_y)$ as the discrete gradient $f = \\alpha \\nabla_h \\phi$ with some scalar amplitude $\\alpha \\in \\mathbb{R}$. Consider a single explicit fractional step with time step $\\Delta t > 0$:\n- Tentative velocity\n$$\nu^\\star = u^0 + \\Delta t\\left(\\nu\\, \\Delta_h u^0 + f\\right).\n$$\n- Pressure update by the discrete Poisson equation\n$$\n\\Delta_h p^{1} = \\frac{\\rho}{\\Delta t}\\, \\nabla_h \\cdot u^\\star,\n$$\nwith periodic boundary conditions and the additional constraint that the discrete mean of $p^{1}$ over the grid is zero.\n- Velocity correction\n$$\nu^{1} = u^\\star - \\frac{\\Delta t}{\\rho}\\, \\nabla_h p^{1}.\n$$\n\nThe quality of mass conservation after the projection is quantified by the discrete $L^2$ norm of the divergence of the corrected velocity,\n$$\nE = \\left( h^2 \\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} \\left[\\left(\\nabla_h \\cdot u^{1}\\right)_{i,j}\\right]^2 \\right)^{1/2}.\n$$\n\nIn practice, $p^{1}$ is computed by an iterative solver applied to the linear system $\\Delta_h p^{1} = \\tfrac{\\rho}{\\Delta t}\\, \\nabla_h \\cdot u^\\star$. In this task, $p^{1}$ must be approximated by applying exactly $k \\in \\mathbb{N}$ sweeps of either:\n- the pointwise Jacobi iteration,\n- or the pointwise Gauss–Seidel iteration,\nfor the five-point Laplacian with periodic neighbors, starting from the zero initial guess and enforcing zero mean for $p^{1}$ after each sweep.\n\nYour program must:\n- Implement the operators $\\nabla_h$, $\\nabla_h \\cdot$, and $\\Delta_h$ as defined above with periodic boundary conditions.\n- Build $u^0$ from $\\psi$ as above, and $f$ from $\\phi$ as above.\n- Form $u^\\star$, assemble the right-hand side $\\tfrac{\\rho}{\\Delta t}\\, \\nabla_h \\cdot u^\\star$, and compute $p^1$ using exactly $k$ iterations of the specified iterative method with mean-zero enforcement after each sweep.\n- Compute $u^{1}$ and the mass conservation error $E$.\n\nUse the following test suite, where each case is specified as a tuple $(N, \\Delta t, \\nu, \\rho, \\alpha, k, \\text{solver})$:\n- Case $1$: $(N, \\Delta t, \\nu, \\rho, \\alpha, k, \\text{solver}) = (32, 0.01, 0.01, 1.0, 1.0, 1, \\text{\"jacobi\"})$.\n- Case $2$: $(32, 0.01, 0.01, 1.0, 1.0, 20, \\text{\"jacobi\"})$.\n- Case $3$: $(32, 0.01, 0.01, 1.0, 1.0, 2000, \\text{\"jacobi\"})$.\n- Case $4$: $(32, 0.01, 0.01, 1.0, 1.0, 20, \\text{\"gauss-seidel\"})$.\n- Case $5$: $(8, 0.01, 0.01, 1.0, 1.0, 100, \\text{\"jacobi\"})$.\n\nAll physical and numerical quantities are nondimensional. The final output of your program must be a single line containing a Python-style list with the $5$ floating-point results $E$ corresponding to the cases above, in the same order, each formatted in scientific notation with exactly six significant digits. For example, the required format is $[a,b,c,d,e]$ where each of $a,b,c,d,e$ is printed as in $\\texttt{1.234567e-03}$.\n\nYour program must produce exactly one line of output in this format and must not read any input.", "solution": "The solution is implemented following these structured steps:\n\n1.  **Discretization and Discrete Operators**\n    The continuous domain $\\Omega = [0,1] \\times [0,1]$ is discretized into a uniform grid of $N \\times N$ cells. The grid spacing is $h = 1/N$. All scalar and vector fields are defined at the cell centers, located at coordinates $(x_j, y_i) = ((j + 0.5)h, (i + 0.5)h)$ for $i,j \\in \\{0, \\dots, N-1\\}$.\n\n    The discrete differential operators with periodic boundary conditions are implemented as follows:\n    -   **Gradient ($\\nabla_h$)**: For a scalar field $\\phi$, the gradient $(\\nabla_h \\phi)_{i,j} = ((\\partial_x \\phi)_h, (\\partial_y \\phi)_h)_{i,j}$ is computed using second-order central differences:\n        $$(\\partial_x \\phi)_h = \\frac{\\phi_{i,j+1} - \\phi_{i,j-1}}{2h}, \\quad (\\partial_y \\phi)_h = \\frac{\\phi_{i+1,j} - \\phi_{i-1,j}}{2h}$$\n    -   **Divergence ($\\nabla_h \\cdot$)**: For a vector field $u = (u_x, u_y)$, the divergence $(\\nabla_h \\cdot u)_{i,j}$ is:\n        $$(\\nabla_h \\cdot u)_{i,j} = \\frac{(u_x)_{i,j+1} - (u_x)_{i,j-1}}{2h} + \\frac{(u_y)_{i+1,j} - (u_y)_{i-1,j}}{2h}$$\n    -   **Laplacian ($\\Delta_h$)**: For a scalar field $\\phi$, the Laplacian is given by the standard five-point stencil:\n        $$(\\Delta_h \\phi)_{i,j} = \\frac{\\phi_{i+1,j} + \\phi_{i-1,j} + \\phi_{i,j+1} + \\phi_{i,j-1} - 4\\phi_{i,j}}{h^2}$$\n    Periodic indexing (e.g., $\\phi_{N,j} = \\phi_{0,j}$, $\\phi_{i,-1} = \\phi_{i,N-1}$) is used for all operators.\n\n2.  **State Initialization**\n    -   An initial velocity field $u^0$ is constructed from a discrete streamfunction $\\psi = \\sin(2\\pi x)\\sin(2\\pi y)$ to ensure it is discretely divergence-free ($\\nabla_h \\cdot u^0 = 0$). The components are defined as:\n        $$u^0_x = \\frac{\\partial \\psi}{\\partial y}\\Big|_h, \\quad u^0_y = -\\frac{\\partial \\psi}{\\partial x}\\Big|_h$$\n    -   A forcing term $f$ is defined as the gradient of a scalar potential $\\phi = \\sin(2\\pi x)\\sin(2\\pi y)$ with amplitude $\\alpha$:\n        $$f = \\alpha \\nabla_h \\phi$$\n\n3.  **The Fractional-Step Algorithm**\n    A single time step of the projection method consists of three main parts:\n    -   **Prediction Step**: A tentative velocity field $u^\\star$ is computed by advancing the momentum equation forward in time with an explicit Euler step. This step incorporates the viscous and forcing terms but omits the unknown pressure gradient term.\n        $$u^\\star = u^0 + \\Delta t\\left(\\nu\\, \\Delta_h u^0 + f\\right)$$\n        The resulting field $u^\\star$ is not, in general, divergence-free.\n\n    -   **Projection Step**: This step enforces the incompressibility constraint by projecting $u^\\star$ onto the space of divergence-free fields. This is accomplished by finding a pressure-like field $p^1$ that corrects the velocity. The field $p^1$ is the solution to the discrete Poisson equation:\n        $$\\Delta_h p^{1} = \\frac{\\rho}{\\Delta t}\\, \\nabla_h \\cdot u^\\star$$\n        This equation is derived by enforcing the condition $\\nabla_h \\cdot u^1 = 0$ on the corrected velocity $u^1 = u^\\star - \\frac{\\Delta t}{\\rho} \\nabla_h p^1$. On a periodic domain, the operator $\\Delta_h$ is singular. A unique solution for $p^1$ is obtained by imposing the constraint that its discrete spatial mean is zero, i.e., $\\sum_{i,j} p^1_{i,j} = 0$.\n\n        The linear system for $p^1$ is solved approximately using exactly $k$ iterations of one of the following methods, starting from an initial guess of $p^1=0$:\n        -   **Pointwise Jacobi Iteration**: An explicit update rule where the value at each grid point for the next iteration, $p^{n+1}$, depends only on the values from the current iteration, $p^n$. The update for grid point $(i,j)$ is:\n            $$p_{i,j}^{n+1} = \\frac{1}{4}\\left( p_{i+1,j}^n + p_{i-1,j}^n + p_{i,j+1}^n + p_{i,j-1}^n - h^2 (\\tfrac{\\rho}{\\Delta t} \\nabla_h \\cdot u^\\star)_{i,j} \\right)$$\n        -   **Pointwise Gauss-Seidel Iteration**: An implicit update rule where the calculation at each grid point immediately uses the newest available values from the current iteration. For a raster-scan order, the update is:\n            $$p_{i,j}^{n+1} = \\frac{1}{4}\\left( p_{i-1,j}^{n+1} + p_{i,j-1}^{n+1} + p_{i+1,j}^n + p_{i,j+1}^n - h^2 (\\tfrac{\\rho}{\\Delta t} \\nabla_h \\cdot u^\\star)_{i,j} \\right)$$\n        After each iteration (sweep), the zero-mean constraint is enforced by subtracting the mean value from the pressure field.\n\n    -   **Correction Step**: The final velocity field $u^1$ for the time step is obtained by correcting the tentative velocity $u^\\star$ using the gradient of the computed pressure $p^1$:\n        $$u^{1} = u^\\star - \\frac{\\Delta t}{\\rho}\\, \\nabla_h p^{1}$$\n        By construction, this field $u^1$ better approximates the divergence-free condition.\n\n4.  **Error Quantification**\n    The quality of mass conservation is measured by the discrete $L^2$-norm of the divergence of the final velocity field $u^1$. The error $E$ is calculated as:\n    $$E = \\left( h^2 \\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} \\left[\\left(\\nabla_h \\cdot u^{1}\\right)_{i,j}\\right]^2 \\right)^{1/2}$$\n    A smaller value of $E$ indicates a more accurate enforcement of the incompressibility constraint. The provided program implements this complete algorithm to compute $E$ for each test case.", "answer": "```python\nimport numpy as np\n\ndef grad(phi, h):\n    \"\"\"Computes the 2D gradient of a scalar field using central differences.\"\"\"\n    dphi_dx = (np.roll(phi, -1, axis=1) - np.roll(phi, 1, axis=1)) / (2 * h)\n    dphi_dy = (np.roll(phi, -1, axis=0) - np.roll(phi, 1, axis=0)) / (2 * h)\n    return dphi_dx, dphi_dy\n\ndef div(u, h):\n    \"\"\"Computes the 2D divergence of a vector field using central differences.\"\"\"\n    ux, uy = u\n    dux_dx = (np.roll(ux, -1, axis=1) - np.roll(ux, 1, axis=1)) / (2 * h)\n    duy_dy = (np.roll(uy, -1, axis=0) - np.roll(uy, 1, axis=0)) / (2 * h)\n    return dux_dx + duy_dy\n\ndef laplace(phi, h):\n    \"\"\"Computes the 2D Laplacian of a scalar field using a five-point stencil.\"\"\"\n    return (np.roll(phi, 1, axis=0) + np.roll(phi, -1, axis=0) +\n            np.roll(phi, 1, axis=1) + np.roll(phi, -1, axis=1) - 4 * phi) / h**2\n\ndef jacobi_sweep(p, b, h):\n    \"\"\"Performs one sweep of the Jacobi iteration for the Poisson equation.\"\"\"\n    p_new = 0.25 * (np.roll(p, 1, axis=0) + np.roll(p, -1, axis=0) +\n                    np.roll(p, 1, axis=1) + np.roll(p, -1, axis=1) - h**2 * b)\n    return p_new\n\ndef gauss_seidel_sweep(p, b, h):\n    \"\"\"Performs one sweep of the Gauss-Seidel iteration using raster scan.\"\"\"\n    N = p.shape[0]\n    # This function modifies p in place\n    for i in range(N):\n        for j in range(N):\n            # Neighbors are accessed from the single array 'p'. For a raster scan,\n            # (i-1) and (j-1) elements have already been updated in this sweep.\n            neighbors = (p[(i - 1) % N, j] + p[(i + 1) % N, j] +\n                         p[i, (j - 1) % N] + p[i, (j + 1) % N])\n            p[i, j] = 0.25 * (neighbors - h**2 * b[i, j])\n    return p\n\ndef run_simulation(N, dt, nu, rho, alpha, k, solver_type):\n    \"\"\"\n    Executes one full fractional-step simulation and returns the divergence error E.\n    \"\"\"\n    # 1. Grid setup\n    h = 1.0 / N\n    x = (np.arange(N) + 0.5) * h\n    y = (np.arange(N) + 0.5) * h\n    # Use 'xy' indexing for standard matrix layout: array[i, j] -> (y_i, x_j)\n    xx, yy = np.meshgrid(x, y, indexing='xy')\n\n    # 2. Initial and Forcing Fields\n    psi = np.sin(2 * np.pi * xx) * np.sin(2 * np.pi * yy)\n    grad_psi_x, grad_psi_y = grad(psi, h)\n    u0x = grad_psi_y\n    u0y = -grad_psi_x\n    u0 = (u0x, u0y)\n\n    phi = np.sin(2 * np.pi * xx) * np.sin(2 * np.pi * yy)\n    grad_phi_x, grad_phi_y = grad(phi, h)\n    fx = alpha * grad_phi_x\n    fy = alpha * grad_phi_y\n    f = (fx, fy)\n\n    # 3. Tentative Velocity (Prediction Step)\n    lap_u0x = laplace(u0x, h)\n    lap_u0y = laplace(u0y, h)\n    u_star_x = u0x + dt * (nu * lap_u0x + fx)\n    u_star_y = u0y + dt * (nu * lap_u0y + fy)\n    u_star = (u_star_x, u_star_y)\n\n    # 4. Pressure Poisson (Projection Step)\n    div_u_star = div(u_star, h)\n    poisson_rhs = (rho / dt) * div_u_star\n    \n    p1 = np.zeros((N, N))\n    if solver_type == \"jacobi\":\n        for _ in range(k):\n            p1 = jacobi_sweep(p1, poisson_rhs, h)\n            p1 -= np.mean(p1)  # Enforce zero mean\n    elif solver_type == \"gauss-seidel\":\n        for _ in range(k):\n            p1 = gauss_seidel_sweep(p1, poisson_rhs, h)\n            p1 -= np.mean(p1)  # Enforce zero mean\n            \n    # 5. Velocity Correction\n    grad_p1_x, grad_p1_y = grad(p1, h)\n    u1_x = u_star_x - (dt / rho) * grad_p1_x\n    u1_y = u_star_y - (dt / rho) * grad_p1_y\n    u1 = (u1_x, u1_y)\n\n    # 6. Error Calculation\n    div_u1 = div(u1, h)\n    error_E = np.sqrt(h**2 * np.sum(np.square(div_u1)))\n    \n    return error_E\n\ndef solve():\n    test_cases = [\n        # (N, Δt, ν, ρ, α, k, solver)\n        (32, 0.01, 0.01, 1.0, 1.0, 1, \"jacobi\"),\n        (32, 0.01, 0.01, 1.0, 1.0, 20, \"jacobi\"),\n        (32, 0.01, 0.01, 1.0, 1.0, 2000, \"jacobi\"),\n        (32, 0.01, 0.01, 1.0, 1.0, 20, \"gauss-seidel\"),\n        (8, 0.01, 0.01, 1.0, 1.0, 100, \"jacobi\"),\n    ]\n\n    results = []\n    for case in test_cases:\n        E = run_simulation(*case)\n        results.append(E)\n\n    formatted_results = [f\"{res:.5e}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2428935"}]}