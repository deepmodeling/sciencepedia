{"hands_on_practices": [{"introduction": "The first step in any time-domain simulation is to establish a valid initial state. This exercise emphasizes a crucial, yet often overlooked, requirement: the governing equation of motion must be satisfied at every instant, including the very beginning of the simulation at $t=0^+$. This practice will guide you in calculating the correct initial acceleration, demonstrating that it is not an arbitrary parameter but is uniquely determined by the system's properties and the forces acting upon it at that moment [@problem_id:2446585].", "problem": "A single degree of freedom (SDOF) linear structural oscillator with mass $m$, viscous damping coefficient $c$, and linear stiffness $k$ is subjected to an external force $f(t)$. Its motion $u(t)$ satisfies the second-order ordinary differential equation of motion\n$$\nm\\,\\ddot{u}(t) + c\\,\\dot{u}(t) + k\\,u(t) = f(t).\n$$\nThe system is to be advanced in time using the Newmark–$\\beta$ time integration method to simulate the response for $t \\ge 0$. At $t=0^{-}$ (immediately before loading), the state is known and given by $u(0^{-}) = u_0$ and $\\dot{u}(0^{-}) = v_0$. At $t=0^{+}$ (immediately after loading is applied), there are no impulsive forces.\n\nData:\n- $m = 2\\ \\mathrm{kg}$,\n- $c = 3\\ \\mathrm{N\\cdot s/m}$,\n- $k = 50\\ \\mathrm{N/m}$,\n- $f(t) = 0\\ \\mathrm{N}$ for $t < 0$, and $f(t) = 10\\ \\mathrm{N}$ for $t \\ge 0$,\n- $u_0 = 0.10\\ \\mathrm{m}$,\n- $v_0 = -0.20\\ \\mathrm{m/s}$.\n\nAn engineer mistakenly initializes the simulation with an inconsistent acceleration $\\ddot{u}_0^{\\mathrm{(guess)}} = 0\\ \\mathrm{m/s^2}$. Determine the correct initial acceleration $\\ddot{u}_0$ required to start the Newmark–$\\beta$ simulation consistently at $t=0^{+}$.\n\nProvide your answer as a single real number in $\\mathrm{m/s^2}$. Report the exact value (no rounding).", "solution": "The problem statement is subjected to validation.\n\nStep 1: Extract Givens.\n- The equation of motion for the single degree of freedom (SDOF) system is $m\\,\\ddot{u}(t) + c\\,\\dot{u}(t) + k\\,u(t) = f(t)$.\n- Mass: $m = 2\\ \\mathrm{kg}$.\n- Damping coefficient: $c = 3\\ \\mathrm{N\\cdot s/m}$.\n- Stiffness: $k = 50\\ \\mathrm{N/m}$.\n- External force: $f(t) = 0\\ \\mathrm{N}$ for $t < 0$, and $f(t) = 10\\ \\mathrm{N}$ for $t \\ge 0$.\n- Initial displacement at $t=0^{-}$: $u(0^{-}) = u_0 = 0.10\\ \\mathrm{m}$.\n- Initial velocity at $t=0^{-}$: $\\dot{u}(0^{-}) = v_0 = -0.20\\ \\mathrm{m/s}$.\n- Condition: No impulsive forces at $t=0$.\n- The objective is to determine the correct initial acceleration $\\ddot{u}_0$ at $t=0^{+}$.\n\nStep 2: Validate Using Extracted Givens.\n- The problem is **scientifically grounded** as it is based on the fundamental linear second-order ordinary differential equation governing a damped mechanical oscillator, a cornerstone of classical mechanics and structural dynamics.\n- The problem is **well-posed** and **objective**. All necessary parameters and initial conditions are provided with clear, unambiguous numerical values to determine a unique initial acceleration.\n- The problem is **complete and consistent**. The statement \"no impulsive forces\" is a standard condition in structural dynamics, implying that displacement and velocity are continuous across the time origin, which is essential for solving the problem.\n- The given numerical values are physically plausible.\n- The problem does not violate any of the invalidity criteria.\n\nStep 3: Verdict and Action.\nThe problem is deemed **valid**. A solution will be provided.\n\nThe fundamental principle is that the equation of motion must be satisfied at every instant in time for which it is defined, including the initial instant $t=0^{+}$. Any valid numerical integration scheme, such as the Newmark–$\\beta$ method, must start with an initial state vector $(u(0^{+}), \\dot{u}(0^{+}), \\ddot{u}(0^{+}))$ that is consistent with the governing differential equation.\n\nThe governing equation is:\n$$m\\,\\ddot{u}(t) + c\\,\\dot{u}(t) + k\\,u(t) = f(t)$$\nThis equation must hold at $t=0^{+}$. We write it as:\n$$m\\,\\ddot{u}(0^{+}) + c\\,\\dot{u}(0^{+}) + k\\,u(0^{+}) = f(0^{+})$$\nThe problem states that there are no impulsive forces acting on the system at $t=0$. In the context of mechanical systems, this implies that the state variables that store energy, namely displacement (potential energy in the spring) and velocity (kinetic energy of the mass), cannot change instantaneously. Therefore, displacement and velocity are continuous across $t=0$.\n$$u(0^{+}) = u(0^{-}) = u_0 = 0.10\\ \\mathrm{m}$$\n$$\\dot{u}(0^{+}) = \\dot{u}(0^{-}) = v_0 = -0.20\\ \\mathrm{m/s}$$\nThe external force is given as $f(t) = 10\\ \\mathrm{N}$ for $t \\ge 0$. Thus, at the instant immediately after $t=0$, the force is:\n$$f(0^{+}) = 10\\ \\mathrm{N}$$\nThe unknown quantity is the initial acceleration, which we denote as $\\ddot{u}_0 = \\ddot{u}(0^{+})$. We can solve for this by rearranging the equation of motion:\n$$\\ddot{u}_0 = \\frac{1}{m} \\left[ f(0^{+}) - c\\,\\dot{u}(0^{+}) - k\\,u(0^{+}) \\right]$$\nNow, we substitute the provided numerical values into this expression.\n- $m = 2\\ \\mathrm{kg}$\n- $c = 3\\ \\mathrm{N\\cdot s/m}$\n- $k = 50\\ \\mathrm{N/m}$\n- $f(0^{+}) = 10\\ \\mathrm{N}$\n- $u(0^{+}) = 0.10\\ \\mathrm{m}$\n- $\\dot{u}(0^{+}) = -0.20\\ \\mathrm{m/s}$\n\nThe calculation proceeds as follows:\n$$\\ddot{u}_0 = \\frac{1}{2} \\left[ 10 - (3)(-0.20) - (50)(0.10) \\right]$$\n$$\\ddot{u}_0 = \\frac{1}{2} \\left[ 10 - (-0.6) - 5 \\right]$$\n$$\\ddot{u}_0 = \\frac{1}{2} \\left[ 10 + 0.6 - 5 \\right]$$\n$$\\ddot{u}_0 = \\frac{1}{2} \\left[ 5.6 \\right]$$\n$$\\ddot{u}_0 = 2.8\\ \\mathrm{m/s^2}$$\nThis is the correct initial acceleration required for a consistent start to the simulation. The engineer's guess of $\\ddot{u}_0^{\\mathrm{(guess)}} = 0\\ \\mathrm{m/s^2}$ is incorrect because it does not satisfy the equation of motion at $t=0^{+}$. Using an inconsistent initial acceleration would introduce a non-physical transient into the numerical solution.", "answer": "$$\n\\boxed{2.8}\n$$", "id": "2446585"}, {"introduction": "A numerical simulation can only be as accurate as the data it is given, and this includes the representation of external forces. This problem explores the critical signal processing concept of aliasing, which occurs when a continuous signal is sampled at a rate too low to capture its high-frequency content. You will investigate how this can lead the numerical solver to \"see\" a phantom low-frequency force, potentially causing misleading results like spurious resonance [@problem_id:2446581]. Understanding aliasing is essential for correctly interpreting the results of any discrete-time simulation.", "problem": "A Single Degree of Freedom (SDOF) linear oscillator with mass $m$, viscous damping coefficient $c$, and stiffness $k$ satisfies $m \\ddot{u}(t)+c \\dot{u}(t)+k u(t)=p(t)$. Consider $m=1\\,\\mathrm{kg}$, $k=\\left(2\\pi \\cdot 5\\right)^{2}\\,\\mathrm{N/m}$ (so the natural frequency is $f_n=5\\,\\mathrm{Hz}$, with circular frequency $\\omega_n=2\\pi f_n$), and damping ratio $\\zeta=0.02$, so that $c=2 \\zeta m \\omega_n$. The system is subjected to a harmonic force $p(t)=P_0 \\sin\\!\\left(2\\pi f\\, t\\right)$ with $P_0=1\\,\\mathrm{N}$ and $f=63\\,\\mathrm{Hz}$. The equation of motion is integrated numerically using the Newmark–$\\beta$ method with parameters $\\beta=1/4$ and $\\gamma=1/2$, a uniform time step $\\Delta t=0.01\\,\\mathrm{s}$, and initial conditions $u(0)=0$, $\\dot{u}(0)=0$. Assume a long integration so that a steady-state response is observed. Define the sampling frequency $f_s=1/\\Delta t$ and the Nyquist frequency $f_N=1/(2\\Delta t)$.\n\nWhich of the following statements about the numerically computed displacement response are correct?\n\nA. Under sampling at $f_s=100\\,\\mathrm{Hz}$, the sinusoidal input at $f=63\\,\\mathrm{Hz}$ is indistinguishable from a sinusoid at $f_a=|f-f_s|=37\\,\\mathrm{Hz}$; therefore, the computed displacement will exhibit a component at approximately $37\\,\\mathrm{Hz}$ rather than at $63\\,\\mathrm{Hz}$.\n\nB. Because the Newmark–$\\beta$ method with $\\beta=1/4$, $\\gamma=1/2$ is unconditionally stable, aliasing cannot occur; with the given data the steady-state displacement due to the $63\\,\\mathrm{Hz}$ input is identically zero (apart from transients).\n\nC. If the time step is reduced to $\\Delta t=0.002\\,\\mathrm{s}$ (so $f_s=500\\,\\mathrm{Hz}$ and $f_N=250\\,\\mathrm{Hz}$), aliasing of the $63\\,\\mathrm{Hz}$ input would be eliminated.\n\nD. Increasing the damping ratio to $\\zeta=0.20$ while keeping $\\Delta t=0.01\\,\\mathrm{s}$ would remove aliasing by suppressing all content above $f_N$ so that no aliased component appears in the discrete-time solution.\n\nE. If $\\Delta t$ were chosen so that the aliased frequency of a high-frequency input fell near $f_n$, the Newmark solution could show a large near-resonant amplitude even though the true continuous-time excitation is far from resonance.\n\nSelect all that apply.", "solution": "The problem statement is parsed and validated. All provided parameters and conditions are scientifically and mathematically sound. The problem is well-posed and concerns standard concepts in computational structural dynamics, specifically the interaction of the Newmark-$\\beta$ time integration scheme with signal sampling theory. No inconsistencies or flaws are found. The problem is valid.\n\nThe central issue of this problem is aliasing. Aliasing occurs when a continuous-time signal is sampled at a frequency $f_s$ that is insufficient to capture its highest frequency components. According to the Nyquist-Shannon sampling theorem, a signal with maximum frequency $f_{\\max}$ must be sampled at a rate $f_s > 2 f_{\\max}$ to avoid aliasing. The frequency $f_N = f_s / 2$ is known as the Nyquist frequency. If a sinusoidal component with frequency $f > f_N$ is sampled, it becomes indistinguishable from a lower-frequency sinusoid, its alias, with frequency $f_a$ in the range $[0, f_N]$. The alias frequency is given by $f_a = \\min_{k \\in \\mathbb{Z}} |f - k f_s|$.\n\nIn the initial setup, the forcing frequency is $f=63\\,\\mathrm{Hz}$. The time step is $\\Delta t = 0.01\\,\\mathrm{s}$, which corresponds to a sampling frequency of $f_s = 1/\\Delta t = 100\\,\\mathrm{Hz}$. The Nyquist frequency is therefore $f_N = f_s/2 = 50\\,\\mathrm{Hz}$.\n\nSince $f = 63\\,\\mathrm{Hz} > f_N = 50\\,\\mathrm{Hz}$, the input signal is undersampled, and aliasing will occur. The numerical integrator operates on the discrete samples of the forcing function $p(t)$, which are $p_i = p(i\\Delta t)$. The sequence $\\{p_i\\}$ will therefore represent an aliased signal. The aliased frequency is calculated as:\n$$ f_a = \\min_{k \\in \\mathbb{Z}} |f - k f_s| = |63\\,\\mathrm{Hz} - 1 \\cdot 100\\,\\mathrm{Hz}| = |-37\\,\\mathrm{Hz}| = 37\\,\\mathrm{Hz} $$\nThe numerical algorithm thus solves the equation of motion for a system subjected to a sinusoidal forcing at $37\\,\\mathrm{Hz}$, not $63\\,\\mathrm{Hz}$. The system is linear, so the steady-state response will also be at this aliased frequency.\n\nThe specified Newmark–$\\beta$ method parameters are $\\beta=1/4$ and $\\gamma=1/2$. This corresponds to the constant average acceleration method, which is known to be unconditionally stable for linear systems. However, stability only ensures that the numerical solution remains bounded; it does not prevent inaccuracies such as period elongation, amplitude decay, or the effects of input aliasing.\n\nWe now evaluate each statement.\n\nA. Under sampling at $f_s=100\\,\\mathrm{Hz}$, the sinusoidal input at $f=63\\,\\mathrm{Hz}$ is indistinguishable from a sinusoid at $f_a=|f-f_s|=37\\,\\mathrm{Hz}$; therefore, the computed displacement will exhibit a component at approximately $37\\,\\mathrm{Hz}$ rather than at $63\\,\\mathrm{Hz}$.\nAs derived above, the sampling process aliases the $f=63\\,\\mathrm{Hz}$ input frequency to $f_a = 37\\,\\mathrm{Hz}$. The numerical integrator is fed the discrete values of the load, $p_i = P_0 \\sin(2\\pi f i \\Delta t)$. This sequence of values is mathematically identical to the sampled values of a sinusoid with frequency $f_a$ (with a possible phase shift, in this case $-\\sin(2\\pi f_a i \\Delta t)$). The linear system will respond at the frequency of its excitation. Therefore, the numerically computed steady-state displacement will oscillate at a frequency very close to the aliased frequency of $37\\,\\mathrm{Hz}$. The word \"approximately\" correctly accounts for minor numerical period errors inherent to the integration scheme, which, while zero for this specific method in the undamped case, can be present in damped systems. The core of the statement is correct.\nVerdict: **Correct**.\n\nB. Because the Newmark–$\\beta$ method with $\\beta=1/4$, $\\gamma=1/2$ is unconditionally stable, aliasing cannot occur; with the given data the steady-state displacement due to the $63\\,\\mathrm{Hz}$ input is identically zero (apart from transients).\nThis statement is incorrect on two fundamental points. First, unconditional stability of a numerical method has no bearing on whether aliasing of the input signal occurs. Aliasing is a consequence of sampling a continuous signal below the Nyquist rate. It is a signal processing phenomenon that precedes the numerical integration step. Second, the effective input to the numerical scheme is a sinusoid at $37\\,\\mathrm{Hz}$. A linear damped oscillator subjected to a sinusoidal force will exhibit a non-zero steady-state sinusoidal response. The displacement is certainly not identically zero.\nVerdict: **Incorrect**.\n\nC. If the time step is reduced to $\\Delta t=0.002\\,\\mathrm{s}$ (so $f_s=500\\,\\mathrm{Hz}$ and $f_N=250\\,\\mathrm{Hz}$), aliasing of the $63\\,\\mathrm{Hz}$ input would be eliminated.\nWith the new time step $\\Delta t = 0.002\\,\\mathrm{s}$, the sampling frequency becomes $f_s = 1/\\Delta t = 500\\,\\mathrm{Hz}$. The Nyquist frequency is $f_N = f_s/2 = 250\\,\\mathrm{Hz}$. The input frequency is $f = 63\\,\\mathrm{Hz}$. Since $f < f_N$ (or, equivalently, $f_s > 2f$), the Nyquist-Shannon sampling criterion is satisfied. The sampling process will correctly capture the $63\\,\\mathrm{Hz}$ sinusoid without aliasing.\nVerdict: **Correct**.\n\nD. Increasing the damping ratio to $\\zeta=0.20$ while keeping $\\Delta t=0.01\\,\\mathrm{s}$ would remove aliasing by suppressing all content above $f_N$ so that no aliased component appears in the discrete-time solution.\nThis statement fundamentally misinterprets the cause of aliasing. Aliasing is determined by the properties of the *input signal* $p(t)$ and the *sampling process* ($\\Delta t$), not by the physical properties of the system being modeled (such as the damping coefficient $c$). The numerical method solves for the response to the discrete force sequence $\\{p_i\\}$, and this sequence is already aliased regardless of the value of $\\zeta$. Increasing damping will reduce the amplitude of the computed response to the aliased $37\\,\\mathrm{Hz}$ input, but it will not \"remove aliasing\" itself. The phenomenon of aliasing has already occurred at the input stage.\nVerdict: **Incorrect**.\n\nE. If $\\Delta t$ were chosen so that the aliased frequency of a high-frequency input fell near $f_n$, the Newmark solution could show a large near-resonant amplitude even though the true continuous-time excitation is far from resonance.\nThis describes a dangerous consequence of aliasing in numerical simulation. The natural frequency of the system is $f_n = 5\\,\\mathrm{Hz}$. Let us consider a high-frequency input, for instance $f_{true} = 105\\,\\mathrm{Hz}$, which is far from resonance. If we choose a sampling frequency $f_s = 100\\,\\mathrm{Hz}$ (i.e., $\\Delta t = 0.01\\,\\mathrm{s}$), the aliased frequency will be $f_a = |f_{true} - f_s| = |105\\,\\mathrm{Hz} - 100\\,\\mathrm{Hz}| = 5\\,\\mathrm{Hz}$. The numerical integrator will then be solving for the response of the system to an excitation at its natural frequency, $f_n = 5\\,\\mathrm{Hz}$. Given the low damping ($\\zeta=0.02$), this will produce a very large, resonant response in the numerical solution. This numerical result would be completely spurious, as the true system response to a $105\\,\\mathrm{Hz}$ forcing would be small in amplitude. The statement correctly identifies this possibility.\nVerdict: **Correct**.", "answer": "$$\\boxed{ACE}$$", "id": "2446581"}, {"introduction": "Many structural systems are numerically \"stiff,\" characterized by components that respond at widely different time scales. This hands-on coding exercise challenges you to compare the implicit, unconditionally stable Newmark-β method against the explicit, conditionally stable Runge-Kutta method for such a system [@problem_id:2446625]. Through implementation, you will gain practical insight into why implicit methods are often the tool of choice for structural dynamics, as they can remain stable even with time steps that are much larger than the fastest period of vibration in the system.", "problem": "Consider the homogeneous linear structural dynamics initial value problem in two degrees of freedom given by the second-order ordinary differential equation\n$$\n\\mathbf{M}\\,\\ddot{\\mathbf{x}}(t) + \\mathbf{C}\\,\\dot{\\mathbf{x}}(t) + \\mathbf{K}\\,\\mathbf{x}(t) = \\mathbf{0},\n$$\nwith initial conditions\n$$\n\\mathbf{x}(0) = \\mathbf{x}_0,\\quad \\dot{\\mathbf{x}}(0) = \\mathbf{v}_0,\n$$\nwhere $\\mathbf{M} \\in \\mathbb{R}^{2\\times 2}$ is the mass matrix, $\\mathbf{C} \\in \\mathbb{R}^{2\\times 2}$ is the viscous damping matrix, and $\\mathbf{K} \\in \\mathbb{R}^{2\\times 2}$ is the stiffness matrix. Use the following modeling assumptions for all test cases:\n- $\\mathbf{M} = \\mathbf{I}_2$ (the $2\\times 2$ identity matrix) with units $\\mathrm{kg}$.\n- $\\mathbf{K} = \\mathrm{diag}(\\omega_1^2,\\ \\omega_2^2)$ with units $\\mathrm{N/m}$, where $\\omega_1$ and $\\omega_2$ are angular natural frequencies in $\\mathrm{rad/s}$.\n- $\\mathbf{C} = \\mathrm{diag}(2\\zeta_1 \\omega_1,\\ 2\\zeta_2 \\omega_2)$ with units $\\mathrm{N\\cdot s/m}$, where $\\zeta_1$ and $\\zeta_2$ are modal damping ratios (dimensionless).\n- All displacements are in $\\mathrm{m}$, velocities in $\\mathrm{m/s}$, time in $\\mathrm{s}$, and angular frequencies in $\\mathrm{rad/s}$.\n\nDefine the equivalent first-order system by introducing the state vector $\\mathbf{y}(t) = \\begin{bmatrix} \\mathbf{x}(t) \\\\ \\dot{\\mathbf{x}}(t) \\end{bmatrix} \\in \\mathbb{R}^{4}$ so that\n$$\n\\dot{\\mathbf{y}}(t) = \\mathbf{A}\\,\\mathbf{y}(t),\\quad \\mathbf{A} = \\begin{bmatrix} \\mathbf{0} & \\mathbf{I}_2 \\\\ -\\mathbf{M}^{-1}\\mathbf{K} & -\\mathbf{M}^{-1}\\mathbf{C} \\end{bmatrix} = \\begin{bmatrix} \\mathbf{0} & \\mathbf{I}_2 \\\\ -\\mathbf{K} & -\\mathbf{C} \\end{bmatrix},\\quad \\mathbf{y}(0)=\\begin{bmatrix}\\mathbf{x}_0\\\\\\mathbf{v}_0\\end{bmatrix}.\n$$\nThe exact reference solution at time $t$ is\n$$\n\\mathbf{y}_{\\mathrm{exact}}(t) = \\exp(\\mathbf{A}\\,t)\\,\\mathbf{y}(0),\n$$\nwhere $\\exp(\\cdot)$ is the matrix exponential.\n\nFor each test case below, compute numerical approximations over a uniform time grid from $t=0$ to $t=T$ with time step $\\Delta t$ using both of the following time integration schemes:\n- Newmark–$\\beta$ method (with the average-acceleration parameters $\\beta=\\tfrac{1}{4}$ and $\\gamma=\\tfrac{1}{2}$) applied directly to the second-order form $\\mathbf{M}\\ddot{\\mathbf{x}}+\\mathbf{C}\\dot{\\mathbf{x}}+\\mathbf{K}\\mathbf{x}=\\mathbf{0}$.\n- The classical four-stage Runge–Kutta method of order $4$ applied to the first-order system $\\dot{\\mathbf{y}}=\\mathbf{A}\\mathbf{y}$.\n\nFor each method in each test case, compute the displacement vector at the final time $T$, denoted $\\mathbf{x}_{\\mathrm{num}}(T)$, and the exact displacement vector $\\mathbf{x}_{\\mathrm{exact}}(T)$ extracted from $\\mathbf{y}_{\\mathrm{exact}}(T)$. Report the Euclidean norm of the displacement error\n$$\ne = \\left\\|\\mathbf{x}_{\\mathrm{num}}(T) - \\mathbf{x}_{\\mathrm{exact}}(T)\\right\\|_2,\n$$\nexpressed in $\\mathrm{m}$ and rounded to $6$ decimal places. Additionally, for the Runge–Kutta method, report a stability indicator defined as follows: compute the maximum Euclidean norm of the state over all time steps,\n$$\n\\max_{0\\le n \\le N} \\left\\|\\mathbf{y}_n\\right\\|_2,\n$$\nwhere $N = T/\\Delta t$ is an integer and $\\mathbf{y}_n$ is the numerical state at time $t_n=n\\Delta t$, and declare the method “stable” if this maximum is less than or equal to $10^6$ times the norm of the initial state, that is,\n$$\n\\max_{0\\le n \\le N} \\left\\|\\mathbf{y}_n\\right\\|_2 \\le 10^6\\,\\left\\|\\mathbf{y}_0\\right\\|_2.\n$$\nUse the following test suite. Each test case specifies $(\\omega_1,\\ \\omega_2,\\ \\zeta_1,\\ \\zeta_2,\\ \\mathbf{x}_0,\\ \\mathbf{v}_0,\\ \\Delta t,\\ T)$:\n- Test case $1$ (stiff, moderate step): $(\\omega_1=\\;1,\\ \\omega_2=\\;100,\\ \\zeta_1=\\;0.01,\\ \\zeta_2=\\;0.01,\\ \\mathbf{x}_0=\\;[0.1,\\ 0.1]\\ \\mathrm{m},\\ \\mathbf{v}_0=\\;[0.0,\\ 0.0]\\ \\mathrm{m/s},\\ \\Delta t=\\;0.01\\ \\mathrm{s},\\ T=\\;1.0\\ \\mathrm{s})$.\n- Test case $2$ (stiff, large step): $(\\omega_1=\\;1,\\ \\omega_2=\\;100,\\ \\zeta_1=\\;0.01,\\ \\zeta_2=\\;0.01,\\ \\mathbf{x}_0=\\;[0.1,\\ 0.1]\\ \\mathrm{m},\\ \\mathbf{v}_0=\\;[0.0,\\ 0.0]\\ \\mathrm{m/s},\\ \\Delta t=\\;0.1\\ \\mathrm{s},\\ T=\\;1.0\\ \\mathrm{s})$.\n- Test case $3$ (non-stiff, moderate step): $(\\omega_1=\\;1,\\ \\omega_2=\\;5,\\ \\zeta_1=\\;0.02,\\ \\zeta_2=\\;0.02,\\ \\mathbf{x}_0=\\;[0.05,\\ -0.05]\\ \\mathrm{m},\\ \\mathbf{v}_0=\\;[0.1,\\ 0.0]\\ \\mathrm{m/s},\\ \\Delta t=\\;0.1\\ \\mathrm{s},\\ T=\\;10.0\\ \\mathrm{s})$.\n\nFor each test case, produce the triple\n$$\n\\left[e_{\\mathrm{Newmark}},\\ e_{\\mathrm{RK4}},\\ b\\right],\n$$\nwhere $e_{\\mathrm{Newmark}}$ is the Newmark–$\\beta$ final-time displacement error (in $\\mathrm{m}$, rounded to $6$ decimal places), $e_{\\mathrm{RK4}}$ is the Runge–Kutta final-time displacement error (in $\\mathrm{m}$, rounded to $6$ decimal places), and $b$ is a Boolean value equal to $\\mathrm{True}$ if and only if the Runge–Kutta method is stable according to the criterion above, and $\\mathrm{False}$ otherwise.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets and with no spaces, in the order of the test cases. For example,\n$$\n\\left[\\left[e_{\\mathrm{Newmark}}^{(1)},e_{\\mathrm{RK4}}^{(1)},b^{(1)}\\right],\\left[e_{\\mathrm{Newmark}}^{(2)},e_{\\mathrm{RK4}}^{(2)},b^{(2)}\\right],\\left[e_{\\mathrm{Newmark}}^{(3)},e_{\\mathrm{RK4}}^{(3)},b^{(3)}\\right]\\right].\n$$\nAll displacement errors must be reported in $\\mathrm{m}$, rounded to $6$ decimal places, and Boolean values must be printed as either $\\mathrm{True}$ or $\\mathrm{False}$.", "solution": "The problem posed is a well-defined initial value problem in linear structural dynamics. It is scientifically sound, self-contained, and all parameters are specified. The task is to compare the performance of two standard time integration schemes, the Newmark-$\\beta$ method and the classical fourth-order Runge-Kutta method, against an exact solution for a $2$-degree-of-freedom system under different conditions of stiffness and time-step size. The problem is valid, and a solution will be provided.\n\nThe analysis proceeds in the following manner: First, the governing equations and the exact analytical solution are detailed. Second, the formulation of each numerical integration scheme is presented. Finally, the implementation strategy to compute the required error metrics and stability indicators for the specified test cases is outlined.\n\n**1. Governing Equations and System Definition**\n\nThe problem concerns a homogeneous linear system described by the second-order ordinary differential equation (ODE):\n$$\n\\mathbf{M}\\,\\ddot{\\mathbf{x}}(t) + \\mathbf{C}\\,\\dot{\\mathbf{x}}(t) + \\mathbf{K}\\,\\mathbf{x}(t) = \\mathbf{0}\n$$\nwith initial conditions $\\mathbf{x}(0) = \\mathbf{x}_0$ and $\\dot{\\mathbf{x}}(0) = \\mathbf{v}_0$. The system matrices are given as:\n- Mass matrix: $\\mathbf{M} = \\mathbf{I}_2 = \\begin{bmatrix} 1 & 0 \\\\ 0 & 1 \\end{bmatrix}\\,\\mathrm{kg}$.\n- Stiffness matrix: $\\mathbf{K} = \\mathrm{diag}(\\omega_1^2, \\omega_2^2)\\,\\mathrm{N/m}$.\n- Damping matrix: $\\mathbf{C} = \\mathrm{diag}(2\\zeta_1 \\omega_1, 2\\zeta_2 \\omega_2)\\,\\mathrm{N\\cdot s/m}$.\n\nSince the matrices $\\mathbf{M}$, $\\mathbf{C}$, and $\\mathbf{K}$ are all diagonal, the system represents two uncoupled, damped, single-degree-of-freedom oscillators.\n\nFor analysis and for the Runge-Kutta integration, the second-order system is converted to a first-order state-space representation. We define the state vector $\\mathbf{y}(t) = \\begin{bmatrix} \\mathbf{x}(t) \\\\ \\dot{\\mathbf{x}}(t) \\end{bmatrix} \\in \\mathbb{R}^{4}$. The dynamics are then governed by the linear system:\n$$\n\\dot{\\mathbf{y}}(t) = \\mathbf{A}\\,\\mathbf{y}(t), \\quad \\mathbf{y}(0) = \\mathbf{y}_0 = \\begin{bmatrix} \\mathbf{x}_0 \\\\ \\mathbf{v}_0 \\end{bmatrix}\n$$\nThe state matrix $\\mathbf{A} \\in \\mathbb{R}^{4\\times 4}$ is constructed as:\n$$\n\\mathbf{A} = \\begin{bmatrix} \\mathbf{0} & \\mathbf{I}_2 \\\\ -\\mathbf{M}^{-1}\\mathbf{K} & -\\mathbf{M}^{-1}\\mathbf{C} \\end{bmatrix} = \\begin{bmatrix} 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\\\ -\\omega_1^2 & 0 & -2\\zeta_1 \\omega_1 & 0 \\\\ 0 & -\\omega_2^2 & 0 & -2\\zeta_2 \\omega_2 \\end{bmatrix}\n$$\n\n**2. Exact Solution**\n\nFor a linear time-invariant system of the form $\\dot{\\mathbf{y}}(t) = \\mathbf{A}\\,\\mathbf{y}(t)$, the exact solution is given by the matrix exponential:\n$$\n\\mathbf{y}_{\\mathrm{exact}}(t) = \\exp(\\mathbf{A}\\,t)\\,\\mathbf{y}_0\n$$\nThe reference displacement vector at the final time $T$, denoted $\\mathbf{x}_{\\mathrm{exact}}(T)$, is obtained by extracting the first two components of the state vector $\\mathbf{y}_{\\mathrm{exact}}(T)$. The matrix exponential $\\exp(\\mathbf{A}\\,T)$ is a well-defined mathematical object and can be computed numerically to high precision.\n\n**3. Numerical Method 1: Newmark–$\\beta$ Method**\n\nThe Newmark-$\\beta$ method is an implicit time integration scheme applied directly to the second-order ODE. The specific parameters given, $\\beta = \\tfrac{1}{4}$ and $\\gamma = \\tfrac{1}{2}$, define the \"average acceleration method,\" which is unconditionally stable for linear systems and has second-order accuracy.\n\nThe algorithm proceeds from a known state $(\\mathbf{x}_n, \\mathbf{v}_n, \\mathbf{a}_n)$ at time $t_n$ to the state at time $t_{n+1} = t_n + \\Delta t$.\n1.  **Initialization**: Given $\\mathbf{x}_0$ and $\\mathbf{v}_0$, compute the initial acceleration $\\mathbf{a}_0$ by solving the equation of motion at $t=0$:\n    $$\n    \\mathbf{M}\\mathbf{a}_0 + \\mathbf{C}\\mathbf{v}_0 + \\mathbf{K}\\mathbf{x}_0 = \\mathbf{0} \\implies \\mathbf{a}_0 = -\\mathbf{M}^{-1}(\\mathbf{C}\\mathbf{v}_0 + \\mathbf{K}\\mathbf{x}_0)\n    $$\n2.  **Time-stepping loop**: For each step $n=0, 1, \\dots, N-1$:\n    a.  **Predictor step**: Calculate predictor values for displacement and velocity.\n        $$\n        \\tilde{\\mathbf{x}}_{n+1} = \\mathbf{x}_n + \\Delta t \\mathbf{v}_n + \\left(\\frac{1}{2}-\\beta\\right)\\Delta t^2 \\mathbf{a}_n\n        $$\n        $$\n        \\tilde{\\mathbf{v}}_{n+1} = \\mathbf{v}_n + (1-\\gamma)\\Delta t \\mathbf{a}_n\n        $$\n    b.  **Solve for acceleration**: The acceleration at the new time step, $\\mathbf{a}_{n+1}$, is found by solving the linear system derived from substituting the Newmark relations into the equation of motion at $t_{n+1}$:\n        $$\n        \\left( \\mathbf{M} + \\gamma \\Delta t \\mathbf{C} + \\beta \\Delta t^2 \\mathbf{K} \\right) \\mathbf{a}_{n+1} = -\\left( \\mathbf{C}\\tilde{\\mathbf{v}}_{n+1} + \\mathbf{K}\\tilde{\\mathbf{x}}_{n+1} \\right)\n        $$\n        The matrix on the left, an effective mass matrix, is constant for a fixed time step $\\Delta t$ and can be factorized once.\n    c.  **Corrector step**: Update the displacement and velocity using the computed $\\mathbf{a}_{n+1}$:\n        $$\n        \\mathbf{x}_{n+1} = \\tilde{\\mathbf{x}}_{n+1} + \\beta \\Delta t^2 \\mathbf{a}_{n+1}\n        $$\n        $$\n        \\mathbf{v}_{n+1} = \\tilde{\\mathbf{v}}_{n+1} + \\gamma \\Delta t \\mathbf{a}_{n+1}\n        $$\nThe process is repeated until the final time $T$ is reached. The final numerical displacement is $\\mathbf{x}_{\\mathrm{num}}(T) = \\mathbf{x}_N$.\n\n**4. Numerical Method 2: Classical Fourth-Order Runge-Kutta (RK4) Method**\n\nThe RK4 method is an explicit scheme applied to the first-order state-space system $\\dot{\\mathbf{y}} = \\mathbf{A}\\mathbf{y}$. From state $\\mathbf{y}_n$ at time $t_n$, the state $\\mathbf{y}_{n+1}$ is computed as:\n$$\n\\mathbf{y}_{n+1} = \\mathbf{y}_n + \\frac{\\Delta t}{6} (\\mathbf{k}_1 + 2\\mathbf{k}_2 + 2\\mathbf{k}_3 + \\mathbf{k}_4)\n$$\nwhere the four stages $\\mathbf{k}_i$ are calculated as:\n$$\n\\begin{aligned}\n\\mathbf{k}_1 &= \\mathbf{A}\\,\\mathbf{y}_n \\\\\n\\mathbf{k}_2 &= \\mathbf{A}\\left(\\mathbf{y}_n + \\frac{\\Delta t}{2}\\mathbf{k}_1\\right) \\\\\n\\mathbf{k}_3 &= \\mathbf{A}\\left(\\mathbf{y}_n + \\frac{\\Delta t}{2}\\mathbf{k}_2\\right) \\\\\n\\mathbf{k}_4 &= \\mathbf{A}\\left(\\mathbf{y}_n + \\Delta t\\mathbf{k}_3\\right)\n\\end{aligned}\n$$\nThis process is repeated for $N = T/\\Delta t$ steps. The final numerical displacement $\\mathbf{x}_{\\mathrm{num}}(T)$ is the first two components of $\\mathbf{y}_N$.\n\nRK4 is conditionally stable. Its stability is governed by the product of the time step $\\Delta t$ and the eigenvalues of the matrix $\\mathbf{A}$. For stiff systems, where the eigenvalues have large-magnitude imaginary parts (corresponding to high frequencies $\\omega$), stability requires a very small $\\Delta t$. This behavior will be tested, particularly in Test cases $1$ and $2$.\n\n**5. Error and Stability Assessment**\n\nFor each method and test case, the displacement error is calculated as the Euclidean norm of the difference between the numerical and exact solutions at the final time $T$:\n$$\ne = \\left\\|\\mathbf{x}_{\\mathrm{num}}(T) - \\mathbf{x}_{\\mathrm{exact}}(T)\\right\\|_2\n$$\nThe stability of the RK4 method is evaluated using the provided criterion. The simulation is deemed \"stable\" if the maximum norm of the state vector over all time steps does not grow excessively relative to the initial norm:\n$$\n\\max_{0\\le n \\le N} \\left\\|\\mathbf{y}_n\\right\\|_2 \\le 10^6\\,\\left\\|\\mathbf{y}_0\\right\\|_2\n$$\nThis condition is checked by monitoring $\\|\\mathbf{y}_n\\|_2$ at each step of the RK4 integration.\n\nThe computational procedure for each test case is as follows:\n1.  Construct matrices $\\mathbf{M}$, $\\mathbf{C}$, $\\mathbf{K}$, and $\\mathbf{A}$ from the given parameters.\n2.  Set initial conditions $\\mathbf{x}_0$, $\\mathbf{v}_0$, and form $\\mathbf{y}_0$.\n3.  Compute $\\mathbf{y}_{\\mathrm{exact}}(T) = \\exp(\\mathbf{A}\\,T)\\,\\mathbf{y}_0$ and extract $\\mathbf{x}_{\\mathrm{exact}}(T)$.\n4.  Execute the Newmark-$\\beta$ integration from $t=0$ to $t=T$ to find $\\mathbf{x}_{\\mathrm{Newmark}}(T)$.\n5.  Execute the RK4 integration from $t=0$ to $t=T$ to find $\\mathbf{x}_{\\mathrm{RK4}}(T)$, while tracking the maximum state norm for the stability check.\n6.  Compute the errors $e_{\\mathrm{Newmark}}$ and $e_{\\mathrm{RK4}}$ and determine the RK4 stability boolean $b$.\n7.  Report the results as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import linalg\n\ndef solve():\n    \"\"\"\n    Solves the structural dynamics problem for three test cases using Newmark-beta\n    and RK4 methods, and calculates errors and stability.\n    \"\"\"\n\n    test_cases = [\n        # (omega1, omega2, zeta1, zeta2, x0, v0, dt, T)\n        (1.0, 100.0, 0.01, 0.01, np.array([0.1, 0.1]), np.array([0.0, 0.0]), 0.01, 1.0),\n        (1.0, 100.0, 0.01, 0.01, np.array([0.1, 0.1]), np.array([0.0, 0.0]), 0.1, 1.0),\n        (1.0, 5.0, 0.02, 0.02, np.array([0.05, -0.05]), np.array([0.1, 0.0]), 0.1, 10.0),\n    ]\n\n    results = []\n    for case in test_cases:\n        omega1, omega2, zeta1, zeta2, x0, v0, dt, T = case\n\n        # --- Setup System Matrices ---\n        M = np.identity(2)\n        K = np.diag([omega1**2, omega2**2])\n        C = np.diag([2 * zeta1 * omega1, 2 * zeta2 * omega2])\n\n        # --- State-space representation ---\n        # A = [[0, I], [-M_inv*K, -M_inv*C]]\n        A = np.zeros((4, 4))\n        A[0:2, 2:4] = np.identity(2)\n        # M is identity, so M_inv is identity\n        A[2:4, 0:2] = -K\n        A[2:4, 2:4] = -C\n\n        y0 = np.concatenate((x0, v0))\n\n        # --- Exact Solution ---\n        y_exact_T = linalg.expm(A * T) @ y0\n        x_exact_T = y_exact_T[0:2]\n\n        num_steps = int(round(T / dt))\n\n        # --- Numerical Solution: Newmark-beta ---\n        x_nm, _, _ = newmark_beta_solver(M, C, K, x0, v0, dt, num_steps)\n        e_newmark = np.linalg.norm(x_nm - x_exact_T)\n\n        # --- Numerical Solution: RK4 ---\n        x_rk4, is_stable = rk4_solver(A, y0, dt, num_steps)\n        e_rk4 = np.linalg.norm(x_rk4 - x_exact_T)\n\n        results.append([\n            np.round(e_newmark, 6),\n            np.round(e_rk4, 6),\n            is_stable\n        ])\n\n    # Final print statement in the exact required format.\n    inner_parts = [f\"[{r[0]},{r[1]},{str(r[2])}]\" for r in results]\n    final_string = f\"[{','.join(inner_parts)}]\"\n    print(final_string)\n\ndef newmark_beta_solver(M, C, K, x0, v0, dt, num_steps):\n    \"\"\"\n    Solves M*x_ddot + C*x_dot + K*x = 0 using the Newmark-beta method.\n    Using average acceleration method (beta=1/4, gamma=1/2).\n    \"\"\"\n    beta = 0.25\n    gamma = 0.5\n    \n    # Initialize displacement, velocity, and acceleration\n    x = x0.copy()\n    v = v0.copy()\n    \n    # Initial acceleration from M*a0 + C*v0 + K*x0 = 0\n    # Since M=I, a0 = -(C*v0 + K*x0)\n    a = - (C @ v0 + K @ x0)\n\n    # Pre-compute effective mass matrix for efficiency\n    M_eff = M + gamma * dt * C + beta * dt**2 * K\n    M_eff_inv = np.linalg.inv(M_eff)\n\n    for _ in range(num_steps):\n        # Predictors\n        x_pred = x + dt * v + (0.5 - beta) * dt**2 * a\n        v_pred = v + (1 - gamma) * dt * a\n\n        # Solve for new acceleration\n        F_eff = - (C @ v_pred + K @ x_pred)\n        a_new = M_eff_inv @ F_eff\n        \n        # Correctors\n        x_new = x_pred + beta * dt**2 * a_new\n        v_new = v_pred + gamma * dt * a_new\n        \n        x, v, a = x_new, v_new, a_new\n\n    return x, v, a\n\ndef rk4_solver(A, y0, dt, num_steps):\n    \"\"\"\n    Solves y_dot = A*y using the classical 4th-order Runge-Kutta method.\n    \"\"\"\n    dof_state = y0.shape[0]\n    y = y0.copy()\n    \n    # Stability monitoring\n    max_norm = np.linalg.norm(y0)\n    y0_norm = max_norm if max_norm > 0 else 1.0 # Avoid division by zero\n\n    for _ in range(num_steps):\n        k1 = A @ y\n        k2 = A @ (y + 0.5 * dt * k1)\n        k3 = A @ (y + 0.5 * dt * k2)\n        k4 = A @ (y + dt * k3)\n        y += (dt / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4)\n        \n        current_norm = np.linalg.norm(y)\n        if current_norm > max_norm:\n            max_norm = current_norm\n    \n    is_stable = (max_norm = 1e6 * y0_norm)\n    x_final = y[0:dof_state//2]\n\n    return x_final, is_stable\n\nif __name__ == \"__main__\":\n    solve()\n\n```", "id": "2446625"}]}