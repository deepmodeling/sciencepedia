{"hands_on_practices": [{"introduction": "A crucial first step in any Computational Fluid Dynamics (CFD) analysis is choosing the correct physical model for the problem at hand. A fundamental decision is whether the flow can be treated as incompressible or if compressibility effects, like changes in density due to pressure variations, must be included. This exercise [@problem_id:1764366] demonstrates how to use fundamental principles of isentropic flow to estimate the Mach number and make an informed choice, a common and critical task for any fluid dynamics analyst.", "problem": "An engineer is tasked with creating a simulation of a bursting party balloon to study the initial shockwave formation. The simulation requires choosing between an incompressible and a compressible flow solver. The choice depends on the Mach number of the escaping air. According to standard practice in Computational Fluid Dynamics (CFD), a flow can be modeled as incompressible if its Mach number is below a threshold of $M_{crit} = 0.3$. Above this threshold, compressibility effects become significant, and a compressible solver is necessary.\n\nConsider a spherical latex balloon inflated with air to a uniform internal gauge pressure of $P_{gauge} = 5.000 \\text{ kPa}$ at a temperature of $T_0 = 293.15 \\text{ K}$. The balloon is in a room with standard atmospheric pressure of $P_{atm} = 101.325 \\text{ kPa}$. The balloon suddenly bursts, and the air begins to expand into the surrounding, still atmosphere.\n\nModel the air as an ideal gas with a ratio of specific heats $\\gamma = 1.400$ and a specific gas constant $R = 287.0 \\text{ J} \\cdot \\text{kg}^{-1} \\cdot \\text{K}^{-1}$. Assume the rapid expansion of air from the stagnation conditions inside the balloon to the ambient pressure at the edge of the rupture is an isentropic process.\n\nBased on an analysis of the flow conditions at the moment the air exits the rupture, which of the following statements correctly justifies the choice of solver?\n\nA. An incompressible solver is appropriate. A calculation based on isentropic flow relations shows the exit Mach number is approximately 0.26, which is below the common threshold of 0.3 for treating a flow as incompressible.\n\nB. A compressible solver is appropriate. Any process involving the rapid expansion of a gas from a higher pressure reservoir, such as a bursting balloon, must be treated as compressible due to the large density changes that inherently occur.\n\nC. A compressible solver is appropriate. A calculation based on isentropic flow relations shows the exit Mach number is approximately 0.26. Since this value is close to the threshold of 0.3, a compressible solver should be used for better accuracy.\n\nD. An incompressible solver is appropriate. The flow is subsonic since the Mach number (approx. 0.26) is less than 1.0, and all subsonic flows can be accurately modeled as incompressible.", "solution": "We identify the internal air as a stagnant reservoir with stagnation pressure and temperature equal to the balloon’s internal absolute pressure and temperature. The internal absolute pressure is the sum of atmospheric and gauge pressures:\n$$\nP_{0}=P_{\\text{atm}}+P_{\\text{gauge}}.\n$$\nAt the edge of the rupture, the static pressure equals the ambient static pressure:\n$$\nP=P_{\\text{atm}}.\n$$\nAssuming an isentropic expansion from stagnation to the exit, the isentropic pressure–Mach relation applies:\n$$\n\\frac{P_{0}}{P}=\\left(1+\\frac{\\gamma-1}{2}M^{2}\\right)^{\\frac{\\gamma}{\\gamma-1}}.\n$$\nSolving for $M$ gives\n$$\nM=\\sqrt{\\frac{2}{\\gamma-1}\\left[\\left(\\frac{P_{0}}{P}\\right)^{\\frac{\\gamma-1}{\\gamma}}-1\\right]}.\n$$\nHere $\\gamma=1.400$, $P_{0}/P=\\frac{P_{\\text{atm}}+P_{\\text{gauge}}}{P_{\\text{atm}}}=1+\\frac{P_{\\text{gauge}}}{P_{\\text{atm}}}$. With the given values $P_{\\text{gauge}}=5.000\\,\\text{kPa}$ and $P_{\\text{atm}}=101.325\\,\\text{kPa}$,\n$$\n\\frac{P_{0}}{P}=1+\\frac{5.000}{101.325}\\approx 1.049346,\n$$\nand with $\\gamma=1.400$ we have $\\frac{\\gamma-1}{\\gamma}=\\frac{2}{7}$ and $\\frac{2}{\\gamma-1}=5$, so\n$$\nM=\\sqrt{5\\left[\\left(1.049346\\right)^{\\frac{2}{7}}-1\\right]}\\approx \\sqrt{5\\left(1.013857-1\\right)}\\approx \\sqrt{0.069285}\\approx 0.263.\n$$\nThis exit Mach number is below the common CFD threshold $M_{\\text{crit}}=0.3$ for incompressible modeling as stated in the problem. Therefore, by the given standard practice, an incompressible solver is appropriate. Statement A correctly matches this analysis. Statement B is overly general and not supported for such a small pressure ratio; Statement C contradicts the provided threshold-based criterion; Statement D is false because many subsonic flows are not accurately modeled as incompressible when $M$ is not small.", "answer": "$$\\boxed{A}$$", "id": "1764366"}, {"introduction": "Numerical solutions in CFD are inherently approximate, and a responsible engineer must always question and quantify the accuracy of their results. This process of ensuring the code correctly solves the intended mathematical equations is called verification. This practice [@problem_id:1810208] introduces you to a cornerstone of verification: the grid convergence study, which allows you to estimate the discretization error from your simulation data and build confidence in your predictions.", "problem": "An engineer is performing a verification study for a Computational Fluid Dynamics (CFD) simulation of a steady, laminar, incompressible flow over a square prism. The goal is to quantify the discretization error for a key simulation output: the peak velocity in the wake region behind the prism.\n\nA grid convergence study is conducted using three systematically refined grids, which we will call the coarse, medium, and fine grids. The characteristic grid cell size for the medium grid is half that of the coarse grid, and the characteristic grid cell size for the fine grid is half that of the medium grid. This corresponds to a constant grid refinement factor, $r=2$, between successive grid levels.\n\nThe peak wake velocities obtained from the simulations on these three grids are:\n- Coarse grid solution ($V_{coarse}$): $0.170$ m/s\n- Medium grid solution ($V_{medium}$): $0.230$ m/s\n- Fine grid solution ($V_{fine}$): $0.245$ m/s\n\nAssuming that the simulation results are in the asymptotic range of convergence, use these data to estimate the discretization error in the fine grid solution, defined as $E_{fine} = V_{fine} - V_{exact}$, where $V_{exact}$ is the exact solution for the peak velocity.\n\nExpress your answer in m/s, rounded to three significant figures.", "solution": "Assuming asymptotic grid convergence, model the grid dependence of the peak velocity as $V(h)=V_{exact}+C h^{p}$, where $h$ is the characteristic grid size, $C$ is a constant, and $p$ is the observed order of accuracy. With a constant refinement factor $r=2$, the fine, medium, and coarse grids correspond to $h_{1}$, $h_{2}=r h_{1}$, and $h_{3}=r^{2} h_{1}$, with corresponding solutions $V_{1}=V_{fine}$, $V_{2}=V_{medium}$, and $V_{3}=V_{coarse}$.\n\nThe observed order $p$ from three solutions is computed using\n$$\np=\\frac{\\ln\\!\\left(\\left|\\frac{V_{3}-V_{2}}{V_{2}-V_{1}}\\right|\\right)}{\\ln(r)}.\n$$\nWith $V_{3}=0.170$, $V_{2}=0.230$, $V_{1}=0.245$, and $r=2$,\n$$\nV_{3}-V_{2}=-0.060,\\quad V_{2}-V_{1}=-0.015,\\quad \\frac{V_{3}-V_{2}}{V_{2}-V_{1}}=4,\n$$\nhence\n$$\np=\\frac{\\ln(4)}{\\ln(2)}=2.\n$$\n\nRichardson extrapolation for the exact value is\n$$\nV_{exact}\\approx V_{1}+\\frac{V_{1}-V_{2}}{r^{p}-1}.\n$$\nSubstituting $V_{1}=0.245$, $V_{2}=0.230$, $r^{p}=2^{2}=4$,\n$$\nV_{exact}\\approx 0.245+\\frac{0.245-0.230}{4-1}=0.245+\\frac{0.015}{3}=0.245+0.005=0.250.\n$$\n\nThe discretization error in the fine-grid solution is\n$$\nE_{fine}=V_{fine}-V_{exact}=0.245-0.250=-0.005.\n$$\nRounded to three significant figures, this is $-0.00500$.", "answer": "$$\\boxed{-0.00500}$$", "id": "1810208"}, {"introduction": "While commercial CFD software is powerful, a deep understanding comes from knowing what happens 'under the hood' by translating continuous partial differential equations into a discrete algebraic system a computer can solve. This advanced practice [@problem_id:2377679] guides you through this process for a channel flow problem, including the numerical implementation of a sophisticated Navier slip boundary condition. This exercise offers a concrete look into the heart of a CFD solver by bridging the gap between theoretical equations and a working computer code.", "problem": "Consider steady, fully developed, laminar flow of an incompressible Newtonian fluid between two infinite parallel plates separated by a distance $H$ in the $y$-direction, with flow in the $x$-direction driven by a constant streamwise pressure gradient. Starting from the incompressible Navier–Stokes equations, invoke the assumptions of steady state, unidirectional flow $u = u(y)$, and no variation in the streamwise direction to reduce the momentum balance to the one-dimensional linear partial differential equation (PDE)\n$$\n\\mu \\frac{d^2 u}{d y^2} = \\frac{d p}{d x} \\, ,\n$$\nwhere $\\mu$ is the dynamic viscosity and $d p / d x$ is constant. Define the positive driving magnitude $G$ by $G = -\\, d p / d x$, so that $G > 0$ corresponds to flow in the positive $x$-direction. The governing ordinary differential equation then becomes\n$$\n\\mu \\frac{d^2 u}{d y^2} = -\\, G \\, .\n$$\nAt the walls $y=0$ and $y=H$, do not use a no-slip condition $u=0$ or a free-slip condition $\\frac{d u}{d y}=0$. Instead, implement the Navier slip (also called Robin) boundary condition based on a specified wall friction coefficient $\\beta$ that relates the tangential shear stress to the tangential velocity via a linear law. Using the inward-pointing unit normal at each wall, the slip boundary conditions are\n$$\n\\mu \\, \\frac{\\partial u}{\\partial n_{\\text{in}}} = \\beta \\, u \\, .\n$$\nConcretely, at the bottom wall $y=0$ the inward normal is $+\\hat{\\mathbf{y}}$, so\n$$\n\\mu \\, \\frac{d u}{d y}(0) = \\beta_0 \\, u(0) \\, ,\n$$\nand at the top wall $y=H$ the inward normal is $-\\hat{\\mathbf{y}}$, so\n$$\n- \\, \\mu \\, \\frac{d u}{d y}(H) = \\beta_H \\, u(H) \\, .\n$$\nHere $\\beta_0$ and $\\beta_H$ are the wall friction coefficients (units $\\mathrm{Pa \\cdot s / m}$) at $y=0$ and $y=H$, respectively. Note that letting $\\beta \\to +\\infty$ recovers the no-slip limit and letting $\\beta \\to 0$ recovers the free-slip limit; however, simultaneously setting $\\beta_0 = 0$ and $\\beta_H = 0$ is incompatible with a nonzero $G$ and leads to no solution.\n\nYour task is to implement a finite difference solver that discretizes the interval $[0,H]$ into a uniform grid of $N$ nodes with spacing $\\Delta y = H/(N-1)$ and solves the linear boundary value problem with second-order accuracy in the interior and a consistent second-order treatment of the slip boundary conditions via ghost-point elimination. Use the central second-order stencil for interior nodes $j=1,\\dots,N-2$:\n$$\n\\mu \\, \\frac{u_{j-1} - 2 u_{j} + u_{j+1}}{\\Delta y^2} = - \\, G \\, .\n$$\nAt the bottom boundary $j=0$, use a ghost point $u_{-1}$ and a central difference approximation for the derivative to enforce\n$$\n\\mu \\, \\frac{u_1 - u_{-1}}{2 \\Delta y} = \\beta_0 \\, u_0 \\quad \\Rightarrow \\quad u_{-1} = u_1 - \\frac{2 \\Delta y \\, \\beta_0}{\\mu} \\, u_0 \\, ,\n$$\nwhich, when substituted into the discrete diffusion equation at $j=0$, yields\n$$\n\\mu \\, \\frac{u_{-1} - 2 u_0 + u_1}{\\Delta y^2} = - \\, G \\quad \\Rightarrow \\quad\n\\left( - \\frac{2 \\mu}{\\Delta y^2} - \\frac{2 \\beta_0}{\\Delta y} \\right) u_0 + \\left( \\frac{2 \\mu}{\\Delta y^2} \\right) u_1 = - \\, G \\, .\n$$\nAt the top boundary $j=N-1$, use a ghost point $u_{N}$ and the central difference approximation for the derivative to enforce\n$$\n- \\, \\mu \\, \\frac{u_{N} - u_{N-2}}{2 \\Delta y} = \\beta_H \\, u_{N-1} \\quad \\Rightarrow \\quad u_{N} = u_{N-2} - \\frac{2 \\Delta y \\, \\beta_H}{\\mu} \\, u_{N-1} \\, ,\n$$\nwhich, when substituted into the discrete diffusion equation at $j=N-1$, yields\n$$\n\\left( \\frac{2 \\mu}{\\Delta y^2} \\right) u_{N-2} + \\left( - \\frac{2 \\mu}{\\Delta y^2} - \\frac{2 \\beta_H}{\\Delta y} \\right) u_{N-1} = - \\, G \\, .\n$$\nSolve the resulting tridiagonal linear system for $u_0,\\dots,u_{N-1}$. For verification, derive the exact solution of the boundary value problem\n$$\nu(y) = - \\, \\frac{G}{2 \\mu} \\, y^2 + C_1 \\, y + C_2 \\, ,\n$$\nwith constants determined by the slip boundary conditions:\n$$\nC_1 = \\frac{\\beta_0}{\\mu} \\, C_2 \\, , \\quad\nC_2 = \\frac{G \\, H \\left( 1 + \\frac{\\beta_H H}{2 \\mu} \\right)}{\\beta_H \\left( 1 + \\frac{\\beta_0 H}{\\mu} \\right) + \\beta_0} \\, .\n$$\nUse this analytical solution to compute a reference velocity profile and assess the numerical accuracy.\n\nRequired outputs per test case:\n- Construct the numerical solution with $N = 401$ nodes.\n- Compute the maximum absolute pointwise error of velocity between the numerical and analytical profiles,\n$$\ne_{\\max} = \\max_{0 \\le j \\le N-1} \\left| u_j - u\\!\\left( j \\, \\Delta y \\right) \\right| \\, .\n$$\n- Report $e_{\\max}$ in $\\mathrm{m/s}$.\n\nYour program must hard-code and run the following test suite of parameter sets $(H,\\mu,G,\\beta_0,\\beta_H)$ using SI units:\n- Test $1$: $(H,\\mu,G,\\beta_0,\\beta_H) = (\\, 0.02 \\,,\\, 1.0 \\times 10^{-3} \\,,\\, 100.0 \\,,\\, 1.0 \\times 10^{5} \\,,\\, 1.0 \\times 10^{5} \\,)$.\n- Test $2$: $(H,\\mu,G,\\beta_0,\\beta_H) = (\\, 0.02 \\,,\\, 1.0 \\times 10^{-3} \\,,\\, 100.0 \\,,\\, 500.0 \\,,\\, 500.0 \\,)$.\n- Test $3$: $(H,\\mu,G,\\beta_0,\\beta_H) = (\\, 0.02 \\,,\\, 1.0 \\times 10^{-3} \\,,\\, 100.0 \\,,\\, 0.0 \\,,\\, 500.0 \\,)$.\n- Test $4$: $(H,\\mu,G,\\beta_0,\\beta_H) = (\\, 0.01 \\,,\\, 1.8 \\times 10^{-5} \\,,\\, 50.0 \\,,\\, 0.0 \\,,\\, 1.0 \\times 10^{6} \\,)$.\n\nAngle units are not applicable. Express each $e_{\\max}$ in $\\mathrm{m/s}$ as a floating-point number.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the tests above, for example, $[e_1,e_2,e_3,e_4]$, where each $e_k$ is the maximum absolute error in $\\mathrm{m/s}$ for test $k$.", "solution": "The problem requires the numerical solution of the one-dimensional boundary value problem for plane Poiseuille flow with Navier slip boundary conditions. The governing ordinary differential equation (ODE) is given by:\n$$\n\\mu \\frac{d^2 u}{d y^2} = -G\n$$\non the domain $y \\in [0, H]$. The parameters $\\mu$, $G$, and $H$ represent the dynamic viscosity, the magnitude of the negative pressure gradient, and the distance between the plates, respectively. The velocity profile is denoted by $u(y)$.\n\nThe boundary conditions are of the Robin type, also known as Navier slip conditions:\n$$\n\\mu \\, \\frac{d u}{d y}(0) = \\beta_0 \\, u(0) \\quad (\\text{at } y=0)\n$$\n$$\n- \\, \\mu \\, \\frac{d u}{d y}(H) = \\beta_H \\, u(H) \\quad (\\text{at } y=H)\n$$\nwhere $\\beta_0$ and $\\beta_H$ are the wall friction coefficients at the bottom and top walls.\n\nThe problem is to be solved using a second-order accurate finite difference method on a uniform grid of $N$ nodes. The grid points are $y_j = j \\Delta y$ for $j=0, 1, \\dots, N-1$, with grid spacing $\\Delta y = H / (N-1)$. The unknowns are the velocity values $u_j = u(y_j)$ at these nodes.\n\nThe discretization leads to a system of linear equations of the form $A \\mathbf{u} = \\mathbf{b}$, where $\\mathbf{u} = [u_0, u_1, \\dots, u_{N-1}]^T$. The matrix $A$ is tridiagonal, and its elements and the right-hand side vector $\\mathbf{b}$ are derived as follows.\n\nFor the interior nodes, $j=1, \\dots, N-2$, the standard second-order central difference approximation for the second derivative is used:\n$$\n\\mu \\frac{u_{j-1} - 2 u_{j} + u_{j+1}}{\\Delta y^2} = -G\n$$\nRearranging this gives the equation for the $j$-th row of the linear system:\n$$\n\\left(\\frac{\\mu}{\\Delta y^2}\\right) u_{j-1} - \\left(\\frac{2\\mu}{\\Delta y^2}\\right) u_j + \\left(\\frac{\\mu}{\\Delta y^2}\\right) u_{j+1} = -G\n$$\n\nFor the boundary nodes at $j=0$ and $j=N-1$, a ghost-point method is employed to maintain second-order accuracy.\nAt the bottom boundary ($j=0$), the ODE is discretized as $\\mu (u_{-1} - 2u_0 + u_1) / \\Delta y^2 = -G$, where $u_{-1}$ is a ghost point at $y=-\\Delta y$. The boundary condition is discretized using a central difference: $\\mu (u_1 - u_{-1}) / (2 \\Delta y) = \\beta_0 u_0$. Solving for the ghost point $u_{-1} = u_1 - (2 \\Delta y \\beta_0 / \\mu) u_0$ and substituting into the ODE discretization yields the equation for the first row ($j=0$):\n$$\n\\left(-\\frac{2\\mu}{\\Delta y^2} - \\frac{2\\beta_0}{\\Delta y}\\right) u_0 + \\left(\\frac{2\\mu}{\\Delta y^2}\\right) u_1 = -G\n$$\nAt the top boundary ($j=N-1$), a similar procedure with a ghost point $u_N$ at $y=H+\\Delta y$ yields the equation for the last row ($j=N-1$):\n$$\n\\left(\\frac{2\\mu}{\\Delta y^2}\\right) u_{N-2} + \\left(-\\frac{2\\mu}{\\Delta y^2} - \\frac{2\\beta_H}{\\Delta y}\\right) u_{N-1} = -G\n$$\nThese equations define a tridiagonal system of $N$ linear equations for the $N$ unknown velocities $u_j$. We can construct the coefficient matrix $A$ and the right-hand side vector $\\mathbf{b}$ and solve the system for $\\mathbf{u}$.\n\nThe matrix $A$ has three non-zero diagonals: a main diagonal, a sub-diagonal, and a super-diagonal. Let $c_1 = \\mu / \\Delta y^2$. The diagonals are:\n- Main diagonal ($d_0$):\n  $A_{j,j} = -2c_1$ for $j=1, \\dots, N-2$.\n  $A_{0,0} = -2c_1 - 2\\beta_0 / \\Delta y$.\n  $A_{N-1,N-1} = -2c_1 - 2\\beta_H / \\Delta y$.\n- Sub-diagonal ($d_{-1}$):\n  $A_{j,j-1} = c_1$ for $j=1, \\dots, N-2$.\n  $A_{N-1,N-2} = 2c_1$.\n- Super-diagonal ($d_{+1}$):\n  $A_{0,1} = 2c_1$.\n  $A_{j,j+1} = c_1$ for $j=1, \\dots, N-2$.\n\nThe right-hand side vector $\\mathbf{b}$ is simply:\n$b_j = -G$ for all $j=0, \\dots, N-1$.\n\nThe numerical solution $\\mathbf{u}$ obtained by solving $A \\mathbf{u} = \\mathbf{b}$ is then compared against the exact analytical solution to assess its accuracy. The analytical solution is found by integrating the ODE twice:\n$$\nu(y) = -\\frac{G}{2\\mu} y^2 + C_1 y + C_2\n$$\nThe integration constants $C_1$ and $C_2$ are determined by applying the two boundary conditions. The problem provides the correct expressions for these constants:\n$$\nC_1 = \\frac{\\beta_0}{\\mu} C_2\n$$\n$$\nC_2 = \\frac{G H \\left(1 + \\frac{\\beta_H H}{2\\mu}\\right)}{\\beta_H \\left(1 + \\frac{\\beta_0 H}{\\mu}\\right) + \\beta_0}\n$$\nThe error is quantified by the maximum absolute pointwise difference between the numerical solution $u_j$ and the analytical solution $u(y_j)$:\n$$\ne_{\\max} = \\max_{0 \\le j \\le N-1} |u_j - u(y_j)|\n$$\nThe implementation will construct and solve this linear system for each test case specified, calculate the analytical solution for comparison, and compute the maximum error $e_{\\max}$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D plane Poiseuille flow with Navier slip boundary conditions\n    using a finite difference method and compares with the analytical solution.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (H, mu, G, beta_0, beta_H) in SI units.\n    test_cases = [\n        (0.02, 1.0e-3, 100.0, 1.0e5, 1.0e5),\n        (0.02, 1.0e-3, 100.0, 500.0, 500.0),\n        (0.02, 1.0e-3, 100.0, 0.0, 500.0),\n        (0.01, 1.8e-5, 50.0, 0.0, 1.0e6),\n    ]\n\n    N = 401\n    results = []\n\n    for case in test_cases:\n        H, mu, G, beta0, betaH = case\n        \n        dy = H / (N - 1)\n        y_grid = np.linspace(0, H, N)\n\n        # --- Numerical Solution ---\n        # Construct the tridiagonal matrix A for the system Au = b.\n        \n        A = np.zeros((N, N))\n        b = np.full(N, -G)\n\n        # Coefficients for finite difference equations\n        c1 = mu / dy**2\n\n        # Interior points (j = 1 to N-2)\n        for j in range(1, N - 1):\n            A[j, j-1] = c1\n            A[j, j]   = -2 * c1\n            A[j, j+1] = c1\n\n        # Boundary point at y=0 (j=0)\n        A[0, 0] = -2 * c1 - 2 * beta0 / dy\n        A[0, 1] = 2 * c1\n        \n        # Boundary point at y=H (j=N-1)\n        A[N-1, N-2] = 2 * c1\n        A[N-1, N-1] = -2 * c1 - 2 * betaH / dy\n        \n        # Solve the linear system Au = b\n        u_numerical = np.linalg.solve(A, b)\n\n        # --- Analytical Solution ---\n        # Calculate integration constants C1 and C2\n        \n        # Denominator of C2 must not be zero. This is guaranteed by the problem constraints.\n        den_C2 = betaH * (1 + beta0 * H / mu) + beta0\n        num_C2 = G * H * (1 + betaH * H / (2 * mu))\n        \n        C2 = num_C2 / den_C2\n        C1 = (beta0 / mu) * C2\n\n        # Calculate the analytical velocity profile\n        u_analytical = -G / (2 * mu) * y_grid**2 + C1 * y_grid + C2\n\n        # --- Error Calculation ---\n        # Compute the maximum absolute pointwise error\n        e_max = np.max(np.abs(u_numerical - u_analytical))\n        results.append(e_max)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2377679"}]}