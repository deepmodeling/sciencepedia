{"hands_on_practices": [{"introduction": "A primary goal of error analysis is not just to understand the error after a computation, but to predict it beforehand. This allows us to determine the computational resources required to achieve a desired level of accuracy. This practice demonstrates how to use the theoretical error bound for Simpson's rule to calculate the minimum number of subintervals needed to guarantee that an approximation is within a specified tolerance. [@problem_id:3224894]", "problem": "Consider the definite integral $\\int_{0}^{\\pi} \\cos(x)\\,dx$ and its approximation by the composite Simpson's rule using a uniform partition of $[0,\\pi]$ into $n$ subintervals, where $n$ is a positive even integer and the step size is $h = \\frac{\\pi}{n}$. Starting from first principles—specifically, Taylor's theorem with remainder and the exactness of Simpson's rule for polynomials up to degree $3$—derive a theoretical global truncation error bound for the composite Simpson's rule that depends on $h$ and the fourth derivative of the integrand. Then, apply this bound to the function $f(x) = \\cos(x)$ on $[0,\\pi]$ and determine the smallest even integer $n$ such that this bound is strictly less than $10^{-10}$. Your final answer must be the single integer $n$. Do not round; identify the minimal even $n$ that satisfies the stated inequality.", "solution": "The problem is valid as it is scientifically grounded in the principles of numerical analysis, well-posed with a unique solution, and expressed in objective, formal language. It is self-contained and free of contradictions. I will now proceed with the solution.\n\nThe problem asks for two main tasks: first, to derive the global truncation error bound for the composite Simpson's rule from first principles, and second, to apply this bound to find the smallest even integer $n$ that guarantees a certain precision for the integral $\\int_{0}^{\\pi} \\cos(x)\\,dx$.\n\n**Part 1: Derivation of the Global Truncation Error Bound**\n\nLet $I = \\int_{a}^{b} f(x)\\,dx$. The composite Simpson's rule approximates this integral by partitioning the interval $[a,b]$ into an even number of subintervals, $n$, each of width $h = \\frac{b-a}{n}$. The rule is applied to consecutive pairs of subintervals, i.e., over $n/2$ intervals of the form $[x_{2i}, x_{2i+2}]$, where $i$ ranges from $0$ to $\\frac{n}{2}-1$.\n\nThe derivation starts with the error of the basic Simpson's rule over a single interval of width $2h$, centered at a point $c$. Let this interval be $[c-h, c+h]$. The basic Simpson's rule approximation is $S = \\frac{h}{3}[f(c-h) + 4f(c) + f(c+h)]$. The local error is $E_{loc} = \\int_{c-h}^{c+h} f(x)\\,dx - S$.\n\nThe problem specifies using the fact that Simpson's rule is exact for polynomials of degree up to $3$. Let $P_3(x)$ be the Taylor polynomial of degree $3$ for $f(x)$ expanded about the center point $c$:\n$$P_3(x) = f(c) + f'(c)(x-c) + \\frac{f''(c)}{2!}(x-c)^2 + \\frac{f'''(c)}{3!}(x-c)^3$$\nBy Taylor's theorem, the remainder is $R_3(x) = f(x) - P_3(x) = \\frac{f^{(4)}(\\xi_x)}{4!}(x-c)^4$ for some $\\xi_x$ between $c$ and $x$.\n\nThe error functional $E_{loc}(f)$ is linear. Thus,\n$$E_{loc}(f) = E_{loc}(P_3(x) + R_3(x)) = E_{loc}(P_3(x)) + E_{loc}(R_3(x))$$\nSince Simpson's rule is exact for any polynomial of degree $3$ or less, $E_{loc}(P_3(x)) = 0$. The error is therefore entirely determined by the remainder term:\n$$E_{loc}(f) = E_{loc}(R_3(x)) = \\int_{c-h}^{c+h} R_3(x)\\,dx - \\frac{h}{3}[R_3(c-h) + 4R_3(c) + R_3(c+h)]$$\nWe evaluate each term:\n$R_3(x) = \\frac{f^{(4)}(\\xi_x)}{24}(x-c)^4$.\n$R_3(c) = 0$.\n$R_3(c-h) = \\frac{f^{(4)}(\\eta_1)}{24}(-h)^4 = \\frac{h^4}{24}f^{(4)}(\\eta_1)$ for some $\\eta_1 \\in (c-h, c)$.\n$R_3(c+h) = \\frac{f^{(4)}(\\eta_2)}{24}(h)^4 = \\frac{h^4}{24}f^{(4)}(\\eta_2)$ for some $\\eta_2 \\in (c, c+h)$.\n\nThe integral term is $\\int_{c-h}^{c+h} \\frac{f^{(4)}(\\xi_x)}{24}(x-c)^4\\,dx$. Since $(x-c)^4 \\ge 0$ on the interval, we can apply the Integral Mean Value Theorem. Assuming $f^{(4)}(x)$ is continuous on $[c-h, c+h]$, there exists a $\\zeta_1 \\in (c-h, c+h)$ such that:\n$$\\int_{c-h}^{c+h} \\frac{f^{(4)}(\\xi_x)}{24}(x-c)^4\\,dx = \\frac{f^{(4)}(\\zeta_1)}{24} \\int_{c-h}^{c+h} (x-c)^4\\,dx = \\frac{f^{(4)}(\\zeta_1)}{24} \\left[\\frac{(x-c)^5}{5}\\right]_{c-h}^{c+h} = \\frac{f^{(4)}(\\zeta_1)}{24} \\frac{2h^5}{5} = \\frac{h^5}{60}f^{(4)}(\\zeta_1)$$\nThe approximation term is:\n$$\\frac{h}{3}[R_3(c-h) + 4R_3(c) + R_3(c+h)] = \\frac{h}{3}\\left[\\frac{h^4}{24}f^{(4)}(\\eta_1) + 0 + \\frac{h^4}{24}f^{(4)}(\\eta_2)\\right] = \\frac{h^5}{72}[f^{(4)}(\\eta_1)+f^{(4)}(\\eta_2)]$$\nBy the Intermediate Value Theorem, there exists a $\\zeta_2 \\in (c-h, c+h)$ such that $f^{(4)}(\\eta_1) + f^{(4)}(\\eta_2) = 2f^{(4)}(\\zeta_2)$. So this term becomes $\\frac{2h^5}{72}f^{(4)}(\\zeta_2) = \\frac{h^5}{36}f^{(4)}(\\zeta_2)$.\n\nCombining these results, the local error is:\n$$E_{loc}(f) = \\frac{h^5}{60}f^{(4)}(\\zeta_1) - \\frac{h^5}{36}f^{(4)}(\\zeta_2)$$\nIf $f^{(4)}(x)$ were a constant $K$, the error would be $K h^5(\\frac{1}{60} - \\frac{1}{36}) = K h^5(\\frac{3-5}{180}) = -\\frac{K h^5}{90}$.\nMore formally, by Darboux's theorem (or by a more advanced argument using Peano kernels not required here), there exists a single value $\\xi \\in (c-h, c+h)$ such that the local error is precisely:\n$$E_{loc} = -\\frac{h^5}{90}f^{(4)}(\\xi)$$\nThis is the error for a single application of Simpson's rule over an interval of width $2h$.\n\nFor the composite rule, the interval $[a,b]$ is divided into $n$ subintervals of width $h_{comp} = \\frac{b-a}{n}$. The rule is applied $n/2$ times on intervals $[x_{2i}, x_{2i+2}]$ of width $2h_{comp}$. The half-width for each application is thus $h_{comp}$. Let's rename $h_{comp}$ to just $h$ to match the problem statement. The error on the subinterval $[x_{2i}, x_{2i+2}]$ is:\n$$E_i = -\\frac{h^5}{90}f^{(4)}(\\xi_i)$$\nfor some $\\xi_i \\in (x_{2i}, x_{2i+2})$.\n\nThe total global error, $E_S$, is the sum of these local errors:\n$$E_S = \\sum_{i=0}^{n/2 - 1} E_i = \\sum_{i=0}^{n/2 - 1} \\left( -\\frac{h^5}{90}f^{(4)}(\\xi_i) \\right) = -\\frac{h^5}{90} \\sum_{i=0}^{n/2 - 1} f^{(4)}(\\xi_i)$$\nSince $f^{(4)}(x)$ is continuous on $[a,b]$, we can apply the Intermediate Value Theorem to the sum:\n$$\\sum_{i=0}^{n/2 - 1} f^{(4)}(\\xi_i) = \\left(\\frac{n}{2}\\right) f^{(4)}(\\xi)$$\nfor some $\\xi \\in (a,b)$.\nSubstituting this into the expression for $E_S$:\n$$E_S = -\\frac{h^5}{90} \\left(\\frac{n}{2}\\right) f^{(4)}(\\xi) = -\\frac{nh^5}{180}f^{(4)}(\\xi)$$\nFinally, we substitute $n = \\frac{b-a}{h}$:\n$$E_S = -\\frac{(b-a)/h \\cdot h^5}{180}f^{(4)}(\\xi) = -\\frac{(b-a)h^4}{180}f^{(4)}(\\xi)$$\nThe theoretical global truncation error bound is the absolute value of this expression, maximized over the possible values of $\\xi$:\n$$|E_S| \\le \\frac{(b-a)h^4}{180} \\max_{x \\in [a,b]} |f^{(4)}(x)|$$\nThis completes the derivation.\n\n**Part 2: Application to the Specific Problem**\n\nWe are given the integral $\\int_{0}^{\\pi} \\cos(x)\\,dx$.\nHere, $f(x) = \\cos(x)$, $a=0$, and $b=\\pi$. The interval length is $b-a = \\pi$.\nThe step size is $h = \\frac{\\pi}{n}$.\nWe must find the fourth derivative of $f(x)$:\n$f'(x) = -\\sin(x)$\n$f''(x) = -\\cos(x)$\n$f'''(x) = \\sin(x)$\n$f^{(4)}(x) = \\cos(x)$\n\nNext, we find the maximum absolute value of the fourth derivative on the interval $[0, \\pi]$:\n$$\\max_{x \\in [0,\\pi]} |f^{(4)}(x)| = \\max_{x \\in [0,\\pi]} |\\cos(x)| = 1$$\nThis maximum occurs at $x=0$ and $x=\\pi$.\n\nSubstituting these values into the error bound formula:\n$$|E_S| \\le \\frac{\\pi \\cdot h^4}{180} \\cdot 1 = \\frac{\\pi h^4}{180}$$\nNow, we substitute $h = \\pi/n$:\n$$|E_S| \\le \\frac{\\pi}{180} \\left(\\frac{\\pi}{n}\\right)^4 = \\frac{\\pi^5}{180 n^4}$$\n\n**Part 3: Determining the Smallest Even Integer $n$**\n\nWe are required to find the smallest even integer $n$ such that this error bound is strictly less than $10^{-10}$.\n$$\\frac{\\pi^5}{180 n^4}  10^{-10}$$\nWe solve this inequality for $n$:\n$$n^4 > \\frac{\\pi^5}{180 \\cdot 10^{-10}}$$\n$$n^4 > \\frac{\\pi^5 \\cdot 10^{10}}{180}$$\nTaking the fourth root of both sides:\n$$n > \\left(\\frac{\\pi^5 \\cdot 10^{10}}{180}\\right)^{1/4}$$\n$$n > \\left(\\frac{\\pi^5}{180}\\right)^{1/4} \\cdot (10^{10})^{1/4}$$\n$$n > \\left(\\frac{\\pi^5}{180}\\right)^{1/4} \\cdot 10^{2.5}$$\nNow we compute the numerical value:\n$\\pi^5 \\approx 306.0196847$\n$\\frac{\\pi^5}{180} \\approx \\frac{306.0196847}{180} \\approx 1.700109359$\n$\\left(\\frac{\\pi^5}{180}\\right)^{1/4} \\approx (1.700109359)^{1/4} \\approx 1.1418765$\n$10^{2.5} = 100\\sqrt{10} \\approx 100 \\cdot 3.16227766 \\approx 316.227766$\nSo, the inequality for $n$ is:\n$$n > 1.1418765 \\times 316.227766 \\approx 361.0593$$\nSince $n$ must be strictly greater than $361.0593$ and must be a positive even integer, the smallest integer value for $n$ is $362$. The value $362$ is even.\n\nTherefore, the smallest even integer $n$ that satisfies the condition is $362$.", "answer": "$$\\boxed{362}$$", "id": "3224894"}, {"introduction": "Theoretical predictions in science and engineering are always strengthened by experimental verification. In scientific computing, this means confirming that our implemented algorithms behave as theory predicts. This hands-on coding exercise will guide you through empirically verifying the convergence rates of the trapezoidal and Simpson's rules, connecting the abstract order of convergence, $p$, to a tangible slope on a log-log plot of error versus step size. [@problem_id:3224834]", "problem": "Consider the function $f(x)=e^x$ on the interval $[0,1]$. Let $I=\\int_{0}^{1} f(x)\\,dx$ denote the exact integral. For a uniform partition with $n$ subintervals and step size $h=(1-0)/n$, define the composite trapezoidal rule approximation $T_n$ and the composite Simpson's rule approximation $S_n$ by their standard summation definitions over the nodes $x_k=0+kh$ for $k=0,1,\\dots,n$:\n- Composite trapezoidal rule:\n$$\nT_n = h\\left(\\frac{f(0)}{2} + \\sum_{k=1}^{n-1} f(x_k) + \\frac{f(1)}{2}\\right).\n$$\n- Composite Simpson's rule (require $n$ even):\n$$\nS_n = \\frac{h}{3}\\left(f(0) + f(1) + 4\\sum_{k=1,\\,k\\text{ odd}}^{n-1} f(x_k) + 2\\sum_{k=2,\\,k\\text{ even}}^{n-2} f(x_k)\\right).\n$$\n\nStarting from fundamental definitions in numerical quadrature and the smoothness of $f(x)=e^x$, the global error $E(h)$ of each composite rule as a function of $h$ exhibits an asymptotic power-law behavior $E(h)\\approx C\\,h^p$ when $h$ is sufficiently small, where $p$ is the convergence order and $C$ is a nonzero constant depending on $f$ and the rule. Theoretical upper bounds for the global errors can be established using the supremum of appropriate derivatives of $f$ over $[0,1]$, specifically $\\sup_{x\\in[0,1]}|f''(x)|$ for the composite trapezoidal rule and $\\sup_{x\\in[0,1]}|f^{(4)}(x)|$ for the composite Simpson's rule.\n\nYour program must:\n1. Compute $I$ exactly from the definition of the exponential function and the Fundamental Theorem of Calculus.\n2. For each specified list of $n$ values (the test suite below), compute $T_n$ and $S_n$ (with Simpson's rule applied only to even $n$), their absolute global errors $|I-T_n|$ and $|I-S_n|$, and the step sizes $h=1/n$.\n3. For each rule and for each list of $n$ values, perform a linear regression on the pairs $\\left(\\log(h),\\log(|E(h)|)\\right)$ using the natural logarithm to estimate the slope $p$ and the intercept $\\log(C)$ of the best-fit line, thereby obtaining empirical estimates of $p$ and $C=e^{\\text{intercept}}$.\n4. Compute the theoretical derivative suprema $\\sup_{x\\in[0,1]}|f''(x)|$ and $\\sup_{x\\in[0,1]}|f^{(4)}(x)|$, and use the standard global error upper-bound forms involving these suprema to check, for every $n$ in each list, whether the absolute global errors of the corresponding rule are less than or equal to their bound. Report a boolean indicating whether all bounds hold for all $n$ in the list for both rules simultaneously.\n\nTest suite:\n- Case A (happy path): $n\\in\\{4,8,16,32,64\\}$.\n- Case B (moderately coarse): $n\\in\\{2,4,6,8,10,12\\}$.\n- Case C (fine grid): $n\\in\\{128,256,512,1024\\}$.\n\nFinal output specification:\n- For each case, produce a list $[p_T, C_T, p_S, C_S, \\text{bound\\_ok}]$ where $p_T$ and $C_T$ are the empirical slope and constant for the composite trapezoidal rule, $p_S$ and $C_S$ are the empirical slope and constant for the composite Simpson's rule, and $\\text{bound\\_ok}$ is a boolean that is true if and only if, for all $n$ in the case, both $|I-T_n|$ and $|I-S_n|$ are less than or equal to their respective theoretical upper bounds derived from $\\sup_{x\\in[0,1]}|f''(x)|$ and $\\sup_{x\\in[0,1]}|f^{(4)}(x)|$.\n- Your program should produce a single line of output containing the three case results as a comma-separated list enclosed in square brackets, for example:\n$$\n[\\,[p_T^{(A)},C_T^{(A)},p_S^{(A)},C_S^{(A)},\\text{bound\\_ok}^{(A)}],\\,[p_T^{(B)},C_T^{(B)},p_S^{(B)},C_S^{(B)},\\text{bound\\_ok}^{(B)}],\\,[p_T^{(C)},C_T^{(C)},p_S^{(C)},C_S^{(C)},\\text{bound\\_ok}^{(C)}]\\,].\n$$\nAll numerical results must be reported as raw floats and booleans in this aggregated list. No physical units or angle units apply in this problem.", "solution": "The problem requires an analysis of the convergence properties of the composite trapezoidal and Simpson's numerical integration rules for the function $f(x) = e^x$ on the interval $[0,1]$. This analysis involves computing the numerical approximations, their errors, comparing them to theoretical bounds, and empirically estimating the order of convergence.\n\nFirst, we establish the ground truth for the integral. The function to be integrated is $f(x) = e^x$ over the interval $[0,1]$. The exact value of the integral, denoted by $I$, is computed using the Fundamental Theorem of Calculus:\n$$\nI = \\int_{0}^{1} e^x \\,dx = \\left[e^x\\right]_{0}^{1} = e^1 - e^0 = e - 1\n$$\nThis value serves as the reference against which the numerical approximations $T_n$ and $S_n$ are compared.\n\nNext, we establish the theoretical error bounds. The standard error bound formulas for the composite trapezoidal and Simpson's rules depend on the supremum of the magnitudes of certain derivatives of the function $f(x)$ over the integration interval. The interval is $[a,b]=[0,1]$ and the step size is $h=(b-a)/n = 1/n$.\n\nFor the composite trapezoidal rule, the error bound involves the second derivative.\nThe derivatives of $f(x)=e^x$ are $f'(x)=e^x$, $f''(x)=e^x$, and so on. All derivatives are $e^x$.\nThe function $e^x$ is positive and monotonically increasing on $[0,1]$. Therefore, the supremum of its derivatives on this interval occurs at $x=1$.\n$$\nM_2 = \\sup_{x\\in[0,1]}|f''(x)| = \\sup_{x\\in[0,1]}|e^x| = e^1 = e\n$$\nThe theoretical error bound for the composite trapezoidal rule is:\n$$\n|I - T_n| \\le \\frac{(b-a)h^2}{12} M_2 = \\frac{1 \\cdot (1/n)^2}{12} e = \\frac{e}{12n^2}\n$$\nFor the composite Simpson's rule, the error bound involves the fourth derivative.\n$$\nM_4 = \\sup_{x\\in[0,1]}|f^{(4)}(x)| = \\sup_{x\\in[0,1]}|e^x| = e^1 = e\n$$\nThe theoretical error bound for the composite Simpson's rule (for even $n$) is:\n$$\n|I - S_n| \\le \\frac{(b-a)h^4}{180} M_4 = \\frac{1 \\cdot (1/n)^4}{180} e = \\frac{e}{180n^4}\n$$\nThe program must verify for each $n$ in each test case whether the computed absolute errors $|I-T_n|$ and $|I-S_n|$ are less than or equal to these respective bounds.\n\nThe problem also requires an empirical estimation of the convergence order $p$ and the error constant $C$ from the asymptotic relationship $|E(h)| \\approx C h^p$, where $E(h)$ is the global error for a given step size $h$. Taking the natural logarithm of both sides yields a linear relationship:\n$$\n\\ln(|E(h)|) \\approx \\ln(C) + p \\ln(h)\n$$\nThis equation is of the form $y = m x + c$, where $y = \\ln(|E(h)|)$, $x = \\ln(h)$, the slope is $m=p$, and the y-intercept is $c=\\ln(C)$. By computing the errors for a sequence of step sizes $h_i=1/n_i$, we can generate a set of data points $(\\ln(h_i), \\ln(|E(h_i)|))$. A simple linear regression on these points provides estimates for the slope $p$ and the intercept $\\ln(C)$, from which we can find $C = e^{\\ln(C)}$. This procedure is performed separately for the trapezoidal and Simpson's rules.\n\nThe computational procedure for each test case is as follows:\n1.  Define the exact integral $I=e-1$ and the derivative suprema $M_2=e$ and $M_4=e$. Initialize a boolean flag `bound_ok` to true.\n2.  For each number of subintervals $n$ in the given list:\n    a. Calculate the step size $h=1/n$.\n    b. Generate the nodes $x_k = kh$ for $k=0, 1, \\dots, n$ and evaluate $y_k = f(x_k)$.\n    c. Compute the trapezoidal approximation $T_n$ using its summation formula.\n    d. Calculate the absolute error $|E_{T_n}| = |I-T_n|$ and the theoretical error bound $B_{T_n} = e h^2 / 12$. If $|E_{T_n}| > B_{T_n}$, set `bound_ok` to false.\n    e. If $n$ is even, compute the Simpson's approximation $S_n$, its error $|E_{S_n}|=|I-S_n|$, and its bound $B_{S_n} = e h^4 / 180$. If $|E_{S_n}| > B_{S_n}$, set `bound_ok` to false.\n    f. Store $h$, $|E_{T_n}|$, and (if applicable) $|E_{S_n}|$ for the regression analysis.\n3.  Perform linear regression on the collected natural log-log data for the trapezoidal rule to find its empirical parameters $p_T$ and $C_T$.\n4.  Perform linear regression on the collected natural log-log data for Simpson's rule to find its empirical parameters $p_S$ and $C_S$.\n5.  Consolidate the results into the list $[p_T, C_T, p_S, C_S, \\text{bound\\_ok}]$.\nThis process is repeated for each of the three specified test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the numerical integration error analysis problem for three test cases.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        [4, 8, 16, 32, 64],        # Case A\n        [2, 4, 6, 8, 10, 12],      # Case B\n        [128, 256, 512, 1024],      # Case C\n    ]\n\n    # The function to integrate f(x) = e^x\n    f = lambda x: np.exp(x)\n    \n    # Exact value of the integral over [0, 1]\n    I_exact = np.e - 1.0\n\n    # Supremum of derivatives on [0, 1] for error bounds\n    # f''(x) = e^x, sup|f''(x)| = e^1 = e\n    # f^(4)(x) = e^x, sup|f^(4)(x)| = e^1 = e\n    M2 = np.e\n    M4 = np.e\n\n    interval_a = 0.0\n    interval_b = 1.0\n\n    all_results = []\n\n    for n_values in test_cases:\n        h_T_vals, errors_T = [], []\n        h_S_vals, errors_S = [], []\n        bounds_hold = True\n\n        for n in n_values:\n            h = (interval_b - interval_a) / n\n            x_nodes = np.linspace(interval_a, interval_b, n + 1)\n            y_values = f(x_nodes)\n\n            # Composite Trapezoidal Rule\n            T_n = h * (np.sum(y_values[1:-1]) + (y_values[0] + y_values[-1]) / 2.0)\n            error_T = np.abs(I_exact - T_n)\n            \n            # Theoretical bound for Trapezoidal Rule\n            bound_T = M2 * h**2 / 12.0\n            if error_T  bound_T:\n                bounds_hold = False\n            \n            h_T_vals.append(h)\n            errors_T.append(error_T)\n\n            # Composite Simpson's Rule (for even n)\n            if n % 2 == 0:\n                # S_n = h/3 * (f(x_0) + f(x_n) + 4*sum(odd terms) + 2*sum(even terms))\n                # Odd terms indices: 1, 3, ..., n-1\n                # Even terms indices: 2, 4, ..., n-2\n                odd_sum = np.sum(y_values[1:n:2])\n                even_sum = np.sum(y_values[2:n-1:2])\n                S_n = (h / 3.0) * (y_values[0] + y_values[-1] + 4.0 * odd_sum + 2.0 * even_sum)\n                error_S = np.abs(I_exact - S_n)\n                \n                # Theoretical bound for Simpson's Rule\n                bound_S = M4 * h**4 / 180.0\n                if error_S  bound_S:\n                    bounds_hold = False\n                \n                h_S_vals.append(h)\n                errors_S.append(error_S)\n        \n        # Perform linear regression on log-log data\n        # For Trapezoidal Rule\n        log_h_T = np.log(np.array(h_T_vals))\n        log_err_T = np.log(np.array(errors_T))\n        p_T, log_C_T = np.polyfit(log_h_T, log_err_T, 1)\n        C_T = np.exp(log_C_T)\n\n        # For Simpson's Rule\n        log_h_S = np.log(np.array(h_S_vals))\n        log_err_S = np.log(np.array(errors_S))\n        p_S, log_C_S = np.polyfit(log_h_S, log_err_S, 1)\n        C_S = np.exp(log_C_S)\n        \n        case_result = [p_T, C_T, p_S, C_S, bounds_hold]\n        all_results.append(case_result)\n\n\n    # Final print statement in the exact required format.\n    # We convert the list of lists to its string representation and remove spaces for compactness.\n    print(str(all_results).replace(\" \", \"\"))\n\nsolve()\n```", "id": "3224834"}, {"introduction": "It is a common misconception that a higher-order numerical method is always superior to a lower-order one. This practice challenges that assumption by tasking you with designing a specific function where the \"simpler\" trapezoidal rule is actually more accurate than the \"sophisticated\" Simpson's rule. Successfully completing this exercise will deepen your understanding of the hidden assumptions behind quadrature formulas, particularly how a function's oscillatory behavior can interact with the rule's sampling points. [@problem_id:3284359]", "problem": "Consider numerical integration of a smooth function over the interval $[0,1]$ using a fixed budget of $9$ function evaluations at uniformly spaced nodes $x_j = j/8$ for $j = 0,1,\\dots,8$. For this node set, one may construct composite quadrature rules by interpolating $f(x)$ locally with polynomials and integrating those interpolants to approximate the definite integral $\\int_{0}^{1} f(x)\\,dx$. Two widely used such rules are based on linear interpolation (composite trapezoidal rule) and quadratic interpolation (composite Simpson's rule), both on a uniform grid. \n\nStarting strictly from these core definitions of numerical quadrature (interpolatory formulas constructed on uniform nodes) and without invoking any pre-stated error constants or closed-form error formulas, design a specific, continuously differentiable function $f(x)$ on $[0,1]$ such that, when both rules use the same $9$ function evaluations at the nodes $\\{x_j\\}_{j=0}^{8}$, the composite trapezoidal rule yields an approximation to $\\int_{0}^{1} f(x)\\,dx$ that is more accurate than the composite Simpson's rule. \n\nYour answer must be an explicit analytic expression for $f(x)$, and you must demonstrate in your reasoning why, for this $f(x)$ and the specified nodes, the composite trapezoidal rule is strictly closer to the true integral than the composite Simpson's rule. No rounding is required, and no units are involved; provide exact values in your reasoning.", "solution": "The objective is to find a continuously differentiable function $f(x)$ on $[0,1]$ such that the composite trapezoidal rule yields a more accurate approximation of $I = \\int_0^1 f(x) dx$ than the composite Simpson's rule, given a uniform grid of $9$ points. The grid spacing is $h = (1-0)/8 = 1/8$, with nodes $x_j = j/8$ for $j \\in \\{0, 1, \\dots, 8\\}$.\n\nWe must show that $|I - T|  |I - S|$. The path to a solution without using pre-stated error formulas is to propose a suitable candidate function and then explicitly compute the true integral $I$ and the two approximations $T$ and $S$ to verify the inequality.\n\nA key insight is that the accuracy of these rules is tied to how well their underlying polynomial interpolants capture the behavior of the function. Simpson's rule uses piecewise quadratic interpolants over panels of width $2h$, while the trapezoidal rule uses piecewise linear interpolants over panels of width $h$. A function whose behavior is poorly captured by quadratic interpolation at the given node spacing, but well-approximated by linear interpolation, is a promising candidate. Highly oscillatory functions can exhibit such properties.\n\nLet us propose the function $f(x) = \\cos(8\\pi x)$. This function is continuously differentiable (in fact, $C^\\infty$) on $[0,1]$.\n\nFirst, we evaluate the function at the specified nodes $x_j = j/8$:\n$$f(x_j) = f\\left(\\frac{j}{8}\\right) = \\cos\\left(8\\pi \\frac{j}{8}\\right) = \\cos(j\\pi) = (-1)^j$$\nThe sequence of function values $\\{f_j\\}_{j=0}^8$ is:\n$$f_0=1, f_1=-1, f_2=1, f_3=-1, f_4=1, f_5=-1, f_6=1, f_7=-1, f_8=1$$\n\nNext, we calculate the exact value of the integral, $I$:\n$$I = \\int_{0}^{1} \\cos(8\\pi x) \\,dx = \\left[ \\frac{\\sin(8\\pi x)}{8\\pi} \\right]_{0}^{1} = \\frac{\\sin(8\\pi) - \\sin(0)}{8\\pi} = \\frac{0-0}{8\\pi} = 0$$\n\nNow, we compute the approximation using the composite trapezoidal rule. The rule is defined for $N=8$ subintervals as:\n$$T = h \\left( \\frac{f_0 + f_8}{2} + \\sum_{j=1}^{7} f_j \\right)$$\nWith $h=1/8$ and our nodal values:\n$$T = \\frac{1}{8} \\left( \\frac{1 + 1}{2} + (-1 + 1 - 1 + 1 - 1 + 1 - 1) \\right)$$\n$$T = \\frac{1}{8} \\left( 1 + (-1) \\right) = \\frac{1}{8}(0) = 0$$\n\nNext, we compute the approximation using the composite Simpson's rule. For $N=8$ subintervals (an even number), the rule is:\n$$S = \\frac{h}{3} \\left( f_0 + 4f_1 + 2f_2 + 4f_3 + 2f_4 + 4f_5 + 2f_6 + 4f_7 + f_8 \\right)$$\nUsing our nodal values:\n$$S = \\frac{1/8}{3} \\left( 1 + 4(-1) + 2(1) + 4(-1) + 2(1) + 4(-1) + 2(1) + 4(-1) + 1 \\right)$$\n$$S = \\frac{1}{24} \\left( 1 - 4 + 2 - 4 + 2 - 4 + 2 - 4 + 1 \\right)$$\nSumming the terms inside the parentheses:\n$$1 - 4 + 2 - 4 + 2 - 4 + 2 - 4 + 1 = (1+2+2+2+1) - (4+4+4+4) = 8 - 16 = -8$$\nSo, the approximation is:\n$$S = \\frac{1}{24} (-8) = -\\frac{1}{3}$$\n\nFinally, we compare the absolute errors.\nThe absolute error for the trapezoidal rule is:\n$$|E_T| = |I - T| = |0 - 0| = 0$$\nThe absolute error for Simpson's rule is:\n$$|E_S| = |I - S| = \\left|0 - \\left(-\\frac{1}{3}\\right)\\right| = \\frac{1}{3}$$\nComparing the two absolute errors, we find:\n$$0  \\frac{1}{3}$$\nThus, $|E_T|  |E_S|$.\n\nThe function $f(x)=\\cos(8\\pi x)$ is continuously differentiable and, for the given nodes, the composite trapezoidal rule is perfectly accurate while the composite Simpson's rule yields a substantial error. This demonstrates that the trapezoidal rule is more accurate than Simpson's rule in this specific case, satisfying all conditions of the problem. This occurs because the frequency of the function is precisely the Nyquist frequency of the grid, $1/(2h)$. The trapezoidal rule is exact because the error term on each subinterval, $\\int_{x_j}^{x_{j+1}} (f(x) - L_j(x))dx$, happens to be zero due to the symmetry of the cosine function within each subinterval. Simpson's rule, however, is designed for polynomials and is severely misled by the oscillatory nature of the function relative to its three-point sampling panels, leading to a large error.", "answer": "$$\\boxed{\\cos(8\\pi x)}$$", "id": "3284359"}]}