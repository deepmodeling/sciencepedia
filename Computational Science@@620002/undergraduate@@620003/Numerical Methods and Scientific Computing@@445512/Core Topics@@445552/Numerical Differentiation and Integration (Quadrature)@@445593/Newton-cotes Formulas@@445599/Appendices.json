{"hands_on_practices": [{"introduction": "To begin our exploration of Newton-Cotes formulas, we start with the most intuitive method: the composite trapezoidal rule. This practice grounds the theory in a concrete calculation, showing how to approximate the value of a definite integral that represents a fundamental mathematical constant, $\\ln(3)$. By breaking the area under the curve into a series of simple trapezoids, you will gain hands-on experience with the mechanics of numerical integration and build a foundation for understanding more sophisticated techniques [@problem_id:2190937].", "problem": "The value of the natural logarithm of 3, denoted as $\\ln(3)$, can be expressed as the definite integral $I = \\int_1^3 \\frac{1}{x} dx$. Without using a calculator to evaluate the logarithm or the integral directly, your task is to find a numerical approximation of this value.\n\nApply the composite trapezoidal rule with $n=4$ subintervals to approximate the value of the integral $I$. Express your answer as a single fraction in its simplest form.", "solution": "The problem asks us to approximate the integral $I = \\int_1^3 \\frac{1}{x} dx$ using the composite trapezoidal rule with $n=4$ subintervals.\n\nThe formula for the composite trapezoidal rule for a function $f(x)$ over an interval $[a, b]$ with $n$ subintervals is given by:\n$$T_n(f) = \\frac{h}{2} \\left[ f(x_0) + 2\\sum_{i=1}^{n-1} f(x_i) + f(x_n) \\right]$$\nwhere the step size is $h = \\frac{b-a}{n}$, and the grid points are $x_i = a + i \\cdot h$ for $i = 0, 1, 2, \\dots, n$.\n\nIn this problem, we have:\n- The function to integrate: $f(x) = \\frac{1}{x}$\n- The interval of integration: $[a, b] = [1, 3]$\n- The number of subintervals: $n=4$\n\nFirst, we calculate the step size $h$:\n$$h = \\frac{b-a}{n} = \\frac{3-1}{4} = \\frac{2}{4} = \\frac{1}{2}$$\n\nNext, we determine the grid points $x_i$ for $i = 0, 1, 2, 3, 4$:\n- $x_0 = a = 1$\n- $x_1 = 1 + 1 \\cdot \\frac{1}{2} = \\frac{3}{2}$\n- $x_2 = 1 + 2 \\cdot \\frac{1}{2} = 2$\n- $x_3 = 1 + 3 \\cdot \\frac{1}{2} = \\frac{5}{2}$\n- $x_4 = b = 1 + 4 \\cdot \\frac{1}{2} = 3$\n\nNow, we evaluate the function $f(x) = \\frac{1}{x}$ at these grid points:\n- $f(x_0) = f(1) = \\frac{1}{1} = 1$\n- $f(x_1) = f\\left(\\frac{3}{2}\\right) = \\frac{1}{3/2} = \\frac{2}{3}$\n- $f(x_2) = f(2) = \\frac{1}{2}$\n- $f(x_3) = f\\left(\\frac{5}{2}\\right) = \\frac{1}{5/2} = \\frac{2}{5}$\n- $f(x_4) = f(3) = \\frac{1}{3}$\n\nNow we substitute these values into the composite trapezoidal rule formula:\n$$T_4(f) = \\frac{h}{2} [f(x_0) + 2f(x_1) + 2f(x_2) + 2f(x_3) + f(x_4)]$$\n$$T_4(f) = \\frac{1/2}{2} \\left[ 1 + 2\\left(\\frac{2}{3}\\right) + 2\\left(\\frac{1}{2}\\right) + 2\\left(\\frac{2}{5}\\right) + \\frac{1}{3} \\right]$$\n$$T_4(f) = \\frac{1}{4} \\left[ 1 + \\frac{4}{3} + 1 + \\frac{4}{5} + \\frac{1}{3} \\right]$$\n\nLet's simplify the expression inside the brackets by grouping terms:\n$$T_4(f) = \\frac{1}{4} \\left[ (1 + 1) + \\left(\\frac{4}{3} + \\frac{1}{3}\\right) + \\frac{4}{5} \\right]$$\n$$T_4(f) = \\frac{1}{4} \\left[ 2 + \\frac{5}{3} + \\frac{4}{5} \\right]$$\n\nTo sum the terms in the bracket, we find a common denominator, which is $3 \\times 5 = 15$:\n$$2 + \\frac{5}{3} + \\frac{4}{5} = \\frac{2 \\cdot 15}{15} + \\frac{5 \\cdot 5}{15} + \\frac{4 \\cdot 3}{15} = \\frac{30}{15} + \\frac{25}{15} + \\frac{12}{15}$$\n$$= \\frac{30 + 25 + 12}{15} = \\frac{67}{15}$$\n\nFinally, we substitute this back into the expression for $T_4(f)$:\n$$T_4(f) = \\frac{1}{4} \\left( \\frac{67}{15} \\right) = \\frac{67}{4 \\cdot 15} = \\frac{67}{60}$$\n\nThe number 67 is a prime number, and 60 is not divisible by 67. Thus, the fraction $\\frac{67}{60}$ is in its simplest form.", "answer": "$$\\boxed{\\frac{67}{60}}$$", "id": "2190937"}, {"introduction": "Having mastered the trapezoidal rule, a natural question arises: how can we improve its accuracy without starting from scratch? This practice introduces Richardson extrapolation, a powerful and general technique for accelerating the convergence of numerical estimates. Through a hands-on coding exercise, you will discover that applying this method to the trapezoidal rule does more than just yield a better approximation—it algebraically constructs the formula for the composite Simpson's rule, revealing a deep and elegant connection between these two fundamental methods [@problem_id:3256181].", "problem": "You are to write a complete, runnable program that, for a collection of test cases, numerically verifies that applying Richardson extrapolation to the composite Trapezoidal rule on a uniform mesh with $N$ subintervals and with $2N$ subintervals yields exactly the same numerical value as the composite Simpson's rule with $2N$ subintervals. Your implementation and reasoning must be grounded in standard definitions of Newton–Cotes formulas (composite Trapezoidal rule and composite Simpson's rule) and the asymptotic error expansion provided by the Euler–Maclaurin summation formula. You must not assume any specialized or problem-specific results beyond these fundamentals. All angles, where applicable, must be interpreted in radians.\n\nTasks to implement in code:\n- Given a function $f$, interval $[a,b]$, and an even integer $M$, implement the composite Simpson's rule with $M$ uniform subintervals of width $h_M = (b-a)/M$.\n- Given a function $f$, interval $[a,b]$, and a positive integer $N$, implement the composite Trapezoidal rule with $N$ uniform subintervals of width $h_N = (b-a)/N$.\n- Construct a Richardson-extrapolated estimate from the two composite Trapezoidal approximations computed on meshes with $N$ and $2N$ subintervals by canceling the leading-order error term in the asymptotic expansion. Use these two values to form a single extrapolated estimate.\n- For each test case below, compare the Richardson-extrapolated value to the composite Simpson's value computed on the mesh with $2N$ subintervals, and return a boolean indicating whether their absolute difference is less than or equal to a tolerance $\\tau = 10^{-12}$.\n\nTest suite:\n- Case $1$: $f(x) = \\sin(x)$ on $[a,b] = [0,\\pi]$, with $N = 10$. Interpret $\\sin$ in radians.\n- Case $2$: $f(x) = x^{3} - 2x + 1$ on $[a,b] = [-1,2]$, with $N = 8$.\n- Case $3$: $f(x) = e^{x}$ on $[a,b] = [0,1]$, with $N = 2$.\n- Case $4$: $f(x) = \\dfrac{1}{1+x^{2}}$ on $[a,b] = [-3,3]$, with $N = 64$.\n\nInput and output format requirements:\n- There is no external input. The program must run as-is and apply the above test suite internally.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the cases listed above. For example, the output must have the form $[r_1,r_2,r_3,r_4]$ where each $r_i$ is a boolean.\n\nNotes:\n- All computations must be performed in floating-point arithmetic in a stable and efficient manner.\n- Ensure that $M = 2N$ is even for Simpson's rule. No other assumptions are required.", "solution": "The problem requires a numerical verification of a fundamental identity in numerical integration: that the first-order Richardson extrapolation applied to the composite Trapezoidal rule yields the composite Simpson's rule. We will first establish this identity theoretically and then implement a program to verify it for a given set of test cases.\n\n**Theoretical Foundation**\n\nLet $I = \\int_a^b f(x) dx$ be the exact value of the definite integral of a sufficiently smooth function $f(x)$ over the interval $[a,b]$.\n\n**1. Composite Trapezoidal Rule and its Error Expansion**\n\nThe composite Trapezoidal rule, denoted by $T_N$, approximates $I$ using $N$ subintervals of equal width $h = (b-a)/N$. Its formula is:\n$$ T_N = \\frac{h}{2} \\left( f(x_0) + 2\\sum_{i=1}^{N-1} f(x_i) + f(x_N) \\right) $$\nwhere $x_i = a + i h$.\n\nThe Euler-Maclaurin summation formula provides an asymptotic expansion for the error of the Trapezoidal rule. When applied to $T_N$, which we can write as $T(h)$, the expansion is:\n$$ T(h) = I + C_1 h^2 + C_2 h^4 + C_3 h^6 + \\dots $$\nThe coefficients $C_k$ are independent of $h$ and depend on the derivatives of $f(x)$ at the endpoints $a$ and $b$. The leading error term is of order $O(h^2)$.\n\n**2. Richardson Extrapolation**\n\nThe goal of Richardson extrapolation is to combine two approximations with different step sizes to obtain a more accurate estimate by canceling the leading error term. Let's compute the integral using two different numbers of subintervals: $N$ and $2N$. The respective step sizes are $h = (b-a)/N$ and $h/2 = (b-a)/(2N)$. Let $T_N = T(h)$ and $T_{2N} = T(h/2)$. Their error expansions are:\n$$ T_N = I + C_1 h^2 + C_2 h^4 + O(h^6) $$\n$$ T_{2N} = I + C_1 \\left(\\frac{h}{2}\\right)^2 + C_2 \\left(\\frac{h}{2}\\right)^4 + O(h^6) = I + \\frac{1}{4} C_1 h^2 + \\frac{1}{16} C_2 h^4 + O(h^6) $$\nWe have a system of two linear equations in terms of the unknowns $I$ and $C_1 h^2$. To eliminate the $C_1 h^2$ term, we compute $4T_{2N} - T_N$:\n$$ 4T_{2N} - T_N = \\left( 4I + C_1 h^2 + \\frac{1}{4} C_2 h^4 \\right) - \\left( I + C_1 h^2 + C_2 h^4 \\right) + O(h^6) = 3I - \\frac{3}{4} C_2 h^4 + O(h^6) $$\nSolving for $I$ gives the extrapolated approximation, which we denote as $R_N$:\n$$ R_N = \\frac{4T_{2N} - T_N}{3} = I - \\frac{1}{4} C_2 h^4 + O(h^6) $$\nThis new approximation $R_N$ has an error of order $O(h^4)$, a significant improvement over the $O(h^2)$ error of the Trapezoidal rule.\n\n**3. Composite Simpson's Rule**\n\nThe composite Simpson's rule requires an even number of subintervals. Let's consider $M = 2N$ subintervals. The step size is $h' = (b-a)/M = (b-a)/(2N)$. This is the same step size used for $T_{2N}$. Let the nodes be $x_i = a + i h'$ for $i=0, 1, \\dots, 2N$. The formula for the composite Simpson's rule, denoted $S_{2N}$, is:\n$$ S_{2N} = \\frac{h'}{3} \\left( f(x_0) + 4\\sum_{j=1}^{N} f(x_{2j-1}) + 2\\sum_{j=1}^{N-1} f(x_{2j}) + f(x_{2N}) \\right) $$\nThe error of composite Simpson's rule is known to be of order $O((h')^4)$.\n\n**4. The Identity: $R_N = S_{2N}$**\n\nWe now show that the Richardson-extrapolated value $R_N$ is algebraically identical to the composite Simpson's rule value $S_{2N}$. We use the common set of nodes, $x_i = a + i h'$, where $h' = (b-a)/(2N)$ for $i \\in \\{0, 1, \\dots, 2N\\}$.\n\nThe approximation $T_{2N}$ uses all $2N+1$ nodes:\n$$ T_{2N} = \\frac{h'}{2} \\left( f(x_0) + 2\\sum_{i=1}^{2N-1} f(x_i) + f(x_{2N}) \\right) $$\nThe approximation $T_N$ uses a step size of $h=2h'$. Its nodes are the evenly indexed nodes from the finer grid: $x_0, x_2, \\dots, x_{2N}$.\n$$ T_N = \\frac{2h'}{2} \\left( f(x_0) + 2\\sum_{j=1}^{N-1} f(x_{2j}) + f(x_{2N}) \\right) = h' \\left( f(x_0) + f(x_{2N}) + 2\\sum_{j=1}^{N-1} f(x_{2j}) \\right) $$\nNow, we substitute these expressions into the formula for $R_N = \\frac{4T_{2N} - T_N}{3}$.\n$$\n\\begin{aligned}\n4T_{2N} - T_N &= 4 \\left( \\frac{h'}{2} \\left[ f(x_0) + f(x_{2N}) + 2\\sum_{j=1}^{N} f(x_{2j-1}) + 2\\sum_{j=1}^{N-1} f(x_{2j}) \\right] \\right) \\\\\n& \\quad - h' \\left[ f(x_0) + f(x_{2N}) + 2\\sum_{j=1}^{N-1} f(x_{2j}) \\right] \\\\\n&= h' \\left[ 2(f(x_0) + f(x_{2N})) + 4\\sum_{j=1}^{N} f(x_{2j-1}) + 4\\sum_{j=1}^{N-1} f(x_{2j}) \\right] \\\\\n& \\quad - h' \\left[ f(x_0) + f(x_{2N}) + 2\\sum_{j=1}^{N-1} f(x_{2j}) \\right] \\\\\n&= h' \\left[ (f(x_0) + f(x_{2N})) + 4\\sum_{j=1}^{N} f(x_{2j-1}) + 2\\sum_{j=1}^{N-1} f(x_{2j}) \\right]\n\\end{aligned}\n$$\nDividing by $3$ yields:\n$$ R_N = \\frac{4T_{2N} - T_N}{3} = \\frac{h'}{3} \\left[ f(x_0) + f(x_{2N}) + 4\\sum_{j=1}^{N} f(x_{2j-1}) + 2\\sum_{j=1}^{N-1} f(x_{2j}) \\right] $$\nThis is precisely the formula for the composite Simpson's rule, $S_{2N}$. Thus, the identity $R_N \\equiv S_{2N}$ is established.\n\n**Conclusion**\n\nThe derivation confirms that, in exact arithmetic, applying Richardson extrapolation to the composite Trapezoidal rule approximations $T_N$ and $T_{2N}$ is mathematically equivalent to applying the composite Simpson's rule $S_{2N}$. The program will implement these formulas in floating-point arithmetic and verify that the computed values are equal within a small tolerance $\\tau = 10^{-12}$, which accounts for potential minor discrepancies due to the order of floating-point operations. For all test cases, the result is expected to be True.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef composite_trapezoidal(f, a, b, N):\n    \"\"\"\n    Computes the integral of f on [a,b] using the composite Trapezoidal rule\n    with N uniform subintervals.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"Number of subintervals N must be a positive integer.\")\n    \n    h = (b - a) / N\n    x = np.linspace(a, b, N + 1)\n    y = f(x)\n    \n    # Formula: (h/2) * (f(x0) + 2*f(x1) + ... + 2*f(x_{N-1}) + f(xN))\n    integral = (h / 2.0) * (y[0] + 2 * np.sum(y[1:-1]) + y[-1])\n    return integral\n\ndef composite_simpson(f, a, b, M):\n    \"\"\"\n    Computes the integral of f on [a,b] using the composite Simpson's rule\n    with M uniform subintervals. M must be an even integer.\n    \"\"\"\n    if M <= 0 or M % 2 != 0:\n        raise ValueError(\"Number of subintervals M must be a positive even integer.\")\n        \n    h = (b - a) / M\n    x = np.linspace(a, b, M + 1)\n    y = f(x)\n    \n    # Formula: (h/3) * (f(x0) + 4f(x1) + 2f(x2) + ... + 4f(x_{M-1}) + f(xM))\n    # Slicing y[1:-1:2] gets all odd indices between the endpoints.\n    # Slicing y[2:-1:2] gets all even indices between the endpoints.\n    integral = (h / 3.0) * (y[0] + y[-1] + 4 * np.sum(y[1:-1:2]) + 2 * np.sum(y[2:-1:2]))\n    return integral\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {'f': lambda x: np.sin(x), 'interval': (0.0, np.pi), 'N': 10},\n        {'f': lambda x: x**3 - 2*x + 1, 'interval': (-1.0, 2.0), 'N': 8},\n        {'f': lambda x: np.exp(x), 'interval': (0.0, 1.0), 'N': 2},\n        {'f': lambda x: 1.0 / (1.0 + x**2), 'interval': (-3.0, 3.0), 'N': 64},\n    ]\n\n    results = []\n    tolerance = 1e-12\n\n    for case in test_cases:\n        f = case['f']\n        a, b = case['interval']\n        N = case['N']\n        M = 2 * N\n\n        # 1. Compute Trapezoidal approximations for N and 2N subintervals.\n        T_N = composite_trapezoidal(f, a, b, N)\n        T_2N = composite_trapezoidal(f, a, b, M)\n        \n        # 2. Construct the Richardson-extrapolated estimate.\n        # This cancels the O(h^2) error term.\n        richardson_val = (4.0 * T_2N - T_N) / 3.0\n        \n        # 3. Compute the composite Simpson's rule value with 2N subintervals.\n        simpson_val = composite_simpson(f, a, b, M)\n\n        # 4. Compare the two results and check if they are equal within the tolerance.\n        are_equal = np.abs(richardson_val - simpson_val) <= tolerance\n        results.append(are_equal)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, [r.item() for r in results]))}]\")\n\nsolve()\n```", "id": "3256181"}, {"introduction": "Newton-Cotes formulas are powerful because they approximate a function with a simple polynomial, but this strength is also a source of limitation. This final practice serves as a crucial reality check, exploring a scenario where Simpson's rule performs surprisingly poorly on a seemingly simple function. By analyzing the integral of a function with a non-differentiable point, or \"kink,\" you will learn firsthand that the high order of accuracy of these methods depends critically on the smoothness of the integrand [@problem_id:2191010]. As theoretical analysis confirms, the presence of such a singularity can reduce the convergence rate of even high-order rules to just $O(h^2)$, a vital lesson for any practitioner of numerical analysis.", "problem": "A common task in numerical analysis is to approximate a definite integral when an analytical solution is difficult or impossible to find. One of the most fundamental methods for this is Simpson's 1/3 rule.\n\nConsider the function $f(x) = |x - c|$, where $c$ is a constant. We are interested in the definite integral of this function over the interval $[a, b]$, where $a < c < b$.\n\nYour task is to analyze the performance of Simpson's 1/3 rule for this type of function.\nSpecifically, let the function be $f(x) = |x - 1|$ and the interval of integration be $[0, 2]$.\n\nFirst, calculate the exact value of the integral, which we will call $I_{exact} = \\int_{0}^{2} |x - 1| \\, dx$.\nNext, calculate the approximate value of the integral, $I_{S}$, using a single application of Simpson's 1/3 rule over the entire interval $[0, 2]$ (which corresponds to using $n=2$ subintervals).\n\nFinally, compute the absolute error, $E = |I_{exact} - I_{S}|$. Report this absolute error as your final answer. Round your final answer to three significant figures.", "solution": "We evaluate the exact integral by splitting at the point where the absolute value changes sign. Since $f(x)=|x-1|$, on $[0,1]$ we have $|x-1|=1-x$, and on $[1,2]$ we have $|x-1|=x-1$. Thus,\n$$\nI_{\\text{exact}}=\\int_{0}^{2}|x-1|\\,dx=\\int_{0}^{1}(1-x)\\,dx+\\int_{1}^{2}(x-1)\\,dx.\n$$\nCompute each part:\n$$\n\\int_{0}^{1}(1-x)\\,dx=\\left[x-\\frac{x^{2}}{2}\\right]_{0}^{1}=1-\\frac{1}{2}=\\frac{1}{2},\\quad\n\\int_{1}^{2}(x-1)\\,dx=\\left[\\frac{x^{2}}{2}-x\\right]_{1}^{2}=\\left(2-2\\right)-\\left(\\frac{1}{2}-1\\right)=\\frac{1}{2}.\n$$\nTherefore,\n$$\nI_{\\text{exact}}=\\frac{1}{2}+\\frac{1}{2}=1.\n$$\n\nNow apply Simpson's $1/3$ rule on $[0,2]$ with $n=2$ subintervals. The step size is $h=\\frac{b-a}{2}=\\frac{2-0}{2}=1$. Simpson's formula gives\n$$\nI_{S}=\\frac{h}{3}\\left[f(0)+4f(1)+f(2)\\right].\n$$\nEvaluate the function values:\n$$\nf(0)=|0-1|=1,\\quad f(1)=|1-1|=0,\\quad f(2)=|2-1|=1.\n$$\nHence,\n$$\nI_{S}=\\frac{1}{3}\\left[1+4\\cdot 0+1\\right]=\\frac{1}{3}\\cdot 2=\\frac{2}{3}.\n$$\n\nThe absolute error is\n$$\nE=\\left|I_{\\text{exact}}-I_{S}\\right|=\\left|1-\\frac{2}{3}\\right|=\\frac{1}{3}.\n$$\nRounded to three significant figures, this is $0.333$.", "answer": "$$\\boxed{0.333}$$", "id": "2191010"}]}