{"hands_on_practices": [{"introduction": "The stability function, $R(z)$, is the cornerstone of stability analysis for numerical methods. This function reveals how a method will behave when applied to the fundamental test equation $y' = \\lambda y$. This first exercise provides direct practice in applying the core definitions of A-stability and L-stability to a given $R(z)$, helping to solidify your understanding of the underlying mathematical conditions. [@problem_id:2151768]", "problem": "When analyzing numerical methods for solving Ordinary Differential Equations (ODEs), the stability of the method is a crucial property. This is often studied by applying the method to the Dahlquist test equation, $y' = \\lambda y$, where $\\lambda$ is a complex number with $\\text{Re}(\\lambda) \\leq 0$. This analysis leads to a stability function, $R(z)$, where $z = h\\lambda$ and $h$ is the step size. The behavior of $R(z)$ determines the stability properties of the method.\n\nTwo important stability properties are A-stability and L-stability:\n1.  A method is **A-stable** if its region of absolute stability contains the entire left-half of the complex plane. For a method with a rational stability function $R(z)$, this is equivalent to the condition $|R(z)| \\leq 1$ for all complex numbers $z$ with $\\text{Re}(z) \\leq 0$.\n2.  A method is **L-stable** if it is A-stable and its stability function also satisfies the condition $\\lim_{z \\to \\infty} R(z) = 0$.\n\nConsider a hypothetical single-step numerical method whose stability function is given by the rational function:\n$$\nR(z) = \\frac{1+\\frac{1}{3}z}{1-\\frac{2}{3}z}\n$$\n\nBased on the definitions provided, determine the stability properties of this method.\n\nA. The method is A-stable, but not L-stable.\n\nB. The method is L-stable.\n\nC. The method is not A-stable.\n\nD. The method is neither A-stable nor L-stable.", "solution": "We are given the stability function\n$$\nR(z) = \\frac{1+\\frac{1}{3}z}{1-\\frac{2}{3}z}.\n$$\nA-stability requires that the region of absolute stability\n$$\nS=\\{z\\in\\mathbb{C}:\\,|R(z)|\\leq 1\\}\n$$\ncontain the entire left-half plane $\\{z:\\,\\text{Re}(z)\\leq 0\\}$. We analyze $S$ by solving the inequality\n$$\n\\left|\\frac{1+\\frac{1}{3}z}{1-\\frac{2}{3}z}\\right|\\leq 1\n\\quad\\Longleftrightarrow\\quad\n\\left|1+\\frac{1}{3}z\\right|\\leq\\left|1-\\frac{2}{3}z\\right|.\n$$\nLet $z=x+iy$ with $x,y\\in\\mathbb{R}$. Using $|1+\\alpha z|^{2}=(1+\\alpha x)^{2}+(\\alpha y)^{2}$ for real $\\alpha$, we compute\n$$\n\\left|1+\\frac{1}{3}z\\right|^{2}=1+\\frac{2}{3}x+\\frac{1}{9}(x^{2}+y^{2}),\\qquad\n\\left|1-\\frac{2}{3}z\\right|^{2}=1-\\frac{4}{3}x+\\frac{4}{9}(x^{2}+y^{2}).\n$$\nThus\n$$\n1+\\frac{2}{3}x+\\frac{1}{9}(x^{2}+y^{2}) \\leq 1-\\frac{4}{3}x+\\frac{4}{9}(x^{2}+y^{2}).\n$$\nCanceling $1$ and collecting terms gives\n$$\n\\frac{2}{3}x+\\frac{1}{9}(x^{2}+y^{2}) \\leq -\\frac{4}{3}x+\\frac{4}{9}(x^{2}+y^{2}),\n$$\n$$\n\\frac{2}{3}x+\\frac{4}{3}x \\leq \\frac{4}{9}(x^{2}+y^{2})-\\frac{1}{9}(x^{2}+y^{2}),\n$$\n$$\n2x \\leq \\frac{1}{3}(x^{2}+y^{2}).\n$$\nMultiplying by $3$ and rearranging yields\n$$\n6x \\leq x^{2}+y^{2}\\quad\\Longleftrightarrow\\quad x^{2}+y^{2}-6x \\geq 0.\n$$\nCompleting the square,\n$$\n(x-3)^{2}+y^{2} \\geq 9.\n$$\nTherefore the absolute stability region $S$ is the exterior (including the boundary) of the circle centered at $(3,0)$ with radius $3$. For any $z$ with $\\text{Re}(z)=x\\leq 0$, we have $(x-3)^{2}\\geq 9$, hence $(x-3)^{2}+y^{2}\\geq 9$, so every such $z$ lies in $S$. Thus the entire left-half plane is included, and the method is A-stable.\n\nTo check L-stability, compute the limit of $R(z)$ as $z\\to\\infty$. Since the degrees of numerator and denominator are equal, the limit is the ratio of leading coefficients:\n$$\n\\lim_{z\\to\\infty}R(z)=\\lim_{z\\to\\infty}\\frac{\\frac{1}{3}z}{-\\frac{2}{3}z}=-\\frac{1}{2}\\neq 0.\n$$\nTherefore the method is not L-stable.\n\nCombining these results, the method is A-stable but not L-stable, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "2151768"}, {"introduction": "Theoretical concepts like L-stability become truly meaningful when we see their practical consequences. This exercise bridges theory and application by asking you to construct the trapezoidal rule, an A-stable but not L-stable method, and then use it to solve a stiff problem. By observing the resulting numerical oscillations, you will gain a concrete understanding of why the stricter L-stability condition is essential for robustly handling equations with rapidly decaying components. [@problem_id:3202108]", "problem": "You are asked to construct and analyze a specific linear multistep method for ordinary differential equations from first principles, then to implement a program that verifies its properties numerically and demonstrates a qualitative failure for a stiff problem. Use only the following foundational definitions and facts as your base: a linear multistep method is any method of the form $\\sum_{j=0}^{s} \\alpha_j y_{n+j} = h \\sum_{j=0}^{s} \\beta_j f_{n+j}$ with constant coefficients; a method is consistent if and only if $\\sum_{j=0}^{s} \\alpha_j = 0$ and $\\sum_{j=0}^{s} j \\alpha_j = \\sum_{j=0}^{s} \\beta_j$; absolute stability (A-stability) is defined by the requirement that when applied to the linear test equation $y' = \\lambda y$ the method’s amplification factor $R(z)$, where $z = h \\lambda$, satisfies $\\lvert R(z) \\rvert \\le 1$ for all $z$ with $\\operatorname{Re}(z) \\le 0$; L-stability requires, in addition, that $\\lim_{\\operatorname{Re}(z)\\to -\\infty} R(z) = 0$. Do not assume any other formulas not derivable from these facts.\n\nTask A. Construct a consistent linear multistep method that is absolutely stable (A-stable) but not L-stable. Express it in the form $\\sum_{j=0}^{s} \\alpha_j y_{n+j} = h \\sum_{j=0}^{s} \\beta_j f_{n+j}$ with specific coefficients, and derive, by applying it to the linear test equation $y'=\\lambda y$, the closed-form amplification factor $R(z)$ in terms of $z = h \\lambda$. Justify both consistency and the claims about A-stability and failure of L-stability using only the base definitions above.\n\nTask B. Identify a stiff problem and a time step $h$ for which the method from Task A produces undesirable oscillations even though the method is A-stable, and explain the mechanism that causes those oscillations.\n\nProgramming task. Implement your construction and analysis in a single program that does the following.\n\n1) Fix the method from Task A by specifying numerical values for its coefficients $\\alpha_j$ and $\\beta_j$ (as constants in your code). Implement a function that, given complex $z$, computes the method’s amplification factor $R(z)$ by substituting the method into the test equation $y'=\\lambda y$ and solving for $y_{n+1}/y_n$.\n\n2) Consistency test. Using the consistency conditions $\\sum_{j=0}^{s} \\alpha_j = 0$ and $\\sum_{j=0}^{s} j \\alpha_j = \\sum_{j=0}^{s} \\beta_j$, return a boolean indicating whether both equalities hold to within an absolute tolerance of $10^{-12}$.\n\n3) A-stability spot checks. For the following test suite of values of $z$ with $\\operatorname{Re}(z) \\le 0$, compute booleans indicating whether $\\lvert R(z) \\rvert \\le 1$ holds within a tolerance of $10^{-12$}:\n- $z_1 = -1$\n- $z_2 = -100$\n- $z_3 = -1 + 10 i$\n- $z_4 = -50 + 200 i$\n\n4) Numerical L-stability check. Compute $\\lvert R(z) \\rvert$ at $z_\\star = -10^6$ and return a boolean that is true if and only if $\\lvert R(z_\\star)\\rvert  10^{-3}$. This provides a quantitative proxy for $\\lim_{\\operatorname{Re}(z)\\to -\\infty} R(z) = 0$. For an L-stable method this proxy would evaluate to true at such a large negative $z_\\star$; for a method that is not L-stable it should evaluate to false.\n\n5) Stiff-oscillation demonstration. Consider the stiff scalar problem $y' = \\lambda y$ with $\\lambda = -10000$, initial condition $y(0) = 1$, final time $T = 1$, and the fixed step size $h = 0.1$. Using the method from Task A:\n- Compute the $N = T/h = 10$ steps and count the number of sign changes in the sequence $(y_0,y_1,\\dots,y_N)$, where a sign change occurs at step $n$ if $y_n y_{n+1}  0$.\n- Report the final numerical magnitude $\\lvert y_N \\rvert$.\n- Compute the exact final magnitude $\\lvert y(T) \\rvert = \\lvert y(0) \\exp(\\lambda T) \\rvert$.\n- Report the absolute error $\\lvert y_N - y(T) \\rvert$.\n\nFinal output format. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets in the following order: \n- the consistency boolean from step $2$,\n- the list of four booleans from step $3$ in the order $[z_1,z_2,z_3,z_4]$,\n- the L-stability proxy boolean from step $4$,\n- and the list $[\\text{sign\\_changes}, \\lvert y_N\\rvert, \\lvert y(T)\\rvert, \\lvert y_N - y(T)\\rvert]$ from step $5$.\nFor example, your output must look like \n$[\\text{True},[b_1,b_2,b_3,b_4],\\text{False},[k,a,e,\\varepsilon]]$ \nwith the booleans, integer, and floating-point numbers replacing $b_j$, $k$, $a$, $e$, and $\\varepsilon$ respectively. No additional text or lines should be printed. All angles, if any were to appear, must be in radians, but none are needed here. All quantities in this problem are dimensionless, so no physical unit conversion is required.", "solution": "The problem is valid. It is a well-posed and self-contained exercise in the numerical analysis of ordinary differential equations, grounded in standard definitions and principles. All necessary information is provided.\n\nThe primary task is to construct and analyze a linear multistep method (LMM) that is A-stable but not L-stable, and then to demonstrate its behavior computationally.\n\n### Task A: Method Construction and Analysis\n\nWe seek a consistent linear multistep method (LMM) of the form $\\sum_{j=0}^{s} \\alpha_j y_{n+j} = h \\sum_{j=0}^{s} \\beta_j f_{n+j}$ which is A-stable but not L-stable. A canonical example of such a method is the trapezoidal rule, which is a one-step method ($s=1$).\n\nThe trapezoidal rule is derived by integrating the ordinary differential equation $y' = f(t,y)$ from $t_n$ to $t_{n+1}$ and approximating the integral of $f$ using the trapezoidal quadrature rule:\n$$ y(t_{n+1}) - y(t_n) = \\int_{t_n}^{t_{n+1}} f(t, y(t)) dt \\approx \\frac{h}{2} [f(t_n, y(t_n)) + f(t_{n+1}, y(t_{n+1}))] $$\nThis gives the numerical method:\n$$ y_{n+1} - y_n = \\frac{h}{2} (f_n + f_{n+1}) $$\nwhere $f_k = f(t_k, y_k)$ and $h = t_{n+1}-t_n$.\n\nTo express this in the standard LMM form, we rewrite it as:\n$$ (1)y_{n+1} + (-1)y_n = h \\left( \\frac{1}{2} f_{n+1} + \\frac{1}{2} f_n \\right) $$\nComparing this to $\\sum_{j=0}^{1} \\alpha_j y_{n+j} = h \\sum_{j=0}^{1} \\beta_j f_{n+j}$, we identify the coefficients:\n- $s = 1$\n- $\\alpha_0 = -1$, $\\alpha_1 = 1$\n- $\\beta_0 = \\frac{1}{2}$, $\\beta_1 = \\frac{1}{2}$\n\n**Consistency Justification:**\nA method is consistent if $\\sum_{j=0}^{s} \\alpha_j = 0$ and $\\sum_{j=0}^{s} j \\alpha_j = \\sum_{j=0}^{s} \\beta_j$.\n1.  First condition: $\\sum_{j=0}^{1} \\alpha_j = \\alpha_0 + \\alpha_1 = -1 + 1 = 0$. The condition is satisfied.\n2.  Second condition:\n    - Left-hand side: $\\sum_{j=0}^{1} j \\alpha_j = (0 \\cdot \\alpha_0) + (1 \\cdot \\alpha_1) = 0 \\cdot (-1) + 1 \\cdot 1 = 1$.\n    - Right-hand side: $\\sum_{j=0}^{1} \\beta_j = \\beta_0 + \\beta_1 = \\frac{1}{2} + \\frac{1}{2} = 1$.\n    - Since $1=1$, the second condition is also satisfied.\nThus, the trapezoidal rule is a consistent method.\n\n**Derivation of the Amplification Factor $R(z)$:**\nWe apply the method to the linear test equation $y' = \\lambda y$, where $\\lambda \\in \\mathbb{C}$. For this equation, $f_{n} = \\lambda y_{n}$ and $f_{n+1} = \\lambda y_{n+1}$. Substituting into the method's formula:\n$$ y_{n+1} - y_n = \\frac{h}{2} (\\lambda y_n + \\lambda y_{n+1}) $$\nLet $z = h \\lambda$. The equation becomes:\n$$ y_{n+1} - y_n = \\frac{z}{2} (y_n + y_{n+1}) $$\nWe solve for the amplification factor $R(z) = y_{n+1} / y_n$:\n$$ y_{n+1} - \\frac{z}{2} y_{n+1} = y_n + \\frac{z}{2} y_n $$\n$$ y_{n+1} \\left(1 - \\frac{z}{2}\\right) = y_n \\left(1 + \\frac{z}{2}\\right) $$\n$$ R(z) = \\frac{y_{n+1}}{y_n} = \\frac{1 + z/2}{1 - z/2} $$\n\n**Stability Justification:**\n-   **A-stability:** A-stability requires $|R(z)| \\le 1$ for all $z$ with $\\operatorname{Re}(z) \\le 0$. Let $z = x + iy$, where $x = \\operatorname{Re}(z) \\le 0$.\n    $$ |R(z)|^2 = \\left| \\frac{1 + (x+iy)/2}{1 - (x+iy)/2} \\right|^2 = \\frac{|(1 + x/2) + i(y/2)|^2}{|(1 - x/2) - i(y/2)|^2} = \\frac{(1+x/2)^2 + (y/2)^2}{(1-x/2)^2 + (y/2)^2} $$\n    The condition $|R(z)|^2 \\le 1$ is equivalent to:\n    $$ (1+x/2)^2 + (y/2)^2 \\le (1-x/2)^2 + (y/2)^2 $$\n    $$ 1 + x + \\frac{x^2}{4} \\le 1 - x + \\frac{x^2}{4} $$\n    $$ 2x \\le 0 \\implies x \\le 0 $$\n    This is precisely the condition $\\operatorname{Re}(z) \\le 0$. Therefore, the trapezoidal rule is A-stable.\n\n-   **Failure of L-stability:** L-stability requires that the method is A-stable and, in addition, $\\lim_{\\operatorname{Re}(z)\\to -\\infty} R(z) = 0$. We evaluate the limit of our derived $R(z)$:\n    $$ \\lim_{\\operatorname{Re}(z)\\to -\\infty} R(z) = \\lim_{z \\to \\infty, \\operatorname{Re}(z) \\le 0} \\frac{1 + z/2}{1 - z/2} $$\n    Dividing the numerator and denominator by $z$:\n    $$ \\lim_{z \\to \\infty, \\operatorname{Re}(z) \\le 0} \\frac{1/z + 1/2}{1/z - 1/2} = \\frac{0 + 1/2}{0 - 1/2} = -1 $$\n    Since the limit is $-1$ and not $0$, the method is not L-stable.\n\n### Task B: Stiff Oscillation Mechanism\n\nThe lack of L-stability is responsible for undesirable behavior when solving stiff problems. A stiff ODE has components in its solution that decay at vastly different rates. The highly stable components correspond to eigenvalues $\\lambda$ with large negative real parts.\n\nFor the trapezoidal rule, when $\\operatorname{Re}(\\lambda)$ is large and negative, the value of $z = h\\lambda$ is also large and negative for a moderate step size $h$. As we have just shown, for such $z$, the amplification factor $R(z) \\to -1$. This means the numerical solution follows the recurrence $y_{n+1} \\approx -y_n$.\n\nThis leads to a persistent, non-decaying oscillation in the numerical solution (e.g., $y_0, -y_0, y_0, -y_0, \\dots$). However, the true solution component, $e^{\\lambda t}$, should decay to zero extremely rapidly and without oscillation. This failure of the numerical method to damp the stiff components is the hallmark of a method that is A-stable but not L-stable.\n\nFor the specific problem $y' = \\lambda y$ with $\\lambda = -10000$ and step size $h=0.1$, we have $z = h\\lambda = 0.1 \\times (-10000) = -1000$. The amplification factor is\n$$ R(-1000) = \\frac{1 - 1000/2}{1 + 1000/2} = \\frac{-499}{501} \\approx -0.996 $$\nThis value is very close to $-1$, so we expect $y_{n+1} \\approx -y_n$, resulting in oscillations that decay very slowly, with a magnitude $|y_n| = |R|^n |y_0|$ that remains close to $|y_0|$. In contrast, the true solution $y(t) = y_0 e^{-10000t}$ becomes negligible almost instantly. For example, at the end of the first step, $y(0.1) = y_0 e^{-1000} \\approx y_0 \\times 10^{-435}$. The numerical solution completely fails to capture this rapid decay.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Constructs, analyzes, and demonstrates the properties of the trapezoidal rule,\n    a linear multistep method that is A-stable but not L-stable.\n    \"\"\"\n    \n    # Task A: Define the method.\n    # The method is the trapezoidal rule: y_{n+1} - y_n = h/2 * (f_n + f_{n+1})\n    # This is a one-step method (s=1).\n    # alpha_0*y_n + alpha_1*y_{n+1} = h * (beta_0*f_n + beta_1*f_{n+1})\n    alpha = np.array([-1.0, 1.0])\n    beta = np.array([0.5, 0.5])\n    \n    # 1) Amplification factor R(z) for the trapezoidal rule\n    # R(z) = (1 + z/2) / (1 - z/2)\n    def get_R(z: complex) - complex:\n        return (1.0 + 0.5 * z) / (1.0 - 0.5 * z)\n\n    # 2) Consistency test\n    # Condition 1: sum(alpha_j) = 0\n    # Condition 2: sum(j * alpha_j) = sum(beta_j)\n    consistency_c1 = np.isclose(np.sum(alpha), 0.0, atol=1e-12)\n    rho_prime_at_1 = np.sum(np.arange(len(alpha)) * alpha)\n    sigma_at_1 = np.sum(beta)\n    consistency_c2 = np.isclose(rho_prime_at_1, sigma_at_1, atol=1e-12)\n    consistency_ok = bool(consistency_c1 and consistency_c2)\n\n    # 3) A-stability spot checks\n    # Check if |R(z)| = 1 for Re(z) = 0.\n    # We add a tolerance to the right side to account for floating point error\n    # where |R(z)| should be exactly 1 but might be 1 + epsilon.\n    z_tests = [-1.0, -100.0, -1.0 + 10.0j, -50.0 + 200.0j]\n    astability_checks = []\n    for z in z_tests:\n        # For A-stability, |R(z)| must be = 1.\n        # Adding a small tolerance to the check.\n        is_stable = abs(get_R(z)) = 1.0 + 1e-12\n        astability_checks.append(is_stable)\n\n    # 4) Numerical L-stability check\n    # Check if lim_{Re(z) - -inf} R(z) = 0.\n    # We use a large negative z as a proxy.\n    z_star = -1.0e6\n    R_mag_at_large_neg_z = abs(get_R(z_star))\n    # For L-stability, this magnitude should be close to 0. We test if it's  10^-3.\n    # For the trapezoidal rule, |R(z)| - 1, so this check should fail.\n    lstability_check = bool(R_mag_at_large_neg_z  1e-3)\n    \n    # 5) Stiff-oscillation demonstration\n    lam = -10000.0\n    y0 = 1.0\n    T = 1.0\n    h = 0.1\n    N = int(T / h)\n    \n    # The numerical solution is y_n = R(h*lambda)^n * y_0\n    z = h * lam\n    amp_factor = get_R(z)\n    \n    y = np.array([y0 * (amp_factor**n) for n in range(N + 1)])\n    \n    # Count sign changes\n    sign_changes = 0\n    for i in range(N):\n        if y[i] * y[i+1]  0:\n            sign_changes += 1\n            \n    # Final numerical magnitude\n    yN_mag = abs(y[N])\n    \n    # Exact final magnitude\n    # y(T) = y(0) * exp(lambda * T)\n    # np.exp(-10000) underflows to 0.0 in standard double precision\n    yT_exact = y0 * np.exp(lam * T)\n    yT_exact_mag = abs(yT_exact)\n    \n    # Absolute error\n    abs_error = abs(y[N] - yT_exact)\n    \n    stiff_results = [sign_changes, yN_mag, yT_exact_mag, abs_error]\n\n    # Final output formatting\n    # Must match: [True,[b_1,b_2,b_3,b_4],False,[k,a,e,\\varepsilon]]\n    astab_str = ','.join(map(str, astability_checks))\n    stiff_str = ','.join(map(str, stiff_results))\n    \n    # Python's str() for booleans is \"True\" or \"False\", which is what's needed.\n    # f-string interpolation automatically calls str()\n    print(f\"[{consistency_ok},[{astab_str}],{lstability_check},[{stiff_str}]]\")\n\nsolve()\n```", "id": "3202108"}, {"introduction": "The choice of a numerical method is not always straightforward; it often involves trade-offs between accuracy, stability, and computational cost. This practice explores the nuanced relationship between A-stability and L-stability by comparing the trapezoidal rule and the backward Euler method. You will discover that for certain problems, such as weakly damped oscillators, the excessive damping of an L-stable method can be less desirable than the properties of a merely A-stable, higher-order method. [@problem_id:3202129]", "problem": "You are asked to formalize and implement a numerical stability comparison between two implicit one-step methods for ordinary differential equations in the context of weakly damped oscillations. The methods are the implicit trapezoid rule and the backward Euler method. The comparison is framed using the Dahlquist linear test equation, which is the foundation for absolute stability analysis.\n\nStarting point and definitions:\n- Consider the Dahlquist linear test equation $y'(t) = \\lambda y(t)$, where $\\lambda \\in \\mathbb{C}$ and $t \\in \\mathbb{R}$. For a constant step size $h  0$, define $z = h \\lambda$.\n- A numerical one-step method applied to the Dahlquist test equation induces a linear recurrence of the form $y_{n+1} = R(z) y_n$, where $R(z)$ is called the stability (amplification) function.\n- A method is said to be A-stable if $|R(z)| \\le 1$ for all $z \\in \\mathbb{C}$ with $\\operatorname{Re}(z) \\le 0$.\n- A method is said to be L-stable if it is A-stable and additionally satisfies $\\lim_{z \\to -\\infty} R(z) = 0$ along the negative real axis.\n\nTask description:\n1. Derive, from the definitions of the backward Euler method and the implicit trapezoid rule applied to $y'(t) = \\lambda y(t)$, the corresponding stability functions $R_{\\mathrm{BE}}(z)$ and $R_{\\mathrm{TR}}(z)$, where $z = h \\lambda$.\n2. Consider the complex parameter $\\lambda = -\\gamma + i \\omega$ with $\\gamma \\ge 0$ and $\\omega  0$ representing a weakly damped oscillation when $\\gamma$ is small. For a given step size $h$ and number of steps $N$, the exact solution satisfies $|y(Nh)| = |y(0)| \\exp(-\\gamma N h)$. A numerical method induces a discrete amplitude evolution $|y_N| = |R(z)|^N |y_0|$. For comparison of amplitude preservation, define the amplitude error after $N$ steps by\n$$\nE_{\\mathrm{amp}} = \\left|\\, |R(z)|^N - \\exp(-\\gamma N h) \\,\\right|.\n$$\n3. Implement a program that, for each test case in the test suite below, evaluates $E_{\\mathrm{amp}}$ for both methods, using the derived $R_{\\mathrm{BE}}(z)$ and $R_{\\mathrm{TR}}(z)$, and returns a boolean indicating whether the implicit trapezoid rule has strictly smaller amplitude error than backward Euler for that test case. That is, for each test case return $\\mathrm{True}$ if $E_{\\mathrm{amp}}^{\\mathrm{TR}}  E_{\\mathrm{amp}}^{\\mathrm{BE}}$, and $\\mathrm{False}$ otherwise.\n\nScientific realism requirement:\n- Use the scalar complex model $\\lambda = -\\gamma + i \\omega$ with $\\gamma$ small to emulate weakly damped oscillations. No physical units are involved in this problem. No angles are explicitly used, so no angle unit specification is required.\n\nTest suite:\n- Case $1$ (happy path, weak damping, moderate step): $\\gamma = 0.01$, $\\omega = 10.0$, $h = 0.1$, $N = 100$.\n- Case $2$ (weak damping, large step size near oscillatory regime): $\\gamma = 0.01$, $\\omega = 10.0$, $h = 0.5$, $N = 20$.\n- Case $3$ (undamped oscillator, amplitude preservation boundary): $\\gamma = 0.0$, $\\omega = 10.0$, $h = 0.2$, $N = 50$.\n- Case $4$ (strong damping and large step illustrating L-stability benefit): $\\gamma = 50.0$, $\\omega = 10.0$, $h = 1.0$, $N = 10$.\n\nFinal output format:\n- Your program should produce a single line of output containing the boolean results for the test cases in order as a comma-separated list enclosed in square brackets, for example, $\\texttt{[True,False,True,True]}$. No other text should be printed.", "solution": "The user has provided a problem statement for validation and solution.\n\n### Step 1: Extract Givens\n- **Dahlquist Test Equation**: $y'(t) = \\lambda y(t)$, where $\\lambda \\in \\mathbb{C}$ and $t \\in \\mathbb{R}$.\n- **Dimensionless Parameter**: $z = h \\lambda$, for a constant step size $h  0$.\n- **Numerical Recurrence**: $y_{n+1} = R(z) y_n$, where $R(z)$ is the stability (amplification) function.\n- **A-stability**: A method is A-stable if $|R(z)| \\le 1$ for all $z \\in \\mathbb{C}$ with $\\operatorname{Re}(z) \\le 0$.\n- **L-stability**: A method is L-stable if it is A-stable and $\\lim_{z \\to -\\infty} R(z) = 0$ along the negative real axis.\n- **Task 1**: Derive stability functions $R_{\\mathrm{BE}}(z)$ for the backward Euler method and $R_{\\mathrm{TR}}(z)$ for the implicit trapezoid rule.\n- **Model Parameters**: $\\lambda = -\\gamma + i \\omega$ with $\\gamma \\ge 0$ and $\\omega  0$.\n- **Total Steps**: $N$.\n- **Exact Amplitude**: $|y(Nh)| = |y(0)| \\exp(-\\gamma N h)$.\n- **Numerical Amplitude**: $|y_N| = |R(z)|^N |y_0|$.\n- **Amplitude Error Definition**: $E_{\\mathrm{amp}} = \\left|\\, |R(z)|^N - \\exp(-\\gamma N h) \\,\\right|$.\n- **Task 2  3**: Implement a program to evaluate $E_{\\mathrm{amp}}$ for both methods and return $\\mathrm{True}$ if $E_{\\mathrm{amp}}^{\\mathrm{TR}}  E_{\\mathrm{amp}}^{\\mathrm{BE}}$, and $\\mathrm{False}$ otherwise.\n- **Test Suite**:\n    - Case $1$: $\\gamma = 0.01$, $\\omega = 10.0$, $h = 0.1$, $N = 100$.\n    - Case $2$: $\\gamma = 0.01$, $\\omega = 10.0$, $h = 0.5$, $N = 20$.\n    - Case $3$: $\\gamma = 0.0$, $\\omega = 10.0$, $h = 0.2$, $N = 50$.\n    - Case $4$: $\\gamma = 50.0$, $\\omega = 10.0$, $h = 1.0$, $N = 10$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is evaluated against the specified criteria:\n- **Scientifically Grounded**: The problem is a canonical exercise in the numerical analysis of ordinary differential equations. The concepts of A-stability, L-stability, the Dahlquist test equation, and the specific methods (backward Euler, trapezoid rule) are fundamental and well-established in the field of scientific computing. All definitions and premises are factually sound.\n- **Well-Posed**: The problem is specified with mathematical precision. It provides all necessary definitions, equations, and parameters to compute the required quantities. The comparison criterion is unambiguous, leading to a unique boolean result for each test case.\n- **Objective**: The problem is stated in formal, objective language. The analysis is based on a quantitative error metric, $E_{\\mathrm{amp}}$, free from subjectivity.\n- **Other Flaws**: The problem is free of the other listed flaws. It is formalizable, directly relevant to the specified topic, complete, consistent, and scientifically verifiable. It is not trivial, as it requires the correct derivation and implementation of standard but non-obvious numerical analysis concepts.\n\n### Step 3: Verdict and Action\nThe problem is **valid**. A reasoned solution will be provided.\n\n### Solution\n\nThe objective is to compare the amplitude error of the backward Euler and implicit trapezoid methods when applied to a model equation for weakly damped oscillations. This comparison will be conducted through the lens of absolute stability theory.\n\n**1. Derivation of Stability Functions**\n\nThe stability function $R(z)$ for a one-step method is derived by applying the method to the Dahlquist test equation, $y'(t) = \\lambda y(t)$, and expressing the numerical solution at step $n+1$, $y_{n+1}$, in the form $y_{n+1} = R(z) y_n$, where $z = h\\lambda$.\n\n**Backward Euler (BE) Method:**\nThe formula for the backward Euler method is:\n$$ y_{n+1} = y_n + h f(t_{n+1}, y_{n+1}) $$\nFor the test equation, $f(t,y) = \\lambda y$. Substituting this gives:\n$$ y_{n+1} = y_n + h \\lambda y_{n+1} $$\nWe solve for $y_{n+1}$:\n$$ y_{n+1} (1 - h\\lambda) = y_n $$\n$$ y_{n+1} = \\frac{1}{1 - h\\lambda} y_n $$\nBy defining $z = h\\lambda$, we identify the stability function for the backward Euler method as:\n$$ R_{\\mathrm{BE}}(z) = \\frac{1}{1-z} $$\n\n**Implicit Trapezoid Rule (TR) Method:**\nThe formula for the implicit trapezoid rule is:\n$$ y_{n+1} = y_n + \\frac{h}{2} [f(t_n, y_n) + f(t_{n+1}, y_{n+1})] $$\nSubstituting $f(t,y) = \\lambda y$ gives:\n$$ y_{n+1} = y_n + \\frac{h}{2} (\\lambda y_n + \\lambda y_{n+1}) $$\nWe gather terms involving $y_{n+1}$ on the left-hand side and terms involving $y_n$ on the right-hand side:\n$$ y_{n+1} \\left(1 - \\frac{h\\lambda}{2}\\right) = y_n \\left(1 + \\frac{h\\lambda}{2}\\right) $$\nSolving for $y_{n+1}$:\n$$ y_{n+1} = \\frac{1 + h\\lambda/2}{1 - h\\lambda/2} y_n $$\nWith $z = h\\lambda$, the stability function for the implicit trapezoid rule is:\n$$ R_{\\mathrm{TR}}(z) = \\frac{1 + z/2}{1 - z/2} $$\n\n**2. Amplitude Error Analysis**\n\nThe problem asks to compare the amplitude error, $E_{\\mathrm{amp}}$, for both methods. The error is defined as the absolute difference between the numerical amplitude decay factor after $N$ steps, $|R(z)|^N$, and the exact amplitude decay factor, $\\exp(-\\gamma N h)$.\n$$ E_{\\mathrm{amp}} = \\left|\\, |R(z)|^N - \\exp(-\\gamma N h) \\,\\right| $$\nThe parameter $z$ is computed for each test case using the given $\\gamma$, $\\omega$, and $h$:\n$$ z = h\\lambda = h(-\\gamma + i\\omega) = -h\\gamma + i(h\\omega) $$\nBoth methods are known to be A-stable, meaning that for any stable physical system ($\\operatorname{Re}(\\lambda) \\le 0$), the numerical solution does not grow spuriously. However, their quantitative behavior differs. The backward Euler method is L-stable, as $\\lim_{z\\to-\\infty} R_{\\mathrm{BE}}(z) = \\lim_{z\\to-\\infty} \\frac{1}{1-z} = 0$. This property is desirable for stiff problems where some components should decay very quickly. The trapezoid rule is not L-stable, since $\\lim_{z\\to-\\infty} R_{\\mathrm{TR}}(z) = \\lim_{z\\to-\\infty} \\frac{1+z/2}{1-z/2} = -1$. This means for components with very large negative real parts of $\\lambda$, the trapezoid rule damps them to a value near $(-1)^n y_0$, introducing a spurious oscillation, rather than damping them to zero. The trapezoid rule is, however, second-order accurate, whereas backward Euler is only first-order accurate. This suggests the trapezoid rule will be more accurate for smaller step sizes.\n\n**3. Algorithmic Procedure**\n\nFor each test case specified by the tuple $(\\gamma, \\omega, h, N)$:\n1.  Calculate the complex number $z = h(-\\gamma + i\\omega)$.\n2.  Calculate the stability function values $R_{\\mathrm{BE}}(z) = \\frac{1}{1-z}$ and $R_{\\mathrm{TR}}(z) = \\frac{1+z/2}{1-z/2}$.\n3.  Compute the absolute values $|R_{\\mathrm{BE}}(z)|$ and $|R_{\\mathrm{TR}}(z)|$.\n4.  Compute the numerical amplitude factors after $N$ steps: $|R_{\\mathrm{BE}}(z)|^N$ and $|R_{\\mathrm{TR}}(z)|^N$.\n5.  Calculate the exact amplitude factor: $A_{\\mathrm{exact}} = \\exp(-\\gamma N h)$.\n6.  Calculate the amplitude error for each method:\n    -   $E_{\\mathrm{amp}}^{\\mathrm{BE}} = \\big| |R_{\\mathrm{BE}}(z)|^N - A_{\\mathrm{exact}} \\big|$\n    -   $E_{\\mathrm{amp}}^{\\mathrm{TR}} = \\big| |R_{\\mathrm{TR}}(z)|^N - A_{\\mathrm{exact}} \\big|$\n7.  Perform the comparison: determine if $E_{\\mathrm{amp}}^{\\mathrm{TR}}  E_{\\mathrm{amp}}^{\\mathrm{BE}}$. The result is a boolean value.\nThis process is repeated for all test cases, and the boolean results are collected into a list.\n-   **Cases 1 and 2**: Here, damping is weak and the step size is moderate. The higher order of accuracy ($2$ for TR vs. $1$ for BE) is expected to give the trapezoid rule a significant advantage.\n-   **Case 3**: This is a purely oscillatory system ($\\gamma=0$). The exact solution has constant amplitude ($A_{\\mathrm{exact}}=1$). The trapezoid rule is known to be energy-conserving for such problems, meaning $|R_{\\mathrm{TR}}(z)|=1$ when $\\operatorname{Re}(z)=0$. Thus, $E_{\\mathrm{amp}}^{\\mathrm{TR}}$ will be zero. The backward Euler method introduces numerical dissipation, so $|R_{\\mathrm{BE}}(z)|1$, leading to a non-zero error.\n-   **Case 4**: This case represents a stiff problem with strong damping. The term $\\exp(-\\gamma N h)$ will be extremely close to $0$. The L-stability of the backward Euler method will ensure $|R_{\\mathrm{BE}}(z)|$ is very small, making $E_{\\mathrm{amp}}^{\\mathrm{BE}}$ also very small. The trapezoid rule's lack of L-stability means $|R_{\\mathrm{TR}}(z)|$ will be close to $1$, leading to a large amplitude error.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of comparing amplitude errors for Backward Euler\n    and Implicit Trapezoid methods for a set of test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (gamma, omega, h, N)\n    test_cases = [\n        (0.01, 10.0, 0.1, 100),   # Case 1\n        (0.01, 10.0, 0.5, 20),    # Case 2\n        (0.0, 10.0, 0.2, 50),     # Case 3\n        (50.0, 10.0, 1.0, 10),    # Case 4\n    ]\n\n    results = []\n    for gamma, omega, h, N in test_cases:\n        # Calculate the complex parameter z = h * lambda\n        z = h * (-gamma + 1j * omega)\n\n        # ---- Backward Euler (BE) Method ----\n        # Stability function R_BE(z) = 1 / (1 - z)\n        R_be = 1.0 / (1.0 - z)\n        # Numerical amplitude after N steps\n        num_amp_be = np.abs(R_be)**N\n\n        # ---- Implicit Trapezoid (TR) Method ----\n        # Stability function R_TR(z) = (1 + z/2) / (1 - z/2)\n        R_tr = (1.0 + z / 2.0) / (1.0 - z / 2.0)\n        # Numerical amplitude after N steps\n        num_amp_tr = np.abs(R_tr)**N\n\n        # ---- Exact Amplitude ----\n        # The exact amplitude decay factor is exp(-gamma * N * h)\n        exact_amp = np.exp(-gamma * N * h)\n\n        # ---- Amplitude Error Calculation ----\n        # E_amp = | |R(z)|^N - exp(-gamma * N * h) |\n        E_amp_be = np.abs(num_amp_be - exact_amp)\n        E_amp_tr = np.abs(num_amp_tr - exact_amp)\n\n        # ---- Comparison ----\n        # Check if the trapezoid rule has a strictly smaller amplitude error\n        comparison_result = E_amp_tr  E_amp_be\n        results.append(comparison_result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3202129"}]}