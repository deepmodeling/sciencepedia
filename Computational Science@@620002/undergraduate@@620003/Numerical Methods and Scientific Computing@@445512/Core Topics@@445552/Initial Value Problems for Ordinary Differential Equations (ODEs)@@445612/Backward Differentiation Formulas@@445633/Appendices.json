{"hands_on_practices": [{"introduction": "Backward Differentiation Formulas (BDFs) are implicit, meaning the value we want to find, $y_{n+1}$, appears on both sides of the defining equation. This exercise [@problem_id:2155156] serves as a fundamental starting point, demonstrating how to handle this implicitness for a general linear ordinary differential equation. By algebraically rearranging the BDF1 formula, you will derive an explicit update rule, a crucial first step in turning the theoretical formula into a practical algorithm.", "problem": "In numerical analysis, the Backward Differentiation Formulas (BDFs) are a family of implicit methods for the numerical integration of ordinary differential equations. Consider a first-order ordinary differential equation of the form $y'(t) = \\alpha y(t) + \\beta$, where $\\alpha$ and $\\beta$ are real constants. We wish to approximate the solution to this equation using a numerical scheme with a constant step size $h$.\n\nLet $y_n$ be the numerical approximation of the true solution $y(t_n)$ at time $t_n = t_0 + nh$. The first-order Backward Differentiation Formula (BDF1), also known as the Backward Euler method, approximates the derivative at time $t_{n+1}$ using the backward difference:\n$$\ny'(t_{n+1}) \\approx \\frac{y_{n+1} - y_n}{h}\n$$\nBy evaluating the differential equation at time $t_{n+1}$ and substituting this approximation, we obtain a recurrence relation for $y_{n+1}$.\n\nDerive a fully explicit formula for the next approximation, $y_{n+1}$, in terms of the current approximation $y_n$, the step size $h$, and the constants $\\alpha$ and $\\beta$.", "solution": "We start from the given differential equation $y'(t)=\\alpha y(t)+\\beta$ and the BDF1 (Backward Euler) approximation of the derivative at $t_{n+1}$:\n$$\ny'(t_{n+1}) \\approx \\frac{y_{n+1}-y_{n}}{h}.\n$$\nEvaluating the differential equation at $t_{n+1}$ and approximating $y(t_{n+1})$ by $y_{n+1}$ gives\n$$\n\\frac{y_{n+1}-y_{n}}{h}=\\alpha y_{n+1}+\\beta.\n$$\nMultiplying both sides by $h$,\n$$\ny_{n+1}-y_{n}=h\\alpha y_{n+1}+h\\beta.\n$$\nCollecting terms in $y_{n+1}$ on the left-hand side,\n$$\n(1-h\\alpha)y_{n+1}=y_{n}+h\\beta.\n$$\nAssuming $1-h\\alpha \\neq 0$, we solve for $y_{n+1}$:\n$$\ny_{n+1}=\\frac{y_{n}+h\\beta}{1-h\\alpha}.\n$$\nThis provides the fully explicit update formula in terms of $y_{n}$, $h$, $\\alpha$, and $\\beta$.", "answer": "$$\\boxed{\\frac{y_{n}+h\\beta}{1-h\\alpha}}$$", "id": "2155156"}, {"introduction": "While linear ODEs allow for a direct algebraic solution for the next step, most real-world problems are nonlinear. This practice [@problem_id:2155132] addresses this common scenario, where the BDF equation becomes a nonlinear algebraic equation that cannot be solved directly. You will learn to reframe the implicit step as a root-finding problem and apply Newton's method, a powerful and widely used iterative technique, to find the solution. This skill is essential for implementing BDF solvers for complex, nonlinear systems.", "problem": "Consider the problem of numerically solving the autonomous Ordinary Differential Equation (ODE), a type of differential equation that does not explicitly depend on the independent variable. The specific ODE under consideration is:\n$$y'(t) = \\cos(y(t))$$\nAn implicit numerical scheme is employed to approximate the solution. Let $y_n$ be the numerical approximation of the solution $y(t_n)$ at time $t_n$. With a constant time step $h$, so that $t_{n+1} = t_n + h$, the approximation at the next time step, $y_{n+1}$, is determined by the following implicit equation:\n$$y_{n+1} = y_n + h \\cos(y_{n+1})$$\nTo find the value of $y_{n+1}$ at each step, we must solve this equation. This is accomplished by finding the root of the function $g(x) = x - y_n - h \\cos(x)$, where the root $x$ corresponds to $y_{n+1}$. The root is found using an iterative procedure. Let $y_{n+1}^{(k)}$ be the $k$-th approximation of the root. The subsequent approximation, $y_{n+1}^{(k+1)}$, is determined by finding the root of the line that is tangent to the function $g(x)$ at the point $x = y_{n+1}^{(k)}$.\n\nYour task is to derive the iterative update rule for $y_{n+1}^{(k+1)}$. Express your answer in terms of $y_{n+1}^{(k)}$, $y_n$, and the step size $h$.", "solution": "We are given the implicit equation for $y_{n+1}$ as the root of $g(x)=x-y_{n}-h\\cos(x)$. To compute $y_{n+1}$ iteratively, we apply Newton's method, which updates an iterate $x^{(k)}$ via\n$$\nx^{(k+1)}=x^{(k)}-\\frac{g(x^{(k)})}{g'(x^{(k)})}.\n$$\nFirst, compute the derivative of $g(x)$:\n$$\ng'(x)=\\frac{d}{dx}\\left(x-y_{n}-h\\cos(x)\\right)=1+h\\sin(x).\n$$\nUsing $x^{(k)}=y_{n+1}^{(k)}$, we substitute into Newton's update:\n$$\ny_{n+1}^{(k+1)}=y_{n+1}^{(k)}-\\frac{y_{n+1}^{(k)}-y_{n}-h\\cos\\!\\left(y_{n+1}^{(k)}\\right)}{1+h\\sin\\!\\left(y_{n+1}^{(k)}\\right)}.\n$$\nThis gives the required iterative rule expressed in terms of $y_{n+1}^{(k)}$, $y_{n}$, and $h$.", "answer": "$$\\boxed{y_{n+1}^{(k+1)}=y_{n+1}^{(k)}-\\dfrac{y_{n+1}^{(k)}-y_{n}-h\\cos\\!\\left(y_{n+1}^{(k)}\\right)}{1+h\\sin\\!\\left(y_{n+1}^{(k)}\\right)}}$$", "id": "2155132"}, {"introduction": "A numerical method is only useful if it is stable, meaning that small computational errors do not grow uncontrollably over time. This exercise [@problem_id:2155174] moves from application to analysis, exploring the crucial concept of zero-stability, a prerequisite for any convergent linear multistep method. By analyzing the roots of the characteristic polynomial for the second-order BDF (BDF2), you will verify that it satisfies the root condition, providing insight into the theoretical foundation that makes the BDF family so robust and reliable for scientific computing.", "problem": "In the field of numerical analysis, linear multistep methods are used for the numerical solution of ordinary differential equations. A fundamental property of such a method is its zero-stability, which is essential for convergence. A linear multistep method is defined to be zero-stable if all roots of its first characteristic polynomial, $\\rho(z)$, satisfy the root condition:\n1. All roots must lie within or on the unit circle in the complex plane, i.e., their magnitude $|z|$ must be less than or equal to 1.\n2. Any root that lies exactly on the unit circle (i.e., $|z|=1$) must be a simple root (i.e., not a repeated root).\n\nConsider the two-step Backward Differentiation Formula (BDF2), a popular method for solving stiff differential equations. Its first characteristic polynomial is given by:\n$$\n\\rho(z) = \\frac{3}{2}z^2 - 2z + \\frac{1}{2}\n$$\n\nBy finding the roots of this polynomial and applying the root condition, determine which of the following statements correctly describes the zero-stability of the BDF2 method.\n\nA. The method is not zero-stable because a root lies outside the unit circle.\n\nB. The method is not zero-stable because there is a multiple root on the unit circle.\n\nC. The method is zero-stable because all roots lie strictly inside the unit circle.\n\nD. The method is zero-stable because all roots have a magnitude less than or equal to one, and the root on the unit circle is simple.\n\nE. The method is not zero-stable because one of its roots is a non-integer fraction.", "solution": "Zero-stability requires that all roots of the first characteristic polynomial lie in the closed unit disk and that any root on the unit circle be simple.\n\nGiven the BDF2 characteristic polynomial\n$$\n\\rho(z) = \\frac{3}{2}z^{2} - 2z + \\frac{1}{2},\n$$\nwe find its roots by solving $\\rho(z)=0$. Multiply by $2$ to clear denominators:\n$$\n3z^{2} - 4z + 1 = 0.\n$$\nApply the quadratic formula to $az^{2} + bz + c = 0$ with $a=3$, $b=-4$, $c=1$:\n$$\nz = \\frac{-b \\pm \\sqrt{b^{2} - 4ac}}{2a} = \\frac{4 \\pm \\sqrt{16 - 12}}{6} = \\frac{4 \\pm 2}{6}.\n$$\nThus the two roots are\n$$\nz_{1} = \\frac{6}{6} = 1, \\qquad z_{2} = \\frac{2}{6} = \\frac{1}{3}.\n$$\nTheir magnitudes are\n$$\n|z_{1}| = 1, \\qquad |z_{2}| = \\frac{1}{3} < 1.\n$$\nBoth roots lie in or on the unit circle, and the root on the unit circle, $z=1$, is simple because the roots are distinct. Therefore the root condition is satisfied and the method is zero-stable.\n\nAmong the given statements, this corresponds to: all roots have magnitude less than or equal to one, and the root on the unit circle is simple.", "answer": "$$\\boxed{D}$$", "id": "2155174"}]}