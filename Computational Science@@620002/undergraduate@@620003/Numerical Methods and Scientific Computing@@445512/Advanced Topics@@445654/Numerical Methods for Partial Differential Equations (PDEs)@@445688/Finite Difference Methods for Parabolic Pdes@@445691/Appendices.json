{"hands_on_practices": [{"introduction": "This problem serves as a comprehensive introduction to the full workflow of solving a parabolic PDE. It tackles the heat equation with an added term for heat loss, a common feature in realistic thermal models. You will start from first principles to derive a Forward-Time Central-Space (FTCS) scheme, a cornerstone of explicit methods. This exercise provides critical practice in performing Von Neumann stability analysis to determine the constraints on your time step $\\Delta t$, and you will verify your numerical solution against an exact analytical solution, a crucial skill for building confidence in your code. [@problem_id:3229635]", "problem": "Consider a one-dimensional thin rod of length $L$ with temperature field $u(x,t)$ (in $\\mathrm{K}$) governed by the linear heat equation with distributed heat loss to ambient air,\n$$\nu_t = k\\,u_{xx} - h\\left(u - u_{\\mathrm{amb}}\\right), \\quad 0 < x < L,\\ t>0,\n$$\nsubject to Dirichlet boundary conditions\n$$\nu(0,t) = u(L,t) = u_{\\mathrm{amb}},\n$$\nand initial condition\n$$\nu(x,0) = u_{\\mathrm{amb}} + A \\sin\\left(\\frac{n\\pi x}{L}\\right).\n$$\nHere, $k$ is the thermal diffusivity (in $\\mathrm{m}^2/\\mathrm{s}$), $h$ is an effective linear cooling coefficient (in $\\mathrm{s}^{-1}$), $u_{\\mathrm{amb}}$ is the ambient temperature (in $\\mathrm{K}$), $A$ is the initial mode amplitude (in $\\mathrm{K}$), and $n$ is a positive integer mode index.\n\nYour tasks are:\n\n1. Starting from the partial differential equation and the definitions of the forward difference in time and the central difference in space, derive a Forward-Time Central-Space (FTCS) finite difference scheme on a uniform grid with spacing $\\Delta x$ and time step $\\Delta t$ for the transformed variable $v(x,t) = u(x,t) - u_{\\mathrm{amb}}$. State clearly the update rule for interior grid points, and the treatment of boundary conditions in terms of $v$.\n\n2. Using Von Neumann (Fourier) stability analysis on the homogeneous problem for $v$, derive a necessary stability condition for the explicit FTCS scheme you obtained in task 1. Express the condition as a constraint that relates $\\Delta t$, $\\Delta x$, $k$, and $h$. Your derivation must begin from the discrete amplification factor for a Fourier mode and enforce the magnitude constraint required for stability.\n\n3. For the special initial condition $v(x,0) = A \\sin\\left(\\frac{n\\pi x}{L}\\right)$ with homogeneous Dirichlet boundaries $v(0,t) = v(L,t) = 0$, derive the exact solution $v(x,t)$ of the continuous problem. Then express the exact solution for $u(x,t)$.\n\n4. Implement a program that:\n   - Constructs a uniform grid with $N$ subintervals on $[0,L]$, so the grid points are $x_j = j\\Delta x$ with $\\Delta x = L/N$ and $j=0,1,\\dots,N$.\n   - Initializes $u_j^0 = u_{\\mathrm{amb}} + A \\sin\\left(\\frac{n\\pi x_j}{L}\\right)$ for $j=0,\\dots,N$, and enforces the boundary conditions $u_0^n=u_N^n=u_{\\mathrm{amb}}$ for all time steps $n$.\n   - Advances the solution in time using the explicit FTCS update you derived in task 1 for $v=u-u_{\\mathrm{amb}}$, for a prescribed number of time steps $M$ with step size $\\Delta t$.\n   - At final time $T = M\\Delta t$, computes the discrete $L^2$ error (in $\\mathrm{K}$)\n     $$\n     E = \\left(\\Delta x \\sum_{j=0}^{N} \\left[u_j^M - u_{\\mathrm{exact}}(x_j,T)\\right]^2 \\right)^{1/2}\n     $$\n     where $u_{\\mathrm{exact}}(x,T)$ is the exact solution from task 3.\n   - Independently checks the theoretical stability condition you derived in task 2 for the chosen $\\Delta t$ and $\\Delta x$, and returns a boolean indicating whether the condition holds.\n\n5. Use the following test suite. Unless otherwise specified, take $L=1\\,\\mathrm{m}$, $u_{\\mathrm{amb}}=300\\,\\mathrm{K}$, $A=2\\,\\mathrm{K}$, $n=1$, and $N=50$.\n   - Test 1 (happy path): $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$, $h=0.1\\,\\mathrm{s}^{-1}$, $\\Delta t=0.25\\,\\mathrm{s}$, $M=4$.\n   - Test 2 (near stability boundary): $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$, $h=0.1\\,\\mathrm{s}^{-1}$, let $\\Delta t = 0.95 \\,\\Delta t_{\\max}$, $M=4$, where $\\Delta t_{\\max}$ is the maximum time step permitted by your stability condition in task 2 for the given $k$, $h$, and $\\Delta x$.\n   - Test 3 (violates stability): $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$, $h=0.1\\,\\mathrm{s}^{-1}$, let $\\Delta t = 1.05 \\,\\Delta t_{\\max}$, $M=4$.\n   - Test 4 (pure diffusion limit): $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$, $h=0\\,\\mathrm{s}^{-1}$, let $\\Delta t = 0.49 \\,\\Delta t_{\\max}$, $M=10$.\n   - Test 5 (pure reaction limit): $k=0\\,\\mathrm{m}^2/\\mathrm{s}$, $h=2.0\\,\\mathrm{s}^{-1}$, take $\\Delta t = 1.9/h\\,\\mathrm{s}$, $M=6$.\n\n6. Units and outputs:\n   - All lengths must be in $\\mathrm{m}$, times in $\\mathrm{s}$, and temperatures in $\\mathrm{K}$.\n   - Report each discrete $L^2$ error $E$ in $\\mathrm{K}$, rounded to six decimal places.\n   - For each test, also report a boolean indicating whether your theoretical stability condition holds for the chosen $\\Delta t$ and $\\Delta x$.\n   - Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order\n     $$\n     [E_1,\\ \\mathrm{stable}_1,\\ E_2,\\ \\mathrm{stable}_2,\\ E_3,\\ \\mathrm{stable}_3,\\ E_4,\\ \\mathrm{stable}_4,\\ E_5,\\ \\mathrm{stable}_5].\n     $$\n\nYour program must be completely self-contained, accept no external input, and directly implement the above tests. The final printed output must be exactly one line in the specified format.", "solution": "The user-provided problem will first be subjected to a rigorous validation process.\n\n### Step 1: Extract Givens\n\n**Partial Differential Equation (PDE):**\n$u_t = k\\,u_{xx} - h\\left(u - u_{\\mathrm{amb}}\\right)$, for $0 < x < L$, $t>0$.\n\n**Boundary Conditions (BCs):**\n$u(0,t) = u(L,t) = u_{\\mathrm{amb}}$.\n\n**Initial Condition (IC):**\n$u(x,0) = u_{\\mathrm{amb}} + A \\sin\\left(\\frac{n\\pi x}{L}\\right)$.\n\n**Definitions:**\n- $u(x,t)$: Temperature field in $\\mathrm{K}$.\n- $k$: Thermal diffusivity in $\\mathrm{m}^2/\\mathrm{s}$.\n- $h$: Effective linear cooling coefficient in $\\mathrm{s}^{-1}$.\n- $u_{\\mathrm{amb}}$: Ambient temperature in $\\mathrm{K}$.\n- $A$: Initial mode amplitude in $\\mathrm{K}$.\n- $n$: Positive integer mode index.\n- $L$: Length of the rod in $\\mathrm{m}$.\n- Transformed variable: $v(x,t) = u(x,t) - u_{\\mathrm{amb}}$.\n\n**Grid Parameters:**\n- $N$: Number of subintervals.\n- $\\Delta x = L/N$: Grid spacing.\n- $x_j = j\\Delta x$ for $j=0,1,\\dots,N$: Grid points.\n- $\\Delta t$: Time step.\n- $M$: Number of time steps.\n- $T = M\\Delta t$: Final time.\n\n**Tasks:**\n1. Derive the Forward-Time Central-Space (FTCS) finite difference scheme for $v(x,t)$.\n2. Derive the Von Neumann stability condition for the scheme.\n3. Derive the exact analytical solution $u_{\\mathrm{exact}}(x,t)$.\n4. Implement a program to solve the problem numerically, compute the discrete $L^2$ error, and check stability.\n5. Execute the program for a specific suite of five test cases.\n\n**Error Metric:**\nDiscrete $L^2$ error: $E = \\left(\\Delta x \\sum_{j=0}^{N} \\left[u_j^M - u_{\\mathrm{exact}}(x_j,T)\\right]^2 \\right)^{1/2}$.\n\n**Test Suite Commons:**\n$L=1\\,\\mathrm{m}$, $u_{\\mathrm{amb}}=300\\,\\mathrm{K}$, $A=2\\,\\mathrm{K}$, $n=1$, $N=50$.\n\n**Test Case Specifics:**\n- Test 1: $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$, $h=0.1\\,\\mathrm{s}^{-1}$, $\\Delta t=0.25\\,\\mathrm{s}$, $M=4$.\n- Test 2: $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$, $h=0.1\\,\\mathrm{s}^{-1}$, $\\Delta t = 0.95 \\,\\Delta t_{\\max}$, $M=4$.\n- Test 3: $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$, $h=0.1\\,\\mathrm{s}^{-1}$, $\\Delta t = 1.05 \\,\\Delta t_{\\max}$, $M=4$.\n- Test 4: $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$, $h=0\\,\\mathrm{s}^{-1}$, $\\Delta t = 0.49 \\,\\Delta t_{\\max}$, $M=10$.\n- Test 5: $k=0\\,\\mathrm{m}^2/\\mathrm{s}$, $h=2.0\\,\\mathrm{s}^{-1}$, $\\Delta t = 1.9/h\\,\\mathrm{s}$, $M=6$.\n\n**Output Format:**\nA single line of text: $[E_1, \\mathrm{stable}_1, E_2, \\mathrm{stable}_2, E_3, \\mathrm{stable}_3, E_4, \\mathrm{stable}_4, E_5, \\mathrm{stable}_5]$, with errors rounded to six decimal places.\n\n### Step 2: Validate Using Extracted Givens\n\n- **Scientifically Grounded:** The problem is based on the linear heat equation with a first-order reaction term (Newton's law of cooling), a fundamental and well-established model in physics and engineering. All parameters are physically meaningful.\n- **Well-Posed:** The problem is a standard initial-boundary value problem for a parabolic PDE. The initial and boundary conditions are specified and are consistent, ensuring that a unique and stable solution exists for the continuous problem.\n- **Objective:** The problem is defined with precise mathematical equations and parameters. The tasks are objective and require formal derivation and computation.\n- **Complete and Consistent:** All necessary information ($k$, $h$, $L$, $A$, $n$, $u_{\\mathrm{amb}}$, $N$, $M$, $\\Delta t$) is provided for each test case, either directly or via a formula based on other parameters. The transformation $v=u-u_{\\mathrm{amb}}$ is standard and simplifies the PDE and BCs consistently.\n- **Formalizable and Relevant:** The problem is directly relevant to the topic of finite difference methods for parabolic PDEs. It is a canonical example used in teaching numerical analysis and scientific computing.\n\n### Step 3: Verdict and Action\nThe problem is scientifically sound, well-posed, and complete. All tasks are clearly specified and mathematically tractable. The problem is deemed **valid**. A full solution will be provided.\n\n### Solution Derivations\n\n#### Task 1: Derivation of the FTCS Scheme\nWe begin with the transformed variable $v(x,t) = u(x,t) - u_{\\mathrm{amb}}$. Taking partial derivatives, we find $v_t = u_t$ and $v_{xx} = u_{xx}$. Substituting these into the original PDE gives the homogeneous equation for $v$:\n$$\nv_t = k v_{xx} - h v\n$$\nThe boundary conditions become $v(0,t) = u(0,t) - u_{\\mathrm{amb}} = u_{\\mathrm{amb}} - u_{\\mathrm{amb}} = 0$ and $v(L,t) = u(L,t) - u_{\\mathrm{amb}} = u_{\\mathrm{amb}} - u_{\\mathrm{amb}} = 0$.\n\nLet the discrete grid be defined by $x_j = j\\Delta x$ and $t_m = m\\Delta t$, and let $v_j^m \\approx v(x_j, t_m)$. We approximate the derivatives using finite differences:\n- Forward difference in time (at $t_m, x_j$): $v_t \\approx \\frac{v_j^{m+1} - v_j^m}{\\Delta t}$\n- Central difference in space (at $t_m, x_j$): $v_{xx} \\approx \\frac{v_{j+1}^m - 2v_j^m + v_{j-1}^m}{(\\Delta x)^2}$\n\nSubstituting these approximations into the PDE for $v$:\n$$\n\\frac{v_j^{m+1} - v_j^m}{\\Delta t} = k \\left( \\frac{v_{j+1}^m - 2v_j^m + v_{j-1}^m}{(\\Delta x)^2} \\right) - h v_j^m\n$$\nWe solve for the temperature at the next time step, $v_j^{m+1}$:\n$$\nv_j^{m+1} = v_j^m + \\frac{k\\Delta t}{(\\Delta x)^2} (v_{j+1}^m - 2v_j^m + v_{j-1}^m) - h\\Delta t v_j^m\n$$\nLet $\\mu = \\frac{k\\Delta t}{(\\Delta x)^2}$ be the numerical diffusion number. Rearranging the terms, we obtain the FTCS update rule for interior grid points ($j=1, 2, \\dots, N-1$):\n$$\nv_j^{m+1} = \\mu v_{j-1}^m + (1 - 2\\mu - h\\Delta t)v_j^m + \\mu v_{j+1}^m\n$$\nThe boundary conditions for $v$ are handled by fixing the values at the domain edges for all time steps $m$:\n$$\nv_0^m = 0 \\quad \\text{and} \\quad v_N^m = 0\n$$\n\n#### Task 2: Von Neumann Stability Analysis\nWe analyze the stability of the homogeneous scheme derived for $v$. We assume a single Fourier mode solution of the form $v_j^m = G^m e^{i\\kappa x_j}$, where $G$ is the amplification factor and $\\kappa$ is the wave number. Substituting this into the update rule:\n$$\nG^{m+1} e^{i\\kappa j\\Delta x} = \\mu G^m e^{i\\kappa (j-1)\\Delta x} + (1 - 2\\mu - h\\Delta t)G^m e^{i\\kappa j\\Delta x} + \\mu G^m e^{i\\kappa (j+1)\\Delta x}\n$$\nDividing by $G^m e^{i\\kappa j\\Delta x}$ yields the expression for $G$:\n$$\nG = \\mu e^{-i\\kappa\\Delta x} + (1 - 2\\mu - h\\Delta t) + \\mu e^{i\\kappa\\Delta x}\n$$\nUsing the identity $e^{i\\theta} + e^{-i\\theta} = 2\\cos(\\theta)$:\n$$\nG = 1 - 2\\mu - h\\Delta t + 2\\mu \\cos(\\kappa\\Delta x) = 1 - h\\Delta t - 2\\mu(1 - \\cos(\\kappa\\Delta x))\n$$\nUsing the half-angle identity $1 - \\cos(\\theta) = 2\\sin^2(\\theta/2)$:\n$$\nG = 1 - h\\Delta t - 4\\mu \\sin^2\\left(\\frac{\\kappa\\Delta x}{2}\\right)\n$$\nFor the scheme to be stable, the magnitude of the amplification factor must be less than or equal to one for all possible wave numbers, i.e., $|G| \\leq 1$. This is equivalent to $-1 \\leq G \\leq 1$.\n\nThe upper bound $G \\leq 1$ implies $1 - h\\Delta t - 4\\mu \\sin^2(\\frac{\\kappa\\Delta x}{2}) \\leq 1$, which simplifies to $-h\\Delta t - 4\\mu \\sin^2(\\frac{\\kappa\\Delta x}{2}) \\leq 0$. Since $h \\ge 0$, $\\Delta t > 0$, $\\mu \\ge 0$, and $\\sin^2(\\cdot) \\ge 0$, this condition is always fulfilled.\n\nThe lower bound $G \\geq -1$ implies:\n$$\n1 - h\\Delta t - 4\\mu \\sin^2\\left(\\frac{\\kappa\\Delta x}{2}\\right) \\ge -1\n$$\n$$\n2 \\ge h\\Delta t + 4\\mu \\sin^2\\left(\\frac{\\kappa\\Delta x}{2}\\right)\n$$\nThis inequality must hold for all $\\kappa$. The term $\\sin^2(\\frac{\\kappa\\Delta x}{2})$ is maximized to $1$ for the highest-frequency modes supported by the grid. Therefore, we require:\n$$\n2 \\ge h\\Delta t + 4\\mu\n$$\nSubstituting $\\mu = \\frac{k\\Delta t}{(\\Delta x)^2}$:\n$$\n2 \\ge h\\Delta t + \\frac{4k\\Delta t}{(\\Delta x)^2} = \\Delta t \\left( h + \\frac{4k}{(\\Delta x)^2} \\right)\n$$\nThus, the necessary stability condition is:\n$$\n\\Delta t \\le \\frac{2}{h + \\frac{4k}{(\\Delta x)^2}}\n$$\n\n#### Task 3: Derivation of the Exact Solution\nWe solve the PDE $v_t = k v_{xx} - h v$ with boundary conditions $v(0,t)=v(L,t)=0$ and initial condition $v(x,0) = A \\sin(\\frac{n\\pi x}{L})$. We use the method of separation of variables, assuming a solution of the form $v(x,t) = X(x)T(t)$. Substituting into the PDE gives:\n$$\nX(x)T'(t) = k X''(x)T(t) - h X(x)T(t)\n$$\nDividing by $kX(x)T(t)$, we can separate the variables:\n$$\n\\frac{T'(t)}{k T(t)} + \\frac{h}{k} = \\frac{X''(x)}{X(x)} = -\\sigma^2\n$$\nwhere $-\\sigma^2$ is the separation constant. This gives two ordinary differential equations:\n1. Spatial part: $X''(x) + \\sigma^2 X(x) = 0$, with $X(0)=0$, $X(L)=0$.\n2. Temporal part: $T'(t) + (h+k\\sigma^2)T(t) = 0$.\n\nThe spatial problem is a standard Sturm-Liouville problem whose eigenfunctions satisfying the boundary conditions are $X_m(x) = \\sin(\\sigma_m x)$ where $\\sigma_m = \\frac{m\\pi}{L}$ for integer $m \\ge 1$.\n\nThe temporal equation for each mode $m$ is $T_m'(t) + (h+k(\\frac{m\\pi}{L})^2)T_m(t) = 0$, which has the solution $T_m(t) = C_m \\exp\\left(-\\left(h+k(\\frac{m\\pi}{L})^2\\right)t\\right)$.\n\nThe general solution for $v(x,t)$ is a superposition of these modes:\n$$\nv(x,t) = \\sum_{m=1}^{\\infty} C_m \\sin\\left(\\frac{m\\pi x}{L}\\right) \\exp\\left(-\\left(h + k\\left(\\frac{m\\pi}{L}\\right)^2\\right)t\\right)\n$$\nTo find the coefficients $C_m$, we apply the initial condition at $t=0$:\n$$\nv(x,0) = \\sum_{m=1}^{\\infty} C_m \\sin\\left(\\frac{m\\pi x}{L}\\right) = A \\sin\\left(\\frac{n\\pi x}{L}\\right)\n$$\nBy comparing the series with the initial condition (or by using the orthogonality of sine functions), we see that all coefficients are zero except for $C_n = A$. This is because the initial condition is already a single eigenfunction of the spatial operator.\n\nThe exact solution for $v(x,t)$ is therefore:\n$$\nv(x,t) = A \\sin\\left(\\frac{n\\pi x}{L}\\right) \\exp\\left(-\\left(h + k\\left(\\frac{n\\pi}{L}\\right)^2\\right)t\\right)\n$$\nTransforming back to $u(x,t) = v(x,t) + u_{\\mathrm{amb}}$, we obtain the exact solution for the temperature:\n$$\nu_{\\mathrm{exact}}(x,t) = u_{\\mathrm{amb}} + A \\sin\\left(\\frac{n\\pi x}{L}\\right) \\exp\\left(-\\left(h + k\\left(\\frac{n\\pi}{L}\\right)^2\\right)t\\right)\n$$", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the heat equation problem for a suite of test cases.\n    It implements the FTCS scheme, computes the L2 error against the\n    exact solution, and checks the theoretical stability condition.\n    \"\"\"\n\n    # --- Common parameters ---\n    L = 1.0  # m\n    u_amb = 300.0  # K\n    A = 2.0  # K\n    n_mode = 1  # integer mode index\n    N = 50  # number of subintervals\n    \n    dx = L / N\n    x = np.linspace(0, L, N + 1)\n    \n    # --- Test suite definition ---\n    test_cases = [\n        # (k, h, dt_spec, M) where dt_spec can be a value or a string\n        # 'max_stable' means dt = dt_max * factor\n        # Test 1\n        {'k': 1e-4, 'h': 0.1, 'dt_spec': ('val', 0.25), 'M': 4},\n        # Test 2\n        {'k': 1e-4, 'h': 0.1, 'dt_spec': ('max_stable', 0.95), 'M': 4},\n        # Test 3\n        {'k': 1e-4, 'h': 0.1, 'dt_spec': ('max_stable', 1.05), 'M': 4},\n        # Test 4\n        {'k': 1e-4, 'h': 0.0, 'dt_spec': ('max_stable', 0.49), 'M': 10},\n        # Test 5\n        {'k': 0.0, 'h': 2.0, 'dt_spec': ('h_rel', 1.9), 'M': 6},\n    ]\n\n    results = []\n\n    for case in test_cases:\n        k = case['k']\n        h = case['h']\n        M = case['M']\n        dt_spec_type, dt_spec_val = case['dt_spec']\n\n        # --- Calculate dt_max and dt for the current test case ---\n        # The stability limit denominator can be zero if k=0 and h=0, handle this.\n        stability_denom = h + (4 * k / (dx**2))\n        dt_max = 2.0 / stability_denom if stability_denom > 0 else np.inf\n\n        if dt_spec_type == 'val':\n            dt = dt_spec_val\n        elif dt_spec_type == 'max_stable':\n            dt = dt_spec_val * dt_max\n        elif dt_spec_type == 'h_rel':\n            dt = dt_spec_val / h\n        else:\n            raise ValueError(\"Invalid dt_spec type\")\n\n        # --- Stability Check ---\n        # Use a small tolerance for floating point comparison\n        is_stable = dt = dt_max + 1e-9  \n        results.append(is_stable)\n\n        # --- Initialization ---\n        # Initialize v, as the scheme is for v = u - u_amb\n        v0 = A * np.sin(n_mode * np.pi * x / L)\n        v_current = v0.copy()\n\n        # --- Time Evolution (FTCS) ---\n        mu = k * dt / (dx**2)\n        \n        for _ in range(M):\n            v_next = np.zeros(N + 1) # Enforces v=0 at boundaries\n            for j in range(1, N):\n                v_next[j] = mu * v_current[j-1] \\\n                          + (1 - 2*mu - h*dt) * v_current[j] \\\n                          + mu * v_current[j+1]\n            v_current = v_next\n\n        # --- Error Calculation ---\n        T_final = M * dt\n        \n        # Numerical solution for u\n        u_numerical = v_current + u_amb\n\n        # Exact solution for u\n        decay_exponent = -(h + k * (n_mode * np.pi / L)**2) * T_final\n        v_exact = A * np.sin(n_mode * np.pi * x / L) * np.exp(decay_exponent)\n        u_exact = v_exact + u_amb\n        \n        # Discrete L2 error\n        error_sq_sum = np.sum((u_numerical - u_exact)**2)\n        l2_error = np.sqrt(dx * error_sq_sum)\n        \n        # Insert error before the stability boolean in the results list\n        results.insert(-1, f\"{l2_error:.6f}\")\n        \n    # Python booleans need to be lowercase as per some conventions, but\n    # the problem doesn't specify. str(True) -> 'True', so we convert.\n    formatted_results = [str(r).lower() if isinstance(r, bool) else r for r in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "3229635"}, {"introduction": "While unconditional stability is a desirable property, it does not guarantee that a numerical scheme will produce physically meaningful results in all situations. This practice explores a famous caveat of the widely-used Crank-Nicolson method: its tendency to produce non-physical oscillations when simulating problems with sharp gradients or discontinuities, especially with large time steps. By solving the heat equation with a discontinuous initial condition, you will quantify these oscillations and gain a deeper understanding of the trade-offs between stability, accuracy, and solution quality, learning that the numerical diffusion parameter $r = \\frac{\\alpha \\Delta t}{(\\Delta x)^2}$ remains an important parameter even for unconditionally stable schemes. [@problem_id:2393571]", "problem": "Consider the one-dimensional heat (diffusion) equation on the interval $[0,1]$ with homogeneous Dirichlet boundary conditions,\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}, \\quad x \\in (0,1), \\ t > 0, \\quad u(0,t) = 0, \\ u(1,t) = 0\n$$\nand a discontinuous initial condition\n$$\nu(x,0) = \\begin{cases}\n1  x \\in [0.45, 0.55],\\\\\n0  \\text{otherwise}.\n\\end{cases}\n$$\nAll quantities are dimensionless. Use a uniform spatial grid with $N=201$ equally spaced points (including boundaries), so that $\\Delta x = 1/(N-1)$. Let $\\alpha = 1$.\n\nLet $u_i^n$ denote the numerical approximation to $u(x_i,t_n)$ at the interior grid points $x_i = i \\, \\Delta x$ for $i=1,2,\\dots,N-2$ and time level $t_n = n \\, \\Delta t$. Define the Crank–Nicolson finite difference scheme for advancing one time step from $t_n$ to $t_{n+1}$ as the unique solution $u^{n+1}$ of\n$$\n\\left( I - \\frac{r}{2} L \\right) u^{n+1} = \\left( I + \\frac{r}{2} L \\right) u^{n}, \\quad r = \\frac{\\alpha \\, \\Delta t}{(\\Delta x)^2},\n$$\nwhere $I$ is the identity operator on the interior grid, and $L$ is the standard second-difference operator with homogeneous Dirichlet boundary conditions acting on interior grid values:\n$$\n(L u)_i = u_{i+1} - 2 u_i + u_{i-1}, \\quad i=1,2,\\dots,N-2\n$$\nwith the understanding that $u_0 = 0$ and $u_{N-1} = 0$ due to the boundary conditions.\n\nFor a given time step $\\Delta t$, define the oscillation amplitude after one Crank–Nicolson time step by\n$$\nA(\\Delta t) = \\max\\!\\left(0, \\ \\max_{1 \\le i \\le N-2} u_i^{1} - 1 \\right) \\;+\\; \\max\\!\\left(0, \\ 0 - \\min_{1 \\le i \\le N-2} u_i^{1} \\right).\n$$\nThis quantity is the sum of the overshoot above the physical upper bound $1$ and the undershoot below the physical lower bound $0$ in the interior after a single time step, starting from the specified discontinuous initial condition at $t=0$.\n\nTest Suite:\n- Use $N=201$ and $\\alpha = 1$ as specified.\n- Let $\\Delta x = 1/(N-1)$.\n- Consider the four time steps\n  1. $\\Delta t_1 = 0.2 \\, (\\Delta x)^2 / \\alpha$,\n  2. $\\Delta t_2 = 1.0 \\, (\\Delta x)^2 / \\alpha$,\n  3. $\\Delta t_3 = 5.0 \\, (\\Delta x)^2 / \\alpha$,\n  4. $\\Delta t_4 = 25.0 \\, (\\Delta x)^2 / \\alpha$.\n  \nFor each $\\Delta t_k$, compute $A(\\Delta t_k)$ as defined above. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order $[A(\\Delta t_1), A(\\Delta t_2), A(\\Delta t_3), A(\\Delta t_4)]$, with each value rounded to six decimal places. The output is dimensionless and contains floating-point numbers only.", "solution": "We begin from the heat equation $\\partial_t u = \\alpha \\partial_{xx} u$ on $[0,1]$ with homogeneous Dirichlet boundary conditions and a discontinuous step initial condition confined to $[0.45,0.55]$. The maximum principle for the continuous problem implies that, for $t0$, the solution remains between $0$ and $1$. However, certain time discretizations, while stable in a norm, are not monotone and can produce nonphysical oscillations such as undershoot (values below $0$) or overshoot (values above $1$) when the initial data has sharp discontinuities. The Crank–Nicolson scheme is a second-order accurate, implicit, unconditionally stable method in the $\\ell^2$ sense, but it is not total variation diminishing nor monotonicity preserving, and can produce such oscillations for sufficiently large time steps.\n\nWe discretize the spatial domain with $N=201$ uniformly spaced nodes, including boundaries, so that $\\Delta x = 1/(N-1)$. We index interior nodes by $i=1,2,\\dots,N-2$ and denote by $u_i^n$ the numerical approximation at $x_i=i\\Delta x$ and time $t_n=n\\Delta t$. The standard centered second-difference operator with homogeneous Dirichlet boundary conditions is defined on interior indices by\n$$\n(Lu)_i = u_{i+1} - 2u_i + u_{i-1}, \\quad i=1,\\dots,N-2,\n$$\nwith boundary values $u_0=0$ and $u_{N-1}=0$ enforced.\n\nThe Crank–Nicolson time-stepping scheme for the semidiscrete system $\\dot{u}=\\alpha \\Delta_x u$ is\n$$\n\\left( I - \\frac{r}{2} L \\right) u^{n+1} = \\left( I + \\frac{r}{2} L \\right) u^{n}, \\quad r = \\frac{\\alpha \\Delta t}{(\\Delta x)^2}.\n$$\nOn a one-dimensional uniform grid, this becomes a tridiagonal linear system for $u^{n+1}$ at interior indices. Writing componentwise for $i=1,\\dots,N-2$,\n$$\n-\\frac{r}{2} \\, u_{i-1}^{n+1} + (1+r) \\, u_i^{n+1} - \\frac{r}{2} \\, u_{i+1}^{n+1}\n=\n\\frac{r}{2} \\, u_{i-1}^{n} + (1-r) \\, u_i^{n} + \\frac{r}{2} \\, u_{i+1}^{n},\n$$\nwith boundary contributions vanishing because $u_0^n=u_{N-1}^n=0$.\n\nThe initial data is set by\n$$\nu_i^0 = \\begin{cases}\n1,  x_i \\in [0.45,0.55],\\\\\n0,  \\text{otherwise},\n\\end{cases}\n\\qquad x_i = i \\Delta x, \\quad i=1,\\dots,N-2.\n$$\n\nTo quantify nonphysical oscillations after one time step, we define the amplitude\n$$\nA(\\Delta t) = \\max\\!\\left(0, \\ \\max_{1 \\le i \\le N-2} u_i^{1} - 1 \\right) \\;+\\; \\max\\!\\left(0, \\ 0 - \\min_{1 \\le i \\le N-2} u_i^{1} \\right).\n$$\nThe first term measures overshoot beyond the physical bound $1$, and the second term measures undershoot below $0$. For the heat equation with nonnegative, bounded initial data, the exact solution remains in $[0,1]$, so any positive $A(\\Delta t)$ indicates an unphysical oscillation caused by the discrete scheme.\n\nWe now discuss why large $r$ leads to oscillations. The discrete Laplacian $L$ on a uniform grid has eigenmodes resembling discrete sines. For a Fourier component with wavenumber $\\theta$, the discrete Laplacian has eigenvalue $\\lambda_d(\\theta) = -4\\sin^2(\\theta/2)$. The Crank–Nicolson amplification factor for this mode is\n$$\ng(\\theta; r) = \\frac{1 + \\frac{r}{2}\\lambda_d(\\theta)}{1 - \\frac{r}{2}\\lambda_d(\\theta)}\n= \\frac{1 - 2 r \\sin^2(\\theta/2)}{1 + 2 r \\sin^2(\\theta/2)}.\n$$\nFor any $r0$, we have $|g(\\theta;r)|1$, ensuring unconditional stability in $\\ell^2$. However, if $2 r \\sin^2(\\theta/2)  1$, then $g(\\theta;r)  0$, which flips the sign of those Fourier components in a single time step, generating oscillations near sharp discontinuities where high-frequency content is present. The largest $\\sin^2(\\theta/2)$ is $1$, hence for $r  1/2$, the highest frequency modes are inverted in sign after one step. Therefore we anticipate negligible oscillations for $r=0.2$, increasing oscillatory undershoot/overshoot for $r=1$, and more pronounced oscillations for $r=5$ and $r=25$.\n\nAlgorithmically, for each specified $\\Delta t_k$ (equivalently $r_k$), we:\n1. Construct $u^0$ from the step initial condition on the interior grid.\n2. Form the tridiagonal system with subdiagonal entries $-r_k/2$, diagonal entries $1+r_k$, and superdiagonal entries $-r_k/2$.\n3. Assemble the right-hand side $(I + \\frac{r_k}{2} L) u^0$ using interior values and $0$ at the boundaries.\n4. Solve the tridiagonal system to obtain $u^1$.\n5. Compute $A(\\Delta t_k)$ as defined above from the interior values of $u^1$.\n6. Repeat for the four test values of $\\Delta t_k$ in the suite.\n\nFinally, we output the list $[A(\\Delta t_1), A(\\Delta t_2), A(\\Delta t_3), A(\\Delta t_4)]$, each rounded to six decimal places, as a single line, comma-separated within brackets. This procedure directly reflects the mathematical structure of the Crank–Nicolson method and quantifies the unphysical oscillations that can arise for large time steps with discontinuous initial data.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef thomas_tridiagonal(lower, diag, upper, rhs):\n    \"\"\"\n    Solve a tridiagonal system Ax = rhs with A having\n    lower (a), diagonal (b), and upper (c) diagonals.\n    All inputs are 1D numpy arrays:\n      lower: length n-1\n      diag:  length n\n      upper: length n-1\n      rhs:   length n\n    Returns x of length n.\n    \"\"\"\n    n = diag.size\n    # Copy to avoid modifying inputs\n    a = lower.astype(float).copy()\n    b = diag.astype(float).copy()\n    c = upper.astype(float).copy()\n    d = rhs.astype(float).copy()\n\n    # Forward elimination\n    for i in range(1, n):\n        w = a[i-1] / b[i-1]\n        b[i] = b[i] - w * c[i-1]\n        d[i] = d[i] - w * d[i-1]\n\n    # Back substitution\n    x = np.empty(n, dtype=float)\n    x[-1] = d[-1] / b[-1]\n    for i in range(n-2, -1, -1):\n        x[i] = (d[i] - c[i] * x[i+1]) / b[i]\n\n    return x\n\ndef crank_nicolson_first_step_amplitude(N, alpha, dt):\n    \"\"\"\n    Compute the oscillation amplitude A(dt) after one Crank-Nicolson step\n    for the 1D heat equation on [0,1] with homogeneous Dirichlet BCs and\n    discontinuous initial condition: u(x,0)=1 on [0.45,0.55], 0 otherwise.\n    \"\"\"\n    # Grid setup\n    L = 1.0\n    dx = L / (N - 1)\n    r = alpha * dt / (dx * dx)\n\n    # Interior indices: 1..N-2 (Python 0..M-1)\n    M = N - 2\n    x_interior = np.linspace(dx, L - dx, M)\n\n    # Initial condition on interior: 1 on [0.45,0.55], else 0\n    u0 = np.where((x_interior = 0.45)  (x_interior = 0.55), 1.0, 0.0)\n\n    # Build Crank-Nicolson matrices (implicit LHS tridiagonal, RHS vector)\n    # LHS: (I - r/2 * L) = diag: 1 + r; off-diag: -r/2\n    lower = -0.5 * r * np.ones(M - 1)\n    diag = (1.0 + r) * np.ones(M)\n    upper = -0.5 * r * np.ones(M - 1)\n\n    # RHS: (I + r/2 * L) u0 = (1 - r) * u0 + (r/2) * (u0_{i-1} + u0_{i+1})\n    rhs = (1.0 - r) * u0.copy()\n    rhs[:-1] += 0.5 * r * u0[1:]     # contribution from u0_{i+1}\n    rhs[1:]  += 0.5 * r * u0[:-1]    # contribution from u0_{i-1}\n    # Boundary contributions are zero due to homogeneous Dirichlet BCs.\n\n    # Solve for u1\n    u1 = thomas_tridiagonal(lower, diag, upper, rhs)\n\n    # Compute amplitude A(dt) over interior values\n    max_val = float(np.max(u1))\n    min_val = float(np.min(u1))\n    overshoot = max(0.0, max_val - 1.0)\n    undershoot = max(0.0, -min_val)\n    A = overshoot + undershoot\n    return A\n\ndef solve():\n    # Parameters from the problem statement\n    N = 201\n    alpha = 1.0\n    L = 1.0\n    dx = L / (N - 1)\n\n    # Test suite time steps: dt_k = [0.2, 1.0, 5.0, 25.0] * dx^2 / alpha\n    r_values = [0.2, 1.0, 5.0, 25.0]\n    test_dts = [r * dx * dx / alpha for r in r_values]\n\n    results = []\n    for dt in test_dts:\n        A = crank_nicolson_first_step_amplitude(N, alpha, dt)\n        results.append(f\"{A:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2393571"}, {"introduction": "Real-world systems are often composed of multiple materials with different physical properties. This exercise challenges you to model heat transfer through a composite rod, where the thermal diffusivity $k(x)$ changes abruptly at a material interface. You will derive the essential interface conditions—continuity of temperature and heat flux—from physical conservation laws and implement a conservative finite difference scheme that naturally respects these conditions. This practice is key to developing robust numerical methods for problems with variable coefficients, a common feature in engineering and physics applications. [@problem_id:3229593]", "problem": "Consider a one-dimensional composite rod occupying the interval $[0,L]$, consisting of two homogeneous materials joined at an interface location $x_0 \\in (0,L)$. The thermal diffusivity is piecewise constant, equal to $k_1$ on $[0,x_0]$ and equal to $k_2$ on $(x_0,L]$. The temperature $u(x,t)$ evolves according to the transient heat equation (a linear parabolic partial differential equation) with Dirichlet boundary conditions:\n$$\n\\frac{\\partial u}{\\partial t}(x,t) \\;=\\; \\frac{\\partial}{\\partial x}\\Big(k(x)\\,\\frac{\\partial u}{\\partial x}(x,t)\\Big), \\quad x \\in (0,L),\\; t0\n$$\n$$\nu(0,t) \\;=\\; T_L,\\quad u(L,t) \\;=\\; T_R,\\quad t \\ge 0\n$$\n$$\nu(x,0) \\;=\\; u_0(x), \\quad x \\in [0,L]\n$$\nwhere the piecewise constant thermal diffusivity is\n$$\nk(x) \\;=\\; \\begin{cases}\nk_1,  0 \\le x \\le x_0,\\\\\nk_2,  x_0  x \\le L.\n\\end{cases}\n$$\nUsing the fundamental principles of conservation of energy and Fourier’s law of heat conduction, derive the physically correct interface conditions at $x=x_0$ that must hold for all $t0$, and then construct a finite difference method that enforces these conditions in the discrete equations.\n\nYour derivation must begin from the following fundamental base:\n- Conservation of energy on a control volume, which implies that the rate of change of internal energy equals the net heat flux into the volume.\n- Fourier’s law $q(x,t) = -\\,k(x)\\,\\dfrac{\\partial u}{\\partial x}(x,t)$.\n- The divergence form of the differential operator $\\dfrac{\\partial}{\\partial x}\\big(k(x)\\,\\dfrac{\\partial u}{\\partial x}\\big)$.\n\nDiscretize the spatial domain with a uniform grid of $N$ subintervals, grid spacing $h=L/N$, and nodes $x_i=i\\,h$, $i=0,1,\\dots,N$. Assume that the interface is aligned with a grid node by choosing $N$ such that $x_0/h$ is an integer. Use a backward Euler time discretization with time step $\\Delta t0$. For the spatial discretization, approximate the divergence-form operator using a conservative face-flux balance at each interior node $x_i$:\n$$\n\\big((k u_x)_x\\big)\\big|_{x_i} \\;\\approx\\; \\frac{1}{h}\\left[\\;k_{i+\\frac{1}{2}}\\;\\frac{u_{i+1}-u_i}{h}\\;-\\;k_{i-\\frac{1}{2}}\\;\\frac{u_i-u_{i-1}}{h}\\;\\right],\n$$\nwhere $k_{i+\\frac{1}{2}}$ is the diffusivity associated with the face between $x_i$ and $x_{i+1}$, chosen consistently with the material occupying that face. Enforce $u_0^n=T_L$ and $u_N^n=T_R$ at all time levels $t^n=n\\,\\Delta t$.\n\nYou must also:\n- Derive the interface conditions at $x=x_0$ from the stated principles and explain how the discrete flux balance enforces them without introducing any ad hoc constraints at the interface node.\n- Derive the steady-state analytical temperature profile $u_\\infty(x)$ that solves $\\dfrac{d}{dx}\\big(k(x)\\,\\dfrac{du}{dx}\\big)=0$ with $u(0)=T_L$ and $u(L)=T_R$, by integrating piecewise and using the physically correct interface conditions you derived. Express $u_\\infty(x)$ in closed form for $x\\in[0,L]$ in terms of $L$, $x_0$, $k_1$, $k_2$, $T_L$, and $T_R$.\n\nImplementation requirements:\n- Implement the backward Euler method in time applied to the conservative spatial discretization above. March in time from $t=0$ using the initial condition $u_0(x)\\equiv 0$ until convergence to steady state, which you should detect by the condition $\\|u^{n+1}-u^n\\|_\\infty  \\varepsilon$ for a given tolerance $\\varepsilon$.\n- Use the face-based diffusivity $k_{i+\\frac{1}{2}} = k_1$ if the face lies in $[0,x_0)$ and $k_{i+\\frac{1}{2}} = k_2$ if the face lies in $(x_0,L]$. Because $x_0$ is aligned with a grid node, no face crosses the interface.\n- After convergence, compute the maximum-norm error $E=\\|u^{n}-u_\\infty\\|_\\infty$ over all grid nodes.\n\nTest suite:\nProvide results for the following $3$ parameter sets, each designed to test a different facet of the method. In all cases take $L=1$ and the initial condition $u_0(x)\\equiv 0$.\n- Case A (general asymmetric interface coupling): $k_1=1$, $k_2=5$, $x_0=0.4$, $T_L=0$, $T_R=1$, $N=100$, $\\Delta t=0.2$, $\\varepsilon=10^{-12}$.\n- Case B (uniform medium consistency check): $k_1=1$, $k_2=1$, $x_0=0.3$, $T_L=0$, $T_R=1$, $N=120$, $\\Delta t=0.2$, $\\varepsilon=10^{-12}$.\n- Case C (constant boundary equilibrium): $k_1=2$, $k_2=0.5$, $x_0=0.25$, $T_L=0.3$, $T_R=0.3$, $N=64$, $\\Delta t=0.2$, $\\varepsilon=10^{-12}$.\n\nAnswer specification:\n- For each case, output the scalar maximum-norm error $E$ as a floating-point number.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order [Case A, Case B, Case C]. For example, the format must be exactly like \"[0.001,0.002,0.003]\".", "solution": "The problem statement is scientifically grounded, well-posed, objective, and self-contained. It presents a standard problem in computational heat transfer, based on the heat equation for a composite medium. The parameters and methods proposed are consistent with established principles of physics and numerical analysis. The problem is therefore deemed valid.\n\n### Derivation of Interface Conditions\n\nThe governing partial differential equation is given in divergence form,\n$$\n\\frac{\\partial u}{\\partial t} \\;=\\; \\frac{\\partial}{\\partial x}\\left(k(x)\\,\\frac{\\partial u}{\\partial x}\\right).\n$$\nThis form originates from the principle of conservation of energy. Let us consider an infinitesimal control volume $V = [x_0 - \\epsilon, x_0 + \\epsilon]$ centered at the material interface $x_0$, for some small $\\epsilon  0$. The rate of change of thermal energy within this volume must equal the net heat flux across its boundaries.\n$$\n\\frac{d}{dt} \\int_{x_0-\\epsilon}^{x_0+\\epsilon} \\rho c_p u(x,t) \\, dx \\;=\\; q(x_0-\\epsilon, t) - q(x_0+\\epsilon, t)\n$$\nwhere $\\rho$ is density, $c_p$ is specific heat capacity, and $q(x,t)$ is the heat flux. Assuming the temperature $u(x,t)$ and material properties are bounded, as we let the volume shrink by taking the limit $\\epsilon \\to 0$, the integral on the left-hand side vanishes.\n$$\n\\lim_{\\epsilon \\to 0} \\left( \\frac{d}{dt} \\int_{x_0-\\epsilon}^{x_0+\\epsilon} \\rho c_p u(x,t) \\, dx \\right) \\;=\\; 0\n$$\nThis implies that the net flux into the vanishingly small volume must be zero:\n$$\n\\lim_{\\epsilon \\to 0} \\big( q(x_0-\\epsilon, t) - q(x_0+\\epsilon, t) \\big) \\;=\\; 0\n$$\nThis leads to the first interface condition: the heat flux must be continuous across the interface.\n$$\nq(x_0^-, t) \\;=\\; q(x_0^+, t)\n$$\nwhere $q(x_0^-)$ is the flux approaching from the left and $q(x_0^+)$ is the flux approaching from the right. Substituting Fourier's Law of heat conduction, $q(x,t) = -k(x)\\frac{\\partial u}{\\partial x}(x,t)$, and using the piecewise definition of $k(x)$, we obtain the flux continuity condition:\n$$\n-k_1 \\frac{\\partial u}{\\partial x}(x_0^-, t) \\;=\\; -k_2 \\frac{\\partial u}{\\partial x}(x_0^+, t) \\quad \\implies \\quad k_1 \\frac{\\partial u}{\\partial x}(x_0^-, t) \\;=\\; k_2 \\frac{\\partial u}{\\partial x}(x_0^+, t).\n$$\nThe second interface condition is the continuity of temperature. A discontinuity in temperature at a point would imply an infinite temperature gradient, which, by Fourier's law, would lead to an unphysical infinite heat flux. Therefore, for all $t0$:\n$$\nu(x_0^-, t) \\;=\\; u(x_0^+, t).\n$$\n\n### Analytical Steady-State Solution\n\nAt steady state, the temperature profile $u_\\infty(x)$ is independent of time, so $\\frac{\\partial u}{\\partial t}=0$. The governing equation reduces to an ordinary differential equation:\n$$\n\\frac{d}{dx}\\left(k(x)\\,\\frac{du_\\infty}{dx}\\right) \\;=\\; 0.\n$$\nIntegrating once with respect to $x$ shows that the heat flux is constant throughout the domain:\n$$\nk(x)\\,\\frac{du_\\infty}{dx} \\;=\\; -C_1,\n$$\nwhere $C_1$ is a constant representing the flux. This is equivalent to stating $q(x) = C_1$. Since the temperature profile is piecewise linear, we can write:\n$$\nu_\\infty(x) \\;=\\; \\begin{cases} A_1 x + B_1,  0 \\le x \\le x_0 \\\\ A_2 x + B_2,  x_0  x \\le L \\end{cases}\n$$\nThe constants $A_1, B_1, A_2, B_2$ are determined by the boundary and interface conditions.\n$1$. Boundary condition at $x=0$: $u_\\infty(0) = T_L \\implies A_1(0) + B_1 = T_L \\implies B_1 = T_L$.\n$2$. Boundary condition at $x=L$: $u_\\infty(L) = T_R \\implies A_2 L + B_2 = T_R \\implies B_2 = T_R - A_2 L$.\nThis allows us to rewrite the second segment's solution as $u_\\infty(x) = A_2(x-L) + T_R$.\n$3$. Temperature continuity at $x=x_0$: $u_\\infty(x_0^-) = u_\\infty(x_0^+)$.\n$$\nA_1 x_0 + T_L \\;=\\; A_2(x_0-L) + T_R.\n$$\n$4$. Flux continuity at $x=x_0$: $k_1 u'_\\infty(x_0^-) = k_2 u'_\\infty(x_0^+)$. From the linear forms, $u'_\\infty(x) = A_1$ for $xx_0$ and $u'_\\infty(x) = A_2$ for $xx_0$.\n$$\nk_1 A_1 \\;=\\; k_2 A_2.\n$$\nWe now have a $2 \\times 2$ linear system for $A_1$ and $A_2$. From the flux condition, $A_2 = \\frac{k_1}{k_2} A_1$. Substituting this into the temperature continuity equation:\n$$\nA_1 x_0 + T_L \\;=\\; \\frac{k_1}{k_2} A_1 (x_0-L) + T_R.\n$$\nSolving for $A_1$:\n$$\nA_1 \\left( x_0 - \\frac{k_1}{k_2}(x_0-L) \\right) \\;=\\; T_R - T_L.\n$$\n$$\nA_1 \\left( \\frac{k_2 x_0 - k_1 x_0 + k_1 L}{k_2} \\right) \\;=\\; T_R - T_L.\n$$\n$$\nA_1 \\;=\\; \\frac{k_2 (T_R - T_L)}{k_1(L-x_0) + k_2 x_0}.\n$$\nAnd consequently for $A_2$:\n$$\nA_2 \\;=\\; \\frac{k_1}{k_2}A_1 \\;=\\; \\frac{k_1 (T_R - T_L)}{k_1(L-x_0) + k_2 x_0}.\n$$\nThe analytical steady-state solution $u_\\infty(x)$ is thus completely determined.\n\n### Finite Difference Method and Interface Treatment\n\nWe discretize the spatial domain with nodes $x_i = i h$ for $i=0, \\dots, N$ where $h=L/N$. The time domain is discretized as $t^n = n \\Delta t$. Let $u_i^n \\approx u(x_i, t^n)$.\n\nThe proposed conservative spatial discretization at an interior node $x_i$ is:\n$$\n\\frac{\\partial}{\\partial x}\\Big(k(x)\\,\\frac{\\partial u}{\\partial x}\\Big)\\bigg|_{x_i} \\;\\approx\\; \\frac{1}{h}\\left[\\;k_{i+\\frac{1}{2}}\\;\\frac{u_{i+1}-u_i}{h}\\;-\\;k_{i-\\frac{1}{2}}\\;\\frac{u_i-u_{i-1}}{h}\\;\\right].\n$$\nThis is a finite volume-style approximation over the control volume $[x_i-h/2, x_i+h/2]$. The terms inside the brackets represent the numerical fluxes at the cell faces.\n\nApplying the backward Euler method for time integration yields:\n$$\n\\frac{u_i^{n+1} - u_i^n}{\\Delta t} \\;=\\; \\frac{1}{h^2} \\left( k_{i+\\frac{1}{2}}(u_{i+1}^{n+1} - u_i^{n+1}) - k_{i-\\frac{1}{2}}(u_i^{n+1} - u_{i-1}^{n+1}) \\right).\n$$\nRearranging the terms to form a linear system for the unknown temperatures $u^{n+1}$ at interior nodes ($i=1, \\ldots, N-1$):\n$$\n-\\frac{\\Delta t}{h^2}k_{i-\\frac{1}{2}}\\,u_{i-1}^{n+1} + \\left(1 + \\frac{\\Delta t}{h^2}(k_{i-\\frac{1}{2}} + k_{i+\\frac{1}{2}})\\right)u_i^{n+1} - \\frac{\\Delta t}{h^2}k_{i+\\frac{1}{2}}\\,u_{i+1}^{n+1} \\;=\\; u_i^n.\n$$\nThis results in a tridiagonal linear system $A \\mathbf{u}^{n+1} = \\mathbf{b}$, where $\\mathbf{u}^{n+1}$ is the vector of unknown temperatures at interior nodes.\n\nThe interface is aligned with a grid node $x_j=j h=x_0$. The face diffusivities are defined based on which material the face lies within. The face at $x_{i+1/2}$ lies between nodes $x_i$ and $x_{i+1}$:\n- For $i  j$, the face is in material $1$, so $k_{i+1/2} = k_1$.\n- For $i \\ge j$, the face is in material $2$, so $k_{i+1/2} = k_2$.\n\nAt the interface node $i=j$, the scheme uses $k_{j-1/2} = k_1$ and $k_{j+1/2} = k_2$. The equation for $u_j^{n+1}$ becomes:\n$$\n-\\frac{\\Delta t}{h^2}k_1\\,u_{j-1}^{n+1} + \\left(1 + \\frac{\\Delta t}{h^2}(k_1 + k_2)\\right)u_j^{n+1} - \\frac{\\Delta t}{h^2}k_2\\,u_{j+1}^{n+1} \\;=\\; u_j^n.\n$$\nThis conservative finite difference scheme correctly and automatically enforces the physical interface conditions without ad hoc modifications at node $j$:\n$1$. Temperature continuity is implicitly satisfied by solving for a single value $u_j^{n+1}$ at the node $x_j$.\n$2$. Flux continuity is satisfied in the limit of steady state. When $u^{n+1} = u^n = u^\\infty$, the time derivative vanishes, and the discrete equation at any node $i$ becomes:\n$$\nk_{i+\\frac{1}{2}}\\frac{u_{i+1}^\\infty - u_i^\\infty}{h} \\;=\\; k_{i-\\frac{1}{2}}\\frac{u_i^\\infty - u_{i-1}^\\infty}{h}.\n$$\nThis shows that the numerical flux $-k_{i+1/2}(u_{i+1}^\\infty-u_i^\\infty)/h$ is constant across all cell faces. Specifically at the interface node $j$, this gives:\n$$\nk_2\\frac{u_{j+1}^\\infty - u_j^\\infty}{h} \\;=\\; k_1\\frac{u_j^\\infty - u_{j-1}^\\infty}{h}.\n$$\nThis is a consistent finite difference approximation of the analytical flux condition $k_2 u'_\\infty(x_0^+) = k_1 u'_\\infty(x_0^-)$. The method is thus robust and physically consistent.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_case(L, k1, k2, x0, TL, TR, N, dt, epsilon):\n    \"\"\"\n    Solves the 1D transient heat equation for a composite rod until steady state\n    and computes the error against the analytical solution.\n    \"\"\"\n    # 1. Grid and problem parameters\n    h = L / N\n    x = np.linspace(0, L, N + 1)\n    # The interface node index j is such that x_j = x0\n    j = int(round(x0 / h))\n\n    # 2. Analytical steady-state solution u_inf(x)\n    # The solution is piecewise linear: u(x) = A*x + B\n    # For segment 1 (x in [0, x0]): u1(x) = A1*x + TL\n    # For segment 2 (x in (x0, L]): u2(x) = A2*(x-L) + TR\n    den = k1 * (L - x0) + k2 * x0\n    if abs(den)  1e-15:\n        # This occurs only in trivial or unphysical cases, e.g., L=0.\n        # For k1=k2, den = k1*L. If L=0, it's 0.\n        # The main logic below correctly handles k1=k2 by having A1=A2.\n        # This is a safe guard.\n        if abs(TR-TL)  1e-15:\n            A1, A2 = 0, 0\n        else: # Unphysical, infinite flux case\n            # This branch should not be reached by the given test cases.\n            A1, A2 = np.inf, np.inf\n    else:\n        A1 = k2 * (TR - TL) / den\n        A2 = k1 * (TR - TL) / den\n    \n    u_inf = np.piecewise(x, [x = x0, x  x0],\n                         [lambda xi: A1 * xi + TL,\n                          lambda xi: A2 * (xi - L) + TR])\n\n    # 3. Numerical method setup\n    \n    # Face diffusivities k_{i+1/2}. k_face[i] corresponds to face between i and i+1.\n    k_face = np.zeros(N)\n    k_face[:j] = k1\n    k_face[j:] = k2\n\n    # Tridiagonal matrix A for the system Au_new = b for interior nodes\n    lam = dt / (h * h)\n    \n    # A is of size (N-1)x(N-1)\n    A = np.zeros((N - 1, N - 1))\n    \n    # Populate the diagonals of A. Row `i` (0-indexed) corresponds to spatial node `i+1`.\n    for i in range(N - 1):\n        phys_i = i + 1\n        # Main diagonal\n        A[i, i] = 1 + lam * (k_face[phys_i] + k_face[phys_i - 1])\n        # Lower diagonal\n        if i  0:\n            A[i, i - 1] = -lam * k_face[phys_i - 1]\n        # Upper diagonal\n        if i  N - 2:\n            A[i, i + 1] = -lam * k_face[phys_i]\n\n    # 4. Time-stepping loop\n    u_old = np.zeros(N + 1)\n    # The problem specifies u_0(x) = 0 for x in [0,L], but also gives BCs for t=0.\n    # The standard interpretation is that the initial state u(x,0) is zero in the\n    # interior (0,L), and the boundary values are set at t=0.\n    u_old[0], u_old[N] = TL, TR\n    u_new = u_old.copy()\n\n    # Safety break for the loop\n    max_iter = 50000\n    for _ in range(max_iter):\n        # Right-hand side vector b (size N-1)\n        b = u_old[1:N].copy()\n        \n        # Add boundary condition terms to the first and last elements of b\n        b[0] += lam * k_face[0] * TL\n        b[N - 2] += lam * k_face[N - 1] * TR\n        \n        # Solve the linear system Au_new = b for interior nodes\n        u_new[1:N] = np.linalg.solve(A, b)\n        \n        # Check for convergence using the infinity norm\n        if np.max(np.abs(u_new - u_old))  epsilon:\n            break\n            \n        u_old[:] = u_new[:]\n    \n    # 5. Compute max-norm error against analytical steady-state solution\n    error = np.max(np.abs(u_new - u_inf))\n    \n    return error\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print results.\n    \"\"\"\n    # Test cases: (L, k1, k2, x0, TL, TR, N, dt, epsilon)\n    test_cases = [\n        # Case A: General asymmetric interface coupling\n        (1.0, 1.0, 5.0, 0.4, 0.0, 1.0, 100, 0.2, 1e-12),\n        # Case B: Uniform medium consistency check\n        (1.0, 1.0, 1.0, 0.3, 0.0, 1.0, 120, 0.2, 1e-12),\n        # Case C: Constant boundary equilibrium\n        (1.0, 2.0, 0.5, 0.25, 0.3, 0.3, 64, 0.2, 1e-12),\n    ]\n\n    results = []\n    for params in test_cases:\n        error = solve_case(*params)\n        results.append(error)\n\n    # Format the output as a comma-separated list in brackets\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3229593"}]}