{"hands_on_practices": [{"introduction": "The stability of a numerical scheme is paramount, and von Neumann analysis is the cornerstone technique for understanding it. This first practice challenges you to derive the one-step amplification factor for the FTCS scheme from first principles. By calculating this factor for different Fourier modes when the stability condition is violated ([@problem_id:3278053]), you will see precisely how and why high-frequency components are the first to cause catastrophic failure.", "problem": "Consider the one-dimensional heat equation $u_{t}=\\alpha\\,u_{xx}$ on a periodic domain of length $L$, discretized on a uniform grid with $N=8$ points and spacing $\\Delta x=L/N$. The Forward-Time Central-Space (FTCS) scheme advances the solution by\n$$\nu_{i}^{n+1}=u_{i}^{n}+s\\left(u_{i+1}^{n}-2u_{i}^{n}+u_{i-1}^{n}\\right),\n$$\nwhere $s=\\alpha\\,\\Delta t/(\\Delta x)^{2}$. The one-step growth factor for a given discrete Fourier mode is defined as the ratio of the mode’s amplitude after one time step to its amplitude before the step.\n\nSet $s=0.51$ and consider discrete Fourier modes indexed by $m=0,1,2,3,4$ with phase $\\theta_{m}=2\\pi m/N$. Starting from the governing equation and the FTCS update, derive the one-step growth factor for a general discrete Fourier mode and compute the growth factors for $m=0,1,2,3,4$. Identify the first mode to diverge, understood as the mode among these whose one-step growth factor has magnitude greater than $1$ and is largest in magnitude. Report your final answer as the modal index $m$. No rounding is required.", "solution": "The problem is first validated to ensure it is well-posed, scientifically grounded, and contains all necessary information for a unique solution.\n\n**Problem Validation**\n\n*   **Givens Extracted:**\n    *   Governing equation: $u_{t}=\\alpha\\,u_{xx}$\n    *   Domain: $1D$ periodic of length $L$\n    *   Discretization: Uniform grid, $N=8$ points, spacing $\\Delta x=L/N$\n    *   Numerical scheme: FTCS, $u_{i}^{n+1}=u_{i}^{n}+s\\left(u_{i+1}^{n}-2u_{i}^{n}+u_{i-1}^{n}\\right)$\n    *   Diffusion number definition: $s=\\alpha\\,\\Delta t/(\\Delta x)^{2}$\n    *   Specific diffusion number: $s=0.51$\n    *   Modes for analysis: Discrete Fourier modes indexed by $m=0,1,2,3,4$\n    *   Mode phase definition: $\\theta_{m}=2\\pi m/N$\n    *   Objective: Derive the one-step growth factor, compute it for the specified modes, and identify the first mode to diverge (defined as the mode with the largest growth factor magnitude greater than $1$).\n\n*   **Validation Verdict:**\n    The problem is **valid**. It is a standard exercise in the von Neumann stability analysis of a finite difference scheme, a core topic in numerical analysis. All parameters and definitions are clear, consistent, and sufficient to derive a unique answer. The value $s=0.51$ is chosen to be slightly above the theoretical stability threshold of $s=0.5$ for the FTCS scheme, which is a legitimate and common scenario for studying numerical instability.\n\n**Solution Derivation**\n\nTo determine the one-step growth factor, we perform a von Neumann stability analysis. We consider a single discrete Fourier mode as a solution to the finite difference equation. A generic mode corresponding to index $m$ can be written as:\n$$\nu_i^n = A_m^n \\exp(I i \\theta_m)\n$$\nwhere $A_m^n$ is the amplitude of mode $m$ at time step $n$, $i$ is the spatial grid index, $I$ is the imaginary unit ($I^2 = -1$), and $\\theta_m$ is the phase for mode $m$. The one-step growth factor, which we denote as $G_m$, is the ratio of amplitudes in successive time steps, $G_m = A_m^{n+1} / A_m^n$. Thus, we can write $u_i^{n+1}$ as:\n$$\nu_i^{n+1} = A_m^{n+1} \\exp(I i \\theta_m) = G_m A_m^n \\exp(I i \\theta_m)\n$$\nWe substitute these forms for $u_i^n$ and $u_i^{n+1}$ into the FTCS scheme:\n$$\nu_{i}^{n+1}=u_{i}^{n}+s\\left(u_{i+1}^{n}-2u_{i}^{n}+u_{i-1}^{n}\\right)\n$$\n$$\nG_m A_m^n \\exp(I i \\theta_m) = A_m^n \\exp(I i \\theta_m) + s \\left[ A_m^n \\exp(I (i+1) \\theta_m) - 2 A_m^n \\exp(I i \\theta_m) + A_m^n \\exp(I (i-1) \\theta_m) \\right]\n$$\nDividing the entire equation by the common non-zero factor $A_m^n \\exp(I i \\theta_m)$ yields the expression for the growth factor $G_m$:\n$$\nG_m = 1 + s \\left[ \\exp(I \\theta_m) - 2 + \\exp(-I \\theta_m) \\right]\n$$\nUsing Euler's formula, $\\exp(I\\theta) + \\exp(-I\\theta) = 2\\cos(\\theta)$, we simplify the expression in the brackets:\n$$\nG_m = 1 + s \\left[ 2\\cos(\\theta_m) - 2 \\right] = 1 - 2s \\left[ 1 - \\cos(\\theta_m) \\right]\n$$\nWe apply the half-angle trigonometric identity $1 - \\cos(\\theta) = 2\\sin^2(\\theta/2)$:\n$$\nG_m = 1 - 4s \\sin^2\\left(\\frac{\\theta_m}{2}\\right)\n$$\nThis is the general expression for the one-step growth factor for a discrete Fourier mode with phase $\\theta_m$.\n\nThe problem provides the specific parameters $s=0.51$, $N=8$, and asks to analyze modes $m \\in \\{0,1,2,3,4\\}$. The phase angle is $\\theta_m = 2\\pi m/N = 2\\pi m/8 = \\pi m/4$.\nSubstituting these values into the expression for $G_m$:\n$$\nG_m = 1 - 4(0.51) \\sin^2\\left(\\frac{\\pi m/4}{2}\\right) = 1 - 2.04 \\sin^2\\left(\\frac{\\pi m}{8}\\right)\n$$\nA mode is stable if and only if its growth factor has a magnitude less than or equal to one, i.e., $|G_m| \\le 1$. We now compute $G_m$ and its magnitude for each specified mode.\n\n*   **Mode $m=0$:**\n    $\\theta_0 = 0$.\n    $G_0 = 1 - 2.04 \\sin^2(0) = 1 - 0 = 1$.\n    $|G_0| = 1$. This mode is neutrally stable.\n\n*   **Mode $m=1$:**\n    $\\theta_1 = \\pi/4$.\n    $G_1 = 1 - 2.04 \\sin^2(\\pi/8)$. Using $\\sin^2(x) = (1-\\cos(2x))/2$, we have $\\sin^2(\\pi/8) = (1-\\cos(\\pi/4))/2 = (1-\\sqrt{2}/2)/2 = (2-\\sqrt{2})/4$.\n    $G_1 = 1 - 2.04 \\left(\\frac{2-\\sqrt{2}}{4}\\right) = 1 - 0.51(2 - \\sqrt{2}) = 1 - 1.02 + 0.51\\sqrt{2} = -0.02 + 0.51\\sqrt{2}$.\n    Since $\\sqrt{2} \\approx 1.414$, $G_1 \\approx -0.02 + 0.51(1.414) \\approx 0.701$. Clearly, $|G_1| < 1$. This mode is stable.\n\n*   **Mode $m=2$:**\n    $\\theta_2 = 2\\pi/4 = \\pi/2$.\n    $G_2 = 1 - 2.04 \\sin^2(\\pi/4) = 1 - 2.04 (\\frac{\\sqrt{2}}{2})^2 = 1 - 2.04(\\frac{1}{2}) = 1 - 1.02 = -0.02$.\n    $|G_2| = 0.02 < 1$. This mode is stable.\n\n*   **Mode $m=3$:**\n    $\\theta_3 = 3\\pi/4$.\n    $G_3 = 1 - 2.04 \\sin^2(3\\pi/8)$. Using $\\sin^2(x) = (1-\\cos(2x))/2$, we have $\\sin^2(3\\pi/8) = (1-\\cos(3\\pi/4))/2 = (1-(-\\sqrt{2}/2))/2 = (2+\\sqrt{2})/4$.\n    $G_3 = 1 - 2.04 \\left(\\frac{2+\\sqrt{2}}{4}\\right) = 1 - 0.51(2 + \\sqrt{2}) = 1 - 1.02 - 0.51\\sqrt{2} = -0.02 - 0.51\\sqrt{2}$.\n    $|G_3| = |-0.02 - 0.51\\sqrt{2}| = 0.02 + 0.51\\sqrt{2}$. Since $0.51\\sqrt{2} \\approx 0.72$, $|G_3| \\approx 0.74 < 1$. This mode is stable.\n\n*   **Mode $m=4$:**\n    $\\theta_4 = 4\\pi/4 = \\pi$.\n    $G_4 = 1 - 2.04 \\sin^2(\\pi/2) = 1 - 2.04 (1)^2 = 1 - 2.04 = -1.04$.\n    $|G_4| = |-1.04| = 1.04 > 1$. This mode is unstable.\n\nThe problem asks to identify the mode among $m=0,1,2,3,4$ that diverges, which is defined as the mode with $|G_m| > 1$ and the largest such magnitude. Reviewing our calculations:\n*   $|G_0| = 1$\n*   $|G_1| < 1$\n*   $|G_2| < 1$\n*   $|G_3| < 1$\n*   $|G_4| = 1.04$\n\nAmong the modes considered, $m=4$ is the only one for which the magnitude of the growth factor is greater than $1$. Therefore, it is the first mode to diverge according to the problem's definition. This result is consistent with the general stability analysis of the FTCS scheme, which shows instability occurs first at the highest frequency (or shortest wavelength) mode, which for a grid with $N$ points is the Nyquist mode, $m=N/2$. Here, $N=8$, so the most unstable mode is $m=4$.", "answer": "$$\\boxed{4}$$", "id": "3278053"}, {"introduction": "Theoretical analysis provides predictions, but computational experiments provide confirmation and build intuition. In this exercise ([@problem_id:3277980]), you will design a numerical experiment to empirically measure the amplification of the most unstable mode—the Nyquist frequency. By performing a single time step on this specific initial condition, you can directly observe the stability boundary $s = 1/2$ and verify the theoretical predictions with code.", "problem": "Consider the one-dimensional heat equation $u_t = \\alpha u_{xx}$ on a periodic domain of length $L$, discretized with the Forward-Time Central-Space (FTCS) scheme. Let the spatial grid have $N$ points with uniform spacing $\\Delta x = L/N$, and let time step $\\Delta t$ be chosen such that $s = \\alpha \\Delta t / (\\Delta x)^2$. The FTCS update at grid index $j$ is $u_j^{n+1} = u_j^n + s \\left(u_{j+1}^n - 2 u_j^n + u_{j-1}^n\\right)$, with periodic boundary conditions applied so that $u_{-1}^n = u_{N-1}^n$ and $u_{N}^n = u_0^n$.\n\nDesign a numerical experiment that estimates the empirical one-step amplification magnitude of a high-frequency initial condition by measuring the growth rate of its discrete $\\ell^2$ norm. Use the initial condition $u_j^0 = (-1)^j$ for $j = 0, 1, \\dots, N-1$, which is the highest-frequency (Nyquist) mode on an even-point periodic grid. Perform a single FTCS time step to obtain $u^1$, and compute the empirical amplification magnitude $g = \\|u^1\\|_2 / \\|u^0\\|_2$.\n\nImplement the experiment for the following test suite, using $L = 1$ and $\\alpha = 1$:\n- Test case $1$: $N = 128$, $s = 0.25$.\n- Test case $2$: $N = 128$, $s = 0.50$.\n- Test case $3$: $N = 128$, $s = 0.75$.\n- Test case $4$: $N = 128$, $s = 0.49$.\n\nYour program should produce a single line of output containing the empirical amplification magnitudes for the four test cases as a comma-separated list enclosed in square brackets, in the order listed above, for example, $[g_1,g_2,g_3,g_4]$. All reported values must be floats.", "solution": "The one-dimensional heat equation $u_t = \\alpha u_{xx}$ models diffusion and is parabolic. A standard explicit discretization in time and central discretization in space yields the Forward-Time Central-Space (FTCS) scheme. On a uniform grid with spacing $\\Delta x = L/N$, the discrete Laplacian at grid point $j$ is approximated by $(u_{j+1}^n - 2 u_j^n + u_{j-1}^n)/(\\Delta x)^2$, and with time step $\\Delta t$, the FTCS update is $u_j^{n+1} = u_j^n + \\alpha \\Delta t \\cdot \\frac{u_{j+1}^n - 2 u_j^n + u_{j-1}^n}{(\\Delta x)^2}$. Defining $s = \\alpha \\Delta t / (\\Delta x)^2$, this becomes $u_j^{n+1} = u_j^n + s \\left(u_{j+1}^n - 2 u_j^n + u_{j-1}^n\\right)$.\n\nTo analyze stability, Von Neumann analysis considers discrete Fourier modes $u_j^n = \\hat{u}^n e^{i \\kappa j \\Delta x}$, which are eigenfunctions of the discrete Laplacian on a periodic grid. Substituting a mode into the update yields an amplification factor $G(\\kappa) = 1 - 4 s \\sin^2\\left(\\frac{\\kappa \\Delta x}{2}\\right)$. Stability of the explicit scheme requires that $|G(\\kappa)| \\leq 1$ for all wave numbers $\\kappa$, leading to the condition $s \\leq 1/2$ because the worst case is at the highest frequency where $\\sin^2\\left(\\frac{\\kappa \\Delta x}{2}\\right) = 1$.\n\nThe numerical experiment is designed to empirically measure this worst-case amplification. On an even-point periodic grid, the Nyquist mode is represented by $u_j^0 = (-1)^j$, which corresponds to $\\kappa \\Delta x = \\pi$ and achieves $\\sin^2\\left(\\frac{\\kappa \\Delta x}{2}\\right) = 1$. For this specific discrete mode, one can compute directly that $u_{j+1}^0 + u_{j-1}^0 = -2 u_j^0$, hence the discrete Laplacian term simplifies to $u_{j+1}^0 - 2 u_j^0 + u_{j-1}^0 = -4 u_j^0$. Therefore, the FTCS update for this mode is\n$$\nu_j^1 = u_j^0 + s \\left(-4 u_j^0\\right) = \\left(1 - 4 s\\right) u_j^0.\n$$\nThe one-step amplification factor for the mode is thus $G = 1 - 4 s$, and the amplification magnitude is $|G| = \\left|1 - 4 s\\right|$. Because the update is a scalar multiple of the initial vector, the discrete $\\ell^2$ norm scales by the same factor, yielding\n$$\ng = \\frac{\\|u^1\\|_2}{\\|u^0\\|_2} = \\left|1 - 4 s\\right|.\n$$\n\nThis directly reveals the stability threshold: the scheme is stable for the Nyquist mode precisely when $\\left|1 - 4 s\\right| \\leq 1$, which simplifies to $s \\leq 1/2$. At $s = 1/2$, the amplification factor is $G = -1$, implying no growth in magnitude but a sign flip each step. For $s  1/2$, magnitudes decay; for $s > 1/2$, magnitudes grow.\n\nFor the specified test suite with $L = 1$ and $\\alpha = 1$:\n- Test case $1$: $N = 128$, $s = 0.25$, predicted $g = \\left|1 - 4 \\cdot 0.25\\right| = \\left|1 - 1\\right| = 0$.\n- Test case $2$: $N = 128$, $s = 0.50$, predicted $g = \\left|1 - 4 \\cdot 0.50\\right| = \\left|1 - 2\\right| = 1$.\n- Test case $3$: $N = 128$, $s = 0.75$, predicted $g = \\left|1 - 4 \\cdot 0.75\\right| = \\left|1 - 3\\right| = 2$.\n- Test case $4$: $N = 128$, $s = 0.49$, predicted $g = \\left|1 - 4 \\cdot 0.49\\right| = \\left|1 - 1.96\\right| = 0.96$.\n\nThe algorithmic implementation proceeds by constructing the initial array $u^0$ with entries $u_j^0 = (-1)^j$ for $j = 0, 1, \\dots, N-1$, applying one FTCS step using periodic index wrapping (which can be implemented via cyclic shifts), and computing $g = \\|u^1\\|_2 / \\|u^0\\|_2$. Because the chosen initial condition is an eigenvector of the discrete Laplacian on an even grid, the computed $g$ will match the theoretical values above to within floating-point rounding. The final program aggregates the four $g$ values into a single line output $[g_1,g_2,g_3,g_4]$ as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef ftcs_one_step_growth(N: int, s: float) -> float:\n    \"\"\"\n    Compute the empirical one-step amplification magnitude g = ||u^1||_2 / ||u^0||_2\n    for the FTCS scheme applied to the high-frequency initial condition u_j^0 = (-1)^j\n    on a periodic grid of size N, with scheme parameter s.\n    \"\"\"\n    # Construct high-frequency (Nyquist) initial condition on an even N grid.\n    j = np.arange(N, dtype=np.int64)\n    u0 = ((-1) ** j).astype(np.float64)\n\n    # Periodic neighbors using numpy.roll\n    u_plus = np.roll(u0, -1)\n    u_minus = np.roll(u0, 1)\n\n    # FTCS update: u1 = u0 + s*(u_plus - 2*u0 + u_minus)\n    laplacian = u_plus - 2.0 * u0 + u_minus\n    u1 = u0 + s * laplacian\n\n    # Compute empirical amplification magnitude\n    norm_u0 = np.linalg.norm(u0)\n    norm_u1 = np.linalg.norm(u1)\n    g = norm_u1 / norm_u0\n    return float(g)\n\ndef solve():\n    # Define the test cases from the problem statement: (N, s)\n    test_cases = [\n        (128, 0.25),\n        (128, 0.50),\n        (128, 0.75),\n        (128, 0.49),\n    ]\n\n    results = []\n    for N, s in test_cases:\n        g = ftcs_one_step_growth(N, s)\n        results.append(g)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3277980"}, {"introduction": "Stability is a necessary, but not sufficient, condition for a good numerical solution; accuracy is equally critical. This advanced practice ([@problem_id:3278125]) investigates the performance of the FTCS scheme *within* the stable regime, comparing a choice of $s$ close to the stability limit with a more conservative one. By quantifying the error and the \"excess numerical diffusion,\" you will gain insight into the crucial trade-offs between computational cost and the fidelity of your simulation.", "problem": "Consider the one-dimensional heat diffusion equation $u_t = \\alpha u_{xx}$ on a periodic spatial domain of length $L$, where $u(x,t)$ is the temperature field, $t$ is time in seconds, $x$ is position in meters, and $\\alpha$ is the thermal diffusivity in $\\mathrm{m^2/s}$. Use the Forward-Time Central-Space (FTCS) scheme to approximate the solution on a uniform grid with $N_x$ points, spacing $\\Delta x = L/N_x$, and time step $\\Delta t$. Define the nondimensional parameter $s = \\alpha \\Delta t / \\Delta x^2$. The FTCS update is applied with periodic boundary conditions and fixed $s$ values specified below. The initial condition is a single Fourier mode $u(x,0) = \\sin(k x)$ with wavenumber $k = 2\\pi m / L$ for a given integer mode index $m$. The exact analytical solution of the heat equation for this initial condition is $u_{\\mathrm{exact}}(x,t) = \\sin(k x)\\,\\exp(-\\alpha k^2 t)$.\n\nYour task is to set up a parametric study of error versus stability by comparing FTCS numerical solutions at $s=0.49$ and $s=0.1$ after a fixed physical time $T$, and quantify the excess numerical diffusion. For each case in the test suite below, implement the FTCS scheme until the physical time $T$ is reached exactly. Use periodic boundary conditions. For each case, compute two quantities:\n\n1. The $L^2$ error at time $T$ with respect to the analytical solution, defined as $E = \\left(\\int_0^L (u_{\\mathrm{num}}(x,T) - u_{\\mathrm{exact}}(x,T))^2\\,dx\\right)^{1/2}$, expressed as a floating-point number without units (dimensionless, since $u$ is dimensionless).\n\n2. The excess numerical diffusion $\\Delta \\alpha_{\\mathrm{num}}$ in $\\mathrm{m^2/s}$, defined by estimating an effective diffusivity $\\alpha_{\\mathrm{eff}}$ from the numerically computed amplitude decay of the fundamental mode, and then reporting $\\Delta \\alpha_{\\mathrm{num}} = \\alpha_{\\mathrm{eff}} - \\alpha$. Estimate the amplitude $A(t)$ by projecting $u(x,t)$ onto $\\sin(kx)$ using a discrete approximation of the inner product over the grid. Use $A(0)$ and $A(T)$ to compute $\\alpha_{\\mathrm{eff}}$ via $\\alpha_{\\mathrm{eff}} = -\\frac{1}{k^2 T}\\ln\\left(\\left|\\frac{A(T)}{A(0)}\\right|\\right)$. Report $\\Delta \\alpha_{\\mathrm{num}}$ in $\\mathrm{m^2/s}$ as a floating-point number. Note that the absolute value inside the logarithm ensures a physically meaningful decay rate in cases where discrete amplification yields sign changes while remaining stable.\n\nScientific and numerical parameters to use are $L = 1.0$ meters, $\\alpha = 0.01$ $\\mathrm{m^2/s}$, $T = 0.49$ seconds. Angles (e.g., in trigonometric functions) must be treated in radians.\n\nImplement the FTCS scheme update in time for each case and compute the requested quantities. The FTCS update must use the nondimensional parameter $s$ specified per case, periodic boundary conditions, and a uniform grid. Choose the time step $\\Delta t$ from the definition of $s = \\alpha \\Delta t / \\Delta x^2$ for each case, and ensure the number of time steps is such that the total simulated time equals exactly $T$ seconds.\n\nTest suite:\n- Case 1 (happy path): $N_x = 100$, $m = 1$, $s = 0.1$.\n- Case 2 (near stability boundary): $N_x = 100$, $m = 1$, $s = 0.49$.\n- Case 3 (high wavenumber near the discrete stability edge): $N_x = 100$, $m = 45$, $s = 0.49$.\n\nFor each case, compute the pair $\\left[E, \\Delta \\alpha_{\\mathrm{num}}\\right]$ as specified. Your program should produce a single line of output containing the results for the three cases as a comma-separated list enclosed in square brackets, where each element is itself a two-element list. For example, the output format should be like \"[[E1,DN1],[E2,DN2],[E3,DN3]]\" where $E1$ is the $L^2$ error for Case 1, $DN1$ is the excess numerical diffusion for Case 1 in $\\mathrm{m^2/s}$, and so on. All numbers must be printed as standard Python floats. No units should be printed in the output line.", "solution": "The problem has been validated and is determined to be a well-posed and scientifically sound exercise in numerical analysis.\n\nThe problem requires the numerical solution of the one-dimensional heat diffusion equation,\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}\n$$\non a periodic spatial domain $x \\in [0, L]$. Here, $u(x,t)$ represents the temperature, $\\alpha$ is the thermal diffusivity, $x$ is the spatial coordinate, and $t$ is time. The initial condition is a single Fourier mode, $u(x,0) = \\sin(k x)$, with wavenumber $k = 2\\pi m / L$ for a given integer mode index $m$.\n\nThe numerical method to be used is the Forward-Time Central-Space (FTCS) scheme. We discretize the domain with $N_x$ grid points, such that the grid spacing is $\\Delta x = L/N_x$ and the spatial coordinates are $x_j = j \\Delta x$ for $j = 0, 1, \\dots, N_x-1$. Time is discretized in steps of $\\Delta t$, so $t_n = n \\Delta t$. The numerical solution at grid point $j$ and time step $n$ is denoted by $u_j^n \\approx u(x_j, t_n)$.\n\nThe FTCS scheme discretizes the time derivative with a forward difference and the spatial derivative with a central difference:\n$$\n\\frac{u_j^{n+1} - u_j^n}{\\Delta t} = \\alpha \\frac{u_{j+1}^n - 2u_j^n + u_{j-1}^n}{\\Delta x^2}\n$$\nRearranging this equation yields the explicit update rule for the numerical solution at the next time step, $u_j^{n+1}$:\n$$\nu_j^{n+1} = u_j^n + s (u_{j+1}^n - 2u_j^n + u_{j-1}^n)\n$$\nwhere $s = \\frac{\\alpha \\Delta t}{\\Delta x^2}$ is the nondimensional stability parameter. The stability of the FTCS scheme is governed by the von Neumann stability condition, which dictates that for a stable solution, the parameter $s$ must satisfy $s \\le 1/2$. The cases under consideration with $s=0.1$ and $s=0.49$ both satisfy this condition.\n\nThe procedure for each test case is as follows:\n\n1.  **Set up Simulation Parameters**: Based on the provided case data ($N_x, m, s$) and global constants ($L=1.0$, $\\alpha=0.01$, $T=0.49$), we calculate the necessary parameters:\n    *   Spatial grid spacing: $\\Delta x = L / N_x$.\n    *   Wavenumber: $k = 2\\pi m / L$.\n    *   Time step: $\\Delta t = s \\Delta x^2 / \\alpha$.\n    *   Total number of time steps: $N_t = T / \\Delta t$. The problem parameters are chosen such that $N_t$ is an integer, ensuring the simulation ends precisely at time $T$.\n\n2.  **Initialize Solution**: A one-dimensional array representing the solution $u$ is initialized according to the initial condition $u(x,0) = \\sin(kx)$. The spatial grid is defined as $x_j = j \\Delta x$ for $j \\in \\{0, \\dots, N_x-1\\}$. The initial numerical solution is thus $u_j^0 = \\sin(k x_j)$.\n\n3.  **Perform Time Integration**: A loop iterates from $n=0$ to $N_t-1$. In each iteration, the FTCS update rule is applied to all grid points $j$ to compute $u^{n+1}$ from $u^n$. Periodic boundary conditions are enforced, meaning that for the calculation at $j=0$, the \"left\" neighbor $u_{-1}^n$ is taken as $u_{N_x-1}^n$, and for the calculation at $j=N_x-1$, the \"right\" neighbor $u_{N_x}^n$ is taken as $u_0^n$.\n\n4.  **Compute Final Quantities**: After $N_t$ time steps, the final numerical solution $u_{\\mathrm{num}}(x,T)$ is obtained. We then compute the two required metrics:\n\n    a. **$L^2$ Error ($E$)**: The exact analytical solution for the given initial condition is $u_{\\mathrm{exact}}(x,t) = \\sin(k x) e^{-\\alpha k^2 t}$. We evaluate this at $t=T$ on the numerical grid. The $L^2$ error is defined as $E = \\left(\\int_0^L (u_{\\mathrm{num}}(x,T) - u_{\\mathrm{exact}}(x,T))^2\\,dx\\right)^{1/2}$. This integral is approximated numerically using a Riemann sum over the grid:\n    $$\n    E \\approx \\left( \\sum_{j=0}^{N_x-1} (u_j^{N_t} - u_{\\mathrm{exact}}(x_j,T))^2 \\Delta x \\right)^{1/2}\n    $$\n\n    b. **Excess Numerical Diffusion ($\\Delta \\alpha_{\\mathrm{num}}$)**: The FTCS scheme introduces numerical error that often manifests as additional diffusion. To quantify this, we calculate an effective diffusivity $\\alpha_{\\mathrm{eff}}$ based on the decay of the solution's amplitude. The amplitude $A(t)$ of the mode $\\sin(kx)$ in the numerical solution $u(x,t)$ is found by projection:\n    $$\n    A(t) = \\frac{\\langle u(x,t), \\sin(kx) \\rangle}{\\langle \\sin(kx), \\sin(kx) \\rangle} = \\frac{\\int_0^L u(x,t) \\sin(kx) dx}{\\int_0^L \\sin^2(kx) dx} = \\frac{2}{L} \\int_0^L u(x,t) \\sin(kx) dx\n    $$\n    We compute the initial amplitude $A(0)$ and the final amplitude $A(T)$ by numerically approximating this integral. Due to the properties of the discrete Fourier basis on the chosen grid, $A(0)$ will be exactly $1$. The final amplitude is given by:\n    $$\n    A(T) \\approx \\frac{2}{L} \\sum_{j=0}^{N_x-1} u_j^{N_t} \\sin(k x_j) \\Delta x = \\frac{2}{N_x} \\sum_{j=0}^{N_x-1} u_j^{N_t} \\sin(k x_j)\n    $$\n    The effective diffusivity $\\alpha_{\\mathrm{eff}}$ is then calculated from the amplitude decay, assuming an exponential law:\n    $$\n    \\alpha_{\\mathrm{eff}} = -\\frac{1}{k^2 T}\\ln\\left(\\left|\\frac{A(T)}{A(0)}\\right|\\right)\n    $$\n    The use of the absolute value makes the calculation robust against sign-flipping oscillations that can occur in the numerical scheme. The excess numerical diffusion is the difference between the effective and the true diffusivity:\n    $$\n    \\Delta \\alpha_{\\mathrm{num}} = \\alpha_{\\mathrm{eff}} - \\alpha\n    $$\n\nThis procedure is executed for each of the three test cases, and the resulting pairs $[E, \\Delta \\alpha_{\\mathrm{num}}]$ are collected and formatted for the final output.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef run_case(Nx, m, s):\n    \"\"\"\n    Solves the 1D heat equation with FTCS for a given parameter set.\n\n    Args:\n        Nx (int): Number of spatial grid points.\n        m (int): Wavenumber index for the initial condition.\n        s (float): Nondimensional stability parameter.\n\n    Returns:\n        list: A list containing the L2 error [E] and the excess numerical \n              diffusion [delta_alpha_num].\n    \"\"\"\n    # Scientific and numerical parameters\n    L = 1.0  # meters\n    alpha = 0.01  # m^2/s\n    T = 0.49  # seconds\n\n    # 1. Grid and Parameters Setup\n    dx = L / Nx\n    k = 2 * np.pi * m / L\n    \n    # Calculate time step and number of steps to reach T exactly\n    dt = s * dx**2 / alpha\n    # Use np.round to handle potential floating point inaccuracies ensuring an integer\n    Nt = int(np.round(T / dt)) \n    \n    # Check if simulation time is exactly T\n    if not np.isclose(Nt * dt, T):\n        raise ValueError(\"Simulation time T is not an integer multiple of dt.\")\n\n    # Spatial grid\n    x = np.linspace(0, L, Nx, endpoint=False)\n\n    # 2. Initial Condition\n    u = np.sin(k * x)\n    u_initial = u.copy()\n\n    # 3. Time Evolution (FTCS)\n    for _ in range(Nt):\n        # Use np.roll for efficient periodic boundary conditions\n        u_jp1 = np.roll(u, -1)\n        u_jm1 = np.roll(u, 1)\n        u = u + s * (u_jp1 - 2 * u + u_jm1)\n    \n    u_final = u\n\n    # 4. Post-processing\n    # Analytical solution at time T\n    u_exact_T = np.sin(k * x) * np.exp(-alpha * k**2 * T)\n\n    # 5. Compute L2 Error (E)\n    # The integral is approximated by a sum over the discrete grid points.\n    error_integrand = (u_final - u_exact_T)**2\n    L2_error = np.sqrt(np.sum(error_integrand) * dx)\n\n    # 6. Compute Excess Numerical Diffusion (delta_alpha_num)\n    # The amplitude is computed by projecting the solution onto sin(kx).\n    # The discrete projection integral: (2/L) * sum(f(x)*sin(kx)*dx)\n    # A_0 = (2/L) * np.sum(u_initial * np.sin(k*x)) * dx which simplifies to\n    # A_0 = (2/Nx) * np.sum(u_initial * np.sin(k*x))\n    # For a perfect sine wave on the grid, this sum is exactly Nx/2, so A_0 is 1.0.\n    # We compute it numerically for robustness.\n    \n    # Inner product helper function\n    def inner_product(f, g, dx_val):\n        return np.sum(f * g) * dx_val\n\n    # Basis function for projection\n    sin_kx = np.sin(k*x)\n\n    # Normalization factor is integral of sin^2(kx) over [0,L], approximately L/2\n    norm_factor = inner_product(sin_kx, sin_kx, dx)\n\n    # Initial amplitude\n    A0 = inner_product(u_initial, sin_kx, dx) / norm_factor\n\n    # Final amplitude\n    AT = inner_product(u_final, sin_kx, dx) / norm_factor\n    \n    # Handle the case k=0 (m=0), where k^2 T is zero.\n    if k == 0:\n        alpha_eff = 0.0 # No diffusion for a constant initial condition\n    else:\n        # The formula given in the problem\n        alpha_eff = (-1 / (k**2 * T)) * np.log(np.abs(AT / A0))\n\n    delta_alpha_num = alpha_eff - alpha\n    \n    return [L2_error, delta_alpha_num]\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (100, 1, 0.1),   # Case 1: happy path\n        (100, 1, 0.49),  # Case 2: near stability boundary\n        (100, 45, 0.49), # Case 3: high wavenumber near stability edge\n    ]\n\n    results = []\n    for case in test_cases:\n        Nx, m, s = case\n        result = run_case(Nx, m, s)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    # The str() function on a list correctly formats it as '[item1, item2]'.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "3278125"}]}