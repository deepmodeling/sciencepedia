{"hands_on_practices": [{"introduction": "Before we begin simulating complex systems, it's essential to solidify our theoretical foundations. This first exercise [@problem_id:3080227] focuses on the Ornstein-Uhlenbeck process, a cornerstone model for mean-reverting systems found in finance, physics, and biology. You will first formulate the Euler-Maruyama discretization for this process and then, using first principles of stochastic calculus, derive the exact mean and variance of the continuous solution, providing a crucial analytical benchmark for any numerical simulation.", "problem": "Consider the Itô stochastic differential equation (SDE)\n$$\ndX_{t}=-\\lambda X_{t}\\,dt+\\sigma\\,dW_{t},\\qquad X_{0}=x_{0},\n$$\nwhere $\\lambda>0$, $\\sigma\\geq 0$, $x_{0}\\in\\mathbb{R}$ is deterministic, and $W_{t}$ is a standard Brownian motion (BM). Using the Euler-Maruyama (EM) method, construct a uniform time discretization $t_{n}=nh$ with step size $h>0$ up to a fixed time $T>0$, and write down the explicit EM update for an approximation $X_{n}\\approx X_{t_{n}}$.\n\nStarting from the fundamental definitions of Itô integration and properties of Gaussian increments, derive the exact mean and the exact variance of $X_{t}$ for $t\\in[0,T]$. Your derivation should use only core principles such as integrating factors for linear SDEs and the Itô isometry, without invoking pre-memorized solution formulas.\n\nFor your final boxed answer, report the pair $\\big(\\mathbb{E}[X_{t}],\\operatorname{Var}(X_{t})\\big)$ as a single row matrix in terms of $\\lambda$, $\\sigma$, $x_{0}$, and $t$. No rounding is required.", "solution": "The problem statement is assessed to be valid. It is a well-posed, scientifically grounded problem in the field of stochastic differential equations, with all necessary conditions and definitions provided.\n\nThe problem asks for three items: the Euler-Maruyama (EM) update rule for a given stochastic differential equation (SDE), and the exact derivations for the mean and variance of the process.\n\nThe SDE is the Ornstein-Uhlenbeck process, given by:\n$$\ndX_{t}=-\\lambda X_{t}\\,dt+\\sigma\\,dW_{t}\n$$\nwith initial condition $X_{0}=x_{0}$, where $\\lambda>0$, $\\sigma\\geq 0$, $x_{0}$ is a deterministic real number, and $W_{t}$ is a standard Brownian motion.\n\nFirst, we construct the Euler-Maruyama (EM) update. A general Itô SDE is of the form $dY_t = a(Y_t, t)dt + b(Y_t, t)dW_t$. The EM method provides a discrete approximation $X_n \\approx X_{t_n}$ on a time grid $t_n = nh$ for $n=0, 1, 2, \\dots$ with a constant step size $h>0$. The update rule is:\n$$\nX_{n+1} = X_n + a(X_n, t_n)h + b(X_n, t_n) \\Delta W_n\n$$\nwhere $\\Delta W_n = W_{t_{n+1}} - W_{t_n}$. The increments of Brownian motion $\\Delta W_n$ are independent and identically distributed random variables from a normal distribution with mean $0$ and variance $h$, i.e., $\\Delta W_n \\sim \\mathcal{N}(0, h)$.\nFor the given SDE, the drift coefficient is $a(X_t, t) = -\\lambda X_t$ and the diffusion coefficient is $b(X_t, t) = \\sigma$. Substituting these into the general EM formula yields:\n$$\nX_{n+1} = X_n + (-\\lambda X_n)h + \\sigma \\Delta W_n\n$$\nwhich simplifies to:\n$$\nX_{n+1} = (1 - \\lambda h)X_n + \\sigma \\Delta W_n\n$$\nThis is the explicit EM update rule for the given SDE.\n\nNext, we derive the exact mean and variance of $X_t$. This requires finding the analytical solution to the SDE. We rearrange the SDE as:\n$$\ndX_t + \\lambda X_t dt = \\sigma dW_t\n$$\nThis is a linear SDE, which can be solved using an integrating factor. The appropriate integrating factor is $I(t) = \\exp(\\lambda t)$. We consider the process $Y_t = e^{\\lambda t} X_t$. By applying Itô's product rule to $d(e^{\\lambda t} X_t)$, we have:\n$$\nd(e^{\\lambda t} X_t) = (\\lambda e^{\\lambda t} X_t) dt + e^{\\lambda t} dX_t\n$$\nSubstituting $dX_t = -\\lambda X_t dt + \\sigma dW_t$ into this expression gives:\n$$\nd(e^{\\lambda t} X_t) = \\lambda e^{\\lambda t} X_t dt + e^{\\lambda t} (-\\lambda X_t dt + \\sigma dW_t) = \\sigma e^{\\lambda t} dW_t\n$$\nIntegrating both sides from $s=0$ to $s=t$:\n$$\n\\int_0^t d(e^{\\lambda s} X_s) = \\int_0^t \\sigma e^{\\lambda s} dW_s\n$$\n$$\ne^{\\lambda t} X_t - e^{\\lambda \\cdot 0} X_0 = \\sigma \\int_0^t e^{\\lambda s} dW_s\n$$\nUsing the deterministic initial condition $X_0 = x_0$:\n$$\ne^{\\lambda t} X_t - x_0 = \\sigma \\int_0^t e^{\\lambda s} dW_s\n$$\nSolving for $X_t$, we obtain the exact analytical solution:\n$$\nX_t = x_0 e^{-\\lambda t} + \\sigma e^{-\\lambda t} \\int_0^t e^{\\lambda s} dW_s = x_0 e^{-\\lambda t} + \\sigma \\int_0^t e^{-\\lambda(t-s)} dW_s\n$$\nNow we can compute the mean, $\\mathbb{E}[X_t]$. Taking the expectation of the solution:\n$$\n\\mathbb{E}[X_t] = \\mathbb{E}\\left[x_0 e^{-\\lambda t} + \\sigma \\int_0^t e^{-\\lambda(t-s)} dW_s\\right]\n$$\nBy linearity of expectation:\n$$\n\\mathbb{E}[X_t] = \\mathbb{E}[x_0 e^{-\\lambda t}] + \\mathbb{E}\\left[\\sigma \\int_0^t e^{-\\lambda(t-s)} dW_s\\right]\n$$\nSince $x_0$, $\\lambda$, and $t$ are deterministic, the first term is $\\mathbb{E}[x_0 e^{-\\lambda t}] = x_0 e^{-\\lambda t}$. The second term involves an Itô integral. A fundamental property of the Itô integral is that its expectation is zero if the integrand is a deterministic function (or more generally, an adapted process satisfying certain conditions). Here, the integrand $\\sigma e^{-\\lambda(t-s)}$ is deterministic. Thus:\n$$\n\\mathbb{E}\\left[\\sigma \\int_0^t e^{-\\lambda(t-s)} dW_s\\right] = \\sigma \\mathbb{E}\\left[\\int_0^t e^{-\\lambda(t-s)} dW_s\\right] = 0\n$$\nCombining these results, the exact mean is:\n$$\n\\mathbb{E}[X_t] = x_0 e^{-\\lambda t}\n$$\nFinally, we derive the variance, $\\operatorname{Var}(X_t) = \\mathbb{E}[(X_t - \\mathbb{E}[X_t])^2]$. From our previous results:\n$$\nX_t - \\mathbb{E}[X_t] = \\left(x_0 e^{-\\lambda t} + \\sigma \\int_0^t e^{-\\lambda(t-s)} dW_s\\right) - x_0 e^{-\\lambda t} = \\sigma \\int_0^t e^{-\\lambda(t-s)} dW_s\n$$\nThe variance is then:\n$$\n\\operatorname{Var}(X_t) = \\mathbb{E}\\left[\\left(\\sigma \\int_0^t e^{-\\lambda(t-s)} dW_s\\right)^2\\right] = \\sigma^2 \\mathbb{E}\\left[\\left(\\int_0^t e^{-\\lambda(t-s)} dW_s\\right)^2\\right]\n$$\nTo evaluate this expectation, we use the Itô isometry property, which states that for a deterministic, square-integrable function $g(s)$, $\\mathbb{E}[(\\int_0^t g(s) dW_s)^2] = \\int_0^t g(s)^2 ds$. In our case, $g(s) = e^{-\\lambda(t-s)}$. Applying the isometry:\n$$\n\\operatorname{Var}(X_t) = \\sigma^2 \\int_0^t \\left(e^{-\\lambda(t-s)}\\right)^2 ds = \\sigma^2 \\int_0^t e^{-2\\lambda(t-s)} ds\n$$\nWe can evaluate this integral:\n$$\n\\int_0^t e^{-2\\lambda(t-s)} ds = e^{-2\\lambda t} \\int_0^t e^{2\\lambda s} ds = e^{-2\\lambda t} \\left[\\frac{e^{2\\lambda s}}{2\\lambda}\\right]_0^t\n$$\nSince $\\lambda>0$, this is well-defined:\n$$\n= e^{-2\\lambda t} \\left(\\frac{e^{2\\lambda t} - e^0}{2\\lambda}\\right) = e^{-2\\lambda t} \\left(\\frac{e^{2\\lambda t} - 1}{2\\lambda}\\right) = \\frac{1 - e^{-2\\lambda t}}{2\\lambda}\n$$\nSubstituting back into the expression for the variance:\n$$\n\\operatorname{Var}(X_t) = \\sigma^2 \\left(\\frac{1 - e^{-2\\lambda t}}{2\\lambda}\\right) = \\frac{\\sigma^2}{2\\lambda}(1 - e^{-2\\lambda t})\n$$\nThe pair $(\\mathbb{E}[X_{t}],\\operatorname{Var}(X_{t}))$ is therefore $(x_0 e^{-\\lambda t}, \\frac{\\sigma^2}{2\\lambda}(1 - e^{-2\\lambda t}))$.", "answer": "$$\n\\boxed{\\begin{pmatrix} x_0 \\exp(-\\lambda t) & \\frac{\\sigma^2}{2 \\lambda} (1 - \\exp(-2 \\lambda t)) \\end{pmatrix}}\n$$", "id": "3080227"}, {"introduction": "A key metric for a numerical scheme is its *strong convergence*—how well individual simulated paths approximate the true solution paths. This coding practice [@problem_id:3226794] guides you through a Monte Carlo experiment to measure and compare the strong convergence orders of the Euler-Maruyama method and the more advanced Milstein method. By implementing this study, you will gain practical skills in estimating convergence rates and see a tangible demonstration of the accuracy gains offered by higher-order schemes.", "problem": "You are asked to compare the strong convergence behavior of two numerical schemes for stochastic differential equations (SDEs): the Euler–Maruyama method and the Milstein method. Work entirely in a scalar setting for a Geometric Brownian Motion, whose dynamics are given by the Itô SDE\n$$\ndX_t = \\mu X_t \\, dt + \\sigma X_t \\, dW_t,\n$$\nwith initial condition $X_0 = x_0$, where $\\mu \\in \\mathbb{R}$ is the drift, $\\sigma \\in \\mathbb{R}$ is the diffusion parameter, and $W_t$ is a standard Wiener process. The exact solution is the well-known closed form\n$$\nX_T = X_0 \\exp\\big((\\mu - \\tfrac{1}{2}\\sigma^2) T + \\sigma W_T\\big).\n$$\nYour task is to implement a Monte Carlo study to estimate the strong convergence order at terminal time $T$ of:\n- the Euler–Maruyama method (Euler–Maruyama is the simplest Itô-integral-based discretization that replaces the Itô integral by the increment $\\,\\Delta W_n\\,$), and\n- the Milstein method (the first-order Itô–Taylor method for scalar SDEs that augments the Euler–Maruyama increment by the leading stochastic Taylor correction involving the diffusion derivative $\\,b'(x)\\,$ for $\\,b(x)=\\sigma x\\,$).\n\nBegin from the core definitions of the Itô integral, Itô’s formula, and the Itô–Taylor expansion, and use these to design the two time-stepping updates. Use the exact solution above to compute the terminal strong error. For each method and each time step, estimate the root mean square (RMS) strong error at time $T$:\n$$\n\\varepsilon_{\\mathrm{RMS}}(h) = \\Big(\\mathbb{E}\\big[|X_T^{(h)} - X_T|^2\\big]\\Big)^{1/2},\n$$\nwhere $X_T^{(h)}$ denotes the numerical approximation using uniform step size $h$.\n\nTo estimate the convergence order, consider a set of uniform step sizes $h_k = T/N_k$ and fit the model\n$$\n\\log \\varepsilon_{\\mathrm{RMS}}(h_k) \\approx p \\log h_k + C\n$$\nby least squares in $\\log$–$\\log$ scale to obtain the estimated strong order $p$.\n\nMonte Carlo requirements:\n- Use $M = 10000$ independent sample paths.\n- For variance reduction and fair comparison across step sizes, generate the Brownian increments on the finest grid and obtain coarser-grid increments by summing consecutive fine-grid increments (i.e., use a consistent refinement so that $N_{\\max}/N_k \\in \\mathbb{N}$ and the same underlying noise drives all resolutions).\n- For reproducibility, use the specified pseudorandom seeds per test case.\n\nUse the following test suite. For each test, simulate with the common set of time partitions $N_k \\in \\{16, 32, 64, 128\\}$ (so $h_k = T/N_k$), and the given number of paths and seed:\n- Test A (happy path, moderate noise): $x_0 = 1.0$, $\\mu = 1.0$, $\\sigma = 0.5$, $T = 1.0$, seed $= 314159$.\n- Test B (edge case with small noise): $x_0 = 2.0$, $\\mu = 0.3$, $\\sigma = 0.05$, $T = 2.0$, seed $= 271828$.\n- Test C (negative drift, stronger noise): $x_0 = 1.0$, $\\mu = -1.0$, $\\sigma = 1.0$, $T = 1.0$, seed $= 161803$.\n\nYour program must:\n- Implement both the Euler–Maruyama method and the Milstein method for the given SDE using their respective principled constructions from Itô calculus.\n- For each test case and each $N_k \\in \\{16, 32, 64, 128\\}$, compute the RMS strong error using $M = 10000$ simulated paths with coupled Brownian increments as described, and then fit the slope $p$ in the $\\log$–$\\log$ model separately for Euler–Maruyama and for Milstein.\n- Return, for each test case, the pair of estimated strong orders $[p_{\\mathrm{EM}}, p_{\\mathrm{Mil}}]$, each rounded to two decimal places.\n\nFinal output format:\n- Your program should print a single line containing a list of three entries, one per test case, in the order A, B, C. Each entry is the two-element list $[p_{\\mathrm{EM}}, p_{\\mathrm{Mil}}]$ for that test.\n- Concretely, your program should produce exactly one line like\n$$\n[[p_{\\mathrm{EM,A}}, p_{\\mathrm{Mil,A}}],[p_{\\mathrm{EM,B}}, p_{\\mathrm{Mil,B}}],[p_{\\mathrm{EM,C}}, p_{\\mathrm{Mil,C}}]]\n$$\nwith all six values as decimal floats rounded to two decimal places, and with no extra characters or whitespace beyond commas, brackets, and digits.", "solution": "The problem statement has been analyzed and is determined to be valid. It is scientifically grounded in the theory of stochastic calculus and numerical methods for SDEs, well-posed with all necessary parameters defined, and objective in its formulation and requirements.\n\nThis problem requires a comparative study of the strong convergence orders for the Euler-Maruyama and Milstein numerical methods applied to the Geometric Brownian Motion (GBM) stochastic differential equation (SDE). The SDE is given by:\n$$\ndX_t = \\mu X_t \\, dt + \\sigma X_t \\, dW_t, \\quad X(0) = x_0\n$$\nwhere $\\mu \\in \\mathbb{R}$ is the drift parameter, $\\sigma \\in \\mathbb{R}$ is the diffusion parameter, and $W_t$ is a standard Wiener process. This is an Itô process with drift coefficient $a(x) = \\mu x$ and diffusion coefficient $b(x) = \\sigma x$. The problem provides the exact solution at time $T$:\n$$\nX_T = X_0 \\exp\\left((\\mu - \\tfrac{1}{2}\\sigma^2) T + \\sigma W_T\\right)\n$$\nwhere $W_T = \\int_0^T dW_s$ is the total increment of the Wiener process over $[0, T]$.\n\nThe solution involves deriving the numerical schemes, implementing them in a Monte Carlo simulation, computing the strong error, and finally estimating the convergence order via regression.\n\n**1. Derivation of Numerical Schemes**\n\nThe numerical schemes are derived by discretizing the integral form of the SDE over a time interval $[t_n, t_{n+1}]$ of length $h = t_{n+1} - t_n$. The integral form is:\n$$\nX_{t_{n+1}} = X_{t_n} + \\int_{t_n}^{t_{n+1}} a(X_s) \\, ds + \\int_{t_n}^{t_{n+1}} b(X_s) \\, dW_s\n$$\n\n**Euler-Maruyama (EM) Method:**\nThe EM method is the simplest discretization, obtained by approximating the integrands $a(X_s)$ and $b(X_s)$ as constants over the interval, equal to their values at the start of the interval, $X_n \\equiv X_{t_n}$.\n$$\nX_{n+1} \\approx X_n + a(X_n) \\int_{t_n}^{t_{n+1}} \\, ds + b(X_n) \\int_{t_n}^{t_{n+1}} \\, dW_s\n$$\nThe integrals evaluate to $\\int_{t_n}^{t_{n+1}} ds = h$ and $\\int_{t_n}^{t_{n+1}} dW_s = \\Delta W_n = W_{t_{n+1}} - W_{t_n}$. The term $\\Delta W_n$ represents a random draw from a normal distribution with mean $0$ and variance $h$, i.e., $\\Delta W_n \\sim \\mathcal{N}(0, h)$. The EM update rule is:\n$$\nX_{n+1} = X_n + a(X_n) h + b(X_n) \\Delta W_n\n$$\nFor the given GBM SDE with $a(x) = \\mu x$ and $b(x) = \\sigma x$, the EM scheme is:\n$$\nX_{n+1} = X_n + \\mu X_n h + \\sigma X_n \\Delta W_n = X_n (1 + \\mu h + \\sigma \\Delta W_n)\n$$\nThe EM method has a strong order of convergence of $0.5$ for general SDEs.\n\n**Milstein Method:**\nThe Milstein method improves upon the EM method by including an additional term from the Itô-Taylor expansion. For a scalar SDE, the expansion is:\n$$\nX_{t_{n+1}} = X_{t_n} + a(X_n) h + b(X_n) \\Delta W_n + \\frac{1}{2} b(X_n) b'(X_n) \\left((\\Delta W_n)^2 - h\\right) + \\mathcal{O}(h^{3/2})\n$$\nwhere $b'(x)$ is the derivative of the diffusion coefficient with respect to $x$. This scheme is obtained by including the next-order term in the stochastic integral approximation.\nThe update rule for the Milstein method is:\n$$\nX_{n+1} = X_n + a(X_n) h + b(X_n) \\Delta W_n + \\frac{1}{2} b(X_n) b'(X_n) \\left((\\Delta W_n)^2 - h\\right)\n$$\nFor the GBM SDE, we have $b(x) = \\sigma x$ and its derivative $b'(x) = \\sigma$. Substituting these into the Milstein scheme gives:\n$$\nX_{n+1} = X_n + \\mu X_n h + \\sigma X_n \\Delta W_n + \\frac{1}{2} (\\sigma X_n) (\\sigma) \\left((\\Delta W_n)^2 - h\\right)\n$$\n$$\nX_{n+1} = X_n \\left(1 + \\mu h + \\sigma \\Delta W_n + \\frac{1}{2} \\sigma^2 \\left((\\Delta W_n)^2 - h\\right)\\right)\n$$\nThe Milstein method typically has a strong order of convergence of $1.0$.\n\n**2. Monte Carlo Simulation Framework**\n\nThe goal is to estimate the strong convergence order $p$ from the relationship $\\varepsilon_{\\mathrm{RMS}}(h) \\propto h^p$. The root mean square (RMS) strong error is defined as:\n$$\n\\varepsilon_{\\mathrm{RMS}}(h) = \\left( \\mathbb{E}\\left[|X_T^{(h)} - X_T|^2\\right] \\right)^{1/2}\n$$\nwhere $X_T^{(h)}$ is the numerical solution at time $T$ with step size $h$, and $X_T$ is the exact solution. The expectation $\\mathbb{E}[\\cdot]$ is approximated by a sample mean over $M = 10000$ independent simulated paths:\n$$\n\\varepsilon_{\\mathrm{RMS}}(h) \\approx \\sqrt{ \\frac{1}{M} \\sum_{i=1}^{M} \\left|X_{T,i}^{(h)} - X_{T,i}\\right|^2 }\n$$\nTo ensure a fair comparison and reduce variance, the simulations for different step sizes $h_k = T/N_k$ for $N_k \\in \\{16, 32, 64, 128\\}$ are driven by the same underlying noise. This is achieved by first generating Brownian increments for the finest grid, $N_{\\max} = 128$, with step size $h_{\\text{fine}} = T/N_{\\max}$. For a coarser grid with $N_k < N_{\\max}$, the a coarse increment $\\Delta W_n^{(k)}$ is obtained by summing $R_k = N_{\\max}/N_k$ consecutive fine increments. This ensures that the total Wiener path $W_T$ is identical for all simulations.\n\n**3. Estimation of Convergence Order**\n\nThe convergence order $p$ is estimated by fitting a linear model to the log-transformed errors and step sizes:\n$$\n\\log \\varepsilon_{\\mathrm{RMS}}(h_k) = p \\log h_k + C\n$$\nThis is a simple linear regression problem for the data points $(\\log h_k, \\log \\varepsilon_{\\mathrm{RMS}}(h_k))$. The slope of the best-fit line, $p$, is the estimated order of convergence. This is computed separately for the Euler-Maruyama and Milstein methods for each test case.\n\nThe overall algorithm proceeds as follows for each test case:\n1.  Initialize parameters ($\\mu, \\sigma, x_0, T$) and simulation settings ($M, N_k, \\text{seed}$).\n2.  Generate $M$ paths of fine-grid Brownian increments $\\{\\Delta W_n^{\\text{fine}}\\}$ for $N_{\\max}=128$ steps.\n3.  Calculate the exact solution $X_{T,i}$ for each path $i$ using the total Wiener increment $W_{T,i} = \\sum_n \\Delta W_{n,i}^{\\text{fine}}$.\n4.  For each step count $N_k \\in \\{16, 32, 64, 128\\}$:\n    a. Determine the step size $h_k = T/N_k$.\n    b. Construct coarse-grid Brownian increments by summing fine-grid increments.\n    c. Simulate $M$ paths from $t=0$ to $t=T$ using both the EM and Milstein schemes.\n    d. Compute the RMS strong error $\\varepsilon_{\\mathrm{RMS}}(h_k)$ for both methods.\n5.  Using the set of calculated errors, perform a linear regression on $(\\log h_k, \\log \\varepsilon_k)$ to find the slope $p_{\\mathrm{EM}}$ for the Euler-Maruyama method and $p_{\\mathrm{Mil}}$ for the Milstein method.\n6.  Round the estimated orders to two decimal places and store the resulting pair.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Performs a Monte Carlo study to estimate the strong convergence orders of the\n    Euler-Maruyama and Milstein methods for the Geometric Brownian Motion SDE.\n    \"\"\"\n    test_cases = [\n        # (x0, mu, sigma, T, seed)\n        (1.0, 1.0, 0.5, 1.0, 314159),  # Test A\n        (2.0, 0.3, 0.05, 2.0, 271828), # Test B\n        (1.0, -1.0, 1.0, 1.0, 161803), # Test C\n    ]\n\n    all_results = []\n\n    M = 10000  # Number of Monte Carlo paths\n    N_steps_list = [16, 32, 64, 128]\n    N_max = max(N_steps_list)\n\n    for x0, mu, sigma, T, seed in test_cases:\n        rng = np.random.default_rng(seed)\n        \n        # Step 1: Generate fine-grained Brownian increments for all paths\n        h_fine = T / N_max\n        # (M, N_max) matrix of increments\n        fine_increments = rng.normal(0, np.sqrt(h_fine), (M, N_max))\n        \n        # Step 2: Calculate the exact solution at time T\n        # Total Wiener increment for each path\n        W_T_paths = np.sum(fine_increments, axis=1)\n        X_exact_T = x0 * np.exp((mu - 0.5 * sigma**2) * T + sigma * W_T_paths)\n        \n        log_h_values = []\n        log_em_errors = []\n        log_mil_errors = []\n\n        # Step 3: Loop over different step sizes\n        for N_k in N_steps_list:\n            h_k = T / N_k\n            log_h_values.append(np.log(h_k))\n            \n            # Step 3a: Construct coarse Brownian increments from fine ones\n            refinement_ratio = N_max // N_k\n            coarse_increments = fine_increments.reshape(M, N_k, refinement_ratio).sum(axis=2)\n            \n            # Initialize numerical solutions at t=0\n            X_em = np.full(M, x0)\n            X_mil = np.full(M, x0)\n            \n            # Step 3b: Simulate paths for both schemes\n            for n in range(N_k):\n                dW = coarse_increments[:, n]\n                \n                # Euler-Maruyama update\n                X_em = X_em * (1 + mu * h_k + sigma * dW)\n                \n                # Milstein update\n                mil_correction = 0.5 * sigma**2 * (dW**2 - h_k)\n                X_mil = X_mil * (1 + mu * h_k + sigma * dW + mil_correction)\n            \n            # Step 3c: Calculate RMS strong error for this step size\n            em_error_sq = np.mean((X_em - X_exact_T)**2)\n            mil_error_sq = np.mean((X_mil - X_exact_T)**2)\n            \n            log_em_errors.append(0.5 * np.log(em_error_sq))\n            log_mil_errors.append(0.5 * np.log(mil_error_sq))\n\n        # Step 4: Perform log-log regression to find the convergence order\n        # np.polyfit returns [slope, intercept]\n        p_em = np.polyfit(log_h_values, log_em_errors, 1)[0]\n        p_mil = np.polyfit(log_h_values, log_mil_errors, 1)[0]\n        \n        # Round results to two decimal places\n        p_em_rounded = round(p_em, 2)\n        p_mil_rounded = round(p_mil, 2)\n        \n        all_results.append([p_em_rounded, p_mil_rounded])\n\n    # Step 5: Format the final output string\n    inner_strings = [f\"[{p_em},{p_mil}]\" for p_em, p_mil in all_results]\n    print(f\"[{','.join(inner_strings)}]\")\n\nsolve()\n```", "id": "3226794"}, {"introduction": "Stochastic differential equations can be interpreted in different ways, with the Itô and Stratonovich frameworks being the most common. While the Euler-Maruyama method is based on the Itô integral, many models from science and engineering are naturally expressed in the Stratonovich form. This advanced practice [@problem_id:3226843] challenges you to derive the conversion rule between the two forms, apply it to several SDEs, and then use simulation to validate the results, providing a deep, practical understanding of this critical topic.", "problem": "Let $W_t$ denote a standard Brownian motion (Wiener process). Consider a one-dimensional Stratonovich Stochastic Differential Equation (SDE),\n$$\ndX_t \\;=\\; a(X_t)\\,dt \\;+\\; b(X_t)\\circ dW_t,\n$$\nwhere $a(\\cdot)$ and $b(\\cdot)$ are sufficiently smooth functions. Starting only from the foundational definitions of the Itô and Stratonovich stochastic integrals and the chain rules they satisfy, derive the equivalent Itô SDE and identify the additional drift term that arises from the conversion. Then design a program to simulate sample paths of the resulting Itô SDE using the Euler–Maruyama (EM) scheme and validate path statistics against theoretically derived benchmarks.\n\nYour program must implement the following tasks in a principle-based manner.\n\n- Derivation task:\n  - Starting from the chain rules and the defining limits of the Itô and Stratonovich integrals, show that a Stratonovich SDE of the form\n    $$\n    dX_t \\;=\\; a(X_t)\\,dt \\;+\\; b(X_t)\\circ dW_t\n    $$\n    is equivalent to an Itô SDE of the form\n    $$\n    dX_t \\;=\\; f(X_t)\\,dt \\;+\\; g(X_t)\\,dW_t,\n    $$\n    where $f(\\cdot)$ and $g(\\cdot)$ are to be expressed in terms of $a(\\cdot)$ and $b(\\cdot)$ and their derivatives. Do not assume any pre-derived conversion formula; you must reason from the fundamental definitions of the integrals and their chain rules.\n\n- Discretization task:\n  - Implement the Euler–Maruyama (EM) method for the Itô SDE $dX_t=f(X_t)\\,dt+g(X_t)\\,dW_t$ on a uniform grid with time step $h$, namely\n    $$\n    X_{n+1} \\;=\\; X_n \\;+\\; f(X_n)\\,h \\;+\\; g(X_n)\\,\\Delta W_n,\\qquad \\Delta W_n \\sim \\mathcal{N}(0,h),\n    $$\n    with $X_0$ prescribed. Use independent Gaussian increments across time and across paths. Use $h$ specified per test case below.\n\n- Statistical validation task:\n  - For each specified test case, simulate an ensemble of $N$ independent paths up to time $T$ using EM, compute requested statistics at the terminal time $T$, and compare to the exact theoretical values derived from the Itô SDE. Each comparison must be evaluated against an absolute tolerance, and the result recorded as a boolean indicating whether the empirical statistic is within tolerance of the theoretical value. The requested statistics and tolerances are provided in the test suite below.\n\nTest suite. For each case, you must first convert the given Stratonovich SDE to its Itô form by principled derivation, then simulate with EM, and finally validate the stated statistic(s). All times are in the same abstract unit; no physical units are involved, and no angle units are required.\n\n- Case A (linear drift with constant diffusion; boundary test for zero correction):\n  - Stratonovich SDE: $dX_t \\,=\\, a(X_t)\\,dt + b(X_t)\\circ dW_t$ with $a(x)= -k\\,x$ and $b(x)=\\sigma$.\n  - Parameters: $k=1.1$, $\\sigma=0.6$, $X_0=1.3$, $T=1.0$, $h=0.005$, $N=30000$, seed $=12345$.\n  - Theoretical statistics at time $T$ for the Itô SDE:\n    - Mean: $\\mathbb{E}[X_T] \\,=\\, X_0\\,e^{-kT}$.\n    - Variance: $\\mathrm{Var}(X_T) \\,=\\, \\dfrac{\\sigma^2}{2k}\\left(1-e^{-2kT}\\right)$.\n  - Tolerances: mean tolerance $\\tau_{\\text{mean}}=0.04$, variance tolerance $\\tau_{\\text{var}}=0.05$.\n  - Validation outputs for this case: two booleans in order, mean-within-tolerance, variance-within-tolerance.\n\n- Case B (multiplicative noise; nonzero conversion correction; geometric growth):\n  - Stratonovich SDE: $dX_t \\,=\\, a(X_t)\\,dt + b(X_t)\\circ dW_t$ with $a(x)=\\mu_{\\mathrm{S}}\\,x$ and $b(x)=\\sigma\\,x$.\n  - Parameters: $\\mu_{\\mathrm{S}}=0.10$, $\\sigma=0.50$, $X_0=1.2$, $T=1.0$, $h=0.005$, $N=30000$, seed $=54321$.\n  - Theoretical statistic at time $T$ for the Itô SDE:\n    - Mean: $\\mathbb{E}[X_T] \\,=\\, X_0\\,\\exp\\!\\big(\\mu_{\\mathrm{I}}\\,T\\big)$, where $\\mu_{\\mathrm{I}}$ is the Itô drift coefficient multiplying $x$ that you must derive from the conversion.\n  - Tolerance: mean tolerance $\\tau_{\\text{mean}}=0.04$.\n  - Validation output for this case: one boolean, mean-within-tolerance.\n\n- Case C (square-root diffusion; state-dependent noise with singular derivative; positivity challenge):\n  - Stratonovich SDE: $dX_t \\,=\\, a(X_t)\\,dt + b(X_t)\\circ dW_t$ with $a(x)=0$ and $b(x)=2\\sqrt{x}$.\n  - Parameters: $X_0=0.4$, $T=1.0$, $h=0.005$, $N=30000$, seed $=20231102$.\n  - Theoretical statistic at time $T$ for the Itô SDE:\n    - Mean: $\\mathbb{E}[X_T] \\,=\\, X_0 + T$.\n  - Tolerance: mean tolerance $\\tau_{\\text{mean}}=0.05$.\n  - Numerical stability instruction: when evaluating $b(x)$ inside the numerical scheme, use $\\sqrt{\\max(x,0)}$ to ensure the square root is well-defined; this guards against rare negative excursions introduced by the discretization.\n  - Validation output for this case: one boolean, mean-within-tolerance.\n\nImplementation details to satisfy:\n- Use the Euler–Maruyama method exactly as stated.\n- Use independent standard normal random variables scaled by $\\sqrt{h}$ for the increments $\\Delta W_n$.\n- For each case, use the given random seed for reproducibility.\n- Produce all requested booleans in the order: Case A mean, Case A variance, Case B mean, Case C mean.\n\nRequired final output format:\n- Your program must print a single line containing a comma-separated list of the four boolean results enclosed in square brackets, for example $[{\\rm True},{\\rm False},{\\rm True},{\\rm True}]$.\n\nNo external input is required; all parameters are specified above. The answer must be produced with no units and no additional text. The final printed line must match the format exactly.", "solution": "The problem is valid as it is scientifically grounded in the theory of stochastic calculus, is well-posed with all necessary parameters and conditions defined, and is expressed in objective, formal language. We will first derive the relationship between Stratonovich and Itô SDEs from foundational principles, then apply this to the specific cases, and finally design a numerical simulation to validate the theoretical results.\n\n### Part 1: Derivation of the Itô-Stratonovich Conversion Formula\n\nThe core task is to convert a Stratonovich SDE of the form\n$$\ndX_t = a(X_t)\\,dt + b(X_t)\\circ dW_t\n$$\ninto its equivalent Itô form\n$$\ndX_t = f(X_t)\\,dt + g(X_t)\\,dW_t.\n$$\nThis requires relating the Stratonovich integral, denoted by `$\\circ$`, to the Itô integral. The fundamental difference lies in the evaluation point of the integrand in the Riemann-Stieltjes sums that define them. The Itô integral uses the left-hand point of a time interval, while the Stratonovich integral uses the midpoint.\n\nThe relationship between the two integrals for a general process $Y_t$ is given by:\n$$\n\\int_0^T Y_t \\circ dW_t = \\int_0^T Y_t \\,dW_t + \\frac{1}{2} [Y, W]_T\n$$\nwhere $[Y, W]_T$ is the quadratic covariation of the processes $Y_t$ and $W_t$ over the interval $[0, T]$. In differential form, this is:\n$$\nY_t \\circ dW_t = Y_t \\,dW_t + \\frac{1}{2} d[Y, W]_t.\n$$\nIn our problem, the process $Y_t$ is a function of $X_t$, specifically $Y_t = b(X_t)$. We need to find the covariation $d[b(X), W]_t$. The quadratic covariation is calculated from the product of the differential terms, following the rules of Itô calculus: $dt \\cdot dt = 0$, $dt \\cdot dW_t = 0$, and $dW_t \\cdot dW_t = dt$. The covariation differential is $d[b(X), W]_t = d(b(X_t)) \\cdot dW_t$.\n\nTo find $d(b(X_t))$, we apply Itô's lemma (the chain rule for Itô processes) to the function $b(x)$, assuming $X_t$ follows the target Itô SDE $dX_t = f(X_t)dt + g(X_t)dW_t$:\n$$\nd(b(X_t)) = b'(X_t) dX_t + \\frac{1}{2} b''(X_t) (dX_t)^2\n$$\nSubstituting $dX_t = f(X_t)dt + g(X_t)dW_t$ and applying the Itô multiplication rules:\n\\begin{align*}\nd(b(X_t)) &= b'(X_t) (f(X_t)dt + g(X_t)dW_t) + \\frac{1}{2} b''(X_t) (f(X_t)dt + g(X_t)dW_t)^2 \\\\\n&= b'(X_t)f(X_t)dt + b'(X_t)g(X_t)dW_t + \\frac{1}{2} b''(X_t) g(X_t)^2 dt\n\\end{align*}\nNow, we compute the covariation differential:\n$$\nd[b(X), W]_t = d(b(X_t)) \\cdot dW_t = (b'(X_t)g(X_t)dW_t) \\cdot dW_t = b'(X_t)g(X_t)dt.\n$$\nWe can now substitute this back into the integral relationship:\n$$\nb(X_t) \\circ dW_t = b(X_t) \\,dW_t + \\frac{1}{2} b'(X_t)g(X_t)dt.\n$$\nLet's insert this into the original Stratonovich SDE:\n$$\ndX_t = a(X_t)dt + \\left( b(X_t) \\,dW_t + \\frac{1}{2}b'(X_t)g(X_t)dt \\right).\n$$\nBy comparing the $dW_t$ term in this equation with the target Itô form $dX_t = f(X_t)dt + g(X_t)dW_t$, we must have $g(X_t) = b(X_t)$.\n\nSubstituting $g(x) = b(x)$ into our derived expression, we get:\n$$\ndX_t = a(X_t)dt + b(X_t) \\,dW_t + \\frac{1}{2}b'(X_t)b(X_t)dt.\n$$\nFinally, grouping the $dt$ terms gives the equivalent Itô SDE:\n$$\ndX_t = \\left( a(X_t) + \\frac{1}{2}b(X_t)b'(X_t) \\right)dt + b(X_t)dW_t.\n$$\nFrom this, we identify the functions for the Itô form:\n$$\nf(x) = a(x) + \\frac{1}{2}b(x)b'(x)\n$$\n$$\ng(x) = b(x)\n$$\nThe term $\\frac{1}{2}b(x)b'(x)$ is the Itô-Stratonovich correction term.\n\n### Part 2: Application to Test Cases and Discretization\n\nWe now apply this conversion formula to each case and define the Euler-Maruyama scheme. The scheme for the Itô SDE $dX_t = f(X_t)dt + g(X_t)dW_t$ with time step $h$ is:\n$$\nX_{n+1} = X_n + f(X_n)h + g(X_n)\\Delta W_n,\n$$\nwhere $X_n \\approx X(nh)$ and $\\Delta W_n \\sim \\mathcal{N}(0,h)$ are independent increments of the Wiener process.\n\n**Case A: Linear drift, constant diffusion**\n- Stratonovich SDE: $a(x) = -k x$, $b(x) = \\sigma$.\n- Derivative of $b(x)$: $b'(x) = 0$.\n- Correction term: $\\frac{1}{2}b(x)b'(x) = \\frac{1}{2}(\\sigma)(0) = 0$.\n- Itô SDE: $dX_t = (-k X_t + 0)dt + \\sigma dW_t = -k X_t dt + \\sigma dW_t$.\n- This is an Ornstein-Uhlenbeck process. The Itô and Stratonovich forms are identical.\n- For simulation: $f(x) = -k x$, $g(x) = \\sigma$.\n- The theoretical mean $\\mathbb{E}[X_T] = X_0 e^{-kT}$ and variance $\\mathrm{Var}(X_T) = \\frac{\\sigma^2}{2k}(1-e^{-2kT})$ are the known moments for this process.\n\n**Case B: Multiplicative noise, geometric growth**\n- Stratonovich SDE: $a(x) = \\mu_{\\mathrm{S}} x$, $b(x) = \\sigma x$.\n- Derivative of $b(x)$: $b'(x) = \\sigma$.\n- Correction term: $\\frac{1}{2}b(x)b'(x) = \\frac{1}{2}(\\sigma x)(\\sigma) = \\frac{1}{2}\\sigma^2 x$.\n- Itô SDE drift: $f(x) = a(x) + \\frac{1}{2}b(x)b'(x) = \\mu_{\\mathrm{S}} x + \\frac{1}{2}\\sigma^2 x = (\\mu_{\\mathrm{S}} + \\frac{1}{2}\\sigma^2) x$.\n- Itô SDE: $dX_t = (\\mu_{\\mathrm{S}} + \\frac{1}{2}\\sigma^2) X_t dt + \\sigma X_t dW_t$.\n- This is a Geometric Brownian Motion. The Itô drift coefficient is $\\mu_{\\mathrm{I}} = \\mu_{\\mathrm{S}} + \\frac{1}{2}\\sigma^2$.\n- For simulation: $f(x) = \\mu_{\\mathrm{I}} x$, $g(x) = \\sigma x$.\n- The theoretical mean is $\\mathbb{E}[X_T] = X_0 \\exp(\\mu_{\\mathrm{I}}T)$, which matches the problem statement.\n\n**Case C: Square-root diffusion**\n- Stratonovich SDE: $a(x) = 0$, $b(x) = 2\\sqrt{x}$.\n- Derivative of $b(x)$: $b'(x) = 2 \\cdot \\frac{1}{2}x^{-1/2} = \\frac{1}{\\sqrt{x}}$.\n- Correction term: $\\frac{1}{2}b(x)b'(x) = \\frac{1}{2}(2\\sqrt{x})(\\frac{1}{\\sqrt{x}}) = 1$. The correction is surprisingly a constant.\n- Itô SDE drift: $f(x) = a(x) + \\frac{1}{2}b(x)b'(x) = 0 + 1 = 1$.\n- Itô SDE: $dX_t = 1 \\cdot dt + 2\\sqrt{X_t} dW_t$.\n- For simulation: $f(x) = 1$, $g(x) = 2\\sqrt{x}$.\n- To find the theoretical mean, we take the expectation of the Itô SDE: $d\\mathbb{E}[X_t] = \\mathbb{E}[1]dt + \\mathbb{E}[2\\sqrt{X_t}dW_t]$. The expectation of an Itô integral is zero, so $d\\mathbb{E}[X_t] = dt$.\n- Integrating from $0$ to $T$ yields $\\mathbb{E}[X_T] - \\mathbb{E}[X_0] = T$. As $X_0$ is a constant, this gives $\\mathbb{E}[X_T] = X_0 + T$, matching the problem.\n\nThe simulation will proceed by implementing the Euler-Maruyama scheme for each derived Itô SDE, generating $N$ paths, and computing the sample mean and variance at time $T$ for comparison against these theoretical benchmarks.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Derives Itô SDEs from Stratonovich SDEs, simulates them using the\n    Euler-Maruyama method, and validates path statistics.\n    \"\"\"\n    results = []\n\n    # --- Case A: Ornstein-Uhlenbeck Process ---\n    # Parameters\n    k = 1.1\n    sigma = 0.6\n    X0 = 1.3\n    T = 1.0\n    h = 0.005\n    N = 30000\n    seed = 12345\n    \n    # Stratonovich: a(x) = -k*x, b(x) = sigma\n    # b'(x) = 0. Correction term is 0.\n    # Itô: f(x) = -k*x, g(x) = sigma\n    f_A = lambda x: -k * x\n    g_A = lambda x: sigma\n\n    # Simulation\n    rng = np.random.default_rng(seed)\n    num_steps = int(T / h)\n    X = np.full(N, X0, dtype=np.float64)\n    # Pre-generate all random increments for efficiency\n    dW = rng.standard_normal(size=(num_steps, N)) * np.sqrt(h)\n\n    for i in range(num_steps):\n        X = X + f_A(X) * h + g_A(X) * dW[i, :]\n\n    # Statistical Validation\n    theo_mean_A = X0 * np.exp(-k * T)\n    theo_var_A = (sigma**2 / (2 * k)) * (1 - np.exp(-2 * k * T))\n    emp_mean_A = np.mean(X)\n    emp_var_A = np.var(X)\n    \n    tau_mean_A = 0.04\n    tau_var_A = 0.05\n\n    results.append(np.abs(emp_mean_A - theo_mean_A) < tau_mean_A)\n    results.append(np.abs(emp_var_A - theo_var_A) < tau_var_A)\n\n    # --- Case B: Geometric Brownian Motion ---\n    # Parameters\n    mu_S = 0.10\n    sigma_B = 0.50\n    X0_B = 1.2\n    # T, h, N are the same\n    seed_B = 54321\n\n    # Stratonovich: a(x) = mu_S*x, b(x) = sigma*x\n    # b'(x) = sigma. Correction term is 0.5 * b(x) * b'(x) = 0.5 * (sigma*x) * sigma = 0.5 * sigma^2 * x.\n    # Itô drift coefficient: mu_I = mu_S + 0.5 * sigma^2\n    mu_I = mu_S + 0.5 * sigma_B**2\n    f_B = lambda x: mu_I * x\n    g_B = lambda x: sigma_B * x\n\n    # Simulation\n    rng_B = np.random.default_rng(seed_B)\n    X_B = np.full(N, X0_B, dtype=np.float64)\n    dW_B = rng_B.standard_normal(size=(num_steps, N)) * np.sqrt(h)\n    \n    for i in range(num_steps):\n        X_B = X_B + f_B(X_B) * h + g_B(X_B) * dW_B[i, :]\n    \n    # Statistical Validation\n    theo_mean_B = X0_B * np.exp(mu_I * T)\n    emp_mean_B = np.mean(X_B)\n    \n    tau_mean_B = 0.04\n    \n    results.append(np.abs(emp_mean_B - theo_mean_B) < tau_mean_B)\n\n    # --- Case C: Square-Root Diffusion ---\n    # Parameters\n    X0_C = 0.4\n    # T, h, N are the same\n    seed_C = 20231102\n\n    # Stratonovich: a(x) = 0, b(x) = 2*sqrt(x)\n    # b'(x) = 1/sqrt(x). Correction term is 0.5 * b(x) * b'(x) = 0.5 * (2*sqrt(x)) * (1/sqrt(x)) = 1.\n    # Itô: f(x) = 1, g(x) = 2*sqrt(x)\n    f_C = lambda x: 1.0\n    # Use np.maximum to handle potential negative values from discretization noise\n    g_C = lambda x: 2.0 * np.sqrt(np.maximum(x, 0))\n\n    # Simulation\n    rng_C = np.random.default_rng(seed_C)\n    X_C = np.full(N, X0_C, dtype=np.float64)\n    dW_C = rng_C.standard_normal(size=(num_steps, N)) * np.sqrt(h)\n\n    for i in range(num_steps):\n        X_C = X_C + f_C(X_C) * h + g_C(X_C) * dW_C[i, :]\n\n    # Statistical Validation\n    theo_mean_C = X0_C + T\n    emp_mean_C = np.mean(X_C)\n    \n    tau_mean_C = 0.05\n    \n    results.append(np.abs(emp_mean_C - theo_mean_C) < tau_mean_C)\n\n    # Print a single line with the comma-separated list of booleans\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3226843"}]}