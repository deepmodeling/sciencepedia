{"hands_on_practices": [{"introduction": "Before tackling problems that require full numerical simulation, we begin with a special case that possesses an exact analytical solution. This exercise explores the evolution of a 'chirped' Gaussian wave packet, where an initial quadratic phase in space leads to fascinating focusing behavior [@problem_id:2450147]. By deriving the conditions for the wave packet to contract before it inevitably spreads, we can build crucial physical intuition about wave packet dynamics and establish a baseline for understanding more complex systems.", "problem": "Consider a one-dimensional, free, nonrelativistic quantum particle in units where Planck’s reduced constant is set to one and mass is set to one (that is, $\\hbar=1$ and $m=1$). The state $\\psi(x,t)$ obeys the free-particle time-dependent Schrödinger equation $i \\,\\partial \\psi / \\partial t = -\\tfrac{1}{2}\\,\\partial^2 \\psi / \\partial x^2$. At time $t=0$, the normalized wave function is a Gaussian with a quadratic phase (a chirped Gaussian) given by $\\psi(x,0) = A\\,\\exp\\!\\left(-a x^2\\right)\\exp\\!\\left(i b x^2\\right)$, where $a0$ and $b$ are real parameters, and $A$ is the normalization constant chosen such that $\\int_{-\\infty}^{\\infty} |\\psi(x,0)|^2\\,dx = 1$. Define the spatial standard deviation $\\sigma_x(t)$ by $\\sigma_x(t) = \\sqrt{\\langle x^2 \\rangle_t - \\langle x \\rangle_t^2}$, where $\\langle \\cdot \\rangle_t$ denotes the quantum expectation value at time $t$. For this initial condition with zero mean position and momentum, $\\langle x \\rangle_t = 0$ for all $t$, so $\\sigma_x(t) = \\sqrt{\\langle x^2 \\rangle_t}$. For forward-in-time evolution only, that is, for $t \\ge 0$, determine the time $t_\\mathrm{focus}$ at which $\\sigma_x(t)$ attains its minimum value, the corresponding minimum width $\\sigma_x(t_\\mathrm{focus})$, and whether genuine self-focusing occurs in forward time, defined as the existence of some $t0$ with $\\sigma_x(t)  \\sigma_x(0)$. Use the following test suite of parameter pairs $(a,b)$, each with $a0$ and real $b$: $(a,b)=(1,-1)$, $(a,b)=(1,0)$, $(a,b)=(\\tfrac{1}{2},-2)$, $(a,b)=(2,3)$, $(a,b)=(\\tfrac{1}{4},-\\tfrac{1}{2})$. For each test case, compute three outputs: the focus time $t_\\mathrm{focus}$, the focus width $\\sigma_x(t_\\mathrm{focus})$, and a focusing flag which is $1$ if self-focusing occurs in forward time and $0$ otherwise. All reported quantities are unitless. Report $t_\\mathrm{focus}$ and $\\sigma_x(t_\\mathrm{focus})$ rounded to six decimal places, and report the focusing flag as an integer $0$ or $1$. Your program should produce a single line of output containing the results as a comma-separated list of lists, in the same order as the test suite, with each inner list formatted as $[t_\\mathrm{focus},\\sigma_x(t_\\mathrm{focus}),\\mathrm{flag}]$, for example, $[[t_1,\\sigma_1,f_1],[t_2,\\sigma_2,f_2],\\dots]$.", "solution": "The problem statement is validated as scientifically grounded, well-posed, objective, and self-contained. It describes a standard problem in quantum mechanics—the time evolution of a Gaussian wave packet—and is free of any logical or factual inconsistencies. All necessary parameters and definitions are provided. I will therefore proceed with a complete analytical solution.\n\nThe system describes a free particle of mass $m=1$ in one dimension, governed by the time-dependent Schrödinger equation (TDSE) with $\\hbar=1$:\n$$ i \\frac{\\partial \\psi(x,t)}{\\partial t} = -\\frac{1}{2} \\frac{\\partial^2 \\psi(x,t)}{\\partial x^2} $$\nThe initial state at time $t=0$ is a chirped Gaussian wave packet:\n$$ \\psi(x,0) = A \\exp(-ax^2) \\exp(ibx^2) = A \\exp(-(a-ib)x^2) $$\nwhere $a0$ and $b$ are real parameters, and $A$ is a normalization constant. This initial state is a Gaussian function with a complex parameter $\\gamma_0 = a-ib$. The condition $a=\\Re(\\gamma_0)0$ ensures the wave function is normalizable.\n\nA key property of the free-particle TDSE is that an initial Gaussian wave packet remains Gaussian for all time. We can therefore propose an ansatz for the time-evolved wave function of the form:\n$$ \\psi(x,t) = A(t) \\exp(-\\gamma(t) x^2) $$\nwhere $\\gamma(t)$ is a time-dependent complex parameter and $A(t)$ is a time-dependent normalization factor. Substituting this ansatz into the TDSE yields two ordinary differential equations, one for $\\gamma(t)$ and one for $A(t)$, by equating coefficients of powers of $x^2$:\n$$ i \\frac{d\\gamma}{dt} = 2\\gamma(t)^2 $$\nThis is a separable first-order differential equation for $\\gamma(t)$. We solve it subject to the initial condition $\\gamma(0) = \\gamma_0 = a-ib$:\n$$ \\int_{\\gamma_0}^{\\gamma(t)} \\frac{d\\gamma'}{\\gamma'^2} = \\int_0^t -2i dt' \\implies \\left[-\\frac{1}{\\gamma'}\\right]_{\\gamma_0}^{\\gamma(t)} = -2it $$\n$$ -\\frac{1}{\\gamma(t)} + \\frac{1}{\\gamma_0} = -2it \\implies \\frac{1}{\\gamma(t)} = \\frac{1}{\\gamma_0} + 2it $$\nSolving for $\\gamma(t)$:\n$$ \\gamma(t) = \\frac{1}{1/\\gamma_0 + 2it} = \\frac{\\gamma_0}{1 + 2it\\gamma_0} $$\nSubstituting $\\gamma_0=a-ib$:\n$$ \\gamma(t) = \\frac{a-ib}{1 + 2it(a-ib)} = \\frac{a-ib}{(1+2bt) + i(2at)} $$\nThe probability density is given by $|\\psi(x,t)|^2 = |A(t)|^2 \\exp(-2\\Re(\\gamma(t))x^2)$. This is a Gaussian distribution in $x$. The spatial standard deviation $\\sigma_x(t)$ is related to the real part of $\\gamma(t)$. For a probability density proportional to $\\exp(-C x^2)$, the variance is $\\sigma_x^2 = 1/(2C)$. In our case, $C = 2\\Re(\\gamma(t))$, so $\\sigma_x(t)^2 = 1/(4\\Re(\\gamma(t)))$.\n\nWe compute the real part of $\\gamma(t)$:\n$$ \\Re(\\gamma(t)) = \\Re\\left(\\frac{a-ib}{(1+2bt) + i(2at)}\\right) = \\Re\\left(\\frac{(a-ib)((1+2bt) - i(2at))}{(1+2bt)^2 + (2at)^2}\\right) $$\n$$ \\Re(\\gamma(t)) = \\frac{a(1+2bt) - b(2at)}{(1+2bt)^2 + 4a^2t^2} = \\frac{a}{(1+2bt)^2 + 4a^2t^2} $$\nThe squared width $\\sigma_x(t)^2$ is therefore:\n$$ \\sigma_x(t)^2 = \\frac{1}{4\\Re(\\gamma(t))} = \\frac{(1+2bt)^2 + 4a^2t^2}{4a} $$\nTo find the time $t_\\mathrm{focus}$ where $\\sigma_x(t)$ is minimized for $t \\ge 0$, we minimize $\\sigma_x(t)^2$. Let $F(t) = \\sigma_x(t)^2$. We expand the expression for $F(t)$:\n$$ F(t) = \\frac{1+4bt+4b^2t^2+4a^2t^2}{4a} = \\frac{1}{a}\\left(\\frac{1}{4} + bt + (a^2+b^2)t^2\\right) $$\nThis is a quadratic function of $t$, representing a parabola. Its minimum occurs where the derivative is zero:\n$$ \\frac{dF}{dt} = \\frac{1}{a}(b + 2(a^2+b^2)t) = 0 $$\n$$ t = -\\frac{b}{2(a^2+b^2)} $$\nLet us call this time $t_\\mathrm{min}$. Since we are restricted to forward time evolution, $t \\ge 0$, we must consider the sign of $t_\\mathrm{min}$:\n\nCase 1: $b  0$.\n$t_\\mathrm{min}  0$. The minimum of the parabola occurs at a negative time. For $t \\ge 0$, the function $F(t)$ is strictly increasing. Thus, the minimum value for $t \\ge 0$ is at $t=0$.\n$t_\\mathrm{focus} = 0$.\nThe minimum width is the initial width, $\\sigma_x(0) = \\sqrt{F(0)} = \\sqrt{\\frac{1}{4a}} = \\frac{1}{2\\sqrt{a}}$.\n\nCase 2: $b = 0$.\n$t_\\mathrm{min} = 0$. The minimum occurs at $t=0$.\n$t_\\mathrm{focus} = 0$.\nThe minimum width is $\\sigma_x(0) = \\frac{1}{2\\sqrt{a}}$.\n\nCase 3: $b  0$.\n$t_\\mathrm{min}  0$. The minimum occurs at a positive time, so it is physically accessible.\n$t_\\mathrm{focus} = -\\frac{b}{2(a^2+b^2)}$.\nTo find the minimum width $\\sigma_x(t_\\mathrm{focus})$, we substitute $t_\\mathrm{focus}$ back into $F(t)$:\n$$ \\sigma_x(t_\\mathrm{focus})^2 = \\frac{1}{4a}\\left[1 - \\frac{2b^2}{a^2+b^2} + \\frac{4(a^2+b^2)b^2}{4(a^2+b^2)^2}\\right] = \\frac{1}{4a}\\left[1 - \\frac{b^2}{a^2+b^2}\\right] = \\frac{1}{4a}\\left[\\frac{a^2}{a^2+b^2}\\right] = \\frac{a}{4(a^2+b^2)} $$\n$$ \\sigma_x(t_\\mathrm{focus}) = \\sqrt{\\frac{a}{4(a^2+b^2)}} = \\frac{1}{2}\\sqrt{\\frac{a}{a^2+b^2}} $$\n\nFinally, we determine the focusing flag. Genuine self-focusing occurs if there exists some $t  0$ such that $\\sigma_x(t)  \\sigma_x(0)$. This is equivalent to the width initially decreasing, i.e., $\\frac{dF}{dt}|_{t=0}  0$.\n$$ \\frac{dF}{dt}|_{t=0} = \\frac{b}{a} $$\nSince $a0$, the sign is determined by $b$.\n- If $b  0$, $\\frac{dF}{dt}|_{t=0}  0$, so the width initially decreases. Focusing occurs. Flag = $1$.\n- If $b \\ge 0$, $\\frac{dF}{dt}|_{t=0} \\ge 0$, so the width is either stationary or increasing at $t=0$. For $t0$, the width is always greater than or equal to the initial width. No focusing occurs. Flag = $0$.\n\nThese derived formulae are now applied to the provided test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the quantum wave packet focusing problem for a given set of test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (1.0, -1.0),\n        (1.0, 0.0),\n        (0.5, -2.0),\n        (2.0, 3.0),\n        (0.25, -0.5)\n    ]\n\n    results = []\n    for a, b in test_cases:\n        # According to the derived analytical solution:\n        # The time evolution of the squared width is a parabola in t:\n        # sigma_x(t)^2 = (1/a) * (1/4 + b*t + (a^2+b^2)*t^2)\n        # The minimum of this parabola occurs at t_min = -b / (2*(a^2+b^2)).\n        # We need to find the minimum for t = 0.\n\n        if b  0:\n            # The global minimum occurs at a positive time t_focus  0.\n            # This corresponds to self-focusing.\n            t_focus = -b / (2 * (a**2 + b**2))\n            # The minimum width is sigma_x(t_focus) = 0.5 * sqrt(a / (a^2+b^2)).\n            sigma_focus = 0.5 * np.sqrt(a / (a**2 + b**2))\n            focusing_flag = 1\n        else:  # b = 0\n            # The global minimum is at t_min = 0. For t = 0, the width is\n            # monotonically increasing (or constant at t=0 if b=0).\n            # The minimum in the domain t = 0 is at t_focus = 0.\n            t_focus = 0.0\n            # The width is the initial width, sigma_x(0) = 1 / (2*sqrt(a)).\n            sigma_focus = 0.5 / np.sqrt(a)\n            focusing_flag = 0\n\n        # Format the results as required.\n        # Round floats to six decimal places.\n        # The flag is already an integer.\n        results.append(\n            f\"[{t_focus:.6f},{sigma_focus:.6f},{focusing_flag}]\"\n        )\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2450147"}, {"introduction": "We now transition from analytical treatments to direct numerical simulation of the time-dependent Schrödinger equation. This fundamental practice involves simulating the scattering of a Gaussian wave packet from a simple but important potential barrier: the Dirac delta function [@problem_id:2450186]. Implementing the split-step Fourier method will provide you with a robust tool for evolving quantum states, allowing you to compute the transmission probability and compare your numerical results with established theoretical predictions.", "problem": "Consider the one-dimensional time-dependent Schrödinger equation for a particle of mass $m$ moving in a scalar potential $V(x)$,\n$$\ni \\hbar \\,\\frac{\\partial \\psi(x,t)}{\\partial t} \\;=\\; \\left[-\\frac{\\hbar^2}{2m}\\frac{\\partial^2}{\\partial x^2} \\;+\\; V(x)\\right]\\psi(x,t),\n$$\nsubject to the convention of natural units where $\\hbar = 1$ and $m = 1$, so that the equation reduces to\n$$\ni \\,\\frac{\\partial \\psi(x,t)}{\\partial t} \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} \\;+\\; V(x)\\right]\\psi(x,t).\n$$\nLet the potential be a Dirac delta barrier located at $x_0$, given by $V(x) = \\alpha \\,\\delta(x - x_0)$. The initial state at time $t=0$ is a normalized Gaussian wave packet\n$$\n\\psi(x,0) \\;=\\; \\mathcal{N}\\,\\exp\\!\\left[-\\frac{(x-x_c)^2}{2\\sigma_x^2}\\right]\\exp\\!\\left[i\\,k_0\\,(x-x_c)\\right],\n$$\nwith center position $x_c$, spatial width $\\sigma_x$, and mean wave number $k_0$, where $\\mathcal{N}$ is the normalization constant ensuring $\\int_{-\\infty}^{\\infty} |\\psi(x,0)|^2\\,dx = 1$. For a plane wave of wave number $k$ incident on a Dirac delta potential in these units, the analytical transmission coefficient is\n$$\nT_{\\text{analytic}}(k,\\alpha) \\;=\\; \\frac{k^2}{k^2 + \\alpha^2}.\n$$\n\nYour task is to write a complete, runnable program that numerically evolves $\\psi(x,t)$ for a finite time and estimates the transmitted probability after scattering from the barrier, then compares it with $T_{\\text{analytic}}(k_0,\\alpha)$ for several test cases.\n\nSimulation requirements and conventions to ensure unambiguous evaluation:\n- Use a spatial domain of length $L = 200$ over the interval $[-L/2, L/2)$ with $N = 1024$ uniformly spaced grid points, so the grid spacing is $\\Delta x = L/N$. Use periodic boundary conditions on this interval.\n- Place the barrier at $x_0 = 0$. Represent the Dirac delta numerically by a discrete potential $V_j$ on the grid that satisfies the integral constraint $\\sum_{j=0}^{N-1} V_j\\,\\Delta x = \\alpha$, with the support localized at the grid point closest to $x_0$. This ensures the correct integrated strength of the barrier in the discretized model.\n- Evolve the wave function up to the final time $t_f = 30$ using a constant time step $\\Delta t = 0.01$.\n- Use the initial packet parameters $x_c = -30$ and $\\sigma_x = 2.0$ (dimensionless units).\n- After evolution to time $t_f$, estimate the transmitted probability as\n$$\nT_{\\text{num}} \\;=\\; \\int_{x>x_{\\text{cut}}} |\\psi(x,t_f)|^2\\,dx,\n$$\nwith the cutoff position $x_{\\text{cut}} = 10$. In the discrete model, interpret the integral as a Riemann sum with spacing $\\Delta x$.\n\nTest suite:\n- Case $1$: $(\\alpha, k_0) = (0.5, 3.0)$.\n- Case $2$: $(\\alpha, k_0) = (5.0, 2.0)$.\n- Case $3$: $(\\alpha, k_0) = (0.0, 2.5)$.\n- Case $4$: $(\\alpha, k_0) = (2.0, 1.5)$.\n\nFor each case, compute the absolute error\n$$\n\\varepsilon \\;=\\; \\left|T_{\\text{num}} - T_{\\text{analytic}}(k_0,\\alpha)\\right|.\n$$\n\nFinal output format:\n- Your program should produce a single line of output containing the results for all four cases as a comma-separated list of floating-point absolute errors enclosed in square brackets, for example, $[e_1,e_2,e_3,e_4]$ where each $e_j$ is the value of $\\varepsilon$ for the corresponding case as defined above. All quantities are dimensionless in the natural unit convention defined above.", "solution": "The problem statement is critically validated and found to be valid. It presents a well-posed, scientifically grounded problem in computational quantum mechanics that is free of contradictions or ambiguities. All necessary parameters and conditions for a numerical simulation are provided. We may therefore proceed with the solution.\n\nThe task is to simulate the time evolution of a one-dimensional Gaussian wave packet interacting with a Dirac delta potential barrier, governed by the Schrödinger equation. We will compute the transmission probability numerically and compare it to an analytical approximation. The split-step Fourier method is the chosen algorithm for time evolution due to its suitability for the given Hamiltonian structure and boundary conditions.\n\nThe solution is implemented through the following structured steps:\n\n1.  **Discretization of an Unbounded Domain**. The problem is set on an infinite domain, but for computation it must be confined. We establish a sufficiently large one-dimensional spatial grid over the interval $x \\in [-L/2, L/2)$ with length $L=200.0$ and $N=1024$ uniformly spaced points. This choice of domain ensures that the wave packet does not interact with the boundaries within the simulation time $t_f=30.0$. Periodic boundary conditions are imposed, which is natural for Fourier-based methods. The grid spacing is $\\Delta x = L/N$. The coordinates of the grid points are $x_j = -L/2 + j\\Delta x$ for $j = 0, 1, \\ldots, N-1$. The corresponding wave number grid, required for the kinetic energy operator in Fourier space, is given by the set of discrete wave numbers $k_n$ which are efficiently computed using `numpy.fft.fftfreq`. The relation is $k = 2\\pi F$, where $F$ are the frequencies returned by the function.\n\n2.  **Initial State Construction**. The initial wave function at time $t=0$ is a Gaussian wave packet, described by the complex-valued function:\n    $$\n    \\psi(x,0) \\;=\\; \\mathcal{N}\\,\\exp\\!\\left[-\\frac{(x-x_c)^2}{2\\sigma_x^2}\\right]\\exp\\!\\left[i\\,k_0\\,(x-x_c)\\right]\n    $$\n    The problem specifies the initial center position $x_c=-30.0$, the spatial width $\\sigma_x=2.0$, and provides the mean wave number $k_0$ for each test case. The normalization constant $\\mathcal{N}$ ensures the total probability is unity, i.e., $\\int_{-\\infty}^{\\infty} |\\psi(x,0)|^2\\,dx = 1$. Its analytical value is $\\mathcal{N} = (\\pi\\sigma_x^2)^{-1/4}$. We construct a complex-valued array representing $\\psi(x_j, 0)$ on the spatial grid using these parameters.\n\n3.  **Potential Representation**. The potential is a Dirac delta barrier, $V(x) = \\alpha \\,\\delta(x - x_0)$, located at $x_0=0$. In our discrete model, this idealized potential is approximated by a potential that is non-zero only at the single grid point $x_{j_0}$ closest to $x_0=0$. For our symmetric grid, this point is $x_{N/2} = 0$. To preserve the integrated strength of the delta function, we enforce the condition $\\sum_{j=0}^{N-1} V_j\\,\\Delta x = \\alpha$. This implies that the potential array $V_j$ is zero everywhere except at index $j_0=N/2$, where its value is $V_{j_0} = \\alpha / \\Delta x$.\n\n4.  **Time Evolution Algorithm: Split-Step Fourier Method**. We are solving the time-dependent Schrödinger equation $i \\frac{\\partial \\psi}{\\partial t} = \\hat{H}\\psi$, where the Hamiltonian is $\\hat{H} = \\hat{T} + \\hat{V}$. The kinetic energy operator is $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$ and the potential energy operator is $\\hat{V} = V(x)$. Since $\\hat{T}$ and $\\hat{V}$ do not commute, the formal solution $\\psi(t+\\Delta t) = e^{-i\\hat{H}\\Delta t}\\psi(t)$ requires an approximation for the matrix exponential. We use the second-order accurate Strang splitting scheme (a symmetric Trotter-Suzuki decomposition):\n    $$\n    e^{-i(\\hat{T}+\\hat{V})\\Delta t} \\approx e^{-i\\hat{V}\\Delta t/2} e^{-i\\hat{T}\\Delta t} e^{-i\\hat{V}\\Delta t/2}\n    $$\n    The algorithm for evolving the wave function over a single time step $\\Delta t$ is as follows:\n    a. Evolve under the potential operator for a half time step, $\\Delta t/2$. In position space, this is a simple multiplication: $\\psi'(x) = e^{-iV(x)\\Delta t/2}\\psi(x)$.\n    b. Evolve under the kinetic operator for a full time step, $\\Delta t$. This is most efficiently done in momentum space, where $\\hat{T}$ is a simple multiplication operator. The operator in momentum space is $\\hat{T}_k = k^2/2$. The procedure is:\n        i. Transform the wave function to momentum space using a Fast Fourier Transform (FFT): $\\tilde{\\psi}'(k) = \\mathcal{F}\\{\\psi'(x)\\}$.\n        ii. Multiply by the kinetic evolution factor: $\\tilde{\\psi}''(k) = e^{-i(k^2/2)\\Delta t}\\tilde{\\psi}'(k)$.\n        iii. Transform back to position space using an inverse FFT: $\\psi''(x) = \\mathcal{F}^{-1}\\{\\tilde{\\psi}''(k)\\}$.\n    c. Evolve again under the potential operator for a second half time step, $\\Delta t/2$: $\\psi(x,t+\\Delta t) = e^{-iV(x)\\Delta t/2}\\psi''(x)$.\n    This entire sequence preserves the norm of the wave function (unitarity) and is unconditionally stable. We repeat this process for $N_t = t_f/\\Delta t = 30.0 / 0.01 = 3000$ steps to reach the final time $t_f=30.0$.\n\n5.  **Calculation of Transmitted Probability**. After the evolution to $t=t_f$, the final state of the system is given by the wave function $\\psi(x, t_f)$. The transmitted probability, $T_{\\text{num}}$, is defined as the probability of finding the particle in the region to the right of a cutoff point, $x_{\\text{cut}}=10.0$. This is computed by integrating the probability density $|\\psi(x, t_f)|^2$ over this region. The integral is approximated by a Riemann sum on the discrete grid:\n    $$\n    T_{\\text{num}} \\;=\\; \\sum_{j \\text{ s.t. } x_j  x_{\\text{cut}}} |\\psi(x_j, t_f)|^2 \\Delta x\n    $$\n\n6.  **Error Calculation**. For each test case defined by a pair of parameters $(\\alpha, k_0)$, the numerically computed transmission $T_{\\text{num}}$ is compared to the analytical transmission coefficient for a plane wave of wave number $k_0$ incident on the same delta potential:\n    $$\n    T_{\\text{analytic}}(k_0,\\alpha) \\;=\\; \\frac{k_0^2}{k_0^2 + \\alpha^2}\n    $$\n    The absolute error $\\varepsilon = |T_{\\text{num}} - T_{\\text{analytic}}(k_0,\\alpha)|$ is calculated. This error quantifies the deviation of the wave packet's behavior from the idealized plane-wave model, as well as any numerical inaccuracies. The final output is a list of these errors for the four specified test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the time-dependent Schrödinger equation for a Gaussian wave packet\n    colliding with a Dirac delta potential. It computes the numerical transmission\n    probability and compares it to the analytical formula for several test cases.\n    \"\"\"\n    \n    # Simulation parameters\n    L = 200.0\n    N = 1024\n    dx = L / N\n    x = np.linspace(-L / 2, L / 2, N, endpoint=False)\n    k = 2 * np.pi * np.fft.fftfreq(N, d=dx)\n\n    tf = 30.0\n    dt = 0.01\n    n_steps = int(tf / dt)\n\n    # Initial wave packet parameters\n    xc = -30.0\n    sigma_x = 2.0\n\n    # Cutoff position for transmission calculation\n    x_cut = 10.0\n\n    # Test cases: (alpha, k0)\n    test_cases = [\n        (0.5, 3.0),\n        (5.0, 2.0),\n        (0.0, 2.5),\n        (2.0, 1.5)\n    ]\n\n    results = []\n\n    for alpha, k0 in test_cases:\n        # Step 1: Construct the initial wave function at t=0\n        # Normalization constant for the Gaussian packet\n        norm_const = (1 / (np.pi * sigma_x**2))**0.25\n        # The wave packet in position space\n        psi = norm_const * np.exp(-(x - xc)**2 / (2 * sigma_x**2)) * np.exp(1j * k0 * (x - xc))\n        \n        # In a discrete simulation, it's robust to re-normalize numerically.\n        initial_norm = np.sqrt(np.sum(np.abs(psi)**2) * dx)\n        psi = psi / initial_norm\n\n        # Step 2: Define the potential V(x)\n        V = np.zeros(N)\n        # Approximate the Dirac delta function at x=0\n        # The grid point x=0 is at index N/2 for our setup\n        if alpha != 0.0:\n            x0_idx = N // 2\n            V[x0_idx] = alpha / dx\n\n        # Step 3: Define the evolution operators for the split-step method\n        # Evolution under potential V for a half time step\n        exp_V_half = np.exp(-1j * V * dt / 2.0)\n        # Evolution under kinetic energy T for a full time step\n        exp_T = np.exp(-1j * (k**2 / 2.0) * dt)\n        \n        # Step 4: Time evolution loop using the split-step Fourier method\n        for _ in range(n_steps):\n            # First half-step in potential space\n            psi = exp_V_half * psi\n            \n            # Full step in momentum space\n            psi_k = np.fft.fft(psi)\n            psi_k = exp_T * psi_k\n            psi = np.fft.ifft(psi_k)\n            \n            # Second half-step in potential space\n            psi = exp_V_half * psi\n\n        # Step 5: Calculate numerical transmission probability\n        # Probability density at final time tf\n        prob_density = np.abs(psi)**2\n        # Create a boolean mask for the region x  x_cut\n        transmission_mask = x  x_cut\n        # Compute the transmitted probability via Riemann sum\n        T_num = np.sum(prob_density[transmission_mask]) * dx\n        \n        # Step 6: Calculate analytical transmission coefficient\n        T_analytic = k0**2 / (k0**2 + alpha**2)\n        \n        # Step 7: Compute the absolute error\n        error = np.abs(T_num - T_analytic)\n        results.append(error)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2450186"}, {"introduction": "Building on our 1D simulation skills, this advanced practice extends our exploration into two dimensions to investigate the intriguing realm of quantum chaos. You will simulate a wave packet's evolution within a stadium-shaped 'billiard,' a system known for its chaotic classical dynamics, and observe the quantum mechanical consequences [@problem_id:2450154]. By measuring quantities like the survival probability and parametric fidelity, you will gain hands-on experience with the tools computational physicists use to characterize the sensitive and complex behavior that emerges at the quantum-classical boundary.", "problem": "Consider a nonrelativistic quantum particle of mass $m$ moving in two spatial dimensions. The particle is confined to a stadium-shaped billiard with Dirichlet boundary conditions, that is, the wavefunction vanishes at and beyond the boundary. The domain is the stadium defined as follows: fix a nonnegative half-rectangle length $a \\ge 0$ and a radius $R  0$. The stadium is the union of a rectangle of width $2a$ and height $2R$ centered at the origin and the two semicircles of radius $R$ attached to the left and right sides of the rectangle. In Cartesian coordinates $(x,y)$, the domain $\\Omega(a,R)$ is the set of points that satisfy either $\\lvert x \\rvert \\le a$ and $\\lvert y \\rvert \\le R$, or $(x-a)^2 + y^2 \\le R^2$, or $(x+a)^2 + y^2 \\le R^2$. Inside $\\Omega(a,R)$ the potential is zero; outside $\\Omega(a,R)$ the potential is effectively infinite. You will work in dimensionless units with reduced Planck constant $\\hbar=1$ and mass $m=1$. \n\nThe time-dependent Schrödinger equation for the wavefunction $\\psi(x,y,t)$ is the fundamental starting point: \n$$\ni \\hbar \\,\\partial_t \\psi(x,y,t) = -\\frac{\\hbar^2}{2m} \\nabla^2 \\psi(x,y,t) + V(x,y)\\,\\psi(x,y,t),\n$$\nwhere $V(x,y)$ is zero on $\\Omega(a,R)$ and infinite outside. You must approximate the hard-wall boundary by a steep but finite barrier potential outside $\\Omega(a,R)$ in a way that remains numerically stable and approximately norm-preserving in the interior for small time steps, based solely on the Schrödinger equation and the definition of the Fourier transform.\n\nYou will construct a normalized Gaussian wave packet initially localized well within the billiard and endowed with a specified mean wave vector. Specifically, at time $t=0$, the wavefunction is\n$$\n\\psi_0(x,y) = \\mathcal{N}\\,\\exp\\left(-\\frac{(x-x_0)^2+(y-y_0)^2}{4\\sigma^2}\\right)\\,\\exp\\left(i\\,(k_{0x}(x-x_0)+k_{0y}(y-y_0))\\right),\n$$\nwith normalization factor $\\mathcal{N}$ chosen so that $\\int |\\psi_0|^2 \\, dx\\,dy = 1$ over the entire numerical domain. The parameters are fixed to $x_0=-0.2$, $y_0=0$, $\\sigma$ as specified in the test suite below, and $k_{0y}=0$ with $k_{0x}$ specified below.\n\nYour tasks are:\n- Starting from the Schrödinger equation and the definition of the Fourier transform, derive and implement a norm-conserving algorithm in free space that applies the kinetic energy via its Fourier representation, and enforces the hard-wall confinement by a steep repulsive potential of large but finite magnitude outside $\\Omega(a,R)$. The algorithm must be self-consistent and stable for the time steps used below. You must ensure that the numerical wavefunction is renormalized at each step to unit norm to within machine precision for the free-space part of the evolution.\n- Evolve the initial wave packet under the unperturbed stadium geometry parameters $(a,R)$ up to a specified final time $T$.\n- Evolve a second copy of the same initial wave packet under a slightly perturbed stadium geometry with $(a+\\delta a,R)$ up to the same final time $T$, where $\\delta a$ is small and specified below.\n- Compute the following observables at time $T$:\n  1. The real-space inverse participation ratio,\n  $$\n  \\mathrm{IPR}(T) = \\int_{\\mathbb{R}^2} |\\psi(x,y,T)|^4\\,dx\\,dy,\n  $$\n  for the unperturbed evolution.\n  2. The survival probability,\n  $$\n  S(T) = \\left|\\int_{\\mathbb{R}^2} \\psi_0^*(x,y)\\,\\psi(x,y,T)\\,dx\\,dy\\right|^2,\n  $$\n  for the unperturbed evolution.\n  3. The parametric fidelity,\n  $$\n  F(T) = \\left|\\int_{\\mathbb{R}^2} \\psi_{\\mathrm{pert}}^*(x,y,T)\\,\\psi(x,y,T)\\,dx\\,dy\\right|^2,\n  $$\n  where $\\psi_{\\mathrm{pert}}(x,y,T)$ is the state evolved to time $T$ in the perturbed stadium $(a+\\delta a,R)$ starting from the same initial state.\n\nAll quantities are dimensionless in these units.\n\nDiscretization and numerical domain requirements:\n- Use a uniform square grid of $N\\times N$ points with periodic spectral representation for the kinetic part. Choose domain size $L$ so that $x,y\\in[-L/2,L/2)$ with $L=2.0$. Use $N=96$ grid points in each direction, so the spacings are $\\Delta x=\\Delta y=L/N$.\n- Use a time step $\\Delta t = 0.002$ and evolve for $n=\\lfloor T/\\Delta t \\rfloor$ steps.\n- Approximate the hard-wall by a large constant barrier value $V_0$ outside the stadium and zero inside; take $V_0=5000.0$. Your algorithm must remain stable with this choice.\n\nTest suite:\n- There are three test cases. For each test case, construct and evolve the wave packet, then report the three observables $(\\mathrm{IPR}(T), S(T), F(T))$ in this order.\n  1. Case A (generic chaotic stadium): $a=0.30$, $R=0.35$, $\\delta a=0.02$, $\\sigma=0.07$, $k_{0x}=20.0$, $T=0.80$.\n  2. Case B (nearly circular, more regular): $a=0.00$, $R=0.35$, $\\delta a=0.02$, $\\sigma=0.07$, $k_{0x}=20.0$, $T=0.80$.\n  3. Case C (longer evolution, altered aspect): $a=0.40$, $R=0.30$, $\\delta a=0.01$, $\\sigma=0.07$, $k_{0x}=20.0$, $T=1.20$.\n  \nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The list must be flat and ordered as\n$$\n[\\mathrm{IPR}_A, S_A, F_A, \\mathrm{IPR}_B, S_B, F_B, \\mathrm{IPR}_C, S_C, F_C],\n$$\nwhere subscripts denote the corresponding test case. All values must be printed as decimal floating-point numbers.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It describes a standard initial value problem in computational quantum mechanics: the time evolution of a Gaussian wave packet within a stadium billiard. The physical model is based on the Schrödinger equation, and the proposed numerical approach, an approximation of a hard-wall potential with a finite barrier combined with a split-operator Fourier method, is a valid and widely used technique in the field. All parameters are specified, and the required computations are well-defined. Therefore, the problem is valid, and a solution will be provided.\n\nThe evolution of the wavefunction $\\psi(x,y,t)$ is governed by the time-dependent Schrödinger equation, which in the chosen dimensionless units ($\\hbar=1$, $m=1$) is:\n$$\ni \\frac{\\partial \\psi}{\\partial t} = H\\psi = \\left( -\\frac{1}{2}\\nabla^2 + V(x,y) \\right) \\psi\n$$\nThe Hamiltonian $H$ is the sum of the kinetic energy operator $T = -\\frac{1}{2}\\nabla^2$ and the potential energy operator $V$. The potential $V(x,y)$ is defined to be zero within the stadium domain $\\Omega(a,R)$ and a large constant $V_0$ outside, approximating an infinite barrier.\n\nThe formal solution for a small time step $\\Delta t$ is given by the action of the time evolution operator:\n$$\n\\psi(t+\\Delta t) = e^{-iH\\Delta t} \\psi(t) = e^{-i(T+V)\\Delta t} \\psi(t)\n$$\nSince the kinetic and potential energy operators do not commute, $[T,V] \\neq 0$, the exponential of the sum cannot be simply factored into a product of exponentials. To implement the evolution operator numerically, we employ a second-order Trotter-Suzuki decomposition, also known as the Strang splitting or the split-step Fourier method. This method approximates the evolution operator as a symmetric product of operators that can be computed efficiently:\n$$\ne^{-i(T+V)\\Delta t} = e^{-iV\\Delta t/2} e^{-iT\\Delta t} e^{-iV\\Delta t/2} + O(\\Delta t^3)\n$$\nThis decomposition is unitary and thus conserves the norm of the wavefunction up to the order of the truncation error. The algorithm for advancing the wavefunction from time $t$ to $t+\\Delta t$ consists of three sequential steps:\n\n1.  **Potential \"kick\" for a half-step $\\Delta t/2$**: The wavefunction is multiplied by the potential phase factor in position space.\n    $$\n    \\psi'(x,y) = e^{-iV(x,y)\\Delta t/2} \\psi(x,y,t)\n    $$\n    This operation is local in position space. The potential function $V(x,y)$ for the stadium $\\Omega(a,R)$ is constructed by setting $V=0$ for points $(x,y)$ satisfying $(\\lvert x \\rvert \\le a \\text{ and } \\lvert y \\rvert \\le R)$, or $((x-a)^2 + y^2 \\le R^2)$, or $((x+a)^2 + y^2 \\le R^2)$, and $V=V_0$ otherwise.\n\n2.  **Kinetic \"drift\" for a full-step $\\Delta t$**: The kinetic energy operator $T = (p_x^2+p_y^2)/2$ is diagonal in momentum space, not position space. Therefore, this step is most efficiently executed in the Fourier domain. The procedure is as follows:\n    a. Transform the wavefunction to momentum space using a two-dimensional Fast Fourier Transform (FFT): $\\tilde{\\psi}'(k_x,k_y) = \\mathcal{F}\\{\\psi'(x,y)\\}$.\n    b. Multiply by the kinetic phase factor. In momentum space, the kinetic operator acts as multiplication by $\\frac{1}{2}(k_x^2+k_y^2)$.\n    $$\n    \\tilde{\\psi}''(k_x,k_y) = e^{-i\\frac{1}{2}(k_x^2+k_y^2)\\Delta t} \\tilde{\\psi}'(k_x,k_y)\n    $$\n    c. Transform the result back to position space using an inverse FFT: $\\psi''(x,y) = \\mathcal{F}^{-1}\\{\\tilde{\\psi}''(k_x,k_y)\\}$.\n    This three-part sequence correctly applies the free-space propagator $e^{-iT\\Delta t}$ and is intrinsically norm-conserving, as the FFT and the multiplication by a pure phase factor of unit modulus are both unitary operations.\n\n3.  **Potential \"kick\" for a second half-step $\\Delta t/2$**: A final multiplication by the potential phase factor completes the symmetric step.\n    $$\n    \\psi(x,y,t+\\Delta t) = e^{-iV(x,y)\\Delta t/2} \\psi''(x,y)\n    $$\nThe total process is repeated for $n=\\lfloor T/\\Delta t \\rfloor$ steps to reach the final time $T$. While the method is formally norm-conserving, to counteract the accumulation of floating-point errors over many steps, the wavefunction's norm can be reset to unity after each full time step. The norm is computed via the discrete sum $\\left(\\Delta x \\Delta y \\sum_{j,k} |\\psi_{jk}|^2\\right)^{1/2}$.\n\nThe numerical implementation is performed on a discrete spatial grid. The domain $[-L/2, L/2) \\times [-L/2, L/2)$ is discretized into an $N \\times N$ grid with spacing $\\Delta x = \\Delta y = L/N$. The coordinates are $(x_j, y_k) = (-L/2+j\\Delta x, -L/2+k\\Delta y)$ for $j,k \\in \\{0, \\dots, N-1\\}$. The corresponding momentum space grid vectors are given by $k_m = 2\\pi m / L$ for $m \\in \\{-N/2, \\dots, N/2-1\\}$, which are provided by standard FFT libraries.\n\nThe initial state is a normalized Gaussian wave packet defined on this grid:\n$$\n\\psi_0(x_j,y_k) = \\mathcal{N} \\exp\\left(-\\frac{(x_j-x_0)^2+(y_k-y_0)^2}{4\\sigma^2}\\right) \\exp\\left(i(k_{0x}(x_j-x_0)+k_{0y}(y_k-y_0))\\right)\n$$\nThe normalization constant $\\mathcal{N}$ is chosen such that $\\Delta x \\Delta y \\sum_{j,k} |\\psi_0(x_j,y_k)|^2 = 1$.\n\nAt the final time $T$, the required observables are computed from the final wavefunction $\\psi(x,y,T)$:\n-   **Inverse Participation Ratio (IPR)**: This measures the localization of the probability density $|\\psi|^2$.\n    $$\n    \\mathrm{IPR}(T) \\approx \\Delta x \\Delta y \\sum_{j,k} |\\psi(x_j,y_k,T)|^4\n    $$\n-   **Survival Probability $S(T)$**: This measures the projection of the evolved state back onto the initial state, indicating how much the wave packet \"remembers\" its initial form.\n    $$\n    S(T) = \\left| \\Delta x \\Delta y \\sum_{j,k} \\psi_0^*(x_j,y_k) \\psi(x_j,y_k,T) \\right|^2\n    $$\n-   **Parametric Fidelity $F(T)$**: This measures the overlap between two states that started identically but evolved under slightly different Hamiltonians (due to the perturbation $\\delta a$). It is a sensitive probe of chaos.\n    $$\n    F(T) = \\left| \\Delta x \\Delta y \\sum_{j,k} \\psi_{\\mathrm{pert}}^*(x_j,y_k,T) \\psi(x_j,y_k,T) \\right|^2\n    $$\nTwo separate simulations are required: one for the unperturbed stadium $(a,R)$ to obtain $\\psi(T)$, and one for the perturbed stadium $(a+\\delta a, R)$ to obtain $\\psi_{\\mathrm{pert}}(T)$. Both start from the identical initial state $\\psi_0$. The implementation will follow this derived procedure for each test case.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the wave packet evolution problem in a stadium billiard for three test cases.\n    \"\"\"\n    \n    # Global numerical parameters\n    L = 2.0\n    N = 96\n    dt = 0.002\n    V0 = 5000.0\n    x0 = -0.2\n    y0 = 0.0\n    k0y = 0.0\n\n    # Test suite\n    test_cases = [\n        # Case A (chaotic)\n        {'a': 0.30, 'R': 0.35, 'da': 0.02, 'sigma': 0.07, 'k0x': 20.0, 'T': 0.80},\n        # Case B (circular/integrable)\n        {'a': 0.00, 'R': 0.35, 'da': 0.02, 'sigma': 0.07, 'k0x': 20.0, 'T': 0.80},\n        # Case C (chaotic, longer T)\n        {'a': 0.40, 'R': 0.30, 'da': 0.01, 'sigma': 0.07, 'k0x': 20.0, 'T': 1.20},\n    ]\n\n    # Grid setup\n    dx = L / N\n    dy = L / N\n    x = np.linspace(-L / 2, L / 2, N, endpoint=False)\n    y = np.linspace(-L / 2, L / 2, N, endpoint=False)\n    xx, yy = np.meshgrid(x, y, indexing='ij')\n\n    # Momentum space grid\n    kx = 2 * np.pi * np.fft.fftfreq(N, d=dx)\n    ky = 2 * np.pi * np.fft.fftfreq(N, d=dy)\n    kx_grid, ky_grid = np.meshgrid(kx, ky, indexing='ij')\n\n    # Kinetic energy operator in Fourier space\n    K_op = 0.5 * (kx_grid**2 + ky_grid**2)\n    kinetic_propagator = np.exp(-1j * K_op * dt)\n\n    final_results = []\n\n    for case in test_cases:\n        a, R, da, sigma, k0x, T = case.values()\n        \n        # --- Initial State Construction ---\n        gauss_part = np.exp(-((xx - x0)**2 + (yy - y0)**2) / (4 * sigma**2))\n        plane_wave_part = np.exp(1j * (k0x * (xx - x0) + k0y * (yy - y0)))\n        psi0_unnormalized = gauss_part * plane_wave_part\n        \n        # Normalization\n        norm_psi0 = np.sqrt(np.sum(np.abs(psi0_unnormalized)**2) * dx * dy)\n        psi0 = psi0_unnormalized / norm_psi0\n\n        # --- Potential Construction ---\n        def get_potential(a_val, R_val):\n            potential = np.full((N, N), V0)\n            \n            # Condition for being inside the stadium\n            inside_rect = (np.abs(xx) = a_val)  (np.abs(yy) = R_val)\n            inside_l_sc = (xx + a_val)**2 + yy**2 = R_val**2\n            inside_r_sc = (xx - a_val)**2 + yy**2 = R_val**2\n            \n            is_inside = inside_rect | inside_l_sc | inside_r_sc\n            potential[is_inside] = 0.0\n            return potential\n\n        # Potentials for unperturbed and perturbed systems\n        V_unpert = get_potential(a, R)\n        V_pert = get_potential(a + da, R)\n        \n        # Potential propagators\n        pot_propagator_unpert = np.exp(-1j * V_unpert * dt / 2.0)\n        pot_propagator_pert = np.exp(-1j * V_pert * dt / 2.0)\n        \n        # --- Time Evolution ---\n        psi_unpert = psi0.copy()\n        psi_pert = psi0.copy()\n        \n        num_steps = int(np.floor(T / dt))\n\n        for _ in range(num_steps):\n            # Unperturbed evolution\n            psi_unpert *= pot_propagator_unpert\n            psi_unpert = np.fft.ifft2(kinetic_propagator * np.fft.fft2(psi_unpert))\n            psi_unpert *= pot_propagator_unpert\n            # Renormalization to correct numerical drift\n            norm_unpert = np.sqrt(np.sum(np.abs(psi_unpert)**2) * dx * dy)\n            psi_unpert /= norm_unpert\n\n            # Perturbed evolution\n            psi_pert *= pot_propagator_pert\n            psi_pert = np.fft.ifft2(kinetic_propagator * np.fft.fft2(psi_pert))\n            psi_pert *= pot_propagator_pert\n            # Renormalization\n            norm_pert = np.sqrt(np.sum(np.abs(psi_pert)**2) * dx * dy)\n            psi_pert /= norm_pert\n\n        # --- Observables Calculation ---\n        # 1. Inverse Participation Ratio (IPR) for unperturbed\n        ipr = np.sum(np.abs(psi_unpert)**4) * dx * dy\n\n        # 2. Survival Probability (S) for unperturbed\n        survival_overlap = np.sum(np.conj(psi0) * psi_unpert) * dx * dy\n        survival_prob = np.abs(survival_overlap)**2\n\n        # 3. Parametric Fidelity (F)\n        fidelity_overlap = np.sum(np.conj(psi_pert) * psi_unpert) * dx * dy\n        fidelity = np.abs(fidelity_overlap)**2\n\n        final_results.extend([ipr, survival_prob, fidelity])\n\n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n```", "id": "2450154"}]}