{"hands_on_practices": [{"introduction": "This practice provides a foundational exercise in computational quantum dynamics: calculating the transmission probability of a wave packet. You will implement a simulation of the time-dependent Schrödinger equation to model a wave packet encountering a potential barrier. The core task is to compute the transmission probability by integrating the probability current density, $J(x,t)$, past the barrier, directly applying the principles of quantum mechanical flux and probability conservation [@problem_id:2460912]. This exercise is essential for building a robust understanding of how theoretical quantum concepts are translated into concrete, predictive numerical models.", "problem": "A one-dimensional quantum particle in atomic units (where $\\hbar = 1$ and $m = 1$) evolves according to the time-dependent Schrödinger equation. A normalized Gaussian wave packet initially localized at position $x_0$ with spatial width $\\sigma$ and mean wavenumber $k_0$ is incident from the left on a rectangular potential barrier of height $V_0$ and width $a$, centered at $x_B = 0$. The tunneling (transmission) probability through the barrier can be defined as the total probability flux crossing a fixed probe location $x_\\text{probe}$ situated to the right of the barrier, integrated over all time, in accordance with probability conservation. Implement a numerical solver to propagate the wave packet, compute the instantaneous probability current density at the probe, and integrate the transmitted flux to obtain the transmission probability for each test case.\n\nFundamental base and definitions to use:\n- The time-dependent Schrödinger equation is\n$$\n\\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right]\\psi(x,t).\n$$\n- The probability density is $\\rho(x,t) = |\\psi(x,t)|^2$. The continuity equation is\n$$\n\\frac{\\partial \\rho(x,t)}{\\partial t} + \\frac{\\partial J(x,t)}{\\partial x} = 0,\n$$\nwhere the probability current density is\n$$\nJ(x,t) \\;=\\; \\Im\\!\\left(\\psi^*(x,t)\\,\\frac{\\partial \\psi(x,t)}{\\partial x}\\right).\n$$\n- The rectangular barrier is\n$$\nV(x) \\;=\\; \\begin{cases}\nV_0,  |x - x_B| \\le \\dfrac{a}{2},\\\\\n0,  \\text{otherwise}.\n\\end{cases}\n$$\n- The initial Gaussian wave packet is\n$$\n\\psi(x,0) \\;=\\; \\left(\\frac{1}{2\\pi \\sigma^2}\\right)^{1/4}\\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\sigma^2}\\right)\\exp(\\mathrm{i}k_0 x),\n$$\nwhich must be numerically normalized on the chosen grid to ensure $\\int |\\psi(x,0)|^2 \\,\\mathrm{d}x = 1$.\n\nNumerical requirements:\n- Propagate $\\psi(x,t)$ in a finite spatial domain using a stable algorithm that is consistent with the time-dependent Schrödinger equation; for example, a time-splitting spectral method based on the Fast Fourier Transform (FFT, Fast Fourier Transform) is acceptable, but any method that respects the above equation and achieves comparable accuracy is allowed.\n- To prevent unphysical reflections from the simulation boundaries, use absorbing boundaries implemented as a complex absorbing layer. One convenient choice is to add a purely imaginary contribution $-\\,\\mathrm{i}\\,W(x)$ to the potential near the left and right edges, with $W(x) \\ge 0$ smooth and vanishing in the interior.\n- Compute the instantaneous probability current density at the fixed probe location $x_\\text{probe}$ at each time step. To approximate $\\partial \\psi/\\partial x$ you may use a centered finite difference with spatial step $\\Delta x$.\n- Define the transmitted flux at the probe as the positive-direction contribution $J_+(x_\\text{probe},t) = \\max(J(x_\\text{probe},t),0)$ and approximate the transmission probability by the time integral\n$$\nT \\;\\approx\\; \\int_{0}^{T_\\text{end}} J_+(x_\\text{probe},t)\\,\\mathrm{d}t,\n$$\nwith sufficiently large $T_\\text{end}$ so that the transmitted packet has passed the probe and residual contributions are negligible.\n\nSimulation parameters common to all test cases:\n- Spatial domain $[x_\\text{min},x_\\text{max}] = [-100,100]$.\n- Number of grid points $N = 2048$ (uniform spacing).\n- Time step $\\Delta t = 0.05$.\n- Total propagation time $T_\\text{end} = 160$.\n- Absorbing layer width $x_\\text{cap} = 20$ near both domain edges and strength parameter $\\eta = 0.02$ with quadratic profile $W(x)$; that is, $W(x) = \\eta\\,s(x)^2$ in the absorbing regions, where $s(x)$ ramps from $0$ to $1$ over the width $x_\\text{cap}$.\n- Barrier center $x_B = 0$, probe location $x_\\text{probe} = a/2 + 10$ (fixed relative to the barrier width), initial packet center $x_0 = -60$, and packet width $\\sigma = 1.5$.\n\nTest suite:\n- Case $1$: $k_0 = 1.5$, $V_0 = 2.0$, $a = 4.0$.\n- Case $2$: $k_0 = 0.8$, $V_0 = 2.5$, $a = 6.0$.\n- Case $3$: $k_0 = 2.5$, $V_0 = 1.0$, $a = 4.0$.\n\nAnswer specification:\n- For each case, compute the transmission probability $T$ using the above flux-integration prescription. Each $T$ is unitless and must lie in $[0,1]$ up to numerical error. Report each result rounded to six decimal places.\n- Your program must produce a single line of output containing the three results as a comma-separated list enclosed in square brackets, for example, $[0.123456,0.000789,0.876543]$.\n- No external input is required, and all quantities are in atomic units. Ensure that the reported values are rounded to six decimal places as specified.", "solution": "The problem statement has been validated and found to be scientifically sound, well-posed, and complete. It describes a standard exercise in computational quantum dynamics, based on the fundamental principles of quantum mechanics. All required parameters for a numerical solution are provided, and the definitions are consistent. We may proceed with the solution.\n\nThe core of the problem is to solve the one-dimensional time-dependent Schrödinger equation (TDSE) for a given initial state and potential. In atomic units ($\\hbar=1$, $m=1$), the TDSE is:\n$$ \\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\hat{H}\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V_{\\text{eff}}(x)\\right]\\psi(x,t) $$\nThe initial state at $t=0$ is a normalized Gaussian wave packet. The effective potential, $V_{\\text{eff}}(x)$, includes the real rectangular potential barrier $V(x)$ and an imaginary complex absorbing potential (CAP) $- \\mathrm{i}W(x)$ at the grid boundaries to prevent unphysical reflections.\n\nTo propagate the wave function $\\psi(x,t)$ in time, we employ the time-splitting spectral method. This method is highly suitable for this problem as it is accurate, stable, and computationally efficient. The formal solution over a small time step $\\Delta t$ involves the time-evolution operator $\\hat{U}(\\Delta t) = \\exp(-\\mathrm{i}\\hat{H}\\Delta t)$. Since the kinetic energy operator, $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$, and the potential energy operator, $\\hat{V}_{\\text{eff}} = V_{\\text{eff}}(x)$, do not commute, we use the second-order Strang splitting decomposition to approximate the evolution operator:\n$$ \\hat{U}(\\Delta t) \\approx e^{-\\mathrm{i}\\hat{V}_{\\text{eff}}\\Delta t/2} e^{-\\mathrm{i}\\hat{T}\\Delta t} e^{-\\mathrm{i}\\hat{V}_{\\text{eff}}\\Delta t/2} $$\nThis approximation has an error of order $\\mathcal{O}(\\Delta t^3)$, providing sufficient accuracy for the specified parameters. The propagation from time $t$ to $t+\\Delta t$ is performed in three steps:\n$1$. A half-step evolution under the potential $\\hat{V}_{\\text{eff}}$. In the position representation, this is a simple multiplication: $\\psi'(x) = e^{-\\mathrm{i}V_{\\text{eff}}(x)\\Delta t/2} \\psi(x,t)$.\n$2$. A full-step evolution under the kinetic operator $\\hat{T}$. This operation is computationally complex in position space but trivial in momentum space, where $\\hat{T}$ is a simple multiplication operator, $\\hat{T}_k = k^2/2$. We use the Fast Fourier Transform (FFT) to switch between representations. The wave function is transformed to momentum space ($\\tilde{\\psi}'(k) = \\mathcal{F}[\\psi'(x)]$), multiplied by the kinetic evolution factor ($e^{-\\mathrm{i}k^2\\Delta t/2}$), and transformed back to position space ($\\psi''(x) = \\mathcal{F}^{-1}[e^{-\\mathrm{i}k^2\\Delta t/2}\\tilde{\\psi}'(k)]$).\n$3$. A second half-step evolution under the potential: $\\psi(x, t+\\Delta t) = e^{-\\mathrm{i}V_{\\text{eff}}(x)\\Delta t/2} \\psi''(x)$.\n\nThis three-step cycle is repeated from $t=0$ to $t=T_{\\text{end}}$.\n\nThe simulation domain is discretized into a uniform spatial grid of $N=2048$ points over the interval $[x_{\\text{min}}, x_{\\text{max}}] = [-100, 100]$, with spacing $\\Delta x = (x_{\\text{max}}-x_{\\text{min}})/N$. The corresponding momentum-space (wavenumber) grid $k$ is constructed using the `fftfreq` utility, consistent with the FFT algorithm.\n\nThe initial wave packet is given by:\n$$ \\psi(x,0) \\;=\\; C \\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\sigma^2}\\right)\\exp(\\mathrm{i}k_0 x) $$\nwhere $C = (2\\pi \\sigma^2)^{-1/4}$. Critically, for numerical work on a discrete grid, this function must be re-normalized to ensure that the total probability $\\int |\\psi(x,0)|^2 dx$, approximated by the sum $\\sum_j |\\psi(x_j,0)|^2 \\Delta x$, is exactly $1$.\n\nThe total effective potential is $V_{\\text{eff}}(x) = V(x) - \\mathrm{i}W(x)$.\nThe rectangular barrier is:\n$$ V(x) \\;=\\; \\begin{cases} V_0,  |x| \\le a/2 \\\\ 0,  \\text{otherwise} \\end{cases} $$\nThe complex absorbing potential $W(x)$ is constructed to be non-zero only near the boundaries, within a width of $x_{\\text{cap}}=20$. As specified, $W(x) = \\eta s(x)^2$ with $\\eta=0.02$, where $s(x)$ is a function that ramps linearly from $0$ at the start of the absorbing region to $1$ at the grid boundary. For example, on the right boundary for $x \\in [x_{\\text{max}}-x_{\\text{cap}}, x_{\\text{max}}]$, $s(x) = \\frac{x-(x_{\\text{max}}-x_{\\text{cap}})}{x_{\\text{cap}}}$. This imaginary potential smoothly absorbs the outgoing wave function, preventing spurious reflections.\n\nThe transmission probability $T$ is determined by integrating the flux of probability current density past a probe. The probability current density is:\n$$ J(x,t) \\;=\\; \\Im\\!\\left(\\psi^*(x,t)\\,\\frac{\\partial \\psi(x,t)}{\\partial x}\\right) $$\nNumerically, the spatial derivative at the probe location $x_{\\text{probe}}$ is approximated using a centered finite difference on the grid:\n$$ \\frac{\\partial \\psi(x_j,t)}{\\partial x} \\approx \\frac{\\psi(x_{j+1},t) - \\psi(x_{j-1},t)}{2\\Delta x} $$\nwhere $x_j$ is the grid point closest to $x_{\\text{probe}}$. The transmission probability $T$ is the time integral of the positive-directed current at the probe location $x_{\\text{probe}} = a/2 + 10$:\n$$ T \\;\\approx\\; \\sum_{n=0}^{N_t-1} \\max(J(x_{\\text{probe}}, t_n), 0) \\cdot \\Delta t $$\nwhere $t_n = n\\Delta t$ and $N_t = T_{\\text{end}}/\\Delta t$. This summation is performed over the entire simulation time.\n\nThe algorithm proceeds by initializing the grid, potentials, and the normalized wave packet. Then, the time-evolution loop propagates the wave function forward in time. At each step, the current density at the probe is calculated and its positive contribution is added to the integrated transmission probability. This procedure is repeated for each of the three test cases specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom numpy.fft import fft, ifft, fftfreq\n\ndef run_simulation(k0, V0, a):\n    \"\"\"\n    Runs a single quantum wave packet simulation for a given set of parameters.\n\n    Args:\n        k0 (float): Initial mean wavenumber of the wave packet.\n        V0 (float): Height of the potential barrier.\n        a (float): Width of the potential barrier.\n\n    Returns:\n        float: The computed transmission probability.\n    \"\"\"\n    # 1. Simulation parameters common to all cases\n    x_min, x_max = -100.0, 100.0\n    N = 2048\n    dt = 0.05\n    t_end = 160.0\n    num_steps = int(t_end / dt)\n    x_cap = 20.0\n    eta = 0.02\n    x0 = -60.0\n    sigma = 1.5\n    \n    # 2. Setup spatial and momentum grids\n    x = np.linspace(x_min, x_max, N, endpoint=False)\n    dx = x[1] - x[0]\n    \n    k_freq = fftfreq(N, d=dx)\n    k = 2 * np.pi * k_freq\n    \n    # 3. Initial wave packet\n    psi0_unnorm = (1 / (2 * np.pi * sigma**2))**(1/4) * \\\n                  np.exp(-(x - x0)**2 / (4 * sigma**2)) * \\\n                  np.exp(1j * k0 * x)\n    \n    # Numerical normalization on the discrete grid\n    norm_const = np.sqrt(np.sum(np.abs(psi0_unnorm)**2) * dx)\n    psi = psi0_unnorm / norm_const\n    \n    # 4. Define the potential\n    # Real part: Rectangular barrier\n    x_B = 0.0\n    V_real = np.zeros_like(x)\n    V_real[np.abs(x - x_B) = a / 2] = V0\n    \n    # Imaginary part: Complex Absorbing Potential (CAP)\n    W = np.zeros_like(x)\n    \n    # Right boundary absorber\n    mask_right = x >= (x_max - x_cap)\n    if np.any(mask_right):\n        s_right = (x[mask_right] - (x_max - x_cap)) / x_cap\n        W[mask_right] = eta * s_right**2\n        \n    # Left boundary absorber\n    mask_left = x = (x_min + x_cap)\n    if np.any(mask_left):\n        s_left = ((x_min + x_cap) - x[mask_left]) / x_cap\n        W[mask_left] = eta * s_left**2\n    \n    V_eff = V_real - 1j * W\n    \n    # 5. Define time-evolution operators for split-step method\n    exp_V = np.exp(-0.5j * V_eff * dt)\n    exp_T = np.exp(-0.5j * k**2 * dt)\n    \n    # 6. Setup probe for transmission calculation\n    x_probe = a / 2 + 10.0\n    probe_idx = np.argmin(np.abs(x - x_probe))\n    \n    total_transmission = 0.0\n    \n    # 7. Time-evolution loop\n    for _ in range(num_steps):\n        # Strang splitting propagation step\n        psi = exp_V * psi\n        psi_k = fft(psi)\n        psi_k = exp_T * psi_k\n        psi = ifft(psi_k)\n        psi = exp_V * psi\n        \n        # Calculate probability current density at the probe location\n        # Using a centered finite difference for the derivative\n        dpsi_dx_probe = (psi[probe_idx + 1] - psi[probe_idx - 1]) / (2 * dx)\n        current_density_probe = np.imag(np.conj(psi[probe_idx]) * dpsi_dx_probe)\n        \n        # Integrate the positive-directed flux over time\n        total_transmission += max(0, current_density_probe) * dt\n        \n    return total_transmission\n\ndef solve():\n    \"\"\"\n    Main solver function that orchestrates the simulation for all test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (1.5, 2.0, 4.0),  # Case 1\n        (0.8, 2.5, 6.0),  # Case 2\n        (2.5, 1.0, 4.0),  # Case 3\n    ]\n\n    results = []\n    for case in test_cases:\n        k0, V0, a = case\n        transmission = run_simulation(k0=k0, V0=V0, a=a)\n        results.append(f\"{transmission:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2460912"}, {"introduction": "Building on the simulation of wave packet dynamics, this exercise introduces an alternative and powerful method for determining the transmission probability. Instead of directly monitoring the probability flux, you will leverage the properties of the complex absorbing potentials (CAPs) used to create open boundaries in the simulation [@problem_id:2440902]. By measuring the fraction of the wave packet's total probability that is absorbed at the far end of the simulation domain, you can deduce the transmission probability, a technique that highlights the creative use of numerical tools to extract physical observables based on the principle of probability conservation.", "problem": "Consider the one-dimensional time-dependent Schrödinger equation in Hartree atomic units (where the reduced Planck constant is set to $1$, the electron mass is set to $1$, elementary charge is set to $1$, and the Bohr radius is the unit of length):\n$$\ni\\,\\partial_t \\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\,\\partial_{xx} \\;+\\; V(x)\\right] \\psi(x,t).\n$$\nA Gaussian wave packet initially localized at position $x_0$ with mean wavenumber $k_0$ is launched towards a rectangular potential barrier centered at $x=0$. The initial state is\n$$\n\\psi(x,0) \\;=\\; \\frac{1}{(\\pi \\sigma^2)^{1/4}} \\exp\\!\\left(-\\frac{(x-x_0)^2}{2\\sigma^2}\\right)\\, \\exp(i\\,k_0 x),\n$$\nwhich is normalized to unity in the continuum limit. The rectangular barrier is\n$$\nV(x) \\;=\\; \\begin{cases}\nV_0,  |x|  a/2,\\\\\n0,  \\text{otherwise}.\n\\end{cases}\n$$\nTo prevent unphysical reflections from the computational boundaries in a periodic Fourier discretization, add a complex absorbing potential (CAP) $-i\\,W(x)$, where $W(x)\\ge 0$ is a smooth function that is nonzero only in boundary layers near the left and right domain edges. The governing equation then becomes\n$$\ni\\,\\partial_t \\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\,\\partial_{xx} \\;+\\; V(x) \\;-\\; i\\,W(x)\\right] \\psi(x,t).\n$$\n\nYour task is to derive and implement a split-step Fourier (Strang splitting) scheme for this problem, then use it to estimate the quantum transmission probability of the wave packet through the barrier. The estimation must be based on conservation of probability in the presence of the CAP. Specifically, when the Hamiltonian includes $-i\\,W(x)$, the probability density $\\rho=\\lvert\\psi\\rvert^2$ obeys\n$$\n\\frac{d}{dt} \\int \\rho(x,t)\\,dx \\;=\\; -2 \\int W(x)\\,\\rho(x,t)\\,dx,\n$$\nso that the total absorbed probability up to time $T$ is\n$$\n\\mathcal{A}(T) \\;=\\; 2\\int_0^T \\!\\! dt \\int W(x)\\,\\lvert \\psi(x,t)\\rvert^2\\,dx.\n$$\nLet $W(x)$ be decomposed into left and right components, $W(x)=W_\\text{L}(x)+W_\\text{R}(x)$, supported only near the left and right domain boundaries, respectively. Define the right-absorbed probability\n$$\n\\mathcal{A}_\\text{R}(T) \\;=\\; 2\\int_0^T \\!\\! dt \\int W_\\text{R}(x)\\,\\lvert \\psi(x,t)\\rvert^2\\,dx,\n$$\nand the left-absorbed probability $\\mathcal{A}_\\text{L}(T)$ analogously by replacing $W_\\text{R}$ with $W_\\text{L}$. For sufficiently large final time $T$ and sufficiently effective absorption, the transmission probability can be estimated as\n$$\n\\mathcal{T} \\;\\approx\\; \\frac{\\mathcal{A}_\\text{R}(T)}{\\mathcal{A}_\\text{L}(T)+\\mathcal{A}_\\text{R}(T)}.\n$$\n\nDerive the second-order accurate Strang splitting scheme for one time step $\\Delta t$ by splitting the evolution operator generated by the kinetic energy operator $T = -\\frac{1}{2}\\partial_{xx}$ (applied in Fourier space) and the complex potential $U(x)=V(x)-iW(x)$ (applied in real space). Use the discrete Fourier transform to represent derivatives spectrally: if $\\widehat{\\psi}(k,t)$ is the Fourier transform of $\\psi(x,t)$ on the periodic domain, then $\\partial_{xx}\\psi$ corresponds to multiplication by $-k^2$ in $k$-space. Explain why this leads to an efficient algorithm for each time step.\n\nImplement the following numerical setup in Hartree atomic units:\n- Spatial domain of length $L = 60$ (Bohr radii), periodic, discretized with $N = 1024$ equidistant points, so that $\\Delta x = L/N$.\n- Time step $\\Delta t = 0.02$ (atomic time units) and total simulated time $T_\\text{final} = 60$ (atomic time units).\n- Complex absorbing potential defined by a quadratic ramp of width $w_\\text{cap} = 8$ at both ends of the domain with strength parameter $\\eta = 1.0$:\n  - For the right layer, $W_\\text{R}(x) = \\eta\\, s^2$ where $s = \\max\\{0, (x - (L/2 - w_\\text{cap}))/w_\\text{cap}\\}$.\n  - For the left layer, $W_\\text{L}(x) = \\eta\\, s^2$ where $s = \\max\\{0, ((-L/2 + w_\\text{cap}) - x)/w_\\text{cap}\\}$.\n- Barrier centered at $x=0$ as defined above.\n- Initial packet parameters: $x_0 = -15$, $\\sigma = 1.5$.\n\nUse the mid-step state in your time integrator to approximate the absorbed probabilities per time step via\n$$\n\\Delta \\mathcal{A}_\\text{R} \\approx 2\\,\\Delta t \\int W_\\text{R}(x)\\,\\lvert \\psi(x,t+\\Delta t/2)\\rvert^2\\,dx,\\quad\n\\Delta \\mathcal{A}_\\text{L} \\approx 2\\,\\Delta t \\int W_\\text{L}(x)\\,\\lvert \\psi(x,t+\\Delta t/2)\\rvert^2\\,dx,\n$$\nand accumulate these over all steps to obtain $\\mathcal{A}_\\text{R}(T_\\text{final})$ and $\\mathcal{A}_\\text{L}(T_\\text{final})$.\n\nTest suite. Run your program for the following list of test cases, each specified by $(V_0, a, k_0)$, where $V_0$ is in Hartree, $a$ is in Bohr radii, and $k_0$ is in inverse Bohr radii:\n- Case $1$: $(V_0, a, k_0) = (1.0, 5.0, 1.0)$.\n- Case $2$: $(V_0, a, k_0) = (0.5, 5.0, 1.0)$.\n- Case $3$: $(V_0, a, k_0) = (0.0, 0.0, 1.0)$.\n- Case $4$: $(V_0, a, k_0) = (0.2, 10.0, 1.5)$.\n\nRequired final output. Your program must produce a single line containing the transmission probabilities for the four cases as a comma-separated list enclosed in square brackets, with each value rounded to four decimal places and expressed as a dimensionless decimal number. For example, the output format must be exactly of the form\n\"[0.1234,0.5678,0.9012,0.3456]\".\nNo other text should be printed. Angles, if any, must be interpreted in radians. There are no additional units required for the output, since probabilities are dimensionless.", "solution": "The provided problem statement is a well-posed and scientifically sound task in computational quantum mechanics. It requests the simulation of a wave packet scattering from a potential barrier using the time-dependent Schrödinger equation. All parameters and methods are clearly defined, and the physical model is standard. Therefore, the problem is valid, and I will proceed with its solution.\n\nThe governing equation is the one-dimensional time-dependent Schrödinger equation with a complex potential, given in Hartree atomic units as:\n$$\ni\\,\\partial_t \\psi(x,t) \\;=\\; \\hat{H}\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\,\\partial_{xx} \\;+\\; V(x) \\;-\\; i\\,W(x)\\right] \\psi(x,t)\n$$\nHere, the Hamiltonian $\\hat{H}$ is split into the kinetic energy operator $\\hat{T} = -\\frac{1}{2}\\partial_{xx}$ and a complex potential operator $\\hat{U}(x) = V(x) - iW(x)$, where $\\hat{U}$ is a simple multiplication operator in the position basis. The complex absorbing potential (CAP) $-iW(x)$ is included to absorb the wavefunction at the boundaries of the computational domain, preventing unphysical reflections in the periodic setting.\n\nThe formal solution to this equation for evolution over a time step $\\Delta t$ is $\\psi(t+\\Delta t) = e^{-i\\hat{H}\\Delta t}\\psi(t)$. Since the kinetic and potential operators do not commute, i.e., $[\\hat{T}, \\hat{U}] \\neq 0$, the exponential must be approximated. We employ the second-order Strang splitting scheme (also known as a symmetric Trotter-Suzuki decomposition), which is given by:\n$$\ne^{-i(\\hat{T}+\\hat{U})\\Delta t} \\;=\\; e^{-i\\hat{U}\\frac{\\Delta t}{2}} e^{-i\\hat{T}\\Delta t} e^{-i\\hat{U}\\frac{\\Delta t}{2}} \\;+\\; \\mathcal{O}(\\Delta t^3)\n$$\nThis decomposition provides a recipe for evolving the wavefunction $\\psi(x,t)$ from time $t$ to $t+\\Delta t$ with an error of order $\\mathcal{O}(\\Delta t^3)$ per step, leading to a global error of $\\mathcal{O}(\\Delta t^2)$. The evolution for a single time step is performed as a sequence of three simpler operations:\n\n1.  **Potential half-step:** Evolve under the potential $\\hat{U}$ for a duration of $\\Delta t/2$. Since $\\hat{U}$ is a multiplicative operator in position space, this step is implemented as a pointwise multiplication:\n    $$\n    \\psi'(x,t) \\;=\\; e^{-i\\hat{U}(x)\\frac{\\Delta t}{2}} \\psi(x,t)\n    $$\n\n2.  **Kinetic full-step:** Evolve under the kinetic operator $\\hat{T}$ for a duration of $\\Delta t$. The operator $\\hat{T} = -\\frac{1}{2}\\partial_{xx}$ is a differential operator in position space, which makes its direct application complicated. However, in Fourier (wavenumber) space, the operator $\\partial_{xx}$ corresponds to multiplication by $(ik)^2 = -k^2$. Thus, the kinetic evolution operator corresponds to multiplication by $e^{-i(k^2/2)\\Delta t}$. This step is efficiently implemented using the Fast Fourier Transform (FFT) algorithm:\n    a. Transform the wavefunction to Fourier space: $\\hat{\\psi}'(k,t) = \\mathcal{F}\\{\\psi'(x,t)\\}$.\n    b. Apply the kinetic evolution operator: $\\hat{\\psi}''(k,t) = e^{-i\\frac{k^2}{2}\\Delta t} \\hat{\\psi}'(k,t)$.\n    c. Transform back to position space: $\\psi''(x,t) = \\mathcal{F}^{-1}\\{\\hat{\\psi}''(k,t)\\}$.\n    The efficiency of this split-step Fourier method derives from the FFT, which reduces the computational complexity of this step from $\\mathcal{O}(N^2)$ to $\\mathcal{O}(N \\log N)$ for a grid of size $N$.\n\n3.  **Potential half-step:** Evolve again under the potential $\\hat{U}$ for $\\Delta t/2$:\n    $$\n    \\psi(x,t+\\Delta t) \\;=\\; e^{-i\\hat{U}(x)\\frac{\\Delta t}{2}} \\psi''(x,t)\n    $$\n\nThis three-step procedure constitutes the algorithm for one time step. To simulate up to a final time $T_\\text{final}$, this procedure is iterated $N_t = T_\\text{final}/\\Delta t$ times.\n\nThe transmission probability $\\mathcal{T}$ is estimated by calculating the total probability absorbed by the right CAP, $\\mathcal{A}_\\text{R}(T)$, and the left CAP, $\\mathcal{A}_\\text{L}(T)$. The total absorbed probability in the right CAP up to time $T$ is given by the integral:\n$$\n\\mathcal{A}_\\text{R}(T) \\;=\\; 2\\int_0^T \\!\\! dt \\int W_\\text{R}(x)\\,\\lvert \\psi(x,t)\\rvert^2\\,dx\n$$\nWe approximate this integral numerically. The time integral is approximated using a midpoint rule, which is consistent with the second-order accuracy of the Strang splitting. For each time step from $t$ to $t+\\Delta t$, we use the 'mid-step' wavefunction, which we identify as the state $\\psi''(x,t)$ after the full kinetic step. The change in absorbed probability during one time step is thus:\n$$\n\\Delta \\mathcal{A}_\\text{R} \\approx 2\\,\\Delta t \\int W_\\text{R}(x)\\,\\lvert \\psi''(x,t)\\rvert^2\\,dx\n$$\nThe spatial integral is approximated by a sum over the discrete grid points $x_j$ with spacing $\\Delta x = L/N$:\n$$\n\\int W_\\text{R}(x)\\,\\lvert \\psi''(x,t)\\rvert^2\\,dx \\;\\approx\\; \\Delta x \\sum_{j=0}^{N-1} W_\\text{R}(x_j)\\,\\lvert \\psi''(x_j,t)\\rvert^2\n$$\nThe total absorbed probabilities $\\mathcal{A}_\\text{R}(T_\\text{final})$ and $\\mathcal{A}_\\text{L}(T_\\text{final})$ are found by summing these contributions, $\\Delta \\mathcal{A}_\\text{R}$ and $\\Delta \\mathcal{A}_\\text{L}$, over all time steps. Finally, the transmission probability is calculated as the ratio:\n$$\n\\mathcal{T} \\;\\approx\\; \\frac{\\mathcal{A}_\\text{R}(T_\\text{final})}{\\mathcal{A}_\\text{L}(T_\\text{final})+\\mathcal{A}_\\text{R}(T_\\text{final})}\n$$\nThis ratio measures the fraction of the scattered wave packet that propagates to the right.\n\nThe implementation will proceed by first setting up the spatial grid and corresponding wavenumber grid. Then, for each test case, the initial state and potential functions ($V(x)$, $W_L(x)$, $W_R(x)$) are defined. The exponential operators for the potential and kinetic steps are pre-calculated. The simulation then loops through time, applying the split-step algorithm and accumulating the absorbed probabilities at each step. Finally, the transmission probability is computed and stored.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D time-dependent Schrödinger equation for wave packet scattering\n    using a split-step Fourier method and calculates the transmission probability.\n    \"\"\"\n\n    # --- Numerical and Physical Parameters ---\n    # Spatial domain\n    L = 60.0  # Length of the domain (Bohr radii)\n    N = 1024  # Number of grid points\n    \n    # Time domain\n    dt = 0.02  # Time step (atomic time units)\n    T_final = 60.0  # Total simulation time (atomic time units)\n    \n    # Complex Absorbing Potential (CAP) parameters\n    w_cap = 8.0  # Width of the CAP layers (Bohr radii)\n    eta = 1.0  # Strength of the CAP\n\n    # Initial wave packet parameters\n    x0 = -15.0  # Initial position (Bohr radii)\n    sigma = 1.5  # Initial width (Bohr radii)\n\n    # --- Grid Setup ---\n    x = np.linspace(-L / 2, L / 2, N, endpoint=False)\n    dx = L / N\n    k = 2 * np.pi * np.fft.fftfreq(N, d=dx)\n\n    # --- Define Test Cases ---\n    test_cases = [\n        # (V0, a, k0)\n        (1.0, 5.0, 1.0),\n        (0.5, 5.0, 1.0),\n        (0.0, 0.0, 1.0),\n        (0.2, 10.0, 1.5),\n    ]\n\n    results = []\n\n    for case in test_cases:\n        V0, a, k0 = case\n\n        # --- Define Potentials and Initial State ---\n        # Rectangular potential barrier V(x)\n        V = np.zeros(N)\n        V[np.abs(x)  a / 2] = V0\n\n        # Complex absorbing potential W(x) = W_L(x) + W_R(x)\n        W_L = np.zeros(N)\n        W_R = np.zeros(N)\n\n        x_L_end = -L / 2 + w_cap\n        x_R_start = L / 2 - w_cap\n\n        s_L = np.maximum(0, (x_L_end - x) / w_cap)\n        W_L = eta * s_L**2\n\n        s_R = np.maximum(0, (x - x_R_start) / w_cap)\n        W_R = eta * s_R**2\n\n        W = W_L + W_R\n        \n        # Total complex potential U(x)\n        U = V - 1j * W\n\n        # Initial wave packet psi(x, 0)\n        norm_factor = (np.pi * sigma**2)**(-0.25)\n        psi = norm_factor * np.exp(-(x - x0)**2 / (2 * sigma**2)) * np.exp(1j * k0 * x)\n        \n        # --- Pre-calculate Evolution Operators ---\n        exp_U_half = np.exp(-1j * U * dt / 2)\n        exp_T_full = np.exp(-1j * (k**2 / 2) * dt)\n\n        # --- Time Evolution Loop ---\n        num_steps = int(T_final / dt)\n        A_L, A_R = 0.0, 0.0\n\n        for _ in range(num_steps):\n            # First half potential step\n            psi = exp_U_half * psi\n\n            # Full kinetic step in Fourier space\n            psi_k = np.fft.fft(psi)\n            psi_k_evolved = exp_T_full * psi_k\n            psi_mid = np.fft.ifft(psi_k_evolved)\n\n            # Accumulate absorbed probability from the mid-step state\n            rho_mid = np.abs(psi_mid)**2\n            \n            A_R_step = 2 * dt * np.sum(W_R * rho_mid) * dx\n            A_L_step = 2 * dt * np.sum(W_L * rho_mid) * dx\n            A_R += A_R_step\n            A_L += A_L_step\n\n            # Second half potential step\n            psi = exp_U_half * psi_mid\n\n        # --- Calculate Transmission Probability ---\n        total_absorbed = A_L + A_R\n        if total_absorbed > 1e-12: # Avoid division by zero\n            T_prob = A_R / total_absorbed\n        else:\n            T_prob = 0.0\n\n        results.append(f\"{T_prob:.4f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2440902"}, {"introduction": "After exploring the probability of tunneling, we now turn to the intriguing question of how much time a particle spends interacting with the barrier. This practice guides you through the calculation of the \"dwell time,\" defined as the total time-integrated probability of finding the particle within the barrier region [@problem_id:2432546]. This exercise moves beyond simple transmission coefficients to probe the temporal dynamics of the tunneling process, introducing a key concept in the study of quantum traversal times and connecting abstract simulation units to tangible physical scales using SI units.", "problem": "Consider the one-dimensional time-dependent Schrödinger equation (TDSE) for a non-relativistic particle of mass $m$ and wave function $\\psi(x,t)$ in a potential $V(x)$,\n$$\n\\mathrm{i}\\hbar\\,\\frac{\\partial \\psi}{\\partial t} \\;=\\; \\left(-\\frac{\\hbar^2}{2m}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right)\\psi(x,t),\n$$\nwith the standard probability density $\\rho(x,t)=|\\psi(x,t)|^2$ and probability current density $J(x,t)$ related by the continuity equation\n$$\n\\frac{\\partial \\rho}{\\partial t} + \\frac{\\partial J}{\\partial x} = 0.\n$$\nA widely used quantitative measure of traversal through a spatial region is the dwell time, defined for a wave packet as the time integral of the probability contained in that region. For a rectangular barrier region $[x_a,x_b]$, the dwell time is\n$$\n\\tau_D \\;=\\; \\int_{0}^{T} \\left(\\int_{x_a}^{x_b} |\\psi(x,t)|^2\\,dx\\right) dt,\n$$\nwhere $T$ is a sufficiently large final time such that the interaction of the packet with the barrier is complete within the numerical domain.\n\nTask. Starting from the TDSE and the continuity equation as the only fundamental inputs, derive a computational approach to evaluate the dwell time $\\tau_D$ for a Gaussian wave packet incident on a rectangular potential barrier. Use a unitary time propagation scheme consistent with the TDSE and implement open boundaries numerically so that spurious reflections from the simulation edges do not contaminate the dynamics. You are to implement the algorithm as a complete, runnable computer program that:\n- Sets up a spatial grid, initializes a normalized Gaussian wave packet with a prescribed mean kinetic energy, and propagates it in time through a rectangular barrier.\n- Numerically evaluates the dwell time as the Riemann sum\n$$\n\\tau_D \\approx \\sum_{n=0}^{N_t-1} \\left(\\sum_{i \\in \\mathcal{B}} |\\psi(x_i, t_n)|^2\\,\\Delta x\\right)\\Delta t,\n$$\nwhere $\\mathcal{B}$ is the set of grid indices with $x_i \\in [x_a,x_b]$, $\\Delta x$ is the grid spacing, $\\Delta t$ is the time step, and $N_t$ is the number of time steps up to total time $T=N_t\\Delta t$.\n\nPhysical and numerical setup. Use the following physically meaningful and self-consistent parameters and units. All outputs must be expressed in seconds. Angles, if any, should be treated in radians.\n- Particle mass $m = 9.1093837015\\times 10^{-31}\\ \\mathrm{kg}$ (electron mass), reduced Planck constant $\\hbar = 1.054571817\\times 10^{-34}\\ \\mathrm{J\\,s}$, and electronvolt $1\\ \\mathrm{eV} = 1.602176634\\times 10^{-19}\\ \\mathrm{J}$. Spatial unit: $1\\ \\mathrm{nm}=10^{-9}\\ \\mathrm{m}$.\n- Spatial domain length $L_x = 400.0\\ \\mathrm{nm}$ discretized with $N_x = 2048$ equidistant points; grid spacing $\\Delta x = L_x/N_x$. Use periodic spatial transforms internally but suppress edge reflections via a smoothly ramped complex absorbing potential confined to the outermost $40.0\\ \\mathrm{nm}$ at each boundary.\n- Time step $\\Delta t = 2.0\\times 10^{-16}\\ \\mathrm{s}$ and number of steps $N_t=6000$ (so $T=N_t\\Delta t$).\n- Initial Gaussian wave packet centered at $x_0=80.0\\ \\mathrm{nm}$, envelope width $\\sigma_x=10.0\\ \\mathrm{nm}$, and mean kinetic energy $E_0=0.5\\ \\mathrm{eV}$. The initial phase is chosen so that the packet propagates in the $+x$ direction with mean wave number $k_0=\\sqrt{2mE_0}/\\hbar$.\n- Rectangular barrier centered at $x_c=200.0\\ \\mathrm{nm}$ with height $V_0$ and width $w$, so that $V(x)=V_0$ for $x\\in[x_c-w/2,\\, x_c+w/2]$ and $V(x)=0$ elsewhere. The dwell time region $[x_a,x_b]$ is exactly the barrier interval.\n\nPropagation method constraint. Implement a second-order accurate unitary time-stepper in the form of a symmetric Trotter product of kinetic and potential evolution operators. In practice this can be realized by the split-operator method in momentum space using the Fast Fourier Transform (FFT; Fast Fourier Transform).\n\nTest suite. Your program must compute and return the dwell time $\\tau_D$ in seconds for each of the following four cases, which together probe the free traversal, sub-barrier slow-down, tunneling, and barrier-width dependence:\n- Case A (free region reference): $V_0=0.0\\ \\mathrm{eV}$, $w=40.0\\ \\mathrm{nm}$.\n- Case B (above-barrier propagation): $V_0=0.2\\ \\mathrm{eV}$, $w=40.0\\ \\mathrm{nm}$.\n- Case C (tunneling): $V_0=0.8\\ \\mathrm{eV}$, $w=40.0\\ \\mathrm{nm}$.\n- Case D (tunneling with increased width): $V_0=0.8\\ \\mathrm{eV}$, $w=80.0\\ \\mathrm{nm}$.\n\nFinal output specification. Your program should produce a single line of output containing the four dwell times as a comma-separated list in scientific notation with exactly six significant digits, enclosed in square brackets, for example\n\"[1.234560e-12,2.345670e-12,3.456780e-12,4.567890e-12]\".\nAll four numbers must be in seconds and in the order A, B, C, D as defined above. No other text should be printed.", "solution": "We begin from the one-dimensional time-dependent Schrödinger equation (TDSE) for a particle of mass $m$,\n$$\n\\mathrm{i}\\hbar\\,\\frac{\\partial \\psi(x,t)}{\\partial t} \\;=\\; \\left(-\\frac{\\hbar^2}{2m}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right)\\psi(x,t).\n$$\nThe TDSE implies the probability density $\\rho(x,t)=|\\psi(x,t)|^2$ obeys the continuity equation\n$$\n\\frac{\\partial \\rho}{\\partial t} + \\frac{\\partial J}{\\partial x} = 0,\n$$\nwith current density $J(x,t) = \\frac{\\hbar}{m}\\,\\mathrm{Im}\\left(\\psi^*(x,t)\\,\\partial_x \\psi(x,t)\\right)$. Integrating the continuity equation over a fixed spatial interval $[x_a,x_b]$ yields\n$$\n\\frac{d}{dt}\\int_{x_a}^{x_b}\\rho(x,t)\\,dx = J(x_a,t)-J(x_b,t).\n$$\nIntegrating this from $t=0$ to $t=T$ gives\n$$\n\\int_{0}^{T}\\left(J(x_a,t)-J(x_b,t)\\right)dt = \\int_{x_a}^{x_b}\\rho(x,0)\\,dx - \\int_{x_a}^{x_b}\\rho(x,T)\\,dx.\n$$\nIf $T$ is sufficiently large for the wave packet to have interacted with the barrier and left the region $[x_a,x_b]$ while remaining well-contained inside the numerical domain, then $\\int_{x_a}^{x_b}\\rho(x,T)\\,dx\\approx 0$ and the flux integral equals the initial probability within the region (which is also typically negligible if the packet starts outside). Independently of this flux balance, a direct and operational definition of dwell time for a wave packet is\n$$\n\\tau_D \\;=\\; \\int_0^T \\left(\\int_{x_a}^{x_b} |\\psi(x,t)|^2\\,dx\\right) dt,\n$$\nwhich is the time-integrated probability inside the region. This quantity has dimensions of time and is finite for finite $T$ with negligible late-time tails.\n\nTo compute $\\tau_D$ we need to propagate $\\psi(x,t)$ accurately and efficiently. The Hamiltonian separates into kinetic and potential parts, $\\hat{H}=\\hat{T}+\\hat{V}$ with $\\hat{T}=-\\frac{\\hbar^2}{2m}\\partial_x^2$ and $\\hat{V}=V(x)$. The formal time-evolution operator over a small step $\\Delta t$ is $\\hat{U}(\\Delta t)=\\exp\\left(-\\frac{\\mathrm{i}}{\\hbar}\\hat{H}\\Delta t\\right)$. A second-order accurate and unitary approximation is provided by the symmetric Trotter factorization,\n$$\n\\hat{U}(\\Delta t) \\;\\approx\\; e^{-\\frac{\\mathrm{i}}{\\hbar}\\hat{V}\\frac{\\Delta t}{2}}\\;e^{-\\frac{\\mathrm{i}}{\\hbar}\\hat{T}\\Delta t}\\;e^{-\\frac{\\mathrm{i}}{\\hbar}\\hat{V}\\frac{\\Delta t}{2}} \\;+\\; \\mathcal{O}(\\Delta t^3).\n$$\nIn the position representation, $e^{-\\frac{\\mathrm{i}}{\\hbar}\\hat{V}\\frac{\\Delta t}{2}}$ is diagonal, multiplying $\\psi(x)$ by $e^{-\\frac{\\mathrm{i}}{\\hbar}V(x)\\frac{\\Delta t}{2}}$. In the momentum representation, $e^{-\\frac{\\mathrm{i}}{\\hbar}\\hat{T}\\Delta t}$ is diagonal, multiplying $\\tilde{\\psi}(k)$ by $e^{-\\frac{\\mathrm{i}}{\\hbar}\\frac{\\hbar^2 k^2}{2m}\\Delta t}=e^{-\\mathrm{i}\\frac{\\hbar k^2}{2m}\\Delta t}$. Thus, the split-operator method proceeds by:\n- Multiplication by the half-step potential phase in position space.\n- Fast Fourier Transform (FFT; Fast Fourier Transform) to momentum space.\n- Multiplication by the kinetic phase in momentum space.\n- Inverse FFT back to position space.\n- Multiplication by the half-step potential phase again.\n\nBoundary reflections must be suppressed to emulate an open system and to prevent artificial re-entry into the barrier region. A standard approach is to add a purely imaginary absorbing potential $W(x)$ localized near the domain edges, yielding an effective potential $V_{\\text{eff}}(x)=V(x)+W(x)$ with $W(x)\\le 0$ imaginary and smoothly ramped from $0$ in the interior to a negative imaginary value at the boundaries. This damps outgoing components without significantly perturbing the interior dynamics.\n\nDiscretization. We discretize the spatial domain $[0,L_x]$ by $N_x$ points with spacing $\\Delta x=L_x/N_x$ and use the discrete FFT to implement spectral derivatives. The momentum grid is defined by $k_j = \\frac{2\\pi}{L_x}\\times$integer frequencies consistent with the FFT ordering. The time integral for $\\tau_D$ is approximated by a Riemann sum\n$$\n\\tau_D \\approx \\sum_{n=0}^{N_t-1}\\left(\\sum_{i\\,:\\,x_i\\in[x_a,x_b]} |\\psi(x_i,t_n)|^2\\,\\Delta x\\right)\\Delta t.\n$$\nThis is consistent with the fundamental definition and converges as $\\Delta x,\\Delta t\\to 0$.\n\nInitialization. The initial Gaussian wave packet is\n$$\n\\psi(x,0) = \\left(\\frac{1}{2\\pi\\sigma_x^2}\\right)^{1/4}\\exp\\left(-\\frac{(x-x_0)^2}{4\\sigma_x^2} + \\mathrm{i}k_0(x-x_0)\\right),\n$$\nwith $k_0=\\sqrt{2mE_0}/\\hbar$. It is normalized numerically to ensure $\\int |\\psi(x,0)|^2 dx=1$ on the discrete grid.\n\nAlgorithm summary for each test case $(V_0,w)$:\n1. Build the rectangular barrier $V(x)=V_0$ on $[x_c-w/2,x_c+w/2]$, zero elsewhere.\n2. Build the complex absorber $W(x)$ on $[0,x_L]$ and $[L_x-x_L,L_x]$ with a smooth polynomial ramp of width $x_L$ and specified strength, then set $V_{\\text{eff}}(x)=V(x)+W(x)$.\n3. Precompute the kinetic phase factor $e^{-\\mathrm{i}\\frac{\\hbar k^2}{2m}\\Delta t}$ and the position-space half-step potential factor $e^{-\\frac{\\mathrm{i}}{\\hbar}V_{\\text{eff}}(x)\\frac{\\Delta t}{2}}$.\n4. Initialize $\\psi(x,0)$ and normalize.\n5. For $n=0,\\dots,N_t-1$:\n   - Apply the split-operator step to advance $\\psi$ by $\\Delta t$.\n   - Accumulate the barrier-region probability $P_{\\mathcal{B}}(t_n)=\\sum_{x_i\\in[x_a,x_b]}|\\psi(x_i,t_n)|^2\\Delta x$ into $\\tau_D$ via $\\tau_D\\mathrel{+}=P_{\\mathcal{B}}(t_n)\\Delta t$.\n6. Return $\\tau_D$.\n\nParameter choices. With $L_x=400.0\\,\\mathrm{nm}$, $N_x=2048$, $\\Delta t=2.0\\times 10^{-16}\\,\\mathrm{s}$, $N_t=6000$, $x_0=80.0\\,\\mathrm{nm}$, $\\sigma_x=10.0\\,\\mathrm{nm}$, $E_0=0.5\\,\\mathrm{eV}$, and barrier center $x_c=200.0\\,\\mathrm{nm}$, the packet reaches and clears the barrier well before $T=N_t\\Delta t$, while the absorbers at the edges ($40.0\\,\\mathrm{nm}$ width each) prevent wrap-around due to the periodicity inherent in the FFT. The absorber strength is chosen so that $\\exp\\left(-\\mathrm{Im}[W]\\Delta t/\\hbar\\right)$ provides strong damping near the edges while being negligible in the interior.\n\nQualitative expectations for the test suite:\n- Case A ($V_0=0.0\\,\\mathrm{eV}$, $w=40.0\\,\\mathrm{nm}$): $\\tau_D$ approximates the free traversal time of the packet probability through a window of width $w$, roughly $w/v_g$ with group velocity $v_g=\\hbar k_0/m$ up to wave-packet spreading effects.\n- Case B ($V_0=0.2\\,\\mathrm{eV}E_0$): The packet slows within the barrier region, increasing $\\tau_D$ compared to Case A.\n- Case C ($V_0=0.8\\,\\mathrm{eV}E_0$): Tunneling leads to an evanescent wave inside the barrier, with small probability density; $\\tau_D$ reflects the net time-integrated presence under the barrier and may be comparable to or smaller than the free case depending on dynamics.\n- Case D ($V_0=0.8\\,\\mathrm{eV}$, $w=80.0\\,\\mathrm{nm}$): Increasing width typically modifies $\\tau_D$ relative to Case C, probing the width dependence of under-barrier dynamics.\n\nThe program implements the above algorithm and outputs the four dwell times in seconds with exactly six significant digits in scientific notation, formatted as a single list on one line in the order A, B, C, D.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef gaussian_wavepacket(x, x0, sigma, k0):\n    \"\"\"Unnormalized Gaussian wave packet centered at x0 with spatial width sigma and mean wave number k0.\"\"\"\n    return np.exp(-((x - x0) ** 2) / (4.0 * sigma ** 2) + 1j * k0 * (x - x0)) / ((2.0 * np.pi * sigma ** 2) ** 0.25)\n\ndef complex_absorbing_potential(x, Lx, width, strength_J, power=2):\n    \"\"\"\n    Construct a smooth complex absorbing potential W(x) that is purely imaginary and negative, localized within\n    [0, width] and [Lx - width, Lx]. The profile ramps as (s/width)^power where s is distance into the absorber.\n    strength_J sets the maximum |Im(W)| at the boundary in Joules.\n    \"\"\"\n    W = np.zeros_like(x, dtype=np.complex128)\n    # Left absorber\n    mask_left = x  width\n    s_left = width - x[mask_left]  # distance to left boundary\n    profile_left = (s_left / width) ** power\n    W[mask_left] += -1j * strength_J * profile_left\n    # Right absorber\n    mask_right = x  (Lx - width)\n    s_right = x[mask_right] - (Lx - width)  # distance into right absorber\n    profile_right = (s_right / width) ** power\n    W[mask_right] += -1j * strength_J * profile_right\n    return W\n\ndef simulate_dwell_time(V0_eV, width_nm, constants, numerics):\n    \"\"\"\n    Simulate the dwell time for a Gaussian wave packet encountering a rectangular barrier.\n    V0_eV: barrier height in eV\n    width_nm: barrier width in nm\n    constants: dict with physical constants and conversions\n    numerics: dict with numerical parameters\n    Returns dwell time tau_D in seconds (float).\n    \"\"\"\n    # Unpack constants\n    m = constants[\"m\"]\n    hbar = constants[\"hbar\"]\n    eV_to_J = constants[\"eV_to_J\"]\n    nm_to_m = constants[\"nm_to_m\"]\n\n    # Unpack numerics\n    Lx_nm = numerics[\"Lx_nm\"]\n    Nx = numerics[\"Nx\"]\n    dt = numerics[\"dt\"]\n    Nt = numerics[\"Nt\"]\n    x0_nm = numerics[\"x0_nm\"]\n    sigma_nm = numerics[\"sigma_nm\"]\n    E0_eV = numerics[\"E0_eV\"]\n    xc_nm = numerics[\"xc_nm\"]\n    absorber_width_nm = numerics[\"absorber_width_nm\"]\n    absorber_strength_eV = numerics[\"absorber_strength_eV\"]\n    absorber_power = numerics[\"absorber_power\"]\n\n    # Convert to SI units\n    Lx = Lx_nm * nm_to_m\n    x0 = x0_nm * nm_to_m\n    sigma = sigma_nm * nm_to_m\n    xc = xc_nm * nm_to_m\n    width = width_nm * nm_to_m\n    absorber_width = absorber_width_nm * nm_to_m\n    V0 = V0_eV * eV_to_J\n    E0 = E0_eV * eV_to_J\n    absorber_strength_J = absorber_strength_eV * eV_to_J\n\n    # Spatial grid\n    dx = Lx / Nx\n    x = np.linspace(0.0, Lx - dx, Nx)  # grid points\n\n    # Momentum grid (FFT frequencies)\n    dk = 2.0 * np.pi / Lx\n    k = dk * np.fft.fftfreq(Nx, d=dx / (2.0 * np.pi))  # consistent with np.fft\n\n    # Initial wave number from kinetic energy\n    k0 = np.sqrt(2.0 * m * E0) / hbar\n\n    # Initialize wavefunction and normalize\n    psi = gaussian_wavepacket(x, x0, sigma, k0)\n    norm = np.sqrt(np.sum(np.abs(psi) ** 2) * dx)\n    psi /= norm\n\n    # Build rectangular barrier potential V(x)\n    xa = xc - 0.5 * width\n    xb = xc + 0.5 * width\n    V = np.zeros_like(x)\n    if width > 0:\n        mask_barrier = (x = xa)  (x = xb)\n        V[mask_barrier] = V0\n\n    # Complex absorbing potential at edges\n    W = complex_absorbing_potential(x, Lx, absorber_width, absorber_strength_J, power=absorber_power)\n\n    # Effective potential and split-operator factors\n    Veff = V + W\n    expV_half = np.exp(-1j * Veff * (dt / (2.0 * hbar)))\n    expK = np.exp(-1j * (hbar * k ** 2) * (dt / (2.0 * m)))\n\n    # Barrier-region indices for dwell time\n    in_region = (x = xa)  (x = xb)\n    # If width is zero, dwell time is trivially zero; allow code to handle gracefully (no indices in region)\n    region_dx = dx\n\n    # Time propagation loop with dwell-time accumulation\n    tau_D = 0.0\n    for _ in range(Nt):\n        # Half potential step\n        psi *= expV_half\n        # Kinetic step via FFT\n        psi_k = np.fft.fft(psi)\n        psi_k *= expK\n        psi = np.fft.ifft(psi_k)\n        # Half potential step\n        psi *= expV_half\n        # Accumulate probability in barrier region\n        if np.any(in_region):\n            P_region = np.sum(np.abs(psi[in_region]) ** 2) * region_dx\n        else:\n            P_region = 0.0\n        tau_D += P_region * dt\n\n    # Return dwell time in seconds\n    return float(np.real_if_close(tau_D))\n\ndef solve():\n    # Physical constants\n    constants = {\n        \"m\": 9.1093837015e-31,            # kg (electron mass)\n        \"hbar\": 1.054571817e-34,          # J*s\n        \"eV_to_J\": 1.602176634e-19,       # J per eV\n        \"nm_to_m\": 1e-9,                  # meters per nm\n    }\n\n    # Numerical parameters\n    numerics = {\n        \"Lx_nm\": 400.0,                  # domain length in nm\n        \"Nx\": 2048,                      # number of spatial grid points\n        \"dt\": 2.0e-16,                   # time step in s\n        \"Nt\": 6000,                      # number of time steps\n        \"x0_nm\": 80.0,                   # initial packet center in nm\n        \"sigma_nm\": 10.0,                # spatial width in nm\n        \"E0_eV\": 0.5,                    # mean kinetic energy in eV\n        \"xc_nm\": 200.0,                  # barrier center in nm\n        \"absorber_width_nm\": 40.0,       # absorber width in nm (each side)\n        \"absorber_strength_eV\": 0.2,     # maximum imaginary strength at boundary (eV)\n        \"absorber_power\": 2,             # polynomial power of absorber ramp\n    }\n\n    # Define the test cases (V0 in eV, width in nm)\n    test_cases = [\n        (0.0, 40.0),   # Case A: free region (V0=0), width=40 nm\n        (0.2, 40.0),   # Case B: above-barrier propagation\n        (0.8, 40.0),   # Case C: tunneling\n        (0.8, 80.0),   # Case D: tunneling with increased width\n    ]\n\n    # Precompute k-dependent quantities that are independent of the barrier would require expK,\n    # but expK depends only on numerics and constants; it is created inside simulate_dwell_time.\n    # We run simulations sequentially.\n    results = []\n    for V0_eV, w_nm in test_cases:\n        tau = simulate_dwell_time(V0_eV, w_nm, constants, numerics)\n        results.append(tau)\n\n    # Format results: scientific notation with exactly six significant digits\n    formatted = \"[\" + \",\".join(f\"{val:.6e}\" for val in results) + \"]\"\n    print(formatted)\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2432546"}]}