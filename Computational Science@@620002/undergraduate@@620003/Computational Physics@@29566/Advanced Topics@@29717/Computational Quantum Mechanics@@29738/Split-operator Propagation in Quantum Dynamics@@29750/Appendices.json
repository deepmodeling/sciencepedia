{"hands_on_practices": [{"introduction": "We begin our hands-on journey with the most fundamental quantum system: a free particle. This exercise demonstrates how the spectral method, a special case of the split-operator technique where the potential is zero, can be used to exactly solve the time-evolution of a wavepacket. By tracking the standard deviations in position, $\\Delta x(t)$, and momentum, $\\Delta p(t)$, you will numerically verify one of the cornerstones of quantum theory—Heisenberg's Uncertainty Principle—and observe the quintessential quantum phenomenon of wavepacket spreading in action [@problem_id:2452266].", "problem": "Consider a one-dimensional, nonrelativistic, spinless quantum particle of mass $m$ confined to a periodic interval of length $L$ in Hartree atomic units (so that $\\hbar=1$ and $m=1$). The dynamics are governed by the time-dependent Schrödinger equation\n$$\ni \\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\hat{H}\\,\\psi(x,t), \\qquad \\hat{H} \\;=\\; \\frac{\\hat{p}^2}{2 m}, \\qquad \\hat{p} \\;=\\; -\\,i\\,\\frac{\\partial}{\\partial x},\n$$\nwith periodic boundary conditions on the interval $x\\in[-L/2,L/2)$. The initial wavefunction is the normalized Gaussian wavepacket\n$$\n\\psi(x,0) \\;=\\; \\left(\\frac{1}{2\\pi\\,\\sigma_x^2}\\right)^{1/4}\\,\\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\,\\sigma_x^2}\\right)\\,\\exp\\!\\left(i\\,p_0\\,(x-x_0)\\right),\n$$\nwith position-space width parameter $\\sigma_x>0$, mean position $x_0$, and mean momentum $p_0$.\n\nFor each time $t$, define the expectation values and variances of position and momentum by\n$$\n\\langle x\\rangle_t \\;=\\; \\int_{-L/2}^{L/2} \\psi^*(x,t)\\,x\\,\\psi(x,t)\\,dx,\\quad\n\\langle x^2\\rangle_t \\;=\\; \\int_{-L/2}^{L/2} \\psi^*(x,t)\\,x^2\\,\\psi(x,t)\\,dx,\n$$\n$$\n\\langle p\\rangle_t \\;=\\; \\int_{-L/2}^{L/2} \\psi^*(x,t)\\,\\Big(-i\\,\\frac{\\partial}{\\partial x}\\Big)\\,\\psi(x,t)\\,dx,\\quad\n\\langle p^2\\rangle_t \\;=\\; \\int_{-L/2}^{L/2} \\psi^*(x,t)\\,\\Big(-\\frac{\\partial^2}{\\partial x^2}\\Big)\\,\\psi(x,t)\\,dx,\n$$\nand the associated standard deviations\n$$\n\\Delta x(t) \\;=\\; \\sqrt{\\langle x^2\\rangle_t - \\langle x\\rangle_t^2},\\qquad\n\\Delta p(t) \\;=\\; \\sqrt{\\langle p^2\\rangle_t - \\langle p\\rangle_t^2}.\n$$\nAll quantities are in atomic units; times must be treated in atomic time units, momenta in atomic momentum units, and lengths in Bohr radii. The Heisenberg uncertainty principle states that, for all $t$,\n$$\n\\Delta x(t)\\,\\Delta p(t) \\;\\ge\\; \\frac{1}{2}.\n$$\n\nTask: Evolve $\\psi(x,t)$ exactly according to the above Schrödinger equation on the periodic domain, using spatial discretization with $N$ grid points on $[-L/2,L/2)$, for the following test suite of parameter sets. For each parameter set, compute the list of values $\\{\\Delta x(t_k)\\,\\Delta p(t_k)\\}$ at the specified times $\\{t_k\\}$, then compute the minimum value $S=\\min_k \\Delta x(t_k)\\,\\Delta p(t_k)$ and compare it to $1/2$ with a numerical tolerance $\\tau=10^{-3}$. For each test case, return the boolean value $S \\ge 1/2 - \\tau$.\n\nUse the following test suite, where all numbers are in atomic units:\n- Case $1$: $L=100.0$, $N=4096$, $\\sigma_x=1.0$, $x_0=0.0$, $p_0=0.0$, times $t\\in\\{0.0,\\,1.0,\\,2.0,\\,5.0,\\,10.0\\}$.\n- Case $2$: $L=100.0$, $N=4096$, $\\sigma_x=0.2$, $x_0=0.0$, $p_0=0.0$, times $t\\in\\{0.0,\\,0.2,\\,0.5,\\,1.0,\\,2.0\\}$.\n- Case $3$: $L=100.0$, $N=4096$, $\\sigma_x=3.0$, $x_0=-10.0$, $p_0=2.0$, times $t\\in\\{0.0,\\,1.0,\\,5.0,\\,10.0,\\,20.0\\}$.\n- Case $4$: $L=100.0$, $N=4096$, $\\sigma_x=0.5$, $x_0=20.0$, $p_0=5.0$, times $t\\in\\{0.0,\\,0.5,\\,1.0,\\,2.0,\\,5.0\\}$.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list of the boolean outcomes for Cases $1$ through $4$, enclosed in square brackets, with no spaces, for example, \"[True,False,True,True]\".", "solution": "The problem statement is parsed and validated.\n\nGivens:\nA one-dimensional, nonrelativistic, spinless quantum particle of mass $m=1$ in Hartree atomic units, where $\\hbar=1$. The particle is confined to a periodic interval of length $L$ defined by $x \\in [-L/2, L/2)$. The governing equation is the time-dependent Schrödinger equation (TDSE):\n$$\ni \\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\hat{H}\\,\\psi(x,t)\n$$\nwith the free-particle Hamiltonian:\n$$\n\\hat{H} \\;=\\; \\frac{\\hat{p}^2}{2 m}, \\qquad \\hat{p} \\;=\\; -\\,i\\,\\frac{\\partial}{\\partial x}\n$$\nThe initial state at $t=0$ is a normalized Gaussian wavepacket:\n$$\n\\psi(x,0) \\;=\\; \\left(\\frac{1}{2\\pi\\,\\sigma_x^2}\\right)^{1/4}\\,\\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\,\\sigma_x^2}\\right)\\,\\exp\\!\\left(i\\,p_0\\,(x-x_0)\\right)\n$$\nThe observables are defined by standard expectation value integrals over the domain $[-L/2, L/2)$. The standard deviations in position and momentum are $\\Delta x(t)$ and $\\Delta p(t)$, respectively. The task is to numerically evolve the system, compute the uncertainty product $\\Delta x(t_k)\\,\\Delta p(t_k)$ at specified times $t_k$, find the minimum value $S = \\min_k \\Delta x(t_k)\\,\\Delta p(t_k)$, and verify if $S \\ge 1/2 - \\tau$ for a tolerance $\\tau=10^{-3}$. Four test cases with specific parameters ($L, N, \\sigma_x, x_0, p_0, \\{t_k\\}$) are provided.\n\nValidation Verdict:\nThe problem is scientifically and mathematically sound. It describes a fundamental problem in quantum dynamics: the time evolution of a free particle. All concepts, equations, and parameters are well-defined and consistent with the principles of quantum mechanics. The request to \"evolve exactly... using spatial discretization\" is understood to mean the use of a spectral method, like the split-operator Fourier method, which is numerically exact for the discretized system in the case of a free particle. The problem is well-posed, objective, and computationally feasible. The initial Gaussian form is defined on an infinite domain, but for the given parameters, it is well-localized within the periodic box, making its use as an initial state on the periodic domain a valid approximation. We will proceed to the solution.\n\nPrinciple-Based Solution Design:\n\nThe solution to the time-dependent Schrödinger equation, $\\psi(x,t) = e^{-i\\hat{H}t}\\psi(x,0)$, can be efficiently computed using a spectral method in the basis of momentum eigenstates. The Hamiltonian $\\hat{H} = \\hat{p}^2/(2m)$ is diagonal in the momentum (Fourier) basis. The momentum operator's eigenfunctions on a periodic domain of length $L$ are the plane waves $\\phi_k(x) = \\frac{1}{\\sqrt{L}} e^{ikx}$, where the wavevectors $k$ are quantized as $k_n = 2\\pi n/L$ for integer $n$.\n\nThe action of the Hamiltonian on these basis states is simple multiplication: $\\hat{H} \\phi_k(x) = \\frac{k^2}{2m} \\phi_k(x)$. Consequently, the action of the time-evolution operator $e^{-i\\hat{H}t}$ is also a simple multiplication in this basis: $e^{-i\\hat{H}t} \\phi_k(x) = e^{-i\\frac{k^2}{2m}t} \\phi_k(x)$.\n\nThe numerical algorithm, known as the split-operator Fourier method, leverages this property via the Fast Fourier Transform (FFT), which efficiently transforms the wavefunction between the position and momentum representations.\n\nThe step-by-step procedure is as follows:\n\n1.  **Discretization and Initial State Preparation**:\n    The spatial domain $x \\in [-L/2, L/2)$ is discretized into $N$ grid points $x_j$ with spacing $\\Delta x = L/N$. The initial wavefunction $\\psi(x,0)$ is evaluated at these grid points. The given analytical form for $\\psi(x,0)$ is technically normalized on an infinite domain. For our finite, periodic domain, we must enforce normalization numerically on the grid:\n    $$\n    \\psi_j(0) = \\frac{\\phi_j}{\\sqrt{\\sum_{l=0}^{N-1} |\\phi_l|^2 \\Delta x}}\n    $$\n    where $\\phi_j$ is the unnormalized Gaussian wavepacket evaluated at $x_j$. This ensures that the initial state satisfies the probability conservation condition $\\int |\\psi|^2 dx \\approx \\sum_j |\\psi_j(0)|^2 \\Delta x = 1$.\n\n2.  **Time Evolution in Fourier Space**:\n    For each required time $t_k$, the wavefunction $\\psi(x, t_k)$ is computed from the initial state $\\psi(x, 0)$:\n    a.  The initial state is transformed to the momentum representation using the FFT: $\\tilde{\\psi}(k, 0) = \\mathcal{F}\\{\\psi(x, 0)\\}$. The corresponding momentum grid $k_n$ is determined by the spatial discretization via $k = 2\\pi \\cdot \\text{fftfreq}(N, \\Delta x)$.\n    b.  The state is evolved in momentum space by multiplying with the diagonal time-evolution operator:\n        $$\n        \\tilde{\\psi}(k, t_k) = \\tilde{\\psi}(k, 0) \\cdot e^{-i \\frac{k^2}{2m} t_k}\n        $$\n        Since we are using Hartree atomic units, $m=1$.\n    c.  The state is transformed back to the position representation using the inverse FFT: $\\psi(x, t_k) = \\mathcal{F}^{-1}\\{\\tilde{\\psi}(k, t_k)\\}$. The `numpy` FFT and IFFT functions are inverse pairs, ensuring that the norm of the state vector is preserved throughout the evolution.\n\n3.  **Calculation of Observables**:\n    For each evolved state $\\psi(x, t_k)$, we compute the required standard deviations $\\Delta x(t_k)$ and $\\Delta p(t_k)$.\n\n    a.  **Position Uncertainty $\\Delta x(t_k)$**: The expectation values $\\langle x \\rangle_{t_k}$ and $\\langle x^2 \\rangle_{t_k}$ are computed by numerical integration (summation over the grid points) as defined in the problem statement:\n        $$\n        \\langle x \\rangle_{t_k} \\approx \\sum_j x_j |\\psi_j(t_k)|^2 \\Delta x\n        $$\n        $$\n        \\langle x^2 \\rangle_{t_k} \\approx \\sum_j x_j^2 |\\psi_j(t_k)|^2 \\Delta x\n        $$\n        The position variance is $\\Delta x(t_k)^2 = \\langle x^2 \\rangle_{t_k} - \\langle x \\rangle_{t_k}^2$. Special care is taken with the definition of the position coordinate $x_j$ on the periodic domain, as this affects the expectation value calculation, particularly if the wavepacket approaches or crosses the boundaries at $x = \\pm L/2$.\n\n    b.  **Momentum Uncertainty $\\Delta p(t_k)$**: The momentum observables are most conveniently and accurately calculated in the momentum representation. For a free particle, the momentum distribution $|\\tilde{\\psi}(k, t)|^2$ is constant in time because the evolution operator is a pure phase factor. Therefore, $\\Delta p(t)$ is constant for all $t$. We can compute it once from the initial state $\\tilde{\\psi}(k, 0)$:\n        $$\n        \\langle p \\rangle \\approx \\frac{\\sum_n k_n |\\tilde{\\psi}_n(0)|^2}{\\sum_n |\\tilde{\\psi}_n(0)|^2}\n        $$\n        $$\n        \\langle p^2 \\rangle \\approx \\frac{\\sum_n k_n^2 |\\tilde{\\psi}_n(0)|^2}{\\sum_n |\\tilde{\\psi}_n(0)|^2}\n        $$\n        The momentum variance is $\\Delta p^2 = \\langle p^2 \\rangle - \\langle p \\rangle^2$. This calculation is robust as it computes the mean and variance directly from the momentum probability distribution.\n\n4.  **Verification Against Heisenberg Uncertainty Principle**:\n    For each test case, the list of uncertainty products $\\{\\Delta x(t_k)\\Delta p(t_k)\\}$ is generated. The minimum value, $S$, is found. The initial state is a minimum uncertainty wavepacket, for which $\\Delta x(0) \\Delta p(0) = 1/2$. For a free particle, $\\Delta p$ is constant while $\\Delta x$ increases with time (wavepacket spreading). Thus, the minimum uncertainty product must occur at $t=0$. The numerical simulation must confirm that $S \\ge 1/2 - \\tau$. A result of `True` for all cases is expected, as this is a numerical verification of the fundamental Heisenberg Uncertainty Principle.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the quantum mechanics problem for the given test cases.\n    \"\"\"\n    test_cases = [\n        # Case 1: L=100.0, N=4096, sigma_x=1.0, x0=0.0, p0=0.0, times\n        (100.0, 4096, 1.0, 0.0, 0.0, [0.0, 1.0, 2.0, 5.0, 10.0]),\n        # Case 2: L=100.0, N=4096, sigma_x=0.2, x0=0.0, p0=0.0, times\n        (100.0, 4096, 0.2, 0.0, 0.0, [0.0, 0.2, 0.5, 1.0, 2.0]),\n        # Case 3: L=100.0, N=4096, sigma_x=3.0, x0=-10.0, p0=2.0, times\n        (100.0, 4096, 3.0, -10.0, 2.0, [0.0, 1.0, 5.0, 10.0, 20.0]),\n        # Case 4: L=100.0, N=4096, sigma_x=0.5, x0=20.0, p0=5.0, times\n        (100.0, 4096, 0.5, 20.0, 5.0, [0.0, 0.5, 1.0, 2.0, 5.0]),\n    ]\n\n    results = []\n    for case_params in test_cases:\n        results.append(run_simulation(*case_params))\n\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef run_simulation(L, N, sigma_x, x0, p0, times):\n    \"\"\"\n    Performs the quantum simulation for a single parameter set.\n    \"\"\"\n    # Mass m=1 and h_bar=1 in Hartree atomic units\n    m = 1.0\n    h_bar = 1.0\n    \n    # 1. Discretization\n    # Spatial grid\n    dx = L / N\n    x = np.arange(N) * dx - L / 2.0\n\n    # Momentum grid\n    # fftfreq provides frequency f. Wavevector k = 2*pi*f. Momentum p = h_bar*k.\n    k = 2.0 * np.pi * np.fft.fftfreq(N, d=dx)\n\n    # 2. Initial State Preparation\n    # Unnormalized initial wavepacket\n    psi0_unnormalized = np.exp(-((x - x0)**2) / (4.0 * sigma_x**2)) * \\\n                        np.exp(1j * p0 * (x - x0))\n\n    # Numerically normalize the state on the discrete grid\n    norm_factor = np.sqrt(np.sum(np.abs(psi0_unnormalized)**2) * dx)\n    psi0 = psi0_unnormalized / norm_factor\n\n    # 3. Calculate Momentum Uncertainty (constant for free particle)\n    psi0_k = np.fft.fft(psi0)\n    prob_k = np.abs(psi0_k)**2\n    k_norm = np.sum(prob_k)\n\n    # Expectation values for momentum\n    exp_p = np.sum(k * prob_k) / k_norm\n    exp_p2 = np.sum(k**2 * prob_k) / k_norm\n    \n    # Standard deviation of momentum\n    var_p = exp_p2 - exp_p**2\n    delta_p = np.sqrt(var_p)\n\n    uncertainty_products = []\n\n    # 4. Time Evolution and Observable Calculation\n    for t in times:\n        # Evolve in momentum space\n        time_evolution_operator = np.exp(-1j * (k**2) / (2.0 * m) * t)\n        psi_k_t = psi0_k * time_evolution_operator\n\n        # Transform back to position space\n        psi_t = np.fft.ifft(psi_k_t)\n        \n        # Calculate position uncertainty\n        prob_x = np.abs(psi_t)**2\n        \n        # Expectation values for position\n        # Normalization of psi_t is preserved by the unitary evolution\n        # so we can use the integral approximation sum(...)*dx directly.\n        # np.sum(prob_x)*dx should be 1.0\n        exp_x = np.sum(x * prob_x) * dx\n        exp_x2 = np.sum(x**2 * prob_x) * dx\n\n        # Standard deviation of position\n        var_x = exp_x2 - exp_x**2\n        delta_x = np.sqrt(var_x)\n\n        # Calculate and store the uncertainty product\n        uncertainty_products.append(delta_x * delta_p)\n\n    # 5. Final Verification\n    S = np.min(uncertainty_products)\n    tau = 1e-3\n    \n    # The Heisenberg Uncertainty Principle states delta_x * delta_p >= h_bar / 2\n    # With h_bar = 1, this is >= 0.5\n    return S >= (h_bar / 2.0 - tau)\n\nsolve()\n```", "id": "2452266"}, {"introduction": "Building on the free-particle case, we now tackle a more complex and physically realistic scenario: the interaction of an atom with a strong, time-dependent laser field. This practice will guide you in implementing the full symmetric split-operator method to handle a Hamiltonian that changes in time. You will also learn two essential techniques for simulating realistic quantum systems: how to find the initial bound ground state of the atom using an eigensolver, and how to implement a Complex Absorbing Potential (CAP) to model ionization by preventing unphysical reflections from the simulation boundary [@problem_id:2421319]. This exercise showcases how the split-operator method serves as a workhorse for studying cutting-edge problems in atomic, molecular, and optical physics.", "problem": "Implement a one-dimensional numerical solver for the time-dependent Schrödinger equation with a Complex Absorbing Potential to model ionization of a soft-core hydrogen atom in a strong laser field. Work entirely in atomic units, where $\\hbar = 1$, $m_e = 1$, and $e = 1$. Probabilities are dimensionless and require no units. Angles appearing in trigonometric functions must be in radians.\n\nStarting point and core definitions:\n- The time-dependent Schrödinger equation is $i \\,\\partial_t \\psi(x,t) = \\hat{H}(t)\\,\\psi(x,t)$ with Hamiltonian $\\hat{H}(t) = \\hat{T} + V(x) + x\\,E(t) - i\\,W(x)$, where $\\hat{T} = -\\tfrac{1}{2}\\partial_x^2$ is the kinetic energy operator, $V(x)$ is the soft-core Coulomb potential, $E(t)$ is the laser electric field in the dipole (length) gauge, and $W(x) \\ge 0$ is the Complex Absorbing Potential (CAP) that damps outgoing probability near the domain boundaries.\n- The soft-core potential is $V(x) = -\\dfrac{1}{\\sqrt{x^2 + a^2}}$ with softening parameter $a > 0$.\n- The laser field is a finite-duration pulse with envelope $E(t) = E_0\\,\\sin^2\\!\\big(\\pi t/T\\big)\\cos(\\omega t)$ for $0 \\le t \\le T$, and $E(t) = 0$ otherwise. The angular frequency is $\\omega$ and the total pulse duration is $T$.\n- The Complex Absorbing Potential is $W(x) = \\eta \\left(\\dfrac{|x| - x_{\\mathrm{cap}}}{x_{\\max} - x_{\\mathrm{cap}}}\\right)^m$ for $|x| \\ge x_{\\mathrm{cap}}$, and $W(x) = 0$ for $|x| < x_{\\mathrm{cap}}$, where $\\eta \\ge 0$ controls the absorption strength, $m \\ge 1$ is an even integer exponent, and $x_{\\max}$ is the half-domain size.\n\nYour tasks:\n1. Discretize space on a uniform grid $x_j$ with $N$ points and spacing $\\Delta x$. Use a periodic spectral representation for the kinetic propagator (via the Discrete Fourier Transform), and apply a symmetric second-order Trotter-Suzuki splitting in time for the evolution operator. The resulting algorithm should alternate half-steps of the potential and full steps of the kinetic operator, evaluated at the time-centered electric field $E(t + \\Delta t/2)$ within each time step. The CAP $W(x)$ must be included multiplicatively in the position-space potential factors.\n2. Construct the initial state $\\psi(x,0)$ as the normalized ground state of the field-free Hamiltonian $\\hat{H}_0 = \\hat{T} + V(x)$ using a finite-difference representation of $\\hat{T}$ and a sparse eigensolver to obtain the lowest eigenvector. Normalize with respect to the discrete $L^2$ inner product, i.e., ensure $\\sum_j |\\psi_j|^2 \\Delta x = 1$.\n3. Propagate $\\psi(x,t)$ from $t=0$ to $t=T$ under the Hamiltonian with the laser field and the CAP. Define the ionization probability by the absorbed norm, $P_{\\mathrm{ion}} = 1 - \\|\\psi(T)\\|_2^2$, where $\\|\\psi(T)\\|_2^2 = \\sum_j |\\psi_j(T)|^2 \\Delta x$; this equals the total norm removed by the non-Hermitian CAP over the propagation and serves as a proxy for the ionized flux.\n4. Implement the solver and compute $P_{\\mathrm{ion}}$ for each of the following test cases. Use the same spatial and temporal discretization across all tests. The laser phase is in radians.\n\nDiscretization and model parameters to use:\n- Grid size: $N = 512$ points.\n- Grid spacing: $\\Delta x = 0.3$, so $x_{\\max} = N \\Delta x / 2$ and $x \\in [-x_{\\max}, x_{\\max})$.\n- Soft-core parameter: $a = 1.0$.\n- Time step: $\\Delta t = 0.1$.\n- Angular frequency: $\\omega = 0.057$.\n- Number of cycles: $n_{\\mathrm{cyc}} = 2$, so total duration $T = n_{\\mathrm{cyc}} \\times \\dfrac{2\\pi}{\\omega}$.\n- CAP parameters: absorbing layer width $L_{\\mathrm{cap}} = 20.0$, so $x_{\\mathrm{cap}} = x_{\\max} - L_{\\mathrm{cap}}$; exponent $m = 2$.\n- Kinetic operator in momentum space: $\\exp\\!\\big(-i \\tfrac{k^2}{2} \\Delta t\\big)$ where $k$ are the discrete wave numbers consistent with the chosen grid and the Discrete Fourier Transform.\n\nTest suite:\n- Case A (no laser, CAP on): $E_0 = 0.0$, $\\eta = 1.0$.\n- Case B (moderately strong laser, CAP on): $E_0 = 0.08$, $\\eta = 1.0$.\n- Case C (same laser as B, CAP off): $E_0 = 0.08$, $\\eta = 0.0$.\n\nFor each case, compute the final absorbed probability $P_{\\mathrm{ion}}$ at $t = T$ as a floating-point number. Your program must produce a single line of output containing the three results as a comma-separated list enclosed in square brackets, in the fixed order [Case A, Case B, Case C]. Express each result as a decimal number rounded to six digits after the decimal point. For example, an output like [$0.000001$, $0.123456$, $0.000000$] would be acceptable. No other output should be printed.", "solution": "The problem posed is a well-defined initial value problem in computational quantum mechanics, requiring the numerical solution of the one-dimensional time-dependent Schrödinger equation (TDSE). All provided equations, parameters, and numerical procedures are standard in the field of strong-field physics and are scientifically sound, consistent, and complete. The problem is therefore deemed valid and a solution will be provided.\n\nThe core of the problem is to simulate the time evolution of a quantum mechanical wavefunction $\\psi(x,t)$ governed by the TDSE:\n$$\ni \\frac{\\partial}{\\partial t}\\psi(x,t) = \\hat{H}(t)\\psi(x,t)\n$$\nThe Hamiltonian $\\hat{H}(t)$ is composed of several parts:\n$$\n\\hat{H}(t) = \\hat{T} + V(x) + V_{\\mathrm{laser}}(x,t) + V_{\\mathrm{CAP}}(x)\n$$\nwhere:\n-   $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$ is the kinetic energy operator (in atomic units, where $\\hbar=1$ and the electron mass $m_e=1$).\n-   $V(x) = -\\frac{1}{\\sqrt{x^2 + a^2}}$ is the soft-core Coulomb potential, which regularizes the singularity at $x=0$.\n-   $V_{\\mathrm{laser}}(x,t) = x E(t)$ is the interaction with the laser's electric field $E(t)$ in the dipole approximation and length gauge. The field is given by $E(t) = E_0\\sin^2(\\pi t/T)\\cos(\\omega t)$ for $t \\in [0, T]$ and zero otherwise.\n-   $V_{\\mathrm{CAP}}(x) = -iW(x)$ is the Complex Absorbing Potential (CAP), which is a non-Hermitian term designed to absorb outgoing probability flux, thereby modeling ionization. The form of $W(x)$ is given as a polynomial ramp near the grid boundaries.\n\nThe solution is constructed in three main stages: spatial and temporal discretization, determination of the initial state, and time propagation of the wavefunction.\n\n**1. Discretization and Numerical Representation**\n\nWe discretize the spatial domain into a uniform grid of $N$ points, $x_j = -x_{\\max} + j\\Delta x$ for $j = 0, 1, \\dots, N-1$, where $\\Delta x$ is the grid spacing and $x_{\\max} = N\\Delta x/2$. The wavefunction becomes a vector $\\psi_j(t) = \\psi(x_j, t)$. The potential operators $V(x)$, $V_{\\mathrm{laser}}(x,t)$, and $V_{\\mathrm{CAP}}(x)$ are diagonal in this position-space representation; their action is a simple element-wise multiplication.\n\nThe kinetic energy operator $\\hat{T}$ is not diagonal in position space. Its action is most efficiently calculated in momentum space, where it is a diagonal operator. The transformation between position and momentum space is achieved via the Discrete Fourier Transform (DFT) and its inverse (IDFT). The momentum-space (or k-space) grid points $k_n$ are determined by the properties of the DFT. For our spatial grid, the corresponding wave numbers are given by $k_n$, as provided by `scipy.fft.fftfreq(N, d=dx) * 2 * np.pi`. In this basis, the kinetic operator's action is multiplication by $\\hat{T}_k = \\frac{k^2}{2}$.\n\n**2. Initial State Calculation**\n\nThe system starts in the ground state of the field-free Hamiltonian, $\\hat{H}_0 = \\hat{T} + V(x)$. To find this state, we solve the time-independent Schrödinger equation $\\hat{H}_0 \\phi = E \\phi$. This is an eigenvalue problem. We construct a matrix representation of $\\hat{H}_0$ on our spatial grid. For this purpose, we use a second-order finite-difference approximation for the kinetic operator:\n$$\n\\frac{\\partial^2\\psi}{\\partial x^2}\\bigg|_{x_j} \\approx \\frac{\\psi_{j+1} - 2\\psi_j + \\psi_{j-1}}{\\Delta x^2}\n$$\nThis turns $\\hat{T}$ into a sparse, tridiagonal matrix (with corner elements due to periodic boundary conditions). The potential $V(x)$ becomes a diagonal matrix with entries $V(x_j)$. The resulting Hamiltonian matrix $\\mathbf{H}_0$ is sparse. We use a sparse eigensolver `scipy.sparse.linalg.eigs` to find the eigenvector corresponding to the lowest eigenvalue (the ground state energy). The obtained eigenvector is then normalized according to the discrete inner product: $\\sum_{j=0}^{N-1} |\\psi_j(0)|^2 \\Delta x = 1$. This normalized vector is our initial state, $\\psi(x,0)$.\n\n**3. Time Propagation using the Split-Operator Method**\n\nThe time evolution of the wavefunction from time $t$ to $t+\\Delta t$ is formally given by $\\psi(t+\\Delta t) = \\exp(-i \\hat{H}_{\\text{eff}} \\Delta t) \\psi(t)$, where $\\hat{H}_{\\text{eff}}$ is the effective Hamiltonian over the time step. Since the kinetic operator $\\hat{T}$ and the various potential operators do not commute, we cannot simply exponentiate their sum. We employ a symmetric second-order Trotter-Suzuki decomposition of the evolution operator:\n$$\n\\hat{U}(\\Delta t) = e^{-i\\hat{H}\\Delta t} \\approx e^{-i\\hat{B}\\frac{\\Delta t}{2}} e^{-i\\hat{A}\\Delta t} e^{-i\\hat{B}\\frac{\\Delta t}{2}} + O(\\Delta t^3)\n$$\nHere, we split the Hamiltonian into the kinetic part $\\hat{A} = \\hat{T}$ and the total potential part $\\hat{B}(t) = V(x) + xE(t) - iW(x)$. The propagators for $\\hat{A}$ and $\\hat{B}$ are straightforward to apply in momentum space and position space, respectively.\n\nThe algorithm for a single time step from $t$ to $t+\\Delta t$ is as follows:\n1.  Calculate the total potential at the center of the time step, $V_{\\text{full}}(x, t+\\Delta t/2) = V(x) + x E(t+\\Delta t/2) - iW(x)$.\n2.  Apply the first half-step potential propagator in position space:\n    $$ \\psi'(x) = e^{-i V_{\\text{full}}(x, t+\\Delta t/2) \\frac{\\Delta t}{2}} \\psi(x,t) $$\n3.  Transform the result to momentum space using the Fast Fourier Transform (FFT): $\\tilde{\\psi}'(k) = \\text{FFT}[\\psi'(x)]$.\n4.  Apply the full-step kinetic propagator in momentum space:\n    $$ \\tilde{\\psi}''(k) = e^{-i \\frac{k^2}{2} \\Delta t} \\tilde{\\psi}'(k) $$\n5.  Transform back to position space using the Inverse Fast Fourier Transform (IFFT): $\\psi''(x) = \\text{IFFT}[\\tilde{\\psi}''(k)]$.\n6.  Apply the second half-step potential propagator in position space to obtain the final state for the step:\n    $$ \\psi(x,t+\\Delta t) = e^{-i V_{\\text{full}}(x, t+\\Delta t/2) \\frac{\\Delta t}{2}} \\psi''(x) $$\nThis sequence is repeated for the total duration of the laser pulse, $T$.\n\n**4. Calculation of Ionization Probability**\n\nThe CAP term $-iW(x)$ in the Hamiltonian is non-Hermitian, which leads to a non-conservation of the wavefunction's norm, $\\|\\psi(t)\\|_2^2 = \\sum_j |\\psi_j(t)|^2 \\Delta x$. The rate of norm decay is given by $\\frac{d}{dt} \\|\\psi\\|^2 = -2 \\langle \\psi | W | \\psi \\rangle$, which is non-positive since $W(x) \\ge 0$. The total norm absorbed by the CAP over the simulation time $[0, T]$ serves as a measure of the total ionization probability, $P_{\\mathrm{ion}}$. Given that the initial state is normalized, $\\|\\psi(0)\\|_2^2 = 1$, the ionization probability is:\n$$\nP_{\\mathrm{ion}} = 1 - \\|\\psi(T)\\|_2^2 = 1 - \\sum_{j=0}^{N-1} |\\psi_j(T)|^2 \\Delta x\n$$\nThis quantity is computed for each of the three test cases specified in the problem statement.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import sparse\nfrom scipy.sparse import linalg as sla\nfrom scipy import fft\n\ndef solve():\n    \"\"\"\n    Solves the 1D TDSE for a soft-core hydrogen atom in a laser field,\n    calculates ionization probability for three test cases, and prints the results.\n    \"\"\"\n\n    # --- 1. Define physical and numerical parameters ---\n    # Discretization\n    N = 512              # Number of grid points\n    dx = 0.3             # Grid spacing\n    dt = 0.1             # Time step\n    \n    # Grid construction\n    x_max = N * dx / 2.0\n    x = np.arange(-x_max, x_max, dx)\n\n    # Momentum space grid (k-space)\n    # The factor 2*pi is necessary for the angular frequency definition of k in physics\n    k = 2.0 * np.pi * fft.fftfreq(N, d=dx)\n\n    # Physical parameters\n    a = 1.0              # Soft-core parameter\n    omega = 0.057        # Laser angular frequency\n    n_cyc = 2.0          # Number of laser cycles\n    T = n_cyc * (2.0 * np.pi / omega) # Total pulse duration\n    \n    # CAP parameters\n    L_cap = 20.0         # Width of the absorbing layer\n    m_cap = 2            # Exponent of the CAP\n    x_cap = x_max - L_cap\n\n    # --- 2. Define potentials and operators ---\n    \n    # Soft-core potential\n    V_sc = -1.0 / np.sqrt(x**2 + a**2)\n\n    # Laser electric field envelope\n    def E_laser(t, E0):\n        if 0 = t = T:\n            return E0 * (np.sin(np.pi * t / T)**2) * np.cos(omega * t)\n        else:\n            return 0.0\n\n    # Complex Absorbing Potential (CAP)\n    def W_cap(eta):\n        W = np.zeros(N)\n        # Condition |x| >= x_cap\n        mask = np.abs(x) >= x_cap\n        # The region where the CAP is active\n        active_x = np.abs(x[mask])\n        W[mask] = eta * ((active_x - x_cap) / (x_max - x_cap))**m_cap\n        return W\n\n    # Kinetic energy propagator in k-space\n    K_prop = np.exp(-1j * (k**2 / 2.0) * dt)\n\n    # --- 3. Calculate initial state (ground state of H0) ---\n    def get_initial_state():\n        \"\"\"\n        Computes the normalized ground state of the field-free Hamiltonian\n        H0 = T + V(x) using a finite-difference eigensolver.\n        \"\"\"\n        # Kinetic operator T = -1/2 * d^2/dx^2 using centered 2nd-order finite difference\n        # with periodic boundary conditions\n        diag = np.ones(N) * (-2.0)\n        off_diag = np.ones(N - 1)\n        # Create tridiagonal part\n        T_matrix = sparse.diags([off_diag, diag, off_diag], [-1, 0, 1], shape=(N, N))\n        # Add periodic boundary corners\n        T_matrix.setdiag(1, N - 1)\n        T_matrix.setdiag(1, -N + 1)\n        T_matrix *= -0.5 / dx**2\n        \n        # Potential operator V_sc as a sparse diagonal matrix\n        V_matrix = sparse.diags([V_sc], [0])\n        \n        # Field-free Hamiltonian H0\n        H0 = T_matrix + V_matrix\n        \n        # Find the ground state (eigenstate with the smallest real eigenvalue)\n        # We ask for a few eigenvalues around 0 to ensure we get the ground state\n        # The true ground state energy is negative.\n        eigenvalues, eigenvectors = sla.eigs(H0, k=5, which='SR')\n        \n        ground_state_index = np.argmin(np.real(eigenvalues))\n        psi0 = eigenvectors[:, ground_state_index]\n\n        # Normalize the wavefunction: integral |psi|^2 dx = 1\n        norm = np.sqrt(np.sum(np.abs(psi0)**2) * dx)\n        psi0_normalized = psi0 / norm\n        \n        return psi0_normalized\n\n    # --- 4. Define the time propagation function ---\n    def run_simulation(psi0, E0, eta):\n        \"\"\"\n        Propagates the initial wavefunction psi0 in time from t=0 to t=T.\n        \"\"\"\n        psi = np.copy(psi0).astype(np.complex128)\n        \n        # Pre-calculate time-independent part of potential\n        W = W_cap(eta)\n        V_base = V_sc - 1j * W\n        \n        num_steps = int(np.ceil(T / dt))\n        \n        for i in range(num_steps):\n            t = i * dt\n            \n            # Symmetric Trotter splitting requires field at t + dt/2\n            E_mid = E_laser(t + dt / 2.0, E0)\n            \n            V_full = V_base + x * E_mid\n            V_prop = np.exp(-1j * V_full * dt / 2.0)\n            \n            # (1) First half-step in potential\n            psi = V_prop * psi\n            \n            # (2) Full step in kinetic energy (in k-space)\n            psi_k = fft.fft(psi)\n            psi_k = K_prop * psi_k\n            psi = fft.ifft(psi_k)\n            \n            # (3) Second half-step in potential\n            psi = V_prop * psi\n\n        # Calculate final norm and ionization probability\n        final_norm_sq = np.sum(np.abs(psi)**2) * dx\n        p_ion = 1.0 - final_norm_sq\n        \n        return p_ion\n\n    # --- 5. Run test cases and format output ---\n    test_cases = [\n        # Case A: E0=0.0, eta=1.0 (CAP on, no laser)\n        (0.0, 1.0),\n        # Case B: E0=0.08, eta=1.0 (CAP on, strong laser)\n        (0.08, 1.0),\n        # Case C: E0=0.08, eta=0.0 (CAP off, strong laser)\n        (0.08, 0.0),\n    ]\n\n    results = []\n    # Calculate initial state once, as it is the same for all cases\n    initial_state = get_initial_state()\n\n    for E0_case, eta_case in test_cases:\n        p_ion_result = run_simulation(initial_state, E0_case, eta_case)\n        # Format to 6 decimal places as requested\n        results.append(f\"{p_ion_result:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2421319"}, {"introduction": "In our final practice, we extend the split-operator method beyond the realm of linear quantum mechanics to the nonlinear Gross-Pitaevskii equation, which describes the behavior of a Bose-Einstein condensate. This problem introduces the powerful technique of imaginary-time propagation, a versatile numerical method for finding the ground state of complex, interacting systems. By adapting the time-stepping algorithm to solve for the lowest energy state, you will see how the fundamental split-operator framework can be ingeniously repurposed, demonstrating its broad applicability in fields like condensed matter physics [@problem_id:2441319].", "problem": "You are to implement a complete, runnable program that adapts the split-operator (time-splitting spectral) method to the nonlinear Gross-Pitaevskii equation in one spatial dimension, where the effective potential depends on the evolving wavefunction. Your task is to compute the chemical potential of the stationary state obtained by normalized imaginary-time propagation for a small test suite of cases, and to output the results on a single line in a specified format.\n\nStart from the time-dependent Gross-Pitaevskii equation in one dimension, in dimensionless units with reduced Planck constant equal to unity and particle mass equal to unity, i.e., $\\hbar = 1$ and $m = 1$:\n$$\n\\mathrm{i}\\,\\frac{\\partial \\psi(x,t)}{\\partial t} \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} \\;+\\; V_{\\mathrm{ext}}(x) \\;+\\; g\\,|\\psi(x,t)|^2 \\right] \\psi(x,t).\n$$\nEvolve in imaginary time to obtain the stationary ground state by replacing $t$ with $-\\,\\mathrm{i}\\,\\tau$ and enforcing normalization of the wavefunction after each time step so that $\\int |\\psi(x,\\tau)|^2\\,\\mathrm{d}x = 1$. Use a second-order accurate symmetric split-operator scheme that alternates between the kinetic operator in Fourier space and the combined external plus nonlinear potential in real space. Use periodic boundary conditions consistent with the discrete Fourier transform on a finite domain.\n\nFor a given final normalized state $\\psi(x)$, compute the chemical potential $\\mu$ of the stationary solution using its definition implied by the stationary Gross-Pitaevskii equation,\n$$\n\\mu\\,\\psi(x) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} \\;+\\; V_{\\mathrm{ext}}(x) \\;+\\; g\\,|\\psi(x)|^2 \\right]\\psi(x),\n$$\nand express $\\mu$ as a scalar computed from $\\psi(x)$ and its gradient. All integrals must be approximated by appropriate Riemann sums on the numerical grid, and spatial derivatives required for the kinetic contribution must be computed in a manner consistent with the Fourier representation on the chosen grid.\n\nAll quantities are in dimensionless units, so your program must output the chemical potentials in dimensionless energy units.\n\nImplement your program for the following test suite of parameter sets, all in one spatial dimension:\n- Case A (linear harmonic oscillator, baseline check):\n  - External potential $V_{\\mathrm{ext}}(x) = \\tfrac{1}{2}\\,\\omega^2 x^2$ with $\\omega = 1.0$.\n  - Interaction strength $g = 0.0$.\n  - Domain length $L = 20.0$ with periodic boundary conditions and $N = 512$ grid points, so that $\\Delta x = L/N$.\n  - Imaginary-time step $\\Delta \\tau = 0.001$ and number of steps $N_{\\mathrm{steps}} = 2500$.\n  - Initial wavefunction: normalized Gaussian $\\psi(x,0) \\propto \\exp\\!\\big(-x^2/(2\\sigma^2)\\big)$ with $\\sigma = 1.0$, normalized to $\\int |\\psi(x,0)|^2\\,\\mathrm{d}x = 1$.\n- Case B (repulsive nonlinear harmonic oscillator):\n  - External potential $V_{\\mathrm{ext}}(x) = \\tfrac{1}{2}\\,\\omega^2 x^2$ with $\\omega = 1.0$.\n  - Interaction strength $g = 1.0$.\n  - Domain length $L = 20.0$ with periodic boundary conditions and $N = 512$ grid points.\n  - Imaginary-time step $\\Delta \\tau = 0.001$ and number of steps $N_{\\mathrm{steps}} = 2500$.\n  - Initial wavefunction: normalized Gaussian with $\\sigma = 1.0$, normalized to unity.\n- Case C (periodic box, uniform stationary state):\n  - External potential $V_{\\mathrm{ext}}(x) = 0$.\n  - Interaction strength $g = 2.0$.\n  - Domain length $L = 10.0$ with periodic boundary conditions and $N = 512$ grid points.\n  - Imaginary-time step $\\Delta \\tau = 0.001$ and number of steps $N_{\\mathrm{steps}} = 10$.\n  - Initial wavefunction: uniform $\\psi(x,0) = 1/\\sqrt{L}$ so that it is exactly normalized.\n\nYour program must:\n- Use a symmetric split-operator scheme of second order in the imaginary-time step to propagate to the final time for each case, normalizing after each time step to maintain $\\int |\\psi|^2\\,\\mathrm{d}x = 1$.\n- Compute the chemical potential $\\mu$ for each case from the final normalized state.\n- Produce a single line of output containing the three results as a comma-separated list enclosed in square brackets, for example, $\\texttt{[0.500000,1.234567,0.200000]}$, with each value rounded to $6$ decimal places.\n\nConstraints and implementation details:\n- Spatial grid: $x_j = x_{\\min} + j\\,\\Delta x$ with $x_{\\min} = -L/2$, $j = 0,1,\\dots,N-1$, and $\\Delta x = L/N$.\n- Wavenumbers: $k$-grid consistent with the discrete Fourier transform and periodic boundary conditions must be used for kinetic steps and spectral derivatives.\n- The algorithm must be fully self-contained and must not read any input.\n- Your program must compute and return the chemical potentials for the three cases above in the required output format.\n\nYour final program must be a complete, runnable script that prints only one line: a single list in the format $\\texttt{[}\\mu_A,\\mu_B,\\mu_C\\texttt{]}$ with each entry rounded to $6$ decimal places.", "solution": "The problem requires the implementation of a numerical algorithm to find the stationary ground state of the one-dimensional Gross-Pitaevskii equation (GPE) and compute its associated chemical potential, $\\mu$. The method specified is imaginary-time propagation using a second-order symmetric split-operator scheme.\n\nThe time-dependent GPE is given as:\n$$\n\\mathrm{i}\\,\\frac{\\partial \\psi(x,t)}{\\partial t} \\;=\\; \\hat{H}\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} \\;+\\; V_{\\mathrm{ext}}(x) \\;+\\; g\\,|\\psi(x,t)|^2 \\right] \\psi(x,t)\n$$\nwhere the mass $m$ and reduced Planck constant $\\hbar$ are set to $1$. The Hamiltonian $\\hat{H}$ is composed of a kinetic energy operator, $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$, and a potential energy operator, $\\hat{V}(x, \\psi) = V_{\\mathrm{ext}}(x) + g\\,|\\psi(x,t)|^2$, which includes a term dependent on the wavefunction density itself.\n\nTo find the ground state, we employ the method of imaginary-time evolution. This is achieved by the substitution $t \\to -i\\tau$, transforming the Schrödinger equation into a diffusion-type equation in the imaginary-time variable $\\tau$:\n$$\n\\frac{\\partial \\psi(x,\\tau)}{\\partial \\tau} \\;=\\; -\\hat{H}\\psi(x,\\tau)\n$$\nThe formal solution to this equation over a small time step $\\Delta\\tau$ is $\\psi(x, \\tau+\\Delta\\tau) = e^{-\\hat{H}\\Delta\\tau}\\psi(x,\\tau)$. When an arbitrary initial state is propagated using this rule, components corresponding to higher-energy eigenstates decay more rapidly than the ground state component. By repeatedly applying the evolution operator and renormalizing the wavefunction at each step, the state converges to the ground state, which is the eigenstate of $\\hat{H}$ with the lowest eigenvalue.\n\nThe evolution operator $e^{-\\hat{H}\\Delta\\tau} = e^{-(\\hat{T} + \\hat{V})\\Delta\\tau}$ is difficult to compute directly because the kinetic operator $\\hat{T}$ and potential operator $\\hat{V}$ do not commute ($\\left[\\hat{T}, \\hat{V}\\right] \\neq 0$). The split-operator method approximates the evolution by separating the kinetic and potential propagations. A second-order accurate symmetric splitting, also known as the Strang splitting, is employed:\n$$\ne^{-(\\hat{T} + \\hat{V})\\Delta\\tau} \\approx e^{-\\hat{V}\\Delta\\tau/2} \\, e^{-\\hat{T}\\Delta\\tau} \\, e^{-\\hat{V}\\Delta\\tau/2} + O(\\Delta\\tau^3)\n$$\nThis scheme is implemented algorithmically for a single time step from $\\tau$ to $\\tau + \\Delta\\tau$:\n\n1.  **Potential Half-Step:** The wavefunction is first propagated under the potential operator for a half-step $\\Delta\\tau/2$. This operation is local in position space and amounts to a simple multiplication. For the nonlinear GPE, the potential must be calculated using the current state $\\psi(x,\\tau)$:\n    $$\n    \\psi'(x) = e^{-(V_{\\mathrm{ext}}(x) + g|\\psi(x,\\tau)|^2)\\Delta\\tau/2} \\psi(x,\\tau)\n    $$\n2.  **Kinetic Full-Step:** The kinetic energy operator $\\hat{T}$ is local in momentum (or $k$) space. The propagation is most efficiently performed using the Fast Fourier Transform (FFT). The state $\\psi'(x)$ is transformed to Fourier space, $\\tilde{\\psi}'(k) = \\mathcal{F}\\{\\psi'(x)\\}$. In this basis, the kinetic operator is diagonal, $\\hat{T}_k = k^2/2$, so the propagation is a multiplication:\n    $$\n    \\tilde{\\psi}''(k) = e^{-k^2\\Delta\\tau/2} \\tilde{\\psi}'(k)\n    $$\n    The result is then transformed back to position space: $\\psi''(x) = \\mathcal{F}^{-1}\\{\\tilde{\\psi}''(k)\\}$. The wavevector grid $k_j$ must be consistent with the spatial grid $x_j$, which is achieved using the `fftfreq` function, where $k_j = 2\\pi f_j$ and $f_j$ are the discrete frequencies. For a spatial domain of length $L$ with $N$ points and grid spacing $\\Delta x = L/N$, the wavevectors are $k = 2\\pi \\cdot \\texttt{fftfreq}(N, d=\\Delta x)$.\n\n3.  **Potential Half-Step (Second):** A final propagation under the potential operator for another half-step $\\Delta\\tau/2$ completes the symmetric step. The potential is recalculated using the updated wavefunction $\\psi''(x)$ to ensure symmetry and stability:\n    $$\n    \\psi(x, \\tau+\\Delta\\tau)_{\\text{un-norm}} = e^{-(V_{\\mathrm{ext}}(x) + g|\\psi''(x)|^2)\\Delta\\tau/2} \\psi''(x)\n    $$\n4.  **Normalization:** Since imaginary-time evolution does not conserve the norm, the wavefunction must be renormalized after each full step to maintain the physical constraint $\\int |\\psi|^2 dx = 1$. The integral is approximated by a Riemann sum: $I = \\sum_j |\\psi_j|^2 \\Delta x$. The wavefunction is then updated as $\\psi_j \\to \\psi_j / \\sqrt{I}$.\n\nAfter a sufficient number of steps, $N_{\\mathrm{steps}}$, the wavefunction $\\psi(x)$ converges to the stationary ground state. The chemical potential $\\mu$ is the eigenvalue corresponding to this state, defined by the stationary GPE: $\\hat{H}\\psi(x) = \\mu\\psi(x)$. The value of $\\mu$ is computed as the expectation value of the Hamiltonian with respect to the final normalized state:\n$$\n\\mu = \\langle \\psi | \\hat{H} | \\psi \\rangle = \\int \\psi^*(x) \\hat{H} \\psi(x) \\, dx\n$$\nThis expectation value is the sum of three energy contributions:\n- **Kinetic Energy:** $E_{kin} = \\int \\psi^*(x) \\left(-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}\\right) \\psi(x) \\, dx$. This is computed efficiently in Fourier space: $E_{kin} = \\int \\tilde{\\psi}^*(k) \\left(\\frac{k^2}{2}\\right) \\tilde{\\psi}(k) \\, dk$. Numerically, this is $\\sum_j |\\tilde{\\psi}_j|^2 \\frac{k_j^2}{2}$ (with appropriate FFT normalization) or, more directly, by applying the kinetic operator to $\\psi$ and computing the inner product: $E_{kin} \\approx \\Delta x \\sum_j \\psi_j^* \\mathcal{F}^{-1}\\{ (k^2/2) \\mathcal{F}\\{\\psi_j\\} \\}$.\n- **External Potential Energy:** $E_{pot, ext} = \\int V_{\\mathrm{ext}}(x) |\\psi(x)|^2 \\, dx$. This is approximated by the sum $\\Delta x \\sum_j V_{\\mathrm{ext}}(x_j) |\\psi_j|^2$.\n- **Interaction Energy:** $E_{int} = \\int g |\\psi(x)|^4 \\, dx$. This is approximated by the sum $\\Delta x \\sum_j g |\\psi_j|^4$.\n\nThe chemical potential is the sum $\\mu = E_{kin} + E_{pot, ext} + E_{int}$. The algorithm is applied to each of the three test cases specified, yielding their respective chemical potentials.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.fft import fft, ifft, fftfreq\n\ndef compute_mu(params):\n    \"\"\"\n    Computes the chemical potential for a given Gross-Pitaevskii equation setup\n    using imaginary-time propagation with a split-operator method.\n\n    Args:\n        params (dict): A dictionary containing all simulation parameters:\n            - L (float): Domain length.\n            - N (int): Number of grid points.\n            - g (float): Interaction strength.\n            - V_ext_func (callable): Function for the external potential V_ext(x).\n            - dt (float): Imaginary time step (delta_tau).\n            - N_steps (int): Number of propagation steps.\n            - psi0_func (callable): Function for the initial wavefunction psi(x, 0).\n\n    Returns:\n        float: The computed chemical potential, mu.\n    \"\"\"\n    # Unpack parameters\n    L = params[\"L\"]\n    N = params[\"N\"]\n    g = params[\"g\"]\n    V_ext_func = params[\"V_ext_func\"]\n    dt = params[\"dt\"]\n    N_steps = params[\"N_steps\"]\n    psi0_func = params[\"psi0_func\"]\n\n    # 1. Setup spatial and momentum grids\n    dx = L / N\n    x = np.linspace(-L / 2, L / 2 - dx, N)\n    k = 2 * np.pi * fftfreq(N, d=dx)\n\n    # 2. Setup kinetic operator and time-evolution propagators\n    T_k = 0.5 * k**2\n    kinetic_propagator = np.exp(-T_k * dt)\n    V_ext = V_ext_func(x)\n\n    # 3. Setup initial wavefunction and normalize it\n    psi = psi0_func(x).astype(np.complex128)\n    norm_sq = np.sum(np.abs(psi)**2) * dx\n    psi = psi / np.sqrt(norm_sq)\n\n    # 4. Imaginary time evolution loop\n    for _ in range(N_steps):\n        # Symmetric split-operator step: V/2, T, V/2\n        \n        # First half-step in potential\n        V_eff = V_ext + g * np.abs(psi)**2\n        psi *= np.exp(-V_eff * dt / 2.0)\n\n        # Full step in kinetic energy (in Fourier space)\n        psi_k = fft(psi)\n        psi_k *= kinetic_propagator\n        psi = ifft(psi_k)\n\n        # Second half-step in potential\n        V_eff = V_ext + g * np.abs(psi)**2\n        psi *= np.exp(-V_eff * dt / 2.0)\n\n        # Renormalize the wavefunction after the full step\n        norm_sq = np.sum(np.abs(psi)**2) * dx\n        psi /= np.sqrt(norm_sq)\n\n    # 5. Calculate the chemical potential mu from the final stationary state\n    # mu = psi|H|psi = T + V_ext + V_int\n    \n    # Kinetic energy expectation value\n    psi_k = fft(psi)\n    T_psi = ifft(T_k * psi_k)\n    E_kin = np.sum(np.conj(psi) * T_psi).real * dx\n    \n    # External potential energy expectation value\n    E_pot_ext = np.sum(V_ext * np.abs(psi)**2).real * dx\n    \n    # Interaction energy expectation value\n    E_int = np.sum(g * np.abs(psi)**4).real * dx\n    \n    mu = E_kin + E_pot_ext + E_int\n\n    return mu\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A: Linear harmonic oscillator (g=0)\n        {\n            \"L\": 20.0, \"N\": 512, \"g\": 0.0, \"omega\": 1.0, \"sigma\": 1.0,\n            \"dt\": 0.001, \"N_steps\": 2500,\n            \"V_ext_func\": lambda x, w=1.0: 0.5 * w**2 * x**2,\n            \"psi0_func\": lambda x, s=1.0: np.exp(-x**2 / (2 * s**2))\n        },\n        # Case B: Repulsive nonlinear harmonic oscillator (g0)\n        {\n            \"L\": 20.0, \"N\": 512, \"g\": 1.0, \"omega\": 1.0, \"sigma\": 1.0,\n            \"dt\": 0.001, \"N_steps\": 2500,\n            \"V_ext_func\": lambda x, w=1.0: 0.5 * w**2 * x**2,\n            \"psi0_func\": lambda x, s=1.0: np.exp(-x**2 / (2 * s**2))\n        },\n        # Case C: Periodic box, uniform state\n        {\n            \"L\": 10.0, \"N\": 512, \"g\": 2.0,\n            \"dt\": 0.001, \"N_steps\": 10,\n            \"V_ext_func\": lambda x: np.zeros_like(x),\n            \"psi0_func\": lambda x, L=10.0: np.full_like(x, 1.0 / np.sqrt(L))\n        }\n    ]\n\n    results = []\n    for case_params in test_cases:\n        mu = compute_mu(case_params)\n        results.append(mu)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2441319"}]}