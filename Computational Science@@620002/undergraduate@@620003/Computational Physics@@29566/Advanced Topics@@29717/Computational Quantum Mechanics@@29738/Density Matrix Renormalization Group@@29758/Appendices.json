{"hands_on_practices": [{"introduction": "The best way to understand Matrix Product States (MPS), the language of DMRG, is to start by building one from scratch. This first practice session tackles the simplest possible case: a many-body quantum state with absolutely no entanglement across any bipartition. By constructing the MPS for a simple alternating product state [@problem_id:2453944], you will gain a concrete understanding of how the bond dimension directly reflects the entanglement properties of the state, in this case, its complete lack thereof.", "problem": "Consider a one-dimensional chain of $N$ spin-$\\tfrac{1}{2}$ sites with local computational basis $\\{|0\\rangle,|1\\rangle\\}$ and open boundary conditions. In the context of the Density Matrix Renormalization Group (DMRG) algorithm, a state is represented as a Matrix Product State (MPS) with open boundaries in the form\n$$\n|\\Psi\\rangle=\\sum_{\\sigma_{1},\\ldots,\\sigma_{N}\\in\\{0,1\\}} v_{\\mathrm{L}}^{\\top} A^{[1]}_{\\sigma_{1}} A^{[2]}_{\\sigma_{2}}\\cdots A^{[N]}_{\\sigma_{N}} v_{\\mathrm{R}}\\,|\\sigma_{1}\\sigma_{2}\\cdots\\sigma_{N}\\rangle,\n$$\nwhere $A^{[i]}_{\\sigma_{i}}$ are $D_{i-1} \\times D_{i}$ matrices over $\\mathbb{C}$, $D_{0}=D_{N}=1$, and $v_{\\mathrm{L}}$ and $v_{\\mathrm{R}}$ are boundary vectors of dimensions $D_{0}$ and $D_{N}$, respectively. Let $N$ be even and consider the alternating product state\n$$\n|\\Phi\\rangle=|0\\,1\\,0\\,1\\,\\cdots\\,0\\,1\\rangle,\n$$\nthat is, $\\sigma_{i}=0$ for odd $i$ and $\\sigma_{i}=1$ for even $i$. Construct an exact open-boundary MPS that represents $|\\Phi\\rangle$ and determine the minimal possible maximal bond dimension $D_{\\min}$ over all exact open-boundary MPS representations of $|\\Phi\\rangle$.\n\nProvide your final answer as the single integer value of $D_{\\min}$. No rounding is required.", "solution": "The problem as stated is valid. It is scientifically grounded in the principles of quantum information theory and tensor networks, is well-posed, and expressed in objective, unambiguous language. We shall proceed with its solution.\n\nThe problem asks for the minimal possible maximal bond dimension, which we denote as $D_{\\min}$, required for an exact Matrix Product State (MPS) representation of the given state $|\\Phi\\rangle$. For an open-boundary MPS, the minimal bond dimension $D_k$ required at the bond connecting site $k$ and site $k+1$ is precisely the Schmidt rank $\\chi_k$ of the quantum state with respect to the bipartition of the system into two subsystems: $A = \\{1, 2, \\dots, k\\}$ and $B = \\{k+1, \\dots, N\\}$. The Schmidt rank is the number of non-zero Schmidt coefficients in the Schmidt decomposition of the state. The minimal maximal bond dimension is therefore the maximum Schmidt rank over all possible bipartitions of the chain: $D_{\\min} = \\max_{1 \\le k < N} \\chi_k$.\n\nThe state in question is the alternating product state on a chain of $N$ sites, where $N$ is an even integer:\n$$\n|\\Phi\\rangle = |0\\,1\\,0\\,1\\,\\cdots\\,0\\,1\\rangle\n$$\nThis state is a pure product state, which can be written as a tensor product of single-site states:\n$$\n|\\Phi\\rangle = |\\sigma_1\\rangle_1 \\otimes |\\sigma_2\\rangle_2 \\otimes \\cdots \\otimes |\\sigma_N\\rangle_N = \\bigotimes_{i=1}^{N} |\\sigma_i\\rangle_i\n$$\nwhere $\\sigma_i = 0$ for odd $i$ and $\\sigma_i = 1$ for even $i$.\n\nLet us consider an arbitrary bipartition of the chain between site $k$ and site $k+1$, where $1 \\le k < N$. The state $|\\Phi\\rangle$ can be written with respect to this partition as:\n$$\n|\\Phi\\rangle = \\left( \\bigotimes_{i=1}^{k} |\\sigma_i\\rangle_i \\right) \\otimes \\left( \\bigotimes_{j=k+1}^{N} |\\sigma_j\\rangle_j \\right)\n$$\nLet us define the state of the left part of the chain as $|\\Psi_A\\rangle = \\bigotimes_{i=1}^{k} |\\sigma_i\\rangle_i$ and the state of the right part as $|\\Psi_B\\rangle = \\bigotimes_{j=k+1}^{N} |\\sigma_j\\rangle_j$. The total state is then:\n$$\n|\\Phi\\rangle = |\\Psi_A\\rangle \\otimes |\\Psi_B\\rangle\n$$\nThis expression is already in the form of a Schmidt decomposition, $|\\Phi\\rangle = \\sum_{\\alpha} \\lambda_{\\alpha} |\\psi_{\\alpha}\\rangle_A |\\phi_{\\alpha}\\rangle_B$, but with only a single term. Specifically, we have $\\lambda_1 = 1$ with $|\\psi_1\\rangle_A = |\\Psi_A\\rangle$ and $|\\phi_1\\rangle_B = |\\Psi_B\\rangle$, and all other Schmidt coefficients $\\lambda_{\\alpha > 1}$ are zero.\n\nThe Schmidt rank $\\chi_k$ is the number of non-zero Schmidt coefficients. For the state $|\\Phi\\rangle$, this number is $1$ for any choice of bipartition $k$.\n$$\n\\chi_k = 1 \\quad \\forall k \\in \\{1, 2, \\ldots, N-1\\}\n$$\nThis signifies that the state is completely unentangled across any cut.\n\nThe minimal required bond dimensions for an exact MPS representation are $D_k = \\chi_k = 1$ for $k = 1, \\ldots, N-1$. The boundary bond dimensions are given as $D_0 = 1$ and $D_N = 1$. Therefore, an exact MPS representation exists where all bond dimensions are equal to $1$:\n$$\nD_0 = D_1 = \\cdots = D_{N-1} = D_N = 1\n$$\nThe maximal bond dimension for such a representation is $\\max_{0 \\le k \\le N} D_k = 1$. Since the bond dimension must be a positive integer, it cannot be smaller than $1$. Consequently, the minimal possible maximal bond dimension is:\n$$\nD_{\\min} = 1\n$$\nTo verify this, we can construct the MPS tensors explicitly. With all bond dimensions being $1$, the matrices $A^{[i]}_{\\sigma_i}$ are $1 \\times 1$ matrices (i.e., scalars). The boundary vectors $v_{\\mathrm{L}}$ and $v_{\\mathrm{R}}$ are also scalars, which we can set to $1$ without loss of generality. The coefficient of the basis state $|\\sigma_1\\cdots\\sigma_N\\rangle$ is given by the product $A^{[1]}_{\\sigma_1} A^{[2]}_{\\sigma_2} \\cdots A^{[N]}_{\\sigma_N}$. We require this product to be $1$ for the configuration $(\\sigma_1, \\dots, \\sigma_N) = (0, 1, \\dots, 0, 1)$ and $0$ otherwise. This can be achieved with the following choice of tensors:\nFor odd site indices $i \\in \\{1, 3, \\ldots, N-1\\}$:\n$$\nA^{[i]}_0 = [1], \\quad A^{[i]}_1 = [0]\n$$\nFor even site indices $i \\in \\{2, 4, \\ldots, N\\}$:\n$$\nA^{[i]}_0 = [0], \\quad A^{[i]}_1 = [1]\n$$\nThe product $\\prod_{i=1}^N A^{[i]}_{\\sigma_i}$ will be non-zero only if $A^{[i]}_{\\sigma_i}$ is non-zero for all $i$. This requires selecting $\\sigma_i = 0$ for all odd $i$ and $\\sigma_i = 1$ for all even $i$. For this unique configuration, the product is $[1]\\times[1]\\times\\cdots\\times[1]=[1]$. For any other configuration, at least one matrix in the product is $[0]$, yielding a total product of $[0]$. This construction exactly reproduces the state $|\\Phi\\rangle$ with a maximal bond dimension of $1$.", "answer": "$$\\boxed{1}$$", "id": "2453944"}, {"introduction": "Having seen that an unentangled product state corresponds to a minimal bond dimension of one, we now ask: what happens when we introduce entanglement? This exercise challenges you to construct an MPS for the famous Greenberger-Horne-Zeilinger (GHZ) state, a canonical example of a system with long-range quantum correlations [@problem_id:2385333]. Here you will use the Schmidt decomposition to discover the minimal required bond dimension and realize that even some highly entangled states can be represented with a surprisingly small and constant bond dimension.", "problem": "Consider a chain of $N$ spin-$\\tfrac{1}{2}$ sites with open boundary conditions, in the context of Density Matrix Renormalization Group (DMRG), where states are efficiently represented as Matrix Product States (MPS). Let the target state be the Greenberger–Horne–Zeilinger (GHZ) state\n$$|\\psi\\rangle=\\frac{1}{\\sqrt{2}}\\big(|0\\,0\\,\\cdots\\,0\\rangle+|1\\,1\\,\\cdots\\,1\\rangle\\big),$$\nwhere $|0\\rangle$ and $|1\\rangle$ are the eigenstates of $\\sigma^{z}$ at each site. An open-boundary MPS for a state $|\\psi\\rangle$ is defined by local tensors {$A^{[i]s_i}$} with a physical index $s_i\\in\\{0,1\\}$ and virtual indices of dimension $\\chi$, together with boundary vectors, such that the amplitude for a computational basis string $|s_1 s_2 \\cdots s_N\\rangle$ equals the scalar\n$$\\langle s_1 s_2 \\cdots s_N | \\psi \\rangle = \\boldsymbol{\\ell}^{\\mathsf{T}}\\, A^{[1]s_1} A^{[2]s_2} \\cdots A^{[N]s_N}\\, \\boldsymbol{r},$$\nwith $\\boldsymbol{\\ell}$ a row vector and $\\boldsymbol{r}$ a column vector.\n\nYour tasks are:\n- Construct an explicit set of site tensors $A^{[i]0}$ and $A^{[i]1}$ and boundary vectors $\\boldsymbol{\\ell}$ and $\\boldsymbol{r}$, with a fixed virtual dimension $\\chi$ independent of $N$, that exactly represents the GHZ state for arbitrary $N\\geq 2$. Clearly specify the nonzero matrix elements of each $A^{[i]s}$ and the entries of $\\boldsymbol{\\ell}$ and $\\boldsymbol{r}$.\n- Starting from the definition of the Schmidt decomposition across a bipartition between sites $\\ell$ and $\\ell+1$, use first principles to justify a lower bound on the necessary virtual dimension $\\chi$ in terms of the number of nonzero Schmidt coefficients across that cut. Then combine this lower bound with your explicit construction to determine the minimal virtual dimension required to represent the GHZ state for any $N\\geq 2$.\n- Verify that your construction is normalized by directly evaluating the total norm $\\langle \\psi|\\psi\\rangle$ of your MPS via contraction or by an equivalent argument based on the nonzero amplitudes of basis states.\n\nReport your final answer as the minimal required bond dimension for any chain of length $N\\geq 2$, as a single exact integer with no units. Do not provide intermediate results. No rounding is needed.", "solution": "The problem as stated is scientifically grounded, well-posed, and contains all necessary information for a unique solution. It is a standard exercise in the theory of Matrix Product States (MPS). We shall therefore proceed to its solution.\n\nThe problem requires a three-part solution: the construction of an MPS representation for the Greenberger–Horne–Zeilinger (GHZ) state, the determination of the minimal required virtual dimension (bond dimension) $\\chi$, and the verification of the normalization of the constructed state.\n\n**1. MPS Construction for the GHZ State**\n\nThe target state is the GHZ state on $N$ spin-$\\frac{1}{2}$ sites:\n$$|\\psi\\rangle = \\frac{1}{\\sqrt{2}} \\left( |00\\cdots0\\rangle + |11\\cdots1\\rangle \\right)$$\nThe coefficient for a computational basis state $|s_1 s_2 \\cdots s_N\\rangle$ is non-zero only if all spins are aligned, i.e., $s_1=s_2=\\cdots=s_N=0$ or $s_1=s_2=\\cdots=s_N=1$. In these two cases, the amplitude is $\\frac{1}{\\sqrt{2}}$. For all other $2^N-2$ basis states, the amplitude is $0$.\n\nAn MPS representation must replicate these amplitudes. We propose a construction with a virtual dimension of $\\chi=2$. Let the virtual basis be denoted by indices $\\{0, 1\\}$. The site tensors $A^{[i]s_i}$ are $2 \\times 2$ matrices, and the boundary vectors $\\boldsymbol{\\ell}$ and $\\boldsymbol{r}$ have dimension $2$.\n\nLet us define the site tensors for each site $i \\in \\{1, 2, \\dots, N\\}$ as follows:\n$$A^{[i]0} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 0 \\end{pmatrix}, \\quad A^{[i]1} = \\begin{pmatrix} 0 & 0 \\\\ 0 & 1 \\end{pmatrix}$$\nThese matrices correspond to projectors onto the virtual basis states $|0\\rangle_v$ and $|1\\rangle_v$ respectively.\n\nThe boundary vectors are defined as:\n$$\\boldsymbol{\\ell} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}, \\quad \\boldsymbol{r} = \\begin{pmatrix} \\frac{1}{\\sqrt{2}} \\\\ \\frac{1}{\\sqrt{2}} \\end{pmatrix}$$\nAs per the problem definition, $\\boldsymbol{\\ell}$ is a column vector, so its transpose $\\boldsymbol{\\ell}^{\\mathsf{T}}$ is the row vector $(1 \\quad 1)$.\n\nLet us verify this construction. The amplitude for a configuration $|s_1 s_2 \\cdots s_N\\rangle$ is given by the matrix product:\n$$\\langle s_1 s_2 \\cdots s_N | \\psi \\rangle' = \\boldsymbol{\\ell}^{\\mathsf{T}} A^{[1]s_1} A^{[2]s_2} \\cdots A^{[N]s_N} \\boldsymbol{r}$$\nIf all $s_i=0$, the product of tensors is $(A^{[i]0})^N = A^{[1]0} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 0 \\end{pmatrix}$. The amplitude is:\n$$\\langle 00\\cdots0 | \\psi \\rangle' = (1 \\quad 1) \\begin{pmatrix} 1 & 0 \\\\ 0 & 0 \\end{pmatrix} \\begin{pmatrix} \\frac{1}{\\sqrt{2}} \\\\ \\frac{1}{\\sqrt{2}} \\end{pmatrix} = (1 \\quad 0) \\begin{pmatrix} \\frac{1}{\\sqrt{2}} \\\\ \\frac{1}{\\sqrt{2}} \\end{pmatrix} = \\frac{1}{\\sqrt{2}}$$\nIf all $s_i=1$, the product of tensors is $(A^{[i]1})^N = A^{[1]1} = \\begin{pmatrix} 0 & 0 \\\\ 0 & 1 \\end{pmatrix}$. The amplitude is:\n$$\\langle 11\\cdots1 | \\psi \\rangle' = (1 \\quad 1) \\begin{pmatrix} 0 & 0 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} \\frac{1}{\\sqrt{2}} \\\\ \\frac{1}{\\sqrt{2}} \\end{pmatrix} = (0 \\quad 1) \\begin{pmatrix} \\frac{1}{\\sqrt{2}} \\\\ \\frac{1}{\\sqrt{2}} \\end{pmatrix} = \\frac{1}{\\sqrt{2}}$$\nFor any mixed sequence of $s_i$, the matrix product $A^{[1]s_1} \\cdots A^{[N]s_N}$ will contain at least one factor of $A^{[i]0}$ and at least one factor of $A^{[j]1}$. Since $A^{[i]0}A^{[j]1} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 0 \\end{pmatrix} \\begin{pmatrix} 0 & 0 \\\\ 0 & 1 \\end{pmatrix} = \\begin{pmatrix} 0 & 0 \\\\ 0 & 0 \\end{pmatrix}$, any such product will result in the zero matrix. Thus, the amplitude for any mixed state is $0$.\nThe construction correctly reproduces the GHZ state for any $N \\geq 2$ with a constant bond dimension $\\chi=2$.\n\n**2. Minimal Required Bond Dimension**\n\nThe minimal bond dimension $\\chi$ required to exactly represent a quantum state $|\\psi\\rangle$ is given by the maximum Schmidt rank over all possible bipartitions of the system. The Schmidt rank for a given bipartition is the number of non-zero Schmidt coefficients in the Schmidt decomposition of the state across that cut.\n\nLet us consider a bipartition of the $N$-site chain into a left part $L$ (sites $1, \\dots, \\ell$) and a right part $R$ (sites $\\ell+1, \\dots, N$), for any $1 \\le \\ell < N$. The GHZ state can be written as:\n$$|\\psi\\rangle = \\frac{1}{\\sqrt{2}} \\left( |0\\rangle^{\\otimes \\ell} \\otimes |0\\rangle^{\\otimes (N-\\ell)} + |1\\rangle^{\\otimes \\ell} \\otimes |1\\rangle^{\\otimes (N-\\ell)} \\right)$$\nThis expression is already in the form of a Schmidt decomposition:\n$$|\\psi\\rangle = \\sum_{k=1}^{\\chi_{LR}} \\lambda_k |\\phi_k\\rangle_L |\\theta_k\\rangle_R$$\nWe can identify the components:\n- Schmidt coefficients: $\\lambda_1 = \\frac{1}{\\sqrt{2}}$, $\\lambda_2 = \\frac{1}{\\sqrt{2}}$.\n- Orthonormal basis for subsystem $L$: $\\{ |\\phi_1\\rangle_L, |\\phi_2\\rangle_L \\} = \\{ |0\\rangle^{\\otimes \\ell}, |1\\rangle^{\\otimes \\ell} \\}$.\n- Orthonormal basis for subsystem $R$: $\\{ |\\theta_1\\rangle_R, |\\theta_2\\rangle_R \\} = \\{ |0\\rangle^{\\otimes (N-\\ell)}, |1\\rangle^{\\otimes (N-\\ell)} \\}$.\n\nThere are exactly two non-zero Schmidt coefficients. Thus, the Schmidt rank across the cut $(\\ell, \\ell+1)$ is $2$. This is true for any choice of cut $\\ell$ where $1 \\le \\ell < N$. Therefore, the maximum Schmidt rank over all bipartitions is $2$.\nThis establishes a lower bound for the bond dimension required for an exact MPS representation: $\\chi_{\\min} \\ge 2$.\nIn Part 1, we constructed an exact MPS representation with $\\chi=2$. Combining the lower bound with this explicit construction, we conclude that the minimal required bond dimension is precisely $\\chi=2$. This holds for any chain length $N \\geq 2$.\n\n**3. Normalization Verification**\n\nWe will verify that our constructed MPS is normalized, $\\langle \\psi | \\psi \\rangle = 1$, by directly evaluating the norm via tensor contraction. The squared norm is:\n$$\\langle \\psi | \\psi \\rangle = \\sum_{\\{s_1, \\dots, s_N\\}} \\left| \\boldsymbol{\\ell}^{\\mathsf{T}} A^{[1]s_1} \\cdots A^{[N]s_N} \\boldsymbol{r} \\right|^2$$\nSince our tensors and vectors are real, we can write this as:\n$$\\langle \\psi | \\psi \\rangle = \\sum_{\\{s_1, \\dots, s_N\\}} \\left( \\boldsymbol{\\ell}^{\\mathsf{T}} A^{[1]s_1} \\cdots A^{[N]s_N} \\boldsymbol{r} \\right) \\left( \\boldsymbol{r}^{\\mathsf{T}} (A^{[N]s_N})^{\\mathsf{T}} \\cdots (A^{[1]s_1})^{\\mathsf{T}} \\boldsymbol{\\ell} \\right)$$\nRearranging the terms, we get a contraction that can be evaluated sequentially:\n$$\\langle \\psi | \\psi \\rangle = \\boldsymbol{r}^{\\mathsf{T}} \\left( \\sum_{s_N} (A^{[N]s_N})^{\\mathsf{T}} \\cdots \\left( \\sum_{s_1} (A^{[1]s_1})^{\\mathsf{T}} (\\boldsymbol{\\ell} \\boldsymbol{\\ell}^{\\mathsf{T}}) A^{[1]s_1} \\right) \\cdots A^{[N]s_N} \\right) \\boldsymbol{r}$$\nLet us define a sequence of matrices $M_i$ generated by this iterative procedure. Let $M_0 = \\boldsymbol{\\ell} \\boldsymbol{\\ell}^{\\mathsf{T}}$ and $M_i = \\sum_{s_i} (A^{[i]s_i})^{\\mathsf{T}} M_{i-1} A^{[i]s_i}$ for $i=1, \\dots, N$.\nThe initial matrix is:\n$$M_0 = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} (1 \\quad 1) = \\begin{pmatrix} 1 & 1 \\\\ 1 & 1 \\end{pmatrix}$$\nFor the first site, we compute $M_1$:\n$$M_1 = (A^{[1]0})^{\\mathsf{T}} M_0 A^{[1]0} + (A^{[1]1})^{\\mathsf{T}} M_0 A^{[1]1}$$\n$$M_1 = \\begin{pmatrix} 1 & 0 \\\\ 0 & 0 \\end{pmatrix} \\begin{pmatrix} 1 & 1 \\\\ 1 & 1 \\end{pmatrix} \\begin{pmatrix} 1 & 0 \\\\ 0 & 0 \\end{pmatrix} + \\begin{pmatrix} 0 & 0 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} 1 & 1 \\\\ 1 & 1 \\end{pmatrix} \\begin{pmatrix} 0 & 0 \\\\ 0 & 1 \\end{pmatrix}$$\n$$M_1 = \\begin{pmatrix} 1 & 0 \\\\ 0 & 0 \\end{pmatrix} + \\begin{pmatrix} 0 & 0 \\\\ 0 & 1 \\end{pmatrix} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = I_2$$\nwhere $I_2$ is the $2 \\times 2$ identity matrix.\nNow, for any subsequent site $i>1$, we have $M_{i-1} = I_2$. The recursion becomes:\n$$M_i = \\sum_{s_i} (A^{[i]s_i})^{\\mathsf{T}} I_2 A^{[i]s_i} = (A^{[i]0})^{\\mathsf{T}} A^{[i]0} + (A^{[i]1})^{\\mathsf{T}} A^{[i]1}$$\nSince $A^{[i]0}$ and $A^{[i]1}$ are real and symmetric projectors, this simplifies to:\n$$M_i = (A^{[i]0})^2 + (A^{[i]1})^2 = \\begin{pmatrix} 1 & 0 \\\\ 0 & 0 \\end{pmatrix} + \\begin{pmatrix} 0 & 0 \\\\ 0 & 1 \\end{pmatrix} = I_2$$\nBy induction, $M_N = I_2$. The total norm is then given by contracting the final matrix $M_N$ with the right boundary vector:\n$$\\langle \\psi | \\psi \\rangle = \\boldsymbol{r}^{\\mathsf{T}} M_N \\boldsymbol{r} = \\boldsymbol{r}^{\\mathsf{T}} I_2 \\boldsymbol{r} = \\boldsymbol{r}^{\\mathsf{T}} \\boldsymbol{r}$$\n$$\\langle \\psi | \\psi \\rangle = \\left(\\frac{1}{\\sqrt{2}} \\quad \\frac{1}{\\sqrt{2}}\\right) \\begin{pmatrix} \\frac{1}{\\sqrt{2}} \\\\ \\frac{1}{\\sqrt{2}} \\end{pmatrix} = \\left(\\frac{1}{\\sqrt{2}}\\right)^2 + \\left(\\frac{1}{\\sqrt{2}}\\right)^2 = \\frac{1}{2} + \\frac{1}{2} = 1$$\nThe normalization is confirmed.\nThe complete analysis demonstrates that the minimal bond dimension required to represent the GHZ state for any $N \\geq 2$ is $2$.", "answer": "$$\\boxed{2}$$", "id": "2385333"}, {"introduction": "The power of DMRG lies not only in its ability to compactly represent certain quantum states but also in the efficiency of the algorithm used to find them. This final practice moves from representation to computation, focusing on the algorithmic complexity of a DMRG sweep [@problem_id:2385302]. By analyzing a simplified cost model, you will verify the famous polynomial scaling of DMRG's computational cost with bond dimension, $O(\\chi^3)$, and its linear scaling with system size, $O(L)$, cementing your understanding of what makes this method a workhorse of computational many-body physics.", "problem": "Design and implement a complete and runnable program that empirically verifies the computational cost scaling of a single Density Matrix Renormalization Group (DMRG) sweep with respect to the bond dimension $\\chi$ and the system size $L$ for an open one-dimensional chain with fixed local physical dimension $d$. The verification must be based on first-principles counting of scalar multiplications required by the dominant linear-algebra operations in a two-site DMRG update.\n\nConsider a two-site DMRG sweep across an open chain of length $L$ with $L-1$ bonds. In a typical two-site update, the dominant cost on each bond arises from applying an effective operator to the two-site tensor, which can be represented as two dense matrix multiplications of square matrices of dimension $k \\times k$ with $k = \\chi d$. The number of scalar multiplications for one dense matrix product of shape $k \\times k$ times $k \\times k$ is $k^3$. Therefore, using only first principles, the total number of scalar multiplications for one sweep is\n$$\nC(\\chi, L, d) = 2 \\,(L-1)\\, (\\chi d)^3,\n$$\nwhere the factor $2$ accounts for two such dense products per bond. This model isolates the scaling with $\\chi$ and $L$ for fixed $d$.\n\nYour program must:\n- Use the above cost model to compute exact scalar multiplication counts (no timing measurements are permitted or required).\n- Treat the local physical dimension as fixed at $d = 2$.\n- For each test group below, compute the required quantities and aggregate all results into a single line as specified.\n\nTest suite:\n1. Chi-scaling test:\n   - Fix $L = 50$ and $d = 2$. Consider the set $\\{\\chi\\} = \\{4, 6, 8, 12\\}$.\n   - For these $\\chi$ values, compute $C(\\chi, L, d)$ and estimate the scaling exponent $\\alpha$ defined by the relation $C(\\chi, L, d) \\propto \\chi^{\\alpha}$ with $L$ and $d$ held fixed.\n   - Report $\\alpha$ as a floating-point number.\n\n2. System-size scaling test:\n   - Fix $\\chi = 16$ and $d = 2$. Consider the set $\\{L\\} = \\{8, 16, 32, 64, 128\\}$.\n   - For these $L$ values, compute $C(\\chi, L, d)$ and estimate the scaling exponent $\\beta$ defined by the relation $C(\\chi, L, d) \\propto (L-1)^{\\beta}$ with $\\chi$ and $d$ held fixed.\n   - Report $\\beta$ as a floating-point number.\n\n3. Ratio checks at fixed parameters:\n   - With $d = 2$, $L_0 = 64$ and $\\chi_0 = 10$, compute the ratio\n     $$\n     R_{\\chi} = \\frac{C(2\\chi_0, L_0, d)}{C(\\chi_0, L_0, d)}.\n     $$\n   - With $d = 2$, $\\chi_0 = 10$ and $L_0 = 64$, compute the ratio\n     $$\n     R_{L} = \\frac{C(\\chi_0, 2L_0, d)}{C(\\chi_0, L_0, d)}.\n     $$\n   - Report $R_{\\chi}$ and $R_{L}$ as floating-point numbers.\n\n4. Boundary-condition edge case:\n   - With $d = 2$, $\\chi = 7$, and $L = 2$, report the normalized count\n     $$\n     c_{\\mathrm{edge}} = \\frac{C(\\chi, L, d)}{(\\chi d)^3}.\n     $$\n   - Report $c_{\\mathrm{edge}}$ as a floating-point number.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets in the following order:\n  $[\\alpha, \\beta, R_{\\chi}, R_{L}, c_{\\mathrm{edge}}]$.\n- Each entry must be a floating-point number rounded to six decimal places.\n- No other output is permitted.", "solution": "The problem as stated is a well-defined exercise in computational algorithm analysis. It is predicated on the established principles of the Density Matrix Renormalization Group (DMRG) method and presents a clear, self-contained set of tasks. The provided cost model is a correct, standard-form simplification used for analyzing the dominant scaling behavior of the algorithm. All necessary parameters are specified, and the objectives are unambiguous. Therefore, the problem is deemed valid, and we shall proceed with its solution.\n\nThe fundamental quantity is the computational cost, measured in scalar multiplications, for a single two-site DMRG sweep. The model is given by the formula:\n$$\nC(\\chi, L, d) = 2 \\,(L-1)\\, (\\chi d)^3\n$$\nHere, $\\chi$ is the bond dimension, $L$ is the system size (number of sites), and $d$ is the local physical dimension. For all parts of this problem, the physical dimension is fixed at $d=2$. This simplifies our specific cost function to:\n$$\nC(\\chi, L) = 2 \\,(L-1)\\, (2\\chi)^3 = 16 (L-1) \\chi^3\n$$\nThis function forms the precise basis for all subsequent analysis. We shall address each task systematically based on this equation.\n\n**1. Chi-scaling exponent $\\alpha$**\nThe task is to empirically verify the scaling relation $C(\\chi, L, d) \\propto \\chi^{\\alpha}$ for a fixed system size $L=50$ and dimension $d=2$. Under these constraints, the cost function becomes:\n$$\nC(\\chi) = 16 (50-1) \\chi^3 = 784 \\chi^3\n$$\nThis is a direct power-law relationship. To determine the exponent $\\alpha$ from this functional form, we can employ a logarithmic analysis. Taking the natural logarithm of both sides yields:\n$$\n\\ln(C(\\chi)) = \\ln(784) + 3 \\ln(\\chi)\n$$\nThis equation is of the form $y = c + mx$, where $y = \\ln(C(\\chi))$, $x = \\ln(\\chi)$, the intercept is $c = \\ln(784)$, and the slope is $m = \\alpha$. From direct inspection of the analytical form, the exponent is exactly $\\alpha=3$. Although the problem requests an estimation from a set of points, any correct numerical estimation on data generated from this exact formula must yield $\\alpha = 3.0$. We will use the provided set $\\{\\chi\\} = \\{4, 6, 8, 12\\}$ to compute the corresponding costs $C(\\chi)$. A linear regression performed on the log-transformed data points $(\\ln(\\chi_i), \\ln(C_i))$ will give the slope, which is our estimate for $\\alpha$. Due to the exact nature of the data, the fit will yield $\\alpha = 3.0$.\n\n**2. System-size scaling exponent $\\beta$**\nWe must verify the relation $C(\\chi, L, d) \\propto (L-1)^{\\beta}$ for a fixed bond dimension $\\chi=16$ and $d=2$. In this case, the cost function is:\n$$\nC(L) = 16 (L-1) (16)^3 = 16 \\cdot 4096 \\cdot (L-1) = 65536 (L-1)\n$$\nThis demonstrates a linear dependence on the term $(L-1)$. The power-law relationship is with respect to the variable $(L-1)$. To find the exponent $\\beta$, we again use a logarithmic analysis:\n$$\n\\ln(C(L)) = \\ln(65536) + 1 \\cdot \\ln(L-1)\n$$\nThis shows a linear relationship between $\\ln(C(L))$ and $\\ln(L-1)$. The slope of this line is the exponent $\\beta$. By inspection, the exponent is exactly $\\beta=1$. A numerical estimation using linear regression on the log-transformed data pairs $(\\ln(L_i-1), \\ln(C_i))$ for the given set $\\{L\\} = \\{8, 16, 32, 64, 128\\}$ must result in $\\beta=1.0$.\n\n**3. Ratio checks at fixed parameters**\nThese calculations are direct applications of the derived cost formula. First, we compute the ratio $R_{\\chi}$ with parameters $d=2$, $L_0=64$, and $\\chi_0=10$:\n$$\nR_{\\chi} = \\frac{C(2\\chi_0, L_0, d)}{C(\\chi_0, L_0, d)} = \\frac{16(L_0-1)(2\\chi_0)^3}{16(L_0-1)(\\chi_0)^3} = \\frac{8\\chi_0^3}{\\chi_0^3} = 8\n$$\nThe result is precisely $8$, reflecting the cubic scaling with bond dimension $\\chi$. Note that the result is independent of the specific values of $L_0$ and $\\chi_0$. The value to report is $8.0$.\n\nSecond, we compute the ratio $R_{L}$ with $d=2$, $\\chi_0=10$, and $L_0=64$:\n$$\nR_{L} = \\frac{C(\\chi_0, 2L_0, d)}{C(\\chi_0, L_0, d)} = \\frac{16(2L_0-1)\\chi_0^3}{16(L_0-1)\\chi_0^3} = \\frac{2L_0-1}{L_0-1}\n$$\nSubstituting the value $L_0=64$:\n$$\nR_{L} = \\frac{2(64)-1}{64-1} = \\frac{128-1}{63} = \\frac{127}{63}\n$$\nThis evaluates to approximately $2.015873...$.\n\n**4. Boundary-condition edge case**\nFinally, we compute the normalized cost $c_{\\mathrm{edge}}$ for the minimal non-trivial system size, $L=2$, which corresponds to a chain with a single bond to update. The parameters are $d=2$, $\\chi=7$, and $L=2$:\n$$\nc_{\\mathrm{edge}} = \\frac{C(\\chi, L, d)}{(\\chi d)^3} = \\frac{2(L-1)(\\chi d)^3}{(\\chi d)^3} = 2(L-1)\n$$\nSubstituting $L=2$ gives:\n$$\nc_{\\mathrm{edge}} = 2(2-1) = 2\n$$\nThe result is exactly $2.0$. This factor of $2$ represents the two dominant matrix multiplications performed when updating the single bond in an $L=2$ chain.\n\nThe implementation will now programmatically perform these calculations and format the results as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes various scaling properties of a simplified DMRG cost model and\n    formats the results as specified in the problem statement.\n    \"\"\"\n    \n    # Define the cost function based on the problem statement.\n    # C(chi, L, d) = 2 * (L-1) * (chi * d)**3\n    def cost_function(chi: int, L: int, d: int) -> float:\n        \"\"\"Calculates the total number of scalar multiplications for one sweep.\"\"\"\n        if L < 2:\n            return 0.0\n        # Use floating point numbers to avoid potential integer overflow with large inputs,\n        # although for the given test cases it is not strictly necessary.\n        return 2.0 * float(L - 1) * (float(chi) * float(d))**3\n\n    results = []\n    d_fixed = 2\n\n    # --- Test 1: Chi-scaling test ---\n    L_alpha = 50\n    chi_values_alpha = np.array([4, 6, 8, 12])\n    \n    # Calculate costs for the given chi values\n    costs_alpha = np.array([cost_function(chi, L_alpha, d_fixed) for chi in chi_values_alpha])\n    \n    # Perform a linear fit on the log-log data to estimate the exponent alpha.\n    # The model is C ~ chi^alpha, so log(C) ~ alpha * log(chi) + const.\n    log_chi = np.log(chi_values_alpha)\n    log_costs_alpha = np.log(costs_alpha)\n    \n    # np.polyfit for degree 1 returns [slope, intercept]\n    alpha_fit = np.polyfit(log_chi, log_costs_alpha, 1)[0]\n    results.append(alpha_fit)\n\n    # --- Test 2: System-size scaling test ---\n    chi_beta = 16\n    L_values_beta = np.array([8, 16, 32, 64, 128])\n    \n    # Calculate costs for the given L values\n    costs_beta = np.array([cost_function(chi_beta, L, d_fixed) for L in L_values_beta])\n    \n    # Perform a linear fit on log(C) vs log(L-1) to find beta.\n    # The model is C ~ (L-1)^beta, so log(C) ~ beta * log(L-1) + const.\n    log_L_minus_1 = np.log(L_values_beta - 1)\n    log_costs_beta = np.log(costs_beta)\n    \n    beta_fit = np.polyfit(log_L_minus_1, log_costs_beta, 1)[0]\n    results.append(beta_fit)\n\n    # --- Test 3: Ratio checks at fixed parameters ---\n    L0 = 64\n    chi0 = 10\n    \n    # Calculate R_chi = C(2*chi0, L0, d) / C(chi0, L0, d)\n    cost_numerator_chi = cost_function(2 * chi0, L0, d_fixed)\n    cost_denominator_chi = cost_function(chi0, L0, d_fixed)\n    R_chi = cost_numerator_chi / cost_denominator_chi\n    results.append(R_chi)\n\n    # Calculate R_L = C(chi0, 2*L0, d) / C(chi0, L0, d)\n    cost_numerator_L = cost_function(chi0, 2 * L0, d_fixed)\n    cost_denominator_L = cost_function(chi0, L0, d_fixed)\n    R_L = cost_numerator_L / cost_denominator_L\n    results.append(R_L)\n    \n    # --- Test 4: Boundary-condition edge case ---\n    chi_edge = 7\n    L_edge = 2\n    \n    # Calculate c_edge = C(chi, L, d) / (chi * d)^3\n    cost_edge = cost_function(chi_edge, L_edge, d_fixed)\n    normalized_cost_edge = cost_edge / (chi_edge * d_fixed)**3\n    results.append(normalized_cost_edge)\n\n    # Final print statement in the exact required format.\n    # Each entry must be a floating-point number rounded to six decimal places.\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2385302"}]}