{"hands_on_practices": [{"introduction": "The tight-binding model provides a powerful framework for understanding the energy bands of crystals. A natural first step in exploring this model is to move beyond static band structures and ask: how does an electron actually move through the lattice? This practice challenges you to simulate the time evolution of a quantum wave packet, providing a direct, visual demonstration of fundamental concepts like group velocity and dispersion, which are encoded in the band structure $E(\\mathbf{k})$ [@problem_id:2446520]. By using the Fast Fourier Transform (FFT) to efficiently solve the time-dependent Schrödinger equation, you will build a foundational tool for quantum dynamics and see how theory translates into motion.", "problem": "Consider a one-dimensional ($1$D) ring of $N$ atomic sites described by the nearest-neighbor tight-binding (TB) Hamiltonian with periodic boundary conditions. The Hamiltonian acts on a single-particle wave function $\\lvert \\psi(t) \\rangle$ and is defined on the site basis $\\lvert n \\rangle$ (with $n \\in \\{0,1,\\dots,N-1\\}$ and $\\lvert n+N \\rangle \\equiv \\lvert n \\rangle$) by\n$$\n\\hat{H} = -J \\sum_{n=0}^{N-1} \\left( \\lvert n \\rangle \\langle n+1 \\rvert + \\lvert n+1 \\rangle \\langle n \\rvert \\right),\n$$\nwhere $J>0$ is the hopping energy. The real-time evolution is governed by the time-dependent Schrödinger equation\n$$\ni \\hbar \\frac{d}{dt} \\lvert \\psi(t) \\rangle = \\hat{H} \\lvert \\psi(t) \\rangle.\n$$\nAt time $t=0$, the system is prepared in a normalized Gaussian wave packet in the site representation centered at site $n_0$ with width parameter $\\sigma$ and carrier wave vector $k_0$,\n$$\n\\psi_n(0) = \\mathcal{N} \\exp\\!\\left(-\\frac{(n-n_0)^2}{4 \\sigma^2}\\right) \\exp(i k_0 n),\n$$\nwhere $\\mathcal{N}$ is the normalization constant and $n \\in \\{0,1,\\dots,N-1\\}$. The probability at site $n$ is $P_n(t)=\\lvert \\psi_n(t) \\rvert^2$. Define the mean position and variance at time $t$ by\n$$\n\\langle n \\rangle_t = \\sum_{n=0}^{N-1} n\\, P_n(t), \\qquad\n\\mathrm{Var}(t) = \\sum_{n=0}^{N-1} \\left(n - \\langle n \\rangle_t \\right)^2 P_n(t).\n$$\nAssume the packet remains well localized and does not wrap around the ring for the parameter choices below, so the above definitions using the integer coordinate $n$ are valid.\n\nStarting only from the definitions above, from the time-dependent Schrödinger equation, and from the fact that a translationally invariant nearest-neighbor tight-binding chain has plane-wave eigenstates, derive an algorithm to compute the exact time evolution $\\lvert \\psi(t) \\rangle$ and to evaluate the dispersion of the wave packet. You must also obtain the analytical group velocity $v_g$ at a given wave vector $k$ by differentiating the single-particle band energy that follows from lattice translational invariance, and compare it to the numerically measured mean velocity over a finite time interval.\n\nImplement a program that, for each parameter set in the test suite below, computes two quantities:\n- The dispersion ratio $r = \\mathrm{Var}(t_\\mathrm{f}) / \\mathrm{Var}(0)$.\n- The absolute group-velocity error $\\Delta v = \\left| \\frac{\\langle n \\rangle_{t_\\mathrm{f}} - \\langle n \\rangle_{0}}{t_\\mathrm{f}} - v_g(k_0) \\right|$.\n\nConventions and units: use dimensionless lattice units with lattice spacing $a=1$ and reduced Planck constant $\\hbar=1$. Energies are measured in units of $J$, times in units of $\\hbar/J$, and positions in lattice sites. All angles, including $k_0$, must be in radians.\n\nYour program must produce a single line of output containing all results as a comma-separated list enclosed in square brackets, with the two numbers per test case flattened in order as $[r_1,\\Delta v_1,r_2,\\Delta v_2,\\dots]$. Each number must be rounded to six decimal places.\n\nTest suite (each tuple is $(N,J,\\sigma,k_0,t_\\mathrm{f})$; use $n_0 = \\lfloor N/2 \\rfloor$ in all cases; $k_0$ is in radians):\n- Case $1$ (general case): $(256, 1.0, 12.0, \\pi/3, 40.0)$.\n- Case $2$ (band-edge group velocity): $(256, 1.0, 12.0, 0.0, 40.0)$.\n- Case $3$ (narrow packet, stronger dispersion): $(256, 1.0, 2.0, \\pi/4, 40.0)$.\n- Case $4$ (different hopping, wide packet): $(512, 0.5, 20.0, \\pi/2, 60.0)$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, ordered as $[r_1,\\Delta v_1,r_2,\\Delta v_2,r_3,\\Delta v_3,r_4,\\Delta v_4]$, with each value rounded to six decimal places and unitless under the conventions specified above.", "solution": "The problem presented is a standard, well-posed exercise in computational quantum mechanics, specifically the simulation of wave packet dynamics in a one-dimensional tight-binding model. It is scientifically sound and provides all necessary information. We may therefore proceed directly to the derivation and implementation of a solution.\n\nThe core of the problem lies in solving the time-dependent Schrödinger equation (TDSE) for a given initial state. The Hamiltonian is time-independent, which permits a highly efficient and exact (to machine precision) solution method based on spectral decomposition. The TDSE is given as\n$$ i \\hbar \\frac{d}{dt} \\lvert \\psi(t) \\rangle = \\hat{H} \\lvert \\psi(t) \\rangle $$\nwith the lattice constant $a=1$ and $\\hbar=1$. The formal solution is\n$$ \\lvert \\psi(t) \\rangle = e^{-i \\hat{H} t} \\lvert \\psi(0) \\rangle $$\nwhere $e^{-i \\hat{H} t}$ is the time-evolution operator. Direct calculation of this matrix exponential is computationally prohibitive for large $N$. A more effective strategy is to work in the basis of the Hamiltonian's eigenstates, where the operator becomes diagonal.\n\nFirst, we diagonalize the Hamiltonian. The system is a ring of $N$ sites with periodic boundary conditions, implying translational invariance. As stated in the problem, the eigenstates of such a system are discrete plane waves, or Bloch states, given by\n$$ \\lvert \\phi_q \\rangle = \\frac{1}{\\sqrt{N}} \\sum_{n=0}^{N-1} e^{iqn} \\lvert n \\rangle $$\nThe periodic boundary condition, $\\lvert n+N \\rangle = \\lvert n \\rangle$, quantizes the allowed wave vectors $q$. For the wave function to be single-valued, we require $e^{iq(n+N)} = e^{iqn}$, which implies $e^{iqN} = 1$. The solutions are\n$$ q = \\frac{2\\pi m}{N}, \\qquad m \\in \\{0, 1, \\dots, N-1\\} $$\nTo find the energy eigenvalues $E(q)$ corresponding to these eigenstates, we apply the Hamiltonian $\\hat{H} = -J \\sum_{n} (\\lvert n \\rangle \\langle n+1 \\rvert + \\lvert n+1 \\rangle \\langle n \\rvert)$ to $\\lvert \\phi_q \\rangle$:\n$$ \\hat{H} \\lvert \\phi_q \\rangle = \\frac{-J}{\\sqrt{N}} \\sum_{n=0}^{N-1} e^{iqn} \\left( \\lvert n+1 \\rangle + \\lvert n-1 \\rangle \\right) $$\nBy re-indexing the sums, we find\n$$ \\hat{H} \\lvert \\phi_q \\rangle = \\frac{-J}{\\sqrt{N}} \\sum_{n=0}^{N-1} \\left( e^{iq(n-1)} + e^{iq(n+1)} \\right) \\lvert n \\rangle = -J(e^{-iq} + e^{iq}) \\frac{1}{\\sqrt{N}} \\sum_{n=0}^{N-1} e^{iqn} \\lvert n \\rangle $$\nThis simplifies to the eigenvalue equation $\\hat{H} \\lvert \\phi_q \\rangle = E(q) \\lvert \\phi_q \\rangle$, with the energy dispersion relation:\n$$ E(q) = -2J \\cos(q) $$\n\nWith the complete set of eigenstates $\\lvert \\phi_q \\rangle$ and eigenvalues $E(q)$, we can express the time evolution. Any state vector can be expanded in this basis. The initial state $\\lvert \\psi(0) \\rangle = \\sum_{n=0}^{N-1} \\psi_n(0) \\lvert n \\rangle$ is projected onto the eigenbasis:\n$$ \\lvert \\psi(0) \\rangle = \\sum_q c_q(0) \\lvert \\phi_q \\rangle $$\nwhere the coefficients $c_q(0)$ are given by the overlap $c_q(0) = \\langle \\phi_q \\lvert \\psi(0) \\rangle$. Substituting the expressions for the states, we get\n$$ c_q(0) = \\frac{1}{\\sqrt{N}} \\sum_{n=0}^{N-1} e^{-iqn} \\psi_n(0) $$\nThis expression is, up to a normalization factor, the Discrete Fourier Transform (DFT) of the initial wave function components $\\psi_n(0)$. The time evolution of these coefficients is simple:\n$$ c_q(t) = c_q(0) e^{-iE(q)t} $$\nTo obtain the wave function in the site basis at time $t$, $\\lvert \\psi(t) \\rangle = \\sum_n \\psi_n(t) \\lvert n \\rangle$, we perform the inverse transformation:\n$$ \\psi_n(t) = \\langle n \\lvert \\psi(t) \\rangle = \\sum_q \\langle n \\lvert \\phi_q \\rangle c_q(t) = \\frac{1}{\\sqrt{N}} \\sum_q e^{iqn} c_q(t) $$\nThis is an Inverse Discrete Fourier Transform (IDFT).\n\nThe algorithm for computing $\\lvert \\psi(t) \\rangle$ is therefore as follows:\n1.  Construct the initial state vector $[\\psi_n(0)]$ for $n \\in \\{0, 1, \\dots, N-1\\}$. The given form is $\\psi_n(0) = \\mathcal{N} \\exp(- (n-n_0)^2 / (4\\sigma^2) ) \\exp(ik_0n)$, where $\\mathcal{N}$ is a constant chosen such that $\\sum_n |\\psi_n(0)|^2 = 1$.\n2.  Compute the DFT of $[\\psi_n(0)]$ to obtain the momentum-space coefficients $[\\tilde{\\psi}_q(0)]$. Computationally, this is done using a Fast Fourier Transform (FFT) algorithm.\n3.  For each $q$, calculate the energy $E(q) = -2J \\cos(q)$. The set of wave vectors $\\{q\\}$ corresponds to the frequencies used by the FFT algorithm.\n4.  Evolve the momentum-space wave function: $[\\tilde{\\psi}_q(t)] = [\\tilde{\\psi}_q(0)] \\odot [e^{-iE(q)t}]$, where $\\odot$ denotes element-wise multiplication.\n5.  Compute the IDFT (via an Inverse FFT) of $[\\tilde{\\psi}_q(t)]$ to obtain the final state vector $[\\psi_n(t)]$.\n\nOnce the wave functions $\\psi_n(0)$ and $\\psi_n(t_\\mathrm{f})$ are known, we compute the required observables.\nThe probability at site $n$ is $P_n(t) = |\\psi_n(t)|^2$. The mean position $\\langle n \\rangle_t$ and variance $\\mathrm{Var}(t)$ are computed from their definitions:\n$$ \\langle n \\rangle_t = \\sum_{n=0}^{N-1} n P_n(t), \\quad \\mathrm{Var}(t) = \\sum_{n=0}^{N-1} (n - \\langle n \\rangle_t)^2 P_n(t) $$\nThe problem assumes no wrap-around, justifying these simple summation forms. The dispersion ratio is $r = \\mathrm{Var}(t_\\mathrm{f}) / \\mathrm{Var}(0)$.\n\nThe analytical group velocity $v_g$ of a wave packet with carrier momentum $k$ is given by the derivative of the dispersion relation, $v_g(k) = dE(k)/dk$. Here, we have\n$$ v_g(k) = \\frac{d}{dk}(-2J \\cos k) = 2J \\sin k $$\nWe evaluate this at the initial carrier wave vector $k_0$. The numerically measured mean velocity is calculated as the total displacement of the mean position divided by the elapsed time: $(\\langle n \\rangle_{t_\\mathrm{f}} - \\langle n \\rangle_0) / t_\\mathrm{f}$. The absolute error $\\Delta v$ is the magnitude of the difference between the numerical velocity and the analytical group velocity $v_g(k_0)$. This procedure will be applied to each parameter set provided.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the tight-binding wave packet dynamics problem\n    for a given set of test cases.\n    \"\"\"\n    # Test suite: (N, J, sigma, k0, tf)\n    # k0 is in radians.\n    test_cases = [\n        (256, 1.0, 12.0, np.pi/3, 40.0),\n        (256, 1.0, 12.0, 0.0, 40.0),\n        (256, 1.0, 2.0, np.pi/4, 40.0),\n        (512, 0.5, 20.0, np.pi/2, 60.0),\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        N, J, sigma, k0, tf = case\n        \n        # In dimensionless units, hbar=1, a=1.\n        \n        # 1. Construct the initial state\n        n0 = N // 2\n        n_coords = np.arange(N, dtype=float)\n        \n        # Position differences for Gaussian, using direct coordinates as per problem statement\n        # assuming no wrap-around for initial packet shape.\n        pos_diff = n_coords - n0\n        \n        # Unnormalized Gaussian wave packet\n        psi_n_0_un = np.exp(-pos_diff**2 / (4 * sigma**2)) * np.exp(1j * k0 * n_coords)\n        \n        # Normalize the wave function\n        norm_const = np.sqrt(np.sum(np.abs(psi_n_0_un)**2))\n        psi_n_0 = psi_n_0_un / norm_const\n        \n        # 2. Calculate initial observables\n        P_n_0 = np.abs(psi_n_0)**2\n        # Ensure probability is normalized to 1, guarding against floating point dust\n        P_n_0 /= np.sum(P_n_0)\n        \n        mean_n_0 = np.sum(n_coords * P_n_0)\n        var_0 = np.sum((n_coords - mean_n_0)**2 * P_n_0)\n\n        # 3. Time evolution using split-step Fourier method\n        # a. Go to momentum space\n        psi_q_0 = np.fft.fft(psi_n_0)\n        \n        # b. Define momentum grid and energy dispersion\n        # np.fft.fftfreq provides the correct frequencies for np.fft.fft\n        # d=1 corresponds to lattice spacing a=1\n        q_vals = 2 * np.pi * np.fft.fftfreq(N, d=1.0)\n        E_q = -2 * J * np.cos(q_vals)\n        \n        # c. Evolve in momentum space\n        time_evolution_operator = np.exp(-1j * E_q * tf)\n        psi_q_tf = psi_q_0 * time_evolution_operator\n        \n        # d. Go back to position space\n        psi_n_tf = np.fft.ifft(psi_q_tf)\n        \n        # 4. Calculate final observables\n        P_n_tf = np.abs(psi_n_tf)**2\n        P_n_tf /= np.sum(P_n_tf)\n        \n        mean_n_tf = np.sum(n_coords * P_n_tf)\n        var_tf = np.sum((n_coords - mean_n_tf)**2 * P_n_tf)\n        \n        # 5. Calculate required quantities\n        # a. Dispersion ratio r\n        if var_0 == 0:\n            # This case should not happen for sigma > 0\n            r = np.inf if var_tf > 0 else 1.0\n        else:\n            r = var_tf / var_0\n            \n        # b. Group velocity error Delta_v\n        # Analytical group velocity\n        vg_analytical = 2 * J * np.sin(k0)\n        \n        # Numerical group velocity\n        if tf == 0:\n            v_numerical = 0.0 # No motion if no time has passed\n        else:\n            v_numerical = (mean_n_tf - mean_n_0) / tf\n            \n        delta_v = np.abs(v_numerical - vg_analytical)\n        \n        results.extend([r, delta_v])\n\n    # Final print statement in the exact required format.\n    # Format each result to six decimal places.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2446520"}, {"introduction": "While perfect crystals are a useful theoretical starting point, real materials are never perfect. This practice moves from idealized infinite lattices to finite systems containing defects, which can dramatically alter local electronic properties. You will learn to model a simple but crucial defect—a vacancy—and calculate its impact on the Local Density of States (LDOS), a key quantity that connects theory to experimental probes [@problem_id:2446549]. This exercise teaches the practical skill of constructing and diagonalizing real-space Hamiltonians to compute measurable observables.", "problem": "Consider a two-dimensional square lattice described by a nearest-neighbor tight-binding Hamiltonian with open boundary conditions. Let the lattice have linear size $N$, so the total number of sites in the pristine system is $N^{2}$. Let the on-site energy be $\\varepsilon_{i}=0$ for all sites, and the nearest-neighbor hopping amplitude be $t>0$. Work in energy units where $t=1$, and adopt a zero-based coordinate system for lattice sites $(x,y)$ with $x\\in\\{0,\\dots,N-1\\}$ and $y\\in\\{0,\\dots,N-1\\}$. The second-quantized Hamiltonian is\n$$\n\\hat{H}=\\sum_{i}\\varepsilon_{i}\\,\\hat{c}_{i}^{\\dagger}\\hat{c}_{i}-t\\sum_{\\langle i,j\\rangle}\\left(\\hat{c}_{i}^{\\dagger}\\hat{c}_{j}+\\hat{c}_{j}^{\\dagger}\\hat{c}_{i}\\right),\n$$\nwith $\\varepsilon_{i}=0$ and open boundary conditions (no wrap-around neighbors). Introduce a single vacancy defect by removing the site at coordinates $(x_{v},y_{v})$ entirely from the Hilbert space (equivalently, in the limit of an infinite on-site potential at that site). Define the Local Density of States (LDOS) at site $r$ and energy $E$ as\n$$\n\\rho_{r}(E)=\\sum_{n}\\left|\\psi_{n}(r)\\right|^{2}\\,\\delta\\!\\left(E-E_{n}\\right),\n$$\nwhere $E_{n}$ and $\\psi_{n}(r)$ are the eigenvalues and normalized eigenstate amplitudes of the single-particle Hamiltonian, respectively. To obtain a numerically well-defined value, regularize the Dirac delta function by a normalized Lorentzian of half-width at half-maximum $\\eta>0$,\n$$\n\\delta(E)\\;\\to\\;\\delta_{\\eta}(E)=\\frac{1}{\\pi}\\frac{\\eta}{E^{2}+\\eta^{2}}.\n$$\nFor a given set of parameters $(N,E,\\eta,(x_{v},y_{v}),(x_{p},y_{p}))$, where $(x_{p},y_{p})$ is a probe site distinct from the vacancy, compute the difference in LDOS at the probe site between the defective lattice and the pristine lattice,\n$$\n\\Delta\\rho(E)\\equiv \\rho^{\\text{defect}}_{(x_{p},y_{p})}(E)-\\rho^{\\text{pristine}}_{(x_{p},y_{p})}(E),\n$$\nwith energies expressed in units of $t$.\n\nYour task is to write a complete, runnable program that, for each test case below, constructs the appropriate Hamiltonian matrices (pristine and with the vacancy removed), computes the LDOS at the specified probe site and energy with Lorentzian broadening $\\eta$, and outputs $\\Delta\\rho(E)$ as a floating-point number.\n\nUse the following test suite. All coordinates are zero-based. All energies are in units of $t$ with $t=1$. The broadening $\\eta$ is a positive real number in the same energy units.\n\n- Test case 1: $(N=10, E=0.0, \\eta=0.05, (x_{v},y_{v})=(5,5), (x_{p},y_{p})=(5,4))$.\n- Test case 2: $(N=10, E=3.9, \\eta=0.05, (x_{v},y_{v})=(1,1), (x_{p},y_{p})=(8,8))$.\n- Test case 3: $(N=6, E=5.0, \\eta=0.05, (x_{v},y_{v})=(2,3), (x_{p},y_{p})=(2,2))$.\n- Test case 4: $(N=8, E=0.0, \\eta=0.05, (x_{v},y_{v})=(0,0), (x_{p},y_{p})=(1,0))$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with each floating-point result rounded to exactly six decimal places and ordered to correspond to the test cases above. For example, the output must have the form\n$$\n[\\Delta\\rho_{1},\\Delta\\rho_{2},\\Delta\\rho_{3},\\Delta\\rho_{4}],\n$$\nwhere each $\\Delta\\rho_{k}$ is rounded to six decimal places.", "solution": "The problem posed is a standard, well-defined exercise in computational condensed matter physics. It is scientifically sound, contains all necessary information, and is free of contradictions or ambiguities. It is therefore deemed valid. We shall proceed with its solution.\n\nThe objective is to compute the change in the Local Density of States (LDOS), denoted $\\Delta\\rho(E)$, at a specific probe site $(x_{p},y_{p})$ due to the introduction of a single vacancy at site $(x_{v},y_{v})$ in a two-dimensional square lattice. The quantity is defined as:\n$$\n\\Delta\\rho(E) \\equiv \\rho^{\\text{defect}}_{(x_{p},y_{p})}(E) - \\rho^{\\text{pristine}}_{(x_{p},y_{p})}(E)\n$$\nThe analysis requires separate treatments for the pristine and defective systems.\n\nFirst, we must construct the single-particle Hamiltonian matrix for a square lattice of size $N \\times N$. The sites are indexed by coordinates $(x,y)$, where $x, y \\in \\{0, 1, \\dots, N-1\\}$. For a matrix representation, we map these two-dimensional coordinates to a one-dimensional index $i$. A standard row-major mapping is used:\n$$\ni(x,y) = y \\cdot N + x\n$$\nThe total number of sites is $N^2$, so the index $i$ runs from $0$ to $N^2-1$. The Hamiltonian is given by:\n$$\n\\hat{H} = \\sum_{i}\\varepsilon_{i}\\,\\hat{c}_{i}^{\\dagger}\\hat{c}_{i} - t\\sum_{\\langle i,j\\rangle}\\left(\\hat{c}_{i}^{\\dagger}\\hat{c}_{j} + \\hat{c}_{j}^{\\dagger}\\hat{c}_{i}\\right)\n$$\nIn the single-particle basis, the matrix elements $H_{ij}$ are given by $\\langle i | \\hat{H} | j \\rangle$. With on-site energies $\\varepsilon_i = 0$ and hopping amplitude $t=1$, the matrix elements are:\n$$\nH_{ij} =\n\\begin{cases}\n0 & \\text{if } i = j \\\\\n-1 & \\text{if sites } i \\text{ and } j \\text{ are nearest neighbors} \\\\\n0 & \\text{otherwise}\n\\end{cases}\n$$\nThis defines the pristine Hamiltonian matrix, $H^{\\text{pristine}}$, which is a real, symmetric $N^2 \\times N^2$ matrix.\n\nNext, we consider the system with a vacancy at $(x_v, y_v)$. This defect is modeled by removing the corresponding site from the Hilbert space. If the index of the vacancy site is $v_{\\text{idx}} = y_v \\cdot N + x_v$, the defective Hamiltonian, $H^{\\text{defect}}$, is obtained by deleting the $v_{\\text{idx}}$-th row and $v_{\\text{idx}}$-th column from $H^{\\text{pristine}}$. The resulting matrix is of size $(N^2-1) \\times (N^2-1)$.\n\nThe LDOS at a probe site with index $p$ and energy $E$ is given by the regularized formula:\n$$\n\\rho_{p}(E) = \\sum_{n} |\\psi_{n}(p)|^2 \\frac{1}{\\pi} \\frac{\\eta}{(E-E_n)^2 + \\eta^2}\n$$\nwhere $E_n$ are the eigenvalues and $\\psi_n(p)$ is the amplitude of the $n$-th normalized eigenvector at site $p$. To compute this, we must diagonalize the respective Hamiltonian matrix.\n\nFor the pristine system:\n$1$. Construct the $N^2 \\times N^2$ matrix $H^{\\text{pristine}}$.\n$2$. Numerically solve the eigenvalue problem $H^{\\text{pristine}}\\psi_n = E_n \\psi_n$ to obtain the set of eigenvalues $\\{E_n\\}$ and the corresponding matrix of eigenvectors $\\Psi$, where the $n$-th column is the vector $\\psi_n$.\n$3$. Identify the index of the probe site, $p_{\\text{idx}} = y_p \\cdot N + x_p$.\n$4$. The squared amplitudes $|\\psi_n(p_{\\text{idx}})|^2$ are the squares of the elements in the $p_{\\text{idx}}$-th row of the eigenvector matrix $\\Psi$.\n$5$. Compute $\\rho^{\\text{pristine}}_{(x_p,y_p)}(E)$ using the formula.\n\nFor the defective system:\n$1$. Construct the $(N^2-1) \\times (N^2-1)$ matrix $H^{\\text{defect}}$ by removing the row and column corresponding to the vacancy index $v_{\\text{idx}} = y_v \\cdot N + x_v$ from $H^{\\text{pristine}}$.\n$2$. Solve the eigenvalue problem for $H^{\\text{defect}}$ to get eigenvalues $\\{E'_m\\}$ and eigenvectors $\\{\\psi'_m\\}$.\n$3$. The index of the probe site in the defective system's basis, $p'_{\\text{idx}}$, must be adjusted. If $p_{\\text{idx}} > v_{\\text{idx}}$, then $p'_{\\text{idx}} = p_{\\text{idx}} - 1$. Otherwise, if $p_{\\text{idx}} < v_{\\text{idx}}$, then $p'_{\\text{idx}} = p_{\\text{idx}}$. The case $p_{\\text{idx}} = v_{\\text{idx}}$ is excluded by the problem statement.\n$4$. Compute $\\rho^{\\text{defect}}_{(x_p,y_p)}(E)$ using the eigenvalues $\\{E'_m\\}$, eigenvector amplitudes $|\\psi'_m(p'_{\\text{idx}})|^2$, and the same energy $E$ and broadening $\\eta$.\n\nFinally, the difference $\\Delta\\rho(E)$ is calculated. The numerical implementation will utilize `numpy.linalg.eigh`, which is highly efficient for the diagonalization of real symmetric matrices. The summation for the LDOS can be computed efficiently using vectorized operations.\n\nThe computational procedure for each test case is as follows:\n$1$. Given $(N, E, \\eta, (x_v, y_v), (x_p, y_p))$.\n$2$. Build the pristine Hamiltonian $H^{\\text{pristine}}$.\n$3$. Diagonalize $H^{\\text{pristine}}$ and compute $\\rho^{\\text{pristine}}$.\n$4$. Build the defective Hamiltonian $H^{\\text{defect}}$.\n$5$. Diagonalize $H^{\\text{defect}}$ and compute $\\rho^{\\text{defect}}$.\n$6$. Calculate the difference $\\Delta\\rho(E) = \\rho^{\\text{defect}} - \\rho^{\\text{pristine}}$.\n\nThis methodology is applied to each test case provided in the problem statement.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for the given test cases.\n    It computes the change in Local Density of States (LDOS) for a 2D tight-binding model\n    with a single vacancy.\n    \"\"\"\n\n    test_cases = [\n        # (N, E, eta, (xv, yv), (xp, yp))\n        (10, 0.0, 0.05, (5, 5), (5, 4)),\n        (10, 3.9, 0.05, (1, 1), (8, 8)),\n        (6, 5.0, 0.05, (2, 3), (2, 2)),\n        (8, 0.0, 0.05, (0, 0), (1, 0)),\n    ]\n\n    results = []\n    for case in test_cases:\n        delta_ldos = calculate_delta_ldos(*case)\n        results.append(delta_ldos)\n\n    # Format the results as required: rounded to 6 decimal places.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\n\ndef calculate_ldos(hamiltonian, probe_idx, E, eta):\n    \"\"\"\n    Calculates the Local Density of States (LDOS) at a specific probe site.\n    \n    Args:\n        hamiltonian (np.ndarray): The single-particle Hamiltonian matrix.\n        probe_idx (int): The 1D index of the probe site.\n        E (float): The energy at which to calculate the LDOS.\n        eta (float): The Lorentzian broadening parameter.\n\n    Returns:\n        float: The calculated LDOS value.\n    \"\"\"\n    if hamiltonian.shape[0] == 0:\n        return 0.0\n\n    # Diagonalize the Hamiltonian. eigh is for Hermitian matrices.\n    eigenvalues, eigenvectors = np.linalg.eigh(hamiltonian)\n    \n    # Get the squared eigenvector amplitudes at the probe site for all eigenstates.\n    psi_p_sq = eigenvectors[probe_idx, :]**2\n    \n    # Calculate the Lorentzian term for each eigenvalue.\n    lorentzian_terms = eta / ((E - eigenvalues)**2 + eta**2)\n    \n    # Compute the LDOS by summing the contributions from all eigenstates.\n    ldos = (1.0 / math.pi) * np.sum(psi_p_sq * lorentzian_terms)\n    \n    return ldos\n\ndef build_hamiltonian(N, t=1.0):\n    \"\"\"\n    Builds the tight-binding Hamiltonian matrix for an N x N square lattice\n    with open boundary conditions.\n\n    Args:\n        N (int): The linear size of the lattice.\n        t (float): The nearest-neighbor hopping amplitude.\n\n    Returns:\n        np.ndarray: The N^2 x N^2 Hamiltonian matrix.\n    \"\"\"\n    num_sites = N * N\n    hamiltonian = np.zeros((num_sites, num_sites), dtype=float)\n    \n    for i in range(num_sites):\n        # Map 1D index 'i' back to 2D coordinates (x, y)\n        y = i // N\n        x = i % N\n        \n        # Hopping to the right neighbor (x+1, y)\n        if x + 1 < N:\n            j = i + 1\n            hamiltonian[i, j] = -t\n            hamiltonian[j, i] = -t\n            \n        # Hopping to the neighbor below (x, y+1)\n        if y + 1 < N:\n            j = i + N\n            hamiltonian[i, j] = -t\n            hamiltonian[j, i] = -t\n            \n    return hamiltonian\n\ndef calculate_delta_ldos(N, E, eta, vacancy_coords, probe_coords):\n    \"\"\"\n    Calculates the difference in LDOS between a defective and a pristine lattice.\n\n    Args:\n        N (int): Linear size of the lattice.\n        E (float): Energy for LDOS calculation.\n        eta (float): Lorentzian broadening.\n        vacancy_coords (tuple): (xv, yv) coordinates of the vacancy.\n        probe_coords (tuple): (xp, yp) coordinates of the probe site.\n\n    Returns:\n        float: The value of Delta_rho(E).\n    \"\"\"\n    # Hopping parameter t=1, on-site energy epsilon=0\n    t = 1.0\n\n    # --- Pristine System ---\n    H_pristine = build_hamiltonian(N, t)\n    \n    xp, yp = probe_coords\n    p_idx = yp * N + xp\n    \n    ldos_pristine = calculate_ldos(H_pristine, p_idx, E, eta)\n\n    # --- Defective System ---\n    xv, yv = vacancy_coords\n    v_idx = yv * N + xv\n    \n    # Create the defective Hamiltonian by removing the vacancy row and column\n    H_defect = np.delete(H_pristine, v_idx, axis=0)\n    H_defect = np.delete(H_defect, v_idx, axis=1)\n    \n    # Adjust the probe index for the smaller defective matrix\n    if p_idx > v_idx:\n        p_idx_defect = p_idx - 1\n    else: # p_idx < v_idx, as they cannot be equal\n        p_idx_defect = p_idx\n        \n    ldos_defect = calculate_ldos(H_defect, p_idx_defect, E, eta)\n    \n    # --- Calculate the difference ---\n    delta_ldos = ldos_defect - ldos_pristine\n    \n    return delta_ldos\n\nif __name__ == \"__main__\":\n    solve()\n\n```", "id": "2446549"}, {"introduction": "This capstone exercise will guide you to a frontier of modern condensed matter physics by computing a topological invariant. Some materials possess extraordinary electronic properties, such as dissipationless edge currents, that are protected by topology and are remarkably robust to defects. You will implement the famous Haldane model on a honeycomb lattice and compute its Chern number, a quantized integer that defines such a topological phase of matter [@problem_id:2446546]. This practice solidifies the concept of the Bloch Hamiltonian and introduces the profound idea of Berry curvature in a concrete computational setting.", "problem": "You are to write a complete program that constructs the Bloch Hamiltonian of the Haldane model on a honeycomb lattice and computes the Chern number of the lower-energy (occupied) band for specified parameter sets. All energies are in dimensionless tight-binding units, and angles must be in radians. The required final output is a single line containing the list of computed Chern numbers for the given test suite, formatted exactly as a comma-separated list enclosed in square brackets (e.g., \"[1,0,-1]\").\n\nThe Haldane model is a two-band tight-binding model defined on a honeycomb lattice, with a two-site basis labeled by sublattices $A$ and $B$. The model includes nearest-neighbor hopping of amplitude $t_1$, complex next-nearest-neighbor hopping of amplitude $t_2 e^{i \\phi}$ that breaks time-reversal symmetry without net magnetic flux per unit cell, and a sublattice-staggered on-site potential $M$ that breaks inversion symmetry.\n\nUse the following honeycomb geometry. Set the nearest-neighbor distance as the unit length. The three nearest-neighbor displacement vectors from sublattice $A$ to sublattice $B$ are\n$$\n\\boldsymbol{\\delta}_1 = (0,-1),\\quad\n\\boldsymbol{\\delta}_2 = \\left(\\frac{\\sqrt{3}}{2},\\frac{1}{2}\\right),\\quad\n\\boldsymbol{\\delta}_3 = \\left(-\\frac{\\sqrt{3}}{2},\\frac{1}{2}\\right).\n$$\nThe three next-nearest-neighbor displacement vectors connecting sites on the same sublattice are\n$$\n\\mathbf{a}_1 = \\boldsymbol{\\delta}_2 - \\boldsymbol{\\delta}_3 = (\\sqrt{3}, 0),\\quad\n\\mathbf{a}_2 = \\boldsymbol{\\delta}_3 - \\boldsymbol{\\delta}_1 = \\left(-\\frac{\\sqrt{3}}{2}, \\frac{3}{2}\\right),\\quad\n\\mathbf{a}_3 = \\boldsymbol{\\delta}_1 - \\boldsymbol{\\delta}_2 = \\left(-\\frac{\\sqrt{3}}{2}, -\\frac{3}{2}\\right).\n$$\nChoose primitive Bravais lattice vectors for the triangular Bravais lattice of the honeycomb structure as\n$$\n\\mathbf{R}_1 = \\mathbf{a}_1,\\quad \\mathbf{R}_2 = \\mathbf{a}_1 + \\mathbf{a}_2.\n$$\nDefine reciprocal lattice vectors $\\mathbf{G}_1$ and $\\mathbf{G}_2$ by the conditions\n$$\n\\mathbf{R}_i \\cdot \\mathbf{G}_j = 2\\pi \\delta_{ij}.\n$$\nA Bloch momentum $\\mathbf{k}$ lies in the first Brillouin zone defined by the parallelogram spanned by $\\mathbf{G}_1$ and $\\mathbf{G}_2$.\n\nIn the $(A,B)$ sublattice basis, the Bloch Hamiltonian $H(\\mathbf{k})$ is the $2\\times 2$ Hermitian matrix with elements\n$$\nH_{AA}(\\mathbf{k}) = M + 2 t_2 \\sum_{j=1}^{3} \\cos(\\phi)\\,\\cos(\\mathbf{k}\\cdot \\mathbf{a}_j) - 2 t_2 \\sum_{j=1}^{3} \\sin(\\phi)\\,\\sin(\\mathbf{k}\\cdot \\mathbf{a}_j),\n$$\n$$\nH_{BB}(\\mathbf{k}) = -M + 2 t_2 \\sum_{j=1}^{3} \\cos(\\phi)\\,\\cos(\\mathbf{k}\\cdot \\mathbf{a}_j) + 2 t_2 \\sum_{j=1}^{3} \\sin(\\phi)\\,\\sin(\\mathbf{k}\\cdot \\mathbf{a}_j),\n$$\n$$\nH_{AB}(\\mathbf{k}) = t_1 \\sum_{j=1}^{3} \\exp\\!\\left(i\\,\\mathbf{k}\\cdot \\boldsymbol{\\delta}_j\\right),\\qquad H_{BA}(\\mathbf{k}) = \\overline{H_{AB}(\\mathbf{k})}.\n$$\nLet $|u_-(\\mathbf{k})\\rangle$ denote the normalized occupied-band eigenvector of $H(\\mathbf{k})$ corresponding to its lower eigenvalue $E_-(\\mathbf{k})$.\n\nDefine the Chern number of the occupied band by\n$$\n\\mathcal{C} = \\frac{1}{2\\pi} \\int_{\\mathrm{BZ}} \\mathcal{F}_{12}(\\mathbf{k})\\, d^2 k,\n$$\nwhere $\\mathcal{F}_{12}(\\mathbf{k})$ is the Berry curvature built from $|u_-(\\mathbf{k})\\rangle$ and the integration is over the first Brillouin zone. Your program must compute a numerical approximation of $\\mathcal{C}$ and return it as an integer obtained by rounding to the nearest integer.\n\nAngles must be in radians. There are no physical units; all quantities are dimensionless.\n\nTest suite. For each line, the parameters are $(t_1, t_2, \\phi, M)$:\n- Case 1: $(1.0, 0.1, \\frac{\\pi}{2}, 0.0)$\n- Case 2: $(1.0, 0.1, \\frac{\\pi}{2}, 0.7)$\n- Case 3: $(1.0, 0.1, -\\frac{\\pi}{2}, 0.0)$\n- Case 4: $(1.0, 0.0, \\frac{\\pi}{3}, 0.0)$\n- Case 5: $(1.0, 0.2, 0.0, 0.1)$\n\nFinal output format. Your program should produce a single line of output containing the results for the cases in the stated order as a comma-separated list enclosed in square brackets, with each entry being the integer Chern number for the occupied band, for example, \"[c1,c2,c3,c4,c5]\".", "solution": "The problem requires the computation of the Chern number for the occupied band of the Haldane model on a honeycomb lattice. This will be accomplished by numerically integrating the Berry curvature over the first Brillouin zone (BZ).\n\nFirst, we validate the problem statement. All provided data, including the model parameters, lattice vectors, and Hamiltonian expressions, are consistent with the established literature on the Haldane model. The problem is scientifically sound, well-posed, objective, and contains sufficient information for a unique solution. The definitions of the lattice geometry and the Brillouin zone are standard. The task is a canonical problem in computational condensed matter physics. Therefore, the problem is deemed valid.\n\nThe Bloch Hamiltonian $H(\\mathbf{k})$ for a two-band system can be generally expressed in the basis of Pauli matrices $\\boldsymbol{\\sigma} = (\\sigma_x, \\sigma_y, \\sigma_z)$ as:\n$$\nH(\\mathbf{k}) = d_0(\\mathbf{k}) I + \\mathbf{d}(\\mathbf{k}) \\cdot \\boldsymbol{\\sigma}\n$$\nwhere $I$ is the $2 \\times 2$ identity matrix and $\\mathbf{d}(\\mathbf{k}) = (d_x(\\mathbf{k}), d_y(\\mathbf{k}), d_z(\\mathbf{k}))$ is a vector function of the Bloch momentum $\\mathbf{k}$. The matrix form is:\n$$\nH(\\mathbf{k}) = \\begin{pmatrix} d_0(\\mathbf{k}) + d_z(\\mathbf{k}) & d_x(\\mathbf{k}) - i d_y(\\mathbf{k}) \\\\ d_x(\\mathbf{k}) + i d_y(\\mathbf{k}) & d_0(\\mathbf{k}) - d_z(\\mathbf{k}) \\end{pmatrix}\n$$\nBy comparing this general form with the given Hamiltonian matrix elements $H_{AA}(\\mathbf{k})$, $H_{BB}(\\mathbf{k})$, and $H_{AB}(\\mathbf{k})$, we can identify the components of $\\mathbf{d}(\\mathbf{k})$:\n$$\nd_0(\\mathbf{k}) = \\frac{1}{2}(H_{AA}(\\mathbf{k}) + H_{BB}(\\mathbf{k})) = 2 t_2 \\cos(\\phi) \\sum_{j=1}^{3} \\cos(\\mathbf{k} \\cdot \\mathbf{a}_j)\n$$\n$$\nd_x(\\mathbf{k}) = \\text{Re}(H_{AB}(\\mathbf{k})) = t_1 \\sum_{j=1}^{3} \\cos(\\mathbf{k} \\cdot \\boldsymbol{\\delta}_j)\n$$\n$$\nd_y(\\mathbf{k}) = -\\text{Im}(H_{AB}(\\mathbf{k})) = -t_1 \\sum_{j=1}^{3} \\sin(\\mathbf{k} \\cdot \\boldsymbol{\\delta}_j)\n$$\n$$\nd_z(\\mathbf{k}) = \\frac{1}{2}(H_{AA}(\\mathbf{k}) - H_{BB}(\\mathbf{k})) = M - 2 t_2 \\sin(\\phi) \\sum_{j=1}^{3} \\sin(\\mathbf{k} \\cdot \\mathbf{a}_j)\n$$\nThe eigenvalues of this Hamiltonian are $E_\\pm(\\mathbf{k}) = d_0(\\mathbf{k}) \\pm |\\mathbf{d}(\\mathbf{k})|$, where $|\\mathbf{d}(\\mathbf{k})| = \\sqrt{d_x(\\mathbf{k})^2 + d_y(\\mathbf{k})^2 + d_z(\\mathbf{k})^2}$. We are interested in the lower (occupied) band, which corresponds to the eigenvalue $E_-(\\mathbf{k})$ and its associated eigenvector $|u_-(\\mathbf{k})\\rangle$.\n\nThe Chern number $\\mathcal{C}$ is a topological invariant of the band structure, defined as the integral of the Berry curvature $\\mathcal{F}_{12}(\\mathbf{k})$ over the first Brillouin zone:\n$$\n\\mathcal{C} = \\frac{1}{2\\pi} \\int_{\\mathrm{BZ}} \\mathcal{F}_{12}(\\mathbf{k})\\, d^2k\n$$\nDirectly computing the Berry curvature via its definition, which involves derivatives of the eigenvectors, is numerically unstable. A more robust and widely used approach for numerical calculation is the method proposed by Fukui, Hatsugai, and Suzuki. This method discretizes the Brillouin zone and computes the Chern number as a sum of local gauge-invariant quantities (plaquette phases).\n\nThe algorithm is as follows:\n1.  Define the primitive Bravais lattice vectors $\\mathbf{R}_1$ and $\\mathbf{R}_2$ and from them, the reciprocal lattice vectors $\\mathbf{G}_1$ and $\\mathbf{G}_2$ satisfying $\\mathbf{R}_i \\cdot \\mathbf{G}_j = 2\\pi \\delta_{ij}$. Using the provided vectors:\n    $\\mathbf{R}_1 = (\\sqrt{3}, 0)$ and $\\mathbf{R}_2 = (\\frac{\\sqrt{3}}{2}, \\frac{3}{2})$.\n    The reciprocal vectors are found to be $\\mathbf{G}_1 = (\\frac{2\\pi}{\\sqrt{3}}, -\\frac{2\\pi}{3})$ and $\\mathbf{G}_2 = (0, \\frac{4\\pi}{3})$.\n2.  Discretize the first Brillouin zone, represented by the parallelogram spanned by $\\mathbf{G}_1$ and $\\mathbf{G}_2$, into a uniform grid of $N \\times N$ points. A point on this grid is given by $\\mathbf{k}_{nm} = \\frac{n}{N}\\mathbf{G}_1 + \\frac{m}{N}\\mathbf{G}_2$ for integers $n, m \\in [0, N-1]$. A grid size of $N=100$ is sufficient for accurate results.\n3.  For each point $\\mathbf{k}_{nm}$ on the grid, construct the Hamiltonian matrix $H(\\mathbf{k}_{nm})$ and numerically compute its eigenvalues and eigenvectors. The eigenvector $|u_{nm}\\rangle$ corresponding to the lower eigenvalue $E_-(\\mathbf{k}_{nm})$ is stored.\n4.  Define link variables between adjacent points on the grid, representing the overlap of the ground-state wavefunctions:\n    $$\n    U_{1,nm} = \\langle u_{nm} | u_{n+1,m} \\rangle \\qquad U_{2,nm} = \\langle u_{nm} | u_{n,m+1} \\rangle\n    $$\n    Here, the indices are taken modulo $N$ to enforce periodic boundary conditions on the Brillouin zone torus. The k-space vectors are $\\mathbf{k}_{n+1,m} = \\mathbf{k}_{nm} + \\mathbf{G}_1/N$ and $\\mathbf{k}_{n,m+1} = \\mathbf{k}_{nm} + \\mathbf{G}_2/N$.\n5.  For each elementary plaquette $(n,m)$ on the grid, compute the plaquette phase, which is the discrete analogue of the Berry curvature flux through the plaquette:\n    $$\n    F_{nm} = \\arg\\left( U_{1,nm} U_{2,n+1,m} U_{1,n,m+1}^* U_{2,nm}^* \\right)\n    $$\n    The complex argument function $\\arg(z)$ must be evaluated in the range $(-\\pi, \\pi]$.\n6.  The total Chern number is the sum of these local phases over all plaquettes, normalized by $2\\pi$:\n    $$\n    \\mathcal{C} = \\frac{1}{2\\pi} \\sum_{n=0}^{N-1} \\sum_{m=0}^{N-1} F_{nm}\n    $$\n    Since the Chern number for a gapped band is guaranteed to be an integer, the numerical result is rounded to the nearest integer to account for finite precision errors.\n\nThe provided program implements this numerical scheme. It defines a function to construct the Hamiltonian for a given set of parameters $(t_1, t_2, \\phi, M)$ and momentum $\\mathbf{k}$. It then iterates through each test case, builds the grid of eigenvectors, computes the sum of plaquette phases, and calculates the Chern number. The final results for all test cases are collected and printed in the specified format. The vectors used in the calculation are:\n$\\boldsymbol{\\delta}_1 = (0,-1)$, $\\boldsymbol{\\delta}_2 = (\\frac{\\sqrt{3}}{2},\\frac{1}{2})$, $\\boldsymbol{\\delta}_3 = (-\\frac{\\sqrt{3}}{2},\\frac{1}{2})$.\n$\\mathbf{a}_1 = (\\sqrt{3}, 0)$, $\\mathbf{a}_2 = (-\\frac{\\sqrt{3}}{2}, \\frac{3}{2})$, $\\mathbf{a}_3 = (-\\frac{\\sqrt{3}}{2}, -\\frac{3}{2})$.\nAll calculations are performed with dimensionless quantities as specified.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the Chern number of the Haldane model for a suite of test cases.\n    \"\"\"\n\n    # Define the honeycomb lattice geometry vectors\n    sqrt3 = np.sqrt(3.0)\n    delta1 = np.array([0.0, -1.0])\n    delta2 = np.array([sqrt3 / 2.0, 1.0 / 2.0])\n    delta3 = np.array([-sqrt3 / 2.0, 1.0 / 2.0])\n    deltas = [delta1, delta2, delta3]\n\n    a1 = delta2 - delta3\n    a2 = delta3 - delta1\n    a3 = delta1 - delta2\n    a_vecs = [a1, a2, a3]\n\n    # Define primitive reciprocal lattice vectors\n    # R1 = a1, R2 = a1 + a2\n    # G1, G2 are defined by R_i . G_j = 2*pi*delta_ij\n    # G1 = (2*pi/sqrt3, -2*pi/3)\n    # G2 = (0, 4*pi/3)\n    G1 = np.array([2.0 * np.pi / sqrt3, -2.0 * np.pi / 3.0])\n    G2 = np.array([0.0, 4.0 * np.pi / 3.0])\n\n    # Numerical parameters\n    N_k = 100  # Grid size for Brillouin zone discretization\n\n    test_cases = [\n        # (t1, t2, phi, M)\n        (1.0, 0.1, np.pi / 2.0, 0.0),\n        (1.0, 0.1, np.pi / 2.0, 0.7),\n        (1.0, 0.1, -np.pi / 2.0, 0.0),\n        (1.0, 0.0, np.pi / 3.0, 0.0),\n        (1.0, 0.2, 0.0, 0.1),\n    ]\n\n    results = []\n    for t1, t2, phi, M in test_cases:\n        \n        k_grid_points = np.zeros((N_k, N_k, 2))\n        for n in range(N_k):\n            for m in range(N_k):\n                k_grid_points[n, m] = (n / N_k) * G1 + (m / N_k) * G2\n\n        eigenvectors = np.zeros((N_k, N_k, 2), dtype=np.complex128)\n\n        for n in range(N_k):\n            for m in range(N_k):\n                k = k_grid_points[n, m]\n                \n                # Calculate sums for Hamiltonian components\n                sum_exp_k_delta = np.sum([np.exp(1j * np.dot(k, d)) for d in deltas])\n                \n                cos_k_a = [np.cos(np.dot(k, a)) for a in a_vecs]\n                sin_k_a = [np.sin(np.dot(k, a)) for a in a_vecs]\n\n                # Hamiltonian matrix elements\n                H_AA = M + 2.0 * t2 * np.cos(phi) * np.sum(cos_k_a) - 2.0 * t2 * np.sin(phi) * np.sum(sin_k_a)\n                H_BB = -M + 2.0 * t2 * np.cos(phi) * np.sum(cos_k_a) + 2.0 * t2 * np.sin(phi) * np.sum(sin_k_a)\n                H_AB = t1 * sum_exp_k_delta\n                H_BA = np.conjugate(H_AB)\n\n                H = np.array([[H_AA, H_AB], [H_BA, H_BB]])\n\n                # Diagonalize the Hamiltonian\n                # eigh ensures real eigenvalues and returns normalized eigenvectors\n                eigenvalues, evecs = np.linalg.eigh(H)\n                \n                # Store the eigenvector for the lower band (occupied band)\n                eigenvectors[n, m] = evecs[:, 0]\n\n        total_berry_phase = 0.0\n        for n in range(N_k):\n            for m in range(N_k):\n                # Get eigenvectors for the four corners of the plaquette\n                u_nm = eigenvectors[n, m]\n                u_n1m = eigenvectors[(n + 1) % N_k, m]\n                u_nm1 = eigenvectors[n, (m + 1) % N_k]\n                u_n1m1 = eigenvectors[(n + 1) % N_k, (m + 1) % N_k]\n\n                # Compute link variables\n                U1_nm = np.vdot(u_nm, u_n1m)\n                U2_nm = np.vdot(u_nm, u_nm1)\n                \n                # Need links from neighboring sites to complete the plaquette\n                U1_nm1 = np.vdot(u_nm1, u_n1m1)\n                U2_n1m = np.vdot(u_n1m, u_n1m1)\n                \n                # Compute plaquette phase (local Berry curvature)\n                # F = arg( U1(n,m) U2(n+1,m) U1(n,m+1)* U2(n,m)* )\n                # Plaquette gauge field must be gauge invariant\n                plaquette_val = U1_nm * U2_n1m * np.conjugate(U1_nm1) * np.conjugate(U2_nm)\n                \n                # np.angle returns argument in [-pi, pi]\n                berry_phase_nm = np.angle(plaquette_val)\n                total_berry_phase += berry_phase_nm\n\n        # The Chern number is the sum of phases divided by 2*pi\n        chern_number = total_berry_phase / (2.0 * np.pi)\n        \n        # Round to the nearest integer\n        results.append(int(np.round(chern_number)))\n    \n    # Format and print the final output\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2446546"}]}