{"hands_on_practices": [{"introduction": "Periodic boundary conditions (PBC) are not just a computational convenience; they model real physical systems like crystal lattices or waves on a ring. This first exercise explores a fundamental consequence of PBC: the quantization of allowed states. By analyzing which wave functions can exist on a circular domain, you will see how a simple geometric constraint dictates the physical properties of a system ([@problem_id:2124832]).", "problem": "Consider a one-dimensional wave propagating on a thin, flexible ring of circumference $L = 3\\pi$. The displacement of the ring from its equilibrium position at a point $x$ along its circumference and at time $t$ is given by a function $u(x, t)$. Due to the circular nature of the domain, any valid wave function must satisfy periodic boundary conditions. The waves are superpositions of basic harmonic components traveling in the same direction, which have the general form $A \\cos(k(x-vt)) + B \\sin(k(x-vt))$, where $k$ is the wave number and $v$ is the wave speed.\n\nWhich of the following functions could represent a valid wave on this ring? Select all valid options.\n\nA. $u(x,t) = \\cos\\left(\\frac{2}{3}(x - vt)\\right)$\n\nB. $u(x,t) = \\sin\\left(\\frac{3}{2}(x - vt)\\right) + \\cos\\left(2(x-vt)\\right)$\n\nC. $u(x,t) = 5\\sin\\left(\\frac{4}{3}(x-vt)\\right)$\n\nD. $u(x,t) = \\cos\\left(\\frac{1}{3}(x-vt)\\right)$\n\nE. $u(x,t) = 2\\cos\\left(\\frac{2\\pi}{3}(x-vt)\\right)$", "solution": "For a wave on a ring of circumference $L$, the periodic boundary condition is $u(x+L,t)=u(x,t)$ for all $x$ and $t$. For a basic traveling harmonic component of the form $A\\cos(k(x-vt)) + B\\sin(k(x-vt))$, shifting $x \\to x+L$ gives\n$$A\\cos(k(x-vt)+kL)+B\\sin(k(x-vt)+kL).$$\nFor this to equal $A\\cos(k(x-vt)) + B\\sin(k(x-vt))$ for all phases, we require\n$$kL=2\\pi n,\\quad n\\in\\mathbb{Z}.$$\nThus the admissible wave numbers are\n$$k=\\frac{2\\pi n}{L}.$$\nWith $L=3\\pi$, this becomes\n$$k=\\frac{2\\pi n}{3\\pi}=\\frac{2}{3}n,\\quad n\\in\\mathbb{Z}.$$\nTherefore, any valid component must have $k$ an integer multiple of $\\frac{2}{3}$. Superpositions are valid only if each constituent component has an admissible $k$.\n\nCheck each option:\n- A: $k=\\frac{2}{3}=\\frac{2}{3}\\cdot 1$ is admissible. Valid.\n- B: First term has $k=\\frac{3}{2}$, which is not an integer multiple of $\\frac{2}{3}$ (since $(\\frac{3}{2}) / (\\frac{2}{3})=\\frac{9}{4}$ is not an integer). Second term has $k=2=\\frac{2}{3}\\cdot 3$, which is admissible. However, the sum includes a non-admissible component, so it is not periodic. Invalid.\n- C: $k=\\frac{4}{3}=\\frac{2}{3}\\cdot 2$ is admissible. Valid.\n- D: $k=\\frac{1}{3} = \\frac{2}{3} \\cdot \\frac{1}{2}$, which is not an integer multiple of $\\frac{2}{3}$. Invalid.\n- E: $k=\\frac{2\\pi}{3}$ gives $kL=\\frac{2\\pi}{3}\\cdot 3\\pi=2\\pi^{2}$, which cannot equal $2\\pi n$ with $n \\in \\mathbb{Z}$. Not admissible. Invalid.\n\nHence the valid options are A and C.", "answer": "$$\\boxed{AC}$$", "id": "2124832"}, {"introduction": "Moving from physical principles to computational practice, we must correctly implement the rules of PBC. The most crucial of these is the Minimum Image Convention (MIC), which ensures we always calculate the shortest distance between particles in a periodic system. This problem presents a common but flawed coding approach and challenges you to diagnose the error and identify the correct algorithm, a vital skill for any computational scientist ([@problem_id:2460063]).", "problem": "In atomistic simulations under periodic boundary conditions, pair interactions are computed using the minimum image convention: for each Cartesian component, one chooses the displacement that minimizes the absolute separation among all periodic images of the simulation cell. Consider a cubic cell of side length $L$, and let $dx = x_j - x_i$ be the raw difference of particle coordinates along one axis. A student implements the componentwise wrapping as $dx_{\\text{mic}} = \\mathrm{fmod}(dx, L)$ in an attempt to enforce the minimum image convention.\n\nWhich of the following statements correctly explain why this implementation is incorrect and how to fix it? Select all that apply.\n\nA. The function $\\mathrm{fmod}$ removes integer multiples of $L$ by truncation toward zero, which yields $dx_{\\text{mic}} \\in (-L, L)$ rather than the symmetric interval required by the minimum image convention, $(-L/2, L/2]$. Consequently, whenever $|dx| > L/2$, the result is not the shortest displacement.\n\nB. One can correct the output of $\\mathrm{fmod}$ by subtracting $L/2$ (i.e., using $dx_{\\text{mic}} = \\mathrm{fmod}(dx, L) - L/2$), which centers the interval and therefore enforces the minimum image convention.\n\nC. A correct one-dimensional implementation of the minimum image convention for a cubic box is $dx_{\\text{mic}} = dx - L\\,\\mathrm{round}(dx/L)$, with any consistent tie-breaking policy at $|dx| = L/2$.\n\nD. The only problem with using $\\mathrm{fmod}$ is floating-point roundoff near the boundary at $|dx| = L/2$; aside from that boundary, $\\mathrm{fmod}$ yields the minimum image displacement exactly.\n\nE. Using $\\mathrm{fmod}$ would be correct for orthorhombic (including cubic) boxes; it only fails for triclinic cells because the box vectors are not mutually orthogonal.", "solution": "The Minimum Image Convention (MIC) requires finding the shortest displacement vector, which for a 1D system of length $L$ means the displacement must be in the interval $(-L/2, L/2]$. The proposed implementation $dx_{\\text{mic}} = \\mathrm{fmod}(dx, L)$ is incorrect. The `fmod` function in most languages computes a remainder such that the result is in $(-L, L)$ and has the same sign as the dividend $dx$. This interval is not centered at zero. For any raw displacement $dx$ where $|dx| > L/2$, the result will not be the minimum image displacement. For example, if $L=10$ and $dx=7$, $\\mathrm{fmod}(7, 10)=7$, but the correct minimum image displacement is $7-10=-3$.\n\nA. This statement correctly identifies that $\\mathrm{fmod}$ yields a result in $(-L, L)$, not the required symmetric interval $(-L/2, L/2]$, and therefore fails whenever the raw displacement magnitude exceeds $L/2$.\n\nB. This proposed fix, $dx_{\\text{mic}} = \\mathrm{fmod}(dx, L) - L/2$, is incorrect. The resulting interval would be $(-3L/2, L/2)$, which is not the correct MIC interval.\n\nC. This implementation, $dx_{\\text{mic}} = dx - L\\,\\mathrm{round}(dx/L)$, is correct. The term $\\mathrm{round}(dx/L)$ finds the integer $n$ closest to $dx/L$, so $dx - nL$ is guaranteed to be the value with the smallest magnitude, placing it in the interval $[-L/2, L/2]$. This is a standard and robust implementation of the MIC.\n\nD. This statement is false. The error is algorithmic and fundamental, not a minor floating-point issue at the boundaries. It fails for a wide range of inputs.\n\nE. This statement is false. The failure of the `fmod` approach is intrinsic to the algorithm and occurs even in the simplest one-dimensional or cubic case. It is not related to the orthogonality of the simulation box.", "answer": "$$\\boxed{AC}$$", "id": "2460063"}, {"introduction": "Mastering the Minimum Image Convention for pairwise distances opens the door to analyzing more complex, global properties. What happens when a molecule, like a long polymer, is larger than the simulation box and wraps around the boundaries? This final practice ([@problem_id:2460073]) challenges you to think beyond single pairs and devise a method to reconstruct the true end-to-end distance of the polymer, illustrating how to recover global structure from local, wrapped coordinates.", "problem": "In a molecular dynamics simulation, a polymer with $N$ monomers is in a cubic simulation box of side length $L$ with Periodic Boundary Conditions (PBC). The stored Cartesian positions of monomers, $\\mathbf{r}_0,\\mathbf{r}_1,\\dots,\\mathbf{r}_{N-1}$, are wrapped so that each Cartesian component lies in the interval $[0,L)$. The polymer may be longer than $L$ and may cross the box boundaries multiple times. The Minimum Image Convention (MIC) is defined as follows: for any displacement $\\Delta \\mathbf{r}$ between two positions, $\\mathrm{MIC}(\\Delta \\mathbf{r})$ is the unique displacement vector that is equivalent under PBC and has the smallest Euclidean norm (equivalently, each Cartesian component is taken in $(-L/2,L/2]$).\n\nThe end-to-end distance is defined as the Euclidean norm of the unwrapped end-to-end vector from monomer $0$ to monomer $N-1$, i.e., the norm of the vector one would obtain if the polymer were made continuous across boundaries by adding or subtracting appropriate integer multiples of $L$ to the stored coordinates.\n\nWhich of the following expressions, computed directly from the wrapped coordinates $\\{\\mathbf{r}_i\\}$ and $L$, yields the correct end-to-end distance under PBC for a chain that may be longer than $L$?\n\nA. $d \\;=\\; \\left\\|\\, \\mathrm{MIC}\\!\\left(\\mathbf{r}_{N-1}-\\mathbf{r}_0\\right) \\right\\|$\n\nB. $d \\;=\\; \\left\\|\\, \\displaystyle\\sum_{i=0}^{N-2} \\mathrm{MIC}\\!\\left(\\mathbf{r}_{i+1}-\\mathbf{r}_i\\right) \\right\\|$\n\nC. $d \\;=\\; \\left\\|\\, \\mathbf{r}_{N-1}-\\mathbf{r}_0 \\right\\|$\n\nD. $d \\;=\\; \\left\\|\\, \\displaystyle\\sum_{i=0}^{N-2} \\left(\\mathbf{r}_{i+1}-\\mathbf{r}_i\\right) \\right\\|$", "solution": "The true, unwrapped end-to-end vector of the polymer, $\\mathbf{V}_{\\text{e2e}}$, is the sum of all the individual unwrapped bond vectors connecting adjacent monomers. Let the unwrapped and wrapped positions of monomer $i$ be $\\mathbf{R}_i$ and $\\mathbf{r}_i$, respectively. The unwrapped end-to-end vector is $\\mathbf{V}_{\\text{e2e}} = \\mathbf{R}_{N-1} - \\mathbf{R}_0 = \\sum_{i=0}^{N-2} (\\mathbf{R}_{i+1} - \\mathbf{R}_i)$.\n\nThe key is to reconstruct each true bond vector, $\\mathbf{R}_{i+1} - \\mathbf{R}_i$, from the wrapped coordinates. Since polymer bonds are short (assumed to be less than half the box length), the true bond vector is precisely the one given by the Minimum Image Convention (MIC) applied to the displacement of the wrapped coordinates: $\\mathbf{R}_{i+1} - \\mathbf{R}_i = \\mathrm{MIC}(\\mathbf{r}_{i+1} - \\mathbf{r}_i)$.\n\nTherefore, the full unwrapped end-to-end vector can be reconstructed by summing these MIC-corrected bond vectors: $\\mathbf{V}_{\\text{e2e}} = \\sum_{i=0}^{N-2} \\mathrm{MIC}(\\mathbf{r}_{i+1} - \\mathbf{r}_i)$. The end-to-end distance is the norm of this vector.\n\nA. This expression, $\\|\\mathrm{MIC}(\\mathbf{r}_{N-1}-\\mathbf{r}_0)\\|$, finds the shortest distance between the polymer's endpoints, but it ignores the path of the chain connecting them. It treats them as two independent particles, which is incorrect if the polymer wraps around the box.\n\nB. This expression, $\\left\\|\\sum_{i=0}^{N-2} \\mathrm{MIC}(\\mathbf{r}_{i+1}-\\mathbf{r}_i)\\right\\|$, correctly reconstructs the full end-to-end vector by summing the individual true bond vectors and then computes its norm. This is the correct method.\n\nC. This expression, $\\|\\mathbf{r}_{N-1}-\\mathbf{r}_0\\|$, is incorrect as it uses the raw displacement of wrapped coordinates, which is not physically meaningful and ignores the polymer's path.\n\nD. This expression is mathematically identical to C because the sum telescopes: $\\sum_{i=0}^{N-2} (\\mathbf{r}_{i+1}-\\mathbf{r}_i) = \\mathbf{r}_{N-1}-\\mathbf{r}_0$. It is therefore also incorrect.", "answer": "$$\\boxed{B}$$", "id": "2460073"}]}