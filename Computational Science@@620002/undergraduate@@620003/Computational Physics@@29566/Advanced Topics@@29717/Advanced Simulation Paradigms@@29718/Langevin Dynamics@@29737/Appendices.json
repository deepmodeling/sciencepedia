{"hands_on_practices": [{"introduction": "This first practice problem provides a foundational look into the interplay between equilibrium and non-equilibrium dynamics. We will analytically solve for the time evolution of a particle that is first held in thermal equilibrium by a harmonic trap and then suddenly released. This exercise is valuable because it sharpens your ability to calculate statistical moments and demonstrates a key principle: the final uncertainty in the particle's position is a simple sum of its initial thermal uncertainty and the additional uncertainty gained from free diffusion over time [@problem_id:2406370].", "problem": "Consider a one-dimensional overdamped Langevin particle in contact with a thermal reservoir at temperature $T$ in reduced, dimensionless units where the Boltzmann constant is $k_{\\mathrm{B}}=1$. The particle experiences viscous damping with coefficient $\\gamma>0$ and a conservative potential $U(x,t)$. Its dynamics are governed by the Stochastic Differential Equation (SDE), in the Stratonovich or Itô sense (both are equivalent here because the noise coefficient is constant),\n$$\n\\gamma \\,\\frac{dx}{dt} \\;=\\; -\\,\\frac{\\partial U(x,t)}{\\partial x} \\;+\\; \\sqrt{2\\,\\gamma\\,T}\\,\\eta(t),\n$$\nwhere $\\eta(t)$ is a standard Gaussian white noise with zero mean and unit delta correlation,\n$$\n\\langle \\eta(t)\\rangle=0,\\qquad \\langle \\eta(t)\\,\\eta(t')\\rangle=\\delta(t-t').\n$$\nFor times $t<0$, the particle is held in a harmonic trap with stiffness $k>0$, that is $U(x,t<0)=\\tfrac{1}{2}k x^2$, and the system is in equilibrium at temperature $T$. At $t=0$, the trap is instantaneously and completely removed, so that for $t\\ge 0$ the potential is identically zero, $U(x,t\\ge 0)=0$.\n\nLet $x(0)$ denote the particle position at the instant just after release. Because the system is in equilibrium for $t<0$, the distribution of $x(0)$ is the canonical distribution corresponding to the harmonic trap at temperature $T$. For $t\\ge 0$, the particle evolves freely under the overdamped Langevin dynamics described above.\n\nFor each specified parameter set $(\\gamma,k,T,t_{\\mathrm{f}})$, compute the exact ensemble second moment at the final time $t_{\\mathrm{f}}\\ge 0$,\n$$\nM(t_{\\mathrm{f}})\\equiv \\mathbb{E}\\!\\left[x(t_{\\mathrm{f}})^2\\right],\n$$\nexpressed as a dimensionless number. Use the reduced, dimensionless units as stated, and express all answers as dimensionless numbers.\n\nTest suite:\n- Case $1$: $\\gamma=1.0$, $k=2.0$, $T=1.5$, $t_{\\mathrm{f}}=3.0$.\n- Case $2$: $\\gamma=0.5$, $k=4.0$, $T=2.0$, $t_{\\mathrm{f}}=0.0$.\n- Case $3$: $\\gamma=1.0$, $k=100.0$, $T=1.0$, $t_{\\mathrm{f}}=0.1$.\n- Case $4$: $\\gamma=0.1$, $k=1.0$, $T=0.5$, $t_{\\mathrm{f}}=1.0$.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with each $M(t_{\\mathrm{f}})$ rounded to exactly $6$ decimal places and with no spaces, in the order of the test suite cases. For example, an output for four cases must look like\n$[m_1,m_2,m_3,m_4]$,\nwhere each $m_i$ is a decimal number with exactly $6$ digits after the decimal point.", "solution": "The problem as stated is scientifically sound, self-contained, and well-posed. All parameters and conditions are precisely defined, allowing for a rigorous analytical solution. It is a standard problem in the field of statistical physics concerning Langevin dynamics. We proceed to the solution.\n\nThe task is to compute the ensemble second moment $M(t_{\\mathrm{f}})\\equiv \\mathbb{E}[x(t_{\\mathrm{f}})^2]$ for a particle undergoing overdamped Langevin motion. The procedure involves two steps: first, determining the initial second moment $\\mathbb{E}[x(0)^2]$ from the equilibrium condition at times $t<0$; second, evolving this moment in time for $t\\ge 0$ using the given Langevin equation for a free particle.\n\n**Step 1: Initial Second Moment at $t=0$**\n\nFor time $t<0$, the particle is in a harmonic potential $U(x) = \\frac{1}{2}kx^2$ and is in thermal equilibrium with a reservoir at temperature $T$. The probability distribution of the particle's position $x$ is given by the canonical Boltzmann distribution. With the Boltzmann constant $k_{\\mathrm{B}}=1$, the probability density function is:\n$$\np(x) = \\frac{1}{Z} e^{-U(x)/T} = \\frac{1}{Z} e^{-kx^2/(2T)}\n$$\nwhere $Z$ is the partition function ensuring normalization. This is a Gaussian distribution with zero mean, $\\mathbb{E}[x]=0$. The variance of this distribution, $\\sigma^2_x = \\mathbb{E}[x^2] - (\\mathbb{E}[x])^2 = \\mathbb{E}[x^2]$, is found by comparing the exponent to the standard form of a Gaussian, $e^{-x^2/(2\\sigma^2_x)}$:\n$$\n\\frac{x^2}{2\\sigma^2_x} = \\frac{kx^2}{2T} \\implies \\sigma^2_x = \\frac{T}{k}\n$$\nTherefore, the initial second moment at the moment the trap is released, $t=0$, is:\n$$\n\\mathbb{E}[x(0)^2] = \\frac{T}{k}\n$$\nThis result is also a direct consequence of the equipartition theorem, which states that each quadratic degree of freedom contributes $\\frac{1}{2}k_{\\mathrm{B}}T$ to the average energy. For the potential energy $\\mathbb{E}[U(x)] = \\mathbb{E}[\\frac{1}{2}kx^2] = \\frac{1}{2}k\\mathbb{E}[x^2]$, we have:\n$$\n\\frac{1}{2}k\\mathbb{E}[x(0)^2] = \\frac{1}{2}T \\implies \\mathbb{E}[x(0)^2] = \\frac{T}{k}\n$$\n\n**Step 2: Time Evolution for $t\\ge 0$**\n\nFor $t\\ge 0$, the potential is removed, $U(x, t\\ge 0)=0$. The Langevin equation simplifies to describe a free overdamped particle (free Brownian motion):\n$$\n\\gamma \\frac{dx}{dt} = \\sqrt{2\\gamma T}\\,\\eta(t)\n$$\nAs the problem correctly notes, the Itô and Stratonovich interpretations of this stochastic differential equation are equivalent because the noise coefficient, $\\sqrt{2\\gamma T}$, is a constant. We can rewrite the equation as:\n$$\ndx = \\sqrt{\\frac{2T}{\\gamma}}\\,\\eta(t)\\,dt\n$$\nWe formally integrate this equation from $t=0$ to a final time $t_{\\mathrm{f}}$:\n$$\n\\int_{x(0)}^{x(t_{\\mathrm{f}})} dx' = \\int_{0}^{t_{\\mathrm{f}}} \\sqrt{\\frac{2T}{\\gamma}}\\,\\eta(t')\\,dt'\n$$\n$$\nx(t_{\\mathrm{f}}) - x(0) = \\sqrt{\\frac{2T}{\\gamma}} \\int_{0}^{t_{\\mathrm{f}}} \\eta(t')\\,dt'\n$$\nThe position at time $t_{\\mathrm{f}}$ is thus:\n$$\nx(t_{\\mathrm{f}}) = x(0) + \\sqrt{\\frac{2T}{\\gamma}} \\int_{0}^{t_{\\mathrm{f}}} \\eta(t')\\,dt'\n$$\nWe now compute the ensemble second moment, $M(t_{\\mathrm{f}}) = \\mathbb{E}[x(t_{\\mathrm{f}})^2]$, by squaring the expression for $x(t_{\\mathrm{f}})$ and taking the expectation:\n$$\n\\mathbb{E}[x(t_{\\mathrm{f}})^2] = \\mathbb{E}\\left[ \\left( x(0) + \\sqrt{\\frac{2T}{\\gamma}} \\int_{0}^{t_{\\mathrm{f}}} \\eta(t')\\,dt' \\right)^2 \\right]\n$$\nExpanding the square yields three terms:\n$$\nM(t_{\\mathrm{f}}) = \\mathbbE}[x(0)^2] \\;+\\; 2\\sqrt{\\frac{2T}{\\gamma}} \\mathbb{E}\\left[ x(0) \\int_{0}^{t_{\\mathrm{f}}} \\eta(t')\\,dt' \\right] \\;+\\; \\frac{2T}{\\gamma} \\mathbb{E}\\left[ \\left( \\int_{0}^{t_{\\mathrm{f}}} \\eta(t')\\,dt' \\right)^2 \\right]\n$$\nLet us evaluate each term.\n1.  The first term is the initial second moment, which we found to be $\\mathbb{E}[x(0)^2] = \\frac{T}{k}$.\n2.  The second term is the cross-term. The initial position $x(0)$ is determined by the system's evolution for $t<0$. The white noise $\\eta(t')$ for $t' > 0$ is causally independent of the state at $t=0$. Therefore, $x(0)$ and $\\eta(t')$ are uncorrelated. We can separate the expectation:\n    $$\n    \\mathbb{E}\\left[ x(0) \\int_{0}^{t_{\\mathrm{f}}} \\eta(t')\\,dt' \\right] = \\mathbb{E}[x(0)] \\int_{0}^{t_{\\mathrm{f}}} \\mathbb{E}[\\eta(t')]\\,dt'\n    $$\n    Since the noise has zero mean, $\\mathbb{E}[\\eta(t')] = 0$, this entire term is zero.\n3.  The third term represents the mean squared displacement due to free diffusion. We use the property $\\mathbb{E}[\\eta(t')\\eta(t'')] = \\delta(t'-t'')$:\n    $$\n    \\mathbb{E}\\left[ \\left( \\int_{0}^{t_{\\mathrm{f}}} \\eta(t')\\,dt' \\right)^2 \\right] = \\mathbb{E}\\left[ \\int_{0}^{t_{\\mathrm{f}}}dt' \\int_{0}^{t_{\\mathrm{f}}}dt''\\, \\eta(t')\\eta(t'') \\right]\n    $$\n    $$\n    = \\int_{0}^{t_{\\mathrm{f}}}dt' \\int_{0}^{t_{\\mathrm{f}}}dt''\\, \\mathbb{E}[\\eta(t')\\eta(t'')] = \\int_{0}^{t_{\\mathrm{f}}}dt' \\int_{0}^{t_{\\mathrm{f}}}dt''\\, \\delta(t'-t'')\n    $$\n    The inner integral over $t''$ evaluates to $1$ for $0 \\le t' \\le t_{\\mathrm{f}}$.\n    $$\n    = \\int_{0}^{t_{\\mathrm{f}}} 1 \\cdot dt' = t_{\\mathrm{f}}\n    $$\n    Therefore, the third term is $\\frac{2T}{\\gamma} t_{\\mathrm{f}}$.\n\nCombining these results, we obtain the final expression for the second moment at time $t_{\\mathrm{f}}$:\n$$\nM(t_{\\mathrm{f}}) = \\mathbb{E}[x(t_{\\mathrm{f}})^2] = \\frac{T}{k} + 0 + \\frac{2Tt_{\\mathrm{f}}}{\\gamma}\n$$\n$$\nM(t_{\\mathrm{f}}) = T \\left( \\frac{1}{k} + \\frac{2t_{\\mathrm{f}}}{\\gamma} \\right)\n$$\nThis formula shows that the final variance is the sum of the initial variance from the harmonic confinement and the variance accumulated from free diffusion over the time interval $[0, t_{\\mathrm{f}}]$. This analytical result will be used to compute the values for the specified test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the exact ensemble second moment for a freely diffusing\n    Langevin particle that was initially confined in a harmonic trap.\n    \"\"\"\n    \n    # Define the test cases from the problem statement as a list of tuples.\n    # Each tuple contains (gamma, k, T, t_f).\n    test_cases = [\n        (1.0, 2.0, 1.5, 3.0),   # Case 1\n        (0.5, 4.0, 2.0, 0.0),   # Case 2\n        (1.0, 100.0, 1.0, 0.1),  # Case 3\n        (0.1, 1.0, 0.5, 1.0),   # Case 4\n    ]\n\n    results = []\n    for case in test_cases:\n        gamma, k, T, t_f = case\n        \n        # The exact analytical formula for the second moment M(t_f) is derived as:\n        # M(t_f) = E[x(t_f)^2] = T/k + 2*T*t_f / gamma\n        # This can be factored as M(t_f) = T * (1/k + 2*t_f/gamma)\n        \n        # Initial variance from the harmonic trap in equilibrium.\n        initial_variance = T / k\n        \n        # Variance accumulated from free diffusion.\n        diffusive_variance = (2.0 * T * t_f) / gamma\n        \n        # The total second moment is the sum of the initial variance and the\n        # variance gained through diffusion.\n        m_tf = initial_variance + diffusive_variance\n        \n        results.append(m_tf)\n\n    # Format the list of results into the required string format:\n    # A comma-separated list of numbers rounded to 6 decimal places,\n    # enclosed in square brackets.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    final_output_string = f\"[{','.join(formatted_results)}]\"\n    \n    # Final print statement must produce only the specified single-line format.\n    print(final_output_string)\n\nsolve()\n```", "id": "2406370"}, {"introduction": "Having explored an analytical solution, we now turn to the core practice of computational physics: building and verifying a numerical simulation. This problem guides you through the full workflow for a particle in a non-trivial logarithmic potential, from deriving the overdamped Langevin equation to implementing an Euler-Maruyama integrator [@problem_id:2406383]. By comparing your simulation's stationary statistics against the exact results derived from the Fokker-Planck equation, you will gain hands-on experience in verifying that your numerical model correctly captures the intended equilibrium physics.", "problem": "Consider the overdamped Langevin dynamics of a single particle moving in one spatial dimension under the influence of a confining logarithmic potential given by $V(x)=a \\ln\\!\\big(1+(x/x_0)^2\\big)$. Assume the dynamics are governed by the balance of viscous friction and thermal fluctuations in a heat bath at absolute temperature $T$, with Boltzmann constant $k_{\\mathrm{B}}$ set to $1$ so that temperature has the units of energy. All quantities in this problem are dimensionless.\n\nYour tasks are as follows, starting from fundamental principles and well-tested facts only:\n1) Starting from Newton’s second law and the fluctuation-dissipation relation (noise with zero mean and correlation proportional to a Dirac delta), derive the overdamped Langevin equation for $x(t)$. You must obtain an equation of the form $dx = \\mu(x)\\,dt + \\sigma\\,dW_t$ where $W_t$ is a Wiener process, and identify the drift $\\mu(x)$ and the diffusion amplitude $\\sigma$ in terms of $a$, $x_0$, $T$, and the friction coefficient $\\gamma$.\n2) Using the Fokker–Planck equation, show that the stationary distribution (if it exists) is the Boltzmann distribution $p_{\\mathrm{eq}}(x) \\propto \\exp\\!\\big(-\\beta V(x)\\big)$ with $\\beta=1/T$. Determine the condition on the parameter $\\nu=\\beta a$ under which this stationary distribution is normalizable on the entire real line, and express the unnormalized density in the form $p_{\\mathrm{unnorm}}(x)=(1+(x/x_0)^2)^{-\\nu}$.\n3) Derive the normalization constant $Z(\\nu,x_0)$, for $\\nu>1/2$, of the stationary distribution $p_{\\mathrm{eq}}(x)$ by evaluating $\\int_{-\\infty}^{\\infty} (1+(x/x_0)^2)^{-\\nu} \\, dx$ using standard integral identities of the Gamma function. Provide $Z(\\nu,x_0)$ explicitly in closed form in terms of Gamma functions.\n4) Consider the Euler–Maruyama time discretization of the overdamped Langevin equation with time step $\\Delta t$:\n$$\nx_{n+1} = x_n + \\mu(x_n)\\,\\Delta t + \\sigma \\sqrt{\\Delta t}\\,\\xi_n,\n$$\nwhere $\\xi_n$ are independent, identically distributed standard normal random variables with zero mean and unit variance. Design a simulation protocol that approximates the stationary distribution by evolving many independent particles in parallel and collecting samples after a burn-in stage. To ensure numerical stability and adequate temporal resolution of the fastest deterministic relaxation near the origin, set the time step to\n$$\n\\Delta t = 0.005\\,\\frac{\\gamma x_0^2}{a}.\n$$\nHere, $\\gamma$ is the friction coefficient. Use $N_{\\mathrm{p}}$ independent particles initialized at $x=0$, evolve them for $N_{\\mathrm{steps}}$ steps, and discard the first $N_{\\mathrm{burn}}$ steps as burn-in. Use a fixed pseudorandom number seed equal to $12345$ for reproducibility.\n5) Let the target interval (bin) be $[-w/2,w/2]$ with width $w = 0.5\\,x_0$. Using your normalized stationary distribution from item $3$, compute the “exact” stationary bin probability\n$$\nP_{\\mathrm{exact}} = \\frac{1}{Z(\\nu,x_0)} \\int_{-w/2}^{w/2} \\left(1+(x/x_0)^2\\right)^{-\\nu}\\,dx,\n$$\nby numerical quadrature to high accuracy. Using your Euler–Maruyama simulation, estimate the empirical bin probability $P_{\\mathrm{emp}}$ as the fraction of samples (across all particles and time steps after burn-in) that fall in the interval $[-w/2,w/2]$.\n6) For each parameter set in the test suite below, report the relative error $\\varepsilon = |P_{\\mathrm{emp}}-P_{\\mathrm{exact}}|/P_{\\mathrm{exact}}$.\n\nSimulation parameters and output specification to be used by your program:\n- Use $N_{\\mathrm{p}}=5000$, $N_{\\mathrm{steps}}=3000$, $N_{\\mathrm{burn}}=500$.\n- Use the pseudorandom seed $12345$.\n- For each test case, compute $P_{\\mathrm{exact}}$ via numerical quadrature with sufficiently tight tolerances so that its numerical error is negligible compared to sampling error.\n- Your program must output a single line containing a list of the three relative errors for the test suite below, formatted as a comma-separated list enclosed in square brackets and with each number rounded to exactly $6$ decimal places (for example, $[0.001234,0.056789,0.000010]$).\n\nTest suite (all quantities dimensionless):\n- Case A (strong confinement): $a=2.0$, $x_0=1.0$, $\\gamma=1.0$, $T=2.0/3.0$ so that $\\nu=\\beta a = 3.0$.\n- Case B (moderate confinement, heavy but normalizable tails): $a=2.0$, $x_0=1.0$, $\\gamma=1.0$, $T=2.0$ so that $\\nu=\\beta a = 1.0$.\n- Case C (near the normalizability threshold): $a=2.0$, $x_0=1.0$, $\\gamma=1.0$, $T=10.0/3.0$ so that $\\nu=\\beta a = 0.6$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the exact order [Case A result, Case B result, Case C result], with each number rounded to $6$ decimal places.", "solution": "The problem as stated is scientifically grounded, well-posed, objective, and contains all necessary information for its resolution. It describes a standard problem in statistical physics, the overdamped Langevin dynamics of a particle in a potential, which can be analyzed with established theoretical and numerical methods. All parameters and procedures are specified without ambiguity. Therefore, we proceed to the solution.\n\nThe solution is structured according to the six tasks specified in the problem statement.\n\n1. Derivation of the Overdamped Langevin Equation\n\nWe begin with Newton's second law for a particle of mass $m$ in one dimension $x$, subject to a potential force $F_{\\mathrm{pot}}(x)$, a viscous drag force $F_{\\mathrm{fric}}$, and a stochastic thermal force $\\eta(t)$:\n$$m\\frac{d^2x}{dt^2} = F_{\\mathrm{pot}}(x) + F_{\\mathrm{fric}} + \\eta(t)$$\nThe potential force is conservative, $F_{\\mathrm{pot}}(x) = -V'(x)$. The viscous drag is proportional to the velocity, $F_{\\mathrm{fric}} = -\\gamma \\frac{dx}{dt}$, where $\\gamma$ is the friction coefficient. The equation of motion is the full Langevin equation:\n$$m\\frac{d^2x}{dt^2} = -V'(x) - \\gamma \\frac{dx}{dt} + \\eta(t)$$\nThe overdamped limit considers motion where frictional forces dominate inertial forces, which is equivalent to taking the limit $m \\to 0$. This is physically justified for motion in a highly viscous medium or on time scales much longer than the momentum relaxation time, $\\tau_p = m/\\gamma$. In this limit, the inertial term $m\\ddot{x}$ is neglected:\n$$0 \\approx -V'(x) - \\gamma \\frac{dx}{dt} + \\eta(t)$$\nRearranging yields the overdamped Langevin equation:\n$$\\gamma \\frac{dx}{dt} = -V'(x) + \\eta(t)$$\nThe stochastic force $\\eta(t)$ represents thermal fluctuations from the heat bath at temperature $T$. The fluctuation-dissipation theorem dictates its statistical properties: it is a Gaussian white noise process with zero mean and a correlation function given by:\n$$\\langle \\eta(t) \\rangle = 0$$\n$$\\langle \\eta(t)\\eta(t') \\rangle = 2\\gamma k_{\\mathrm{B}} T \\delta(t-t')$$\nGiven the problem states $k_{\\mathrm{B}}=1$, the correlation is $\\langle \\eta(t)\\eta(t') \\rangle = 2\\gamma T \\delta(t-t')$.\n\nTo write the equation in the standard Itô form $dx = \\mu(x)\\,dt + \\sigma\\,dW_t$, we divide by $\\gamma$:\n$$\\frac{dx}{dt} = -\\frac{1}{\\gamma}V'(x) + \\frac{1}{\\gamma}\\eta(t)$$\nThis corresponds to an Itô stochastic differential equation where $dW_t = \\frac{1}{\\sigma_{\\eta}}\\eta(t) dt$, with $\\langle dW_t dW_{t'} \\rangle = \\delta(t-t') dt^2$? No, this is incorrect reasoning. We define the Wiener process $W_t$ such that its formal time derivative is Gaussian white noise, $\\frac{dW_t}{dt}$, satisfying $\\langle \\frac{dW_t}{dt} \\rangle = 0$ and $\\langle \\frac{dW_t}{dt} \\frac{dW_{t'}}{dt'} \\rangle = \\delta(t-t')$. The term $\\frac{1}{\\gamma}\\eta(t)$ in the equation for $\\frac{dx}{dt}$ must be identified with $\\sigma \\frac{dW_t}{dt}$. The variance of this term must match.\nThe correlation of the noise term $\\frac{1}{\\gamma}\\eta(t)$ is:\n$$\\left\\langle \\left(\\frac{1}{\\gamma}\\eta(t)\\right) \\left(\\frac{1}{\\gamma}\\eta(t')\\right) \\right\\rangle = \\frac{1}{\\gamma^2}\\langle \\eta(t)\\eta(t') \\rangle = \\frac{1}{\\gamma^2} (2\\gamma T \\delta(t-t')) = \\frac{2T}{\\gamma}\\delta(t-t')$$\nComparing this to the correlation of the stochastic term in the Itô SDE, $\\langle (\\sigma \\frac{dW_t}{dt})(\\sigma \\frac{dW_{t'}}{dt'}) \\rangle = \\sigma^2 \\delta(t-t')$, we identify:\n$$\\sigma^2 = \\frac{2T}{\\gamma} \\implies \\sigma = \\sqrt{\\frac{2T}{\\gamma}}$$\nThe deterministic part of the equation gives the drift term:\n$$\\mu(x) = -\\frac{1}{\\gamma}V'(x)$$\nFor the given potential $V(x)=a \\ln(1+(x/x_0)^2)$, the derivative is:\n$$V'(x) = a \\frac{1}{1+(x/x_0)^2} \\cdot \\frac{2x}{x_0^2} = \\frac{2ax}{x_0^2+x^2}$$\nThus, the drift and diffusion coefficients are:\n$$\\mu(x) = -\\frac{2ax}{\\gamma(x_0^2+x^2)}, \\quad \\sigma = \\sqrt{\\frac{2T}{\\gamma}}$$\nThe diffusion coefficient $\\sigma$ is independent of position $x$.\n\n2. Fokker-Planck Equation and Stationary Distribution\n\nThe time evolution of the probability density function $p(x,t)$ for a process described by $dx = \\mu(x)\\,dt + \\sigma(x)\\,dW_t$ is governed by the Fokker-Planck equation:\n$$\\frac{\\partial p}{\\partial t} = -\\frac{\\partial}{\\partial x} [\\mu(x)p(x,t)] + \\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} [\\sigma^2(x)p(x,t)]$$\nSubstituting our expressions for $\\mu(x)$ and constant $\\sigma$:\n$$\\frac{\\partial p}{\\partial t} = -\\frac{\\partial}{\\partial x} \\left[-\\frac{1}{\\gamma}V'(x)p\\right] + \\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} \\left[\\frac{2T}{\\gamma}p\\right] = \\frac{1}{\\gamma}\\frac{\\partial}{\\partial x} \\left[V'(x)p\\right] + \\frac{T}{\\gamma}\\frac{\\partial^2p}{\\partial x^2}$$\nA stationary distribution $p_{\\mathrm{eq}}(x)$ is defined by the condition $\\frac{\\partial p_{\\mathrm{eq}}}{\\partial t}=0$.\n$$0 = \\frac{1}{\\gamma}\\frac{d}{dx} \\left[V'(x)p_{\\mathrm{eq}}\\right] + \\frac{T}{\\gamma}\\frac{d^2p_{\\mathrm{eq}}}{dx^2} \\implies \\frac{d}{dx} \\left[V'(x)p_{\\mathrm{eq}} + T\\frac{dp_{\\mathrm{eq}}}{dx}\\right] = 0$$\nThe term in brackets is the probability current, which must be zero everywhere for a stationary state in a confining potential.\n$$V'(x)p_{\\mathrm{eq}} + T\\frac{dp_{\\mathrm{eq}}}{dx} = 0 \\implies \\frac{1}{p_{\\mathrm{eq}}}\\frac{dp_{\\mathrm{eq}}}{dx} = -\\frac{V'(x)}{T}$$\nIntegrating with respect to $x$ yields $\\ln(p_{\\mathrm{eq}}) = -V(x)/T + C$, where $C$ is an integration constant.\n$$p_{\\mathrm{eq}}(x) = \\exp(C) \\exp\\left(-\\frac{V(x)}{T}\\right)$$\nWith $\\beta=1/T$, this is the Boltzmann distribution, $p_{\\mathrm{eq}}(x) \\propto \\exp(-\\beta V(x))$, as required.\nSubstituting the potential $V(x)=a \\ln(1+(x/x_0)^2)$ and defining $\\nu = \\beta a$:\n$$p_{\\mathrm{eq}}(x) \\propto \\exp\\left(-\\beta a \\ln(1+(x/x_0)^2)\\right) = \\exp\\left(-\\nu \\ln(1+(x/x_0)^2)\\right) = \\left(1+(x/x_0)^2\\right)^{-\\nu}$$\nThe unnormalized density is $p_{\\mathrm{unnorm}}(x) = (1+(x/x_0)^2)^{-\\nu}$.\nFor this distribution to be normalizable, the integral $\\int_{-\\infty}^{\\infty} (1+(x/x_0)^2)^{-\\nu} dx$ must converge. For large $|x|$, the integrand behaves as $( (x/x_0)^2 )^{-\\nu} \\propto |x|^{-2\\nu}$. The integral $\\int^{\\infty} |x|^{-p} dx$ converges if and only if $p>1$. Here, $p=2\\nu$, so the condition for normalizability is $2\\nu>1$, or $\\nu > 1/2$.\n\n3. Normalization Constant\n\nWe must evaluate the normalization constant $Z(\\nu, x_0) = \\int_{-\\infty}^{\\infty} (1+(x/x_0)^2)^{-\\nu} dx$ for $\\nu > 1/2$. We perform a change of variables $u=x/x_0$, so $dx = x_0 du$:\n$$Z(\\nu, x_0) = \\int_{-\\infty}^{\\infty} (1+u^2)^{-\\nu} x_0 du = x_0 \\int_{-\\infty}^{\\infty} (1+u^2)^{-\\nu} du$$\nSince the integrand is an even function of $u$, we can write:\n$$Z(\\nu, x_0) = 2x_0 \\int_{0}^{\\infty} (1+u^2)^{-\\nu} du$$\nThis integral is a standard form related to the Beta function, which has the representation $B(z_1, z_2) = 2\\int_0^{\\pi/2}(\\sin\\theta)^{2z_1-1}(\\cos\\theta)^{2z_2-1}d\\theta$. Alternatively, a more direct relation uses the representation $B(z_1, z_2) = \\int_0^{\\infty} \\frac{t^{z_1-1}}{(1+t)^{z_1+z_2}} dt$.\nLet $u^2=t$, then $u=\\sqrt{t}$ and $du = \\frac{1}{2\\sqrt{t}}dt$.\n$$\\int_{0}^{\\infty} (1+u^2)^{-\\nu} du = \\int_{0}^{\\infty} (1+t)^{-\\nu} \\frac{1}{2\\sqrt{t}}dt = \\frac{1}{2}\\int_{0}^{\\infty} \\frac{t^{-1/2}}{(1+t)^{\\nu}} dt$$\nComparing this with the Beta function integral, we set $z_1-1 = -1/2 \\implies z_1=1/2$, and $z_1+z_2=\\nu \\implies 1/2+z_2=\\nu \\implies z_2=\\nu-1/2$.\nThe integral is thus $\\frac{1}{2}B(1/2, \\nu-1/2)$. Using the relation $B(z_1, z_2) = \\frac{\\Gamma(z_1)\\Gamma(z_2)}{\\Gamma(z_1+z_2)}$:\n$$\\int_{0}^{\\infty} (1+u^2)^{-\\nu} du = \\frac{1}{2} \\frac{\\Gamma(1/2)\\Gamma(\\nu-1/2)}{\\Gamma(1/2+\\nu-1/2)} = \\frac{1}{2} \\frac{\\Gamma(1/2)\\Gamma(\\nu-1/2)}{\\Gamma(\\nu)}$$\nSince $\\Gamma(1/2)=\\sqrt{\\pi}$, the normalization constant is:\n$$Z(\\nu, x_0) = 2x_0 \\left(\\frac{1}{2} \\frac{\\sqrt{\\pi}\\Gamma(\\nu-1/2)}{\\Gamma(\\nu)}\\right) = x_0\\sqrt{\\pi} \\frac{\\Gamma(\\nu-1/2)}{\\Gamma(\\nu)}$$\n\n4. Simulation Protocol\n\nThe overdamped Langevin equation is discretized using the Euler-Maruyama scheme with time step $\\Delta t$:\n$$x_{n+1} = x_n + \\mu(x_n)\\Delta t + \\sigma \\sqrt{\\Delta t}\\,\\xi_n$$\nwhere $\\xi_n$ are independent random variables drawn from a standard normal distribution $N(0,1)$. The parameters are specified as:\n- Time step: $\\Delta t = 0.005\\,\\frac{\\gamma x_0^2}{a}$\n- Number of particles: $N_{\\mathrm{p}}=5000$\n- Number of steps: $N_{\\mathrm{steps}}=3000$\n- Burn-in steps: $N_{\\mathrm{burn}}=500$\n- Initial condition: All $N_{\\mathrm{p}}$ particles start at $x_i(0)=0$.\nThe simulation proceeds by initializing a vector of $N_{\\mathrm{p}}$ particle positions to zero. Then, for each of the $N_{\\mathrm{steps}}$, the positions are updated in parallel according to the discretized equation. Samples of particle positions $x_i(t_n)$ are collected for all time steps $n$ such that $n \\ge N_{\\mathrm{burn}}$.\n\n5. Calculation of Probabilities\n\nThe exact probability of finding the particle in the interval $[-w/2, w/2]$ with $w=0.5x_0$ is given by integrating the normalized stationary distribution $p_{\\mathrm{eq}}(x) = \\frac{1}{Z(\\nu,x_0)}p_{\\mathrm{unnorm}}(x)$:\n$$P_{\\mathrm{exact}} = \\int_{-w/2}^{w/2} p_{\\mathrm{eq}}(x) dx = \\frac{1}{Z(\\nu,x_0)} \\int_{-w/2}^{w/2} \\left(1+\\left(\\frac{x}{x_0}\\right)^2\\right)^{-\\nu} dx$$\nThis integral is computed using high-precision numerical quadrature.\n\nThe empirical probability, $P_{\\mathrm{emp}}$, is estimated from the simulation. After discarding the burn-in phase, we have a total of $N_{\\mathrm{samples}} = N_{\\mathrm{p}} \\times (N_{\\mathrm{steps}}-N_{\\mathrm{burn}})$ position samples. $P_{\\mathrm{emp}}$ is the fraction of these samples that fall within the interval $[-w/2, w/2]$.\n$$P_{\\mathrm{emp}} = \\frac{\\text{Number of samples in } [-w/2, w/2]}{N_{\\mathrm{samples}}}$$\n\n6. Relative Error\n\nFor each test case, the relative error $\\varepsilon$ between the empirical and exact probabilities is calculated as:\n$$\\varepsilon = \\frac{|P_{\\mathrm{emp}}-P_{\\mathrm{exact}}|}{P_{\\mathrm{exact}}}$$\nThis quantity is computed for the three specified parameter sets. The final implementation will execute these steps for each case and report the resulting errors.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import special, integrate\n\ndef solve():\n    \"\"\"\n    Solves the Langevin dynamics problem for the three specified test cases.\n    It calculates the theoretical bin probability, runs a numerical simulation\n    to find the empirical probability, and computes the relative error.\n    \"\"\"\n    # Global simulation parameters\n    N_p = 5000\n    N_steps = 3000\n    N_burn = 500\n    seed = 12345\n\n    # Test suite: (a, x0, gamma, T)\n    test_cases = [\n        # Case A: Strong confinement (nu = 3.0)\n        (2.0, 1.0, 1.0, 2.0 / 3.0),\n        # Case B: Moderate confinement (nu = 1.0)\n        (2.0, 1.0, 1.0, 2.0),\n        # Case C: Near normalizability threshold (nu = 0.6)\n        (2.0, 1.0, 1.0, 10.0 / 3.0),\n    ]\n\n    results = []\n    for a, x0, gamma, T in test_cases:\n        # --- Task 2, 3, 5: Theoretical Calculation ---\n        beta = 1.0 / T\n        nu = beta * a\n        w = 0.5 * x0\n\n        # Normalization constant Z(nu, x0)\n        # Z = x0 * sqrt(pi) * Gamma(nu - 0.5) / Gamma(nu)\n        if nu <= 0.5:\n            raise ValueError(f\"nu must be > 0.5 for normalizability, but got nu={nu}\")\n        \n        Z = x0 * np.sqrt(np.pi) * special.gamma(nu - 0.5) / special.gamma(nu)\n\n        # Unnormalized stationary distribution p_unnorm(x)\n        def p_unnorm(x_val):\n            return (1.0 + (x_val / x0)**2)**(-nu)\n\n        # Exact probability P_exact\n        # Computed via numerical quadrature to high accuracy\n        integral_val, quad_err = integrate.quad(p_unnorm, -w / 2.0, w / 2.0)\n        P_exact = integral_val / Z\n\n        # --- Task 1, 4, 5: Numerical Simulation ---\n        # SDE parameters\n        dt = 0.005 * (gamma * x0**2) / a\n        sigma = np.sqrt(2.0 * T / gamma)\n        \n        def mu(x_vec):\n            # Drift term mu(x)\n            return -(2.0 * a * x_vec) / (gamma * (x0**2 + x_vec**2))\n\n        # Initialize simulation state\n        rng = np.random.default_rng(seed)\n        x_particles = np.zeros(N_p, dtype=np.float64)\n        \n        num_samples_to_collect = (N_steps - N_burn) * N_p\n        all_samples = np.zeros(num_samples_to_collect, dtype=np.float64)\n        sample_idx = 0\n        \n        # Run simulation\n        for step in range(N_steps):\n            # Generate standard normal random variables\n            xi = rng.normal(size=N_p)\n            \n            # Update particle positions using Euler-Maruyama\n            x_particles += mu(x_particles) * dt + sigma * np.sqrt(dt) * xi\n            \n            # Collect samples after burn-in period\n            if step >= N_burn:\n                start = sample_idx\n                end = sample_idx + N_p\n                all_samples[start:end] = x_particles\n                sample_idx = end\n\n        # Empirical probability P_emp\n        N_in_bin = np.sum((all_samples >= -w / 2.0) & (all_samples <= w / 2.0))\n        N_total = len(all_samples)\n        P_emp = N_in_bin / N_total\n\n        # --- Task 6: Relative Error ---\n        relative_error = np.abs(P_emp - P_exact) / P_exact\n        results.append(relative_error)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join([f'{r:.6f}' for r in results])}]\")\n\nsolve()\n```", "id": "2406383"}, {"introduction": "Our final practice problem ventures into more advanced territory by relaxing a common assumption: that the particle's mass is constant. This scenario, relevant to processes like accretion, requires us to return to first principles, starting with a Lagrangian to derive the correct equations of motion including a subtle position-dependent force term. You will then implement a sophisticated symmetric integrator designed to handle such complexities and validate your simulation by testing a fundamental principle of statistical mechanics—the equipartition theorem [@problem_id:2406409]. This exercise powerfully illustrates how to build and verify robust numerical models for non-standard physical systems.", "problem": "A single point particle moves in one spatial dimension in contact with a thermal reservoir at fixed temperature. The particle’s inertial mass depends on position, which is physically motivated by accretion as the particle traverses a medium. Starting only from Newton’s second law, the Lagrangian formulation for a one-dimensional particle with position-dependent mass, the definition of momentum, and the fluctuation–dissipation principle for a linear drag in a thermal bath, derive a correct underdamped Langevin dynamics model for the particle and implement a numerically stable and physically consistent time-stepping algorithm.\n\nYou must adhere to the following requirements.\n\n1) Physical model and fundamental starting point:\n- Begin with the Lagrangian $L = \\tfrac{1}{2} m(x) \\, v^{2} - U(x)$, where $x$ is the position, $v = dx/dt$ is the velocity, and $U(x)$ is a smooth potential energy.\n- Extend the conservative equations of motion to include an isothermal linear drag force $- \\gamma \\, v$ from a heat bath at absolute temperature $T$, together with a zero-mean Gaussian white noise force with delta correlation, such that the fluctuation–dissipation principle holds.\n- Use the canonical momentum definition $p = \\partial L / \\partial v$ as your fundamental variable to handle the stochastic forcing in a way that is additive in the momentum update when the position is held fixed. Do not assume any pre-derived “shortcut” stochastic integrator; the algorithm must be constructed from the stated physical principles.\n\n2) Numerical discretization requirements:\n- Devise a time-integration scheme that splits or otherwise treats, in a numerically stable way, the conservative drift, the linear drag, and the Gaussian noise, ensuring consistency with the fluctuation–dissipation principle at fixed position. Your algorithm choice must be explained by first principles in your solution.\n- The potential energy must be harmonic, $U(x) = \\tfrac{1}{2} k \\, x^{2}$, where $k$ is a positive constant.\n- The mass profile must be $m(x) = m_{0} \\bigl( 1 + \\alpha \\, x^{2} \\bigr)$ with $\\alpha \\ge 0$, which ensures strict positivity for all positions.\n- Use Boltzmann constant $k_{\\mathrm{B}} = 1$, so that temperature $T$ is measured directly in energy units. All outputs requested below are dimensionless.\n\n3) Observables and equilibrium checks:\n- For a long ergodic trajectory at steady state, compute the following dimensionless ratios:\n  - The kinetic equipartition ratio $R_{k} = \\langle m(x) \\, v^{2} \\rangle / T$. In equilibrium, correct thermalization should give $R_{k} \\approx 1$ independent of $m(x)$.\n  - The configuration ratio for the harmonic coordinate $R_{x} = k \\, \\langle x^{2} \\rangle / T$. For a constant mass, equilibrium implies $R_{x} \\approx 1$. For position-dependent mass, the canonical measure for $x$ is altered by the momentum integration measure and $R_{x}$ generally deviates from $1$.\n\n4) Test suite:\nImplement your program to simulate each of the following three parameter sets. For all sets use the same time step, total steps, burn-in, and sampling stride, as specified below. Each set must be simulated independently using the given pseudorandom seed to ensure reproducibility. Use the normal (Gaussian) distribution with unit variance for the driving noise, with the stated seeds.\n\n- Shared integrator parameters for every set:\n  - Time step $\\Delta t = 0.002$,\n  - Total steps $N_{\\text{steps}} = 400{,}000$,\n  - Burn-in steps $N_{\\text{burn}} = 100{,}000$,\n  - Sampling stride $s = 5$ (record every $s$-th step after burn-in).\n\n- Case A (baseline, constant mass):\n  - $m_{0} = 1$, $\\alpha = 0$, $k = 1$, $\\gamma = 1$, $T = 1$, seed $= 12345$.\n\n- Case B (moderate position dependence):\n  - $m_{0} = 1$, $\\alpha = 1$, $k = 1$, $\\gamma = 1$, $T = 1$, seed $= 23456$.\n\n- Case C (stronger position dependence):\n  - $m_{0} = 1$, $\\alpha = 4$, $k = 1$, $\\gamma = 1$, $T = 1$, seed $= 34567$.\n\n5) Required final output:\n- For each case, compute the two floats $R_{k}$ and $R_{x}$ as defined above, both rounded to three decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list of three two-element lists, in the order A, B, C, i.e., of the form $[[R_{k}^{A},R_{x}^{A}],[R_{k}^{B},R_{x}^{B}],[R_{k}^{C},R_{x}^{C}]]$.\n- Angles are not used; there are no dimensional units in the requested outputs since the ratios are dimensionless.\n\nYour implementation must be a complete, runnable program that performs the simulations and prints the aggregated results in the exact format described above on a single line. No user input or external files are permitted.", "solution": "The problem requires the derivation and implementation of an underdamped Langevin dynamics integrator for a particle with position-dependent mass. The derivation must start from first principles—the Lagrangian formulation and the fluctuation-dissipation theorem.\n\n**1. Derivation of the Equations of Motion**\n\nWe begin with the provided Lagrangian for a one-dimensional particle with position-dependent mass $m(x)$ in a potential $U(x)$:\n$$\nL(x, v) = \\frac{1}{2} m(x) v^2 - U(x)\n$$\nwhere $v = dx/dt$ is the velocity. The canonical momentum $p$ is defined as:\n$$\np = \\frac{\\partial L}{\\partial v} = m(x)v\n$$\nThe conservative equation of motion is given by the Euler-Lagrange equation:\n$$\n\\frac{d}{dt}\\left(\\frac{\\partial L}{\\partial v}\\right) - \\frac{\\partial L}{\\partial x} = 0\n$$\nCalculating the spatial derivative of the Lagrangian:\n$$\n\\frac{\\partial L}{\\partial x} = \\frac{1}{2} \\frac{dm}{dx} v^2 - \\frac{dU}{dx}\n$$\nSubstituting these into the Euler-Lagrange equation gives the rate of change of momentum:\n$$\n\\frac{dp}{dt} = \\frac{1}{2} \\frac{dm}{dx} v^2 - \\frac{dU}{dx}\n$$\nThe term $\\frac{1}{2}\\frac{dm}{dx}v^2$ is an effective force arising from the changing inertia of the particle. Expressing velocity as $v = p/m(x)$, this force becomes dependent on both position and momentum.\n\nTo model the interaction with a thermal reservoir at temperature $T$, we introduce a linear drag force, $F_{\\text{drag}} = -\\gamma v$, and a stochastic thermal force, $\\xi(t)$. The complete equation of motion for the momentum is the sum of all forces:\n$$\n\\frac{dp}{dt} = \\left(\\frac{1}{2} \\frac{dm}{dx} v^2 - \\frac{dU}{dx}\\right) - \\gamma v + \\xi(t)\n$$\nSubstituting $v=p/m(x)$, we obtain the system of stochastic differential equations (SDEs) in phase space $(x, p)$:\n$$\n\\begin{cases}\n\\frac{dx}{dt} = \\frac{p}{m(x)} \\\\\n\\frac{dp}{dt} = - \\frac{dU}{dx} + \\frac{1}{2} \\frac{dm}{dx} \\left(\\frac{p}{m(x)}\\right)^2 - \\frac{\\gamma}{m(x)}p + \\xi(t)\n\\end{cases}\n$$\nThe thermal noise $\\xi(t)$ is a zero-mean Gaussian white noise process, $\\langle \\xi(t) \\rangle = 0$. The fluctuation-dissipation principle dictates its correlation, relating the noise strength to the dissipation (drag) and temperature:\n$$\n\\langle \\xi(t) \\xi(t') \\rangle = 2\\gamma k_{\\mathrm{B}} T \\delta(t-t')\n$$\nWith the given convention $k_{\\mathrm{B}}=1$, this simplifies to $\\langle \\xi(t) \\xi(t') \\rangle = 2\\gamma T \\delta(t-t')$.\n\n**2. Numerical Integration Scheme**\n\nTo integrate these SDEs, we use a symmetric splitting method, which ensures numerical stability, time-reversibility of the conservative part, and correct sampling of the equilibrium distribution for long simulations. A suitable choice is the \"BAOAB\" integrator, which splits the time-evolution operator into three parts:\n- **Part B (Force):** Momentum update due to conservative and mass-dependent forces. $\\dot{p} = -U'(x) + \\frac{p^2 m'(x)}{2m(x)^2}$.\n- **Part A (Drift):** Position update. $\\dot{x} = p/m(x)$.\n- **Part O (Thermostat):** Momentum update due to drag and noise. $dp = -\\frac{\\gamma p}{m(x)}dt + \\sqrt{2\\gamma T}dW_t$, where $dW_t$ is a Wiener process increment.\n\nThe O-step represents an Ornstein-Uhlenbeck (OU) process for the momentum, assuming position $x$ is fixed. This subproblem can be solved exactly over a time step $\\Delta t$, as requested by the problem statement. The solution is:\n$$\np(t+\\Delta t) = p(t) e^{-\\frac{\\gamma \\Delta t}{m(x)}} + \\sqrt{m(x)T \\left(1 - e^{-2\\frac{\\gamma \\Delta t}{m(x)}}\\right)} R\n$$\nwhere $R$ is a standard normal random number, $R \\sim N(0,1)$.\n\nThe BAOAB algorithm composes these steps symmetrically for a single time step $\\Delta t$, evolving the system from $(x_n, p_n)$ to $(x_{n+1}, p_{n+1})$:\n\n1.  **B-step ($\\Delta t/2$):** Update momentum with the force term for a half time step.\n    $p^{(1)} = p_n + \\left[-U'(x_n) + \\frac{p_n^2 m'(x_n)}{2m(x_n)^2}\\right] \\frac{\\Delta t}{2}$\n2.  **A-step ($\\Delta t/2$):** Update position using the new momentum for a half time step.\n    $x^{(1)} = x_n + \\frac{p^{(1)}}{m(x_n)} \\frac{\\Delta t}{2}$\n3.  **O-step ($\\Delta t$):** Apply the exact OU update to the momentum at the midpoint position $x^{(1)}$ for a full time step.\n    $p^{(2)} = p^{(1)} e^{-\\frac{\\gamma \\Delta t}{m(x^{(1)})}} + \\sqrt{m(x^{(1)})T \\left(1 - e^{-2\\frac{\\gamma \\Delta t}{m(x^{(1)})}}\\right)} R_n$\n4.  **A-step ($\\Delta t/2$):** Update position for another half time step to reach the final position.\n    $x_{n+1} = x^{(1)} + \\frac{p^{(2)}}{m(x^{(1)})} \\frac{\\Delta t}{2}$\n5.  **B-step ($\\Delta t/2$):** Update momentum with the force at the final state $(x_{n+1}, p^{(2)})$ for a half time step.\n    $p_{n+1} = p^{(2)} + \\left[-U'(x_{n+1}) + \\frac{(p^{(2)})^2 m'(x_{n+1})}{2m(x_{n+1})^2}\\right] \\frac{\\Delta t}{2}$\n\nThis symmetric decomposition ensures the algorithm correctly samples the canonical phase-space distribution $P(x,p) \\propto \\exp(-H(x,p)/T)$, where $H(x,p) = p^2/(2m(x)) + U(x)$, which is essential for obtaining correct equilibrium averages.\n\n**3. Observables and Theoretical Checks**\n\nThe problem asks to compute two ratios: $R_k = \\langle m(x) v^2 \\rangle / T$ and $R_x = k \\langle x^2 \\rangle / T$.\n- **Kinetic Equipartition Ratio ($R_k$):** The kinetic energy is $E_k = \\frac{1}{2}m(x)v^2$. In some contexts, this is written as $p^2/(2m(x))$. The equipartition theorem states that each quadratic degree of freedom contributing to the energy has an average value of $T/2$. Here, the kinetic energy corresponds to a single quadratic degree of freedom in momentum. The average kinetic energy is $\\langle E_k \\rangle = \\frac{1}{2}T$. Thus, $\\langle m(x)v^2 \\rangle = T$. Therefore, we expect $R_k = \\langle m(x) v^2 \\rangle / T \\approx 1$ for all cases, which serves as a critical check of the thermostat's correctness.\n- **Configuration Ratio ($R_x$):** The equilibrium probability distribution for position $x$ is found by integrating the full phase-space distribution over momentum: $P(x) \\propto \\sqrt{m(x)} \\exp(-U(x)/T)$. For a constant mass ($\\alpha=0$), this reduces to the standard Boltzmann distribution $P(x) \\propto \\exp(-U(x)/T)$. For a harmonic potential $U(x) = \\frac{1}{2}kx^2$, this leads to $\\langle x^2 \\rangle = T/k$ and thus $R_x = 1$. However, when mass is position-dependent ($\\alpha > 0$), the $\\sqrt{m(x)} = \\sqrt{m_0(1+\\alpha x^2)}$ factor gives additional weight to larger values of $|x|$, causing $\\langle x^2 \\rangle$ to increase. Consequently, we expect to find $R_x > 1$ for Cases B and C, with the deviation increasing with $\\alpha$.\n\nThe implementation will simulate the dynamics using the BAOAB integrator and compute time averages of $m(x)v^2 = p^2/m(x)$ and $x^2$ over a long ergodic trajectory after an initial burn-in period to reach equilibrium.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Langevin dynamics problem for a particle with position-dependent mass.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a dictionary of parameters.\n    test_cases = [\n        # Case A (baseline, constant mass)\n        {\"m0\": 1.0, \"alpha\": 0.0, \"k\": 1.0, \"gamma\": 1.0, \"T\": 1.0, \"seed\": 12345},\n        # Case B (moderate position dependence)\n        {\"m0\": 1.0, \"alpha\": 1.0, \"k\": 1.0, \"gamma\": 1.0, \"T\": 1.0, \"seed\": 23456},\n        # Case C (stronger position dependence)\n        {\"m0\": 1.0, \"alpha\": 4.0, \"k\": 1.0, \"gamma\": 1.0, \"T\": 1.0, \"seed\": 34567},\n    ]\n\n    # Shared integrator parameters\n    dt = 0.002\n    n_steps = 400000\n    n_burn = 100000\n    stride = 5\n    \n    results = []\n\n    for case in test_cases:\n        m0, alpha, k, gamma, T, seed = case.values()\n        \n        # Set up the random number generator for reproducibility\n        rng = np.random.default_rng(seed)\n\n        # Define model-specific functions\n        def get_mass(x_val):\n            return m0 * (1.0 + alpha * x_val**2)\n\n        def get_force(x_val, p_val):\n            # F = -U'(x) + (1/2) * m'(x) * v^2\n            #   = -k*x + m0*alpha*x * (p/m(x))^2\n            m_val = get_mass(x_val)\n            force_conservative = -k * x_val\n            # The effective force due to position-dependent mass must be included.\n            if alpha == 0.0:\n                 return force_conservative\n            force_mass_dep = m0 * alpha * x_val * (p_val / m_val)**2\n            return force_conservative + force_mass_dep\n\n        # Initial conditions\n        x = 0.0\n        p = 0.0\n\n        # Accumulators for observables\n        sum_p2_over_m = 0.0\n        sum_x2 = 0.0\n        n_samples = 0\n\n        # Main simulation loop using the BAOAB integrator\n        for step in range(n_steps):\n            # B-step (half): Update momentum with force for dt/2\n            p_half_B = p + get_force(x, p) * dt / 2.0\n            \n            # A-step (half): Update position for dt/2\n            x_mid = x + (p_half_B / get_mass(x)) * dt / 2.0\n            \n            # O-step (full): Apply thermostat update to momentum\n            m_mid = get_mass(x_mid)\n            c1 = np.exp(-gamma * dt / m_mid)\n            c2 = np.sqrt(T * m_mid * (1.0 - c1**2))\n            p_after_O = c1 * p_half_B + c2 * rng.normal()\n            \n            # A-step (half): Update position for another dt/2\n            x_final = x_mid + (p_after_O / get_mass(x_mid)) * dt / 2.0\n            \n            # B-step (half): Update momentum with force at final position for dt/2\n            p_final = p_after_O + get_force(x_final, p_after_O) * dt / 2.0\n\n            # Update state for the next iteration\n            x, p = x_final, p_final\n            \n            # Sampling after burn-in period\n            if step >= n_burn and (step - n_burn) % stride == 0:\n                current_mass = get_mass(x)\n                sum_p2_over_m += p**2 / current_mass  # This is m(x)v^2\n                sum_x2 += x**2\n                n_samples += 1\n\n        # Calculate final averages and dimensionless ratios\n        avg_mv2 = sum_p2_over_m / n_samples\n        avg_x2 = sum_x2 / n_samples\n        \n        Rk = avg_mv2 / T\n        Rx = k * avg_x2 / T\n        \n        results.append([round(Rk, 3), round(Rx, 3)])\n\n    # Format the final output string as specified\n    formatted_results = [f\"[{r[0]},{r[1]}]\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2406409"}]}