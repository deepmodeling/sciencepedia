{"hands_on_practices": [{"introduction": "Before applying high-order schemes, it is essential to understand their construction. This first practice guides you through the foundational process of deriving the coefficients for a finite difference stencil from first principles [@problem_id:2401286]. By systematically applying Taylor series expansions, you will use the method of undetermined coefficients to find the unique set of weights that yields a fourth-order accurate approximation to the first derivative, transforming abstract theory into a concrete numerical tool.", "problem": "Consider a sufficiently smooth function $f$ defined on an interval containing the nodes $x_i, x_{i+1}, x_{i+2}, x_{i+3}, x_{i+4}$ of a uniform grid with spacing $h>0$, where $x_{j} = x_{0} + j h$. Assume that $f$ has at least $5$ continuous derivatives on $[x_i, x_{i+4}]$. Using only the values $f(x_i)$, $f(x_{i+1})$, $f(x_{i+2})$, $f(x_{i+3})$, and $f(x_{i+4})$, construct a forward-difference approximation to the first derivative $f'(x_i)$ that is accurate through order $h^{4}$ (that is, has truncation error of order $\\mathcal{O}(h^{4})$). \n\nDetermine the unique coefficients $a_0, a_1, a_2, a_3, a_4 \\in \\mathbb{R}$ such that\n$$\nf'(x_i) \\approx \\frac{1}{h}\\sum_{k=0}^{4} a_k\\, f(x_{i+k})\n$$\nachieves fourth-order accuracy, and provide the resulting closed-form approximation as a single analytic expression.\n\nAnswer specification:\n- Provide your final result as a single closed-form analytic expression for the approximation to $f'(x_i)$ in terms of $f(x_{i+k})$ and $h$.\n- No rounding is required.", "solution": "The given problem is a standard and well-posed exercise in the field of numerical analysis, specifically the derivation of finite difference formulas. It is scientifically sound, logically consistent, and all required information is provided. Therefore, it is valid, and I will proceed with its solution.\n\nThe objective is to find coefficients $a_0, a_1, a_2, a_3, a_4$ for the approximation\n$$\nf'(x_i) \\approx \\frac{1}{h}\\sum_{k=0}^{4} a_k f(x_{i+k})\n$$\nsuch that the truncation error is of order $\\mathcal{O}(h^4)$. This is a direct application of the method of undetermined coefficients using Taylor series expansions.\n\nThe function $f$ is assumed to be sufficiently smooth, allowing us to expand each term $f(x_{i+k})$ in a Taylor series around the point $x_i$. The expansion is given by:\n$$\nf(x_{i+k}) = f(x_i + kh) = \\sum_{j=0}^{\\infty} \\frac{(kh)^j}{j!} f^{(j)}(x_i)\n$$\nwhere $f^{(j)}(x_i)$ denotes the $j$-th derivative of $f$ evaluated at $x_i$.\n\nSubstituting this expansion into the finite difference formula, we obtain:\n$$\n\\frac{1}{h}\\sum_{k=0}^{4} a_k f(x_{i+k}) = \\frac{1}{h}\\sum_{k=0}^{4} a_k \\left( \\sum_{j=0}^{\\infty} \\frac{(kh)^j}{j!} f^{(j)}(x_i) \\right)\n$$\nBy interchanging the order of summation, which is permissible here, we get:\n$$\n\\frac{1}{h}\\sum_{j=0}^{\\infty} \\frac{h^j f^{(j)}(x_i)}{j!} \\left( \\sum_{k=0}^{4} k^j a_k \\right)\n$$\nWe want this expression to approximate $f'(x_i)$ with a truncation error of $\\mathcal{O}(h^4)$. This means that when we expand the expression in powers of $h$, the coefficient of $f'(x_i)$ must be $1$, and the coefficients of $f(x_i)$, $f''(x_i)$, $f'''(x_i)$, and $f^{(4)}(x_i)$ must be $0$.\n\nLet's examine the terms for $j=0, 1, 2, 3, 4$:\n\\begin{itemize}\n    \\item For $j=0$: The term is $\\frac{1}{h} \\frac{h^0 f^{(0)}(x_i)}{0!} \\left( \\sum_{k=0}^{4} a_k \\right) = \\frac{f(x_i)}{h} \\sum_{k=0}^{4} a_k$. To eliminate this term, we must have:\n    $$ \\sum_{k=0}^{4} a_k = 0 $$\n    \\item For $j=1$: The term is $\\frac{1}{h} \\frac{h^1 f^{(1)}(x_i)}{1!} \\left( \\sum_{k=0}^{4} k a_k \\right) = f'(x_i) \\sum_{k=0}^{4} k a_k$. For this to equal $f'(x_i)$, we require:\n    $$ \\sum_{k=0}^{4} k a_k = 1 $$\n    \\item For $j=2$: The term is $\\frac{1}{h} \\frac{h^2 f^{(2)}(x_i)}{2!} \\left( \\sum_{k=0}^{4} k^2 a_k \\right) = \\frac{h f''(x_i)}{2} \\sum_{k=0}^{4} k^2 a_k$. To eliminate the $\\mathcal{O}(h)$ error term, we must have:\n    $$ \\sum_{k=0}^{4} k^2 a_k = 0 $$\n    \\item For $j=3$: The term is $\\frac{1}{h} \\frac{h^3 f^{(3)}(x_i)}{3!} \\left( \\sum_{k=0}^{4} k^3 a_k \\right) = \\frac{h^2 f'''(x_i)}{6} \\sum_{k=0}^{4} k^3 a_k$. To eliminate the $\\mathcal{O}(h^2)$ error term:\n    $$ \\sum_{k=0}^{4} k^3 a_k = 0 $$\n    \\item For $j=4$: The term is $\\frac{1}{h} \\frac{h^4 f^{(4)}(x_i)}{4!} \\left( \\sum_{k=0}^{4} k^4 a_k \\right) = \\frac{h^3 f^{(4)}(x_i)}{24} \\sum_{k=0}^{4} k^4 a_k$. To eliminate the $\\mathcal{O}(h^3)$ error term:\n    $$ \\sum_{k=0}^{4} k^4 a_k = 0 $$\n\\end{itemize}\nThe leading term of the truncation error will then be the term for $j=5$, which is of order $\\mathcal{O}(h^4)$, as required by the problem statement.\n\nThese five conditions yield a system of five linear equations for the five unknown coefficients $a_0, a_1, a_2, a_3, a_4$:\n\\begin{align*}\n    a_0 + a_1 + a_2 + a_3 + a_4 &= 0 \\\\\n    0 \\cdot a_0 + 1 \\cdot a_1 + 2 \\cdot a_2 + 3 \\cdot a_3 + 4 \\cdot a_4 &= 1 \\\\\n    0^2 a_0 + 1^2 a_1 + 2^2 a_2 + 3^2 a_3 + 4^2 a_4 &= 0 \\\\\n    0^3 a_0 + 1^3 a_1 + 2^3 a_2 + 3^3 a_3 + 4^3 a_4 &= 0 \\\\\n    0^4 a_0 + 1^4 a_1 + 2^4 a_2 + 3^4 a_3 + 4^4 a_4 &= 0\n\\end{align*}\nThis system can be written in matrix form as:\n$$\n\\begin{pmatrix}\n1 & 1 & 1 & 1 & 1 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 1 & 4 & 9 & 16 \\\\\n0 & 1 & 8 & 27 & 64 \\\\\n0 & 1 & 16 & 81 & 256\n\\end{pmatrix}\n\\begin{pmatrix} a_0 \\\\ a_1 \\\\ a_2 \\\\ a_3 \\\\ a_4 \\end{pmatrix}\n=\n\\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\\\ 0 \\end{pmatrix}\n$$\nThe sub-system for $a_1, a_2, a_3, a_4$ involves a Vandermonde-type matrix. Solving this $4 \\times 4$ system and then using the first equation to find $a_0$ is a straightforward, albeit tedious, procedure. The unique solution to this system is:\n$$ a_0 = -\\frac{25}{12}, \\quad a_1 = 4, \\quad a_2 = -3, \\quad a_3 = \\frac{4}{3}, \\quad a_4 = -\\frac{1}{4} $$\nTo facilitate a cleaner final expression, we can write these coefficients with a common denominator of $12$:\n$$ a_0 = -\\frac{25}{12}, \\quad a_1 = \\frac{48}{12}, \\quad a_2 = -\\frac{36}{12}, \\quad a_3 = \\frac{16}{12}, \\quad a_4 = -\\frac{3}{12} $$\nSubstituting these coefficients into the approximation formula:\n$$\nf'(x_i) \\approx \\frac{1}{h} \\left( -\\frac{25}{12}f(x_i) + \\frac{48}{12}f(x_{i+1}) - \\frac{36}{12}f(x_{i+2}) + \\frac{16}{12}f(x_{i+3}) - \\frac{3}{12}f(x_{i+4}) \\right)\n$$\nFactoring out the common denominator of $12$ gives the final closed-form expression for the fourth-order accurate forward-difference approximation to the first derivative:\n$$\nf'(x_i) \\approx \\frac{1}{12h} \\left( -25f(x_i) + 48f(x_{i+1}) - 36f(x_{i+2}) + 16f(x_{i+3}) - 3f(x_{i+4}) \\right)\n$$\nThis completes the derivation.", "answer": "$$\\boxed{\\frac{1}{12h} \\left( -25f(x_i) + 48f(x_{i+1}) - 36f(x_{i+2}) + 16f(x_{i+3}) - 3f(x_{i+4}) \\right)}$$", "id": "2401286"}, {"introduction": "Building on the derivation of explicit stencils, we now explore the powerful class of compact (or implicit) finite difference schemes. This comprehensive exercise challenges you to derive, implement, and analyze a fourth-order compact scheme, which offers superior accuracy for a given stencil width [@problem_id:2401303]. A key focus is the introduction to spectral analysis, where you will compute the scheme's *modified wavenumber*—a vital tool for understanding and quantifying numerical dispersion and dissipation errors.", "problem": "Implement a compact finite difference method for approximating the first derivative on a periodic, uniform grid and analyze its spectral properties using only principles derivable from Taylor series and Fourier analysis.\n\nYou must proceed from the following fundamental bases:\n- The first derivative of a sufficiently smooth function $f$ at a point $x$ is defined as $f^{\\prime}(x) = \\lim_{h \\to 0} \\frac{f(x+h) - f(x)}{h}$.\n- The Taylor series of a smooth function about a point $x$ is $f(x \\pm h) = f(x) \\pm h f^{\\prime}(x) + \\frac{h^{2}}{2} f^{\\prime\\prime}(x) \\pm \\frac{h^{3}}{6} f^{(3)}(x) + \\frac{h^{4}}{24} f^{(4)}(x) \\pm \\frac{h^{5}}{120} f^{(5)}(x) + \\cdots$.\n- On a periodic uniform grid $x_{j} = x_{0} + j h$ with spacing $h$, a discrete Fourier mode is $e^{i k x_{j}}$, where $i$ is the imaginary unit and $k$ is the wavenumber. The nondimensional wavenumber is $\\theta = k h$ in radians.\n\nTask A (derivation of the compact scheme coefficients):\n- Assume an implicit, three-point, symmetric compact Padé stencil for the first derivative of the form $\\alpha f^{\\prime}_{i-1} + f^{\\prime}_{i} + \\alpha f^{\\prime}_{i+1} = \\frac{\\beta}{h} \\left(f_{i+1} - f_{i-1}\\right)$, where $\\alpha$ and $\\beta$ are constants independent of $h$ and index $i$.\n- Using Taylor series consistency about $x_{i}$, determine $\\alpha$ and $\\beta$ so that the truncation error is of order $h^{4}$, i.e., the scheme is fourth-order accurate.\n\nTask B (implementation on a periodic grid):\n- On the domain $[0,1)$ with periodic boundary conditions, construct the linear system implied by the compact stencil to compute the discrete derivative vector $\\boldsymbol{d}$ from sampled function values $\\boldsymbol{f}$ on a uniform grid of $N$ points using the coefficients $(\\alpha,\\beta)$ derived in Task A.\n- The matrix acting on $\\boldsymbol{d}$ is tridiagonal with wrap-around (cyclic) entries due to periodicity.\n\nTask C (observed order of accuracy test):\n- Using $f(x) = \\sin(2 \\pi x)$ and exact derivative $f^{\\prime}(x) = 2 \\pi \\cos(2 \\pi x)$, compute the maximum-norm error $E_{\\infty}(N)$ between the discrete derivative and the exact derivative for $N \\in \\{32, 64, 128\\}$ on $[0,1)$.\n- Compute the observed orders $p_{32 \\to 64} = \\log_{2}\\left( \\frac{E_{\\infty}(32)}{E_{\\infty}(64)} \\right)$ and $p_{64 \\to 128} = \\log_{2}\\left( \\frac{E_{\\infty}(64)}{E_{\\infty}(128)} \\right)$.\n\nTask D (spectral dispersion and dissipation analysis):\n- For a periodic, linear, shift-invariant discrete derivative operator, a Fourier mode $e^{i k x}$ is an eigenfunction: applying the operator yields $i \\tilde{k} e^{i k x}$ for some modified wavenumber $\\tilde{k}$. Define the nondimensional modified wavenumber as $\\tilde{\\theta} = \\tilde{k} h$.\n- Using Fourier analysis of the compact stencil, express $\\tilde{\\theta}$ as a function of $\\theta$ and $(\\alpha,\\beta)$. Then, for the test angles $\\theta \\in \\{0.1, 0.5, 1.0, 1.5, 2.5\\}$ (all in radians), compute the absolute dispersion errors $|\\tilde{\\theta} - \\theta|$ and report them as a list in the given order.\n- Assess numerical dissipation by sampling a dense set of angles $\\theta$ uniformly over $[0,\\pi]$ (inclusive) in radians and computing the maximum absolute value of the imaginary part of $\\tilde{\\theta}$ over the sample. Report this maximum as a single float.\n\nTest suite and required final output:\n- Your program must run the following test suite in order and aggregate the results:\n  1. Compute $p_{32 \\to 64}$ from Task C.\n  2. Compute $p_{64 \\to 128}$ from Task C.\n  3. Compute the list of absolute dispersion errors for $\\theta \\in \\{0.1, 0.5, 1.0, 1.5, 2.5\\}$ in radians from Task D.\n  4. Compute the maximum dissipation metric from Task D, defined as the maximum absolute value of the imaginary part of $\\tilde{\\theta}$ over a uniform grid of $\\theta$ values in $[0,\\pi]$ with $1001$ points.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with the third entry itself being a list, i.e., in the exact format: \"[p32_64,p64_128,[e_theta0.1,e_theta0.5,e_theta1.0,e_theta1.5,e_theta2.5],max_dissipation]\".\n- All angles are in radians. No physical units arise in this problem.\n\nYour implementation must be fully self-contained, use periodic boundary conditions, and must not rely on any external data or user input. The numerical linear algebra must be performed using only allowed libraries, and your output values must be floating-point numbers. Ensure scientific realism by deriving the coefficients $(\\alpha,\\beta)$ from Taylor consistency and by computing the modified wavenumber via Fourier analysis of the implemented scheme, not by importing any pre-tabulated formula.", "solution": "The problem presented is a standard, well-posed exercise in computational physics concerning the derivation, implementation, and analysis of a high-order finite difference scheme. All provided information is self-contained, scientifically grounded, and objective. The tasks are logically structured and lead to a unique, verifiable solution. Therefore, the problem is deemed valid and a complete solution will be provided.\n\nThe objective is to formulate and analyze a fourth-order compact finite difference scheme for the first derivative on a periodic, uniform grid. The analysis will proceed in four parts as specified: derivation of coefficients, implementation details, numerical verification of accuracy, and spectral analysis of dispersion and dissipation properties.\n\n**Part A: Derivation of the Compact Scheme Coefficients**\n\nWe are given a symmetric, three-point compact stencil for the first derivative $f'_{i} \\approx d_{i}$:\n$$\n\\alpha d_{i-1} + d_{i} + \\alpha d_{i+1} = \\frac{\\beta}{h} \\left(f_{i+1} - f_{i-1}\\right)\n$$\nwhere $f_i = f(x_i)$, $d_i = f'(x_i)$, and $h$ is the uniform grid spacing. To find the coefficients $\\alpha$ and $\\beta$ that yield a fourth-order accurate scheme, we enforce consistency using Taylor series expansions around the point $x_i$.\nThe terms in the stencil are expanded as:\n$$\nf_{i\\pm1} = f(x_i \\pm h) = f_i \\pm h f'_i + \\frac{h^2}{2} f''_i \\pm \\frac{h^3}{6} f^{(3)}_i + \\frac{h^4}{24} f^{(4)}_i \\pm \\frac{h^5}{120} f^{(5)}_i + O(h^6)\n$$\n$$\nd_{i\\pm1} = f'(x_i \\pm h) = f'_i \\pm h f''_i + \\frac{h^2}{2} f^{(3)}_i \\pm \\frac{h^3}{6} f^{(4)}_i + \\frac{h^4}{24} f^{(5)}_i + O(h^5)\n$$\nSubstituting these expansions into the stencil equation, we analyze the left-hand side (LHS) and right-hand side (RHS) separately.\n\nLHS:\n\\begin{align*}\n\\alpha d_{i-1} + d_{i} + \\alpha d_{i+1} &= \\alpha \\left(f'_i - h f''_i + \\frac{h^2}{2} f^{(3)}_i - \\frac{h^3}{6} f^{(4)}_i + \\frac{h^4}{24} f^{(5)}_i\\right) + f'_i \\\\\n&\\quad+ \\alpha \\left(f'_i + h f''_i + \\frac{h^2}{2} f^{(3)}_i + \\frac{h^3}{6} f^{(4)}_i + \\frac{h^4}{24} f^{(5)}_i\\right) + O(h^5) \\\\\n&= (1+2\\alpha)f'_i + \\alpha h^2 f^{(3)}_i + \\frac{\\alpha h^4}{12} f^{(5)}_i + O(h^6)\n\\end{align*}\n\nRHS:\n\\begin{align*}\n\\frac{\\beta}{h} (f_{i+1} - f_{i-1}) &= \\frac{\\beta}{h} \\left( (f_i + h f'_i + \\frac{h^2}{2}f''_i + \\frac{h^3}{6}f^{(3)}_i + \\frac{h^4}{24}f^{(4)}_i + \\frac{h^5}{120}f^{(5)}_i) \\right. \\\\\n&\\quad \\left. - (f_i - h f'_i + \\frac{h^2}{2}f''_i - \\frac{h^3}{6}f^{(3)}_i + \\frac{h^4}{24}f^{(4)}_i - \\frac{h^5}{120}f^{(5)}_i) \\right) + O(h^5) \\\\\n&= \\frac{\\beta}{h} \\left( 2h f'_i + \\frac{2h^3}{6}f^{(3)}_i + \\frac{2h^5}{120}f^{(5)}_i \\right) + O(h^5) \\\\\n&= 2\\beta f'_i + \\frac{\\beta h^2}{3} f^{(3)}_i + \\frac{\\beta h^4}{60} f^{(5)}_i + O(h^5)\n\\end{align*}\n\nTo achieve the highest possible order of accuracy, we equate the coefficients of corresponding derivative terms on the LHS and RHS.\n\\begin{itemize}\n    \\item Coefficient of $f'_i$: $1+2\\alpha = 2\\beta$\n    \\item Coefficient of $f^{(3)}_i$: $\\alpha = \\frac{\\beta}{3}$\n\\end{itemize}\nThis forms a system of two linear equations for $\\alpha$ and $\\beta$. Substituting the second equation into the first gives:\n$$\n1 + 2\\alpha = 2(3\\alpha) = 6\\alpha \\implies 1 = 4\\alpha \\implies \\alpha = \\frac{1}{4}\n$$\nFrom this, we find $\\beta$:\n$$\n\\beta = 3\\alpha = 3 \\left(\\frac{1}{4}\\right) = \\frac{3}{4}\n$$\nThe scheme is defined by $\\alpha = 1/4$ and $\\beta = 3/4$.\n\nThe leading term of the truncation error, $\\tau$, is the first non-canceling term, which involves $f^{(5)}_i$:\n$$\n\\tau = \\left( \\frac{\\beta h^4}{60} - \\frac{\\alpha h^4}{12} \\right) f^{(5)}_i = h^4 \\left( \\frac{3/4}{60} - \\frac{1/4}{12} \\right) f^{(5)}_i = h^4 \\left( \\frac{3}{240} - \\frac{5}{240} \\right) f^{(5)}_i = -\\frac{2h^4}{240} f^{(5)}_i = -\\frac{h^4}{120} f^{(5)}_i\n$$\nThe local truncation error is $O(h^4)$, so the scheme is fourth-order accurate.\n\n**Part B: Implementation on a Periodic Grid**\n\nFor a grid with $N$ points $x_j = j h$ for $j=0, \\dots, N-1$ and $h=1/N$ on the domain $[0,1)$, the compact scheme defines a linear system for the vector of discrete derivatives $\\boldsymbol{d} = [d_0, d_1, \\dots, d_{N-1}]^T$. The equation at each grid point $j$ is:\n$$\n\\frac{1}{4}d_{j-1} + d_j + \\frac{1}{4}d_{j+1} = \\frac{3}{4h}(f_{j+1} - f_{j-1})\n$$\nDue to periodic boundary conditions, indices are taken modulo $N$. This system can be written in matrix form as $A \\boldsymbol{d} = \\boldsymbol{b}$, where:\n\\begin{itemize}\n    \\item $A$ is an $N \\times N$ circulant matrix defined by its first row $[1, \\alpha, 0, \\dots, 0, \\alpha]$:\n    $$\n    A = \\begin{pmatrix}\n    1 & \\alpha & 0 & \\cdots & 0 & \\alpha \\\\\n    \\alpha & 1 & \\alpha & \\cdots & 0 & 0 \\\\\n    0 & \\alpha & 1 & \\cdots & 0 & 0 \\\\\n    \\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\n    0 & 0 & 0 & \\cdots & 1 & \\alpha \\\\\n    \\alpha & 0 & 0 & \\cdots & \\alpha & 1\n    \\end{pmatrix}\n    $$\n    \\item $\\boldsymbol{b}$ is the right-hand side vector with elements $b_j = \\frac{\\beta}{h}(f_{j+1} - f_{j-1})$.\n\\end{itemize}\nThis circulant linear system is efficiently solved to find the numerical derivatives $\\boldsymbol{d}$.\n\n**Part C: Numerical Verification of Accuracy**\n\nTo verify the theoretical fourth-order accuracy, we compute the numerical derivative of $f(x) = \\sin(2\\pi x)$ on $[0,1)$, whose exact derivative is $f'(x) = 2\\pi\\cos(2\\pi x)$. We use grid sizes $N \\in \\{32, 64, 128\\}$. The error is measured in the maximum norm:\n$$\nE_{\\infty}(N) = \\max_{j=0,\\dots,N-1} |d_j - f'(x_j)|\n$$\nThe observed order of accuracy $p$ is calculated between two grid resolutions $N_1$ and $N_2=2N_1$ as:\n$$\np = \\log_2 \\left( \\frac{E_{\\infty}(N_1)}{E_{\\infty}(N_2)} \\right)\n$$\nFor a fourth-order scheme, we expect $p \\approx 4$.\n\n**Part D: Spectral Analysis**\n\nThe spectral properties of the discrete operator are analyzed by applying it to a single Fourier mode $f_j = e^{ikx_j} = e^{i\\theta j}$, where $\\theta=kh$ is the nondimensional wavenumber. The numerical differentiation operator $\\mathcal{D}$ transforms this mode as $\\mathcal{D}(e^{i\\theta j}) = i\\tilde{k} e^{i\\theta j} = \\frac{i\\tilde{\\theta}}{h} e^{i\\theta j}$, where $\\tilde{\\theta} = \\tilde{k}h$ is the modified wavenumber. The exact derivative gives $ik e^{ikx_j} = \\frac{i\\theta}{h}e^{i\\theta j}$.\n\nSubstituting $f_j = e^{i\\theta j}$ and $d_j = \\frac{i\\tilde{\\theta}}{h} e^{i\\theta j}$ into the stencil equation:\n$$\n\\alpha \\frac{i\\tilde{\\theta}}{h} e^{i\\theta(j-1)} + \\frac{i\\tilde{\\theta}}{h} e^{i\\theta j} + \\alpha \\frac{i\\tilde{\\theta}}{h} e^{i\\theta(j+1)} = \\frac{\\beta}{h} \\left( e^{i\\theta(j+1)} - e^{i\\theta(j-1)} \\right)\n$$\nDividing by $\\frac{i}{h}e^{i\\theta j}$ yields:\n$$\n\\tilde{\\theta}(\\alpha e^{-i\\theta} + 1 + \\alpha e^{i\\theta}) = \\frac{\\beta}{i} (e^{i\\theta} - e^{-i\\theta})\n$$\nUsing Euler's identities, $e^{i\\theta} + e^{-i\\theta} = 2\\cos\\theta$ and $e^{i\\theta} - e^{-i\\theta} = 2i\\sin\\theta$:\n$$\n\\tilde{\\theta}(1 + 2\\alpha\\cos\\theta) = \\frac{\\beta}{i}(2i\\sin\\theta) = 2\\beta\\sin\\theta\n$$\nSolving for the modified wavenumber $\\tilde{\\theta}$:\n$$\n\\tilde{\\theta}(\\theta) = \\frac{2\\beta \\sin\\theta}{1 + 2\\alpha \\cos\\theta}\n$$\nSubstituting $\\alpha = 1/4$ and $\\beta = 3/4$:\n$$\n\\tilde{\\theta}(\\theta) = \\frac{2(3/4) \\sin\\theta}{1 + 2(1/4) \\cos\\theta} = \\frac{3/2 \\sin\\theta}{1 + 1/2 \\cos\\theta} = \\frac{3 \\sin\\theta}{2 + \\cos\\theta}\n$$\n\nThe numerical dispersion error is the difference between the modified and exact wavenumbers, $|\\tilde{\\theta} - \\theta|$. We compute this for the specified $\\theta$ values.\n\nNumerical dissipation is related to the imaginary part of the modified wavenumber, $\\text{Im}(\\tilde{\\theta})$. For a symmetric scheme with real coefficients, operating on real $\\theta$, the resulting $\\tilde{\\theta}$ is purely real. This is evident from its analytical form. Consequently, $\\text{Im}(\\tilde{\\theta}) = 0$ for all $\\theta \\in [0, \\pi]$. This indicates the scheme is non-dissipative, meaning it does not artificially damp wave amplitudes. A computation of the maximum absolute imaginary part over the given range will confirm this by yielding a value of $0.0$.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import solve_circulant\n\ndef solve():\n    \"\"\"\n    Derives, implements, and analyzes a fourth-order compact finite difference scheme.\n    \"\"\"\n    # Task A: Coefficients derived from Taylor series analysis.\n    # alpha * f'_{i-1} + f'_{i} + alpha * f'_{i+1} = (beta/h) * (f_{i+1} - f_{i-1})\n    # For fourth-order accuracy, alpha = 1/4 and beta = 3/4.\n    alpha = 1.0 / 4.0\n    beta = 3.0 / 4.0\n\n    # Task C: Observed order of accuracy test\n    grid_sizes = [32, 64, 128]\n    errors = {}\n\n    for N in grid_sizes:\n        # Construct grid on [0, 1)\n        h = 1.0 / N\n        x = np.arange(N) * h\n\n        # Test function and its exact derivative\n        f_vals = np.sin(2 * np.pi * x)\n        d_exact = 2 * np.pi * np.cos(2 * np.pi * x)\n\n        # Task B: Construct and solve the linear system\n        # A * d = b, where A is a circulant matrix\n        \n        # Construct the right-hand side vector b\n        # b_j = (beta/h) * (f_{j+1} - f_{j-1})\n        f_plus_1 = np.roll(f_vals, -1)\n        f_minus_1 = np.roll(f_vals, 1)\n        b = (beta / h) * (f_plus_1 - f_minus_1)\n\n        # The matrix A is circulant. Its first column defines it completely.\n        # First column of A is [1, alpha, 0, ..., 0, alpha]\n        A_col = np.zeros(N)\n        A_col[0] = 1.0\n        A_col[1] = alpha\n        A_col[-1] = alpha\n        \n        # Solve the circulant system A * d = b for the numerical derivative d\n        d_numerical = solve_circulant(A_col, b)\n\n        # Compute the maximum-norm error\n        errors[N] = np.max(np.abs(d_numerical - d_exact))\n\n    # Compute observed orders of accuracy\n    p32_64 = np.log2(errors[32] / errors[64])\n    p64_128 = np.log2(errors[64] / errors[128])\n\n    # Task D: Spectral dispersion and dissipation analysis\n    # Modified wavenumber function derived analytically\n    def modified_wavenumber(theta):\n        # With alpha=1/4 and beta=3/4, tilde_theta = (3*sin(theta)) / (2 + cos(theta))\n        return (3.0 * np.sin(theta)) / (2.0 + np.cos(theta))\n\n    # Compute dispersion errors\n    thetas_test = np.array([0.1, 0.5, 1.0, 1.5, 2.5])\n    mod_thetas_test = modified_wavenumber(thetas_test)\n    dispersion_errors = np.abs(mod_thetas_test - thetas_test).tolist()\n\n    # Compute maximum dissipation\n    # The scheme is non-dissipative, so Im(tilde_theta) is analytically zero.\n    # The calculation is performed as requested by the problem statement.\n    thetas_dissipation = np.linspace(0, np.pi, 1001)\n    mod_thetas_dissipation = modified_wavenumber(thetas_dissipation)\n    # The imaginary part is zero due to the analytical form (real inputs, real outputs).\n    # np.imag is used for formal correctness.\n    max_dissipation = np.max(np.abs(np.imag(mod_thetas_dissipation)))\n\n    # Final assembly of results in the required format\n    # The third item is a list, which needs to be stringified without spaces.\n    disp_err_str = str(dispersion_errors).replace(\" \", \"\")\n    \n    # The f-string will use the string representation of each element.\n    # The final list of results printed will have the required format.\n    final_results = [p32_64, p64_128, disp_err_str, max_dissipation]\n    \n    print(f\"[{final_results[0]},{final_results[1]},{final_results[2]},{final_results[3]}]\")\n\nsolve()\n```", "id": "2401303"}, {"introduction": "The previous analysis of the modified wavenumber was abstract; this final practice makes its consequences tangible. Here, you will design and run a computational experiment to observe numerical dispersion directly by simulating the propagation of a wave packet [@problem_id:2401300]. By measuring the packet's group velocity and comparing it to the theoretical value predicted by the scheme's dispersion relation, you will gain a profound, physical intuition for how high-order schemes affect wave propagation, and why this is a central concern in computational physics.", "problem": "You are asked to design, derive, and implement a computational experiment to measure the group velocity of a modulated wave packet advected by the one-dimensional linear advection equation and to compare it with the theoretical group velocity induced by a high-order centered finite difference spatial discretization.\n\nConsider the one-dimensional advection equation with periodic boundary conditions on the domain $[0,L]$,\n$$\n\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} = 0,\n$$\nwhere $u=u(x,t)$ is complex-valued, $c$ is a constant wave speed, $x \\in [0,L]$, and $t \\ge 0$. A discretization in space is performed on a uniform grid with $N$ points and spacing $\\Delta x=L/N$. The time evolution is computed using a stable explicit method. The initial condition is a Gaussian-modulated plane wave (a wave packet) with carrier wavenumber $k_0$ and envelope width $\\sigma$ centered at $x_0$:\n$$\nu(x,0) = \\exp\\!\\left( -\\frac{(x-x_0)^2}{2\\sigma^2} \\right) \\exp\\!\\left(i k_0 (x-x_0)\\right).\n$$\nYou will measure the packet’s center of mass of the envelope and infer its group velocity numerically, then compare it to the theoretical group velocity implied by the chosen high-order finite difference scheme.\n\nFundamental base and derivation tasks that your solution and code must embody:\n- Start from the linearity and constant coefficients of the advection equation and the Fourier representation of solutions. For a semi-discrete method-of-lines using a centered finite difference approximation of nominal order $p \\in \\{2,4,6\\}$ for the first derivative, the spatial discrete operator is a convolution with an anti-symmetric stencil. For a Fourier mode $e^{i k x}$, this operator has a purely imaginary symbol $i\\,\\widetilde{k}(k)$, where $\\widetilde{k}(k)$ is the modified wavenumber. Therefore, the semi-discrete system for a Fourier mode is $\\frac{d\\widehat{u}}{dt} + i\\,c\\,\\widetilde{k}(k)\\widehat{u}=0$, implying a numerical dispersion relation $\\omega_{\\text{num}}(k)=c\\,\\widetilde{k}(k)$ and theoretical group velocity $v_{g,\\text{theory}}(k)=\\frac{d\\omega_{\\text{num}}}{dk}(k)$.\n- For a centered explicit $p$th-order finite difference stencil for the first derivative with weights $\\{w_m\\}_{m=1}^M$ such that\n$$\n\\left.\\frac{\\partial u}{\\partial x}\\right|_{x_i} \\approx \\frac{1}{\\Delta x}\\sum_{m=1}^{M} w_m \\left(u_{i+m}-u_{i-m}\\right),\n$$\nthe discrete Fourier symbol is $i\\,\\widetilde{k}(k)$ with\n$$\n\\widetilde{k}(k) = \\frac{1}{\\Delta x} \\sum_{m=1}^{M} 2 w_m \\sin(m \\theta), \\quad \\theta = k\\,\\Delta x,\n$$\nand thus\n$$\nv_{g,\\text{theory}}(k) = c \\sum_{m=1}^M m \\cdot (2 w_m) \\cos(m\\theta), \\quad \\theta=k\\,\\Delta x.\n$$\nYou must derive the explicit weights $\\{w_m\\}$ for nominal orders $p=2,4,6$ before implementing them.\n\nNumerical experiment design constraints:\n- Use the domain length $L=2\\pi$ meters, wave speed $c=1$ meter per second, number of grid points $N=1024$, and periodic boundary conditions. Angles must be treated in radians. Use the fourth-order Runge–Kutta (RK4) method for time integration with fixed time step $\\Delta t=\\mu\\,\\Delta x/c$, Courant–Friedrichs–Lewy (CFL) number $\\mu=0.2$. Integrate to the final time $T=1.5$ seconds. Make $x_0=L/3$ meters and $\\sigma=L/20$ meters.\n- To ensure the carrier is grid-resolvable and periodic, set $k_0 = 2\\pi m_0/L$ with integer $m_0$.\n- Estimate the measured group velocity $v_{g,\\text{measured}}$ by tracking the center of mass of the envelope using the nonnegative weight $|u(x,t)|^2$ and a circular (periodic) mean on $[0,L]$ to correctly handle wrap-around. Compute $v_{g,\\text{measured}} = \\Delta x_{\\text{cm}}/T$, where $\\Delta x_{\\text{cm}}$ is the shortest periodic displacement between the initial and final centers of mass.\n- Compute the theoretical group velocity $v_{g,\\text{theory}}$ from your derived formula for the chosen order $p$ and carrier $k_0$.\n- For each test case, report the absolute error $|v_{g,\\text{measured}} - v_{g,\\text{theory}}|$ in meters per second as a float rounded to six decimal places.\n\nTest suite:\nUse the following parameter sets where each case is a pair $(p,m_0)$:\n- Case A (happy path): $(p,m_0)=(6,24)$.\n- Case B (lower-order comparison): $(p,m_0)=(4,24)$.\n- Case C (small-wavenumber limit): $(p,m_0)=(6,4)$.\n- Case D (high-wavenumber edge case): $(p,m_0)=(6,128)$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets in the order [CaseA,CaseB,CaseC,CaseD], for example, \"[0.000123,0.000456,0.000789,0.000012]\". Each entry must be the absolute error in meters per second rounded to six decimal places.", "solution": "The problem as stated is a well-posed and scientifically sound exercise in computational physics. It requires the derivation, implementation, and analysis of a numerical scheme for the linear advection equation, focusing on the phenomenon of numerical dispersion. The problem is self-contained, with all parameters and methods specified. We shall proceed with the solution.\n\nThe fundamental equation is the one-dimensional linear advection equation for a complex-valued field $u(x,t)$, given by\n$$\n\\frac{\\partial u}{\\partial t} + c \\frac{\\partial u}{\\partial x} = 0\n$$\non a periodic domain $x \\in [0,L]$. The constant $c$ is the phase and group velocity of the exact continuous system. The linearity of this partial differential equation permits solutions to be constructed from a superposition of Fourier modes of the form $u_k(x,t) = \\widehat{u}_k(t) e^{i k x}$, where $k$ is the wavenumber. Substituting such a mode into the equation yields an ordinary differential equation for the amplitude $\\widehat{u}_k(t)$:\n$$\n\\frac{d\\widehat{u}_k}{dt} + c (i k) \\widehat{u}_k = 0\n$$\nThe solution is $\\widehat{u}_k(t) = \\widehat{u}_k(0) e^{-i c k t}$. This gives the exact dispersion relation $\\omega(k) = c k$. The corresponding group velocity, which governs the propagation of wave packets, is $v_g(k) = \\frac{d\\omega}{dk} = c$. In the exact system, all waves travel at the same speed $c$ without distortion, meaning it is non-dispersive.\n\nWe analyze the system discretized in space but continuous in time (method of lines). The spatial domain is discretized into $N$ points $x_j = j \\Delta x$ for $j = 0, \\dots, N-1$, where $\\Delta x = L/N$. The spatial derivative $\\frac{\\partial u}{\\partial x}$ is approximated by a $p$-th order centered finite difference operator, $D_x$. For a grid function $u_j(t) = u(x_j, t)$, the semi-discrete system is:\n$$\n\\frac{du_j}{dt} + c (D_x u)_j = 0\n$$\nThe operator $D_x$ is a linear convolution with an anti-symmetric stencil. When applied to a discrete Fourier mode $e^{i k x_j}$, it acts as multiplication by a purely imaginary number $i \\widetilde{k}(k)$, where $\\widetilde{k}(k)$ is the *modified wavenumber*. The semi-discrete equation for a Fourier mode becomes:\n$$\n\\frac{d\\widehat{u}_k}{dt} + c (i \\widetilde{k}(k)) \\widehat{u}_k = 0\n$$\nThis yields a numerical dispersion relation $\\omega_{\\text{num}}(k) = c \\widetilde{k}(k)$. The numerical group velocity is then $v_{g,\\text{num}}(k) = \\frac{d\\omega_{\\text{num}}}{dk}$. Because $\\widetilde{k}(k)$ is generally not equal to $k$, the numerical group velocity $v_{g,\\text{num}}$ depends on $k$, a phenomenon known as numerical dispersion.\n\nThe problem specifies a centered stencil of the form:\n$$\n(D_x u)_i = \\frac{1}{\\Delta x} \\sum_{m=1}^{M} w_m (u_{i+m} - u_{i-m})\n$$\nTo determine the unknown weights $\\{w_m\\}$ for a scheme of nominal order $p=2M$, we use Taylor series expansions of $u(x \\pm m\\Delta x)$ around $x$:\n$$\nu(x+m\\Delta x) - u(x-m\\Delta x) = \\sum_{n=0}^{\\infty} \\frac{2(m\\Delta x)^{2n+1}}{(2n+1)!} \\frac{d^{2n+1}u}{dx^{2n+1}}\n$$\nSubstituting this into the finite difference formula and dividing by $\\Delta x$ yields:\n$$\n(D_x u)(x) = \\sum_{m=1}^{M} w_m \\sum_{n=0}^{\\infty} \\frac{2 m^{2n+1}(\\Delta x)^{2n}}{(2n+1)!} u^{(2n+1)}(x)\n$$\nReordering the sums, we get an expression for the operator in terms of derivatives of $u$:\n$$\n(D_x u)(x) = \\left( \\sum_{m=1}^{M} 2m w_m \\right) u'(x) + \\left( \\sum_{m=1}^{M} \\frac{m^3 w_m}{3} \\right) (\\Delta x)^2 u'''(x) + \\left( \\sum_{m=1}^{M} \\frac{m^5 w_m}{60} \\right) (\\Delta x)^4 u^{(5)}(x) + \\dots\n$$\nFor a $p$-th order accurate scheme, we require the coefficient of $u'(x)$ to be $1$ and the coefficients of $u'''(x), u^{(5)}(x), \\dots, u^{(p-1)}(x)$ to be $0$. This yields a system of linear equations for the weights $w_m$.\n\nFor $p=2$ ($M=1$):\n$2(1)w_1 = 1 \\implies w_1 = 1/2$.\n\nFor $p=4$ ($M=2$):\n$2w_1 + 4w_2 = 1$\n$w_1 + 8w_2 = 0$\nSolving this system yields $w_1 = 2/3$ and $w_2 = -1/12$.\n\nFor $p=6$ ($M=3$):\n$2w_1 + 4w_2 + 6w_3 = 1$\n$w_1 + 8w_2 + 27w_3 = 0$\n$w_1 + 32w_2 + 243w_3 = 0$\nSolving this system gives $w_1 = 3/4$, $w_2 = -3/20$, and $w_3 = 1/60$.\n\nNext, we derive the theoretical group velocity. Applying the stencil to a mode $e^{i k x}$ at $x_j$, we find:\n$$\nD_x e^{ikx_j} = \\frac{1}{\\Delta x} \\sum_{m=1}^M w_m (e^{ik(x_j+m\\Delta x)} - e^{ik(x_j-m\\Delta x)}) = e^{ikx_j} \\frac{1}{\\Delta x} \\sum_{m=1}^M w_m (e^{imk\\Delta x} - e^{-imk\\Delta x})\n$$\nUsing Euler's formula $e^{i\\phi}-e^{-i\\phi} = 2i\\sin(\\phi)$, and letting $\\theta = k\\Delta x$:\n$$\nD_x e^{ikx_j} = e^{ikx_j} \\frac{2i}{\\Delta x} \\sum_{m=1}^M w_m \\sin(m\\theta)\n$$\nThis confirms the symbol is $i\\widetilde{k}(k)$ where the modified wavenumber is $\\widetilde{k}(k) = \\frac{2}{\\Delta x} \\sum_{m=1}^M w_m \\sin(m\\theta)$.\nThe numerical dispersion relation is $\\omega_{\\text{num}}(k) = c \\widetilde{k}(k)$. The theoretical group velocity is its derivative with respect to $k$:\n$$\nv_{g,\\text{theory}}(k) = \\frac{d\\omega_{\\text{num}}}{dk} = c \\frac{d\\widetilde{k}}{dk} = c \\frac{d\\widetilde{k}}{d\\theta} \\frac{d\\theta}{dk} = c \\left( \\frac{2}{\\Delta x} \\sum_{m=1}^M w_m \\cdot m\\cos(m\\theta) \\right) \\Delta x\n$$\n$$\nv_{g,\\text{theory}}(k) = c \\sum_{m=1}^M 2 m w_m \\cos(m k \\Delta x)\n$$\nUsing the derived weights, we obtain the explicit formulas:\nFor $p=2$: $v_{g,\\text{theory}}(k) = c \\cos(k \\Delta x)$.\nFor $p=4$: $v_{g,\\text{theory}}(k) = c \\left( \\frac{4}{3} \\cos(k \\Delta x) - \\frac{1}{3} \\cos(2 k \\Delta x) \\right)$.\nFor $p=6$: $v_{g,\\text{theory}}(k) = c \\left( \\frac{3}{2} \\cos(k \\Delta x) - \\frac{3}{5} \\cos(2 k \\Delta x) + \\frac{1}{10} \\cos(3 k \\Delta x) \\right)$.\nThese formulae will be used to compute the theoretical group velocity for each test case.\n\nThe numerical experiment is designed as follows.\nThe domain is $L=2\\pi$ with $N=1024$ points, giving $\\Delta x = 2\\pi/1024$. The wave speed is $c=1$.\nThe initial condition is a wave packet $u(x,0) = \\exp\\!\\left( -\\frac{(x-x_0)^2}{2\\sigma^2} \\right) \\exp\\!\\left(i k_0 (x-x_0)\\right)$, with $x_0=L/3$, $\\sigma=L/20$, and carrier wavenumber $k_0 = 2\\pi m_0/L = m_0$.\nThe semi-discrete system $\\frac{d\\mathbf{u}}{dt} = -c D_x \\mathbf{u}$ is integrated in time using the classical fourth-order Runge-Kutta (RK4) method with a fixed time step $\\Delta t = \\mu \\Delta x / c$, where $\\mu=0.2$. Integration proceeds until $T=1.5$.\nThe spatial derivative term $D_x \\mathbf{u}$ is computed efficiently using the Fast Fourier Transform (FFT). The operation is a periodic convolution, which in Fourier space becomes a simple multiplication: $D_x \\mathbf{u} = \\mathcal{F}^{-1}\\{ i \\widetilde{k}(\\mathbf{k}) \\mathcal{F}\\{\\mathbf{u}\\} \\}$, where $\\mathbf{k}$ is the vector of discrete grid wavenumbers.\nThe group velocity is measured by tracking the packet's envelope. The center of mass of the probability density $|u(x,t)|^2$ is a robust measure of the packet's position. For a periodic domain, the center of mass $x_{\\text{cm}}$ is computed via the argument of the first circular moment:\n$$\nx_{\\text{cm}}(t) = \\frac{L}{2\\pi} \\arg\\left( \\sum_{j=0}^{N-1} |u(x_j, t)|^2 e^{i 2\\pi x_j/L} \\right)\n$$\nThe `arg` function returns a value in $(-\\pi, \\pi]$, which maps to a position in $(-L/2, L/2]$. We map this to $[0, L)$ for consistency.\nThe initial and final positions, $x_{\\text{cm}}(0)$ and $x_{\\text{cm}}(T)$, are computed. The shortest periodic displacement is $\\Delta x_{\\text{cm}} = ( (x_{\\text{cm}}(T) - x_{\\text{cm}}(0) + L/2) \\pmod L ) - L/2$. The measured group velocity is then $v_{g,\\text{measured}} = \\Delta x_{\\text{cm}} / T$.\nFinally, the absolute error $|v_{g,\\text{measured}} - v_{g,\\text{theory}}(k_0)|$ is calculated for each test case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Designs, derives, and implements a computational experiment to measure \n    the group velocity of a modulated wave packet and compare it with the \n    theoretical group velocity from a high-order finite difference scheme.\n    \"\"\"\n\n    # -- Problem Parameters --\n    L = 2.0 * np.pi  # Domain length (meters)\n    c = 1.0          # Wave speed (m/s)\n    N = 1024         # Number of grid points\n    mu = 0.2         # CFL number\n    T = 1.5          # Final time (seconds)\n    x0 = L / 3.0     # Initial packet center (meters)\n    sigma = L / 20.0 # Packet width (meters)\n\n    # -- Discretization --\n    dx = L / N\n    x = np.linspace(0, L, N, endpoint=False)\n    dt = mu * dx / c\n    n_steps = int(np.ceil(T / dt))\n\n    # Grid wavenumbers\n    k_vec = 2 * np.pi * np.fft.fftfreq(N, d=dx)\n\n    # -- Stencil Weights for Centered Difference Schemes --\n    # P_map: M, weights\n    p_map = {\n        2: (1, [1/2]),\n        4: (2, [2/3, -1/12]),\n        6: (3, [3/4, -3/20, 1/60])\n    }\n\n    def get_rhs(u, p):\n        \"\"\"\n        Computes the right-hand side of the semi-discrete equation:\n        du/dt = -c * D_x(u)\n        using a p-th order finite difference scheme via FFT.\n        \"\"\"\n        M, weights = p_map[p]\n        \n        # Compute the modified wavenumber k_tilde\n        k_tilde = np.zeros_like(k_vec)\n        for m in range(1, M + 1):\n            w_m = weights[m-1]\n            k_tilde += 2 * w_m * np.sin(m * k_vec * dx) / dx\n        \n        # The symbol of the derivative operator is i*k_tilde\n        u_hat = np.fft.fft(u)\n        rhs_hat = -c * 1j * k_tilde * u_hat\n        \n        return np.fft.ifft(rhs_hat)\n\n    def rk4_step(u, p, dt_val):\n        \"\"\"Performs a single RK4 step.\"\"\"\n        k1 = get_rhs(u, p)\n        k2 = get_rhs(u + dt_val * k1 / 2.0, p)\n        k3 = get_rhs(u + dt_val * k2 / 2.0, p)\n        k4 = get_rhs(u + dt_val * k3, p)\n        return u + dt_val * (k1 + 2*k2 + 2*k3 + k4) / 6.0\n\n    def get_center_of_mass(u):\n        \"\"\"\n        Computes the circular center of mass for the envelope |u|^2.\n        \"\"\"\n        density = np.abs(u)**2\n        # Use phase of the first circular moment\n        # Z = sum(rho_j * exp(i * 2*pi*j / N))\n        Z = np.sum(density * np.exp(1j * 2 * np.pi * np.arange(N) / N))\n        # angle(Z) is in [-pi, pi], corresponds to position in [-L/2, L/2]\n        # map to [0, L)\n        position = (np.angle(Z) * L / (2 * np.pi)) % L\n        return position\n\n    def get_theoretical_group_velocity(k0, p):\n        \"\"\"\n        Computes the theoretical group velocity for wavenumber k0 and order p.\n        \"\"\"\n        M, weights = p_map[p]\n        theta = k0 * dx\n        \n        vg_theory = 0.0\n        for m in range(1, M + 1):\n            w_m = weights[m-1]\n            vg_theory += (2 * m * w_m) * np.cos(m * theta)\n            \n        return c * vg_theory\n\n    def solve_for_case(p, m0):\n        \"\"\"\n        Runs the simulation and computes the error for a given test case.\n        \"\"\"\n        # -- Initial Condition --\n        k0 = 2.0 * np.pi * m0 / L\n        # Ensure x-x0 is periodic for the phase part.\n        dist = x - x0\n        phase = k0 * dist\n        envelope = np.exp(-(dist**2) / (2 * sigma**2))\n        u = envelope * np.exp(1j * phase)\n\n        # -- Get Initial Position --\n        x_cm_initial = get_center_of_mass(u)\n\n        # -- Time Integration --\n        u_final = u.copy()\n        for _ in range(n_steps):\n            u_final = rk4_step(u_final, p, dt)\n\n        # -- Get Final Position and Measured Velocity --\n        x_cm_final = get_center_of_mass(u_final)\n        \n        # Shortest periodic displacement\n        displacement = x_cm_final - x_cm_initial\n        delta_x_cm = (displacement + L/2) % L - L/2\n        \n        vg_measured = delta_x_cm / (n_steps * dt)\n\n        # -- Get Theoretical Velocity --\n        vg_theory = get_theoretical_group_velocity(k0, p)\n        \n        # -- Compute Absolute Error --\n        error = np.abs(vg_measured - vg_theory)\n        return round(error, 6)\n\n    # -- Test Suite --\n    test_cases = [\n        (6, 24),    # Case A\n        (4, 24),    # Case B\n        (6, 4),     # Case C\n        (6, 128),   # Case D\n    ]\n\n    results = []\n    for p_val, m0_val in test_cases:\n        result = solve_for_case(p_val, m0_val)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2401300"}]}