{"hands_on_practices": [{"introduction": "Numerical simulations of the Circular Restricted Three-Body Problem (CR3BP) are powerfully general, but their output is often in abstract dimensionless units. To connect these simulations to the real world, such as the Earth-Moon system, we must be able to convert these results back into physical units. This practice problem [@problem_id:2223530] guides you through this essential process, reinforcing your understanding of rotating reference frames and the scaling laws that underpin the simulation.", "problem": "A student is analyzing the trajectory of a small spacecraft in the Earth-Moon system using a numerical simulation based on the Circular Restricted Three-Body Problem (CR3BP). In this model, the Earth and Moon are treated as point masses moving in circular orbits about their common barycenter. The simulation uses a dimensionless, rotating coordinate system where the origin is the barycenter, the x-axis always points from the Earth to the Moon, and the z-axis is parallel to the angular velocity vector of the Earth-Moon system.\n\nThe units in the simulation are normalized as follows:\n- The unit of length is the mean distance between the Earth and the Moon, $D$.\n- The sum of the masses of the Earth and the Moon, $M_E + M_M$, is the unit of mass.\n- The unit of time is chosen such that the angular velocity of the rotating frame, $\\Omega$, is unity in dimensionless terms.\n\nAt a particular instant, the simulation reports the spacecraft's dimensionless position vector as $\\vec{\\tilde{r}} = (1.160, 0.050, -0.020)$ and its dimensionless velocity vector *relative to the rotating frame* as $\\vec{\\tilde{v}}_{rot} = (0.100, -0.250, 0.080)$.\n\nUsing the physical constants provided below, calculate the magnitude of the spacecraft's velocity (its speed) in the non-rotating inertial frame whose origin is also at the Earth-Moon barycenter.\n\nPhysical Constants:\n- Gravitational constant, $G = 6.674 \\times 10^{-11} \\text{ m}^3 \\text{kg}^{-1} \\text{s}^{-2}$\n- Mass of Earth, $M_E = 5.972 \\times 10^{24} \\text{ kg}$\n- Mass of Moon, $M_M = 7.342 \\times 10^{22} \\text{ kg}$\n- Mean Earth-Moon distance, $D = 3.844 \\times 10^{8} \\text{ m}$\n\nExpress your answer in kilometers per second (km/s) and round it to three significant figures.", "solution": "In the rotating frame, the inertial velocity is the sum of the rotating-frame velocity and the contribution from the frameâ€™s rotation:\n$$\\vec{v}_{\\text{inertial}} = \\vec{v}_{\\text{rot}} + \\vec{\\Omega} \\times \\vec{r}.$$\nIn the dimensionless CR3BP units described, the angular velocity vector is $\\tilde{\\vec{\\Omega}} = (0,0,1)$, and the given vectors are dimensionless. Therefore,\n$$\\vec{\\tilde{v}}_{\\text{inertial}} = \\vec{\\tilde{v}}_{\\text{rot}} + \\tilde{\\vec{\\Omega}} \\times \\vec{\\tilde{r}}.$$\nWith $\\vec{\\tilde{r}} = (1.160,\\,0.050,\\,-0.020)$ and $\\vec{\\tilde{v}}_{\\text{rot}} = (0.100,\\,-0.250,\\,0.080)$, and using $\\tilde{\\vec{\\Omega}} \\times \\vec{\\tilde{r}} = (-\\tilde{y},\\,\\tilde{x},\\,0)$, we obtain\n$$(\\tilde{\\vec{\\Omega}} \\times \\vec{\\tilde{r}}) = (-0.050,\\,1.160,\\,0),$$\n$$\\vec{\\tilde{v}}_{\\text{inertial}} = (0.100-0.050,\\,-0.250+1.160,\\,0.080+0) = (0.050,\\,0.910,\\,0.080).$$\nIts dimensionless magnitude is\n$$|\\vec{\\tilde{v}}_{\\text{inertial}}| = \\sqrt{0.050^{2} + 0.910^{2} + 0.080^{2}} = \\sqrt{0.0025 + 0.8281 + 0.0064} = \\sqrt{0.837} \\approx 0.914877.$$\n\nTo convert to physical units, note that the chosen nondimensionalization sets the time scale so that the dimensionless angular speed is unity. The physical mean motion is\n$$\\Omega = \\sqrt{\\frac{G(M_{E}+M_{M})}{D^{3}}},$$\nso the time unit is $T = \\Omega^{-1}$ and the velocity unit is\n$$U = \\frac{D}{T} = D\\,\\Omega = \\sqrt{\\frac{G(M_{E}+M_{M})}{D}}.$$\nThus the physical speed is\n$$v_{\\text{phys}} = U\\,|\\vec{\\tilde{v}}_{\\text{inertial}}| = \\sqrt{\\frac{G(M_{E}+M_{M})}{D}}\\;|\\vec{\\tilde{v}}_{\\text{inertial}}|.$$\nSubstituting the given constants,\n$$G(M_{E}+M_{M}) = (6.674 \\times 10^{-11})\\,(5.972 \\times 10^{24} + 7.342 \\times 10^{22}) \\text{ m}^{3}\\text{s}^{-2} \\approx 4.034713308 \\times 10^{14},$$\n$$\\frac{G(M_{E}+M_{M})}{D} \\approx \\frac{4.034713308 \\times 10^{14}}{3.844 \\times 10^{8}} \\approx 1.04961324 \\times 10^{6} \\text{ m}^{2}\\text{s}^{-2},$$\n$$U = \\sqrt{1.04961324 \\times 10^{6}} \\text{ m/s} \\approx 1.02450634 \\times 10^{3} \\text{ m/s}.$$\nHence\n$$v_{\\text{phys}} \\approx (1.02450634 \\times 10^{3} \\text{ m/s}) \\times 0.914877 \\approx 9.372972868 \\times 10^{2} \\text{ m/s} = 0.9372972868 \\text{ km/s}.$$\nRounding to three significant figures gives $0.937$ km/s.", "answer": "$$\\boxed{0.937}$$", "id": "2223530"}, {"introduction": "A cornerstone of the Circular Restricted Three-Body Problem is the existence of a conserved quantity in the rotating frame: the Jacobi integral. This integral, analogous to energy, constrains the motion of a test particle by defining regions of space it can and cannot access. This exercise [@problem_id:2060444] challenges you to work directly with the Jacobi integral to set up specific initial conditions, a fundamental skill for designing numerical experiments to explore phenomena like trajectory stability and chaotic dynamics.", "problem": "Consider a model for a planetary system consisting of two primary bodies of mass $m_1$ and $m_2$ orbiting their common center of mass in circular orbits, and a third body, a test particle of negligible mass, moving in their gravitational field. This system is analyzed in a co-rotating reference frame, which rotates with the same constant angular velocity, $\\omega$, as the two primary bodies.\n\nWe use a set of normalized units where the gravitational constant $G=1$, the sum of the primary masses $m_1+m_2=1$, and the constant distance between the primaries is $D=1$. In these units, the angular velocity of the frame becomes $\\omega=1$. The motion of the bodies is confined to a plane.\n\nLet the mass parameter be defined as $\\mu = \\frac{m_2}{m_1+m_2}$. With the center of mass at the origin $(0,0)$, the locations of the two primary bodies are fixed on the x-axis at $(-\\mu, 0)$ for mass $m_1=1-\\mu$, and at $(1-\\mu, 0)$ for mass $m_2=\\mu$.\n\nFor a test particle at position $(x,y)$ with velocity $(v_x, v_y)$ in this rotating frame, a conserved quantity known as the Jacobi integral is given by:\n$$K = (x^2+y^2) + 2\\left(\\frac{1-\\mu}{r_1} + \\frac{\\mu}{r_2}\\right) - (v_x^2+v_y^2)$$\nwhere $r_1$ and $r_2$ are the distances from the test particle to mass $m_1$ and $m_2$, respectively.\n\nSuppose we are setting up a numerical simulation. A first test particle is placed at rest (zero velocity in the rotating frame) at the point $P_1 = \\left(\\frac{1}{2}-\\mu, \\frac{\\sqrt{3}}{2}\\right)$. A second test particle is placed at the point $P_2 = (1-\\mu+d, 0)$, where $d$ is a small, positive constant distance. This second particle is given an initial velocity directed purely along the y-axis.\n\nDetermine the magnitude of the initial velocity that must be given to the second particle at $P_2$ so that it has the same value of the Jacobi integral $K$ as the first particle at $P_1$. Express your answer as a single closed-form analytic expression in terms of the mass parameter $\\mu$ and the distance $d$.", "solution": "We use conservation of the Jacobi integral $K$ in the rotating frame:\n$$\nK=(x^{2}+y^{2})+2\\left(\\frac{1-\\mu}{r_{1}}+\\frac{\\mu}{r_{2}}\\right)-(v_{x}^{2}+v_{y}^{2}).\n$$\nFor the first particle at $P_{1}=\\left(\\frac{1}{2}-\\mu,\\frac{\\sqrt{3}}{2}\\right)$ with zero velocity, we compute its distances to the primaries at $(-\\mu,0)$ and $(1-\\mu,0)$. The squared distances are\n$$\nr_{1}^{2}=\\left(\\frac{1}{2}\\right)^{2}+\\left(\\frac{\\sqrt{3}}{2}\\right)^{2}=1,\\quad r_{2}^{2}=\\left(-\\frac{1}{2}\\right)^{2}+\\left(\\frac{\\sqrt{3}}{2}\\right)^{2}=1,\n$$\nso $r_{1}=r_{2}=1$. Also,\n$$\nx_{1}^{2}+y_{1}^{2}=\\left(\\frac{1}{2}-\\mu\\right)^{2}+\\left(\\frac{\\sqrt{3}}{2}\\right)^{2}=\\mu^{2}-\\mu+1.\n$$\nTherefore,\n$$\nK_{1}=(\\mu^{2}-\\mu+1)+2\\left((1-\\mu)+\\mu\\right)=\\mu^{2}-\\mu+3.\n$$\n\nFor the second particle at $P_{2}=(1-\\mu+d,0)$ with velocity purely along the $y$-axis of magnitude $v$ (so $v_{x}=0$, $v_{y}=\\pm v$), we have\n$$\nx_{2}^{2}+y_{2}^{2}=(1-\\mu+d)^{2},\\quad r_{1}=|(1-\\mu+d)-(-\\mu)|=1+d,\\quad r_{2}=|(1-\\mu+d)-(1-\\mu)|=d.\n$$\nThus its Jacobi integral is\n$$\nK_{2}=(1-\\mu+d)^{2}+2\\left(\\frac{1-\\mu}{1+d}+\\frac{\\mu}{d}\\right)-v^{2}.\n$$\nRequiring $K_{2}=K_{1}$ gives\n$$\nv^{2}=(1-\\mu+d)^{2}+2\\left(\\frac{1-\\mu}{1+d}+\\frac{\\mu}{d}\\right)-(\\mu^{2}-\\mu+3),\n$$\nso the required speed magnitude is\n$$\nv=\\sqrt{(1-\\mu+d)^{2}+2\\left(\\frac{1-\\mu}{1+d}+\\frac{\\mu}{d}\\right)-(\\mu^{2}-\\mu+3)}.\n$$\nThis expression depends only on $\\mu$ and $d$, as required.", "answer": "$$\\boxed{\\sqrt{(1-\\mu+d)^{2}+2\\left(\\frac{1-\\mu}{1+d}+\\frac{\\mu}{d}\\right)-\\left(\\mu^{2}-\\mu+3\\right)}}$$", "id": "2060444"}, {"introduction": "Long-term simulations in celestial mechanics demand more than just accuracy; they require stability and the preservation of fundamental physical laws. The CR3BP is a Hamiltonian system, and the choice of numerical integrator has profound consequences for the validity of the simulation over many orbits. In this capstone exercise [@problem_id:2444608], you will implement and compare a non-symplectic Runge-Kutta method with a structure-preserving symplectic integrator, providing direct, hands-on experience with the critical concept of geometric integration and its superior performance in conserving energy-like quantities over long time scales.", "problem": "Implement a program to compare the long-time behavior of a symplectic and a non-symplectic integrator for the planar circular restricted three-body problem (CRTBP) in a uniformly rotating frame, focusing on trajectories initialized near the triangular Lagrange equilibrium points $L_4$ and $L_5$ for the Earth-Sun system. Use only first principles for your derivation and algorithm design.\n\nStart from the following fundamental base:\n- Hamiltonian mechanics with Hamiltonâ€™s equations $\\dot{q}_i=\\partial H/\\partial p_i$ and $\\dot{p}_i=-\\partial H/\\partial q_i$.\n- The planar CRTBP in a rotating frame with nondimensional units such that the distance between the primaries is $1$, the angular speed of rotation is $1$ (so the primaries are fixed in this frame), and the total mass is $1$. Let the Sun have mass $1-\\mu$ and the Earth have mass $\\mu$, where for the Earth-Sun system $\\mu=3.003489614915\\times 10^{-6}$.\n- Use canonical coordinates $(x,y,p_x,p_y)$ and the time-independent Hamiltonian\n$$\nH(x,y,p_x,p_y)=\\tfrac{1}{2}\\left(p_x^2+p_y^2\\right)+y\\,p_x-x\\,p_y-\\left(\\frac{1-\\mu}{r_1}+\\frac{\\mu}{r_2}\\right),\n$$\nwhere $r_1=\\sqrt{(x+\\mu)^2+y^2}$ and $r_2=\\sqrt{(x-1+\\mu)^2+y^2}$. This Hamiltonian yields the standard rotating-frame CRTBP equations via Hamiltonâ€™s equations. The conserved Jacobi integral is $C=-2H$.\n- The triangular Lagrange points are located at\n$$\nL_4:\\ \\left(x_{L_4},y_{L_4}\\right)=\\left(\\tfrac{1}{2}-\\mu,\\tfrac{\\sqrt{3}}{2}\\right),\\quad\nL_5:\\ \\left(x_{L_5},y_{L_5}\\right)=\\left(\\tfrac{1}{2}-\\mu,-\\tfrac{\\sqrt{3}}{2}\\right).\n$$\nIn the rotating frame, the equilibrium velocities vanish at $L_4$ and $L_5$. The canonical momenta consistent with zero physical velocity are $p_x(0)=-y_0$ and $p_y(0)=x_0$, where $(x_0,y_0)$ is the initial position.\n\nTask:\n1. From Hamiltonâ€™s equations and the given Hamiltonian, derive the system of first-order ordinary differential equations for $(x,y,p_x,p_y)$ and implement two time-stepping methods:\n   - A symplectic method: use a first-order symplectic Euler method derived directly from Hamiltonâ€™s structure (you must design the update by applying Hamiltonâ€™s equations in a way that preserves the symplectic form).\n   - A non-symplectic method: use the classical fourth-order explicit Rungeâ€“Kutta method applied to the same first-order system.\n\n2. Using both integrators, simulate trajectories initialized near $L_4$ and $L_5$ over a long time and quantify two diagnostics that reflect stability and long-time accuracy:\n   - The maximum absolute Hamiltonian deviation over the trajectory,\n     $$\n     \\max_{0\\le n\\le N}\\left|H_n-H_0\\right|,\n     $$\n     where $H_n$ is the Hamiltonian evaluated at step $n$.\n   - The maximum absolute displacement from the corresponding equilibrium point,\n     $$\n     \\max_{0\\le n\\le N}\\sqrt{(x_n-x_{\\mathrm{eq}})^2+(y_n-y_{\\mathrm{eq}})^2}.\n     $$\n\nUse the following test suite (each case must be simulated by both integrators):\n- Common parameters for all cases:\n  - Mass parameter $\\mu=3.003489614915\\times 10^{-6}$.\n  - Number of primary revolutions $N_p=30$. The nominal integration time is $T=2\\pi N_p$. Use a constant step size $h$ and perform $N=\\left\\lfloor T/h\\right\\rfloor$ steps in each simulation.\n  - Initial velocities in the rotating frame are zero. Convert to canonical momenta using $p_x(0)=-y_0$, $p_y(0)=x_0$.\n- Case A (happy path near $L_4$): equilibrium point $L_4$, initial position $(x_0,y_0)=(x_{L_4}+\\varepsilon,y_{L_4})$ with $\\varepsilon=10^{-6}$, step size $h=0.01$.\n- Case B (happy path near $L_5$): equilibrium point $L_5$, initial position $(x_0,y_0)=(x_{L_5}+\\varepsilon,y_{L_5})$ with $\\varepsilon=10^{-6}$, step size $h=0.01$.\n- Case C (larger step near $L_4$): equilibrium point $L_4$, initial position $(x_0,y_0)=(x_{L_4}+\\varepsilon,y_{L_4})$ with $\\varepsilon=10^{-6}$, step size $h=0.05$.\n- Case D (boundary equilibrium at $L_4$): equilibrium point $L_4$, exact equilibrium initial position $(x_0,y_0)=(x_{L_4},y_{L_4})$ with $\\varepsilon=0$, step size $h=0.05$.\n\nAngle units are radians. All quantities are nondimensional. For each case, compute four floats in the following order:\n- $E^{\\mathrm{sym}}$: maximum absolute Hamiltonian deviation for the symplectic method.\n- $E^{\\mathrm{rk4}}$: maximum absolute Hamiltonian deviation for the Rungeâ€“Kutta method.\n- $D^{\\mathrm{sym}}$: maximum absolute displacement from the equilibrium point for the symplectic method.\n- $D^{\\mathrm{rk4}}$: maximum absolute displacement from the equilibrium point for the Rungeâ€“Kutta method.\n\nFinal Output Format:\nYour program should produce a single line of output containing the $16$ results for cases A, B, C, and D, aggregated in order and printed as a comma-separated list enclosed in square brackets, i.e.,\n$[E^{\\mathrm{sym}}_{\\mathrm{A}},E^{\\mathrm{rk4}}_{\\mathrm{A}},D^{\\mathrm{sym}}_{\\mathrm{A}},D^{\\mathrm{rk4}}_{\\mathrm{A}},E^{\\mathrm{sym}}_{\\mathrm{B}},E^{\\mathrm{rk4}}_{\\mathrm{B}},D^{\\mathrm{sym}}_{\\mathrm{B}},D^{\\mathrm{rk4}}_{\\mathrm{B}},E^{\\mathrm{sym}}_{\\mathrm{C}},E^{\\mathrm{rk4}}_{\\mathrm{C}},D^{\\mathrm{sym}}_{\\mathrm{C}},D^{\\mathrm{rk4}}_{\\mathrm{C}},E^{\\mathrm{sym}}_{\\mathrm{D}},E^{\\mathrm{rk4}}_{\\mathrm{D}},D^{\\mathrm{sym}}_{\\mathrm{D}},D^{\\mathrm{rk4}}_{\\mathrm{D}}]$.", "solution": "The problem posed is valid. It is scientifically grounded in the principles of Hamiltonian mechanics and celestial mechanics, specifically the circular restricted three-body problem. The problem is well-posed, providing all necessary constants, initial conditions, equations, and a clear objective. The language is precise and objective, and the task is a standard exercise in computational physics for comparing the long-term performance of numerical integrators.\n\nThe first step is to derive the explicit system of first-order ordinary differential equations (ODEs) from the given Hamiltonian. The state of the system is described by the canonical coordinates $(q,p) = (x, y, p_x, p_y)$. The Hamiltonian is given by\n$$H(x,y,p_x,p_y)=\\tfrac{1}{2}\\left(p_x^2+p_y^2\\right)+y\\,p_x-x\\,p_y-\\left(\\frac{1-\\mu}{r_1}+\\frac{\\mu}{r_2}\\right)$$\nwhere $r_1=\\sqrt{(x+\\mu)^2+y^2}$ and $r_2=\\sqrt{(x-1+\\mu)^2+y^2}$. The equations of motion are Hamilton's equations, $\\dot{q}_i = \\partial H / \\partial p_i$ and $\\dot{p}_i = -\\partial H / \\partial q_i$.\n\nThe derivatives with respect to the momenta are:\n$$\\dot{x} = \\frac{\\partial H}{\\partial p_x} = p_x + y$$\n$$\\dot{y} = \\frac{\\partial H}{\\partial p_y} = p_y - x$$\n\nThe derivatives with respect to the positions require computing the partials of $H$. We have:\n$$\\frac{\\partial H}{\\partial x} = -p_y - (1-\\mu)(-\\frac{1}{r_1^2})\\frac{\\partial r_1}{\\partial x} - \\mu(-\\frac{1}{r_2^2})\\frac{\\partial r_2}{\\partial x} = -p_y + \\frac{(1-\\mu)(x+\\mu)}{r_1^3} + \\frac{\\mu(x-1+\\mu)}{r_2^3}$$\n$$\\frac{\\partial H}{\\partial y} = p_x - (1-\\mu)(-\\frac{1}{r_1^2})\\frac{\\partial r_1}{\\partial y} - \\mu(-\\frac{1}{r_2^2})\\frac{\\partial r_2}{\\partial y} = p_x + \\frac{(1-\\mu)y}{r_1^3} + \\frac{\\mu y}{r_2^3}$$\nFrom $\\dot{p}_i = -\\partial H/\\partial q_i$, we obtain the equations for the momenta:\n$$\\dot{p}_x = p_y - \\frac{(1-\\mu)(x+\\mu)}{r_1^3} - \\frac{\\mu(x-1+\\mu)}{r_2^3}$$\n$$\\dot{p}_y = -p_x - y\\left(\\frac{1-\\mu}{r_1^3} + \\frac{\\mu}{r_2^3}\\right)$$\nThis system of four coupled, autonomous, first-order ODEs, $\\dot{\\mathbf{z}} = \\mathbf{f}(\\mathbf{z})$ where $\\mathbf{z}=(x,y,p_x,p_y)^T$, governs the dynamics.\n\nNext, we specify the numerical integration methods.\n1.  **First-Order Symplectic Euler Method:** This method preserves the symplectic structure of phase space, which is crucial for the long-term qualitative accuracy of Hamiltonian system simulations. A common explicit first-order symplectic Euler scheme (also known as Euler-B) for a state $\\mathbf{z}_n = (\\mathbf{q}_n, \\mathbf{p}_n)$ at time $t_n$ is given by the following two-step update to obtain the state at $t_{n+1} = t_n + h$:\n    $$\\mathbf{p}_{n+1} = \\mathbf{p}_n - h \\frac{\\partial H}{\\partial \\mathbf{q}}(\\mathbf{q}_n, \\mathbf{p}_n)$$\n    $$\\mathbf{q}_{n+1} = \\mathbf{q}_n + h \\frac{\\partial H}{\\partial \\mathbf{p}}(\\mathbf{q}_n, \\mathbf{p}_{n+1})$$\n    Notice that the update for position $\\mathbf{q}$ uses the newly computed momentum $\\mathbf{p}_{n+1}$. For the given CRTBP Hamiltonian, this translates to the following explicit algorithm for one time step $h$:\n    Given $(\\mathbf{q}_n, \\mathbf{p}_n)=(x_n, y_n, p_{x,n}, p_{y,n})$:\n    First, update momenta using the forces evaluated at the current state:\n    $$p_{x, n+1} = p_{x,n} + h \\left(p_{y,n} - \\frac{(1-\\mu)(x_n+\\mu)}{r_{1,n}^3} - \\frac{\\mu(x_n-1+\\mu)}{r_{2,n}^3}\\right)$$\n    $$p_{y, n+1} = p_{y,n} + h \\left(-p_{x,n} - y_n\\left(\\frac{1-\\mu}{r_{1,n}^3} + \\frac{\\mu}{r_{2,n}^3}\\right)\\right)$$\n    Second, update positions using the *new* momenta and *old* positions:\n    $$x_{n+1} = x_n + h (p_{x,n+1} + y_n)$$\n    $$y_{n+1} = y_n + h (p_{y,n+1} - x_n)$$\n    This method is of first-order accuracy but has superior long-term stability properties for Hamiltonian systems compared to non-symplectic methods of the same order.\n\n2.  **Classical Fourth-Order Runge-Kutta (RK4) Method:** This is a standard, general-purpose, non-symplectic method for solving ODEs. For the system $\\dot{\\mathbf{z}} = \\mathbf{f}(\\mathbf{z})$, a single step from $\\mathbf{z}_n$ to $\\mathbf{z}_{n+1}$ is:\n    $$\\mathbf{k}_1 = \\mathbf{f}(\\mathbf{z}_n)$$\n    $$\\mathbf{k}_2 = \\mathbf{f}(\\mathbf{z}_n + \\tfrac{h}{2}\\mathbf{k}_1)$$\n    $$\\mathbf{k}_3 = \\mathbf{f}(\\mathbf{z}_n + \\tfrac{h}{2}\\mathbf{k}_2)$$\n    $$\\mathbf{k}_4 = \\mathbf{f}(\\mathbf{z}_n + h\\mathbf{k}_3)$$\n    $$\\mathbf{z}_{n+1} = \\mathbf{z}_n + \\tfrac{h}{6}(\\mathbf{k}_1 + 2\\mathbf{k}_2 + 2\\mathbf{k}_3 + \\mathbf{k}_4)$$\n    While highly accurate for a single step (local error is $O(h^5)$), RK4 does not preserve the symplectic form. This leads to secular drift in conserved quantities like the Hamiltonian, making it unsuitable for long-term integrations of such systems.\n\nThe simulation proceeds by setting up initial conditions for each test case. The mass parameter for the Earth-Sun system is $\\mu=3.003489614915\\times 10^{-6}$. The integration time corresponds to $N_p=30$ primary revolutions, $T=2\\pi N_p$. The number of steps is $N=\\lfloor T/h \\rfloor$. For each case, trajectories are initialized with zero velocity in the rotating frame, which corresponds to initial canonical momenta $p_x(0) = -y_0$ and $p_y(0) = x_0$. For each test case, two separate simulations are run, one with each integrator. During each simulation, the state vector is stored at every step. After the integration is complete, two diagnostics are computed: the maximum absolute deviation of the Hamiltonian from its initial value, $\\max_{0\\le n\\le N}|H_n-H_0|$, and the maximum displacement from the equilibrium point, $\\max_{0\\le n\\le N}\\sqrt{(x_n-x_{\\mathrm{eq}})^2+(y_n-y_{\\mathrm{eq}})^2}$. The results are then aggregated for all test cases. The expectation is that the symplectic integrator will show bounded Hamiltonian error, while the RK4 method will exhibit a drift, and this difference in energy conservation will be reflected in the trajectory stability.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the CRTBP problem by comparing a symplectic Euler integrator\n    with a standard RK4 integrator for trajectories near L4 and L5.\n    \"\"\"\n\n    # Common parameters\n    MU = 3.003489614915e-6\n    NUM_REVOLUTIONS = 30\n    T_FINAL = 2.0 * np.pi * NUM_REVOLUTIONS\n\n    # Lagrange point coordinates\n    L4_POS = np.array([0.5 - MU, np.sqrt(3.0) / 2.0])\n    L5_POS = np.array([0.5 - MU, -np.sqrt(3.0) / 2.0])\n\n    # Test cases from the problem statement\n    test_cases = [\n        {'name': 'A', 'eq_point_pos': L4_POS, 'epsilon': 1e-6, 'h': 0.01},\n        {'name': 'B', 'eq_point_pos': L5_POS, 'epsilon': 1e-6, 'h': 0.01},\n        {'name': 'C', 'eq_point_pos': L4_POS, 'epsilon': 1e-6, 'h': 0.05},\n        {'name': 'D', 'eq_point_pos': L4_POS, 'epsilon': 0.0, 'h': 0.05},\n    ]\n\n    def get_hamiltonian(state):\n        x, y, px, py = state\n        r1 = np.sqrt((x + MU)**2 + y**2)\n        r2 = np.sqrt((x - 1.0 + MU)**2 + y**2)\n        \n        if r1 == 0 or r2 == 0:\n            return np.inf\n\n        H = 0.5 * (px**2 + py**2) + y * px - x * py - (1.0 - MU) / r1 - MU / r2\n        return H\n\n    def get_derivatives(state):\n        x, y, px, py = state\n        \n        r1_sq = (x + MU)**2 + y**2\n        r2_sq = (x - 1.0 + MU)**2 + y**2\n        \n        # Avoid division by zero, although not expected for these ICs\n        if r1_sq == 0 or r2_sq == 0:\n            return np.array([0.0, 0.0, 0.0, 0.0])\n\n        r1_cubed = r1_sq * np.sqrt(r1_sq)\n        r2_cubed = r2_sq * np.sqrt(r2_sq)\n\n        Gx_term1 = (1.0 - MU) * (x + MU) / r1_cubed\n        Gx_term2 = MU * (x - 1.0 + MU) / r2_cubed\n        Gy_factor = (1.0 - MU) / r1_cubed + MU / r2_cubed\n\n        dot_x = px + y\n        dot_y = py - x\n        dot_px = py - (Gx_term1 + Gx_term2)\n        dot_py = -px - y * Gy_factor\n        \n        return np.array([dot_x, dot_y, dot_px, dot_py])\n\n    def step_symplectic_euler(state, h):\n        x, y, px, py = state\n        \n        # Get derivatives for momentum update\n        _, _, dot_px, dot_py = get_derivatives(state)\n        \n        # Update momenta\n        px_new = px + h * dot_px\n        py_new = py + h * dot_py\n        \n        # Update positions using new momenta\n        x_new = x + h * (px_new + y)\n        y_new = y + h * (py_new - x)\n        \n        return np.array([x_new, y_new, px_new, py_new])\n\n    def step_rk4(state, h):\n        k1 = get_derivatives(state)\n        k2 = get_derivatives(state + 0.5 * h * k1)\n        k3 = get_derivatives(state + 0.5 * h * k2)\n        k4 = get_derivatives(state + h * k3)\n        return state + (h / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4)\n\n    results = []\n    for case in test_cases:\n        h = case['h']\n        eq_point_pos = case['eq_point_pos']\n        \n        # Initial conditions\n        x0 = eq_point_pos[0] + case['epsilon']\n        y0 = eq_point_pos[1]\n        px0 = -y0\n        py0 = x0\n        initial_state = np.array([x0, y0, px0, py0])\n\n        num_steps = int(np.floor(T_FINAL / h))\n        H0 = get_hamiltonian(initial_state)\n\n        # Run for both integrators\n        for integrator_name, step_func in [('sym', step_symplectic_euler), ('rk4', step_rk4)]:\n            state = initial_state.copy()\n            max_hamiltonian_dev = 0.0\n            max_displacement = 0.0\n\n            for _ in range(num_steps):\n                state = step_func(state, h)\n\n                # Calculate diagnostics\n                H_current = get_hamiltonian(state)\n                hamiltonian_dev = np.abs(H_current - H0)\n                if hamiltonian_dev > max_hamiltonian_dev:\n                    max_hamiltonian_dev = hamiltonian_dev\n                \n                displacement = np.sqrt((state[0] - eq_point_pos[0])**2 + (state[1] - eq_point_pos[1])**2)\n                if displacement > max_displacement:\n                    max_displacement = displacement\n            \n            # Store results for this integrator\n            results.append(max_hamiltonian_dev)\n            results.append(max_displacement)\n    \n    # Reorder results list. Currently [E_sym, D_sym, E_rk4, D_rk4, ...].\n    # Need [E_sym, E_rk4, D_sym, D_rk4, ...].\n    final_results = []\n    for i in range(0, len(results), 4):\n        final_results.append(results[i])     # E_sym\n        final_results.append(results[i+2])   # E_rk4\n        final_results.append(results[i+1])   # D_sym\n        final_results.append(results[i+3])   # D_rk4\n    \n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n```", "id": "2444608"}]}