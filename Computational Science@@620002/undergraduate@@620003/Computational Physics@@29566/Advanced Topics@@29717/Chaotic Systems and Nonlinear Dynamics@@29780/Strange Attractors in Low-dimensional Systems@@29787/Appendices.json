{"hands_on_practices": [{"introduction": "A defining characteristic of chaos is the sensitive dependence on initial conditions, where nearby trajectories diverge exponentially. The Largest Lyapunov Exponent, $\\lambda_{\\max}$, provides the quantitative measure of this divergence rate, with a positive value serving as a definitive signature of chaos. This first exercise [@problem_id:2443507] will guide you to compute $\\lambda_{\\max}$ from first principles for the classic Hénon map, a simple quadratic map renowned for its complex dynamics, by implementing the fundamental algorithm of evolving and re-normalizing tangent vectors.", "problem": "Consider the family of two-dimensional autonomous discrete-time quadratic polynomial maps frequently studied in the literature on simple strange attractors, including the catalog by Julien C. Sprott. A general member of this family is defined by\n$$\n\\begin{aligned}\nx_{n+1} = a_0 + a_1 x_n + a_2 y_n + a_3 x_n^2 + a_4 x_n y_n + a_5 y_n^2,\\\\\ny_{n+1} = b_0 + b_1 x_n + b_2 y_n + b_3 x_n^2 + b_4 x_n y_n + b_5 y_n^2,\n\\end{aligned}\n$$\nwhere $x_n \\in \\mathbb{R}$ and $y_n \\in \\mathbb{R}$ denote the state at discrete time step $n \\in \\mathbb{Z}_{\\ge 0}$, and the coefficients $\\{a_i\\}_{i=0}^5$ and $\\{b_i\\}_{i=0}^5$ are real constants. The Jacobian matrix $J(x,y)$ of the map is\n$$\nJ(x,y)=\n\\begin{bmatrix}\n\\frac{\\partial x_{n+1}}{\\partial x_n}  \\frac{\\partial x_{n+1}}{\\partial y_n}\\\\[6pt]\n\\frac{\\partial y_{n+1}}{\\partial x_n}  \\frac{\\partial y_{n+1}}{\\partial y_n}\n\\end{bmatrix}\n=\n\\begin{bmatrix}\na_1 + 2 a_3 x + a_4 y  a_2 + a_4 x + 2 a_5 y\\\\\nb_1 + 2 b_3 x + b_4 y  b_2 + b_4 x + 2 b_5 y\n\\end{bmatrix}.\n$$\n\nYour task is to compute the largest Lyapunov exponent (Largest Lyapunov Exponent (LLE)) for several specific instances of this family using only first principles. Start from the definition of a discrete-time dynamical system and the definition of Lyapunov exponents as asymptotic exponential rates of separation of nearby trajectories. Use linearization via the Jacobian to evolve an infinitesimal tangent vector and re-normalize it periodically to avoid numerical overflow, accumulating the mean logarithmic stretch. You must not use any closed-form shortcut formulas for the Lyapunov exponent; instead, implement the computation by iterating the map and its Jacobian.\n\nDefinitions and requirements:\n- The largest Lyapunov exponent $\\lambda_{\\max}$ for a discrete map $F:\\mathbb{R}^2 \\to \\mathbb{R}^2$ evaluated along a trajectory $\\{(x_n,y_n)\\}_{n=0}^{N}$ is defined as\n$$\n\\lambda_{\\max} = \\lim_{N \\to \\infty} \\frac{1}{N} \\sum_{n=0}^{N-1} \\ln \\left\\| J(x_n,y_n)\\, \\mathbf{v}_n \\right\\|,\n$$\nwhere $\\mathbf{v}_n$ is a unit tangent vector that evolves by the linearization $\\mathbf{v}_{n+1} \\propto J(x_n,y_n)\\, \\mathbf{v}_n$, with normalization $\\|\\mathbf{v}_{n+1}\\|=1$ applied at each step, and $\\|\\cdot\\|$ is the Euclidean norm.\n- Discard an initial transient of $N_{\\text{trans}}$ iterations so that the trajectory is on the attractor before accumulating the sum, then average over $N_{\\text{iter}}$ iterations.\n- Report each $\\lambda_{\\max}$ in units of nats per iteration (natural logarithm base $e$), as a floating-point number rounded to $6$ decimal places.\n\nImplement a program that, for each test case below, performs the following:\n1. Initialize $(x_0,y_0)$ as specified.\n2. Iterate the map for $N_{\\text{trans}}$ steps without accumulating the Lyapunov sum.\n3. Initialize a unit tangent vector $\\mathbf{v}_0$ (you may use $\\mathbf{v}_0 = (1,0)$ normalized).\n4. For $N_{\\text{iter}}$ steps, at each iteration:\n   - Compute $J(x_n,y_n)$.\n   - Compute $\\mathbf{w} = J(x_n,y_n)\\,\\mathbf{v}_n$, its norm $\\|\\mathbf{w}\\|$, and accumulate $\\ln \\|\\mathbf{w}\\|$.\n   - Set $\\mathbf{v}_{n+1} = \\mathbf{w}/\\|\\mathbf{w}\\|$.\n   - Update $(x_{n+1},y_{n+1})$ via the quadratic map.\n5. Return $\\lambda_{\\max}$ as the accumulated sum divided by $N_{\\text{iter}}$.\n\nTest suite:\n- Case $1$ (Hénon-type coefficients commonly appearing in the Sprott catalog), with parameters $a = 1.4$, $b = 0.3$:\n  - Map: $x_{n+1} = 1 + y_n - a x_n^2$, $y_{n+1} = b x_n$.\n  - Coefficients: $a_0=1$, $a_1=0$, $a_2=1$, $a_3=-a$, $a_4=0$, $a_5=0$; $b_0=0$, $b_1=b$, $b_2=0$, $b_3=0$, $b_4=0$, $b_5=0$.\n  - Initial condition: $(x_0,y_0)=(0,0)$.\n  - Transient: $N_{\\text{trans}}=1000$.\n  - Averaging length: $N_{\\text{iter}}=100000$.\n- Case $2$ (same structure with reduced nonlinearity), with parameters $a = 1.2$, $b = 0.3$:\n  - Same coefficient definitions as Case $1$ but with $a=1.2$, $b=0.3$.\n  - Initial condition: $(x_0,y_0)=(0,0)$.\n  - Transient: $N_{\\text{trans}}=1000$.\n  - Averaging length: $N_{\\text{iter}}=100000$.\n- Case $3$ (reduced area contraction), with parameters $a = 1.4$, $b = 0.1$:\n  - Same coefficient definitions as Case $1$ but with $a=1.4$, $b=0.1$.\n  - Initial condition: $(x_0,y_0)=(0,0)$.\n  - Transient: $N_{\\text{trans}}=1000$.\n  - Averaging length: $N_{\\text{iter}}=100000$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example $[r_1,r_2,r_3]$, where each $r_i$ is the computed largest Lyapunov exponent for the corresponding test case, rounded to $6$ decimal places, in units of nats per iteration.\n\nAngles do not appear in this problem. All quantities are dimensionless, and the Lyapunov exponents must be reported in nats per iteration. The final output must be exactly one line in the specified format and contain no additional text.", "solution": "The problem as stated is subjected to validation.\n\n**Step 1: Extracted Givens**\n- **System**: A two-dimensional quadratic map $F: \\mathbb{R}^2 \\to \\mathbb{R}^2$, given by $\\mathbf{z}_{n+1} = F(\\mathbf{z}_n)$, where $\\mathbf{z}_n = (x_n, y_n)^T$.\n  - General form:\n    $x_{n+1} = a_0 + a_1 x_n + a_2 y_n + a_3 x_n^2 + a_4 x_n y_n + a_5 y_n^2$\n    $y_{n+1} = b_0 + b_1 x_n + b_2 y_n + b_3 x_n^2 + b_4 x_n y_n + b_5 y_n^2$\n  - Jacobian:\n    $J(x,y) = \\begin{bmatrix} a_1 + 2 a_3 x + a_4 y  a_2 + a_4 x + 2 a_5 y \\\\ b_1 + 2 b_3 x + b_4 y  b_2 + b_4 x + 2 b_5 y \\end{bmatrix}$\n- **Largest Lyapunov Exponent (LLE) Definition**: $\\lambda_{\\max} = \\lim_{N \\to \\infty} \\frac{1}{N} \\sum_{n=0}^{N-1} \\ln \\| J(x_n,y_n)\\, \\mathbf{v}_n \\|$, where $\\mathbf{v}_{n+1} = J(x_n,y_n)\\,\\mathbf{v}_n / \\|J(x_n,y_n)\\,\\mathbf{v}_n\\|$.\n- **Numerical Procedure**:\n  - Initial state: $(x_0, y_0)$ as specified.\n  - Transient iterations: $N_{\\text{trans}}$.\n  - Averaging iterations: $N_{\\text{iter}}$.\n  - Initial tangent vector: $\\mathbf{v}_0$ is a unit vector, e.g., normalized $(1,0)$.\n- **Test Cases**: All cases use the Hénon-type map: $x_{n+1} = 1 + y_n - a x_n^2$, $y_{n+1} = b x_n$.\n  - Initial condition for all cases: $(x_0,y_0)=(0,0)$.\n  - Iteration counts for all cases: $N_{\\text{trans}}=1000$, $N_{\\text{iter}}=100000$.\n  - Case 1: $a = 1.4$, $b = 0.3$.\n  - Case 2: $a = 1.2$, $b = 0.3$.\n  - Case 3: $a = 1.4$, $b = 0.1$.\n- **Output**: A list of $\\lambda_{\\max}$ values, rounded to $6$ decimal places, in nats per iteration.\n\n**Step 2: Validation**\n- **Scientific Grounding**: The problem is well-grounded in the theory of dynamical systems and chaos theory. The computation of Lyapunov exponents is a canonical technique in this field.\n- **Well-Posedness**: The problem defines the dynamical system, the quantity to be computed ($\\lambda_{\\max}$), and the numerical algorithm with all necessary parameters ($N_{\\text{trans}}$, $N_{\\text{iter}}$, initial conditions). The finite-sum approximation is a standard, practical approach to compute the theoretical limit.\n- **Consistency**: The general form of the map and its Jacobian are provided for context. The specific map for the test cases, the Hénon-type map, is a particular instance of this general form. Its coefficients are $a_0=1, a_2=1, a_3=-a, b_1=b$, and all other coefficients are zero. The Jacobian derived from the specific map, $J(x,y) = \\begin{bmatrix} -2ax  1 \\\\ b  0 \\end{bmatrix}$, is consistent with the general Jacobian formula given these coefficient values. The setup is fully self-contained and consistent.\n\n**Step 3: Verdict**\nThe problem is valid. It is a precise, scientifically sound, and well-posed computational task. I will proceed with the solution.\n\n---\n\nThe problem requires the computation of the largest Lyapunov exponent ($\\lambda_{\\max}$) for a discrete-time dynamical system from first principles. This is a fundamental exercise in computational physics that probes the system's sensitivity to initial conditions, a defining characteristic of chaos.\n\nA positive largest Lyapunov exponent, $\\lambda_{\\max} > 0$, signifies that infinitesimally close trajectories diverge, on average, at an exponential rate $e^{\\lambda_{\\max}}$. This is the mathematical signature of chaotic dynamics. Our task is to implement the standard algorithm for calculating this quantity for the specified two-dimensional quadratic maps.\n\nThe system's state at discrete time $n$ is given by a vector $\\mathbf{z}_n = (x_n, y_n)^T$. Its evolution is governed by the nonlinear map $\\mathbf{z}_{n+1} = F(\\mathbf{z}_n)$. Consider two nearby initial points, $\\mathbf{z}_0$ and $\\mathbf{z}_0 + \\delta\\mathbf{z}_0$, where $\\delta\\mathbf{z}_0$ is an infinitesimal displacement vector. After one iteration, the separation vector evolves according to the linearization of the map:\n$$\n\\delta\\mathbf{z}_1 = F(\\mathbf{z}_0 + \\delta\\mathbf{z}_0) - F(\\mathbf{z}_0) \\approx J(\\mathbf{z}_0) \\delta\\mathbf{z}_0,\n$$\nwhere $J(\\mathbf{z}_0)$ is the Jacobian matrix of $F$ evaluated at $\\mathbf{z}_0$. After $N$ iterations, the separation becomes:\n$$\n\\delta\\mathbf{z}_N \\approx J(\\mathbf{z}_{N-1}) \\cdots J(\\mathbf{z}_1) J(\\mathbf{z}_0) \\delta\\mathbf{z}_0.\n$$\nThe largest Lyapunov exponent is defined by the maximum exponential rate of growth of the magnitude of this separation vector $\\|\\delta\\mathbf{z}_N\\|$ as $N \\to \\infty$.\n\nDirectly computing the product of Jacobians is numerically unstable. A robust method, which we must implement, involves evolving a tangent vector $\\mathbf{v}_n$ along the trajectory and periodically re-normalizing it. This avoids numerical overflow and ensures the vector aligns with the direction of maximal stretching. The algorithm is as follows:\n\n1.  Initialize the state $\\mathbf{z}_0=(x_0, y_0)$ and a tangent vector $\\mathbf{v}_0$ of unit length, for instance, $\\mathbf{v}_0 = (1, 0)^T$.\n2.  Iterate the map for $N_{\\text{trans}}$ steps to allow the trajectory to settle onto its attractor. This ensures the computed exponent is characteristic of the system's long-term behavior and not the initial transient. So, for $n = 0, \\dots, N_{\\text{trans}}-1$, we compute $\\mathbf{z}_{n+1} = F(\\mathbf{z}_n)$.\n3.  After the transient, begin the accumulation phase for $N_{\\text{iter}}$ steps. For $n = N_{\\text{trans}}, \\dots, N_{\\text{trans}}+N_{\\text{iter}}-1$:\n    a. Evolve the tangent vector by one step using the linearization: $\\mathbf{w}_n = J(\\mathbf{z}_n) \\mathbf{v}_n$.\n    b. The length of this new vector, $s_n = \\|\\mathbf{w}_n\\|$, represents the local stretching factor along the direction of $\\mathbf{v}_n$. The logarithm of this value, $\\ln(s_n)$, is accumulated into a sum.\n    c. Re-normalize the vector to unit length for the next iteration: $\\mathbf{v}_{n+1} = \\mathbf{w}_n / s_n$.\n    d. Evolve the state to the next point on the trajectory: $\\mathbf{z}_{n+1} = F(\\mathbf{z}_n)$.\n4.  The largest Lyapunov exponent is the average of the accumulated logarithmic stretches:\n    $$\n    \\lambda_{\\max} \\approx \\frac{1}{N_{\\text{iter}}} \\sum_{i=0}^{N_{\\text{iter}}-1} \\ln(s_i).\n    $$\n\nFor the specific Hénon-type map given in the problem, we have:\n- Map $F(x,y)$:\n  $x_{n+1} = 1 + y_n - a x_n^2$\n  $y_{n+1} = b x_n$\n- Jacobian matrix $J(x,y)$:\n  $$\n  J(x,y) = \\begin{bmatrix} -2ax_n  1 \\\\ b  0 \\end{bmatrix}\n  $$\nThis procedure will be implemented for each of the three test cases, using the provided parameters for $a$, $b$, initial conditions $(x_0, y_0)=(0,0)$, and iteration counts $N_{\\text{trans}}=1000$ and $N_{\\text{iter}}=100000$. The result for each case will be rounded to $6$ decimal places as required. The use of NumPy is appropriate for handling the vector and matrix operations efficiently.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the largest Lyapunov exponent (LLE) for several instances of the Hénon map.\n    The final output is a single line containing a comma-separated list of results.\n    \"\"\"\n\n    def compute_lle(a, b, x0, y0, N_trans, N_iter):\n        \"\"\"\n        Calculates the LLE for a given set of Hénon map parameters.\n\n        Args:\n            a (float): The 'a' parameter of the Hénon map.\n            b (float): The 'b' parameter of the Hénon map.\n            x0 (float): Initial x-coordinate.\n            y0 (float): Initial y-coordinate.\n            N_trans (int): Number of transient iterations to discard.\n            N_iter (int): Number of iterations for averaging the LLE.\n\n        Returns:\n            float: The computed largest Lyapunov exponent.\n        \"\"\"\n        x, y = x0, y0\n\n        # Transient phase to let the trajectory settle onto the attractor\n        for _ in range(N_trans):\n            x_next = 1.0 + y - a * x * x\n            y_next = b * x\n            x, y = x_next, y_next\n\n        # Initialization for Lyapunov exponent calculation\n        # Start with an arbitrary normalized tangent vector\n        v = np.array([1.0, 0.0])\n        log_stretch_sum = 0.0\n\n        # Main loop for LLE calculation\n        for _ in range(N_iter):\n            # Evolve state\n            x_next = 1.0 + y - a * x * x\n            y_next = b * x\n\n            # Jacobian matrix at the current point (x, y)\n            # J = [[-2*a*x, 1.0], [b, 0.0]]\n            J = np.array([[-2.0 * a * x, 1.0], [b, 0.0]])\n\n            # Evolve the tangent vector by matrix multiplication\n            w = J @ v\n\n            # Calculate the norm (stretching factor)\n            norm_w = np.linalg.norm(w)\n            \n            # Accumulate the logarithm of the stretching factor\n            if norm_w > 0: # Avoid log(0) in case of collapse to a fixed point\n                log_stretch_sum += np.log(norm_w)\n            \n            # Re-normalize the tangent vector for the next iteration\n            v = w / norm_w\n\n            # Update the state for the next iteration\n            x, y = x_next, y_next\n\n        # The LLE is the average of the logarithmic stretches\n        lle = log_stretch_sum / N_iter\n        return lle\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1: a = 1.4, b = 0.3 (Classic Hénon)\n        (1.4, 0.3),\n        # Case 2: a = 1.2, b = 0.3\n        (1.2, 0.3),\n        # Case 3: a = 1.4, b = 0.1\n        (1.4, 0.1),\n    ]\n\n    # Shared parameters for all test cases\n    N_transient = 1000\n    N_iterations = 100000\n    initial_x = 0.0\n    initial_y = 0.0\n\n    results = []\n    for a, b in test_cases:\n        # Calculate the LLE for the current case\n        result = compute_lle(a, b, initial_x, initial_y, N_transient, N_iterations)\n        # Round the result to 6 decimal places\n        results.append(round(result, 6))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2443507"}, {"introduction": "While the largest exponent signals chaos, the full spectrum of Lyapunov exponents paints a more complete picture of a system's dynamics, revealing how volumes in phase space are stretched and compressed. For continuous-time systems, or 'flows', like the iconic Lorenz system, one characteristically finds one exponent is zero, reflecting the neutral stability along the trajectory itself. This practice [@problem_id:2443522] challenges you to compute the full spectrum for the Lorenz attractor by integrating its variational equations and applying the robust QR decomposition method, a standard and powerful technique in computational dynamics.", "problem": "Compute the full Lyapunov spectrum for the three-dimensional Lorenz system and verify standard signatures of a strange attractor. The Lorenz system is the autonomous system of ordinary differential equations (ODE) given by\n$$\n\\dot{x} = \\sigma (y - x), \\quad\n\\dot{y} = x(\\rho - z) - y, \\quad\n\\dot{z} = x y - \\beta z,\n$$\nwhere $\\sigma$, $\\rho$, and $\\beta$ are real parameters, and $(x,y,z)$ are the state variables. The Lyapunov spectrum $(\\lambda_1,\\lambda_2,\\lambda_3)$ of a trajectory $x(t)$ is defined from the tangent flow $W(t)$ governed by the variational equation\n$$\n\\dot{W}(t) = J(x(t))\\,W(t), \\qquad W(0)=I,\n$$\nwhere $J(x)$ is the Jacobian matrix of the vector field evaluated along the trajectory and $I$ is the identity matrix. If $s_1(t)\\ge s_2(t)\\ge s_3(t)>0$ denote the singular values of $W(t)$, then the Lyapunov exponents are\n$$\n\\lambda_i = \\lim_{t\\to\\infty} \\frac{1}{t}\\,\\ln s_i(t), \\quad i\\in\\{1,2,3\\}.\n$$\nFor a smooth flow, the sum of Lyapunov exponents equals the long-time average of the divergence of the vector field along the trajectory. For the Lorenz system, the divergence is constant and given by\n$$\n\\nabla\\cdot f = -\\sigma - 1 - \\beta,\n$$\nhence\n$$\n\\lambda_1+\\lambda_2+\\lambda_3 = -\\sigma - 1 - \\beta.\n$$\nYour task is to compute $(\\lambda_1,\\lambda_2,\\lambda_3)$ for each test case below and, for each case, return a single boolean indicating whether both of the following two conditions hold simultaneously:\n- Sign pattern condition: $\\lambda_1 > 0$, $|\\lambda_2| \\le \\delta_0$, and $\\lambda_3  0$ with $\\delta_0 = 0.1$.\n- Sum consistency condition: $\\left|(\\lambda_1+\\lambda_2+\\lambda_3) - \\big(-\\sigma - 1 - \\beta\\big)\\right| \\le \\delta_\\Sigma$ with $\\delta_\\Sigma = 0.5$.\n\nUse the following test suite. In each case, integrate from the initial condition $(x(0),y(0),z(0))$, discard an initial transient of duration $T_{\\text{trans}}$, and estimate the Lyapunov exponents using a time-average over the subsequent interval of duration $T_{\\text{avg}}$:\n- Case $1$: $\\sigma=10$, $\\rho=28$, $\\beta=8/3$, $(x(0),y(0),z(0))=(1,1,1)$, $T_{\\text{trans}}=5$, $T_{\\text{avg}}=100$.\n- Case $2$: $\\sigma=10$, $\\rho=28$, $\\beta=8/3$, $(x(0),y(0),z(0))=(5,5,5)$, $T_{\\text{trans}}=5$, $T_{\\text{avg}}=100$.\n- Case $3$: $\\sigma=10$, $\\rho=35$, $\\beta=8/3$, $(x(0),y(0),z(0))=(1,1,1)$, $T_{\\text{trans}}=5$, $T_{\\text{avg}}=100$.\n- Case $4$: $\\sigma=10$, $\\rho=20$, $\\beta=8/3$, $(x(0),y(0),z(0))=(1,1,1)$, $T_{\\text{trans}}=5$, $T_{\\text{avg}}=100$.\n- Case $5$: $\\sigma=10$, $\\rho=28$, $\\beta=8/3$, $(x(0),y(0),z(0))=(1,1,1)$, $T_{\\text{trans}}=5$, $T_{\\text{avg}}=40$.\n\nYour program should produce a single line of output containing the results as a comma-separated list of five booleans enclosed in square brackets (e.g., \"[True,False,True,True,False]\"). No other output is permitted. There are no physical units in this problem. Angles do not appear in this problem. Express any tolerance checks in terms of the absolute value as stated above.", "solution": "The Lorenz system is a smooth three-dimensional autonomous flow defined by the vector field\n$$\nf(x,y,z) = \\big(\\sigma(y-x),\\,x(\\rho - z) - y,\\,xy - \\beta z\\big).\n$$\nThe Jacobian matrix is\n$$\nJ(x,y,z) = \n\\begin{pmatrix}\n-\\sigma  \\sigma  0\\\\\n\\rho - z  -1  -x\\\\\ny  x  -\\beta\n\\end{pmatrix}.\n$$\nLyapunov exponents quantify asymptotic exponential growth rates of infinitesimal perturbations. Let $x(t)$ be a solution trajectory and let $W(t)$ be the fundamental matrix of the variational equation\n$$\n\\dot{W}(t) = J(x(t))\\,W(t), \\qquad W(0)=I.\n$$\nIf $s_i(t)$ are the singular values of $W(t)$ in nonincreasing order, then by definition\n$$\n\\lambda_i = \\lim_{t\\to\\infty} \\frac{1}{t}\\ln s_i(t), \\quad i=1,2,3.\n$$\nThis definition is coordinate-independent and follows from first principles: linearize the nonlinear flow along the trajectory and track the growth of tangent vectors.\n\nA key identity connects the sum of Lyapunov exponents to the divergence of the vector field. Liouville’s formula states that\n$$\n\\frac{d}{dt}\\ln\\det W(t) = \\operatorname{tr}\\left(J(x(t))\\right).\n$$\nIntegrating and dividing by $t$ yields\n$$\n\\frac{1}{t}\\ln\\det W(t) = \\frac{1}{t}\\int_0^t \\operatorname{tr}(J(x(s)))\\,ds.\n$$\nAs $t\\to\\infty$, the left-hand side converges to $\\lambda_1+\\lambda_2+\\lambda_3$ (because $\\det W$ is the product of singular values), and the right-hand side converges to the long-time average of the divergence. For the Lorenz system, $\\operatorname{tr} J = -\\sigma - 1 - \\beta$ is constant, hence\n$$\n\\lambda_1+\\lambda_2+\\lambda_3 = -\\sigma - 1 - \\beta.\n$$\nTo compute the full spectrum numerically, one integrates the base flow $x(t)$ together with the tangent flow $W(t)$. Direct evolution of $W(t)$ leads to severe conditioning due to exponential growth and decay. The standard, principle-based remedy is to periodically factor $W(t)$ into an orthogonal-triangular form using an orthogonal-triangular (QR) decomposition,\n$$\nW(t_k) = Q_k R_k,\n$$\nwhere $Q_k$ is orthogonal and $R_k$ is upper triangular with positive diagonal entries. The diagonal of $R_k$ captures the local stretch factors over the interval, and one accumulates the logarithms of these diagonal elements. Specifically, if $\\Delta t$ is the interval between reorthonormalizations and $R_k$ is obtained over the $k$-th interval, then after $N$ such intervals the Lyapunov exponents are estimated by\n$$\n\\hat{\\lambda}_i = \\frac{1}{N\\,\\Delta t} \\sum_{k=1}^{N} \\ln\\left(\\left|R_k(i,i)\\right|\\right), \\quad i=1,2,3.\n$$\nSorting these estimates in nonincreasing order yields $(\\lambda_1,\\lambda_2,\\lambda_3)$.\n\nFor verification, two checks are required for each test case:\n- The sign pattern expected for a strange attractor is $\\lambda_1>0$, $\\lambda_2\\approx 0$, and $\\lambda_30$. We enforce $|\\lambda_2|\\le \\delta_0$ with $\\delta_0=0.1$ to account for finite-time estimation.\n- The sum of exponents must be consistent with the exact divergence identity, namely $\\left|(\\lambda_1+\\lambda_2+\\lambda_3) - \\big(-\\sigma - 1 - \\beta\\big)\\right|\\le \\delta_\\Sigma$ with $\\delta_\\Sigma=0.5$.\n\nFor the canonical chaotic Lorenz parameters $\\sigma=10$, $\\rho=28$, $\\beta=8/3$, the known asymptotic values are approximately $\\lambda_1\\approx 0.9$, $\\lambda_2\\approx 0$, and $\\lambda_3\\approx -14.6$, with the sum $\\approx -13.7$, consistent with $-\\sigma-1-\\beta = -13.\\overline{6}$. Different initial conditions on the same attractor yield the same spectrum due to ergodicity. Increasing $\\rho$ to $\\rho=35$ remains chaotic and preserves the sign pattern. Reducing $\\rho$ to $\\rho=20$ yields a nonchaotic regime where $\\lambda_10$, so the sign pattern test fails, even though the sum identity remains true.\n\nAlgorithmically, the program integrates the Lorenz ODE and its variational equations, applies periodic orthogonal-triangular (QR) reorthonormalization to the tangent matrix, accumulates logarithmic stretch factors to estimate the Lyapunov exponents over the averaging interval $T_{\\text{avg}}$ after discarding an initial transient $T_{\\text{trans}}$, sorts the exponents, and evaluates the two conditions with the given tolerances. The final output is a list of five booleans, one per test case, indicating whether both conditions are satisfied.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef lorenz_and_variational(t, y, sigma, rho, beta):\n    \"\"\"\n    y contains [x, y, z, W_flattened(9)]\n    Returns derivatives for the Lorenz system and the variational matrix W.\n    \"\"\"\n    x, yv, z = y[0], y[1], y[2]\n    W = y[3:].reshape(3, 3)\n\n    # Lorenz dynamics\n    dx = sigma * (yv - x)\n    dy = x * (rho - z) - yv\n    dz = x * yv - beta * z\n\n    # Jacobian of the Lorenz system\n    J = np.array([\n        [-sigma,   sigma,     0.0],\n        [rho - z,  -1.0,     -x   ],\n        [yv,       x,       -beta ]\n    ], dtype=float)\n\n    # Variational equation: dW/dt = J * W\n    dW = J @ W\n\n    deriv = np.empty(12, dtype=float)\n    deriv[0:3] = [dx, dy, dz]\n    deriv[3:] = dW.reshape(9)\n    return deriv\n\ndef integrate_step_with_qr(x_state, Q, h, sigma, rho, beta, rtol=1e-6, atol=1e-9, method='RK45'):\n    \"\"\"\n    Integrate the augmented system for time h starting from state x_state and\n    tangent basis Q. Return the next state, next orthonormal basis, and the\n    diagonal of R from QR factorization of the transported basis.\n    \"\"\"\n    y0 = np.empty(12, dtype=float)\n    y0[0:3] = x_state\n    y0[3:] = (Q).reshape(9)\n\n    sol = solve_ivp(\n        lorenz_and_variational,\n        t_span=(0.0, h),\n        y0=y0,\n        args=(sigma, rho, beta),\n        method=method,\n        rtol=rtol,\n        atol=atol\n    )\n    yf = sol.y[:, -1]\n    xf = yf[0:3]\n    Wf = yf[3:].reshape(3, 3)\n\n    # QR decomposition to re-orthonormalize\n    Qn, R = np.linalg.qr(Wf)\n    # Ensure numerical stability: avoid zero diagonals for log\n    diagR = np.diag(R)\n    # Accumulate logs of absolute diagonal entries\n    abs_diag = np.abs(diagR)\n    # Protect against extremely small values\n    eps = 1e-300\n    abs_diag = np.maximum(abs_diag, eps)\n\n    return xf, Qn, np.log(abs_diag)\n\ndef lyapunov_spectrum(sigma, rho, beta, x0, T_trans, T_avg, dt_re=0.05):\n    \"\"\"\n    Compute the full Lyapunov spectrum (lambda1 >= lambda2 >= lambda3)\n    for the Lorenz system with given parameters and initial condition.\n    Discard an initial transient T_trans, then average over T_avg.\n    \"\"\"\n    # Ensure T_trans and T_avg are multiples of dt_re for clean stepping\n    n_trans = int(round(T_trans / dt_re))\n    n_avg = int(round(T_avg / dt_re))\n    # Initialize state and tangent basis\n    x = np.array(x0, dtype=float)\n    Q = np.eye(3, dtype=float)\n\n    # Transient phase (do not accumulate)\n    for _ in range(n_trans):\n        x, Q, _ = integrate_step_with_qr(x, Q, dt_re, sigma, rho, beta)\n\n    # Averaging phase (accumulate)\n    sum_logs = np.zeros(3, dtype=float)\n    for _ in range(n_avg):\n        x, Q, logs = integrate_step_with_qr(x, Q, dt_re, sigma, rho, beta)\n        sum_logs += logs\n\n    # Estimate exponents\n    lambdas = sum_logs / (n_avg * dt_re)\n    # Sort in nonincreasing order\n    lambdas_sorted = np.sort(lambdas)[::-1]\n    return lambdas_sorted\n\ndef verify_case(sigma, rho, beta, x0, T_trans, T_avg, delta_zero=0.1, delta_sum=0.5):\n    lambdas = lyapunov_spectrum(sigma, rho, beta, x0, T_trans, T_avg)\n    lam1, lam2, lam3 = lambdas[0], lambdas[1], lambdas[2]\n    # Sign pattern condition\n    ok_signs = (lam1 > 0.0) and (abs(lam2) = delta_zero) and (lam3  0.0)\n    # Sum consistency condition\n    target_sum = -(sigma + 1.0 + beta)\n    ok_sum = abs((lam1 + lam2 + lam3) - target_sum) = delta_sum\n    return ok_signs and ok_sum\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (sigma, rho, beta, (x0,y0,z0), T_trans, T_avg)\n        (10.0, 28.0, 8.0/3.0, (1.0, 1.0, 1.0), 5.0, 100.0),  # Case 1\n        (10.0, 28.0, 8.0/3.0, (5.0, 5.0, 5.0), 5.0, 100.0),  # Case 2\n        (10.0, 35.0, 8.0/3.0, (1.0, 1.0, 1.0), 5.0, 100.0),  # Case 3\n        (10.0, 20.0, 8.0/3.0, (1.0, 1.0, 1.0), 5.0, 100.0),  # Case 4 (nonchaotic)\n        (10.0, 28.0, 8.0/3.0, (1.0, 1.0, 1.0), 5.0, 40.0),   # Case 5 (shorter average)\n    ]\n\n    results = []\n    for case in test_cases:\n        sigma, rho, beta, x0, T_trans, T_avg = case\n        result = verify_case(sigma, rho, beta, x0, T_trans, T_avg, delta_zero=0.1, delta_sum=0.5)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2443522"}, {"introduction": "The term 'strange attractor' refers not only to chaotic dynamics but also to the intricate, fractal geometry of the set on which the motion occurs. The Kaplan-Yorke dimension, $D_{\\mathrm{KY}}$, provides a powerful and direct connection between the system's dynamics and its geometry. In this final practice [@problem_id:2443485], you will leverage the full Lyapunov spectrum to calculate $D_{\\mathrm{KY}}$ for the Lorenz system, allowing you to estimate its fractal dimension and observe how this geometric property changes as the system transitions from simple to chaotic behavior.", "problem": "You are asked to investigate the dependence of the Kaplan–Yorke (KY) dimension on the control parameter of the Lorenz system using first principles. Consider the Lorenz system of ordinary differential equations (ODEs)\n$$\n\\dot{x} = \\sigma (y - x),\\quad\n\\dot{y} = x(\\rho - z) - y,\\quad\n\\dot{z} = x y - \\beta z,\n$$\nwith parameters fixed at $ \\sigma = 10 $, $ \\beta = \\frac{8}{3} $, and a variable control parameter $ \\rho > 0 $. Let the initial condition be $ (x(0),y(0),z(0)) = (1,1,1) $. Every quantity in this problem is dimensionless.\n\nLet $ \\phi^t(\\mathbf{x}_0) $ denote the flow map at time $ t $ starting from $ \\mathbf{x}_0 \\in \\mathbb{R}^3 $. The linearization of the flow along a trajectory $ \\mathbf{x}(t) $ is governed by the variational equation\n$$\n\\frac{d}{dt}\\,\\delta \\mathbf{x}(t) = J(\\mathbf{x}(t))\\,\\delta \\mathbf{x}(t),\n$$\nwhere $ J(\\mathbf{x}) $ is the Jacobian of the vector field,\n$$\nJ(x,y,z) =\n\\begin{pmatrix}\n-\\sigma  \\sigma  0 \\\\\n\\rho - z  -1  -x \\\\\ny  x  -\\beta\n\\end{pmatrix}.\n$$\n\nDefine the three Lyapunov exponents $ \\lambda_1 \\ge \\lambda_2 \\ge \\lambda_3 $ as the asymptotic exponential growth rates of the singular values of the fundamental matrix solution of the variational equation along a typical trajectory. Using these exponents, define the Kaplan–Yorke dimension $ D_{\\mathrm{KY}} $ by\n$$\nS_j = \\sum_{i=1}^{j} \\lambda_i,\\quad j \\in \\{1,2,3\\},\\quad\nj^\\star = \\max\\{ j \\in \\{0,1,2,3\\} \\,:\\, S_j \\ge 0\\},\\quad S_0 \\equiv 0,\n$$\nand\n$$\nD_{\\mathrm{KY}} =\n\\begin{cases}\n0,  j^\\star = 0, \\\\\nj^\\star + \\dfrac{S_{j^\\star}}{|\\lambda_{j^\\star+1}|},  j^\\star \\in \\{1,2\\}.\n\\end{cases}\n$$\n\nTask: For each specified value of $ \\rho $ in the test suite below, compute the three Lyapunov exponents from the variational equation along the trajectory starting from $ (1,1,1) $, then compute the corresponding Kaplan–Yorke dimension $ D_{\\mathrm{KY}} $ as defined above. Your program must numerically approximate the long-time limits implied by the definitions, starting from first principles, and produce the requested outputs.\n\nNumerical specifications to ensure a well-posed task:\n- Use a fixed time step of $ \\Delta t = 0.01 $ to evolve both the base trajectory and the variational dynamics.\n- Discard an initial transient of duration $ T_{\\mathrm{trans}} = 50 $ (i.e., $ 5000 $ steps) when estimating asymptotic quantities.\n- Use a data accumulation interval of duration $ T_{\\mathrm{acc}} = 250 $ (i.e., $ 25000 $ steps) after the transient for estimating the Lyapunov exponents.\n- Angles do not appear; no angle unit is required.\n- There are no physical units; all quantities are dimensionless.\n\nTest suite (distinct regimes):\n- Stable origin: $ \\rho = 0.5 $.\n- Stable nontrivial equilibria: $ \\rho = 20.0 $.\n- Near the onset of chaos: $ \\rho = 24.0 $.\n- Classical chaotic regime: $ \\rho = 28.0 $.\n- More strongly chaotic: $ \\rho = 35.0 $.\n- Far-chaotic regime: $ \\rho = 160.0 $.\n\nAnswer specification:\n- For each $ \\rho $ in the list $ [0.5, 20.0, 24.0, 28.0, 35.0, 160.0] $, output the corresponding $ D_{\\mathrm{KY}} $, rounded to exactly three digits after the decimal point.\n- The final output format must be a single line containing the results in a comma-separated list enclosed in square brackets, in the same order as the test suite. For example, $ [d_1,d_2,d_3,d_4,d_5,d_6] $ where each $ d_k $ is a float with exactly three digits after the decimal point.", "solution": "The problem as stated is valid. It is a well-defined computational task based on established principles of dynamical systems theory and computational physics. It is scientifically sound, self-contained, and free of ambiguity. The Lorenz system, Lyapunov exponents, and the Kaplan-Yorke dimension are all standard subjects of study. We shall proceed with a complete solution.\n\nThe objective is to compute the Kaplan-Yorke dimension, $D_{\\mathrm{KY}}$, for the Lorenz system for a given set of control parameters $\\rho$. The system is described by the set of three coupled ordinary differential equations (ODEs):\n$$\n\\dot{x} = \\sigma (y - x) \\\\\n\\dot{y} = x(\\rho - z) - y \\\\\n\\dot{z} = x y - \\beta z\n$$\nwhere parameters are fixed at $\\sigma = 10$ and $\\beta = \\frac{8}{3}$. The state of the system is given by the vector $\\mathbf{x}(t) = (x(t), y(t), z(t))^{\\mathrm{T}}$.\n\nThe Kaplan-Yorke dimension is a function of the Lyapunov exponents $\\lambda_1 \\ge \\lambda_2 \\ge \\lambda_3$ of the system. These exponents characterize the average exponential rate of divergence or convergence of nearby trajectories in the state space. They are formally defined via the linearization of the flow, which is described by the variational equation:\n$$\n\\frac{d}{dt}\\delta\\mathbf{x} = J(\\mathbf{x}(t))\\delta\\mathbf{x}\n$$\nHere, $\\delta\\mathbf{x}$ is an infinitesimal perturbation vector, and $J(\\mathbf{x})$ is the Jacobian matrix of the vector field, given by:\n$$\nJ(x,y,z) =\n\\begin{pmatrix}\n-\\sigma  \\sigma  0 \\\\\n\\rho - z  -1  -x \\\\\ny  x  -\\beta\n\\end{pmatrix}\n$$\nThe sum of the Lyapunov exponents is equal to the time-average of the trace of the Jacobian. For the Lorenz system, the trace is constant: $\\mathrm{Tr}(J) = -\\sigma - 1 - \\beta = -10 - 1 - 8/3 \\approx -13.67$. This implies that the system is dissipative, and the volume of any set of initial conditions in the state space contracts over time, which is a necessary condition for the existence of a strange attractor. Consequently, the sum of a typical trajectory's exponents is negative: $S_3 = \\lambda_1 + \\lambda_2 + \\lambda_3  0$.\n\nTo compute the Lyapunov exponents numerically, we must simultaneously integrate the system's state equations and the variational equations. We evolve a set of three initially orthonormal perturbation vectors, which form the columns of a matrix $\\mathbf{V}(t)$. The initial system state is $\\mathbf{x}(0) = (1, 1, 1)^{\\mathrm{T}}$, and the initial matrix of perturbations is the identity matrix, $\\mathbf{V}(0) = \\mathbf{I}$. The state and perturbations are evolved over a time step $\\Delta t$ according to:\n$$\n\\dot{\\mathbf{x}} = \\mathbf{F}(\\mathbf{x}) \\\\\n\\dot{\\mathbf{V}} = J(\\mathbf{x}(t))\\mathbf{V}(t)\n$$\nDirect integration of $\\mathbf{V}(t)$ is numerically unstable, as the column vectors will grow exponentially and align with the direction of the maximal exponent. To counter this, a re-orthonormalization procedure is applied at the end of each time step. The standard method, which we shall employ, is a QR decomposition.\n\nThe algorithm proceeds as follows:\n1. Initialize the state $\\mathbf{x}_0 = (1, 1, 1)^{\\mathrm{T}}$ and an orthonormal matrix $\\mathbf{V}_0 = \\mathbf{I}_{3 \\times 3}$. Initialize a vector $\\mathbf{L} = (0, 0, 0)^{\\mathrm{T}}$ to accumulate the logarithms of the scaling factors.\n\n2. Integrate the combined system of $3+9=12$ ODEs for $\\mathbf{x}(t)$ and $\\mathbf{V}(t)$ over a single time step $\\Delta t = 0.01$ to obtain $\\mathbf{x}_1$ and $\\mathbf{V}'_1$. The problem specifies a fixed time step but not the integration method. A first-order Euler method is primitive; for superior accuracy and stability, we use the fourth-order Runge-Kutta (RK4) method.\n\n3. At the end of the step, apply QR decomposition to the evolved perturbation matrix: $\\mathbf{V}'_1 = \\mathbf{Q}_1 \\mathbf{R}_1$, where $\\mathbf{Q}_1$ is an orthogonal matrix and $\\mathbf{R}_1$ is an upper-triangular matrix.\n\n4. The diagonal elements of $\\mathbf{R}_1$, namely $R_{1,11}$, $R_{1,22}$, and $R_{1,33}$, represent the growth factors of the perturbation vectors over the interval $\\Delta t$. Logarithms of the absolute values of these diagonal elements are accumulated. The matrix $\\mathbf{V}$ for the next step is reset to the orthogonal matrix $\\mathbf{Q}_1$. To ensure $\\mathbf{V}$ remains a right-handed basis and the arguments of the logarithms are positive, we enforce positive diagonals on $\\mathbf{R}$ by absorbing any negative signs into the columns of $\\mathbf{Q}$.\n\n5. Repeat steps 2-4 for a total number of iterations corresponding to the specified transient time $T_{\\mathrm{trans}} = 50$ and accumulation time $T_{\\mathrm{acc}} = 250$. The sums of logarithms are only accumulated during the $T_{\\mathrm{acc}}$ interval.\n\n6. After the simulation, the Lyapunov exponents are calculated from the accumulated sums:\n$$ \\lambda_i = \\frac{1}{T_{\\mathrm{acc}}} L_i = \\frac{1}{T_{\\mathrm{acc}}} \\sum_{k} \\ln |R_{k,ii}| $$\nThe sum is over all steps in the accumulation period. The QR algorithm naturally yields the exponents, with $\\lambda_1$ associated with $R_{ii}$ for $i=1$, provided the initial vectors have a generic orientation.\n\n7. With the exponents $\\lambda_1, \\lambda_2, \\lambda_3$ computed, the Kaplan-Yorke dimension $D_{\\mathrm{KY}}$ is calculated using the provided formula. Let $S_j = \\sum_{i=1}^j \\lambda_i$ with $S_0=0$. Find $j^\\star = \\max\\{j \\in \\{0, 1, 2, 3\\} : S_j \\ge 0\\}$. Since $S_3  0$, $j^\\star$ can be at most $2$.\n   - If $j^\\star=0$ (i.e., $\\lambda_1  0$), $D_{\\mathrm{KY}} = 0$. This signifies a stable fixed point.\n   - If $j^\\star=1$ (i.e., $\\lambda_1 \\ge 0$ and $S_2  0$), $D_{\\mathrm{KY}} = 1 + S_1 / |\\lambda_2|$. This typically signifies a limit cycle.\n   - If $j^\\star=2$ (i.e., $S_2 \\ge 0$), $D_{\\mathrm{KY}} = 2 + S_2 / |\\lambda_3|$. This signifies a strange attractor.\n\nThis procedure will be executed for each value of $\\rho$ in the test suite, and the resulting $D_{\\mathrm{KY}}$ will be reported to three decimal places.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the Kaplan-Yorke dimension for the Lorenz system for various\n    values of the control parameter rho.\n    \"\"\"\n    # System parameters and numerical specifications\n    SIGMA = 10.0\n    BETA = 8.0 / 3.0\n    DT = 0.01\n    T_TRANS = 50.0\n    T_ACC = 250.0\n    N_TRANS = int(T_TRANS / DT)\n    N_ACC = int(T_ACC / DT)\n    \n    # Test suite for the parameter rho\n    test_rhos = [0.5, 20.0, 24.0, 28.0, 35.0, 160.0]\n    results = []\n\n    def lorenz_system_and_variational(full_state, rho):\n        \"\"\"\n        Computes the time derivative of the extended 12-dimensional state vector,\n        which includes the Lorenz system variables (x, y, z) and the 3x3\n        matrix of perturbation vectors V.\n        \"\"\"\n        x, y, z = full_state[:3]\n        V = full_state[3:].reshape((3, 3))\n\n        # Lorenz system ODEs\n        d_xyz = np.array([\n            SIGMA * (y - x),\n            x * (rho - z) - y,\n            x * y - BETA * z\n        ])\n\n        # Jacobian matrix J(x,y,z)\n        J = np.array([\n            [-SIGMA, SIGMA, 0.0],\n            [rho - z, -1.0, -x],\n            [y, x, -BETA]\n        ])\n\n        # Variational equation dV/dt = J * V\n        d_V = J @ V\n        \n        # Return the flattened 12-element derivative vector\n        return np.concatenate((d_xyz, d_V.flatten()))\n\n    def rk4_step(f, y, dt, rho):\n        \"\"\"\n        Performs a single step of the fourth-order Runge-Kutta method.\n        \"\"\"\n        k1 = f(y, rho)\n        k2 = f(y + dt / 2.0 * k1, rho)\n        k3 = f(y + dt / 2.0 * k2, rho)\n        k4 = f(y + dt * k3, rho)\n        return y + dt / 6.0 * (k1 + 2 * k2 + 2 * k3 + k4)\n\n    for rho in test_rhos:\n        # Initial conditions for each run\n        # State vector [x, y, z]\n        xyz_state = np.array([1.0, 1.0, 1.0])\n        # Perturbation matrix V, initialized to identity\n        v_state = np.identity(3)\n        # Combined 12-element state vector\n        full_state = np.concatenate((xyz_state, v_state.flatten()))\n        \n        # Accumulator for logarithms of stretching factors\n        lyap_sum = np.zeros(3)\n        \n        total_steps = N_TRANS + N_ACC\n        for step in range(total_steps):\n            # Evolve the combined state by one time step\n            full_state = rk4_step(lorenz_system_and_variational, full_state, DT, rho)\n\n            # Extract the evolved perturbation matrix\n            v_prime = full_state[3:].reshape((3, 3))\n            \n            # Orthonormalize using QR decomposition\n            Q, R = np.linalg.qr(v_prime)\n            \n            # The diagonal of R contains the stretching factors.\n            # To ensure the logarithm is well-defined and the new basis Q\n            # maintains orientation, we force R's diagonal elements to be positive.\n            # Any negative sign is absorbed into the corresponding column of Q.\n            signs = np.sign(np.diag(R))\n            signs[signs == 0] = 1 # Avoid issues with zero on the diagonal\n            Q = Q @ np.diag(signs)\n            R_diag_abs = np.abs(np.diag(R))\n            \n            # Reset the perturbation part of the state to the new orthonormal basis\n            full_state[3:] = Q.flatten()\n            \n            # Accumulate after the transient period\n            if step >= N_TRANS:\n                # Add logarithm of stretching factors to the sum\n                lyap_sum += np.log(R_diag_abs)\n\n        # Calculate the Lyapunov exponents\n        lyap_exponents = lyap_sum / T_ACC\n        \n        # Sort exponents in descending order for Kaplan-Yorke calculation\n        lyap_exponents = np.sort(lyap_exponents)[::-1]\n        lambda1, lambda2, lambda3 = lyap_exponents[0], lyap_exponents[1], lyap_exponents[2]\n        \n        # Calculate sums S_j for Kaplan-Yorke dimension formula\n        S1 = lambda1\n        S2 = lambda1 + lambda2\n        \n        # Determine j_star\n        j_star = 0\n        if S1 >= 0:\n            j_star = 1\n            if S2 >= 0:\n                j_star = 2\n        \n        # Calculate Kaplan-Yorke dimension D_KY\n        D_KY = 0.0\n        if j_star == 1:\n            # Avoid division by zero, though unlikely for stable limit cycles\n            if abs(lambda2) > 1e-12:\n                D_KY = 1.0 + S1 / abs(lambda2)\n            else:\n                D_KY = 1.0\n        elif j_star == 2:\n            # Avoid division by zero, though lambda3 is strongly negative in chaos\n            if abs(lambda3) > 1e-12:\n                D_KY = 2.0 + S2 / abs(lambda3)\n            else:\n                D_KY = 2.0\n        \n        results.append(f\"{D_KY:.3f}\")\n\n    # Final print statement in the exact required format\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2443485"}]}