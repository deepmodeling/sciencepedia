{"hands_on_practices": [{"introduction": "The heart of the Marker-and-Cell (MAC) method lies in the projection step, which ensures the velocity field remains divergence-free. This step gives rise to a Poisson equation for pressure, a critical link between the velocity and pressure fields. This first practice exercise [@problem_id:1127137] provides a foundational, hands-on calculation to show exactly how the discretized pressure equation is formed on a MAC grid, connecting the intermediate velocity field to the pressure update in a concrete, step-by-step manner.", "problem": "Consider the two-dimensional incompressible Euler equations for a fluid with constant density $\\rho$. A common numerical approach for solving these equations is the projection method. This method computes an intermediate velocity field $\\mathbf{u}^*$ in an advection step, and then projects it onto the space of divergence-free fields to find the velocity $\\mathbf{u}^{n+1}$ and pressure $p^{n+1}$ at the next time step. The projection step solves the following system:\n$$\n\\frac{\\mathbf{u}^{n+1} - \\mathbf{u}^*}{\\Delta t} = -\\frac{1}{\\rho}\\nabla p^{n+1} \\quad \\text{with} \\quad \\nabla \\cdot \\mathbf{u}^{n+1} = 0\n$$\nTaking the divergence of the first equation and applying the incompressibility constraint leads to a Poisson equation for the pressure:\n$$\n\\nabla^2 p^{n+1} = \\frac{\\rho}{\\Delta t} \\nabla \\cdot \\mathbf{u}^*\n$$\n\nWe will analyze this projection step on a 2D Marker-and-Cell (MAC) grid. The domain is discretized into a $3 \\times 3$ grid of square cells, indexed by $(i,j)$ for $i,j \\in \\{0, 1, 2\\}$, each with side length $h$. The pressure $p_{i,j}$ is located at the center of cell $(i,j)$, which has coordinates $(x_i, y_j) = ((i-1)h, (j-1)h)$. The horizontal velocity component $u$ is located at the center of the vertical cell faces, at positions $(x_{i+1/2}, y_j) = ((i-1/2)h, (j-1)h)$. The vertical velocity component $v$ is located at the center of the horizontal cell faces, at positions $(x_i, y_{j+1/2}) = ((i-1)h, (j-1/2)h)$.\n\nAfter an advection step, the intermediate velocity field $\\mathbf{u}^* = (u^*, v^*)$ is found to be:\n$$\nu^*(x,y) = -ay + ab\\Delta t x\n$$\n$$\nv^*(x,y) = bx + ab\\Delta t y\n$$\nwhere $a$ and $b$ are constants with units of inverse time, and $\\Delta t$ is the time step.\n\nThe problem is discretized using standard second-order centered finite differences. The pressure is assumed to be zero on the boundary cells, i.e., $p^{n+1}_{i,j} = 0$ for any cell $(i,j)$ where $i \\in \\{0, 2\\}$ or $j \\in \\{0, 2\\}$.\n\nDerive the expression for the pressure $p_{1,1}^{n+1}$ in the central cell $(i=1, j=1)$ at the new time step.", "solution": "1. The projection step leads to the Poisson equation:\n$$ \\nabla^2 p^{n+1} = \\frac{\\rho}{\\Delta t}\\,\\nabla\\!\\cdot\\mathbf{u}^* $$\nOn a MAC grid the five-point Laplacian at cell $(i,j)$ reads:\n$$ \\frac{p_{i+1,j}+p_{i-1,j}+p_{i,j+1}+p_{i,j-1}-4p_{i,j}}{h^2} = \\frac{\\rho}{\\Delta t}\\, \\frac{u^*_{i+1/2,j}-u^*_{i-1/2,j}+v^*_{i,j+1/2}-v^*_{i,j-1/2}}{h} $$\n\n2. For the central cell $(1,1)$ the neighboring pressures vanish ($p=0$ on the boundary), so:\n$$ \\frac{-4\\,p_{1,1}}{h^2} = \\frac{\\rho}{\\Delta t}\\, \\frac{u^*_{3/2,1}-u^*_{1/2,1}+v^*_{1,3/2}-v^*_{1,1/2}}{h} $$\nhence:\n$$ p_{1,1} = -\\frac{h^2}{4}\\,\\frac{\\rho}{\\Delta t}\\, \\frac{u^*_{3/2,1}-u^*_{1/2,1}+v^*_{1,3/2}-v^*_{1,1/2}}{h} $$\n\n3. The intermediate field is:\n$$ u^*(x,y)=-a\\,y+ab\\Delta t\\,x,\\quad v^*(x,y)=b\\,x+ab\\Delta t\\,y. $$  \nAt the vertical faces $x=\\pm h/2,\\;y=0$:\n$$ u^*_{3/2,1}-u^*_{1/2,1} = ab\\Delta t\\bigl(\\tfrac h2-(-\\tfrac h2)\\bigr) = ab\\Delta t\\,h. $$  \nAt the horizontal faces $x=0,\\;y=\\pm h/2$:\n$$ v^*_{1,3/2}-v^*_{1,1/2} = ab\\Delta t\\bigl(\\tfrac h2-(-\\tfrac h2)\\bigr) = ab\\Delta t\\,h. $$\n\n4. Substitution gives:\n$$ p_{1,1} = -\\frac{h^2}{4}\\,\\frac{\\rho}{\\Delta t}\\, \\frac{2\\,ab\\Delta t\\,h}{h} = -\\frac{\\rho\\,ab\\,h^2}{2} $$", "answer": "$$\\boxed{-\\frac{\\rho\\,a\\,b\\,h^2}{2}}$$", "id": "1127137"}, {"introduction": "While understanding the interior grid is crucial, the true behavior of a fluid is often dictated by its boundaries. Implementing these boundary conditions accurately on a staggered grid is a vital, and often subtle, aspect of computational fluid dynamics. This exercise [@problem_id:2438328] delves into the practical use of ghost cells to enforce no-slip wall conditions for velocity and Neumann conditions for pressure, demonstrating how to maintain second-order accuracy at the domain's edge.", "problem": "Consider a $2$D incompressible flow in a rectangular domain $\\Omega = [0, L_x] \\times [0, L_y]$ discretized by a uniform Marker-And-Cell (MAC) staggered grid. Let the grid spacings be $\\Delta x$ and $\\Delta y$. The pressure $p_{i,j}$ is stored at cell centers located at $(x_i, y_j)$ with $x_i = (i - \\tfrac{1}{2})\\Delta x$ for $i = 1, \\dots, N_x$ and $y_j = (j - \\tfrac{1}{2})\\Delta y$ for $j = 1, \\dots, N_y$. The horizontal velocity component $u_{i+1/2,j}$ is stored at vertical cell faces at $(x = i \\Delta x,\\, y = (j - \\tfrac{1}{2})\\Delta y)$ for $i = 0, \\dots, N_x$ and $j = 1, \\dots, N_y$. The vertical velocity component $v_{i, j+1/2}$ is stored at horizontal cell faces at $(x = (i - \\tfrac{1}{2})\\Delta x,\\, y = j \\Delta y)$ for $i = 1, \\dots, N_x$ and $j = 0, \\dots, N_y$. Introduce one layer of ghost values outside the domain: $p_{0,j}$ for pressure to the left of the first interior pressure column, and $v_{0, j+1/2}$ for vertical velocity to the left of the first interior $v$ column. At the left boundary $x = 0$, impose the no-slip Dirichlet boundary condition for velocity, $u(0, y) = 0$ and $v(0, y) = 0$, and a homogeneous Neumann boundary condition for pressure, $\\partial p/\\partial x (0, y) = 0$.\n\nAssume that to enforce boundary conditions with second-order accuracy, you evaluate boundary-normal derivatives with centered finite differences and boundary values with centered averages about the boundary. In particular, interpret the wall location $x = 0$ for $v$ as centered between $v_{0, j+1/2}$ and $v_{1, j+1/2}$ in the $x$-direction, and approximate $\\partial p/\\partial x$ at the wall by a centered difference using $p_{0,j}$ and $p_{1,j}$.\n\nWhich of the following prescriptions for the left boundary ghost values is consistent with these boundary conditions and second-order centered stencils?\n\nA. $u_{1/2, j} = 0$, $v_{0, j+1/2} = v_{1, j+1/2}$, $p_{0, j} = p_{1, j}$\n\nB. $u_{1/2, j} = 0$, $v_{0, j+1/2} = -\\,v_{1, j+1/2}$, $p_{0, j} = p_{1, j}$\n\nC. $u_{1/2, j} = 0$, $v_{0, j+1/2} = 0$, $p_{0, j} = p_{1, j}$\n\nD. $u_{1/2, j} = 0$, $v_{0, j+1/2} = -\\,v_{1, j+1/2}$, $p_{0, j} = -\\,p_{1, j}$\n\nChoose the option that correctly enforces the stated conditions on a MAC grid at $x = 0$.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- **Domain**: $2$D rectangular, $\\Omega = [0, L_x] \\times [0, L_y]$.\n- **Flow**: Incompressible.\n- **Grid**: Uniform Marker-And-Cell (MAC) staggered grid with spacings $\\Delta x$ and $\\Delta y$.\n- **Variable Locations**:\n    - Pressure $p_{i,j}$ at cell centers: $(x_i, y_j) = ((i - \\tfrac{1}{2})\\Delta x, (j - \\tfrac{1}{2})\\Delta y)$.\n    - Horizontal velocity $u_{i+1/2,j}$ at vertical faces: $(i \\Delta x, (j - \\tfrac{1}{2})\\Delta y)$.\n    - Vertical velocity $v_{i, j+1/2}$ at horizontal faces: $((i - \\tfrac{1}{2})\\Delta x, j \\Delta y)$.\n- **Boundary**: Left boundary at $x = 0$.\n- **Boundary Conditions at $x=0$**:\n    1.  $u(0, y) = 0$ (no-slip normal velocity).\n    2.  $v(0, y) = 0$ (no-slip tangential velocity).\n    3.  $\\partial p/\\partial x (0, y) = 0$ (homogeneous Neumann for pressure).\n- **Ghost Values**: A layer of ghost values is introduced to the left of the domain, including $p_{0,j}$ and $v_{0, j+1/2}$.\n- **Numerical Scheme**: Second-order accuracy is required.\n    - Boundary-normal derivatives are approximated with centered finite differences.\n    - Boundary values are approximated with centered averages.\n- **Specific Instructions**:\n    - The value of $v$ at the wall $x=0$ is approximated as centered between $v_{0, j+1/2}$ and $v_{1, j+1/2}$.\n    - The derivative $\\partial p/\\partial x$ at the wall $x=0$ is approximated by a centered difference using $p_{0,j}$ and $p_{1,j}$.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientific Grounding**: The problem describes a standard configuration for numerical simulation of incompressible viscous flows using the MAC method, a cornerstone of computational fluid dynamics. The boundary conditions are physically and mathematically appropriate for a solid wall. The problem is scientifically sound.\n- **Well-Posedness**: The problem is well-posed. It requires the derivation of discrete boundary condition implementations based on clearly stated rules (grid structure, variable locations, and finite difference stencils). The instructions are specific enough to lead to a unique result.\n- **Objectivity**: The language is precise and devoid of any subjective or ambiguous terminology.\n\n**Step 3: Verdict and Action**\nThe problem statement is found to be valid, self-contained, and consistent. I will proceed with the derivation of the solution.\n\nThe enforcement of the three boundary conditions at the left wall ($x=0$) is analyzed separately.\n\n**1. Normal Velocity Component: $u(0, y) = 0$**\nThe horizontal velocity components $u_{i+1/2,j}$ are located at x-coordinates $x = i \\Delta x$. For the index $i=0$, the velocity node $u_{1/2,j}$ is located at $x = 0 \\cdot \\Delta x = 0$. This means the discrete velocity points for the normal component lie exactly on the boundary. The Dirichlet boundary condition $u(0, y) = 0$ is therefore applied directly to these nodes.\n$$ u_{1/2, j} = 0 $$\nThis is a direct enforcement and requires no approximation or ghost points for $u$.\n\n**2. Tangential Velocity Component: $v(0, y) = 0$**\nThe vertical velocity components $v_{i, j+1/2}$ are located at x-coordinates $x = (i - \\tfrac{1}{2}) \\Delta x$. The first column of interior nodes corresponds to $i=1$, located at $x = (1 - \\tfrac{1}{2}) \\Delta x = \\tfrac{\\Delta x}{2}$. These are the values $v_{1, j+1/2}$. The ghost nodes $v_{0, j+1/2}$ are located at $x = (0 - \\tfrac{1}{2}) \\Delta x = -\\tfrac{\\Delta x}{2}$. The boundary is at $x=0$, exactly halfway between these two sets of nodes.\n\nThe problem specifies using a centered average to enforce the value at the boundary. The value of the velocity $v$ at the wall $x=0$ is thus approximated as the arithmetic mean of the values at the two bracketing nodes:\n$$ v(0, y_{j+1/2}) \\approx \\frac{v_{0, j+1/2} + v_{1, j+1/2}}{2} $$\nThis approximation is second-order accurate. Setting this equal to the boundary condition $v(0, y) = 0$:\n$$ \\frac{v_{0, j+1/2} + v_{1, j+1/2}}{2} = 0 $$\nSolving for the ghost value $v_{0, j+1/2}$ yields:\n$$ v_{0, j+1/2} = -v_{1, j+1/2} $$\n\n**3. Pressure Boundary Condition: $\\partial p/\\partial x (0, y) = 0$**\nThe pressure values $p_{i,j}$ are located at x-coordinates $x = (i - \\tfrac{1}{2}) \\Delta x$. Similar to the vertical velocity, the first interior pressure nodes $p_{1,j}$ are at $x = \\tfrac{\\Delta x}{2}$, and the ghost pressure nodes $p_{0,j}$ are at $x = -\\tfrac{\\Delta x}{2}$. The boundary is at $x=0$.\n\nThe problem states that the derivative $\\partial p/\\partial x$ at the wall is to be approximated by a second-order centered finite difference using $p_{0,j}$ and $p_{1,j}$. The stencil for the derivative at $x=0$ is:\n$$ \\frac{\\partial p}{\\partial x} \\bigg|_{x=0, y=y_j} \\approx \\frac{p_{1,j} - p_{0,j}}{(\\tfrac{\\Delta x}{2}) - (-\\tfrac{\\Delta x}{2})} = \\frac{p_{1,j} - p_{0,j}}{\\Delta x} $$\nApplying the homogeneous Neumann condition $\\partial p/\\partial x = 0$:\n$$ \\frac{p_{1,j} - p_{0,j}}{\\Delta x} = 0 $$\nThis implies:\n$$ p_{0,j} = p_{1,j} $$\n\n**Summary of Derived Prescriptions:**\n1.  $u_{1/2, j} = 0$\n2.  $v_{0, j+1/2} = -v_{1, j+1/2}$\n3.  $p_{0,j} = p_{1,j}$\n\nNow, I will evaluate the provided options.\n\n**Option-by-Option Analysis**\n\n*   **A. $u_{1/2, j} = 0$, $v_{0, j+1/2} = v_{1, j+1/2}$, $p_{0, j} = p_{1, j}$**\n    - The prescription for $u$ is **Correct**.\n    - The prescription for $v$, $v_{0, j+1/2} = v_{1, j+1/2}$, implies a zero-gradient condition, $(\\partial v / \\partial x) |_{x=0} = 0$, which corresponds to a free-slip or symmetry condition, not a no-slip condition. This is **Incorrect**.\n    - The prescription for $p$ is **Correct**.\n    Therefore, option A is **Incorrect**.\n\n*   **B. $u_{1/2, j} = 0$, $v_{0, j+1/2} = -\\,v_{1, j+1/2}$, $p_{0, j} = p_{1, j}$**\n    - The prescription for $u$, $u_{1/2, j} = 0$, is **Correct**.\n    - The prescription for $v$, $v_{0, j+1/2} = -v_{1, j+1/2}$, is **Correct**, as derived for the no-slip condition $v(0,y)=0$ using a centered average.\n    - The prescription for $p$, $p_{0, j} = p_{1, j}$, is **Correct**, as derived for the homogeneous Neumann condition $\\partial p/\\partial x = 0$ using a centered difference.\n    All three prescriptions are correct. Therefore, option B is **Correct**.\n\n*   **C. $u_{1/2, j} = 0$, $v_{0, j+1/2} = 0$, $p_{0, j} = p_{1, j}$**\n    - The prescription for $u$ is **Correct**.\n    - The prescription for $v$, $v_{0, j+1/2} = 0$, is **Incorrect**. This is a first-order implementation that forces the average value at the wall to be $v_{1, j+1/2}/2$, which is not zero unless the flow near the wall is stagnant. This does not correctly enforce the no-slip condition in a general sense with second-order accuracy.\n    - The prescription for $p$ is **Correct**.\n    Therefore, option C is **Incorrect**.\n\n*   **D. $u_{1/2, j} = 0$, $v_{0, j+1/2} = -\\,v_{1, j+1/2}$, $p_{0, j} = -\\,p_{1, j}$**\n    - The prescription for $u$ is **Correct**.\n    - The prescription for $v$ is **Correct**.\n    - The prescription for $p$, $p_{0, j} = -p_{1, j}$, implies a homogeneous Dirichlet condition, $p(0,y)=0$, implemented with a centered average. This contradicts the given Neumann condition $\\partial p/\\partial x = 0$. This is **Incorrect**.\n    Therefore, option D is **Incorrect**.", "answer": "$$\\boxed{B}$$", "id": "2438328"}, {"introduction": "Many real-world fluid dynamics problems involve flow around complex, non-rectangular objects. While conforming grids can be complex to generate, the embedded boundary or 'cut-cell' method offers a powerful alternative for Cartesian grids. This advanced programming exercise [@problem_id:2438357] will guide you through the implementation of a cut-cell solver for a Poisson problem, demonstrating how to modify finite-volume stencils to accurately capture the physics at an arbitrarily shaped boundary.", "problem": "You are to implement a two-dimensional embedded-boundary, cut-cell discretization for a scalar elliptic problem on a Marker-And-Cell (MAC) grid, with the unknown pressure stored at cell centers. The computational domain is the unit square with coordinates $(x,y) \\in [0,1] \\times [0,1]$ and a uniform Cartesian mesh of size $N \\times N$ with spacing $h = 1/N$. The pressure $p$ satisfies the steady Poisson equation with constant diffusion coefficient and a manufactured source in the fluid subdomain $\\Omega_f \\subset [0,1]^2$:\n$$ -\\nabla^2 p = f \\quad \\text{in } \\Omega_f, $$\nwith Dirichlet boundary conditions on both the outer boundary $\\partial [0,1]^2$ and on an internal embedded boundary $\\Gamma \\subset [0,1]^2$ that separates the fluid from the solid region. The embedded boundary is represented by a signed-distance level set $\\phi(x,y)$ such that $\\phi(x,y) \\ge 0$ in the fluid and $\\phi(x,y) < 0$ in the solid, with $\\Gamma = \\{(x,y): \\phi(x,y)=0\\}$. The MAC grid placement is such that pressure is stored at cell centers, while velocities would be stored at faces (you will not need velocities in this problem but should follow the MAC placement for pressure).\n\nYour implementation must start from first principles:\n- Finite-volume control of a cell-centered control volume with area $h^2$ in two dimensions, integrating the divergence form and using the divergence theorem to express fluxes across the four faces.\n- For each of the four coordinate-aligned directions, approximate the face-normal gradient using two-point fluxes between the cell center and either the neighboring fluid-cell center or the intersection point with the Dirichlet boundary where the boundary cuts the face-normal line, at a properly computed distance.\n\nUse the following well-tested base:\n- Manufactured solution $p^\\star(x,y) = \\sin(\\pi x)\\sin(\\pi y)$.\n- Source term $f(x,y) = 2\\pi^2 \\sin(\\pi x)\\sin(\\pi y)$, since $\\Delta p^\\star = -2\\pi^2 p^\\star$ and thus $-\\nabla^2 p^\\star = 2\\pi^2 p^\\star$.\n- Dirichlet data on both the outer boundary and the embedded boundary equal to the manufactured solution: $p = p^\\star$.\n\nStaggered-grid context and stencil modification near the embedded boundary:\n- Pressure unknowns are stored at cell centers $(x_i,y_j)$ with $x_i = (i+1/2)h$, $y_j = (j+1/2)h$, where $i,j \\in \\{0,1,\\dots,N-1\\}$. Only cells with $\\phi(x_i,y_j) \\ge 0$ are fluid unknowns.\n- For each fluid cell, in the standard interior case with fluid neighbors in all four directions, use the five-point Laplacian stencil derived from the finite-volume flux balance:\n$$ \\frac{4p_{i,j} - p_{i+1,j} - p_{i-1,j} - p_{i,j+1} - p_{i,j-1}}{h^2} = f(x_i,y_j). $$\n- For a neighbor in direction $d \\in \\{\\text{east, west, north, south}\\}$ that is outside the computational domain (outer Dirichlet boundary at a distance $\\delta = h/2$ from the cell center along direction $d$), replace the missing neighbor flux by a cut-face contribution that adds to the diagonal and the right-hand side:\n$$ a_{P} \\leftarrow a_{P} + \\frac{1}{h\\,\\delta}, \\quad b \\leftarrow b + \\frac{p_B}{h\\,\\delta}, $$\nwhere $p_B = p^\\star$ evaluated at the boundary point at distance $\\delta$ along direction $d$ from the cell center.\n- For a neighbor in direction $d$ that is a solid cell (i.e., $\\phi$ changes sign across that neighbor center), let $\\phi_P = \\phi(x_i,y_j)$ at the fluid cell center and $\\phi_N = \\phi$ at the neighboring center. Compute the fractional interface location along the center-to-center line as\n$$ \\lambda = \\frac{\\phi_P}{\\phi_P - \\phi_N}, \\quad \\delta = \\lambda\\,h, $$\nwith $\\lambda \\in (0,1)$, so that the interface lies a distance $\\delta$ from the fluid cell center along direction $d$. Approximate the cut-face flux by a two-point flux between the cell center and the Dirichlet boundary at the interface point, adding the same contribution as above with this $\\delta$:\n$$ a_{P} \\leftarrow a_{P} + \\frac{1}{h\\,\\delta}, \\quad b \\leftarrow b + \\frac{p_B}{h\\,\\delta}, $$\nwhere $p_B = p^\\star$ evaluated at the interface point displaced by $\\delta$ along direction $d$ from $(x_i,y_j)$.\n- For a neighbor in direction $d$ that is a fluid cell, use the standard neighbor coupling\n$$ a_{P} \\leftarrow a_{P} + \\frac{1}{h^2}, \\quad a_{N} \\leftarrow a_{N} - \\frac{1}{h^2}. $$\n\nThis yields a modified five-point stencil near cut cells that enforces Dirichlet conditions at the embedded boundary by replacing neighbor couplings with boundary contributions that depend on the distance to the interface. Assemble the linear system $A \\mathbf{p} = \\mathbf{b}$ over all fluid cells and solve for $\\mathbf{p}$. Then, compute the root-mean-square (RMS) error against $p^\\star$ over fluid cell centers:\n$$ \\varepsilon_{\\mathrm{RMS}} = \\sqrt{\\frac{1}{M}\\sum_{(i,j)\\in \\Omega_f} \\left(p_{i,j} - p^\\star(x_i,y_j)\\right)^2}, $$\nwhere $M$ is the number of fluid cells.\n\nAngle units do not apply. All quantities are dimensionless; report errors as pure numbers.\n\nTest suite. Your program must run the following three test cases and return the three RMS errors as a single list in the order below:\n- Test $1$ (curved boundary, typical case): $N=64$, embedded boundary is a circle with center $(x_c,y_c)=(0.5,0.5)$ and radius $r=0.25$, with $\\phi(x,y) = \\sqrt{(x-x_c)^2+(y-y_c)^2} - r$. The fluid is the exterior of the circle, i.e., $\\phi \\ge 0$.\n- Test $2$ (grid-aligned boundary, reduction to standard stencil): $N=64$, embedded boundary is the vertical line at $x=0.5$, with $\\phi(x,y)=0.5-x$. The fluid is the region $x \\le 0.5$ (i.e., $\\phi \\ge 0$).\n- Test $3$ (small cut-cells near the outer boundary): $N=64$, embedded boundary is a circle with center $(x_c,y_c)=(0.75,0.5)$ and radius $r=0.24$ (so the closest approach to the right wall is $0.01$), with the same sign convention $\\phi \\ge 0$ for the fluid.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[result1,result2,result3]\"), where each result is the RMS error for the corresponding test in the order listed above.", "solution": "The problem statement is subjected to rigorous validation.\n\nStep 1: Extract Givens.\n- Governing Equation: $-\\nabla^2 p = f$ in the fluid domain $\\Omega_f$.\n- Computational Domain: $[0,1] \\times [0,1]$.\n- Mesh: Uniform $N \\times N$ Cartesian grid, spacing $h = 1/N$.\n- Grid Type: Marker-And-Cell (MAC), with pressure $p$ at cell centers $(x_i,y_j) = ((i+1/2)h, (j+1/2)h)$ for $i,j \\in \\{0, \\dots, N-1\\}$.\n- Fluid/Solid Definition: A level set function $\\phi(x,y)$ defines the domains. $\\Omega_f = \\{(x,y) | \\phi(x,y) \\ge 0\\}$ is the fluid region. $\\phi(x,y) < 0$ is the solid region. The interface is $\\Gamma = \\{(x,y) | \\phi(x,y) = 0\\}$.\n- Manufactured Solution: $p^\\star(x,y) = \\sin(\\pi x)\\sin(\\pi y)$.\n- Source Term: $f(x,y) = 2\\pi^2 \\sin(\\pi x)\\sin(\\pi y)$.\n- Boundary Conditions: Dirichlet conditions $p = p^\\star(x,y)$ on the outer boundary $\\partial [0,1]^2$ and on the embedded boundary $\\Gamma$.\n- Discretization for Interior Cells: A five-point stencil for the Laplacian: $\\frac{4p_{i,j} - p_{i+1,j} - p_{i-1,j} - p_{i,j+1} - p_{i,j-1}}{h^2} = f(x_i,y_j)$.\n- Discretization at Outer Boundary: For a face at distance $\\delta = h/2$ from the cell center, the matrix diagonal $a_P$ and right-hand side $b$ are modified: $a_{P} \\leftarrow a_{P} + \\frac{1}{h\\,\\delta}$ and $b \\leftarrow b + \\frac{p_B}{h\\,\\delta}$, where $p_B$ is $p^\\star$ at the boundary point.\n- Discretization at Embedded Boundary (Cut-Cell): For a fluid cell with center value $\\phi_P$ and a solid neighbor with center value $\\phi_N$, the distance to the interface is $\\delta = \\lambda h$, where $\\lambda = \\frac{\\phi_P}{\\phi_P - \\phi_N}$. The stencil modification is identical in form to the outer boundary case, using this new $\\delta$ and the corresponding boundary value $p_B = p^\\star$ at the interface point.\n- Error Metric: Root-Mean-Square (RMS) error $\\varepsilon_{\\mathrm{RMS}} = \\sqrt{\\frac{1}{M}\\sum_{(i,j)\\in \\Omega_f} \\left(p_{i,j} - p^\\star(x_i,y_j)\\right)^2}$, where $M$ is the count of fluid cells.\n- Test Cases: Three specific cases are defined by $N$ and the function $\\phi(x,y)$.\n\nStep 2: Validate Using Extracted Givens.\n- **Scientifically Grounded:** The problem describes a standard numerical method (finite volume with cut-cell embedded boundaries) for a canonical elliptic partial differential equation (the Poisson equation). The Method of Manufactured Solutions is a rigorous technique for code verification. The entire problem is firmly rooted in the principles of numerical analysis and computational engineering.\n- **Well-Posed:** The underlying physical problem (Poisson equation with Dirichlet conditions) is well-posed. The described discretization leads to a linear system $A \\mathbf{p} = \\mathbf{b}$ where the matrix $A$ is sparse, symmetric positive-definite (or can be made so), and typically diagonally dominant, ensuring a unique and stable numerical solution exists.\n- **Objective:** The problem is specified with precise mathematical equations, boundary conditions, and numerical parameters. It is free from subjective or ambiguous language.\n\nStep 3: Verdict and Action.\nThe problem is found to be scientifically sound, well-posed, objective, and self-contained. It is a valid problem in computational engineering. I will proceed with a full solution.\n\nThe problem requires the construction of a finite-volume solver for the scalar Poisson equation $-\\nabla^2 p = f$. We begin from the integral form of the equation over a control volume $V_{i,j}$, which is a square cell of area $h^2$ centered at $(x_i, y_j)$. Applying the divergence theorem to the Laplacian term gives:\n$$ -\\int_{V_{i,j}} \\nabla \\cdot (\\nabla p) \\, dV = \\int_{V_{i,j}} f \\, dV $$\n$$ -\\oint_{\\partial V_{i,j}} \\nabla p \\cdot \\mathbf{n} \\, dS = \\int_{V_{i,j}} f \\, dV $$\nIn two dimensions, the control volume is an area and the boundary integral is a line integral over the four faces of the cell (east, west, north, south). Let the side length of the cell be $h$. The equation becomes:\n$$ -\\left[ \\int_{\\text{east}} \\frac{\\partial p}{\\partial x} dy - \\int_{\\text{west}} \\frac{\\partial p}{\\partial x} dy + \\int_{\\text{north}} \\frac{\\partial p}{\\partial y} dx - \\int_{\\text{south}} \\frac{\\partial p}{\\partial y} dx \\right] \\approx f(x_i, y_j) h^2 $$\nApproximating the integrals and gradients, the total flux out of the cell is the sum of fluxes across the four faces. The flux across the east face, for example, is $-h (\\frac{\\partial p}{\\partial x})_e$. The discrete equation for cell $(i,j)$ is a balance of these fluxes:\n$$ -h \\left[ (\\nabla p \\cdot \\mathbf{n})_e + (\\nabla p \\cdot \\mathbf{n})_w + (\\nabla p \\cdot \\mathbf{n})_n + (\\nabla p \\cdot \\mathbf{n})_s \\right] = f_{i,j} h^2 $$\n$$ (\\nabla p \\cdot \\mathbf{n})_e + (\\nabla p \\cdot \\mathbf{n})_w + (\\nabla p \\cdot \\mathbf{n})_n + (\\nabla p \\cdot \\mathbf{n})_s = -f_{i,j} h $$\nWe approximate the normal gradient at each face using a two-point finite difference. The specific approximation depends on whether the neighboring cell is fluid, solid, or outside the domain. Summing all contributions gives a linear equation for $p_{i,j}$.\n\nFor a cell $(i,j)$ where all four neighbors—$(i\\pm1, j)$ and $(i, j\\pm1)$—are also fluid cells, the gradients are approximated using centered differences. For the east face, the gradient is $(\\frac{\\partial p}{\\partial x})_e \\approx \\frac{p_{i+1,j} - p_{i,j}}{h}$. Summing all four flux approximations yields the standard five-point stencil for the negative Laplacian, scaled by $h^2$:\n$$ \\frac{4p_{i,j} - p_{i+1,j} - p_{i-1,j} - p_{i,j+1} - p_{i,j-1}}{h^2} = f(x_i,y_j) $$\nThis equation can be rearranged to show contributions to a linear system. For each fluid neighbor, say $(i+1,j)$, the terms are $\\frac{1}{h^2}p_{i,j} - \\frac{1}{h^2}p_{i+1,j}$. This corresponds to adding $\\frac{1}{h^2}$ to the diagonal matrix element for $p_{i,j}$ and $-\\frac{1}{h^2}$ to the off-diagonal element corresponding to the neighbor $p_{i+1,j}$.\n\nWhen a cell face lies on the outer computational boundary (e.g., $x=1$), a Dirichlet condition $p=p_B$ is applied. The face is located at a distance $\\delta = h/2$ from the cell center. The normal gradient is approximated by a one-sided difference: $(\\frac{\\partial p}{\\partial x})_e \\approx \\frac{p_B - p_{i,j}}{\\delta}$. The contribution to the flux balance from this face is $\\frac{p_{i,j} - p_B}{h\\delta}$. This modifies the linear equation for $p_{i,j}$ by adding $\\frac{1}{h\\delta}$ to the diagonal coefficient and adding the known term $\\frac{p_B}{h\\delta}$ to the right-hand side vector.\n\nWhen a fluid cell $(i,j)$ is adjacent to a solid cell, the embedded boundary $\\Gamma$ cuts through the grid. We use the level set function $\\phi$ to locate the interface. Let $\\phi_P = \\phi(x_i, y_j) \\ge 0$ be the value at the fluid cell center and $\\phi_N < 0$ be the value at the solid neighbor's center. Assuming $\\phi$ is a signed distance function, linear interpolation gives the fractional distance to the interface as $\\lambda = \\frac{\\phi_P}{\\phi_P - \\phi_N}$. The actual distance is $\\delta = \\lambda h$. The Dirichlet condition $p=p_B$ is applied at this interpolated point on the boundary. The gradient approximation becomes $\\frac{p_B - p_{i,j}}{\\delta}$, and the flux contribution is $\\frac{p_{i,j} - p_B}{h\\delta}$. This results in a stencil modification identical in form to the outer boundary case: the diagonal element is incremented by $\\frac{1}{h\\delta}$ and the right-hand side is incremented by $\\frac{p_B}{h\\delta}$.\n\nA critical edge case arises if a fluid cell center lies on the boundary, i.e., $\\phi(x_i, y_j)=0$. This leads to $\\lambda=0$ and $\\delta=0$, creating a singularity in the flux term $\\frac{1}{h\\delta}$. The physically correct and numerically stable approach is to recognize that the pressure at this cell center is known by the Dirichlet condition. Therefore, for such a cell, we discard the flux balance equation and directly enforce $p_{i,j} = p^\\star(x_i, y_j)$. In the linear system $A\\mathbf{p}=\\mathbf{b}$, this is accomplished by setting the corresponding row of $A$ to the identity (1 on the diagonal, 0 elsewhere) and setting the corresponding element of $\\mathbf{b}$ to the known boundary value.\n\nThe overall algorithm is as follows:\n1.  Identify all fluid cells where $\\phi(x_i, y_j) \\ge 0$. Create a mapping from the 2D indices $(i,j)$ of these $M$ cells to a 1D index $k \\in [0, M-1]$.\n2.  Construct the $M \\times M$ sparse matrix $A$ and the $M \\times 1$ vector $\\mathbf{b}$.\n3.  For each fluid cell $(i,j)$, iterate through its four neighbors.\n4.  For each neighbor, apply the appropriate rule: standard five-point coupling for a fluid neighbor, or the boundary flux modification for an outer boundary or a solid (cut-cell) neighbor. Update the coefficients of $A$ and the entries of $\\mathbf{b}$ accordingly. Handle the $\\delta=0$ case by setting the Dirichlet condition directly.\n5.  Solve the resulting sparse linear system $A\\mathbf{p} = \\mathbf{b}$ for the vector of unknown pressures $\\mathbf{p}$.\n6.  Compute the RMS error by comparing the numerical solution $p_{i,j}$ to the exact manufactured solution $p^\\star(x_i, y_j)$ over all fluid cells.\n\nThis procedure is implemented for each of the three test cases specified in the problem statement.\n```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.sparse import lil_matrix, csc_matrix\nfrom scipy.sparse.linalg import spsolve\n\ndef p_star(x: np.ndarray, y: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes the manufactured solution for pressure.\n    p_star(x,y) = sin(pi * x) * sin(pi * y)\n    \"\"\"\n    return np.sin(np.pi * x) * np.sin(np.pi * y)\n\ndef f_source(x: np.ndarray, y: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes the source term f(x,y) corresponding to the manufactured solution.\n    -nabla^2 p_star = 2 * pi^2 * sin(pi * x) * sin(pi * y)\n    \"\"\"\n    return 2.0 * np.pi**2 * np.sin(np.pi * x) * np.sin(np.pi * y)\n\ndef run_case(N: int, phi_func) -> float:\n    \"\"\"\n    Sets up and solves the Poisson problem for a given test case configuration.\n\n    Args:\n        N: The number of grid cells in each dimension.\n        phi_func: A callable function phi(x,y) that defines the level set.\n\n    Returns:\n        The root-mean-square error of the numerical solution.\n    \"\"\"\n    h = 1.0 / N\n    h2 = h * h\n\n    # Create grid for cell centers\n    i_coords = np.arange(N)\n    j_coords = np.arange(N)\n    x_centers = (i_coords + 0.5) * h\n    y_centers = (j_coords + 0.5) * h\n    xx, yy = np.meshgrid(x_centers, y_centers, indexing='ij')\n\n    # Evaluate level set and identify fluid cells\n    phi_grid = phi_func(xx, yy)\n    is_fluid = phi_grid >= 0\n\n    # Map 2D fluid cell indices to a 1D linear system index\n    fluid_indices = np.where(is_fluid)\n    num_fluid_cells = len(fluid_indices[0])\n    \n    map_ij_to_k = -np.ones((N, N), dtype=int)\n    map_ij_to_k[fluid_indices] = np.arange(num_fluid_cells)\n\n    # Initialize sparse matrix A and vector b\n    A = lil_matrix((num_fluid_cells, num_fluid_cells))\n    b = np.zeros(num_fluid_cells)\n\n    # Iterate over all grid cells to build the linear system\n    for i in range(N):\n        for j in range(N):\n            if not is_fluid[i, j]:\n                continue\n\n            k = map_ij_to_k[i, j]\n            xi, yj = xx[i, j], yy[i, j]\n            \n            # Start with source term on RHS: ... = f_ij\n            b[k] = f_source(xi, yj)\n\n            p_center_phi = phi_grid[i, j]\n\n            # Special case: cell center lies on the boundary (phi_P = 0).\n            # This would lead to delta = 0, causing a singularity.\n            # We enforce the Dirichlet condition directly on this node.\n            if np.isclose(p_center_phi, 0.0):\n                A[k, :] = 0.0\n                A[k, k] = 1.0\n                b[k] = p_star(xi, yj)\n                continue  # Equation for this cell is now fixed.\n\n            # Process 4 neighbors (East, West, North, South)\n            # Tuple format: (di, dj) for index offset\n            neighbors = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n            \n            for di, dj in neighbors:\n                ni, nj = i + di, j + dj\n\n                # Case 1: Outer boundary of the [0,1]x[0,1] domain\n                if not (0 <= ni and ni < N and 0 <= nj and nj < N):\n                    delta = h / 2.0\n                    xb = xi + di * delta\n                    yb = yj + dj * delta\n                    pb = p_star(xb, yb)\n                    \n                    A[k, k] += 1.0 / (h * delta)\n                    b[k] += pb / (h * delta)\n\n                # Case 2 & 3: Internal neighbor (either fluid or solid)\n                else:\n                    # Case 2: Neighbor is a fluid cell\n                    if is_fluid[ni, nj]:\n                        nk = map_ij_to_k[ni, nj]\n                        A[k, k] += 1.0 / h2\n                        A[k, nk] -= 1.0 / h2\n                    \n                    # Case 3: Neighbor is a solid cell (cut-cell)\n                    else:\n                        p_neighbor_phi = phi_grid[ni, nj]\n                        phi_diff = p_center_phi - p_neighbor_phi\n                        \n                        # Since phi_P > 0 and phi_N  0, phi_diff is safely non-zero.\n                        lambda_frac = p_center_phi / phi_diff\n                        delta = lambda_frac * h\n                        \n                        # Interface point coordinates\n                        xb = xi + di * delta\n                        yb = yj + dj * delta\n                        pb = p_star(xb, yb)\n                        \n                        A[k, k] += 1.0 / (h * delta)\n                        b[k] += pb / (h * delta)\n\n    # Solve the linear system\n    A_csc = csc_matrix(A)\n    p_vec = spsolve(A_csc, b)\n\n    # Calculate RMS error\n    p_solution_grid = np.full((N, N), np.nan)\n    p_solution_grid[fluid_indices] = p_vec\n\n    p_exact_grid = p_star(xx, yy)\n    \n    squared_errors = (p_solution_grid[is_fluid] - p_exact_grid[is_fluid])**2\n    rms_error = np.sqrt(np.mean(squared_errors))\n    \n    return rms_error\n```", "answer": "[1.7712176840616194e-05,1.5283365922379383e-06,2.27855909249626e-05]", "id": "2438357"}]}