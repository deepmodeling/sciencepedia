{"hands_on_practices": [{"introduction": "The abstract procedure of LU factorization can be applied to any invertible square matrix, including those that represent fundamental physical and geometric operations. To gain a solid grasp of the mechanics, this first practice involves deriving the $L$ and $U$ factors for a standard 2D rotation matrix by hand. This exercise ([@problem_id:2409827]) bridges the gap between abstract algebra and tangible geometry, reinforcing the step-by-step algorithm while building intuition about how factorization works on a familiar transformation.", "problem": "In computational physics, linear transformations in the plane are often represented by matrices whose factorization facilitates efficient numerical solvers. Consider the two-dimensional rotation by an angle $\\theta$ (in radians), represented by the $2 \\times 2$ matrix\n$$\nR(\\theta) = \\begin{pmatrix}\n\\cos\\theta  -\\sin\\theta \\\\\n\\sin\\theta  \\cos\\theta\n\\end{pmatrix}.\n$$\nDetermine the lower–upper (LU) factorization of $R(\\theta)$ in the convention where the lower triangular factor $L$ has ones on its diagonal and no row pivoting is used. Assume $\\cos\\theta \\neq 0$ so that no row pivoting is required. Express $R(\\theta)$ as $R(\\theta) = L U$ with $L$ unit lower triangular and $U$ upper triangular, and give the matrices $L(\\theta)$ and $U(\\theta)$ in closed form as functions of $\\theta$.\n\nAnswer format requirement: Provide your final answer as a single analytic expression consisting of a row matrix whose two entries are the matrices $L(\\theta)$ and $U(\\theta)$, respectively. No rounding is required and no units are involved.", "solution": "The objective is to find a unit lower triangular matrix $L$ and an upper triangular matrix $U$ such that $R(\\theta) = L U$. Given that $R(\\theta)$ is a $2 \\times 2$ matrix, the matrices $L$ and $U$ will also be $2 \\times 2$. Their general forms are:\n$$\nL = \\begin{pmatrix} 1  0 \\\\ l_{21}  1 \\end{pmatrix}\n\\quad \\text{and} \\quad\nU = \\begin{pmatrix} u_{11}  u_{12} \\\\ 0  u_{22} \\end{pmatrix}\n$$\nHere, $l_{21}$, $u_{11}$, $u_{12}$, and $u_{22}$ are the unknown elements that we must determine as functions of $\\theta$.\n\nThe factorization equation is:\n$$\nR(\\theta) = \\begin{pmatrix} \\cos\\theta  -\\sin\\theta \\\\ \\sin\\theta  \\cos\\theta \\end{pmatrix} = L U = \\begin{pmatrix} 1  0 \\\\ l_{21}  1 \\end{pmatrix} \\begin{pmatrix} u_{11}  u_{12} \\\\ 0  u_{22} \\end{pmatrix}\n$$\nPerforming the matrix multiplication on the right-hand side yields:\n$$\n\\begin{pmatrix} 1  0 \\\\ l_{21}  1 \\end{pmatrix} \\begin{pmatrix} u_{11}  u_{12} \\\\ 0  u_{22} \\end{pmatrix} = \\begin{pmatrix} 1 \\cdot u_{11} + 0 \\cdot 0  1 \\cdot u_{12} + 0 \\cdot u_{22} \\\\ l_{21} \\cdot u_{11} + 1 \\cdot 0  l_{21} \\cdot u_{12} + 1 \\cdot u_{22} \\end{pmatrix} = \\begin{pmatrix} u_{11}  u_{12} \\\\ l_{21} u_{11}  l_{21} u_{12} + u_{22} \\end{pmatrix}\n$$\nBy equating the corresponding elements of $R(\\theta)$ and the resulting $LU$ product, we obtain a system of equations:\n$$\n\\begin{pmatrix} \\cos\\theta  -\\sin\\theta \\\\ \\sin\\theta  \\cos\\theta \\end{pmatrix} = \\begin{pmatrix} u_{11}  u_{12} \\\\ l_{21} u_{11}  l_{21} u_{12} + u_{22} \\end{pmatrix}\n$$\nWe can solve for the unknowns sequentially. From the first row:\n1.  $u_{11} = \\cos\\theta$\n2.  $u_{12} = -\\sin\\theta$\n\nFrom the second row:\n3.  $l_{21} u_{11} = \\sin\\theta$. Substituting the expression for $u_{11}$, we have $l_{21} \\cos\\theta = \\sin\\theta$. Since the problem states that $\\cos\\theta \\neq 0$, we can divide by $\\cos\\theta$ to find $l_{21}$:\n    $$\n    l_{21} = \\frac{\\sin\\theta}{\\cos\\theta} = \\tan\\theta\n    $$\n4.  $l_{21} u_{12} + u_{22} = \\cos\\theta$. We substitute the now known values of $l_{21}$ and $u_{12}$:\n    $$\n    (\\tan\\theta)(-\\sin\\theta) + u_{22} = \\cos\\theta\n    $$\n    Solving for $u_{22}$:\n    $$\n    u_{22} = \\cos\\theta + \\tan\\theta \\sin\\theta = \\cos\\theta + \\frac{\\sin\\theta}{\\cos\\theta} \\sin\\theta = \\frac{\\cos^2\\theta + \\sin^2\\theta}{\\cos\\theta}\n    $$\n    Using the fundamental trigonometric identity $\\cos^2\\theta + \\sin^2\\theta = 1$, this simplifies to:\n    $$\n    u_{22} = \\frac{1}{\\cos\\theta} = \\sec\\theta\n    $$\nHaving found all unknown elements, we can construct the matrices $L(\\theta)$ and $U(\\theta)$:\n$$\nL(\\theta) = \\begin{pmatrix} 1  0 \\\\ \\tan\\theta  1 \\end{pmatrix}\n$$\n$$\nU(\\theta) = \\begin{pmatrix} \\cos\\theta  -\\sin\\theta \\\\ 0  \\sec\\theta \\end{pmatrix}\n$$\nThese are the unit lower triangular and upper triangular factors of the rotation matrix $R(\\theta)$, valid for all $\\theta$ where $\\cos\\theta \\neq 0$.", "answer": "$$\n\\boxed{\\begin{pmatrix} \\begin{pmatrix} 1  0 \\\\ \\tan\\theta  1 \\end{pmatrix}  \\begin{pmatrix} \\cos\\theta  -\\sin\\theta \\\\ 0  \\sec\\theta \\end{pmatrix} \\end{pmatrix}}\n$$", "id": "2409827"}, {"introduction": "The LU factorization is not just a tool for finding an unknown solution vector $\\mathbf{x}$; it provides a complete and efficient representation of the original matrix $A$. This exercise ([@problem_id:2409873]) challenges you to think about the linear system in reverse. Given the factors $L$ and $U$ and a known solution $\\mathbf{x}$, your task is to reconstruct the corresponding right-hand side vector $\\mathbf{b}$, effectively verifying the relationship $A\\mathbf{x} = (LU)\\mathbf{x} = \\mathbf{b}$ through direct computation.", "problem": "In computational modeling of electrostatics, consider the one-dimensional Poisson boundary-value problem on the domain $(0,1)$ with Dirichlet boundary conditions. Using a uniform grid with $N=3$ interior points and the standard second-order central-difference approximation, the nondimensionalized linear system for the interior values can be written in the form $A\\,\\mathbf{x}=\\mathbf{b}$, where the coefficient matrix $A$ is tridiagonal with entries $2$ on the diagonal and $-1$ on the first sub- and super-diagonals. Suppose a Lower-Upper (LU) factorization without pivoting of $A$ is given by\n$$\nL=\\begin{pmatrix}\n1  0  0 \\\\\n-\\frac{1}{2}  1  0 \\\\\n0  -\\frac{2}{3}  1\n\\end{pmatrix},\\quad\nU=\\begin{pmatrix}\n2  -1  0 \\\\\n0  \\frac{3}{2}  -1 \\\\\n0  0  \\frac{4}{3}\n\\end{pmatrix},\n$$\nso that $A=L\\,U$. Assume that the solution vector at the three interior grid points is\n$$\n\\mathbf{x}=\\begin{pmatrix}1 \\\\ 1 \\\\ 1\\end{pmatrix}.\n$$\nDetermine the right-hand side vector $\\mathbf{b}$ such that $A\\,\\mathbf{x}=\\mathbf{b}$. Express your final answer as a row vector listing the three components in order corresponding to the interior grid points. No rounding is required.", "solution": "The linear system is $A\\,\\mathbf{x}=\\mathbf{b}$ with $A=L\\,U$. By the definition of matrix multiplication and factorization, this implies\n$$\n\\mathbf{b}=A\\,\\mathbf{x}=(L\\,U)\\,\\mathbf{x}=L\\,(U\\,\\mathbf{x}).\n$$\nWe first compute $U\\,\\mathbf{x}$. With\n$$\nU=\\begin{pmatrix}\n2  -1  0 \\\\\n0  \\frac{3}{2}  -1 \\\\\n0  0  \\frac{4}{3}\n\\end{pmatrix},\\quad\n\\mathbf{x}=\\begin{pmatrix}1 \\\\ 1 \\\\ 1\\end{pmatrix},\n$$\nwe have\n$$\nU\\,\\mathbf{x}=\\begin{pmatrix}\n2\\cdot 1 + (-1)\\cdot 1 + 0\\cdot 1 \\\\\n0\\cdot 1 + \\frac{3}{2}\\cdot 1 + (-1)\\cdot 1 \\\\\n0\\cdot 1 + 0\\cdot 1 + \\frac{4}{3}\\cdot 1\n\\end{pmatrix}\n=\\begin{pmatrix}\n1 \\\\ \\frac{1}{2} \\\\ \\frac{4}{3}\n\\end{pmatrix}.\n$$\nNext, compute $\\mathbf{b}=L\\,(U\\,\\mathbf{x})$. With\n$$\nL=\\begin{pmatrix}\n1  0  0 \\\\\n-\\frac{1}{2}  1  0 \\\\\n0  -\\frac{2}{3}  1\n\\end{pmatrix},\\quad\nU\\,\\mathbf{x}=\\begin{pmatrix}1 \\\\ \\frac{1}{2} \\\\ \\frac{4}{3}\\end{pmatrix},\n$$\nwe obtain\n$$\n\\mathbf{b}=L\\,(U\\,\\mathbf{x})=\\begin{pmatrix}\n1\\cdot 1 + 0\\cdot \\frac{1}{2} + 0\\cdot \\frac{4}{3} \\\\\n-\\frac{1}{2}\\cdot 1 + 1\\cdot \\frac{1}{2} + 0\\cdot \\frac{4}{3} \\\\\n0\\cdot 1 + \\left(-\\frac{2}{3}\\right)\\cdot \\frac{1}{2} + 1\\cdot \\frac{4}{3}\n\\end{pmatrix}\n=\\begin{pmatrix}\n1 \\\\ 0 \\\\ 1\n\\end{pmatrix}.\n$$\nTherefore, the right-hand side vector $\\mathbf{b}$ is $\\begin{pmatrix}1 \\\\ 0 \\\\ 1\\end{pmatrix}$, which in row form is $\\begin{pmatrix}1  0  1\\end{pmatrix}$.", "answer": "$$\\boxed{\\begin{pmatrix}1  0  1\\end{pmatrix}}$$", "id": "2409873"}, {"introduction": "In real-world scientific applications, from quantum mechanics to structural engineering, system matrices are often enormous yet sparse, with most entries being zero. Storing these as dense arrays is prohibitively expensive. This final practice ([@problem_id:2409844]) moves from theory to practical implementation by asking you to adapt the back-substitution algorithm for an upper triangular matrix stored in a compressed skyline format, a common technique for optimizing memory usage and computational speed.", "problem": "You are given a linear system of equations of the form $U \\mathbf{x} = \\mathbf{y}$ where $U \\in \\mathbb{R}^{n \\times n}$ is an upper-triangular matrix with nonzero diagonal entries and $\\mathbf{y} \\in \\mathbb{R}^{n}$. The matrix $U$ is not provided explicitly; instead, it is stored in a column-oriented compressed skyline format defined as follows.\n\nFor each column index $j \\in \\{0, 1, \\dots, n-1\\}$, let $r_j$ be the index of the first (smallest) row in column $j$ that may contain a nonzero entry. The profile of column $j$ consists of the entries $\\{ U_{i,j} \\mid i = r_j, r_j + 1, \\dots, j \\}$, stored consecutively in a one-dimensional array $\\mathrm{val}$. Let $\\mathrm{col\\_ptr}$ be an integer array of length $n+1$ with $0$-based indexing such that the segment for column $j$ is $\\mathrm{val}[\\mathrm{col\\_ptr}[j]\\,:\\,\\mathrm{col\\_ptr}[j+1])$. Thus, the length of column $j$’s segment is $j - r_j + 1$, and the entry on the diagonal $U_{j,j}$ is the last element of that segment. The array $\\mathrm{row\\_start}$ of length $n$ stores the values $r_j$. All indices are $0$-based, and entries above the skyline (rows $i  r_j$ in column $j$) are implicitly zero. Entries below the main diagonal are zero by the upper-triangular structure.\n\nYour task is to compute the solution vector $\\mathbf{x}$ for each of the following test cases. For each case, you are given $n$, $\\mathrm{col\\_ptr}$, $\\mathrm{row\\_start}$, $\\mathrm{val}$, and $\\mathbf{y}$, all with $0$-based indexing.\n\nTest Suite:\n- Case A:\n  - $n = 4$\n  - $\\mathrm{col\\_ptr} = [0, 1, 3, 6, 9]$\n  - $\\mathrm{row\\_start} = [0, 0, 0, 1]$\n  - $\\mathrm{val} = [3, -1, 4, 2, 0.5, -2, 1, 3, 5]$\n  - $\\mathbf{y} = [1, 2, -1, 10]$\n- Case B:\n  - $n = 3$\n  - $\\mathrm{col\\_ptr} = [0, 1, 2, 3]$\n  - $\\mathrm{row\\_start} = [0, 1, 2]$\n  - $\\mathrm{val} = [7, -3, 2]$\n  - $\\mathbf{y} = [14, 6, -4]$\n- Case C:\n  - $n = 1$\n  - $\\mathrm{col\\_ptr} = [0, 1]$\n  - $\\mathrm{row\\_start} = [0]$\n  - $\\mathrm{val} = [4]$\n  - $\\mathbf{y} = [10]$\n- Case D:\n  - $n = 5$\n  - $\\mathrm{col\\_ptr} = [0, 1, 3, 5, 7, 9]$\n  - $\\mathrm{row\\_start} = [0, 0, 1, 2, 3]$\n  - $\\mathrm{val} = [2, 1, 3, -1, 4, 0.5, 5, -0.5, 6]$\n  - $\\mathbf{y} = [3, 2, 4.5, 4.5, 6]$\n\nAll arithmetic is to be carried out in real numbers. There are no physical units in this task.\n\nProgram Output Specification:\n- Your program must produce a single line of output containing the list of solutions for the cases A, B, C, and D, in that order.\n- Each solution must be represented as a list of floating-point numbers corresponding to the entries of $\\mathbf{x}$ for that case.\n- The final output must be a single line consisting of a JSON-like array of arrays, with comma-separated entries and no spaces. For example, a single line of the form [a,b,c] is a valid schematic for a flat list; here you must output a list of lists corresponding to the four cases.", "solution": "The task is to solve a system of linear equations $U \\mathbf{x} = \\mathbf{y}$, where $U$ is an upper-triangular matrix with non-zero diagonal entries. The existence of a unique solution is guaranteed, as such a matrix $U$ is always invertible. The solution is found by the method of back-substitution, adapted for the specified column-oriented compressed skyline storage format.\n\nThe fundamental principle for solving an upper-triangular system $U \\mathbf{x} = \\mathbf{y}$ is back-substitution. The system is described by the equations:\n$$ \\sum_{j=i}^{n-1} U_{i,j} x_j = y_i \\quad \\text{for } i = 0, 1, \\dots, n-1 $$\nThe algorithm proceeds by solving for the variables in reverse order, from $x_{n-1}$ down to $x_0$. The last equation, for $i=n-1$, involves only one unknown:\n$$ U_{n-1,n-1} x_{n-1} = y_{n-1} \\implies x_{n-1} = \\frac{y_{n-1}}{U_{n-1,n-1}} $$\nOnce $x_{n-1}$ is known, we can substitute it into the second-to-last equation (for $i=n-2$) to solve for $x_{n-2}$. This process is repeated for all preceding variables. For a general index $i$, the formula for $x_i$ is:\n$$ x_i = \\frac{1}{U_{i,i}} \\left( y_i - \\sum_{j=i+1}^{n-1} U_{i,j} x_j \\right) $$\nThis is a row-oriented approach. However, the matrix is provided in a column-oriented compressed skyline format. A more suitable approach is a column-oriented algorithm. We can maintain a working copy of the right-hand side vector, let's call it $\\mathbf{z}$, initialized to $\\mathbf{y}$. The algorithm computes $x_j$ for $j=n-1, n-2, \\dots, 0$.\n\n1.  Initialize a solution vector $\\mathbf{x} \\in \\mathbb{R}^n$ and set a temporary vector $\\mathbf{z} = \\mathbf{y}$.\n2.  Iterate $j$ from $n-1$ down to $0$. In each iteration, we solve for $x_j$ and then update the vector $\\mathbf{z}$ to remove the contribution of the term $\\mathbf{u}_j x_j$.\n    a. First, we solve for $x_j$. At step $j$, the values $x_{j+1}, \\dots, x_{n-1}$ are known, and their effects have been subtracted from $\\mathbf{z}$. The $j$-th equation effectively becomes $U_{j,j} x_j = z_j$. Thus, we compute:\n       $$ x_j = \\frac{z_j}{U_{j,j}} $$\n    b. Next, we update the remaining elements of the temporary vector $\\mathbf{z}$. The term $\\mathbf{u}_j x_j$ contributes to the equations for rows $i  j$. We must subtract this contribution from $\\mathbf{z}$:\n       $$ z_i \\leftarrow z_i - U_{i,j} x_j \\quad \\text{for } i  j $$\n\nThis column-oriented algorithm is highly efficient for the given storage format. The non-zero entries of a column $\\mathbf{u}_j$ are $\\{ U_{i,j} \\mid i = r_j, \\dots, j \\}$, where $r_j$ is the starting row index for column $j$. These values are stored contiguously in the `val` array. The steps to solve become:\n\nLet `val`, `col_ptr`, and `row_start` be the arrays defining the matrix $U$.\n1.  Initialize `x = np.zeros(n)` and `z = np.copy(y)`.\n2.  For $j = n-1, n-2, \\dots, 0$:\n    a. The diagonal element $U_{j,j}$ is the last entry for column $j$. Its index in `val` is `col_ptr[j+1] - 1`. Calculate:\n       $$ x_j = \\frac{z_j}{\\mathrm{val}[\\mathrm{col\\_ptr}[j+1] - 1]} $$\n    b. Retrieve the starting row index for column $j$, $r_j = \\mathrm{row\\_start}[j]$.\n    c. Update the temporary vector $\\mathbf{z}$ for all rows $i$ in the profile of column $j$ (excluding the diagonal element itself):\n       For $i = r_j, r_j+1, \\dots, j-1$:\n       i. The matrix element $U_{i,j}$ is located at index `col_ptr[j] + i - r_j` in the `val` array.\n       ii. Perform the update:\n          $$ z_i \\leftarrow z_i - \\mathrm{val}[\\mathrm{col\\_ptr}[j] + i - r_j] \\times x_j $$\nThis procedure is repeated for all columns, yielding the full solution vector $\\mathbf{x}$. This algorithm is implemented for each provided test case to find the final result.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_skyline_system(n, col_ptr, row_start, val, y):\n    \"\"\"\n    Solves an upper-triangular linear system Ux=y using back-substitution,\n    where U is stored in a column-oriented compressed skyline format.\n\n    Args:\n        n (int): The dimension of the matrix.\n        col_ptr (list or np.ndarray): Array of pointers to the start of each column in `val`.\n        row_start (list or np.ndarray): Array of starting row indices for each column's profile.\n        val (list or np.ndarray): 1D array containing the non-zero entries of U.\n        y (list or np.ndarray): The right-hand side vector.\n\n    Returns:\n        list: The solution vector x as a list of floats.\n    \"\"\"\n    x = np.zeros(n, dtype=float)\n    z = np.array(y, dtype=float)\n\n    # Iterate backwards from the last column to the first\n    for j in range(n - 1, -1, -1):\n        # 1. Solve for x[j]\n        # The diagonal element U_jj is the last element of column j's data in `val`\n        u_jj_idx = col_ptr[j+1] - 1\n        u_jj = val[u_jj_idx]\n\n        if u_jj == 0:\n            # This case is ruled out by the problem statement (\"nonzero diagonal entries\")\n            # but is good practice to handle.\n            raise ValueError(f\"Matrix is singular: zero on diagonal at index ({j},{j}).\")\n\n        x[j] = z[j] / u_jj\n\n        # 2. Update the RHS vector z\n        # The profile of column j starts at row r_j = row_start[j]\n        r_j = row_start[j]\n\n        # Iterate through the off-diagonal elements of column j's profile\n        # These are U_ij for i from r_j to j-1\n        for i in range(r_j, j):\n            # Calculate the index of U_ij in the `val` array\n            # The start of column j's data is at col_ptr[j]\n            # The offset for row i within the column data is (i - r_j)\n            u_ij_idx = col_ptr[j] + (i - r_j)\n            u_ij = val[u_ij_idx]\n            \n            z[i] -= u_ij * x[j]\n            \n    return x.tolist()\n\ndef solve():\n    \"\"\"\n    Main function to define test cases, solve them, and print the results\n    in the specified format.\n    \"\"\"\n    test_cases = [\n        {\n            \"n\": 4,\n            \"col_ptr\": [0, 1, 3, 6, 9],\n            \"row_start\": [0, 0, 0, 1],\n            \"val\": [3, -1, 4, 2, 0.5, -2, 1, 3, 5],\n            \"y\": [1, 2, -1, 10],\n        },\n        {\n            \"n\": 3,\n            \"col_ptr\": [0, 1, 2, 3],\n            \"row_start\": [0, 1, 2],\n            \"val\": [7, -3, 2],\n            \"y\": [14, 6, -4],\n        },\n        {\n            \"n\": 1,\n            \"col_ptr\": [0, 1],\n            \"row_start\": [0],\n            \"val\": [4],\n            \"y\": [10],\n        },\n        {\n            \"n\": 5,\n            \"col_ptr\": [0, 1, 3, 5, 7, 9],\n            \"row_start\": [0, 0, 1, 2, 3],\n            \"val\": [2, 1, 3, -1, 4, 0.5, 5, -0.5, 6],\n            \"y\": [3, 2, 4.5, 4.5, 6],\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        solution_x = solve_skyline_system(\n            case[\"n\"],\n            case[\"col_ptr\"],\n            case[\"row_start\"],\n            case[\"val\"],\n            case[\"y\"]\n        )\n        results.append(solution_x)\n\n    # Format the output string exactly as specified:\n    # A list of lists, stringified with no spaces.\n    formatted_results = []\n    for res_list in results:\n        # Format each inner list as '[item1,item2,...]'\n        formatted_list = f\"[{','.join(map(str, res_list))}]\"\n        formatted_results.append(formatted_list)\n    \n    # Join the formatted inner lists and wrap with outer brackets\n    final_output = f\"[{','.join(formatted_results)}]\"\n    \n    print(final_output)\n\nsolve()\n```", "id": "2409844"}]}