{"hands_on_practices": [{"introduction": "Eigenvalue problems are not confined to the quantum realm; they are fundamental to describing oscillations in classical systems. This first practice explores the normal modes of a hanging chain, a tangible system whose small vibrations can be modeled as a matrix eigenvalue problem [@problem_id:2387540]. By constructing and solving this problem for a chain of discrete masses, you will see how the fundamental frequencies and mode shapes emerge as eigenvalues and eigenvectors, and you will investigate how this discrete model beautifully converges to its continuous counterpart in the limit of many masses.", "problem": "Consider a vertical chain composed of $N$ identical point masses connected by $N$ massless, inextensible links of equal length. The chain hangs under uniform gravity and is constrained at its top end to a fixed support. Let each mass have mass $m$ (in kilograms), the total vertical length be $L$ (in meters), and the gravitational acceleration be $g$ (in meters per second squared). Assume small transverse oscillations in a plane orthogonal to gravity. Label the masses by indices $i \\in \\{1,2,\\dots,N\\}$ from the bottom ($i=1$) to the top ($i=N$), and let $x_i(t)$ denote the small transverse displacement of the $i$-th mass from equilibrium.\n\nFor small transverse oscillations, linearizing about the static hanging configuration, the transverse equation of motion for each interior mass is\n$$\nm \\,\\ddot{x}_i(t) \\;=\\; \\frac{T_i\\big(x_{i+1}(t)-x_i(t)\\big) - T_{i-1}\\big(x_i(t)-x_{i-1}(t)\\big)}{\\ell},\n$$\nwhere $\\ell = L/N$ is the link length, $T_j$ is the static tension in the $j$-th link, and the conventions $T_0 = 0$ and $x_{N+1}(t) = 0$ enforce the free bottom and fixed top boundary conditions, respectively. Under gravity, the static tension in the $j$-th link (counted from the bottom) is\n$$\nT_j \\;=\\; j \\, m \\, g \\quad \\text{for all } j \\in \\{1,2,\\dots,N\\}.\n$$\nSeeking normal modes $x_i(t) = q_i \\cos(\\omega t)$ leads to the generalized eigenvalue problem\n$$\nK \\, q \\;=\\; \\omega^2 \\, M \\, q,\n$$\nwith the mass matrix $M = m I$ and a symmetric stiffness matrix $K \\in \\mathbb{R}^{N \\times N}$ whose entries are\n$$\nK_{i,i} = \\frac{T_{i-1} + T_i}{\\ell}, \\quad\nK_{i,i+1} = -\\frac{T_i}{\\ell}, \\quad\nK_{i,i-1} = -\\frac{T_{i-1}}{\\ell},\n$$\nfor $i \\in \\{1,2,\\dots,N\\}$, with $T_0 = 0$ and where any index outside $\\{1,\\dots,N\\}$ is omitted.\n\nIn the continuum limit as $N \\to \\infty$, a uniform hanging chain of length $L$ and linear mass density $\\mu$ satisfies the variable-tension wave equation for small transverse displacement $u(y,t)$ as a function of vertical coordinate $y \\in [0,L]$ measured upward from the free lower end:\n$$\n\\mu \\, \\frac{\\partial^2 u}{\\partial t^2}(y,t) \\;=\\; \\frac{\\partial}{\\partial y}\\!\\Big(\\mu g y \\, \\frac{\\partial u}{\\partial y}(y,t)\\Big).\n$$\nWith $u(0,t)$ finite (free lower end) and $u(L,t)=0$ (fixed upper end), separation of variables yields the eigenfrequency condition\n$$\nJ_0\\!\\Big(2 \\sqrt{\\tfrac{\\omega^2 L}{g}}\\Big) \\;=\\; 0,\n$$\nwhere $J_0$ is the Bessel function of the first kind of order zero. Let $\\alpha_1$ denote the smallest positive root of $J_0$. Then the fundamental continuum frequency is\n$$\n\\omega_{\\mathrm{cont},1} \\;=\\; \\frac{\\alpha_1}{2} \\, \\sqrt{\\frac{g}{L}}.\n$$\n\nTask: Write a complete, runnable program that constructs the discrete eigenvalue problem described above and computes the lowest eigenfrequency $\\omega_1(N)$ for each specified test case. Compare it to the continuum prediction by forming the dimensionless ratio $\\omega_1(N)/\\sqrt{g/L}$ and the corresponding relative error with respect to $\\alpha_1/2$.\n\nUse the following test suite, with parameters in the stated units:\n- Case $1$: $N=1$, $L=1.0$ (meters), $m=1.0$ (kilograms), $g=9.80665$ (meters per second squared).\n- Case $2$: $N=2$, $L=1.0$, $m=1.0$, $g=9.80665$.\n- Case $3$: $N=10$, $L=1.0$, $m=1.0$, $g=9.80665$.\n- Case $4$: $N=200$, $L=1.0$, $m=1.0$, $g=9.80665$.\n- Case $5$: Mass invariance check at fixed geometry: compute the absolute difference of the lowest frequencies for $(N=50, L=1.0, m=0.5, g=9.80665)$ and $(N=50, L=1.0, m=3.7, g=9.80665)$, normalized by $\\sqrt{g/L}$.\n\nFor Cases $1$–$4$, your program must output the relative error\n$$\n\\varepsilon(N) \\;=\\; \\frac{\\big|\\tfrac{\\omega_1(N)}{\\sqrt{g/L}} - \\tfrac{\\alpha_1}{2}\\big|}{\\tfrac{\\alpha_1}{2}},\n$$\nwhich is dimensionless and must be reported as a real number. For Case $5$, your program must output the dimensionless quantity\n$$\n\\Delta \\;=\\; \\frac{\\big|\\omega_1(N{=}50, m{=}0.5) - \\omega_1(N{=}50, m{=}3.7)\\big|}{\\sqrt{g/L}},\n$$\nwith $L=1.0$ and $g=9.80665$ as specified above.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of Cases $1$ through $5$, for example, $[\\varepsilon(1),\\varepsilon(2),\\varepsilon(3),\\varepsilon(4),\\Delta]$. No other text should be printed.", "solution": "The physical model begins with a chain of $N$ identical point masses of mass $m$ separated by massless links of equal length $\\ell = L/N$, hanging vertically under gravity $g$. In the static configuration, the $j$-th link (counted from the bottom) supports the weight of all masses below it, so its static tension is $T_j = j \\, m \\, g$ for $j \\in \\{1,\\dots,N\\}$, with $T_0 = 0$ by convention.\n\nConsider small transverse displacements $x_i(t)$ of the $i$-th mass from the vertical equilibrium, for $i \\in \\{1,\\dots,N\\}$. For small angles, the transverse component of the force from a link is its tension times the transverse slope difference divided by the link length. Therefore, the net transverse force on mass $i$ is\n$$\nF_i \\;=\\; \\frac{T_i\\big(x_{i+1}-x_i\\big) - T_{i-1}\\big(x_i-x_{i-1}\\big)}{\\ell},\n$$\nwith the boundary conditions $x_{N+1}(t)=0$ (fixed support at the top) and the absence of a link below the bottom mass encoded by $T_0=0$. Newton’s second law then gives\n$$\nm \\, \\ddot{x}_i(t) \\;=\\; \\frac{T_i\\big(x_{i+1}(t)-x_i(t)\\big) - T_{i-1}\\big(x_i(t)-x_{i-1}(t)\\big)}{\\ell}.\n$$\nSeeking harmonic solutions $x_i(t) = q_i \\cos(\\omega t)$ yields the generalized eigenvalue problem\n$$\nK \\, q \\;=\\; \\omega^2 \\, M \\, q,\n$$\nwith mass matrix $M = m I$ and stiffness matrix entries\n$$\nK_{i,i} \\;=\\; \\frac{T_{i-1}+T_i}{\\ell}, \\qquad\nK_{i,i+1} \\;=\\; -\\frac{T_i}{\\ell}, \\qquad\nK_{i,i-1} \\;=\\; -\\frac{T_{i-1}}{\\ell},\n$$\nfor $i \\in \\{1,\\dots,N\\}$, and off-band entries zero. Here $T_j = j \\, m \\, g$ for $j \\ge 1$, $T_0 = 0$, and $\\ell = L/N$. The generalized eigenvalues $\\omega^2$ are real and positive because $K$ is symmetric positive definite and $M$ is symmetric positive definite. Since $M=m I$, the spectrum is independent of the value of $m$; explicitly, dividing by $m$ shows that the eigenvalues of $(K,M)$ coincide with those of $m^{-1}K$.\n\nTo examine the continuum limit, we consider a uniform chain with linear mass density $\\mu$ and coordinate $y \\in [0,L]$ measured from the free lower end upward. The static tension is $T(y) = \\mu g y$. For small transverse displacement $u(y,t)$, the balance of transverse forces is\n$$\n\\mu \\, \\frac{\\partial^2 u}{\\partial t^2}(y,t) \\;=\\; \\frac{\\partial}{\\partial y}\\Big(T(y)\\, \\frac{\\partial u}{\\partial y}(y,t)\\Big)\n\\;=\\; \\frac{\\partial}{\\partial y}\\Big(\\mu g y \\, \\frac{\\partial u}{\\partial y}(y,t)\\Big)\n\\;=\\; \\mu g \\Big( \\frac{\\partial u}{\\partial y}(y,t) + y \\, \\frac{\\partial^2 u}{\\partial y^2}(y,t) \\Big).\n$$\nAssuming $u(y,t) = \\phi(y)\\cos(\\omega t)$ leads to\n$$\n-\\omega^2 \\phi(y) \\;=\\; g \\, \\phi'(y) + g \\, y \\, \\phi''(y).\n$$\nWith the change of variables $\\xi = 2\\sqrt{(\\omega^2/g)\\, y}$, the spatial equation transforms into Bessel’s equation of order zero. Its solution finite at $y=0$ is proportional to $J_0(\\xi)$. Applying the fixed-top boundary condition $\\phi(L)=0$ yields the transcendental condition\n$$\nJ_0\\!\\Big(2\\sqrt{\\tfrac{\\omega^2 L}{g}}\\Big) \\;=\\; 0.\n$$\nLet $\\alpha_1$ be the smallest positive root of $J_0$. Then the lowest continuum eigenfrequency is\n$$\n\\omega_{\\mathrm{cont},1} \\;=\\; \\frac{\\alpha_1}{2}\\, \\sqrt{\\frac{g}{L}}.\n$$\n\nAlgorithmic realization follows directly from these principles:\n1. For given $N$, $L$, $m$, and $g$, compute $\\ell = L/N$ and tensions $T_j = j m g$ for $j=0,1,\\dots,N$ with $T_0=0$.\n2. Assemble the symmetric tridiagonal stiffness matrix $K$ using the formulas above. Assemble $M = m I$.\n3. Solve $K q = \\omega^2 M q$ for eigenvalues $\\omega^2$, and take the smallest positive eigenvalue to obtain the fundamental discrete frequency $\\omega_1(N)$.\n4. Compute the dimensionless ratio $\\omega_1(N)/\\sqrt{g/L}$ and compare to $\\alpha_1/2$ to form the relative error $\\varepsilon(N)$.\n5. For the mass-invariance check at fixed $(N,L,g)$, compute $\\omega_1$ for two distinct masses and report the normalized absolute difference, which should be numerically close to zero because the generalized eigenvalues are independent of $m$.\n\nFor the specified test suite:\n- Case $1$ uses $N=1$, which gives exactly $\\omega_1(1) = \\sqrt{g/L}$ in the discrete model, so the ratio $\\omega_1(1)/\\sqrt{g/L}$ equals $1$, and therefore the relative error with respect to $\\alpha_1/2$ is $\\big|1 - \\alpha_1/2\\big|/(\\alpha_1/2)$.\n- As $N$ increases through Cases $2$–$4$, $\\omega_1(N)/\\sqrt{g/L}$ converges toward $\\alpha_1/2$, and the reported relative error $\\varepsilon(N)$ correspondingly decreases.\n- Case $5$ verifies the independence of $\\omega_1$ from $m$ by outputting the normalized difference, which should be close to $0$ within numerical precision.\n\nThe program computes these quantities and prints a single line formatted as $[\\varepsilon(1),\\varepsilon(2),\\varepsilon(3),\\varepsilon(4),\\Delta]$, as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import eigh\nfrom scipy.special import jn_zeros\n\ndef fundamental_frequency(N: int, m: float, L: float, g: float) -> float:\n    \"\"\"\n    Compute the fundamental (lowest) angular frequency for transverse small oscillations\n    of a hanging discrete chain of N identical masses m, total length L, under gravity g,\n    with the top fixed and the bottom free.\n\n    Returns:\n        omega1 (float): lowest angular frequency (rad/s)\n    \"\"\"\n    # Link length\n    ell = L / N\n\n    # Tensions T_j for j=0..N with T_0=0 and T_j = j*m*g for j>=1\n    # We'll use arrays indexed 0..N where index j corresponds to T_j\n    T = np.arange(N + 1, dtype=np.float64) * m * g  # T[0]=0, T[j]=j*m*g\n\n    # Assemble stiffness matrix K (N x N) and mass matrix M = m I\n    K = np.zeros((N, N), dtype=np.float64)\n\n    # Diagonal entries: K_{i,i} = (T_{i-1} + T_i)/ell  with i = 1..N (1-based)\n    # Off-diagonals: K_{i,i+1} = - T_i / ell for i=1..N-1; K_{i,i-1} = - T_{i-1} / ell for i=2..N\n    for i in range(1, N + 1):  # i is 1-based\n        K[i - 1, i - 1] = (T[i - 1] + T[i]) / ell\n        if i < N:\n            K[i - 1, i] = -T[i] / ell\n            K[i, i - 1] = -T[i] / ell\n\n    # Mass matrix M = m * I\n    M = (m * np.eye(N, dtype=np.float64))\n\n    # Solve the generalized symmetric definite eigenproblem K q = w^2 M q\n    # eigh returns eigenvalues in ascending order\n    w2, _ = eigh(K, M, check_finite=False, overwrite_a=True, overwrite_b=True)\n\n    # Numerical safety: filter any tiny negative eigenvalues due to roundoff\n    w2 = np.real(w2)\n    w2[w2 < 0] = 0.0\n\n    omega = np.sqrt(w2)\n\n    # Fundamental frequency is the smallest positive omega\n    return float(omega[0])\n\ndef solve():\n    # Physical constant g for all cases\n    g = 9.80665  # m/s^2\n\n    # Continuum reference: alpha1 is the first zero of J0\n    alpha1 = float(jn_zeros(0, 1)[0])\n    target_ratio = alpha1 / 2.0  # ratio omega/sqrt(g/L) in the continuum limit for the fundamental\n\n    # Test cases 1-4: relative errors for different N at L=1.0 m, m=1.0 kg\n    cases_N = [1, 2, 10, 200]\n    L = 1.0\n    m = 1.0\n\n    results = []\n\n    for N in cases_N:\n        omega1 = fundamental_frequency(N=N, m=m, L=L, g=g)\n        ratio = omega1 / np.sqrt(g / L)  # dimensionless\n        rel_err = abs(ratio - target_ratio) / target_ratio\n        results.append(rel_err)\n\n    # Case 5: mass invariance check at fixed N=50, L=1.0, two different masses\n    N5 = 50\n    L5 = 1.0\n    m_a = 0.5\n    m_b = 3.7\n    omega_a = fundamental_frequency(N=N5, m=m_a, L=L5, g=g)\n    omega_b = fundamental_frequency(N=N5, m=m_b, L=L5, g=g)\n    delta = abs(omega_a - omega_b) / np.sqrt(g / L5)\n    results.append(delta)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2387540"}, {"introduction": "We now transition to quantum mechanics, where eigenvalue problems reign supreme in determining the allowed energy states of a system. This exercise tackles the anharmonic oscillator, a foundational model for molecular vibrations that lacks an exact analytical solution [@problem_id:2387563]. You will apply the powerful basis set expansion method, approximating the true Hamiltonian as a matrix in the well-understood basis of the simple harmonic oscillator, thereby turning a differential equation problem into a matrix diagonalization task. This practice is central to understanding how complex quantum systems are modeled and solved numerically.", "problem": "Consider the one-dimensional time-independent Schrödinger equation for a particle of mass $m$ moving in the anharmonic potential $V(x)=\\frac{1}{2}k x^{2}+\\frac{1}{4}\\lambda x^{4}$, where $k>0$ and $\\lambda\\ge 0$. Work in units where the reduced Planck constant $\\hbar=1$ and the mass $m=1$, so that energies are dimensionless. The goal is to compute the ground-state energy $E_{0}(k,\\lambda)$ by numerically approximating the spectrum of the Hamiltonian operator and to report the energy shift $\\Delta E(k,\\lambda)=E_{0}(k,\\lambda)-\\frac{1}{2}\\sqrt{k}$ relative to the corresponding harmonic oscillator with the same quadratic coefficient $k$. Use a finite, orthonormal basis of dimension $M$ consisting of the stationary states of the harmonic oscillator defined by the same $k$ to approximate the Hamiltonian operator on a truncated Hilbert space of size $M$. For each specified test case $(k,\\lambda,M)$ below, compute the scalar $\\Delta E(k,\\lambda)$.\n\nAll energies must be expressed in the non-dimensionalized units implied by $\\hbar=1$ and $m=1$. The final numerical answers must be rounded to $8$ decimal places.\n\nTest suite (each item is $(k,\\lambda,M)$):\n- Case $1$: $(1.0,0.0,20)$\n- Case $2$: $(1.0,0.1,50)$\n- Case $3$: $(0.25,0.05,60)$\n- Case $4$: $(2.0,0.5,60)$\n- Case $5$: $(1.0,0.0001,20)$\n\nYour program must produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite, for example, $[\\Delta E_{1},\\Delta E_{2},\\Delta E_{3},\\Delta E_{4},\\Delta E_{5}]$, with each entry rounded to $8$ decimal places.", "solution": "The physical system is governed by the one-dimensional time-independent Schrödinger equation\n$$\n\\hat{H}\\,\\psi(x)=E\\,\\psi(x),\n$$\nwith Hamiltonian operator\n$$\n\\hat{H}=\\hat{T}+\\hat{V}=\\frac{\\hat{p}^{2}}{2m}+\\frac{1}{2}k \\hat{x}^{2}+\\frac{1}{4}\\lambda \\hat{x}^{4}.\n$$\nIn the specified units $\\hbar=1$ and $m=1$, the kinetic term is $\\hat{T}=\\frac{\\hat{p}^{2}}{2}=-\\frac{1}{2}\\frac{d^{2}}{dx^{2}}$. The harmonic reference Hamiltonian is\n$$\n\\hat{H}_{0}=\\frac{\\hat{p}^{2}}{2}+\\frac{1}{2}k \\hat{x}^{2},\n$$\nwhich has angular frequency $\\omega=\\sqrt{k}$ and exact eigenstates $\\{\\lvert n \\rangle\\}_{n=0}^{\\infty}$ with eigenvalues\n$$\nE_{n}^{(0)}=\\left(n+\\frac{1}{2}\\right)\\omega.\n$$\nThe ground-state energy of the purely harmonic case is therefore $E_{0}^{(0)}=\\frac{1}{2}\\omega=\\frac{1}{2}\\sqrt{k}$.\n\nTo approximate the spectrum of the full anharmonic Hamiltonian $\\hat{H}=\\hat{H}_{0}+\\frac{1}{4}\\lambda \\hat{x}^{4}$, expand $\\hat{H}$ on the truncated Hilbert space spanned by the first $M$ harmonic oscillator eigenstates $\\{\\lvert n\\rangle\\}_{n=0}^{M-1}$. The position operator in this basis can be expressed in terms of the annihilation and creation operators $\\hat{a}$ and $\\hat{a}^{\\dagger}$, which satisfy the canonical commutation relation $[\\hat{a},\\hat{a}^{\\dagger}]=1$, and act as\n$$\n\\hat{a}\\lvert n\\rangle=\\sqrt{n}\\,\\lvert n-1\\rangle,\\quad \\hat{a}^{\\dagger}\\lvert n\\rangle=\\sqrt{n+1}\\,\\lvert n+1\\rangle.\n$$\nWith $\\omega=\\sqrt{k}$,\n$$\n\\hat{x}=\\frac{1}{\\sqrt{2\\omega}}\\,(\\hat{a}+\\hat{a}^{\\dagger}).\n$$\nHence, in the chosen basis, the matrix representation of $\\hat{x}$ has nonzero elements only on the first superdiagonal and first subdiagonal:\n$$\n\\langle m\\lvert \\hat{x}\\rvert n\\rangle=\\frac{1}{\\sqrt{2\\omega}}\\left(\\sqrt{n}\\,\\delta_{m,n-1}+\\sqrt{n+1}\\,\\delta_{m,n+1}\\right).\n$$\nFrom this, construct $\\hat{x}^{2}$ by matrix multiplication $\\hat{x}^{2}=\\hat{x}\\hat{x}$, and then $\\hat{x}^{4}=(\\hat{x}^{2})(\\hat{x}^{2})$. The truncated Hamiltonian matrix is\n$$\nH_{mn}=\\left(n+\\frac{1}{2}\\right)\\omega\\,\\delta_{mn}+\\frac{\\lambda}{4}\\,\\langle m\\lvert \\hat{x}^{4}\\rvert n\\rangle,\\quad m,n\\in\\{0,1,\\dots,M-1\\}.\n$$\nThis $M\\times M$ Hermitian matrix can be diagonalized numerically to obtain approximate eigenvalues $\\{E_{j}\\}_{j=0}^{M-1}$ with $E_{0}$ being the lowest. The ground-state energy shift relative to the harmonic case is then computed as\n$$\n\\Delta E(k,\\lambda)=E_{0}(k,\\lambda)-\\frac{1}{2}\\sqrt{k}.\n$$\n\nAlgorithmic steps derived from these principles:\n- For each test case $(k,\\lambda,M)$, compute $\\omega=\\sqrt{k}$.\n- Build the $M\\times M$ matrix representation of $\\hat{a}$ with elements $\\langle m\\lvert \\hat{a}\\rvert n\\rangle=\\sqrt{n}\\,\\delta_{m,n-1}$ and obtain $\\hat{a}^{\\dagger}$ by Hermitian conjugation.\n- Form the matrix $\\hat{x}=(\\hat{a}+\\hat{a}^{\\dagger})/\\sqrt{2\\omega}$, then compute $\\hat{x}^{2}$ and $\\hat{x}^{4}$ by matrix multiplication.\n- Assemble the Hamiltonian matrix $H$ with diagonal elements $\\left(n+\\frac{1}{2}\\right)\\omega$ and add $(\\lambda/4)\\,\\hat{x}^{4}$.\n- Diagonalize $H$, extract the lowest eigenvalue $E_{0}$, and compute $\\Delta E=E_{0}-\\frac{1}{2}\\omega$.\n- Round each $\\Delta E$ to $8$ decimal places and return the results in the required aggregated format.\n\nChecks and coverage:\n- For $\\lambda=0$ (Case $1$), the construction yields $H$ diagonal with lowest eigenvalue exactly $\\frac{1}{2}\\omega$, hence $\\Delta E$ should be numerically $0$ after rounding.\n- For small $\\lambda$ (Case $5$), the result should approach the first-order perturbative shift $\\Delta E\\approx \\frac{\\lambda}{4}\\langle 0\\lvert \\hat{x}^{4}\\rvert 0\\rangle=\\frac{3\\lambda}{16\\omega^{2}}$ as $M$ increases.\n- For softer confinement (Case $3$ with smaller $k$), the basis size $M$ is increased to capture the larger spatial extent.\n- For stronger anharmonicity (Case $4$), a larger $M$ mitigates truncation error.\n\nThe final program implements this construction and prints a single line containing $5$ floats $[\\Delta E_{1},\\Delta E_{2},\\Delta E_{3},\\Delta E_{4},\\Delta E_{5}]$, each rounded to $8$ decimal places, in the same order as the test suite.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef ground_state_energy_shift(k: float, lam: float, M: int) -> float:\n    \"\"\"\n    Compute Delta E = E0(anharmonic) - E0(harmonic) for\n    V(x) = 1/2 k x^2 + 1/4 lam x^4\n    using a truncated harmonic oscillator basis of size M,\n    in units with hbar=1, m=1.\n    \"\"\"\n    # Angular frequency for the harmonic part\n    omega = np.sqrt(k)\n\n    # Construct annihilation operator 'a' in the number basis |n>, n=0..M-1\n    a = np.zeros((M, M), dtype=np.float64)\n    # a|n> = sqrt(n) |n-1>\n    n_vals = np.arange(1, M, dtype=np.float64)\n    a[:-1, 1:] = np.diag(np.sqrt(n_vals))  # a[m, n] = sqrt(n) delta_{m, n-1}\n\n    # Creation operator is the transpose (real matrices here)\n    adag = a.T\n\n    # Position operator x = (a + a^\\dagger) / sqrt(2*omega)\n    x = (a + adag) / np.sqrt(2.0 * omega)\n\n    # Compute x^2 and x^4 via matrix multiplication\n    x2 = x @ x\n    x4 = x2 @ x2\n\n    # Harmonic Hamiltonian diagonal: (n + 1/2) * omega\n    diag = omega * (np.arange(M, dtype=np.float64) + 0.5)\n    H = np.diag(diag) + (lam / 4.0) * x4\n\n    # Diagonalize the Hermitian Hamiltonian\n    # eigh returns eigenvalues in ascending order\n    evals = np.linalg.eigh(H)[0]\n    E0 = float(evals[0])\n\n    # Energy shift relative to harmonic ground state\n    delta_E = E0 - 0.5 * omega\n    return delta_E\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each case is (k, lambda, M)\n    test_cases = [\n        (1.0, 0.0, 20),     # Case 1: boundary (no anharmonicity)\n        (1.0, 0.1, 50),     # Case 2: moderate anharmonicity\n        (0.25, 0.05, 60),   # Case 3: softer oscillator\n        (2.0, 0.5, 60),     # Case 4: stronger k and anharmonicity\n        (1.0, 0.0001, 20),  # Case 5: very weak anharmonicity\n    ]\n\n    results = []\n    for k, lam, M in test_cases:\n        dE = ground_state_energy_shift(k, lam, M)\n        # Clean small numerical noise around zero before formatting\n        if abs(dE) < 0.5e-8:\n            dE = 0.0\n        results.append(dE)\n\n    # Format each result to 8 decimal places\n    formatted = [f\"{val:.8f}\" for val in results]\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2387563"}, {"introduction": "Our final practice delves into a fascinating phenomenon in condensed matter physics where the properties of eigenvectors are just as important as the eigenvalues. You will numerically investigate Anderson localization, a surprising effect where disorder in a system can trap a quantum particle, preventing it from propagating [@problem_id:2387591]. By constructing a tight-binding Hamiltonian with random on-site energies and analyzing the spatial extent of its eigenvectors using the Inverse Participation Ratio (IPR), you will directly observe how a system transitions from conducting (extended states) to insulating (localized states) as disorder increases.", "problem": "You are to implement a numerical study of Anderson localization in a one-dimensional tight-binding model by solving an eigenvalue problem and analyzing eigenvectors. Consider a one-dimensional chain of length $N$ with open boundary conditions and a tight-binding Hamiltonian defined on the Hilbert space spanned by site-localized basis states. The Hamiltonian matrix $H \\in \\mathbb{R}^{N \\times N}$ is specified by\n$$\nH_{ij} = \\epsilon_i \\delta_{ij} - t \\left( \\delta_{i,j+1} + \\delta_{i,j-1} \\right),\n$$\nwhere $\\epsilon_i$ are independent on-site energies drawn from the uniform distribution on $[-W/2, W/2]$, $t$ is the nearest-neighbor hopping amplitude, and $\\delta_{ij}$ is the Kronecker delta. Use $t = 1$.\n\nFor any normalized eigenvector $\\boldsymbol{\\psi}^{(k)} = (\\psi^{(k)}_1,\\ldots,\\psi^{(k)}_N)$ of $H$ with associated eigenvalue $E_k$, define the inverse participation ratio (IPR) as\n$$\n\\mathrm{IPR}_k = \\sum_{i=1}^{N} \\left| \\psi^{(k)}_i \\right|^4.\n$$\nLet the energy window be centered at $E = 0$ with half-width $\\Delta E = 0.5$. For a given instance $(N, W, s)$, where $s$ is an integer random seed, construct $H$ using the above prescription and compute all eigenpairs $(E_k, \\boldsymbol{\\psi}^{(k)})$. Select the subset $\\mathcal{S}$ of indices $k$ such that $|E_k| \\le \\Delta E$. If $\\mathcal{S}$ is nonempty, compute the mean inverse participation ratio over this subset:\n$$\n\\overline{\\mathrm{IPR}} = \\frac{1}{|\\mathcal{S}|} \\sum_{k \\in \\mathcal{S}} \\mathrm{IPR}_k.\n$$\nIf $\\mathcal{S}$ is empty, define $\\overline{\\mathrm{IPR}}$ to be the $\\mathrm{IPR}_k$ of the single eigenvector whose eigenvalue $E_k$ has the smallest absolute value $|E_k|$.\n\nAll quantities are dimensionless. Initialize the pseudorandom number generator with the provided seed $s$ for each test case so that results are reproducible.\n\nImplement a program that, for each of the following test cases, computes $\\overline{\\mathrm{IPR}}$ and rounds it to six decimal places:\n\n- Test case $1$: $(N, W, s) = (50, 0.0, 12345)$.\n- Test case $2$: $(N, W, s) = (50, 1.0, 123)$.\n- Test case $3$: $(N, W, s) = (50, 4.0, 42)$.\n- Test case $4$: $(N, W, s) = (200, 2.0, 2024)$.\n\nYour program should produce a single line of output containing the four results as a comma-separated list enclosed in square brackets, rounded to six decimal places, and in the order of the test cases listed above (for example, \"[$x_1,x_2,x_3,x_4$]\" where each $x_i$ is a decimal number with six digits after the decimal point). Do not print any other text.", "solution": "The problem presented is a valid and well-posed numerical task in computational condensed matter physics. It concerns the study of Anderson localization in a one-dimensional system. We will proceed with a systematic solution.\n\nThe central object of study is the tight-binding Hamiltonian for a one-dimensional chain of $N$ sites with open boundary conditions. The matrix representation of this Hamiltonian, $H$, is given by:\n$$\nH_{ij} = \\epsilon_i \\delta_{ij} - t \\left( \\delta_{i,j+1} + \\delta_{i,j-1} \\right)\n$$\nHere, $H_{ii} = \\epsilon_i$ are the diagonal elements representing the on-site energies. These energies are random variables, drawn independently from a uniform distribution $U[-W/2, W/2]$, where $W$ is the disorder strength. The off-diagonal elements $H_{i,i\\pm 1} = -t$ represent the kinetic energy of an electron hopping between adjacent sites $i$ and $i \\pm 1$. The hopping amplitude is fixed to $t=1$. All other matrix elements are zero. This structure results in a real, symmetric, tridiagonal matrix.\n\nThe first step in our algorithm is to construct this $N \\times N$ Hamiltonian matrix for each given test case $(N, W, s)$. For reproducibility, the pseudorandom number generator for the on-site energies $\\epsilon_i$ must be initialized with the specified integer seed $s$.\n\nOnce the Hamiltonian matrix $H$ is constructed, we must solve the time-independent Schrödinger equation, which takes the form of an eigenvalue problem:\n$$\nH \\boldsymbol{\\psi}^{(k)} = E_k \\boldsymbol{\\psi}^{(k)}\n$$\nwhere $E_k$ are the energy eigenvalues and $\\boldsymbol{\\psi}^{(k)}$ are the corresponding eigenvectors, or wavefunctions. Since $H$ is a real and symmetric matrix, its eigenvalues $E_k$ are all real, and its eigenvectors $\\boldsymbol{\\psi}^{(k)}$ form a complete orthonormal basis. We will employ a numerical eigensolver designed for such matrices, for instance, the `eigh` function from the SciPy or NumPy library, to compute all $N$ eigenpairs $(E_k, \\boldsymbol{\\psi}^{(k)})$. This function typically returns the eigenvalues in ascending order.\n\nThe degree of localization of an eigenvector $\\boldsymbol{\\psi}^{(k)}$ is quantified by its Inverse Participation Ratio (IPR). For a normalized eigenvector $\\boldsymbol{\\psi}^{(k)} = (\\psi^{(k)}_1, \\ldots, \\psi^{(k)}_N)$, the IPR is defined as:\n$$\n\\mathrm{IPR}_k = \\sum_{i=1}^{N} \\left| \\psi^{(k)}_i \\right|^4\n$$\nA delocalized state, where the probability density $|\\psi^{(k)}_i|^2$ is spread evenly over all $N$ sites (i.e., $|\\psi^{(k)}_i|^2 \\approx 1/N$), will have an IPR of order $1/N$. Conversely, a state perfectly localized on a single site $j$ (i.e., $\\psi^{(k)}_i = \\delta_{ij}$) will have an IPR of $1$. Thus, a larger IPR signifies stronger localization.\n\nThe problem requires us to analyze the eigenstates within a specific energy window centered at $E=0$. We define a subset $\\mathcal{S}$ of eigenstate indices $k$ such that their corresponding eigenvalues fall within this window:\n$$\n\\mathcal{S} = \\{ k \\mid |E_k| \\le \\Delta E \\}\n$$\nwith the energy half-width given as $\\Delta E = 0.5$.\n\nThe final quantity to be computed is the mean IPR, denoted $\\overline{\\mathrm{IPR}}$, over this subset of states. Its calculation depends on whether the set $\\mathcal{S}$ is empty.\n1.  If $\\mathcal{S}$ is not empty (i.e., there is at least one state in the energy window), we compute the arithmetic mean of the IPRs of all states in the subset:\n    $$\n    \\overline{\\mathrm{IPR}} = \\frac{1}{|\\mathcal{S}|} \\sum_{k \\in \\mathcal{S}} \\mathrm{IPR}_k\n    $$\n2.  If $\\mathcal{S}$ is empty, the problem specifies an alternative procedure. We must find the single eigenvector whose eigenvalue $E_k$ is closest to zero, i.e., has the minimum absolute value, $|E_k|$. The quantity $\\overline{\\mathrm{IPR}}$ is then defined to be the IPR of this specific state.\n\nThe overall algorithm for each test case $(N, W, s)$ is as follows:\n1.  Initialize the random number generator with seed $s$.\n2.  Construct the $N \\times N$ tridiagonal Hamiltonian matrix $H$:\n    a. Generate $N$ random on-site energies $\\epsilon_i$ from $U[-W/2, W/2]$ for the diagonal.\n    b. Set the first super-diagonal and sub-diagonal elements to $-t = -1$.\n3.  Solve the eigenvalue problem for $H$ to obtain all eigenvalues $E_k$ and corresponding normalized eigenvectors $\\boldsymbol{\\psi}^{(k)}$.\n4.  For each eigenvector $\\boldsymbol{\\psi}^{(k)}$, compute its IPR, $\\mathrm{IPR}_k = \\sum_{i=1}^{N} (\\psi^{(k)}_i)^4$.\n5.  Identify the indices $k$ belonging to the set $\\mathcal{S}$ where $|E_k| \\le 0.5$.\n6.  Compute $\\overline{\\mathrm{IPR}}$ according to the two cases described above.\n7.  Round the final result to six decimal places.\n\nThis procedure will be implemented and executed for each provided test case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import eigh\n\ndef solve():\n    \"\"\"\n    Solves the problem for all test cases and prints the final result.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (N, W, s)\n        (50, 0.0, 12345),\n        (50, 1.0, 123),\n        (50, 4.0, 42),\n        (200, 2.0, 2024),\n    ]\n\n    results = []\n    for case in test_cases:\n        N, W, s = case\n        \n        # 1. Initialize random number generator for reproducibility.\n        rng = np.random.default_rng(seed=s)\n\n        # 2. Construct the Hamiltonian matrix H.\n        # The hopping amplitude t is 1. The off-diagonal elements are -t.\n        t = 1.0\n\n        # The diagonal consists of on-site energies epsilon_i drawn from a\n        # uniform distribution on [-W/2, W/2].\n        onsite_energies = rng.uniform(low=-W/2.0, high=W/2.0, size=N)\n        H = np.diag(onsite_energies)\n\n        # The off-diagonal elements for nearest-neighbor hopping in a\n        # 1D chain with open boundary conditions.\n        off_diagonal_elements = -t * np.ones(N - 1)\n        H += np.diag(off_diagonal_elements, k=1)\n        H += np.diag(off_diagonal_elements, k=-1)\n\n        # 3. Solve the eigenvalue problem H*psi = E*psi.\n        # eigh is used for Hermitian (real symmetric) matrices. It returns\n        # eigenvalues in ascending order and corresponding eigenvectors as columns.\n        eigenvalues, eigenvectors = eigh(H)\n\n        # 4. Calculate the Inverse Participation Ratio (IPR) for all eigenvectors.\n        # IPR_k = sum_i |psi_i^(k)|^4. Since eigenvectors are real, this is sum(psi**4).\n        # The eigenvectors are columns of the 'eigenvectors' matrix, so axis=0.\n        ipr_values = np.sum(eigenvectors**4, axis=0)\n\n        # 5. Select the subset of states within the specified energy window.\n        # The window is centered at E=0 with half-width Delta_E = 0.5.\n        delta_E = 0.5\n        energy_window_indices = np.where(np.abs(eigenvalues) <= delta_E)[0]\n\n        # 6. Compute the mean IPR according to the problem's rules.\n        mean_ipr = 0.0\n        if len(energy_window_indices) > 0:\n            # Case 1: The subset S is non-empty. Average the IPRs of the\n            # states within the window.\n            selected_iprs = ipr_values[energy_window_indices]\n            mean_ipr = np.mean(selected_iprs)\n        else:\n            # Case 2: The subset S is empty. Find the IPR of the state\n            # whose eigenvalue has the smallest absolute value.\n            idx_min_abs_E = np.argmin(np.abs(eigenvalues))\n            mean_ipr = ipr_values[idx_min_abs_E]\n\n        # Store the result rounded to six decimal places.\n        results.append(f\"{mean_ipr:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2387591"}]}