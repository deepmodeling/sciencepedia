{"hands_on_practices": [{"introduction": "Moving from theory to practice with numerical methods begins with mastering the fundamental steps. This first exercise grounds your understanding of the Explicit Forward-Time Centered-Space (FTCS) scheme by having you perform a single-step calculation by hand. By computing the temperature evolution in a one-dimensional rod, you will directly apply the finite-difference update rule, reinforcing the core mechanics of the algorithm before automating the process in code. [@problem_id:2171711]", "problem": "A thermal bus bar, used for heat dissipation in a prototype electronic device, is modeled as a one-dimensional rod of length $L = 0.5$ m. The bar has a uniform thermal diffusivity of $\\alpha = 1.2 \\times 10^{-5}$ m$^2$/s. The ends of the bar are connected to large heat sinks that maintain a constant temperature of $0$ °C, such that for all times $t \\ge 0$, the boundary conditions are $u(0, t) = 0$ °C and $u(L, t) = 0$ °C.\n\nAt time $t=0$, the device is briefly activated, imparting an initial temperature distribution along the bar given by the function $u(x, 0) = 1600x(L-x)$, where $x$ is the position along the bar in meters.\n\nTo analyze the cooling process, the one-dimensional heat equation, $\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}$, is to be solved numerically using a finite difference method. The spatial domain $[0, L]$ is discretized into $N=5$ equal segments, creating a grid of points $x_i = i \\Delta x$ for $i=0, 1, \\dots, 5$. The simulation proceeds with a fixed time step of $\\Delta t = 200$ s.\n\nCalculate the temperature at the first interior grid point, $x_1$, after the first time step, $t_1 = \\Delta t$. Express your answer in degrees Celsius, rounded to three significant figures.", "solution": "We model the temperature evolution with the one-dimensional heat equation $\\frac{\\partial u}{\\partial t}=\\alpha \\frac{\\partial^{2}u}{\\partial x^{2}}$ on $[0,L]$ with Dirichlet boundary conditions $u(0,t)=0$ and $u(L,t)=0$ for all $t\\ge 0$, and initial condition $u(x,0)=1600\\,x(L-x)$. The spatial interval is divided into $N=5$ equal segments, giving grid points $x_{i}=i\\Delta x$ for $i=0,1,\\dots,5$ with $\\Delta x=\\frac{L}{N}$. Using an explicit forward-time, centered-space (FTCS) finite difference scheme, the update for interior nodes is\n$$\nu_{i}^{n+1}=u_{i}^{n}+r\\left(u_{i+1}^{n}-2u_{i}^{n}+u_{i-1}^{n}\\right),\n$$\nwhere $r=\\frac{\\alpha \\Delta t}{(\\Delta x)^{2}}$. The boundary values satisfy $u_{0}^{n}=0$ and $u_{5}^{n}=0$ for all $n$.\n\nCompute the spatial step:\n$$\n\\Delta x=\\frac{L}{N}=\\frac{0.5}{5}=0.1.\n$$\nCompute the stability parameter:\n$$\nr=\\frac{\\alpha \\Delta t}{(\\Delta x)^{2}}=\\frac{\\left(1.2\\times 10^{-5}\\right)\\cdot 200}{(0.1)^{2}}=\\frac{1.2\\times 10^{-5}\\cdot 200}{0.01}=0.24.\n$$\nThe initial discrete temperatures are $u_{i}^{0}=u(x_{i},0)=1600\\,x_{i}\\left(L-x_{i}\\right)$ with $x_{i}=i\\cdot 0.1$. In particular,\n$$\nu_{0}^{0}=0,\\quad u_{1}^{0}=1600\\cdot 0.1\\cdot(0.5-0.1)=64,\\quad u_{2}^{0}=1600\\cdot 0.2\\cdot(0.5-0.2)=96.\n$$\nApply the FTCS update at the first interior point $i=1$ for the first time step:\n$$\nu_{1}^{1}=u_{1}^{0}+r\\left(u_{2}^{0}-2u_{1}^{0}+u_{0}^{0}\\right)=64+0.24\\left(96-2\\cdot 64+0\\right)=64+0.24\\cdot(-32)=64-7.68=56.32.\n$$\nRounded to three significant figures, the temperature at $x_{1}$ after the first time step is $56.3$ in degrees Celsius.", "answer": "$$\\boxed{56.3}$$", "id": "2171711"}, {"introduction": "A numerical scheme is only useful if it produces a stable solution, meaning errors do not grow uncontrollably over time. This practice focuses on the crucial Courant-Friedrichs-Lewy (CFL) stability condition, which dictates the maximum permissible time step for a given spatial resolution. By exploring how the stable time step $\\Delta t$ must change when the spatial grid $\\Delta x$ is refined, you will gain an intuitive and quantitative understanding of the constraint $\\Delta t \\propto (\\Delta x)^2$, a vital principle in designing any explicit simulation. [@problem_id:2164702]", "problem": "An engineer is simulating heat dissipation along a thin, one-dimensional rod intended for a thermal management system. The simulation uses an explicit numerical method to solve the governing heat diffusion equation. The stability of such a numerical scheme is known to be governed by a relationship between the time step and the spatial grid size, often referred to as the Courant-Friedrichs-Lewy (CFL) condition.\n\nIn an initial simulation, the engineer uses a spatial grid spacing of $\\Delta x_1 = 0.12$ m. For this setup, it is determined that the maximum allowable time step to maintain a stable solution is $\\Delta t_1 = 1.0 \\times 10^{-3}$ s.\n\nTo obtain a more detailed temperature profile, the simulation is re-run with a finer grid, where the spatial spacing is reduced to $\\Delta x_2 = 0.07$ m. Assuming the simulation is always run at the maximum time step permitted by the stability condition, calculate the new maximum time step, $\\Delta t_2$.\n\nExpress your answer for $\\Delta t_2$ in seconds, rounded to two significant figures.", "solution": "We consider the one-dimensional heat equation $ \\frac{\\partial T}{\\partial t} = \\alpha \\frac{\\partial^{2} T}{\\partial x^{2}} $ solved with an explicit forward-time, centered-space (FTCS) scheme. The stability condition (CFL-type) for this scheme requires the nondimensional parameter\n$$\nr \\equiv \\frac{\\alpha \\,\\Delta t}{(\\Delta x)^{2}} \\leq \\frac{1}{2}.\n$$\nHence, the maximum stable time step is\n$$\n\\Delta t_{\\max} = \\frac{1}{2}\\,\\frac{(\\Delta x)^{2}}{\\alpha}.\n$$\nFor two simulations with the same material (same $\\alpha$), the maximum time step scales as the square of the spatial step:\n$$\n\\frac{\\Delta t_{2}}{\\Delta t_{1}} = \\left(\\frac{\\Delta x_{2}}{\\Delta x_{1}}\\right)^{2}.\n$$\nTherefore,\n$$\n\\Delta t_{2} = \\Delta t_{1}\\left(\\frac{\\Delta x_{2}}{\\Delta x_{1}}\\right)^{2}.\n$$\nSubstituting the given values $ \\Delta x_{1} = 0.12 $, $ \\Delta t_{1} = 1.0 \\times 10^{-3} $, and $ \\Delta x_{2} = 0.07 $ (all in consistent SI units),\n$$\n\\Delta t_{2} = \\left(1.0 \\times 10^{-3}\\right)\\left(\\frac{0.07}{0.12}\\right)^{2}\n= \\left(1.0 \\times 10^{-3}\\right)\\left(\\frac{7}{12}\\right)^{2}\n= \\left(1.0 \\times 10^{-3}\\right)\\frac{49}{144}.\n$$\nCompute the numerical value:\n$$\n\\frac{49}{144} \\approx 0.340277\\ldots,\\quad \\Rightarrow\\quad \\Delta t_{2} \\approx 3.40277\\ldots \\times 10^{-4}.\n$$\nRounded to two significant figures,\n$$\n\\Delta t_{2} \\approx 3.4 \\times 10^{-4}.\n$$", "answer": "$$\\boxed{3.4 \\times 10^{-4}}$$", "id": "2164702"}, {"introduction": "This advanced practice transitions from one-dimensional manual calculations to a full two-dimensional implementation, bridging the gap between theoretical stability analysis and computational reality. You are tasked with writing a program to solve the 2D heat equation and, more importantly, to visualize the consequences of violating the FTCS stability condition. By initializing the simulation with a \"checkerboard\" pattern—the mode most prone to instability—and testing different stability parameters, you will transform the abstract concept of an amplification factor into a concrete, observable phenomenon. [@problem_id:2391393]", "problem": "Consider the two-dimensional heat equation, which models diffusion of temperature on a square plate, given by the partial differential equation $u_t = \\alpha \\left(u_{xx} + u_{yy}\\right)$, where $u(x,y,t)$ is temperature, $\\alpha$ is the thermal diffusivity, subscripts denote partial derivatives, and $t$ denotes time. Use the explicit Forward-Time Centered-Space (FTCS) method, which employs a forward difference in time and centered differences in space, to advance the solution on a uniform periodic grid. The periodic grid has $N \\times N$ nodes with uniform spacing $h$ in both directions. Let $r = \\alpha \\Delta t / h^2$ denote the non-dimensional time step parameter. Implement periodic boundary conditions in both directions. Do not assume any stability property a priori; instead, observe behavior numerically. Start from the following initial condition on the discrete grid: a pure alternating-sign mode $u_{i,j}^0 = (-1)^{i+j}$ for all grid indices $i,j$, which is the highest-wavenumber mode under periodicity. Evolve this initial condition by applying the FTCS update repeatedly. Your program must do the following: \n- Implement the FTCS discretization consistent with the finite difference definitions: the time derivative at time level $n$ is replaced by a forward difference, and each second spatial derivative is replaced by a centered difference on the uniform grid. Apply periodic boundary conditions so that neighbor indices wrap around at the boundaries in both directions.\n- For a given $r$, number of time steps $n_{\\text{steps}}$, and grid size $N$, compute the ratio $R = \\left|A^{n_{\\text{steps}}}\\right| / \\left|A^0\\right|$, where $A^n$ is the scalar amplitude of the alternating-sign mode at time level $n$, defined by the discrete inner product $A^n = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} u_{i,j}^n \\, (-1)^{i+j}$. \n- Use periodic boundary conditions to ensure this alternating-sign mode is a discrete Fourier mode. \n- No physical units are required in the output because $R$ is dimensionless.\n\nTest Suite: Run the program on the following three parameter sets, which together provide a general case, a boundary case, and a case that violates the classical stability condition:\n- Case $1$ (stable interior): $(N, r, n_{\\text{steps}}) = (64, 0.2, 12)$.\n- Case $2$ (stability boundary): $(N, r, n_{\\text{steps}}) = (64, 0.25, 12)$.\n- Case $3$ (unstable, expected checkerboard growth): $(N, r, n_{\\text{steps}}) = (64, 0.3, 12)$.\n\nFinal Output Format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, ordered as $[R_1, R_2, R_3]$ corresponding to Cases $1$, $2$, and $3$. Each $R_k$ must be printed as a floating-point number rounded to exactly six digits after the decimal point, for example, $[0.123456,1.000000,9.876543]$. The only permitted output is this single line. No user input or external files are allowed, and all computations must be performed programmatically.", "solution": "The governing partial differential equation (PDE) is the two-dimensional heat equation:\n$$ u_t = \\alpha \\left(u_{xx} + u_{yy}\\right) $$\nHere, $u(x,y,t)$ represents the temperature at spatial coordinates $(x,y)$ and time $t$, and $\\alpha$ is the thermal diffusivity constant. The problem requires the use of the explicit Forward-Time Centered-Space (FTCS) method for discretization on a uniform periodic grid of size $N \\times N$ with spatial step $h$ and time step $\\Delta t$.\n\nFirst, we discretize the PDE. The time derivative $u_t$ is approximated using a forward difference at time level $n$:\n$$ u_t \\approx \\frac{u_{i,j}^{n+1} - u_{i,j}^n}{\\Delta t} $$\nwhere $u_{i,j}^n$ denotes the numerical solution at grid point $(i,j)$ and time step $n$. The second-order spatial derivatives $u_{xx}$ and $u_{yy}$ are approximated using centered differences:\n$$ u_{xx} \\approx \\frac{u_{i+1,j}^n - 2u_{i,j}^n + u_{i-1,j}^n}{h^2} $$\n$$ u_{yy} \\approx \\frac{u_{i,j+1}^n - 2u_{i,j}^n + u_{i,j-1}^n}{h^2} $$\nSubstituting these approximations into the heat equation yields the full discretization:\n$$ \\frac{u_{i,j}^{n+1} - u_{i,j}^n}{\\Delta t} = \\alpha \\left( \\frac{u_{i+1,j}^n - 2u_{i,j}^n + u_{i-1,j}^n}{h^2} + \\frac{u_{i,j+1}^n - 2u_{i,j}^n + u_{i,j-1}^n}{h^2} \\right) $$\nWe are given the non-dimensional parameter $r = \\alpha \\Delta t / h^2$. By rearranging the equation to solve for the solution at the next time step, $u_{i,j}^{n+1}$, we obtain the FTCS update rule:\n$$ u_{i,j}^{n+1} = u_{i,j}^n + r \\left( u_{i+1,j}^n + u_{i-1,j}^n + u_{i,j+1}^n + u_{i,j-1}^n - 4u_{i,j}^n \\right) $$\nThis can be rewritten as:\n$$ u_{i,j}^{n+1} = (1 - 4r)u_{i,j}^n + r(u_{i+1,j}^n + u_{i-1,j}^n + u_{i,j+1}^n + u_{i,j-1}^n) $$\nThe problem specifies an initial condition corresponding to the highest-wavenumber mode on a periodic grid:\n$$ u_{i,j}^0 = (-1)^{i+j} $$\nThis mode is an eigenmode of the discrete numerical operator. To demonstrate this, we substitute $u_{i,j}^0$ into the update rule. The values at neighboring points are related to the central point by a factor of $-1$:\n$$ u_{i \\pm 1, j}^0 = (-1)^{i \\pm 1 + j} = -(-1)^{i+j} = -u_{i,j}^0 $$\n$$ u_{i, j \\pm 1}^0 = (-1)^{i + j \\pm 1} = -(-1)^{i+j} = -u_{i,j}^0 $$\nSubstituting these into the update rule for the first time step gives:\n$$ u_{i,j}^1 = (1 - 4r)u_{i,j}^0 + r(-u_{i,j}^0 - u_{i,j}^0 - u_{i,j}^0 - u_{i,j}^0) = (1 - 4r)u_{i,j}^0 - 4r u_{i,j}^0 = (1 - 8r)u_{i,j}^0 $$\nThe amplification factor for this mode from one time step to the next is therefore $G = (1 - 8r)$. After $n_{\\text{steps}}$, the solution is:\n$$ u_{i,j}^{n_{\\text{steps}}} = G^{n_{\\text{steps}}} u_{i,j}^0 = (1 - 8r)^{n_{\\text{steps}}} (-1)^{i+j} $$\nThe stability of the numerical scheme is determined by the magnitude of this amplification factor. For stability, we require $|G| \\le 1$. For this specific mode, the condition is $|1 - 8r| \\le 1$, which is equivalent to $0 \\le r \\le 1/4$. This confirms that the highest-wavenumber mode dictates the stability limit of the entire scheme.\n\nThe problem requires calculating the ratio $R = |A^{n_{\\text{steps}}}| / |A^0|$, where the amplitude $A^n$ is defined by the discrete inner product:\n$$ A^n = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} u_{i,j}^n \\, (-1)^{i+j} $$\nFirst, we compute the initial amplitude $A^0$:\n$$ A^0 = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} u_{i,j}^0 (-1)^{i+j} = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} (-1)^{i+j} (-1)^{i+j} = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} 1 = 1 $$\nNext, we compute the amplitude at $n_{\\text{steps}}$:\n$$ A^{n_{\\text{steps}}} = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} u_{i,j}^{n_{\\text{steps}}} (-1)^{i+j} = \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} \\left( (1 - 8r)^{n_{\\text{steps}}} (-1)^{i+j} \\right) (-1)^{i+j} $$\n$$ A^{n_{\\text{steps}}} = (1 - 8r)^{n_{\\text{steps}}} \\left( \\frac{1}{N^2}\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} 1 \\right) = (1 - 8r)^{n_{\\text{steps}}} $$\nThe required ratio $R$ is therefore:\n$$ R = \\frac{|A^{n_{\\text{steps}}}|}{|A^0|} = \\frac{|(1 - 8r)^{n_{\\text{steps}}}|}{|1|} = |1 - 8r|^{n_{\\text{steps}}} $$\nThis analytical result provides a precise theoretical prediction. The implementation will perform the full numerical simulation as requested, which must match this result to high accuracy.\n\nThe computational procedure is as follows:\n1. For each test case $(N, r, n_{\\text{steps}})$, initialize an $N \\times N$ grid with the initial condition $u_{i,j}^0 = (-1)^{i+j}$.\n2. A second $N \\times N$ grid is created to represent the projection mode, $p_{i,j} = (-1)^{i+j}$.\n3. The initial amplitude $A^0$ is computed as the normalized inner product of the initial grid and the projection mode grid. It will be exactly $1.0$.\n4. A loop runs for $n_{\\text{steps}}$ iterations. In each iteration, the FTCS update rule is applied to every point on the grid. Periodic boundary conditions are handled by using modulo arithmetic on indices, which is efficiently implemented using vectorized array shifts (e.g., `numpy.roll`).\n5. After the loop, the final amplitude $A^{n_{\\text{steps}}}$ is computed similarly to $A^0$.\n6. The ratio $R$ is calculated as $|A^{n_{\\text{steps}}}| / |A^0|$.\n7. The results for the three cases are collected and printed in the specified format. The test cases explore the stable regime ($r=0.2$, $|G|=0.61$), the stability boundary ($r=0.25$, $|G|=1$), and the unstable regime ($r=0.3$, $|G|=1.4>1$).", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 2D heat equation using the FTCS method for a specific initial mode\n    and computes the amplitude ratio over a number of time steps.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1 (stable interior): (N, r, n_steps)\n        (64, 0.2, 12),\n        # Case 2 (stability boundary): (N, r, n_steps)\n        (64, 0.25, 12),\n        # Case 3 (unstable): (N, r, n_steps)\n        (64, 0.3, 12),\n    ]\n\n    results = []\n    for case in test_cases:\n        N, r, n_steps = case\n\n        # Create the grid and initialize with the alternating-sign mode\n        # u_{i,j}^0 = (-1)^(i+j)\n        i, j = np.meshgrid(np.arange(N), np.arange(N), indexing='ij')\n        u = np.power(-1.0, i + j)\n\n        # This mode is used to project the solution and find the amplitude\n        projector_mode = u.copy()\n        \n        # Calculate the initial amplitude A^0\n        # A^n = (1/N^2) * sum_{i,j} u_{i,j}^n * (-1)^(i+j)\n        A0 = np.sum(u * projector_mode) / (N * N)\n\n        # Evolve the solution for n_steps\n        for _ in range(n_steps):\n            # Apply FTCS update rule using vectorized operations for efficiency\n            # and to handle periodic boundary conditions with np.roll.\n            # u_new = (1 - 4r)u + r*(u_{i+1,j} + u_{i-1,j} + u_{i,j+1} + u_{i,j-1})\n            \n            # Sum of neighbors with periodic BC\n            neighbors_sum = (\n                np.roll(u, 1, axis=0) + \n                np.roll(u, -1, axis=0) +\n                np.roll(u, 1, axis=1) + \n                np.roll(u, -1, axis=1)\n            )\n            \n            # Update the solution grid\n            u = (1.0 - 4.0 * r) * u + r * neighbors_sum\n\n        # Calculate the final amplitude A^n_steps\n        A_final = np.sum(u * projector_mode) / (N * N)\n\n        # Compute the ratio R = |A^n_steps| / |A^0|\n        # Since A0 is 1.0, this simplifies to |A_final|\n        ratio = np.abs(A_final) / np.abs(A0)\n        \n        results.append(ratio)\n\n    # Final print statement in the exact required format.\n    # Each result is a float rounded to exactly six digits after the decimal point.\n    print(f\"[{','.join(f'{res:.6f}' for res in results)}]\")\n\nsolve()\n```", "id": "2391393"}]}