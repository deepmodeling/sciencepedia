{"hands_on_practices": [{"introduction": "All practical signal analysis involves observing a signal for a finite duration. This act of truncation is equivalent to multiplying the ideal, infinite signal by a rectangular window. This foundational exercise [@problem_id:1753673] explores the consequences of this implicit windowing in the frequency domain. By applying the modulation property of the Fourier Transform, you will see precisely how the clean spectrum of a pure sinusoid is convolved with the spectrum of the rectangular window, giving rise to the characteristic main lobe and side-lobe structure known as spectral leakage.", "problem": "An engineer is analyzing a discrete-time signal $x[n]$ known to be a pure deterministic sinusoid with amplitude $A$ and a constant, normalized angular frequency $\\omega_0$, where $0 < \\omega_0 < \\pi$. The signal is given by the expression $x[n] = A \\cos(\\omega_0 n)$.\n\nFor practical analysis using a digital computer, only a finite-length segment of the signal can be processed. This truncation is modeled by multiplying the ideal signal $x[n]$ by a rectangular window function, $w_R[n]$. The window is of length $M$ and is defined as $w_R[n] = 1$ for $0 \\le n \\le M-1$ and $w_R[n] = 0$ otherwise. The resulting signal to be analyzed is $y[n] = x[n] w_R[n]$.\n\nThe engineer then computes the Discrete-Time Fourier Transform (DTFT) of the windowed signal, denoted as $Y(e^{j\\omega})$. Which of the following options provides the most accurate qualitative description of the magnitude spectrum, $|Y(e^{j\\omega})|$, for the principal frequency range $-\\pi < \\omega < \\pi$?\n\nA. Two infinitely sharp impulses (Dirac delta functions) located precisely at frequencies $\\omega = \\omega_0$ and $\\omega = -\\omega_0$.\n\nB. A single broad central peak (main lobe) centered at $\\omega = 0$, accompanied by a series of smaller, decaying ripples (sidelobes) that extend across the frequency range.\n\nC. Two prominent peaks (main lobes), centered near the frequencies $\\omega = \\omega_0$ and $\\omega = -\\omega_0$, with each peak being accompanied by a series of smaller, decaying ripples (sidelobes).\n\nD. A spectrum with a constant, non-zero magnitude across the entire frequency range from $-\\pi$ to $\\pi$.\n\nE. A series of equally spaced, equally high impulses located at integer multiples of the frequency $\\frac{2\\pi}{M}$.", "solution": "We start from the given signal and window:\n$$x[n]=A\\cos(\\omega_{0} n),\\quad w_{R}[n]=\\begin{cases}1,&0\\leq n\\leq M-1\\\\ 0,&\\text{otherwise}\\end{cases},\\quad y[n]=x[n]w_{R}[n].$$\nUsing Euler's identity, write the cosine as\n$$x[n]=\\frac{A}{2}\\left(\\exp(j\\omega_{0} n)+\\exp(-j\\omega_{0} n)\\right),$$\nso\n$$y[n]=\\frac{A}{2}\\left(w_{R}[n]\\exp(j\\omega_{0} n)+w_{R}[n]\\exp(-j\\omega_{0} n)\\right).$$\nDefine the DTFT by\n$$Y(\\exp(j\\omega))=\\sum_{n=-\\infty}^{\\infty}y[n]\\exp(-j\\omega n).$$\nBy linearity and the modulation property of the DTFT,\n$$\\mathcal{F}\\{w_{R}[n]\\exp(j\\omega_{0} n)\\}=W_{R}(\\exp(j(\\omega-\\omega_{0}))),\\quad \\mathcal{F}\\{w_{R}[n]\\exp(-j\\omega_{0} n)\\}=W_{R}(\\exp(j(\\omega+\\omega_{0}))),$$\nso\n$$Y(\\exp(j\\omega))=\\frac{A}{2}\\left(W_{R}(\\exp(j(\\omega-\\omega_{0})))+W_{R}(\\exp(j(\\omega+\\omega_{0})))\\right).$$\nThe DTFT of the length-$M$ rectangular window is the Dirichlet kernel (up to a linear phase):\n$$W_{R}(\\exp(j\\omega))=\\sum_{n=0}^{M-1}\\exp(-j\\omega n)=\\exp\\!\\left(-j\\omega\\frac{M-1}{2}\\right)\\frac{\\sin\\!\\left(\\frac{M\\omega}{2}\\right)}{\\sin\\!\\left(\\frac{\\omega}{2}\\right)}.$$\nTherefore,\n$$|W_{R}(\\exp(j\\omega))|=\\left|\\frac{\\sin\\!\\left(\\frac{M\\omega}{2}\\right)}{\\sin\\!\\left(\\frac{\\omega}{2}\\right)}\\right|,$$\nwhich has a main lobe centered at $\\omega=0$ with decaying sidelobes. Substituting into $Y(\\exp(j\\omega))$ gives\n$$|Y(\\exp(j\\omega))|=\\frac{A}{2}\\left|W_{R}(\\exp(j(\\omega-\\omega_{0})))+W_{R}(\\exp(j(\\omega+\\omega_{0})))\\right|,$$\nwhich, qualitatively, is the superposition of two shifted copies of the Dirichlet magnitude, one centered at $\\omega=\\omega_{0}$ and the other at $\\omega=-\\omega_{0}$. Because $0<\\omega_{0}<\\pi$, both peaks lie within the principal range $-\\pi<\\omega<\\pi$. Each of these two peaks exhibits a main lobe with accompanying decaying sidelobes due to the rectangular window.\n\nHence, the correct qualitative description is two prominent main lobes centered near $\\omega=\\pm\\omega_{0}$, each with sidelobes.\n\nComparing with the options:\n- A is incorrect because truncation by a finite window broadens deltas into main lobes with sidelobes.\n- B is the spectrum of the window alone (centered at $0$), not of the modulated windowed sinusoid.\n- C matches the derived structure.\n- D is incorrect; the magnitude is not flat.\n- E describes a line spectrum for periodic/discrete frequencies, not the DTFT of a finite segment.\n\nTherefore, the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1753673"}, {"introduction": "Having established that rectangular windowing causes spectral leakage, we now turn to practical mitigation techniques. This exercise [@problem_id:2440581] puts you in a scenario common in experimental physics: attempting to resolve two sinusoidal signals whose frequencies are very close together. By implementing and comparing the performance of the Rectangular, Hann, and Blackman windows, you will gain a quantitative understanding of the essential trade-off in windowing: sacrificing main-lobe width (frequency resolution) to gain superior side-lobe suppression (leakage reduction).", "problem": "You will model the effect of spectral leakage on the discrete Fourier transform when attempting to resolve two continuous-time sinusoidal components whose frequency separation is strictly less than the discrete Fourier transform frequency resolution. Consider a real-valued signal composed of two sinusoids of equal amplitude, sampled uniformly at a constant sampling frequency. Let the total number of samples be $N$, the sampling frequency be $f_{s}$ in Hz, and the discrete Fourier transform frequency resolution be $\\Delta f = \\frac{f_{s}}{N}$ in Hz. The signal is\n$$\nx[n] = \\sin\\!\\left(2\\pi \\frac{f_{1}}{f_{s}} n + \\phi_{1}\\right) + \\sin\\!\\left(2\\pi \\frac{f_{2}}{f_{s}} n + \\phi_{2}\\right), \\quad n = 0,1,2,\\dots,N-1,\n$$\nwith phases $\\phi_{1}$ and $\\phi_{2}$ in radians. You must analyze the windowed discrete Fourier transform magnitude spectrum of $x[n]$ for the following three windows $w[n]$ of length $N$:\n- Rectangular window: $w_{\\mathrm{rect}}[n] = 1$ for all $n$.\n- Hann window: $w_{\\mathrm{hann}}[n] = \\tfrac{1}{2}\\left(1 - \\cos\\!\\left(\\tfrac{2\\pi n}{N-1}\\right)\\right)$.\n- Blackman window: $w_{\\mathrm{black}}[n] = 0.42 - 0.5 \\cos\\!\\left(\\tfrac{2\\pi n}{N-1}\\right) + 0.08 \\cos\\!\\left(\\tfrac{4\\pi n}{N-1}\\right)$.\n\nDefine the discrete Fourier transform of the windowed signal as\n$$\nX[k] = \\sum_{n=0}^{N-1} x[n]\\,w[n]\\,e^{-j 2\\pi \\frac{k n}{N}}, \\quad k = 0,1,2,\\dots,N-1,\n$$\nand define the nonnegative-frequency magnitude spectrum as $M[k] = |X[k]|$ for $k = 0,1,2,\\dots,\\tfrac{N}{2}$.\n\nFor each window, quantify spectral leakage and peak structure as follows:\n- Let $p_{1} = \\mathrm{round}\\!\\left(\\frac{f_{1}}{\\Delta f}\\right)$ and $p_{2} = \\mathrm{round}\\!\\left(\\frac{f_{2}}{\\Delta f}\\right)$, both clipped to the integer interval $[0, \\tfrac{N}{2}]$. Define the leakage fraction\n$$\nL = \\frac{\\sum_{k=0,\\,k \\neq p_{1},\\,k \\neq p_{2}}^{N/2} M[k]^{2}}{\\sum_{k=0}^{N/2} M[k]^{2}},\n$$\na dimensionless number in $[0,1]$.\n- Let $M_{\\max}$ be the largest value of $M[k]$ over $k = 0,1,2,\\dots,\\tfrac{N}{2}$, and let $M_{\\mathrm{second}}$ be the second-largest value over the same index set. Define the peak ratio\n$$\nR = \\frac{M_{\\mathrm{second}}}{M_{\\max}},\n$$\na dimensionless number in $[0,1]$.\n\nAll phases must be specified in radians. Frequencies must be specified in Hz. Sampling times are $t_{n} = \\tfrac{n}{f_{s}}$ in s. All requested outputs are dimensionless real numbers.\n\nTest suite. Use the following parameter sets, where each case satisfies $|f_{1} - f_{2}| < \\Delta f$:\n- Case $1$: $f_{s} = 1024$ Hz, $N = 256$, $f_{1} = 100.0$ Hz, $f_{2} = 102.0$ Hz, $\\phi_{1} = 0$ rad, $\\phi_{2} = 0$ rad.\n- Case $2$: $f_{s} = 1024$ Hz, $N = 256$, $f_{1} = 99.0$ Hz, $f_{2} = 101.0$ Hz, $\\phi_{1} = 0$ rad, $\\phi_{2} = 0$ rad.\n- Case $3$: $f_{s} = 1024$ Hz, $N = 256$, $f_{1} = 100.0$ Hz, $f_{2} = 100.25$ Hz, $\\phi_{1} = 0$ rad, $\\phi_{2} = 0$ rad.\n\nFor each case, compute the $6$-tuple of outputs\n$$\n\\left[L_{\\mathrm{rect}},\\,L_{\\mathrm{hann}},\\,L_{\\mathrm{black}},\\,R_{\\mathrm{rect}},\\,R_{\\mathrm{hann}},\\,R_{\\mathrm{black}}\\right],\n$$\nwhere each $L_{\\cdot}$ and $R_{\\cdot}$ is as defined above for the corresponding window.\n\nFinal output format. Your program should produce a single line of output containing a list of three elements (one per test case), where each element is the comma-separated list\n$[L_{\\mathrm{rect}},L_{\\mathrm{hann}},L_{\\mathrm{black}},R_{\\mathrm{rect}},R_{\\mathrm{hann}},R_{\\mathrm{black}}]$ with all entries as decimal floats. The overall output must be a single bracketed list of these three lists with no spaces, for example\n\"[[a,b,c,d,e,f],[a,b,c,d,e,f],[a,b,c,d,e,f]]\".", "solution": "The problem posed is a well-defined exercise in computational physics and digital signal processing. It is scientifically grounded, self-contained, and algorithmically formalizable. All parameters and functions are explicitly defined, and the test cases are consistent with the premises. The problem is therefore deemed valid and a full solution will be provided.\n\nThe fundamental task is to analyze the performance of different window functions in resolving two sinusoidal signals whose frequencies, $f_{1}$ and $f_{2}$, are separated by less than the frequency resolution of the Discrete Fourier Transform (DFT), $\\Delta f = \\frac{f_{s}}{N}$. This situation is common in experimental data analysis, where spectral components may be closely spaced.\n\nThe core principle behind this analysis is the understanding of the DFT and the phenomenon of spectral leakage. The DFT assumes that the finite-length signal segment $x[n]$ of length $N$ is one period of an infinitely periodic signal. If the signal segment does not contain an integer number of cycles of its constituent sinusoids, a sharp discontinuity arises at the boundary where the signal wraps around. This discontinuity manifests in the frequency domain as spectral leakage, where energy from the true frequency \"leaks\" into other frequency bins.\n\nWindowing is a technique to mitigate this effect. A window function $w[n]$ is applied to the signal, $y[n] = x[n]w[n]$, before the DFT is computed. Window functions taper towards zero at the ends of the segment, reducing the boundary discontinuities. This comes at a cost. The Fourier transform of the window function is convolved with the true spectrum of the signal. This convolution broadens the main spectral peaks (main lobes) and reduces the amplitude of the spurious peaks (sidelobes). This creates a trade-off:\n\n$1$. **Rectangular Window, $w_{\\mathrm{rect}}[n]$**: This is equivalent to applying no window, simply truncating the signal. Its transform has the narrowest main lobe, offering the highest theoretical frequency resolution. However, it also has the highest sidelobes (the first sidelobe is only about $-13$ dB down from the main lobe), leading to severe spectral leakage that can obscure nearby weaker signals or merge with adjacent strong signals.\n\n$2$. **Hann Window, $w_{\\mathrm{hann}}[n]$**: This is a smooth, bell-shaped window. Its main lobe is approximately twice as wide as that of the rectangular window, thus reducing frequency resolution. Its significant advantage is the much lower sidelobe level (first sidelobe at about $-31$ dB), which provides excellent leakage suppression.\n\n$3$. **Blackman Window, $w_{\\mathrm{black}}[n]$**: This window provides an even wider main lobe (approximately three times that of the rectangular window) and, in return, even lower sidelobes (first sidelobe at about $-58$ dB). It offers superior leakage suppression at the cost of further reduced frequency resolution.\n\nThe problem requires a quantitative analysis of this trade-off using two metrics for the magnitude spectrum $M[k] = |X[k]|$.\n\n- **Leakage Fraction, $L$**: This metric, defined as $L = (\\sum_{k=0,\\,k \\neq p_{1},\\,k \\neq p_{2}}^{N/2} M[k]^{2}) / (\\sum_{k=0}^{N/2} M[k]^{2})$, measures the fraction of spectral energy that has leaked outside the primary frequency bins associated with the signals, $p_{1}$ and $p_{2}$. These bins are identified by rounding the true frequencies normalized by the DFT frequency resolution, $f/\\Delta f$. A lower value of $L$ indicates better suppression of spectral leakage. We expect $L_{\\mathrm{rect}} > L_{\\mathrm{hann}} > L_{\\mathrm{black}}$.\n\n- **Peak Ratio, $R$**: This metric, defined as $R = M_{\\mathrm{second}} / M_{\\max}$, quantifies the resolvability of the two spectral components. If the two sinusoids are resolved into two distinct peaks in the spectrum, $R$ will be close to $1$ (since the sinusoids have equal amplitude). If they merge into a single, broad peak, $M_{\\max}$ will be this merged peak and $M_{\\mathrm{second}}$ will be the highest sidelobe, resulting in a small value of $R$. Since $|f_{1} - f_{2}| < \\Delta f$, the components are not resolvable according to the classic Rayleigh criterion for a rectangular window. We will investigate whether they are nonetheless distinguishable.\n\nThe algorithmic procedure to solve the problem for each test case is as follows:\n\n$1$. Define the parameters $f_{s}$, $N$, $f_{1}$, $f_{2}$, $\\phi_{1}$, and $\\phi_{2}$.\n$2$. Generate the discrete time vector $n = [0, 1, \\dots, N-1]$.\n$3$. Construct the signal $x[n] = \\sin(2\\pi \\frac{f_{1}}{f_{s}} n + \\phi_{1}) + \\sin(2\\pi \\frac{f_{2}}{f_{s}} n + \\phi_{2})$.\n$4$. For each of the three specified window functions $w[n]$ (Rectangular, Hann, Blackman):\n    a. Generate the window sequence $w[n]$.\n    b. Apply the window to the signal: $y[n] = x[n] \\cdot w[n]$.\n    c. Compute the DFT of the windowed signal, $X[k] = \\sum_{n=0}^{N-1} y[n]\\,e^{-j 2\\pi \\frac{k n}{N}}$, using the Fast Fourier Transform (FFT) algorithm for efficiency.\n    d. Extract the non-negative frequency magnitude spectrum, $M[k] = |X[k]|$ for $k = 0, 1, \\dots, N/2$.\n    e. Calculate the DFT frequency resolution $\\Delta f = f_{s}/N$.\n    f. Determine the closest integer DFT bin indices for the two frequencies: $p_{1} = \\mathrm{round}(f_{1}/\\Delta f)$ and $p_{2} = \\mathrm{round}(f_{2}/\\Delta f)$, clipped to the valid range $[0, N/2]$.\n    g. Calculate the leakage fraction $L$ by summing the squared magnitudes of all bins except $p_{1}$ and $p_{2}$, and dividing by the total sum of squared magnitudes.\n    h. Calculate the peak ratio $R$ by finding the two largest values in the spectrum $M[k]$ and computing their ratio.\n$5$. Consolidate the six computed values ($L_{\\mathrm{rect}}, L_{\\mathrm{hann}}, L_{\\mathrm{black}}, R_{\\mathrm{rect}}, R_{\\mathrm{hann}}, R_{\\mathrm{black}}$) into a single list for the test case.\n$6$. Repeat for all test cases and format the final output as specified.\n\nThis procedure is implemented in the following program.", "answer": "```python\nimport numpy as np\nfrom scipy.fft import fft\n\ndef solve():\n    \"\"\"\n    Solves the spectral analysis problem for the given test cases.\n    \"\"\"\n    test_cases = [\n        # (fs, N, f1, f2, phi1, phi2)\n        (1024.0, 256, 100.0, 102.0, 0.0, 0.0),\n        (1024.0, 256, 99.0, 101.0, 0.0, 0.0),\n        (1024.0, 256, 100.0, 100.25, 0.0, 0.0),\n    ]\n\n    all_results = []\n    for case in test_cases:\n        fs, N, f1, f2, phi1, phi2 = case\n\n        # Step 1: Generate signal x[n]\n        n = np.arange(N)\n        x_n = np.sin(2 * np.pi * f1 / fs * n + phi1) + \\\n              np.sin(2 * np.pi * f2 / fs * n + phi2)\n        \n        # Step 2: Define window functions\n        w_rect = np.ones(N)\n        # The problem defines windows symmetric about the midpoint, using N-1.\n        w_hann = 0.5 * (1 - np.cos(2 * np.pi * n / (N - 1)))\n        w_black = 0.42 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) + \\\n                  0.08 * np.cos(4 * np.pi * n / (N - 1))\n\n        windows = {\n            \"rect\": w_rect,\n            \"hann\": w_hann,\n            \"black\": w_black,\n        }\n        \n        L_results = {}\n        R_results = {}\n\n        # Step 3: Loop through each window to perform analysis\n        for name, w_n in windows.items():\n            # Step 3a: Apply window\n            y_n = x_n * w_n\n            \n            # Step 3b: Compute DFT\n            X_k = fft(y_n)\n            \n            # Step 3c: Get non-negative frequency magnitude spectrum M[k]\n            # M[k] covers frequencies from 0 to fs/2. The size is N/2 + 1.\n            num_freq_bins = N // 2 + 1\n            M_k = np.abs(X_k[:num_freq_bins])\n\n            # Step 3d: Calculate metrics\n            delta_f = fs / N\n            # As per problem, determine peak indices p1, p2\n            p1 = int(np.round(f1 / delta_f))\n            p2 = int(np.round(f2 / delta_f))\n            \n            # Clip indices to the range of the non-negative spectrum\n            p1 = np.clip(p1, 0, N // 2)\n            p2 = np.clip(p2, 0, N // 2)\n            \n            # Calculate Leakage Fraction L\n            total_energy = np.sum(M_k**2)\n            if total_energy < 1e-12:  # Avoid division by zero for null signal\n                L = 0.0\n            else:\n                peak_indices = np.unique([p1, p2])\n                peak_energy = np.sum(M_k[peak_indices]**2)\n                leakage_energy = total_energy - peak_energy\n                L = leakage_energy / total_energy\n            \n            L_results[name] = L\n\n            # Calculate Peak Ratio R\n            # Find M_max and M_second\n            if M_k.size < 2:\n                R = 0.0\n            else:\n                sorted_M = np.sort(M_k)\n                M_max = sorted_M[-1]\n                M_second = sorted_M[-2]\n                if M_max < 1e-12: # Avoid division by zero\n                    R = 0.0\n                else:\n                    R = M_second / M_max\n\n            R_results[name] = R\n            \n        # Step 4: Assemble results for the case in the specified order\n        case_results = [\n            L_results[\"rect\"], L_results[\"hann\"], L_results[\"black\"],\n            R_results[\"rect\"], R_results[\"hann\"], R_results[\"black\"]\n        ]\n        all_results.append(case_results)\n\n    # Step 5: Format the final output string\n    # e.g., \"[[a,b,c,d,e,f],[...]]\"\n    output_parts = []\n    for res_list in all_results:\n        output_parts.append(f\"[{','.join(map(str, res_list))}]\")\n    \n    final_output = f\"[{','.join(output_parts)}]\"\n\n    print(final_output)\n\nsolve()\n```", "id": "2440581"}, {"introduction": "Spectral leakage is not merely an artifact to be suppressed; its predictable structure can be exploited for advanced analysis. This practice [@problem_id:2440586] demonstrates a powerful technique for achieving high-precision frequency estimation, far surpassing the resolution of the standard DFT grid. By analyzing the predictable amplitude ratio of the two largest adjacent spectral bins, you will derive and implement an estimator that uses the leakage pattern itself to calculate a signal's true frequency with sub-bin accuracy.", "problem": "You are given the magnitude of the Discrete Fourier Transform (DFT) of a finite-length, complex sinusoidal signal windowed by a rectangular time window. The signal in each test case is a single-tone complex sinusoid of the form $x[n] = e^{j 2 \\pi f_0 n / F_s}$ for $n \\in \\{0,1,\\dots,N-1\\}$, where $f_0$ is the unknown tone frequency in hertz, $F_s$ is the sampling frequency in hertz, and $N$ is the record length. The DFT is defined by $X[k] = \\sum_{n=0}^{N-1} x[n] e^{-j 2 \\pi k n / N}$ for $k \\in \\{0,1,\\dots,N-1\\}$. The magnitude spectrum is $|X[k]|$. All trigonometric function arguments are in radians. The sampling is uniform in time with sampling interval $\\Delta t = 1/F_s$. The frequency resolution (bin spacing) is $\\Delta f = F_s/N$.\n\nLet $k^\\ast = f_0 N / F_s$ denote the true bin index location of the tone. For a rectangular time window, the magnitude spectrum of a single complex sinusoid is a shifted Dirichlet kernel, such that the dominant energy appears in the two DFT bins adjacent to $k^\\ast$. Denote $m = \\lfloor k^\\ast \\rfloor$ and the fractional offset $\\delta = k^\\ast - m \\in [0,1)$. The two largest adjacent bins around the dominant peak are at $k=m$ and $k=m+1$. Your task is to estimate $f_0$ using only the magnitudes at these two adjacent bins and fundamental properties of the DFT and the rectangular window. The final answers for each test case must be expressed in hertz and returned as floating-point numbers.\n\nTest suite:\n- Case $1$: $F_s = 1000$, $N = 1024$, $f_0 = 123.4$.\n- Case $2$: $F_s = 1000$, $N = 1024$, $f_0 = 244.23828125$.\n- Case $3$: $F_s = 1000$, $N = 1024$, $f_0 = 5.17578125$.\n- Case $4$: $F_s = 1000$, $N = 1024$, $f_0 = 176.26953125$.\n- Case $5$: $F_s = 1000$, $N = 1024$, $f_0 = 488.671875$.\n\nFor each case, the program must:\n- Generate the length-$N$ complex sinusoid $x[n]$ with unit amplitude, sampled at frequency $F_s$ hertz, and windowed by a rectangular window of length $N$.\n- Compute the $N$-point DFT magnitude $|X[k]|$.\n- Identify the dominant spectral peak index $k_{\\text{peak}} \\in \\{0,1,\\dots,N-1\\}$ by maximizing $|X[k]|$, and its larger-magnitude immediate neighbor among $k_{\\text{peak}}-1$ and $k_{\\text{peak}}+1$ (with modular indexing).\n- Using only the two magnitudes at these adjacent bins, construct an estimator of $f_0$ with sub-bin accuracy, grounded in the DFT of a rectangularly windowed single-tone signal.\n\nFinal output format:\n- Your program should produce a single line of output containing the estimated frequencies for the five cases as a comma-separated list of decimal numbers in hertz, rounded to six decimal places, enclosed in square brackets. For example, an acceptable output format is of the form $[a_1,a_2,a_3,a_4,a_5]$ where each $a_i$ is a float in hertz with six digits after the decimal point.", "solution": "The problem requires the estimation of a single tone's frequency $f_0$ from the Discrete Fourier Transform (DFT) of a uniformly sampled complex sinusoid. The signal is defined as $x[n] = e^{j 2 \\pi f_0 n / F_s}$ over a finite duration $n \\in \\{0, 1, \\dots, N-1\\}$, which is equivalent to applying a rectangular window of length $N$ to an infinite-duration sinusoid. The task is to derive and implement an estimator for $f_0$ using only the magnitudes of the two largest adjacent DFT bins.\n\nFirst, we establish the theoretical foundation. The $N$-point DFT of the signal $x[n]$ is given by:\n$$X[k] = \\sum_{n=0}^{N-1} x[n] e^{-j 2 \\pi k n / N} = \\sum_{n=0}^{N-1} e^{j 2 \\pi f_0 n / F_s} e^{-j 2 \\pi k n / N}$$\nLet the true frequency be expressed as a bin index $k^\\ast = f_0 N / F_s$. This value $k^\\ast$ is generally not an integer. The expression for the DFT becomes:\n$$X[k] = \\sum_{n=0}^{N-1} e^{j 2 \\pi n (k^\\ast / N - k / N)} = \\sum_{n=0}^{N-1} \\left( e^{j 2 \\pi (k^\\ast - k) / N} \\right)^n$$\nThis is a geometric series with ratio $r = e^{j 2 \\pi (k^\\ast - k) / N}$. The sum is:\n$$X[k] = \\frac{1 - r^N}{1 - r} = \\frac{1 - e^{j 2 \\pi (k^\\ast - k)}}{1 - e^{j 2 \\pi (k^\\ast - k) / N}}$$\nBy factoring out complex exponentials from the numerator and denominator, we can express this in terms of sine functions:\n$$X[k] = \\frac{e^{j \\pi (k^\\ast - k)} (e^{-j \\pi (k^\\ast - k)} - e^{j \\pi (k^\\ast - k)})}{e^{j \\pi (k^\\ast - k) / N} (e^{-j \\pi (k^\\ast - k) / N} - e^{j \\pi (k^\\ast - k) / N})} = e^{j \\pi (k^\\ast - k)(1 - 1/N)} \\frac{\\sin(\\pi(k^\\ast - k))}{\\sin(\\pi(k^\\ast - k)/N)}$$\nThis function is the aliased sinc function, also known as the Dirichlet kernel, centered at $k = k^\\ast$. The magnitude of the DFT at bin $k$ is:\n$$|X[k]| = \\left| \\frac{\\sin(\\pi(k^\\ast - k))}{\\sin(\\pi(k^\\ast - k)/N)} \\right|$$\nThe problem requires an estimator based on the two DFT bins adjacent to the true frequency $k^\\ast$. Let $k^\\ast = m + \\delta$, where $m = \\lfloor k^\\ast \\rfloor$ is an integer representing the bin index to the left of the true frequency, and $\\delta \\in [0, 1)$ is the fractional offset. The two bins with the largest magnitudes that bracket the true frequency are at indices $m$ and $m+1$.\n\nLet us evaluate the magnitudes at these two bins:\nFor bin $k=m$:\n$$A_m = |X[m]| = \\left| \\frac{\\sin(\\pi(m + \\delta - m))}{\\sin(\\pi(m + \\delta - m)/N)} \\right| = \\frac{\\sin(\\pi\\delta)}{\\sin(\\pi\\delta/N)}$$\nThe absolute value is removed because for $\\delta \\in [0, 1)$, both $\\pi\\delta$ and $\\pi\\delta/N$ are in the range $[0, \\pi)$, where the sine function is non-negative.\n\nFor bin $k=m+1$:\n$$A_{m+1} = |X[m+1]| = \\left| \\frac{\\sin(\\pi(m + \\delta - (m+1)))}{\\sin(\\pi(m + \\delta - (m+1))/N)} \\right| = \\left| \\frac{\\sin(\\pi(\\delta - 1))}{\\sin(\\pi(\\delta - 1)/N)} \\right|$$\nUsing the identity $\\sin(x-\\pi) = -\\sin(\\pi-x)$, we have $\\sin(\\pi(\\delta - 1)) = -\\sin(\\pi(1-\\delta))$. The magnitude is:\n$$A_{m+1} = \\frac{\\sin(\\pi(1-\\delta))}{\\sin(\\pi(1-\\delta)/N)}$$\nAgain, the arguments to the sine functions are in a range where they are non-negative.\n\nTo find an estimator for $\\delta$, we take the ratio of these two magnitudes, $\\alpha = A_{m+1} / A_m$:\n$$\\alpha = \\frac{\\sin(\\pi(1-\\delta)) / \\sin(\\pi(1-\\delta)/N)}{\\sin(\\pi\\delta) / \\sin(\\pi\\delta/N)}$$\nUsing the identity $\\sin(\\pi - x) = \\sin(x)$, we note that $\\sin(\\pi(1-\\delta)) = \\sin(\\pi\\delta)$. The numerators are equal and cancel out:\n$$\\alpha = \\frac{\\sin(\\pi\\delta/N)}{\\sin(\\pi(1-\\delta)/N)}$$\nThis relation is exact. However, solving for $\\delta$ is non-trivial. For a large number of samples $N$, the arguments of the sine functions in the denominators are small. We can therefore apply the small-angle approximation $\\sin(x) \\approx x$. This is a highly accurate approximation for the specified value of $N = 1024$.\n$$\\alpha \\approx \\frac{\\pi\\delta/N}{\\pi(1-\\delta)/N} = \\frac{\\delta}{1-\\delta}$$\nWe can now solve this simple algebraic equation for $\\delta$:\n$$\\alpha (1-\\delta) \\approx \\delta \\Rightarrow \\alpha - \\alpha\\delta \\approx \\delta \\Rightarrow \\alpha \\approx \\delta(1+\\alpha)$$\n$$\\delta \\approx \\frac{\\alpha}{1+\\alpha}$$\nSubstituting the ratio of magnitudes $\\alpha = A_{m+1} / A_m$, we obtain the estimator for the fractional offset:\n$$\\delta_{est} = \\frac{A_{m+1}/A_m}{1 + A_{m+1}/A_m} = \\frac{A_{m+1}}{A_m + A_{m+1}}$$\nThis provides a simple, direct method to estimate the fractional offset from the magnitudes of the two bracketing bins.\n\nThe complete algorithm is as follows:\n$1$. For a given signal, compute the $N$-point DFT and its magnitude spectrum, $|X[k]|$.\n$2$. Find the index $k_{peak}$ of the maximum value in $|X[k]|$. This bin is either $m$ or $m+1$.\n$3$. Identify the larger-magnitude immediate neighbor of the peak by comparing $|X[(k_{peak}-1+N)\\%N]|$ and $|X[(k_{peak}+1)\\%N]|$. The two bins used for estimation are $k_{peak}$ and this neighbor.\n$4$. Let $m$ be the smaller of these two bin indices. The other index is then $m+1$.\n$5$. Extract the magnitudes $A_m = |X[m]|$ and $A_{m+1} = |X[m+1]|$.\n$6$. Calculate the fractional offset estimate $\\delta_{est} = A_{m+1} / (A_m + A_{m+1})$.\n$7$. The estimated frequency bin is $k_{est} = m + \\delta_{est}$.\n$8$. Convert the estimated bin back to frequency in Hertz using the relation $f_{est} = k_{est} \\cdot (F_s/N)$.\n\nThis procedure provides a robust and accurate estimate of the tone frequency with sub-bin resolution, grounded in the fundamental properties of the DFT of a rectangularly windowed sinusoid.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the frequency estimation problem for a suite of test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (Parameter set 1: Fs, N, f0_true)\n        (1000, 1024, 123.4),\n        # (Parameter set 2)\n        (1000, 1024, 244.23828125),\n        # (Parameter set 3)\n        (1000, 1024, 5.17578125),\n        # (Parameter set 4)\n        (1000, 1024, 176.26953125),\n        # (Parameter set 5)\n        (1000, 1024, 488.671875),\n    ]\n\n    results = []\n    for Fs, N, f0 in test_cases:\n        # Step 1: Generate the length-N complex sinusoid x[n].\n        # The rectangular window is implicit in the finite length of the signal.\n        n = np.arange(N)\n        signal = np.exp(1j * 2 * np.pi * f0 * n / Fs)\n\n        # Step 2: Compute the N-point DFT magnitude |X[k]|.\n        dft_mag = np.abs(np.fft.fft(signal))\n\n        # Step 3: Identify the dominant spectral peak and its larger-magnitude neighbor.\n        k_peak = np.argmax(dft_mag)\n\n        # Determine indices of immediate neighbors, handling wrap-around for k_peak=0.\n        k_prev = (k_peak - 1 + N) % N\n        k_next = (k_peak + 1) % N\n        \n        mag_prev = dft_mag[k_prev]\n        mag_next = dft_mag[k_next]\n\n        # The two bins for estimation are k_peak and its larger neighbor.\n        if mag_prev > mag_next:\n            k_neighbor = k_prev\n        else:\n            k_neighbor = k_next\n\n        # Let m be the smaller of the two bin indices.\n        # This simple logic is sufficient as test cases do not involve frequencies\n        # at the boundary (e.g., k_peak=0 and k_neighbor=N-1).\n        m = min(k_peak, k_neighbor)\n\n        # Extract magnitudes at bin m and bin m+1.\n        A_m = dft_mag[m]\n        A_m_plus_1 = dft_mag[m + 1]\n\n        # Step 4: Estimate the fractional offset delta based on the derived formula.\n        # This formula provides an estimate of the offset from bin m.\n        if A_m + A_m_plus_1 == 0:\n            # Unlikely case, means signal is zero or numerical issue.\n            delta_est = 0.5\n        else:\n            delta_est = A_m_plus_1 / (A_m + A_m_plus_1)\n\n        # Step 5: Construct the frequency estimate.\n        # The estimated bin location is the lower bin index plus the fractional offset.\n        k_est = m + delta_est\n        \n        # Convert the estimated bin location to frequency in Hertz.\n        f_est = k_est * Fs / N\n        results.append(f_est)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2440586"}]}