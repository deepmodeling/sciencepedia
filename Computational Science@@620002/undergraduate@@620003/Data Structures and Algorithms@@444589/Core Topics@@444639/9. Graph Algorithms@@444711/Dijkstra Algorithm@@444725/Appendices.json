{"hands_on_practices": [{"introduction": "To truly master Dijkstra's algorithm, we must first build a solid mental model of its step-by-step execution. This initial practice focuses on tracing the algorithm's core logic: iteratively selecting the node with the smallest known distance and updating the distances of its neighbors. By determining the precise order in which nodes are finalized [@problem_id:1496482], you will gain a foundational understanding of how the algorithm systematically explores a graph to discover the shortest paths.", "problem": "A distributed network consists of six data centers, labeled A, B, C, D, E, and F, that handle large-scale computations. To optimize data routing, a protocol is initiated from the primary data center, A. The protocol's goal is to establish the lowest-cost communication path from A to every other center in the network. The connections between centers are bidirectional, and each link has an associated latency cost.\n\nThe network topology and costs are as follows:\n- A is connected to B with a cost of 2.\n- A is connected to C with a cost of 5.\n- A is connected to D with a cost of 9.\n- B is connected to C with a cost of 2.\n- B is connected to E with a cost of 7.\n- C is connected to D with a cost of 3.\n- C is connected to E with a cost of 1.\n- D is connected to F with a cost of 2.\n- E is connected to F with a cost of 4.\n\nThe protocol operates by maintaining a set of \"unconfirmed\" centers and their current lowest-known latency cost from A. Initially, all centers except A are unconfirmed, with their costs set to infinity, while A's cost is 0. In each step, the protocol selects the unconfirmed center with the minimum current cost, marks it as \"confirmed\", and updates the costs of its unconfirmed neighbors if a shorter path is found through the newly confirmed center. This process repeats until all centers are confirmed.\n\nWhat is the sequence in which the data centers are confirmed by this protocol?\n\nA. A, B, C, D, E, F\n\nB. A, B, C, E, D, F\n\nC. A, C, B, D, E, F\n\nD. A, B, D, C, E, F\n\nE. A, C, E, D, B, F", "solution": "We interpret the protocol as Dijkstra’s algorithm on an undirected weighted graph starting at node A. Let $d(X)$ denote the current lowest-known cost from A to node $X$. Initially, set $d(A)=0$ and for all other nodes $d(B)=d(C)=d(D)=d(E)=d(F)=\\infty$. At each step, select the unconfirmed node with minimum $d(\\cdot)$, confirm it, and relax its edges.\n\nInitialization:\n$$d(A)=0,\\quad d(B)=\\infty,\\quad d(C)=\\infty,\\quad d(D)=\\infty,\\quad d(E)=\\infty,\\quad d(F)=\\infty.$$\n\nStep 1 (confirm A): Update neighbors using edges $A\\!-\\!B$ with cost $2$, $A\\!-\\!C$ with cost $5$, $A\\!-\\!D$ with cost $9$:\n$$d(B)=\\min(\\infty,0+2)=2,\\quad d(C)=\\min(\\infty,0+5)=5,\\quad d(D)=\\min(\\infty,0+9)=9.$$\nNow unconfirmed costs: $d(B)=2$, $d(C)=5$, $d(D)=9$, $d(E)=\\infty$, $d(F)=\\infty$. Minimum is $B$.\n\nStep 2 (confirm B): Relax edges $B\\!-\\!C$ with cost $2$, $B\\!-\\!E$ with cost $7$:\n$$d(C)=\\min(5,2+2)=4,\\quad d(E)=\\min(\\infty,2+7)=9.$$\nNow unconfirmed costs: $d(C)=4$, $d(D)=9$, $d(E)=9$, $d(F)=\\infty$. Minimum is $C$.\n\nStep 3 (confirm C): Relax edges $C\\!-\\!D$ with cost $3$, $C\\!-\\!E$ with cost $1$:\n$$d(D)=\\min(9,4+3)=7,\\quad d(E)=\\min(9,4+1)=5.$$\nNow unconfirmed costs: $d(D)=7$, $d(E)=5$, $d(F)=\\infty$. Minimum is $E$.\n\nStep 4 (confirm E): Relax edge $E\\!-\\!F$ with cost $4$:\n$$d(F)=\\min(\\infty,5+4)=9.$$\nUnconfirmed costs: $d(D)=7$, $d(F)=9$. Minimum is $D$.\n\nStep 5 (confirm D): Relax edge $D\\!-\\!F$ with cost $2$:\n$$d(F)=\\min(9,7+2)=9.$$\nRemaining unconfirmed: $F$.\n\nStep 6 (confirm F): Confirm the last node.\n\nThe confirmation order is A, B, C, E, D, F, which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1496482"}, {"introduction": "Dijkstra's algorithm does more than just calculate the minimum distance to each node; it implicitly constructs a Shortest Path Tree (SPT) rooted at the source. This exercise [@problem_id:1496488] shifts our focus from the algorithm's process to its structural output. Calculating the total weight of the SPT requires you to identify exactly which edges form this optimal routing structure, reinforcing the connection between the relaxation step and the final path.", "problem": "A network architect is analyzing the communication latency in a small data center. The network is modeled as an undirected graph where the vertices are servers and the edge weights represent the latency in milliseconds between connected servers.\n\nThe set of servers is $V = \\{A, B, C, D, E, F\\}$.\n\nThe connections and their corresponding latencies are as follows:\n- (A, B) with latency 4\n- (A, C) with latency 2\n- (B, C) with latency 5\n- (B, D) with latency 10\n- (C, E) with latency 3\n- (D, E) with latency 4\n- (D, F) with latency 11\n- (E, F) with latency 6\n\nTo optimize data routing, the architect computes the shortest communication paths from a source server 'A' to all other servers in the network using Dijkstra's algorithm. This set of paths forms a shortest path tree rooted at 'A'.\n\nCalculate the sum of the latencies (weights) of all the unique connections (edges) that constitute this shortest path tree. Express your answer in milliseconds.", "solution": "We model the network as an undirected weighted graph with edge weights representing latencies in milliseconds. To compute the shortest path tree (SPT) rooted at $A$, we apply Dijkstra's algorithm, which maintains tentative distances $d(v)$ for each vertex $v$, initializes $d(A)=0$ and $d(v)=\\infty$ for $v \\neq A$, and iteratively selects the unsettled vertex with the minimum tentative distance to relax its incident edges. Parent pointers $p(v)$ record the predecessor that yields the current shortest path estimate; the SPT consists of edges $\\{(v,p(v))\\}$ for all $v \\neq A$ after termination.\n\nInitialization:\nSet $d(A)=0$, and for $v \\in \\{B,C,D,E,F\\}$ set $d(v)=\\infty$ and $p(v)=\\varnothing$.\n\nIteration 1 (settle $A$ since $d(A)=0$ is minimum):\nRelax $(A,B)$: since $d(B)>\\,d(A)+w(A,B)$, i.e., $\\infty>0+4$, update $d(B)=4$ and $p(B)=A$.\nRelax $(A,C)$: since $d(C)>\\,d(A)+w(A,C)$, i.e., $\\infty>0+2$, update $d(C)=2$ and $p(C)=A$.\n\nUnsettled vertices now have $d(B)=4$, $d(C)=2$, $d(D)=\\infty$, $d(E)=\\infty$, $d(F)=\\infty$.\n\nIteration 2 (settle $C$ since $d(C)=2$ is minimum):\nRelax $(C,B)$: candidate $d(C)+w(C,B)=2+5=7$, but $d(B)=4$, so no update.\nRelax $(C,E)$: since $d(E)>\\,d(C)+w(C,E)$, i.e., $\\infty>2+3$, update $d(E)=5$ and $p(E)=C$.\n\nUnsettled vertices now have $d(B)=4$, $d(E)=5$, $d(D)=\\infty$, $d(F)=\\infty$.\n\nIteration 3 (settle $B$ since $d(B)=4$ is minimum):\nRelax $(B,D)$: since $d(D)>\\,d(B)+w(B,D)$, i.e., $\\infty>4+10$, update $d(D)=14$ and $p(D)=B$.\n\nUnsettled vertices now have $d(E)=5$, $d(D)=14$, $d(F)=\\infty$.\n\nIteration 4 (settle $E$ since $d(E)=5$ is minimum):\nRelax $(E,D)$: candidate $d(E)+w(E,D)=5+4=9$, which improves $d(D)=14$, so update $d(D)=9$ and $p(D)=E$.\nRelax $(E,F)$: since $d(F)>\\,d(E)+w(E,F)$, i.e., $\\infty>5+6$, update $d(F)=11$ and $p(F)=E$.\n\nUnsettled vertices now have $d(D)=9$, $d(F)=11$.\n\nIteration 5 (settle $D$ since $d(D)=9$ is minimum):\nRelax $(D,F)$: candidate $d(D)+w(D,F)=9+11=20$, but $d(F)=11$, so no update.\n\nUnsettled vertex now has $d(F)=11$.\n\nIteration 6 (settle $F$ since $d(F)=11$ is minimum):\nNo relaxation improves any distance.\n\nAt termination, the parent pointers define the SPT edges:\n$(A,B)$ with weight $4$ from $p(B)=A$,\n$(A,C)$ with weight $2$ from $p(C)=A$,\n$(C,E)$ with weight $3$ from $p(E)=C$,\n$(E,D)$ with weight $4$ from $p(D)=E$,\n$(E,F)$ with weight $6$ from $p(F)=E$.\n\nThe sum of the latencies of these unique connections is\n$$S = w(A,B)+w(A,C)+w(C,E)+w(E,D)+w(E,F) = 4+2+3+4+6 = 19.$$\nThus, the total latency sum for the shortest path tree is $19$ milliseconds.", "answer": "$$\\boxed{19}$$", "id": "1496488"}, {"introduction": "A hallmark of deep algorithmic understanding is the ability to adapt a standard algorithm to solve new, related problems. This advanced practice [@problem_id:3227957] challenges you to move beyond finding just one shortest path and instead count *all* distinct shortest paths between two nodes. Successfully modifying the algorithm requires a firm grasp of its core invariants, proving that Dijkstra's is a flexible tool for sophisticated network analysis.", "problem": "Consider a weighted directed graph with vertex set $V = \\{s, a, b, c, d, e, f, g, t\\}$ and nonnegative weight function $w : V \\times V \\to \\mathbb{R}_{\\ge 0}$ defined on the following directed edges:\n$$\n(s,b): w(s,b) = 2,\\quad (s,c): w(s,c) = 2,\\quad (s,d): w(s,d) = 3,\n$$\n$$\n(b,e): w(b,e) = 2,\\quad (c,e): w(c,e) = 2,\\quad (b,f): w(b,f) = 3,\\quad (c,f): w(c,f) = 3,\\quad (d,f): w(d,f) = 1,\n$$\n$$\n(e,g): w(e,g) = 2,\\quad (f,g): w(f,g) = 2,\n$$\n$$\n(e,t): w(e,t) = 5,\\quad (f,t): w(f,t) = 5,\\quad (g,t): w(g,t) = 3,\\quad (d,t): w(d,t) = 7.\n$$\nAll other pairs $(u,v)$ not listed have no edge. Let the length of a path be the sum of its edge weights. A shortest path from $s$ to a vertex $x$ is any path from $s$ to $x$ whose length equals the minimum possible over all paths from $s$ to $x$.\n\nStarting only from fundamental definitions of shortest paths in weighted graphs and the invariant that Dijkstra’s algorithm (which uses a priority queue (PQ) keyed by tentative distances) finalizes the shortest-path distance to a vertex when it is extracted from the PQ, derive a modification to Dijkstra’s algorithm that counts the total number of distinct shortest paths from $s$ to $t$. Then apply your derived modification to the graph above to determine the total number of distinct shortest $s$-$t$ paths. Assume arbitrary tie-breaking in the PQ; the count must be independent of tie-breaking. Express your final answer as a single real-valued number with no units. No rounding is required.", "solution": "We begin with the core definitions. A weighted directed graph $(V,E,w)$ has a set of vertices $V$, a set of directed edges $E \\subseteq V \\times V$, and a nonnegative weight function $w : E \\to \\mathbb{R}_{\\ge 0}$. For a path $P = \\langle v_{0}, v_{1}, \\dots, v_{k} \\rangle$ with $(v_{i}, v_{i+1}) \\in E$ for all $i$, its length is $\\sum_{i=0}^{k-1} w(v_{i}, v_{i+1})$. The shortest-path distance from $s$ to $x$, denoted $d^{\\ast}(x)$, is $\\min\\{\\text{length}(P) : P \\text{ is an } s\\text{-}x \\text{ path}\\}$.\n\nDijkstra’s algorithm maintains a tentative distance array $d[v]$, initializing $d[s] = 0$ and $d[v] = \\infty$ for $v \\neq s$, and a priority queue (PQ) keyed by $d[v]$. A fundamental invariant is: when a vertex $u$ is extracted from the PQ, $d[u] = d^{\\ast}(u)$, and no future relaxation can decrease $d[u]$ because all edge weights are nonnegative.\n\nTo count the number of distinct shortest paths, we augment Dijkstra’s algorithm with a path-count array $c[v]$ where $c[v]$ denotes the number of distinct shortest $s$-$v$ paths consistent with the current best known distance $d[v]$. The initialization is $c[s] = 1$ (there is exactly one empty path of length $0$ to itself), and $c[v] = 0$ for $v \\neq s$. When relaxing an edge $(u,v)$ with weight $w(u,v)$, we consider the candidate distance $d[u] + w(u,v)$:\n- If $d[u] + w(u,v) < d[v]$, then we have found a strictly shorter $s$-$v$ path. Set $d[v] \\leftarrow d[u] + w(u,v)$ and reset $c[v] \\leftarrow c[u]$ because every shortest $s$-$v$ path must now end by $(u,v)$ and consist of a shortest $s$-$u$ path followed by this edge.\n- If $d[u] + w(u,v) = d[v]$, then we have found additional shortest $s$-$v$ paths of equal minimal length. Add $c[u]$ to $c[v]$, that is, $c[v] \\leftarrow c[v] + c[u]$, because each shortest $s$-$u$ path can be extended by $(u,v)$ to yield a distinct shortest $s$-$v$ path.\n\nCorrectness is justified by induction over the order in which vertices are extracted from the PQ. The base case is $s$, with $d[s] = 0 = d^{\\ast}(s)$ and $c[s] = 1$. Assume that for all previously extracted vertices $u$, we have $d[u] = d^{\\ast}(u)$ and $c[u]$ equals the count of distinct shortest $s$-$u$ paths. For a relaxation $(u,v)$, if a strictly better distance is found, all previous shortest $s$-$v$ paths become non-shortest, so resetting $c[v]$ to $c[u]$ is necessary and sufficient, because any shortest $s$-$v$ path must pass through some predecessor $u$ extracted earlier with finalized $d[u]$, and then the last edge $(u,v)$; nonnegative weights ensure this structure is acyclic in the final shortest-path DAG when distances are finalized. If an equally short distance is found, paths via $u$ are new shortest $s$-$v$ paths distinct from those already counted for $v$, so addition accumulates the correct total. When $t$ is extracted or all relaxations are complete, $d[t] = d^{\\ast}(t)$ and $c[t]$ equals the number of distinct shortest $s$-$t$ paths.\n\nWe now apply this modification to the given graph. We denote the vertices explicitly: $V = \\{s, b, c, d, e, f, g, t\\}$, with directed edges and weights:\n$$\n(s,b) = 2, \\ (s,c) = 2, \\ (s,d) = 3;\n$$\n$$\n(b,e) = 2, \\ (c,e) = 2, \\ (b,f) = 3, \\ (c,f) = 3, \\ (d,f) = 1;\n$$\n$$\n(e,g) = 2, \\ (f,g) = 2;\n$$\n$$\n(e,t) = 5, \\ (f,t) = 5, \\ (g,t) = 3, \\ (d,t) = 7.\n$$\n\nInitialization:\n- $d[s] = 0$, $c[s] = 1$.\n- For $v \\in \\{b, c, d, e, f, g, t\\}$: $d[v] = \\infty$, $c[v] = 0$.\n\nRelax edges out of $s$:\n- $(s,b)$: $d[b] \\leftarrow 2$, $c[b] \\leftarrow 1$.\n- $(s,c)$: $d[c] \\leftarrow 2$, $c[c] \\leftarrow 1$.\n- $(s,d)$: $d[d] \\leftarrow 3$, $c[d] \\leftarrow 1$.\n\nExtract vertex with smallest $d$; suppose ties are arbitrary. Extract $b$ ($d[b] = 2$):\n- $(b,e)$: candidate $2 + 2 = 4 < \\infty$, so $d[e] \\leftarrow 4$, $c[e] \\leftarrow c[b] = 1$.\n- $(b,f)$: candidate $2 + 3 = 5 < \\infty$, so $d[f] \\leftarrow 5$, $c[f] \\leftarrow c[b] = 1$.\n\nExtract $c$ ($d[c] = 2$):\n- $(c,e)$: candidate $2 + 2 = 4 = d[e]$, so $c[e] \\leftarrow c[e] + c[c] = 1 + 1 = 2$.\n- $(c,f)$: candidate $2 + 3 = 5 = d[f]$, so $c[f] \\leftarrow c[f] + c[c] = 1 + 1 = 2$.\n\nExtract $d$ ($d[d] = 3$):\n- $(d,f)$: candidate $3 + 1 = 4 < d[f] = 5$, so $d[f] \\leftarrow 4$, $c[f] \\leftarrow c[d] = 1$ (reset on strictly shorter distance).\n- $(d,t)$: candidate $3 + 7 = 10 < \\infty$, so $d[t] \\leftarrow 10$, $c[t] \\leftarrow c[d] = 1$.\n\nNext, the PQ contains $e$ with $d[e] = 4$, $f$ with $d[f] = 4$, $g$ with $d[g] = \\infty$, $t$ with $d[t] = 10$. Extract $e$ ($d[e] = 4$):\n- $(e,g)$: candidate $4 + 2 = 6 < \\infty$, so $d[g] \\leftarrow 6$, $c[g] \\leftarrow c[e] = 2$.\n- $(e,t)$: candidate $4 + 5 = 9 < d[t] = 10$, so $d[t] \\leftarrow 9$, $c[t] \\leftarrow c[e] = 2$.\n\nExtract $f$ ($d[f] = 4$):\n- $(f,g)$: candidate $4 + 2 = 6 = d[g]$, so $c[g] \\leftarrow c[g] + c[f] = 2 + 1 = 3$.\n- $(f,t)$: candidate $4 + 5 = 9 = d[t]$, so $c[t] \\leftarrow c[t] + c[f] = 2 + 1 = 3$.\n\nExtract $g$ ($d[g] = 6$):\n- $(g,t)$: candidate $6 + 3 = 9 = d[t]$, so $c[t] \\leftarrow c[t] + c[g] = 3 + 3 = 6$.\n\nFinally, extract $t$ ($d[t] = 9$); no outgoing relaxations relevant. The algorithm terminates with $d[t] = 9$, which is the shortest-path distance from $s$ to $t$, and $c[t] = 6$, the total number of distinct shortest $s$-$t$ paths.\n\nWe can cross-check the path structure to ensure no overcounting:\n- Paths via $e$ directly to $t$: from $s$ to $e$ there are $2$ shortest routes ($s \\to b \\to e$ and $s \\to c \\to e$), each extended by $(e,t)$ yields $2$ distinct shortest paths of total length $4 + 5 = 9$.\n- Paths via $f$ directly to $t$: the unique shortest route to $f$ is $s \\to d \\to f$ (length $3 + 1 = 4$); extending by $(f,t)$ yields $1$ shortest path of length $9$.\n- Paths via $g$ to $t$: to $g$ there are $3$ shortest routes (two via $e$ and one via $f$), each extended by $(g,t)$ yields $3$ distinct shortest paths of length $6 + 3 = 9$.\nSumming $2 + 1 + 3 = 6$ agrees with $c[t] = 6$ produced by the algorithm.\n\nTherefore, the total number of distinct shortest paths from $s$ to $t$ in the given graph is $6$.", "answer": "$$\\boxed{6}$$", "id": "3227957"}]}