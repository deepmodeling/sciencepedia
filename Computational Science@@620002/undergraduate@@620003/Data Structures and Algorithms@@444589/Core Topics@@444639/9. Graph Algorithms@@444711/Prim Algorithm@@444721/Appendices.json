{"hands_on_practices": [{"introduction": "The best way to truly understand an algorithm is to trace its execution step-by-step. This first exercise guides you through the process of applying Prim's algorithm to a practical scenario of building a cost-effective communication network. By manually selecting the edges to add to the Minimum Spanning Tree (MST), you will build an intuition for the algorithm's greedy approach of always choosing the cheapest connection from the growing network to a new vertex [@problem_id:1528055].", "problem": "A consortium of research institutions is setting up a communication network to connect seven remote Antarctic research stations. The cost of laying high-speed fiber optic cable between any two stations is proportional to the distance and terrain difficulty. Your task is to determine the most cost-effective way to connect all stations into a single network. The available direct links and their associated costs (in arbitrary units) are as follows:\n\n*   Alpha Base to Bravo Point: 4\n*   Alpha Base to Charlie Lab: 5\n*   Alpha Base to Foxtrot Camp: 9\n*   Bravo Point to Charlie Lab: 3\n*   Bravo Point to Delta Hub: 8\n*   Charlie Lab to Delta Hub: 10\n*   Charlie Lab to Echo Site: 6\n*   Charlie Lab to Foxtrot Camp: 2\n*   Delta Hub to Echo Site: 1\n*   Echo Site to Gamma Station: 7\n*   Foxtrot Camp to Gamma Station: 11\n\nTo plan the network construction, you will use Prim's algorithm to find a Minimum Spanning Tree (MST). If you start the algorithm from Alpha Base, in what order are the other stations added to the network?\n\nSelect the correct sequence from the options below. The sequence includes the starting station first, followed by the stations in the order they were added.\n\nA. Alpha Base, Bravo Point, Charlie Lab, Foxtrot Camp, Echo Site, Delta Hub, Gamma Station\n\nB. Alpha Base, Bravo Point, Charlie Lab, Foxtrot Camp, Gamma Station, Echo Site, Delta Hub\n\nC. Alpha Base, Charlie Lab, Foxtrot Camp, Bravo Point, Echo Site, Delta Hub, Gamma Station\n\nD. Alpha Base, Bravo Point, Charlie Lab, Echo Site, Delta Hub, Foxtrot Camp, Gamma Station\n\nE. Alpha Base, Delta Hub, Echo Site, Charlie Lab, Foxtrot Camp, Bravo Point, Gamma Station", "solution": "We model the network as an undirected weighted graph with vertex set $\\{\\text{Alpha Base}, \\text{Bravo Point}, \\text{Charlie Lab}, \\text{Delta Hub}, \\text{Echo Site}, \\text{Foxtrot Camp}, \\text{Gamma Station}\\}$ and edge weights given by $w(u,v)$:\n$$\n\\begin{aligned}\n&w(\\text{Alpha Base},\\text{Bravo Point})=4,\\quad w(\\text{Alpha Base},\\text{Charlie Lab})=5,\\quad w(\\text{Alpha Base},\\text{Foxtrot Camp})=9,\\\\\n&w(\\text{Bravo Point},\\text{Charlie Lab})=3,\\quad w(\\text{Bravo Point},\\text{Delta Hub})=8,\\\\\n&w(\\text{Charlie Lab},\\text{Delta Hub})=10,\\quad w(\\text{Charlie Lab},\\text{Echo Site})=6,\\quad w(\\text{Charlie Lab},\\text{Foxtrot Camp})=2,\\\\\n&w(\\text{Delta Hub},\\text{Echo Site})=1,\\quad w(\\text{Echo Site},\\text{Gamma Station})=7,\\quad w(\\text{Foxtrot Camp},\\text{Gamma Station})=11.\n\\end{aligned}\n$$\nPrim's algorithm initializes the tree with the starting vertex and iteratively adds the minimum-weight edge crossing from the current tree to any vertex outside it.\n\nInitialize with $T_{0}=\\{\\text{Alpha Base}\\}$. Candidate edges from $T_{0}$ are:\n$$\n(\\text{Alpha Base},\\text{Bravo Point},4),\\;(\\text{Alpha Base},\\text{Charlie Lab},5),\\;(\\text{Alpha Base},\\text{Foxtrot Camp},9).\n$$\nThe minimum is $4$, so add Bravo Point. Order so far: Alpha Base, Bravo Point. Now $T_{1}=\\{\\text{Alpha Base},\\text{Bravo Point}\\}$.\n\nFrom $T_{1}$ to outside, candidate edges are:\n$$\n(\\text{Alpha Base},\\text{Charlie Lab},5),\\;(\\text{Alpha Base},\\text{Foxtrot Camp},9),\\;(\\text{Bravo Point},\\text{Charlie Lab},3),\\;(\\text{Bravo Point},\\text{Delta Hub},8).\n$$\nThe minimum is $3$, so add Charlie Lab. Order: Alpha Base, Bravo Point, Charlie Lab. Now $T_{2}=\\{\\text{Alpha Base},\\text{Bravo Point},\\text{Charlie Lab}\\}$.\n\nFrom $T_{2}$ to outside, candidate edges are:\n$$\n(\\text{Alpha Base},\\text{Foxtrot Camp},9),\\;(\\text{Bravo Point},\\text{Delta Hub},8),\\;(\\text{Charlie Lab},\\text{Delta Hub},10),\\;(\\text{Charlie Lab},\\text{Echo Site},6),\\;(\\text{Charlie Lab},\\text{Foxtrot Camp},2).\n$$\nThe minimum is $2$, so add Foxtrot Camp. Order: Alpha Base, Bravo Point, Charlie Lab, Foxtrot Camp. Now $T_{3}=\\{\\text{Alpha Base},\\text{Bravo Point},\\text{Charlie Lab},\\text{Foxtrot Camp}\\}$.\n\nFrom $T_{3}$ to outside, candidate edges are:\n$$\n(\\text{Bravo Point},\\text{Delta Hub},8),\\;(\\text{Charlie Lab},\\text{Delta Hub},10),\\;(\\text{Charlie Lab},\\text{Echo Site},6),\\;(\\text{Foxtrot Camp},\\text{Gamma Station},11).\n$$\nThe minimum is $6$, so add Echo Site. Order: Alpha Base, Bravo Point, Charlie Lab, Foxtrot Camp, Echo Site. Now $T_{4}=\\{\\text{Alpha Base},\\text{Bravo Point},\\text{Charlie Lab},\\text{Foxtrot Camp},\\text{Echo Site}\\}$.\n\nFrom $T_{4}$ to outside, candidate edges are:\n$$\n(\\text{Bravo Point},\\text{Delta Hub},8),\\;(\\text{Charlie Lab},\\text{Delta Hub},10),\\;(\\text{Echo Site},\\text{Delta Hub},1),\\;(\\text{Echo Site},\\text{Gamma Station},7),\\;(\\text{Foxtrot Camp},\\text{Gamma Station},11).\n$$\nThe minimum is $1$, so add Delta Hub. Order: Alpha Base, Bravo Point, Charlie Lab, Foxtrot Camp, Echo Site, Delta Hub. Now $T_{5}=\\{\\text{Alpha Base},\\text{Bravo Point},\\text{Charlie Lab},\\text{Foxtrot Camp},\\text{Echo Site},\\text{Delta Hub}\\}$.\n\nFrom $T_{5}$ to outside, candidate edges are:\n$$\n(\\text{Echo Site},\\text{Gamma Station},7),\\;(\\text{Foxtrot Camp},\\text{Gamma Station},11).\n$$\nThe minimum is $7$, so add Gamma Station. Final order: Alpha Base, Bravo Point, Charlie Lab, Foxtrot Camp, Echo Site, Delta Hub, Gamma Station.\n\nThis matches option A.", "answer": "$$\\boxed{A}$$", "id": "1528055"}, {"introduction": "The precise formulation of a greedy algorithm like Prim's is critical to its correctness. A small change can lead to a suboptimal result. This exercise [@problem_id:1528057] presents a plausible but flawed variation of Prim's algorithm that only considers edges from the most recently added vertex. By comparing the outcome of this simplified procedure with the true MST, you will gain a deeper appreciation for why Prim's algorithm must consider all edges crossing the cut from the entire set of visited vertices at each step.", "problem": "A computer science student, Alex, is studying graph algorithms and comes up with a modified procedure for finding a spanning tree in a connected, undirected, weighted graph. Alex believes this algorithm will always find a Minimum Spanning Tree (MST).\n\n**Alex's Algorithm:**\n1.  Initialize a tree, $T$, with an arbitrary starting vertex, $v_0$.\n2.  Let $v_{last}$ be the vertex most recently added to $T$.\n3.  Find the edge $(v_{last}, u)$ that has the minimum weight among all edges connecting $v_{last}$ to a vertex $u$ not yet in $T$.\n4.  Add this edge and the vertex $u$ to the tree $T$.\n5.  Repeat steps 2-4 until all vertices from the graph are included in $T$.\n\nYour task is to analyze the performance of Alex's algorithm on a specific graph.\n\nConsider an undirected, weighted graph $G$ with a set of vertices $V = \\{A, B, C, D\\}$ and a set of edges $E$ with the following weights:\n- $w(A,B) = 1$\n- $w(A,C) = 2$\n- $w(C,D) = 3$\n- $w(B,D) = 4$\n- $w(A,D) = 5$\n\nAssuming the process starts at vertex A for both Alex's algorithm and the standard Prim's algorithm for finding a true MST, calculate the total weight of the spanning tree produced by Alex's algorithm and the total weight of the true Minimum Spanning Tree.\n\nPresent your answer as a pair of numbers, (Weight from Alex's Algorithm, Weight of MST), using the LaTeX `pmatrix` environment for a row matrix.", "solution": "We analyze Alex's algorithm first. Initialize the tree with vertex $A$, so $T=\\{A\\}$ and $v_{\\text{last}}=A$. Among edges incident to $A$ that go to vertices not yet in $T$, the candidates are $(A,B)$ with weight $1$, $(A,C)$ with weight $2$, and $(A,D)$ with weight $5$. The minimum is $(A,B)$, so we add edge $(A,B)$ and vertex $B$. Now $T=\\{A,B\\}$ and $v_{\\text{last}}=B$. From $B$ to vertices not yet in $T$, the only candidate is $(B,D)$ with weight $4$ (since $(B,A)$ goes to an already included vertex and there is no edge $(B,C)$). We add $(B,D)$ and $D$, so $T=\\{A,B,D\\}$ and $v_{\\text{last}}=D$. From $D$ to vertices not yet in $T$, the candidates are $(D,C)$ with weight $3$, $(D,A)$ with weight $5$, and $(D,B)$ with weight $4$, but only $(D,C)$ reaches a new vertex. We add $(D,C)$ and $C$. All vertices are now included. The total weight of Alex's tree is therefore\n$$\nw_{\\text{Alex}}=w(A,B)+w(B,D)+w(D,C)=1+4+3=8.\n$$\n\nNow apply Prim's algorithm starting at $A$. Initialize $T=\\{A\\}$. Among all edges crossing from $T$ to $V\\setminus T$, the candidates are $(A,B)$ with weight $1$, $(A,C)$ with weight $2$, and $(A,D)$ with weight $5$. The minimum is $(A,B)$ with weight $1$, so add $B$ and the edge $(A,B)$. Now $T=\\{A,B\\}$. The edges crossing from $T$ to $V\\setminus T=\\{C,D\\}$ are $(A,C)$ with weight $2$, $(A,D)$ with weight $5$, and $(B,D)$ with weight $4$. The minimum is $(A,C)$ with weight $2$, so add $C$ and edge $(A,C)$. Now $T=\\{A,B,C\\}$. The edges crossing to $V\\setminus T=\\{D\\}$ are $(C,D)$ with weight $3$, $(B,D)$ with weight $4$, and $(A,D)$ with weight $5$. The minimum is $(C,D)$ with weight $3$, so add $D$ and edge $(C,D)$. The total weight of the MST found by Prim's algorithm is\n$$\nw_{\\text{MST}}=w(A,B)+w(A,C)+w(C,D)=1+2+3=6.\n$$\n\nTherefore, the pair of total weights is $\\left(8,6\\right)$, reported as a row matrix using the `pmatrix` environment.", "answer": "$$\\boxed{\\begin{pmatrix}8 & 6\\end{pmatrix}}$$", "id": "1528057"}, {"introduction": "A common point of confusion when learning about graph algorithms is the distinction between a Minimum Spanning Tree and a Shortest Path Tree. While an MST provides the cheapest way to connect all vertices in a graph, the path between two vertices within that MST is not guaranteed to be the shortest path between them in the original graph. This exercise [@problem_id:1392177] illustrates this crucial concept by asking you to calculate both path costs, highlighting the different optimization goals of these fundamental graph structures.", "problem": "A municipal government is planning to install a fiber-optic network to connect six key administrative buildings, labeled A, B, C, D, E, and F. The cost, in tens of thousands of dollars, to lay a direct cable between any two buildings has been calculated. To ensure all buildings are connected at the lowest possible installation cost, the city will build a network corresponding to a Minimum Spanning Tree (MST) of the potential connections.\n\nThe graph of all possible connections $G$ has vertices $V = \\{A, B, C, D, E, F\\}$, and the weighted, undirected edges are given as follows:\n- (A, B) with weight 3\n- (A, E) with weight 10\n- (A, F) with weight 14\n- (B, C) with weight 2\n- (B, D) with weight 5\n- (C, D) with weight 8\n- (C, E) with weight 4\n- (E, F) with weight 6\n\nOnce the MST network is constructed, we are interested in the communication path between building A and building F.\nLet $W_{MST}$ be the total cost of the path between A and F *using only a path within the constructed MST network*.\nLet $W_{SP}$ be the cost of the absolute shortest path between A and F in the original graph $G$ (considering all available edges).\n\nCalculate the values of $W_{MST}$ and $W_{SP}$. Provide your answer as an ordered pair $(W_{MST}, W_{SP})$.", "solution": "The problem asks for two quantities: the weight of the path between vertices A and F in the Minimum Spanning Tree (MST) of the given graph $G$, denoted as $W_{MST}$, and the weight of the shortest path between A and F in the original graph $G$, denoted as $W_{SP}$.\n\n**Part 1: Finding the Minimum Spanning Tree (MST)**\n\nWe can find the MST of the graph $G$ using Prim's algorithm. Let's start the algorithm at vertex A. We will maintain a set of vertices, $S$, that are already in the MST. Initially, $S = \\emptyset$. We will also keep track of the edges in our MST.\n\n1.  **Initialization**: Start with an arbitrary vertex. Let's choose A. Let the set of visited vertices be $S = \\{A\\}$. The set of edges in the MST is empty.\n\n2.  **Iteration 1**: Find the cheapest edge connecting a vertex in $S$ to a vertex outside $S$. The edges from A are (A, B) with weight 3, (A, E) with weight 10, and (A, F) with weight 14. The minimum weight edge is (A, B) with weight 3.\n    - Add edge (A, B) to the MST.\n    - Add vertex B to $S$. Now $S = \\{A, B\\}$.\n    - MST Edges: `{(A, B)}`\n\n3.  **Iteration 2**: Find the cheapest edge connecting a vertex in $\\{A, B\\}$ to a vertex in $\\{C, D, E, F\\}$. The candidate edges are:\n    - From A: (A, E) weight 10, (A, F) weight 14.\n    - From B: (B, C) weight 2, (B, D) weight 5.\n    The minimum weight edge is (B, C) with weight 2.\n    - Add edge (B, C) to the MST.\n    - Add vertex C to $S$. Now $S = \\{A, B, C\\}$.\n    - MST Edges: `{(A, B), (B, C)}`\n\n4.  **Iteration 3**: Find the cheapest edge from $\\{A, B, C\\}$ to $\\{D, E, F\\}$. Candidate edges are:\n    - From A: (A, E) weight 10, (A, F) weight 14.\n    - From B: (B, D) weight 5.\n    - From C: (C, D) weight 8, (C, E) weight 4.\n    The minimum weight edge is (C, E) with weight 4.\n    - Add edge (C, E) to the MST.\n    - Add vertex E to $S$. Now $S = \\{A, B, C, E\\}$.\n    - MST Edges: `{(A, B), (B, C), (C, E)}`\n\n5.  **Iteration 4**: Find the cheapest edge from $\\{A, B, C, E\\}$ to $\\{D, F\\}$. Candidate edges are:\n    - From A: (A, F) weight 14.\n    - From B: (B, D) weight 5.\n    - From C: (C, D) weight 8.\n    - From E: (E, F) weight 6.\n    The minimum weight edge is (B, D) with weight 5.\n    - Add edge (B, D) to the MST.\n    - Add vertex D to $S$. Now $S = \\{A, B, C, E, D\\}$.\n    - MST Edges: `{(A, B), (B, C), (C, E), (B, D)}`\n\n6.  **Iteration 5**: Find the cheapest edge from $\\{A, B, C, E, D\\}$ to $\\{F\\}$. Candidate edges are:\n    - From A: (A, F) weight 14.\n    - From E: (E, F) weight 6.\n    The minimum weight edge is (E, F) with weight 6.\n    - Add edge (E, F) to the MST.\n    - Add vertex F to $S$. Now $S = \\{A, B, C, D, E, F\\}$. All vertices are in the set.\n    - MST Edges: `{(A, B), (B, C), (C, E), (B, D), (E, F)}`\n\nThe algorithm terminates. The edges in the MST are (A, B), (B, C), (C, E), (B, D), and (E, F).\n\n**Part 2: Calculating $W_{MST}$**\n\nNow we find the path between A and F using only the edges of the MST. By inspecting the MST edges, the unique path from A to F is A $\\rightarrow$ B $\\rightarrow$ C $\\rightarrow$ E $\\rightarrow$ F.\nThe total weight of this path is the sum of the weights of its edges:\n$W_{MST} = \\text{weight}(A, B) + \\text{weight}(B, C) + \\text{weight}(C, E) + \\text{weight}(E, F)$\n$W_{MST} = 3 + 2 + 4 + 6 = 15$.\n\n**Part 3: Calculating $W_{SP}$**\n\nNext, we find the shortest path between A and F in the original graph $G$. We can use Dijkstra's algorithm or inspect the possible paths.\n\nLet's list the relevant paths from A to F and their weights:\n-   **Path 1**: The direct edge (A, F). Weight = 14.\n-   **Path 2**: The path found in the MST: A $\\rightarrow$ B $\\rightarrow$ C $\\rightarrow$ E $\\rightarrow$ F. Weight = 15.\n-   **Path 3**: Another path via vertex E: A $\\rightarrow$ E $\\rightarrow$ F. Weight = weight(A, E) + weight(E, F) = 10 + 6 = 16.\n\nComparing the weights of these paths (14, 15, 16), the minimum weight is 14. Any other path, such as one involving vertex D, would be even longer. For instance, A $\\rightarrow$ B $\\rightarrow$ D $\\rightarrow$ C $\\rightarrow$ E $\\rightarrow$ F has weight $3+5+8+4+6 = 26$.\nThus, the shortest path in the original graph is the direct edge (A, F).\nThe weight of the shortest path is $W_{SP} = 14$.\n\n**Conclusion**\n\nWe have calculated both values:\n-   The cost of the path in the MST is $W_{MST} = 15$.\n-   The cost of the shortest path in the original graph is $W_{SP} = 14$.\n\nThe final answer is the ordered pair $(15, 14)$.", "answer": "$$\\boxed{\\begin{pmatrix}15 & 14\\end{pmatrix}}$$", "id": "1392177"}]}