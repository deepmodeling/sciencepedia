{"hands_on_practices": [{"introduction": "The first step in analyzing many computational and combinatorial problems is translating a descriptive scenario into a mathematical recurrence relation. This exercise provides practice in this fundamental skill by considering a scheduling problem with a specific constraint. To solve it, we will employ a classic strategy: partitioning the set of all possible solutions based on a simple choice made about the last element, which in this case is whether or not to schedule a job in the final time slot [@problem_id:1395092].", "problem": "A system administrator is responsible for scheduling a series of maintenance jobs over a period of $n$ consecutive time slots, labeled $1, 2, \\dots, n$. Due to the nature of the jobs and shared resource constraints, the system is configured to prevent jobs from being scheduled in two consecutive time slots. A \"valid schedule\" is defined as any set of time slots selected for maintenance that adheres to this rule. This includes the possibility of performing no jobs at all (i.e., selecting the empty set of time slots).\n\nLet $S_n$ be the number of distinct valid schedules possible for $n$ time slots. For $n \\ge 2$, the sequence $S_n$ can be described by a linear homogeneous recurrence relation of order 2 with constant integer coefficients, which takes the form $S_n = c_1 S_{n-1} + c_2 S_{n-2}$.\n\nDetermine the ordered pair of integer coefficients $(c_1, c_2)$.", "solution": "Let $S_{n}$ denote the number of valid schedules (subsets of $\\{1,2,\\dots,n\\}$ with no two consecutive elements). For $n \\geq 2$, consider a valid schedule and partition by whether the last slot $n$ is selected.\n\nIf $n$ is not selected, then all selections occur among $\\{1,2,\\dots,n-1\\}$ with the same constraint, giving $S_{n-1}$ possibilities.\n\nIf $n$ is selected, then $n-1$ cannot be selected due to the constraint, so the remaining selections occur among $\\{1,2,\\dots,n-2\\}$ with the same constraint, giving $S_{n-2}$ possibilities.\n\nThese two cases are disjoint and exhaustive, so by the addition principle,\n$$\nS_{n} = S_{n-1} + S_{n-2}.\n$$\nThis is a linear homogeneous recurrence of order $2$ with constant integer coefficients. Matching to $S_{n} = c_{1} S_{n-1} + c_{2} S_{n-2}$ yields\n$$\nc_{1} = 1,\\quad c_{2} = 1.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}1 & 1\\end{pmatrix}}$$", "id": "1395092"}, {"introduction": "Once a recurrence relation is formulated, the next goal is often to find a \"closed-form\" solutionâ€”an explicit formula that doesn't rely on previous terms. This practice introduces the powerful and intuitive iteration method, also known as unrolling or telescoping. By repeatedly substituting the recurrence into itself, we can uncover a pattern, typically a summation, which can then be simplified into a final, elegant expression using algebraic or logarithmic properties [@problem_id:3264331].", "problem": "An engineer analyzes a recursive procedure that builds a balanced search structure by inserting $n$ distinct keys one at a time. In an idealized cost model, the insertion of the $k$-th key performs exactly $\\log_{2} k$ primitive steps due to path traversal and localized rebalancing, where $k \\in \\{2,3,\\ldots,n\\}$. Let $T(n)$ denote the total number of primitive steps required to process $n$ keys, with the base case $T(1) = 0$. By modeling the total cost as the sum of the cost of the recursive subproblem and the cost of work performed at the current size, the engineer arrives at the recurrence\n$$\nT(n) = T(n-1) + \\log_{2} n \\quad \\text{for } n \\geq 2, \\quad T(1)=0.\n$$\nStarting from first principles in algorithm analysis (sequential composition implies additive costs), well-tested properties of logarithms (such as the homomorphism from multiplication to addition), and the definition of the factorial function, derive a closed-form expression for $T(n)$ as an explicit function of $n$ that contains no summation symbols and no asymptotic notation. Use base-$2$ logarithms. Your final answer must be a single analytic expression in $n$.", "solution": "The problem requires finding a closed-form expression for the total cost $T(n)$ defined by the recurrence relation\n$$\nT(n) = T(n-1) + \\log_{2} n \\quad \\text{for } n \\geq 2\n$$\nwith the base case $T(1) = 0$.\n\nThe derivation proceeds by unrolling the recurrence relation. This technique, also known as telescoping or iteration, involves repeatedly substituting the definition of the function for smaller arguments until the base case is reached.\n\nFor an integer $n \\geq 2$, we can write:\n$$\nT(n) = T(n-1) + \\log_{2} n\n$$\nSubstituting the expression for $T(n-1) = T(n-2) + \\log_{2}(n-1)$, we get:\n$$\nT(n) = \\left( T(n-2) + \\log_{2}(n-1) \\right) + \\log_{2} n = T(n-2) + \\log_{2}(n-1) + \\log_{2} n\n$$\nContinuing this substitution process for $T(n-2)$, $T(n-3)$, and so on, down to $T(2)$:\n$$\nT(n) = T(n-3) + \\log_{2}(n-2) + \\log_{2}(n-1) + \\log_{2} n\n$$\n$$\n\\vdots\n$$\n$$\nT(n) = T(1) + \\log_{2}(2) + \\log_{2}(3) + \\ldots + \\log_{2}(n-1) + \\log_{2} n\n$$\nThis can be expressed compactly using summation notation:\n$$\nT(n) = T(1) + \\sum_{k=2}^{n} \\log_{2} k\n$$\nThe problem specifies the base case $T(1) = 0$. Substituting this value into the equation yields:\n$$\nT(n) = 0 + \\sum_{k=2}^{n} \\log_{2} k = \\sum_{k=2}^{n} \\log_{2} k\n$$\nThe problem requires an expression without summation symbols, leveraging the properties of logarithms. The fundamental property of logarithms states that the sum of logarithms is equal to the logarithm of the product of their arguments. For a common base $b > 0$, $b \\neq 1$:\n$$\n\\sum_{i} \\log_{b}(x_i) = \\log_{b} \\left( \\prod_{i} x_i \\right)\n$$\nApplying this property to our expression for $T(n)$ with base $b=2$:\n$$\nT(n) = \\log_{2}(2) + \\log_{2}(3) + \\ldots + \\log_{2}(n) = \\log_{2} \\left( 2 \\times 3 \\times \\ldots \\times n \\right)\n$$\nThe product in the argument of the logarithm is $2 \\times 3 \\times \\ldots \\times n$. This product is closely related to the factorial function, which is defined for a non-negative integer $n$ as:\n$$\nn! = \\prod_{k=1}^{n} k = 1 \\times 2 \\times 3 \\times \\ldots \\times n\n$$\nSince multiplying by $1$ does not change the value of the product, we have:\n$$\n2 \\times 3 \\times \\ldots \\times n = 1 \\times 2 \\times 3 \\times \\ldots \\times n = n!\n$$\nTherefore, we can substitute $n!$ for the product inside the logarithm:\n$$\nT(n) = \\log_{2}(n!)\n$$\nThis expression is the required closed-form solution. It is an explicit function of $n$, contains no summation symbols or asymptotic notation, and uses the specified base-$2$ logarithm. This result is also known as the logarithm of Stirling's formula when an approximation for large $n$ is sought, but the exact form $\\log_{2}(n!)$ is the required answer here.", "answer": "$$\\boxed{\\log_{2}(n!)}$$", "id": "3264331"}, {"introduction": "Not all recurrence relations yield easily to direct iteration. More complex structures, especially those arising from sophisticated divide-and-conquer algorithms, often require a more advanced approach. This exercise demonstrates the change of variables method, a clever technique for transforming a difficult recurrence into a familiar, simpler one. By strategically redefining the function and its input size, we can convert a seemingly complex relationship involving square roots into a straightforward linear recurrence, making it much easier to solve [@problem_id:3264360].", "problem": "An algorithm operates on an input of size $n$ under the uniform-cost Random Access Machine (RAM) model, and in each phase it transforms the problem into $\\sqrt{n}$ similar subproblems whose input size is $\\sqrt{n}$, followed by a linear-time merge/scan over the $n$ items. This yields a time complexity recurrence of the form $T(n) = \\sqrt{n}\\,T(\\sqrt{n}) + n$ for all $n$ that are powers of $2$. Suppose the initial condition is $T(2) = 6$. For analysis, restrict attention to inputs of the form $n = 2^{2^{m}}$ where $m$ is a nonnegative integer. Starting from fundamental definitions of recurrence relations and using only well-tested facts about exponents and logarithms, derive a closed-form analytic expression for $T(n)$ as a function of $m$ and $n$. Provide your final answer as a single closed-form expression depending on $m$ (no approximation or inequality), and do not include any units. No rounding is required.", "solution": "The problem provides a recurrence relation for the time complexity $T(n)$ of an algorithm:\n$$T(n) = \\sqrt{n}\\,T(\\sqrt{n}) + n$$\nThis relation is given for inputs of size $n$ that are powers of $2$. The analysis is further restricted to the specific form $n = 2^{2^{m}}$, where $m$ is a nonnegative integer, i.e., $m \\in \\{0, 1, 2, \\dots\\}$. The initial condition is provided as $T(2) = 6$.\n\nThe specified form $n = 2^{2^{m}}$ suggests a change of variable to simplify the recurrence. Let us define a new function $f(m)$ corresponding to $T(n)$ for this specific structure of $n$:\n$$f(m) = T(2^{2^{m}})$$\nThe base case for $m=0$ corresponds to $n = 2^{2^0} = 2^1 = 2$. Thus, the initial condition translates to:\n$$f(0) = T(2) = 6$$\nNow, let us express the terms of the original recurrence in terms of $f(m)$. The argument of $T$ on the right-hand side is $\\sqrt{n}$. For $n = 2^{2^{m}}$, this becomes:\n$$\\sqrt{n} = \\left(2^{2^{m}}\\right)^{1/2} = 2^{\\frac{1}{2} \\cdot 2^{m}} = 2^{2^{m-1}}$$\nTherefore, $T(\\sqrt{n})$ corresponds to $f(m-1)$:\n$$T(\\sqrt{n}) = T(2^{2^{m-1}}) = f(m-1)$$\nSubstituting these into the original recurrence relation $T(n) = \\sqrt{n}\\,T(\\sqrt{n}) + n$, we obtain a new recurrence for $f(m)$:\n$$f(m) = \\left(2^{2^{m-1}}\\right) f(m-1) + 2^{2^m}$$\nThis recurrence appears complex, but it can be simplified by normalization. Let us divide both sides by $2^{2^m}$:\n$$\\frac{f(m)}{2^{2^m}} = \\frac{2^{2^{m-1}}}{2^{2^m}} f(m-1) + \\frac{2^{2^m}}{2^{2^m}}$$\nTo simplify the coefficient $\\frac{2^{2^{m-1}}}{2^{2^m}}$, we use the property of exponents $a^x/a^y = a^{x-y}$. The exponents in our case are $2^{m-1}$ and $2^m$. Note that $2^m = 2 \\cdot 2^{m-1} = 2^{m-1} + 2^{m-1}$.\n$$\\frac{2^{2^{m-1}}}{2^{2^m}} = 2^{2^{m-1} - 2^m} = 2^{2^{m-1} - (2 \\cdot 2^{m-1})} = 2^{-2^{m-1}} = \\frac{1}{2^{2^{m-1}}}$$\nSubstituting this back into the normalized recurrence gives:\n$$\\frac{f(m)}{2^{2^m}} = \\frac{1}{2^{2^{m-1}}} f(m-1) + 1$$\n$$\\frac{f(m)}{2^{2^m}} = \\frac{f(m-1)}{2^{2^{m-1}}} + 1$$\nThis reveals a simple structure. Let us define a new function, $g(m)$, as:\n$$g(m) = \\frac{f(m)}{2^{2^m}}$$\nThe recurrence for $g(m)$ is then a simple arithmetic progression:\n$$g(m) = g(m-1) + 1$$\nThis can be solved by unwrapping the recurrence:\n$$g(m) = g(m-1) + 1 = (g(m-2)+1) + 1 = g(m-2) + 2 = \\dots = g(0) + m$$\nTo find $g(0)$, we use the base case $f(0) = 6$:\n$$g(0) = \\frac{f(0)}{2^{2^0}} = \\frac{T(2)}{2^1} = \\frac{6}{2} = 3$$\nSubstituting this value back into the expression for $g(m)$, we get the closed form for $g(m)$:\n$$g(m) = m + 3$$\nNow, we must reverse the substitutions to find the expression for $T(n)$. First, we find $f(m)$:\n$$f(m) = g(m) \\cdot 2^{2^m} = (m+3) \\cdot 2^{2^m}$$\nSince $f(m) = T(n)$ for $n=2^{2^m}$, we have our solution for $T(n)$ as a function of $m$:\n$$T(n)\\Big|_{n=2^{2^m}} = (m+3) 2^{2^m}$$\nThe problem asks for an expression for $T(n)$ as a function of $m$ and $n$. Since $n = 2^{2^m}$, we can write the expression as:\n$$T(n) = (m+3) n$$\nFurthermore, we can express $m$ in terms of $n$ by taking logarithms.\n$$n = 2^{2^m} \\implies \\log_2(n) = 2^m \\implies \\log_2(\\log_2(n)) = m$$\nSubstituting this into our expression for $T(n)$ gives a closed form solely in terms of $n$:\n$$T(n) = n (\\log_2(\\log_2(n)) + 3)$$\nThe final answer is requested as an expression depending on $m$. Based on our derivation $f(m) = T(2^{2^m}) = (m+3) 2^{2^m}$.", "answer": "$$ \\boxed{(m+3)2^{2^{m}}} $$", "id": "3264360"}]}