{"hands_on_practices": [{"introduction": "While tombstones elegantly solve the deletion problem, they introduce a new kind of \"occupied\" state that can seem to complicate probing. This exercise [@problem_id:3227213] directly confronts a common concern: could a specific arrangement of tombstones create a \"trap,\" causing an insertion probe to loop indefinitely without finding an empty slot that is known to exist? By analyzing the properties of double hashing, you will reinforce your understanding of why robust probing strategies guarantee that the entire table is searched, ensuring that a probe can never be trapped by tombstones alone.", "problem": "You are given an open-addressing hash table using double hashing. The table has size $m$, primary hash function $h_1(k)$, and secondary (step) hash function $h_2(k)$. For a key $k$, the probe sequence is defined by\n$$\ni_t \\equiv \\big(h_1(k) + t \\cdot h_2(k)\\big) \\bmod m \\quad \\text{for} \\quad t \\in \\{0,1,2,\\dots\\}.\n$$\nDeletions do not clear cells; instead, they set a distinguished tombstone marker $\\mathsf{T}$, which is neither “empty” nor “occupied by any key.” An actually empty cell is denoted $\\mathsf{E}$. The insertion algorithm is the standard “remember-first-tombstone” rule:\n- It scans $i_0,i_1,\\dots$ in order, stopping early if it encounters the key $k$ or an empty cell $\\mathsf{E}$.\n- It records the index of the first tombstone $\\mathsf{T}$, if any.\n- If an empty cell $\\mathsf{E}$ is found before the key $k$, it inserts into the earliest recorded $\\mathsf{T}$ if such exists; otherwise it inserts into that $\\mathsf{E}$.\n- If no empty cell $\\mathsf{E}$ is found after at most $m$ probes and $k$ is not present, it inserts into the earliest recorded $\\mathsf{T}$; if no tombstone was recorded, it reports the table as full.\n\nAssume the following standard design constraints:\n- $m$ is a prime number,\n- $h_2(k) \\in \\{1,2,\\dots,m-1\\}$ for every $k$ (in particular, $h_2(k) \\not\\equiv 0 \\pmod m$).\n\nThese constraints are well known to imply that, for any fixed key $k$, the probe sequence $i_0,i_1,\\dots,i_{m-1}$ is a permutation of the $m$ table indices.\n\nQuestion: Under the assumptions above, can any finite sequence of deletions produce a configuration of tombstones that creates a “cycle of tombstones” which traps a subsequent insertion probe sequence for some key $k$ in the following sense: the insertion for $k$ cannot terminate with a valid placement even though there exists at least one actually empty cell $\\mathsf{E}$ somewhere in the table?\n\nChoose the correct option.\n\nA. No. Because $i_0,i_1,\\dots,i_{m-1}$ visits every index exactly once and the insertion reuses the first tombstone $\\mathsf{T}$ if no $\\mathsf{E}$ is encountered, a probe cannot be trapped by any arrangement of tombstones under the stated assumptions.\n\nB. Yes. Tombstones can align to force the probe to revisit positions before all $m$ distinct indices are seen, creating an infinite loop that prevents termination even with the “remember-first-tombstone” rule.\n\nC. Yes. Tombstones dynamically change the effective step size by being “skipped,” which can induce a shorter modular cycle that does not intersect any $\\mathsf{E}$ cells.\n\nD. Yes. When the load factor $\\alpha$ exceeds some absolute constant $c \\in (0,1)$, cycles of tombstones that trap probes arise with nonzero probability even under the stated assumptions.", "solution": "The problem statement describing open addressing with double hashing, tombstones for deletions, and a specific insertion algorithm is valid, self-contained, and scientifically sound. It is well-posed and free from contradictions or ambiguities.\n\nThe question is whether a sequence of deletions can create a configuration of tombstones that \"traps\" an insertion probe. A probe for a key $k$ is defined as \"trapped\" if the insertion algorithm fails to place the key, despite the existence of at least one empty cell ($\\mathsf{E}$) in the table.\n\nLet us analyze the process of inserting a key $k$ into the hash table of size $m$.\n\n**1. The Probe Sequence Generation**\nThe probe sequence is generated by the formula:\n$$i_t \\equiv \\big(h_1(k) + t \\cdot h_2(k)\\big) \\pmod m$$\nfor probe attempts $t = 0, 1, 2, \\dots$.\n\nThe problem states two critical constraints:\n- The table size $m$ is a prime number.\n- For any key $k$, the secondary hash function yields $h_2(k) \\in \\{1, 2, \\dots, m-1\\}$. This implies that $h_2(k)$ is not a multiple of $m$.\n\nBecause $m$ is prime, any integer $h_2(k)$ in the range $\\{1, 2, \\dots, m-1\\}$ is relatively prime to $m$, i.e., $\\gcd(h_2(k), m) = 1$.\nThe probe sequence $i_t$ is an arithmetic progression modulo $m$. A known result from number theory states that if the step size of an arithmetic progression modulo $m$ (here, $h_2(k)$) is relatively prime to the modulus $m$, then the progression will visit every residue modulo $m$ exactly once before repeating.\nTherefore, the sequence of indices $i_0, i_1, \\dots, i_{m-1}$ constitutes a permutation of the set of all table indices $\\{0, 1, \\dots, m-1\\}$.\nCrucially, the generation of this probe sequence depends only on the key $k$ and the hash functions $h_1$ and $h_2$. It is entirely independent of the current state of the table's cells (whether they contain keys, tombstones $\\mathsf{T}$, or are empty $\\mathsf{E}$). The notion of a \"cycle of tombstones\" altering the probe sequence is fundamentally incorrect. The sequence is fixed *a priori* for a given key $k$.\n\n**2. The Insertion Algorithm and Termination**\nThe insertion algorithm for a key $k$ involves scanning the cells at indices $i_0, i_1, i_2, \\dots$. The algorithm's termination is governed by the rule: \"stopping early if it encounters the key $k$ or an empty cell $\\mathsf{E}$.\"\n\nThe question presupposes that there is at least one empty cell, $\\mathsf{E}$, somewhere in the table.\nFrom point 1, we established that the probe sequence $i_0, i_1, \\dots, i_{m-1}$ will visit every single cell in the table exactly once. Since at least one cell is empty, this probe sequence is mathematically guaranteed to encounter an empty cell $\\mathsf{E}$ within at most $m$ steps (i.e., for some $t \\in \\{0, 1, \\dots, m-1\\}$).\n\nWhen the first empty cell $\\mathsf{E}$ is encountered at some index $i_t$, the stopping condition of the scan is met, and the scan terminates.\nFollowing termination, the algorithm proceeds to place the key $k$. The placement rule is: \"If an empty cell $\\mathsf{E}$ is found..., it inserts into the earliest recorded $\\mathsf{T}$ if such exists; otherwise it inserts into that $\\mathsf{E}$.\" This rule guarantees that a valid location is always identified for insertion.\n\nAn insertion can fail only if the table is reported as full. The condition for this is: \"If no empty cell $\\mathsf{E}$ is found after at most $m$ probes...\". However, as established above, this condition can never be met if at least one $\\mathsf{E}$ cell exists in the table.\n\nTherefore, an insertion probe cannot be \"trapped\". The combination of a probe sequence that is guaranteed to cover all table indices and an insertion algorithm that terminates upon finding an empty cell makes such trapping impossible. The answer to the question must be \"No\".\n\n**3. Evaluation of Options**\n\n**A. No. Because $i_0,i_1,\\dots,i_{m-1}$ visits every index exactly once and the insertion reuses the first tombstone $\\mathsf{T}$ if no $\\mathsf{E}$ is encountered, a probe cannot be trapped by any arrangement of tombstones under the stated assumptions.**\nThis option correctly concludes \"No\". The primary reason provided, that the probe sequence $i_0, i_1, \\dots, i_{m-1}$ visits every index exactly once, is the core of the correct argument. This property guarantees that an existing empty cell $\\mathsf{E}$ will be found, which ensures the termination of the search and leads to a successful insertion. The second part of the reason is slightly imprecise in its phrasing (\"if no $\\mathsf{E}$ is encountered\") but doesn't invalidate the main point. The crucial fact is that the search for a slot *will* find an $\\mathsf{E}$ if one exists. Because the conclusion is correct and the fundamental reasoning is sound, this is the best option.\nVerdict: **Correct**.\n\n**B. Yes. Tombstones can align to force the probe to revisit positions before all $m$ distinct indices are seen, creating an infinite loop that prevents termination even with the “remember-first-tombstone” rule.**\nThis option incorrectly concludes \"Yes\". The reasoning is flawed. It claims that tombstones can alter the probe sequence, causing it to \"revisit positions before all $m$ distinct indices are seen\". As explained in point 1, the probe sequence is determined solely by $k$, $h_1$, $h_2$, and $m$, and is completely unaffected by the contents of the table cells. The property that the first $m$ probes $i_0, \\dots, i_{m-1}$ are all distinct is guaranteed by the problem's constraints. Thus, the premise of this option is false.\nVerdict: **Incorrect**.\n\n**C. Yes. Tombstones dynamically change the effective step size by being “skipped,” which can induce a shorter modular cycle that does not intersect any $\\mathsf{E}$ cells.**\nThis option incorrectly concludes \"Yes\". Similar to option B, its reasoning is based on a false premise. The algorithm does not \"skip\" tombstones in a way that modifies the probe sequence itself. For each step $t$, the index $i_t$ is calculated, and the cell at that index is examined. The step size $h_2(k)$ is constant throughout the entire probe for a given key $k$. The state of the table cells does not \"dynamically change the effective step size\". Therefore, the reasoning is fallacious.\nVerdict: **Incorrect**.\n\n**D. Yes. When the load factor $\\alpha$ exceeds some absolute constant $c \\in (0,1)$, cycles of tombstones that trap probes arise with nonzero probability even under the stated assumptions.**\nThis option incorrectly concludes \"Yes\". The reasoning, which invokes the load factor $\\alpha$, is irrelevant to the logical possibility of being \"trapped\". While a high density of tombstones and keys (high effective load factor) will lead to longer average probe lengths and degrade performance, it cannot fundamentally \"trap\" a probe as defined in the problem. The mathematical guarantee that the probe sequence visits every cell, including any existing empty cells, holds regardless of the load factor. The problem is one of possibility, not probability or performance, and the trapping scenario is logically impossible under the stated rules.\nVerdict: **Incorrect**.", "answer": "$$\\boxed{A}$$", "id": "3227213"}, {"introduction": "Having established that tombstones do not fundamentally break a well-designed probe sequence, we now turn to the practical mechanics and costs. This practice [@problem_id:3227311] presents a concrete challenge: construct a specific hash table state containing only tombstones and empty cells, and do so with the minimum possible number of probes. This puzzle requires you to think carefully about the cost of each insertion and deletion, pushing you to devise an optimal sequence of operations that achieves the goal, thereby deepening your intuition for the performance implications of using tombstones.", "problem": "Consider a hash table that uses open addressing with linear probing. The table has size $m=7$ with slots indexed $0,1,2,3,4,5,6$. Keys are integers and the hash function is $h(k)=k \\bmod 7$. A successful deletion marks the deleted slot with a tombstone (denoted $\\dagger$) rather than making it empty; a search for a key starts at $h(k)$ and linearly probes successive indices modulo $7$ until it finds the key or an empty slot, and a tombstone does not terminate the search. An insertion of a key $k$ starts at $h(k)$ and linearly probes until it finds either an empty slot or the first tombstone and stores the key there. The cost model is the standard one for open addressing: each slot inspection during search, insertion, or deletion counts as one probe.\n\nStarting from an empty table, you are allowed to choose any integer keys and perform any sequence of insertions and deletions. Your goal is to reach a final state in which the table has tombstones exactly at slots $2$, $4$, and $6$, and all other slots are empty with no active keys remaining in the table. Under the rules stated above, what is the minimal total number of slot inspections (probes) required over the entire sequence of operations to achieve such a final state? Give your answer as an exact integer with no units.", "solution": "The problem asks for the minimum total number of slot inspections (probes) required to transform an empty hash table of size $m=7$ into a state with tombstones at slots $2$, $4$, and $6$, and all other slots empty. The hash table uses open addressing with linear probing, and the hash function is $h(k) = k \\bmod 7$.\n\nFirst, let us analyze the process of creating a single tombstone. A tombstone is created at a slot $i$ by first inserting a key into that slot and subsequently deleting that same key. This requires a sequence of at least one insertion and one deletion operation.\n\nThe cost of any operation (insertion, search, or deletion) is defined as the number of slots inspected. Since every operation must inspect at least one slot, the cost of any single operation is at least $1$. Therefore, the minimum cost to create one tombstone is at least $1$ (for insertion) $+ 1$ (for deletion) $= 2$ probes.\n\nOur goal is to create three distinct tombstones at slots $2$, $4$, and $6$. Since each tombstone requires at least two probes to create, and the operations for creating one do not eliminate the need for operations for another, the total number of probes for creating three tombstones must be at least $3 \\times 2 = 6$. This establishes a lower bound on the total cost.\n\nNow, we must determine if this lower bound of $6$ probes is achievable. To do this, we need to construct a sequence of operations that achieves the target state and has a total cost of exactly $6$. A total cost of $6$ requires that each of the three necessary insertions and three necessary deletions costs exactly $1$ probe each.\n\nLet's analyze the cost of an insertion and a deletion.\nThe cost of inserting a key $k$ is the number of slots probed starting from index $h(k)$ until an available slot is found. An available slot is defined as either an empty slot or the first slot containing a tombstone. The cost is minimized to $1$ if the slot at index $h(k)$ is itself available.\nThe cost of deleting a key $k$ that resides at slot $i$ is the number of slots probed starting from $h(k)$ until slot $i$ is reached. The cost is minimized to $1$ if the key $k$ was placed such that $h(k)=i$.\n\nTo achieve a cost of $1$ for both insertion and deletion for a tombstone at slot $i$, we should choose a key $k$ such that $h(k)=i$. Let's devise a sequence of operations based on this principle. We need to create tombstones at slots $i_1=2$, $i_2=4$, and $i_3=6$.\n\nWe can choose three distinct keys, $k_1, k_2, k_3$, such that their hash values correspond to the desired tombstone locations. Let us choose $k_1=2$, $k_2=4$, and $k_3=6$.\n$h(k_1) = 2 \\bmod 7 = 2$\n$h(k_2) = 4 \\bmod 7 = 4$\n$h(k_3) = 6 \\bmod 7 = 6$\n\nConsider the following sequence of operations, starting with an empty table.\n\n1.  **Insert key $k_1=2$**: The probe starts at $h(2)=2$. Slot $2$ is empty. The key $2$ is placed in slot $2$.\n    Number of probes: $1$.\n    Table state: `[ , , 2, , , , ]`.\n    Cumulative probes: $1$.\n\n2.  **Insert key $k_2=4$**: The probe starts at $h(4)=4$. Slot $4$ is empty. The key $4$ is placed in slot $4$.\n    Number of probes: $1$.\n    Table state: `[ , , 2, , 4, , ]`.\n    Cumulative probes: $1+1=2$.\n\n3.  **Insert key $k_3=6$**: The probe starts at $h(6)=6$. Slot $6$ is empty. The key $6$ is placed in slot $6$.\n    Number of probes: $1$.\n    Table state: `[ , , 2, , 4, , 6]`.\n    Cumulative probes: $2+1=3$.\n\nAt this point, all necessary keys are in the table. Now we delete them to create tombstones.\n\n4.  **Delete key $k_1=2$**: The search starts at $h(2)=2$. The key $2$ is found at the first probed slot, index $2$. The slot is marked with a tombstone ($\\dagger$).\n    Number of probes: $1$.\n    Table state: `[ , , †, , 4, , 6]`.\n    Cumulative probes: $3+1=4$.\n\n5.  **Delete key $k_2=4$**: The search starts at $h(4)=4$. The key $4$ is found at slot $4$. The slot is marked with a tombstone.\n    Number of probes: $1$.\n    Table state: `[ , , †, , †, , 6]`.\n    Cumulative probes: $4+1=5$.\n\n6.  **Delete key $k_3=6$**: The search starts at $h(6)=6$. The key $6$ is found at slot $6$. The slot is marked with a tombstone.\n    Number of probes: $1$.\n    Table state: `[ , , †, , †, , †]`.\n    Cumulative probes: $5+1=6$.\n\nThe final state of the table has tombstones at slots $2$, $4$, and $6$, with all other slots ($0, 1, 3, 5$) remaining empty. This perfectly matches the problem's requirement. The total number of probes for this sequence is $6$.\n\nSince we have established a lower bound of $6$ probes and have demonstrated a sequence of operations that achieves this cost, the minimal total number of probes must be $6$. Any other choice of keys or order of operations could not result in a lower cost. For instance, using a key $k$ that hashes to a value different from its final position $i$ (i.e., $h(k) \\neq i$) would result in a probe count greater than $1$ for both insertion (due to collisions or an initially occupied slot) and deletion, thus increasing the total cost. The specific insertion rule (stopping at the first tombstone) does not alter this optimal strategy, as the minimal-cost path involves inserting into empty slots.", "answer": "$$\\boxed{6}$$", "id": "3227311"}, {"introduction": "Our final practice moves from specific operational sequences to a more abstract, theoretical analysis of worst-case scenarios. Here [@problem_id:3227267], we investigate the limits of a hash table that uses quadratic probing and becomes populated with tombstones that cannot be reused for new insertions. This problem asks you to determine the maximum number of tombstones the table can hold while still guaranteeing that any new insertion will succeed. To find the answer, you must analyze the mathematical structure of the quadratic probe sequence itself, revealing the precise threshold at which the system's integrity breaks down.", "problem": "A hash table of size $m$ uses open addressing with quadratic probing defined by the probe sequence\n$$\nh(k,i) \\equiv \\big(h(k,0) + i^2\\big) \\bmod m \\quad \\text{for } i=0,1,2,\\dots,\n$$\nwhere $m$ is an odd prime and $h(k,0) \\in \\{0,1,\\dots,m-1\\}$ is the base address of key $k$. Deletion is implemented by placing a tombstone in the deleted cell. During search, tombstones are treated as occupied (the probe continues), and during insertion, the implementation only inserts into cells that are truly empty; tombstone cells are not reused until a periodic rebuilding is performed.\n\nAssume at some time there are exactly $T$ tombstones and $m-T$ truly empty cells in the table (no live keys). An insertion of a key $k$ succeeds if and only if its probe sequence encounters at least one truly empty cell.\n\nDerive, from first principles, the largest integer $T_{\\max}(m)$ such that, no matter how the $T_{\\max}(m)$ tombstones are placed in the table and no matter which key is inserted (that is, for any base address $h(k,0)$), the insertion is guaranteed to succeed. Your final answer must be a closed-form expression in $m$ and must not include an inequality or an equation.", "solution": "The problem asks for the largest integer $T_{\\max}(m)$ representing a quantity of tombstones, such that an insertion into a hash table of size $m$ is guaranteed to succeed, regardless of the placement of these $T_{\\max}(m)$ tombstones and the initial hash value of the key being inserted.\n\nAn insertion fails if and only if the probe sequence for the key to be inserted consists entirely of locations occupied by tombstones. An insertion is guaranteed to succeed if it is impossible for its probe sequence to consist entirely of tombstones.\n\nThe hash table uses open addressing with quadratic probing. The size of the table is $m$, which is an odd prime. The probe sequence for a key $k$ with a base address $h(k,0) = h_0$ is defined by the sequence of indices:\n$$h(k,i) = (h_0 + i^2) \\bmod m, \\quad \\text{for } i=0, 1, 2, \\dots$$\nLet $S_{h_0}$ be the set of distinct table indices visited by this probe sequence. The locations visited are determined by the set of offsets $\\{i^2 \\bmod m\\}$ added to the base address $h_0$. We must first determine the size of this set, $|S_{h_0}|$.\n\nThe size of $S_{h_0}$ is equal to the number of distinct values of $(h_0 + i^2) \\bmod m$. Since adding $h_0$ and taking the result modulo $m$ is just a cyclic shift of the indices, the size of the set of visited locations is equal to the size of the set of unique offset values, $\\{i^2 \\bmod m \\text{ for } i=0, 1, 2, \\dots\\}$.\n\nWe count the number of distinct values of $i^2 \\bmod m$ for $i \\in \\{0, 1, \\dots, m-1\\}$.\n1. For $i=0$, we have $0^2 \\equiv 0 \\pmod m$. This gives one unique value.\n2. For $i \\in \\{1, 2, \\dots, m-1\\}$, we examine when two squares are congruent modulo $m$. Let $x, y \\in \\{1, 2, \\dots, m-1\\}$. The congruence $x^2 \\equiv y^2 \\pmod m$ is equivalent to $x^2 - y^2 \\equiv 0 \\pmod m$, which can be factored as $(x-y)(x+y) \\equiv 0 \\pmod m$.\nSince $m$ is a prime number, this implies that $m$ must divide $(x-y)$ or $m$ must divide $(x+y)$.\n- If $m | (x-y)$, since $x, y \\in \\{1, \\dots, m-1\\}$, it must be that $x=y$.\n- If $m | (x+y)$, since $2 \\le x+y \\le 2(m-1)$, it must be that $x+y=m$ or $x+y=2m$. The latter is only possible if $x=y=m$, which is not in our range. So, $x+y=m$.\n\nThis means that for any $x \\in \\{1, \\dots, m-1\\}$, its square $x^2 \\pmod m$ is the same as the square of $y=m-x$, since $(m-x)^2 = m^2 - 2mx + x^2 \\equiv x^2 \\pmod m$.\nThe non-zero values $\\{1, \\dots, m-1\\}$ can be partitioned into $\\frac{m-1}{2}$ pairs of the form $\\{x, m-x\\}$. For example, $\\{1, m-1\\}, \\{2, m-2\\}, \\dots, \\{ \\frac{m-1}{2}, \\frac{m+1}{2} \\}$. All elements in each pair produce the same square modulo $m$.\nThe squares of $x$ for $x \\in \\{1, 2, \\dots, \\frac{m-1}{2}\\}$ are all distinct modulo $m$. If $x^2 \\equiv y^2 \\pmod m$ for $1 \\le x < y \\le \\frac{m-1}{2}$, then $y-x \\not\\equiv 0 \\pmod m$ and $y+x \\not\\equiv 0 \\pmod m$, since $2 < x+y < m-1 < m$, which leads to a contradiction.\nThus, there are exactly $\\frac{m-1}{2}$ distinct non-zero values for $i^2 \\pmod m$. These are the quadratic residues modulo $m$.\n\nCombining the single value $0$ (from $i=0$) with the $\\frac{m-1}{2}$ non-zero values, the total number of distinct offsets $i^2 \\pmod m$ is $1 + \\frac{m-1}{2} = \\frac{m+1}{2}$.\nTherefore, any probe sequence for quadratic probing with an odd prime modulus $m$ visits exactly $|S_{h_0}| = \\frac{m+1}{2}$ distinct cells.\n\nAn insertion is guaranteed to succeed if, for any placement of $T$ tombstones and for any starting hash $h_0$, the probe sequence $S_{h_0}$ is not a subset of the set of tombstone locations. The table contains only tombstones and empty cells. If a location in the probe sequence is not a tombstone, it must be empty, and the insertion succeeds.\n\nLet $N_S = \\frac{m+1}{2}$ be the number of cells in any probe sequence.\nLet $T$ be the number of tombstones in the table.\nFor an insertion to fail, all $N_S$ cells of its probe sequence must be occupied by tombstones. This is only possible if the number of tombstones is at least the number of cells in the probe sequence, i.e., $T \\ge N_S$.\n\nConversely, if the number of tombstones $T$ is strictly less than the number of cells in any probe sequence, $T < N_S$, then it is impossible for all cells of a probe sequence to be tombstones. By the pigeonhole principle, if a probe sequence visits $N_S$ distinct cells, and there are only $T < N_S$ tombstones in the table, at least one of the visited cells must not be a tombstone. Since the table contains no other keys, this cell must be empty. Therefore, the insertion is guaranteed to succeed.\n\nThe condition for guaranteed success is $T < \\frac{m+1}{2}$.\nSince $T$ must be an integer, the largest integer $T$ satisfying this inequality is\n$$T = \\left\\lfloor \\frac{m+1}{2} - \\epsilon \\right\\rfloor$$\nwhere $\\epsilon$ is an infinitesimally small positive number. Since $m$ is an odd prime, $m+1$ is an even integer, so $\\frac{m+1}{2}$ is an integer. The largest integer strictly less than $\\frac{m+1}{2}$ is $\\frac{m+1}{2} - 1$.\n$$T_{\\max}(m) = \\frac{m+1}{2} - 1 = \\frac{m+1-2}{2} = \\frac{m-1}{2}$$\n\nTo confirm this is the maximum possible value, we must show that for $T = T_{\\max}(m) + 1$, success is not guaranteed.\nLet $T = \\frac{m-1}{2} + 1 = \\frac{m+1}{2}$.\nWith this many tombstones, we can construct a scenario where an insertion fails. Choose an arbitrary base address, say $h_0=0$. The probe sequence $S_0$ visits $\\frac{m+1}{2}$ distinct cells. We can place the $T = \\frac{m+1}{2}$ tombstones precisely in these $\\frac{m+1}{2}$ locations. Then, an insertion of a key $k$ with $h(k,0)=0$ will fail, as its entire probe sequence consists of tombstones.\nSince there exists a placement of tombstones and a choice of key for which insertion fails when $T=\\frac{m+1}{2}$, success is not guaranteed for this value of $T$.\n\nTherefore, the largest integer $T_{\\max}(m)$ for which insertion is guaranteed to succeed is $\\frac{m-1}{2}$.", "answer": "$$\\boxed{\\frac{m-1}{2}}$$", "id": "3227267"}]}