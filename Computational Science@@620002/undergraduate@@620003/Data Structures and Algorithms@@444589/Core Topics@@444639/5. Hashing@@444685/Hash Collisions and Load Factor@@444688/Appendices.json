{"hands_on_practices": [{"introduction": "To begin our practical exploration, we start with the most fundamental question: how full does a hash table need to be before a collision becomes likely? This exercise [@problem_id:3238298] strips the problem down to its essence, asking you to derive the precise load factor at which the probability of the very next key causing the *first-ever* collision exceeds $0.5$. The result provides a powerful and intuitive benchmark for understanding why maintaining a low load factor is critical for performance.", "problem": "Consider a hash table with $m$ buckets that uses a hash function satisfying the Simple Uniform Hashing Assumption (SUHA), meaning each key hashes independently and uniformly at random to one of the $m$ buckets. The table is initially empty. After inserting $n$ distinct keys, suppose that no collision has occurred so far, so all $n$ keys occupy $n$ distinct buckets. Let the current load factor be $\\alpha = \\frac{n}{m}$. You now insert one additional key.\n\nUsing only the SUHA and the definitions of collision and load factor, derive the exact value of the load factor $\\alpha$ at which the probability that this next insertion causes the first collision is strictly greater than $0.5$. Express your final answer as a single exact number. No rounding is required.", "solution": "The problem asks for the specific value of the load factor $\\alpha$ at which the probability that a new key insertion causes the first-ever collision in a hash table is strictly greater than $0.5$. We begin by validating the problem statement.\n\n### Step 1: Extract Givens\n- A hash table has $m$ buckets.\n- The hash function adheres to the Simple Uniform Hashing Assumption (SUHA): each key is hashed independently and uniformly at random to one of the $m$ buckets.\n- The table initially contains $n$ distinct keys.\n- A key condition is that no collision has occurred among these $n$ keys. This implies that these $n$ keys occupy $n$ distinct buckets.\n- The load factor is defined as $\\alpha = \\frac{n}{m}$.\n- A new, additional key is to be inserted.\n- The objective is to find the value of $\\alpha$ for which the probability that this new insertion causes a collision is strictly greater than $0.5$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is scientifically grounded in the theory of data structures and algorithms, specifically the analysis of hashing. It is well-posed, objective, and internally consistent. The crucial phrase \"suppose that no collision has occurred so far\" sets a definite state for the system before the next insertion, making the problem solvable. It does not contain any scientific flaws, ambiguities, or contradictions. The problem is therefore deemed valid.\n\n### Step 3: Derivation of the Solution\nLet us formalize the state of the hash table and the probabilistic event in question.\n\nThe problem states that after the insertion of $n$ distinct keys, no collisions have occurred. This is a given condition, not a probabilistic event to be analyzed. This statement establishes the state of our system: there are exactly $n$ buckets that are occupied, each by a single key, and consequently, there are $m-n$ buckets that are empty.\n\nWe are now about to insert one additional, distinct key. Let us denote the event that this insertion causes a collision by $C$. According to the Simple Uniform Hashing Assumption (SUHA), this new key will be mapped to any of the $m$ buckets with a uniform probability of $\\frac{1}{m}$.\n\nA collision will occur if and only if this new key is hashed to a bucket that is already occupied. From our system state, we know that there are exactly $n$ occupied buckets.\n\nThe total number of possible outcomes for the placement of the new key is the total number of buckets, which is $m$. The number of \"favorable\" outcomes (i.e., outcomes that cause a collision) is the number of occupied buckets, which is $n$.\n\nThe probability of event $C$, denoted $P(C)$, is the ratio of the number of favorable outcomes to the total number of possible outcomes:\n$$P(C) = \\frac{\\text{Number of occupied buckets}}{\\text{Total number of buckets}}$$\n$$P(C) = \\frac{n}{m}$$\n\nThe problem defines the load factor of the hash table as $\\alpha = \\frac{n}{m}$. Substituting this definition into our expression for the probability of collision, we find a direct relationship:\n$$P(C) = \\alpha$$\n\nThe problem asks for the value of the load factor $\\alpha$ at which the probability of this collision is strictly greater than $0.5$. This can be expressed as the following inequality:\n$$P(C) > 0.5$$\n\nSubstituting $P(C) = \\alpha$, we get:\n$$\\alpha > 0.5$$\n\nThis inequality defines a range of possible values for the load factor. However, the problem asks for \"**the** exact value of the load factor $\\alpha$ **at which** the probability... is strictly greater than $0.5$\". This phrasing is standard in mathematics and physics for requesting the threshold or boundary point where a condition begins to be met. The set of solutions is the interval $(\\alpha_0, 1]$, where $\\alpha_0 = 0.5$. The value at which this condition becomes true is the infimum of this set, which is the boundary value itself. At $\\alpha = 0.5$, the probability is exactly $0.5$. For any value of $\\alpha$ infinitesimally greater than $0.5$, the condition $\\alpha > 0.5$ is satisfied. Therefore, the threshold value is $0.5$.", "answer": "$$\\boxed{0.5}$$", "id": "3238298"}, {"introduction": "While our first practice assumed ideal random hashing, real-world hash functions are deterministic algorithms that can have unexpected patterns. This next challenge [@problem_id:3238328] moves from probability to practice by asking you to become a \"collision hunter.\" You will implement the popular djb2 string hash function and systematically search for a set of distinct keys that all map to the same bucket, demonstrating firsthand how collisions can be deliberately engineered and why robust collision resolution is not merely an option, but a necessity.", "problem": "You are given a specific family of string hash functions and a precise rule for mapping a hash value to a bucket index. Your task is to algorithmically construct, for several parameter settings, a set of distinct printable keys that all land in the same bucket, and to compute the load factor at the earliest moment when such a collision of a required size first occurs.\n\nDefinitions and assumptions:\n- The hash function is the classic djb2 function. For a finite string $s = c_1 c_2 \\dots c_n$ of characters, define the hash $H(s)$ iteratively by $h_0 = 5381$ and, for each character $c_i$, $h_i = 33 \\cdot h_{i-1} + \\operatorname{ord}(c_i)$, where $\\operatorname{ord}(c_i)$ is the American Standard Code for Information Interchange (ASCII) code of the character $c_i$. The final hash is $H(s) = h_n$ computed with unbounded integer arithmetic (that is, without overflow).\n- The bucket index for a table of size $M$ is $B(s) = H(s) \\bmod M$, which is an integer in $\\{0,1,\\dots,M-1\\}$.\n- The load factor $\\alpha$ after inserting $N$ keys into a table of size $M$ is $\\alpha = N / M$ and must be reported as a decimal number (not a percentage).\n\nConstruction rule to follow for each test case:\n- The alphabet is a given finite set of distinct printable characters. A key is any non-empty string over this alphabet.\n- Enumerate keys in non-decreasing length order, and within the same length in lexicographic order induced by the alphabet. Specifically, for length $1$ enumerate all strings of length $1$ in lexicographic order; then for length $2$, and so on.\n- Insert keys one by one (conceptually) into an initially empty hash table of $M$ buckets using bucket indices $B(s)$, counting how many keys have landed in each bucket so far.\n- Stop at the earliest time that some bucket reaches a count of at least $k$, where $k$ is the target collision multiplicity for the test case. At that exact stopping time:\n  - Let $L$ be the maximum length among the $k$ distinct keys that landed in that bucket first (this will equal the current enumerated length at which the stopping condition is reached).\n  - Let $N$ be the total number of keys enumerated up to and including the key that caused the stopping condition.\n  - Let $\\alpha = N / M$ be the load factor at stopping time, expressed as a decimal number rounded to six decimal places.\n  - Let $b$ be the bucket index (in $\\{0,1,\\dots,M-1\\}$) that first reached occupancy $k$.\n\nYour program must implement the above exactly and, for each test case, return the triple $[L,\\alpha,b]$.\n\nFundamental base you must use:\n- The definition of the djb2 hash given above, the arithmetic of modular reduction to obtain $B(s)$, and the definition of load factor $\\alpha = N / M$.\n\nTest suite:\n- Case A: $M = 16$, $k = 3$, alphabet $= \\text{\"ab\"}$.\n- Case B: $M = 32$, $k = 4$, alphabet $= \\text{\"abc\"}$.\n- Case C: $M = 1$, $k = 5$, alphabet $= \\text{\"ab\"}$.\n- Case D: $M = 64$, $k = 3$, alphabet $= \\text{\"abcd\"}$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a list of lists, where each inner list corresponds to a test case result $[L,\\alpha,b]$ in the same order as the test suite. The load factor $\\alpha$ must be rounded to six decimal places. For example: $[[L_1,\\alpha_1,b_1],[L_2,\\alpha_2,b_2],[L_3,\\alpha_3,b_3],[L_4,\\alpha_4,b_4]]$.", "solution": "The problem statement is evaluated as valid. It is scientifically grounded in the field of computer science, specifically concerning hash tables and collision analysis. The definitions of the djb2 hash function, bucket indexing, key generation, and stopping conditions are precise, unambiguous, and self-contained. This forms a well-posed problem with a unique, deterministically computable solution for each test case. There are no contradictions, undefined terms, or violations of mathematical or logical principles. The task is a direct implementation of a specified algorithm.\n\nThe solution is found by a direct simulation of the process described. For each test case, specified by the hash table size $M$, target collision multiplicity $k$, and character alphabet, we perform the following steps:\n\n1.  Initialize a data structure to maintain the counts of keys in each of the $M$ buckets. An integer array of size $M$, initialized to all zeros, is suitable. We can denote this array as `counts`, where `counts`[$j$] stores the number of keys mapped to bucket $j$.\n\n2.  Initialize the total number of enumerated keys, $N$, to $0$.\n\n3.  Begin generating keys in the specified order: non-decreasing length, and lexicographically for a fixed length. This starts with all keys of length $L=1$, followed by all keys of length $L=2$, and so on.\n\n4.  For each generated key string $s = c_1 c_2 \\dots c_L$:\n    a. Increment the total key counter $N$.\n    b. Compute the djb2 hash value, $H(s)$. The process is defined by the recurrence relation:\n    $$h_0 = 5381$$\n    $$h_i = (33 \\cdot h_{i-1}) + \\operatorname{ord}(c_i) \\quad \\text{for } i \\in \\{1, 2, \\dots, L\\}$$\n    The final hash is $H(s) = h_L$. The computation must use integer arithmetic that does not overflow, which is standard for languages like Python.\n\n    c. Determine the bucket index $b$ using the modular reduction rule:\n    $$b = H(s) \\bmod M$$\n    The result $b$ will be an integer in the set $\\{0, 1, \\dots, M-1\\}$.\n\n    d. Increment the count for the determined bucket: `counts`[$b$] = `counts`[$b$] $+ 1$.\n\n    e. Check if the stopping condition is met. The process terminates if `counts`[$b$] becomes equal to the target multiplicity $k$.\n\n5.  Upon termination, we have found the first bucket to accumulate $k$ keys. At this exact moment, we record the required triple $[L, \\alpha, b]$:\n    -   $L$ is the length of the key whose insertion triggered the stop condition.\n    -   $N$ is the total number of keys enumerated up to this point.\n    -   The load factor is $\\alpha = N / M$. This value is calculated as a floating-point number and then rounded to six decimal places as specified.\n    -   $b$ is the index of the bucket that reached the count of $k$.\n\nThis procedure is deterministic and is repeated for each of the four test cases provided:\n-   Case A: ($M=16$, $k=3$, alphabet=\"ab\")\n-   Case B: ($M=32$, $k=4$, alphabet=\"abc\")\n-   Case C: ($M=1$, $k=5$, alphabet=\"ab\"): This is a special case where $M=1$, so all keys hash to bucket $0$. The problem reduces to finding the $5$-th key in the enumeration sequence.\n-   Case D: ($M=64$, $k=3$, alphabet=\"abcd\")\n\nThe implementation will use a loop for the key length $L$, and a nested mechanism (such as `itertools.product` in Python) to generate all strings of that length before proceeding to length $L+1$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport itertools\n\ndef solve():\n    \"\"\"\n    Solves the hash collision problem for the given test suite.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (M, k, alphabet)\n        (16, 3, \"ab\"),\n        (32, 4, \"abc\"),\n        (1, 5, \"ab\"),\n        (64, 3, \"abcd\"),\n    ]\n\n    results = []\n    for case in test_cases:\n        m, k, alphabet = case\n        result = find_collision(m, k, alphabet)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    # The str() representation of a list is '[item1, item2, ...]'\n    # Joining these with a comma and wrapping in brackets gives the desired output.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef djb2_hash(s: str) -> int:\n    \"\"\"\n    Computes the djb2 hash for a given string s.\n    Python's integers handle arbitrary precision, satisfying the\n    \"unbounded integer arithmetic\" requirement.\n    \"\"\"\n    h = 5381\n    for char in s:\n        # The operation is h = (h * 33) + ord(char)\n        h = (h << 5) + h + ord(char)\n    return h\n\ndef find_collision(m: int, k: int, alphabet: str) -> list:\n    \"\"\"\n    Finds the first occurrence of k collisions in a single bucket for the given parameters.\n\n    Args:\n        m: The size of the hash table.\n        k: The target collision multiplicity.\n        alphabet: The set of characters to build keys from.\n\n    Returns:\n        A list containing [L, alpha, b] where:\n        L is the length of the string that caused the k-th collision.\n        alpha is the load factor at that time, rounded to 6 decimal places.\n        b is the bucket index with k collisions.\n    \"\"\"\n    bucket_counts = np.zeros(m, dtype=int)\n    num_keys_total = 0\n    current_length = 1\n\n    while True:\n        # Generate all keys of the current length in lexicographic order.\n        # itertools.product ensures this order.\n        keys_of_length_l = itertools.product(alphabet, repeat=current_length)\n\n        for key_tuple in keys_of_length_l:\n            key_str = \"\".join(key_tuple)\n            num_keys_total += 1\n\n            # Calculate hash and bucket index\n            hash_val = djb2_hash(key_str)\n            bucket_index = hash_val % m\n\n            # Update bucket count and check stopping condition\n            bucket_counts[bucket_index] += 1\n            if bucket_counts[bucket_index] >= k:\n                # Stopping condition met. Calculate results.\n                load_factor = num_keys_total / m\n                alpha_rounded = round(load_factor, 6)\n                \n                return [current_length, alpha_rounded, bucket_index]\n        \n        # If no collision found, move to the next length\n        current_length += 1\n\nsolve()\n```", "id": "3238328"}, {"introduction": "Knowing that collisions are inevitable—and sometimes even engineered—the focus shifts to designing robust resolution strategies. This final practice [@problem_id:3238374] delves into the mechanics of quadratic probing, a widely used open-addressing technique. You will analyze how a poor choice of table size can lead to catastrophic failure, and then use principles of modular arithmetic to prove why choosing a prime table size, combined with keeping the load factor below a certain threshold, provides a mathematical guarantee of success, showcasing the power of theory-informed design.", "problem": "An open addressing hash table of size $m$ stores keys using quadratic probing. The probe function is defined by\n$$\nh(k,i) \\equiv \\big(h_{0}(k) + c_{1} i + c_{2} i^{2}\\big) \\bmod m,\n$$\nwhere $h_{0}(k)$ is a fixed base hash function, $i \\in \\{0,1,2,\\dots\\}$ is the probe index, and $c_{1},c_{2}$ are fixed integers with $c_{2} \\neq 0$. Collisions are resolved by probing successive positions $h(k,0),h(k,1),h(k,2),\\dots$ until an empty slot is found.\n\nYou will analyze two regimes to understand when quadratic probing can enter cycles versus when it is guaranteed to terminate.\n\n1) Pathology under a poorly chosen table size. Let $m=16$, $c_{1}=0$, $c_{2}=1$, so that $h(k,i) \\equiv \\big(h_{0}(k) + i^{2}\\big) \\bmod 16$. Consider a sequence of distinct keys $k_{1},k_{2},\\dots$ such that $h_{0}(k_{j}) \\equiv 0 \\bmod 16$ for all $j$.\n- Construct explicitly the first $5$ distinct probe positions taken by insertions of $k_{1},k_{2},k_{3},k_{4},k_{5}$ (each insertion starts at $i=0$ and probes until it finds an empty slot). Explain why insertion of $k_{5}$ does not terminate, even though the table is not full.\n\n2) Guarantee under a proper table size. Now let $m=p$ be an odd prime, and keep $c_{1}=0$, $c_{2}=1$, so $h(k,i) \\equiv \\big(h_{0}(k) + i^{2}\\big) \\bmod p$. Use only the following foundational facts to reason from first principles:\n- For any prime $p$, modular arithmetic modulo $p$ forms a field.\n- In a field, a nonzero polynomial of degree $d$ has at most $d$ roots.\n- The load factor is $\\alpha = n/m$, where $n$ is the number of stored keys.\n\nProve that for any key $k$, the first $\\frac{p+1}{2}$ probe positions $h(k,0),h(k,1),\\dots,h\\!\\left(k,\\frac{p-1}{2}\\right)$ are pairwise distinct. Deduce a tight threshold $\\alpha^{\\star} \\in (0,1)$ such that if the current load factor satisfies $\\alpha < \\alpha^{\\star}$, then insertion by quadratic probing is guaranteed to terminate (that is, to find an empty slot) for every key $k$, regardless of $h_{0}(k)$. Provide your final answer for $\\alpha^{\\star}$ as an exact fraction.\n\nYour final answer must be a single real number written as an exact fraction. Do not include any units, and do not round.", "solution": "The problem is evaluated as valid, as it is self-contained, scientifically grounded in the theory of algorithms and discrete mathematics, and well-posed. The problem consists of two parts: analyzing a pathological case of quadratic probing and then proving a performance guarantee under specific conditions.\n\nPart 1: Pathology of quadratic probing with $m=16$.\n\nThe hash table size is $m=16$. The probing function is given by $h(k,i) \\equiv \\big(h_{0}(k) + c_{1} i + c_{2} i^{2}\\big) \\bmod m$, with parameters $c_{1}=0$ and $c_{2}=1$. The base hash for the sequence of keys is $h_{0}(k_{j}) \\equiv 0 \\bmod 16$. The probe function simplifies to $h(k_{j},i) \\equiv i^{2} \\bmod 16$.\n\nWe construct the sequence of insertions:\n1.  **Insertion of $k_{1}$**:\n    The probe sequence starts with $i=0$.\n    $h(k_{1}, 0) = 0^{2} \\bmod 16 = 0$. Slot $0$ is empty. $k_{1}$ is inserted at position $0$.\n    The set of occupied slots is $\\{0\\}$.\n\n2.  **Insertion of $k_{2}$**:\n    Probe $i=0$: $h(k_{2}, 0) = 0^{2} \\bmod 16 = 0$. Slot $0$ is occupied.\n    Probe $i=1$: $h(k_{2}, 1) = 1^{2} \\bmod 16 = 1$. Slot $1$ is empty. $k_{2}$ is inserted at position $1$.\n    The set of occupied slots is $\\{0, 1\\}$.\n\n3.  **Insertion of $k_{3}$**:\n    Probe $i=0$: $h(k_{3}, 0) = 0$. Occupied.\n    Probe $i=1$: $h(k_{3}, 1) = 1$. Occupied.\n    Probe $i=2$: $h(k_{3}, 2) = 2^{2} \\bmod 16 = 4$. Slot $4$ is empty. $k_{3}$ is inserted at position $4$.\n    The set of occupied slots is $\\{0, 1, 4\\}$.\n\n4.  **Insertion of $k_{4}$**:\n    Probe $i=0$: $h(k_{4}, 0) = 0$. Occupied.\n    Probe $i=1$: $h(k_{4}, 1) = 1$. Occupied.\n    Probe $i=2$: $h(k_{4}, 2) = 4$. Occupied.\n    Probe $i=3$: $h(k_{4}, 3) = 3^{2} \\bmod 16 = 9$. Slot $9$ is empty. $k_{4}$ is inserted at position $9$.\n    The set of occupied slots is $\\{0, 1, 4, 9\\}$.\n\nThe first $5$ distinct probe positions taken by these insertions are, in order, $0, 1, 4, 9$. The fifth key requires finding a fifth distinct free slot.\nAt this point, the table contains $4$ elements at positions $\\{0, 1, 4, 9\\}$. The load factor is $\\alpha = \\frac{4}{16} = \\frac{1}{4}$. The table is not full.\n\n5.  **Insertion of $k_{5}$**:\n    The probe sequence for $k_{5}$ is:\n    $h(k_{5}, 0) = 0^{2} \\bmod 16 = 0$. Occupied.\n    $h(k_{5}, 1) = 1^{2} \\bmod 16 = 1$. Occupied.\n    $h(k_{5}, 2) = 2^{2} \\bmod 16 = 4$. Occupied.\n    $h(k_{5}, 3) = 3^{2} \\bmod 16 = 9$. Occupied.\n    $h(k_{5}, 4) = 4^{2} \\bmod 16 = 16 \\bmod 16 = 0$. Occupied.\n    $h(k_{5}, 5) = 5^{2} \\bmod 16 = 25 \\bmod 16 = 9$. Occupied.\n    $h(k_{5}, 6) = 6^{2} \\bmod 16 = 36 \\bmod 16 = 4$. Occupied.\n    $h(k_{5}, 7) = 7^{2} \\bmod 16 = 49 \\bmod 16 = 1$. Occupied.\n    $h(k_{5}, 8) = 8^{2} \\bmod 16 = 64 \\bmod 16 = 0$. Occupied.\n    The sequence of offsets $i^{2} \\bmod 16$ is periodic. The values generated are $0, 1, 4, 9, 0, 9, 4, 1, 0, \\dots$. The set of all possible probe positions for any key with $h_0(k) \\equiv 0 \\bmod 16$ is $\\{0, 1, 4, 9\\}$.\n    Since these four slots are already occupied by $k_{1}, k_{2}, k_{3}, k_{4}$, the probing for $k_{5}$ enters an infinite cycle through these four positions. It never probes any other slot and thus never finds an empty one. The insertion of $k_{5}$ does not terminate, even though only $4$ of the $16$ table slots are filled.\nThis failure is due to the algebraic structure of integers modulo $16$. $\\mathbb{Z}_{16}$ is a ring with zero divisors (e.g., $4 \\cdot 4 \\equiv 0 \\bmod 16$), not a field, which causes the probe sequence to have a very short period.\n\nPart 2: Guarantee of termination with prime table size $m=p$.\n\nThe hash table size is $m=p$, where $p$ is an odd prime. The probe function is $h(k,i) \\equiv \\big(h_{0}(k) + i^{2}\\big) \\bmod p$.\n\nFirst, we prove that for any key $k$, the first $\\frac{p+1}{2}$ probe positions, corresponding to $i \\in \\{0, 1, \\dots, \\frac{p-1}{2}\\}$, are pairwise distinct.\nAssume for contradiction that two distinct indices $i, j$ in this range produce the same probe position. Let $0 \\le i < j \\le \\frac{p-1}{2}$.\nThe condition is $h(k,i) \\equiv h(k,j) \\bmod p$.\n$$h_{0}(k) + i^{2} \\equiv h_{0}(k) + j^{2} \\pmod{p}$$\n$$i^{2} \\equiv j^{2} \\pmod{p}$$\n$$i^{2} - j^{2} \\equiv 0 \\pmod{p}$$\nThis means that $i$ and $j$ are roots of the polynomial $P(x) = x^{2} - j^{2}$ in the field of integers modulo $p$, $\\mathbb{Z}_{p}$. According to the provided fact, a nonzero polynomial of degree $d$ has at most $d$ roots in a field. Here, $d=2$. We can find the roots by factoring the polynomial:\n$$P(x) = (x-j)(x+j)$$\nSince we are in a field, $(x-j)(x+j) \\equiv 0 \\pmod p$ implies either $x-j \\equiv 0 \\pmod p$ or $x+j \\equiv 0 \\pmod p$.\nThe roots are thus $x \\equiv j \\pmod p$ and $x \\equiv -j \\pmod p$.\nOur assumption implies that $i$ must be equal to one of these roots modulo $p$.\n\nCase 1: $i \\equiv j \\pmod p$.\nSince $0 \\le i < j \\le \\frac{p-1}{2}$, their difference $j-i$ satisfies $0 < j-i \\le \\frac{p-1}{2}$. For $i \\equiv j \\pmod p$, $j-i$ must be a multiple of $p$. But there are no positive multiples of $p$ in the interval $(0, \\frac{p-1}{2}]$. This is a contradiction.\n\nCase 2: $i \\equiv -j \\pmod p$.\nThis means $i+j$ is a multiple of $p$. Since $i$ and $j$ are non-negative and not both zero (as $i<j$), their sum $i+j$ is positive. The smallest positive multiple of $p$ is $p$. However, the indices $i$ and $j$ are bounded: $i \\le \\frac{p-1}{2}-1$ and $j \\le \\frac{p-1}{2}$. The maximum possible sum is $i+j \\le \\left(\\frac{p-1}{2}-1\\right) + \\frac{p-1}{2} = p-2$. More simply, $0 \\le i < j \\le \\frac{p-1}{2}$ implies $1 \\le i+j \\le (\\frac{p-3}{2}) + (\\frac{p-1}{2}) = p-2$.\nThe sum $i+j$ is strictly between $0$ and $p$, so it cannot be a multiple of $p$. This is a contradiction.\n\nBoth cases lead to a contradiction. Therefore, our initial assumption was false. The first $\\frac{p+1}{2}$ probe positions $h(k,0), h(k,1), \\dots, h(k, \\frac{p-1}{2})$ must be pairwise distinct.\n\nNow, we deduce the tight threshold $\\alpha^{\\star}$ for the load factor $\\alpha=n/m$. An insertion is guaranteed to find an empty slot if the number of distinct slots probed is greater than the number of occupied slots, $n$.\nWe have shown that quadratic probing generates at least $\\frac{p+1}{2}$ distinct probe positions.\nFor an insertion to be guaranteed to succeed, the number of occupied slots $n$ must be less than this number:\n$$n < \\frac{p+1}{2}$$\nSince $n$ is an integer and $p$ is an odd prime (so $\\frac{p+1}{2}$ is an integer), this is equivalent to $n \\le \\frac{p-1}{2}$.\nThe load factor is $\\alpha = \\frac{n}{m} = \\frac{n}{p}$. We seek a threshold $\\alpha^{\\star}$ such that $\\alpha < \\alpha^{\\star}$ guarantees this condition on $n$.\nLet's test the threshold $\\alpha^{\\star} = \\frac{1}{2}$.\nIf $\\alpha < \\frac{1}{2}$, then $\\frac{n}{p} < \\frac{1}{2}$, which implies $n < \\frac{p}{2}$.\nSince $n$ is an integer and $p$ is an odd prime, let $p = 2k+1$ for some integer $k \\ge 1$. Then $\\frac{p}{2} = k + \\frac{1}{2}$. The condition $n < k + \\frac{1}{2}$ implies $n \\le k$. Substituting back $k=\\frac{p-1}{2}$, we get $n \\le \\frac{p-1}{2}$.\nAs shown, if $n \\le \\frac{p-1}{2}$, the number of occupied slots is smaller than the $\\frac{p+1}{2}$ distinct slots visited by the probe sequence. Thus, an empty slot is guaranteed to be found.\nSo, $\\alpha^{\\star} = \\frac{1}{2}$ is a valid threshold.\n\nTo show this threshold is tight, we must show that for any value $\\alpha' > \\frac{1}{2}$, the guarantee does not hold.\nLet $\\alpha' > \\frac{1}{2}$. We can always find an odd prime $p$ that is large enough such that $\\frac{1}{2} < \\frac{1}{2} + \\frac{1}{2p} < \\alpha'$.\nConsider a hash table of this size $p$ with a load factor $\\alpha = \\frac{(p+1)/2}{p} = \\frac{1}{2} + \\frac{1}{2p}$. This $\\alpha$ is less than our chosen $\\alpha'$.\nFor this load factor, the number of occupied elements is $n=\\frac{p+1}{2}$.\nAs shown earlier, the probe sequence for any key $k$ explores at most $\\frac{p+1}{2}$ distinct slots (these are the slots corresponding to the quadratic residues modulo $p$, plus the home slot $h_0(k)$). It is possible that the $n = \\frac{p+1}{2}$ elements in the table happen to occupy exactly these specific $\\frac{p+1}{2}$ slots. In such a scenario, the insertion of a new key $k$ would probe only occupied slots and would never terminate.\nSince for any value $\\alpha' > \\frac{1}{2}$ we can construct a failure case with a load factor $\\alpha < \\alpha'$, the threshold $\\alpha^{\\star} = \\frac{1}{2}$ is the largest possible value for which the guarantee holds. It is therefore tight.\n\nThe problem asks for the tight threshold $\\alpha^{\\star}$ as an exact fraction.", "answer": "$$\n\\boxed{\\frac{1}{2}}\n$$", "id": "3238374"}]}