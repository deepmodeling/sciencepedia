{"hands_on_practices": [{"introduction": "This first practice problem demonstrates a foundational modeling technique in network flow: converting a vertex-based constraint into an edge-based one. You will find the maximum number of internally vertex-disjoint paths by transforming the graph using node-splitting, where each internal vertex is replaced by a capacity-1 edge. This exercise highlights the power of the max-flow min-cut theorem, through its connection to Menger's Theorem, to solve fundamental problems in graph connectivity and reliability [@problem_id:3255356].", "problem": "Consider a directed graph $G = (V, E)$ with vertex set $V = \\{s, t, a, b, c, d, p, q, r, x, y, z\\}$ and edge set $E$ consisting of the following directed edges: $(s, a)$, $(s, b)$, $(s, c)$, $(s, d)$, $(a, p)$, $(a, q)$, $(a, r)$, $(b, p)$, $(b, q)$, $(b, r)$, $(c, p)$, $(c, q)$, $(c, r)$, $(d, p)$, $(d, q)$, $(d, r)$, $(p, x)$, $(p, y)$, $(q, y)$, $(q, z)$, $(r, x)$, $(r, z)$, $(x, t)$, $(y, t)$, $(z, t)$. You will enforce internal vertex-disjointness of $s$-$t$ paths by transforming $G$ into a flow network $G'$ using the standard node-splitting construction: for each internal vertex $v \\in V \\setminus \\{s, t\\}$, replace $v$ by two vertices $v^{\\text{in}}$ and $v^{\\text{out}}$ connected by a directed edge $(v^{\\text{in}}, v^{\\text{out}})$ of capacity $1$. For each original edge $(u, v) \\in E$, add a directed edge $(u^{\\text{out}}, v^{\\text{in}})$ in $G'$ with capacity $\\infty$. The source $s$ and sink $t$ are not split; edges incident to $s$ or $t$ become $(s, v^{\\text{in}})$ and $(u^{\\text{out}}, t)$, respectively, each with capacity $\\infty$. Using this construction, model and compute the maximum number of pairwise internally vertex-disjoint $s$-$t$ paths by finding the maximum $s$-$t$ flow value in $G'$. Express your final answer as a single integer. No rounding is required, and there are no physical units involved.", "solution": "The user wants to solve the problem by following these steps:\n1.  Verify the problem statement is valid.\n2.  If it is valid, proceed with the solution.\n3.  If it is invalid, state the reasons and terminate.\n\n### Step 1: Extract Givens\n-   **Graph:** A directed graph $G = (V, E)$.\n-   **Vertex Set:** $V = \\{s, t, a, b, c, d, p, q, r, x, y, z\\}$. The source is $s$ and the sink is $t$.\n-   **Edge Set:** $E = \\{(s, a), (s, b), (s, c), (s, d)\\} \\cup \\{(u, v) \\mid u \\in \\{a, b, c, d\\}, v \\in \\{p, q, r\\}\\} \\cup \\{(p, x), (p, y), (q, y), (q, z), (r, x), (r, z)\\} \\cup \\{(x, t), (y, t), (z, t)\\}$.\n-   **Transformation to Flow Network $G'$:**\n    -   For each internal vertex $v \\in V \\setminus \\{s, t\\}$, replace $v$ with two vertices $v^{\\text{in}}$ and $v^{\\text{out}}$, and add a directed edge $(v^{\\text{in}}, v^{\\text{out}})$ with capacity $c(v^{\\text{in}}, v^{\\text{out}}) = 1$.\n    -   For each original edge $(u, v) \\in E$ where $u, v \\in V \\setminus \\{s, t\\}$, add a directed edge $(u^{\\text{out}}, v^{\\text{in}})$ in $G'$ with capacity $c(u^{\\text{out}}, v^{\\text{in}}) = \\infty$.\n    -   For an edge $(s, v) \\in E$, add an edge $(s, v^{\\text{in}})$ in $G'$ with capacity $c(s, v^{\\text{in}}) = \\infty$.\n    -   For an edge $(u, t) \\in E$, add an edge $(u^{\\text{out}}, t)$ in $G'$ with capacity $c(u^{\\text{out}}, t) = \\infty$.\n-   **Objective:** Compute the maximum number of pairwise internally vertex-disjoint $s-t$ paths in $G$ by finding the maximum $s-t$ flow value in the constructed network $G'$.\n\n### Step 2: Validate Using Extracted Givens\n-   **Scientific Grounding:** The problem is based on fundamental concepts of graph theory and network flow algorithms. The relationship between internally vertex-disjoint paths and maximum flow via node-splitting is a standard and well-established result, often presented as a corollary of Menger's theorem and the max-flow min-cut theorem. The problem is scientifically sound.\n-   **Well-Posedness:** The graph $G$ is explicitly and unambiguously defined. The construction of the flow network $G'$ is precise. The objective is clear: to compute a maximum flow value. A unique solution exists. The problem is well-posed.\n-   **Objectivity:** The problem is stated using formal mathematical language, devoid of any subjectivity or ambiguity.\n\n### Step 3: Verdict and Action\nThe problem is valid. A complete solution will be provided.\n\nThe problem asks for the maximum number of pairwise internally vertex-disjoint paths from a source vertex $s$ to a sink vertex $t$ in a given directed graph $G$. The problem specifies the method to be used: a standard node-splitting construction to create a flow network $G'$, followed by a maximum flow calculation. The maximum flow value in $G'$ will be equal to the number of such paths in $G$. This is a direct application of the max-flow min-cut theorem in conjunction with Menger's theorem for vertex connectivity.\n\nThe maximum flow value in a network is equal to the minimum capacity of an $s-t$ cut. An $s-t$ cut is a partition of the vertices of $G'$ into two sets, $S$ and $T$, such that $s \\in S$ and $t \\in T$. The capacity of the cut $(S, T)$ is the sum of the capacities of all edges $(u, v)$ where $u \\in S$ and $v \\in T$.\n\nLet's analyze the structure of the graph $G$. The set of internal vertices can be partitioned into three successive layers:\n- Layer $1$: $L_1 = \\{a, b, c, d\\}$\n- Layer $2$: $L_2 = \\{p, q, r\\}$\n- Layer $3$: $L_3 = \\{x, y, z\\}$\n\nEvery path from $s$ to $t$ must pass through a vertex from $L_1$, then a vertex from $L_2$, and finally a vertex from $L_3$. A set of internal vertices whose removal disconnects all paths from $s$ to $t$ is called an $s-t$ vertex cut. The minimum size of such a cut gives the maximum number of internally vertex-disjoint paths.\n\nThe sets $L_2$ and $L_3$ are themselves $s-t$ vertex cuts.\nThe size of $L_1$ is $|L_1| = 4$.\nThe size of $L_2$ is $|L_2| = 3$.\nThe size of $L_3$ is $|L_3| = 3$.\n\nThe minimum size of these layer-based cuts is $3$. This suggests that the minimum vertex cut size is at most $3$. Let's formalize this by constructing a corresponding $s-t$ cut in the flow network $G'$.\n\nConsider the vertex cut $L_2 = \\{p, q, r\\}$ in $G$. We can define an $s-t$ cut $(S, T)$ in $G'$ as follows:\n- Let $S = \\{s\\} \\cup \\{v^{\\text{in}}, v^{\\text{out}} \\mid v \\in L_1\\} \\cup \\{v^{\\text{in}} \\mid v \\in L_2\\}$.\n- Let $T$ be the set of all other vertices in $G'$, so $t \\in T$.\n\nThe edges from $S$ to $T$ are:\n$1$. Edges of the form $(v^{\\text{in}}, v^{\\text{out}})$:\nFor $v \\in L_2 = \\{p, q, r\\}$, we have $v^{\\text{in}} \\in S$ and $v^{\\text{out}} \\in T$. These three edges, $(p^{\\text{in}}, p^{\\text{out}})$, $(q^{\\text{in}}, q^{\\text{out}})$, and $(r^{\\text{in}}, r^{\\text{out}})$, cross the cut. Each has a capacity of $1$. The total capacity from these edges is $1+1+1=3$.\n\n$2$. Edges corresponding to original edges in $E$ (with capacity $\\infty$):\nAny such edge $(u,v)$ from $S$ to $T$ would give the cut infinite capacity. We must verify that no such edge exists.\n- $(s, v^{\\text{in}})$ for $v \\in L_1$: $s \\in S, v^{\\text{in}} \\in S$. Does not cross.\n- $(u^{\\text{out}}, v^{\\text{in}})$ for $u \\in L_1, v \\in L_2$: $u^{\\text{out}} \\in S, v^{\\text{in}} \\in S$. Does not cross.\n- All other edges with infinite capacity (e.g., $(u^{\\text{out}}, v^{\\text{in}})$ for $u \\in L_2, v \\in L_3$) either have both endpoints in $T$ or do not exist. For example, for an edge like $(p^{\\text{out}}, x^{\\text{in}})$, $p^{\\text{out}} \\in T$ and $x^{\\text{in}} \\in T$. It does not cross from $S$ to $T$.\n\nThe total capacity of this cut $(S,T)$ is exactly $3$. By the max-flow min-cut theorem, the maximum flow value is less than or equal to the capacity of any cut, so $f_{\\max} \\le 3$.\n\nNow, we need to establish a lower bound for the maximum flow. We can do this by finding a set of internally vertex-disjoint paths in $G$. If we find $k$ such paths, then the maximum flow must be at least $k$. Let's try to find $3$ such paths.\nConsider the following three paths:\n- Path $1$: $s \\to a \\to p \\to x \\to t$. The set of internal vertices is $P_1 = \\{a, p, x\\}$.\n- Path $2$: $s \\to b \\to q \\to y \\to t$. The set of internal vertices is $P_2 = \\{b, q, y\\}$.\n- Path $3$: $s \\to c \\to r \\to z \\to t$. The set of internal vertices is $P_3 = \\{c, r, z\\}$.\n\nWe must verify that these paths are valid (i.e., the edges exist) and that they are internally vertex-disjoint.\n- The edges $(s,a)$, $(s,b)$, $(s,c)$ exist.\n- The edges $(a,p)$, $(b,q)$, $(c,r)$ exist, as there is a complete bipartite graph between $\\{a,b,c,d\\}$ and $\\{p,q,r\\}$.\n- The edges $(p,x)$, $(q,y)$, $(r,z)$ exist based on the problem description.\n- The edges $(x,t)$, $(y,t)$, $(z,t)$ exist.\nAll paths are valid.\n\nThe sets of internal vertices are $P_1 = \\{a, p, x\\}$, $P_2 = \\{b, q, y\\}$, and $P_3 = \\{c, r, z\\}$. These sets are disjoint: $P_1 \\cap P_2 = \\emptyset$, $P_1 \\cap P_3 = \\emptyset$, and $P_2 \\cap P_3 = \\emptyset$. Thus, the three paths are pairwise internally vertex-disjoint.\n\nThe existence of $3$ internally vertex-disjoint paths implies that the maximum number of such paths is at least $3$. In the flow network $G'$, this corresponds to a flow of value $3$. Therefore, $f_{\\max} \\ge 3$.\n\nCombining the two results:\n- From the min-cut analysis, we have $f_{\\max} \\le 3$.\n- From the path construction, we have $f_{\\max} \\ge 3$.\n\nTherefore, the maximum flow value must be exactly $3$. This value represents the maximum number of pairwise internally vertex-disjoint $s-t$ paths.", "answer": "$$\\boxed{3}$$", "id": "3255356"}, {"introduction": "This problem challenges you to think critically about the structure of network bottlenecks, which are formalized by minimum $s$-$t$ cuts. By analyzing the effect of adding a new high-capacity arc, you will discover that not all capacity additions increase the maximum flow. This exercise reinforces the idea that the max-flow value is dictated by the capacity of the minimum cut, and an improvement is only effective if it increases the capacity of *every* minimum cut [@problem_id:3255344].", "problem": "Consider a directed graph with vertices $V=\\{s,u,v,w,t\\}$, source $s$, and sink $t$. The capacity function $c:V \\times V \\to \\mathbb{R}_{\\ge 0}$ is specified on the following arcs (all other pairs have capacity $0$): $c(s,u)=6$, $c(s,v)=5$, $c(u,w)=4$, $c(v,w)=3$, and $c(w,t)=5$. A flow $f$ on this network is a function $f:V \\times V \\to \\mathbb{R}_{\\ge 0}$ satisfying the capacity constraints $0 \\le f(x,y) \\le c(x,y)$ for every ordered pair $(x,y) \\in V \\times V$, and the flow conservation constraints $\\sum_{y\\in V} f(x,y)=\\sum_{y\\in V} f(y,x)$ for every vertex $x \\in V \\setminus \\{s,t\\}$. The residual network $G_f$ associated with a flow $f$ is defined by having, for each ordered pair $(x,y)$, a forward residual capacity $c(x,y)-f(x,y)$ and a backward residual capacity $f(x,y)$.\n\nYou will analyze how adding an extra arc changes the maximum $s$-$t$ flow value under the constraint that the minimum $s$-$t$ cuts remain unchanged. Begin from the core definitions of $s$-$t$ cuts and their capacities: for a partition $(S,T)$ of $V$ with $s\\in S$ and $t\\in T$, the capacity of the cut $(S,T)$ is $\\sum_{(x,y)\\in S\\times T} c(x,y)$.\n\nTasks:\n- Using only the definitions of flow feasibility, residual capacity, and cut capacity, determine the capacity of a minimum $s$-$t$ cut in the given network and explain why this cut is minimum.\n- Now add a new arc $(u,v)$ with capacity $c(u,v)=10$ to the network. Reason from the definitions why the introduction of $(u,v)$ does not change the identity and capacity of any minimum $s$-$t$ cut, and explain how this implies that the maximum $s$-$t$ flow value is unchanged.\n- Identify, using the residual network $G_f$ after achieving a maximum flow on the augmented network, which forward arc or set of forward arcs act as the persistent bottleneck that prevent any further augmentation. Your identification must be justified from the residual capacities produced by a maximum flow.\n- Report the maximum $s$-$t$ flow value in the augmented network as a single number. No rounding is required and no units are involved.", "solution": "The problem will be analyzed by sequentially addressing the four tasks posed, after validating the problem statement.\n\n### Problem Validation\n\n**Step 1: Extract Givens**\n- Vertices: $V=\\{s,u,v,w,t\\}$\n- Source: $s$, Sink: $t$\n- Capacity function $c:V \\times V \\to \\mathbb{R}_{\\ge 0}$\n- Initial capacities: $c(s,u)=6$, $c(s,v)=5$, $c(u,w)=4$, $c(v,w)=3$, $c(w,t)=5$. All other capacities are $0$.\n- Flow definition: a function $f:V \\times V \\to \\mathbb{R}_{\\ge 0}$ where $0 \\le f(x,y) \\le c(x,y)$ for all $(x,y) \\in V \\times V$, and $\\sum_{y\\in V} f(x,y)=\\sum_{y\\in V} f(y,x)$ for all $x \\in V \\setminus \\{s,t\\}$.\n- Residual network $G_f$ definition: for each pair $(x,y)$, forward residual capacity is $c(x,y)-f(x,y)$ and backward residual capacity is $f(x,y)$.\n- $s$-$t$ cut definition: a partition $(S,T)$ of $V$ with $s\\in S$ and $t\\in T$.\n- Cut capacity definition: $\\sum_{(x,y)\\in S\\times T} c(x,y)$.\n- Task 1: Determine the capacity of a minimum $s$-$t$ cut in the initial network and justify its minimality.\n- Task 2: Add a new arc $(u,v)$ with capacity $c(u,v)=10$. Explain why this does not change the minimum cut and thus the maximum flow value.\n- Task 3: In the augmented network, identify the persistent bottleneck using the residual network of a maximum flow.\n- Task 4: Report the maximum $s$-$t$ flow value in the augmented network.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is well-defined within the mathematical framework of network flow theory, a subfield of graph theory and optimization. All terms such as 'flow', 'cut', 'capacity', and 'residual network' are standard and formally defined. The network structure and capacities are given completely. The tasks are logically sequenced and require application of core theoretical principles (specifically, the max-flow min-cut theorem). The problem does not violate any scientific principles, is not ambiguous, and contains no contradictions.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A solution will be provided.\n\n### Solution\n\n**Task 1: Minimum Cut in the Original Network**\n\nAn $s$-$t$ cut is a partition of the vertex set $V$ into two disjoint sets, $S$ and $T$, such that $s \\in S$ and $t \\in T$. The capacity of the cut $(S,T)$, denoted $\\text{cap}(S,T)$, is the sum of capacities of all arcs $(x,y)$ where $x \\in S$ and $y \\in T$. We seek a cut with the minimum possible capacity.\n\nLet's examine some possible $s$-$t$ cuts in the original network:\n1.  $S_1 = \\{s\\}$, $T_1 = \\{u,v,w,t\\}$. The arcs from $S_1$ to $T_1$ are $(s,u)$ and $(s,v)$.\n    $\\text{cap}(S_1, T_1) = c(s,u) + c(s,v) = 6 + 5 = 11$.\n2.  $S_2 = \\{s,u\\}$, $T_2 = \\{v,w,t\\}$. The arcs from $S_2$ to $T_2$ are $(s,v)$ and $(u,w)$.\n    $\\text{cap}(S_2, T_2) = c(s,v) + c(u,w) = 5 + 4 = 9$.\n3.  $S_3 = \\{s,v\\}$, $T_3 = \\{u,w,t\\}$. The arcs from $S_3$ to $T_3$ are $(s,u)$ and $(v,w)$.\n    $\\text{cap}(S_3, T_3) = c(s,u) + c(v,w) = 6 + 3 = 9$.\n4.  $S_4 = \\{s,u,v\\}$, $T_4 = \\{w,t\\}$. The arcs from $S_4$ to $T_4$ are $(u,w)$ and $(v,w)$.\n    $\\text{cap}(S_4, T_4) = c(u,w) + c(v,w) = 4 + 3 = 7$.\n5.  $S_5 = \\{s,u,v,w\\}$, $T_5 = \\{t\\}$. The only arc from $S_5$ to $T_5$ is $(w,t)$.\n    $\\text{cap}(S_5, T_5) = c(w,t) = 5$.\n\nThe cut $(S_5,T_5)$ has capacity $5$. To confirm this is a minimum cut, we can use the max-flow min-cut theorem, which states that the value of the maximum flow in a network is equal to the capacity of a minimum cut. If we can find a feasible $s$-$t$ flow with a value of $5$, then no cut can have a capacity less than $5$, and thus $(S_5,T_5)$ must be a minimum cut.\n\nConsider the following flow $f$:\n- Path $s \\to u \\to w \\to t$: Send $4$ units of flow. This is limited by $c(u,w)=4$.\n- Path $s \\to v \\to w \\to t$: Send $1$ unit of flow. This is limited by the remaining capacity on $(w,t)$, which is $c(w,t)-4=1$.\nThis assignment defines the flow function $f$:\n$f(s,u)=4$, $f(u,w)=4$.\n$f(s,v)=1$, $f(v,w)=1$.\n$f(w,t) = 4+1=5$.\nAll other arc flows are $0$.\n\nLet's check feasibility:\n- Capacity constraints:\n  $f(s,u)=4 \\le c(s,u)=6$ (OK)\n  $f(s,v)=1 \\le c(s,v)=5$ (OK)\n  $f(u,w)=4 \\le c(u,w)=4$ (OK)\n  $f(v,w)=1 \\le c(v,w)=3$ (OK)\n  $f(w,t)=5 \\le c(w,t)=5$ (OK)\n- Flow conservation:\n  - At $u$: Flow in is $f(s,u)=4$. Flow out is $f(u,w)=4$. Conserved.\n  - At $v$: Flow in is $f(s,v)=1$. Flow out is $f(v,w)=1$. Conserved.\n  - At $w$: Flow in is $f(u,w)+f(v,w)=4+1=5$. Flow out is $f(w,t)=5$. Conserved.\n\nThe total flow value, which is the net flow out of the source $s$, is $|f| = f(s,u) + f(s,v) = 4+1=5$.\nSince we have found a flow of value $5$ and a cut of capacity $5$, by the max-flow min-cut theorem, this is a maximum flow and the cut $(S_5, T_5)$ is a minimum cut. The capacity of a minimum $s$-$t$ cut is $5$.\n\n**Task 2: Effect of Arc $(u,v)$ on Minimum Cut and Maximum Flow**\n\nWe now add a new arc $(u,v)$ with capacity $c(u,v)=10$. The network is now augmented.\nThe capacity of a cut $(S,T)$ is given by $\\sum_{(x,y) \\in S \\times T} c(x,y)$.\nLet's consider the minimum cut found in the original network, $(S_5, T_5)$, where $S_5=\\{s,u,v,w\\}$ and $T_5=\\{t\\}$.\nThe new arc is $(u,v)$. Its source vertex is $u$ and its destination vertex is $v$.\nFor this arc to contribute to the capacity of the cut $(S_5, T_5)$, we would need $u \\in S_5$ and $v \\in T_5$. However, both $u$ and $v$ are in $S_5$. Thus, the arc $(u,v)$ does not cross the cut from $S_5$ to $T_5$, and its capacity does not contribute to $\\text{cap}(S_5, T_5)$. The capacity of this specific cut remains unchanged at $5$.\n\nAdding an arc to a network can never decrease the capacity of any cut, because the capacity function is non-negative. For any cut $(S,T)$, its new capacity $\\text{cap}'(S,T)$ is either equal to its old capacity $\\text{cap}(S,T)$ (if the new arc does not cross from $S$ to $T$) or greater than its old capacity (if it does).\nSince we have identified a cut, $(S_5,T_5)$, whose capacity remains $5$ in the augmented network, the minimum cut capacity in the new network, $\\text{min_cap}'$, must be less than or equal to $5$.\nFurthermore, the value of any flow is a lower bound for the min-cut capacity. The original maximum flow of value $5$ is still a valid flow in the augmented network (by simply setting $f(u,v)=0$). Thus, the new maximum flow value $|f'_{\\text{max}}|$ must be at least $5$.\nBy the max-flow min-cut theorem, $|f'_{\\text{max}}| = \\text{min_cap}'$.\nWe have $5 \\le |f'_{\\text{max}}| = \\text{min_cap}' \\le 5$.\nThis forces $\\text{min_cap}'=5$. Therefore, the minimum cut capacity is unchanged. The cut $(S_5, T_5)$ remains a minimum cut.\nConsequently, the maximum $s$-$t$ flow value is also unchanged and remains $5$.\n\n**Task 3: Persistent Bottleneck Identification**\n\nTo identify the persistent bottleneck, we analyze the residual network $G_f$ corresponding to a maximum flow $f$ in the augmented network. We can use the same flow of value $5$ as determined before, with $f(u,v)=0$:\n$f(s,u)=4$, $f(s,v)=1$, $f(u,w)=4$, $f(v,w)=1$, $f(w,t)=5$.\nIn the augmented network, we also have $c(u,v)=10$ and $f(u,v)=0$.\n\nThe residual capacity $c_f(x,y)$ for an arc $(x,y)$ is given by $c(x,y)-f(x,y)$ for the forward arc and $f(x,y)$ for the backward arc $(y,x)$.\nLet's find the set of vertices $S_f$ reachable from $s$ in $G_f$ using only arcs with positive residual capacity.\n1. Start with $S_f = \\{s\\}$.\n2. From $s$, we can reach $u$ because $c_f(s,u) = c(s,u)-f(s,u) = 6-4=2 > 0$.\n3. From $s$, we can reach $v$ because $c_f(s,v) = c(s,v)-f(s,v) = 5-1=4 > 0$.\n   So, now we have processed $s$ and found that $u,v$ are reachable. $S_f = \\{s, u, v\\}$.\n4. From $u$, we can reach:\n   - $s$ (backward arc): $c_f(u,s) = f(s,u)=4>0$. $s$ is already in $S_f$.\n   - $w$ (forward arc): $c_f(u,w) = c(u,w)-f(u,w) = 4-4=0$. Not a path.\n   - $v$ (forward arc, new): $c_f(u,v) = c(u,v)-f(u,v) = 10-0=10>0$. $v$ is already in $S_f$.\n5. From $v$, we can reach:\n   - $s$ (backward arc): $c_f(v,s) = f(s,v)=1>0$. $s$ is already in $S_f$.\n   - $w$ (forward arc): $c_f(v,w) = c(v,w)-f(v,w) = 3-1=2>0$. $w$ is not in $S_f$, so we add it. Now $S_f=\\{s,u,v,w\\}$.\n6. From the newly added vertex $w$, we can reach:\n   - $u$ (backward arc): $c_f(w,u) = f(u,w)=4>0$. $u$ is in $S_f$.\n   - $v$ (backward arc): $c_f(w,v) = f(v,w)=1>0$. $v$ is in $S_f$.\n   - $t$ (forward arc): $c_f(w,t) = c(w,t)-f(w,t) = 5-5=0$. Not a path.\nNo more vertices can be reached from $s$. The set of reachable vertices is $S_f=\\{s,u,v,w\\}$. The sink $t$ is not in $S_f$, confirming that there are no augmenting paths from $s$ to $t$ and the flow $f$ is maximal.\n\nThe partition $(S_f, V\\setminus S_f) = (\\{s,u,v,w\\}, \\{t\\})$ corresponds to the minimum cut. The bottleneck is the set of forward arcs from $S_f$ to $V\\setminus S_f$ that are saturated.\nThe only original arc from $S_f$ to $V\\setminus S_f$ is $(w,t)$.\nThe flow on this arc is $f(w,t)=5$, and its capacity is $c(w,t)=5$. Since $f(w,t)=c(w,t)$, the arc is saturated.\nThis saturation is what prevents any more flow from reaching the sink $t$ from the component $S_f$. Therefore, the forward arc $(w,t)$ acts as the persistent bottleneck.\n\n**Task 4: Maximum Flow in the Augmented Network**\n\nAs demonstrated in the reasoning for Task 2, the introduction of the arc $(u,v)$ with capacity $10$ does not change the capacity of the minimum $s$-$t$ cut, which remains $5$. According to the max-flow min-cut theorem, the value of the maximum flow is equal to the capacity of the minimum cut.\nTherefore, the maximum $s$-$t$ flow value in the augmented network is $5$.", "answer": "$$\\boxed{5}$$", "id": "3255344"}, {"introduction": "Our final exercise explores the elegant integrality theorem, a cornerstone result stating that networks with integer capacities have integer-valued maximum flows. You will investigate what happens when a single non-integer capacity is introduced, determining the precise threshold at which this new edge becomes part of the bottleneck and forces the max-flow value to become non-integer. This problem requires a careful analysis of competing min-cuts, moving beyond algorithmic execution to a deeper, analytical understanding of the max-flow min-cut theorem [@problem_id:3255308].", "problem": "A directed network has source $s$, sink $t$, and intermediate vertices $a$ and $b$. All existing edge capacities are integers:\n- Edge $s \\to b$ has capacity $1$.\n- Edge $a \\to t$ has capacity $5$.\n- Edge $b \\to t$ has capacity $10$.\n\nYou are allowed to add one new directed edge $e = (s,a)$ with capacity $c \\in \\mathbb{R}_{>0}$, where $c$ may be non-integer. Let $f^{\\star}(c)$ denote the value of a maximum $s$–$t$ flow in the resulting network.\n\nUse only the core definitions of $s$–$t$ cuts, the Max-Flow Min-Cut Theorem, and the classical integrality property of the Ford–Fulkerson method (via residual networks) for integer capacities as the foundational base. Derive, from first principles, the exact largest real number $T$ such that for every non-integer $c$ with $0 < c \\leq T$, the maximum flow value $f^{\\star}(c)$ is non-integer. Then report $T$.\n\nGive your answer as an exact number (no rounding).", "solution": "The principles of network flow theory, specifically the Max-Flow Min-Cut Theorem, will be used to solve this problem. Let the given network be denoted by $G_c$, with the set of vertices $V = \\{s, a, b, t\\}$, where $s$ is the source and $t$ is the sink. The edge capacities, which are functions of a parameter $c \\in \\mathbb{R}_{>0}$, are given as:\n$C(s, b) = 1$\n$C(a, t) = 5$\n$C(b, t) = 10$\n$C(s, a) = c$\nAll other edge capacities are assumed to be $0$. We are interested in the maximum flow value, $f^{\\star}(c)$, from $s$ to $t$.\n\nThe Max-Flow Min-Cut Theorem states that the value of the maximum flow in a network is equal to the minimum capacity of any $s$–$t$ cut. An $s$–$t$ cut is a partition of the vertex set $V$ into two disjoint sets, $S$ and $T$, such that $s \\in S$ and $t \\in T$. The capacity of a cut $(S, T)$ is the sum of capacities of all edges $(u, v)$ where $u \\in S$ and $v \\in T$.\n\nTo find $f^{\\star}(c)$, we must enumerate all possible $s$–$t$ cuts in the network $G_c$ and calculate their capacities. The vertices $s$ and $t$ must be in sets $S$ and $T$, respectively. The intermediate vertices, $a$ and $b$, can each be in either $S$ or $T$. This gives $2^2 = 4$ possible minimal $s$–$t$ cuts to consider.\n\n1.  **Cut 1**: $S_1 = \\{s\\}$, $T_1 = \\{a, b, t\\}$.\n    The edges from $S_1$ to $T_1$ are $(s, a)$ and $(s, b)$.\n    The capacity of this cut is $C(S_1, T_1) = C(s, a) + C(s, b) = c + 1$.\n\n2.  **Cut 2**: $S_2 = \\{s, a\\}$, $T_2 = \\{b, t\\}$.\n    The edges from $S_2$ to $T_2$ are $(s, b)$ and $(a, t)$. There are no edges from $T_2$ to $S_2$ to consider for the simple cut capacity calculation. The edge $(s,a)$ is entirely within $S_2$.\n    The capacity of this cut is $C(S_2, T_2) = C(s, b) + C(a, t) = 1 + 5 = 6$.\n\n3.  **Cut 3**: $S_3 = \\{s, b\\}$, $T_3 = \\{a, t\\}$.\n    The edges from $S_3$ to $T_3$ are $(s, a)$ and $(b, t)$. The edge $(s,b)$ is within $S_3$.\n    The capacity of this cut is $C(S_3, T_3) = C(s, a) + C(b, t) = c + 10$.\n\n4.  **Cut 4**: $S_4 = \\{s, a, b\\}$, $T_4 = \\{t\\}$.\n    The edges from $S_4$ to $T_4$ are $(a, t)$ and $(b, t)$.\n    The capacity of this cut is $C(S_4, T_4) = C(a, t) + C(b, t) = 5 + 10 = 15$.\n\nAccording to the Max-Flow Min-Cut Theorem, the maximum flow value $f^{\\star}(c)$ is the minimum of these cut capacities:\n$$f^{\\star}(c) = \\min(c + 1, 6, c + 10, 15)$$\nSince $c > 0$, it is always true that $c + 10 > c + 1$. Also, $15 > 6$. Therefore, the expression for $f^{\\star}(c)$ simplifies to:\n$$f^{\\star}(c) = \\min(c + 1, 6)$$\nThis defines $f^{\\star}(c)$ as a piecewise function of $c$. The behavior of the function changes when $c + 1 = 6$, which occurs at $c = 5$.\n\n-   **Case I: $0 < c \\leq 5$**\n    In this interval, $c + 1 \\leq 6$, so the minimum is $c + 1$.\n    $$f^{\\star}(c) = c + 1$$\n    The problem asks for the condition where $f^{\\star}(c)$ is non-integer for every non-integer $c$. If $c$ is a non-integer, then $c+1$ is also a non-integer. (Proof by contradiction: If $c+1=k$ for some integer $k$, then $c=k-1$, which would be an integer, contrary to the assumption.) Thus, for all non-integer $c$ in the interval $(0, 5]$, the maximum flow value $f^{\\star}(c)$ is non-integer.\n\n-   **Case II: $c > 5$**\n    In this interval, $c + 1 > 6$, so the minimum is $6$.\n    $$f^{\\star}(c) = 6$$\n    In this regime, the maximum flow value is always the integer $6$, regardless of whether $c$ is an integer or not. For any non-integer $c > 5$ (e.g., $c=5.5$), the max flow $f^{\\star}(5.5) = 6$ is an integer.\n\nThe problem requires finding the largest real number $T$ such that for every non-integer $c$ with $0 < c \\leq T$, the value $f^{\\star}(c)$ is non-integer.\n\nFrom our analysis:\n-   For the interval $(0, 5]$, any non-integer $c$ yields a non-integer flow value $f^{\\star}(c) = c+1$. The point $c=5$ itself is an integer, so it does not fall under the \"every non-integer $c$\" condition. Thus, the interval $(0, 5]$ is a candidate. Any $T \\leq 5$ will satisfy the property.\n\n-   Consider any value $T > 5$. For instance, let $T = 5 + \\epsilon$ for some $\\epsilon > 0$. The interval is $(0, 5+\\epsilon]$. We can choose a non-integer $c_0$ in this interval such that $5 < c_0 \\leq 5+\\epsilon$. For example, $c_0 = 5 + \\epsilon/2$. For this $c_0$, $f^{\\star}(c_0) = 6$, which is an integer. This violates the required condition that for *every* non-integer `c` in the interval, the flow is non-integer.\n\nTherefore, no value of $T$ greater than $5$ can satisfy the condition. The largest possible value for $T$ is $5$.\n\nThe integrality property of network flows states that if all capacities are integers, the max flow value is an integer. Here, when $c > 5$, the minimum cut is determined by edges with integer capacities, $C(s,b)=1$ and $C(a,t)=5$. Even though the network contains a non-integer capacity $c$, it is not the bottleneck, and the max flow value resolves to an integer. When $0 < c \\leq 5$, the edge with non-integer capacity $c$ is part of the bottleneck cut, forcing the max flow value itself to be non-integer. The transition point is exactly where the two competing cuts have equal capacity, $c+1=6$, which is at $c=5$.\n\nThe largest real number $T$ for which the condition holds is $5$.", "answer": "$$\\boxed{5}$$", "id": "3255308"}]}