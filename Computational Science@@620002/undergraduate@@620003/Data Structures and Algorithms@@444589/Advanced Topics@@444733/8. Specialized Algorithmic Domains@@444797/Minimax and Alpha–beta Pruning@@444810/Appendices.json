{"hands_on_practices": [{"introduction": "Mastering alpha-beta pruning begins with understanding the direct impact of move ordering on search efficiency. This exercise provides a hands-on trace of the algorithm on a small, symmetric game tree under two different evaluation functions [@problem_id:3252710]. By manually walking through the search process, you will see firsthand how different move orderings can lead to different search paths and pruning patterns, yet still converge on the same correct minimax value, solidifying your grasp of the algorithm's core mechanics.", "problem": "Consider a deterministic, zero-sum, perfect-information game tree of fixed ply-depth with root node $R$ at depth $0$. The standard minimax definition applies: a Maximizer (MAX) node has value equal to the maximum of its children’s values, and a Minimizer (MIN) node has value equal to the minimum of its children’s values. Alpha–beta pruning maintains bounds $[\\alpha,\\beta]$ along the search path, with the invariant that no child needs to be explored when the best-known lower bound $\\alpha$ at a Maximizer node meets or exceeds the best-known upper bound $\\beta$ at its ancestor Minimizer node, and symmetrically for a Minimizer node when $\\beta \\le \\alpha$.\n\nThe tree is structured as follows. The root $R$ is a MAX node with two MIN children, $A$ (left) and $B$ (right). Each of $A$ and $B$ has two MAX children. The MAX children of $A$ are $A_1$ (left) and $A_2$ (right). The MAX children of $B$ are $B_1$ (left) and $B_2$ (right). Each MAX child has exactly two terminal leaves with the utility values shown below. All terminal utilities are exact and deterministic.\n\n- Leaves under $A_1$: $\\{4,2\\}$.\n- Leaves under $A_2$: $\\{4,1\\}$.\n- Leaves under $B_1$: $\\{4,1\\}$.\n- Leaves under $B_2$: $\\{4,2\\}$.\n\nThus the tree is a left-right mirror: the multiset of leaf utilities under $A$ is $\\{4,2,4,1\\}$ and under $B$ is $\\{4,1,4,2\\}$.\n\nAssume full-width search to terminal leaves, but move ordering at non-terminal nodes is driven by a local evaluation function. Two different evaluation functions are given, $E_1$ and $E_2$, both used solely to order siblings before search. At every non-terminal node, children are expanded in strictly decreasing order of the evaluation function value at that node. At terminal nodes, both $E_1$ and $E_2$ return the exact utility. The sibling orderings induced by $E_1$ and $E_2$ are as follows:\n\n- At $R$: $E_1(A) = 4.10$ and $E_1(B) = 4.00$; $E_2(A) = 3.95$ and $E_2(B) = 4.05$.\n- At $A$: $E_1(A_1) = 4.20$ and $E_1(A_2) = 4.15$; $E_2(A_1) = 4.00$ and $E_2(A_2) = 4.05$.\n- At $B$: $E_1(B_1) = 4.60$ and $E_1(B_2) = 4.40$; $E_2(B_1) = 4.35$ and $E_2(B_2) = 4.50$.\n- At each MAX node’s leaves, ordering is by decreasing terminal utility, i.e., the leaf with utility $4$ is visited before the leaf with utility $2$ or $1$.\n\nTie-breaking in minimax selection is by “first encountered”: when multiple children share the same minimax value at a node, the algorithm records the principal variation (PV) using the first child visited among those ties.\n\nRun alpha–beta search once using $E_1$ ordering everywhere, and once using $E_2$ ordering everywhere. Based only on the formal definitions above and the exact leaf utilities, select all statements that are true.\n\nA. Under both $E_1$ and $E_2$, the root minimax value is $4$.\n\nB. The principal variation differs between $E_1$ and $E_2$: under $E_1$ it is $R \\rightarrow A \\rightarrow A_1 \\rightarrow$ the leaf with utility $4$, whereas under $E_2$ it is $R \\rightarrow B \\rightarrow B_2 \\rightarrow$ the leaf with utility $4$.\n\nC. Under both $E_1$ and $E_2$, alpha–beta prunes exactly $3$ terminal leaf evaluations due to the left-right symmetry of the tree and the specified ordering and tie-breaking.\n\nD. Although the number of pruned leaves may match under $E_1$ and $E_2$, the identity of the pruned leaves is exactly the same in both searches.\n\nE. Under $E_2$, because $B_1$ contains a leaf of utility $5$, the root minimax value becomes $5$.\n\nChoose all correct options. Justify your choices by deriving the minimax values and the alpha–beta cutoffs from first principles of the definitions provided. Do not assume any unstated properties beyond what is specified.", "solution": "## Problem Validation\n\n### Step 1: Extract Givens\n- **Game Tree**: Deterministic, zero-sum, perfect-information, fixed ply-depth.\n- **Root Node**: $R$ at depth $0$, is a MAX node.\n- **Node Structure**:\n    - $R$ has two MIN children: $A$ (left) and $B$ (right).\n    - $A$ has two MAX children: $A_1$ (left) and $A_2$ (right).\n    - $B$ has two MAX children: $B_1$ (left) and $B_2$ (right).\n- **Terminal Utilities**:\n    - Leaves under $A_1$: $\\{4, 2\\}$.\n    - Leaves under $A_2$: $\\{4, 1\\}$.\n    - Leaves under $B_1$: $\\{4, 1\\}$.\n    - Leaves under $B_2$: $\\{4, 2\\}$.\n- **Move Ordering**: Children are expanded in strictly decreasing order of an evaluation function's value.\n- **Evaluation Function $E_1$ Ordering**:\n    - At $R$: $E_1(A) = 4.10 > E_1(B) = 4.00 \\implies$ order is $A$, then $B$.\n    - At $A$: $E_1(A_1) = 4.20 > E_1(A_2) = 4.15 \\implies$ order is $A_1$, then $A_2$.\n    - At $B$: $E_1(B_1) = 4.60 > E_1(B_2) = 4.40 \\implies$ order is $B_1$, then $B_2$.\n- **Evaluation Function $E_2$ Ordering**:\n    - At $R$: $E_2(A) = 3.95 < E_2(B) = 4.05 \\implies$ order is $B$, then $A$.\n    - At $A$: $E_2(A_1) = 4.00 < E_2(A_2) = 4.05 \\implies$ order is $A_2$, then $A_1$.\n    - At $B$: $E_2(B_1) = 4.35 < E_2(B_2) = 4.50 \\implies$ order is $B_2$, then $B_1$.\n- **Leaf Ordering**: At MAX nodes ($A_1, A_2, B_1, B_2$), terminal leaves are visited in decreasing order of utility.\n- **Tie-Breaking**: For Principal Variation (PV), the first-encountered child that yields the minimax value is chosen.\n- **Alpha-Beta Pruning Rule**: At a MAX node, prune if $\\alpha \\ge \\beta$. At a MIN node, prune if $\\beta \\le \\alpha$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem statement is scientifically sound, well-posed, and objective. It provides a complete and consistent description of a game tree, terminal utilities, and deterministic move ordering rules for two separate scenarios. This allows for a rigorous and unique trace of the alpha-beta search algorithm for each case. The problem is a standard exercise in artificial intelligence algorithms and is free of factual errors, contradictions, or ambiguity. The premises are formalizable and directly relevant to the topic. Option E introduces a premise (\"$B_1$ contains a leaf of utility $5$\") that contradicts the givens, but this is a feature of the option to be evaluated, not a flaw in the core problem statement. The task is to determine which options are true based on the provided setup, and an option with a false premise is simply not a true statement about the given problem.\n\n### Step 3: Verdict and Action\nThe problem is **valid**. The solution will proceed by deriving the outcome of alpha-beta search for each evaluation function and then evaluating each option.\n\n## Derivation of Solution\n\nFirst, we determine the true minimax value of the tree without pruning, to serve as a baseline.\n- Value($A_1$) = $\\max(4, 2) = 4$.\n- Value($A_2$) = $\\max(4, 1) = 4$.\n- Value($B_1$) = $\\max(4, 1) = 4$.\n- Value($B_2$) = $\\max(4, 2) = 4$.\n- Value($A$) = $\\min(\\text{Value}(A_1), \\text{Value}(A_2)) = \\min(4, 4) = 4$.\n- Value($B$) = $\\min(\\text{Value}(B_1), \\text{Value}(B_2)) = \\min(4, 4) = 4$.\n- Value($R$) = $\\max(\\text{Value}(A), \\text{Value}(B)) = \\max(4, 4) = 4$.\nThe true minimax value of the root $R$ is $4$.\n\n### Alpha-Beta Search with $E_1$ Ordering\n\nThe traversal order is: $R \\rightarrow A \\rightarrow A_1 \\rightarrow \\text{leaves} \\rightarrow A_2 \\rightarrow \\text{leaves} \\rightarrow B \\rightarrow B_1 \\rightarrow \\text{leaves} \\rightarrow B_2 \\rightarrow \\text{leaves}$. Leaf order is high-to-low utility.\n\n1.  **$R$ (MAX, $\\alpha=-\\infty, \\beta=+\\infty$)**: Visit child $A$.\n2.  **$A$ (MIN, $\\alpha=-\\infty, \\beta=+\\infty$)**: Visit child $A_1$.\n3.  **$A_1$ (MAX, $\\alpha=-\\infty, \\beta=+\\infty$)**: Visit leaf with utility $4$. $A_1$'s local $\\alpha$ becomes $4$. Visit leaf with utility $2$. $\\max(4,2)=4$. $A_1$ returns value $4$.\n4.  **$A$ (MIN, $\\alpha=-\\infty, \\beta=+\\infty$)**: Receives $4$ from $A_1$. As a MIN node, its value is now $\\le 4$. $A$ updates its $\\beta$ to $4$. The current bounds for its remaining children are $[\\alpha=-\\infty, \\beta=4]$.\n5.  **$A$ (MIN, $\\alpha=-\\infty, \\beta=4$)**: Visit child $A_2$.\n6.  **$A_2$ (MAX, $\\alpha=-\\infty, \\beta=4$)**: Visit leaf with utility $4$. $A_2$'s local $\\alpha$ becomes $4$. **Pruning check**: $\\alpha \\ge \\beta$ ($4 \\ge 4$) is true. **Prune** the remaining child of $A_2$ (the leaf with utility $1$). $A_2$ returns its current best value, $4$.\n7.  **$A$ (MIN, $\\alpha=-\\infty, \\beta=4$)**: Receives $4$ from $A_2$. Value is $\\min(4, 4)=4$. $A$ has no more children and returns final value $4$.\n8.  **$R$ (MAX, $\\alpha=-\\infty, \\beta=+\\infty$)**: Receives $4$ from $A$. As a MAX node, its value is now $\\ge 4$. $R$ updates its $\\alpha$ to $4$. The current bounds for its remaining children are $[\\alpha=4, \\beta=+\\infty]$.\n9.  **$R$ (MAX, $\\alpha=4, \\beta=+\\infty$)**: Visit child $B$.\n10. **$B$ (MIN, $\\alpha=4, \\beta=+\\infty$)**: Visit child $B_1$.\n11. **$B_1$ (MAX, $\\alpha=4, \\beta=+\\infty$)**: Visit leaf with utility $4$. Local $\\alpha$ becomes $\\max(4,4)=4$. Visit leaf with utility $1$. $\\max(4,1)=4$. $B_1$ returns value $4$.\n12. **$B$ (MIN, $\\alpha=4, \\beta=+\\infty$)**: Receives $4$ from $B_1$. As a MIN node, its value is now $\\le 4$. $B$ updates its $\\beta$ to $4$. **Pruning check**: $\\beta \\le \\alpha$ ($4 \\le 4$) is true. **Prune** the remaining child of $B$ (node $B_2$ and its two leaves). $B$ returns its current best value, $4$.\n13. **$R$ (MAX, $\\alpha=4, \\beta=+\\infty$)**: Receives $4$ from $B$. Value is $\\max(4, 4)=4$. $R$ has no more children and returns final value $4$.\n\n**Summary for $E_1$**:\n- Root minimax value is $4$.\n- Pruned leaves: 1 (under $A_2$), 2 (under $B_2$). Total: $3$ leaves.\n- Principal Variation (PV): $R \\rightarrow A \\rightarrow A_1 \\rightarrow \\text{leaf}(4)$.\n\n### Alpha-Beta Search with $E_2$ Ordering\n\nThe traversal order is: $R \\rightarrow B \\rightarrow B_2 \\rightarrow \\text{leaves} \\rightarrow B_1 \\rightarrow \\text{leaves} \\rightarrow A \\rightarrow A_2 \\rightarrow \\text{leaves} \\rightarrow A_1 \\rightarrow \\text{leaves}$.\n\n1.  **$R$ (MAX, $\\alpha=-\\infty, \\beta=+\\infty$)**: Visit child $B$.\n2.  **$B$ (MIN, $\\alpha=-\\infty, \\beta=+\\infty$)**: Visit child $B_2$.\n3.  **$B_2$ (MAX, $\\alpha=-\\infty, \\beta=+\\infty$)**: Visit leaf $4$. Local $\\alpha$ becomes $4$. Visit leaf $2$. $\\max(4,2)=4$. $B_2$ returns value $4$.\n4.  **$B$ (MIN, $\\alpha=-\\infty, \\beta=+\\infty$)**: Receives $4$ from $B_2$. Value is $\\le 4$. $B$ updates its $\\beta$ to $4$. Bounds are $[\\alpha=-\\infty, \\beta=4]$.\n5.  **$B$ (MIN, $\\alpha=-\\infty, \\beta=4$)**: Visit child $B_1$.\n6.  **$B_1$ (MAX, $\\alpha=-\\infty, \\beta=4$)**: Visit leaf $4$. Local $\\alpha$ becomes $4$. **Pruning check**: $\\alpha \\ge \\beta$ ($4 \\ge 4$) is true. **Prune** remaining child leaf (utility $1$). $B_1$ returns $4$.\n7.  **$B$ (MIN, $\\alpha=-\\infty, \\beta=4$)**: Receives $4$ from $B_1$. Value is $\\min(4,4)=4$. $B$ returns final value $4$.\n8.  **$R$ (MAX, $\\alpha=-\\infty, \\beta=+\\infty$)**: Receives $4$ from $B$. Value is $\\ge 4$. $R$ updates its $\\alpha$ to $4$. Bounds are $[\\alpha=4, \\beta=+\\infty]$.\n9.  **$R$ (MAX, $\\alpha=4, \\beta=+\\infty$)**: Visit child $A$.\n10. **$A$ (MIN, $\\alpha=4, \\beta=+\\infty$)**: Visit child $A_2$.\n11. **$A_2$ (MAX, $\\alpha=4, \\beta=+\\infty$)**: Visit leaf $4$. Local $\\alpha$ becomes $\\max(4,4)=4$. Visit leaf $1$. $\\max(4,1)=4$. $A_2$ returns value $4$.\n12. **$A$ (MIN, $\\alpha=4, \\beta=+\\infty$)**: Receives $4$ from $A_2$. Value is $\\le 4$. $A$ updates its $\\beta$ to $4$. **Pruning check**: $\\beta \\le \\alpha$ ($4 \\le 4$) is true. **Prune** remaining child $A_1$ (and its two leaves). $A$ returns $4$.\n13. **$R$ (MAX, $\\alpha=4, \\beta=+\\infty$)**: Receives $4$ from $A$. Value is $\\max(4, 4)=4$. $R$ returns final value $4$.\n\n**Summary for $E_2$**:\n- Root minimax value is $4$.\n- Pruned leaves: 1 (under $B_1$), 2 (under $A_1$). Total: $3$ leaves.\n- Principal Variation (PV): $R \\rightarrow B \\rightarrow B_2 \\rightarrow \\text{leaf}(4)$.\n\n## Evaluation of Options\n\n**A. Under both $E_1$ and $E_2$, the root minimax value is $4$.**\nOur analysis confirms this. The search with $E_1$ resulted in a root value of $4$. The search with $E_2$ also resulted in a root value of $4$. These match the true minimax value of the tree.\nVerdict: **Correct**.\n\n**B. The principal variation differs between $E_1$ and $E_2$: under $E_1$ it is $R \\rightarrow A \\rightarrow A_1 \\rightarrow$ the leaf with utility $4$, whereas under $E_2$ it is $R \\rightarrow B \\rightarrow B_2 \\rightarrow$ the leaf with utility $4$.**\nOur trace for $E_1$ shows the PV is indeed $R \\rightarrow A \\rightarrow A_1 \\rightarrow \\text{leaf}(4)$. Under $E_1$, $A$ is visited first. At $A$, $A_1$ is visited first and has value $4$. Since the minimax value for $A$ is $4$, the PV follows this first-encountered path according to the tie-breaking rule.\nOur trace for $E_2$ shows the PV is $R \\rightarrow B \\rightarrow B_2 \\rightarrow \\text{leaf}(4)$. Under $E_2$, $B$ is visited first. At $B$, $B_2$ is visited first and has value $4$. Since the minimax value for $B$ is $4$, the PV follows this path.\nThe statement accurately describes both principal variations.\nVerdict: **Correct**.\n\n**C. Under both $E_1$ and $E_2$, alpha–beta prunes exactly $3$ terminal leaf evaluations due to the left-right symmetry of the tree and the specified ordering and tie-breaking.**\nOur trace for $E_1$ shows that the leaf with utility $1$ under $A_2$ and the two leaves under $B_2$ (utilities $4$ and $2$) are pruned, for a total of $3$ pruned leaves.\nOur trace for $E_2$ shows that the leaf with utility $1$ under $B_1$ and the two leaves under $A_1$ (utilities $4$ and $2$) are pruned, for a total of $3$ pruned leaves.\nThe statement that exactly $3$ leaves are pruned in both cases is true.\nVerdict: **Correct**.\n\n**D. Although the number of pruned leaves may match under $E_1$ and $E_2$, the identity of the pruned leaves is exactly the same in both searches.**\n- Pruned leaves under $E_1$: $\\{$leaf($1$) under $A_2$, leaf($4$) under $B_2$, leaf($2$) under $B_2$$\\}$.\n- Pruned leaves under $E_2$: $\\{$leaf($1$) under $B_1$, leaf($4$) under $A_1$, leaf($2$) under $A_1$$\\}$.\nThese two sets of leaves are entirely different. The statement is false.\nVerdict: **Incorrect**.\n\n**E. Under $E_2$, because $B_1$ contains a leaf of utility $5$, the root minimax value becomes $5$.**\nThis statement's premise, \"because $B_1$ contains a leaf of utility $5$\", is factually inconsistent with the problem's givens, which state that the leaves under $B_1$ are $\\{4, 1\\}$. A statement based on a false premise cannot be considered a true statement about the problem as defined. Furthermore, even if we were to entertain the hypothetical: if $B_1$'s leaves were $\\{5, 1\\}$, its value would become $\\max(5,1)=5$. Following the $E_2$ search order: $R$ explores $B$; $B$ explores $B_2$ (value $4$), setting $B$'s $\\beta=4$. Then $B$ explores $B_1$. $B_1$ would visit its leaf with value $5$, its local $\\alpha$ would become $5$, and it would immediately prune its other leaf since $\\alpha=5 \\ge \\beta=4$. $B_1$ would return $5$. The value for node $B$ would be $\\min(4, 5)=4$. `R` would then get a value of $4$ from the $B$ branch, setting its $\\alpha=4$, and the rest of the search would proceed as before, yielding a final root value of $4$, not $5$. So, both the premise and the conclusion are false.\nVerdict: **Incorrect**.", "answer": "$$\\boxed{ABC}$$", "id": "3252710"}, {"introduction": "After seeing that good move ordering improves pruning, a natural question arises: how poorly can alpha-beta perform with bad ordering? This problem explores the theoretical lower bound of the algorithm's efficiency by constructing an adversarially anti-optimal scenario where moves are deliberately chosen to prevent cutoffs [@problem_id:3204196]. Deriving the number of evaluations in this worst-case scenario reveals a crucial insight: without effective move ordering, alpha-beta pruning offers no advantage over a simple minimax search, highlighting why ordering heuristics are not just optimizations but essential components.", "problem": "Consider a deterministic, perfect-information, zero-sum, two-player game represented as a full $b$-ary game tree of uniform depth $d$, with the root at a maximizing player (MAX). Assume $b \\geq 2$ and $d \\in \\mathbb{N}$ with $d \\geq 1$. The search uses the standard minimax procedure with $\\alpha$-$\\beta$ pruning, initialized at the root with $\\alpha=-\\infty$ and $\\beta=+\\infty$. A static evaluation function is applied only at the leaves at depth $d$, and there are no transpositions, no memoization, and no extensions or quiescence search.\n\nMove ordering is adversarially anti-optimal in the following sense: at every MAX node, the children are visited in nondecreasing order of their true minimax values (worst-first for MAX), and at every MIN node, the children are visited in nonincreasing order of their true minimax values (worst-first for MIN).\n\nStarting only from the formal semantics of minimax and the definition of $\\alpha$-$\\beta$ bounds and their pruning conditions, derive a closed-form expression for the worst-case total number of static evaluations performed by $\\alpha$-$\\beta$ on this tree in terms of $b$ and $d$. The final answer must be a single analytic expression. No rounding is required and no physical units apply.", "solution": "The user wants a meticulous and rigorous derivation of the number of static evaluations performed by an $\\alpha$-$\\beta$ pruning search algorithm on a specific game tree under a defined worst-case move ordering.\n\n### Step 1: Extract Givens\n- **Game Type**: Deterministic, perfect-information, zero-sum, two-player game.\n- **Tree Structure**: A full $b$-ary game tree of uniform depth $d$.\n- **Player at Root**: Maximizing player (MAX).\n- **Parameter Constraints**: Branching factor $b \\geq 2$. Depth $d \\in \\mathbb{N}$ and $d \\geq 1$.\n- **Search Algorithm**: Minimax with $\\alpha$-$\\beta$ pruning.\n- **Initialization**: At the root, $\\alpha=-\\infty$ and $\\beta=+\\infty$.\n- **Evaluation**: Static evaluation function is applied only at the leaf nodes (depth $d$).\n- **Simplifying Assumptions**: No transpositions, no memoization, no extensions, no quiescence search.\n- **Move Ordering (Adversarially Anti-Optimal)**:\n  - At every MAX node, children are visited in nondecreasing order of their true minimax values.\n  - At every MIN node, children are visited in nonincreasing order of their true minimax values.\n- **Objective**: Derive a closed-form expression for the worst-case total number of static evaluations in terms of $b$ and $d$.\n\n### Step 2: Validate Using Extracted Givens\n- **Scientifically Grounded**: The problem is a standard theoretical exercise in the field of artificial intelligence, specifically concerning adversarial search and game theory. All concepts, including minimax, $\\alpha$-$\\beta$ pruning, game trees, and complexity analysis, are well-established within computer science. The problem is scientifically and mathematically sound.\n- **Well-Posed**: The problem is clearly defined with all necessary parameters ($b, d$), a specific algorithm, a precise tree structure, and an unambiguous move ordering rule. It asks for a specific quantity (number of static evaluations), for which a unique solution is expected under the given constraints.\n- **Objective**: The problem is stated in formal, objective language, free from any subjective or ambiguous terminology.\n\nThe problem does not violate any of the invalidity criteria. It is a well-defined, formal problem in theoretical computer science.\n\n### Step 3: Verdict and Action\nThe problem is **valid**. A full derivation of the solution will be provided.\n\n### Solution Derivation\n\nLet $N$ be the total number of static evaluations performed, which corresponds to the number of leaf nodes visited by the $\\alpha$-$\\beta$ search algorithm. The depth of the root is $0$, and the leaves are at depth $d$.\n\nThe core of the $\\alpha$-$\\beta$ pruning algorithm lies in its ability to prune branches by comparing the current node's potential value against the $\\alpha$ (best-so-far for MAX) and $\\beta$ (best-so-far for MIN) bounds inherited from its ancestors. A prune occurs under two conditions:\n1.  At a MAX node, if its value is discovered to be greater than or equal to an existing $\\beta$ bound $(\\alpha' \\ge \\beta)$, the branch is pruned (beta-cutoff).\n2.  At a MIN node, if its value is discovered to be less than or equal to an existing $\\alpha$ bound $(\\beta' \\le \\alpha)$, the branch is pruned (alpha-cutoff).\n\nThe problem specifies a particular move ordering based on the true minimax values of the nodes. Let $V(n)$ denote the true minimax value of a node $n$.\n\nLet's analyze the search process at an arbitrary node in the tree.\n\n**Case 1: The node is a MAX node, $P$.**\nLet the children of $P$ be $C_1, C_2, \\ldots, C_b$. These are MIN nodes. Thespecified move ordering dictates that they are visited in an order such that $V(C_1) \\leq V(C_2) \\leq \\ldots \\leq V(C_b)$. The true minimax value of $P$ is $V(P) = \\max_i V(C_i) = V(C_b)$.\n\nThe $\\alpha$-$\\beta$ search proceeds as follows:\n1.  $P$ initiates a search on its first child, $C_1$. Let the bounds passed to this search be $(\\alpha_P, \\beta_P)$. After the search on the subtree of $C_1$ completes, it returns the value $V(C_1)$.\n2.  $P$ updates its own $\\alpha$ value: $\\alpha'_P = \\max(\\alpha_P, V(C_1))$.\n3.  $P$ then initiates a search on its second child, $C_2$, with the updated bounds $(\\alpha'_P, \\beta_P)$.\n4.  For a beta-cutoff to occur during the search of $C_2$'s subtree, a value greater than or equal to $\\beta_P$ must be found. The updated $\\alpha'_P$ does not help cause a beta-cutoff. The children are explored in an order that is worst for MAX, meaning the highest-value child, which determines the node's true value, is explored last. This ordering strategy minimizes the chance of early beta-cutoffs.\n\n**Case 2: The node is a MIN node, $M$.**\nLet the children of $M$ be $G_1, G_2, \\ldots, G_b$. These are MAX nodes. The specified move ordering dictates that they are visited such that $V(G_1) \\geq V(G_2) \\geq \\ldots \\geq V(G_b)$. The true minimax value of $M$ is $V(M) = \\min_j V(G_j) = V(G_b)$.\n\nThe search proceeds as follows:\n1.  $M$ initiates a search on its first child, $G_1$, with bounds $(\\alpha_M, \\beta_M)$. The search returns $V(G_1)$.\n2.  $M$ updates its own $\\beta$ value: $\\beta'_M = \\min(\\beta_M, V(G_1))$.\n3.  $M$ then initiates a search on its second child, $G_2$, with the updated bounds $(\\alpha_M, \\beta'_M)$.\n4.  For an alpha-cutoff to occur during the search of $C_2$'s subtree, a value less than or equal to $\\alpha_M$ must be found. The children are explored in an order that is worst for MIN, meaning the lowest-value child, which determines the node's true value, is explored last. This delays any potential alpha-cutoff.\n\n**Crucial Insight from Sibling Node Interaction**\n\nLet's combine these observations. Consider a MAX node $P$ with MIN children $C_1$ and $C_2$, where $V(C_1) \\leq V(C_2)$.\n- $P$ first explores $C_1$. Let's assume this requires exploring $C_1$'s entire subtree. Once done, $P$'s local $\\alpha$ value becomes $V(C_1)$.\n- $P$ then explores $C_2$, passing it the bound $\\alpha = V(C_1)$.\n- $C_2$ is a MIN node. An alpha-cutoff will occur at $C_2$ if it can prove that its own value is less than or equal to the alpha bound it received, i.e., $V(C_2) \\leq V(C_1)$.\n- However, the problem's ordering rule states $V(C_1) \\leq V(C_2)$. This means a cutoff is impossible unless $V(C_1) = V(C_2)$. In the general case where $V(C_1) < V(C_2)$, the bound passed from $P$ to $C_2$ is fundamentally non-pruning. $C_2$ can never prove its value is less than or equal to $V(C_1)$.\n\nLet's formalize this. An alpha-cutoff at a MIN node $M$ with children $G_j$ requires finding a child $G_k$ such that $V(G_k) \\leq \\alpha_{parent}$. When $P$ calls $C_2$, the bound is $\\alpha_{parent} = V(C_1)$. So a cutoff at $C_2$ requires finding a child $G_{2,k}$ such that $V(G_{2,k}) \\leq V(C_1)$.\nBut we know $V(C_2) = \\min_k V(G_{2,k})$. The move ordering gives $V(C_1) \\leq V(C_2)$.\nTherefore, $V(C_1) \\leq \\min_k V(G_{2,k})$, which implies $V(C_1) \\leq V(G_{2,k})$ for all children $k$ of $C_2$.\nThe pruning condition $V(G_{2,k}) \\leq V(C_1)$ can never be satisfied (except in the non-general case of equality).\n\nA symmetric argument applies to MIN nodes. Consider a MIN node $M$ with MAX children $G_1$ and $G_2$, where $V(G_1) \\geq V(G_2)$.\n- $M$ explores $G_1$, and its local $\\beta$ value becomes $V(G_1)$.\n- $M$ then explores $G_2$, passing it the bound $\\beta = V(G_1)$.\n- $G_2$ is a MAX node. A beta-cutoff occurs if it can prove its value is greater than or equal to $\\beta$, i.e., $V(G_2) \\geq V(G_1)$.\n- But the ordering rule states $V(G_1) \\geq V(G_2)$. The prune condition is impossible unless $V(G_1) = V(G_2)$.\n- The bound passed from $M$ to its subsequent child $G_2$ is non-pruning.\n\nThis logic demonstrates that the bounds passed between sibling subtrees are systematically constructed to be useless for pruning. The search of any child's subtree is therefore independent of the results from its previously searched siblings.\n\n**Proof by Induction**\n\nLet $N(d)$ be the number of leaves evaluated in a tree of depth $d$ under the specified conditions. We will prove by induction that $N(d) = b^d$.\n\n**Base Case**: For a tree of depth $d=1$, the root (MAX) has $b$ children which are all leaf nodes. To find the maximum value among them, the algorithm must perform a static evaluation on all $b$ leaves. Thus, $N(1) = b = b^1$. The base case holds.\n\n**Inductive Hypothesis**: Assume that for all depths $k < d$, the number of leaves evaluated in a tree of depth $k$ is $N(k)=b^k$.\n\n**Inductive Step**: Consider a tree of depth $d$. The root is a MAX node with $b$ MIN children, $C_1, \\ldots, C_b$, each being the root of a subtree of depth $d-1$.\n\nThe algorithm examines each child $C_i$ in order from $i=1$ to $b$.\n- For the first child, $C_1$, the search is called with initial bounds $(\\alpha, \\beta) = (-\\infty, +\\infty)$. Since these bounds cannot cause pruning, the number of evaluations within this subtree depends only on its own structure. By the inductive hypothesis for $k=d-1$, the search of $C_1$'s subtree evaluates $b^{d-1}$ leaves. After this, the root's $\\alpha$ is updated to $V(C_1)$.\n- For any subsequent child, $C_i$ (where $i > 1$), the search is called with bounds $(\\alpha_{new}, \\beta_{initial})$, where $\\alpha_{new} = \\max_{j<i} V(C_j)$. As demonstrated above, this $\\alpha_{new}$ bound is non-pruning for the subtree of $C_i$, because $V(C_i) \\geq \\alpha_{new}$ by definition of the move ordering. The initial $\\beta$ bound is also non-pruning. Therefore, the search on the subtree of $C_i$ proceeds as if it had uninformative bounds. By the inductive hypothesis, the number of leaves evaluated for the subtree rooted at $C_i$ is also $b^{d-1}$.\n\nSince each of the $b$ children's subtrees is fully searched (in the recursive sense), the total number of leaf evaluations is the sum of evaluations for each subtree:\n$$\nN(d) = \\sum_{i=1}^{b} N(d-1) = b \\times N(d-1)\n$$\nUsing our inductive hypothesis, $N(d-1) = b^{d-1}$:\n$$\nN(d) = b \\times b^{d-1} = b^d\n$$\nThe inductive step holds.\n\nThus, for the specified adversarially anti-optimal move ordering based on true minimax values, the $\\alpha$-$\\beta$ pruning algorithm is rendered completely ineffective, and it explores every single leaf node of the game tree. The total number of static evaluations is identical to that of the basic minimax algorithm without pruning. The closed-form expression is the total number of leaves in a full $b$-ary tree of depth $d$.\n\nFinal Expression: The total number of static evaluations is $b^d$.", "answer": "$$\n\\boxed{b^{d}}\n$$", "id": "3204196"}, {"introduction": "This practice moves beyond idealized models to a more realistic scenario where algorithmic actions have associated costs. Here, we consider a \"pruning pre-check\" that has a fixed computational overhead but can potentially save a much larger expansion cost [@problem_id:3204290]. By applying principles of expected value, you will determine the critical cost threshold for when this pre-check is beneficial. This exercise demonstrates how to apply cost-benefit analysis to algorithmic decisions, a vital skill for designing intelligent systems that must operate under resource constraints.", "problem": "Consider a deterministic, perfect-information, two-player, zero-sum game tree searched by the minimax procedure with Alpha-Beta pruning. The cost of search is measured as the expected number of node expansions. At a particular internal node that is a minimizing node (a Min node), the current Alpha-Beta bounds are denoted by $\\alpha$ and $\\beta$ with $\\alpha < \\beta$. There remains exactly one unexpanded child subtree. If this subtree is fully evaluated by standard expansion (that is, without any additional pre-checks), it will incur a random expansion cost $K$ with finite mean $\\mathbb{E}[K] = T > 0$. The exact minimax value of the subtree (the value that would be returned by expanding it completely) is a real-valued random variable $V$ with a continuous cumulative distribution function $F$; assume $K$ and $V$ are independent.\n\nYou are given the option to run a pruning pre-check that incurs a fixed computational overhead cost $c > 0$. This pre-check, when performed before any expansion of the subtree, can detect the condition $V \\le \\alpha$ without expanding the subtree; if this condition is detected, the subtree can be pruned immediately at the current Min node (because a value at most $\\alpha$ cannot increase the maximizing ancestor’s best guaranteed value). If the condition is detected, the expansion cost of the subtree is entirely avoided. If the condition is not detected, the subtree must be fully evaluated, incurring the expansion cost $K$, and the pre-check cost $c$ is still paid.\n\nAssume the decision-maker’s objective is to minimize the expected number of node expansions. Derive, from first principles of minimax and Alpha-Beta pruning correctness and using basic expected-value reasoning, the critical cost threshold $c_{\\star}(\\alpha)$ such that it is rational (optimal) to run the pruning pre-check if and only if $c < c_{\\star}(\\alpha)$. Express your final answer as a single closed-form analytic expression in terms of $T$, $F$, and $\\alpha$. Do not provide an inequality; provide only the threshold expression itself. No rounding is required.", "solution": "The problem asks for the critical cost threshold $c_{\\star}(\\alpha)$ for a pruning pre-check at a Min node in an Alpha-Beta search. The decision to run the pre-check should be made if and only if it minimizes the expected total computational cost, which is measured in node expansions. We will determine this threshold by comparing the expected costs of two distinct strategies: one that always expands the subtree and one that first performs the pre-check.\n\nLet $C_1$ be the random cost associated with the first strategy (always expand) and $C_2$ be the random cost associated with the second strategy (use the pre-check). The objective is to find the threshold $c_{\\star}(\\alpha)$ such that it is rational to choose the second strategy if and only if its fixed overhead cost $c$ is less than $c_{\\star}(\\alpha)$. This is equivalent to finding the value of $c$ where the expected costs of both strategies are equal.\n\nStrategy $1$: Always expand the subtree.\nUnder this strategy, the subtree is unconditionally evaluated. The problem states that the cost of a full evaluation is a random variable $K$. Therefore, the cost of this strategy is $C_1 = K$. The expected cost, $\\mathbb{E}[C_1]$, is given by the mean of $K$.\n$$\n\\mathbb{E}[C_1] = \\mathbb{E}[K]\n$$\nWe are given that $\\mathbb{E}[K] = T$.\n$$\n\\mathbb{E}[C_1] = T\n$$\n\nStrategy $2$: Perform the pruning pre-check.\nThis strategy involves a fixed initial cost $c>0$. The subsequent cost depends on the outcome of the pre-check. The pre-check determines if the true minimax value of the subtree, $V$, satisfies the condition $V \\le \\alpha$. At a Min node, if a child's value is less than or equal to the current $\\alpha$ bound, the branch can be pruned.\n\nThere are two possible outcomes for the pre-check:\n1.  The condition $V \\le \\alpha$ is true. The pre-check detects this, and the subtree is pruned. The expansion cost $K$ is completely avoided. The total cost incurred is just the pre-check overhead, $c$. This outcome occurs with probability $P(V \\le \\alpha)$. Since $V$ is a continuous random variable with cumulative distribution function (CDF) $F(v) = P(V \\le v)$, this probability is $F(\\alpha)$.\n2.  The condition $V \\le \\alpha$ is false, i.e., $V > \\alpha$. The pre-check does not lead to pruning. The subtree must be fully evaluated, incurring the expansion cost $K$. The total cost in this case is the sum of the pre-check cost and the expansion cost, $c + K$. This outcome occurs with probability $P(V > \\alpha) = 1 - P(V \\le \\alpha) = 1 - F(\\alpha)$.\n\nThe expected cost of Strategy $2$, $\\mathbb{E}[C_2]$, can be calculated using the law of total expectation, summing over these two mutually exclusive outcomes:\n$$\n\\mathbb{E}[C_2] = (\\text{cost if } V \\le \\alpha) \\cdot P(V \\le \\alpha) + (\\text{expected cost if } V > \\alpha) \\cdot P(V > \\alpha)\n$$\nSubstituting the costs and probabilities:\n$$\n\\mathbb{E}[C_2] = (c) \\cdot F(\\alpha) + \\mathbb{E}[c + K | V > \\alpha] \\cdot (1 - F(\\alpha))\n$$\nSince the pre-check cost $c$ is a constant, $\\mathbb{E}[c + K | V > \\alpha] = c + \\mathbb{E}[K | V > \\alpha]$. The problem states that the expansion cost $K$ and the subtree value $V$ are independent random variables. This independence implies that the conditional expectation of $K$ is equal to its unconditional expectation: $\\mathbb{E}[K | V > \\alpha] = \\mathbb{E}[K] = T$.\nTherefore, the expression for $\\mathbb{E}[C_2]$ simplifies to:\n$$\n\\mathbb{E}[C_2] = c \\cdot F(\\alpha) + (c + T) \\cdot (1 - F(\\alpha))\n$$\nExpanding and simplifying the terms:\n$$\n\\mathbb{E}[C_2] = c \\cdot F(\\alpha) + c \\cdot (1 - F(\\alpha)) + T \\cdot (1 - F(\\alpha))\n$$\n$$\n\\mathbb{E}[C_2] = c \\cdot F(\\alpha) + c - c \\cdot F(\\alpha) + T \\cdot (1 - F(\\alpha))\n$$\n$$\n\\mathbb{E}[C_2] = c + T \\cdot (1 - F(\\alpha))\n$$\n\nThe optimal decision is to run the pre-check if its expected cost is less than the expected cost of not running it:\n$$\n\\mathbb{E}[C_2] < \\mathbb{E}[C_1]\n$$\n$$\nc + T \\cdot (1 - F(\\alpha)) < T\n$$\nThe critical cost threshold, $c_{\\star}(\\alpha)$, is the value of $c$ at which the decision-maker is indifferent, meaning the expected costs are equal:\n$$\nc_{\\star}(\\alpha) + T \\cdot (1 - F(\\alpha)) = T\n$$\nSolving for $c_{\\star}(\\alpha)$:\n$$\nc_{\\star}(\\alpha) = T - T \\cdot (1 - F(\\alpha))\n$$\n$$\nc_{\\star}(\\alpha) = T - T + T \\cdot F(\\alpha)\n$$\n$$\nc_{\\star}(\\alpha) = T \\cdot F(\\alpha)\n$$\nThus, it is rational to run the pre-check if and only if $c < c_{\\star}(\\alpha)$, where $c_{\\star}(\\alpha) = T \\cdot F(\\alpha)$. This result is intuitive: the cost of the test, $c$, should be less than the expected savings, which is the product of the cost that can be saved ($T$) and the probability of being able to save it ($F(\\alpha)$). The problem asks for the expression for the threshold itself.", "answer": "$$\\boxed{T \\cdot F(\\alpha)}$$", "id": "3204290"}]}