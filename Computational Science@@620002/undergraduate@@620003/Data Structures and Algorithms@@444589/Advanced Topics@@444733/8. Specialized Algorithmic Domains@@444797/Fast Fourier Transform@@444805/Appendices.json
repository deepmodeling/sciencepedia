{"hands_on_practices": [{"introduction": "One of the most common applications of the Fast Fourier Transform is spectral analysisâ€”decomposing a signal into its constituent frequencies. However, the raw output of an FFT is an array of values indexed by an integer $k$. This exercise provides hands-on practice in converting this abstract bin index into a meaningful physical frequency, a fundamental skill for anyone working with real-world data from fields like biomedical engineering, audio processing, or communications. [@problem_id:2213513]", "problem": "A biomedical engineer is analyzing an Electromyography (EMG) signal, which measures the electrical activity of skeletal muscles, to study muscle fatigue. The signal is captured from an athlete's leg muscle using a surface electrode. The data is sampled at a constant rate of $f_s = 400$ Hz. For spectral analysis, a segment of the signal containing $N = 128$ consecutive data points is processed using a Fast Fourier Transform (FFT) algorithm. The resulting frequency spectrum reveals a prominent peak at the frequency index $k=10$. This peak represents a dominant frequency component in the muscle's firing rate during a specific contraction. Assuming the index $k=0$ corresponds to the DC (Direct Current) component, determine the physical frequency of this dominant component.\n\nExpress your answer as a numerical value in hertz (Hz).", "solution": "For a discrete-time signal sampled at rate $f_s$ and analyzed with an $N$-point DFT/FFT, the frequency spacing (resolution) is\n$$\n\\Delta f = \\frac{f_s}{N}.\n$$\nThe physical frequency corresponding to index $k$ (with $k=0$ as the DC component) is\n$$\nf_k = k\\,\\Delta f = \\frac{k f_s}{N}.\n$$\nWith $f_s = 400$ Hz, $N = 128$, and $k = 10$,\n$$\nf_{10} = \\frac{10 \\times 400}{128} = \\frac{4000}{128} = \\frac{250}{8} = 31.25 \\text{ Hz}.\n$$\nThus, the dominant component is at 31.25 Hz.", "answer": "$$\\boxed{31.25}$$", "id": "2213513"}, {"introduction": "The convolution theorem is a cornerstone of signal processing, revealing a profound connection between time-domain convolution and frequency-domain multiplication. This property allows the FFT to dramatically accelerate convolution, an operation that is foundational to filtering, image processing, and even polynomial multiplication. This practice guides you through the essential technique of using zero-padding to compute a linear convolution using the FFT, ensuring you understand how to avoid the pitfalls of circular convolution. [@problem_id:1717795]", "problem": "Consider two discrete-time, finite-length signals, $x[n]$ and $h[n]$, which are non-zero only for $n \\ge 0$. The signals are defined as:\n*   $x[n] = 2\\delta[n] + \\delta[n-1] - \\delta[n-2]$\n*   $h[n] = \\delta[n] + 3\\delta[n-1]$\nwhere $\\delta[n]$ is the Kronecker delta function.\n\nLet $y[n]$ represent the linear convolution of $x[n]$ and $h[n]$, i.e., $y[n] = (x * h)[n]$. You are tasked with computing this convolution using frequency-domain methods. Specifically, you must employ the Fast Fourier Transform (FFT) and Inverse Fast Fourier Transform (IFFT) to perform the multiplication in the frequency domain.\n\nDetermine the value of the output sample $y[2]$.", "solution": "We want $y[n]=(x*h)[n]$ via frequency-domain multiplication using an $N$-point FFT/IFFT with $N\\geq L_{x}+L_{h}-1$. The nonzero supports are $x[n]$ on $n\\in\\{0,1,2\\}$ and $h[n]$ on $n\\in\\{0,1\\}$, so $L_{x}=3$, $L_{h}=2$, and $L_{x}+L_{h}-1=4$. Choose $N=4$ so that the $4$-point circular convolution equals the linear convolution after zero-padding.\n\nZero-pad to length $4$:\n$$\nx[0]=2,\\;x[1]=1,\\;x[2]=-1,\\;x[3]=0,\\qquad\nh[0]=1,\\;h[1]=3,\\;h[2]=0,\\;h[3]=0.\n$$\n\nDefine the $N$-point DFT kernel $W_{N}=\\exp(-\\mathrm{j}2\\pi/N)$ with $\\mathrm{j}^{2}=-1$. For $N=4$, $W_{4}=\\exp(-\\mathrm{j}\\pi/2)$ and $W_{4}^{0}=1$, $W_{4}^{1}=-\\mathrm{j}$, $W_{4}^{2}=-1$, $W_{4}^{3}=\\mathrm{j}$.\n\nCompute the $4$-point DFTs $X[k]=\\sum_{n=0}^{3}x[n]W_{4}^{kn}$ and $H[k]=\\sum_{n=0}^{3}h[n]W_{4}^{kn}$:\n- For $X[k]$:\n$$\n\\begin{aligned}\nX[0]&=2+1+(-1)+0=2,\\\\\nX[1]&=2+1(-\\mathrm{j})+(-1)(-1)+0=3-\\mathrm{j},\\\\\nX[2]&=2+1(-1)+(-1)(1)+0=0,\\\\\nX[3]&=2+1(\\mathrm{j})+(-1)(-1)+0=3+\\mathrm{j}.\n\\end{aligned}\n$$\n- For $H[k]$:\n$$\n\\begin{aligned}\nH[0]&=1+3+0+0=4,\\\\\nH[1]&=1+3(-\\mathrm{j})=1-3\\mathrm{j},\\\\\nH[2]&=1+3(-1)=-2,\\\\\nH[3]&=1+3(\\mathrm{j})=1+3\\mathrm{j}.\n\\end{aligned}\n$$\n\nMultiply in the frequency domain: $Y[k]=X[k]H[k]$:\n$$\n\\begin{aligned}\nY[0]&=2\\cdot 4=8,\\\\\nY[1]&=(3-\\mathrm{j})(1-3\\mathrm{j})=-10\\mathrm{j},\\\\\nY[2]&=0\\cdot(-2)=0,\\\\\nY[3]&=(3+\\mathrm{j})(1+3\\mathrm{j})=10\\mathrm{j}.\n\\end{aligned}\n$$\n\nApply the $4$-point IFFT to get $y[n]=\\frac{1}{4}\\sum_{k=0}^{3}Y[k]\\exp(\\mathrm{j}2\\pi kn/4)$. For $n=2$,\n$$\ny[2]=\\frac{1}{4}\\sum_{k=0}^{3}Y[k]\\exp(\\mathrm{j}\\pi k)=\\frac{1}{4}\\sum_{k=0}^{3}Y[k](-1)^{k}.\n$$\nSubstitute $Y[k]$:\n$$\ny[2]=\\frac{1}{4}\\left(8-(-10\\mathrm{j})+0-(10\\mathrm{j})\\right)=\\frac{1}{4}\\left(8+10\\mathrm{j}-10\\mathrm{j}\\right)=\\frac{8}{4}=2.\n$$\n\nBecause $N=4\\geq L_{x}+L_{h}-1$, this IFFT sample equals the desired linear convolution sample, so $y[2]=2$.", "answer": "$$\\boxed{2}$$", "id": "1717795"}, {"introduction": "The remarkable speed of the FFT comes from its elegant divide-and-conquer algorithm, which recursively breaks down a large transform into smaller ones. In many common implementations, such as the iterative Cooley-Tukey algorithm, this process requires an initial reordering of the input data. This exercise demystifies this step by having you perform the bit-reversal permutation, a clever shuffling that pre-sorts the data to perfectly match the algorithm's computational flow. [@problem_id:2213535]", "problem": "A common implementation of the Fast Fourier Transform (FFT) algorithm, specifically the decimation-in-time variant, requires an initial data reordering step. Consider an input data sequence of length $N=8$, denoted by $X = (x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7)$. The reordering is performed using a bit-reversal permutation.\n\nFor a sequence of length $N=2^m$, the bit-reversal of an index $k$ works as follows:\n1. Represent the index $k$ as an $m$-bit binary number. If the binary representation has fewer than $m$ bits, pad it with leading zeros.\n2. Reverse the order of these $m$ bits.\n3. The new integer value of the reversed binary string is the bit-reversed index, which we can denote as $\\text{rev}(k)$.\n\nThe permutation rule states that the data point originally at index $k$ is moved to the position with index $\\text{rev}(k)$. Your task is to determine the final, reordered sequence of data points after applying this permutation to the initial sequence $X$.\n\nWhich of the following represents the correctly reordered sequence?\n\nA. $(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7)$\n\nB. $(x_0, x_4, x_2, x_6, x_1, x_5, x_3, x_7)$\n\nC. $(x_7, x_6, x_5, x_4, x_3, x_2, x_1, x_0)$\n\nD. $(x_7, x_3, x_5, x_1, x_6, x_2, x_4, x_0)$", "solution": "We have $N=8$ and $N=2^{m}$, hence $m=3$. For each index $k \\in \\{0,1,2,3,4,5,6,7\\}$, write its $3$-bit binary representation, reverse the $3$ bits, and interpret the result as $\\operatorname{rev}(k)$. Compute:\n$$\n\\begin{aligned}\n&k=0:\\ 000 \\mapsto 000 \\Rightarrow \\operatorname{rev}(0)=0,\\\\\n&k=1:\\ 001 \\mapsto 100 \\Rightarrow \\operatorname{rev}(1)=4,\\\\\n&k=2:\\ 010 \\mapsto 010 \\Rightarrow \\operatorname{rev}(2)=2,\\\\\n&k=3:\\ 011 \\mapsto 110 \\Rightarrow \\operatorname{rev}(3)=6,\\\\\n&k=4:\\ 100 \\mapsto 001 \\Rightarrow \\operatorname{rev}(4)=1,\\\\\n&k=5:\\ 101 \\mapsto 101 \\Rightarrow \\operatorname{rev}(5)=5,\\\\\n&k=6:\\ 110 \\mapsto 011 \\Rightarrow \\operatorname{rev}(6)=3,\\\\\n&k=7:\\ 111 \\mapsto 111 \\Rightarrow \\operatorname{rev}(7)=7.\n\\end{aligned}\n$$\nThe permutation rule is: the data $x_{k}$ moves to index $\\operatorname{rev}(k)$. Let the reordered sequence be $Y=(Y_{0},Y_{1},\\dots,Y_{7})$, where $Y_{j}$ denotes the element at final index $j$. Since bit-reversal is an involution, i.e., $\\operatorname{rev}(\\operatorname{rev}(k))=k$, we have $Y_{j}=x_{\\operatorname{rev}(j)}$. Using the computed values:\n$$\n\\begin{aligned}\n&Y_{0}=x_{\\operatorname{rev}(0)}=x_{0},\\quad Y_{1}=x_{\\operatorname{rev}(1)}=x_{4},\\quad Y_{2}=x_{\\operatorname{rev}(2)}=x_{2},\\quad Y_{3}=x_{\\operatorname{rev}(3)}=x_{6},\\\\\n&Y_{4}=x_{\\operatorname{rev}(4)}=x_{1},\\quad Y_{5}=x_{\\operatorname{rev}(5)}=x_{5},\\quad Y_{6}=x_{\\operatorname{rev}(6)}=x_{3},\\quad Y_{7}=x_{\\operatorname{rev}(7)}=x_{7}.\n\\end{aligned}\n$$\nTherefore, the reordered sequence is $(x_{0},x_{4},x_{2},x_{6},x_{1},x_{5},x_{3},x_{7})$, which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "2213535"}]}