{"hands_on_practices": [{"introduction": "At the core of Grover's algorithm lies a \"black-box\" component known as the oracle. This quantum operator is responsible for recognizing and \"marking\" the solution to our search problem by applying a phase shift. This exercise demystifies the oracle by challenging you to construct its various mathematical and circuit-based representations for a specific search task, solidifying your understanding of how the target state is identified within the quantum system. [@problem_id:1426367]", "problem": "In the theory of quantum computation, Grover's algorithm provides a significant speedup for searching an unstructured database. A key component of the algorithm is a \"black-box\" operator called an oracle, $U_f$, which identifies the desired item(s).\n\nConsider a 3-qubit quantum register. The state of this system can be described as a vector in an 8-dimensional complex Hilbert space spanned by the computational basis states $\\{|000\\rangle, |001\\rangle, |010\\rangle, |011\\rangle, |100\\rangle, |101\\rangle, |110\\rangle, |111\\rangle\\}$, ordered according to their binary-to-integer value.\n\nThe oracle operator $U_f$ acts on a basis state $|x\\rangle$ according to the rule $U_f|x\\rangle = (-1)^{f(x)}|x\\rangle$, where $f(x)$ is a Boolean function such that $f(x)=1$ if $|x\\rangle$ is the marked state we are searching for, and $f(x)=0$ otherwise.\n\nFor this problem, we are searching for a single marked item, which is the state $|\\omega\\rangle = |101\\rangle$.\n\nWhich of the following expressions correctly represent the oracle operator $U_f$ for this specific search problem? Select all that apply.\n\nIn the options below:\n- $I$ denotes the $8 \\times 8$ identity matrix.\n- $X_k$ denotes the Pauli-X operator acting on the $k$-th qubit, where qubits are indexed from left to right as 0, 1, 2. For instance, $X_1$ is shorthand for the operator $I_0 \\otimes X_1 \\otimes I_2$.\n- $Z_k$ denotes the Pauli-Z operator acting on the $k$-th qubit.\n- $CCZ$ denotes the controlled-controlled-Z gate, which flips the sign of the basis state $|111\\rangle$ and leaves all other computational basis states unchanged.\n\nA. $I - 2 |101\\rangle\\langle 101|$\n\nB. $I - |101\\rangle\\langle 101|$\n\nC. $Z_0 \\otimes Z_2$\n\nD. $X_1 \\cdot CCZ \\cdot X_1$\n\nE. The $8 \\times 8$ diagonal matrix `diag(1, 1, 1, 1, 1, -1, 1, 1)`", "solution": "The oracle for a single marked state $|\\omega\\rangle=|101\\rangle$ is defined by $U_{f}|x\\rangle=(-1)^{f(x)}|x\\rangle$, where $f(x)=1$ if and only if $|x\\rangle=|101\\rangle$, and $f(x)=0$ otherwise. Therefore, $U_{f}$ flips the sign of $|101\\rangle$ and leaves all other computational basis states unchanged.\n\nOption A: Consider the operator $U=I-2|101\\rangle\\langle 101|$. For any state $|\\psi\\rangle=\\alpha|101\\rangle+|\\psi_{\\perp}\\rangle$ with $\\langle 101|\\psi_{\\perp}\\rangle=0$, we have\n$$\nU|\\psi\\rangle=(I-2|101\\rangle\\langle 101|)(\\alpha|101\\rangle+|\\psi_{\\perp}\\rangle)=\\alpha|101\\rangle-2\\alpha|101\\rangle+|\\psi_{\\perp}\\rangle=-\\alpha|101\\rangle+|\\psi_{\\perp}\\rangle.\n$$\nThus, $U|101\\rangle=-|101\\rangle$ and $U|x\\rangle=|x\\rangle$ for all $|x\\rangle\\neq|101\\rangle$, which matches the required action. Hence A is correct.\n\nOption B: Consider $U=I-|101\\rangle\\langle 101|$. Acting on $|101\\rangle$ gives\n$$\nU|101\\rangle=(I-|101\\rangle\\langle 101|)|101\\rangle=|101\\rangle-|101\\rangle=0,\n$$\nwhich is not unitary and does not implement a phase flip. Hence B is incorrect.\n\nOption C: The operator $Z_{0}\\otimes Z_{2}$ acts on a basis state $|q_{0}q_{1}q_{2}\\rangle$ by the phase $(-1)^{q_{0}}(-1)^{q_{2}}=(-1)^{q_{0}+q_{2}}$. Evaluating on $|101\\rangle$ gives $(-1)^{1+1}=(-1)^{2}=1$, so $|101\\rangle$ is not phase-flipped, while states with $q_{0}\\neq q_{2}$ are flipped. This does not match the oracle. Hence C is incorrect.\n\nOption D: Let $U=X_{1}\\cdot CCZ\\cdot X_{1}$. The $CCZ$ applies a $-1$ phase only to $|111\\rangle$. Conjugation by $X_{1}$ maps $|q_{0}q_{1}q_{2}\\rangle$ to $|q_{0}(q_{1}\\oplus 1)q_{2}\\rangle$ before $CCZ$, so a $-1$ is applied exactly when $q_{0}=1$, $q_{1}\\oplus 1=1$, and $q_{2}=1$, i.e., when $(q_{0},q_{1},q_{2})=(1,0,1)$. The final $X_{1}$ restores the middle qubit. Thus $U$ flips the sign of $|101\\rangle$ and leaves all other computational basis states unchanged. Hence D is correct.\n\nOption E: With the computational basis ordered as $|000\\rangle,|001\\rangle,|010\\rangle,|011\\rangle,|100\\rangle,|101\\rangle,|110\\rangle,|111\\rangle$, the diagonal matrix\n$$\n\\mathrm{diag}(1,1,1,1,1,-1,1,1)\n$$\nimplements a $-1$ phase only on $|101\\rangle$ (the 6th basis state, corresponding to integer 5) and a $+1$ phase on all others, exactly matching the oracle. Hence E is correct.\n\nSince $I-2|101\\rangle\\langle 101|$ acts as the reflection that flips the sign of $|101\\rangle$ only, and the given diagonal matrix applies the corresponding phase pattern, and $X_{1}\\cdot CCZ\\cdot X_{1}$ implements the same phase flip via conjugation, the correct options are A, D, and E.", "answer": "$$\\boxed{ADE}$$", "id": "1426367"}, {"introduction": "Grover's algorithm achieves its remarkable speedup not through a single operation, but through a carefully calculated number of iterations that amplify the probability of finding the marked item. This practice explores the critical relationship between the number of solutions and the optimal number of iterations. By analyzing a special case where the fraction of marked items is $M = N/4$, you will see how a single Grover iteration can yield a 100% success probability, providing a clear and elegant demonstration of the algorithm's underlying geometric rotation. [@problem_id:1426374]", "problem": "A quantum computing researcher is tasked with searching a large, unstructured database containing a total of $N$ items. The goal is to identify items that possess a specific property, which we will call \"marked\" items. The researcher uses Grover's quantum search algorithm for this task.\n\nIt is known from the database's specification that the number of marked items, $M$, is exactly one-quarter of the total number of items, i.e., $M = N/4$. The algorithm begins with the system in an equal superposition of all possible states. A single Grover iteration then applies a specific unitary transformation to the state of the system.\n\nAssuming the quantum computer operates without any errors, determine the smallest non-negative integer number of Grover iterations, $k_{opt}$, required to maximize the probability of measuring a marked item upon measurement. Additionally, calculate this maximum success probability, $P_{max}$.\n\nProvide your answer as a pair of numbers for $(k_{opt}, P_{max})$.", "solution": "Let $N$ be the total number of database items and $M$ the number of marked items. In Grover’s algorithm, the dynamics are confined to the two-dimensional subspace spanned by the uniform superpositions over marked and unmarked states. Denote the equal superposition over all items by $|s\\rangle$ and parameterize its overlap with the marked subspace by an angle $\\theta$ defined through\n$$\n\\sin^{2}(\\theta)=\\frac{M}{N}.\n$$\nA single Grover iteration effects a rotation by angle $2\\theta$ in this plane toward the marked subspace. After $k$ Grover iterations, the state has an amplitude in the marked subspace given by\n$$\n\\sin\\big((2k+1)\\theta\\big),\n$$\nso the success probability after $k$ iterations is\n$$\nP_{k}=\\sin^{2}\\big((2k+1)\\theta\\big).\n$$\nGiven $M=\\frac{N}{4}$, we have\n$$\n\\sin^{2}(\\theta)=\\frac{1}{4}\\quad\\Rightarrow\\quad \\sin(\\theta)=\\frac{1}{2}\\quad\\Rightarrow\\quad \\theta=\\arcsin\\!\\left(\\frac{1}{2}\\right)=\\frac{\\pi}{6}.\n$$\nTherefore,\n$$\nP_{k}=\\sin^{2}\\!\\left((2k+1)\\frac{\\pi}{6}\\right).\n$$\nTo maximize $P_{k}$ over non-negative integers $k$, we seek the smallest non-negative $k$ such that the argument of the sine function is $\\frac{\\pi}{2}+m\\pi$ for an integer $m$. For the maximum value of 1, we set the argument to $\\pi/2$:\n$$\n(2k+1)\\frac{\\pi}{6}=\\frac{\\pi}{2}\n$$\nSolving for $k$ gives $2k+1=3$, which yields $k=1$. Substituting this back into the probability formula yields\n$$\nP_{\\max}=P_1=\\sin^{2}\\!\\left((2(1)+1)\\frac{\\pi}{6}\\right)=\\sin^{2}\\!\\left(\\frac{3\\pi}{6}\\right)=\\sin^{2}\\!\\left(\\frac{\\pi}{2}\\right)=1.\n$$\nHence the smallest non-negative integer number of Grover iterations that maximizes the success probability is $k_{\\text{opt}}=1$, and the maximum success probability is $P_{\\max}=1$.", "answer": "$$\\boxed{\\begin{pmatrix} 1 & 1 \\end{pmatrix}}$$", "id": "1426374"}, {"introduction": "While Grover's algorithm provides a provable quadratic speedup for unstructured search problems, it is crucial to understand its context and limitations. Quantum search is not a universal replacement for all classical search methods. This exercise asks you to compare quantum and classical approaches on structured data, highlighting that classical algorithms like binary search can be far superior when they can exploit inherent order in the data. Mastering this distinction is key to knowing when to apply Grover's algorithm effectively. [@problem_id:3237894]", "problem": "You are given several search tasks defined on different data access models. Each task specifies a database structure and the allowed primitive query. A single primitive query counts as one unit of cost regardless of classical or quantum computation, and non-query computation is free. Quantum access is via an oracle compatible with Grover’s algorithm that, when applicable, flips the phase of basis states corresponding to marked items according to a Boolean predicate. Classical access is via comparison and inspection primitives as specified by each task. Choose all tasks that most clearly exemplify a situation where a classical comparison-based algorithm such as binary search yields strictly better asymptotic query complexity than Grover’s algorithm.\n\nA. Database: a sorted array of $N$ distinct keys in ascending order. Task: given a query key $x$, find the index $i$ such that the array element $a_i$ equals $x$ if it exists. Classical access: a comparison primitive that, on input an index $i$, returns one of $\\{\\text{less}, \\text{equal}, \\text{greater}\\}$ indicating whether $x$ is less than, equal to, or greater than $a_i$. Quantum access: an oracle that, on input $i$, marks $i$ if and only if $a_i = x$.\n\nB. Database: an unsorted list of $N$ items. Task: find any item satisfying a given predicate $P$ that is available as a Boolean function. Classical access: inspect an item to evaluate $P$. Quantum access: an oracle that marks exactly those indices $i$ for which $P$ holds on the $i$-th item.\n\nC. Database: a hash table with $N$ buckets storing keys uniformly at random. Task: given a hash value $h$, find some stored key whose hash equals $h$. Classical access: compute the hash of a probed key and compare it to $h$; bucket order is arbitrary. Quantum access: an oracle that marks indices of keys whose hash equals $h$.\n\nD. Database: a rotated sorted array of $N$ distinct keys, i.e., an array obtained by taking a strictly increasing array and rotating it by an unknown pivot so that the array remains piecewise increasing with a single breakpoint. Task: find the minimum element. Classical access: a comparison primitive that, on input indices $i$ and $j$, returns whether $a_i < a_j$. Quantum access: an oracle that marks an index $i$ if and only if $a_i$ is the unique minimum.", "solution": "We are looking for tasks where the classical query complexity $T_C(N)$ is strictly better than the quantum query complexity using Grover's algorithm, $T_Q(N)$, i.e., $T_C(N) = o(T_Q(N))$. For a search in a space of size $N$ for a single item, Grover's algorithm has a complexity of $T_Q(N) = O(\\sqrt{N})$.\n\n- **A. Sorted array:** This structure allows for classical **binary search**, which has a query complexity of $T_C(N) = O(\\log N)$. Since $\\log N = o(\\sqrt{N})$, the classical algorithm is strictly better. This option is correct.\n\n- **B. Unsorted list:** This is a classic unstructured search. The best classical algorithm is a linear scan, $T_C(N) = O(N)$. Grover's algorithm, with $T_Q(N) = O(\\sqrt{N})$, provides a quadratic speedup. This option is incorrect.\n\n- **C. Hash table (reverse lookup):** Since the bucket order is arbitrary, the task becomes an unstructured search over the stored keys. Classical complexity is $T_C(N) = O(N)$, which is outperformed by Grover's $T_Q(N) = O(\\sqrt{N})$. This option is incorrect.\n\n- **D. Rotated sorted array:** The structure of the array (a single pivot) can be exploited by a **modified binary search** to find the minimum element in $T_C(N) = O(\\log N)$ time. Grover's algorithm would require $T_Q(N) = O(\\sqrt{N})$. Since $\\log N = o(\\sqrt{N})$, the classical algorithm is strictly better. This option is correct.\n\nThus, tasks A and D are the correct choices.", "answer": "$$\\boxed{AD}$$", "id": "3237894"}]}