{"hands_on_practices": [{"introduction": "This first exercise provides a direct, hands-on experience with the classic 2-approximation algorithm for Vertex Cover. By tracing the algorithm's steps on a small, manageable graph, you will solidify your understanding of how a maximal matching is used to construct a valid vertex cover. This practice is essential for learning how to evaluate an algorithm's performance by comparing its output to the true optimal solution [@problem_id:1481691].", "problem": "In the field of computational complexity theory, the Vertex Cover problem is a classic example of an NP-hard problem. Given a graph, the goal is to find a subset of vertices of minimum size such that every edge in the graph is connected to at least one vertex in the subset. Such a subset is called a minimal (or optimal) vertex cover, and its size for a graph $G$ is denoted by $\\tau(G)$.\n\nSince finding the optimal solution is computationally difficult for large graphs, approximation algorithms are often used. One such algorithm is the maximal matching-based 2-approximation algorithm. It guarantees a solution that is no more than twice the size of the optimal solution. The algorithm proceeds as follows:\n1.  Begin with an empty set for the matching, $M = \\emptyset$. A matching is a set of edges where no two edges share a common vertex.\n2.  Construct a **maximal matching**. A matching is maximal if it cannot be extended by adding any other edge from the graph. For this problem, you will construct the maximal matching using a specific greedy procedure: Iterate through a pre-defined list of edges, and for each edge, add it to $M$ if and only if it does not share an endpoint with any edge already in $M$.\n3.  The resulting vertex cover, which we will call $C_{approx}$, is formed by taking all endpoints of the edges in the maximal matching $M$.\n\nConsider an undirected graph $G = (V, E)$ with the vertex set $V = \\{A, B, C, D, E, F, G, H\\}$ and the edge set $E = \\{(A,B), (A,C), (B,C), (C,D), (D,E), (D,F), (E,F), (F,G), (G,H)\\}$.\n\nTo construct the maximal matching, process the edges from the set $E$ in the following specific order:\n$(G,H), (F,G), (E,F), (D,F), (D,E), (C,D), (B,C), (A,C), (A,B)$.\n\nYour task is to calculate the approximation ratio for this particular execution. The approximation ratio is defined as the ratio of the size of the generated vertex cover to the size of the optimal vertex cover, i.e., $\\frac{|C_{approx}|}{\\tau(G)}$.\n\nCalculate this approximation ratio. Express your final answer as a decimal number rounded to two significant figures.", "solution": "We follow the specified greedy construction of a maximal matching. Initialize $M=\\emptyset$ and process edges in the given order, adding an edge if it shares no endpoint with any edge already in $M$.\n\n- Process $(G,H)$: add, so $M=\\{(G,H)\\}$ with used endpoints $\\{G,H\\}$.\n- $(F,G)$ shares $G$, so skip.\n- $(E,F)$ shares no endpoint with $\\{G,H\\}$, so add: $M=\\{(G,H),(E,F)\\}$ with used endpoints $\\{E,F,G,H\\}$.\n- $(D,F)$ shares $F$, so skip.\n- $(D,E)$ shares $E$, so skip.\n- $(C,D)$ shares no endpoint with $\\{E,F,G,H\\}$, so add: $M=\\{(G,H),(E,F),(C,D)\\}$ with used endpoints $\\{C,D,E,F,G,H\\}$.\n- $(B,C)$ shares $C$, so skip.\n- $(A,C)$ shares $C$, so skip.\n- $(A,B)$ shares no endpoint with current $M$, so add: $M=\\{(G,H),(E,F),(C,D),(A,B)\\}$ with used endpoints $\\{A,B,C,D,E,F,G,H\\}$.\n\nThus the maximal matching has size $|M|=4$, and the 2-approximation algorithm outputs the vertex cover $C_{approx}$ consisting of all endpoints of edges in $M$, hence $C_{approx}=V$ and\n$$\n|C_{approx}|=8.\n$$\n\nNext, compute the optimal vertex cover size $\\tau(G)$. A general lower bound is given by the size of a maximum matching $\\nu(G)$:\n$$\n\\tau(G)\\geq \\nu(G).\n$$\nSince we found a matching of size $4$, $\\nu(G)\\geq 4$, hence $\\tau(G)\\geq 4$.\n\nWe show $\\tau(G)\\geq 5$. The subgraph on $\\{A,B,C\\}$ is a triangle, so any vertex cover must include at least $2$ vertices from $\\{A,B,C\\}$. Similarly, the subgraph on $\\{D,E,F\\}$ is a triangle, so it must include at least $2$ vertices from $\\{D,E,F\\}$. If $\\tau(G)=4$, then the cover consists of exactly $2$ from $\\{A,B,C\\}$ and $2$ from $\\{D,E,F\\}$, leaving no vertex from $\\{G,H\\}$. This would leave the edge $(G,H)$ uncovered, a contradiction. Therefore\n$$\n\\tau(G)\\geq 5.\n$$\n\nWe now exhibit a vertex cover of size $5$ to prove optimality. Take\n$$\nS=\\{A,C,D,E,G\\}.\n$$\nThis set covers:\n- the triangle on $\\{A,B,C\\}$ via $A$ and $C$;\n- the edge $(C,D)$ via $C$ or $D$;\n- the triangle on $\\{D,E,F\\}$ via $D$ and $E$;\n- the path edges $(F,G)$ and $(G,H)$ via $G$.\n\nHence $S$ is a vertex cover of size $5$, so\n$$\n\\tau(G)=5.\n$$\n\nTherefore, the approximation ratio is\n$$\n\\frac{|C_{approx}|}{\\tau(G)}=\\frac{8}{5}=1.6,\n$$\nwhich in decimal form to two significant figures is $1.6$.", "answer": "$$\\boxed{1.6}$$", "id": "1481691"}, {"introduction": "An approximation guarantee tells us the worst-case performance of an algorithm, but it is most insightful when we can find a concrete instance that meets this bound. This practice explores such a \"tight\" example, where the 2-approximation algorithm yields a result that is exactly twice the size of the optimal solution [@problem_id:1412471]. Analyzing this scenario is crucial for developing a deep intuition for why the approximation factor is precisely 2 and not some smaller value.", "problem": "A systems architect is designing a monitoring strategy for a distributed computing network. The network is modeled as a graph $G=(V, E)$, where the set of vertices $V$ represents the servers and the set of edges $E$ represents direct communication links. A \"monitoring set\" is a subset of servers $C \\subseteq V$ such that every communication link in $E$ is connected to at least one server in $C$. This is formally known as a Vertex Cover.\n\nFinding a monitoring set of minimum possible size is an NP-hard problem. Therefore, the architect employs an approximation algorithm. The algorithm works as follows:\n1. Start with an empty monitoring set, $C = \\emptyset$.\n2. While there are still uncovered links in the network, pick an arbitrary uncovered link $(u, v)$.\n3. Add both servers $u$ and $v$ to the monitoring set $C$.\n4. All links connected to either $u$ or $v$ are now considered covered.\n5. Repeat until all links are covered.\n\nThis procedure is equivalent to finding a maximal matching $M$ in the graph and then forming the vertex cover $C$ from all vertices that are endpoints of edges in $M$.\n\nTo stress-test the algorithm, the architect constructs a special test-case graph. This graph, $G$, is composed of $k=50$ separate, disjoint components. Each component is a \"star graph\" of type $K_{1,n}$, where $n=10$. A $K_{1,n}$ graph consists of one central server connected by links to $n$ peripheral servers. Thus, the entire graph $G$ consists of 50 independent star-shaped clusters of servers.\n\nFor this test, a specific maximal matching $M$ is generated by selecting exactly one link from each of the 50 star-graph components.\n\nWhat is the total number of servers in the monitoring set produced by the described algorithm for this specific graph and chosen maximal matching?", "solution": "The algorithm constructs its monitoring set from the endpoints of a maximal matching. If $M$ is the chosen maximal matching, then the monitoring set is\n$$\nC=\\bigcup_{(u,v)\\in M}\\{u,v\\},\n$$\nso the cardinality satisfies\n$$\n|C|=\\sum_{(u,v)\\in M}2=2|M|.\n$$\nThe graph $G$ is the disjoint union of $k=50$ copies of the star $K_{1,n}$ with $n=10$. In a star $K_{1,n}$, every edge is incident to the unique center, so a matching can contain at most one edge; consequently, selecting one edge in each star yields a matching that has exactly one edge per component and is maximal. Therefore, with the specified construction—choosing exactly one edge from each of the $50$ components—we have\n$$\n|M|=k=50.\n$$\nApplying the relation between the monitoring set and the matching size gives\n$$\n|C|=2|M|=2k=2\\cdot 50=100.\n$$\nThus, the monitoring set produced by the algorithm contains $100$ servers.", "answer": "$$\\boxed{100}$$", "id": "1412471"}, {"introduction": "Moving from the basic problem to the more general Weighted Vertex Cover, this exercise challenges you to analyze a seemingly intuitive but ultimately flawed greedy heuristic. By dissecting why a \"cheaper-first\" strategy fails, you will learn to identify subtle pitfalls in algorithm design and appreciate the rigor required to develop provably correct approximation schemes [@problem_id:3281692]. This practice sharpens your critical thinking and highlights that locally optimal choices do not always lead to a globally good solution.", "problem": "You are studying the Weighted Vertex Cover (WVC) problem: given an undirected graph $G=(V,E)$ with a nonnegative weight function $w:V \\to \\mathbb{R}_{\\ge 0}$, a vertex cover is a set $C \\subseteq V$ such that every edge in $E$ is incident to at least one vertex in $C$. The cost of a cover $C$ is $\\sum_{v \\in C} w(v)$. The matching-based $2$-approximation for WVC that is typically taught in algorithms courses selects both endpoints of each edge in a maximal matching. Consider instead the following flawed variant that tries to reduce cost by always preferring cheaper endpoints:\n\nAlgorithm Cheaper-From-Matching:\n1. Compute any maximal matching $M$ in $G$.\n2. Initialize $C' \\leftarrow \\varnothing$.\n3. For each edge $\\{u,v\\} \\in M$, add to $C'$ the cheaper endpoint $\\arg\\min\\{w(u),w(v)\\}$.\n4. While there exists an uncovered edge $\\{x,y\\} \\in E$ with $\\{x,y\\} \\cap C' = \\varnothing$, add to $C'$ the cheaper endpoint $\\arg\\min\\{w(x),w(y)\\}$.\n5. Output $C'$.\n\nConstruct the following family of instances parameterized by an integer $k \\ge 3$. Let $G_k$ be a star on $k+1$ vertices with center vertex $u$ and leaves $v_1,\\dots,v_k$, i.e., $E=\\{\\{u,v_i\\}: i \\in \\{1,\\dots,k\\}\\}$. Define the weight function by $w(u)=2$ and $w(v_i)=1$ for all $i \\in \\{1,\\dots,k\\}$. Suppose the maximal matching $M$ chosen in Step 1 is $\\{\\{u,v_1\\}\\}$.\n\nUsing only core definitions (vertex cover, maximal matching, and cost), run Algorithm Cheaper-From-Matching on $G_k$ and compute the approximation ratio, defined as the total weight of the algorithm’s output divided by the optimal WVC cost, as a simplified closed-form expression in $k$. No rounding is required.", "solution": "The problem asks for the approximation ratio of a specific algorithm, named \"Cheaper-From-Matching,\" on a particular family of graphs $G_k$. The approximation ratio is defined as the cost of the vertex cover produced by the algorithm divided by the cost of an optimal vertex cover. To compute this ratio, we must first determine the cost of the optimal solution and then determine the cost of the solution produced by the algorithm.\n\nThe problem is defined on a star graph $G_k = (V,E)$ with $k+1$ vertices, where $k \\ge 3$ is an integer.\nThe vertex set is $V = \\{u, v_1, v_2, \\dots, v_k\\}$, where $u$ is the center vertex and $v_1, \\dots, v_k$ are the leaf vertices.\nThe edge set is $E = \\{\\{u, v_i\\} \\mid i \\in \\{1, 2, \\dots, k\\}\\}$.\nThe weight function is given by $w(u) = 2$ and $w(v_i) = 1$ for all $i \\in \\{1, \\dots, k\\}$.\n\nFirst, we find the cost of an optimal Weighted Vertex Cover (WVC) for $G_k$. A vertex cover is a subset of vertices $C \\subseteq V$ such that every edge has at least one endpoint in $C$.\nThere are two primary candidates for a minimal vertex cover in a star graph:\n$1$. The set containing only the center vertex, $C_1 = \\{u\\}$. This set covers all edges $\\{u, v_i\\}$ because $u$ is an endpoint of every edge. The cost of this cover is $\\text{cost}(C_1) = w(u) = 2$.\n$2$. The set containing all the leaf vertices, $C_2 = \\{v_1, v_2, \\dots, v_k\\}$. For each edge $\\{u, v_i\\}$, the vertex $v_i$ is in $C_2$, so all edges are covered. The cost of this cover is $\\text{cost}(C_2) = \\sum_{i=1}^{k} w(v_i) = \\sum_{i=1}^{k} 1 = k$.\n\nAny other vertex cover must be a superset of one of these minimal covers. For example, if a cover $C$ does not contain $u$, it must contain all $v_i$ to cover all edges, which means $C_2 \\subseteq C$. If a cover $C$ contains $u$, it is a superset of $C_1$. Therefore, the optimal (minimum cost) vertex cover must be either $C_1$ or $C_2$.\n\nThe cost of the optimal WVC, denoted $C_{OPT}$, is the minimum of the costs of these two covers:\n$\\text{cost}(C_{OPT}) = \\min(\\text{cost}(C_1), \\text{cost}(C_2)) = \\min(2, k)$.\nThe problem specifies that $k \\ge 3$. Since $k \\ge 3$, it follows that $k > 2$. Therefore, the minimum cost is $2$.\nThe optimal cost for the WVC on $G_k$ is $2$, achieved by the vertex cover $\\{u\\}$.\n\nNext, we run the algorithm \"Cheaper-From-Matching\" on $G_k$ to find the vertex cover it produces, which we denote as $C'$.\nThe algorithm is executed as follows:\nStep 1: A maximal matching $M$ is computed. The problem states that the matching chosen is $M = \\{\\{u, v_1\\}\\}$. This is a maximal matching because vertex $u$ is an endpoint of all edges in $G_k$, so once $u$ is matched in $\\{u, v_1\\}$, no other edge can be added to the matching.\n\nStep 2: The cover set is initialized: $C' \\leftarrow \\varnothing$.\n\nStep 3: For each edge in $M$, add the cheaper endpoint to $C'$. The only edge in $M$ is $\\{u, v_1\\}$. We compare the weights of its endpoints: $w(u) = 2$ and $w(v_1) = 1$. The cheaper endpoint is $v_1$. So, we add $v_1$ to the cover.\n$C' \\leftarrow \\{v_1\\}$.\n\nStep 4: This step iterates as long as there are uncovered edges. An edge $\\{x,y\\}$ is uncovered if $\\{x,y\\} \\cap C' = \\varnothing$.\nCurrently, $C' = \\{v_1\\}$. The edges of the graph are $E = \\{\\{u,v_1\\}, \\{u,v_2\\}, \\dots, \\{u,v_k\\}\\}$.\nThe edge $\\{u, v_1\\}$ is covered because $v_1 \\in C'$.\nThe edges $\\{u, v_2\\}, \\{u, v_3\\}, \\dots, \\{u, v_k\\}$ are uncovered, as $u \\notin C'$ and for any $i \\in \\{2, \\dots, k\\}$, $v_i \\notin C'$.\nThe `while` loop begins.\n- In the first iteration, the algorithm selects an uncovered edge, for example, $\\{u, v_2\\}$. It adds the cheaper endpoint, $\\arg\\min\\{w(u), w(v_2)\\}$, to $C'$. Since $w(u)=2$ and $w(v_2)=1$, the vertex $v_2$ is added. Now, $C' = \\{v_1, v_2\\}$.\n- The set of uncovered edges is now $\\{\\{u, v_3\\}, \\dots, \\{u, v_k\\}\\}$.\n- The loop continues. In the next iteration, it might select $\\{u, v_3\\}$. The cheaper endpoint is $v_3$, so it is added to $C'$. Now, $C' = \\{v_1, v_2, v_3\\}$.\n- This process repeats for all remaining uncovered edges $\\{u, v_i\\}$ for $i \\in \\{4, \\dots, k\\}$. Each time, the cheaper vertex $v_i$ is added to $C'$.\n- The loop terminates when all edges are covered. This occurs after the vertices $v_2, v_3, \\dots, v_k$ have all been added to $C'$.\n\nStep 5: The algorithm outputs the final set $C'$.\nThe final cover produced by the algorithm is $C' = \\{v_1, v_2, \\dots, v_k\\}$.\n\nNow, we compute the total weight of the cover $C'$ produced by the algorithm:\n$\\text{cost}(C') = \\sum_{v \\in C'} w(v) = \\sum_{i=1}^{k} w(v_i) = \\sum_{i=1}^{k} 1 = k$.\n\nFinally, we compute the approximation ratio, which is the ratio of the algorithm's cost to the optimal cost.\nApproximation Ratio = $\\frac{\\text{cost}(C')}{\\text{cost}(C_{OPT})}$.\nWe found that $\\text{cost}(C') = k$ and $\\text{cost}(C_{OPT}) = 2$.\nThus, the approximation ratio is $\\frac{k}{2}$.\nThis is a simplified closed-form expression in $k$.", "answer": "$$\n\\boxed{\\frac{k}{2}}\n$$", "id": "3281692"}]}