{"hands_on_practices": [{"introduction": "Gaussian quadrature can sometimes feel like a \"black box\" with its prescribed nodes and weights. This exercise pulls back the curtain by guiding you through the construction of the 3-point Gauss-Legendre rule from first principles. By leveraging the orthogonality of Legendre polynomials, you will derive the exact nodes and weights yourself and prove the rule's remarkable degree of precision [@problem_id:3136381]. This fundamental practice solidifies the theoretical underpinnings of why Gaussian quadrature is so powerful.", "problem": "Consider the integral operator on the interval $[-1,1]$ with weight $w(x)=1$, and let $\\{P_{n}(x)\\}_{n\\geq 0}$ denote the Legendre polynomials, which are orthogonal with respect to the inner product $\\langle f,g\\rangle=\\int_{-1}^{1} f(x)\\,g(x)\\,dx$, normalized so that $P_{n}(1)=1$. A Gaussian quadrature rule with $n$ nodes is an approximation of the form $\\int_{-1}^{1} f(x)\\,dx\\approx \\sum_{i=1}^{n} w_{i}\\,f(\\xi_{i})$ for appropriately chosen nodes $\\xi_{i}$ and weights $w_{i}$. \n\nYour task is to construct the $n=3$ Gaussâ€“Legendre rule directly from orthogonality and then verify its degree of exactness. Proceed from the following fundamental base: orthogonality of the Legendre polynomials on $[-1,1]$ with respect to $w(x)=1$, the definition of polynomial degree, and the existence of a unique (up to scaling) degree-$n$ polynomial $P_{n}(x)$ orthogonal to all polynomials of degree less than $n$.\n\nTasks:\n- Using only the orthogonality structure described above, argue that if a $3$-node rule is exact for all polynomials of degree up to $5$, then its node polynomial $Q(x)=\\prod_{i=1}^{3}(x-\\xi_{i})$ must be orthogonal to every polynomial of degree at most $2$. Deduce from this that $Q(x)$ is proportional to $P_{3}(x)$ and, by determining $P_{3}(x)$, obtain explicit expressions for the nodes $\\xi_{1}<\\xi_{2}<\\xi_{3}$.\n- Determine the corresponding weights $w_{1},w_{2},w_{3}$ by enforcing exactness for a suitable set of polynomials and explain, using orthogonality, why the resulting rule is exact for every polynomial of degree at most $5$.\n- Report the final result by listing the nodes followed by the weights in the single row order $(\\xi_{1},\\,\\xi_{2},\\,\\xi_{3},\\,w_{1},\\,w_{2},\\,w_{3})$ as exact analytic expressions. No rounding is required.\n\nYour final answer must be a single analytical expression. Express it as a row matrix in the order specified above. No units are involved.", "solution": "The problem requires the construction and verification of the $n=3$ Gauss-Legendre quadrature rule, starting from the principle of orthogonality of the Legendre polynomials, $\\{P_n(x)\\}$, on the interval $[-1, 1]$ with weight function $w(x)=1$.\n\n### Step 1: Derivation of the Quadrature Nodes\n\nThe fundamental theorem of Gaussian quadrature states that an $n$-point rule is exact for all polynomials of degree up to $2n-1$ if and only if the nodes $\\{\\xi_i\\}_{i=1}^n$ are the roots of the $n$-th degree Legendre polynomial $P_n(x)$. We will derive this result for the specific case of $n=3$ as requested.\n\nLet the quadrature rule be denoted by $Q_3(f) = \\sum_{i=1}^{3} w_i f(\\xi_i)$, which approximates the integral $I(f) = \\int_{-1}^{1} f(x) dx$. We assume this rule is exact for all polynomials of degree up to $2n-1 = 2(3)-1=5$.\n\nLet the node polynomial be $Q(x) = \\prod_{i=1}^{3} (x-\\xi_i)$. This is a monic polynomial of degree $3$. Let $p(x)$ be an arbitrary polynomial of degree at most $2$. Consider the polynomial $f(x) = p(x)Q(x)$. The degree of $f(x)$ is $\\text{deg}(p) + \\text{deg}(Q) \\leq 2 + 3 = 5$.\n\nBy our assumption, the quadrature rule is exact for $f(x)$, so $I(f) = Q_3(f)$.\nLet's evaluate both sides.\nThe integral is:\n$$I(f) = \\int_{-1}^{1} p(x)Q(x) dx = \\langle p, Q \\rangle$$\nThe quadrature sum is:\n$$Q_3(f) = \\sum_{i=1}^{3} w_i f(\\xi_i) = \\sum_{i=1}^{3} w_i p(\\xi_i) Q(\\xi_i)$$\nBy definition of the node polynomial $Q(x)$, its roots are the nodes $\\xi_i$. Therefore, $Q(\\xi_i) = 0$ for $i=1, 2, 3$. This leads to:\n$$Q_3(f) = \\sum_{i=1}^{3} w_i p(\\xi_i) \\cdot 0 = 0$$\nEquating the integral and the sum, we get:\n$$\\langle p, Q \\rangle = \\int_{-1}^{1} p(x)Q(x) dx = 0$$\nThis holds for any polynomial $p(x)$ of degree at most $2$. This is precisely the definition of $Q(x)$ being orthogonal to the space of all polynomials of degree less than $3$.\n\nThe Legendre polynomial $P_3(x)$ is, by definition, a polynomial of degree $3$ that is orthogonal to all polynomials of degree less than $3$. The space of polynomials of degree $3$ that are orthogonal to all polynomials of degree $\\le 2$ is one-dimensional. Therefore, $Q(x)$ must be proportional to $P_3(x)$, i.e., $Q(x) = c P_3(x)$ for some non-zero constant $c$. Since the roots of $Q(x)$ are the quadrature nodes, the nodes must be the roots of $P_3(x)$.\n\nTo find the nodes, we must first construct $P_3(x)$. We can use the Gram-Schmidt orthogonalization process on the monomial basis $\\{1, x, x^2, x^3\\}$ with the inner product $\\langle f,g \\rangle = \\int_{-1}^{1} f(x)g(x)dx$.\nLet $\\tilde{P}_n(x)$ be the unnormalized polynomials.\n$\\tilde{P}_0(x) = 1$.\n$\\tilde{P}_1(x) = x - \\frac{\\langle x, 1 \\rangle}{\\langle 1, 1 \\rangle} \\cdot 1 = x - \\frac{0}{2} = x$.\n$\\tilde{P}_2(x) = x^2 - \\frac{\\langle x^2, 1 \\rangle}{\\langle 1, 1 \\rangle} \\cdot 1 - \\frac{\\langle x^2, x \\rangle}{\\langle x, x \\rangle} \\cdot x = x^2 - \\frac{2/3}{2} - \\frac{0}{2/3}x = x^2 - \\frac{1}{3}$.\n$\\tilde{P}_3(x) = x^3 - \\frac{\\langle x^3, 1 \\rangle}{\\langle 1, 1 \\rangle} \\cdot 1 - \\frac{\\langle x^3, x \\rangle}{\\langle x, x \\rangle} \\cdot x - \\frac{\\langle x^3, x^2 - 1/3 \\rangle}{\\langle x^2 - 1/3, x^2 - 1/3 \\rangle} \\cdot (x^2 - \\frac{1}{3})$.\nThe integrals involving odd powers of $x$ over $[-1, 1]$ are zero, so $\\langle x^3, 1 \\rangle=0$ and $\\langle x^3, x^2-1/3 \\rangle=0$.\nWe need $\\langle x^3, x \\rangle = \\int_{-1}^{1} x^4 dx = \\frac{2}{5}$ and $\\langle x, x \\rangle = \\int_{-1}^{1} x^2 dx = \\frac{2}{3}$.\nSo, $\\tilde{P}_3(x) = x^3 - \\frac{2/5}{2/3} x = x^3 - \\frac{3}{5}x$.\n\nThe nodes $\\xi_i$ are the roots of $\\tilde{P}_3(x)=0$:\n$$x^3 - \\frac{3}{5}x = x\\left(x^2 - \\frac{3}{5}\\right) = 0$$\nThe roots are $x=0$ and $x=\\pm\\sqrt{\\frac{3}{5}}$.\nArranged in increasing order, the nodes are:\n$\\xi_1 = -\\sqrt{\\frac{3}{5}}$, $\\xi_2 = 0$, $\\xi_3 = \\sqrt{\\frac{3}{5}}$.\n\n### Step 2: Derivation of the Quadrature Weights\n\nWith the nodes determined, we find the weights $w_1, w_2, w_3$ by enforcing that the rule is exact for a basis of low-degree polynomials. A basis for polynomials of degree $\\le 2$ is $\\{1, x, x^2\\}$. The rule must be exact for these.\n\nFor $f(x)=1$ (degree $0$):\n$$\\int_{-1}^{1} 1 \\,dx = 2 \\implies w_1 f(\\xi_1) + w_2 f(\\xi_2) + w_3 f(\\xi_3) = w_1+w_2+w_3 = 2$$\n\nFor $f(x)=x$ (degree $1$):\n$$\\int_{-1}^{1} x \\,dx = 0 \\implies w_1 \\left(-\\sqrt{\\frac{3}{5}}\\right) + w_2(0) + w_3 \\left(\\sqrt{\\frac{3}{5}}\\right) = \\sqrt{\\frac{3}{5}}(-w_1+w_3) = 0$$\nThis implies $w_1 = w_3$.\n\nFor $f(x)=x^2$ (degree $2$):\n$$\\int_{-1}^{1} x^2 \\,dx = \\frac{2}{3} \\implies w_1 \\left(-\\sqrt{\\frac{3}{5}}\\right)^2 + w_2(0)^2 + w_3 \\left(\\sqrt{\\frac{3}{5}}\\right)^2 = w_1\\left(\\frac{3}{5}\\right) + w_3\\left(\\frac{3}{5}\\right) = \\frac{2}{3}$$\nThis gives $\\frac{3}{5}(w_1+w_3) = \\frac{2}{3}$.\n\nWe now solve the system of linear equations for the weights:\n1. $w_1 + w_2 + w_3 = 2$\n2. $w_1 = w_3$\n3. $\\frac{3}{5}(w_1+w_3) = \\frac{2}{3}$\n\nSubstitute (2) into (3):\n$\\frac{3}{5}(w_1+w_1) = \\frac{2}{3} \\implies \\frac{6}{5}w_1 = \\frac{2}{3} \\implies w_1 = \\frac{2}{3} \\cdot \\frac{5}{6} = \\frac{10}{18} = \\frac{5}{9}$.\nFrom (2), $w_3 = w_1 = \\frac{5}{9}$.\nSubstitute $w_1$ and $w_3$ into (1):\n$\\frac{5}{9} + w_2 + \\frac{5}{9} = 2 \\implies w_2 + \\frac{10}{9} = 2 \\implies w_2 = 2 - \\frac{10}{9} = \\frac{18-10}{9} = \\frac{8}{9}$.\n\nThe weights are $w_1 = \\frac{5}{9}$, $w_2 = \\frac{8}{9}$, $w_3 = \\frac{5}{9}$.\n\n### Step 3: Verification of the Degree of Exactness\n\nWe must explain why this rule, constructed to be exact for polynomials of degree up to $2$, is in fact exact for all polynomials of degree up to $5$.\nLet $f(x)$ be any polynomial of degree at most $5$. We can perform polynomial division of $f(x)$ by the degree-$3$ node polynomial $Q(x) = \\prod_{i=1}^3(x-\\xi_i) \\propto P_3(x)$. This gives:\n$$f(x) = d(x)Q(x) + r(x)$$\nwhere the quotient $d(x)$ is a polynomial of degree at most $5-3=2$, and the remainder $r(x)$ is a polynomial of degree at most $2$.\n\nApplying the integral operator $I$ to $f(x)$:\n$$I(f) = \\int_{-1}^{1} f(x) dx = \\int_{-1}^{1} \\left( d(x)Q(x) + r(x) \\right) dx = \\int_{-1}^{1} d(x)Q(x) dx + \\int_{-1}^{1} r(x) dx$$\nSince $Q(x)$ is proportional to $P_3(x)$ and $d(x)$ is a polynomial of degree at most $2$, the orthogonality property of Legendre polynomials ensures that $\\int_{-1}^{1} d(x)Q(x) dx = 0$.\nThus, $I(f) = \\int_{-1}^{1} r(x) dx = I(r)$.\n\nNow, applying the quadrature rule $Q_3$ to $f(x)$:\n$$Q_3(f) = \\sum_{i=1}^{3} w_i f(\\xi_i) = \\sum_{i=1}^{3} w_i \\left( d(\\xi_i)Q(\\xi_i) + r(\\xi_i) \\right)$$\nSince $\\xi_i$ are the roots of $Q(x)$, $Q(\\xi_i)=0$ for each node. The expression simplifies to:\n$$Q_3(f) = \\sum_{i=1}^{3} w_i r(\\xi_i) = Q_3(r)$$\n\nWe have shown that $I(f) = I(r)$ and $Q_3(f) = Q_3(r)$. The remainder $r(x)$ is a polynomial of degree at most $2$. By our construction of the weights, the quadrature rule is exact for all polynomials of degree at most $2$. Therefore, $I(r) = Q_3(r)$.\nCombining these results, we conclude that $I(f)=Q_3(f)$ for any polynomial $f(x)$ of degree at most $5$. The degree of exactness is $5$.\n\nThe final result is the set of nodes and weights.\nNodes: $\\xi_1 = -\\sqrt{\\frac{3}{5}}$, $\\xi_2 = 0$, $\\xi_3 = \\sqrt{\\frac{3}{5}}$.\nWeights: $w_1 = \\frac{5}{9}$, $w_2 = \\frac{8}{9}$, $w_3 = \\frac{5}{9}$.\nIn the requested order $(\\xi_1, \\xi_2, \\xi_3, w_1, w_2, w_3)$:\n$\\left( -\\sqrt{\\frac{3}{5}}, 0, \\sqrt{\\frac{3}{5}}, \\frac{5}{9}, \\frac{8}{9}, \\frac{5}{9} \\right)$.", "answer": "$$\\boxed{\\begin{pmatrix} -\\sqrt{\\frac{3}{5}} & 0 & \\sqrt{\\frac{3}{5}} & \\frac{5}{9} & \\frac{8}{9} & \\frac{5}{9} \\end{pmatrix}}$$", "id": "3136381"}, {"introduction": "With an understanding of how quadrature rules are built, let's apply one to a practical problem in physics. This exercise involves calculating the arc length of a particle's trajectory, a task that often leads to integrals without simple analytical solutions. You will use the two-point Gauss-Legendre formula, focusing on the critical step of mapping the general integration interval to the standard $[-1, 1]$ required by the rule [@problem_id:2175478]. This practice bridges the gap between abstract formulas and concrete computational results.", "problem": "A particle's trajectory in a two-dimensional plane is described by the function $y(x) = x \\sin(x)$, where both position coordinates $x$ and $y$ are measured in meters. The particle travels from the point at $x=0$ to the point at $x=\\pi/2$.\n\nYour task is to calculate the total length of this path. To do so, you must use the two-point Gauss-Legendre quadrature method to approximate the value of the arc length integral.\n\nThe following information is provided for your calculation:\n1.  The arc length $L$ of a curve $y=f(x)$ from $x=a$ to $x=b$ is given by the integral $L = \\int_a^b \\sqrt{1 + [f'(x)]^2} dx$.\n2.  The two-point Gauss-Legendre quadrature formula approximates an integral over the standard interval $[-1, 1]$ as $\\int_{-1}^1 g(t) dt \\approx w_1 g(t_1) + w_2 g(t_2)$. The required nodes are $t_1 = -1/\\sqrt{3}$ and $t_2 = 1/\\sqrt{3}$, and the corresponding weights are $w_1 = 1$ and $w_2 = 1$.\n3.  To evaluate an integral over a general interval $[a, b]$, such as $\\int_a^b f(x)dx$, using a method defined on $[-1, 1]$, the necessary change of variable is $x = \\frac{b-a}{2}t + \\frac{a+b}{2}$.\n\nExpress your answer in meters, rounded to four significant figures.", "solution": "We are given $y(x) = x \\sin(x)$ on $x \\in [0,\\frac{\\pi}{2}]$. The arc length formula for a curve $y=f(x)$ is\n$$\nL=\\int_{0}^{\\frac{\\pi}{2}} \\sqrt{1+\\left[f'(x)\\right]^{2}}\\,dx.\n$$\nFirst compute the derivative using the product rule:\n$$\nf'(x)=\\sin(x)+x\\cos(x).\n$$\nHence the arc-length integral becomes\n$$\nL=\\int_{0}^{\\frac{\\pi}{2}} \\sqrt{1+\\left(\\sin(x)+x\\cos(x)\\right)^{2}}\\,dx.\n$$\nTo apply two-point Gauss-Legendre on $[-1,1]$, use the change of variables\n$$\nx=\\frac{b-a}{2}\\,t+\\frac{a+b}{2},\\quad a=0,\\;b=\\frac{\\pi}{2}\\;\\Rightarrow\\;x=\\frac{\\pi}{4}(t+1),\\quad dx=\\frac{\\pi}{4}\\,dt.\n$$\nDefine\n$$\ng(t)=\\sqrt{1+\\left(\\sin\\!\\left(\\tfrac{\\pi}{4}(t+1)\\right)+\\tfrac{\\pi}{4}(t+1)\\cos\\!\\left(\\tfrac{\\pi}{4}(t+1)\\right)\\right)^{2}}.\n$$\nThen\n$$\nL=\\frac{\\pi}{4}\\int_{-1}^{1} g(t)\\,dt\\approx \\frac{\\pi}{4}\\left[g(t_{1})+g(t_{2})\\right],\n$$\nwith two-point Gauss-Legendre nodes and weights $t_{1}=-\\frac{1}{\\sqrt{3}}$, $t_{2}=\\frac{1}{\\sqrt{3}}$, $w_{1}=w_{2}=1$.\n\nMap these nodes to $x$:\n$$\nx_{1}=\\frac{\\pi}{4}\\left(1-\\frac{1}{\\sqrt{3}}\\right),\\qquad x_{2}=\\frac{\\pi}{4}\\left(1+\\frac{1}{\\sqrt{3}}\\right).\n$$\nEvaluate the integrand $\\phi(x)=\\sqrt{1+\\left(\\sin x + x\\cos x\\right)^{2}}$ at $x_{1}$ and $x_{2}$:\n- At $x_{1}=\\frac{\\pi}{4}\\left(1-\\frac{1}{\\sqrt{3}}\\right)\\approx 0.3319483223$, we have\n$$\n\\sin(x_{1})\\approx 0.325885641,\\quad \\cos(x_{1})\\approx 0.945408713,\n$$\n$$\n\\sin(x_{1})+x_{1}\\cos(x_{1})\\approx 0.325885641+0.3319483223\\cdot 0.945408713\\approx 0.639712477,\n$$\n$$\ng(t_{1})=\\phi(x_{1})\\approx \\sqrt{1+0.639712477^{2}}\\approx 1.187111.\n$$\n- At $x_{2}=\\frac{\\pi}{4}\\left(1+\\frac{1}{\\sqrt{3}}\\right)\\approx 1.2388480045$, we have\n$$\n\\sin(x_{2})\\approx 0.945409184,\\quad \\cos(x_{2})\\approx 0.325885578,\n$$\n$$\n\\sin(x_{2})+x_{2}\\cos(x_{2})\\approx 0.945409184+1.2388480045\\cdot 0.325885578\\approx 1.349131882,\n$$\n$$\ng(t_{2})=\\phi(x_{2})\\approx \\sqrt{1+1.349131882^{2}}\\approx 1.679333.\n$$\nTherefore, the two-point Gauss-Legendre approximation gives\n$$\nL\\approx \\frac{\\pi}{4}\\left(g(t_{1})+g(t_{2})\\right)\\approx \\frac{\\pi}{4}\\left(1.187111+1.679333\\right)=\\frac{\\pi}{4}\\cdot 2.866444\\approx 2.251299460\\ \\text{m}.\n$$\nRounded to four significant figures, the path length is $2.251$ meters.", "answer": "$$\\boxed{2.251}$$", "id": "2175478"}, {"introduction": "The theoretical efficiency of a numerical method is best appreciated when tested against challenging problems. In this computational exercise, you will compare the performance of Gauss-Legendre quadrature with the well-known Simpson's rule for an integrand with endpoint singularities [@problem_id:2397782]. By writing a short program to calculate the empirical convergence rates, you will gain hands-on insight into why Gaussian quadrature's node placement makes it exceptionally robust for functions that are not perfectly smooth.", "problem": "Consider the definite integral of the function $f(x) = \\sqrt{1 - x^2}$ over the interval $[-1,1]$. The exact value of the integral is the area of a semicircle of radius $1$, namely\n$$\nI = \\int_{-1}^{1} \\sqrt{1 - x^2} \\, dx = \\frac{\\pi}{2}.\n$$\nThis integrand has endpoint derivative singularities at $x = \\pm 1$ in the sense that its derivatives diverge as $x \\to \\pm 1$.\n\nYour task is to quantitatively compare the convergence behavior of two quadrature families when approximating $I$:\n- $n$-point Gaussâ€“Legendre quadrature on $[-1,1]$, where the nodes are the roots of the Legendre polynomial $P_n(x)$ and the associated weights integrate polynomials exactly up to degree $2n-1$.\n- The composite closed Newtonâ€“Cotes rule of degree $2$ (Simpsonâ€™s rule) on $[-1,1]$ using $m$ equal subintervals with $m$ even. The total number of function evaluations is $m+1$.\n\nFor a common resource budget quantified by the number of function evaluations, use the test suite of budgets\n$$\n\\mathcal{B} = \\{\\,3,5,9,17,33\\,\\},\n$$\nwhere for each $n \\in \\mathcal{B}$ you must:\n- Use $n$-point Gaussâ€“Legendre quadrature to produce an approximation $Q_{\\mathrm{GL}}(n)$ to $I$.\n- Use composite Simpsonâ€™s rule with $m = n-1$ subintervals (note $m$ is even for all $n \\in \\mathcal{B}$) to produce an approximation $Q_{\\mathrm{S}}(n)$ to $I$.\n\nFor each $n \\in \\mathcal{B}$, compute the absolute errors\n$$\nE_{\\mathrm{GL}}(n) = \\bigl|Q_{\\mathrm{GL}}(n) - I\\bigr|,\\quad\nE_{\\mathrm{S}}(n) = \\bigl|Q_{\\mathrm{S}}(n) - I\\bigr|.\n$$\nThen, over the entire set $\\mathcal{B}$, estimate an empirical algebraic convergence rate for each family by performing an Ordinary Least Squares (OLS) fit of $\\log E$ against $\\log n$:\n$$\n\\log E_{\\mathrm{GL}}(n) \\approx \\alpha_{\\mathrm{GL}} + s_{\\mathrm{GL}} \\log n,\\quad\n\\log E_{\\mathrm{S}}(n) \\approx \\alpha_{\\mathrm{S}} + s_{\\mathrm{S}} \\log n,\n$$\nand define the empirical convergence exponents as\n$$\np_{\\mathrm{GL}} = -s_{\\mathrm{GL}},\\quad p_{\\mathrm{S}} = -s_{\\mathrm{S}}.\n$$\n\nYour program must output a single line containing a comma-separated list enclosed in square brackets with the following entries, in this exact order:\n$$\n\\bigl[E_{\\mathrm{GL}}(3),\\,E_{\\mathrm{S}}(3),\\,E_{\\mathrm{GL}}(5),\\,E_{\\mathrm{S}}(5),\\,E_{\\mathrm{GL}}(9),\\,E_{\\mathrm{S}}(9),\\,E_{\\mathrm{GL}}(17),\\,E_{\\mathrm{S}}(17),\\,E_{\\mathrm{GL}}(33),\\,E_{\\mathrm{S}}(33),\\,p_{\\mathrm{GL}},\\,p_{\\mathrm{S}}\\bigr].\n$$\nAll numerical values must be reported as real numbers without units. The angle unit is not relevant. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[r_1,r_2,\\dots]$).", "solution": "The posed problem is a well-defined exercise in numerical analysis, a core topic in computational science. It requires a quantitative comparison of two standard quadrature methods for an integrand that is continuous but not smooth, specifically possessing endpoint derivative singularities. The problem is scientifically grounded, objective, and contains all necessary information for a unique solution. Therefore, it is deemed valid, and we shall proceed with the derivation.\n\nThe objective is to approximate the definite integral\n$$\nI = \\int_{-1}^{1} f(x) \\, dx = \\int_{-1}^{1} \\sqrt{1 - x^2} \\, dx.\n$$\nGeometrically, this integral represents the area of a semicircle with radius $r=1$, so its exact value is known to be $I = \\frac{\\pi r^2}{2} = \\frac{\\pi}{2}$. The integrand $f(x) = \\sqrt{1 - x^2}$ is continuous on the closed interval $[-1, 1]$. However, its derivatives are singular at the endpoints $x = \\pm 1$. The first derivative is $f'(x) = -x(1-x^2)^{-1/2}$, which diverges as $x \\to \\pm 1$. Because standard error bounds for numerical quadrature rules depend on the boundedness of higher-order derivatives of the integrand over the integration interval, the presence of these singularities is expected to degrade the convergence performance of both methods under consideration.\n\nWe will compare two families of quadrature rules: $n$-point Gaussâ€“Legendre quadrature and composite Simpson's rule. For a fair comparison, the number of function evaluations, $n$, will be identical for both methods, drawn from the set $\\mathcal{B} = \\{3, 5, 9, 17, 33\\}$.\n\nFirst, let us define the Gauss-Legendre quadrature. The $n$-point rule approximates the integral of a function $g(x)$ over $[-1, 1]$ as a weighted sum of function values at specific nodes:\n$$\n\\int_{-1}^{1} g(x) \\, dx \\approx \\sum_{i=1}^{n} w_i g(x_i) = Q_{\\mathrm{GL}}(n).\n$$\nThe nodes $\\{x_i\\}_{i=1}^n$ are the roots of the $n$-th degree Legendre polynomial, $P_n(x)$, and the weights $\\{w_i\\}_{i=1}^n$ are chosen such that the rule is exact for all polynomials of degree up to $2n-1$. A critical feature of Gauss-Legendre quadrature is that its nodes are always located in the open interval $(-1, 1)$, thus avoiding direct function evaluation at the singular endpoints of our problem. For an analytic function, this method exhibits exponential convergence. For a function with an endpoint singularity of the form $(1 \\mp x)^\\alpha$ with $\\alpha > -1$, the error is known to behave as $E_{\\mathrm{GL}}(n) = O(n^{-2(\\alpha+1)})$. In our case, $\\alpha = 1/2$, so we anticipate an algebraic convergence rate with an exponent of $p_{\\mathrm{GL}} \\approx 2(1/2 + 1) = 3$.\n\nSecond, we consider the composite Simpson's rule. This rule is derived from the closed Newtonâ€“Cotes formula of degree $2$. The interval $[-1, 1]$ is partitioned into $m$ equal subintervals of width $h = 2/m$. The problem specifies using $n$ total function evaluations, which for composite Simpson's rule corresponds to $m = n-1$ subintervals. The nodes are evenly spaced at $x_j = -1 + j \\cdot h$ for $j \\in \\{0, 1, \\dots, m\\}$. The approximation is given by:\n$$\n\\int_{-1}^{1} g(x) \\, dx \\approx \\frac{h}{3} \\left[ g(x_0) + 4\\sum_{j=1}^{m/2} g(x_{2j-1}) + 2\\sum_{j=1}^{m/2-1} g(x_{2j}) + g(x_m) \\right] = Q_{\\mathrm{S}}(n).\n$$\nUnlike Gauss-Legendre quadrature, this method explicitly evaluates the function at the endpoints $x_0 = -1$ and $x_m = 1$. For a sufficiently smooth function ($g \\in C^4([-1, 1])$), the error is $O(h^4) = O(m^{-4}) = O(n^{-4})$. However, due to the endpoint singularities, this rate will not be achieved. The error for a Newton-Cotes rule applied to an integrand with a singularity $(1 \\mp x)^\\alpha$ is typically $O(m^{-(\\alpha+k)})$, where $k$ depends on the rule's degree. For Simpson's rule, theory suggests the error behaves as $E_{\\mathrm{S}}(n) = O(m^{-(\\alpha+1.5)})$ for a one-sided singularity. Here, with two endpoints and $\\alpha=1/2$, the expected convergence exponent is $p_{\\mathrm{S}} \\approx 1.5$.\n\nThe computational procedure is as follows:\n1. For each budget $n \\in \\mathcal{B}$, we compute the approximations $Q_{\\mathrm{GL}}(n)$ and $Q_{\\mathrm{S}}(n)$. For $Q_{\\mathrm{GL}}(n)$, the nodes and weights for the Legendre polynomials are required. For $Q_{\\mathrm{S}}(n)$, we use $m = n-1$ subintervals.\n2. The absolute errors, $E_{\\mathrm{GL}}(n) = |Q_{\\mathrm{GL}}(n) - \\pi/2|$ and $E_{\\mathrm{S}}(n) = |Q_{\\mathrm{S}}(n) - \\pi/2|$, are calculated for each $n$.\n3. To estimate the empirical convergence exponents, we perform a linear regression on the logarithm of the errors against the logarithm of the number of points. We fit the models:\n$$\n\\log E(n) \\approx \\alpha + s \\log n.\n$$\nThe slope $s$ is determined using an Ordinary Least Squares (OLS) fit. From the definition of algebraic convergence, $E(n) \\approx C n^{-p}$, taking the logarithm gives $\\log E(n) \\approx \\log C - p \\log n$. By comparison with the linear model, the empirical convergence exponent is $p = -s$. We will calculate $p_{\\mathrm{GL}} = -s_{\\mathrm{GL}}$ and $p_{\\mathrm{S}} = -s_{\\mathrm{S}}$.\n\nThis systematic comparison will reveal the practical impact of endpoint singularities on the convergence of a high-order (Gauss-Legendre) and a low-order (Simpson's) quadrature rule, providing a clear quantitative measure of their performance degradation from the ideal, smooth-function case. The entire procedure will be implemented in a program to generate the required numerical results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import special\nfrom scipy import integrate\n\ndef solve():\n    \"\"\"\n    Compares the convergence of Gauss-Legendre and composite Simpson's rule\n    for the integral of sqrt(1-x^2) on [-1, 1], which has endpoint singularities.\n    \"\"\"\n\n    # Define the integrand and the exact value of the integral.\n    def f(x):\n        # Use np.maximum to avoid domain errors from floating-point inaccuracies near +/-1.\n        return np.sqrt(np.maximum(0.0, 1.0 - x**2))\n\n    I_exact = np.pi / 2.0\n\n    # Test suite of budgets for the number of function evaluations.\n    budgets = np.array([3, 5, 9, 17, 33])\n\n    errors_gl = []\n    errors_s = []\n    results_list = []\n\n    for n in budgets:\n        # --- Gauss-Legendre Quadrature ---\n        # Get n-point Gauss-Legendre nodes and weights on [-1, 1].\n        # scipy.special.roots_legendre is the standard function for this.\n        nodes, weights = special.roots_legendre(n)\n        \n        # Calculate the approximation Q_GL(n).\n        q_gl = np.sum(weights * f(nodes))\n        \n        # Calculate the absolute error E_GL(n).\n        e_gl = np.abs(q_gl - I_exact)\n        errors_gl.append(e_gl)\n\n        # --- Composite Simpson's Rule ---\n        # Number of subintervals m = n - 1. This ensures a total of n function evaluations.\n        # The number of points is m+1 = n, which is always odd for the given budgets.\n        m = n - 1\n        \n        # Generate n equally spaced points from -1 to 1.\n        x_simpson = np.linspace(-1.0, 1.0, n)\n        y_simpson = f(x_simpson)\n        \n        # Calculate the approximation Q_S(n) using scipy's Simpson's rule implementation.\n        q_s = integrate.simpson(y_simpson, x_simpson)\n        \n        # Calculate the absolute error E_S(n).\n        e_s = np.abs(q_s - I_exact)\n        errors_s.append(e_s)\n\n        # Append the pair of errors for this budget to the results list.\n        results_list.extend([e_gl, e_s])\n\n    # --- Empirical Convergence Rate Calculation ---\n    # We fit a line to log(E) vs log(n) to find the slope s.\n    # The convergence rate p is then -s.\n\n    log_n = np.log(budgets)\n    log_e_gl = np.log(errors_gl)\n    log_e_s = np.log(errors_s)\n\n    # Use np.polyfit for Ordinary Least Squares linear regression.\n    # It returns [slope, intercept]. We only need the slope.\n    s_gl = np.polyfit(log_n, log_e_gl, 1)[0]\n    s_s = np.polyfit(log_n, log_e_s, 1)[0]\n\n    p_gl = -s_gl\n    p_s = -s_s\n\n    # Append the calculated convergence exponents to the results list.\n    results_list.extend([p_gl, p_s])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results_list))}]\")\n\nsolve()\n```", "id": "2397782"}]}