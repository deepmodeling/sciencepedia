{"hands_on_practices": [{"introduction": "The foundation of a reliable numerical method for conservation laws, such as the diffusion equation, is its ability to preserve fundamental physical quantities at the discrete level. This practice [@problem_id:3115317] will guide you through implementing the Crank-Nicolson method within a finite-volume framework, which is specifically designed to ensure flux conservation. By using harmonic averaging for a spatially varying diffusion coefficient $D(x)$ and verifying the conservation of total mass, you will gain a deeper understanding of how to construct robust schemes that respect the underlying physics of the model.", "problem": "Consider the one-dimensional diffusion equation on a periodic domain, given by the conservation law $u_t = \\partial_x ( D(x) \\, u_x )$ on $x \\in [0,L]$ with $t \\ge 0$, where $u(x,t)$ is the scalar field and $D(x)$ is a strictly positive spatially varying diffusion coefficient. The fundamental base for this problem is the integral conservation form over each control volume, the divergence theorem, and the definition of flux. Use a finite-volume discretization with $N$ uniform cells of width $\\Delta x = L/N$ and cell centers $x_j = (j+1/2)\\Delta x$ for $j = 0,1,\\dots,N-1$. Let $U_j^n$ denote the cell-average approximation to $u(x,t_n)$ at time level $t_n = n \\,\\Delta t$.\n\nYour task is to derive and implement a Crank–Nicolson implicit method (Crank–Nicolson (CN)) that preserves flux conservation at the discrete level. Proceed as follows:\n\n1. Start from the integral conservation form over a control volume $V_j = [x_{j-1/2}, x_{j+1/2}]$:\n   $$\\frac{d}{dt} \\int_{V_j} u(x,t)\\,dx = \\left. D(x) \\, u_x(x,t) \\right|_{x_{j-1/2}}^{x_{j+1/2}}.$$\n   Use the divergence theorem and the definition of diffusive flux to justify this equation. Define the face fluxes $F_{j+1/2}(t) = - D_{j+1/2} \\, \\left. u_x \\right|_{x_{j+1/2}}$ and $F_{j-1/2}(t) = - D_{j-1/2} \\, \\left. u_x \\right|_{x_{j-1/2}}$ so that\n   $$\\frac{d U_j}{dt} = \\frac{F_{j-1/2}(t) - F_{j+1/2}(t)}{\\Delta x},$$\n   where $U_j(t) = \\frac{1}{\\Delta x} \\int_{V_j} u(x,t)\\,dx$.\n\n2. Discretize the face fluxes in space using consistent second-order finite-volume approximations that ensure flux conservation:\n   - Approximate the face gradients by centered differences:\n     $$\\left. u_x \\right|_{x_{j+1/2}} \\approx \\frac{U_{j+1} - U_j}{\\Delta x}.$$\n   - Define the face diffusion coefficients using the harmonic mean of cell-centered values $D_j = D(x_j)$ and $D_{j+1} = D(x_{j+1})$:\n     $$D_{j+1/2} = \\frac{2}{\\frac{1}{D_j} + \\frac{1}{D_{j+1}}}.$$\n   This choice is standard for serial conduction and ensures consistent flux across interfaces when $D(x)$ is variable.\n\n3. Using the above spatial discretization, write the semi-discrete system in the form\n   $$\\frac{d U_j}{dt} = \\frac{-D_{j+1/2}\\,(U_{j+1} - U_j) + D_{j-1/2}\\,(U_j - U_{j-1})}{\\Delta x^2},$$\n   with periodic boundary conditions $U_{-1} \\equiv U_{N-1}$, $U_N \\equiv U_0$. Express this as a linear operator $\\mathbf{L}$ on the vector $\\mathbf{U} = (U_0,\\dots,U_{N-1})^\\top$:\n   $$\\frac{d \\mathbf{U}}{dt} = \\mathbf{L} \\, \\mathbf{U}.$$\n\n4. Apply the Crank–Nicolson time discretization to obtain a fully discrete method:\n   $$\\frac{\\mathbf{U}^{n+1} - \\mathbf{U}^n}{\\Delta t} = \\frac{1}{2}\\left( \\mathbf{L}\\,\\mathbf{U}^{n+1} + \\mathbf{L}\\,\\mathbf{U}^{n} \\right),$$\n   which leads to the linear system\n   $$\\left( \\mathbf{I} - \\frac{\\Delta t}{2}\\mathbf{L} \\right)\\mathbf{U}^{n+1} = \\left( \\mathbf{I} + \\frac{\\Delta t}{2}\\mathbf{L} \\right)\\mathbf{U}^{n}.$$\n   Here, $\\mathbf{I}$ is the identity matrix of size $N \\times N$.\n\n5. Initialize $U_j^0$ by sampling $u(x,0)$ at the cell centers $x_j$. For this assignment, all trigonometric functions must use angles measured in radians.\n\nVerification requirement:\n- Demonstrate discrete conservation of total mass $M^n = \\sum_{j=0}^{N-1} U_j^n \\,\\Delta x$ over multiple CN time steps on coarse meshes with periodic boundary conditions. Specifically, verify that $|M^{\\text{final}} - M^0|  \\tau$ with tolerance $\\tau = 10^{-10}$.\n\nImplement a complete program that constructs $\\mathbf{L}$ via the finite-volume flux differences with harmonic face diffusion coefficients, performs CN time stepping, and checks discrete mass conservation for the following test suite. All domains have length $L = 1$ and use periodic boundary conditions:\n\n- Test case $1$ (happy path): $N = 4$, $\\Delta t = 0.2$, steps $= 8$, $D(x) \\equiv 1$, initial condition $u(x,0) = 1 + \\sin(2\\pi x)$.\n- Test case $2$ (variable diffusion): $N = 5$, $\\Delta t = 0.15$, steps $= 12$, $D(x) = 1 + 0.5 \\sin(2\\pi x)$, initial condition $u(x,0) = 0.8 + \\cos(2\\pi x)$.\n- Test case $3$ (discontinuous diffusion): $N = 3$, $\\Delta t = 0.5$, steps $= 5$, piecewise diffusion $D(x) = 0.1$ for $x \\in [0,0.5)$ and $D(x) = 1.0$ for $x \\in [0.5,1)$, initial condition $u(x,0) = 1.2 + \\sin(4\\pi x)$.\n\nAll angles are in radians. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each entry is a boolean indicating whether mass conservation was verified for the corresponding test case, for example, $[{\\text{result}_1},{\\text{result}_2},{\\text{result}_3}]$.", "solution": "The problem requires the derivation and implementation of a flux-conservative Crank-Nicolson implicit method for the one-dimensional diffusion equation with a spatially varying diffusion coefficient, $u_t = \\partial_x ( D(x) \\, u_x )$, on a periodic domain $x \\in [0,L]$. The solution will be constructed following the specified steps, ensuring a rigorous foundation in the principles of finite-volume methods and numerical linear algebra.\n\nThe foundation of a conservative numerical scheme is the integral form of the conservation law. For an arbitrary control volume $V_j = [x_{j-1/2}, x_{j+1/2}]$, the rate of change of the total amount of the quantity $u$ within the volume is equal to the net flux across its boundaries. Integrating the partial differential equation over $V_j$ yields:\n$$ \\frac{d}{dt} \\int_{x_{j-1/2}}^{x_{j+1/2}} u(x,t) \\, dx = \\int_{x_{j-1/2}}^{x_{j+1/2}} \\partial_x \\left( D(x) \\, u_x \\right) \\, dx $$\nApplying the fundamental theorem of calculus (the one-dimensional divergence theorem) to the right-hand side gives the flux difference:\n$$ \\frac{d}{dt} \\int_{x_{j-1/2}}^{x_{j+1/2}} u(x,t) \\, dx = \\left. D(x) \\, u_x(x,t) \\right|_{x_{j-1/2}}^{x_{j+1/2}} $$\nDefining the diffusive flux as $F(x,t) = -D(x) \\, u_x(x,t)$, we can write this as:\n$$ \\frac{d}{dt} \\int_{V_j} u(x,t) \\, dx = F(x_{j-1/2}, t) - F(x_{j+1/2}, t) $$\nLet $U_j(t) = \\frac{1}{\\Delta x} \\int_{V_j} u(x,t) \\, dx$ be the cell-average of $u$ over the cell $V_j$ of width $\\Delta x = L/N$. The time evolution of the cell average is then given by the semi-discrete equation:\n$$ \\frac{d U_j}{dt} = \\frac{F_{j-1/2}(t) - F_{j+1/2}(t)}{\\Delta x} $$\nwhere $F_{j \\pm 1/2}(t)$ are the fluxes evaluated at the cell faces $x_{j \\pm 1/2}$. This formulation guarantees that the flux leaving cell $V_j$ through face $x_{j+1/2}$ is identical to the flux entering the adjacent cell $V_{j+1}$, ensuring discrete conservation.\n\nTo fully discretize in space, we must approximate the fluxes. The flux at face $x_{j+1/2}$ is $F_{j+1/2} = - D_{j+1/2} \\, \\left. u_x \\right|_{x_{j+1/2}}$, where $D_{j+1/2}$ is the diffusion coefficient at the cell face. A second-order accurate centered difference approximation for the gradient at the face, based on the cell-average values $U_j$ and $U_{j+1}$, is:\n$$ \\left. u_x \\right|_{x_{j+1/2}} \\approx \\frac{U_{j+1} - U_j}{\\Delta x} $$\nFor a spatially varying $D(x)$, the value $D_{j+1/2}$ must be chosen carefully to maintain physical consistency. The problem specifies the harmonic mean of the cell-centered diffusion coefficients $D_j = D(x_j)$ and $D_{j+1} = D(x_{j+1})$:\n$$ D_{j+1/2} = \\frac{2 D_j D_{j+1}}{D_j + D_{j+1}} = \\left( \\frac{1/D_j + 1/D_{j+1}}{2} \\right)^{-1} $$\nThis choice is physically motivated by considering the steady-state diffusion through two layers in series, where the effective thermal conductivity (or diffusivity) is derived from the harmonic mean of the individual conductivities. It correctly ensures flux continuity, especially at sharp interfaces in $D(x)$.\n\nSubstituting these spatial approximations into the semi-discrete equation gives:\n$$ \\frac{d U_j}{dt} = \\frac{1}{\\Delta x} \\left[ -D_{j-1/2} \\frac{U_j - U_{j-1}}{\\Delta x} - \\left(-D_{j+1/2} \\frac{U_{j+1} - U_j}{\\Delta x}\\right) \\right] $$\n$$ \\frac{d U_j}{dt} = \\frac{1}{\\Delta x^2} \\left[ D_{j-1/2}U_{j-1} - (D_{j+1/2} + D_{j-1/2})U_j + D_{j+1/2}U_{j+1} \\right] $$\nThis system of ordinary differential equations can be expressed in matrix form $\\frac{d\\mathbf{U}}{dt} = \\mathbf{L}\\mathbf{U}$, where $\\mathbf{U} = (U_0, U_1, \\dots, U_{N-1})^\\top$ and $\\mathbf{L}$ is an $N \\times N$ matrix. For a cell $j$, the non-zero entries in the $j$-th row of $\\mathbf{L}$ are:\n$$ L_{j, j-1} = \\frac{D_{j-1/2}}{\\Delta x^2}, \\quad L_{j, j} = -\\frac{D_{j+1/2} + D_{j-1/2}}{\\Delta x^2}, \\quad L_{j, j+1} = \\frac{D_{j+1/2}}{\\Delta x^2} $$\nPeriodic boundary conditions ($U_{-1} \\equiv U_{N-1}$, $U_N \\equiv U_0$) require that the indices are interpreted modulo $N$. This makes $\\mathbf{L}$ a circulant tridiagonal matrix. An important property of this construction is that the sum of the elements in each row of $\\mathbf{L}$ is zero, which means $\\mathbf{L}$ annihilates constant vectors. Furthermore, a detailed analysis shows that the sum of the elements in each column of $\\mathbf{L}$ is also zero. This implies $\\mathbf{v}^\\top \\mathbf{L} = \\mathbf{0}^\\top$ where $\\mathbf{v}^\\top = (1, 1, \\dots, 1)$, a property that guarantees discrete conservation of total mass, as $\\frac{d}{dt} \\sum_j U_j = \\sum_j (\\mathbf{L}\\mathbf{U})_j = (\\mathbf{v}^\\top \\mathbf{L}) \\mathbf{U} = 0$.\n\nFor the time discretization, we apply the Crank-Nicolson method, which is second-order accurate in time and unconditionally stable for the diffusion equation. It averages the spatial operator $\\mathbf{L}$ at the current time level $t_n$ and the next time level $t_{n+1}$:\n$$ \\frac{\\mathbf{U}^{n+1} - \\mathbf{U}^n}{\\Delta t} = \\frac{1}{2} \\left( \\mathbf{L}\\mathbf{U}^{n+1} + \\mathbf{L}\\mathbf{U}^{n} \\right) $$\nwhere $\\mathbf{U}^n$ is the numerical solution vector at time $t_n = n \\Delta t$. Rearranging the terms to solve for the unknown state $\\mathbf{U}^{n+1}$ yields the linear system:\n$$ \\mathbf{U}^{n+1} - \\frac{\\Delta t}{2}\\mathbf{L}\\mathbf{U}^{n+1} = \\mathbf{U}^{n} + \\frac{\\Delta t}{2}\\mathbf{L}\\mathbf{U}^{n} $$\n$$ \\left( \\mathbf{I} - \\frac{\\Delta t}{2}\\mathbf{L} \\right) \\mathbf{U}^{n+1} = \\left( \\mathbf{I} + \\frac{\\Delta t}{2}\\mathbf{L} \\right) \\mathbf{U}^{n} $$\nAt each time step, we form the matrices $\\mathbf{A} = \\mathbf{I} - \\frac{\\Delta t}{2}\\mathbf{L}$ and $\\mathbf{B} = \\mathbf{I} + \\frac{\\Delta t}{2}\\mathbf{L}$, compute the right-hand side vector $\\mathbf{b} = \\mathbf{B}\\mathbf{U}^n$, and solve the linear system $\\mathbf{A}\\mathbf{U}^{n+1} = \\mathbf{b}$ using a standard linear solver. This scheme preserves the mass conservation property of the semi-discretization, as shown by left-multiplying by $\\mathbf{v}^\\top$:\n$$ \\mathbf{v}^\\top \\left( \\mathbf{I} - \\frac{\\Delta t}{2}\\mathbf{L} \\right) \\mathbf{U}^{n+1} = \\mathbf{v}^\\top \\left( \\mathbf{I} + \\frac{\\Delta t}{2}\\mathbf{L} \\right) \\mathbf{U}^{n} $$\nSince $\\mathbf{v}^\\top \\mathbf{L} = \\mathbf{0}^\\top$, this simplifies to $\\mathbf{v}^\\top \\mathbf{U}^{n+1} = \\mathbf{v}^\\top \\mathbf{U}^{n}$, confirming that $\\sum_j U_j^{n+1} = \\sum_j U_j^n$. Consequently, the total mass $M^n = \\sum_j U_j^n \\Delta x$ is conserved across time steps, differing only by floating-point precision errors.\n\nThe implementation will first initialize the solution vector $\\mathbf{U}^0$ by sampling the given initial condition $u(x,0)$ at the cell centers $x_j = (j+1/2)\\Delta x$. Then, it will construct the matrix $\\mathbf{L}$ based on the harmonic mean of cell-centered $D(x)$ values. Finally, it will loop through the required number of time steps, solving the linear system at each step. The conservation of total mass $M^n$ is verified by comparing the initial mass $M^0$ with the final mass $M^{\\text{final}}$ against the specified tolerance $\\tau = 10^{-10}$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D diffusion equation using a Crank-Nicolson finite-volume scheme\n    and verifies mass conservation for a suite of test cases.\n    \"\"\"\n    \n    # Define test cases as specified in the problem statement\n    test_cases = [\n        {\n            \"N\": 4, \"dt\": 0.2, \"steps\": 8, \"L\": 1.0,\n            \"D_func\": lambda x: np.ones_like(x),\n            \"u_init_func\": lambda x: 1.0 + np.sin(2 * np.pi * x)\n        },\n        {\n            \"N\": 5, \"dt\": 0.15, \"steps\": 12, \"L\": 1.0,\n            \"D_func\": lambda x: 1.0 + 0.5 * np.sin(2 * np.pi * x),\n            \"u_init_func\": lambda x: 0.8 + np.cos(2 * np.pi * x)\n        },\n        {\n            \"N\": 3, \"dt\": 0.5, \"steps\": 5, \"L\": 1.0,\n            \"D_func\": lambda x: np.piecewise(x, [x % 1.0  0.5, x % 1.0 = 0.5], [0.1, 1.0]),\n            \"u_init_func\": lambda x: 1.2 + np.sin(4 * np.pi * x)\n        }\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        N = case[\"N\"]\n        dt = case[\"dt\"]\n        num_steps = case[\"steps\"]\n        L = case[\"L\"]\n        D_func = case[\"D_func\"]\n        u_init_func = case[\"u_init_func\"]\n        \n        # 1. Define grid and initialize state vector U\n        dx = L / N\n        # Cell centers\n        x_j = (np.arange(N) + 0.5) * dx\n        \n        # Initial condition\n        U_current = u_init_func(x_j)\n        \n        # 2. Calculate initial total mass\n        M_initial = np.sum(U_current) * dx\n        \n        # 3. Construct the spatial operator L\n        # Cell-centered diffusion coefficients\n        D_j = D_func(x_j)\n        \n        # Face diffusion coefficients using harmonic mean\n        # D_face[j] stores D_{j+1/2} (interface between cell j and j+1)\n        # np.roll(D_j, -1) handles periodic boundary for D_{j+1}\n        D_j_plus_1 = np.roll(D_j, -1)\n        # Avoid division by zero if D_j + D_j_plus_1 is zero, although D(x)  0\n        D_face = np.divide(2 * D_j * D_j_plus_1, D_j + D_j_plus_1, \n                           out=np.zeros_like(D_j), where=(D_j + D_j_plus_1) != 0)\n\n        # Construct L matrix\n        L_matrix = np.zeros((N, N))\n        inv_dx2 = 1.0 / (dx * dx)\n        for j in range(N):\n            # D_{j+1/2} is at the right face of cell j\n            D_plus_half = D_face[j]\n            # D_{j-1/2} is at the left face of cell j (which is right face of cell j-1)\n            D_minus_half = D_face[(j - 1 + N) % N]\n            \n            # Indices for periodic boundaries\n            j_minus_1 = (j - 1 + N) % N\n            j_plus_1 = (j + 1) % N\n            \n            # Fill the j-th row of L\n            L_matrix[j, j_minus_1] = D_minus_half * inv_dx2\n            L_matrix[j, j] = -(D_plus_half + D_minus_half) * inv_dx2\n            L_matrix[j, j_plus_1] = D_plus_half * inv_dx2\n            \n        # 4. Construct Crank-Nicolson system matrices A and B\n        I = np.identity(N)\n        A = I - (dt / 2.0) * L_matrix\n        B = I + (dt / 2.0) * L_matrix\n        \n        # 5. Perform time stepping\n        for _ in range(num_steps):\n            # Calculate right-hand side: b = B * U^n\n            rhs = B @ U_current\n            # Solve for next time step: A * U^{n+1} = b\n            U_next = np.linalg.solve(A, rhs)\n            U_current = U_next\n            \n        # 6. Calculate final total mass\n        M_final = np.sum(U_current) * dx\n        \n        # 7. Verify mass conservation\n        conservation_tolerance = 1e-10\n        is_conserved = np.abs(M_final - M_initial)  conservation_tolerance\n        results.append(is_conserved)\n\n    # Final print statement in the exact required format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3115317"}, {"introduction": "While the Crank-Nicolson method is prized for its second-order accuracy and unconditional stability, it has a well-known drawback: it can produce non-physical oscillations when applied to problems with discontinuous or sharp initial data. This is because its amplification factor has a modulus of one for high-frequency modes, meaning it fails to damp them. This exercise [@problem_id:3115233] introduces a practical and effective solution: using a single, strongly-damping backward Euler step to \"start up\" the simulation before switching to the more accurate Crank-Nicolson scheme for the remaining steps. You will implement and quantitatively compare both strategies to see firsthand how this hybrid approach improves the quality and physical realism of the numerical solution.", "problem": "Consider the one-dimensional heat diffusion initial-boundary value problem defined on a finite interval with homogeneous Dirichlet boundary conditions. The physical model is the partial differential equation for heat diffusion, where the temperature field satisfies $u_t = \\alpha u_{xx}$ on the domain $x \\in [0,L]$ and times $t \\ge 0$, with boundary conditions $u(0,t) = 0$ and $u(L,t) = 0$, and initial condition $u(x,0) = u_0(x)$. Let $u$ be dimensionless temperature, $x$ be position in meters, $t$ be time in seconds, $L$ be length in meters, and $\\alpha$ be the thermal diffusivity in square meters per second.\n\nStarting from the fundamental definitions of spatial differentiation and the trapezoidal rule for time integration, implement two fully implicit time-marching strategies to evolve the semi-discrete system obtained by second-order central differences in space:\n- Strategy A (pure Crank–Nicolson): apply the trapezoidal rule at every time step starting from $t=0$.\n- Strategy B (Backward Euler start-up followed by Crank–Nicolson): apply one initial step with backward Euler (also known as implicit Euler) and then switch to Crank–Nicolson for all remaining steps.\n\nThe spatial grid should use $M$ points including the two boundaries, uniformly spaced with $\\Delta x = L/(M-1)$; only interior unknowns are advanced in time. The initial condition is a rectangular step defined by\n$u_0(x) = 1$ for $x \\in [0.4L, 0.6L]$ and $u_0(x) = 0$ otherwise, with $u(0,0) = 0$ and $u(L,0) = 0$ enforcing the boundaries. These values are dimensionless.\n\nDefine the following scalar measure of spurious oscillations at a given final time $T$: construct the full vector consisting of the two boundary values and the interior solution, and let $u_{\\max}$ be its maximum and $u_{\\min}$ be its minimum. The physical bounds implied by the maximum principle for the continuous model and the choice of initial and boundary data are $0 \\le u \\le 1$. Quantify the violation of these bounds by\n$$\n\\mathcal{M} = \\max(0, u_{\\max} - 1) + \\max(0, 0 - u_{\\min}),\n$$\nwhich is a nonnegative real number. A larger value of $\\mathcal{M}$ indicates more severe spurious oscillations. For each test case, compute $\\mathcal{M}_{\\mathrm{CN}}$ under Strategy A and $\\mathcal{M}_{\\mathrm{BE}\\rightarrow\\mathrm{CN}}$ under Strategy B, and report the reduction\n$$\nR = \\mathcal{M}_{\\mathrm{CN}} - \\mathcal{M}_{\\mathrm{BE}\\rightarrow\\mathrm{CN}}.\n$$\nPositive $R$ indicates that the one-step backward Euler start-up reduced spurious oscillations.\n\nYour program must implement the finite-difference semi-discrete model and the two implicit time integrators from first principles, ensuring scientifically realistic parameter usage. Use the following test suite of parameter sets, which all satisfy that $N_t = T/\\Delta t$ is an integer number of time steps:\n- Test $1$: $\\alpha = 1.0\\,\\mathrm{m^2/s}$, $L = 1.0\\,\\mathrm{m}$, $M = 101$, $\\Delta t = 1\\times 10^{-4}\\,\\mathrm{s}$, $T = 2\\times 10^{-3}\\,\\mathrm{s}$.\n- Test $2$: $\\alpha = 1.0\\,\\mathrm{m^2/s}$, $L = 1.0\\,\\mathrm{m}$, $M = 101$, $\\Delta t = 1\\times 10^{-5}\\,\\mathrm{s}$, $T = 2\\times 10^{-4}\\,\\mathrm{s}$.\n- Test $3$: $\\alpha = 1.0\\,\\mathrm{m^2/s}$, $L = 1.0\\,\\mathrm{m}$, $M = 51$, $\\Delta t = 5\\times 10^{-4}\\,\\mathrm{s}$, $T = 1\\times 10^{-2}\\,\\mathrm{s}$.\n- Test $4$: $\\alpha = 1.0\\,\\mathrm{m^2/s}$, $L = 1.0\\,\\mathrm{m}$, $M = 101$, $\\Delta t = 1\\times 10^{-3}\\,\\mathrm{s}$, $T = 2\\times 10^{-2}\\,\\mathrm{s}$.\n\nFor each test case, compute $R$ and express it as a decimal rounded to six digits after the decimal point. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $[r_1,r_2,r_3,r_4]$), where $r_i$ is the value of $R$ for Test $i$. All quantities involving physical units must be interpreted exactly as specified; the output is dimensionless real numbers.", "solution": "The problem presented is valid, as it is scientifically grounded in the principles of heat diffusion and numerical analysis, is well-posed with a complete and consistent set of definitions and parameters, and is objective in its formulation. We can therefore proceed with a full solution.\n\nThe problem asks for the implementation and comparison of two time-integration schemes for the one-dimensional heat equation, $u_t = \\alpha u_{xx}$. We will first semi-discretize the equation in space and then apply the specified time-marching methods to the resulting system of ordinary differential equations.\n\nThe governing partial differential equation (PDE) is:\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}\n$$\nfor position $x \\in [0, L]$ and time $t \\ge 0$. The problem is subject to homogeneous Dirichlet boundary conditions, $u(0,t) = 0$ and $u(L,t) = 0$, and a discontinuous initial condition, $u(x,0) = u_0(x)$, where $u_0(x) = 1$ for $x \\in [0.4L, 0.6L]$ and $u_0(x) = 0$ otherwise.\n\n**1. Spatial Discretization**\n\nWe first discretize the spatial domain $[0,L]$ into $M$ uniformly spaced points $x_j = j \\Delta x$ for $j = 0, 1, \\dots, M-1$, where the grid spacing is $\\Delta x = L/(M-1)$. Let $u_j(t)$ be the numerical approximation of $u(x_j, t)$. The boundary conditions fix $u_0(t) = 0$ and $u_{M-1}(t) = 0$. The solution is sought for the $M-2$ interior points, $j=1, 2, \\dots, M-2$.\n\nThe second spatial derivative, $u_{xx}$, at an interior node $x_j$ is approximated using a second-order central difference stencil:\n$$\n\\frac{\\partial^2 u}{\\partial x^2}\\bigg|_{x=x_j} \\approx \\frac{u_{j+1}(t) - 2u_j(t) + u_{j-1}(t)}{(\\Delta x)^2}\n$$\nSubstituting this into the heat equation for each interior node yields a system of $M-2$ coupled ordinary differential equations (ODEs):\n$$\n\\frac{du_j}{dt} = \\frac{\\alpha}{(\\Delta x)^2} (u_{j-1} - 2u_j + u_{j+1}) \\quad \\text{for } j = 1, \\dots, M-2\n$$\nLet $\\mathbf{u}(t)$ be the column vector of interior unknowns, $\\mathbf{u}(t) = [u_1(t), u_2(t), \\dots, u_{M-2}(t)]^T$. The system of ODEs can be written in matrix form as:\n$$\n\\frac{d\\mathbf{u}}{dt} = A \\mathbf{u}(t)\n$$\nwhere $A$ is the $(M-2) \\times (M-2)$ tridiagonal matrix representing the discretized Laplacian operator, scaled by the thermal diffusivity. Given the homogeneous boundary conditions ($u_0=0, u_{M-1}=0$), the matrix $A$ is:\n$$\nA = \\frac{\\alpha}{(\\Delta x)^2}\n\\begin{pmatrix}\n-2  1  0  \\cdots  0 \\\\\n1  -2  1  \\cdots  0 \\\\\n0  \\ddots  \\ddots  \\ddots  0 \\\\\n0  \\cdots  1  -2  1 \\\\\n0  \\cdots  0  1  -2\n\\end{pmatrix}\n$$\n\n**2. Temporal Integration**\n\nLet $\\mathbf{u}^n$ be the approximation of $\\mathbf{u}(t)$ at time $t_n = n \\Delta t$. We analyze the two required time-integration strategies.\n\n**Strategy A: Pure Crank-Nicolson**\n\nThe Crank-Nicolson method is equivalent to applying the trapezoidal rule to the semi-discrete system $\\frac{d\\mathbf{u}}{dt} = A\\mathbf{u}$:\n$$\n\\frac{\\mathbf{u}^{n+1} - \\mathbf{u}^n}{\\Delta t} = \\frac{1}{2} (A \\mathbf{u}^n + A \\mathbf{u}^{n+1})\n$$\nRearranging the terms to solve for the unknown $\\mathbf{u}^{n+1}$ gives:\n$$\n\\mathbf{u}^{n+1} - \\frac{\\Delta t}{2} A \\mathbf{u}^{n+1} = \\mathbf{u}^n + \\frac{\\Delta t}{2} A \\mathbf{u}^n\n$$\n$$\n\\left(I - \\frac{\\Delta t}{2} A\\right) \\mathbf{u}^{n+1} = \\left(I + \\frac{\\Delta t}{2} A\\right) \\mathbf{u}^n\n$$\nwhere $I$ is the identity matrix. Let the diffusion number be $s = \\frac{\\alpha \\Delta t}{(\\Delta x)^2}$. The matrices in the linear system become:\n- Left-hand side matrix: $C_{\\text{mat}} = I - \\frac{\\Delta t}{2} A = I - \\frac{s}{2} \\text{Tridiag}(1, -2, 1)$, which is the tridiagonal matrix $\\text{Tridiag}(-\\frac{s}{2}, 1+s, -\\frac{s}{2})$.\n- Right-hand side matrix: $D_{\\text{mat}} = I + \\frac{\\Delta t}{2} A = I + \\frac{s}{2} \\text{Tridiag}(1, -2, 1)$, which is the tridiagonal matrix $\\text{Tridiag}(\\frac{s}{2}, 1-s, \\frac{s}{2})$.\n\nAt each time step, we solve the tridiagonal linear system $C_{\\text{mat}} \\mathbf{u}^{n+1} = D_{\\text{mat}} \\mathbf{u}^n$ for $\\mathbf{u}^{n+1}$.\n\n**Strategy B: Backward Euler Start-up followed by Crank-Nicolson**\n\nThis strategy uses a different method for the first time step to damp initial high-frequency components arising from the discontinuous initial condition.\n\n- **Step 1 (from $t_0$ to $t_1$): Backward Euler**\nThe backward (or implicit) Euler method is:\n$$\n\\frac{\\mathbf{u}^1 - \\mathbf{u}^0}{\\Delta t} = A \\mathbf{u}^1\n$$\nRearranging to solve for $\\mathbf{u}^1$:\n$$\n(I - \\Delta t A) \\mathbf{u}^1 = \\mathbf{u}^0\n$$\nThe system matrix is $B_{\\text{mat}} = I - \\Delta t A = I - s \\cdot \\text{Tridiag}(1, -2, 1)$, which is the tridiagonal matrix $\\text{Tridiag}(-s, 1+2s, -s)$. We solve the linear system $B_{\\text{mat}} \\mathbf{u}^1 = \\mathbf{u}^0$.\n\n- **Subsequent Steps (for $n \\ge 1$): Crank-Nicolson**\nFor all subsequent time steps, we revert to the Crank-Nicolson scheme as described in Strategy A:\n$$\nC_{\\text{mat}} \\mathbf{u}^{n+1} = D_{\\text{mat}} \\mathbf{u}^n \\quad \\text{for } n=1, 2, \\dots, N_t-1\n$$\n\n**3. Oscillation Metric and Reduction**\n\nFor each strategy, after evolving the solution to the final time $T$, we obtain the vector of interior unknowns, $\\mathbf{u}^{N_t}$. We then construct the full solution vector by including the boundary values: $\\mathbf{u}_{\\text{full}} = [0, (\\mathbf{u}^{N_t})^T, 0]^T$. The maximum and minimum values, $u_{\\max}$ and $u_{\\min}$, are found from this full vector.\n\nThe measure of spurious oscillations, $\\mathcal{M}$, quantifies the violation of the maximum principle bounds $[0, 1]$:\n$$\n\\mathcal{M} = \\max(0, u_{\\max} - 1) + \\max(0, 0 - u_{\\min})\n$$\nWe compute this metric for both Strategy A ($\\mathcal{M}_{\\mathrm{CN}}$) and Strategy B ($\\mathcal{M}_{\\mathrm{BE}\\rightarrow\\mathrm{CN}}$). The final result for each test case is the reduction in oscillations:\n$$\nR = \\mathcal{M}_{\\mathrm{CN}} - \\mathcal{M}_{\\mathrm{BE}\\rightarrow\\mathrm{CN}}\n$$\nA positive value of $R$ indicates that the one-step backward Euler start-up successfully mitigated the spurious oscillations present in the pure Crank-Nicolson scheme. The implementation will involve setting up the tridiagonal matrices and using an efficient linear solver at each time step.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import solve_banded\n\ndef compute_reduction(alpha: float, L: float, M: int, dt: float, T: float) - float:\n    \"\"\"\n    Solves the 1D heat equation using two different time-marching strategies\n    and computes the reduction in spurious oscillations.\n\n    Args:\n        alpha: Thermal diffusivity (m^2/s).\n        L: Length of the domain (m).\n        M: Number of spatial grid points.\n        dt: Time step size (s).\n        T: Final time (s).\n\n    Returns:\n        The reduction R = M_CN - M_BE_CN, rounded to 6 decimal places.\n    \"\"\"\n    # 1. Setup Grid and Parameters\n    dx = L / (M - 1)\n    x = np.linspace(0, L, M)\n    Nt = int(round(T / dt))\n    num_interior = M - 2\n    \n    # Dimensionless diffusion number\n    s = alpha * dt / (dx**2)\n\n    # 2. Initial Condition\n    u0_full = np.zeros(M)\n    u0_full[(x = 0.4 * L)  (x = 0.6 * L)] = 1.0\n    # Boundary conditions u(0,t)=0 and u(L,t)=0 are already set by np.zeros\n    u0_interior = u0_full[1:-1]\n\n    # 3. Strategy A: Pure Crank-Nicolson\n    # System: C_mat * u^{n+1} = D_mat * u^n\n    # C_mat = Tridiag(-s/2, 1+s, -s/2)\n    # D_mat = Tridiag(s/2, 1-s, s/2)\n    \n    # Matrix for the left-hand side (banded format for scipy)\n    C_mat_banded = np.zeros((3, num_interior))\n    C_mat_banded[0, 1:] = -s / 2.0  # Super-diagonal\n    C_mat_banded[1, :] = 1.0 + s      # Main diagonal\n    C_mat_banded[2, :-1] = -s / 2.0 # Sub-diagonal\n\n    # Diagonals for the right-hand side matrix D_mat\n    D_mat_main_diag = 1.0 - s\n    D_mat_off_diag = s / 2.0\n\n    u_cn = u0_interior.copy()\n    for _ in range(Nt):\n        # Build RHS vector: b = D_mat * u_cn\n        b = np.zeros(num_interior)\n        if num_interior  1:\n            b[1:-1] = (D_mat_off_diag * u_cn[:-2] +\n                       D_mat_main_diag * u_cn[1:-1] +\n                       D_mat_off_diag * u_cn[2:])\n            b[0] = D_mat_main_diag * u_cn[0] + D_mat_off_diag * u_cn[1]\n            b[-1] = D_mat_main_diag * u_cn[-1] + D_mat_off_diag * u_cn[-2]\n        elif num_interior == 1:\n            b[0] = D_mat_main_diag * u_cn[0]\n\n        # Solve C_mat * u_n+1 = b for u_n+1\n        u_cn = solve_banded((1, 1), C_mat_banded, b)\n\n    u_full_cn = np.concatenate(([0], u_cn, [0]))\n    u_max_cn = np.max(u_full_cn)\n    u_min_cn = np.min(u_full_cn)\n    M_cn = max(0, u_max_cn - 1.0) + max(0, -u_min_cn)\n\n    # 4. Strategy B: Backward Euler start-up, then Crank-Nicolson\n    \n    # First step: Backward Euler\n    # System: B_mat * u^1 = u^0\n    # B_mat = Tridiag(-s, 1+2s, -s)\n    B_mat_banded = np.zeros((3, num_interior))\n    B_mat_banded[0, 1:] = -s\n    B_mat_banded[1, :] = 1.0 + 2.0 * s\n    B_mat_banded[2, :-1] = -s\n    \n    u_be_cn = solve_banded((1, 1), B_mat_banded, u0_interior)\n\n    # Subsequent steps: Crank-Nicolson\n    if Nt  1:\n        for _ in range(Nt - 1):\n            b = np.zeros(num_interior)\n            if num_interior  1:\n                b[1:-1] = (D_mat_off_diag * u_be_cn[:-2] +\n                           D_mat_main_diag * u_be_cn[1:-1] +\n                           D_mat_off_diag * u_be_cn[2:])\n                b[0] = D_mat_main_diag * u_be_cn[0] + D_mat_off_diag * u_be_cn[1]\n                b[-1] = D_mat_main_diag * u_be_cn[-1] + D_mat_off_diag * u_be_cn[-2]\n            elif num_interior == 1:\n                b[0] = D_mat_main_diag * u_be_cn[0]\n\n            u_be_cn = solve_banded((1, 1), C_mat_banded, b)\n\n    u_full_be_cn = np.concatenate(([0], u_be_cn, [0]))\n    u_max_be_cn = np.max(u_full_be_cn)\n    u_min_be_cn = np.min(u_full_be_cn)\n    M_be_cn = max(0, u_max_be_cn - 1.0) + max(0, -u_min_be_cn)\n\n    # 5. Calculate Reduction R\n    R = M_cn - M_be_cn\n    return round(R, 6)\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    test_cases = [\n        # (alpha, L, M, dt, T)\n        (1.0, 1.0, 101, 1e-4, 2e-3),\n        (1.0, 1.0, 101, 1e-5, 2e-4),\n        (1.0, 1.0, 51, 5e-4, 1e-2),\n        (1.0, 1.0, 101, 1e-3, 2e-2),\n    ]\n\n    results = []\n    for case in test_cases:\n        alpha, L, M, dt, T = case\n        result = compute_reduction(alpha, L, M, dt, T)\n        results.append(f\"{result:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "3115233"}, {"introduction": "Real-world engineering and physics problems often involve multiple materials or domains, leading to coupled systems of partial differential equations. This advanced practice [@problem_id:3115280] extends the Crank-Nicolson method to a coupled diffusion system representing two materials with different thermal properties sharing an interface. You will not only construct the monolithic (fully coupled) scheme but also explore a block-iterative variant, a common strategy for solving large, coupled systems. The core of this exercise is to move beyond simply running a simulation to formally analyzing its stability by computing the spectral radius $\\rho(G)$ of the system's amplification operator, a critical skill in computational science.", "problem": "You are asked to derive and implement a fully coupled block Crank–Nicolson (CN) scheme for a one-dimensional coupled diffusion system representing two materials sharing an interface, and to study the coupling stability by computing the spectral radius of the one-step amplification operator. Work entirely in dimensionless variables, with no physical units.\n\nStart from the following fundamental base:\n- The diffusion of heat in a one-dimensional bar with spatially varying thermal diffusivity is modeled by the partial differential equation (PDE) $\\partial_t u(x,t) = \\partial_x ( \\alpha(x) \\, \\partial_x u(x,t) )$, where $u(x,t)$ is the temperature field and $\\alpha(x) \\ge 0$ is the thermal diffusivity.\n- The conservative finite-difference (or equivalently, finite-volume) semi-discretization on a uniform mesh of spacing $h$ in the interior yields an ordinary differential equation (ODE) system $\\frac{d\\mathbf{u}}{dt} = A \\, \\mathbf{u}$, where $A$ is a tridiagonal matrix constructed from face-centered fluxes using harmonic-averaged diffusivities at faces to enforce continuity of both temperature and heat flux at material interfaces.\n- The Crank–Nicolson (CN) method is the time integrator defined by the trapezoidal rule applied to the semi-discrete ODE, producing a linear one-step method for homogeneous problems of the form $\\left(I - \\frac{\\Delta t}{2} A\\right) \\mathbf{u}^{n+1} = \\left(I + \\frac{\\Delta t}{2} A\\right) \\mathbf{u}^{n}$.\n\nProblem setup:\n- Consider the domain $[0,L]$ with $L = L_1 + L_2$, where the left subdomain $[0,L_1]$ is material $1$ with constant diffusivity $\\alpha_1$ and the right subdomain $[L_1, L]$ is material $2$ with constant diffusivity $\\alpha_2$.\n- Impose homogeneous Dirichlet boundary conditions $u(0,t)=0$ and $u(L,t)=0$.\n- Use a uniform grid with $N$ interior nodes and spacing $h = \\frac{L}{N+1}$, and assume $N$ is chosen such that the interface location $x=L_1$ coincides with a grid node, i.e., $k = \\frac{(N+1)L_1}{L}$ is an integer with $1 \\le k \\le N$. This splits the semi-discrete unknown vector into a block form $\\mathbf{u} = \\begin{bmatrix} \\mathbf{u}_1 \\\\ \\mathbf{u}_2 \\end{bmatrix}$, where $\\mathbf{u}_1 \\in \\mathbb{R}^{k}$ corresponds to nodes in material $1$ (including the interface node), and $\\mathbf{u}_2 \\in \\mathbb{R}^{N-k}$ corresponds to nodes in material $2$.\n- Construct the tridiagonal matrix $A \\in \\mathbb{R}^{N \\times N}$ representing the semi-discrete operator for $\\partial_x(\\alpha \\partial_x u)$ with piecewise constant $\\alpha(x)$ and homogeneous Dirichlet boundaries, using the conservative face-flux form. For each interior node index $i \\in \\{1,\\dots,N\\}$ (using one-based indexing for exposition), define the face coefficients $\\alpha_{i+1/2}$ and $\\alpha_{i-1/2}$ via harmonic averaging across each face:\n  $$ \\alpha_{i+1/2} = \\begin{cases}\n  \\alpha_1  \\text{if the face lies strictly inside material } 1, \\\\\n  \\alpha_2  \\text{if the face lies strictly inside material } 2, \\\\\n  \\dfrac{2 \\alpha_1 \\alpha_2}{\\alpha_1 + \\alpha_2}  \\text{if the face coincides with the interface,}\n  \\end{cases} $$\n  and similarly for $\\alpha_{i-1/2}$. Then the discrete operator at node $i$ is\n  $$ (A \\mathbf{u})_i = \\frac{1}{h^2} \\left( \\alpha_{i+1/2} (u_{i+1} - u_i) - \\alpha_{i-1/2} (u_i - u_{i-1}) \\right), $$\n  with $u_0 = 0$ and $u_{N+1} = 0$ enforced by the Dirichlet boundary conditions. This ensures temperature and flux continuity at the interface.\n- Partition $A$ into blocks with the interface split index $k$: $A = \\begin{bmatrix} A_{11}  A_{12} \\\\ A_{21}  A_{22} \\end{bmatrix}$.\n\nTasks:\n1. Derive from first principles the semi-discrete matrix $A$ for the coupled system using the conservative face-flux discretization with harmonic averaging. Explain why this enforces continuity of temperature and heat flux at the interface without adding extra unknowns.\n2. Derive the monolithic Crank–Nicolson one-step amplification operator $G$ that maps $\\mathbf{u}^n \\mapsto \\mathbf{u}^{n+1}$ for the homogeneous system, by expressing it only in terms of $A$, the time step $\\Delta t$, and the identity matrix $I$, all precisely defined from the previous steps.\n3. Consider a block-iterative variant where the within-material blocks are treated implicitly, but the inter-material coupling is treated with a single Jacobi iteration started from $\\mathbf{u}^{n+1,(0)} = \\mathbf{u}^n$. Derive the corresponding single-iteration block-amplification operator $J$ that maps $\\mathbf{u}^n \\mapsto \\mathbf{u}^{n+1}$ in block form using only $A_{11}$, $A_{22}$, $A_{12}$, $A_{21}$, $\\Delta t$, and block identities. State clearly any linear algebra steps used.\n4. For each operator $X \\in \\{G, J\\}$, define the spectral radius $\\rho(X)$ as the maximum modulus of its eigenvalues and explain why it is a useful indicator for linear stability of the one-step method applied to the homogeneous system.\n\nProgramming requirements:\n- Implement in a single program the construction of $A$ and the computation of $\\rho(G)$ and $\\rho(J)$ as derived above.\n- Use the following fixed test suite, with domain lengths $L_1 = 1$, $L_2 = 1$, total length $L = 2$, and interface aligned by choosing odd $N$ so that $k = \\frac{N+1}{2}$:\n  - Test $1$ (monolithic CN, happy path): $\\alpha_1 = 1$, $\\alpha_2 = 10$, $N=41$, $\\Delta t = 2.0$; compute $\\rho(G)$.\n  - Test $2$ (monolithic CN, very large time step): $\\alpha_1 = 1$, $\\alpha_2 = 100$, $N=81$, $\\Delta t = 50.0$; compute $\\rho(G)$.\n  - Test $3$ (one-iteration block-Jacobi CN, strong contrast and large time step): $\\alpha_1 = 1$, $\\alpha_2 = 100$, $N=41$, $\\Delta t = 200.0$; compute $\\rho(J)$.\n  - Test $4$ (one-iteration block-Jacobi CN, small time step edge case): $\\alpha_1 = 0.5$, $\\alpha_2 = 2.0$, $N=21$, $\\Delta t = 0.1$; compute $\\rho(J)$.\n- Your program must compute, for each test case, the spectral radius as a floating-point number and aggregate the four results in order.\n- Final output format: Your program should produce a single line containing a Python-style list of the four spectral radii, rounded to exactly six digits after the decimal point, with no additional text. For example, an output line has the form $\\left[ r_1, r_2, r_3, r_4 \\right]$ where each $r_i$ is printed with exactly six digits after the decimal point.\n\nConstraints and notes:\n- Use only linear algebra operations that are well-defined from the derived formulas; do not use any pre-computed stability formulas.\n- Angles are not involved, and there are no physical units; all quantities are dimensionless.\n- Ensure that your implementation respects the interface alignment constraint by using odd $N$ so that $k = \\frac{N+1}{2}$ is an integer.", "solution": "The problem as stated is scientifically grounded, well-posed, and self-contained. It presents a standard but comprehensive problem in computational science, requiring the derivation and implementation of a numerical scheme for a coupled PDE system and an analysis of its stability. All parameters and methods are clearly defined, permitting a unique and verifiable solution.\n\n### Task 1: Derivation of the Semi-Discrete Matrix $A$ and Flux Continuity\n\nThe governing partial differential equation (PDE) is $\\partial_t u = \\partial_x (\\alpha(x) \\partial_x u)$. Integrating this equation over a control volume (or cell) centered at a grid node $x_i$, from $x_{i-1/2} = x_i - h/2$ to $x_{i+1/2} = x_i + h/2$, where $h$ is the uniform grid spacing, yields:\n$$ \\int_{x_{i-1/2}}^{x_{i+1/2}} \\partial_t u \\, dx = \\int_{x_{i-1/2}}^{x_{i+1/2}} \\partial_x (\\alpha(x) \\partial_x u) \\, dx $$\nApproximating the time derivative of the cell average $\\bar{u}_i(t) = \\frac{1}{h} \\int_{x_{i-1/2}}^{x_{i+1/2}} u(x,t) dx$ with the time derivative of the nodal value $u_i(t) = u(x_i, t)$, we get $h \\frac{du_i}{dt}$. The right-hand side, by the fundamental theorem of calculus, is the difference in fluxes $F(x,t) = \\alpha(x) \\partial_x u(x,t)$ at the cell faces:\n$$ \\int_{x_{i-1/2}}^{x_{i+1/2}} \\partial_x (\\alpha(x) \\partial_x u) \\, dx = F(x_{i+1/2}) - F(x_{i-1/2}) $$\nThe finite-difference semi-discretization is obtained by approximating these fluxes. For a face at $x_{i+1/2}$ between nodes $i$ and $i+1$, the flux is approximated as $F_{i+1/2} \\approx \\alpha_{i+1/2} \\frac{u_{i+1} - u_i}{h}$. Combining these gives the semi-discrete ODE for each interior node $i$:\n$$ \\frac{du_i}{dt} = \\frac{1}{h} (F_{i+1/2} - F_{i-1/2}) \\approx \\frac{1}{h} \\left( \\alpha_{i+1/2} \\frac{u_{i+1} - u_i}{h} - \\alpha_{i-1/2} \\frac{u_i - u_{i-1}}{h} \\right) $$\n$$ \\frac{du_i}{dt} = \\frac{1}{h^2} \\left( \\alpha_{i+1/2}(u_{i+1} - u_i) - \\alpha_{i-1/2}(u_i - u_{i-1}) \\right) $$\nThis matches the provided expression for $(A \\mathbf{u})_i$. This scheme is conservative because the flux leaving cell $i$ at face $i+1/2$, which is $F_{i+1/2}$, is identical to the flux entering cell $i+1$ at the same face.\n\nAt a material interface, the physical conditions are continuity of temperature, $u(x^*) = u(x^*-) = u(x^*+)$, and continuity of heat flux, $F(x^*) = F(x^*-) = F(x^*+)$, which implies $\\alpha(x^*-)\\partial_x u|_{x^*-} = \\alpha(x^*+)\\partial_x u|_{x^*+}$.\nIn our discretization, temperature continuity is inherently satisfied by using a single unknown $u_i$ at each node, without splitting values at the interface.\nFlux continuity is enforced by the choice of $\\alpha_{i+1/2}$ at the interface face. At the interface between material $1$ and $2$, say located at $x_{k+1/2}$, we have $\\alpha(x_{k+1/2}-) = \\alpha_1$ and $\\alpha(x_{k+1/2}+) = \\alpha_2$. To find an effective diffusivity $\\alpha_{k+1/2}$ that properly models the flux, consider the steady-state flux between nodes $k$ and $k+1$. The resistance to heat flow is additive. The resistance from $x_k$ to $x_{k+1/2}$ is $\\frac{h/2}{\\alpha_1}$ and from $x_{k+1/2}$ to $x_{k+1}$ is $\\frac{h/2}{\\alpha_2}$. The total resistance over distance $h$ is $\\frac{h/2}{\\alpha_1} + \\frac{h/2}{\\alpha_2}$. The effective diffusivity $\\alpha_{k+1/2}$ should satisfy $\\frac{h}{\\alpha_{k+1/2}} = \\frac{h/2}{\\alpha_1} + \\frac{h/2}{\\alpha_2}$, which gives $\\frac{1}{\\alpha_{k+1/2}} = \\frac{1}{2}\\left(\\frac{1}{\\alpha_1} + \\frac{1}{\\alpha_2}\\right)$. This is the harmonic mean:\n$$ \\alpha_{k+1/2} = \\frac{2 \\alpha_1 \\alpha_2}{\\alpha_1 + \\alpha_2} $$\nUsing this value ensures that the discrete flux $F_{k+1/2} = -\\alpha_{k+1/2} \\frac{u_{k+1}-u_k}{h}$ correctly models the physical flux continuity across the material discontinuity.\n\nThe matrix $A$ is an $N \\times N$ tridiagonal matrix defined by the operator. For the $j$-th row (using $1$-based indexing, $j \\in \\{1,\\dots,N\\}$), the entries are:\n$$ A_{j,j-1} = \\frac{\\alpha_{j-1/2}}{h^2}, \\quad A_{j,j} = -\\frac{\\alpha_{j-1/2} + \\alpha_{j+1/2}}{h^2}, \\quad A_{j,j+1} = \\frac{\\alpha_{j+1/2}}{h^2} $$\nwith boundary conditions $u_0=0$ and $u_{N+1}=0$. The face coefficient $\\alpha_{j+1/2}$ is $\\alpha_1$ if nodes $j$ and $j+1$ are in material 1, $\\alpha_2$ if both are in material 2, and the harmonic mean if node $j$ is in material 1 and node $j+1$ is in material 2. Given the interface is between nodes $k$ and $k+1$, $\\alpha_{k+1/2}$ is the harmonic mean.\n\n### Task 2: Monolithic Crank-Nicolson Amplification Operator $G$\n\nThe Crank-Nicolson (CN) method for the semi-discrete system $\\frac{d\\mathbf{u}}{dt} = A \\mathbf{u}$ is derived from the trapezoidal rule for time integration:\n$$ \\frac{\\mathbf{u}^{n+1} - \\mathbf{u}^n}{\\Delta t} = \\frac{1}{2} (A \\mathbf{u}^{n+1} + A \\mathbf{u}^n) $$\nRearranging this equation to group terms with $\\mathbf{u}^{n+1}$ on the left-hand side and terms with $\\mathbf{u}^n$ on the right-hand side gives:\n$$ \\mathbf{u}^{n+1} - \\frac{\\Delta t}{2} A \\mathbf{u}^{n+1} = \\mathbf{u}^n + \\frac{\\Delta t}{2} A \\mathbf{u}^n $$\nFactoring out the vectors $\\mathbf{u}^{n+1}$ and $\\mathbf{u}^n$:\n$$ \\left(I - \\frac{\\Delta t}{2} A\\right) \\mathbf{u}^{n+1} = \\left(I + \\frac{\\Delta t}{2} A\\right) \\mathbf{u}^n $$\nThe one-step amplification operator $G$ is defined by the relation $\\mathbf{u}^{n+1} = G \\mathbf{u}^n$. To find $G$, we solve for $\\mathbf{u}^{n+1}$ by multiplying both sides by the inverse of the matrix on the left. The matrix $A$ for a diffusion problem is symmetric and negative semi-definite, so its eigenvalues are non-positive. Thus, the eigenvalues of $I - \\frac{\\Delta t}{2}A$ are all greater than or equal to $1$, which guarantees its invertibility.\n$$ \\mathbf{u}^{n+1} = \\left(I - \\frac{\\Delta t}{2} A\\right)^{-1} \\left(I + \\frac{\\Delta t}{2} A\\right) \\mathbf{u}^n $$\nBy inspection, the monolithic amplification operator is:\n$$ G = \\left(I - \\frac{\\Delta t}{2} A\\right)^{-1} \\left(I + \\frac{\\Delta t}{2} A\\right) $$\n\n### Task 3: One-Iteration Block-Jacobi CN Amplification Operator $J$\n\nWe begin with the CN scheme written in block form according to the partition $\\mathbf{u} = \\begin{bmatrix} \\mathbf{u}_1 \\\\ \\mathbf{u}_2 \\end{bmatrix}$ and $A = \\begin{bmatrix} A_{11}  A_{12} \\\\ A_{21}  A_{22} \\end{bmatrix}$:\n$$ \\left(\\begin{bmatrix} I_1  0 \\\\ 0  I_2 \\end{bmatrix} - \\frac{\\Delta t}{2} \\begin{bmatrix} A_{11}  A_{12} \\\\ A_{21}  A_{22} \\end{bmatrix}\\right) \\begin{bmatrix} \\mathbf{u}_1^{n+1} \\\\ \\mathbf{u}_2^{n+1} \\end{bmatrix} = \\left(\\begin{bmatrix} I_1  0 \\\\ 0  I_2 \\end{bmatrix} + \\frac{\\Delta t}{2} \\begin{bmatrix} A_{11}  A_{12} \\\\ A_{21}  A_{22} \\end{bmatrix}\\right) \\begin{bmatrix} \\mathbf{u}_1^{n} \\\\ \\mathbf{u}_2^{n} \\end{bmatrix} $$\nThis expands to a coupled system for $\\mathbf{u}_1^{n+1}$ and $\\mathbf{u}_2^{n+1}$:\n$$ \\begin{cases} (I_1 - \\frac{\\Delta t}{2} A_{11}) \\mathbf{u}_1^{n+1} - \\frac{\\Delta t}{2} A_{12} \\mathbf{u}_2^{n+1} = (I_1 + \\frac{\\Delta t}{2} A_{11}) \\mathbf{u}_1^n + \\frac{\\Delta t}{2} A_{12} \\mathbf{u}_2^n \\\\ -\\frac{\\Delta t}{2} A_{21} \\mathbf{u}_1^{n+1} + (I_2 - \\frac{\\Delta t}{2} A_{22}) \\mathbf{u}_2^{n+1} = \\frac{\\Delta t}{2} A_{21} \\mathbf{u}_1^n + (I_2 + \\frac{\\Delta t}{2} A_{22}) \\mathbf{u}_2^n \\end{cases} $$\nA block-Jacobi iteration scheme can be used to approximately solve this system. The diagonal blocks are treated implicitly, while the off-diagonal coupling terms are lagged. For a single Jacobi iteration with the initial guess $\\mathbf{u}^{n+1,(0)} = \\mathbf{u}^n$, we replace $\\mathbf{u}_1^{n+1}$ and $\\mathbf{u}_2^{n+1}$ in the off-diagonal terms on the left-hand side with $\\mathbf{u}_1^n$ and $\\mathbf{u}_2^n$ respectively:\n$$ \\begin{cases} (I_1 - \\frac{\\Delta t}{2} A_{11}) \\mathbf{u}_1^{n+1} - \\frac{\\Delta t}{2} A_{12} \\mathbf{u}_2^{n} = (I_1 + \\frac{\\Delta t}{2} A_{11}) \\mathbf{u}_1^n + \\frac{\\Delta t}{2} A_{12} \\mathbf{u}_2^n \\\\ -\\frac{\\Delta t}{2} A_{21} \\mathbf{u}_1^{n} + (I_2 - \\frac{\\Delta t}{2} A_{22}) \\mathbf{u}_2^{n+1} = \\frac{\\Delta t}{2} A_{21} \\mathbf{u}_1^n + (I_2 + \\frac{\\Delta t}{2} A_{22}) \\mathbf{u}_2^n \\end{cases} $$\nNow, we rearrange to solve for $\\mathbf{u}_1^{n+1}$ and $\\mathbf{u}_2^{n+1}$ by moving all terms evaluated at time $n$ to the right-hand side:\n$$ \\begin{cases} (I_1 - \\frac{\\Delta t}{2} A_{11}) \\mathbf{u}_1^{n+1} = (I_1 + \\frac{\\Delta t}{2} A_{11}) \\mathbf{u}_1^n + \\Delta t A_{12} \\mathbf{u}_2^n \\\\ (I_2 - \\frac{\\Delta t}{2} A_{22}) \\mathbf{u}_2^{n+1} = \\Delta t A_{21} \\mathbf{u}_1^n + (I_2 + \\frac{\\Delta t}{2} A_{22}) \\mathbf{u}_2^n \\end{cases} $$\nWe solve for $\\mathbf{u}_1^{n+1}$ and $\\mathbf{u}_2^{n+1}$ by inverting the block-diagonal matrices on the left:\n$$ \\mathbf{u}_1^{n+1} = (I_1 - \\frac{\\Delta t}{2} A_{11})^{-1} (I_1 + \\frac{\\Delta t}{2} A_{11}) \\mathbf{u}_1^n + (I_1 - \\frac{\\Delta t}{2} A_{11})^{-1} (\\Delta t A_{12}) \\mathbf{u}_2^n $$\n$$ \\mathbf{u}_2^{n+1} = (I_2 - \\frac{\\Delta t}{2} A_{22})^{-1} (\\Delta t A_{21}) \\mathbf{u}_1^n + (I_2 - \\frac{\\Delta t}{2} A_{22})^{-1} (I_2 + \\frac{\\Delta t}{2} A_{22}) \\mathbf{u}_2^n $$\nWriting this in matrix form $\\mathbf{u}^{n+1} = J \\mathbf{u}^n$, we identify the block-amplification operator $J$:\n$$ J = \\begin{bmatrix}\n(I_1 - \\frac{\\Delta t}{2} A_{11})^{-1}(I_1 + \\frac{\\Delta t}{2} A_{11})  \\Delta t (I_1 - \\frac{\\Delta t}{2} A_{11})^{-1} A_{12} \\\\\n\\Delta t (I_2 - \\frac{\\Delta t}{2} A_{22})^{-1} A_{21}  (I_2 - \\frac{\\Delta t}{2} A_{22})^{-1}(I_2 + \\frac{\\Delta t}{2} A_{22})\n\\end{bmatrix} $$\n\n### Task 4: Spectral Radius and Stability Analysis\n\nFor a linear one-step numerical method of the form $\\mathbf{u}^{n+1} = X \\mathbf{u}^n$, where $X$ is the amplification operator (or matrix), the solution after $n$ time steps is given by $\\mathbf{u}^n = X^n \\mathbf{u}^0$. The stability of the method depends on the behavior of the matrix powers $X^n$ as $n \\to \\infty$.\n\nThe behavior of $X^n$ is governed by the eigenvalues of $X$. Let $\\{\\lambda_i\\}$ be the eigenvalues of $X$ and $\\{\\mathbf{v}_i\\}$ be the corresponding eigenvectors, which form a basis (assuming $X$ is diagonalizable). Any initial condition $\\mathbf{u}^0$ can be written as a linear combination of these eigenvectors: $\\mathbf{u}^0 = \\sum_i c_i \\mathbf{v}_i$.\nApplying the operator $n$ times gives:\n$$ \\mathbf{u}^n = X^n \\mathbf{u}^0 = X^n \\left(\\sum_i c_i \\mathbf{v}_i\\right) = \\sum_i c_i (X^n \\mathbf{v}_i) = \\sum_i c_i (\\lambda_i^n \\mathbf{v}_i) $$\nFor the solution to remain bounded as $n$ increases, no component can be allowed to grow without bound. This requires that $|\\lambda_i^n| = |\\lambda_i|^n$ remains bounded for all eigenvalues $\\lambda_i$. This condition is met if and only if $|\\lambda_i| \\le 1$ for all $i$. If any eigenvalue has a modulus greater than $1$, its corresponding component in the solution will grow exponentially, leading to numerical instability.\n\nThe spectral radius of a matrix $X$, denoted $\\rho(X)$, is defined as the maximum of the absolute values (or moduli, for complex eigenvalues) of its eigenvalues: $\\rho(X) = \\max_i |\\lambda_i|$.\nTherefore, the condition for the linear stability of the one-step method $\\mathbf{u}^{n+1} = X \\mathbf{u}^n$ is that its spectral radius must satisfy:\n$$ \\rho(X) \\le 1 $$\nThis makes the spectral radius of the amplification operator the primary indicator for assessing the linear stability of the numerical scheme. For the monolithic Crank-Nicolson method, it is known that $\\rho(G) \\le 1$ unconditionally for negative semi-definite $A$, guaranteeing stability. For the block-iterative scheme, the stability is not guaranteed and depends on the parameters, making the computation of $\\rho(J)$ essential.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef construct_A(N, L1, L2, alpha1, alpha2):\n    \"\"\"\n    Constructs the semi-discrete matrix A for the coupled diffusion problem.\n    \"\"\"\n    L = L1 + L2\n    h = L / (N + 1)\n    k = int(round((N + 1) * L1 / L))  # 1-based index of the interface node\n\n    # Face diffusivity coefficients alpha_{j+1/2}.\n    # The interface is between node k and k+1 (1-based).\n    # This corresponds to the face between index k-1 and k (0-based).\n    alpha_h = (2 * alpha1 * alpha2) / (alpha1 + alpha2)\n    \n    # 0-based indexing for arrays\n    k0 = k - 1 # 0-based index of the interface node\n    \n    # alpha_half[i] stores alpha at the face between node i and i+1\n    alpha_half = np.zeros(N - 1)\n    if k0  0:\n        alpha_half[:k0] = alpha1\n    if k0  N-1:\n        alpha_half[k0] = alpha_h\n        alpha_half[k0+1:] = alpha2\n\n    h2 = h * h\n    \n    # Construct tridiagonal matrix A components\n    # Upper diagonal: A[i, i+1] corresponds to alpha_{i+1/2}\n    v_upper = alpha_half / h2\n    # Lower diagonal: A[i, i-1] corresponds to alpha_{i-1/2}\n    v_lower = alpha_half / h2\n\n    # Main diagonal: A[i, i] is -(alpha_{i+1/2} + alpha_{i-1/2})\n    v_main = np.zeros(N)\n    # At node 0, alpha_{-1/2} is for face at x=h/2 from boundary, which is in material 1.\n    v_main[0] = -(alpha1 + alpha_half[0])\n    # For internal nodes\n    if N  2:\n        v_main[1:N-1] = -(alpha_half[0:N-2] + alpha_half[1:N-1])\n    # At node N-1, alpha_{N-1/2} is alpha_half[N-2].\n    # alpha_{N+1/2} is for face at x=L-h/2 from boundary, in material 2.\n    if N  1:\n        v_main[N-1] = -(alpha_half[N-2] + alpha2)\n    \n    v_main /= h2\n    \n    A = np.diag(v_main) + np.diag(v_upper, 1) + np.diag(v_lower, -1)\n    \n    return A, k\n\ndef compute_rho_G(A, dt):\n    \"\"\"\n    Computes the spectral radius of the monolithic Crank-Nicolson operator G.\n    \"\"\"\n    N = A.shape[0]\n    I = np.identity(N)\n    \n    M_left = I - (dt / 2.0) * A\n    M_right = I + (dt / 2.0) * A\n    \n    # G = inv(M_left) @ M_right\n    G = np.linalg.solve(M_left, M_right) # More stable than explicit inverse\n    \n    eigenvalues = np.linalg.eigvals(G)\n    spectral_radius = np.max(np.abs(eigenvalues))\n    \n    return spectral_radius\n\ndef compute_rho_J(A, k, dt):\n    \"\"\"\n    Computes the spectral radius of the one-iteration block-Jacobi CN operator J.\n    \"\"\"\n    N = A.shape[0]\n    \n    # Partition A into blocks\n    A11 = A[0:k, 0:k]\n    A12 = A[0:k, k:N]\n    A21 = A[k:N, 0:k]\n    A22 = A[k:N, k:N]\n    \n    I1 = np.identity(k)\n    I2 = np.identity(N - k)\n    \n    # Calculate terms for the blocks of J\n    # M1_inv = inv(I1 - dt/2 * A11)\n    # M2_inv = inv(I2 - dt/2 * A22)\n    M1_left = I1 - (dt / 2.0) * A11\n    M2_left = I2 - (dt / 2.0) * A22\n    \n    # Construct blocks of J\n    # J11 = M1_inv @ (I1 + dt/2 * A11)\n    J11 = np.linalg.solve(M1_left, I1 + (dt / 2.0) * A11)\n    # J12 = dt * M1_inv @ A12\n    J12 = np.linalg.solve(M1_left, dt * A12)\n    # J21 = dt * M2_inv @ A21\n    J21 = np.linalg.solve(M2_left, dt * A21)\n    # J22 = M2_inv @ (I2 + dt/2 * A22)\n    J22 = np.linalg.solve(M2_left, I2 + (dt / 2.0) * A22)\n\n    # Assemble the full matrix J\n    J = np.block([[J11, J12], [J21, J22]])\n    \n    eigenvalues = np.linalg.eigvals(J)\n    spectral_radius = np.max(np.abs(eigenvalues))\n    \n    return spectral_radius\n    \ndef solve():\n    \"\"\"\n    Main function to run the test cases and print the results.\n    \"\"\"\n    # Fixed parameters\n    L1, L2 = 1.0, 1.0\n\n    test_cases = [\n        {'alpha1': 1.0, 'alpha2': 10.0, 'N': 41, 'dt': 2.0, 'type': 'G'},\n        {'alpha1': 1.0, 'alpha2': 100.0, 'N': 81, 'dt': 50.0, 'type': 'G'},\n        {'alpha1': 1.0, 'alpha2': 100.0, 'N': 41, 'dt': 200.0, 'type': 'J'},\n        {'alpha1': 0.5, 'alpha2': 2.0, 'N': 21, 'dt': 0.1, 'type': 'J'}\n    ]\n\n    results = []\n    for case in test_cases:\n        N = case['N']\n        alpha1 = case['alpha1']\n        alpha2 = case['alpha2']\n        dt = case['dt']\n        \n        A, k = construct_A(N, L1, L2, alpha1, alpha2)\n        \n        if case['type'] == 'G':\n            spectral_radius = compute_rho_G(A, dt)\n        elif case['type'] == 'J':\n            spectral_radius = compute_rho_J(A, k, dt)\n        \n        results.append(spectral_radius)\n\n    # Format results to exactly six decimal places\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "3115280"}]}