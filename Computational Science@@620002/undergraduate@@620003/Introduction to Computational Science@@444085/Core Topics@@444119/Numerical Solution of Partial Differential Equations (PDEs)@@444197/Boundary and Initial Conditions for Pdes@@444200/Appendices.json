{"hands_on_practices": [{"introduction": "Understanding how boundary conditions shape the solutions to PDEs is a cornerstone of mathematical physics. This first exercise provides a foundational practice: verifying that a proposed solution not only satisfies the governing partial differential equation—in this case, the heat equation—but also adheres to the specified boundary constraints. By working through this problem [@problem_id:945], you will connect the abstract form of the solution to physical parameters like the length of the rod and its thermal properties, discovering how boundaries quantize the possible modes of heat distribution.", "problem": "Consider the one-dimensional heat equation, which describes the distribution of heat $u(x, t)$ in a thin, uniform rod over time:\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}\n$$\nHere, $u(x, t)$ is the temperature at position $x$ and time $t$, and $\\alpha$ is the constant thermal diffusivity of the rod. The rod has a finite length $L$, extending from $x=0$ to $x=L$.\n\nThe ends of the rod are held at a constant zero temperature for all time $t \\ge 0$. These are known as homogeneous Dirichlet boundary conditions:\n1.  $u(0, t) = 0$\n2.  $u(L, t) = 0$\n\nA proposed non-trivial solution for the temperature distribution has the form:\n$$\nu(x, t) = A \\exp(-\\lambda t) \\sin(kx)\n$$\nwhere $A$, $\\lambda$, and $k$ are positive real constants, and $A \\neq 0$.\n\nYour task is to find the specific value of the decay constant $\\lambda$ for the fundamental mode of this solution. The fundamental mode is the one corresponding to the smallest possible positive value of the wave number $k$ that satisfies the given boundary conditions.\n\nDerive the expression for $\\lambda$ in terms of the thermal diffusivity $\\alpha$ and the length of the rod $L$.", "solution": "The problem asks for the value of the decay constant $\\lambda$ for the fundamental mode of a proposed solution to the 1D heat equation with specific Dirichlet boundary conditions. The derivation proceeds in three main parts: first, ensuring the function satisfies the PDE to find a relationship between the constants; second, applying the boundary conditions to determine the allowed values of $k$; and third, combining these results to find the specific value of $\\lambda$.\n\n**Part 1: Satisfying the Heat Equation**\n\nWe start with the proposed solution:\n$$\nu(x, t) = A \\exp(-\\lambda t) \\sin(kx)\n$$\nWe need to compute its partial derivatives with respect to $t$ and $x$ to substitute them into the heat equation $\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}$.\n\nFirst, the partial derivative with respect to time $t$:\n$$\n\\frac{\\partial u}{\\partial t} = \\frac{\\partial}{\\partial t} \\left[ A e^{-\\lambda t} \\sin(kx) \\right] = -A\\lambda e^{-\\lambda t} \\sin(kx)\n$$\n\nNext, we compute the partial derivatives with respect to position $x$. The first partial derivative is:\n$$\n\\frac{\\partial u}{\\partial x} = \\frac{\\partial}{\\partial x} \\left[ A e^{-\\lambda t} \\sin(kx) \\right] = Ak e^{-\\lambda t} \\cos(kx)\n$$\n\nThe second partial derivative with respect to $x$ is:\n$$\n\\frac{\\partial^2 u}{\\partial x^2} = \\frac{\\partial}{\\partial x} \\left[ Ak e^{-\\lambda t} \\cos(kx) \\right] = -Ak^2 e^{-\\lambda t} \\sin(kx)\n$$\n\nNow, we substitute these derivatives into the heat equation:\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}\n$$\n$$\n-A\\lambda e^{-\\lambda t} \\sin(kx) = \\alpha \\left( -Ak^2 e^{-\\lambda t} \\sin(kx) \\right)\n$$\n\nFor a non-trivial solution, $A \\neq 0$. The term $e^{-\\lambda t} \\sin(kx)$ is not zero for all $x$ and $t$. We can therefore divide both sides by $-A e^{-\\lambda t} \\sin(kx)$:\n$$\n\\lambda = \\alpha k^2\n$$\nThis is the required relationship between $\\lambda$ and $k$ for the given function to be a solution to the heat equation.\n\n**Part 2: Applying the Boundary Conditions**\n\nNow we apply the Dirichlet boundary conditions to find the allowed values of $k$.\n\nThe first boundary condition is $u(0, t) = 0$:\n$$\nu(0, t) = A e^{-\\lambda t} \\sin(k \\cdot 0) = A e^{-\\lambda t} \\sin(0) = A e^{-\\lambda t} \\cdot 0 = 0\n$$\nThis condition is satisfied for any values of $A$, $\\lambda$, and $k$.\n\nThe second boundary condition is $u(L, t) = 0$:\n$$\nu(L, t) = A e^{-\\lambda t} \\sin(kL) = 0\n$$\nSince we are looking for a non-trivial solution, we must have $A \\neq 0$. The exponential term $e^{-\\lambda t}$ is also non-zero for all finite $t$. Therefore, the only way for the equation to hold is if the sine term is zero:\n$$\n\\sin(kL) = 0\n$$\n\nThe sine function is zero when its argument is an integer multiple of $\\pi$. Thus:\n$$\nkL = n\\pi, \\quad \\text{for } n \\in \\mathbb{Z}\n$$\nSolving for $k$, we get:\n$$\nk = \\frac{n\\pi}{L}\n$$\nSince $k$ is given as a positive constant, we must have $n$ be a positive integer, so $n = 1, 2, 3, \\ldots$. The case $n=0$ would imply $k=0$, which makes $u(x,t)=0$, a trivial solution.\n\n**Part 3: Finding $\\lambda$ for the Fundamental Mode**\n\nThe problem asks for $\\lambda$ corresponding to the fundamental mode, which is the mode with the smallest possible positive value of $k$. From the expression $k = \\frac{n\\pi}{L}$, the smallest positive value of $k$ occurs for the smallest positive integer value of $n$, which is $n=1$.\n\nLet's call this fundamental wave number $k_1$:\n$$\nk_1 = \\frac{(1)\\pi}{L} = \\frac{\\pi}{L}\n$$\n\nFinally, we use the relationship $\\lambda = \\alpha k^2$ derived in Part 1 to find the corresponding value of $\\lambda$. Substituting $k = k_1 = \\frac{\\pi}{L}$:\n$$\n\\lambda = \\alpha \\left(\\frac{\\pi}{L}\\right)^2\n$$\n$$\n\\lambda = \\frac{\\alpha \\pi^2}{L^2}\n$$\nThis is the value of the decay constant for the fundamental mode of the solution.", "answer": "$$\\boxed{\\frac{\\alpha \\pi^2}{L^2}}$$", "id": "945"}, {"introduction": "When we transition from analytical solutions to numerical approximations, new challenges and concepts emerge, chief among them being the conservation of physical quantities. This problem [@problem_id:3103155] delves into this critical aspect by comparing two popular numerical methods, the Finite Volume (FV) and Finite Difference (FD) schemes, for an advection-diffusion problem with Neumann (fixed flux) boundary conditions. By deriving the discrete rate of mass change for each method, you will uncover why FV methods are inherently 'conservative' and how subtle choices in implementing boundary conditions in FD schemes can lead to a violation of this fundamental physical principle.", "problem": "Consider the one-dimensional advection–diffusion Partial Differential Equation (PDE) on the spatial interval $[0,L]$ with constant advection speed $a>0$ and diffusion coefficient $D>0$,\n$$\nu_t + a\\,u_x = D\\,u_{xx},\n$$\nsubject to a smooth initial condition $u(x,0) = u_0(x)$ and time-dependent Neumann boundary conditions $u_x(0,t) = g_0(t)$ and $u_x(L,t) = g_L(t)$. Here $u(x,t)$ denotes the conserved scalar field, and $g_0(t)$ and $g_L(t)$ are prescribed boundary-normal gradients at $x=0$ and $x=L$, respectively. The conservation-law form of the equation is $u_t + F_x = 0$ with physical flux $F(x,t) = a\\,u(x,t) - D\\,u_x(x,t)$.\n\nDiscretize the domain with a uniform grid of $N$ cells and spacing $\\Delta x = L/N$, and define the discrete total mass $M(t) = \\Delta x \\sum_{i=1}^{N} u_i(t)$.\n\nTwo semi-discrete methods are considered:\n\n- Finite Volume (FV): Finite Volume (FV) uses cell averages $u_i(t)$ and face fluxes $F_{i+1/2}$. For interior faces, use $F_{i+1/2} = a\\,u^{\\mathrm{up}}_{i+1/2} - D\\,\\frac{u_{i+1} - u_i}{\\Delta x}$ with upwind state $u^{\\mathrm{up}}_{i+1/2}$ consistent with $a>0$. At the left boundary face, set $F_{1/2}(t) = a\\,u_{\\mathrm{in}}(t) - D\\,g_0(t)$ where $u_{\\mathrm{in}}(t)$ is the inflow value supplied at $x=0$. At the right boundary face, set $F_{N+1/2}(t) = a\\,u_N(t) - D\\,g_L(t)$. The semi-discrete FV update is $\\Delta x\\,\\frac{d}{dt}u_i + \\left(F_{i+1/2} - F_{i-1/2}\\right) = 0$.\n\n- Finite Difference (FD): Finite Difference (FD) uses point values $u_i(t)$ at interior grid points and central differencing for advection and diffusion,\n$$\n\\frac{d}{dt}u_i = -a\\,\\frac{u_{i+1} - u_{i-1}}{2\\,\\Delta x} + D\\,\\frac{u_{i+1} - 2\\,u_i + u_{i-1}}{\\Delta x^2}, \\quad i=1,\\dots,N.\n$$\nImplement the Neumann boundary conditions with first-order ghost-cell closures $u_0(t) = u_1(t) - \\Delta x\\,g_0(t)$ and $u_{N+1}(t) = u_N(t) + \\Delta x\\,g_L(t)$.\n\nAssume the FV inflow state is chosen to match the first interior value, $u_{\\mathrm{in}}(t) = u_1(t)$. Starting from the conservation-law base $u_t + F_x = 0$ and the given discrete definitions, derive the boundary fluxes and the semi-discrete total mass rates $\\frac{d}{dt}M(t)$ for both FV and FD. Then, compute the closed-form expression for the discrepancy\n$$\n\\Delta \\equiv \\left(\\frac{d}{dt}M\\right)_{\\mathrm{FD}} - \\left(\\frac{d}{dt}M\\right)_{\\mathrm{FV}}\n$$\nin terms of $a$, $\\Delta x$, $g_0(t)$, and $g_L(t)$, using the stated assumptions. Provide the final expression for $\\Delta$ as your answer.", "solution": "The problem statement is first validated against the required criteria.\n\n### Step 1: Extract Givens\n- **PDE**: $u_t + a\\,u_x = D\\,u_{xx}$ for $x \\in [0,L]$, with constants $a>0$, $D>0$.\n- **Initial Condition**: $u(x,0) = u_0(x)$.\n- **Boundary Conditions**: $u_x(0,t) = g_0(t)$ and $u_x(L,t) = g_L(t)$.\n- **Flux**: $F(x,t) = a\\,u(x,t) - D\\,u_x(x,t)$, such that $u_t + F_x = 0$.\n- **Discretization**: Uniform grid with $N$ cells, spacing $\\Delta x = L/N$.\n- **Discrete Total Mass**: $M(t) = \\Delta x \\sum_{i=1}^{N} u_i(t)$.\n- **Finite Volume (FV) Method**:\n    - Semi-discrete update: $\\Delta x\\,\\frac{d}{dt}u_i + (F_{i+1/2} - F_{i-1/2}) = 0$.\n    - Interior face flux: $F_{i+1/2} = a\\,u^{\\mathrm{up}}_{i+1/2} - D\\,\\frac{u_{i+1} - u_i}{\\Delta x}$, with $u^{\\mathrm{up}}_{i+1/2}$ being the upwind state for $a>0$.\n    - Left boundary flux: $F_{1/2}(t) = a\\,u_{\\mathrm{in}}(t) - D\\,g_0(t)$.\n    - Right boundary flux: $F_{N+1/2}(t) = a\\,u_N(t) - D\\,g_L(t)$.\n    - Inflow assumption: $u_{\\mathrm{in}}(t) = u_1(t)$.\n- **Finite Difference (FD) Method**:\n    - Semi-discrete update for $i=1,\\dots,N$: $\\frac{d}{dt}u_i = -a\\,\\frac{u_{i+1} - u_{i-1}}{2\\,\\Delta x} + D\\,\\frac{u_{i+1} - 2\\,u_i + u_{i-1}}{\\Delta x^2}$.\n    - Ghost-cell closures for BCs: $u_0(t) = u_1(t) - \\Delta x\\,g_0(t)$ and $u_{N+1}(t) = u_N(t) + \\Delta x\\,g_L(t)$.\n- **Objective**: Compute the discrepancy $\\Delta \\equiv \\left(\\frac{d}{dt}M\\right)_{\\mathrm{FD}} - \\left(\\frac{d}{dt}M\\right)_{\\mathrm{FV}}$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, well-posed, and objective. It describes a standard problem in computational science: comparing the conservation properties of two common numerical schemes (Finite Volume and Finite Difference) for the advection-diffusion equation. All parameters, equations, and numerical implementation details are specified unambiguously. The definitions provided are self-contained and mathematically consistent, allowing for a direct and unique derivation of the requested quantity. There are no violations of scientific principles, logical inconsistencies, or subjective claims.\n\n### Step 3: Verdict and Action\nThe problem is valid. A complete solution will be derived.\n\nThe task is to derive the expression for $\\Delta \\equiv \\left(\\frac{d}{dt}M\\right)_{\\mathrm{FD}} - \\left(\\frac{d}{dt}M\\right)_{\\mathrm{FV}}$. This requires calculating the rate of change of the total discrete mass, $\\frac{dM}{dt}$, for each method separately.\n\nThe definition of the discrete total mass is $M(t) = \\Delta x \\sum_{i=1}^{N} u_i(t)$. Its time derivative is:\n$$\n\\frac{dM}{dt} = \\frac{d}{dt} \\left( \\Delta x \\sum_{i=1}^{N} u_i(t) \\right) = \\Delta x \\sum_{i=1}^{N} \\frac{du_i}{dt}\n$$\n\n**1. Derivation for the Finite Volume (FV) Method**\n\nThe semi-discrete FV equation is given as $\\Delta x\\,\\frac{d}{dt}u_i = -(F_{i+1/2} - F_{i-1/2})$. We substitute this into the expression for $\\frac{dM}{dt}$:\n$$\n\\left(\\frac{dM}{dt}\\right)_{\\mathrm{FV}} = \\sum_{i=1}^{N} \\left( \\Delta x \\frac{du_i}{dt} \\right) = \\sum_{i=1}^{N} -(F_{i+1/2} - F_{i-1/2})\n$$\nThis sum is a telescoping series:\n$$\n\\sum_{i=1}^{N} -(F_{i+1/2} - F_{i-1/2}) = -[(F_{3/2} - F_{1/2}) + (F_{5/2} - F_{3/2}) + \\dots + (F_{N+1/2} - F_{N-1/2})]\n$$\nAll interior fluxes $F_{i+1/2}$ for $i=1, \\dots, N-1$ cancel out, leaving only the boundary fluxes:\n$$\n\\left(\\frac{dM}{dt}\\right)_{\\mathrm{FV}} = -(F_{N+1/2} - F_{1/2}) = F_{1/2}(t) - F_{N+1/2}(t)\n$$\nThis demonstrates the exact conservation property of the FV scheme, where the total mass changes only due to fluxes through the domain boundaries. Now, we substitute the given expressions for the boundary fluxes, $F_{1/2}(t) = a\\,u_{\\mathrm{in}}(t) - D\\,g_0(t)$ and $F_{N+1/2}(t) = a\\,u_N(t) - D\\,g_L(t)$. We also apply the given assumption that the inflow value is $u_{\\mathrm{in}}(t) = u_1(t)$:\n$$\nF_{1/2}(t) = a\\,u_1(t) - D\\,g_0(t)\n$$\nTherefore, the rate of change of total mass for the FV method is:\n$$\n\\left(\\frac{dM}{dt}\\right)_{\\mathrm{FV}} = [a\\,u_1(t) - D\\,g_0(t)] - [a\\,u_N(t) - D\\,g_L(t)]\n$$\n$$\n\\left(\\frac{dM}{dt}\\right)_{\\mathrm{FV}} = a\\,(u_1(t) - u_N(t)) - D\\,(g_0(t) - g_L(t))\n$$\n\n**2. Derivation for the Finite Difference (FD) Method**\n\nWe start again from the definition of $\\frac{dM}{dt}$ and substitute the semi-discrete FD update rule:\n$$\n\\left(\\frac{dM}{dt}\\right)_{\\mathrm{FD}} = \\Delta x \\sum_{i=1}^{N} \\frac{du_i}{dt} = \\Delta x \\sum_{i=1}^{N} \\left( -a\\,\\frac{u_{i+1} - u_{i-1}}{2\\,\\Delta x} + D\\,\\frac{u_{i+1} - 2\\,u_i + u_{i-1}}{\\Delta x^2} \\right)\n$$\nDistributing the summation and $\\Delta x$:\n$$\n\\left(\\frac{dM}{dt}\\right)_{\\mathrm{FD}} = - \\frac{a}{2} \\sum_{i=1}^{N} (u_{i+1} - u_{i-1}) + \\frac{D}{\\Delta x} \\sum_{i=1}^{N} (u_{i+1} - 2 u_i + u_{i-1})\n$$\nWe evaluate the two sums separately.\nFor the advection term's sum:\n$$\n\\sum_{i=1}^{N} (u_{i+1} - u_{i-1}) = (u_2 - u_0) + (u_3 - u_1) + \\dots + (u_N - u_{N-2}) + (u_{N+1} - u_{N-1})\n$$\nBy rearranging terms, we see that most interior point values cancel. The remaining terms are from the boundaries of the summed sequences:\n$$\n\\sum_{i=1}^{N} (u_{i+1} - u_{i-1}) = \\left(\\sum_{i=1}^{N} u_{i+1}\\right) - \\left(\\sum_{i=1}^{N} u_{i-1}\\right) = (u_N + u_{N+1}) - (u_0 + u_1)\n$$\nFor the diffusion term's sum, we recognize it as a sum of second differences, which telescopes:\n$$\n\\sum_{i=1}^{N} (u_{i+1} - 2 u_i + u_{i-1}) = \\sum_{i=1}^{N} [(u_{i+1} - u_i) - (u_i - u_{i-1})]\n$$\nThis sum telescopes to $(u_{N+1} - u_N) - (u_1 - u_0)$.\nNow, substitute the ghost-cell closure relations: $u_0(t) = u_1(t) - \\Delta x\\,g_0(t)$ and $u_{N+1}(t) = u_N(t) + \\Delta x\\,g_L(t)$.\n\nThe advection contribution to $\\frac{dM}{dt}$ is:\n$$\n- \\frac{a}{2} [ (u_N + u_{N+1}) - (u_0 + u_1) ] = - \\frac{a}{2} [ u_N + (u_N + \\Delta x\\,g_L(t)) - (u_1 - \\Delta x\\,g_0(t)) - u_1 ]\n$$\n$$\n= - \\frac{a}{2} [ 2\\,u_N - 2\\,u_1 + \\Delta x\\,(g_0(t) + g_L(t)) ] = a\\,(u_1(t) - u_N(t)) - \\frac{a\\,\\Delta x}{2} (g_0(t) + g_L(t))\n$$\nThe diffusion contribution to $\\frac{dM}{dt}$ is:\n$$\n\\frac{D}{\\Delta x} [ (u_{N+1} - u_N) - (u_1 - u_0) ] = \\frac{D}{\\Delta x} [ (u_N(t) + \\Delta x\\,g_L(t) - u_N(t)) - (u_1(t) - (u_1(t) - \\Delta x\\,g_0(t))) ]\n$$\n$$\n= \\frac{D}{\\Delta x} [ \\Delta x\\,g_L(t) - \\Delta x\\,g_0(t) ] = D\\,(g_L(t) - g_0(t)) = -D\\,(g_0(t) - g_L(t))\n$$\nCombining both contributions, we get the total rate for the FD method:\n$$\n\\left(\\frac{dM}{dt}\\right)_{\\mathrm{FD}} = a\\,(u_1(t) - u_N(t)) - \\frac{a\\,\\Delta x}{2} (g_0(t) + g_L(t)) - D\\,(g_0(t) - g_L(t))\n$$\n\n**3. Compute the Discrepancy $\\Delta$**\n\nFinally, we compute the difference $\\Delta = (\\frac{dM}{dt})_{\\mathrm{FD}} - (\\frac{dM}{dt})_{\\mathrm{FV}}$:\n$$\n\\Delta = \\left[ a\\,(u_1(t) - u_N(t)) - \\frac{a\\,\\Delta x}{2} (g_0(t) + g_L(t)) - D\\,(g_0(t) - g_L(t)) \\right] - \\left[ a\\,(u_1(t) - u_N(t)) - D\\,(g_0(t) - g_L(t)) \\right]\n$$\nThe terms $a\\,(u_1(t) - u_N(t))$ and $- D\\,(g_0(t) - g_L(t))$ are common to both expressions and cancel out upon subtraction. The only remaining term is:\n$$\n\\Delta = - \\frac{a\\,\\Delta x}{2} (g_0(t) + g_L(t))\n$$\nThis result shows that the discrepancy in the rate of change of total mass between the two schemes is non-zero in general. It arises from the non-conservative nature of the central difference approximation for the advection term when combined with the first-order ghost-cell implementation of the boundary conditions. The FV method, by its construction, is perfectly conservative.", "answer": "$$\n\\boxed{- \\frac{a\\,\\Delta x}{2} (g_0(t) + g_L(t))}\n$$", "id": "3103155"}, {"introduction": "A numerical method can be theoretically stable yet produce physically questionable results, a crucial lesson for any computational scientist. This hands-on coding exercise [@problem_id:3103211] explores this nuance by investigating the behavior of the widely-used Crank-Nicolson scheme for the diffusion equation. You will implement the scheme and discover how its interaction with different boundary conditions can lead to persistent, undamped oscillations for high-frequency modes, a phenomenon related to the scheme not being $L$-stable. This practice demonstrates the importance of critically assessing numerical output beyond formal stability analysis.", "problem": "Consider the one-dimensional diffusion Partial Differential Equation (PDE) $u_t = \\alpha u_{xx}$ on the spatial domain $x \\in [0,1]$ with dimensionless parameters. Let $N$ be the number of uniform intervals, $h = 1/N$ the grid spacing, and $t$ the dimensionless time variable. You will investigate how the choice of boundary conditions and their discrete stencils affect the numerical stability and damping behavior of the Crank–Nicolson (CN) method. Specifically, you will compare fixed-value Dirichlet boundary conditions and zero-flux Neumann boundary conditions, and you will determine whether the discrete boundary treatment can lead to oscillatory behavior without effective damping for high-frequency components.\n\nStarting from fundamental definitions:\n- The diffusion PDE $u_t = \\alpha u_{xx}$ models transport driven by gradients in $u(x,t)$, where $\\alpha$ is a positive diffusivity constant.\n- A time discretization by the Crank–Nicolson method (Crank–Nicolson (CN)) is second-order accurate and unconditionally stable for linear problems, but it is known to be not $L$-stable, meaning strongly damped modes in the exact solution may exhibit weak damping or oscillations in discrete time.\n- Spatial derivatives will be approximated by second-order central differences on a uniform grid.\n\nImplement the following, using purely mathematical definitions and discrete approximations:\n\n1. Discretize the spatial domain into $N+1$ nodes with spacing $h = 1/N$ and apply the Crank–Nicolson method in time with second-order central differences in space. Represent the semi-discrete Laplacian by a tridiagonal matrix constructed from the chosen boundary conditions:\n   - Dirichlet boundary conditions: $u(0,t) = 0$ and $u(1,t) = 0$. Use the interior unknowns at indices $i = 1,2,\\dots,N-1$, so the discrete Laplacian matrix $T \\in \\mathbb{R}^{(N-1)\\times(N-1)}$ has main diagonal entries $-2$ and off-diagonal entries $+1$. The boundary values are zero and do not contribute additional source terms.\n   - Neumann boundary conditions: $u_x(0,t) = 0$ and $u_x(1,t) = 0$. Use all $N+1$ nodes as unknowns at indices $i = 0,1,\\dots,N$. Enforce zero derivative via symmetric ghost-point stencils, which lead to the discrete Laplacian matrix $T \\in \\mathbb{R}^{(N+1)\\times(N+1)}$ with interior rows having main diagonal entries $-2$ and off-diagonals $+1$, and boundary rows formed by $T_{0,0} = -2$, $T_{0,1} = +2$, $T_{N,N} = -2$, $T_{N,N-1} = +2$.\n\n2. Let $\\alpha = 1$ (dimensionless). Define the Crank–Nicolson update for the vector of unknowns $u^n$ at time level $n$ by the linear system\n   $$\n   \\left(I - r T\\right) u^{n+1} = \\left(I + r T\\right) u^n,\n   $$\n   where $I$ is the identity matrix of matching dimension, $T$ is the discrete Laplacian defined above, and $r = \\dfrac{\\alpha \\,\\Delta t}{2\\,h^2}$ with time step $\\Delta t$.\n\n3. Use an initial condition that excites high-frequency content near the left boundary:\n   - Under Dirichlet boundary conditions, set the interior unknowns to $u^0_1 = 1$, $u^0_2 = -1$, and $u^0_i = 0$ for all other interior indices $i$.\n   - Under Neumann boundary conditions, set the boundary-adjacent unknowns to $u^0_0 = 1$, $u^0_1 = -1$, and $u^0_i = 0$ for all other indices $i$.\n\n4. Evolve for a specified number of time steps $N_t$ and monitor the boundary-adjacent value:\n   - Under Dirichlet boundary conditions, monitor the first interior value $u^n_1$.\n   - Under Neumann boundary conditions, monitor the boundary value $u^n_0$.\n\n5. Quantify whether the numerical solution exhibits oscillations without effective damping induced by the boundary stencils. Let $\\epsilon = 10^{-12}$. Define the sign function $s(v)$ as $+1$ if $v \\ge \\epsilon$, $-1$ if $v \\le -\\epsilon$, and $0$ otherwise. For the monitored value sequence $\\{b^0,b^1,\\dots,b^{N_t}\\}$, define:\n   - The flip count $F$ as the number of indices $n \\in \\{1,2,\\dots,N_t\\}$ such that $s(b^n)\\,s(b^{n-1}) = -1$ and $s(b^n),s(b^{n-1}) \\in \\{-1,+1\\}$.\n   - The amplitude ratio $R = \\dfrac{|b^{N_t}|}{|b^0|}$ if $|b^0| > \\epsilon$, and $R = 0$ otherwise.\n   Declare the test result to be boolean True if $F \\ge \\lfloor 0.8 N_t \\rfloor$ and $R \\ge 0.9$, and boolean False otherwise.\n\n6. All quantities are dimensionless and must be treated as such. No physical units are to be used.\n\nImplement a complete, runnable program that performs the above steps for the following test suite of parameters. Each test case is a tuple $(\\text{BC}, N, \\Delta t, N_t)$:\n- Test case $1$: $(\\text{Dirichlet}, 50, 0.0001, 50)$.\n- Test case $2$: $(\\text{Dirichlet}, 50, 0.2, 50)$.\n- Test case $3$: $(\\text{Neumann}, 50, 0.2, 50)$.\n- Test case $4$: $(\\text{Neumann}, 50, 0.01, 50)$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[\\text{result1},\\text{result2},\\text{result3},\\text{result4}]$), where each result is the boolean outcome for the corresponding test case computed by the criterion in item $5$.", "solution": "The problem is validated as scientifically grounded, well-posed, and objective. It provides a complete and consistent setup for a numerical experiment designed to investigate the damping properties of the Crank-Nicolson method for the one-dimensional diffusion equation. The specified boundary condition treatments and analysis metrics are clearly defined and allow for a unique, verifiable solution.\n\nThe core of the problem is to solve the one-dimensional diffusion equation, given by the Partial Differential Equation (PDE):\n$$\nu_t = \\alpha u_{xx}\n$$\non the spatial domain $x \\in [0, 1]$ for time $t \\ge 0$, with a constant positive diffusivity $\\alpha$. The spatial domain is discretized into $N$ uniform intervals, resulting in $N+1$ grid points $x_i = i \\cdot h$ for $i=0, 1, \\dots, N$, where the grid spacing is $h = 1/N$.\n\nThe Crank-Nicolson (CN) method is used for time discretization. It is an implicit method that averages the spatial derivative between the current time level $n$ and the next time level $n+1$. The semi-discrete form of the PDE using a generic second-order central difference approximation for the Laplacian, represented by a matrix $T$, is $u_t = (\\alpha/h^2) T u$. Applying the CN scheme (a trapezoidal rule in time) gives:\n$$\n\\frac{u^{n+1} - u^n}{\\Delta t} = \\frac{\\alpha}{2h^2} \\left( T u^{n+1} + T u^{n} \\right)\n$$\nwhere $u^n$ is the vector of unknown values at time $t_n = n \\Delta t$. Rearranging the terms to solve for $u^{n+1}$ yields the linear system specified in the problem:\n$$\n\\left(I - \\frac{\\alpha \\Delta t}{2h^2} T\\right) u^{n+1} = \\left(I + \\frac{\\alpha \\Delta t}{2h^2} T\\right) u^n\n$$\nDefining the dimensionless parameter $r = \\frac{\\alpha \\Delta t}{2h^2}$, the system simplifies to:\n$$\n\\left(I - r T\\right) u^{n+1} = \\left(I + r T\\right) u^n\n$$\nThe solution involves constructing the appropriate matrix $T$ for each boundary condition type, setting up the initial condition vector $u^0$, and iteratively solving this linear system for $u^1, u^2, \\dots, u^{N_t}$.\n\n**1. Dirichlet Boundary Conditions**\n\nFor the fixed-value boundary conditions $u(0,t) = 0$ and $u(1,t) = 0$, the unknowns are the interior grid points $u_1, u_2, \\dots, u_{N-1}$. The vector of unknowns $u$ has dimension $N-1$. The discrete Laplacian matrix $T$ is an $(N-1) \\times (N-1)$ tridiagonal matrix. For a generic interior row $i$, the second derivative $u_{xx}$ is approximated by $(u_{i-1} - 2u_i + u_{i+1})/h^2$. This corresponds to a matrix $T$ with a main diagonal of $-2$ and sub- and super-diagonals of $+1$.\n$$\nT_{\\text{Dirichlet}} = \n\\begin{pmatrix}\n-2 & 1 & 0 & \\dots \\\\\n1 & -2 & 1 & \\dots \\\\\n0 & \\ddots & \\ddots & \\ddots \\\\\n\\vdots & & 1 & -2 & 1 \\\\\n& \\dots & 0 & 1 & -2\n\\end{pmatrix} \\in \\mathbb{R}^{(N-1)\\times(N-1)}\n$$\nThe initial condition is $u^0_1 = 1$, $u^0_2 = -1$, and $u^0_i=0$ for other interior points. This corresponds to a vector $u^0 = [1, -1, 0, \\dots, 0]^T$. The value to be monitored is $u^n_1$, which is the first element of the solution vector $u^n$.\n\n**2. Neumann Boundary Conditions**\n\nFor the zero-flux boundary conditions $u_x(0,t) = 0$ and $u_x(1,t) = 0$, all grid points $u_0, u_1, \\dots, u_N$ are treated as unknowns. The vector of unknowns $u$ has dimension $N+1$. The zero-derivative condition is enforced using symmetric ghost points. At $x=0$, a ghost point $u_{-1}$ is introduced such that $(u_1 - u_{-1})/(2h) = 0$, which implies $u_{-1} = u_1$. The Laplacian at $x_0=0$ is then approximated as $u_{xx}(0,t) \\approx (u_1 - 2u_0 + u_{-1})/h^2 = (2u_1 - 2u_0)/h^2$. This defines the first row of the matrix $T/h^2$, leading to $T_{0,0} = -2$ and $T_{0,1} = 2$. A similar derivation at $x=1$ gives $T_{N,N} = -2$ and $T_{N,N-1} = 2$. The interior rows are standard. The resulting $(N+1) \\times (N+1)$ matrix $T$ is:\n$$\nT_{\\text{Neumann}} = \n\\begin{pmatrix}\n-2 & 2 & 0 & \\dots \\\\\n1 & -2 & 1 & \\dots \\\\\n0 & \\ddots & \\ddots & \\ddots \\\\\n\\vdots & & 1 & -2 & 1 \\\\\n& \\dots & 0 & 2 & -2\n\\end{pmatrix} \\in \\mathbb{R}^{(N+1)\\times(N+1)}\n$$\nThe initial condition is $u^0_0 = 1$, $u^0_1 = -1$, and $u^0_i=0$ for other points. This corresponds to the vector $u^0 = [1, -1, 0, \\dots, 0]^T$. The value to be monitored is the boundary value $u^n_0$, which is the first element of the solution vector $u^n$.\n\n**3. Analysis of Oscillations**\n\nThe time evolution is performed for $N_t$ steps. A sequence of monitored boundary-adjacent values $\\{b^0, b^1, \\dots, b^{N_t}\\}$ is collected. The analysis relies on two metrics:\n- The flip count $F$: The number of times the sign of the monitored value flips between consecutive time steps. A sign flip is registered for step $n$ if $s(b^n) \\cdot s(b^{n-1}) = -1$, where $s(v)$ is a sign function with a tolerance $\\epsilon = 10^{-12}$.\n- The amplitude ratio $R$: The ratio of the absolute final amplitude to the absolute initial amplitude, $R = |b^{N_t}|/|b^0|$.\n\nA test case is deemed to exhibit persistent, undamped oscillations if both conditions are met: $F \\ge \\lfloor 0.8 N_t \\rfloor$ and $R \\ge 0.9$. This identifies scenarios where high-frequency numerical modes, excited by the initial condition, are not effectively damped by the numerical scheme, a known characteristic of the Crank-Nicolson method (it is not L-stable). The specific boundary stencil in the Neumann case is known to be particularly prone to generating such spurious oscillations when the time step is large compared to the spatial grid spacing squared (i.e., large $r$).\n\nThe algorithm proceeds by iterating through each test case, constructing the matrices, setting the initial condition, performing the time-stepping loop, and finally calculating $F$ and $R$ to determine the boolean result.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D diffusion equation using the Crank-Nicolson method\n    for various boundary conditions and parameters to test for numerical oscillations.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        ('Dirichlet', 50, 0.0001, 50),\n        ('Dirichlet', 50, 0.2, 50),\n        ('Neumann', 50, 0.2, 50),\n        ('Neumann', 50, 0.01, 50),\n    ]\n\n    results = []\n    epsilon = 1e-12\n\n    def sign_func(v):\n        \"\"\"Custom sign function with a tolerance.\"\"\"\n        if v >= epsilon:\n            return 1\n        elif v <= -epsilon:\n            return -1\n        else:\n            return 0\n\n    for case in test_cases:\n        bc_type, N, dt, Nt = case\n        \n        h = 1.0 / N\n        alpha = 1.0\n        r = (alpha * dt) / (2 * h**2)\n\n        # 1. Construct the discrete Laplacian matrix T\n        if bc_type == 'Dirichlet':\n            dim = N - 1\n            # Standard tridiagonal matrix for interior unknowns\n            diag_main = -2.0 * np.ones(dim)\n            diag_off = np.ones(dim - 1)\n            T = np.diag(diag_main, 0) + np.diag(diag_off, -1) + np.diag(diag_off, 1)\n        else:  # Neumann\n            dim = N + 1\n            # Tridiagonal matrix for all unknowns\n            diag_main = -2.0 * np.ones(dim)\n            diag_off = np.ones(dim - 1)\n            T = np.diag(diag_main, 0) + np.diag(diag_off, -1) + np.diag(diag_off, 1)\n            # Modify boundary rows for zero-flux condition via ghost points\n            T[0, 1] = 2.0\n            T[N, N-1] = 2.0\n            \n        # 2. Construct the Crank-Nicolson update matrices\n        I = np.identity(dim)\n        A = I - r * T  # Matrix for the left-hand side (at step n+1)\n        B = I + r * T  # Matrix for the right-hand side (at step n)\n\n        # 3. Set the initial condition u^0\n        u = np.zeros(dim)\n        if bc_type == 'Dirichlet':\n            # u_1 = 1, u_2 = -1 (indices 0 and 1 of the state vector)\n            if dim >= 2:\n                u[0] = 1.0\n                u[1] = -1.0\n        else:  # Neumann\n            # u_0 = 1, u_1 = -1 (indices 0 and 1 of the state vector)\n            if dim >= 2:\n                u[0] = 1.0\n                u[1] = -1.0\n        \n        # 4. Evolve in time and monitor the specified value\n        # For both BCs, the monitored value is the first element of the state vector\n        b0 = u[0]\n        monitored_values = [b0]\n        \n        for _ in range(Nt):\n            rhs = B @ u\n            u = np.linalg.solve(A, rhs)\n            monitored_values.append(u[0])\n\n        # 5. Quantify oscillations and damping\n        \n        # Calculate the flip count F\n        flip_count = 0\n        for n in range(1, Nt + 1):\n            s_curr = sign_func(monitored_values[n])\n            s_prev = sign_func(monitored_values[n-1])\n            if s_curr * s_prev == -1:\n                flip_count += 1\n        \n        # Calculate the amplitude ratio R\n        b_Nt = monitored_values[-1]\n        if abs(b0) > epsilon:\n            amplitude_ratio = abs(b_Nt) / abs(b0)\n        else:\n            amplitude_ratio = 0.0\n\n        # Apply the final boolean test criterion\n        test_result = (flip_count >= np.floor(0.8 * Nt)) and (amplitude_ratio >= 0.9)\n        results.append(test_result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3103211"}]}