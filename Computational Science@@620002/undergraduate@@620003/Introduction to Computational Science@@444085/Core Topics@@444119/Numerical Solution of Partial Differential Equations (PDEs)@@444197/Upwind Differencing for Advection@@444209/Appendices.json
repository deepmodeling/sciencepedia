{"hands_on_practices": [{"introduction": "A robust numerical method must satisfy fundamental physical and mathematical principles, and verifying these properties is a cornerstone of computational science. This exercise guides you through implementing the first-order upwind scheme and confirming its key characteristics through a carefully designed suite of unit tests [@problem_id:3201531]. By testing for linearity, conservation, bound preservation, and exactness, you will build confidence in your implementation and gain a deeper, practical understanding of the scheme's behavior.", "problem": "You are to implement and verify the first-order upwind finite difference method for the one-dimensional linear advection equation on a periodic domain. The governing partial differential equation is $u_t + a\\,u_x = 0$ with constant advection speed $a$, where $u(x,t)$ is the advected field. The discretization should be performed on a uniform grid with $N$ points on a periodic interval of length $L$, with grid points $x_i = i\\,\\Delta x$ for $i \\in \\{0,1,\\dots,N-1\\}$ and $\\Delta x = L/N$. Assume $a > 0$ and enforce periodic boundary conditions so that the left neighbor of index $0$ is index $N-1$. Time integration must use a single-step explicit method consistent with first-order upwind differencing; equivalently, work with the Courant-Friedrichs-Lewy (CFL) number $C = a\\,\\Delta t/\\Delta x$ for time step $\\Delta t$ and implement the canonical positive-velocity upwind update. You must not assume any particular analytic solution; instead, verify properties of the discretization itself.\n\nYour task is to write a complete program that:\n1. Implements the first-order upwind scheme on a periodic grid for $a>0$ and a given CFL number $C$.\n2. Executes the following four unit tests, each returning a boolean indicating pass or fail, using the exact parameter values specified below. All comparisons involving floating-point arithmetic must use a tolerance of $\\varepsilon = 10^{-12}$.\n\nTest A (Invariance under constant shift):\n- Parameters: $N = 200$, $L = 1$, $a = 1$, $C = 0.3$, number of time steps $K = 100$.\n- Grid: $x_i = i\\,\\Delta x$ with $\\Delta x = L/N$.\n- Initial condition $u^0_i = \\sin(2\\pi x_i) + 0.2\\cos(4\\pi x_i)$.\n- Constant shift $\\kappa = 0.7$.\n- Run the scheme for $K$ steps for both $u^0$ and $u^0 + \\kappa$. Let $u^{K}$ and $\\tilde{u}^{K}$ denote the two final states. The test passes if $\\max_i \\left| \\left(\\tilde{u}^{K}_i - u^{K}_i\\right) - \\kappa \\right| \\le \\varepsilon$.\n\nTest B (Conservation under periodic boundaries):\n- Parameters: $N = 256$, $L = 2$, $a = 0.8$, $C = 0.6$, number of time steps $K = 150$.\n- Grid: $x_i = i\\,\\Delta x$ with $\\Delta x = L/N$.\n- Initial condition $u^0_i = 0.5 + 0.25\\sin\\!\\left(2\\pi x_i/L\\right) + 0.1\\cos\\!\\left(6\\pi x_i/L\\right)$.\n- Run the scheme for $K$ steps to obtain $u^{K}$. The test passes if $\\left| \\sum_{i=0}^{N-1} u^{K}_i - \\sum_{i=0}^{N-1} u^{0}_i \\right| \\le \\varepsilon$.\n\nTest C (Bound preservation for $0 \\le C \\le 1$):\n- Parameters: $N = 300$, $L = 1$, $a = 1$, $C = 0.95$, number of time steps $K = 400$.\n- Grid: $x_i = i\\,\\Delta x$ with $\\Delta x = L/N$.\n- Initial condition $u^0_i = 0.3 + 0.4\\sin^2(2\\pi x_i)$, so that $\\min_i u^0_i = 0.3$ and $\\max_i u^0_i = 0.7$.\n- Run the scheme for $K$ steps, checking after every step $n$ that $\\min_i u^n_i \\ge 0.3 - \\varepsilon$ and $\\max_i u^n_i \\le 0.7 + \\varepsilon$. The test passes if both inequalities hold for all steps $n \\in \\{1,2,\\dots,K\\}$.\n\nTest D (Exactness at $C=1$ for step translation):\n- Parameters: $N = 128$, $L = 1$, $a = 1$, $C = 1$, number of time steps $K = 37$.\n- Define a step initial condition on the grid indices by choosing $m_0 = 40$ and setting $u^0_i = 1$ if $i  m_0$ and $u^0_i = 0$ otherwise.\n- Run the scheme for $K$ steps to obtain $u^{K}$. For $C = 1$ and $a > 0$, the upwind update becomes a pure cyclic shift by one grid cell per step. The test passes if $u^{K}_i = u^0_{(i-K)\\bmod N}$ for all $i$, up to the tolerance $\\varepsilon$; equivalently, if $\\max_i |u^{K}_i - u^0_{(i-K)\\bmod N}| \\le \\varepsilon$.\n\nImplementation requirements:\n- Use only a uniform periodic grid and the first-order upwind differencing appropriate for $a>0$.\n- Use the specified parameter values exactly as given above.\n- Use the tolerance $\\varepsilon = 10^{-12}$ for all floating-point comparisons.\n\nFinal output format:\nYour program should produce a single line of output containing the four boolean results for Tests A, B, C, and D, in that order, as a comma-separated list enclosed in square brackets (for example, \"[True,False,True,True]\"). The program must be self-contained and must not read any input.\n\nNote: No physical units are required for this problem. All angles appearing in trigonometric functions are in radians. The required output values are strictly booleans.", "solution": "The problem is valid as it presents a well-posed, scientifically sound task from computational science: implementing and verifying the first-order upwind method for the linear advection equation. All parameters and conditions are fully specified and consistent.\n\nThe solution proceeds by first deriving the numerical scheme and then implementing the four specified tests, each designed to verify a fundamental property of the discretization.\n\nThe governing partial differential equation (PDE) is the one-dimensional linear advection equation:\n$$\nu_t + a\\,u_x = 0\n$$\nwhere $u(x,t)$ is the advected scalar field, $t$ is time, $x$ is the spatial coordinate, and $a$ is the constant advection speed, which is given to be positive ($a > 0$). The equation is solved on a periodic domain of length $L$.\n\nThe domain is discretized into a uniform grid with $N$ points, indexed by $i \\in \\{0, 1, \\dots, N-1\\}$. The grid points are located at $x_i = i\\,\\Delta x$, where the grid spacing is $\\Delta x = L/N$. The solution on this grid at time $t_n = n\\,\\Delta t$ is denoted by the vector $u^n$, with components $u_i^n \\approx u(x_i, t_n)$.\n\nTo derive the numerical update rule, we discretize the PDE term by term. For the time derivative $u_t$, we use a first-order forward Euler scheme:\n$$\nu_t \\approx \\frac{u_i^{n+1} - u_i^n}{\\Delta t}\n$$\nFor the spatial derivative $u_x$, we use the first-order upwind method. Since the advection speed $a$ is positive, the \"wind\" or information flows from left to right (from smaller $x$ to larger $x$). Therefore, the spatial derivative at grid point $x_i$ should be approximated using the value at $x_i$ and its \"upwind\" neighbor, $x_{i-1}$. This corresponds to a first-order backward difference:\n$$\nu_x \\approx \\frac{u_i^n - u_{i-1}^n}{\\Delta x}\n$$\nSubstituting these discrete approximations into the PDE gives the fully discretized equation:\n$$\n\\frac{u_i^{n+1} - u_i^n}{\\Delta t} + a \\left( \\frac{u_i^n - u_{i-1}^n}{\\Delta x} \\right) = 0\n$$\nRearranging to solve for the solution at the next time step, $u_i^{n+1}$, yields:\n$$\nu_i^{n+1} = u_i^n - a \\frac{\\Delta t}{\\Delta x} (u_i^n - u_{i-1}^n)\n$$\nWe define the Courant-Friedrichs-Lewy (CFL) number as the dimensionless quantity $C = a\\,\\Delta t/\\Delta x$. Substituting $C$ into the equation gives the final update rule:\n$$\nu_i^{n+1} = u_i^n - C (u_i^n - u_{i-1}^n)\n$$\nThis can be rewritten as:\n$$\nu_i^{n+1} = (1 - C)u_i^n + C u_{i-1}^n\n$$\nThis form is particularly insightful. The problem specifies periodic boundary conditions, which means that the domain wraps around. For the grid point $i=0$, its left neighbor $i-1$ is the last point on the grid, $i=N-1$. This is implemented using modular arithmetic on the indices or, more efficiently, using a cyclic shift operation on the solution vector.\n\nThe four tests verify key properties of this numerical scheme.\n\nTest A (Invariance under constant shift): The scheme is a linear operator acting on the solution vector $u^n$. Let the operator for a single time step be $S_C$, so $u^{n+1} = S_C(u^n)$. The operator for $K$ steps is $S_C^K$. Linearity implies $S_C^K(u^0 + \\kappa \\mathbf{1}) = S_C^K(u^0) + S_C^K(\\kappa \\mathbf{1})$, where $\\mathbf{1}$ is a vector of ones and $\\kappa$ is a constant. For a constant field $u_i^n = \\kappa$ for all $i$, the update rule gives $u_i^{n+1} = (1-C)\\kappa + C\\kappa = \\kappa$. Thus, a constant field is a steady state, and $S_C^K(\\kappa \\mathbf{1}) = \\kappa \\mathbf{1}$. Therefore, the final state of an initially shifted field should be the shifted final state of the original field: $\\tilde{u}^K = u^K + \\kappa$. The test verifies this property by checking if $\\max_i |(\\tilde{u}^K_i - u^K_i) - \\kappa|$ is close to zero.\n\nTest B (Conservation): The scheme conserves the total \"mass\" or sum of a quantity on a periodic domain. Summing the update rule over all grid points $i$ from $0$ to $N-1$:\n$$\n\\sum_{i=0}^{N-1} u_i^{n+1} = \\sum_{i=0}^{N-1} \\left( (1-C)u_i^n + C u_{i-1}^n \\right) = (1-C)\\sum_{i=0}^{N-1} u_i^n + C \\sum_{i=0}^{N-1} u_{i-1}^n\n$$\nDue to periodicity, the set of values $\\{u_{i-1}^n\\}_{i=0}^{N-1}$ is just a cyclic permutation of $\\{u_i^n\\}_{i=0}^{N-1}$, so their sums are identical: $\\sum_{i=0}^{N-1} u_{i-1}^n = \\sum_{i=0}^{N-1} u_i^n$. The equation thus becomes:\n$$\n\\sum_{i=0}^{N-1} u_i^{n+1} = (1-C)\\sum_{i=0}^{N-1} u_i^n + C \\sum_{i=0}^{N-1} u_i^n = \\sum_{i=0}^{N-1} u_i^n\n$$\nThe total sum is conserved at every time step. The test verifies this by comparing the sum of the initial state $\\sum u_i^0$ with the sum of the final state $\\sum u_i^K$.\n\nTest C (Bound preservation): The first-order upwind scheme is known to be positivity-preserving and monotone if the CFL condition $0 \\le C \\le 1$ is satisfied. In this case, both coefficients $(1-C)$ and $C$ in the update rule $u_i^{n+1} = (1-C)u_i^n + C u_{i-1}^n$ are non-negative. The new value $u_i^{n+1}$ is a convex combination of two values from the previous time step, $u_i^n$ and $u_{i-1}^n$. This implies that the new value cannot be smaller than the minimum of all values at time $n$, nor larger than the maximum. Let $m^n = \\min_i u_i^n$ and $M^n = \\max_i u_i^n$. Then $m^n \\le u_i^{n+1} \\le M^n$ for all $i$. Consequently, $m^{n+1} \\ge m^n$ and $M^{n+1} \\le M^n$, meaning the range of solution values will not expand over time. The test uses $C=0.95$, which satisfies the condition. It correctly verifies that the solution remains within the bounds set by the initial condition for all time steps.\n\nTest D (Exactness at $C=1$): When the CFL number is exactly $C=1$, the update rule simplifies dramatically:\n$$\nu_i^{n+1} = (1-1)u_i^n + (1)u_{i-1}^n = u_{i-1}^n\n$$\nThis means that the value at each grid point $i$ is replaced by the value from its left neighbor $i-1$. This corresponds to a perfect, discrete translation of the entire solution profile by one grid cell to the right at each time step, without any change in shape (i.e., no numerical diffusion). After $K$ time steps, the initial profile $u^0$ will be shifted by exactly $K$ grid cells to the right. The test verifies this property by comparing the numerical solution $u^K$ with the initial solution $u^0$ cyclically shifted by $K$ positions, $u^0_{(i-K)\\bmod N}$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements and verifies the first-order upwind finite difference method\n    for the 1D linear advection equation by running four unit tests.\n    \"\"\"\n    EPSILON = 1e-12\n\n    def upwind_step(u, C):\n        \"\"\"\n        Performs one step of the first-order upwind scheme for a  0.\n        The update rule is u_i^{n+1} = (1-C)u_i^n + C u_{i-1}^n.\n        This uses u_{i-1}, which means data is flowing from the left (smaller index).\n        np.roll(u, 1) shifts the array to the right, so the new element at index `i`\n        is the old element from index `i-1` (with periodic wrap-around at the boundary).\n        \"\"\"\n        u_prev = np.roll(u, 1)\n        return (1.0 - C) * u + C * u_prev\n\n    def run_simulation(u0, C, K, check_bounds_params=None):\n        \"\"\"\n        Runs the advection simulation for K steps.\n        If check_bounds_params is provided, it performs a check at every step.\n        \"\"\"\n        u = u0.copy()\n        if check_bounds_params:\n            initial_min, initial_max = check_bounds_params\n            for _ in range(K):\n                u = upwind_step(u, C)\n                if np.min(u)  initial_min - EPSILON or np.max(u)  initial_max + EPSILON:\n                    return False  # Indicate bound violation\n            return True  # Indicate all bounds were respected\n        else:\n            for _ in range(K):\n                u = upwind_step(u, C)\n            return u\n\n    def test_a():\n        \"\"\"Test A: Invariance under constant shift.\"\"\"\n        N, L, a, C, K = 200, 1.0, 1.0, 0.3, 100\n        kappa = 0.7\n        x = L * np.arange(N) / N\n        \n        u0 = np.sin(2 * np.pi * x) + 0.2 * np.cos(4 * np.pi * x)\n        u0_shifted = u0 + kappa\n        \n        uK = run_simulation(u0, C, K)\n        uK_tilde = run_simulation(u0_shifted, C, K)\n        \n        max_error = np.max(np.abs((uK_tilde - uK) - kappa))\n        return max_error = EPSILON\n\n    def test_b():\n        \"\"\"Test B: Conservation under periodic boundaries.\"\"\"\n        N, L, a, C, K = 256, 2.0, 0.8, 0.6, 150\n        x = L * np.arange(N) / N\n        \n        u0 = 0.5 + 0.25 * np.sin(2 * np.pi * x / L) + 0.1 * np.cos(6 * np.pi * x / L)\n        \n        uK = run_simulation(u0, C, K)\n        \n        sum_initial = np.sum(u0)\n        sum_final = np.sum(uK)\n        \n        error = np.abs(sum_final - sum_initial)\n        return error = EPSILON\n\n    def test_c():\n        \"\"\"Test C: Bound preservation for 0 = C = 1.\"\"\"\n        N, L, a, C, K = 300, 1.0, 1.0, 0.95, 400\n        x = L * np.arange(N) / N\n        \n        u0 = 0.3 + 0.4 * np.sin(2 * np.pi * x)**2\n        initial_min = 0.3\n        initial_max = 0.7\n        \n        return run_simulation(u0, C, K, check_bounds_params=(initial_min, initial_max))\n\n    def test_d():\n        \"\"\"Test D: Exactness at C=1 for step translation.\"\"\"\n        N, L, a, C, K = 128, 1.0, 1.0, 1.0, 37\n        m0 = 40\n        \n        u0 = np.zeros(N)\n        u0[:m0] = 1.0\n        \n        uK = run_simulation(u0, C, K)\n        \n        # For C=1, the update is u_i^{n+1} = u_{i-1}^n, a pure shift.\n        # After K steps, the solution should be shifted by K grid points to the right.\n        uK_expected = np.roll(u0, K)\n        \n        max_error = np.max(np.abs(uK - uK_expected))\n        return max_error = EPSILON\n\n    results = [\n        test_a(),\n        test_b(),\n        test_c(),\n        test_d(),\n    ]\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3201531"}, {"introduction": "After building a stable scheme, a powerful way to solidify your understanding of numerical stability is to analyze a method that fails. This exercise [@problem_id:3201511] challenges you to investigate a seemingly plausible but unconditionally unstable variation of the upwind method designed to run backward in time. You will apply the von Neumann stability analysis, a fundamental tool for linear schemes, to prove its instability and connect the mathematical result to the physical principle of information flow, known as the Courant-Friedrichs-Lewy (CFL) condition.", "problem": "Consider the one-dimensional linear advection equation $u_t + a\\,u_x = 0$ on a periodic domain, where $a>0$ is a constant advection speed. A uniform spatial grid with spacing $\\Delta x$ and grid indices $j \\in \\mathbb{Z}$ is used, and the solution is sampled at discrete times $t^n$. To march one step backward in time from $t^n$ to $t^{n-1} = t^n - \\Delta t_b$ (with $\\Delta t_b > 0$), suppose you apply the standard explicit forward-time, upwind-in-space discretization appropriate for $a>0$ but with a negative step, i.e., use\n$$\nu^{n-1}_j \\;=\\; u^{n}_j \\;+\\; \\mu\\left(u^{n}_j - u^{n}_{j-1}\\right),\n$$\nwhere $\\mu = \\dfrac{a\\,\\Delta t_b}{\\Delta x}$.\n\nStarting from the governing equation and the above discrete update, use the von Neumann Fourier stability analysis (Fourier-mode amplification analysis) to derive the amplification factor $G(\\theta)$ of a single backward step, where $\\theta$ is the nondimensional wavenumber associated with the Fourier mode $e^{i\\theta j}$. Then determine the maximum value of $|G(\\theta)|$ over all $\\theta \\in [-\\pi,\\pi]$, and evaluate this maximum numerically for $a=1$, $\\Delta x = 0.1$, and $\\Delta t_b = 0.03$. Provide your final numerical answer rounded to four significant figures. No physical units are required.\n\nIn addition, briefly justify, using first principles of numerical transport, why attempting to reverse advection with an upwind discretization leads to instability in this backward step.", "solution": "The problem is first validated to ensure it is scientifically grounded, well-posed, objective, and contains sufficient information for a unique solution. The governing equation is the one-dimensional linear advection equation, $u_t + a\\,u_x = 0$, with a constant advection speed $a>0$. The discretization for a single backward time step from $t^n$ to $t^{n-1} = t^n - \\Delta t_b$ (with $\\Delta t_b > 0$) is given by $u^{n-1}_j = u^{n}_j + \\mu(u^{n}_j - u^{n}_{j-1})$, where $\\mu = \\frac{a\\,\\Delta t_b}{\\Delta x}$. All parameters are defined, and the tasks are clearly specified. The problem is a standard exercise in numerical analysis and is therefore valid.\n\nFirst, we derive the amplification factor $G(\\theta)$ for the given scheme using von Neumann stability analysis. We consider a single Fourier mode for the solution at time level $n$ and spatial grid point $j$:\n$$u_j^n = \\hat{u}^n(\\theta) e^{i\\theta j}$$\nwhere $\\theta = k \\Delta x$ is the non-dimensional wavenumber, $k$ is the wavenumber, and $\\hat{u}^n(\\theta)$ is the amplitude of the mode at time $t^n$. The scheme advances the solution from time $t^n$ to the earlier time $t^{n-1}$. The solution at the new time level $n-1$ is related to the old time level $n$ by the amplification factor $G(\\theta)$:\n$$u_j^{n-1} = G(\\theta) u_j^n = G(\\theta) \\hat{u}^n(\\theta) e^{i\\theta j}$$\nWe substitute these Fourier mode representations into the given finite difference scheme:\n$$u^{n-1}_j = u^{n}_j + \\mu\\left(u^{n}_j - u^{n}_{j-1}\\right)$$\n$$G(\\theta) \\hat{u}^n(\\theta) e^{i\\theta j} = \\hat{u}^n(\\theta) e^{i\\theta j} + \\mu\\left(\\hat{u}^n(\\theta) e^{i\\theta j} - \\hat{u}^n(\\theta) e^{i\\theta (j-1)}\\right)$$\nDividing the entire equation by $\\hat{u}^n(\\theta) e^{i\\theta j}$ (which is non-zero), we obtain the expression for the amplification factor $G(\\theta)$:\n$$G(\\theta) = 1 + \\mu\\left(1 - e^{-i\\theta}\\right)$$\nUsing Euler's formula, $e^{-i\\theta} = \\cos(\\theta) - i\\sin(\\theta)$, we can write $G(\\theta)$ in terms of its real and imaginary parts:\n$$G(\\theta) = 1 + \\mu(1 - (\\cos(\\theta) - i\\sin(\\theta))) = (1 + \\mu(1 - \\cos(\\theta))) + i(\\mu\\sin(\\theta))$$\n\nNext, we determine the magnitude of the amplification factor, $|G(\\theta)|$. The squared magnitude is given by $|G(\\theta)|^2 = (\\text{Re}[G(\\theta)])^2 + (\\text{Im}[G(\\theta)])^2$:\n$$|G(\\theta)|^2 = \\left(1 + \\mu(1 - \\cos(\\theta))\\right)^2 + (\\mu\\sin(\\theta))^2$$\n$$|G(\\theta)|^2 = 1 + 2\\mu(1 - \\cos(\\theta)) + \\mu^2(1 - \\cos(\\theta))^2 + \\mu^2\\sin^2(\\theta)$$\n$$|G(\\theta)|^2 = 1 + 2\\mu - 2\\mu\\cos(\\theta) + \\mu^2(1 - 2\\cos(\\theta) + \\cos^2(\\theta)) + \\mu^2\\sin^2(\\theta)$$\n$$|G(\\theta)|^2 = 1 + 2\\mu - 2\\mu\\cos(\\theta) + \\mu^2 - 2\\mu^2\\cos(\\theta) + \\mu^2(\\cos^2(\\theta) + \\sin^2(\\theta))$$\nUsing the identity $\\cos^2(\\theta) + \\sin^2(\\theta) = 1$:\n$$|G(\\theta)|^2 = 1 + 2\\mu - 2\\mu\\cos(\\theta) + \\mu^2 - 2\\mu^2\\cos(\\theta) + \\mu^2$$\n$$|G(\\theta)|^2 = 1 + 2\\mu + 2\\mu^2 - (2\\mu + 2\\mu^2)\\cos(\\theta)$$\n$$|G(\\theta)|^2 = (1 + 2\\mu + 2\\mu^2) - 2\\mu(1+\\mu)\\cos(\\theta)$$\nTo find the maximum value of $|G(\\theta)|$ over all $\\theta \\in [-\\pi, \\pi]$, we must find the value of $\\theta$ that maximizes $|G(\\theta)|^2$. The problem states that $a>0$, $\\Delta x>0$, and $\\Delta t_b>0$, which implies that $\\mu = \\frac{a\\,\\Delta t_b}{\\Delta x} > 0$. Consequently, the term $2\\mu(1+\\mu)$ multiplying $\\cos(\\theta)$ is positive. Therefore, $|G(\\theta)|^2$ is maximized when $\\cos(\\theta)$ is minimized. The minimum value of $\\cos(\\theta)$ in the interval $[-\\pi, \\pi]$ is $-1$, which occurs at $\\theta = \\pm \\pi$.\nSubstituting $\\cos(\\theta) = -1$ into the expression for $|G(\\theta)|^2$:\n$$\\max_{\\theta} |G(\\theta)|^2 = (1 + 2\\mu + 2\\mu^2) - 2\\mu(1+\\mu)(-1)$$\n$$\\max_{\\theta} |G(\\theta)|^2 = 1 + 2\\mu + 2\\mu^2 + 2\\mu + 2\\mu^2$$\n$$\\max_{\\theta} |G(\\theta)|^2 = 1 + 4\\mu + 4\\mu^2 = (1+2\\mu)^2$$\nThe maximum value of the magnitude $|G(\\theta)|$ is the square root of this expression:\n$$\\max_{\\theta} |G(\\theta)| = \\sqrt{(1+2\\mu)^2} = |1+2\\mu|$$\nSince $\\mu > 0$, this simplifies to:\n$$\\max_{\\theta} |G(\\theta)| = 1 + 2\\mu$$\n\nNow, we evaluate this maximum numerically using the given values: $a=1$, $\\Delta x = 0.1$, and $\\Delta t_b = 0.03$. First, we compute the Courant number $\\mu$:\n$$\\mu = \\frac{a\\,\\Delta t_b}{\\Delta x} = \\frac{1 \\times 0.03}{0.1} = 0.3$$\nSubstituting this value of $\\mu$ into the expression for the maximum amplification factor:\n$$\\max_{\\theta} |G(\\theta)| = 1 + 2(0.3) = 1 + 0.6 = 1.6$$\nRounding to four significant figures as requested, the value is $1.600$.\n\nFinally, we justify why this backward step is unstable. The governing PDE $u_t + a u_x = 0$ with $a>0$ describes a wave propagating information from left to right (in the positive $x$ direction) as time increases. To reverse this process and find the solution at an earlier time $t^{n-1}$ from data at a later time $t^n$, one must trace the information flow backward in time. This means finding the value at $(x_j, t^{n-1})$ requires knowing the solution at a point to its right, specifically $(x_j+a\\Delta t_b, t^n)$, at the later time. A stable numerical method for this backward-in-time problem must therefore use information from grid points to the right (e.g., $u^n_j$ and $u^n_{j+1}$) to compute $u^{n-1}_j$.\nThe provided scheme, $u^{n-1}_j = u^{n}_j + \\mu(u^{n}_j - u^{n}_{j-1})$, uses a backward spatial difference, incorporating information from grid points $j$ and $j-1$. This is an \"upwind\" stencil for the forward-time problem with $a>0$. However, for the time-reversed problem, it is effectively a \"downwind\" stencil, as it takes information from the wrong direction relative to the characteristics. Using a downwind stencil for an explicit advection scheme violates the Courant-Friedrichs-Lewy (CFL) condition, as the physical domain of dependence lies entirely outside the numerical domain of dependence. The von Neumann analysis confirms this instability, showing that the amplification factor $|G(\\theta)|$ has a maximum value of $1+2\\mu$, which is strictly greater than $1$ for any $\\mu > 0$. Any numerical mode with a non-zero amplitude will be amplified in a single step, leading to exponential error growth and unconditional instability.", "answer": "$$\n\\boxed{1.600}\n$$", "id": "3201511"}, {"introduction": "The choice of a numerical scheme always involves trade-offs between properties like accuracy and stability. This exercise [@problem_id:3201516] contrasts the first-order upwind scheme with the second-order central difference scheme, revealing why the less accurate upwind method is often essential for stable advection simulations. By reasoning through the lens of a modified equation analysis, you will uncover the concepts of numerical diffusion and dispersion and learn how these artificial effects explain the appearance of non-physical oscillations and the role of upwinding in suppressing them.", "problem": "Consider the one-dimensional linear advection equation $u_t + a\\,u_x = 0$ with constant advection speed $a>0$ on the spatial interval $0 \\le x \\le L$, subject to an inflow boundary condition $u(0,t) = u_{\\mathrm{in}}(t)$ for all $t \\ge 0$ and a given initial condition $u(x,0) = u_0(x)$. Two spatial discretizations on a uniform grid $x_i = i\\,\\Delta x$ with $\\Delta x>0$ are widely used in practice: the second-order central difference approximation of $u_x$ and the first-order upwind difference aligned with the characteristic direction. Time integration is performed with a stable explicit method using a time step $\\Delta t>0$, and the Courant-Friedrichs-Lewy (CFL) number is defined as $\\nu = a\\,\\Delta t/\\Delta x$.\n\nIn numerical experiments for $a>0$ with the inflow at $x=0$, practitioners often report a small spurious boundary layer near $x=0$ when using central differencing, while a visible boundary layer does not appear when using upwind differencing under $0\\nu1$. Starting from the governing equation $u_t + a\\,u_x = 0$, and using first-principles Taylor expansions about $(x,t)$ to analyze the leading-order behavior of each scheme via a modified equation, determine which statement best explains these observations and their dependence on the inflow boundary at $x=0$.\n\nChoose the best option:\n\nA. For $a>0$ and inflow at $x=0$, the central difference discretization of $u_x$ yields a leading-order dispersive term in its modified equation of the form $\\propto u_{xxx}$ with no stabilizing $u_{xx}$ term, making the scheme non-dissipative; this non-dissipative, symmetric stencil is inconsistent with the one-sided physics at the inflow boundary and produces oscillatory boundary-layer artifacts. In contrast, the upwind scheme aligned with $a>0$ has a leading artificial diffusion term $\\propto u_{xx}$ with positive coefficient for $0\\nu1$, which damps boundary oscillations and removes the spurious layer.\n\nB. For $a>0$ and $0\\nu1$, the upwind scheme introduces a negative artificial diffusion (anti-diffusion) near $x=0$ that amplifies boundary oscillations, whereas the central difference scheme contributes a positive $u_{xx}$ term that smooths the solution; therefore, central differencing removes spurious layers and upwind creates them.\n\nC. Because characteristics exit at $x=L$ for $a>0$, any spurious numerical boundary layer induced by central differencing must form at $x=L$ (the outflow boundary), not at $x=0$ (the inflow boundary), and upwind has no impact on boundary layers either way.\n\nD. The modified equation of the upwind scheme is purely dispersive, with a leading $u_{xxx}$ term and no $u_{xx}$ diffusion, so oscillations persist; by contrast, the central difference scheme adds a leading $u_{xx}$ diffusion term that selectively damps boundary oscillations near $x=0$, eliminating the layer.", "solution": "The problem statement is scientifically grounded, well-posed, and objective. It describes a standard scenario in computational fluid dynamics and asks for an explanation based on a canonical analysis technique (modified equation). The problem is valid.\n\nThe core task is to analyze the leading-order behavior of two numerical schemes for the one-dimensional linear advection equation, $u_t + a\\,u_x = 0$, where the advection speed $a > 0$. This analysis is done by deriving the modified partial differential equation that each finite difference scheme represents more accurately than the original PDE. The modified equation includes leading-order truncation error terms, which reveal the scheme's artificial dissipative and dispersive properties. We assume a uniform grid with spacing $\\Delta x$ and a time step $\\Delta t$, and define the Courant-Friedrichs-Lewy (CFL) number as $\\nu = a\\,\\Delta t/\\Delta x$.\n\n**1. Central Difference Scheme**\n\nThe problem refers to a \"stable explicit method\" for time integration. The simplest combination, Forward-Time Central-Space (FTCS), is unconditionally unstable for the advection equation. A common stable scheme using central differences is the second-order Leapfrog method for time, combined with second-order central differences for space:\n$$ \\frac{u_i^{n+1} - u_i^{n-1}}{2\\Delta t} + a \\frac{u_{i+1}^n - u_{i-1}^n}{2\\Delta x} = 0 $$\nTo find the modified equation, we perform Taylor series expansions for each term around the point $(x_i, t_n)$.\n\\begin{align*} u_i^{n\\pm 1} = u \\pm u_t \\Delta t + \\frac{1}{2}u_{tt}\\Delta t^2 \\pm \\frac{1}{6}u_{ttt}\\Delta t^3 + \\mathcal{O}(\\Delta t^4) \\\\ u_{i\\pm 1}^n = u \\pm u_x \\Delta x + \\frac{1}{2}u_{xx}\\Delta x^2 \\pm \\frac{1}{6}u_{xxx}\\Delta x^3 + \\mathcal{O}(\\Delta x^4) \\end{align*}\nSubstituting these into the difference equation and simplifying yields:\n$$ (u_t + \\frac{1}{6}u_{ttt}\\Delta t^2 + \\dots) + a(u_x + \\frac{1}{6}u_{xxx}\\Delta x^2 + \\dots) = 0 $$\nThis gives the truncation error. To obtain the modified equation, we express time derivatives in terms of spatial derivatives. From the original PDE, $u_t = -a u_x$ to leading order. This implies $u_{ttt} \\approx -a^3 u_{xxx}$. Substituting this into the equation above:\n$$ u_t + a u_x + \\frac{1}{6}(-a^3 u_{xxx})\\Delta t^2 + \\frac{a}{6}u_{xxx}\\Delta x^2 + \\dots = 0 $$\n$$ u_t + a u_x = -\\frac{a}{6}(\\Delta x^2 - a^2\\Delta t^2)u_{xxx} + \\dots $$\nRewriting in terms of the CFL number $\\nu$:\n$$ u_t + a u_x = -\\frac{a\\Delta x^2}{6}(1 - \\nu^2)u_{xxx} + \\dots $$\nThe leading-order error term is proportional to $u_{xxx}$. This is a dispersive term, not a dissipative one (which would be proportional to an even derivative like $u_{xx}$). The scheme is non-dissipative. For $a>0$, information propagates from left to right. The central difference stencil at the first interior node, $x_1$, considers nodes $x_0$ and $x_2$. It \"looks\" downstream to $x_2$ for information, which is inconsistent with the physics of pure advection (the characteristic direction). This inconsistency at the inflow boundary, combined with the non-dissipative nature of the scheme, generates spurious high-frequency oscillations that are not damped, leading to the observed boundary layer artifacts.\n\n**2. First-Order Upwind Scheme**\n\nFor $a>0$, the \"upwind\" direction is from the left. A first-order upwind approximation for $u_x$ is the first-order backward difference, $u_x \\approx (u_i - u_{i-1})/\\Delta x$. Using a first-order forward difference in time (Forward-Euler), the scheme is:\n$$ \\frac{u_i^{n+1} - u_i^n}{\\Delta t} + a \\frac{u_i^n - u_{i-1}^n}{\\Delta x} = 0 $$\nTaylor expansion of the terms around $(x_i, t_n)$:\n\\begin{align*} u_i^{n+1} = u + u_t \\Delta t + \\frac{1}{2}u_{tt}\\Delta t^2 + \\mathcal{O}(\\Delta t^3) \\\\ u_{i-1}^n = u - u_x \\Delta x + \\frac{1}{2}u_{xx}\\Delta x^2 - \\frac{1}{6}u_{xxx}\\Delta x^3 + \\mathcal{O}(\\Delta x^4) \\end{align*}\nSubstituting into the difference equation:\n$$ (u_t + \\frac{1}{2}u_{tt}\\Delta t + \\dots) + a(u_x - \\frac{1}{2}u_{xx}\\Delta x + \\dots) = 0 $$\nAgain, we use $u_t \\approx -a u_x$ and thus $u_{tt} \\approx a^2 u_{xx}$ to replace the time derivative in the error term:\n$$ u_t + a u_x + \\frac{1}{2}(a^2 u_{xx})\\Delta t - \\frac{a}{2}u_{xx}\\Delta x + \\dots = 0 $$\n$$ u_t + a u_x = \\left(\\frac{a\\Delta x}{2} - \\frac{a^2\\Delta t}{2}\\right)u_{xx} + \\dots $$\nFactoring out terms and using $\\nu = a\\Delta t/\\Delta x$:\n$$ u_t + a u_x = \\frac{a\\Delta x}{2}(1 - \\frac{a\\Delta t}{\\Delta x})u_{xx} + \\dots = \\frac{a\\Delta x}{2}(1 - \\nu)u_{xx} + \\dots $$\nThe leading-order error term is proportional to $u_{xx}$. This is a dissipative term, akin to physical diffusion. The coefficient of this \"artificial diffusion\" is $D = \\frac{a\\Delta x}{2}(1-\\nu)$. The problem states $a>0$, $\\Delta x>0$, and $0  \\nu  1$. Under these conditions, the coefficient $D$ is strictly positive. A positive diffusion term has a smoothing or damping effect, particularly on high-frequency oscillations. The upwind stencil at node $x_i$ uses information from nodes $x_i$ and $x_{i-1}$, which is consistent with the physical characteristic direction for $a>0$. This consistency, combined with the scheme's inherent numerical dissipation, effectively damps any spurious oscillations that might arise at the inflow boundary, preventing the formation of a visible boundary layer.\n\n**Evaluation of Options**\n\n*   **A. For $a>0$ and inflow at $x=0$, the central difference discretization of $u_x$ yields a leading-order dispersive term in its modified equation of the form $\\propto u_{xxx}$ with no stabilizing $u_{xx}$ term, making the scheme non-dissipative; this non-dissipative, symmetric stencil is inconsistent with the one-sided physics at the inflow boundary and produces oscillatory boundary-layer artifacts. In contrast, the upwind scheme aligned with $a>0$ has a leading artificial diffusion term $\\propto u_{xx}$ with positive coefficient for $0\\nu1$, which damps boundary oscillations and removes the spurious layer.**\n    This statement accurately reflects our derivation. The central scheme is non-dissipative and its leading error is dispersive ($\\propto u_{xxx}$), leading to boundary oscillations. The upwind scheme is dissipative, with a leading artificial diffusion term ($\\propto u_{xx}$) whose coefficient is positive for $0  \\nu  1$, thereby damping oscillations. This is a comprehensive and correct explanation. **Correct**.\n\n*   **B. For $a>0$ and $0\\nu1$, the upwind scheme introduces a negative artificial diffusion (anti-diffusion) near $x=0$ that amplifies boundary oscillations, whereas the central difference scheme contributes a positive $u_{xx}$ term that smooths the solution; therefore, central differencing removes spurious layers and upwind creates them.**\n    This is incorrect. The artificial diffusion for the upwind scheme is positive for $0\\nu1$, not negative. Negative diffusion would cause instability. The stable central difference scheme's leading error is dispersive ($u_{xxx}$), not dissipative ($u_{xx}$). The conclusion is the opposite of the observed facts. **Incorrect**.\n\n*   **C. Because characteristics exit at $x=L$ for $a0$, any spurious numerical boundary layer induced by central differencing must form at $x=L$ (the outflow boundary), not at $x=0$ (the inflow boundary), and upwind has no impact on boundary layers either way.**\n    This is incorrect. While characteristics do exit at $x=L$, the spurious boundary layer for a central scheme is typically most pronounced at the inflow boundary ($x=0$). This is because the symmetric stencil is inconsistent with the enforcement of the one-sided physical boundary condition there. Furthermore, the claim that the upwind scheme has \"no impact\" is false; its numerical diffusion is precisely what prevents the boundary layer. **Incorrect**.\n\n*   **D. The modified equation of the upwind scheme is purely dispersive, with a leading $u_{xxx}$ term and no $u_{xx}$ diffusion, so oscillations persist; by contrast, the central difference scheme adds a leading $u_{xx}$ diffusion term that selectively damps boundary oscillations near $x=0$, eliminating the layer.**\n    This is incorrect. It reverses the properties of the two schemes. The upwind scheme is primarily dissipative ($u_{xx}$ term), while the central difference scheme is primarily dispersive ($u_{xxx}$ term). **Incorrect**.", "answer": "$$\\boxed{A}$$", "id": "3201516"}]}