{"hands_on_practices": [{"introduction": "The Successive Over-Relaxation (SOR) method is a powerful iterative technique for solving large systems of linear equations, which frequently arise from discretizing physical problems. This first exercise grounds the abstract SOR formula in a tangible scenario of heat distribution along a rod. By calculating the temperature at an interior point after a single iteration, you will gain a hands-on feel for the mechanics of the update rule and see how the relaxation parameter, $\\omega$, influences the new value [@problem_id:1369790].", "problem": "A simplified steady-state heat distribution model for a thin, insulated rod is being analyzed. The rod is discretized into five equally spaced points, $P_0, P_1, P_2, P_3, P_4$. The temperatures at the two endpoints are held constant at $T_0 = 25.0^\\circ\\text{C}$ and $T_4 = 100.0^\\circ\\text{C}$. The temperatures at the three interior points, denoted by $T_1, T_2,$ and $T_3$, are unknown.\n\nIn the steady state, the temperature at each interior point is the arithmetic mean of the temperatures of its two immediate neighbors. This physical principle leads to a system of linear equations for the unknown temperatures $T_1, T_2,$ and $T_3$.\n\nTo solve this system, the Successive Over-Relaxation (SOR) iterative method is employed. The relaxation parameter is chosen as $\\omega = 1.15$. The iteration starts with an initial guess of zero for all unknown temperatures, i.e., $T_1^{(0)} = T_2^{(0)} = T_3^{(0)} = 0$.\n\nCalculate the value of the temperature at the first interior point, $T_1$, after the first full iteration, denoted as $T_1^{(1)}$. Express your answer in degrees Celsius, rounded to three significant figures.", "solution": "The steady-state condition on the 1D grid imposes, for each interior node, the mean relation\n$$\nT_{i}=\\frac{T_{i-1}+T_{i+1}}{2}.\n$$\nFor the three unknowns, this yields the linear system\n$$\n\\begin{aligned}\n2T_{1}-T_{2}=T_{0},\\\\\n-T_{1}+2T_{2}-T_{3}=0,\\\\\n-T_{2}+2T_{3}=T_{4}.\n\\end{aligned}\n$$\nUsing the SOR iteration for a system $A\\mathbf{T}=\\mathbf{b}$,\n$$\nT_{i}^{(k+1)}=(1-\\omega)T_{i}^{(k)}+\\frac{\\omega}{a_{ii}}\\left(b_{i}-\\sum_{ji}a_{ij}T_{j}^{(k+1)}-\\sum_{ji}a_{ij}T_{j}^{(k)}\\right),\n$$\nthe update for $T_{1}$ (with $a_{11}=2$, $a_{12}=-1$, $b_{1}=T_{0}$) is\n$$\nT_{1}^{(1)}=(1-\\omega)T_{1}^{(0)}+\\frac{\\omega}{2}\\left(T_{0}-(-1)T_{2}^{(0)}\\right).\n$$\nWith the initial guess $T_{1}^{(0)}=T_{2}^{(0)}=0$,\n$$\nT_{1}^{(1)}=\\frac{\\omega}{2}T_{0}.\n$$\nSubstituting $\\omega=1.15$ and $T_{0}=25.0$ gives\n$$\nT_{1}^{(1)}=\\frac{1.15}{2}\\times 25.0=14.375.\n$$\nRounded to three significant figures, this is $14.4$ in degrees Celsius.", "answer": "$$\\boxed{14.4}$$", "id": "1369790"}, {"introduction": "While the SOR method can be very efficient, its convergence is not guaranteed for all matrices. The key to understanding whether the iterates will approach the true solution lies in the spectral radius, $\\rho$, of the iteration matrix. This practice moves beyond simple application to the theoretical foundation of convergence, asking you to calculate the spectral radius for a system where SOR fails to converge and to see firsthand how a value of $\\rho \\ge 1$ signals this divergence [@problem_id:2207372].", "problem": "Consider a system of linear equations $A\\mathbf{x} = \\mathbf{b}$, where $A$ is a 2x2 matrix with entries $a_{11} = 1$, $a_{12} = 2$, $a_{21} = 3$, and $a_{22} = 1$. The Successive Over-Relaxation (SOR) method is an iterative technique for solving such a system. For a given initial guess $\\mathbf{x}^{(0)}$, the method generates a sequence of approximations $\\mathbf{x}^{(k)}$ that ideally converges to the true solution. The component-wise update rule for the SOR method is given by\n$$ x_i^{(k+1)} = (1-\\omega)x_i^{(k)} + \\frac{\\omega}{a_{ii}} \\left( b_i - \\sum_{ji} a_{ij}x_j^{(k+1)} - \\sum_{ji} a_{ij}x_j^{(k)} \\right) $$\nwhere $x_i^{(k)}$ is the $i$-th component of the vector $\\mathbf{x}^{(k)}$, $a_{ij}$ are the entries of matrix $A$, and $\\omega$ is a real-valued relaxation parameter.\n\nThe behavior of this iteration is governed by its matrix form, $\\mathbf{x}^{(k+1)} = \\mathcal{L}_{\\omega} \\mathbf{x}^{(k)} + \\mathbf{c}$, where $\\mathcal{L}_{\\omega}$ is the SOR iteration matrix and $\\mathbf{c}$ is a constant vector derived from $A$, $\\mathbf{b}$, and $\\omega$. The method converges if and only if the spectral radius of $\\mathcal{L}_{\\omega}$, denoted $\\rho(\\mathcal{L}_{\\omega})$, is less than 1.\n\nFor the given matrix $A$ and a relaxation parameter of $\\omega = 1.2$, calculate the spectral radius $\\rho(\\mathcal{L}_{\\omega})$. Round your final answer to four significant figures.", "solution": "We use the standard splitting $A = D - L - U$, where $D$ is the diagonal of $A$, $-L$ is the strictly lower triangular part, and $-U$ is the strictly upper triangular part. For the SOR method, the iteration matrix is\n$$\n\\mathcal{L}_{\\omega} = (D - \\omega L)^{-1}\\big((1-\\omega)D + \\omega U\\big).\n$$\nGiven $A = \\begin{pmatrix}1  2 \\\\ 3  1\\end{pmatrix}$, we have\n$$\nD = \\begin{pmatrix}1  0 \\\\ 0  1\\end{pmatrix},\\quad L = \\begin{pmatrix}0  0 \\\\ -3  0\\end{pmatrix},\\quad U = \\begin{pmatrix}0  -2 \\\\ 0  0\\end{pmatrix}.\n$$\nThen\n$$\nD - \\omega L = \\begin{pmatrix}1  0 \\\\ 3\\omega  1\\end{pmatrix},\\quad (D - \\omega L)^{-1} = \\begin{pmatrix}1  0 \\\\ -3\\omega  1\\end{pmatrix},\n$$\nand\n$$\n(1-\\omega)D + \\omega U = \\begin{pmatrix}1-\\omega  -2\\omega \\\\ 0  1-\\omega\\end{pmatrix}.\n$$\nTherefore,\n$$\n\\mathcal{L}_{\\omega} = \\begin{pmatrix}1  0 \\\\ -3\\omega  1\\end{pmatrix}\\begin{pmatrix}1-\\omega  -2\\omega \\\\ 0  1-\\omega\\end{pmatrix}\n= \\begin{pmatrix}\n1-\\omega  -2\\omega \\\\\n-3\\omega(1-\\omega)  6\\omega^{2} + (1-\\omega)\n\\end{pmatrix}.\n$$\nThe eigenvalues of $\\mathcal{L}_{\\omega}$ satisfy\n$$\n\\lambda^{2} - \\operatorname{tr}(\\mathcal{L}_{\\omega})\\,\\lambda + \\det(\\mathcal{L}_{\\omega}) = 0,\n$$\nwith\n$$\n\\operatorname{tr}(\\mathcal{L}_{\\omega}) = (1-\\omega) + \\big(6\\omega^{2} + (1-\\omega)\\big) = 6\\omega^{2} + 2 - 2\\omega,\n$$\n$$\n\\det(\\mathcal{L}_{\\omega}) = (1-\\omega)\\big(6\\omega^{2} + (1-\\omega)\\big) - (-2\\omega)\\big(-3\\omega(1-\\omega)\\big) = (1-\\omega)^{2}.\n$$\nThus the eigenvalues are\n$$\n\\lambda_{\\pm} = \\frac{1}{2}\\left(6\\omega^{2} + 2 - 2\\omega \\pm \\sqrt{\\big(6\\omega^{2} + 2 - 2\\omega\\big)^{2} - 4(1-\\omega)^{2}}\\right).\n$$\nFor $\\omega = \\frac{6}{5}$, we compute exactly\n$$\n\\operatorname{tr} = \\frac{206}{25},\\quad \\det = \\frac{1}{25},\\quad \\sqrt{\\operatorname{tr}^{2} - 4\\det} = \\frac{84\\sqrt{6}}{25},\n$$\nso\n$$\n\\lambda_{\\pm} = \\frac{1}{2}\\left(\\frac{206}{25} \\pm \\frac{84\\sqrt{6}}{25}\\right) = \\frac{103 \\pm 42\\sqrt{6}}{25}.\n$$\nThe spectral radius is the larger eigenvalue:\n$$\n\\rho(\\mathcal{L}_{\\omega}) = \\frac{103 + 42\\sqrt{6}}{25} \\approx 8.235142768\\ldots\n$$\nRounding to four significant figures gives $8.235$.", "answer": "$$\\boxed{8.235}$$", "id": "2207372"}, {"introduction": "Having seen how the spectral radius governs convergence, we now turn to optimizing it. For convergent systems, the choice of the relaxation parameter $\\omega$ is critical; a value near the optimum can dramatically accelerate convergence, while a poor choice can make the method painfully slow. This final exercise guides you through a quintessential numerical experiment: finding the optimal $\\omega$ for the classic Poisson equation by mapping the spectral radius as a function of $\\omega$ and identifying its minimum, a core skill in computational science [@problem_id:3198998].", "problem": "You are asked to implement a complete, runnable program that performs a numerical experiment to study the Successive Over-Relaxation (SOR) method for the one-dimensional Poisson linear system with homogeneous Dirichlet boundary conditions. The experiment will map the spectral radius of the SOR iteration matrix as a function of the relaxation parameter and infer an approximately optimal relaxation parameter from the minimizer of this spectral radius, using only fundamental definitions.\n\nThe one-dimensional Poisson boundary value problem on the unit interval with homogeneous Dirichlet boundary conditions is discretized on $N$ interior points with grid spacing $h = \\frac{1}{N+1}$. This produces a linear system $A \\mathbf{u} = \\mathbf{f}$ where $A \\in \\mathbb{R}^{N \\times N}$ is the tridiagonal matrix with $2$ on the main diagonal and $-1$ on the first sub- and super-diagonals, corresponding to the standard second-order centered finite-difference approximation of the second derivative subject to $u(0)=u(1)=0$. Note that for constructing the SOR iteration matrix, the right-hand side $\\mathbf{f}$ is not needed.\n\nDefine the classical matrix splitting $A = D - L - U$, where $D$ is the diagonal of $A$, $L$ is the strictly lower-triangular part of $A$ with a sign chosen so that $A = D - L - U$, and $U$ is the strictly upper-triangular part of $A$ with the same sign convention. For a relaxation parameter $\\omega$ with $0  \\omega  2$, the SOR fixed-point iteration $x^{(k+1)} = T_{\\mathrm{SOR}}(\\omega) x^{(k)} + c(\\omega)$ is defined via\n$$\nT_{\\mathrm{SOR}}(\\omega) = \\left(D - \\omega L\\right)^{-1} \\left((1-\\omega) D + \\omega U\\right).\n$$\nThe spectral radius $\\rho\\!\\left(T_{\\mathrm{SOR}}(\\omega)\\right)$ is the largest magnitude of the eigenvalues of $T_{\\mathrm{SOR}}(\\omega)$.\n\nYour task is to:\n- For each specified test case, construct $A$, build $T_{\\mathrm{SOR}}(\\omega)$ for a dense set of $\\omega$ values in $(0,2)$, numerically compute $\\rho\\!\\left(T_{\\mathrm{SOR}}(\\omega)\\right)$ for each $\\omega$ by computing the eigenvalues of $T_{\\mathrm{SOR}}(\\omega)$, and determine the value of $\\omega$ on the grid that minimizes $\\rho\\!\\left(T_{\\mathrm{SOR}}(\\omega)\\right)$. Call this minimizer $\\omega_{\\mathrm{opt}}$.\n- Ensure that matrix inverses are not formed explicitly; use linear solves to apply $\\left(D - \\omega L\\right)^{-1}$ to a matrix on the right.\n\nUse the following test suite of parameter values:\n- Test case $1$: $N = 1$, $\\omega_{\\min} = 0.05$, $\\omega_{\\max} = 1.95$, $\\Delta \\omega = 0.005$.\n- Test case $2$: $N = 10$, $\\omega_{\\min} = 0.05$, $\\omega_{\\max} = 1.95$, $\\Delta \\omega = 0.01$.\n- Test case $3$: $N = 50$, $\\omega_{\\min} = 0.05$, $\\omega_{\\max} = 1.95$, $\\Delta \\omega = 0.02$.\n\nConstraints and requirements:\n- All computations are purely numerical and must be done with $\\omega$ sampled uniformly from the specified interval, inclusive of endpoints that lie strictly within $(0,2)$.\n- For each test case, report a single floating-point number equal to the minimizing $\\omega_{\\mathrm{opt}}$ found on the grid, rounded to exactly $6$ decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the test cases. For example: $[\\text{result}_1,\\text{result}_2,\\text{result}_3]$.", "solution": "The objective is to numerically determine the optimal relaxation parameter, $\\omega_{\\mathrm{opt}}$, for the Successive Over-Relaxation (SOR) method applied to the linear system arising from the finite-difference discretization of the one-dimensional Poisson equation, $u''(x) = g(x)$, on the unit interval $x \\in [0, 1]$ with homogeneous Dirichlet boundary conditions $u(0)=0$ and $u(1)=0$.\n\nA second-order centered finite-difference scheme on a uniform grid with $N$ interior points and spacing $h = \\frac{1}{N+1}$ leads to the linear system $A \\mathbf{u} = \\mathbf{f}$. The matrix $A \\in \\mathbb{R}^{N \\times N}$ is a symmetric, positive-definite, tridiagonal matrix given by:\n$$\nA = \n\\begin{pmatrix}\n 2  -1                     \\\\\n-1   2  -1                 \\\\\n    \\ddots  \\ddots  \\ddots     \\\\\n            -1      2       -1 \\\\\n                    -1      2\n\\end{pmatrix}\n$$\nThe convergence rate of the SOR method is determined by the spectral radius of its iteration matrix. To construct this matrix, we perform a matrix splitting of $A$ into its diagonal ($D$), strictly lower-triangular ($L$), and strictly upper-triangular ($U$) parts. The problem specifies the decomposition as $A = D - L - U$. Given the structure of $A$, these matrices are:\n- $D$ is a diagonal matrix with all entries equal to $2$. $D = \\mathrm{diag}(2, 2, \\dots, 2)$.\n- Since $A_{i, i-1} = -1$ and $A = D - L - U$, we have $-1 = -L_{i, i-1}$, which implies $L_{i, i-1} = 1$. Thus, $L$ is a strictly lower-bidiagonal matrix with entries of $1$ on its first subdiagonal.\n- Similarly, since $A_{i, i+1} = -1$, we have $-1 = -U_{i, i+1}$, so $U_{i, i+1} = 1$. Thus, $U$ is a strictly upper-bidiagonal matrix with entries of $1$ on its first superdiagonal.\n\nThe SOR iteration is defined by the fixed-point relation $\\mathbf{x}^{(k+1)} = T_{\\mathrm{SOR}}(\\omega) \\mathbf{x}^{(k)} + \\mathbf{c}$, where $\\omega \\in (0, 2)$ is the relaxation parameter and $T_{\\mathrm{SOR}}(\\omega)$ is the iteration matrix. The formula for the iteration matrix is given as:\n$$\nT_{\\mathrm{SOR}}(\\omega) = (D - \\omega L)^{-1}((1-\\omega)D + \\omega U)\n$$\nThe asymptotic rate of convergence of the SOR iteration is governed by the spectral radius of $T_{\\mathrm{SOR}}(\\omega)$, denoted $\\rho(T_{\\mathrm{SOR}}(\\omega))$, which is the maximum absolute value of the eigenvalues of $T_{\\mathrm{SOR}}(\\omega)$. The optimal relaxation parameter, $\\omega_{\\mathrm{opt}}$, is the value of $\\omega$ that minimizes this spectral radius:\n$$\n\\omega_{\\mathrm{opt}} = \\arg\\min_{\\omega \\in (0,2)} \\rho(T_{\\mathrm{SOR}}(\\omega))\n$$\nThis problem requires a numerical search for an approximation of $\\omega_{\\mathrm{opt}}$ by sampling $\\omega$ on a specified discrete grid within the interval $(0, 2)$ for different matrix sizes $N$.\n\nThe numerical algorithm for each test case $(N, \\omega_{\\min}, \\omega_{\\max}, \\Delta \\omega)$ is as follows:\n1.  Construct the matrices $D$, $L$, and $U$ for the given dimension $N$.\n2.  Generate a uniform grid of $\\omega$ values from $\\omega_{\\min}$ to $\\omega_{\\max}$ with an increment of $\\Delta \\omega$.\n3.  Initialize a variable $\\rho_{\\min}$ to a very large number (e.g., infinity) and $\\omega_{\\mathrm{found}}$ to an invalid value.\n4.  Iterate through each value of $\\omega$ in the generated grid:\n    a.  Form the matrices $M(\\omega) = D - \\omega L$ and $N(\\omega) = (1-\\omega)D + \\omega U$.\n    b.  Calculate the SOR iteration matrix $T_{\\mathrm{SOR}}(\\omega) = M(\\omega)^{-1}N(\\omega)$. Critically, the inverse $M(\\omega)^{-1}$ is not computed explicitly. Instead, we solve the matrix equation $M(\\omega) T = N(\\omega)$ for $T$. Since $M(\\omega)$ is a lower-triangular matrix (as $D$ is diagonal and $L$ is strictly lower-triangular), this system can be solved efficiently using forward substitution for each column of $N(\\omega)$.\n    c.  Compute all eigenvalues $\\lambda_i$ of the resulting matrix $T_{\\mathrm{SOR}}(\\omega)$.\n    d.  Calculate the spectral radius $\\rho(\\omega) = \\max_{i} |\\lambda_i|$.\n    e.  If $\\rho(\\omega)  \\rho_{\\min}$, update $\\rho_{\\min} = \\rho(\\omega)$ and set $\\omega_{\\mathrm{found}} = \\omega$.\n5.  After iterating through all $\\omega$ values, the final $\\omega_{\\mathrm{found}}$ is the approximation of $\\omega_{\\mathrm{opt}}$ for the given grid. This value is then reported.\n\nThis entire procedure is implemented for each of the specified test cases.", "answer": "```python\nimport numpy as np\nfrom scipy import linalg\n\ndef solve():\n    \"\"\"\n    Performs a numerical experiment to find the optimal SOR relaxation parameter omega\n    by minimizing the spectral radius of the SOR iteration matrix.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (N, omega_min, omega_max, delta_omega)\n        (1, 0.05, 1.95, 0.005),\n        (10, 0.05, 1.95, 0.01),\n        (50, 0.05, 1.95, 0.02),\n    ]\n\n    results = []\n    for N, w_min, w_max, delta_w in test_cases:\n        # Construct the matrices D, L, and U based on the problem description.\n        # A is tridiagonal with 2 on the diagonal and -1 on the off-diagonals.\n        # The splitting is A = D - L - U.\n        # This implies:\n        # D has 2 on the diagonal.\n        # L has 1 on the first sub-diagonal.\n        # U has 1 on the first super-diagonal.\n        \n        # D is a diagonal matrix with entries 2.\n        D = np.diag(np.full(N, 2.0))\n        \n        if N  1:\n            # L is strictly lower triangular with 1s on the first sub-diagonal.\n            L = np.diag(np.ones(N - 1), k=-1)\n            # U is strictly upper triangular with 1s on the first super-diagonal.\n            U = np.diag(np.ones(N - 1), k=1)\n        else: # N=1 case, L and U are zero matrices.\n            L = np.array([[0.0]])\n            U = np.array([[0.0]])\n\n        # Generate the grid of omega values.\n        # Using np.linspace is more robust for floating-point ranges.\n        num_points = int(round((w_max - w_min) / delta_w)) + 1\n        omegas = np.linspace(w_min, w_max, num_points)\n\n        min_rho = float('inf')\n        opt_omega = -1.0\n\n        for omega in omegas:\n            # Construct the matrices for the SOR operator T_sor = M^-1 * N\n            M_omega = D - omega * L\n            N_omega = (1.0 - omega) * D + omega * U\n\n            # Compute T_sor by solving the system M * T = N.\n            # This avoids explicit inversion of M.\n            # Since M_omega is lower triangular, we use solve_triangular.\n            T_sor = linalg.solve_triangular(M_omega, N_omega, lower=True)\n\n            # Compute the eigenvalues of the iteration matrix.\n            eigenvalues = linalg.eigvals(T_sor)\n\n            # The spectral radius is the maximum magnitude of the eigenvalues.\n            rho = np.max(np.abs(eigenvalues))\n\n            # Check if this omega gives a smaller spectral radius.\n            if rho  min_rho:\n                min_rho = rho\n                opt_omega = omega\n        \n        # Append the found optimal omega, formatted to 6 decimal places.\n        results.append(f\"{opt_omega:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "3198998"}]}