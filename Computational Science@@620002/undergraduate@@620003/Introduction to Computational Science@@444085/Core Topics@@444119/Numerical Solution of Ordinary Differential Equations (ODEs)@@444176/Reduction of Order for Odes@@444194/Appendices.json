{"hands_on_practices": [{"introduction": "This first practice establishes the core technique of reduction of order. Starting from the foundational ansatz $y_2(x) = v(x)y_1(x)$, you will derive the second linearly independent solution for a general second-order ODE lacking a first-derivative term. This exercise [@problem_id:3185221] bridges the gap between theory and practice by requiring you to implement the derived formula numerically and verify its accuracy.", "problem": "Consider the second-order linear homogeneous ordinary differential equation (ODE) in one spatial variable,\n$$\ny''(x) + k(x)\\,y(x) = 0,\n$$\nwhere $k(x)$ is a given, sufficiently smooth real-valued function on a closed interval $[a,b]$ and $y(x)$ is the scalar field to be determined. Suppose one nontrivial solution $y_1(x)$ is known a priori from symmetry and is an even function on $[a,b]$ with $y_1(0) \\neq 0$. Using only fundamental definitions for derivatives, products, and the properties of linear homogeneous ODEs, derive the reduction-of-order expression for a second solution $y_2(x)$ that is linearly independent of $y_1(x)$ and is anti-symmetric (odd) about $x=0$. Then, implement a numerical procedure to compute $y_2(x)$ on a uniform grid and verify that the computed function approximately satisfies the ODE on the interior grid points.\n\nYour derivation must start from the ansatz that the second solution is of the form $y_2(x) = v(x)\\,y_1(x)$ for some function $v(x)$, apply the product rule for differentiation, and use only relationships implied by the known $y_1(x)$ satisfying the given ODE. Do not use or quote any pre-derived reduction-of-order formula; the required expression must be obtained from first principles within this framework.\n\nNumerical task requirements:\n- Use a uniform grid with $N$ odd points on $[a,b]$, $x_i = a + i\\,h$, where $h = (b-a)/(N-1)$, and ensure $x_{(N-1)/2} = 0$ is included in the grid.\n- Enforce anti-symmetry by selecting the constant of integration to satisfy $y_2(0)=0$, and normalize $y_2$ so that $y_2'(0) = 1$.\n- Compute $y_2''(x_i)$ for interior points via the central finite-difference formula\n$$\ny_2''(x_i) \\approx \\frac{y_2(x_{i+1}) - 2 y_2(x_i) + y_2(x_{i-1})}{h^2},\\quad i=1,\\dots,N-2.\n$$\n- Evaluate the residual on interior points\n$$\nr(x_i) = y_2''(x_i) + k(x_i)\\,y_2(x_i),\n$$\nand report the maximum absolute residual $\\max_{i=1,\\dots,N-2} |r(x_i)|$.\n\nTest suite:\nFor each of the following cases, compute the maximum absolute residual and compare it to the specified tolerance. The result for each case must be a boolean indicating whether the residual is less than or equal to the tolerance. The final output must be a single line containing the three booleans as a comma-separated list enclosed in square brackets.\n\n- Case 1 (constant positive stiffness, trigonometric symmetric mode):\n  - Interval: $[a,b] = [-0.7,\\,0.7]$.\n  - Grid size: $N=2001$.\n  - Known solution: $y_1(x) = \\cos(x)$ (even and nonzero on the interval).\n  - Coefficient: $k(x) = 1$.\n  - Tolerance: $\\tau_1 = 5\\times 10^{-4}$.\n\n- Case 2 (variable stiffness, Gaussian symmetric mode):\n  - Interval: $[a,b] = [-1.0,\\,1.0]$.\n  - Grid size: $N=4001$.\n  - Known solution: $y_1(x) = e^{-x^2/2}$ (even and strictly positive).\n  - Coefficient: $k(x) = 1 - x^2$.\n  - Tolerance: $\\tau_2 = 3\\times 10^{-3}$.\n\n- Case 3 (constant negative stiffness, hyperbolic symmetric mode):\n  - Interval: $[a,b] = [-0.7,\\,0.7]$.\n  - Grid size: $N=2001$.\n  - Known solution: $y_1(x) = \\cosh(2x)$ (even and strictly positive).\n  - Coefficient: $k(x) = -4$.\n  - Tolerance: $\\tau_3 = 5\\times 10^{-4}$.\n\nImplementation details:\n- Compute the integral arising from the reduction-of-order expression using the trapezoidal rule on the uniform grid.\n- Use only interior points when forming the second derivative and the residual.\n- Grid spacing and the number of points must be exactly as specified for each case.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[true_case1,true_case2,true_case3]\"). Each entry must be either \"True\" or \"False\" according to whether the corresponding residual is less than or equal to the tolerance.", "solution": "The user wants a detailed solution to a problem involving the reduction of order for a second-order linear homogeneous ordinary differential equation (ODE), followed by a numerical implementation and verification.\n\n### Problem Validation\n\nFirst, I will validate the problem statement.\n\n**Step 1: Extract Givens**\n\n-   **ODE**: $y''(x) + k(x)\\,y(x) = 0$ on a closed interval $[a,b]$.\n-   **Coefficient $k(x)$**: A given, sufficiently smooth real-valued function.\n-   **Known solution $y_1(x)$**: One nontrivial solution is known, is an even function on $[a,b]$, and $y_1(0) \\neq 0$.\n-   **Target solution $y_2(x)$**: A second solution, linearly independent of $y_1(x)$, and anti-symmetric (odd) about $x=0$.\n-   **Derivation Method**: Start from the ansatz $y_2(x) = v(x)\\,y_1(x)$ and use first principles (product rule, etc.). No pre-derived formulas are to be used.\n-   **Numerical Grid**: Uniform grid with $N$ odd points on $[a,b]$, $x_i = a + i\\,h$, where $h = (b-a)/(N-1)$. The center point is $x_{(N-1)/2} = 0$.\n-   **Normalization Conditions**: $y_2(0)=0$ and $y_2'(0) = 1$.\n-   **Numerical Second Derivative**: Central finite-difference formula: $y_2''(x_i) \\approx \\frac{y_2(x_{i+1}) - 2 y_2(x_i) + y_2(x_{i-1})}{h^2}$ for interior points $i=1,\\dots,N-2$.\n-   **Numerical Residual**: $r(x_i) = y_2''(x_i) + k(x_i)\\,y_2(x_i)$ for interior points.\n-   **Verification Metric**: Maximum absolute residual $\\max_{i=1,\\dots,N-2} |r(x_i)|$.\n-   **Integration Method**: Trapezoidal rule.\n-   **Test Suite**:\n    -   **Case 1**: $[a,b] = [-0.7,\\,0.7]$, $N=2001$, $y_1(x) = \\cos(x)$, $k(x) = 1$, tolerance $\\tau_1 = 5\\times 10^{-4}$.\n    -   **Case 2**: $[a,b] = [-1.0,\\,1.0]$, $N=4001$, $y_1(x) = e^{-x^2/2}$, $k(x) = 1 - x^2$, tolerance $\\tau_2 = 3\\times 10^{-3}$.\n    -   **Case 3**: $[a,b] = [-0.7,\\,0.7]$, $N=2001$, $y_1(x) = \\cosh(2x)$, $k(x) = -4$, tolerance $\\tau_3 = 5\\times 10^{-4}$.\n-   **Final Output**: A list of booleans indicating if the residual is within tolerance for each case, e.g., `[True,True,False]`.\n\n**Step 2: Validate Using Extracted Givens**\n\n1.  **Scientifically Grounded**: The problem is based on the standard theory of linear second-order ODEs and the method of reduction of order, a cornerstone of this theory. The specific test cases are physically and mathematically relevant (e.g., relating to the simple harmonic oscillator and the quantum harmonic oscillator). For each case, the given $y_1(x)$ is indeed a solution to $y''+k(x)y=0$:\n    -   Case 1: If $y_1(x)=\\cos(x)$, then $y_1''(x) = -\\cos(x)$. $y_1''+y_1=0$, so $k(x)=1$. Correct.\n    -   Case 2: If $y_1(x)=e^{-x^2/2}$, then $y_1''(x)=(x^2-1)e^{-x^2/2} = -(1-x^2)y_1(x)$. $y_1''+(1-x^2)y_1=0$, so $k(x)=1-x^2$. Correct.\n    -   Case 3: If $y_1(x)=\\cosh(2x)$, then $y_1''(x)=4\\cosh(2x)=4y_1(x)$. $y_1''-4y_1=0$, so $k(x)=-4$. Correct.\n    The problem is scientifically and factually sound.\n2.  **Well-Posed**: The problem is well-posed. The existence of a second, linearly independent solution is guaranteed by theory. The normalization conditions $y_2(0)=0$ and $y_2'(0)=1$ uniquely determine the arbitrary constants that arise during integration, ensuring a unique solution. The numerical task is clearly defined with all necessary parameters and methods.\n3.  **Objective**: The problem is stated in precise, objective mathematical language, free from bias or subjective elements.\n4.  **Complete and Consistent**: All necessary data, functions, parameters, and methods for both the analytical derivation and the numerical implementation are provided. There are no contradictions.\n5.  **No other flaws detected**: The problem is not unrealistic, ill-structured, trivial, or unverifiable. It is a standard, non-trivial exercise in applied mathematics and computational science.\n\n**Step 3: Verdict and Action**\n\nThe problem is **valid**. I will proceed with the solution.\n\n### Derivation and Numerical Method\n\nThe task is to find a second, linearly independent solution $y_2(x)$ to the ODE\n$$\ny''(x) + k(x)\\,y(x) = 0\n$$\ngiven one solution $y_1(x)$. The derivation will be performed from first principles as requested.\n\n**1. Reduction of Order Derivation**\n\nWe start with the ansatz that the second solution $y_2(x)$ can be written as a product of the known solution $y_1(x)$ and some unknown function $v(x)$:\n$$\ny_2(x) = v(x) y_1(x)\n$$\nWe differentiate $y_2(x)$ twice using the product rule:\n$$\ny_2'(x) = v'(x) y_1(x) + v(x) y_1'(x)\n$$\n$$\ny_2''(x) = [v''(x) y_1(x) + v'(x) y_1'(x)] + [v'(x) y_1'(x) + v(x) y_1''(x)] = v''(x) y_1(x) + 2v'(x) y_1'(x) + v(x) y_1''(x)\n$$\nNow, substitute $y_2(x)$ and $y_2''(x)$ back into the original ODE:\n$$\n[v''(x) y_1(x) + 2v'(x) y_1'(x) + v(x) y_1''(x)] + k(x)[v(x) y_1(x)] = 0\n$$\nRearranging the terms by factoring out the derivatives of $v(x)$:\n$$\nv''(x) y_1(x) + 2v'(x) y_1'(x) + v(x) [y_1''(x) + k(x) y_1(x)] = 0\n$$\nSince $y_1(x)$ is a solution to the ODE, the term in the brackets is zero: $y_1''(x) + k(x) y_1(x) = 0$. This simplifies the equation immensely:\n$$\nv''(x) y_1(x) + 2v'(x) y_1'(x) = 0\n$$\nThis is a second-order ODE for $v(x)$, but it is a first-order separable ODE for the function $w(x) = v'(x)$:\n$$\nw'(x) y_1(x) + 2w(x) y_1'(x) = 0\n$$\n$$\n\\frac{w'(x)}{w(x)} = -2 \\frac{y_1'(x)}{y_1(x)}\n$$\nIntegrating both sides with respect to $x$:\n$$\n\\int \\frac{w'(x)}{w(x)} dx = -2 \\int \\frac{y_1'(x)}{y_1(x)} dx\n$$\n$$\n\\ln|w(x)| = -2 \\ln|y_1(x)| + C_1\n$$\nwhere $C_1$ is a constant of integration. Exponentiating both sides gives:\n$$\n|w(x)| = e^{C_1} e^{-2 \\ln|y_1(x)|} = e^{C_1} |y_1(x)|^{-2}\n$$\n$$\nw(x) = v'(x) = \\frac{A}{y_1(x)^2}\n$$\nwhere $A = \\pm e^{C_1}$ is an arbitrary non-zero constant. To find $v(x)$, we integrate $v'(x)$ with respect to $x$. To avoid confusion with the limits of integration, we use a dummy variable $t$:\n$$\nv(x) = \\int \\frac{A}{y_1(t)^2} dt = A \\int \\frac{1}{y_1(t)^2} dt + B\n$$\nwhere $B$ is a second constant of integration. Substituting back into the ansatz for $y_2(x)$:\n$$\ny_2(x) = \\left(A \\int \\frac{1}{y_1(t)^2} dt + B\\right) y_1(x) = A y_1(x) \\int \\frac{1}{y_1(t)^2} dt + B y_1(x)\n$$\nThe term $B y_1(x)$ is a scalar multiple of the known solution $y_1(x)$ and thus is not linearly independent. We seek a new part of the solution space, so we can set $B=0$. The constant $A$ can be absorbed into the definition of $y_2(x)$, so we can write the fundamental form of the second solution as:\n$$\ny_2(x) = C y_1(x) \\int \\frac{1}{y_1(t)^2} dt\n$$\nfor some constant $C$.\n\n**2. Applying Normalization Conditions**\n\nWe must now choose the constant $C$ and the limits of integration to satisfy the conditions $y_2(0) = 0$ and $y_2'(0) = 1$. The condition $y_2(0)=0$ is most easily satisfied by using a definite integral with a lower limit of $0$:\n$$\ny_2(x) = C y_1(x) \\int_0^x \\frac{1}{y_1(t)^2} dt\n$$\nAt $x=0$, the integral evaluates to $0$, so $y_2(0) = C y_1(0) \\cdot 0 = 0$. This holds as long as $y_1(0)$ is finite, which is given. Note that since $y_1(x)$ is an even function, $y_1(t)^2$ is also even. The definite integral of an even function from $0$ to $x$ is an odd function of $x$. Therefore, $v(x)$ is odd, and $y_2(x) = v(x)y_1(x) = (\\text{odd}) \\times (\\text{even})$ is an odd function, as required.\n\nTo satisfy $y_2'(0) = 1$, we differentiate our expression for $y_2(x)$ using the product rule and the Fundamental Theorem of Calculus:\n$$\ny_2'(x) = \\frac{d}{dx} \\left[ C y_1(x) \\int_0^x \\frac{1}{y_1(t)^2} dt \\right] = C y_1'(x) \\left( \\int_0^x \\frac{1}{y_1(t)^2} dt \\right) + C y_1(x) \\left( \\frac{1}{y_1(x)^2} \\right)\n$$\n$$\ny_2'(x) = C y_1'(x) \\int_0^x \\frac{1}{y_1(t)^2} dt + \\frac{C}{y_1(x)}\n$$\nNow we evaluate at $x=0$:\n$$\ny_2'(0) = C y_1'(0) \\int_0^0 \\frac{1}{y_1(t)^2} dt + \\frac{C}{y_1(0)}\n$$\nThe integral is zero. It is also given that $y_1(x)$ is an even function, which implies its derivative $y_1'(x)$ is an odd function, so $y_1'(0) = 0$. Both facts make the first term zero. We are left with:\n$$\ny_2'(0) = \\frac{C}{y_1(0)}\n$$\nSetting this equal to $1$ gives the value for our constant $C$:\n$$\n1 = \\frac{C}{y_1(0)} \\implies C = y_1(0)\n$$\nThus, the final expression for the second solution satisfying all conditions is:\n$$\ny_2(x) = y_1(0) \\, y_1(x) \\int_0^x \\frac{1}{y_1(t)^2} dt\n$$\n\n**3. Numerical Implementation Strategy**\n\nThe numerical implementation will proceed as follows for each test case:\n1.  A uniform grid of $N$ points, denoted $\\{x_i\\}$, is created on the interval $[a,b]$. The center point $x_{(N-1)/2}$ is $0$.\n2.  The known solution $y_1(x)$ is evaluated at each grid point to obtain an array $\\{y_{1,i}\\}$.\n3.  The integrand $f(t) = 1/y_1(t)^2$ is evaluated at each grid point, yielding $\\{f_i\\}$.\n4.  The definite integral $I(x_i) = \\int_0^{x_i} f(t) dt$ is calculated for all $x_i$ using a cumulative trapezoidal rule. This is done by first computing the cumulative integral from the start of the interval, $F(x_i) = \\int_a^{x_i} f(t) dt$, and then shifting it so the integral is zero at the center grid point (where $x=0$): $I(x_i) = F(x_i) - F(x_{(N-1)/2})$.\n5.  The constant $C = y_1(0)$ is obtained from the value of $y_1$ at the center grid point.\n6.  The second solution is computed at all grid points: $y_{2,i} = C \\cdot y_{1,i} \\cdot I(x_i)$.\n7.  The second derivative $y_2''(x)$ is approximated on the interior grid points ($i=1, \\dots, N-2$) using the provided central finite-difference formula.\n8.  The residual $r(x_i) = y_2''(x_i) + k(x_i)y_2(x_i)$ is calculated for each interior point.\n9.  The maximum absolute value of the residual is found and compared against the specified tolerance $\\tau$. The result of this comparison (a boolean) is recorded.\nThis process is repeated for all three test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import cumulative_trapezoid\n\ndef solve():\n    \"\"\"\n    Solves the reduction of order problem for three test cases and\n    prints the verification results.\n    \"\"\"\n\n    def check_case(case_params):\n        \"\"\"\n        Processes a single test case for the reduction of order problem.\n\n        Args:\n            case_params (tuple): A tuple containing a, b, N, y1_func, k_func,\n                                 and tolerance.\n\n        Returns:\n            bool: True if max absolute residual is within tolerance, False otherwise.\n        \"\"\"\n        a, b, N, y1_func, k_func, tolerance = case_params\n\n        # 1. Set up the uniform grid.\n        x = np.linspace(a, b, N)\n        h = (b - a) / (N - 1)\n        mid_idx = (N - 1) // 2\n        # Verify that the center point of the grid is at x=0.\n        if not np.isclose(x[mid_idx], 0.0):\n            raise ValueError(\"Grid center is not at x=0.\")\n\n        # 2. Evaluate the known solution y1 on the grid.\n        y1_vals = y1_func(x)\n\n        # 3. Compute the integrand for the reduction of order formula.\n        # The integrand is 1 / y1(t)^2.\n        integrand = 1.0 / y1_vals**2\n\n        # 4. Numerically compute the integral I(x) = integral from 0 to x.\n        # We use cumulative_trapezoid, which integrates from the start of the array.\n        # We then adjust the result to reflect an integration from x=0.\n        integral_from_start = cumulative_trapezoid(integrand, x, initial=0.0)\n        integral_from_zero = integral_from_start - integral_from_start[mid_idx]\n\n        # 5. Determine the normalization constant C = y1(0) and compute y2.\n        C = y1_vals[mid_idx]\n        y2_vals = C * y1_vals * integral_from_zero\n\n        # 6. Compute the second derivative of y2 on interior points using central differences.\n        # y2_vals[2:] corresponds to y(i+1)\n        # y2_vals[1:-1] corresponds to y(i)\n        # y2_vals[:-2] corresponds to y(i-1)\n        y2_dd_interior = (y2_vals[2:] - 2 * y2_vals[1:-1] + y2_vals[:-2]) / h**2\n\n        # 7. Evaluate k(x) and y2(x) on the interior grid.\n        x_interior = x[1:-1]\n        k_vals_interior = k_func(x_interior)\n        y2_vals_interior = y2_vals[1:-1]\n\n        # 8. Calculate the residual r(x) = y2''(x) + k(x)y2(x) on interior points.\n        residual = y2_dd_interior + k_vals_interior * y2_vals_interior\n\n        # 9. Find the maximum absolute residual.\n        max_abs_residual = np.max(np.abs(residual))\n\n        # 10. Compare against the tolerance.\n        return max_abs_residual = tolerance\n\n    # Define the test cases from the problem statement.\n    case1 = (\n        -0.7, 0.7, 2001,\n        lambda x: np.cos(x),\n        lambda x: 1.0,\n        5e-4\n    )\n    case2 = (\n        -1.0, 1.0, 4001,\n        lambda x: np.exp(-x**2 / 2.0),\n        lambda x: 1.0 - x**2,\n        3e-3\n    )\n    case3 = (\n        -0.7, 0.7, 2001,\n        lambda x: np.cosh(2.0 * x),\n        lambda x: -4.0,\n        5e-4\n    )\n\n    test_cases = [case1, case2, case3]\n\n    results = []\n    for case in test_cases:\n        result = check_case(case)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3185221"}, {"introduction": "Building upon the foundational method, this practice applies reduction of order to the one-dimensional stationary Schrödinger equation. Given a known bound-state wavefunction $y_1(x)$, your task is to construct the second solution $y_2(x)$ and explore its physical meaning. This exercise [@problem_id:3185267] provides a crucial insight from quantum mechanics: while mathematically valid, the second solution is typically not physically realizable because it is not normalizable.", "problem": "You are given the one-dimensional stationary Schrödinger equation in dimensionless form, which is a second-order linear ordinary differential equation (ODE): $$y''(x) + \\big(E - V(x)\\big)\\,y(x) = 0,$$ where $y(x)$ is the wavefunction, $E$ is the energy level, and $V(x)$ is the potential function. Suppose that one bound-state wavefunction $y_1(x)$ is known to solve the equation for a given pair $(E,V)$. Your task is to derive, from first principles of linear ODEs, a method to construct a second, linearly independent solution $y_2(x)$ and to implement a numerically stable algorithm that computes $y_2(x)$ on a finite domain. Then, quantify its non-normalizability on that domain.\n\nFundamental base to use:\n- The definition of a second-order linear ODE and linear independence of solutions.\n- The Wronskian and its properties for linear ODEs without a first-derivative term.\n- The fact that bound-state wavefunctions $y_1(x)$ decay sufficiently fast at infinity for confining potentials.\n\nYour program must:\n1. Derive a constructive method for $y_2(x)$ from $y_1(x)$, stating and using only core principles of linear ODEs and the Wronskian.\n2. Implement the derived method to compute $y_2(x)$ from $y_1(x)$ via a numerically stable cumulative integration on a symmetric grid $\\{x_i\\}$ with anchor at $x_0 = 0$ so that $y_2(0)=0$.\n3. Compute the truncated squared $L^2$ norm $$\\mathcal{N}_2 = \\int_{-L}^{L} \\big(y_2(x)\\big)^2\\,dx$$ for each test case, as a quantitative indicator of non-normalizability over the finite interval. Report $\\mathcal{N}_2$ as floating-point numbers rounded to six decimal places.\n\nGeneral numerical requirements:\n- Use double-precision arithmetic.\n- Perform cumulative integration using a grid-based trapezoidal rule that is stable for rapidly growing integrands.\n- Avoid division by values extremely close to zero by choosing $y_1(x)$ that is strictly positive on the domain for all test cases in this problem. Anchor the integral at $x_0=0$.\n\nTest suite:\n- Case 1 (happy path, confining potential): Let $E=1$ and $y_1(x) = \\exp\\big(-x^2/2\\big)$ on the interval $[-L,L]$ with $L=4$. The potential $V(x)$ is implicitly defined by the ODE; equivalently $V(x) = E - y_1''(x)/y_1(x) = x^2$, but you must not use this identity as a shortcut in your derivation. Use a uniform grid of $N=20001$ points.\n- Case 2 (boundary-condition edge, flat potential): Let $E=0$ and $y_1(x) = 1$ on $[-L,L]$ with $L=5$. The potential is $V(x)=0$. Use a uniform grid of $N=10001$ points.\n- Case 3 (algebraic decay, inverse potential construction): Let $E=0$ and $y_1(x) = \\frac{1}{1+x^2}$ on $[-L,L]$ with $L=4$. The potential $V(x)$ is implicitly defined by the ODE via $V(x) = E - y_1''(x)/y_1(x)$ to ensure $y_1$ is a solution, but you should not rely on an explicit formula for $V(x)$ to construct $y_2(x)$. Use a uniform grid of $N=20001$ points.\n\nWhat to compute and output:\n- For each case, construct $y_2(x)$ from $y_1(x)$ using your reduction-of-order derivation and compute the truncated squared $L^2$ norm $\\mathcal{N}_2$ on the specified domain.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, ordered as [Case 1 result, Case 2 result, Case 3 result], for example, \"[result1,result2,result3]\". Each result must be a float rounded to six decimal places.\n\nAngle unit and physical units:\n- No angle units appear in this problem. The ODE is dimensionless; no physical units are required or to be reported.\n\nNotes:\n- The final derivation must not use a shortcut formula provided in textbooks; it must follow from the fundamental definitions and Wronskian properties.\n- The numerical implementation must carefully handle potential growth of $y_2(x)$ due to the integral structure, using cumulative trapezoidal integration anchored at $x_0=0$.", "solution": "The user has provided a valid problem. The analysis proceeds in two stages: first, a theoretical derivation of the second solution, and second, the design of a numerical algorithm to implement the derived formula and compute the required quantity.\n\n### Problem Validation\nThe problem statement is a well-posed exercise in mathematical physics and numerical analysis, grounded in the standard theory of second-order linear ordinary differential equations (ODEs) and their application in quantum mechanics (the Schrödinger equation).\n\n**Step 1: Extracted Givens**\n- **ODE**: $y''(x) + \\big(E - V(x)\\big)\\,y(x) = 0$.\n- **Known Solution**: One bound-state solution $y_1(x)$ is given for a specific pair $(E, V)$.\n- **Objective**:\n    1. Derive a method to find a second, linearly independent solution, $y_2(x)$, using first principles and the Wronskian.\n    2. Implement a numerical algorithm to calculate $y_2(x)$ on a symmetric grid anchored at $x_0=0$ such that $y_2(0)=0$.\n    3. Compute the truncated squared $L^2$ norm, $\\mathcal{N}_2 = \\int_{-L}^{L} \\big(y_2(x)\\big)^2\\,dx$, for given test cases.\n- **Numerical Specifications**: Use double-precision arithmetic, a stable cumulative trapezoidal rule, and an anchor at $x_0=0$.\n- **Test Cases**:\n    - Case 1: $E=1$, $y_1(x) = \\exp(-x^2/2)$, $L=4$, $N=20001$.\n    - Case 2: $E=0$, $y_1(x) = 1$, $L=5$, $N=10001$.\n    - Case 3: $E=0$, $y_1(x) = 1/(1+x^2)$, $L=4$, $N=20001$.\n\n**Step 2: Validation of Givens**\nThe problem is found to be valid.\n- **Scientifically Grounded**: The problem is built upon the Schrödinger equation and the method of reduction of order, both fundamental concepts in physics and mathematics.\n- **Well-Posed**: It provides a clear objective, all necessary data, and constraints that lead to a unique numerical result for each specified case.\n- **Objective**: The problem is stated in precise, formal language, free of ambiguity or subjective elements.\n\nThere are no identifiable flaws that would render the problem invalid.\n\n### Theoretical Derivation: Reduction of Order\n\nThe given ODE is a one-dimensional stationary Schrödinger equation:\n$$ y''(x) + \\big(E - V(x)\\big)\\,y(x) = 0 $$\nThis is a second-order linear homogeneous ODE of the form $y''(x) + p(x) y(x) = 0$, where $p(x) = E - V(x)$. Note the absence of a first-derivative term, $y'(x)$. Let $y_1(x)$ be the known solution. We seek a second, linearly independent solution, $y_2(x)$.\n\nThe linear independence of two solutions to a second-order ODE is determined by their Wronskian, defined as:\n$$ W(x) = W[y_1, y_2](x) = y_1(x) y_2'(x) - y_1'(x) y_2(x) $$\nFor a general second-order linear ODE $y'' + P(x)y' + Q(x)y = 0$, Abel's identity states that the Wronskian is given by $W(x) = W(x_0) \\exp\\left(-\\int_{x_0}^x P(t) dt\\right)$. In our specific case, the coefficient of the first derivative, $P(x)$, is $0$. Consequently, the exponent is zero, and the Wronskian is a constant, independent of $x$:\n$$ W(x) = W_0 $$\nwhere $W_0$ is a constant. For $y_1$ and $y_2$ to be linearly independent, this constant must be non-zero, $W_0 \\neq 0$.\n\nWe can now use this property to construct $y_2(x)$. The relation $y_1(x) y_2'(x) - y_1'(x) y_2(x) = W_0$ is a first-order linear ODE for $y_2(x)$. To solve it, we divide by $y_1(x)^2$ (noting that the problem guarantees $y_1(x)  0$ on the domain of interest):\n$$ \\frac{y_1(x) y_2'(x) - y_1'(x) y_2(x)}{y_1(x)^2} = \\frac{W_0}{y_1(x)^2} $$\nThe left-hand side is recognizable as the derivative of a quotient, $\\left(\\frac{y_2(x)}{y_1(x)}\\right)'$. Thus, we have:\n$$ \\left(\\frac{y_2(x)}{y_1(x)}\\right)' = \\frac{W_0}{y_1(x)^2} $$\nTo solve for $y_2(x)$, we integrate both sides with respect to $x$. The problem specifies an anchor at $x_0 = 0$. Integrating from $0$ to $x$:\n$$ \\int_0^x \\left(\\frac{y_2(t)}{y_1(t)}\\right)' dt = \\int_0^x \\frac{W_0}{y_1(t)^2} dt $$\n$$ \\frac{y_2(x)}{y_1(x)} - \\frac{y_2(0)}{y_1(0)} = W_0 \\int_0^x \\frac{dt}{y_1(t)^2} $$\nThe problem requires that $y_2(0) = 0$. This condition simplifies the equation to:\n$$ \\frac{y_2(x)}{y_1(x)} = W_0 \\int_0^x \\frac{dt}{y_1(t)^2} $$\nSolving for $y_2(x)$ yields:\n$$ y_2(x) = W_0 \\, y_1(x) \\int_0^x \\frac{dt}{y_1(t)^2} $$\nThe constant $W_0$ determines the scaling of the second solution. Since any non-zero value of $W_0$ produces a valid linearly independent solution, we can choose $W_0=1$ for simplicity. This leads to the final constructive formula:\n$$ y_2(x) = y_1(x) \\int_0^x \\frac{dt}{y_1(t)^2} $$\nThis derived formula forms the basis of our numerical implementation. If $y_1(x)$ is a bound-state solution that decays at infinity (e.g., $y_1(x) \\sim e^{-ax^2}$ or $y_1(x) \\sim 1/x^n$), the integrand $1/y_1(t)^2$ will grow rapidly as $|t| \\to \\infty$. Consequently, the integral will diverge, and $y_2(x)$ will not be a normalizable wavefunction over $(-\\infty, \\infty)$. The quantity $\\mathcal{N}_2$ measures the non-normalizability over the finite domain $[-L, L]$.\n\n### Numerical Algorithm Design\n\nTo compute $\\mathcal{N}_2 = \\int_{-L}^{L} y_2(x)^2 \\,dx$, we first need to compute the values of $y_2(x)$ on a discrete grid. The process is as follows:\n\n1.  **Grid Generation**: For each test case, a uniform grid of $N$ points, $\\{x_i\\}$, is created on the interval $[-L, L]$ using double-precision floating-point numbers. The point $x=0$ is ensured to be on the grid.\n\n2.  **Calculation of $y_2(x)$**:\n    a.  The known solution $y_1(x)$ is evaluated at each grid point $x_i$, yielding the array $\\{y_{1,i}\\}$.\n    b.  The integrand for the reduction-of-order formula, $f(t) = 1/y_1(t)^2$, is evaluated at each grid point, yielding $\\{f_i\\}$.\n    c.  The definite integral $I(x_i) = \\int_0^{x_i} f(t) \\,dt$ is computed numerically for all $x_i$. This is achieved by first computing the cumulative integral from the start of the grid, $I_{L}(x_i) = \\int_{-L}^{x_i} f(t) \\,dt$, using a stable trapezoidal rule implementation. The desired integral anchored at $0$ is then obtained by subtraction: $I(x_i) = I_{L}(x_i) - I_{L}(0)$.\n    d.  The values of the second solution are then computed at each grid point using the derived formula: $y_{2,i} = y_{1,i} \\times I(x_i)$.\n\n3.  **Calculation of $\\mathcal{N}_2$**:\n    a.  The integrand for the norm, $g(x) = y_2(x)^2$, is evaluated at each grid point, yielding $\\{g_i = y_{2,i}^2\\}$.\n    b.  The total integral $\\mathcal{N}_2 = \\int_{-L}^{L} g(x) \\,dx$ is computed by applying the standard trapezoidal rule to the array $\\{g_i\\}$ over the grid $\\{x_i\\}$.\n\nThis procedure is applied to each of the three test cases provided in the problem statement.", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import cumulative_trapezoid, trapezoid\n\ndef solve():\n    \"\"\"\n    Solves the problem of finding a second linearly independent solution\n    to the Schrödinger equation and quantifies its non-normalizability.\n    \"\"\"\n    \n    # Define test cases as tuples of (L, N, y1_function).\n    # L: half-width of the domain [-L, L]\n    # N: number of grid points\n    # y1_function: a lambda function for the known solution y1(x)\n    test_cases = [\n        (4.0, 20001, lambda x: np.exp(-x**2 / 2.0)),\n        (5.0, 10001, lambda x: np.ones_like(x, dtype=np.float64)),\n        (4.0, 20001, lambda x: 1.0 / (1.0 + x**2))\n    ]\n\n    results = []\n\n    for L, N, y1_func in test_cases:\n        # Use double-precision floating-point numbers for all calculations.\n        dtype = np.float64\n\n        # 1. Create a uniform, symmetric grid on [-L, L].\n        # N is odd, so x=0 is a grid point.\n        x = np.linspace(-L, L, N, dtype=dtype)\n        \n        # 2. Evaluate the known solution y1(x) on the grid.\n        y1 = y1_func(x)\n        \n        # 3. Construct the second solution y2(x) using reduction of order.\n        # The formula is y2(x) = y1(x) * integral from 0 to x of (1/y1(t)^2) dt.\n        \n        # a. Define the integrand for the inner integral.\n        integrand_for_y2 = 1.0 / y1**2\n        \n        # b. Compute the cumulative integral.\n        # `cumulative_trapezoid` computes the integral from the first element of x.\n        # The result is an array of size N-1. initial=0 prepends a 0.\n        integral_from_left = cumulative_trapezoid(integrand_for_y2, x, initial=0.0)\n        \n        # c. Re-anchor the integral to start from x=0.\n        # The integral from 0 to x_i is (integral from -L to x_i) - (integral from -L to 0).\n        # Since N is odd, the midpoint index corresponds to x=0.\n        mid_idx = (N - 1) // 2\n        integral_value_at_zero = integral_from_left[mid_idx]\n        integral_from_zero = integral_from_left - integral_value_at_zero\n        \n        # d. Calculate y2(x) on the grid.\n        y2 = y1 * integral_from_zero\n        \n        # 4. Compute the truncated squared L2 norm of y2 on [-L, L].\n        # The norm is N2 = integral from -L to L of y2(x)^2 dx.\n        \n        # a. Define the integrand for the norm calculation.\n        integrand_for_norm = y2**2\n        \n        # b. Compute the definite integral using the trapezoidal rule.\n        norm_sq = trapezoid(integrand_for_norm, x)\n        \n        # Append the formatted result to the list.\n        results.append(f\"{norm_sq:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "3185267"}, {"introduction": "This final practice elevates the reduction of order technique from a method for finding a single solution to a tool for constructing a complete basis. You will work within the context of the Sturm-Liouville problem, a general form of ODE that appears throughout physics and engineering. By using reduction of order and then applying a weighted Gram-Schmidt process [@problem_id:3185295], you will generate an orthonormal set of functions, demonstrating a procedure at the heart of many advanced solution methods.", "problem": "You are given a family of second-order linear Ordinary Differential Equations (ODEs) in the self-adjoint Sturm–Liouville form\n$$(p(x) y'(x))' + (\\lambda\\, w(x) - q(x))\\, y(x) = 0,$$\non a closed interval $[a,b]$ with continuous coefficient functions $p(x)0$, $w(x)0$, and $q(x)$, and a real parameter $\\lambda$. For a given nontrivial solution $y_1(x)$ of the homogeneous equation, your task is to build a second, linearly independent solution $y_2(x)$ by reduction of order, and then numerically construct an orthonormal basis from $\\{y_1,y_2\\}$ using a weighted Gram–Schmidt orthonormalization with the Sturm–Liouville weight $w(x)$. The problem focuses on deriving the reduction-of-order construction from first principles and then implementing it robustly.\n\nStarting from the foundational theory of linear second-order ODEs and properties of the Wronskian, derive a reduction-of-order procedure suitable for equations in self-adjoint form, and then implement it numerically to compute $y_2(x)$ when $y_1(x)$ is known. You must not assume or use any closed-form expression for $y_2(x)$; instead, you must compute $y_2(x)$ via the reduction-of-order construction that you derive, using numerical quadrature on a discretized grid.\n\nOnce you have $\\{y_1,y_2\\}$ on a uniform grid, define the weighted inner product\n$$\\langle f,g \\rangle_w \\equiv \\int_a^b w(x)\\, f(x)\\, g(x)\\, dx,$$\nand perform a weighted Gram–Schmidt orthonormalization to obtain functions $\\{\\phi_1,\\phi_2\\}$ that satisfy $\\langle \\phi_i, \\phi_j \\rangle_w = \\delta_{ij}$, where $\\delta_{ij}$ is the Kronecker delta. Use a numerically stable implementation with a composite trapezoidal rule to approximate integrals.\n\nYour program must compute the orthonormality error by forming the $2\\times 2$ Gram matrix $G$ with entries $G_{ij} = \\langle \\phi_i, \\phi_j \\rangle_w$ and returning the single scalar quantity\n$$E \\equiv \\max\\big\\{\\,|G_{11}-1|,\\,|G_{22}-1|,\\,|G_{12}|,\\,|G_{21}|\\,\\big\\},$$\nfor each test case. This single number $E$ should be small when the numerical orthonormalization is successful.\n\nImplement the following test suite. In every case, discretize the interval with a uniform grid of $N$ points, and use the composite trapezoidal rule for all integrals. The function $y_1(x)$ is supplied; the function $y_2(x)$ must be computed via reduction of order from your derivation.\n\n- Test case $1$ (general, constant-coefficient case, interior zeros avoided):\n  - Interval: $[a,b] = [0.01, \\pi - 0.01]$.\n  - Coefficients: $p(x)=1$, $w(x)=1$, $q(x)=0$, $\\lambda=1$.\n  - Given solution: $y_1(x) = \\sin(x)$.\n  - Grid: $N = 5001$ points.\n\n- Test case $2$ (edge case with $\\lambda = 0$ and nonconstant weight):\n  - Interval: $[a,b] = [0.1, 1]$.\n  - Coefficients: $p(x)=1$, $w(x)=x+1$, $q(x)=0$, $\\lambda=0$.\n  - Given solution: $y_1(x) = x$.\n  - Grid: $N = 5001$ points.\n\n- Test case $3$ (variable coefficient in self-adjoint form, near-endpoint behavior controlled):\n  - Interval: $[a,b] = [-0.9, 0.9]$.\n  - Coefficients: $p(x)=1-x^2$, $w(x)=1$, $q(x)=0$, $\\lambda=0$.\n  - Given solution: $y_1(x) = 1$.\n  - Grid: $N = 5001$ points.\n\nFor each test case, you must:\n- Derive and implement the reduction-of-order procedure to compute $y_2(x)$ on the grid using only numerical quadrature and the known $y_1(x)$ and $p(x)$.\n- Construct the weighted inner products with $w(x)$ using the composite trapezoidal rule.\n- Perform weighted Gram–Schmidt to produce $\\{\\phi_1,\\phi_2\\}$.\n- Compute the scalar orthonormality error $E$ from the Gram matrix $G$.\n\nFinal output format:\nYour program should produce a single line of output containing the results for the three test cases as a comma-separated list enclosed in square brackets (for example, $[r_1,r_2,r_3]$), where each $r_i$ is the floating-point orthonormality error $E$ for test case $i$. No other text should be printed.", "solution": "We begin by recalling the standard framework for second-order linear Ordinary Differential Equations (ODEs). Consider the general homogeneous equation\n$$y''(x) + P(x)\\, y'(x) + Q(x)\\, y(x) = 0.$$\nSuppose a nontrivial solution $y_1(x)$ is known. The reduction-of-order ansatz seeks a second solution of the form\n$$y_2(x) = y_1(x)\\, v(x),$$\nwhere $v(x)$ is an unknown function to be determined. We substitute $y_2$ into the ODE and use product rule derivatives. Compute\n$$y_2'(x) = y_1'(x)\\, v(x) + y_1(x)\\, v'(x),$$\n$$y_2''(x) = y_1''(x)\\, v(x) + 2 y_1'(x)\\, v'(x) + y_1(x)\\, v''(x).$$\nSubstituting into $y'' + P y' + Q y = 0$ and using that $y_1$ itself satisfies the equation, the terms proportional to $v(x)$ cancel, leaving\n$$y_1(x)\\, v''(x) + \\big(2 y_1'(x) + P(x)\\, y_1(x)\\big)\\, v'(x) = 0.$$\nLet $u(x) \\equiv v'(x)$. Then we obtain a first-order linear equation for $u$,\n$$y_1(x)\\, u'(x) + \\big(2 y_1'(x) + P(x)\\, y_1(x)\\big)\\, u(x) = 0.$$\nDivide by $y_1(x)$ and rearrange:\n$$u'(x) + \\left(2 \\frac{y_1'(x)}{y_1(x)} + P(x)\\right) u(x) = 0.$$\nThis is a first-order homogeneous linear ODE with solution\n$$u(x) = C\\, \\exp\\left(-\\int \\left(2 \\frac{y_1'(x)}{y_1(x)} + P(x)\\right) dx\\right) = C\\, \\frac{\\exp\\left(-\\int P(x)\\, dx\\right)}{y_1(x)^2}.$$\nIntegrating $u(x)$ recovers $v(x)$, and thus\n$$y_2(x) = y_1(x)\\, v(x) = y_1(x)\\, \\int \\frac{\\exp\\left(-\\int P(x)\\, dx\\right)}{y_1(x)^2}\\, dx.$$\nNow specialize to the Sturm–Liouville self-adjoint form\n$$(p(x) y'(x))' + (\\lambda\\, w(x) - q(x))\\, y(x) = 0.$$\nExpanding gives\n$$p(x)\\, y''(x) + p'(x)\\, y'(x) + (\\lambda\\, w(x) - q(x))\\, y(x) = 0,$$\nwhich is equivalent to\n$$y''(x) + \\frac{p'(x)}{p(x)}\\, y'(x) + \\frac{\\lambda\\, w(x) - q(x)}{p(x)}\\, y(x) = 0.$$\nTherefore, in the standard form we identify\n$$P(x) = \\frac{p'(x)}{p(x)}, \\quad Q(x) = \\frac{\\lambda\\, w(x) - q(x)}{p(x)}.$$\nUsing the derived reduction-of-order expression with $\\exp\\left(-\\int P(x)\\, dx\\right) = \\exp\\left(-\\int \\frac{p'(x)}{p(x)}\\, dx\\right) = \\frac{1}{p(x)}$, we obtain the Sturm–Liouville reduction-of-order formula\n$$y_2(x) = y_1(x)\\, \\int \\frac{1}{p(x)\\, y_1(x)^2}\\, dx.$$\nThis expression exhibits the self-adjoint structure: the Wronskian $W[y_1,y_2]$ satisfies $W' + P W = 0$ and thus $W \\propto \\exp\\left(-\\int P dx\\right) = 1/p(x)$, consistent with the integrand above.\n\nNext, we define the weighted inner product associated with the Sturm–Liouville weight $w(x)$:\n$$\\langle f,g \\rangle_w = \\int_a^b w(x)\\, f(x)\\, g(x)\\, dx.$$\nWeighted Gram–Schmidt proceeds as follows for two functions $f_1$ and $f_2$. First, compute the weight-induced norm\n$$\\|f\\|_w = \\sqrt{\\langle f,f \\rangle_w}.$$\nNormalize the first function:\n$$\\phi_1 = \\frac{f_1}{\\|f_1\\|_w}.$$\nOrthogonalize and normalize the second:\n$$\\tilde{f}_2 = f_2 - \\langle \\phi_1, f_2 \\rangle_w\\, \\phi_1,\\quad \\phi_2 = \\frac{\\tilde{f}_2}{\\|\\tilde{f}_2\\|_w}.$$\nThe Gram matrix entries are $G_{ij} = \\langle \\phi_i, \\phi_j \\rangle_w$, and ideal orthonormality yields $G = I$, where $I$ is the $2\\times 2$ identity matrix.\n\nNumerical implementation details:\n- Discretize $[a,b]$ using $N$ uniformly spaced points $x_k$, with spacing $\\Delta x = (b-a)/(N-1)$.\n- Approximate the integral $\\int_a^b h(x)\\, dx$ by the composite trapezoidal rule:\n$$\\int_a^b h(x)\\, dx \\approx \\sum_{k=1}^{N-1} \\frac{h(x_{k-1}) + h(x_k)}{2}\\, (x_k - x_{k-1}).$$\n- Construct $y_2(x)$ on the grid via a cumulative trapezoidal integration of the integrand $g(x) = \\frac{1}{p(x)\\, y_1(x)^2}$:\n$$I(x_k) \\approx \\sum_{m=1}^{k} \\frac{g(x_{m-1}) + g(x_m)}{2}\\, (x_m - x_{m-1}), \\quad I(x_0)=0,$$\nand set $y_2(x_k) = y_1(x_k)\\, I(x_k)$. This determines a valid linearly independent solution up to an additive constant in $I$, which only shifts $y_2$ by a multiple of $y_1$ and is removed by Gram–Schmidt.\n- Perform weighted Gram–Schmidt using $w(x_k)$ and the trapezoidal rule to compute inner products.\n\nTest suite rationale:\n- Test case $1$ uses $p(x)=1$, $w(x)=1$, $q(x)=0$, $\\lambda=1$, and $y_1(x)=\\sin(x)$ on $[0.01,\\pi-0.01]$ with $N=5001$. The interior avoids zeros of $y_1$ to prevent singularities in $g(x)$.\n- Test case $2$ sets $\\lambda=0$ with $p(x)=1$, $w(x)=x+1$, $q(x)=0$, $y_1(x)=x$ on $[0.1,1]$ with $N=5001$. The integrand $g(x)=1/(x^2)$ is well-behaved away from $x=0$.\n- Test case $3$ uses self-adjoint variable coefficient $p(x)=1-x^2$, $w(x)=1$, $q(x)=0$, $\\lambda=0$, and $y_1(x)=1$ on $[-0.9,0.9]$ with $N=5001$. The integrand $g(x)=1/(1-x^2)$ is finite on the chosen interval.\n\nFor each test case, the program computes the Gram matrix $G$ and returns the orthonormality error\n$$E = \\max\\big\\{\\,|G_{11}-1|,\\,|G_{22}-1|,\\,|G_{12}|,\\,|G_{21}|\\,\\big\\}.$$\nThe final output is a single line with the three errors in the format $[r_1,r_2,r_3]$. Small values (for example, on the order of $10^{-8}$ to $10^{-12}$ depending on grid resolution and conditioning) indicate successful numerical orthonormalization.", "answer": "```python\nimport numpy as np\n\ndef cumulative_trapezoid(y, x):\n    \"\"\"\n    Compute cumulative integral using the composite trapezoidal rule.\n    Returns an array I such that I[0]=0 and\n    I[k] ~ \\int_{x[0]}^{x[k]} y(t) dt.\n    \"\"\"\n    I = np.zeros_like(y)\n    dx = np.diff(x)\n    avg = 0.5 * (y[1:] + y[:-1])\n    I[1:] = np.cumsum(avg * dx)\n    return I\n\ndef weighted_inner_product(f, g, x, w):\n    \"\"\"\n    Compute the weighted inner product f,g_w = \\int w(x) f(x) g(x) dx\n    using the composite trapezoidal rule on grid x.\n    \"\"\"\n    integrand = w * f * g\n    return np.trapz(integrand, x)\n\ndef weighted_gram_schmidt_two(f1, f2, x, w):\n    \"\"\"\n    Perform weighted Gram-Schmidt orthonormalization on two functions f1, f2.\n    Returns phi1, phi2 and the Gram matrix G computed with weight w.\n    \"\"\"\n    # Normalize f1\n    n1 = np.sqrt(weighted_inner_product(f1, f1, x, w))\n    phi1 = f1 / n1\n\n    # Orthogonalize f2 against phi1\n    proj = weighted_inner_product(phi1, f2, x, w)\n    f2_tilde = f2 - proj * phi1\n\n    # Normalize f2_tilde\n    n2 = np.sqrt(weighted_inner_product(f2_tilde, f2_tilde, x, w))\n    phi2 = f2_tilde / n2\n\n    # Gram matrix entries\n    G11 = weighted_inner_product(phi1, phi1, x, w)\n    G12 = weighted_inner_product(phi1, phi2, x, w)\n    G21 = weighted_inner_product(phi2, phi1, x, w)\n    G22 = weighted_inner_product(phi2, phi2, x, w)\n    G = np.array([[G11, G12], [G21, G22]])\n    return phi1, phi2, G\n\ndef reduction_of_order_y2(y1, p, x):\n    \"\"\"\n    Compute the second solution y2 via reduction of order for the Sturm-Liouville form:\n    y2(x) = y1(x) * \\int dx / (p(x) * y1(x)^2)\n    The integral is computed cumulatively via the trapezoidal rule.\n    \"\"\"\n    # Avoid division by zero by relying on test cases that do not include zeros of y1 in the interior.\n    integrand = 1.0 / (p * (y1 ** 2))\n    I = cumulative_trapezoid(integrand, x)\n    y2 = y1 * I\n    return y2\n\ndef solve():\n    # Define test cases according to the problem statement.\n    test_cases = [\n        # Test case 1\n        {\n            \"a\": 0.01,\n            \"b\": np.pi - 0.01,\n            \"N\": 5001,\n            \"p_func\": lambda x: np.ones_like(x),\n            \"w_func\": lambda x: np.ones_like(x),\n            \"y1_func\": lambda x: np.sin(x),\n        },\n        # Test case 2\n        {\n            \"a\": 0.1,\n            \"b\": 1.0,\n            \"N\": 5001,\n            \"p_func\": lambda x: np.ones_like(x),\n            \"w_func\": lambda x: x + 1.0,\n            \"y1_func\": lambda x: x,\n        },\n        # Test case 3\n        {\n            \"a\": -0.9,\n            \"b\": 0.9,\n            \"N\": 5001,\n            \"p_func\": lambda x: 1.0 - x**2,\n            \"w_func\": lambda x: np.ones_like(x),\n            \"y1_func\": lambda x: np.ones_like(x),\n        },\n    ]\n\n    results = []\n\n    for case in test_cases:\n        a = case[\"a\"]; b = case[\"b\"]; N = case[\"N\"]\n        x = np.linspace(a, b, N)\n        p = case[\"p_func\"](x)\n        w = case[\"w_func\"](x)\n        y1 = case[\"y1_func\"](x)\n\n        # Construct y2 via reduction of order\n        y2 = reduction_of_order_y2(y1, p, x)\n\n        # Weighted Gram-Schmidt to obtain orthonormal basis\n        phi1, phi2, G = weighted_gram_schmidt_two(y1, y2, x, w)\n\n        # Compute orthonormality error\n        err = max(abs(G[0,0] - 1.0), abs(G[1,1] - 1.0), abs(G[0,1]), abs(G[1,0]))\n        results.append(err)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "3185295"}]}