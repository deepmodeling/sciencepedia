{"hands_on_practices": [{"introduction": "Mastering Fourier series begins with the fundamental skill of calculating the series coefficients from their integral definitions. This first practice provides a step-by-step guide using the simple, yet important, function $f(x)=x$, which forms a sawtooth wave when extended periodically. By working through this example, you will not only practice the mechanics of integration but also see how leveraging function properties, such as symmetry, can dramatically simplify your calculations [@problem_id:8857].", "problem": "A periodic function $f(x)$ with period $2L$ can be represented by its Fourier series, provided it satisfies certain conditions (the Dirichlet conditions). For a function defined on the interval $[-L, L]$, its Fourier series is given by\n$$\nf(x) \\sim \\frac{a_0}{2} + \\sum_{n=1}^{\\infty} \\left[ a_n \\cos\\left(\\frac{n\\pi x}{L}\\right) + b_n \\sin\\left(\\frac{n\\pi x}{L}\\right) \\right]\n$$\nThe coefficients of the series, $a_0$, $a_n$, and $b_n$, are calculated using the following formulas:\n$$\na_0 = \\frac{1}{L} \\int_{-L}^{L} f(x) \\, dx\n$$\n$$\na_n = \\frac{1}{L} \\int_{-L}^{L} f(x) \\cos\\left(\\frac{n\\pi x}{L}\\right) \\, dx \\quad (n \\ge 1)\n$$\n$$\nb_n = \\frac{1}{L} \\int_{-L}^{L} f(x) \\sin\\left(\\frac{n\\pi x}{L}\\right) \\, dx \\quad (n \\ge 1)\n$$\n\nConsider the simple linear function $f(x) = x$ defined on the interval $[-\\pi, \\pi]$. The period of this function is $2\\pi$, so $L=\\pi$.\n\nDerive the complete Fourier series representation for this function on the specified interval.", "solution": "The problem is to find the Fourier series for the function $f(x) = x$ on the interval $[-\\pi, \\pi]$. The period is $2L = 2\\pi$, so $L=\\pi$. The general form of the Fourier series simplifies to:\n$$\nf(x) \\sim \\frac{a_0}{2} + \\sum_{n=1}^{\\infty} \\left[ a_n \\cos(nx) + b_n \\sin(nx) \\right]\n$$\nWe need to calculate the coefficients $a_0$, $a_n$, and $b_n$.\n\n**Step 1: Calculate the coefficient $a_0$.**\nThe formula for $a_0$ is:\n$$\na_0 = \\frac{1}{\\pi} \\int_{-\\pi}^{\\pi} f(x) \\, dx = \\frac{1}{\\pi} \\int_{-\\pi}^{\\pi} x \\, dx\n$$\nThe function $f(x) = x$ is an odd function, meaning $f(-x) = -f(x)$. The integral of an odd function over a symmetric interval, such as $[-\\pi, \\pi]$, is zero.\n$$\na_0 = 0\n$$\nAlternatively, one can compute the integral directly:\n$$\na_0 = \\frac{1}{\\pi} \\left[ \\frac{x^2}{2} \\right]_{-\\pi}^{\\pi} = \\frac{1}{2\\pi} (\\pi^2 - (-\\pi)^2) = \\frac{1}{2\\pi} (\\pi^2 - \\pi^2) = 0\n$$\n\n**Step 2: Calculate the coefficients $a_n$.**\nThe formula for $a_n$ is:\n$$\na_n = \\frac{1}{\\pi} \\int_{-\\pi}^{\\pi} f(x) \\cos(nx) \\, dx = \\frac{1}{\\pi} \\int_{-\\pi}^{\\pi} x \\cos(nx) \\, dx\n$$\nThe integrand is the product of an odd function ($x$) and an even function ($\\cos(nx)$). The product of an odd and an even function is an odd function. Therefore, the integral over the symmetric interval $[-\\pi, \\pi]$ is zero.\n$$\na_n = 0 \\quad \\text{for all } n \\ge 1\n$$\n\n**Step 3: Calculate the coefficients $b_n$.**\nThe formula for $b_n$ is:\n$$\nb_n = \\frac{1}{\\pi} \\int_{-\\pi}^{\\pi} f(x) \\sin(nx) \\, dx = \\frac{1}{\\pi} \\int_{-\\pi}^{\\pi} x \\sin(nx) \\, dx\n$$\nThe integrand is the product of an odd function ($x$) and an odd function ($\\sin(nx)$). The product of two odd functions is an even function. For an even function $g(x)$, the integral over a symmetric interval is $\\int_{-a}^{a} g(x) dx = 2\\int_{0}^{a} g(x) dx$.\n$$\nb_n = \\frac{2}{\\pi} \\int_{0}^{\\pi} x \\sin(nx) \\, dx\n$$\nWe use integration by parts, $\\int u \\, dv = uv - \\int v \\, du$. Let $u = x$ and $dv = \\sin(nx) \\, dx$. Then $du = dx$ and $v = -\\frac{1}{n}\\cos(nx)$.\n$$\n\\int x \\sin(nx) \\, dx = x \\left(-\\frac{\\cos(nx)}{n}\\right) - \\int \\left(-\\frac{\\cos(nx)}{n}\\right) \\, dx = -\\frac{x\\cos(nx)}{n} + \\frac{1}{n} \\int \\cos(nx) \\, dx\n$$\n$$\n= -\\frac{x\\cos(nx)}{n} + \\frac{\\sin(nx)}{n^2}\n$$\nNow, we evaluate the definite integral:\n$$\nb_n = \\frac{2}{\\pi} \\left[ -\\frac{x\\cos(nx)}{n} + \\frac{\\sin(nx)}{n^2} \\right]_{0}^{\\pi}\n$$\n$$\nb_n = \\frac{2}{\\pi} \\left( \\left( -\\frac{\\pi\\cos(n\\pi)}{n} + \\frac{\\sin(n\\pi)}{n^2} \\right) - \\left( 0 + 0 \\right) \\right)\n$$\nWe know that for any integer $n$, $\\sin(n\\pi) = 0$ and $\\cos(n\\pi) = (-1)^n$.\n$$\nb_n = \\frac{2}{\\pi} \\left( -\\frac{\\pi(-1)^n}{n} \\right) = -\\frac{2(-1)^n}{n} = \\frac{2(-1)(-1)^n}{n} = \\frac{2(-1)^{n+1}}{n}\n$$\n\n**Step 4: Assemble the Fourier series.**\nSubstitute the coefficients into the series formula:\n$$\nf(x) \\sim \\frac{0}{2} + \\sum_{n=1}^{\\infty} \\left[ 0 \\cdot \\cos(nx) + \\frac{2(-1)^{n+1}}{n} \\sin(nx) \\right]\n$$\n$$\nf(x) \\sim \\sum_{n=1}^{\\infty} \\frac{2(-1)^{n+1}}{n} \\sin(nx)\n$$\nThis can be written out as:\n$$\nf(x) \\sim 2 \\left( \\sin(x) - \\frac{1}{2}\\sin(2x) + \\frac{1}{3}\\sin(3x) - \\frac{1}{4}\\sin(4x) + \\dots \\right)\n$$\nThe required Fourier series is the final assembled expression.", "answer": "$$\n\\boxed{\\sum_{n=1}^{\\infty} \\frac{2(-1)^{n+1}}{n} \\sin(nx)}\n$$", "id": "8857"}, {"introduction": "Fourier series are not just for representing functions; they are powerful analytical tools. This exercise demonstrates how we can use a Fourier series to solve problems that are otherwise quite difficult, such as finding the exact value of an infinite mathematical sum. You will first derive the series for a symmetric triangular wave and then, by evaluating it at a cleverly chosen point, uncover the famous result for the sum of the reciprocals of the odd squares [@problem_id:8893].", "problem": "A periodic function $f(x)$ with period $2L$ can be represented by its Fourier series, provided it satisfies certain conditions (the Dirichlet conditions). The series is given by:\n$$f(x) \\sim \\frac{a_0}{2} + \\sum_{n=1}^{\\infty} \\left( a_n \\cos\\left(\\frac{n\\pi x}{L}\\right) + b_n \\sin\\left(\\frac{n\\pi x}{L}\\right) \\right)$$\nThe Fourier coefficients $a_0, a_n,$ and $b_n$ are calculated using the following formulas:\n$$a_0 = \\frac{1}{L} \\int_{-L}^{L} f(x) \\, dx$$\n$$a_n = \\frac{1}{L} \\int_{-L}^{L} f(x) \\cos\\left(\\frac{n\\pi x}{L}\\right) \\, dx \\quad (n \\ge 1)$$\n$$b_n = \\frac{1}{L} \\int_{-L}^{L} f(x) \\sin\\left(\\frac{n\\pi x}{L}\\right) \\, dx \\quad (n \\ge 1)$$\n\nConsider a triangular wave function defined on the interval $[-L, L]$ by\n$$f(x) = A\\left(1 - \\frac{|x|}{L}\\right)$$\nwhere $A$ and $L$ are positive constants. By first deriving the Fourier series for this function and then evaluating the resulting series at a judiciously chosen point, determine the exact value of the infinite sum:\n$$S = \\sum_{k=1}^{\\infty} \\frac{1}{(2k-1)^2} = 1 + \\frac{1}{3^2} + \\frac{1}{5^2} + \\dots$$", "solution": "Since $f(x)=A\\bigl(1-\\tfrac{|x|}{L}\\bigr)$ is even, $b_n=0$ and\n$$\na_n=\\frac{1}{L}\\int_{-L}^{L}f(x)\\cos\\frac{n\\pi x}{L}\\,dx\n=\\frac{2}{L}\\int_{0}^{L}A\\Bigl(1-\\frac{x}{L}\\Bigr)\\cos\\frac{n\\pi x}{L}\\,dx.\n$$\nSet $x=L t$, then\n$$\na_n=2A\\int_{0}^{1}(1-t)\\cos(n\\pi t)\\,dt.\n$$\nIntegrate by parts with $u=1-t$, $dv=\\cos(n\\pi t)dt$:\n$$\n\\int_{0}^{1}(1-t)\\cos(n\\pi t)\\,dt\n=\\frac{1}{n\\pi}\\int_{0}^{1}\\sin(n\\pi t)\\,dt\n=-\\frac{1}{n^2\\pi^2}\\bigl[(-1)^n-1\\bigr]\n=\\frac{1-(-1)^n}{n^2\\pi^2}.\n$$\nHence\n$$\na_n=\\frac{2A\\,(1-(-1)^n)}{n^2\\pi^2},\n$$\nwhich vanishes for even $n$, while for odd $n=2k-1$,\n$$\na_{2k-1}=\\frac{4A}{(2k-1)^2\\pi^2}.\n$$\nThe average value $a_0$ is given by $a_0 = \\frac{1}{L}\\int_{-L}^L A(1 - \\frac{|x|}{L}) dx = A$, so $\\frac{a_0}{2} = \\frac{A}{2}$.\nThus\n$$\nf(x)=\\frac{A}{2}+\\sum_{k=1}^{\\infty}\\frac{4A}{(2k-1)^2\\pi^2}\\cos\\frac{(2k-1)\\pi x}{L}.\n$$\nAt $x=0$, $f(0)=A$ and $\\cos0=1$, so\n$$\nA=\\frac{A}{2}+\\frac{4A}{\\pi^2}\\sum_{k=1}^{\\infty}\\frac{1}{(2k-1)^2}\n\\;\\Longrightarrow\\;\n\\frac{A}{2}=\\frac{4A}{\\pi^2}S\n\\;\\Longrightarrow\\;\nS=\\frac{\\pi^2}{8}.\n$$", "answer": "$$\\boxed{\\frac{\\pi^2}{8}}$$", "id": "8893"}, {"introduction": "In the real world, signals and functions often have sharp jumps or discontinuities. This practice bridges analytical theory with computational methods to explore how Fourier series behave at these points, a phenomenon critical in fields like signal processing. You will derive the series for a square wave and then write a program to visualize and quantify the Gibbs phenomenon—the characteristic 'overshoot' of the partial sums near a jump—verifying a famous constant in the process [@problem_id:3132915].", "problem": "Consider the $2\\pi$-periodic function $f(x)=\\mathrm{sgn}(\\sin x)$ defined by $f(x)=+1$ for $x\\in(0,\\pi)$ and $f(x)=-1$ for $x\\in(-\\pi,0)$, extended periodically, with the convention that values at the jump points are not needed for Fourier analysis. Starting from the foundational definitions of Fourier series for a $2\\pi$-periodic function $f$,\n$$a_0=\\frac{1}{\\pi}\\int_{-\\pi}^{\\pi} f(x)\\,dx,\\quad a_n=\\frac{1}{\\pi}\\int_{-\\pi}^{\\pi} f(x)\\cos(nx)\\,dx,\\quad b_n=\\frac{1}{\\pi}\\int_{-\\pi}^{\\pi} f(x)\\sin(nx)\\,dx,$$\nderive the sine-series coefficients and construct the $N$-term odd-harmonic partial sum $S_N(x)$ for $f(x)$, where $N$ denotes the number of odd harmonics retained. Angles must be in radians. Use only these base definitions to obtain $S_N(x)$; do not assume any pre-given Fourier coefficient formulas.\n\nDefine the Gibbs overshoot ratio near the jump at $x=0$ for a given $N$ by\n$$r_N=\\frac{\\max_{x\\in(0,\\pi)} S_N(x)-f(0^+)}{\\Delta f},$$\nwhere $f(0^+)=+1$ is the right-hand limit at the jump and $\\Delta f= f(0^+)-f(0^-)=2$ is the jump amplitude. Numerically estimate $r_N$ by locating the first local maximum of $S_N(x)$ in the interval $(0,\\pi/2)$; a robust approach is to evaluate $S_N(x)$ on a coarse grid to bracket the first local maximum and then refine the search on a denser subgrid within that bracket. Verify numerically that $r_N$ approaches the known Gibbs limiting overshoot constant $\\approx 0.08949$ as $N\\to\\infty$.\n\nYour program must:\n- Construct $S_N(x)$ from the derived Fourier coefficients using only odd harmonics.\n- Find the first local maximum of $S_N(x)$ in $(0,\\pi/2)$ by a two-stage grid search (coarse bracketing followed by local refinement).\n- Compute $r_N$ using the definition above, with angles in radians.\n\nTest suite:\n- Use $N\\in\\{1,3,25,200\\}$ to probe small, moderate, and large numbers of harmonics, including boundary behavior ($N=1$) and near-asymptotic behavior ($N=200$).\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order $[r_1,r_3,r_{25},r_{200},\\text{is\\_close}]$. The values $r_N$ must be rounded to $5$ decimal places. The final entry $\\text{is\\_close}$ must be a boolean indicating whether $|r_{200}-0.08949|\\leq 5\\times 10^{-4}$ holds. For example, the output must look like $[0.12345,0.06789,0.09123,0.08949,True]$.", "solution": "The problem asks for an analysis of the $2\\pi$-periodic function $f(x) = \\mathrm{sgn}(\\sin x)$. This function is defined as $f(x)=+1$ for $x \\in (0, \\pi)$ and $f(x)=-1$ for $x \\in (-\\pi, 0)$.\n\nFirst, we determine the Fourier coefficients $a_0$, $a_n$, and $b_n$ using the provided integral definitions. The function is odd, since for any $x$, $f(-x) = \\mathrm{sgn}(\\sin(-x)) = \\mathrm{sgn}(-\\sin x) = -\\mathrm{sgn}(\\sin x) = -f(x)$. The Fourier series of an odd function is a pure sine series, meaning all cosine coefficients, $a_0$ and $a_n$, must be zero. We verify this explicitly.\n\nThe coefficient $a_0$ is given by:\n$$a_0 = \\frac{1}{\\pi} \\int_{-\\pi}^{\\pi} f(x) \\, dx = \\frac{1}{\\pi} \\left( \\int_{-\\pi}^{0} (-1) \\, dx + \\int_{0}^{\\pi} (+1) \\, dx \\right) = \\frac{1}{\\pi} (-\\pi + \\pi) = 0$$\n\nThe coefficients $a_n$ for $n \\ge 1$ are zero because the integrand $f(x)\\cos(nx)$ is the product of an odd function and an even function, which is odd. The integral of an odd function over a symmetric interval like $[-\\pi, \\pi]$ is zero.\n\nThe sine coefficients $b_n$ for $n \\ge 1$ are given by:\n$$b_n = \\frac{1}{\\pi} \\int_{-\\pi}^{\\pi} f(x) \\sin(nx) \\, dx$$\nThe integrand is a product of two odd functions, so it is an even function.\n$$b_n = \\frac{2}{\\pi} \\int_{0}^{\\pi} f(x) \\sin(nx) \\, dx = \\frac{2}{\\pi} \\int_{0}^{\\pi} (1) \\sin(nx) \\, dx = \\frac{2}{\\pi} \\left[ -\\frac{\\cos(nx)}{n} \\right]_{0}^{\\pi}$$\n$$b_n = -\\frac{2}{n\\pi} [\\cos(n\\pi) - \\cos(0)] = \\frac{2}{n\\pi} (1 - \\cos(n\\pi))$$\nSince $\\cos(n\\pi) = (-1)^n$, the expression becomes:\n$$b_n = \\frac{2}{n\\pi} (1 - (-1)^n)$$\nIf $n$ is even, $b_n = 0$. If $n$ is odd, $n=2k-1$, then $b_{2k-1} = \\frac{2}{(2k-1)\\pi} (1 - (-1)) = \\frac{4}{(2k-1)\\pi}$.\n\nThe partial sum $S_N(x)$ retains the first $N$ odd harmonics ($k=1, \\dots, N$):\n$$S_N(x) = \\sum_{k=1}^{N} b_{2k-1} \\sin((2k-1)x) = \\frac{4}{\\pi} \\sum_{k=1}^{N} \\frac{\\sin((2k-1)x)}{2k-1}$$\n\nNext, we address the Gibbs overshoot ratio, $r_N$:\n$$r_N = \\frac{\\max_{x\\in(0,\\pi)} S_N(x) - f(0^+)}{\\Delta f} = \\frac{\\max_{x\\in(0,\\pi)} S_N(x) - 1}{2}$$\nTo find the maximum value of $S_N(x)$, we find where its derivative is zero:\n$$S_N'(x) = \\frac{d}{dx} \\left( \\frac{4}{\\pi} \\sum_{k=1}^{N} \\frac{\\sin((2k-1)x)}{2k-1} \\right) = \\frac{4}{\\pi} \\sum_{k=1}^{N} \\cos((2k-1)x)$$\nUsing the identity $\\sum_{k=1}^{N} \\cos((2k-1)x) = \\frac{\\sin(2Nx)}{2\\sin x}$, we have:\n$$S_N'(x) = \\frac{4}{\\pi} \\frac{\\sin(2Nx)}{2\\sin x} = \\frac{2 \\sin(2Nx)}{\\pi \\sin x}$$\nThe first positive root of $S_N'(x)=0$ occurs when $2Nx = \\pi$, so $x_{\\text{max}} = \\frac{\\pi}{2N}$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef s_n(x_vals, N):\n    \"\"\"\n    Calculates the N-term odd-harmonic partial sum of the Fourier series for sgn(sin(x)).\n    \n    Args:\n        x_vals (np.ndarray): An array of x values (in radians) at which to evaluate the sum.\n        N (int): The number of odd harmonics to include in the sum.\n        \n    Returns:\n        np.ndarray: The values of S_N(x) corresponding to each x in x_vals.\n    \"\"\"\n    # The sum is over k=1 to N for harmonics n=2k-1.\n    k = np.arange(1, N + 1)\n    n_harmonics = 2 * k - 1\n    \n    # Use broadcasting for an efficient vectorized calculation.\n    # x_vals shape: (M,) -> (M, 1)\n    # n_harmonics shape: (N,)\n    # Resulting shape of arg: (M, N)\n    x_col = x_vals[:, np.newaxis]\n    arg = x_col * n_harmonics\n    \n    # Perform the summation\n    terms = np.sin(arg) / n_harmonics\n    sum_val = np.sum(terms, axis=1)\n    \n    return (4 / np.pi) * sum_val\n\ndef calculate_r(N):\n    \"\"\"\n    Numerically estimates the Gibbs overshoot ratio r_N for a given N.\n\n    Args:\n        N (int): The number of odd harmonics.\n\n    Returns:\n        float: The estimated value of r_N.\n    \"\"\"\n    # Stage 1: Coarse grid search to bracket the first maximum in (0, pi/2).\n    # We use a small positive number for the start of the interval to avoid x=0.\n    coarse_grid = np.linspace(1e-9, np.pi / 2, 2000)\n    s_coarse = s_n(coarse_grid, N)\n    idx_max_coarse = np.argmax(s_coarse)\n\n    # Define the search bracket for the fine grid. Handle edge cases.\n    if idx_max_coarse == 0:\n        bracket_start = coarse_grid[0]\n        bracket_end = coarse_grid[1]\n    elif idx_max_coarse == len(coarse_grid) - 1:\n        bracket_start = coarse_grid[-2]\n        bracket_end = coarse_grid[-1]\n    else:\n        bracket_start = coarse_grid[idx_max_coarse - 1]\n        bracket_end = coarse_grid[idx_max_coarse + 1]\n\n    # Stage 2: Fine grid search within the bracket to find the maximum value.\n    fine_grid = np.linspace(bracket_start, bracket_end, 10000)\n    s_fine = s_n(fine_grid, N)\n    s_max = np.max(s_fine)\n\n    # Calculate the Gibbs overshoot ratio r_N.\n    # f(0^+) = 1.0, Delta_f = f(0^+) - f(0^-) = 1 - (-1) = 2.0\n    f0_plus = 1.0\n    delta_f = 2.0\n    r_N = (s_max - f0_plus) / delta_f\n    \n    return r_N\n\ndef solve():\n    \"\"\"\n    Main function to execute the problem, calculate r_N for the test suite,\n    and print the final results in the required format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [1, 3, 25, 200]\n\n    results = []\n    for N in test_cases:\n        r_val = calculate_r(N)\n        results.append(r_val)\n\n    # Format the r_N values to 5 decimal places.\n    formatted_results = [f\"{r:.5f}\" for r in results]\n    \n    # Check if r_200 is close to the theoretical Gibbs constant.\n    gibbs_constant = 0.08949\n    tolerance = 5e-4\n    r_200 = results[-1]\n    is_close = abs(r_200 - gibbs_constant) = tolerance\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)},{is_close}]\")\n\nsolve()\n```", "id": "3132915"}]}