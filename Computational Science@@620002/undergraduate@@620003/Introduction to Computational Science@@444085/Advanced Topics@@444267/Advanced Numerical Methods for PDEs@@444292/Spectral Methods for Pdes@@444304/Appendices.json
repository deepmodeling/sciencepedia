{"hands_on_practices": [{"introduction": "Many powerful sets of basis functions used in spectral methods, such as Chebyshev or Legendre polynomials, are most naturally defined on a standardized \"canonical\" domain, like the interval $[-1, 1]$. To apply these methods to problems in a physical domain, say $[a, b]$, our first step is often a coordinate transformation. This practice [@problem_id:2204881] guides you through this fundamental mapping, exploring how a simple linear change of variables transforms the original partial differential equation and sets the stage for numerical approximation.", "problem": "In the field of numerical analysis, it is common to solve a Partial Differential Equation (PDE) by first transforming it from its physical domain to a standardized computational domain. Consider the one-dimensional wave equation, which governs phenomena like the vibrations of a string:\n$$\n\\frac{\\partial^2 u}{\\partial t^2} = c^2 \\frac{\\partial^2 u}{\\partial x^2}\n$$\nHere, $u(x, t)$ represents the displacement at position $x$ and time $t$, and $c$ is a positive real constant representing the wave speed. The equation is defined on a physical domain given by the spatial interval $x \\in [a, b]$, where $a$ and $b$ are real-valued constants such that $a < b$.\n\nFor the application of many numerical methods, such as spectral methods, it is convenient to work on the canonical domain $\\xi \\in [-1, 1]$. We introduce a linear change of variables that maps the physical domain $[a, b]$ to the computational domain $[-1, 1]$. Let this transformation be denoted by $x = x(\\xi)$. The solution $u(x, t)$ in the original coordinates becomes a new function $v(\\xi, t)$ in the transformed coordinates.\n\nAfter applying this change of variables, the wave equation transforms into a new equation for $v(\\xi, t)$ of the form:\n$$\n\\frac{\\partial^2 v}{\\partial t^2} = K \\frac{\\partial^2 v}{\\partial \\xi^2}\n$$\nDetermine the expression for the coefficient $K$ in terms of the original parameters $a, b,$ and $c$.", "solution": "We map the physical interval $x \\in [a,b]$ to the computational interval $\\xi \\in [-1,1]$ by a linear function\n$$\nx(\\xi) = \\frac{b-a}{2}\\,\\xi + \\frac{a+b}{2},\n$$\nso that $x_{\\,\\xi} = \\frac{b-a}{2}$, a constant. Define $v(\\xi,t)$ by $v(\\xi,t) = u(x(\\xi),t)$. Since $t$ is unchanged, the time derivatives satisfy\n$$\nv_{t} = u_{t}, \\qquad v_{tt} = u_{tt}.\n$$\nFor spatial derivatives, apply the chain rule:\n$$\nv_{\\,\\xi} = u_{x}\\,x_{\\,\\xi} \\quad \\Longrightarrow \\quad u_{x} = \\frac{v_{\\,\\xi}}{x_{\\,\\xi}}.\n$$\nDifferentiate $u_{x}$ with respect to $x$ to obtain $u_{xx}$. Using $x_{\\,\\xi}$ constant and $\\xi_{\\,x} = \\frac{1}{x_{\\,\\xi}}$, we get\n$$\nu_{xx} = \\frac{\\partial}{\\partial x}\\left(u_{x}\\right) = \\frac{\\partial}{\\partial \\xi}\\left(\\frac{v_{\\,\\xi}}{x_{\\,\\xi}}\\right)\\,\\xi_{\\,x} = \\left(\\frac{v_{\\,\\xi\\xi}}{x_{\\,\\xi}}\\right)\\left(\\frac{1}{x_{\\,\\xi}}\\right) = \\frac{v_{\\,\\xi\\xi}}{x_{\\,\\xi}^{2}}.\n$$\nSubstituting into the original wave equation $u_{tt} = c^{2} u_{xx}$ yields\n$$\nv_{tt} = c^{2}\\,\\frac{v_{\\,\\xi\\xi}}{x_{\\,\\xi}^{2}}.\n$$\nComparing with the target form $v_{tt} = K\\,v_{\\,\\xi\\xi}$ gives\n$$\nK = \\frac{c^{2}}{x_{\\,\\xi}^{2}} = \\frac{c^{2}}{\\left(\\frac{b-a}{2}\\right)^{2}} = \\frac{4c^{2}}{(b-a)^{2}}.\n$$", "answer": "$$\\boxed{\\frac{4c^{2}}{(b-a)^{2}}}$$", "id": "2204881"}, {"introduction": "At its heart, a spectral Galerkin method works by projecting the continuous problem onto a finite-dimensional space spanned by a set of basis functions, and the accuracy of the solution is therefore fundamentally limited by what this chosen space can represent. This insightful problem [@problem_id:2204920] explores a scenario where a seemingly reasonable choice of basis functions leads to a completely incorrect result, revealing a core principle of projection methods: if the solution or forcing term is orthogonal to your basis, the method cannot \"see\" it.", "problem": "A numerical analyst is tasked with solving the one-dimensional Poisson equation, $u_{xx}(x) = f(x)$, on the domain $x \\in [0, 1]$, subject to homogeneous Dirichlet boundary conditions, $u(0)=0$ and $u(1)=0$. The specific forcing function for this problem is given by $f(x) = \\sin(8\\pi x)$.\n\nThe analyst chooses to use a spectral Galerkin method. They propose an approximate solution $u_N(x)$ as a finite linear combination of basis functions:\n$$u_N(x) = \\sum_{k=1}^{N} c_k \\phi_k(x)$$\nThe chosen basis functions are the sine eigenfunctions of the Laplacian on this domain, $\\phi_k(x) = \\sin(k\\pi x)$, which automatically satisfy the boundary conditions. For this particular attempt, the analyst sets the number of basis functions to $N=7$.\n\nThe core principle of the Galerkin method is to enforce that the residual of the equation, $R(x) = u_{N,xx}(x) - f(x)$, is orthogonal to every basis function in the chosen set. That is, $\\int_0^1 R(x) \\phi_j(x) dx = 0$ for all $j=1, 2, \\dots, N$. This procedure yields a system of linear equations for the unknown coefficients $c_k$.\n\nWhen the analyst implements this method with $N=7$, the computation returns a solution of $u_7(x) = 0$ for all $x$. This is clearly incorrect, as substituting $u(x)=0$ into the original differential equation yields $0 = \\sin(8\\pi x)$, which is not true.\n\nWhich of the following statements provides the correct fundamental reason for the failure of this specific numerical implementation?\n\nA. The forcing function $f(x)$ is orthogonal to every basis function in the set $\\{\\sin(k\\pi x)\\}_{k=1}^{7}$. Consequently, the projection of $f(x)$ onto the space spanned by these basis functions is zero, resulting in a computed trivial solution $u_7(x)=0$.\n\nB. The system of linear equations for the coefficients $c_k$ becomes singular because the determinant of the coefficient matrix is zero, indicating that the basis functions are not linearly independent.\n\nC. The sine basis is only appropriate for problems with even-indexed forcing functions, like $\\sin(2n\\pi x)$. The odd-indexed forcing function $\\sin(8\\pi x)$ (as $k=8$ is not a power of 2) requires a cosine basis.\n\nD. The chosen number of basis functions, $N=7$, is too small to resolve the oscillations of the forcing term. According to the Nyquist-Shannon sampling theorem, at least $2 \\times 8 = 16$ basis functions are required for a stable solution.\n\nE. The method fails because the boundary conditions $u(0)=u(1)=0$ are incompatible with a forcing function that is also zero at the boundaries. This creates an ill-posed problem.", "solution": "We consider the spectral Galerkin approximation with basis functions $\\phi_{k}(x)=\\sin(k\\pi x)$ for $k=1,\\dots,N$, here $N=7$. The approximate solution is $u_{N}(x)=\\sum_{k=1}^{N}c_{k}\\sin(k\\pi x)$, so its second derivative is\n$$\nu_{N,xx}(x)=\\sum_{k=1}^{N}c_{k}\\phi_{k}''(x)=\\sum_{k=1}^{N}c_{k}\\left(-k^{2}\\pi^{2}\\sin(k\\pi x)\\right).\n$$\nWith $f(x)=\\sin(8\\pi x)$ and residual $R(x)=u_{N,xx}(x)-f(x)$, the Galerkin conditions are\n$$\n\\int_{0}^{1}R(x)\\,\\sin(j\\pi x)\\,dx=0,\\quad j=1,\\dots,N.\n$$\nSubstituting $R$ gives\n$$\n\\int_{0}^{1}\\left(\\sum_{k=1}^{N}c_{k}\\left(-k^{2}\\pi^{2}\\sin(k\\pi x)\\right)-\\sin(8\\pi x)\\right)\\sin(j\\pi x)\\,dx=0.\n$$\nUsing the orthogonality relations\n$$\n\\int_{0}^{1}\\sin(k\\pi x)\\sin(j\\pi x)\\,dx=\\begin{cases}\n0,& j\\neq k,\\\\\n\\frac{1}{2},& j=k,\n\\end{cases}\n$$\neach Galerkin equation decouples to\n$$\n-\\,j^{2}\\pi^{2}c_{j}\\int_{0}^{1}\\sin^{2}(j\\pi x)\\,dx=\\int_{0}^{1}\\sin(8\\pi x)\\sin(j\\pi x)\\,dx,\\quad j=1,\\dots,7,\n$$\nthat is,\n$$\n-\\,j^{2}\\pi^{2}c_{j}\\left(\\frac{1}{2}\\right)=\\int_{0}^{1}\\sin(8\\pi x)\\sin(j\\pi x)\\,dx,\\quad j=1,\\dots,7.\n$$\nBy orthogonality, the right-hand side is zero for every $j=1,\\dots,7$, because $\\sin(8\\pi x)$ is orthogonal to $\\sin(j\\pi x)$ unless $j=8$. Therefore,\n$$\n-\\,j^{2}\\pi^{2}c_{j}\\left(\\frac{1}{2}\\right)=0\\quad\\Rightarrow\\quad c_{j}=0,\\quad j=1,\\dots,7,\n$$\nwhich yields $u_{7}(x)=0$.\n\nThis shows the fundamental cause: the forcing function lies entirely in the mode $k=8$, which is not contained in the span of $\\{\\sin(k\\pi x)\\}_{k=1}^{7}$. Consequently, its projection onto this subspace is zero, and the Galerkin system has zero right-hand side while the stiffness matrix is diagonal and invertible:\n$$\na_{jk}=\\int_{0}^{1}\\phi_{k}''(x)\\phi_{j}(x)\\,dx=\\int_{0}^{1}\\left(-k^{2}\\pi^{2}\\sin(k\\pi x)\\right)\\sin(j\\pi x)\\,dx=-\\,\\frac{1}{2}k^{2}\\pi^{2}\\,\\delta_{jk},\n$$\nso there is no singularity. If $N$ included $8$, one would obtain $c_{8}=-1/(8^{2}\\pi^{2})$ and recover the exact solution. The explanations invoking a cosine basis, Nyquist-Shannon sampling, or incompatibility with boundary conditions are incorrect for this boundary value problem. The correct choice is that the forcing is orthogonal to the chosen subspace.\n\nTherefore, the correct option is A.", "answer": "$$\\boxed{A}$$", "id": "2204920"}, {"introduction": "Moving from textbook examples to more realistic scientific problems often means tackling PDEs with multiple interacting physical processes and nonlinearities. This advanced practice [@problem_id:3196424] challenges you to build a complete solver for a reaction-diffusion equation, a model ubiquitous in chemistry, biology, and physics. You will synthesize Fourier spectral methods for the stiff diffusion term with operator splitting techniques to handle the nonlinear reaction, gaining hands-on experience in how modern numerical solvers are designed to be both efficient and accurate.", "problem": "Consider the reactionâ€“diffusion partial differential equation (PDE) on a periodic one-dimensional domain,\n$$\nu_t = D \\,\\Delta u + R(u), \\quad x \\in [0, 2\\pi), \\quad t \\in [0, T],\n$$\nwith periodic boundary conditions and initial condition\n$$\nu(x,0) = u_0(x).\n$$\nWork in the Fourier spectral collocation setting on $N$ equispaced grid points in $[0,2\\pi)$, and use the Fast Fourier Transform (FFT, Fast Fourier Transform) to represent the spatial derivatives. Take the Laplacian to be the second derivative with respect to $x$ on the periodic domain, so $\\Delta u = u_{xx}$. Assume the reaction term is the logistic nonlinearity,\n$$\nR(u) = \\alpha\\, u(1-u).\n$$\nThe task is to design a program that:\n- Constructs the spectral collocation discretization of the Laplacian using the Fourier basis and FFT, yielding a representation of the diffusion subflow that advances the system exactly in time for the diffusion-only subsystem.\n- Implements operator splitting to decouple diffusion and reaction by composing the diffusion subflow with the reaction subflow over a single time step. Implement both a first-order sequential composition (Lie splitting) and a second-order symmetric composition (Strang splitting), without relying on any pre-supplied formula in the problem statement.\n- For the reaction-only subsystem $u_t = \\alpha u(1-u)$, uses the exact analytical flow wherever possible and, for a comparison case, replaces the exact reaction subflow with a single-step explicit forward Euler integrator inside the symmetric composition, so that any observed accuracy degradation can be attributed to time integration of the nonlinear reaction subflow instead of the splitting structure.\n- Quantifies the error at final time $T$ relative to a high-accuracy reference solution obtained via symmetric operator splitting with exact subflows and a very small time step, using the discrete $L^2$ norm on the grid. Uses a logâ€“log slope of error versus time step to estimate the empirical order of accuracy.\n- Separates the error attributable to operator splitting from error attributable to time integration of the reaction subflow by comparing the estimated orders between the exact-subflow schemes and the inexact reaction integration case.\n\nFoundational base and definitions you must start from:\n- Fourier spectral collocation on a periodic interval: representing $u(x,t)$ by its truncated Fourier series on $N$ grid points and using FFT to map between physical and spectral space.\n- The linear diffusion-only subsystem in spectral space decouples per Fourier mode and is analytically solvable in time.\n- The reaction-only subsystem with $R(u) = \\alpha u(1-u)$ is a scalar ordinary differential equation at each grid point that admits a closed-form solution.\n- Operator splitting composes subflows of subsystems to approximate the full flow when subsystems cannot be solved simultaneously in closed-form.\n\nAlgorithmic and numerical details to enforce:\n- Domain length $L = 2\\pi$, number of grid points $N$ specified for each test, spacing $\\Delta x = L/N$.\n- Wavenumbers $k_j$ constructed consistently with FFT conventions for the periodic interval of length $L$, and the diffusion-only subflow advances Fourier modes by a multiplicative factor depending on $D$, $k_j$, and the time step.\n- For the reaction-only subsystem, use the exact analytical solution\n$$\nu(t+\\Delta t) = \\frac{u(t)\\, e^{\\alpha \\Delta t}}{1 + u(t)\\, \\left(e^{\\alpha \\Delta t}-1\\right)}\n$$\nin the exact-subflow cases.\n- The discrete $L^2$ error at final time $T$ must be computed as\n$$\n\\|e\\|_{L^2} = \\left( \\sum_{j=0}^{N-1} \\left(u_j^{\\text{approx}} - u_j^{\\text{ref}}\\right)^2 \\,\\Delta x \\right)^{1/2}.\n$$\n- The empirical order $p$ must be computed by a least-squares fit of $\\log(\\|e\\|_{L^2})$ versus $\\log(\\Delta t)$ across the provided time step set.\n\nTest suite:\nUse the following parameter sets and report the requested quantities. For all tests, use initial condition\n$$\nu_0(x) = 0.25 + 0.5 \\sin(x) + 0.25 \\cos(2x),\n$$\non $x \\in [0, 2\\pi)$ sampled at $N$ points. Final time is $T = 0.5$. All angles are in radians. Unless stated otherwise, dimensional parameters are considered dimensionless.\n\n- Test 1 (first-order splitting accuracy): $D = 1.0$, $\\alpha = 4.0$, $N = 128$, time steps $\\Delta t \\in \\{0.1, 0.05, 0.025, 0.0125\\}$. Use first-order sequential operator splitting with exact diffusion and exact reaction subflows. Compute the empirical order $p_{\\text{Lie}}$.\n- Test 2 (second-order splitting accuracy): Same parameters as Test $1$. Use second-order symmetric operator splitting with exact diffusion and exact reaction subflows. Compute the empirical order $p_{\\text{Strang}}$.\n- Test 3 (time integration error effect): Same parameters as Test $1$. Use second-order symmetric operator splitting, but replace the reaction subflows by single-step explicit forward Euler updates over the half time step in each subflow. Compute the empirical order $p_{\\text{Strang-Euler}}$.\n- Test 4 (boundary case, pure reaction): $D = 0.0$, $\\alpha = 4.0$, $N = 128$, a single time step $\\Delta t = 0.1$. Use second-order symmetric operator splitting with exact reaction subflows (diffusion is inactive). Compare the final-time solution to a high-accuracy reference obtained with the same scheme and a very small reference step $\\Delta t_{\\text{ref}} = 0.001$. Report a boolean indicating whether the discrete $L^2$ error is less than $10^{-10}$.\n\nReference solution construction:\n- For Tests $1$â€“$3$, construct the reference solution using second-order symmetric operator splitting with exact subflows and $\\Delta t_{\\text{ref}} = 0.001$.\n- For Test $4$, construct the reference solution using the same scheme (second-order symmetric operator splitting with exact reaction subflows) and $\\Delta t_{\\text{ref}} = 0.001$.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order\n$$\n[p_{\\text{Lie}}, p_{\\text{Strang}}, p_{\\text{Strang-Euler}}, \\text{boolean}],\n$$\nwhere $p_{\\text{Lie}}$, $p_{\\text{Strang}}$, and $p_{\\text{Strang-Euler}}$ are floats rounded to six decimal places and the boolean is either True or False.", "solution": "The problem presented is a standard exercise in computational science, focusing on the numerical solution of a reaction-diffusion PDE using spectral methods and operator splitting. The problem is well-posed, scientifically sound, and all necessary parameters and definitions are provided. It requires the implementation and comparison of different numerical schemes to analyze their accuracy. The problem is therefore deemed valid.\n\n### Principle-Based Solution Design\n\nThe partial differential equation (PDE) under consideration is the reaction-diffusion equation:\n$$\nu_t = D \\,\\Delta u + R(u), \\quad x \\in [0, 2\\pi)\n$$\nwhere $u_t = \\frac{\\partial u}{\\partial t}$ and the Laplacian is $\\Delta u = u_{xx} = \\frac{\\partial^2 u}{\\partial x^2}$. The reaction term is given by the logistic function $R(u) = \\alpha u(1-u)$. The problem is defined on a periodic domain with a given initial condition $u(x,0) = u_0(x)$.\n\nThe core idea of operator splitting is to decompose the full problem, which is difficult to solve analytically, into simpler subproblems that can be solved exactly or with high accuracy. The full evolution operator $\\Phi_{\\Delta t}^{\\text{Full}}$ that advances the solution by a time step $\\Delta t$ is approximated by composing the evolution operators of the subsystems. Let the full operator be $\\mathcal{L} = \\mathcal{L}_D + \\mathcal{L}_R$, where $\\mathcal{L}_D = D \\Delta$ is the diffusion operator and $\\mathcal{L}_R(u) = \\alpha u(1-u)$ is the reaction operator.\n\n#### 1. Discretization and Subsystem Flows\n\nWe discretize the spatial domain $[0, 2\\pi)$ using $N$ equispaced grid points $x_j = j \\frac{2\\pi}{N}$ for $j=0, 1, \\dots, N-1$. A function $u(x,t)$ is represented by its values $u_j(t) = u(x_j, t)$ on this grid.\n\n**Diffusion Subsystem: $u_t = D u_{xx}$**\nThis linear PDE is most effectively solved in Fourier space. A function $u(x)$ on the periodic domain can be represented by its Fourier series. On the discrete grid, this corresponds to the Discrete Fourier Transform (DFT), which can be computed efficiently using the Fast Fourier Transform (FFT). The solution vector $u = (u_0, \\dots, u_{N-1})$ is transformed to its spectral representation $\\hat{u} = \\mathcal{F}(u)$.\n\nThe second spatial derivative $u_{xx}$ is transformed to multiplication by $(i k)^2 = -k^2$ in Fourier space, where $k$ represents the wavenumber. For a domain of length $L=2\\pi$ and $N$ points, the integer wavenumbers are given by $k = N \\times \\texttt{scipy.fft.fftfreq}(N)$. The diffusion equation in Fourier space becomes a set of uncoupled ordinary differential equations (ODEs) for each Fourier mode $\\hat{u}_k$:\n$$\n\\frac{d\\hat{u}_k}{dt} = -D k^2 \\hat{u}_k\n$$\nThis ODE has an exact solution over a time step $\\Delta t$:\n$$\n\\hat{u}_k(t+\\Delta t) = \\hat{u}_k(t) \\, e^{-D k^2 \\Delta t}\n$$\nThe diffusion subflow, $\\Phi_{\\Delta t}^{\\text{Diffusion}}$, is therefore implemented as a three-step process:\n1.  Transform the solution $u$ to spectral space: $\\hat{u} = \\text{FFT}(u)$.\n2.  Multiply each mode $\\hat{u}_k$ by the factor $e^{-D k^2 \\Delta t}$.\n3.  Transform back to physical space: $u_{\\text{new}} = \\text{IFFT}(\\hat{u}_{\\text{new}})$.\nSince this flow is based on the analytical solution, it is exact for the diffusion-only subsystem and is unconditionally stable.\n\n**Reaction Subsystem: $u_t = \\alpha u(1-u)$**\nThis subsystem consists of $N$ uncoupled logistic ODEs, one for each grid point $u_j$:\n$$\n\\frac{du_j}{dt} = \\alpha u_j(1-u_j)\n$$\nThis ODE is separable and has a known analytical solution. Given $u(t)$, the solution at $t+\\Delta t$ is:\n$$\nu(t+\\Delta t) = \\frac{u(t)\\, e^{\\alpha \\Delta t}}{1 + u(t)\\, (e^{\\alpha \\Delta t}-1)}\n$$\nThe exact reaction subflow, $\\Phi_{\\Delta t}^{\\text{Reaction}}$, applies this update element-wise to the solution vector $u$. For one of the test cases, this exact flow is replaced by a single step of the explicit forward Euler method:\n$$\nu(t+\\Delta t) = u(t) + \\Delta t \\cdot (\\alpha u(t)(1 - u(t)))\n$$\n\n#### 2. Operator Splitting Schemes\n\nOperator splitting methods approximate the flow of the combined system $\\exp((\\mathcal{L}_D + \\mathcal{L}_R)\\Delta t)$ by a composition of the individual subflows.\n\n**First-Order Lie Splitting:**\nThis is the simplest splitting scheme, where the subflows are applied sequentially:\n$$\n\\Phi_{\\Delta t}^{\\text{Lie}}(u) = \\Phi_{\\Delta t}^{\\text{Reaction}} \\circ \\Phi_{\\Delta t}^{\\text{Diffusion}}(u)\n$$\nBy comparing the Taylor series expansion of this composition with the exact solution operator, we find that they match up to the $O(\\Delta t)$ term. The local truncation error is $O(\\Delta t^2)$, which results in a global error of $O(\\Delta t)$ over a fixed time interval $T$. Thus, the method is first-order accurate.\n\n**Second-Order Strang Splitting:**\nA more accurate, symmetric composition is given by Strang splitting:\n$$\n\\Phi_{\\Delta t}^{\\text{Strang}}(u) = \\Phi_{\\Delta t/2}^{\\text{Reaction}} \\circ \\Phi_{\\Delta t}^{\\text{Diffusion}} \\circ \\Phi_{\\Delta t/2}^{\\text{Reaction}}(u)\n$$\nThis symmetric composition cancels the leading error term of the Lie splitting. The local truncation error is $O(\\Delta t^3)$, leading to a global error of $O(\\Delta t^2)$. This scheme is second-order accurate, provided the subflows are computed exactly.\n\n**Strang Splitting with Euler Integrator (Strang-Euler):**\nIn this case, the exact reaction subflow $\\Phi_{\\Delta t/2}^{\\text{Reaction}}$ is replaced by a one-step forward Euler approximation, which has a local error of $O((\\Delta t/2)^2) = O(\\Delta t^2)$. This error introduced by the numerical integration of the reaction term is larger than the $O(\\Delta t^3)$ splitting error. The dominant local error becomes $O(\\Delta t^2)$, which degrades the global accuracy of the overall scheme to first order, $O(\\Delta t)$. Comparing the accuracy of this scheme to the standard Strang splitting allows us to isolate the error contribution from the inexact time integration of the nonlinear part.\n\n#### 3. Error Analysis\n\nTo quantify the accuracy of these schemes, we compute an empirical order of convergence, $p$. We run simulations for a set of decreasing time steps $\\Delta t_i$ and compute the error $\\|e_i\\|_{L^2}$ against a high-accuracy reference solution. The error is expected to follow the power law $\\|e\\| \\approx C (\\Delta t)^p$. Taking the logarithm gives a linear relationship:\n$$\n\\log(\\|e\\|) \\approx \\log(C) + p \\log(\\Delta t)\n$$\nThe order $p$ is the slope of this line, which can be estimated via a linear least-squares fit to the data points $(\\log(\\Delta t_i), \\log(\\|e_i\\|_{L^2}))$. The discrete $L^2$ error is computed as specified:\n$$\n\\|e\\|_{L^2} = \\left( \\sum_{j=0}^{N-1} \\left(u_j^{\\text{approx}} - u_j^{\\text{ref}}\\right)^2 \\,\\Delta x \\right)^{1/2}\n$$\n\n#### 4. Test Case Execution\n\n-   **Tests 1-3:** A high-accuracy reference solution is generated using Strang splitting with exact subflows and a very small time step, $\\Delta t_{\\text{ref}}=0.001$. For each of the three schemes (Lie, Strang, Strang-Euler), simulations are run for a series of time steps $\\Delta t$. The $L^2$ error is computed at the final time $T=0.5$ for each $\\Delta t$. The empirical order of accuracy is then calculated from these results. We expect $p_{\\text{Lie}} \\approx 1$, $p_{\\text{Strang}} \\approx 2$, and $p_{\\text{Strang-Euler}} \\approx 1$.\n-   **Test 4:** This case sets the diffusion coefficient $D=0$, effectively turning off the diffusion operator. The diffusion subflow becomes the identity operator. The Strang splitting scheme $\\Phi_{\\Delta t/2}^{\\text{Reaction}} \\circ I \\circ \\Phi_{\\Delta t/2}^{\\text{Reaction}}$ simplifies to $\\Phi_{\\Delta t}^{\\text{Reaction}}$ due to the group property of the exact flow. This means that advancing the solution over any number of steps using this \"splitting\" scheme is equivalent to applying a single exact reaction flow over the total time. Consequently, the solution computed with a large step $\\Delta t$ should be identical (to machine precision) to the reference solution computed with many small steps $\\Delta t_{\\text{ref}}$. The error is expected to be near zero.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.fft import fft, ifft, fftfreq\n\ndef solve():\n    \"\"\"\n    Solves the reaction-diffusion problem using operator splitting methods\n    and computes the empirical orders of accuracy.\n    \"\"\"\n\n    def reaction_flow_exact(u, dt, alpha):\n        \"\"\"Advances the reaction part u_t = alpha*u*(1-u) by dt using the exact solution.\"\"\"\n        exp_at = np.exp(alpha * dt)\n        return (u * exp_at) / (1.0 + u * (exp_at - 1.0))\n\n    def reaction_flow_euler(u, dt, alpha):\n        \"\"\"Advances the reaction part using one forward Euler step.\"\"\"\n        return u + dt * (alpha * u * (1.0 - u))\n\n    def diffusion_flow_exact(u, dt, D, k_sq):\n        \"\"\"Advances the diffusion part u_t = D*u_xx by dt exactly in Fourier space.\"\"\"\n        u_hat = fft(u)\n        u_hat_new = u_hat * np.exp(-D * k_sq * dt)\n        return np.real(ifft(u_hat_new))\n\n    def run_simulation(params, dt, method):\n        \"\"\"\n        Runs a simulation for given parameters, time step, and method.\n        'method' can be 'lie', 'strang', 'strang-euler'.\n        \"\"\"\n        D = params['D']\n        alpha = params['alpha']\n        N = params['N']\n        T = params['T']\n        u0 = params['u0']\n        k_sq = params['k_sq']\n\n        u = np.copy(u0)\n        num_steps = int(round(T / dt))\n\n        if method == 'lie':\n            for _ in range(num_steps):\n                u = diffusion_flow_exact(u, dt, D, k_sq)\n                u = reaction_flow_exact(u, dt, alpha)\n        elif method == 'strang':\n            for _ in range(num_steps):\n                u = reaction_flow_exact(u, dt / 2.0, alpha)\n                u = diffusion_flow_exact(u, dt, D, k_sq)\n                u = reaction_flow_exact(u, dt / 2.0, alpha)\n        elif method == 'strang-euler':\n            for _ in range(num_steps):\n                u = reaction_flow_euler(u, dt / 2.0, alpha)\n                u = diffusion_flow_exact(u, dt, D, k_sq)\n                u = reaction_flow_euler(u, dt / 2.0, alpha)\n        else:\n            raise ValueError(\"Unknown method.\")\n        \n        return u\n\n    def compute_l2_error(u_approx, u_ref, dx):\n        \"\"\"Computes the discrete L2 error.\"\"\"\n        return np.sqrt(np.sum((u_approx - u_ref)**2) * dx)\n\n    def compute_order(dts, errors):\n        \"\"\"Computes empirical order of convergence from log-log fit.\"\"\"\n        log_dts = np.log(dts)\n        log_errors = np.log(errors)\n        A = np.vstack([log_dts, np.ones(len(log_dts))]).T\n        slope, _ = np.linalg.lstsq(A, log_errors, rcond=None)[0]\n        return slope\n\n\n    # Shared parameters for tests 1-3\n    D_123 = 1.0\n    alpha_123 = 4.0\n    N = 128\n    T = 0.5\n    L = 2.0 * np.pi\n    dx = L / N\n    \n    x = np.arange(N) * dx\n    u0 = 0.25 + 0.5 * np.sin(x) + 0.25 * np.cos(2 * x)\n    \n    # Wavenumbers squared for the spectral diffusion part\n    # k must be integer wavenumbers for domain [0, 2pi)\n    k = N * fftfreq(N)\n    k_sq = k**2\n    \n    # Time steps for accuracy tests\n    dts = np.array([0.1, 0.05, 0.025, 0.0125])\n    \n    params_123 = {\n        'D': D_123, 'alpha': alpha_123, 'N': N,\n        'T': T, 'u0': u0, 'k_sq': k_sq, 'dx': dx\n    }\n\n    # Reference solution for Tests 1-3\n    dt_ref = 0.001\n    u_ref_123 = run_simulation(params_123, dt_ref, 'strang')\n\n    results = []\n\n    # Test 1: First-order Lie splitting\n    errors_lie = []\n    for dt in dts:\n        u_approx = run_simulation(params_123, dt, 'lie')\n        errors_lie.append(compute_l2_error(u_approx, u_ref_123, dx))\n    p_lie = compute_order(dts, errors_lie)\n    results.append(p_lie)\n\n    # Test 2: Second-order Strang splitting\n    errors_strang = []\n    for dt in dts:\n        u_approx = run_simulation(params_123, dt, 'strang')\n        errors_strang.append(compute_l2_error(u_approx, u_ref_123, dx))\n    p_strang = compute_order(dts, errors_strang)\n    results.append(p_strang)\n\n    # Test 3: Strang splitting with Euler for reaction\n    errors_strang_euler = []\n    for dt in dts:\n        u_approx = run_simulation(params_123, dt, 'strang-euler')\n        errors_strang_euler.append(compute_l2_error(u_approx, u_ref_123, dx))\n    p_strang_euler = compute_order(dts, errors_strang_euler)\n    results.append(p_strang_euler)\n\n    # Test 4: Boundary case, pure reaction\n    params_4 = {\n        'D': 0.0, 'alpha': 4.0, 'N': N, \n        'T': T, 'u0': u0, 'k_sq': k_sq, 'dx': dx\n    }\n    dt_4 = 0.1\n    u_approx_4 = run_simulation(params_4, dt_4, 'strang')\n    u_ref_4 = run_simulation(params_4, dt_ref, 'strang')\n    error_4 = compute_l2_error(u_approx_4, u_ref_4, dx)\n    is_error_small = error_4  1e-10\n    results.append(is_error_small)\n\n    # Final print statement in the exact required format.\n    print(f\"[{results[0]:.6f},{results[1]:.6f},{results[2]:.6f},{results[3]}]\")\n\nsolve()\n```", "id": "3196424"}]}