{"hands_on_practices": [{"introduction": "This first practice grounds your understanding in the fundamentals by guiding you through the derivation of the Lax-Wendroff scheme from a Taylor series expansion. After deriving the method, you will immediately investigate a subtle but important aspect of its behavior: the sensitivity of numerical oscillations to how a sharp discontinuity aligns with the computational grid. This exercise reveals that the practical results of a simulation can depend on the fine details of the initial discretization, a crucial lesson in computational science [@problem_id:3151778].", "problem": "Consider the one-dimensional linear advection equation with constant wave speed,\n$$u_t + a\\,u_x = 0,$$\non a periodic domain of length $$L$$. Let the spatial grid be uniform with $$N$$ nodes at positions $$x_j = j\\,\\Delta x$$ for $$j=0,1,\\dots,N-1$$ and $$\\Delta x = L/N$$, and let time be advanced with time step $$\\Delta t$$ such that the Courant–Friedrichs–Lewy (CFL) number $$\\lambda = a\\,\\Delta t/\\Delta x$$ satisfies $$|\\lambda|\\le 1$$. You will derive and implement a second-order, explicit numerical method based on a Taylor expansion in time and centered spatial finite differences to approximate the solution. Then, you will quantify the sensitivity of dispersive oscillations to the initial alignment of a discontinuity by comparing two initial conditions that differ only by a half-cell spatial shift.\n\nTasks:\n\n1) Starting from the governing partial differential equation and the second-order Taylor expansion in time,\n$$u(x,t+\\Delta t) = u(x,t) + \\Delta t\\,u_t(x,t) + \\tfrac{1}{2}\\,\\Delta t^2\\,u_{tt}(x,t) + \\mathcal{O}(\\Delta t^3),$$\nand using the identities implied by the equation, $$u_t = -a\\,u_x$$ and $$u_{tt} = a^2\\,u_{xx},$$ derive a fully discrete explicit method that updates $$u_j^n \\approx u(x_j, n\\,\\Delta t)$$ using centered finite differences for $$u_x$$ and $$u_{xx}$$ on the grid. Use periodic boundary conditions so that any index operations that require $$j\\pm 1$$ at the boundaries wrap around the interval.\n\n2) Implement the derived method to advance solutions from time $$t=0$$ to time $$t \\approx T$$ as follows. Given $$L$$, $$a$$, $$N$$, and the CFL number $$\\lambda = a\\,\\Delta t/\\Delta x$$, set $$\\Delta x = L/N$$ and $$\\Delta t = \\lambda\\,\\Delta x/a$$. Use $$N_t = \\lfloor T/\\Delta t \\rfloor$$ time steps so that the simulated time is $$N_t\\,\\Delta t \\le T$$. Use periodic boundary conditions on the discrete grid.\n\n3) Define a square-wave initial condition with amplitude $$1$$ on an interval of width $$w$$ and amplitude $$0$$ elsewhere, with periodic wrap on $$[0,L)$$. More precisely, for a chosen offset $$x_0 \\in [0,L)$$, set\n$$\nu(x,0) =\n\\begin{cases}\n1, & \\text{if } ((x - x_0) \\bmod L) \\in [0,w),\\\\\n0, & \\text{otherwise}.\n\\end{cases}\n$$\nConstruct two initial conditions that differ only by the alignment of the discontinuity relative to the grid:\n- Integer-cell alignment: choose $$x_0 = 0$$.\n- Half-cell shift: choose $$x_0 = \\tfrac{1}{2}\\,\\Delta x$$.\n\n4) After advancing the numerical solution to $$t \\approx T$$, quantify the amplitude of dispersive oscillations using the maximum violation of the physical range $$[0,1]$$. Define the oscillation amplitude\n$$\nA(u) = \\max\\Big( \\max_j(u_j) - 1,\\; -\\min_j(u_j),\\; 0 \\Big).\n$$\nFor each parameter set, compute the difference\n$$\n\\Delta A = A(u^{\\text{half-shift}}) - A(u^{\\text{aligned}}),\n$$\nwhere $$u^{\\text{half-shift}}$$ and $$u^{\\text{aligned}}$$ are the numerical solutions at time $$t \\approx T$$ produced from the half-cell-shifted and integer-cell-aligned initial conditions, respectively.\n\n5) Use the following test suite of parameter sets, each specified as $$(N,\\lambda,T,w/L)$$ with the fixed choices $$L=1$$ and $$a=1$$:\n- Test $$1$$ (happy path): $$(200,\\,0.5,\\,0.3,\\,0.25)$$.\n- Test $$2$$ (near stability limit): $$(200,\\,0.95,\\,0.3,\\,0.25)$$.\n- Test $$3$$ (boundary case $$\\lambda=1$$): $$(200,\\,1.0,\\,0.3,\\,0.25)$$.\n- Test $$4$$ (coarse grid): $$(40,\\,0.5,\\,0.3,\\,0.25)$$.\n\nYour program must implement the method you derived, run both alignments for each test, compute $$\\Delta A$$ for each test, and output the results.\n\nFinal output format requirement:\nYour program should produce a single line of output containing the results as a comma-separated list of floating-point numbers rounded to six decimal places and enclosed in square brackets, for example,\n$$[x_1,x_2,x_3,x_4]$$\nwhere $$x_k$$ is the value of $$\\Delta A$$ for test $$k$$, rounded to six decimal places.", "solution": "The user wants to solve a problem on numerical methods, specifically the Lax-Wendroff scheme for the 1D linear advection equation. I must first validate the problem statement, then derive the scheme, and finally implement it to analyze the effect of initial condition alignment on dispersive oscillations.\n\n### Problem Validation\n\n**Step 1: Extract Givens**\n\n- **Governing Equation**: $u_t + a\\,u_x = 0$.\n- **Domain**: Periodic, length $L$.\n- **Spatial Grid**: Uniform, $N$ nodes, $x_j = j\\,\\Delta x$ for $j=0,1,\\dots,N-1$, with $\\Delta x = L/N$.\n- **Time Discretization**: Time step $\\Delta t$, with Courant–Friedrichs–Lewy (CFL) number $\\lambda = a\\,\\Delta t/\\Delta x$ and $|\\lambda|\\le 1$.\n- **Taylor Expansion**: $u(x,t+\\Delta t) = u(x,t) + \\Delta t\\,u_t(x,t) + \\tfrac{1}{2}\\,\\Delta t^2\\,u_{tt}(x,t) + \\mathcal{O}(\\Delta t^3)$.\n- **Identities**: $u_t = -a\\,u_x$ and $u_{tt} = a^2\\,u_{xx}$.\n- **Numerical Update**: $u_j^n \\approx u(x_j, n\\,\\Delta t)$ using an explicit method based on centered finite differences for $u_x$ and $u_{xx}$ with periodic boundary conditions.\n- **Simulation Setup**: Given $L, a, N, \\lambda, T$, calculate $\\Delta x = L/N$, $\\Delta t = \\lambda\\,\\Delta x/a$, and number of steps $N_t = \\lfloor T/\\Delta t \\rfloor$.\n- **Initial Condition**: A square wave, $u(x,0) = 1$ if $((x - x_0) \\bmod L) \\in [0,w)$, and $u(x,0)=0$ otherwise.\n- **Initial Condition Alignments**:\n    1.  Integer-cell alignment: $x_0 = 0$.\n    2.  Half-cell shift: $x_0 = \\tfrac{1}{2}\\,\\Delta x$.\n- **Oscillation Metric**: $A(u) = \\max\\Big( \\max_j(u_j) - 1,\\; -\\min_j(u_j),\\; 0 \\Big)$.\n- **Comparison Metric**: $\\Delta A = A(u^{\\text{half-shift}}) - A(u^{\\text{aligned}})$.\n- **Fixed Parameters**: $L=1, a=1$.\n- **Test Cases** $(N,\\lambda,T,w/L)$:\n    1.  $(200,\\,0.5,\\,0.3,\\,0.25)$\n    2.  $(200,\\,0.95,\\,0.3,\\,0.25)$\n    3.  $(200,\\,1.0,\\,0.3,\\,0.25)$\n    4.  $(40,\\,0.5,\\,0.3,\\,0.25)$\n\n**Step 2: Validate Using Extracted Givens**\n\n- **Scientifically Grounded**: The problem is fundamentally sound. It involves the derivation and application of the Lax-Wendroff method, a cornerstone second-order scheme for hyperbolic partial differential equations. All concepts used—the advection equation, Taylor series expansion, finite differences, CFL stability condition, and the analysis of dispersive error—are standard topics in numerical analysis and computational science.\n- **Well-Posed**: The problem is unambiguously specified. The governing equation, domain, boundary conditions, initial conditions, discretization strategy, and analysis metrics are all defined with mathematical precision. The stability condition $|\\lambda| \\le 1$ for the Lax-Wendroff scheme is correctly stated, ensuring that a stable numerical solution can be obtained.\n- **Objective**: The problem is stated in objective, formal language. It relies on mathematical definitions and numerical parameters, leaving no room for subjective interpretation.\n- **Other Flaws Check**: The problem does not violate any of the invalidity criteria. It is complete, consistent, computationally feasible, and directly relevant to the specified topic. The comparison between aligned and shifted initial conditions is a classic method to probe the properties of a numerical scheme, particularly its dispersive error characteristics.\n\n**Step 3: Verdict and Action**\n\nThe problem is **valid**. A complete solution will now be provided.\n\n### Principle-Based Solution\n\n**1. Derivation of the Lax-Wendroff Scheme**\n\nThe objective is to derive a discrete update rule for $u_j^{n+1}$ that approximates the solution to the advection equation $u_t + a\\,u_x = 0$. The derivation starts from a second-order Taylor expansion in time:\n$$\nu(x,t+\\Delta t) = u(x,t) + \\Delta t\\,u_t(x,t) + \\frac{1}{2}\\Delta t^2\\,u_{tt}(x,t) + \\mathcal{O}(\\Delta t^3)\n$$\nThe core idea of the Lax-Wendroff method is to replace the time derivatives $u_t$ and $u_{tt}$ with spatial derivatives using the governing PDE itself.\n\nFrom the PDE, we have the first time derivative:\n$$\nu_t = -a\\,u_x\n$$\nTo find the second time derivative, we differentiate the above expression with respect to time:\n$$\nu_{tt} = \\frac{\\partial}{\\partial t}(-a\\,u_x) = -a\\,\\frac{\\partial}{\\partial t}(u_x)\n$$\nAssuming sufficient smoothness, we can commute the partial derivatives:\n$$\nu_{tt} = -a\\,\\frac{\\partial}{\\partial x}(u_t)\n$$\nNow, we substitute $u_t = -a\\,u_x$ again:\n$$\nu_{tt} = -a\\,\\frac{\\partial}{\\partial x}(-a\\,u_x) = a^2\\,u_{xx}\n$$\nSubstituting these expressions for $u_t$ and $u_{tt}$ back into the Taylor expansion yields a semi-discrete scheme (continuous in space, discrete in time):\n$$\nu(x,t+\\Delta t) = u(x,t) - a\\,\\Delta t\\,u_x(x,t) + \\frac{1}{2}(a\\,\\Delta t)^2\\,u_{xx}(x,t) + \\mathcal{O}(\\Delta t^3)\n$$\nTo obtain a fully discrete scheme, we evaluate this equation on the grid points $x_j$ and replace the spatial derivatives with their second-order centered finite difference approximations. Let $u_j^n = u(x_j, n\\Delta t)$:\n$$\nu_x(x_j, t_n) \\approx \\frac{u_{j+1}^n - u_{j-1}^n}{2\\,\\Delta x}\n$$\n$$\nu_{xx}(x_j, t_n) \\approx \\frac{u_{j+1}^n - 2u_j^n + u_{j-1}^n}{(\\Delta x)^2}\n$$\nSubstituting these into the semi-discrete equation gives the update rule for $u_j^{n+1}$:\n$$\nu_j^{n+1} = u_j^n - a\\,\\Delta t \\left( \\frac{u_{j+1}^n - u_{j-1}^n}{2\\,\\Delta x} \\right) + \\frac{1}{2}(a\\,\\Delta t)^2 \\left( \\frac{u_{j+1}^n - 2u_j^n + u_{j-1}^n}{(\\Delta x)^2} \\right)\n$$\nThis equation can be simplified by introducing the dimensionless CFL number, $\\lambda = a\\,\\Delta t/\\Delta x$:\n$$\nu_j^{n+1} = u_j^n - \\frac{\\lambda}{2}(u_{j+1}^n - u_{j-1}^n) + \\frac{\\lambda^2}{2}(u_{j+1}^n - 2u_j^n + u_{j-1}^n)\n$$\nThis is the explicit, fully discrete Lax-Wendroff scheme. It is second-order accurate in both space and time, $\\mathcal{O}(\\Delta x^2, \\Delta t^2)$, and is stable for $|\\lambda| \\le 1$.\n\n**2. Implementation Strategy**\n\nThe scheme will be implemented in Python using the `numpy` library for efficient array operations.\n\n- **Initialization**: For each test case, the parameters $L, a, N, \\lambda, T, w$ are set. The computational grid `x`, grid spacing $\\Delta x$, time step $\\Delta t$, and number of time steps $N_t$ are calculated.\n- **Initial Conditions**: Two initial condition arrays, `u_aligned` and `u_half_shift`, are created. The square wave is defined by setting elements to $1.0$ where $x_j \\in [x_0, x_0+w)$. For the given parameters where $x_0+w < L$, this can be implemented with boolean indexing: `u[(x >= x0) & (x < x0 + w)] = 1.0`.\n    - For `u_aligned`, $x_0 = 0$.\n    - For `u_half_shift`, $x_0 = 0.5\\,\\Delta x$.\n- **Time Stepping**: A loop runs for $N_t$ steps to advance the solution in time. The update rule is applied to the entire spatial grid simultaneously using vectorized operations. Periodic boundary conditions are handled using `numpy.roll()`, which efficiently shifts array elements with wrap-around.\n    - `u_jp1 = np.roll(u, -1)` provides the array of $u_{j+1}$ values.\n    - `u_jm1 = np.roll(u, 1)` provides the array of $u_{j-1}$ values.\n- **Analysis**: After the final time step, the oscillation amplitude $A(u)$ is calculated for both the aligned and half-shifted solutions. The final metric, $\\Delta A = A(u^{\\text{half-shift}}) - A(u^{\\text{aligned}})$, is computed and stored for each test case.\n- **Output**: The collected $\\Delta A$ values are formatted to six decimal places and printed in the required list format.\n\nA special case occurs for $\\lambda=1$. The update formula simplifies to $u_j^{n+1} = u_{j-1}^n$, which corresponds to an exact translation of the discrete solution by one grid cell per time step, assuming $a>0$. For an initial condition consisting only of values $0$ and $1$, the solution will maintain these values exactly, resulting in zero dispersive oscillations. Therefore, for Test 3, we expect $A(u^{\\text{aligned}}) = 0$ and $A(u^{\\text{half-shift}}) = 0$, leading to $\\Delta A = 0$. This provides a useful validation check for the implementation. For $|\\lambda| < 1$, the scheme is dispersive, and we expect oscillations (Gibbs phenomenon) near the discontinuities, with their amplitude influenced by the grid alignment.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D linear advection equation using the Lax-Wendroff scheme and\n    quantifies the sensitivity of dispersive oscillations to initial condition alignment.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (N, lambda, T, w/L)\n    test_cases = [\n        (200, 0.5, 0.3, 0.25),   # Test 1 (happy path)\n        (200, 0.95, 0.3, 0.25),  # Test 2 (near stability limit)\n        (200, 1.0, 0.3, 0.25),   # Test 3 (boundary case lambda=1)\n        (40, 0.5, 0.3, 0.25),    # Test 4 (coarse grid)\n    ]\n\n    # Fixed physical parameters\n    L = 1.0\n    a = 1.0\n\n    results = []\n\n    def run_simulation(N, lambda_val, Nt, ic):\n        \"\"\"\n        Advances the initial condition `ic` for `Nt` time steps using the Lax-Wendroff scheme.\n        \n        Args:\n            N (int): Number of grid points.\n            lambda_val (float): CFL number.\n            Nt (int): Number of time steps.\n            ic (np.ndarray): Initial condition array.\n\n        Returns:\n            np.ndarray: The solution after Nt time steps.\n        \"\"\"\n        u = ic.copy()\n        \n        # Pre-calculate terms for the Lax-Wendroff update\n        term1_factor = lambda_val / 2.0\n        term2_factor = lambda_val**2 / 2.0\n        \n        for _ in range(Nt):\n            u_jp1 = np.roll(u, -1)  # u_{j+1} with periodic boundaries\n            u_jm1 = np.roll(u, 1)   # u_{j-1} with periodic boundaries\n            \n            # Apply the Lax-Wendroff update formula:\n            # u_j^{n+1} = u_j^n - (lambda/2)(u_{j+1}^n - u_{j-1}^n) + (lambda^2/2)(u_{j+1}^n - 2u_j^n + u_{j-1}^n)\n            term1 = term1_factor * (u_jp1 - u_jm1)\n            term2 = term2_factor * (u_jp1 - 2.0 * u + u_jm1)\n            \n            u = u - term1 + term2\n            \n        return u\n\n    def calculate_A(u):\n        \"\"\"\n        Calculates the oscillation amplitude A(u).\n        A(u) = max(max(u) - 1, -min(u), 0)\n        \"\"\"\n        max_u = np.max(u)\n        min_u = np.min(u)\n        return max(max_u - 1.0, -min_u, 0.0)\n\n    for case in test_cases:\n        N, lambda_val, T, w_ratio = case\n\n        # Calculate simulation parameters\n        dx = L / N\n        dt = lambda_val * dx / a\n        Nt = int(T / dt)\n        w = w_ratio * L\n        \n        # Spatial grid\n        x = np.linspace(0, L, N, endpoint=False)\n\n        # 1. Aligned initial condition\n        x0_aligned = 0.0\n        ic_aligned = np.zeros(N)\n        # Condition for square wave: u=1 if x is in [x0, x0+w)\n        # For the given parameters, x0+w < L, so no wrap-around is needed for the IC.\n        mask_aligned = (x >= x0_aligned) & (x < x0_aligned + w)\n        ic_aligned[mask_aligned] = 1.0\n        \n        u_final_aligned = run_simulation(N, lambda_val, Nt, ic_aligned)\n        A_aligned = calculate_A(u_final_aligned)\n\n        # 2. Half-cell shifted initial condition\n        x0_half_shift = 0.5 * dx\n        ic_half_shift = np.zeros(N)\n        mask_half_shift = (x >= x0_half_shift) & (x < x0_half_shift + w)\n        ic_half_shift[mask_half_shift] = 1.0\n        \n        u_final_half_shift = run_simulation(N, lambda_val, Nt, ic_half_shift)\n        A_half_shift = calculate_A(u_final_half_shift)\n\n        # 3. Compute the difference in oscillation amplitude\n        delta_A = A_half_shift - A_aligned\n        results.append(delta_A)\n    \n    # Format the final output string as per requirements\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "3151778"}, {"introduction": "While the Lax-Wendroff scheme improves upon first-order methods by reducing numerical diffusion, it introduces a different type of error known as numerical dispersion. This practice provides a classic demonstration of this effect, often called the Gibbs phenomenon, where spurious oscillations appear near sharp gradients. By simulating the movement of a step function, you will rigorously quantify the resulting overshoots and undershoots, gaining a concrete understanding of this key limitation of second-order linear schemes [@problem_id:2393549].", "problem": "Consider the one-dimensional linear advection equation $u_t + a\\,u_x = 0$ on the periodic domain $x \\in [0,1)$ with constant advection speed $a > 0$. Let $a = 1$. The initial condition is the discontinuous step\n$$\nu(x,0) = \\begin{cases}\n1, & x \\ge 0.5,\\\\\n0, & x < 0.5.\n\\end{cases}\n$$\nDiscretize space with $N$ uniform cell-centered points $x_j = (j + 0.5)\\,\\Delta x$ for $j \\in \\{0,1,\\dots,N-1\\}$, where $\\Delta x = 1/N$, and impose periodicity. Evolve the discrete solution using the Lax–Wendroff finite difference scheme defined by the update\n$$\nu_j^{n+1} = u_j^n - \\tfrac{1}{2}\\sigma\\left(u_{j+1}^n - u_{j-1}^n\\right) + \\tfrac{1}{2}\\sigma^2\\left(u_{j+1}^n - 2u_j^n + u_{j-1}^n\\right),\n$$\nwith periodic indexing, where the Courant–Friedrichs–Lewy (CFL) number $\\sigma$ is $\\sigma = a\\,\\Delta t / \\Delta x$ and $\\Delta t$ is the time step. For each case below, use the specified $N$, $\\sigma$, and terminal time $t_{\\mathrm{end}}$ to construct $\\Delta t = \\sigma\\,\\Delta x/a$ and evolve for the largest integer number of steps $n$ such that $t_n = n\\,\\Delta t \\le t_{\\mathrm{end}}$. Denote this evolution time by $t_n$.\n\nTo quantify Gibbs-like oscillations near the advected discontinuity, define the theoretical discontinuity location at time $t_n$ as $x_d(t_n) = \\mathrm{mod}(0.5 + a\\,t_n,\\,1)$. Extract a symmetric spatial window of half-width $w_x = 0.1$ centered at $x_d(t_n)$, that is, all grid points $x_j$ satisfying the shortest periodic distance to $x_d(t_n)$ not exceeding $w_x$. Within this window, compute the following three quantities for the discrete solution at time $t_n$:\n- The overshoot amplitude $O = \\max\\{0,\\,\\max_{\\text{window}} u - 1\\}$.\n- The undershoot amplitude $U = \\max\\{0,\\,0 - \\min_{\\text{window}} u\\}$.\n- The total-variation ratio $R = \\mathrm{TV}(u(\\cdot,t_n)) / \\mathrm{TV}(u(\\cdot,0))$, where the discrete total variation is $\\mathrm{TV}(v) = \\sum_{j=0}^{N-1} |v_{j+1} - v_j|$ with periodic indexing.\n\nYour program must evaluate $(O,U,R)$ for each of the following five test cases:\n1. $N=200$, $\\sigma=0.5$, $t_{\\mathrm{end}}=0.2$.\n2. $N=200$, $\\sigma=0.9$, $t_{\\mathrm{end}}=0.2$.\n3. $N=50$, $\\sigma=0.5$, $t_{\\mathrm{end}}=0.2$.\n4. $N=200$, $\\sigma=0.2$, $t_{\\mathrm{end}}=0.2$.\n5. $N=800$, $\\sigma=0.5$, $t_{\\mathrm{end}}=0.2$.\n\nAll quantities are dimensionless. Your program should produce a single line of output containing the results as a comma-separated list of lists, where the $k$-th inner list is $[O_k,U_k,R_k]$ for test case $k$, and each floating-point number is rounded to exactly six decimal places. For example, the required format is\n$$\n[\\,[O_1,U_1,R_1],\\,[O_2,U_2,R_2],\\,\\dots,\\,[O_5,U_5,R_5]\\,].\n$$", "solution": "The problem requires the numerical solution of the one-dimensional linear advection equation using the Lax-Wendroff finite difference scheme. The primary objective is to quantify the numerical artifacts, specifically the Gibbs-like oscillations, that arise when applying this second-order, non-monotonic scheme to a discontinuous initial profile.\n\nThe governing partial differential equation is the linear advection equation:\n$$\n\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0\n$$\nwhere $u(x, t)$ is the conserved quantity, $x \\in [0, 1)$ is the spatial coordinate with periodic boundary conditions, $t$ is time, and $a$ is the constant advection speed, given as $a=1$. The analytical solution to this equation is a simple translation of the initial profile, $u(x,t) = u_0(x-at)$, where $u_0(x) = u(x,0)$. For the given step-function initial condition:\n$$\nu(x,0) = \\begin{cases}\n1, & x \\ge 0.5 \\\\\n0, & x < 0.5\n\\end{cases}\n$$\nthe discontinuity initially at $x=0.5$ advects with speed $a=1$, and its theoretical location at time $t$ is $x_d(t) = \\mathrm{mod}(0.5 + at, 1)$.\n\nThe computational domain is discretized into $N$ uniform cell-centered grid points $x_j = (j + 0.5)\\Delta x$ for $j \\in \\{0, 1, \\dots, N-1\\}$, with a spatial step size of $\\Delta x = 1/N$. Periodicity implies that the indices are treated modulo $N$, so that $x_{j+N} = x_j$.\n\nThe time evolution is governed by the explicit Lax-Wendroff scheme, which is second-order accurate in both space and time. The discrete update formula for the solution $u_j^n \\approx u(x_j, t_n)$ is given by:\n$$\nu_j^{n+1} = u_j^n - \\frac{1}{2}\\sigma(u_{j+1}^n - u_{j-1}^n) + \\frac{1}{2}\\sigma^2(u_{j+1}^n - 2u_j^n + u_{j-1}^n)\n$$\nHere, $\\sigma = a\\Delta t / \\Delta x$ is the Courant-Friedrichs-Lewy (CFL) number, which relates the time step $\\Delta t$, the spatial step $\\Delta x$, and the advection speed $a$. The scheme is stable for $|\\sigma| \\le 1$. The problem specifies $\\Delta t = \\sigma \\Delta x / a$. The simulation runs for the largest integer number of steps, $n_{\\text{steps}}$, such that the total evolution time $t_n = n_{\\text{steps}} \\Delta t$ does not exceed a given terminal time $t_{\\mathrm{end}}$.\n\nThe Lax-Wendroff scheme achieves second-order accuracy by incorporating a term proportional to the second spatial derivative, which counteracts the numerical diffusion of a first-order upwind scheme. However, this introduces numerical dispersion, causing non-physical oscillations (overshoots and undershoots) near sharp gradients or discontinuities, a phenomenon related to the Gibbs effect.\n\nTo quantify these oscillations, we analyze the numerical solution $u_j^{n}$ at the final time $t_n$. A spatial window of half-width $w_x = 0.1$ is defined around the theoretical location of the advected discontinuity, $x_d(t_n)$. This window contains all grid points $x_j$ such that the shortest periodic distance to $x_d(t_n)$, given by $\\min(|x_j - x_d(t_n)|, 1 - |x_j - x_d(t_n)|)$, is no more than $w_x$. Within this window, we compute:\n1.  The overshoot amplitude $O = \\max\\{0, \\max_{\\text{window}} u - 1\\}$. This measures the maximum value of the solution in the window that exceeds the initial maximum of $1$.\n2.  The undershoot amplitude $U = \\max\\{0, 0 - \\min_{\\text{window}} u\\}$. This measures the maximum value by which the solution in the window drops below the initial minimum of $0$.\n\nAdditionally, we evaluate the growth of oscillations by computing the ratio of the total variation (TV) at time $t_n$ to the initial total variation. The discrete total variation of a grid function $v$ is defined as $\\mathrm{TV}(v) = \\sum_{j=0}^{N-1} |v_{j+1} - v_j|$, with periodic indexing $v_N = v_0$. The initial condition is a step function on a periodic domain, which has two jumps (from $0$ to $1$ and from $1$ back to $0$), so its theoretical total variation is $\\mathrm{TV}(u(\\cdot,0)) = 2$. The ratio is $R = \\mathrm{TV}(u(\\cdot,t_n)) / \\mathrm{TV}(u(\\cdot,0))$. For a scheme that is not total variation diminishing (TVD), like Lax-Wendroff, this ratio is expected to be greater than $1$, indicating the creation of new extrema, i.e., oscillations.\n\nThe algorithmic procedure for each test case is as follows:\n1.  Initialize parameters: $N, \\sigma, t_{\\mathrm{end}}$, with $a=1$ and $w_x=0.1$.\n2.  Calculate simulation parameters: $\\Delta x = 1/N$, $\\Delta t = \\sigma \\Delta x / a$, and $n_{\\text{steps}} = \\lfloor t_{\\mathrm{end}} / \\Delta t \\rfloor$. The final time is $t_n = n_{\\text{steps}} \\Delta t$.\n3.  Set up the grid $x_j$ and the initial condition $u^0$, where $u_j^0 = 1$ if $x_j \\ge 0.5$ and $u_j^0 = 0$ otherwise.\n4.  Calculate the initial total variation, $\\mathrm{TV}(u^0)$.\n5.  Iteratively apply the Lax-Wendroff update formula for $n_{\\text{steps}}$ to obtain the final numerical solution $u^{n_{\\text{steps}}}$. Vectorized array operations are used for efficiency, employing circular shifts to handle periodic boundary conditions.\n6.  Determine the theoretical discontinuity location $x_d(t_n) = (0.5 + a t_n) \\pmod 1$.\n7.  Identify the grid points lying within the analysis window of half-width $w_x$ around $x_d(t_n)$.\n8.  Compute the maximum and minimum of the solution within this window to find the overshoot $O$ and undershoot $U$.\n9.  Compute the total variation of the final solution, $\\mathrm{TV}(u^{n_{\\text{steps}}})$, and the ratio $R$.\n10. Store the computed triplet $(O, U, R)$ for the case.\nThis process is repeated for all five specified test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D linear advection equation using the Lax-Wendroff scheme for\n    multiple test cases and quantifies numerical oscillations.\n    \"\"\"\n    test_cases = [\n        (200, 0.5, 0.2),\n        (200, 0.9, 0.2),\n        (50, 0.5, 0.2),\n        (200, 0.2, 0.2),\n        (800, 0.5, 0.2),\n    ]\n\n    results = []\n    a = 1.0  # Advection speed\n    w_x = 0.1  # Window half-width for analysis\n\n    for N, sigma, t_end in test_cases:\n        # 1. Setup simulation parameters\n        dx = 1.0 / N\n        dt = sigma * dx / a\n        if dt == 0:\n            num_steps = 0\n        else:\n            num_steps = int(t_end / dt)\n        t_n = num_steps * dt\n\n        # 2. Initialize grid and solution\n        x = (np.arange(N) + 0.5) * dx\n        u = np.where(x >= 0.5, 1.0, 0.0)\n\n        # 3. Calculate initial total variation\n        # TV(v) = sum(|v_{j+1} - v_j|) with periodic indexing\n        # np.roll(u, -1) gives u_{j+1} at index j\n        tv_initial = np.sum(np.abs(np.roll(u, -1) - u))\n        if tv_initial == 0: tv_initial = 1.0 # Avoid division by zero, though not expected here.\n\n        # 4. Time evolution loop (Lax-Wendroff)\n        for _ in range(num_steps):\n            u_jp1 = np.roll(u, -1)  # u_{j+1}\n            u_jm1 = np.roll(u, 1)   # u_{j-1}\n            \n            # Central difference term (first derivative)\n            term1 = -0.5 * sigma * (u_jp1 - u_jm1)\n            \n            # Central difference term (second derivative)\n            term2 = 0.5 * sigma**2 * (u_jp1 - 2.0 * u + u_jm1)\n            \n            u = u + term1 + term2\n        \n        u_final = u\n\n        # 5. Analyze the final solution\n        # Theoretical discontinuity location\n        x_d = (0.5 + a * t_n) % 1.0\n\n        # Identify the analysis window\n        dist = np.abs(x - x_d)\n        periodic_dist = np.minimum(dist, 1.0 - dist)\n        window_mask = periodic_dist <= w_x\n        \n        u_window = u_final[window_mask]\n\n        # Handle case where window might be empty, though unlikely with given params\n        if u_window.size > 0:\n            max_u_window = np.max(u_window)\n            min_u_window = np.min(u_window)\n        else:\n            max_u_window = 1.0\n            min_u_window = 0.0\n\n        # Calculate overshoot and undershoot\n        overshoot = max(0.0, max_u_window - 1.0)\n        undershoot = max(0.0, 0.0 - min_u_window)\n\n        # Calculate total variation ratio\n        tv_final = np.sum(np.abs(np.roll(u_final, -1) - u_final))\n        tv_ratio = tv_final / tv_initial\n        \n        results.append([overshoot, undershoot, tv_ratio])\n\n    # 6. Format and print the final output\n    formatted_results = []\n    for O, U, R in results:\n        formatted_results.append(f\"[{O:.6f},{U:.6f},{R:.6f}]\")\n    \n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2393549"}, {"introduction": "The numerical oscillations explored in the previous practice are not just an aesthetic issue; they can lead to fundamentally unphysical results. This exercise tackles this problem head-on by simulating a quantity, such as particle density, that must remain non-negative. You will observe how the undershoots generated by the Lax-Wendroff scheme can cause the numerical solution to violate this physical constraint, highlighting a critical failure mode and motivating the need for more sophisticated, non-linear methods in many applications [@problem_id:2407736].", "problem": "Consider the one-dimensional linear advection of a nonnegative scalar number density $n(x,t)$ with constant speed $a > 0$ on a periodic domain of length $L$, governed by the conservation law\n$$\n\\partial_t n(x,t) + a\\,\\partial_x n(x,t) = 0,\\quad x\\in[0,L],\\ t\\ge 0,\n$$\nwith periodic boundary conditions and a uniform spatial discretization. The exact solution preserves nonnegativity: if $n(x,0) \\ge 0$ for all $x$, then $n(x,t) \\ge 0$ for all $t \\ge 0$. You are to compute a fully discrete numerical solution on a uniform grid using an explicit, second-order accurate method in both space and time on a periodic mesh. The mesh consists of $N$ grid points with spacing $\\Delta x = L/N$ and nodes $x_j = j\\,\\Delta x$ for $j=0,1,\\dots,N-1$. Use a uniform time step $\\Delta t$ defined by the Courant–Friedrichs–Lewy (CFL) number $c = a\\,\\Delta t/\\Delta x$, with $c \\in (0,1]$, and advance the solution for as many whole time steps $K=\\lfloor T/\\Delta t\\rfloor$ as do not exceed the target time $T$.\n\nYour program must, for each specified test case, evolve the discrete solution starting from the given nonnegative initial data and detect whether the numerical solution ever attains a value less than a small negative threshold at any grid point during the evolution up to time $T$. To avoid false positives due to floating-point roundoff, declare that an unphysical negative value has occurred if and only if $\\min_j n_j^m  -\\varepsilon$ for some time step $m \\in \\{0,1,\\dots,K\\}$, with tolerance $\\varepsilon = 10^{-12}$, where $n_j^m$ denotes the discrete solution at grid node $x_j$ and time level $t^m=m\\,\\Delta t$.\n\nUse nondimensional units (no physical units are required). Angles are not involved. All parameter values below are nondimensional. The domain is periodic on $[0,L]$ in every test.\n\nTest suite (each item lists $(L,a,N,c,T,\\text{initial profile})$):\n- Case A (smooth profile, “happy path”): $(L,a,N,c,T) = (1.0,\\,1.0,\\,400,\\,0.5,\\,1.0)$. Initial condition: $n(x,0) = \\exp\\!\\left(-\\left(\\dfrac{x-0.3}{0.05}\\right)^2\\right)$ for $x\\in[0,L)$.\n- Case B (single discontinuity pair, near-Courant-boundary): $(L,a,N,c,T) = (1.0,\\,1.0,\\,400,\\,0.9,\\,0.2)$. Initial condition: $n(x,0) = 1$ for $x\\in[0.25,0.55]$ and $n(x,0)=0$ otherwise on $[0,L)$.\n- Case C (multiple discontinuities, coarser grid): $(L,a,N,c,T) = (1.0,\\,1.0,\\,200,\\,0.5,\\,0.2)$. Initial condition: $n(x,0) = 1$ on the union $[0.10,0.20]\\cup[0.60,0.80]$ and $n(x,0)=0$ otherwise on $[0,L)$.\n\nYour program must compute, for each case, a boolean indicator of whether any unphysical negative value (as defined by the threshold $\\varepsilon$) is observed at any grid point during the time stepping from $t=0$ to $t=K\\,\\Delta t$. The final output must be a single line containing the three results in order for Cases A, B, and C, formatted as a comma-separated list of integers enclosed in square brackets, where each entry equals $1$ if an unphysical negative value was detected for that case, and equals $0$ otherwise. For example, the required output format is $[x_1,x_2,x_3]$ with $x_i \\in \\{0,1\\}$.", "solution": "The problem presented is a well-posed exercise in computational physics. It asks for the implementation of a specific class of numerical methods to solve the one-dimensional linear advection equation and to test a fundamental property of the numerical solution: the preservation of non-negativity.\n\nThe governing equation is the linear advection equation for a scalar density $n(x,t)$ with a constant, positive wave speed $a$:\n$$\n\\partial_t n + a\\,\\partial_x n = 0\n$$\nThe problem requires a numerical scheme that is explicit and second-order accurate in both time and space. The canonical method satisfying these properties for this equation is the Lax-Wendroff scheme. We will derive this scheme and use it to solve the problem.\n\nWe begin with a Taylor series expansion of the solution $n(x, t+\\Delta t)$ in time around $t$:\n$$\nn(x, t+\\Delta t) = n(x,t) + \\Delta t \\frac{\\partial n}{\\partial t} + \\frac{(\\Delta t)^2}{2} \\frac{\\partial^2 n}{\\partial t^2} + O((\\Delta t)^3)\n$$\nTo achieve second-order accuracy in time, we must approximate the time derivatives using the governing PDE. The first time derivative is given directly by the PDE:\n$$\n\\frac{\\partial n}{\\partial t} = -a \\frac{\\partial n}{\\partial x}\n$$\nThe second time derivative is found by differentiating the PDE with respect to time and substituting back:\n$$\n\\frac{\\partial^2 n}{\\partial t^2} = \\frac{\\partial}{\\partial t}\\left(-a \\frac{\\partial n}{\\partial x}\\right) = -a \\frac{\\partial}{\\partial x}\\left(\\frac{\\partial n}{\\partial t}\\right) = -a \\frac{\\partial}{\\partial x}\\left(-a \\frac{\\partial n}{\\partial x}\\right) = a^2 \\frac{\\partial^2 n}{\\partial x^2}\n$$\nSubstituting these expressions back into the Taylor expansion yields a semi-discretized equation, accurate to second order in $\\Delta t$:\n$$\nn(x, t+\\Delta t) = n(x,t) - a \\Delta t \\frac{\\partial n}{\\partial x} + \\frac{(a \\Delta t)^2}{2} \\frac{\\partial^2 n}{\\partial x^2} + O((\\Delta t)^3)\n$$\nTo create a fully discrete scheme, we discretize the spatial domain with grid points $x_j = j\\Delta x$ and approximate the solution at these points at time $t^m=m\\Delta t$ by $n_j^m \\approx n(x_j, t^m)$. We replace the spatial derivatives with second-order accurate central finite differences:\n$$\n\\left.\\frac{\\partial n}{\\partial x}\\right|_{x_j} \\approx \\frac{n_{j+1}^m - n_{j-1}^m}{2\\Delta x}\n$$\n$$\n\\left.\\frac{\\partial^2 n}{\\partial x^2}\\right|_{x_j} \\approx \\frac{n_{j+1}^m - 2n_j^m + n_{j-1}^m}{(\\Delta x)^2}\n$$\nSubstituting these finite differences into the semi-discretized equation gives the explicit update rule for $n_j^{m+1}$:\n$$\nn_j^{m+1} = n_j^m - a \\Delta t \\left( \\frac{n_{j+1}^m - n_{j-1}^m}{2\\Delta x} \\right) + \\frac{(a \\Delta t)^2}{2} \\left( \\frac{n_{j+1}^m - 2n_j^m + n_{j-1}^m}{(\\Delta x)^2} \\right)\n$$\nIntroducing the non-dimensional Courant–Friedrichs–Lewy (CFL) number, $c = a\\Delta t/\\Delta x$, we can simplify the expression:\n$$\nn_j^{m+1} = n_j^m - \\frac{c}{2} (n_{j+1}^m - n_{j-1}^m) + \\frac{c^2}{2} (n_{j+1}^m - 2n_j^m + n_{j-1}^m)\n$$\nGrouping terms by their spatial index at the current time level $m$:\n$$\nn_j^{m+1} = \\left( \\frac{c^2}{2} + \\frac{c}{2} \\right) n_{j-1}^m + (1 - c^2) n_j^m + \\left( \\frac{c^2}{2} - \\frac{c}{2} \\right) n_{j+1}^m\n$$\nThis is the Lax-Wendroff scheme. For the scheme to be positivity-preserving (i.e., guarantee $n_j^{m+1} \\ge 0$ if all $n_k^m \\ge 0$), all coefficients in the stencil must be non-negative. We analyze the coefficients for the stability range $c \\in (0,1]$:\n- Coefficient of $n_{j-1}^m$: $\\frac{c(c+1)}{2}$. This is non-negative for $c \\ge 0$.\n- Coefficient of $n_j^m$: $1 - c^2$. This is non-negative for $c \\le 1$.\n- Coefficient of $n_{j+1}^m$: $\\frac{c(c-1)}{2}$. This is non-positive for $c \\in [0,1]$.\n\nThe coefficient of $n_{j+1}^m$ is negative for any $c \\in (0,1)$. This means the Lax-Wendroff scheme is not positivity-preserving in general. It is a non-monotone scheme that can introduce spurious oscillations (undershoots and overshoots) around sharp gradients or discontinuities in the solution. This is a manifestation of Godunov's theorem, which states that no linear numerical scheme for conservation laws with order of accuracy greater than one can be monotonicity-preserving. We therefore expect to observe negative values when the initial condition contains discontinuities, as in Cases B and C. For a smooth initial condition like the Gaussian in Case A, any oscillations should be much smaller, and may not fall below the specified negative threshold $\\varepsilon = 10^{-12}$.\n\nThe algorithm to solve the problem is as follows:\n1. For each test case, define parameters $L, a, N, c, T$.\n2. Compute the grid spacing $\\Delta x = L/N$, the time step $\\Delta t = c \\Delta x / a$, and the total number of time steps $K = \\lfloor T/\\Delta t \\rfloor$.\n3. Create a uniform spatial grid $x_j = j\\Delta x$ for $j=0, \\dots, N-1$.\n4. Initialize the discrete solution array $n^0$ according to the specified initial condition for the case.\n5. Set a flag `negative_detected = 0`.\n6. Iterate from time step $m=0$ to $K-1$:\n   a. Compute the solution at the next time step, $n^{m+1}$, using the Lax-Wendroff formula. Periodic boundary conditions are enforced by treating the grid indices cyclically (e.g., $n_{-1}^m \\equiv n_{N-1}^m$ and $n_N^m \\equiv n_0^m$).\n   b. After computing the new array $n^{m+1}$, find its minimum value, $\\min_j n_j^{m+1}$.\n   c. If this minimum is less than $-\\varepsilon = -10^{-12}$, set `negative_detected = 1` and terminate the time-stepping for this case.\n   d. Update the solution array for the next iteration.\n7. Record the final value of `negative_detected` for the case.\n8. After processing all cases, report the results as a list of these flags.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D linear advection equation using the Lax-Wendroff scheme\n    and detects the occurrence of unphysical negative values.\n    \"\"\"\n\n    # Define the tolerance for detecting negative values.\n    epsilon = 1.0e-12\n\n    def run_simulation(L, a, N, c, T, initial_profile_func):\n        \"\"\"\n        Runs a single simulation case.\n\n        Returns:\n            int: 1 if a negative value below the threshold is detected, 0 otherwise.\n        \"\"\"\n        # Grid and time step parameters\n        dx = L / N\n        dt = c * dx / a\n        if dt == 0:\n            num_steps = 0\n        else:\n            num_steps = int(T // dt)\n\n        # Spatial grid (uniform and periodic)\n        # x corresponds to nodes x_j = j*dx for j=0, ..., N-1\n        x = np.linspace(0, L, N, endpoint=False)\n\n        # Initialize the solution array n from the initial condition\n        n = initial_profile_func(x)\n\n        # Lax-Wendroff coefficients\n        # n_j^{m+1} = c_j-1 * n_{j-1}^m + c_j * n_j^m + c_j+1 * n_{j+1}^m\n        # Note: np.roll(n, 1) corresponds to n_{j-1}\n        #       np.roll(n, -1) corresponds to n_{j+1}\n        c_j_minus_1 = c * (c + 1.0) / 2.0\n        c_j = 1.0 - c**2\n        c_j_plus_1 = c * (c - 1.0) / 2.0\n        \n        # Check initial state (t=0)\n        if np.min(n)  -epsilon:\n            return 1\n\n        # Time-stepping loop\n        for _ in range(num_steps):\n            # Apply the Lax-Wendroff update rule\n            # np.roll handles periodic boundary conditions efficiently\n            n_new = (c_j_minus_1 * np.roll(n, 1) +\n                     c_j * n +\n                     c_j_plus_1 * np.roll(n, -1))\n            \n            n = n_new\n            \n            # Check for unphysical negative values\n            if np.min(n)  -epsilon:\n                return 1\n\n        return 0\n\n    # Define test cases based on the problem statement\n    test_cases = [\n        # Case A: Smooth Gaussian profile\n        {\n            \"L\": 1.0, \"a\": 1.0, \"N\": 400, \"c\": 0.5, \"T\": 1.0,\n            \"initial_profile_func\": lambda x: np.exp(-((x - 0.3) / 0.05)**2)\n        },\n        # Case B: Single discontinuity pair (square pulse)\n        {\n            \"L\": 1.0, \"a\": 1.0, \"N\": 400, \"c\": 0.9, \"T\": 0.2,\n            \"initial_profile_func\": lambda x: np.where((x = 0.25)  (x  0.55), 1.0, 0.0)\n        },\n        # Case C: Multiple discontinuities, coarser grid\n        {\n            \"L\": 1.0, \"a\": 1.0, \"N\": 200, \"c\": 0.5, \"T\": 0.2,\n            \"initial_profile_func\": lambda x: np.where(\n                ((x = 0.10)  (x  0.20)) | ((x = 0.60)  (x  0.80)), 1.0, 0.0\n            )\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = run_simulation(\n            case[\"L\"], case[\"a\"], case[\"N\"], case[\"c\"], case[\"T\"], case[\"initial_profile_func\"]\n        )\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2407736"}]}