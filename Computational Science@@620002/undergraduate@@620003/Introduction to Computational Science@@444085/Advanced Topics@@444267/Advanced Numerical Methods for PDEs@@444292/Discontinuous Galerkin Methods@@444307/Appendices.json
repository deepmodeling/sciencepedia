{"hands_on_practices": [{"introduction": "The power of the Discontinuous Galerkin method lies in its construction on simple, standardized reference elements. This practice takes you to the heart of the method by having you compute the fundamental mass and stiffness matrices on a reference interval. By working through the integrals for low-order polynomial bases, you will gain a concrete understanding of how the discrete operators are formed and appreciate the importance of basis function properties like orthogonality [@problem_id:3119017].", "problem": "Consider a single reference element in one spatial dimension given by the interval $[-1,1]$. In a modal Discontinuous Galerkin (DG) method, one often chooses a polynomial basis that is orthogonal on $[-1,1]$ with respect to the standard $L^{2}$ inner product. Let the basis functions be the Legendre polynomials $P_{n}(x)$ of degree $n$, for $n=0,1,\\dots,p$, with $P_{0}(x)=1$, $P_{1}(x)=x$, and $P_{2}(x)=\\frac{1}{2}(3x^{2}-1)$. Define the element mass matrix $\\mathbf{M}$ and the element stiffness matrix $\\mathbf{K}$ associated with the symmetric interior bilinear form for diffusion by\n$$\nM_{ij}=\\int_{-1}^{1} P_{i}(x)\\,P_{j}(x)\\,\\mathrm{d}x,\\quad\nK_{ij}=\\int_{-1}^{1} \\frac{\\mathrm{d}P_{i}}{\\mathrm{d}x}(x)\\,\\frac{\\mathrm{d}P_{j}}{\\mathrm{d}x}(x)\\,\\mathrm{d}x,\n$$\nfor $i,j=0,1,\\dots,p$. Starting from the foundational definitions of the $L^{2}$ inner product and the Legendre polynomial basis on $[-1,1]$, compute $\\mathbf{M}$ and $\\mathbf{K}$ explicitly for polynomial degrees $p=1$ and $p=2$. Then, using only first principles, verify the orthogonality property reflected in the structure of $\\mathbf{M}$ for these choices of $p$.\n\nFinally, consider the generalized element eigenproblem $\\mathbf{K}\\mathbf{v}=\\lambda\\,\\mathbf{M}\\mathbf{v}$ on the same reference element for $p=2$. Based on your computed matrices, determine the largest eigenvalue $\\lambda_{\\max}$. Report your final answer as a single real number. No rounding is required.", "solution": "The starting point is the $L^{2}$ inner product on $[-1,1]$ defined for scalar functions $u(x)$ and $v(x)$ by\n$$\n(u,v)_{L^{2}(-1,1)}=\\int_{-1}^{1} u(x)\\,v(x)\\,\\mathrm{d}x.\n$$\nOn a single reference element $[-1,1]$, the element mass matrix $\\mathbf{M}$ and stiffness matrix $\\mathbf{K}$ are defined, for a chosen basis $\\{P_{n}\\}_{n=0}^{p}$, by\n$$\nM_{ij}=\\int_{-1}^{1} P_{i}(x)\\,P_{j}(x)\\,\\mathrm{d}x,\\quad\nK_{ij}=\\int_{-1}^{1} P'_{i}(x)\\,P'_{j}(x)\\,\\mathrm{d}x,\n$$\nwhere $P'_{i}(x)=\\frac{\\mathrm{d}P_{i}}{\\mathrm{d}x}(x)$ denotes the derivative of $P_{i}$.\n\nWe will use the explicit low-degree Legendre polynomials:\n$$\nP_{0}(x)=1,\\quad P_{1}(x)=x,\\quad P_{2}(x)=\\frac{1}{2}(3x^{2}-1).\n$$\nTheir derivatives are\n$$\nP'_{0}(x)=0,\\quad P'_{1}(x)=1,\\quad P'_{2}(x)=3x.\n$$\n\nStep $1$: Compute $\\mathbf{M}$ and verify orthogonality for $p=1$.\n\nFor $p=1$, the basis is $\\{P_{0},P_{1}\\}$. The mass matrix entries are\n$$\nM_{00}=\\int_{-1}^{1} 1\\cdot 1\\,\\mathrm{d}x=\\int_{-1}^{1} 1\\,\\mathrm{d}x=2,\n$$\n$$\nM_{01}=\\int_{-1}^{1} 1\\cdot x\\,\\mathrm{d}x=\\int_{-1}^{1} x\\,\\mathrm{d}x=0 \\quad\\text{(odd integrand over a symmetric interval)},\n$$\n$$\nM_{11}=\\int_{-1}^{1} x\\cdot x\\,\\mathrm{d}x=\\int_{-1}^{1} x^{2}\\,\\mathrm{d}x=\\left[\\frac{x^{3}}{3}\\right]_{-1}^{1}=\\frac{1}{3}-\\left(-\\frac{1}{3}\\right)=\\frac{2}{3}.\n$$\nThus,\n$$\n\\mathbf{M}_{p=1}=\\begin{pmatrix}\n2 & 0\\\\\n0 & \\frac{2}{3}\n\\end{pmatrix}.\n$$\nThe off-diagonal entry $M_{01}=0$ demonstrates orthogonality of $P_{0}$ and $P_{1}$ in the $L^{2}$ inner product on $[-1,1]$.\n\nThe stiffness matrix entries are\n$$\nK_{00}=\\int_{-1}^{1} 0\\cdot 0\\,\\mathrm{d}x=0,\\quad K_{01}=\\int_{-1}^{1} 0\\cdot 1\\,\\mathrm{d}x=0,\\quad K_{11}=\\int_{-1}^{1} 1\\cdot 1\\,\\mathrm{d}x=2.\n$$\nTherefore,\n$$\n\\mathbf{K}_{p=1}=\\begin{pmatrix}\n0 & 0\\\\\n0 & 2\n\\end{pmatrix}.\n$$\n\nStep $2$: Compute $\\mathbf{M}$ and verify orthogonality for $p=2$.\n\nFor $p=2$, the basis is $\\{P_{0},P_{1},P_{2}\\}$. The mass matrix entries involve products of these polynomials:\n$$\nM_{00}=\\int_{-1}^{1} 1\\cdot 1\\,\\mathrm{d}x=2,\n$$\n$$\nM_{01}=\\int_{-1}^{1} 1\\cdot x\\,\\mathrm{d}x=0 \\quad\\text{(odd integrand)},\n$$\n$$\nM_{02}=\\int_{-1}^{1} 1\\cdot \\frac{1}{2}(3x^{2}-1)\\,\\mathrm{d}x=\\frac{1}{2}\\left(3\\int_{-1}^{1} x^{2}\\,\\mathrm{d}x-\\int_{-1}^{1} 1\\,\\mathrm{d}x\\right)=\\frac{1}{2}\\left(3\\cdot\\frac{2}{3}-2\\right)=0,\n$$\n$$\nM_{11}=\\int_{-1}^{1} x\\cdot x\\,\\mathrm{d}x=\\frac{2}{3},\n$$\n$$\nM_{12}=\\int_{-1}^{1} x\\cdot \\frac{1}{2}(3x^{2}-1)\\,\\mathrm{d}x=\\frac{1}{2}\\left(3\\int_{-1}^{1} x^{3}\\,\\mathrm{d}x-\\int_{-1}^{1} x\\,\\mathrm{d}x\\right)=\\frac{1}{2}\\left(0-0\\right)=0 \\quad\\text{(odd integrands)},\n$$\n$$\nM_{22}=\\int_{-1}^{1} \\left[\\frac{1}{2}(3x^{2}-1)\\right]^{2}\\,\\mathrm{d}x=\\int_{-1}^{1} \\frac{1}{4}\\left(9x^{4}-6x^{2}+1\\right)\\,\\mathrm{d}x=\\frac{1}{4}\\left(9\\cdot\\frac{2}{5}-6\\cdot\\frac{2}{3}+2\\right)=\\frac{1}{4}\\left(\\frac{18}{5}-4+2\\right)=\\frac{1}{4}\\cdot\\frac{8}{5}=\\frac{2}{5}.\n$$\nHence,\n$$\n\\mathbf{M}_{p=2}=\\begin{pmatrix}\n2 & 0 & 0\\\\\n0 & \\frac{2}{3} & 0\\\\\n0 & 0 & \\frac{2}{5}\n\\end{pmatrix}.\n$$\nAll off-diagonal entries are zero, verifying orthogonality of $\\{P_{0},P_{1},P_{2}\\}$ in the $L^{2}$ inner product. This arises from the parity and orthogonality properties of Legendre polynomials on $[-1,1]$ and is consistent with the fundamental definition of the inner product.\n\nThe stiffness matrix entries use derivatives:\n$$\nK_{00}=\\int_{-1}^{1} 0\\cdot 0\\,\\mathrm{d}x=0,\\quad K_{01}=\\int_{-1}^{1} 0\\cdot 1\\,\\mathrm{d}x=0,\\quad K_{02}=\\int_{-1}^{1} 0\\cdot 3x\\,\\mathrm{d}x=0,\n$$\n$$\nK_{11}=\\int_{-1}^{1} 1\\cdot 1\\,\\mathrm{d}x=2,\\quad K_{12}=\\int_{-1}^{1} 1\\cdot 3x\\,\\mathrm{d}x=3\\int_{-1}^{1} x\\,\\mathrm{d}x=0 \\quad\\text{(odd integrand)},\n$$\n$$\nK_{22}=\\int_{-1}^{1} 3x\\cdot 3x\\,\\mathrm{d}x=9\\int_{-1}^{1} x^{2}\\,\\mathrm{d}x=9\\cdot\\frac{2}{3}=6.\n$$\nThus,\n$$\n\\mathbf{K}_{p=2}=\\begin{pmatrix}\n0 & 0 & 0\\\\\n0 & 2 & 0\\\\\n0 & 0 & 6\n\\end{pmatrix}.\n$$\n\nStep $3$: Compute the largest eigenvalue of the generalized problem $\\mathbf{K}\\mathbf{v}=\\lambda\\,\\mathbf{M}\\mathbf{v}$ for $p=2$.\n\nBecause both $\\mathbf{K}_{p=2}$ and $\\mathbf{M}_{p=2}$ are diagonal with positive diagonal entries for indices $i\\geq 1$, the generalized eigenvalues are given by\n$$\n\\lambda_{i}=\\frac{K_{ii}}{M_{ii}},\\quad i=0,1,2.\n$$\nWe find\n$$\n\\lambda_{0}=\\frac{0}{2}=0,\\quad \\lambda_{1}=\\frac{2}{2/3}=3,\\quad \\lambda_{2}=\\frac{6}{2/5}=15.\n$$\nTherefore, the largest eigenvalue is\n$$\n\\lambda_{\\max}=15.\n$$\nNo rounding is necessary.", "answer": "$$\\boxed{15}$$", "id": "3119017"}, {"introduction": "Once we have defined our solution space on each element, the central question in DG methods becomes how to connect them. This is the role of the numerical flux, which dictates how information is exchanged across element boundaries. This exercise explores the profound connection between the numerical flux and the underlying physics of a conservation law by examining a scenario where the Godunov flux allows the DG method to exactly capture a stationary shock wave for the Burgers' equation [@problem_id:2386810].", "problem": "Consider the scalar conservation law on the one-dimensional domain $x \\in [-1,1]$ and time $t \\ge 0$,\n$$\n\\partial_t u(x,t) + \\partial_x\\!\\left(\\tfrac{1}{2}u(x,t)^2\\right) = 0,\n$$\nwith initial data\n$$\nu(x,0) = \\begin{cases}\na, & x < 0,\\\\\n-a, & x > 0,\n\\end{cases}\n$$\nwhere $a>0$ is a given constant. Impose boundary conditions that are consistent with the constant states on incoming characteristics at $x=-1$ and $x=1$. Discretize the domain by a mesh $\\{I_j\\}_{j=1}^N$ that is aligned with the discontinuity, i.e., there exists an interface at $x=0$. Consider the semi-discrete discontinuous Galerkin (DG) method with polynomial degree $p=0$ (element-wise constants) and exact spatial integration. Use the Godunov numerical flux at every interface, defined as the interfacial flux corresponding to the exact self-similar solution of the associated Riemann problem at that interface for the given conservation law.\n\nUnder these conditions, justify whether the semi-discrete DG solution coincides with the exact weak solution for all $t \\ge 0$. Then, compute the value of the Godunov numerical flux at the stationary interface $x=0$ in terms of $a$. Provide your final answer as a single simplified analytic expression in terms of $a$. No rounding is required, and no units are to be included.", "solution": "First, we analyze the exact weak solution to the given Riemann problem. The conservation law is $\\partial_t u + \\partial_x f(u) = 0$ with $f(u) = \\frac{1}{2}u^2$. The initial condition specifies a discontinuity at $x=0$, with a left state $u_L = a$ and a right state $u_R = -a$. Since $a>0$, we have $u_L > u_R$. For a convex flux function like $f(u) = \\frac{1}{2}u^2$ (since $f''(u) = 1 > 0$), the condition $u_L > u_R$ implies that the solution is a shock wave, provided the entropy condition is met.\n\nThe speed of this shock wave, $s$, is determined by the Rankine-Hugoniot condition:\n$$\ns = \\frac{f(u_L) - f(u_R)}{u_L - u_R} = \\frac{\\frac{1}{2}a^2 - \\frac{1}{2}(-a)^2}{a - (-a)} = \\frac{\\frac{1}{2}a^2 - \\frac{1}{2}a^2}{2a} = \\frac{0}{2a} = 0\n$$\nThe shock speed is zero, meaning the shock is stationary and remains at $x=0$. The Lax entropy condition requires that characteristics flow into the shock, which means $f'(u_L) > s > f'(u_R)$. With $f'(u) = u$, this condition becomes $a > 0 > -a$, which is true for $a>0$. Thus, the exact weak solution is a stationary entropy-satisfying shock:\n$$\nu(x,t) = u(x,0) = \\begin{cases}\na, & x < 0 \\\\\n-a, & x > 0\n\\end{cases} \\quad \\forall t \\ge 0\n$$\n\nNext, we analyze the semi-discrete DG scheme. For polynomial degree $p=0$, the DG method is equivalent to a finite volume scheme. The unknown solution $u_h(x,t)$ is approximated by a piecewise constant function, with value $U_j(t)$ on each mesh element $I_j = [x_{j-1/2}, x_{j+1/2}]$. The semi-discrete equation for the cell average $U_j$ is:\n$$\n\\frac{dU_j}{dt} = -\\frac{1}{\\Delta x_j} (\\hat{f}_{j+1/2} - \\hat{f}_{j-1/2})\n$$\nwhere $\\Delta x_j$ is the width of element $I_j$ and $\\hat{f}_{j+1/2} = \\hat{f}(U_j, U_{j+1})$ is the numerical flux at the interface $x_{j+1/2}$.\n\nThe problem states that the mesh is aligned with the discontinuity at $x=0$. This implies there is an interface, say $x_{k+1/2}$, such that $x_{k+1/2}=0$. The initial DG solution is the projection of the exact initial data onto the piecewise constant space. For any element $I_j$ entirely in $x<0$, $U_j(0)=a$. For any element $I_j$ entirely in $x>0$, $U_j(0)=-a$. So, $U_j(0)=a$ for $j \\le k$ and $U_j(0)=-a$ for $j \\ge k+1$. This discrete representation is exact for the piecewise constant solution.\n\nThe semi-discrete solution coincides with the exact solution for all time if and only if it remains stationary, i.e., $\\frac{dU_j}{dt}=0$ for all $j$. This requires the net flux for each cell to be zero: $\\hat{f}_{j+1/2} = \\hat{f}_{j-1/2}$.\n- For any cell $I_j$ with $j < k$, both its interfaces are in the region where the state is $a$. Thus $U_{j-1}=U_j=U_{j+1}=a$. By the consistency of the numerical flux, $\\hat{f}(u,u)=f(u)$, we have $\\hat{f}_{j+1/2} = f(a)$ and $\\hat{f}_{j-1/2} = f(a)$, so $\\frac{dU_j}{dt}=0$.\n- Similarly, for any cell $I_j$ with $j > k+1$, $U_{j-1}=U_j=U_{j+1}=-a$, so $\\hat{f}_{j+1/2} = f(-a)$ and $\\hat{f}_{j-1/2} = f(-a)$, yielding $\\frac{dU_j}{dt}=0$.\n- For the cell $I_k$ immediately to the left of the shock, the flux balance is $\\hat{f}_{k+1/2} = \\hat{f}_{k-1/2}$. This means $\\hat{f}(U_k, U_{k+1}) = \\hat{f}(U_{k-1}, U_k)$, which is $\\hat{f}(a, -a) = \\hat{f}(a,a) = f(a) = \\frac{1}{2}a^2$.\n- For the cell $I_{k+1}$ immediately to the right of the shock, the flux balance is $\\hat{f}_{k+3/2} = \\hat{f}_{k+1/2}$. This means $\\hat{f}(U_{k+1}, U_{k+2}) = \\hat{f}(U_k, U_{k+1})$, which is $\\hat{f}(-a, -a) = \\hat{f}(a,-a)$, or $f(-a) = \\hat{f}(a,-a)$. Since $f(-a) = \\frac{1}{2}(-a)^2 = \\frac{1}{2}a^2$, this gives the same condition.\nThus, the discrete solution remains stationary if and only if the numerical flux at the shock interface $x=0$ is $\\hat{f}(a, -a) = \\frac{1}{2}a^2$.\n\nThe problem specifies the Godunov flux. The Godunov flux $\\hat{f}^G(u_L, u_R)$ is obtained from the exact solution of the local Riemann problem. A general formula for the Godunov flux for a convex flux function $f(u)$ is:\n$$\n\\hat{f}^G(u_L, u_R) =\n\\begin{cases}\n\\min_{u \\in [u_L, u_R]} f(u) & \\text{if } u_L \\leq u_R \\text{ (rarefaction case)} \\\\\n\\max_{u \\in [u_R, u_L]} f(u) & \\text{if } u_L > u_R \\text{ (shock case)}\n\\end{cases}\n$$\nIn our case, $u_L=a$ and $u_R=-a$, so $u_L > u_R$. We must find the maximum of $f(u)=\\frac{1}{2}u^2$ on the interval $[u_R, u_L] = [-a, a]$. The function $f(u)$ is a parabola opening upwards, so its maximum on a symmetric interval $[-a,a]$ must occur at the endpoints.\n$$\n\\hat{f}^G(a,-a) = \\max_{u \\in [-a, a]} \\left(\\frac{1}{2}u^2\\right) = \\frac{1}{2}a^2\n$$\nSince the Godunov flux $\\hat{f}^G(a,-a) = \\frac{1}{2}a^2$ satisfies the condition for stationarity, we can conclude that the semi-discrete DG solution does not evolve from its initial state. The initial DG solution is a piecewise constant representation of the exact weak solution. Therefore, the semi-discrete DG solution coincides with the exact weak solution for all $t \\ge 0$.\n\nThe second part of the question asks for the value of the Godunov numerical flux at the stationary interface $x=0$. As computed above, this value is $\\frac{1}{2}a^2$.", "answer": "$$\n\\boxed{\\frac{1}{2}a^{2}}\n$$", "id": "2386810"}, {"introduction": "For wave propagation problems, a good numerical scheme must not only be stable but also accurately represent the wave's speed (dispersion) and amplitude (dissipation). This advanced practice guides you through the implementation and analysis of a DG scheme for the linear advection equation. By performing a Fourier analysis, you will learn how to derive the scheme's numerical dispersion and dissipation relations, providing powerful insight into its performance for resolving waves of different frequencies [@problem_id:3118954].", "problem": "Consider the one-dimensional linear advection partial differential equation (PDE) $u_t + a\\,u_x = 0$ on a periodic domain $x \\in [0,L]$, where $a$ is a constant advection speed. Using the discontinuous Galerkin (DG) method with upwind numerical flux, derive and implement the semi-discrete scheme on a uniform mesh with $N$ elements of size $h = L/N$, using a polynomial basis of degree $p$ on each element. Then, perform a Fourier (von Neumann) analysis to obtain, for each dimensionless cell-to-cell phase $\\theta \\in [0,2\\pi)$, the semi-discrete block symbol and its eigenvalues. From these eigenvalues, extract the numerical dispersion relation $k^\\ast(\\theta)$ and the numerical dissipation rate.\n\nFundamentals:\n- Start from the conservation law $u_t + a\\,u_x = 0$.\n- Use the DG weak form on a single element $K_j = [x_{j-\\frac{1}{2}}, x_{j+\\frac{1}{2}}]$: multiply by a test function $v$ supported on $K_j$, integrate by parts, and impose the upwind numerical flux. For $a>0$, the upwind state at an interface equals the trace from the left.\n- Map each element to the reference interval $\\hat{K} = [-1,1]$ via $x = x_j + \\frac{h}{2}\\,\\xi$, so that $\\partial_x = \\frac{2}{h}\\,\\partial_\\xi$.\n- Choose a linearly independent local basis $\\{\\phi_n(\\xi)\\}_{n=0}^p$ on $\\hat{K}$ (for example, the monomials $\\phi_n(\\xi) = \\xi^n$). Let $u_h|_{K_j}(\\xi,t) = \\sum_{n=0}^p U_{j,n}(t)\\,\\phi_n(\\xi)$.\n- Derive the element mass matrix $M \\in \\mathbb{R}^{(p+1)\\times(p+1)}$ and the volume matrix $D \\in \\mathbb{R}^{(p+1)\\times(p+1)}$ from\n  $$M_{mn} = \\int_{K_j} \\phi_m\\,\\phi_n\\,dx = \\frac{h}{2}\\int_{-1}^{1} \\phi_m(\\xi)\\,\\phi_n(\\xi)\\,d\\xi,$$\n  $$D_{mn} = \\int_{K_j} \\phi_n\\,\\partial_x \\phi_m\\,dx = \\int_{-1}^{1} \\phi_n(\\xi)\\,\\partial_\\xi\\phi_m(\\xi)\\,d\\xi.$$\n- For $a>0$, the upwind flux contributes interface terms involving basis values at element faces. Denote the vector of basis traces at the right face by $\\boldsymbol{\\phi}^R$ with entries $\\phi_m(+1)$, and at the left face by $\\boldsymbol{\\phi}^L$ with entries $\\phi_m(-1)$. The scalar evaluation of $u_h$ at the right face of element $j$ is $\\sum_{n=0}^p U_{j,n}\\,\\phi_n(+1)$. The face contribution matrices can be assembled as\n  $$B_r = \\boldsymbol{\\phi}^R\\,(\\boldsymbol{\\phi}^R)^{\\top}, \\quad B_l = \\boldsymbol{\\phi}^L\\,(\\boldsymbol{\\phi}^R)^{\\top}.$$\n- The semi-discrete DG ordinary differential equation (ODE) on element $j$ can be written as\n  $$M\\,\\frac{d\\mathbf{U}_j}{dt} = a\\left(D\\,\\mathbf{U}_j - B_r\\,\\mathbf{U}_j + B_l\\,\\mathbf{U}_{j-1}\\right),$$\n  where $\\mathbf{U}_j \\in \\mathbb{R}^{p+1}$ collects the coefficients on element $j$. The periodic boundary condition couples element indices modulo $N$.\n\nFourier analysis:\n- Assume a Fourier mode across elements of the form $\\mathbf{U}_j(t) = \\mathbf{v}\\,e^{i j \\theta}\\,e^{\\lambda t}$, where $\\theta \\in [0,2\\pi)$ is the dimensionless cell-to-cell phase and $\\lambda(\\theta)$ is a temporal growth rate. Substituting this ansatz yields the block symbol\n  $$G(\\theta) = M^{-1}\\,a\\left(D - B_r + e^{-i\\theta} B_l\\right) \\in \\mathbb{C}^{(p+1)\\times(p+1)}.$$\n- The eigenvalues $\\lambda_m(\\theta)$ of $G(\\theta)$ provide the semi-discrete dispersion and dissipation information. Define the numerical physical branch as the eigenvalue with the largest real part (closest to zero dissipation). For this branch, define\n  $$k^\\ast(\\theta) = -\\frac{\\operatorname{Im}(\\lambda(\\theta))}{a}, \\quad \\sigma(\\theta) = -\\operatorname{Re}(\\lambda(\\theta)),$$\n  where $k^\\ast(\\theta)$ is the numerical wavenumber and $\\sigma(\\theta)$ is the dissipation rate. Note that $k^\\ast$ has units of inverse length and $\\sigma$ has units of inverse time. Angles must be in radians.\n\nYour task:\n- Implement a program that, for given parameters, constructs $M$, $D$, $B_r$, and $B_l$ on the reference element using the polynomial basis $\\phi_n(\\xi) = \\xi^n$, computes $G(\\theta)$, obtains its eigenvalues, selects the physical branch (eigenvalue with the largest real part), and returns $k^\\ast(\\theta)$ and $\\sigma(\\theta)$ for specified test cases.\n- Use Gaussian quadrature that is exact for polynomials up to degree at least $2p+1$ to assemble $M$ and $D$.\n- Use $a>0$ upwinding as described. You must use radians for all angles.\n\nUnits:\n- Express $k^\\ast$ in $\\text{m}^{-1}$ and $\\sigma$ in $\\text{s}^{-1}$. Round all floating-point outputs to $8$ decimal places.\n\nTest suite:\n- Use $L = 1$ meter, $a = 1$ meter per second, and $N = 40$ elements, so $h = L/N$ meters.\n- Evaluate the following $(p,\\theta)$ pairs:\n  1. $p = 0$, $\\theta = \\pi/6$.\n  2. $p = 0$, $\\theta = \\pi$.\n  3. $p = 1$, $\\theta = 0$.\n  4. $p = 1$, $\\theta = \\pi/6$.\n  5. $p = 1$, $\\theta = \\pi/2$.\n  6. $p = 1$, $\\theta = \\pi$.\n\nRequired final output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. For each test case, append two floats in order: first $k^\\ast(\\theta)$ in $\\text{m}^{-1}$, then $\\sigma(\\theta)$ in $\\text{s}^{-1}$. The overall output should therefore contain $12$ numbers, in the order of the test suite cases listed above, each rounded to $8$ decimal places. Example format (illustrative only): $[k^\\ast_1,\\sigma_1,k^\\ast_2,\\sigma_2,\\ldots,k^\\ast_6,\\sigma_6]$.", "solution": "The problem requires the Fourier analysis of a semi-discrete discontinuous Galerkin (DG) scheme for the one-dimensional linear advection equation, $u_t + a\\,u_x = 0$, on a periodic domain $x \\in [0,L]$. The analysis aims to find the numerical dispersion relation $k^\\ast(\\theta)$ and dissipation rate $\\sigma(\\theta)$ for a given polynomial degree $p$ and cell-to-cell phase angle $\\theta$.\n\nThe DG method begins with the weak formulation on an element $K_j = [x_{j-\\frac{1}{2}}, x_{j+\\frac{1}{2}}]$. Multiplying the PDE by a test function $v$ and integrating by parts over $K_j$ yields:\n$$\n\\int_{K_j} v u_t \\,dx + [a v u]_{x_{j-\\frac{1}{2}}}^{x_{j+\\frac{1}{2}}} - \\int_{K_j} a (\\partial_x v) u \\,dx = 0\n$$\nThe flux term $[a v u]$ at the element interfaces is replaced by a numerical flux. With an upwind flux for $a>0$, the state $u$ at an interface is taken from the upwind (left) side. Let $u_h(x,t)$ be the polynomial approximation of $u(x,t)$. The weak form becomes:\n$$\n\\int_{K_j} v u_{h,t} \\,dx + a v(x_{j+\\frac{1}{2}}) u_h(x_{j+\\frac{1}{2}}^-) - a v(x_{j-\\frac{1}{2}}) u_h(x_{j-\\frac{1}{2}}^-) - \\int_{K_j} a (\\partial_x v) u_h \\,dx = 0\n$$\nThe local solution and test function are expanded in a basis $\\{\\phi_n\\}_{n=0}^p$ on a reference element $\\hat{K}=[-1,1]$ via the mapping $x = x_j + \\frac{h}{2}\\xi$, where $h=L/N$ is the element size. We use the monomial basis $\\phi_n(\\xi) = \\xi^n$. The approximation is $u_h|_{K_j}(\\xi,t) = \\sum_{n=0}^p U_{j,n}(t)\\phi_n(\\xi)$, and the test functions are $v = \\phi_m(\\xi)$ for $m=0, \\dots, p$.\n\nSubstituting these into the weak form and performing the change of variables $dx = \\frac{h}{2}d\\xi$ and $\\partial_x = \\frac{2}{h}\\partial_\\xi$, we obtain a system of ordinary differential equations (ODEs) for the coefficients $\\mathbf{U}_j = [U_{j,0}, \\dots, U_{j,p}]^T$ on element $j$. The terms are identified with matrix-vector products:\n\n1.  The time derivative term gives the mass matrix $\\mathbf{M}$:\n    $$M_{mn} = \\int_{K_j} \\phi_m \\phi_n \\,dx = \\frac{h}{2}\\int_{-1}^{1} \\phi_m(\\xi)\\phi_n(\\xi)\\,d\\xi$$\n2.  The volume integral gives the stiffness-like matrix $\\mathbf{D}$:\n    $$D_{mn} = \\int_{K_j} \\phi_n (\\partial_x \\phi_m) \\,dx = \\int_{-1}^{1} \\phi_n(\\xi)(\\partial_\\xi \\phi_m(\\xi))\\,d\\xi$$\n3.  The interface flux terms involve evaluating the basis functions at the boundaries $\\xi = \\pm 1$. The term at the right boundary $x_{j+\\frac{1}{2}}$ (where $\\xi=+1$) is $a \\phi_m(1) \\sum_n U_{j,n} \\phi_n(1)$. Let $\\boldsymbol{\\phi}^R$ be the column vector with entries $\\phi_m(1)$. This term becomes $a (\\boldsymbol{\\phi}^R \\boldsymbol{\\phi}^{R,T}) \\mathbf{U}_j = a \\mathbf{B}_r \\mathbf{U}_j$. The term at the left boundary $x_{j-\\frac{1}{2}}$ (where $\\xi=-1$) depends on the solution from the adjacent cell $j-1$, specifically $u_h(x_{j-\\frac{1}{2}}^-) = u_h(x_{(j-1)+\\frac{1}{2}}^-)$. This term is $-a \\phi_m(-1) \\sum_n U_{j-1,n} \\phi_n(1)$. Let $\\boldsymbol{\\phi}^L$ be the column vector with entries $\\phi_m(-1)$. This term becomes $-a (\\boldsymbol{\\phi}^L \\boldsymbol{\\phi}^{R,T}) \\mathbf{U}_{j-1} = -a \\mathbf{B}_l \\mathbf{U}_{j-1}$.\n\nCombining these terms, we have $\\mathbf{M} \\frac{d\\mathbf{U}_j}{dt} + a \\mathbf{B}_r \\mathbf{U}_j - a \\mathbf{B}_l \\mathbf{U}_{j-1} - a \\mathbf{D} \\mathbf{U}_j = 0$, which rearranges to the form given in the problem:\n$$\n\\mathbf{M} \\frac{d\\mathbf{U}_j}{dt} = a(\\mathbf{D}\\mathbf{U}_j - \\mathbf{B}_r \\mathbf{U}_j + \\mathbf{B}_l \\mathbf{U}_{j-1})\n$$\nThe matrices $\\mathbf{M}$ and $\\mathbf{D}$ are assembled using Gaussian quadrature with $p+1$ points, which is exact for polynomials of degree up to $2(p+1)-1 = 2p+1$. This satisfies the problem's requirement.\n\nFor the Fourier analysis, we substitute the ansatz $\\mathbf{U}_j(t) = \\mathbf{v} e^{i j \\theta} e^{\\lambda t}$, where $\\theta$ is the non-dimensional wavenumber or cell-to-cell phase angle, and $\\lambda$ is the complex temporal growth rate.\n$$\n\\lambda \\mathbf{M} \\mathbf{v} e^{i j \\theta} e^{\\lambda t} = a(\\mathbf{D}\\mathbf{v} e^{i j \\theta} e^{\\lambda t} - \\mathbf{B}_r \\mathbf{v} e^{i j \\theta} e^{\\lambda t} + \\mathbf{B}_l \\mathbf{v} e^{i (j-1) \\theta} e^{\\lambda t})\n$$\nDividing by $e^{i j \\theta} e^{\\lambda t}$ yields the generalized eigenvalue problem:\n$$\n\\lambda \\mathbf{M} \\mathbf{v} = a(\\mathbf{D} - \\mathbf{B}_r + e^{-i\\theta} \\mathbf{B}_l) \\mathbf{v}\n$$\nThis is equivalent to the standard eigenvalue problem $\\lambda \\mathbf{v} = G(\\theta) \\mathbf{v}$, where $G(\\theta)$ is the block symbol:\n$$\nG(\\theta) = a \\mathbf{M}^{-1} (\\mathbf{D} - \\mathbf{B}_r + e^{-i\\theta} \\mathbf{B}_l)\n$$\nThe eigenvalues $\\lambda_m(\\theta)$ of $G(\\theta)$ characterize the numerical scheme's behavior. The physical branch corresponds to the wave mode that should propagate. It is identified as the eigenvalue with the algebraically largest real part. If multiple eigenvalues share this maximum real part, a tie-breaking rule is necessary. We select the eigenvalue whose imaginary part is closest to that of the exact dispersion relation, $\\lambda_{\\text{exact}} = -ika = -i(\\theta/h)a$.\n\nFrom the selected physical eigenvalue $\\lambda(\\theta)$, the numerical wavenumber $k^\\ast(\\theta)$ and dissipation rate $\\sigma(\\theta)$ are defined as:\n$$\nk^\\ast(\\theta) = -\\frac{\\operatorname{Im}(\\lambda(\\theta))}{a}, \\quad \\sigma(\\theta) = -\\operatorname{Re}(\\lambda(\\theta))\n$$\nThe implementation will construct the matrices for each given $p$, form $G(\\theta)$ for each given $\\theta$, solve for its eigenvalues, select the physical branch, and compute the resulting $k^\\ast$ and $\\sigma$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef compute_dg_k_sigma(p, theta, L, a, N):\n    \"\"\"\n    Computes numerical wavenumber and dissipation for the DG scheme.\n\n    Args:\n        p (int): Polynomial degree of the basis.\n        theta (float): Cell-to-cell phase angle in radians.\n        L (float): Domain length.\n        a (float): Advection speed.\n        N (int): Number of elements.\n\n    Returns:\n        tuple[float, float]: A tuple containing the numerical wavenumber k*\n                             and the dissipation rate sigma.\n    \"\"\"\n    h = L / N\n    dim = p + 1\n\n    # Use Gaussian quadrature that is exact for polynomials of degree up to 2p+1.\n    # A rule with Nq points is exact for polynomials of degree up to 2*Nq - 1.\n    # We require 2*Nq - 1 >= 2p + 1, which implies Nq >= p + 1.\n    # We choose the minimum required number of points, Nq = p + 1.\n    num_quad_points = p + 1\n    xi_q, w_q = np.polynomial.legendre.leggauss(num_quad_points)\n\n    # Initialize element matrices\n    M = np.zeros((dim, dim))\n    D = np.zeros((dim, dim))\n\n    # Assemble Mass (M) and Volume (D) matrices using quadrature\n    for m in range(dim):\n        for n in range(dim):\n            # Integrand for mass matrix: phi_m * phi_n = xi^m * xi^n\n            m_integrand = xi_q**m * xi_q**n\n            \n            # Integrand for volume matrix: phi_n * d(phi_m)/d(xi) = xi^n * m*xi^(m-1)\n            if m > 0:\n                d_integrand = xi_q**n * m * xi_q**(m - 1)\n            else:  # for m=0, the derivative of phi_0=1 is 0\n                d_integrand = np.zeros_like(xi_q)\n\n            M[m, n] = (h / 2.0) * np.sum(w_q * m_integrand)\n            D[m, n] = np.sum(w_q * d_integrand)\n\n    # Assemble face matrices (Br, Bl)\n    # Basis traces at right (+1) and left (-1) faces\n    phi_R = np.ones(dim)\n    phi_L = np.array([(-1)**m for m in range(dim)])\n\n    Br = np.outer(phi_R, phi_R)\n    Bl = np.outer(phi_L, phi_R)\n    \n    # Invert the mass matrix\n    M_inv = np.linalg.inv(M)\n    \n    # Factor from Fourier ansatz on the neighboring cell\n    z = np.exp(-1j * theta)\n    \n    # Assemble the intermediate matrix and the block symbol G(theta)\n    H_theta = D - Br + z * Bl\n    G_theta = a * (M_inv @ H_theta)\n\n    # Compute eigenvalues of the block symbol\n    eigvals = np.linalg.eigvals(G_theta)\n\n    # Select the physical branch eigenvalue\n    real_parts = np.real(eigvals)\n    max_real = np.max(real_parts)\n    \n    # Find all eigenvalues with the maximal real part\n    candidates = eigvals[np.isclose(real_parts, max_real)]\n    \n    if len(candidates) == 1:\n        lambda_phys = candidates[0]\n    else:\n        # Tie-breaking rule for degenerate cases:\n        # Choose the eigenvalue whose imaginary part is closest to the \n        # imaginary part of the exact dispersion relation, lambda_exact = -ika.\n        # The wavenumber for a phase theta is k = theta/h.\n        imag_target = -theta * a / h\n        imag_parts = np.imag(candidates)\n        best_idx = np.argmin(np.abs(imag_parts - imag_target))\n        lambda_phys = candidates[best_idx]\n\n    # Calculate numerical wavenumber and dissipation rate\n    k_star = -np.imag(lambda_phys) / a\n    sigma = -np.real(lambda_phys)\n    \n    return k_star, sigma\n\ndef solve():\n    # Define parameters from the problem statement.\n    L = 1.0   # meters\n    a = 1.0   # meters per second\n    N = 40    # number of elements\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (0, np.pi/6),\n        (0, np.pi),\n        (1, 0.0),\n        (1, np.pi/6),\n        (1, np.pi/2),\n        (1, np.pi),\n    ]\n\n    results = []\n    for p, theta in test_cases:\n        k_star, sigma = compute_dg_k_sigma(p, theta, L, a, N)\n        results.append(round(k_star, 8))\n        results.append(round(sigma, 8))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3118954"}]}