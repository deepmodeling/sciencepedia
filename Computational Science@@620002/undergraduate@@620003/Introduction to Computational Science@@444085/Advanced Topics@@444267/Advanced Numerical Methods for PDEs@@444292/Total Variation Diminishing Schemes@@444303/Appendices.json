{"hands_on_practices": [{"introduction": "When simulating phenomena with sharp features, like shockwaves in fluid dynamics or abrupt price changes in finance, many numerical schemes can introduce spurious, non-physical oscillations. This first exercise provides the core motivation for Total Variation Diminishing (TVD) schemes, which are specifically designed to prevent this issue. By comparing the classic Lax-Wendroff scheme with the TVD-compliant Godunov and MUSCL schemes [@problem_id:3200760], you will gain a direct visual understanding of why linear high-order methods can fail and how nonlinear flux limiters provide a robust solution.", "problem": "Consider the one-dimensional scalar conservation law $u_t + f(u)_x = 0$ on the periodic domain $x \\in [0,1)$ with constant advection flux $f(u) = a\\,u$, where $a  0$ is constant. Let the discrete solution be defined on a uniform grid of $N_x$ cells with periodic boundary conditions, and let $u_i^n$ denote the cell-average approximation at cell index $i$ and time level $n$. The discrete total variation at time level $n$ is defined by\n$$\nTV(u^n) = \\sum_{i=0}^{N_x-1} \\left| u_{i+1}^n - u_i^n \\right|,\n$$\nwith periodic indexing $u_{N_x}^n \\equiv u_0^n$. A scheme is called total variation diminishing (TVD) if $TV(u^{n+1}) \\le TV(u^n)$ for all $n$ under a suitable Courant–Friedrichs–Lewy (CFL) condition.\n\nYour task is to implement and compare three finite volume time-marching schemes for the specific case $a = 1$:\n- Lax–Wendroff,\n- Godunov upwind for scalar advection with positive speed,\n- Monotonic Upstream-centered Scheme for Conservation Laws (MUSCL) with the minmod limiter in the classical flux-limiter form that satisfies Sweby’s TVD constraints for scalar advection when the Courant number lies in $[0,1]$.\n\nStart from the fundamental base of conservation, namely that the update is given by a conservative flux difference discretization on a uniform mesh, and define the Courant number by $\\nu = a\\,\\Delta t / \\Delta x$. Use periodic boundary conditions throughout.\n\nInitial data: Construct the square pulse\n$$\nu(x,0) = \\begin{cases}\n1,  x \\in [0.3, 0.7),\\\\\n0,  \\text{otherwise},\n\\end{cases}\n$$\nsampled at cell centers. Take the computational domain $[0,1)$ with $N_x$ uniform cells, cell width $\\Delta x = 1/N_x$, cell centers $x_i = (i+1/2)\\Delta x$, and time step $\\Delta t = \\nu\\,\\Delta x / a$ with $a=1$.\n\nFor each scheme, for each test case below, advance the numerical solution in time using fixed $\\Delta t$ for as many full time steps as needed so that the simulated time is at least the specified end-time $T_{\\text{end}}$. At every time level $n$ including $n=0$, compute $TV(u^n)$ and assess whether the total variation is non-increasing in time, that is, whether $TV(u^{n+1}) \\le TV(u^{n})$ holds for all performed steps $n$, up to a numerical tolerance of $\\varepsilon = 10^{-10}$ to account for floating-point roundoff.\n\nTest suite (each tuple is $(N_x,\\ \\nu,\\ T_{\\text{end}})$):\n- Case A: $(200,\\ 0.5,\\ 0.25)$,\n- Case B: $(40,\\ 0.9,\\ 0.35)$,\n- Case C: $(160,\\ 0.2,\\ 0.50)$.\n\nPrediction requirement: Based on principles of monotonicity and total variation diminishing schemes in scalar conservation laws, rationalize which of the three schemes preserve monotonicity of the numerical solution and thus should produce a non-increasing $TV(u^n)$ for these tests, and which do not. Your implemented program must numerically verify these predictions by checking monotonicity of $TV(u^n)$ sequences.\n\nFinal output requirement: Your program must produce a single line of output containing the results as a comma-separated list of nine boolean values enclosed in square brackets, ordered as\n$$\n[\\text{LW}_A,\\ \\text{GOD}_A,\\ \\text{MUSCL}_A,\\ \\text{LW}_B,\\ \\text{GOD}_B,\\ \\text{MUSCL}_B,\\ \\text{LW}_C,\\ \\text{GOD}_C,\\ \\text{MUSCL}_C],\n$$\nwhere each entry is $True$ if $TV(u^n)$ is non-increasing (within the tolerance $\\varepsilon$) for the corresponding scheme and case, and $False$ otherwise. No spaces are allowed in the printed list. All quantities are dimensionless; no physical units are required. Angles do not appear in this problem, so no angular units are needed. The required output type is a list of booleans.", "solution": "The problem statement has been critically validated and is deemed valid. It is scientifically grounded in the theory of numerical methods for hyperbolic conservation laws, well-posed with a complete and consistent set of definitions and parameters, and expressed in objective, formal language. The task is to implement and analyze three standard finite volume schemes, which is a feasible and meaningful exercise in computational science.\n\nThe objective is to solve the one-dimensional linear advection equation $u_t + a u_x = 0$ with $a=1$ on a periodic domain $x \\in [0,1)$. The update for the cell-averaged quantity $u_i^n$ in cell $i$ at time level $n$ is given by the conservative finite volume formula:\n$$\nu_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x} \\left( F_{i+1/2}^n - F_{i-1/2}^n \\right)\n$$\nwhere $F_{i+1/2}^n$ is the numerical flux at the interface between cells $i$ and $i+1$, $\\Delta x$ is the cell width, and $\\Delta t$ is the time step. The Courant number is defined as $\\nu = a \\frac{\\Delta t}{\\Delta x}$. With $a=1$, this simplifies to $\\nu = \\frac{\\Delta t}{\\Delta x}$. We will analyze the total variation diminishing (TVD) property, which requires the total variation $TV(u^n) = \\sum_{i=0}^{N_x-1} |u_{i+1}^n - u_i^n|$ to be non-increasing for all time steps $n$.\n\n**Prediction of Scheme Behavior**\n\nBased on the established theory of finite volume methods for hyperbolic laws, we can predict the behavior of each scheme regarding the TVD property.\n\n1.  **Lax–Wendroff Scheme**: This is a second-order accurate scheme in both space and time. While its higher accuracy is desirable for smooth solutions, it is a linear scheme that is well-known to not be monotonicity-preserving. Near discontinuities or steep gradients, it introduces spurious, non-physical oscillations (Gibbs phenomenon), which locally create new extrema. The creation of new extrema necessarily increases the total variation. Therefore, the Lax-Wendroff scheme is not TVD. We predict it will fail the TVD check for all test cases.\n\n2.  **Godunov's Upwind Scheme**: For the linear advection equation with positive speed $a0$, Godunov's method simplifies to the first-order upwind scheme. A key theorem by Harten states that any monotone scheme is TVD. The first-order upwind scheme is monotone under the Courant–Friedrichs–Lewy (CFL) condition $0 \\le \\nu \\le 1$. Since all test cases use $\\nu$ within this range, we predict that the Godunov scheme will be TVD for all test cases.\n\n3.  **MUSCL Scheme with Minmod Limiter**: The Monotonic Upstream-centered Scheme for Conservation Laws (MUSCL) is a high-resolution scheme designed to achieve higher-order accuracy in smooth regions while preventing oscillations at discontinuities, thereby satisfying the TVD property. This is achieved by using a non-linear \"limiter\" function. The minmod limiter is one of the most fundamental limiters that guarantees the scheme is TVD. As long as the CFL condition $0 \\le \\nu \\le 1$ is met, the scheme is proven to be TVD. We thus predict that the MUSCL implementation will pass the TVD check for all test cases.\n\n**Mathematical Formulation of Numerical Schemes**\n\nThe initial condition is a square pulse:\n$$\nu(x,0) = \\begin{cases}\n1,  x \\in [0.3, 0.7) \\\\\n0,  \\text{otherwise}\n\\end{cases}\n$$\nThe cell-average approximation $u_i^0$ is obtained by sampling this function at the cell centers $x_i = (i+1/2)\\Delta x$ for $i=0, 1, \\dots, N_x-1$. For all schemes, periodic boundary conditions are enforced, meaning indices are treated cyclically (e.g., $u_{-1}^n = u_{N_x-1}^n$ and $u_{N_x}^n = u_0^n$). For the specific case $a=1$, the flux is $f(u)=u$.\n\n1.  **Lax–Wendroff Scheme**: The numerical flux for the Lax-Wendroff scheme is derived from a second-order Taylor series expansion in time. For linear advection, this yields:\n    $$\n    F_{i+1/2}^{LW} = \\frac{1}{2}a\\left(u_i^n + u_{i+1}^n\\right) - \\frac{1}{2}\\frac{a^2 \\Delta t}{\\Delta x}\\left(u_{i+1}^n - u_i^n\\right) = \\frac{1}{2}a\\left(u_i^n + u_{i+1}^n\\right) - \\frac{1}{2}a\\nu\\left(u_{i+1}^n - u_i^n\\right)\n    $$\n\n2.  **Godunov's Upwind Scheme**: For positive advection speed $a0$, the characteristic information at an interface $x_{i+1/2}$ comes from the \"upwind\" direction, which is cell $i$. The Riemann problem at the interface has a constant solution $u_i^n$. The flux is therefore simply the flux of the upwind state:\n    $$\n    F_{i+1/2}^{GOD} = f(u_i^n) = a u_i^n\n    $$\n\n3.  **MUSCL Scheme with Minmod Limiter**: This scheme enhances the Godunov method by first reconstructing a piecewise linear representation of the data in each cell, then using this to find the state at the interface. For an upwind-biased scheme with $a0$, the flux at $x_{i+1/2}$ depends on the reconstructed state on the left side of the interface, $u_{L, i+1/2}$. This state is obtained by evolving the reconstructed linear profile within cell $i$ over half a time step. The formulation is:\n    $$\n    F_{i+1/2}^{MUSCL} = a \\, u_{L, i+1/2}^n\n    $$\n    where the interface state is given by\n    $$\n    u_{L, i+1/2}^n = u_i^n + \\frac{1}{2}(1-\\nu) \\sigma_i^n\n    $$\n    The term $\\sigma_i^n$ is the limited slope within cell $i$. For the minmod limiter, this slope is chosen to be the smallest in magnitude among the backward and forward difference slopes, and zero if they have opposite signs:\n    $$\n    \\sigma_i^n = \\text{minmod}(u_i^n - u_{i-1}^n, u_{i+1}^n - u_i^n)\n    $$\n    The minmod function is defined as:\n    $$\n    \\text{minmod}(x, y) = \\begin{cases}\n    x  \\text{if } |x|  |y| \\text{ and } xy  0 \\\\\n    y  \\text{if } |y| \\le |x| \\text{ and } xy  0 \\\\\n    0  \\text{if } xy \\le 0\n    \\end{cases}\n    $$\nThis construction ensures that no new local extrema are created, which is the condition for the scheme to be TVD.\n\n**Numerical Verification**\n\nThe implementation will simulate the advection of the square pulse for each of the three schemes and for each test case $(N_x, \\nu, T_{\\text{end}})$. At each time step, including the initial state at $n=0$, the total variation $TV(u^n)$ is computed. The sequence of $TV$ values is then checked to be non-increasing, i.e., $TV(u^{n+1}) \\le TV(u^n) + \\varepsilon$ for all steps $n$, where $\\varepsilon = 10^{-10}$ is a tolerance for floating-point arithmetic errors. The boolean result of this check for each of the nine combinations will be reported.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements and compares Lax-Wendroff, Godunov, and MUSCL schemes for the 1D\n    linear advection equation, checking their Total Variation Diminishing (TVD) property.\n    \"\"\"\n    \n    # Define the test cases from the problem statement: (Nx, nu, T_end)\n    test_cases = [\n        (200, 0.5, 0.25),  # Case A\n        (40, 0.9, 0.35),   # Case B\n        (160, 0.2, 0.50),  # Case C\n    ]\n    \n    # Define problem constants\n    a = 1.0  # Advection speed\n    epsilon = 1e-10  # Numerical tolerance for TVD check\n\n    results = []\n\n    def initialize_u(Nx):\n        \"\"\"Constructs the initial square pulse on a grid of size Nx.\"\"\"\n        x = (np.arange(Nx) + 0.5) / Nx\n        u0 = np.where((x >= 0.3)  (x  0.7), 1.0, 0.0)\n        return u0\n\n    def compute_tv(u):\n        \"\"\"Computes the total variation of a periodic array u.\"\"\"\n        u_plus_1 = np.roll(u, -1)\n        return np.sum(np.abs(u_plus_1 - u))\n\n    def minmod(x, y):\n        \"\"\"Vectorized minmod limiter function.\"\"\"\n        return (np.sign(x) + np.sign(y)) / 2.0 * np.minimum(np.abs(x), np.abs(y))\n\n    def run_simulation(scheme, u0, Nx, nu, T_end):\n        \"\"\"\n        Runs a simulation for a given scheme and returns if it's TVD.\n        \n        Args:\n            scheme (str): 'lw', 'godunov', or 'muscl'\n            u0 (np.ndarray): Initial condition array.\n            Nx (int): Number of grid points.\n            nu (float): Courant number.\n            T_end (float): End time of the simulation.\n\n        Returns:\n            bool: True if the scheme is TVD for this run, False otherwise.\n        \"\"\"\n        dx = 1.0 / Nx\n        dt = nu * dx / a\n        num_steps = int(np.ceil(T_end / dt))\n        \n        u = u0.copy()\n        tv_history = [compute_tv(u)]\n\n        for _ in range(num_steps):\n            u_im1 = np.roll(u, 1)  # u_{i-1} for all i\n            u_ip1 = np.roll(u, -1) # u_{i+1} for all i\n            \n            if scheme == 'lw':\n                # Lax-Wendroff flux\n                flux = 0.5 * a * (u + u_ip1) - 0.5 * a * nu * (u_ip1 - u)\n            elif scheme == 'godunov':\n                # Godunov (upwind for a>0) flux\n                flux = a * u\n            elif scheme == 'muscl':\n                # MUSCL with minmod limiter\n                slope_bwd = u - u_im1\n                slope_fwd = u_ip1 - u\n                limited_slope = minmod(slope_bwd, slope_fwd)\n                u_L = u + 0.5 * (1.0 - nu) * limited_slope\n                flux = a * u_L\n            else:\n                raise ValueError(\"Unknown scheme\")\n\n            flux_im1 = np.roll(flux, 1)\n            u = u - (dt / dx) * (flux - flux_im1)\n            tv_history.append(compute_tv(u))\n\n        # Check if total variation is non-increasing\n        is_tvd = all(tv_history[i] >= tv_history[i+1] - epsilon for i in range(len(tv_history) - 1))\n        return is_tvd\n\n    for Nx, nu, T_end in test_cases:\n        u0 = initialize_u(Nx)\n        \n        # Run Lax-Wendroff\n        results.append(run_simulation('lw', u0, Nx, nu, T_end))\n        \n        # Run Godunov\n        results.append(run_simulation('godunov', u0, Nx, nu, T_end))\n        \n        # Run MUSCL\n        results.append(run_simulation('muscl', u0, Nx, nu, T_end))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3200760"}, {"introduction": "The desirable properties of a numerical scheme, such as stability and non-oscillatory behavior, are not unconditional. They often depend critically on the relationship between the grid spacing $\\Delta x$ and the time step $\\Delta t$, a principle encapsulated by the Courant-Friedrichs-Lewy (CFL) condition. This practice [@problem_id:3200706] invites you to experimentally probe the limits of stability for a simple TVD scheme by purposefully violating its CFL condition. By tracking the total variation $TV(u^n)$, you will witness how it can serve as a powerful diagnostic tool, with sharp spikes revealing the precise moment a simulation loses its physical meaning and descends into numerical instability.", "problem": "Consider the one-dimensional linear advection partial differential equation (PDE) $u_t + a\\,u_x = 0$ on a periodic domain with length $L$, where $a$ is a constant advection speed. A Total Variation Diminishing (TVD) scheme is a discretization that does not increase the discrete total variation over time under appropriate conditions. The Courant–Friedrichs–Lewy (CFL) condition is expressed in terms of the CFL number $\\lambda = \\Delta t / \\Delta x$ and requires $\\lambda\\,|a| \\leq 1$ for stability in explicit monotone schemes. The discrete total variation for a grid function $u_i$ on a periodic grid is defined as $TV(u) = \\sum_i |u_{i+1} - u_i|$, where the index wraps around the domain. You will design and implement an experiment that purposefully sets $\\lambda\\,|a|  1$ in a TVD scheme and detect the onset of instability via spikes in $TV(u)$.\n\nStarting from the definitions of conservation, monotonicity, and total variation, implement a conservative, monotone upwind TVD discretization consistent with the direction of advection for the one-dimensional problem on a uniform grid with periodic boundary conditions and a nondimensionalized domain. Use a spatial grid of $N$ points over $[0,L)$ with spacing $\\Delta x = L/N$, and an explicit time-stepping scheme with time step $\\Delta t = \\lambda\\,\\Delta x/|a|$. The initial condition must be a composite signal that includes both smooth and discontinuous features, for example a combination of a sinusoidal mode and piecewise-constant patches, to ensure the total variation is well-defined and sensitive to instabilities. No physical units are required; treat all quantities as nondimensional.\n\nDefine a spike-detection rule based on the discrete total variation $TV(u^n)$ at time step $n$. Let $TV_0 = TV(u^0)$ be the initial total variation. Define a spike as the earliest time step index $n \\geq 1$ for which $TV(u^n)  \\theta\\,TV_0$ with a fixed threshold $\\theta$. Use $\\theta = 1.02$ to avoid false positives due to round-off. If no spike occurs by the final time, return $-1$.\n\nImplement the experiment for the following test suite of parameter sets, each specified as $(N, L, T, a, \\lambda)$:\n- Test case $1$: $(256, 1.0, 1.0, 1.0, 0.8)$, a stable case satisfying $\\lambda\\,|a|  1$.\n- Test case $2$: $(256, 1.0, 1.0, 1.0, 1.0)$, the boundary case $\\lambda\\,|a| = 1$.\n- Test case $3$: $(256, 1.0, 1.0, 1.0, 1.2)$, a mildly unstable case with $\\lambda\\,|a|  1$.\n- Test case $4$: $(256, 1.0, 1.0, -1.0, 1.3)$, an unstable case with negative advection speed and $\\lambda\\,|a|  1$.\n\nFor all tests, use the same initial condition $u(x)$ defined on $[0,L)$ by combining a sinusoidal component and two box functions:\n- $u(x) = 0.5 + 0.4\\sin(2\\pi x/L) + B_1(x) - 0.5\\,B_2(x)$,\n- where $B_1(x) = 1$ if $0.20L \\le x  0.35L$ and $0$ otherwise, and $B_2(x) = 1$ if $0.60L \\le x  0.68L$ and $0$ otherwise.\nThis choice produces both smooth gradients and discontinuities, which are suitable for observing TVD behavior and instability onset.\n\nYour program must compute the discrete total variation at each time step and detect the earliest spike according to the rule above. The final time $T$ determines the number of steps via $n_{\\text{steps}} = \\lceil T / \\Delta t \\rceil$. For each test case, return the earliest spike time step index as an integer, with the convention that the first time step has index $1$. If no spike is detected by $T$, return $-1$.\n\nYour program should produce a single line of output containing the results for the four test cases as a comma-separated list enclosed in square brackets, for example $[r_1,r_2,r_3,r_4]$, where each $r_k$ is the earliest spike index or $-1$.\n\nNo physical units are used in this problem; all quantities are nondimensional. Angles are measured in radians implicitly through the sinusoidal function.", "solution": "The problem requires an experimental investigation into the stability of the first-order upwind scheme for the linear advection equation $u_t + a\\,u_x = 0$. The scheme's stability is governed by the Courant–Friedrichs–Lewy (CFL) condition, and this experiment is designed to detect the onset of instability when the CFL condition is violated. Instability is detected by monitoring the discrete total variation, $TV(u)$, for a rapid increase.\n\n**Semi-Discretization: The Upwind Scheme**\n\nThe first step is to discretize the spatial derivative $u_x$ using an \"upwind\" finite difference. The choice of difference stencil depends on the direction of wave propagation, which is determined by the sign of the advection speed $a$. This ensures that the numerical scheme uses information from the direction the physical information is flowing.\n\nUsing a forward Euler time step, the update is $u_i^{n+1} = u_i^n - a (\\Delta t / \\Delta x) (u_x)_i^n$. The problem defines a parameter in the test suite (denoted as $\\lambda$ in the problem text) which corresponds to the Courant number $\\nu = |a| \\Delta t / \\Delta x$. This is because the time step is specified as $\\Delta t = \\lambda \\Delta x / |a|$, which upon substitution gives $\\nu = |a| (\\lambda \\Delta x / |a|) / \\Delta x = \\lambda$. Let's use $\\nu$ for the Courant number in this explanation.\n\n1.  **Case $a  0$ (Rightward Propagation):** Information flows from the left. We use a backward difference for the spatial derivative: $(u_x)_i^n \\approx (u_i^n - u_{i-1}^n) / \\Delta x$. The update becomes:\n    $$u_i^{n+1} = u_i^n - a \\frac{\\Delta t}{\\Delta x} (u_i^n - u_{i-1}^n) = u_i^n - \\nu (u_i^n - u_{i-1}^n) = (1-\\nu)u_i^n + \\nu u_{i-1}^n$$\n\n2.  **Case $a  0$ (Leftward Propagation):** Information flows from the right. We use a forward difference for the spatial derivative: $(u_x)_i^n \\approx (u_{i+1}^n - u_i^n) / \\Delta x$. The update becomes:\n    $$u_i^{n+1} = u_i^n - a \\frac{\\Delta t}{\\Delta x} (u_{i+1}^n - u_i^n) = u_i^n + |a| \\frac{\\Delta t}{\\Delta x} (u_{i+1}^n - u_i^n) = (1-\\nu)u_i^n + \\nu u_{i+1}^n$$\n\n**TVD Property and the CFL Condition**\n\nFor the scheme to be Total Variation Diminishing (TVD), the update must be a convex combination of the previous state's values. This means the coefficients in the update equations must be non-negative. In both cases ($a > 0$ and $a  0$), this requires $1-\\nu \\ge 0$ and $\\nu \\ge 0$. Since $\\nu$ is defined with an absolute value $|a|$, $\\nu \\ge 0$ is guaranteed. The crucial condition is $1-\\nu \\ge 0$, which simplifies to $\\nu \\le 1$.\n\nTherefore, the first-order upwind scheme is TVD (and stable) if and only if the Courant number $\\nu \\le 1$. When $\\nu > 1$, the scheme is no longer TVD and becomes unstable, leading to spurious oscillations that cause the total variation to grow exponentially.\n\n**Experiment Prediction**\n\nThe experiment detects instability by checking if $TV(u^n) > 1.02 \\times TV(u^0)$.\n\n-   **Test case 1 ($\\nu=0.8$):** The CFL condition $\\nu \\le 1$ is satisfied. The scheme is stable and TVD. The total variation should not increase. **Prediction: No spike detected (return -1).**\n-   **Test case 2 ($\\nu=1.0$):** This is the boundary of stability. The scheme is stable and TVD. Total variation should be preserved. **Prediction: No spike detected (return -1).**\n-   **Test case 3 ($\\nu=1.2$):** The CFL condition is violated. The scheme will become unstable, causing the total variation to grow rapidly. **Prediction: A spike will be detected at an early time step.**\n-   **Test case 4 ($\\nu=1.3$):** The CFL condition is violated more severely. Instability will develop very quickly. **Prediction: A spike will be detected at a very early time step.**\n\nThe provided Python code implements this logic correctly, choosing the appropriate upwind stencil based on the sign of `a`, calculating the total variation at each step, and reporting the time step index of the first detected spike.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport math\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (N, L, T, a, nu) where nu is the Courant number (denoted as lambda in the problem)\n        (256, 1.0, 1.0, 1.0, 0.8),  # Case 1: Stable\n        (256, 1.0, 1.0, 1.0, 1.0),  # Case 2: Boundary\n        (256, 1.0, 1.0, 1.0, 1.2),  # Case 3: Mildly unstable\n        (256, 1.0, 1.0, -1.0, 1.3), # Case 4: Unstable, negative a\n    ]\n\n    results = []\n    \n    # Spike detection threshold factor\n    theta = 1.02\n\n    for case in test_cases:\n        N, L, T, a, nu = case\n        \n        # Grid and time step setup\n        dx = L / N\n        if a == 0:\n            # Avoid division by zero, though not present in test cases.\n            # No advection means no instability.\n            results.append(-1)\n            continue\n            \n        dt = nu * dx / abs(a)\n        n_steps = math.ceil(T / dt)\n\n        # Spatial grid\n        x = np.linspace(0, L, N, endpoint=False)\n        \n        # Initial condition u(x, 0)\n        B1 = np.where((x >= 0.20 * L)  (x  0.35 * L), 1.0, 0.0)\n        B2 = np.where((x >= 0.60 * L)  (x  0.68 * L), 1.0, 0.0)\n        u0 = 0.5 + 0.4 * np.sin(2 * np.pi * x / L) + B1 - 0.5 * B2\n        \n        # Helper function for total variation\n        def total_variation(u_grid):\n            # Sum of absolute differences between adjacent elements with periodic wrap-around\n            return np.sum(np.abs(np.roll(u_grid, -1) - u_grid))\n\n        # Initial total variation and spike threshold\n        tv0 = total_variation(u0)\n        tv_threshold = theta * tv0\n        \n        # Time-stepping loop\n        u = u0.copy()\n        spike_step = -1\n        \n        for n in range(1, n_steps + 1):\n            # Apply first-order upwind scheme\n            if a > 0:\n                # Information comes from the left (i-1)\n                # u_new[i] = (1 - nu) * u[i] + nu * u[i-1]\n                u = (1 - nu) * u + nu * np.roll(u, 1)\n            else: # a  0\n                # Information comes from the right (i+1)\n                # u_new[i] = (1 - nu) * u[i] + nu * u[i+1]\n                u = (1 - nu) * u + nu * np.roll(u, -1)\n            \n            # Calculate total variation at current step\n            tv_n = total_variation(u)\n\n            # Check for spike\n            if tv_n > tv_threshold:\n                spike_step = n\n                break\n        \n        results.append(spike_step)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3200706"}, {"introduction": "A complete numerical solver involves discretizing both space and time. While our focus so far has been on spatial schemes that prevent oscillations, the time integration method plays an equally crucial role. This final practice [@problem_id:3200714] demonstrates that simply pairing a high-order time integrator, like a standard Runge-Kutta method, with a TVD spatial discretization can inadvertently destroy the very properties we seek to preserve. You will discover the necessity of Strong Stability Preserving (SSP) time integrators, which are uniquely constructed to maintain the TVD property through each of their stages, thus enabling the creation of genuinely stable, high-order, and non-oscillatory schemes.", "problem": "You are asked to investigate Total Variation Diminishing (TVD) behavior of Strong Stability Preserving Runge–Kutta (SSP-RK) time integrators for the one-dimensional linear advection equation, starting from first principles and core definitions.\n\nConsider the linear advection equation\n$$\nu_t + a\\,u_x = 0,\n$$\nwith constant advection speed $a0$ on the periodic domain $x \\in [0,1)$. Discretize space using a uniform grid of $N$ points with spacing $\\Delta x = 1/N$ and periodic wrap-around indexing. Use the classical upwind semi-discretization appropriate for $a0$:\n$$\n\\left(L(u)\\right)_i = -a\\,\\frac{u_i - u_{i-1}}{\\Delta x},\n$$\nwhere $i$ is the grid index and periodic wrap-around is applied for $i-1$ at the left boundary.\n\nDefine the discrete total variation of a grid function $u$ by\n$$\nTV(u) = \\sum_{i=0}^{N-1} \\left| u_{i+1} - u_i \\right|,\n$$\nwith periodic wrap-around $u_N \\equiv u_0$.\n\nTime integrate one full time step of size $\\Delta t$ using each of the following time integrators:\n- Strong Stability Preserving Runge–Kutta of order $2$ (SSP-RK2):\n  Stage $1$: $u^{(1)} = u^n + \\Delta t\\,L(u^n)$.\n  Stage $2$ (final): $u^{n+1} = \\tfrac{1}{2}\\,u^n + \\tfrac{1}{2}\\,\\big(u^{(1)} + \\Delta t\\,L(u^{(1)})\\big)$.\n- Strong Stability Preserving Runge–Kutta of order $3$ (SSP-RK3):\n  Stage $1$: $u^{(1)} = u^n + \\Delta t\\,L(u^n)$.\n  Stage $2$: $u^{(2)} = \\tfrac{3}{4}\\,u^n + \\tfrac{1}{4}\\,\\big(u^{(1)} + \\Delta t\\,L(u^{(1)})\\big)$.\n  Stage $3$ (final): $u^{n+1} = \\tfrac{1}{3}\\,u^n + \\tfrac{2}{3}\\,\\big(u^{(2)} + \\Delta t\\,L(u^{(2)})\\big)$.\n\nUse the Courant number (also called the nondimensional time step or Courant–Friedrichs–Lewy number)\n$$\n\\lambda = \\frac{a\\,\\Delta t}{\\Delta x}.\n$$\n\nYour program must do the following:\n1. Fix $N=400$ grid points and $a=1$ (dimensionless). Thus $\\Delta x = 1/N$. For a given $\\lambda$, set $\\Delta t = \\lambda\\,\\Delta x/a$.\n2. Use periodic boundary conditions implemented via periodic wrap-around index shifts.\n3. Implement two initial conditions $u^n$ on the grid $x_i = i\\,\\Delta x$, for $i=0,\\dots,N-1$:\n   - Discontinuous top-hat: $u(x)=1$ for $x \\in [0.25,0.75)$ and $u(x)=0$ otherwise.\n   - Smooth sine wave: $u(x) = \\sin(2\\pi x)$.\n4. For each time integrator (SSP-RK2 and SSP-RK3), and for each $\\lambda \\in \\{0.8, 1.0, 1.2\\}$, advance exactly one time step from $u^n$ and record the discrete total variation after each intermediate stage and at the final state $u^{n+1}$.\n5. For each run, evaluate the logical condition\n   $$\n   TV\\big(u^{(\\text{stage})}\\big) \\le TV(u^n) \\quad \\text{for every stage, including the final state}.\n   $$\n   To make this numerically robust, use a tolerance $\\varepsilon=10^{-12}$ and interpret the condition as $TV\\big(u^{(\\text{stage})}\\big) \\le TV(u^n) + \\varepsilon$ for all stages.\n6. The test suite consists of all combinations of:\n   - Initial condition in the order: top-hat, sine.\n   - Time integrator in the order: SSP-RK2, SSP-RK3.\n   - Courant number in the order: $\\lambda=0.8$, then $\\lambda=1.0$, then $\\lambda=1.2$.\n   This yields $12$ total runs.\n7. For each of the $12$ runs, output a boolean indicating whether the above stagewise TV boundedness condition holds.\n8. Final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The list must contain exactly $12$ boolean values in the order specified in item $6$. For example, a valid output format is\n   $$\n   [\\text{True},\\text{False},\\dots,\\text{True}],\n   $$\n   but with exactly $12$ boolean entries and no spaces are required.\n\nFoundational base and goal:\n- Start from the linear advection equation definition, the upwind spatial semi-discretization for $a0$, and the definition of discrete total variation. Do not assume any TVD property; you must reason from these definitions.\n- Your solution must explain, using these bases, why certain values of $\\lambda$ ensure that $TV(u^{n+1}) \\le TV(u^n)$ holds for the Forward Euler step applied to the upwind operator, and how SSP-RK2 and SSP-RK3 inherit this boundedness for their stages.\n- Your program must implement the algorithms to verify these statements numerically for the test suite.\n\nNo physical units are involved. Angles, if any, are in radians, but no angle computations are required here. All numerical values must be treated as dimensionless. The final answers must be the booleans described above, printed exactly in the required format.", "solution": "The problem is valid. A solution will be provided.\n\nThe core of the problem lies in understanding why certain numerical schemes for hyperbolic partial differential equations are \"Total Variation Diminishing\" (TVD). A TVD scheme ensures that the total variation of the solution does not increase with time. This property guarantees that the numerical solution will not generate spurious oscillations, a common issue in this context. The problem investigates this property for Strong Stability Preserving (SSP) methods. The \"strong stability\" they preserve is precisely this kind of non-linear stability property (like being TVD) of the simple Forward Euler time step under a suitable Courant-Friedrichs-Lewy (CFL) condition.\n\nFirst, let's analyze the Forward Euler time step applied to the semi-discretization. The semi-discrete equation is $\\frac{du_i}{dt} = L(u)_i$. A single Forward Euler step from $u^n$ is given by:\n$$\nu_i^{n+1} = u_i^n + \\Delta t L(u^n)_i\n$$\nSubstituting the given upwind operator $L(u)_i = -a \\frac{u_i - u_{i-1}}{\\Delta x}$ for $a>0$:\n$$\nu_i^{n+1} = u_i^n - \\Delta t \\left( a \\frac{u_i^n - u_{i-1}^n}{\\Delta x} \\right)\n$$\nUsing the definition of the Courant number, $\\lambda = \\frac{a \\Delta t}{\\Delta x}$, this simplifies to:\n$$\nu_i^{n+1} = u_i^n - \\lambda (u_i^n - u_{i-1}^n) = (1 - \\lambda) u_i^n + \\lambda u_{i-1}^n\n$$\nThis equation shows that the new value $u_i^{n+1}$ is a linear combination of its previous value $u_i^n$ and its upwind neighbor $u_{i-1}^n$. For this scheme to be TVD, the update must be a convex combination, which requires the coefficients to be non-negative and sum to $1$. The sum is $(1-\\lambda) + \\lambda = 1$. The non-negativity constraint requires $1-\\lambda \\ge 0$ and $\\lambda \\ge 0$. Since $a, \\Delta t, \\Delta x$ are positive, $\\lambda \\ge 0$ is always true. The crucial condition is $\\lambda \\le 1$.\n\nIf $0 \\le \\lambda \\le 1$, the Forward Euler step is a convex combination, which is known to be TVD. Let's prove this from the definition of total variation:\n$$\n\\begin{aligned}\nu_{i+1}^{n+1} - u_i^{n+1} = \\left( (1-\\lambda) u_{i+1}^n + \\lambda u_{i}^n \\right) - \\left( (1-\\lambda) u_i^n + \\lambda u_{i-1}^n \\right) \\\\\n= (1-\\lambda) (u_{i+1}^n - u_i^n) + \\lambda (u_i^n - u_{i-1}^n)\n\\end{aligned}\n$$\nTaking the absolute value and summing over all grid points $i$:\n$$\n\\begin{aligned}\nTV(u^{n+1}) = \\sum_i |u_{i+1}^{n+1} - u_i^{n+1}| = \\sum_i |(1-\\lambda) (u_{i+1}^n - u_i^n) + \\lambda (u_i^n - u_{i-1}^n)| \\\\\n\\le \\sum_i \\left( |1-\\lambda| |u_{i+1}^n - u_i^n| + |\\lambda| |u_i^n - u_{i-1}^n| \\right)\n\\end{aligned}\n$$\nSince $0 \\le \\lambda \\le 1$, we have $|1-\\lambda| = 1-\\lambda$ and $|\\lambda| = \\lambda$.\n$$\nTV(u^{n+1}) \\le (1-\\lambda) \\sum_i |u_{i+1}^n - u_i^n| + \\lambda \\sum_i |u_i^n - u_{i-1}^n|\n$$\nDue to the periodic domain, $\\sum_i |u_i^n - u_{i-1}^n| = \\sum_j |u_{j+1}^n - u_j^n| = TV(u^n)$. Thus:\n$$\nTV(u^{n+1}) \\le (1-\\lambda) TV(u^n) + \\lambda TV(u^n) = TV(u^n)\n$$\nThis proves that the Forward Euler step combined with the first-order upwind scheme is TVD if and only if the CFL condition $0 \\le \\lambda \\le 1$ is satisfied.\n\nNow, consider the SSP Runge-Kutta schemes. They are constructed to be representable as convex combinations of Forward Euler steps. Let $\\mathcal{F}_{FE}(u) = u + \\Delta t L(u)$ denote the Forward Euler operator. The TVD property we just established is $TV(\\mathcal{F}_{FE}(u)) \\le TV(u)$ under the condition $\\lambda \\le 1$.\nThe SSP-RK2 scheme is:\n$$\n\\begin{aligned}\nu^{(1)} = u^n + \\Delta t L(u^n) = \\mathcal{F}_{FE}(u^n) \\\\\nu^{n+1} = \\tfrac{1}{2}u^n + \\tfrac{1}{2}\\big(u^{(1)} + \\Delta t L(u^{(1)})\\big) = \\tfrac{1}{2}u^n + \\tfrac{1}{2}\\mathcal{F}_{FE}(u^{(1)})\n\\end{aligned}\n$$\nThe SSP-RK3 scheme is:\n$$\n\\begin{aligned}\nu^{(1)} = u^n + \\Delta t L(u^n) = \\mathcal{F}_{FE}(u^n) \\\\\nu^{(2)} = \\tfrac{3}{4}u^n + \\tfrac{1}{4}\\big(u^{(1)} + \\Delta t L(u^{(1)})\\big) = \\tfrac{3}{4}u^n + \\tfrac{1}{4}\\mathcal{F}_{FE}(u^{(1)}) \\\\\nu^{n+1} = \\tfrac{1}{3}u^n + \\tfrac{2}{3}\\big(u^{(2)} + \\Delta t L(u^{(2)})\\big) = \\tfrac{1}{3}u^n + \\tfrac{2}{3}\\mathcal{F}_{FE}(u^{(2)})\n\\end{aligned}\n$$\nEach stage is a convex combination of previous results. The total variation semi-norm $TV(\\cdot)$ is itself convex, meaning $TV(\\alpha u + (1-\\alpha)v) \\le \\alpha TV(u) + (1-\\alpha)TV(v)$ for $\\alpha \\in [0,1]$. We can apply this property stagewise. Assume $\\lambda \\le 1$.\n\nFor SSP-RK2:\n- Stage 1: $TV(u^{(1)}) = TV(\\mathcal{F}_{FE}(u^n)) \\le TV(u^n)$.\n- Stage 2: $TV(u^{n+1}) \\le \\tfrac{1}{2}TV(u^n) + \\tfrac{1}{2}TV(\\mathcal{F}_{FE}(u^{(1)}))$. Since $\\mathcal{F}_{FE}$ is TVD, $TV(\\mathcal{F}_{FE}(u^{(1)})) \\le TV(u^{(1)})$. Combining with the Stage 1 result, $TV(u^{n+1}) \\le \\tfrac{1}{2}TV(u^n) + \\tfrac{1}{2}TV(u^{(1)}) \\le \\tfrac{1}{2}TV(u^n) + \\tfrac{1}{2}TV(u^n) = TV(u^n)$.\n\nFor SSP-RK3:\n- Stage 1: $TV(u^{(1)}) = TV(\\mathcal{F}_{FE}(u^n)) \\le TV(u^n)$.\n- Stage 2: $TV(u^{(2)}) \\le \\tfrac{3}{4}TV(u^n) + \\tfrac{1}{4}TV(\\mathcal{F}_{FE}(u^{(1)})) \\le \\tfrac{3}{4}TV(u^n) + \\tfrac{1}{4}TV(u^{(1)}) \\le \\tfrac{3}{4}TV(u^n) + \\tfrac{1}{4}TV(u^n) = TV(u^n)$.\n- Stage 3: $TV(u^{n+1}) \\le \\tfrac{1}{3}TV(u^n) + \\tfrac{2}{3}TV(\\mathcal{F}_{FE}(u^{(2)})) \\le \\tfrac{1}{3}TV(u^n) + \\tfrac{2}{3}TV(u^{(2)}) \\le \\tfrac{1}{3}TV(u^n) + \\tfrac{2}{3}TV(u^n) = TV(u^n)$.\n\nThis analysis proves that for both SSP-RK2 and SSP-RK3, every stage is TVD provided the underlying Forward Euler step is TVD, which requires $\\lambda = a \\Delta t/\\Delta x \\le 1$. If $\\lambda > 1$, the Forward Euler step is not a convex combination and is not guaranteed to be TVD, so we expect the total variation to increase.\n\nTherefore, for the numerical experiment:\n- For $\\lambda = 0.8$ and $\\lambda = 1.0$, the condition $\\lambda \\le 1$ holds. We expect the stagewise TVD property to be satisfied, resulting in a `True` value.\n- For $\\lambda = 1.2$, the condition $\\lambda \\le 1$ is violated. We expect the total variation to increase in at least one stage, resulting in a `False` value.\n\nThe program below implements these schemes and verifies this theoretical prediction.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Investigates the Total Variation Diminishing (TVD) property of SSP-RK\n    methods for the 1D linear advection equation.\n    \"\"\"\n    # Define the parameters from the problem statement.\n    N = 400\n    a = 1.0\n    dx = 1.0 / N\n    epsilon = 1e-12\n    x_grid = np.arange(N) * dx\n\n    # Define initial condition functions.\n    def ic_top_hat(x):\n        \"\"\"Discontinuous top-hat function.\"\"\"\n        u = np.zeros_like(x)\n        u[(x >= 0.25)  (x  0.75)] = 1.0\n        return u\n\n    def ic_sine(x):\n        \"\"\"Smooth sine wave function.\"\"\"\n        return np.sin(2 * np.pi * x)\n\n    # Define the spatial operator L(u) using first-order upwind scheme.\n    def L(u, speed, delta_x):\n        \"\"\"\n        Calculates the semi-discretization L(u) for u_t = L(u).\n        Uses periodic boundary conditions via np.roll for the u_{i-1} term.\n        \"\"\"\n        return -speed * (u - np.roll(u, 1)) / delta_x\n\n    # Define the discrete Total Variation (TV).\n    def TV(u):\n        \"\"\"\n        Calculates the total variation of a grid function u.\n        Uses periodic boundary conditions via np.roll for the u_{i+1} term.\n        \"\"\"\n        return np.sum(np.abs(u - np.roll(u, -1)))\n\n    # Define time integration functions that return the TVD check result.\n    def check_ssp_rk2(u_n, courant_lambda, speed, delta_x):\n        \"\"\"\n        Performs one time step with SSP-RK2 and checks the stagewise TVD property.\n        \"\"\"\n        dt = courant_lambda * delta_x / speed\n        tv_n = TV(u_n)\n\n        # Stage 1\n        u_1 = u_n + dt * L(u_n, speed, delta_x)\n        if TV(u_1) > tv_n + epsilon:\n            return False\n\n        # Stage 2 (final)\n        u_n_plus_1 = 0.5 * u_n + 0.5 * (u_1 + dt * L(u_1, speed, delta_x))\n        if TV(u_n_plus_1) > tv_n + epsilon:\n            return False\n        \n        return True\n\n    def check_ssp_rk3(u_n, courant_lambda, speed, delta_x):\n        \"\"\"\n        Performs one time step with SSP-RK3 and checks the stagewise TVD property.\n        \"\"\"\n        dt = courant_lambda * delta_x / speed\n        tv_n = TV(u_n)\n\n        # Stage 1\n        u_1 = u_n + dt * L(u_n, speed, delta_x)\n        if TV(u_1) > tv_n + epsilon:\n            return False\n\n        # Stage 2\n        u_2 = 0.75 * u_n + 0.25 * (u_1 + dt * L(u_1, speed, delta_x))\n        if TV(u_2) > tv_n + epsilon:\n            return False\n\n        # Stage 3 (final)\n        u_n_plus_1 = (1.0/3.0) * u_n + (2.0/3.0) * (u_2 + dt * L(u_2, speed, delta_x))\n        if TV(u_n_plus_1) > tv_n + epsilon:\n            return False\n\n        return True\n\n    # Define the test suite.\n    initial_conditions = [ic_top_hat, ic_sine]\n    time_integrators = [check_ssp_rk2, check_ssp_rk3]\n    lambdas = [0.8, 1.0, 1.2]\n    \n    results = []\n\n    # Iterate through the test suite in the specified order.\n    for ic_func in initial_conditions:\n        for rk_func in time_integrators:\n            for lam in lambdas:\n                u_initial = ic_func(x_grid)\n                result = rk_func(u_initial, lam, a, dx)\n                results.append(result)\n\n    # Format the final output as specified.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3200714"}]}