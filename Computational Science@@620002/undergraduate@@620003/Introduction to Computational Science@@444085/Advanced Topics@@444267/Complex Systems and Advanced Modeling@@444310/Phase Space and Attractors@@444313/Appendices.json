{"hands_on_practices": [{"introduction": "This first exercise grounds our study in the fundamentals of phase space analysis. We will analyze a simple one-dimensional nonlinear system to practice the essential skills of identifying fixed points, determining their stability, and mapping out the corresponding basins of attraction. Mastering this analytical process [@problem_id:1662857] is foundational for understanding the long-term behavior of any dynamical system.", "problem": "A simplified one-dimensional model for the orientation of a microscopic, rod-like molecule in a shear flow is described by the first-order nonlinear differential equation for its angle $\\theta(t)$ with respect to a reference direction:\n$$\n\\frac{d\\theta}{dt} = \\sin(2\\theta)\n$$\nThe angle $\\theta$ is measured in radians and its state is considered within the closed interval $[0, \\pi]$. An attractor in this system corresponds to a stable equilibrium orientation $\\theta^*$ which the molecule will approach as time $t \\to \\infty$ if its initial orientation $\\theta(0)$ is within a specific range. This set of initial orientations, for which the system evolves towards a particular attractor, is called the basin of attraction for that attractor.\n\nFor the dynamical system defined by the equation above on the domain $\\theta \\in [0, \\pi]$, identify all attractors and their corresponding basins of attraction from the options below.\n\nA. Attractor: $\\theta = \\pi/2$. Basin: $[0, \\pi]$.\n\nB. Attractors: $\\theta = 0, \\pi$. Basins: $\\{0\\}$ for $\\theta=0$ and $\\{\\pi\\}$ for $\\theta=\\pi$.\n\nC. Attractor: $\\theta = \\pi/2$. Basin: $(0, \\pi)$.\n\nD. Attractors: $\\theta=0, \\pi/2, \\pi$. Their respective basins are $\\{0\\}$, $(0, \\pi)$, and $\\{\\pi\\}$.\n\nE. Attractors: $\\theta = 0, \\pi$. Basins: $[0, \\pi/2)$ for $\\theta=0$ and $(\\pi/2, \\pi]$ for $\\theta=\\pi$.", "solution": "To solve this problem, we need to find the fixed points of the dynamical system, determine their stability to identify the attractors, and then find the set of initial conditions that flow to each attractor, which is its basin of attraction.\n\n**Step 1: Find the fixed points**\nFixed points, denoted by $\\theta^*$, are the equilibrium solutions where the rate of change of the angle is zero. We find them by setting $\\frac{d\\theta}{dt} = 0$.\n$$\n\\sin(2\\theta^*) = 0\n$$\nThe general solution for this equation is $2\\theta^* = k\\pi$, where $k$ is an integer. This gives $\\theta^* = \\frac{k\\pi}{2}$. We are interested in the fixed points within the specified domain $\\theta \\in [0, \\pi]$.\n\nFor $k=0$, $\\theta^* = 0$.\nFor $k=1$, $\\theta^* = \\pi/2$.\nFor $k=2$, $\\theta^* = \\pi$.\nFor $k=3$, $\\theta^* = 3\\pi/2$, which is outside the domain $[0, \\pi]$.\n\nThus, the fixed points in the interval $[0, \\pi]$ are $\\theta^* = 0$, $\\theta^* = \\pi/2$, and $\\theta^* = \\pi$.\n\n**Step 2: Analyze the stability of the fixed points**\nTo determine if a fixed point is an attractor (stable) or a repeller (unstable), we use linear stability analysis. Let $f(\\theta) = \\sin(2\\theta)$. A fixed point $\\theta^*$ is stable if $f'(\\theta^*) < 0$ and unstable if $f'(\\theta^*) > 0$.\n\nFirst, we calculate the derivative of $f(\\theta)$:\n$$\nf'(\\theta) = \\frac{d}{d\\theta}(\\sin(2\\theta)) = 2\\cos(2\\theta)\n$$\nNow, we evaluate this derivative at each fixed point:\n\n- At $\\theta^* = 0$:\n  $f'(0) = 2\\cos(2 \\cdot 0) = 2\\cos(0) = 2(1) = 2$.\n  Since $f'(0) > 0$, the fixed point at $\\theta=0$ is unstable.\n\n- At $\\theta^* = \\pi/2$:\n  $f'(\\pi/2) = 2\\cos(2 \\cdot \\pi/2) = 2\\cos(\\pi) = 2(-1) = -2$.\n  Since $f'(\\pi/2) < 0$, the fixed point at $\\theta=\\pi/2$ is stable. This is an attractor.\n\n- At $\\theta^* = \\pi$:\n  $f'(\\pi) = 2\\cos(2 \\cdot \\pi) = 2\\cos(2\\pi) = 2(1) = 2$.\n  Since $f'(\\pi) > 0$, the fixed point at $\\theta=\\pi$ is unstable.\n\nFrom this analysis, we conclude that there is only one attractor in the domain $[0, \\pi]$, which is at $\\theta = \\pi/2$.\n\n**Step 3: Determine the basin of attraction**\nThe basin of attraction for the attractor at $\\theta = \\pi/2$ is the set of all initial conditions $\\theta(0)$ in the domain $[0, \\pi]$ such that the solution $\\theta(t)$ converges to $\\pi/2$ as $t \\to \\infty$.\n\nWe have a one-dimensional system with an attractor at $\\pi/2$ and repellers at $0$ and $\\pi$. We can analyze the direction of flow in the intervals between these fixed points by checking the sign of $\\dot{\\theta} = \\sin(2\\theta)$.\n\n- For $\\theta \\in (0, \\pi/2)$: The argument $2\\theta$ is in $(0, \\pi)$, where the sine function is positive. So, $\\dot{\\theta} = \\sin(2\\theta) > 0$. This means that if the system starts in this interval, $\\theta(t)$ will increase over time, moving away from the repeller at $0$ and towards the attractor at $\\pi/2$.\n\n- For $\\theta \\in (\\pi/2, \\pi)$: The argument $2\\theta$ is in $(\\pi, 2\\pi)$, where the sine function is negative. So, $\\dot{\\theta} = \\sin(2\\theta) < 0$. This means that if the system starts in this interval, $\\theta(t)$ will decrease over time, moving away from the repeller at $\\pi$ and towards the attractor at $\\pi/2$.\n\nAny initial condition $\\theta(0)$ in the open interval $(0, \\pi)$ will therefore evolve towards $\\theta = \\pi/2$. The points $\\theta=0$ and $\\theta=\\pi$ are fixed points themselves; if the system starts exactly at one of these points, it will remain there and not move towards $\\pi/2$.\n\nTherefore, the basin of attraction for the attractor $\\theta = \\pi/2$ is the open interval $(0, \\pi)$.\n\n**Step 4: Compare with the given options**\nOur findings are:\n- One attractor at $\\theta = \\pi/2$.\n- Its basin of attraction is the interval $(0, \\pi)$.\n\nThis matches option C.\nA is incorrect because the basin boundaries are repellers and are not included.\nB is incorrect because it identifies the unstable fixed points as attractors.\nD is incorrect because it identifies all fixed points as attractors.\nE is incorrect for the same reason as B, and the basins are also incorrect.\n\nThe correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1662857"}, {"introduction": "Having explored a simple system, we now confront the intricate behavior of a more complex one: the forced, damped pendulum. This problem provides a striking demonstration of sensitive dependence on initial conditions, a key feature of systems that can exhibit chaos. By examining pairs of initial conditions [@problem_id:1720620] that are incredibly close yet lead to vastly different long-term futures, you will develop a tangible intuition for the complex and often fractal nature of basin boundaries.", "problem": "A forced, damped pendulum is a classic example of a system that can exhibit chaotic behavior. Its angular position $\\theta(t)$ is governed by the second-order nonlinear differential equation:\n$$ \\frac{d^2\\theta}{dt^2} + q \\frac{d\\theta}{dt} + \\sin(\\theta) = F \\cos(\\omega t) $$\nwhere $q$ is the damping coefficient, $F$ is the amplitude of the driving force, and $\\omega$ is the driving frequency. For this problem, all angles are measured in radians and angular velocities in rad/s.\n\nWe consider a specific set of parameters, $q=0.5$, $F=1.2$, and $\\omega = 2/3$, for which the pendulum has multiple coexisting long-term behaviors, known as attractors. After a sufficient amount of time, the system's trajectory in the $(\\theta, \\dot{\\theta})$ phase space will settle onto one of these attractors. We are interested in two of them:\n1.  **The Oscillating Attractor ($A_0$):** The pendulum settles into a periodic oscillation about a fixed angular range. The long-term average angular velocity is zero, i.e., $\\lim_{T\\to\\infty} \\frac{\\theta(T) - \\theta(0)}{T} = 0$.\n2.  **The Rotating Attractor ($A_+$):** The pendulum settles into a motion where it continuously rotates in the counter-clockwise direction. The long-term average angular velocity is positive, i.e., $\\lim_{T\\to\\infty} \\frac{\\theta(T) - \\theta(0)}{T} > 0$.\n\nThe basin of attraction for each attractor is the set of all initial conditions $(\\theta_0, v_0) = (\\theta(0), \\dot{\\theta}(0))$ that evolve to that attractor. These basins can have complex, fractal boundaries. Your task is to identify a pair of initial conditions that demonstrates extreme sensitivity to the initial state, characteristic of such boundaries.\n\nBelow are four options, each containing two initial points, Point 1 and Point 2, and their corresponding long-term attractor as determined by numerical simulation. Which option presents a pair of points that are separated by a phase-space distance $d = \\sqrt{(\\Delta\\theta_0)^2 + (\\Delta v_0)^2}$ of less than $5 \\times 10^{-4}$ and yet evolve to two different attractors?\n\nA.\nPoint 1: $(\\theta_0, v_0) = (1.5000, 1.0000) \\to A_0$\nPoint 2: $(\\theta_0, v_0) = (1.5002, 1.0001) \\to A_0$\n\nB.\nPoint 1: $(\\theta_0, v_0) = (2.1000, 0.8000) \\to A_0$\nPoint 2: $(\\theta_0, v_0) = (2.1000, 0.8010) \\to A_+$\n\nC.\nPoint 1: $(\\theta_0, v_0) = (-0.7531, 1.2142) \\to A_+$\nPoint 2: $(\\theta_0, v_0) = (-0.7533, 1.2140) \\to A_0$\n\nD.\nPoint 1: $(\\theta_0, v_0) = (0.0000, 1.9080) \\to A_+$\nPoint 2: $(\\theta_0, v_0) = (-0.0005, 1.9084) \\to A_0$", "solution": "We are asked to select the option where two initial conditions are within a phase-space Euclidean distance threshold while converging to different attractors. The given distance is\n$$\nd=\\sqrt{(\\Delta\\theta_{0})^{2}+(\\Delta v_{0})^{2}}.\n$$\nWe evaluate each option:\n\nOption A:\n$$\n\\Delta\\theta_{0}=1.5002-1.5000=2\\times 10^{-4},\\quad \\Delta v_{0}=1.0001-1.0000=1\\times 10^{-4}.\n$$\nThus\n$$\nd=\\sqrt{(2\\times 10^{-4})^{2}+(1\\times 10^{-4})^{2}}=\\sqrt{5\\times 10^{-8}}=\\sqrt{5}\\times 10^{-4}5\\times 10^{-4}\n$$\nsince $\\sqrt{5}5$. However, both points go to $A_0$, so they do not exhibit different attractors.\n\nOption B:\n$$\n\\Delta\\theta_{0}=0,\\quad \\Delta v_{0}=0.8010-0.8000=1\\times 10^{-3}.\n$$\nThus\n$$\nd=\\sqrt{0+(1\\times 10^{-3})^{2}}=1\\times 10^{-3}>5\\times 10^{-4}.\n$$\nThe distance threshold is not satisfied.\n\nOption C:\n$$\n\\Delta\\theta_{0}=-0.7533-(-0.7531)=-2\\times 10^{-4},\\quad \\Delta v_{0}=1.2140-1.2142=-2\\times 10^{-4}.\n$$\nThus\n$$\nd=\\sqrt{(2\\times 10^{-4})^{2}+(2\\times 10^{-4})^{2}}=\\sqrt{8\\times 10^{-8}}=\\sqrt{8}\\times 10^{-4}=2\\sqrt{2}\\times 10^{-4}5\\times 10^{-4},\n$$\nbecause $(2\\sqrt{2})^{2}=825=5^{2}$. The attractors differ: $A_{+}$ vs $A_{0}$. This satisfies both the distance and differing-attractor conditions.\n\nOption D:\n$$\n\\Delta\\theta_{0}=-0.0005-0.0000=-5\\times 10^{-4},\\quad \\Delta v_{0}=1.9084-1.9080=4\\times 10^{-4}.\n$$\nThus\n$$\nd=\\sqrt{(-5\\times 10^{-4})^{2}+(4\\times 10^{-4})^{2}}=\\sqrt{41\\times 10^{-8}}=\\sqrt{41}\\times 10^{-4}>5\\times 10^{-4},\n$$\nsince $41>25$. The distance threshold is not met.\n\nTherefore, only Option C presents two initial conditions within the specified distance that evolve to different attractors.", "answer": "$$\\boxed{C}$$", "id": "1720620"}, {"introduction": "Our final practice moves from analysis and interpretation to creation. Here, you will build a computational tool to automatically classify the long-term behavior of two-dimensional systems, an approach rooted in the powerful Poincaré-Bendixson theorem. This exercise [@problem_id:3172607] challenges you to translate theoretical concepts—like fixed points, limit cycles, and trapped trajectories—into a concrete, working algorithm, embodying the core practice of computational science.", "problem": "Implement a complete and runnable program that, for a given set of two-dimensional autonomous dynamical systems of ordinary differential equations, performs a computational test grounded in the Poincaré–Bendixson framework to rule out chaotic attractors in the plane and to classify long-time behavior as either convergence to a fixed point attractor or to a limit cycle attractor. The program must rely only on the foundational definitions of planar flows and attractors and on general numerical integration, without using any shortcut formulas. The goal is to derive an algorithmic decision process from first principles and implement it.\n\nYou must start from the following fundamental base: the definition of a planar autonomous system $\\dot{\\mathbf{x}}=\\mathbf{f}(\\mathbf{x})$ with $\\mathbf{x}\\in\\mathbb{R}^2$; the definition of a trajectory $\\mathbf{x}(t)$ determined by an initial condition $\\mathbf{x}(0)=\\mathbf{x}_0$; the definitions of a fixed point (equilibrium) as a point $\\mathbf{x}^\\star$ with $\\mathbf{f}(\\mathbf{x}^\\star)=\\mathbf{0}$; a periodic orbit as a nonconstant solution $\\mathbf{x}(t)$ satisfying $\\mathbf{x}(t+T)=\\mathbf{x}(t)$ for some period $T0$; and the formal statement that, in two dimensions, chaotic attractors are ruled out for continuous-time autonomous flows by the classical results underlying the Poincaré–Bendixson theory. The algorithm must be derived from these definitions by: (i) numerically integrating the flow to test whether a trajectory is trapped in a compact rectangle, (ii) testing for convergence to an equilibrium using vanishing velocity and shrinking spatial spread, and (iii) testing for approach to a periodic orbit using recurrence analysis consistent with the notion of a Poincaré return (for example, via an autocorrelation-based periodicity test on the long-time signal). Do not compute eigenvalues or invoke linearization shortcuts; stay at the level of the definitions and time-series logic.\n\nYour program must implement the following decision logic for a single system:\n- Given $\\dot{\\mathbf{x}}=\\mathbf{f}(\\mathbf{x})$, a rectangular region $R=[x_{\\min},x_{\\max}]\\times [y_{\\min},y_{\\max}]$, an initial condition $\\mathbf{x}_0$, a total integration time $T0$, and a uniform sampling step $\\Delta t0$:\n  1) Numerically integrate from $t=0$ to $t=T$ and check if $\\mathbf{x}(t)\\in R$ for all $t\\in[0,T]$. If the numerical trajectory leaves $R$ at any time in $[0,T]$, classify the case as $0$.\n  2) If the trajectory remains within $R$ over $[0,T]$, use the last portion of the trajectory (for example, the last fraction of samples) to decide:\n     - If both the average speed $\\|\\dot{\\mathbf{x}}(t)\\|$ over that window is small and the spatial spread of the points in that window is small, classify as a fixed point attractor and output $1$.\n     - Otherwise, if the long-time signal exhibits clear periodicity, consistent with a Poincaré return notion (for example, a strong nonzero-lag peak in the normalized autocorrelation of one coordinate after detrending), classify as a limit cycle attractor and output $2$.\n     - If neither test is conclusive, output $0$.\nUse only these criteria derived from the definitions and do not rely on any external oracle.\n\nTest suite:\nYour program must evaluate the following three systems and aggregate their integer classifications into a single output list.\n\n- Test case $\\mathbf{1}$ (Van der Pol oscillator): $\\dot{x}=y$, $\\dot{y}=\\mu\\,(1-x^2)\\,y - x$, with $\\mu=1.5$. Use $R=[-3,3]\\times[-3,3]$, initial condition $\\mathbf{x}_0=(2,0)$, total time $T=60$, and sampling step $\\Delta t=0.02$.\n- Test case $\\mathbf{2}$ (Linear sink): $\\dot{x}=-a\\,x$, $\\dot{y}=-b\\,y$, with $a=1$ and $b=2$. Use $R=[-5,5]\\times[-5,5]$, initial condition $\\mathbf{x}_0=(3,-4)$, total time $T=20$, and sampling step $\\Delta t=0.02$.\n- Test case $\\mathbf{3}$ (Linear source, unbounded): $\\dot{x}=x$, $\\dot{y}=y$. Use $R=[-2,2]\\times[-2,2]$, initial condition $\\mathbf{x}_0=(1,1)$, total time $T=10$, and sampling step $\\Delta t=0.02$.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the test cases, for example, $[r_1,r_2,r_3]$ where each $r_k\\in\\{0,1,2\\}$ is an integer classification for test case $k$ according to the rules above. No other text should be printed.", "solution": "The user has provided a problem that is scientifically grounded, well-posed, and objective. It is rooted in the established principles of dynamical systems theory, specifically the Poincaré–Bendixson theorem concerning the behavior of planar autonomous systems. The problem is complete, providing all necessary differential equations, initial conditions, parameters, and a clear algorithmic framework for classifying the long-term behavior of trajectories. The task is to implement this framework, which is a standard exercise in computational science. The problem is valid.\n\nThe solution will be a direct implementation of the decision logic specified in the problem statement. This involves three primary steps for each dynamical system: numerical integration, a check for whether the trajectory remains trapped in a defined region, and a classification of the long-term behavior as either convergence to a fixed point or a limit cycle based on an analysis of the final portion of the trajectory.\n\n**1. Numerical Integration**\nThe core of the analysis is the trajectory $\\mathbf{x}(t)=(x(t), y(t))$ of the system $\\dot{\\mathbf{x}} = \\mathbf{f}(\\mathbf{x})$ starting from an initial condition $\\mathbf{x}_0$. Since analytic solutions are generally not available, we must generate a numerical approximation of the trajectory. We will use a robust numerical ordinary differential equation (ODE) solver for this purpose. The `scipy.integrate.solve_ivp` function, which implements high-order adaptive step-size methods (like Runge-Kutta), is an excellent choice. We will request the solution at a uniform set of time points $t_i = i \\cdot \\Delta t$ for $i=0, 1, \\dots, N-1$ where $N=T/\\Delta t$, as specified.\n\n**2. Algorithmic Classification**\nThe problem mandates a specific classification algorithm. Let the given rectangular region be $R = [x_{\\min}, x_{\\max}] \\times [y_{\\min}, y_{\\max}]$.\n\n**Step 2a: Trapping Test**\nThis is the first gate in the decision logic. After computing the trajectory $\\mathbf{x}(t_i)$ for all $i$, we must verify if the trajectory remains within the region $R$ for the entire integration time $T$. This is performed by checking if $x_{\\min} \\le x(t_i) \\le x_{\\max}$ and $y_{\\min} \\le y(t_i) \\le y_{\\max}$ for all sample points $t_i$. If the trajectory is found to leave the box at any point, its behavior is classified as unbounded with respect to $R$, and the algorithm assigns the classification code $0$.\n\n**Step 2b: Fixed Point vs. Limit Cycle Analysis**\nIf the trajectory remains trapped within $R$, we proceed to analyze its long-term behavior. This analysis focuses on the final portion of the trajectory, for instance, the last $50\\%$ of the data points. Let this sub-trajectory be denoted as $\\mathbf{x}_{\\text{final}}(t)$.\n\n**Fixed Point Attractor Test (Classification 1):**\nA trajectory converging to a stable fixed point $\\mathbf{x}^\\star$ is characterized by two properties: its velocity $\\dot{\\mathbf{x}}(t) = \\mathbf{f}(\\mathbf{x}(t))$ must approach zero, and its position $\\mathbf{x}(t)$ must approach the constant vector $\\mathbf{x}^\\star$. We can test this numerically:\n1.  **Vanishing Velocity:** We compute the speed, $\\|\\dot{\\mathbf{x}}(t)\\| = \\sqrt{\\dot{x}(t)^2 + \\dot{y}(t)^2}$, for each point in the analysis window $\\mathbf{x}_{\\text{final}}(t)$. If the trajectory is approaching a fixed point, the average speed over this window should be close to zero. We test if $\\text{mean}(\\|\\dot{\\mathbf{x}}_{\\text{final}}(t)\\|)  \\epsilon_{\\text{speed}}$, where $\\epsilon_{\\text{speed}}$ is a small positive threshold (e.g., $10^{-3}$).\n2.  **Shrinking Spatial Spread:** The points in the analysis window $\\mathbf{x}_{\\text{final}}(t)$ should be clustered in a very small region. We can quantify this by measuring the spatial range of the points. Let $\\Delta x = \\max(x_{\\text{final}}) - \\min(x_{\\text{final}})$ and $\\Delta y = \\max(y_{\\text{final}}) - \\min(y_{\\text{final}})$. The total spread can be taken as $\\sqrt{\\Delta x^2 + \\Delta y^2}$. If this spread is below a small threshold $\\epsilon_{\\text{spread}}$ (e.g., $10^{-2}$), the trajectory is considered to be localized.\n\nIf both the average speed and the spatial spread are below their respective thresholds, we classify the attractor as a fixed point (code $1$).\n\n**Limit Cycle Attractor Test (Classification 2):**\nIf the fixed point test fails, the system might be converging to a limit cycle. A limit cycle is a periodic orbit. Therefore, the time series of its coordinates, such as $x(t)$, should be periodic in the long run. We test for periodicity using autocorrelation, which is consistent with the concept of a Poincaré return map.\n1.  **Signal Preparation:** We take one coordinate from the analysis window, say $x_{\\text{final}}(t)$, and detrend it by subtracting its mean value. This centers the signal around zero, improving the reliability of the autocorrelation analysis.\n2.  **Autocorrelation:** We compute the normalized autocorrelation of the detrended signal. The autocorrelation function measures the similarity of the signal with a time-lagged version of itself. For a periodic signal with period $P$, the autocorrelation will exhibit strong peaks at lags corresponding to integer multiples of $P$.\n3.  **Peak Detection:** We search for a significant peak in the autocorrelation function at a non-zero lag. The normalization ensures the peak at lag $0$ is $1$. A \"strong\" peak is one whose height exceeds a certain threshold (e.g., $0.3$). To avoid spurious peaks near lag zero due to slow decay, we begin our search after a small number of lag steps. If such a peak is found, it is strong evidence of periodicity.\n\nIf a significant non-zero lag peak is detected in the autocorrelation, we classify the attractor as a limit cycle (code $2$).\n\n**Inconclusive Case (Classification 0):**\nIf the trajectory is trapped but fails both the fixed point and limit cycle tests, the outcome is considered inconclusive under the given criteria, and it is classified with code $0$.\n\nThis complete, principle-driven procedure avoids shortcuts like linearization and instead relies on analyzing the geometric and temporal properties of the numerically generated trajectory itself, as required by the problem statement.", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef solve():\n    \"\"\"\n    Main function to run the classification for all test cases.\n    \"\"\"\n\n    def classify_system(f, x0, rect, T, dt):\n        \"\"\"\n        Classifies the long-term behavior of a 2D autonomous system.\n\n        Args:\n            f: The vector field function f(t, x) where x is a 2-element array.\n            x0: The initial condition [x0, y0].\n            rect: The bounding rectangle [xmin, xmax, ymin, ymax].\n            T: Total integration time.\n            dt: Time step for sampling.\n\n        Returns:\n            An integer classification:\n            0: Unbounded or inconclusive.\n            1: Fixed point attractor.\n            2: Limit cycle attractor.\n        \"\"\"\n        xmin, xmax, ymin, ymax = rect\n        t_eval = np.arange(0, T, dt)\n\n        # 1. Numerically integrate the system\n        try:\n            sol = solve_ivp(f, [0, T], x0, t_eval=t_eval, dense_output=True, method='RK45')\n            if sol.status != 0: # Check for integration failure\n                return 0\n        except Exception:\n            return 0\n        \n        # Ensure solution covers the full time span\n        if sol.t[-1]  T - dt:\n            return 0\n\n        traj_x, traj_y = sol.y\n\n        # 2. Trapping Test: Check if trajectory leaves the rectangle R\n        if np.any(traj_x  xmin) or np.any(traj_x  xmax) or \\\n           np.any(traj_y  ymin) or np.any(traj_y  ymax):\n            return 0  # Classification 0: Left the box\n\n        # 3. Analyze the last portion of the trajectory\n        analysis_frac = 0.5\n        n_pts = len(t_eval)\n        start_idx = int(n_pts * (1.0 - analysis_frac))\n        \n        analysis_window_traj = sol.y[:, start_idx:]\n        \n        # 3a. Fixed Point Test\n        # Thresholds for speed and spatial spread\n        speed_thresh = 1e-3\n        spread_thresh = 1e-2\n\n        # Calculate velocities in the analysis window\n        velocities = f(None, analysis_window_traj) # f is autonomous\n        speeds = np.linalg.norm(velocities, axis=0)\n        avg_speed = np.mean(speeds)\n\n        # Calculate spatial spread in the analysis window\n        spread_x = np.max(analysis_window_traj[0]) - np.min(analysis_window_traj[0])\n        spread_y = np.max(analysis_window_traj[1]) - np.min(analysis_window_traj[1])\n        spatial_spread = np.sqrt(spread_x**2 + spread_y**2)\n\n        if avg_speed  speed_thresh and spatial_spread  spread_thresh:\n            return 1  # Classification 1: Fixed point\n\n        # 3b. Limit Cycle Test using Autocorrelation\n        # Thresholds for autocorrelation peak\n        acorr_peak_thresh = 0.3\n        min_lag_idx = 10  # Ignore initial decay near lag 0\n\n        signal = analysis_window_traj[0]\n        signal_detrended = signal - np.mean(signal)\n        \n        # Handle case where signal has zero variance\n        if np.var(signal_detrended)  1e-10:\n             return 0 # Not a limit cycle\n        \n        autocorr = np.correlate(signal_detrended, signal_detrended, mode='full')\n        \n        # Normalize by value at lag 0\n        lag_0_val = autocorr[len(signal_detrended)-1]\n        if lag_0_val  1e-10: return 0\n        \n        autocorr_normalized = autocorr / lag_0_val\n        \n        positive_lags_corr = autocorr_normalized[len(signal_detrended):]\n\n        # Simple peak finding logic\n        for i in range(min_lag_idx + 1, len(positive_lags_corr) - 1):\n            is_peak = positive_lags_corr[i]  positive_lags_corr[i-1] and \\\n                      positive_lags_corr[i]  positive_lags_corr[i+1]\n            if is_peak and positive_lags_corr[i]  acorr_peak_thresh:\n                return 2  # Classification 2: Limit cycle\n\n        # 3c. Inconclusive Case\n        return 0\n\n    # --- Test Cases ---\n\n    # Case 1: Van der Pol oscillator\n    def vdp_oscillator(t, xy):\n        x, y = xy\n        mu = 1.5\n        dxdt = y\n        dydt = mu * (1 - x**2) * y - x\n        return np.array([dxdt, dydt])\n    \n    case1 = {\n        \"f\": vdp_oscillator, \"x0\": [2.0, 0.0],\n        \"rect\": [-3.0, 3.0, -3.0, 3.0], \"T\": 60.0, \"dt\": 0.02\n    }\n\n    # Case 2: Linear sink\n    def linear_sink(t, xy):\n        x, y = xy\n        a, b = 1.0, 2.0\n        dxdt = -a * x\n        dydt = -b * y\n        return np.array([dxdt, dydt])\n    \n    case2 = {\n        \"f\": linear_sink, \"x0\": [3.0, -4.0],\n        \"rect\": [-5.0, 5.0, -5.0, 5.0], \"T\": 20.0, \"dt\": 0.02\n    }\n    \n    # Case 3: Linear source\n    def linear_source(t, xy):\n        x, y = xy\n        dxdt = x\n        dydt = y\n        return np.array([dxdt, dydt])\n    \n    case3 = {\n        \"f\": linear_source, \"x0\": [1.0, 1.0],\n        \"rect\": [-2.0, 2.0, -2.0, 2.0], \"T\": 10.0, \"dt\": 0.02\n    }\n\n    test_cases = [case1, case2, case3]\n    results = []\n\n    for case in test_cases:\n        result = classify_system(\n            case[\"f\"], case[\"x0\"], case[\"rect\"], case[\"T\"], case[\"dt\"]\n        )\n        results.append(result)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "3172607"}]}