{"hands_on_practices": [{"introduction": "To begin, let's ground our understanding in a classic scenario. This first practice [@problem_id:2223397] demonstrates how the assignment problem appears in everyday resource allocation, such as pairing individuals based on compatibility. By working through this intuitive example, you will learn to identify the core components of an assignment problem—agents, tasks, and costs (or rewards)—and see how a simple case can be solved to find the optimal matching.", "problem": "A technology company, Code-Forge Solutions, is launching its annual mentorship program. Four new apprentice developers—Ben, Chloe, David, and Emily—are to be paired with four available senior engineers for one-on-one mentorship. The senior engineers are Dr. Alvarez, Dr. Borges, Dr. Chen, and Dr. Dupont. To ensure the most effective mentorship, the program director has assessed a \"skill-compatibility score\" for each possible apprentice-mentor pairing. The scores, on a scale of 0 to 100, are given in the table below.\n\n| Apprentice | Dr. Alvarez | Dr. Borges | Dr. Chen | Dr. Dupont |\n| :---------- | :---------- | :--------- | :------- | :--------- |\n| Ben         | 82          | 85         | 70       | 90         |\n| Chloe       | 78          | 82         | 81       | 75         |\n| David       | 75          | 77         | 92       | 80         |\n| Emily       | 88          | 79         | 73       | 84         |\n\nEach apprentice must be assigned to exactly one senior engineer, and each senior engineer must mentor exactly one apprentice. Your task is to determine the assignment of apprentices to mentors that maximizes the sum of the skill-compatibility scores. What is this maximum possible total score?", "solution": "Let $S$ denote the score matrix with rows indexed by apprentices $\\{ \\text{Ben}, \\text{Chloe}, \\text{David}, \\text{Emily} \\}$ and columns indexed by mentors $\\{ \\text{Alvarez}, \\text{Borges}, \\text{Chen}, \\text{Dupont} \\}$. An assignment is a bijection $\\sigma$ from apprentices to mentors, and the total score for $\\sigma$ is\n$$\nT(\\sigma)=\\sum_{\\text{apprentice } a} S\\bigl(a,\\sigma(a)\\bigr).\n$$\nFor any assignment, each apprentice contributes at most the maximum entry in their row, hence\n$$\nT(\\sigma) \\leq \\sum_{\\text{apprentice } a} \\max_{\\text{mentor } m} S(a,m).\n$$\nCompute the row maxima:\n- For Ben: $\\max\\{82,85,70,90\\}=90$ achieved at Dupont.\n- For Chloe: $\\max\\{78,82,81,75\\}=82$ achieved at Borges.\n- For David: $\\max\\{75,77,92,80\\}=92$ achieved at Chen.\n- For Emily: $\\max\\{88,79,73,84\\}=88$ achieved at Alvarez.\n\nThese maxima occur in distinct columns (Dupont, Borges, Chen, Alvarez), so the assignment\n$$\n\\text{Ben} \\to \\text{Dupont},\\quad \\text{Chloe} \\to \\text{Borges},\\quad \\text{David} \\to \\text{Chen},\\quad \\text{Emily} \\to \\text{Alvarez}\n$$\nis feasible and attains the upper bound. Its total score is\n$$\nT=90+82+92+88=352.\n$$\nTherefore, by matching the upper bound with a feasible assignment, this value is the maximum possible total score.", "answer": "$$\\boxed{352}$$", "id": "2223397"}, {"introduction": "The power of the assignment problem extends beyond simple one-to-one matching. This next exercise [@problem_id:3099201] challenges you to apply the assignment framework to a more abstract puzzle, a Sudoku substructure, which demonstrates the model's versatility. You will practice a crucial modeling technique: using a cost matrix with penalty values to represent complex constraints and preferences, effectively translating a logic puzzle into a solvable optimization problem.", "problem": "A standard Sudoku puzzle enforces that each row must contain each digit from $1$ to $9$ exactly once. Consider a single row of nine cells where the digits in positions $1$, $4$, $7$, and $9$ are already fixed to $2$, $7$, $3$, and $9$, respectively. The remaining cells at positions $2$, $3$, $5$, $6$, and $8$ must be filled with the remaining digits $\\{1,4,5,6,8\\}$, each used exactly once. Based on column and subgrid feasibility, suppose the allowed digits and their preference scores $s_{i,j}$ (higher means more preferred) for each empty cell are:\n- Cell at column $2$: allowed digits $\\{1,4,5\\}$ with $s_{2,1}=9$, $s_{2,4}=6$, $s_{2,5}=4$.\n- Cell at column $3$: allowed digits $\\{4,5,6\\}$ with $s_{3,4}=8$, $s_{3,5}=7$, $s_{3,6}=5$.\n- Cell at column $5$: allowed digits $\\{1,5,8\\}$ with $s_{5,1}=5$, $s_{5,5}=9$, $s_{5,8}=7$.\n- Cell at column $6$: allowed digits $\\{6,8,4\\}$ with $s_{6,6}=9$, $s_{6,8}=6$, $s_{6,4}=3$.\n- Cell at column $8$: allowed digits $\\{1,8,4\\}$ with $s_{8,1}=4$, $s_{8,8}=9$, $s_{8,4}=5$.\n\nModel the completion of this row as an assignment problem between the set of empty cells $\\{2,3,5,6,8\\}$ and the set of digits $\\{1,4,5,6,8\\}$, where an assignment decides which digit goes to which cell and enforces that each cell receives exactly one digit and each digit is used exactly once. Construct the cost matrix $c_{i,j}$ from the preference scores by the rule\n$$\nc_{i,j}=\\begin{cases}\nH - s_{i,j} & \\text{if digit } j \\text{ is allowed in cell } i,\\\\\n\\Gamma & \\text{if digit } j \\text{ is forbidden in cell } i,\n\\end{cases}\n$$\nusing $H=10$ and $\\Gamma=10^{4}$. Then, using the assignment formulation derived from first principles, determine the minimal total assignment cost for this row.\n\nIn your derivation, start from the foundational definitions of the assignment problem in optimization methods, explain how the row-level Sudoku constraints are represented within this framework, and comment on how this formulation captures the essence of the all-different constraint known from Constraint Programming (CP). Report the minimal total cost as a single exact integer with no rounding and no units.", "solution": "The problem is first validated to ensure it is scientifically grounded, well-posed, objective, and complete.\n\n### Problem Validation\n1.  **Extract Givens**:\n    -   A set of empty cells (agents) indexed by their column positions: $\\mathcal{I} = \\{2, 3, 5, 6, 8\\}$.\n    -   A set of available digits (tasks) to be assigned: $\\mathcal{J} = \\{1, 4, 5, 6, 8\\}$.\n    -   Preference scores $s_{i,j}$ for allowed assignments of digit $j$ to cell $i$:\n        -   $i=2$: $s_{2,1}=9$, $s_{2,4}=6$, $s_{2,5}=4$.\n        -   $i=3$: $s_{3,4}=8$, $s_{3,5}=7$, $s_{3,6}=5$.\n        -   $i=5$: $s_{5,1}=5$, $s_{5,5}=9$, $s_{5,8}=7$.\n        -   $i=6$: $s_{6,4}=3$, $s_{6,6}=9$, $s_{6,8}=6$.\n        -   $i=8$: $s_{8,1}=4$, $s_{8,4}=5$, $s_{8,8}=9$.\n    -   A cost function $c_{i,j}$ defined as:\n        $$\n        c_{i,j}=\\begin{cases}\n        H - s_{i,j} & \\text{if digit } j \\text{ is allowed in cell } i,\\\\\n        \\Gamma & \\text{if digit } j \\text{ is forbidden in cell } i,\n        \\end{cases}\n        $$\n    -   Constants: $H=10$ and $\\Gamma=10^{4}$.\n    -   The task is to find the minimal total assignment cost.\n\n2.  **Validate Using Extracted Givens**:\n    -   The problem is **scientifically grounded** as it applies a standard method from operational research (the assignment problem) to a logic puzzle (Sudoku).\n    -   The problem is **well-posed**. It provides a complete set of data (agents, tasks, costs) and a clear objective (minimization), which guarantees that a solution exists.\n    -   The problem is **objective** and free from any subjective or ambiguous language.\n\n3.  **Verdict and Action**: The problem is deemed valid. A full solution will be provided.\n\n### Solution Derivation\nThe problem of assigning each of the available digits $\\{1, 4, 5, 6, 8\\}$ to a unique empty cell $\\{2, 3, 5, 6, 8\\}$ to minimize a total cost is a classic instance of the assignment problem.\n\nThe assignment problem is a fundamental combinatorial optimization problem. In its general form, it considers a set of agents and a set of tasks, and a cost associated with assigning each agent to each task. The goal is to find a one-to-one assignment of agents to tasks that minimizes the total cost.\n\nLet the set of empty cells be the agents, $\\mathcal{I}=\\{2,3,5,6,8\\}$, and the set of available digits be the tasks, $\\mathcal{J}=\\{1,4,5,6,8\\}$. The size of the problem is $n=|\\mathcal{I}|=|\\mathcal{J}|=5$. We first construct the $5 \\times 5$ cost matrix $C = [c_{i,j}]$, where $i \\in \\mathcal{I}$ and $j \\in \\mathcal{J}$, using the provided rule $c_{i,j} = H-s_{i,j}$ for allowed assignments and $c_{i,j} = \\Gamma$ for forbidden ones. With $H=10$ and $\\Gamma=10^{4}$:\n\n-   **Row for Cell $i=2$**: Digits $\\{1,4,5\\}$ are allowed.\n    $c_{2,1} = 10-9 = 1$; $c_{2,4} = 10-6 = 4$; $c_{2,5} = 10-4 = 6$. Other costs are $\\Gamma$.\n-   **Row for Cell $i=3$**: Digits $\\{4,5,6\\}$ are allowed.\n    $c_{3,4} = 10-8 = 2$; $c_{3,5} = 10-7 = 3$; $c_{3,6} = 10-5 = 5$. Other costs are $\\Gamma$.\n-   **Row for Cell $i=5$**: Digits $\\{1,5,8\\}$ are allowed.\n    $c_{5,1} = 10-5 = 5$; $c_{5,5} = 10-9 = 1$; $c_{5,8} = 10-7 = 3$. Other costs are $\\Gamma$.\n-   **Row for Cell $i=6$**: Digits $\\{4,6,8\\}$ are allowed.\n    $c_{6,4} = 10-3 = 7$; $c_{6,6} = 10-9 = 1$; $c_{6,8} = 10-6 = 4$. Other costs are $\\Gamma$.\n-   **Row for Cell $i=8$**: Digits $\\{1,8,4\\}$ are allowed.\n    $c_{8,1} = 10-4 = 6$; $c_{8,4} = 10-5 = 5$; $c_{8,8} = 10-9 = 1$. Other costs are $\\Gamma$.\n\nThe resulting cost matrix $C$, with rows indexed by cells $\\{2,3,5,6,8\\}$ and columns by digits $\\{1,4,5,6,8\\}$, is:\n$$\nC =\n\\begin{pmatrix}\n1 & 4 & 6 & 10^4 & 10^4 \\\\\n10^4 & 2 & 3 & 5 & 10^4 \\\\\n5 & 10^4 & 1 & 10^4 & 3 \\\\\n10^4 & 7 & 10^4 & 1 & 4 \\\\\n6 & 5 & 10^4 & 10^4 & 1\n\\end{pmatrix}\n$$\n\nThe mathematical formulation of the assignment problem is as follows. Let $x_{i,j}$ be a binary variable such that $x_{i,j}=1$ if cell $i$ is assigned digit $j$, and $x_{i,j}=0$ otherwise. The objective is to minimize the total cost $Z$:\n$$\n\\text{Minimize } Z = \\sum_{i \\in \\mathcal{I}} \\sum_{j \\in \\mathcal{J}} c_{i,j} x_{i,j}\n$$\nsubject to the constraints:\n$$\n\\sum_{j \\in \\mathcal{J}} x_{i,j} = 1 \\quad \\forall i \\in \\mathcal{I} \\quad (\\text{each cell gets one digit})\n$$\n$$\n\\sum_{i \\in \\mathcal{I}} x_{i,j} = 1 \\quad \\forall j \\in \\mathcal{J} \\quad (\\text{each digit is used once})\n$$\n$$\nx_{i,j} \\in \\{0, 1\\} \\quad \\forall i \\in \\mathcal{I}, j \\in \\mathcal{J}\n$$\n\nWe can solve this using the Hungarian algorithm.\n**Step 1: Row Reduction.** Subtract the minimum value of each row from all elements in that row.\n-   Row $1$ min is $1$: $[1, 4, 6, 10^4, 10^4] \\rightarrow [0, 3, 5, 10^4-1, 10^4-1]$\n-   Row $2$ min is $2$: $[10^4, 2, 3, 5, 10^4] \\rightarrow [10^4-2, 0, 1, 3, 10^4-2]$\n-   Row $3$ min is $1$: $[5, 10^4, 1, 10^4, 3] \\rightarrow [4, 10^4-1, 0, 10^4-1, 2]$\n-   Row $4$ min is $1$: $[10^4, 7, 10^4, 1, 4] \\rightarrow [10^4-1, 6, 10^4-1, 0, 3]$\n-   Row $5$ min is $1$: $[6, 5, 10^4, 10^4, 1] \\rightarrow [5, 4, 10^4-1, 10^4-1, 0]$\n\nThe reduced matrix $C'$ is:\n$$\nC' =\n\\begin{pmatrix}\n0 & 3 & 5 & 9999 & 9999 \\\\\n9998 & 0 & 1 & 3 & 9998 \\\\\n4 & 9999 & 0 & 9999 & 2 \\\\\n9999 & 6 & 9999 & 0 & 3 \\\\\n5 & 4 & 9999 & 9999 & 0\n\\end{pmatrix}\n$$\n\n**Step 2: Column Reduction.** Subtract the minimum value of each column of $C'$ from all elements in that column.\n-   Column $1$ min is $0$.\n-   Column $2$ min is $0$.\n-   Column $3$ min is $0$.\n-   Column $4$ min is $0$.\n-   Column $5$ min is $0$.\nThe matrix remains unchanged after this step.\n\n**Step 3: Determine an Optimal Assignment.** We look for a set of $n=5$ independent zeros (one in each row and column). By inspection of matrix $C'$, we can identify such a set on the main diagonal:\n-   Position $(1,1)$, corresponding to $x_{2,1}$.\n-   Position $(2,2)$, corresponding to $x_{3,4}$.\n-   Position $(3,3)$, corresponding to $x_{5,5}$.\n-   Position $(4,4)$, corresponding to $x_{6,6}$.\n-   Position $(5,5)$, corresponding to $x_{8,8}$.\n\nSince we have found a full set of $5$ independent zeros, this constitutes an optimal assignment. The optimal assignment is:\n-   Cell $2$ is assigned digit $1$.\n-   Cell $3$ is assigned digit $4$.\n-   Cell $5$ is assigned digit $5$.\n-   Cell $6$ is assigned digit $6$.\n-   Cell $8$ is assigned digit $8$.\n\nThe minimal total cost is the sum of the costs from the original cost matrix $C$ for these assignments:\n$$\nZ_{min} = c_{2,1} + c_{3,4} + c_{5,5} + c_{6,6} + c_{8,8}\n$$\n$$\nZ_{min} = 1 + 2 + 1 + 1 + 1 = 6\n$$\n\n**Comment on the \"all-different\" constraint**:\nIn Constraint Programming (CP), a problem like this would be modeled using variables for each cell, whose domains are the allowed digits. For example, variables $V_2, V_3, V_5, V_6, V_8$ would represent the digits in cells $2, 3, 5, 6, 8$. The core constraint would be $\\text{alldifferent}(V_2, V_3, V_5, V_6, V_8)$, which enforces that all these variables must take unique values.\nThe assignment problem formulation intrinsically captures this constraint. The two sets of equality constraints, $\\sum_j x_{i,j} = 1$ and $\\sum_i x_{i,j} = 1$, together enforce a bijective (one-to-one) mapping between cells and digits. This is exactly the semantics of the `alldifferent` constraint. The use of a very large cost $\\Gamma$ for forbidden assignments acts as a hard constraint, effectively removing those pairs from consideration, analogous to how domains are specified in CP. Thus, the assignment problem provides an optimization-based framework to solve what is, at its core, a constraint satisfaction problem with an objective function.", "answer": "$$\n\\boxed{6}\n$$", "id": "3099201"}, {"introduction": "Having practiced applying the assignment model, we now delve into the mathematical properties that make it so powerful and efficiently solvable. This advanced practice [@problem_id:3099237] explores the concept of total unimodularity, the property that guarantees integer solutions from the linear programming relaxation. By contrasting the standard bipartite assignment problem with a non-bipartite case where this property breaks down, you will gain a deeper appreciation for the theoretical underpinnings of this entire class of problems.", "problem": "Consider the classical assignment problem in optimization methods: given a set of workers indexed by $i \\in \\{1,2,3\\}$ and a set of jobs indexed by $j \\in \\{1,2,3\\}$, with rewards $c_{ij} \\in \\mathbb{R}$ for assigning worker $i$ to job $j$, the goal is to choose assignments that maximize total reward under exclusivity constraints. The standard integer formulation uses decision variables $x_{ij} \\in \\{0,1\\}$, where $x_{ij} = 1$ means worker $i$ is assigned to job $j$, and $x_{ij} = 0$ otherwise. The linear programming (LP) relaxation drops the integrality requirement to $x_{ij} \\in [0,1]$.\n\nStart from the following base:\n- The fundamental model of the assignment problem is defined by the linear constraints $\\sum_{j=1}^{3} x_{ij} = 1$ for every $i \\in \\{1,2,3\\}$ and $\\sum_{i=1}^{3} x_{ij} = 1$ for every $j \\in \\{1,2,3\\}$, and the objective is to maximize $\\sum_{i=1}^{3}\\sum_{j=1}^{3} c_{ij} x_{ij}$.\n- The concept of Total Unimodularity (TUM) is that a matrix $A$ is totally unimodular if every square subdeterminant of $A$ has value in $\\{0, \\pm 1\\}$. When the constraint matrix is totally unimodular and the right-hand side vector is integral, every extreme point of the feasible region is integral.\n\nPart I (bipartite baseline): Consider rewards $c_{ij}$ defined by $c_{11} = 5$, $c_{22} = 5$, $c_{33} = 5$, and $c_{ij} = 1$ for all $(i,j)$ with $i \\neq j$. Define the standard assignment model above and its LP relaxation. Explain, from first principles using the definitions of Total Unimodularity and the bipartite incidence structure of worker-job constraints, why the LP relaxation has integral extreme points in this bipartite setting.\n\nPart II (minimal change to break integrality): Now alter the constraints to a non-bipartite matching structure on a single set of three entities $V = \\{1,2,3\\}$, with decision variables $y_{12}, y_{23}, y_{31} \\in [0,1]$ indicating whether the undirected pair $\\{p,q\\}$ is selected. Impose degree constraints $\\sum_{e \\in \\delta(v)} y_{e} \\leq 1$ for each $v \\in V$, where $\\delta(v)$ is the set of edges incident to $v$. Let the rewards on the three edges be $c_{12} = 3$, $c_{23} = 3$, $c_{31} = 3$, and consider both the Integer Linear Programming (ILP) version with $y_{e} \\in \\{0,1\\}$ and the LP relaxation with $y_{e} \\in [0,1]$.\n\nUsing the core definitions, test whether the non-bipartite constraint matrix is totally unimodular by computing a suitable square subdeterminant. Then, compute the optimal values of the ILP and the LP relaxation for this non-bipartite instance. Finally, report the integrality gap defined as $Z_{\\text{LP}} - Z_{\\text{ILP}}$ for the non-bipartite instance. Express the final answer as a single real number. If you choose to round, round your answer to four significant figures. No units are required.", "solution": "This problem consists of two parts. The first part requires an explanation of why the linear programming (LP) relaxation of the standard assignment problem has integral extreme points. The second part requires calculating the integrality gap for a related but non-bipartite matching problem.\n\n### Part I: Bipartite Assignment Problem and Integrality\n\nThe assignment problem is defined on a set of workers $i \\in \\{1, 2, 3\\}$ and a set of jobs $j \\in \\{1, 2, 3\\}$. The decision variables are $x_{ij}$, where $x_{ij} = 1$ if worker $i$ is assigned to job $j$, and $x_{ij} = 0$ otherwise. The objective is to maximize the total reward, $\\sum_{i=1}^{3}\\sum_{j=1}^{3} c_{ij} x_{ij}$.\n\nThe constraints are:\n$1$. Each worker must be assigned to exactly one job: $\\sum_{j=1}^{3} x_{ij} = 1$ for each $i \\in \\{1, 2, 3\\}$.\n$2$. Each job must be assigned to exactly one worker: $\\sum_{i=1}^{3} x_{ij} = 1$ for each $j \\in \\{1, 2, 3\\}$.\n\nThe Integer Linear Program (ILP) requires $x_{ij} \\in \\{0, 1\\}$. The LP relaxation replaces this with $x_{ij} \\in [0, 1]$, or more simply $x_{ij} \\geq 0$, since the constraints already imply $x_{ij} \\leq 1$.\n\nThe constraints can be written in matrix form as $A\\mathbf{x} = \\mathbf{b}$, where $\\mathbf{x}$ is a column vector of the $9$ variables $x_{ij}$, $A$ is the $6 \\times 9$ constraint matrix, and $\\mathbf{b}$ is a column vector of six $1$s. Each column of $A$, corresponding to a variable $x_{ij}$, has exactly two non-zero entries, both equal to $1$. One $1$ appears in the row corresponding to the constraint for worker $i$, and the other $1$ appears in the row for job $j$.\n\nThis structure is key. The matrix $A$ is the node-edge incidence matrix of the complete bipartite graph $K_{3,3}$, with one set of vertices representing workers and the other representing jobs. The columns of $A$ correspond to the edges of the graph, and the rows correspond to the vertices. A matrix is Totally Unimodular (TUM) if the determinant of every square submatrix is in the set $\\{0, 1, -1\\}$. The incidence matrix of a graph is TUM if and only if the graph is bipartite. Since the assignment problem's constraint matrix is the incidence matrix of a bipartite graph, it is TUM.\n\nTo demonstrate this from first principles, we consider an arbitrary $k \\times k$ submatrix $S$ of $A$. We can show by induction on $k$ that $\\det(S) \\in \\{0, 1, -1\\}$.\n- **Base Case ($k=1$):** A $1 \\times 1$ submatrix is just an element of $A$. The elements of $A$ are $0$ or $1$. Thus, the determinant is either $0$ or $1$.\n- **Inductive Step ($k > 1$):** Assume all $(k-1) \\times (k-1)$ submatrices have a determinant in $\\{0, 1, -1\\}$. Consider a $k \\times k$ submatrix $S$.\n    1. If $S$ has a column with all zeros, $\\det(S) = 0$.\n    2. If $S$ has a column with exactly one non-zero entry (which must be a $1$), we can expand the determinant along this column. The determinant is $\\pm 1$ times the determinant of a $(k-1) \\times (k-1)$ submatrix of $A$. By the inductive hypothesis, this minor is in $\\{0, 1, -1\\}$, so $\\det(S) \\in \\{0, 1, -1\\}$.\n    3. If every column of $S$ has at least two non-zero entries, since each column of $A$ has exactly two $1$s, every column of $S$ must have exactly two $1$s. The rows of $A$ can be partitioned into a set for worker constraints ($U$) and a set for job constraints ($V$). Any column of $A$ has one $1$ in a $U$-row and one $1$ in a $V$-row. Let the rows of $S$ be partitioned accordingly into $S_U$ and $S_V$. If we sum the rows in $S_U$, we get a row vector. If we sum the rows in $S_V$, we get another row vector. For any column in $S$, its two $1$s must be distributed between the rows from $S_U$ and $S_V$. If for every column, one $1$ is in a row from $S_U$ and the other is in a row from $S_V$, then the sum of rows in $S_U$ is equal to the sum of rows in $S_V$. This implies linear dependence of the rows of $S$, so $\\det(S) = 0$. If there is a column with two $1$s both in $S_U$ or both in $S_V$, this would contradict the bipartite structure. For a bipartite graph incidence matrix, this case does not happen.\n\nSince $A$ is TUM and the right-hand-side vector $\\mathbf{b}$ is integral (all entries are $1$), a fundamental theorem of linear programming states that all extreme points of the feasible region defined by $\\{ \\mathbf{x} | A\\mathbf{x} = \\mathbf{b}, \\mathbf{x} \\geq 0 \\}$ are integral. Because the optimal solution to an LP can always be found at an extreme point, the optimal solution to the LP relaxation of the assignment problem will consist of integer values.\n\n### Part II: Non-bipartite Matching and Integrality Gap\n\nWe now consider a matching problem on a non-bipartite graph, specifically a $3$-cycle with vertices $V=\\{1,2,3\\}$ and edges $\\{1,2\\},\\{2,3\\},\\{3,1\\}$. The decision variables are $y_{12}, y_{23}, y_{31}$. The constraints are $\\sum_{e \\in \\delta(v)} y_e \\leq 1$ for each vertex $v$, where $\\delta(v)$ is the set of edges incident to $v$.\nThe constraints are:\n$y_{12} + y_{31} \\leq 1$ (for vertex $1$)\n$y_{12} + y_{23} \\leq 1$ (for vertex $2$)\n$y_{23} + y_{31} \\leq 1$ (for vertex $3$)\nThe objective is to maximize $Z = 3y_{12} + 3y_{23} + 3y_{31}$.\n\nFirst, we test if the constraint matrix is TUM. The matrix $A$ is:\n$$ A = \\begin{pmatrix} 1 & 0 & 1 \\\\ 1 & 1 & 0 \\\\ 0 & 1 & 1 \\end{pmatrix} $$\nThis matrix is a $3 \\times 3$ square matrix, so it is its own submatrix. Its determinant is:\n$$ \\det(A) = 1(1 \\cdot 1 - 0 \\cdot 1) - 0(1 \\cdot 1 - 0 \\cdot 1) + 1(1 \\cdot 1 - 1 \\cdot 0) = 1(1) + 1(1) = 2 $$\nSince $\\det(A) = 2$, which is not in $\\{0, 1, -1\\}$, the matrix $A$ is not totally unimodular. This is expected, as it is the incidence matrix of an odd cycle ($C_3$), a non-bipartite graph.\n\nNext, we calculate the optimal value of the ILP, $Z_{\\text{ILP}}$, where $y_e \\in \\{0,1\\}$. We want to find a matching (a set of edges with no common vertices) with maximum total weight. We can select at most one edge. For example, if we select edge $\\{1,2\\}$ ($y_{12}=1$), then both vertex $1$ and vertex $2$ are covered. The constraints $y_{12} + y_{31} \\leq 1$ and $y_{12} + y_{23} \\leq 1$ force $y_{31}=0$ and $y_{23}=0$. The solution $(y_{12},y_{23},y_{31})=(1,0,0)$ is feasible. The objective value is $3(1) + 3(0) + 3(0) = 3$. By symmetry, selecting any single edge gives an objective value of $3$. We cannot select two or more edges, as they would share a vertex. Thus, the optimal value for the integer program is $Z_{\\text{ILP}} = 3$.\n\nNow, we calculate the optimal value of the LP relaxation, $Z_{\\text{LP}}$, where $y_e \\in [0,1]$.\nConsider the feasible point $y_{12} = 0.5$, $y_{23} = 0.5$, $y_{31} = 0.5$.\nChecking the constraints:\n$y_{12} + y_{31} = 0.5 + 0.5 = 1 \\leq 1$\n$y_{12} + y_{23} = 0.5 + 0.5 = 1 \\leq 1$\n$y_{23} + y_{31} = 0.5 + 0.5 = 1 \\leq 1$\nThe point is feasible. The objective value at this point is $Z = 3(0.5 + 0.5 + 0.5) = 3(1.5) = 4.5$.\nTo show this is optimal, we sum the three constraints:\n$(y_{12} + y_{31}) + (y_{12} + y_{23}) + (y_{23} + y_{31}) \\leq 1 + 1 + 1$\n$2(y_{12} + y_{23} + y_{31}) \\leq 3$\n$y_{12} + y_{23} + y_{31} \\leq 1.5$\nThe objective function is $Z = 3(y_{12} + y_{23} + y_{31})$. Multiplying the derived inequality by $3$, we get an upper bound on the objective:\n$Z = 3(y_{12} + y_{23} + y_{31}) \\leq 3(1.5) = 4.5$.\nSince we found a feasible solution that achieves this upper bound, the optimal value of the LP relaxation is $Z_{\\text{LP}} = 4.5$.\n\nFinally, the integrality gap is the difference between the optimal LP value and the optimal ILP value:\nIntegrality Gap = $Z_{\\text{LP}} - Z_{\\text{ILP}} = 4.5 - 3 = 1.5$.", "answer": "$$ \\boxed{1.5} $$", "id": "3099237"}]}