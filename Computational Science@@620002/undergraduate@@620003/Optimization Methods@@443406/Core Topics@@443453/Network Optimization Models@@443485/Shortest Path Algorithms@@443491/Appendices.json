{"hands_on_practices": [{"introduction": "The best way to truly grasp an algorithm is to trace its execution step-by-step. This first practice invites you to apply Dijkstra's algorithm to a small network, calculating the shortest path from a single source to all other nodes. By manually managing distances and selecting which node to visit next, you will gain a concrete understanding of the relaxation process and the greedy logic at the heart of one of the most fundamental shortest path algorithms. [@problem_id:1532819]", "problem": "A small data center's network consists of one central Router, labeled `R`, and five servers, labeled `S1`, `S2`, `S3`, `S4`, and `S5`. Data packets can travel between certain pairs of devices, and each connection has an associated latency, measured in milliseconds (ms). The network topology and latencies are as follows:\n\n- `R` is connected to `S1` with a latency of 10 ms.\n- `R` is connected to `S2` with a latency of 3 ms.\n- `R` is connected to `S3` with a latency of 8 ms.\n- `S1` is connected to `S2` with a latency of 4 ms.\n- `S1` is connected to `S4` with a latency of 2 ms.\n- `S2` is connected to `S3` with a latency of 2 ms.\n- `S2` is connected to `S4` with a latency of 9 ms.\n- `S3` is connected to `S5` with a latency of 5 ms.\n- `S4` is connected to `S5` with a latency of 1 ms.\n\nAll connections are bidirectional, meaning the latency is the same in either direction. Determine the minimum possible latency for a data packet to travel from the central Router `R` to each of the five servers.\n\nProvide the final latencies for `S1`, `S2`, `S3`, `S4`, and `S5`, in that specific order. The final answer should be a set of numbers, expressed in ms.", "solution": "We are asked to find the minimum-latency paths from the source node $R$ to the destinations $S_{1},S_{2},S_{3},S_{4},S_{5}$ in an undirected weighted network. All latencies are nonnegative, so Dijkstra’s algorithm applies. Let $d(X)$ denote the current best-known latency from $R$ to node $X$. Initialize $d(R)=0$ and $d(S_{i})=\\infty$ for all $i$, then relax along edges from the settled node with the smallest tentative distance at each step.\n\nInitialization using edges from $R$:\n- From $R$ to $S_{1}$: $d(S_{1})=\\min(\\infty,10)=10$.\n- From $R$ to $S_{2}$: $d(S_{2})=\\min(\\infty,3)=3$.\n- From $R$ to $S_{3}$: $d(S_{3})=\\min(\\infty,8)=8$.\n- No direct edges from $R$ to $S_{4}$ or $S_{5}$: $d(S_{4})=\\infty$, $d(S_{5})=\\infty$.\n\nSettle the smallest tentative node $S_{2}$ with $d(S_{2})=3$ and relax its neighbors:\n- Edge $S_{2}$–$S_{1}$ with weight $4$: $d(S_{1})=\\min(10,3+4)=7$.\n- Edge $S_{2}$–$S_{3}$ with weight $2$: $d(S_{3})=\\min(8,3+2)=5$.\n- Edge $S_{2}$–$S_{4}$ with weight $9$: $d(S_{4})=\\min(\\infty,3+9)=12$.\n\nNow tentative distances are $d(S_{1})=7$, $d(S_{3})=5$, $d(S_{4})=12$, $d(S_{5})=\\infty$. Settle $S_{3}$ with $d(S_{3})=5$ and relax its neighbors:\n- Edge $S_{3}$–$S_{5}$ with weight $5$: $d(S_{5})=\\min(\\infty,5+5)=10$.\n- Edge $S_{3}$–$S_{2}$ offers $5+2=7$, which does not improve $d(S_{2})=3$.\n\nNow tentative distances are $d(S_{1})=7$, $d(S_{4})=12$, $d(S_{5})=10$. Settle $S_{1}$ with $d(S_{1})=7$ and relax its neighbors:\n- Edge $S_{1}$–$S_{4}$ with weight $2$: $d(S_{4})=\\min(12,7+2)=9$.\n- Edge $S_{1}$–$S_{2}$ offers $7+4=11$, which does not improve $d(S_{2})=3$.\n\nNow tentative distances are $d(S_{4})=9$, $d(S_{5})=10$. Settle $S_{4}$ with $d(S_{4})=9$ and relax its neighbors:\n- Edge $S_{4}$–$S_{5}$ with weight $1$: $d(S_{5})=\\min(10,9+1)=10$ (no change).\n\nFinally, settle $S_{5}$ with $d(S_{5})=10$. All nodes are settled, yielding the minimal latencies:\n- $d(S_{1})=7$\n- $d(S_{2})=3$\n- $d(S_{3})=5$\n- $d(S_{4})=9$\n- $d(S_{5})=10$\n\nThese are in milliseconds as required by the problem statement; the final answer lists the numerical values in the specified order.", "answer": "$$\\boxed{\\begin{pmatrix}7 & 3 & 5 & 9 & 10\\end{pmatrix}}$$", "id": "1532819"}, {"introduction": "While a shortest path algorithm computes the minimum cost or distance, its practical utility often lies in identifying the actual sequence of nodes that forms this optimal path. This exercise focuses on that crucial second step: path reconstruction. Using the predecessor data typically generated by algorithms like Dijkstra's, you will learn to work backward from the destination to the source to reveal the exact route, a skill essential for applications in routing and navigation. [@problem_id:1532820]", "problem": "A network administrator is analyzing a routing topology for a small computer network. The network consists of seven routers, labeled R1 through R7. A shortest-path algorithm, such as Dijkstra's algorithm, was run from the source router R1 to determine the most efficient routes to all other routers in the network. The output of this algorithm is a predecessor table, which, for any router `v`, specifies the router `p(v)` that immediately precedes `v` on the shortest path from the source R1.\n\nThe predecessor table is as follows:\n- `p(R1)` = NULL (as R1 is the source)\n- `p(R2)` = R1\n- `p(R3)` = R4\n- `p(R4)` = R1\n- `p(R5)` = R2\n- `p(R6)` = R5\n- `p(R7)` = R6\n\nBased on this predecessor table, determine the sequence of routers that constitutes the shortest path from the source router R1 to the destination router R7.\n\nA. R1 → R2 → R5 → R6 → R7\n\nB. R1 → R4 → R3\n\nC. R7 → R6 → R5 → R2 → R1\n\nD. R1 → R4 → R6 → R7\n\nE. R1 → R2 → R4 → R3 → R7", "solution": "We are given the predecessor function $p$ from a shortest-path computation rooted at $R1$, with:\n$$\np(R1)=\\mathrm{NULL},\\quad p(R2)=R1,\\quad p(R3)=R4,\\quad p(R4)=R1,\\quad p(R5)=R2,\\quad p(R6)=R5,\\quad p(R7)=R6.\n$$\nPrinciple: To reconstruct the shortest path from the source $R1$ to a destination $v$, start at $v$ and iteratively apply the predecessor function until reaching $\\mathrm{NULL}$. This yields the path in reverse order $v, p(v), p^{2}(v), \\dots$, terminating at $R1$. Reversing this sequence gives the forward path from $R1$ to $v$.\n\nApply this to $v=R7$:\n$$\np(R7)=R6,\\quad p^{2}(R7)=p(R6)=R5,\\quad p^{3}(R7)=p(R5)=R2,\\quad p^{4}(R7)=p(R2)=R1,\\quad p^{5}(R7)=p(R1)=\\mathrm{NULL}.\n$$\nThus, the reverse-constructed sequence is $R7 \\leftarrow R6 \\leftarrow R5 \\leftarrow R2 \\leftarrow R1$, and reversing it yields the forward shortest path:\n$$\nR1 \\rightarrow R2 \\rightarrow R5 \\rightarrow R6 \\rightarrow R7.\n$$\nComparing with the options, this corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1532820"}, {"introduction": "Understanding an algorithm's limitations is as important as knowing its strengths. This problem explores a critical boundary condition for Dijkstra's algorithm: its behavior with negative edge weights. By analyzing a graph where the algorithm's greedy approach leads to a suboptimal result, you will develop a deeper appreciation for the assumptions that guarantee its correctness and understand why alternative algorithms like Bellman-Ford are necessary in certain scenarios. [@problem_id:1532814]", "problem": "Dijkstra's algorithm is a fundamental algorithm for finding the shortest paths between nodes in a weighted graph. However, its greedy approach has limitations. Consider a directed graph with a set of vertices $V = \\{S, A, B, C\\}$, where $S$ is the designated source vertex.\n\nYour task is to identify which one of the following graph configurations, described by their weighted directed edges, will cause Dijkstra's algorithm to fail. A failure is defined as the algorithm terminating but producing an incorrect shortest path distance from the source $S$ to at least one other vertex in the graph.\n\nFor each option, the edges are given in the format (start vertex, end vertex, weight). All vertices not reachable from $S$ are considered to have an infinite path distance.\n\nA. A directed graph with weighted edges: (S, A, 3); (S, B, 6); (B, A, -4); (S, C, 8).\n\nB. A directed graph with weighted edges: (S, A, 4); (S, B, 2); (B, A, -1); (B, C, 3).\n\nC. A directed graph with weighted edges: (S, A, 5); (A, B, -2); (S, C, 1).\n\nD. A directed graph with weighted edges: (S, A, 2); (S, B, 3); (A, C, 4); (B, C, 1).", "solution": "Dijkstra's algorithm is correct when all edge weights are nonnegative because once a vertex $u$ is extracted with minimal tentative distance $d(u)$, no shorter path to $u$ can be found via any remaining unsettled vertex. With a negative-weight edge reachable from $S$, a shorter path to an already settled vertex may appear later, violating this invariant and causing failure.\n\nI evaluate each option by first determining the true shortest-path distances from $S$ and then simulating Dijkstra's steps to see if it can produce an incorrect result.\n\nOption A: Edges $(S,A,3)$, $(S,B,6)$, $(B,A,-4)$, $(S,C,8)$.\n- True shortest-path distances:\n  - $d^{*}(A) = \\min\\{3,\\,6+(-4)\\} = 2$, via $S \\to B \\to A$.\n  - $d^{*}(B) = 6$ via $S \\to B$.\n  - $d^{*}(C) = 8$ via $S \\to C$.\n- Dijkstra simulation:\n  - Initialize $d(S)=0$, $d(A)=3$, $d(B)=6$, $d(C)=8$.\n  - Extract $A$ first (smallest $3$), finalize $A=3$; no outgoing relaxations from $A$.\n  - Extract $B=6$, relax $(B,A)$ to get a candidate $d(A)=6+(-4)=2<3$, but $A$ is already settled and will not be updated.\n  - Algorithm terminates with $d(A)=3$, which is incorrect since $d^{*}(A)=2$.\nThus Dijkstra fails on A.\n\nOption B: Edges $(S,A,4)$, $(S,B,2)$, $(B,A,-1)$, $(B,C,3)$.\n- True shortest-path distances:\n  - $d^{*}(B)=2$ via $S \\to B$.\n  - $d^{*}(A)=2+(-1)=1$ via $S \\to B \\to A$, which is better than $4$.\n  - $d^{*}(C)=2+3=5$ via $S \\to B \\to C$.\n- Dijkstra simulation:\n  - Initialize $d(S)=0$, $d(B)=2$, $d(A)=4$, $d(C)=\\infty$.\n  - Extract $B=2$, relax to $d(A)=1$, $d(C)=5$.\n  - Extract $A=1$, then $C=5$. Final distances match $d^{*}$. No failure.\n\nOption C: Edges $(S,A,5)$, $(A,B,-2)$, $(S,C,1)$.\n- True shortest-path distances:\n  - $d^{*}(C)=1$ via $S \\to C$.\n  - $d^{*}(A)=5$ via $S \\to A$.\n  - $d^{*}(B)=5+(-2)=3$ via $S \\to A \\to B$.\n- Dijkstra simulation:\n  - Initialize $d(S)=0$, $d(C)=1$, $d(A)=5$, $d(B)=\\infty$.\n  - Extract $C=1$ (no relaxations).\n  - Extract $A=5$, relax to $d(B)=3$.\n  - Extract $B=3$. Final distances match $d^{*}$. No failure.\n\nOption D: Edges $(S,A,2)$, $(S,B,3)$, $(A,C,4)$, $(B,C,1)$.\n- All weights are nonnegative, so Dijkstra is guaranteed correct.\n- True shortest-path distances: $d^{*}(A)=2$, $d^{*}(B)=3$, $d^{*}(C)=\\min\\{2+4,\\,3+1\\}=4$. Dijkstra will compute these.\n\nTherefore, only Option A causes Dijkstra's algorithm to terminate with an incorrect shortest-path distance.", "answer": "$$\\boxed{A}$$", "id": "1532814"}]}