{"hands_on_practices": [{"introduction": "The standard minimum-cost flow (MCF) problem is a cornerstone of network optimization. However, many practical applications, such as logistics or energy distribution, impose not only capacity limits but also minimum service requirements. This practice [@problem_id:3155953] extends the basic MCF model to include non-zero lower bounds on arc flows. You will learn a fundamental technique for solving such problems: transforming them into an equivalent standard form and then using the powerful concept of dual variables (node potentials) to certify the optimality of your solution.", "problem": "Consider a directed network with nodes $\\{1,2,3,4\\}$ and arcs $(1,2)$, $(1,3)$, $(2,3)$, $(2,4)$, and $(3,4)$. Each arc $(i,j)$ has a lower bound $l_{ij}$, an upper bound $u_{ij}$, and a per-unit cost $c_{ij}$. The data are:\n- $(1,2)$: $l_{12}=1$, $u_{12}=6$, $c_{12}=2$.\n- $(1,3)$: $l_{13}=0$, $u_{13}=4$, $c_{13}=1$.\n- $(2,3)$: $l_{23}=0$, $u_{23}=2$, $c_{23}=-1$.\n- $(2,4)$: $l_{24}=0$, $u_{24}=3$, $c_{24}=2$.\n- $(3,4)$: $l_{34}=2$, $u_{34}=7$, $c_{34}=0$.\n\nNode supplies/demands (net outflow equals supply) are:\n- Node $1$: $b_{1}=5$.\n- Node $2$: $b_{2}=0$.\n- Node $3$: $b_{3}=0$.\n- Node $4$: $b_{4}=-5$.\n\nA minimum-cost flow (MCF) is defined as a feasible flow $f_{ij}$ on each arc satisfying $l_{ij}\\le f_{ij}\\le u_{ij}$ for every arc, and the node flow conservation $\\sum_{j} f_{ij}-\\sum_{k} f_{ki}=b_{i}$ at each node $i$, that minimizes the total cost $\\sum_{(i,j)} c_{ij} f_{ij}$.\n\nStarting from these definitions and without invoking any shortcut formulas, compute the minimal total cost of a feasible flow. Your reasoning should:\n- Transform the problem with lower bounds to a standard form with zero lower bounds by appropriate demand adjustments derived from the conservation law.\n- Analyze feasibility by interpreting the adjusted balances as a circulation with demands.\n- Derive and report a dual certificate of optimality for the obtained flow using node potential functions $\\pi_{i}$ that satisfy the complementary slackness conditions associated with the linear programming formulation of MCF.\n\nExpress the final minimal total cost as a single real number with no units. No rounding is required.", "solution": "The problem is a minimum-cost flow (MCF) problem on a directed network. The solution requires transforming the problem to a standard form, finding a feasible flow, and proving its optimality using a dual certificate.\n\n### Step 1: Problem Validation\n\n**1. Extraction of Givens:**\n- Nodes: $V = \\{1, 2, 3, 4\\}$.\n- Arcs with (lower bound $l_{ij}$, upper bound $u_{ij}$, cost $c_{ij}$):\n  - $(1,2)$: $(1, 6, 2)$\n  - $(1,3)$: $(0, 4, 1)$\n  - $(2,3)$: $(0, 2, -1)$\n  - $(2,4)$: $(0, 3, 2)$\n  - $(3,4)$: $(2, 7, 0)$\n- Node supplies/demands (net outflow) $b_i$:\n  - $b_1 = 5$\n  - $b_2 = 0$\n  - $b_3 = 0$\n  - $b_4 = -5$\n- The total supply equals the total demand: $\\sum_{i \\in V} b_i = 5 + 0 + 0 - 5 = 0$.\n\n**2. Validation using Extracted Givens:**\n- **Scientifically Grounded:** The problem is a standard minimum-cost flow problem, a fundamental topic in the field of network optimization and linear programming. All definitions and objectives are well-established.\n- **Well-Posed:** The problem is a linear program with a feasible region that is non-empty (as will be shown) and bounded, and a linear objective function. The condition $\\sum b_i = 0$ is a necessary condition for feasibility, which is met. Thus, an optimal solution is guaranteed to exist.\n- **Objective:** The problem is stated using precise mathematical definitions and numerical data, with no subjective or ambiguous language.\n- **Completeness:** All necessary data (network topology, arc capacities, costs, node balances) are provided. There are no contradictions.\n\n**3. Verdict and Action:**\nThe problem is valid. We proceed with the solution.\n\n### Step 2: Transformation to a Standard Form\n\nThe problem has non-zero lower bounds $l_{ij}$. We transform it into an equivalent problem with zero lower bounds. Let $f_{ij}$ be the flow on arc $(i,j)$ in the original problem. We define a new flow variable $f'_{ij} = f_{ij} - l_{ij}$.\n\nThe new capacity constraints are $0 \\le f'_{ij} \\le u'_{ij}$, where the new upper bound is $u'_{ij} = u_{ij} - l_{ij}$.\n- $u'_{12} = u_{12} - l_{12} = 6 - 1 = 5$\n- $u'_{13} = u_{13} - l_{13} = 4 - 0 = 4$\n- $u'_{23} = u_{23} - l_{23} = 2 - 0 = 2$\n- $u'_{24} = u_{24} - l_{24} = 3 - 0 = 3$\n- $u'_{34} = u_{34} - l_{34} = 7 - 2 = 5$\n\nThe flow conservation constraint at each node $i$, $\\sum_{j} f_{ij} - \\sum_{k} f_{ki} = b_i$, is transformed by substituting $f_{ij} = f'_{ij} + l_{ij}$:\n$$ \\sum_{j} (f'_{ij} + l_{ij}) - \\sum_{k} (f'_{ki} + l_{ki}) = b_i $$\n$$ \\sum_{j} f'_{ij} - \\sum_{k} f'_{ki} = b_i - \\left(\\sum_{j} l_{ij} - \\sum_{k} l_{ki}\\right) $$\nLet the new supply/demand at node $i$ be $b'_i = b_i - (\\sum_{j} l_{ij} - \\sum_{k} l_{ki})$.\n- $b'_1 = b_1 - (l_{12} + l_{13}) = 5 - (1 + 0) = 4$\n- $b'_2 = b_2 - (l_{23} + l_{24} - l_{12}) = 0 - (0 + 0 - 1) = 1$\n- $b'_3 = b_3 - (l_{34} - (l_{13} + l_{23})) = 0 - (2 - (0 + 0)) = -2$\n- $b'_4 = b_4 - (0 - (l_{24} + l_{34})) = -5 - (0 - (0 + 2)) = -3$\nThe sum of new balances is $\\sum_i b'_i = 4 + 1 - 2 - 3 = 0$, as required.\n\nThe total cost is $C = \\sum_{(i,j)} c_{ij} f_{ij} = \\sum_{(i,j)} c_{ij} (f'_{ij} + l_{ij}) = \\sum_{(i,j)} c_{ij} f'_{ij} + \\sum_{(i,j)} c_{ij} l_{ij}$.\nThe term $C_{\\text{fixed}} = \\sum_{(i,j)} c_{ij} l_{ij}$ is a constant. We must minimize the variable part of the cost, $C' = \\sum_{(i,j)} c_{ij} f'_{ij}$, and add $C_{\\text{fixed}}$ to the result.\n$C_{\\text{fixed}} = c_{12} l_{12} + c_{13} l_{13} + c_{23} l_{23} + c_{24} l_{24} + c_{34} l_{34} = (2)(1) + (1)(0) + (-1)(0) + (2)(0) + (0)(2) = 2$.\n\n### Step 3: Finding an Optimal Flow\n\nWe now need to solve the transformed problem: find a flow $f'_{ij}$ satisfying $0 \\le f'_{ij} \\le u'_{ij}$ and the new balances $b'_i$ that minimizes $C' = \\sum c_{ij} f'_{ij}$.\nThe supply nodes are $1$ ($b'_1 = 4$) and $2$ ($b'_2 = 1$). The demand nodes are $3$ ($b'_3 = -2$) and $4$ ($b'_4 = -3$).\n\nThe arc $(2,3)$ has a negative cost $c_{23} = -1$, making it highly preferential for flow. We attempt to send as much flow as possible through it, up to its capacity $u'_{23}=2$. Let's try setting $f'_{23} = 2$.\nTo satisfy the balance at node $2$, $f'_{23} + f'_{24} - f'_{12} = b'_2 = 1$, we have $2 + f'_{24} - f'_{12} = 1$. A simple choice is to set $f'_{24}=0$ and have an inflow of $f'_{12}=1$ to node $2$. This is within capacity $u'_{12}=5$.\nNow consider node $1$. The balance is $f'_{12} + f'_{13} = b'_1 = 4$. With $f'_{12}=1$, we must have $f'_{13}=3$. This is within capacity $u'_{13}=4$.\nNext, node $3$. The balance is $f'_{34} - (f'_{13} + f'_{23}) = b'_3 = -2$. Substituting the flows we found: $f'_{34} - (3 + 2) = -2$, which gives $f'_{34} = 3$. This is within capacity $u'_{34}=5$.\nFinally, we check the balance at node $4$: $-(f'_{24} + f'_{34}) = -(0 + 3) = -3$. This matches $b'_4 = -3$.\n\nWe have found a feasible flow for the transformed problem:\n- $f'_{12} = 1$\n- $f'_{13} = 3$\n- $f'_{23} = 2$ (at upper bound $u'_{23}$)\n- $f'_{24} = 0$ (at lower bound $0$)\n- $f'_{34} = 3$\n\nThe cost of this flow is $C' = (2)(1) + (1)(3) + (-1)(2) + (2)(0) + (0)(3) = 2 + 3 - 2 = 3$.\n\n### Step 4: Dual Certificate of Optimality\n\nTo prove this flow is optimal, we find a set of node potentials $\\pi_i$ that satisfy the complementary slackness conditions. Let the reduced cost of an arc be $c^{\\pi}_{ij} = c_{ij} - \\pi_i + \\pi_j$. The optimality conditions for the transformed problem are:\n1. If $0 < f'_{ij} < u'_{ij}$, then $c^{\\pi}_{ij} = 0$.\n2. If $f'_{ij} = 0$, then $c^{\\pi}_{ij} \\ge 0$.\n3. If $f'_{ij} = u'_{ij}$, then $c^{\\pi}_{ij} \\le 0$.\n\nWe can set one potential arbitrarily, e.g., $\\pi_4 = 0$.\nFrom the arcs with flow strictly between their bounds:\n- $0 < f'_{12} = 1 < 5 \\implies c^{\\pi}_{12} = c_{12} - \\pi_1 + \\pi_2 = 0 \\implies 2 - \\pi_1 + \\pi_2 = 0$.\n- $0 < f'_{13} = 3 < 4 \\implies c^{\\pi}_{13} = c_{13} - \\pi_1 + \\pi_3 = 0 \\implies 1 - \\pi_1 + \\pi_3 = 0$.\n- $0 < f'_{34} = 3 < 5 \\implies c^{\\pi}_{34} = c_{34} - \\pi_3 + \\pi_4 = 0 \\implies 0 - \\pi_3 + 0 = 0 \\implies \\pi_3 = 0$.\n\nSolving this system:\n- From the third equation, $\\pi_3 = 0$.\n- Substituting into the second equation: $1 - \\pi_1 + 0 = 0 \\implies \\pi_1 = 1$.\n- Substituting into the first equation: $2 - 1 + \\pi_2 = 0 \\implies \\pi_2 = -1$.\n\nOur candidate potentials are $\\pi_1 = 1, \\pi_2 = -1, \\pi_3 = 0, \\pi_4 = 0$. Now we check the conditions for the other arcs:\n- Arc $(2,3)$: $f'_{23} = 2 = u'_{23}$. Condition is $c^{\\pi}_{23} \\le 0$.\n  $c^{\\pi}_{23} = c_{23} - \\pi_2 + \\pi_3 = -1 - (-1) + 0 = 0$. The condition $0 \\le 0$ is satisfied.\n- Arc $(2,4)$: $f'_{24} = 0$. Condition is $c^{\\pi}_{24} \\ge 0$.\n  $c^{\\pi}_{24} = c_{24} - \\pi_2 + \\pi_4 = 2 - (-1) + 0 = 3$. The condition $3 \\ge 0$ is satisfied.\n\nSince all optimality conditions are met, the flow $f'$ is optimal for the transformed problem, and its cost is $C' = 3$.\n\n### Step 5: Final Cost Calculation\n\nThe minimal total cost for the original problem is the sum of the optimal cost of the transformed problem and the fixed cost from the lower bounds.\n$$ C_{\\text{min}} = C' + C_{\\text{fixed}} = 3 + 2 = 5 $$\n\nThe optimal flow in the original problem is $f_{ij} = f'_{ij} + l_{ij}$:\n- $f_{12} = 1 + 1 = 2$\n- $f_{13} = 3 + 0 = 3$\n- $f_{23} = 2 + 0 = 2$\n- $f_{24} = 0 + 0 = 0$\n- $f_{34} = 3 + 2 = 5$\nThe total cost of this flow is $(2)(2) + (1)(3) + (-1)(2) + (2)(0) + (0)(5) = 4 + 3 - 2 = 5$. This confirms the result.", "answer": "$$\\boxed{5}$$", "id": "3155953"}, {"introduction": "Classic network models often assume that flow is perfectly conserved as it traverses an arc. In the real world, from supply chains with perishable goods to pipelines with leakage, this isn't always true. This exercise [@problem_id:3155859] introduces you to \"generalized networks,\" where flow can decay or be amplified. By tackling a minimum-cost problem with perishable goods, you will practice modifying the fundamental flow conservation equations and discover how to calculate effective path costs when the amount shipped is not the same as the amount received.", "problem": "Consider a directed network with node set $\\{A,B,C,D,E\\}$, where node $A$ is a single source with known supply, nodes $D$ and $E$ are sinks with known demands, and nodes $B$ and $C$ are transshipment nodes. Goods are perishable: if a nonnegative flow $f_e$ enters arc $e$, only a fraction $\\delta_e \\in (0,1]$ of that amount arrives at the arc’s head node. The cost on each arc is linear in the amount shipped into the arc.\n\nThe arcs, decay factors, and costs (per unit shipped into the arc) are:\n- $(A,B)$ with $\\delta_{AB}=\\frac{4}{5}$ and $c_{AB}=2$,\n- $(A,C)$ with $\\delta_{AC}=\\frac{9}{10}$ and $c_{AC}=3$,\n- $(B,D)$ with $\\delta_{BD}=\\frac{9}{10}$ and $c_{BD}=1$,\n- $(C,D)$ with $\\delta_{CD}=\\frac{7}{10}$ and $c_{CD}=1$,\n- $(B,E)$ with $\\delta_{BE}=\\frac{3}{5}$ and $c_{BE}=2$,\n- $(C,E)$ with $\\delta_{CE}=1$ and $c_{CE}=2$.\n\nAssume no capacity limits on arcs. The source $A$ has supply $S=\\frac{35}{3}$. The sink demands are $d_D=6$ at node $D$ and $d_E=3$ at node $E$. All other nodes have zero net supply or demand. All flows are nonnegative and continuous.\n\nTask:\n1) Starting only from the fundamental definitions of flow conservation on directed networks and linear shipping costs, incorporate decay by writing the correct node-balance equalities. In particular, derive the effective delivery constraints at sinks that the delivered flow must meet, and express the node-balance equalities for nodes $A$, $B$, $C$, $D$, and $E$ in terms of the arc-entry flows $f_e$ and decay factors $\\delta_e$.\n\n2) Explain how one can convert this perishable-goods flow model to a standard Minimum-Cost Flow (MCF) on an expanded network by a representation that uses only unit-conserving arcs. Your explanation must be constructive: starting from the idea that each decay factor $\\delta_e$ is rational, describe how to expand each original arc into a gadget that preserves linearity and unit conservation while routing losses to a separate waste sink, so that the resulting problem is in the canonical MCF form.\n\n3) Using the principles in parts (1)–(2), determine the minimum total shipping cost needed to satisfy the demands at $D$ and $E$ with the given supply at $A$. Express the final total cost as a single exact rational number. No rounding is required and no units are attached to the cost. Your final answer must be a single real number in exact form.", "solution": "The problem asks for the formulation and solution of a minimum-cost network flow problem with perishable goods, where flow decays on each arc.\n\n### Part 1: Problem Formulation with Flow Decay\n\nLet $f_{uv}$ be the nonnegative continuous flow of goods shipped into the arc $(u,v)$ from node $u$. The cost of this shipment is $c_{uv}f_{uv}$. Due to perishability, only a fraction $\\delta_{uv}$ of this flow, i.e., $\\delta_{uv}f_{uv}$, arrives at node $v$.\n\nThe objective is to minimize the total shipping cost, which is the sum of costs over all arcs.\nThe cost function $Z$ is:\n$$Z = c_{AB}f_{AB} + c_{AC}f_{AC} + c_{BD}f_{BD} + c_{CD}f_{CD} + c_{BE}f_{BE} + c_{CE}f_{CE}$$\n\nThe constraints are derived from flow conservation at each node. For a given node, the sum of all flows arriving at it must equal the sum of all flows departing from it, adjusted for any external supply or demand at that node.\n\n- **Node A (Source):** The total flow shipped *out* of node $A$ is the sum of flows entering the arcs originating at $A$. This total outflow cannot exceed the available supply $S$.\n$$f_{AB} + f_{AC} \\le S$$\nIn this problem, $S = \\frac{35}{3}$. So, the constraint is $f_{AB} + f_{AC} \\le \\frac{35}{3}$.\n\n- **Node B (Transshipment):** The flow arriving at $B$ from arc $(A,B)$ is $\\delta_{AB}f_{AB}$. This must equal the sum of flows shipped out from $B$ into arcs $(B,D)$ and $(B,E)$.\n$$\\delta_{AB}f_{AB} = f_{BD} + f_{BE}$$\nSubstituting the given value $\\delta_{AB} = \\frac{4}{5}$, we get $\\frac{4}{5}f_{AB} - f_{BD} - f_{BE} = 0$.\n\n- **Node C (Transshipment):** Similarly, the flow arriving at $C$ from arc $(A,C)$ is $\\delta_{AC}f_{AC}$. This must equal the sum of flows shipped out from $C$ into arcs $(C,D)$ and $(C,E)$.\n$$\\delta_{AC}f_{AC} = f_{CD} + f_{CE}$$\nSubstituting the given value $\\delta_{AC} = \\frac{9}{10}$, we get $\\frac{9}{10}f_{AC} - f_{CD} - f_{CE} = 0$.\n\n- **Node D (Sink):** The sum of flows arriving at sink $D$ from arcs $(B,D)$ and $(C,D)$ must satisfy the demand $d_D$. For a minimum cost solution, we assume this constraint is met with equality, as any surplus flow would incur cost for no benefit.\n$$\\delta_{BD}f_{BD} + \\delta_{CD}f_{CD} = d_D$$\nSubstituting the given values, we get $\\frac{9}{10}f_{BD} + \\frac{7}{10}f_{CD} = 6$.\n\n- **Node E (Sink):** Similarly, the sum of flows arriving at sink $E$ from arcs $(B,E)$ and $(C,E)$ must equal the demand $d_E$.\n$$\\delta_{BE}f_{BE} + \\delta_{CE}f_{CE} = d_E$$\nSubstituting the given values, we get $\\frac{3}{5}f_{BE} + 1 \\cdot f_{CE} = 3$.\n\n- **Non-negativity:** All flows must be non-negative.\n$$f_{uv} \\ge 0 \\text{ for all arcs } (u,v)$$\n\nThis completes the formulation of the problem as a linear program.\n\n### Part 2: Conversion to a Standard Minimum-Cost Flow (MCF) Model\n\nA standard MCF problem involves a network with unit-conserving arcs ($\\delta_e=1$ for all arcs) and node balance constraints of the form $\\sum (\\text{flow out}) - \\sum (\\text{flow in}) = \\text{supply/demand}$. The given problem is a \"generalized\" network flow problem due to the decay factors $\\delta_e \\ne 1$.\n\nTo convert this into a standard MCF problem, we can change the flow variables and arc costs. Let us define a new set of flow variables $g_{uv}$ representing the amount of flow that *arrives* at node $v$ via arc $(u,v)$. The relationship between the original flow $f_{uv}$ (amount shipped) and the new flow $g_{uv}$ (amount arrived) is:\n$$g_{uv} = \\delta_{uv} f_{uv} \\quad \\implies \\quad f_{uv} = \\frac{g_{uv}}{\\delta_{uv}}$$\nSince $\\delta_{uv} \\in (0,1]$, this transformation is well-defined.\n\nWe can rewrite the entire problem in terms of the new variables $g_{uv}$:\nThe objective function becomes:\n$$Z = \\sum_{(u,v)} c_{uv}f_{uv} = \\sum_{(u,v)} c_{uv} \\frac{g_{uv}}{\\delta_{uv}} = \\sum_{(u,v)} \\left(\\frac{c_{uv}}{\\delta_{uv}}\\right) g_{uv}$$\nLet's define a new effective cost $c'_{uv} = c_{uv}/\\delta_{uv}$ for each arc. This effective cost represents the cost per unit of flow that *arrives* at the destination node of the arc.\n\nThe flow conservation constraints at the transshipment nodes now take the standard MCF form. For node B:\n$f_{BD} + f_{BE} = \\delta_{AB}f_{AB} \\implies \\frac{g_{BD}}{\\delta_{BD}} + \\frac{g_{BE}}{\\delta_{BE}} = g_{AB}$.\nThis transformation does not appear to produce a standard MCF form due to the $\\delta$ denominators. However, we must be careful with the node balance definition. The balance should be on what *leaves* a node vs. what *arrives* at it.\nAt node B:\nFlow arriving at B: $g_{AB}$.\nFlow leaving B: $f_{BD} + f_{BE}$.\nThe formulation requires $\\delta_{AB} f_{AB} = f_{BD} + f_{BE}$, which is $g_{AB} = f_{BD} + f_{BE}$.\nThe flow arriving at transshipment nodes no longer equals flow leaving them in terms of the same variable type.\n\nA better approach is to consider the cost to deliver one unit of flow to a destination. The problem statement's hint about a constructive method involving rational factors, gadgets, and a waste sink points to a specific (though complex) set of techniques for transforming generalized networks. A simplified conceptual explanation is as follows: The decay on an arc $(u,v)$ means that for every unit of flow shipped from $u$, only $\\delta_{uv}$ arrives at $v$. The remainder, $1-\\delta_{uv}$, is lost. This loss can be conceptualized as being routed to a \"waste sink\", $W$. The arc $(u,v)$ in the original network can be thought of as a gadget that connects $u$ to both $v$ and $W$. To make this a unit-conserving system, we can define the unit of flow as the amount that arrives. The cost to deliver one unit to $v$ from $u$ must account for the initial over-shipment needed to compensate for the loss. Thus, the effective cost to deliver one unit is $c'_{uv}=c_{uv}/\\delta_{uv}$. This corresponds to a new network where arc costs are $c'_{uv}$, flows are the arriving quantities $g_{uv}$, and all arcs are conservative.\nThe node balance equation at a transshipment node $v$ becomes $\\sum_{(u,v)}_in g_{uv} = \\sum_{(v,w)_out} f_{vw}$. This still mixes variable types.\n\nThe most direct way to solve this is to use the original formulation, which is a generalized network flow problem. The structure of the present problem (one source, no arc capacities) allows for a simpler, greedy solution method, which circumvents the need for a full transformation or a general LP solver.\n\n### Part 3: Minimum Total Shipping Cost\n\nSince there are no capacity constraints on the arcs, the minimum cost solution can be found by satisfying the demands at sinks $D$ and $E$ using the cheapest possible end-to-end paths from the source $A$. We need to calculate the total cost to deliver one unit of goods from $A$ to each sink along each possible path.\n\nThe cost is incurred on the amount *shipped*, so we must trace the required shipments backward from the sink.\nTo deliver $1$ unit to a sink $k$ via a path $A \\to v_1 \\to \\dots \\to v_n \\to k$:\n- To get $1$ unit to arrive at $k$ from $v_n$, we must ship $1/\\delta_{v_n,k}$ units from $v_n$. Cost incurred: $c_{v_n,k} \\cdot (1/\\delta_{v_n,k})$.\n- This requires $1/\\delta_{v_n,k}$ units to arrive at $v_n$ from $v_{n-1}$. This requires shipping $(1/\\delta_{v_n,k}) / \\delta_{v_{n-1},v_n}$ from $v_{n-1}$. Cost incurred: $c_{v_{n-1},v_n} \\cdot (1/(\\delta_{v_{n-1},v_n}\\delta_{v_n,k}))$.\n- This continues back to the source $A$. The total cost for the path is the sum of these costs.\n\n**Cost per unit delivered to D:**\n1.  **Path A-B-D:**\n    - Cost contribution from arc (B,D): $c_{BD}/\\delta_{BD} = 1 / (\\frac{9}{10}) = \\frac{10}{9}$.\n    - Cost contribution from arc (A,B): $c_{AB}/(\\delta_{AB}\\delta_{BD}) = 2 / (\\frac{4}{5} \\cdot \\frac{9}{10}) = 2 / (\\frac{36}{50}) = \\frac{100}{36} = \\frac{25}{9}$.\n    - Total path cost per unit delivered to D: $\\frac{25}{9} + \\frac{10}{9} = \\frac{35}{9}$.\n2.  **Path A-C-D:**\n    - Cost contribution from arc (C,D): $c_{CD}/\\delta_{CD} = 1 / (\\frac{7}{10}) = \\frac{10}{7}$.\n    - Cost contribution from arc (A,C): $c_{AC}/(\\delta_{AC}\\delta_{CD}) = 3 / (\\frac{9}{10} \\cdot \\frac{7}{10}) = 3 / (\\frac{63}{100}) = \\frac{300}{63} = \\frac{100}{21}$.\n    - Total path cost per unit delivered to D: $\\frac{100}{21} + \\frac{10}{7} = \\frac{100}{21} + \\frac{30}{21} = \\frac{130}{21}$.\nComparing costs to D: $\\frac{35}{9} \\approx 3.89$ and $\\frac{130}{21} \\approx 6.19$. The cheaper path is A-B-D.\n\n**Cost per unit delivered to E:**\n1.  **Path A-B-E:**\n    - Cost contribution from arc (B,E): $c_{BE}/\\delta_{BE} = 2/(\\frac{3}{5}) = \\frac{10}{3}$.\n    - Cost contribution from arc (A,B): $c_{AB}/(\\delta_{AB}\\delta_{BE}) = 2 / (\\frac{4}{5} \\cdot \\frac{3}{5}) = 2 / (\\frac{12}{25}) = \\frac{50}{12} = \\frac{25}{6}$.\n    - Total path cost per unit delivered to E: $\\frac{25}{6} + \\frac{10}{3} = \\frac{25}{6} + \\frac{20}{6} = \\frac{45}{6} = \\frac{15}{2}$.\n2.  **Path A-C-E:**\n    - Cost contribution from arc (C,E): $c_{CE}/\\delta_{CE} = 2/1 = 2$.\n    - Cost contribution from arc (A,C): $c_{AC}/(\\delta_{AC}\\delta_{CE}) = 3 / (\\frac{9}{10} \\cdot 1) = \\frac{30}{9} = \\frac{10}{3}$.\n    - Total path cost per unit delivered to E: $\\frac{10}{3} + 2 = \\frac{10}{3} + \\frac{6}{3} = \\frac{16}{3}$.\nComparing costs to E: $\\frac{15}{2} = 7.5$ and $\\frac{16}{3} \\approx 5.33$. The cheaper path is A-C-E.\n\n**Optimal Flow Allocation and Total Cost:**\n- To satisfy demand $d_D=6$, we use the cheapest path A-B-D. Total cost for D: $6 \\times \\frac{35}{9} = \\frac{210}{9} = \\frac{70}{3}$.\n- To satisfy demand $d_E=3$, we use the cheapest path A-C-E. Total cost for E: $3 \\times \\frac{16}{3} = 16$.\n- Minimum total cost: $\\frac{70}{3} + 16 = \\frac{70}{3} + \\frac{48}{3} = \\frac{118}{3}$.\n\n**Verification of Supply Constraint:**\nWe must check if this flow plan is feasible with the supply $S=\\frac{35}{3}$.\n- Shipment from A for D's demand: to deliver $6$ units to D via A-B-D, the flow shipped from A, $f_{AB}$, must be $6 / (\\delta_{AB}\\delta_{BD}) = 6 / (\\frac{4}{5} \\cdot \\frac{9}{10}) = 6 / (\\frac{36}{50}) = \\frac{300}{36} = \\frac{25}{3}$.\n- Shipment from A for E's demand: to deliver $3$ units to E via A-C-E, the flow shipped from A, $f_{AC}$, must be $3 / (\\delta_{AC}\\delta_{CE}) = 3 / (\\frac{9}{10} \\cdot 1) = \\frac{30}{9} = \\frac{10}{3}$.\n- Total flow shipped from A: $f_{AB} + f_{AC} = \\frac{25}{3} + \\frac{10}{3} = \\frac{35}{3}$.\nThis exactly matches the available supply $S=\\frac{35}{3}$. Since the demands are met using the cheapest possible paths and the total required supply does not exceed the available supply, this solution is feasible and optimal.\n\nThe total cost is $\\frac{118}{3}$.", "answer": "$$\\boxed{\\frac{118}{3}}$$", "id": "3155859"}, {"introduction": "Beyond simply moving goods, networks are complex systems for allocating resources. A key challenge is ensuring this allocation is \"fair\" to all users. This problem [@problem_id:3155862] delves into the modern application of Network Utility Maximization (NUM), where the goal is to maximize overall user satisfaction. You will implement a powerful algorithmic paradigm called dual decomposition, where shadow prices on resource constraints emerge naturally as congestion signals that guide users to a globally optimal and fair allocation, demonstrating a deep connection between optimization theory and distributed systems.", "problem": "Consider a peer-to-peer network with a set of uploaders and receivers connected by directed edges that indicate feasible upload relationships. Let the set of uploaders be indexed by $j \\in \\{1,\\dots,J\\}$ and the set of receivers be indexed by $i \\in \\{1,\\dots,I\\}$. Each uploader $j$ has a nonnegative upload capacity $U_j$, and each receiver $i$ can be served by a subset of uploaders denoted $N(i) \\subseteq \\{1,\\dots,J\\}$. Define decision variables $x_{ji} \\ge 0$ as the upload rate allocated from uploader $j$ to receiver $i$. The capacity constraints require $\\sum_{i=1}^{I} x_{ji} \\le U_j$ for all $j$, and the received rate at receiver $i$ is $r_i = \\sum_{j \\in N(i)} x_{ji}$. The network utility maximization problem is to choose allocations to maximize fairness in the sense of maximizing the sum of logarithms of received rates:\n$$\n\\text{maximize } \\sum_{i=1}^{I} \\log(r_i)\n$$\nsubject to\n$$\nx_{ji} \\ge 0 \\text{ for all } j,i, \\quad \\sum_{i=1}^{I} x_{ji} \\le U_j \\text{ for all } j, \\quad r_i = \\sum_{j \\in N(i)} x_{ji} \\text{ for all } i.\n$$\nStarting from the core definitions of convex optimization and Lagrangian duality, derive a dual decomposition method where shadow prices (dual variables) associated with uploader capacity constraints act as congestion signals. Implement an algorithm that iteratively updates shadow prices and computes primal allocations based on these signals, with a diminishing step-size and nonnegativity projection. Use a small positive floor for shadow prices to avoid degenerate solutions.\n\nYour program must compute approximate optimal received rate vectors $r = (r_1,\\dots,r_I)$ for the following test suite of network configurations, and produce the final results in the specified format. All rates are dimensionless and unitless for this problem.\n\nTest Suite:\n- Test case $1$ (balanced, fully connected):\n  - Uploaders: $J = 3$ with capacities $U = [3, 3, 3]$.\n  - Receivers: $I = 3$.\n  - Connectivity: $N(1) = \\{1,2,3\\}$, $N(2) = \\{1,2,3\\}$, $N(3) = \\{1,2,3\\}$.\n- Test case $2$ (heterogeneous capacities, fully connected):\n  - Uploaders: $J = 3$ with capacities $U = [2, 5, 1]$.\n  - Receivers: $I = 3$.\n  - Connectivity: $N(1) = \\{1,2,3\\}$, $N(2) = \\{1,2,3\\}$, $N(3) = \\{1,2,3\\}$.\n- Test case $3$ (sparse connectivity, mixed capacities):\n  - Uploaders: $J = 4$ with capacities $U = [1, 2, 2, 1]$.\n  - Receivers: $I = 3$.\n  - Connectivity: $N(1) = \\{1,2\\}$, $N(2) = \\{2,3,4\\}$, $N(3) = \\{4\\}$.\n\nAlgorithm implementation details to use in your program:\n- Initialize all shadow prices to a positive constant, for example $\\lambda_j^{(0)} = 0.5$ for all $j$.\n- Use a diminishing step-size $\\alpha_k = \\alpha_0 / (1 + k)$ with $\\alpha_0 = 0.1$ and iteration index $k = 0,1,2,\\dots,K-1$.\n- Project shadow prices onto a nonnegative set with a small positive floor $\\varepsilon = 10^{-6}$ after each update to maintain numerical stability.\n- Use a maximum iteration count $K = 5000$.\n- In the primal update for each receiver $i$, given current shadow prices $(\\lambda_j)$, choose the cheapest uploader(s) in $N(i)$ (those attaining the minimum price), set $r_i$ equal to the reciprocal of that minimum price, and split $r_i$ equally among the cheapest uploader(s).\n\nFinal Output Format:\nYour program should produce a single line of output containing the list of rate vectors for all test cases as a list of lists, with each rate rounded to $6$ decimal places, for example:\n$$\n\\text{\"[[r_{1,1},r_{1,2},\\dots],[r_{2,1},\\dots],[r_{3,1},\\dots]]\"}\n$$\nwhere $r_{t,i}$ denotes the rate for receiver $i$ in test case $t$. The printed line must contain only this list-of-lists string and nothing else.", "solution": "The user wants to solve a network utility maximization problem using a dual decomposition method.\n\n### 1. Problem Validation\n\nThe problem is a standard network utility maximization problem with a proportionally fair objective function, $\\sum_{i=1}^{I} \\log(r_i)$. This is a well-known convex optimization problem. All definitions, variables ($x_{ji}$, $r_i$), parameters ($J$, $I$, $U_j$, $N(i)$), and constraints are clearly and correctly stated. The algorithmic parameters for the dual decomposition method (initialization, step-size rule, projection, iteration count) are fully specified. The test cases are well-defined and cover different network topologies and capacity distributions. The problem is scientifically grounded in convex optimization and network theory, well-posed (a unique solution for rates $r_i$ exists), and complete. Therefore, the problem is deemed **valid**.\n\n### 2. Theoretical Derivation of the Dual Decomposition Algorithm\n\nThe primal problem is:\n$$\n\\text{maximize} \\quad \\sum_{i=1}^{I} \\log\\left(\\sum_{j \\in N(i)} x_{ji}\\right)\n$$\nsubject to:\n$$\n\\begin{align*}\n\\sum_{i=1}^{I} x_{ji} &\\le U_j \\quad \\forall j \\in \\{1, \\dots, J\\} \\\\\nx_{ji} &\\ge 0 \\quad \\forall i, j\n\\end{align*}\n$$\nThis is a convex optimization problem. The constraints $\\sum_{i=1}^{I} x_{ji} \\le U_j$ are coupling constraints across different receivers. We can use Lagrangian duality to decompose the problem. We introduce Lagrange multipliers (shadow prices) $\\lambda_j \\ge 0$ for each capacity constraint.\n\nThe Lagrangian function $L(x, \\lambda)$ is:\n$$\nL(x, \\lambda) = \\sum_{i=1}^{I} \\log\\left(\\sum_{j \\in N(i)} x_{ji}\\right) - \\sum_{j=1}^{J} \\lambda_j \\left( \\sum_{i=1}^{I} x_{ji} - U_j \\right)\n$$\nRearranging the terms, we get:\n$$\nL(x, \\lambda) = \\sum_{i=1}^{I} \\left( \\log\\left(\\sum_{j \\in N(i)} x_{ji}\\right) - \\sum_{j \\in N(i)} \\lambda_j x_{ji} \\right) + \\sum_{j=1}^{J} \\lambda_j U_j\n$$\nThe dual function $g(\\lambda)$ is the supremum of the Lagrangian over the primal variables $x_{ji} \\ge 0$:\n$$\ng(\\lambda) = \\sup_{x \\ge 0} L(x, \\lambda)\n$$\nThe problem beautifully decomposes into $I$ independent subproblems, one for each receiver $i$:\n$$\ng(\\lambda) = \\sum_{i=1}^{I} \\sup_{x_{ji} \\ge 0, j \\in N(i)} \\left( \\log\\left(\\sum_{j \\in N(i)} x_{ji}\\right) - \\sum_{j \\in N(i)} \\lambda_j x_{ji} \\right) + \\sum_{j=1}^{J} \\lambda_j U_j\n$$\n\n**Receiver's Subproblem (Primal Update):**\nFor each receiver $i$, we solve:\n$$\n\\text{maximize}_{x_{ji} \\ge 0, j \\in N(i)} \\quad \\log(r_i) - \\sum_{j \\in N(i)} \\lambda_j x_{ji} \\quad \\text{where } r_i = \\sum_{j \\in N(i)} x_{ji}\n$$\nFor a fixed total rate $r_i$, the term $\\sum_{j \\in N(i)} \\lambda_j x_{ji}$ is minimized by allocating the entire rate $r_i$ to the uploader(s) in $N(i)$ with the minimum price $\\lambda_j$. Let $\\lambda_i^* = \\min_{j \\in N(i)} \\lambda_j$. The cost term becomes $\\lambda_i^* r_i$. The subproblem for receiver $i$ simplifies to:\n$$\n\\text{maximize}_{r_i > 0} \\quad \\log(r_i) - \\lambda_i^* r_i\n$$\nTaking the derivative with respect to $r_i$ and setting it to zero gives:\n$$\n\\frac{1}{r_i} - \\lambda_i^* = 0 \\quad \\implies \\quad r_i^* = \\frac{1}{\\lambda_i^*}\n$$\nThis is the optimal rate for receiver $i$ given the current prices $\\lambda$. As per the problem statement, this rate is then split equally among the cheapest uploaders available to receiver $i$.\n\n**Dual Problem (Master Problem):**\nThe dual problem is to find the prices $\\lambda$ that minimize the dual function $g(\\lambda)$:\n$$\n\\text{minimize}_{\\lambda \\ge 0} \\quad g(\\lambda)\n$$\nWe solve this using the subgradient method. The subgradient of $g(\\lambda)$ with respect to $\\lambda_j$ is given by:\n$$\n\\nabla_{\\lambda_j} g(\\lambda) = U_j - \\sum_{i=1}^{I} x_{ji}^*(\\lambda)\n$$\nwhere $x_{ji}^*(\\lambda)$ are the optimal allocations from the receiver's subproblem. The update rule for the dual variables is a gradient descent step:\n$$\n\\lambda_j^{(k+1)} = \\lambda_j^{(k)} - \\alpha_k \\left( U_j - \\sum_{i=1}^{I} x_{ji}^*(\\lambda^{(k)}) \\right) = \\lambda_j^{(k)} + \\alpha_k \\left( \\sum_{i=1}^{I} x_{ji}^*(\\lambda^{(k)}) - U_j \\right)\n$$\nThe term $\\sum_i x_{ji}^*$ is the total demand placed on uploader $j$. The update rule increases the price $\\lambda_j$ if demand exceeds capacity ($U_j$) and decreases it otherwise, thus providing a congestion signal. Finally, the prices are projected to be at least $\\varepsilon > 0$ to prevent them from becoming zero or negative, which would cause numerical instability ($r_i \\to \\infty$).\n\n### 3. Algorithm Summary\n\n1.  **Initialize**: Set shadow prices $\\lambda_j^{(0)}$ (e.g., to $0.5$), iteration count $k=0$.\n2.  **Iterate** for $k = 0, 1, \\dots, K-1$:\n    a.  **Primal Update (for each receiver $i$):**\n        i.  Find the minimum price from available uploaders: $\\lambda_i^* = \\min_{j \\in N(i)} \\lambda_j^{(k)}$.\n        ii. Identify the set of cheapest uploaders $J_i^* = \\{ j \\in N(i) \\mid \\lambda_j^{(k)} = \\lambda_i^* \\}$.\n        iii. Calculate the optimal rate: $r_i = 1 / \\lambda_i^*$.\n        iv. Determine flow allocations $x_{ji}$. For each $j \\in J_i^*$, set $x_{ji} = r_i / |J_i^*|$. For all other $j$, set $x_{ji}=0$.\n    b.  **Dual Update (for each uploader $j$):**\n        i.  Calculate the total demand on uploader $j$: $d_j = \\sum_{i=1}^{I} x_{ji}$.\n        ii. Calculate the diminishing step-size: $\\alpha_k = \\alpha_0 / (1+k)$.\n        iii. Update the price: $\\lambda_j^{\\text{new}} = \\lambda_j^{(k)} + \\alpha_k (d_j - U_j)$.\n        iv. Project the price: $\\lambda_j^{(k+1)} = \\max(\\varepsilon, \\lambda_j^{\\text{new}})$.\n3.  **Result**: The final computed rates are the vector $r=(r_1, r_2, \\dots, r_I)$ from the last iteration.\n\nThis algorithm is implemented for each of the three test cases provided.", "answer": "```python\nimport numpy as np\n\ndef run_simulation(J, I, U, N_map, K, alpha0, lambda0_val, epsilon):\n    \"\"\"\n    Solves the network utility maximization problem using dual decomposition.\n\n    Args:\n        J (int): Number of uploaders.\n        I (int): Number of receivers.\n        U (list or np.ndarray): Capacities of uploaders.\n        N_map (list of lists): Connectivity map, N_map[i] are uploaders for receiver i.\n        K (int): Number of iterations.\n        alpha0 (float): Initial step-size parameter.\n        lambda0_val (float): Initial value for shadow prices.\n        epsilon (float): Small positive floor for shadow prices.\n\n    Returns:\n        np.ndarray: The computed rate vector for the receivers.\n    \"\"\"\n    lambdas = np.full(J, float(lambda0_val))\n    U = np.array(U, dtype=float)\n    rates = np.zeros(I, dtype=float)\n\n    for k in range(K):\n        # Primal update phase (receivers solve their subproblems)\n        allocations = np.zeros((J, I), dtype=float)\n        \n        for i in range(I):\n            available_uploaders = N_map[i]\n            \n            # Find the minimum price among available uploaders for receiver i\n            min_lambda = float('inf')\n            if not available_uploaders:\n                continue\n            \n            # More robust way to find minimum from a subset of an array\n            min_lambda = np.min(lambdas[available_uploaders])\n            \n            # Identify all uploaders offering this minimum price\n            cheapest_uploaders = [j for j in available_uploaders if lambdas[j] == min_lambda]\n            \n            # Calculate receiver's optimal rate based on the cheapest price\n            # The epsilon floor on lambdas prevents division by zero\n            rate_i = 1.0 / min_lambda\n            rates[i] = rate_i\n            \n            # Allocate the rate equally among the cheapest uploaders\n            if cheapest_uploaders:\n                alloc_per_uploader = rate_i / len(cheapest_uploaders)\n                for j in cheapest_uploaders:\n                    allocations[j, i] = alloc_per_uploader\n        \n        # Dual update phase (uploaders update their prices)\n        # Calculate total demand d_j for each uploader j\n        demands = np.sum(allocations, axis=1)\n        \n        # Calculate step size\n        step_size = alpha0 / (1.0 + k)\n        \n        # Calculate subgradients\n        subgradients = demands - U\n        \n        # Update lambda values\n        lambdas += step_size * subgradients\n        \n        # Project lambdas onto [epsilon, +inf)\n        lambdas = np.maximum(epsilon, lambdas)\n        \n    return rates\n\ndef solve():\n    \"\"\"\n    Defines test cases, runs the simulation for each, and prints the results.\n    \"\"\"\n    # Algorithm parameters from the problem statement\n    K = 5000\n    alpha0 = 0.1\n    lambda0_val = 0.5\n    epsilon = 1e-6\n\n    test_cases = [\n        {\n            \"J\": 3, \"I\": 3, \"U\": [3, 3, 3],\n            \"N_map\": [[0, 1, 2], [0, 1, 2], [0, 1, 2]]\n        },\n        {\n            \"J\": 3, \"I\": 3, \"U\": [2, 5, 1],\n            \"N_map\": [[0, 1, 2], [0, 1, 2], [0, 1, 2]]\n        },\n        {\n            \"J\": 4, \"I\": 3, \"U\": [1, 2, 2, 1],\n            # Connectivity N(i) from problem statement is 1-indexed.\n            # Convert to 0-indexed for Python.\n            # N(1)={1,2}, N(2)={2,3,4}, N(3)={4}\n            \"N_map\": [[0, 1], [1, 2, 3], [3]]\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        rates = run_simulation(\n            case[\"J\"], case[\"I\"], case[\"U\"], case[\"N_map\"],\n            K, alpha0, lambda0_val, epsilon\n        )\n        # Round the final rates to 6 decimal places as required\n        rounded_rates = np.round(rates, 6).tolist()\n        results.append(rounded_rates)\n\n    # Format the output string exactly as specified: [[r11,r12,...],[r21,...],...]\n    # Using str() on the list of lists produces the required format without extra spaces.\n    final_output_str = str(results).replace(\" \", \"\")\n    print(final_output_str)\n\nsolve()\n```", "id": "3155862"}]}