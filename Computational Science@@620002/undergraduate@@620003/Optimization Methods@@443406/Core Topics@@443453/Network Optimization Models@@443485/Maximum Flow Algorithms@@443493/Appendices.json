{"hands_on_practices": [{"introduction": "The best way to truly grasp the Ford-Fulkerson method is to perform it by hand. This exercise guides you through the complete process on a small network, from an initial zero flow to the final maximum flow. You will practice identifying augmenting paths using Breadth-First Search (BFS), calculating bottleneck capacities, and meticulously updating the residual graph after each augmentation, culminating in a verification of your result using the max-flow min-cut theorem.", "problem": "Consider a directed network with source $s$ and sink $t$. The node set is $V=\\{s,a,b,c,d,t\\}$. The capacity $c_{uv}$ of each directed edge $(u,v)$ is given below. All unspecified directed pairs have capacity $0$.\n\n- $s \\to a$: $8$\n- $s \\to b$: $5$\n- $a \\to b$: $3$\n- $a \\to c$: $4$\n- $a \\to d$: $2$\n- $b \\to a$: $1$\n- $b \\to c$: $4$\n- $b \\to d$: $5$\n- $c \\to d$: $8$\n- $c \\to t$: $5$\n- $d \\to t$: $7$\n\nStarting from the fundamental definitions of a flow (capacity constraints, flow conservation at nodes, and residual capacity), apply the Ford–Fulkerson method with Breadth-First Search (BFS) to select augmenting paths. In each BFS, explore outgoing residual neighbors in alphabetical order of vertex names. At each augmentation step, compute and record the residual graph that results, listing the residual capacities on all directed edges with strictly positive residual capacity (include both forward and backward residual edges). Continue until no $s$–$t$ path exists in the residual graph.\n\nThen, verify optimality by:\n- Identifying the set $S \\subseteq V$ of vertices reachable from $s$ in the final residual graph and using this to specify an $s$–$t$ cut $(S,\\bar{S})$.\n- Computing the capacity of this cut from first principles and explaining why it certifies maximality of the flow.\n\nState the value of the maximum $s$–$t$ flow as a single real number. No rounding is required.", "solution": "The problem requires finding the maximum flow from a source node $s$ to a sink node $t$ in a given directed network. We will use the Ford-Fulkerson method. The augmenting paths will be found using Breadth-First Search (BFS) on the residual graph. At each step of the BFS, outgoing residual neighbors are explored in alphabetical order.\n\nThe network has the vertex set $V=\\{s,a,b,c,d,t\\}$. The initial capacities $c(u,v)$ for directed edges $(u,v)$ are:\n- $c(s,a) = 8$\n- $c(s,b) = 5$\n- $c(a,b) = 3$\n- $c(a,c) = 4$\n- $c(a,d) = 2$\n- $c(b,a) = 1$\n- $c(b,c) = 4$\n- $c(b,d) = 5$\n- $c(c,d) = 8$\n- $c(c,t) = 5$\n- $c(d,t) = 7$\nAll other capacities are $0$.\n\nThe Ford-Fulkerson method iteratively finds an augmenting $s-t$ path in the residual graph $G_f$ and increases the flow. The residual capacity of an edge $(u,v)$ is $c_f(u,v) = c(u,v) - f(u,v)$, where $f(u,v)$ is the current flow. For each unit of flow sent from $u$ to $v$, the residual capacity of the forward edge $(u,v)$ decreases by one unit, and the residual capacity of the backward edge $(v,u)$ increases by one unit. Initially, the flow is $0$ everywhere, so the residual graph is identical to the original capacity graph.\n\n**Iteration 1: Find Augmenting Path in $G_{f_0}$**\n\nWe start with a total flow of $|f|=0$. The residual capacities $c_{f_0}(u,v)$ are equal to the original capacities $c(u,v)$.\n1.  **BFS for an augmenting path:**\n    - Queue: $[s]$. Predecessor map `pred`: $\\{s: \\text{None}\\}$.\n    - Dequeue $s$. Neighbors: $a, b$. In alphabetical order:\n        - Enqueue $a$, `pred[a] = s`.\n        - Enqueue $b$, `pred[b] = s`.\n    - Queue: $[a, b]$. Dequeue $a$. Neighbors: $b, c, d$.\n        - $b$ is already in the queue.\n        - Enqueue $c$, `pred[c] = a`.\n        - Enqueue $d$, `pred[d] = a`.\n    - Queue: $[b, c, d]$. Dequeue $b$. Neighbors: $a, c, d$ are all visited/in queue.\n    - Queue: $[c, d]$. Dequeue $c$. Neighbors: $d, t$.\n        - $d$ is in the queue.\n        - Enqueue $t$, `pred[t] = c`. The sink $t$ has been reached.\n2.  **Path and Bottleneck:** The path found is $P_1: s \\to a \\to c \\to t$. The bottleneck capacity is $\\Delta_1 = \\min(c_{f_0}(s,a), c_{f_0}(a,c), c_{f_0}(c,t)) = \\min(8, 4, 5) = 4$.\n3.  **Augment Flow:** We push $\\Delta_1=4$ units of flow along $P_1$. The total flow becomes $|f| = 4$.\n4.  **Residual Graph $G_{f_1}$:**\n    - For edges in $P_1$: $c_{f_1}(s,a) = 8-4=4$, $c_{f_1}(a,c) = 4-4=0$, $c_{f_1}(c,t) = 5-4=1$.\n    - For backward edges: $c_{f_1}(a,s) = 0+4=4$, $c_{f_1}(c,a) = 0+4=4$, $c_{f_1}(t,c) = 0+4=4$.\n    - Strictly positive residual capacities in $G_{f_1}$:\n        - $c_{f_1}(s,a)=4$, $c_{f_1}(s,b)=5$\n        - $c_{f_1}(a,b)=3$, $c_{f_1}(a,d)=2$, $c_{f_1}(a,s)=4$\n        - $c_{f_1}(b,a)=1$, $c_{f_1}(b,c)=4$, $c_{f_1}(b,d)=5$\n        - $c_{f_1}(c,a)=4$, $c_{f_1}(c,d)=8$, $c_{f_1}(c,t)=1$\n        - $c_{f_1}(d,t)=7$\n        - $c_{f_1}(t,c)=4$\n\n**Iteration 2: Find Augmenting Path in $G_{f_1}$**\n\n1.  **BFS:**\n    - Queue: $[s]$. `pred`: $\\{s: \\text{None}\\}$.\n    - Dequeue $s$. Neighbors: $a, b$. Enqueue $a, b$.\n    - Queue: $[a, b]$. Dequeue $a$. Neighbors (alpha): $b, d, s$. $b$ in queue. Enqueue $d$ (`pred[d]=a`). $s$ visited.\n    - Queue: $[b, d]$. Dequeue $b$. Neighbors (alpha): $a, c, d$. $a$ visited. Enqueue $c$ (`pred[c]=b`). $d$ in queue.\n    - Queue: $[d, c]$. Dequeue $d$. Neighbors: $t$. Enqueue $t$ (`pred[t]=d`). $t$ reached.\n2.  **Path and Bottleneck:** The path is $P_2: s \\to a \\to d \\to t$. The bottleneck is $\\Delta_2 = \\min(c_{f_1}(s,a), c_{f_1}(a,d), c_{f_1}(d,t)) = \\min(4, 2, 7) = 2$.\n3.  **Augment Flow:** Total flow becomes $|f| = 4+2=6$.\n4.  **Residual Graph $G_{f_2}$:**\n    - Edges in $P_2$: $c_{f_2}(s,a) = 4-2=2$, $c_{f_2}(a,d)=2-2=0$, $c_{f_2}(d,t)=7-2=5$.\n    - Backward edges: $c_{f_2}(a,s) = 4+2=6$, $c_{f_2}(d,a)=0+2=2$, $c_{f_2}(t,d)=0+2=2$.\n    - Strictly positive residual capacities in $G_{f_2}$:\n        - $c_{f_2}(s,a)=2$, $c_{f_2}(s,b)=5$\n        - $c_{f_2}(a,b)=3$, $c_{f_2}(a,s)=6$\n        - $c_{f_2}(b,a)=1$, $c_{f_2}(b,c)=4$, $c_{f_2}(b,d)=5$\n        - $c_{f_2}(c,a)=4$, $c_{f_2}(c,d)=8$, $c_{f_2}(c,t)=1$\n        - $c_{f_2}(d,a)=2$, $c_{f_2}(d,t)=5$\n        - $c_{f_2}(t,c)=4$, $c_{f_2}(t,d)=2$\n\n**Iteration 3: Find Augmenting Path in $G_{f_2}$**\n\n1.  **BFS:**\n    - Q: $[s]$. Deq $s$. Enq $a,b$.\n    - Q: $[a,b]$. Deq $a$. Neighbors $b,s$ visited/in Q.\n    - Q: $[b]$. Deq $b$. Neighbors $a,c,d,s$. $a$ visited. Enq $c$ (`pred[c]=b`). Enq $d$ (`pred[d]=b`). $s$ visited.\n    - Q: $[c,d]$. Deq $c$. Neighbors $a,d,t$. $a,d$ visited/in Q. Enq $t$ (`pred[t]=c`). $t$ reached.\n2.  **Path and Bottleneck:** The path is $P_3: s \\to b \\to c \\to t$. The bottleneck is $\\Delta_3 = \\min(c_{f_2}(s,b), c_{f_2}(b,c), c_{f_2}(c,t)) = \\min(5, 4, 1) = 1$.\n3.  **Augment Flow:** Total flow is $|f| = 6+1=7$.\n4.  **Residual Graph $G_{f_3}$:**\n    - Edges in $P_3$: $c_{f_3}(s,b)=5-1=4$, $c_{f_3}(b,c)=4-1=3$, $c_{f_3}(c,t)=1-1=0$.\n    - Backward edges: $c_{f_3}(b,s)=0+1=1$, $c_{f_3}(c,b)=0+1=1$, $c_{f_3}(t,c)=4+1=5$.\n    - Strictly positive residual capacities in $G_{f_3}$:\n        - $c_{f_3}(s,a)=2$, $c_{f_3}(s,b)=4$\n        - $c_{f_3}(a,b)=3$, $c_{f_3}(a,s)=6$\n        - $c_{f_3}(b,a)=1$, $c_{f_3}(b,c)=3$, $c_{f_3}(b,d)=5$, $c_{f_3}(b,s)=1$\n        - $c_{f_3}(c,a)=4$, $c_{f_3}(c,b)=1$, $c_{f_3}(c,d)=8$\n        - $c_{f_3}(d,a)=2$, $c_{f_3}(d,t)=5$\n        - $c_{f_3}(t,c)=5$, $c_{f_3}(t,d)=2$\n\n**Iteration 4: Find Augmenting Path in $G_{f_3}$**\n\n1.  **BFS:**\n    - Q: $[s]$. Deq $s$. Enq $a,b$.\n    - Q: $[a,b]$. Deq $a$. Neighbors $b,s$ visited/in Q.\n    - Q: $[b]$. Deq $b$. Neighbors $a,c,d,s$. $a,s$ visited. Enq $c$ (`pred[c]=b`). Enq $d$ (`pred[d]=b`).\n    - Q: $[c,d]$. Deq $c$. Neighbors $a,b,d$ visited/in Q.\n    - Q: $[d]$. Deq $d$. Neighbors $a,t$. $a$ visited. Enq $t$ (`pred[t]=d`). $t$ reached.\n2.  **Path and Bottleneck:** The path is $P_4: s \\to b \\to d \\to t$. The bottleneck is $\\Delta_4 = \\min(c_{f_3}(s,b), c_{f_3}(b,d), c_{f_3}(d,t)) = \\min(4, 5, 5) = 4$.\n3.  **Augment Flow:** Total flow is $|f| = 7+4=11$.\n4.  **Residual Graph $G_{f_4}$:**\n    - Edges in $P_4$: $c_{f_4}(s,b)=4-4=0$, $c_{f_4}(b,d)=5-4=1$, $c_{f_4}(d,t)=5-4=1$.\n    - Backward edges: $c_{f_4}(b,s)=1+4=5$, $c_{f_4}(d,b)=0+4=4$, $c_{f_4}(t,d)=2+4=6$.\n    - Strictly positive residual capacities in $G_{f_4}$:\n        - $c_{f_4}(s,a)=2$\n        - $c_{f_4}(a,b)=3$, $c_{f_4}(a,s)=6$\n        - $c_{f_4}(b,a)=1$, $c_{f_4}(b,c)=3$, $c_{f_4}(b,d)=1$, $c_{f_4}(b,s)=5$\n        - $c_{f_4}(c,a)=4$, $c_{f_4}(c,b)=1$, $c_{f_4}(c,d)=8$\n        - $c_{f_4}(d,a)=2$, $c_{f_4}(d,b)=4$, $c_{f_4}(d,t)=1$\n        - $c_{f_4}(t,c)=5$, $c_{f_4}(t,d)=6$\n\n**Iteration 5: Find Augmenting Path in $G_{f_4}$**\n\n1.  **BFS:**\n    - Q: $[s]$. Deq $s$. Neighbor $a$. Enq $a$.\n    - Q: $[a]$. Deq $a$. Neighbors $b,s$. Enq $b$ (`pred[b]=a`). $s$ visited.\n    - Q: $[b]$. Deq $b$. Neighbors $a,c,d,s$. $a,s$ visited. Enq $c$ (`pred[c]=b`). Enq $d$ (`pred[d]=b`).\n    - Q: $[c,d]$. Deq $c$. Neighbors $a,b,d$ visited/in Q.\n    - Q: $[d]$. Deq $d$. Neighbors $a,b,t$. $a,b$ visited. Enq $t$ (`pred[t]=d`). $t$ reached.\n2.  **Path and Bottleneck:** The path is $P_5: s \\to a \\to b \\to d \\to t$. The bottleneck is $\\Delta_5 = \\min(c_{f_4}(s,a), c_{f_4}(a,b), c_{f_4}(b,d), c_{f_4}(d,t)) = \\min(2, 3, 1, 1) = 1$.\n3.  **Augment Flow:** Total flow is $|f| = 11+1=12$.\n4.  **Residual Graph $G_{f_5}$:**\n    - Edges in $P_5$: $c_{f_5}(s,a)=2-1=1$, $c_{f_5}(a,b)=3-1=2$, $c_{f_5}(b,d)=1-1=0$, $c_{f_5}(d,t)=1-1=0$.\n    - Backward edges: $c_{f_5}(a,s)=6+1=7$, $c_{f_5}(b,a)=1+1=2$, $c_{f_5}(d,b)=4+1=5$, $c_{f_5}(t,d)=6+1=7$.\n    - Strictly positive residual capacities in $G_{f_5}$:\n        - $c_{f_5}(s,a)=1$\n        - $c_{f_5}(a,b)=2$, $c_{f_5}(a,s)=7$\n        - $c_{f_5}(b,a)=2$, $c_{f_5}(b,c)=3$, $c_{f_5}(b,s)=5$\n        - $c_{f_5}(c,a)=4$, $c_{f_5}(c,b)=1$, $c_{f_5}(c,d)=8$\n        - $c_{f_5}(d,a)=2$, $c_{f_5}(d,b)=5$\n        - $c_{f_5}(t,c)=5$, $c_{f_5}(t,d)=7$\n\n**Termination**\n\nWe attempt one more BFS on the final residual graph $G_{f_5}$:\n1.  **BFS:**\n    - Q: $[s]$. Deq $s$. Enq $a$.\n    - Q: $[a]$. Deq $a$. Neighbors $b,s$. Enq $b$.\n    - Q: $[b]$. Deq $b$. Neighbors $a,c,s$. Enq $c$.\n    - Q: $[c]$. Deq $c$. Neighbors $a,b,d$. Enq $d$.\n    - Q: $[d]$. Deq $d$. Neighbors $a,b$. Both visited.\n    - The queue becomes empty. The set of visited nodes is $\\{s, a, b, c, d\\}$. The sink $t$ is not reachable from $s$.\nThe algorithm terminates. The maximum flow is the sum of all augmentations: $|f|_{max} = \\Delta_1 + \\Delta_2 + \\Delta_3 + \\Delta_4 + \\Delta_5 = 4 + 2 + 1 + 4 + 1 = 12$.\n\n**Optimality Verification**\n\nAccording to the max-flow min-cut theorem, the value of the maximum flow is equal to the capacity of the minimum $s-t$ cut. We can find a minimum cut from the final residual graph $G_{f_5}$.\n1.  **Identify the cut:** Let $S$ be the set of vertices reachable from $s$ in $G_{f_5}$, and $\\bar{S} = V \\setminus S$. From our final BFS attempt, we found $S = \\{s, a, b, c, d\\}$. Consequently, $\\bar{S} = \\{t\\}$.\n2.  **Compute the cut capacity:** The capacity of the cut $(S, \\bar{S})$ is the sum of capacities of all original edges $(u,v)$ where $u \\in S$ and $v \\in \\bar{S}$.\n    - The edges crossing from $S$ to $\\bar{S}$ are $(c,t)$ and $(d,t)$.\n    - The capacity of the cut is $C(S, \\bar{S}) = c(c,t) + c(d,t)$.\n    - Substituting the given values: $C(S, \\bar{S}) = 5 + 7 = 12$.\n3.  **Conclusion:** We have found a flow of value $12$ and an $s-t$ cut of capacity $12$. Since the value of any flow is at most the capacity of any cut, this flow must be maximum and this cut must be minimum. The existence of this cut certifies that the flow value of $12$ is maximal.", "answer": "$$\\boxed{12}$$", "id": "3148824"}, {"introduction": "One of the most powerful aspects of the Ford-Fulkerson method is its ability to \"undo\" previous flow assignments by pushing flow backward along reverse edges in the residual graph. This mechanism is essential for correcting initial greedy choices and converging to a true maximum. This practice focuses specifically on a single, critical augmentation involving a reverse edge, allowing you to see exactly how the flow values and residual capacities are adjusted.", "problem": "Consider a directed network with vertex set $V=\\{s,a,b,c,t\\}$ and edge set $E=\\{(s,a),(s,c),(a,b),(a,t),(c,b),(b,t)\\}$. Each edge $(u,v)\\in E$ has a nonnegative capacity $c_{uv}$. A flow on this network is a function $f:V\\times V\\to\\mathbb{R}$ that satisfies capacity constraints on edges, flow conservation at all vertices except the source $s$ and the sink $t$, and skew symmetry $f_{uv}=-f_{vu}$ for all ordered pairs $(u,v)\\in V\\times V$. The residual network induced by a feasible flow is defined in terms of the ability to increase or decrease flow along directed pairs, creating both forward and reverse residual capacities. The Ford–Fulkerson method augments along a directed path from $s$ to $t$ in the residual network by the largest amount that does not violate any residual capacity along that path, and then updates the flow accordingly.\n\nLet the capacities be\n$$(c_{s,a},c_{s,c},c_{a,b},c_{a,t},c_{c,b},c_{b,t})=(6,5,3,4,4,7).$$\nA feasible initial flow is given by\n$$(f_{s,a},f_{s,c},f_{a,b},f_{a,t},f_{c,b},f_{b,t})=(3,2,2,1,2,4),$$\nand, by skew symmetry, $f_{v,u}=-f_{u,v}$ for all ordered pairs $(u,v)$.\n\nIn the residual network induced by this initial flow, consider the directed path\n$$s\\to c\\to b\\to a\\to t,$$\nwhere the traversal from $b$ to $a$ is along the reverse of the original edge $(a,b)$. Perform a single augmentation along this path by the maximum amount permitted by the residual capacities along the path, and update the flow $f$ accordingly.\n\nTasks:\n1. Determine the largest augmentation value along the path $s\\to c\\to b\\to a\\to t$ as permitted by residual capacities, and carry out this augmentation to obtain the updated flow $f$.\n2. Compute the updated residual capacities for the directed pairs $(s,c)$, $(c,b)$, $(a,b)$, $(b,a)$, and $(a,t)$ after this augmentation.\n3. Verify skew symmetry $f_{uv}=-f_{vu}$ explicitly for at least one ordered pair.\n4. Finally, report the resulting value of the flow from $s$ to $t$, defined as $\\sum_{v\\in V} f_{s,v}$, after this single augmentation.\n\nProvide the final value of the flow from $s$ to $t$ as a single real number. No rounding is required.", "solution": "The problem asks for a single flow augmentation along a specified path in a given network. Let the initial flow be $f$ and the updated flow be $f'$. The capacities are given by the vector $(c_{s,a}, c_{s,c}, c_{a,b}, c_{a,t}, c_{c,b}, c_{b,t}) = (6, 5, 3, 4, 4, 7)$. The initial feasible flow is given by $(f_{s,a}, f_{s,c}, f_{a,b}, f_{a,t}, f_{c,b}, f_{b,t}) = (3, 2, 2, 1, 2, 4)$. All other flows on edges not in $E$ are $0$.\n\nThe residual capacity $c_f(u,v)$ of an ordered pair of vertices $(u,v)$ with respect to a flow $f$ is defined as:\n1.  $c_f(u,v) = c_{uv} - f_{uv}$ if $(u,v) \\in E$ (a forward edge). This is the remaining capacity.\n2.  $c_f(u,v) = f_{vu}$ if $(v,u) \\in E$ (a reverse edge). This is the flow that can be pushed back.\n3.  $c_f(u,v) = 0$ otherwise.\n\nThe augmenting path is given as $P = s \\to c \\to b \\to a \\to t$. We must first determine the maximum possible augmentation value along this path, which is the minimum of the residual capacities of the segments of the path.\n\nThe segments of the path are $(s,c)$, $(c,b)$, $(b,a)$, and $(a,t)$.\n1.  **Segment $(s,c)$:** This is a forward edge, as $(s,c) \\in E$. The residual capacity is:\n    $$c_f(s,c) = c_{sc} - f_{sc} = 5 - 2 = 3$$\n2.  **Segment $(c,b)$:** This is a forward edge, as $(c,b) \\in E$. The residual capacity is:\n    $$c_f(c,b) = c_{cb} - f_{cb} = 4 - 2 = 2$$\n3.  **Segment $(b,a)$:** This is a reverse edge, as the original edge is $(a,b) \\in E$. The residual capacity is the current flow on the edge $(a,b)$:\n    $$c_f(b,a) = f_{ab} = 2$$\n4.  **Segment $(a,t)$:** This is a forward edge, as $(a,t) \\in E$. The residual capacity is:\n    $$c_f(a,t) = c_{at} - f_{at} = 4 - 1 = 3$$\n\nThe maximum augmentation value, $\\Delta$, is the minimum of these residual capacities:\n$$\\Delta = \\min\\{c_f(s,c), c_f(c,b), c_f(b,a), c_f(a,t)\\} = \\min\\{3, 2, 2, 3\\} = 2$$\nThis completes the first part of Task 1.\n\nNext, we augment the flow by $\\Delta=2$ along path $P$. The flow $f'_{uv}$ is updated according to the following rules:\n-   For each forward edge $(u,v)$ on $P$, we increase the flow: $f'_{uv} = f_{uv} + \\Delta$.\n-   For each reverse edge $(u,v)$ on $P$ (where $(v,u) \\in E$), we decrease the flow on the original edge: $f'_{vu} = f_{vu} - \\Delta$.\n\nApplying these rules:\n-   For $(s,c)$: $f'_{sc} = f_{sc} + \\Delta = 2 + 2 = 4$.\n-   For $(c,b)$: $f'_{cb} = f_{cb} + \\Delta = 2 + 2 = 4$.\n-   For $(b,a)$, the original edge is $(a,b)$: $f'_{ab} = f_{ab} - \\Delta = 2 - 2 = 0$.\n-   For $(a,t)$: $f'_{at} = f_{at} + \\Delta = 1 + 2 = 3$.\n\nFlows on edges not part of the augmenting path remain unchanged:\n-   $f'_{sa} = f_{sa} = 3$.\n-   $f'_{bt} = f_{bt} = 4$.\n\nThis completes the second part of Task 1.\n\nFor Task 2, we compute the updated residual capacities for the specified pairs using the new flow $f'$.\n-   $(s,c)$: A forward edge. $c_{f'}(s,c) = c_{sc} - f'_{sc} = 5 - 4 = 1$.\n-   $(c,b)$: A forward edge. $c_{f'}(c,b) = c_{cb} - f'_{cb} = 4 - 4 = 0$.\n-   $(a,b)$: A forward edge. $c_{f'}(a,b) = c_{ab} - f'_{ab} = 3 - 0 = 3$.\n-   $(b,a)$: A reverse edge. $c_{f'}(b,a) = f'_{ab} = 0$.\n-   $(a,t)$: A forward edge. $c_{f'}(a,t) = c_{at} - f'_{at} = 4 - 3 = 1$.\n\nFor Task 3, we verify skew symmetry $f'_{uv} = -f'_{vu}$ for an ordered pair. Let's use $(a,b)$.\nFrom our update, we have $f'_{ab} = 0$.\nBy the definition of skew symmetry, $f'_{ba}$ must be $-f'_{ab}$.\nTherefore, $f'_{ba} = -0 = 0$. Let's verify this using the augmentation rules on the reverse flow. The initial reverse flow was $f_{ba} = -f_{ab} = -2$. The path segment $b \\to a$ is a forward segment in the residual graph, so flow is added in this direction. A flow push of $\\Delta$ from $b$ to $a$ is equivalent to adding $\\Delta$ to $f_{ba}$.\n$f'_{ba} = f_{ba} + \\Delta = -2 + 2 = 0$.\nThe results are consistent, and skew symmetry holds: $f'_{ab} = 0$ and $f'_{ba}=0$.\n\nFor Task 4, we report the resulting value of the flow from $s$ to $t$. The value of the flow, $|f'|$, is the total net flow out of the source $s$:\n$$|f'| = \\sum_{v \\in V} f'_{sv}$$\nThe only vertices $v$ for which $f'_{sv}$ can be non-zero are $a$ and $c$, as $(s,a)$ and $(s,c)$ are the only outgoing edges from $s$.\n$$|f'| = f'_{sa} + f'_{sc}$$\nSubstituting the updated flow values:\n$$|f'| = 3 + 4 = 7$$\nAs a check, we can compute the total net flow into the sink $t$:\n$$|f'| = \\sum_{v \\in V} f'_{vt} = f'_{at} + f'_{bt} = 3 + 4 = 7$$\nThe values match. The flow value after the single augmentation is $7$. The initial flow value was $|f| = f_{sa} + f_{sc} = 3+2=5$. The new flow value is $|f'| = |f| + \\Delta = 5+2=7$, which is consistent.", "answer": "$$\\boxed{7}$$", "id": "3148815"}, {"introduction": "The max-flow min-cut theorem is not just an elegant theoretical result; it has direct, practical implications for network optimization. This final practice challenges you to move from manual calculation to implementation by coding the Edmonds-Karp algorithm. You will then use your program as an empirical tool to investigate how changes in edge capacities affect the maximum flow, providing a tangible demonstration of how the minimum cut acts as the true bottleneck of the system.", "problem": "Consider a directed flow network with source $s$ and sink $t$. A flow network is a directed graph $(V,E)$ with a capacity function $\\text{cap}: E \\to \\mathbb{R}_{\\ge 0}$. A feasible flow $f: E \\to \\mathbb{R}_{\\ge 0}$ must satisfy, for every edge $(u,v) \\in E$, the capacity constraint $0 \\le f(u,v) \\le \\text{cap}(u,v)$ and, for every node $x \\in V \\setminus \\{s,t\\}$, the conservation constraint $\\sum_{(u,x)\\in E} f(u,x) = \\sum_{(x,v)\\in E} f(x,v)$. The value of the flow is $\\sum_{(s,v)\\in E} f(s,v)$.\n\nA cut $(S,T)$ is a partition of $V$ such that $s \\in S$ and $t \\in T$. Its capacity is defined as $\\sum_{(u,v)\\in E,\\, u\\in S,\\, v\\in T} \\text{cap}(u,v)$.\n\nYour task is to construct a specific flow network and empirically verify that increasing capacities on edges that do not cross a minimum cut does not change the maximum flow, while increasing capacities on edges crossing a minimum cut can change it. You must implement the Ford–Fulkerson method using the Breadth-First Search (BFS) variant known as the Edmonds–Karp algorithm (Breadth-First Search (BFS) finds the shortest augmenting paths in terms of number of edges).\n\nUse the following network:\n- Vertices: $V = \\{s,a,b,c,t\\}$.\n- Directed edges and capacities:\n  - $(s,a)$ with capacity $4$.\n  - $(s,b)$ with capacity $3$.\n  - $(a,c)$ with capacity $100$.\n  - $(b,c)$ with capacity $100$.\n  - $(c,t)$ with capacity $5$.\n\nInterpret any edge not listed above as having capacity $0$. When a test case specifies an increase on such an edge, it effectively adds that edge to the network.\n\nImplement a program that:\n1. Computes the baseline maximum $s$–$t$ flow on the given network.\n2. Applies each of the following capacity increases to the base network independently and recomputes the maximum flow value:\n   - Test $1$: Increase $(a,c)$ by $50$.\n   - Test $2$: Increase $(s,a)$ by $10$.\n   - Test $3$: Increase $(a,c)$ by $50$ and $(b,c)$ by $200$.\n   - Test $4$: Increase $(c,t)$ by $1$.\n   - Test $5$: Increase $(c,t)$ by $100$.\n   - Test $6$: Increase $(a,b)$ by $100$ (note: this edge is absent initially, i.e., has capacity $0$).\n3. Produces the following final output on a single line as a comma-separated list enclosed in square brackets:\n   - The baseline maximum flow value as an integer.\n   - For Tests $1$, $2$, $3$, and $6$, output a boolean indicating whether the new maximum flow equals the baseline value.\n   - For Tests $4$ and $5$, output the new maximum flow value as integers.\n\nTherefore, your program should output in the exact format:\n$[F_0,B_1,B_2,B_3,M_4,M_5,B_6]$,\nwhere $F_0$ is the baseline maximum flow, $B_i$ are booleans testing equality to the baseline for the specified tests, and $M_4$, $M_5$ are integers giving the new maximum flow values for Tests $4$ and $5$.\n\nNo user input is permitted. All numerical answers are unitless integers or booleans. The algorithmic computation must be correct for all specified tests.\n\nTest suite summary:\n- Baseline: no changes.\n- Test $1$: $(a,c) \\leftarrow (a,c) + 50$.\n- Test $2$: $(s,a) \\leftarrow (s,a) + 10$.\n- Test $3$: $(a,c) \\leftarrow (a,c) + 50$, $(b,c) \\leftarrow (b,c) + 200$.\n- Test $4$: $(c,t) \\leftarrow (c,t) + 1$.\n- Test $5$: $(c,t) \\leftarrow (c,t) + 100$.\n- Test $6$: $(a,b) \\leftarrow (a,b) + 100$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, $[F_0,B_1,B_2,B_3,M_4,M_5,B_6]$.", "solution": "This problem requires analyzing a flow network based on the principles of the max-flow min-cut theorem. We must first determine the maximum flow and the corresponding minimum cut for the baseline network, and then evaluate how various capacity changes affect the maximum flow.\n\n**Baseline Network Analysis**\nThe network consists of vertices $V = \\{s,a,b,c,t\\}$.\n-   Edges from source $s$: $(s,a)$ with capacity 4, and $(s,b)$ with capacity 3.\n-   Internal edges: $(a,c)$ with capacity 100, and $(b,c)$ with capacity 100.\n-   Edge to sink $t$: $(c,t)$ with capacity 5.\n\nAny flow from $s$ to $t$ must pass through node $c$ and then traverse the edge $(c,t)$. The total capacity of edges leaving the source is $4 + 3 = 7$. The total capacity of edges entering the sink is $5$. The maximum flow is limited by the minimum capacity of any $s-t$ cut.\n\nLet's consider two possible cuts:\n1.  The cut separating the source from everything else: $S_1 = \\{s\\}$, $T_1 = \\{a,b,c,t\\}$. The capacity of this cut is $\\text{cap}(s,a) + \\text{cap}(s,b) = 4 + 3 = 7$.\n2.  The cut separating the sink from everything else: $S_2 = \\{s,a,b,c\\}$, $T_2 = \\{t\\}$. The capacity of this cut is $\\text{cap}(c,t) = 5$.\n\nThe capacity of the cut $(S_2, T_2)$ is smaller. Since the maximum flow cannot exceed the capacity of any cut, the maximum flow is at most 5. We can indeed achieve a flow of 5 (e.g., by sending 3 units along $s \\to b \\to c \\to t$ and 2 units along $s \\to a \\to c \\to t$). Therefore, the baseline maximum flow is $F_0 = 5$. The minimum cut consists of the edge $(c,t)$.\n\n**Analysis of Test Cases**\n\n-   **Test 1, 2, 3, 6**: These tests modify capacities of edges that are *not* part of the minimum cut $(c,t)$.\n    -   Test 1 increases $\\text{cap}(a,c)$.\n    -   Test 2 increases $\\text{cap}(s,a)$.\n    -   Test 3 increases $\\text{cap}(a,c)$ and $\\text{cap}(b,c)$.\n    -   Test 6 adds an edge $(a,b)$.\n    In all these cases, the edge $(c,t)$ with capacity 5 remains the bottleneck of the network. Increasing capacity elsewhere does not affect this bottleneck. Thus, the maximum flow remains 5. For these tests, the boolean check (new flow equals baseline) will be **True**.\n\n-   **Test 4**: Increase $\\text{cap}(c,t)$ by 1, making its new capacity $5+1=6$. This edge is the minimum cut. The capacity of the cut $(S_2, T_2)$ becomes 6. The next smallest cut is $(S_1, T_1)$ with capacity 7. The new bottleneck is the capacity of the cut $(S_2, T_2)$, so the new maximum flow is $\\min(6, 7) = 6$. The value for $M_4$ is **6**.\n\n-   **Test 5**: Increase $\\text{cap}(c,t)$ by 100, making its new capacity $5+100=105$. The capacity of the cut $(S_2, T_2)$ becomes 105. Now, the bottleneck is determined by the source cut $(S_1, T_1)$, which has a capacity of $4+3=7$. The new maximum flow is 7. The value for $M_5$ is **7**.\n\n**Summary of Results**\n-   $F_0 = 5$\n-   $B_1 = \\text{True}$ (5 == 5)\n-   $B_2 = \\text{True}$ (5 == 5)\n-   $B_3 = \\text{True}$ (5 == 5)\n-   $M_4 = 6$\n-   $M_5 = 7$\n-   $B_6 = \\text{True}$ (5 == 5)\n\nThe final output string should be `[5,True,True,True,6,7,True]`. The provided Python code implements the Edmonds-Karp algorithm to verify these results computationally.", "answer": "```python\nimport numpy as np\nfrom collections import deque\n\ndef edmonds_karp(capacity_matrix, source, sink):\n    \"\"\"\n    Computes the maximum flow from a source to a sink in a flow network\n    using the Edmonds-Karp algorithm.\n    \"\"\"\n    num_vertices = len(capacity_matrix)\n    residual_graph = np.copy(capacity_matrix)\n    max_flow = 0\n    \n    while True:\n        # Find an augmenting path using BFS\n        parent = [-1] * num_vertices\n        queue = deque([source])\n        visited = {source}\n        \n        path_found = False\n        while queue:\n            u = queue.popleft()\n            if u == sink:\n                path_found = True\n                break\n            \n            for v in range(num_vertices):\n                if v not in visited and residual_graph[u, v] > 0:\n                    queue.append(v)\n                    visited.add(v)\n                    parent[v] = u\n        \n        if not path_found:\n            break  # No more augmenting paths\n            \n        # Find the bottleneck capacity of the path\n        path_flow = float('inf')\n        v = sink\n        while v != source:\n            u = parent[v]\n            path_flow = min(path_flow, residual_graph[u, v])\n            v = u\n            \n        # Update the residual graph\n        v = sink\n        while v != source:\n            u = parent[v]\n            residual_graph[u, v] -= path_flow\n            residual_graph[v, u] += path_flow\n            v = u\n            \n        max_flow += path_flow\n        \n    return max_flow\n\ndef solve():\n    \"\"\"\n    Solves the flow network problem for the baseline and all test cases.\n    \"\"\"\n    # Vertex mapping: s=0, a=1, b=2, c=3, t=4\n    vertex_map = {'s': 0, 'a': 1, 'b': 2, 'c': 3, 't': 4}\n    num_vertices = 5\n    source = vertex_map['s']\n    sink = vertex_map['t']\n\n    # Base network capacity matrix\n    base_capacity = np.zeros((num_vertices, num_vertices), dtype=np.int64)\n    base_capacity[vertex_map['s'], vertex_map['a']] = 4\n    base_capacity[vertex_map['s'], vertex_map['b']] = 3\n    base_capacity[vertex_map['a'], vertex_map['c']] = 100\n    base_capacity[vertex_map['b'], vertex_map['c']] = 100\n    base_capacity[vertex_map['c'], vertex_map['t']] = 5\n\n    # Test case definitions: (edge_to_modify, capacity_increase)\n    test_cases = [\n        # Test 1\n        [((vertex_map['a'], vertex_map['c']), 50)],\n        # Test 2\n        [((vertex_map['s'], vertex_map['a']), 10)],\n        # Test 3\n        [\n            ((vertex_map['a'], vertex_map['c']), 50),\n            ((vertex_map['b'], vertex_map['c']), 200)\n        ],\n        # Test 4\n        [((vertex_map['c'], vertex_map['t']), 1)],\n        # Test 5\n        [((vertex_map['c'], vertex_map['t']), 100)],\n        # Test 6\n        [((vertex_map['a'], vertex_map['b']), 100)],\n    ]\n\n    # Calculate baseline max flow\n    baseline_flow = edmonds_karp(base_capacity, source, sink)\n    results = [int(baseline_flow)]\n\n    # Run each test case independently\n    for i, modifications in enumerate(test_cases):\n        modified_capacity = np.copy(base_capacity)\n        for (u, v), increase in modifications:\n            modified_capacity[u, v] += increase\n        \n        new_flow = edmonds_karp(modified_capacity, source, sink)\n        \n        # Format the result according to the problem specification\n        test_number = i + 1\n        if test_number in [1, 2, 3, 6]:\n            results.append(int(new_flow) == int(baseline_flow))\n        elif test_number in [4, 5]:\n            results.append(int(new_flow))\n\n    # Print the final output in the required format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "3148846"}]}