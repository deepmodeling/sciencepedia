{"hands_on_practices": [{"introduction": "The efficiency of the Branch and Bound algorithm comes from its ability to prune branches of the search tree that cannot contain an optimal solution. One of the most direct ways to prune a branch is to prove it is infeasible. This exercise demonstrates how simple logical deduction, arising from the problem's own constraints, can lead to such a conclusion immediately after a branching decision is made [@problem_id:3128341]. By analyzing a knapsack problem with an incompatibility rule, you will see firsthand how fixing one variable can propagate through the constraints to render another choice impossible, allowing the solver to fathom the subproblem without any further computation.", "problem": "Consider the following binary $0$–$1$ knapsack problem with one incompatibility constraint. There are $5$ items, each with profit $p_i$ and weight $w_i$, and a knapsack capacity $C$. The decision variables $x_i \\in \\{0,1\\}$ indicate whether item $i$ is selected. The data are:\n$$\nC = 10, \\quad (p_1, p_2, p_3, p_4, p_5) = (8, 12, 7, 14, 6), \\quad (w_1, w_2, w_3, w_4, w_5) = (4, 5, 3, 7, 2).\n$$\nThe optimization model is\n$$\n\\max \\ \\sum_{i=1}^{5} p_i x_i \\quad \\text{subject to} \\quad \\sum_{i=1}^{5} w_i x_i \\le C, \\quad x_i \\in \\{0,1\\} \\ \\text{for all} \\ i,\n$$\ntogether with the incompatibility constraint\n$$\nx_2 + x_3 \\le 1.\n$$\nA Branch and Bound (B&B) algorithm uses the Linear Programming (LP) relaxation (that is, replacing $x_i \\in \\{0,1\\}$ by $0 \\le x_i \\le 1$) to compute node bounds. At the root node, branch on $x_2$ and consider the child node where $x_2 = 1$. Using the incompatibility constraint within the LP relaxation at this node, derive the tightened variable bound that must hold for $x_3$ and explain why the immediate child branch that sets $x_3 = 1$ is pruned (fathomed) without further exploration.\n\nReport, as a single real number, the tightened upper bound on $x_3$ at the node where $x_2 = 1$. No rounding is required.", "solution": "The problem requires an analysis of a specific node in a Branch and Bound (B&B) algorithm applied to a $0$–$1$ knapsack problem with an additional incompatibility constraint. The goal is to determine a tightened variable bound and explain a pruning step based on constraint propagation.\n\nThe optimization problem is formulated as:\n$$\n\\max \\ \\sum_{i=1}^{5} p_i x_i\n$$\nsubject to:\n$$\n\\sum_{i=1}^{5} w_i x_i \\le C \\quad (1)\n$$\n$$\nx_2 + x_3 \\le 1 \\quad (2)\n$$\n$$\nx_i \\in \\{0, 1\\} \\quad \\text{for } i = 1, \\dots, 5 \\quad (3)\n$$\nThe data provided are $C = 10$, $(p_1, p_2, p_3, p_4, p_5) = (8, 12, 7, 14, 6)$, and $(w_1, w_2, w_3, w_4, w_5) = (4, 5, 3, 7, 2)$.\n\nThe B&B algorithm employs the Linear Programming (LP) relaxation of the problem, where the binary constraints $x_i \\in \\{0, 1\\}$ are relaxed to continuous constraints $0 \\le x_i \\le 1$.\n\nWe are instructed to analyze the child node created from the root node by branching on the variable $x_2$ and setting its value to $1$. At this node, the constraint $x_2 = 1$ is added to the set of constraints of the LP relaxation.\n\nThe set of constraints relevant to determining the bound on $x_3$ at this node includes:\n1. The original incompatibility constraint: $x_2 + x_3 \\le 1$.\n2. The bounds on $x_3$ from the LP relaxation at the root node: $0 \\le x_3 \\le 1$.\n3. The new branching constraint that defines the current node: $x_2 = 1$.\n\nTo derive the tightened variable bound for $x_3$, we substitute the branching constraint $x_2 = 1$ into the incompatibility constraint $(2)$:\n$$\n1 + x_3 \\le 1\n$$\nSubtracting $1$ from both sides of this inequality, we obtain a new upper bound on $x_3$:\n$$\nx_3 \\le 0\n$$\nFrom the base LP relaxation, we also have the non-negativity constraint $x_3 \\ge 0$. A variable must satisfy all active constraints simultaneously. Therefore, $x_3$ must satisfy both $x_3 \\le 0$ and $x_3 \\ge 0$. The only real number that satisfies both conditions is $x_3 = 0$.\n\nThis means that at the node where $x_2 = 1$, the variable $x_3$ is fixed to the value $0$. The original bounds $0 \\le x_3 \\le 1$ are tightened to $0 \\le x_3 \\le 0$. The tightened upper bound on $x_3$ at this node is therefore $0$.\n\nThe second part of the question asks to explain why a subsequent branch setting $x_3 = 1$ is pruned (fathomed). If we were to create a child node from the current node ($x_2 = 1$) by adding the constraint $x_3 = 1$, the subproblem at this new node would be defined by the set of constraints including:\n*   $x_2 = 1$ (from the parent node's branch)\n*   $x_3 = 1$ (from the new branch)\n*   $x_2 + x_3 \\le 1$ (from the original problem formulation)\n\nSubstituting the values of $x_2$ and $x_3$ into the incompatibility constraint yields:\n$$\n1 + 1 \\le 1\n$$\n$$\n2 \\le 1\n$$\nThis result is a contradiction, which implies that the feasible set for the LP relaxation at this hypothetical node is empty. A node whose subproblem is infeasible cannot contain any feasible integer solutions. In a B&B algorithm, such nodes are pruned by infeasibility. This is a form of logical preprocessing or constraint propagation that prevents the algorithm from exploring a branch that is guaranteed not to lead to a feasible solution.\n\nThe tightened upper bound on $x_3$ at the node where $x_2=1$ is $0$.", "answer": "$$\\boxed{0}$$", "id": "3128341"}, {"introduction": "Beyond reacting to infeasibility, modern solvers proactively search for it using techniques like domain filtering. This practice involves using the constraints at a node to tighten the bounds on variables, sometimes shrinking their feasible range to nothing. In this problem, you will apply this logic to a Mixed Integer Linear Program (MILP) and discover that a potential branching decision leads to an empty feasible set before you even need to solve an LP relaxation [@problem_id:3128339]. Quantifying the \"pruning cascade\" that results from this single deduction will give you a tangible sense of the immense computational savings achieved by these intelligent preprocessing steps.", "problem": "Consider a Mixed Integer Linear Programming (MILP) subproblem inside a Branch and Bound (B&B) procedure with decision variables $x$, $y$, and $z$. The variable $x$ is an integer and the variables $y$ and $z$ are continuous. The initial domain bounds at the current node are $x \\in [0,10] \\cap \\mathbb{Z}$, $y \\in [0,4]$, and $z \\in [0,5]$. The node is subject to the following linear constraints:\n$$3x + y \\geq 28,$$\n$$x + 2y + z \\leq 20,$$\n$$y + z \\leq 6.$$\nStarting from the fundamental properties of linear inequalities and feasible sets, apply domain filtering on $x$ using only the bounds of $y$ and the inequality $3x + y \\geq 28$ to deduce a tightened bound for $x$ that must hold for any feasible solution at this node. Then, suppose the solver uses a binary branching on $x$ at the current node, creating two children with disjunctions $x \\leq 7$ (left child) and $x \\geq 8$ (right child). Use the deduced bound to establish the feasibility status of the left child.\n\nAssume the solver has a fixed subsequent branching schedule for the left child: if the left child were not pruned immediately, it would next branch on $y$ using the disjunctions $y \\leq 2$ and $y \\geq 3$, and then at the next level it would branch on $z$ using the disjunctions $z \\leq 1$ and $z \\geq 2$ for each of the two $y$-children. Quantify the pruning cascade by computing the total number of nodes removed due to the left child being proven infeasible by domain filtering at its creation, counting the left child itself and all descendants that would have been created under this fixed branching schedule. Express your final answer as a single real-valued number. No rounding is required.", "solution": "The problem requires a three-part analysis of a Mixed Integer Linear Programming (MILP) subproblem within a Branch and Bound (B&B) framework. First, we must deduce a tightened bound on the integer variable $x$. Second, we use this bound to determine the feasibility of a child node. Third, we quantify the number of nodes pruned as a result of this feasibility analysis.\n\nThe given variables and their initial domains at the current B&B node are:\n- $x \\in [0, 10] \\cap \\mathbb{Z}$ (integer)\n- $y \\in [0, 4]$ (continuous)\n- $z \\in [0, 5]$ (continuous)\n\nThe linear constraints are:\n$$3x + y \\geq 28$$\n$$x + 2y + z \\leq 20$$\n$$y + z \\leq 6$$\n\nPart 1: Domain filtering on $x$.\nThe problem asks to apply domain filtering on $x$ using only the inequality $3x + y \\geq 28$ and the domain of $y$. We start by isolating $x$ in this inequality:\n$$3x \\geq 28 - y$$\n$$x \\geq \\frac{28 - y}{3}$$\nThis inequality must hold for any feasible solution $(x, y, z)$. To find the tightest possible lower bound on $x$ that is universally true for any feasible point at this node, we must find the minimum value of the expression on the right-hand side. The term $\\frac{28 - y}{3}$ is a monotonically decreasing function of $y$. Therefore, its minimum value is achieved when $y$ is at its maximum.\nThe domain for $y$ is given as the interval $[0, 4]$. The maximum value for $y$ is thus $y_{\\text{max}} = 4$.\nSubstituting this value into the inequality for $x$:\n$$x \\geq \\frac{28 - y_{\\text{max}}}{3}$$\n$$x \\geq \\frac{28 - 4}{3}$$\n$$x \\geq \\frac{24}{3}$$\n$$x \\geq 8$$\nSince $x$ is an integer variable, this implies that for any feasible solution at the current node, $x$ must be an integer greater than or equal to $8$. The initial domain for $x$ was $x \\in \\{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\}$. The derived condition $x \\geq 8$ tightens this domain to $x \\in [8, 10] \\cap \\mathbb{Z}$, or $x \\in \\{8, 9, 10\\}$.\n\nPart 2: Feasibility status of the left child.\nThe solver branches on the variable $x$, creating two children. The left child node is defined by adding the constraint $x \\leq 7$ to the set of constraints of the parent node. The right child node is defined by adding the constraint $x \\geq 8$.\nTo determine the feasibility of the left child, we must consider all its constraints. These include the constraints inherited from the parent and the new branching constraint. From Part 1, we established that any feasible solution to the parent node's problem must satisfy $x \\geq 8$. The left child node imposes the additional constraint $x \\leq 7$.\nA feasible solution for the left child must therefore satisfy both $x \\geq 8$ and $x \\leq 7$. There is no integer $x$ that can simultaneously satisfy these two contradictory conditions. The intersection of the set of integers $\\{x \\in \\mathbb{Z} \\mid x \\geq 8\\}$ and $\\{x \\in \\mathbb{Z} \\mid x \\leq 7\\}$ is the empty set.\nConsequently, the feasible region for the left child node is empty. This means the node is infeasible and can be pruned (fathomed) from the B&B tree immediately upon its creation.\n\nPart 3: Quantifying the pruning cascade.\nWhen a node is pruned, the algorithm does not explore any of its potential descendants. The problem asks us to quantify the total number of nodes that are removed from the search because the left child is proven infeasible. This count includes the left child node itself plus all the descendants that would have been generated from it according to a specified fixed branching schedule.\n\nThe branching schedule for the subtree rooted at the left child is given as:\n1.  The left child node itself constitutes the root of this pruned subtree. This is $1$ node.\n2.  If it were not pruned, the next level of branching would be on the variable $y$, creating $2$ child nodes (one for $y \\leq 2$ and one for $y \\geq 3$).\n3.  If these nodes were not pruned, the next level of branching would be on the variable $z$. For each of the $2$ nodes from the previous level, this branching creates $2$ new children (one for $z \\leq 1$ and one for $z \\geq 2$). This results in $2 \\times 2 = 4$ nodes at this level.\n\nThe entire subtree that is pruned consists of nodes at these three levels. The total number of pruned nodes is the sum of the nodes at each level:\n- Level $0$ (the left child): $1$ node.\n- Level $1$ (children from $y$-branching): $2$ nodes.\n- Level $2$ (children from $z$-branching): $4$ nodes.\n\nTotal number of nodes removed = $1 + 2 + 4 = 7$.\nThis is the size of the pruning cascade. Proving the infeasibility of the left child at its creation saves the computational effort of creating and processing all $7$ of these nodes.", "answer": "$$\n\\boxed{7}\n$$", "id": "3128339"}, {"introduction": "The most common form of pruning, fathoming by bound, relies on comparing a node's optimistic estimate with the best solution found so far. This exercise reveals a powerful way to make this comparison using reduced costs, a key concept from Linear Programming duality. You will learn how the reduced cost of a variable quantifies the minimum penalty to the objective function for forcing that variable away from its bound [@problem_id:3128375]. By comparing this penalty to the current optimality gap, you can decide if a branch is worth exploring, and as you will see, this decision can trigger a chain of logical implications that further strengthens the bounds on the problem.", "problem": "Consider a $0$-$1$ Integer Linear Program (ILP) of the form $\\min \\{ c^{\\top} x : A x \\ge b, \\ x \\in \\{0,1\\}^n \\}$ being solved with Branch-and-Bound (B&B). At a particular node, the Linear Programming (LP) relaxation is solved and yields an optimal objective value of $z^{\\star}_{\\mathrm{LP}} = 132.4$. An incumbent feasible integer solution has objective value $U = 140.6$. In the current optimal LP basis at this node, variables $x_3$ and $x_7$ are nonbasic at $0$ with reduced costs $\\bar{c}_3 = 9.1$ and $\\bar{c}_7 = 8.3$, respectively. The model contains the covering constraint $x_3 + x_7 \\ge 1$.\n\nUsing the principle of variable fixing via advanced reduced costs, one prunes the branch $x_3 = 1$ and fixes $x_3 = 0$ at the node. Then, by logical propagation from the covering constraint, $x_7$ is implied to be $1$. Based only on LP reduced-cost reasoning (without reoptimizing the LP after the fix), determine the updated valid lower bound for the node’s objective value after this propagation.\n\nExpress your final answer as a real number, rounded to four significant figures.", "solution": "The setting is a minimization $0$-$1$ Integer Linear Program (ILP) and its Linear Programming (LP) relaxation at a Branch-and-Bound (B&B) node. The foundational concepts we use are:\n\n1. The LP relaxation objective value $z^{\\star}_{\\mathrm{LP}}$ is a valid lower bound for the minimization ILP at the node.\n2. For a given optimal LP basis with dual multipliers $\\pi$ associated with the constraints, the reduced cost of a nonbasic variable $x_i$ is defined as\n$$\n\\bar{c}_i = c_i - a_i^{\\top} \\pi,\n$$\nwhere $c_i$ is the objective coefficient and $a_i$ is the column of $A$ corresponding to $x_i$. In a minimization problem with $x_i$ nonbasic at $0$, $\\bar{c}_i > 0$ means that increasing $x_i$ from $0$ raises the LP objective at a rate of at least $\\bar{c}_i$ per unit until the basis changes. This yields the standard reduced-cost bound: if we force $x_i = 1$, the LP objective cannot decrease; instead, a valid bound for the forced solution is\n$$\nz^{\\star}_{\\mathrm{LP}} + \\bar{c}_i.\n$$\nThis follows from dual feasibility and complementary slackness: any feasible primal change that violates nonnegativity of reduced costs must increase the objective by at least the sum of the violated reduced costs.\n\n3. Advanced reduced-cost variable fixing in B&B for minimization compares $\\bar{c}_i$ against the gap to the incumbent $U - z^{\\star}_{\\mathrm{LP}}$. If $\\bar{c}_i \\ge U - z^{\\star}_{\\mathrm{LP}}$, then the branch $x_i = 1$ cannot yield an objective strictly less than $U$, and thus the branch $x_i = 1$ is pruned. Symmetrically, one may fix $x_i = 0$ at the node.\n\nWe apply these principles:\n\n- Compute the gap to the incumbent:\n$$\nU - z^{\\star}_{\\mathrm{LP}} = 140.6 - 132.4 = 8.2.\n$$\n- Since $\\bar{c}_3 = 9.1$ and $\\bar{c}_3 > 8.2$, setting $x_3 = 1$ cannot improve upon the incumbent. Hence, pruning the branch $x_3 = 1$ is justified, and we fix $x_3 = 0$ at the node.\n\n- The covering constraint $x_3 + x_7 \\ge 1$ implies that with $x_3 = 0$, we must have $x_7 = 1$.\n\n- Without reoptimizing, we can update the node’s lower bound using reduced-cost reasoning for the forced variable $x_7$. Because $x_7$ is currently nonbasic at $0$ with $\\bar{c}_7 = 8.3$, forcing $x_7 = 1$ increases the LP objective by at least $\\bar{c}_7$. Therefore, the valid updated lower bound is\n$$\nz^{\\star}_{\\mathrm{LP}} + \\bar{c}_7 = 132.4 + 8.3 = 140.7.\n$$\n\nFinally, round to four significant figures. The value $140.7$ already has four significant figures, so the reported bound is $140.7$.\n\nThis bound also shows that $140.7 \\ge U = 140.6$, which indicates that after propagation the node is fathomed; however, the requested output is the updated lower bound itself.", "answer": "$$\\boxed{140.7}$$", "id": "3128375"}]}