{"hands_on_practices": [{"introduction": "The arrangement of electrons in an atom's orbitals dictates its chemical behavior. This exercise challenges you to translate the foundational rules of electron configuration—the Aufbau principle, governed by the Madelung ($n+\\ell$) rule—into a computational algorithm. By programming this model, you will predict configurations and also discover, through comparison with experimental data, the limitations of this simple framework, highlighting where more complex electronic interactions become crucial.", "problem": "You are to formalize the Pauli exclusion principle, Hund’s rule, and the Aufbau principle into a computable model and use it to analyze ground-state electron configurations. Let the atomic number be denoted by $Z \\in \\mathbb{Z}_{\\ge 0}$. A subshell is specified by the principal quantum number $n \\in \\mathbb{Z}_{\\ge 1}$ and the azimuthal quantum number $\\ell \\in \\{0,1,2,3\\}$ corresponding to spectroscopic letters $s,p,d,f$. The capacity of a subshell $(n,\\ell)$ is $2(2\\ell+1)$ electrons. The Aufbau principle orders subshells by strictly increasing $n+\\ell$, with ties broken by smaller $n$. Electrons are assigned to subshells following this order, respecting the Pauli exclusion principle (no more than $2$ electrons per spatial orbital, equivalently no more than $2(2\\ell+1)$ electrons per subshell). For reporting, the electron configuration must be expressed in spectroscopic order: list occupied subshells sorted by increasing $n$, and for equal $n$ by $\\ell$ in the order $s,p,d,f$, using contiguous terms of the form $n\\ell^{k}$, where $k$ is the electron count in that subshell. For example, a closed neon-like core is written as $1s^2 2s^2 2p^6$.\n\nHund’s first rule specifies that for any partially filled subshell with $\\ell$, the maximum number of unpaired electrons arises by placing one electron in each of the $g=2\\ell+1$ degenerate orbitals with parallel spins before pairing. For a subshell occupancy $k$, the number of unpaired electrons in that subshell is $u(k,\\ell)=\\min\\{k, 2g-k\\}$, where $g=2\\ell+1$. Define the “outermost partially filled subshell” as the occupied subshell with $0<k<2(2\\ell+1)$ having the largest $n$; if there is still a tie, choose the one with larger $\\ell$.\n\nTask. Write a complete program that:\n- Implements the Aufbau-based filling model described above to compute, for any given $Z$, the “naive” ground-state electron configuration string in spectroscopic order.\n- Computes the number of unpaired electrons predicted by Hund’s first rule in the outermost partially filled subshell as defined above.\n- Compares the naive configuration to a provided reference ground-state configuration for a given test suite of $Z$ values, and identifies the smallest $Z$ in the suite for which the naive configuration differs from the reference.\n\nReference data. For the test suite below, use the following ground-state configurations, written here in spectroscopic order using standard chemical notation:\n- $Z=0$: empty configuration (no terms).\n- $Z=1$: $1s^1$.\n- $Z=2$: $1s^2$.\n- $Z=7$: $1s^2 2s^2 2p^3$.\n- $Z=10$: $1s^2 2s^2 2p^6$.\n- $Z=18$: $1s^2 2s^2 2p^6 3s^2 3p^6$.\n- $Z=19$: $1s^2 2s^2 2p^6 3s^2 3p^6 4s^1$.\n- $Z=20$: $1s^2 2s^2 2p^6 3s^2 3p^6 4s^2$.\n- $Z=21$: $1s^2 2s^2 2p^6 3s^2 3p^6 3d^1 4s^2$.\n- $Z=24$: $1s^2 2s^2 2p^6 3s^2 3p^6 3d^5 4s^1$.\n- $Z=29$: $1s^2 2s^2 2p^6 3s^2 3p^6 3d^{10} 4s^1$.\n- $Z=30$: $1s^2 2s^2 2p^6 3s^2 3p^6 3d^{10} 4s^2$.\n\nTest suite and required outputs:\n- Use the ordered test suite $\\mathcal{T}=[\\,0,1,2,7,10,18,19,20,21,24,29,30\\,]$.\n- Let $b(Z)$ be a boolean that is $\\mathrm{True}$ if the naive configuration matches the reference for that $Z$, and $\\mathrm{False}$ otherwise.\n- Let $Z_{\\min}$ be the smallest element of $\\mathcal{T}$ for which the naive configuration differs from the reference; if there is no such element, define $Z_{\\min}=-1$.\n- Let $u_{7}$ be the number of unpaired electrons predicted by Hund’s first rule for the outermost partially filled subshell at $Z=7$ using the naive configuration, and let $u_{24}$ be the analogous number for $Z=24$.\n\nFinal output format:\n- Your program should produce a single line containing a comma-separated list enclosed in square brackets of the form $[\\,Z_{\\min},\\ b(0),\\ b(1),\\ b(2),\\ b(7),\\ b(10),\\ b(18),\\ b(19),\\ b(20),\\ b(21),\\ b(24),\\ b(29),\\ b(30),\\ u_{7},\\ u_{24}\\,]$ with no spaces.\n- No physical units are involved in this problem.", "solution": "The problem statement has been rigorously validated and is deemed scientifically grounded, well-posed, and objective. It provides a complete and consistent set of rules to formalize a computable \"naive\" model of atomic electron configuration based on established principles, and to compare its predictions against reference data. The task is a standard exercise in computational chemistry, requiring the implementation of the Aufbau principle, Pauli exclusion principle, and Hund's first rule. We shall proceed with a formal solution.\n\nThe solution is constructed based on the following physical principles and algorithmic design:\n\n**1. Subshell Ordering and the Aufbau Principle**\n\nThe foundation of the model is the Aufbau principle, which dictates the order in which electrons occupy subshells. A subshell is uniquely identified by a pair of quantum numbers: the principal quantum number $n \\in \\mathbb{Z}_{\\ge 1}$ and the azimuthal quantum number $\\ell \\in \\{0, 1, ..., n-1\\}$. For this problem, we consider $\\ell \\in \\{0,1,2,3\\}$, which correspond to the spectroscopic notation $s,p,d,f$.\n\nThe filling order is determined by the Madelung rule: subshells are ordered by strictly increasing values of the sum $n+\\ell$. Any ties are resolved by selecting the subshell with the smaller value of $n$. To construct this sequence, we generate subshells $(n, \\ell)$ for a sufficient range of $n$ (e.g., $n=1$ to $8$) and sort them based on the key $(n+\\ell, n)$. This yields the well-known filling sequence:\n$$1s, 2s, 2p, 3s, 3p, 4s, 3d, 4p, 5s, 4d, 5p, 6s, 4f, ...$$\nwhere the numbers are $n$ and the letters correspond to $\\ell=0,1,2,3$.\n\n**2. Electron Filling Algorithm and the Pauli Principle**\n\nGiven an atomic number $Z$, representing the total number of electrons, we populate the subshells in the aformentioned Aufbau order. The Pauli exclusion principle is enforced by limiting the capacity of each subshell $(n,\\ell)$ to $C(n,\\ell) = 2(2\\ell+1)$ electrons.\n\nThe algorithm proceeds as follows:\n- We begin with a total of $Z$ electrons.\n- We iterate through the ordered list of subshells.\n- For each subshell, we calculate its capacity $C(n,\\ell)$.\n- The number of electrons placed in this subshell, $k$, is the minimum of the remaining electrons and the subshell's capacity.\n- We subtract $k$ from the count of remaining electrons and record the occupancy $(n, \\ell, k)$.\n- This process continues until all $Z$ electrons have been assigned.\n\nThis procedure generates a set of occupied subshells and their electron counts, for example, $\\{(n_1, \\ell_1, k_1), (n_2, \\ell_2, k_2), ...\\}$.\n\n**3. Configuration String Generation**\n\nThe problem requires the electron configuration to be reported in \"spectroscopic order.\" This means the occupied subshells are listed by increasing principal quantum number $n$, and for equal $n$, by increasing azimuthal quantum number $\\ell$. Therefore, the set of occupied subshells $\\{(n_i, \\ell_i, k_i)\\}$ must be sorted by the key $(n, \\ell)$.\n\nEach sorted term $(n, \\ell, k)$ is then formatted into a string $n\\ell^k$, where $\\ell$ is replaced by its corresponding spectroscopic letter ($s,p,d,f$). These strings are concatenated without spaces to form the final configuration string, such as $1s^22s^22p^6$. For $Z=0$, the configuration is an empty string.\n\n**4. Hund's Rule and Unpaired Electrons**\n\nHund's first rule is used to determine the number of unpaired electrons in the \"outermost partially filled subshell\".\n- First, we identify all partially filled subshells from the computed naive configuration. A subshell $(n, \\ell)$ with occupancy $k$ is partially filled if $0 < k < C(n,\\ell)$.\n- From this set of partially filled subshells, we find the \"outermost\" one, which is defined as the one with the largest $n$, with ties broken by the largest $\\ell$.\n- If no partially filled subshells exist, the number of unpaired electrons is $0$.\n- Otherwise, for the determined outermost subshell $(n_{out}, \\ell_{out}, k_{out})$, the number of unpaired electrons $u$ is given by the formula $u(k, \\ell) = \\min\\{k, 2g - k\\}$, where $g = 2\\ell+1$ is the number of degenerate orbitals in the subshell. So, for the outermost subshell, we calculate $u = \\min\\{k_{out}, 2(2\\ell_{out}+1) - k_{out}\\}$.\n\n**5. Analysis and Comparison**\n\nThe implemented algorithm is used to perform the required tasks for the test suite $\\mathcal{T}=[\\,0,1,2,7,10,18,19,20,21,24,29,30\\,]$.\n- For each $Z \\in \\mathcal{T}$, the naive configuration string is generated and compared to the provided reference string (after normalization by removing spaces). The result is stored as a boolean value $b(Z)$.\n- The smallest $Z \\in \\mathcal{T}$ for which the naive and reference configurations differ is identified as $Z_{\\min}$. For example, for $Z=24$, the naive model predicts $...3d^4 4s^2$, while the reference (experimental) configuration is $...3d^5 4s^1$. This mismatch occurs because the simple Madelung rule does not account for the extra stability of half-filled and fully-filled $d$-subshells. The first such anomaly in the test suite occurs at $Z=24$, hence $Z_{\\min}=24$.\n- The number of unpaired electrons is calculated for $Z=7$ and $Z=24$ based on their respective naive configurations.\n    - For $Z=7$ (naive config $1s^2 2s^2 2p^3$), the outermost partially filled subshell is $2p^3$. Here, $n=2, \\ell=1, k=3$. The number of unpaired electrons is $u_7 = \\min\\{3, 2(2(1)+1)-3\\} = \\min\\{3, 3\\} = 3$.\n    - For $Z=24$ (naive config $...3d^4 4s^2$), the only partially filled subshell is $3d^4$. Here, $n=3, \\ell=2, k=4$. The number of unpaired electrons is $u_{24} = \\min\\{4, 2(2(2)+1)-4\\} = \\min\\{4, 6\\} = 4$.\n\nAll computed values are then aggregated into a single list as specified by the output format.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the computational chemistry problem by implementing the Aufbau principle,\n    Hund's rule, and comparing the resulting naive electron configurations to\n    reference data.\n    \"\"\"\n    \n    # Spectroscopy and constants\n    L_TO_CHAR = {0: 's', 1: 'p', 2: 'd', 3: 'f'}\n\n    # Reference data provided in the problem statement, with spaces and superscripts removed.\n    REFERENCE_CONFIGS = {\n        0: \"\",\n        1: \"1s1\",\n        2: \"1s2\",\n        7: \"1s22s22p3\",\n        10: \"1s22s22p6\",\n        18: \"1s22s22p63s23p6\",\n        19: \"1s22s22p63s23p64s1\",\n        20: \"1s22s22p63s23p64s2\",\n        21: \"1s22s22p63s23p63d14s2\",\n        24: \"1s22s22p63s23p63d54s1\",\n        29: \"1s22s22p63s23p63d104s1\",\n        30: \"1s22s22p63s23p63d104s2\",\n    }\n    \n    def generate_filling_order():\n        \"\"\"Generates the subshell filling order based on the Madelung (n+l, n) rule.\"\"\"\n        subshells = []\n        # Generate subshells up to n=8, which is sufficient for all known elements.\n        for n in range(1, 9):\n            for l in range(n):\n                if l in L_TO_CHAR:\n                    subshells.append({'n': n, 'l': l})\n        # Sort according to the Aufbau principle (n+l, then n)\n        subshells.sort(key=lambda s: (s['n'] + s['l'], s['n']))\n        return subshells\n\n    FILLING_ORDER = generate_filling_order()\n\n    def get_naive_config(Z):\n        \"\"\"\n        Calculates the naive electron configuration for a given atomic number Z.\n        Returns the configuration as a list of dictionaries and a formatted string.\n        \"\"\"\n        if Z == 0:\n            return [], \"\"\n\n        electrons_remaining = Z\n        occupied_subshells = []\n        \n        for subshell_template in FILLING_ORDER:\n            if electrons_remaining == 0:\n                break\n            \n            n, l = subshell_template['n'], subshell_template['l']\n            capacity = 2 * (2 * l + 1)\n            \n            electrons_to_add = min(electrons_remaining, capacity)\n            \n            occupied_subshells.append({'n': n, 'l': l, 'k': electrons_to_add})\n            electrons_remaining -= electrons_to_add\n\n        # Sort for spectroscopic notation (by n, then l)\n        occupied_subshells.sort(key=lambda s: (s['n'], s['l']))\n\n        # Generate the contiguous string representation\n        config_str = \"\".join([f\"{s['n']}{L_TO_CHAR[s['l']]}{s['k']}\" for s in occupied_subshells])\n        \n        return occupied_subshells, config_str\n\n    def get_unpaired_electrons(config):\n        \"\"\"\n        Calculates the number of unpaired electrons in the outermost partially\n        filled subshell according to Hund's rule.\n        \"\"\"\n        partially_filled = []\n        for sub in config:\n            n, l, k = sub['n'], sub['l'], sub['k']\n            capacity = 2 * (2 * l + 1)\n            if 0 < k < capacity:\n                partially_filled.append(sub)\n        \n        if not partially_filled:\n            return 0\n\n        # Find the outermost subshell: sort by n descending, then l descending.\n        partially_filled.sort(key=lambda s: (s['n'], s['l']), reverse=True)\n        \n        outermost = partially_filled[0]\n        k_out, l_out = outermost['k'], outermost['l']\n        \n        # Apply Hund's rule formula: u(k,l) = min(k, 2*(2l+1) - k)\n        g = 2 * l_out + 1\n        return min(k_out, 2 * g - k_out)\n\n    # Main execution logic\n    test_suite = [0, 1, 2, 7, 10, 18, 19, 20, 21, 24, 29, 30]\n    \n    z_min = -1\n    b_values = []\n    \n    for z in test_suite:\n        _, naive_str = get_naive_config(z)\n        ref_str = REFERENCE_CONFIGS[z].replace(\"^\", \"\").replace(\" \", \"\")\n        is_match = (naive_str == ref_str)\n        b_values.append(is_match)\n        \n        if not is_match and z_min == -1:\n            z_min = z\n\n    # Calculate specific unpaired electron counts\n    config_7, _ = get_naive_config(7)\n    u_7 = get_unpaired_electrons(config_7)\n    \n    config_24, _ = get_naive_config(24)\n    u_24 = get_unpaired_electrons(config_24)\n\n    # Assemble the final list of results for printing\n    final_results = [z_min] + b_values + [u_7, u_24]\n    \n    # Format the final output string exactly as specified\n    output_str = f\"[{','.join(map(str, final_results))}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2459984"}, {"introduction": "While an electron configuration like $p^2$ tells us which subshells are occupied, it doesn't specify the exact quantum state of the atom. This practice takes you a level deeper by having you enumerate all possible microstates consistent with the Pauli exclusion principle for $p^n$ configurations. By programmatically identifying the state with maximum spin and orbital angular momentum projections ($M_S$ and $M_L$), you will derive the ground state term symbol from first principles and verify the predictive power of Hund's rules.", "problem": "You must write a complete, runnable program that, for a single open subshell of type $p$ with orbital angular momentum $l=1$, uses first principles to verify that the state identified by the maximum total magnetic quantum numbers $M_L$ and $M_S$ corresponds to the ground state term symbol predicted by Hund's rules for the configuration $p^3$, and also evaluates several related $p^n$ cases. Treat each microstate as a set of $n$ distinct one-electron spin-orbitals labeled by pairs $(m_l,m_s)$ with $m_l \\in \\{-1,0,1\\}$ and $m_s \\in \\{-\\frac{1}{2},+\\frac{1}{2}\\}$. Enforce the Pauli exclusion principle exactly as the constraint that no two electrons occupy the same pair $(m_l,m_s)$. For any valid microstate, define $M_L=\\sum_i m_l^{(i)}$ and $M_S=\\sum_i m_s^{(i)}$. The ground state term symbol in the Russell–Saunders (LS) coupling limit is characterized by total spin $S$, total orbital angular momentum $L$, and total angular momentum $J$, conventionally written as $ {}^{2S+1}\\Lambda_J $ where $\\Lambda$ is the letter code for $L$ (with $L=0,1,2,3,\\dots$ corresponding to $S,P,D,F,\\dots$). The Hund rules relevant here are: (i) maximize $S$; (ii) for a subshell less than half-filled choose the smallest $L$, for more than half-filled choose the largest $L$, and for exactly half-filled ($n=3$ in a $p$ subshell) one has $L=0$ for the state with maximum $S$; (iii) for a given $L$ and $S$, the lowest $J$ is $J=\\lvert L-S\\rvert$ if the subshell is less than half-filled, the highest $J$ is $J=L+S$ if the subshell is more than half-filled, and $J=S$ when $L=0$.\n\nYour program must, for each specified electron count $n$, compute from the set of all valid microstates the maximum possible $M_S$, denoted $M_S^{\\max}$, and then among all microstates with $M_S=M_S^{\\max}$ find the maximum possible $M_L$, denoted $M_L^{\\max}$. Interpret $S=M_S^{\\max}$ and $L^{(\\text{micro})}=M_L^{\\max}$ as the highest-weight labels of a term. Separately, apply Hund's rules to obtain $L^{(\\text{Hund})}$ for the ground term corresponding to that $n$ and the same $S$. Also compute the corresponding $J$ from Hund's third rule. For $n=3$, this procedure must identify the ground term as ${}^{4}S$ in the sense that $2S+1=4$ and $L=0$.\n\nTest Suite and required outputs:\n\n- Use the test suite of electron counts $n$ for a $p^n$ subshell given by the ordered list $[\\,3,\\,1,\\,5,\\,2,\\,4,\\,0,\\,6\\,]$.\n- For each $n$ in that order, produce a result list $[\\,2S+1,\\,L^{(\\text{micro})},\\,J,\\,L^{(\\text{Hund})},\\,\\text{match}\\,]$, where $2S+1$ and $L^{(\\text{Hund})}$ are integers, $L^{(\\text{micro})}$ is an integer, $J$ is a real number equal to the appropriate half-integer or integer, and $\\text{match}$ is a boolean indicating whether $L^{(\\text{micro})}=L^{(\\text{Hund})}$. The value $S$ must be identified with $M_S^{\\max}$ found from microstates, so that $2S+1=2\\,M_S^{\\max}+1$.\n- The final output of your program must be a single line containing the list of all per-case results, in the same order as the test suite, formatted as a comma-separated list enclosed in square brackets, for example $[\\text{result}_1,\\text{result}_2,\\dots]$ with each $\\text{result}_i$ itself a list of the specified numeric and boolean entries.\n\nNo physical units are involved, and no angles are used. All numeric answers must be provided as pure numbers (integers, real numbers) or booleans as specified. The program must run with no user input and no external files. The primary objective is to demonstrate, by first principles enumeration consistent with the Pauli principle, that for $p^3$ the state with maximal $M_S$ and, within that set, maximal $M_L$ yields the ground state term ${}^{4}S$ as predicted by Hund's rules, and to report analogous quantities for the other $p^n$ cases in the test suite.", "solution": "The problem STATEMENT is a valid, well-posed exercise in computational quantum chemistry. It requires the verification of Hund's rules for an atomic $p^n$ configuration by enumerating all possible quantum microstates consistent with the Pauli exclusion principle. The problem provides a self-contained, albeit slightly idiosyncratic, set of Hund's rules which must be strictly followed. The task is scientifically grounded and computationally tractable. We shall now proceed with a formal solution.\n\nThe fundamental objective is to determine the ground state term symbol for a $p^n$ electronic configuration using two methods and compare their results. The first method is a direct, first-principles enumeration of all valid microstates. The second is the application of the specific formulation of Hund's rules as provided.\n\nA $p$ subshell is characterized by the orbital angular momentum quantum number $l=1$. The magnetic quantum number $m_l$ can thus take values $m_l \\in \\{-1, 0, 1\\}$. Each electron also has a spin quantum number $s=1/2$, with the magnetic spin quantum number $m_s$ taking values $m_s \\in \\{-\\frac{1}{2}, +\\frac{1}{2}\\}$. A single-electron state, or spin-orbital, is uniquely defined by the pair of quantum numbers $(m_l, m_s)$. For the $p$ subshell, there are $2(2l+1) = 2(2 \\cdot 1 + 1) = 6$ distinct spin-orbitals:\n$$\n\\left\\{ \\left(1, +\\frac{1}{2}\\right), \\left(1, -\\frac{1}{2}\\right), \\left(0, +\\frac{1}{2}\\right), \\left(0, -\\frac{1}{2}\\right), \\left(-1, +\\frac{1}{2}\\right), \\left(-1, -\\frac{1}{2}\\right) \\right\\}\n$$\nAccording to the Pauli exclusion principle, a microstate of an $n$-electron system is a unique set of $n$ distinct spin-orbitals. For a given microstate, the total magnetic orbital and spin quantum numbers, $M_L$ and $M_S$ respectively, are calculated as the sum over the quantum numbers of the occupied spin-orbitals:\n$$\nM_L = \\sum_{i=1}^{n} m_l^{(i)} \\quad \\text{and} \\quad M_S = \\sum_{i=1}^{n} m_s^{(i)}\n$$\nThe set of all possible $(M_L, M_S)$ pairs for a given configuration defines the spectroscopic terms, denoted $ {}^{2S+1}L_J $. Within the framework of Russell-Saunders coupling, a term is identified by the total spin angular momentum $S$ and total orbital angular momentum $L$. The term is associated with a multiplet of $(2S+1)(2L+1)$ microstates. The principle of the highest-weight state allows us to identify $S$ and $L$ from the collection of all microstates. The total spin $S$ of a term is given by the maximum value of $M_S$ found within that term's multiplet, $S = \\max(M_S)$. The ground state term will correspond to the overall maximum possible total spin, $S = M_S^{\\max}$, across all microstates of the configuration. For that value of $S$, the total orbital angular momentum $L$ is given by the maximum value of $M_L$ among all states with $M_S = M_S^{\\max}$. We denote this value $L^{(\\text{micro})} = (M_L)^{\\max}_{\\text{at } M_S=M_S^{\\max}}$.\n\nThe algorithm to determine $L^{(\\text{micro})}$ and $S$ from first principles is as follows:\n1.  Define the set of $6$ basis spin-orbitals for the $p$ subshell.\n2.  For a given electron count $n$, generate all possible unique combinations of $n$ spin-orbitals from the basis set. Each combination represents a valid microstate.\n3.  For each microstate, calculate the pair $(M_L, M_S)$.\n4.  Iterate through all generated microstates to find the global maximum value of $M_S$, which we identify as $S$. Thus, $S = M_S^{\\max}$.\n5.  Filter the set of microstates, retaining only those for which $M_S = M_S^{\\max}$.\n6.  Among this subset of microstates, find the maximum value of $M_L$. This value is identified as $L^{(\\text{micro})}$.\n\nNext, we must determine the ground state quantum numbers $L^{(\\text{Hund})}$ and $J$ by applying the given Hund's rules.\n1.  **Hund's First Rule**: Maximize $S$. This is consistent with our microstate analysis, where we use $S = M_S^{\\max}$. The spin multiplicity is $2S+1$.\n2.  **Hund's Second Rule (as specified)**: For the maximum $S$, we determine $L^{(\\text{Hund})}$.\n    - If the subshell is less than half-filled ($n < 3$), choose the smallest $L$.\n    - If the subshell is exactly half-filled ($n=3$), $L=0$ for the state with maximum $S$.\n    - If the subshell is more than half-filled ($n > 3$), choose the largest $L$.\n    For the $p$-shell, it can be shown that for any given maximum $S$, there is only one possible value of $L$. Therefore, the distinction between \"smallest\" and \"largest\" $L$ is moot; we simply select the unique $L$ value associated with the maximal $S$ term. This yields $L^{(\\text{Hund})}=1$ for $p^1, p^2, p^4, p^5$, and $L^{(\\text{Hund})}=0$ for $p^3$. For the closed-shell cases $p^0$ and $p^6$, we have $S=0$ and $L=0$.\n3.  **Hund's Third Rule**: For a given $L$ and $S$, determine the total angular momentum $J$.\n    - If $n < 3$, $J = |L-S|$.\n    - If $n = 3$, $J = S$ (since $L=0$).\n    - If $n > 3$, $J = L+S$.\n\nThe program will execute this procedure for each $n$ in the test suite $[\\,3,\\,1,\\,5,\\,2,\\,4,\\,0,\\,6\\,]$. For each case, it calculates the list $[\\,2S+1,\\,L^{(\\text{micro})},\\,J,\\,L^{(\\text{Hund})},\\,\\text{match}\\,]$, where $S$ and $L^{(\\text{micro})}$ are from the microstate analysis, $L^{(\\text{Hund})}$ and $J$ are from Hund's rules, and $\\text{match}$ is a boolean comparing $L^{(\\text{micro})}$ with $L^{(\\text{Hund})}$. The primary check for $n=3$ is indeed expected to yield $S=3/2$ and $L=0$, corresponding to a $^4S$ term, confirming that $L^{(\\text{micro})} = L^{(\\text{Hund})} = 0$. The comparison across all specified $n$ values serves as a broader verification of the consistency between the highest-weight state method and Hund's rules for determining the ground state term.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom itertools import combinations\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for the given test suite.\n    It verifies Hund's rules for p-shell configurations by enumerating microstates.\n    \"\"\"\n\n    def process_n(n: int) -> list:\n        \"\"\"\n        Calculates the ground state properties for a p^n configuration.\n        \n        Args:\n            n (int): The number of electrons in the p subshell.\n        \n        Returns:\n            list: A list containing [2S+1, L_micro, J, L_Hund, match].\n        \"\"\"\n        p_subshell_capacity = 6\n\n        # Handle trivial cases: empty or full subshell\n        if n == 0 or n == p_subshell_capacity:\n            S_max = 0.0\n            L_micro = 0\n            L_hund = 0\n            # For n=0, less than half-filled, J=|L-S|=|0-0|=0\n            # For n=6, more than half-filled, J=L+S=0+0=0\n            J = 0.0\n            spin_multiplicity = 1\n            return [spin_multiplicity, L_micro, J, L_hund, L_micro == L_hund]\n\n        # Define the set of single-electron spin-orbitals for a p-shell (l=1)\n        # (m_l, m_s)\n        spin_orbitals = [\n            (1, 0.5), (1, -0.5),\n            (0, 0.5), (0, -0.5),\n            (-1, 0.5), (-1, -0.5)\n        ]\n\n        # Generate all valid microstates (combinations of n spin-orbitals)\n        microstates = combinations(spin_orbitals, n)\n\n        # Calculate (M_L, M_S) for each microstate\n        ml_ms_pairs = []\n        for state in microstates:\n            state_array = np.array(state)\n            m_l_total = np.sum(state_array[:, 0])\n            m_s_total = np.sum(state_array[:, 1])\n            ml_ms_pairs.append((m_l_total, m_s_total))\n\n        # ---- Microstate Analysis (Highest-Weight State) ----\n        \n        # 1. Find the maximum M_S value (identifies S)\n        S_max = -1e9  # Initialize with a very small number\n        for _, m_s in ml_ms_pairs:\n            if m_s > S_max:\n                S_max = m_s\n        \n        # 2. Find the maximum M_L for microstates with M_S = S_max (identifies L)\n        L_micro = -1e9 # Initialize with a very small number\n        for m_l, m_s in ml_ms_pairs:\n            if abs(m_s - S_max) < 1e-9: # Floating point comparison\n                if m_l > L_micro:\n                    L_micro = m_l\n        \n        L_micro = int(L_micro) # L is always integer\n        spin_multiplicity = int(2 * S_max + 1)\n\n        # ---- Hund's Rules Application ----\n        \n        # Rule 1: Maximize S. We use S_max found from microstates.\n        # S is already determined as S_max.\n\n        # Rule 2: Determine L for the given S_max.\n        L_hund = -1 # Should be overwritten\n        if n == 3: # Half-filled\n            L_hund = 0\n        elif n in [1, 2, 4, 5]: # Other open shells\n            # For p1/p5 (S=1/2), L=1. For p2/p4 (S=1), L=1. So L=1.\n            L_hund = 1\n         \n        # Rule 3: Determine J for the given L and S.\n        J = -1.0 # Should be overwritten\n        half_occupancy = p_subshell_capacity / 2.0\n        if n < half_occupancy:\n            J = abs(L_hund - S_max)\n        elif n > half_occupancy:\n            J = L_hund + S_max\n        else: # n == half_occupancy\n            J = S_max # Since L=0\n\n        # Assemble the result\n        match = (L_micro == L_hund)\n        \n        return [spin_multiplicity, L_micro, J, L_hund, match]\n\n    # Define the test cases from the problem statement.\n    test_cases = [3, 1, 5, 2, 4, 0, 6]\n\n    results = []\n    for n in test_cases:\n        result = process_n(n)\n        results.append(result)\n\n    # Format the final output as a string representing a list of lists.\n    # The `repr` function is used to correctly format the boolean `True`/`False`.\n    result_str = \",\".join(f\"[{r[0]},{r[1]},{r[2]},{r[3]},{repr(r[4]).lower()}]\" for r in results)\n    \n    # Final print statement in the exact required format.\n    print(f\"[{result_str}]\")\n\nsolve()\n```", "id": "2459996"}, {"introduction": "Hund's rules are not arbitrary; they reflect the underlying energetics of electron-electron interactions. In this exercise, you will explore this connection by building a simplified \"toy\" energy functional for the carbon atom's valence electrons. By manipulating a parameter that models a spin-dependent energy contribution, you will directly observe how this term governs the final ordering of atomic energy levels, providing a tangible link between spin multiplicity and energetic stability.", "problem": "Consider the valence configuration of a carbon atom, which has two electrons in the $2p$ subshell (that is, a $p^2$ configuration). The Pauli exclusion principle requires that, for each spatial orbital, the occupation numbers $n_{m\\uparrow}$ and $n_{m\\downarrow}$ are each either $0$ or $1$, with at most two electrons per spatial orbital and opposite spins if doubly occupied. Atomic term symbols arising from this configuration include $ {}^3\\!P $, $ {}^1\\!D $, and $ {}^1\\!S $. According to Hund's first rule, the state with the highest total spin $S$ should have the lowest energy when other conditions are comparable. In this problem, you will formalize a simple model that emulates a Density Functional Theory (DFT) exchange contribution but, by construction, incorrectly penalizes high-spin states, and you will evaluate the resulting term ordering.\n\nDefine a toy total energy functional for the $p$ subshell with $N$ electrons as\n$$\nE(N,D,S;\\,\\varepsilon_p,A,B,C)\\;=\\;N\\,\\varepsilon_p\\;+\\;A\\,\\frac{N(N-1)}{2}\\;+\\;B\\,D\\;+\\;C\\,S(S+1),\n$$\nwhere:\n- $N$ is the number of electrons in the $p$ subshell,\n- $\\varepsilon_p$ is the one-electron energy of each $p$ orbital (assume three degenerate $p$ orbitals),\n- $A$ is an average two-electron repulsion parameter,\n- $B$ is the energetic penalty per doubly occupied spatial orbital, with $D=\\sum_{m} n_{m\\uparrow}n_{m\\downarrow}$,\n- $C$ is a spin-dependent coefficient that, if positive, penalizes higher total spin $S$.\n\nFor the $p^2$ configuration of carbon, use the following assignments that are consistent with allowed microstates and Russell–Saunders coupling:\n- For $ {}^3\\!P $: $N=2$, $S=1$, $D=0$.\n- For $ {}^1\\!D $: $N=2$, $S=0$, $D=0$.\n- For $ {}^1\\!S $: $N=2$, $S=0$, $D=1$.\n\nAll energies are to be considered in Hartree units. You are to evaluate the model on a fixed test suite of parameter sets $(\\varepsilon_p,A,B,C)$ and determine, for each set, whether the model produces the strict ordering required by Hund's first rule for this subshell, namely\n$$\nE({}^3\\!P)  E({}^1\\!D)  E({}^1\\!S).\n$$\n\nTest suite (each tuple lists $(\\varepsilon_p,A,B,C)$ in Hartree):\n- Case $1$: $\\big(-0.5,\\;0.2,\\;0.3,\\;0.1\\big)$.\n- Case $2$: $\\big(-0.5,\\;0.2,\\;0.3,\\;-0.1\\big)$.\n- Case $3$: $\\big(-0.5,\\;0.2,\\;0.3,\\;0.0\\big)$.\n\nYour program must, for each case, compute $E({}^3\\!P)$, $E({}^1\\!D)$, and $E({}^1\\!S)$ using the functional above and return a boolean indicating whether the strict inequality $E({}^3\\!P)E({}^1\\!D)E({}^1\\!S)$ holds. The final program output must be a single line containing the results for the cases in order as a comma-separated list enclosed in square brackets, for example, $[{\\rm result}_1,{\\rm result}_2,{\\rm result}_3]$, where each ${\\rm result}_k$ is either ${\\rm True}$ or ${\\rm False}$.", "solution": "The problem statement is subjected to validation and is found to be valid. It presents a well-defined theoretical exercise in computational chemistry, requiring the evaluation of a toy energy functional against a known physical principle (Hund's rules). The problem is self-contained, scientifically grounded as a pedagogical model, and mathematically unambiguous. We will proceed with the solution.\n\nThe task is to determine whether a given toy energy functional reproduces the energy ordering of atomic term symbols for a $p^2$ electronic configuration as dictated by Hund's rules. The specified correct ordering is $E({}^3\\!P)  E({}^1\\!D)  E({}^1\\!S)$.\n\nThe total energy functional is given as:\n$$\nE(N,D,S;\\,\\varepsilon_p,A,B,C)\\;=\\;N\\,\\varepsilon_p\\;+\\;A\\,\\frac{N(N-1)}{2}\\;+\\;B\\,D\\;+\\;C\\,S(S+1)\n$$\nFor the $p^2$ configuration, the number of electrons is $N=2$. The common part of the energy for all states is therefore:\n$$\nE_{\\text{common}} = 2\\varepsilon_p + A\\frac{2(2-1)}{2} = 2\\varepsilon_p + A\n$$\nWe now evaluate the energy for each of the three term symbols using the parameters provided for them.\n\n1.  **Energy of the $ {}^3\\!P $ state**:\n    The parameters are $N=2$, $S=1$, and $D=0$.\n    $$\n    E({}^3\\!P) = E_{\\text{common}} + B(0) + C(1)(1+1) = 2\\varepsilon_p + A + 2C\n    $$\n\n2.  **Energy of the $ {}^1\\!D $ state**:\n    The parameters are $N=2$, $S=0$, and $D=0$.\n    $$\n    E({}^1\\!D) = E_{\\text{common}} + B(0) + C(0)(0+1) = 2\\varepsilon_p + A\n    $$\n\n3.  **Energy of the $ {}^1\\!S $ state**:\n    The parameters are $N=2$, $S=0$, and $D=1$.\n    $$\n    E({}^1\\!S) = E_{\\text{common}} + B(1) + C(0)(0+1) = 2\\varepsilon_p + A + B\n    $$\n\nThe condition to be verified is the strict inequality:\n$$\nE({}^3\\!P)  E({}^1\\!D)  E({}^1\\!S)\n$$\nSubstituting the derived expressions, we get:\n$$\n2\\varepsilon_p + A + 2C  2\\varepsilon_p + A  2\\varepsilon_p + A + B\n$$\nThe common term $2\\varepsilon_p + A$ can be subtracted from all parts of the compound inequality, which simplifies the condition to:\n$$\n2C  0  B\n$$\nThis is equivalent to two independent conditions:\n1.  $C  0$\n2.  $B > 0$\n\nFor the model to reproduce the specified ordering, both conditions must be strictly satisfied. A value of $C \\geq 0$ will violate Hund's first rule (by either making the triplet state higher in energy or degenerate with the singlet state of same $D$), and a value of $B \\leq 0$ will violate the ordering of the singlet states.\n\nWe now evaluate the three test cases provided.\n\n**Case 1**: Parameters $(\\varepsilon_p, A, B, C) = (-0.5, 0.2, 0.3, 0.1)$.\n-   Condition 1: $C = 0.1$. The inequality $C  0$ is not satisfied, since $0.1 \\not 0$.\n-   Condition 2: $B = 0.3$. The inequality $B > 0$ is satisfied, since $0.3 > 0$.\nSince one condition fails, the overall ordering is incorrect.\nTo be explicit, we calculate the energies in Hartree units:\n-   $E_{\\text{common}} = 2(-0.5) + 0.2 = -1.0 + 0.2 = -0.8$.\n-   $E({}^3\\!P) = -0.8 + 2(0.1) = -0.6$.\n-   $E({}^1\\!D) = -0.8$.\n-   $E({}^1\\!S) = -0.8 + 0.3 = -0.5$.\nThe resulting order is $E({}^1\\!D)  E({}^3\\!P)  E({}^1\\!S)$, as $-0.8  -0.6  -0.5$. This is not the required order. The result is **False**.\n\n**Case 2**: Parameters $(\\varepsilon_p, A, B, C) = (-0.5, 0.2, 0.3, -0.1)$.\n-   Condition 1: $C = -0.1$. The inequality $C  0$ is satisfied, since $-0.1  0$.\n-   Condition 2: $B = 0.3$. The inequality $B > 0$ is satisfied, since $0.3 > 0$.\nBoth conditions are met. The ordering should be correct.\nExplicit calculation:\n-   $E_{\\text{common}} = 2(-0.5) + 0.2 = -0.8$.\n-   $E({}^3\\!P) = -0.8 + 2(-0.1) = -1.0$.\n-   $E({}^1\\!D) = -0.8$.\n-   $E({}^1\\!S) = -0.8 + 0.3 = -0.5$.\nThe resulting order is $E({}^3\\!P)  E({}^1\\!D)  E({}^1\\!S)$, as $-1.0  -0.8  -0.5$. This matches the required order. The result is **True**.\n\n**Case 3**: Parameters $(\\varepsilon_p, A, B, C) = (-0.5, 0.2, 0.3, 0.0)$.\n-   Condition 1: $C = 0.0$. The strict inequality $C  0$ is not satisfied. Here, $C=0$.\n-   Condition 2: $B = 0.3$. The inequality $B > 0$ is satisfied.\nSince the condition on $C$ is for a strict inequality, $C=0$ leads to failure. $2C  0$ becomes $0  0$, which is false. This implies $E({}^3\\!P)$ is not strictly less than $E({}^1\\!D)$, but equal.\nExplicit calculation:\n-   $E_{\\text{common}} = 2(-0.5) + 0.2 = -0.8$.\n-   $E({}^3\\!P) = -0.8 + 2(0.0) = -0.8$.\n-   $E({}^1\\!D) = -0.8$.\n-   $E({}^1\\!S) = -0.8 + 0.3 = -0.5$.\nThe result is $E({}^3\\!P) = E({}^1\\!D)  E({}^1\\!S)$. The strict inequality $E({}^3\\!P)  E({}^1\\!D)$ is not met. The result is **False**.\n\nSummary of results: [False, True, False].", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Evaluates a toy energy functional for the p^2 configuration of a carbon atom\n    and determines if the energy ordering of term symbols matches Hund's rules.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each tuple represents (epsilon_p, A, B, C) in Hartree units.\n    test_cases = [\n        (-0.5, 0.2, 0.3, 0.1),  # Case 1\n        (-0.5, 0.2, 0.3, -0.1), # Case 2\n        (-0.5, 0.2, 0.3, 0.0),  # Case 3\n    ]\n\n    results = []\n    for case in test_cases:\n        eps_p, A, B, C = case\n        \n        # All states have N=2 electrons. The common energy term is:\n        # E_common = N*eps_p + A*N*(N-1)/2, for N=2 this is 2*eps_p + A.\n        e_common = 2 * eps_p + A\n        \n        # Energy for the 3P state (S=1, D=0):\n        # E(3P) = E_common + B*D + C*S*(S+1)\n        #       = E_common + B*0 + C*1*(1+1) = E_common + 2*C\n        e_3p = e_common + 2 * C\n        \n        # Energy for the 1D state (S=0, D=0):\n        # E(1D) = E_common + B*D + C*S*(S+1)\n        #       = E_common + B*0 + C*0*(0+1) = E_common\n        e_1d = e_common\n        \n        # Energy for the 1S state (S=0, D=1):\n        # E(1S) = E_common + B*D + C*S*(S+1)\n        #       = E_common + B*1 + C*0*(0+1) = E_common + B\n        e_1s = e_common + B\n        \n        # Check if the strict inequality E(3P)  E(1D)  E(1S) holds.\n        is_hunds_ordering = (e_3p  e_1d) and (e_1d  e_1s)\n        \n        results.append(is_hunds_ordering)\n\n    # Final print statement in the exact required format.\n    # The map(str, ...) correctly converts Python booleans True/False to strings.\n    print(f\"[{','.join(map(lambda x: str(x).lower(), results))}]\")\n\nsolve()\n```", "id": "2459995"}]}