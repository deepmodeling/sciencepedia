{"hands_on_practices": [{"introduction": "Our first practice moves directly to the heart of why polarization functions are included in basis sets. By constructing a simple quantum model for the water molecule from scratch, we can directly observe the energetic consequence of adding more flexible functions to our basis set. This exercise provides a tangible demonstration of the variational principle, a cornerstone of quantum mechanics, showing how expanding the basis allows for a better, lower-energy description of the system [@problem_id:2460489].", "problem": "You will build a simplified, variational tight-binding model to investigate how adding a single polarization function changes the approximate ground-state electronic energy of water. The comparison is between adding a single $p$-type basis function on each hydrogen (one per hydrogen aligned with the O–H bond) versus adding a single $d$-type basis function on oxygen (one $d_{z^2}$-like function aligned with the molecular bisector). Your program must implement the following, from first principles, using linear algebra and the Rayleigh–Ritz variational principle.\n\nFoundational starting points:\n- The Rayleigh–Ritz variational principle states that the lowest eigenvalue of the Hamiltonian matrix $\\mathbf{H}$ in any subspace is an upper bound to the true ground-state energy, and enlarging the basis (subspace) cannot increase the variational energy.\n- In a Linear Combination of Atomic Orbitals (LCAO) one-electron tight-binding model with an orthonormal basis, the approximate total electronic energy for a closed-shell system is computed as $E_{\\text{tot}} = 2 \\sum_{i=1}^{N_{\\text{occ}}} \\varepsilon_i$, where $\\varepsilon_i$ are the lowest eigenvalues of $\\mathbf{H}$, and $N_{\\text{occ}}$ is the number of occupied spatial molecular orbitals.\n\nGeometry and basis:\n- Consider water with bond angle $\\theta$ (in degrees) and two identical O–H bonds lying in the $x$–$z$ plane. Place oxygen at the origin. Define the unit vectors along the two O–H bonds as $\\mathbf{u}_1 = (\\sin(\\theta/2), 0, \\cos(\\theta/2))$ and $\\mathbf{u}_2 = (-\\sin(\\theta/2), 0, \\cos(\\theta/2))$. Use the standard Cartesian basis vectors $\\mathbf{e}_x$, $\\mathbf{e}_y$, and $\\mathbf{e}_z$.\n- The minimal basis consists of oxygen $2s$, oxygen $2p_x$, oxygen $2p_y$, oxygen $2p_z$, and one hydrogen $1s$ on each hydrogen. Denote their on-site energies by $\\varepsilon_{\\text{O}2s}$, $\\varepsilon_{\\text{O}2p}$ (common to all three oxygen $2p$ orbitals), and $\\varepsilon_{\\text{H}1s}$.\n- Polarization options:\n  1. Hydrogen $p$: add one $p$-type orbital on each hydrogen, aligned with its O–H bond direction (one on each hydrogen). Its on-site energy is $\\varepsilon_{\\text{H}p}$.\n  2. Oxygen $d$: add one oxygen $d_{z^2}$-like orbital aligned with $\\mathbf{e}_z$, with on-site energy $\\varepsilon_{\\text{O}d}$.\n\nHamiltonian construction (orthonormal basis, no overlap matrix):\n- Diagonal elements are the on-site energies.\n- Two-center off-diagonal couplings use Slater–Koster-type direction factors:\n  - Between oxygen $2s$ and hydrogen $1s$: $V_{ss\\sigma}$, identical for both O–H bonds.\n  - Between oxygen $2p_i$ and hydrogen $1s$: $V_{sp\\sigma} \\, (\\mathbf{e}_i \\cdot \\mathbf{u}_k)$ for $i \\in \\{x,y,z\\}$ and $k \\in \\{1,2\\}$.\n  - If hydrogen $p$ orbitals are present, the coupling between oxygen $2s$ and hydrogen $p$ on bond $k$ is $V_{sp(\\text{H})\\sigma}$, and between oxygen $2p_i$ and hydrogen $p$ on bond $k$ is $V_{pp\\sigma} \\, (\\mathbf{e}_i \\cdot \\mathbf{u}_k)$ (the hydrogen $p$ axis is aligned with $\\mathbf{u}_k$).\n  - If the oxygen $d_{z^2}$ orbital is present, its coupling to hydrogen $1s$ on bond $k$ is $V_{sd\\sigma} \\, F_{sd}(\\mathbf{u}_k)$, where $F_{sd}(\\mathbf{u}_k)$ is a direction factor. Use the quadrupolar factor $F_{sd}(\\mathbf{u}_k) = \\frac{1}{2} \\left( 3 n_k^2 - 1 \\right)$ with $n_k = \\mathbf{u}_k \\cdot \\mathbf{e}_z = \\cos(\\theta/2)$.\n- No other off-diagonal matrix elements are included. The Hamiltonian is real and symmetric by construction.\n\nElectron count and energy:\n- Water has $8$ valence electrons in this model, so $N_{\\text{occ}} = 4$ doubly occupied orbitals. For a given Hamiltonian $\\mathbf{H}$, diagonalize to obtain eigenvalues $\\{\\varepsilon_i\\}$ in ascending order and compute $E_{\\text{tot}} = 2 \\sum_{i=1}^{4} \\varepsilon_i$ in hartree.\n- Let $E_0$ be the total energy with the minimal basis (no polarization functions), $E_{\\text{H}p}$ with the hydrogen $p$ orbitals added, and $E_{\\text{O}d}$ with the oxygen $d$ orbital added. Define the stabilizations $\\Delta E_{\\text{H}p} = E_{\\text{H}p} - E_0$ and $\\Delta E_{\\text{O}d} = E_{\\text{O}d} - E_0$ (more negative means more stabilization).\n\nYour task:\n- Implement the above model exactly as specified. Angles are provided in degrees; if you use trigonometric functions, convert to radians internally.\n- For each test case below, compute $\\Delta E_{\\text{H}p}$ and $\\Delta E_{\\text{O}d}$ in hartree and decide which polarization option yields the larger stabilization in magnitude. Define an index $b$ as $0$ if hydrogen $p$ stabilizes more (i.e., $\\Delta E_{\\text{H}p}  \\Delta E_{\\text{O}d}$), $1$ if oxygen $d$ stabilizes more (i.e., $\\Delta E_{\\text{O}d}  \\Delta E_{\\text{H}p}$), and $2$ if they are equal within an absolute tolerance of $10^{-9}$.\n- Express all energies in hartree. The final output must be a single line with a list of per-test-case results, where each result is the list $[\\Delta E_{\\text{H}p}, \\Delta E_{\\mathrm{O}d}, b]$. Round each floating-point energy to $6$ decimal places in the printed output.\n\nTest suite (three cases, all energies in hartree and $\\theta$ in degrees):\n- Case A (typical couplings): $\\theta = 104.5$, $\\varepsilon_{\\text{O}2s} = -1.20$, $\\varepsilon_{\\text{O}2p} = -0.52$, $\\varepsilon_{\\text{H}1s} = -0.50$, $V_{ss\\sigma} = -0.22$, $V_{sp\\sigma} = -0.30$, $V_{sp(\\text{H})\\sigma} = -0.25$, $V_{pp\\sigma} = -0.10$, $\\varepsilon_{\\text{H}p} = -0.125$, $\\varepsilon_{\\text{O}d} = 0.20$, $V_{sd\\sigma} = -0.12$.\n- Case B (high-energy polarization orbitals, weak effect): same as Case A but with $\\varepsilon_{\\text{H}p} = 1.00$ and $\\varepsilon_{\\text{O}d} = 2.00$.\n- Case C (hydrogen $p$ weakly coupled, oxygen $d$ moderately coupled): same as Case A but with $V_{sp(\\text{H})\\sigma} = -0.05$, $V_{pp\\sigma} = -0.02$, $\\varepsilon_{\\text{O}d} = 0.30$, and $V_{sd\\sigma} = -0.20$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list of lists, for the three test cases in the order A, B, C, for example: `[[x_A,y_A,b_A],[x_B,y_B,b_B],[x_C,y_C,b_C]]`, where each $x$ and $y$ is a floating-point number rounded to $6$ decimal places and each $b$ is an integer.", "solution": "The problem as stated is a well-posed exercise in quantum chemistry. It is scientifically grounded in the principles of the Linear Combination of Atomic Orbitals (LCAO) approximation and the Rayleigh-Ritz variational principle. All necessary parameters are provided, and the objective is clear and formally specified. We shall proceed with the derivation and solution.\n\nThe core of the problem is to construct and solve a simplified tight-binding model for the water molecule, $\\text{H}_2\\text{O}$. We will compare the energetic stabilization provided by two different types of polarization functions added to a minimal basis set.\n\n**1. Fundamental Principles**\n\nThe theoretical foundation is the Rayleigh-Ritz variational principle. This principle states that for a given quantum system with Hamiltonian operator $\\hat{H}$, the expectation value of the energy for any trial wave function $\\Psi$ is an upper bound to the true ground-state energy $E_{\\mathrm{gs}}$:\n$$\n\\frac{\\langle\\Psi|\\hat{H}|\\Psi\\rangle}{\\langle\\Psi|\\Psi\\rangle} \\geq E_{\\mathrm{gs}}\n$$\nIn the LCAO method, the molecular orbitals (MOs), $\\psi_i$, are approximated as linear combinations of a finite set of atomic orbitals (AOs), $\\{\\phi_j\\}_{j=1}^{N}$:\n$$\n\\psi_i = \\sum_{j=1}^{N} c_{ji} \\phi_j\n$$\nApplying the variational principle to this basis set transforms the Schrödinger equation into a matrix eigenvalue problem. For an orthonormal AO basis ($\\langle\\phi_j|\\phi_k\\rangle = \\delta_{jk}$), this is the standard eigenvalue equation:\n$$\n\\mathbf{H} \\mathbf{C} = \\mathbf{C} \\mathcal{E}\n$$\nwhere $\\mathbf{H}$ is the Hamiltonian matrix with elements $H_{jk} = \\langle\\phi_j|\\hat{H}|\\phi_k\\rangle$, $\\mathbf{C}$ is the matrix of coefficients $c_{ji}$, and $\\mathcal{E}$ is the diagonal matrix of MO energies $\\varepsilon_i$. The lowest eigenvalue, $\\varepsilon_1$, is the variational approximation to the ground-state energy of a single electron in the system. Adding basis functions (increasing $N$) enlarges the variational space, which can only lower or maintain the calculated eigenvalues, thus providing a better (or equal) approximation to the true energies.\n\nFor a closed-shell system with $2N_{\\text{occ}}$ electrons, the total electronic energy is approximated by summing the energies of the occupied MOs, accounting for double occupancy:\n$$\nE_{\\text{tot}} = 2 \\sum_{i=1}^{N_{\\text{occ}}} \\varepsilon_i\n$$\nIn this problem for water, there are $8$ valence electrons, so we occupy the lowest $N_{\\text{occ}} = 4$ spatial MOs.\n\n**2. System Specification and Basis Sets**\n\nThe water molecule is placed in the $xz$-plane with the oxygen atom at the origin $(0, 0, 0)$. The O–H bond vectors are given by $\\mathbf{u}_1 = (\\sin(\\theta/2), 0, \\cos(\\theta/2))$ and $\\mathbf{u}_2 = (-\\sin(\\theta/2), 0, \\cos(\\theta/2))$, where $\\theta$ is the bond angle. We will construct three Hamiltonians corresponding to three different basis sets.\n\n**Basis A: Minimal Basis**\nThis basis consists of $N=6$ atomic orbitals:\n$$\n\\{ \\phi_{\\text{O}2s}, \\phi_{\\text{O}2p_x}, \\phi_{\\text{O}2p_y}, \\phi_{\\text{O}2p_z}, \\phi_{\\text{H1}1s}, \\phi_{\\text{H2}1s} \\}\n$$\nThe corresponding Hamiltonian, $\\mathbf{H}_0$, is a $6 \\times 6$ matrix.\n\n**Basis B: Minimal + Hydrogen $p$-polarization**\nThis basis adds one $p$-type orbital on each hydrogen, aligned with the O–H bond. This gives a total of $N=8$ AOs:\n$$\n\\{ \\phi_{\\text{O}2s}, \\dots, \\phi_{\\text{H2}1s}, \\phi_{\\text{H1}p}, \\phi_{\\text{H2}p} \\}\n$$\nThe corresponding Hamiltonian, $\\mathbf{H}_{\\text{H}p}$, is an $8 \\times 8$ matrix.\n\n**Basis C: Minimal + Oxygen $d$-polarization**\nThis basis adds one $d_{z^2}$-like orbital on the oxygen atom, aligned with the $z$-axis. This gives a total of $N=7$ AOs:\n$$\n\\{ \\phi_{\\text{O}2s}, \\dots, \\phi_{\\text{H2}1s}, \\phi_{\\text{O}d_{z^2}} \\}\n$$\nThe corresponding Hamiltonian, $\\mathbf{H}_{\\text{O}d}$, is a $7 \\times 7$ matrix.\n\n**3. Hamiltonian Matrix Construction**\n\nThe Hamiltonian matrix elements $H_{jk}$ are given by on-site energies (diagonal, $j=k$) and coupling terms (off-diagonal, $j \\neq k$).\n\n**Diagonal Elements (On-site Energies):**\nThese are given as parameters:\n$H_{ii} = \\varepsilon_{\\text{O}2s}$ for the O $2s$ orbital.\n$H_{ii} = \\varepsilon_{\\text{O}2p}$ for all three O $2p$ orbitals.\n$H_{ii} = \\varepsilon_{\\text{H}1s}$ for both H $1s$ orbitals.\n$H_{ii} = \\varepsilon_{\\text{H}p}$ for the H $p$ polarization orbitals.\n$H_{ii} = \\varepsilon_{\\text{O}d}$ for the O $d$ polarization orbital.\n\n**Off-Diagonal Elements (Couplings):**\nThe off-diagonal elements are constructed based on the provided Slater-Koster-like rules. Let the basis orbitals be indexed in the order defined above. Let $\\theta_r = \\theta \\cdot \\pi/180$ be the angle in radians.\n\n**For the minimal basis Hamiltonian $\\mathbf{H}_0$ ($6 \\times 6$):**\n\\begin{itemize}\n    \\item $H_{0,4} = H_{0,5} = V_{ss\\sigma}$ (coupling between O $2s$ and H $1s$)\n    \\item $H_{1,4} = V_{sp\\sigma} (\\mathbf{e}_x \\cdot \\mathbf{u}_1) = V_{sp\\sigma} \\sin(\\theta_r/2)$\n    \\item $H_{1,5} = V_{sp\\sigma} (\\mathbf{e}_x \\cdot \\mathbf{u}_2) = -V_{sp\\sigma} \\sin(\\theta_r/2)$\n    \\item $H_{2,4} = H_{2,5} = V_{sp\\sigma} (\\mathbf{e}_y \\cdot \\mathbf{u}_{1,2}) = 0$\n    \\item $H_{3,4} = H_{3,5} = V_{sp\\sigma} (\\mathbf{e}_z \\cdot \\mathbf{u}_{1,2}) = V_{sp\\sigma} \\cos(\\theta_r/2)$\n\\end{itemize}\nAll other off-diagonal elements are $0$. The matrix is symmetric, so $H_{ji} = H_{ij}$.\n\n**For the Hamiltonian $\\mathbf{H}_{\\text{H}p}$ ($8 \\times 8$):**\nThe upper-left $6 \\times 6$ submatrix is identical to $\\mathbf{H}_0$. The new elements involving the H $p$ orbitals (indices $6, 7$) are:\n\\begin{itemize}\n    \\item $H_{0,6} = H_{0,7} = V_{sp(\\text{H})\\sigma}$ (coupling between O $2s$ and H $p$)\n    \\item $H_{1,6} = V_{pp\\sigma} (\\mathbf{e}_x \\cdot \\mathbf{u}_1) = V_{pp\\sigma} \\sin(\\theta_r/2)$\n    \\item $H_{1,7} = V_{pp\\sigma} (\\mathbf{e}_x \\cdot \\mathbf{u}_2) = -V_{pp\\sigma} \\sin(\\theta_r/2)$\n    \\item $H_{2,6} = H_{2,7} = 0$\n    \\item $H_{3,6} = H_{3,7} = V_{pp\\sigma} (\\mathbf{e}_z \\cdot \\mathbf{u}_{1,2}) = V_{pp\\sigma} \\cos(\\theta_r/2)$\n\\end{itemize}\n\n**For the Hamiltonian $\\mathbf{H}_{\\text{O}d}$ ($7 \\times 7$):**\nThe upper-left $6 \\times 6$ submatrix is identical to $\\mathbf{H}_0$. The new elements involving the O $d_{z^2}$ orbital (index $6$) are:\n\\begin{itemize}\n    \\item The problem states coupling is only between O $d_{z^2}$ and H $1s$.\n    \\item Let $n_k = \\mathbf{u}_k \\cdot \\mathbf{e}_z = \\cos(\\theta_r/2)$. The directional factor is $F_{sd} = \\frac{1}{2}(3n_k^2 - 1)$. This factor is the same for both hydrogens.\n    \\item $H_{4,6} = V_{sd\\sigma} F_{sd}$ (coupling between H1 $1s$ and O $d_{z^2}$)\n    \\item $H_{5,6} = V_{sd\\sigma} F_{sd}$ (coupling between H2 $1s$ and O $d_{z^2}$)\n\\end{itemize}\n\n**4. Energy Calculation and Comparison**\n\nFor each Hamiltonian ($\\mathbf{H}_0$, $\\mathbf{H}_{\\text{H}p}$, $\\mathbf{H}_{\\text{O}d}$), we numerically compute its eigenvalues $\\{\\varepsilon_i\\}$, sorted in ascending order. The total energy is then calculated as $E = 2 \\sum_{i=1}^{4} \\varepsilon_i$. This gives us $E_0$, $E_{\\text{H}p}$, and $E_{\\text{O}d}$.\n\nThe stabilization energies due to the polarization functions are defined as:\n$$\n\\Delta E_{\\text{H}p} = E_{\\text{H}p} - E_0\n$$\n$$\n\\Delta E_{\\text{O}d} = E_{\\text{O}d} - E_0\n$$\nBy the variational principle, $\\Delta E_{\\text{H}p} \\le 0$ and $\\Delta E_{\\text{O}d} \\le 0$. A more negative value indicates greater stabilization.\n\nFinally, we determine which set of polarization functions is more effective by comparing $\\Delta E_{\\text{H}p}$ and $\\Delta E_{\\text{O}d}$. An index $b$ is assigned as follows:\n\\begin{itemize}\n    \\item $b=0$ if $\\Delta E_{\\text{H}p}  \\Delta E_{\\text{O}d}$\n    \\item $b=1$ if $\\Delta E_{\\text{O}d}  \\Delta E_{\\text{H}p}$\n    \\item $b=2$ if $|\\Delta E_{\\text{H}p} - \\Delta E_{\\text{O}d}| \\leq 10^{-9}$\n\\end{itemize}\n\nThis procedure is applied to each test case specified in the problem statement. The algorithm will be implemented in Python using the NumPy library for linear algebra operations.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the tight-binding model for all test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A\n        {\n            \"theta\": 104.5, \"eps_O2s\": -1.20, \"eps_O2p\": -0.52, \"eps_H1s\": -0.50,\n            \"V_ss_sigma\": -0.22, \"V_sp_sigma\": -0.30, \"V_spH_sigma\": -0.25,\n            \"V_pp_sigma\": -0.10, \"eps_Hp\": -0.125, \"eps_Od\": 0.20, \"V_sd_sigma\": -0.12\n        },\n        # Case B\n        {\n            \"theta\": 104.5, \"eps_O2s\": -1.20, \"eps_O2p\": -0.52, \"eps_H1s\": -0.50,\n            \"V_ss_sigma\": -0.22, \"V_sp_sigma\": -0.30, \"V_spH_sigma\": -0.25,\n            \"V_pp_sigma\": -0.10, \"eps_Hp\": 1.00, \"eps_Od\": 2.00, \"V_sd_sigma\": -0.12\n        },\n        # Case C\n        {\n            \"theta\": 104.5, \"eps_O2s\": -1.20, \"eps_O2p\": -0.52, \"eps_H1s\": -0.50,\n            \"V_ss_sigma\": -0.22, \"V_sp_sigma\": -0.30, \"V_spH_sigma\": -0.05,\n            \"V_pp_sigma\": -0.02, \"eps_Hp\": -0.125, \"eps_Od\": 0.30, \"V_sd_sigma\": -0.20\n        },\n    ]\n\n    results_str = []\n    for params in test_cases:\n        delta_E_Hp, delta_E_Od, b = calculate_stabilizations(params)\n        res_str = f\"[{delta_E_Hp:.6f},{delta_E_Od:.6f},{b}]\"\n        results_str.append(res_str)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results_str)}]\")\n\ndef calculate_stabilizations(params):\n    \"\"\"\n    Calculates stabilization energies for a single set of parameters.\n    \"\"\"\n    # Unpack parameters\n    theta_deg = params[\"theta\"]\n    eps_O2s = params[\"eps_O2s\"]\n    eps_O2p = params[\"eps_O2p\"]\n    eps_H1s = params[\"eps_H1s\"]\n    V_ss_sigma = params[\"V_ss_sigma\"]\n    V_sp_sigma = params[\"V_sp_sigma\"]\n    V_spH_sigma = params[\"V_spH_sigma\"]\n    V_pp_sigma = params[\"V_pp_sigma\"]\n    eps_Hp = params[\"eps_Hp\"]\n    eps_Od = params[\"eps_Od\"]\n    V_sd_sigma = params[\"V_sd_sigma\"]\n\n    # Geometric factors\n    theta_rad = np.deg2rad(theta_deg)\n    sin_half_theta = np.sin(theta_rad / 2)\n    cos_half_theta = np.cos(theta_rad / 2)\n\n    # Number of occupied orbitals for H2O (8 valence electrons)\n    n_occ = 4\n    \n    # 1. Energy with minimal basis (E0)\n    # Basis: {O2s, O2px, O2py, O2pz, H1s, H2s}\n    H0 = np.zeros((6, 6))\n    H0[0, 0] = eps_O2s\n    H0[1, 1] = H0[2, 2] = H0[3, 3] = eps_O2p\n    H0[4, 4] = H0[5, 5] = eps_H1s\n\n    # O2s - H1s/H2s\n    H0[0, 4] = H0[4, 0] = V_ss_sigma\n    H0[0, 5] = H0[5, 0] = V_ss_sigma\n    # O2p - H1s/H2s\n    H0[1, 4] = H0[4, 1] = V_sp_sigma * sin_half_theta\n    H0[1, 5] = H0[5, 1] = V_sp_sigma * -sin_half_theta\n    H0[3, 4] = H0[4, 3] = V_sp_sigma * cos_half_theta\n    H0[3, 5] = H0[5, 3] = V_sp_sigma * cos_half_theta\n    # O2py has zero coupling due to symmetry\n    \n    eigvals0 = np.linalg.eigh(H0)[0]\n    E0 = 2 * np.sum(eigvals0[:n_occ])\n\n    # 2. Energy with H-p polarization (EHp)\n    # Basis: {O2s, O2px, O2py, O2pz, H1s, H2s, H1p, H2p}\n    HHp = np.zeros((8, 8))\n    HHp[:6, :6] = H0\n    HHp[6, 6] = HHp[7, 7] = eps_Hp\n\n    # O2s - H1p/H2p\n    HHp[0, 6] = HHp[6, 0] = V_spH_sigma\n    HHp[0, 7] = HHp[7, 0] = V_spH_sigma\n    # O2p - H1p/H2p\n    HHp[1, 6] = HHp[6, 1] = V_pp_sigma * sin_half_theta\n    HHp[1, 7] = HHp[7, 1] = V_pp_sigma * -sin_half_theta\n    HHp[3, 6] = HHp[6, 3] = V_pp_sigma * cos_half_theta\n    HHp[3, 7] = HHp[7, 3] = V_pp_sigma * cos_half_theta\n    \n    eigvals_Hp = np.linalg.eigh(HHp)[0]\n    EHp = 2 * np.sum(eigvals_Hp[:n_occ])\n    delta_E_Hp = EHp - E0\n\n    # 3. Energy with O-d polarization (EOd)\n    # Basis: {O2s, O2px, O2py, O2pz, H1s, H2s, Odz2}\n    HOd = np.zeros((7, 7))\n    HOd[:6, :6] = H0\n    HOd[6, 6] = eps_Od\n    \n    # Odz2 - H1s/H2s\n    nk = cos_half_theta\n    F_sd = 0.5 * (3 * nk**2 - 1)\n    HOd[4, 6] = HOd[6, 4] = V_sd_sigma * F_sd\n    HOd[5, 6] = HOd[6, 5] = V_sd_sigma * F_sd\n    \n    eigvals_Od = np.linalg.eigh(HOd)[0]\n    EOd = 2 * np.sum(eigvals_Od[:n_occ])\n    delta_E_Od = EOd - E0\n\n    # 4. Compare stabilizations\n    if np.abs(delta_E_Hp - delta_E_Od) = 1e-9:\n        b = 2\n    elif delta_E_Hp  delta_E_Od:\n        b = 0\n    else:\n        b = 1\n        \n    return delta_E_Hp, delta_E_Od, b\n\nsolve()\n```", "id": "2460489"}, {"introduction": "Having established that polarization functions lower the total energy, we now explore how this energetic stabilization translates into a change in a physical property: molecular geometry. Using an elegant analytical model for the C–C bond in ethylene, we will determine the equilibrium bond length by minimizing the total energy. This practice reveals how improving the electronic description of the $\\pi$-bond directly impacts the molecule's structure and allows us to compare this effect in a neutral molecule versus its radical cation [@problem_id:2460496].", "problem": "You will implement and test a minimal, first-principles model for how adding polarization functions in a basis set affects the equilibrium bond length of the carbon–carbon bond in ethylene and in the ethylene radical cation. The model must be purely analytical and must not rely on any empirical geometry data. You will assume that the total energy as a function of the carbon–carbon distance $r$ is the sum of a harmonic term for the $\\sigma$-framework and a two-level tight-binding $\\pi$-electron contribution. The harmonic contribution penalizes deviations from a preferred $\\sigma$ bond length, and the $\\pi$-electron contribution depends on the overlap-controlled hopping integral. You will then use this model to decide whether adding polarization functions changes the equilibrium bond length more strongly for the neutral molecule or for the radical cation.\n\nModel assumptions and definitions:\n- Let $r$ denote the carbon–carbon bond length in $\\mathrm{\\AA}$.\n- Let $r_{\\sigma}$ denote the preferred $\\sigma$-bond length in $\\mathrm{\\AA}$.\n- Let $k$ denote the stiffness constant (Hooke’s law) for the $\\sigma$-skeleton in $\\mathrm{eV}/\\mathrm{\\AA}^2$.\n- Let $t(r)$ denote the $\\pi$-electron hopping integral in $\\mathrm{eV}$ between the two $p$ orbitals, modeled as $t(r) = t_0 \\exp(-\\beta(r - r_{\\sigma}))$, where $t_0$ is a constant in $\\mathrm{eV}$ and $\\beta$ is a decay constant in $\\mathrm{\\AA}^{-1}$.\n- Adding polarization functions is modeled as a multiplicative scaling of the hopping integral by a factor $s \\ge 1$, i.e., $t_{\\mathrm{pol}}(r) = s\\,t(r)$. Use $s = 1$ to represent calculations without polarization functions and $s = s_{\\mathrm{pol}}  1$ to represent calculations with polarization functions.\n- For a two-site $\\pi$ system with on-site energies set to zero and off-diagonal coupling $-t(r)$, the molecular orbital energies are $-t(r)$ (bonding) and $+t(r)$ (antibonding). If the bonding level is occupied by $n$ electrons (with $n$ equal to $2$ for neutral ethylene and $1$ for the ethylene radical cation), then the $\\pi$-electron contribution to the total energy is $E_{\\pi}(r; n, s) = -n\\,s\\,t_0 \\exp(-\\beta(r - r_{\\sigma}))$ in $\\mathrm{eV}$.\n- The total energy is thus\n$$\nE(r; n, s) \\;=\\; \\frac{k}{2}\\,\\bigl(r - r_{\\sigma}\\bigr)^2 \\;-\\; n\\,s\\,t_0\\,\\exp(-\\beta(r - r_{\\sigma})),\n$$\nwith $r$ in $\\mathrm{\\AA}$ and energies in $\\mathrm{eV}$.\n\nTask:\n1. For each specified parameter set, compute the equilibrium bond length $r^*(n, s)$ that minimizes $E(r; n, s)$ with respect to $r$, once with $s = 1$ and once with $s = s_{\\mathrm{pol}}$.\n2. For neutral ethylene use $n = 2$, and for the ethylene radical cation use $n = 1$.\n3. For each molecule, compute the absolute change in equilibrium bond length due to polarization, defined as $\\Delta r(n) = |r^*(n, s_{\\mathrm{pol}}) - r^*(n, 1)|$, measured in $\\mathrm{\\AA}$.\n4. For each parameter set, determine a boolean value that is $\\mathrm{True}$ if $\\Delta r(1)  \\Delta r(2)$, and $\\mathrm{False}$ otherwise. This boolean answers the question: \"Does adding polarization functions have a greater effect on the geometry of the radical cation than on the neutral molecule?\" A $\\mathrm{True}$ value means a greater effect on the radical cation, a $\\mathrm{False}$ value means a greater or equal effect on the neutral molecule.\n5. All internal calculations that involve distances must use $\\mathrm{\\AA}$, and energies must use $\\mathrm{eV}$. The final output contains booleans and therefore has no physical unit.\n\nTest suite:\nUse the following four parameter sets, each a tuple $(k, r_{\\sigma}, t_0, \\beta, s_{\\mathrm{pol}})$ with units as defined above:\n- Case $1$: $(30.0, 1.54, 1.0, 1.5, 1.2)$.\n- Case $2$: $(30.0, 1.54, 1.0, 1.5, 1.01)$.\n- Case $3$: $(80.0, 1.54, 1.0, 1.5, 1.3)$.\n- Case $4$: $(40.0, 1.54, 0.8, 2.0, 1.3)$.\n\nRequired final output format:\nYour program should produce a single line of output containing the boolean results for the cases in the order listed above, as a comma-separated list enclosed in square brackets, for example, `[result_1,result_2,result_3,result_4]` with no spaces, where each `result_i` is either `True` or `False`.", "solution": "The problem statement is subjected to validation prior to any attempt at a solution.\n\nStep 1: Extracted Givens.\n- The carbon-carbon bond length is denoted by $r$, in units of $\\mathrm{\\AA}$.\n- The preferred $\\sigma$-bond length is $r_{\\sigma}$, in $\\mathrm{\\AA}$.\n- The stiffness constant for the $\\sigma$-skeleton is $k$, in $\\mathrm{eV}/\\mathrm{\\AA}^2$.\n- The $\\pi$-electron hopping integral is $t(r) = t_0 \\exp(-\\beta(r - r_{\\sigma}))$, where $t_0$ is in $\\mathrm{eV}$ and $\\beta$ is in $\\mathrm{\\AA}^{-1}$.\n- Polarization functions are modeled by a scaling factor $s \\ge 1$, such that $t_{\\mathrm{pol}}(r) = s\\,t(r)$. Without polarization functions, $s=1$. With polarization functions, $s = s_{\\mathrm{pol}}  1$.\n- The $\\pi$-electron energy for $n$ electrons is $E_{\\pi}(r; n, s) = -n\\,s\\,t_0 \\exp(-\\beta(r - r_{\\sigma}))$. For neutral ethylene, $n=2$. For the radical cation, $n=1$.\n- The total energy is $E(r; n, s) = \\frac{k}{2}(r - r_{\\sigma})^2 - n\\,s\\,t_0\\,\\exp(-\\beta(r - r_{\\sigma}))$, with energies in $\\mathrm{eV}$.\n- The task is to calculate the equilibrium bond length $r^*(n, s)$ for $s=1$ and $s=s_{\\mathrm{pol}}$, compute the absolute change $\\Delta r(n) = |r^*(n, s_{\\mathrm{pol}}) - r^*(n, 1)|$, and determine if $\\Delta r(1)  \\Delta r(2)$.\n- The test cases for $(k, r_{\\sigma}, t_0, \\beta, s_{\\mathrm{pol}})$ are: ($30.0$, $1.54$, $1.0$, $1.5$, $1.2$), ($30.0$, $1.54$, $1.0$, $1.5$, $1.01$), ($80.0$, $1.54$, $1.0$, $1.5$, $1.3$), and ($40.0$, $1.54$, $0.8$, $2.0$, $1.3$).\n\nStep 2: Validation Using Extracted Givens.\nThe problem is scientifically grounded. The model presented is a standard and well-established simplification used in theoretical chemistry, combining a harmonic potential for the $\\sigma$-framework with a tight-binding (Hückel-type) model for the $\\pi$-system. The exponential decay of the hopping integral is physically justified. The problem is well-posed; it asks for the minimum of a well-behaved function. It is objective and all terms are defined with mathematical precision. The provided parameters are physically realistic. The problem is self-contained and free of contradictions or vagueness.\n\nStep 3: Verdict and Action.\nThe problem is valid. A solution will be furnished.\n\nThe core of the problem is to determine the equilibrium bond length, $r^*(n, s)$, which corresponds to the minimum of the total energy function $E(r; n, s)$. This is found by setting the first derivative of the energy with respect to the bond length $r$ to zero.\n$$\n\\frac{\\mathrm{d}E}{\\mathrm{d}r} = \\frac{\\mathrm{d}}{\\mathrm{d}r} \\left[ \\frac{k}{2}(r - r_{\\sigma})^2 - n\\,s\\,t_0\\,\\exp(-\\beta\\,(r - r_{\\sigma})) \\right] = 0\n$$\nPerforming the differentiation yields:\n$$\nk(r - r_{\\sigma}) - n\\,s\\,t_0\\,(-\\beta)\\,\\exp(-\\beta\\,(r - r_{\\sigma})) = 0\n$$\n$$\nk(r - r_{\\sigma}) = -n\\,s\\,t_0\\,\\beta\\,\\exp(-\\beta\\,(r - r_{\\sigma}))\n$$\nThis is a transcendental equation for the equilibrium distance $r^*$. To solve it, we rearrange it into the canonical form for the Lambert W function, which is defined by the relation $z = W(z e^z)$. Let us define the displacement from the sigma equilibrium as $x = r^* - r_{\\sigma}$. The equation becomes:\n$$\nk x = -n\\,s\\,t_0\\,\\beta\\,e^{-\\beta x}\n$$\nTo bring this to the form $Ye^Y = C$, we manipulate the equation:\n$$\nx \\exp(\\beta x) = - \\frac{n s t_0 \\beta}{k}\n$$\nMultiply by $\\beta$:\n$$\n(\\beta x) \\exp(\\beta x) = - \\frac{n s t_0 \\beta^2}{k}\n$$\nThis is of the form $Y e^Y = C$, with $Y = \\beta x$ and $C = - \\frac{n s t_0 \\beta^2}{k}$. The solution is $Y = W(C)$, or $\\beta x = W\\left(-\\frac{n s t_0 \\beta^2}{k}\\right)$.\nThe physical solution must correspond to a stable minimum, requiring the second derivative of the energy to be positive at $r^*$:\n$$\n\\frac{\\mathrm{d}^2E}{\\mathrm{d}r^2} = k - n\\,s\\,t_0\\,\\beta^2\\,\\exp(-\\beta\\,(r - r_{\\sigma})) > 0\n$$\nFrom the first-derivative condition, $n s t_0 \\beta \\exp(-\\beta(r^*-r_{\\sigma})) = -k(r^*-r_{\\sigma})$. Substituting this gives:\n$$\n\\frac{\\mathrm{d}^2E}{\\mathrm{d}r^2}\\bigg|_{r^*} = k - \\beta (n s t_0 \\beta \\exp(-\\beta x)) = k - \\beta(-kx) = k(1+\\beta x) > 0\n$$\nSince $k  0$, stability requires $1 + \\beta x  0$, or $\\beta x  -1$. Substituting the solution from the Lambert W function, this means $W\\left(-\\frac{n s t_0 \\beta^2}{k}\\right)  -1$. The argument $C$ is negative, since all parameters are positive. For negative arguments $C \\in [-e^{-1}, 0)$, the Lambert W function has two real branches, $W_0(C)$ and $W_{-1}(C)$. The principal branch $W_0(C)$ gives values in $[-1, 0)$, while the lower branch $W_{-1}(C)$ gives values in $(-\\infty, -1]$. The stability condition is only satisfied by the principal branch, $W_0$.\nThe equilibrium displacement is thus $x(n,s) = \\frac{1}{\\beta} W_0\\left(-\\frac{n s t_0 \\beta^2}{k}\\right)$, and the equilibrium bond length is:\n$$\nr^*(n,s) = r_{\\sigma} + \\frac{1}{\\beta} W_0\\left(-\\frac{n s t_0 \\beta^2}{k}\\right)\n$$\nThe problem requires computing the change in bond length $\\Delta r(n) = |r^*(n, s_{\\mathrm{pol}}) - r^*(n, 1)|$. Since $s_{\\mathrm{pol}}  1$, the argument to $W_0$ becomes more negative, and since $W_0$ is a monotonically increasing function, $W_0(C(s_{\\mathrm{pol}}))  W_0(C(s=1))$. This implies $r^*(n, s_{\\mathrm{pol}})  r^*(n, 1)$. The bond shortens. The absolute value is therefore:\n$$\n\\Delta r(n) = r^*(n, 1) - r^*(n, s_{\\mathrm{pol}}) = \\frac{1}{\\beta} \\left[ W_0\\left(-\\frac{n t_0 \\beta^2}{k}\\right) - W_0\\left(-\\frac{n s_{\\mathrm{pol}} t_0 \\beta^2}{k}\\right) \\right]\n$$\nThe central question is whether $\\Delta r(1)  \\Delta r(2)$. This is a question about the behavior of $\\Delta r(n)$ as a function of the electron count $n$. Let us define a constant $A = \\frac{t_0 \\beta^2}{k}  0$ and analyze the function $G(n) = \\Delta r(n)$.\n$$\nG(n) = \\frac{1}{\\beta} \\left[ W_0(-nA) - W_0(-nA s_{\\mathrm{pol}}) \\right]\n$$\nWe investigate the derivative of $G(n)$ with respect to $n$. Let $u = -nA$ and $v = -nA s_{\\mathrm{pol}}$. Using the chain rule and the derivative of the Lambert W function, $\\frac{\\mathrm{d}W_0(z)}{\\mathrm{d}z} = \\frac{W_0(z)}{z(1+W_0(z))}$:\n$$\n\\frac{\\mathrm{d}G}{\\mathrm{d}n} = \\frac{1}{\\beta} \\left[ \\frac{\\mathrm{d}W_0(u)}{\\mathrm{d}u}\\frac{\\mathrm{d}u}{\\mathrm{d}n} - \\frac{\\mathrm{d}W_0(v)}{\\mathrm{d}v}\\frac{\\mathrm{d}v}{\\mathrm{d}n} \\right]\n$$\n$$\n\\frac{\\mathrm{d}G}{\\mathrm{d}n} = \\frac{1}{\\beta} \\left[ \\frac{W_0(-nA)}{-nA(1+W_0(-nA))}(-A) - \\frac{W_0(-nAs_{\\mathrm{pol}})}{-nAs_{\\mathrm{pol}}(1+W_0(-nAs_{\\mathrm{pol}}))}(-As_{\\mathrm{pol}}) \\right]\n$$\n$$\n\\frac{\\mathrm{d}G}{\\mathrm{d}n} = \\frac{A}{n\\beta} \\left[ \\frac{W_0(-nA)}{1+W_0(-nA)} - \\frac{W_0(-nAs_{\\mathrm{pol}})}{1+W_0(-nAs_{\\mathrm{pol}})} \\right]\n$$\nLet us analyze the function $h(z) = \\frac{W_0(z)}{1+W_0(z)}$. Its derivative is $h'(z) = \\frac{1}{(1+W_0(z))^2} \\frac{\\mathrm{d}W_0(z)}{\\mathrm{d}z} = \\frac{1}{(1+W_0(z))^2} \\frac{W_0(z)}{z(1+W_0(z))}$. An alternative form is $h(z) = 1 - \\frac{1}{1+W_0(z)}$, for which $h'(z) = \\frac{1}{(1+W_0(z))^2} \\frac{\\mathrm{d}W_0(z)}{\\mathrm{d}z}$. The derivative of $W_0(z)$ with respect to $z$ is positive for $z  -e^{-1}$. Since $1+W_0(z)$ is also positive in this range, $h'(z)$ is positive, meaning $h(z)$ is a monotonically increasing function.\nSince $s_{\\mathrm{pol}}  1$ and $n,A  0$, we have $-nA  -nAs_{\\mathrm{pol}}$. Because $h(z)$ is increasing, it follows that $h(-nA)  h(-nAs_{\\mathrm{pol}})$.\nThe term in square brackets in the expression for $\\frac{\\mathrm{d}G}{\\mathrm{d}n}$ is therefore positive. All other factors ($A, n, \\beta$) are also positive. Thus, $\\frac{\\mathrm{d}G}{\\mathrm{d}n}  0$.\nThis proves that $\\Delta r(n)$ is a strictly increasing function of $n$. Consequently, for any valid set of parameters, it must be that $\\Delta r(2)  \\Delta r(1)$.\nThe question asks for a boolean value which is $\\mathrm{True}$ if $\\Delta r(1)  \\Delta r(2)$ and $\\mathrm{False}$ otherwise. Based on this rigorous analytical derivation, the condition $\\Delta r(1)  \\Delta r(2)$ is never satisfied. The result must be $\\mathrm{False}$ for all test cases.\nThe physical interpretation is that the effect of improved electronic structure description (modeled by $s$) on the bond length is more pronounced for the neutral molecule, which has a stronger, more electron-rich $\\pi$-bond ($n=2$) than the radical cation ($n=1$). The bond length's sensitivity to the hopping integral is greater when more electrons occupy the bonding orbital.\nThe following numerical implementation serves only to confirm this fundamental conclusion.", "answer": "```python\nimport numpy as np\nfrom scipy.special import lambertw\n\ndef solve():\n    \"\"\"\n    Implements and tests a model for the effect of polarization functions on the\n    equilibrium bond length of ethylene and its radical cation.\n    \"\"\"\n\n    # Test suite: tuples of (k, r_sigma, t0, beta, s_pol)\n    test_cases = [\n        (30.0, 1.54, 1.0, 1.5, 1.2),\n        (30.0, 1.54, 1.0, 1.5, 1.01),\n        (80.0, 1.54, 1.0, 1.5, 1.3),\n        (40.0, 1.54, 0.8, 2.0, 1.3),\n    ]\n\n    results = []\n\n    for case in test_cases:\n        k, r_sigma, t0, beta, s_pol = case\n\n        def get_r_star(n, s, k_val, r_s_val, t0_val, beta_val):\n            \"\"\"\n            Calculates the equilibrium bond length r* for a given set of parameters.\n            The formula is derived from minimizing the total energy E(r; n, s)\n            and solved using the Lambert W function.\n            r_star = r_sigma + (1/beta) * W_0(-n*s*t0*beta^2 / k)\n            \"\"\"\n            # Argument for the Lambert W function\n            arg = -(n * s * t0_val * beta_val**2) / k_val\n\n            # The principal branch (k=0) of the Lambert W function gives the\n            # physically stable minimum. For real arguments >= -1/e, the result is real.\n            w_val = lambertw(arg, k=0).real\n            \n            r_star = r_s_val + (1.0 / beta_val) * w_val\n            return r_star\n\n        # Calculate bond lengths for the radical cation (n=1)\n        r_star_cation_no_pol = get_r_star(1, 1.0, k, r_sigma, t0, beta)\n        r_star_cation_pol = get_r_star(1, s_pol, k, r_sigma, t0, beta)\n        delta_r_cation = abs(r_star_cation_pol - r_star_cation_no_pol)\n\n        # Calculate bond lengths for the neutral molecule (n=2)\n        r_star_neutral_no_pol = get_r_star(2, 1.0, k, r_sigma, t0, beta)\n        r_star_neutral_pol = get_r_star(2, s_pol, k, r_sigma, t0, beta)\n        delta_r_neutral = abs(r_star_neutral_pol - r_star_neutral_no_pol)\n        \n        # Determine the boolean result: True if the effect is greater on the cation.\n        is_cation_effect_greater = delta_r_cation > delta_r_neutral\n        results.append(is_cation_effect_greater)\n    \n    # The final output must be a single line in the specified format.\n    # str(bool) in Python correctly produces \"True\" or \"False\".\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2460496"}, {"introduction": "We have seen that polarization functions improve our calculations, yielding better energies and more accurate geometries. However, in computational science, every improvement in accuracy comes with a trade-off in computational cost. This final practice confronts this reality by quantifying how much more expensive a calculation becomes when we add polarization functions, using the benzene molecule as a realistic example [@problem_id:2460510]. Understanding these computational scaling laws is an essential skill for designing and executing efficient computational studies.", "problem": "You are given a simplified, first-principles computational cost model to compare the total central processing unit (CPU) time required to perform a geometry optimization of benzene $\\text{C}_6\\text{H}_6$ using two basis sets: $6\\text{-}31\\mathrm{G}$ and $6\\text{-}31\\mathrm{G}(\\mathrm{d},\\mathrm{p})$. The focus is on the role of polarization functions and how they change the number of basis functions and, therefore, the scaling of the computational effort. Use the following definitions and assumptions, and compute the requested ratios without introducing any additional approximations.\n\nAssumptions about basis function counts:\n- Use spherical harmonic functions. A $p$-type function has $3$ angular components, and a $d$-type function has $5$ angular components.\n- In the $6\\text{-}31\\mathrm{G}$ basis set:\n  - Each carbon atom contributes $9$ contracted basis functions.\n  - Each hydrogen atom contributes $2$ contracted basis functions.\n- Adding polarization functions to form $6\\text{-}31\\mathrm{G}(\\mathrm{d},\\mathrm{p})$:\n  - Each carbon atom gains $5$ $d$-type functions.\n  - Each hydrogen atom gains $3$ $p$-type functions.\n- Benzene has $6$ carbon atoms and $6$ hydrogen atoms.\n\nUsing these assumptions, the total numbers of basis functions are:\n- For $6\\text{-}31\\mathrm{G}$: $N_{\\text{G}} = 6 \\times 9 + 6 \\times 2$.\n- For $6\\text{-}31\\mathrm{G}(\\mathrm{d},\\mathrm{p})$: $N_{\\text{Gdp}} = 6 \\times (9 + 5) + 6 \\times (2 + 3)$.\n\nComputational cost model for a geometry optimization:\n- A geometry optimization consists of $S$ steps.\n- Each step consists of $I$ iterations of a Self-Consistent Field (SCF) procedure to converge the electronic energy, plus one analytic energy gradient evaluation.\n- The dominant cost of one SCF iteration scales as proportional to $N^{p_{\\text{scf}}}$, where $N$ is the total number of basis functions and $p_{\\text{scf}}$ is a given scaling exponent.\n- The dominant cost of one gradient evaluation scales as proportional to $N^{p_{\\text{grad}}}$, where $p_{\\text{grad}}$ is a given scaling exponent.\n- The gradient cost can have a different prefactor relative to a single SCF iteration. Let $g$ be the dimensionless multiplier of the gradient cost in units of a single SCF-iteration cost at the same $N$.\n- Therefore, the total cost for a full optimization at a given $N$ is proportional to\n  $$ T(N) = S \\left( I \\, N^{p_{\\text{scf}}} + g \\, N^{p_{\\text{grad}}} \\right). $$\n- Because a single unknown constant of proportionality multiplies all terms, any ratio of two such total costs at the same algorithmic parameters but different $N$ values is well-defined and unitless.\n\nTask:\n- For each test case, compute the unitless ratio\n  $$ R = \\frac{T(N_{\\text{Gdp}})}{T(N_{\\text{G}})} = \\frac{S \\left( I \\, N_{\\text{Gdp}}^{p_{\\text{scf}}} + g \\, N_{\\text{Gdp}}^{p_{\\text{grad}}} \\right)}{S \\left( I \\, N_{\\text{G}}^{p_{\\text{scf}}} + g \\, N_{\\text{G}}^{p_{\\text{grad}}} \\right)} = \\frac{I \\, N_{\\text{Gdp}}^{p_{\\text{scf}}} + g \\, N_{\\text{Gdp}}^{p_{\\text{grad}}}}{I \\, N_{\\text{G}}^{p_{\\text{scf}}} + g \\, N_{\\text{G}}^{p_{\\text{grad}}}}. $$\n- Report $R$ as a decimal float rounded to exactly $6$ digits after the decimal point.\n\nTest suite:\n- Use the following ordered tuples of parameters $(p_{\\text{scf}}, p_{\\text{grad}}, S, I, g)$:\n  1. $(3, 3, 12, 10, 2)$\n  2. $(4, 3, 8, 15, 1)$\n  3. $(3, 4, 20, 8, 3)$\n  4. $(3, 3, 1, 1, 0)$\n  5. $(2.5, 3.5, 25, 25, 1.5)$\n\nRequired final output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. For example, `[r_1,r_2,r_3,r_4,r_5]`, where each `r_k` is the ratio $R$ for test case $k$ rounded to exactly $6$ digits after the decimal point. The results are unitless floats.", "solution": "The problem presented is a valid exercise in computational chemistry, requiring the application of a simplified, but conceptually sound, cost model to estimate the increase in computational effort when polarization functions are added to a basis set. All parameters and definitions are provided, the problem is self-contained, scientifically grounded in the principles of quantum chemistry calculations, and mathematically well-posed. We shall proceed with the solution.\n\nThe primary task is to compute the ratio of total computational time, $R$, for a geometry optimization of benzene, $\\text{C}_6\\text{H}_6$, using the $6\\text{-}31\\mathrm{G}(\\mathrm{d},\\mathrm{p})$ basis set relative to the $6\\text{-}31\\mathrm{G}$ basis set. The core principle is that computational cost scales polynomially with the number of basis functions, $N$. Adding polarization functions increases $N$, leading to a significant rise in cost.\n\nFirst, we must determine the total number of basis functions for each basis set. The molecule is benzene, which has $6$ carbon atoms and $6$ hydrogen atoms.\n\nFor the $6\\text{-}31\\mathrm{G}$ basis set:\n- Each carbon atom contributes $9$ basis functions.\n- Each hydrogen atom contributes $2$ basis functions.\nThe total number of basis functions, $N_{\\text{G}}$, is therefore:\n$$ N_{\\text{G}} = (6 \\text{ C atoms}) \\times (9 \\text{ functions/C}) + (6 \\text{ H atoms}) \\times (2 \\text{ functions/H}) = 54 + 12 = 66 $$\n\nFor the $6\\text{-}31\\mathrm{G}(\\mathrm{d},\\mathrm{p})$ basis set, we add polarization functions:\n- To each of the $6$ carbon atoms, we add a set of $5$ spherical $d$-type functions.\n- To each of the $6$ hydrogen atoms, we add a set of $3$ spherical $p$-type functions.\nThe total number of basis functions, $N_{\\text{Gdp}}$, is:\n$$ N_{\\text{Gdp}} = 6 \\times (9 + 5) + 6 \\times (2 + 3) = 6 \\times 14 + 6 \\times 5 = 84 + 30 = 114 $$\n\nThe problem provides the total cost for a geometry optimization as $T(N) = S \\left( I \\, N^{p_{\\text{scf}}} + g \\, N^{p_{\\text{grad}}} \\right)$, where $S$ is the number of optimization steps, $I$ is the number of SCF iterations per step, $p_{\\text{scf}}$ and $p_{\\text{grad}}$ are scaling exponents, and $g$ is a prefactor for the gradient cost. The ratio of costs, $R$, simplifies because the common factor $S$ cancels:\n$$ R = \\frac{T(N_{\\text{Gdp}})}{T(N_{\\text{G}})} = \\frac{I \\, N_{\\text{Gdp}}^{p_{\\text{scf}}} + g \\, N_{\\text{Gdp}}^{p_{\\text{grad}}}}{I \\, N_{\\text{G}}^{p_{\\text{scf}}} + g \\, N_{\\text{G}}^{p_{\\text{grad}}}} $$\n\nWe now evaluate this ratio for each test case using $N_{\\text{G}} = 66$ and $N_{\\text{Gdp}} = 114$.\n\nCase 1: $(p_{\\text{scf}}, p_{\\text{grad}}, S, I, g) = (3, 3, 12, 10, 2)$\nSince $p_{\\text{scf}} = p_{\\text{grad}} = 3$, the expression simplifies:\n$$ R_1 = \\frac{10 \\cdot 114^3 + 2 \\cdot 114^3}{10 \\cdot 66^3 + 2 \\cdot 66^3} = \\frac{(10 + 2) \\cdot 114^3}{(10 + 2) \\cdot 66^3} = \\left(\\frac{114}{66}\\right)^3 \\approx 5.15201173 \\approx 5.152012 $$\n\nCase 2: $(p_{\\text{scf}}, p_{\\text{grad}}, S, I, g) = (4, 3, 8, 15, 1)$\n$$ R_2 = \\frac{15 \\cdot 114^4 + 1 \\cdot 114^3}{15 \\cdot 66^4 + 1 \\cdot 66^3} = \\frac{15 \\cdot 168896016 + 1481544}{15 \\cdot 18974736 + 287496} = \\frac{2534921784}{284908536} \\approx 8.89730594 \\approx 8.897306 $$\n\nCase 3: $(p_{\\text{scf}}, p_{\\text{grad}}, S, I, g) = (3, 4, 20, 8, 3)$\n$$ R_3 = \\frac{8 \\cdot 114^3 + 3 \\cdot 114^4}{8 \\cdot 66^3 + 3 \\cdot 66^4} = \\frac{8 \\cdot 1481544 + 3 \\cdot 168896016}{8 \\cdot 287496 + 3 \\cdot 18974736} = \\frac{518540400}{59224176} \\approx 8.75567784 \\approx 8.755678 $$\n\nCase 4: $(p_{\\text{scf}}, p_{\\text{grad}}, S, I, g) = (3, 3, 1, 1, 0)$\nHere, $g=0$, so the gradient cost term is zero. Note also that $p_{\\text{scf}}=p_{\\text{grad}}$, although this is irrelevant with $g=0$.\n$$ R_4 = \\frac{1 \\cdot 114^3 + 0 \\cdot 114^3}{1 \\cdot 66^3 + 0 \\cdot 66^3} = \\frac{114^3}{66^3} = \\left(\\frac{114}{66}\\right)^3 \\approx 5.15201173 \\approx 5.152012 $$\nThis result is identical to Case 1, as the ratio depended only on the common exponent $3$.\n\nCase 5: $(p_{\\text{scf}}, p_{\\text{grad}}, S, I, g) = (2.5, 3.5, 25, 25, 1.5)$\nThe exponents are non-integers, which is common in fits of empirical scaling data.\n$$ R_5 = \\frac{25 \\cdot 114^{2.5} + 1.5 \\cdot 114^{3.5}}{25 \\cdot 66^{2.5} + 1.5 \\cdot 66^{3.5}} $$\nEvaluating the powers:\n$114^{2.5} \\approx 138763.33235$\n$114^{3.5} \\approx 15818960.038$\n$66^{2.5} \\approx 35386.43949$\n$66^{3.5} \\approx 2335492.206$\nSubstituting these values:\n$$ R_5 \\approx \\frac{25 \\cdot (138763.33235) + 1.5 \\cdot (15818960.038)}{25 \\cdot (35386.43949) + 1.5 \\cdot (2335492.206)} = \\frac{3469083.30875 + 23728440.057}{884660.98725 + 3503238.309} = \\frac{27197523.36575}{4387899.29625} \\approx 6.19830571 \\approx 6.198306 $$\nThe final computed ratios, rounded to six decimal places, are systematically calculated as per the model provided.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the computational chemistry cost ratio problem.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    # Each tuple is (p_scf, p_grad, S, I, g).\n    # S is not used in the final ratio formula but is kept for completeness.\n    test_cases = [\n        (3, 3, 12, 10, 2),\n        (4, 3, 8, 15, 1),\n        (3, 4, 20, 8, 3),\n        (3, 3, 1, 1, 0),\n        (2.5, 3.5, 25, 25, 1.5)\n    ]\n\n    # Calculate the number of basis functions for each basis set.\n    # Benzene C6H6: 6 Carbon atoms, 6 Hydrogen atoms.\n    \n    # For 6-31G:\n    # C: 9 functions, H: 2 functions\n    N_g = 6 * 9 + 6 * 2\n\n    # For 6-31G(d,p):\n    # C: 9 (base) + 5 (d-functions) = 14 functions\n    # H: 2 (base) + 3 (p-functions) = 5 functions\n    N_gdp = 6 * (9 + 5) + 6 * (2 + 3)\n\n    results = []\n    for case in test_cases:\n        p_scf, p_grad, _, I, g = case\n\n        # Numerator of the ratio R: T(N_gdp) part\n        # The S factor cancels out, so we calculate I * N^p_scf + g * N^p_grad\n        numerator = I * (N_gdp ** p_scf) + g * (N_gdp ** p_grad)\n\n        # Denominator of the ratio R: T(N_g) part\n        denominator = I * (N_g ** p_scf) + g * (N_g ** p_grad)\n\n        # Compute the ratio\n        if denominator == 0:\n            # This case should not happen with the given inputs, but it is good practice\n            # to handle potential division by zero.\n            ratio = float('inf')\n        else:\n            ratio = numerator / denominator\n\n        # Round the result to exactly 6 digits after the decimal point\n        # and format it as a string to preserve trailing zeros if any.\n        results.append(f\"{ratio:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2460510"}]}