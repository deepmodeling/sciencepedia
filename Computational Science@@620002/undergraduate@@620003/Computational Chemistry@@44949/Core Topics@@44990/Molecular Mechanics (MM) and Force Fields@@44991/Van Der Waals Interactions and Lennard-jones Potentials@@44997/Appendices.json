{"hands_on_practices": [{"introduction": "The Lennard-Jones potential is a powerful yet simple model, but where do its characteristic parameters, the well depth $\\epsilon$ and the length scale $\\sigma$, actually come from? This exercise guides you through one of the most fundamental tasks in computational chemistry: parameterizing a classical force field. You will write a program to fit the Lennard-Jones potential to a set of potential energy data, simulating the process of deriving a classical model from more accurate, high-level quantum mechanical calculations or experimental results [@problem_id:2466700]. This practice provides a crucial bridge between theoretical data and practical, computationally efficient models.", "problem": "You are tasked with writing a complete program that performs a nonlinear least-squares fit to estimate the Lennard–Jones (LJ) parameters for a helium dimer from provided sample potential energy data. The model is the standard Lennard–Jones potential, where the potential energy as a function of separation distance is given by\n$$\nV_{\\mathrm{LJ}}(r;\\,\\epsilon,\\sigma) = 4\\,\\epsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^6\\right].\n$$\nHere, $r$ is the interatomic distance, $\\epsilon$ is the well depth (energy scale), and $\\sigma$ is the finite-distance at which the interparticle potential is zero (length scale). In this problem, all distances $r$ are provided in ångström, written as $\\mathrm{\\AA}$, and all energies $V$ are provided in Kelvin (that is, in units of $k_{\\mathrm{B}}T$ where $k_{\\mathrm{B}}$ denotes Boltzmann’s constant). You must report the fitted $\\epsilon$ in Kelvin and $\\sigma$ in $\\mathrm{\\AA}$. Your fitting must use ordinary least squares by minimizing the sum of squared residuals between $V_{\\mathrm{LJ}}(r;\\,\\epsilon,\\sigma)$ and the provided energy values.\n\nStart from the following base principles:\n- The Lennard–Jones potential is a widely used empirically motivated model for van der Waals interactions.\n- Least squares fitting minimizes the sum of squared residuals to estimate model parameters from data.\n\nFor each dataset below, estimate $\\epsilon$ and $\\sigma$ by solving the nonlinear least-squares problem\n$$\n\\min_{\\epsilon>0,\\ \\sigma>0}\\ S(\\epsilon,\\sigma) \\equiv \\sum_{i=1}^{N} \\left[V_{\\mathrm{LJ}}(r_i;\\,\\epsilon,\\sigma) - V_i\\right]^2,\n$$\nsubject to the physically motivated bounds $\\epsilon>0$ and $\\sigma>0$. Use the provided datasets as-is (no additional scaling or unit conversions). Choose reasonable algorithmic settings to ensure convergence.\n\nDatasets (each consists of $N=10$ pairs $\\{(r_i,V_i)\\}$; distances in $\\mathrm{\\AA}$, energies in Kelvin):\n\n- Test Case A (noise-free synthetic sample consistent with a standard helium-like LJ shape):\n  - $r$: $[\\,2.4,\\ 2.6,\\ 2.8,\\ 3.0,\\ 3.2,\\ 3.6,\\ 4.0,\\ 5.0,\\ 6.0,\\ 8.0\\,]$\n  - $V$: $[\\,27.389,\\ -3.572,\\ -9.999,\\ -9.657,\\ -7.869,\\ -4.568,\\ -2.588,\\ -0.719,\\ -0.242,\\ -0.0435\\,]$\n\n- Test Case B (noise-free synthetic sample with a slightly different helium-like LJ shape):\n  - $r$: $[\\,2.4,\\ 2.6,\\ 2.8,\\ 3.0,\\ 3.2,\\ 3.6,\\ 4.0,\\ 5.0,\\ 6.0,\\ 8.0\\,]$\n  - $V$: $[\\,37.863,\\ 0.0,\\ -8.740,\\ -9.310,\\ -7.795,\\ -4.640,\\ -2.653,\\ -0.7376,\\ -0.2506,\\ -0.04484\\,]$\n\n- Test Case C (synthetic sample with small, fixed perturbations to emulate minor ab initio deviations):\n  - $r$: $[\\,2.4,\\ 2.6,\\ 2.8,\\ 3.0,\\ 3.2,\\ 3.6,\\ 4.0,\\ 5.0,\\ 6.0,\\ 8.0\\,]$\n  - $V$: $[\\,27.539,\\ -3.692,\\ -9.949,\\ -9.577,\\ -7.959,\\ -4.548,\\ -2.618,\\ -0.709,\\ -0.257,\\ -0.0435\\,]$\n\nYour program must:\n- Use nonlinear least squares with bounds $\\epsilon>0$ and $\\sigma>0$ to fit each dataset independently.\n- Use initial guesses that are derived only from the provided data (for example, use the most attractive point to estimate a starting well depth and the corresponding distance to initialize a length scale).\n- Produce results rounded to three decimal places for $\\epsilon$ (Kelvin) and $\\sigma$ ($\\mathrm{\\AA}$).\n\nOutput specification:\n- Final output must be a single line containing a single list of three elements, each element itself being a two-element list $[\\epsilon,\\sigma]$ for the corresponding test case in the order A, B, C.\n- The final line must be printed exactly as a comma-separated list with no spaces and with values rounded to three decimal places, for example:\n  - $[[\\epsilon_A,\\sigma_A],[\\epsilon_B,\\sigma_B],[\\epsilon_C,\\sigma_C]]$\n- Units: Report $\\epsilon$ in Kelvin and $\\sigma$ in $\\mathrm{\\AA}$, each rounded to three decimal places.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[[\\epsilon_A,\\sigma_A],[\\epsilon_B,\\sigma_B],[\\epsilon_C,\\sigma_C]]$), with each numeric entry rounded to three decimal places and no additional text printed.", "solution": "The problem as stated is scientifically sound, well-posed, and contains all necessary information for a unique solution. It is a standard application of nonlinear regression in the field of computational chemistry. The objective is to determine the optimal parameters $(\\epsilon, \\sigma)$ of the Lennard-Jones potential model,\n$$\nV_{\\mathrm{LJ}}(r;\\,\\epsilon,\\sigma) = 4\\,\\epsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^6\\right]\n$$\nfor $3$ distinct datasets. The optimality criterion is the minimization of the sum of squared residuals, $S(\\epsilon, \\sigma)$, defined as:\n$$\nS(\\epsilon,\\sigma) = \\sum_{i=1}^{N} \\left[V_{\\mathrm{LJ}}(r_i;\\,\\epsilon,\\sigma) - V_i\\right]^2\n$$\nwhere $\\{(r_i, V_i)\\}$ are the supplied data points for each case, with $N=10$. The search for the parameters is subject to the physically necessary constraints $\\epsilon > 0$ and $\\sigma > 0$.\n\nThe solution is implemented by employing a numerical algorithm for bounded nonlinear least-squares optimization. The `curve_fit` function from the `scipy.optimize` library is ideally suited for this task as it is designed to fit a function to data. The procedure for each dataset is as follows:\n\n$1$. **Model Function Implementation**: The Lennard-Jones potential $V_{\\mathrm{LJ}}(r, \\epsilon, \\sigma)$ is defined as a Python function which accepts the independent variable $r$ (as a NumPy array) and the parameters $\\epsilon$ and $\\sigma$ to be fitted.\n\n$2$. **Initial Parameter Estimation**: A robust initial guess $(\\epsilon_0, \\sigma_0)$ for the iterative optimization process is derived from the provided data, as stipulated.\n    -   The minimum of the Lennard-Jones potential is located at $r_m = 2^{1/6}\\sigma$ and its value is $V_{\\mathrm{LJ}}(r_m) = -\\epsilon$. We can therefore approximate the well depth $\\epsilon$ by finding the minimum potential energy value $V_{\\text{min}}$ in the dataset. The initial guess for $\\epsilon$ is set to $\\epsilon_0 = -V_{\\text{min}}$.\n    -   The corresponding interatomic distance $r_{\\text{min}}$ at which this minimum occurs is used to estimate $\\sigma$. From the relation $r_m = 2^{1/6}\\sigma$, the initial guess for $\\sigma$ is set to $\\sigma_0 = r_{\\text{min}} / 2^{1/6}$. This data-driven approach provides a starting point that is physically relevant and close to the expected solution, promoting robust convergence of the numerical solver.\n\n$3$. **Bounded Optimization**: The `curve_fit` function is invoked with the model function, the experimental data $(r_i, V_i)$, the initial guess $(\\epsilon_0, \\sigma_0)$, and the required parameter bounds. The lower bounds for both $\\epsilon$ and $\\sigma$ are set to $0$ to enforce the constraints $\\epsilon > 0$ and $\\sigma > 0$. The upper bounds are set to $\\infty$. The function then iteratively adjusts $(\\epsilon, \\sigma)$ to minimize the sum of squared residuals $S(\\epsilon, \\sigma)$ using the Trust Region Reflective algorithm, which is suitable for bounded problems.\n\n$4$. **Result Aggregation**: The optimal parameters $[\\epsilon, \\sigma]$ returned by the optimization for each of the $3$ test cases are collected. These values, representing the well depth in Kelvin and the length scale in ångströms, are rounded to $3$ decimal places as specified in the problem statement before being formatted for the final output.\n\nThis systematic procedure ensures that the determined parameters represent the best fit of the Lennard-Jones model to the given data under the least-squares criterion, while respecting the physical constraints of the model.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Fits Lennard-Jones parameters to potential energy data for three test cases\n    and prints the results in the specified format.\n    \"\"\"\n    \n    # Define the Lennard-Jones potential function.\n    # r: interatomic distance\n    # epsilon: well depth\n    # sigma: finite-distance at which potential is zero\n    def lennard_jones_potential(r, epsilon, sigma):\n        # The term (sigma/r) is pre-calculated for efficiency.\n        sig_r = sigma / r\n        sig_r6 = sig_r**6\n        sig_r12 = sig_r6**2\n        return 4 * epsilon * (sig_r12 - sig_r6)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"name\": \"A\",\n            \"r\": np.array([2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0, 8.0]),\n            \"V\": np.array([27.389, -3.572, -9.999, -9.657, -7.869, -4.568, -2.588, -0.719, -0.242, -0.0435]),\n        },\n        {\n            \"name\": \"B\",\n            \"r\": np.array([2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0, 8.0]),\n            \"V\": np.array([37.863, 0.0, -8.740, -9.310, -7.795, -4.640, -2.653, -0.7376, -0.2506, -0.04484]),\n        },\n        {\n            \"name\": \"C\",\n            \"r\": np.array([2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0, 8.0]),\n            \"V\": np.array([27.539, -3.692, -9.949, -9.577, -7.959, -4.548, -2.618, -0.709, -0.257, -0.0435]),\n        }\n    ]\n\n    results = []\n    \n    # Process each test case.\n    for case in test_cases:\n        r_data = case[\"r\"]\n        v_data = case[\"V\"]\n\n        # Derive initial guesses from the data as required.\n        # Find the minimum potential energy and its corresponding distance.\n        min_v_idx = np.argmin(v_data)\n        v_min = v_data[min_v_idx]\n        r_at_v_min = r_data[min_v_idx]\n\n        # Initial guess for epsilon: epsilon_0 = -V_min.\n        epsilon_0 = -v_min\n        # Initial guess for sigma: from r_m = 2^(1/6) * sigma.\n        sigma_0 = r_at_v_min / (2**(1/6))\n        \n        initial_guess = [epsilon_0, sigma_0]\n\n        # Define bounds for the parameters: epsilon > 0, sigma > 0.\n        bounds = ([0, 0], [np.inf, np.inf])\n\n        # Perform the nonlinear least-squares fit.\n        popt, _ = curve_fit(\n            lennard_jones_potential,\n            r_data,\n            v_data,\n            p0=initial_guess,\n            bounds=bounds,\n        )\n        \n        # The result popt contains the fitted [epsilon, sigma].\n        results.append(popt)\n\n    # Format the results into the required string format with 3 decimal places.\n    # e.g., [[epsilon_A,sigma_A],[epsilon_B,sigma_B],[epsilon_C,sigma_C]]\n    formatted_pairs = [f\"[{p[0]:.3f},{p[1]:.3f}]\" for p in results]\n    final_output_string = f\"[{','.join(formatted_pairs)}]\"\n    \n    # Final print statement in the exact required format.\n    print(final_output_string)\n\nsolve()\n```", "id": "2466700"}, {"introduction": "While the standard Lennard-Jones potential is spherically symmetric, real-world interactions can be directional due to molecular shape or electronic structure. This practice challenges you to explore such a scenario by implementing a hypothetical anisotropic potential where interactions are stronger along a specific axis. By minimizing the total energy of a 2D crystal lattice, you will directly predict how microscopic anisotropy dictates the macroscopic shape of a material, providing a tangible link between the potential energy function and the resulting structure [@problem_id:2466632].", "problem": "You are to model how directional variation in van der Waals interactions can induce anisotropy in a two-dimensional crystalline material. Use reduced Lennard–Jones units in which the Lennard–Jones length scale $\\sigma$ equals $1$, the well depth $\\epsilon$ equals $1$, and all derived quantities are dimensionless. Angles must be treated in radians.\n\nFundamental base and scenario: A material at zero temperature minimizes its total potential energy. For a system of particles with pairwise interactions, the total potential energy $U$ is the sum of pair potentials. The force on a degree of freedom is the negative gradient of $U$, and equilibrium corresponds to stationary points of $U$ with respect to those degrees of freedom. The Lennard–Jones potential is a widely used model for van der Waals interactions. To introduce anisotropy, assume that the well depth depends on direction relative to the $x$-axis, capturing stronger interactions along the $x$-direction via a directional factor. Specifically, for a particle pair separated by a displacement vector with Cartesian components $\\Delta x$ and $\\Delta y$, let the pair separation be $r=\\sqrt{(\\Delta x)^2+(\\Delta y)^2}$ and the cosine of the angle to the $x$-axis be $\\cos\\theta=\\Delta x/r$. Define a directional well depth $\\epsilon_{\\mathrm{eff}}(\\theta)=\\epsilon\\left(1+k\\cos^2\\theta\\right)$, where $k>-1$ is an anisotropy parameter. The pair potential is then $V(r,\\theta)=4\\,\\epsilon_{\\mathrm{eff}}(\\theta)\\left[\\left(\\sigma/r\\right)^{12}-\\left(\\sigma/r\\right)^6\\right]$. Set a finite interaction cutoff $r_c=2.5\\,\\sigma$; pairs with $r\\ge r_c$ do not contribute.\n\nGeometry and minimization: Consider $N=N_xN_y$ particles on a perfect rectangular lattice of $N_x$ by $N_y$ sites with periodic boundary conditions in both $x$ and $y$. Let $N_x=8$ and $N_y=8$, so $N=64$. Place particles at fractional lattice coordinates $(i/N_x,j/N_y)$ for integers $i\\in\\{0,\\dots,N_x-1\\}$ and $j\\in\\{0,\\dots,N_y-1\\}$. Let the simulation cell have side lengths $L_x$ and $L_y$ along $x$ and $y$. The absolute position of a particle at fractional coordinates $(f_x,f_y)$ is $(x,y)=(f_xL_x,f_yL_y)$. Use the minimum image convention under periodic boundary conditions to compute $\\Delta x$ and $\\Delta y$ between any pair $(p,q)$: for each Cartesian component, subtract the nearest integer multiple of the corresponding box length to bring the component into the interval $(-L/2,L/2]$. The total potential energy $U(L_x,L_y)$ is the sum over all distinct pairs with $r<r_c$.\n\nMaterial property to compute: Constrain the atomic positions to remain at the fixed fractional coordinates described above, and treat the box side lengths $L_x$ and $L_y$ as the only degrees of freedom. Determine the equilibrium box lengths $(L_x^\\star,L_y^\\star)$ by minimizing $U(L_x,L_y)$ with respect to $L_x$ and $L_y$. Report the equilibrium aspect ratio $R=L_x^\\star/L_y^\\star$ as a dimensionless float rounded to six decimal places. Use an initial guess $L_x^{(0)}=N_x\\,r_0$ and $L_y^{(0)}=N_y\\,r_0$, where $r_0=2^{1/6}\\sigma$ is the pairwise Lennard–Jones minimum separation in the isotropic case. If an evaluation proposes nonpositive $L_x$ or $L_y$, treat it as invalid and assign a large penalty value to $U$ to steer the minimization away from unphysical regions.\n\nAngle unit requirement: When interpreting $\\cos\\theta=\\Delta x/r$, the implied angle $\\theta$ is measured in radians.\n\nTest suite: Run your program for the following anisotropy parameters $k$:\n- Case A (isotropic baseline): $k=0.0$.\n- Case B (stronger along $x$): $k=0.5$.\n- Case C (weaker along $x$): $k=-0.5$.\n- Case D (much stronger along $x$): $k=1.0$.\n\nYour program should compute the corresponding equilibrium aspect ratios $R$ for each case in the order A, B, C, D.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list of the four rounded floats enclosed in square brackets, for example, $[r_A,r_B,r_C,r_D]$, where each $r_\\cdot$ is $R$ rounded to six decimal places. All quantities are dimensionless in reduced Lennard–Jones units.", "solution": "The problem presented is a well-posed exercise in computational materials physics. It is scientifically grounded, free of contradictions, and contains all necessary information for a unique solution. Therefore, we proceed with the analysis and derivation of the solution.\n\nThe central task is to determine the equilibrium configuration of a two-dimensional crystalline lattice by minimizing its total potential energy. The system is maintained at zero temperature, so thermal fluctuations are absent, and the equilibrium state corresponds to the global minimum of the potential energy function. The degrees of freedom for this minimization are the side lengths of the simulation cell, $L_x$ and $L_y$.\n\nThe total potential energy, $U$, of the system of $N$ particles is given by the sum over all distinct pairs of particles $(i, j)$:\n$$\nU(L_x, L_y) = \\sum_{i=1}^{N} \\sum_{j=i+1}^{N} V(r_{ij}, \\theta_{ij})\n$$\nwhere $V(r_{ij}, \\theta_{ij})$ is the anisotropic pair potential between particles $i$ and $j$. This potential is defined only for pairs with separation $r_{ij} < r_c$, where $r_c = 2.5\\,\\sigma$ is the specified cutoff radius. In reduced Lennard-Jones units, $\\sigma=1$ and $\\epsilon=1$, so $r_c = 2.5$.\n\nThe anisotropic Lennard-Jones potential is given by:\n$$\nV(r, \\theta) = 4\\,\\epsilon_{\\mathrm{eff}}(\\theta) \\left[ \\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^6 \\right]\n$$\nThe anisotropy is introduced through the direction-dependent well depth, $\\epsilon_{\\mathrm{eff}}(\\theta)$:\n$$\n\\epsilon_{\\mathrm{eff}}(\\theta) = \\epsilon \\left(1 + k \\cos^2\\theta\\right)\n$$\nHere, $k$ is the anisotropy parameter, and $\\theta$ is the angle the inter-particle displacement vector makes with the $x$-axis. The cosine of this angle is $\\cos\\theta = \\Delta x / r$, where $\\Delta x$ is the $x$-component of the displacement vector and $r = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2}$ is the pair separation. The term $\\cos^2\\theta$ is thus computed as $(\\Delta x)^2 / r^2 = (\\Delta x)^2 / ((\\Delta x)^2 + (\\Delta y)^2)$.\n\nThe system consists of $N = N_x \\times N_y = 8 \\times 8 = 64$ particles. Their positions are fixed in a rectangular lattice structure defined by fractional coordinates $(f_{x,i}, f_{y,i}) = (i_x/N_x, i_y/N_y)$ for integers $i_x \\in \\{0, \\dots, N_x-1\\}$ and $i_y \\in \\{0, \\dots, N_y-1\\}$. The absolute position of a particle $i$ is $(x_i, y_i) = (f_{x,i}L_x, f_{y,i}L_y)$.\n\nTo calculate the displacement vector $(\\Delta x, \\Delta y)$ between any two particles, we must apply periodic boundary conditions using the minimum image convention. For a pair of particles $i$ and $j$, the initial displacement in absolute coordinates is $(\\Delta x_{\\text{abs}}, \\Delta y_{\\text{abs}}) = (x_i - x_j, y_i - y_j)$. The minimum image displacement is then:\n$$\n\\Delta x = \\Delta x_{\\text{abs}} - L_x \\cdot \\text{round}\\left(\\frac{\\Delta x_{\\text{abs}}}{L_x}\\right)\n$$\n$$\n\\Delta y = \\Delta y_{\\text{abs}} - L_y \\cdot \\text{round}\\left(\\frac{\\Delta y_{\\text{abs}}}{L_y}\\right)\n$$\nwhere $\\text{round}(z)$ rounds $z$ to the nearest integer. This ensures that $\\Delta x \\in (-L_x/2, L_x/2]$ and $\\Delta y \\in (-L_y/2, L_y/2]$.\n\nWith these components, we construct a function $U(L_x, L_y; k)$ that computes the total potential energy for given box dimensions and a specific anisotropy parameter $k$. The problem then becomes a numerical optimization task: to find the optimal box lengths $(L_x^\\star, L_y^\\star)$ that minimize this function.\n$$\n(L_x^\\star, L_y^\\star) = \\arg\\min_{L_x > 0, L_y > 0} U(L_x, L_y; k)\n$$\nThis is a two-dimensional, non-linear optimization problem. We employ the L-BFGS-B algorithm, available in the `scipy.optimize.minimize` library function, which is a quasi-Newton method suitable for problems with box constraints (in this case, $L_x > 0$ and $L_y > 0$).\n\nThe initial guess for the optimization is based on the equilibrium separation for the isotropic Lennard-Jones potential, $r_0 = 2^{1/6}\\sigma$. The initial box lengths are set to $L_x^{(0)} = N_x r_0$ and $L_y^{(0)} = N_y r_0$. Since $N_x=N_y=8$, the initial guess corresponds to a square box with $L_x^{(0)} = L_y^{(0)} \\approx 8 \\cdot 1.12246 = 8.9797$.\n\nThe procedure is as follows:\n1.  Define a Python function `calculate_total_energy(L, k)` that takes a vector $L = [L_x, L_y]$ and the parameter $k$, and returns the total energy $U$. This function iterates over all $N(N-1)/2$ unique pairs, calculates their separation under periodic boundary conditions, and sums the pair potentials for those pairs within the cutoff radius.\n2.  For each value of $k$ in the test suite $\\{0.0, 0.5, -0.5, 1.0\\}$:\n    a. Invoke `scipy.optimize.minimize` with `calculate_total_energy` as the objective function, the specified initial guess, and bounds enforcing $L_x > 0$ and $L_y > 0$.\n    b. Extract the optimal lengths $(L_x^\\star, L_y^\\star)$ from the optimization result.\n    c. Compute the equilibrium aspect ratio $R = L_x^\\star / L_y^\\star$.\n    d. Round $R$ to six decimal places and store it.\n3.  Finally, the collected results are formatted and printed as a single comma-separated list.\n\nThe implementation details involve pre-calculating the fractional coordinates of all particles to optimize the energy calculation, which is called repeatedly by the minimizer. Vectorized operations with `numpy` are used where possible to improve performance.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef solve():\n    \"\"\"\n    Computes the equilibrium aspect ratio of a 2D anisotropic Lennard-Jones crystal.\n    \"\"\"\n    # System parameters in reduced Lennard-Jones units.\n    SIGMA = 1.0\n    EPSILON = 1.0\n    RC = 2.5 * SIGMA\n    RC_SQ = RC**2\n    \n    # Lattice dimensions.\n    NX = 8\n    NY = 8\n    N = NX * NY\n\n    # Pre-calculate particle fractional coordinates. This is constant.\n    particle_frac_coords = np.zeros((N, 2))\n    p_idx = 0\n    for i in range(NX):\n        for j in range(NY):\n            particle_frac_coords[p_idx] = [i / NX, j / NY]\n            p_idx += 1\n\n    def calculate_total_energy(L, k):\n        \"\"\"\n        Calculates the total potential energy U(L_x, L_y) for a given k.\n        \n        Args:\n            L (np.array): A 2-element array [Lx, Ly] representing box side lengths.\n            k (float): The anisotropy parameter.\n            \n        Returns:\n            float: The total potential energy of the system.\n        \"\"\"\n        Lx, Ly = L\n        # The L-BFGS-B method with bounds handles non-positive lengths,\n        # but this check is a safeguard.\n        if Lx <= 0 or Ly <= 0:\n            return 1e30  # Large penalty value for unphysical region.\n\n        total_energy = 0.0\n        L_vec = np.array([Lx, Ly])\n\n        # Iterate over all unique pairs of particles (i, j) where i < j.\n        for i in range(N):\n            for j in range(i + 1, N):\n                # Calculate fractional displacement.\n                f_disp = particle_frac_coords[i] - particle_frac_coords[j]\n\n                # Scale to absolute displacement.\n                abs_disp = f_disp * L_vec\n\n                # Apply minimum image convention.\n                # np.rint rounds to the nearest integer.\n                mic_disp = abs_disp - L_vec * np.rint(abs_disp / L_vec)\n                \n                dx, dy = mic_disp\n                r_sq = dx**2 + dy**2\n                \n                # If pair is within the cutoff radius, calculate its contribution.\n                if r_sq < RC_SQ:\n                    # Avoid division by zero for r_sq.\n                    # This should not happen for distinct particles in a box with Lx, Ly > 0.\n                    if r_sq == 0:\n                        continue\n                    \n                    # Calculate cos^2(theta) = (dx/r)^2 = dx^2 / r^2.\n                    cos2_theta = dx**2 / r_sq\n\n                    # Calculate effective epsilon.\n                    epsilon_eff = EPSILON * (1.0 + k * cos2_theta)\n\n                    # Calculate LJ potential terms efficiently.\n                    # Using sigma=1.\n                    sr_inv2 = 1.0 / r_sq\n                    sr_inv6 = sr_inv2**3\n                    sr_inv12 = sr_inv6**2\n                    \n                    pair_potential = 4.0 * epsilon_eff * (sr_inv12 - sr_inv6)\n                    \n                    total_energy += pair_potential\n                    \n        return total_energy\n\n    # Define the test cases from the problem statement.\n    test_cases_k = [0.0, 0.5, -0.5, 1.0]\n\n    results = []\n\n    # Initial guess for the box dimensions.\n    r0 = 2**(1/6) * SIGMA\n    L0 = np.array([NX * r0, NY * r0])\n    \n    # Boundary conditions for the minimization: Lx > 0, Ly > 0.\n    # A small positive lower bound is used for numerical stability.\n    bounds = [(1e-6, None), (1e-6, None)]\n\n    for k in test_cases_k:\n        # Define the objective function for the current value of k.\n        objective_function = lambda L: calculate_total_energy(L, k)\n        \n        # Perform the minimization to find the equilibrium box dimensions.\n        res = minimize(\n            objective_function, \n            L0, \n            method='L-BFGS-B', \n            bounds=bounds,\n            options={'ftol': 1e-12, 'gtol': 1e-8}\n        )\n\n        # Extract optimal lengths.\n        Lx_star, Ly_star = res.x\n\n        # Calculate and store the equilibrium aspect ratio, rounded to 6 decimal places.\n        aspect_ratio = Lx_star / Ly_star\n        results.append(f\"{aspect_ratio:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2466632"}, {"introduction": "How do we connect the microscopic forces between individual particles to a macroscopic, measurable property like pressure? This exercise demonstrates the power of the virial theorem, a key relationship in statistical mechanics that allows for the calculation of pressure from particle positions and intermolecular forces. You will implement the virial expression for different Lennard-Jones-type potentials, gaining hands-on experience with an essential molecular simulation technique and investigating how the 'hardness' of the repulsive interaction influences a fluid's pressure [@problem_id:2466657].", "problem": "You are given a dense classical fluid in a cubic periodic box of volume $V$ containing $N$ identical particles interacting through a pairwise central potential. The mechanical pressure $P$ of such a system can be expressed using the configurational virial identity as\n$$\nP \\;=\\; \\rho\\,k_{\\mathrm{B}}T \\;+\\; \\frac{1}{3V}\\sum_{i<j}\\,\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij},\n$$\nwhere $\\rho = N/V$ is the number density, $k_{\\mathrm{B}}$ is the Boltzmann constant, $T$ is the absolute temperature, $\\mathbf{r}_{ij}$ is the minimum-image displacement vector from particle $i$ to $j$ under periodic boundary conditions, and $\\mathbf{F}_{ij}$ is the force exerted on particle $i$ by particle $j$. The pair force is $\\mathbf{F}_{ij} = -\\dfrac{\\mathrm{d}u(r)}{\\mathrm{d}r}\\,\\hat{\\mathbf{r}}_{ij}$ for an isotropic pair potential $u(r)$ with separation $r=\\lVert \\mathbf{r}_{ij}\\rVert$ and unit vector $\\hat{\\mathbf{r}}_{ij}=\\mathbf{r}_{ij}/r$. Use reduced Lennard-Jones units with $k_{\\mathrm{B}}=1$, $\\varepsilon=1$, and $\\sigma=1$, and truncate pair interactions at a finite cut-off radius $r_c$ so that $\\mathbf{F}_{ij}=\\mathbf{0}$ and $u(r)=0$ for $r\\ge r_c$; do not apply any potential or force shifting or analytical tail corrections.\n\nConsider two Lennard-Jones-type pair potentials,\n$$\nu_{12\\text{-}6}(r)=4\\varepsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{12}-\\left(\\frac{\\sigma}{r}\\right)^{6}\\right],\n\\qquad\nu_{9\\text{-}6}(r)=4\\varepsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{9}-\\left(\\frac{\\sigma}{r}\\right)^{6}\\right].\n$$\nFor a given state point and particle configuration, define $\\Delta P = P_{12\\text{-}6}-P_{9\\text{-}6}$, the difference between the instantaneous mechanical pressures computed with $u_{12\\text{-}6}$ and with $u_{9\\text{-}6}$ on the same configuration.\n\nParticle configuration construction: For each test case, let $N=n^3$ for a given integer $n\\ge 2$. Let the cubic box side length be $L = (N/\\rho)^{1/3}$ so that $V=L^3$. Place particles on a simple cubic lattice of $n\\times n\\times n$ points at positions\n$$\n\\mathbf{r}_{ijk}=\\big((i+\\tfrac{1}{2})a,\\,(j+\\tfrac{1}{2})a,\\,(k+\\tfrac{1}{2})a\\big),\n$$\nfor integers $i,j,k\\in\\{0,1,\\dots,n-1\\}$ with lattice spacing $a=L/n$. Use the minimum image convention under periodic boundary conditions for all pair separations in the virial sum. Angles do not appear in this problem. All quantities are in reduced Lennard-Jones units, and your program must report pressures in units of $\\varepsilon/\\sigma^3$.\n\nTask: For each test case below, construct the configuration as specified, compute $P_{12\\text{-}6}$ and $P_{9\\text{-}6}$ at the given $(\\rho,T,r_c)$, and report $\\Delta P$ rounded to six decimal places.\n\nTest suite (each case is $(n,\\rho,T,r_c)$):\n- Case A: $(n=\\;4,\\;\\rho=\\;0.85,\\;T=\\;1.0,\\;r_c=\\;2.5)$\n- Case B: $(n=\\;3,\\;\\rho=\\;1.10,\\;T=\\;1.0,\\;r_c=\\;2.5)$\n- Case C: $(n=\\;4,\\;\\rho=\\;0.30,\\;T=\\;3.0,\\;r_c=\\;2.5)$\n- Case D: $(n=\\;3,\\;\\rho=\\;0.85,\\;T=\\;0.10,\\;r_c=\\;2.5)$\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order [Case A, Case B, Case C, Case D], for example, \"[0.123456,-0.234567,0.000000,1.234568]\". Express each entry as a decimal rounded to six digits after the decimal point.", "solution": "The problem requires the calculation of the difference in instantaneous mechanical pressure, $\\Delta P = P_{12\\text{-}6} - P_{9\\text{-}6}$, between two systems described by different Lennard-Jones-type potentials, but evaluated on the exact same particle configuration at the same state point.\n\nThe mechanical pressure $P$ is given by the virial expression:\n$$\nP = \\rho k_{\\mathrm{B}}T + \\frac{1}{3V}\\sum_{i<j}\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij}\n$$\nHere, $\\rho = N/V$ is the number density, $k_{\\mathrm{B}}$ is the Boltzmann constant, $T$ is the temperature, $V$ is the volume, $\\mathbf{r}_{ij}$ is the minimum-image displacement vector between particles $i$ and $j$, and $\\mathbf{F}_{ij}$ is the force on particle $i$ from particle $j$. The problem is posed in reduced Lennard-Jones units, where $k_{\\mathrm{B}}=1$, $\\varepsilon=1$, and $\\sigma=1$.\n\nThe pressure difference $\\Delta P$ is:\n$$\n\\Delta P = P_{12\\text{-}6} - P_{9\\text{-}6} = \\left(\\rho T + W_{12\\text{-}6}\\right) - \\left(\\rho T + W_{9\\text{-}6}\\right)\n$$\nwhere $W$ is the virial contribution to the pressure, $W = \\frac{1}{3V}\\sum_{i<j}\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij}$. Since the density $\\rho$, temperature $T$, and volume $V$ are the same for both calculations, the ideal gas term $\\rho T$ cancels out. Thus, the pressure difference depends only on the difference in the virial terms:\n$$\n\\Delta P = W_{12\\text{-}6} - W_{9\\text{-}6} = \\frac{1}{3V}\\sum_{i<j} \\left( \\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij, 12\\text{-}6} - \\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij, 9\\text{-}6} \\right)\n$$\nThe dot product $\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij}$ is known as the pair virial. For a central, isotropic pair potential $u(r)$, the force is $\\mathbf{F}_{ij} = -\\frac{\\mathrm{d}u(r)}{\\mathrm{d}r}\\hat{\\mathbf{r}}_{ij}$, where $r = \\lVert \\mathbf{r}_{ij}\\rVert$ and $\\hat{\\mathbf{r}}_{ij} = \\mathbf{r}_{ij}/r$. The pair virial becomes:\n$$\n\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij} = \\mathbf{r}_{ij} \\cdot \\left(-\\frac{\\mathrm{d}u(r_{ij})}{\\mathrm{d}r} \\frac{\\mathbf{r}_{ij}}{r_{ij}}\\right) = -r_{ij} \\frac{\\mathrm{d}u(r_{ij})}{\\mathrm{d}r} \\equiv w(r_{ij})\n$$\nWe must now derive the pair virial $w(r)$ for each potential in reduced units ($\\varepsilon=1, \\sigma=1$).\n\nFor the standard Lennard-Jones potential, $u_{12\\text{-}6}(r) = 4(r^{-12} - r^{-6})$:\n$$\n\\frac{\\mathrm{d}u_{12\\text{-}6}}{\\mathrm{d}r} = 4(-12r^{-13} + 6r^{-7}) = 24(-2r^{-13} + r^{-7})\n$$\n$$\nw_{12\\text{-}6}(r) = -r \\frac{\\mathrm{d}u_{12\\text{-}6}}{\\mathrm{d}r} = -r \\cdot 24(-2r^{-13} + r^{-7}) = 48r^{-12} - 24r^{-6}\n$$\nFor the alternative Lennard-Jones-type potential, $u_{9\\text{-}6}(r) = 4(r^{-9} - r^{-6})$:\n$$\n\\frac{\\mathrm{d}u_{9\\text{-}6}}{\\mathrm{d}r} = 4(-9r^{-10} + 6r^{-7})\n$$\n$$\nw_{9\\text{-}6}(r) = -r \\frac{\\mathrm{d}u_{9\\text{-}6}}{\\mathrm{d}r} = -r \\cdot 4(-9r^{-10} + 6r^{-7}) = 36r^{-9} - 24r^{-6}\n$$\nThe difference in the pair virial, $\\Delta w(r) = w_{12\\text{-}6}(r) - w_{9\\text{-}6}(r)$, is:\n$$\n\\Delta w(r) = (48r^{-12} - 24r^{-6}) - (36r^{-9} - 24r^{-6}) = 48r^{-12} - 36r^{-9}\n$$\nThe total pressure difference is then the sum of these pair-level differences over all unique pairs of particles within the cutoff radius $r_c$, divided by $3V$:\n$$\n\\Delta P = \\frac{1}{3V} \\sum_{i<j, \\, r_{ij} < r_c} \\left( 48r_{ij}^{-12} - 36r_{ij}^{-9} \\right)\n$$\nThe computational procedure is as follows:\n1.  For each test case given by $(n, \\rho, T, r_c)$, calculate the system parameters: number of particles $N = n^3$, volume $V = N/\\rho$, and box side length $L = V^{1/3}$. The lattice spacing is $a=L/n$. Note that the temperature $T$ is not required for the calculation of $\\Delta P$ on a fixed configuration.\n2.  Generate the coordinates of the $N$ particles on a simple cubic lattice as specified: $\\mathbf{r}_{ijk}=\\big((i+\\tfrac{1}{2})a,\\,(j+\\tfrac{1}{2})a,\\,(k+\\tfrac{1}{2})a\\big)$ for $i,j,k \\in \\{0, 1, \\dots, n-1\\}$.\n3.  Initialize a variable for the total virial difference sum, $\\Delta W_{\\text{sum}} = 0$.\n4.  Iterate through all unique pairs of particles $(i, j)$ with $i < j$. For each pair:\n    a. Calculate the displacement vector $\\Delta\\mathbf{r} = \\mathbf{r}_j - \\mathbf{r}_i$.\n    b. Apply the minimum image convention to each component of $\\Delta\\mathbf{r}$ to find the shortest vector $\\mathbf{r}_{ij}$ connecting the particles in the periodic box. A component $\\Delta r_k$ is mapped to $\\Delta r_k - L \\cdot \\text{round}(\\Delta r_k / L)$.\n    c. Compute the squared distance $r_{ij}^2 = \\lVert \\mathbf{r}_{ij} \\rVert^2$.\n    d. If $r_{ij}^2 < r_c^2$, calculate the pair separation $r_{ij} = \\sqrt{r_{ij}^2}$, compute the virial difference $\\Delta w(r_{ij}) = 48r_{ij}^{-12} - 36r_{ij}^{-9}$, and add it to $\\Delta W_{\\text{sum}}$.\n5.  After iterating through all pairs, calculate the final pressure difference $\\Delta P = \\Delta W_{\\text{sum}} / (3V)$.\n6.  The result for each case is rounded to six decimal places.\nThis algorithm directly implements the derived physical formula for the given static crystal configuration.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the difference in instantaneous mechanical pressure between\n    two Lennard-Jones-type potentials for several test cases on a\n    static lattice configuration.\n    \"\"\"\n    # Test suite (each case is (n, rho, T, r_c))\n    test_cases = [\n        (4, 0.85, 1.0, 2.5),  # Case A\n        (3, 1.10, 1.0, 2.5),  # Case B\n        (4, 0.30, 3.0, 2.5),  # Case C\n        (3, 0.85, 0.10, 2.5),  # Case D\n    ]\n\n    results = []\n    for case in test_cases:\n        n, rho, T, r_c = case\n\n        # System parameters are derived from the given inputs.\n        # The temperature T is not needed for the calculation on a static configuration.\n        N = n**3\n        V = N / rho\n        L = V**(1.0/3.0)\n        a = L / n\n\n        # Particle configuration is constructed on a simple cubic lattice.\n        coords = np.zeros((N, 3), dtype=np.float64)\n        p_idx = 0\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    coords[p_idx] = np.array([\n                        (i + 0.5) * a, \n                        (j + 0.5) * a, \n                        (k + 0.5) * a\n                    ], dtype=np.float64)\n                    p_idx += 1\n\n        # The calculation of the virial sum difference is performed.\n        total_delta_virial_sum = 0.0\n        r_c_sq = r_c**2\n        \n        # A double loop iterates over all unique pairs of particles (i, j) with i < j.\n        for i in range(N):\n            for j in range(i + 1, N):\n                # The displacement vector is calculated.\n                rij_vec = coords[j] - coords[i]\n\n                # The minimum image convention is applied to the displacement vector.\n                # np.rint rounds to the nearest integer, with .5 cases rounding to the nearest even integer.\n                rij_vec = rij_vec - L * np.rint(rij_vec / L)\n                \n                # The squared distance of the minimum image vector is computed.\n                r_sq = np.sum(rij_vec**2)\n\n                # The pair's contribution is included only if it is within the cutoff radius.\n                if r_sq < r_c_sq:\n                    # The pair virial difference term is calculated and added to the sum.\n                    # Delta_w(r) = 48*r^(-12) - 36*r^(-9)\n                    r = np.sqrt(r_sq)\n                    delta_w = 48.0 * pow(r, -12) - 36.0 * pow(r, -9)\n                    total_delta_virial_sum += delta_w\n        \n        # The final pressure difference is calculated from the total virial sum.\n        # Delta_P = total_delta_virial_sum / (3 * V)\n        delta_P = total_delta_virial_sum / (3.0 * V)\n\n        # The result is formatted to six decimal places.\n        results.append(f\"{delta_P:.6f}\")\n\n    # The final output is printed in the specified format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2466657"}]}