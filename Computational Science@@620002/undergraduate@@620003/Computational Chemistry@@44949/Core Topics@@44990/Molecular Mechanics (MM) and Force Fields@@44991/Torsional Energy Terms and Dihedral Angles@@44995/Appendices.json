{"hands_on_practices": [{"introduction": "Force field parameters are not arbitrary values; they are carefully derived to reproduce experimental data or, as is common today, results from high-level quantum mechanical (QM) calculations. This exercise provides direct, hands-on experience in this fundamental parameterization process [@problem_id:2466268]. You will take on the role of a force field developer, fitting the parameters of a standard torsional energy model to a set of hypothetical QM energy data, and in doing so, you will practice a core skill in computational chemistry.", "problem": "You are given three discrete dihedral potential energy scans from Quantum Mechanics (QM) for a hypothetical $H_3C\\text{-}X\\text{-}X\\text{-}CH_3$ molecule. For the $C\\text{-}X\\text{-}X\\text{-}C$ dihedral, assume the torsional contribution to the potential energy is modeled by\n$$\nE(\\phi) \\;=\\; E_0 \\;+\\; \\frac{V}{2}\\,\\Big(1 + \\cos\\big(n\\,\\phi - \\gamma\\big)\\Big),\n$$\nwhere $E(\\phi)$ is the energy in kJ mol$^{-1}$, $\\phi$ is the dihedral angle in degrees, $E_0$ is an unknown offset in kJ mol$^{-1}$, $V$ is the torsional barrier amplitude in kJ mol$^{-1}$, $n$ is an integer periodicity, and $\\gamma$ is a phase angle in degrees. Your task is to determine, for each scan, the triple $(V,n,\\gamma)$ that minimizes the sum of squared residuals between the model and the given data. The allowed periodicities are $n \\in \\{1,2,3,4,6\\}$. You must report $\\gamma$ in degrees within the interval $[0,360)$, and $V \\ge 0$. The scans provide energies that already include any constant baseline; you should not report $E_0$.\n\nAll three scans use the same set of dihedral angles\n$$\n\\phi \\in \\{\\,0^\\circ,\\,30^\\circ,\\,60^\\circ,\\,90^\\circ,\\,120^\\circ,\\,150^\\circ,\\,180^\\circ,\\,210^\\circ,\\,240^\\circ,\\,270^\\circ,\\,300^\\circ,\\,330^\\circ\\,\\}.\n$$\n\nFor each scan, the corresponding energies $E(\\phi)$ in kJ mol$^{-1}$ are:\n\n- Test case $1$:\n  $$\n  [\\,12.5,\\,6.5,\\,0.5,\\,6.5,\\,12.5,\\,6.5,\\,0.5,\\,6.5,\\,12.5,\\,6.5,\\,0.5,\\,6.5\\,].\n  $$\n- Test case $2$:\n  $$\n  [\\,3.55,\\,4.8,\\,3.55,\\,1.05,\\,-0.2,\\,1.05,\\,3.55,\\,4.8,\\,3.55,\\,1.05,\\,-0.2,\\,1.05\\,].\n  $$\n- Test case $3$:\n  $$\n  [\\,1.2,\\,1.367468,\\,1.825,\\,2.45,\\,3.075,\\,3.532532,\\,3.7,\\,3.532532,\\,3.075,\\,2.45,\\,1.825,\\,1.367468\\,].\n  $$\n\nAngle unit requirement: treat all dihedral angles $\\phi$ in degrees, and report $\\gamma$ in degrees. Energy unit requirement: treat all energies $E(\\phi)$ and the fitted amplitude $V$ in kJ mol$^{-1}$.\n\nTest Suite and Answer Specification:\n- Using the above three scans, determine the best-fit triple $(V,n,\\gamma)$ for each scan by minimizing the sum of squared residuals over the given angles.\n- Restrict $n$ to the set $\\{1,2,3,4,6\\}$, and enforce $\\gamma \\in [0,360)$ in degrees.\n- The required output for your program is a single line containing the list of the three results, where each result is a list of the form $[V,n,\\gamma]$ with $V$ and $\\gamma$ rounded to $6$ decimal places, $n$ as an integer. The final output must be formatted as one comma-separated list enclosed in square brackets, for example:\n$$\n[[V_1,n_1,\\gamma_1],[V_2,n_2,\\gamma_2],[V_3,n_3,\\gamma_3]].\n$$", "solution": "The problem requires finding the parameters $(V, n, \\gamma)$ for a torsional energy model that best fit three sets of quantum mechanical data. The model is given by the function:\n$$\nE(\\phi) \\;=\\; E_0 \\;+\\; \\frac{V}{2}\\,\\Big(1 + \\cos\\big(n\\,\\phi - \\gamma\\big)\\Big),\n$$\nwhere $E(\\phi)$ is the potential energy, $\\phi$ is the dihedral angle, $E_0$ is a constant energy offset, $V$ is the barrier amplitude, $n$ is the periodicity, and $\\gamma$ is the phase angle. The goal is to minimize the sum of squared residuals (SSR) between the model and the provided energy data $E_i$ at corresponding angles $\\phi_i$:\n$$\n\\text{SSR} \\;=\\; \\sum_{i=1}^{N} \\left[ E_i - E(\\phi_i) \\right]^2.\n$$\nThe parameter $n$ is restricted to the set $\\{1, 2, 3, 4, 6\\}$. This is a non-linear least squares problem. However, for a fixed value of $n$, the model can be linearized. Using the trigonometric identity for the cosine of a difference, $\\cos(A - B) = \\cos A \\cos B + \\sin A \\sin B$, we can rewrite the model equation as:\n$$\nE(\\phi) \\;=\\; E_0 \\;+\\; \\frac{V}{2} \\;+\\; \\frac{V}{2}\\cos(\\gamma)\\cos(n\\phi) \\;+\\; \\frac{V}{2}\\sin(\\gamma)\\sin(n\\phi).\n$$\nWe can define a set of linear coefficients:\n$$\nC_1 \\;=\\; E_0 + \\frac{V}{2}\n$$\n$$\nC_2 \\;=\\; \\frac{V}{2}\\cos(\\gamma)\n$$\n$$\nC_3 \\;=\\; \\frac{V}{2}\\sin(\\gamma)\n$$\nThis transforms the model into a linear form with respect to the new coefficients $(C_1, C_2, C_3)$:\n$$\nE(\\phi_i) \\;=\\; C_1 \\cdot 1 \\;+\\; C_2 \\cos(n\\phi_i) \\;+\\; C_3 \\sin(n\\phi_i).\n$$\nFor each data scan and for each allowed value of $n$, we solve a linear least squares problem to find the optimal coefficients $(C_1, C_2, C_3)$ that minimize the SSR. This can be expressed in matrix form as finding the vector $\\mathbf{c}$ that minimizes $\\|\\mathbf{A}\\mathbf{c} - \\mathbf{y}\\|^2_2$, where $\\mathbf{y}$ is the vector of observed energies $E_i$, $\\mathbf{c} = [C_1, C_2, C_3]^T$, and $\\mathbf{A}$ is the design matrix with rows $[1, \\cos(n\\phi_i), \\sin(n\\phi_i)]$. For all calculations, the angles $\\phi_i$ given in degrees must be converted to radians, as standard computational libraries' trigonometric functions operate on radians.\n\nOnce the optimal coefficients $(C_1, C_2, C_3)$ are found for a given $n$, the original physical parameters $V$ and $\\gamma$ are recovered. The amplitude $V$ is found by observing that:\n$$\nC_2^2 + C_3^2 \\;=\\; \\left(\\frac{V}{2}\\right)^2 (\\cos^2\\gamma + \\sin^2\\gamma) \\;=\\; \\left(\\frac{V}{2}\\right)^2.\n$$\nGiven the constraint $V \\ge 0$, we have:\n$$\nV \\;=\\; 2\\sqrt{C_2^2 + C_3^2}.\n$$\nThe phase angle $\\gamma$ is determined from the ratio of $C_3$ to $C_2$:\n$$\n\\frac{C_3}{C_2} \\;=\\; \\frac{(V/2)\\sin(\\gamma)}{(V/2)\\cos(\\gamma)} \\;=\\; \\tan(\\gamma).\n$$\nThe two-argument arctangent function, $\\operatorname{atan2}(C_3, C_2)$, is used to find $\\gamma$ in radians, which correctly resolves the quadrant based on the signs of $C_2$ and $C_3$. The result is then converted to degrees and normalized to the specified interval $[0, 360)$. An important note is that the energy offset $E_0$, which is not requested, can be calculated via $E_0 = C_1 - V/2 = C_1 - \\sqrt{C_2^2 + C_3^2}$.\n\nThe overall algorithm for each data scan is as follows:\n1. Initialize a minimum SSR value to a large number and a structure to hold the best-fit parameters.\n2. For each integer periodicity $n$ in the set $\\{1, 2, 3, 4, 6\\}$:\n    a. Construct the design matrix $\\mathbf{A}$ using the given angles $\\phi_i$.\n    b. Solve the linear least squares problem $\\mathbf{A}\\mathbf{c} \\approx \\mathbf{y}$ to obtain the coefficients $\\mathbf{c} = [C_1, C_2, C_3]^T$ and the corresponding sum of squared residuals.\n    c. Compare the current SSR with the stored minimum SSR. If the current SSR is lower, update the minimum SSR and store the current $n$ and the parameters $V$ and $\\gamma$ (calculated from $C_2$ and $C_3$) as the best-fit parameters so far.\n3. After iterating through all possible values of $n$, the stored parameters $(V, n, \\gamma)$ represent the best fit for the given data scan.\n\nThis procedure is repeated for all three test cases provided in the problem. This approach guarantees finding the global minimum of the SSR over the allowed parameter space because we exhaustively test each discrete value of $n$, and for each $n$, the linear least squares problem has a unique analytical solution.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the torsional parameters V, n, and gamma for three energy scans\n    by minimizing the sum of squared residuals.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Scan 1\n        np.array([12.5, 6.5, 0.5, 6.5, 12.5, 6.5, 0.5, 6.5, 12.5, 6.5, 0.5, 6.5]),\n        # Scan 2\n        np.array([3.55, 4.8, 3.55, 1.05, -0.2, 1.05, 3.55, 4.8, 3.55, 1.05, -0.2, 1.05]),\n        # Scan 3\n        np.array([1.2, 1.367468, 1.825, 2.45, 3.075, 3.532532, 3.7, 3.532532, 3.075, 2.45, 1.825, 1.367468]),\n    ]\n\n    # Dihedral angles in degrees\n    phi_deg = np.arange(0, 360, 30)\n    \n    # Convert angles to radians for numpy trigonometric functions\n    phi_rad = np.deg2rad(phi_deg)\n\n    # Allowed periodicities\n    n_values = [1, 2, 3, 4, 6]\n\n    final_results = []\n\n    for energy_scan in test_cases:\n        best_fit = {\n            'V': None, \n            'n': None, \n            'gamma': None, \n            'ssr': np.inf\n        }\n\n        for n in n_values:\n            # Construct the design matrix A for the linear least squares problem\n            # E = C1 * 1 + C2 * cos(n*phi) + C3 * sin(n*phi)\n            A = np.zeros((len(phi_rad), 3))\n            A[:, 0] = 1.0\n            A[:, 1] = np.cos(n * phi_rad)\n            A[:, 2] = np.sin(n * phi_rad)\n\n            # Solve the linear least squares problem Ac = E\n            # lstsq returns coefficients, sum of squared residuals, rank, and singular values\n            try:\n                coeffs, residuals, _, _ = np.linalg.lstsq(A, energy_scan, rcond=None)\n                \n                # The 'residuals' is an array. If it's empty, the system was not overdetermined\n                # or was rank deficient. In our case (12 points, 3 params), it should have one element.\n                # If there is a perfect fit, residuals array might be empty depending on numpy version.\n                # It's safer to calculate it if it is empty.\n                if residuals.size == 0:\n                     ssr = np.sum((energy_scan - A @ coeffs)**2)\n                else:\n                     ssr = residuals[0]\n\n            except np.linalg.LinAlgError:\n                # In case of a singular matrix, skip this n\n                continue\n\n            # Check if this fit is the best one so far\n            if ssr < best_fit['ssr']:\n                C1, C2, C3 = coeffs[0], coeffs[1], coeffs[2]\n\n                # Recover V and gamma from C2 and C3\n                # V = 2 * sqrt(C2^2 + C3^2)\n                V = 2.0 * np.sqrt(C2**2 + C3**2)\n                \n                # gamma = atan2(C3, C2)\n                gamma_rad = np.arctan2(C3, C2)\n                gamma_deg = np.degrees(gamma_rad)\n                \n                # Normalize gamma to be in [0, 360)\n                if gamma_deg < 0:\n                    gamma_deg += 360.0\n\n                best_fit['V'] = V\n                best_fit['n'] = n\n                best_fit['gamma'] = gamma_deg\n                best_fit['ssr'] = ssr\n\n        final_results.append([best_fit['V'], best_fit['n'], best_fit['gamma']])\n\n    # Format the output string as per the specification\n    result_strings = []\n    for v, n, g in final_results:\n        result_strings.append(f\"[{v:.6f},{n},{g:.6f}]\")\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(result_strings)}]\")\n\nsolve()\n```", "id": "2466268"}, {"introduction": "Once derived, torsional parameters allow us to model and predict the energetic landscape of molecules. This practice applies these concepts to one of the most classic examples in stereochemistry: the conformational preference of cyclohexane for the chair over the boat form [@problem_id:2466259]. By calculating the energy difference using a simplified model, you will see firsthand how the summation of torsional energy terms, a key component of a molecular mechanics force field, dictates the relative stability of different molecular shapes.", "problem": "Consider a simplified Molecular Mechanics (MM) model for a saturated six-membered ring in two conformations, a chair and a boat, using only bond-angle bending and torsional (dihedral) terms. The total potential energy is modeled as the sum of angle-bending and torsional terms over the ring. Specifically, use the following definitions for the two contributions:\n\n1. Angle-bending term for each bond angle: \n$$\nE_{\\text{angle}}(\\theta) = \\frac{1}{2} k_{\\theta} \\left(\\theta - \\theta_0\\right)^2,\n$$\nwhere $k_{\\theta}$ is the angle force constant and $\\theta_0$ is the equilibrium bond angle.\n\n2. Torsional term for each dihedral angle:\n$$\nE_{\\text{torsion}}(\\phi) = \\frac{V}{2}\\left(1 + \\cos(n \\phi - \\gamma)\\right),\n$$\nwhere $V$ is the torsional barrier amplitude, $n$ is the multiplicity, and $\\gamma$ is the phase.\n\nAssume a cyclohexane ring with $6$ internal bond angles and $6$ consecutive ring torsions. Model the chair and boat conformations by their ring torsion sets, given as follows (angles must be interpreted in radians):\n\n- Chair dihedrals: \n$$\n\\Phi_{\\text{chair}} = \\left\\{+\\frac{\\pi}{3}, -\\frac{\\pi}{3}, +\\frac{\\pi}{3}, -\\frac{\\pi}{3}, +\\frac{\\pi}{3}, -\\frac{\\pi}{3}\\right\\}.\n$$\n\n- Boat dihedrals:\n$$\n\\Phi_{\\text{boat}} = \\left\\{0, 0, +\\frac{\\pi}{3}, -\\frac{\\pi}{3}, +\\frac{\\pi}{3}, -\\frac{\\pi}{3}\\right\\}.\n$$\n\nAssume that in both conformations the $6$ ring bond angles are identical and equal to $\\theta^{\\ast} = 109.5^{\\circ}$, which must be converted to radians for energy evaluation. All energies must be expressed in $\\mathrm{kJ\\,mol^{-1}}$, all angles must be in radians.\n\nFor a given parameter set $(k_{\\theta}, \\theta_0, V, n, \\gamma)$, define the total energy of a conformation as\n$$\nE_{\\text{total}} = \\sum_{i=1}^{6} E_{\\text{angle}}(\\theta^{\\ast}) + \\sum_{j=1}^{6} E_{\\text{torsion}}(\\phi_j),\n$$\nand define the chair–boat energy difference as\n$$\n\\Delta E = E_{\\text{boat}} - E_{\\text{chair}}.\n$$\n\nUse the following test suite of parameter sets, all with energies in $\\mathrm{kJ\\,mol^{-1}}$, angles in radians, and $n$ dimensionless:\n\n- Test case $1$ (typical threefold torsion with staggered minima):\n  - $k_{\\theta} = 300.0$, $\\theta_0 = 109.5^{\\circ}$ (convert to radians),\n  - $V = 12.0$, $n = 3$, $\\gamma = 0.0$.\n\n- Test case $2$ (boundary case with no torsional barrier):\n  - $k_{\\theta} = 300.0$, $\\theta_0 = 109.5^{\\circ}$ (convert to radians),\n  - $V = 0.0$, $n = 3$, $\\gamma = 0.0$.\n\n- Test case $3$ (edge case with inverted torsional phase):\n  - $k_{\\theta} = 300.0$, $\\theta_0 = 109.5^{\\circ}$ (convert to radians),\n  - $V = 12.0$, $n = 3$, $\\gamma = \\pi$.\n\nLet the reference chair–boat energy difference be \n$$\n\\Delta E_{\\text{ref}} = 23.5 \\ \\mathrm{kJ\\,mol^{-1}},\n$$\nand define a tolerance \n$$\n\\tau = 2.0 \\ \\mathrm{kJ\\,mol^{-1}}.\n$$\n\nFor each test case, compute $\\Delta E$ and also a boolean value indicating whether $|\\Delta E - \\Delta E_{\\text{ref}}| \\le \\tau$. Your program must produce a single line of output containing the results aggregated for all test cases as a comma-separated list enclosed in square brackets, in the order:\n$$\n[\\Delta E_1, \\text{within}_1, \\Delta E_2, \\text{within}_2, \\Delta E_3, \\text{within}_3],\n$$\nwhere each $\\Delta E_i$ is a float in $\\mathrm{kJ\\,mol^{-1}}$ and each $\\text{within}_i$ is a boolean. No other output must be printed.", "solution": "The problem is subjected to validation and is deemed scientifically grounded, well-posed, and objective. It presents a simplified but standard exercise in computational molecular mechanics. We will therefore proceed with a complete solution.\n\nThe objective is to compute the energy difference, $\\Delta E$, between the boat and chair conformations of a six-membered ring. The total potential energy, $E_{\\text{total}}$, of a given conformation is defined as the sum of contributions from angle bending and torsional strain:\n$$\nE_{\\text{total}} = \\sum_{i=1}^{6} E_{\\text{angle}}(\\theta_i) + \\sum_{j=1}^{6} E_{\\text{torsion}}(\\phi_j)\n$$\nThe energy difference is then $\\Delta E = E_{\\text{boat}} - E_{\\text{chair}}$.\n\nFirst, let us analyze the contribution of the angle-bending term to this difference. The angle-bending energy for a single angle $\\theta$ is given by the harmonic potential:\n$$\nE_{\\text{angle}}(\\theta) = \\frac{1}{2} k_{\\theta} \\left(\\theta - \\theta_0\\right)^2\n$$\nThe problem states that for both the chair and boat conformations, all $6$ internal ring angles are identical and equal to $\\theta^{\\ast} = 109.5^{\\circ}$. The test cases specify the equilibrium bond angle to be $\\theta_0 = 109.5^{\\circ}$. For all calculations, angles must be converted to radians. Let $\\theta^{\\ast}_{\\text{rad}} = 109.5 \\times \\frac{\\pi}{180}$ and $\\theta_{0,\\text{rad}} = 109.5 \\times \\frac{\\pi}{180}$.\nThe difference term is $\\theta^{\\ast}_{\\text{rad}} - \\theta_{0,\\text{rad}} = 0$. Consequently, the energy contribution for each angle is:\n$$\nE_{\\text{angle}}(\\theta^{\\ast}) = \\frac{1}{2} k_{\\theta} (0)^2 = 0\n$$\nThe total angle-bending energy for both the chair and boat conformations is therefore zero.\n$$\nE_{\\text{angle\\_total}} = \\sum_{i=1}^{6} E_{\\text{angle}}(\\theta^{\\ast}) = 0\n$$\nAs this term is zero for both conformations, it does not contribute to the energy difference $\\Delta E$.\n$$\n\\Delta E = (E_{\\text{angle\\_total\\_boat}} + E_{\\text{torsion\\_total\\_boat}}) - (E_{\\text{angle\\_total\\_chair}} + E_{\\text{torsion\\_total\\_chair}}) = E_{\\text{torsion\\_total\\_boat}} - E_{\\text{torsion\\_total\\_chair}}\n$$\nThis simplifies the problem significantly, as we only need to consider the torsional energy contributions.\n\nThe torsional energy for a single dihedral angle $\\phi$ is given by:\n$$\nE_{\\text{torsion}}(\\phi) = \\frac{V}{2}\\left(1 + \\cos(n \\phi - \\gamma)\\right)\n$$\nThe total torsional energy for a conformation with a set of $6$ dihedral angles $\\{\\phi_j\\}$ is:\n$$\nE_{\\text{torsion\\_total}} = \\sum_{j=1}^{6} E_{\\text{torsion}}(\\phi_j) = \\sum_{j=1}^{6} \\frac{V}{2}\\left(1 + \\cos(n \\phi_j - \\gamma)\\right) = \\frac{V}{2} \\left(6 + \\sum_{j=1}^{6} \\cos(n \\phi_j - \\gamma)\\right)\n$$\nThe energy difference $\\Delta E$ can now be expressed as:\n$$\n\\Delta E = \\frac{V}{2} \\left[ \\left(6 + \\sum_{j=1}^{6} \\cos(n \\phi_{j,\\text{boat}} - \\gamma)\\right) - \\left(6 + \\sum_{j=1}^{6} \\cos(n \\phi_{j,\\text{chair}} - \\gamma)\\right) \\right]\n$$\n$$\n\\Delta E = \\frac{V}{2} \\left[ \\sum_{j=1}^{6} \\cos(n \\phi_{j,\\text{boat}} - \\gamma) - \\sum_{j=1}^{6} \\cos(n \\phi_{j,\\text{chair}} - \\gamma) \\right]\n$$\nThe dihedral angle sets are given as:\n$\\Phi_{\\text{chair}} = \\left\\{+\\frac{\\pi}{3}, -\\frac{\\pi}{3}, +\\frac{\\pi}{3}, -\\frac{\\pi}{3}, +\\frac{\\pi}{3}, -\\frac{\\pi}{3}\\right\\}$\n$\\Phi_{\\text{boat}} = \\left\\{0, 0, +\\frac{\\pi}{3}, -\\frac{\\pi}{3}, +\\frac{\\pi}{3}, -\\frac{\\pi}{3}\\right\\}$\n\nLet us evaluate the summation of cosines for each conformation. For the chair conformation:\n$$\n\\sum_{j=1}^{6} \\cos(n \\phi_{j,\\text{chair}} - \\gamma) = 3 \\cos\\left(n \\frac{\\pi}{3} - \\gamma\\right) + 3 \\cos\\left(-n \\frac{\\pi}{3} - \\gamma\\right)\n$$\nUsing the trigonometric identity $\\cos(A-B) + \\cos(-A-B) = 2\\cos(A)\\cos(B)$, with $A=n\\frac{\\pi}{3}$ and $B=\\gamma$, we get:\n$$\n\\sum_{j=1}^{6} \\cos(n \\phi_{j,\\text{chair}} - \\gamma) = 3 \\left(2 \\cos\\left(n\\frac{\\pi}{3}\\right)\\cos(\\gamma)\\right) = 6 \\cos\\left(n\\frac{\\pi}{3}\\right)\\cos(\\gamma)\n$$\nFor the boat conformation:\n$$\n\\sum_{j=1}^{6} \\cos(n \\phi_{j,\\text{boat}} - \\gamma) = 2 \\cos(n \\cdot 0 - \\gamma) + 2 \\cos\\left(n \\frac{\\pi}{3} - \\gamma\\right) + 2 \\cos\\left(-n \\frac{\\pi}{3} - \\gamma\\right)\n$$\n$$\n= 2\\cos(-\\gamma) + 2\\left(2\\cos\\left(n\\frac{\\pi}{3}\\right)\\cos(\\gamma)\\right) = 2\\cos(\\gamma) + 4\\cos\\left(n\\frac{\\pi}{3}\\right)\\cos(\\gamma)\n$$\nNow, we substitute these sums back into the expression for $\\Delta E$:\n$$\n\\Delta E = \\frac{V}{2} \\left[ \\left(2\\cos(\\gamma) + 4\\cos\\left(n\\frac{\\pi}{3}\\right)\\cos(\\gamma)\\right) - 6\\cos\\left(n\\frac{\\pi}{3}\\right)\\cos(\\gamma) \\right]\n$$\n$$\n\\Delta E = \\frac{V}{2} \\left[ 2\\cos(\\gamma) - 2\\cos\\left(n\\frac{\\pi}{3}\\right)\\cos(\\gamma) \\right] = V \\cos(\\gamma) \\left(1 - \\cos\\left(n\\frac{\\pi}{3}\\right)\\right)\n$$\nThis final, simplified formula can be used to evaluate $\\Delta E$ for each test case.\n\nWe also need to check if $|\\Delta E - \\Delta E_{\\text{ref}}| \\le \\tau$, where $\\Delta E_{\\text{ref}} = 23.5 \\ \\mathrm{kJ\\,mol^{-1}}$ and $\\tau = 2.0 \\ \\mathrm{kJ\\,mol^{-1}}$.\n\n**Test Case 1:**\n- Parameters: $k_{\\theta} = 300.0$, $\\theta_0 = 109.5^{\\circ}$, $V = 12.0$, $n = 3$, $\\gamma = 0.0$.\n- $\\Delta E_1 = 12.0 \\times \\cos(0) \\times \\left(1 - \\cos\\left(3 \\times \\frac{\\pi}{3}\\right)\\right) = 12.0 \\times 1 \\times (1 - \\cos(\\pi))$\n- $\\Delta E_1 = 12.0 \\times (1 - (-1)) = 12.0 \\times 2 = 24.0 \\ \\mathrm{kJ\\,mol^{-1}}$.\n- Check tolerance: $|\\Delta E_1 - \\Delta E_{\\text{ref}}| = |24.0 - 23.5| = 0.5$. Since $0.5 \\le 2.0$, the result is within tolerance.\n- Result: $\\Delta E_1 = 24.0$, $\\text{within}_1 = \\text{True}$.\n\n**Test Case 2:**\n- Parameters: $k_{\\theta} = 300.0$, $\\theta_0 = 109.5^{\\circ}$, $V = 0.0$, $n = 3$, $\\gamma = 0.0$.\n- With $V=0.0$, the torsional energy is zero for any dihedral angle. Thus, $\\Delta E_2 = 0.0 \\ \\mathrm{kJ\\,mol^{-1}}$.\n- Using the formula: $\\Delta E_2 = 0.0 \\times \\cos(0) \\times (1 - \\cos(\\pi)) = 0.0$.\n- Check tolerance: $|\\Delta E_2 - \\Delta E_{\\text{ref}}| = |0.0 - 23.5| = 23.5$. Since $23.5 > 2.0$, the result is not within tolerance.\n- Result: $\\Delta E_2 = 0.0$, $\\text{within}_2 = \\text{False}$.\n\n**Test Case 3:**\n- Parameters: $k_{\\theta} = 300.0$, $\\theta_0 = 109.5^{\\circ}$, $V = 12.0$, $n = 3$, $\\gamma = \\pi$.\n- $\\Delta E_3 = 12.0 \\times \\cos(\\pi) \\times \\left(1 - \\cos\\left(3 \\times \\frac{\\pi}{3}\\right)\\right) = 12.0 \\times (-1) \\times (1 - \\cos(\\pi))$\n- $\\Delta E_3 = -12.0 \\times (1 - (-1)) = -12.0 \\times 2 = -24.0 \\ \\mathrm{kJ\\,mol^{-1}}$.\n- Check tolerance: $|\\Delta E_3 - \\Delta E_{\\text{ref}}| = |-24.0 - 23.5| = |-47.5| = 47.5$. Since $47.5 > 2.0$, the result is not within tolerance.\n- Result: $\\Delta E_3 = -24.0$, $\\text{within}_3 = \\text{False}$.\n\nThe aggregated results are $[\\Delta E_1, \\text{within}_1, \\Delta E_2, \\text{within}_2, \\Delta E_3, \\text{within}_3]$.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the chair-boat energy difference for a simplified cyclohexane model\n    based on a series of test cases.\n    \"\"\"\n\n    # --- Problem Constants ---\n    # Reference chair–boat energy difference in kJ/mol\n    delta_e_ref = 23.5\n    # Tolerance for comparison in kJ/mol\n    tau = 2.0\n\n    # Dihedral angles for chair and boat conformations (in radians)\n    # The problem statement gives simplified sets. The analytical formula derived in the\n    # solution text simplifies the calculation and removes the need to iterate over these lists.\n    # phi_chair = [np.pi/3, -np.pi/3, np.pi/3, -np.pi/3, np.pi/3, -np.pi/3]\n    # phi_boat = [0, 0, np.pi/3, -np.pi/3, np.pi/3, -np.pi/3]\n\n    # --- Test Cases ---\n    # Each case is a dictionary of parameters:\n    # V: Torsional barrier amplitude (kJ/mol)\n    # n: Multiplicity (dimensionless)\n    # gamma: Phase offset (radians)\n    # Note: k_theta and theta_0 are not needed as the angle bending energy term\n    # cancels out when calculating the energy difference.\n    test_cases = [\n        {'V': 12.0, 'n': 3, 'gamma': 0.0},        # Test case 1\n        {'V': 0.0,  'n': 3, 'gamma': 0.0},        # Test case 2\n        {'V': 12.0, 'n': 3, 'gamma': np.pi},      # Test case 3\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        V = case['V']\n        n = case['n']\n        gamma = case['gamma']\n\n        # Simplified analytical formula for the chair-boat energy difference:\n        # delta_E = V * cos(gamma) * (1 - cos(n * pi/3))\n        # This formula is derived from the difference in torsional energy sums,\n        # as the angle bending energy is zero for both conformers.\n        delta_e = V * np.cos(gamma) * (1 - np.cos(n * np.pi / 3))\n\n        # Check if the calculated difference is within the tolerance of the reference value\n        is_within_tolerance = abs(delta_e - delta_e_ref) <= tau\n\n        results.append(delta_e)\n        results.append(is_within_tolerance)\n\n    # Format the final output as a single string per problem specification.\n    # The list is flattened and elements are converted to strings.\n    # e.g., [24.0, True, 0.0, False, -24.0, False]\n    # becomes \"[24.0,True,0.0,False,-24.0,False]\"\n    output_str = f\"[{','.join(map(str, results))}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2466259"}, {"introduction": "A key goal in force field design is 'transferability'—the idea that a parameter for a given chemical group should be applicable in many different molecular contexts. This practice challenges you to test this core assumption by devising a computational experiment to quantify the error introduced when torsional parameters from a small molecule are transferred to a long polymer chain [@problem_id:2466254]. You will implement standard error analysis metrics, providing a quantitative look at the successes and limitations of parameter transferability, a crucial concept in the practical application of molecular simulations.", "problem": "Write a complete program that implements a comparative torsional-energy calculation to quantify the error introduced by transferring propane-derived torsional parameters to a polyethylene backbone. Use the following first-principles definition for the torsional potential energy of a single dihedral angle. For one dihedral angle $\\phi$ (in radians), define the torsional energy as\n$$\nV(\\phi;\\{k_n,\\delta_n\\}_{n=1}^M) = \\sum_{n=1}^{M} k_n \\left(1 + \\cos\\!\\left(n\\phi - \\delta_n\\right)\\right),\n$$\nwhere $k_n$ are amplitudes in kilocalories per mole (kcal/mol), $\\delta_n$ are phase offsets in radians, and $M$ is the number of Fourier terms. For a chain with dihedral angles $\\{\\phi_i\\}_{i=1}^{L}$, the total torsional energy is\n$$\nE_{\\text{tot}} = \\sum_{i=1}^{L} V(\\phi_i;\\{k_n,\\delta_n\\}).\n$$\nConsider two parameter sets for the same functional form: a “transferred” set (propane-derived) and a “reference” set (polyethylene-derived). Use $M=3$ with parameters:\n- Transferred (propane-derived): $k_1 = 0.12$, $k_2 = 0.06$, $k_3 = 0.20$ (all in kcal/mol), and phases $\\delta_1 = 0$, $\\delta_2 = \\pi$, $\\delta_3 = 0$ (all in radians).\n- Reference (polyethylene-derived): $k_1 = 0.05$, $k_2 = 0.10$, $k_3 = 0.30$ (all in kcal/mol), and phases $\\delta_1 = 0$, $\\delta_2 = \\pi$, $\\delta_3 = 0$ (all in radians).\n\nFor any given chain conformation $\\{\\phi_i\\}_{i=1}^{L}$, define the per-dihedral energy error as\n$$\ne_i = V\\!\\left(\\phi_i;\\{k_n^{(\\text{trans})},\\delta_n\\}\\right) - V\\!\\left(\\phi_i;\\{k_n^{(\\text{ref})},\\delta_n\\}\\right),\n$$\nthe total energy error as\n$$\nE_{\\text{err}} = \\sum_{i=1}^{L} e_i \\quad \\text{(in kcal/mol)},\n$$\nthe root-mean-square per-dihedral error as\n$$\n\\varepsilon_{\\text{RMS}} = \\begin{cases}\n\\sqrt{\\dfrac{1}{L}\\sum_{i=1}^{L} e_i^2} & \\text{if } L>0,\\\\\n0 & \\text{if } L=0,\n\\end{cases}\n$$\nand the maximum absolute per-dihedral error as\n$$\n\\varepsilon_{\\max} = \\begin{cases}\n\\max_{1\\le i \\le L} |e_i| & \\text{if } L>0,\\\\\n0 & \\text{if } L=0.\n\\end{cases}\n$$\nAll angles must be treated in radians, and all energies must be in kilocalories per mole (kcal/mol).\n\nTest suite of chain conformations (each item is a list of dihedral angles $\\{\\phi_i\\}$ in radians):\n- Test $1$: $\\{0\\}$.\n- Test $2$: $\\{\\pi, \\tfrac{\\pi}{3}, -\\tfrac{\\pi}{3}\\}$.\n- Test $3$: the sequence $\\{\\pi, \\tfrac{\\pi}{3}, -\\tfrac{\\pi}{3}\\}$ repeated $10$ times (total of $30$ dihedrals).\n- Test $4$: $\\{-\\pi, \\pi, -\\pi, \\pi\\}$.\n- Test $5$: the empty list $\\{\\}$.\n\nFor each test, compute and report the three quantities $E_{\\text{err}}$, $\\varepsilon_{\\text{RMS}}$, and $\\varepsilon_{\\max}$, in that order. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the tests and metrics\n$$\n[E_{\\text{err}}^{(1)}, \\varepsilon_{\\text{RMS}}^{(1)}, \\varepsilon_{\\max}^{(1)}, E_{\\text{err}}^{(2)}, \\varepsilon_{\\text{RMS}}^{(2)}, \\varepsilon_{\\max}^{(2)}, \\dots, E_{\\text{err}}^{(5)}, \\varepsilon_{\\text{RMS}}^{(5)}, \\varepsilon_{\\max}^{(5)}],\n$$\nwith each float rounded to six decimal places in fixed-point notation. Angles must be interpreted in radians, and energies must be in kilocalories per mole (kcal/mol).", "solution": "The problem presented is a standard exercise in computational chemistry concerning the validation of force field parameters. It is scientifically grounded, mathematically well-posed, and free of ambiguity. It shall be solved.\n\nThe objective is to quantify the error that arises from transferring torsional potential parameters derived for a small molecule (propane) to a larger system (polyethylene). This error is assessed by comparing the torsional energy calculated with the \"transferred\" parameters against a \"reference\" calculation using parameters specifically derived for polyethylene.\n\nThe fundamental quantity is the torsional potential energy for a single dihedral angle $\\phi$, given by the Fourier series:\n$$\nV(\\phi;\\{k_n,\\delta_n\\}_{n=1}^M) = \\sum_{n=1}^{M} k_n \\left(1 + \\cos\\!\\left(n\\phi - \\delta_n\\right)\\right)\n$$\nHere, $M=3$. The problem defines two parameter sets: $\\{k_n^{(\\text{trans})}, \\delta_n\\}$ and $\\{k_n^{(\\text{ref})}, \\delta_n\\}$. The phase shifts $\\delta_n$ are identical for both sets.\n\nThe core of the analysis is the per-dihedral energy error, $e_i$, for a given dihedral angle $\\phi_i$. This is the difference between the energy computed with the transferred parameters and the energy computed with the reference parameters.\n$$\ne_i = V(\\phi_i;\\{k_n^{(\\text{trans})},\\delta_n\\}) - V(\\phi_i;\\{k_n^{(\\text{ref})},\\delta_n\\})\n$$\nBy the linearity of summation, we can combine the terms:\n$$\ne_i = \\sum_{n=1}^{M} k_n^{(\\text{trans})} \\left(1 + \\cos(n\\phi_i - \\delta_n)\\right) - \\sum_{n=1}^{M} k_n^{(\\text{ref})} \\left(1 + \\cos(n\\phi_i - \\delta_n)\\right)\n$$\n$$\ne_i = \\sum_{n=1}^{M} \\left(k_n^{(\\text{trans})} - k_n^{(\\text{ref})}\\right) \\left(1 + \\cos(n\\phi_i - \\delta_n)\\right)\n$$\nLet us define the difference in force constants as $\\Delta k_n = k_n^{(\\text{trans})} - k_n^{(\\text{ref})}$. The per-dihedral error is then a more compact function dependent only on these differences and the angle $\\phi_i$:\n$$\ne_i(\\phi_i) = \\sum_{n=1}^{3} \\Delta k_n \\left(1 + \\cos(n\\phi_i - \\delta_n)\\right)\n$$\nThis expression is the basis for all subsequent calculations.\n\nWe are given the following parameters:\n- Transferred: $k_1^{(\\text{trans})} = 0.12$, $k_2^{(\\text{trans})} = 0.06$, $k_3^{(\\text{trans})} = 0.20$ kcal/mol.\n- Reference: $k_1^{(\\text{ref})} = 0.05$, $k_2^{(\\text{ref})} = 0.10$, $k_3^{(\\text{ref})} = 0.30$ kcal/mol.\n- Phases: $\\delta_1 = 0$, $\\delta_2 = \\pi$, $\\delta_3 = 0$ radians.\n\nFrom these, we compute the difference parameters $\\Delta k_n$:\n$$\n\\Delta k_1 = 0.12 - 0.05 = 0.07 \\, \\text{kcal/mol}\n$$\n$$\n\\Delta k_2 = 0.06 - 0.10 = -0.04 \\, \\text{kcal/mol}\n$$\n$$\n\\Delta k_3 = 0.20 - 0.30 = -0.10 \\, \\text{kcal/mol}\n$$\nThe trigonometric identity $\\cos(x - \\pi) = -\\cos(x)$ simplifies the term for $n=2$. Substituting the $\\Delta k_n$ and $\\delta_n$ values into the expression for $e_i(\\phi_i)$ yields the final analytical form for the per-dihedral error:\n$$\ne_i(\\phi_i) = \\Delta k_1(1 + \\cos(\\phi_i - \\delta_1)) + \\Delta k_2(1 + \\cos(2\\phi_i - \\delta_2)) + \\Delta k_3(1 + \\cos(3\\phi_i - \\delta_3))\n$$\n$$\ne_i(\\phi_i) = 0.07(1 + \\cos(\\phi_i)) - 0.04(1 + \\cos(2\\phi_i - \\pi)) - 0.10(1 + \\cos(3\\phi_i))\n$$\n$$\ne_i(\\phi_i) = 0.07(1 + \\cos(\\phi_i)) - 0.04(1 - \\cos(2\\phi_i)) - 0.10(1 + \\cos(3\\phi_i))\n$$\nThis function will be implemented to compute the error for any given angle $\\phi_i$.\n\nThe algorithmic procedure for each test case, given a chain conformation specified by a list of $L$ dihedral angles $\\{\\phi_i\\}_{i=1}^L$, is as follows:\n$1.$ Handle the trivial case where the list of angles is empty ($L=0$). As per the problem definition, $E_{\\text{err}}$, $\\varepsilon_{\\text{RMS}}$, and $\\varepsilon_{\\max}$ are all $0$.\n$2.$ For a non-empty list ($L>0$):\n   a. Compute a vector of per-dihedral errors, $\\mathbf{e} = [e_1, e_2, \\dots, e_L]$, by applying the function $e_i(\\phi_i)$ to each angle $\\phi_i$ in the input list.\n   b. Calculate the total energy error, $E_{\\text{err}}$, by summing the elements of the error vector:\n      $$\n      E_{\\text{err}} = \\sum_{i=1}^{L} e_i\n      $$\n   c. Calculate the root-mean-square per-dihedral error, $\\varepsilon_{\\text{RMS}}$, from the mean of the squared errors:\n      $$\n      \\varepsilon_{\\text{RMS}} = \\sqrt{\\frac{1}{L}\\sum_{i=1}^{L} e_i^2}\n      $$\n   d. Calculate the maximum absolute per-dihedral error, $\\varepsilon_{\\max}$, by finding the maximum absolute value in the error vector:\n      $$\n      \\varepsilon_{\\max} = \\max_{1\\le i \\le L} |e_i|\n      $$\nThis procedure is systematically applied to each test case. The implementation will be a direct translation of this logic into code, using numerical libraries for efficient vector operations. The final results are collected and formatted to the specified precision.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the torsional energy error calculation problem by implementing\n    the defined metrics and applying them to a suite of test cases.\n    \"\"\"\n    # Define the first-principles parameters for the torsional potential.\n    # The parameters are for M=3 Fourier terms.\n    k_trans = np.array([0.12, 0.06, 0.20]) # kcal/mol\n    k_ref = np.array([0.05, 0.10, 0.30]) # kcal/mol\n    \n    # Phases are the same for both sets: delta_1=0, delta_2=pi, delta_3=0.\n    # The problem can be simplified by pre-calculating the difference in k values.\n    # e_i = sum over n of (k_n_trans - k_n_ref) * (1 + cos(n*phi_i - delta_n))\n    delta_k = k_trans - k_ref\n\n    def calculate_per_dihedral_error(phi: float) -> float:\n        \"\"\"\n        Calculates the per-dihedral energy error for a single dihedral angle phi.\n        e(phi) = 0.07*(1+cos(phi)) - 0.04*(1-cos(2*phi)) - 0.10*(1+cos(3*phi))\n        \"\"\"\n        cos_phi = np.cos(phi)\n        cos_2phi = np.cos(2 * phi)\n        cos_3phi = np.cos(3 * phi)\n        \n        # The terms correspond to n=1, 2, 3.\n        # For n=1, delta_n=0:  1 + cos(phi)\n        # For n=2, delta_n=pi: 1 + cos(2*phi - pi) = 1 - cos(2*phi)\n        # For n=3, delta_n=0:  1 + cos(3*phi)\n        \n        term1 = delta_k[0] * (1.0 + cos_phi)\n        term2 = delta_k[1] * (1.0 - cos_2phi)\n        term3 = delta_k[2] * (1.0 + cos_3phi)\n        \n        return term1 + term2 + term3\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        [0.0],\n        [np.pi, np.pi / 3.0, -np.pi / 3.0],\n        list(np.tile([np.pi, np.pi / 3.0, -np.pi / 3.0], 10)),\n        [-np.pi, np.pi, -np.pi, np.pi],\n        [],\n    ]\n\n    all_results = []\n    \n    for phis in test_cases:\n        L = len(phis)\n        \n        # Handle the case for L=0 as specified in the problem statement.\n        if L == 0:\n            e_err, eps_rms, eps_max = 0.0, 0.0, 0.0\n        else:\n            # Calculate the list of per-dihedral errors for all angles in the conformation.\n            errors = np.array([calculate_per_dihedral_error(phi) for phi in phis])\n            \n            # 1. Total energy error (E_err)\n            e_err = np.sum(errors)\n            \n            # 2. Root-mean-square per-dihedral error (epsilon_RMS)\n            eps_rms = np.sqrt(np.mean(np.square(errors)))\n            \n            # 3. Maximum absolute per-dihedral error (epsilon_max)\n            eps_max = np.max(np.abs(errors))\n            \n        all_results.extend([e_err, eps_rms, eps_max])\n\n    # Format the final results list into the required string format.\n    # All float values must be rounded to six decimal places in fixed-point notation.\n    formatted_results = [f\"{val:.6f}\" for val in all_results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2466254"}]}