{"hands_on_practices": [{"introduction": "In the world of drug discovery, designing the ideal molecule is a balancing act between optimizing for potency and ensuring favorable physiological properties. This practice simulates this common trade-off by tasking you with minimizing a molecule's conformational energy while ensuring its lipophilicity, represented by the $\\mathrm{LogP}$ value, stays within an acceptable \"drug-like\" range. This exercise provides a clear, tangible example of how an external requirement acts as a constraint, potentially shifting the optimal solution away from the unconstrained minimum. [@problem_id:2453478]", "problem": "In a simplified, physically grounded drug design scenario, consider a continuous series of analogs parameterized by a single descriptor $x$ that quantifies the hydrophobic substituent extent on a fixed scaffold. Assume the octanol/water partition coefficient (LogP) follows an empirical linear free-energy relationship\n$$\n\\mathrm{LogP}(x) = \\ell_{0} + \\ell_{1} x,\n$$\nwith $\\ell_{0} = 4.2$ and $\\ell_{1} = 1.0$. The intramolecular potential energy of the molecule under a molecular mechanics surrogate near a reference analog is modeled by a harmonic expansion\n$$\nE(x) = E_{\\mathrm{ref}} + \\kappa \\left(x - x^{\\star}\\right)^{2},\n$$\nwith $E_{\\mathrm{ref}} = 10$ kJ/mol, $\\kappa = 50$ kJ/mol, and $x^{\\star} = 1.3$. Design a candidate that minimizes $E(x)$ subject to the drug-likeness constraint that the LogP value must satisfy $\\mathrm{LogP}(x) \\leq 5$.\n\nWhat is the minimized energy value under this constraint? Round your answer to $4$ significant figures. Express the final energy in kJ/mol. Do not include units in your final boxed answer.", "solution": "The problem as stated constitutes a valid, well-posed exercise in constrained optimization, grounded in simplified but standard principles of computational chemistry. We are provided with all necessary information to proceed with a rigorous solution.\n\nThe task is to find the minimum value of the potential energy function $E(x)$, subject to a constraint on the lipophilicity descriptor $\\mathrm{LogP}(x)$.\n\nThe objective function is the potential energy, given by the harmonic model:\n$$ E(x) = E_{\\mathrm{ref}} + \\kappa \\left(x - x^{\\star}\\right)^{2} $$\nSubstituting the provided constants, $E_{\\mathrm{ref}} = 10$ kJ/mol, $\\kappa = 50$ kJ/mol, and $x^{\\star} = 1.3$, we have:\n$$ E(x) = 10 + 50 \\left(x - 1.3\\right)^{2} $$\nThis is a quadratic function of the descriptor $x$. The coefficient of the quadratic term is positive ($\\kappa = 50 > 0$), so the parabola opens upwards, and the function possesses a single global minimum. To find the unconstrained minimum, we differentiate $E(x)$ with respect to $x$ and set the derivative to zero:\n$$ \\frac{dE}{dx} = 2\\kappa(x - x^{\\star}) = 2(50)(x - 1.3) = 100(x - 1.3) $$\nSetting $\\frac{dE}{dx} = 0$ gives $100(x - 1.3) = 0$, which yields the unconstrained minimizer $x_{\\text{unconstrained}} = 1.3$. At this point, the unconstrained minimum energy is $E(1.3) = 10 + 50(1.3 - 1.3)^{2} = 10$ kJ/mol.\n\nNext, we must analyze the constraint on the system. The drug-likeness constraint is given as $\\mathrm{LogP}(x) \\leq 5$. The function $\\mathrm{LogP}(x)$ is defined by the linear relationship:\n$$ \\mathrm{LogP}(x) = \\ell_{0} + \\ell_{1} x $$\nUsing the given parameters $\\ell_{0} = 4.2$ and $\\ell_{1} = 1.0$, the constraint becomes:\n$$ 4.2 + 1.0x \\leq 5 $$\nSolving this inequality for $x$ defines the feasible region for the descriptor:\n$$ x \\leq 5 - 4.2 $$\n$$ x \\leq 0.8 $$\nThe feasible region is the set of all $x$ in the interval $(-\\infty, 0.8]$.\n\nThe optimization problem is to minimize $E(x)$ for $x$ in this feasible region. We must now compare the location of the unconstrained minimum, $x_{\\text{unconstrained}} = 1.3$, with the feasible region. Since $1.3 > 0.8$, the unconstrained minimum lies outside the feasible region.\n\nThe function $E(x)$ is a parabola with its vertex (minimum) at $x = 1.3$. For all $x < 1.3$, the function $E(x)$ is monotonically decreasing as $x$ increases. The feasible region, $x \\leq 0.8$, lies entirely within this domain of monotonic behavior. To find the minimum value of $E(x)$ within the feasible region, we must select the point in the feasible region that is closest to the unconstrained minimizer $x = 1.3$. This point is the boundary of the feasible region, $x_{\\text{opt}} = 0.8$. At this point, the constraint is said to be \"active.\"\n\nFinally, we calculate the constrained minimum energy, $E_{\\text{min}}$, by evaluating the energy function at $x_{\\text{opt}} = 0.8$:\n$$ E_{\\text{min}} = E(0.8) = 10 + 50(0.8 - 1.3)^{2} $$\n$$ E_{\\text{min}} = 10 + 50(-0.5)^{2} $$\n$$ E_{\\text{min}} = 10 + 50(0.25) $$\n$$ E_{\\text{min}} = 10 + 12.5 $$\n$$ E_{\\text{min}} = 22.5 \\, \\text{kJ/mol} $$\nThe problem requires the answer to be rounded to $4$ significant figures. The value $22.5$ is written as $22.50$ to satisfy this requirement.", "answer": "$$\\boxed{22.50}$$", "id": "2453478"}, {"introduction": "Moving from abstract models to the physical world, this practice addresses the three-dimensional structure of molecules. You will minimize the energy of a small molecule using a classical molecular mechanics force field, which accounts for the energy stored in stretched bonds and bent angles. The central task is to apply an inequality constraint that models steric hindrance—the fundamental principle that atoms cannot occupy the same space—demonstrating a crucial application of constrained optimization in realistic molecular geometry optimization. [@problem_id:2453470]", "problem": "You are given the task of formulating and solving a constrained molecular conformation optimization problem from first principles. The objective is to minimize a classical molecular mechanics energy under a geometric constraint relevant to non-bonded Hydrogen atoms. All distances must be handled in Angstroms, denoted by $\\mathrm{\\AA}$, and all energies must be handled in kilojoules per mole, denoted by $\\mathrm{kJ\\ mol^{-1}}$. Angles provided as parameters are specified in degrees; all trigonometric computations must be carried out in radians.\n\nThe total potential energy for a conformation with atom positions $\\{\\mathbf{r}_i\\}_{i=1}^{N}$, where $\\mathbf{r}_i \\in \\mathbb{R}^3$, is defined as the sum of harmonic bond and harmonic angle terms:\n$$\nE(\\{\\mathbf{r}_i\\}) \\;=\\; \\sum_{(i,j)\\in \\mathcal{B}} \\frac{1}{2} k_{b,ij}\\left(\\lVert \\mathbf{r}_i - \\mathbf{r}_j \\rVert - r_{0,ij}\\right)^2 \\;+\\; \\sum_{(i,j,k)\\in \\mathcal{A}} \\frac{1}{2} k_{\\theta,ijk}\\left(\\theta_{ijk} - \\theta_{0,ijk}\\right)^2,\n$$\nwhere $\\mathcal{B}$ is the set of bonded pairs, $\\mathcal{A}$ is the set of defined angles, $k_{b,ij}$ are bond force constants in $\\mathrm{kJ\\ mol^{-1}\\ \\AA^{-2}}$, $r_{0,ij}$ are equilibrium bond lengths in $\\mathrm{\\AA}$, $k_{\\theta,ijk}$ are angle force constants in $\\mathrm{kJ\\ mol^{-1}\\ rad^{-2}}$, and $\\theta_{ijk}$ is the angle at atom $j$ formed by vectors $(\\mathbf{r}_i-\\mathbf{r}_j)$ and $(\\mathbf{r}_k-\\mathbf{r}_j)$, measured in radians. For any dot product computation, use\n$$\n\\theta_{ijk} \\;=\\; \\arccos \\!\\left( \\frac{(\\mathbf{r}_i-\\mathbf{r}_j)\\cdot(\\mathbf{r}_k-\\mathbf{r}_j)}{\\lVert \\mathbf{r}_i-\\mathbf{r}_j \\rVert \\,\\lVert \\mathbf{r}_k-\\mathbf{r}_j \\rVert} \\right),\n$$\nwith the argument of $\\arccos$ numerically clipped to the interval $[-1,1]$.\n\nThe geometric constraint is: for every pair of Hydrogen atoms that are not directly bonded to each other, their separation must satisfy\n$$\n\\lVert \\mathbf{r}_p - \\mathbf{r}_q \\rVert \\;\\ge\\; 2.0,\n$$\nwith distances in $\\mathrm{\\AA}$. Here, “non-bonded Hydrogen pair” means both atoms have element type Hydrogen and the pair is not an element of $\\mathcal{B}$.\n\nYour program must solve the minimization of $E(\\{\\mathbf{r}_i\\})$ subject to these inequality constraints for each test case below. There must be no user input. The output must be a single line containing a list of floating-point numbers, one per test case, each equal to the minimized total energy in $\\mathrm{kJ\\ mol^{-1}}$, rounded to exactly three decimal places.\n\nTest suite (all coordinates are in $\\mathrm{\\AA}$; all angle parameters $\\theta_0$ are in degrees; all trigonometric computations must use radians):\n\n- Test case 1 (Diatomic Hydrogen, $\\mathrm{H_2}$):\n  - Atoms (index: element): $0:\\ \\mathrm{H}$, $1:\\ \\mathrm{H}$.\n  - Bonds $\\mathcal{B}$: $(0,1)$ with $k_b = 450.0$, $r_0 = 0.74$.\n  - Angles $\\mathcal{A}$: none.\n  - Initial coordinates $\\mathbf{r}_0$: $\\mathbf{r}_0(0)=(0.0,\\,0.0,\\,0.0)$, $\\mathbf{r}_0(1)=(1.0,\\,0.0,\\,0.0)$.\n\n- Test case 2 (Water, $\\mathrm{H_2O}$):\n  - Atoms: $0:\\ \\mathrm{O}$, $1:\\ \\mathrm{H}$, $2:\\ \\mathrm{H}$.\n  - Bonds $\\mathcal{B}$: $(0,1)$ with $k_b = 450.0$, $r_0 = 0.96$; $(0,2)$ with $k_b = 450.0$, $r_0 = 0.96$.\n  - Angles $\\mathcal{A}$: $(1,0,2)$ with $k_{\\theta} = 55.0$, $\\theta_0 = 104.5$.\n  - Initial coordinates:\n    - Let $r = 0.96$, $\\theta_0 = 104.5$ degrees.\n    - $\\mathbf{r}_0(0)=(0.0,\\,0.0,\\,0.0)$,\n      $\\mathbf{r}_0(1)=(r,\\,0.0,\\,0.0)$,\n      $\\mathbf{r}_0(2)=(r\\cos\\theta_0,\\,r\\sin\\theta_0,\\,0.0)$, with $\\theta_0$ converted to radians for computing the trigonometric functions.\n  - Constraint applies to the non-bonded Hydrogen pair $(1,2)$: their distance must be at least $2.0$.\n\n- Test case 3 (Linear $\\mathrm{H-C-C-H}$):\n  - Atoms: $0:\\ \\mathrm{H}$, $1:\\ \\mathrm{C}$, $2:\\ \\mathrm{C}$, $3:\\ \\mathrm{H}$.\n  - Bonds $\\mathcal{B}$: $(0,1)$ with $k_b = 300.0$, $r_0 = 1.09$; $(1,2)$ with $k_b = 300.0$, $r_0 = 1.54$; $(2,3)$ with $k_b = 300.0$, $r_0 = 1.09$.\n  - Angles $\\mathcal{A}$: $(0,1,2)$ with $k_{\\theta} = 20.0$, $\\theta_0 = 180.0$; $(1,2,3)$ with $k_{\\theta} = 20.0$, $\\theta_0 = 180.0$.\n  - Initial coordinates (colinear along the $x$-axis):\n    - $\\mathbf{r}_0(0)=(0.0,\\,0.0,\\,0.0)$,\n      $\\mathbf{r}_0(1)=(1.09,\\,0.0,\\,0.0)$,\n      $\\mathbf{r}_0(2)=(1.09+1.54,\\,0.0,\\,0.0)$,\n      $\\mathbf{r}_0(3)=(1.09+1.54+1.09,\\,0.0,\\,0.0)$.\n  - Constraint applies to the non-bonded Hydrogen pair $(0,3)$: their distance must be at least $2.0$.\n\nYour program should produce a single line of output containing the minimized energies for the three test cases as a comma-separated list enclosed in square brackets, e.g., \"[e1,e2,e3]\". Each entry must be the minimized total energy for the corresponding test case in $\\mathrm{kJ\\ mol^{-1}}$, rounded to exactly three decimal places. No other text should be printed.", "solution": "The problem presented is a constrained non-linear optimization task originating from the field of computational chemistry. The objective is to determine the minimum potential energy conformation of several small molecules, subject to specific geometric constraints on inter-atomic distances.\n\nBefore proceeding, a validation of the problem statement is required.\n\n**Step 1: Extracted Givens**\n\n1.  **Objective Function (Potential Energy)**:\n    $$\n    E(\\{\\mathbf{r}_i\\}) \\;=\\; \\sum_{(i,j)\\in \\mathcal{B}} \\frac{1}{2} k_{b,ij}\\left(\\lVert \\mathbf{r}_i - \\mathbf{r}_j \\rVert - r_{0,ij}\\right)^2 \\;+\\; \\sum_{(i,j,k)\\in \\mathcal{A}} \\frac{1}{2} k_{\\theta,ijk}\\left(\\theta_{ijk} - \\theta_{0,ijk}\\right)^2\n    $$\n    where:\n    - $\\{\\mathbf{r}_i\\}$ are the $3D$ coordinates of atom $i$.\n    - $\\mathcal{B}$ is the set of bonded atom pairs.\n    - $\\mathcal{A}$ is the set of atom triplets defining an angle.\n    - $k_{b,ij}$ is the bond force constant in $\\mathrm{kJ\\ mol^{-1}\\ \\AA^{-2}}$.\n    - $r_{0,ij}$ is the equilibrium bond length in $\\mathrm{\\AA}$.\n    - $k_{\\theta,ijk}$ is the angle force constant in $\\mathrm{kJ\\ mol^{-1}\\ rad^{-2}}$.\n    - $\\theta_{0,ijk}$ is the equilibrium angle in radians (converted from degrees provided in parameters).\n    - $\\theta_{ijk} = \\arccos \\!\\left( \\frac{(\\mathbf{r}_i-\\mathbf{r}_j)\\cdot(\\mathbf{r}_k-\\mathbf{r}_j)}{\\lVert \\mathbf{r}_i-\\mathbf{r}_j \\rVert \\,\\lVert \\mathbf{r}_k-\\mathbf{r}_j \\rVert} \\right)$, with the argument clipped to $[-1, 1]$.\n\n2.  **Constraint**: For any pair of Hydrogen atoms $(p, q)$ that are not in the set of bonds $\\mathcal{B}$, their distance must satisfy:\n    $$\n    \\lVert \\mathbf{r}_p - \\mathbf{r}_q \\rVert \\;\\ge\\; 2.0\\ \\mathrm{\\AA}\n    $$\n\n3.  **Test Cases**: Three specific molecular systems are provided, each with defined atoms, elements, bonding topology, force field parameters ($k_b, r_0, k_\\theta, \\theta_0$), and initial coordinates.\n\n4.  **Output Format**: A single-line list of minimized energies in $\\mathrm{kJ\\ mol^{-1}}$ for each test case, rounded to three decimal places.\n\n**Step 2: Validation**\n\nThe problem is analyzed against the required criteria:\n- **Scientifically Grounded**: The potential energy function is a simplified classical molecular mechanics force field, consisting of harmonic bond stretching and angle bending terms. This is a standard and well-established model used for molecular modeling. The constraint on non-bonded Hydrogen distances represents a rudimentary model for steric repulsion (Pauli repulsion), which is physically sound. All parameters provided are within realistic ranges for the specified molecules.\n- **Well-Posed**: The problem is a standard non-linear programming (NLP) problem: minimize a continuous and differentiable function (except at points of coordinate collision, which are prevented by the repulsive nature of the potential, and at the boundaries of the `arccos` domain, which are handled by numerical clipping) subject to a set of inequality constraints. A solution is expected to exist.\n- **Objective and Complete**: The problem is stated using precise mathematical definitions and objective language. All necessary data (atomic constitution, parameters, initial geometries) are provided for each test case.\n\n**Step 3: Verdict**\n\nThe problem is deemed **valid**. It is a well-defined, scientifically grounded, and computationally solvable problem in constrained optimization.\n\n**Solution Methodology**\n\nThe problem will be solved using numerical optimization. The vector of all atomic coordinates, $\\mathbf{x} \\in \\mathbb{R}^{3N}$ for a system of $N$ atoms, serves as the variable for the optimization. The objective function is the potential energy $E(\\mathbf{x})$. The constraints are of the form $g_p(\\mathbf{x}) \\le 0$, which we can write as $d_{\\mathrm{min}} - \\lVert \\mathbf{r}_p - \\mathbf{r}_q \\rVert \\le 0$ for each constrained pair $(p,q)$, where $d_{\\mathrm{min}} = 2.0\\ \\mathrm{\\AA}$.\n\nWe will employ the Sequential Least Squares Programming (SLSQP) algorithm, as implemented in the `scipy.optimize.minimize` function. This method is suitable for non-linear optimization problems with inequality constraints.\n\nThe implementation requires a Python function to compute the total energy $E(\\mathbf{x})$ and a set of functions representing the constraints.\n\n**Analysis of Test Cases**\n\n1.  **Test Case 1 (Diatomic Hydrogen, $\\mathrm{H}_2$)**: The system consists of two Hydrogen atoms, $(0,1)$, connected by a bond. The potential energy is solely a bond stretching term: $E = \\frac{1}{2} k_{b,01} (\\lVert \\mathbf{r}_0 - \\mathbf{r}_1 \\rVert - r_{0,01})^2$. The minimum of this function occurs when the bond length equals the equilibrium length, $\\lVert \\mathbf{r}_0 - \\mathbf{r}_1 \\rVert = r_{0,01} = 0.74\\ \\mathrm{\\AA}$, at which point the energy is $E=0$. The constraint rule applies to non-bonded Hydrogen pairs. Since the only pair of Hydrogens is bonded, there are no constraints. The optimization is unconstrained, and the expected minimum energy is precisely $0.0\\ \\mathrm{kJ\\ mol^{-1}}$.\n\n2.  **Test Case 2 (Water, $\\mathrm{H_2O}$)**: The system consists of one Oxygen atom ($0$) and two Hydrogen atoms ($1, 2$). The unconstrained minimum energy conformation would have bond lengths $d_{O-H} = 0.96\\ \\mathrm{\\AA}$ and angle $\\theta_{H-O-H} = 104.5^\\circ$. In this geometry, the distance between the two Hydrogen atoms, calculated using the law of cosines, is $d_{H-H} = \\sqrt{2 \\cdot (0.96)^2 \\cdot (1 - \\cos(104.5^\\circ))} \\approx 1.518\\ \\mathrm{\\AA}$. This distance violates the constraint $d_{H-H} \\ge 2.0\\ \\mathrm{\\AA}$. Therefore, the constraint is active. The optimizer must find a new geometry that satisfies $d_{H-H} \\ge 2.0\\ \\mathrm{\\AA}$ while minimizing the resulting strain energy in the bonds and angle. The final energy will be greater than zero.\n\n3.  **Test Case 3 (Linear $\\mathrm{H-C-C-H}$)**: The system is configured to be linear, with equilibrium angles of $180^\\circ$. At the unconstrained energy minimum, all bond lengths are at their equilibrium values ($1.09\\ \\mathrm{\\AA}$, $1.54\\ \\mathrm{\\AA}$, $1.09\\ \\mathrm{\\AA}$) and the molecule is perfectly linear. The distance between the two non-bonded Hydrogen atoms ($0, 3$) is the sum of the equilibrium bond lengths: $d_{H-H} = 1.09 + 1.54 + 1.09 = 3.72\\ \\mathrm{\\AA}$. This distance is greater than the required minimum of $2.0\\ \\mathrm{\\AA}$. The constraint is therefore inactive, as it is already satisfied at the global unconstrained minimum. The optimizer will converge to this configuration, where the energy is $0.0\\ \\mathrm{kJ\\ mol^{-1}}$. The provided initial coordinates already represent this minimum energy state.\n\nThe following Python code implements this strategy to solve for the minimum energy for each test case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef solve():\n    \"\"\"\n    Formulates and solves the constrained molecular optimization problem for three test cases.\n    \"\"\"\n\n    # --- Test Case Data ---\n\n    # Initial coordinates for Water (Test Case 2)\n    r_oh_h2o = 0.96\n    theta_hoh_deg = 104.5\n    theta_hoh_rad = np.deg2rad(theta_hoh_deg)\n    h2o_initial_coords = np.array([\n        [0.0, 0.0, 0.0],\n        [r_oh_h2o, 0.0, 0.0],\n        [r_oh_h2o * np.cos(theta_hoh_rad), r_oh_h2o * np.sin(theta_hoh_rad), 0.0]\n    ])\n\n    # Initial coordinates for Linear H-C-C-H (Test Case 3)\n    hcch_initial_coords = np.array([\n        [0.0, 0.0, 0.0],\n        [1.09, 0.0, 0.0],\n        [1.09 + 1.54, 0.0, 0.0],\n        [1.09 + 1.54 + 1.09, 0.0, 0.0]\n    ])\n\n    test_cases = [\n        {\n            \"name\": \"Diatomic Hydrogen\",\n            \"atoms\": {\"H\": [0, 1]},\n            \"bonds\": [(0, 1, 450.0, 0.74)],\n            \"angles\": [],\n            \"initial_coords\": np.array([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0]]),\n        },\n        {\n            \"name\": \"Water\",\n            \"atoms\": {\"O\": [0], \"H\": [1, 2]},\n            \"bonds\": [(0, 1, 450.0, 0.96), (0, 2, 450.0, 0.96)],\n            \"angles\": [(1, 0, 2, 55.0, 104.5)],\n            \"initial_coords\": h2o_initial_coords,\n        },\n        {\n            \"name\": \"Linear H-C-C-H\",\n            \"atoms\": {\"H\": [0, 3], \"C\": [1, 2]},\n            \"bonds\": [\n                (0, 1, 300.0, 1.09),\n                (1, 2, 300.0, 1.54),\n                (2, 3, 300.0, 1.09),\n            ],\n            \"angles\": [\n                (0, 1, 2, 20.0, 180.0),\n                (1, 2, 3, 20.0, 180.0)\n            ],\n            \"initial_coords\": hcch_initial_coords,\n        }\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        # --- Objective Function ---\n        def objective_function(x, bonds, angles):\n            coords = x.reshape(-1, 3)\n            energy = 0.0\n\n            # Bond energy calculation\n            for i, j, k_b, r_0 in bonds:\n                dist = np.linalg.norm(coords[i] - coords[j])\n                energy += 0.5 * k_b * (dist - r_0)**2\n\n            # Angle energy calculation\n            for i, j, k, k_theta, theta_0_deg in angles:\n                v_ji = coords[i] - coords[j]\n                v_jk = coords[k] - coords[j]\n                norm_ji = np.linalg.norm(v_ji)\n                norm_jk = np.linalg.norm(v_jk)\n                \n                if norm_ji == 0 or norm_jk == 0:\n                    return np.inf # Penalize collapsed atoms with infinite energy\n\n                cos_theta = np.dot(v_ji, v_jk) / (norm_ji * norm_jk)\n                cos_theta_clipped = np.clip(cos_theta, -1.0, 1.0)\n                theta_rad = np.arccos(cos_theta_clipped)\n                theta_0_rad = np.deg2rad(theta_0_deg)\n                energy += 0.5 * k_theta * (theta_rad - theta_0_rad)**2\n            \n            return energy\n\n        # --- Constraints ---\n        constraints = []\n        if 'H' in case['atoms']:\n            h_indices = case['atoms']['H']\n            bonded_h_pairs = set()\n            for i, j, _, _ in case['bonds']:\n                if i in h_indices and j in h_indices:\n                    bonded_h_pairs.add(tuple(sorted((i, j))))\n\n            for i in range(len(h_indices)):\n                for j in range(i + 1, len(h_indices)):\n                    p, q = h_indices[i], h_indices[j]\n                    if tuple(sorted((p, q))) not in bonded_h_pairs:\n                        # Constraint is dist >= 2.0, which scipy expects as dist - 2.0 >= 0\n                        def constr_func(x, p=p, q=q):\n                            coords = x.reshape(-1, 3)\n                            dist = np.linalg.norm(coords[p] - coords[q])\n                            return dist - 2.0\n                        \n                        constraints.append({'type': 'ineq', 'fun': constr_func})\n\n        # --- Optimization ---\n        x0 = case['initial_coords'].flatten()\n        bonds = case['bonds']\n        angles = case['angles']\n        \n        opt_result = minimize(\n            objective_function, \n            x0, \n            args=(bonds, angles), \n            method='SLSQP', \n            constraints=constraints\n        )\n\n        results.append(opt_result.fun)\n    \n    # Final print statement in the exact required format.\n    formatted_results = \",\".join([f\"{r:.3f}\" for r in results])\n    print(f\"[{formatted_results}]\")\n\nsolve()\n```", "id": "2453470"}, {"introduction": "This advanced practice immerses you in a core task of computational catalysis: modeling a chemical reaction at a surface. You will construct a complex potential energy surface (PES) for the dissociation of a nitrogen molecule on an iron catalyst by combining distinct physical models for bonding, surface interaction, and lateral corrugation. By systematically constraining the position of one atom while optimizing the other, you will trace the minimum energy path for the reaction, a powerful technique for understanding reaction mechanisms and determining activation energies. [@problem_id:2453413]", "problem": "You are asked to construct and minimize a physically motivated two-dimensional potential energy model for the dissociation of molecular nitrogen on an iron surface, formulated as a constrained optimization problem. Consider a two-atom molecule with nitrogen atoms labeled $\\mathrm{N}_1$ and $\\mathrm{N}_2$ in the plane defined by Cartesian coordinates $(x,z)$, where $z$ is the perpendicular distance from a flat, structureless iron surface located at $z=0$. The coordinate $y$ is constrained to be identically zero for both atoms. The atom $\\mathrm{N}_1$ is fixed at position $(x_1,z_1)=(0,h)$ for a given height parameter $h>0$, and the atom $\\mathrm{N}_2$ is free to move at position $(x_2,z_2)$ subject to bound constraints specified below.\n\nThe total potential energy $E_{\\mathrm{tot}}$ is the sum of the intramolecular bond energy between $\\mathrm{N}_1$ and $\\mathrm{N}_2$, the interaction of each nitrogen atom with the surface, and a weak laterally periodic surface corrugation term. All energies must be expressed in electronvolts (eV) and all distances in ångströms (Å). Define the following components:\n\n- The intramolecular nitrogen–nitrogen interaction is modeled by a Morse potential\n$$\nV_{\\mathrm{NN}}(r) \\;=\\; D_e \\left(1 - e^{-a_m\\,(r - r_e)}\\right)^2 \\;-\\; D_e,\n$$\nwhere $r = \\sqrt{(x_2 - x_1)^2 + (z_2 - z_1)^2}$ is the internuclear separation in the plane, with parameters $D_e = 9.76\\,\\mathrm{eV}$, $r_e = 1.10\\,\\mathrm{\\AA}$, and $a_m = 1.8\\,\\mathrm{\\AA}^{-1}$.\n\n- The interaction of a single nitrogen atom at height $z$ with the surface is modeled by a $(9\\!-\\!3)$-type potential\n$$\nV_s(z) \\;=\\; \\frac{A}{z^9} \\;-\\; \\frac{B}{z^3},\n$$\nwith $A = 394.6\\,\\mathrm{eV}\\,\\mathrm{\\AA}^9$ and $B = 4.735\\,\\mathrm{eV}\\,\\mathrm{\\AA}^3$.\n\n- The lateral corrugation of the surface potential felt by a nitrogen atom at $(x,z)$ is modeled by\n$$\nV_c(x,z) \\;=\\; C \\, e^{-\\alpha z}\\,\\cos\\!\\left(\\frac{2\\pi x}{a}\\right),\n$$\nwith $C = 0.05\\,\\mathrm{eV}$, $\\alpha = 1.0\\,\\mathrm{\\AA}^{-1}$, and $a = 2.5\\,\\mathrm{\\AA}$.\n\nThe total energy for a given $h$ is therefore\n$$\nE_{\\mathrm{tot}}(x_2,z_2; h) \\;=\\; V_{\\mathrm{NN}}\\!\\left(\\sqrt{(x_2 - 0)^2 + (z_2 - h)^2}\\right) \\;+\\; V_s(h) \\;+\\; V_s(z_2) \\;+\\; V_c(0,h) \\;+\\; V_c(x_2,z_2).\n$$\n\nThe optimization variables are $x_2$ and $z_2$. The constraints are simple bounds\n$$\nx_{\\min} \\le x_2 \\le x_{\\max}, \\quad z_{\\min} \\le z_2 \\le z_{\\max},\n$$\nwith $x_{\\min} = -10.0\\,\\mathrm{\\AA}$, $x_{\\max} = 10.0\\,\\mathrm{\\AA}$, $z_{\\min} = 0.80\\,\\mathrm{\\AA}$, and $z_{\\max} = 8.00\\,\\mathrm{\\AA}$. The fixed atom is at $(0,h)$ with no lateral displacement.\n\nFor each specified value of $h$, define the constrained minimum energy\n$$\nE^\\star(h) \\;=\\; \\min_{(x_2,z_2)} \\; E_{\\mathrm{tot}}(x_2,z_2; h) \\quad \\text{subject to the bounds on } x_2 \\text{ and } z_2.\n$$\n\nTest suite. Compute $E^\\star(h)$, in electronvolts, for the following six values of $h$:\n- $h = 1.20\\,\\mathrm{\\AA}$,\n- $h = 2.50\\,\\mathrm{\\AA}$,\n- $h = 3.00\\,\\mathrm{\\AA}$,\n- $h = 4.00\\,\\mathrm{\\AA}$,\n- $h = 6.00\\,\\mathrm{\\AA}$,\n- $h = 8.00\\,\\mathrm{\\AA}$.\n\nYour program must compute $E^\\star(h)$ for each $h$ in the test suite and produce a single line of output containing the six results as a comma-separated list enclosed in square brackets. Each number must be rounded to exactly six digits after the decimal point, in eV, for example, $[-9.123456,-9.234567,\\dots]$.", "solution": "The problem presented is a valid, well-posed exercise in constrained optimization within the domain of computational chemistry. It asks for the minimum of a physically motivated potential energy surface (PES) for a diatomic molecule near a solid surface. This is a common task in modeling chemical reactions, such as dissociation, at interfaces.\n\nThe problem is to find the minimum value of the total potential energy $E_{\\mathrm{tot}}$ for a system consisting of a nitrogen molecule ($\\mathrm{N}_2$) interacting with an iron surface. The position of one nitrogen atom, $\\mathrm{N}_1$, is fixed at $(x_1, z_1) = (0, h)$ for a given parameter $h$. The position of the second nitrogen atom, $\\mathrm{N}_2$, at $(x_2, z_2)$ is subject to optimization within specified bounds.\n\nThe objective function to be minimized is the total potential energy $E_{\\mathrm{tot}}(x_2, z_2; h)$, which is a function of the optimization variables $x_2$ and $z_2$, and is parameterized by $h$. The function is defined as the sum of several energy contributions:\n$$\nE_{\\mathrm{tot}}(x_2,z_2; h) \\;=\\; V_{\\mathrm{NN}}(r) \\;+\\; V_s(h) \\;+\\; V_s(z_2) \\;+\\; V_c(0,h) \\;+\\; V_c(x_2,z_2)\n$$\nwhere:\n1.  $V_{\\mathrm{NN}}(r)$ is the intramolecular Morse potential between $\\mathrm{N}_1$ and $\\mathrm{N}_2$. It is a function of the internuclear distance $r = \\sqrt{x_2^2 + (z_2 - h)^2}$. The Morse potential provides a realistic description of the bond energy, including its dissociation limit.\n    $$\n    V_{\\mathrm{NN}}(r) \\;=\\; D_e \\left(1 - e^{-a_m\\,(r - r_e)}\\right)^2 \\;-\\; D_e\n    $$\n2.  $V_s(z)$ is the potential describing the interaction of a single nitrogen atom with the iron surface, modeled as a $(9-3)$ potential. It accounts for both the short-range repulsion and long-range attraction. This term appears twice: once for the fixed atom $\\mathrm{N}_1$ at height $h$, $V_s(h)$, and once for the mobile atom $\\mathrm{N}_2$ at height $z_2$, $V_s(z_2)$.\n    $$\n    V_s(z) \\;=\\; \\frac{A}{z^9} \\;-\\; \\frac{B}{z^3}\n    $$\n3.  $V_c(x,z)$ is a weak periodic potential representing the lateral corrugation of the surface. This term accounts for the fact that the surface is not perfectly smooth at the atomic scale, leading to preferred adsorption sites. It also appears twice, for $\\mathrm{N}_1$ at $(0,h)$ and $\\mathrm{N}_2$ at $(x_2,z_2)$.\n    $$\n    V_c(x,z) \\;=\\; C \\, e^{-\\alpha z}\\,\\cos\\!\\left(\\frac{2\\pi x}{a}\\right)\n    $$\n\nThe optimization is subject to the box constraints:\n$$\n-10.0\\,\\mathrm{\\AA} \\le x_2 \\le 10.0\\,\\mathrm{\\AA} \\quad \\text{and} \\quad 0.80\\,\\mathrm{\\AA} \\le z_2 \\le 8.00\\,\\mathrm{\\AA}\n$$\n\nFor each value of the parameter $h$ in the test suite, we must solve the following constrained optimization problem for the minimum energy $E^\\star(h)$:\n$$\nE^\\star(h) \\;=\\; \\min_{x_2, z_2} \\; E_{\\mathrm{tot}}(x_2, z_2; h)\n$$\n\nThe total energy function $E_{\\mathrm{tot}}$ is a non-convex function of its variables $(x_2, z_2)$. This means it may possess multiple local minima within the search domain. Standard gradient-based optimization algorithms are guaranteed only to find a local minimum, which may depend on the initial guess for $(x_2, z_2)$. To find the global minimum, a more robust strategy is required.\n\nThe chosen method is a multi-start optimization. This strategy involves running a local optimization algorithm from a large number of different starting points distributed across the feasible domain. The global minimum is then taken as the minimum of all the local minima found. This significantly increases the probability of locating the true global minimum of the non-convex PES.\n\nThe algorithm proceeds as follows for each specified value of $h$:\n1.  Define the objective function representing $E_{\\mathrm{tot}}(x_2, z_2; h)$ in a form suitable for a numerical solver.\n2.  Define the box constraints for $x_2$ and $z_2$.\n3.  Create a grid of initial guess points $(x_{2,0}, z_{2,0})$ that covers the entire bounded search domain. A sufficiently dense grid ensures that the basins of attraction of all significant local minima are sampled.\n4.  For each initial guess, perform a local minimization using a quasi-Newton method, such as `L-BFGS-B`, which is well-suited for problems with box constraints. The `scipy.optimize.minimize` function provides an implementation of this algorithm.\n5.  The lowest energy value found across all the individual optimization runs is taken as the best approximation to the global minimum energy, $E^\\star(h)$.\n\nThis procedure is repeated for each value of $h$ given in the test suite. The final results are collected and formatted as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef solve():\n    \"\"\"\n    Constructs and minimizes a potential energy model for N2 dissociation on an Fe surface.\n    \"\"\"\n\n    # Define physical parameters from the problem statement.\n    params = {\n        'De': 9.76,      # eV\n        're': 1.10,      # Å\n        'am': 1.8,       # Å^-1\n        'A': 394.6,      # eV·Å^9\n        'B': 4.735,      # eV·Å^3\n        'C': 0.05,       # eV\n        'alpha': 1.0,    # Å^-1\n        'a': 2.5,        # Å\n    }\n\n    # Define the components of the potential energy.\n    def v_nn(r, De, am, re):\n        \"\"\"Morse potential for N-N interaction.\"\"\"\n        return De * (1 - np.exp(-am * (r - re)))**2 - De\n\n    def v_s(z, A, B):\n        \"\"\"(9-3) potential for atom-surface interaction.\"\"\"\n        return A / z**9 - B / z**3\n\n    def v_c(x, z, C, alpha, a):\n        \"\"\"Lateral corrugation potential.\"\"\"\n        return C * np.exp(-alpha * z) * np.cos(2 * np.pi * x / a)\n\n    # Define the total potential energy function to be minimized.\n    def total_energy(coords, h, p):\n        \"\"\"\n        Calculates the total potential energy of the system.\n        coords: A list or tuple [x2, z2] of the mobile atom N2.\n        h: The fixed height of atom N1.\n        p: A dictionary of physical parameters.\n        \"\"\"\n        x2, z2 = coords\n        x1, z1 = 0.0, h\n\n        # Internuclear distance\n        r = np.sqrt((x2 - x1)**2 + (z2 - z1)**2)\n\n        # Calculate energy components\n        E_nn = v_nn(r, p['De'], p['am'], p['re'])\n        \n        # Interactions of N1 with the surface (constant for a given h)\n        E_s1 = v_s(z1, p['A'], p['B'])\n        E_c1 = v_c(x1, z1, p['C'], p['alpha'], p['a'])\n\n        # Interactions of N2 with the surface\n        E_s2 = v_s(z2, p['A'], p['B'])\n        E_c2 = v_c(x2, z2, p['C'], p['alpha'], p['a'])\n\n        return E_nn + E_s1 + E_s2 + E_c1 + E_c2\n\n    # Test suite values for h\n    h_values = [1.20, 2.50, 3.00, 4.00, 6.00, 8.00]\n\n    # Constraints for the optimization variables (x2, z2)\n    bounds = ((-10.0, 10.0), (0.80, 8.00))\n\n    # Multi-start grid parameters\n    # A grid of starting points is used to increase the chance of finding the global minimum.\n    num_x_starts = 21  # Number of starting points for x2\n    num_z_starts = 16  # Number of starting points for z2\n    x_starts = np.linspace(bounds[0][0], bounds[0][1], num_x_starts)\n    z_starts = np.linspace(bounds[1][0], bounds[1][1], num_z_starts)\n    \n    results = []\n    \n    for h in h_values:\n        min_energy_for_h = float('inf')\n        \n        # Multi-start optimization loop\n        for x0 in x_starts:\n            for z0 in z_starts:\n                initial_guess = [x0, z0]\n                \n                # Perform the local minimization\n                res = minimize(\n                    fun=total_energy,\n                    x0=initial_guess,\n                    args=(h, params),\n                    method='L-BFGS-B',\n                    bounds=bounds\n                )\n                \n                # Update the minimum energy found for the current h\n                if res.success and res.fun  min_energy_for_h:\n                    min_energy_for_h = res.fun\n        \n        results.append(min_energy_for_h)\n\n    # Format the final output according to problem specification.\n    # Each value must be rounded to exactly six decimal places.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2453413"}]}