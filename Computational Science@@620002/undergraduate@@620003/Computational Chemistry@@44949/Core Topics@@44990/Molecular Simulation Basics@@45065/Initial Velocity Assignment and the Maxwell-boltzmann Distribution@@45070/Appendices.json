{"hands_on_practices": [{"introduction": "Before diving into complex code, let's sharpen our understanding of the Maxwell-Boltzmann (MB) distribution itself. A common point of confusion arises from the non-linear relationship between a particle's speed and its kinetic energy. This practice challenges you to investigate whether the kinetic energy calculated from the most probable speed is the same as the most probable kinetic energy, a subtle but crucial distinction that highlights the importance of rigorous statistical analysis [@problem_id:2456595].", "problem": "An ideal monatomic gas at temperature $T$ consists of particles of mass $m$ moving in a $3$-dimensional container at thermal equilibrium. Using the three-dimensional Maxwell–Boltzmann (MB) distribution, consider two distinct quantities:\n- the kinetic energy obtained by inserting the most probable speed $v_p$ into $E = \\tfrac{1}{2} m v^2$, and\n- the most probable kinetic energy, defined as the mode of the kinetic-energy probability density.\n\nDetermine the ratio $R$ of these two energies, with\n$$\nR \\equiv \\frac{\\tfrac{1}{2} m v_p^2}{E_{\\text{mode}}}.\n$$\nExpress your final answer as a single pure number. No rounding is required.", "solution": "The most probable speed $v_p$ is defined as the speed that maximizes the Maxwell–Boltzmann (MB) speed probability density function (PDF) in $3$ dimensions. The $3$-dimensional MB speed PDF for an ideal gas at temperature $T$ is\n$$\nf(v) = 4 \\pi \\left( \\frac{m}{2 \\pi k_B T} \\right)^{3/2} v^2 \\exp\\!\\left( - \\frac{m v^2}{2 k_B T} \\right),\n$$\nwhere $k_B$ is the Boltzmann constant, $m$ is the particle mass, and $T$ is the absolute temperature. To find $v_p$, we maximize $f(v)$ with respect to $v$. Maximizing $f(v)$ is equivalent to maximizing $\\ln f(v)$:\n$$\n\\ln f(v) = \\ln\\!\\left[ 4 \\pi \\left( \\frac{m}{2 \\pi k_B T} \\right)^{3/2} \\right] + 2 \\ln v - \\frac{m v^2}{2 k_B T}.\n$$\nDifferentiate with respect to $v$ and set to zero:\n$$\n\\frac{\\mathrm{d}}{\\mathrm{d}v} \\ln f(v) = \\frac{2}{v} - \\frac{m}{k_B T} v = 0.\n$$\nSolving for $v$ gives\n$$\nv_p = \\sqrt{ \\frac{2 k_B T}{m} }.\n$$\nThe kinetic energy obtained by inserting $v_p$ into $E = \\tfrac{1}{2} m v^2$ is\n$$\nE\\big|_{v_p} = \\frac{1}{2} m v_p^2 = \\frac{1}{2} m \\left( \\frac{2 k_B T}{m} \\right) = k_B T.\n$$\n\nNext, we determine the most probable kinetic energy $E_{\\text{mode}}$, which is the mode of the kinetic-energy PDF $g(E)$. The transformation between speed and kinetic energy is $E = \\tfrac{1}{2} m v^2$, equivalently $v = \\sqrt{2E/m}$, with Jacobian\n$$\n\\frac{\\mathrm{d}v}{\\mathrm{d}E} = \\frac{1}{\\sqrt{2 m E}}.\n$$\nThe kinetic-energy PDF follows from the change of variables:\n$$\ng(E) = f(v) \\left| \\frac{\\mathrm{d}v}{\\mathrm{d}E} \\right| \\quad \\text{with} \\quad v = \\sqrt{\\frac{2E}{m}}.\n$$\nSubstituting $f(v)$ and simplifying yields the standard $3$-dimensional MB energy PDF,\n$$\ng(E) = \\frac{2}{\\sqrt{\\pi}} \\frac{1}{(k_B T)^{3/2}} E^{1/2} \\exp\\!\\left( - \\frac{E}{k_B T} \\right), \\quad E \\ge 0.\n$$\nTo find the mode, maximize $g(E)$ over $E \\ge 0$. Again maximize $\\ln g(E)$:\n$$\n\\ln g(E) = \\ln\\!\\left( \\frac{2}{\\sqrt{\\pi}} \\right) - \\frac{3}{2} \\ln(k_B T) + \\frac{1}{2} \\ln E - \\frac{E}{k_B T}.\n$$\nDifferentiate with respect to $E$ and set to zero:\n$$\n\\frac{\\mathrm{d}}{\\mathrm{d}E} \\ln g(E) = \\frac{1}{2E} - \\frac{1}{k_B T} = 0 \\;\\;\\Longrightarrow\\;\\; E_{\\text{mode}} = \\frac{1}{2} k_B T.\n$$\n\nTherefore, the ratio $R$ of the kinetic energy evaluated at the most probable speed to the most probable kinetic energy is\n$$\nR = \\frac{E\\big|_{v_p}}{E_{\\text{mode}}} = \\frac{k_B T}{\\tfrac{1}{2} k_B T} = 2.\n$$\n\nThis demonstrates that the kinetic energy computed from the most probable speed is not the same as the most probable kinetic energy; the former is larger by a factor of $2$. The discrepancy arises because the nonlinear transformation $E = \\tfrac{1}{2} m v^2$ does not preserve the location of the mode when mapping between the speed PDF and the energy PDF.", "answer": "$$\\boxed{2}$$", "id": "2456595"}, {"introduction": "This exercise forms the core of our hands-on practice, guiding you through the process of building a velocity generator from first principles. You will derive the Maxwell-Boltzmann distribution for a two-dimensional system—a common scenario for studying surface phenomena—and then write a program to sample velocities according to this distribution. By validating your implementation against analytical predictions, you will bridge the gap between abstract statistical mechanics theory and the practical code needed for molecular simulations [@problem_id:2456611].", "problem": "You are asked to derive, implement, and validate a physically consistent initial velocity assignment procedure for atoms confined to a two-dimensional surface using the Maxwell–Boltzmann (MB) framework. Your goal is to (i) derive the two-dimensional MB speed distribution from first principles and (ii) write a complete program that samples initial velocities consistent with this distribution and validates the sampling by comparing statistics against analytical predictions.\n\nYour derivation must begin from fundamental base principles and definitions that are appropriate for equilibrium statistical mechanics and classical molecular motion:\n- The Boltzmann factor for kinetic energy, proportional to $\\exp\\!\\left(-E/(k_\\mathrm{B} T)\\right)$, where $E$ is the energy, $k_\\mathrm{B}$ is the Boltzmann constant, and $T$ is the absolute temperature.\n- The idealized kinetic energy of a particle of mass $m$ moving with velocity components $\\{v_x, v_y\\}$ in two dimensions is $E = \\tfrac{1}{2} m \\left(v_x^2 + v_y^2\\right)$.\n- Independence of orthogonal degrees of freedom (DOF) in the kinetic energy for a classical ideal gas at equilibrium.\n- Change-of-variables for probability density functions, including the Jacobian determinant.\n\nDo not use, cite, or assume the target two-dimensional MB speed distribution or any intermediate closed-form distribution for speed; you must derive it explicitly from the above base. Your derivation must lead to a normalized speed distribution in two dimensions and the analytic expression for the mean speed $\\langle v \\rangle$.\n\nAfter the derivation, implement a complete, runnable program that:\n- Samples initial velocities $\\{v_x, v_y\\}$ for $N$ atoms residing on a two-dimensional surface at absolute temperature $T$ and mass $m$, consistent with the derived two-dimensional MB speed distribution.\n- Uses a pseudo-random number generator with a fixed seed $314159$ for reproducibility.\n- Computes the following validation metrics for each test case:\n  1. The sample mean speed $\\overline{v}$ in $\\mathrm{m/s}$.\n  2. The absolute error in $\\mathrm{m/s}$ between $\\overline{v}$ and the theoretical mean speed $\\langle v \\rangle$ implied by your derivation.\n  3. The Kolmogorov–Smirnov (KS) statistic comparing the empirical speed distribution to the analytical two-dimensional MB speed distribution for speed (expressed equivalently as a Rayleigh distribution with an appropriate scale).\n  4. A boolean indicating whether equipartition holds per DOF within relative tolerance $\\varepsilon = 5\\times 10^{-3}$, i.e., whether both $\\left|\\frac{\\tfrac{1}{2} m \\overline{v_x^2} - \\tfrac{1}{2} k_\\mathrm{B} T}{\\tfrac{1}{2} k_\\mathrm{B} T}\\right| \\le \\varepsilon$ and $\\left|\\frac{\\tfrac{1}{2} m \\overline{v_y^2} - \\tfrac{1}{2} k_\\mathrm{B} T}{\\tfrac{1}{2} k_\\mathrm{B} T}\\right| \\le \\varepsilon$.\n\nUse the following constants and units:\n- Boltzmann constant $k_\\mathrm{B} = 1.380\\,649 \\times 10^{-23}\\ \\mathrm{J/K}$.\n- Mass $m$ in $\\mathrm{kg}$, temperature $T$ in $\\mathrm{K}$, velocity in $\\mathrm{m/s}$, kinetic energy in $\\mathrm{J}$.\n\nTest suite:\n- Case $1$: $m = 6.633\\,520\\,9 \\times 10^{-26}\\ \\mathrm{kg}$, $T = 300$, $N = 100\\,000$.\n- Case $2$: $m = 1.673\\,557\\,5 \\times 10^{-27}\\ \\mathrm{kg}$, $T = 300$, $N = 100\\,000$.\n- Case $3$: $m = 6.633\\,520\\,9 \\times 10^{-26}\\ \\mathrm{kg}$, $T = 1$, $N = 100\\,000$.\n\nProgram requirements:\n- The program must be self-contained and require no input.\n- For each case, compute the four validation metrics listed above. For floats, round to $6$ decimal places. For the boolean, print either $\\mathrm{True}$ or $\\mathrm{False}$.\n- Final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with entries ordered as\n  $[\\overline{v}_1,\\ \\Delta_1,\\ D_1,\\ b_1,\\ \\overline{v}_2,\\ \\Delta_2,\\ D_2,\\ b_2,\\ \\overline{v}_3,\\ \\Delta_3,\\ D_3,\\ b_3]$,\n  where $\\overline{v}_i$ is the sample mean speed for case $i$ in $\\mathrm{m/s}$, $\\Delta_i$ is the absolute error in $\\mathrm{m/s}$, $D_i$ is the KS statistic, and $b_i$ is the equipartition boolean.\n\nExpress all speeds in $\\mathrm{m/s}$ and energies in $\\mathrm{J}$. Angles are not used. Percentages, if any, must be expressed as decimals (e.g., $0.03$ for three percent).\n\nYour final answer must be a single complete program that adheres to the specified execution environment and produces exactly one line as described.", "solution": "The problem posed is valid. It is scientifically grounded in the principles of statistical mechanics, well-posed with all necessary information provided, and objective in its formulation. We shall proceed with the derivation and implementation as requested.\n\n**1. Derivation of the Two-Dimensional Maxwell-Boltzmann Distribution**\n\n**1.1. Velocity Component Distribution**\nWe begin with the fundamental principles of classical statistical mechanics for an ideal gas at thermal equilibrium. The probability of a particle having a specific state is proportional to the Boltzmann factor, $\\exp(-E/(k_\\mathrm{B} T))$, where $E$ is the energy of the state, $k_\\mathrm{B}$ is the Boltzmann constant, and $T$ is the absolute temperature. For a particle of mass $m$ confined to a two-dimensional surface, the kinetic energy $E$ is given in terms of its Cartesian velocity components $\\{v_x, v_y\\}$ as:\n$$\nE = \\frac{1}{2}m(v_x^2 + v_y^2)\n$$\nThe velocity components $v_x$ and $v_y$ represent independent, orthogonal degrees of freedom. Therefore, the joint probability density function (PDF) for the velocity vector, $f(v_x, v_y)$, can be expressed as the product of the individual PDFs for each component, $f_x(v_x)$ and $f_y(v_y)$. The energy can be decomposed as $E = E_x + E_y$, where $E_x = \\frac{1}{2}mv_x^2$ and $E_y = \\frac{1}{2}mv_y^2$.\nThe PDF for the $v_x$ component is thus proportional to the Boltzmann factor for its corresponding energy:\n$$\nf_x(v_x) \\propto \\exp\\left(-\\frac{E_x}{k_\\mathrm{B} T}\\right) = \\exp\\left(-\\frac{m v_x^2}{2 k_\\mathrm{B} T}\\right)\n$$\nTo obtain a normalized PDF, we introduce a normalization constant $A$ and enforce the condition that the total probability is unity:\n$$\n\\int_{-\\infty}^{\\infty} f_x(v_x) dv_x = A \\int_{-\\infty}^{\\infty} \\exp\\left(-\\frac{m v_x^2}{2 k_\\mathrm{B} T}\\right) dv_x = 1\n$$\nThis is a standard Gaussian integral of the form $\\int_{-\\infty}^{\\infty} e^{-ax^2} dx = \\sqrt{\\pi/a}$. With $a = m/(2 k_\\mathrm{B} T)$, the integral evaluates to $\\sqrt{2\\pi k_\\mathrm{B} T/m}$.\nSolving for $A$:\n$$\nA = \\left(\\frac{m}{2\\pi k_\\mathrm{B} T}\\right)^{1/2}\n$$\nThe normalized PDF for $v_x$ is a Gaussian distribution with mean $0$ and variance $\\sigma_v^2 = k_\\mathrm{B} T/m$:\n$$\nf_x(v_x) = \\left(\\frac{m}{2\\pi k_\\mathrm{B} T}\\right)^{1/2} \\exp\\left(-\\frac{m v_x^2}{2 k_\\mathrm{B} T}\\right)\n$$\nBy symmetry, the PDF for $v_y$ is identical. The joint PDF for the velocity components is:\n$$\nf(v_x, v_y) = f_x(v_x) f_y(v_y) = \\frac{m}{2\\pi k_\\mathrm{B} T} \\exp\\left(-\\frac{m(v_x^2 + v_y^2)}{2 k_\\mathrm{B} T}\\right)\n$$\n\n**1.2. Speed Distribution**\nTo find the distribution of the speed $v = \\sqrt{v_x^2 + v_y^2}$, we transform the velocity components from Cartesian coordinates $(v_x, v_y)$ to polar coordinates $(v, \\theta)$, where $v$ is the speed ($v \\ge 0$) and $\\theta$ is the direction angle. The transformation is given by $v_x = v \\cos\\theta$ and $v_y = v \\sin\\theta$.\nThe differential area element transforms as $dv_x dv_y = |J| dv d\\theta$, where $J$ is the Jacobian determinant of the transformation:\n$$\nJ = \\det \\begin{pmatrix} \\frac{\\partial v_x}{\\partial v} & \\frac{\\partial v_x}{\\partial \\theta} \\\\ \\frac{\\partial v_y}{\\partial v} & \\frac{\\partial v_y}{\\partial \\theta} \\end{pmatrix} = \\det \\begin{pmatrix} \\cos\\theta & -v\\sin\\theta \\\\ \\sin\\theta & v\\cos\\theta \\end{pmatrix} = v\\cos^2\\theta + v\\sin^2\\theta = v\n$$\nThe joint PDF in polar coordinates, $g(v, \\theta)$, is found by substituting the coordinate transformation into $f(v_x, v_y)$ and multiplying by the Jacobian:\n$$\ng(v, \\theta) dv d\\theta = f(v\\cos\\theta, v\\sin\\theta) v dv d\\theta = \\frac{m}{2\\pi k_\\mathrm{B} T} \\exp\\left(-\\frac{mv^2}{2 k_\\mathrm{B} T}\\right) v dv d\\theta\n$$\nThe PDF for speed, $P(v)$, is obtained by integrating $g(v, \\theta)$ over all possible angles $\\theta \\in [0, 2\\pi]$:\n$$\nP(v) = \\int_0^{2\\pi} \\frac{m}{2\\pi k_\\mathrm{B} T} v \\exp\\left(-\\frac{mv^2}{2 k_\\mathrm{B} T}\\right) d\\theta = 2\\pi \\left(\\frac{m}{2\\pi k_\\mathrm{B} T}\\right) v \\exp\\left(-\\frac{mv^2}{2 k_\\mathrm{B} T}\\right)\n$$\nThis simplifies to the two-dimensional Maxwell-Boltzmann speed distribution:\n$$\nP(v) = \\frac{m}{k_\\mathrm{B} T} v \\exp\\left(-\\frac{mv^2}{2 k_\\mathrm{B} T}\\right) \\quad \\text{for } v \\geq 0\n$$\nThis is a Rayleigh distribution with scale parameter $\\sigma = \\sqrt{k_\\mathrm{B} T / m}$.\n\n**1.3. Mean Speed**\nThe mean speed, $\\langle v \\rangle$, is the expectation value of $v$ with respect to the distribution $P(v)$:\n$$\n\\langle v \\rangle = \\int_0^{\\infty} v P(v) dv = \\int_0^{\\infty} v \\left(\\frac{m}{k_\\mathrm{B} T}\\right) v \\exp\\left(-\\frac{mv^2}{2 k_\\mathrm{B} T}\\right) dv = \\frac{m}{k_\\mathrm{B} T} \\int_0^{\\infty} v^2 \\exp\\left(-\\frac{mv^2}{2 k_\\mathrm{B} T}\\right) dv\n$$\nThis integral has the form $\\int_0^{\\infty} x^2 e^{-ax^2} dx = \\frac{1}{4}\\sqrt{\\frac{\\pi}{a^3}}$. Here, $a = m/(2 k_\\mathrm{B} T)$.\nSubstituting $a$ into the solution of the integral gives:\n$$\n\\int_0^{\\infty} v^2 \\exp\\left(-\\frac{mv^2}{2 k_\\mathrm{B} T}\\right) dv = \\frac{1}{4} \\sqrt{\\frac{\\pi}{(m/2k_\\mathrm{B} T)^3}} = \\frac{1}{4} \\sqrt{\\frac{8\\pi (k_\\mathrm{B} T)^3}{m^3}} = \\frac{\\sqrt{2\\pi}}{2} \\frac{(k_\\mathrm{B} T)^{3/2}}{m^{3/2}}\n$$\nSubstituting this back into the expression for $\\langle v \\rangle$:\n$$\n\\langle v \\rangle = \\frac{m}{k_\\mathrm{B} T} \\left(\\frac{\\sqrt{2\\pi}}{2} \\frac{(k_\\mathrm{B} T)^{3/2}}{m^{3/2}}\\right) = \\sqrt{\\frac{\\pi k_\\mathrm{B} T}{2m}}\n$$\nThis is the analytical expression for the mean speed in two dimensions.\n\n**2. Computational Validation Algorithm**\n\nThe computational procedure is designed to sample initial velocities for a system of $N$ atoms and validate the sample against the derived theoretical results.\n\n**2.1. Velocity Sampling**\nBased on the derivation, the velocity components $v_x$ and $v_y$ are independent and each follows a Gaussian (normal) distribution with a mean of $0$ and a variance of $\\sigma_v^2 = k_\\mathrm{B} T / m$. The standard deviation is thus $\\sigma_v = \\sqrt{k_\\mathrm{B} T / m}$.\nFor a system of $N$ particles, we generate $N$ values for $v_x$ and $N$ values for $v_y$ by drawing from this normal distribution using a pseudo-random number generator. A generator initialized with a fixed seed ensures reproducibility.\n\n**2.2. Validation Metrics Computation**\nFor each test case with specified mass $m$, temperature $T$, and number of particles $N$:\n1.  **Sample Mean Speed ($\\overline{v}$)**: After generating the velocity components $\\{v_{x,i}, v_{y,i}\\}$ for $i=1, \\dots, N$, the speed of each particle is computed as $v_i = \\sqrt{v_{x,i}^2 + v_{y,i}^2}$. The sample mean speed is the arithmetic average: $\\overline{v} = \\frac{1}{N} \\sum_{i=1}^N v_i$.\n2.  **Absolute Error ($\\Delta$)**: The absolute error between the sample mean speed and the theoretical mean speed is computed as $\\Delta = |\\overline{v} - \\langle v \\rangle|$, where $\\langle v \\rangle = \\sqrt{\\pi k_\\mathrm{B} T / (2m)}$.\n3.  **Kolmogorov-Smirnov (KS) Statistic ($D$)**: The empirical cumulative distribution function (CDF) of the sampled speeds is compared to the theoretical CDF of the 2D MB speed distribution. The latter is a Rayleigh distribution with scale parameter $\\sigma = \\sqrt{k_\\mathrm{B} T / m}$. The KS statistic $D$ is the maximum absolute difference between the two CDFs.\n4.  **Equipartition Check ($b$)**: The equipartition theorem states that the average kinetic energy per quadratic degree of freedom is $\\frac{1}{2} k_\\mathrm{B} T$. We verify this computationally by calculating the sample mean kinetic energies for each component, $\\langle E_x \\rangle = \\frac{1}{2}m \\overline{v_x^2}$ and $\\langle E_y \\rangle = \\frac{1}{2}m \\overline{v_y^2}$. The relative errors with respect to the theoretical value $\\frac{1}{2} k_\\mathrm{B} T$ are checked against the tolerance $\\varepsilon = 5 \\times 10^{-3}$. The condition is met if both relative errors are less than or equal to $\\varepsilon$.\n$$\n\\left|\\frac{\\frac{1}{2}m \\overline{v_x^2} - \\frac{1}{2}k_\\mathrm{B} T}{\\frac{1}{2}k_\\mathrm{B} T}\\right| \\le \\varepsilon \\quad \\text{and} \\quad \\left|\\frac{\\frac{1}{2}m \\overline{v_y^2} - \\frac{1}{2}k_\\mathrm{B} T}{\\frac{1}{2}k_\\mathrm{B} T}\\right| \\le \\varepsilon\n$$\nThe results of these computations are then formatted and reported as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import stats\n\ndef solve():\n    \"\"\"\n    Derives, implements, and validates a 2D initial velocity assignment procedure\n    using the Maxwell-Boltzmann framework.\n    \"\"\"\n\n    # Define constants and test cases\n    K_B = 1.380649e-23  # Boltzmann constant in J/K\n    EPSILON = 5e-3        # Relative tolerance for equipartition check\n    SEED = 314159         # Seed for pseudo-random number generator\n\n    test_cases = [\n        # Case 1: Argon at 300 K\n        {'m': 6.6335209e-26, 'T': 300, 'N': 100000},\n        # Case 2: Hydrogen at 300 K\n        {'m': 1.6735575e-27, 'T': 300, 'N': 100000},\n        # Case 3: Argon at 1 K\n        {'m': 6.6335209e-26, 'T': 1, 'N': 100000},\n    ]\n\n    # Initialize the random number generator for reproducibility\n    rng = np.random.default_rng(SEED)\n\n    results = []\n\n    for case in test_cases:\n        m = case['m']\n        T = case['T']\n        N = case['N']\n\n        # 1. Sample initial velocities\n        # The velocity components vx and vy are independent and follow a\n        # a normal distribution with mean=0 and variance = k_B*T/m.\n        # The standard deviation is sqrt(k_B*T/m).\n        sigma_v = np.sqrt(K_B * T / m)\n        vx = rng.normal(loc=0.0, scale=sigma_v, size=N)\n        vy = rng.normal(loc=0.0, scale=sigma_v, size=N)\n\n        # 2. Compute sample speeds and statistics\n        speeds = np.sqrt(vx**2 + vy**2)\n        v_bar = np.mean(speeds)\n\n        # 3. Compute theoretical mean speed for 2D system\n        # <v> = sqrt(pi * k_B * T / (2 * m))\n        v_theory = np.sqrt(np.pi * K_B * T / (2 * m))\n\n        # 4. Calculate validation metrics\n\n        # Metric 1: Sample mean speed\n        sample_mean_speed = v_bar\n        \n        # Metric 2: Absolute error\n        abs_error = np.abs(sample_mean_speed - v_theory)\n\n        # Metric 3: Kolmogorov-Smirnov statistic\n        # The analytical distribution is a Rayleigh distribution with scale=sigma_v.\n        ks_result = stats.kstest(speeds, 'rayleigh', args=(0, sigma_v))\n        ks_statistic = ks_result.statistic\n\n        # Metric 4: Equipartition check\n        # Mean kinetic energy per degree of freedom should be 0.5 * k_B * T.\n        ke_x_mean = 0.5 * m * np.mean(vx**2)\n        ke_y_mean = 0.5 * m * np.mean(vy**2)\n        ke_theory = 0.5 * K_B * T\n\n        rel_err_x = np.abs((ke_x_mean - ke_theory) / ke_theory)\n        rel_err_y = np.abs((ke_y_mean - ke_theory) / ke_theory)\n        \n        equipartition_holds = (rel_err_x <= EPSILON) and (rel_err_y <= EPSILON)\n\n        # Append rounded floats and boolean to the results list\n        results.append(round(sample_mean_speed, 6))\n        results.append(round(abs_error, 6))\n        results.append(round(ks_statistic, 6))\n        results.append(equipartition_holds)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2456611"}, {"introduction": "In a real simulation, generating velocities is only the first step. Because we work with a finite number of particles, the random sampling process almost always introduces a non-zero total momentum, leading to an unphysical drift of the entire system—an artifact famously known as the \"flying ice cube.\" This final practice teaches you a vital skill for any computational scientist: how to derive and implement an algorithm to remove this spurious center-of-mass motion and quantify its effect on measured properties like pressure [@problem_id:2456613].", "problem": "You are given a finite system of point particles whose initial velocities were assigned by independent sampling from the Maxwell–Boltzmann distribution (MB) at a nominal target temperature, but finite sampling led to a non-zero net drift. This produces a non-zero total linear momentum and thus a non-zero center-of-mass (COM) velocity. The presence of a COM drift is a classic seed for the \"flying ice cube\" artifact in Molecular Dynamics (MD), where kinetic energy is spuriously sequestered into low-frequency collective motion. You must (i) derive a post-processing algorithm grounded in first principles to remove the spurious COM motion from the velocities, and (ii) quantify the pressure bias that results when one incorrectly includes COM drift in the kinetic contribution to pressure.\n\nUse only the following fundamental bases: Newton’s laws of motion, the definition of kinetic energy, the definition of total linear momentum and center-of-mass velocity, the Ideal Gas Law kinetic theory connection between translational kinetic energy and pressure, and the Equipartition Theorem. Do not use any other pre-derived specialty results.\n\nYour algorithm must start from the definition of translational kinetic energy and the decomposition of velocities into COM drift and internal (thermal) components. The key quantities are:\n- The particle masses $m_i$ in kilograms.\n- The particle velocities $\\mathbf{v}_i$ in meters per second, expressed as $3$-component vectors.\n- The system volume $V$ in cubic meters.\n- The Boltzmann constant $k_\\mathrm{B}$ in joules per kelvin, given by $k_\\mathrm{B} = 1.380\\,649\\times 10^{-23}\\,\\mathrm{J/K}$.\n\nDefine the total kinetic energy\n$$\nK_\\text{total} = \\frac{1}{2}\\sum_{i=1}^N m_i \\lVert \\mathbf{v}_i \\rVert^2,\n$$\nthe total linear momentum\n$$\n\\mathbf{P} = \\sum_{i=1}^N m_i \\mathbf{v}_i,\n$$\nthe total mass\n$$\nM = \\sum_{i=1}^N m_i,\n$$\nand the center-of-mass velocity\n$$\n\\mathbf{V}_\\text{cm} = \\frac{\\mathbf{P}}{M}.\n$$\nBy subtracting $\\mathbf{V}_\\text{cm}$ from each $\\mathbf{v}_i$, you obtain COM-corrected velocities\n$$\n\\mathbf{v}_i^\\prime = \\mathbf{v}_i - \\mathbf{V}_\\text{cm},\n$$\nand the corresponding thermal kinetic energy\n$$\nK_\\text{thermal} = \\frac{1}{2}\\sum_{i=1}^N m_i \\lVert \\mathbf{v}_i^\\prime \\rVert^2.\n$$\n\nFrom kinetic theory and equipartition applied to an ideal-gas-like kinetic contribution, the pressure inferred from kinetic energy scales with translational kinetic energy and volume. If one naively includes COM drift, one obtains a \"naive\" pressure $P_\\text{naive}$; if one correctly excludes COM drift, one obtains a \"thermal\" pressure $P_\\text{thermal}$. Define the flying ice cube pressure bias for a given state as the difference\n$$\n\\Delta P \\equiv P_\\text{naive} - P_\\text{thermal}.\n$$\nYour program must implement the COM-removal post-processing and compute $\\Delta P$ using the ideal kinetic relationship between pressure, kinetic energy, and volume. Express the final answers in pascals and round to the nearest integer.\n\nTest suite (three independent cases):\n- Case A (happy path, non-zero COM):\n  - $N = 3$ identical particles with $m_i = 6.633\\,520\\,9\\times 10^{-26}\\,\\mathrm{kg}$ for all $i$.\n  - Velocities in $\\mathrm{m/s}$: $\\mathbf{v}_1 = (\\,350,\\,10,\\,0\\,)$, $\\mathbf{v}_2 = (\\,350,\\,-10,\\,0\\,)$, $\\mathbf{v}_3 = (\\,350,\\,0,\\,0\\,)$.\n  - Volume $V = 2.7\\times 10^{-26}\\,\\mathrm{m}^3$.\n- Case B (boundary, zero COM already):\n  - $N = 3$ identical particles with $m_i = 6.633\\,520\\,9\\times 10^{-26}\\,\\mathrm{kg}$ for all $i$.\n  - Velocities in $\\mathrm{m/s}$: $\\mathbf{v}_1 = (\\,100,\\,0,\\,0\\,)$, $\\mathbf{v}_2 = (\\,-100,\\,0,\\,0\\,)$, $\\mathbf{v}_3 = (\\,0,\\,0,\\,0\\,)$.\n  - Volume $V = 2.7\\times 10^{-26}\\,\\mathrm{m}^3$.\n- Case C (edge, extreme drift \"flying ice cube\"):\n  - $N = 4$ with alternating masses $m_1 = m_3 = 39.948\\times 1.660\\,539\\,066\\,60\\times 10^{-27}\\,\\mathrm{kg}$ and $m_2 = m_4 = 20.179\\,7\\times 1.660\\,539\\,066\\,60\\times 10^{-27}\\,\\mathrm{kg}$.\n  - Velocities in $\\mathrm{m/s}$ all equal: $\\mathbf{v}_1 = \\mathbf{v}_2 = \\mathbf{v}_3 = \\mathbf{v}_4 = (\\,400,\\,0,\\,0\\,)$.\n  - Volume $V = 8.0\\times 10^{-27}\\,\\mathrm{m}^3$.\n\nRequired output:\n- For each case, compute $\\Delta P$ in pascals, rounded to the nearest integer.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, ordered as $[\\Delta P_\\text{A}, \\Delta P_\\text{B}, \\Delta P_\\text{C}]$ in pascals, for example $[x,y,z]$.", "solution": "The problem requires the derivation and implementation of an algorithm to quantify the pressure bias arising from spurious center-of-mass (COM) motion in a system of particles. This artifact, often termed the \"flying ice cube\" effect, occurs when initial velocities, though sampled from a target distribution, possess a non-zero total linear momentum due to finite sampling. The derivation will be grounded in the first principles of classical mechanics and kinetic theory.\n\nFirst, we establish the relationship between the total kinetic energy of the system, the internal (thermal) kinetic energy, and the kinetic energy associated with the COM motion. The total kinetic energy, $K_\\text{total}$, for a system of $N$ particles with masses $m_i$ and velocities $\\mathbf{v}_i$ is defined as:\n$$\nK_\\text{total} = \\frac{1}{2}\\sum_{i=1}^N m_i \\lVert \\mathbf{v}_i \\rVert^2\n$$\nThe velocity of each particle, $\\mathbf{v}_i$, can be decomposed into the sum of the COM velocity, $\\mathbf{V}_\\text{cm}$, and the particle's velocity relative to the COM, $\\mathbf{v}_i^\\prime$.\n$$\n\\mathbf{v}_i = \\mathbf{V}_\\text{cm} + \\mathbf{v}_i^\\prime\n$$\nThe COM velocity is defined as the total momentum $\\mathbf{P}$ divided by the total mass $M$:\n$$\n\\mathbf{V}_\\text{cm} = \\frac{\\mathbf{P}}{M} = \\frac{\\sum_{i=1}^N m_i \\mathbf{v}_i}{\\sum_{i=1}^N m_i}\n$$\nSubstituting the velocity decomposition into the expression for $K_\\text{total}$:\n$$\nK_\\text{total} = \\frac{1}{2}\\sum_{i=1}^N m_i \\lVert \\mathbf{V}_\\text{cm} + \\mathbf{v}_i^\\prime \\rVert^2 = \\frac{1}{2}\\sum_{i=1}^N m_i (\\mathbf{V}_\\text{cm} + \\mathbf{v}_i^\\prime) \\cdot (\\mathbf{V}_\\text{cm} + \\mathbf{v}_i^\\prime)\n$$\nExpanding the dot product:\n$$\nK_\\text{total} = \\frac{1}{2}\\sum_{i=1}^N m_i (\\lVert \\mathbf{V}_\\text{cm} \\rVert^2 + 2(\\mathbf{V}_\\text{cm} \\cdot \\mathbf{v}_i^\\prime) + \\lVert \\mathbf{v}_i^\\prime \\rVert^2)\n$$\nWe can separate this into three terms:\n$$\nK_\\text{total} = \\frac{1}{2}\\sum_{i=1}^N m_i \\lVert \\mathbf{v}_i^\\prime \\rVert^2 + \\mathbf{V}_\\text{cm} \\cdot \\left(\\sum_{i=1}^N m_i \\mathbf{v}_i^\\prime\\right) + \\frac{1}{2} \\lVert \\mathbf{V}_\\text{cm} \\rVert^2 \\left(\\sum_{i=1}^N m_i\\right)\n$$\nThe first term is, by definition, the thermal kinetic energy, $K_\\text{thermal}$. The third term simplifies to $\\frac{1}{2}M\\lVert \\mathbf{V}_\\text{cm} \\rVert^2$, which is the kinetic energy of the center of mass, $K_\\text{cm}$. The middle term involves the total momentum of the system in the COM reference frame. Let us evaluate this sum:\n$$\n\\sum_{i=1}^N m_i \\mathbf{v}_i^\\prime = \\sum_{i=1}^N m_i (\\mathbf{v}_i - \\mathbf{V}_\\text{cm}) = \\sum_{i=1}^N m_i \\mathbf{v}_i - \\left(\\sum_{i=1}^N m_i\\right) \\mathbf{V}_\\text{cm}\n$$\nBy definition, $\\sum m_i \\mathbf{v}_i = \\mathbf{P}$ and $\\sum m_i = M$. Since $\\mathbf{V}_\\text{cm} = \\mathbf{P}/M$, the expression becomes:\n$$\n\\mathbf{P} - M\\left(\\frac{\\mathbf{P}}{M}\\right) = \\mathbf{P} - \\mathbf{P} = \\mathbf{0}\n$$\nThus, the middle cross-term vanishes. The total kinetic energy rigorously separates into thermal and COM contributions (a result known as Koenig's theorem):\n$$\nK_\\text{total} = K_\\text{thermal} + K_\\text{cm}\n$$\nThe post-processing algorithm to remove COM motion, therefore, consists of calculating $\\mathbf{V}_\\text{cm}$ from the initial velocities and then updating each velocity to $\\mathbf{v}_i^\\prime = \\mathbf{v}_i - \\mathbf{V}_\\text{cm}$.\n\nNext, we quantify the pressure bias. The connection between pressure $P$, volume $V$, and average translational kinetic energy $\\langle K \\rangle$ for a system behaving like an ideal gas is derived from the Ideal Gas Law, $PV=Nk_\\mathrm{B}T$, and the Equipartition Theorem. For $N$ particles in $3$ dimensions, there are $3N$ translational degrees of freedom. The equipartition theorem states that the average kinetic energy is $\\langle K \\rangle = N \\frac{3}{2}k_\\mathrm{B}T$. From this, we find $k_\\mathrm{B}T = \\frac{2\\langle K \\rangle}{3N}$. Substituting this into the ideal gas law gives:\n$$\nP = \\frac{N}{V} k_\\mathrm{B}T = \\frac{N}{V} \\left(\\frac{2\\langle K \\rangle}{3N}\\right) = \\frac{2\\langle K \\rangle}{3V}\n$$\nFor an instantaneous configuration from a simulation, we use the instantaneous kinetic energy $K$ as an estimator for the average $\\langle K \\rangle$, yielding the expression $P = \\frac{2K}{3V}$.\n\nThe \"naive\" pressure, $P_\\text{naive}$, is computed using the total kinetic energy, which incorrectly includes the non-thermal COM motion:\n$$\nP_\\text{naive} = \\frac{2K_\\text{total}}{3V}\n$$\nThe correct \"thermal\" pressure, $P_\\text{thermal}$, uses only the internal kinetic energy:\n$$\nP_\\text{thermal} = \\frac{2K_\\text{thermal}}{3V}\n$$\nThe pressure bias, $\\Delta P$, is the difference:\n$$\n\\Delta P = P_\\text{naive} - P_\\text{thermal} = \\frac{2}{3V} (K_\\text{total} - K_\\text{thermal})\n$$\nUsing the energy decomposition $K_\\text{total} = K_\\text{thermal} + K_\\text{cm}$, we find that the bias is solely due to the COM kinetic energy:\n$$\n\\Delta P = \\frac{2K_\\text{cm}}{3V}\n$$\nSubstituting the expression for $K_\\text{cm} = \\frac{1}{2}M\\lVert \\mathbf{V}_\\text{cm} \\rVert^2$:\n$$\n\\Delta P = \\frac{2}{3V} \\left( \\frac{1}{2}M\\lVert \\mathbf{V}_\\text{cm} \\rVert^2 \\right) = \\frac{M\\lVert \\mathbf{V}_\\text{cm} \\rVert^2}{3V}\n$$\nFor computational purposes, it is often more direct to work with the total momentum $\\mathbf{P}$. Since $\\mathbf{V}_\\text{cm} = \\mathbf{P}/M$, we have $\\lVert \\mathbf{V}_\\text{cm} \\rVert^2 = \\lVert \\mathbf{P} \\rVert^2 / M^2$. Substituting this gives the final formula for the pressure bias:\n$$\n\\Delta P = \\frac{M}{3V} \\left( \\frac{\\lVert \\mathbf{P} \\rVert^2}{M^2} \\right) = \\frac{\\lVert \\mathbf{P} \\rVert^2}{3VM}\n$$\nThe algorithm to compute $\\Delta P$ is as follows:\n1. For a system of $N$ particles, compute the total mass $M = \\sum_{i=1}^N m_i$.\n2. Compute the total linear momentum vector $\\mathbf{P} = \\sum_{i=1}^N m_i \\mathbf{v}_i$.\n3. Calculate the squared magnitude of the momentum, $\\lVert \\mathbf{P} \\rVert^2 = P_x^2 + P_y^2 + P_z^2$.\n4. Compute the pressure bias using the formula $\\Delta P = \\frac{\\lVert \\mathbf{P} \\rVert^2}{3VM}$.\n5. The result is given in pascals, since all inputs are in SI units.\n\nThis procedure will be applied to the three provided test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the pressure bias due to COM drift for given test cases.\n    \"\"\"\n\n    amu_to_kg = 1.66053906660e-27\n\n    test_cases = [\n        {\n            # Case A: Happy path, non-zero COM drift\n            \"masses\": np.array([6.6335209e-26, 6.6335209e-26, 6.6335209e-26]),\n            \"velocities\": np.array([\n                [350.0, 10.0, 0.0],\n                [350.0, -10.0, 0.0],\n                [350.0, 0.0, 0.0]\n            ]),\n            \"volume\": 2.7e-26\n        },\n        {\n            # Case B: Boundary condition, zero COM drift\n            \"masses\": np.array([6.6335209e-26, 6.6335209e-26, 6.6335209e-26]),\n            \"velocities\": np.array([\n                [100.0, 0.0, 0.0],\n                [-100.0, 0.0, 0.0],\n                [0.0, 0.0, 0.0]\n            ]),\n            \"volume\": 2.7e-26\n        },\n        {\n            # Case C: Edge case, extreme drift \"flying ice cube\"\n            \"masses\": np.array([\n                39.948 * amu_to_kg,\n                20.1797 * amu_to_kg,\n                39.948 * amu_to_kg,\n                20.1797 * amu_to_kg\n            ]),\n            \"velocities\": np.array([\n                [400.0, 0.0, 0.0],\n                [400.0, 0.0, 0.0],\n                [400.0, 0.0, 0.0],\n                [400.0, 0.0, 0.0]\n            ]),\n            \"volume\": 8.0e-27\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        masses = case[\"masses\"]\n        velocities = case[\"velocities\"]\n        volume = case[\"volume\"]\n\n        # 1. Compute total mass M\n        total_mass = np.sum(masses)\n\n        # 2. Compute total linear momentum P\n        # Reshape masses to (N, 1) to broadcast with velocities (N, 3)\n        momenta = masses[:, np.newaxis] * velocities\n        total_momentum = np.sum(momenta, axis=0)\n\n        # 3. Calculate the squared magnitude of the momentum\n        p_squared = np.sum(total_momentum**2)\n\n        # 4. Compute the pressure bias delta_P\n        # If total_mass or volume is zero, pressure bias is ill-defined or zero.\n        # For non-zero momentum, it would be infinite. Given the problem\n        # context, we assume M > 0 and V > 0.\n        denominator = 3 * volume * total_mass\n        if denominator == 0:\n            # This case will happen if M=0 or V=0. If P is non-zero, this is a singularity.\n            # If P is zero, the bias is zero. In this problem, M>0 and V>0.\n            if p_squared == 0:\n                delta_p = 0.0\n            else:\n                # Mathematically infinite, but physically not sensible.\n                # The problem setups ensure this branch is not taken.\n                delta_p = np.inf\n        else:\n            delta_p = p_squared / denominator\n\n        # Round to the nearest integer as specified\n        # Standard rounding (round half up)\n        results.append(int(delta_p + 0.5))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2456613"}]}