{"hands_on_practices": [{"introduction": "A molecule's three-dimensional structure is central to its function, but this structure is rarely static. Most molecules can adopt a variety of shapes, or 'conformations', which differ in energy. This first practice introduces one of the core ideas of molecular mechanics: relating a molecule's geometry to its potential energy. Using a simplified model for torsional strain—the energy cost of twisting around chemical bonds—you will calculate the relative energies of the classic chair, boat, and twist-boat conformations of cyclohexane [@problem_id:2451314]. This exercise provides a direct, hands-on link between a simple mathematical energy function and the well-established stability order of a fundamental organic molecule.", "problem": "You are given a minimal, first-principles-inspired torsional energy model to evaluate the conformational stability of cyclohexane. Model the ring as a sequence of six torsional angles $\\{\\varphi_i\\}_{i=1}^{6}$ about the carbon–carbon single bonds, and define the torsional energy function\n$$\nE(\\{\\varphi_i\\}) \\;=\\; \\sum_{i=1}^{6} \\frac{V_3}{2}\\,\\bigl(1 + \\cos\\bigl(3\\,\\varphi_i\\bigr)\\bigr),\n$$\nwhere $\\cos(\\cdot)$ is the cosine function (argument in radians), $V_3$ is the threefold torsional amplitude, and $\\varphi_i$ are the dihedral angles given in degrees. Use $V_3 = 3.000$ kilocalories per mole for all torsions. Angles provided in degrees must be converted to radians before applying the cosine. Express all energies in kilocalories per mole, rounded to three decimal places.\n\nEvaluate $E$ for the following three conformations of cyclohexane, each specified by its six-ring dihedral sequence in degrees:\n- Chair (index $0$): $\\bigl(60^{\\circ}, -60^{\\circ}, 60^{\\circ}, -60^{\\circ}, 60^{\\circ}, -60^{\\circ}\\bigr)$\n- Boat (index $1$): $\\bigl(60^{\\circ}, 0^{\\circ}, -60^{\\circ}, 60^{\\circ}, 0^{\\circ}, -60^{\\circ}\\bigr)$\n- Twist-boat (index $2$): $\\bigl(40^{\\circ}, -40^{\\circ}, 40^{\\circ}, -40^{\\circ}, 40^{\\circ}, -40^{\\circ}\\bigr)$\n\nTasks:\n1. Compute the total torsional energy $E$ for each conformation using the formula above. Convert degrees to radians using $\\varphi_{\\mathrm{rad}} = \\varphi_{\\mathrm{deg}} \\times \\pi/180$, where $\\pi$ is the mathematical constant pi. Report each energy in kilocalories per mole, rounded to three decimal places.\n2. Compute the relative energies by subtracting the minimum of the three total energies from each total energy. Report each relative energy in kilocalories per mole, rounded to three decimal places.\n3. Determine the stability ranking by increasing total energy and report it as a list of indices corresponding to the conformations in ascending order of energy, using the mapping Chair $\\rightarrow 0$, Boat $\\rightarrow 1$, Twist-boat $\\rightarrow 2$.\n\nTest Suite and Final Output Specification:\n- Use the three parameter sets provided above as the complete test suite.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets in the following order:\n  $\\bigl[E_0,E_1,E_2,\\Delta E_0,\\Delta E_1,\\Delta E_2,r_0,r_1,r_2\\bigr]$\n  where $E_i$ are the total energies for indices $i \\in \\{0,1,2\\}$ (rounded to three decimal places), $\\Delta E_i$ are the relative energies (rounded to three decimal places), and $\\{r_0,r_1,r_2\\}$ is the sequence of indices in ascending order of total energy. Energies must be in kilocalories per mole.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- **Energy Function:** The torsional energy $E$ for a set of six dihedral angles $\\{\\varphi_i\\}_{i=1}^{6}$ is given by the formula:\n$$E(\\{\\varphi_i\\}) \\;=\\; \\sum_{i=1}^{6} \\frac{V_3}{2}\\,\\bigl(1 + \\cos\\bigl(3\\,\\varphi_i\\bigr)\\bigr)$$\n- **Torsional Amplitude:** The constant $V_3$ is specified as $3.000$ kilocalories per mole.\n- **Angle Units:** The input dihedral angles $\\varphi_i$ are provided in degrees, but the cosine function requires radians.\n- **Conversion Factor:** The conversion from degrees to radians is given by $\\varphi_{\\mathrm{rad}} = \\varphi_{\\mathrm{deg}} \\times \\pi/180$.\n- **Conformations and Dihedral Angles (in degrees):**\n  - Chair (index $0$): $\\bigl(60^{\\circ}, -60^{\\circ}, 60^{\\circ}, -60^{\\circ}, 60^{\\circ}, -60^{\\circ}\\bigr)$\n  - Boat (index $1$): $\\bigl(60^{\\circ}, 0^{\\circ}, -60^{\\circ}, 60^{\\circ}, 0^{\\circ}, -60^{\\circ}\\bigr)$\n  - Twist-boat (index $2$): $\\bigl(40^{\\circ}, -40^{\\circ}, 40^{\\circ}, -40^{\\circ}, 40^{\\circ}, -40^{\\circ}\\bigr)$\n- **Required Calculations:**\n  1. Total energy $E$ for each of the three conformations.\n  2. Relative energy $\\Delta E_i = E_i - E_{\\text{min}}$ for each conformation.\n  3. Stability ranking as a list of indices sorted by ascending total energy.\n- **Output Precision:** All energy values must be rounded to three decimal places.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded. It employs a simplified but standard functional form for torsional potential energy (a Fourier series term) used in computational chemistry and molecular mechanics to describe bond rotation. The provided conformations—Chair, Boat, and Twist-boat—are the principal, well-established conformers of cyclohexane. The value for the torsional barrier $V_3$ is physically realistic for a carbon-carbon single bond. The problem is well-posed, with all necessary parameters, constants, and data explicitly provided. The terminology is precise and objective. The problem is self-contained and free of contradictions, ambiguities, or factual errors.\n\n**Step 3: Verdict and Action**\nThe problem is deemed valid. A complete solution will be provided.\n\n**Solution Derivation**\nThe analysis proceeds by applying the given torsional energy function to each of the three specified conformations of cyclohexane.\n\nThe governing equation is:\n$$E = \\sum_{i=1}^{6} E_i^{\\text{torsion}} = \\sum_{i=1}^{6} \\frac{V_3}{2}\\,\\bigl(1 + \\cos\\bigl(3\\,\\varphi_i\\bigr)\\bigr)$$\nwhere $V_3 = 3.000 \\text{ kcal/mol}$. The input angles $\\varphi_i$ are in degrees and must be converted to radians for the trigonometric function $\\cos(\\cdot)$.\n\n**1. Total Energy Calculation ($E_i$)**\n\n**a. Chair Conformation (index $0$)**\nThe dihedral angles are $\\varphi_i \\in \\{60^{\\circ}, -60^{\\circ}\\}$.\nIn radians, $\\pm 60^{\\circ}$ corresponds to $\\pm \\frac{\\pi}{3}$ radians.\nFor each angle $\\varphi_i$ in the sequence, the argument of the cosine function is $3\\varphi_i = 3 \\times (\\pm\\frac{\\pi}{3}) = \\pm\\pi$.\nThe cosine of this value is $\\cos(\\pm\\pi) = -1$.\nThe energy contribution for each of the six torsions is identical:\n$$E_i^{\\text{torsion}} = \\frac{3.000}{2} \\bigl(1 + \\cos(\\pm\\pi)\\bigr) = \\frac{3.000}{2} (1 - 1) = 0.000 \\text{ kcal/mol}$$\nThe total energy $E_0$ is the sum of the energies of the six torsions:\n$$E_0 = \\sum_{i=1}^{6} 0.000 = 0.000 \\text{ kcal/mol}$$\n\n**b. Boat Conformation (index $1$)**\nThe dihedral angles are $\\bigl(60^{\\circ}, 0^{\\circ}, -60^{\\circ}, 60^{\\circ}, 0^{\\circ}, -60^{\\circ}\\bigr)$.\nThis set contains four angles of magnitude $60^{\\circ}$ and two angles of $0^{\\circ}$.\n- For the four angles where $|\\varphi_i| = 60^{\\circ}$, the energy contribution is $0.000 \\text{ kcal/mol}$, as calculated for the chair conformation.\n- For the two angles where $\\varphi_i = 0^{\\circ}$ (or $0$ radians), the argument of the cosine is $3\\varphi_i = 3 \\times 0 = 0$.\nThe cosine of this value is $\\cos(0) = 1$.\nThe energy contribution for each of these two torsions is:\n$$E_i^{\\text{torsion}} = \\frac{3.000}{2} \\bigl(1 + \\cos(0)\\bigr) = \\frac{3.000}{2} (1 + 1) = 3.000 \\text{ kcal/mol}$$\nThe total energy $E_1$ is the sum of these contributions:\n$$E_1 = (4 \\times 0.000) + (2 \\times 3.000) = 6.000 \\text{ kcal/mol}$$\n\n**c. Twist-boat Conformation (index $2$)**\nThe dihedral angles are $\\varphi_i \\in \\{40^{\\circ}, -40^{\\circ}\\}$.\nIn radians, $\\pm 40^{\\circ}$ corresponds to $\\pm 40 \\times \\frac{\\pi}{180} = \\pm \\frac{2\\pi}{9}$ radians.\nThe argument of the cosine is $3\\varphi_i = 3 \\times (\\pm\\frac{2\\pi}{9}) = \\pm\\frac{2\\pi}{3}$.\nThe cosine of this value is $\\cos(\\pm\\frac{2\\pi}{3}) = -0.5$.\nThe energy contribution for each of the six torsions is identical:\n$$E_i^{\\text{torsion}} = \\frac{3.000}{2} \\bigl(1 + \\cos(\\pm\\frac{2\\pi}{3})\\bigr) = \\frac{3.000}{2} (1 - 0.5) = 1.5 \\times 0.5 = 0.750 \\text{ kcal/mol}$$\nThe total energy $E_2$ is the sum of the energies of the six torsions:\n$$E_2 = \\sum_{i=1}^{6} 0.750 = 6 \\times 0.750 = 4.500 \\text{ kcal/mol}$$\n\nSummary of total energies:\n- $E_0 = 0.000 \\text{ kcal/mol}$\n- $E_1 = 6.000 \\text{ kcal/mol}$\n- $E_2 = 4.500 \\text{ kcal/mol}$\n\n**2. Relative Energy Calculation ($\\Delta E_i$)**\n\nThe relative energy $\\Delta E_i$ is calculated with respect to the minimum energy conformation, $E_{\\text{min}}$.\nFirst, find the minimum energy:\n$$E_{\\text{min}} = \\min(E_0, E_1, E_2) = \\min(0.000, 6.000, 4.500) = 0.000 \\text{ kcal/mol}$$\nThis corresponds to the chair conformation ($E_0$).\nNow, calculate the relative energies:\n- $\\Delta E_0 = E_0 - E_{\\text{min}} = 0.000 - 0.000 = 0.000 \\text{ kcal/mol}$\n- $\\Delta E_1 = E_1 - E_{\\text{min}} = 6.000 - 0.000 = 6.000 \\text{ kcal/mol}$\n- $\\Delta E_2 = E_2 - E_{\\text{min}} = 4.500 - 0.000 = 4.500 \\text{ kcal/mol}$\n\n**3. Stability Ranking**\n\nStability is inversely proportional to energy. The stability ranking is determined by sorting the conformations by their total energy in ascending order.\nThe energies are $E_0 = 0.000$, $E_1 = 6.000$, and $E_2 = 4.500$.\nThe sorted order of energies is $E_0 < E_2 < E_1$.\nThe corresponding list of indices $\\{r_0, r_1, r_2\\}$ is therefore $[0, 2, 1]$.\n\n**Final Results Summary**\n- Total energies: $[E_0, E_1, E_2] = [0.000, 6.000, 4.500]$\n- Relative energies: $[\\Delta E_0, \\Delta E_1, \\Delta E_2] = [0.000, 6.000, 4.500]$\n- Stability ranking: $[r_0, r_1, r_2] = [0, 2, 1]$\nThe combined output list is $[0.000, 6.000, 4.500, 0.000, 6.000, 4.500, 0, 2, 1]$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes torsional and relative energies, and stability ranking for\n    cyclohexane conformations based on a simplified potential energy model.\n    \"\"\"\n    # Define the torsional amplitude constant in kcal/mol.\n    V3 = 3.000\n\n    # Define the test cases: conformations of cyclohexane specified by their\n    # six-ring dihedral angles in degrees. The dictionary keys are the\n    # standard indices for Chair (0), Boat (1), and Twist-boat (2).\n    test_cases = {\n        0: [60., -60., 60., -60., 60., -60.],  # Chair\n        1: [60., 0., -60., 60., 0., -60.],    # Boat\n        2: [40., -40., 40., -40., 40., -40.]   # Twist-boat\n    }\n    \n    # Ensure a consistent processing order [0, 1, 2].\n    indices = sorted(test_cases.keys())\n\n    total_energies = []\n    for i in indices:\n        # Retrieve the list of angles for the current conformation.\n        angles_deg = np.array(test_cases[i])\n        \n        # Convert angles from degrees to radians for trigonometric functions.\n        angles_rad = np.deg2rad(angles_deg)\n        \n        # Calculate the energy contribution for each torsion using the given formula:\n        # E_i = (V3/2) * (1 + cos(3 * phi_i))\n        energy_terms = (V3 / 2.0) * (1.0 + np.cos(3.0 * angles_rad))\n        \n        # The total torsional energy is the sum of individual contributions.\n        total_energy = np.sum(energy_terms)\n        \n        total_energies.append(total_energy)\n\n    # Find the minimum energy among all conformations.\n    min_energy = min(total_energies)\n\n    # Calculate relative energies by subtracting the minimum energy.\n    relative_energies = [e - min_energy for e in total_energies]\n\n    # Determine stability ranking by sorting the indices based on total energy.\n    # np.argsort returns the indices that would sort the array in ascending order.\n    stability_ranking = np.argsort(total_energies).tolist()\n\n    # Round all energy results to three decimal places as required.\n    rounded_total_energies = [round(e, 3) for e in total_energies]\n    rounded_relative_energies = [round(e, 3) for e in relative_energies]\n\n    # Combine all results into a single list in the specified order:\n    # [E_0, E_1, E_2, dE_0, dE_1, dE_2, r_0, r_1, r_2]\n    final_results = rounded_total_energies + rounded_relative_energies + stability_ranking\n    \n    # Format the output string for printing. Floats are formatted to always\n    # show three decimal places (e.g., 0.000). Integers are converted to strings.\n    output_parts = []\n    for item in final_results:\n        if isinstance(item, float):\n            output_parts.append(f\"{item:.3f}\")\n        else:\n            output_parts.append(str(item))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(output_parts)}]\")\n\nsolve()\n```", "id": "2451314"}, {"introduction": "While molecular mechanics excels at predicting structure, understanding electronic properties like color, reactivity, and conductivity requires the lens of quantum mechanics. In this exercise, we will use the elegant and powerful tight-binding model, a simplified quantum approach, to investigate the electronic structure of conjugated polymers [@problem_id:2451347]. By constructing and diagonalizing a Hamiltonian for polyacetylene chains of increasing length, you will calculate the energy gap, $\\Delta$, between the Highest Occupied Molecular Orbital (HOMO) and the Lowest Unoccupied Molecular Orbital (LUMO). This practice offers a first-hand look at how quantum mechanics explains the fascinating electronic properties of materials and reveals a fundamental trend connecting molecular size to the HOMO-LUMO gap.", "problem": "You are asked to compute how the Highest Occupied Molecular Orbital (HOMO) and Lowest Unoccupied Molecular Orbital (LUMO) energy gap changes with the length of a finite trans-polyacetylene chain modeled at the level of a one-electron nearest-neighbor tight-binding Hamiltonian for the conjugated $\\pi$ system. Consider a finite open chain with $2n$ carbon sites (one $p_z$ orbital per carbon), where $n$ is the number of repeating $\\text{-CH=CH-}$ units. Each site has on-site energy $0$ electronvolts (eV), and only nearest-neighbor couplings are present with bond alternation (dimerization). The nearest-neighbor hopping integral alternates as $t_1$ and $t_2$ along the chain, where $t_1 = t_0(1+\\delta)$ and $t_2 = t_0(1-\\delta)$. Use the following constants: $t_0 = 2.50$ eV and $\\delta = 0.15$ (dimensionless). The Hamiltonian matrix $H \\in \\mathbb{R}^{2n \\times 2n}$ is defined by $H_{i,i} = 0$ eV for all sites $i$, and for $i=1,\\dots,2n-1$,\n- $H_{i,i+1} = H_{i+1,i} = t_1$ if the bond between sites $i$ and $i+1$ is of type $t_1$,\n- $H_{i,i+1} = H_{i+1,i} = t_2$ if the bond between sites $i$ and $i+1$ is of type $t_2$,\nwith open boundary conditions. The alternation starts with $t_1$ between sites $1$ and $2$, then $t_2$ between sites $2$ and $3$, and so on, alternating through the chain.\n\nAssume a neutral chain with one $\\pi$ electron per carbon and implicit spin degeneracy (that is, each molecular orbital can accommodate two electrons of opposite spin). Let the ordered one-electron energy eigenvalues be $E_1 \\le E_2 \\le \\dots \\le E_{2n}$ (in eV). At half filling, the HOMO energy is $E_n$ and the LUMO energy is $E_{n+1}$. The HOMO-LUMO gap is $\\Delta = E_{n+1} - E_n$ in eV.\n\nTest suite:\n- Use the four chain lengths $n \\in \\{2,4,6,8\\}$.\n- For all test cases, use the same $t_0$ and $\\delta$ specified above.\n\nYour task is to write a complete, runnable program that, for each element of the test suite, constructs the Hamiltonian $H$, obtains the eigenvalues, determines the HOMO-LUMO gap $\\Delta$ as defined, and returns the gaps. Express each gap in electronvolts (eV), rounded to $6$ decimal places.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the test suite values of $n$ from smallest to largest. For example, the output format must be like [$x_1$,$x_2$,$x_3$,$x_4$], where each $x_k$ is the gap for the corresponding $n$ in eV rounded to $6$ decimal places.", "solution": "The problem as stated is valid. It is scientifically grounded in the well-established tight-binding model for describing the electronic structure of conjugated polymers, it is well-posed with all necessary parameters and conditions defined, and it is objective and free of ambiguity. We shall proceed with the solution.\n\nThe problem requires the computation of the Highest Occupied Molecular Orbital (HOMO) to Lowest Unoccupied Molecular Orbital (LUMO) energy gap, $\\Delta$, for a finite `trans`-polyacetylene chain. The model employed is a one-electron, nearest-neighbor tight-binding Hamiltonian for the $\\pi$-electron system. The chain consists of $2n$ carbon atoms, where $n$ is the number of $\\text{-CH=CH-}$ units.\n\nThe Hamiltonian matrix, $H$, is a real symmetric matrix of dimension $2n \\times 2n$. The on-site energies, which represent the diagonal elements of the matrix, are set to zero: $H_{i,i} = 0$ for all sites $i=1, \\dots, 2n$. The off-diagonal elements, $H_{i,j}$, represent the hopping integrals between sites $i$ and $j$. In this model, these are non-zero only for nearest neighbors. The bonds exhibit alternation (dimerization), with two distinct hopping integrals, $t_1$ and $t_2$. The alternation begins with a $t_1$ type bond between sites $1$ and $2$, a $t_2$ type bond between sites $2$ and $3$, and so on. This pattern defines the structure of the tridiagonal Hamiltonian matrix:\n$$\nH_{i,i+1} = H_{i+1,i} = \\begin{cases} t_1 & \\text{if } i \\text{ is odd} \\\\ t_2 & \\text{if } i \\text{ is even} \\end{cases}\n$$\nfor $i = 1, \\dots, 2n-1$. All other off-diagonal elements are zero. The chain is finite, implying open boundary conditions, which means there is no hopping integral between site $1$ and site $2n$.\n\nThe values of the hopping integrals are determined by the parameters $t_0 = 2.50$ eV and $\\delta = 0.15$.\nThe \"strong\" bond hopping integral is $t_1 = t_0(1+\\delta) = 2.50(1+0.15) = 2.875$ eV.\nThe \"weak\" bond hopping integral is $t_2 = t_0(1-\\delta) = 2.50(1-0.15) = 2.125$ eV.\n\nThe single-particle energy levels of the $\\pi$-system are the eigenvalues of the Hamiltonian matrix $H$. We must solve the eigenvalue equation $H\\mathbf{c}_k = E_k \\mathbf{c}_k$, where $E_k$ are the energy eigenvalues and $\\mathbf{c}_k$ are the corresponding eigenvectors (molecular orbitals). For a $2n \\times 2n$ matrix, there will be $2n$ eigenvalues, which we order as $E_1 \\le E_2 \\le \\dots \\le E_{2n}$.\n\nThe system is a neutral chain with one $\\pi$-electron per carbon atom, totaling $2n$ electrons. According to the Pauli exclusion principle, each molecular orbital (energy level) can accommodate two electrons of opposite spin. Therefore, the $2n$ electrons will occupy the $n$ orbitals with the lowest energies. The set of occupied orbitals corresponds to the energies $\\{E_1, E_2, \\dots, E_n\\}$.\n\nThe Highest Occupied Molecular Orbital (HOMO) is the highest-energy orbital that is occupied, which is the $n$-th orbital with energy $E_n$. The Lowest Unoccupied Molecular Orbital (LUMO) is the lowest-energy orbital that is not occupied, which is the $(n+1)$-th orbital with energy $E_{n+1}$. The HOMO-LUMO gap is defined as the energy difference between them:\n$$\n\\Delta = E_{LUMO} - E_{HOMO} = E_{n+1} - E_n\n$$\nThe computational procedure for each value of $n$ in the test suite $\\{2, 4, 6, 8\\}$ is as follows:\n$1$. Construct the $2n \\times 2n$ Hamiltonian matrix $H$ according to the rules specified above. The matrix size will be $4 \\times 4$ for $n=2$, $8 \\times 8$ for $n=4$, $12 \\times 12$ for $n=6$, and $16 \\times 16$ for $n=8$.\n$2$. Numerically diagonalize the matrix $H$ to obtain its $2n$ eigenvalues. We will use a standard numerical linear algebra library function which returns eigenvalues sorted in non-decreasing order.\n$3$. Identify the HOMO energy $E_n$ and the LUMO energy $E_{n+1}$. In a zero-indexed array of sorted eigenvalues of length $2n$, these correspond to the elements at index $n-1$ and $n$, respectively.\n$4$. Calculate the gap $\\Delta = E_{n+1} - E_n$.\nThis procedure is repeated for each $n$ in the test suite, and the resulting gaps are collected.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the HOMO-LUMO gap for finite trans-polyacetylene chains\n    using a nearest-neighbor tight-binding model.\n    \"\"\"\n    # Define constants from the problem statement.\n    t0_ev = 2.50  # Base hopping integral in eV\n    delta = 0.15      # Dimerization parameter, dimensionless\n\n    # Calculate the alternating hopping integrals t1 and t2.\n    # t1 corresponds to the stronger bond (e.g., double bond character)\n    # t2 corresponds to the weaker bond (e.g., single bond character)\n    t1 = t0_ev * (1 + delta)\n    t2 = t0_ev * (1 - delta)\n\n    # Define the test cases from the problem statement.\n    # n is the number of repeating -CH=CH- units.\n    # The total number of carbon sites is 2n.\n    test_cases = [2, 4, 6, 8]\n\n    # List to store the calculated gaps for each test case.\n    results = []\n\n    # Iterate through each value of n in the test suite.\n    for n in test_cases:\n        # The size of the Hamiltonian matrix is N x N, where N = 2n.\n        N = 2 * n\n\n        # Initialize an N x N zero matrix for the Hamiltonian.\n        hamiltonian_matrix = np.zeros((N, N))\n\n        # Populate the off-diagonal elements of the Hamiltonian matrix.\n        # The matrix is tridiagonal with alternating hopping integrals t1 and t2.\n        # H_i,i+1 = H_i+1,i\n        # The bond between sites 1 and 2 (indices 0 and 1) is t1.\n        # The bond between sites 2 and 3 (indices 1 and 2) is t2.\n        # The pattern is t1, t2, t1, t2, ...\n        for i in range(N - 1):\n            if i % 2 == 0:  # Odd-numbered bond (1-2, 3-4, ...) -> even index i\n                hop_integral = t1\n            else:  # Even-numbered bond (2-3, 4-5, ...) -> odd index i\n                hop_integral = t2\n            \n            hamiltonian_matrix[i, i + 1] = hop_integral\n            hamiltonian_matrix[i + 1, i] = hop_integral\n\n        # The eigenvalues of the Hamiltonian are the one-electron energy levels.\n        # np.linalg.eigh is used for Hermitian (real symmetric) matrices and\n        # returns eigenvalues sorted in ascending order.\n        # We only need the eigenvalues, not the eigenvectors.\n        eigenvalues = np.linalg.eigh(hamiltonian_matrix)[0]\n\n        # In a neutral system with 2n electrons, the first n orbitals are filled.\n        # The HOMO is the n-th orbital, and the LUMO is the (n+1)-th orbital.\n        # In a 0-indexed array, these correspond to indices n-1 and n.\n        e_homo = eigenvalues[n - 1]\n        e_lumo = eigenvalues[n]\n\n        # Calculate the HOMO-LUMO gap.\n        gap = e_lumo - e_homo\n\n        # Append the calculated gap to the results list.\n        results.append(gap)\n\n    # Format the final output as a comma-separated list of strings,\n    # with each gap rounded to 6 decimal places, enclosed in brackets.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\n# Execute the main function.\nsolve()\n```", "id": "2451347"}, {"introduction": "Accurate computational results depend on understanding the approximations made in our models. One of the most important practical considerations in quantum chemistry is the use of finite basis sets to represent molecular orbitals, which can lead to artificial, non-physical effects. This practice confronts a classic artifact known as the Basis Set Superposition Error (BSSE), which can significantly compromise the calculation of intermolecular interaction energies [@problem_id:2451348]. You will apply the standard counterpoise correction to a pre-calculated water dimer system, allowing you to distinguish the true binding energy from computational error and develop a critical skill for obtaining reliable results for non-covalent complexes.", "problem": "You are given total electronic energies, in hartree, for a fixed water dimer geometry and its constituent monomers computed at the same geometry. For each test case, five quantities are provided: the energy of the dimer in the dimer basis set, denoted by $E_{AB}$; the energies of isolated monomers in their own monomer basis sets, denoted by $E_{A}$ and $E_{B}$; and the monomer energies computed in the presence of the partner’s basis functions without electrons or nuclei (ghost basis), denoted by $E_{A}^{\\ast}$ and $E_{B}^{\\ast}$. The binding energy without counterpoise correction is defined by the difference $\\,\\Delta E_{\\mathrm{bind}} = E_{AB} - \\left(E_{A} + E_{B}\\right)\\,$, and the binding energy with counterpoise correction for Basis Set Superposition Error (BSSE) is defined by $\\,\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}} = E_{AB} - \\left(E_{A}^{\\ast} + E_{B}^{\\ast}\\right)\\,$. Convert both binding energies to kilojoules per mole using the conversion $\\,1\\,\\text{hartree} = 2625.49962\\,\\text{kJ}\\cdot\\text{mol}^{-1}\\,$. Express all final energies in $\\text{kJ}\\cdot\\text{mol}^{-1}$, rounded to three decimal places.\n\nUse the following test suite, where each parenthetical group lists $\\left(E_{AB}, E_{A}, E_{B}, E_{A}^{\\ast}, E_{B}^{\\ast}\\right)$ in hartree:\n- Case A: $\\left(-152.058500,\\,-76.025000,\\,-76.025000,\\,-76.025950,\\,-76.025950\\right)$.\n- Case B: $\\left(-152.052300,\\,-76.026000,\\,-76.026000,\\,-76.026000,\\,-76.026000\\right)$.\n- Case C: $\\left(-152.042300,\\,-76.020000,\\,-76.022000,\\,-76.020200,\\,-76.022300\\right)$.\n- Case D: $\\left(-152.010000,\\,-76.000000,\\,-76.000000,\\,-76.003000,\\,-76.003000\\right)$.\n\nYour program must compute, for each case, a two-element list containing the binding energy without counterpoise correction and the binding energy with counterpoise correction, both in $\\text{kJ}\\cdot\\text{mol}^{-1}$ and rounded to three decimal places. Aggregate the results for all cases into a single list in the same order as above. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each element is itself a two-element list, for example, $[\\,[x_{1},y_{1}],\\,[x_{2},y_{2}],\\,[x_{3},y_{3}],\\,[x_{4},y_{4}]\\,]$ with all $x_{i}$ and $y_{i}$ given as floats in $\\text{kJ}\\cdot\\text{mol}^{-1}$ rounded to three decimal places.", "solution": "The problem statement has been subjected to rigorous validation and is found to be valid. It is scientifically grounded, well-posed, and objective. It presents a standard computational chemistry problem involving the calculation of interaction energies with and without correction for Basis Set Superposition Error (BSSE). All necessary data, formulae, and constants are provided, and there are no internal contradictions or ambiguities.\n\nThe task is to compute the binding energy, $\\Delta E$, of a water dimer for several sets of pre-computed electronic energies. This will be done in two ways: first, the simple (uncorrected) binding energy, and second, the binding energy corrected for BSSE using the counterpoise (CP) method of Boys and Bernardi. The results, initially calculated in hartree atomic units, must be converted to kilojoules per mole ($\\text{kJ}\\cdot\\text{mol}^{-1}$) and rounded to three decimal places.\n\nThe uncorrected binding energy, $\\Delta E_{\\mathrm{bind}}$, is defined as the difference between the total energy of the dimer complex, $E_{AB}$, and the sum of the energies of the isolated monomers, $E_{A}$ and $E_{B}$.\n$$\n\\Delta E_{\\mathrm{bind}} = E_{AB} - (E_{A} + E_{B})\n$$\n\nThis definition, however, is flawed when using finite, atom-centered basis sets. In the dimer calculation, each monomer can \"borrow\" basis functions from its partner, an effect not available in the isolated monomer calculations. This additional flexibility, a purely mathematical artifact, allows for a better description of the monomer's electron density, thus artificially lowering the energy of the complex $E_{AB}$. This leads to an overestimation of the binding attraction. This artifact is known as the Basis Set Superposition Error.\n\nTo correct for this, the counterpoise method introduces \"ghost\" orbitals. The energy of each monomer is recalculated in the presence of the basis functions of its partner, but without the partner's nuclei or electrons. These energies are denoted as $E_{A}^{\\ast}$ and $E_{B}^{\\ast}$. By the variational principle, $E_{A}^{\\ast} \\leq E_{A}$ and $E_{B}^{\\ast} \\leq E_{B}$, as the presence of additional basis functions can only lower or maintain the calculated energy.\n\nThe counterpoise-corrected binding energy, $\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}}$, is then defined as:\n$$\n\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}} = E_{AB} - (E_{A}^{\\ast} + E_{B}^{\\ast})\n$$\nThis expression compares the dimer energy with monomer energies that have been calculated in an equivalently extended basis set, thereby providing a more physically meaningful interaction energy.\n\nThe conversion from hartree to $\\text{kJ}\\cdot\\text{mol}^{-1}$ is performed using the provided constant, $k = 2625.49962\\,\\text{kJ}\\cdot\\text{mol}^{-1}\\cdot\\text{hartree}^{-1}$. The procedure for each test case is as follows:\n1.  Calculate $\\Delta E_{\\mathrm{bind}}$ in hartree.\n2.  Calculate $\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}}$ in hartree.\n3.  Multiply both results by the conversion factor $k$.\n4.  Round the final values to three decimal places.\n\nLet us demonstrate with Case A:\nGiven energies in hartree are: $E_{AB} = -152.058500$, $E_{A} = -76.025000$, $E_{B} = -76.025000$, $E_{A}^{\\ast} = -76.025950$, and $E_{B}^{\\ast} = -76.025950$.\n\n1.  Calculate $\\Delta E_{\\mathrm{bind}}$:\n    $$\n    \\Delta E_{\\mathrm{bind}} = -152.058500 - (-76.025000 + -76.025000) = -152.058500 - (-152.050000) = -0.008500\\,\\text{hartree}\n    $$\n2.  Calculate $\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}}$:\n    $$\n    \\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}} = -152.058500 - (-76.025950 + -76.025950) = -152.058500 - (-152.051900) = -0.006600\\,\\text{hartree}\n    $$\n3.  Convert to $\\text{kJ}\\cdot\\text{mol}^{-1}$:\n    $$\n    \\Delta E_{\\mathrm{bind}} (\\text{kJ}\\cdot\\text{mol}^{-1}) = -0.008500 \\times 2625.49962 \\approx -22.31675\\,\\text{kJ}\\cdot\\text{mol}^{-1}\n    $$\n    $$\n    \\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}} (\\text{kJ}\\cdot\\text{mol}^{-1}) = -0.006600 \\times 2625.49962 \\approx -17.32830\\,\\text{kJ}\\cdot\\text{mol}^{-1}\n    $$\n4.  Round to three decimal places:\n    The resulting pair of values for Case A is $[-22.317, -17.328]$.\n\nThis same systematic procedure is applied to all provided test cases. The implementation will follow this logic precisely.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates uncorrected and counterpoise-corrected binding energies for\n    a water dimer based on provided electronic energy values.\n    \"\"\"\n\n    # The conversion factor from hartree to kJ/mol.\n    # 1 hartree = 2625.49962 kJ/mol\n    HARTREE_TO_KJ_MOL = 2625.49962\n\n    # Define the test cases from the problem statement.\n    # Each tuple contains (E_AB, E_A, E_B, E_A_star, E_B_star) in hartree.\n    test_cases = [\n        (-152.058500, -76.025000, -76.025000, -76.025950, -76.025950), # Case A\n        (-152.052300, -76.026000, -76.026000, -76.026000, -76.026000), # Case B\n        (-152.042300, -76.020000, -76.022000, -76.020200, -76.022300), # Case C\n        (-152.010000, -76.000000, -76.000000, -76.003000, -76.003000), # Case D\n    ]\n\n    all_results = []\n    for case in test_cases:\n        E_AB, E_A, E_B, E_A_star, E_B_star = case\n\n        # Calculate binding energy without counterpoise correction (in hartree)\n        # delta_E_bind = E_AB - (E_A + E_B)\n        delta_e_bind_hartree = E_AB - (E_A + E_B)\n\n        # Calculate binding energy with counterpoise correction (in hartree)\n        # delta_E_bind_CP = E_AB - (E_A* + E_B*)\n        delta_e_bind_cp_hartree = E_AB - (E_A_star + E_B_star)\n\n        # Convert both binding energies to kJ/mol\n        delta_e_bind_kj_mol = delta_e_bind_hartree * HARTREE_TO_KJ_MOL\n        delta_e_bind_cp_kj_mol = delta_e_bind_cp_hartree * HARTREE_TO_KJ_MOL\n\n        # Round the results to three decimal places\n        rounded_bind = round(delta_e_bind_kj_mol, 3)\n        rounded_bind_cp = round(delta_e_bind_cp_kj_mol, 3)\n\n        # Append the pair of results for the current case\n        all_results.append([rounded_bind, rounded_bind_cp])\n\n    # Format the final output string to match the required format:\n    # [[x1,y1],[x2,y2],[x3,y3],[x4,y4]]\n    # This is done by creating a string representation for each inner list\n    # and then joining them with commas.\n    inner_strings = [f\"[{res[0]},{res[1]}]\" for res in all_results]\n    final_output_string = f\"[{','.join(inner_strings)}]\"\n\n    # Final print statement in the exact required format.\n    print(final_output_string)\n\nsolve()\n```", "id": "2451348"}]}