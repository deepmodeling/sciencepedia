{"hands_on_practices": [{"introduction": "To begin our hands-on exploration, we will calculate the Electron Localization Function (ELF) for a helium dimer, a classic example of a weakly interacting van der Waals complex [@problem_id:2454950]. This exercise provides a clear and focused introduction to the core components of the ELF calculation, such as the kinetic energy density $\\tau$ and electron density $\\rho$, within a simplified model. By analyzing the ELF along the internuclear axis, you will develop a quantitative understanding of how electron localization is affected in the region between two closed-shell atoms.", "problem": "You are asked to implement a program that evaluates the Electron Localization Function (ELF) for a simplified model of the helium dimer, denoted as $\\mathrm{He}_2$. Use atomic units throughout. All distances must be expressed in bohr, and all densities and energies must be in atomic units. The ELF is dimensionless. Your program must compute values rounded to $6$ decimal places, and booleans must be printed as Python-style $True$ or $False$.\n\nConsider two helium atoms separated by an internuclear distance $R$ along the $x$-axis, with nuclei fixed at positions $x_A=-R/2$ and $x_B=+R/2$. Model each helium atom by a normalized Slater-type $1s$ orbital centered on its nucleus with exponent $\\zeta>0$,\n$$\n\\phi(\\mathbf{r};\\zeta) \\;=\\; \\left(\\frac{\\zeta^3}{\\pi}\\right)^{1/2} \\exp\\!\\big(-\\zeta\\, r\\big),\n$$\nwhere $r$ is the distance from the corresponding nucleus. Assume a closed-shell, spin-unpolarized system with two electrons per atom, and ignore orbital overlap and interference between the two centers so that occupied spatial orbitals are strictly localized on their respective nuclei. Under this independent-atom superposition approximation, the total electron density at a point $\\mathbf{r}$ is\n$$\n\\rho(\\mathbf{r}) \\;=\\; 2\\,\\phi_A(\\mathbf{r})^2 \\;+\\; 2\\,\\phi_B(\\mathbf{r})^2,\n$$\nwhere $\\phi_A$ and $\\phi_B$ are the orbitals centered at $x_A$ and $x_B$, respectively.\n\nEvaluate all quantities along the internuclear axis. For a point at coordinate $x$, the distances are $r_A = |x - x_A|$ and $r_B = |x - x_B|$. Using the standard orbital-based definitions in three dimensions for a spin-unpolarized system:\n- The Kohn–Sham kinetic energy density is\n$$\n\\tau(x) \\;=\\; \\frac{1}{2} \\sum_{i,\\sigma} \\big|\\nabla \\psi_{i\\sigma}(x)\\big|^2,\n$$\nwhich, under the above model with two doubly occupied localized spatial orbitals $\\phi_A$ and $\\phi_B$, reduces to\n$$\n\\tau(x) \\;=\\; \\big|\\nabla \\phi_A(x)\\big|^2 \\;+\\; \\big|\\nabla \\phi_B(x)\\big|^2.\n$$\nFor a $1s$ Slater-type orbital, $\\big|\\nabla \\phi\\big|^2 = \\zeta^2\\,\\phi^2$.\n- The von Weizsäcker kinetic energy density is\n$$\n\\tau_W(x) \\;=\\; \\frac{|\\nabla \\rho(x)|^2}{8\\,\\rho(x)}.\n$$\n- The homogeneous-electron-gas reference kinetic energy density is\n$$\n\\tau_h(x) \\;=\\; \\frac{3}{10}\\,\\big(3\\pi^2\\big)^{2/3}\\,\\rho(x)^{5/3}.\n$$\n\nDefine\n$$\nD(x) \\;=\\; \\tau(x) \\;-\\; \\tau_W(x),\n$$\nand the Electron Localization Function as\n$$\n\\mathrm{ELF}(x) \\;=\\; \\frac{1}{1 + \\left(\\dfrac{D(x)}{\\tau_h(x)}\\right)^2 }.\n$$\n\nAlong the internuclear axis, compute the following three ELF values for each test case:\n- The midpoint value $\\mathrm{ELF}_{\\text{mid}} = \\mathrm{ELF}(x=0)$.\n- The near-nucleus values taken infinitesimally toward the bond region to avoid directional ambiguity at the nucleus,\n$$\n\\mathrm{ELF}_{\\text{left}} = \\mathrm{ELF}\\!\\big(x = -R/2 + \\varepsilon\\big), \\quad \\mathrm{ELF}_{\\text{right}} = \\mathrm{ELF}\\!\\big(x = +R/2 - \\varepsilon\\big),\n$$\nwith $\\varepsilon = 10^{-6}$ bohr.\n\nFor each test case, also return the boolean\n$$\nb \\;=\\; \\left(\\mathrm{ELF}_{\\text{mid}} \\;>\\; \\frac{\\mathrm{ELF}_{\\text{left}} + \\mathrm{ELF}_{\\text{right}}}{2}\\right),\n$$\nwhich answers whether electrons are more localized in the bond midpoint than near the atomic cores in this model.\n\nTest suite (each case is a pair $(R,\\zeta)$ in bohr and bohr$^{-1}$, respectively):\n- Case $1$: $R=5.6$, $\\zeta=1.6875$.\n- Case $2$: $R=3.0$, $\\zeta=1.6875$.\n- Case $3$: $R=10.0$, $\\zeta=1.6875$.\n\nYour program must output a single line containing a comma-separated list enclosed in square brackets. Each test case contributes a sublist of the form\n$$\n\\big[\\mathrm{ELF}_{\\text{mid}},\\;\\mathrm{ELF}_{\\text{left}},\\;\\mathrm{ELF}_{\\text{right}},\\;b\\big],\n$$\nwith each floating-point value rounded to $6$ decimal places. For example, the final output format must be:\n$$\n\\big[ [v_{11},v_{12},v_{13},b_1],\\;[v_{21},v_{22},v_{23},b_2],\\;[v_{31},v_{32},v_{33},b_3] \\big].\n$$", "solution": "The problem statement is validated as scientifically grounded, well-posed, and objective. It presents a standard computational chemistry exercise based on density functional theory concepts. All necessary parameters and definitions are provided, and there are no internal contradictions or logical flaws. The model, while a simplification, is a valid promolecular approximation. The problem is solvable.\n\nHere is the step-by-step reasoning for the solution.\n\nThe objective is to compute the Electron Localization Function (ELF) for a simplified model of the helium dimer, $\\mathrm{He}_2$. The two helium nuclei, $A$ and $B$, are located at positions $x_A = -R/2$ and $x_B = +R/2$ on the $x$-axis, where $R$ is the internuclear distance. All calculations are performed in atomic units.\n\nFirst, we define the mathematical expressions for all quantities along the internuclear axis, for a point at coordinate $x$. The distance of this point from nucleus $A$ is $r_A = |x - x_A| = |x + R/2|$, and from nucleus $B$ is $r_B = |x - x_B| = |x - R/2|$.\n\nThe electronic structure is approximated by two doubly occupied, normalized $1s$ Slater-type orbitals (STOs), $\\phi_A$ and $\\phi_B$, centered on each nucleus. A general $1s$ STO is given by:\n$$\n\\phi(\\mathbf{r};\\zeta) = \\left(\\frac{\\zeta^3}{\\pi}\\right)^{1/2} \\exp(-\\zeta r)\n$$\nThe total electron density $\\rho(x)$ is the superposition of the densities from each atom:\n$$\n\\rho(x) = 2\\,\\phi_A(x)^2 + 2\\,\\phi_B(x)^2\n$$\nLet's define the components from each atom as $f_A(x) = 2\\,\\phi_A(x)^2$ and $f_B(x) = 2\\,\\phi_B(x)^2$. Thus, $\\rho(x) = f_A(x) + f_B(x)$. Explicitly:\n$$\nf_A(x) = 2 \\left(\\frac{\\zeta^3}{\\pi}\\right) \\exp(-2\\zeta r_A) \\quad \\text{and} \\quad f_B(x) = 2 \\left(\\frac{\\zeta^3}{\\pi}\\right) \\exp(-2\\zeta r_B)\n$$\n\nThe calculation of ELF requires several kinetic energy density functionals.\n$1$. The Kohn-Sham kinetic energy density, $\\tau(x)$, for this spin-unpolarized system with two doubly occupied orbitals $\\phi_A$ and $\\phi_B$ is:\n$$\n\\tau(x) = |\\nabla \\phi_A(x)|^2 + |\\nabla \\phi_B(x)|^2\n$$\nFor a $1s$ STO, it is given that $|\\nabla \\phi|^2 = \\zeta^2 \\phi^2$. Therefore,\n$$\n\\tau(x) = \\zeta^2 \\phi_A(x)^2 + \\zeta^2 \\phi_B(x)^2 = \\frac{\\zeta^2}{2} (2\\phi_A(x)^2 + 2\\phi_B(x)^2) = \\frac{\\zeta^2}{2}\\rho(x)\n$$\n\n$2$. The von Weizsäcker kinetic energy density, $\\tau_W(x)$, is:\n$$\n\\tau_W(x) = \\frac{|\\nabla \\rho(x)|^2}{8\\,\\rho(x)}\n$$\nWe need the gradient of the density along the axis, $\\frac{d\\rho}{dx}$. For any point $x \\in (-R/2, R/2)$, we have $x+R/2 > 0$ and $x-R/2 < 0$. The derivative is:\n$$\n\\frac{d\\rho}{dx} = \\frac{d}{dx} \\left(f_A(x) + f_B(x)\\right) = -2\\zeta \\cdot \\text{sgn}(x+R/2) \\cdot f_A(x) - 2\\zeta \\cdot \\text{sgn}(x-R/2) \\cdot f_B(x) = -2\\zeta \\left(f_A(x) - f_B(x)\\right)\n$$\nThus, $|\\nabla \\rho(x)|^2 = (\\frac{d\\rho}{dx})^2 = 4\\zeta^2(f_A(x) - f_B(x))^2$.\n\n$3$. The quantity $D(x)$ is defined as the difference $D(x) = \\tau(x) - \\tau_W(x)$. Substituting the expressions for $\\tau$ and $\\tau_W$:\n$$\nD(x) = \\frac{\\zeta^2}{2}\\rho(x) - \\frac{4\\zeta^2(f_A(x) - f_B(x))^2}{8\\rho(x)} = \\frac{\\zeta^2}{2\\rho(x)} \\left( \\rho(x)^2 - (f_A(x) - f_B(x))^2 \\right)\n$$\nSubstituting $\\rho(x) = f_A(x) + f_B(x)$ and using the algebraic identity $(a+b)^2 - (a-b)^2 = 4ab$:\n$$\nD(x) = \\frac{\\zeta^2}{2\\rho(x)} \\left( (f_A(x)+f_B(x))^2 - (f_A(x)-f_B(x))^2 \\right) = \\frac{\\zeta^2}{2\\rho(x)} \\left( 4f_A(x)f_B(x) \\right) = \\frac{2\\zeta^2 f_A(x) f_B(x)}{f_A(x) + f_B(x)}\n$$\nThis simplified expression for $D(x)$ is valid for all points between the nuclei.\n\n$4$. The reference kinetic energy density is that of a homogeneous electron gas, $\\tau_h(x)$:\n$$\n\\tau_h(x) = C_h \\rho(x)^{5/3}, \\quad \\text{where} \\quad C_h = \\frac{3}{10}(3\\pi^2)^{2/3}\n$$\n\nFinally, the ELF is computed as:\n$$\n\\mathrm{ELF}(x) = \\frac{1}{1 + \\chi(x)^2}, \\quad \\text{where} \\quad \\chi(x) = \\frac{D(x)}{\\tau_h(x)}\n$$\n\nThe problem requires evaluation at three specific points for each test case $(R, \\zeta)$:\n-   The bond midpoint: $x_{\\text{mid}} = 0$.\n-   Near the left nucleus: $x_{\\text{left}} = -R/2 + \\varepsilon$, with $\\varepsilon=10^{-6}$.\n-   Near the right nucleus: $x_{\\text{right}} = +R/2 - \\varepsilon$.\n\nDue to the symmetry of the dimer, where the nuclei are placed symmetrically about $x=0$, the system is symmetric under the inversion $x \\to -x$. The density $\\rho(x)$ is an even function, i.e., $\\rho(x) = \\rho(-x)$. Consequently, $D(x)$ and $\\tau_h(x)$ are also even functions. This implies that $\\mathrm{ELF}(x)$ is an even function of $x$. Therefore, the value at $x_{\\text{right}}$ is identical to the value at $x_{\\text{left}}$:\n$$\n\\mathrm{ELF}_{\\text{right}} = \\mathrm{ELF}(R/2 - \\varepsilon) = \\mathrm{ELF}(-(R/2 - \\varepsilon)) = \\mathrm{ELF}(-R/2 + \\varepsilon) = \\mathrm{ELF}_{\\text{left}}\n$$\nThis symmetry simplifies the computation. The boolean condition $b$ also simplifies:\n$$\nb = \\left(\\mathrm{ELF}_{\\text{mid}} > \\frac{\\mathrm{ELF}_{\\text{left}} + \\mathrm{ELF}_{\\text{right}}}{2}\\right) \\equiv \\left(\\mathrm{ELF}_{\\text{mid}} > \\mathrm{ELF}_{\\text{left}}\\right)\n$$\n\nThe overall algorithm for each test case $(R, \\zeta)$ is as follows:\n$1$. Define the constants $\\varepsilon = 10^{-6}$ and $C_h = \\frac{3}{10}(3\\pi^2)^{2/3}$.\n$2$. Implement a function `calculate_elf(x, R, zeta)` that computes $\\mathrm{ELF}(x)$ using the derived formulas for $\\rho(x)$, $D(x)$, and $\\tau_h(x)$.\n$3$. Compute $\\mathrm{ELF}_{\\text{mid}} = \\text{calculate\\_elf}(0, R, \\zeta)$.\n$4$. Compute $\\mathrm{ELF}_{\\text{left}} = \\text{calculate\\_elf}(-R/2 + \\varepsilon, R, \\zeta)$.\n$5$. Set $\\mathrm{ELF}_{\\text{right}} = \\mathrm{ELF}_{\\text{left}}$.\n$6$. Determine the boolean $b = (\\mathrm{ELF}_{\\text{mid}} > \\mathrm{ELF}_{\\text{left}})$.\n$7$. Store the four resulting values, rounded to $6$ decimal places where required, for final output formatting.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the Electron Localization Function (ELF) for a simplified He2 model\n    at specific points and for given parameter sets.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    # Each case is a tuple (R, zeta)\n    test_cases = [\n        (5.6, 1.6875),\n        (3.0, 1.6875),\n        (10.0, 1.6875),\n    ]\n\n    # Small displacement from the nucleus in bohr\n    epsilon = 1e-6\n    # Constant for homogeneous electron gas kinetic energy density\n    C_h = (3.0 / 10.0) * (3.0 * np.pi**2)**(2.0 / 3.0)\n\n    def calculate_elf(x, R, zeta):\n        \"\"\"\n        Calculates the ELF value at a given point x for a He2 dimer.\n        \n        Args:\n            x (float): The coordinate on the internuclear axis.\n            R (float): The internuclear distance.\n            zeta (float): The exponent of the Slater-type orbital.\n            \n        Returns:\n            float: The ELF value at point x.\n        \"\"\"\n        # Distances from the point x to nuclei A and B\n        r_A = np.abs(x + R / 2.0)\n        r_B = np.abs(x - R / 2.0)\n\n        # Density components from each atom, f_A = 2*phi_A^2, f_B = 2*phi_B^2\n        # The normalization constant is (zeta^3 / pi)\n        norm_factor = 2.0 * (zeta**3 / np.pi)\n        f_A = norm_factor * np.exp(-2.0 * zeta * r_A)\n        f_B = norm_factor * np.exp(-2.0 * zeta * r_B)\n\n        # Total electron density\n        rho = f_A + f_B\n        \n        # Avoid division by zero, although rho should always be positive.\n        if rho == 0:\n            return 0.5 # A neutral value for an undefined case\n\n        # D(x) = tau(x) - tau_W(x), simplified for x between the nuclei\n        D = (2.0 * zeta**2 * f_A * f_B) / rho\n        \n        # Kinetic energy density for a homogeneous electron gas\n        tau_h = C_h * rho**(5.0 / 3.0)\n\n        # Avoid division by zero if tau_h becomes zero.\n        if tau_h == 0:\n            # D must also be zero if rho is zero, so the ratio is ambiguous.\n            # In a region of zero density, ELF is not well-defined.\n            return 0.5 \n\n        # The ELF is defined based on the ratio chi = D/tau_h\n        chi_ratio = D / tau_h\n        elf = 1.0 / (1.0 + chi_ratio**2)\n        \n        return elf\n\n    results_data = []\n    for R, zeta in test_cases:\n        # Define evaluation points\n        x_mid = 0.0\n        x_left = -R / 2.0 + epsilon\n\n        # Compute ELF at the midpoint\n        elf_mid = calculate_elf(x_mid, R, zeta)\n        \n        # Compute ELF near the nucleus\n        elf_left = calculate_elf(x_left, R, zeta)\n        \n        # By symmetry, elf_right is identical to elf_left\n        elf_right = elf_left\n        \n        # Determine if electrons are more localized at the midpoint\n        is_mid_more_localized = elf_mid > elf_left\n\n        results_data.append([elf_mid, elf_left, elf_right, is_mid_more_localized])\n\n    # Format the results into the required single-line string format.\n    # e.g., [[v1,v2,v3,Bool],[v4,v5,v6,Bool]]\n    sub_list_strings = []\n    for res in results_data:\n        # Format floats to 6 decimal places, and booleans as 'True'/'False'\n        s = f\"[{res[0]:.6f},{res[1]:.6f},{res[2]:.6f},{str(res[3])}]\"\n        sub_list_strings.append(s)\n    \n    final_output_string = f\"[{','.join(sub_list_strings)}]\"\n    \n    # Final print statement in the exact required format.\n    print(final_output_string)\n\nsolve()\n```", "id": "2454950"}, {"introduction": "Next, we apply the ELF concept to a fascinating and complex topic in inorganic chemistry: the nature of multiple metal-metal bonds [@problem_id:2454905]. Using a simplified model centered at the bond midpoint, you will investigate how the ELF value changes as we progressively \"build\" a bond from a single $\\sigma$ bond up to a putative quintuple bond. This practice powerfully illustrates how orbitals of different symmetries contribute to electron localization and provides insight into the spatial signatures of $\\sigma$, $\\pi$, and $\\delta$ bonding.", "problem": "You are to write a complete, runnable program that, using the definition of the Electron Localization Function (ELF), evaluates how multiple occupied bonding-like orbitals at the metal–metal midpoint affect localization in a simplified, first-principles model of a transition-metal multiple bond. Consider a diatomic species with the internuclear axis along the $z$-axis and the bond midpoint at the origin. Assume a single-determinant, spin-unpolarized state with $N_p$ electron pairs occupying $N_p$ orthonormal molecular orbitals $\\{\\phi_k(\\mathbf r)\\}$, each represented by a single normalized real Cartesian Gaussian primitive centered at the origin. Use atomic units throughout. The Electron Localization Function (ELF) at position $\\mathbf r$ is defined by\n$$\\mathrm{ELF}(\\mathbf r) \\equiv \\frac{1}{1 + \\left(\\frac{D(\\mathbf r)}{D_\\mathrm{HEG}(\\mathbf r)}\\right)^2},$$\nwith the Pauli excess kinetic energy density\n$$D(\\mathbf r) = \\tau(\\mathbf r) - \\tau_W(\\mathbf r),$$\nthe kinetic energy density\n$$\\tau(\\mathbf r) = 2 \\sum_{k=1}^{N_p} \\left\\lvert \\nabla \\phi_k(\\mathbf r) \\right\\rvert^2,$$\nthe Weizsäcker kinetic energy density\n$$\\tau_W(\\mathbf r) = \\frac{\\left\\lvert \\nabla \\rho(\\mathbf r) \\right\\rvert^2}{8 \\,\\rho(\\mathbf r)},$$\nand the reference homogeneous electron gas quantity for the spin-unpolarized case\n$$D_\\mathrm{HEG}(\\mathbf r) = \\tau_\\mathrm{HEG}(\\mathbf r) = \\frac{3}{10}\\left(3\\pi^2\\right)^{2/3}\\,\\rho(\\mathbf r)^{5/3}.$$\nThe electron density is\n$$\\rho(\\mathbf r) = 2 \\sum_{k=1}^{N_p} \\left\\lvert \\phi_k(\\mathbf r) \\right\\rvert^2.$$\n\nEach occupied orbital is a normalized Cartesian Gaussian primitive centered at the origin of the form\n$$\\phi_{lmn}(\\mathbf r;\\alpha) = \\mathcal N_{lmn}(\\alpha)\\, x^l y^m z^n \\, e^{-\\alpha (x^2+y^2+z^2)},$$\nwhere $\\alpha&gt;0$ is the exponent and $(l,m,n)$ are nonnegative integers. The normalization constant is\n$$\\mathcal N_{lmn}(\\alpha) = \\left(\\frac{2\\alpha}{\\pi}\\right)^{3/4}\\sqrt{\\frac{(4\\alpha)^{l+m+n}}{(2l-1)!!\\,(2m-1)!!\\,(2n-1)!!}},$$\nwith the convention $(-1)!!=1$. Use the following correspondence for the five bonding-like orbitals relevant to multiple bonding along the $z$-axis: $\\sigma$ as $(l,m,n)=(0,0,0)$, $\\pi_x$ as $(1,0,0)$, $\\pi_y$ as $(0,1,0)$, $\\delta_{xy}$ as $(1,1,0)$, and $\\delta_{x^2-y^2}$ as the polynomial $(x^2 - y^2)$ with a single Gaussian exponent $\\alpha_d$; at the bond midpoint, only the values and first derivatives at the origin are relevant.\n\nYour task is to compute the value of $\\mathrm{ELF}(\\mathbf 0)$ at the bond midpoint $\\mathbf r=\\mathbf 0$ for the following five test cases. In all cases, use the exponents given below; there are no adjustable parameters and there is no user input. Use atomic units and report the ELF values as dimensionless floating-point numbers.\n\n- Universal constants and parameters:\n  - Use the definitions above without any additional approximations beyond what is stated.\n  - Use the exponents $\\alpha_s = 0.8$, $\\alpha_p = 0.6$, and $\\alpha_d = 0.6$.\n\n- Test suite (each case specifies the occupied set of orbitals, each doubly occupied):\n  1. Case 1 (single bond): Occupied set $\\{\\sigma\\}$.\n  2. Case 2 (partial double): Occupied set $\\{\\sigma, \\pi_x\\}$.\n  3. Case 3 (triple): Occupied set $\\{\\sigma, \\pi_x, \\pi_y\\}$.\n  4. Case 4 (partial quadruple): Occupied set $\\{\\sigma, \\pi_x, \\pi_y, \\delta_{xy}\\}$.\n  5. Case 5 (quintuple): Occupied set $\\{\\sigma, \\pi_x, \\pi_y, \\delta_{xy}, \\delta_{x^2-y^2}\\}$.\n\nAngle units do not apply. There are no physical units in the output because $\\mathrm{ELF}$ is dimensionless.\n\nYour program must produce a single line of output containing the five results as a comma-separated list enclosed in square brackets, in the same order as the test cases above, with each number rounded to exactly six digits after the decimal point (for example, $[1.234000,0.000001,0.500000,0.750000,0.125000]$).", "solution": "We begin from first principles with the Electron Localization Function (ELF), which for a spin-unpolarized single-determinant wave function is\n$$\\mathrm{ELF}(\\mathbf r) = \\frac{1}{1 + \\left(\\frac{D(\\mathbf r)}{D_\\mathrm{HEG}(\\mathbf r)}\\right)^2}, \\quad D(\\mathbf r)=\\tau(\\mathbf r)-\\tau_W(\\mathbf r), \\quad D_\\mathrm{HEG}(\\mathbf r)=\\tau_\\mathrm{HEG}(\\mathbf r),$$\nwith\n$$\\tau(\\mathbf r)=2\\sum_k \\left\\lvert \\nabla \\phi_k(\\mathbf r)\\right\\rvert^2, \\quad \\tau_W(\\mathbf r)=\\frac{\\left\\lvert \\nabla \\rho(\\mathbf r)\\right\\rvert^2}{8\\rho(\\mathbf r)}, \\quad \\rho(\\mathbf r)=2\\sum_k \\left\\lvert \\phi_k(\\mathbf r)\\right\\rvert^2,$$\nand\n$$\\tau_\\mathrm{HEG}(\\mathbf r)=\\frac{3}{10}\\left(3\\pi^2\\right)^{2/3}\\rho(\\mathbf r)^{5/3}.$$\n\nEach occupied orbital is a normalized Cartesian Gaussian primitive\n$$\\phi_{lmn}(\\mathbf r;\\alpha) = \\mathcal N_{lmn}(\\alpha)\\, x^l y^m z^n\\, e^{-\\alpha r^2}, \\quad r^2 = x^2+y^2+z^2,$$\nwith normalization derived by enforcing $\\int \\lvert \\phi \\rvert^2 \\, d^3 r = 1$. Because the integrals separate over $x$, $y$, and $z$, using $\\int_{-\\infty}^{\\infty} x^{2q} e^{-\\beta x^2} dx = \\frac{(2q-1)!!}{2^q}\\sqrt{\\frac{\\pi}{\\beta^{2q+1}}}$ and $(-1)!!=1$, one obtains\n$$\\mathcal N_{lmn}(\\alpha) = \\left(\\frac{2\\alpha}{\\pi}\\right)^{3/4}\\sqrt{\\frac{(4\\alpha)^{l+m+n}}{(2l-1)!!\\,(2m-1)!!\\,(2n-1)!!}}.$$\n\nWe evaluate all quantities at the bond midpoint $\\mathbf r=\\mathbf 0$. At $\\mathbf 0$, the values and gradients of the occupied orbitals simplify:\n\n- For the $\\sigma$ orbital with $(l,m,n)=(0,0,0)$ and exponent $\\alpha_s$, we have\n$$\\phi_\\sigma(\\mathbf 0)=\\mathcal N_{000}(\\alpha_s)=\\left(\\frac{2\\alpha_s}{\\pi}\\right)^{3/4}, \\quad \\nabla \\phi_\\sigma(\\mathbf 0)=\\mathbf 0.$$\n- For the $\\pi_x$ orbital with $(l,m,n)=(1,0,0)$ and exponent $\\alpha_p$, the value at the origin is zero while the gradient has a finite $x$-component:\n$$\\phi_{\\pi_x}(\\mathbf 0)=0, \\quad \\frac{\\partial \\phi_{\\pi_x}}{\\partial x}\\bigg\\rvert_{\\mathbf 0}=\\mathcal N_{100}(\\alpha_p), \\quad \\frac{\\partial \\phi_{\\pi_x}}{\\partial y}\\bigg\\rvert_{\\mathbf 0}=0, \\quad \\frac{\\partial \\phi_{\\pi_x}}{\\partial z}\\bigg\\rvert_{\\mathbf 0}=0.$$\nThus $\\lvert \\nabla \\phi_{\\pi_x}(\\mathbf 0)\\rvert^2=\\mathcal N_{100}(\\alpha_p)^2$.\nBy symmetry, $\\pi_y$ has $\\lvert \\nabla \\phi_{\\pi_y}(\\mathbf 0)\\rvert^2=\\mathcal N_{010}(\\alpha_p)^2=\\mathcal N_{100}(\\alpha_p)^2$ and zero value at the origin.\n- For $\\delta_{xy}$ with $(l,m,n)=(1,1,0)$ and any $\\delta$ orbital built from second-order polynomials such as $\\delta_{x^2-y^2}$, both the value and all first derivatives vanish at the origin due to the polynomial prefactors containing at least one factor of $x$, $y$, or $z$. Therefore, these $\\delta$ orbitals do not contribute to $\\rho(\\mathbf 0)$ or $\\tau(\\mathbf 0)$.\n\nFrom these midpoint properties, the density and its gradient at $\\mathbf 0$ for any occupied set drawn from $\\{\\sigma, \\pi_x, \\pi_y, \\delta_{xy}, \\delta_{x^2-y^2}\\}$ follow:\n- The density simplifies to\n$$\\rho(\\mathbf 0)=2\\lvert \\phi_\\sigma(\\mathbf 0)\\rvert^2 = 2\\,\\left(\\frac{2\\alpha_s}{\\pi}\\right)^{3/2}.$$\n- The density gradient is $\\nabla \\rho(\\mathbf 0)=\\mathbf 0$ because each contribution is proportional to $\\phi_k(\\mathbf 0)\\,\\nabla \\phi_k(\\mathbf 0)$ and either the value or the gradient vanishes for each orbital at the origin. Hence,\n$$\\tau_W(\\mathbf 0)=\\frac{\\lvert \\nabla \\rho(\\mathbf 0)\\rvert^2}{8\\rho(\\mathbf 0)}=0.$$\n- The kinetic energy density is\n$$\\tau(\\mathbf 0) = 2 \\sum_{k \\in \\mathrm{occ}} \\lvert \\nabla \\phi_k(\\mathbf 0)\\rvert^2 = 2\\,N_{\\pi}\\,\\mathcal N_{100}(\\alpha_p)^2,$$\nwhere $N_{\\pi}$ is the number of occupied $\\pi$ orbitals in the set (either $0$, $1$, or $2$ here), and\n$$\\mathcal N_{100}(\\alpha_p)^2 = \\left(\\frac{2\\alpha_p}{\\pi}\\right)^{3/2}\\,(4\\alpha_p).$$\n\nThe homogeneous electron gas reference at the midpoint is\n$$\\tau_\\mathrm{HEG}(\\mathbf 0) = \\frac{3}{10}\\left(3\\pi^2\\right)^{2/3}\\,\\rho(\\mathbf 0)^{5/3} = \\frac{3}{10}\\left(3\\pi^2\\right)^{2/3}\\,\\left[2\\left(\\frac{2\\alpha_s}{\\pi}\\right)^{3/2}\\right]^{5/3}.$$\n\nTherefore, the midpoint ELF is\n$$\\mathrm{ELF}(\\mathbf 0) = \\frac{1}{1+\\left(\\frac{\\tau(\\mathbf 0)}{\\tau_\\mathrm{HEG}(\\mathbf 0)}\\right)^2} = \\frac{1}{1+\\left(\\frac{2 N_{\\pi}\\,\\mathcal N_{100}(\\alpha_p)^2}{\\tau_\\mathrm{HEG}(\\mathbf 0)}\\right)^2}.$$\n\nWith $\\alpha_s=0.8$ and $\\alpha_p=0.6$, we have\n$$\\mathcal N_{000}(\\alpha_s)^2 = \\left(\\frac{2\\alpha_s}{\\pi}\\right)^{3/2}, \\quad \\mathcal N_{100}(\\alpha_p)^2 = \\left(\\frac{2\\alpha_p}{\\pi}\\right)^{3/2}(4\\alpha_p),$$\nso that $\\rho(\\mathbf 0)$ and $\\tau(\\mathbf 0)$ directly follow. For the five specified cases:\n- Case $1$ has $N_{\\pi}=0$, thus $\\tau(\\mathbf 0)=0$ and $\\mathrm{ELF}(\\mathbf 0)=1$.\n- Case $2$ has $N_{\\pi}=1$, yielding a finite $\\tau(\\mathbf 0)$ and $\\mathrm{ELF}(\\mathbf 0)<1$.\n- Case $3$ has $N_{\\pi}=2$, doubling $\\tau(\\mathbf 0)$ relative to Case $2$ and further reducing $\\mathrm{ELF}(\\mathbf 0)$.\n- Cases $4$ and $5$ include $\\delta$ orbitals, which at $\\mathbf 0$ do not change $\\rho(\\mathbf 0)$ or $\\tau(\\mathbf 0)$, and therefore have the same $\\mathrm{ELF}(\\mathbf 0)$ as Case $3$ in this midpoint analysis.\n\nNumerically, evaluating the expressions above and rounding to six digits after the decimal point yields a single-line output containing five dimensionless floats in the prescribed order. These values quantify how, in this midpoint model, adding $\\pi$-type bonding lowers $\\mathrm{ELF}(\\mathbf 0)$ (reduced localization due to increased Pauli excess kinetic energy) while adding $\\delta$-type bonding does not change $\\mathrm{ELF}(\\mathbf 0)$ at the exact midpoint. This illustrates that a full three-dimensional analysis of the Electron Localization Function (ELF) is necessary to capture the spatial signatures of $\\delta$ bonding in putative quintuple bonds: $\\delta$ contributions are off-axis and thus invisible at the precise bond center, whereas $\\sigma$ and $\\pi$ contributions influence the midpoint through their values and gradients, respectively.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef double_factorial(n: int) -> float:\n    if n = 0:\n        return 1.0\n    res = 1\n    while n > 0:\n        res *= n\n        n -= 2\n    return float(res)\n\ndef norm_const_squared(alpha: float, l: int, m: int, n: int) -> float:\n    # N^2 = (2 alpha / pi)^(3/2) * (4 alpha)^(l+m+n) / [(2l-1)!! (2m-1)!! (2n-1)!!]\n    L = l + m + n\n    pref = (2.0 * alpha / np.pi) ** 1.5\n    df = double_factorial(2*l - 1) * double_factorial(2*m - 1) * double_factorial(2*n - 1)\n    return pref * (4.0 * alpha) ** L / df\n\ndef elf_midpoint(occupied: list[str], alpha_s: float, alpha_p: float, alpha_d: float) -> float:\n    # Density at origin: only sigma contributes\n    Ns2 = norm_const_squared(alpha_s, 0, 0, 0) if 's' in occupied else 0.0\n    rho0 = 2.0 * Ns2\n\n    # Kinetic energy density at origin: only pi orbitals contribute via gradient norm\n    Np2 = norm_const_squared(alpha_p, 1, 0, 0)\n    n_pi = (1 if 'px' in occupied else 0) + (1 if 'py' in occupied else 0)\n    tau0 = 2.0 * n_pi * Np2\n\n    # Weizsäcker term is zero at the origin for this orbital set\n    # tau_W0 = 0.0\n\n    # Homogeneous electron gas kinetic energy density\n    # Guard against rho0 == 0, though for the specified test cases rho0 > 0 always\n    if rho0 = 0.0:\n        # In the absence of density, ELF is conventionally set to 0.5; however, not needed here.\n        return 0.5\n\n    tau_heg0 = (3.0/10.0) * (3.0 * np.pi**2) ** (2.0/3.0) * rho0 ** (5.0/3.0)\n\n    # chi must be non-negative because tau_heg0 >= 0 and tau0 >= 0.\n    # Avoid division by zero, although tau_heg0 should be > 0.\n    if tau_heg0 == 0:\n        return 1.0 if tau0 == 0 else 0.0\n    \n    chi = tau0 / tau_heg0\n    elf0 = 1.0 / (1.0 + chi**2)\n    return elf0\n\ndef solve():\n    # Define exponents (atomic units)\n    alpha_s = 0.8\n    alpha_p = 0.6\n    alpha_d = 0.6\n\n    # Define the test cases as lists of occupied orbitals\n    # Mapping: 's' -> sigma, 'px' -> pi_x, 'py' -> pi_y, 'dxy' -> delta_xy, 'dx2y2' -> delta_x2-y2\n    test_cases = [\n        ['s'],                                # Case 1\n        ['s', 'px'],                          # Case 2\n        ['s', 'px', 'py'],                    # Case 3\n        ['s', 'px', 'py', 'dxy'],             # Case 4\n        ['s', 'px', 'py', 'dxy', 'dx2y2'],    # Case 5\n    ]\n\n    results = []\n    for occ in test_cases:\n        val = elf_midpoint(occ, alpha_s, alpha_p, alpha_d)\n        results.append(val)\n\n    # Format to exactly six digits after the decimal point as required\n    formatted = \"[\" + \",\".join(f\"{x:.6f}\" for x in results) + \"]\"\n    print(formatted)\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2454905"}, {"introduction": "In our final practice, we move from calculating the ELF itself to interpreting its topological features to extract chemical meaning [@problem_id:2454952]. You will use pre-computed geometric descriptors of an ELF bonding basin—its centroid $\\mathbf{r}_c$ and its covariance matrix $\\mathbf{S}$—to derive a quantitative score for bond polarity. This exercise demonstrates how the shape and position of electron localization domains can provide a powerful, geometry-based perspective on the nature of chemical bonds, independent of traditional electronegativity scales.", "problem": "You are given a geometric criterion to predict bond polarity using only the shape of an Electron Localization Function (ELF) basin. Electron Localization Function (ELF) is a dimensionless scalar field, originally defined in terms of the electron density and kinetic energy densities, that highlights spatial regions of localized electron pairs. An ELF basin is a connected region in space where the ELF exceeds a specified threshold. The goal is to compute a dimensionless polarity score from geometric descriptors of a single bond-centered ELF basin without referencing electronegativity.\n\nGiven two nuclei at positions $\\mathbf{r}_A \\in \\mathbb{R}^3$ and $\\mathbf{r}_B \\in \\mathbb{R}^3$ (in $\\text{\\AA}$), define the bond vector $\\mathbf{R} = \\mathbf{r}_B - \\mathbf{r}_A$, the bond length $L = \\lVert \\mathbf{R} \\rVert$ (in $\\text{\\AA}$), the unit vector along the bond $\\mathbf{u} = \\mathbf{R}/L$, and the bond midpoint $\\mathbf{r}_\\text{mid} = (\\mathbf{r}_A + \\mathbf{r}_B)/2$. For an ELF basin associated with that bond, let $\\mathbf{r}_c \\in \\mathbb{R}^3$ (in $\\text{\\AA}$) denote the basin centroid and let $\\mathbf{S} \\in \\mathbb{R}^{3 \\times 3}$ (in $\\text{\\AA}^2$) denote the symmetric, positive semidefinite covariance matrix of the basin’s spatial distribution. Define the following two dimensionless quantities:\n\n1. The normalized centroid displacement along the bond\n$$\nd = \\frac{2}{L}\\,\\mathbf{u} \\cdot \\left(\\mathbf{r}_c - \\mathbf{r}_\\text{mid}\\right).\n$$\n\n2. The fraction of variance aligned with the bond direction\n$$\na = \\begin{cases}\n\\dfrac{\\mathbf{u}^\\mathsf{T}\\mathbf{S}\\,\\mathbf{u}}{\\mathrm{tr}(\\mathbf{S})},  \\text{if } \\mathrm{tr}(\\mathbf{S}) > 0,\\\\\n0,  \\text{if } \\mathrm{tr}(\\mathbf{S}) = 0,\n\\end{cases}\n$$\nwhere $\\mathrm{tr}(\\mathbf{S})$ is the trace of $\\mathbf{S}$.\n\nDefine the predicted bond polarity score as\n$$\np = d \\times a.\n$$\nThe sign of $p$ encodes the directionality of polarity along $\\mathbf{u}$, and the magnitude of $p$ reflects the degree to which the basin shape supports that directionality. This prediction uses only ELF-basin geometry and does not reference electronegativity.\n\nYour task is to write a program that, for each test case below, computes $p$ using the definitions above and outputs the results. All coordinates are given in $\\text{\\AA}$ and all covariance matrix entries are in $\\text{\\AA}^2$. The required output is dimensionless. Express each final result as a float rounded to six decimal places.\n\nTest suite (each case provides $\\mathbf{r}_A$, $\\mathbf{r}_B$, $\\mathbf{r}_c$, and $\\mathbf{S}$):\n\n- Case 1 (symmetric, homonuclear-like):\n  - $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (1,0,0)$\n  - $\\mathbf{r}_c = (0.5,0,0)$\n  - $\\mathbf{S} = \\mathrm{diag}(0.01, 0.01, 0.01)$\n\n- Case 2 (centroid shifted toward $\\mathbf{r}_B$, elongated along bond):\n  - $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (1,0,0)$\n  - $\\mathbf{r}_c = (0.65,0,0)$\n  - $\\mathbf{S} = \\mathrm{diag}(0.04, 0.01, 0.01)$\n\n- Case 3 (centroid shifted toward $\\mathbf{r}_A$, elongated along bond):\n  - $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (1,0,0)$\n  - $\\mathbf{r}_c = (0.35,0,0)$\n  - $\\mathbf{S} = \\mathrm{diag}(0.04, 0.01, 0.01)$\n\n- Case 4 (centroid shifted toward $\\mathbf{r}_B$, elongated perpendicular to bond):\n  - $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (1,0,0)$\n  - $\\mathbf{r}_c = (0.65,0,0)$\n  - $\\mathbf{S} = \\mathrm{diag}(0.01, 0.04, 0.04)$\n\n- Case 5 (longer bond, centroid shifted toward $\\mathbf{r}_B$, elongated along bond):\n  - $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (2,0,0)$\n  - $\\mathbf{r}_c = (1.3,0,0)$\n  - $\\mathbf{S} = \\mathrm{diag}(0.09, 0.01, 0.01)$\n\nFinal output format requirement: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[p1,p2,p3,p4,p5]\"), with each $p_i$ rounded to six decimal places and no additional text.", "solution": "The posed problem is valid. It is a well-defined computational task rooted in the principles of computational quantum chemistry, specifically the analysis of the Electron Localization Function (ELF). The objective is to compute a dimensionless bond polarity score, designated $p$, based purely on the geometric characteristics of an ELF basin associated with a chemical bond. The problem provides all necessary definitions and data. We shall proceed with the derivation and computation.\n\nThe polarity score $p$ is defined as the product of two dimensionless quantities:\n$$\np = d \\times a\n$$\nwhere $d$ is the normalized centroid displacement and $a$ is the fraction of variance aligned with the bond direction. We will analyze each component separately before computing the final score for each test case.\n\nThe first component, $d$, is the normalized centroid displacement, defined as:\n$$\nd = \\frac{2}{L}\\,\\mathbf{u} \\cdot \\left(\\mathbf{r}_c - \\mathbf{r}_\\text{mid}\\right)\n$$\nHere, $\\mathbf{r}_A$ and $\\mathbf{r}_B$ are the positions of the two nuclei, $\\mathbf{R} = \\mathbf{r}_B - \\mathbf{r}_A$ is the bond vector, $L = \\lVert \\mathbf{R} \\rVert$ is the bond length, and $\\mathbf{u} = \\mathbf{R}/L$ is the unit vector along the bond axis. The point $\\mathbf{r}_\\text{mid} = (\\mathbf{r}_A + \\mathbf{r}_B)/2$ is the geometric center of the bond. The vector $\\mathbf{r}_c - \\mathbf{r}_\\text{mid}$ represents the displacement of the ELF basin's centroid $\\mathbf{r}_c$ from this midpoint. The dot product with $\\mathbf{u}$ projects this displacement onto the bond axis. The factor of $2/L$ normalizes this projected displacement by half the bond length, making $d$ dimensionless. A value of $d=+1$ would imply the centroid is located at nucleus $\\mathbf{r}_B$, while $d=-1$ implies it is at nucleus $\\mathbf{r}_A$. If the centroid lies on the perpendicular bisector plane of the bond, $d=0$. Thus, $d$ quantifies the charge asymmetry along the bond axis.\n\nThe second component, $a$, is the fraction of variance aligned with the bond, defined as:\n$$\na = \\begin{cases}\n\\dfrac{\\mathbf{u}^\\mathsf{T}\\mathbf{S}\\,\\mathbf{u}}{\\mathrm{tr}(\\mathbf{S})},  \\text{if } \\mathrm{tr}(\\mathbf{S})  0,\\\\\n0,  \\text{if } \\mathrm{tr}(\\mathbf{S}) = 0,\n\\end{cases}\n$$\nwhere $\\mathbf{S}$ is the covariance matrix of the basin's spatial distribution. The trace of the covariance matrix, $\\mathrm{tr}(\\mathbf{S}) = \\sigma_x^2 + \\sigma_y^2 + \\sigma_z^2$, represents the total variance of the electron distribution within the basin. The quadratic form $\\mathbf{u}^\\mathsf{T}\\mathbf{S}\\,\\mathbf{u}$ calculates the variance of the basin's coordinates projected onto the direction of the bond vector $\\mathbf{u}$. Therefore, $a$ represents the fraction of the total spatial variance that is aligned with the bond axis. A value of $a$ close to $1$ signifies a basin highly elongated along the bond, characteristic of a covalent interaction. A value of $a$ close to $0$ signifies a basin spread out in directions perpendicular to the bond.\n\nThe final polarity score, $p = d \\times a$, combines these two geometric measures. The score is significant only when the centroid is displaced ($d \\neq 0$) and the basin shows significant character along the bond axis ($a  0$). The term $a$ can be interpreted as a weighting factor that modulates the polarity score based on how \"bond-like\" the basin shape is.\n\nWe will now compute the score for each provided test case. All vector and matrix operations will be performed using standard linear algebra.\n\n**Case 1:**\n- $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (1,0,0)$\n- $\\mathbf{r}_c = (0.5,0,0)$\n- $\\mathbf{S} = \\mathrm{diag}(0.01, 0.01, 0.01)$\n\n1.  Calculate bond parameters:\n    $\\mathbf{R} = \\mathbf{r}_B - \\mathbf{r}_A = (1,0,0) - (0,0,0) = (1,0,0)$\n    $L = \\lVert \\mathbf{R} \\rVert = 1$\n    $\\mathbf{u} = \\mathbf{R}/L = (1,0,0)$\n    $\\mathbf{r}_\\text{mid} = (\\mathbf{r}_A + \\mathbf{r}_B)/2 = (0.5,0,0)$\n\n2.  Calculate $d$:\n    $\\mathbf{r}_c - \\mathbf{r}_\\text{mid} = (0.5,0,0) - (0.5,0,0) = (0,0,0)$\n    $d = \\frac{2}{1} \\mathbf{u} \\cdot (0,0,0) = 0$\n\n3.  Since $d=0$, $p = 0 \\times a = 0$.\n    $p_1 = 0.0$\n\n**Case 2:**\n- $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (1,0,0)$\n- $\\mathbf{r}_c = (0.65,0,0)$\n- $\\mathbf{S} = \\mathrm{diag}(0.04, 0.01, 0.01)$\n\n1.  Bond parameters are identical to Case 1: $L=1$, $\\mathbf{u}=(1,0,0)$, $\\mathbf{r}_\\text{mid}=(0.5,0,0)$.\n\n2.  Calculate $d$:\n    $\\mathbf{r}_c - \\mathbf{r}_\\text{mid} = (0.65,0,0) - (0.5,0,0) = (0.15,0,0)$\n    $d = \\frac{2}{1} (1,0,0) \\cdot (0.15,0,0) = 2 \\times 0.15 = 0.3$\n\n3.  Calculate $a$:\n    $\\mathrm{tr}(\\mathbf{S}) = 0.04 + 0.01 + 0.01 = 0.06$\n    $\\mathbf{u}^\\mathsf{T}\\mathbf{S}\\,\\mathbf{u} = (1,0,0) \\begin{pmatrix} 0.04  0  0 \\\\ 0  0.01  0 \\\\ 0  0  0.01 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix} = 0.04$\n    $a = \\frac{0.04}{0.06} = \\frac{2}{3}$\n\n4.  Calculate $p$:\n    $p_2 = d \\times a = 0.3 \\times \\frac{2}{3} = 0.2$\n\n**Case 3:**\n- $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (1,0,0)$\n- $\\mathbf{r}_c = (0.35,0,0)$\n- $\\mathbf{S} = \\mathrm{diag}(0.04, 0.01, 0.01)$\n\n1.  Bond parameters and matrix $\\mathbf{S}$ are identical to Case 2. Thus, $a = 2/3$.\n\n2.  Calculate $d$:\n    $\\mathbf{r}_c - \\mathbf{r}_\\text{mid} = (0.35,0,0) - (0.5,0,0) = (-0.15,0,0)$\n    $d = \\frac{2}{1} (1,0,0) \\cdot (-0.15,0,0) = 2 \\times (-0.15) = -0.3$\n\n3.  Calculate $p$:\n    $p_3 = d \\times a = -0.3 \\times \\frac{2}{3} = -0.2$\n\n**Case 4:**\n- $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (1,0,0)$\n- $\\mathbf{r}_c = (0.65,0,0)$\n- $\\mathbf{S} = \\mathrm{diag}(0.01, 0.04, 0.04)$\n\n1.  Bond parameters and $\\mathbf{r}_c$ are identical to Case 2. Thus, $d=0.3$.\n\n2.  Calculate $a$:\n    $\\mathrm{tr}(\\mathbf{S}) = 0.01 + 0.04 + 0.04 = 0.09$\n    $\\mathbf{u}^\\mathsf{T}\\mathbf{S}\\,\\mathbf{u} = (1,0,0) \\begin{pmatrix} 0.01  0  0 \\\\ 0  0.04  0 \\\\ 0  0  0.04 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix} = 0.01$\n    $a = \\frac{0.01}{0.09} = \\frac{1}{9}$\n\n3.  Calculate $p$:\n    $p_4 = d \\times a = 0.3 \\times \\frac{1}{9} = \\frac{3}{10} \\times \\frac{1}{9} = \\frac{1}{30} \\approx 0.033333$\n\n**Case 5:**\n- $\\mathbf{r}_A = (0,0,0)$, $\\mathbf{r}_B = (2,0,0)$\n- $\\mathbf{r}_c = (1.3,0,0)$\n- $\\mathbf{S} = \\mathrm{diag}(0.09, 0.01, 0.01)$\n\n1.  Calculate bond parameters:\n    $\\mathbf{R} = (2,0,0) - (0,0,0) = (2,0,0)$\n    $L = \\lVert \\mathbf{R} \\rVert = 2$\n    $\\mathbf{u} = \\mathbf{R}/L = (1,0,0)$\n    $\\mathbf{r}_\\text{mid} = (\\mathbf{r}_A + \\mathbf{r}_B)/2 = (1,0,0)$\n\n2.  Calculate $d$:\n    $\\mathbf{r}_c - \\mathbf{r}_\\text{mid} = (1.3,0,0) - (1,0,0) = (0.3,0,0)$\n    $d = \\frac{2}{2} (1,0,0) \\cdot (0.3,0,0) = 1 \\times 0.3 = 0.3$\n\n3.  Calculate $a$:\n    $\\mathrm{tr}(\\mathbf{S}) = 0.09 + 0.01 + 0.01 = 0.11$\n    $\\mathbf{u}^\\mathsf{T}\\mathbf{S}\\,\\mathbf{u} = (1,0,0) \\begin{pmatrix} 0.09  0  0 \\\\ 0  0.01  0 \\\\ 0  0  0.01 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix} = 0.09$\n    $a = \\frac{0.09}{0.11} = \\frac{9}{11}$\n\n4.  Calculate $p$:\n    $p_5 = d \\times a = 0.3 \\times \\frac{9}{11} = \\frac{3}{10} \\times \\frac{9}{11} = \\frac{27}{110} \\approx 0.245455$\n\nThe results for all cases have been computed according to the specified formulae. The implementation will proceed based on this step-by-step logic.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes a geometric bond polarity score based on ELF basin descriptors.\n    \"\"\"\n\n    test_cases = [\n        {\n            \"rA\": np.array([0., 0., 0.]), \"rB\": np.array([1., 0., 0.]),\n            \"rc\": np.array([0.5, 0., 0.]),\n            \"S\": np.diag([0.01, 0.01, 0.01])\n        },\n        {\n            \"rA\": np.array([0., 0., 0.]), \"rB\": np.array([1., 0., 0.]),\n            \"rc\": np.array([0.65, 0., 0.]),\n            \"S\": np.diag([0.04, 0.01, 0.01])\n        },\n        {\n            \"rA\": np.array([0., 0., 0.]), \"rB\": np.array([1., 0., 0.]),\n            \"rc\": np.array([0.35, 0., 0.]),\n            \"S\": np.diag([0.04, 0.01, 0.01])\n        },\n        {\n            \"rA\": np.array([0., 0., 0.]), \"rB\": np.array([1., 0., 0.]),\n            \"rc\": np.array([0.65, 0., 0.]),\n            \"S\": np.diag([0.01, 0.04, 0.04])\n        },\n        {\n            \"rA\": np.array([0., 0., 0.]), \"rB\": np.array([2., 0., 0.]),\n            \"rc\": np.array([1.3, 0., 0.]),\n            \"S\": np.diag([0.09, 0.01, 0.01])\n        }\n    ]\n\n    def compute_polarity_score(rA, rB, rc, S):\n        \"\"\"\n        Calculates the polarity score p for a single bond case.\n\n        Args:\n            rA (np.ndarray): Position vector of nucleus A.\n            rB (np.ndarray): Position vector of nucleus B.\n            rc (np.ndarray): Centroid of the ELF basin.\n            S (np.ndarray): Covariance matrix of the ELF basin.\n\n        Returns:\n            float: The dimensionless polarity score p.\n        \"\"\"\n        # Calculate bond vector and length\n        R_vec = rB - rA\n        L = np.linalg.norm(R_vec)\n        \n        # Check for zero bond length to avoid division by zero\n        if L == 0:\n            return 0.0\n\n        # Calculate unit vector along the bond\n        u_vec = R_vec / L\n\n        # Calculate bond midpoint\n        r_mid = (rA + rB) / 2.0\n\n        # 1. Calculate the normalized centroid displacement, d\n        d = (2.0 / L) * np.dot(u_vec, rc - r_mid)\n\n        # 2. Calculate the fraction of variance aligned with the bond, a\n        tr_S = np.trace(S)\n        if tr_S > 0:\n            # variance_along_bond = u.T @ S @ u\n            variance_along_bond = u_vec.dot(S).dot(u_vec)\n            a = variance_along_bond / tr_S\n        else:\n            # Handle the case of a zero-volume basin (S is null matrix)\n            a = 0.0\n            \n        # Define the predicted bond polarity score, p\n        p = d * a\n        return p\n\n    results = []\n    for case in test_cases:\n        p = compute_polarity_score(case[\"rA\"], case[\"rB\"], case[\"rc\"], case[\"S\"])\n        results.append(f\"{p:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2454952"}]}