{"hands_on_practices": [{"introduction": "The heart of virtual screening is the scoring function, a computational model that estimates the binding affinity between a ligand and a protein. This practice demystifies these functions by guiding you to build one from scratch. You will combine fundamental physical interactions, such as the Lennard-Jones potential for van der Waals forces and a simple model for hydrogen bonds, along with a penalty for the loss of ligand conformational freedom, to create a rudimentary-yet-representative scoring function [@problem_id:2467051]. This exercise provides a foundational understanding of where the scores in computational drug design originate.", "problem": "You are to implement a complete, runnable program that computes a rudimentary molecular docking score for several predefined receptor–ligand test cases used in virtual screening and computational drug design. The total score for a ligand pose is defined as\n$$\nE_{\\text{total}} = \\sum_{\\substack{i \\in \\text{receptor} \\\\ j \\in \\text{ligand}}} E_{\\text{vdw}}(i,j) + \\sum_{\\substack{i \\in \\text{receptor} \\\\ j \\in \\text{ligand}}} E_{\\text{hbond}}(i,j) - N_{\\text{rot}} \\cdot C,\n$$\nwhere $E_{\\text{vdw}}$ is a pairwise van der Waals interaction energy, $E_{\\text{hbond}}$ counts hydrogen bond contributions, $N_{\\text{rot}}$ is the number of rotatable bonds in the ligand, and $C$ is a given constant. All energies must be expressed in kilocalories per mole, i.e., $\\text{kcal} \\cdot \\text{mol}^{-1}$.\n\nDefinitions and parameters:\n- Each atom has a type $t \\in \\{\\text{C}, \\text{N}, \\text{O}\\}$, a position in three-dimensional Cartesian space with coordinates in ångströms (Å), and boolean flags donor $D \\in \\{0,1\\}$ and acceptor $A \\in \\{0,1\\}$ indicating hydrogen bond donor or acceptor capability for that heavy atom.\n- The van der Waals interaction between receptor atom $i$ and ligand atom $j$ at distance $r_{ij}$ (in Å) uses the Lennard–Jones $12$–$6$ potential\n$$\nE_{\\text{vdw}}(i,j) = 4 \\, \\varepsilon_{ij} \\left[\\left(\\frac{\\sigma_{ij}}{r_{ij}}\\right)^{12} - \\left(\\frac{\\sigma_{ij}}{r_{ij}}\\right)^{6}\\right],\n$$\nwith Lorentz–Berthelot combination rules\n$$\n\\sigma_{ij} = \\frac{\\sigma_{t_i} + \\sigma_{t_j}}{2}, \\quad \\varepsilon_{ij} = \\sqrt{\\varepsilon_{t_i}\\,\\varepsilon_{t_j}}.\n$$\nOnly pairs with $r_{ij} \\le r_{\\text{vdw}}^{\\max}$ contribute, where $r_{\\text{vdw}}^{\\max} = 8.0$ Å.\n- The hydrogen bond energy is assigned per qualifying donor–acceptor pair as\n$$\nE_{\\text{hbond}}(i,j) =\n\\begin{cases}\n- E_{\\text{HB}}, & \\text{if } r_{ij} \\le d_{\\text{HB}}^{\\max} \\text{ and } \\big( (D_i = 1 \\land A_j = 1) \\lor (A_i = 1 \\land D_j = 1) \\big), \\\\\n0, & \\text{otherwise,}\n\\end{cases}\n$$\nwith $d_{\\text{HB}}^{\\max} = 3.5$ Å and $E_{\\text{HB}} = 1.5$ $\\text{kcal} \\cdot \\text{mol}^{-1}$. A donor–acceptor pair contributes at most once even if both atoms are flagged as both donor and acceptor.\n- Atomic Lennard–Jones parameters (all $\\varepsilon$ in $\\text{kcal} \\cdot \\text{mol}^{-1}$, all $\\sigma$ in Å):\n  - Carbon $\\text{C}$: $\\varepsilon_{\\text{C}} = 0.12$, $\\sigma_{\\text{C}} = 3.40$.\n  - Nitrogen $\\text{N}$: $\\varepsilon_{\\text{N}} = 0.17$, $\\sigma_{\\text{N}} = 3.30$.\n  - Oxygen $\\text{O}$: $\\varepsilon_{\\text{O}} = 0.20$, $\\sigma_{\\text{O}} = 3.00$.\n\nTest suite:\nImplement your program to evaluate $E_{\\text{total}}$ for each of the following three independent test cases. For each case, use the provided receptor and ligand atoms. Each atom is specified by a tuple (type, $D$, $A$, $x$, $y$, $z$) where type $\\in \\{\\text{C},\\text{N},\\text{O}\\}$, donor flag $D \\in \\{0,1\\}$, acceptor flag $A \\in \\{0,1\\}$, and coordinates $(x,y,z)$ are in Å. Also use the provided $N_{\\text{rot}}$ and $C$ (in $\\text{kcal} \\cdot \\text{mol}^{-1}$) for the penalty term.\n\n- Case $1$:\n  - Receptor atoms:\n    - $(\\text{O}, 0, 1, 0.0, 0.0, 0.0)$\n    - $(\\text{N}, 1, 0, 6.0, 0.0, 0.0)$\n    - $(\\text{C}, 0, 0, 0.0, 4.0, 0.0)$\n  - Ligand atoms:\n    - $(\\text{N}, 1, 0, 2.9, 0.0, 0.0)$\n    - $(\\text{O}, 0, 1, 6.0, 2.9, 0.0)$\n    - $(\\text{C}, 0, 0, 2.8, 4.0, 0.0)$\n  - $N_{\\text{rot}} = 3$, $C = -0.3$.\n- Case $2$ (boundary hydrogen bond distance):\n  - Receptor atoms:\n    - $(\\text{N}, 1, 0, 0.0, 0.0, 0.0)$\n  - Ligand atoms:\n    - $(\\text{O}, 0, 1, 3.5, 0.0, 0.0)$\n  - $N_{\\text{rot}} = 0$, $C = -0.3$.\n- Case $3$ (no contacts within cutoffs):\n  - Receptor atoms:\n    - $(\\text{O}, 0, 1, 0.0, 0.0, 0.0)$\n  - Ligand atoms:\n    - $(\\text{N}, 1, 0, 20.0, 0.0, 0.0)$\n  - $N_{\\text{rot}} = 10$, $C = -0.3$.\n\nRequirements:\n- Compute $E_{\\text{total}}$ in $\\text{kcal} \\cdot \\text{mol}^{-1}$ for each case using the definitions above.\n- Use $r_{\\text{vdw}}^{\\max} = 8.0$ Å, $d_{\\text{HB}}^{\\max} = 3.5$ Å, and $E_{\\text{HB}} = 1.5$ $\\text{kcal} \\cdot \\text{mol}^{-1}$ as specified.\n- The final program output must be a single line containing a comma-separated list of the three numerical results in order for cases $1$, $2$, and $3$, enclosed in square brackets, with each value rounded to exactly $6$ decimal places, for example, $[x_1,x_2,x_3]$ where each $x_k$ is a decimal float with exactly $6$ digits after the decimal point.", "solution": "The problem statement has been critically evaluated and is determined to be valid. It is scientifically grounded in the principles of molecular mechanics, well-posed with a complete and consistent set of definitions and parameters, and expressed in objective, unambiguous language. The task is to implement a specified molecular docking scoring function, which is a standard problem in computational chemistry. We will proceed with the derivation of the solution.\n\nThe total score, $E_{\\text{total}}$, is computed as the sum of three distinct energy terms: the van der Waals interaction energy $E_{\\text{vdw}}$, the hydrogen bond energy $E_{\\text{hbond}}$, and a penalty term for rotatable bonds. The overall formula is given by:\n$$\nE_{\\text{total}} = \\sum_{\\substack{i \\in \\text{receptor} \\\\ j \\in \\text{ligand}}} E_{\\text{vdw}}(i,j) + \\sum_{\\substack{i \\in \\text{receptor} \\\\ j \\in \\text{ligand}}} E_{\\text{hbond}}(i,j) - N_{\\text{rot}} \\cdot C\n$$\nHere, the sums are over all pairs of atoms with atom $i$ from the receptor and atom $j$ from the ligand. All energies are expressed in units of $\\text{kcal} \\cdot \\text{mol}^{-1}$.\n\nThe algorithmic procedure to calculate $E_{\\text{total}}$ for each test case is as follows:\n\nFirst, we define the necessary physical and atomic parameters.\nThe Lennard-Jones parameters for atom types $t \\in \\{\\text{C}, \\text{N}, \\text{O}\\}$ are:\n- Carbon ($\\text{C}$): $\\varepsilon_{\\text{C}} = 0.12$ $\\text{kcal} \\cdot \\text{mol}^{-1}$, $\\sigma_{\\text{C}} = 3.40$ Å.\n- Nitrogen ($\\text{N}$): $\\varepsilon_{\\text{N}} = 0.17$ $\\text{kcal} \\cdot \\text{mol}^{-1}$, $\\sigma_{\\text{N}} = 3.30$ Å.\n- Oxygen ($\\text{O}$): $\\varepsilon_{\\text{O}} = 0.20$ $\\text{kcal} \\cdot \\text{mol}^{-1}$, $\\sigma_{\\text{O}} = 3.00$ Å.\nGlobal constants for interaction cutoffs and strengths are:\n- van der Waals cutoff distance: $r_{\\text{vdw}}^{\\max} = 8.0$ Å.\n- Hydrogen bond cutoff distance: $d_{\\text{HB}}^{\\max} = 3.5$ Å.\n- Base hydrogen bond energy: $E_{\\text{HB}} = 1.5$ $\\text{kcal} \\cdot \\text{mol}^{-1}$.\n\nThe calculation for each case involves iterating through all possible pairs of one receptor atom, $i$, and one ligand atom, $j$. For each pair, we perform the following steps:\n\n1.  **Distance Calculation**: Compute the Euclidean distance $r_{ij}$ between atom $i$ at position $(x_i, y_i, z_i)$ and atom $j$ at position $(x_j, y_j, z_j)$.\n    $$\n    r_{ij} = \\sqrt{(x_i - x_j)^2 + (y_i - y_j)^2 + (z_i - z_j)^2}\n    $$\n2.  **Van der Waals Energy Calculation**:\n    The contribution from the van der Waals interaction is non-zero only if $r_{ij} \\le r_{\\text{vdw}}^{\\max}$. If this condition is met, the pairwise energy $E_{\\text{vdw}}(i,j)$ is calculated using the Lennard-Jones $12$-$6$ potential. The parameters for the mixed pair, $\\sigma_{ij}$ and $\\varepsilon_{ij}$, are derived from the individual atomic parameters using the Lorentz-Berthelot combination rules:\n    $$\n    \\sigma_{ij} = \\frac{\\sigma_{t_i} + \\sigma_{t_j}}{2}, \\quad \\varepsilon_{ij} = \\sqrt{\\varepsilon_{t_i}\\,\\varepsilon_{t_j}}\n    $$\n    The energy is then:\n    $$\n    E_{\\text{vdw}}(i,j) = 4 \\, \\varepsilon_{ij} \\left[\\left(\\frac{\\sigma_{ij}}{r_{ij}}\\right)^{12} - \\left(\\frac{\\sigma_{ij}}{r_{ij}}\\right)^{6}\\right]\n    $$\n    The total van der Waals energy, $\\sum E_{\\text{vdw}}(i,j)$, is the sum of these pairwise energies over all receptor-ligand pairs that satisfy the distance cutoff.\n\n3.  **Hydrogen Bond Energy Calculation**:\n    A hydrogen bond is considered to form if two conditions are met simultaneously: the distance $r_{ij}$ must be less than or equal to the cutoff $d_{\\text{HB}}^{\\max}$, and the atoms must have compatible donor/acceptor roles. Let $D_k$ and $A_k$ be boolean flags ($1$ for true, $0$ for false) for an atom $k$ being a hydrogen bond donor or acceptor, respectively. The condition for a hydrogen bond between atoms $i$ and $j$ is:\n    $$\n    ( D_i = 1 \\land A_j = 1 ) \\lor ( A_i = 1 \\land D_j = 1 )\n    $$\n    If both the distance and donor/acceptor conditions are satisfied, the pairwise contribution is a constant favorable energy, $-E_{\\text{HB}} = -1.5$ $\\text{kcal} \\cdot \\text{mol}^{-1}$.\n    $$\n    E_{\\text{hbond}}(i,j) =\n    \\begin{cases}\n    -1.5, & \\text{if } r_{ij} \\le 3.5 \\text{ and } \\big( (D_i = 1 \\land A_j = 1) \\lor (A_i = 1 \\land D_j = 1) \\big) \\\\\n    0, & \\text{otherwise}\n    \\end{cases}\n    $$\n    The total hydrogen bond energy, $\\sum E_{\\text{hbond}}(i,j)$, is the sum of these contributions over all pairs.\n\n4.  **Rotational Penalty Calculation**:\n    This term accounts for the entropic cost of fixing the conformation of the ligand upon binding. It is computed as $-N_{\\text{rot}} \\cdot C$, where $N_{\\text{rot}}$ is the number of rotatable bonds and $C$ is a scaling constant, both provided for each specific test case.\n\n5.  **Total Score**:\n    The final score $E_{\\text{total}}$ is obtained by summing the total van der Waals energy, the total hydrogen bond energy, and the rotational penalty term. This calculation is performed for each of the three test cases provided. The implementation will utilize the `numpy` library for efficient vector and matrix operations, particularly for calculating distances between all pairs of coordinates. The final numerical results for each case are rounded to $6$ decimal places as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Computes a rudimentary molecular docking score for several predefined \n    receptor-ligand test cases.\n    \"\"\"\n    \n    # Define physical constants and parameters from the problem statement.\n    lj_params = {\n        'C': {'eps': 0.12, 'sig': 3.40},\n        'N': {'eps': 0.17, 'sig': 3.30},\n        'O': {'eps': 0.20, 'sig': 3.00},\n    }\n    R_vdw_max = 8.0\n    D_hb_max = 3.5\n    E_hb = 1.5\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"receptor\": [('O', 0, 1, 0.0, 0.0, 0.0), ('N', 1, 0, 6.0, 0.0, 0.0), ('C', 0, 0, 0.0, 4.0, 0.0)],\n            \"ligand\": [('N', 1, 0, 2.9, 0.0, 0.0), ('O', 0, 1, 6.0, 2.9, 0.0), ('C', 0, 0, 2.8, 4.0, 0.0)],\n            \"n_rot\": 3, \"C\": -0.3\n        },\n        {\n            \"receptor\": [('N', 1, 0, 0.0, 0.0, 0.0)],\n            \"ligand\": [('O', 0, 1, 3.5, 0.0, 0.0)],\n            \"n_rot\": 0, \"C\": -0.3\n        },\n        {\n            \"receptor\": [('O', 0, 1, 0.0, 0.0, 0.0)],\n            \"ligand\": [('N', 1, 0, 20.0, 0.0, 0.0)],\n            \"n_rot\": 10, \"C\": -0.3\n        }\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        receptor_atoms = case[\"receptor\"]\n        ligand_atoms = case[\"ligand\"]\n        n_rot = case[\"n_rot\"]\n        C = case[\"C\"]\n\n        # Prepare atom data for calculation\n        rec_types = [atom[0] for atom in receptor_atoms]\n        rec_coords = np.array([atom[3:] for atom in receptor_atoms])\n        rec_is_donor = np.array([atom[1] for atom in receptor_atoms])\n        rec_is_acceptor = np.array([atom[2] for atom in receptor_atoms])\n\n        lig_types = [atom[0] for atom in ligand_atoms]\n        lig_coords = np.array([atom[3:] for atom in ligand_atoms])\n        lig_is_donor = np.array([atom[1] for atom in ligand_atoms])\n        lig_is_acceptor = np.array([atom[2] for atom in ligand_atoms])\n\n        total_vdw_energy = 0.0\n        total_hbond_energy = 0.0\n\n        # Iterate over all receptor-ligand atom pairs\n        for i in range(len(receptor_atoms)):\n            for j in range(len(ligand_atoms)):\n                dist = np.linalg.norm(rec_coords[i] - lig_coords[j])\n                \n                # Van der Waals interaction calculation\n                # A small tolerance (1e-9) is used to avoid division by zero for overlapping atoms\n                if dist = R_vdw_max and dist > 1e-9:\n                    eps_i = lj_params[rec_types[i]]['eps']\n                    sig_i = lj_params[rec_types[i]]['sig']\n                    eps_j = lj_params[lig_types[j]]['eps']\n                    sig_j = lj_params[lig_types[j]]['sig']\n                    \n                    eps_ij = math.sqrt(eps_i * eps_j)\n                    sig_ij = (sig_i + sig_j) / 2.0\n                    \n                    ratio = sig_ij / dist\n                    vdw_energy = 4.0 * eps_ij * (ratio**12 - ratio**6)\n                    total_vdw_energy += vdw_energy\n\n                # Hydrogen bond interaction calculation\n                if dist = D_hb_max:\n                    is_donor_rec = rec_is_donor[i] == 1\n                    is_acceptor_rec = rec_is_acceptor[i] == 1\n                    is_donor_lig = lig_is_donor[j] == 1\n                    is_acceptor_lig = lig_is_acceptor[j] == 1\n                    \n                    if (is_donor_rec and is_acceptor_lig) or (is_acceptor_rec and is_donor_lig):\n                        total_hbond_energy -= E_hb\n\n        # Rotational penalty term\n        rot_penalty = -n_rot * C\n        \n        # Sum all energy terms to get the total score\n        total_energy = total_vdw_energy + total_hbond_energy + rot_penalty\n        results.append(f\"{total_energy:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2467051"}, {"introduction": "A typical virtual screening campaign generates scores for thousands or even millions of potential drug candidates, including different conformations or chemical forms like tautomers. The next critical step is to analyze these results to identify the most promising candidates for further investigation. This exercise simulates this crucial data-processing stage, where you will rank a set of plausible ligand tautomers based on their docking scores [@problem_id:2467108]. Mastering this simple but rigorous ranking procedure is essential for translating raw computational output into actionable scientific insights.", "problem": "You are given five distinct tautomers of a guanine analogue, each labeled by an integer identifier $i \\in \\{1,2,3,4,5\\}$. For a riboswitch target, each tautomer has an associated docking score $s_i$ in kilocalories per mole (kcal/mol), which is a numerical estimate of the binding free energy. A more negative docking score corresponds to a more favorable (stronger) binding interaction.\n\nDefine the ranking of the five tautomers for a given set of scores $s_1,\\dots,s_5$ as the permutation of the identifiers $\\{1,2,3,4,5\\}$ ordered by nondecreasing score, with ties broken by the smaller identifier. Formally, for two identifiers $i$ and $j$, tautomer $i$ is ranked ahead of tautomer $j$ if either $s_i  s_j$, or $s_i = s_j$ and $i  j$.\n\nUsing only this definition, determine the ranking for each of the following three test cases. All docking scores are to be interpreted in kilocalories per mole (kcal/mol); no unit conversions are required. The docking scores for each test case are provided as ordered $5$-tuples $[s_1,s_2,s_3,s_4,s_5]$:\n- Test Case A (general case): $[-7.2,\\,-8.5,\\,-6.1,\\,-9.0,\\,-8.5]$.\n- Test Case B (complete tie): $[-7.0,\\,-7.0,\\,-7.0,\\,-7.0,\\,-7.0]$.\n- Test Case C (mixed values with a tie): $[-5.0,\\,0.0,\\,-10.0,\\,-5.0,\\,2.3]$.\n\nYour program must compute, for each test case, a list of the five tautomer identifiers in the ranked order as defined above. The final output must aggregate the results for the three test cases into a single line. Specifically, your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each element is itself a comma-separated list of five integers enclosed in square brackets. For example, the output format should be exactly like\n\"[ [i1,i2,i3,i4,i5], [j1,j2,j3,j4,j5], [k1,k2,k3,k4,k5] ]\"\nbut with no spaces anywhere, that is, of the form \"[[...],[...],[...]]\".\n\nThe required outputs are pure lists of integers. Do not include units in the output. Angles are not involved. Do not use percentage signs; no percentages are required. The program must run without any input and must only compute the rankings for the three provided test cases.", "solution": "The problem statement has been subjected to rigorous validation and is deemed valid. It is scientifically grounded in the principles of computational chemistry, specifically ligand-protein docking, and is algorithmically well-posed. The task is to rank a set of molecular tautomers based on a precisely defined criterion involving their docking scores and identifiers. The problem provides all necessary information and contains no contradictions or ambiguities.\n\nThe core of the problem is a sorting task. We are given $5$ tautomers, identified by integers $i \\in \\{1, 2, 3, 4, 5\\}$, and their corresponding docking scores $s_i$. The ranking is an ordering of these identifiers based on a defined rule: tautomer $i$ is ranked ahead of tautomer $j$ if its score is lower ($s_i  s_j$), or if the scores are equal ($s_i = s_j$) and its identifier is smaller ($i  j$). This is equivalent to performing a lexicographical sort on pairs of $(s_i, i)$.\n\nFor each test case, we will construct a list of pairs $(s_i, i)$ from the given scores and their corresponding identifiers, which are implicitly $1$ through $5$. We will then sort this list in ascending order. The final ranked list of identifiers is obtained by extracting the second element from each sorted pair.\n\nLet us apply this procedure to the three given test cases.\n\nTest Case A:\nThe docking scores are given as $[s_1, s_2, s_3, s_4, s_5] = [-7.2, -8.5, -6.1, -9.0, -8.5]$.\nThe pairs of (score, identifier) to be sorted are:\n$$\n(-7.2, 1), (-8.5, 2), (-6.1, 3), (-9.0, 4), (-8.5, 5)\n$$\nSorting these pairs lexicographically yields:\n\\begin{enumerate}\n    \\item $(-9.0, 4)$ has the lowest score.\n    \\item $(-8.5, 2)$ and $(-8.5, 5)$ have the next lowest score. Since the scores are equal, we use the identifiers to break the tie: $2  5$. So, the order is $(-8.5, 2)$, then $(-8.5, 5)$.\n    \\item $(-7.2, 1)$ is next.\n    \\item $(-6.1, 3)$ is last, having the highest (least negative) score.\n\\end{enumerate}\nThe sorted list of pairs is $[(-9.0, 4), (-8.5, 2), (-8.5, 5), (-7.2, 1), (-6.1, 3)]$.\nThe resulting ranked list of identifiers is $[4, 2, 5, 1, 3]$.\n\nTest Case B:\nThe docking scores are $[s_1, s_2, s_3, s_4, s_5] = [-7.0, -7.0, -7.0, -7.0, -7.0]$.\nAll scores are identical. The ranking is therefore determined entirely by the tie-breaking rule, which states that tautomers are ordered by their identifiers in ascending order.\nThe pairs are $[(-7.0, 1), (-7.0, 2), (-7.0, 3), (-7.0, 4), (-7.0, 5)]$.\nSorting these based on the second element (the identifier) gives the original order.\nThe resulting ranked list of identifiers is $[1, 2, 3, 4, 5]$.\n\nTest Case C:\nThe docking scores are $[s_1, s_2, s_3, s_4, s_5] = [-5.0, 0.0, -10.0, -5.0, 2.3]$.\nThe pairs of (score, identifier) are:\n$$\n(-5.0, 1), (0.0, 2), (-10.0, 3), (-5.0, 4), (2.3, 5)\n$$\nSorting these pairs lexicographically yields:\n\\begin{enumerate}\n    \\item $(-10.0, 3)$ has the lowest score.\n    \\item $(-5.0, 1)$ and $(-5.0, 4)$ are next. With equal scores, we break the tie using identifiers: $1  4$. The order is $(-5.0, 1)$, then $(-5.0, 4)$.\n    \\item $(0.0, 2)$ is next.\n    \\item $(2.3, 5)$ has the highest score.\n\\end{enumerate}\nThe sorted list of pairs is $[(-10.0, 3), (-5.0, 1), (-5.0, 4), (0.0, 2), (2.3, 5)]$.\nThe resulting ranked list of identifiers is $[3, 1, 4, 2, 5]$.\n\nThe final program will implement this sorting logic for each test case and format the output as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the ranked order of tautomers for three test cases based on docking scores.\n    \"\"\"\n\n    test_cases = [\n        # Test Case A: general case\n        [-7.2, -8.5, -6.1, -9.0, -8.5],\n        # Test Case B: complete tie\n        [-7.0, -7.0, -7.0, -7.0, -7.0],\n        # Test Case C: mixed values with a tie\n        [-5.0, 0.0, -10.0, -5.0, 2.3],\n    ]\n\n    all_results = []\n    \n    # The identifiers for the five tautomers are 1, 2, 3, 4, 5.\n    identifiers = [1, 2, 3, 4, 5]\n\n    for scores in test_cases:\n        # Pair each score with its corresponding identifier.\n        # The identifiers are 1-based, matching the problem description.\n        # list(zip(scores, identifiers)) will create pairs like (score, identifier).\n        scored_tautomers = list(zip(scores, identifiers))\n        \n        # Sort the pairs. Python's default sorting for tuples is lexicographical.\n        # It will first sort by the score (the first element of the tuple).\n        # In case of a tie in scores, it will sort by the identifier (the second element).\n        # This exactly matches the ranking rule: non-decreasing score, with ties\n        # broken by the smaller identifier.\n        sorted_tautomers = sorted(scored_tautomers)\n        \n        # Extract the identifiers from the sorted list of pairs.\n        ranked_identifiers = [identifier for score, identifier in sorted_tautomers]\n        \n        all_results.append(ranked_identifiers)\n\n    # Format the final output string as per the specified format:\n    # \"[[i1,...,i5],[j1,...,j5],[k1,...,k5]]\" with no spaces.\n    formatted_inner_lists = [f\"[{','.join(map(str, res))}]\" for res in all_results]\n    final_output = f\"[{','.join(formatted_inner_lists)}]\"\n    \n    print(final_output)\n\nsolve()\n```", "id": "2467108"}, {"introduction": "While powerful, scoring functions are approximations of complex physical reality and can sometimes produce misleading results. This thought experiment challenges you to explore a \"pathological\" case where a common type of additive scoring function fails, preferring a physically unrealistic pose with a steric clash over a valid one. You will investigate how the balance between a strong, attractive electrostatic term and an insufficiently harsh steric penalty can \"fool\" the algorithm [@problem_id:2467080]. This practice will develop your critical thinking and foster a deeper appreciation for the inherent limitations of computational models, a vital lesson for any computational scientist.", "problem": "You are asked to formalize, analyze, and implement a deliberately flawed but commonly encountered additive scoring function for ligand-protein interaction in virtual screening. Your task is to design a minimal ligand-protein pair that obtains an artificially favorable score despite a steric clash. The design will be kept intentionally minimal to focus on first principles and logical structure.\n\nStart from the following foundational base:\n- Coulombic electrostatics: the pairwise interaction between point charges $q_i$ and $q_j$ separated by distance $r$ is proportional to $q_i q_j / r$, arising from Coulomb’s law, with softened singularity via a small positive constant to avoid divergence at very short separation.\n- Van der Waals radii: the onset of steric clash between two atoms is heuristically defined when the interatomic separation $r$ is less than the sum of their van der Waals radii $R_{\\mathrm{vdW},i} + R_{\\mathrm{vdW},j}$.\n- Hydrophobic contact reward: a simplistic, distance-truncated linear reward $C(r)$ that increases as atoms approach each other within a cutoff, intended as a proxy for desolvation/contact effects.\n\nDefine a toy scoring function $S(r)$ for a single ligand atom and a single protein atom placed at center-to-center separation $r$:\n- Electrostatic term: $E(r) = - w_{\\mathrm{elec}} \\dfrac{q^2}{r^2 + \\delta^2}$, where $q$ is the magnitude of the partial charge on each atom with opposite sign, $w_{\\mathrm{elec}} \\ge 0$ is a weight, and $\\delta  0$ is a softening parameter.\n- Hydrophobic contact term: $H(r) = w_{\\mathrm{hp}} \\max\\!\\left(0, 1 - \\dfrac{r}{d_{\\mathrm{hp}}}\\right)$, where $w_{\\mathrm{hp}} \\ge 0$ is a weight and $d_{\\mathrm{hp}}  0$ is a cutoff distance.\n- Steric clash penalty: $P(r) = w_{\\mathrm{clash}} \\max\\!\\left(0, R_{\\Sigma} - r\\right)$, where $w_{\\mathrm{clash}} \\ge 0$ is a weight and $R_{\\Sigma} = R_{\\mathrm{L}} + R_{\\mathrm{P}}$ is the sum of the van der Waals radii of the ligand and protein atoms.\n\nThe total score is the sum\n$$\nS(r) \\;=\\; E(r) + H(r) + P(r) \\, .\n$$\nLower values of $S(r)$ are more favorable. A steric clash is present when $r  R_{\\Sigma}$.\n\nYou will consider a fixed “reference” non-clashing separation $r_{\\mathrm{ref}} = R_{\\Sigma}$ and a “pathological” clashing separation $r_{\\mathrm{clash}} = \\alpha R_{\\Sigma}$ with $0  \\alpha  1$. The “fooling” event is defined as $S(r_{\\mathrm{clash}})  S(r_{\\mathrm{ref}})$; that is, the flawed scoring function prefers the clashing configuration even though it violates steric constraints.\n\nYour program must:\n- Construct a minimal system with a single ligand atom and a single protein atom carrying opposite partial charges of equal magnitude $q$ and both treated as hydrophobic.\n- Use the above $S(r)$ to compute $S(r_{\\mathrm{clash}})$ and $S(r_{\\mathrm{ref}})$.\n- Report whether a steric clash is present (boolean) and whether the scoring function is “fooled” (boolean), where “fooled” means $S(r_{\\mathrm{clash}})  S(r_{\\mathrm{ref}})$ evaluated with a strict inequality. To guard against floating-point artifacts, treat values within a tolerance $\\tau = 10^{-9}$ as equal; that is, consider “fooled” to be true only if $S(r_{\\mathrm{clash}}) + \\tau  S(r_{\\mathrm{ref}})$.\n\nAll quantities are dimensionless in arbitrary units; no physical units are required.\n\nTest suite and parameters:\n- Global constants used in all tests:\n  - Opposite charges of magnitude $q = 1$.\n  - Softening parameter $\\delta = 0.5$.\n  - Ligand van der Waals radius $R_{\\mathrm{L}} = 1.7$ and protein van der Waals radius $R_{\\mathrm{P}} = 1.9$, hence $R_{\\Sigma} = 3.6$.\n  - Clash scaling factor $\\alpha = 0.7$, hence $r_{\\mathrm{clash}} = \\alpha R_{\\Sigma} = 2.52$ and $r_{\\mathrm{ref}} = R_{\\Sigma} = 3.6$.\n  - Hydrophobic cutoff $d_{\\mathrm{hp}} = 5$.\n  - Hydrophobic weight $w_{\\mathrm{hp}} = 2$.\n- Three tests that vary the electrostatic and clash weights:\n  - Test A (clearly fooled): $w_{\\mathrm{elec}} = 10$, $w_{\\mathrm{clash}} = 0.05$.\n  - Test B (not fooled due to stronger penalty): $w_{\\mathrm{elec}} = 10$, $w_{\\mathrm{clash}} = 0.4$.\n  - Test C (boundary case with equality): $w_{\\mathrm{elec}} = 10$, and $w_{\\mathrm{clash}}$ set exactly to the threshold value that makes $S(r_{\\mathrm{clash}}) = S(r_{\\mathrm{ref}})$. Derive the threshold by setting $S(r_{\\mathrm{clash}}) - S(r_{\\mathrm{ref}}) = 0$, which yields\n    $$\n    w_{\\mathrm{clash}}^{\\star} \\;=\\; -\\dfrac{\\left[E(r_{\\mathrm{clash}}) - E(r_{\\mathrm{ref}})\\right] + \\left[H(r_{\\mathrm{clash}}) - H(r_{\\mathrm{ref}})\\right]}{R_{\\Sigma} - r_{\\mathrm{clash}}} \\, .\n    $$\n    Use this $w_{\\mathrm{clash}}^{\\star}$ computed from the above constants in your program for Test C.\n\nWhat your program must output:\n- For each test, compute $S(r_{\\mathrm{clash}})$ as a floating-point number, the steric clash boolean, and the “fooled” boolean as defined above.\n- Aggregate the results for all tests into a single flat list in the following order:\n  $[S_{\\mathrm{A}}, \\mathrm{clash}_{\\mathrm{A}}, \\mathrm{fooled}_{\\mathrm{A}}, S_{\\mathrm{B}}, \\mathrm{clash}_{\\mathrm{B}}, \\mathrm{fooled}_{\\mathrm{B}}, S_{\\mathrm{C}}, \\mathrm{clash}_{\\mathrm{C}}, \\mathrm{fooled}_{\\mathrm{C}}]$.\n- Your program should produce a single line of output containing this list as a comma-separated sequence enclosed in square brackets, for example $[x_1, x_2, \\ldots]$.\n\nScientific realism and derivation expectations:\n- Use only the definitions and formulas stated above. Do not introduce any additional potential terms or hidden constraints.\n- The reasoning should begin from the stated foundational base (Coulombic interaction behavior, van der Waals clash definition, and a simple contact reward) and logically derive the “fooling” condition in terms of the weights and distances.\n- Ensure all numerical evaluations in your implementation match the parameters provided here. The code must not prompt for input or read external files.", "solution": "The posed problem is valid. It is a well-defined exercise in computational chemistry, designed to illustrate a fundamental flaw in simplistic additive scoring functions. The problem is scientifically grounded in established principles, mathematically and logically consistent, and all necessary parameters for a unique solution are provided. We shall proceed with a formal analysis and implementation.\n\nThe objective is to analyze a toy scoring function $S(r)$ used in virtual screening and demonstrate a \"fooling\" event, where the function erroneously assigns a more favorable score to a sterically clashing configuration than to a valid, non-clashing configuration.\n\nThe total score $S(r)$ for an interacting atom pair separated by a distance $r$ is given as an additive function:\n$$\nS(r) = E(r) + H(r) + P(r)\n$$\nwhere a lower score indicates a more favorable interaction. The components are defined as:\n1.  An electrostatic interaction term, $E(r)$, which is a softened Coulomb potential:\n    $$\n    E(r) = - w_{\\mathrm{elec}} \\frac{q^2}{r^2 + \\delta^2}\n    $$\n    This term is attractive (favorable, negative) for the given system of opposite charges. $w_{\\mathrm{elec}} \\ge 0$ is a weight, $q$ is the charge magnitude, and $\\delta  0$ is a softening parameter to prevent divergence at $r=0$.\n\n2.  A hydrophobic contact term, $H(r)$:\n    $$\n    H(r) = w_{\\mathrm{hp}} \\max\\left(0, 1 - \\frac{r}{d_{\\mathrm{hp}}}\\right)\n    $$\n    Here, $w_{\\mathrm{hp}} \\ge 0$ is a weight and $d_{\\mathrm{hp}}$ is a cutoff distance. We must note a terminological ambiguity: while this term is named a \"reward,\" its mathematical form contributes a non-negative value to the total score $S(r)$. Since lower scores are more favorable, this term functions as an energetic penalty that increases as the interatomic distance $r$ decreases. Our analysis will strictly adhere to the provided formula.\n\n3.  A steric clash penalty term, $P(r)$:\n    $$\n    P(r) = w_{\\mathrm{clash}} \\max\\left(0, R_{\\Sigma} - r\\right)\n    $$\n    This term applies a linear penalty when the interatomic distance $r$ falls below the sum of the van der Waals radii, $R_{\\Sigma} = R_{\\mathrm{L}} + R_{\\mathrm{P}}$. $w_{\\mathrm{clash}} \\ge 0$ is the penalty weight.\n\nWe analyze two specific configurations:\n- A \"reference\" configuration at distance $r_{\\mathrm{ref}} = R_{\\Sigma}$. This represents the ideal van der Waals contact distance, where the steric penalty is zero by definition: $P(r_{\\mathrm{ref}}) = w_{\\mathrm{clash}} \\max(0, R_{\\Sigma} - R_{\\Sigma}) = 0$.\n- A \"clashing\" configuration at distance $r_{\\mathrm{clash}} = \\alpha R_{\\Sigma}$, with $0  \\alpha  1$. This represents an unphysical steric overlap.\n\nThe scoring function is considered \"fooled\" if it prefers the clashing state, i.e., $S(r_{\\mathrm{clash}})  S(r_{\\mathrm{ref}})$.\nLet us expand this inequality:\n$$\nE(r_{\\mathrm{clash}}) + H(r_{\\mathrm{clash}}) + P(r_{\\mathrm{clash}})  E(r_{\\mathrm{ref}}) + H(r_{\\mathrm{ref}}) + P(r_{\\mathrm{ref}})\n$$\nSubstituting the expressions for the penalty term:\n$$\nE(r_{\\mathrm{clash}}) + H(r_{\\mathrm{clash}}) + w_{\\mathrm{clash}}(R_{\\Sigma} - r_{\\mathrm{clash}})  E(r_{\\mathrm{ref}}) + H(r_{\\mathrm{ref}}) + 0\n$$\nThis inequality reveals the underlying competition. The scoring function is fooled if the sum of favorable changes from bringing the atoms closer, primarily the strengthened electrostatic attraction, overcomes the explicit penalty for the steric clash.\nThe change in energy, $\\Delta S = S(r_{\\mathrm{clash}}) - S(r_{\\mathrm{ref}})$, is given by:\n$$\n\\Delta S = [E(r_{\\mathrm{clash}}) - E(r_{\\mathrm{ref}})] + [H(r_{\\mathrm{clash}}) - H(r_{\\mathrm{ref}})] + w_{\\mathrm{clash}}(R_{\\Sigma} - r_{\\mathrm{clash}})\n$$\nSince $r_{\\mathrm{clash}}  r_{\\mathrm{ref}}$, we have:\n- $E(r_{\\mathrm{clash}})  E(r_{\\mathrm{ref}})$, thus $\\Delta E = E(r_{\\mathrm{clash}}) - E(r_{\\mathrm{ref}})$ is negative (favorable).\n- $H(r_{\\mathrm{clash}}) > H(r_{\\mathrm{ref}})$ (for $r  d_{\\mathrm{hp}}$), thus $\\Delta H = H(r_{\\mathrm{clash}}) - H(r_{\\mathrm{ref}})$ is positive (unfavorable).\n- The term $w_{\\mathrm{clash}}(R_{\\Sigma} - r_{\\mathrm{clash}})$ is the positive steric penalty.\n\nThe \"fooling\" condition $\\Delta S  0$ is met when the penalty weight $w_{\\mathrm{clash}}$ is insufficient to counteract the other terms. Specifically, fooling occurs when:\n$$\nw_{\\mathrm{clash}}  - \\frac{[E(r_{\\mathrm{clash}}) - E(r_{\\mathrm{ref}})] + [H(r_{\\mathrm{clash}}) - H(r_{\\mathrm{ref}})]}{R_{\\Sigma} - r_{\\mathrm{clash}}}\n$$\nThe right-hand side of this inequality defines the critical threshold penalty weight, $w_{\\mathrm{clash}}^{\\star}$, at which $S(r_{\\mathrm{clash}}) = S(r_{\\mathrm{ref}})$. This matches the formula provided for Test C.\n\nFor the implementation, we will first define Python functions corresponding to $E(r)$, $H(r)$, and $P(r)$. We will then calculate the constant values $r_{\\mathrm{ref}}$, $r_{\\mathrm{clash}}$, and the threshold weight $w_{\\mathrm{clash}}^{\\star}$ for Test C. Subsequently, for each of the three test cases (A, B, and C), we compute $S(r_{\\mathrm{clash}})$ and $S(r_{\\mathrm{ref}})$. The steric clash at $r_{\\mathrm{clash}}$ is present by definition, so the corresponding boolean is always true. The \"fooled\" boolean is determined by evaluating the condition $S(r_{\\mathrm{clash}}) + \\tau  S(r_{\\mathrm{ref}})$, where $\\tau=10^{-9}$ is the specified tolerance. The final output will aggregate these results into a single list.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Analyzes a flawed scoring function in computational chemistry.\n    \"\"\"\n    \n    # Global constants as defined in the problem statement\n    Q = 1.0\n    DELTA = 0.5\n    R_L = 1.7\n    R_P = 1.9\n    R_SIGMA = R_L + R_P\n    ALPHA = 0.7\n    D_HP = 5.0\n    W_HP = 2.0\n    TOLERANCE = 1e-9\n\n    # Derived distances\n    r_clash = ALPHA * R_SIGMA\n    r_ref = R_SIGMA\n\n    # Define the scoring function components\n    def E(r, w_elec):\n        \"\"\"Electrostatic term.\"\"\"\n        return -w_elec * np.square(Q) / (np.square(r) + np.square(DELTA))\n\n    def H(r):\n        \"\"\"Hydrophobic term.\"\"\"\n        return W_HP * np.maximum(0, 1 - r / D_HP)\n\n    def P(r, w_clash):\n        \"\"\"Steric penalty term.\"\"\"\n        return w_clash * np.maximum(0, R_SIGMA - r)\n\n    def S(r, w_elec, w_clash):\n        \"\"\"Total score.\"\"\"\n        return E(r, w_elec) + H(r) + P(r, w_clash)\n\n    # Test suite parameters\n    # Test A: w_elec = 10, w_clash = 0.05\n    # Test B: w_elec = 10, w_clash = 0.4\n    # Test C: w_elec = 10, w_clash = w_clash_star\n    \n    w_elec_base = 10.0\n\n    # Calculate w_clash_star for Test C\n    e_clash_base = E(r_clash, w_elec_base)\n    e_ref_base = E(r_ref, w_elec_base)\n    h_clash = H(r_clash)\n    h_ref = H(r_ref)\n    \n    numerator = (e_clash_base - e_ref_base) + (h_clash - h_ref)\n    denominator = R_SIGMA - r_clash\n    w_clash_star = -numerator / denominator\n\n    test_cases = [\n        {'name': 'A', 'w_elec': w_elec_base, 'w_clash': 0.05},\n        {'name': 'B', 'w_elec': w_elec_base, 'w_clash': 0.4},\n        {'name': 'C', 'w_elec': w_elec_base, 'w_clash': w_clash_star},\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        w_elec = case['w_elec']\n        w_clash = case['w_clash']\n        \n        # Calculate scores for clashing and reference configurations\n        s_clash = S(r_clash, w_elec, w_clash)\n        s_ref = S(r_ref, w_elec, w_clash)\n\n        # A steric clash is present by definition at r_clash\n        clash_present = r_clash  R_SIGMA\n        \n        # The scoring function is \"fooled\" if it prefers the clashing state,\n        # considering the floating-point tolerance.\n        is_fooled = (s_clash + TOLERANCE)  s_ref\n        \n        results.extend([s_clash, clash_present, is_fooled])\n\n    # Format the final output as a single comma-separated list in brackets\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2467080"}]}