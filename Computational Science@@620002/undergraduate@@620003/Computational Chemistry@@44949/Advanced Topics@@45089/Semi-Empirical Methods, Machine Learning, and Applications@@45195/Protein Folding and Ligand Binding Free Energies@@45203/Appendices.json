{"hands_on_practices": [{"introduction": "A protein's function is governed by both its stability and the speed at which it folds. This exercise provides a foundational look at the free energy landscape that dictates these properties. By analyzing a hypothetical mutation, you will apply Transition State Theory to connect changes in the energies of the unfolded, transition, and native states to the protein's folding kinetics, translating abstract energy changes into a measurable folding rate. [@problem_id:2460793]", "problem": "A protein folds by a two-state mechanism with a single dominant transition state. Let the standard Gibbs free energies of the unfolded state, transition state, and native state be denoted by $G_{U}$, $G_{\\ddagger}$, and $G_{N}$, respectively. The equilibrium folding free energy is defined as $\\Delta G_{\\text{fold}} = G_{N} - G_{U}$, and the folding free energy barrier is defined as $\\Delta G^{\\ddagger}_{\\text{fold}} = G_{\\ddagger} - G_{U}$. A point mutation stabilizes the unfolded state by $2 \\text{ kcal mol}^{-1}$ and stabilizes the folding transition state by $1 \\text{ kcal mol}^{-1}$ relative to the wild-type protein, while leaving the native state energy unchanged. Assume that Transition State Theory (TST) applies for the folding kinetics at temperature $T$, and that the mutation does not change the pre-exponential factor in the TST rate expression.\n\nUsing $T = 298 \\text{ K}$ and the ideal gas constant $R = 1.9872 \\times 10^{-3} \\text{ kcal mol}^{-1} \\text{ K}^{-1}$, compute the ratio of the mutant to wild-type folding rate constants, $k_{\\text{mut}}/k_{\\text{WT}}$. Report your answer as a single dimensionless number rounded to three significant figures.", "solution": "The system is modeled as a two-state folder with a single transition state. The standard Gibbs free energies of the unfolded, transition, and native states for the wild-type are $G_{U}$, $G_{\\ddagger}$, and $G_{N}$. The mutation stabilizes the unfolded state by $2 \\text{ kcal mol}^{-1}$ and the transition state by $1 \\text{ kcal mol}^{-1}$, with the native state unchanged. Therefore, the mutated energies are\n$$\nG_{U}' = G_{U} - 2 \\text{ kcal mol}^{-1}, \\quad G_{\\ddagger}' = G_{\\ddagger} - 1 \\text{ kcal mol}^{-1}, \\quad G_{N}' = G_{N}.\n$$\nThe folding barrier for the wild-type is $\\Delta G^{\\ddagger}_{\\text{fold}} = G_{\\ddagger} - G_{U}$, and for the mutant it is\n$$\n\\Delta G^{\\ddagger}_{\\text{fold}}{}' = G_{\\ddagger}' - G_{U}' = \\left(G_{\\ddagger} - 1\\right) - \\left(G_{U} - 2\\right) = \\left(G_{\\ddagger} - G_{U}\\right) + 1.\n$$\nThus, the change in the folding barrier upon mutation is\n$$\n\\Delta\\Delta G^{\\ddagger}_{\\text{fold}} = \\Delta G^{\\ddagger}_{\\text{fold}}{}' - \\Delta G^{\\ddagger}_{\\text{fold}} = 1 \\text{ kcal mol}^{-1}.\n$$\nUnder Transition State Theory with an unchanged pre-exponential factor, the folding rate constant is proportional to the Boltzmann factor of the barrier, $k \\propto \\exp\\!\\left(-\\frac{\\Delta G^{\\ddagger}_{\\text{fold}}}{R T}\\right)$. Therefore, the ratio of mutant to wild-type folding rate constants is\n$$\n\\frac{k_{\\text{mut}}}{k_{\\text{WT}}} = \\exp\\!\\left(-\\frac{\\Delta\\Delta G^{\\ddagger}_{\\text{fold}}}{R T}\\right) = \\exp\\!\\left(-\\frac{1 \\text{ kcal mol}^{-1}}{R T}\\right).\n$$\nSubstituting $R = 1.9872 \\times 10^{-3} \\text{ kcal mol}^{-1} \\text{ K}^{-1}$ and $T = 298 \\text{ K}$ gives\n$$\nR T = \\left(1.9872 \\times 10^{-3}\\right) \\times 298 \\text{ kcal mol}^{-1} = 0.5921856 \\text{ kcal mol}^{-1}.\n$$\nHence,\n$$\n\\frac{k_{\\text{mut}}}{k_{\\text{WT}}} = \\exp\\!\\left(-\\frac{1}{0.5921856}\\right) = \\exp\\!\\left(-1.68869\\ldots\\right) \\approx 0.1848.\n$$\nRounded to three significant figures, the dimensionless ratio is $0.185$.", "answer": "$$\\boxed{0.185}$$", "id": "2460793"}, {"introduction": "The total free energy of binding, $\\Delta G_{bind}$, is a sum of enthalpic and entropic contributions, but the entropic term is often the most challenging to grasp intuitively. This hands-on coding exercise demystifies one crucial component: the loss of conformational entropy when a flexible ligand is confined within a binding pocket. You will implement a statistical mechanics model based on the Boltzmann distribution and the Gibbs entropy formula, giving you a practical tool to quantify how constraining molecular motion comes at a direct thermodynamic cost. [@problem_id:2460771]", "problem": "A flexible linear alkane ligand with $N_{\\mathrm{C}}=10$ carbon atoms is modeled as a set of independent torsional degrees of freedom (rotors) describing rotations around internal carbonâ€“carbon single bonds. For a linear chain, assume $N_{\\mathrm{rot}}=N_{\\mathrm{C}}-3$ independent dihedral angles, each with discrete torsional microstates. In the unbound state, each rotor has the same set of allowed staggered microstates with energies $\\{E_i\\}$ relative to the minimum (trans), while in the bound state (tight, constrained pocket) only a subset of these microstates is accessible due to steric restriction. Treat each rotor as independent and identically distributed.\n\nStarting from the canonical ensemble and the Boltzmann distribution, the probability of microstate $i$ at temperature $T$ is $p_i=\\exp(-\\beta E_i)/Z$, with $\\beta=1/(R\\,T)$, $Z=\\sum_i \\exp(-\\beta E_i)$, and $R$ the molar gas constant. Use the Gibbs entropy definition in the canonical ensemble for a discrete distribution, $S=-R\\sum_i p_i \\ln p_i$, to compute the conformational entropy per rotor in the unbound and bound states. Assume the bound state uses the same energy levels $\\{E_i\\}$ but renormalized over the accessible subset. The total conformational entropy is $N_{\\mathrm{rot}}$ times the per-rotor entropy because of independence. The conformational entropy loss upon binding is $\\Delta S_{\\mathrm{conf}}=S_{\\mathrm{unbound}}-S_{\\mathrm{bound}}$, and the corresponding entropic free-energy penalty is $T\\,\\Delta S_{\\mathrm{conf}}$.\n\nImplement a program that, for specified $N_{\\mathrm{rot}}$, temperature $T$ in $\\mathrm{K}$, per-rotor energy levels $\\{E_i\\}$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ for the unbound state, and the index set of microstates accessible in the bound state, computes $T\\,\\Delta S_{\\mathrm{conf}}$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$. Use $R=8.314462618\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$, and ensure all exponentials use energies in $\\mathrm{J}\\,\\mathrm{mol}^{-1}$. The unbound distribution is over the full set $\\{E_i\\}$, while the bound distribution is over the provided subset of indices. If only a single microstate is allowed in the bound state, its entropy is zero by definition.\n\nExpress all final answers in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ as floating-point numbers. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with each value rounded to $6$ decimal places (for example, $[1.234000,5.678900]$).\n\nTest Suite (each tuple is $(N_{\\mathrm{rot}}, \\{E_i\\}\\ \\mathrm{in}\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}, \\text{bound-allowed indices}, T\\ \\mathrm{in}\\ \\mathrm{K})$):\n\n- Case A (happy path, decane, tight pocket): $(7,\\ [0.0,\\,2.93,\\,2.93],\\ [0],\\ 298.15)$.\n- Case B (higher temperature): $(7,\\ [0.0,\\,2.93,\\,2.93],\\ [0],\\ 350.0)$.\n- Case C (degenerate torsions in solution): $(7,\\ [0.0,\\,0.0,\\,0.0],\\ [0],\\ 298.15)$.\n- Case D (boundary: single rotor): $(1,\\ [0.0,\\,2.93,\\,2.93],\\ [0],\\ 298.15)$.\n- Case E (partially constrained pocket allows two states): $(7,\\ [0.0,\\,2.93,\\,2.93],\\ [0,\\,1],\\ 298.15)$.\n\nRequirements and assumptions:\n\n- Treat rotors as independent and identically distributed.\n- Use the same $\\{E_i\\}$ for each rotor, referenced to the lowest unbound energy $E_0=0$.\n- Convert $\\{E_i\\}$ from $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ to $\\mathrm{J}\\,\\mathrm{mol}^{-1}$ before evaluating Boltzmann factors.\n- Compute $S_{\\mathrm{unbound}}$ and $S_{\\mathrm{bound}}$ per rotor using $S=-R\\sum_i p_i\\ln p_i$ with the appropriate normalization in each state; then multiply by $N_{\\mathrm{rot}}$ and by $T$ to get $T\\,\\Delta S_{\\mathrm{conf}}$.\n- Output a single line with the five results in order A through E as $[x_A,x_B,x_C,x_D,x_E]$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.", "solution": "The problem is determined to be valid. It is scientifically grounded in the principles of statistical mechanics and represents a standard problem in computational chemistry concerning the estimation of conformational entropy changes upon ligand binding. The problem is well-posed, providing all necessary parameters and equations for a unique solution.\n\nThe core of the problem lies in the application of the Gibbs entropy formula within the canonical ensemble. For a single torsional degree of freedom (a rotor) with a discrete set of microstates, indexed by $i$, each with energy $E_i$, the entropy at a given temperature $T$ is calculated.\n\nFirst, we define the inverse thermal energy $\\beta = 1/(R T)$, where $R$ is the molar gas constant, given as $R=8.314462618\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$. The probability $p_i$ of a rotor being in microstate $i$ is given by the Boltzmann distribution:\n$$ p_i = \\frac{\\exp(-\\beta E_i)}{Z} $$\nwhere $Z$ is the partition function for the rotor, defined as the sum over all accessible microstates:\n$$ Z = \\sum_i \\exp(-\\beta E_i) $$\nThe energies $E_i$ are provided in units of $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ and must be converted to $\\mathrm{J}\\,\\mathrm{mol}^{-1}$ for use in the exponential term by multiplying by $1000$.\n\nThe conformational entropy for a single rotor, $S_{\\mathrm{rotor}}$, is given by the Gibbs entropy formula:\n$$ S_{\\mathrm{rotor}} = -R \\sum_i p_i \\ln p_i $$\nThe sum is taken over all microstates accessible to the rotor in a given state (unbound or bound).\n\nThe problem states that the rotors are independent and identically distributed. Therefore, the total conformational entropy of the ligand, which has $N_{\\mathrm{rot}}$ rotors, is the sum of the individual rotor entropies:\n$$ S_{\\mathrm{total}} = N_{\\mathrm{rot}} \\cdot S_{\\mathrm{rotor}} $$\nThis quantity must be computed for both the unbound and bound states.\n\nFor the unbound state, the set of microstates includes all given energy levels $\\{E_i\\}$. Let us denote the corresponding rotor entropy as $S_{\\mathrm{unbound, rotor}}$. The calculation proceeds as follows:\n$1$. Compute the partition function $Z_{\\mathrm{unbound}} = \\sum_{i \\in \\text{all}} \\exp(-\\beta E_i)$.\n$2$. Compute the probabilities $p_{i, \\mathrm{unbound}} = \\exp(-\\beta E_i) / Z_{\\mathrm{unbound}}$.\n$3$. Compute the entropy $S_{\\mathrm{unbound, rotor}} = -R \\sum_{i \\in \\text{all}} p_{i, \\mathrm{unbound}} \\ln(p_{i, \\mathrm{unbound}})$.\n\nFor the bound state, only a specific subset of microstates is accessible, defined by a set of indices $\\mathcal{I}_{\\mathrm{bound}}$. The energy levels are the same, but the summation is restricted to this subset. The rotor entropy in the bound state, $S_{\\mathrm{bound, rotor}}$, is calculated analogously:\n$1$. Compute the partition function for the bound state, $Z_{\\mathrm{bound}} = \\sum_{j \\in \\mathcal{I}_{\\mathrm{bound}}} \\exp(-\\beta E_j)$.\n$2$. Compute the probabilities $p_{j, \\mathrm{bound}} = \\exp(-\\beta E_j) / Z_{\\mathrm{bound}}$.\n$3$. Compute the entropy $S_{\\mathrm{bound, rotor}} = -R \\sum_{j \\in \\mathcal{I}_{\\mathrm{bound}}} p_{j, \\mathrm{bound}} \\ln(p_{j, \\mathrm{bound}})$.\nAs specified, if only one state is accessible (i.e., $|\\mathcal{I}_{\\mathrm{bound}}| = 1$), then its probability is $p_0=1$, and the entropy $S_{\\mathrm{bound, rotor}} = -R (1 \\ln 1) = 0$.\n\nThe loss of conformational entropy upon binding is $\\Delta S_{\\mathrm{conf}} = S_{\\mathrm{unbound}} - S_{\\mathrm{bound}}$. For the entire ligand:\n$$ \\Delta S_{\\mathrm{conf}} = N_{\\mathrm{rot}} (S_{\\mathrm{unbound, rotor}} - S_{\\mathrm{bound, rotor}}) $$\nThe corresponding entropic free-energy penalty at temperature $T$ is:\n$$ T \\Delta S_{\\mathrm{conf}} = T \\cdot N_{\\mathrm{rot}} \\cdot (S_{\\mathrm{unbound, rotor}} - S_{\\mathrm{bound, rotor}}) $$\nThe final result is required in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, so the value computed in $\\mathrm{J}\\,\\mathrm{mol}^{-1}$ must be divided by $1000$.\n\nThe algorithmic procedure is as follows:\n$1$. Define a function to compute the per-rotor entropy for a given list of energy levels (in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$) and temperature $T$.\n    a. Inside this function, handle the trivial case where the number of states is less than or equal to $1$, returning an entropy of $0$.\n    b. Convert energies to $\\mathrm{J}\\,\\mathrm{mol}^{-1}$.\n    c. Calculate $\\beta = 1/(R T)$.\n    d. Compute the Boltzmann factors $\\exp(-\\beta E_i)$ and sum them to obtain the partition function $Z$.\n    e. Compute probabilities $p_i = \\exp(-\\beta E_i) / Z$.\n    f. To avoid numerical issues with $\\ln(0)$, the sum for entropy is taken only over terms where $p_i > 0$. The entropy is then $-R \\sum p_i \\ln p_i$.\n$2$. For each test case, apply this function to the full set of energies to get $S_{\\mathrm{unbound, rotor}}$.\n$3$. Apply the function to the subset of energies corresponding to the allowed bound-state indices to get $S_{\\mathrm{bound, rotor}}$.\n$4$. Calculate the final penalty $T \\Delta S_{\\mathrm{conf}} = T \\cdot N_{\\mathrm{rot}} \\cdot (S_{\\mathrm{unbound, rotor}} - S_{\\mathrm{bound, rotor}})$.\n$5$. Convert the final result from $\\mathrm{J}\\,\\mathrm{mol}^{-1}$ to $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ and format as required.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the conformational entropy problem for a given set of test cases.\n    \"\"\"\n    # Define the molar gas constant R in J mol^-1 K^-1\n    R = 8.314462618\n\n    def calculate_rotor_entropy(energies_kj_mol, T):\n        \"\"\"\n        Calculates the conformational entropy for a single rotor given a set of\n        energy levels, temperature, and the gas constant.\n        \n        Args:\n            energies_kj_mol (list of float): Energy levels in kJ/mol.\n            T (float): Temperature in Kelvin.\n        \n        Returns:\n            float: The per-rotor entropy in J mol^-1 K^-1.\n        \"\"\"\n        if len(energies_kj_mol) <= 1:\n            return 0.0\n\n        energies_j_mol = np.array(energies_kj_mol) * 1000.0\n        \n        beta = 1.0 / (R * T)\n        \n        # Calculate Boltzmann factors and the partition function Z\n        boltzmann_factors = np.exp(-beta * energies_j_mol)\n        Z = np.sum(boltzmann_factors)\n\n        if Z == 0.0:\n            return 0.0\n        \n        probabilities = boltzmann_factors / Z\n        \n        # Calculate entropy using S = -R * sum(p_i * ln(p_i))\n        # Handle cases where p_i is zero to avoid log(0) -> -inf.\n        # The limit of p*ln(p) as p->0 is 0.\n        entropy_terms = np.zeros_like(probabilities)\n        non_zero_mask = probabilities > 0.0\n        \n        if np.any(non_zero_mask):\n            log_probs = np.log(probabilities[non_zero_mask])\n            entropy_terms[non_zero_mask] = probabilities[non_zero_mask] * log_probs\n\n        S_rotor = -R * np.sum(entropy_terms)\n        \n        return S_rotor\n\n    # Test Suite (each tuple is (N_rot, {E_i} in kJ/mol, bound-allowed indices, T in K))\n    test_cases = [\n        # Case A: Happy path, decane, tight pocket\n        (7, [0.0, 2.93, 2.93], [0], 298.15),\n        # Case B: Higher temperature\n        (7, [0.0, 2.93, 2.93], [0], 350.0),\n        # Case C: Degenerate torsions in solution\n        (7, [0.0, 0.0, 0.0], [0], 298.15),\n        # Case D: Boundary: single rotor\n        (1, [0.0, 2.93, 2.93], [0], 298.15),\n        # Case E: Partially constrained pocket allows two states\n        (7, [0.0, 2.93, 2.93], [0, 1], 298.15),\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        N_rot, E_unbound_kj_mol, bound_indices, T = case\n        \n        # Calculate entropy for the unbound state (all microstates are accessible)\n        S_unbound_rotor = calculate_rotor_entropy(E_unbound_kj_mol, T)\n        \n        # Create the list of energies for the bound state based on allowed indices\n        E_bound_kj_mol = [E_unbound_kj_mol[i] for i in bound_indices]\n        \n        # Calculate entropy for the bound state\n        S_bound_rotor = calculate_rotor_entropy(E_bound_kj_mol, T)\n        \n        # Calculate total conformational entropy loss in J mol^-1 K^-1\n        delta_S_conf = N_rot * (S_unbound_rotor - S_bound_rotor)\n        \n        # Calculate the entropic free-energy penalty in J/mol\n        T_delta_S_conf_J = T * delta_S_conf\n        \n        # Convert to kJ/mol for the final result\n        T_delta_S_conf_kJ = T_delta_S_conf_J / 1000.0\n        \n        results.append(T_delta_S_conf_kJ)\n\n    # Format the output string to match the problem specification\n    # e.g., [1.234000,5.678900]\n    output_str = \"[\" + \",\".join([f\"{res:.6f}\" for res in results]) + \"]\"\n    print(output_str)\n\nsolve()\n```", "id": "2460771"}, {"introduction": "Beyond simple calculation, a key skill for a computational scientist is designing meaningful \"virtual experiments\" that can explain complex biological observations. This problem challenges you to do just that by proposing a simulation protocol to investigate why a particular mutation increases a protein's melting temperature. Evaluating the options requires you to think critically about the strengths and weaknesses of different computational methods and the importance of accurately modeling the physical environment, including solvent, pH, and electrostatics. [@problem_id:2460835]", "problem": "A small, monomeric protein exhibits an increase in its melting temperature when a surface mutation D$35$N (aspartate at position $35$ to asparagine) is introduced. Differential scanning calorimetry reports that the melting temperature increases by approximately $3\\,\\mathrm{K}$ at pH $7.0$ and ionic strength $150\\,\\mathrm{mM}$ sodium chloride. Consider the thermodynamic definition of folding free energy, where the folding free energy at temperature $T$ is $\\Delta G_{\\mathrm{fold}}(T) = G_{\\mathrm{N}}(T) - G_{\\mathrm{U}}(T)$, with $G_{\\mathrm{N}}$ and $G_{\\mathrm{U}}$ the Gibbs free energies of the native and unfolded ensembles, respectively. The melting temperature $T_m$ is defined by $\\Delta G_{\\mathrm{fold}}(T_m)=0$. Select the simulation protocol that is most appropriate to explain the observed stabilization by directly quantifying the mutationâ€™s effect on folding thermodynamics under the stated solution conditions and linking it to the observed shift in $T_m$.\n\nA. Perform an alchemical mutation thermodynamic cycle using Thermodynamic Integration (TI) or Free Energy Perturbation (FEP) in explicit solvent, mutating Asp$35$ to Asn$35$ separately in the native ensemble and in an unfolded reference ensemble, at several temperatures bracketing the experimental $T_m$. Use Constant pH Molecular Dynamics (CpHMD) to allow protonation state sampling at $pH\\,7.0$ and include $150\\,\\mathrm{mM}$ salt. From the temperature dependence of $\\Delta \\Delta G_{\\mathrm{fold}}(T)$, estimate enthalpic and entropic contributions and predict the shift in $T_m$.\n\nB. Run short vacuum Molecular Dynamics (MD) simulations at elevated temperature (e.g., $500\\,\\mathrm{K}$) for the wild type and mutant and compare time-averaged root-mean-square deviation. Infer that the structure with lower root-mean-square deviation is more stable and thus rationalize the increase in $T_m$.\n\nC. Use rigid-body docking to place chloride ions on the protein surface for the wild type and mutant, and select the model that binds fewer ions as the more stable one, arguing that reduced ion binding explains the higher $T_m$.\n\nD. Compute the change in solvent-accessible surface area upon mutation from a single native structure and estimate the stability change using a surface-tension model $\\Delta G \\approx \\gamma \\Delta A$, without simulating temperature dependence, protonation, or unfolded states.\n\nE. Perform Replica Exchange Molecular Dynamics (REMD) folding simulations in an implicit solvent model for both sequences across a temperature range and estimate $T_m$ as the temperature where the native population equals the unfolded population, keeping protonation states fixed at their standard values.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- A small, monomeric protein.\n- A surface mutation D$35$N (aspartate at position $35$ to asparagine) is introduced.\n- The mutation causes an increase in the melting temperature, $T_m$.\n- The increase in melting temperature, $\\Delta T_m$, is approximately $3\\,\\mathrm{K}$.\n- The experimental conditions are $pH\\,7.0$ and ionic strength $150\\,\\mathrm{mM}$ sodium chloride.\n- The definition of folding free energy at temperature $T$ is $\\Delta G_{\\mathrm{fold}}(T) = G_{\\mathrm{N}}(T) - G_{\\mathrm{U}}(T)$, where $G_{\\mathrm{N}}$ and $G_{\\mathrm{U}}$ are the Gibbs free energies of the native and unfolded ensembles, respectively.\n- The definition of melting temperature, $T_m$, is the temperature at which $\\Delta G_{\\mathrm{fold}}(T_m) = 0$.\n- The goal is to select the most appropriate simulation protocol to explain the observed stabilization by directly quantifying the mutationâ€™s effect on folding thermodynamics and linking it to the observed shift in $T_m$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded, well-posed, and objective. It describes a standard problem in computational biophysics: rationalizing the effect of a point mutation on protein stability. The provided experimental data ($T_m$ shift, $pH$, ionic strength) are realistic and define the context for the computational task. The thermodynamic definitions are standard. The goal is clear and specific, requiring a quantitative comparison of computational methodologies. The problem does not violate any principles of physics, chemistry, or mathematics. It is not incomplete, contradictory, or ambiguous.\n\n**Step 3: Verdict and Action**\nThe problem statement is valid. A solution will be derived.\n\nThe core of the problem is to computationally determine the effect of the D$35$N mutation on the folding free energy, $\\Delta G_{\\mathrm{fold}}(T)$, and relate this to the observed change in melting temperature, $\\Delta T_m$. The change in folding stability due to the mutation is given by $\\Delta \\Delta G_{\\mathrm{fold}}(T) = \\Delta G_{\\mathrm{fold, MUT}}(T) - \\Delta G_{\\mathrm{fold, WT}}(T)$, where WT refers to the wild type (with Asp$35$) and MUT refers to the mutant (with Asn$35$). A negative value of $\\Delta \\Delta G_{\\mathrm{fold}}$ indicates stabilization.\n\nThe most rigorous and computationally efficient method to calculate $\\Delta \\Delta G_{\\mathrm{fold}}$ is through a non-physical, or alchemical, thermodynamic cycle:\n\n$$\n\\begin{CD}\n\\text{WT}_{\\text{(Native)}} @>{\\Delta G_{\\mathrm{fold, WT}}}>> \\text{WT}_{\\text{(Unfolded)}} \\\\\n@V{\\Delta G_{\\mathrm{mut, N}}}VV @VV{\\Delta G_{\\mathrm{mut, U}}}V \\\\\n\\text{MUT}_{\\text{(Native)}} @>>{\\Delta G_{\\mathrm{fold, MUT}}}> \\text{MUT}_{\\text{(Unfolded)}}\n\\end{CD}\n$$\n\nBased on this cycle, since Gibbs free energy is a state function, we have $\\Delta G_{\\mathrm{fold, WT}} + \\Delta G_{\\mathrm{mut, U}} = \\Delta G_{\\mathrm{mut, N}} + \\Delta G_{\\mathrm{fold, MUT}}$. Rearranging gives the desired quantity:\n$$\n\\Delta \\Delta G_{\\mathrm{fold}} = \\Delta G_{\\mathrm{fold, MUT}} - \\Delta G_{\\mathrm{fold, WT}} = \\Delta G_{\\mathrm{mut, U}} - \\Delta G_{\\mathrm{mut, N}}\n$$\nThus, the problem boils down to calculating the free energy of mutating Asp$35$ to Asn$35$ in the solvated native ensemble ($\\Delta G_{\\mathrm{mut, N}}$) and in a solvated unfolded reference ensemble ($\\Delta G_{\\mathrm{mut, U}}$). The experimental conditions ($pH\\,7.0$, $150\\,\\mathrm{mM}$ NaCl) are critical. The D$35$N mutation involves a change of a negatively charged residue (Asp, pKa $\\approx 3.9$) to a neutral polar residue (Asn) at $pH\\,7.0$. This charge change makes an accurate treatment of electrostatics, including solvent screening and specific ion effects, paramount.\n\nThe relationship between the change in folding free energy and the change in melting temperature can be approximated by:\n$$\n\\Delta T_m = T_{m, \\mathrm{MUT}} - T_{m, \\mathrm{WT}} \\approx \\frac{\\Delta \\Delta G_{\\mathrm{fold}}(T_m)}{\\Delta S_{\\mathrm{fold}}(T_m)} = \\frac{T_m \\Delta \\Delta G_{\\mathrm{fold}}(T_m)}{\\Delta H_{\\mathrm{fold}}(T_m)}\n$$\nwhere $T_m$ is the melting temperature of the wild-type protein, and $\\Delta H_{\\mathrm{fold}}$ and $\\Delta S_{\\mathrm{fold}}$ are the enthalpy and entropy of folding, respectively. A quantitative protocol must be able to compute $\\Delta \\Delta G_{\\mathrm{fold}}$ at relevant temperatures to use this relation or predict $\\Delta T_m$ from the temperature dependence of $\\Delta \\Delta G_{\\mathrm{fold}}$.\n\nNow, we evaluate each option.\n\n**A. Perform an alchemical mutation thermodynamic cycle using Thermodynamic Integration (TI) or Free Energy Perturbation (FEP) in explicit solvent, mutating Asp$35$ to Asn$35$ separately in the native ensemble and in an unfolded reference ensemble, at several temperatures bracketing the experimental $T_m$. Use Constant pH Molecular Dynamics (CpHMD) to allow protonation state sampling at $pH\\,7.0$ and include $150\\,\\mathrm{mM}$ salt. From the temperature dependence of $\\Delta \\Delta G_{\\mathrm{fold}}(T)$, estimate enthalpic and entropic contributions and predict the shift in $T_m$.**\nThis protocol is the most rigorous and comprehensive.\n1.  It correctly proposes using an alchemical thermodynamic cycle with established methods like TI or FEP to directly compute $\\Delta \\Delta G_{\\mathrm{fold}}$, which is the correct thermodynamic quantity.\n2.  It specifies using an explicit solvent model with $150\\,\\mathrm{mM}$ salt, which is essential for accurately modeling the electrostatic effects of the charge-changing D$35$N mutation and matching the experimental conditions.\n3.  It proposes using Constant pH Molecular Dynamics (CpHMD), the most physically accurate method to model the system at a fixed $pH$ of $7.0$. This correctly allows the protonation state of titratable residues, including the mutating Asp$35$, to be determined by the simulation environment, accounting for pKa shifts.\n4.  It correctly identifies the need to perform the mutation in both the native and an unfolded reference ensemble to complete the thermodynamic cycle.\n5.  It includes simulations at multiple temperatures, which allows for calculation of the enthalpic ($\\Delta \\Delta H_{\\mathrm{fold}}$) and entropic ($\\Delta \\Delta S_{\\mathrm{fold}}$) components of the stability change, and provides the most robust way to predict the shift in $T_m$.\n\nThis protocol directly addresses every requirement of the problem statement with the highest level of theoretical and computational rigor.\n**Verdict: Correct**\n\n**B. Run short vacuum Molecular Dynamics (MD) simulations at elevated temperature (e.g., $500\\,\\mathrm{K}$) for the wild type and mutant and compare time-averaged root-mean-square deviation. Infer that the structure with lower root-mean-square deviation is more stable and thus rationalize the increase in $T_m$.**\nThis protocol is fundamentally flawed.\n1.  **Vacuum simulation**: Proteins are not stable in vacuum, and their folding thermodynamics are dominated by interactions with the aqueous solvent. A vacuum simulation is wholly inappropriate for this problem, especially given the charge change and specified ionic strength.\n2.  **RMSD as a stability metric**: Root-mean-square deviation (RMSD) is a measure of structural drift from a reference structure, not a measure of thermodynamic stability ($\\Delta G_{\\mathrm{fold}}$ or $T_m$). A lower RMSD in a short simulation does not necessarily correlate with a higher melting temperature.\n3.  **Qualitative, not quantitative**: This method provides no path to quantify $\\Delta \\Delta G_{\\mathrm{fold}}$ or to predict the $\\Delta T_m$ of $3\\,\\mathrm{K}$. It is a crude, qualitative, and physically unsound approach.\n**Verdict: Incorrect**\n\n**C. Use rigid-body docking to place chloride ions on the protein surface for the wild type and mutant, and select the model that binds fewer ions as the more stable one, arguing that reduced ion binding explains the higher $T_m$.**\nThis protocol is ad hoc and physically baseless.\n1.  The primary electrostatic interaction for the negatively charged Asp$35$ would be with cations ($\\text{Na}^+$), not anions ($\\text{Cl}^-$). The premise is questionable.\n2.  Simply counting bound ions is not a measure of thermodynamic stability. Ion binding contributes to the total free energy, but it cannot be isolated and used as a proxy for $\\Delta G_{\\mathrm{fold}}$.\n3.  This method completely ignores the role of the solvent, the unfolded state, temperature, and the overall protein structure and dynamics. It does not compute any relevant thermodynamic quantity.\n**Verdict: Incorrect**\n\n**D. Compute the change in solvent-accessible surface area upon mutation from a single native structure and estimate the stability change using a surface-tension model $\\Delta G \\approx \\gamma \\Delta A$, without simulating temperature dependence, protonation, or unfolded states.**\nThis protocol is a gross oversimplification.\n1.  The model $\\Delta G \\approx \\gamma \\Delta A$ primarily accounts for the hydrophobic effect. The D$35$N mutation is dominated by electrostatics (change of $-1e$ to $0$), which this model completely ignores.\n2.  Using a single static structure neglects the conformational flexibility of the protein, which is essential for calculating free energies.\n3.  The protocol fails to account for the mutation's effect in the unfolded state, a critical component of $\\Delta \\Delta G_{\\mathrm{fold}}$.\n4.  It ignores all specified experimental conditions: temperature, $pH$, and ionic strength. It cannot provide a quantitative explanation for the observation.\n**Verdict: Incorrect**\n\n**E. Perform Replica Exchange Molecular Dynamics (REMD) folding simulations in an implicit solvent model for both sequences across a temperature range and estimate $T_m$ as the temperature where the native population equals the unfolded population, keeping protonation states fixed at their standard values.**\nThis protocol is a valid, but suboptimal and less accurate, approach compared to A.\n1.  **REMD**: This method can, in principle, be used to compute the entire folding thermal denaturation curve and thus directly estimate $T_m$ for both WT and MUT. However, achieving convergence for even a small protein's folding is extremely computationally expensive.\n2.  **Implicit solvent**: This is a major limitation. Implicit solvent models are approximations and are generally less accurate than explicit solvent for describing specific ion effects and the detailed electrostatics of a charge-changing mutation.\n3.  **Fixed protonation states**: Fixing the protonation state of Asp to be deprotonated is an approximation. It is less rigorous than CpHMD (Option A), which allows the protonation equilibrium to be sampled dynamically in response to the local environment at the specified $pH$.\n4.  **Efficiency**: Calculating $\\Delta \\Delta G_{\\mathrm{fold}}$ via an alchemical cycle (Option A) is typically far more computationally efficient than simulating the full folding process twice (once for WT, once for MUT) to the point of convergence, as required by this REMD protocol.\n\nWhile being a plausible strategy, this protocol is inferior to A due to its use of a less accurate physical model (implicit solvent, fixed charges) and its potential for being computationally less efficient for the specific task of quantifying the effect of a single mutation. Therefore, it is not the \"most appropriate\" choice.\n**Verdict: Incorrect**\n\nIn conclusion, Option A describes the most rigorous, physically accurate, and computationally appropriate strategy to address the question posed.", "answer": "$$\\boxed{A}$$", "id": "2460835"}]}