{"hands_on_practices": [{"introduction": "Real-world quantum dynamics are rarely single-event processes. In many systems, such as molecular vibrations or an electron in a quantum well, a particle can pass through a potential energy surface crossing multiple times. This exercise [@problem_id:2457019] builds upon the single-passage Landau-Zener formula to explore a two-passage scenario. By assuming decoherence between passages, you will practice combining probabilities from independent events to predict the final state of the system after a full oscillation.", "problem": "A one-dimensional nuclear degree of freedom moves on two coupled electronic states described by two diabatic potential energy surfaces that cross linearly at coordinate $x_{c}$. Near $x_{c}$, the diabatic energy difference is linear in $x$ with slope magnitude $|\\Delta F|$, and the diabatic electronic coupling is a constant $V$. A classical nuclear trajectory is trapped in a potential well that causes it to pass the crossing point $x_{c}$ twice per oscillation with the same speed magnitude $v$ at each passage. Assume:\n- the motion is sufficiently localized that the linear crossing approximation holds at each passage,\n- the coupling $V$ and the speed $v$ are constant across the crossing region for each passage,\n- complete decoherence between passages so that the two passages are statistically independent,\n- the system starts the period far from the crossing on the lower adiabatic electronic state.\n\nUsing Landau-Zener theory for a single passage through a linear avoided crossing, express the probability (as a decimal, not a percentage) that, after completing one full oscillation (i.e., after two passages through $x_{c}$), the system is found on the upper adiabatic electronic state. Your final answer must be a single closed-form analytic expression in terms of $V$, $v$, $|\\Delta F|$, and $\\hbar$. Do not round your answer.", "solution": "The fundamental component of this problem is the Landau-Zener formula, which gives the probability of a diabatic transition during a single passage through a linear curve crossing. A diabatic transition, in this context, means the system remains on its initial diabatic potential energy curve. This corresponds to a \"hop\" between adiabatic potential energy surfaces. The probability of such a transition, which we denote as $P_{hop}$, is given by:\n$$\nP_{hop} = \\exp\\left(-\\frac{2\\pi V^2}{\\hbar v \\left| \\frac{d(E_1 - E_2)}{dx} \\right| }\\right)\n$$\nHere, $V$ is the diabatic coupling, $v$ is the nuclear speed through the crossing, $\\hbar$ is the reduced Planck constant, and $\\left| \\frac{d(E_1 - E_2)}{dx} \\right|$ is the magnitude of the slope of the difference between the diabatic energies at the crossing point. The problem provides this slope magnitude as $|\\Delta F|$. Therefore, the single-passage probability of hopping from one adiabatic state to the other is:\n$$\np = P_{hop} = \\exp\\left(-\\frac{2\\pi V^2}{\\hbar v |\\Delta F|}\\right)\n$$\nCorrespondingly, the probability of an adiabatic transition (staying on the same adiabatic potential energy surface) during a single passage is:\n$$\nP_{stay} = 1 - p = 1 - \\exp\\left(-\\frac{2\\pi V^2}{\\hbar v |\\Delta F|}\\right)\n$$\nThe problem specifies that the system starts on the lower adiabatic state. It then undergoes two passages through the crossing region. The assumption of complete decoherence between passages implies that the two events are statistically independent. We can calculate the final state probability by tracking the population on each adiabatic state through the two-step process.\n\nLet $P_L(n)$ and $P_U(n)$ be the probabilities of finding the system on the lower and upper adiabatic states, respectively, after $n$ passages.\nThe initial condition is that the system is on the lower adiabatic state:\n$P_L(0) = 1$\n$P_U(0) = 0$\n\nAfter the first passage ($n=1$):\nThe system can transition to the upper state with probability $p$ or remain on the lower state with probability $1-p$.\nThe probability of being on the upper state is:\n$P_U(1) = P_L(0) \\cdot p + P_U(0) \\cdot (1-p) = (1)(p) + (0)(1-p) = p$\nThe probability of being on the lower state is:\n$P_L(1) = P_L(0) \\cdot (1-p) + P_U(0) \\cdot p = (1)(1-p) + (0)(p) = 1-p$\nAs a check, the total probability is $P_U(1) + P_L(1) = p + (1-p) = 1$.\n\nAfter the second passage ($n=2$):\nThe system starts this passage with populations $P_L(1)$ and $P_U(1)$. We wish to find the final probability of being on the upper state, $P_U(2)$. This can be achieved in two mutually exclusive ways:\n1. The system was on the lower state after the first passage (with probability $P_L(1)$) and then hopped to the upper state during the second passage (with probability $p$). The probability for this path is $P_L(1) \\cdot p$.\n2. The system was on the upper state after the first passage (with probability $P_U(1)$) and then stayed on the upper state during the second passage (with probability $1-p$). The probability for this path is $P_U(1) \\cdot (1-p)$.\n\nThe total probability of being on the upper state after two passages is the sum of the probabilities of these two paths:\n$P_U(2) = (P_L(1) \\cdot p) + (P_U(1) \\cdot (1-p))$\nSubstituting the expressions for $P_L(1)$ and $P_U(1)$:\n$P_U(2) = ((1-p) \\cdot p) + (p \\cdot (1-p))$\n$P_U(2) = p(1-p) + p(1-p) = 2p(1-p)$\n\nNow, we substitute the full expression for the single-passage hopping probability $p$:\n$$\nP_U(2) = 2 \\exp\\left(-\\frac{2\\pi V^2}{\\hbar v |\\Delta F|}\\right) \\left[ 1 - \\exp\\left(-\\frac{2\\pi V^2}{\\hbar v |\\Delta F|}\\right) \\right]\n$$\nThis is the final analytical expression for the probability that the system is found on the upper adiabatic state after one full oscillation comprising two independent passages.", "answer": "$$\n\\boxed{2 \\exp\\left(-\\frac{2\\pi V^2}{\\hbar v |\\Delta F|}\\right) \\left(1 - \\exp\\left(-\\frac{2\\pi V^2}{\\hbar v |\\Delta F|}\\right)\\right)}\n$$", "id": "2457019"}, {"introduction": "The Landau-Zener theory is not just descriptive; it is a powerful tool for predicting how we can control chemical processes. This practice [@problem_id:2457015] puts you in the driver's seat, asking you to model a charge transfer reaction where an external electric field modifies the potential energy surfaces. You will translate the theoretical formulas into a computational program to explore how changing the field strength alters the crossing point, the energy gap, and ultimately, the nonadiabatic transition probability.", "problem": "Consider a one-dimensional charge transfer system modeled by two diabatic electronic states interacting along a reaction coordinate $R$. Use atomic units (a.u.) throughout. The diabatic potentials are taken to be linear functions of $R$ with opposite slopes and an energy offset, and an external uniform electric field $F$ modifies their relative energies via a constant dipole moment difference. Let the diabatic energy difference be\n$$\n\\Delta E(R;F) = V_1(R;F) - V_2(R;F) = 2 a \\left(R - R_0\\right) + \\Delta_0 - \\Delta \\mu\\, F,\n$$\nwhere $a$ is a constant slope parameter, $R_0$ is a reference coordinate, $\\Delta_0$ is the zero-field energy offset at $R=R_0$, and $\\Delta \\mu$ is the constant diabatic dipole moment difference that couples to the field $F$.\n\nThe diabatic states are coupled by an off-diagonal electronic coupling $V_{12}(F)$ that depends on the field according to\n$$\nV_{12}(F) = V_{12}^0 \\exp\\!\\left(-\\beta F^2\\right),\n$$\nwhere $V_{12}^0$ and $\\beta$ are positive constants.\n\nAssume the Landau–Zener model applies for a classical trajectory that traverses the crossing region with a constant positive velocity $v$ along $R$. In this model, the crossing coordinate $R_c$ satisfies $V_1(R_c;F) = V_2(R_c;F)$, the minimum adiabatic energy gap at $R_c$ equals $2 \\lvert V_{12}(F)\\rvert$, and the nonadiabatic transition probability to change adiabatic surface upon traversing the avoided crossing is given by the standard Landau–Zener result expressed in terms of the local sweep rate through the diabatic energy difference. Work entirely in atomic units (a.u.), where $\\hbar = 1$.\n\nUse the following parameter values, all in atomic units:\n- $a = 0.2$,\n- $R_0 = 3.0$,\n- $\\Delta_0 = 0.1$,\n- $\\Delta \\mu = 2.0$,\n- $V_{12}^0 = 0.05$,\n- $\\beta = 0.5$.\n\nYour task is to write a complete, runnable program that, for each test case $(F, v)$ listed below, computes:\n- the crossing coordinate $R_c$ in Bohr, rounded to $6$ decimal places,\n- the minimum adiabatic energy gap at the avoided crossing, $2 \\lvert V_{12}(F)\\rvert$, in Hartree, rounded to $6$ decimal places,\n- the Landau–Zener nonadiabatic transition probability to change adiabatic surface, expressed as a decimal rounded to $6$ decimal places.\n\nTest suite (each pair is $(F,v)$, with $F$ in atomic units of electric field and $v$ in Bohr per atomic unit of time):\n- $(0.0, 0.02)$,\n- $(0.5, 0.02)$,\n- $(-0.5, 0.02)$,\n- $(2.0, 0.02)$,\n- $(0.5, 0.2)$,\n- $(4.0, 0.02)$.\n\nFinal output format: Your program should produce a single line of output containing the results for all test cases as a comma-separated list enclosed in square brackets, where each element is the list $[R_c,\\; \\text{gap},\\; P_{\\mathrm{NA}}]$ for one test case. For example, the output must look like\n$[[r_1,g_1,p_1],[r_2,g_2,p_2],\\ldots]$\nwith all numeric entries rounded as specified and expressed in the units indicated above.", "solution": "The solution requires the calculation of three quantities for each test case $(F, v)$: the crossing coordinate $R_c$, the minimum adiabatic energy gap at $R_c$, and the nonadiabatic transition probability $P_{\\mathrm{NA}}$.\n\n**1. Calculation of the Crossing Coordinate, $R_c$**\n\nThe crossing coordinate $R_c$ is the point where the diabatic potential energies are equal, $V_1(R_c;F) = V_2(R_c;F)$. This is equivalent to the condition that their difference is zero: $\\Delta E(R_c;F) = 0$.\nUsing the given expression for the diabatic energy difference:\n$$\n\\Delta E(R;F) = 2 a \\left(R - R_0\\right) + \\Delta_0 - \\Delta \\mu\\, F\n$$\nWe set this expression to zero at $R = R_c$:\n$$\n2 a \\left(R_c - R_0\\right) + \\Delta_0 - \\Delta \\mu\\, F = 0\n$$\nSolving for $R_c$ yields the following formula:\n$$\n2 a (R_c - R_0) = \\Delta \\mu F - \\Delta_0\n$$\n$$\nR_c - R_0 = \\frac{\\Delta \\mu F - \\Delta_0}{2a}\n$$\n$$\nR_c(F) = R_0 + \\frac{\\Delta \\mu F - \\Delta_0}{2a}\n$$\nThis formula allows for the direct calculation of the crossing coordinate for any given electric field strength $F$.\n\n**2. Calculation of the Minimum Adiabatic Energy Gap**\n\nThe problem statement specifies that the minimum adiabatic energy gap at the avoided crossing is equal to $2 \\lvert V_{12}(F)\\rvert$. The field-dependent diabatic coupling $V_{12}(F)$ is given by:\n$$\nV_{12}(F) = V_{12}^0 \\exp\\!\\left(-\\beta F^2\\right)\n$$\nSince the parameters $V_{12}^0$ and $\\beta$ are given as positive constants, the value of $V_{12}(F)$ is always real and positive for any real field $F$. Therefore, the absolute value is redundant. The energy gap, which we denote as $\\Delta E_{\\text{gap}}$, is:\n$$\n\\Delta E_{\\text{gap}}(F) = 2 V_{12}(F) = 2 V_{12}^0 \\exp(-\\beta F^2)\n$$\n\n**3. Calculation of the Landau-Zener Nonadiabatic Transition Probability, $P_{\\mathrm{NA}}$**\n\nThe Landau-Zener probability for a nonadiabatic transition (i.e., for the system to remain on the diabatic curve and thus switch adiabatic surfaces) is given by the formula:\n$$\nP_{\\mathrm{NA}} = \\exp\\left( -\\frac{2\\pi \\lvert V_{12} \\rvert^2}{\\hbar \\left| \\frac{d}{dt} \\left(V_1 - V_2\\right) \\right|_{R=R_c}} \\right)\n$$\nHere, $V_{12}$ is the coupling at the crossing, which is $V_{12}(F)$. In atomic units, $\\hbar=1$. The term in the denominator is the time rate of change of the diabatic energy difference as the system passes through the crossing point. This sweep rate can be expressed using the chain rule:\n$$\n\\frac{d}{dt} \\left(V_1 - V_2\\right) = \\frac{d (\\Delta E)}{dt} = \\frac{d (\\Delta E)}{dR} \\frac{dR}{dt}\n$$\nThe velocity along the reaction coordinate is constant, $\\frac{dR}{dt} = v$. The slope of the diabatic energy difference with respect to $R$ is found by differentiating $\\Delta E(R;F)$:\n$$\n\\frac{d (\\Delta E)}{dR} = \\frac{d}{dR} \\left[ 2 a (R - R_0) + \\Delta_0 - \\Delta \\mu F \\right] = 2a\n$$\nThis slope is constant. Therefore, the absolute value of the sweep rate is:\n$$\n\\left| \\frac{d (\\Delta E)}{dt} \\right|_{R=R_c} = |(2a) \\cdot v|\n$$\nSince both $a$ and $v$ are given as positive constants, the absolute value is not needed. The sweep rate is $2av$. Substituting these components into the Landau-Zener formula:\n$$\nP_{\\mathrm{NA}}(F, v) = \\exp\\left( -\\frac{2\\pi (V_{12}(F))^2}{1 \\cdot (2av)} \\right) = \\exp\\left( -\\frac{\\pi (V_{12}(F))^2}{av} \\right)\n$$\nSubstituting the expression for $V_{12}(F) = V_{12}^0 \\exp(-\\beta F^2)$:\n$$\nP_{\\mathrm{NA}}(F, v) = \\exp\\left( -\\frac{\\pi \\left(V_{12}^0 \\exp(-\\beta F^2)\\right)^2}{av} \\right) = \\exp\\left( -\\frac{\\pi (V_{12}^0)^2 \\exp(-2\\beta F^2)}{av} \\right)\n$$\nThis final expression will be used for computation.\n\n**Summary of Formulas for Implementation**:\nGiven the parameters $a, R_0, \\Delta_0, \\Delta \\mu, V_{12}^0, \\beta$ and a test case $(F, v)$:\n1.  Crossing Coordinate: $R_c = R_0 + (\\Delta \\mu F - \\Delta_0) / (2a)$\n2.  Energy Gap: $\\Delta E_{\\text{gap}} = 2 V_{12}^0 \\exp(-\\beta F^2)$\n3.  Transition Probability: $P_{\\mathrm{NA}} = \\exp\\left( - \\frac{\\pi (V_{12}^0)^2 \\exp(-2\\beta F^2)}{av} \\right)$\n\nThese formulas will be implemented for each test case to produce the final results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the crossing coordinate, minimum adiabatic gap, and Landau-Zener\n    nonadiabatic transition probability for a model two-state system.\n    \"\"\"\n    # Define constants from the problem statement in atomic units.\n    a = 0.2\n    R0 = 3.0\n    delta0 = 0.1\n    delta_mu = 2.0\n    V12_0 = 0.05\n    beta = 0.5\n    \n    # Define the test cases from the problem statement.\n    # Each tuple is (F, v), with F in a.u. of electric field and v in Bohr/a.u. time.\n    test_cases = [\n        (0.0, 0.02),\n        (0.5, 0.02),\n        (-0.5, 0.02),\n        (2.0, 0.02),\n        (0.5, 0.2),\n        (4.0, 0.02),\n    ]\n\n    results_for_all_cases = []\n    \n    for F, v in test_cases:\n        # 1. Calculate the crossing coordinate, Rc.\n        # Rc = R0 + (delta_mu * F - delta0) / (2 * a)\n        Rc = R0 + (delta_mu * F - delta0) / (2.0 * a)\n\n        # 2. Calculate the minimum adiabatic energy gap at the crossing.\n        # V12(F) = V12_0 * exp(-beta * F^2)\n        # gap = 2 * |V12(F)|. Since V12(F) is positive, |.| is not needed.\n        V12_F = V12_0 * np.exp(-beta * F**2)\n        gap = 2.0 * V12_F\n\n        # 3. Calculate the Landau-Zener nonadiabatic transition probability, P_NA.\n        # P_NA = exp(-pi * V12(F)^2 / (a * v)) where hbar = 1.\n        exponent = - (np.pi * V12_F**2) / (a * v)\n        P_NA = np.exp(exponent)\n        \n        # Format the results to 6 decimal places as required.\n        # The use of f-strings with a format specifier ensures rounding\n        # and correct string representation.\n        Rc_f = f\"{Rc:.6f}\"\n        gap_f = f\"{gap:.6f}\"\n        P_NA_f = f\"{P_NA:.6f}\"\n        \n        # Append the formatted result for the current case as a compliant string.\n        results_for_all_cases.append(f\"[{Rc_f},{gap_f},{P_NA_f}]\")\n\n    # Final print statement in the exact required format.\n    # The output is a single string representing a list of lists.\n    print(f\"[{','.join(results_for_all_cases)}]\")\n\nsolve()\n```", "id": "2457015"}, {"introduction": "Analytical models like the Landau-Zener formula are powerful because of their simplicity, but they are ultimately approximations derived from more fundamental principles. This advanced computational exercise [@problem_id:2457037] challenges you to test the limits of the theory by comparing its predictions to a direct numerical integration of the time-dependent Schrödinger equation (TDSE). By implementing a numerical solver, you will gain a profound understanding of where the LZ formula excels and where it breaks down, providing a crucial perspective on the relationship between physical models and the underlying quantum reality.", "problem": "You are given a model two-level system undergoing a linear diabatic crossing. In atomic units where the reduced Planck constant is $\\,\\hbar = 1\\,$, the time-dependent Hamiltonian is\n$$\nH(t) \\;=\\; \\begin{pmatrix}\n\\dfrac{\\alpha t}{2} & \\Delta \\\\\n\\Delta & -\\dfrac{\\alpha t}{2}\n\\end{pmatrix},\n$$\nwith constant diabatic coupling $\\,\\Delta \\ge 0\\,$ and slope parameter $\\,\\alpha > 0\\,$. The state $\\,\\psi(t)\\in \\mathbb{C}^2\\,$ evolves according to the time-dependent Schrödinger equation (TDSE)\n$$\ni \\,\\dfrac{d}{dt}\\,\\psi(t) \\;=\\; H(t)\\,\\psi(t),\n$$\nwith the initial condition $\\,\\psi(-T) = \\begin{pmatrix}1 \\\\ 0\\end{pmatrix}\\,$. The diabatic survival probability at late times is defined as\n$$\nP_{\\mathrm{num}} \\;=\\; \\bigl|\\langle 1 \\mid \\psi(+T)\\rangle\\bigr|^2 \\;=\\; \\bigl|\\psi_1(+T)\\bigr|^2,\n$$\nwhere $\\,\\lvert 1\\rangle = \\begin{pmatrix}1 \\\\ 0\\end{pmatrix}\\,$ is the diabatic basis state. The Landau–Zener analytical prediction for the diabatic survival probability for a linear crossing is\n$$\nP_{\\mathrm{LZ}} \\;=\\; \\exp\\!\\Bigl(-2\\pi\\,\\dfrac{\\Delta^2}{\\alpha}\\Bigr).\n$$\nAll quantities are in atomic units: time in atomic time units and energy in Hartree. Probabilities must be expressed as decimals (not percentages).\n\nYour task is to write a complete, runnable program that, for each test case below, computes $\\,P_{\\mathrm{LZ}}\\,$ from the formula above and computes $\\,P_{\\mathrm{num}}\\,$ by solving the TDSE from $\\,t=-T\\,$ to $\\,t=+T\\,$ with the given parameters, then returns the absolute difference\n$$\nD \\;=\\; \\bigl|P_{\\mathrm{num}} - P_{\\mathrm{LZ}}\\bigr|.\n$$\nNo user input is required.\n\nTest suite (each tuple is $\\;(\\alpha,\\;\\Delta,\\;T,\\;N)\\;$ where $\\,N\\,$ is the number of equal time steps used to traverse the interval $\\;[-T,+T]\\,$):\n\n- Case A: $\\;(\\,1.0,\\;0.2,\\;20.0,\\;40000\\,)$\n- Case B: $\\;(\\,5.0,\\;0.2,\\;10.0,\\;20000\\,)$\n- Case C: $\\;(\\,1.0,\\;0.05,\\;25.0,\\;50000\\,)$\n- Case D: $\\;(\\,0.5,\\;0.3,\\;30.0,\\;60000\\,)$\n- Case E (edge, zero coupling): $\\;(\\,1.0,\\;0.0,\\;10.0,\\;20000\\,)$\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the cases listed above, for example\n$$\n[ d_A, d_B, d_C, d_D, d_E ],\n$$\nwhere each $\\,d_X\\,$ is the float $\\,D\\,$ for the corresponding case. The printed list must contain no spaces.", "solution": "The task is to compute the absolute difference $D = |P_{\\mathrm{num}} - P_{\\mathrm{LZ}}|$ for several sets of parameters. This requires two distinct calculations for each case: one analytical and one numerical.\n\nFirst, the analytical Landau-Zener survival probability, $P_{\\mathrm{LZ}}$, is calculated directly from the given formula:\n$$\nP_{\\mathrm{LZ}} = \\exp\\left(-2\\pi \\frac{\\Delta^2}{\\alpha}\\right)\n$$\nThis formula is valid under the assumption of an infinitely slow passage through the curve crossing, which corresponds to the limit $T \\to \\infty$. Our numerical simulation uses a finite time $T$, so a discrepancy between $P_{\\mathrm{num}}$ and $P_{\\mathrm{LZ}}$ is expected.\n\nSecond, the numerical survival probability, $P_{\\mathrm{num}}$, is obtained by propagating the state vector $\\psi(t) = \\begin{pmatrix} c_1(t) \\\\ c_2(t) \\end{pmatrix}$ from the initial time $t = -T$ to the final time $t = +T$. The evolution is governed by the TDSE, which we rearrange into the standard form for numerical integration:\n$$\n\\frac{d\\psi(t)}{dt} = -i H(t) \\psi(t)\n$$\nThis is a vector-valued first-order ordinary differential equation (ODE). A robust and widely used method for solving such ODEs is the fourth-order Runge-Kutta (RK4) algorithm. Given the ODE $\\frac{d\\vec{y}}{dt} = \\vec{f}(t, \\vec{y})$, the state at time $t_{n+1} = t_n + \\delta t$ is approximated from the state at $t_n$ by:\n$$\n\\vec{y}_{n+1} = \\vec{y}_n + \\frac{\\delta t}{6} (\\vec{k}_1 + 2\\vec{k}_2 + 2\\vec{k}_3 + \\vec{k}_4)\n$$\nwhere the intermediate steps are:\n$$\n\\vec{k}_1 = \\vec{f}(t_n, \\vec{y}_n)\n$$\n$$\n\\vec{k}_2 = \\vec{f}\\left(t_n + \\frac{\\delta t}{2}, \\vec{y}_n + \\frac{\\delta t}{2} \\vec{k}_1\\right)\n$$\n$$\n\\vec{k}_3 = \\vec{f}\\left(t_n + \\frac{\\delta t}{2}, \\vec{y}_n + \\frac{\\delta t}{2} \\vec{k}_2\\right)\n$$\n$$\n\\vec{k}_4 = \\vec{f}(t_n + \\delta t, \\vec{y}_n + \\delta t \\vec{k}_3)\n$$\nIn our specific problem, the state vector is $\\vec{y}(t) = \\psi(t) \\in \\mathbb{C}^2$, and the function is $\\vec{f}(t, \\psi) = -i H(t) \\psi(t)$. The integration is performed over the time interval $[-T, +T]$ using $N$ equal time steps, so the step size is $\\delta t = \\frac{2T}{N}$. The initial condition is $\\psi(-T) = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$.\n\nThe algorithm for each test case $(\\alpha, \\Delta, T, N)$ is as follows:\n1.  Calculate $P_{\\mathrm{LZ}}$ using its analytical formula.\n2.  Initialize the numerical state vector $\\psi = \\begin{pmatrix} 1+0i \\\\ 0+0i \\end{pmatrix}$ at time $t = -T$.\n3.  Calculate the time step $\\delta t = 2T / N$.\n4.  Iterate $N$ times. In each iteration, advance the time by $\\delta t$ and update the state vector $\\psi$ using one step of the RK4 algorithm with the function $\\vec{f}(t, \\psi) = -i H(t) \\psi$. The matrix $H(t)$ must be re-evaluated at each required time point within the RK4 step ($t_n$, $t_n + \\frac{\\delta t}{2}$, $t_n + \\delta t$).\n5.  After $N$ steps, the system is at time $t = +T$. The final state vector is $\\psi(+T) = \\begin{pmatrix} c_1(+T) \\\\ c_2(+T) \\end{pmatrix}$.\n6.  Calculate the numerical survival probability as $P_{\\mathrm{num}} = |c_1(+T)|^2$. The squared modulus of a complex number $z$ is $z^*z$.\n7.  Compute the final result $D = |P_{\\mathrm{num}} - P_{\\mathrm{LZ}}|$.\n\nThis procedure is systematically applied to all provided test cases to generate the final list of results. For the edge case with $\\Delta=0$, the Hamiltonian is diagonal, so the states do not mix. We expect $P_{\\mathrm{LZ}} = 1$ and $P_{\\mathrm{num}} \\approx 1$, leading to $D \\approx 0$. This serves as a valuable check for the numerical implementation.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Landau-Zener problem for a suite of test cases.\n\n    For each case, it calculates the analytical Landau-Zener survival probability\n    and compares it to a numerical solution of the time-dependent Schrödinger\n    equation (TDSE) obtained via the fourth-order Runge-Kutta (RK4) method.\n    \"\"\"\n    # Test suite: each tuple is (alpha, Delta, T, N)\n    test_cases = [\n        (1.0, 0.2, 20.0, 40000),   # Case A\n        (5.0, 0.2, 10.0, 20000),   # Case B\n        (1.0, 0.05, 25.0, 50000),  # Case C\n        (0.5, 0.3, 30.0, 60000),   # Case D\n        (1.0, 0.0, 10.0, 20000),   # Case E (edge, zero coupling)\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        alpha, delta, T, N = case\n\n        # 1. Calculate the analytical Landau-Zener probability, P_LZ.\n        # The case alpha=0 is ruled out by the problem statement (alpha > 0).\n        p_lz = np.exp(-2.0 * np.pi * delta**2 / alpha)\n\n        # 2. Numerically solve the TDSE using the RK4 method to find P_num.\n        \n        # Time step for integration\n        dt = 2.0 * T / N\n        \n        # Initial condition: psi(-T) = [1, 0]\n        psi = np.array([1.0 + 0.0j, 0.0 + 0.0j], dtype=np.complex128)\n        \n        t = -T\n        \n        # The derivative function for the TDSE: d(psi)/dt = -i * H(t) * psi\n        def f(current_t, current_psi, alpha_param, delta_param):\n            H = np.array([\n                [0.5 * alpha_param * current_t, delta_param],\n                [delta_param, -0.5 * alpha_param * current_t]\n            ], dtype=np.complex128)\n            return -1.0j * (H @ current_psi)\n\n        # RK4 integration loop\n        for _ in range(N):\n            k1 = f(t, psi, alpha, delta)\n            k2 = f(t + 0.5 * dt, psi + 0.5 * dt * k1, alpha, delta)\n            k3 = f(t + 0.5 * dt, psi + 0.5 * dt * k2, alpha, delta)\n            k4 = f(t + dt, psi + dt * k3, alpha, delta)\n            \n            psi += (dt / 6.0) * (k1 + 2.0 * k2 + 2.0 * k3 + k4)\n            t += dt\n\n        # Final numerical survival probability P_num = |psi_1(+T)|^2\n        p_num = np.abs(psi[0])**2\n        \n        # 3. Calculate the absolute difference D.\n        difference = abs(p_num - p_lz)\n        results.append(difference)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.15f}' for r in results)}]\")\n\nsolve()\n```", "id": "2457037"}]}