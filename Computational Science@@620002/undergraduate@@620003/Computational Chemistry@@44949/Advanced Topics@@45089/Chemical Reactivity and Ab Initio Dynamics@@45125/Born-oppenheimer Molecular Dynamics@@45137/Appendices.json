{"hands_on_practices": [{"introduction": "We begin our hands-on exploration with a foundational thought experiment. This exercise challenges you to apply the core principles of Born-Oppenheimer molecular dynamics to the simplest possible case: a single, isolated atom. By considering how the potential energy surface must behave for an isolated system, you will solidify your understanding of translational invariance and its direct consequences on nuclear motion within the BOMD framework [@problem_id:2451155].", "problem": "Consider a Born–Oppenheimer molecular dynamics (BOMD) simulation of a single helium atom in vacuum. In Born–Oppenheimer molecular dynamics (BOMD), the nuclei move classically on the electronic ground-state potential energy surface, with the electronic structure instantaneously relaxed to its ground state at each nuclear configuration. The system consists of $1$ helium nucleus of mass $M$ and charge $Z=2$, and $2$ electrons. The simulation is carried out in a very large cubic periodic box of edge length $L$ (with $L$ sufficiently large that interactions with periodic images are negligible), with no external fields, and no thermostat or barostat. At time $t=0$, the nuclear position is $\\mathbf{R}(0)=\\mathbf{R}_0$ and the nuclear velocity is $\\mathbf{v}(0)=\\mathbf{0}$. Assume an ideal, exact BOMD integration (i.e., complete basis set, exact electronic ground state at each step, and vanishing time step). Which of the following best describes the expected nuclear trajectory $\\mathbf{R}(t)$?\n\nA. The nucleus remains at $\\mathbf{R}(t)=\\mathbf{R}_0$ for all $t$, and more generally would move with uniform velocity if $\\mathbf{v}(0)\\neq \\mathbf{0}$.\n\nB. The nucleus oscillates around a fixed point due to attraction to its surrounding electron density, with a characteristic frequency set by the curvature of the electron–nucleus potential.\n\nC. The nucleus exhibits random jittering even without a thermostat because electronic zero-point motion transfers fluctuating forces to the nucleus.\n\nD. The nucleus spirals inward toward the center of its own electron density, losing energy to the electrons until it collapses to a point.\n\nE. The nucleus follows a periodic orbit with frequency equal to the electronic excitation gap divided by Planck’s constant, due to adiabatic coupling to electronic motion.", "solution": "The problem asks for the trajectory of a helium nucleus in an ideal Born-Oppenheimer molecular dynamics (BOMD) simulation, starting from rest. First, we must validate the problem statement.\n\n**Problem Validation**\n\nStep 1: Extract Givens\n-   **System**: A single helium atom in vacuum.\n-   **Components**: $1$ helium nucleus with mass $M$ and charge $Z=2$, and $2$ electrons.\n-   **Simulation Method**: Born–Oppenheimer molecular dynamics (BOMD).\n-   **BOMD Definition**: Nuclei move classically on the electronic ground-state potential energy surface (PES). The electronic structure is instantaneously relaxed to its ground state at each nuclear configuration.\n-   **Simulation Environment**: A very large cubic periodic box of edge length $L$. Interactions with periodic images are stated to be negligible, effectively rendering the system isolated. There are no external fields. No thermostat or barostat is applied, implying an energy-conserving (microcanonical) simulation for the nucleus.\n-   **Initial Conditions**: At time $t=0$, the nuclear position is $\\mathbf{R}(0)=\\mathbf{R}_0$ and the nuclear velocity is $\\mathbf{v}(0)=\\mathbf{0}$.\n-   **Idealization**: The simulation is an \"ideal, exact BOMD integration\" with a complete basis set, the exact electronic ground state at each step, and a vanishing time step.\n\nStep 2: Validate Using Extracted Givens\nThe problem statement is scientifically grounded, well-posed, and objective. It describes a standard theoretical setup in computational chemistry to test the fundamental consequences of the Born-Oppenheimer approximation.\n1.  **Scientific Soundness**: The description of BOMD is correct. The system is a simple, physical one. The principles invoked are standard.\n2.  **Well-Posedness**: The problem is well-posed. The dynamics are governed by classical mechanics with a well-defined potential and initial conditions, which uniquely determines the trajectory.\n3.  **Completeness**: All necessary information for a conceptual analysis is provided. The idealizations (e.g., \"exact BOMD\") are not flaws but necessary constraints to define the theoretical framework.\n4.  **Consistency**: The givens are internally consistent. An isolated system in an NVE ensemble is a standard physical model.\n\nStep 3: Verdict and Action\nThe problem is valid. We proceed to derive the solution.\n\n**Derivation of the Nuclear Trajectory**\n\nIn the Born-Oppenheimer Molecular Dynamics (BOMD) framework, the nucleus is treated as a classical particle. Its motion is governed by Newton's second law:\n$$ M \\frac{d^2\\mathbf{R}(t)}{dt^2} = \\mathbf{F}(\\mathbf{R}(t)) $$\nwhere $M$ is the nuclear mass, $\\mathbf{R}(t)$ is its position vector, and $\\mathbf{F}(\\mathbf{R}(t))$ is the force acting upon it.\n\nThe force is conservative and is derived from the electronic ground-state potential energy surface (PES), denoted as $V(\\mathbf{R})$. The PES is defined as the ground-state energy of the electronic subsystem for a fixed nuclear position $\\mathbf{R}$.\n$$ V(\\mathbf{R}) = E_{gs}(\\mathbf{R}) $$\nThe force is the negative gradient of this potential:\n$$ \\mathbf{F}(\\mathbf{R}) = -\\nabla_{\\mathbf{R}} V(\\mathbf{R}) $$\nThe system is a single, isolated helium atom in vacuum. Due to the fundamental principle of translational invariance of physical laws in the absence of external fields, the internal properties of an isolated system cannot depend on its absolute position in space. The electronic ground-state energy $E_{gs}$ is an internal property of the atom. Therefore, the value of $E_{gs}$ must be independent of the nuclear position $\\mathbf{R}$.\n\nThis means that the potential energy surface $V(\\mathbf{R})$ is constant.\n$$ V(\\mathbf{R}) = E_{gs} = \\text{constant} $$\nThe PES is a flat surface. Consequently, the force on the nucleus is identically zero:\n$$ \\mathbf{F}(\\mathbf{R}) = -\\nabla_{\\mathbf{R}} (\\text{constant}) = \\mathbf{0} $$\nThe equation of motion for the nucleus simplifies to:\n$$ M \\frac{d^2\\mathbf{R}(t)}{dt^2} = \\mathbf{0} $$\nIntegrating this equation once with respect to time $t$ gives the velocity:\n$$ \\frac{d\\mathbf{R}(t)}{dt} = \\mathbf{v}(t) = \\mathbf{v}(0) $$\nwhere $\\mathbf{v}(0)$ is the initial velocity. Integrating a second time gives the position:\n$$ \\mathbf{R}(t) = \\mathbf{R}(0) + \\mathbf{v}(0)t $$\nThe problem specifies the initial conditions: $\\mathbf{R}(0) = \\mathbf{R}_0$ and $\\mathbf{v}(0) = \\mathbf{0}$. Substituting these into the general solution gives the specific trajectory for this system:\n$$ \\mathbf{R}(t) = \\mathbf{R}_0 + (\\mathbf{0})t = \\mathbf{R}_0 $$\nThe nucleus remains stationary at its initial position for all time $t \\ge 0$.\n\nIf the initial velocity were non-zero, $\\mathbf{v}(0) \\neq \\mathbf{0}$, the nucleus would move with a constant velocity, following a straight-line path $\\mathbf{R}(t) = \\mathbf{R}_0 + \\mathbf{v}(0)t$. This is an expression of Newton's first law of motion, which is correctly recovered by the BOMD framework for an isolated particle.\n\n**Evaluation of Options**\n\nA. **The nucleus remains at $\\mathbf{R}(t)=\\mathbf{R}_0$ for all $t$, and more generally would move with uniform velocity if $\\mathbf{v}(0)\\neq \\mathbf{0}$.**\nThis statement perfectly matches our derivation. For the given initial condition $\\mathbf{v}(0)=\\mathbf{0}$, the nucleus remains at $\\mathbf{R}_0$. The more general statement about uniform velocity for $\\mathbf{v}(0)\\neq \\mathbf{0}$ is also correct.\nVerdict: **Correct**.\n\nB. **The nucleus oscillates around a fixed point due to attraction to its surrounding electron density, with a characteristic frequency set by the curvature of the electron–nucleus potential.**\nThis is incorrect. Oscillation requires a restoring force, meaning the potential energy $V(\\mathbf{R})$ must have a non-zero second derivative (curvature) at a minimum. As we have established, for an isolated atom, $V(\\mathbf{R})$ is constant, so its gradient (force) and curvature are both zero. The nucleus is not \"attracted\" to a specific point in space.\nVerdict: **Incorrect**.\n\nC. **The nucleus exhibits random jittering even without a thermostat because electronic zero-point motion transfers fluctuating forces to the nucleus.**\nThis is incorrect. The BOMD approximation is inherently adiabatic. The force on the nucleus is a deterministic function $\\mathbf{F}(\\mathbf{R}) = -\\nabla_{\\mathbf{R}} E_{gs}(\\mathbf{R})$. There are no stochastic or fluctuating components to this force. The concept of \"electronic zero-point motion\" is a quantum feature whose energy contribution is already accounted for in the static ground-state energy $E_{gs}$. It does not produce a time-dependent fluctuating force in the BOMD model. Such fluctuations would arise from non-adiabatic effects or coupling to a thermal bath, both of which are excluded by the problem statement.\nVerdict: **Incorrect**.\n\nD. **The nucleus spirals inward toward the center of its own electron density, losing energy to the electrons until it collapses to a point.**\nThis is incorrect. This describes a dissipative process. The simulation is conducted in a microcanonical (NVE) ensemble for the nucleus, meaning its total energy $E_{nuc} = \\frac{1}{2} M |\\mathbf{v}|^2 + V(\\mathbf{R})$ is conserved. Since $V(\\mathbf{R})$ is constant and $\\mathbf{v}(t)$ is constant, energy is trivially conserved. There is no mechanism for energy loss from the nucleus to the electrons within the ideal BOMD framework. Such energy transfer is a non-adiabatic process.\nVerdict: **Incorrect**.\n\nE. **The nucleus follows a periodic orbit with frequency equal to the electronic excitation gap divided by Planck’s constant, due to adiabatic coupling to electronic motion.**\nThis is incorrect. The nucleus experiences zero force, so it cannot follow a non-trivial periodic orbit. Furthermore, any phenomenon related to the electronic excitation gap is, by definition, a non-adiabatic effect involving transitions to or coupling with electronic excited states. The BOMD method is strictly confined to the ground electronic state.\nVerdict: **Incorrect**.\n\nBased on the analysis, only option A is consistent with the principles of Born-Oppenheimer dynamics applied to an isolated atom.", "answer": "$$\\boxed{A}$$", "id": "2451155"}, {"introduction": "Having established the nature of the potential energy surface for an isolated particle, we now investigate its more complex features. This problem focuses on the dynamics at a first-order saddle point, or transition state, a concept central to chemical reactivity. You will explore how the system behaves when placed precariously at this point of unstable equilibrium, revealing the critical difference between an idealized mathematical trajectory and the outcome of a practical computer simulation [@problem_id:2451151].", "problem": "In Born-Oppenheimer molecular dynamics (BOMD), the nuclei evolve on the electronic ground-state potential energy surface determined at each nuclear configuration. Consider a system whose nuclear coordinates are initialized exactly at a first-order transition state geometry, denoted by $\\mathbf{R}^{\\ddagger}$, where the gradient satisfies $\\nabla E(\\mathbf{R}^{\\ddagger}) = \\mathbf{0}$ and the Hessian matrix has exactly $1$ negative eigenvalue. The initial nuclear velocities are set to $\\dot{\\mathbf{R}}(t=0) = \\mathbf{0}$. Assume classical equations of motion for the nuclei, where for each nucleus $I$ of mass $M_I$, the trajectory obeys $M_I \\ddot{\\mathbf{R}}_I(t) = -\\nabla_I E(\\mathbf{R}(t))$, and that the simulation is performed in the microcanonical ensemble with standard numerical precision typical of electronic structure calculations.\n\nWhich statement best describes the expected trajectory under these conditions?\n\nA. In exact arithmetic, the nuclei remain at $\\mathbf{R}^{\\ddagger}$ for all $t$ because $\\nabla E(\\mathbf{R}^{\\ddagger}) = \\mathbf{0}$ and $\\dot{\\mathbf{R}}(0) = \\mathbf{0}$. In a practical simulation with finite precision, arbitrarily small perturbations along the unstable mode cause exponential departure from $\\mathbf{R}^{\\ddagger}$ toward one of the adjacent minima, with the side selected by the sign of the perturbation.\n\nB. The nuclei undergo stable harmonic oscillations about $\\mathbf{R}^{\\ddagger}$ along the transition mode with a real frequency set by the magnitude of the negative eigenvalue of the Hessian.\n\nC. Even in exact arithmetic, the nuclei accelerate immediately away from $\\mathbf{R}^{\\ddagger}$ because the negative curvature at a transition state implies a nonzero force.\n\nD. The trajectory deterministically proceeds to the product minimum, because the transition state locally points downhill only toward products under the Born-Oppenheimer approximation.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extracted Givens**\n- The simulation method is Born-Oppenheimer molecular dynamics (BOMD).\n- The nuclei evolve on a potential energy surface (PES), denoted by $E(\\mathbf{R})$.\n- The initial nuclear configuration is a first-order transition state, $\\mathbf{R}(t=0) = \\mathbf{R}^{\\ddagger}$.\n- At this transition state, the gradient of the potential energy is zero: $\\nabla E(\\mathbf{R}^{\\ddagger}) = \\mathbf{0}$.\n- The Hessian matrix of the potential energy at the transition state has exactly one negative eigenvalue.\n- The initial nuclear velocities are zero: $\\dot{\\mathbf{R}}(t=0) = \\mathbf{0}$.\n- The nuclear dynamics follow Newton's second law: $M_I \\ddot{\\mathbf{R}}_I(t) = -\\nabla_I E(\\mathbf{R}(t))$, where $M_I$ is the mass of nucleus $I$.\n- The simulation is performed with standard finite numerical precision.\n\n**Step 2: Validation of Givens**\nThe problem describes a thought experiment that is fundamental to the study of chemical reaction dynamics using computational methods. The definition of a first-order transition state (a stationary point with one and only one negative Hessian eigenvalue) is standard. The use of classical mechanics for nuclear motion within the Born-Oppenheimer approximation is the defining feature of BOMD. The initial conditions are clear and unambiguous. The distinction between an idealized system with exact arithmetic and a practical simulation with finite precision is a critical concept in computational science. The problem is scientifically grounded, well-posed, objective, and internally consistent.\n\n**Step 3: Verdict**\nThe problem statement is valid. We may proceed to a solution.\n\nThe motion of the nuclei is governed by the classical equation of motion $\\mathbf{F}(t) = M \\ddot{\\mathbf{R}}(t)$, where the force $\\mathbf{F}(t)$ is given by the negative gradient of the potential energy surface, $\\mathbf{F}(t) = -\\nabla E(\\mathbf{R}(t))$. We must analyze the behavior under two distinct scenarios: exact arithmetic and finite-precision arithmetic.\n\n**Case 1: Exact Arithmetic**\nThe system is initialized at position $\\mathbf{R}(0) = \\mathbf{R}^{\\ddagger}$ with initial velocity $\\dot{\\mathbf{R}}(0) = \\mathbf{0}$. By definition of a stationary point, the gradient at $\\mathbf{R}^{\\ddagger}$ is zero, $\\nabla E(\\mathbf{R}^{\\ddagger}) = \\mathbf{0}$. Therefore, the initial force on the nuclei is $\\mathbf{F}(0) = -\\nabla E(\\mathbf{R}^{\\ddagger}) = \\mathbf{0}$. According to Newton's second law, the initial acceleration is also zero: $\\ddot{\\mathbf{R}}(0) = \\mathbf{F}(0)/M = \\mathbf{0}$. With zero initial velocity and zero initial acceleration, the system will remain at the position $\\mathbf{R}^{\\ddagger}$ for all time $t > 0$. This represents a point of unstable equilibrium. The position is an equilibrium point because the net force is zero; it is unstable because an infinitesimal displacement will lead to forces that push the system away from the equilibrium, as will be shown next.\n\n**Case 2: Finite-Precision Arithmetic**\nIn any practical computer simulation, numbers are represented with finite precision. This means that even if we attempt to initialize the system exactly at $\\mathbf{R}^{\\ddagger}$, there will be some small, unavoidable numerical error. The initial position will be $\\mathbf{R}(0) = \\mathbf{R}^{\\ddagger} + \\delta\\mathbf{R}$, where $\\delta\\mathbf{R}$ is a small, non-zero displacement vector resulting from floating-point representation errors.\n\nTo determine the force at this displaced position, we perform a Taylor expansion of the potential energy $E(\\mathbf{R})$ around the transition state $\\mathbf{R}^{\\ddagger}$:\n$$E(\\mathbf{R}^{\\ddagger} + \\delta\\mathbf{R}) \\approx E(\\mathbf{R}^{\\ddagger}) + \\nabla E(\\mathbf{R}^{\\ddagger})^T \\delta\\mathbf{R} + \\frac{1}{2} \\delta\\mathbf{R}^T \\mathbf{H}(\\mathbf{R}^{\\ddagger}) \\delta\\mathbf{R}$$\nwhere $\\mathbf{H}$ is the Hessian matrix of second derivatives. The force is the negative gradient of this expression:\n$$\\mathbf{F}(\\mathbf{R}^{\\ddagger} + \\delta\\mathbf{R}) = -\\nabla E(\\mathbf{R}^{\\ddagger} + \\delta\\mathbf{R}) \\approx -\\nabla E(\\mathbf{R}^{\\ddagger}) - \\mathbf{H}(\\mathbf{R}^{\\ddagger}) \\delta\\mathbf{R}$$\nSince $\\nabla E(\\mathbf{R}^{\\ddagger}) = \\mathbf{0}$, the force is approximately $\\mathbf{F} \\approx -\\mathbf{H} \\delta\\mathbf{R}$.\n\nThe displacement $\\delta\\mathbf{R}$ can be expressed as a linear combination of the eigenvectors $\\mathbf{v}_i$ of the Hessian matrix: $\\delta\\mathbf{R} = \\sum_i c_i \\mathbf{v}_i$. The force is then $\\mathbf{F} \\approx -\\mathbf{H} (\\sum_i c_i \\mathbf{v}_i) = -\\sum_i c_i (\\mathbf{H}\\mathbf{v}_i) = -\\sum_i c_i \\lambda_i \\mathbf{v}_i$, where $\\lambda_i$ are the corresponding eigenvalues.\n\nThe Hessian at a first-order transition state has one negative eigenvalue, $\\lambda_u  0$, and the rest are positive (or zero, for translational/rotational modes).\n- For modes with $\\lambda_i > 0$, the force component is $\\mathbf{F}_i \\approx -c_i \\lambda_i \\mathbf{v}_i$. This force opposes the displacement component $c_i \\mathbf{v}_i$, acting as a restoring force, leading to stable oscillations.\n- For the unique unstable mode with $\\lambda_u  0$, the force component is $\\mathbf{F}_u \\approx -c_u \\lambda_u \\mathbf{v}_u$. Since $\\lambda_u$ is negative, this force acts in the *same* direction as the displacement component $c_u \\mathbf{v}_u$. This is an anti-restoring or repulsive force. The equation of motion along this mode's coordinate, $q_u$, is approximately $M\\ddot{q}_u \\approx - \\lambda_u q_u$. With $\\lambda_u = -\\kappa^2$ for some real $\\kappa > 0$, this becomes $M\\ddot{q}_u \\approx \\kappa^2 q_u$, which has solutions of the form $q_u(t) \\propto e^{\\pm(\\kappa/\\sqrt{M})t}$.\n\nAny initial numerical perturbation $\\delta\\mathbf{R}$ will almost certainly have a non-zero component along this unstable direction ($\\mathbf{v}_u$). This component will grow exponentially, while components along stable directions will oscillate. The result is that the system rapidly accelerates away from the transition state saddle point, primarily along the direction of the unstable mode. The direction of departure (toward reactants or toward products) is determined by the sign of the initial random numerical perturbation along this mode's eigenvector.\n\nNow we evaluate each option:\n\n**A.** In exact arithmetic, the nuclei remain at $\\mathbf{R}^{\\ddagger}$ for all $t$ because $\\nabla E(\\mathbf{R}^{\\ddagger}) = \\mathbf{0}$ and $\\dot{\\mathbf{R}}(0) = \\mathbf{0}$. In a practical simulation with finite precision, arbitrarily small perturbations along the unstable mode cause exponential departure from $\\mathbf{R}^{\\ddagger}$ toward one of the adjacent minima, with the side selected by the sign of the perturbation.\nThis statement is entirely consistent with our analysis. It correctly describes the idealized behavior (unstable equilibrium) and the practical behavior (exponential departure driven by numerical noise along the unstable mode). The stochastic nature of the outcome (reactants vs. products) is also correctly identified.\n**Verdict: Correct.**\n\n**B.** The nuclei undergo stable harmonic oscillations about $\\mathbf{R}^{\\ddagger}$ along the transition mode with a real frequency set by the magnitude of the negative eigenvalue of the Hessian.\nThis is incorrect. The transition mode is, by definition, the unstable mode associated with the negative eigenvalue $\\lambda_u  0$. Stable harmonic motion requires a positive eigenvalue (positive curvature), as the frequency is proportional to $\\sqrt{\\lambda/M}$. A negative eigenvalue leads to an imaginary frequency, which corresponds to exponential, not oscillatory, motion.\n**Verdict: Incorrect.**\n\n**C.** Even in exact arithmetic, the nuclei accelerate immediately away from $\\mathbf{R}^{\\ddagger}$ because the negative curvature at a transition state implies a nonzero force.\nThis is incorrect. Curvature (the Hessian) is related to the second derivative of the potential, while the force is the negative of the first derivative (the gradient). At a stationary point such as $\\mathbf{R}^{\\ddagger}$, the gradient is zero by definition, which means the force is exactly zero. With zero initial force and zero initial velocity, the initial acceleration is zero. The system does not accelerate away in the idealized case of exact arithmetic.\n**Verdict: Incorrect.**\n\n**D.** The trajectory deterministically proceeds to the product minimum, because the transition state locally points downhill only toward products under the Born-Oppenheimer approximation.\nThis is incorrect on two counts. First, the outcome is not deterministic. As explained above, the direction of departure depends on the sign of the random numerical perturbation. A transition state connects reactants and products, meaning it is \"downhill\" in two opposite directions along the reaction coordinate. There is no inherent bias in the dynamics that deterministically favors the product side. Such a bias would have to be introduced explicitly, for example by giving an initial velocity \"kick\" towards the products, which is contrary to the problem statement.\n**Verdict: Incorrect.**", "answer": "$$\\boxed{A}$$", "id": "2451151"}, {"introduction": "From conceptual exercises, we now move to a comprehensive practical implementation. This final problem challenges you to build a minimal, yet functional, Born-Oppenheimer molecular dynamics simulation for a single water molecule. You will translate the theoretical components—a potential energy model, Newton's laws, and a numerical integrator—into a working code, gaining invaluable insight into how these elements combine to predict molecular behavior, such as dissociation, over time [@problem_id:2451198].", "problem": "You are to implement a minimal Born–Oppenheimer molecular dynamics (BOMD) simulation of a single water molecule on an approximate ground-state potential energy surface. The Born–Oppenheimer approximation assumes that the electrons remain in their instantaneous ground state for each nuclear configuration, which yields a potential energy surface on which the nuclei move under Newtonian mechanics. Your task is to integrate the nuclear equations of motion for a flexible water molecule for a total simulation time of $1$ picosecond, and determine, for each test case, whether the molecule dissociates within that time.\n\nModel and fundamental base:\n- Use Newton’s second law for each nucleus $i$: $m_i \\,\\dfrac{d^2 \\mathbf{r}_i}{dt^2} = \\mathbf{F}_i$, with forces $\\mathbf{F}_i = - \\nabla_{\\mathbf{r}_i} U(\\mathbf{r})$.\n- The total potential energy $U(\\mathbf{r})$ is the sum of two Morse bond potentials for the O–H bonds and a harmonic angle potential for the H–O–H angle:\n  - For each O–H bond of length $r$, use $$U_{\\mathrm{Morse}}(r) = D_e \\left[1 - e^{-a(r - r_0)}\\right]^2,$$ where $D_e$ is the bond dissociation energy, $a$ is the range parameter, and $r_0$ is the equilibrium bond length.\n  - For the bending angle $\\theta$ at oxygen, with equilibrium value $\\theta_0$, use $$U_{\\mathrm{bend}}(\\theta) = \\dfrac{1}{2}\\,k_\\theta\\,(\\theta - \\theta_0)^2.$$\n- Use velocity Verlet integration, which follows from the Taylor expansion of positions and velocities and is given by\n  $$\\mathbf{r}(t+\\Delta t) = \\mathbf{r}(t) + \\mathbf{v}(t)\\,\\Delta t + \\dfrac{1}{2}\\,\\mathbf{a}(t)\\,\\Delta t^2,$$\n  compute new forces $\\mathbf{F}(t+\\Delta t)$ and accelerations $\\mathbf{a}(t+\\Delta t) = \\mathbf{F}(t+\\Delta t)/m$, then\n  $$\\mathbf{v}(t+\\Delta t) = \\mathbf{v}(t) + \\dfrac{1}{2}\\,\\big(\\mathbf{a}(t)+\\mathbf{a}(t+\\Delta t)\\big)\\,\\Delta t.$$\n\nPhysical constants and parameters:\n- Boltzmann constant $k_B = 1.380\\,649\\times 10^{-23}$ joule per kelvin.\n- One electronvolt $\\mathrm{eV} = 1.602\\,176\\,634\\times 10^{-19}$ joule.\n- One atomic mass unit $\\mathrm{amu} = 1.660\\,539\\,066\\,60\\times 10^{-27}$ kilogram.\n- Masses: $m_{\\mathrm{O}} = 15.999\\,\\mathrm{amu}$, $m_{\\mathrm{H}} = 1.007\\,84\\,\\mathrm{amu}$.\n- Equilibrium O–H bond length $r_0 = 0.096$ nanometer.\n- Equilibrium H–O–H angle $\\theta_0 = 104.5$ degrees (use radians in computation).\n- Morse parameters: $D_e = 5.5$ electronvolts, $a = 2.2$ inverse ångström.\n- Angle force constant $k_\\theta = 75$ kilocalorie per mole per radian squared. Convert $k_\\theta$ to joule per radian squared per molecule before use.\n- Total simulation time $t_{\\mathrm{total}} = 1$ picosecond in each test.\n- Use a dissociation criterion based on bond extension: declare that the molecule has dissociated if at any time either O–H bond length exceeds $r_{\\mathrm{cut}} = 2.2\\,r_0$.\n\nInitialization:\n- Place the oxygen at the origin. Place one hydrogen at $(r_0,0,0)$ and the second hydrogen at $(r_0\\cos\\theta_0, r_0\\sin\\theta_0, 0)$ so that the H–O–H angle at oxygen equals $\\theta_0$.\n- Initialize velocities by sampling each Cartesian component from a normal distribution with zero mean and variance $\\sigma_i^2 = k_B T / m_i$ for atom $i$ at temperature $T$. Then remove center-of-mass linear momentum by subtracting the center-of-mass velocity from all atoms. Finally, rescale all velocities by a common scalar so that the total kinetic energy equals the equipartition value $K_{\\mathrm{target}} = \\dfrac{f}{2} k_B T$, where $f = 3N - 3$ is the number of quadratic degrees of freedom after removing overall translation for $N=3$ atoms, so $f=6$. Use a fixed pseudorandom seed to make results deterministic.\n- Use radians for angles internally. Use meters, kilograms, and seconds for unit consistency. Use the given conversions for all parameters.\n\nForces:\n- For each O–H bond vector $\\mathbf{u}$ from O to H with length $r=\\|\\mathbf{u}\\|$, the Morse force magnitude along the bond is\n  $$\\dfrac{dU_{\\mathrm{Morse}}}{dr} = 2 D_e\\,a\\,e^{-a(r-r_0)}\\left(1 - e^{-a(r-r_0)}\\right),$$\n  and the force on the hydrogen is $-\\dfrac{dU_{\\mathrm{Morse}}}{dr}\\,\\dfrac{\\mathbf{u}}{r}$, while the force on oxygen is equal and opposite.\n- For the bending term with vectors $\\mathbf{u}$ and $\\mathbf{v}$ from O to H atoms, let $\\hat{\\mathbf{u}}=\\mathbf{u}/\\|\\mathbf{u}\\|$, $\\hat{\\mathbf{v}}=\\mathbf{v}/\\|\\mathbf{v}\\|$, $\\cos\\theta = \\hat{\\mathbf{u}}\\cdot \\hat{\\mathbf{v}}$, $\\sin\\theta = \\sqrt{1-\\cos^2\\theta}$. The gradients of $\\theta$ are\n  $$\\dfrac{\\partial \\theta}{\\partial \\mathbf{u}} = -\\dfrac{1}{\\|\\mathbf{u}\\|}\\,\\dfrac{\\hat{\\mathbf{v}} - \\cos\\theta\\,\\hat{\\mathbf{u}}}{\\sin\\theta},\\quad\n    \\dfrac{\\partial \\theta}{\\partial \\mathbf{v}} = -\\dfrac{1}{\\|\\mathbf{v}\\|}\\,\\dfrac{\\hat{\\mathbf{u}} - \\cos\\theta\\,\\hat{\\mathbf{v}}}{\\sin\\theta},\\quad\n    \\dfrac{\\partial \\theta}{\\partial \\mathbf{r}_{\\mathrm{O}}} = -\\dfrac{\\partial \\theta}{\\partial \\mathbf{u}} - \\dfrac{\\partial \\theta}{\\partial \\mathbf{v}}.$$\n  The angle forces are $\\mathbf{F}_i^{(\\mathrm{bend})} = -k_\\theta\\,(\\theta - \\theta_0)\\,\\dfrac{\\partial \\theta}{\\partial \\mathbf{r}_i}$ for $i\\in\\{\\mathrm{H}_1, \\mathrm{O}, \\mathrm{H}_2\\}$.\n\nNumerical details:\n- Use velocity Verlet with a constant time step $\\Delta t$ specified per test case (below). Compute the number of steps $n = t_{\\mathrm{total}}/\\Delta t$ and integrate exactly this many steps.\n- Use a deterministic pseudorandom number generator with seed $12345$ for velocity initialization.\n\nTest suite:\nFor each tuple $(T,\\Delta t)$ below, with $T$ in kelvin and $\\Delta t$ in femtoseconds, run the $1$ picosecond simulation and return a boolean indicating whether dissociation occurred within the trajectory under the stated criterion:\n- Test $1$: $(T=\\;300,\\;\\Delta t=\\;0.2)$.\n- Test $2$: $(T=\\;1000,\\;\\Delta t=\\;0.1)$.\n- Test $3$: $(T=\\;8000,\\;\\Delta t=\\;0.05)$.\n- Test $4$: $(T=\\;20000,\\;\\Delta t=\\;0.05)$.\n- Test $5$: $(T=\\;100000,\\;\\Delta t=\\;0.02)$.\n\nRequired output:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, \"[True,False,False,True,False]\". The results must be in the order of the test suite above. All internal computations must be performed in the International System of Units (SI), with angles in radians. The final answer for each test is a boolean. The total simulation time per test is $1$ picosecond.", "solution": "The problem presented is a standard exercise in computational chemistry: to perform a Born-Oppenheimer molecular dynamics (BOMD) simulation for a single, flexible water molecule. The problem is well-posed, scientifically sound, and contains all necessary information to proceed with a unique, deterministic solution. We shall now construct this solution methodically.\n\nThe core of the task is to integrate Newton's equations of motion for the three nuclei (one oxygen, two hydrogens) on a potential energy surface (PES), $U(\\mathbf{r})$, which is given. The nuclei are treated as classical particles. The fundamental equation for each nucleus $i$ with mass $m_i$ and position vector $\\mathbf{r}_i$ is:\n$$ m_i \\frac{d^2\\mathbf{r}_i}{dt^2} = \\mathbf{F}_i(\\mathbf{r}) = -\\nabla_{\\mathbf{r}_i} U(\\mathbf{r}) $$\nwhere $\\mathbf{r}$ represents the set of all nuclear coordinates $\\{\\mathbf{r}_1, \\mathbf{r}_2, \\mathbf{r}_3\\}$.\n\n**1. The Potential Energy Surface**\n\nThe PES, $U(\\mathbf{r})$, dictates the forces acting on the nuclei. It is approximated as a sum of internal coordinate potentials: two bond-stretching terms and one angle-bending term.\n$$ U(\\mathbf{r}) = U_{\\mathrm{Morse}}(r_1) + U_{\\mathrm{Morse}}(r_2) + U_{\\mathrm{bend}}(\\theta) $$\nwhere $r_1$ and $r_2$ are the lengths of the two O–H bonds, and $\\theta$ is the H–O–H angle.\n\nThe stretching of each O–H bond is described by a Morse potential, a realistic model for bond dissociation:\n$$ U_{\\mathrm{Morse}}(r) = D_e \\left[1 - e^{-a(r - r_0)}\\right]^2 $$\nHere, $D_e$ is the bond dissociation energy, $r_0$ is the equilibrium bond length, and $a$ controls the width of the potential well. The force derived from this potential on the two atoms forming the bond is directed along the bond vector. For a bond vector $\\mathbf{u} = \\mathbf{r}_{\\mathrm{H}} - \\mathbf{r}_{\\mathrm{O}}$ of length $r = \\|\\mathbf{u}\\|$, the force on the hydrogen atom is:\n$$ \\mathbf{F}_{\\mathrm{H, Morse}} = -\\nabla_{\\mathbf{r}_{\\mathrm{H}}} U_{\\mathrm{Morse}}(r) = -\\frac{dU_{\\mathrm{Morse}}}{dr} \\frac{\\partial r}{\\partial \\mathbf{r}_{\\mathrm{H}}} = -\\frac{dU_{\\mathrm{Morse}}}{dr} \\frac{\\mathbf{u}}{r} $$\nwhere the derivative is $\\frac{dU_{\\mathrm{Morse}}}{dr} = 2 D_e a \\left(1 - e^{-a(r - r_0)}\\right) e^{-a(r - r_0)}$. The force on the oxygen atom is equal and opposite, satisfying Newton's third law.\n\nThe bending of the H–O–H angle is modeled by a harmonic potential:\n$$ U_{\\mathrm{bend}}(\\theta) = \\frac{1}{2} k_\\theta (\\theta - \\theta_0)^2 $$\nwhere $k_\\theta$ is the angle force constant and $\\theta_0$ is the equilibrium angle. The forces are derived from the gradient of this potential: $\\mathbf{F}_i^{\\mathrm{bend}} = -\\nabla_{\\mathbf{r}_i} U_{\\mathrm{bend}}(\\theta) = -k_\\theta(\\theta - \\theta_0)\\nabla_{\\mathbf{r}_i}\\theta$. The problem provides the necessary expressions for the gradient of the angle, $\\nabla_{\\mathbf{r}_i}\\theta$, for each atom $i \\in \\{\\mathrm{O}, \\mathrm{H}_1, \\mathrm{H}_2\\}$. These expressions are used directly. A notable feature is the term $\\sin\\theta$ in the denominator of the gradient, which introduces a numerical singularity for linear configurations ($\\theta=0$ or $\\theta=\\pi$). A robust implementation must handle or tolerate this.\n\n**2. Numerical Integration**\n\nTo solve the differential equations of motion, we employ the specified velocity Verlet algorithm. This is a time-reversible and symplectic integrator, which confers good long-term energy conservation properties. Given the positions $\\mathbf{r}(t)$, velocities $\\mathbf{v}(t)$, and accelerations $\\mathbf{a}(t) = \\mathbf{F}(t)/m$ at time $t$, the state at time $t+\\Delta t$ is computed in two stages:\n$$ \\mathbf{r}(t+\\Delta t) = \\mathbf{r}(t) + \\mathbf{v}(t)\\,\\Delta t + \\frac{1}{2}\\,\\mathbf{a}(t)\\,\\Delta t^2 $$\n$$ \\mathbf{v}(t+\\Delta t) = \\mathbf{v}(t) + \\frac{1}{2}\\,\\big(\\mathbf{a}(t)+\\mathbf{a}(t+\\Delta t)\\big)\\,\\Delta t $$\nNote that computing the new velocity $\\mathbf{v}(t+\\Delta t)$ requires the acceleration $\\mathbf{a}(t+\\Delta t)$, which in turn requires calculating the forces $\\mathbf{F}(t+\\Delta t)$ at the newly computed positions $\\mathbf{r}(t+\\Delta t)$.\n\n**3. System Initialization**\n\nThe simulation begins from a defined initial state.\n- **Positions**: The oxygen atom is at the origin $(\\mathbf{r}_{\\mathrm{O}} = \\mathbf{0})$. The two hydrogen atoms are placed in the $xy$-plane to satisfy the equilibrium bond length $r_0$ and angle $\\theta_0$: $\\mathbf{r}_{\\mathrm{H}_1} = (r_0, 0, 0)$ and $\\mathbf{r}_{\\mathrm{H}_2} = (r_0\\cos\\theta_0, r_0\\sin\\theta_0, 0)$.\n- **Velocities**: The initial velocities are set to correspond to a target temperature $T$. This involves three steps:\n    1.  For each atom $i$ and Cartesian component, a random velocity is drawn from a Maxwell-Boltzmann distribution, which is a normal distribution with mean $0$ and variance $\\sigma_i^2 = k_B T / m_i$. This is performed using a pseudorandom number generator with a fixed seed ($12345$) for reproducibility.\n    2.  The total momentum of the system is set to zero by computing the center-of-mass velocity, $\\mathbf{v}_{\\mathrm{CM}} = \\frac{\\sum_i m_i \\mathbf{v}_i}{\\sum_i m_i}$, and subtracting it from each atom's velocity vector. This ensures the molecule as a whole does not exhibit net translational motion.\n    3.  The total kinetic energy, $K = \\sum_i \\frac{1}{2} m_i \\|\\mathbf{v}_i'\\|^2$, is then scaled to match a specific target value, $K_{\\mathrm{target}}$. The problem specifies $K_{\\mathrm{target}} = \\frac{f}{2} k_B T$, where $f = 3N-3=6$ are the internal degrees of freedom for $N=3$ atoms after removing translation. All velocities are multiplied by a scaling factor $\\lambda = \\sqrt{K_{\\mathrm{target}}/K}$. This procedure is a form of thermostatting to begin the simulation at the desired temperature.\n\n**4. Implementation and Execution**\n\nThe entire simulation must be conducted in a consistent set of units. The International System of Units (SI) is the required standard: meters (m), kilograms (kg), seconds (s), and joules (J). All provided parameters must be converted accordingly before use.\n- $m_{\\mathrm{O}}, m_{\\mathrm{H}}$: from $\\mathrm{amu}$ to $\\mathrm{kg}$.\n- $r_0$: from $\\mathrm{nm}$ to $\\mathrm{m}$.\n- $\\theta_0$: from degrees to radians.\n- $D_e$: from $\\mathrm{eV}$ to $\\mathrm{J}$.\n- $a$: from $\\mathrm{Å}^{-1}$ to $\\mathrm{m}^{-1}$.\n- $k_\\theta$: from $\\mathrm{kcal}\\,\\mathrm{mol}^{-1}\\,\\mathrm{rad}^{-2}$ to $\\mathrm{J}\\,\\mathrm{rad}^{-2}$.\n- $t_{total}$: from $\\mathrm{ps}$ to $\\mathrm{s}$.\n- $\\Delta t$: from $\\mathrm{fs}$ to $\\mathrm{s}$.\n\nThe simulation proceeds by iteratively applying the velocity Verlet algorithm for a total number of steps $n = t_{\\mathrm{total}}/\\Delta t$. After each position update, the O–H bond lengths $r_1$ and $r_2$ are checked against the dissociation criterion, $r_{\\mathrm{cut}} = 2.2\\,r_0$. If either bond length exceeds this cutoff, the molecule is considered dissociated, the simulation for that test case terminates, and the result is recorded as `True`. If the loop completes without dissociation, the result is `False`. This logic is applied to each test case specified in the problem statement. The final output is a list of these boolean results.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the BOMD problem for a water molecule.\n    \"\"\"\n    \n    # Global constants in SI units\n    KB = 1.380649e-23  # J/K\n    EV = 1.602176634e-19  # J\n    AMU = 1.66053906660e-27  # kg\n    NA = 6.02214076e23  # mol^-1\n    CAL_TO_J = 4.184\n\n    # Model Parameters in SI units\n    M_O = 15.999 * AMU\n    M_H = 1.00784 * AMU\n    MASSES = np.array([M_O, M_H, M_H])[:, np.newaxis] # Shape (3, 1) for broadcasting\n\n    R0 = 0.096e-9  # m\n    THETA0 = 104.5 * np.pi / 180.0  # rad\n\n    DE = 5.5 * EV  # J\n    A = 2.2e10  # m^-1\n\n    # k_theta conversion: 75 kcal/mol/rad^2 -> J/rad^2\n    K_THETA = 75 * 1000 * CAL_TO_J / NA  # J/rad^2\n\n    RCUT = 2.2 * R0\n\n    T_TOTAL = 1.0e-12  # s (1 picosecond)\n    \n    # Nested function to calculate forces for encapsulation\n    def calculate_forces(r):\n        \"\"\"Calculates forces on all atoms given their positions.\"\"\"\n        r_O, r_H1, r_H2 = r[0], r[1], r[2]\n        forces = np.zeros((3, 3))\n        \n        # Bond vectors\n        u1 = r_H1 - r_O\n        u2 = r_H2 - r_O\n        r1 = np.linalg.norm(u1)\n        r2 = np.linalg.norm(u2)\n        \n        # Handle case where atoms might be at the same position\n        if r1 == 0 or r2 == 0:\n            return forces\n\n        u1_hat = u1 / r1\n        u2_hat = u2 / r2\n        \n        # Morse Forces\n        exp_term1 = np.exp(-A * (r1 - R0))\n        dUm_dr1 = 2 * DE * A * exp_term1 * (1 - exp_term1)\n        \n        exp_term2 = np.exp(-A * (r2 - R0))\n        dUm_dr2 = 2 * DE * A * exp_term2 * (1 - exp_term2)\n        \n        F_H1_morse = -dUm_dr1 * u1_hat\n        F_H2_morse = -dUm_dr2 * u2_hat\n        \n        forces[1] += F_H1_morse\n        forces[2] += F_H2_morse\n        forces[0] -= (F_H1_morse + F_H2_morse)\n        \n        # Angle Bending Forces\n        cos_theta = np.dot(u1_hat, u2_hat)\n        cos_theta = np.clip(cos_theta, -1.0, 1.0)\n        theta = np.arccos(cos_theta)\n        \n        sin_theta = np.sqrt(1 - cos_theta**2)\n        if sin_theta  1e-10:\n            return forces\n\n        dUb_dtheta = K_THETA * (theta - THETA0)\n\n        grad_theta_u1 = (-1.0 / r1) * (u2_hat - cos_theta * u1_hat) / sin_theta\n        grad_theta_u2 = (-1.0 / r2) * (u1_hat - cos_theta * u2_hat) / sin_theta\n        \n        F_H1_bend = -dUb_dtheta * grad_theta_u1\n        F_H2_bend = -dUb_dtheta * grad_theta_u2\n        F_O_bend = -(F_H1_bend + F_H2_bend)\n        \n        forces[0] += F_O_bend\n        forces[1] += F_H1_bend\n        forces[2] += F_H2_bend\n        \n        return forces\n\n    # Nested function to run one simulation\n    def run_simulation(T, dt_fs):\n        \"\"\"Runs one BOMD simulation for given T and dt.\"\"\"\n        dt = dt_fs * 1e-15  # Convert fs to s\n        num_steps = int(round(T_TOTAL / dt))\n        \n        # 1. Initialization\n        r = np.zeros((3, 3))\n        r[1] = [R0, 0, 0]\n        r[2] = [R0 * np.cos(THETA0), R0 * np.sin(THETA0), 0]\n        \n        rng = np.random.default_rng(12345)\n        std_devs = np.sqrt(KB * T / MASSES)\n        v = rng.normal(0, std_devs, size=(3, 3))\n        \n        v_cm = np.sum(v * MASSES, axis=0) / np.sum(MASSES)\n        v -= v_cm\n        \n        K_initial = 0.5 * np.sum(MASSES * v**2)\n        K_target = 0.5 * 6 * KB * T\n        if K_initial > 1e-12: # Avoid division by zero\n            scale_factor = np.sqrt(K_target / K_initial)\n            v *= scale_factor\n            \n        # 2. Dynamics\n        forces = calculate_forces(r)\n        a = forces / MASSES\n        \n        for _ in range(num_steps):\n            r += v * dt + 0.5 * a * dt**2\n            \n            r1 = np.linalg.norm(r[1] - r[0])\n            r2 = np.linalg.norm(r[2] - r[0])\n            if r1 > RCUT or r2 > RCUT:\n                return True\n                \n            forces_new = calculate_forces(r)\n            a_new = forces_new / MASSES\n            \n            v += 0.5 * (a + a_new) * dt\n            \n            a = a_new\n            \n        return False\n\n    test_cases = [\n        (300, 0.2),\n        (1000, 0.1),\n        (8000, 0.05),\n        (20000, 0.05),\n        (100000, 0.02)\n    ]\n    \n    results = []\n    for T, dt_fs in test_cases:\n        result = run_simulation(T, dt_fs)\n        results.append(str(result))\n        \n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2451198"}]}