{"hands_on_practices": [{"introduction": "This first exercise introduces a fundamental and widely-used approach for estimating solvation free energies. You will implement a continuum solvent model to calculate the free energy change, $\\Delta \\Delta G_{\\mathrm{hyd}}$, when mutating an alanine sidechain to valine [@problem_id:2455813]. This practice will guide you through decomposing the total free energy into a polar component, based on the classic Born model for electrostatics, and a nonpolar component proportional to the change in solvent-accessible surface area. Mastering this decomposition is a critical first step in understanding how computational models approximate the complex effects of a solvent environment.", "problem": "You are asked to compute the change in hydration free energy for mutating a single amino acid sidechain from Alanine to Valine using a physically grounded, continuum-solvent model. Your program must implement the following modeling assumptions, which are to be derived from foundational definitions in statistical mechanics and classical electrostatics:\n\n- The hydration free energy is the reversible work to transfer a solute from vacuum into a continuum solvent. The change upon mutation is defined as the hydration free energy of the Valine sidechain minus that of the Alanine sidechain. You must assume an additive decomposition into a polar electrostatic term and a nonpolar term based on solvent-accessible surface area (SASA).\n\n- For the polar term, use the classical charging argument for a single spherical site with net charge $q$ and radius $R$ embedded in a dielectric continuum of relative permittivity $\\varepsilon_s$. The reversible charging work must be consistent with the Born model, which you should derive in your reasoning and then implement. Use the Coulomb conversion constant $k_e = 332.06371$ in units of $\\mathrm{kcal \\cdot \\AA/(mol \\cdot e^2)}$, elementary charge $e$, and Ångström $\\AA$. The solvent permittivity $\\varepsilon_s$ is dimensionless.\n\n- For the nonpolar term, approximate the free energy of cavity formation and dispersion as proportional to the SASA: $G_{\\mathrm{np}} = \\gamma A + \\beta$, where $A = 4 \\pi R^2$ for a single spherical site, $\\gamma$ is a constant with units $\\mathrm{kcal/(mol \\cdot \\AA^2)}$, and $\\beta$ is an offset with units $\\mathrm{kcal/mol}$. The offset $\\beta$ cancels out for a mutation in which $\\beta$ is unchanged between states.\n\nGiven a parameter set defining solvent and sidechain sphere parameters for Alanine and Valine, compute the hydration free energy change\n$$\n\\Delta \\Delta G_{\\mathrm{hyd}} = \\left[G_{\\mathrm{polar}}^{\\mathrm{Val}} + G_{\\mathrm{np}}^{\\mathrm{Val}}\\right] - \\left[G_{\\mathrm{polar}}^{\\mathrm{Ala}} + G_{\\mathrm{np}}^{\\mathrm{Ala}}\\right]\n$$\nin units of $\\mathrm{kcal/mol}$.\n\nYour program must implement the model from first principles described above and produce numerical results for the following test suite. Each case specifies the solvent permittivity $\\varepsilon_s$, the nonpolar coefficient $\\gamma$, the nonpolar offset $\\beta$, and the spherical site parameters for Alanine and Valine: charge $q$ (in units of $e$) and radius $R$ (in $\\AA$). All quantities in every case must be interpreted in the units explicitly stated.\n\n- Case $1$ (happy path, water-like solvent, neutral groups): $\\varepsilon_s = 78.37$, $\\gamma = 0.005$, $\\beta = 0.0$, Alanine: $q_{\\mathrm{Ala}} = 0.0$, $R_{\\mathrm{Ala}} = 2.0$; Valine: $q_{\\mathrm{Val}} = 0.0$, $R_{\\mathrm{Val}} = 2.5$.\n- Case $2$ (boundary, no mutation): $\\varepsilon_s = 78.37$, $\\gamma = 0.005$, $\\beta = 0.0$, Alanine: $q_{\\mathrm{Ala}} = 0.0$, $R_{\\mathrm{Ala}} = 2.0$; Valine: $q_{\\mathrm{Val}} = 0.0$, $R_{\\mathrm{Val}} = 2.0$.\n- Case $3$ (parameter sensitivity in the nonpolar term): $\\varepsilon_s = 78.37$, $\\gamma = 0.0072$, $\\beta = 0.0$, Alanine: $q_{\\mathrm{Ala}} = 0.0$, $R_{\\mathrm{Ala}} = 2.0$; Valine: $q_{\\mathrm{Val}} = 0.0$, $R_{\\mathrm{Val}} = 2.5$.\n- Case $4$ (different solvent permittivity with neutral groups): $\\varepsilon_s = 32.60$, $\\gamma = 0.005$, $\\beta = 0.0$, Alanine: $q_{\\mathrm{Ala}} = 0.0$, $R_{\\mathrm{Ala}} = 2.0$; Valine: $q_{\\mathrm{Val}} = 0.0$, $R_{\\mathrm{Val}} = 2.5$.\n\nRequirements for your program:\n- Use the physical constants and definitions above to derive and implement the polar contribution consistent with the charging work in a dielectric continuum.\n- Use $A = 4 \\pi R^2$ for the SASA of a sphere and compute the nonpolar energy as $G_{\\mathrm{np}} = \\gamma A + \\beta$.\n- Compute $\\Delta \\Delta G_{\\mathrm{hyd}}$ in $\\mathrm{kcal/mol}$ for each case and round each result to exactly $6$ decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, $[x_1,x_2,x_3,x_4]$, where each $x_i$ is the float result for case $i$ rounded to $6$ decimal places.\n\nExpress all final numerical answers in $\\mathrm{kcal/mol}$. No angles are involved. Percentages do not appear in this problem.", "solution": "The problem is valid as it is scientifically grounded in the principles of classical electrostatics and statistical mechanics, is well-posed with all necessary parameters provided, and is expressed in objective, formal language. We will now proceed with the solution.\n\nThe objective is to compute the change in hydration free energy, $\\Delta \\Delta G_{\\mathrm{hyd}}$, for the mutation of an Alanine ($\\mathrm{Ala}$) sidechain to a Valine ($\\mathrm{Val}$) sidechain. The total hydration free energy, $\\Delta G_{\\mathrm{hyd}}$, is defined as the reversible work to transfer a solute from vacuum into a solvent. The change for the mutation is given by:\n$$ \\Delta \\Delta G_{\\mathrm{hyd}} = \\Delta G_{\\mathrm{hyd}}(\\mathrm{Val}) - \\Delta G_{\\mathrm{hyd}}(\\mathrm{Ala}) $$\nThe model specified decomposes the hydration free energy into an electrostatic polar term, $G_{\\mathrm{polar}}$, and a nonpolar term, $G_{\\mathrm{np}}$, related to surface area. Thus, for a given species $i$ (either $\\mathrm{Ala}$ or $\\mathrm{Val}$):\n$$ \\Delta G_{\\mathrm{hyd}}^{i} = G_{\\mathrm{polar}}^{i} + G_{\\mathrm{np}}^{i} $$\nThe total change for the mutation is:\n$$ \\Delta \\Delta G_{\\mathrm{hyd}} = (G_{\\mathrm{polar}}^{\\mathrm{Val}} + G_{\\mathrm{np}}^{\\mathrm{Val}}) - (G_{\\mathrm{polar}}^{\\mathrm{Ala}} + G_{\\mathrm{np}}^{\\mathrm{Ala}}) = (G_{\\mathrm{polar}}^{\\mathrm{Val}} - G_{\\mathrm{polar}}^{\\mathrm{Ala}}) + (G_{\\mathrm{np}}^{\\mathrm{Val}} - G_{\\mathrm{np}}^{\\mathrm{Ala}}) $$\n\nWe shall derive each term from the fundamental principles stipulated.\n\nFirst, we address the polar contribution, $G_{\\mathrm{polar}}$, using the Born model. This term represents the electrostatic work of transferring a charged sphere from vacuum (relative permittivity $\\varepsilon_{vac} = 1$) to a solvent with relative permittivity $\\varepsilon_s$. This work is equivalent to the change in the electrostatic self-energy of the ion. The self-energy of a conducting sphere of radius $R$ is the work required to charge it from a net charge of $0$ to its final charge $Q$.\n\nIn a medium with uniform permittivity $\\varepsilon$, the electrostatic potential $\\phi$ on the surface of a sphere of radius $R$ carrying a charge $q'$ is $\\phi(q') = k_c \\frac{q'}{\\varepsilon R}$, where $k_c = (4\\pi\\varepsilon_0)^{-1}$ is Coulomb's constant in SI units. The incremental work $dW$ required to bring an additional infinitesimal charge $dq'$ to the sphere's surface is $dW = \\phi(q') dq'$.\nThe total self-energy, $W_{self}$, is the integral of this work as the sphere is charged from $0$ to $Q$:\n$$ W_{self} = \\int_0^Q \\phi(q') dq' = \\int_0^Q k_c \\frac{q'}{\\varepsilon R} dq' = \\frac{k_c Q^2}{2\\varepsilon R} $$\nThe problem provides a pre-factored Coulomb conversion constant, $k_e$, in units of $\\mathrm{kcal \\cdot \\AA/(mol \\cdot e^2)}$. This constant is designed to be used with charge $q$ expressed as a pure number (in units of elementary charge $e$) and radius $R$ in Ångströms ($\\AA$) to yield energy in $\\mathrm{kcal/mol}$. The formula for self-energy in these units becomes:\n$$ W_{self} = \\frac{k_e q^2}{2\\varepsilon R} $$\nThe polar contribution to the hydration free energy, $G_{\\mathrm{polar}}$, is the difference in self-energy between the solvent ($\\varepsilon = \\varepsilon_s$) and vacuum ($\\varepsilon = 1$):\n$$ G_{\\mathrm{polar}} = W_{self}(\\text{solvent}) - W_{self}(\\text{vacuum}) = \\frac{k_e q^2}{2\\varepsilon_s R} - \\frac{k_e q^2}{2R} $$\nFactoring out common terms, we arrive at the Born equation:\n$$ G_{\\mathrm{polar}} = \\frac{k_e q^2}{2R} \\left(\\frac{1}{\\varepsilon_s} - 1\\right) $$\n\nSecond, we formulate the nonpolar contribution, $G_{\\mathrm{np}}$. The problem states this term is a linear function of the solvent-accessible surface area (SASA), $A$:\n$$ G_{\\mathrm{np}} = \\gamma A + \\beta $$\nHere, $\\gamma$ is the surface tension coefficient in $\\mathrm{kcal/(mol \\cdot \\AA^2)}$ and $\\beta$ is a constant offset in $\\mathrm{kcal/mol}$. The sidechains are modeled as spheres of radius $R$. The surface area of a sphere is:\n$$ A = 4\\pi R^2 $$\nSubstituting this into the expression for $G_{\\mathrm{np}}$ gives:\n$$ G_{\\mathrm{np}} = \\gamma (4\\pi R^2) + \\beta $$\n\nNow, we combine these components to find the overall free energy change for the mutation, $\\Delta \\Delta G_{\\mathrm{hyd}}$.\nThe change in the polar term is:\n$$ \\Delta G_{\\mathrm{polar}} = G_{\\mathrm{polar}}^{\\mathrm{Val}} - G_{\\mathrm{polar}}^{\\mathrm{Ala}} = \\frac{k_e}{2} \\left(\\frac{1}{\\varepsilon_s} - 1\\right) \\left( \\frac{q_{\\mathrm{Val}}^2}{R_{\\mathrm{Val}}} - \\frac{q_{\\mathrm{Ala}}^2}{R_{\\mathrm{Ala}}} \\right) $$\nThe change in the nonpolar term is:\n$$ \\Delta G_{\\mathrm{np}} = G_{\\mathrm{np}}^{\\mathrm{Val}} - G_{\\mathrm{np}}^{\\mathrm{Ala}} = \\left(\\gamma (4\\pi R_{\\mathrm{Val}}^2) + \\beta\\right) - \\left(\\gamma (4\\pi R_{\\mathrm{Ala}}^2) + \\beta\\right) $$\nAs stated in the problem, the offset $\\beta$ is assumed to be the same for both states and thus cancels out:\n$$ \\Delta G_{\\mathrm{np}} = 4\\pi\\gamma (R_{\\mathrm{Val}}^2 - R_{\\mathrm{Ala}}^2) $$\nThe total change in hydration free energy is the sum of these two contributions:\n$$ \\Delta \\Delta G_{\\mathrm{hyd}} = \\frac{k_e}{2} \\left(\\frac{1}{\\varepsilon_s} - 1\\right) \\left( \\frac{q_{\\mathrm{Val}}^2}{R_{\\mathrm{Val}}} - \\frac{q_{\\mathrm{Ala}}^2}{R_{\\mathrm{Ala}}} \\right) + 4\\pi\\gamma (R_{\\mathrm{Val}}^2 - R_{\\mathrm{Ala}}^2) $$\nThis final equation is implemented to compute the numerical results for each test case. For all provided cases, the charges $q_{\\mathrm{Ala}}$ and $q_{\\mathrm{Val}}$ are $0.0$, which simplifies the calculation by making the polar contribution $\\Delta G_{\\mathrm{polar}}$ equal to zero. The calculation thus reduces to the nonpolar term only.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the change in hydration free energy for mutating Alanine to Valine\n    using a continuum solvent model.\n    \"\"\"\n\n    # Define physical constants from the problem statement.\n    # Coulomb conversion constant in kcal.A/(mol.e^2).\n    k_e = 332.06371\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (epsilon_s, gamma, q_Ala, R_Ala, q_Val, R_Val)\n    # beta is 0.0 in all cases and cancels out, so it is omitted.\n    test_cases = [\n        # Case 1: happy path, water-like solvent, neutral groups\n        (78.37, 0.005, 0.0, 2.0, 0.0, 2.5),\n        # Case 2: boundary, no mutation\n        (78.37, 0.005, 0.0, 2.0, 0.0, 2.0),\n        # Case 3: parameter sensitivity in the nonpolar term\n        (78.37, 0.0072, 0.0, 2.0, 0.0, 2.5),\n        # Case 4: different solvent permittivity with neutral groups\n        (32.60, 0.005, 0.0, 2.0, 0.0, 2.5),\n    ]\n\n    results = []\n    for case in test_cases:\n        epsilon_s, gamma, q_ala, r_ala, q_val, r_val = case\n\n        # Calculate the change in the polar (electrostatic) free energy.\n        # This term is zero for all test cases since all charges are 0.\n        # However, it is implemented for generality.\n        polar_factor = (k_e / 2.0) * (1.0 / epsilon_s - 1.0)\n        \n        # Handle division by zero if radius is zero (not in test cases, but good practice).\n        term_val = q_val**2 / r_val if r_val != 0 else 0\n        term_ala = q_ala**2 / r_ala if r_ala != 0 else 0\n        \n        delta_g_polar = polar_factor * (term_val - term_ala)\n\n        # Calculate the change in the nonpolar free energy (SASA-based).\n        # The offset beta cancels out.\n        # A = 4 * pi * R^2\n        delta_g_nonpolar = 4.0 * np.pi * gamma * (r_val**2 - r_ala**2)\n        \n        # Total change in hydration free energy\n        delta_delta_g_hyd = delta_g_polar + delta_g_nonpolar\n\n        # Round the result to 6 decimal places as required.\n        results.append(round(delta_delta_g_hyd, 6))\n\n    # Format the final output as a comma-separated list in brackets.\n    # The map(str, ...) ensures float representation is standard.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2455813"}, {"introduction": "Building on the concept of solvent-mediated effects, this next practice explores the hydrophobic effect by modeling the association of two nonpolar molecules in water [@problem_id:2455815]. You will construct a Potential of Mean Force (PMF), which describes the free energy, $\\Delta G(r)$, as a function of the distance between two methane molecules. This model combines the direct van der Waals interaction with a solvent-induced term derived from the change in exposed surface area, providing a powerful, albeit simplified, illustration of how enthalpic and entropic contributions from the solvent drive molecular association.", "problem": "You are asked to compute the free energy of association for two methane molecules in liquid water as a function of their center-to-center separation distance. Model each methane as a single Lennard–Jones (LJ) site located at its center and as a hard sphere for solvent exposure. Assume ambient conditions and use the following definitions and parameters.\n\nDefinitions and physical model:\n- The potential of mean force (PMF) at separation distance $r$, denoted $\\Delta G(r)$, is modeled as the sum of the direct pair interaction and a solvent term arising from changes in solvent-accessible surface area (SASA) relative to infinite separation:\n  - Direct pair interaction: the $12$–$6$ Lennard–Jones potential $U_{\\mathrm{LJ}}(r)$ with parameters specified below.\n  - Solvent term: the free energy contribution is proportional to the SASA of the union of the two solvent-accessible spheres, minus the SASA at infinite separation. Let the solvent-accessible radius be $R_{\\mathrm{SASA}} = a + r_{\\mathrm{p}}$, where $a$ is the methane hard-sphere radius and $r_{\\mathrm{p}}$ is the solvent probe radius. The SASA is taken to be the geometric surface area (no curvature corrections). For $r \\ge 2 R_{\\mathrm{SASA}}$, the spheres do not overlap and the SASA of the union equals the sum of the two separate SASAs.\n- Use the surface tension of water to convert SASA change to free energy. Treat the surface tension $\\gamma$ as an energy per unit area.\n\nParameters and constants to use:\n- Methane hard-sphere radius: $a = 2.0\\ \\mathrm{\\AA}$.\n- Solvent probe radius: $r_{\\mathrm{p}} = 1.4\\ \\mathrm{\\AA}$.\n- Lennard–Jones size parameter: $\\sigma = 3.73\\ \\mathrm{\\AA}$.\n- Lennard–Jones well depth given as a temperature: $\\epsilon / k_{\\mathrm{B}} = 148\\ \\mathrm{K}$. Convert to $\\epsilon$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ using the molar gas constant $R = 8.314462618 \\times 10^{-3}\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$.\n- Water surface tension: $\\gamma_{\\mathrm{water}} = 0.072\\ \\mathrm{J}\\,\\mathrm{m}^{-2}$. Convert this to $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{\\AA}^{-2}$ using Avogadro’s constant $N_{\\mathrm{A}} = 6.02214076 \\times 10^{23}\\ \\mathrm{mol}^{-1}$ and $1\\ \\mathrm{m}^{2} = 10^{20}\\ \\mathrm{\\AA}^{2}$.\n\nMathematical requirements to implement:\n- Use the standard $12$–$6$ Lennard–Jones potential $U_{\\mathrm{LJ}}(r) = 4 \\epsilon \\left[\\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^{6}\\right]$.\n- Let $A_{\\mathrm{union}}(r)$ be the surface area of the union of two spheres of radius $R_{\\mathrm{SASA}}$ with centers separated by $r$. Compute the solvent free energy contribution as $\\Delta G_{\\mathrm{solv}}(r) = \\gamma_{\\mathrm{water}}^{(\\mathrm{kJ/mol/\\AA^{2}})} \\left(A_{\\mathrm{union}}(r) - 2 \\times 4\\pi R_{\\mathrm{SASA}}^{2}\\right)$, which is zero for $r \\ge 2 R_{\\mathrm{SASA}}$ and negative when the spheres overlap. The PMF is then $\\Delta G(r) = U_{\\mathrm{LJ}}(r) + \\Delta G_{\\mathrm{solv}}(r)$.\n- All energies must be expressed in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$. All distances are in $\\mathrm{\\AA}$.\n\nTest suite:\nUsing the parameter values above, compute $\\Delta G(r)$ for the following separation distances (all in $\\mathrm{\\AA}$), in this exact order:\n- $r_{1} = 12.0$\n- $r_{2} = 6.8$\n- $r_{3} = 5.0$\n- $r_{4} = 4.186$\n- $r_{5} = 3.5$\n\nAnswer specification:\n- For each test distance, output a floating-point value equal to $\\Delta G(r)$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, rounded to six decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $\\left[ \\text{result}_{1}, \\text{result}_{2}, \\ldots \\right]$ but without spaces).", "solution": "The problem statement has been analyzed and is determined to be valid. It is scientifically grounded, well-posed, objective, and contains all necessary information to derive a unique solution. The model provided is a simplified but standard method in computational chemistry for estimating the free energy of association in an implicit solvent. We will now proceed with a formal solution.\n\nThe problem requires the calculation of the potential of mean force (PMF), $\\Delta G(r)$, for the association of two methane molecules in water as a function of their separation distance $r$. The PMF is modeled as the sum of two contributions: the direct interaction potential between the two molecules, $U_{\\mathrm{LJ}}(r)$, and the free energy change associated with solvent rearrangement, $\\Delta G_{\\mathrm{solv}}(r)$.\n$$\n\\Delta G(r) = U_{\\mathrm{LJ}}(r) + \\Delta G_{\\mathrm{solv}}(r)\n$$\nAll energies must be in units of $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ and distances in $\\mathrm{\\AA}$.\n\nFirst, we must establish a consistent set of parameters and constants in the required units.\nThe Lennard-Jones well depth $\\epsilon$ is given as a temperature, $\\epsilon / k_{\\mathrm{B}} = 148\\ \\mathrm{K}$. Using the molar gas constant $R = N_{\\mathrm{A}} k_{\\mathrm{B}} = 8.314462618 \\times 10^{-3}\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$, we convert $\\epsilon$ to a molar energy:\n$$\n\\epsilon = \\left(\\frac{\\epsilon}{k_{\\mathrm{B}}}\\right) \\times R = 148\\ \\mathrm{K} \\times 8.314462618 \\times 10^{-3}\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1} \\approx 1.230538\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\n$$\nThe Lennard-Jones size parameter is given as $\\sigma = 3.73\\ \\mathrm{\\AA}$.\n\nThe solvent-related term depends on the surface tension of water, $\\gamma_{\\mathrm{water}} = 0.072\\ \\mathrm{J}\\,\\mathrm{m}^{-2}$. We must convert this to units of $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{\\AA}^{-2}$ using Avogadro's constant, $N_{\\mathrm{A}} = 6.02214076 \\times 10^{23}\\ \\mathrm{mol}^{-1}$, and the conversions $1\\ \\mathrm{kJ} = 1000\\ \\mathrm{J}$ and $1\\ \\mathrm{m} = 10^{10}\\ \\mathrm{\\AA}$:\n$$\n\\gamma = 0.072\\ \\frac{\\mathrm{J}}{\\mathrm{m}^2} \\times \\frac{10^{-3}\\ \\mathrm{kJ}}{1\\ \\mathrm{J}} \\times \\left(\\frac{1\\ \\mathrm{m}}{10^{10}\\ \\mathrm{\\AA}}\\right)^2 \\times N_{\\mathrm{A}}\\ \\mathrm{mol}^{-1}\n$$\n$$\n\\gamma = 0.072 \\times 10^{-3} \\times 10^{-20} \\times 6.02214076 \\times 10^{23}\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{\\AA}^{-2} \\approx 0.433594\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{\\AA}^{-2}\n$$\nThe solvent-accessible radius $R_{\\mathrm{SASA}}$ is the sum of the methane hard-sphere radius $a = 2.0\\ \\mathrm{\\AA}$ and the solvent probe radius $r_{\\mathrm{p}} = 1.4\\ \\mathrm{\\AA}$:\n$$\nR_{\\mathrm{SASA}} = a + r_{\\mathrm{p}} = 2.0\\ \\mathrm{\\AA} + 1.4\\ \\mathrm{\\AA} = 3.4\\ \\mathrm{\\AA}\n$$\nThe direct interaction is given by the $12$-$6$ Lennard-Jones potential:\n$$\nU_{\\mathrm{LJ}}(r) = 4\\epsilon \\left[ \\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^{6} \\right]\n$$\nThe solvation free energy $\\Delta G_{\\mathrm{solv}}(r)$ is proportional to the change in solvent-accessible surface area (SASA) compared to infinite separation. The change in SASA, $\\Delta A(r)$, for two spheres of radius $R = R_{\\mathrm{SASA}}$ brought from infinity to a separation $r$ is the surface area of the union minus the surface area of the two separate spheres. For $r \\geq 2R$, the spheres do not overlap and $\\Delta A(r) = 0$.\nFor $r < 2R$, the surface area of the union of two identical spheres is $A_{\\mathrm{union}}(r) = 2 \\times (2\\pi R (R + r/2)) = 4\\pi R^2 + 2\\pi Rr$. The total area of two separate spheres is $2 \\times 4\\pi R^2 = 8\\pi R^2$. The change in area is thus:\n$$\n\\Delta A(r) = A_{\\mathrm{union}}(r) - 8\\pi R^2 = (4\\pi R^2 + 2\\pi R r) - 8\\pi R^2 = 2\\pi R r - 4\\pi R^2 = 2\\pi R (r - 2R)\n$$\nThis change is negative, representing the area that is \"buried\" upon complexation.\nThe solvation free energy is then:\n$$\n\\Delta G_{\\mathrm{solv}}(r) = \\gamma \\times \\Delta A(r) = \\begin{cases} \\gamma \\left[ 2\\pi R_{\\mathrm{SASA}} (r - 2R_{\\mathrm{SASA}}) \\right] & \\text{if } r < 2R_{\\mathrm{SASA}} \\\\ 0 & \\text{if } r \\ge 2R_{\\mathrm{SASA}} \\end{cases}\n$$\nHere, $2R_{\\mathrm{SASA}} = 2 \\times 3.4\\ \\mathrm{\\AA} = 6.8\\ \\mathrm{\\AA}$.\n\nCombining these terms, the full expression for the PMF is:\n$$\n\\Delta G(r) = 4\\epsilon \\left[ \\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^{6} \\right] + \\begin{cases} \\gamma \\left[ 2\\pi R_{\\mathrm{SASA}} (r - 2R_{\\mathrm{SASA}}) \\right] & \\text{if } r < 6.8\\ \\mathrm{\\AA} \\\\ 0 & \\text{if } r \\ge 6.8\\ \\mathrm{\\AA} \\end{cases}\n$$\nWe will now implement these formulae to calculate $\\Delta G(r)$ for the specified distances $r \\in \\{12.0, 6.8, 5.0, 4.186, 3.5\\}\\ \\mathrm{\\AA}$. The calculation will be performed programmatically, using the derived constants with high precision.\nFor example, for $r=5.0\\ \\mathrm{\\AA}$:\nSince $r=5.0 < 6.8$, both terms contribute.\n$U_{\\mathrm{LJ}}(5.0) = 4(1.230538) \\left[ \\left(\\frac{3.73}{5.0}\\right)^{12} - \\left(\\frac{3.73}{5.0}\\right)^{6} \\right] \\approx -0.700624\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n$\\Delta G_{\\mathrm{solv}}(5.0) = (0.433594) \\left[ 2\\pi (3.4) (5.0 - 6.8) \\right] \\approx -16.674458\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n$\\Delta G(5.0) = -0.700624 - 16.674458 = -17.375082\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\nThe final code will apply this logic to all test cases and format the output as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the free energy of association for two methane molecules\n    in liquid water as a function of their separation distance.\n    \"\"\"\n\n    # Define parameters and constants\n    A_RADIUS = 2.0  # Methane hard-sphere radius, Angstrom\n    R_PROBE = 1.4  # Solvent probe radius, Angstrom\n    SIGMA = 3.73  # Lennard-Jones size parameter, Angstrom\n    EPSILON_OVER_KB = 148.0  # Lennard-Jones well depth, K\n    R_GAS_CONSTANT = 8.314462618e-3  # Molar gas constant, kJ mol^-1 K^-1\n    GAMMA_WATER = 0.072  # Water surface tension, J m^-2\n    NA_AVOGADRO = 6.02214076e23  # Avogadro's constant, mol^-1\n    M2_TO_A2 = 1e20  # Conversion from m^2 to Angstrom^2\n\n    # Calculate derived parameters in consistent units (kJ, mol, Angstrom)\n    # Solvent-accessible radius\n    r_sasa = A_RADIUS + R_PROBE  # Angstrom\n\n    # Lennard-Jones well depth in kJ/mol\n    epsilon = EPSILON_OVER_KB * R_GAS_CONSTANT  # kJ/mol\n\n    # Surface tension in kJ mol^-1 Angstrom^-2\n    # gamma [J/m^2] * (1e-3 kJ/J) * (1/1e20 m^2/A^2) * N_A [mol^-1]\n    gamma = GAMMA_WATER * 1e-3 / M2_TO_A2 * NA_AVOGADRO\n\n    # Test cases for separation distance r in Angstrom\n    test_cases = [12.0, 6.8, 5.0, 4.186, 3.5]\n\n    results = []\n    \n    # The critical distance for solvent sphere overlap is 2 * r_sasa\n    overlap_distance = 2.0 * r_sasa\n\n    def calculate_pmf(r, epsilon_val, sigma_val, gamma_val, r_sasa_val, overlap_dist_val):\n        \"\"\"Calculates the Potential of Mean Force (PMF) delta_G(r).\"\"\"\n        \n        # 1. Direct pair interaction: Lennard-Jones potential\n        sr6 = (sigma_val / r) ** 6\n        sr12 = sr6 ** 2\n        u_lj = 4.0 * epsilon_val * (sr12 - sr6)\n\n        # 2. Solvent term: Free energy from SASA change\n        delta_g_solv = 0.0\n        if r  overlap_dist_val:\n            # Change in surface area for two overlapping spheres\n            delta_area = 2.0 * np.pi * r_sasa_val * (r - overlap_dist_val)\n            delta_g_solv = gamma_val * delta_area\n        \n        # 3. Total PMF\n        delta_g_total = u_lj + delta_g_solv\n        return delta_g_total\n\n    for r_dist in test_cases:\n        pmf_value = calculate_pmf(r_dist, epsilon, SIGMA, gamma, r_sasa, overlap_distance)\n        results.append(pmf_value)\n\n    # Format the results to six decimal places for the final output\n    formatted_results = [f\"{res:.6f}\" for res in results]\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2455815"}, {"introduction": "Our final practice moves from constructing simple models to analyzing the output of realistic molecular simulations to predict a biologically crucial quantity: the change in a ligand's binding affinity, $\\Delta\\Delta G_{\\mathrm{bind}}$, upon a protein mutation [@problem_id:2448843]. You will work with a thermodynamic cycle, a cornerstone of relative free energy calculations, and apply the statistically robust Bennett Acceptance Ratio (BAR) method. This exercise provides direct, hands-on experience with a powerful technique used to extract free energy differences from simulation data, bridging the gap between theoretical statistical mechanics and practical applications in drug discovery and protein engineering.", "problem": "You are given a thermodynamic cycle for evaluating the change in binding free energy upon a single point mutation of a receptor protein, using a relative alchemical cycle between two molecular states: the wild-type state (state $A$) and the mutant state (state $B$). The change in binding free energy due to mutation is defined as the difference between the mutation free energy in the bound (receptor–ligand complex) environment and the mutation free energy in the unbound (bulk solvent) environment. Denote the mutation free energy in the bound and unbound environments by $\\Delta G_{\\mathrm{bound}}$ and $\\Delta G_{\\mathrm{unbound}}$, respectively. The binding free energy shift to be reported is $\\Delta\\Delta G_{\\mathrm{bind}} = \\Delta G_{\\mathrm{bound}} - \\Delta G_{\\mathrm{unbound}}$.\n\nFor each environment, you are provided with finite samples of potential energy differences evaluated on configurations from each endpoint state of the alchemical transformation. Specifically, for an environment $s \\in \\{\\mathrm{bound},\\mathrm{unbound}\\}$:\n- A set of \"forward-ensemble\" samples $\\{\\Delta u^{(f)}_{i}\\}$, where $\\Delta u^{(f)}_{i} = u_B(x_i)-u_A(x_i)$ and $\\{x_i\\}$ are configurations drawn from the canonical ensemble of state $A$,\n- A set of \"reverse-ensemble\" samples $\\{\\Delta u^{(r)}_{j}\\}$, where $\\Delta u^{(r)}_{j} = u_A(y_j)-u_B(y_j)$ and $\\{y_j\\}$ are configurations drawn from the canonical ensemble of state $B$.\n\nAll potential energies are expressed in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$. The temperature is $T = 300\\,\\mathrm{K}$, and the Boltzmann constant is $k_{\\mathrm{B}} = 0.00831446261815324\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$. Use only these units to produce your final answers, and express each reported free energy shift in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n\nYour task is to use the given samples and the canonical statistical mechanics definitions at temperature $T$ to compute $\\Delta G_{\\mathrm{bound}}$ and $\\Delta G_{\\mathrm{unbound}}$ for each test case, and then report $\\Delta\\Delta G_{\\mathrm{bind}}$ for that case. Round each reported $\\Delta\\Delta G_{\\mathrm{bind}}$ value to exactly three decimal places, expressed in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n\nTest suite:\n- Case $1$ (typical well-sampled scenario):\n  - Bound, forward-ensemble $\\{\\Delta u^{(f)}_{i}\\}$: [ $-2.2$, $-1.8$, $-2.0$, $-2.1$, $-1.9$ ]\n  - Bound, reverse-ensemble $\\{\\Delta u^{(r)}_{j}\\}$: [ $2.2$, $1.8$, $2.0$, $2.1$, $1.9$ ]\n  - Unbound, forward-ensemble $\\{\\Delta u^{(f)}_{i}\\}$: [ $0.8$, $1.2$, $1.0$, $1.1$, $0.9$ ]\n  - Unbound, reverse-ensemble $\\{\\Delta u^{(r)}_{j}\\}$: [ $-1.2$, $-0.8$, $-1.0$, $-1.1$, $-0.9$ ]\n- Case $2$ (balanced transformation, near-zero mutation free energy and near-zero binding shift):\n  - Bound, forward-ensemble $\\{\\Delta u^{(f)}_{i}\\}$: [ $-0.1$, $0.0$, $0.1$ ]\n  - Bound, reverse-ensemble $\\{\\Delta u^{(r)}_{j}\\}$: [ $0.1$, $0.0$, $-0.1$ ]\n  - Unbound, forward-ensemble $\\{\\Delta u^{(f)}_{i}\\}$: [ $-0.1$, $0.0$, $0.1$ ]\n  - Unbound, reverse-ensemble $\\{\\Delta u^{(r)}_{j}\\}$: [ $0.1$, $0.0$, $-0.1$ ]\n- Case $3$ (strongly stabilizing bound transformation with a slightly less stabilizing unbound transformation):\n  - Bound, forward-ensemble $\\{\\Delta u^{(f)}_{i}\\}$: [ $-5.5$, $-4.5$, $-5.0$ ]\n  - Bound, reverse-ensemble $\\{\\Delta u^{(r)}_{j}\\}$: [ $4.5$, $5.5$, $5.0$ ]\n  - Unbound, forward-ensemble $\\{\\Delta u^{(f)}_{i}\\}$: [ $-4.9$, $-4.7$, $-4.8$ ]\n  - Unbound, reverse-ensemble $\\{\\Delta u^{(r)}_{j}\\}$: [ $4.7$, $4.9$, $4.8$ ]\n\nYour program must compute $\\Delta\\Delta G_{\\mathrm{bind}}$ for each case and output the three results as a single line, formatted as a comma-separated list enclosed in square brackets, for example, $[a,b,c]$, where each of $a$, $b$, and $c$ is a float rounded to exactly three decimal places in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$. No additional text or lines should be printed.", "solution": "The problem statement has been critically examined and is determined to be **valid**. It is a well-posed problem in computational statistical mechanics, grounded in fundamental principles and free of any scientific or logical inconsistencies. The data provided is complete and sufficient for a unique solution.\n\nThe task is to compute the change in binding free energy, $\\Delta\\Delta G_{\\mathrm{bind}}$, for a protein mutation. This quantity is defined as $\\Delta\\Delta G_{\\mathrm{bind}} = \\Delta G_{\\mathrm{bound}} - \\Delta G_{\\mathrm{unbound}}$, where $\\Delta G_{\\mathrm{bound}}$ and $\\Delta G_{\\mathrm{unbound}}$ are the free energy changes of mutation in the bound and unbound states, respectively. For each state, we are provided with samples of potential energy differences from molecular dynamics simulations of the initial (wild-type, $A$) and final (mutant, $B$) states.\n\nThe most statistically robust method for calculating the free energy difference $\\Delta G = G_B - G_A$ using samples from both ensembles is the Bennett Acceptance Ratio (BAR) method. This method provides the minimum variance estimate of $\\Delta G$ and is considered the gold standard. We will employ BAR to compute $\\Delta G_{\\mathrm{bound}}$ and $\\Delta G_{\\mathrm{unbound}}$.\n\nThe Helmholtz free energy difference between two states $A$ and $B$ is given by $\\Delta G = -k_{\\mathrm{B}}T \\ln(Z_B/Z_A)$, where $Z$ is the canonical partition function, $k_{\\mathrm{B}}$ is the Boltzmann constant, and $T$ is the temperature. The BAR method provides an implicit equation for $\\Delta G$:\n$$\n\\left\\langle \\frac{1}{1 + e^{\\beta(\\Delta U - \\Delta G)}} \\right\\rangle_B = \\left\\langle \\frac{1}{1 + e^{-\\beta(\\Delta U - \\Delta G)}} \\right\\rangle_A\n$$\nHere, $\\beta = 1/(k_{\\mathrm{B}}T)$, $\\Delta U = U_B - U_A$ is the potential energy difference, and $\\langle \\cdot \\rangle_A$ and $\\langle \\cdot \\rangle_B$ denote canonical ensemble averages over states $A$ and $B$, respectively.\n\nThe problem provides finite samples to estimate these averages:\n- Forward samples from state $A$: $\\{\\Delta u^{(f)}_{i}\\}_{i=1}^{N_f}$, where $\\Delta u^{(f)}_{i} = U_B(x_i) - U_A(x_i)$.\n- Reverse samples from state $B$: $\\{\\Delta u^{(r)}_{j}\\}_{j=1}^{N_r}$, where $\\Delta u^{(r)}_{j} = U_A(y_j) - U_B(y_j)$. Note that this implies $\\Delta U(y_j) = -\\Delta u^{(r)}_{j}$.\n\nSubstituting the sample averages into the BAR equation, we get the equation to be solved for $\\Delta G$:\n$$\n\\frac{1}{N_f} \\sum_{i=1}^{N_f} \\frac{1}{1 + e^{-\\beta(\\Delta u^{(f)}_{i} - \\Delta G)}} = \\frac{1}{N_r} \\sum_{j=1}^{N_r} \\frac{1}{1 + e^{\\beta(-\\Delta u^{(r)}_{j} - \\Delta G)}}\n$$\nSince for all test cases, the number of forward samples $N_f$ equals the number of reverse samples $N_r$, the equation simplifies slightly by canceling the pre-factors $1/N_f$ and $1/N_r$. We must find the root of the function $F(\\Delta G)$:\n$$\nF(\\Delta G) = \\sum_{i=1}^{N_f} \\frac{1}{1 + e^{-\\beta(\\Delta u^{(f)}_{i} - \\Delta G)}} - \\sum_{j=1}^{N_r} \\frac{1}{1 + e^{\\beta(-\\Delta u^{(r)}_{j} - \\Delta G)}} = 0\n$$\nThis is a nonlinear equation that can be solved numerically. The function $F(\\Delta G)$ is monotonic, guaranteeing a unique root. We will use a numerical root-finding algorithm, specifically the Brent-Dekker method (`brentq`), provided by the `SciPy` library, for its robustness.\n\nThe procedure for each test case is as follows:\n1. Define the physical constants: $T = 300\\,\\mathrm{K}$ and $k_{\\mathrm{B}} = 0.00831446261815324\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$. From these, compute the thermal energy term $\\beta = 1/(k_{\\mathrm{B}}T)$.\n2. For the `bound` environment, use the provided forward and reverse samples $\\{\\Delta u^{(f, \\mathrm{bound})}_{i}\\}$ and $\\{\\Delta u^{(r, \\mathrm{bound})}_{j}\\}$ to set up and solve the BAR equation for $\\Delta G_{\\mathrm{bound}}$.\n3. For the `unbound` environment, use the provided samples $\\{\\Delta u^{(f, \\mathrm{unbound})}_{i}\\}$ and $\\{\\Delta u^{(r, \\mathrm{unbound})}_{j}\\}$ to set up and solve the BAR equation for $\\Delta G_{\\mathrm{unbound}}$.\n4. Compute the final quantity $\\Delta\\Delta G_{\\mathrm{bind}} = \\Delta G_{\\mathrm{bound}} - \\Delta G_{\\mathrm{unbound}}$.\n5. Round the resulting value to three decimal places as required.\n\nThe calculation for $k_{\\mathrm{B}}T$ is:\n$k_{\\mathrm{B}}T = (0.00831446261815324\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}) \\times (300\\,\\mathrm{K}) \\approx 2.494338785\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n\nAn interesting observation in the provided test data is the symmetry: for each case, the set of forward samples $\\{\\Delta u_i^{(f)}\\}$ is identical to the set of negated reverse samples $\\{-\\Delta u_j^{(r)}\\}$. Furthermore, each of these sets is numerically symmetric about its arithmetic mean. Under these specific conditions, the solution to the BAR equation is simply the arithmetic mean of the energy samples, $\\Delta G = \\overline{\\Delta u^{(f)}}$. While this provides a convenient analytical check, the implementation will use the general numerical solver to demonstrate rigorous application of the BAR method.\n\n- For Case $1$:\n  - $\\Delta G_{\\mathrm{bound}} = \\text{mean}([-2.2, -1.8, -2.0, -2.1, -1.9]) = -2.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n  - $\\Delta G_{\\mathrm{unbound}} = \\text{mean}([0.8, 1.2, 1.0, 1.1, 0.9]) = 1.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n  - $\\Delta\\Delta G_{\\mathrm{bind}} = -2.0 - 1.0 = -3.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n- For Case $2$:\n  - $\\Delta G_{\\mathrm{bound}} = \\text{mean}([-0.1, 0.0, 0.1]) = 0.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n  - $\\Delta G_{\\mathrm{unbound}} = \\text{mean}([-0.1, 0.0, 0.1]) = 0.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n  - $\\Delta\\Delta G_{\\mathrm{bind}} = 0.0 - 0.0 = 0.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n- For Case $3$:\n  - $\\Delta G_{\\mathrm{bound}} = \\text{mean}([-5.5, -4.5, -5.0]) = -5.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n  - $\\Delta G_{\\mathrm{unbound}} = \\text{mean}([-4.9, -4.7, -4.8]) = -4.8\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n  - $\\Delta\\Delta G_{\\mathrm{bind}} = -5.0 - (-4.8) = -0.2\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n\nThe numerical implementation will confirm these values before formatting them for the final output.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import root_scalar\n\ndef solve_bar(u_fwd: np.ndarray, u_rev: np.ndarray, beta: float) - float:\n    \"\"\"\n    Calculates the free energy difference using the Bennett Acceptance Ratio (BAR) method.\n\n    Args:\n        u_fwd: Array of forward potential energy differences (U_B - U_A) from state A.\n        u_rev: Array of reverse potential energy differences (U_A - U_B) from state B.\n        beta: The inverse temperature, 1/(k_B * T).\n\n    Returns:\n        The estimated free energy difference, dG.\n    \"\"\"\n    n_fwd = len(u_fwd)\n    n_rev = len(u_rev)\n\n    def bar_equation(dG: float) - float:\n        \"\"\"The BAR equation G(dG) = 0 that we need to solve for dG.\"\"\"\n        # The BAR equation can be written as:\n        # avg_A[f(dG - U_f)] = avg_B[f(U_r - dG)] where f is the sigmoid function\n        # and U_r = U_B - U_A for state B samples. The problem provides u_rev = U_A - U_B.\n        # So we use -u_rev for U_B - U_A.\n        # This can be rewritten as: sum_A[f(dG - u_f)] - sum_B[f(-u_r - dG)] = 0.\n        # Or, using f(x) = 1/(1+exp(-x)):\n        # sum_A[1/(1+exp(-beta(dG - u_fwd)))] = sum_B[1/(1+exp(-beta(-u_rev - dG)))]\n        arg_fwd = beta * (u_fwd - dG)\n        sum_fwd = np.sum(1.0 / (1.0 + np.exp(arg_fwd)))\n\n        arg_rev = beta * (dG + u_rev)\n        sum_rev = np.sum(1.0 / (1.0 + np.exp(arg_rev)))\n        \n        return (sum_fwd / n_fwd) - (sum_rev / n_rev)\n\n    # Provide a generous bracket for the root-finding algorithm.\n    # The root should be close to the mean of the energy differences.\n    all_u = np.concatenate([u_fwd, -u_rev])\n    min_u, max_u = np.min(all_u), np.max(all_u)\n    # A wide bracket ensures robustness.\n    bracket = [min_u - 50.0, max_u + 50.0]\n\n    try:\n        sol = root_scalar(bar_equation, bracket=bracket, method='brentq')\n        return sol.root\n    except ValueError:\n        # This fallback can be useful if the bracket is not valid,\n        # which is unlikely here but good practice.\n        # A simple average is a reasonable initial guess.\n        initial_guess = np.mean(all_u)\n        sol = root_scalar(bar_equation, x0=initial_guess, method='brentq', bracket=bracket)\n        return sol.root\n\ndef solve():\n    \"\"\"\n    Main function to run the free energy calculations for all test cases.\n    \"\"\"\n    # Define constants\n    T = 300.0  # Temperature in Kelvin\n    k_B = 0.00831446261815324  # Boltzmann constant in kJ/(mol*K)\n    beta = 1.0 / (k_B * T)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1\n        (\n            [-2.2, -1.8, -2.0, -2.1, -1.9],  # Bound, forward\n            [2.2, 1.8, 2.0, 2.1, 1.9],       # Bound, reverse\n            [0.8, 1.2, 1.0, 1.1, 0.9],       # Unbound, forward\n            [-1.2, -0.8, -1.0, -1.1, -0.9]   # Unbound, reverse\n        ),\n        # Case 2\n        (\n            [-0.1, 0.0, 0.1],                # Bound, forward\n            [0.1, 0.0, -0.1],                # Bound, reverse\n            [-0.1, 0.0, 0.1],                # Unbound, forward\n            [0.1, 0.0, -0.1]                 # Unbound, reverse\n        ),\n        # Case 3\n        (\n            [-5.5, -4.5, -5.0],              # Bound, forward\n            [4.5, 5.5, 5.0],                 # Bound, reverse\n            [-4.9, -4.7, -4.8],              # Unbound, forward\n            [4.7, 4.9, 4.8]                  # Unbound, reverse\n        ),\n    ]\n\n    results = []\n    for case in test_cases:\n        # Unpack data for the current case\n        bound_fwd, bound_rev, unbound_fwd, unbound_rev = case\n\n        # Convert lists to numpy arrays for efficient computation\n        bound_fwd_np = np.array(bound_fwd)\n        bound_rev_np = np.array(bound_rev)\n        unbound_fwd_np = np.array(unbound_fwd)\n        unbound_rev_np = np.array(unbound_rev)\n\n        # Calculate free energy change for the bound state\n        dG_bound = solve_bar(bound_fwd_np, bound_rev_np, beta)\n\n        # Calculate free energy change for the unbound state\n        dG_unbound = solve_bar(unbound_fwd_np, unbound_rev_np, beta)\n\n        # Calculate the final binding free energy shift\n        ddG_bind = dG_bound - dG_unbound\n        \n        # Append the result formatted to three decimal places\n        results.append(f\"{ddG_bind:.3f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n\n```", "id": "2448843"}]}