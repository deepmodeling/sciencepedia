{"hands_on_practices": [{"introduction": "A primary goal of many SMD simulations is to compute equilibrium free energy differences, such as the free energy of binding. The Jarzynski equality provides the theoretical foundation for this, remarkably linking the work $W$ performed in irreversible, non-equilibrium processes to the equilibrium free energy change $\\Delta G$. This exercise will guide you through the practical application of this powerful theorem, demonstrating how to process a set of work values from multiple pulling experiments to obtain a single, statistically meaningful estimate of $\\Delta G$ [@problem_id:2455770].", "problem": "You are given a set of steered molecular dynamics pulling work values intended to estimate the reversible unfolding free energy change of a protein. Assume the measurements represent reversible work per mole as independent realizations of stochastic work, denoted by $W$, for unfolding at absolute temperature $T$. Let the reversible free energy difference be $\\Delta G$. For energy per mole, the fundamental relationship that links nonequilibrium work to equilibrium free energy is the Jarzynski equality written with the molar gas constant $R$:\n$$\ne^{-\\Delta G/(R\\,T)} \\;=\\; \\left\\langle e^{-W/(R\\,T)} \\right\\rangle,\n$$\nwhere $\\langle \\cdot \\rangle$ denotes the arithmetic mean over the realizations of $W$. In this problem, all work values are given in kilojoules per mole, $W$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, and temperatures are in kelvin, $T$ in $\\mathrm{K}$. Use the molar gas constant $R = 8.31446261815324\\times 10^{-3}\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$.\n\nFrom first principles, compute $\\Delta G$ for each case using the definition above. Express each $\\Delta G$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, rounded to exactly six decimal places.\n\nTest suite (each item is a pair $(T,\\{W_i\\})$):\n- Case $1$: $T = 300\\,\\mathrm{K}$, $\\{W_i\\} = [\\,7.6,\\,8.1,\\,8.0,\\,7.9,\\,8.2,\\,7.8,\\,8.0,\\,8.1,\\,7.7,\\,8.0\\,]$ $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n- Case $2$: $T = 300\\,\\mathrm{K}$, $\\{W_i\\} = [\\,18.0,\\,15.5,\\,16.2,\\,17.1,\\,14.8,\\,19.3,\\,13.9,\\,21.0,\\,12.5,\\,20.2,\\,11.0,\\,22.5\\,]$ $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n- Case $3$: $T = 310\\,\\mathrm{K}$, $\\{W_i\\} = [\\,5.5\\,]$ $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n- Case $4$: $T = 150\\,\\mathrm{K}$, $\\{W_i\\} = [\\,2.0,\\,2.5,\\,3.0,\\,2.2,\\,2.8\\,]$ $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n- Case $5$: $T = 350\\,\\mathrm{K}$, $\\{W_i\\} = [\\,7.2,\\,7.2,\\,7.2,\\,7.2,\\,7.2,\\,7.2,\\,7.2,\\,7.2\\,]$ $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n\nRequired final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The list must contain the five $\\Delta G$ values for the cases above, in the same order, each formatted as a decimal with exactly six digits after the decimal point (for example, \"[1.234000,2.000000,3.141593,4.000000,5.500000]\").", "solution": "The problem presented is a standard application of the Jarzynski equality, a fundamental result in non-equilibrium statistical mechanics. It is scientifically sound, well-posed, and contains all necessary information for its resolution. I will proceed with the derivation and solution.\n\nThe problem requires the calculation of the equilibrium free energy difference, $\\Delta G$, from a set of non-equilibrium work measurements, $W$. The governing principle is the Jarzynski equality:\n$$\ne^{-\\Delta G/(R\\,T)} = \\left\\langle e^{-W/(R\\,T)} \\right\\rangle\n$$\nHere, $T$ is the absolute temperature, and $R$ is the molar gas constant. The term $\\langle \\cdot \\rangle$ denotes a theoretical ensemble average over all possible realizations of the non-equilibrium process. In a practical setting, as provided in this problem, this ensemble average is estimated by the arithmetic mean over a finite sample of $N$ independent work measurements, $\\{W_1, W_2, \\ldots, W_N\\}$. Therefore, the operational form of the equality is:\n$$\ne^{-\\Delta G/(R\\,T)} \\approx \\frac{1}{N} \\sum_{i=1}^{N} e^{-W_i/(R\\,T)}\n$$\nTo find $\\Delta G$, we must solve this equation. The derivation is straightforward. First, we take the natural logarithm of both sides:\n$$\n\\ln\\left(e^{-\\Delta G/(R\\,T)}\\right) = \\ln\\left( \\frac{1}{N} \\sum_{i=1}^{N} e^{-W_i/(R\\,T)} \\right)\n$$\nThis simplifies to:\n$$\n-\\frac{\\Delta G}{R\\,T} = \\ln\\left( \\frac{1}{N} \\sum_{i=1}^{N} e^{-W_i/(R\\,T)} \\right)\n$$\nFinally, multiplying by $-RT$ isolates $\\Delta G$:\n$$\n\\Delta G = -R\\,T \\ln\\left( \\frac{1}{N} \\sum_{i=1}^{N} e^{-W_i/(R\\,T)} \\right)\n$$\nThis is the working equation for computing the free energy difference.\n\nIt is instructive to note the relationship between $\\Delta G$ and the average work, $\\langle W \\rangle = \\frac{1}{N} \\sum_{i=1}^{N} W_i$. Because the exponential function $f(x) = e^x$ is convex, Jensen's inequality dictates that $\\langle e^x \\rangle \\ge e^{\\langle x \\rangle}$. Applying this to our context with $x = -W/(RT)$, we have $\\left\\langle e^{-W/(RT)} \\right\\rangle \\ge e^{\\langle -W/(RT) \\rangle} = e^{-\\langle W \\rangle/(RT)}$. Substituting this into the Jarzynski equality yields $e^{-\\Delta G/(RT)} \\ge e^{-\\langle W \\rangle/(RT)}$, which implies that $\\Delta G \\le \\langle W \\rangle$. The free energy change is always less than or equal to the average work performed. The equality $\\Delta G = \\langle W \\rangle$ holds only in the limit of a reversible process, where all work values $W_i$ are identical. This is observed in Case $3$ and Case $5$. In all other cases, the process is dissipative and $\\Delta G < \\langle W \\rangle$.\n\nThe computational procedure for each test case is as follows:\n$1$. Given a temperature $T$ and a set of work values $\\{W_i\\}$. The value of the molar gas constant is fixed at $R = 8.31446261815324\\times 10^{-3}\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$.\n$2$. Calculate the thermal energy product $RT$.\n$3$. For each work value $W_i$ in the set, compute the term $e^{-W_i/(R\\,T)}$.\n$4$. Calculate the arithmetic mean of these exponential terms.\n$5$. Compute the natural logarithm of this mean.\n$6$. Multiply the result by $-RT$ to obtain $\\Delta G$ in units of $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n$7$. The final numerical value must be rounded to six decimal places as specified.\n\nThis procedure will now be implemented to solve for $\\Delta G$ for each of the five provided cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the reversible free energy change Delta G using the Jarzynski equality\n    for a given set of test cases.\n    \"\"\"\n    # Define the molar gas constant in kJ/(mol*K) as specified.\n    R_GAS_CONSTANT = 8.31446261815324e-3\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1: T in K, list of W_i in kJ/mol\n        (300.0, [7.6, 8.1, 8.0, 7.9, 8.2, 7.8, 8.0, 8.1, 7.7, 8.0]),\n        # Case 2\n        (300.0, [18.0, 15.5, 16.2, 17.1, 14.8, 19.3, 13.9, 21.0, 12.5, 20.2, 11.0, 22.5]),\n        # Case 3\n        (310.0, [5.5]),\n        # Case 4\n        (150.0, [2.0, 2.5, 3.0, 2.2, 2.8]),\n        # Case 5\n        (350.0, [7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2]),\n    ]\n\n    results = []\n    for T, W_values in test_cases:\n        # Convert work values to a NumPy array for vectorized operations.\n        W_array = np.array(W_values, dtype=np.float64)\n        \n        # Calculate the thermal energy product RT.\n        RT = R_GAS_CONSTANT * T\n        \n        # Jarzynski equality states: exp(-DeltaG / RT) = <exp(-W / RT)>\n        # We solve for DeltaG: DeltaG = -RT * ln(<exp(-W / RT)>)\n        \n        # Calculate the exponential terms exp(-W_i / RT) for each work value.\n        exp_terms = np.exp(-W_array / RT)\n        \n        # Calculate the arithmetic mean of the exponential terms.\n        mean_of_exponentials = np.mean(exp_terms)\n        \n        # Calculate Delta G.\n        delta_G = -RT * np.log(mean_of_exponentials)\n        \n        results.append(delta_G)\n\n    # Format the results to exactly six decimal places and create the final output string.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2455770"}, {"introduction": "Beyond thermodynamics, Steered Molecular Dynamics offers a unique window into the kinetics of molecular interactions under force. By pulling a ligand from its receptor, we can measure a \"rupture force\" that depends on how fast we pull. This exercise utilizes the Bell-Evans model to connect this observable rupture force to intrinsic kinetic parameters, such as the zero-force off-rate $k_{\\mathrm{off}}$ and the location of the transition state barrier $x^{\\ddagger}$ [@problem_id:2463111]. You will learn to extract these fundamental properties by analyzing how the rupture force changes with the pulling speed.", "problem": "A ligand is pulled from a binding pocket in a Steered Molecular Dynamics (SMD) simulation using a harmonic guiding potential of stiffness $k_{s}$ that is translated at a constant speed $v$. The simulation temperature is $T$, and the Boltzmann constant is $k_{B}$. For such force-ramp conditions with a constant loading rate $r = k_{s} v$, the Bell–Evans model states that the most probable rupture force $F^{\\ast}$ for escape over a single energy barrier at distance to the transition state $x^{\\ddagger}$ and zero-force off-rate $k_{\\mathrm{off}}$ satisfies\n$$\nF^{\\ast} = \\frac{k_{B} T}{x^{\\ddagger}} \\ln\\!\\left(\\frac{r\\, x^{\\ddagger}}{k_{B} T\\, k_{\\mathrm{off}}}\\right).\n$$\nAssume $x^{\\ddagger}$ is constant over the loading-rate range probed.\n\nYou perform two sets of SMD pulls with the same spring stiffness $k_{s}$ but different stage speeds $v$, and from many repeats you determine the most probable rupture forces at each speed. The parameters are:\n- $k_{s} = 0.05\\,\\mathrm{N\\,m^{-1}}$,\n- $T = 300\\,\\mathrm{K}$,\n- $k_{B} = 1.380649\\times 10^{-23}\\,\\mathrm{J\\,K^{-1}}$,\n- At $v_{1} = 1.0\\times 10^{-7}\\,\\mathrm{m\\,s^{-1}}$, the most probable rupture force is $F_{1}^{\\ast} = 45\\,\\mathrm{pN}$,\n- At $v_{2} = 1.0\\times 10^{-6}\\,\\mathrm{m\\,s^{-1}}$, the most probable rupture force is $F_{2}^{\\ast} = 55\\,\\mathrm{pN}$.\n\nUsing the Bell–Evans model, compute the zero-force off-rate $k_{\\mathrm{off}}$. Round your final answer to three significant figures and express it in $\\mathrm{s^{-1}}$.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It is based on the established Bell–Evans model for analyzing forced rupture events, a standard methodology in the field of computational chemistry and biophysics. All provided data are physically realistic and dimensionally consistent. The problem is therefore deemed valid and a solution will be provided.\n\nThe most probable rupture force, $F^{\\ast}$, is given by the Bell–Evans model:\n$$\nF^{\\ast} = \\frac{k_{B} T}{x^{\\ddagger}} \\ln\\!\\left(\\frac{r\\, x^{\\ddagger}}{k_{B} T\\, k_{\\mathrm{off}}}\\right)\n$$\nwhere the loading rate $r = k_{s} v$. The problem provides two sets of measurements, $(v_1, F_1^{\\ast})$ and $(v_2, F_2^{\\ast})$, for which this equation must hold. This yields a system of two equations with two unknowns, the distance to the transition state $x^{\\ddagger}$ and the zero-force off-rate $k_{\\mathrm{off}}$. The explicit equations are:\n$$\nF_{1}^{\\ast} = \\frac{k_{B} T}{x^{\\ddagger}} \\ln\\!\\left(\\frac{k_{s} v_1 x^{\\ddagger}}{k_{B} T\\, k_{\\mathrm{off}}}\\right) \\quad (1)\n$$\n$$\nF_{2}^{\\ast} = \\frac{k_{B} T}{x^{\\ddagger}} \\ln\\!\\left(\\frac{k_{s} v_2 x^{\\ddagger}}{k_{B} T\\, k_{\\mathrm{off}}}\\right) \\quad (2)\n$$\nTo solve this system, we first eliminate $k_{\\mathrm{off}}$ to find $x^{\\ddagger}$. We rearrange both equations by isolating the logarithmic terms:\n$$\n\\frac{F_{1}^{\\ast} x^{\\ddagger}}{k_{B} T} = \\ln\\!\\left(\\frac{k_{s} v_1 x^{\\ddagger}}{k_{B} T\\, k_{\\mathrm{off}}}\\right)\n$$\n$$\n\\frac{F_{2}^{\\ast} x^{\\ddagger}}{k_{B} T} = \\ln\\!\\left(\\frac{k_{s} v_2 x^{\\ddagger}}{k_{B} T\\, k_{\\mathrm{off}}}\\right)\n$$\nSubtracting the first rearranged equation from the second gives:\n$$\n\\frac{(F_{2}^{\\ast} - F_{1}^{\\ast}) x^{\\ddagger}}{k_{B} T} = \\ln\\!\\left(\\frac{k_{s} v_2 x^{\\ddagger}}{k_{B} T\\, k_{\\mathrm{off}}}\\right) - \\ln\\!\\left(\\frac{k_{s} v_1 x^{\\ddagger}}{k_{B} T\\, k_{\\mathrm{off}}}\\right)\n$$\nUsing the property $\\ln(a) - \\ln(b) = \\ln(a/b)$, the right-hand side simplifies:\n$$\n\\frac{(F_{2}^{\\ast} - F_{1}^{\\ast}) x^{\\ddagger}}{k_{B} T} = \\ln\\!\\left(\\frac{k_{s} v_2 x^{\\ddagger} / (k_{B} T\\, k_{\\mathrm{off}})}{k_{s} v_1 x^{\\ddagger} / (k_{B} T\\, k_{\\mathrm{off}})}\\right) = \\ln\\!\\left(\\frac{v_2}{v_1}\\right)\n$$\nWe can now solve for $x^{\\ddagger}$ directly, as it is assumed to be constant:\n$$\nx^{\\ddagger} = \\frac{k_{B} T}{F_{2}^{\\ast} - F_{1}^{\\ast}} \\ln\\!\\left(\\frac{v_2}{v_1}\\right)\n$$\nWith an expression for $x^{\\ddagger}$, we can solve for $k_{\\mathrm{off}}$. We rearrange equation $(1)$ to isolate $k_{\\mathrm{off}}$ by first exponentiating both sides of its rearranged form:\n$$\n\\exp\\left(\\frac{F_{1}^{\\ast} x^{\\ddagger}}{k_{B} T}\\right) = \\frac{k_{s} v_1 x^{\\ddagger}}{k_{B} T\\, k_{\\mathrm{off}}}\n$$\n$$\nk_{\\mathrm{off}} = \\frac{k_{s} v_1 x^{\\ddagger}}{k_{B} T} \\exp\\left(-\\frac{F_{1}^{\\ast} x^{\\ddagger}}{k_{B} T}\\right)\n$$\nSubstitute the derived expression for $x^{\\ddagger}$:\n$$\nk_{\\mathrm{off}} = \\frac{k_{s} v_1}{k_{B} T} \\left( \\frac{k_{B} T}{F_{2}^{\\ast} - F_{1}^{\\ast}} \\ln\\!\\left(\\frac{v_2}{v_1}\\right) \\right) \\exp\\left( -\\frac{F_{1}^{\\ast}}{k_{B} T} \\left( \\frac{k_{B} T}{F_{2}^{\\ast} - F_{1}^{\\ast}} \\ln\\!\\left(\\frac{v_2}{v_1}\\right) \\right) \\right)\n$$\nSimplifying this expression yields a final analytical form for $k_{\\mathrm{off}}$:\n$$\nk_{\\mathrm{off}} = \\frac{k_{s} v_1}{F_{2}^{\\ast} - F_{1}^{\\ast}} \\ln\\!\\left(\\frac{v_2}{v_1}\\right) \\exp\\left( -\\frac{F_{1}^{\\ast}}{F_{2}^{\\ast} - F_{1}^{\\ast}} \\ln\\!\\left(\\frac{v_2}{v_1}\\right) \\right)\n$$\nThis expression can also be written more compactly as:\n$$\nk_{\\mathrm{off}} = \\frac{k_{s} v_1 \\ln(v_2/v_1)}{F_{2}^{\\ast} - F_{1}^{\\ast}} \\left(\\frac{v_2}{v_1}\\right)^{-\\frac{F_{1}^{\\ast}}{F_{2}^{\\ast} - F_{1}^{\\ast}}}\n$$\nNow we substitute the given numerical values, ensuring all units are in the SI system:\n$k_{s} = 0.05\\,\\mathrm{N\\,m^{-1}}$\n$v_1 = 1.0 \\times 10^{-7}\\,\\mathrm{m\\,s^{-1}}$\n$v_2 = 1.0 \\times 10^{-6}\\,\\mathrm{m\\,s^{-1}}$\n$F_1^{\\ast} = 45\\,\\mathrm{pN} = 45 \\times 10^{-12}\\,\\mathrm{N}$\n$F_2^{\\ast} = 55\\,\\mathrm{pN} = 55 \\times 10^{-12}\\,\\mathrm{N}$\n\nWe calculate the necessary components:\n$F_{2}^{\\ast} - F_{1}^{\\ast} = (55 - 45) \\times 10^{-12}\\,\\mathrm{N} = 10 \\times 10^{-12}\\,\\mathrm{N} = 10^{-11}\\,\\mathrm{N}$\n$\\frac{v_2}{v_1} = \\frac{1.0 \\times 10^{-6}}{1.0 \\times 10^{-7}} = 10$\n$\\frac{F_{1}^{\\ast}}{F_{2}^{\\ast} - F_{1}^{\\ast}} = \\frac{45 \\times 10^{-12}}{10 \\times 10^{-12}} = 4.5$\n\nSubstituting these into the expression for $k_{\\mathrm{off}}$:\n$$\nk_{\\mathrm{off}} = \\frac{(0.05\\,\\mathrm{N\\,m^{-1}}) (1.0 \\times 10^{-7}\\,\\mathrm{m\\,s^{-1}})}{10^{-11}\\,\\mathrm{N}} \\ln(10) \\left(10\\right)^{-4.5}\n$$\n$$\nk_{\\mathrm{off}} = \\frac{5 \\times 10^{-9}}{10^{-11}} \\ln(10) \\cdot 10^{-4.5} \\,\\mathrm{s^{-1}}\n$$\n$$\nk_{\\mathrm{off}} = 500 \\cdot \\ln(10) \\cdot 10^{-4.5} \\,\\mathrm{s^{-1}}\n$$\nWe compute the numerical value:\n$$\nk_{\\mathrm{off}} = 500 \\times (2.302585...) \\times (3.162277... \\times 10^{-5}) \\,\\mathrm{s^{-1}}\n$$\n$$\nk_{\\mathrm{off}} \\approx 1151.29 \\times 3.162277 \\times 10^{-5} \\,\\mathrm{s^{-1}} \\approx 0.036423\\,\\mathrm{s^{-1}}\n$$\nRounding to three significant figures, as requested by the problem statement, we obtain:\n$$\nk_{\\mathrm{off}} \\approx 3.64 \\times 10^{-2}\\,\\mathrm{s^{-1}}\n$$", "answer": "$$\n\\boxed{3.64 \\times 10^{-2}}\n$$", "id": "2463111"}, {"introduction": "A key skill for any computational scientist is the ability to critically assess simulation results and recognize potential artifacts. In this computational experiment, you will investigate how the pulling speed impacts the physical meaning of the measured rupture force [@problem_id:2463081]. By simulating a simple one-dimensional pulling process, you will discover that at sufficiently high speeds, the peak force is dominated by viscous effects and loses its correlation with the underlying binding energy, a crucial lesson in designing and interpreting SMD simulations.", "problem": "A single collective coordinate $x(t)$ describes the separation of a ligand from a receptor along a pulling axis. The ligand experiences an intrinsic binding potential $U(x)$ and a time-dependent external restraint from a harmonic spring whose anchor point moves at constant speed $v$. In the overdamped limit of Langevin dynamics at zero temperature (deterministic limit), the evolution of $x(t)$ is governed by the force balance\n$$\n\\gamma \\,\\frac{dx}{dt} \\;=\\; -\\,\\frac{dU}{dx}(x) \\;-\\; k_s\\bigl(x - x_s(t)\\bigr),\n$$\nwhere $\\gamma$ is the friction coefficient, $k_s$ is the spring constant, and $x_s(t) = v\\,t$ is the pulling stage position. The measured force is the spring force\n$$\nF_{\\text{spring}}(t) \\;=\\; k_s\\,\\bigl(x(t) - x_s(t)\\bigr),\n$$\nand its magnitude $\\lvert F_{\\text{spring}}(t)\\rvert$ typically shows a peak (“rupture force”) during a pull.\n\nYou will model the binding potential as a Morse well with depth $\\varepsilon$ and range parameter $a$,\n$$\nU(x) \\;=\\; \\varepsilon\\left[\\left(1 - e^{-a x}\\right)^2 - 1\\right],\n$$\nwhich has a minimum at $x = 0$ with $U(0) = -\\varepsilon$ and $U(x)\\to 0$ as $x\\to +\\infty$. Under this definition, the equilibrium binding free energy difference between the bound minimum and the unbound baseline is $\\Delta F = \\varepsilon$.\n\nStarting from the overdamped force balance and the definition of the spring force, derive a numerical scheme suitable for stable time stepping in the zero-temperature overdamped regime, and implement a program that does the following.\n\n1) Use the following physically consistent parameters and units:\n- Length in nanometers (nm), time in picoseconds (ps), force in piconewtons (pN), and energy in pN·nm.\n- Temperature is fixed at $0$ K (deterministic limit).\n- Friction coefficient $\\gamma = 5000$ pN·ps/nm.\n- Spring constant $k_s = 100$ pN/nm.\n- Morse range parameter $a = 6$ nm$^{-1}$.\n- Binding depths $\\varepsilon \\in \\{\\varepsilon_i\\}_{i=1}^{4}$ with values $\\varepsilon_1 = 10$ pN·nm, $\\varepsilon_2 = 20$ pN·nm, $\\varepsilon_3 = 30$ pN·nm, $\\varepsilon_4 = 40$ pN·nm.\n- Initial condition $x(0) = 0$ nm and $x_s(0) = 0$ nm.\n- Time step $\\Delta t = 0.001$ ps and total simulation time $T = 50$ ps.\n\n2) For each depth $\\varepsilon_i$, integrate the equation of motion to obtain $x(t)$ and compute the maximum magnitude of the spring force over the trajectory,\n$$\nF_{\\max}(v;\\varepsilon_i) \\;=\\; \\max_{t\\in[0,T]} \\lvert F_{\\text{spring}}(t)\\rvert.\n$$\n\n3) Consider the test suite of three pulling speeds $v$:\n- A quasi-adiabatic case $v_1 = 0.01$ nm/ps (slow),\n- A non-equilibrium case $v_2 = 0.05$ nm/ps (intermediate),\n- A strongly non-equilibrium case $v_3 = 0.50$ nm/ps (fast).\n\nFor each $v_j$, evaluate the Pearson linear correlation coefficient between the list of equilibrium binding free energies $\\bigl[\\Delta F_i\\bigr]_{i=1}^{4} = \\bigl[\\varepsilon_i\\bigr]_{i=1}^{4}$ and the corresponding rupture force list $\\bigl[F_{\\max}(v_j;\\varepsilon_i)\\bigr]_{i=1}^{4}$.\n\n4) Your program must output a single line containing the three correlation coefficients for $v_1$, $v_2$, and $v_3$, in that order, as a comma-separated list enclosed in square brackets. For example, the printed line should look like \"[c1,c2,c3]\" where each $c_j$ is a float number. There should be no extra spaces or text.\n\nScientific realism requirements:\n- Base your derivation on Newtonian mechanics in the overdamped limit and Hooke’s law for the spring. The Morse potential is a standard choice for short-range binding with a single minimum. The chosen parameters are consistent with nanometer–picosecond–piconewton units used in computational chemistry.\n- The numerical integration must be justified from the governing equation and be dimensionally consistent.\n- Express the final correlation coefficients as dimensionless floats.\n\nTest suite coverage requirements:\n- The slow case $v_1$ serves as a “happy path” that is closer to reversible pulling, where $\\lvert F_{\\max}\\rvert$ should be influenced by $\\Delta F$.\n- The intermediate case $v_2$ probes a transition regime.\n- The fast case $v_3$ is an edge case designed to demonstrate a “rupture force artifact,” where $\\lvert F_{\\max}\\rvert$ can be dominated by the viscous term and loses correlation with $\\Delta F$.\n\nThe program should produce a single line of output containing the three correlation coefficients as a comma-separated list enclosed in square brackets. Angles are not used. No percentages should appear in the output; correlations are pure numbers without units.", "solution": "The problem statement has been validated and is deemed scientifically sound, well-posed, and complete. It describes a canonical model of force-probe molecular dynamics in the deterministic, overdamped limit. We shall now derive the numerical solution.\n\nThe problem requires the numerical integration of the equation of motion for a collective coordinate $x(t)$ under the influence of an intrinsic potential $U(x)$ and an external time-dependent harmonic restraint. The governing equation is given by the force balance in the overdamped regime at zero temperature:\n$$\n\\gamma \\frac{dx}{dt} = F_{\\text{intrinsic}}(x) + F_{\\text{external}}(x, t)\n$$\nwhere $\\gamma$ is the friction coefficient. The force components are:\n1.  The intrinsic force derived from the Morse potential, $F_{\\text{intrinsic}}(x) = -\\frac{dU}{dx}(x)$.\n2.  The external force from the moving spring, $F_{\\text{external}}(x, t) = -k_s(x - x_s(t))$.\n\nThe Morse potential is given as $U(x) = \\varepsilon\\left[\\left(1 - e^{-a x}\\right)^2 - 1\\right]$. Its derivative with respect to $x$ is:\n$$\n\\frac{dU}{dx}(x) = \\varepsilon \\cdot 2(1 - e^{-ax}) \\cdot \\frac{d}{dx}(1 - e^{-ax}) = 2\\varepsilon(1 - e^{-ax})(a e^{-ax}) = 2a\\varepsilon(e^{-ax} - e^{-2ax})\n$$\nThe external spring's anchor point moves at a constant velocity $v$, so its position is $x_s(t) = v t$. Substituting these expressions into the equation of motion yields:\n$$\n\\gamma \\frac{dx}{dt} = -2a\\varepsilon(e^{-ax} - e^{-2ax}) - k_s(x - vt)\n$$\nTo facilitate numerical integration, we rearrange this first-order ordinary differential equation into the standard form $\\frac{dx}{dt} = f(x, t)$:\n$$\n\\frac{dx}{dt} = \\frac{1}{\\gamma} \\left[ -2a\\varepsilon(e^{-ax} - e^{-2ax}) - k_s(x - vt) \\right]\n$$\nWe will solve this equation using the Forward Euler method, which is a simple and explicit time-stepping scheme. For a time step $\\Delta t$, the position at time $t + \\Delta t$ is approximated from the position and velocity at time $t$:\n$$\nx(t + \\Delta t) \\approx x(t) + \\Delta t \\cdot \\frac{dx}{dt}\\bigg|_t\n$$\nLet $x_i = x(t_i)$ where $t_i = i\\Delta t$. The update rule is:\n$$\nx_{i+1} = x_i + \\frac{\\Delta t}{\\gamma} \\left[ -2a\\varepsilon(e^{-ax_i} - e^{-2ax_i}) - k_s(x_i - v t_i) \\right]\n$$\nThe stability of this scheme depends on the size of $\\Delta t$ relative to the characteristic relaxation times of the system. The effective stiffness of the total potential $U_{\\text{tot}}(x, t) = U(x) + \\frac{1}{2}k_s(x-vt)^2$ is $k_{\\text{eff}} = \\frac{d^2 U}{dx^2} + k_s$. The stiffness of the Morse potential, $\\frac{d^2 U}{dx^2} = 2a^2\\varepsilon(2e^{-2ax} - e^{-ax})$, has its maximum value at $x=0$, which is $k_{\\text{morse,max}} = 2a^2\\varepsilon$. For the largest value of $\\varepsilon = 40$ pN·nm and $a = 6$ nm$^{-1}$, this is $k_{\\text{morse,max}} = 2 \\cdot (6)^2 \\cdot 40 = 2880$ pN/nm. The total stiffness is approximately $k_{\\text{eff,max}} \\approx 2880 + k_s = 2880 + 100 = 2980$ pN/nm. The fastest relaxation time in the system is therefore $\\tau_{\\text{min}} = \\gamma / k_{\\text{eff,max}} \\approx 5000 / 2980 \\approx 1.68$ ps. The specified time step $\\Delta t = 0.001$ ps is more than three orders of magnitude smaller than this fastest timescale ($\\Delta t \\ll \\tau_{\\text{min}}$). Consequently, the Forward Euler method is guaranteed to be stable and accurate for this problem.\n\nThe simulation protocol is as follows. For each pulling speed $v \\in \\{0.01, 0.05, 0.50\\}$ nm/ps, we perform a series of simulations, one for each binding energy $\\varepsilon \\in \\{10, 20, 30, 40\\}$ pN·nm.\nFor each $(v, \\varepsilon)$ pair:\n1.  Initialize the system at $t=0$ with $x(0)=0$.\n2.  Iterate from $t=0$ to $T=50$ ps with time step $\\Delta t = 0.001$ ps. In each step $i$:\n    a. Calculate the current time $t_i = i \\Delta t$.\n    b. Update the particle position from $x_i$ to $x_{i+1}$ using the Euler formula derived above.\n    c. Calculate the spring force at the new position and time: $F_{\\text{spring}}(t_{i+1}) = k_s(x_{i+1} - v t_{i+1})$.\n3.  After the trajectory is generated, determine the maximum magnitude of the spring force: $F_{\\max}(v; \\varepsilon) = \\max_{t \\in [0, T]} |F_{\\text{spring}}(t)|$.\n\nAfter obtaining the list of rupture forces, $[F_{\\max}(v; \\varepsilon_1), F_{\\max}(v; \\varepsilon_2), F_{\\max}(v; \\varepsilon_3), F_{\\max}(v; \\varepsilon_4)]$, for a given velocity $v$, we calculate the Pearson linear correlation coefficient, $\\rho$, between this list and the list of corresponding binding free energies, $[\\Delta F_i] = [\\varepsilon_i]$. The Pearson correlation coefficient between two variables $X$ and $Y$ with $N$ samples is defined as:\n$$\n\\rho_{X,Y} = \\frac{\\sum_{i=1}^N (X_i - \\bar{X})(Y_i - \\bar{Y})}{\\sqrt{\\sum_{i=1}^N (X_i - \\bar{X})^2} \\sqrt{\\sum_{i=1}^N (Y_i - \\bar{Y})^2}}\n$$\nwhere $\\bar{X}$ and $\\bar{Y}$ are the sample means. This procedure is repeated for each of the three pulling speeds, yielding three correlation coefficients. The implementation of this entire procedure is provided in the subsequent section.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the steered molecular dynamics problem to find the correlation\n    between binding energy and rupture force at different pulling speeds.\n    \"\"\"\n    \n    # 1) Define physically consistent parameters and units\n    # Length in nm, time in ps, force in pN, energy in pN·nm\n    gamma = 5000.0  # Friction coefficient (pN·ps/nm)\n    k_s = 100.0     # Spring constant (pN/nm)\n    a = 6.0         # Morse range parameter (nm⁻¹)\n    \n    # Binding depths epsilon (pN·nm)\n    epsilons = np.array([10.0, 20.0, 30.0, 40.0])\n    \n    # Time parameters\n    dt = 0.001      # Time step (ps)\n    T = 50.0        # Total simulation time (ps)\n    \n    # Initial conditions\n    x0 = 0.0        # Initial position (nm)\n    \n    # 3) Test suite of pulling speeds\n    velocities = [0.01, 0.05, 0.50]  # Pulling speeds (nm/ps)\n\n    # List to store the correlation coefficients\n    correlation_results = []\n    \n    # Calculate number of steps\n    num_steps = int(T / dt)\n    \n    # Main simulation loop\n    for v in velocities:\n        max_forces = []\n        \n        for epsilon in epsilons:\n            # Initialize arrays for position and time\n            x = np.zeros(num_steps + 1)\n            t = np.linspace(0, T, num_steps + 1)\n            \n            x[0] = x0\n            \n            # Array to store spring force magnitude\n            spring_force_magnitudes = np.zeros(num_steps + 1)\n            # Initial spring force is zero\n            spring_force_magnitudes[0] = 0.0\n            \n            # 2) Integrate the equation of motion\n            for i in range(num_steps):\n                # Force from Morse potential\n                force_morse = -2.0 * a * epsilon * (np.exp(-a * x[i]) - np.exp(-2.0 * a * x[i]))\n                \n                # Position of the spring anchor\n                x_s = v * t[i]\n                \n                # Force from the spring on the particle\n                force_spring_on_particle = -k_s * (x[i] - x_s)\n                \n                # Total force on the particle\n                total_force = force_morse + force_spring_on_particle\n                \n                # Update position using Forward Euler method\n                x[i+1] = x[i] + (total_force / gamma) * dt\n                \n                # Calculate the measured spring force F_spring(t) = k_s * (x(t) - x_s(t))\n                # Note: t[i+1] corresponds to the time for x[i+1]\n                x_s_next = v * t[i+1]\n                f_spring = k_s * (x[i+1] - x_s_next)\n                \n                # Store its magnitude\n                spring_force_magnitudes[i+1] = np.abs(f_spring)\n\n            # Find the maximum magnitude of the spring force (rupture force)\n            F_max = np.max(spring_force_magnitudes)\n            max_forces.append(F_max)\n        \n        # 3) Evaluate the Pearson linear correlation coefficient\n        # Note: binding free energy Delta_F is equal to epsilon\n        correlation_matrix = np.corrcoef(epsilons, max_forces)\n        correlation = correlation_matrix[0, 1]\n        correlation_results.append(correlation)\n        \n    # 4) Output the results in the specified format\n    # Example format: \"[c1,c2,c3]\"\n    print(f\"[{','.join(map(str, correlation_results))}]\")\n\nsolve()\n```", "id": "2463081"}]}