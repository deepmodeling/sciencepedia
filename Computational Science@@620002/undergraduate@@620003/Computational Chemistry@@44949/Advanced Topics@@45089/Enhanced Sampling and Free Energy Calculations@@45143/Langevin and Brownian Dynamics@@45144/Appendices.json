{"hands_on_practices": [{"introduction": "Before diving into complex simulations, it is instructive to see how the dynamics of a multi-particle system can be simplified by a clever choice of coordinates. This practice focuses on a two-particle system coupled by a spring, a fundamental model for a diatomic molecule. By transforming to center-of-mass and relative coordinates, you will use first principles like the equipartition theorem to derive and calculate the systemâ€™s overall diffusion coefficient and the extent of its internal vibrations, connecting microscopic laws to macroscopic observables [@problem_id:2457138].", "problem": "Consider a one-dimensional system of two particles immersed in a thermal bath at absolute temperature $T$ and interacting via a harmonic spring. Let the particle positions be $x_1(t)$ and $x_2(t)$, the velocities be $v_1(t)$ and $v_2(t)$, the masses be $m_1$ and $m_2$, and the friction coefficients be $\\gamma_1$ and $\\gamma_2$, all in the International System of Units (SI). The interaction potential is $U(r) = \\tfrac{1}{2} k r^2$ with $r = x_2 - x_1$ and spring constant $k$. The underdamped Langevin equations are\n$$\nm_1 \\,\\frac{d v_1}{dt} = -\\gamma_1 \\, v_1 - \\frac{\\partial U}{\\partial x_1} + \\sqrt{2 k_{\\mathrm{B}} T \\,\\gamma_1}\\;\\xi_1(t), \\quad \\frac{d x_1}{dt} = v_1,\n$$\n$$\nm_2 \\,\\frac{d v_2}{dt} = -\\gamma_2 \\, v_2 - \\frac{\\partial U}{\\partial x_2} + \\sqrt{2 k_{\\mathrm{B}} T \\,\\gamma_2}\\;\\xi_2(t), \\quad \\frac{d x_2}{dt} = v_2,\n$$\nwhere $k_{\\mathrm{B}}$ is the Boltzmann constant, and $\\xi_1(t)$ and $\\xi_2(t)$ are independent standard Gaussian white noises with $\\langle \\xi_i(t) \\rangle = 0$ and $\\langle \\xi_i(t)\\,\\xi_j(t') \\rangle = \\delta_{ij}\\,\\delta(t-t')$. Define the center-of-mass coordinate\n$$\nX(t) = \\frac{m_1 x_1(t) + m_2 x_2(t)}{m_1 + m_2},\n$$\nand the relative coordinate $r(t) = x_2(t) - x_1(t)$.\n\nTask. From first principles, determine:\n- the closed-form long-time diffusion coefficient $D_X$ of the center-of-mass coordinate $X(t)$, in $\\mathrm{m^2/s}$,\n- the equilibrium variance $\\mathrm{Var}(r)$ of the relative coordinate $r(t)$, in $\\mathrm{m^2}$.\n\nUse the International System of Units (SI) for all inputs and outputs. Treat the Boltzmann constant as $k_{\\mathrm{B}} = 1.380\\,649 \\times 10^{-23}\\ \\mathrm{J/K}$ (exact by definition). Your program must compute $D_X$ and $\\mathrm{Var}(r)$ for each parameter set in the test suite below and produce the results as specified.\n\nTest Suite (each case is $(m_1,\\ m_2,\\ \\gamma_1,\\ \\gamma_2,\\ k,\\ T)$):\n- Case A: $m_1 = 1.0 \\times 10^{-26}\\ \\mathrm{kg}$, $m_2 = 2.0 \\times 10^{-26}\\ \\mathrm{kg}$, $\\gamma_1 = 8.0 \\times 10^{-12}\\ \\mathrm{kg/s}$, $\\gamma_2 = 1.2 \\times 10^{-11}\\ \\mathrm{kg/s}$, $k = 1.0 \\times 10^{-3}\\ \\mathrm{N/m}$, $T = 300\\ \\mathrm{K}$.\n- Case B: $m_1 = 5.0 \\times 10^{-26}\\ \\mathrm{kg}$, $m_2 = 5.0 \\times 10^{-26}\\ \\mathrm{kg}$, $\\gamma_1 = 1.0 \\times 10^{-11}\\ \\mathrm{kg/s}$, $\\gamma_2 = 1.0 \\times 10^{-11}\\ \\mathrm{kg/s}$, $k = 5.0 \\times 10^{-3}\\ \\mathrm{N/m}$, $T = 300\\ \\mathrm{K}$.\n- Case C: $m_1 = 1.0 \\times 10^{-25}\\ \\mathrm{kg}$, $m_2 = 3.0 \\times 10^{-26}\\ \\mathrm{kg}$, $\\gamma_1 = 1.0 \\times 10^{-9}\\ \\mathrm{kg/s}$, $\\gamma_2 = 2.0 \\times 10^{-9}\\ \\mathrm{kg/s}$, $k = 1.0 \\times 10^{-1}\\ \\mathrm{N/m}$, $T = 310\\ \\mathrm{K}$.\n- Case D: $m_1 = 2.0 \\times 10^{-26}\\ \\mathrm{kg}$, $m_2 = 8.0 \\times 10^{-27}\\ \\mathrm{kg}$, $\\gamma_1 = 5.0 \\times 10^{-12}\\ \\mathrm{kg/s}$, $\\gamma_2 = 2.0 \\times 10^{-11}\\ \\mathrm{kg/s}$, $k = 1.0 \\times 10^{-4}\\ \\mathrm{N/m}$, $T = 100\\ \\mathrm{K}$.\n\nRequired final output format. Your program should produce a single line of output containing a list of length $4$, where each element is a two-element list $[D_X,\\ \\mathrm{Var}(r)]$ for the corresponding test case in the order A, B, C, D. All numbers must be printed in scientific notation with exactly $10$ digits after the decimal point. For example, a valid output format would be\n$$\n\\big[ [a_1,\\ b_1],\\ [a_2,\\ b_2],\\ [a_3,\\ b_3],\\ [a_4,\\ b_4] \\big],\n$$\nwhere each $a_i$ is $D_X$ in $\\mathrm{m^2/s}$ and each $b_i$ is $\\mathrm{Var}(r)$ in $\\mathrm{m^2}$, all printed with the specified numeric formatting.", "solution": "The problem statement is subjected to rigorous validation.\n\n**Step 1: Extract Givens**\n\nThe system consists of two particles with positions $x_1(t)$ and $x_2(t)$, velocities $v_1(t)$ and $v_2(t)$, masses $m_1$ and $m_2$, and friction coefficients $\\gamma_1$ and $\\gamma_2$. The system is in a thermal bath at absolute temperature $T$. All units are SI.\n\nThe interaction potential is $U(r) = \\tfrac{1}{2} k r^2$, with $r = x_2 - x_1$.\n\nThe underdamped Langevin equations of motion are provided:\n$$\nm_1 \\,\\frac{d v_1}{dt} = -\\gamma_1 \\, v_1 - \\frac{\\partial U}{\\partial x_1} + \\sqrt{2 k_{\\mathrm{B}} T \\,\\gamma_1}\\;\\xi_1(t), \\quad \\frac{d x_1}{dt} = v_1\n$$\n$$\nm_2 \\,\\frac{d v_2}{dt} = -\\gamma_2 \\, v_2 - \\frac{\\partial U}{\\partial x_2} + \\sqrt{2 k_{\\mathrm{B}} T \\,\\gamma_2}\\;\\xi_2(t), \\quad \\frac{d x_2}{dt} = v_2\n$$\nThe Boltzmann constant is $k_{\\mathrm{B}} = 1.380\\,649 \\times 10^{-23}\\ \\mathrm{J/K}$.\nThe noise terms $\\xi_1(t)$ and $\\xi_2(t)$ are independent standard Gaussian white noises, satisfying $\\langle \\xi_i(t) \\rangle = 0$ and $\\langle \\xi_i(t)\\,\\xi_j(t') \\rangle = \\delta_{ij}\\,\\delta(t-t')$.\n\nThe center-of-mass coordinate is defined as $X(t) = \\frac{m_1 x_1(t) + m_2 x_2(t)}{m_1 + m_2}$.\nThe relative coordinate is defined as $r(t) = x_2(t) - x_1(t)$.\n\nThe task is to determine the long-time diffusion coefficient $D_X$ of the center-of-mass and the equilibrium variance $\\mathrm{Var}(r)$ of the relative coordinate.\n\nThe test suite provides four sets of parameters $(m_1,\\ m_2,\\ \\gamma_1,\\ \\gamma_2,\\ k,\\ T)$.\n\n**Step 2: Validate Using Extracted Givens**\n\nThe problem is analyzed against the validation criteria.\n\n-   **Scientifically Grounded**: The problem is a classic exercise in statistical mechanics, describing two harmonically coupled particles undergoing Brownian motion. The Langevin equation is the correct and standard theoretical framework for this physical model. All concepts are fundamental to physics and computational chemistry.\n-   **Well-Posed**: The problem asks for two specific, well-defined physical quantities ($D_X$ and $\\mathrm{Var}(r)$) that can be derived from the given equations of motion and statistical mechanics principles. All necessary parameters and constants are provided. A unique and meaningful solution exists.\n-   **Objective**: The problem is stated in precise mathematical and physical terms, free of any subjectivity or ambiguity.\n\nThe problem is found to be scientifically sound, well-posed, and objective. It does not violate any of the invalidity criteria.\n\n**Step 3: Verdict and Action**\n\nThe problem is **valid**. A solution will be derived from first principles.\n\n**Derivation of the Center-of-Mass Diffusion Coefficient $D_X$**\n\nThe center-of-mass coordinate is given by $X = \\frac{m_1 x_1 + m_2 x_2}{M}$, where $M = m_1 + m_2$ is the total mass. The center-of-mass velocity is $V = \\frac{dX}{dt} = \\frac{m_1 v_1 + m_2 v_2}{M}$.\n\nWe formulate the equation of motion for the center of mass by taking the time derivative of the total momentum, $P = MV = m_1 v_1 + m_2 v_2$.\n$$\n\\frac{dP}{dt} = m_1 \\frac{dv_1}{dt} + m_2 \\frac{dv_2}{dt}\n$$\nSubstituting the given Langevin equations:\n$$\n\\frac{dP}{dt} = \\left(-\\gamma_1 v_1 - \\frac{\\partial U}{\\partial x_1} + \\sqrt{2 k_{\\mathrm{B}} T \\gamma_1} \\xi_1(t)\\right) + \\left(-\\gamma_2 v_2 - \\frac{\\partial U}{\\partial x_2} + \\sqrt{2 k_{\\mathrm{B}} T \\gamma_2} \\xi_2(t)\\right)\n$$\nThe force terms from the potential $U(r) = \\frac{1}{2} k (x_2 - x_1)^2$ are:\n$$\n\\frac{\\partial U}{\\partial x_1} = k(x_2 - x_1) \\frac{\\partial (x_2 - x_1)}{\\partial x_1} = -k(x_2 - x_1) = -kr\n$$\n$$\n\\frac{\\partial U}{\\partial x_2} = k(x_2 - x_1) \\frac{\\partial (x_2 - x_1)}{\\partial x_2} = k(x_2 - x_1) = kr\n$$\nThe sum of the internal forces is $-\\frac{\\partial U}{\\partial x_1} - \\frac{\\partial U}{\\partial x_2} = -(-kr) - (kr) = 0$. This is a consequence of Newton's third law; internal forces cannot change the total momentum of a system.\n\nThe equation for the total momentum simplifies to:\n$$\n\\frac{dP}{dt} = -\\gamma_1 v_1 - \\gamma_2 v_2 + \\Xi(t)\n$$\nwhere $\\Xi(t) = \\sqrt{2 k_{\\mathrm{B}} T \\gamma_1} \\xi_1(t) + \\sqrt{2 k_{\\mathrm{B}} T \\gamma_2} \\xi_2(t)$ is the total random force.\n\nThe long-time diffusion coefficient $D_X$ is a property of the system in the overdamped limit, where the velocity dynamics are assumed to be much faster than the positional dynamics. In this regime, the system moves as a whole. The total drag force experienced by the composite object moving with velocity $V$ is the sum of the drag forces on its components, assuming they all move with velocity $V$: $F_{\\text{drag}} = -\\gamma_1 V - \\gamma_2 V = -(\\gamma_1 + \\gamma_2)V$. This defines an effective friction coefficient for the center of mass, $\\gamma_X = \\gamma_1 + \\gamma_2$.\n\nThe Langevin equation for the center of mass in this long-time limit becomes:\n$$\nM \\frac{dV}{dt} \\approx -\\gamma_X V + \\Xi(t)\n$$\nThe total random force $\\Xi(t)$ must satisfy the fluctuation-dissipation theorem with the effective friction $\\gamma_X$. Let us verify this. The autocorrelation of $\\Xi(t)$ is:\n$$\n\\langle \\Xi(t) \\Xi(t') \\rangle = \\langle (\\sqrt{2 k_{\\mathrm{B}} T \\gamma_1} \\xi_1(t) + \\sqrt{2 k_{\\mathrm{B}} T \\gamma_2} \\xi_2(t)) (\\sqrt{2 k_{\\mathrm{B}} T \\gamma_1} \\xi_1(t') + \\sqrt{2 k_{\\mathrm{B}} T \\gamma_2} \\xi_2(t')) \\rangle\n$$\nUsing the independence of the noise terms, $\\langle \\xi_i(t) \\xi_j(t') \\rangle = \\delta_{ij} \\delta(t-t')$, the cross-terms vanish:\n$$\n\\langle \\Xi(t) \\Xi(t') \\rangle = (2 k_{\\mathrm{B}} T \\gamma_1 \\langle \\xi_1(t) \\xi_1(t') \\rangle + 2 k_{\\mathrm{B}} T \\gamma_2 \\langle \\xi_2(t) \\xi_2(t') \\rangle)\n$$\n$$\n\\langle \\Xi(t) \\Xi(t') \\rangle = (2 k_{\\mathrm{B}} T \\gamma_1 + 2 k_{\\mathrm{B}} T \\gamma_2) \\delta(t-t') = 2 k_{\\mathrm{B}} T (\\gamma_1 + \\gamma_2) \\delta(t-t') = 2 k_{\\mathrm{B}} T \\gamma_X \\delta(t-t')\n$$\nThis confirms that the statistics of the total random force are consistent with an effective friction coefficient $\\gamma_X = \\gamma_1 + \\gamma_2$.\n\nThe long-time diffusion coefficient is given by the Einstein-Smoluchowski relation, which relates diffusion to temperature and friction:\n$$\nD_X = \\frac{k_{\\mathrm{B}} T}{\\gamma_X}\n$$\nTherefore, the final expression for the center-of-mass diffusion coefficient is:\n$$\nD_X = \\frac{k_{\\mathrm{B}} T}{\\gamma_1 + \\gamma_2}\n$$\nThis result is independent of the masses $m_1, m_2$ and the spring constant $k$, as these parameters only influence the short-time dynamics and internal motion, not the long-time diffusive behavior of the system as a whole.\n\n**Derivation of the Equilibrium Variance of the Relative Coordinate $\\mathrm{Var}(r)$**\n\nThe problem asks for the equilibrium variance of the relative coordinate, $\\mathrm{Var}(r) = \\langle (r - \\langle r \\rangle)^2 \\rangle_{eq}$. The system is at thermal equilibrium at temperature $T$. The probability distribution of any coordinate $q$ is governed by the Boltzmann distribution, $P(q) \\propto \\exp(-U(q)/(k_{\\mathrm{B}}T))$, where $U(q)$ is the potential energy associated with that coordinate.\n\nFor the relative coordinate $r = x_2 - x_1$, the potential energy is given as $U(r) = \\frac{1}{2} k r^2$. The equilibrium probability distribution for $r$ is:\n$$\nP_{eq}(r) = C \\exp\\left(-\\frac{U(r)}{k_{\\mathrm{B}}T}\\right) = C \\exp\\left(-\\frac{k r^2}{2 k_{\\mathrm{B}}T}\\right)\n$$\nwhere $C$ is a normalization constant. This is a Gaussian distribution. Since the potential $U(r)$ is symmetric with respect to $r=0$, the mean value of the relative coordinate at equilibrium must be zero: $\\langle r \\rangle_{eq} = 0$.\n\nTherefore, the variance is equal to the mean squared displacement:\n$$\n\\mathrm{Var}(r) = \\langle r^2 \\rangle_{eq}\n$$\nWe can find $\\langle r^2 \\rangle_{eq}$ by direct application of the equipartition theorem. The potential energy $U(r) = \\frac{1}{2} k r^2$ is a quadratic term in the coordinate $r$. The equipartition theorem states that each quadratic degree of freedom in the system's Hamiltonian contributes $\\frac{1}{2} k_{\\mathrm{B}} T$ to the average total energy at thermal equilibrium.\nThus, the average potential energy is:\n$$\n\\langle U(r) \\rangle_{eq} = \\left\\langle \\frac{1}{2} k r^2 \\right\\rangle_{eq} = \\frac{1}{2} k_{\\mathrm{B}} T\n$$\nFrom this, we can solve for $\\langle r^2 \\rangle_{eq}$:\n$$\n\\frac{1}{2} k \\langle r^2 \\rangle_{eq} = \\frac{1}{2} k_{\\mathrm{B}} T \\implies \\langle r^2 \\rangle_{eq} = \\frac{k_{\\mathrm{B}} T}{k}\n$$\nSo, the equilibrium variance of the relative coordinate is:\n$$\n\\mathrm{Var}(r) = \\frac{k_{\\mathrm{B}} T}{k}\n$$\nThis result depends only on the temperature $T$ and the spring constant $k$, as these are the parameters that define the potential energy landscape and the thermal energy available to explore it. The masses and friction coefficients affect the time it takes to reach equilibrium, but not the properties of the equilibrium state itself.\n\n**Summary of Formulae for Computation**\n1.  Center-of-mass diffusion coefficient: $D_X = \\frac{k_{\\mathrm{B}} T}{\\gamma_1 + \\gamma_2}$\n2.  Equilibrium variance of relative coordinate: $\\mathrm{Var}(r) = \\frac{k_{\\mathrm{B}} T}{k}$", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the center-of-mass diffusion coefficient and relative coordinate\n    variance for a two-particle system described by Langevin dynamics.\n    \"\"\"\n    # Define the Boltzmann constant in SI units (J/K)\n    k_B = 1.380649e-23\n\n    # Test Suite: each case is (m1, m2, gamma1, gamma2, k, T) in SI units.\n    test_cases = [\n        # Case A\n        (1.0e-26, 2.0e-26, 8.0e-12, 1.2e-11, 1.0e-3, 300.0),\n        # Case B\n        (5.0e-26, 5.0e-26, 1.0e-11, 1.0e-11, 5.0e-3, 300.0),\n        # Case C\n        (1.0e-25, 3.0e-26, 1.0e-9, 2.0e-9, 1.0e-1, 310.0),\n        # Case D\n        (2.0e-26, 8.0e-27, 5.0e-12, 2.0e-11, 1.0e-4, 100.0),\n    ]\n\n    all_results = []\n    for case in test_cases:\n        m1, m2, gamma1, gamma2, k, T = case\n\n        # Calculate the long-time diffusion coefficient of the center of mass, D_X.\n        # D_X = k_B * T / (gamma1 + gamma2)\n        # This follows from the Einstein-Smoluchowski relation for a composite particle\n        # with an effective friction coefficient gamma_X = gamma1 + gamma2.\n        d_x = k_B * T / (gamma1 + gamma2)\n\n        # Calculate the equilibrium variance of the relative coordinate, Var(r).\n        # Var(r) = <r^2>_eq = k_B * T / k\n        # This follows from the equipartition theorem applied to the harmonic potential\n        # energy U(r) = (1/2) * k * r^2, where <U(r)> = (1/2) * k_B * T.\n        var_r = k_B * T / k\n        \n        all_results.append([d_x, var_r])\n\n    # Format the final output string according to the specified format.\n    # Each number must be in scientific notation with 10 digits after the decimal point.\n    # The format is a list of [D_X, Var(r)] pairs.\n    result_strings = []\n    for res_pair in all_results:\n        d_x_str = f\"{res_pair[0]:.10e}\"\n        var_r_str = f\"{res_pair[1]:.10e}\"\n        result_strings.append(f\"[{d_x_str}, {var_r_str}]\")\n    \n    final_output = f\"[{','.join(result_strings)}]\"\n    \n    # Final print statement in the exact required format.\n    print(final_output)\n\nsolve()\n```", "id": "2457138"}, {"introduction": "Many crucial processes in chemistry and biology, from protein folding to chemical reactions, involve surmounting an energy barrier. This hands-on practice guides you through a direct simulation of such a process using overdamped Langevin dynamics to model a particle's escape from a potential well. By implementing a numerical integrator and running multiple stochastic trajectories, you will calculate the Mean First Passage Time (MFPT) and see firsthand how it depends on temperature and barrier height, providing a computational window into the principles of reaction rate theory [@problem_id:2457132].", "problem": "A single particle undergoes isothermal overdamped Langevin dynamics in one dimension inside a quartic potential well with a single barrier separating two minima. You are asked to compute the Mean First Passage Time (MFPT) for the particle to escape from the left well by crossing the barrier top at the origin, and to explore its dependence on barrier height and temperature by direct numerical simulation.\n\nFundamental physical base. Use Newtonâ€™s second law reduced to the overdamped limit together with the Fluctuationâ€“Dissipation Theorem (FDT). In the overdamped regime, the position process $x(t)$ satisfies the stochastic differential equation\n$$\n\\gamma \\,\\dot{x}(t) = -\\frac{dU}{dx}(x(t)) + \\sqrt{2\\,\\gamma\\,k_{\\mathrm{B}}\\,T}\\,\\xi(t),\n$$\nwhere $\\gamma$ is the friction coefficient, $U(x)$ is the potential energy, $k_{\\mathrm{B}}$ is the Boltzmann constant, $T$ is the absolute temperature, and $\\xi(t)$ is Gaussian white noise with zero mean and delta correlation.\n\nPotential energy. Let the potential energy be\n$$\nU(x;H,L)= H\\left[\\left(\\frac{x}{L}\\right)^{4}-2\\left(\\frac{x}{L}\\right)^{2}\\right],\n$$\nwith barrier height parameter $H>0$ and length scale $L>0$. This potential has minima near $x=\\pm L$ and a barrier top at $x=0$. The barrier height relative to the well minima is exactly $H$, because $U(0)=0$ and $U(\\pm L)=-H$.\n\nEscape event. The particle starts at $x(0)=-L$ and the escape event is defined as the first time $\\tau$ such that $x(\\tau)\\ge 0$. The Mean First Passage Time (MFPT) is the expectation $\\mathbb{E}[\\tau]$.\n\nDiscretization. Use the Eulerâ€“Maruyama time discretization for the overdamped Langevin equation,\n$$\nx_{n+1} = x_{n} + \\frac{\\Delta t}{\\gamma}\\,F(x_{n}) + \\sqrt{\\frac{2\\,k_{\\mathrm{B}}\\,T\\,\\Delta t}{\\gamma}}\\,\\eta_{n},\n$$\nwhere $F(x)=-\\frac{dU}{dx}(x)$ is the deterministic force, $\\Delta t$ is the time step, and $\\eta_{n}\\sim \\mathcal{N}(0,1)$ are independent standard normal random variables. The force for the specified potential is\n$$\nF(x)= -\\frac{dU}{dx}(x)= -H\\left[\\frac{4x^{3}}{L^{4}}-\\frac{4x}{L^{2}}\\right] = \\frac{4H}{L^{2}}\\left(x-\\frac{x^{3}}{L^{2}}\\right).\n$$\n\nNumerical experiment design. For each parameter set, simulate $N$ independent trajectories starting at $x_{0}=-L$ and advance them in time with fixed $\\Delta t$ until each trajectory first satisfies $x\\ge 0$ or a maximum time $t_{\\max}$ is reached. Estimate the MFPT by the sample mean of the recorded first-passage times over the trajectories that escaped. If no trajectory escapes before $t_{\\max}$, return $t_{\\max}$ as a conservative estimate.\n\nPhysical parameters and units. Use the following fixed parameters for all test cases:\n- Boltzmann constant $k_{\\mathrm{B}} = 1.380\\,649\\times 10^{-23}\\ \\mathrm{J\\,K^{-1}}$.\n- Friction coefficient $\\gamma = 1.0\\times 10^{-12}\\ \\mathrm{kg\\,s^{-1}}$.\n- Length scale $L=1.0\\times 10^{-9}\\ \\mathrm{m}$.\n- Time step $\\Delta t = 5.0\\times 10^{-14}\\ \\mathrm{s}$.\n- Number of trajectories $N=64$.\n- Maximum simulated time $t_{\\max}=1.0\\times 10^{-7}\\ \\mathrm{s}$.\nAll answers for times must be expressed in seconds ($\\mathrm{s}$).\n\nBarrier height specification. The barrier height $H$ for each test case is specified relative to the thermal energy at a reference temperature $T_{\\mathrm{ref}}=300\\ \\mathrm{K}$ by\n$$\nH = h\\,k_{\\mathrm{B}}\\,T_{\\mathrm{ref}},\n$$\nwhere $h$ is a dimensionless multiplier provided per test case.\n\nTest suite. Run the program for the following parameter sets $(h, T)$:\n- Case A (happy path): $(h, T) = (2.0, 300.0\\ \\mathrm{K})$.\n- Case B (higher barrier at same temperature): $(h, T) = (4.0, 300.0\\ \\mathrm{K})$.\n- Case C (same barrier as Case B but higher temperature): $(h, T) = (4.0, 600.0\\ \\mathrm{K})$.\n- Case D (small barrier edge case): $(h, T) = (0.5, 300.0\\ \\mathrm{K})$.\n\nWhat to compute. For each case, compute the estimated MFPT (in $\\mathrm{s}$) as a floating-point number using the described simulation. Use a fixed random seed so that results are reproducible.\n\nFinal output format. Your program should produce a single line of output containing the four MFPT estimates in the order A, B, C, D as a comma-separated list enclosed in square brackets (for example, \"[tA,tB,tC,tD]\"), where each entry is a floating-point number in $\\mathrm{s}$.", "solution": "We begin from first principles appropriate to overdamped stochastic dynamics in computational chemistry. Newtonâ€™s second law states that for a particle of mass $m$ in one dimension,\n$$\nm\\,\\ddot{x}(t)= -\\frac{dU}{dx}(x(t)) - \\gamma\\,\\dot{x}(t) + R(t),\n$$\nwhere $-\\frac{dU}{dx}$ is the deterministic conservative force from the potential energy $U(x)$, $-\\gamma \\dot{x}$ is the viscous drag in a continuum solvent, and $R(t)$ is a random force from thermal fluctuations. In the overdamped limit, the inertial term $m\\,\\ddot{x}(t)$ is negligible compared to friction, leading to\n$$\n\\gamma \\,\\dot{x}(t)= -\\frac{dU}{dx}(x(t)) + R(t).\n$$\nThe Fluctuationâ€“Dissipation Theorem (FDT) connects the random force statistics to the friction and temperature, implying that $R(t)$ is a zero-mean Gaussian white noise with autocorrelation $\\langle R(t)R(t')\\rangle = 2\\,\\gamma\\,k_{\\mathrm{B}}\\,T\\,\\delta(t-t')$. Writing $R(t)$ as $\\sqrt{2\\,\\gamma\\,k_{\\mathrm{B}}\\,T}\\,\\xi(t)$, with $\\xi(t)$ a standard white noise, yields the overdamped Langevin stochastic differential equation\n$$\n\\gamma \\,\\dot{x}(t)= -\\frac{dU}{dx}(x(t)) + \\sqrt{2\\,\\gamma\\,k_{\\mathrm{B}}\\,T}\\,\\xi(t).\n$$\n\nTo simulate this stochastic differential equation numerically, we use the Eulerâ€“Maruyama method, which discretizes time with a step $\\Delta t$ and updates the position according to\n$$\nx_{n+1} = x_{n} + \\frac{\\Delta t}{\\gamma}\\,F(x_{n}) + \\sqrt{\\frac{2\\,k_{\\mathrm{B}}\\,T\\,\\Delta t}{\\gamma}}\\,\\eta_{n},\n$$\nwhere $F(x)=-\\frac{dU}{dx}(x)$ and $\\eta_{n}\\sim \\mathcal{N}(0,1)$ are independent standard normal variables. This integrator is derived by integrating the stochastic differential equation over a small time interval and approximating the drift and diffusion terms to first order in $\\Delta t$.\n\nWe define the potential energy as\n$$\nU(x;H,L)= H\\left[\\left(\\frac{x}{L}\\right)^{4}-2\\left(\\frac{x}{L}\\right)^{2}\\right],\n$$\nwhich has minima at $x=\\pm L$ with value $U(\\pm L)=-H$ and a barrier top at $x=0$ with value $U(0)=0$. Hence, the barrier height relative to the well bottom is exactly $H$. The deterministic force is the negative gradient,\n$$\nF(x)=-\\frac{dU}{dx}(x) = -H\\left[\\frac{4x^{3}}{L^{4}}-\\frac{4x}{L^{2}}\\right] = \\frac{4H}{L^{2}}\\left(x-\\frac{x^{3}}{L^{2}}\\right).\n$$\n\nThe escape event is defined as the first time $\\tau$ when $x(\\tau)\\ge 0$ for a trajectory that starts at $x(0)=-L$. We estimate the Mean First Passage Time (MFPT), $\\mathbb{E}[\\tau]$, by simulating $N$ independent trajectories and computing the sample mean of the first-passage times among those that escape before a cap time $t_{\\max}$. This estimator is unbiased in the limit $N\\to\\infty$ and $\\Delta t\\to 0$.\n\nAlgorithmic design:\n1. Choose physical constants and parameters: Boltzmann constant $k_{\\mathrm{B}} = 1.380\\,649\\times 10^{-23}\\ \\mathrm{J\\,K^{-1}}$, friction coefficient $\\gamma = 1.0\\times 10^{-12}\\ \\mathrm{kg\\,s^{-1}}$, length scale $L=1.0\\times 10^{-9}\\ \\mathrm{m}$, time step $\\Delta t = 5.0\\times 10^{-14}\\ \\mathrm{s}$, number of trajectories $N=64$, and maximum simulated time $t_{\\max}=1.0\\times 10^{-7}\\ \\mathrm{s}$. These values render the Eulerâ€“Maruyama method stable and yield escape times that are computationally tractable while remaining scientifically plausible for nanoscale systems in a viscous solvent.\n2. For each test case, compute the absolute barrier height\n$$\nH = h\\,k_{\\mathrm{B}}\\,T_{\\mathrm{ref}},\\quad T_{\\mathrm{ref}}=300\\ \\mathrm{K},\n$$\nfrom the given dimensionless multiplier $h$ and simulate at the specified temperature $T$.\n3. Initialize $N$ walkers at $x_{0}=-L$ and $t=0$. For all walkers that have not yet escaped (those with $x<0$), update their positions using the Eulerâ€“Maruyama step. After each step, record the current time for those walkers that newly satisfy $x\\ge 0$; mark them as escaped and exclude them from further updates.\n4. Continue until all walkers escape or $t\\ge t_{\\max}$. Compute the MFPT as the arithmetic mean of the recorded first-passage times among the escaped walkers. If no walker escapes, return $t_{\\max}$.\n5. Use a fixed random seed to ensure replicability of the results.\n\nRationale and expectations. The Kramers escape-rate theory for overdamped dynamics predicts an approximate mean escape time that scales as\n$$\n\\mathrm{MFPT}\\propto \\frac{\\gamma}{\\sqrt{U''(x_{\\mathrm{m}})\\lvert U''(x_{\\mathrm{b}})\\rvert}} \\exp\\!\\left(\\frac{H}{k_{\\mathrm{B}}T}\\right),\n$$\nwhere $x_{\\mathrm{m}}$ is the well minimum and $x_{\\mathrm{b}}$ is the barrier top. For the quartic potential, $U''(\\pm L)=\\frac{8H}{L^{2}}$ and $U''(0)=-\\frac{4H}{L^{2}}$, so the prefactor scales as $\\gamma L^{2}/H$, while the dominant dependence is the exponential in $H/(k_{\\mathrm{B}}T)$. Our test suite is designed to verify qualitatively that increasing $H$ at fixed $T$ increases the MFPT, while increasing $T$ at fixed $H$ decreases the MFPT.\n\nNumerical outputs. For the four cases:\n- Case A: $(h, T) = (2.0, 300.0\\ \\mathrm{K})$.\n- Case B: $(h, T) = (4.0, 300.0\\ \\mathrm{K})$.\n- Case C: $(h, T) = (4.0, 600.0\\ \\mathrm{K})$.\n- Case D: $(h, T) = (0.5, 300.0\\ \\mathrm{K})$.\ncompute the MFPT in seconds and output as a single line in the format \"[tA,tB,tC,tD]\". All times must be in $\\mathrm{s}$, and each entry must be a floating-point number.", "answer": "```python\nimport numpy as np\n\ndef simulate_mfpt(h_multiplier, T, rng, params):\n    \"\"\"\n    Simulate MFPT for overdamped Langevin dynamics in a quartic double-well potential.\n    h_multiplier: dimensionless barrier height multiplier relative to k_B*T_ref.\n    T: absolute temperature in K.\n    rng: numpy random Generator for reproducibility.\n    params: dict of physical and numerical parameters.\n    Returns: estimated MFPT (float, seconds).\n    \"\"\"\n    # Unpack parameters\n    kB = params[\"kB\"]             # J/K\n    T_ref = params[\"T_ref\"]       # K\n    gamma = params[\"gamma\"]       # kg/s\n    L = params[\"L\"]               # m\n    dt = params[\"dt\"]             # s\n    N = params[\"N\"]               # number of trajectories\n    t_max = params[\"t_max\"]       # s\n\n    # Potential barrier height H in Joules\n    H = h_multiplier * kB * T_ref\n\n    # Precompute constants\n    inv_L2 = 1.0 / (L * L)\n    inv_L4 = inv_L2 * inv_L2\n    sigma = np.sqrt(2.0 * kB * T * dt / gamma)\n\n    # Initialize positions and status\n    x = np.full(N, -L, dtype=np.float64)\n    escaped = np.zeros(N, dtype=bool)\n    t_escape = np.full(N, np.nan, dtype=np.float64)\n\n    # Time loop\n    t = 0.0\n    max_steps = int(np.ceil(t_max / dt))\n    for _ in range(max_steps):\n        # Identify active walkers\n        active_idx = np.where(~escaped)[0]\n        if active_idx.size == 0:\n            break\n\n        xa = x[active_idx]\n\n        # Compute deterministic force: F = -dU/dx = H*(4x/L^2 - 4 x^3 / L^4)\n        # Derived from U = H[(x/L)^4 - 2(x/L)^2]\n        dUdx = H * (4.0 * xa**3 * inv_L4 - 4.0 * xa * inv_L2)\n        F = -dUdx\n\n        # Stochastic increment\n        noise = sigma * rng.standard_normal(size=xa.shape)\n\n        # Update positions\n        xa_new = xa + (dt / gamma) * F + noise\n        x[active_idx] = xa_new\n\n        # Advance time\n        t += dt\n\n        # Check for escape: crossing x >= 0\n        crossed = xa_new >= 0.0\n        if np.any(crossed):\n            crossed_idx = active_idx[crossed]\n            escaped[crossed_idx] = True\n            # Record current time as first-passage time\n            t_escape[crossed_idx] = t\n\n    # Compute MFPT: mean over escaped walkers\n    escaped_times = t_escape[~np.isnan(t_escape)]\n    if escaped_times.size == 0:\n        # Fallback if none escaped: return t_max\n        return float(t_max)\n    else:\n        return float(np.mean(escaped_times))\n\n\ndef solve():\n    # Fixed physical and numerical parameters\n    params = {\n        \"kB\": 1.380649e-23,     # Boltzmann constant, J/K\n        \"T_ref\": 300.0,         # reference temperature, K\n        \"gamma\": 1.0e-12,       # friction coefficient, kg/s\n        \"L\": 1.0e-9,            # length scale, m\n        \"dt\": 5.0e-14,          # time step, s\n        \"N\": 64,                # number of trajectories\n        \"t_max\": 1.0e-7,        # maximum time, s\n    }\n\n    # Test cases: (h_multiplier, Temperature K)\n    test_cases = [\n        (2.0, 300.0),  # Case A\n        (4.0, 300.0),  # Case B\n        (4.0, 600.0),  # Case C\n        (0.5, 300.0),  # Case D\n    ]\n\n    # Use fixed seed for reproducibility; vary per case to diversify streams\n    base_seed = 123456\n    results = []\n    for i, (h, T) in enumerate(test_cases):\n        rng = np.random.default_rng(base_seed + i)\n        mfpt = simulate_mfpt(h, T, rng, params)\n        results.append(mfpt)\n\n    # Print results in required single-line format\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2457132"}, {"introduction": "The accuracy of any molecular simulation rests on the quality of its numerical integrator, especially when dealing with complex or non-ideal potentials. This exercise explores the performance of different algorithms for integrating the Langevin equation in the challenging case of a \"cusp\" potential, where the force is discontinuous. By comparing simple explicit schemes with more robust geometric integrators, you will gain critical insight into numerical stability and why advanced methods are often essential for reliable and accurate simulations in computational chemistry [@problem_id:2457165].", "problem": "Consider a single particle moving in one spatial dimension with a cusp potential. Let the potential be defined by $V(x)=k \\lvert x \\rvert$, where $k>0$ is a constant. The force is the negative gradient (interpreted as a subgradient at the cusp), taken here as $F(x)=-\\frac{dV}{dx}=-k\\,\\mathrm{sign}(x)$, with $\\mathrm{sign}(0)=0$. Work entirely in reduced, dimensionless units with particle mass $m=1$ and Boltzmann constant $k_{\\mathrm{B}}=1$. Temperature $T$ is then expressed in the same units as energy.\n\nTwo stochastic dynamics models are to be considered:\n\n- Underdamped Langevin dynamics (with inertia):\n  $$dx_t=v_t\\,dt,$$\n  $$dv_t=\\left(-\\gamma\\,v_t+F(x_t)\\right)\\,dt+\\sqrt{2\\,\\gamma\\,T}\\,dW_t,$$\n  where $\\gamma>0$ is a friction coefficient and $W_t$ is a standard Wiener process.\n\n- Overdamped Brownian dynamics (high-friction limit):\n  $$dx_t=\\mu\\,F(x_t)\\,dt+\\sqrt{2\\,D}\\,dW_t,$$\n  where the mobility is $\\mu=\\frac{1}{\\gamma}$ and the diffusion coefficient is $D=\\mu\\,T=\\frac{T}{\\gamma}$.\n\nFor this potential at thermal equilibrium, the stationary position distribution is the Laplace distribution with density proportional to $\\exp\\!\\left(-\\frac{k\\lvert x\\rvert}{T}\\right)$. Consequently, the exact equilibrium mean absolute position is\n$$\\mathbb{E}\\left[\\lvert X \\rvert\\right]=\\frac{T}{k}.$$\n\nDiscrete-time update rules to be used in the simulations are specified as follows. Let $R_n$ denote independent, identically distributed standard normal random variables (mean $0$, variance $1$).\n\n- Underdamped integrator U1 (explicit Eulerâ€“Maruyama for the velocity, explicit position update):\n  $$v_{n+1}=v_n+\\Delta t\\left(-\\gamma\\,v_n+F(x_n)\\right)+\\sqrt{2\\,\\gamma\\,T}\\,\\sqrt{\\Delta t}\\,R_n,$$\n  $$x_{n+1}=x_n+\\Delta t\\,v_n.$$\n\n- Underdamped integrator U2 (a symmetric Strang splitting integrator with an exact Ornsteinâ€“Uhlenbeck thermostat step; commonly called BAOAB in the literature):\n  Define $a=\\exp(-\\gamma\\,\\Delta t)$ and $b=\\sqrt{T\\,(1-a^2)}$. Then perform the following sequence at each step:\n  1. Half kick: $$v\\leftarrow v+\\frac{\\Delta t}{2}\\,F(x).$$\n  2. Half drift: $$x\\leftarrow x+\\frac{\\Delta t}{2}\\,v.$$\n  3. Ornsteinâ€“Uhlenbeck (thermostat): $$v\\leftarrow a\\,v+b\\,R_n.$$\n  4. Half drift: $$x\\leftarrow x+\\frac{\\Delta t}{2}\\,v.$$\n  5. Half kick: $$v\\leftarrow v+\\frac{\\Delta t}{2}\\,F(x).$$\n\n- Overdamped integrator O1 (explicit Eulerâ€“Maruyama):\n  $$x_{n+1}=x_n+\\mu\\,F(x_n)\\,\\Delta t+\\sqrt{2\\,D\\,\\Delta t}\\,R_n.$$\n\n- Overdamped integrator O2 (implicit Euler for the drift, which for the cusp potential admits a closed-form update). Let $y=x_n+\\sqrt{2\\,D\\,\\Delta t}\\,R_n$ and $a=\\mu\\,k\\,\\Delta t$. Then update\n  $$x_{n+1}=\\mathrm{sign}(y)\\,\\max\\!\\left(\\lvert y\\rvert-a,\\,0\\right).$$\n\nIn all simulations, use initial conditions $x_0=0$ and $v_0=0$ (for underdamped cases), a fixed number of time steps $N$, and a burn-in of $N_{\\mathrm{burn}}$ steps that are discarded from averaging. Use a fixed pseudo-random seed $s$ to initialize the generation of the Gaussian random variables $R_n$ to make the results reproducible. After burn-in, compute the time average of the absolute position,\n$$\\overline{m}=\\frac{1}{N-N_{\\mathrm{burn}}}\\sum_{n=N_{\\mathrm{burn}}+1}^{N} \\lvert x_n\\rvert,$$\nand report the absolute error with respect to the exact value $T/k$,\n$$\\varepsilon=\\left\\lvert \\overline{m}-\\frac{T}{k}\\right\\rvert.$$\n\nTest suite. For each of the following parameter sets, run the corresponding simulation and return the value of $\\varepsilon$ as a floating-point number.\n\n- Test 1 (overdamped, explicit): O1 with $k=1$, $T=1$, $\\gamma=5$, $\\Delta t=0.05$, $N=200000$, $N_{\\mathrm{burn}}=20000$, $s=12345$.\n- Test 2 (overdamped, implicit): O2 with $k=1$, $T=1$, $\\gamma=5$, $\\Delta t=0.05$, $N=200000$, $N_{\\mathrm{burn}}=20000$, $s=12345$.\n- Test 3 (underdamped, explicit): U1 with $k=1$, $T=1$, $\\gamma=1$, $\\Delta t=0.001$, $N=200000$, $N_{\\mathrm{burn}}=20000$, $s=12345$.\n- Test 4 (underdamped, splitting): U2 with $k=1$, $T=1$, $\\gamma=1$, $\\Delta t=0.01$, $N=200000$, $N_{\\mathrm{burn}}=20000$, $s=12345$.\n\nAngle units do not apply. All reported quantities are dimensionless. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $[\\varepsilon_1,\\varepsilon_2,\\varepsilon_3,\\varepsilon_4]$) in the same order as the test cases above.", "solution": "The problem posed is a well-defined computational exercise in the field of statistical mechanics, specifically concerning the numerical integration of stochastic differential equations. All parameters, initial conditions, and numerical schemes are specified unambiguously. The underlying physical model of a particle in a cusp potential under Langevin or Brownian dynamics is scientifically sound, and the theoretical equilibrium expectation value provided, $\\mathbb{E}\\left[\\lvert X \\rvert\\right]=\\frac{T}{k}$, is correct. The problem is therefore valid, and a solution can be constructed.\n\nThe objective is to simulate the trajectory of a single particle in one dimension, governed by a potential $V(x)=k \\lvert x \\rvert$, using four distinct numerical integration schemes. For each scheme, we must compute the time-averaged absolute position, $\\overline{m}$, after an initial burn-in period, and report the absolute error $\\varepsilon=\\left\\lvert \\overline{m}-\\frac{T}{k}\\right\\rvert$ with respect to the exact analytical result. The particle mass $m$, Boltzmann constant $k_{\\mathrm{B}}$, and potential constant $k$ are all set to $1$ in dimensionless units, and the temperature is $T=1$. Thus, the exact value for comparison is $\\mathbb{E}\\left[\\lvert X \\rvert\\right]=\\frac{1}{1}=1$.\n\nAll simulations start from the initial state $x_0=0$ and, for underdamped cases, $v_0=0$. A fixed pseudo-random seed $s=12345$ is used to initialize the generator of standard normal random numbers, $R_n$, ensuring reproducibility across all tests. A total of $N=200000$ steps are performed, with the first $N_{\\mathrm{burn}}=20000$ steps discarded to allow the system to equilibrate. The average is computed over the remaining $N-N_{\\mathrm{burn}}=180000$ steps.\n\nThe implementation will consist of four distinct functions, each corresponding to one of the test cases.\n\n**Test 1: Overdamped Eulerâ€“Maruyama Integrator (O1)**\nThis test employs the overdamped Brownian dynamics equation:\n$$dx_t=\\mu\\,F(x_t)\\,dt+\\sqrt{2\\,D}\\,dW_t$$\nwhere $\\mu=1/\\gamma$ and $D=T/\\gamma$. The simplest numerical discretization is the explicit Eulerâ€“Maruyama scheme, given by:\n$$x_{n+1}=x_n+\\mu\\,F(x_n)\\,\\Delta t+\\sqrt{2\\,D\\,\\Delta t}\\,R_n$$\nFor this test, parameters are $k=1$, $T=1$, $\\gamma=5$, and $\\Delta t=0.05$. This gives $\\mu=1/5=0.2$ and $D=1/5=0.2$. The force is $F(x_n)=-k\\,\\mathrm{sign}(x_n)=-\\mathrm{sign}(x_n)$. The simulation loop will directly implement this update rule for $N$ steps, accumulating $\\lvert x_n \\rvert$ for $n > N_{\\mathrm{burn}}$.\n\n**Test 2: Overdamped Splitting Integrator (O2)**\nThis test uses the same overdamped dynamics but with a more sophisticated integrator. The update is performed in two steps: a stochastic \"kick\" followed by the exact evolution under the deterministic part of the dynamics.\n1. Apply stochastic kick: $y=x_n+\\sqrt{2\\,D\\,\\Delta t}\\,R_n$.\n2. Apply deterministic evolution: The equation $\\dot{x} = \\mu F(x) = -\\mu k\\,\\mathrm{sign}(x)$ is solved exactly for a time $\\Delta t$ starting from $y$. The solution is $x(\\Delta t)=\\mathrm{sign}(y)\\,\\max(\\lvert y\\rvert-\\mu k\\,\\Delta t,\\,0)$.\nThis gives the update rule:\n$$x_{n+1}=\\mathrm{sign}(y)\\,\\max\\!\\left(\\lvert y\\rvert-a,\\,0\\right)$$\nwhere $a=\\mu\\,k\\,\\Delta t$. The parameters are identical to Test 1, allowing for a direct comparison of the integrators' accuracy. This method is typically more stable for potentials with sharp features like the cusp.\n\n**Test 3: Underdamped Eulerâ€“Maruyama Integrator (U1)**\nThis test considers the underdamped Langevin dynamics, which includes inertia:\n$$dx_t=v_t\\,dt$$\n$$dv_t=\\left(-\\gamma\\,v_t+F(x_t)\\right)\\,dt+\\sqrt{2\\,\\gamma\\,T}\\,dW_t$$\nThe integrator (U1) is a simple explicit scheme:\n$$v_{n+1}=v_n+\\Delta t\\left(-\\gamma\\,v_n+F(x_n)\\right)+\\sqrt{2\\,\\gamma\\,T}\\,\\sqrt{\\Delta t}\\,R_n$$\n$$x_{n+1}=x_n+\\Delta t\\,v_n$$\nNote that the position is updated using the velocity from the beginning of the timestep, $v_n$. The parameters are $k=1$, $T=1$, $\\gamma=1$, and a small timestep $\\Delta t=0.001$, which is necessary due to the limited stability of this explicit method.\n\n**Test 4: Underdamped Splitting Integrator (U2 / BAOAB)**\nThis test uses a more robust geometric integrator known as BAOAB, which is a symmetric Strang splitting of the Langevin operator. The dynamics are split into three parts: deterministic motion under the force (B), deterministic drift (A), and stochastic velocity update according to the Ornsteinâ€“Uhlenbeck process (O). The sequence is BAOAB:\n1. **B (Force):** Update velocity for a half time step: $v\\leftarrow v+\\frac{\\Delta t}{2}\\,F(x)$.\n2. **A (Drift):** Update position for a half time step: $x\\leftarrow x+\\frac{\\Delta t}{2}\\,v$.\n3. **O (Thermostat):** Update velocity exactly for the full time step: $v\\leftarrow a\\,v+b\\,R_n$, with $a=\\exp(-\\gamma\\,\\Delta t)$ and $b=\\sqrt{T\\,(1-a^2)}$.\n4. **A (Drift):** Update position for the second half time step: $x\\leftarrow x+\\frac{\\Delta t}{2}\\,v$.\n5. **B (Force):** Update velocity for the second half time step: $v\\leftarrow v+\\frac{\\Delta t}{2}\\,F(x)$.\nThis symmetric splitting provides better long-term stability and accuracy in preserving the equilibrium distribution, allowing for a larger timestep of $\\Delta t=0.01$ compared to U1.\n\nFor each test, the simulation will be executed, the mean absolute position $\\overline{m}$ calculated, and the absolute error $\\varepsilon$ determined. The four resulting error values will be collected and formatted as requested.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef force(x: float, k: float) -> float:\n    \"\"\"Calculates the force F(x) = -k * sign(x).\"\"\"\n    return -k * np.sign(x)\n\ndef run_test1_o1(k: float, T: float, gamma: float, dt: float, N: int, N_burn: int, seed: int) -> float:\n    \"\"\"\n    Test 1: Overdamped, explicit Euler-Maruyama integrator (O1).\n    \"\"\"\n    x = 0.0\n    mu = 1.0 / gamma\n    D = T / gamma\n    stochastic_term_coeff = np.sqrt(2 * D * dt)\n    rng = np.random.default_rng(seed)\n    \n    total_abs_x = 0.0\n    \n    for n in range(N):\n        R_n = rng.standard_normal()\n        drift_term = mu * force(x, k) * dt\n        stochastic_term = stochastic_term_coeff * R_n\n        x = x + drift_term + stochastic_term\n        \n        if n >= N_burn:\n            total_abs_x += np.abs(x)\n            \n    m_bar = total_abs_x / (N - N_burn)\n    exact_m = T / k\n    error = np.abs(m_bar - exact_m)\n    return error\n\ndef run_test2_o2(k: float, T: float, gamma: float, dt: float, N: int, N_burn: int, seed: int) -> float:\n    \"\"\"\n    Test 2: Overdamped, implicit/splitting integrator (O2).\n    \"\"\"\n    x = 0.0\n    mu = 1.0 / gamma\n    D = T / gamma\n    stochastic_term_coeff = np.sqrt(2 * D * dt)\n    a_param = mu * k * dt\n    rng = np.random.default_rng(seed)\n    \n    total_abs_x = 0.0\n    \n    for n in range(N):\n        R_n = rng.standard_normal()\n        y = x + stochastic_term_coeff * R_n\n        x = np.sign(y) * max(np.abs(y) - a_param, 0.0)\n        \n        if n >= N_burn:\n            total_abs_x += np.abs(x)\n            \n    m_bar = total_abs_x / (N - N_burn)\n    exact_m = T / k\n    error = np.abs(m_bar - exact_m)\n    return error\n\ndef run_test3_u1(k: float, T: float, gamma: float, dt: float, N: int, N_burn: int, seed: int) -> float:\n    \"\"\"\n    Test 3: Underdamped, explicit Euler-Maruyama integrator (U1).\n    \"\"\"\n    x, v = 0.0, 0.0\n    stochastic_term_coeff = np.sqrt(2 * gamma * T * dt)\n    rng = np.random.default_rng(seed)\n    \n    total_abs_x = 0.0\n    \n    for n in range(N):\n        R_n = rng.standard_normal()\n        \n        v_new = v + dt * (-gamma * v + force(x, k)) + stochastic_term_coeff * R_n\n        x_new = x + dt * v\n        \n        x, v = x_new, v_new\n        \n        if n >= N_burn:\n            total_abs_x += np.abs(x)\n            \n    m_bar = total_abs_x / (N - N_burn)\n    exact_m = T / k\n    error = np.abs(m_bar - exact_m)\n    return error\n\ndef run_test4_u2(k: float, T: float, gamma: float, dt: float, N: int, N_burn: int, seed: int) -> float:\n    \"\"\"\n    Test 4: Underdamped, BAOAB splitting integrator (U2).\n    \"\"\"\n    x, v = 0.0, 0.0\n    a_param = np.exp(-gamma * dt)\n    b_param = np.sqrt(T * (1 - a_param**2))\n    dt_half = dt / 2.0\n    rng = np.random.default_rng(seed)\n    \n    total_abs_x = 0.0\n    \n    for n in range(N):\n        # 1. B (Half kick)\n        v = v + dt_half * force(x, k)\n        \n        # 2. A (Half drift)\n        x = x + dt_half * v\n        \n        # 3. O (Thermostat)\n        R_n = rng.standard_normal()\n        v = a_param * v + b_param * R_n\n        \n        # 4. A (Half drift)\n        x = x + dt_half * v\n        \n        # 5. B (Half kick)\n        v = v + dt_half * force(x, k)\n        \n        if n >= N_burn:\n            total_abs_x += np.abs(x)\n            \n    m_bar = total_abs_x / (N - N_burn)\n    exact_m = T / k\n    error = np.abs(m_bar - exact_m)\n    return error\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Test 1: O1\n        {\"func\": run_test1_o1, \"params\": {'k': 1, 'T': 1, 'gamma': 5, 'dt': 0.05, 'N': 200000, 'N_burn': 20000, 'seed': 12345}},\n        # Test 2: O2\n        {\"func\": run_test2_o2, \"params\": {'k': 1, 'T': 1, 'gamma': 5, 'dt': 0.05, 'N': 200000, 'N_burn': 20000, 'seed': 12345}},\n        # Test 3: U1\n        {\"func\": run_test3_u1, \"params\": {'k': 1, 'T': 1, 'gamma': 1, 'dt': 0.001, 'N': 200000, 'N_burn': 20000, 'seed': 12345}},\n        # Test 4: U2\n        {\"func\": run_test4_u2, \"params\": {'k': 1, 'T': 1, 'gamma': 1, 'dt': 0.01, 'N': 200000, 'N_burn': 20000, 'seed': 12345}},\n    ]\n\n    results = []\n    for case in test_cases:\n        result = case[\"func\"](**case[\"params\"])\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2457165"}]}