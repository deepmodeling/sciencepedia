{"hands_on_practices": [{"introduction": "A primary goal of computational materials science is to predict the physical properties of materials from first principles. A fundamental mechanical property is the bulk modulus, $B_0$, which quantifies a solid's resistance to uniform compression. In this practice [@problem_id:2462510], you will learn a cornerstone technique for determining this value: fitting total energy versus volume data obtained from quantum mechanical calculations to a thermodynamic equation of state. This exercise will give you hands-on experience with the Birch-Murnaghan equation of state, connecting the microscopic total energy of a system to a key macroscopic measure of its mechanical strength.", "problem": "A crystalline solid’s resistance to uniform compression is quantified by the isothermal bulk modulus, denoted $B_0$. For a cubic solid such as titanium nitride (TiN), the bulk modulus at zero pressure and $0\\,\\mathrm{K}$ can be obtained by fitting an Equation of State (EOS) to a set of total energies $E$ as a function of volume $V$. In this problem, use the third-order Birch–Murnaghan EOS defined for energy as a function of volume:\n$$\nE(V) \\;=\\; E_0 \\;+\\; \\frac{9 V_0 B_0}{16} \\left\\{ \\left[\\left(\\frac{V_0}{V}\\right)^{\\tfrac{2}{3}} - 1\\right]^3 B_0' \\;+\\; \\left[\\left(\\frac{V_0}{V}\\right)^{\\tfrac{2}{3}} - 1\\right]^2 \\left(6 \\;-\\; 4 \\left(\\frac{V_0}{V}\\right)^{\\tfrac{2}{3}}\\right) \\right\\}.\n$$\nHere, $E_0$ is the equilibrium energy, $V_0$ is the equilibrium volume, $B_0$ is the bulk modulus, and $B_0'$ is the first pressure derivative of the bulk modulus. For unit consistency, use energies in electronvolts and volumes in cubic ångström, and convert bulk modulus between $\\mathrm{eV/\\AA^3}$ and $\\mathrm{GPa}$ with the exact factor $1\\,\\mathrm{eV/\\AA^3} = 160.21766208\\,\\mathrm{GPa}$. When inserting $B_0$ (in $\\mathrm{GPa}$) into the formula above, first convert it to $\\mathrm{eV/\\AA^3}$ using $B_0^{(\\mathrm{eV/\\AA^3})} = B_0^{(\\mathrm{GPa})}/160.21766208$.\n\nYour task is to determine $B_0$ for several synthetic TiN test cases by fitting the energy–volume data generated exactly by the equation above using the provided parameter sets. For each test case, you are given a tuple $(E_0, V_0, B_0, B_0')$ and a set of volumes. Generate the energies $E(V)$ using the given parameters and volumes. In Test Case $3$ only, after generating $E(V)$, add a constant offset of $+5.000\\,\\mathrm{eV}$ to every energy value to emulate an arbitrary reference energy shift. Then, fit the same third-order Birch–Murnaghan energy function to the resulting $(V, E)$ data to estimate $(E_0, V_0, B_0, B_0')$ and report $B_0$.\n\nUnits and reporting requirements:\n- Energies must be in $\\mathrm{eV}$ and volumes in $\\mathrm{\\AA^3}$. Report the final bulk modulus values in $\\mathrm{GPa}$ rounded to exactly two decimal places.\n- Angles do not appear in this problem.\n- No percentages appear in this problem.\n\nTest suite:\n- Test Case $1$ (TiN-like, balanced sampling):\n  - Parameters: $E_0 = -18.000\\,\\mathrm{eV}$, $V_0 = 19.200\\,\\mathrm{\\AA^3}$, $B_0 = 280.000\\,\\mathrm{GPa}$, $B_0' = 4.000$.\n  - Volumes (in $\\mathrm{\\AA^3}$): $\\{17.664,\\;18.432,\\;18.816,\\;19.200,\\;19.584,\\;19.968,\\;20.736\\}$.\n- Test Case $2$ (TiN-like, slightly stiffer and asymmetric sampling window):\n  - Parameters: $E_0 = -18.500\\,\\mathrm{eV}$, $V_0 = 19.000\\,\\mathrm{\\AA^3}$, $B_0 = 300.000\\,\\mathrm{GPa}$, $B_0' = 4.200$.\n  - Volumes (in $\\mathrm{\\AA^3}$): $\\{17.860,\\;18.240,\\;18.620,\\;19.000,\\;19.380,\\;19.760,\\;20.140\\}$.\n- Test Case $3$ (TiN-like, narrow sampling around equilibrium with constant energy offset):\n  - Parameters: $E_0 = -19.200\\,\\mathrm{eV}$, $V_0 = 19.100\\,\\mathrm{\\AA^3}$, $B_0 = 250.000\\,\\mathrm{GPa}$, $B_0' = 3.800$.\n  - Volumes (in $\\mathrm{\\AA^3}$): $\\{18.8135,\\;19.0045,\\;19.1000,\\;19.1955,\\;19.3865\\}$.\n  - After computing $E(V)$ from the EOS, add $+5.000\\,\\mathrm{eV}$ to each energy.\n\nRequired final output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of Test Case $1$, Test Case $2$, and Test Case $3$. Each entry is the fitted bulk modulus $B_0$ in $\\mathrm{GPa}$, rounded to exactly two decimal places. For example: $[280.00,300.00,250.00]$.", "solution": "The problem presented is a valid and well-posed exercise in computational materials science, specifically in the analysis of equation of state (EOS) data. It requires the determination of the isothermal bulk modulus, $B_0$, for a cubic solid by fitting synthetic energy-volume data to the third-order Birch–Murnaghan EOS. The problem is scientifically grounded, logically consistent, and all necessary data and constraints are provided.\n\nThe core of the problem lies in applying non-linear least squares fitting to a known physical model. The governing equation is the third-order Birch–Murnaghan EOS, which describes the total energy $E$ of a solid as a function of its volume $V$:\n$$\nE(V) \\;=\\; E_0 \\;+\\; \\frac{9 V_0 B_0}{16} \\left\\{ \\left[\\left(\\frac{V_0}{V}\\right)^{\\tfrac{2}{3}} - 1\\right]^3 B_0' \\;+\\; \\left[\\left(\\frac{V_0}{V}\\right)^{\\tfrac{2}{3}} - 1\\right]^2 \\left(6 \\;-\\; 4 \\left(\\frac{V_0}{V}\\right)^{\\tfrac{2}{3}}\\right) \\right\\}\n$$\nThe parameters to be determined by the fit are the equilibrium energy $E_0$, the equilibrium volume $V_0$, the bulk modulus $B_0$, and its first pressure derivative $B_0'$.\n\nThe specified procedure involves two main steps for each test case:\n$1$. **Data Generation**: A set of energy-volume pairs $(V, E)$ is first synthesized using the provided \"true\" parameters ($E_0, V_0, B_0, B_0'$) and a list of volumes. For Test Case $3$, a constant energy offset of $+5.000\\,\\mathrm{eV}$ is added to all calculated energies. This simulates a change in the reference energy, which should only affect the fitted value of $E_0$ and leave other parameters, such as $B_0$, unchanged, as they depend on the shape of the $E(V)$ curve, not its absolute vertical position.\n\n$2$. **Parameter Fitting**: The synthesized $(V, E)$ data is then used as input for a non-linear least squares fitting procedure. The objective is to find the set of parameters $(E_0, V_0, B_0, B_0')$ that best reproduces the data when plugged into the Birch–Murnaghan EOS model. The primary value of interest is the fitted bulk modulus, $B_0$.\n\nThis task will be accomplished using the `curve_fit` function from the `scipy.optimize` library, which implements the Levenberg-Marquardt algorithm for non-linear optimization. The function requires a model function to fit, the independent data ($V$), the dependent data ($E$), and a set of initial guesses for the parameters.\n\nThe model function will be a direct implementation of the Birch–Murnaghan EOS. A critical detail is the handling of units. The equation requires the bulk modulus $B_0$ to be in units of energy per volume, specifically $\\mathrm{eV/\\AA^3}$. The input and output values for $B_0$ are specified in Gigapascals ($\\mathrm{GPa}$). Therefore, the conversion factor $1\\,\\mathrm{eV/\\AA^3} = 160.21766208\\,\\mathrm{GPa}$ must be applied correctly within the model function. The fitting function will be defined to accept $B_0$ in $\\mathrm{GPa}$ and perform the conversion internally.\n\nTo ensure the stability and success of the fitting algorithm, reasonable initial guesses for the parameters are necessary. These can be estimated directly from the input $(V, E)$ data:\n- The initial guess for the equilibrium volume, $V_0^{\\text{guess}}$, is the volume corresponding to the minimum energy in the dataset.\n- The initial guess for the equilibrium energy, $E_0^{\\text{guess}}$, is this minimum energy value.\n- For the bulk modulus, $B_0^{\\text{guess}}$, a physically plausible value such as $200\\,\\mathrm{GPa}$ can be used as a starting point.\n- For its pressure derivative, $B_0'^{\\text{guess}}$, a typical value is $4.0$.\n\nSince the data for fitting is generated from the exact model function without any noise, the non-linear least squares fit is expected to converge to the original \"true\" parameters with very high numerical precision. The final step is to report the fitted $B_0$ for each test case, in $\\mathrm{GPa}$ and rounded to two decimal places as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Solves the problem of fitting the Birch-Murnaghan EOS to synthetic data\n    to determine the bulk modulus B0 for three test cases.\n    \"\"\"\n\n    # Conversion factor from GPa to eV/Å^3\n    GPA_TO_EV_PER_A3 = 1.0 / 160.21766208\n\n    # Test cases defined in the problem statement\n    test_cases = [\n        {\n            \"params\": (-18.000, 19.200, 280.000, 4.000), # (E0, V0, B0_gpa, B0_prime)\n            \"volumes\": np.array([17.664, 18.432, 18.816, 19.200, 19.584, 19.968, 20.736]),\n            \"energy_offset\": 0.0\n        },\n        {\n            \"params\": (-18.500, 19.000, 300.000, 4.200),\n            \"volumes\": np.array([17.860, 18.240, 18.620, 19.000, 19.380, 19.760, 20.140]),\n            \"energy_offset\": 0.0\n        },\n        {\n            \"params\": (-19.200, 19.100, 250.000, 3.800),\n            \"volumes\": np.array([18.8135, 19.0045, 19.1000, 19.1955, 19.3865]),\n            \"energy_offset\": 5.000\n        }\n    ]\n\n    def birch_murnaghan_eos(V, E0, V0, B0_gpa, B0_prime):\n        \"\"\"\n        Third-order Birch-Murnaghan Equation of State.\n        \n        Args:\n            V (np.ndarray): Volume(s) in Å^3.\n            E0 (float): Equilibrium energy in eV.\n            V0 (float): Equilibrium volume in Å^3.\n            B0_gpa (float): Bulk modulus in GPa.\n            B0_prime (float): Pressure derivative of the bulk modulus.\n        \n        Returns:\n            np.ndarray: Energy(s) in eV.\n        \"\"\"\n        B0_ev_a3 = B0_gpa * GPA_TO_EV_PER_A3\n        \n        x = (V0 / V)**(2.0/3.0)\n        \n        term1 = ((x - 1)**3) * B0_prime\n        term2 = ((x - 1)**2) * (6 - 4*x)\n        \n        E = E0 + (9 * V0 * B0_ev_a3 / 16) * (term1 + term2)\n        \n        return E\n\n    results = []\n    \n    for case in test_cases:\n        # Unpack the test case data\n        true_params = case[\"params\"]\n        volumes = case[\"volumes\"]\n        energy_offset = case[\"energy_offset\"]\n        \n        # 1. Generate synthetic energy-volume data\n        energies = birch_murnaghan_eos(volumes, *true_params)\n        \n        # Apply energy offset for Test Case 3\n        if energy_offset != 0.0:\n            energies += energy_offset\n            \n        # 2. Set up initial guesses for the fitting procedure\n        min_energy_index = np.argmin(energies)\n        E0_guess = energies[min_energy_index]\n        V0_guess = volumes[min_energy_index]\n        B0_guess = 200.0  # A typical physical value\n        B0_prime_guess = 4.0 # A typical physical value\n        initial_guesses = [E0_guess, V0_guess, B0_guess, B0_prime_guess]\n        \n        # 3. Perform the non-linear least squares fit\n        popt, _ = curve_fit(\n            f=birch_murnaghan_eos,\n            xdata=volumes,\n            ydata=energies,\n            p0=initial_guesses\n        )\n        \n        # 4. Extract the fitted bulk modulus\n        B0_fit_gpa = popt[2]\n        \n        results.append(B0_fit_gpa)\n\n    # Format the results as required\n    formatted_results = [f\"{res:.2f}\" for res in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2462510"}, {"introduction": "Moving from the bulk properties of the lattice to the charge carriers within it, we encounter the concept of effective mass. Electrons and holes moving through a periodic crystal potential do not behave as free particles; their inertia is modified by the lattice. This \"effective mass,\" $m^*$, is a crucial parameter that governs a material's electronic and transport properties. This practice [@problem_id:2462494] will guide you through calculating $m^*$ directly from the curvature of a material's electronic band structure ($E-k$ diagram), forging a direct link between the quantum mechanical description of electrons in a solid and their observable behavior in electronic devices.", "problem": "A single, fully reproducible task is to determine the scalar effective mass of charge carriers in Germanium from one-dimensional band curvatures at the Conduction Band Minimum (CBM) and the Valence Band Maximum (VBM). The effective mass is defined at a band extremum by the curvature of the energy dispersion with respect to the crystal wave vector. Specifically, for a one-dimensional dispersion along a fixed direction, with energy as a function of wave-vector offset $k$ from the extremum point, the electron effective mass $m_e^\\ast$ and the hole effective mass $m_h^\\ast$ are defined by the curvature relation at the extremum:\n- For electrons (at a minimum), $m_e^\\ast$ is positive and satisfies $m_e^\\ast = \\hbar^2 / E''(k)$.\n- For holes (at a maximum), $m_h^\\ast$ is defined to be positive and satisfies $m_h^\\ast = -\\hbar^2 / E''(k)$.\nHere $E''(k)$ denotes the second derivative of the band energy with respect to $k$, evaluated at the extremum, and $\\hbar$ is the reduced Planck constant.\n\nUse the following physical constants (use exactly these values in your calculations):\n- Reduced Planck constant $\\hbar = 1.054571817\\times 10^{-34}\\ \\mathrm{J\\cdot s}$.\n- Elementary charge $e = 1.602176634\\times 10^{-19}\\ \\mathrm{C}$.\n- Free electron mass $m_e = 9.1093837015\\times 10^{-31}\\ \\mathrm{kg}$.\n\nAll energies $E$ below are given in electronvolts (eV), and all wave-vector offsets $k$ are given in inverse meters $\\mathrm{m}^{-1}$. When converting curvatures from $\\mathrm{eV}$ to $\\mathrm{J}$, use the factor $1\\ \\mathrm{eV} = e\\ \\mathrm{J}$. Compute and report the dimensionless mass ratio $m^\\ast/m_e$ for each case. Express your final answers as decimal numbers rounded to six decimal places. Angles are not involved in this problem.\n\nInput data are provided as discrete samples of the dispersion $E(k)$ near the extremum along a single direction. For each test case, you are given a list of wave-vector offsets $k$ (relative to the extremum point along the chosen direction) and the corresponding energies $E(k)$. Each test case also specifies whether it corresponds to electrons (CBM) or holes (VBM). Your program must infer the curvature $E''(k)$ at the extremum from these samples, apply the definition above, and return $m^\\ast/m_e$.\n\nTest suite (each case is independent):\n- Case $1$ (electron at the CBM near the $L$ valley, longitudinal direction):\n  - $k = \\left[ -2.0\\times 10^{9},\\ -1.0\\times 10^{9},\\ 0.0,\\ 1.0\\times 10^{9},\\ 2.0\\times 10^{9} \\right]\\ \\mathrm{m}^{-1}$\n  - $E(k) = \\left[ 0.755892,\\ 0.683973,\\ 0.660000,\\ 0.683973,\\ 0.755892 \\right]\\ \\mathrm{eV}$\n  - Carrier type: electron.\n- Case $2$ (electron at the CBM near the $L$ valley, transverse direction):\n  - $k = \\left[ -2.0\\times 10^{9},\\ -1.0\\times 10^{9},\\ 0.0,\\ 1.0\\times 10^{9},\\ 2.0\\times 10^{9} \\right]\\ \\mathrm{m}^{-1}$\n  - $E(k) = \\left[ 2.519760,\\ 1.124940,\\ 0.660000,\\ 1.124940,\\ 2.519760 \\right]\\ \\mathrm{eV}$\n  - Carrier type: electron.\n- Case $3$ (heavy hole at the VBM near $\\Gamma$):\n  - $k = \\left[ -2.0\\times 10^{9},\\ -1.0\\times 10^{9},\\ 0.0,\\ 1.0\\times 10^{9},\\ 2.0\\times 10^{9} \\right]\\ \\mathrm{m}^{-1}$\n  - $E(k) = \\left[ -0.544528,\\ -0.136132,\\ 0.0,\\ -0.136132,\\ -0.544528 \\right]\\ \\mathrm{eV}$\n  - Carrier type: hole.\n- Case $4$ (light hole at the VBM near $\\Gamma$, boundary-sized sampling):\n  - $k = \\left[ -1.0\\times 10^{9},\\ 0.0,\\ 1.0\\times 10^{9} \\right]\\ \\mathrm{m}^{-1}$\n  - $E(k) = \\left[ -0.866295,\\ 0.0,\\ -0.866295 \\right]\\ \\mathrm{eV}$\n  - Carrier type: hole.\n- Case $5$ (heavy hole at the VBM near $\\Gamma$, very small $k$ sampling for numerical sensitivity):\n  - $k = \\left[ -1.0\\times 10^{8},\\ -5.0\\times 10^{7},\\ 0.0,\\ 5.0\\times 10^{7},\\ 1.0\\times 10^{8} \\right]\\ \\mathrm{m}^{-1}$\n  - $E(k) = \\left[ -0.00136132,\\ -0.00034033,\\ 0.0,\\ -0.00034033,\\ -0.00136132 \\right]\\ \\mathrm{eV}$\n  - Carrier type: hole.\n\nRequired final output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of Cases $1$ through $5$, where each entry is the rounded value of $m^\\ast/m_e$ to six decimal places, for example: $\\left[ 1.234567,0.123456,0.654321,0.111111,0.222222 \\right]$.", "solution": "The problem is valid. It presents a standard task in solid-state physics: the determination of carrier effective mass from a given energy dispersion relation $E(k)$. The data, constants, and definitions are scientifically sound, consistent, and sufficient for a unique solution.\n\nThe fundamental principle underlying this problem is the effective mass approximation. Near a band extremum, such as a Conduction Band Minimum (CBM) or a Valence Band Maximum (VBM), the energy dispersion $E(k)$ can be approximated by a parabolic function of the wave vector $k$. For a one-dimensional dispersion along a specific direction, with the extremum located at $k=0$, this approximation is given by:\n$$\nE(k) \\approx E(0) + \\frac{1}{2} E''(0) k^2\n$$\nwhere $E(0)$ is the energy at the extremum and $E''(0)$ is the second derivative of the energy with respect to the wave vector, evaluated at $k=0$. This second derivative, or curvature, determines the effective mass $m^\\ast$ of the charge carrier.\n\nThe problem provides the definitions for electron and hole effective masses:\n- For an electron at a CBM (a minimum, so $E''(0) > 0$): $m_e^\\ast = \\frac{\\hbar^2}{E''(0)}$. The positive curvature results in a positive effective mass.\n- For a hole at a VBM (a maximum, so $E''(0) < 0$): $m_h^\\ast = -\\frac{\\hbar^2}{E''(0)}$. The negative curvature, combined with the negative sign in the definition, results in a positive effective mass for the hole, as is conventional.\n\nThe primary task is to determine the value of the curvature, $E''(0)$, from the discrete data points $(k_i, E_i)$ provided for each case. The parabolic nature of the approximation suggests that fitting the data to a quadratic polynomial is the correct and most direct approach. We fit the function $E(k) = ak^2 + bk + c$ to the data. From this functional form, the second derivative is a constant:\n$$\nE'(k) = 2ak + b\n$$\n$$\nE''(k) = 2a\n$$\nTherefore, $E''(0) = 2a$. The coefficient $a$ of the quadratic term directly gives us the required curvature. The `numpy.polyfit` function is employed to perform a least-squares polynomial fit of degree $2$, which robustly determines the coefficient $a$.\n\nA critical aspect of the calculation is the consistent use of units. The input data provides energy $E$ in electronvolts ($\\mathrm{eV}$) and wave vector $k$ in inverse meters ($\\mathrm{m}^{-1}$). The polynomial fit will therefore yield the coefficient $a$ in units of $\\mathrm{eV}\\cdot\\mathrm{m}^2$. The formula for effective mass requires all quantities to be in SI units. The reduced Planck constant, $\\hbar$, is given in $\\mathrm{J}\\cdot\\mathrm{s}$. Thus, the curvature $E''(0) = 2a$ must be converted from units of $\\mathrm{eV}\\cdot\\mathrm{m}^2$ to $\\mathrm{J}\\cdot\\mathrm{m}^2$. This conversion is achieved by multiplying by the elementary charge $e$, using the relation $1\\ \\mathrm{eV} = e\\ \\mathrm{J}$, where $e$ is in Coulombs ($C$).\nThe curvature in SI units is therefore:\n$$\nE''_{\\mathrm{SI}}(0) = 2a \\times e\n$$\n\nThe calculation procedure for each test case is as follows:\n1.  Use `numpy.polyfit` with the given arrays of $k$ and $E(k)$ data and a degree of $2$ to find the coefficients of the best-fit quadratic polynomial, $E(k) = ak^2 + bk + c$. The first returned coefficient is $a$.\n2.  Calculate the second derivative in SI units: $E''_{\\mathrm{SI}}(0) = 2 \\cdot a \\cdot e$. The value of $a$ is in $\\mathrm{eV}\\cdot\\mathrm{m}^2$ and $e$ is in $\\mathrm{C}$.\n3.  Calculate the effective mass $m^\\ast$ in kilograms ($\\mathrm{kg}$) using the appropriate formula based on the carrier type:\n    - If 'electron', $m^\\ast = \\frac{\\hbar^2}{E''_{\\mathrm{SI}}(0)}$.\n    - If 'hole', $m^\\ast = -\\frac{\\hbar^2}{E''_{\\mathrm{SI}}(0)}$.\n4.  Compute the final dimensionless ratio $m^\\ast / m_e$, where $m_e$ is the free electron mass.\n5.  Round the resulting ratio to six decimal places as required.\n\nThis procedure is applied to all five test cases using the specified physical constants:\n- $\\hbar = 1.054571817\\times 10^{-34}\\ \\mathrm{J\\cdot s}$\n- $e = 1.602176634\\times 10^{-19}\\ \\mathrm{C}$\n- $m_e = 9.1093837015\\times 10^{-31}\\ \\mathrm{kg}$\nThe data provided in each case is perfectly quadratic, so the polynomial fit will be exact. Cases $3$ and $5$ describe the same band but with different sampling ranges for $k$, and will correctly yield the same effective mass, demonstrating the robustness of the parabolic approximation in this region.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the dimensionless effective mass ratio m*/m_e for charge carriers\n    in Germanium from band curvature data.\n    \"\"\"\n    # Physical constants as defined in the problem statement\n    HBAR = 1.054571817e-34  # Reduced Planck constant in J.s\n    E_CHARGE = 1.602176634e-19  # Elementary charge in C\n    M_E = 9.1093837015e-31  # Free electron mass in kg\n\n    # Test suite from the problem statement\n    test_cases = [\n        {\n            \"k\": np.array([-2.0e9, -1.0e9, 0.0, 1.0e9, 2.0e9]),\n            \"E\": np.array([0.755892, 0.683973, 0.660000, 0.683973, 0.755892]),\n            \"type\": \"electron\"\n        },\n        {\n            \"k\": np.array([-2.0e9, -1.0e9, 0.0, 1.0e9, 2.0e9]),\n            \"E\": np.array([2.519760, 1.124940, 0.660000, 1.124940, 2.519760]),\n            \"type\": \"electron\"\n        },\n        {\n            \"k\": np.array([-2.0e9, -1.0e9, 0.0, 1.0e9, 2.0e9]),\n            \"E\": np.array([-0.544528, -0.136132, 0.0, -0.136132, -0.544528]),\n            \"type\": \"hole\"\n        },\n        {\n            \"k\": np.array([-1.0e9, 0.0, 1.0e9]),\n            \"E\": np.array([-0.866295, 0.0, -0.866295]),\n            \"type\": \"hole\"\n        },\n        {\n            \"k\": np.array([-1.0e8, -5.0e7, 0.0, 5.0e7, 1.0e8]),\n            \"E\": np.array([-0.00136132, -0.00034033, 0.0, -0.00034033, -0.00136132]),\n            \"type\": \"hole\"\n        }\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        k_data = case[\"k\"]\n        E_data = case[\"E\"]\n        carrier_type = case[\"type\"]\n\n        # Fit a quadratic polynomial E(k) = a*k^2 + b*k + c to the data.\n        # np.polyfit returns coefficients [a, b, c] for the polynomial.\n        coeffs = np.polyfit(k_data, E_data, 2)\n        a_coeff = coeffs[0]  # Coefficient 'a' is in units of eV*m^2\n\n        # The second derivative E''(0) is 2*a.\n        # Convert it to SI units (J*m^2) by multiplying with elementary charge.\n        E_double_prime_si = 2 * a_coeff * E_CHARGE\n        \n        # Calculate the effective mass m_star (in kg).\n        # The formulas are m_e* = hbar^2 / E'' and m_h* = -hbar^2 / E''.\n        hbar_squared = HBAR**2\n        \n        if carrier_type == \"electron\":\n            m_star = hbar_squared / E_double_prime_si\n        elif carrier_type == \"hole\":\n            m_star = -hbar_squared / E_double_prime_si\n        else:\n            # This case should not be reached with the given problem data.\n            raise ValueError(\"Invalid carrier type specified.\")\n\n        # Calculate the dimensionless effective mass ratio m*/m_e\n        mass_ratio = m_star / M_E\n        \n        # Format the result to six decimal places and add to the list.\n        results.append(f\"{mass_ratio:.6f}\")\n\n    # Print the final output in the required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2462494"}, {"introduction": "Beyond static properties and electronic excitations, computational methods allow us to model dynamic processes at the atomic scale, such as diffusion. The rate of ion diffusion in a solid is critical for applications ranging from batteries to fuel cells and is governed by the energy barriers ions must overcome to hop between stable sites. This final practice [@problem_id:2462476] challenges you to build a potential energy model for a lithium ion migrating through a crystal lattice. By assembling a potential from fundamental physical interactions like electrostatics and Pauli repulsion, you will calculate the diffusion barrier, $\\Delta E$, and explore how it is influenced by local geometry and charge, providing insight into the design of high-performance energy materials.", "problem": "A lithium ion in layered lithium cobalt oxide is known to diffuse between two symmetry-equivalent octahedral sites by passing through a triangular oxygen gate that lies in the mid-plane between the sites. In a simplified, symmetry-preserving one-dimensional model, treat the migration coordinate as the scalar position $z$ of the lithium ion along the straight line connecting the two octahedral sites, with the mid-plane at $z=0$ and the octahedral site centers at $z=\\pm z_0$. Three equivalent oxygen ions form an equilateral triangle in the plane $z=0$ with in-plane radius $R$ from the path center. In this geometry, the lithium-to-oxygen distance is the same for all three oxygens and is $r(z)=\\sqrt{R^2+z^2}$.\n\nStarting from the following foundational and widely used ingredients:\n- Classical electrostatics (Coulomb’s law) in vacuum, expressed in electronvolts and ångströms by the constant $k_e = 14.399645478\\,\\mathrm{eV\\cdot \\AA \\cdot e^{-2}}$, so that the electrostatic interaction between point charges $q_1$ and $q_2$ at separation $r$ is $V_C(r)=k_e\\,\\dfrac{q_1 q_2}{r}$.\n- Short-range Pauli repulsion modeled by a Born–Mayer exponential, $V_{BM}(r)=A\\,e^{-r/\\rho}$, where $A$ and $\\rho$ are positive constants.\n- A symmetry-constrained even Taylor expansion for the lattice field energy along the migration coordinate that yields the minimal double-well form with two minima at $z=\\pm z_0$: $U_{lat}(z)=k_{lat}\\,(z^2-z_0^2)^2$, where $k_{lat}>0$.\n\nDefine the total potential energy along the migration path as\n$$\nE(z) \\;=\\; \\sum_{i=1}^{3} \\big[\\, V_{BM}(r_i(z)) \\;+\\; V_C(r_i(z)) \\,\\big] \\;+\\; U_{lat}(z),\n$$\nwhere $r_i(z)=\\sqrt{R^2+z^2}$ for $i=1,2,3$, and $q_{Li}$ and $q_O$ are the effective charges (in units of the elementary charge $e$) assigned to lithium and oxygen, respectively.\n\nYour task is to write a complete, runnable program that:\n- Constructs $E(z)$ from the given definitions.\n- Samples $E(z)$ on a uniform grid of at least $N=20001$ points over the closed interval $z\\in[-z_0,+z_0]$ (inclusive).\n- Computes the diffusion barrier\n$$\n\\Delta E \\;=\\; \\max_{z\\in[-z_0,+z_0]} E(z) \\;-\\; \\min\\big\\{E(-z_0),\\,E(+z_0)\\big\\}.\n$$\nBy symmetry, $E(-z_0)=E(+z_0)$ for the model parameters specified below, but your code should not assume this and must compute the stated expression.\n\nAll distances must be in ångströms ($\\AA$), charges in units of $e$, and energies in electronvolts ($\\mathrm{eV}$). Express each barrier value $\\Delta E$ in $\\mathrm{eV}$, rounded to three decimal places.\n\nTest suite:\n- Case 1 (baseline gate): $R=1.55\\,\\AA$, $z_0=1.10\\,\\AA$, $A=150.0\\,\\mathrm{eV}$, $\\rho=0.45\\,\\AA$, $k_{lat}=0.10\\,\\mathrm{eV/\\AA^4}$, $q_{Li}=+1.0$, $q_O=-1.4$.\n- Case 2 (wider gate): $R=1.80\\,\\AA$, $z_0=1.10\\,\\AA$, $A=150.0\\,\\mathrm{eV}$, $\\rho=0.45\\,\\AA$, $k_{lat}=0.10\\,\\mathrm{eV/\\AA^4}$, $q_{Li}=+1.0$, $q_O=-1.4$.\n- Case 3 (narrow gate): $R=1.35\\,\\AA$, $z_0=1.10\\,\\AA$, $A=150.0\\,\\mathrm{eV}$, $\\rho=0.45\\,\\AA$, $k_{lat}=0.10\\,\\mathrm{eV/\\AA^4}$, $q_{Li}=+1.0$, $q_O=-1.4$.\n- Case 4 (reduced effective charges): $R=1.55\\,\\AA$, $z_0=1.10\\,\\AA$, $A=150.0\\,\\mathrm{eV}$, $\\rho=0.45\\,\\AA$, $k_{lat}=0.10\\,\\mathrm{eV/\\AA^4}$, $q_{Li}=+0.8$, $q_O=-1.2$.\n\nFinal output format:\n- Your program should produce a single line of output containing the four barrier values, as a comma-separated list enclosed in square brackets, for example, $[\\Delta E_1,\\Delta E_2,\\Delta E_3,\\Delta E_4]$, with each $\\Delta E_i$ rounded to three decimal places in $\\mathrm{eV}$ and no additional text.", "solution": "We begin from classical potential energy contributions and a symmetry-mandated lattice field to construct an effective one-dimensional energy profile along the lithium migration path between symmetry-equivalent octahedral sites. The fundamental physical bases are (i) Coulomb’s law for electrostatics, (ii) a Born–Mayer form for short-range repulsion capturing Pauli exclusion, and (iii) an even, minimal-degree Taylor expansion for a double-well lattice field consistent with the two equivalent sites.\n\nGeometry and distances. The three oxygen ions form an equilateral triangle in the plane $z=0$, each at in-plane radius $R$ from the path center. If the lithium is at $(0,0,z)$, the distance to any of the three oxygens is $r(z)=\\sqrt{R^2+z^2}$. Because of this symmetry, the three lithium–oxygen separations are equal for any $z$, so the sum over the three oxygen neighbors simply multiplies a single-pair interaction by $3$.\n\nPairwise interaction terms. For a single lithium–oxygen pair at separation $r$ we use\n$$\nV_{BM}(r)=A\\,e^{-r/\\rho},\\qquad\nV_C(r)=k_e\\,\\frac{q_{Li}\\,q_O}{r},\n$$\nwith $k_e=14.399645478\\,\\mathrm{eV\\cdot \\AA \\cdot e^{-2}}$, charges $q_{Li}$ and $q_O$ in units of the elementary charge $e$, and $r$ in $\\AA$. The Born–Mayer term $V_{BM}$ rises steeply at small $r$ due to Pauli repulsion, and the Coulomb term $V_C$ is attractive for opposite-sign charges ($q_{Li}q_O<0$).\n\nLattice field term. The minimal even polynomial with two equivalent minima at $z=\\pm z_0$ is\n$$\nU_{lat}(z)=k_{lat}\\,\\big(z^2-z_0^2\\big)^2,\n$$\nwith $k_{lat}>0$. This term is zero at $z=\\pm z_0$ and positive elsewhere, representing the crystal field preference for the octahedral sites.\n\nTotal energy profile. Combining the symmetric geometry (three identical $r(z)$ values) and the pairwise interactions with the lattice field yields\n$$\nE(z)=3\\left[A\\,e^{-\\sqrt{R^2+z^2}/\\rho}+k_e\\,\\frac{q_{Li}\\,q_O}{\\sqrt{R^2+z^2}}\\right]+k_{lat}\\,(z^2-z_0^2)^2.\n$$\n\nDiffusion barrier. The diffusion barrier along this path is the difference between the maximum energy encountered and the energy at the initial minimum. Since the two endpoints are symmetry-equivalent, we define\n$$\n\\Delta E=\\max_{z\\in[-z_0,+z_0]}E(z)-\\min\\{E(-z_0),E(+z_0)\\}.\n$$\nThis definition correctly yields $\\Delta E=0$ in the barrierless case where the interior is everywhere lower than or equal to the endpoints, and a positive value when a saddle exists along the path. It does not presume the position of the maximum.\n\nNumerical strategy. The function $E(z)$ is smooth and even, with potential strong gradients near $z=0$ if $R$ is small (narrow gate) due to the exponential $V_{BM}$. To robustly locate the maximum without resorting to derivative-based methods, we discretize the interval $[-z_0,+z_0]$ uniformly with $N\\ge 20001$ points (including endpoints), evaluate $E(z)$ at each point, and take the maximum. The endpoint energy is obtained by evaluating $E$ at $z=\\pm z_0$ directly; by symmetry they are equal, but the program computes both and takes their minimum to preserve generality. Finally, we round the barrier value to three decimal places as required.\n\nAlgorithmic steps for each test case:\n1. Read parameters $R$, $z_0$, $A$, $\\rho$, $k_{lat}$, $q_{Li}$, $q_O$.\n2. Construct a uniform grid $z_j=-z_0+j\\,\\Delta z$ for $j=0,\\dots,N-1$ with $N=20001$ and $\\Delta z=2z_0/(N-1)$.\n3. For each $z_j$, compute $r_j=\\sqrt{R^2+z_j^2}$.\n4. Compute $E_j=3\\left[A\\,e^{-r_j/\\rho}+k_e\\,\\dfrac{q_{Li}\\,q_O}{r_j}\\right]+k_{lat}\\,(z_j^2-z_0^2)^2$.\n5. Set $E_{max}=\\max_j E_j$ and $E_{end}=\\min(E(z=-z_0),E(z=+z_0))$.\n6. Compute $\\Delta E=\\max\\{E_{max}-E_{end},\\,0\\}$, where the outer maximum prevents negative values due to floating-point roundoff in barrierless cases.\n7. Output the list $[\\Delta E_1,\\Delta E_2,\\Delta E_3,\\Delta E_4]$ rounded to three decimals in $\\mathrm{eV}$.\n\nPhysical interpretation of test cases:\n- Case 1 sets a baseline gate radius and moderate lattice anchoring, producing a finite barrier primarily controlled by the competition between Born–Mayer repulsion (raising energy near the gate) and Coulomb attraction (lowering energy as the ion approaches the gate).\n- Case 2 increases $R$ (a wider gate), which reduces short-range repulsion near $z=0$, possibly eliminating the barrier so that the maximum occurs at the endpoints, yielding $\\Delta E=0$.\n- Case 3 decreases $R$ (a narrower gate), steepening the repulsive wall and increasing the barrier.\n- Case 4 reduces the magnitude of the effective charges, weakening Coulomb stabilization and increasing the barrier relative to Case 1 for the same gate geometry.\n\nThis pipeline implements a first-principles-informed, symmetry-consistent effective model suitable for advanced undergraduate computational exploration of diffusion barriers in layered oxides, while remaining fully deterministic and testable.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\nKE_EV_ANG_PER_E2 = 14.399645478  # Coulomb constant in eV*Angstrom per e^2\n\ndef energy_profile(z, R, z0, A, rho, k_lat, q_li, q_o):\n    \"\"\"\n    Compute total energy E(z) for arrays of z using the simplified gate model.\n    Units:\n      - distances in Angstrom\n      - charges in e\n      - energies in eV\n    \"\"\"\n    r = np.sqrt(R*R + z*z)  # same for all three oxygens\n    pair_rep = A * np.exp(-r / rho)\n    pair_coul = KE_EV_ANG_PER_E2 * (q_li * q_o) / r\n    pair_sum = pair_rep + pair_coul\n    u_lat = k_lat * (z*z - z0*z0)**2\n    E = 3.0 * pair_sum + u_lat\n    return E\n\ndef diffusion_barrier(params, n_grid=20001):\n    \"\"\"\n    Compute the diffusion barrier Delta E for a given parameter set.\n    params: (R, z0, A, rho, k_lat, q_li, q_o)\n    \"\"\"\n    R, z0, A, rho, k_lat, q_li, q_o = params\n    # Grid from -z0 to +z0 inclusive\n    z = np.linspace(-z0, z0, n_grid)\n    E = energy_profile(z, R, z0, A, rho, k_lat, q_li, q_o)\n    E_max = float(np.max(E))\n    # Endpoint energies (explicitly evaluate to avoid any subtlety due to grid)\n    E_minus = float(energy_profile(np.array([-z0]), R, z0, A, rho, k_lat, q_li, q_o)[0])\n    E_plus = float(energy_profile(np.array([+z0]), R, z0, A, rho, k_lat, q_li, q_o)[0])\n    E_end = min(E_minus, E_plus)\n    barrier = max(E_max - E_end, 0.0)  # guard against tiny negative due to roundoff\n    return barrier\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each tuple: (R [A], z0 [A], A [eV], rho [A], k_lat [eV/A^4], q_Li [e], q_O [e])\n    test_cases = [\n        (1.55, 1.10, 150.0, 0.45, 0.10, +1.0, -1.4),  # Case 1\n        (1.80, 1.10, 150.0, 0.45, 0.10, +1.0, -1.4),  # Case 2\n        (1.35, 1.10, 150.0, 0.45, 0.10, +1.0, -1.4),  # Case 3\n        (1.55, 1.10, 150.0, 0.45, 0.10, +0.8, -1.2),  # Case 4\n    ]\n\n    results = []\n    for case in test_cases:\n        barrier = diffusion_barrier(case, n_grid=20001)\n        # Round to three decimals as specified\n        results.append(f\"{barrier:.3f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2462476"}]}