{"hands_on_practices": [{"introduction": "To make reliable predictions about materials, we must first understand the potential sources of error in our calculations. One such artifact, the Basis Set Superposition Error (BSSE), can lead to an artificial overestimation of binding energies, particularly in systems held together by weak interactions. This practice [@problem_id:2452947] provides a concrete exercise in identifying and correcting for BSSE using the standard Counterpoise method, allowing you to see firsthand how the choice of basis set impacts computational accuracy and how to obtain more physically meaningful results.", "problem": "You are given the task of computing the Basis Set Superposition Error (BSSE) correction to the lattice energy per atom of a face-centered cubic xenon crystal using the Counterpoise (CP) method. The BSSE is a consequence of incomplete one-electron basis sets in quantum chemistry and leads to an overestimation of binding when fragments benefit from each other's basis functions. For a crystal treated as a periodic or cluster system, a per-atom BSSE can be defined by comparing the energy of an isolated atom computed in its own basis to the energy of the same atom computed in the presence of ghost basis functions that mimic the local crystalline environment. Define the lattice energy per atom as $U_{\\mathrm{latt}} = E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} - E_{\\mathrm{atom}}^{(\\mathrm{mono})}$, where $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})}$ is the computed total energy per atom in the crystal and $E_{\\mathrm{atom}}^{(\\mathrm{mono})}$ is the energy of an isolated atom in the same monomer basis. Define the BSSE per atom as $\\Delta_{\\mathrm{BSSE}} = E_{\\mathrm{atom}}^{(\\mathrm{mono})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})}$, where $E_{\\mathrm{atom}}^{(\\mathrm{ghost})}$ is the energy of an isolated atom computed in the presence of ghost basis functions placed at the positions of neighboring atoms. The Counterpoise-corrected lattice energy per atom is $U_{\\mathrm{CP}} = U_{\\mathrm{latt}} + \\Delta_{\\mathrm{BSSE}} = E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})}$. All energies are to be treated per atom.\n\nCompute, for each test case below, the BSSE per atom $\\Delta_{\\mathrm{BSSE}}$ and the Counterpoise-corrected lattice energy per atom $U_{\\mathrm{CP}}$. Express all answers in $\\mathrm{kJ\\,mol^{-1}}$, rounded to three decimals.\n\nTest suite (all values are per atom and given in $\\mathrm{kJ\\,mol^{-1}}$):\n- Case A (coarse basis): $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} = -15.0$, $E_{\\mathrm{atom}}^{(\\mathrm{mono})} = 0.0$, $E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = -2.5$.\n- Case B (improved basis): $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} = -13.2$, $E_{\\mathrm{atom}}^{(\\mathrm{mono})} = 0.0$, $E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = -0.6$.\n- Case C (near-complete basis): $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} = -12.8$, $E_{\\mathrm{atom}}^{(\\mathrm{mono})} = 0.0$, $E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = 0.0$.\n- Case D (numerical edge): $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} = -12.0$, $E_{\\mathrm{atom}}^{(\\mathrm{mono})} = 0.0$, $E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = 0.05$.\n\nYour program should produce a single line of output containing the results as a comma-separated list of pairs, each pair formatted as $[\\Delta_{\\mathrm{BSSE}},U_{\\mathrm{CP}}]$, and the full list enclosed in square brackets. For example, the output format must be like $[[x_1,y_1],[x_2,y_2],[x_3,y_3],[x_4,y_4]]$, where each $x_i$ and $y_i$ are rounded to three decimals in $\\mathrm{kJ\\,mol^{-1}}$ and no units or additional text appear in the output.", "solution": "The problem presented is a straightforward application of the Counterpoise (CP) correction method for the Basis Set Superposition Error (BSSE), a well-defined and standard procedure in computational quantum chemistry. The premise is sound and all required data are provided. We will proceed with the analysis.\n\nThe objective is to compute the BSSE per atom, denoted as $\\Delta_{\\mathrm{BSSE}}$, and the Counterpoise-corrected lattice energy per atom, $U_{\\mathrm{CP}}$, for a xenon crystal under different computational conditions (basis sets).\n\nThe fundamental definitions provided are as follows:\nThe uncorrected lattice energy per atom, $U_{\\mathrm{latt}}$, is defined as the difference between the total energy per atom calculated for the periodic crystal, $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})}$, and the energy of an isolated atom calculated in its own basis set (a monomer calculation), $E_{\\mathrm{atom}}^{(\\mathrm{mono})}$.\n$$U_{\\mathrm{latt}} = E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} - E_{\\mathrm{atom}}^{(\\mathrm{mono})}$$\nBy convention, the energy of the isolated monomer is often set as the reference energy, so $E_{\\mathrm{atom}}^{(\\mathrm{mono})} = 0$.\n\nThe BSSE arises from the use of incomplete (finite) one-electron basis sets. In a crystal or a dimer calculation, an atom can \"borrow\" basis functions from neighboring atoms to lower its a-posteriori energy, an artifact that creates an artificial, non-physical stabilization. This effect leads to an overestimation of the binding energy. The magnitude of this error is the BSSE.\n\nThe BSSE per atom, $\\Delta_{\\mathrm{BSSE}}$, is quantified by calculating the energy of a single atom in the presence of \"ghost\" basis functionsâ€”that is, basis functions centered at the positions of neighboring atoms but without the corresponding nuclei or electrons. This energy is denoted $E_{\\mathrm{atom}}^{(\\mathrm{ghost})}$. The BSSE is the energy difference:\n$$\\Delta_{\\mathrm{BSSE}} = E_{\\mathrm{atom}}^{(\\mathrm{mono})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})}$$\nSince the ghost calculation provides more variational flexibility, typically $E_{\\mathrm{atom}}^{(\\mathrm{ghost})} \\le E_{\\mathrm{atom}}^{(\\mathrm{mono})}$, which makes $\\Delta_{\\mathrm{BSSE}} \\ge 0$. A positive value indicates the degree of artificial stabilization. A value of $\\Delta_{\\mathrm{BSSE}} \\approx 0$ signifies a near-complete basis set where the error is negligible. A negative $\\Delta_{\\mathrm{BSSE}}$ is unphysical but can arise from numerical noise or inconsistencies in the computational protocol.\n\nThe Counterpoise-corrected lattice energy, $U_{\\mathrm{CP}}$, is obtained by adding the BSSE to the uncorrected lattice energy:\n$$U_{\\mathrm{CP}} = U_{\\mathrm{latt}} + \\Delta_{\\mathrm{BSSE}}$$\nSubstituting the definitions for $U_{\\mathrm{latt}}$ and $\\Delta_{\\mathrm{BSSE}}$ yields a more direct formula:\n$$U_{\\mathrm{CP}} = (E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} - E_{\\mathrm{atom}}^{(\\mathrm{mono})}) + (E_{\\mathrm{atom}}^{(\\mathrm{mono})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})}) = E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})}$$\nThis corrected energy represents a more physically meaningful lattice energy by canceling the artificial stabilization present in both the crystal and ghost calculations.\n\nWe will now apply these formulae to the four cases provided. All energies are in units of $\\mathrm{kJ\\,mol^{-1}}$.\n\n**Case A (coarse basis):**\nGiven: $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} = -15.0$, $E_{\\mathrm{atom}}^{(\\mathrm{mono})} = 0.0$, $E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = -2.5$.\n1. Calculate $\\Delta_{\\mathrm{BSSE}}$:\n$$\\Delta_{\\mathrm{BSSE}} = E_{\\mathrm{atom}}^{(\\mathrm{mono})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = 0.0 - (-2.5) = 2.5 \\, \\mathrm{kJ\\,mol^{-1}}$$\n2. Calculate $U_{\\mathrm{CP}}$:\n$$U_{\\mathrm{CP}} = E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = -15.0 - (-2.5) = -12.5 \\, \\mathrm{kJ\\,mol^{-1}}$$\nThe result pair is $[2.500, -12.500]$.\n\n**Case B (improved basis):**\nGiven: $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} = -13.2$, $E_{\\mathrm{atom}}^{(\\mathrm{mono})} = 0.0$, $E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = -0.6$.\n1. Calculate $\\Delta_{\\mathrm{BSSE}}$:\n$$\\Delta_{\\mathrm{BSSE}} = E_{\\mathrm{atom}}^{(\\mathrm{mono})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = 0.0 - (-0.6) = 0.6 \\, \\mathrm{kJ\\,mol^{-1}}$$\n2. Calculate $U_{\\mathrm{CP}}$:\n$$U_{\\mathrm{CP}} = E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = -13.2 - (-0.6) = -12.6 \\, \\mathrm{kJ\\,mol^{-1}}$$\nThe result pair is $[0.600, -12.600]$.\n\n**Case C (near-complete basis):**\nGiven: $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} = -12.8$, $E_{\\mathrm{atom}}^{(\\mathrm{mono})} = 0.0$, $E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = 0.0$.\n1. Calculate $\\Delta_{\\mathrm{BSSE}}$:\n$$\\Delta_{\\mathrm{BSSE}} = E_{\\mathrm{atom}}^{(\\mathrm{mono})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = 0.0 - 0.0 = 0.0 \\, \\mathrm{kJ\\,mol^{-1}}$$\n2. Calculate $U_{\\mathrm{CP}}$:\n$$U_{\\mathrm{CP}} = E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = -12.8 - 0.0 = -12.8 \\, \\mathrm{kJ\\,mol^{-1}}$$\nThe result pair is $[0.000, -12.800]$.\n\n**Case D (numerical edge):**\nGiven: $E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} = -12.0$, $E_{\\mathrm{atom}}^{(\\mathrm{mono})} = 0.0$, $E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = 0.05$.\n1. Calculate $\\Delta_{\\mathrm{BSSE}}$:\n$$\\Delta_{\\mathrm{BSSE}} = E_{\\mathrm{atom}}^{(\\mathrm{mono})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = 0.0 - 0.05 = -0.05 \\, \\mathrm{kJ\\,mol^{-1}}$$\n2. Calculate $U_{\\mathrm{CP}}$:\n$$U_{\\mathrm{CP}} = E_{\\mathrm{cryst}}^{(\\mathrm{per\\,atom})} - E_{\\mathrm{atom}}^{(\\mathrm{ghost})} = -12.0 - 0.05 = -12.05 \\, \\mathrm{kJ\\,mol^{-1}}$$\nThe result pair is $[-0.050, -12.050]$.\n\nThe calculations are complete. The results demonstrate the expected trend: as the basis set quality improves from coarse (Case A) to near-complete (Case C), the magnitude of the BSSE decreases significantly, and the corrected lattice energy converges. Case D represents a scenario where numerical noise or slight inconsistencies in the computational setup lead to a small, unphysical positive energy for the ghost calculation, resulting in a negative BSSE. This is a practical artifact that can be encountered in real calculations. The following program will codify this analysis.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the Basis Set Superposition Error (BSSE) per atom and the\n    Counterpoise-corrected lattice energy per atom for given test cases.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each tuple contains (E_cryst_per_atom, E_atom_mono, E_atom_ghost) in kJ/mol.\n    test_cases = [\n        # Case A (coarse basis)\n        (-15.0, 0.0, -2.5),\n        # Case B (improved basis)\n        (-13.2, 0.0, -0.6),\n        # Case C (near-complete basis)\n        (-12.8, 0.0, 0.0),\n        # Case D (numerical edge)\n        (-12.0, 0.0, 0.05),\n    ]\n\n    results = []\n    for case in test_cases:\n        e_cryst_per_atom, e_atom_mono, e_atom_ghost = case\n\n        # Calculate BSSE per atom (delta_BSSE).\n        # delta_BSSE = E_atom^(mono) - E_atom^(ghost)\n        delta_bsse = e_atom_mono - e_atom_ghost\n\n        # Calculate Counterpoise-corrected lattice energy per atom (U_CP).\n        # U_CP = E_cryst^(per atom) - E_atom^(ghost)\n        u_cp = e_cryst_per_atom - e_atom_ghost\n\n        # Round results to three decimal places.\n        # Note: The problem requires a specific string format for the final output, not a list of floats.\n        # Storing the pair of floats for later formatting.\n        results.append((delta_bsse, u_cp))\n\n    # Format the final output string as required: [[x1,y1],[x2,y2],...]\n    # Each number must be formatted to three decimal places.\n    output_pairs = []\n    for delta, u in results:\n        # Format each pair as a string \"[delta_val,u_val]\"\n        pair_str = f\"[{delta:.3f},{u:.3f}]\"\n        output_pairs.append(pair_str)\n\n    # Join the pairs with commas and enclose in brackets.\n    final_output_str = f\"[{','.join(output_pairs)}]\"\n    \n    # Final print statement in the exact required format.\n    print(final_output_str)\n\nsolve()\n```", "id": "2452947"}, {"introduction": "Predicting the stable crystal structure of a molecule is a central challenge in materials science, with huge implications for fields from pharmaceuticals to electronics. This hands-on practice [@problem_id:2452959] allows you to tackle this challenge directly by building a classical force field model for glycine, a simple amino acid known to exhibit polymorphism. You will calculate the relative stability of its different crystal forms by summing fundamental electrostatic and van der Waals interactions, and critically, investigate how the presence of a solvent environment can shift the energetic balance and favor one polymorph over another.", "problem": "You will model how an explicit shell of water molecules alters the predicted stable polymorph of glycine relative to a gas-phase calculation using a simple, pairwise-additive intermolecular potential. The goal is to determine, for a small set of test conditions, which glycine polymorph is predicted to be the most stable when an explicit, fixed-shell of water molecules is included. Your program must compute the total energy per glycine molecule for each polymorph as the sum of a given gas-phase lattice energy and an explicit-solvent interaction energy, then select the polymorph with the lowest total energy.\n\nAssumptions and physical model:\n- Start from the superposition principle for pair interactions and two well-tested pair potentials:\n  1. Coulomb's law for partial charges: the pair energy between sites with charges $q_i$ and $q_j$ at separation $r$ in a medium with relative permittivity $\\varepsilon_r$ is\n  $$E_{\\mathrm{C}}(r) = k_{\\mathrm{e}} \\frac{q_i q_j}{\\varepsilon_r r},$$\n  where $k_{\\mathrm{e}} = 138.935456$ is in units of $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{nm}\\,e^{-2}$, charges are in elementary charge $e$, and distances are in $\\mathrm{nm}$.\n  2. Lennardâ€“Jones (LJ) $12$â€“$6$ potential for van der Waals interactions between glycine sites and water oxygen sites:\n  $$E_{\\mathrm{LJ}}(r) = 4 \\varepsilon_{ij} \\left[\\left(\\frac{\\sigma_{ij}}{r}\\right)^{12} - \\left(\\frac{\\sigma_{ij}}{r}\\right)^6\\right],$$\n  with Lorentzâ€“Berthelot mixing rules $\\sigma_{ij} = \\frac{\\sigma_i + \\sigma_j}{2}$ and $\\varepsilon_{ij} = \\sqrt{\\varepsilon_i \\varepsilon_j}$. Only glycineâ€“water oxygen LJ interactions are included; hydrogen atoms carry no Lennardâ€“Jones parameters.\n\n- Each glycine molecule is represented by three interaction sites: ammonium ($\\mathrm{NH_3^+}$), methylene ($\\mathrm{CH_2}$), and carboxylate ($\\mathrm{COO^-}$). The partial charges and Lennardâ€“Jones parameters of glycine sites are:\n  - Charges: $q_{\\mathrm{NH3}} = +0.4$, $q_{\\mathrm{CH2}} = 0.0$, $q_{\\mathrm{COO}} = -0.4$ (in units of $e$).\n  - Lennardâ€“Jones parameters (site-wise): $\\sigma_{\\mathrm{NH3}} = 0.325$, $\\sigma_{\\mathrm{CH2}} = 0.340$, $\\sigma_{\\mathrm{COO}} = 0.300$ (all in $\\mathrm{nm}$), and $\\varepsilon_{\\mathrm{NH3}} = 0.1$, $\\varepsilon_{\\mathrm{CH2}} = 0.1$, $\\varepsilon_{\\mathrm{COO}} = 0.1$ (all in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$).\n\n- Water molecules are modeled as rigid three-site particles with partial charges on the oxygen and two hydrogen atoms. Use water site parameters:\n  - Charges: $q_{\\mathrm{O}} = -0.834$, $q_{\\mathrm{H}} = +0.417$ (in units of $e$).\n  - Lennardâ€“Jones for oxygen only: $\\sigma_{\\mathrm{O}} = 0.315075$ and $\\varepsilon_{\\mathrm{O}} = 0.636386$ (in $\\mathrm{nm}$ and $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$). Hydrogen atoms carry no Lennardâ€“Jones parameters.\n  - Include Coulomb interactions for all glycineâ€“water site pairs (glycine sites with water oxygen and hydrogens). Include Lennardâ€“Jones only for glycine sites with water oxygen.\n\n- Total energy per glycine molecule in polymorph $P$ is\n  $$E_{\\mathrm{tot}}^{(P)} = E_{\\mathrm{latt}}^{(P)} + \\sum_{w=1}^{N_{\\mathrm{w}}}\\left[\\sum_{i \\in \\{\\mathrm{NH3, CH2, COO}\\}} \\left(E_{\\mathrm{C}}(r_{i,\\mathrm{O}}^{(P,w)}) + E_{\\mathrm{LJ}}(r_{i,\\mathrm{O}}^{(P,w)}) + E_{\\mathrm{C}}(r_{i,\\mathrm{H1}}^{(P,w)}) + E_{\\mathrm{C}}(r_{i,\\mathrm{H2}}^{(P,w)})\\right)\\right],$$\n  where $E_{\\mathrm{latt}}^{(P)}$ is a provided gas-phase lattice energy per molecule for polymorph $P$, $N_{\\mathrm{w}}$ is the number of water molecules, and $r_{i,s}^{(P,w)}$ are provided fixed distances in $\\mathrm{nm}$ from glycine site $i$ to water site $s \\in \\{\\mathrm{O}, \\mathrm{H1}, \\mathrm{H2}\\}$ for water molecule $w$ in polymorph $P$. Angles do not appear and are not needed. Express all energies in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n\nData provided:\n- Polymorph labels and mapping to indices: $\\mathrm{alpha} \\rightarrow 0$, $\\mathrm{beta} \\rightarrow 1$, $\\mathrm{gamma} \\rightarrow 2$.\n\n- Gas-phase lattice energies per glycine molecule:\n  - $E_{\\mathrm{latt}}^{(\\mathrm{alpha})} = -95.0$,\n  - $E_{\\mathrm{latt}}^{(\\mathrm{beta})} = -92.0$,\n  - $E_{\\mathrm{latt}}^{(\\mathrm{gamma})} = -97.0$ (all in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$).\n\n- Distances from glycine sites to water sites for each polymorph. Distances are given for a single water molecule and are identical for each water in the shell. Distances are ordered as $[\\mathrm{NH3}, \\mathrm{CH2}, \\mathrm{COO}]$.\n  - For $\\mathrm{alpha}$:\n    - $r_{\\mathrm{O}}^{(\\mathrm{alpha})} = [0.30, 0.45, 0.50]$,\n    - $r_{\\mathrm{H1}}^{(\\mathrm{alpha})} = [0.60, 0.60, 0.31]$,\n    - $r_{\\mathrm{H2}}^{(\\mathrm{alpha})} = [0.60, 0.60, 0.33]$.\n  - For $\\mathrm{beta}$:\n    - $r_{\\mathrm{O}}^{(\\mathrm{beta})} = [0.34, 0.45, 0.50]$,\n    - $r_{\\mathrm{H1}}^{(\\mathrm{beta})} = [0.60, 0.60, 0.36]$,\n    - $r_{\\mathrm{H2}}^{(\\mathrm{beta})} = [0.60, 0.60, 0.38]$.\n  - For $\\mathrm{gamma}$:\n    - $r_{\\mathrm{O}}^{(\\mathrm{gamma})} = [0.33, 0.45, 0.50]$,\n    - $r_{\\mathrm{H1}}^{(\\mathrm{gamma})} = [0.60, 0.60, 0.35]$,\n    - $r_{\\mathrm{H2}}^{(\\mathrm{gamma})} = [0.60, 0.60, 0.37]$.\n\n- Relative permittivity $\\varepsilon_r$ is a parameter that uniformly scales Coulomb interactions to allow testing of screening. Lennardâ€“Jones interactions are not scaled by $\\varepsilon_r$.\n\nTask:\n- Implement a program that, for each test case below, computes $E_{\\mathrm{tot}}^{(P)}$ for $P \\in \\{\\mathrm{alpha}, \\mathrm{beta}, \\mathrm{gamma}\\}$ using the definitions above, then returns the index of the polymorph with the lowest energy.\n\nTest suite:\n- Case $1$: $N_{\\mathrm{w}} = 0$, $\\varepsilon_r = 1.0$.\n- Case $2$: $N_{\\mathrm{w}} = 2$, $\\varepsilon_r = 20.0$.\n- Case $3$: $N_{\\mathrm{w}} = 4$, $\\varepsilon_r = 20.0$.\n- Case $4$: $N_{\\mathrm{w}} = 4$, $\\varepsilon_r = 80.0$.\n\nAnswer specification:\n- The final output must be a single line containing the predicted stable polymorph indices for Cases $1$ to $4$ in order, encoded as integers using the mapping $\\mathrm{alpha} \\rightarrow 0$, $\\mathrm{beta} \\rightarrow 1$, $\\mathrm{gamma} \\rightarrow 2$.\n- Final output format: a single line with a comma-separated list enclosed in square brackets, for example $[x_1,x_2,x_3,x_4]$ with each $x_i$ an integer.\n- No other text may be printed.\n\nAll distances must be treated in $\\mathrm{nm}$, all energies in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, and angles are not used. The program must be self-contained and must not read any input.", "solution": "The problem statement is subjected to validation.\n\nStep 1: Extract Givens.\n- **Physical Model**: Pairwise-additive potential energy consisting of Coulomb and Lennard-Jones (LJ) terms.\n- **Coulomb's Law**: $E_{\\mathrm{C}}(r) = k_{\\mathrm{e}} \\frac{q_i q_j}{\\varepsilon_r r}$, with $k_{\\mathrm{e}} = 138.935456 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{nm}\\,e^{-2}$.\n- **Lennard-Jones Potential**: $E_{\\mathrm{LJ}}(r) = 4 \\varepsilon_{ij} \\left[\\left(\\frac{\\sigma_{ij}}{r}\\right)^{12} - \\left(\\frac{\\sigma_{ij}}{r}\\right)^6\\right]$.\n- **Mixing Rules**: Lorentz-Berthelot, $\\sigma_{ij} = \\frac{\\sigma_i + \\sigma_j}{2}$ and $\\varepsilon_{ij} = \\sqrt{\\varepsilon_i \\varepsilon_j}$.\n- **Glycine Model**: Three sites: Ammonium ($\\mathrm{NH_3^+}$), Methylene ($\\mathrm{CH_2}$), Carboxylate ($\\mathrm{COO^-}$).\n- **Glycine Parameters**:\n  - Charges: $q_{\\mathrm{NH3}} = +0.4 \\, e$, $q_{\\mathrm{CH2}} = 0.0 \\, e$, $q_{\\mathrm{COO}} = -0.4 \\, e$.\n  - LJ $\\sigma$: $\\sigma_{\\mathrm{NH3}} = 0.325 \\, \\mathrm{nm}$, $\\sigma_{\\mathrm{CH2}} = 0.340 \\, \\mathrm{nm}$, $\\sigma_{\\mathrm{COO}} = 0.300 \\, \\mathrm{nm}$.\n  - LJ $\\varepsilon$: $\\varepsilon_{\\mathrm{NH3}} = 0.1 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, $\\varepsilon_{\\mathrm{CH2}} = 0.1 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, $\\varepsilon_{\\mathrm{COO}} = 0.1 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n- **Water Model**: Rigid three-site molecule (O, H1, H2).\n- **Water Parameters**:\n  - Charges: $q_{\\mathrm{O}} = -0.834 \\, e$, $q_{\\mathrm{H}} = +0.417 \\, e$.\n  - LJ (Oxygen only): $\\sigma_{\\mathrm{O}} = 0.315075 \\, \\mathrm{nm}$, $\\varepsilon_{\\mathrm{O}} = 0.636386 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n- **Total Energy Formula**: $E_{\\mathrm{tot}}^{(P)} = E_{\\mathrm{latt}}^{(P)} + \\sum_{w=1}^{N_{\\mathrm{w}}}\\left[\\sum_{i \\in \\{\\mathrm{NH3, CH2, COO}\\}} \\left(E_{\\mathrm{C}}(r_{i,\\mathrm{O}}^{(P,w)}) + E_{\\mathrm{LJ}}(r_{i,\\mathrm{O}}^{(P,w)}) + E_{\\mathrm{C}}(r_{i,\\mathrm{H1}}^{(P,w)}) + E_{\\mathrm{C}}(r_{i,\\mathrm{H2}}^{(P,w)})\\right)\\right]$.\n- **Polymorph Indexing**: $\\mathrm{alpha} \\rightarrow 0$, $\\mathrm{beta} \\rightarrow 1$, $\\mathrm{gamma} \\rightarrow 2$.\n- **Lattice Energies**:\n  - $E_{\\mathrm{latt}}^{(\\mathrm{alpha})} = -95.0 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n  - $E_{\\mathrm{latt}}^{(\\mathrm{beta})} = -92.0 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n  - $E_{\\mathrm{latt}}^{(\\mathrm{gamma})} = -97.0 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n- **Distances ($r$ in nm)**:\n  - Alpha: $r_{\\mathrm{O}} = [0.30, 0.45, 0.50]$, $r_{\\mathrm{H1}} = [0.60, 0.60, 0.31]$, $r_{\\mathrm{H2}} = [0.60, 0.60, 0.33]$.\n  - Beta: $r_{\\mathrm{O}} = [0.34, 0.45, 0.50]$, $r_{\\mathrm{H1}} = [0.60, 0.60, 0.36]$, $r_{\\mathrm{H2}} = [0.60, 0.60, 0.38]$.\n  - Gamma: $r_{\\mathrm{O}} = [0.33, 0.45, 0.50]$, $r_{\\mathrm{H1}} = [0.60, 0.60, 0.35]$, $r_{\\mathrm{H2}} = [0.60, 0.60, 0.37]$.\n  (Distances are ordered for glycine sites $[\\mathrm{NH3}, \\mathrm{CH2}, \\mathrm{COO}]$).\n- **Test Suite**:\n  - Case 1: $N_{\\mathrm{w}} = 0$, $\\varepsilon_r = 1.0$.\n  - Case 2: $N_{\\mathrm{w}} = 2$, $\\varepsilon_r = 20.0$.\n  - Case 3: $N_{\\mathrm{w}} = 4$, $\\varepsilon_r = 20.0$.\n  - Case 4: $N_{\\mathrm{w}} = 4$, $\\varepsilon_r = 80.0$.\n- **Output Specification**: Comma-separated list of integer indices for the most stable polymorph in each case, e.g., $[x_1,x_2,x_3,x_4]$.\n\nStep 2: Validate Using Extracted Givens.\nThe problem is evaluated against the validation criteria.\n- **Scientifically Grounded**: The problem utilizes fundamental and widely accepted potential energy functions (Coulomb, Lennard-Jones) which are the basis of classical molecular modeling and force fields. The concept of polymorph stability ranking and the effect of an explicit solvent shell are standard topics in computational chemistry and materials science. The model is a simplification, but it does not violate any scientific principles.\n- **Well-Posed**: The problem asks to find the minimum of a set of three energy values for each of four test cases. All parameters and functions required for the calculation are explicitly defined. The calculation is deterministic, ensuring that a unique, stable, and meaningful solution exists. The structure is clear and leads to a specific, computable result.\n- **Objective**: The problem is specified using precise mathematical formulas, numerical data, and unambiguous instructions. There are no subjective or opinion-based statements.\n\nThe problem is self-contained, consistent, and passes all validity checks. No flaws such as scientific unsoundness, incompleteness, or ambiguity are present.\n\nStep 3: Verdict and Action.\nThe problem is valid. A reasoned solution will be provided.\n\nThe objective is to determine the most stable polymorph of glycine under specified conditions by finding which polymorph, $P \\in \\{\\mathrm{alpha}, \\mathrm{beta}, \\mathrm{gamma}\\}$, possesses the minimum total energy per molecule, $E_{\\mathrm{tot}}^{(P)}$. This total energy is defined as the sum of a gas-phase lattice energy, $E_{\\mathrm{latt}}^{(P)}$, and an explicit-solvent interaction energy.\n\nThe total energy for a polymorph $P$ is given by:\n$$E_{\\mathrm{tot}}^{(P)} = E_{\\mathrm{latt}}^{(P)} + E_{\\mathrm{solv}}^{(P)}$$\nwhere $E_{\\mathrm{solv}}^{(P)}$ is the total energy of interaction between one glycine molecule and the surrounding explicit solvent shell. The problem states that the solvent shell consists of $N_{\\mathrm{w}}$ water molecules, and the interaction geometry is identical for each water molecule. Therefore, the total solvation energy is simply $N_{\\mathrm{w}}$ multiplied by the interaction energy with a single water molecule, $E_{\\mathrm{int},1w}^{(P)}$.\n$$E_{\\mathrm{solv}}^{(P)} = N_{\\mathrm{w}} \\times E_{\\mathrm{int},1w}^{(P)}$$\nIf $N_{\\mathrm{w}}=0$, the solvation energy is $0$.\n\nThe interaction energy with a single water molecule, $E_{\\mathrm{int},1w}^{(P)}$, is the sum of all pairwise interactions between the three sites of the glycine molecule ($i \\in \\{\\mathrm{NH_3^+, CH_2, COO^-}\\}$) and the three sites of the water molecule ($s \\in \\{\\mathrm{O, H1, H2}\\}$). The interaction between any pair of sites is the sum of a Coulombic and a Lennard-Jones term.\n$$E_{\\mathrm{int},1w}^{(P)} = \\sum_{i \\in \\text{gly sites}} \\left[ \\left( E_{\\mathrm{C}}(r_{i,\\mathrm{O}}^{(P)}) + E_{\\mathrm{LJ}}(r_{i,\\mathrm{O}}^{(P)}) \\right) + E_{\\mathrm{C}}(r_{i,\\mathrm{H1}}^{(P)}) + E_{\\mathrm{C}}(r_{i,\\mathrm{H2}}^{(P)}) \\right]$$\nNote that Lennard-Jones interactions are only considered between glycine sites and the water oxygen site.\n\nThe two potential energy functions are:\n1.  **Coulomb energy**: This describes the electrostatic interaction between two point charges $q_i$ and $q_j$ separated by a distance $r$ in a medium with relative permittivity $\\varepsilon_r$.\n    $$E_{\\mathrm{C}}(r) = k_{\\mathrm{e}} \\frac{q_i q_j}{\\varepsilon_r r}$$\n    The constant $k_{\\mathrm{e}}$ is given as $138.935456 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{nm}\\,e^{-2}$. $\\varepsilon_r$ acts as a screening factor for the electrostatic interactions.\n\n2.  **Lennard-Jones energy**: This models van der Waals forces, comprising a short-range repulsive term $(r^{-12})$ and a long-range attractive term $(r^{-6})$.\n    $$E_{\\mathrm{LJ}}(r) = 4 \\varepsilon_{ij} \\left[\\left(\\frac{\\sigma_{ij}}{r}\\right)^{12} - \\left(\\frac{\\sigma_{ij}}{r}\\right)^6\\right]$$\n    The parameters $\\sigma_{ij}$ and $\\varepsilon_{ij}$ for a mixed interaction (glycine site $i$, water site $j$) are obtained using the Lorentz-Berthelot combining rules from the single-site parameters:\n    $$\\sigma_{ij} = \\frac{\\sigma_i + \\sigma_j}{2}$$\n    $$\\varepsilon_{ij} = \\sqrt{\\varepsilon_i \\varepsilon_j}$$\n\nThe algorithm proceeds as follows:\nFor each test case ($N_{\\mathrm{w}}, \\varepsilon_r$):\n1.  Initialize a list of total energies for the three polymorphs, `energies = []`.\n2.  For each polymorph $P \\in \\{\\mathrm{alpha}, \\mathrm{beta}, \\mathrm{gamma}\\}$:\n    a. Calculate the mixed Lennard-Jones parameters $(\\sigma_{i,\\mathrm{O}}, \\varepsilon_{i,\\mathrm{O}})$ for each glycine site $i$ interacting with the water oxygen.\n    b. Calculate the single-water interaction energy $E_{\\mathrm{int},1w}^{(P)}$. This involves summing $3 \\times 3 = 9$ Coulombic terms and $3$ Lennard-Jones terms, using the specific polymorph-dependent distances $r_{i,s}^{(P)}$.\n    c. Calculate the total energy $E_{\\mathrm{tot}}^{(P)} = E_{\\mathrm{latt}}^{(P)} + N_{\\mathrm{w}} \\times E_{\\mathrm{int},1w}^{(P)}$.\n    d. Append $E_{\\mathrm{tot}}^{(P)}$ to the `energies` list.\n3.  Find the index of the minimum value in the `energies` list. This index corresponds to the most stable polymorph for the current test case.\n4.  Store this index.\n\nAfter processing all four test cases, the resulting indices are compiled into a final list.\n\nFor test case 1, with $N_{\\mathrm{w}}=0$, the total energy is simply the lattice energy, $E_{\\mathrm{tot}}^{(P)} = E_{\\mathrm{latt}}^{(P)}$. The stability order is determined by comparing $E_{\\mathrm{latt}}^{(\\mathrm{alpha})} = -95.0$, $E_{\\mathrm{latt}}^{(\\mathrm{beta})} = -92.0$, and $E_{\\mathrm{latt}}^{(\\mathrm{gamma})} = -97.0$. The lowest energy is $-97.0 \\, \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, corresponding to the gamma polymorph (index $2$).\n\nFor the other cases ($N_{\\mathrm{w}} > 0$), the solvation energy term modifies this gas-phase stability order. The magnitude and sign of the solvation energy depend on the specific geometric arrangement of water molecules around the glycine, as captured by the distance matrices for each polymorph, and on the dielectric screening controlled by $\\varepsilon_r$. The program must implement these calculations precisely as specified to determine the shift in relative stability.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the stable polymorph of glycine under different solvation conditions.\n    \"\"\"\n\n    # --- Givens from the problem statement ---\n\n    # Physical constants\n    K_E = 138.935456  # kJ/mol * nm / e^2\n\n    # Glycine parameters\n    GLYCINE_SITES = ['NH3', 'CH2', 'COO']\n    GLYCINE_CHARGES = {'NH3': 0.4, 'CH2': 0.0, 'COO': -0.4}  # in e\n    GLYCINE_SIGMA = {'NH3': 0.325, 'CH2': 0.340, 'COO': 0.300} # in nm\n    GLYCINE_EPSILON = {'NH3': 0.1, 'CH2': 0.1, 'COO': 0.1}   # in kJ/mol\n\n    # Water parameters\n    WATER_SITES = ['O', 'H1', 'H2']\n    WATER_CHARGES = {'O': -0.834, 'H1': 0.417, 'H2': 0.417} # in e\n    WATER_SIGMA = {'O': 0.315075}   # in nm\n    WATER_EPSILON = {'O': 0.636386} # in kJ/mol\n\n    # Polymorph-specific data\n    POLYMORPHS = ['alpha', 'beta', 'gamma']\n    POLYMORPH_INDICES = {name: i for i, name in enumerate(POLYMORPHS)}\n    \n    LATTICE_ENERGIES = { # in kJ/mol\n        'alpha': -95.0,\n        'beta': -92.0,\n        'gamma': -97.0,\n    }\n\n    DISTANCES = { # in nm\n        'alpha': {\n            'O':  np.array([0.30, 0.45, 0.50]), # NH3, CH2, COO\n            'H1': np.array([0.60, 0.60, 0.31]),\n            'H2': np.array([0.60, 0.60, 0.33]),\n        },\n        'beta': {\n            'O':  np.array([0.34, 0.45, 0.50]),\n            'H1': np.array([0.60, 0.60, 0.36]),\n            'H2': np.array([0.60, 0.60, 0.38]),\n        },\n        'gamma': {\n            'O':  np.array([0.33, 0.45, 0.50]),\n            'H1': np.array([0.60, 0.60, 0.35]),\n            'H2': np.array([0.60, 0.60, 0.37]),\n        },\n    }\n\n    # Test suite\n    test_cases = [\n        (0, 1.0),   # Case 1: N_w, epsilon_r\n        (2, 20.0),  # Case 2\n        (4, 20.0),  # Case 3\n        (4, 80.0),  # Case 4\n    ]\n\n    # --- Energy calculation functions ---\n\n    def coulomb_energy(q_i, q_j, r, epsilon_r):\n        return K_E * q_i * q_j / (epsilon_r * r)\n\n    def lj_energy(sigma_ij, epsilon_ij, r):\n        if r == 0:\n            return np.inf\n        s_over_r = sigma_ij / r\n        s_over_r_6 = s_over_r ** 6\n        s_over_r_12 = s_over_r_6 ** 2\n        return 4 * epsilon_ij * (s_over_r_12 - s_over_r_6)\n\n    # --- Pre-calculate mixed LJ parameters ---\n    \n    mixed_lj_params = {}\n    for gly_site in GLYCINE_SITES:\n        sigma_i = GLYCINE_SIGMA[gly_site]\n        epsilon_i = GLYCINE_EPSILON[gly_site]\n        \n        sigma_j = WATER_SIGMA['O']\n        epsilon_j = WATER_EPSILON['O']\n\n        # Lorentz-Berthelot mixing rules\n        sigma_ij = (sigma_i + sigma_j) / 2\n        epsilon_ij = np.sqrt(epsilon_i * epsilon_j)\n        \n        mixed_lj_params[gly_site] = {'sigma': sigma_ij, 'epsilon': epsilon_ij}\n\n    # --- Main calculation loop ---\n\n    results = []\n    for n_w, epsilon_r in test_cases:\n        total_energies = []\n        for poly in POLYMORPHS:\n            \n            # Start with gas-phase lattice energy\n            e_total = LATTICE_ENERGIES[poly]\n            \n            if n_w > 0:\n                e_solv_1w = 0.0 # Interaction energy for one water molecule\n                \n                # Iterate over 3 glycine sites\n                for i, gly_site in enumerate(GLYCINE_SITES):\n                    q_gly = GLYCINE_CHARGES[gly_site]\n                    \n                    # Interaction with water Oxygen\n                    r_o = DISTANCES[poly]['O'][i]\n                    e_solv_1w += coulomb_energy(q_gly, WATER_CHARGES['O'], r_o, epsilon_r)\n                    lj_params = mixed_lj_params[gly_site]\n                    e_solv_1w += lj_energy(lj_params['sigma'], lj_params['epsilon'], r_o)\n                    \n                    # Interaction with water H1\n                    r_h1 = DISTANCES[poly]['H1'][i]\n                    e_solv_1w += coulomb_energy(q_gly, WATER_CHARGES['H1'], r_h1, epsilon_r)\n                    \n                    # Interaction with water H2\n                    r_h2 = DISTANCES[poly]['H2'][i]\n                    e_solv_1w += coulomb_energy(q_gly, WATER_CHARGES['H2'], r_h2, epsilon_r)\n\n                # Total energy is lattice + N_w * single water interaction\n                e_total += n_w * e_solv_1w\n            \n            total_energies.append(e_total)\n            \n        # Find the index of the polymorph with the lowest energy\n        stable_polymorph_index = np.argmin(total_energies)\n        results.append(stable_polymorph_index)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2452959"}, {"introduction": "Modeling the structure of large macromolecules like polymers requires elegant simplifications to make computation feasible. This exercise introduces the powerful concept of coarse-graining, where we represent a complex system with a simpler model that still captures the essential physics. You will construct an energy function for a folding polyethylene chain that balances the favorable cohesive energy of the crystal interior against the energetic penalties of creating folds and free surfaces [@problem_id:2452953]. By minimizing this total energy, you will predict the chain's final, lamellar structure, gaining hands-on experience in the art of building and applying computational models to predict material morphology.", "problem": "You are given a coarse-grained, two-dimensional lattice model for a single polyethylene chain that folds into a lamellar crystal by forming back-and-forth stems of equal length, except possibly the last stem which may be shorter. The chain has a total of $N$ monomeric segments. A lamellar configuration is parameterized by an integer stem length $T$ with $1 \\le T \\le N$. The chain lays out in $S(T)$ stems arranged side-by-side, with $S(T) = \\lceil N/T \\rceil$. For a given $T$, define the list of stem lengths $\\{L_i\\}_{i=1}^{S}$ by $L_i = T$ for $i = 1, \\dots, S-1$, and $L_S = N - T \\lfloor N/T \\rfloor$ if $N$ is not divisible by $T$; otherwise $L_S = T$. The energetics of the configuration are decomposed into four contributions expressed in units of Boltzmann constant times temperature, $k_{\\mathrm{B}} T$:\n\n1. Cohesive energy due to lateral contacts between adjacent stems:\n$$\nE_{\\mathrm{coh}}(T) = - \\varepsilon_{\\mathrm{c}} \\sum_{i=1}^{S-1} \\min(L_i, L_{i+1}),\n$$\nwhere $\\varepsilon_{\\mathrm{c}} > 0$ is the cohesive energy magnitude per lateral contact and each term $\\min(L_i, L_{i+1})$ counts the number of contacting monomer pairs along the interface between stems $i$ and $i+1$.\n\n2. Lateral free-surface energy due to the two outer sides of the lamella:\n$$\nE_{\\mathrm{lat}}(T) = \\gamma_{\\mathrm{lat}} \\times \\begin{cases}\n2 L_1, & \\text{if } S=1, \\\\\nL_1 + L_S, & \\text{if } S \\ge 2,\n\\end{cases}\n$$\nwhere $\\gamma_{\\mathrm{lat}} > 0$ is the energy per unit length of lateral free surface, $L_1$ is the length of the leftmost stem, and $L_S$ is the length of the rightmost stem.\n\n3. Chain fold surface energy at the crystal fold planes:\n$$\nE_{\\mathrm{fold}}(T) = \\gamma_{\\mathrm{fold}} \\times F(T),\n$$\nwhere $\\gamma_{\\mathrm{fold}} > 0$ is the energy per fold surface and $F(T) = S(T) - 1$ is the number of folds.\n\n4. Bending penalty for each tight hairpin fold:\n$$\nE_{\\mathrm{bend}}(T) = e_{\\mathrm{b}} \\times F(T),\n$$\nwhere $e_{\\mathrm{b}} > 0$ is the bending energy per fold.\n\nThe total energy is\n$$\nE_{\\mathrm{tot}}(T) = E_{\\mathrm{coh}}(T) + E_{\\mathrm{lat}}(T) + E_{\\mathrm{fold}}(T) + E_{\\mathrm{bend}}(T).\n$$\n\nFor a given parameter set $(N, \\varepsilon_{\\mathrm{c}}, \\gamma_{\\mathrm{lat}}, \\gamma_{\\mathrm{fold}}, e_{\\mathrm{b}})$, determine the stem length $T_{\\star}$ that minimizes $E_{\\mathrm{tot}}(T)$ over all integers $T$ in the range $1 \\le T \\le N$. In case of ties, select the largest $T$ among those that minimize $E_{\\mathrm{tot}}(T)$. For that optimal configuration, also compute the fraction of the positive penalty energy attributable to the chain fold surface,\n$$\nR_{\\mathrm{fold}} = \\frac{E_{\\mathrm{fold}}(T_{\\star})}{E_{\\mathrm{fold}}(T_{\\star}) + E_{\\mathrm{lat}}(T_{\\star}) + E_{\\mathrm{bend}}(T_{\\star})}.\n$$\n\nAll energies must be expressed in units of $k_{\\mathrm{B}} T$ and $R_{\\mathrm{fold}}$ is dimensionless. Report $E_{\\mathrm{tot}}(T_{\\star})$ as a floating-point number and $R_{\\mathrm{fold}}$ as a floating-point number.\n\nUse the following test suite of parameter sets:\n- Test case 1: $(N, \\varepsilon_{\\mathrm{c}}, \\gamma_{\\mathrm{lat}}, \\gamma_{\\mathrm{fold}}, e_{\\mathrm{b}}) = (100, 0.8, 0.2, 2.0, 1.0)$.\n- Test case 2: $(N, \\varepsilon_{\\mathrm{c}}, \\gamma_{\\mathrm{lat}}, \\gamma_{\\mathrm{fold}}, e_{\\mathrm{b}}) = (120, 1.2, 0.1, 0.5, 0.5)$.\n- Test case 3: $(N, \\varepsilon_{\\mathrm{c}}, \\gamma_{\\mathrm{lat}}, \\gamma_{\\mathrm{fold}}, e_{\\mathrm{b}}) = (30, 0.5, 0.4, 5.0, 2.0)$.\n- Test case 4: $(N, \\varepsilon_{\\mathrm{c}}, \\gamma_{\\mathrm{lat}}, \\gamma_{\\mathrm{fold}}, e_{\\mathrm{b}}) = (37, 0.9, 0.15, 1.5, 0.2)$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case contributes a three-element list in the form $[T_{\\star}, E_{\\mathrm{tot}}(T_{\\star}), R_{\\mathrm{fold}}]$. The floating-point values must be rounded to six decimal places. For example, the overall output must be in the format `[[T1,E1,R1],[T2,E2,R2],[T3,E3,R3],[T4,E4,R4]]`. All energies must be in units of $k_{\\mathrm{B}} T$.", "solution": "The problem requires the determination of an optimal stem length, $T_{\\star}$, for a coarse-grained model of a folded polymer chain, which minimizes the total energy of the system. The total energy is a function of the stem length $T$. Once $T_{\\star}$ is found, two quantities must be computed: the minimum total energy, $E_{\\mathrm{tot}}(T_{\\star})$, and the fraction of the positive energy penalty attributable to chain folds, $R_{\\mathrm{fold}}$.\n\n### Step 1: Problem Validation\n\nFirst, a critical validation of the problem statement is performed.\n\n**Givens:**\n- Total number of monomeric segments: $N$.\n- Stem length parameter: an integer $T$ where $1 \\le T \\le N$.\n- Number of stems: $S(T) = \\lceil N/T \\rceil$.\n- List of stem lengths $\\{L_i\\}_{i=1}^{S}$: $L_i = T$ for $i \\in \\{1, \\dots, S-1\\}$ and $L_S = N - T \\lfloor N/T \\rfloor$ if $N \\pmod T \\neq 0$, otherwise $L_S = T$.\n- Cohesive energy magnitude per contact: $\\varepsilon_{\\mathrm{c}} > 0$.\n- Lateral free-surface energy per unit length: $\\gamma_{\\mathrm{lat}} > 0$.\n- Chain fold surface energy per fold: $\\gamma_{\\mathrm{fold}} > 0$.\n- Bending energy per fold: $e_{\\mathrm{b}} > 0$.\n- Energy contributions:\n  - Cohesive energy: $E_{\\mathrm{coh}}(T) = - \\varepsilon_{\\mathrm{c}} \\sum_{i=1}^{S-1} \\min(L_i, L_{i+1})$.\n  - Lateral surface energy: $E_{\\mathrm{lat}}(T) = \\gamma_{\\mathrm{lat}} \\times (2 L_1)$ if $S=1$, and $\\gamma_{\\mathrm{lat}} \\times (L_1 + L_S)$ if $S \\ge 2$.\n  - Fold surface energy: $E_{\\mathrm{fold}}(T) = \\gamma_{\\mathrm{fold}} \\times F(T)$, where $F(T) = S(T) - 1$.\n  - Bending energy: $E_{\\mathrm{bend}}(T) = e_{\\mathrm{b}} \\times F(T)$.\n- Total energy: $E_{\\mathrm{tot}}(T) = E_{\\mathrm{coh}}(T) + E_{\\mathrm{lat}}(T) + E_{\\mathrm{fold}}(T) + E_{\\mathrm{bend}}(T)$.\n- Optimization Goal: Find $T_{\\star} = \\arg\\max_{T \\in \\mathcal{T}} T$, where $\\mathcal{T} = \\{T \\in [1, N] \\cap \\mathbb{Z} \\mid E_{\\mathrm{tot}}(T) = \\min_{T' \\in [1, N] \\cap \\mathbb{Z}} E_{\\mathrm{tot}}(T') \\}$.\n- Output metrics: $T_{\\star}$, $E_{\\mathrm{tot}}(T_{\\star})$, and $R_{\\mathrm{fold}} = \\frac{E_{\\mathrm{fold}}(T_{\\star})}{E_{\\mathrm{fold}}(T_{\\star}) + E_{\\mathrm{lat}}(T_{\\star}) + E_{\\mathrm{bend}}(T_{\\star})}$.\n\n**Validation Verdict:**\nThe problem is scientifically grounded, describing a simplified but standard coarse-grained model used in polymer physics and computational materials science to study polymer crystallization. The energy terms are physically motivated. The problem is mathematically well-posed; it asks for the minimizer of a function on a finite discrete domain. The tie-breaking rule ensures a unique solution $T_{\\star}$. All terms are precisely defined, and the parameters are given. The problem is objective and free of ambiguity. It is a formalizable and solvable computational problem. Therefore, the problem is **valid**.\n\n### Step 2: Algorithmic Design and Solution Derivation\n\nThe core of the problem is to find the integer $T$ in the range $[1, N]$ that minimizes the function $E_{\\mathrm{tot}}(T)$. A direct search algorithm is appropriate due to the discrete and finite nature of the domain of $T$. The algorithm will iterate through every possible integer value of $T$ from $1$ to $N$, calculate the total energy $E_{\\mathrm{tot}}(T)$ for each, and identify the value $T_{\\star}$ that results in the minimum energy.\n\nFor a given set of parameters $(N, \\varepsilon_{\\mathrm{c}}, \\gamma_{\\mathrm{lat}}, \\gamma_{\\mathrm{fold}}, e_{\\mathrm{b}})$ and a candidate stem length $T \\in [1, N]$, the calculation proceeds as follows:\n\n1.  **Calculate geometric properties**:\n    - The number of stems is $S = \\lceil N/T \\rceil$.\n    - The number of folds is $F = S - 1$. Note that $F$ is zero if $S \\le 1$.\n    - The length of the first stem is $L_1 = T$. This is true for any $T < N$. If $T=N$, then $S=1$ and the single stem has length $L_1=N$.\n    - The length of the last stem, $L_S$, requires careful definition. If $N$ is a multiple of $T$, all $S$ stems have length $T$, so $L_S = T$. If $N$ is not a multiple of $T$, the last stem is shorter, with length $L_S = N \\pmod T$. A single expression for this is $L_S = (N-1) \\pmod T + 1$, or more directly, $L_S = T$ if $N \\pmod T = 0$, and $L_S = N \\pmod T$ otherwise. This is for the case $S \\ge 2$. If $S=1$ (i.e., $T=N$), there is only one stem of length $L_1=N$.\n\n2.  **Calculate energy components**:\n    -   **$E_{\\mathrm{fold}}(T)$ and $E_{\\mathrm{bend}}(T)$**: These energies depend only on the number of folds, $F$.\n        $$E_{\\mathrm{fold}}(T) = \\gamma_{\\mathrm{fold}} \\times (S - 1)$$\n        $$E_{\\mathrm{bend}}(T) = e_{\\mathrm{b}} \\times (S - 1)$$\n        These can be combined as $E_{\\text{fold+bend}}(T) = (\\gamma_{\\mathrm{fold}} + e_{\\mathrm{b}}) \\times (S - 1)$. If $S \\le 1$, these terms are zero.\n\n    -   **$E_{\\mathrm{lat}}(T)$**: The lateral surface energy depends on the number of stems.\n        -   If $S=1$ (which occurs only for $T=N$), the lamella is a single stem of length $N$. The two sides are exposed. $L_1=N$.\n            $$E_{\\mathrm{lat}}(T) = \\gamma_{\\mathrm{lat}} \\times 2N$$\n        -   If $S \\ge 2$, the lamella is formed by multiple stems. The two outer stems, $L_1$ and $L_S$, contribute to the surface. $L_1=T$.\n            $$E_{\\mathrm{lat}}(T) = \\gamma_{\\mathrm{lat}} \\times (T + L_S)$$\n\n    -   **$E_{\\mathrm{coh}}(T)$**: The cohesive energy arises from contacts between adjacent stems.\n        -   If $S \\le 1$, there are no adjacent stems, so the sum is empty and $E_{\\mathrm{coh}}(T) = 0$.\n        -   If $S \\ge 2$, the sum $\\sum_{i=1}^{S-1} \\min(L_i, L_{i+1})$ must be evaluated. The first $S-2$ terms of the sum are $\\min(L_i, L_{i+1}) = \\min(T, T) = T$. The final term is $\\min(L_{S-1}, L_S) = \\min(T, L_S) = L_S$ (since $L_S \\le T$). Thus, the total number of contacts is $(S-2)T + L_S$.\n            $$E_{\\mathrm{coh}}(T) = -\\varepsilon_{\\mathrm{c}} \\left( (S-2)T + L_S \\right)$$\n\n3.  **Calculate total energy**:\n    The total energy $E_{\\mathrm{tot}}(T)$ is the sum of these four components. An efficient implementation would pre-calculate $S$, $F$, and $L_S$ for a given $T$ and then compute each energy term.\n\n4.  **Minimization procedure**:\n    Initialize a variable for minimum energy, $E_{\\min}$, to a value larger than any possible energy (e.g., infinity) and the optimal stem length, $T_{\\star}$, to $0$. Iterate $T$ from $1$ to $N$. In each iteration, calculate $E_{\\mathrm{tot}}(T)$. If $E_{\\mathrm{tot}}(T) \\le E_{\\min}$, update $E_{\\min} = E_{\\mathrm{tot}}(T)$ and $T_{\\star} = T$. The use of $\\le$ correctly implements the tie-breaking rule of selecting the largest $T$.\n\n5.  **Final calculation of $R_{\\mathrm{fold}}$**:\n    After the loop completes, the optimal stem length $T_{\\star}$ and minimum energy $E_{\\mathrm{tot}}(T_{\\star})$ are known. The energy components for this optimal configuration, $E_{\\mathrm{fold}}(T_{\\star})$, $E_{\\mathrm{lat}}(T_{\\star})$, and $E_{\\mathrm{bend}}(T_{\\star})$, must be re-calculated or stored. Then, the ratio $R_{\\mathrm{fold}}$ is computed as:\n    $$R_{\\mathrm{fold}} = \\frac{E_{\\mathrm{fold}}(T_{\\star})}{E_{\\mathrm{fold}}(T_{\\star}) + E_{\\mathrm{lat}}(T_{\\star}) + E_{\\mathrm{bend}}(T_{\\star})}$$\n    As established during validation, the denominator is strictly positive for $N \\ge 1$ given the positive energy parameters.\n\nThis systematic procedure is implemented for each provided test case to obtain the required results. The computed floating-point values for $E_{\\mathrm{tot}}(T_{\\star})$ and $R_{\\mathrm{fold}}$ are then rounded to six decimal places as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the polymer folding problem for a given set of test cases.\n    \"\"\"\n    \n    # Test cases: (N, eps_c, gamma_lat, gamma_fold, e_b)\n    test_cases = [\n        (100, 0.8, 0.2, 2.0, 1.0),\n        (120, 1.2, 0.1, 0.5, 0.5),\n        (30, 0.5, 0.4, 5.0, 2.0),\n        (37, 0.9, 0.15, 1.5, 0.2),\n    ]\n\n    results_list = []\n\n    for N, eps_c, gamma_lat, gamma_fold, e_b in test_cases:\n        min_total_energy = float('inf')\n        optimal_T = 0\n        \n        # Store components for optimal T to calculate R_fold later\n        optimal_energies = {'fold': 0, 'lat': 0, 'bend': 0}\n\n        # Iterate through all possible integer stem lengths T from 1 to N\n        for T in range(1, N + 1):\n            # 1. Calculate geometric properties\n            S = int(np.ceil(N / T)) # Number of stems\n            F = S - 1                 # Number of folds\n\n            # 2. Calculate energy components\n            e_coh = 0.0\n            e_lat = 0.0\n            \n            # Combined fold and bend penalty\n            e_fold = gamma_fold * F\n            e_bend = e_b * F\n\n            if S == 1: # Case where the chain is one single unfolded stem\n                # T must be equal to N for S to be 1\n                e_coh = 0.0\n                e_lat = gamma_lat * 2.0 * N\n            else: # Case with folds (S >= 2)\n                # Calculate length of the last stem, L_S\n                l_s_rem = N % T\n                L_S = T if l_s_rem == 0 else l_s_rem\n                \n                # Cohesive energy\n                # Number of contacts is (S-2)*T + L_S\n                num_contacts = (S - 2) * T + L_S\n                e_coh = -eps_c * num_contacts\n                \n                # Lateral surface energy\n                # L_1 is always T in this case\n                e_lat = gamma_lat * (T + L_S)\n\n            # 3. Calculate total energy\n            e_total = e_coh + e_lat + e_fold + e_bend\n\n            # 4. Minimization and tie-breaking\n            # If current energy is lower, or equal (for larger T), update optimum\n            if e_total = min_total_energy:\n                min_total_energy = e_total\n                optimal_T = T\n                optimal_energies['fold'] = e_fold\n                optimal_energies['lat'] = e_lat\n                optimal_energies['bend'] = e_bend\n        \n        # 5. Final calculation of R_fold\n        penalty_energy_sum = optimal_energies['fold'] + optimal_energies['lat'] + optimal_energies['bend']\n        \n        if penalty_energy_sum == 0:\n            # This case should not occur for N>=1 and positive penalties\n            r_fold = 0.0 \n        else:\n            r_fold = optimal_energies['fold'] / penalty_energy_sum\n\n        # Format results as specified\n        formatted_result = f\"[{optimal_T},{min_total_energy:.6f},{r_fold:.6f}]\"\n        results_list.append(formatted_result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results_list)}]\")\n\nsolve()\n\n```", "id": "2452953"}]}