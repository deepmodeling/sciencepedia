{"hands_on_practices": [{"introduction": "To truly grasp scalar relativistic effects, we must go to their source: the Dirac equation. This first exercise guides you through a foundational calculation, showing how the \"scalar\" part of relativity can be extracted from the full relativistic picture by averaging over spin-orbit states. By applying this to a hydrogen-like model, you will directly compute the stabilization of $s$-orbitals relative to $p$-orbitals and see how this effect grows dramatically with atomic number $Z$ [@problem_id:2461896].", "problem": "Consider a one-electron (hydrogen-like) model for a nucleus of atomic number $Z$, and use it to quantify the scalar relativistic change of the $s$–$p$ energy gap at a given principal quantum number $n$. In this model, the scalar relativistic energy of an orbital is defined as the spin–orbit centroid (degeneracy-weighted average over total angular momentum $j$) of the exact Dirac bound-state energies for that $(n,\\ell)$ term. This centroid corresponds to the scalar part of the relativistic correction that scalar methods such as the Douglas–Kroll–Hess (DKH) transformation and the Zero-Order Regular Approximation (ZORA) are designed to reproduce.\n\nLet $m_e$ be the electron mass, $c$ the speed of light, $\\alpha$ the fine-structure constant, and $\\mathrm{Ry}$ the Rydberg energy. For a hydrogen-like ion, the nonrelativistic (Schrödinger) bound-state energy for principal quantum number $n$ is\n$$\nE_n^{\\mathrm{NR}} = -\\mathrm{Ry}\\,\\frac{Z^2}{n^2}\\,.\n$$\nThe exact Dirac bound-state energy for quantum numbers $(n,\\kappa)$ is\n$$\nE_{n\\kappa}^{\\mathrm{D}} = m_e c^2\\left(1 + \\frac{(Z\\alpha)^2}{\\left(n-|\\kappa| + \\sqrt{\\kappa^2 - (Z\\alpha)^2}\\right)^2}\\right)^{-1/2} - m_e c^2\\,,\n$$\nwhere $\\kappa$ is the relativistic angular quantum number, with $\\kappa=-1$ for $s_{1/2}$, $\\kappa=+1$ for $p_{1/2}$, and $\\kappa=-2$ for $p_{3/2}$.\n\nDefine the scalar relativistic $p$-centroid energy at fixed $n$ as\n$$\nE_{n,p}^{\\mathrm{scalar}} = \\frac{(2j_{1/2}+1)\\,E_{n,\\kappa=+1}^{\\mathrm{D}} + (2j_{3/2}+1)\\,E_{n,\\kappa=-2}^{\\mathrm{D}}}{(2j_{1/2}+1) + (2j_{3/2}+1)} = \\frac{2\\,E_{n,\\kappa=+1}^{\\mathrm{D}} + 4\\,E_{n,\\kappa=-2}^{\\mathrm{D}}}{6}\\,,\n$$\nand similarly the scalar relativistic $s$ energy is $E_{n,s}^{\\mathrm{scalar}}=E_{n,\\kappa=-1}^{\\mathrm{D}}$. In the nonrelativistic hydrogen-like model, all $(n,\\ell)$ states are degenerate, so $E_{n,p}^{\\mathrm{NR}}=E_{n,s}^{\\mathrm{NR}}=E_n^{\\mathrm{NR}}$.\n\nFor a given pair $(Z,n)$ with $n\\ge 2$, define the scalar relativistic change of the $s$–$p$ gap at that $n$ as\n$$\n\\Delta_{\\mathrm{gap}}(Z,n) = \\left(E_{n,p}^{\\mathrm{scalar}} - E_{n,s}^{\\mathrm{scalar}}\\right) - \\left(E_{n,p}^{\\mathrm{NR}} - E_{n,s}^{\\mathrm{NR}}\\right) = E_{n,p}^{\\mathrm{scalar}} - E_{n,s}^{\\mathrm{scalar}}\\,.\n$$\nA positive value of $\\Delta_{\\mathrm{gap}}$ indicates that scalar relativity stabilizes $s$ relative to $p$ and increases the $s$–$p$ gap at fixed $n$.\n\nTasks:\n- Using the definitions above and fundamental constants, compute $\\Delta_{\\mathrm{gap}}(Z,n)$ in electronvolts for each test case specified below.\n- Express every result in $\\mathrm{eV}$, rounded to six decimal places.\n\nTest suite (each item is $(Z,n)$):\n- $(1,2)$\n- $(10,2)$\n- $(47,5)$\n- $(82,6)$\n- $(92,7)$\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list of the five rounded values, enclosed in square brackets, in the same order as the test suite (e.g., $\"[x_1,x_2,x_3,x_4,x_5]\"$).", "solution": "The problem requires the calculation of the scalar relativistic change of the $s$–$p$ energy gap, $\\Delta_{\\mathrm{gap}}(Z,n)$, for a hydrogen-like ion of atomic number $Z$ at a principal quantum number $n$. The problem is well-posed, scientifically grounded in relativistic quantum mechanics, and provides all necessary definitions for a unique solution.\n\nThe fundamental task is to evaluate $\\Delta_{\\mathrm{gap}}(Z,n) = E_{n,p}^{\\mathrm{scalar}} - E_{n,s}^{\\mathrm{scalar}}$, where the non-relativistic energy difference $E_{n,p}^{\\mathrm{NR}} - E_{n,s}^{\\mathrm{NR}}$ is zero due to the degeneracy of orbitals with the same $n$ in the non-relativistic hydrogenic model.\n\nThe scalar relativistic energies are defined as the spin-orbit centroids of the exact Dirac energies. For an $s$-orbital ($\\ell=0$), the only state is $s_{1/2}$ ($j=1/2$), which corresponds to the relativistic quantum number $\\kappa=-1$. Its scalar energy is simply the Dirac energy of this state:\n$$\nE_{n,s}^{\\mathrm{scalar}} = E_{n,\\kappa=-1}^{\\mathrm{D}}\n$$\nFor a $p$-orbital ($\\ell=1$), there are two fine-structure components: $p_{1/2}$ ($j=1/2$, $\\kappa=+1$, degeneracy $2j+1=2$) and $p_{3/2}$ ($j=3/2$, $\\kappa=-2$, degeneracy $2j+1=4$). The scalar $p$-energy is the degeneracy-weighted average of their Dirac energies:\n$$\nE_{n,p}^{\\mathrm{scalar}} = \\frac{2 \\cdot E_{n,\\kappa=+1}^{\\mathrm{D}} + 4 \\cdot E_{n,\\kappa=-2}^{\\mathrm{D}}}{2+4} = \\frac{1}{3}E_{n,\\kappa=+1}^{\\mathrm{D}} + \\frac{2}{3}E_{n,\\kappa=-2}^{\\mathrm{D}}\n$$\nSubstituting these definitions into the expression for $\\Delta_{\\mathrm{gap}}(Z,n)$ yields:\n$$\n\\Delta_{\\mathrm{gap}}(Z,n) = \\left(\\frac{1}{3}E_{n,\\kappa=+1}^{\\mathrm{D}} + \\frac{2}{3}E_{n,\\kappa=-2}^{\\mathrm{D}}\\right) - E_{n,\\kappa=-1}^{\\mathrm{D}}\n$$\nA crucial simplification arises from the structure of the Dirac energy formula:\n$$\nE_{n\\kappa}^{\\mathrm{D}} = m_e c^2\\left( \\left(1 + \\frac{(Z\\alpha)^2}{\\left(n-|\\kappa| + \\sqrt{\\kappa^2 - (Z\\alpha)^2}\\right)^2}\\right)^{-1/2} - 1 \\right)\n$$\nThis formula depends on the quantum number $\\kappa$ only through its absolute value $|\\kappa|$ and its square $\\kappa^2$. The states with $\\kappa=-1$ ($s_{1/2}$) and $\\kappa=+1$ ($p_{1/2}$) both have $|\\kappa|=1$ and $\\kappa^2=1$. Consequently, their Dirac energies are identical for a given $(Z,n)$:\n$$\nE_{n,\\kappa=-1}^{\\mathrm{D}} = E_{n,\\kappa=+1}^{\\mathrm{D}}\n$$\nSubstituting this identity into the equation for $\\Delta_{\\mathrm{gap}}(Z,n)$ provides a more compact and numerically stable formula for the calculation:\n$$\n\\Delta_{\\mathrm{gap}}(Z,n) = \\left(\\frac{1}{3}E_{n,\\kappa=-1}^{\\mathrm{D}} + \\frac{2}{3}E_{n,\\kappa=-2}^{\\mathrm{D}}\\right) - E_{n,\\kappa=-1}^{\\mathrm{D}} = \\frac{2}{3}\\left(E_{n,\\kappa=-2}^{\\mathrm{D}} - E_{n,\\kappa=-1}^{\\mathrm{D}}\\right)\n$$\nThis simplified expression shows that the scalar relativistic $s$-$p$ gap change is precisely two-thirds of the energy difference between the Dirac levels corresponding to $\\kappa=-2$ ($p_{3/2}$) and $\\kappa=-1$ ($s_{1/2}$).\n\nThe computational procedure utilizes this simplified formula. We use the CODATA 2018 recommended values for the necessary physical constants: the electron rest mass energy $m_e c^2 = 510998.95000 \\, \\mathrm{eV}$ and the fine-structure constant $\\alpha = 7.2973525693 \\times 10^{-3}$. For each given pair $(Z,n)$ from the test suite, we implement the following algorithm:\n1.  Define a function to compute $E_{n\\kappa}^{\\mathrm{D}}$ given $Z$, $n$, and $\\kappa$.\n2.  Calculate the Dirac energy for the $s_{1/2}$ state, $E_{n,\\kappa=-1}^{\\mathrm{D}}$, by calling the function with $\\kappa=-1$.\n3.  Calculate the Dirac energy for the $p_{3/2}$ state, $E_{n,\\kappa=-2}^{\\mathrm{D}}$, by calling the function with $\\kappa=-2$.\n4.  Compute the final gap change using $\\Delta_{\\mathrm{gap}}(Z,n) = \\frac{2}{3}(E_{n,\\kappa=-2}^{\\mathrm{D}} - E_{n,\\kappa=-1}^{\\mathrm{D}})$. Since $m_e c^2$ is in units of $\\mathrm{eV}$, the result is directly obtained in $\\mathrm{eV}$.\n5.  Round the final value to six decimal places as specified.\n\nThis procedure is implemented in the following Python program to generate the required results for the test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the scalar relativistic change of the s-p energy gap for hydrogen-like ions.\n    \"\"\"\n\n    # CODATA 2018 recommended values for fundamental constants.\n    # Electron rest mass energy in electronvolts (eV).\n    M_E_C2_EV = 510998.95000\n    # Fine-structure constant (dimensionless).\n    ALPHA = 7.2973525693e-3\n\n    def dirac_energy(Z, n, kappa):\n        \"\"\"\n        Computes the bound-state energy of a hydrogen-like ion using the exact Dirac formula.\n\n        Args:\n            Z (int): The atomic number.\n            n (int): The principal quantum number.\n            kappa (int): The relativistic angular quantum number.\n\n        Returns:\n            float: The Dirac binding energy in electronvolts (eV).\n        \"\"\"\n        za = Z * ALPHA\n        za_sq = za**2\n        kappa_sq = kappa**2\n\n        # The term inside the square root must be positive.\n        # This is guaranteed for Z < 137.\n        denom_sqrt_term = np.sqrt(kappa_sq - za_sq)\n        denominator = n - np.abs(kappa) + denom_sqrt_term\n        \n        fraction = za_sq / (denominator**2)\n        \n        # The main energy expression.\n        energy = M_E_C2_EV * ( (1 + fraction)**(-0.5) - 1 )\n        \n        return energy\n\n    # Test cases as a list of tuples (Z, n).\n    test_cases = [\n        (1, 2),\n        (10, 2),\n        (47, 5),\n        (82, 6),\n        (92, 7),\n    ]\n\n    results = []\n    for Z, n in test_cases:\n        # According to the derived simplified formula in the solution, we only need\n        # the Dirac energies for kappa = -1 (s_1/2) and kappa = -2 (p_3/2).\n        \n        # Energy for kappa = -1 (s_1/2 orbital)\n        e_s12 = dirac_energy(Z=Z, n=n, kappa=-1)\n        \n        # Energy for kappa = -2 (p_3/2 orbital)\n        e_p32 = dirac_energy(Z=Z, n=n, kappa=-2)\n        \n        # Simplified formula for the scalar relativistic gap change:\n        # Delta_gap = (2/3) * (E_p3/2 - E_s1/2)\n        delta_gap = (2.0 / 3.0) * (e_p32 - e_s12)\n        \n        # Format the result to six decimal places, which handles rounding\n        # in the standard 'round half up' manner.\n        results.append(format(delta_gap, '.6f'))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2461896"}, {"introduction": "The physical principles of relativity have profound chemical consequences, altering bond strengths and reactivity. This exercise translates the concept of relativistic orbital stabilization into a practical chemical scenario: the binding of a ligand to a metal ion. By employing a simple two-level Hamiltonian model, you will quantify how including scalar relativistic corrections via the Zeroth-Order Regular Approximation (ZORA) changes the computed binding energy, revealing its importance for comparing elements like copper and silver [@problem_id:2461890].", "problem": "You are asked to quantify scalar relativistic effects on donor–acceptor binding within a minimal molecular orbital model relevant to computational chemistry. Consider the coordination of a single water molecule to a monovalent copper ion and a monovalent silver ion. Model the interaction between a single water lone-pair donor orbital and a single metal-centered acceptor orbital by a two-level Hamiltonian with one off-diagonal coupling. Zeroth-Order Regular Approximation (ZORA) scalar relativistic effects are represented as specified energy shifts of the metal acceptor orbital relative to the nonrelativistic reference. While the Douglas-Kroll-Hess (DKH) method is another scalar relativistic approach, for this problem only the provided Zeroth-Order Regular Approximation (ZORA) shifts are to be used as given.\n\nFor a given metal species, let the donor orbital energy be $\\,\\varepsilon_{d}\\,$, the nonrelativistic acceptor orbital energy be $\\,\\varepsilon_{a}^{\\mathrm{NR}}\\,$, and the off-diagonal interaction (hopping) be $\\,\\beta\\,$. The coupled two-orbital Hamiltonian in the $\\{\\text{donor},\\text{acceptor}\\}$ basis is\n$$\nH \\;=\\;\n\\begin{pmatrix}\n\\varepsilon_{d} & \\beta \\\\\n\\beta & \\varepsilon_{a}\n\\end{pmatrix},\n$$\nwhere, for the nonrelativistic case, $\\,\\varepsilon_{a}=\\varepsilon_{a}^{\\mathrm{NR}}\\,$ and, for the ZORA-corrected case, $\\,\\varepsilon_{a}=\\varepsilon_{a}^{\\mathrm{NR}}+\\Delta\\varepsilon_{\\mathrm{rel}}\\,$ with a specified scalar relativistic shift $\\,\\Delta\\varepsilon_{\\mathrm{rel}}\\,$ (negative values indicate stabilization).\n\nDefine the binding energy for a given metal and scenario (nonrelativistic or ZORA-corrected) as the change in energy of the occupied lower eigenstate of $\\,H\\,$ relative to the uncoupled donor energy, that is, $\\,\\Delta E_{\\mathrm{bind}} = E_{-}-\\varepsilon_{d}\\,$, where $\\,E_{-}\\,$ is the lower eigenvalue of $\\,H\\,$. For each test case below, compute the difference in binding energy between copper and silver,\n$$\n\\Delta\\Delta E_{\\mathrm{bind}}^{(\\cdot)} \\;=\\; \\Delta E_{\\mathrm{bind}}^{(\\mathrm{Cu}^{+},\\cdot)} \\;-\\; \\Delta E_{\\mathrm{bind}}^{(\\mathrm{Ag}^{+},\\cdot)},\n$$\nonce without ZORA (nonrelativistic, using $\\,\\varepsilon_{a}^{\\mathrm{NR}}\\,$) and once with ZORA (using $\\,\\varepsilon_{a}^{\\mathrm{NR}}+\\Delta\\varepsilon_{\\mathrm{rel}}\\,$). All energies must be expressed in electronvolts (eV). Report each result rounded to six decimal places in eV.\n\nTest Suite (each line is one test case; all quantities are in eV):\n- Case 1 (baseline): $\\,\\varepsilon_{d}=-12.60\\,$; for $\\,\\mathrm{Cu}^{+}\\,$: $\\,\\varepsilon_{a}^{\\mathrm{NR}}=-3.00\\,$, $\\,\\Delta\\varepsilon_{\\mathrm{rel}}=-0.30\\,$, $\\,\\beta=1.50\\,$; for $\\,\\mathrm{Ag}^{+}\\,$: $\\,\\varepsilon_{a}^{\\mathrm{NR}}=-2.00\\,$, $\\,\\Delta\\varepsilon_{\\mathrm{rel}}=-0.80\\,$, $\\,\\beta=1.20\\,$.\n- Case 2 (zero coupling boundary): $\\,\\varepsilon_{d}=-12.60\\,$; for $\\,\\mathrm{Cu}^{+}\\,$: $\\,\\varepsilon_{a}^{\\mathrm{NR}}=-3.00\\,$, $\\,\\Delta\\varepsilon_{\\mathrm{rel}}=-0.30\\,$, $\\,\\beta=0.00\\,$; for $\\,\\mathrm{Ag}^{+}\\,$: $\\,\\varepsilon_{a}^{\\mathrm{NR}}=-2.00\\,$, $\\,\\Delta\\varepsilon_{\\mathrm{rel}}=-0.80\\,$, $\\,\\beta=0.00\\,$.\n- Case 3 (small gap, stronger mixing): $\\,\\varepsilon_{d}=-6.00\\,$; for $\\,\\mathrm{Cu}^{+}\\,$: $\\,\\varepsilon_{a}^{\\mathrm{NR}}=-4.00\\,$, $\\,\\Delta\\varepsilon_{\\mathrm{rel}}=-0.50\\,$, $\\,\\beta=0.80\\,$; for $\\,\\mathrm{Ag}^{+}\\,$: $\\,\\varepsilon_{a}^{\\mathrm{NR}}=-3.80\\,$, $\\,\\Delta\\varepsilon_{\\mathrm{rel}}=-1.20\\,$, $\\,\\beta=0.70\\,$.\n- Case 4 (large gap, perturbative regime): $\\,\\varepsilon_{d}=-10.00\\,$; for $\\,\\mathrm{Cu}^{+}\\,$: $\\,\\varepsilon_{a}^{\\mathrm{NR}}=+2.00\\,$, $\\,\\Delta\\varepsilon_{\\mathrm{rel}}=-0.20\\,$, $\\,\\beta=0.50\\,$; for $\\,\\mathrm{Ag}^{+}\\,$: $\\,\\varepsilon_{a}^{\\mathrm{NR}}=+3.00\\,$, $\\,\\Delta\\varepsilon_{\\mathrm{rel}}=-0.60\\,$, $\\,\\beta=0.40\\,$.\n\nRequired final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case contributes a two-element list $[\\Delta\\Delta E_{\\mathrm{bind}}^{\\mathrm{NR}},\\;\\Delta\\Delta E_{\\mathrm{bind}}^{\\mathrm{ZORA}}]$ with both entries rounded to six decimal places in eV. For example: [[x1,y1],[x2,y2],[x3,y3],[x4,y4]].", "solution": "The problem statement has been subjected to rigorous validation and is deemed to be valid. It is scientifically grounded in the principles of molecular orbital theory and computational chemistry, well-posed as a standard eigenvalue problem, and its parameters and objectives are defined with sufficient clarity and precision. There are no contradictions, missing information, or violations of physical laws. We may therefore proceed with the derivation and solution.\n\nThe problem requires a quantitative comparison of binding energies for $\\mathrm{Cu}^{+}$ and $\\mathrm{Ag}^{+}$ complexes within a two-level Hamiltonian model. The central task is to compute the difference in binding energy between these two species, $\\Delta\\Delta E_{\\mathrm{bind}}^{(\\cdot)}$, at both the nonrelativistic ($\\mathrm{NR}$) and scalar-relativistic Zeroth-Order Regular Approximation ($\\mathrm{ZORA}$) levels of theory.\n\nThe system is described by the $2 \\times 2$ Hamiltonian matrix in the basis of a donor orbital (energy $\\varepsilon_{d}$) and an acceptor orbital (energy $\\varepsilon_{a}$):\n$$\nH =\n\\begin{pmatrix}\n\\varepsilon_{d} & \\beta \\\\\n\\beta & \\varepsilon_{a}\n\\end{pmatrix}\n$$\nwhere $\\beta$ is the off-diagonal coupling term. The energy of the acceptor orbital $\\varepsilon_{a}$ depends on the theoretical level:\n- Nonrelativistic case ($\\mathrm{NR}$): $\\varepsilon_{a} = \\varepsilon_{a}^{\\mathrm{NR}}$\n- ZORA-corrected case ($\\mathrm{ZORA}$): $\\varepsilon_{a} = \\varepsilon_{a}^{\\mathrm{NR}} + \\Delta\\varepsilon_{\\mathrm{rel}}$\n\nTo find the energy levels of the interacting system, we must find the eigenvalues of the matrix $H$. The eigenvalues $E$ are the roots of the characteristic equation $\\det(H - E I) = 0$:\n$$\n\\det \\begin{pmatrix}\n\\varepsilon_{d} - E & \\beta \\\\\n\\beta & \\varepsilon_{a} - E\n\\end{pmatrix} = 0\n$$\n$$\n(\\varepsilon_{d} - E)(\\varepsilon_{a} - E) - \\beta^2 = 0\n$$\n$$\nE^2 - (\\varepsilon_{d} + \\varepsilon_{a})E + (\\varepsilon_{d}\\varepsilon_{a} - \\beta^2) = 0\n$$\nSolving this quadratic equation for $E$ yields the two eigenvalues, $E_{+}$ and $E_{-}$:\n$$\nE_{\\pm} = \\frac{(\\varepsilon_{d} + \\varepsilon_{a}) \\pm \\sqrt{(\\varepsilon_{d} + \\varepsilon_{a})^2 - 4(\\varepsilon_{d}\\varepsilon_{a} - \\beta^2)}}{2} = \\frac{\\varepsilon_{d} + \\varepsilon_{a}}{2} \\pm \\frac{1}{2}\\sqrt{(\\varepsilon_{d} - \\varepsilon_{a})^2 + 4\\beta^2}\n$$\nThe problem considers the interaction of an occupied donor orbital with an unoccupied acceptor orbital, forming a chemical bond. The stabilization due to this interaction is associated with the formation of a lower-energy bonding molecular orbital, whose energy is given by the lower eigenvalue, $E_{-}$:\n$$\nE_{-} = \\frac{\\varepsilon_{d} + \\varepsilon_{a}}{2} - \\frac{1}{2}\\sqrt{(\\varepsilon_{d} - \\varepsilon_{a})^2 + 4\\beta^2}\n$$\nThe binding energy, $\\Delta E_{\\mathrm{bind}}$, is defined as the change in energy of this occupied orbital relative to its unperturbed energy, $\\varepsilon_{d}$.\n$$\n\\Delta E_{\\mathrm{bind}} = E_{-} - \\varepsilon_{d} = \\left( \\frac{\\varepsilon_{d} + \\varepsilon_{a}}{2} - \\frac{1}{2}\\sqrt{(\\varepsilon_{d} - \\varepsilon_{a})^2 + 4\\beta^2} \\right) - \\varepsilon_{d}\n$$\nSimplifying this expression, we arrive at the general formula for the binding energy:\n$$\n\\Delta E_{\\mathrm{bind}} = \\frac{\\varepsilon_{a} - \\varepsilon_{d}}{2} - \\frac{1}{2}\\sqrt{(\\varepsilon_{a} - \\varepsilon_{d})^2 + 4\\beta^2}\n$$\nThis formula is applicable to any given set of parameters $\\{\\varepsilon_{d}, \\varepsilon_{a}, \\beta\\}$.\n\nFor each test case and each metal ion ($M \\in \\{\\mathrm{Cu}^{+}, \\mathrm{Ag}^{+}\\}$), we will calculate the binding energy at both theoretical levels.\n1.  Nonrelativistic binding energy, $\\Delta E_{\\mathrm{bind}}^{(M, \\mathrm{NR})}$, is calculated using $\\varepsilon_{a} = \\varepsilon_{a}^{\\mathrm{NR}}$.\n2.  ZORA-corrected binding energy, $\\Delta E_{\\mathrm{bind}}^{(M, \\mathrm{ZORA})}$, is calculated using $\\varepsilon_{a} = \\varepsilon_{a}^{\\mathrm{NR}} + \\Delta\\varepsilon_{\\mathrm{rel}}$.\n\nThe final quantity of interest is the difference between the copper and silver binding energies for each level of theory:\n$$\n\\Delta\\Delta E_{\\mathrm{bind}}^{\\mathrm{NR}} = \\Delta E_{\\mathrm{bind}}^{(\\mathrm{Cu}^{+}, \\mathrm{NR})} - \\Delta E_{\\mathrm{bind}}^{(\\mathrm{Ag}^{+}, \\mathrm{NR})}\n$$\n$$\n\\Delta\\Delta E_{\\mathrm{bind}}^{\\mathrm{ZORA}} = \\Delta E_{\\mathrm{bind}}^{(\\mathrm{Cu}^{+}, \\mathrm{ZORA})} - \\Delta E_{\\mathrm{bind}}^{(\\mathrm{Ag}^{+}, \\mathrm{ZORA})}\n$$\nThis procedure is now implemented numerically for the provided test suite. All energies are in units of electronvolts ($\\mathrm{eV}$), and the final results are rounded to six decimal places as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the computational chemistry problem for all test cases.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"epsilon_d\": -12.60,\n            \"Cu\": {\"epsilon_a_NR\": -3.00, \"delta_epsilon_rel\": -0.30, \"beta\": 1.50},\n            \"Ag\": {\"epsilon_a_NR\": -2.00, \"delta_epsilon_rel\": -0.80, \"beta\": 1.20},\n        },\n        {\n            \"epsilon_d\": -12.60,\n            \"Cu\": {\"epsilon_a_NR\": -3.00, \"delta_epsilon_rel\": -0.30, \"beta\": 0.00},\n            \"Ag\": {\"epsilon_a_NR\": -2.00, \"delta_epsilon_rel\": -0.80, \"beta\": 0.00},\n        },\n        {\n            \"epsilon_d\": -6.00,\n            \"Cu\": {\"epsilon_a_NR\": -4.00, \"delta_epsilon_rel\": -0.50, \"beta\": 0.80},\n            \"Ag\": {\"epsilon_a_NR\": -3.80, \"delta_epsilon_rel\": -1.20, \"beta\": 0.70},\n        },\n        {\n            \"epsilon_d\": -10.00,\n            \"Cu\": {\"epsilon_a_NR\": +2.00, \"delta_epsilon_rel\": -0.20, \"beta\": 0.50},\n            \"Ag\": {\"epsilon_a_NR\": +3.00, \"delta_epsilon_rel\": -0.60, \"beta\": 0.40},\n        },\n    ]\n\n    def compute_binding_energy(epsilon_d, epsilon_a, beta):\n        \"\"\"\n        Calculates the binding energy for a two-level system.\n        Delta_E_bind = (epsilon_a - epsilon_d)/2 - 1/2 * sqrt((epsilon_a - epsilon_d)^2 + 4*beta^2)\n        \"\"\"\n        if beta == 0.0:\n            # If there is no coupling, there is no change in the donor orbital energy.\n            # The formula simplifies to 0, avoiding potential floating point issues.\n            return 0.0\n            \n        diff_eps = epsilon_a - epsilon_d\n        return 0.5 * diff_eps - 0.5 * np.sqrt(diff_eps**2 + 4 * beta**2)\n\n    results = []\n    for case in test_cases:\n        epsilon_d = case[\"epsilon_d\"]\n        params_cu = case[\"Cu\"]\n        params_ag = case[\"Ag\"]\n\n        # --- Nonrelativistic Calculations ---\n        # Copper\n        epsilon_a_cu_nr = params_cu[\"epsilon_a_NR\"]\n        beta_cu = params_cu[\"beta\"]\n        delta_e_bind_cu_nr = compute_binding_energy(epsilon_d, epsilon_a_cu_nr, beta_cu)\n\n        # Silver\n        epsilon_a_ag_nr = params_ag[\"epsilon_a_NR\"]\n        beta_ag = params_ag[\"beta\"]\n        delta_e_bind_ag_nr = compute_binding_energy(epsilon_d, epsilon_a_ag_nr, beta_ag)\n\n        # Difference\n        delta_delta_e_bind_nr = delta_e_bind_cu_nr - delta_e_bind_ag_nr\n\n        # --- ZORA-corrected Calculations ---\n        # Copper\n        epsilon_a_cu_zora = params_cu[\"epsilon_a_NR\"] + params_cu[\"delta_epsilon_rel\"]\n        delta_e_bind_cu_zora = compute_binding_energy(epsilon_d, epsilon_a_cu_zora, beta_cu)\n        \n        # Silver\n        epsilon_a_ag_zora = params_ag[\"epsilon_a_NR\"] + params_ag[\"delta_epsilon_rel\"]\n        delta_e_bind_ag_zora = compute_binding_energy(epsilon_d, epsilon_a_ag_zora, beta_ag)\n        \n        # Difference\n        delta_delta_e_bind_zora = delta_e_bind_cu_zora - delta_e_bind_ag_zora\n        \n        # Round results to six decimal places\n        result_nr = round(delta_delta_e_bind_nr, 6)\n        result_zora = round(delta_delta_e_bind_zora, 6)\n        \n        results.append([result_nr, result_zora])\n\n    # Format the final output string as specified: [[x1,y1],[x2,y2],...]\n    inner_parts = [f\"[{res[0]:.6f},{res[1]:.6f}]\" for res in results]\n    final_output_string = f\"[{','.join(inner_parts)}]\"\n    \n    # Final print statement in the exact required format.\n    print(final_output_string)\n\nsolve()\n```", "id": "2461890"}, {"introduction": "While accuracy is paramount, a computational chemist must always consider the cost of a calculation, as different relativistic methods offer varying levels of accuracy at different computational expense. This exercise uses a realistic cost model to estimate and compare the execution time of popular scalar relativistic methods, including ZORA and DKH, as a function of basis set size $N$ [@problem_id:2461860]. This practice will help you develop an intuition for the practical trade-offs involved in choosing a computational protocol for your research.", "problem": "You are to implement a program that estimates and compares the computational cost, expressed as normalized execution time, of a single point energy (SPE) calculation on lead dioxide ($\\mathrm{PbO}_2$) using three scalar relativistic approximations: Douglas-Kroll-Hess (DKH) of first order (DKH1), Douglas-Kroll-Hess of second order (DKH2), and Zeroth-Order Regular Approximation (ZORA). The comparison must use the same contracted Gaussian basis set size for all three approximations within each test case. The program must adhere to the following cost model, which abstracts the dominant steps in terms of operation counts and their scaling with the total number of basis functions.\n\nDefine the total number of basis functions as $N = N_{\\mathrm{Pb}} + 2 N_{\\mathrm{O}}$, where $N_{\\mathrm{Pb}}$ is the number of contracted Gaussian basis functions on the lead atom and $N_{\\mathrm{O}}$ is the number on each oxygen atom. The total normalized execution time for a given relativistic approximation is the sum of two contributions:\n1. A two-electron (electron-electron) contribution shared by all three approximations with leading-order scaling $T_{2\\mathrm{e}} = \\alpha N^4$.\n2. A one-electron relativistic contribution that depends on the approximation and scales as $T_{\\mathrm{rel}}^{(M)} = k_M N^3$, where $M \\in \\{\\mathrm{DKH1}, \\mathrm{DKH2}, \\mathrm{ZORA}\\}$.\n\nAll times are in dimensionless normalized cost units, and all computations must use the following constants:\n- Two-electron coefficient: $\\alpha = 1 \\times 10^{-6}$.\n- One-electron coefficients: $k_{\\mathrm{DKH1}} = 5 \\times 10^{-6}$, $k_{\\mathrm{DKH2}} = 1 \\times 10^{-5}$, $k_{\\mathrm{ZORA}} = 3 \\times 10^{-6}$.\n\nFor each test case, compute\n$$\nT_M = \\alpha N^4 + k_M N^3,\n$$\nfor $M \\in \\{\\mathrm{DKH1}, \\mathrm{DKH2}, \\mathrm{ZORA}\\}$, with $N = N_{\\mathrm{Pb}} + 2 N_{\\mathrm{O}}$.\n\nUse the following test suite of basis sizes (each test case corresponds to a different basis size, but within a test case, the same $N$ must be used for all three methods):\n- Test case $1$: $N_{\\mathrm{Pb}} = 1$, $N_{\\mathrm{O}} = 1$.\n- Test case $2$: $N_{\\mathrm{Pb}} = 8$, $N_{\\mathrm{O}} = 3$.\n- Test case $3$: $N_{\\mathrm{Pb}} = 60$, $N_{\\mathrm{O}} = 14$.\n- Test case $4$: $N_{\\mathrm{Pb}} = 120$, $N_{\\mathrm{O}} = 30$.\n\nYour program must output a single line containing a comma-separated list enclosed in square brackets. The output must be a list of sublists, one sublist per test case, each sublist ordered as $\\left[T_{\\mathrm{DKH1}}, T_{\\mathrm{DKH2}}, T_{\\mathrm{ZORA}}\\right]$. That is, the final output should have the form\n$$\n\\left[\\left[T_{\\mathrm{DKH1}}^{(1)}, T_{\\mathrm{DKH2}}^{(1)}, T_{\\mathrm{ZORA}}^{(1)}\\right], \\left[T_{\\mathrm{DKH1}}^{(2)}, T_{\\mathrm{DKH2}}^{(2)}, T_{\\mathrm{ZORA}}^{(2)}\\right], \\ldots \\right],\n$$\nwhere the superscript indicates the test case index. Each entry must be a floating-point number in normalized cost units (dimensionless).", "solution": "The problem is validated as self-contained, scientifically sound within its defined model, and well-posed. A solution is therefore provided.\n\nThe objective is to compute the normalized computational cost for a single point energy calculation on lead dioxide, $\\mathrm{PbO}_2$, using three distinct scalar relativistic Hamiltonians: first-order Douglas-Kroll-Hess ($\\mathrm{DKH1}$), second-order Douglas-Kroll-Hess ($\\mathrm{DKH2}$), and Zeroth-Order Regular Approximation ($\\mathrm{ZORA}$). The cost is modeled as a function of the total number of basis functions, $N$.\n\nThe governing principles are defined by the provided cost model. The total number of basis functions, $N$, for the $\\mathrm{PbO}_2$ molecule is given by the sum of basis functions on the lead atom, $N_{\\mathrm{Pb}}$, and the two oxygen atoms, $2 N_{\\mathrm{O}}$:\n$$\nN = N_{\\mathrm{Pb}} + 2 N_{\\mathrm{O}}\n$$\nThe total computational cost, $T_M$, for a given relativistic method $M$ is the sum of a method-independent two-electron contribution, $T_{2\\mathrm{e}}$, and a method-dependent one-electron relativistic contribution, $T_{\\mathrm{rel}}^{(M)}$. The scaling dependencies on $N$ are provided as:\n$$\nT_{2\\mathrm{e}} = \\alpha N^4\n$$\n$$\nT_{\\mathrm{rel}}^{(M)} = k_M N^3\n$$\nThus, the total cost for method $M$ is:\n$$\nT_M = \\alpha N^4 + k_M N^3\n$$\nThe constants for this model are specified and must be used exactly:\n- Two-electron coefficient: $\\alpha = 1 \\times 10^{-6}$\n- One-electron coefficients:\n  - $k_{\\mathrm{DKH1}} = 5 \\times 10^{-6}$\n  - $k_{\\mathrm{DKH2}} = 1 \\times 10^{-5}$\n  - $k_{\\mathrm{ZORA}} = 3 \\times 10^{-6}$\n\nThe analysis proceeds by applying these formulas to each of the four specified test cases. For each case, we first determine $N$ and then calculate $T_{\\mathrm{DKH1}}$, $T_{\\mathrm{DKH2}}$, and $T_{\\mathrm{ZORA}}$.\n\nTest Case $1$: $N_{\\mathrm{Pb}} = 1, N_{\\mathrm{O}} = 1$.\n- Total basis functions: $N = 1 + 2(1) = 3$.\n- Costs:\n  - $T_{\\mathrm{DKH1}} = (1 \\times 10^{-6}) \\cdot 3^4 + (5 \\times 10^{-6}) \\cdot 3^3 = 0.000081 + 0.000135 = 0.000216$.\n  - $T_{\\mathrm{DKH2}} = (1 \\times 10^{-6}) \\cdot 3^4 + (1 \\times 10^{-5}) \\cdot 3^3 = 0.000081 + 0.000270 = 0.000351$.\n  - $T_{\\mathrm{ZORA}} = (1 \\times 10^{-6}) \\cdot 3^4 + (3 \\times 10^{-6}) \\cdot 3^3 = 0.000081 + 0.000081 = 0.000162$.\n\nTest Case $2$: $N_{\\mathrm{Pb}} = 8, N_{\\mathrm{O}} = 3$.\n- Total basis functions: $N = 8 + 2(3) = 14$.\n- Costs:\n  - $T_{\\mathrm{DKH1}} = (1 \\times 10^{-6}) \\cdot 14^4 + (5 \\times 10^{-6}) \\cdot 14^3 = 0.038416 + 0.01372 = 0.052136$.\n  - $T_{\\mathrm{DKH2}} = (1 \\times 10^{-6}) \\cdot 14^4 + (1 \\times 10^{-5}) \\cdot 14^3 = 0.038416 + 0.02744 = 0.065856$.\n  - $T_{\\mathrm{ZORA}} = (1 \\times 10^{-6}) \\cdot 14^4 + (3 \\times 10^{-6}) \\cdot 14^3 = 0.038416 + 0.008232 = 0.046648$.\n\nTest Case $3$: $N_{\\mathrm{Pb}} = 60, N_{\\mathrm{O}} = 14$.\n- Total basis functions: $N = 60 + 2(14) = 88$.\n- Costs:\n  - $T_{\\mathrm{DKH1}} = (1 \\times 10^{-6}) \\cdot 88^4 + (5 \\times 10^{-6}) \\cdot 88^3 \\approx 59.969536 + 3.40736 = 63.376896$.\n  - $T_{\\mathrm{DKH2}} = (1 \\times 10^{-6}) \\cdot 88^4 + (1 \\times 10^{-5}) \\cdot 88^3 \\approx 59.969536 + 6.81472 = 66.784256$.\n  - $T_{\\mathrm{ZORA}} = (1 \\times 10^{-6}) \\cdot 88^4 + (3 \\times 10^{-6}) \\cdot 88^3 \\approx 59.969536 + 2.044416 = 62.013952$.\n\nTest Case $4$: $N_{\\mathrm{Pb}} = 120, N_{\\mathrm{O}} = 30$.\n- Total basis functions: $N = 120 + 2(30) = 180$.\n- Costs:\n  - $T_{\\mathrm{DKH1}} = (1 \\times 10^{-6}) \\cdot 180^4 + (5 \\times 10^{-6}) \\cdot 180^3 = 1049.76 + 29.16 = 1078.92$.\n  - $T_{\\mathrm{DKH2}} = (1 \\times 10^{-6}) \\cdot 180^4 + (1 \\times 10^{-5}) \\cdot 180^3 = 1049.76 + 58.32 = 1108.08$.\n  - $T_{\\mathrm{ZORA}} = (1 \\times 10^{-6}) \\cdot 180^4 + (3 \\times 10^{-6}) \\cdot 180^3 = 1049.76 + 17.496 = 1067.256$.\n\nThese calculations demonstrate the dominance of the $N^4$ term as the basis set size increases. For small $N$, the choice of relativistic method has a significant relative impact on the total cost. For large $N$, the two-electron $N^4$ term dominates, and the differences between the relativistic methods become a smaller fraction of the total time, although the absolute time difference still grows. The implementation will systematically apply this procedure to generate the final output.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the estimated computational cost for relativistic\n    single point energy calculations on PbO2 based on a given cost model.\n    \"\"\"\n    # Define constants from the problem statement.\n    alpha = 1e-6\n    k_dkh1 = 5e-6\n    k_dkh2 = 1e-5\n    k_zora = 3e-6\n\n    # Define the test cases from the problem statement as tuples of (N_Pb, N_O).\n    test_cases = [\n        (1, 1),   # Test case 1\n        (8, 3),   # Test case 2\n        (60, 14), # Test case 3\n        (120, 30) # Test case 4\n    ]\n\n    all_results = []\n    \n    for n_pb, n_o in test_cases:\n        # Calculate the total number of basis functions, N.\n        N = n_pb + 2 * n_o\n\n        # Calculate the common two-electron term (alpha * N^4).\n        t_2e = alpha * np.power(N, 4)\n        \n        # Calculate the N^3 term, common to all one-electron contributions.\n        n_cubed = np.power(N, 3)\n\n        # Calculate the total cost for each relativistic method.\n        # Total cost T_M = alpha*N^4 + k_M*N^3\n        t_dkh1 = t_2e + k_dkh1 * n_cubed\n        t_dkh2 = t_2e + k_dkh2 * n_cubed\n        t_zora = t_2e + k_zora * n_cubed\n\n        # Append the sublist of results for the current test case.\n        # The order is [T_DKH1, T_DKH2, T_ZORA].\n        all_results.append([t_dkh1, t_dkh2, t_zora])\n\n    # Format the final output string to match the exact requirement:\n    # [[val1,val2,...],[val1,val2,...],...] without spaces inside sublists.\n    sublist_strings = []\n    for sublist in all_results:\n        # Format each sublist as a string \"[v1,v2,v3]\"\n        formatted_sublist = '[' + ','.join(map(str, sublist)) + ']'\n        sublist_strings.append(formatted_sublist)\n    \n    # Join the sublist strings with commas and wrap in outer brackets.\n    final_output_string = '[' + ','.join(sublist_strings) + ']'\n    \n    print(final_output_string)\n\nsolve()\n```", "id": "2461860"}]}