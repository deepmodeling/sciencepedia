{"hands_on_practices": [{"introduction": "Before studying how a quantum state evolves, it is often crucial to find the system's most stable configuration—its ground state. This exercise introduces the powerful imaginary time propagation method, a numerical technique that filters out excited states to relax an arbitrary initial wave function into the ground state of a given potential. By implementing this, you will gain hands-on experience with a fundamental tool for solving the time-independent Schrödinger equation using a time-dependent approach [@problem_id:2460933].", "problem": "Consider a one-dimensional nonrelativistic quantum particle evolving according to the Time-Dependent Schrödinger Equation (TDSE) in imaginary time. Let $\\hbar$ denote the reduced Planck constant and $m$ denote the particle mass. Work in dimensionless units where $\\hbar=1$ and $m=1$. The Hamiltonian is $\\hat{H}=\\hat{T}+\\hat{V}$ with kinetic energy operator $\\hat{T}=-\\tfrac{1}{2}\\tfrac{\\partial^{2}}{\\partial x^{2}}$ and potential energy $V(x)=a\\,(x^{2}-b^{2})^{2}$, where $a>0$ and $b>0$ are real parameters. Let $\\psi(x,\\tau)$ denote the wave function under imaginary time $\\tau$ defined via $t\\mapsto -i\\,\\tau$, which evolves according to\n$$\n\\frac{\\partial \\psi(x,\\tau)}{\\partial \\tau}=-\\hat{H}\\,\\psi(x,\\tau).\n$$\nOn a finite interval $x\\in[-L/2,L/2)$ discretized by a uniform grid of $N_x$ points with spacing $\\Delta x=L/N_x$, consider the normalized initial condition\n$$\n\\psi(x,0)=\\frac{1}{\\mathcal{N}}\\exp\\!\\left(-\\frac{x^{2}}{2\\sigma^{2}}\\right),\n$$\nwhere $\\sigma>0$ is a given width and $\\mathcal{N}$ is the normalization factor chosen so that $\\int |\\psi(x,0)|^{2}\\,dx=1$. Let $\\Delta \\tau > 0$ denote a fixed imaginary time step. Define the instantaneous energy at imaginary time $\\tau$ as the expectation value\n$$\nE(\\tau)=\\int \\psi^{\\ast}(x,\\tau)\\,\\hat{H}\\,\\psi(x,\\tau)\\,dx,\n$$\nwith the understanding that the numerical implementation must approximate the integral on the grid consistently.\n\nBy evolving $\\psi(x,\\tau)$ under the above imaginary-time dynamics while maintaining normalization, one can approximate the unique normalized ground state $\\psi_{0}(x)$ and its ground-state energy $E_{0}$ for the given potential parameters. For the purpose of this problem, define convergence when the absolute difference in energy between successive monitoring points satisfies\n$$\n|E_{n+1}-E_{n}|  \\varepsilon,\n$$\nfor a prescribed tolerance $\\varepsilon > 0$, where $E_{n}$ is the computed energy after the $n$-th monitoring event. If the convergence criterion is not met within a specified maximum number of propagation steps $N_{\\text{max}}$, stop and report the last computed energy.\n\nUse the following test suite of parameter sets $(a,b,L,N_x,\\Delta \\tau,\\varepsilon,N_{\\text{max}},\\sigma)$, each to be treated independently on the same numerical scheme and initial condition definition above. All quantities are dimensionless.\n\n- Test $1$: $(a,b,L,N_x,\\Delta \\tau,\\varepsilon,N_{\\text{max}},\\sigma)=\\left(1.0,\\,1.0,\\,12.0,\\,512,\\,1.0\\times 10^{-3},\\,1.0\\times 10^{-10},\\,20000,\\,1.0\\right)$.\n- Test $2$: $(a,b,L,N_x,\\Delta \\tau,\\varepsilon,N_{\\text{max}},\\sigma)=\\left(5.0,\\,1.5,\\,20.0,\\,512,\\,5.0\\times 10^{-4},\\,1.0\\times 10^{-10},\\,20000,\\,1.5\\right)$.\n- Test $3$: $(a,b,L,N_x,\\Delta \\tau,\\varepsilon,N_{\\text{max}},\\sigma)=\\left(0.5,\\,0.5,\\,10.0,\\,512,\\,1.0\\times 10^{-3},\\,1.0\\times 10^{-10},\\,20000,\\,0.5\\right)$.\n\nFor each test, produce the numerically converged ground-state energy $E_{0}$ as a real number rounded to six decimal places. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the tests listed above, for example as [$e_{1}$,$e_{2}$,$e_{3}$], where $e_{j}$ denotes the rounded ground-state energy for test $j$.\n\nAll computations must be performed in the stated dimensionless system. Angles do not appear in this problem. The final answers are pure numbers without physical units, and must be reported rounded to six decimal places.", "solution": "The problem as stated is valid. It is a well-posed problem in computational quantum mechanics, grounded in the established principles of the Schrödinger equation and its numerical solution via imaginary time propagation. All parameters are provided, and the objective is clearly defined. We will proceed with the solution.\n\nThe problem requires finding the ground state energy $E_0$ of a one-dimensional quantum system described by the Hamiltonian $\\hat{H}=\\hat{T}+\\hat{V}$, where the kinetic energy operator is $\\hat{T}=-\\tfrac{1}{2}\\tfrac{\\partial^{2}}{\\partial x^{2}}$ and the potential is $V(x)=a\\,(x^{2}-b^{2})^{2}$, working in dimensionless units where $\\hbar=1$ and $m=1$. The method to be used is imaginary time propagation.\n\nThe evolution of the wave function $\\psi(x,\\tau)$ in imaginary time $\\tau$ is governed by the imaginary time Schrödinger equation:\n$$\n\\frac{\\partial \\psi(x,\\tau)}{\\partial \\tau}=-\\hat{H}\\,\\psi(x,\\tau)\n$$\nThe formal solution to this equation over a small time step $\\Delta \\tau$ is given by:\n$$\n\\psi(x, \\tau+\\Delta\\tau) = e^{-\\hat{H}\\Delta\\tau} \\psi(x, \\tau)\n$$\nExpanding $\\psi(x, \\tau)$ in the basis of a complete set of energy eigenstates $\\phi_n(x)$ of the Hamiltonian $\\hat{H}$ with eigenvalues $E_n$, so that $\\psi(x, \\tau)=\\sum_n c_n(\\tau) \\phi_n(x)$, the evolution of the coefficients is $c_n(\\tau) = c_n(0)e^{-E_n\\tau}$. As $\\tau \\to \\infty$, the term corresponding to the lowest energy $E_0$ will dominate, provided the initial state has a non-zero overlap with the ground state, i.e., $c_0(0) \\neq 0$. Thus, $\\psi(x,\\tau)$ will converge to the ground state wave function $\\psi_0(x)$.\n\nThe core of the numerical task is to implement the propagator $e^{-\\hat{H}\\Delta\\tau}$. Since the kinetic operator $\\hat{T}$ and potential operator $\\hat{V}$ do not commute, we cannot simply write $e^{-(\\hat{T}+\\hat{V})\\Delta\\tau} = e^{-\\hat{T}\\Delta\\tau}e^{-\\hat{V}\\Delta\\tau}$. Instead, we use a second-order Trotter-Suzuki decomposition, known as the split-operator or Strang splitting method:\n$$\ne^{-(\\hat{T}+\\hat{V})\\Delta\\tau} \\approx e^{-\\hat{V}\\Delta\\tau/2} e^{-\\hat{T}\\Delta\\tau} e^{-\\hat{V}\\Delta\\tau/2}\n$$\nThis approximation is accurate to order $\\mathcal{O}(\\Delta\\tau^3)$ for a single step, resulting in a globally second-order accurate algorithm.\n\nThe algorithm is implemented on a discretized spatial grid. The domain $x\\in[-L/2,L/2)$ is discretized into $N_x$ points $x_j = -L/2 + j\\Delta x$ for $j=0, 1, \\dots, N_x-1$, with grid spacing $\\Delta x=L/N_x$. The wave function $\\psi(x, \\tau)$ is represented by a vector of its values at these grid points, $\\psi_j(\\tau) = \\psi(x_j, \\tau)$.\n\nThe split-operator propagation step is executed as follows:\n$1$. The potential propagator $e^{-\\hat{V}\\Delta\\tau/2}$ is a local operator in position space. Its application is a simple pointwise multiplication: $\\psi'_j = e^{-V(x_j)\\Delta\\tau/2} \\psi_j$.\n$2$. The kinetic propagator $e^{-\\hat{T}\\Delta\\tau}$ is diagonal in momentum space. We use the Fast Fourier Transform (FFT) to switch to the momentum representation. On the discrete momentum grid $k_m = 2\\pi f_m$, where $f_m$ are the discrete frequencies from `fftfreq`, the kinetic energy operator is $\\hat{T}(k_m) = k_m^2/2$. The propagation step in momentum space is thus a pointwise multiplication:\n$$\n\\tilde{\\psi}''_m = e^{-T(k_m)\\Delta\\tau} \\tilde{\\psi}'_m\n$$\nwhere $\\tilde{\\psi}' = \\mathcal{F}[\\psi']$ is the forward FFT of $\\psi'$. The result is then transformed back to position space using the inverse FFT: $\\psi'' = \\mathcal{F}^{-1}[\\tilde{\\psi}'']$.\n$3$. The second potential half-step is applied: $\\psi_{unnorm, j}(\\tau+\\Delta\\tau) = e^{-V(x_j)\\Delta\\tau/2} \\psi''_j$.\n\nThe imaginary time evolution causes the norm of the wave function to decay. To obtain the ground state eigenfunction, the wave function must be renormalized to unity after each propagation step. The norm is approximated by the sum $\\mathcal{M} = \\left( \\sum_{j=0}^{N_x-1} |\\psi_{unnorm}(x_j)|^2 \\Delta x \\right)^{1/2}$. The normalized wave function for the next step is then $\\psi_j(\\tau+\\Delta\\tau) = \\psi_{unnorm, j}(\\tau+\\Delta\\tau) / \\mathcal{M}$.\n\nThe initial state is the normalized Gaussian $\\psi(x,0)=\\frac{1}{\\mathcal{N}}\\exp\\!\\left(-\\frac{x^{2}}{2\\sigma^{2}}\\right)$. The normalization constant $\\mathcal{N}$ is calculated on the discrete grid to ensure $\\sum_{j=0}^{N_x-1} |\\psi(x_j,0)|^2 \\Delta x = 1$. The chosen Gaussian is an even function, which has non-zero overlap with the ground state of the symmetric double-well potential, ensuring convergence to the correct state.\n\nThe instantaneous energy at time step $n$ is calculated as the expectation value $E_n = \\langle\\psi_n|\\hat{H}|\\psi_n\\rangle$. This is split into kinetic and potential energy contributions.\nThe potential energy is $E_V = \\int \\psi^*(x) V(x) \\psi(x) dx \\approx \\Delta x \\sum_{j} |\\psi_j|^2 V(x_j)$.\nThe kinetic energy is $E_T = \\int \\psi^*(x) (\\hat{T}\\psi(x)) dx$. The action of the kinetic operator, $\\hat{T}\\psi$, is calculated in Fourier space: $\\hat{T}\\psi = \\mathcal{F}^{-1}[ (k^2/2) \\mathcal{F}[\\psi] ]$. The integral is then computed as a sum over the grid: $E_T \\approx \\Delta x \\sum_j \\psi_j^* (\\hat{T}\\psi)_j$. The total energy is $E_n = E_T + E_V$.\n\nThe propagation is iterated up to a maximum of $N_{\\text{max}}$ steps. At each step $n$, the energy $E_n$ is computed and compared to the previous step's energy $E_{n-1}$. The simulation is considered converged and terminates when $|E_n - E_{n-1}|  \\varepsilon$. If this condition is not met within $N_{\\text{max}}$ steps, the calculation stops and the final computed energy $E_{N_{\\text{max}}}$ is reported. For each test case, the final energy is rounded to six decimal places.", "answer": "```python\nimport numpy as np\nfrom numpy.fft import fft, ifft, fftfreq\n\ndef find_ground_state_energy(a, b, L, Nx, dtau, epsilon, N_max, sigma):\n    \"\"\"\n    Calculates the ground state energy of a 1D quantum particle in a double-well potential\n    using the imaginary time propagation method with a split-operator Fourier scheme.\n\n    Args:\n        a (float): Potential parameter for the quartic term.\n        b (float): Potential parameter defining the well minima location.\n        L (float): Length of the 1D simulation box.\n        Nx (int): Number of grid points.\n        dtau (float): Imaginary time step.\n        epsilon (float): Convergence tolerance for the energy.\n        N_max (int): Maximum number of propagation steps.\n        sigma (float): Width of the initial Gaussian wave packet.\n\n    Returns:\n        float: The calculated ground-state energy.\n    \"\"\"\n    # 1. Setup spatial and momentum grids\n    x = np.linspace(-L / 2, L / 2, Nx, endpoint=False)\n    dx = L / Nx\n    k = 2 * np.pi * fftfreq(Nx, d=dx)\n\n    # 2. Define potential and kinetic energy operators\n    V_x = a * (x**2 - b**2)**2\n    T_k = 0.5 * k**2  # In dimensionless units, hbar=1, m=1\n\n    # 3. Initialize the wavefunction as a normalized Gaussian\n    psi = np.exp(-x**2 / (2 * sigma**2))\n    # Wavefunction is purely real, so np.abs is for generality\n    norm_factor = np.sqrt(np.sum(np.abs(psi)**2) * dx)\n    psi = psi / norm_factor\n\n    # 4. Define the time propagation operators for the split-operator method\n    prop_V_half = np.exp(-V_x * dtau / 2.0)\n    prop_T = np.exp(-T_k * dtau)\n\n    # 5. Main propagation loop\n    E_current = 0.0\n    for step in range(N_max):\n        E_previous = E_current\n\n        # Apply split-operator propagation for one time step\n        # V/2 step\n        psi = prop_V_half * psi\n        # T step\n        psi_k = fft(psi)\n        psi_k = prop_T * psi_k\n        psi = ifft(psi_k)\n        # V/2 step\n        psi = prop_V_half * psi\n\n        # Renormalize the wavefunction\n        norm = np.sqrt(np.sum(np.abs(psi)**2) * dx)\n        psi = psi / norm\n\n        # Calculate the energy expectation value\n        # Kinetic energy\n        T_psi = ifft(T_k * fft(psi))\n        E_T = dx * np.real(np.vdot(psi, T_psi))\n        \n        # Potential energy\n        E_V = dx * np.sum(np.abs(psi)**2 * V_x)\n        \n        E_current = E_T + E_V\n\n        # Check for convergence after the first step\n        if step > 0:\n            if np.abs(E_current - E_previous)  epsilon:\n                break\n    \n    return E_current\n\ndef solve():\n    \"\"\"\n    Runs the simulation for the specified test cases and prints the results.\n    \"\"\"\n    test_cases = [\n        # (a, b, L, Nx, dtau, epsilon, N_max, sigma)\n        (1.0, 1.0, 12.0, 512, 1.0e-3, 1.0e-10, 20000, 1.0),\n        (5.0, 1.5, 20.0, 512, 5.0e-4, 1.0e-10, 20000, 1.5),\n        (0.5, 0.5, 10.0, 512, 1.0e-3, 1.0e-10, 20000, 0.5),\n    ]\n\n    results = []\n    for case_params in test_cases:\n        ground_energy = find_ground_state_energy(*case_params)\n        results.append(ground_energy)\n\n    # Format the output as specified: a list of numbers rounded to six decimal places.\n    print(f\"[{','.join(f'{e:.6f}' for e in results)}]\")\n\nsolve()\n```", "id": "2460933"}, {"introduction": "With the ability to determine stationary states, we can now explore one of the most iconic phenomena in quantum mechanics: tunneling. This practice challenges you to simulate a wave packet colliding with a potential barrier and to calculate the probability that it tunnels through, even when its average energy is less than the barrier height. You will implement a full time-dependent simulation, compute probability currents, and observe a purely quantum effect in action [@problem_id:2460912].", "problem": "A one-dimensional quantum particle in atomic units (where $\\hbar = 1$ and $m = 1$) evolves according to the time-dependent Schrödinger equation. A normalized Gaussian wave packet initially localized at position $x_0$ with spatial width $\\sigma$ and mean wavenumber $k_0$ is incident from the left on a rectangular potential barrier of height $V_0$ and width $a$, centered at $x_B = 0$. The tunneling (transmission) probability through the barrier can be defined as the total probability flux crossing a fixed probe location $x_\\text{probe}$ situated to the right of the barrier, integrated over all time, in accordance with probability conservation. Implement a numerical solver to propagate the wave packet, compute the instantaneous probability current density at the probe, and integrate the transmitted flux to obtain the transmission probability for each test case.\n\nFundamental base and definitions to use:\n- The time-dependent Schrödinger equation is\n$$\n\\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right]\\psi(x,t).\n$$\n- The probability density is $\\rho(x,t) = |\\psi(x,t)|^2$. The continuity equation is\n$$\n\\frac{\\partial \\rho(x,t)}{\\partial t} + \\frac{\\partial J(x,t)}{\\partial x} = 0,\n$$\nwhere the probability current density is\n$$\nJ(x,t) \\;=\\; \\Im\\!\\left(\\psi^*(x,t)\\,\\frac{\\partial \\psi(x,t)}{\\partial x}\\right).\n$$\n- The rectangular barrier is\n$$\nV(x) \\;=\\; \\begin{cases}\nV_0,  |x - x_B| \\le \\dfrac{a}{2},\\\\\n0,  \\text{otherwise}.\n\\end{cases}\n$$\n- The initial Gaussian wave packet is\n$$\n\\psi(x,0) \\;=\\; \\left(\\frac{1}{2\\pi \\sigma^2}\\right)^{1/4}\\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\sigma^2}\\right)\\exp(\\mathrm{i}k_0 x),\n$$\nwhich must be numerically normalized on the chosen grid to ensure $\\int |\\psi(x,0)|^2 \\,\\mathrm{d}x = 1$.\n\nNumerical requirements:\n- Propagate $\\psi(x,t)$ in a finite spatial domain using a stable algorithm that is consistent with the time-dependent Schrödinger equation; for example, a time-splitting spectral method based on the Fast Fourier Transform (FFT) is acceptable, but any method that respects the above equation and achieves comparable accuracy is allowed.\n- To prevent unphysical reflections from the simulation boundaries, use absorbing boundaries implemented as a complex absorbing layer. One convenient choice is to add a purely imaginary contribution $-\\mathrm{i}W(x)$ to the potential near the left and right edges, with $W(x) \\ge 0$ smooth and vanishing in the interior.\n- Compute the instantaneous probability current density at the fixed probe location $x_\\text{probe}$ at each time step. To approximate $\\partial \\psi/\\partial x$ you may use a centered finite difference with spatial step $\\Delta x$.\n- Define the transmitted flux at the probe as the positive-direction contribution $J_+(x_\\text{probe},t) = \\max(J(x_\\text{probe},t),0)$ and approximate the transmission probability by the time integral\n$$\nT \\;\\approx\\; \\int_{0}^{T_\\text{end}} J_+(x_\\text{probe},t)\\,\\mathrm{d}t,\n$$\nwith sufficiently large $T_\\text{end}$ so that the transmitted packet has passed the probe and residual contributions are negligible.\n\nSimulation parameters common to all test cases:\n- Spatial domain $[x_\\text{min},x_\\text{max}] = [-100,100]$.\n- Number of grid points $N = 2048$ (uniform spacing).\n- Time step $\\Delta t = 0.05$.\n- Total propagation time $T_\\text{end} = 160$.\n- Absorbing layer width $x_\\text{cap} = 20$ near both domain edges and strength parameter $\\eta = 0.02$ with quadratic profile $W(x)$; that is, $W(x) = \\eta\\,s(x)^2$ in the absorbing regions, where $s(x)$ ramps from $0$ to $1$ over the width $x_\\text{cap}$.\n- Barrier center $x_B = 0$, probe location $x_\\text{probe} = a/2 + 10$ (fixed relative to the barrier width), initial packet center $x_0 = -60$, and packet width $\\sigma = 1.5$.\n\nTest suite:\n- Case $1$: $k_0 = 1.5$, $V_0 = 2.0$, $a = 4.0$.\n- Case $2$: $k_0 = 0.8$, $V_0 = 2.5$, $a = 6.0$.\n- Case $3$: $k_0 = 2.5$, $V_0 = 1.0$, $a = 4.0$.\n\nAnswer specification:\n- For each case, compute the transmission probability $T$ using the above flux-integration prescription. Each $T$ is unitless and must lie in $[0,1]$ up to numerical error. Report each result rounded to six decimal places.\n- Your program must produce a single line of output containing the three results as a comma-separated list enclosed in square brackets, for example, $[0.123456,0.000789,0.876543]$.\n- No external input is required, and all quantities are in atomic units. Ensure that the reported values are rounded to six decimal places as specified.", "solution": "The problem statement has been validated and found to be scientifically sound, well-posed, and complete. It describes a standard exercise in computational quantum dynamics, based on the fundamental principles of quantum mechanics. All required parameters for a numerical solution are provided, and the definitions are consistent. We may proceed with the solution.\n\nThe core of the problem is to solve the one-dimensional time-dependent Schrödinger equation (TDSE) for a given initial state and potential. In atomic units ($\\hbar=1$, $m=1$), the TDSE is:\n$$ \\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\hat{H}\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V_{\\text{eff}}(x)\\right]\\psi(x,t) $$\nThe initial state at $t=0$ is a normalized Gaussian wave packet. The effective potential, $V_{\\text{eff}}(x)$, includes the real rectangular potential barrier $V(x)$ and an imaginary complex absorbing potential (CAP) $- \\mathrm{i}W(x)$ at the grid boundaries to prevent unphysical reflections.\n\nTo propagate the wave function $\\psi(x,t)$ in time, we employ the time-splitting spectral method. This method is highly suitable for this problem as it is accurate, stable, and computationally efficient. The formal solution over a small time step $\\Delta t$ involves the time-evolution operator $\\hat{U}(\\Delta t) = \\exp(-\\mathrm{i}\\hat{H}\\Delta t)$. Since the kinetic energy operator, $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$, and the potential energy operator, $\\hat{V}_{\\text{eff}} = V_{\\text{eff}}(x)$, do not commute, we use the second-order Strang splitting decomposition to approximate the evolution operator:\n$$ \\hat{U}(\\Delta t) \\approx e^{-\\mathrm{i}\\hat{V}_{\\text{eff}}\\Delta t/2} e^{-\\mathrm{i}\\hat{T}\\Delta t} e^{-\\mathrm{i}\\hat{V}_{\\text{eff}}\\Delta t/2} $$\nThis approximation has an error of order $\\mathcal{O}(\\Delta t^3)$, providing sufficient accuracy for the specified parameters. The propagation from time $t$ to $t+\\Delta t$ is performed in three steps:\n$1$. A half-step evolution under the potential $\\hat{V}_{\\text{eff}}$. In the position representation, this is a simple multiplication: $\\psi'(x) = e^{-\\mathrm{i}V_{\\text{eff}}(x)\\Delta t/2} \\psi(x,t)$.\n$2$. A full-step evolution under the kinetic operator $\\hat{T}$. This operation is computationally complex in position space but trivial in momentum space, where $\\hat{T}$ is a simple multiplication operator, $\\hat{T}_k = k^2/2$. We use the Fast Fourier Transform (FFT) to switch between representations. The wave function is transformed to momentum space ($\\tilde{\\psi}'(k) = \\mathcal{F}[\\psi'(x)]$), multiplied by the kinetic evolution factor ($e^{-\\mathrm{i}k^2\\Delta t/2}$), and transformed back to position space ($\\psi''(x) = \\mathcal{F}^{-1}[e^{-\\mathrm{i}k^2\\Delta t/2}\\tilde{\\psi}'(k)]$).\n$3$. A second half-step evolution under the potential: $\\psi(x, t+\\Delta t) = e^{-\\mathrm{i}V_{\\text{eff}}(x)\\Delta t/2} \\psi''(x)$.\n\nThis three-step cycle is repeated from $t=0$ to $t=T_{\\text{end}}$.\n\nThe simulation domain is discretized into a uniform spatial grid of $N=2048$ points over the interval $[x_{\\text{min}}, x_{\\text{max}}] = [-100, 100]$, with spacing $\\Delta x = (x_{\\text{max}}-x_{\\text{min}})/N$. The corresponding momentum-space (wavenumber) grid $k$ is constructed using the `fftfreq` utility, consistent with the FFT algorithm.\n\nThe initial wave packet is given by:\n$$ \\psi(x,0) \\;=\\; C \\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\sigma^2}\\right)\\exp(\\mathrm{i}k_0 x) $$\nwhere $C = (2\\pi \\sigma^2)^{-1/4}$. Critically, for numerical work on a discrete grid, this function must be re-normalized to ensure that the total probability $\\int |\\psi(x,0)|^2 dx$, approximated by the sum $\\sum_j |\\psi(x_j,0)|^2 \\Delta x$, is exactly $1$.\n\nThe total effective potential is $V_{\\text{eff}}(x) = V(x) - \\mathrm{i}W(x)$.\nThe rectangular barrier is:\n$$ V(x) \\;=\\; \\begin{cases} V_0,  |x| \\le a/2 \\\\ 0,  \\text{otherwise} \\end{cases} $$\nThe complex absorbing potential $W(x)$ is constructed to be non-zero only near the boundaries, within a width of $x_{\\text{cap}}=20$. As specified, $W(x) = \\eta s(x)^2$ with $\\eta=0.02$, where $s(x)$ is a function that ramps linearly from $0$ at the start of the absorbing region to $1$ at the grid boundary. For example, on the right boundary for $x \\in [x_{\\text{max}}-x_{\\text{cap}}, x_{\\text{max}}]$, $s(x) = \\frac{x-(x_{\\text{max}}-x_{\\text{cap}})}{x_{\\text{cap}}}$. This imaginary potential smoothly absorbs the outgoing wave function, preventing spurious reflections.\n\nThe transmission probability $T$ is determined by integrating the flux of probability current density past a probe. The probability current density is:\n$$ J(x,t) \\;=\\; \\Im\\!\\left(\\psi^*(x,t)\\,\\frac{\\partial \\psi(x,t)}{\\partial x}\\right) $$\nNumerically, the spatial derivative at the probe location $x_{\\text{probe}}$ is approximated using a centered finite difference on the grid:\n$$ \\frac{\\partial \\psi(x_j,t)}{\\partial x} \\approx \\frac{\\psi(x_{j+1},t) - \\psi(x_{j-1},t)}{2\\Delta x} $$\nwhere $x_j$ is the grid point closest to $x_{\\text{probe}}$. The transmission probability $T$ is the time integral of the positive-directed current at the probe location $x_{\\text{probe}} = a/2 + 10$:\n$$ T \\;\\approx\\; \\sum_{n=0}^{N_t-1} \\max(J(x_{\\text{probe}}, t_n), 0) \\cdot \\Delta t $$\nwhere $t_n = n\\Delta t$ and $N_t = T_{\\text{end}}/\\Delta t$. This summation is performed over the entire simulation time.\n\nThe algorithm proceeds by initializing the grid, potentials, and the normalized wave packet. Then, the time-evolution loop propagates the wave function forward in time. At each step, the current density at the probe is calculated and its positive contribution is added to the integrated transmission probability. This procedure is repeated for each of the three test cases specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom numpy.fft import fft, ifft, fftfreq\n\ndef run_simulation(k0, V0, a):\n    \"\"\"\n    Runs a single quantum wave packet simulation for a given set of parameters.\n\n    Args:\n        k0 (float): Initial mean wavenumber of the wave packet.\n        V0 (float): Height of the potential barrier.\n        a (float): Width of the potential barrier.\n\n    Returns:\n        float: The computed transmission probability.\n    \"\"\"\n    # 1. Simulation parameters common to all cases\n    x_min, x_max = -100.0, 100.0\n    N = 2048\n    dt = 0.05\n    t_end = 160.0\n    num_steps = int(t_end / dt)\n    x_cap = 20.0\n    eta = 0.02\n    x0 = -60.0\n    sigma = 1.5\n    \n    # 2. Setup spatial and momentum grids\n    x = np.linspace(x_min, x_max, N, endpoint=False)\n    dx = x[1] - x[0]\n    \n    k_freq = fftfreq(N, d=dx)\n    k = 2 * np.pi * k_freq\n    \n    # 3. Initial wave packet\n    psi0_unnorm = (1 / (2 * np.pi * sigma**2))**(1/4) * \\\n                  np.exp(-(x - x0)**2 / (4 * sigma**2)) * \\\n                  np.exp(1j * k0 * x)\n    \n    # Numerical normalization on the discrete grid\n    norm_const = np.sqrt(np.sum(np.abs(psi0_unnorm)**2) * dx)\n    psi = psi0_unnorm / norm_const\n    \n    # 4. Define the potential\n    # Real part: Rectangular barrier\n    x_B = 0.0\n    V_real = np.zeros_like(x)\n    V_real[np.abs(x - x_B) = a / 2] = V0\n    \n    # Imaginary part: Complex Absorbing Potential (CAP)\n    W = np.zeros_like(x)\n    \n    # Right boundary absorber\n    mask_right = x >= (x_max - x_cap)\n    if np.any(mask_right):\n        s_right = (x[mask_right] - (x_max - x_cap)) / x_cap\n        W[mask_right] = eta * s_right**2\n        \n    # Left boundary absorber\n    mask_left = x = (x_min + x_cap)\n    if np.any(mask_left):\n        s_left = ((x_min + x_cap) - x[mask_left]) / x_cap\n        W[mask_left] = eta * s_left**2\n    \n    V_eff = V_real - 1j * W\n    \n    # 5. Define time-evolution operators for split-step method\n    exp_V = np.exp(-0.5j * V_eff * dt)\n    exp_T = np.exp(-0.5j * k**2 * dt)\n    \n    # 6. Setup probe for transmission calculation\n    x_probe = a / 2 + 10.0\n    probe_idx = np.argmin(np.abs(x - x_probe))\n    \n    total_transmission = 0.0\n    \n    # 7. Time-evolution loop\n    for _ in range(num_steps):\n        # Strang splitting propagation step\n        psi = exp_V * psi\n        psi_k = fft(psi)\n        psi_k = exp_T * psi_k\n        psi = ifft(psi_k)\n        psi = exp_V * psi\n        \n        # Calculate probability current density at the probe location\n        # Using a centered finite difference for the derivative\n        dpsi_dx_probe = (psi[probe_idx + 1] - psi[probe_idx - 1]) / (2 * dx)\n        current_density_probe = np.imag(np.conj(psi[probe_idx]) * dpsi_dx_probe)\n        \n        # Integrate the positive-directed flux over time\n        total_transmission += max(0, current_density_probe) * dt\n        \n    return total_transmission\n\ndef solve():\n    \"\"\"\n    Main solver function that orchestrates the simulation for all test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (1.5, 2.0, 4.0),  # Case 1\n        (0.8, 2.5, 6.0),  # Case 2\n        (2.5, 1.0, 4.0),  # Case 3\n    ]\n\n    results = []\n    for case in test_cases:\n        k0, V0, a = case\n        transmission = run_simulation(k0=k0, V0=V0, a=a)\n        results.append(f\"{transmission:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2460912"}, {"introduction": "Quantum mechanics tells us that observation is not a passive act; it can fundamentally alter the system being observed. This exercise provides a striking demonstration of this principle through the quantum Zeno effect, where frequent measurements can effectively \"freeze\" a system's evolution. By simulating a particle in a double-well potential and applying repeated projective measurements, you will investigate how the act of \"watching\" can prevent a particle from tunneling from one well to another [@problem_id:2460919].", "problem": "Model a one-dimensional quantum Zeno effect for a particle in a symmetric double-well potential by solving the time-dependent Schrödinger equation in atomic units, with repeated ideal projective measurements that confine the particle to the initial (left) well. Work entirely in atomic units where the reduced Planck constant $\\hbar = 1$, the particle mass $m = 1$, lengths are in Bohr, energies are in Hartree, and times are in atomic units of time.\n\nA particle of mass $m=1$ moves in the one-dimensional potential\n$$\nV(x) = V_0 \\left(x^2 - b^2\\right)^2,\n$$\nwith $V_0 = 0.2$ and $b = 1.0$. The initial wave function at time $t=0$ is a normalized Gaussian centered in the left well,\n$$\n\\psi(x,0) = \\left(\\pi \\sigma^2\\right)^{-1/4} \\exp\\!\\left(-\\frac{(x - x_0)^2}{2 \\sigma^2}\\right),\n$$\nwith $x_0 = -b$ and $\\sigma = 0.5$. The time evolution is governed by the time-dependent Schrödinger equation\n$$\n\\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) = \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right]\\psi(x,t).\n$$\n\nDefine the projector onto the left region (the initial well) $P_L$ by\n$$\n(P_L \\psi)(x) = \\begin{cases}\n\\psi(x),  x  0,\\\\\n0,  x \\ge 0.\n\\end{cases}\n$$\nConsider ideal instantaneous measurements at times $t_k = k\\,\\tau$ for integers $k \\ge 1$, where $\\tau$ is the measurement interval. Just before each measurement at time $t_k^{-}$, compute the left-well probability\n$$\np_k = \\langle \\psi(t_k^-)|P_L|\\psi(t_k^-)\\rangle = \\int_{-\\infty}^{0} |\\psi(x,t_k^-)|^2 \\,\\mathrm{d}x.\n$$\nImmediately after the measurement at time $t_k^{+}$, the wave function is projected and renormalized back into the left well:\n$$\n\\psi(x,t_k^+) = \\frac{(P_L \\psi)(x,t_k^-)}{\\sqrt{p_k}},\n$$\nprovided $p_k > 0$. The quantum Zeno survival probability over the total time $T$ for a given measurement interval $\\tau$ is defined as\n$$\nS(\\tau,T) = \\prod_{k=1}^{\\left\\lfloor T/\\tau \\right\\rfloor} p_k.\n$$\n\nAs a baseline comparison, define the no-measurement left-well probability at the final time $T$ (evolution without any projections) as\n$$\nP_{\\text{left}}(T) = \\int_{-\\infty}^{0} |\\psi(x,T)|^2 \\,\\mathrm{d}x.\n$$\n\nSpatial and temporal discretization to be used for all test cases:\n- Spatial domain: $x \\in [-L, L]$ with $L = 8.0$.\n- Number of spatial grid points: $N = 1024$ (uniform grid).\n- Time step: $\\Delta t = 0.005$.\n- Total simulation time: $T = 12.0$.\n\nTest suite specification (all quantities in atomic units):\n- Case 1 (frequent measurements): $\\tau = 0.05$.\n- Case 2 (moderate measurements): $\\tau = 0.20$.\n- Case 3 (sparse measurements): $\\tau = 1.00$.\n- Case 4 (baseline, no measurements): evolve to time $T$ without any projections and report $P_{\\text{left}}(T)$.\n\nYour program must:\n- Numerically propagate $\\psi(x,t)$ from $t=0$ to $t=T$ under the given Hamiltonian and discretization.\n- For Cases 1–3, apply the sequence of ideal measurements as defined, compute $S(\\tau,T)$, and report it.\n- For Case 4, do not apply any measurements and report $P_{\\text{left}}(T)$.\n\nAll answers are dimensionless probabilities. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order [Case 1, Case 2, Case 3, Case 4]. Express each number rounded to six decimal places, for example, \"[0.999000,0.990000,0.800000,0.650000]\".", "solution": "The problem presented is a well-defined exercise in computational quantum mechanics, specifically demonstrating the quantum Zeno effect. It is scientifically grounded in the principles of quantum dynamics, is mathematically consistent, and its parameters are specified with sufficient precision to permit a unique numerical solution. The problem is therefore deemed valid and we shall proceed with its resolution.\n\nThe central task is to solve the one-dimensional time-dependent Schrödinger equation (TDSE) for a particle in a double-well potential, subject to a series of projective measurements. The TDSE in atomic units ($\\hbar=1$, $m=1$) is given by:\n$$\n\\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) = \\hat{H}\\psi(x,t) = \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right]\\psi(x,t)\n$$\nThe formal solution over a small time interval $\\Delta t$ is $\\psi(x, t+\\Delta t) = \\exp(-\\mathrm{i}\\hat{H}\\Delta t)\\psi(x,t)$. We will employ the split-operator Fourier transform method to approximate the time-evolution operator $\\hat{U}(\\Delta t) = \\exp(-\\mathrm{i}\\hat{H}\\Delta t)$. The Hamiltonian $\\hat{H}$ is composed of a kinetic energy operator $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$ and a potential energy operator $\\hat{V} = V(x) = V_0(x^2 - b^2)^2$. Since $\\hat{T}$ and $\\hat{V}$ do not commute, we use a second-order symmetric Suzuki-Trotter (or Strang) splitting:\n$$\n\\hat{U}(\\Delta t) = \\exp(-\\mathrm{i}(\\hat{T}+\\hat{V})\\Delta t) \\approx \\exp(-\\mathrm{i}\\hat{V}\\frac{\\Delta t}{2}) \\exp(-\\mathrm{i}\\hat{T}\\Delta t) \\exp(-\\mathrm{i}\\hat{V}\\frac{\\Delta t}{2})\n$$\nThis scheme is unitary and accurate to order $(\\Delta t)^3$. The propagation is executed as follows:\n1.  A half-step evolution under the potential operator $\\hat{V}$. This is straightforward in position space, as $\\hat{V}$ is a multiplicative operator: $\\psi(x) \\rightarrow \\exp(-\\mathrm{i}V(x)\\frac{\\Delta t}{2})\\psi(x)$.\n2.  A full-step evolution under the kinetic operator $\\hat{T}$. The kinetic operator is diagonal in momentum (or $k$-) space. We use the Fast Fourier Transform (FFT) to switch from the position basis to the momentum basis. Let $\\mathcal{F}$ denote the FFT. In momentum space, the operator $\\frac{\\partial^2}{\\partial x^2}$ corresponds to multiplication by $-k^2$, where $k$ is the wavenumber. The kinetic energy operator becomes multiplication by $T(k) = \\frac{k^2}{2}$. The evolution is then $\\tilde{\\psi}(k) \\rightarrow \\exp(-\\mathrm{i}T(k)\\Delta t)\\tilde{\\psi}(k)$, where $\\tilde{\\psi}(k) = \\mathcal{F}[\\psi(x)]$. After this step, we transform back to position space using the inverse FFT, $\\mathcal{F}^{-1}$.\n3.  A final half-step evolution under the potential operator $\\hat{V}$.\n\nThis three-step sequence propagates the wave function over a single time step $\\Delta t$.\n\nThe numerical simulation is set up on a spatial grid $x \\in [-L, L]$ with $N=1024$ points and $L=8.0$. The grid spacing is $\\Delta x = 2L/N$. The corresponding momentum grid for the FFT is constructed accordingly. The initial state is a normalized Gaussian wave packet centered in the left well ($x_0 = -b = -1.0$).\n\nFor the Zeno effect cases (Cases $1-3$), the time evolution is interspersed with measurements at intervals of $\\tau$. A simulation for a measurement interval $\\tau$ proceeds as follows:\n1.  Initialize the wave function $\\psi(x,t=0)$ and the survival probability $S=1.0$.\n2.  Iterate for $k=1, 2, ..., \\lfloor T/\\tau \\rfloor$. In each iteration:\n    a. Propagate the wave function for a duration $\\tau$ using $M = \\tau/\\Delta t$ steps of the split-operator algorithm. This yields $\\psi(x, t_k^-)$.\n    b. Compute the probability of finding the particle in the left well ($x0$):\n       $$\n       p_k = \\int_{-\\infty}^{0} |\\psi(x,t_k^-)|^2 \\,\\mathrm{d}x\n       $$\n       This integral is computed numerically by summing $|\\psi(x_i)|^2 \\Delta x$ over all grid points $x_i  0$.\n    c. Update the total survival probability: $S \\leftarrow S \\times p_k$.\n    d. Project the wave function onto the left well. This is done by setting $\\psi(x_i, t_k^-) = 0$ for all $x_i \\ge 0$.\n    e. Renormalize the new state: $\\psi(x,t_k^+) = \\frac{(P_L \\psi)(x,t_k^-)}{\\sqrt{p_k}}$. This state serves as the initial condition for the next evolution period.\n\nFor the baseline case (Case $4$), no measurements are performed. The wave function is evolved continuously from $t=0$ to $t=T=12.0$. The final left-well probability $P_{\\text{left}}(T) = \\int_{-\\infty}^{0} |\\psi(x,T)|^2 \\,\\mathrm{d}x$ is then computed.\n\nThe algorithm is implemented for each of the four specified cases and the resulting probabilities are reported. The expected outcome is that more frequent measurements (smaller $\\tau$) will suppress the tunneling from the left well to the right well, leading to a higher survival probability $S$, a manifestation of the quantum Zeno effect.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the time-dependent Schrödinger equation for a particle in a double-well\n    potential to model the quantum Zeno effect, as per the problem statement.\n    \"\"\"\n    # Define physical and numerical parameters in atomic units\n    V0 = 0.2\n    b = 1.0\n    x0 = -b\n    sigma = 0.5\n    L = 8.0\n    N = 1024\n    dt = 0.005\n    T_total = 12.0\n\n    # Test cases from the problem statement\n    # A tau of 0.0 means the no-measurement case in this implementation.\n    test_cases_tau = [0.05, 0.20, 1.00, 0.0]\n\n    # --- Grid and Operator Setup ---\n    # Spatial grid (endpoint=False is better for FFT)\n    x = np.linspace(-L, L, N, endpoint=False)\n    dx = x[1] - x[0]\n\n    # Momentum grid. np.fft.fftfreq gives frequencies for which p = 2*pi*hbar*k_freq.\n    # With hbar=1, p = 2*pi*k_freq.\n    k_freq = np.fft.fftfreq(N, d=dx)\n    # Kinetic energy operator diagonal term T_k = p^2/(2m). With m=1, T_k = (2*pi*k_freq)^2/2.\n    T_op_diag = 2.0 * (np.pi**2) * (k_freq**2)\n\n    # Potential energy operator V(x)\n    V_op = V0 * (x**2 - b**2)**2\n\n    # --- Propagators for Split-Operator Method ---\n    # Propagator for a half time-step in potential\n    V_propagator_half = np.exp(-0.5j * V_op * dt)\n    # Propagator for a full time-step in kinetic energy\n    T_propagator_full = np.exp(-1.0j * T_op_diag * dt)\n\n    # --- Projector onto the left well (x  0) ---\n    # For our grid x=np.linspace(-L, L, N, endpoint=False), the first N//2 points are  0.\n    proj_mask = np.zeros(N, dtype=float)\n    proj_mask[:N//2] = 1.0\n\n    # --- Main Loop over Test Cases ---\n    results = []\n    for tau in test_cases_tau:\n        # --- Initial State ---\n        # Unnormalized Gaussian wave packet\n        psi_0 = (np.pi * sigma**2)**(-0.25) * np.exp(-(x - x0)**2 / (2.0 * sigma**2))\n        psi_0 = psi_0.astype(np.complex128)\n        # Numerical normalization on the grid\n        norm = np.sqrt(np.sum(np.abs(psi_0)**2) * dx)\n        psi = psi_0 / norm\n\n        is_zeno_case = (tau > 0.0)\n\n        if is_zeno_case:\n            survival_prob = 1.0\n            num_measurements = int(np.floor(T_total / tau))\n            steps_per_measurement = int(round(tau / dt))\n\n            for _ in range(num_measurements):\n                # Evolve for time tau\n                for _ in range(steps_per_measurement):\n                    # Split-operator step\n                    psi = V_propagator_half * psi         # Half potential step\n                    psi_k = np.fft.fft(psi)               # To momentum space\n                    psi_k = T_propagator_full * psi_k     # Full kinetic step\n                    psi = np.fft.ifft(psi_k)              # Back to position space\n                    psi = V_propagator_half * psi         # Final half potential step\n                \n                # --- Measurement and Projection ---\n                # Probability density in the left well\n                prob_density_left = np.abs(psi[proj_mask == 1.0])**2\n                p_k = np.sum(prob_density_left) * dx\n\n                # If probability is numerically zero, survival is impossible\n                if p_k  1e-15:\n                    survival_prob = 0.0\n                    break\n                \n                survival_prob *= p_k\n                \n                # Project and renormalize\n                psi = proj_mask * psi\n                psi /= np.sqrt(p_k)\n            \n            results.append(survival_prob)\n\n        else: # Baseline case (no measurements)\n            num_total_steps = int(round(T_total / dt))\n            for _ in range(num_total_steps):\n                # Split-operator step\n                psi = V_propagator_half * psi\n                psi_k = np.fft.fft(psi)\n                psi_k = T_propagator_full * psi_k\n                psi = np.fft.ifft(psi_k)\n                psi = V_propagator_half * psi\n            \n            # Calculate final left-well probability\n            prob_density_left = np.abs(psi[proj_mask == 1.0])**2\n            p_final = np.sum(prob_density_left) * dx\n            results.append(p_final)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join([f'{r:.6f}' for r in results])}]\")\n\nsolve()\n```", "id": "2460919"}]}