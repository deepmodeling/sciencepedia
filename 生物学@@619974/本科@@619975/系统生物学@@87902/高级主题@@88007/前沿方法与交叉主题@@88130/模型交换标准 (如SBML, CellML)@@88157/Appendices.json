{"hands_on_practices": [{"introduction": "构建一个计算模型就像编写一段计算机程序，它需要遵循严格的语法和逻辑规则。本练习将引导你思考系统生物学标记语言（SBML）最基本的一条原则：模型中使用的每一个标识符（如参数或物种）都必须先进行明确的定义。通过分析一个初学者常犯的错误，你将理解为什么模型验证工具对于未声明的标识符会报错，这对于确保模型的完整性和可解释性至关重要 [@problem_id:1447058]。", "problem": "一名学生正在使用系统生物学标记语言 (SBML) 创建他的第一个计算模型，用以描述一个简单的酶促反应 $S \\to P$。他选择使用米氏动力学定律来表示反应速率，其数学形式为：$rate = \\frac{Vmax \\cdot [S]}{Km + [S]}$。\n\n在该 SBML 文件中，这名学生正确定义了物种 `S` 和 `P`。他还在模型的 `<listOfParameters>` 部分添加了参数 $Km$ 并为其赋了值。然而，尽管他在反应的 `<kineticLaw>` 的 `<math>` 元素中使用了标识符 $Vmax$，但他忘记了在 `<listOfParameters>` 部分为参数 $Vmax$ 创建条目。\n\n当该学生将文件提交给一个在线 SBML 验证器时，该工具报告了一个致命错误，指出标识符 $Vmax$ 在模型的范围（scope）内未定义。\n\n根据 SBML 的原则，下列哪个陈述为这一验证错误提供了最准确和最根本的原因？\n\nA. 标识符 $Vmax$ 是 SBML 规范中为另一功能保留的关键字，禁止将其用作参数名。\n\nB. 验证器期望 $Vmax$ 被声明为物种（即在 `<listOfSpecies>` 中），而不是参数，因为它直接决定了物种浓度的变化率。\n\nC. XML 语法不正确。在 `<math>` 元素中使用的任何参数都必须直接在 `<ci>` 标签内赋值，例如 `<ci value=\"1.0\"> Vmax </ci>`，而这里缺少了这一部分。\n\nD. 在 SBML 模型中，数学表达式内使用的任何标识符都必须对应于模型中其他地方已显式声明的实体（如物种、区室或参数）。\n\nE. 参数 $Vmax$ 只能通过 `<initialAssignment>` 规则定义，而不能在 `<listOfParameters>` 部分中定义，因此在此处的缺失是错误的原因。", "solution": "题目告诉我们，学生模拟了一个反应 $S \\to P$，并使用了米氏动力学速率定律 $rate = \\frac{Vmax \\cdot [S]}{Km + [S]}$。在 SBML 中，出现在 MathML 表达式（在 SBML 中包含在 `<math>` 元素内，并使用 `<ci>` 表示标识符）中的符号必须对应于模型符号表中定义的对象。具体来说，`<math>` 中使用的任何标识符都必须能够解析为作用域内已声明的实体，例如物种、区室、参数（`<listOfParameters>` 中的全局参数或反应 `<kineticLaw>` 中的局部参数）、反应或函数定义。如果在数学表达式中使用的标识符没有在模型的任何地方声明，也没有作为动力学法则中的局部参数声明，验证器将报告一个未定义符号错误，因为模型的范围（scope）不包含该标识符。\n\n在本例中，学生将 $Km$ 声明为了参数，但没有在任何地方声明 $Vmax$（既没有在 `<listOfParameters>` 中作为参数声明，也没有在反应的 `<kineticLaw>` 中作为局部参数声明）。因此，该错误的根本原因是动力学法则数学表达式中使用的标识符 $Vmax$ 不对应于模型范围（scope）内的任何已声明实体。这与选项 D 相符。\n\n为什么其他选项不正确：\n- 选项 A 是不正确的，因为 $Vmax$ 不是 SBML 中的保留关键字；SBML 不禁止使用 $Vmax$ 作为参数名。\n- 选项 B 是不正确的，因为验证器不要求 $Vmax$ 是一个物种；动力学常数应正确地表示为参数。一个参数影响物种变化率这一事实并不会使其成为一个物种。\n- 选项 C 是不正确的，因为在 SBML MathML 中，`<ci>` 只包含标识符名称，例如 `<ci>Vmax</ci>`；值并不作为 `<ci>` 的属性嵌入。值是通过声明（例如，参数）或规则/赋值来提供的。\n- 选项 E 是不正确的，因为参数可以在 `<listOfParameters>` 中声明并赋值。虽然 `<initialAssignment>` 可以设置初始值，但这并不能替代声明参数本身的要求；此外，`<initialAssignment>` 本身并不会定义一个新符号。\n\n因此，最准确和最根本的原因是 D。", "answer": "$$\\boxed{D}$$", "id": "1447058"}, {"introduction": "一个结构上有效的模型仅仅是第一步，要使其具有科学价值，还必须确保其结果是可复现的。这个实践练习通过一个定量计算，生动地揭示了单位定义缺失的严重后果：即使是完全相同的模型文件，在不同研究者的“默认”单位体系下会产生截然不同的预测结果。这个例子强调了模型交换标准中单位定义的重要性，它是科学复现性的基石 [@problem_id:1447032]。", "problem": "一位系统生物学研究员 Dr. Alva，使用一种符合系统生物学标记语言 (SBML) 的格式创建了一个计算模型。该模型旨在描述一个简单的酶促过程。\n\n该模型由以下组分构成：\n- 一个单一反应：$S \\to P$。\n- 反应发生于一个单一区室 `C` 中，其体积 `V` 设为 `2.0`。\n- 底物 `S` 的初始物质的量设为 `10.0`。\n- 产物 `P` 的初始物质的量为零。\n- 反应速率由动力学定律 $rate = k \\cdot S_{\\text{amount}}$ 决定，其中 $S_{\\text{amount}}$ 是物种 S 的物质的量。\n- 速率参数 `k` 的值设为 `0.5`。\n- 模型的配置使得在数学公式中使用的物种标识符（如 `S`）指的是其物质的量，而非浓度。\n\nDr. Alva 在匆忙中忘记在 SBML 文件中包含强制性的 `<unitDefinition>` 块，使得物质的量和时间的单位未定义。她将这个模型发送给了她的合作者 Dr. Bovis。根据他们各自实验室的惯例，他们使用不同的单位集来解释这个模型：\n\n**Dr. Alva 的隐式单位：**\n- `amount`：毫摩尔 (mmol)\n- `time`：秒 (s)\n\n**Dr. Bovis 的隐式单位：**\n- `amount`：微摩尔 (µmol)\n- `time`：分钟 (min)\n\n假设两位研究者都使用该模型来计算反应的初始速率（即时间 `t=0` 时的速率），请计算 Dr. Bovis 计算出的初始速率与 Dr. Alva 计算出的初始速率之比 ($\\frac{\\text{Rate}_{\\text{Bovis}}}{\\text{Rate}_{\\text{Alva}}}$)。\n\n将您的答案表示为一个无量纲的小数，并四舍五入到两位有效数字。", "solution": "反应为 $S \\to P$，其动力学定律为 $r = k \\cdot S_{\\text{amount}}$。由于物种标识符指的是物质的量（而非浓度），区室体积 $V=2.0$ 不会进入初始速率的速率表达式中。\n\n设 $r_{A}$ 为 Dr. Alva 解释的初始速率，$r_{B}$ 为 Dr. Bovis 解释的初始速率。使用他们的隐式单位：\n- Dr. Alva：物质的量单位为毫摩尔 (mmol)，时间单位为秒 (s)，因此 $k_{A}$ 的单位是 $\\text{s}^{-1}$，$S_{A}$ 的单位是 mmol。\n- Dr. Bovis：物质的量单位为微摩尔，时间单位为分钟，因此 $k_{B}$ 的单位是 $\\text{min}^{-1}$，$S_{B}$ 的单位是微摩尔。\n\n模型中的数值：\n$$\nk_{A} = 0.5 \\ \\text{s}^{-1}, \\quad S_{A}(0) = 10.0 \\ \\text{mmol},\n$$\n$$\nk_{B} = 0.5 \\ \\text{min}^{-1}, \\quad S_{B}(0) = 10.0 \\ \\text{micromole}.\n$$\n\n使用各自的单位计算每个初始速率：\n$$\nr_{A} = k_{A} S_{A}(0) = 0.5 \\times 10.0 = 5 \\ \\text{mmol} \\cdot \\text{s}^{-1},\n$$\n$$\nr_{B} = k_{B} S_{B}(0) = 0.5 \\times 10.0 = 5 \\ \\text{micromole} \\cdot \\text{min}^{-1}.\n$$\n\n将 $r_{B}$ 转换为与 $r_{A}$ 相同的单位（mmol/秒）。使用 $1 \\ \\text{mmol} = 10^{3} \\ \\text{micromole}$ 和 $1 \\ \\text{min} = 60 \\ \\text{s}$：\n$$\nr_{B} = 5 \\ \\text{micromole} \\cdot \\text{min}^{-1}\n= 5 \\times 10^{-3} \\ \\text{mmol} \\cdot \\text{min}^{-1}\n= \\frac{5 \\times 10^{-3}}{60} \\ \\text{mmol} \\cdot \\text{s}^{-1}\n= \\frac{1}{12000} \\ \\text{mmol} \\cdot \\text{s}^{-1}.\n$$\n\n计算比率：\n$$\n\\frac{r_{B}}{r_{A}} = \\frac{\\frac{1}{12000}}{5} = \\frac{1}{60000}.\n$$\n\n数值上，$\\frac{1}{60000} = 1.666\\ldots \\times 10^{-5}$，保留两位有效数字后为\n$$\n1.7 \\times 10^{-5}.\n$$", "answer": "$$\\boxed{1.7 \\times 10^{-5}}$$", "id": "1447032"}, {"introduction": "掌握模型标准的最终目的是利用它们进行科学探究，例如执行“计算机模拟实验”（in-silico experiments）。这个高级练习挑战你像计算生物学家一样，以算法的思维方式思考如何程序化地修改模型以测试生物学假设。通过学习如何利用系统生物学本体论（SBO）术语来精确定位并修改模型中的特定部分，你将体会到标准化如何为强大和自动化的模型分析赋能 [@problem_id:1447020]。", "problem": "在计算系统生物学中，通常进行计算机模拟实验来模拟生物网络中变化的影响，例如酶的抑制。表示这些模型的一种常用格式是系统生物学标记语言 (SBML)。\n\n你的任务是开发一种高级算法，以编程方式模拟任何给定 SBML 模型中特定类别酶的部分抑制。目标是将由这些酶催化的所有反应的速率降低到其原始值的50%。物种在给定反应中是否被识别为催化剂，取决于其关联的系统生物学本体论 (SBO) 术语。具体来说，在反应中充当催化剂的物种会被注释上 SBO 术语 `SBO:0000013`。\n\n假设你正在处理一个有效的 SBML Level 3 Version 2 模型。该模型文件被解析成一个类似 DOM 的对象结构，允许你遍历其元素和属性。你的任务是选择最稳健且正确的操作序列，以实现所需的模型修改。\n\n以下哪种算法正确描述了必要的步骤？\n\nA.\n1. 解析 SBML 文件。\n2. 遍历 `<listOfSpecies>` 中的所有 `<species>` 元素。\n3. 对于每个物种，检查其 `sboTerm` 属性是否为 `SBO:0000013`。\n4. 如果匹配，找到该物种被列为 `<reactant>` 的所有反应。\n5. 对于每个此类反应，找到其 `<kineticLaw>`，访问代表速率常数的参数（例如，id 为 'k' 的参数），并将其值减半。\n\nB.\n1. 解析 SBML 文件。\n2. 遍历 `<listOfReactions>` 中的所有 `<reaction>` 元素。\n3. 对于每个反应，检查其 `sboTerm` 属性是否为 `SBO:0000013`。\n4. 如果是，则访问该反应的 `<kineticLaw>`。\n5. 通过将整个数学表达式乘以 0.5 来修改 `<kineticLaw>` 中的 `<math>` 元素。\n\nC.\n1. 解析 SBML 文件。\n2. 遍历 `<listOfReactions>` 中的所有 `<reaction>` 元素。\n3. 在每个反应内部，遍历其 `<listOfModifiers>` 中的 `<modifierSpeciesReference>` 元素。\n4. 对于每个 `<modifierSpeciesReference>`，检查其 `sboTerm` 属性是否为 `SBO:0000013`。\n5. 如果 SBO 术语匹配，则访问该反应的 `<kineticLaw>`。\n6. 通过将整个数学表达式乘以 0.5 来修改 `<kineticLaw>` 中的 `<math>` 元素。\n\nD.\n1. 解析 SBML 文件。\n2. 遍历 `<listOfReactions>` 中的所有 `<reaction>` 元素。\n3. 在每个反应内部，遍历其 `<listOfReactants>` 中的 `<speciesReference>` 元素。\n4. 对于每个 `<speciesReference>`，检查其 `sboTerm` 属性是否为 `SBO:0000013`。\n5. 如果 SBO 术语匹配，则访问该反应的 `<kineticLaw>`。\n6. 通过将整个数学表达式乘以 0.5 来修改 `<kineticLaw>` 中的 `<math>` 元素。", "solution": "目标是识别所有由酶催化的反应，然后将其总速率减半。这需要正确地导航 SBML 结构以找到正确的信息，然后稳健地应用修改。让我们分析每个选项。\n\n正确的算法是 C。以下是逐步的理由说明：\n\n1.  **解析 SBML 文件**：这是访问模型内容的必要第一步。所有选项都正确地指出了这一点。\n2.  **遍历所有 `<reaction>` 元素**：修改需要应用于反应速率，因此遍历反应列表是搜索的正确起点。\n3.  **遍历 `<listOfModifiers>` 中的 `<modifierSpeciesReference>` 元素**：这是关键步骤。在 SBML 中，影响反应速率但本身不被消耗或产生的物种（如催化剂或抑制剂）被列为 `<modifier>`。一个 `<reaction>` 中的 `<listOfModifiers>` 包含 `<modifierSpeciesReference>` 元素，每个元素对应一个此类物种。这是寻找催化剂的正确位置。\n4.  **检查 `<modifierSpeciesReference>` 的 `sboTerm` 属性**：问题陈述指出，物种在反应中的作用由其 SBO 术语定义。`<modifierSpeciesReference>` 上的 `sboTerm` 属性指定了修饰剂的作用（例如，催化剂、抑制剂）。检查此属性是否为 `SBO:0000013`（'catalyst'）是识别我们需要修改的反应的正确方法。\n5.  **访问反应的 `<kineticLaw>`**：一旦识别出催化反应，就必须访问其速率定律。速率定律被封装在 `<kineticLaw>` 元素内。\n6.  **修改 `<math>` 元素以将整个表达式乘以 0.5**：这是将反应速率减半的最稳健的方法。动力学定律可以是任何任意的数学函数（例如，质量作用、Michaelis-Menten、Hill 动力学）。仅仅找到一个名为 'k' 的参数并将其减半是脆弱的，可能不适用于所有速率定律，甚至可能不是正确的参数。将整个表达式相乘可以确保对于任何输入浓度，所得速率都恰好是原始速率的一半，这正确地模拟了催化活性降低 50%。在 MathML 中，这通常通过将现有的数学表达式的根包装在一个新的 `<apply><times/><cn>0.5</cn>...</apply>` 块中来完成。\n\n现在让我们分析为什么其他选项是错误的：\n\n**选项 A 是错误的**：\n*   它在全局 `<listOfSpecies>` 中的 `<species>` 元素本身上查找 SBO 术语。虽然一个物种可以有一个默认的 SBO 术语，但其作用是依赖于上下文的，并且是针对每个反应的。其 *在特定反应中* 的作用的权威注释位于该反应内部的引用上（例如，`<modifierSpeciesReference>`）。\n*   它错误地假设催化剂是 `<reactant>`。根据定义，催化剂在净反应中不被消耗，应被列为 `<modifier>`。\n\n**选项 B 是错误的**：\n*   它检查 `<reaction>` 元素上的 `sboTerm` 属性。`<reaction>` 元素上的 SBO 术语描述的是 *过程的类型*（例如，`SBO:0000176` 代表 'biochemical reaction'，`SBO:0000185` 代表 'transport reaction'），而不是其参与者的作用。因此，在此处检查 `SBO:0000013` 是没有意义的，并且无法识别出催化反应。\n\n**选项 D 是错误的**：\n*   它正确地遍历了反应，但随后在 `<listOfReactants>` 中寻找催化剂。这在概念上是错误的。催化剂不是反应物；它促进反应而不被消耗。在反应物列表中查找将无法找到在 SBML 中正确编码的酶催化反应。\n\n因此，选项 C 提供了唯一能够根据 SBML 标准正确且稳健地识别催化反应并应用指定修改的算法。", "answer": "$$\\boxed{C}$$", "id": "1447020"}]}