{"hands_on_practices": [{"introduction": "合成生物学开放语言 (SBOL) 不仅仅是一个部件清单，它更是一种能够精确描述生物设计功能的强大语言。为了掌握如何用 SBOL 捕捉动态过程，我们将从一个基本的相互作用开始：蛋白质降解。这个练习将引导你使用 `Interaction` 和 `Participation` 对象，并借助系统生物学本体 (SBO) 中的标准术语，来明确定义一个蛋白酶（催化剂）如何降解其目标蛋白（被降解物）[@problem_id:2066840]。", "problem": "在合成生物学领域，合成生物学开放语言 (SBOL) 是一种用于表示基因设计结构和功能的标准。\n\nSBOL 的一个关键元素是 `Interaction` 类，它描述了不同生物组件之间如何相互影响。`Interaction` 中的每个参与者都被分配一个由系统生物学本体论 (SBO) 中的术语所定义的角色。\n\n考虑一个简单的合成回路，其中一种蛋白酶 `TEVp_protein` 被设计用于识别并切割一种特定的靶蛋白 `GFP_MBD_protein`。该靶蛋白是绿色荧光蛋白 (GFP) 和麦芽糖结合域的融合体，通过一段可被该蛋白酶切割的序列连接起来。该切割事件导致 `GFP_MBD_protein` 随后的降解。`TEVp_protein` 和 `GFP_MBD_protein` 都被表示为 `ComponentDefinition` 实例。\n\n您的任务是创建一个名为 `TEVp_cleaves_GFP_MBD` 的 `Interaction` 来模拟此降解过程。该相互作用的 `type` 被正确设置为 `SBO:0000179`，该术语对应于“降解”。\n\n下列哪组 `Participation` 元素正确地定义了 `TEVp_protein` 和 `GFP_MBD_protein` 在此相互作用中的角色？\n\nA.\n- 参与 1: `participant` = `TEVp_protein`, `role` = `SBO:0000019` (催化剂)\n- 参与 2: `participant` = `GFP_MBD_protein`, `role` = `SBO:0000642` (被降解物)\n\nB.\n- 参与 1: `participant` = `GFP_MBD_protein`, `role` = `SBO:0000019` (催化剂)\n- 参与 2: `participant` = `TEVp_protein`, `role` = `SBO:0000642` (被降解物)\n\nC.\n- 参与 1: `participant` = `TEVp_protein`, `role` = `SBO:0000011` (产物)\n- 参与 2: `participant` = `GFP_MBD_protein`, `role` = `SBO:0000010` (反应物)\n\nD.\n- 参与 1: `participant` = `TEVp_protein`, `role` = `SBO:0000250` (启动子)\n- 参与 2: `participant` = `GFP_MBD_protein`, `role` = `SBO:0000316` (终止子)\n\nE.\n- 参与 1: `participant` = `TEVp_protein`, `role` = `SBO:0000020` (抑制剂)\n- 参与 2: `participant` = `GFP_MBD_protein`, `role` = `SBO:0000643` (被抑制物)", "solution": "我们正在 SBOL 中模拟一个降解相互作用，其类型设置为 SBO:0000179，表示一个降解过程。在此类相互作用中：\n- 经历降解的分子被分配角色“degraded”，它对应于 SBO:0000642。\n- 任何促进或加速降解而不被消耗的酶被分配角色“catalyst”，它对应于 SBO:0000019。\n\n在所描述的系统中，`TEVp_protein` 是一种蛋白酶，它识别并切割靶融合蛋白 `GFP_MBD_protein`，从而引发其降解。因此：\n- `TEVp_protein` 充当催化剂，应具有 SBO:0000019 角色。\n- `GFP_MBD_protein` 是被降解的物质，应具有 SBO:0000642 角色。\n\n现在评估所提供的选项：\n- 选项 A 将 `TEVp_protein` 分配为 catalyst (SBO:0000019)，将 `GFP_MBD_protein` 分配为 degraded (SBO:0000642)。这符合降解相互作用的正确角色。\n- 选项 B 错误地交换了角色，将靶蛋白分配为 catalyst，而将蛋白酶分配为 degraded，这与生物学功能相矛盾。\n- 选项 C 使用了“reactant” (SBO:0000010) 和“product” (SBO:0000011)，它们是通用的转化角色，并且错误地将 `TEVp_protein` 分配为 product；TEVp 在此相互作用中不被产生，而是起催化作用。\n- 选项 D 使用了“promoter” (SBO:0000250) 和“terminator” (SBO:0000316)，这些是 DNA 水平的序列特征角色，与蛋白质降解相互作用无关。\n- 选项 E 使用了“inhibitor” (SBO:0000020) 和“inhibited” (SBO:0000643)，它们描述的是抑制相互作用，而非降解。\n\n因此，唯一正确的 `Participation` 元素集在选项 A 中。", "answer": "$$\\boxed{A}$$", "id": "2066840"}, {"introduction": "一个完整的生物设计不仅需要定义其功能，还必须精确描述其物理结构和组装方式。本练习将展示如何运用 SBOL 的 `SequenceConstraint` 对象来验证一个基于金门（Golden Gate）组装方法的基因回路设计。你将学习如何通过检查设计中指定的粘性末端序列是否匹配，来确保连接的生物化学有效性，这是将抽象设计转化为实验室可行方案的关键一步[@problem_id:2066806]。", "problem": "一位合成生物学家正在使用 IIs 型限制性内切酶 BsaI，通过 Golden Gate 组装方法设计一个细菌表达盒。该设计规定了遗传部件的线性顺序，并使用合成生物学开放语言 (SBOL) 进行了正式描述。该设计由四个基本部件组成：一个启动子、一个核糖体结合位点 (RBS)、一个编码序列 (CDS) 和一个终止子。\n\n该项目的 Golden Gate 组装方案要求，对于任意两个要连接在一起的部件，前一个部件 3' 端的 4 碱基对 (bp) 黏性末端必须与后一个部件 5' 端的 4 碱基对黏性末端完全相同。\n\nSBOL 文档包含用于定义每个遗传部件的 `ComponentDefinition` 对象，以及用于定义它们相对顺序的 `SequenceConstraint` 对象。以下是 SBOL 文档中相关数据的摘要。\n\n**部件定义：**\n每个部件都由一个 `ComponentDefinition` 定义，具有唯一的统一资源标识符 (URI) 和指定的 5' 和 3' 黏性末端序列。\n\n| URI 片段 | 部件角色 | 5' 黏性末端 | 3' 黏性末端 |\n| :--- | :--- | :--- | :--- |\n| `p_J23100` | 启动子 | `GGAG` | `AATG` |\n| `rbs_B0034` | RBS | `AATG` | `TTCG` |\n| `cds_sfGFP` | CDS | `TTCG` | `GCTC` |\n| `t_L3S2P21` | 终止子 | `GCTA` | `CGCT` |\n\n**序列约束：**\n组装顺序由 `SequenceConstraint` 对象指定。每个约束都有一个 URI，并定义了一个必须在 `object`（后继部件）之前的 `subject`（前置部件）。\n\n| 约束 URI | Subject URI 片段 | Object URI 片段 |\n| :--- | :--- | :--- |\n| `http://example.org/sc/1` | `p_J23100` | `rbs_B0034` |\n| `http://example.org/sc/2` | `rbs_B0034` | `cds_sfGFP` |\n| `http://example.org/sc/3` | `cds_sfGFP` | `t_L3S2P21` |\n\n在设计过程中出现了一个错误，导致其中一个 `SequenceConstraint` 根据 Golden Gate 组装规则代表了一个生化上无效的连接节点。请找出无效 `SequenceConstraint` 的 URI。\n\nA. `http://example.org/sc/1`\n\nB. `http://example.org/sc/2`\n\nC. `http://example.org/sc/3`\n\nD. 所有约束都代表有效的连接。", "solution": "使用 IIs 型酶的 Golden Gate 组装要求，对于两个要连接的部件，前一个部件 3' 端的 4 bp 黏性末端必须与后一个部件 5' 端的 4 bp 黏性末端完全相同。\n\n逐一检查每个 SequenceConstraint 与黏性末端的匹配情况：\n\n1) 约束 http://example.org/sc/1：subject p_J23100 在 object rbs_B0034 之前。p_J23100 的 3' 黏性末端是 AATG，rbs_B0034 的 5' 黏性末端是 AATG。两者相同，因此这个连接是有效的。\n\n2) 约束 http://example.org/sc/2：subject rbs_B0034 在 object cds_sfGFP 之前。rbs_B0034 的 3' 黏性末端是 TTCG，cds_sfGFP 的 5' 黏性末端是 TTCG。两者相同，因此这个连接是有效的。\n\n3) 约束 http://example.org/sc/3：subject cds_sfGFP 在 object t_L3S2P21 之前。cds_sfGFP 的 3' 黏性末端是 GCTC，而 t_L3S2P21 的 5' 黏性末端是 GCTA。两者不同（第四个位置上 C 与 A 不同），因此这个连接是无效的。\n\n因此，无效的 SequenceConstraint 是 http://example.org/sc/3。", "answer": "$$\\boxed{C}$$", "id": "2066806"}, {"introduction": "随着生物回路变得越来越复杂，扁平化的设计图已不足以管理其复杂性。因此，SBOL 支持分层和模块化的设计，这与软件工程中的库和函数概念类似。在这个高级练习中，你将探索如何使用 `ModuleDefinition` 和 `MapsTo` 等概念来构建一个复杂的前馈环路，通过将两个独立的子系统（传感器和执行器）“连接”起来，从而掌握构建可扩展和可重用生物系统的核心技能[@problem_id:2066811]。", "problem": "一个合成生物学研究团队正在设计一个非相干1型前馈环（I1-FFL），以在*大肠杆菌*（*E. coli*）中产生产生脉冲式的蛋白质表达。该回路的功能设计如下：\n1.  输入分子阿拉伯糖（arabinose）诱导转录阻遏蛋白TetR的表达。\n2.  阿拉伯糖还独立激活绿色荧光蛋白（GFP）的表达。此激活由AraC蛋白介导，该蛋白由一个单独的组成型表达基因提供。\n3.  新合成的TetR蛋白接着会抑制并关闭GFP的表达。\n\n为了正式地描述这个设计，该团队使用合成生物学开放语言（SBOL）。他们决定采用一种层次化结构：\n- 一个名为`IFFL_System`的顶层`ModuleDefinition`封装了整个设计。\n- `IFFL_System`包含两个`Module`实例（子模块）：\n    1.  `sensor_subsystem`，它是名为`SensorModuleDef`的`ModuleDefinition`的实例化。该模块的目的是感应阿拉伯糖并产生TetR。它有一个用于`TetR_protein`的正式输出端口（一个`FunctionalComponent`）。\n    2.  `actuator_subsystem`，它是名为`ActuatorModuleDef`的`ModuleDefinition`的实例化。该模块的目的是产生GFP。它有一个用于`Arabinose`的正式输入端口和另一个用于`TetR_protein`的正式输入端口。\n- `IFFL_System`本身有一个用于`Arabinose`的顶层输入端口和一个用于`GFP`的顶层输出端口。\n\n在SBOL中，模块实例之间的连接不是直接建立的。相反，一个`Module`实例使用`MapsTo`对象将其内部的`FunctionalComponent`（其端口）链接到其父容器（本例中为`IFFL_System`）中定义的`FunctionalComponent`。要将`sensor_subsystem`的输出连接到`actuator_subsystem`的输入，它们各自的端口必须映射到`IFFL_System`设计中代表共享信号的同一个`FunctionalComponent`上。\n\n鉴于这种层次化结构和SBOL的布线规则，以下哪个陈述正确描述了在`IFFL_System` `ModuleDefinition`中确保电路正确连接所必需的一组映射？\n\nA. 必须有一个`MapsTo`对象，将`IFFL_System`的顶层`Arabinose`输入端口专门链接到`sensor_subsystem` `Module`实例的`Arabinose`输入端口。\n\nB. 需要两个`MapsTo`对象：一个将`sensor_subsystem` `Module`实例的`TetR_protein`输出端口链接到`IFFL_System`内代表TetR蛋白信号的共享`FunctionalComponent`，第二个将同一个共享的`FunctionalComponent`链接到`actuator_subsystem` `Module`实例的`TetR_protein`输入端口。\n\nC. 必须创建一个`MapsTo`对象，直接将`actuator_subsystem`内的`gfp_cds` `ComponentDefinition`链接到`sensor_subsystem`内的`tetR_cds` `ComponentDefinition`。\n\nD. 必须有一个`MapsTo`对象，将`actuator_subsystem`的`GFP`输出端口链接回`sensor_subsystem`的`Arabinose`输入端口，以创建一个反馈回路。\n\nE. 必须创建一个`MapsTo`对象，直接将`sensor_subsystem` `Module`实例的`TetR_protein`输出端口链接到`actuator_subsystem` `Module`实例的`TetR_protein`输入端口。", "solution": "1. 用SBOL术语定义层次结构和端口。顶层设计是一个名为`IFFL_System`的`ModuleDefinition`，它包含：\n- 作为共享信号端口的顶层`FunctionalComponent`：一个用于阿拉伯糖的输入，一个用于TetR蛋白的内部共享信号，以及一个用于GFP的输出。\n- 两个`Module`实例：`sensor_subsystem`（实例化`SensorModuleDef`），它产生TetR并导出一个`TetR_protein`输出端口；`actuator_subsystem`（实例化`ActuatorModuleDef`），它消耗阿拉伯糖和`TetR_protein`并产生GFP。\n\n2. 陈述SBOL布线规则。在SBOL中，一个`Module`实例不能将其内部的`FunctionalComponent`直接连接到兄弟`Module`的`FunctionalComponent`。相反，每个`Module`实例使用`MapsTo`对象将其内部的`FunctionalComponent`（端口）映射到父`ModuleDefinition`中定义的`FunctionalComponent`。形式上，如果一个子模块有一个内部端口$p_{child}$，而父模块有一个代表相同信号的`FunctionalComponent` $P_{parent}$，那么一个`MapsTo`就建立了关系$p_{child} \\leftrightarrow P_{parent}$。兄弟模块通过将它们各自的端口映射到同一个父级`FunctionalComponent`来进行通信。\n\n3. 将此规则应用于TetR的连接。为了将TetR信号从`sensor_subsystem`路由到`actuator_subsystem`，两个模块都必须将其TetR端口映射到`IFFL_System`内代表TetR蛋白的同一个父级`FunctionalComponent`。这需要：\n- `sensor_subsystem`中的一个`MapsTo`，将其`TetR_protein`输出端口链接到父级的TetR `FunctionalComponent`。\n- `actuator_subsystem`中的一个`MapsTo`，将其`TetR_protein`输入端口链接到同一个父级的TetR `FunctionalComponent`。\n这两个映射共同实现了传感器TetR输出和执行器TetR输入之间的有效连接。\n\n4. 评估选项：\n- 选项A不正确，因为阿拉伯糖必须对任何消耗它的子模块都可用。由于`actuator_subsystem`有一个`Arabinose`输入端口，顶层的`Arabinose` `FunctionalComponent`必须同时映射到`sensor_subsystem`和`actuator_subsystem`的端口；仅仅映射到传感器是不够的。\n- 选项B是正确的，因为它指明了需要两个`MapsTo`对象，将两个子模块的TetR端口连接到一个共享的父级TetR `FunctionalComponent`，这是SBOL规定的用于在兄弟模块之间布线信号的模式。\n- 选项C不正确，因为`MapsTo`对象映射的是`FunctionalComponent`（实例），而不是`ComponentDefinition`（类型）。将`gfp_cds`链接到`tetR_cds`在语义上也与预期的信号布线不符。\n- 选项D不正确，因为它提议将GFP输出映射到阿拉伯糖输入，这不仅会创建一个非预期的反馈回路，而且违反了`MapsTo`必须映射同一信号的相应表示这一要求。\n- 选项E不正确，因为SBOL不允许在兄弟模块之间直接使用单个`MapsTo`进行映射；映射必须通过一个共同的父级`FunctionalComponent`来完成。\n\n因此，只有选项B中的描述符合在`IFFL_System`层次结构内正确连接TetR信号所需的SBOL映射。", "answer": "$$\\boxed{B}$$", "id": "2066811"}]}