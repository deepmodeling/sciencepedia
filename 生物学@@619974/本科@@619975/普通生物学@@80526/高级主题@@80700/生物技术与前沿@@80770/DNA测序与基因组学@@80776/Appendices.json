{"hands_on_practices": [{"introduction": "在鸟枪法测序 (shotgun sequencing) 中，我们面临一个核心挑战：一个完整的基因组被分解成数百万个短的DNA序列片段，即“读长” (reads)。重建基因组的第一步，就是找出这些读长之间的重叠部分，并将它们拼接成更长的连续序列，也就是“重叠群” (contigs)。本练习 [@problem_id:2290971] 将让你亲手体验这一核心过程，也被称为“重叠-布局-共有” (overlap-layout-consensus) 组装策略。通过解决这个谜题，你将对如何从一堆杂乱的片段中重建出完整的序列建立起基础而直观的理解。", "problem": "在一个基因组测序项目中，从一个生物体染色体的单一、非重复区域获得了三个短的、重叠的 DNA 片段，称为“读段”（reads）。您的任务是通过找到这些读段之间的正确重叠来进行 *de novo* 组装，以重建单个、最长的可能连续 DNA 序列，即重叠群（contig）。这三个读段如下所示：\n\n- 读段 1: `AGCTTAGGCT`\n- 读段 2: `AGGCTACGT`\n- 读段 3: `ACGTACGAT`\n\n请确定组装好的重叠群的完整序列。答案应为代表该 DNA 序列的单个字符串。", "solution": "我们需要通过最大化读段之间的重叠来组装一个最短公共超串。定义两个字符串 $X$ 和 $Y$ 之间的重叠函数为\n$$\n\\operatorname{ovl}(X,Y)=\\max\\{k \\in \\mathbb{N} \\mid \\text{the suffix of } X \\text{ of length } k \\text{ equals the prefix of } Y \\text{ of length } k\\}.\n$$\n计算成对的有向重叠：\n- 对于 $R_{1}=\\text{AGCTTAGGCT}$ 和 $R_{2}=\\text{AGGCTACGT}$，最长重叠为 $\\operatorname{ovl}(R_{1},R_{2})=5$，匹配的子串是 $\\text{AGGCT}$。不存在更长的匹配，因为 $R_{1}$ 的长度为 6 的后缀是 $\\text{TAGGCT}$，与 $R_{2}$ 的前缀不相等。\n- 对于 $R_{2}$ 和 $R_{3}=\\text{ACGTACGAT}$，最长重叠为 $\\operatorname{ovl}(R_{2},R_{3})=4$，匹配的子串是 $\\text{ACGT}$。长度为 5 的重叠会要求 $R_{2}$ 的后缀 $\\text{TACGT}$ 与 $R_{3}$ 的前缀匹配，但实际上并不匹配。\n- 所有其他成对的有向重叠，如 $(R_{1},R_{3})$、$(R_{3},R_{1})$、$(R_{2},R_{1})$ 和 $(R_{3},R_{2})$，均为零，因为在每种情况下，第一个字符串的非平凡后缀都不等于第二个字符串的前缀。\n\n因此，唯一具有最大重叠的顺序是 $R_{1} \\rightarrow R_{2} \\rightarrow R_{3}$。通过拼接并移除重叠部分来进行组装：\n- 使用 5 个碱基的重叠 $\\text{AGGCT}$ 合并 $R_{1}$ 和 $R_{2}$，得到 $\\text{AGCTTAGGCTACGT}$。\n- 将此结果与 $R_{3}$ 合并，使用 4 个碱基的重叠 $\\text{ACGT}$（它是当前字符串的后缀，也是 $R_{3}$ 的前缀），得到最终的重叠群 $\\text{AGCTTAGGCTACGTACGAT}$。\n\n令 $\\ell(\\cdot)$ 表示字符串长度。最终长度为\n$$\n\\ell(R_{1})+\\ell(R_{2})-\\operatorname{ovl}(R_{1},R_{2})+\\ell(R_{3})-\\operatorname{ovl}(R_{2},R_{3})=10+9-5+9-4=19,\n$$\n与组装出的序列长度一致。因此，组装出的重叠群是 AGCTTAGGCTACGTACGAT。", "answer": "$$\\boxed{AGCTTAGGCTACGTACGAT}$$", "id": "2290971"}, {"introduction": "尽管直接的重叠拼接方法很直观，但当处理包含大量重复序列的大型基因组时，其计算复杂度会变得极高。为了应对这一挑战，现代基因组组装算法采用了一种更高效、更强大的数据结构——德布鲁因图 (De Bruijn graph)。在这种方法中，我们将读长分解成更小的、固定长度为 $k$ 的重叠片段 (k-mers)，并将其中的连接关系表示为一个图。本练习 [@problem_id:2290987] 将指导你手动构建一个德布鲁因图，并通过寻找一条能够重建原始序列的路径，来揭示大规模基因组组装背后的计算引擎。", "problem": "一位分子生物学家正在对一种新发现的嗜极细菌的短线性DNA片段进行 *de novo* 基因组组装。测序过程产生了一组短的、重叠的读段（reads）。为了重建原始DNA序列，该生物学家采用了一种德布鲁因图（De Bruijn graph）组装策略。该过程首先将所有测序读段分解为一个完整的k-mer集合，k-mer是长度为 $k$ 的短子串。\n\n对于本次特定的组装，使用了 $k=4$ 的值。从读段中获得的全部4-mer的完整、无序集合是：\n`{ ATGC, TGCG, GCGT, CGTA, GTAC, TACG, ACGT, CGTG }`\n\n您的任务是从这组4-mer中重建出原始的、连续的DNA序列。为此，您必须首先构建相应的德布鲁因图。在这个特定的图模型中：\n1.  图的节点（或顶点）是所有唯一的(k-1)-mer。(k-1)-mer是长度为 $k-1=3$ 的序列。这些节点源自给定集合中每个4-mer的前缀（前3个碱基）和后缀（后3个碱基）。\n2.  当且仅当集合中存在一个4-mer，其前缀为 `U` 且后缀为 `V` 时，才从节点 `U` 到节点 `V` 绘制一条有向边。集合中的每个4-mer都精确对应图中的一条有向边。\n\n通过找到那条遍历每条边一次且仅一次的唯一路径，确定原始线性片段的完整DNA序列。", "solution": "该问题要求我们使用德布鲁因图从一组k-mer中重建一个DNA序列。给定的 $k=4$ 的k-mer集合是 `{ATGC, TGCG, GCGT, CGTA, GTAC, TACG, ACGT, CGTG}`。\n\n**步骤1：确定德布鲁因图的节点。**\n节点是唯一的(k-1)-mer，即3-mer（三核苷酸）。我们可以通过列出所有给定的4-mer的前缀和后缀来找到它们。\n\n这些4-mer是：\n- `ATGC`: 前缀 `ATG`，后缀 `TGC`\n- `TGCG`: 前缀 `TGC`，后缀 `GCG`\n- `GCGT`: 前缀 `GCG`，后缀 `CGT`\n- `CGTA`: 前缀 `CGT`，后缀 `GTA`\n- `GTAC`: 前缀 `GTA`，后缀 `TAC`\n- `TACG`: 前缀 `TAC`，后缀 `ACG`\n- `ACGT`: 前缀 `ACG`，后缀 `CGT`\n- `CGTG`: 前缀 `CGT`，后缀 `GTG`\n\n所有前缀的集合是 `{ATG, TGC, GCG, CGT, GTA, TAC, ACG}`。\n所有后缀的集合是 `{TGC, GCG, CGT, GTA, TAC, ACG, GTG}`。\n\n唯一的节点的完整集合是这两个集合的并集：\n节点 = `{ATG, TGC, GCG, CGT, GTA, TAC, ACG, GTG}`。\n\n**步骤2：构建有向边。**\n每个4-mer对应一条从其前缀节点到其后缀节点的有向边。\n\n- `ATGC` → 从 `ATG` 到 `TGC` 的边\n- `TGCG` → 从 `TGC` 到 `GCG` 的边\n- `GCGT` → 从 `GCG` 到 `CGT` 的边\n- `CGTA` → 从 `CGT` 到 `GTA` 的边\n- `GTAC` → 从 `GTA` 到 `TAC` 的边\n- `TACG` → 从 `TAC` 到 `ACG` 的边\n- `ACGT` → 从 `ACG` 到 `CGT` 的边\n- `CGTG` → 从 `CGT` 到 `GTG` 的边\n\n**步骤3：找到欧拉路径的起始和结束节点。**\n重建序列需要找到一条欧拉路径，即一条访问每条边一次且仅一次的路径。对于有向图，存在欧拉路径的充要条件是：图是连通的，并且最多一个顶点的 `出度 - 入度 = 1`，最多一个顶点的 `入度 - 出度 = 1`，而所有其他顶点的 `入度 = 出度`。\n\n我们来计算每个节点的入度和出度：\n- **ATG**: 出度 = 1 (到 TGC)，入度 = 0。差值 = +1。这是起始节点。\n- **TGC**: 出度 = 1 (到 GCG)，入度 = 1 (来自 ATG)。差值 = 0。\n- **GCG**: 出度 = 1 (到 CGT)，入度 = 1 (来自 TGC)。差值 = 0。\n- **CGT**: 出度 = 2 (到 GTA, 到 GTG)，入度 = 2 (来自 GCG, 来自 ACG)。差值 = 0。\n- **GTA**: 出度 = 1 (到 TAC)，入度 = 1 (来自 CGT)。差值 = 0。\n- **TAC**: 出度 = 1 (到 ACG)，入度 = 1 (来自 GTA)。差值 = 0。\n- **ACG**: 出度 = 1 (到 CGT)，入度 = 1 (来自 TAC)。差值 = 0。\n- **GTG**: 出度 = 0，入度 = 1 (来自 CGT)。差值 = -1。这是结束节点。\n\n该图有一个起始节点（`ATG`）和一个结束节点（`GTG`），因此存在一条唯一的欧拉路径。\n\n**步骤4：追踪欧拉路径并重建序列。**\n路径从节点 `ATG` 开始。序列以起始节点的字符串 `ATG` 开始。然后，我们追加路径中遍历的每个后续k-mer的最后一个字符。\n\n1.  从 `ATG` 开始。唯一的出边对应k-mer `ATGC`。当前序列：`ATGC`。我们现在在节点 `TGC`。\n2.  从 `TGC` 出发，出边对应 `TGCG`。我们追加最后一个字符 `G`。序列：`ATGCG`。我们现在在节点 `GCG`。\n3.  从 `GCG` 出发，出边对应 `GCGT`。我们追加 `T`。序列：`ATGCGT`。我们现在在节点 `CGT`。\n4.  从 `CGT` 出发，有两条出边，`CGTA` 和 `CGTG`。我们知道 `GTG` 是整个路径的最终节点，所以除非别无选择，否则我们不应该先走通往 `GTG` 的边。我们选择对应 `CGTA` 的边。我们追加 `A`。序列：`ATGCGTA`。我们现在在节点 `GTA`。\n5.  从 `GTA` 出发，出边对应 `GTAC`。追加 `C`。序列：`ATGCGTAC`。我们现在在节点 `TAC`。\n6.  从 `TAC` 出发，出边对应 `TACG`。追加 `G`。序列：`ATGCGTACG`。我们现在在节点 `ACG`。\n7.  从 `ACG` 出发，出边对应 `ACGT`。追加 `T`。序列：`ATGCGTACGT`。这让我们回到了节点 `CGT`。\n8.  我们再次位于 `CGT`。对应 `CGTA` 的边已被使用。从 `CGT` 出发的唯一未使用的边是对应 `CGTG` 的那条。我们遍历这条边。追加 `G`。序列：`ATGCGTACGTG`。我们到达最终节点 `GTG`。\n\n所有8条边（k-mer）都已被使用一次且仅一次。路径从 `ATG` 开始，到 `GTG` 结束。最终重建的序列就是我们构建的字符串。\n\n最终序列：`ATGCGTACGTG`。", "answer": "$$\\boxed{ATGCGTACGTG}$$", "id": "2290987"}, {"introduction": "将读长组装成重叠群 (contigs) 之后，我们得到的仍然是一系列独立的序列片段。下一个挑战，称为“脚手架搭建” (scaffolding)，是确定这些重叠群沿着染色体的正确顺序和方向。本练习 [@problem_id:2290962] 介绍了一种前沿技术——高通量染色体构象捕获 (Hi-C)，该技术可以绘制出染色体的三维折叠图谱。利用“线性距离越近的序列在三维空间中相互作用越频繁”这一原理，你将能够解决这个难题，将零散的重叠群排列成一个最终的、染色体级别的脚手架。", "problem": "一个基因组学研究团队正在为一个新发现的生物体组装草图基因组。他们获得了五个大的DNA序列，称为重叠群（contigs），标记为 C1、C2、C3、C4 和 C5。这些重叠群沿着一条染色体的线性顺序和方向是未知的。为了解决这个问题，他们进行了一项高通量染色体构象捕获（Hi-C）实验。这项技术测量了基因组不同片段之间的物理相互作用频率。其基本原理是，沿着染色体线性序列彼此更近的片段，在三维空间中会更频繁地相互作用。\n\n在本分析中，每个重叠群被视为有两个不同的末端：“头端”（H）和“尾端”（T）。实验测量了来自这五个重叠群的所有可能的末端对之间的相互作用频率。以下是所有测量值高于80个单位的成对相互作用频率列表。所有其他成对相互作用的频率都低于此阈值。\n\n*   `C1(H)`与`C1(T)`: 320\n*   `C2(H)`与`C2(T)`: 305\n*   `C3(H)`与`C3(T)`: 315\n*   `C4(H)`与`C4(T)`: 290\n*   `C5(H)`与`C5(T)`: 330\n*   `C1(H)`与`C5(H)`: 245\n*   `C1(T)`与`C4(T)`: 255\n*   `C2(H)`与`C3(H)`: 260\n*   `C2(T)`与`C5(T)`: 250\n*   `C1(T)`与`C5(H)`: 95\n*   `C4(T)`与`C2(T)`: 85\n\n基于这些相互作用频率，确定这五个重叠群最可能的线性排列和方向。最终的组装结果应表示为一个字符串。例如，`C1(+)-C2(-)-...`。`(+)` 符号表示该重叠群处于其“正向”（在从左到右读取组装结果时，头端在尾端之前），而 `(-)` 符号表示“反向”（尾端在头端之前）。按照惯例，在组装链两端的两个重叠群中，最终的组装字符串必须以数字索引较小的那个重叠群开始。\n\n以下哪项代表了正确的组装结果？\n\nA) C3(-)-C2(+)-C5(-)-C1(+)-C4(-)\n\nB) C4(+)-C1(-)-C5(+)-C2(-)-C3(+)\n\nC) C1(+)-C2(+)-C3(+)-C4(+)-C5(+)\n\nD) C4(-)-C1(+)-C2(-)-C5(+)-C3(-)\n\nE) C2(+)-C3(-)-C1(+)-C5(-)-C4(+)", "solution": "我们假设，在线性组装中，相邻末端之间的 Hi-C 接触最强。每个重叠群间的邻接关系由在连接处相遇的末端类型来表征。如果左边的重叠群是 $A$ 右边的是 $B$，那么观测到的末端对类型决定了它们的方向：\n- 如果连接处是 $A(T)$ 与 $B(H)$（表示为 TH），那么方向是 $A(+)$ 和 $B(+)$。\n- 如果连接处是 $A(T)$ 与 $B(T)$（表示为 TT），那么方向是 $A(+)$ 和 $B(-)$。\n- 如果连接处是 $A(H)$ 与 $B(H)$（表示为 HH），那么方向是 $A(-)$ 和 $B(+)$。\n- 如果连接处是 $A(H)$ 与 $B(T)$（表示为 HT），那么方向是 $A(-)$ 和 $B(-)$。\n\n在重叠群间的测量值中，最高的四个值是：\n- $C2(H)$ 与 $C3(H)$：HH，值为 $260$，\n- $C1(T)$ 与 $C4(T)$：TT，值为 $255$，\n- $C2(T)$ 与 $C5(T)$：TT，值为 $250$，\n- $C1(H)$ 与 $C5(H)$：HH，值为 $245$。\n\n这四个最强的信号被推断为连接五个重叠群的四个邻接点。剩下两个较弱的信号（$95$ 和 $85$）不必是连接点。\n\n将这四个邻接关系中的每一个都转换成方向约束（不考虑左右顺序）：\n- $C2(H)$ 与 $C3(H)$ 是 HH，所以邻接关系是 $C2(-)$ 邻接 $C3(+)$，其中左侧成员是带 `-` 的那个；因此，是 $C2(-)-C3(+)$ 或 $C3(-)-C2(+)$。\n- $C1(T)$ 与 $C4(T)$ 是 TT，所以邻接关系是 $C1(+)$ 邻接 $C4(-)$，其中左侧成员是带 `+` 的那个；因此，是 $C1(+)-C4(-)$ 或 $C4(+)-C1(-)$。\n- $C2(T)$ 与 $C5(T)$ 是 TT，所以是 $C2(+)-C5(-)$ 或 $C5(+)-C2(-)$。\n- $C1(H)$ 与 $C5(H)$ 是 HH，所以是 $C1(-)-C5(+)$ 或 $C5(-)-C1(+)$。\n\n统计参与度后发现，$C3$ 和 $C4$ 在四个最强信号对中都只出现一次，因此它们是链的末端重叠群。因此，该链必须从 $\\{C3,C4\\}$ 中的一个开始，并在另一个结束。同时与 $C5$ 相邻的两个重叠群必定是 $C2$ 和 $C1$，因为强邻接关系中既包括 $C2$–$C5$ 也包括 $C1$–$C5$。因此，与所有四个邻接关系一致的唯一链条是\n$$C3 \\text{ — } C2 \\text{ — } C5 \\text{ — } C1 \\text{ — } C4,$$\n（不考虑反转的情况）。使用每个连接点的末端对类型来分配方向：\n- $C3$–$C2$ 使用 HH 连接，所以是 $C3(-)-C2(+)$。\n- $C2$–$C5$ 使用 TT 连接，所以是 $C2(+)-C5(-)$。\n- $C5$–$C1$ 使用 HH 连接，所以是 $C5(-)-C1(+)$。\n- $C1$–$C4$ 使用 TT 连接，所以是 $C1(+)-C4(-)$。\n\n因此，一个一致的组装结果是\n$$C3(-)-C2(+)-C5(-)-C1(+)-C4(-).$$\n这个结果与所有四个最强的相互作用完全匹配：\n- $C2(H)$–$C3(H)$ (HH)，\n- $C2(T)$–$C5(T)$ (TT)，\n- $C1(H)$–$C5(H)$ (HH)，\n- $C1(T)$–$C4(T)$ (TT)。\n\n这两个较弱的信号，$C1(T)$–$C5(H)$ 和 $C4(T)$–$C2(T)$，属于非连接点的邻近作用，不必是邻接关系。由于末端是 $C3$ 和 $C4$，根据惯例，组装字符串应以索引较小的 $C3$ 开始，这就确定了上述的组装方向。在所有选项中，这正是选项 A。", "answer": "$$\\boxed{A}$$", "id": "2290962"}]}