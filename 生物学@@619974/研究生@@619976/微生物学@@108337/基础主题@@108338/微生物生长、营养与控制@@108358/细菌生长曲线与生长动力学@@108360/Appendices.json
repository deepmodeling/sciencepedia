{"hands_on_practices": [{"introduction": "比增长速率 $\\mu$ 是微生物动力学中的一个核心参数。本练习旨在通过一个实际的编程任务，指导您如何从含有噪声的实验数据中稳健地估计 $\\mu$ 及其置信区间，这依赖于对指数增长数据进行对数线性化处理的统计学原理 [@problem_id:2537745]。掌握这项技能对于任何从事定量微生物学研究的科学家来说都至关重要。", "problem": "处于指数生长期的微生物培养物遵循基本的质量作用生长定律，即活细胞计数的瞬时变化率与当前计数成正比。用符号表示，如果 $N(t)$ 表示时间 $t$ 时的活细胞计数，那么在指数生长期，该速率满足一个具有恒定比例参数的一阶微分方程。活细胞的测量通常以菌落形成单位 (CFU) 进行，这会产生整数计数，其中包含由取样和铺板引起的测量噪声。为了从带有噪声的离散观测值中估计比生长速率参数，一种常用且科学上合理的策略是，对计数进行对数转换，然后对时间拟合一条直线。\n\n你的任务是编写一个完整、可运行的程序。对于每个提供的数据集，该程序仅使用指数生长期内比生长速率恒定以及噪声对计数是乘性的这一假设，来推导一个估计流程。该流程将离散的计数时间序列映射到一个恒定比生长速率的估计值，以及在指定置信水平下的一个双侧置信区间。你必须论证该误差模型的合理性，解释为何在真实的计数测量过程中，对数转换能在转换后的空间中产生近似的加性、同方差噪声。然后，为每个数据集在代码中实现以下步骤：\n\n- 对观测计数进行自然对数转换，以获得转换后观测值关于时间的线性模型。\n- 使用普通最小二乘法 (OLS) 将转换后的观测值作为时间的函数，拟合一条带截距的直线。\n- 从拟合结果中，提取斜率的估计值（其对应于比生长速率），并使用适用于 OLS 残差的有限样本参数分布，计算在指定置信水平下的双侧置信区间。\n- 将所有数值答案报告为小数点后保留六位的小数浮点数。\n\n假设和单位：\n- 将所有给定的时间点视为处于指数生长期内，具有恒定的比生长速率参数。使用自然对数，从而使比生长速率以小时的倒数表示。\n- 置信水平必须为 $95$%。比生长速率及其置信区间的界限均以小时的倒数表示，即 $\\mathrm{h}^{-1}$。\n- 所有时间值的单位均为小时，所有计数值的单位均为 CFU（菌落形成单位）。输出必须只包含数字，不含单位符号；单位约定已在此处指定。\n\n测试套件：\n对于每种情况，给定时间 $t$ 和观测计数 $N_{\\mathrm{obs}}$。\n\n- 情况 1（理想路径，中等噪声）：$t = [0.0, 0.5, 1.0, 1.5, 2.0]$, $N_{\\mathrm{obs}} = [970000, 1456640, 1960000, 2969848, 4040000]$。\n- 情况 2（四舍五入内呈精确指数，噪声接近于零）：$t = [0.0, 1.0, 2.0, 3.0]$, $N_{\\mathrm{obs}} = [200000, 298365, 445108, 664023]$。\n- 情况 3（低计数，相对噪声较高）：$t = [0.0, 0.3, 0.6, 0.9, 1.2]$, $N_{\\mathrm{obs}} = [600, 556, 1355, 942, 2809]$。\n- 情况 4（边界情况，最少数据点）：$t = [0.0, 4.0, 8.0]$, $N_{\\mathrm{obs}} = [9800000, 22700508, 50025300]$。\n\n你的程序必须按上述顺序为每种情况计算以 $\\mathrm{h}^{-1}$ 为单位的估计比生长速率 $\\hat{\\mu}$ 及其 $95$% 置信区间的下限和上限。计算需假设计数自然对数值与时间之间存在带截距的线性模型，并使用基于适当的有限样本分布的双侧区间。\n\n最终输出格式：\n- 你的程序必须生成单行输出，其中包含一个列表的列表。对于每种情况，输出一个包含三个数字 $[\\hat{\\mu}, \\mathrm{CI}_{\\mathrm{low}}, \\mathrm{CI}_{\\mathrm{high}}]$ 的列表。将这些针对每种情况的列表按顺序连接在一个外部列表中。所有数字必须四舍五入到小数点后恰好六位。\n- 例如，两个假设情况的输出将如下所示：$[[0.500000,0.450000,0.550000],[0.250000,0.200000,0.300000]]$。", "solution": "从指数生长期中混合均匀的细菌种群的指数生长质量作用定律开始。令 $N(t)$ 表示时间 $t$ 时的活细胞计数。基本微分方程为：\n$$\n\\frac{dN}{dt} = \\mu N,\n$$\n其中 $\\mu$ 是比生长速率，在指数生长期内假定为常数。分离变量并从 $t=0$ 积分到一般时间 $t$ 可得：\n$$\n\\int_{N(0)}^{N(t)} \\frac{dN}{N} = \\int_0^t \\mu \\, dt,\n$$\n化简为：\n$$\n\\ln N(t) - \\ln N(0) = \\mu t.\n$$\n等价地，解为 $N(t) = N(0) \\exp(\\mu t)$，因此：\n$$\n\\ln N(t) = \\ln N(0) + \\mu t.\n$$\n这表明，如果生长速率是恒定的，那么计数的自然对数值是关于时间的仿射函数（即带截距的线性函数），其斜率为 $\\mu$，截距为 $\\ln N(0)$。\n\n误差模型的合理性论证。在离散时间 $t_i$ 的观测计数 $N_{\\mathrm{obs}}(t_i)$ 源于取样和铺板。两个现实的噪声来源是：(i) 计数噪声，对于大计数值，它能很好地被泊松分布近似，其方差与均值成正比；(ii) 乘性过程和操作可变性（例如，移液操作），这会在很宽的计数范围内引入近似恒定的相对误差。一个简约且广泛使用的模型将这些因素组合为真实计数上的乘性噪声：$N_{\\mathrm{obs}}(t_i) = N(t_i) \\cdot \\varepsilon_i$，其中 $\\varepsilon_i$ 是独立同分布的正随机因子，满足 $\\mathbb{E}[\\varepsilon_i] \\approx 1$。取自然对数可得：\n$$\n\\ln N_{\\mathrm{obs}}(t_i) = \\ln N(t_i) + \\ln \\varepsilon_i = \\left(\\ln N(0) + \\mu t_i\\right) + e_i,\n$$\n其中 $e_i = \\ln \\varepsilon_i$ 是均值为零的扰动项。如果 $\\varepsilon_i$ 近似服从对数正态分布（这是乘性误差下的一个标准且有经验支持的选择），那么 $e_i$ 近似服从具有恒定方差的高斯分布。即使原始计数噪声是泊松分布，满足 $\\operatorname{Var}[N_{\\mathrm{obs}}] \\propto \\mathbb{E}[N_{\\mathrm{obs}}]$，对于足够大的计数值，delta 方法的论证表明 $\\operatorname{Var}[\\ln N_{\\mathrm{obs}}] \\approx \\operatorname{Var}[N_{\\mathrm{obs}}]/\\mathbb{E}[N_{\\mathrm{obs}}]^2 \\propto 1/\\mathbb{E}[N_{\\mathrm{obs}}]$，这个值更小，并且在相对误差占主导的范围内近似恒定；与乘性操作可变性相结合，在对数空间中产生了近似的同方差加性误差。因此，在这些条件下，对 $\\ln N_{\\mathrm{obs}}(t)$ 关于 $t$ 进行带截距的普通最小二乘法 (OLS) 线性回归，是 $\\mu$ 的一个合理且有效的估计量。\n\n估计流程。令观测时间为 $x_i = t_i$，转换后的响应值为 $y_i = \\ln N_{\\mathrm{obs}}(t_i)$，其中 $i=1,\\dots,n$。拟合线性模型：\n$$\ny_i = \\beta_0 + \\beta_1 x_i + \\epsilon_i,\n$$\n其中 $\\epsilon_i$ 独立同分布，均值为 0，方差为 $\\sigma^2$。OLS 估计量为：\n$$\n\\hat{\\beta}_1 = \\frac{\\sum_{i=1}^{n} (x_i - \\bar{x})(y_i - \\bar{y})}{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}, \\quad \\hat{\\beta}_0 = \\bar{y} - \\hat{\\beta}_1 \\bar{x},\n$$\n其中 $\\bar{x} = \\frac{1}{n}\\sum_{i=1}^{n} x_i$ 且 $\\bar{y} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$。生长速率的估计值为 $\\hat{\\mu} = \\hat{\\beta}_1$，残差为 $r_i = y_i - (\\hat{\\beta}_0 + \\hat{\\beta}_1 x_i)$，残差平方和为：\n$$\n\\mathrm{RSS} = \\sum_{i=1}^{n} r_i^2.\n$$\n扰动方差的一个无偏估计量是：\n$$\n\\hat{\\sigma}^2 = \\frac{\\mathrm{RSS}}{n - 2}.\n$$\n斜率的标准误差是：\n$$\n\\mathrm{SE}(\\hat{\\beta}_1) = \\sqrt{\\frac{\\hat{\\sigma}^2}{S_{xx}}}, \\quad \\text{其中 } S_{xx} = \\sum_{i=1}^{n} (x_i - \\bar{x})^2.\n$$\n在模型假设下，学生化的斜率 $(\\hat{\\beta}_1 - \\beta_1)/\\mathrm{SE}(\\hat{\\beta}_1)$ 服从自由度为 $n-2$ 的学生 t 分布。因此，$\\mu$ 的一个双侧 $95$% 置信区间是：\n$$\n\\hat{\\mu} \\pm t_{1 - \\alpha/2, \\, n-2} \\cdot \\mathrm{SE}(\\hat{\\beta}_1), \\quad \\text{其中 } \\alpha = 0.05,\n$$\n其中 $t_{1 - \\alpha/2, \\, \\nu}$ 是自由度为 $\\nu$ 的学生 t 分布的 $(1 - \\alpha/2)$ 分位数。所有计算均使用自然对数，因此当时间以小时为单位时，$\\hat{\\mu}$ 及其区间以 $\\mathrm{h}^{-1}$ 报告。\n\n算法设计：\n- 对于每个数据集，如上所述构建向量 $x$ 和 $y$。\n- 计算 $\\bar{x}$、$\\bar{y}$、$S_{xx}$ 和 $S_{xy} = \\sum_{i=1}^{n} (x_i - \\bar{x})(y_i - \\bar{y})$。\n- 计算 $\\hat{\\mu} = \\hat{\\beta}_1 = S_{xy} / S_{xx}$ 和 $\\hat{\\beta}_0 = \\bar{y} - \\hat{\\mu}\\bar{x}$。\n- 计算残差 $r_i$ 和 $\\hat{\\sigma}^2 = \\mathrm{RSS}/(n-2)$，然后计算 $\\mathrm{SE}(\\hat{\\mu}) = \\sqrt{\\hat{\\sigma}^2/S_{xx}}$。\n- 对于 $\\alpha = 0.05$，获取 $t_{1-\\alpha/2, n-2}$，并计算下限和上限 $\\hat{\\mu} \\mp t_{1-\\alpha/2, n-2}\\mathrm{SE}(\\hat{\\mu})$。\n- 将 $\\hat{\\mu}$、下限和上限均四舍五入到小数点后六位。\n- 输出一行，其中包含按测试套件指定顺序排列的各情况列表的外部列表，不含额外文本。\n\n该流程直接实现了从指数生长定律推导出的对数线性关系，并利用了由乘性测量噪声所证明的对数空间中误差的近似加性和同方差性，从而为比生长速率（单位 $\\mathrm{h}^{-1}$）得出了统计上合理的点估计和区间估计。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import t as student_t\n\ndef estimate_mu_and_ci(times, counts, alpha=0.05):\n    \"\"\"\n    Estimate specific growth rate mu and its (1-alpha) two-sided CI\n    from time points and observed counts using log-linear OLS regression.\n    Returns (mu_hat, ci_lower, ci_upper).\n    \"\"\"\n    x = np.asarray(times, dtype=float)\n    y = np.log(np.asarray(counts, dtype=float))\n\n    n = x.size\n    if n < 3:\n        raise ValueError(\"At least three data points are required for regression CI.\")\n\n    x_mean = x.mean()\n    y_mean = y.mean()\n\n    x_centered = x - x_mean\n    y_centered = y - y_mean\n\n    Sxx = np.sum(x_centered ** 2)\n    Sxy = np.sum(x_centered * y_centered)\n\n    mu_hat = Sxy / Sxx\n    intercept_hat = y_mean - mu_hat * x_mean\n\n    residuals = y - (intercept_hat + mu_hat * x)\n    dof = n - 2\n    rss = float(np.sum(residuals ** 2))\n    sigma2_hat = rss / dof\n\n    # Standard error of slope\n    se_mu = np.sqrt(sigma2_hat / Sxx)\n\n    # Two-sided t critical value\n    tcrit = student_t.ppf(1 - alpha / 2.0, dof)\n\n    ci_lower = mu_hat - tcrit * se_mu\n    ci_upper = mu_hat + tcrit * se_mu\n\n    return float(mu_hat), float(ci_lower), float(ci_upper)\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # All times in hours, counts in CFU (integers).\n    test_cases = [\n        # Case 1: happy path, moderate noise\n        ([0.0, 0.5, 1.0, 1.5, 2.0], [970000, 1456640, 1960000, 2969848, 4040000]),\n        # Case 2: near-zero noise (exact exponential within rounding)\n        ([0.0, 1.0, 2.0, 3.0], [200000, 298365, 445108, 664023]),\n        # Case 3: low counts, higher relative noise\n        ([0.0, 0.3, 0.6, 0.9, 1.2], [600, 556, 1355, 942, 2809]),\n        # Case 4: boundary, minimal points\n        ([0.0, 4.0, 8.0], [9800000, 22700508, 50025300]),\n    ]\n\n    results = []\n    for times, counts in test_cases:\n        mu_hat, lo, hi = estimate_mu_and_ci(times, counts, alpha=0.05)\n        results.append((mu_hat, lo, hi))\n\n    # Format the output as a single line: list of lists with six decimal places.\n    inner_strs = []\n    for mu_hat, lo, hi in results:\n        inner_strs.append(\n            \"[\" + \",\".join(f\"{v:.6f}\" for v in (mu_hat, lo, hi)) + \"]\"\n        )\n    print(\"[\" + \",\".join(inner_strs) + \"]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2537745"}, {"introduction": "在微生物学实验中，基于光密度 ($\\operatorname{OD}$) 和菌落形成单位 ($\\mathrm{CFU}$) 的测量方法经常会产生不一致的结果，尤其是在稳定期。本练习将引导您量化这种差异，并估算“活的但不可培养”(VBNC) 细胞的比例，从而加深您对不同测量技术局限性的批判性理解 [@problem_id:2537782]。这个概念对于准确解释微生物生理状态和存活策略至关重要。", "problem": "在恒定温度下，于限定培养基中对一种革兰氏阴性菌进行充分混合的好氧分批培养。随时间测量 $600~\\mathrm{nm}$ 处的光密度（记为 $\\operatorname{OD}_{600}$）和每毫升菌落形成单位 (CFU mL$^{-1}$)。根据平衡生长和光散射的基本原理可知，在早期指数生长期，于一个低OD值的线性范围内，总颗粒物浓度（此处解释为每毫升总细胞数，包括所有存活状态）与 $\\operatorname{OD}_{600}$ 成正比。相比之下，CFU mL$^{-1}$ 选择性地报告可培养的细胞。假设在早期指数生长期，基本上所有活细胞都是可培养的，且细胞裂解可忽略不计，因此在该时期内，每毫升总细胞数等于 CFU mL$^{-1}$。同时假设在整个时间过程中，平均细胞大小和折射率保持恒定，从而使得在所述的线性范围内，OD与细胞数的比例关系成立。\n\n给定以下关于 $\\operatorname{OD}_{600}$ 和 CFU mL$^{-1}$ 的时间序列数据：\n\n- $t = 0.5~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.015$, $\\mathrm{CFU~mL}^{-1} = 1.2 \\times 10^{7}$\n- $t = 1.0~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.035$, $\\mathrm{CFU~mL}^{-1} = 2.8 \\times 10^{7}$\n- $t = 1.5~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.080$, $\\mathrm{CFU~mL}^{-1} = 6.5 \\times 10^{7}$\n- $t = 2.0~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.160$, $\\mathrm{CFU~mL}^{-1} = 1.3 \\times 10^{8}$\n- $t = 2.5~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.280$, $\\mathrm{CFU~mL}^{-1} = 2.1 \\times 10^{8}$\n- $t = 3.0~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.420$, $\\mathrm{CFU~mL}^{-1} = 2.5 \\times 10^{8}$\n- $t = 4.0~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.800$, $\\mathrm{CFU~mL}^{-1} = 2.6 \\times 10^{8}$\n- $t = 6.0~\\mathrm{h}$: $\\operatorname{OD}_{600} = 1.020$, $\\mathrm{CFU~mL}^{-1} = 2.5 \\times 10^{8}$\n- $t = 8.0~\\mathrm{h}$: $\\operatorname{OD}_{600} = 1.050$, $\\mathrm{CFU~mL}^{-1} = 2.4 \\times 10^{8}$\n- $t = 12.0~\\mathrm{h}$: $\\operatorname{OD}_{600} = 1.040$, $\\mathrm{CFU~mL}^{-1} = 2.0 \\times 10^{8}$\n\n任务：\n\n1. 仅使用 $\\operatorname{OD}_{600} \\leq 0.280$（即 $t \\leq 2.5~\\mathrm{h}$）的早期指数生长期数据点，推断出通过 $N_{\\text{total}}(t) = \\alpha \\,\\operatorname{OD}_{600}(t)$ 将每毫升总细胞数 $N_{\\text{total}}(t)$ 与 $\\operatorname{OD}_{600}(t)$ 联系起来的比例常数 $\\alpha$。从基本原理出发，论证您所使用的估计原则的合理性，并给出最终 $\\alpha$ 的值，其单位为 CFU mL$^{-1}$ 每 OD 单位。\n\n2. 使用您推断出的 $\\alpha$ 值，估计在 $t = 8.0~\\mathrm{h}$ 时活的但不可培养 (VBNC) 的细胞比例，其定义为 $f_{\\mathrm{VBNC}}(t) = \\dfrac{N_{\\text{total}}(t) - N_{\\text{culturable}}(t)}{N_{\\text{total}}(t)}$。其中，$N_{\\text{culturable}}(t)$ 是在时间 $t$ 观测到的 CFU mL$^{-1}$ 值，$N_{\\text{total}}(t)$ 是通过您校准的 $\\alpha$ 值从 $\\operatorname{OD}_{600}(t)$ 计算得出。将最终比例以小数形式表示。\n\n3. 从生长动力学的角度简要解释，如果仅依赖 CFU 数据，而非基于 OD 或总细胞计数的观测量，那么稳定期内较大的 $f_{\\mathrm{VBNC}}$ 会如何对比生长速率和产率的估计产生偏差。\n\n最终答案只报告 $t = 8.0~\\mathrm{h}$ 时 $f_{\\mathrm{VBNC}}$ 的数值。将您报告的 $f_{\\mathrm{VBNC}}$ 四舍五入到四位有效数字。报告该比例时无需单位。", "solution": "基本出发点是微生物生长定量中以下广为接受的原则：\n\n- 在平衡指数生长阶段，当细胞裂解可忽略不计且平均细胞大小和折射率恒定时，在低OD线性范围内，$600~\\mathrm{nm}$ 处的光密度与总悬浮颗粒（细胞）浓度成正比。因此，存在一个比例常数 $\\alpha$，使得在该范围内满足 $N_{\\text{total}}(t) = \\alpha \\,\\operatorname{OD}_{600}(t)$。\n\n- 每毫升菌落形成单位报告的是可培养细胞数 $N_{\\text{culturable}}(t)$。在所述假设下的早期指数生长期，基本上所有活细胞都是可培养的，因此 $N_{\\text{total}}(t) \\approx N_{\\text{culturable}}(t)$。\n\n- 在时间 $t$ 的活的但不可培养细胞比例定义为 $f_{\\mathrm{VBNC}}(t) = \\dfrac{N_{\\text{total}}(t) - N_{\\text{culturable}}(t)}{N_{\\text{total}}(t)}$。\n\n步骤1：根据早期指数生长期数据估计比例常数 $\\alpha$。\n\n将早期指数生长线性区域（此处指定为 $\\operatorname{OD}_{600} \\leq 0.280$ 的点，即时间 $t \\leq 2.5~\\mathrm{h}$）内的第 $i$ 次测量值记为 $\\operatorname{OD}_{i}$ 和 $\\mathrm{CFU}_{i}$。在模型 $N_{\\text{total}} = \\alpha\\,\\operatorname{OD}$ 和早期指数生长期恒等式 $N_{\\text{total}} \\approx N_{\\text{culturable}} = \\mathrm{CFU}$ 下，我们有 $\\mathrm{CFU}_{i} \\approx \\alpha\\,\\operatorname{OD}_{i}$。为了在 $\\mathrm{CFU}$ 测量存在噪声的情况下获得一个无偏的、有原则的 $\\alpha$ 估计值，我们在零细胞意味着零光密度（即通过原点的回归）这一物理约束下，最小化残差平方和\n$$\nS(\\alpha) = \\sum_{i} \\left(\\mathrm{CFU}_{i} - \\alpha\\,\\operatorname{OD}_{i}\\right)^{2}\n$$\n令 $\\dfrac{dS}{d\\alpha} = 0$ 可得到估计量\n$$\n\\hat{\\alpha} = \\frac{\\sum_{i} \\operatorname{OD}_{i}\\,\\mathrm{CFU}_{i}}{\\sum_{i} \\operatorname{OD}_{i}^{2}}.\n$$\n使用给定的早期指数生长期数据：\n\n- $t = 0.5~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.015$, $\\mathrm{CFU~mL}^{-1} = 1.2 \\times 10^{7}$\n- $t = 1.0~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.035$, $\\mathrm{CFU~mL}^{-1} = 2.8 \\times 10^{7}$\n- $t = 1.5~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.080$, $\\mathrm{CFU~mL}^{-1} = 6.5 \\times 10^{7}$\n- $t = 2.0~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.160$, $\\mathrm{CFU~mL}^{-1} = 1.3 \\times 10^{8}$\n- $t = 2.5~\\mathrm{h}$: $\\operatorname{OD}_{600} = 0.280$, $\\mathrm{CFU~mL}^{-1} = 2.1 \\times 10^{8}$\n\n计算总和:\n$$\n\\sum_{i} \\operatorname{OD}_{i}\\,\\mathrm{CFU}_{i} = (0.015)(1.2 \\times 10^{7}) + (0.035)(2.8 \\times 10^{7}) + (0.080)(6.5 \\times 10^{7}) + (0.160)(1.3 \\times 10^{8}) + (0.280)(2.1 \\times 10^{8}).\n$$\n逐项计算：\n$$\n(0.015)(1.2 \\times 10^{7}) = 1.8 \\times 10^{5},\n$$\n$$\n(0.035)(2.8 \\times 10^{7}) = 9.8 \\times 10^{5},\n$$\n$$\n(0.080)(6.5 \\times 10^{7}) = 5.2 \\times 10^{6},\n$$\n$$\n(0.160)(1.3 \\times 10^{8}) = 2.08 \\times 10^{7},\n$$\n$$\n(0.280)(2.1 \\times 10^{8}) = 5.88 \\times 10^{7}.\n$$\n求和得到\n$$\n\\sum_{i} \\operatorname{OD}_{i}\\,\\mathrm{CFU}_{i} = 8.596 \\times 10^{7}.\n$$\n类似地，\n$$\n\\sum_{i} \\operatorname{OD}_{i}^{2} = (0.015)^{2} + (0.035)^{2} + (0.080)^{2} + (0.160)^{2} + (0.280)^{2} = 0.000225 + 0.001225 + 0.0064 + 0.0256 + 0.0784 = 0.11185.\n$$\n因此，\n$$\n\\hat{\\alpha} = \\frac{8.596 \\times 10^{7}}{0.11185} \\approx 7.685 \\times 10^{8} \\ \\text{CFU mL}^{-1}\\ \\text{每}\\ \\operatorname{OD}\\ \\text{单位}.\n$$\n\n步骤2：估计在 $t = 8.0~\\mathrm{h}$ 时活的但不可培养细胞的比例。\n\n在 $t = 8.0~\\mathrm{h}$ 时，测量值为 $\\operatorname{OD}_{600} = 1.050$ 和 $\\mathrm{CFU~mL}^{-1} = 2.4 \\times 10^{8}$。使用 $N_{\\text{total}}(t) = \\hat{\\alpha}\\,\\operatorname{OD}_{600}(t)$，\n$$\nN_{\\text{total}}(8.0~\\mathrm{h}) = (7.685 \\times 10^{8}) \\times (1.050) \\approx 8.0696 \\times 10^{8}.\n$$\nVBNC 比例为\n$$\nf_{\\mathrm{VBNC}}(8.0~\\mathrm{h}) = \\frac{N_{\\text{total}} - N_{\\text{culturable}}}{N_{\\text{total}}} = \\frac{8.0696 \\times 10^{8} - 2.4 \\times 10^{8}}{8.0696 \\times 10^{8}}.\n$$\n计算分子：\n$$\n8.0696 \\times 10^{8} - 2.4 \\times 10^{8} = 5.6696 \\times 10^{8}.\n$$\n因此，\n$$\nf_{\\mathrm{VBNC}}(8.0~\\mathrm{h}) \\approx \\frac{5.6696 \\times 10^{8}}{8.0696 \\times 10^{8}} \\approx 0.7026,\n$$\n四舍五入到四位有效数字。\n\n步骤3：对生长动力学的影响。\n\n当稳定期内 $f_{\\mathrm{VBNC}}$ 很大时，基于 CFU 的观测量会严重低估那些保持完整且在代谢上能够维持细胞膜完整性或基础活性的细胞总数。如果仅使用 CFU 数据来估计比生长速率（例如，通过 $\\mu(t) \\approx \\dfrac{d}{dt}\\ln N(t)$），那么推断出的表观生长停止甚至数量下降，会比基于生物量或总细胞数的动力学所指示的要早得多、剧烈得多。这会导致推断出的最大比生长速率偏低，并可能扭曲底物到生物量的产率计算，因为基于 OD 或总细胞数的产率反映了那些并未转化为菌落的生物量积累。在此阶段，一个机制上忠实的动力学模型应将细胞群体划分为至少两个区室，$N_{\\text{culturable}}(t)$ 和 $N_{\\mathrm{VBNC}}(t)$，并包含一个从可培养状态到 VBNC 状态的转换速率，该速率随着营养物质的耗尽而变得显著。这样，尽管可培养性因与瞬时生物量合成无关的生理转变而下降，但总体生物量动态可能仍遵循净生长速率递减的饱和动力学。", "answer": "$$\\boxed{0.7026}$$", "id": "2537782"}, {"introduction": "虽然指数期分析是基础，但对整个分批培养过程的全面理解需要对包括迟滞期和稳定期在内的完整生长曲线进行建模。本练习将向您介绍几种在预测微生物学中广泛应用的复杂非线性模型（如 Baranyi 模型和 Gompertz 模型），并教您如何使用赤池信息准则 ($\\mathrm{AIC}$) 进行模型选择 [@problem_id:2537727]。这是一个高级实践，旨在为您装备前沿的计算和统计工具。", "problem": "设计并实现一个完整的、可运行的程序，该程序能够生成合成的分批培养生长数据，拟合三种主要的生长模型，并使用赤池信息准则 (Akaike Information Criterion, AIC) 进行模型选择。其科学领域是细菌生长曲线和生长动力学。该程序必须是完全自包含的，且不应需要任何外部输入。\n\n从以下基本的基础和经过充分检验的事实出发：\n\n1. 分批培养中的微生物种群生长在单细胞水平上由速率方程 $dN/dt = \\mu(t)\\,N(t)$ 控制，其中 $N(t)$ 是种群大小或其替代指标（如光密度），而 $\\mu(t)$ 是受生理状态和资源限制调节的、随时间变化的比生长速率。\n\n2. 主生长曲线表现出一个延迟期，一个加速达到最大比生长速率的阶段，一个受资源限制调节的指数状上升阶段，以及一个当资源变得有限时的稳定期。相应地，在预测微生物学中有三个公认的主模型：Baranyi 模型、修正的 Gompertz 模型和 Buchanan 三相线性模型。在变换后的标度中，这些模型是被广泛使用、经验证实的，用于描述分批生长动态的总结，其中因变量代表丰度的自然对数或一个成比例的替代指标。在本问题中，所有因变量的值都采用自然对数标度且无量纲，而时间单位为小时。\n\n3. 在方差为 $\\sigma^2$ 的同方差高斯测量噪声下，对于一个具有 $k$ 个自由参数并通过最小二乘法拟合到 $n$ 个观测值的模型，其残差平方和为 $\\mathrm{RSS}$，则用于模型选择的赤池信息准则 (AIC) 为\n$$\n\\mathrm{AIC} \\;=\\; n \\,\\ln\\!\\left(\\frac{\\mathrm{RSS}}{n}\\right) \\;+\\; 2k,\n$$\n该公式可从高斯对数似然函数推导得出，与一个对所有被比较模型均相同的加性常数项相差一个常数。\n\n定义以下三个模型，每个模型均由基线 $y_0$、上渐近线 $y_{\\max}$、最大比生长速率 $\\mu_{\\max}$ 和延迟时间 $\\lambda$ 参数化。令 $\\Delta = y_{\\max} - y_0$，其中 $\\Delta > 0$。\n\n1. Baranyi 模型。定义生理调节函数\n$$\nA(t) \\;=\\; t \\;+\\; \\frac{1}{\\mu_{\\max}} \\,\\ln\\!\\Big(1 \\;+\\; e^{-\\mu_{\\max} t}\\,\\big(e^{-\\mu_{\\max}\\lambda}-1\\big)\\Big),\n$$\n并预测对数响应\n$$\ny(t) \\;=\\; y_0 \\;+\\; \\mu_{\\max}\\,A(t) \\;-\\; \\ln\\!\\left(1 \\;+\\; \\frac{e^{\\mu_{\\max} A(t)} - 1}{e^{\\Delta}}\\right).\n$$\n\n2. 修正的 Gompertz 模型。预测\n$$\ny(t) \\;=\\; y_0 \\;+\\; \\Delta \\,\\exp\\!\\Bigg(-\\exp\\!\\Big(\\frac{\\mu_{\\max}\\,e}{\\Delta}\\,\\big(\\lambda - t\\big) \\;+\\; 1\\Big)\\Bigg),\n$$\n其中 $e$ 是自然对数的底数。\n\n3. Buchanan 三相线性模型。预测\n$$\ny(t) \\;=\\;\n\\begin{cases}\ny_0, & t \\le \\lambda,\\\n$$6pt]\ny_0 \\;+\\; \\mu_{\\max}\\,(t-\\lambda), & \\lambda < t < \\lambda \\;+\\; \\dfrac{\\Delta}{\\mu_{\\max}},\\\n$$10pt]\ny_{\\max}, & t \\ge \\lambda \\;+\\; \\dfrac{\\Delta}{\\mu_{\\max}}.\n\\end{cases}\n$$\n\n您必须：\n\n- 通过在指定的时间网格上评估相应的真实模型，并添加具有给定标准差的独立高斯噪声，为每个测试用例生成合成数据。使用固定的随机数生成器种子 $12345$，并根据从零开始的测试用例索引进行偏移（即，第一个用例使用种子 $12345$，第二个用例使用种子 $12346$，依此类推），以确保可复现性。\n- 通过非线性最小二乘法，在强制 $\\Delta > 0$、$\\mu_{\\max} > 0$ 和 $\\lambda \\ge 0$ 的边界条件下，将所有三个模型拟合到每个带噪声的数据集。如果方便，您可以用 $\\Delta = y_{\\max} - y_0$ 进行重新参数化，以强制 $y_{\\max} > y_0$。\n- 对于每个拟合的模型，报告估计的延迟时间 $\\widehat{\\lambda}$（以小时为单位）。延迟时间以小时表示，并四舍五入到三位小数。\n- 对于每个拟合的模型，使用上述公式计算 $\\mathrm{AIC}$，其中 $k=4$（参数为 $y_0$、$\\Delta$、$\\mu_{\\max}$、$\\lambda$），并选择 $\\mathrm{AIC}$ 值最小的模型。\n- 将模型标识编码为整数以供输出：Baranyi $=0$，修正的 Gompertz $=1$，Buchanan $=2$。\n\n测试套件包含三个用例。对于每个用例，合成数据均由所列的真实模型和参数生成：\n\n- 用例 $1$（理想路径；Baranyi 生成器）：真实模型 $=0$，参数 $\\big(y_0, y_{\\max}, \\mu_{\\max}, \\lambda\\big) = \\big(0.1,\\;4.6,\\;0.7,\\;2.0\\big)$，时间网格从 $t=0$ 到 $t=24$，步长为 $\\Delta t = 0.5$ 小时，高斯噪声标准差 $\\sigma=0.05$。\n- 用例 $2$（边界延迟；Buchanan 生成器）：真实模型 $=2$，参数 $\\big(y_0, y_{\\max}, \\mu_{\\max}, \\lambda\\big) = \\big(0.0,\\;3.2,\\;0.9,\\;0.0\\big)$，时间网格从 $t=0$ 到 $t=10$，步长为 $\\Delta t = 0.25$ 小时，高斯噪声标准差 $\\sigma=0.02$。\n- 用例 $3$（噪声更强的数据；修正的 Gompertz 生成器）：真实模型 $=1$，参数 $\\big(y_0, y_{\\max}, \\mu_{\\max}, \\lambda\\big) = \\big(0.2,\\;4.3,\\;0.5,\\;1.5\\big)$，时间网格从 $t=0$ 到 $t=18$，步长为 $\\Delta t = 0.3$ 小时，高斯噪声标准差 $\\sigma=0.12$。\n\n您的程序必须输出单一行，其中包含所有三个测试用例的汇总结果，格式为类似 Python 的列表嵌套列表。对于每个测试用例，生成一个包含四个条目的列表：选定的模型标识整数，其后是与 Baranyi、修正的 Gompertz 和 Buchanan 拟合相对应的三个估计延迟时间 $\\widehat{\\lambda}$，按此顺序排列。最终输出格式必须是单一行：\n\"[ [m1,lagB1,lagG1,lagU1], [m2,lagB2,lagG2,lagU2], [m3,lagB3,lagG3,lagU3] ]\"\n其中 $m_i$ 是一个整数，每个延迟时间是一个四舍五入到三位小数的浮点数。所有延迟时间都必须以小时为单位表示。", "solution": "问题陈述已根据指定标准进行了严格评估，并被确定为 **有效** 的。它在科学上基于微生物生长动力学的既定原则，具有明确的目标和充分的数据，问题提法得当，并使用客观、明确的语言进行阐述。所提供的模型——Baranyi、修正的 Gompertz 和 Buchanan——是预测微生物学中的标准模型，并且使用赤池信息准则 (Akaike Information Criterion, AIC) 进行模型选择是正确的统计程序。所有必要的参数、常数和程序步骤都定义明确。因此，我将继续提供完整的解决方案。\n\n该解决方案是一个计算程序，旨在生成合成数据、拟合多个非线性生长模型，并基于信息论选择最合理的模型。该过程可分解为以下逻辑步骤。\n\n**1. 合成数据生成**\n\n对于三个测试用例中的每一个，都会生成一个合成数据集来模拟细菌生长的实验观测。这包括三个阶段：\n- 根据每个用例指定的开始时间、结束时间和时间步长，构建一个时间向量 $t$。对于用例 $１$，$t$ 的范围是从 $0$ 到 $24$ 小时，步长为 $0.5$ 小时。对于用例 $２$，$t$ 的范围是从 $0$ 到 $10$ 小时，步长为 $0.25$ 小时。对于用例 $３$，$t$ 的范围是从 $0$ 到 $18$ 小时，步长为 $0.3$ 小时。\n- 通过使用给定的真实参数 $(y_0, y_{\\max}, \\mu_{\\max}, \\lambda)$ 评估指定的真实模型（用例 1 为 Baranyi，用例 2 为 Buchanan，用例 3 为修正的 Gompertz），计算出真实的潜在生长曲线 $y_{\\text{true}}(t)$。\n- 将同方差高斯噪声添加到真实值中，以创建最终的带噪声数据集 $y_{\\text{noisy}}(t)$。该噪声取自均值为 $0$、标准差为每个用例给定的 $\\sigma$（用例 1 为 $\\sigma=0.05$，用例 2 为 $\\sigma=0.02$，用例 3 为 $\\sigma=0.12$）的正态分布。为确保可复现性，伪随机数生成器的种子被设置为 $12345$ 加上从零开始的测试用例索引。\n\n**2. 生长模型定义**\n\n这三个主要生长模型被实现为时间 $t$ 和参数向量 $p = (y_0, \\Delta, \\mu_{\\max}, \\lambda)$ 的函数，其中 $y_0$ 是初始对数变换后的种群大小，$\\Delta = y_{\\max} - y_0$ 是总生长量，$\\mu_{\\max}$ 是最大比生长速率，$\\lambda$ 是延迟时间。用 $\\Delta$ 代替 $y_{\\max}$ 进行重新参数化，通过简单要求 $\\Delta > 0$ 来强制执行约束 $y_{\\max} > y_0$，这样做很方便。\n\n- **Baranyi 模型 ($m=0$):**\n该模型需要一个用于生理调节的辅助函数 $A(t)$：\n$$\nA(t) \\;=\\; t \\;+\\; \\frac{1}{\\mu_{\\max}} \\,\\ln\\!\\Big(1 \\;+\\; e^{-\\mu_{\\max} t}\\,\\big(e^{-\\mu_{\\max}\\lambda}-1\\big)\\Big)\n$$\n那么，预测的对数变换后种群大小 $y(t)$ 为：\n$$\ny(t) \\;=\\; y_0 \\;+\\; \\mu_{\\max}\\,A(t) \\;-\\; \\ln\\!\\left(1 \\;+\\; \\frac{e^{\\mu_{\\max} A(t)} - 1}{e^{\\Delta}}\\right)\n$$\n\n- **修正的 Gompertz 模型 ($m=1$):**\n预测由一个双指数函数给出：\n$$\ny(t) \\;=\\; y_0 \\;+\\; \\Delta \\,\\exp\\!\\Bigg(-\\exp\\!\\Big(\\frac{\\mu_{\\max}\\,e}{\\Delta}\\,\\big(\\lambda - t\\big) \\;+\\; 1\\Big)\\Bigg)\n$$\n其中 $e$ 是欧拉数。\n\n- **Buchanan 三相线性模型 ($m=2$):**\n这是一个定义如下的分段线性模型：\n$$\ny(t) \\;=\\;\n\\begin{cases}\ny_0, & t \\le \\lambda \\\\\ny_0 \\;+\\; \\mu_{\\max}\\,(t-\\lambda), & \\lambda < t < \\lambda \\;+\\; \\frac{\\Delta}{\\mu_{\\max}} \\\\\ny_0 \\;+\\; \\Delta, & t \\ge \\lambda \\;+\\; \\frac{\\Delta}{\\mu_{\\max}}\n\\end{cases}\n$$\n\n**3. 非线性最小二乘拟合**\n\n使用 `scipy.optimize.curve_fit` 中实现的非线性最小二乘法，将三个模型中的每一个都拟合到三个带噪声的数据集中的每一个。这个迭代优化算法寻找参数向量 $\\widehat{p} = (\\widehat{y_0}, \\widehat{\\Delta}, \\widehat{\\mu_{\\max}}, \\widehat{\\lambda})$，以最小化残差平方和 (RSS)：\n$$\n\\mathrm{RSS} \\;=\\; \\sum_{i=1}^{n} \\big(y_{\\text{noisy}}(t_i) - y_{\\text{model}}(t_i; p)\\big)^2\n$$\n其中 $n$ 是数据点的数量。为确保结果具有物理意义并改善收敛性，优化过程受到参数边界的约束：$\\widehat{\\Delta} > 0$、$\\widehat{\\mu_{\\max}} > 0$ 和 $\\widehat{\\lambda} \\ge 0$。这些边界是通过拟合函数的 `bounds` 参数实现的。从数据中导出稳健的参数初始猜测值，以指导优化过程。\n\n**4. 通过赤池信息准则 (AIC) 进行模型选择**\n\n拟合后，对给定数据集上的三个模型中的每一个计算 AIC。公式为：\n$$\n\\mathrm{AIC} \\;=\\; n \\,\\ln\\!\\left(\\frac{\\mathrm{RSS}}{n}\\right) \\;+\\; 2k\n$$\n其中 $n$ 是观测值的数量，$\\mathrm{RSS}$ 是拟合的残差平方和，$k$ 是模型中的自由参数数量。根据规定，$k=4$ 适用于所有三个模型。AIC 提供了一种模型质量的相对度量，它奖励拟合优度（低 $\\mathrm{RSS}$），同时惩罚参数数量（$k$）的增加。产生最小 AIC 值的模型被选为对生成数据的潜在过程的最佳近似。\n\n**5. 输出组装**\n\n对于三个测试用例中的每一个，该程序产生：\n- 基于最小 AIC 的所选模型的整数标识（Baranyi 为 $0$，Gompertz 为 $1$，Buchanan 为 $2$）。\n- 来自 Baranyi 拟合的估计延迟时间 $\\widehat{\\lambda}$。\n- 来自修正的 Gompertz 拟合的估计延迟时间 $\\widehat{\\lambda}$。\n- 来自 Buchanan 拟合的估计延迟时间 $\\widehat{\\lambda}$。\n\n所有估计的延迟时间都四舍五入到三位小数。这些结果被汇总成一个列表的列表，并格式化为问题规范所要求的精确字符串。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Generates synthetic bacterial growth data, fits three growth models,\n    and performs model selection using AIC.\n    \"\"\"\n\n    # --- Model Definitions ---\n    # Models are parameterized with p = (y0, delta, mu_max, lambda)\n    # where delta = y_max - y0.\n\n    def baranyi(t, y0, delta, mu_max, lam):\n        \"\"\"Baranyi model.\"\"\"\n        # Note: Added small epsilon to mu_max to prevent division by zero\n        # if the optimizer attempts mu_max=0, although bounds should prevent this.\n        h = mu_max * t\n        h_lag = mu_max * lam\n        # The term e^(-h_lag) - 1 can be numerically unstable if h_lag is large.\n        # However, e^(-h) * (e^(-h_lag) - 1) = e^-(h+h_lag) - e^(-h) is stable.\n        log_alpha_t_div_alpha_0 = h + np.log(1 + (np.exp(-h_lag) - 1) * np.exp(-h))\n        A_t = log_alpha_t_div_alpha_0 / (mu_max + 1e-12)\n        \n        y = y0 + mu_max * A_t - np.log(1 + (np.exp(mu_max * A_t) - 1) / np.exp(delta))\n        return y\n\n    def gompertz(t, y0, delta, mu_max, lam):\n        \"\"\"Modified Gompertz model.\"\"\"\n        # Note: Added small epsilon to delta to prevent division by zero.\n        val = (mu_max * np.e / (delta + 1e-12)) * (lam - t) + 1\n        return y0 + delta * np.exp(-np.exp(val))\n\n    def buchanan(t, y0, delta, mu_max, lam):\n        \"\"\"Buchanan three-phase linear model.\"\"\"\n        # Note: Added small epsilon to mu_max to prevent division by zero.\n        t_stat = lam + delta / (mu_max + 1e-12)\n        y_max = y0 + delta\n        \n        conditions = [t <= lam, (t > lam) & (t < t_stat), t >= t_stat]\n        functions = [y0, lambda t_vec: y0 + mu_max * (t_vec - lam), y_max]\n        \n        return np.piecewise(t, conditions, functions)\n\n    MODELS = [baranyi, gompertz, buchanan]\n\n    # --- Test Case Definitions ---\n    test_cases = [\n        {\n            \"true_model_id\": 0,\n            \"params\": (0.1, 4.6, 0.7, 2.0), # y0, y_max, mu_max, lambda\n            \"t_grid\": (0, 24, 0.5), # start, end, step\n            \"sigma\": 0.05\n        },\n        {\n            \"true_model_id\": 2,\n            \"params\": (0.0, 3.2, 0.9, 0.0),\n            \"t_grid\": (0, 10, 0.25),\n            \"sigma\": 0.02\n        },\n        {\n            \"true_model_id\": 1,\n            \"params\": (0.2, 4.3, 0.5, 1.5),\n            \"t_grid\": (0, 18, 0.3),\n            \"sigma\": 0.12\n        }\n    ]\n\n    # --- Main Loop ---\n    all_results = []\n    for i, case in enumerate(test_cases):\n        # 1. Generate Synthetic Data\n        rng = np.random.default_rng(12345 + i)\n        \n        t_start, t_end, t_step = case[\"t_grid\"]\n        t_data = np.arange(t_start, t_end + t_step / 2, t_step)\n        \n        y0_true, y_max_true, mu_max_true, lam_true = case[\"params\"]\n        delta_true = y_max_true - y0_true\n        true_params_for_fit = (y0_true, delta_true, mu_max_true, lam_true)\n        \n        true_model_func = MODELS[case[\"true_model_id\"]]\n        y_true = true_model_func(t_data, *true_params_for_fit)\n        \n        y_noisy = y_true + rng.normal(loc=0.0, scale=case[\"sigma\"], size=t_data.shape)\n        \n        # 2. Fit Models and Calculate AIC\n        n = len(t_data)\n        k = 4\n        \n        case_lags = []\n        case_aics = []\n        \n        # Robust initial guesses and bounds\n        y0_guess = y_noisy[0]\n        y_max_guess = np.max(y_noisy)\n        delta_guess = y_max_guess - y0_guess\n        if delta_guess <= 0: delta_guess = 0.5\n\n        # Estimate max slope for mu_max guess\n        diff_y = np.diff(y_noisy)\n        diff_t = np.diff(t_data)\n        slopes = diff_y / diff_t\n        mu_max_guess = np.max(slopes) if len(slopes) > 0 and np.max(slopes) > 0 else 0.5\n\n        # Estimate lag from when data first exceeds a threshold\n        try:\n           lag_indices = np.where(y_noisy > y0_guess + 0.1 * delta_guess)[0]\n           lam_guess = t_data[lag_indices[0]] if len(lag_indices) > 0 else t_data[len(t_data) // 4]\n        except IndexError:\n           lam_guess = t_data[len(t_data) // 4]\n\n        p0 = [y0_guess, delta_guess, mu_max_guess, lam_guess]\n        \n        bounds = (\n            [np.min(y_noisy) - 1, 1e-9, 1e-9, 0],\n            [np.max(y_noisy) + 1, (np.max(y_noisy) - np.min(y_noisy)) * 2, 5.0, t_end]\n        )\n\n        for model_func in MODELS:\n            try:\n                popt, _ = curve_fit(\n                    model_func, t_data, y_noisy, p0=p0, bounds=bounds, maxfev=10000\n                )\n                \n                y_pred = model_func(t_data, *popt)\n                rss = np.sum((y_noisy - y_pred)**2)\n                \n                if rss <= 0: # Avoid log(0)\n                    aic = -np.inf\n                else:\n                    aic = n * np.log(rss / n) + 2 * k\n                \n                est_lambda = popt[3]\n\n            except RuntimeError: # If fit fails\n                aic = np.inf\n                est_lambda = np.nan\n\n            case_lags.append(est_lambda)\n            case_aics.append(aic)\n        \n        # 3. Model Selection\n        selected_model_id = np.argmin(case_aics)\n        \n        # 4. Store and Format Results\n        # Problem asks to round to 3 decimals, not format to 3dp.\n        rounded_lags = [round(lag, 3) for lag in case_lags]\n        all_results.append([selected_model_id] + rounded_lags)\n\n    # --- Final Output Formatting ---\n    outer_list = []\n    for res in all_results:\n        model_id = res[0]\n        lags = res[1:]\n        # Format floats to always show three decimal places as in the example.\n        inner_list_str = f\"[{model_id},{lags[0]:.3f},{lags[1]:.3f},{lags[2]:.3f}]\"\n        outer_list.append(inner_list_str)\n    \n    final_output_str = f\"[{','.join(outer_list)}]\"\n    print(final_output_str)\n\nsolve()\n```", "id": "2537727"}]}