{"hands_on_practices": [{"introduction": "CRISPR-Cas系统的靶向能力在根本上取决于Cas核酸酶识别靶标DNA上一个称为“前间隔序列邻近基序”（PAM）的短序列的能力。这个PAM序列的出现频率直接决定了Cas酶在特定基因组中的潜在靶点密度。本练习将引导你运用基础概率论，建立一个数学模型来量化基因组的碱基组成（如GC含量）如何影响不同PAM序列的出现频率，从而深入理解决定CRISPR系统靶向范围的关键因素。[@problem_id:2485193]", "problem": "一个双链细菌基因组的鸟嘌呤-胞嘧啶 (GC) 含量为 $0.60$。考虑成簇规律间隔短回文重复序列 (CRISPR) 及一种 CRISPR 相关 (Cas) 核酸内切酶，该酶需要一个前间区序列邻近基序 (Protospacer Adjacent Motif, PAM) 来进行结合和切割。假设核苷酸序列具有以下基线模型：各个位置是独立同分布的；在 GC 和腺嘌呤-胸腺嘧啶 (AT) 两类中，碱基是等概率的，因此 $P(G)=P(C)$ 且 $P(A)=P(T)$，其中 $P(G)+P(C)=0.60$ 且 $P(A)+P(T)=0.40$；PAM 中的符号 $N$ 表示任意核苷酸。PAM 的出现按其在一条链上的起始位置计数。一个可靶向位点是指在任意一条链上具有正确方向的 PAM 的位点（即，出现 PAM 或其反向互补序列）。将每千碱基 PAM 密度定义为在一段长度为 $L=1000$ 个碱基对的连续序列中，可靶向 PAM 起始位置的期望数量，其中两种方向上的出现计为不同的可靶向位点。\n\n仅使用这些假设和概率论的基本原理（独立性、碱基类别内的等概率性以及期望的线性性），完成以下任务：\n- 为一个由固定字母和 $N$ 符号组成的共有序列指定的 PAM，推导其每千碱基 PAM 密度的期望值的一般表达式，明确考虑 PAM 及其在另一条链上的反向互补序列。\n- 应用您的表达式计算 $N\\!GG$ PAM（如 Streptococcus pyogenes Cas9 所使用的）和 $N\\!TTN$ PAM 的每千碱基期望密度。\n- 将覆盖因子定义为 $N\\!GG$ 密度与 $N\\!TTN$ 密度的比值，并计算其数值。\n\n最终答案只报告覆盖因子，四舍五入到四位有效数字。覆盖因子是无量纲的。最终答案中不要包含任何单位。您可以在解题过程中以“位点/千碱基”为单位计算中间密度值，但它们不属于最终报告值的一部分。", "solution": "该问题要求基于细菌基因组的概率模型，计算前间区序列邻近基序 (PAM) 的密度。此分析基于两个基本原理：核苷酸序列的伯努利模型（假设序列各位置是独立同分布的，i.i.d.）和期望的线性性。\n\n首先，我们确定四种核苷酸（腺嘌呤 $A$、胞嘧啶 $C$、鸟嘌呤 $G$、胸腺嘧啶 $T$）的概率。问题陈述了鸟嘌呤-胞嘧啶 (GC) 含量为 $0.60$。因此，随机选择一个碱基是 $G$ 或 $C$ 的概率是：\n$$P(G) + P(C) = 0.60$$\n问题还陈述了，在 GC 和腺嘌呤-胸腺嘧啶 (AT) 两类中，碱基是等概率的，即 $P(G) = P(C)$ 且 $P(A) = P(T)$。\n将此代入 GC 含量方程可得：\n$$2 \\times P(G) = 0.60 \\implies P(G) = P(C) = 0.30$$\n总概率必须为 $1$，因此 AT 含量为 $P(A) + P(T) = 1 - 0.60 = 0.40$。使用 AT 类的等概率假设：\n$$2 \\times P(A) = 0.40 \\implies P(A) = P(T) = 0.20$$\n符号 $N$ 代表任意核苷酸，所以其概率为 $P(N) = P(A) + P(C) + P(G) + P(T) = 1$。\n\n接下来，我们推导每千碱基 PAM 密度的一般表达式。设一个 PAM 由长度为 $k$ 的序列 $S = s_1s_2...s_k$ 表示。根据独立同分布 (i.i.d.) 的假设，在任意给定位置观察到这个特定序列开始的概率是各个核苷酸概率的乘积：\n$$P(S) = \\prod_{i=1}^{k} P(s_i)$$\n一个可靶向位点可以在正向链或反向链上具有 PAM。反向链上的 PAM 对应于其反向互补序列 $S_{RC}$ 出现在正向链上。设 $S_{RC} = s'_1s'_2...s'_k$，其中 $s'_i$ 是 $s_{k-i+1}$ 的互补碱基（互补关系为 $A \\leftrightarrow T$ 和 $G \\leftrightarrow C$）。反向互补序列的概率是：\n$$P(S_{RC}) = \\prod_{i=1}^{k} P(s'_i)$$\n问题将每千碱基 PAM 密度定义为在长度为 $L=1000$ 个碱基对的序列中，可靶向位点的总期望数量，其中两种方向上的出现计为不同的位点。对于一个长度为 $L$ 的序列，一个 $k$-mer 有 $L-k+1$ 个可能的起始位置。设 $E_S$ 是 $S$ 在正向链上出现的期望次数，$E_{S_{RC}}$ 是 $S_{RC}$ 在正向链上出现的期望次数。根据期望的线性性：\n$$E_S = (L-k+1) \\times P(S)$$\n$$E_{S_{RC}} = (L-k+1) \\times P(S_{RC})$$\n对于 $L=1000$，总密度 $\\rho$ 是这些期望的总和：\n$$\\rho(S) = E_S + E_{S_{RC}} = (1000 - k + 1) \\times [P(S) + P(S_{RC})]$$\n\n现在我们将此通用公式应用于指定的 PAM。\n\n对于 $NGG$ PAM：\n序列是 $S=NGG$，因此其长度为 $k=3$。其概率是：\n$$P(NGG) = P(N) \\times P(G) \\times P(G) = 1 \\times 0.30 \\times 0.30 = 0.09$$\n$NGG$ 的反向互补序列是 $CCN$。其概率是：\n$$P(CCN) = P(C) \\times P(C) \\times P(N) = 0.30 \\times 0.30 \\times 1 = 0.09$$\n可能的起始位置数量是 $1000 - 3 + 1 = 998$。\n$NGG$ PAM 的密度 $\\rho_{NGG}$ 是：\n$$\\rho_{NGG} = 998 \\times [P(NGG) + P(CCN)] = 998 \\times (0.09 + 0.09) = 998 \\times 0.18 = 179.64$$\n\n对于 $NTTN$ PAM：\n序列是 $S=NTTN$，因此其长度为 $k=4$。其概率是：\n$$P(NTTN) = P(N) \\times P(T) \\times P(T) \\times P(N) = 1 \\times 0.20 \\times 0.20 \\times 1 = 0.04$$\n$NTTN$ 的反向互补序列是 $NAAN$。其概率是：\n$$P(NAAN) = P(N) \\times P(A) \\times P(A) \\times P(N) = 1 \\times 0.20 \\times 0.20 \\times 1 = 0.04$$\n可能的起始位置数量是 $1000 - 4 + 1 = 997$。\n$NTTN$ PAM 的密度 $\\rho_{NTTN}$ 是：\n$$\\rho_{NTTN} = 997 \\times [P(NTTN) + P(NAAN)] = 997 \\times (0.04 + 0.04) = 997 \\times 0.08 = 79.76$$\n\n最后，我们计算覆盖因子，其定义为 $NGG$ 密度与 $NTTN$ 密度的比值。设该因子为 $C$。\n$$C = \\frac{\\rho_{NGG}}{\\rho_{NTTN}} = \\frac{179.64}{79.76}$$\n$$C \\approx 2.2522567...$$\n四舍五入到四位有效数字，覆盖因子为 $2.252$。", "answer": "$$\\boxed{2.252}$$", "id": "2485193"}, {"introduction": "在CRISPR-Cas系统能够执行免疫监视之前，长的pre-crRNA转录本必须被精确地加工成成熟的、引导Cas蛋白的crRNA分子。这个加工过程由像Cas6这样的专用核糖核酸内切酶催化，其效率对免疫系统的响应速度至关重要。本练习让你能够应用经典的米氏方程（Michaelis-Menten model），通过分析酶的关键动力学参数（如$K_m$和$k_{\\text{cat}}$），来评估crRNA的加工速率以及突变可能如何影响其催化效率。[@problem_id:2485206]", "problem": "一种成簇规律间隔短回文重复序列 (CRISPR) 相关的核糖核酸内切酶 Cas6，可将前体 CRISPR RNA (pre-crRNA) 加工成成熟的 CRISPR RNA (crRNA)。考虑一个单底物、单活性位点的酶，在产物抑制和逆向反应可忽略不计的条件下，该酶遵循稳态米氏-门顿 (Michaelis–Menten) 行为。其转换数为 $k_{\\text{cat}}=1\\,\\text{s}^{-1}$，米氏常数为 $K_{m}=200\\,\\text{nM}$，底物浓度为 $[S]=500\\,\\text{nM}$。\n\n仅使用标准稳态酶动力学以及 $k_{\\text{cat}}$ 和 $K_{m}$ 的定义，首先确定每个活性位点的初始加工速率（即，用活性位点总浓度归一化的初始速率）。然后，模拟一种突变，该突变不改变 $k_{\\text{cat}}$，但导致 $K_{m}$ 变为原来的两倍，而 $[S]$ 保持不变。计算由 $K_{m}$ 变为原来的两倍所引起的每个活性位点初始加工速率的倍数变化，该倍数变化定义为突变型速率与野生型速率之比。\n\n仅报告倍数变化作为最终答案，以小数形式表示并四舍五入至四位有效数字。最终答案中不包含单位。", "solution": "该问题要求基于米氏-门顿 (Michaelis–Menten) 模型分析酶动力学。该模型将初始反应速率 $v_0$ 描述为底物浓度 $[S]$ 的函数。其控制方程为：\n$$v_0 = \\frac{V_{\\text{max}} [S]}{K_{m} + [S]}$$\n在此方程中，$K_{m}$ 是米氏常数，$V_{\\text{max}}$ 是最大反应速率。$V_{\\text{max}}$ 定义为酶活性位点总浓度 $[E_T]$ 与转换数 $k_{\\text{cat}}$ 的乘积：\n$$V_{\\text{max}} = k_{\\text{cat}} [E_T]$$\n问题要求的是“每个活性位点的初始加工速率”。这是用活性位点总浓度 $[E_T]$ 归一化后的初始速率 $v_0$。我们用 $v'$ 表示这个量。\n$$v' = \\frac{v_0}{[E_T]}$$\n通过代入 $v_0$ 和 $V_{\\text{max}}$ 的表达式，我们推导出 $v'$ 的公式：\n$$v' = \\frac{1}{[E_T]} \\left( \\frac{k_{\\text{cat}} [E_T] [S]}{K_{m} + [S]} \\right) = \\frac{k_{\\text{cat}} [S]}{K_{m} + [S]}$$\n该方程表示每个酶活性位点在单位时间内将底物分子转化为产物的数量。\n\n首先，我们使用给定的参数为野生型 (wt) 酶定义速率：$k_{\\text{cat}} = 1\\,\\text{s}^{-1}$，$K_{m, \\text{wt}} = 200\\,\\text{nM}$，以及 $[S] = 500\\,\\text{nM}$。\n野生型酶的每个活性位点初始加工速率为：\n$$v'_{\\text{wt}} = \\frac{k_{\\text{cat}} [S]}{K_{m, \\text{wt}} + [S]}$$\n\n接下来，我们考虑突变型 (mut) 酶。该突变不改变 $k_{\\text{cat}}$，但使 $K_{m}$ 变为原来的两倍。底物浓度 $[S]$ 保持不变。\n突变型酶的参数为：\n$k_{\\text{cat, mut}} = k_{\\text{cat}} = 1\\,\\text{s}^{-1}$\n$K_{m, \\text{mut}} = 2 \\times K_{m, \\text{wt}} = 2 \\times 200\\,\\text{nM} = 400\\,\\text{nM}$\n突变型酶的每个活性位点初始加工速率为：\n$$v'_{\\text{mut}} = \\frac{k_{\\text{cat, mut}} [S]}{K_{m, \\text{mut}} + [S]} = \\frac{k_{\\text{cat}} [S]}{K_{m, \\text{mut}} + [S]}$$\n\n目标是计算倍数变化，其定义为突变型速率与野生型速率之比。\n$$\\text{Fold-change} = \\frac{v'_{\\text{mut}}}{v'_{\\text{wt}}}$$\n我们将 $v'_{\\text{mut}}$ 和 $v'_{\\text{wt}}$ 的表达式代入此比率：\n$$\\text{Fold-change} = \\frac{\\frac{k_{\\text{cat}} [S]}{K_{m, \\text{mut}} + [S]}}{\\frac{k_{\\text{cat}} [S]}{K_{m, \\text{wt}} + [S]}}$$\n项 $k_{\\text{cat}}$ 和 $[S]$ 同时出现在分子和分母中，因此它们可以被消去，从而显著简化表达式：\n$$\\text{Fold-change} = \\frac{K_{m, \\text{wt}} + [S]}{K_{m, \\text{mut}} + [S]}$$\n这个简化形式表明，倍数变化与 $k_{\\text{cat}}$ 无关，仅取决于米氏常数和底物浓度。\n\n现在，我们将数值代入该表达式。使用一致的浓度单位 (nM) 可以确保该比值为无量纲数。\n$K_{m, \\text{wt}} = 200\\,\\text{nM}$\n$K_{m, \\text{mut}} = 400\\,\\text{nM}$\n$[S] = 500\\,\\text{nM}$\n$$\\text{Fold-change} = \\frac{200 + 500}{400 + 500} = \\frac{700}{900} = \\frac{7}{9}$$\n问题要求将此结果以小数形式表示并四舍五入至四位有效数字。\n$$\\frac{7}{9} \\approx 0.777777...$$\n四舍五入至四位有效数字得到 $0.7778$。$K_m$ 的增加意味着底物结合能力减弱，在给定的底物浓度下，这会导致反应速率降低，这一点由小于 $1$ 的倍数变化值所证实。", "answer": "$$\\boxed{0.7778}$$", "id": "2485206"}, {"introduction": "将我们对CRISPR-Cas系统基础原理的理解转化为强大的基因组编辑工具，是现代生物技术的圣杯。一个高效且安全的基因编辑实验，其成功的关键在于设计出最优的向导RNA（gRNA）——既能高效切割靶点，又能最大程度地避免脱靶效应。本练习是一个综合性的计算实践，要求你构建一个gRNA设计流程，该流程需整合PAM兼容性、GC含量对活性的影响以及错配位置对脱靶风险的贡献等多个生物物理因素，让你亲身体验设计精准基因剪刀的挑战与权衡。[@problem_id:2485229]", "problem": "您需要形式化、实现并验证一个用于成簇规律间隔短回文重复序列 (CRISPR) 和CRISPR相关蛋白 (CRISPR-Cas) 系统中指导RNA (gRNA) 筛选的计算流程，重点是酿脓链球菌Cas9 (SpCas9)。该流程必须通过最大化靶上活性同时最小化脱靶潜力来对指导进行排序，并根据全基因组范围内无偏见的双链断裂测序鉴定 (GUIDE-seq) 的测量值来验证预测的脱靶倾向性。您的最终输出必须由一个完整、可运行的程序产生，并遵循下面给出的精确输出规范。\n\n基本原理和建模假设（求解过程中需要进行推导）：\n- CRISPR-Cas9中的靶标识别遵循指导RNA（gRNA；原型间隔区长度 $L=20$ 个核苷酸）与原型间隔区邻近基序 (PAM) 旁边的靶标DNA之间的碱基配对。\n- 对于SpCas9，典型的PAM是“NGG”；非典型但可容忍的是“NAG”。假设存在一个PAM权重因子 $w_{\\mathrm{pam}}$，对于“GG”其值为 $1$，对于“AG”其值为 $q$，对于任何其他二核苷酸其值为 $0$。\n- 双链体稳定性和切割效率取决于gRNA-DNA杂交热力学。假设最佳的鸟嘌呤-胞嘧啶 (GC) 含量为 $50\\%$（即对于 $L=20$，有 $10$ 个GC碱基），稳定性会从此最优点对称地降低。使用一种类玻尔兹曼关系来关联有效能量惩罚和预测活性，并将GC偏离惩罚建模为与偏离最优值的差值呈二次关系，系数为 $\\beta$。\n- SpCas9的脱靶识别对PAM附近一个“种子”区域内的错配高度敏感。假设位置从原型间隔区的 $5'$ 端开始索引为 $j=1,\\dots,L$，并且PAM邻近的“种子”区域为 $j\\in\\{13,\\dots,20\\}$。在独立惩罚模型下，位置 $j$ 的每个错配都会贡献一个附加的能量惩罚：如果 $j$ 在种子区域，则惩罚为 $\\lambda_{\\mathrm{seed}}$，否则为 $\\lambda_{\\mathrm{nonseed}}$。假设错配惩罚总和与位点倾向性之间存在类玻尔兹曼关系，并按该位点的PAM权重进行缩放。\n- 为了平衡收益（靶上活性）和风险（总体脱靶倾向性），通过将上述各项组合成一个有原则的无量纲比率，为每个指导构建一个单一标量得分，并在分母中进行加一平滑以避免除以零。\n- 为对照GUIDE-seq进行验证，将所选指导的预测脱靶倾向性与所提供的候选脱靶位点上相应的观测GUIDE-seq读数进行比较，排除完全匹配的靶上位点（即与指导零错配的任何位点）。使用此子集的预测向量和观测向量之间的斯皮尔曼等级相关系数，对平级使用平均排名。如果排除后剩余的脱靶位点少于 $2$ 个或任一向量为常数，则定义相关性为 $0.0$。本问题中的所有量均为无量纲标量；报告相关性时应使用小数形式，而非百分比。\n\n您的程序必须实现上述建模假设，从这些原理中推导出所需公式，然后为以下测试套件计算所要求的输出。对于所有序列比较，请使用长度为 $L=20$ 的原型间隔区序列的汉明距离；PAM是分开提供的。\n\n测试套件：\n- 测试用例1：\n  - 指导（长度为20的原型间隔区）及其PAM：\n    - $g_1=$ \"GAGTCCGAGCAGAAGAAGAA\", PAM: \"GG\"\n    - $g_2=$ \"CCTGACCTTGACATCGTGGA\", PAM: \"AG\"\n    - $g_3=$ \"TTTATGCGGCTAACGTTGCT\", PAM: \"GG\"\n  - 候选脱靶位点（每个原型间隔区长度为20）及其PAM，按固定顺序排列：\n    - $s_1=$ \"GAGTCCGAGCAGAAGAAGAT\", PAM: \"GG\"\n    - $s_2=$ \"GAGTCCGAGTAGAAGAAGAA\", PAM: \"AG\"\n    - $s_3=$ \"GAGTCCGAGCAGAAAAAGAA\", PAM: \"GG\"\n    - $s_4=$ \"CCTGACCTTGACATCGTGGA\", PAM: \"GG\"\n    - $s_5=$ \"TTTATGCGGCTAACGTTGCT\", PAM: \"AG\"\n    - $s_6=$ \"GAGTCCGAGCAGAAGAAGAA\", PAM: \"GT\"\n  - 每个指导的GUIDE-seq观测读数（与上述位点 $s_1$ 到 $s_6$ 对齐）：\n    - 对于 $g_1$: $[300,120,40,3,4,900]$\n    - 对于 $g_2$: $[20,15,8,800,10,5]$\n    - 对于 $g_3$: $[12,8,6,3,700,2]$\n  - 参数：$\\beta=0.03$, $q=0.5$, $\\lambda_{\\mathrm{seed}}=1.2$, $\\lambda_{\\mathrm{nonseed}}=0.6$。\n- 测试用例2：\n  - 指导及其PAM：\n    - $g_1=$ \"TTTATGCGGCTAACGTTGCT\", PAM: \"GG\"\n    - $g_2=$ \"AAAATTTTAAAATTTTAAAA\", PAM: \"GG\"\n    - $g_3=$ \"GCGCGCGCGCGCGCGCGCGC\", PAM: \"AG\"\n  - 候选脱靶位点及其PAM：\n    - $s_1=$ \"GCGCGCGCGCGCGCGCGCGT\", PAM: \"GG\"\n    - $s_2=$ \"AAAATTTTAAAATTTTAAAT\", PAM: \"AG\"\n    - $s_3=$ \"TTTATGCGGCTAACGTTGCT\", PAM: \"GG\"\n    - $s_4=$ \"GCGTACGCGCGTACGCGTAC\", PAM: \"GG\"\n    - $s_5=$ \"AAAAAAAATTTTTTTTAAAA\", PAM: \"GT\"\n    - $s_6=$ \"GCGCGCGCGCGCGCGCGCGC\", PAM: \"AG\"\n  - GUIDE-seq观测读数：\n    - 对于 $g_1$: $[25,8,600,15,1,5]$\n    - 对于 $g_2$: $[5,700,2,3,1,4]$\n    - 对于 $g_3$: $[300,10,5,25,0,650]$\n  - 参数：$\\beta=0.05$, $q=0.4$, $\\lambda_{\\mathrm{seed}}=1.5$, $\\lambda_{\\mathrm{nonseed}}=0.7$。\n- 测试用例3：\n  - 指导及其PAM：\n    - $g_1=$ \"ACGTACGTACGTACGTACGT\", PAM: \"GG\"\n    - $g_2=$ \"TTTTTTTTTTTTTTTTTTTT\", PAM: \"GA\"\n    - $g_3=$ \"CCCCCCCCCCCCCCCCCCCC\", PAM: \"GG\"\n  - 候选脱靶位点及其PAM：\n    - $s_1=$ \"ACGTACGTACGTACGTACGA\", PAM: \"GG\"\n    - $s_2=$ \"ACGTACGTACGTACGTACGT\", PAM: \"GG\"\n    - $s_3=$ \"TTTTTTTTTTTTTTTTTTTA\", PAM: \"AG\"\n    - $s_4=$ \"CCCCCCCCCCCCCCCCCCCA\", PAM: \"GG\"\n  - GUIDE-seq观测读数：\n    - 对于 $g_1$: $[200,1000,2,3]$\n    - 对于 $g_2$: $[1,0,50,2]$\n    - 对于 $g_3$: $[2,1,3,500]$\n  - 参数：$\\beta=0.03$, $q=0.5$, $\\lambda_{\\mathrm{seed}}=1.0$, $\\lambda_{\\mathrm{nonseed}}=0.5$。\n\n实现要求：\n- 靶上活性：根据上述原理推导出一个表达式，该表达式随PAM强度的增加而增加，并在GC含量为 $10$ (对于 $L=20$) 时达到最大值，其二次偏离惩罚由 $\\beta$ 缩放，并通过类玻尔兹曼函数进行映射。此因子使用指导自身的PAM。\n- 脱靶位点倾向性：对于一个指导-位点对，计算汉明错配，并如上所述按位置分配错配惩罚；在能量上进行加和，并通过类玻尔兹曼函数映射为倾向性，再按位点的PAM因子进行缩放。在脱靶聚合和相关性评估中排除完全匹配（汉明距离为 $0$）的位点。\n- 总体脱靶风险：对该测试用例中提供的候选脱靶位点，将其位点倾向性求和。\n- 指导得分：将靶上活性和脱靶风险合并为一个单一标量，形式为收益-风险比，并在分母中进行加一平滑以避免除以零。使用此标量对指导进行排序；如果得分相同，则选择索引最小者。\n- 验证：对于每个测试用例中选择的指导，计算预测位点倾向性向量与相应GUIDE-seq读数向量之间的斯皮尔曼等级相关系数，此计算针对相同的脱靶位点子集（排除完全匹配），对平级使用平均排名；如果子集大小小于 $2$ 或任一向量为常数，则返回 $0.0$。将每个相关系数四舍五入到 $4$ 位小数。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表形式的结果。每个结果本身必须是一个形如 $[i,\\rho]$ 的双元素列表，其中 $i$ 是该测试用例中所选（排名最高）指导的从0开始的索引，$\\rho$ 是该所选指导的斯皮尔曼相关系数（四舍五入到 $4$ 位小数）。例如：$[[i_1,\\rho_1],[i_2,\\rho_2],[i_3,\\rho_3]]$。\n\n所有计算都是无量纲的；不需要物理单位。不涉及角度。所有报告的小数必须是小数形式，而不是百分比形式。", "solution": "所呈现的问题陈述是计算生物学中一个定义明确的任务，特别是为CRISPR-Cas9系统设计指导RNA。它要求对一个受生物物理学启发的评分模型进行形式化和实现。\n\n### **问题验证**\n\n在继续之前，需要对问题陈述进行验证。\n\n**步骤1：提取已知条件**\n\n*   **系统**：酿脓链球菌Cas9 (SpCas9)。\n*   **原型间隔区长度**：$L=20$ 个核苷酸。\n*   **PAM基序**：典型“NGG”，可容忍的非典型“NAG”。\n*   **PAM权重 ($w_{\\mathrm{pam}}$)**：对于“GG”为 $1$，对于“AG”为 $q$，否则为 $0$。\n*   **GC含量模型**：最佳GC含量为 $20$ 个中的 $10$ 个。活性惩罚与偏离最优值的差值呈二次关系，系数为 $\\beta$，通过类玻尔兹曼函数进行映射。\n*   **错配惩罚模型**：位置从 $5'$ 端索引为 $j=1, \\dots, L$。种子区域为 $j \\in \\{13, \\dots, 20\\}$。错配惩罚在种子区域为 $\\lambda_{\\mathrm{seed}}$，在非种子区域为 $\\lambda_{\\mathrm{nonseed}}$。总惩罚是加性的。位点倾向性使用类玻尔兹曼函数，并按位点的PAM权重进行缩放。\n*   **指导得分**：靶上活性与总体脱靶风险的一个无量纲比率，分母进行加一平滑：$Score = \\frac{A_{\\text{on}}}{1+R_{\\text{off}}}$。\n*   **验证指标**：预测的脱靶倾向性与观测到的GUIDE-seq读数之间的斯皮尔曼等级相关系数 ($\\rho$)。排除完全匹配的靶上位点（汉明距离为 $0$）。如果剩余的脱靶位点少于 $2$ 个，或者预测或观测向量为常数，则 $\\rho=0.0$。\n*   **测试用例**：提供了三个测试用例，每个用例都有一组指导、候选脱靶位点、GUIDE-seq数据和特定的模型参数 ($\\beta, q, \\lambda_{\\mathrm{seed}}, \\lambda_{\\mathrm{nonseed}}$)。\n\n**步骤2：使用提取的已知条件进行验证**\n\n根据指定标准对问题进行评估：\n1.  **科学依据**：该模型是CRISPR-Cas9机理的一个简化但科学上合理的表示。它包含了已确立的原理：PAM依赖性、GC含量对双链体稳定性的重要性，以及对PAM邻近种子区域错配的更高敏感性。使用GUIDE-seq数据进行验证是标准做法。该问题具有科学依据。\n2.  **适定性**：目标清晰，所需输出有精确规定。建模假设是明确的，并且所有必需的参数都已提供。平级处理规则（选择最小索引）确保了解决方案的唯一性。该问题是适定的。\n3.  **客观性**：问题陈述使用了精确、定量和无偏见的语言。没有主观或基于意见的组成部分。该问题是客观的。\n4.  **完整性和一致性**：问题是自洽的。每个测试用例计算所需的所有数据和参数都已给出。没有内部矛盾。\n\n**步骤3：结论与行动**\n\n问题陈述是**有效的**。它是一项严谨、定量且有科学依据的任务，可以通过计算进行形式化和求解。我现在将继续进行模型的推导和求解算法的设计。\n\n### **计算模型的形式化**\n\n假设一个指导RNA由其长度为 $L=20$ 个核苷酸的原型间隔区序列 $g$ 及其关联的PAM $PAM_g$ 定义。一个潜在的靶位点同样由其序列 $s$ 和PAM $PAM_s$ 定义。\n\n**1. 靶上活性 ($A_{\\text{on}}$)**\n\n指导 $g$ 的靶上活性是其自身属性的函数。它结合了其PAM的有利性和gRNA-DNA双链体的稳定性，后者通过GC含量建模。\n\n令 $GC_g$ 为序列 $g$ 中鸟嘌呤 ('G') 或胞嘧啶 ('C') 碱基的数量。最佳数量为 $GC_{\\text{opt}} = L/2 = 10$。与偏离此最优值相关的能量惩罚被建模为二次关系：\n$$ E_{GC} = \\beta (GC_g - GC_{\\text{opt}})^2 = \\beta (GC_g - 10)^2 $$\nPAM权重 $w_{\\text{pam}}(PAM_g)$ 定义为：\n$$ w_{\\text{pam}}(P) = \\begin{cases} 1 & \\text{if } P = \\text{\"GG\"} \\\\ q & \\text{if } P = \\text{\"AG\"} \\\\ 0 & \\text{otherwise} \\end{cases} $$\n靶上活性 $A_{\\text{on}}(g)$ 使用类玻尔兹曼关系进行形式化，结合了PAM贡献和GC含量惩罚：\n$$ A_{\\text{on}}(g) = w_{\\text{pam}}(PAM_g) \\exp(-E_{GC}) = w_{\\text{pam}}(PAM_g) \\exp(-\\beta (GC_g - 10)^2) $$\n\n**2. 脱靶位点倾向性 ($P_{\\text{off}}$)**\n\n指导 $g$ 结合并切割脱靶位点 $s$ 的倾向性取决于错配的数量和位置以及位点的PAM。\n\n令 $d(g, s)$ 为序列 $g$ 和 $s$ 不同的位置 $j \\in \\{1, \\dots, 20\\}$ 的集合。种子区域定义为位置 $j \\in \\{13, \\dots, 20\\}$。总的加性错配能量惩罚 $E_{\\text{mismatch}}(g,s)$ 为：\n$$ E_{\\text{mismatch}}(g,s) = \\sum_{j \\in d(g, s)} \\lambda(j) $$\n其中位置惩罚 $\\lambda(j)$ 为：\n$$ \\lambda(j) = \\begin{cases} \\lambda_{\\text{seed}} & \\text{if } j \\in \\{13, \\dots, 20\\} \\\\ \\lambda_{\\text{nonseed}} & \\text{if } j \\in \\{1, \\dots, 12\\} \\end{cases} $$\n倾向性 $P_{\\text{off}}(g,s)$ 则由位点的PAM权重和错配惩罚的类玻尔兹曼项给出：\n$$ P_{\\text{off}}(g,s) = w_{\\text{pam}}(PAM_s) \\exp(-E_{\\text{mismatch}}(g,s)) $$\n请注意，如果 $g$ 和 $s$ 之间的汉明距离为 $0$，则该位点被视为靶上位点，而非脱靶位点。\n\n**3. 总体脱靶风险 ($R_{\\text{off}}$)**\n\n对于给定的指导 $g$，总体脱靶风险是其对测试用例中提供的所有潜在脱靶位点集合 $S$ 的倾向性之和。令 $S'_{\\text{off}}(g)$为 $S$ 中与 $g$ 具有非零汉明距离的位点子集。\n$$ R_{\\text{off}}(g) = \\sum_{s \\in S'_{\\text{off}}(g)} P_{\\text{off}}(g,s) $$\n\n**4. 指导得分与选择**\n\n指导 $g$ 的总分平衡了其靶上活性（收益）与总体脱靶风险。分母应用了加一平滑以防止除以零。\n$$ \\text{Score}(g) = \\frac{A_{\\text{on}}(g)}{1 + R_{\\text{off}}(g)} $$\n选择得分最高的指导。如果多个指导得分相同，则选择0-based索引最小的那个。\n\n**5. 使用斯皮尔曼等级相关 ($\\rho$) 进行验证**\n\n对于所选的指导 $g_{\\text{best}}$，我们将其预测的脱靶谱与实验数据进行验证。\n令 $S'_{\\text{off}}(g_{\\text{best}})$ 为所选指导的脱靶位点集合。我们构造两个长度为 $n = |S'_{\\text{off}}(g_{\\text{best}})|$ 的向量：\n*   预测倾向性向量：$\\vec{P}_{\\text{pred}} = \\left( P_{\\text{off}}(g_{\\text{best}}, s_k) \\right)_{s_k \\in S'_{\\text{off}}(g_{\\text{best}})}$\n*   观测GUIDE-seq读数向量：$\\vec{O}_{\\text{obs}} = \\left( \\text{count}(s_k) \\right)_{s_k \\in S'_{\\text{off}}(g_{\\text{best}})}$\n\n斯皮尔曼等级相关系数 $\\rho$ 是应用于秩转换后向量的皮尔逊相关系数。令 $rg_P$ 和 $rg_O$ 分别为 $\\vec{P}_{\\text{pred}}$ 和 $\\vec{O}_{\\text{obs}}$ 的秩向量，对平级使用平均排名。\n$$ \\rho = \\frac{\\text{cov}(rg_P, rg_O)}{\\sigma_{rg_P} \\sigma_{rg_O}} $$\n根据问题要求，如果 $n < 2$ 或者任一向量为常数（所有元素都相同），则 $\\rho$ 定义为 $0.0$。最终值四舍五入到 $4$ 位小数。\n\n### **算法流程**\n\n对每个测试用例，通过以下计算步骤实现解决方案：\n1.  **遍历所有指导**：对于测试用例中提供的每个指导，计算其综合得分。\n    a.  使用指导的序列和PAM计算靶上活性 $A_{\\text{on}}$。\n    b.  通过对所有不完全匹配指导原型间隔区的候选位点的个体倾向性 $P_{\\text{off}}$ 求和，计算总体脱靶风险 $R_{\\text{off}}$。\n    c.  计算最终得分 $\\text{Score}(g) = A_{\\text{on}}(g) / (1 + R_{\\text{off}}(g))$。\n2.  **选择最佳指导**：确定得分最高的指导。`argmax` 函数自然地处理了指定的平级规则（首次出现，即最小索引）。\n3.  **执行验证**：对于所选的指导：\n    a.  构建预测的脱靶倾向性列表和相应的观测GUIDE-seq读数列表，排除靶上位点。\n    b.  检查特殊条件：如果脱靶位点数量少于 $2$，或者预测或观测向量为常数，则相关系数 $\\rho$ 为 $0.0$。\n    c.  否则，计算两个列表之间的斯皮尔曼相关系数 $\\rho$。\n    d.  将 $\\rho$ 四舍五入到 $4$ 位小数。\n4.  **格式化输出**：存储该测试用例的 [最佳指导索引, 相关系数] 对，并按规定格式化最终输出。\n\n此过程是确定性的，并直接实现了已形式化的模型。", "answer": "```python\nimport numpy as np\nfrom scipy.stats import spearmanr\n\ndef solve():\n    \"\"\"\n    Main function to process all test cases and print the final result.\n    \"\"\"\n    test_cases = [\n        {\n            \"guides\": [\n                {\"seq\": \"GAGTCCGAGCAGAAGAAGAA\", \"pam\": \"GG\"},\n                {\"seq\": \"CCTGACCTTGACATCGTGGA\", \"pam\": \"AG\"},\n                {\"seq\": \"TTTATGCGGCTAACGTTGCT\", \"pam\": \"GG\"},\n            ],\n            \"sites\": [\n                {\"seq\": \"GAGTCCGAGCAGAAGAAGAT\", \"pam\": \"GG\"},\n                {\"seq\": \"GAGTCCGAGTAGAAGAAGAA\", \"pam\": \"AG\"},\n                {\"seq\": \"GAGTCCGAGCAGAAAAAGAA\", \"pam\": \"GG\"},\n                {\"seq\": \"CCTGACCTTGACATCGTGGA\", \"pam\": \"GG\"},\n                {\"seq\": \"TTTATGCGGCTAACGTTGCT\", \"pam\": \"AG\"},\n                {\"seq\": \"GAGTCCGAGCAGAAGAAGAA\", \"pam\": \"GT\"},\n            ],\n            \"guide_seq_counts\": [\n                [300, 120, 40, 3, 4, 900],\n                [20, 15, 8, 800, 10, 5],\n                [12, 8, 6, 3, 700, 2],\n            ],\n            \"params\": {\"beta\": 0.03, \"q\": 0.5, \"lambda_seed\": 1.2, \"lambda_nonseed\": 0.6},\n        },\n        {\n            \"guides\": [\n                {\"seq\": \"TTTATGCGGCTAACGTTGCT\", \"pam\": \"GG\"},\n                {\"seq\": \"AAAATTTTAAAATTTTAAAA\", \"pam\": \"GG\"},\n                {\"seq\": \"GCGCGCGCGCGCGCGCGCGC\", \"pam\": \"AG\"},\n            ],\n            \"sites\": [\n                {\"seq\": \"GCGCGCGCGCGCGCGCGCGT\", \"pam\": \"GG\"},\n                {\"seq\": \"AAAATTTTAAAATTTTAAAT\", \"pam\": \"AG\"},\n                {\"seq\": \"TTTATGCGGCTAACGTTGCT\", \"pam\": \"GG\"},\n                {\"seq\": \"GCGTACGCGCGTACGCGTAC\", \"pam\": \"GG\"},\n                {\"seq\": \"AAAAAAAATTTTTTTTAAAA\", \"pam\": \"GT\"},\n                {\"seq\": \"GCGCGCGCGCGCGCGCGCGC\", \"pam\": \"AG\"},\n            ],\n            \"guide_seq_counts\": [\n                [25, 8, 600, 15, 1, 5],\n                [5, 700, 2, 3, 1, 4],\n                [300, 10, 5, 25, 0, 650],\n            ],\n            \"params\": {\"beta\": 0.05, \"q\": 0.4, \"lambda_seed\": 1.5, \"lambda_nonseed\": 0.7},\n        },\n        {\n            \"guides\": [\n                {\"seq\": \"ACGTACGTACGTACGTACGT\", \"pam\": \"GG\"},\n                {\"seq\": \"TTTTTTTTTTTTTTTTTTTT\", \"pam\": \"GA\"},\n                {\"seq\": \"CCCCCCCCCCCCCCCCCCCC\", \"pam\": \"GG\"},\n            ],\n            \"sites\": [\n                {\"seq\": \"ACGTACGTACGTACGTACGA\", \"pam\": \"GG\"},\n                {\"seq\": \"ACGTACGTACGTACGTACGT\", \"pam\": \"GG\"},\n                {\"seq\": \"TTTTTTTTTTTTTTTTTTTA\", \"pam\": \"AG\"},\n                {\"seq\": \"CCCCCCCCCCCCCCCCCCCA\", \"pam\": \"GG\"},\n            ],\n            \"guide_seq_counts\": [\n                [200, 1000, 2, 3],\n                [1, 0, 50, 2],\n                [2, 1, 3, 500],\n            ],\n            \"params\": {\"beta\": 0.03, \"q\": 0.5, \"lambda_seed\": 1.0, \"lambda_nonseed\": 0.5},\n        },\n    ]\n\n    final_results = []\n    for case in test_cases:\n        result = process_test_case(case)\n        final_results.append(f\"[{result[0]},{result[1]:.4f}]\")\n\n    print(f\"[{','.join(final_results)}]\")\n\ndef get_pam_weight(pam_str, q):\n    \"\"\"Calculates the PAM weight factor.\"\"\"\n    if pam_str == \"GG\":\n        return 1.0\n    if pam_str == \"AG\":\n        return q\n    return 0.0\n\ndef calculate_on_target_activity(guide, params):\n    \"\"\"Calculates the on-target activity score for a guide.\"\"\"\n    beta = params[\"beta\"]\n    q = params[\"q\"]\n    \n    gc_count = guide[\"seq\"].count('G') + guide[\"seq\"].count('C')\n    gc_opt = 10\n    e_gc = beta * (gc_count - gc_opt)**2\n    \n    w_pam = get_pam_weight(guide[\"pam\"], q)\n    \n    activity = w_pam * np.exp(-e_gc)\n    return activity\n\ndef calculate_mismatch_penalty(g_seq, s_seq, params):\n    \"\"\"Calculates the additive energetic penalty due to mismatches.\"\"\"\n    lambda_seed = params[\"lambda_seed\"]\n    lambda_nonseed = params[\"lambda_nonseed\"]\n    L = 20\n    seed_start_idx = 12 # Position 13 is index 12\n    \n    penalty = 0.0\n    for i in range(L):\n        if g_seq[i] != s_seq[i]:\n            if i >= seed_start_idx:\n                penalty += lambda_seed\n            else:\n                penalty += lambda_nonseed\n    return penalty\n\ndef calculate_off_target_propensity(g_seq, site, params):\n    \"\"\"Calculates the off-target propensity for a guide-site pair.\"\"\"\n    q = params[\"q\"]\n    w_pam = get_pam_weight(site[\"pam\"], q)\n    if w_pam == 0:\n        return 0.0\n    \n    mismatch_penalty = calculate_mismatch_penalty(g_seq, site[\"seq\"], params)\n    propensity = w_pam * np.exp(-mismatch_penalty)\n    return propensity\n\ndef process_test_case(case_data):\n    \"\"\"Processes a single test case to find the best guide and its validation score.\"\"\"\n    guides = case_data[\"guides\"]\n    sites = case_data[\"sites\"]\n    all_counts = case_data[\"guide_seq_counts\"]\n    params = case_data[\"params\"]\n    \n    guide_scores = []\n    for i, guide in enumerate(guides):\n        # Calculate on-target activity\n        a_on = calculate_on_target_activity(guide, params)\n        \n        # Calculate aggregate off-target risk\n        r_off = 0.0\n        for site in sites:\n            # Exclude exact matches from off-target risk calculation\n            if guide[\"seq\"] != site[\"seq\"]:\n                r_off += calculate_off_target_propensity(guide[\"seq\"], site, params)\n        \n        # Calculate final guide score\n        score = a_on / (1.0 + r_off)\n        guide_scores.append(score)\n        \n    # Select best guide (highest score, smallest index for ties)\n    best_guide_idx = int(np.argmax(guide_scores))\n    best_guide = guides[best_guide_idx]\n    \n    # --- Validation Step ---\n    pred_propensities = []\n    obs_counts = []\n    \n    for j, site in enumerate(sites):\n        # Exclude exact matches from correlation calculation\n        if best_guide[\"seq\"] != site[\"seq\"]:\n            propensity = calculate_off_target_propensity(best_guide[\"seq\"], site, params)\n            pred_propensities.append(propensity)\n            obs_counts.append(all_counts[best_guide_idx][j])\n\n    # Check conditions for rho = 0.0\n    if len(pred_propensities) < 2:\n        rho = 0.0\n    # Check if either vector is constant\n    elif len(np.unique(pred_propensities)) == 1 or len(np.unique(obs_counts)) == 1:\n        rho = 0.0\n    else:\n        # Calculate Spearman correlation\n        rho, _ = spearmanr(pred_propensities, obs_counts)\n        # Handle potential NaN from spearmanr if inputs are pathological\n        if np.isnan(rho):\n             rho = 0.0\n\n    return best_guide_idx, rho\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2485229"}]}