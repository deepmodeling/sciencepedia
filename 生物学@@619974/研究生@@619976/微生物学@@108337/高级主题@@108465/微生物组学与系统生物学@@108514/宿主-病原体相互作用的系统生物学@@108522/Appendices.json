{"hands_on_practices": [{"introduction": "在将数学模型与实验数据拟合之前，一个至关重要但常被忽视的步骤是评估模型本身。一个模型是否能够从理想的、无噪声的数据中唯一确定其参数？这个问题被称为结构可辨识性分析。本练习 [@problem_id:2536413] 将通过一个经典的宿主内病毒动力学模型，引导你动手分析其参数的可辨识性，揭示看似简单的模型中参数可能存在的混淆问题，这是每个建模者都必须掌握的关键一课。", "problem": "考虑一个标准的宿主内靶细胞限制的病毒动力学模型，该模型基于质量作用感染和一阶清除与死亡，且处于一个短暂的观察窗口期，在此期间未感染靶细胞的消耗可以忽略不计。令 $T(t)$ 表示未感染的靶细胞，$I(t)$ 表示已感染的细胞，$V(t)$ 表示游离病毒粒子。模型参数包括感染率 $\\beta$、每个已感染细胞的病毒粒子产生率 $p$、病毒粒子清除率 $c$ 和已感染细胞死亡率 $\\delta$。在所分析的短时间区间内，假设 $T(t) \\approx T_0$ 实际上是一个未知常数。其动力学方程为\n\n$$\n\\frac{dI}{dt} \\;=\\; \\beta T_0 V \\;-\\; \\delta I,\\qquad\n\\frac{dV}{dt} \\;=\\; p I \\;-\\; c V.\n$$\n\n仅观察病毒载量，即输出为 $y(t) = V(t)$，其中 $t$ 在区间内是连续的，具有完美的（无噪声的）分辨率，并且初始条件 $I(0)$ 和 $V(0)$ 未知。\n\n使用微分代数和结构可辨识性（在给定完整理想输出轨迹 $y(t)$ 时参数的唯一性）的框架，消去未观察到的状态 $I(t)$，从而得到一个关于 $V(t)$ 的单输入-输出微分方程，其系数仅依赖于模型参数和（未知的）常数 $T_0$。然后，分析从 $(\\beta,p,c,\\delta)$ 到该微分方程的可辨识输出端系数的映射，以确定当仅观察 $V(t)$ 时，$\\beta$、$p$、$c$ 和 $\\delta$ 中哪些参数作为单个参数是结构可辨识的（一个参数只有在其能被唯一确定，而不仅仅是与其他未知数（包括 $T_0$）存在乘性或加性混淆时，才能被视为结构可辨识的）。\n\n在这些假设下，用一个实数回答集合 $\\{\\beta,p,c,\\delta\\}$ 中结构可辨识参数的数量。无需单位，也无需四舍五入。", "solution": "所提出的问题是关于病毒动力学线性化模型结构可辨识性分析的一个标准练习。在给出解答之前，需要进行严格的验证。\n\n### 问题验证\n\n**步骤 1：提取已知条件**\n\n描述已感染细胞 $I(t)$ 和游离病毒粒子 $V(t)$ 动力学的常微分方程组为：\n$$\n\\frac{dI}{dt} \\;=\\; \\beta T_0 V \\;-\\; \\delta I\n$$\n$$\n\\frac{dV}{dt} \\;=\\; p I \\;-\\; c V\n$$\n已知条件如下：\n-   **状态变量**：$I(t)$（已感染细胞），$V(t)$（游离病毒粒子）。\n-   **输出**：$y(t) = V(t)$，连续观测。\n-   **参数**：$\\beta$（感染率），$p$（病毒粒子产生率），$c$（病毒粒子清除率），$\\delta$（已感染细胞死亡率）。\n-   **常数**：$T_0$，一个代表未感染靶细胞数量的未知常数。\n-   **初始条件**：$I(0)$ 和 $V(0)$ 未知。\n-   **假设**：系统遵循质量作用动力学。在观察区间内，未感染靶细胞群体是恒定的，$T(t) \\approx T_0$。对 $V(t)$ 的观测是完美的且无噪声。\n\n**步骤 2：使用提取的已知条件进行验证**\n\n根据以下验证标准对问题进行评估：\n-   **科学依据**：该模型是病毒动力学靶细胞限制模型的一个广为接受的简化形式，常用于病毒学和免疫学中分析短期病毒载量数据。它严格基于种群动态学和质量作用动力学的基本原理。该问题在科学上是合理的。\n-   **适定性**：问题要求确定结构可辨识参数的数量，这是一个关于从模型结构派生出的代数系统解的唯一性问题。这是一个定义明确的数学问题。模型本身作为一个线性时不变系统，构成一个适定的初值问题。\n-   **客观性**：问题陈述使用精确的数学和科学语言表述。它没有歧义、主观性或基于观点的论断。\n-   **完整性与一致性**：进行结构可辨识性分析所需的所有方程、变量和假设均已提供。不存在内部矛盾。\n-   **相关性**：该问题与宿主-病原体相互作用的系统生物学主题直接相关，因为它涉及一个用于理解病毒与其宿主环境之间相互作用的核心模型。\n\n**步骤 3：结论与行动**\n\n问题陈述是有效的。这是一个关于标准模型结构特性的、在数学生物学领域中提法恰当的问题。将提供完整的解答。\n\n### 解答\n\n目标是确定集合 $\\{\\beta, p, c, \\delta\\}$ 中的哪些参数可以从病毒载量 $V(t)$ 的测量值中被结构辨识。分析过程首先是为可观测量 $V(t)$ 推导出一个单一的微分方程，然后检验从模型参数到该方程系数的映射。\n\n给定的系统为：\n$$\n\\frac{dI}{dt} = \\beta T_0 V - \\delta I \\quad (1)\n$$\n$$\n\\frac{dV}{dt} = p I - c V \\quad (2)\n$$\n参数 $p$ 代表病毒粒子的产生率，对于产毒性感染，该值必须非零，因此我们假设 $p \\neq 0$。从方程 (2) 中，我们可以用可观察变量 $V(t)$ 及其导数来表示未观察到的状态变量 $I(t)$：\n$$\npI = \\frac{dV}{dt} + cV\n$$\n$$\nI(t) = \\frac{1}{p} \\left( \\frac{dV}{dt} + cV \\right) \\quad (3)\n$$\n为了将此式代入方程 (1)，我们还必须找到 $\\frac{dI}{dt}$ 的表达式。对时间 $t$ 对方程 (3) 求导，得到：\n$$\n\\frac{dI}{dt} = \\frac{1}{p} \\left( \\frac{d^2V}{dt^2} + c\\frac{dV}{dt} \\right) \\quad (4)\n$$\n现在，我们将表达式 (3) 和 (4) 代入方程 (1)：\n$$\n\\frac{1}{p} \\left( \\frac{d^2V}{dt^2} + c\\frac{dV}{dt} \\right) = \\beta T_0 V - \\delta \\left( \\frac{1}{p} \\left( \\frac{dV}{dt} + cV \\right) \\right)\n$$\n为简化起见，我们将整个方程乘以 $p$：\n$$\n\\frac{d^2V}{dt^2} + c\\frac{dV}{dt} = p\\beta T_0 V - \\delta \\frac{dV}{dt} - c\\delta V\n$$\n整理各项，得到一个关于 $V(t)$ 的标准的常系数齐次线性常微分方程，即输入-输出方程：\n$$\n\\frac{d^2V}{dt^2} + (c + \\delta)\\frac{dV}{dt} + (c\\delta - p\\beta T_0)V = 0\n$$\n该方程描述了可观测量 $V(t)$ 的动力学。对 $V(t)$ 进行完美的、连续的观测，可以唯一确定此微分方程的系数。我们将这些可辨识的系数定义为 $a_1$ 和 $a_0$：\n$$\na_1 = c + \\delta\n$$\n$$\na_0 = c\\delta - p\\beta T_0\n$$\n原始参数 $(\\beta, p, c, \\delta)$ 的结构可辨识性取决于它们是否能从已知的 $a_1$ 和 $a_0$ 值中被唯一确定。我们必须分析以下代数系统：\n$$\nc + \\delta = a_1 \\quad (\\text{Eq. A})\n$$\n$$\nc\\delta - p\\beta T_0 = a_0 \\quad (\\text{Eq. B})\n$$\n未知量是四个我们关注的参数 $(\\beta, p, c, \\delta)$ 和未知常数 $T_0$。因此，我们有一个包含五个未知数的两个方程的系统。\n\n1.  **$c$ 与 $\\delta$ 的分析**：从方程 (A) 中，我们只能确定 $c$ 和 $\\delta$ 的和。这两个参数在该方程中是对称的。对于任何确定的 $a_1$ 值，都存在无限多对 $(c, \\delta)$ 满足 $c+\\delta = a_1$。例如，如果 $(c^*, \\delta^*)$ 是一个解，那么 $(\\delta^*, c^*)$ 也是一个解，这意味着它们作为单个参数是不可辨识的。此外，任何数对 $(c^*+\\epsilon, \\delta^*-\\epsilon)$ 也是一个解。因此，$c$ 和 $\\delta$ 都不是结构可辨识的。\n\n2.  **$\\beta$ 与 $p$ 的分析**：这些参数仅出现在方程 (B) 的乘积项 $p\\beta T_0$ 中。我们可以将其写为 $p\\beta T_0 = c\\delta - a_0$。\n    首先，项 $c\\delta$ 无法被单独辨识。对于一个选定的 $c$ 值，$\\delta$ 被固定为 $\\delta = a_1 - c$。将此代入乘积表达式，得到 $p\\beta T_0 = c(a_1 - c) - a_0$。由于我们可以选择任何有效的 $c$（例如，任何正实数），乘积 $p\\beta T_0$ 的值不是唯一确定的。\n    其次，即使组合量 $K = p\\beta T_0$ 的值是可辨识的（但实际上它不是），也无法唯一确定单个参数 $\\beta$ 和 $p$。这是因为它们彼此之间以及与未知常数 $T_0$ 存在乘性混淆。对于任何解 $(\\beta^*, p^*, T_0^*)$，另一组参数如 $(\\frac{\\beta^*}{2}, 2p^*, T_0^*)$ 或 $(\\beta^*, p^*, \\frac{T_0^*}{\\alpha}, \\alpha\\beta)$ 会产生相同的乘积 $K$。因此，$\\beta$ 和 $p$ 都不是结构可辨识的。\n\n总之，模型的结构以及观测仅限于 $V(t)$ 这一限制，导致了所有四个相关参数都不可辨识。可辨识的量是组合 $c+\\delta$ 和 $c\\delta - p\\beta T_0$，而不是构成它们的单个参数。\n\n在所述假设下，集合 $\\{\\beta, p, c, \\delta\\}$ 中结构可辨识的参数数量为零。", "answer": "$$\n\\boxed{0}\n$$", "id": "2536413"}, {"introduction": "生物系统通常包含在截然不同的时间尺度上发生的多个过程，从快速的信号传导到缓慢的细胞增殖。本练习 [@problem_id:2536464] 介绍了一种强大的分析技术——无量纲化，它能帮助我们识别控制系统行为的关键无量纲参数。通过这项实践，你将学会如何利用时间尺度分离来证明拟稳态近似 (quasi-steady-state approximation, QSSA) 的合理性，从而简化复杂的动力学模型并获得更深刻的洞察。", "problem": "考虑一个克隆病原体种群和先天免疫效应物池在急性感染期间的机制性双变量模型，该模型基于质量作用接触介导的杀伤和病原体相关信号对效应物的饱和招募。设 $P(t)$ 表示病原体丰度，$I(t)$ 表示被招募的免疫效应物的浓度。控制方程为\n$$\n\\frac{dP}{dt} \\;=\\; r\\,P\\!\\left(1 - \\frac{P}{K}\\right) \\;-\\; k\\,I\\,P, \n$$\n$$\n\\frac{dI}{dt} \\;=\\; \\alpha\\,\\frac{P}{P+\\theta} \\;-\\; \\delta\\,I,\n$$\n其中 $r$ 是病原体的内在增长率，$K$ 是宿主环境施加的病原体环境容纳量，$k$ 是单位免疫杀伤系数，$\\alpha$ 是最大免疫招募率，$\\theta$ 是招募的半饱和常数，$\\delta$ 是免疫效应物的周转率。在小鼠组织区室中测得以下参数值：$r = 1.2\\ \\mathrm{day}^{-1}$，$K = 1.0\\times 10^{8}\\ \\mathrm{CFU}\\,\\mathrm{mL}^{-1}$，$k = 1.0\\times 10^{-14}\\ \\mathrm{mL}\\,\\mathrm{cell}^{-1}\\,\\mathrm{day}^{-1}$，$\\alpha = 1.0\\times 10^{6}\\ \\mathrm{cells}\\,\\mathrm{mL}^{-1}\\,\\mathrm{day}^{-1}$，$\\theta = 1.0\\times 10^{6}\\ \\mathrm{CFU}\\,\\mathrm{mL}^{-1}$，以及 $\\delta = 24\\ \\mathrm{day}^{-1}$。\n\n从质量作用相互作用项、逻辑斯谛增长和饱和动力学的原理出发，通过选择具有生物学意义的尺度，对该系统进行无量纲化，以使方程变为无量纲形式，并揭示病原体增长和免疫周转的相对时间尺度。确定由此产生的决定时间尺度分离的无量纲参数，并构建控制免疫效应物动力学准稳态近似（quasi-steady-state approximation, QSSA）的小参数。利用你的无量纲化结果，证明在病原体增长的慢时间尺度上，哪些项在QSSA下是可忽略的。\n\n最后，使用上述参数值计算控制时间尺度分离的小无量纲参数的数值。最终答案以纯数（无量纲）形式表示，四舍五入到四位有效数字。最终报告的数字不应包含任何单位。", "solution": "该问题是有效的。这是一个适定的、具有科学依据的数学生物学问题，需要使用无量纲化和微扰分析的标准技术。所有参数和方程都已提供，并且它们的单位是一致的。\n\n目标是对给定的常微分方程组进行无量纲化，以确定控制病原体动力学和免疫效应物动力学之间时间尺度分离的参数。这将允许对免疫应答采用准稳态近似（QSSA）。\n\n控制方程为：\n$$\n\\frac{dP}{dt} \\;=\\; r\\,P\\!\\left(1 - \\frac{P}{K}\\right) \\;-\\; k\\,I\\,P \\quad (1)\n$$\n$$\n\\frac{dI}{dt} \\;=\\; \\alpha\\,\\frac{P}{P+\\theta} \\;-\\; \\delta\\,I \\quad (2)\n$$\n\n我们通过为时间 $t$、病原体丰度 $P$ 和免疫效应物浓度 $I$ 选择特征尺度来引入无量纲变量。问题建议使用具有生物学意义的尺度来揭示相对时间尺度。系统中的特征速率是病原体增长率 $r$ 和免疫效应物周转率 $\\delta$。病原体动力学的时间尺度为 $1/r$ 的量级，而免疫动力学的时间尺度为 $1/\\delta$ 的量级。问题要求在病原体增长的慢时间尺度上分析系统，因此我们选择特征时间 $t_c = 1/r$。对于状态变量，我们使用它们的自然最大尺度：病原体环境容纳量 $K$ 用于 $P$，以及免疫效应物可能的最大稳态浓度 $I_{max} = \\alpha/\\delta$ 用于 $I$。\n\n无量纲变量（用小写字母表示）定义为：\n$$\n\\tau = \\frac{t}{t_c} = rt, \\quad p(\\tau) = \\frac{P(t)}{K}, \\quad i(\\tau) = \\frac{I(t)}{\\alpha/\\delta}\n$$\n根据这些定义，我们有 $t = \\tau/r$，$P = pK$ 和 $I = i(\\alpha/\\delta)$。现在我们在控制方程中进行变量替换。时间导数变换为 $\\frac{d}{dt} = \\frac{d\\tau}{dt}\\frac{d}{d\\tau} = r\\frac{d}{d\\tau}$。\n\n代入病原体动力学的方程(1)：\n$$\nr\\frac{d(pK)}{d\\tau} = r(pK)\\left(1 - \\frac{pK}{K}\\right) - k\\left(i\\frac{\\alpha}{\\delta}\\right)(pK)\n$$\n$$\nrK\\frac{dp}{d\\tau} = rpK(1 - p) - \\frac{k\\alpha K}{\\delta} ip\n$$\n将整个方程除以 $rK$，得到 $p$ 的无量纲方程：\n$$\n\\frac{dp}{d\\tau} = p(1 - p) - \\left(\\frac{k\\alpha}{r\\delta}\\right) ip \\quad (3)\n$$\n\n接下来，代入免疫效应物动力学的方程(2)：\n$$\nr\\frac{d}{d\\tau}\\left(i\\frac{\\alpha}{\\delta}\\right) = \\alpha\\frac{pK}{pK + \\theta} - \\delta\\left(i\\frac{\\alpha}{\\delta}\\right)\n$$\n$$\n\\frac{r\\alpha}{\\delta}\\frac{di}{d\\tau} = \\alpha\\frac{pK}{K(p + \\theta/K)} - i\\alpha\n$$\n将整个方程除以 $\\alpha$ 得到：\n$$\n\\frac{r}{\\delta}\\frac{di}{d\\tau} = \\frac{p}{p + \\theta/K} - i \\quad (4)\n$$\n\n完整的无量纲系统是：\n$$\n\\frac{dp}{d\\tau} = p(1 - p) - \\kappa ip\n$$\n$$\n\\epsilon\\frac{di}{d\\tau} = \\frac{p}{p+\\eta} - i\n$$\n其中我们确定了三个无量纲参数：\n$$\n\\epsilon = \\frac{r}{\\delta}, \\quad \\kappa = \\frac{k\\alpha}{r\\delta}, \\quad \\eta = \\frac{\\theta}{K}\n$$\n参数 $\\epsilon$ 是免疫效应物周转的特征时间尺度（$1/\\delta$）与病原体增长的特征时间尺度（$1/r$）之比。它直接量化了时间尺度的分离。参数 $\\kappa$ 表示相对于病原体增长的无量纲免疫应答杀伤效力。参数 $\\eta$ 是免疫招募的无量纲半饱和常数。\n\n控制免疫效应物动力学准稳态近似（QSSA）的小参数是 $\\epsilon = r/\\delta$。当免疫应答比病原体动力学快得多时，QSSA是有效的，这对应于条件 $\\epsilon \\ll 1$。\n\n为了证明在QSSA下哪些项是可忽略的，我们考虑慢时间尺度上的动力学，其中 $\\tau$ 是单位量级（$O(1)$）。在此时间尺度上，我们假设系统行为是正则的，即 $p(\\tau)$、$i(\\tau)$ 及其导数（$dp/d\\tau$、$di/d\\tau$）都是单位量级。在免疫效应物的无量纲方程 $\\epsilon \\frac{di}{d\\tau} = \\frac{p}{p+\\eta} - i$ 中，右侧的项是单位量级。如果 $\\epsilon \\ll 1$，则左侧的项 $\\epsilon \\frac{di}{d\\tau}$ 是 $\\epsilon$ 量级，远小于其他项。因此，在病原体增长的慢时间尺度上，$\\epsilon \\frac{di}{d\\tau}$ 项是可忽略的。将此项设为零，得到QSSA关系：\n$$\ni(\\tau) \\approx \\frac{p(\\tau)}{p(\\tau)+\\eta}\n$$\n这个代数方程表明，免疫效应物浓度会瞬时调整以适应当前的病原体丰度。\n\n最后，我们使用给定值计算小无量纲参数 $\\epsilon$ 的数值：\n$r = 1.2\\ \\mathrm{day}^{-1}$\n$\\delta = 24\\ \\mathrm{day}^{-1}$\n\n控制时间尺度分离的小参数是：\n$$\n\\epsilon = \\frac{r}{\\delta} = \\frac{1.2\\ \\mathrm{day}^{-1}}{24\\ \\mathrm{day}^{-1}} = \\frac{1.2}{24} = 0.05\n$$\n问题要求答案四舍五入到四位有效数字。\n$$\n\\epsilon = 0.05000\n$$\n由于 $\\epsilon = 0.05 \\ll 1$，对于该系统，使用免疫效应物动力学的QSSA是完全合理的。", "answer": "$$\\boxed{0.05000}$$", "id": "2536464"}, {"introduction": "系统生物学的最终目标之一是从高维数据中做出可验证的预测。本练习 [@problem_id:2536405] 模拟了一项真实的系统免疫学任务：利用机器学习方法，根据疫苗接种早期的基因表达数据构建一个预测模型，以预测下游的抗体滴度。这项实践强调了在处理复杂生物数据时，采用严谨的交叉验证和正则化等方法的极端重要性，让你亲身体验从数据到洞察的全过程。", "problem": "您的任务是形式化、实施并评估一个预测性系统生物学模型，该模型以数学上严谨的方式，将疫苗接种后的早期转录模块活性与下游的中和抗体滴度联系起来。您必须将此生物学情景视为一个结构化的统计学习问题，并从第一性原理推导出算法。情景如下。\n\n用于证明建模选择合理性的生物学和系统性假设：\n- 根据分子生物学的中心法则（DNA到RNA到蛋白质），早期固有免疫转录反应调节下游的适应性免疫，因此，早期时间点的信使核糖核酸（mRNA）丰度反映了上游的信号通路，这些信号通路塑造了后期的B细胞反应。在此假设下，接种后第 $3$ 天的转录组模块活性分数可以作为一组无亲缘关系个体中第 $28$ 天中和抗体滴度的预测变量。\n- 个体被视为从一个群体中独立同分布地抽取的样本。滴度的测量噪声在稀释滴度的对数尺度上可以合理地近似为高斯分布。\n\n用于生成合成但具有生物学合理性数据的数学数据生成模型：\n- 设 $N = 120$ 名个体， $P = 15$ 个转录组模块。令 $\\mathbf{X} \\in \\mathbb{R}^{N \\times P}$ 为第 $3$ 天测量的模块分数矩阵，令 $\\mathbf{y} \\in \\mathbb{R}^{N}$ 为第 $28$ 天测量的$\\log_2$中和抗体滴度向量。\n- 构建一个具有块结构以反映相关模块的协方差矩阵 $\\boldsymbol{\\Sigma} \\in \\mathbb{R}^{P \\times P}$：\n  - 索引为 $\\{0,1,2,3,4\\}$ 的特征，其块内相关性为 $\\rho = 0.6$。\n  - 索引为 $\\{5,6,7,8,9\\}$ 的特征，其块内相关性为 $\\rho = 0.5$。\n  - 索引为 $\\{10,11,12,13,14\\}$ 的特征，其块内相关性为 $\\rho = 0.3$。\n  - 来自不同块的任意两个特征之间，其相关性为 $\\rho_{\\text{off}} = 0.1$。\n  - 所有边际方差均为 $1.0$。\n- 对 $i \\in \\{1,\\dots,N\\}$，独立地抽取 $\\mathbf{X}$ 的行 $\\mathbf{x}_i \\sim \\mathcal{N}(\\mathbf{0}, \\boldsymbol{\\Sigma})$，为保证可复现性，使用固定的随机种子 $42$。\n- 设真实的线性效应向量是稀疏的：在索引 $S = \\{0,2,5,7,12\\}$ 处的非零项系数为 $\\{0.8, 0.6, 0.5, -0.4, 0.7\\}$，所有其他系数等于 $0.0$。设截距为 $\\beta_0 = 1.0$。\n- 通过 $y_i = \\beta_0 + \\mathbf{x}_i^{\\top} \\boldsymbol{\\beta} + \\varepsilon_i$ 生成 $\\mathbf{y}$，其中 $\\varepsilon_i \\overset{\\text{i.i.d.}}{\\sim} \\mathcal{N}(0, \\sigma^2)$，$\\sigma = 0.8$。所有 $\\beta_0$、$\\boldsymbol{\\beta}$ 和 $\\sigma$ 的值都是固定的，并且仅在数据生成时已知。\n\n要实现的学习目标和估计器：\n- 假设监督学习模型为 $y \\approx \\beta_0 + \\mathbf{x}^{\\top}\\boldsymbol{\\beta}$，并带有加性高斯噪声。\n- 使用岭正则化最小二乘法，通过最小化以下损失函数来从训练数据中估计 $\\boldsymbol{\\beta}$：\n$$\n\\mathcal{L}(\\beta_0, \\boldsymbol{\\beta}) = \\sum_{i \\in \\mathcal{I}_{\\text{train}}} \\left(y_i - \\beta_0 - \\mathbf{x}_i^{\\top} \\boldsymbol{\\beta} \\right)^2 + \\alpha \\lVert \\boldsymbol{\\beta} \\rVert_2^2,\n$$\n其中 $\\alpha \\ge 0$ 是一个正则化参数。不要对截距 $\\beta_0$ 进行惩罚。\n- 仅在每个训练折上，使用z-score对特征进行标准化：对于特征 $j$，使用 $\\mu_j = \\frac{1}{n}\\sum_{i \\in \\mathcal{I}_{\\text{train}}} x_{ij}$ 和 $s_j = \\sqrt{\\frac{1}{n}\\sum_{i \\in \\mathcal{I}_{\\text{train}}}(x_{ij}-\\mu_j)^2}$；然后 $z_{ij} = (x_{ij}-\\mu_j)/s_j$。如果 $s_j = 0$，则设 $s_j = 1$ 以避免除以零。\n- 对于 $\\alpha = 0$，估计器简化为普通最小二乘法；需要稳健地处理潜在的奇异性（如果需要，使用伪逆）。对于 $\\alpha > 0$，您可以在中心化的训练数据 $\\mathbf{y}_c$ 上使用闭式解 $ (\\mathbf{Z}^{\\top}\\mathbf{Z} + \\alpha \\mathbf{I})^{-1}\\mathbf{Z}^{\\top}\\mathbf{y}_c $。\n\n交叉验证协议：\n- 使用$K$折交叉验证来评估预测性能。确定性地构建数据折：\n  - 设 $\\pi$ 是一个由伪随机数生成器（种子为 $2021$）生成的 $\\{0,1,\\dots,N-1\\}$ 的排列。\n  - 将 $\\pi$ 分割成 $K$ 个连续的数据折，其大小差异最多为 $1$。\n  - 对于每个数据折 $k$，在其他数据折的并集上拟合模型（仅使用训练数据进行标准化），在数据折 $k$ 上进行预测，并收集折外预测结果。\n- 汇总所有数据折的预测结果，以在完整的折外预测集上计算以下指标：\n  - 决定系数：\n  $$\n  R^2 = 1 - \\frac{\\sum_{i=1}^{N} (y_i - \\hat{y}_i)^2}{\\sum_{i=1}^{N} (y_i - \\bar{y})^2},\n  $$\n  其中 $\\bar{y} = \\frac{1}{N}\\sum_{i=1}^{N} y_i$。\n  - 均方根误差：\n  $$\n  \\mathrm{RMSE} = \\sqrt{\\frac{1}{N}\\sum_{i=1}^{N} (y_i - \\hat{y}_i)^2}.\n  $$\n  - $\\{y_i\\}$ 和 $\\{\\hat{y}_i\\}$ 之间的Spearman等级相关系数 $\\rho_s$。\n- 除了 $\\mathrm{RMSE}$ 之外，所有指标都是无量纲的。$\\mathrm{RMSE}$ 应以 $\\log_2$-滴度单位报告。\n\n测试套件和要求输出：\n- 使用上述数据生成和协议，在以下四种参数设置下评估模型，每种设置由一个 $(\\alpha, K)$ 对描述：\n  - 情况A：$(0.0, 5)$。\n  - 情况B：$(1.0, 5)$。\n  - 情况C：$(100.0, 5)$。\n  - 情况D：$(10.0, 120)$ (留一法交叉验证)。\n- 对每种情况，在汇总的折外预测上计算三个指标 $(R^2, \\mathrm{RMSE}, \\rho_s)$。\n- 将每个指标四舍五入到 $4$ 位小数。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，结果按以下顺序排列：\n$$\n[\\;R^2_{\\text{A}}, \\mathrm{RMSE}_{\\text{A}}, \\rho_{s,\\text{A}}, R^2_{\\text{B}}, \\mathrm{RMSE}_{\\text{B}}, \\rho_{s,\\text{B}}, R^2_{\\text{C}}, \\mathrm{RMSE}_{\\text{C}}, \\rho_{s,\\text{C}}, R^2_{\\text{D}}, \\mathrm{RMSE}_{\\text{D}}, \\rho_{s,\\text{D}}\\;].\n$$\n- 每个数字必须按规定四舍五入到 $4$ 位小数。\n- 角度单位不适用。无需转换物理单位；$\\mathrm{RMSE}$ 的单位已为 $\\log_2$-滴度。\n\n您的实现必须是一个完整的、可运行的程序，该程序能够构建合成数据集、执行交叉验证、计算指标，并以所描述的精确格式打印最终行。", "solution": "该问题陈述已经过严格验证，并被认定为有效。这是一个在系统生物学和统计学习领域内定义明确、有科学依据且客观的计算问题。它为数据生成和模型评估提供了明确且可复现的协议。我们现在将着手提供一个完整的、有原则的解决方案。\n\n任务是在一个模拟的但具有生物学合理性的背景下，实现并评估一个岭回归模型，用于根据早期转录模块活性预测中和抗体滴度。评估将使用指定的$K$折交叉验证方案，针对四种不同的参数设置进行。\n\n解决方案将分为三个主要阶段构建：\n1.  合成数据生成：我们将根据所述的随机模型构建数据集 $(\\mathbf{X}, \\mathbf{y})$。\n2.  交叉验证模型拟合与预测：我们将实现$K$折交叉验证循环。在每个折内，我们将执行特征标准化，拟合岭回归模型，并生成折外预测。\n3.  性能指标计算：在汇总的折外预测上，我们将计算决定系数 ($R^2$)、均方根误差 ($\\mathrm{RMSE}$) 和Spearman等级相关系数 ($\\rho_s$)。\n\n**1. 合成数据生成**\n\n首先，我们生成合成数据集。\n- 个体数量为 $N=120$，特征（转录组模块）数量为 $P=15$。\n- 预测变量矩阵 $\\mathbf{X} \\in \\mathbb{R}^{120 \\times 15}$ 从一个多元正态分布中抽取，其中每一行 $\\mathbf{x}_i \\sim \\mathcal{N}(\\mathbf{0}, \\boldsymbol{\\Sigma})$。\n- 协方差矩阵 $\\boldsymbol{\\Sigma} \\in \\mathbb{R}^{15 \\times 15}$ 按照指定的块结构构建。对角线元素均为 $1.0$。非对角线元素 $\\Sigma_{jk}$ 根据特征索引 $j$ 和 $k$ 设置：\n  - 如果 $j, k \\in \\{0, ..., 4\\}$，则 $\\Sigma_{jk} = 0.6$。\n  - 如果 $j, k \\in \\{5, ..., 9\\}$，则 $\\Sigma_{jk} = 0.5$。\n  - 如果 $j, k \\in \\{10, ..., 14\\}$，则 $\\Sigma_{jk} = 0.3$。\n  - 对于任何处于不同块中的 $j, k$，$\\Sigma_{jk} = 0.1$。\n  - 该矩阵根据构造是对称且半正定的，因此是一个有效的协方差矩阵。\n- 数据矩阵 $\\mathbf{X}$ 是使用带有固定种子 $42$ 的伪随机数生成器（PRNG）生成的，以确保可复现性。\n- 真实的线性模型系数由一个稀疏向量 $\\boldsymbol{\\beta} \\in \\mathbb{R}^{15}$ 给出，其在索引 $\\{0,2,5,7,12\\}$ 处的非零值分别为 $\\{0.8, 0.6, 0.5, -0.4, 0.7\\}$。真实截距为 $\\beta_0 = 1.0$。\n- 响应向量 $\\mathbf{y} \\in \\mathbb{R}^{120}$ ($\\log_2$-滴度) 通过带有加性高斯噪声的线性模型生成：$y_i = \\beta_0 + \\mathbf{x}_i^{\\top} \\boldsymbol{\\beta} + \\varepsilon_i$，其中 $\\varepsilon_i \\sim \\mathcal{N}(0, \\sigma^2)$ 是独立同分布的，且 $\\sigma = 0.8$。使用同一个PRNG实例生成噪声项 $\\varepsilon_i$。\n\n**2. 交叉验证的岭回归**\n\n任务的核心是实现一个确定性的$K$折交叉验证过程。\n\n- **数据折生成**：首先使用种子为 $2021$ 的PRNG创建一个样本索引 $\\{0, 1, ..., N-1\\}$ 的排列 $\\pi$。然后将这些经过排列的索引分割成 $K$ 个大小约相等的连续、不重叠的子集（数据折）。\n\n- **数据折迭代**：对于每个数据折 $k \\in \\{1, ..., K\\}$，该折作为测试集 ($\\mathcal{I}_{\\text{test}}$)，其余 $K-1$ 个数据折的并集作为训练集 ($\\mathcal{I}_{\\text{train}}$)。设相应的数据为 $(\\mathbf{X}_{\\text{train}}, \\mathbf{y}_{\\text{train}})$ 和 $(\\mathbf{X}_{\\text{test}}, \\mathbf{y}_{\\text{test}})$。\n\n- **特征标准化**：模型在标准化的特征上进行拟合。关键的是，标准化参数（均值和标准差）*仅*根据每个折的训练数据计算，以防止从测试集发生信息泄露。对于每个特征 $j$：\n  - 均值：$\\mu_j = \\frac{1}{|\\mathcal{I}_{\\text{train}}|} \\sum_{i \\in \\mathcal{I}_{\\text{train}}} x_{ij}$\n  - 标准差：$s_j = \\sqrt{\\frac{1}{|\\mathcal{I}_{\\text{train}}|} \\sum_{i \\in \\mathcal{I}_{\\text{train}}} (x_{ij} - \\mu_j)^2}$。如果 $s_j = 0$，则将其设为 $1$ 以避免除以零。\n  - 训练数据 $\\mathbf{X}_{\\text{train}}$ 被标准化为 $\\mathbf{Z}_{\\text{train}}$，其中 $z_{ij} = (x_{ij} - \\mu_j) / s_j$。\n  - 测试数据 $\\mathbf{X}_{\\text{test}}$ 使用从训练数据计算出的*相同* $\\mu_j$ 和 $s_j$ 进行标准化，得到 $\\mathbf{Z}_{\\text{test}}$。\n\n- **模型拟合**：我们求解岭回归问题。为避免惩罚截距项，我们在中心化的响应数据上拟合模型。\n  - 训练集上的平均响应为 $\\bar{y}_{\\text{train}} = \\frac{1}{|\\mathcal{I}_{\\text{train}}|} \\sum_{i \\in \\mathcal{I}_{\\text{train}}} y_i$。\n  - 中心化的训练响应为 $\\mathbf{y}_{c, \\text{train}} = \\mathbf{y}_{\\text{train}} - \\bar{y}_{\\text{train}}$。\n  - 标准化预测变量的估计系数 $\\hat{\\boldsymbol{\\beta}}'$ 通过求解岭回归问题的正规方程得到：\n    $$ \\hat{\\boldsymbol{\\beta}}' = (\\mathbf{Z}_{\\text{train}}^{\\top}\\mathbf{Z}_{\\text{train}} + \\alpha \\mathbf{I})^{-1} \\mathbf{Z}_{\\text{train}}^{\\top} \\mathbf{y}_{c, \\text{train}} $$\n    其中 $\\alpha$ 是正则化参数，$\\mathbf{I}$ 是单位矩阵。\n  - 对于 $\\alpha=0$ 的情况（普通最小二乘法），矩阵 $\\mathbf{Z}_{\\text{train}}^{\\top}\\mathbf{Z}_{\\text{train}}$ 可能是奇异的。我们使用Moore-Penrose伪逆 $(\\mathbf{Z}_{\\text{train}}^{\\top}\\mathbf{Z}_{\\text{train}})^{\\dagger}$ 来获得一个稳健的解。\n\n- **预测**：使用拟合的模型和训练集参数为测试集生成预测：\n  $$ \\hat{\\mathbf{y}}_{\\text{test}} = \\bar{y}_{\\text{train}} \\mathbf{1} + \\mathbf{Z}_{\\text{test}} \\hat{\\boldsymbol{\\beta}}' $$\n  其中 $\\mathbf{1}$ 是一个全为一的向量。收集每个数据折的预测结果。在遍历所有 $K$ 个数据折后，我们将得到一个完整的折外预测向量 $\\hat{\\mathbf{y}} \\in \\mathbb{R}^N$。\n\n**3. 性能指标计算**\n\n使用真实响应向量 $\\mathbf{y}$ 和汇总的折外预测向量 $\\hat{\\mathbf{y}}$，我们计算三个指定的性能指标。\n\n- **决定系数 ($R^2$)**：\n  $$ R^2 = 1 - \\frac{\\sum_{i=1}^{N} (y_i - \\hat{y}_i)^2}{\\sum_{i=1}^{N} (y_i - \\bar{y})^2}, \\quad \\text{where } \\bar{y} = \\frac{1}{N}\\sum_{i=1}^{N} y_i $$\n- **均方根误差 ($\\mathrm{RMSE}$)**：\n  $$ \\mathrm{RMSE} = \\sqrt{\\frac{1}{N}\\sum_{i=1}^{N} (y_i - \\hat{y}_i)^2} $$\n- **Spearman等级相关性 ($\\rho_s$)**：这是在 $\\mathbf{y}$ 和 $\\hat{\\mathbf{y}}$ 的秩变换向量上计算的Pearson相关系数。\n\n对由 $(\\alpha, K)$ 指定的四个测试用例：$(0.0, 5)$, $(1.0, 5)$, $(100.0, 5)$ 和 $(10.0, 120)$，重复整个过程。将得到的 $12$ 个指标四舍五入到 $4$ 位小数，并格式化为所要求的输出字符串。", "answer": "```python\nimport numpy as np\nfrom scipy.stats import spearmanr\n\ndef solve():\n    \"\"\"\n    Solves the systems biology predictive modeling problem as specified.\n    \"\"\"\n    # 1. DATA GENERATION\n    # Parameters\n    N = 120\n    P = 15\n    RANDOM_SEED_DATA = 42\n    RANDOM_SEED_PERM = 2021\n    \n    # Construct the covariance matrix Sigma\n    sigma_mat = np.full((P, P), 0.1) # Off-block correlation\n    correlations = [0.6, 0.5, 0.3]\n    block_indices = [range(0, 5), range(5, 10), range(10, 15)]\n    \n    for rho, indices in zip(correlations, block_indices):\n        for i in indices:\n            for j in indices:\n                if i != j:\n                    sigma_mat[i, j] = rho\n    np.fill_diagonal(sigma_mat, 1.0) # Marginal variances\n\n    # Initialize RNG for data generation\n    rng = np.random.default_rng(RANDOM_SEED_DATA)\n\n    # Generate predictor matrix X\n    X = rng.multivariate_normal(np.zeros(P), sigma_mat, size=N)\n\n    # Define true model parameters and generate response vector y\n    beta_true = np.zeros(P)\n    nonzero_indices = [0, 2, 5, 7, 12]\n    nonzero_coeffs = [0.8, 0.6, 0.5, -0.4, 0.7]\n    beta_true[nonzero_indices] = nonzero_coeffs\n    beta_0 = 1.0\n    sigma_noise = 0.8\n    \n    epsilon = rng.normal(0, sigma_noise, N)\n    y = beta_0 + X @ beta_true + epsilon\n\n    # 2. CROSS-VALIDATION SETUP\n    # Generate deterministic permutation for folds\n    perm_rng = np.random.default_rng(RANDOM_SEED_PERM)\n    permuted_indices = perm_rng.permutation(N)\n\n    # Define test cases\n    test_cases = [\n        (0.0, 5),     # Case A\n        (1.0, 5),     # Case B\n        (100.0, 5),   # Case C\n        (10.0, 120),  # Case D\n    ]\n\n    all_results = []\n    \n    for alpha, K in test_cases:\n        # Run analysis for one case\n        metrics = run_cross_validation(alpha, K, X, y, permuted_indices)\n        all_results.extend(metrics)\n\n    # Final print statement\n    print(f\"[{','.join([f'{val:.4f}' for val in all_results])}]\")\n\ndef run_cross_validation(alpha, K, X, y, permuted_indices):\n    \"\"\"\n    Performs K-fold cross-validation for a given alpha and returns evaluation metrics.\n    \"\"\"\n    N, P = X.shape\n    y_pred_all = np.zeros(N)\n    \n    # Split indices into K folds\n    folds = np.array_split(permuted_indices, K)\n\n    for k in range(K):\n        # Identify train and test indices for the current fold\n        test_indices = folds[k]\n        train_indices = np.concatenate([folds[i] for i in range(K) if i != k])\n        \n        X_train, y_train = X[train_indices], y[train_indices]\n        X_test, y_test = X[test_indices], y[test_indices]\n        \n        # Standardization (based on training data only)\n        mu_train = np.mean(X_train, axis=0)\n        s_train = np.std(X_train, axis=0, ddof=0)\n        s_train[s_train == 0] = 1.0 # Avoid division by zero\n        \n        Z_train = (X_train - mu_train) / s_train\n        Z_test = (X_test - mu_train) / s_train\n        \n        # Model Fitting\n        y_train_mean = np.mean(y_train)\n        y_train_c = y_train - y_train_mean\n        \n        # Solve for beta_prime\n        I = np.identity(P)\n        \n        if alpha == 0.0:\n            # OLS with pseudoinverse\n            ZTZ_inv = np.linalg.pinv(Z_train.T @ Z_train)\n        else:\n            # Ridge regression\n            ZTZ_inv = np.linalg.inv(Z_train.T @ Z_train + alpha * I)\n            \n        beta_prime = ZTZ_inv @ Z_train.T @ y_train_c\n        \n        # Prediction\n        y_pred_fold = y_train_mean + Z_test @ beta_prime\n        y_pred_all[test_indices] = y_pred_fold\n        \n    # 3. METRIC CALCULATION\n    # R-squared\n    ss_res = np.sum((y - y_pred_all)**2)\n    ss_tot = np.sum((y - np.mean(y))**2)\n    r_squared = 1 - (ss_res / ss_tot)\n    \n    # RMSE\n    rmse = np.sqrt(np.mean((y - y_pred_all)**2))\n    \n    # Spearman correlation\n    spearman_rho, _ = spearmanr(y, y_pred_all)\n    \n    return [r_squared, rmse, spearman_rho]\n\nif __name__ == \"__main__\":\n    solve()\n\n```", "id": "2536405"}]}