{"hands_on_practices": [{"introduction": "在深入研究翻译过程的复杂调控和错误机制之前，我们首先需要掌握其最基本的资源消耗。这个练习将引导你核算合成一条特定长度的多肽链所需的总高能磷酸键当量。通过这个计算，你将熟悉翻译过程中主要的耗能步骤——氨基酸活化、肽链延伸、起始和终止——这对于理解细胞的能量预算以及设计高效的体外合成系统至关重要 [@problem_id:2718399]。", "problem": "在一个用于快速原型制作和生物制造的无细胞蛋白质合成（CFPS；Cell-Free Protein Synthesis）系统中，翻译的能量成本可以以高能磷酸当量来计算。\n\n为本题目的，将一个高能磷酸当量定义为一个核苷三磷酸水解为其对应的核苷二磷酸和无机磷酸（例如，鸟苷三磷酸 (GTP) 水解为鸟苷二磷酸 (GDP) 和无机磷酸），并将腺苷三磷酸 (ATP) 水解为腺苷一磷酸 (AMP) 和焦磷酸计为消耗 $2$ 个高能磷酸当量。\n\n考虑在此类CFPS系统中合成一个长度为 $L = 300$ 个氨基酸的单多肽。假设翻译的能量消耗具有以下公认的特征：\n- 每个转运核糖核酸 (tRNA) 由氨酰tRNA合成酶进行的氨酰化过程，每掺入一个氨基酸消耗 $2$ 个高能磷酸当量。\n- 核糖体肽链聚合过程中的每个延伸循环消耗 $2$ 个GTP，计为每个延伸步骤消耗 $2$ 个高能磷酸当量。\n- 长度为 $L$ 的多肽在延伸过程中需要形成 $L-1$ 个肽键。\n- 起始和终止阶段合并在一起，在延伸之外额外消耗 $2$ 个GTP，总计为 $2$ 个高能磷酸当量。\n\n仅利用这些假设以及长度为 $L$ 的多肽在延伸过程中需要形成 $L-1$ 个肽键的基本翻译机制，计算合成该蛋白质所需的总高能磷酸当量数。请以单个整数形式报告每个合成的多肽所需的高能磷酸当量数，不带单位。无需四舍五入。", "solution": "对问题陈述进行有效性审查。\n\n步骤 1：提取已知条件。\n- 系统是一个无细胞蛋白质合成 (CFPS) 系统。\n- 一个高能磷酸当量被定义为一个 NTP 水解为 NDP + Pi。\n- ATP 水解为 AMP + 焦磷酸计为消耗 $2$ 个高能磷酸当量。\n- 多肽长度为 $L = 300$ 个氨基酸。\n- tRNA 的氨酰化过程每掺入一个氨基酸消耗 $2$ 个高能磷酸当量。\n- 每个延伸循环消耗 $2$ 个 GTP，即 $2$ 个高能磷酸当量。\n- 长度为 $L$ 的多肽在延伸过程中需要形成 $L-1$ 个肽键。\n- 起始和终止的总成本是 $2$ 个 GTP，即 $2$ 个高能磷酸当量。\n\n步骤 2：使用提取的已知条件进行验证。\n- 科学依据：该问题具有科学依据。所描述的氨酰化、延伸、起始和终止的能量消耗是生物化学中用于核算蛋白质合成能耗的标准教科书数值。高能磷酸当量的定义也是标准的。\n- 适定性：该问题是适定的。它提供了所有必要的参数（$L$ 以及各阶段的成本）和一个明确的目标（计算总当量数）。多肽长度 $L$ 和延伸循环次数（$L-1$）之间的关系已明确说明。存在唯一、确定性的解。\n- 客观性：语言精确、量化，没有主观或含糊不清的术语。\n\n步骤 3：结论与行动。\n该问题被认定为有效。这是一个直接的、定量的生物化学问题，它自成体系、前后一致且科学上合理。开始求解。\n\n合成一个多肽所需的总高能磷酸当量数，我们记为 $E_{total}$，是三个不同阶段（氨酰化、延伸以及起始和终止的组合阶段）所消耗能量的总和。\n\n我们来分别分析每个组成部分。\n\n1.  氨酰化过程的能量成本 ($E_{acyl}$):\n    对于长度为 $L$ 的多肽，有 $L$ 个氨基酸必须被激活并连接到它们各自的 tRNA 分子上。问题陈述此过程由氨酰-tRNA合成酶催化，每个氨基酸消耗 $2$ 个高能磷酸当量。该成本源于 ATP 水解为 AMP 和焦磷酸。因此，氨酰化的总能量为：\n    $$E_{acyl} = L \\times 2$$\n\n2.  多肽链延伸的能量成本 ($E_{elong}$):\n    合成一个长度为 $L$ 的多肽链需要形成 $L-1$ 个肽键。每个肽键的形成都是核糖体上一个延伸循环的一部分。问题指明每个延伸循环消耗 $2$ 个 GTP，相当于 $2$ 个高能磷酸当量。这个成本与延伸因子的功能相关（一个 GTP 用于 EF-Tu/eEF1A 递送氨酰-tRNA，另一个 GTP 用于 EF-G/eEF2 介导的核糖体易位）。因此，延伸的总能量为：\n    $$E_{elong} = (L-1) \\times 2$$\n\n3.  起始和终止的能量成本 ($E_{init/term}$):\n    问题为翻译的起始和已完成多肽链的终止提供了一个合并的能量成本。这个固定成本为 $2$ 个 GTP，相当于 $2$ 个高能磷酸当量，与多肽长度无关。\n    $$E_{init/term} = 2$$\n\n总能量成本 $E_{total}$ 是这三个部分的总和：\n$$E_{total} = E_{acyl} + E_{elong} + E_{init/term}$$\n代入各部分的表达式：\n$$E_{total} = (L \\times 2) + ((L-1) \\times 2) + 2$$\n我们可以对该表达式进行代数化简：\n$$E_{total} = 2L + 2L - 2 + 2$$\n$$E_{total} = 4L$$\n这揭示了一个在给定假设下的总能量成本通用公式：最终多肽中每个氨基酸需要 $4$ 个高能磷酸当量。\n\n现在，我们将指定的多肽长度 $L = 300$ 代入推导出的公式中：\n$$E_{total} = 4 \\times 300$$\n$$E_{total} = 1200$$\n\n合成指定多肽所需的总高能磷酸当量数为 $1200$。", "answer": "$$\\boxed{1200}$$", "id": "2718399"}, {"introduction": "翻译的保真性是维持蛋白质组功能正常的基石，而氨酰-tRNA合成酶 (aaRS) 在其中扮演着“第一道防线”的角色。这个练习提供了一个假想场景，让你将一个微观层面的错误——特定tRNA的错配充电频率——与一个宏观层面的后果——整个蛋白质组的氨基酸错掺率——联系起来。通过应用基本的概率论，你将能够量化这种错误对细胞整体翻译精度的影响 [@problem_id:2542529]。", "problem": "细胞通过氨酰-tRNA合成酶对转运核糖核酸（tRNA）的精确氨酰化以及核糖体上密码子-反密码子的正确配对来维持翻译保真度。考虑某一种氨基酸，其同源密码子集合占表达的信使核糖核酸（mRNA）池中所有有义密码子的比例为$0.03$。设解码此密码子集的tRNA总池的稳态错载频率为$2\\times 10^{-3}$，该频率定义为：经过氨酰-tRNA合成酶的质量控制后，被错误氨基酸错误酰化的那部分tRNA所占的比例，且核糖体不会对氨基酸身份进行额外的下游校正。假设如下：\n- 每个延伸步骤根据密码子在整个蛋白质组范围内的使用频率独立地取样。\n- 核糖体仅通过密码子-反密码子的互补性来选择tRNA；因此，当该集合中的一个密码子出现在A位时，招募的tRNA来自同源tRNA池，如果该tRNA被错误酰化，则错误的氨基酸将被掺入。\n- 忽略所有其他错误来源（例如，错读、移码、提前终止），并假设除了指定的频率外，密码子选择与tRNA的装载状态之间没有动力学耦合。\n\n仅使用这些假设和概率论的基本定义，推导并计算仅由该错载途径导致的、在蛋白质组范围内每个氨基酸添加的预期错掺率。将最终答案表示为小数，并四舍五入到两位有效数字。", "solution": "该问题陈述科学合理、内容完整、定义明确。它提出了一个分子生物学基本过程——翻译保真度的简化但有效的模型，允许基于概率论原理进行定量求解。所有必要数据均已提供，且各项假设为计算创建了一个清晰的框架。问题中不存在会使其失效的矛盾、模糊之处或事实错误。\n\n我们的任务是计算由特定错载途径导致的、在蛋白质组范围内每个氨基酸添加的预期错掺率。该速率等价于在任何一个随机选择的肽链延伸步骤中发生错掺事件的概率。\n\n设$f_{codon}$为所考虑的氨基酸种类的同源密码子在表达的mRNA池中所有有义密码子中所占的比例。根据问题陈述，我们有：\n$$f_{codon} = 0.03$$\n该值表示在正在翻译的mRNA上随机选择一个密码子位置，该位置对应于此特定氨基酸的概率。\n\n设$f_{mischarge}$为相应tRNA集的稳态错载频率。这是针对该氨基酸的tRNA中，被错误地用不同氨基酸酰化的部分所占的比例。问题给出的值为：\n$$f_{mischarge} = 2 \\times 10^{-3}$$\n这表示在核糖体从此同源池中选择一个tRNA的条件下，该tRNA携带错误氨基酸的条件概率。\n\n一个归因于此特定途径的错掺事件的发生，当且仅当在单个延伸步骤中，以下两个事件相继发生：\n1. 事件$A$：出现在核糖体A位的密码子是所关注氨基酸的同源密码子之一。该事件的概率为$P(A) = f_{codon}$。\n2. 事件$B$：被招募到该密码子上的tRNA分子（基于其反密码子被选择）是同源池中被错误酰化的成员之一。问题陈述，核糖体仅通过密码子-反密码子的互补性选择tRNA。因此，如果事件A发生，一个来自同源池的tRNA被招募。这个被招募的tRNA被错载的概率由$f_{mischarge}$给出。这是条件概率$P(B|A) = f_{mischarge}$。\n\n每个氨基酸添加的总错掺概率，我们记为$R_{misinc}$，是这两个事件同时发生的联合概率。基于密码子选择和tRNA池的装载状态是独立的假设，我们可以通过将第一个事件的概率乘以第二个事件的条件概率来求得此联合概率：\n$$R_{misinc} = P(A \\cap B) = P(A) \\times P(B|A)$$\n代入定义的变量：\n$$R_{misinc} = f_{codon} \\times f_{mischarge}$$\n现在，我们代入问题陈述中提供的数值：\n$$R_{misinc} = (0.03) \\times (2 \\times 10^{-3})$$\n进行计算：\n$$R_{misinc} = (3 \\times 10^{-2}) \\times (2 \\times 10^{-3}) = 6 \\times 10^{-5}$$\n问题要求最终答案以小数形式表示，并四舍五入到两位有效数字。计算出的值为：\n$$R_{misinc} = 0.00006$$\n为了用两位有效数字表示，我们必须包含一个末尾的零，这个零在这种情况下是有效的。因此，结果是$0.000060$。", "answer": "$$\\boxed{0.000060}$$", "id": "2542529"}, {"introduction": "蛋白质合成是一个动态过程，其速率受到多种因素的限制，其中带电荷tRNA的供应是一个关键瓶颈。这个高级练习要求你建立一个动力学模型，以模拟特定带电荷tRNA物种的耗尽如何影响全局蛋白质合成速率。该模型整合了密码子使用频率、摆动配对和米氏动力学等多个真实世界的复杂因素，是预测和设计合成生物学回路行为的强大工具 [@problem_id:2785571]。", "problem": "要求您形式化并计算在给定密码子频率分布以及密码子和tRNA种类之间的摆动识别条件下，耗尽一种带电荷的转移核糖核酸（tRNA）对整个蛋白质组的全局蛋白质合成速率的影响。您的程序必须实现机制动力学并产生定量结果。所有输出均为无量纲的相对速率。\n\n机制基础和定义：\n- 翻译延伸通过核糖体重复选择氨酰化的转移核糖核酸（tRNA）三元复合物来进行。对于密码子 $j$，其有效同源三元复合物浓度为 $x_j = \\sum_{i=1}^{N} w_{j,i}\\,c'_i$，其中 $w_{j,i} \\in [0,1]$ 编码了tRNA种类 $i$ 对密码子 $j$ 的摆动识别效率，而 $c'_i$ 是扰动后种类 $i$ 的带电荷tRNA浓度。基线带电荷tRNA浓度向量为 $\\mathbf{c} = (1,1,\\dots,1)$。\n- 氨酰-tRNA合成酶（aaRS）维持电荷装载；在此，耗尽单一带电荷的tRNA种类 $g$ 被建模为 $c'_g = d \\cdot c_g$（其中 $d \\in [0,1]$），且对于所有 $i \\neq g$，$c'_i = c_i$。\n- 每个密码子的延伸（到达）速率由单底物Michaelis–Menten形式给出：$r_j = k_{\\max}\\,\\dfrac{x_j}{K_M + x_j}$，其中 $k_{\\max} > 0$ 是有效最大速率，$K_M > 0$ 是有效Michaelis常数。当 $x_j > 0$ 时，每个密码子的等待时间为 $t_j = 1/r_j$；当 $x_j = 0$ 时，$t_j = +\\infty$。\n- 设 $f_j \\ge 0$ 表示蛋白质组范围的密码子频率，满足 $\\sum_{j=1}^{M} f_j = 1$。蛋白质组加权的每个密码子平均等待时间为 $\\tau = \\sum_{j=1}^{M} f_j\\,t_j$。使用相同的 $K_M$ 但无耗尽（即 $d = 1$ 从而 $\\mathbf{c'} = \\mathbf{c}$）来定义基线每个密码子平均等待时间 $\\tau_0$。如果 $\\tau$ 是有限的，则每个核糖体的相对全局蛋白质合成速率为 $R = \\tau_0 / \\tau$。如果存在任何 $j$ 使得 $f_j > 0$ 且 $x_j = 0$，则 $\\tau = +\\infty$ 且 $R = 0$。\n\n本问题的数据：\n- 密码子数量 $M = 5$ 和tRNA种类数量 $N = 3$。\n- 摆动识别效率矩阵条目（行是密码子 $j \\in \\{1,2,3,4,5\\}$；列是tRNA种类 $i \\in \\{1,2,3\\}$）：非零值为\n  $w_{1,1} = 1.0$，\n  $w_{2,1} = 0.5$, $w_{2,2} = 0.5$，\n  $w_{3,2} = 1.0$，\n  $w_{4,3} = 1.0$，\n  $w_{5,1} = 0.2$, $w_{5,2} = 0.2$, $w_{5,3} = 0.6$，\n  其他 $w_{j,i} = 0$。\n- 蛋白质组密码子频率：$f_1 = 0.25$, $f_2 = 0.30$, $f_3 = 0.15$, $f_4 = 0.20$, $f_5 = 0.10$。\n- 基线带电荷tRNA浓度：$c_1 = 1.0$, $c_2 = 1.0$, $c_3 = 1.0$。\n- 被耗尽种类的索引为 $g = 2$，因此 $c'_2 = d$，$c'_1 = 1.0$，$c'_3 = 1.0$。\n\n你的任务：\n- 对于下面由一对 $(d, K_M)$ 指定的每个测试用例，使用上文的定义计算相对全局蛋白质合成速率 $R$。您可以假设任何固定的 $k_{\\max} > 0$（它在 $R$ 中被抵消），但您必须遵守机制定义来计算 $r_j$、$t_j$、$\\tau$ 和 $\\tau_0$。\n\n测试套件（每个项目为 $(d, K_M)$）：\n- 情况 A: $(0.4, 0.5)$\n- 情况 B: $(1.0, 0.5)$\n- 情况 C: $(0.0, 0.5)$\n- 情况 D: $(0.6, 5.0)$\n\n最终输出格式：\n- 您的程序应生成单行输出，包含一个由方括号括起来的逗号分隔列表。这些条目必须是情况A–D的四个 $R$ 值，按顺序排列，每个值都四舍五入到恰好六位小数（无单位），例如：$[0.123456,0.234567,0.345678,0.456789]$。", "solution": "经评估，问题陈述有效。它具有科学依据、适定，并包含唯一解所需的所有必要信息。我们将进行正式推导和计算。\n\n中心任务是计算相对全局蛋白质合成速率 $R$，其定义为基线每个密码子平均等待时间 $\\tau_0$ 与扰动后每个密码子平均等待时间 $\\tau$ 的比率。\n$$R = \\frac{\\tau_0}{\\tau}$$\n每个密码子平均等待时间是单个密码子等待时间 $t_j$ 的蛋白质组加权平均值。\n$$\\tau = \\sum_{j=1}^{M} f_j t_j$$\n其中 $f_j$ 是密码子 $j$ 的频率，$M$ 是密码子类型的总数。每个密码子的等待时间 $t_j$ 是每个密码子延伸速率 $r_j$ 的倒数。\n$$t_j = \\frac{1}{r_j}$$\n速率 $r_j$ 由单底物Michaelis-Menten形式给出：\n$$r_j = k_{\\max} \\frac{x_j}{K_M + x_j}$$\n其中 $k_{\\max}$ 是最大速率，$K_M$ 是Michaelis常数，$x_j$ 是密码子 $j$ 的同源三元复合物的有效浓度。综合这些，密码子 $j$ 的等待时间为：\n$$t_j = \\frac{K_M + x_j}{k_{\\max} x_j} = \\frac{1}{k_{\\max}} \\left(1 + \\frac{K_M}{x_j}\\right)$$\n该表达式在 $x_j > 0$ 时有效。如果对于某个密码子 $j$ 有 $f_j > 0$ 且 $x_j = 0$，则 $t_j \\to \\infty$，导致 $\\tau \\to \\infty$，因此 $R = 0$。\n\n平均等待时间 $\\tau$ 现在可以表示为：\n$$\\tau = \\sum_{j=1}^{M} f_j \\left[ \\frac{1}{k_{\\max}} \\left(1 + \\frac{K_M}{x_j}\\right) \\right] = \\frac{1}{k_{\\max}} \\left( \\sum_{j=1}^{M} f_j + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_j} \\right)$$\n鉴于 $\\sum_{j=1}^{M} f_j = 1$，上式可简化为：\n$$\\tau = \\frac{1}{k_{\\max}} \\left(1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_j}\\right)$$\n基线等待时间 $\\tau_0$ 是在基线条件下（无tRNA耗尽）、使用基线有效浓度 $x_{j,0}$ 计算的。\n$$\\tau_0 = \\frac{1}{k_{\\max}} \\left(1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_{j,0}}\\right)$$\n相对速率 $R$ 是这两个量的比率。如问题所述，$k_{\\max}$ 项被抵消。\n$$R = \\frac{\\tau_0}{\\tau} = \\frac{1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_{j,0}}}{1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_j}}$$\n有效浓度 $x_j$ 取决于带电荷的tRNA浓度 $c'_i$ 和摆动识别矩阵 $w_{j,i}$。\n$$x_j = \\sum_{i=1}^{N} w_{j,i} c'_i$$\n这可以写成矩阵形式 $\\mathbf{x} = \\mathbf{W}\\mathbf{c'}$。\n\n现在我们应用问题中的具体数据。我们有 $M=5$ 个密码子和 $N=3$ 种tRNA。\n摆动矩阵 $\\mathbf{W}$ 是：\n$$\\mathbf{W} = \\begin{pmatrix} 1.0 & 0.0 & 0.0 \\\\ 0.5 & 0.5 & 0.0 \\\\ 0.0 & 1.0 & 0.0 \\\\ 0.0 & 0.0 & 1.0 \\\\ 0.2 & 0.2 & 0.6 \\end{pmatrix}$$\n密码子频率向量 $\\mathbf{f}$ 是：\n$$\\mathbf{f} = \\begin{pmatrix} 0.25 \\\\ 0.30 \\\\ 0.15 \\\\ 0.20 \\\\ 0.10 \\end{pmatrix}$$\n基线带电荷tRNA浓度向量为 $\\mathbf{c} = (1, 1, 1)^T$。首先，我们使用 $\\mathbf{c'}_0 = \\mathbf{c}$ 计算基线有效浓度 $\\mathbf{x}_0$。\n$$\\mathbf{x}_0 = \\mathbf{W}\\mathbf{c} = \\begin{pmatrix} 1.0 & 0.0 & 0.0 \\\\ 0.5 & 0.5 & 0.0 \\\\ 0.0 & 1.0 & 0.0 \\\\ 0.0 & 0.0 & 1.0 \\\\ 0.2 & 0.2 & 0.6 \\end{pmatrix} \\begin{pmatrix} 1.0 \\\\ 1.0 \\\\ 1.0 \\end{pmatrix} = \\begin{pmatrix} 1.0 \\\\ 1.0 \\\\ 1.0 \\\\ 1.0 \\\\ 1.0 \\end{pmatrix}$$\n当所有 $x_{j,0} = 1.0$ 时，$R$ 的分子中的和变为 $\\sum_{j=1}^{M} \\frac{f_j}{x_{j,0}} = \\sum_{j=1}^{M} f_j = 1$。$R$ 的公式简化为：\n$$R = \\frac{1 + K_M}{1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_j}}$$\n接下来，我们计算扰动后的有效浓度 $\\mathbf{x}$。耗尽以因子 $d \\in [0,1]$ 靶向tRNA种类 $g=2$。扰动后的浓度向量为 $\\mathbf{c'} = (1.0, d, 1.0)^T$。\n$$\\mathbf{x} = \\mathbf{W}\\mathbf{c'} = \\begin{pmatrix} 1.0 & 0.0 & 0.0 \\\\ 0.5 & 0.5 & 0.0 \\\\ 0.0 & 1.0 & 0.0 \\\\ 0.0 & 0.0 & 1.0 \\\\ 0.2 & 0.2 & 0.6 \\end{pmatrix} \\begin{pmatrix} 1.0 \\\\ d \\\\ 1.0 \\end{pmatrix} = \\begin{pmatrix} 1.0 \\\\ 0.5 + 0.5d \\\\ d \\\\ 1.0 \\\\ 0.8 + 0.2d \\end{pmatrix}$$\n$R$ 的分母中的和是 $S(d) = \\sum_{j=1}^{5} \\frac{f_j}{x_j}$：\n$$S(d) = \\frac{0.25}{1.0} + \\frac{0.30}{0.5 + 0.5d} + \\frac{0.15}{d} + \\frac{0.20}{1.0} + \\frac{0.10}{0.8 + 0.2d}$$\n这里我们必须检查条件 $x_j=0$。因为所有 $f_j > 0$，我们必须检查是否有任何 $x_j$ 可能为零。\n$x_1=1.0 > 0$。对于 $d \\geq 0$，$x_2 = 0.5(1+d) > 0$。$x_3 = d$，如果 $d=0$ 则为 $0$。$x_4=1.0 > 0$。对于 $d \\geq 0$，$x_5 = 0.8+0.2d > 0$。\n因此，当 $d=0$ 时，$x_3=0$。由于 $f_3=0.15 > 0$，密码子3的等待时间是无限的，这使得在任何 $d=0$ 的情况下，$\\tau$ 都为无限大，且 $R=0$。\n\n我们现在为四个测试用例计算 $R$。\n\n情况 A: $(d, K_M) = (0.4, 0.5)$\n我们首先计算 $S(d=0.4)$:\n$$S(0.4) = \\frac{0.25}{1.0} + \\frac{0.30}{0.5 + 0.5(0.4)} + \\frac{0.15}{0.4} + \\frac{0.20}{1.0} + \\frac{0.10}{0.8 + 0.2(0.4)}$$\n$$ S(0.4) = 0.25 + \\frac{0.30}{0.7} + 0.375 + 0.20 + \\frac{0.10}{0.88} \\approx 0.25 + 0.428571 + 0.375 + 0.20 + 0.113636 = 1.367207... $$\n现在，我们计算 $R$：\n$$R_A = \\frac{1 + 0.5}{1 + 0.5 \\times 1.367207...} = \\frac{1.5}{1 + 0.683604...} = \\frac{1.5}{1.683604...} \\approx 0.890948$$\n\n情况 B: $(d, K_M) = (1.0, 0.5)$\n这是基线条件，其中 $d=1.0$。因此 $\\mathbf{c'} = \\mathbf{c}$, $\\mathbf{x} = \\mathbf{x}_0$, 且 $\\tau = \\tau_0$。比率 $R=\\tau_0/\\tau$ 必须为1。\n使用公式验证：$S(d=1.0) = \\sum f_j/x_j = \\sum f_j/x_{j,0} = 1$。\n$$R_B = \\frac{1 + 0.5}{1 + 0.5 \\times 1} = \\frac{1.5}{1.5} = 1.0$$\n\n情况 C: $(d, K_M) = (0.0, 0.5)$\n正如已确定的，当 $d=0$ 时，$x_3 = 0$。由于 $f_3 > 0$，平均等待时间 $\\tau$ 是无限的。\n因此，$R_C = 0.0$。\n\n情况 D: $(d, K_M) = (0.6, 5.0)$\n我们计算 $S(d=0.6)$:\n$$S(0.6) = \\frac{0.25}{1.0} + \\frac{0.30}{0.5 + 0.5(0.6)} + \\frac{0.15}{0.6} + \\frac{0.20}{1.0} + \\frac{0.10}{0.8 + 0.2(0.6)}$$\n$$ S(0.6) = 0.25 + \\frac{0.30}{0.8} + 0.25 + 0.20 + \\frac{0.10}{0.92} = 0.25 + 0.375 + 0.25 + 0.20 + 0.108696... = 1.183696... $$\n现在，我们计算 $R$:\n$$R_D = \\frac{1 + 5.0}{1 + 5.0 \\times 1.183696...} = \\frac{6.0}{1 + 5.918478...} = \\frac{6.0}{6.918478...} \\approx 0.867232$$\n最终结果四舍五入到六位小数，并汇总成最终答案。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the relative global protein synthesis rate for given test cases.\n    \"\"\"\n\n    # --- Data for the problem ---\n    # Number of codons M = 5, number of tRNA species N = 3.\n    # Wobble efficiency matrix W (shape M x N)\n    W = np.array([\n        [1.0, 0.0, 0.0],  # Codon 1\n        [0.5, 0.5, 0.0],  # Codon 2\n        [0.0, 1.0, 0.0],  # Codon 3\n        [0.0, 0.0, 1.0],  # Codon 4\n        [0.2, 0.2, 0.6]   # Codon 5\n    ])\n\n    # Proteome codon frequencies f (vector of length M)\n    f = np.array([0.25, 0.30, 0.15, 0.20, 0.10])\n\n    # Baseline charged tRNA concentrations c (vector of length N)\n    c = np.array([1.0, 1.0, 1.0])\n\n    # Depleted species index g = 2 (0-indexed: 1)\n    g_idx = 1\n\n    # Test suite: each item is a tuple (d, K_M)\n    test_cases = [\n        (0.4, 0.5),  # Case A\n        (1.0, 0.5),  # Case B\n        (0.0, 0.5),  # Case C\n        (0.6, 5.0)   # Case D\n    ]\n\n    results = []\n\n    # --- Calculations ---\n    # According to the derived formula:\n    # R = (1 + K_M) / (1 + K_M * sum(f_j / x_j))\n    # where x_j is the perturbed effective cognate concentration.\n    # The term sum(f_j / x_{j,0}) simplifies to 1 as all x_{j,0} = 1.\n\n    for d, K_M in test_cases:\n        # Per problem definition, if d=0, an essential codon's tRNA\n        # resource is zero, so protein synthesis halts.\n        # x_3 = d, and f_3 = 0.15 > 0.\n        if d == 0.0:\n            results.append(0.0)\n            continue\n\n        # 1. Calculate perturbed charged tRNA concentrations c'\n        c_prime = c.copy()\n        c_prime[g_idx] = d * c[g_idx]\n\n        # 2. Calculate effective cognate ternary complex concentrations x\n        x = W @ c_prime\n\n        # 3. Calculate the sum term for the denominator\n        # We must check if any x_j is zero for f_j > 0.\n        # This is already handled by the d=0 check above, as all f_j > 0 and\n        # only x_3 can be zero, which happens when d=0.\n        sum_term = np.sum(f / x)\n\n        # 4. Calculate relative global protein synthesis rate R\n        numerator = 1.0 + K_M\n        denominator = 1.0 + K_M * sum_term\n        R = numerator / denominator\n        results.append(R)\n\n    # Format output to exactly six decimal places\n    formatted_results = [f\"{res:.6f}\" for res in results]\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2785571"}]}