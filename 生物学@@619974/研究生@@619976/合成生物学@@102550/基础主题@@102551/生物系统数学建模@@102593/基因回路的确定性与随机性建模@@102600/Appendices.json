{"hands_on_practices": [{"introduction": "本练习旨在将您带出简化的基因表达模型，直面更接近生物学现实的复杂性。您将运用质量作用基本定律，为一个包含多个中间步骤的转录过程推导其稳态行为。通过这项实践，您将巩固构建和求解常微分方程组的能力，这是确定性建模的基石。[@problem_id:2728827]", "problem": "考虑一个单拷贝细菌启动子，在确定性质谱作用动力学下，通过一个三态转录起始循环驱动蛋白质的表达。启动子的状态包括：游离启动子、闭合复合物和开放复合物。RNA聚合酶 (RNAP) 的结合和异构化步骤被显式建模；有效起始会产生一个信使核糖核酸 (mRNA)，并使启动子返回游离状态，同时将RNAP释放回溶液中。假设在充分混合条件下，由于RNAP相对于启动子而言大量过剩，其总浓度恒定。\n\n启动子状态的反应方案如下：\n- 游离启动子 $F$ 与RNAP $R$ 结合形成闭合复合物 $C$：$F + R \\xrightarrow{k_1} C$。\n- 闭合复合物解离：$C \\xrightarrow{k_{-1}} F + R$。\n- 闭合复合物异构化为开放复合物 $O$：$C \\xrightarrow{k_2} O$。\n- 开放复合物逆转为闭合复合物：$O \\xrightarrow{k_{-2}} C$。\n- 开放复合物进行有效起始，产生一个mRNA并重置启动子：$O \\xrightarrow{k_3} F + R + \\text{mRNA}$。\n\n设启动子总浓度为 $[G_{\\mathrm{tot}}]$，其中 $[F] + [C] + [O] = [G_{\\mathrm{tot}}]$。设 $[R]$ 为恒定的RNAP浓度。mRNA和蛋白质的动力学遵循以下规则：\n- mRNA的生成速率等于 $k_3 [O]$。mRNA以一级速率常数 $\\gamma_m$ 降解。\n- 蛋白质由mRNA翻译而来，一级速率常数为 $k_{\\mathrm{tl}}$，并以一级速率常数 $\\gamma_p$ 被稀释/降解。\n\n从质量作用定律和质量守恒出发，通过求解启动子状态的稳态平衡，推导出稳态开放复合物浓度 $[O]^*$（用 $k_1, k_{-1}, k_2, k_{-2}, k_3, [R]$ 和 $[G_{\\mathrm{tot}}]$ 表示）。然后，使用 $[O]^*$ 计算稳态蛋白质浓度 $[P]^*$。\n\n使用以下科学上合理的参数值：\n- $k_1 = 1.0 \\times 10^{-3}$ (nM$^{-1}$ s$^{-1}$)\n- $k_{-1} = 0.1$ (s$^{-1}$)\n- $k_2 = 10$ (s$^{-1}$)\n- $k_{-2} = 1$ (s$^{-1}$)\n- $k_3 = 0.5$ (s$^{-1}$)\n- $[R] = 1000$ (nM)\n- $[G_{\\mathrm{tot}}] = 1$ (nM)\n- $\\gamma_m = 2.0 \\times 10^{-3}$ (s$^{-1}$)\n- $k_{\\mathrm{tl}} = 3.0 \\times 10^{-2}$ (s$^{-1}$)\n- $\\gamma_p = 2.0 \\times 10^{-4}$ (s$^{-1}$)\n\n以微摩尔为单位表示最终的稳态蛋白质浓度 $[P]^*$。将答案四舍五入至三位有效数字。", "solution": "问题陈述已经过验证，被认为是具有科学依据、提法明确且客观的。它描述了一个使用确定性质谱作用动力学的基因表达标准模型，这是定量生物学中的一种基本方法。所有必要的参数和约束都已提供，不存在矛盾或模糊之处。因此，我们着手进行严格的求解推导。\n\n启动子状态——游离态 ($[F]$)、闭合复合物 ($[C]$)和开放复合物 ($[O]$)——的动力学由一组基于质量作用定律的常微分方程 (ODEs) 描述。RNA聚合酶的浓度 $[R]$ 假定为常数。\n\n$$\n\\frac{d[F]}{dt} = -k_1 [F][R] + k_{-1}[C] + k_3[O]\n$$\n$$\n\\frac{d[C]}{dt} = k_1 [F][R] - (k_{-1} + k_2)[C] + k_{-2}[O]\n$$\n$$\n\\frac{d[O]}{dt} = k_2[C] - (k_{-2} + k_3)[O]\n$$\n\n启动子的总浓度 $[G_{\\mathrm{tot}}]$ 是守恒的：\n$$\n[F] + [C] + [O] = [G_{\\mathrm{tot}}]\n$$\n\n为求稳态浓度，我们将时间导数设为零。设稳态浓度用星号 ($*$) 表示。从 $[O]$ 的常微分方程，我们得到：\n$$\n0 = k_2[C]^* - (k_{-2} + k_3)[O]^*\n$$\n这使我们能够用 $[O]^*$ 来表示 $[C]^*$：\n$$\n[C]^* = \\frac{k_{-2} + k_3}{k_2} [O]^*\n$$\n\n接着，从 $[C]$ 的稳态常微分方程，我们得到：\n$$\n0 = k_1 [F]^*[R] - (k_{-1} + k_2)[C]^* + k_{-2}[O]^*\n$$\n代入 $[C]^*$ 的表达式使我们能够求解以 $[O]^*$ 表示的 $[F]^*$：\n$$\nk_1 [F]^*[R] = (k_{-1} + k_2)[C]^* - k_{-2}[O]^* = (k_{-1} + k_2)\\left(\\frac{k_{-2} + k_3}{k_2}\\right)[O]^* - k_{-2}[O]^*\n$$\n$$\nk_1 [F]^*[R] = \\frac{(k_{-1} + k_2)(k_{-2} + k_3) - k_2 k_{-2}}{k_2} [O]^* = \\frac{k_{-1}k_{-2} + k_{-1}k_3 + k_2 k_3}{k_2} [O]^*\n$$\n$$\n[F]^* = \\frac{k_{-1}k_{-2} + k_{-1}k_3 + k_2 k_3}{k_1 k_2 [R]} [O]^*\n$$\n\n现在，我们应用总启动子浓度的守恒定律：\n$$\n[F]^* + [C]^* + [O]^* = [G_{\\mathrm{tot}}]\n$$\n代入 $[F]^*$ 和 $[C]^*$ 的表达式，得到一个仅含 $[O]^*$ 的方程：\n$$\n\\left( \\frac{k_{-1}k_{-2} + k_{-1}k_3 + k_2 k_3}{k_1 k_2 [R]} \\right)[O]^* + \\left( \\frac{k_{-2} + k_3}{k_2} \\right)[O]^* + [O]^* = [G_{\\mathrm{tot}}]\n$$\n提取公因式 $[O]^*$ 并求解，可得到稳态开放复合物浓度：\n$$\n[O]^* \\left( \\frac{k_{-1}k_{-2} + k_{-1}k_3 + k_2 k_3 + k_1[R](k_{-2}+k_3) + k_1k_2[R]}{k_1 k_2 [R]} \\right) = [G_{\\mathrm{tot}}]\n$$\n$$\n[O]^* = \\frac{[G_{\\mathrm{tot}}] k_1 k_2 [R]}{k_{-1}k_{-2} + k_{-1}k_3 + k_2 k_3 + k_1[R](k_{-2}+k_3) + k_1k_2[R]}\n$$\n\nmRNA ($[m]$) 和蛋白质 ($[P]$) 浓度的动力学由以下方程给出：\n$$\n\\frac{d[m]}{dt} = k_3 [O] - \\gamma_m [m]\n$$\n$$\n\\frac{d[P]}{dt} = k_{\\mathrm{tl}} [m] - \\gamma_p [P]\n$$\n在稳态下，它们的时间导数也为零。\n从mRNA方程得到：\n$$\nk_3 [O]^* = \\gamma_m [m]^* \\implies [m]^* = \\frac{k_3}{\\gamma_m} [O]^*\n$$\n从蛋白质方程得到：\n$$\nk_{\\mathrm{tl}} [m]^* = \\gamma_p [P]^* \\implies [P]^* = \\frac{k_{\\mathrm{tl}}}{\\gamma_p} [m]^*\n$$\n代入 $[m]^*$ 的表达式，我们得到以 $[O]^*$ 表示的稳态蛋白质浓度 $[P]^*$：\n$$\n[P]^* = \\frac{k_{\\mathrm{tl}}}{\\gamma_p} \\left( \\frac{k_3}{\\gamma_m} [O]^* \\right) = \\frac{k_{\\mathrm{tl}} k_3}{\\gamma_p \\gamma_m} [O]^*\n$$\n通过代入 $[O]^*$ 的完整表达式，我们得到 $[P]^*$ 的最终解析解。\n\n现在我们代入所给的参数值：\n$k_1 = 1.0 \\times 10^{-3}$ nM$^{-1}$ s$^{-1}$, $k_{-1} = 0.1$ s$^{-1}$, $k_2 = 10$ s$^{-1}$, $k_{-2} = 1$ s$^{-1}$, $k_3 = 0.5$ s$^{-1}$, $[R] = 1000$ nM, $[G_{\\mathrm{tot}}] = 1$ nM, $\\gamma_m = 2.0 \\times 10^{-3}$ s$^{-1}$, $k_{\\mathrm{tl}} = 3.0 \\times 10^{-2}$ s$^{-1}$, 以及 $\\gamma_p = 2.0 \\times 10^{-4}$ s$^{-1}$。\n\n首先，我们计算 $[O]^*$ 表达式的分母：\n项 $k_1[R] = (1.0 \\times 10^{-3}) \\times 1000 = 1.0$ s$^{-1}$。\n分母为 $D = k_{-1}k_{-2} + k_{-1}k_3 + k_2 k_3 + k_1[R](k_{-2}+k_3) + k_1[R]k_2$。\n$D = (0.1)(1) + (0.1)(0.5) + (10)(0.5) + (1.0)(1 + 0.5) + (1.0)(10)$\n$D = 0.1 + 0.05 + 5.0 + 1.5 + 10.0 = 16.65$ s$^{-2}$。\n\n接着，我们计算 $[O]^*$ 表达式的分子：\n$N_O = [G_{\\mathrm{tot}}] k_1 k_2 [R] = (1) \\times (1.0 \\times 10^{-3}) \\times (10) \\times (1000) = 10$ nM s$^{-2}$。\n\n稳态开放复合物浓度为：\n$$\n[O]^* = \\frac{N_O}{D} = \\frac{10}{16.65} \\text{ nM}\n$$\n\n最后，我们计算稳态蛋白质浓度 $[P]^*$：\n$$\n[P]^* = \\frac{k_{\\mathrm{tl}} k_3}{\\gamma_p \\gamma_m} [O]^* = \\frac{(3.0 \\times 10^{-2})(0.5)}{(2.0 \\times 10^{-4})(2.0 \\times 10^{-3})} \\times \\frac{10}{16.65} \\text{ nM}\n$$\n$$\n[P]^* = \\frac{1.5 \\times 10^{-2}}{4.0 \\times 10^{-7}} \\times \\frac{10}{16.65} \\text{ nM} = 37500 \\times \\frac{10}{16.65} \\text{ nM}\n$$\n$$\n[P]^* = \\frac{375000}{16.65} \\text{ nM} \\approx 22522.52 \\text{ nM}\n$$\n\n题目要求最终答案以微摩尔 ($\\mu$M) 为单位。由于 $1$ $\\mu$M $= 1000$ nM，我们必须将结果除以 $1000$：\n$$\n[P]^* \\approx \\frac{22522.52}{1000} \\text{ } \\mu\\text{M} \\approx 22.52252 \\text{ } \\mu\\text{M}\n$$\n按要求四舍五入到三位有效数字，得到最终答案。\n$$\n[P]^* \\approx 22.5 \\text{ } \\mu\\text{M}\n$$", "answer": "$$\n\\boxed{22.5}\n$$", "id": "2728827"}, {"introduction": "在建立了确定性模型框架后，我们现在来探讨其固有的局限性。这个思想实验将引导您思考一个处于不稳定平衡点的系统，从而深入探究确定性观点与随机性观点之间的本质区别。您的推理将揭示，在像基因开关这样的非线性系统中，随机效应为何不仅仅是微小的修正，而是能够从根本上改变系统最终命运的关键因素。[@problem_id:1492568]", "problem": "考虑一个对称基因拨动开关的简化模型，这是合成生物学中的一个基本电路。该系统涉及两种蛋白质 U 和 V，它们相互抑制对方的合成。它们浓度（记为 $u(t)$ 和 $v(t)$）的动力学可以用一组确定性常微分方程来描述：\n\n$$\n\\frac{du}{dt} = \\frac{\\alpha}{1 + v^n} - \\gamma u\n$$\n$$\n\\frac{dv}{dt} = \\frac{\\alpha}{1 + u^n} - \\gamma v\n$$\n\n在这里，$\\alpha > 0$ 是最大产生速率，$\\gamma > 0$ 是一阶降解速率常数，而希尔系数 $n > 1$ 量化了抑制的强度。对于这些参数的某些选择，该系统是双稳态的，拥有两个不同的稳定稳态，对应于一种蛋白质高表达而另一种蛋白质被抑制的情况，例如（高 $u$，低 $v$）和（低 $u$，高 $v$）。除了这两个稳定状态外，还存在一个单一的不稳定稳态 $(u^*, v^*)$，该状态是对称的，满足 $u^* = v^*$。\n\n假设我们可以将系统正好初始化在这个不稳定的稳态上，即 $(u(0), v(0)) = (u^*, v^*)$。我们希望比较两种不同建模范式所预测的长期行为（当 $t \\to \\infty$ 时）：\n\n1.  一个**确定性模型**，由上述的精确微分方程控制。\n2.  一个**随机模型**，它将单个的合成和降解事件视为离散的随机过程。该模型内在地包含了内在分子噪声的影响。\n\n以下哪个陈述最准确地对比了这两种模型从不稳定稳态出发的长期预测？\n\nA. 确定性模型和随机模型都预测系统将无限期地保持在不稳定的稳态 $(u^*, v^*)$。\n\nB. 确定性模型预测系统将演化到一个两种浓度都为零的状态，即 $(u,v) = (0,0)$。随机模型预测系统将移动到两个稳定状态之一。\n\nC. 确定性模型预测系统将无限期地保持在 $(u^*, v^*)$。相比之下，随机模型预测，由于内在噪声，系统将不可避免地被推离此点，并以相等的概率向两个稳定状态之一演化。\n\nD. 随机模型预测系统将无限期地保持在 $(u^*, v^*)$。相比之下，确定性模型预测系统将演化到两个稳定状态之一。\n\nE. 两种模型都预测系统将以相等的概率向两个稳定稳态之一演化。", "solution": "我们分析由下式定义的确定性动力学\n$$\n\\frac{du}{dt} = \\frac{\\alpha}{1 + v^{n}} - \\gamma u, \\qquad\n\\frac{dv}{dt} = \\frac{\\alpha}{1 + u^{n}} - \\gamma v,\n$$\n其中参数 $\\alpha>0$，$\\gamma>0$ 且 $n>1$。一个稳态 $(u^{*},v^{*})$ 满足\n$$\n\\frac{\\alpha}{1 + (v^{*})^{n}} - \\gamma u^{*} = 0, \\qquad\n\\frac{\\alpha}{1 + (u^{*})^{n}} - \\gamma v^{*} = 0.\n$$\n根据对称性，不稳定的稳态满足 $u^{*}=v^{*}$，因此是以下方程的解\n$$\n\\gamma u^{*} = \\frac{\\alpha}{1 + (u^{*})^{n}}.\n$$\n对于确定性模型，其控制向量场是光滑的，因此根据 Picard–Lindelöf 定理，对于任何初始条件，初值问题都有唯一解。如果初始条件等于一个平衡点，即 $(u(0),v(0))=(u^{*},v^{*})$ 且 $f(u^{*},v^{*})=(0,0)$，那么常数轨迹 $(u(t),v(t)) \\equiv (u^{*},v^{*})$ 满足该微分方程，并且根据唯一性，它是唯一的解。因此，确定性模型预测，从 $(u^{*},v^{*})$ 精确出发，系统将在所有 $t \\geq 0$ 的时间内保持在该点，尽管该平衡点对于扰动是不稳定的。\n\n为了描述这种不稳定性，我们在 $(u^{*},v^{*})$ 附近进行线性化。雅可比矩阵为\n$$\nJ(u,v) =\n\\begin{pmatrix}\n\\frac{\\partial}{\\partial u}\\left(\\frac{\\alpha}{1+v^{n}} - \\gamma u\\right) & \\frac{\\partial}{\\partial v}\\left(\\frac{\\alpha}{1+v^{n}} - \\gamma u\\right) \\\\\n\\frac{\\partial}{\\partial u}\\left(\\frac{\\alpha}{1+u^{n}} - \\gamma v\\right) & \\frac{\\partial}{\\partial v}\\left(\\frac{\\alpha}{1+u^{n}} - \\gamma v\\right)\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n-\\gamma & -\\alpha \\frac{n v^{n-1}}{(1+v^{n})^{2}} \\\\\n-\\alpha \\frac{n u^{n-1}}{(1+u^{n})^{2}} & -\\gamma\n\\end{pmatrix}.\n$$\n在 $u^{*}=v^{*}$ 处，非对角线元素相等，所以，令\n$$\nk \\equiv \\alpha \\frac{n (u^{*})^{n-1}}{(1+(u^{*})^{n})^{2}},\n$$\n我们得到\n$$\nJ(u^{*},v^{*}) =\n\\begin{pmatrix}\n-\\gamma & -k \\\\\n-\\,k & -\\gamma\n\\end{pmatrix}.\n$$\n特征值为 $\\lambda_{1}=-\\gamma-k$ 和 $\\lambda_{2}=-\\gamma+k$。在双稳态区域，一个特征值为正，即 $-\\gamma + k > 0$，这使得 $(u^{*},v^{*})$ 成为一个不稳定的鞍点：无穷小的扰动通常会使系统沿着不稳定的特征方向离开该平衡点。然而，在没有任何扰动且精确地从平衡点出发的情况下，确定性轨迹会无限期地停留在 $(u^{*},v^{*})$。\n\n相比之下，随机模型将合成和降解视为离散的随机事件，其反应倾向在对应于 $(u^{*},v^{*})$ 的浓度下保持非零。因此，不存在与确定性不稳定稳态相对应的吸收随机状态。内在噪声产生的涨落会立即将系统从由 $u=v$ 定义的分界线上移开。由于系统和初始条件是对称的，这些涨落相对于两个吸引盆是无偏的。因此，随机动力学将以相等的概率向两个稳定稳态中任意一个的邻域移动。在足够长的时间和有限系统中，两个稳定状态之间可能会发生罕见的噪声诱导的跃迁，但从不稳定不动点出发的直接推论是，内在噪声驱动系统逃离该点，并且由于对称性，两种结果以相等的概率发生。\n\n因此，正确的对比是：确定性模型无限期地保持在 $(u^{*},v^{*})$，而随机模型由于内在噪声会偏离这一点，并以相等的概率演化到两个稳定状态之一。\n\n最准确的选项是C。", "answer": "$$\\boxed{C}$$", "id": "1492568"}, {"introduction": "最后的这项实践将引导您从理论概念走向代码实现。您将亲手实现著名的Gillespie随机模拟算法（Stochastic Simulation Algorithm, SSA），以模拟一个响应环境信号的基因开关。通过模拟单个分子的随机事件，您将能直接计算细胞状态转换的概率和时间，从而以定量的方式，有力地洞察发育可塑性与噪声驱动现象的奥秘。[@problem_id:2630111]", "problem": "一个双稳态基因调控网络可以通过两个转录因子之间的相互抑制，产生离散的可选表型（表型多态性）。当一个短暂的环境输入使系统偏向某个稳定状态时，就会出现发育可塑性。考虑一个相互抑制的触发开关的最小模型，该模型由两种分子 $X$ 和 $Y$（以分子拷贝数计）组成，并具有合成反应和一级降解反应。有效合成倾向通过一个希尔函数 (Hill function) 被拮抗物抑制，而一个环境脉冲则会短暂地增加 $X$ 的合成倾向。目标是使用 Daniel T. Gillespie 的随机模拟算法 (SSA) 中的精确随机模拟，计算系统在响应短暂脉冲时进入 $X$ 高表达状态的首次穿越转换时间的分布，并按每个参数集对结果进行总结。\n\n基本原理：\n- 化学主方程 (CME)：在一个恒定体积和温度的充分混合系统中，反应事件遵循一个具有状态依赖倾向的连续时间马尔可夫过程，其精确的样本路径由随机模拟算法 (SSA) 生成。\n- 对于一个给定的状态，到下一次反应的等待时间呈指数分布，其速率等于所有倾向之和，而具体发生的反应则根据其倾向大小按比例选择。\n- 希尔抑制 (Hill repression) 是基因调控中一个经过充分检验的唯象法则：一个拷贝数为 $Z$ 的拮抗物对目标合成速率的抑制被建模为 $1/\\left(1+\\left(Z/K\\right)^n\\right)$，其中 $K$ 是解离参数，$n$ 是希尔系数。\n\n模型设定：\n- 物种：$X$，$Y$（非负整数，分子）。\n- 在时间 $t$ 和状态 $\\left(X,Y\\right)$ 下的反应与倾向：\n  - $R_1$: $X \\to X+1$，倾向为\n    $$ a_1\\left(X,Y,t\\right) \\;=\\; \\frac{k_X\\left(t\\right)}{1+\\left(\\frac{Y}{K}\\right)^n}.$$\n  - $R_2$: $X \\to X-1$，倾向为\n    $$ a_2\\left(X,Y,t\\right) \\;=\\; d_X \\, X.$$\n  - $R_3$: $Y \\to Y+1$，倾向为\n    $$ a_3\\left(X,Y,t\\right) \\;=\\; \\frac{k_Y}{1+\\left(\\frac{X}{K}\\right)^n}.$$\n  - $R_4$: $Y \\to Y-1$，倾向为\n    $$ a_4\\left(X,Y,t\\right) \\;=\\; d_Y \\, Y.$$\n- 环境脉冲：\n  $$ k_X\\left(t\\right) \\;=\\; \\begin{cases}\n  p \\, k_{X,0} & \\text{若 } 0 \\le t < T_p,\\\\\n  k_{X,0} & \\text{若 } t \\ge T_p,\n  \\end{cases} $$\n  其中脉冲因子 $p \\ge 1$，脉冲持续时间为 $T_p$（两者均在每个测试用例中指定）。参数 $k_Y$ 不随时间变化。\n- 初始条件：$t=0$ 时，$X\\left(0\\right)=X_0$，$Y\\left(0\\right)=Y_0$，且满足 $X_0 - Y_0 \\le -h$（即初始位于 $Y$ 高表达吸引盆，并有余量 $h$）。\n- 转换时间定义（首次穿越）：转换时间 $\\tau$ 是指首次满足 $X\\left(t\\right) - Y\\left(t\\right) \\ge h$ 的时间 $t$，其中 $h$ 是一个正阈值（以分子数计）。如果在最大模拟时间 $T_{\\max}$ 之前没有发生转换，则该次运行被视为未发生转换。\n\n单位：\n- 时间单位为分钟，反应速率常数 $k_{X,0}$、$k_Y$ 的单位为“分子/分钟”，降解常数 $d_X$、$d_Y$ 的单位为“/分钟”，$K$ 和 $h$ 的单位为分子数。输出的平均转换时间必须以分钟报告。发生转换的运行所占比例必须以小数（而非百分比）形式报告。\n\n计算规程：\n- 对于每个参数集（测试用例），模拟 $N$ 条独立的 SSA 轨迹，每条轨迹的模拟时间上限为 $T_{\\max}$，或直到发生转换为止。设 $M$ 为发生转换的轨迹数。计算：\n  - 转换比例 $f = M/N$（小数）。\n  - 平均转换时间 $\\bar{\\tau} = \\left(\\sum_{i=1}^{M} \\tau_i\\right)/M$，单位为分钟，仅基于发生转换的轨迹计算。如果 $M=0$，则按惯例定义 $\\bar{\\tau} = -1.0$。\n- 随机性控制：为了保证可复现性并为每条轨迹使用独立的随机流，请使用一个固定的基准种子 $s_0$。对于测试用例索引 $i$（从 0 开始）和重复运行索引 $j$（从 0 开始），使用以下公式为该次重复运行的伪随机数生成器设定种子：\n  $$ s_{i,j} \\;=\\; s_0 \\;+\\; 104729\\, i \\;+\\; 10007\\, j, $$\n  其中 $104729$ 和 $10007$ 是固定整数。SSA 使用的所有均匀分布随机变量都必须从此设定了种子的流中生成。\n- 四舍五入：报告的 $f$ 和 $\\bar{\\tau}$ 值需四舍五入到三位小数。\n\n测试套件：\n使用以下四个参数集，每个参数集进行 $N=64$ 次重复运行，基准种子为 $s_0 = 1357911$。所有其他未明确变化的参数在所有用例中均相同。具体如下：\n- 所有用例的共享参数：\n  - $k_{X,0} = 12.0$ 分子/分钟,\n  - $k_Y = 12.0$ 分子/分钟,\n  - $d_X = 0.2$ /分钟,\n  - $d_Y = 0.2$ /分钟,\n  - $K = 40$ 分子,\n  - $n = 2$ (无量纲希尔系数),\n  - $h = 20$ 分子,\n  - $X_0 = 10$ 分子,\n  - $Y_0 = 90$ 分子,\n  - $T_{\\max} = 200.0$ 分钟,\n  - $N = 64$,\n  - $s_0 = 1357911$.\n- 用例 $0$（理想路径）：$p = 3.0$，$T_p = 10.0$ 分钟。\n- 用例 $1$（边界/弱脉冲）：$p = 1.5$，$T_p = 10.0$ 分钟。\n- 用例 $2$（无脉冲对照）：$p = 1.0$，$T_p = 0.0$ 分钟。\n- 用例 $3$（强/短脉冲）：$p = 4.0$，$T_p = 5.0$ 分钟。\n\n要求的最终输出格式：\n- 您的程序应生成单行输出，其中包含按 $0,1,2,3$ 顺序排列的各用例结果，形式为以逗号分隔的数对 $\\left[f,\\bar{\\tau}\\right]$ 列表，并用方括号括起来，不含任何空格。例如，其语法形式必须为：\n  $$\\left[\\left[f_0,\\bar{\\tau}_0\\right],\\left[f_1,\\bar{\\tau}_1\\right],\\left[f_2,\\bar{\\tau}_2\\right],\\left[f_3,\\bar{\\tau}_3\\right]\\right],$$\n  其中 $f_i$ 和 $\\bar{\\tau}_i$ 均四舍五入到三位小数，并且如果在用例 $i$ 中未观察到转换，则 $\\bar{\\tau}_i$ 等于 $-1.0$。", "solution": "我们基于化学主方程 (CME) 和随机模拟算法 (SSA) 的基本原理，推导了一个在受到短暂环境脉冲影响下的双稳态触发开关的精确随机模拟方法，并给出了首次穿越转换时间的可计算定义。\n\n双稳态和环境控制的原理性建模：\n- 在一个恒定温度的充分混合体积中，CME 模拟了分子数量概率分布的时间演化。每个反应通道都是一个泊松过程，其瞬时风险率等于其倾向。精确的样本路径可以通过 Daniel T. Gillespie 的 SSA 生成。\n- 相互抑制通过希尔型抑制 (Hill-type repression) 来描述。如果物种 $Y$ 抑制 $X$，那么 $X$ 的有效合成率为 $k_X\\left(t\\right)\\,/\\left(1+\\left(\\frac{Y}{K}\\right)^n\\right)$，其中 $K$ 是解离参数，$n$ 是希尔系数。在其确定性对应模型中，当非线性足够强时，可能出现双稳态。在随机框架下，系统表现出与 $X$ 主导和 $Y$ 主导表型相对应的亚稳态。这为表型多态性提供了定量基础：环境可以短暂地修改参数，以改变不同状态的占据情况。\n- 在这里，环境充当一个短暂的脉冲，在 $0 \\le t < T_p$ 的时间窗口内，将 $X$ 的合成倾向乘以一个因子 $p$。\n\n反应系统和倾向：\n- 我们为 $X$ 和 $Y$ 各自的合成与降解共四个反应进行建模。\n- 在状态 $\\left(X,Y\\right)$ 和时间 $t$ 时的倾向为：\n  $$ a_1\\left(X,Y,t\\right) \\;=\\; \\frac{k_X\\left(t\\right)}{1+\\left(\\frac{Y}{K}\\right)^n}, \\quad a_2\\left(X,Y,t\\right) \\;=\\; d_X X, $$\n  $$ a_3\\left(X,Y,t\\right) \\;=\\; \\frac{k_Y}{1+\\left(\\frac{X}{K}\\right)^n}, \\quad a_4\\left(X,Y,t\\right) \\;=\\; d_Y Y, $$\n  其中，当 $0 \\le t < T_p$ 时，$k_X\\left(t\\right) = p\\,k_{X,0}$，其他情况下 $k_X\\left(t\\right) = k_{X,0}$。希尔系数 $n$ 是无量纲的，$K$ 的单位是分子数，这与 $X$ 和 $Y$ 是离散计数相符。\n\n精确随机模拟 (Gillespie SSA)：\n- 给定倾向 $a_1,\\dots,a_4$，总倾向为 $a_0 = \\sum_{r=1}^{4} a_r$。CME 意味着到下一次反应的等待时间 $\\Delta t$ 以速率 $a_0$ 呈指数分布，因此我们可以通过以下方式对其进行抽样：\n  $$ \\Delta t \\;=\\; \\frac{1}{a_0} \\ln\\left(\\frac{1}{u_1}\\right), $$\n  其中 $u_1 \\sim \\text{Uniform}\\left(0,1\\right)$。反应索引 $r$ 的选择方法是：抽取一个 $u_2 \\sim \\text{Uniform}\\left(0,1\\right)$，然后选择满足 $\\sum_{q=1}^{r} a_q \\ge u_2 a_0$ 的最小 $r$。根据反应 $r$ 的化学计量变化来更新状态，并将时间推进 $\\Delta t$。重复此过程直至满足停止条件。\n- 上述算法对于 CME 是精确的，因此是进行转换时间抽样的正确基础。\n\n转换时间的定义与检测：\n- 我们将转换时间定义为从 $X_0 - Y_0 \\le -h$ 的状态开始，首次穿越到集合 $\\left\\{ \\left(X,Y\\right): X-Y \\ge h \\right\\}$ 的时间。由于 SSA 生成的是在反应时刻发生跳跃的右连续分段常数样本路径，我们在时间 $t$ 发生反应更新后，如果 $X-Y \\ge h$ 成立，就立即检测到转换。\n- 如果在 $T_{\\max}$ 前没有发生转换，该轨迹被归类为未转换。\n\n对每个参数集的蒙特卡洛估计：\n- 对每个测试用例，我们运行 $N$ 次独立的重复实验。设 $M$ 是发生转换的重复实验次数，$\\tau_1,\\dots,\\tau_M$ 是相应的转换时间。我们计算转换比例 $f = M/N$ 和条件平均转换时间 $\\bar{\\tau} = \\left(\\sum_{i=1}^M \\tau_i\\right)/M$（单位：分钟）。如果 $M=0$，我们采用惯例 $\\bar{\\tau}=-1.0$ 以避免无定义的除法。\n- 为确保重复实验的可复现性和独立性，我们为每次重复实验的伪随机数生成器 (PRNG) 确定性地设置种子。使用一个固定的基准种子 $s_0$ 和互质的偏移量，我们选择：\n  $$ s_{i,j} \\;=\\; s_0 \\;+\\; 104729\\, i \\;+\\; 10007\\, j, $$\n  其中 $i \\in \\left\\{0,1,2,3\\right\\}$ 是测试用例索引，$j \\in \\left\\{0,\\dots,N-1\\right\\}$ 是重复实验索引。这在提供独立随机流的同时，保持了完全的可复现性。\n\n算法步骤：\n- 对每个用例 $i$：\n  - 对每次重复实验 $j$：\n    1. 初始化 $\\left(t,X,Y\\right) \\leftarrow \\left(0,X_0,Y_0\\right)$；如果 $X-Y \\ge h$，记录 $\\tau=0$ 并继续下一次重复实验。\n    2. 循环：\n       - 根据脉冲规则计算 $k_X\\left(t\\right)$ 和倾向 $a_1,\\dots,a_4$。\n       - 计算 $a_0 = \\sum_{r=1}^4 a_r$。\n       - 使用种子为 $s_{i,j}$ 的 PRNG 从均匀分布 $\\text{Uniform}\\left(0,1\\right)$ 中抽取 $u_1, u_2$。\n       - 设 $\\Delta t = \\left(1/a_0\\right)\\ln\\left(1/u_1\\right)$，并通过累积和与 $u_2 a_0$ 的比较来选择反应 $r$。\n       - 更新 $\\left(X,Y\\right)$ 并且 $t \\leftarrow t + \\Delta t$。\n       - 如果 $X-Y \\ge h$，则设 $\\tau = t$ 并停止循环；如果 $t \\ge T_{\\max}$，则标记为未转换并停止。\n  - 汇总 $M$、$f = M/N$ 和 $\\bar{\\tau}$（如果 $M=0$，则 $\\bar{\\tau}=-1.0$）。\n  - 将 $f$ 和 $\\bar{\\tau}$ 四舍五入到三位小数。\n- 将结果输出为单行：一个包含用例 $0,1,2,3$ 的四个数对 $\\left[f,\\bar{\\tau}\\right]$ 的列表，不含空格。\n\n科学真实性及其与发育可塑性的联系：\n- 带有希尔抑制的触发开关是双稳态基因回路的一个已确立的最小模型。基因表达中的随机性会引起涨落，从而可能导致概率性的转换。一个改变 $k_X\\left(t\\right)$ 的短暂环境脉冲会暂时改变系统的（势能）景观，使其偏向 $X$ 高表达表型。计算出的首次穿越时间分布明确了脉冲强度和持续时间如何调节表型多态性的结果。\n- 该测试套件涵盖了一个理想路径（适度脉冲促进频繁转换）、一个边界情况（弱脉冲导致罕见转换）、一个对照组（无脉冲，用于在设定的时间范围内有效地测试自发转换），以及一个强而短暂的脉冲（确保快速且频繁的转换）。\n\n测试套件的数值规格：\n- 共享参数：$k_{X,0}=12.0$，$k_Y=12.0$，$d_X=0.2$，$d_Y=0.2$，$K=40$，$n=2$，$h=20$，$X_0=10$，$Y_0=90$，$T_{\\max}=200.0$，$N=64$，$s_0=1357911$。各用例的脉冲参数：\n  - 用例 $0$：$p=3.0$，$T_p=10.0$。\n  - 用例 $1$：$p=1.5$，$T_p=10.0$。\n  - 用例 $2$：$p=1.0$，$T_p=0.0$。\n  - 用例 $3$：$p=4.0$，$T_p=5.0$。\n所有时间的单位均为分钟，速率常数的单位视情况为“分子/分钟”或“/分钟”，分子计数为无量纲整数。最终输出按指定格式进行。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef hill_repression(z, K, n):\n    # Returns 1 / (1 + (z/K)^n) as a float\n    return 1.0 / (1.0 + (float(z) / float(K)) ** float(n))\n\ndef gillespie_switch_time(params, rng):\n    # Unpack parameters\n    kX0 = params[\"kX0\"]\n    kY = params[\"kY\"]\n    dX = params[\"dX\"]\n    dY = params[\"dY\"]\n    K = params[\"K\"]\n    n = params[\"n\"]\n    p = params[\"pulse_factor\"]\n    Tp = params[\"pulse_duration\"]\n    h = params[\"h\"]\n    Tmax = params[\"Tmax\"]\n    X = int(params[\"X0\"])\n    Y = int(params[\"Y0\"])\n\n    t = 0.0\n\n    # Immediate check: already in X-dominant state by threshold?\n    if X - Y >= h:\n        return 0.0  # switched at time 0\n\n    # Safety cap on maximum reaction events to avoid runaway loops (should not trigger)\n    max_events = 10_000_000\n    event_count = 0\n\n    while t < Tmax and event_count < max_events:\n        # Compute time-dependent kX(t) due to pulse\n        kXt = (p * kX0) if t < Tp else kX0\n\n        # Compute propensities\n        a1 = kXt * hill_repression(Y, K, n)       # X synthesis\n        a2 = dX * X                                # X degradation\n        a3 = kY * hill_repression(X, K, n)         # Y synthesis\n        a4 = dY * Y                                # Y degradation\n\n        a0 = a1 + a2 + a3 + a4\n\n        # If a0 is zero (should not occur with given params), stop\n        if a0 <= 0.0:\n            break\n\n        # Draw two uniforms\n        u1 = rng.random()\n        while u1 <= 0.0:\n            u1 = rng.random()\n        u2 = rng.random()\n\n        # Time to next event\n        dt = (1.0 / a0) * np.log(1.0 / u1)\n        t_next = t + dt\n\n        # Determine which reaction fires\n        thresh = u2 * a0\n        # Cumulative sum\n        c = a1\n        if thresh < c:\n            # X synthesis\n            X += 1\n        else:\n            c += a2\n            if thresh < c:\n                # X degradation\n                if X > 0:\n                    X -= 1\n            else:\n                c += a3\n                if thresh < c:\n                    # Y synthesis\n                    Y += 1\n                else:\n                    # Y degradation\n                    if Y > 0:\n                        Y -= 1\n\n        # Advance time\n        t = t_next\n        event_count += 1\n\n        # Check switching condition after state update\n        if X - Y >= params[\"h\"]:\n            return t\n\n    # If loop ends without switching before Tmax, return None\n    return None\n\ndef simulate_case(case_params, case_index, N, base_seed):\n    switch_times = []\n    for j in range(N):\n        # Independent, reproducible seed per replicate\n        seed = int(base_seed + 104729 * case_index + 10007 * j)\n        rng = np.random.default_rng(seed)\n        tau = gillespie_switch_time(case_params, rng)\n        if tau is not None:\n            switch_times.append(tau)\n\n    M = len(switch_times)\n    f = M / float(N)\n    if M == 0:\n        mean_tau = -1.0\n    else:\n        mean_tau = float(np.mean(switch_times))\n\n    # Round to three decimals for reporting\n    f_rounded = round(f, 3)\n    mean_tau_rounded = round(mean_tau, 3)\n    return f_rounded, mean_tau_rounded\n\ndef solve():\n    # Shared parameters\n    shared = {\n        \"kX0\": 12.0,        # molecules/min\n        \"kY\": 12.0,         # molecules/min\n        \"dX\": 0.2,          # per min\n        \"dY\": 0.2,          # per min\n        \"K\": 40,            # molecules\n        \"n\": 2,             # Hill coefficient\n        \"h\": 20,            # molecules\n        \"X0\": 10,           # molecules\n        \"Y0\": 90,           # molecules\n        \"Tmax\": 200.0       # minutes\n    }\n\n    # Test suite cases\n    test_cases = [\n        # Case 0: happy path\n        {\n            **shared,\n            \"pulse_factor\": 3.0,\n            \"pulse_duration\": 10.0\n        },\n        # Case 1: boundary/weak pulse\n        {\n            **shared,\n            \"pulse_factor\": 1.5,\n            \"pulse_duration\": 10.0\n        },\n        # Case 2: no pulse control\n        {\n            **shared,\n            \"pulse_factor\": 1.0,\n            \"pulse_duration\": 0.0\n        },\n        # Case 3: strong/brief pulse\n        {\n            **shared,\n            \"pulse_factor\": 4.0,\n            \"pulse_duration\": 5.0\n        }\n    ]\n\n    N = 64\n    base_seed = 1357911\n\n    results = []\n    for i, params in enumerate(test_cases):\n        f, mt = simulate_case(params, i, N, base_seed)\n        results.append((f, mt))\n\n    # Produce exact required format: [[f0,mt0],[f1,mt1],[f2,mt2],[f3,mt3]]\n    out = \"[\" + \",\".join(f\"[{f:.3f},{mt:.3f}]\" for (f, mt) in results) + \"]\"\n    print(out)\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2630111"}]}