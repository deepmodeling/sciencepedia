{"hands_on_practices": [{"introduction": "遗传密码子扩展的成功基石在于正交系统的构建，即合成生物学组件（如氨酰-tRNA合成酶/tRNA对）只与彼此相互作用，而不与宿主细胞的天然分子发生交叉反应。本练习将引导你运用基础的酶动力学原理，特别是特异性常数 $k_{\\mathrm{cat}}/K_M$，来定量评估一个工程化的合成酶在充满竞争性天然氨基酸的细胞内环境中，是否能以足够高的保真度完成非天然氨基酸的装载。这种分析是验证任何新遗传密码子扩展系统可行性的关键第一步。[@problem_id:2541335]", "problem": "您设计了一对正交的氨酰-tRNA合成酶 (aaRS) 和转运核糖核酸 (tRNA)，用于在大肠杆菌 (*Escherichia coli*) 中整合一种特定的非天然氨基酸 (ncAA)。体外稳态动力学研究表明，对于该非天然氨基酸，特异性常数为 $k_{\\mathrm{cat}}/K_M = 5\\times 10^{5}$ M$^{-1}$s$^{-1}$；而对于20种天然氨基酸中的每一种，其特异性常数均为 $k_{\\mathrm{cat}}/K_M < 10^{2}$ M$^{-1}$s$^{-1}$。假设该配对在tRNA水平上是正交的：设计的aaRS不会氨酰化宿主tRNA，也没有宿主aaRS会氨酰化设计的tRNA。再者，假设该酶在体内的运作环境是任何氨基酸底物均未达到饱和浓度。在快速生长的细胞中，20种天然氨基酸的总细胞内浓度约为10 mM，单个天然氨基酸的浓度范围在0.05–3 mM之间，并且通过一种补料策略，使得胞质溶胶中的ncAA浓度约为1 mM。忽略下游因素，如延伸因子结合和核糖体选择；重点关注由设计的aaRS进行的氨基酸选择步骤。\n\n关于在这些条件下，氨基酸水平的正交性和特异性是否足以用于体内应用，以下哪个陈述的支持最充分？\n\nA. 是的。在所述浓度下，设计的aaRS将在超过99%的装载事件中用ncAA装载正交tRNA，因此氨基酸水平的正交性是足够的；额外的转移后编辑不会对结果产生实质性改变。\n\nB. 不是。因为20种天然氨基酸的总浓度约为10 mM，它们将在与酶的相遇中占主导地位，除非ncAA的反应是扩散限制的（数量级在$\\ge 10^{8}$ M$^{-1}$s$^{-1}$），而事实并非如此，所以错误装载将会普遍发生。\n\nC. 不是。如果没有明确的转移后编辑结构域，错误激活的天然氨基酸将以高频率被转移，而与测得的特异性常数无关，因此氨基酸水平的正交性是不够的。\n\nD. 结论不确定。需要分别了解$k_{\\mathrm{cat}}$和$K_M$的值；即使在酶未被底物饱和的情况下，单凭比率$k_{\\mathrm{cat}}/K_M$也无法说明细胞内的选择性。", "solution": "该问题要求评估一种设计的氨酰-tRNA合成酶 (aaRS) 及其同源转运核糖核酸 (tRNA) 配对在体内的充分性。评估必须基于所提供的体外动力学数据和体内底物浓度。\n\n首先，我们必须验证问题陈述。\n\n**第一步：提取已知条件**\n- 设计的正交aaRS/tRNA对，用于整合非天然氨基酸 (ncAA)。\n- 宿主生物：*大肠杆菌* (*Escherichia coli*)。\n- 非天然氨基酸的特异性常数：$(k_{\\mathrm{cat}}/K_M)_{\\mathrm{ncAA}} = 5 \\times 10^{5}$ M$^{-1}$s$^{-1}$。\n- 20种天然氨基酸 (cAA) 中每一种的特异性常数：$(k_{\\mathrm{cat}}/K_M)_{\\mathrm{cAA}} < 10^{2}$ M$^{-1}$s$^{-1}$。\n- tRNA水平正交性的假设：设计的aaRS不会氨酰化宿主tRNA，宿主aaRS也不会氨酰化设计的tRNA。\n- 体内动力学假设：酶在任何氨基酸底物均未饱和的状态下运行。也就是说，对于所有氨基酸，$[S] \\ll K_M$。\n- 忽略下游因素的假设：不考虑延伸因子结合和核糖体选择。\n- ncAA的细胞内浓度：$[\\mathrm{ncAA}] \\approx 1$ mM $= 1 \\times 10^{-3}$ M。\n- 20种cAA的总细胞内浓度：$\\sum_{i=1}^{20} [\\mathrm{cAA}_i] \\approx 10$ mM $= 1 \\times 10^{-2}$ M。\n- 单个cAA的浓度范围：$0.05$–$3$ mM。\n\n**第二步：使用提取的已知条件进行验证**\n该问题在科学上基于酶动力学和合成生物学的原理。所描述的情景是遗传密码子扩展领域的标准问题。动力学参数和浓度在物理上现实且在实验中可观察到的范围内。问题陈述清晰，提供了得出结论所需的所有必要信息和假设。关键假设——酶未饱和 ($[S] \\ll K_M$)——简化了动力学分析，并使得问题可以使用给定数据求解，因为它规定了决定特异性的相关动力学参数。该问题是客观的，不包含逻辑矛盾或含糊之处。\n\n**第三步：结论与行动**\n问题陈述有效。可以推导出定量解。\n\n**求解推导**\n酶催化反应的速率 $v$ 由米氏方程 (Michaelis-Menten equation) 描述：\n$$v = \\frac{k_{\\mathrm{cat}}[E_0][S]}{K_M + [S]}$$\n其中 $[E_0]$ 是总酶浓度，$[S]$ 是底物浓度，$k_{\\mathrm{cat}}$ 是转换数，$K_M$ 是米氏常数。\n\n问题明确指出，该酶未被其任何氨基酸底物饱和。这对应于 $[S] \\ll K_M$ 的动力学状态。在此条件下，米氏方程可简化为二级速率方程：\n$$v \\approx \\frac{k_{\\mathrm{cat}}[E_0][S]}{K_M} = \\left(\\frac{k_{\\mathrm{cat}}}{K_M}\\right) [E_0] [S]$$\n$k_{\\mathrm{cat}}/K_M$ 这一项是特异性常数，它衡量酶在低浓度下对特定底物的催化效率。\n\n现在我们可以比较正确装载ncAA的速率 $v_{\\mathrm{ncAA}}$ 与所有20种竞争性天然氨基酸导致的错误装载总速率 $v_{\\mathrm{mischarge}}$。\n\n正确装载的速率为：\n$$v_{\\mathrm{ncAA}} = \\left(\\frac{k_{\\mathrm{cat}}}{K_M}\\right)_{\\mathrm{ncAA}} [E_0] [\\mathrm{ncAA}]$$\n代入给定值：\n$$v_{\\mathrm{ncAA}} = (5 \\times 10^{5} \\text{ M}^{-1}\\text{s}^{-1}) [E_0] (1 \\times 10^{-3} \\text{ M}) = 500 [E_0] \\text{ s}^{-1}$$\n\n错误装载的总速率是20种天然氨基酸各自速率的总和：\n$$v_{\\mathrm{mischarge}} = \\sum_{i=1}^{20} \\left(\\frac{k_{\\mathrm{cat}}}{K_M}\\right)_{\\mathrm{cAA},i} [E_0] [\\mathrm{cAA}_i]$$\n我们已知任何cAA的特异性常数上限为 $(k_{\\mathrm{cat}}/K_M)_{\\mathrm{cAA}} < 10^{2}$ M$^{-1}$s$^{-1}$，以及cAA的总浓度为 $\\sum [\\mathrm{cAA}_i] \\approx 10^{-2}$ M。为了评估保真度的最差情况，我们对所有cAA均使用错误装载特异性常数的上限。这可以得出总错误装载速率的上限：\n$$v_{\\mathrm{mischarge}} < [E_0] \\sum_{i=1}^{20} (10^{2} \\text{ M}^{-1}\\text{s}^{-1}) [\\mathrm{cAA}_i]$$\n$$v_{\\mathrm{mischarge}} < (10^{2} \\text{ M}^{-1}\\text{s}^{-1}) [E_0] \\sum_{i=1}^{20} [\\mathrm{cAA}_i]$$\n$$v_{\\mathrm{mischarge}} < (10^{2} \\text{ M}^{-1}\\text{s}^{-1}) [E_0] (1 \\times 10^{-2} \\text{ M}) = 1 [E_0] \\text{ s}^{-1}$$\n\ntRNA装载的保真度是正确装载事件所占的比例。它由正确装载速率与总装载速率 ($v_{\\mathrm{total}} = v_{\\mathrm{ncAA}} + v_{\\mathrm{mischarge}}$) 的比值给出。\n$$\\text{保真度} = \\frac{v_{\\mathrm{ncAA}}}{v_{\\mathrm{ncAA}} + v_{\\mathrm{mischarge}}}$$\n使用我们计算出的值：\n$$\\text{保真度} \\approx \\frac{500 [E_0]}{500 [E_0] + 1 [E_0]} = \\frac{500}{501} \\approx 0.998$$\n这相当于约99.8%的装载保真度。这是一个非常高的特异性水平。\n\n**选项评估**\n\n**A. 是的。在所述浓度下，设计的aaRS将在超过99%的装载事件中用ncAA装载正交tRNA，因此氨基酸水平的正交性是足够的；额外的转移后编辑不会对结果产生实质性改变。**\n我们的计算表明保真度约为99.8%，确实大于99%。如此高的保真度通常被认为足以满足遗传密码子扩展的许多体内应用。关于转移后编辑不会“实质性”改变结果的说法是一个合理的判断，因为该系统已经以高精度运行。该陈述得到了动力学分析的完全支持。\n**结论：正确。**\n\n**B. 不是。因为20种天然氨基酸的总浓度约为10 mM，它们将在与酶的相遇中占主导地位，除非ncAA的反应是扩散限制的（数量级在$\\ge 10^{8}$ M$^{-1}$s$^{-1}$），而事实并非如此，所以错误装载将会普遍发生。**\n该陈述错误地得出结论，认为天然氨基酸的总浓度（10 mM）高于ncAA（1 mM）就保证了错误装载的普遍发生。它忽略了特异性常数 $k_{\\mathrm{cat}}/K_M$ 的关键作用。反应速率与特异性常数和底物浓度的乘积成正比。正确装载与错误装载的总速率之比约为500:1，有利于ncAA。因此，错误装载是罕见的，而不是普遍的。提及扩散限制是误导性的；虽然扩散限制速率会提高特异性，但这并非实现高保真度的先决条件。\n**结论：错误。**\n\n**C. 不是。如果没有明确的转移后编辑结构域，错误激活的天然氨基酸将以高频率被转移，而与测得的特异性常数无关，因此氨基酸水平的正交性是不够的。**\n该陈述存在根本性缺陷。特异性常数 $k_{\\mathrm{cat}}/K_M$ 正是量化酶将底物转化为产物总效率的参数。它内在地包含了催化循环中的所有步骤，包括底物结合、任何转移前校对、化学转移($k_{\\mathrm{cat}}$)和产物释放。声称选择性“与测得的特异性常数无关”是对基础酶动力学的否定。如果活性位点对非同源底物的亲和力($K_M$)或催化活性($k_{\\mathrm{cat}}$)非常差，那么即使没有转移后编辑结构域也可以实现高特异性。给定的数据 $(k_{\\mathrm{cat}}/K_M)_{\\mathrm{cAA}} < 10^{2}$ M$^{-1}$s$^{-1}$ 正反映了对天然氨基酸的这种低效率。\n**结论：错误。**\n\n**D. 结论不确定。需要分别了解$k_{\\mathrm{cat}}$和$K_M$的值；即使在酶未被底物饱和的情况下，单凭比率$k_{\\mathrm{cat}}/K_M$也无法说明细胞内的选择性。**\n该陈述是错误的。酶未饱和 ($[S] \\ll K_M$) 的条件恰恰是特异性常数 $k_{\\mathrm{cat}}/K_M$ 成为竞争底物之间动力学偏好唯一决定因素的情形。两种底物 $S_1$ 和 $S_2$ 的反应速率之比简化为 $\\frac{v_1}{v_2} = \\frac{(k_{\\mathrm{cat}}/K_M)_1 [S_1]}{(k_{\\mathrm{cat}}/K_M)_2 [S_2]}$。在此特定条件下，不需要分开的 $k_{\\mathrm{cat}}$ 和 $K_M$ 值。该问题是有确定性结论的。\n**结论：错误。**", "answer": "$$\\boxed{A}$$", "id": "2541335"}, {"introduction": "即使拥有一个高度特异性的正交合成酶，系统层面的资源竞争也可能成为限制非天然氨基酸掺入效率的瓶颈。本练习引入了一个常见的挑战——“海绵效应”，即目标基因的高水平表达会“吸附”并耗尽有限的抑制性tRNA资源。通过构建一个简化的稳态动力学模型，你将能够量化这种资源竞争如何影响带电荷tRNA的稳态浓度，从而深入理解平衡遗传密码子扩展系统各个组件表达水平的重要性。[@problem_id:2132932]", "problem": "一个研究小组正在优化*Escherichia coli*中的一个遗传密码扩展系统，旨在响应琥珀终止密码子（UAG）而整合一种非天然氨基酸（ncAA）。该系统依赖于一种经过工程改造的正交氨酰tRNA合成酶（aaRS）及其同源的抑制性转移RNA（tRNA）。该小组观察到，当目标蛋白的基因从低拷贝质粒转移到高拷贝质粒时，ncAA的整合效率会显著下降。这表明，大量的目标信使RNA（mRNA）转录本耗尽了有限的ncAA整合机器。\n\n为了量化这种“海绵”效应，我们考虑一个简化的细胞动力学模型。正交抑制性tRNA的细胞内总浓度 $[T_{total}]$ 是恒定的。正交aaRS将ncAA装载到未装载的tRNA上，其速率可以建模为一个一级过程，有效速率常数为 $k_{charge}$。由此产生的酰化（已装载）的抑制性tRNA，即 $[T^*]$，在翻译过程中被消耗。这种消耗发生在两个主要位点：目标基因mRNA上的UAG密码子，以及*E. coli*内源基因的天然UAG终止密码子。通过内源基因翻译消耗 $[T^*]$ 的总速率可以用有效一级速率常数 $k_{endo}$ 来建模。由目标基因翻译引起的 $[T^*]$ 消耗速率与质粒拷贝数 $C$ 成正比，并且可以用每个质粒拷贝的有效速率常数 $k_{target}$ 来描述。\n\n对于一个携带高拷贝质粒的菌株，给定以下参数：\n- 正交抑制性tRNA的细胞内总浓度，$[T_{total}] = 2.0$ μM\n- tRNA装载的有效一级速率常数，$k_{charge} = 5.0$ s⁻¹\n- 内源基因消耗的有效一级速率常数，$k_{endo} = 1.0$ s⁻¹\n- 每个目标质粒拷贝消耗的有效速率常数，$k_{target} = 0.20$ s⁻¹\n- 质粒拷贝数，$C_{high} = 300$\n\n计算酰化的抑制性tRNA的稳态浓度 $[T^*]$。最终答案以微摩尔（μM）为单位，并保留三位有效数字。", "solution": "该问题要求计算酰化（已装载）的抑制性tRNA的稳态浓度，记为 $[T^*]$。在稳态下，$[T^*]$ 的生成速率必须等于其消耗速率。\n\n**步骤1：定义浓度和守恒方程。**\n设 $[T^*]$ 为酰化的抑制性tRNA的浓度，$[T_{un}]$ 为未装载的抑制性tRNA的浓度。抑制性tRNA的总浓度 $[T_{total}]$ 是已装载和未装载形式的总和：\n$$[T_{total}] = [T^*] + [T_{un}]$$\n由此，我们可以用总浓度和已装载浓度来表示未装载tRNA的浓度：\n$$[T_{un}] = [T_{total}] - [T^*]$$\n\n**步骤2：构建酰化tRNA的生成速率方程。**\n问题陈述tRNA的装载是关于未装载tRNA浓度 $[T_{un}]$ 的一级过程。因此，生成速率 $V_{formation}$ 为：\n$$V_{formation} = k_{charge} [T_{un}]$$\n代入步骤1中 $[T_{un}]$ 的表达式：\n$$V_{formation} = k_{charge} ([T_{total}] - [T^*])$$\n\n**步骤3：构建酰化tRNA的消耗速率方程。**\n酰化tRNA在两个并行过程中被消耗：翻译带有UAG终止密码子的内源基因，以及翻译含有UAG密码子的目标基因。\n由内源基因消耗的速率 $V_{endo}$ 是关于 $[T^*]$ 的一级过程：\n$$V_{endo} = k_{endo} [T^*]$$\n由目标基因消耗的速率 $V_{target}$ 取决于浓度 $[T^*]$、每个质粒的速率常数 $k_{target}$ 以及质粒数量 $C_{high}$：\n$$V_{target} = k_{target} C_{high} [T^*]$$\n总消耗速率 $V_{consumption}$ 是这两个速率之和：\n$$V_{consumption} = V_{endo} + V_{target} = k_{endo} [T^*] + k_{target} C_{high} [T^*]$$\n$$V_{consumption} = (k_{endo} + k_{target} C_{high}) [T^*]$$\n\n**步骤4：应用稳态近似并求解 $[T^*]$。**\n在稳态下，生成速率等于消耗速率：\n$$V_{formation} = V_{consumption}$$\n$$k_{charge} ([T_{total}] - [T^*]) = (k_{endo} + k_{target} C_{high}) [T^*]$$\n我们的目标是解出此方程中的 $[T^*]$。首先，我们将左侧的 $k_{charge}$ 展开：\n$$k_{charge} [T_{total}] - k_{charge} [T^*] = (k_{endo} + k_{target} C_{high}) [T^*]$$\n接下来，我们将所有包含 $[T^*]$ 的项移到方程的一侧：\n$$k_{charge} [T_{total}] = k_{charge} [T^*] + (k_{endo} + k_{target} C_{high}) [T^*]$$\n提取公因子 $[T^*]$：\n$$k_{charge} [T_{total}] = (k_{charge} + k_{endo} + k_{target} C_{high}) [T^*]$$\n最后，将等式两边同时除以括号中的项，分离出 $[T^*]$：\n$$[T^*] = \\frac{k_{charge} [T_{total}]}{k_{charge} + k_{endo} + k_{target} C_{high}}$$\n\n**步骤5：代入数值并计算最终答案。**\n现在我们将给定值代入推导出的表达式中：\n$[T_{total}] = 2.0$ μM\n$k_{charge} = 5.0$ s⁻¹\n$k_{endo} = 1.0$ s⁻¹\n$k_{target} = 0.20$ s⁻¹\n$C_{high} = 300$\n\n$$[T^*] = \\frac{(5.0 \\, \\text{s}^{-1}) (2.0 \\, \\mu\\text{M})}{5.0 \\, \\text{s}^{-1} + 1.0 \\, \\text{s}^{-1} + (0.20 \\, \\text{s}^{-1})(300)}$$\n首先，计算分母中的乘积：\n$$(0.20 \\, \\text{s}^{-1})(300) = 60 \\, \\text{s}^{-1}$$\n现在，将此结果代回方程中：\n$$[T^*] = \\frac{10.0 \\, \\mu\\text{M} \\cdot \\text{s}^{-1}}{5.0 \\, \\text{s}^{-1} + 1.0 \\, \\text{s}^{-1} + 60 \\, \\text{s}^{-1}}$$\n$$[T^*] = \\frac{10.0 \\, \\mu\\text{M} \\cdot \\text{s}^{-1}}{66.0 \\, \\text{s}^{-1}}$$\n$$[T^*] \\approx 0.151515... \\, \\mu\\text{M}$$\n问题要求答案保留三位有效数字。\n$$[T^*] \\approx 0.152 \\, \\mu\\text{M}$$\n最终答案要求以μM为单位。", "answer": "$$\\boxed{0.152}$$", "id": "2132932"}, {"introduction": "引入外源的翻译机器（如aaRS和tRNA）不仅会竞争特定的分子，还会对宿主细胞的中心代谢造成全局性负担，其中最主要的是对核糖体资源的竞争。这个更高级的实践将指导你通过编写程序，实现一个整合了核糖体分配、tRNA充电动力学和翻译延伸速率的系统生物学模型。通过这个模型，你将能预测表达合成生物学模块对宿主细胞生长速率的整体影响，从而从系统层面理解遗传密码子扩展所带来的代谢成本。[@problem_id:2741416]", "problem": "您的任务是编写一个完整、可运行的程序，通过量化增加多种氨酰-tRNA合成酶（aminoacyl-tRNA synthetase (aaRS)）和转移RNA（transfer RNA (tRNA)）的表达如何影响宿主翻译机制并因此影响生长速率，来模拟在含非天然氨基酸（ncAA）的遗传密码扩展中的资源竞争。该模型必须源自基本原理：中心法则（信息从DNA流向RNA再到蛋白质）、核糖体限制性翻译，以及tRNA负载与消耗之间的稳态平衡。您必须实现下文详述的模型，并为提供的测试套件计算预测的稳态生长速率。所有生长速率必须以小时的倒数（$\\mathrm{h}^{-1}$）为单位表示，并四舍五入到六位小数。\n\n模型假设与定义：\n- 存在一个固定的总核糖体池 $R_{\\mathrm{tot}}$，它按照翻译类别的起始负载比例进行分配。设 $\\Lambda_H$ 表示宿主蛋白质组的有效起始负载，$\\Lambda_j$ 表示第 $j$ 个额外表达模块（例如，一个 aaRS–tRNA 操纵子）的负载，其中 $j \\in \\{1,\\dots,n\\}$。分配用于宿主蛋白质组合成的核糖体数量为\n$$\nr_H \\;=\\; R_{\\mathrm{tot}} \\cdot \\frac{\\Lambda_H}{\\Lambda_H + \\sum_{j=1}^{n} \\Lambda_j}.\n$$\n- 翻译延伸受限于携带氨基酸的tRNA池的可用性。定义 $s=0$ 为标准宿主池，$s=j$ 为第 $j$ 个ncAA池，每个引入的aaRS–tRNA模块对应一个。设 $w_s$ 为池 $s$ 的宿主密码子需求权重，且 $\\sum_{s} w_s = 1$。设 $v$ 为延伸速率（单位：氨基酸/秒），$v_{\\max}$ 为当tRNA负载不构成限制时的最大速率。每个池的稳态负载分数 $f_s$ 遵循一个生成-消亡平衡，其中负载流入等于消耗流出：\n$$\nC_s \\cdot (1 - f_s) \\;=\\; D_s \\cdot f_s,\n$$\n其中，$C_s$ 是池 $s$ 的总负载能力（单位：氨基酸/秒，为该池中所有tRNA的总和），$D_s$ 是核糖体延伸产生的消耗需求。由于宿主翻译消耗了 $w_s$ 比例的掺入残基，池 $s$ 的总需求为\n$$\nD_s \\;=\\; v \\cdot r_H \\cdot w_s.\n$$\n解此平衡方程可得稳态负载分数\n$$\nf_s \\;=\\; \\frac{C_s}{C_s + v \\cdot r_H \\cdot w_s}.\n$$\n- 总体延伸速率的瓶颈在于最稀缺的已负载tRNA池：\n$$\nv \\;=\\; v_{\\max} \\cdot \\min_{s \\,\\text{with}\\, w_s > 0} f_s.\n$$\n- 宿主生长速率 $\\mu$ 与宿主蛋白质合成总通量成比例，该通量可分解为翻译宿主蛋白质组的核糖体比例与归一化延伸速率的乘积：\n$$\n\\mu \\;=\\; \\mu_{\\max} \\cdot \\left(\\frac{r_H}{R_{\\mathrm{tot}}}\\right) \\cdot \\left(\\frac{v}{v_{\\max}}\\right).\n$$\n\n您的程序必须：\n1. 实现上述模型，从其不动点定义出发，自洽地计算稳态延伸速率 $v$。您必须使用一个能收敛到不动点的确定性迭代法来对 $v$ 进行数值求解。如果对于任何 $w_s>0$ 的 $s$，有 $C_s=0$，则设 $v=0$（因为一个必需的池未被负载，导致无法生长）。\n2. 根据起始负载计算 $r_H$。\n3. 根据最终的 $v$ 计算 $\\mu$（单位：$\\mathrm{h}^{-1}$）。\n4. 将每个 $\\mu$ 四舍五入到六位小数。\n\n常数（所有测试用例共享）：\n- $R_{\\mathrm{tot}} = 20000$。\n- $v_{\\max} = 15$。\n- $\\mu_{\\max} = 1.5$。\n- $\\Lambda_H = 1.0$。\n\n测试套件（每个测试用例指定了 $(\\Lambda_1,\\Lambda_2,\\dots)$，$(C_0,C_1,\\dots)$ 和 $(w_0,w_1,\\dots)$）：\n- 用例1（单个aaRS，中等负担和容量）：\n  - 负载：$(\\Lambda_1) = (0.3)$。\n  - 容量：$(C_0,C_1) = (1.2\\times 10^6,\\,1.0\\times 10^5)$。\n  - 权重：$(w_0,w_1) = (0.98,\\,0.02)$。\n- 用例2（单个aaRS，高负担，低容量）：\n  - 负载：$(\\Lambda_1) = (1.5)$。\n  - 容量：$(C_0,C_1) = (1.2\\times 10^6,\\,5.0\\times 10^3)$。\n  - 权重：$(w_0,w_1) = (0.95,\\,0.05)$。\n- 用例3（两个aaRS模块，中等负担，标准池部分受限）：\n  - 负载：$(\\Lambda_1,\\Lambda_2) = (0.2,\\,0.4)$。\n  - 容量：$(C_0,C_1,C_2) = (8.0\\times 10^5,\\,1.5\\times 10^5,\\,1.0\\times 10^5)$。\n  - 权重：$(w_0,w_1,w_2) = (0.90,\\,0.05,\\,0.05)$。\n- 用例4（无ncAA掺入，但有表达产生的翻译负担）：\n  - 负载：$(\\Lambda_1) = (1.0)$。\n  - 容量：$(C_0,C_1) = (1.0\\times 10^6,\\,1.0\\times 10^5)$。\n  - 权重：$(w_0,w_1) = (1.00,\\,0.00)$。\n- 用例5（aaRS表达负担极高，但ncAA负载容量充足）：\n  - 负载：$(\\Lambda_1) = (3.0)$。\n  - 容量：$(C_0,C_1) = (1.2\\times 10^6,\\,1.0\\times 10^7)$。\n  - 权重：$(w_0,w_1) = (0.95,\\,0.05)$。\n\n最终输出格式要求：\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表（例如，\"[0.123456,0.234567,0.345678,0.456789,0.567890]\"）。该列表必须按所给顺序包含五个测试用例计算出的生长速率 $\\mu$，每个速率都四舍五入到六位小数，单位为 $\\mathrm{h}^{-1}$。", "solution": "提交的问题经过严格验证，被认定为有效。这是一个在定量系统生物学领域中适定、有科学依据的问题，没有矛盾或歧义。任务是计算宿主生物在表达遗传密码扩展组分所施加的代谢负担下的生长速率。该模型基于细胞生长中资源分配的既定原则。我们将着手推导解决方案。\n\n该模型由一个耦合代数方程组定义。关键变量是分配给宿主蛋白质合成的核糖体数量 $r_H$、稳态延伸速率 $v$ 以及最终的生长速率 $\\mu$。\n\n首先，总核糖体池 $R_{\\mathrm{tot}}$ 的分配由宿主蛋白质组的相对翻译起始负载 $\\Lambda_H$ 和 $n$ 个合成模块的负载 $\\Lambda_j$ 决定。用于宿主的核糖体数量由下式给出：\n$$\nr_H = R_{\\mathrm{tot}} \\cdot \\frac{\\Lambda_H}{\\Lambda_H + \\sum_{j=1}^{n} \\Lambda_j}\n$$\n对于一组给定的表达模块，这个量 $r_H$ 是恒定的。\n\n其次，翻译延伸速率 $v$ 受限于已负载tRNA的可用性。对于每个tRNA池 $s$（其中 $s=0$ 代表标准池，$s > 0$ 代表非标准池），假设在负载速率和消耗速率之间达到稳态。池 $s$ 中已负载tRNA的分数 $f_s$ 为：\n$$\nf_s(v) = \\frac{C_s}{C_s + v \\cdot r_H \\cdot w_s}\n$$\n其中，$C_s$ 是合成酶对池 $s$ 的负载能力，$w_s$ 是宿主蛋白质组中对应氨基酸的密码子使用分数。延伸速率 $v$ 的瓶颈在于翻译所需的最不可用的已负载tRNA池（即那些 $w_s > 0$ 的池）：\n$$\nv = v_{\\max} \\cdot \\min_{s \\,|\\, w_s > 0} \\{f_s(v)\\}\n$$\n这个方程将 $v$ 隐式地定义为一个不动点。为了求解 $v$，我们必须找到方程 $g(v) = v - F(v) = 0$ 的根，其中 $F(v)$ 是 $v$ 方程的右侧。\n让我们定义函数 $F(v)$：\n$$\nF(v) = v_{\\max} \\cdot \\min_{s \\,|\\, w_s > 0} \\left( \\frac{C_s}{C_s + v \\cdot r_H \\cdot w_s} \\right)\n$$\n对于 $v \\ge 0$，函数 $F(v)$ 是一个连续的、单调非增函数。函数 $y=v$ 是单调递增的。因此，必然存在一个唯一的非负不动点 $v^* = F(v^*)$。问题指定了一个确定性迭代过程。我们将采用不动点迭代方案：\n$$\nv_{k+1} = F(v_k)\n$$\n我们用 $v_0 = v_{\\max}$ 初始化迭代。迭代将执行足够的步数以确保收敛到不动点 $v_{final}$。必须处理一个特殊情况：如果对于任何有非零需求（$w_s > 0$）的池 $s$，有 $C_s = 0$，那么 $f_s$ 始终为 $0$，导致 $v_{final} = 0$。\n\n最后，宿主生长速率 $\\mu$ 与宿主蛋白质合成的总通量成正比。这个通量是合成宿主蛋白质的核糖体数量 $r_H$ 与其速度 $v$ 的乘积。通过最大可能值进行归一化，我们得到：\n$$\n\\mu = \\mu_{\\max} \\cdot \\left(\\frac{r_H}{R_{\\mathrm{tot}}}\\right) \\cdot \\left(\\frac{v_{final}}{v_{\\max}}\\right)\n$$\n将 $r_H$ 和 $v_{final}$ 的表达式代入，我们得到 $\\mu$ 的最终公式：\n$$\n\\mu = \\mu_{\\max} \\cdot \\left(\\frac{\\Lambda_H}{\\Lambda_H + \\sum_{j=1}^{n} \\Lambda_j}\\right) \\cdot \\left( \\min_{s \\,|\\, w_s > 0} \\left\\{ \\frac{C_s}{C_s + v_{final} \\cdot r_H \\cdot w_s} \\right\\} \\right)\n$$\n\n每个测试用例的计算算法如下：\n$1$. 给定参数 $(\\Lambda_1, \\dots, \\Lambda_n)$，$(C_0, C_1, \\dots)$，和 $(w_0, w_1, \\dots)$，以及常数 $R_{\\mathrm{tot}}$，$v_{\\max}$，$\\mu_{\\max}$，$\\Lambda_H$。\n$2$. 计算外部负载的总和 $\\sum_{j=1}^{n} \\Lambda_j$。\n$3$. 计算翻译宿主的核糖体数量，$r_H = R_{\\mathrm{tot}} \\cdot \\Lambda_H / (\\Lambda_H + \\sum_{j=1}^{n} \\Lambda_j)$。\n$4$. 确定索引集合 $S_{req} = \\{s \\,|\\, w_s > 0\\}$。检查是否有任何 $s \\in S_{req}$ 满足 $C_s = 0$。如果是，则设 $v_{final} = 0$ 并转到步骤 $6$。\n$5$. 数值求解 $v$ 的不动点。初始化 $v_0 = v_{\\max}$。迭代 $v_{k+1} = v_{\\max} \\cdot \\min_{s \\in S_{req}} \\{ C_s / (C_s + v_k \\cdot r_H \\cdot w_s) \\}$ 固定次数（例如，$100$次）以找到 $v_{final}$。\n$6$. 计算生长速率 $\\mu = \\mu_{\\max} \\cdot (r_H/R_{\\mathrm{tot}}) \\cdot (v_{final}/v_{\\max})$。\n$7$. 将结果四舍五入到六位小数。\n\n对所有提供的测试用例执行此程序以生成最终输出。在整个计算过程中使用浮点运算以保持精度。对于给定的参数空间，该确定性迭代是鲁棒的并且能快速收敛。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\n# Note: Although numpy is available, it is not required for this problem.\n\n# Define constants from the problem statement\nR_tot = 20000.0\nv_max = 15.0\nmu_max = 1.5\nLambda_H = 1.0\n\ndef calculate_growth_rate(lambdas, capacities, weights):\n    \"\"\"\n    Calculates the growth rate for a single set of parameters based on the model.\n    \"\"\"\n    # Step 1: Calculate the number of ribosomes allocated to host proteome synthesis, r_H.\n    sum_lambdas = sum(lambdas)\n    denominator_rH = Lambda_H + sum_lambdas\n    r_H = R_tot * Lambda_H / denominator_rH\n\n    # Step 2: Solve for the steady-state elongation rate, v, self-consistently.\n    # Find indices 's' for pools required for translation (where w_s > 0).\n    required_indices = [i for i, w in enumerate(weights) if w > 0]\n    \n    # Handle the special case where a required pool has zero charging capacity.\n    # This leads to zero elongation rate and thus zero growth.\n    for i in required_indices:\n        if capacities[i] == 0:\n            return 0.0\n\n    # Solve for v using fixed-point iteration as specified.\n    # Initialize v with its maximum possible value.\n    v = v_max\n    # A fixed number of iterations is robust and sufficient for convergence in this system.\n    for _ in range(100):\n        # Calculate the charged fraction f_s for each required tRNA pool.\n        f_s_values = [\n            capacities[i] / (capacities[i] + v * r_H * weights[i])\n            for i in required_indices\n        ]\n        \n        # The overall elongation rate is limited by the scarcest charged pool (min f_s).\n        min_f_s = min(f_s_values)\n        v = v_max * min_f_s\n    \n    v_final = v\n\n    # Step 3: Compute the host growth rate, mu.\n    # mu is a product of the maximal rate, ribosome allocation factor, and elongation factor.\n    # The term (r_H / R_tot) is the ribosome allocation factor.\n    # The term (v_final / v_max) is the elongation factor.\n    mu = mu_max * (r_H / R_tot) * (v_final / v_max)\n    \n    return mu\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the final results.\n    \"\"\"\n    # Define the test suite from the problem statement.\n    test_cases = [\n        # Case 1: single aaRS, moderate burden and capacity\n        {\"lambdas\": (0.3,), \"capacities\": (1.2e6, 1.0e5), \"weights\": (0.98, 0.02)},\n        # Case 2: single aaRS, high burden, low capacity\n        {\"lambdas\": (1.5,), \"capacities\": (1.2e6, 5.0e3), \"weights\": (0.95, 0.05)},\n        # Case 3: two aaRS modules, moderate burdens, canonical pool partially limiting\n        {\"lambdas\": (0.2, 0.4), \"capacities\": (8.0e5, 1.5e5, 1.0e5), \"weights\": (0.90, 0.05, 0.05)},\n        # Case 4: no ncAA incorporation but translation burden from expression\n        {\"lambdas\": (1.0,), \"capacities\": (1.0e6, 1.0e5), \"weights\": (1.00, 0.00)},\n        # Case 5: very high aaRS expression burden but ample ncAA charging capacity\n        {\"lambdas\": (3.0,), \"capacities\": (1.2e6, 1.0e7), \"weights\": (0.95, 0.05)},\n    ]\n\n    results = []\n    for case in test_cases:\n        # Calculate the growth rate for each case.\n        mu = calculate_growth_rate(case[\"lambdas\"], case[\"capacities\"], case[\"weights\"])\n        results.append(mu)\n\n    # Format the final output as a comma-separated list of strings,\n    # with each result rounded to six decimal places.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\n# Execute the main function.\nsolve()\n```", "id": "2741416"}]}