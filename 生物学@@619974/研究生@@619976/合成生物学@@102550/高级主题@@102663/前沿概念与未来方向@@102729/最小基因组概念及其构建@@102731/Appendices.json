{"hands_on_practices": [{"introduction": "细胞的生长性能从根本上受限于其蛋白质组资源的内部分配。本练习通过一个简化的解析模型来探讨这一基本原理，让你通过对分配给蛋白质合成机器（占比为 $\\phi_R$）和代谢酶（占比为 $\\phi_E$）的资源进行权衡建模，推导出能使生长速率 $\\mu$ 最大化的最优方案。这有助于你理解高层次的细胞组分如何决定了最小细胞的性能极限。[@problem_id:2783592]", "problem": "在构建最小基因组时，一个核心设计任务是在核糖体和代谢酶之间分配蛋白质组，同时保留一组不可压缩的必需蛋白质。设 $\\phi_{R}$ 表示核糖体中的蛋白质组分数，$\\phi_{E}$ 表示合成氨基酸前体的代谢酶中的蛋白质组分数，$\\phi_{0}$ 表示在给定的最小基因组设计中无法减少的所有其他必需蛋白质的不可压缩分数。蛋白质组分数满足守恒约束 $\\phi_{R}+\\phi_{E}+\\phi_{0}=1$，其中 $0<\\phi_{0}<1$。考虑比生长速率为 $\\mu$（单位为 $\\mathrm{h}^{-1}$）的平衡指数生长，该生长基于以下广泛接受的原则：\n\n- 根据分子生物学的中心法则（脱氧核糖核酸到核糖核酸到蛋白质）和大量的经验测量，蛋白质合成能力与核糖体丰度成比例，因此比蛋白质合成能力与 $\\phi_{R}$ 成正比，比例常数为 $k_{R}$（单位为 $\\mathrm{h}^{-1}$），从而得到上界 $\\mu \\leq k_{R}\\,\\phi_{R}$。\n- 新陈代谢产生的氨基酸前体供应与代谢酶部分的丰度成比例，因此比前体生产能力与 $\\phi_{E}$ 成正比，比例常数为 $k_{E}$（单位为 $\\mathrm{h}^{-1}$），从而得到上界 $\\mu \\leq k_{E}\\,\\phi_{E}$。\n- 剩余的蛋白质组分数 $\\phi_{0}$ 对于这两种能力而言是非生产性的，但对于最小基因组设计而言是必需且固定的。\n\n假设没有其他约束，且 $\\phi_{R}$ 是决策变量，其中 $\\phi_{E}=1-\\phi_{0}-\\phi_{R}$ 且 $0 \\leq \\phi_{R} \\leq 1-\\phi_{0}$。在这些假设下：\n\n1. 推导在 $(\\phi_{R},\\mu)$ 平面内可行生长速率区域的上边界 $\\mu_{\\max}(\\phi_{R})$ 作为 $\\phi_{R}$、$k_{R}$、$k_{E}$ 和 $\\phi_{0}$ 的函数的显式解析表达式。\n2. 确定使 $\\mu_{\\max}(\\phi_{R})$ 最大化的值 $\\phi_{R}^{\\star}$，并计算相应的最大生长速率 $\\mu^{\\star}$。\n3. 以 $\\mu^{\\star}$ 的简化闭式表达式形式提供您的最终答案。以 $\\mathrm{h}^{-1}$ 为单位表示最大生长速率。不要代入数值。\n\n您最终方框内的答案必须仅为 $\\mu^{\\star}$ 的表达式，不带单位。无需四舍五入。", "solution": "所述问题提法恰当、有科学依据，并包含唯一解析解所需的所有信息。我们将开始推导。\n\n该系统由一组关于比生长速率 $\\mu$ 的约束定义。存在两种能力限制。第一种来自蛋白质合成，其与核糖体分数 $\\phi_{R}$ 成正比：\n$$\n\\mu \\leq k_{R}\\,\\phi_{R}\n$$\n第二种来自代谢前体的合成，其与代谢酶分数 $\\phi_{E}$ 成正比：\n$$\n\\mu \\leq k_{E}\\,\\phi_{E}\n$$\n这两个蛋白质组分数，连同不可压缩分数 $\\phi_{0}$，必须加起来等于总蛋白质组，该值被归一化为1：\n$$\n\\phi_{R} + \\phi_{E} + \\phi_{0} = 1\n$$\n根据这个守恒定律，我们将代谢酶分数 $\\phi_{E}$ 表示为核糖体分数 $\\phi_{R}$ 的函数，因为 $\\phi_{R}$ 被指定为决策变量：\n$$\n\\phi_{E} = 1 - \\phi_{0} - \\phi_{R}\n$$\n问题指明 $0 < \\phi_{0} < 1$，且决策变量 $\\phi_{R}$ 被约束在区间 $0 \\leq \\phi_{R} \\leq 1 - \\phi_{0}$。这确保了 $\\phi_{E}$ 也是非负的，因为 $0 \\leq \\phi_{E} \\leq 1 - \\phi_{0}$。\n\n将 $\\phi_{E}$ 的表达式代入第二个能力约束中，得到：\n$$\n\\mu \\leq k_{E}(1 - \\phi_{0} - \\phi_{R})\n$$\n对于任何给定的蛋白质组分配 $\\phi_{R}$，生长速率 $\\mu$ 必须同时满足两个能力约束。因此，对于给定的 $\\phi_{R}$，可能达到的最高生长速率（在此记为 $\\mu_{\\max}(\\phi_{R})$）是两个上界中的最小值。这为可行生长速率区域的上边界提供了显式解析表达式：\n$$\n\\mu_{\\max}(\\phi_{R}) = \\min(k_{R}\\,\\phi_{R}, k_{E}(1 - \\phi_{0} - \\phi_{R}))\n$$\n这就完成了问题的第一部分。\n\n为了解决第二部分，我们必须找到使函数 $\\mu_{\\max}(\\phi_{R})$ 最大化的 $\\phi_{R}$ 的值，我们称之为 $\\phi_{R}^{\\star}$。函数 $\\mu_{\\max}(\\phi_{R})$ 是关于 $\\phi_{R}$ 的两个线性函数的下包络线：一个斜率为正值 $k_{R}$，另一个斜率为负值 $-k_{E}$。这个复合函数的最大值在两条线的交点处达到，在该点它们的值相等。这代表了两种能力同时成为限制因素的平衡生长条件。我们将 $\\min$ 函数的两个参数设为相等，以求得 $\\phi_{R}^{\\star}$：\n$$\nk_{R}\\,\\phi_{R}^{\\star} = k_{E}(1 - \\phi_{0} - \\phi_{R}^{\\star})\n$$\n我们现在求解这个关于 $\\phi_{R}^{\\star}$ 的线性方程：\n$$\nk_{R}\\,\\phi_{R}^{\\star} = k_{E} - k_{E}\\phi_{0} - k_{E}\\phi_{R}^{\\star}\n$$\n$$\nk_{R}\\,\\phi_{R}^{\\star} + k_{E}\\phi_{R}^{\\star} = k_{E}(1 - \\phi_{0})\n$$\n$$\n\\phi_{R}^{\\star}(k_{R} + k_{E}) = k_{E}(1 - \\phi_{0})\n$$\n这得出了最优核糖体分数：\n$$\n\\phi_{R}^{\\star} = \\frac{k_{E}(1 - \\phi_{0})}{k_{R} + k_{E}}\n$$\n这个 $\\phi_{R}^{\\star}$ 的值保证在有效范围 $[0, 1-\\phi_{0}]$ 内，因为 $k_{R}, k_{E} > 0$ 且 $0 < 1-\\phi_{0} < 1$。\n\n最后，为了计算最大生长速率 $\\mu^{\\star}$，我们将最优分数 $\\phi_{R}^{\\star}$ 代回两个初始能力表达式中的任意一个。使用第一个表达式 $\\mu = k_{R}\\,\\phi_{R}$ 是最直接的途径：\n$$\n\\mu^{\\star} = \\mu_{\\max}(\\phi_{R}^{\\star}) = k_{R}\\,\\phi_{R}^{\\star}\n$$\n$$\n\\mu^{\\star} = k_{R} \\left( \\frac{k_{E}(1 - \\phi_{0})}{k_{R} + k_{E}} \\right)\n$$\n简化后，我们得到最大生长速率的最终闭式表达式：\n$$\n\\mu^{\\star} = \\frac{k_{R}k_{E}(1 - \\phi_{0})}{k_{R} + k_{E}}\n$$\n该表达式代表了在由 $\\phi_{0}$ 代表的不可压缩细胞机器的条件下，通过在核糖体和代谢酶之间优化分配蛋白质组所能实现的最高生长速率。", "answer": "$$\\boxed{\\frac{k_{R}k_{E}(1 - \\phi_{0})}{k_{R} + k_{E}}}$$", "id": "2783592"}, {"introduction": "从高层次的资源分配理论转向具体的网络层面分析，本练习将引导你使用流平衡分析（$FBA$）这一强大的计算工具。你将对一个给定的模型代谢网络进行基因敲除的计算机模拟，借此识别必需基因和合成致死相互作用。此实践旨在让你亲手操作并掌握系统生物学中用以连接基因型与表型的核心分析方法。[@problem_id:2783655]", "problem": "本文提出了一个细胞最小基因组设计任务，使用通量平衡分析（Flux Balance Analysis, FBA）作为计算框架。其基本基础是细胞内代谢物的稳态质量平衡以及通过基因-蛋白质-反应（Gene–Protein–Reaction, GPR）关联来实现操作化的分子生物学中心法则。稳态假设要求细胞内累积速率为零，从而产生一个作用于反应通量的线性约束系统。必要性 (Essentiality) 在操作上定义为：如果将一个反应或基因集约束为非活性状态，导致最优生物质生产通量为零，则该反应或基因集是必要的。合成致死 (Synthetic lethality) 指的是两个单独不致死的扰动共同作用时导致致死的情况。\n\n给定一个玩具但科学上一致的代谢网络，该网络包含 $m$ 个细胞内代谢物和 $n$ 个反应。该网络由一个化学计量矩阵 $S \\in \\mathbb{R}^{m \\times n}$、反应通量的下界 $l \\in \\mathbb{R}^{n}$ 和上界 $u \\in \\mathbb{R}^{n}$，以及一个选择待最大化的“生物质”反应的目标向量 $c \\in \\mathbb{R}^{n}$ 来编码。在 FBA 中，原始问题是\n$$\n\\max_{v \\in \\mathbb{R}^{n}} \\; c^{\\top} v \\quad \\text{subject to} \\quad S v = 0, \\; l \\le v \\le u,\n$$\n其中 $v$ 是反应通量向量。通过对受影响的反应 $i$ 将边界收紧为 $l_i = u_i = 0$ 来模拟反应或基因的敲除。\n\n网络规格（所有索引均为 0-基）：\n- 代谢物：$m = 2$，名为“A”和“B”。\n- 反应：$n = 4$，在 $S$ 中具有以下列和边界 $(l_i,u_i)$：\n  - 反应 $0$ (“A\\_imp”)：输入 A，化学计量产物为 A，边界 $[0,10]$。\n  - 反应 $1$ (“B\\_imp”)：输入 B，化学计量产物为 B，边界 $[0,10]$。\n  - 反应 $2$ (“Biomass”)：消耗 A 和 B，边界 $[0,1000]$。\n  - 反应 $3$ (“A\\_to\\_B”)：将 A 转化为 B，边界 $[0,1000]$。\n化学计量矩阵（行序为 [A, B]，列序为 [$0,1,2,3$]）为\n$$\nS =\n\\begin{bmatrix}\n+1 & 0 & -1 & -1 \\\\\n0 & +1 & -1 & +1\n\\end{bmatrix}.\n$$\n目标向量选择生物质反应：$c = [0,0,1,0]$，因此最优生长速率为 $c^{\\top} v = v_2$，以“通量单位”计。边界为 $l = [0,0,0,0]$ 和 $u = [10,10,1000,1000]$。\n\n基因-蛋白质-反应 (GPR) 映射以析取范式（“与的或”）给出，其中每个反应都与一组基因子句相关联；如果至少有一个子句被完全满足（即该子句中的所有基因都存在），则反应是活性的。设基因集为 $\\{\\text{gA1}, \\text{gA2}, \\text{gB}, \\text{gBiom}, \\text{gAToB1}, \\text{gAToB2}\\}$。GPR 关联如下：\n- 反应 $0$ (“A\\_imp”)：$(\\text{gA1}) \\lor (\\text{gA2})$。\n- 反应 $1$ (“B\\_imp”)：$(\\text{gB})$。\n- 反应 $2$ (“Biomass”)：$(\\text{gBiom})$。\n- 反应 $3$ (“A\\_to\\_B”)：$(\\text{gAToB1} \\land \\text{gAToB2})$。\n\n单敲除和双敲除在反应水平上通过为相应反应设置 $l_i = u_i = 0$ 来模拟，在基因水平上则首先评估 GPR 来确定在基因删除下哪些反应变为非活性，然后将这些反应的边界设置为 $0$。必须为每个敲除设置求解线性规划问题。如果最优目标值小于或等于一个小的数值容差 $\\varepsilon = 10^{-9}$，则解被解释为“零增长”；否则为“非零增长”。为便于报告，将每个最优生长值四舍五入到 6 位小数。\n\n您的程序必须按所列出的确切顺序，为以下每个测试用例计算最优生长值 $c^{\\top} v$。每个测试用例被指定为按索引指定的反应敲除集，或按名称指定的基因敲除集：\n- 测试用例 $0$：基线，无敲除。\n- 测试用例 $1$：反应敲除 $\\{0\\}$。\n- 测试用例 $2$：反应敲除 $\\{1\\}$。\n- 测试用例 $3$：反应敲除 $\\{3\\}$。\n- 测试用例 $4$：反应敲除 $\\{2\\}$。\n- 测试用例 $5$：反应敲除 $\\{1,3\\}$。\n- 测试用例 $6$：反应敲除 $\\{0,1\\}$。\n- 测试用例 $7$：反应敲除 $\\{0,3\\}$。\n- 测试用例 $8$：反应敲除 $\\{1,2\\}$。\n- 测试用例 $9$：基因敲除 $\\{\\text{gA1}\\}$。\n- 测试用例 $10$：基因敲除 $\\{\\text{gA2}\\}$。\n- 测试用例 $11$：基因敲除 $\\{\\text{gAToB1}\\}$。\n- 测试用例 $12$：基因敲除 $\\{\\text{gB}\\}$。\n- 测试用例 $13$：基因敲除 $\\{\\text{gA1},\\text{gA2}\\}$。\n- 测试用例 $14$：基因敲除 $\\{\\text{gB},\\text{gAToB1}\\}$。\n\n最终输出格式要求：\n- 您的程序应生成单行输出，其中包含按上述测试用例顺序排列的 15 个结果，形式为方括号括起来的逗号分隔列表。每个条目必须是四舍五入到 6 位小数的浮点数（例如，$[x_0,x_1,\\dots,x_{14}]$）。\n- 不需要单位，因为在此抽象公式中通量是无单位的。不涉及角度。不使用百分比。\n\n科学真实性说明：稳态约束 $S v = 0$ 近似于在代谢物池是准稳态的时间尺度上的细胞内稳态。交换或源/汇反应表示为具有单一代谢物化学计量的有界通量，这在外部池未被显式建模时，是基于约束的重建和分析中的标准做法。\n\n使用标准线性求解器实现线性规划。除所述定义外，不要使用快捷方式。确保通过评估 GPR 规则来确定基因必要性和合成致死性，然后在得出的反应可用性下重新优化。使用 $\\varepsilon = 10^{-9}$ 来解释数值零，但始终按规定报告四舍五入到 6 位小数的原始最优值。", "solution": "所提出的问题是计算系统生物学中一个定义明确的练习，特别是使用通量平衡分析（FBA）框架。它要求求解一系列线性规划问题，以确定一个玩具代谢网络在各种遗传和反应水平扰动下的最优生长速率。该问题具有科学依据，在数学上是一致的，并且包含了获得唯一解所需的所有信息。因此，它被认为是有效的。\n\nFBA 的核心是稳态假设，该假设假定对于所有细胞内代谢物，其生产速率等于消耗速率。对于一个具有 $m$ 个代谢物和 $n$ 个反应，并由化学计量矩阵 $S \\in \\mathbb{R}^{m \\times n}$ 表征的网络，这表示为一个线性方程组：\n$$\nS v = 0\n$$\n其中 $v \\in \\mathbb{R}^{n}$ 是反应通量向量。每个通量 $v_i$ 都受到下界和上界 $l_i \\le v_i \\le u_i$ 的约束，这反映了热力学和容量的限制。生物学目标，通常是生物质生产，由一个待最大化的线性目标函数 $c^{\\top} v$ 表示。因此，该问题被表述为一个线性规划（LP）问题：\n$$\n\\text{maximize} \\quad z = c^{\\top} v \\\\\n\\text{subject to} \\quad S v = 0 \\\\\nl \\le v \\le u\n$$\n对于这个具体问题，我们给定：\n- 代谢物数量 $m=2$ 和反应数量 $n=4$。\n- 化学计量矩阵：\n$$\nS =\n\\begin{bmatrix}\n1 & 0 & -1 & -1 \\\\\n0 & 1 & -1 & 1\n\\end{bmatrix}\n$$\n- 基线通量边界：$l = [0, 0, 0, 0]^{\\top}$ 和 $u = [10, 10, 1000, 1000]^{\\top}$。\n- 目标向量，它分离出生物质反应通量（$v_2$）：$c = [0, 0, 1, 0]^{\\top}$。\n\n诸如反应或基因敲除之类的扰动是通过修改通量边界来模拟的。反应 $i$ 的敲除通过将其边界设置为零来实现：$l_i = u_i = 0$。\n\n基因敲除通过基因-蛋白质-反应（GPR）关联转化为反应敲除。所提供的 GPR 关联以析取范式（“与的或”）给出。如果一个反应的布尔子句中至少有一个为真，则该反应是活性的。一个子句（一组基因的“与”逻辑）为真，当且仅当其中的所有基因都存在。因此，一个反应被失活，当且仅当它的所有子句都被基因敲除集证伪。\n\nGPR 规则如下：\n- 反应 0 (A\\_imp): $(\\text{gA1}) \\lor (\\text{gA2})$。当且仅当 gA1 和 gA2 都被敲除时，该反应失活。\n- 反应 1 (B\\_imp): $(\\text{gB})$。如果 gB 被敲除，该反应失活。\n- 反应 2 (Biomass): $(\\text{gBiom})$。如果 gBiom 被敲除，该反应失活。\n- 反应 3 (A\\_to\\_B): $(\\text{gAToB1} \\land \\text{gAToB2})$。如果 gAToB1 或 gAToB2（或两者）被敲除，该反应失活。\n\n每个测试用例的求解方法如下：\n1.  识别测试用例指定的敲除基因或反应集。\n2.  如果在基因水平上指定敲除，则应用 GPR 逻辑来确定要失活的相应反应集。\n3.  对于每个失活的反应 $i$，将其通量边界调整为 $l_i = 0$ 和 $u_i = 0$。\n4.  使用修改后的边界构建 LP 问题实例。标准 LP 求解器通常是最小化求解器。为了最大化 $c^{\\top}v$，我们最小化 $-c^{\\top}v$。\n5.  求解 LP 以找到最优目标值，该值代表最大生物质通量。\n6.  问题规定，预测的生长速率 $z_{opt} \\le \\varepsilon$（其中 $\\varepsilon = 10^{-9}$）被解释为“零增长”。然而，输出必须是来自求解器的原始数值，四舍五入到 6 位小数。数值浮点误差可能导致非常接近零的值，这将通过四舍五入要求正确处理。\n\n此过程将系统地应用于所有 15 个测试用例。实现将使用 `scipy.optimize` 库中的 `linprog` 函数，这是一个用于解决此类问题的标准且稳健的工具。最终输出将是这 15 个计算出的最优生长值的列表，按指定格式排列。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves a series of Flux Balance Analysis problems for a toy metabolic network under different knockout conditions.\n    \"\"\"\n    #\n    # === PROBLEM DEFINITION ===\n    #\n\n    # Stoichiometric matrix S (m x n = 2 x 4)\n    # Rows: Metabolites [A, B]\n    # Columns: Reactions [0:A_imp, 1:B_imp, 2:Biomass, 3:A_to_B]\n    S_matrix = np.array([\n        [1, 0, -1, -1],  # Metabolite A balance\n        [0, 1, -1,  1]   # Metabolite B balance\n    ])\n\n    # Objective vector c (maximizes flux of reaction 2, 'Biomass')\n    c_obj = np.array([0, 0, 1, 0])\n\n    # Baseline flux bounds (lower and upper)\n    l_base = np.array([0, 0, 0, 0])\n    u_base = np.array([10, 10, 1000, 1000])\n    \n    # GPR rules in Disjunctive Normal Form (OR of ANDs)\n    # Each reaction is mapped to a list of its clauses (a clause is a list of genes).\n    gpr_rules = {\n        0: [['gA1'], ['gA2']],            # (gA1) or (gA2)\n        1: [['gB']],                     # (gB)\n        2: [['gBiom']],                  # (gBiom)\n        3: [['gAToB1', 'gAToB2']]       # (gAToB1 and gAToB2)\n    }\n\n    # Test cases as specified in the problem statement\n    test_cases = [\n        {'type': 'baseline', 'knockouts': set()},\n        {'type': 'reaction', 'knockouts': {0}},\n        {'type': 'reaction', 'knockouts': {1}},\n        {'type': 'reaction', 'knockouts': {3}},\n        {'type': 'reaction', 'knockouts': {2}},\n        {'type': 'reaction', 'knockouts': {1, 3}},\n        {'type': 'reaction', 'knockouts': {0, 1}},\n        {'type': 'reaction', 'knockouts': {0, 3}},\n        {'type': 'reaction', 'knockouts': {1, 2}},\n        {'type': 'gene', 'knockouts': {'gA1'}},\n        {'type': 'gene', 'knockouts': {'gA2'}},\n        {'type': 'gene', 'knockouts': {'gAToB1'}},\n        {'type': 'gene', 'knockouts': {'gB'}},\n        {'type': 'gene', 'knockouts': {'gA1', 'gA2'}},\n        {'type': 'gene', 'knockouts': {'gB', 'gAToB1'}},\n    ]\n\n    #\n    # === SOLVER LOGIC ===\n    #\n\n    def get_inactive_reactions_from_genes(ko_genes):\n        \"\"\"\n        Evaluates GPR rules to find reactions inactivated by gene knockouts.\n        A reaction is inactive if all its OR clauses are false.\n        A clause (AND) is false if any of its gene members is knocked out.\n        \"\"\"\n        inactive_reactions = set()\n        for rxn_idx, clauses in gpr_rules.items():\n            is_rxn_active = False\n            for clause in clauses:\n                # Check if this AND clause is satisfied\n                if all(gene not in ko_genes for gene in clause):\n                    is_rxn_active = True\n                    break  # One satisfied clause is enough to activate the reaction\n            \n            if not is_rxn_active:\n                inactive_reactions.add(rxn_idx)\n        return inactive_reactions\n\n    def run_fba(l_bounds, u_bounds):\n        \"\"\"\n        Runs the FBA linear program for a given set of flux bounds.\n        \"\"\"\n        # The linprog function minimizes, so we minimize -c' * v\n        # Constraints: Sv = 0, l <= v <= u\n        bounds = list(zip(l_bounds, u_bounds))\n        \n        # We expect a vector of zeros for the equality constraints b_eq\n        b_eq = np.zeros(S_matrix.shape[0])\n\n        res = linprog(c=-c_obj, A_eq=S_matrix, b_eq=b_eq, bounds=bounds, method='highs')\n        \n        if res.success:\n            # The result from the solver is the minimum of -c'v.\n            # We want the maximum of c'v, which is -res.fun.\n            growth = -res.fun\n            # Per problem, report the raw value rounded, not clamped by epsilon.\n            # Small negative values from solver for true zero solutions will round to 0.0.\n            return round(growth, 6)\n        else:\n            # If optimization fails (e.g., infeasible), growth is 0.\n            # This should not occur with the given problem setup.\n            return 0.0\n\n    #\n    # === MAIN EXECUTION LOOP ===\n    #\n    \n    results = []\n    for case in test_cases:\n        # Start with fresh baseline bounds for each case\n        l_current = l_base.copy()\n        u_current = u_base.copy()\n        \n        reaction_kos = set()\n        if case['type'] == 'reaction':\n            reaction_kos = case['knockouts']\n        elif case['type'] == 'gene':\n            reaction_kos = get_inactive_reactions_from_genes(case['knockouts'])\n        \n        # Apply knockouts by setting bounds to 0\n        for rxn_idx in reaction_kos:\n            l_current[rxn_idx] = 0.0\n            u_current[rxn_idx] = 0.0\n            \n        optimal_growth = run_fba(l_current, u_current)\n        results.append(optimal_growth)\n\n    # Format and print the final output as a single line\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2783655"}, {"introduction": "计算机对基因必要性的预测最终必须通过实验来验证，而这一过程也充满了挑战。本练习探讨了细菌遗传学中的一个经典实验伪影：操纵子内的极性效应，即上游基因的破坏可能会无意中终止下游必需基因的表达。你将需要批判性地评估和选择能够成功将基因的内在功能与这些混杂效应解耦的实验策略，从而准确地确定其真实必要性。[@problem_id:2783583]", "problem": "在一个细菌最小基因组构建项目中，基因的必需性是通过全基因组范围的功能丧失筛选结合精确基因损伤的重建来推断的。考虑一个包含基因 $g_1$、$g_2$ 和 $g_3$ 的多顺反子操纵子，其中独立的条件性表达实验已经确定，在所测试的条件下，$g_3$ 编码一个必需功能。一项基于转座子的筛选（转座子插入测序；Tn-seq）使用了一个元件，该元件携带一个内部双向转录终止子和一个单个朝外的启动子，结果显示在 $g_1$、$g_2$ 和 $g_3$ 基因中，转座子插入严重缺失。团队怀疑极性效应正在混淆基因水平的必需性判定。在细菌中，极性效应的产生是由于一个单一启动子可以驱动一个多顺反子信使核糖核酸（mRNA）的转录，核糖核酸聚合酶（RNAP）的转录会穿过下游的开放阅读框，翻译可以在相邻编码序列之间发生翻译偶联，而引入的元件（如转录终止子或大片段插入）会减少通读转录、使mRNA不稳定或破坏下游基因的翻译起始。\n\n从中心法则（脱氧核糖核酸到核糖核酸到蛋白质）、细菌操纵子的定义（单一启动子驱动多顺反子mRNA）以及以下原则出发：(i) 转录终止会减少下游转录本的丰度，(ii) 核糖体结合位点的可及性和翻译偶联控制下游的翻译，以及 (iii) 在反式(in trans)互补一个上游基因并不能恢复被破坏的操纵子的转录。请选择所有后续实验的设计特点，这些设计在实施后能特异性地最大限度减少因极性效应导致的功能错误归因，并能准确地判定 $g_1$ 和 $g_2$ 的必需性。\n\nA. 在 $g_1$ 基因内部构建一个框内、无痕的内部缺失，去除其约 $50\\%$ 的编码序列，同时保留 $g_2$ 上游的天然基因间区和核糖体结合位点；并且，如果必须使用抗生素抗性盒，应选择一个不含转录终止子的抗性盒，并在 $g_2$ 的紧邻上游添加一个合成的核糖体结合位点以维持翻译起始。\n\nB. 通过在 $g_2$ 的紧邻上游整合一个独立的组成型启动子来重构该操纵子，使得 $g_2$和 $g_3$ 的转录独立于 $g_1$；然后，在下游表达被隔离的情况下，产生对 $g_1$ 的破坏来评估细胞存活性。\n\nC. 使用成簇的规律间隔的短回文重复序列干扰 (CRISPRi) 技术靶向该操纵子的启动子，从而减少 $g_1$ 的转录，并从一个质粒上，在其天然启动子的驱动下，以反式(in trans)互补 $g_1$ 来区分 $g_1$ 的特异必需性与极性效应。\n\nD. 在筛选文库中，使用一端带有强朝外启动子的转座子，并比较 $g_1$ 内部正向插入与反向插入的适应度；将依赖于方向的下游表达拯救现象视为极性效应的证据，并据此对 $g_1$ 进行重新分类。\n\nE. 在 $g_1$ 的紧邻下游引入一个强的内在转录终止子，使得 $g_2$ 和 $g_3$ 不再接收来自 $g_1$ 基因座的转录通读，从而阻止极性效应。\n\nF. 从一个异位基因组位点，在经过调整以匹配其天然表达水平（例如，通过测量信使核糖核酸丰度并调整启动子和核糖体结合位点的强度）的启动子驱动下提供 $g_2$ 和 $g_3$。然后，在 $g_1$ 的天然基因座引入一个早期移码突变，并检测存活性。\n\n选择所有适用项。", "solution": "问题陈述在科学上是有效的。它展示了细菌功能基因组学中的一个经典情景，即多顺反子操纵子内基因的必需性被极性效应所混淆。核心任务是找出能够区分上游基因（$g_1$、$g_2$）的真正必需性与破坏已知必需下游基因（$g_3$）表达所带来的致死后果的实验设计。\n\n中心问题是极性效应，即操纵子中上游基因（例如 $g_1$）的遗传破坏会阻止下游基因（例如 $g_2$ 和 $g_3$）的表达。根据中心法则（脱氧核糖核酸 $\\rightarrow$ 核糖核酸 $\\rightarrow$ 蛋白质）和细菌操纵子的结构，单个启动子驱动一个多顺反子信使核糖核酸（mRNA）。初始筛选中使用的转座子包含一个转录终止子，当其插入 $g_1$ 或 $g_2$ 时，会使核糖核酸聚合酶（RNAP）的转录过早停止。这阻止了编码来自 $g_3$ 基因的必需蛋白的那部分 mRNA 的合成，从而导致细胞死亡。这使得 $g_1$ 和 $g_2$ 看起来是必需的。因此，一个成功的实验设计必须在破坏 $g_1$ 或 $g_2$ 蛋白产物功能的同时，保持 $g_3$ 的表达完整无损。\n\n我们现在将评估每个提议的实验设计。\n\nA. 在 $g_1$ 基因内部构建一个框内、无痕的内部缺失，去除其约 $50\\%$ 的编码序列，同时保留 $g_2$ 上游的天然基因间区和核糖体结合位点；并且，如果必须使用抗生素抗性盒，应选择一个不含转录终止子的抗性盒，并在 $g_2$ 的紧邻上游添加一个合成的核糖体结合位点以维持翻译起始。\n\n该选项提出了两种可靠的方法。首先，在 $g_1$ 内部进行框内、无痕的缺失将产生一个无功能的 $g_1$ 蛋白，而不会改变多顺反子转录本的阅读框。这最大限度地减少了产生可能诱导 Rho 依赖性终止或其他形式转录极性的提前终止密码子的机会。通过保留 $g_2$ 的基因间区和核糖体结合位点（RBS），其目的是维持下游基因 $g_2$ 和 $g_3$ 的正常转录和翻译。这将 $g_1$ 蛋白的功能与操纵子表达的完整性清晰地分离开来。其次，如果需要选择标记，使用不含转录终止子的抗性盒对于允许转录通读至关重要，正如原则(i)所述。在 $g_2$ 上游添加一个合成的 RBS 是一个精巧的步骤，它直接解决了潜在的翻译极性（翻译偶联的破坏）问题，如原则(ii)所述。这确保了 $g_2$（以及随后的 $g_3$）的翻译能够有效地重新起始。这两种策略都旨在专门测试 $g_1$ 蛋白的必需性，同时最大限度地减少极性效应。**正确**。\n\nB. 通过在 $g_2$ 的紧邻上游整合一个独立的组成型启动子来重构该操纵子，使得 $g_2$和 $g_3$ 的转录独立于 $g_1$；然后，在下游表达被隔离的情况下，产生对 $g_1$ 的破坏来评估细胞存活性。\n\n这种策略涉及遗传重构，以将下游基因的表达与上游基因隔离开来。通过在 $g_2$ 之前插入一个新的启动子，就创建了一个新的转录单元，使得 $g_2$ 和 $g_3$ 的表达完全独立于天然操纵子启动子和基因 $g_1$ 的状态。由于必需基因 $g_3$ 的表达由这个新启动子保证，任何破坏 $g_1$ 的方法（例如，缺失、移码，甚至转座子插入）将不再产生致命的极性效应。此时细胞的存活性直接且明确地反映了 $g_1$ 基因产物本身的必需性。这是一种用于解析操纵子功能的强大而明确的方法。**正确**。\n\nC. 使用成簇的规律间隔的短回文重复序列干扰 (CRISPRi) 技术靶向该操纵子的启动子，从而减少 $g_1$ 的转录，并从一个质粒上，在其天然启动子的驱动下，以反式(in trans)互补 $g_1$ 来区分 $g_1$ 的特异必需性与极性效应。\n\n这个实验设计在根本上是有缺陷的。使用CRISPRi靶向操纵子的单一启动子将抑制*整个*操纵子的转录，包括 $g_1$、$g_2$ 和必需基因 $g_3$。这将导致必需的 $g_3$ 蛋白水平降低，很可能引起严重的适应度缺陷或致死性，无论 $g_1$ 是否是必需的。以反式（从质粒上）提供 $g_1$ 基因产物并不能拯救一个因缺少 $g_3$ 蛋白而垂死的细胞。这个实验没有将 $g_1$ 的敲低与 $g_3$ 的敲低解耦，因此未能检验 $g_1$ 的特异必需性。它误解了问题的本质，并且关于反式互补不能恢复转录的原则(iii)在这里的精神是相关的——补充蛋白质不能修复对其他基因的转录缺陷。**不正确**。\n\nD. 在筛选文库中，使用一端带有强朝外启动子的转座子，并比较 $g_1$ 内部正向插入与反向插入的适应度；将依赖于方向的下游表达拯救现象视为极性效应的证据，并据此对 $g_1$ 进行重新分类。\n\n这描述了一种专门为识别极性效应而设计的精密高通量筛选方法。带有朝外启动子的转座子如果以正确的方向插入，有可能拯救下游基因的表达。如果一个插入发生在 $g_1$ 内部且为“正向”方向（即转座子的启动子指向 $g_2$ 和 $g_3$），这个启动子就可以驱动下游基因的转录，从而绕过由插入本身引起的转录阻断。如果转座子以“反向”方向插入，其启动子指向远离下游基因的方向，极性效应则不会被拯救。因此，如果 $g_1$ 是非必需的但 $g_3$ 是必需的，那么在 $g_1$ 中有正向插入的细胞将会存活，而有反向插入的细胞则不会。观察到这种依赖于方向的适应度特征是强有力的证据，表明 $g_1$ 的表观必需性是由对 $g_3$ 的极性效应造成的人为结果。这允许大规模地校正必需性判定。**正确**。\n\nE. 在 $g_1$ 的紧邻下游引入一个强的内在转录终止子，使得 $g_2$ 和 $g_3$ 不再接收来自 $g_1$ 基因座的转录通读，从而阻止极性效应。\n\n这个提议不合逻辑且适得其反。它的操作正是造成转录极性效应的定义，而不是阻止它。在 $g_1$ 之后引入一个强终止子将确保 RNAP 在到达 $g_2$ 和必需基因 $g_3$ 之前终止转录。这将从天然操纵子中废除必需 $g_3$ 蛋白的表达，导致细胞死亡。其宣称的“阻止极性效应”的目标与所提议的机制相矛盾。这个实验将设计出一个致死表型，无法提供关于 $g_1$ 或 $g_2$ 必需性的任何有用信息。**不正确**。\n\nF. 从一个异位基因组位点，在经过调整以匹配其天然表达水平（例如，通过测量信使核糖核酸丰度并调整启动子和核糖体结合位点的强度）的启动子驱动下提供 $g_2$ 和 $g_3$。然后，在 $g_1$ 的天然基因座引入一个早期移码突变，并检测存活性。\n\n这是一个典型的“隔离与互补”策略。通过在一个独立的异位基因座上表达 $g_2$ 和必需基因 $g_3$，细胞得以从天然操纵子上的破坏可能引起的任何极性效应中被拯救出来。在下游必需功能得到保障的情况下，天然的 $g_1$ 基因可以被干净地灭活，例如通过早期移码突变，这是一种创建无效等位基因的可靠方法。所得菌株的存活与否便仅仅取决于 $g_1$ 蛋白本身是否对存活是必需的。提及调整表达水平是一个良好控制的实验的标志，旨在避免因不当的基因剂量引起的人为结果。该方法为 $g_1$ 的必需性提供了一个明确的测试。**正确**。", "answer": "$$\\boxed{ABDF}$$", "id": "2783583"}]}