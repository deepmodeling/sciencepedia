{"hands_on_practices": [{"introduction": "自下而上构建合成细胞的首要挑战是确保所有必需的分子组分都能成功地封装在单个微小囊泡中。由于封装过程的随机性，这个看似简单的任务实际上是一个关键的统计学问题。本练习将引导您使用泊松分布来量化封装的成功率，这是一个预测正确组装的原细胞产量的基本工具。[@problem_id:2717858]", "problem": "您正在通过将 $k$ 种不同的分子组分（例如，一种酶、一个核糖体、一种转移核糖核酸 (tRNA) 和一个基因组片段）共封装到由充分混合的储备池生成的巨大单层囊泡中，来组装一个自下而上组装的最小细胞。进料溶液中组分 $i$ 的摩尔浓度为 $c_i$（单位为 $\\mathrm{mol}\\,\\mathrm{L}^{-1}$），囊泡具有固定的内部水相体积 $V$（单位为 $\\mathrm{L}$）。假设以下基本事实：(i) 分子从储备池中被独立且均匀地取样到每个囊泡中，(ii) 对于给定的组分，封装在囊泡中的分子数量遵循从大型储备池进行独立伯努利取样的泊松极限，以及 (iii) 不同组分独立装载。令 $N_A$ 表示阿伏伽德罗常数（单位为 $\\mathrm{mol}^{-1}$）。\n\n从独立取样的二项分布模型和摩尔浓度的定义出发，推导出一个闭式解析表达式，用以计算一个随机形成的囊泡包含每种 $k$ 个不同组分至少一个拷贝的概率。您的最终表达式必须用 $V$、$\\{c_i\\}_{i=1}^{k}$ 和 $N_A$ 来表示。将最终概率表示为一个无量纲量。无需进行数值计算或四舍五入。", "solution": "对问题陈述进行验证。\n\n**步骤1：提取已知条件**\n- 不同分子组分的数量：$k$。\n- 组分 $i$ 的摩尔浓度：$c_i$（单位为 $\\mathrm{mol}\\,\\mathrm{L}^{-1}$）。\n- 囊泡内部水相体积：$V$（单位为 $\\mathrm{L}$）。\n- 阿伏伽德罗常数：$N_A$（单位为 $\\mathrm{mol}^{-1}$）。\n- 假设 (i)：分子从储备池中被独立且均匀地取样到每个囊泡中。\n- 假设 (ii)：对于给定的组分，封装在囊泡中的分子数量遵循独立伯努利取样的泊松极限。\n- 假设 (iii)：不同组分独立装载。\n- 目标：推导出一个闭式解析表达式，用以计算一个随机形成的囊泡包含每种 $k$ 个不同组分至少一个拷贝的概率，表达式用 $V$、$\\{c_i\\}_{i=1}^{k}$ 和 $N_A$ 表示。\n\n**步骤2：使用提取的已知条件进行验证**\n该问题具有科学依据，提法得当且客观。它描述了统计生物物理学和合成生物学中一个标准且基本的问题，具体涉及分子封装的随机性。所提供的假设是对此类系统建模的标准假设：\n1.  使用摩尔浓度 $c_i$、体积 $V$ 和阿伏伽德罗常数 $N_A$ 是标准化学操作。\n2.  封装分子数服从泊松分布的假设是正确的，并且是二项分布在处理来自大总体（储备池）的稀有事件（封装特定分子）时广泛使用的极限。这在物理上和数学上都是合理的。\n3.  不同组分独立装载的假设是此类模型的常见起点，并使问题易于处理。\n\n该问题不含科学谬误，不基于主观论断，并为得出唯一解提供了所有必要信息。单位是一致的。因此，该问题是有效的。\n\n**步骤3：结论与行动**\n该问题被认定为有效。我们继续进行推导。\n\n目标是找到一个囊泡包含每种 $k$ 个指定组分至少一个分子的概率。我们将此概率表示为 $P_{\\text{success}}$。\n\n我们首先考虑一个单一分子组分，用 $i$ 索引。问题陈述指出，囊泡内该组分的分子数量服从泊松分布。我们必须首先确定该分布的参数，即其均值，通常用 $\\lambda_i$ 表示。均值 $\\lambda_i$ 表示在体积为 $V$ 的囊泡中期望找到的组分 $i$ 的平均分子数。\n\n摩尔浓度 $c_i$ 定义为每升溶液中溶质的摩尔数。因此，数量浓度（每升的分子数）为 $c_i N_A$。在体积 $V$ 中组分 $i$ 的平均分子数是数量浓度与体积的乘积：\n$$ \\lambda_i = (c_i N_A) V $$\n该表达式的单位是 $(\\mathrm{mol} \\cdot \\mathrm{L}^{-1}) \\cdot (\\mathrm{mol}^{-1}) \\cdot (\\mathrm{L})$，结果正确地得到一个表示计数的无量纲量。\n\n令 $n_i$ 为囊泡中组分 $i$ 的分子数量的随机变量。根据问题的假设， $n_i$ 服从均值为 $\\lambda_i$ 的泊松分布。其概率质量函数由下式给出：\n$$ P(n_i = m) = \\frac{\\lambda_i^m \\exp(-\\lambda_i)}{m!} $$\n对于 $m = 0, 1, 2, \\dots$。\n\n我们关心的是囊泡中存在*至少一个*组分 $i$ 分子的事件。这对应于概率 $P(n_i \\ge 1)$。计算其互补事件的概率更为直接，即找到*零个*组分 $i$ 分子的概率，或 $P(n_i = 0)$。\n使用当 $m=0$ 时的泊松概率质量函数：\n$$ P(n_i = 0) = \\frac{\\lambda_i^0 \\exp(-\\lambda_i)}{0!} = \\frac{1 \\cdot \\exp(-\\lambda_i)}{1} = \\exp(-\\lambda_i) $$\n因此，找到至少一个分子的概率是：\n$$ P(n_i \\ge 1) = 1 - P(n_i = 0) = 1 - \\exp(-\\lambda_i) $$\n代入 $\\lambda_i$ 的表达式：\n$$ P(n_i \\ge 1) = 1 - \\exp(-c_i V N_A) $$\n\n问题要求找到一个囊泡包含*每个* $k$ 种不同组分至少一个拷贝的概率。令 $E_i$ 表示囊泡含有至少一个组分 $i$ 的分子的事件。我们寻求联合事件 $P(E_1 \\cap E_2 \\cap \\dots \\cap E_k)$ 的概率。\n\n根据假设(iii)，不同组分的装载是独立的。这意味着事件 $\\{E_i\\}_{i=1}^{k}$ 是相互独立的。对于独立事件，它们交集的概率是它们各自概率的乘积：\n$$ P_{\\text{success}} = P(E_1 \\cap E_2 \\cap \\dots \\cap E_k) = \\prod_{i=1}^{k} P(E_i) $$\n代入我们推导出的 $P(E_i) = P(n_i \\ge 1)$ 的表达式：\n$$ P_{\\text{success}} = \\prod_{i=1}^{k} (1 - \\exp(-c_i V N_A)) $$\n\n这就是随机形成的囊泡包含每种 $k$ 个不同组分至少一个拷贝的概率的最终闭式解析表达式。该表达式用指定的变量 $V$、$\\{c_i\\}_{i=1}^{k}$ 和 $N_A$ 表示，并且它是一个无量纲量，符合概率的要求。", "answer": "$$ \\boxed{\\prod_{i=1}^{k} \\left(1 - \\exp(-c_i V N_A)\\right)} $$", "id": "2717858"}, {"introduction": "一个成功组装的最小细胞需要能量来执行其编程功能，其中蛋白质合成是核心且高能耗的过程之一。要设计一个可持续的系统，我们必须能够量化其能量需求。本练习将通过分析翻译过程中的三磷酸腺苷（$\\text{ATP}$）和三磷酸鸟苷（$\\text{GTP}$）消耗，来精确计算蛋白质合成的能量预算，从而将分子层面的生化反应与合成细胞的宏观功耗联系起来。[@problem_id:2717894]", "problem": "在一个无细胞转录翻译系统中，一个自底向上构建的最小细胞利用所提供的氨基酸和核苷酸合成单一的可溶性蛋白。请利用分子生物学中心法则和已确立的翻译步骤，推导以三磷酸腺苷 ($\\text{ATP}$) 和三磷酸鸟苷 ($\\text{GTP}$) 消耗量表示的能量预算。\n\n基于典型细菌类翻译的假设：\n- 氨酰-tRNA合成酶 (Aminoacyl–transfer RNA (tRNA) synthetases) 利用一个三磷酸腺苷 ($\\text{ATP}$) 分子将每个氨基酸装载到其同源tRNA上，该净反应消耗两个磷酸酐键，因为$\\text{ATP}$被转化为一磷酸腺苷 ($\\text{AMP}$) 和焦磷酸，并且无机焦磷酸酶驱动焦磷酸水解。\n- 核糖体起始消耗一个三磷酸鸟苷 ($\\text{GTP}$) 分子。\n- 每个形成一个肽键的延伸循环需要两个$\\text{GTP}$分子（一个用于三元复合物递送，一个用于易位）。\n- 核糖体终止消耗一个$\\text{GTP}$分子。\n- 忽略上述基线之外的校对、氨基酸回收以及任何其他无效循环。假设在操作条件下，$\\text{ATP}$或$\\text{GTP}$中单个磷酸酐键水解的有效标准自由能是一个常数 $\\Delta G_{p}$。\n\n任务：\n1) 对于一个长度为 $n$ 个氨基酸的蛋白质（因此有 $n-1$ 个肽键），推导每个肽键的精确$\\text{ATP}$和$\\text{GTP}$预算。请以包含 $n$ 的符号表达式形式报告结果，分别给出每个肽键消耗的$\\text{ATP}$分子数和$\\text{GTP}$分子数。\n\n2) 使用您的结果，计算在一个体积为 $V$、混合均匀的囊泡中维持蛋白质合成所需的稳态功率。该囊泡以体积合成速率 $\\dot{c}$（单位为 $\\mathrm{mol}\\ \\mathrm{L}^{-1}\\ \\mathrm{min}^{-1}$）生产该蛋白质。请将功率的最终答案以一个单位为 $\\mathrm{W}$ 的实数表示。\n\n使用以下数值：\n- 蛋白质长度 $n = 300$。\n- 体积 $V = 1.00\\times 10^{-9}\\ \\mathrm{L}$。\n- 体积合成速率 $\\dot{c} = 1.00\\times 10^{-6}\\ \\mathrm{mol}\\ \\mathrm{L}^{-1}\\ \\mathrm{min}^{-1}$。\n- 磷酸酐键水解自由能 $\\Delta G_{p} = 50.0\\times 10^{3}\\ \\mathrm{J}\\ \\mathrm{mol}^{-1}$。\n\n将功率的最终数值答案四舍五入至三位有效数字。以瓦特为单位表示功率。不要报告中间的四舍五入值；在整个推导过程中使用符号，仅在最后代入数值。", "solution": "对问题陈述进行验证。\n\n步骤1：提取已知条件。\n- 功能单元是一个在无细胞转录翻译系统中合成单一类型可溶性蛋白的自底向上构建的最小细胞。\n- 蛋白质长度为 $n$ 个氨基酸，意味着有 $n-1$ 个肽键。\n- 能量消耗基于典型的细菌类翻译。\n- 将每个氨基酸装载到其同源tRNA上消耗一个$\\text{ATP}$分子，该$\\text{ATP}$被转化为$\\text{AMP}$，相当于水解了两个磷酸酐键。\n- 核糖体起始消耗一个$\\text{GTP}$分子。\n- 每个肽键的形成（延伸循环）消耗两个$\\text{GTP}$分子。\n- 核糖体终止消耗一个$\\text{GTP}$分子。\n- 来自$\\text{ATP}$或$\\text{GTP}$的单个磷酸酐键水解的标准自由能是恒定的，记为 $\\Delta G_p$。\n- 提供了以下数值：\n  - 蛋白质长度 $n = 300$。\n  - 囊泡体积 $V = 1.00 \\times 10^{-9}\\ \\mathrm{L}$。\n  - 体积蛋白质合成速率 $\\dot{c} = 1.00 \\times 10^{-6}\\ \\mathrm{mol}\\ \\mathrm{L}^{-1}\\ \\mathrm{min}^{-1}$。\n  - 磷酸酐键水解自由能 $\\Delta G_{p} = 50.0 \\times 10^{3}\\ \\mathrm{J}\\ \\mathrm{mol}^{-1}$。\n\n步骤2：使用提取的已知条件进行验证。\n- **科学依据**：该问题基于分子生物学的既定原理，特别是蛋白质翻译的能量学。指定的$\\text{ATP}$和$\\text{GTP}$成本是原核系统的标准教科书简化模型。\n- **适定性**：该问题是适定的。它明确定义了两个任务：首先，推导能量预算的符号表达式；其次，使用提供的常数计算功率的数值。所提供的信息足以且一致地推导出唯一解。\n- **客观性**：问题以客观、定量的术语陈述，没有主观或含糊的语言。\n\n步骤3：结论与行动。\n该问题被判定为**有效**。它在科学上是合理的、适定的和客观的。将推导解答。\n\n按要求，解答过程分为两部分。\n\n第1部分：$\\text{ATP}$和$\\text{GTP}$预算的推导\n设 $N_{\\text{ATP}}$ 和 $N_{\\text{GTP}}$ 分别为合成一个长度为 $n$ 的蛋白质所消耗的$\\text{ATP}$和$\\text{GTP}$分子数。\n\n$\\text{ATP}$的消耗发生在氨基酸装载过程中。要合成一个含有 $n$ 个氨基酸的蛋白质，必须将 $n$ 个氨基酸活化并装载到它们各自的tRNA上。根据所述假设，每个装载事件消耗一个$\\text{ATP}$分子。\n$$N_{\\text{ATP}} = n$$\n\n$\\text{GTP}$的消耗发生在起始、延伸和终止过程中。\n- 起始需要 $1$ 个$\\text{GTP}$分子。\n- 延伸涉及 $n-1$ 个肽键的形成。每个延伸循环消耗 $2$ 个$\\text{GTP}$分子。延伸过程总共消耗 $2(n-1)$ 个$\\text{GTP}$分子。\n- 终止需要 $1$ 个$\\text{GTP}$分子。\n\n将这些贡献相加，得到消耗的$\\text{GTP}$分子总数：\n$$N_{\\text{GTP}} = 1 + 2(n-1) + 1 = 1 + 2n - 2 + 1 = 2n$$\n\n问题要求计算每个肽键的预算。一个长度为 $n$ 的蛋白质中的肽键数量为 $n-1$。\n\n每个肽键消耗的$\\text{ATP}$分子数为：\n$$\\frac{N_{\\text{ATP}}}{n-1} = \\frac{n}{n-1}$$\n\n每个肽键消耗的$\\text{GTP}$分子数为：\n$$\\frac{N_{\\text{GTP}}}{n-1} = \\frac{2n}{n-1}$$\n这些是第一个任务所要求的每个肽键预算的符号表达式。\n\n第2部分：功率的计算\n功率 $P$ 是能量消耗的速率，由 $\\frac{dE}{dt}$ 给出。为了求出功率，我们首先确定每合成一个蛋白质所消耗的总能量，然后乘以蛋白质的合成速率。\n\n总能量成本由水解的高能磷酸酐键总数决定。\n- $n$ 个$\\text{ATP}$分子中的每一个都水解为$\\text{AMP}$，题目明确指出这等同于水解 $2$ 个磷酸酐键。来自$\\text{ATP}$的总键数：$2n$。\n- $N_{\\text{GTP}} = 2n$ 个$\\text{GTP}$分子中的每一个都水解为GDP，这对应于水解 $1$ 个磷酸酐键。来自$\\text{GTP}$的总键数：$2n$。\n\n每合成一个蛋白质分子所水解的磷酸酐键总数 $N_{\\text{bonds}}$ 为：\n$$N_{\\text{bonds}} = 2n + 2n = 4n$$\n已知每摩尔水解的键的自由能变为 $\\Delta G_{p}$，则每摩尔合成的蛋白质所消耗的总能量 $\\Delta G_{\\text{protein}}$ 为：\n$$\\Delta G_{\\text{protein}} = N_{\\text{bonds}} \\times \\Delta G_{p} = 4n \\Delta G_{p}$$\n蛋白质的合成速率必须以 $\\mathrm{mol}\\ \\mathrm{s}^{-1}$ 为单位表示。给定的体积速率 $\\dot{c}$ 的单位是 $\\mathrm{mol}\\ \\mathrm{L}^{-1}\\ \\mathrm{min}^{-1}$。在体积为 $V$ 的囊泡内，总合成速率（我们记为 $\\dot{N}_{\\text{protein}}$）是 $\\dot{c} \\times V$。\n$$\\dot{N}_{\\text{protein}} = \\dot{c} V$$\n该速率的单位是 $(\\mathrm{mol}\\ \\mathrm{L}^{-1}\\ \\mathrm{min}^{-1}) \\times \\mathrm{L} = \\mathrm{mol}\\ \\mathrm{min}^{-1}$。为了将其转换为 $\\mathrm{mol}\\ \\mathrm{s}^{-1}$，我们除以 $60\\ \\mathrm{s}\\ \\mathrm{min}^{-1}$。\n$$\\dot{N}_{\\text{protein}} (\\mathrm{mol}\\ \\mathrm{s}^{-1}) = \\frac{\\dot{c} V}{60}$$\n功率 $P$ 是每摩尔蛋白质的能量与摩尔合成速率的乘积。\n$$P = \\Delta G_{\\text{protein}} \\times \\dot{N}_{\\text{protein}} (\\mathrm{mol}\\ \\mathrm{s}^{-1})$$\n$$P = (4n \\Delta G_{p}) \\times \\left(\\frac{\\dot{c} V}{60}\\right)$$\n该表达式给出的功率单位为 $(\\mathrm{J}\\ \\mathrm{mol}^{-1}) \\times (\\mathrm{mol}\\ \\mathrm{s}^{-1}) = \\mathrm{J}\\ \\mathrm{s}^{-1} = \\mathrm{W}$。现在我们代入给定的数值：\n- $n = 300$\n- $\\Delta G_{p} = 50.0 \\times 10^{3}\\ \\mathrm{J}\\ \\mathrm{mol}^{-1}$\n- $\\dot{c} = 1.00 \\times 10^{-6}\\ \\mathrm{mol}\\ \\mathrm{L}^{-1}\\ \\mathrm{min}^{-1}$\n- $V = 1.00 \\times 10^{-9}\\ \\mathrm{L}$\n\n$$P = \\frac{4 \\times 300 \\times (50.0 \\times 10^{3}\\ \\mathrm{J}\\ \\mathrm{mol}^{-1}) \\times (1.00 \\times 10^{-6}\\ \\mathrm{mol}\\ \\mathrm{L}^{-1}\\ \\mathrm{min}^{-1}) \\times (1.00 \\times 10^{-9}\\ \\mathrm{L})}{60\\ \\mathrm{s}\\ \\mathrm{min}^{-1}}$$\n$$P = \\frac{(1200) \\times (50.0 \\times 10^{3}) \\times (1.00 \\times 10^{-6}) \\times (1.00 \\times 10^{-9})}{60}\\ \\mathrm{W}$$\n$$P = \\frac{(6.00 \\times 10^{4} \\times 10^{3}) \\times (1.00 \\times 10^{-15})}{60}\\ \\mathrm{W}$$\n$$P = \\frac{6.00 \\times 10^{7} \\times 1.00 \\times 10^{-15}}{60}\\ \\mathrm{W}$$\n$$P = \\frac{6.00 \\times 10^{-8}}{60}\\ \\mathrm{W}$$\n$$P = 0.100 \\times 10^{-8}\\ \\mathrm{W}$$\n$$P = 1.00 \\times 10^{-9}\\ \\mathrm{W}$$\n功率的最终答案，四舍五入到三位有效数字，是 $1.00 \\times 10^{-9}$ 瓦特。", "answer": "$$\\boxed{1.00 \\times 10^{-9}}$$", "id": "2717894"}, {"introduction": "单个的生化反应必须被组织成一个协调的代谢网络，才能实现类似生命的功能，例如生长或目标产物的生成。流量平衡分析（Flux Balance Analysis, FBA）是设计和分析这些网络的强大系统级框架。本练习将指导您从零开始构建一个最小代谢模型，并使用线性规划来预测系统在稳态下的最佳性能，这是代谢工程和合成生物学领域的一项核心技能。[@problem_id:2717904]", "problem": "考虑一个最小细胞的自下而上合成代谢，其中内部代谢物仅限于营养物池 $N$、能量货币 $A$（三磷酸腺苷）和生物质前体 $P$。外部营养物表示为 $N_{\\text{ext}}$，不作为内部代谢物进行追踪。该反应网络由以下五个不可逆反应定义（所有通量均为非负值）：\n\n- 反应 $v_1$：$N_{\\text{ext}} \\rightarrow N$。\n- 反应 $v_2$：$N \\rightarrow A$。\n- 反应 $v_3$：$N + A \\rightarrow P$。\n- 反应 $v_4$：$P + A \\rightarrow \\text{Biomass}$（一个汇反应）。\n- 反应 $v_5$：$A \\rightarrow \\text{ADP}$（非生长相关的三磷酸腺苷维持）。\n\n您的任务如下，仅以质量守恒和稳态为基本出发点：\n\n1) 为内部代谢物（按 ($N, A, P$) 顺序排列）和反应（按 ($v_1, v_2, v_3, v_4, v_5$) 顺序排列）构建化学计量矩阵 $S$，方法是为每个反应在 ($N, A, P$) 上引起的化学计量变化分配一列。\n\n2) 使用质量守恒和稳态假设，推导出内部代谢物的稳态条件 $S\\,v = 0$，其中 $v \\in \\mathbb{R}^5$ 是反应通量向量。\n\n3) 建立一个通量平衡分析（FBA）线性规划，以最大化生物质生产通量。使用目标函数最大化 $v_4$，并满足以下约束条件：\n- 稳态质量平衡约束 $S\\,v = 0$。\n- 对 $i \\in \\{1,2,3,4,5\\}$ 的不可逆性和容量约束 $0 \\le v_i \\le u_i$，但维持约束除外，它施加了下界 $v_5 \\ge m$ 以及上界 $v_5 \\le u_5$。\n\n4) 实现一个程序，为下面的每个测试案例求解此线性规划，并为每个案例返回最优生物质通量 $v_4^\\star$（作为浮点数）。如果线性规划可行，则报告 $v_4$ 的最优值；如果不可行，则报告浮点数 $-1.0$。\n\n物理解释和单位：所有通量都应解释为反应速率，单位为毫摩尔每克干重每小时 (mmol gDW$^{-1}$ h$^{-1}$)。在您的程序输出中，将每个最优值以十进制浮点数形式表示，小数点后恰好保留六位数字（不要打印单位）。\n\n测试套件（每个案例的容量参数）：\n- 案例 A：($u_1,u_2,u_3,u_4,u_5,m$) = (10, 10, 100, 100, 100, 1)。\n- 案例 B：($u_1,u_2,u_3,u_4,u_5,m$) = (100, 5, 100, 100, 100, 1)。\n- 案例 C：($u_1,u_2,u_3,u_4,u_5,m$) = (2, 2, 100, 100, 100, 2)。\n- 案例 D：($u_1,u_2,u_3,u_4,u_5,m$) = (100, 100, 1.5, 100, 100, 0.5)。\n- 案例 E：($u_1,u_2,u_3,u_4,u_5,m$) = (100, 100, 100, 1.234567, 100, 0.123456)。\n\n最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如，“[x,y,z]”），其顺序与上述测试案例相同。每个条目必须以小数点后恰好六位数字的形式打印。这些条目必须对应每个测试案例的最优生物质通量 $v_4^\\star$，仅当优化问题不可行时才使用 $-1.000000$。", "solution": "问题陈述已经过分析，并被认定为有效。这是一个代谢建模领域的适定问题，它基于已确立的质量守恒和稳态分析原理，并且没有科学不准确性或逻辑矛盾。我们现在开始求解。\n\n该问题要求对一个最小合成代谢的通量平衡分析（FBA）模型进行系统性推导和求解。此过程将分为三部分：构建化学计量矩阵、推导稳态条件，以及建立最大化生物质的线性规划问题。\n\n**1. 构建化学计量矩阵 $S$**\n\n化学计量矩阵，记为 $S$，表示生化网络中代谢物和反应之间的定量关系。$S$ 的维度是 $m \\times n$，其中 $m$ 是内部代谢物的数量，$n$ 是反应的数量。对于本系统，我们有 $m=3$ 种内部代谢物，按 ($N, A, P$) 顺序排列，以及 $n=5$ 个反应，其通量按 ($v_1, v_2, v_3, v_4, v_5$) 顺序排列。矩阵的第 $ij$ 个元素 $S_{ij}$ 是代谢物 $i$ 在反应 $j$ 中的化学计量系数。按照惯例，反应物的系数为负，产物的系数为正。\n\n我们逐列构建矩阵，每一列对应一个反应向量。\n\n- **反应 $v_1$：** $N_{\\text{ext}} \\rightarrow N$。该反应产生一个 $N$ 分子。代谢物数量的变化为 $(+1, 0, 0)$。$S$ 的第一列是 $\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}$。\n\n- **反应 $v_2$：** $N \\rightarrow A$。该反应消耗一个 $N$ 分子，产生一个 $A$ 分子。变化为 $(-1, +1, 0)$。$S$ 的第二列是 $\\begin{pmatrix} -1 \\\\ 1 \\\\ 0 \\end{pmatrix}$。\n\n- **反应 $v_3$：** $N + A \\rightarrow P$。该反应消耗一个 $N$ 分子和一个 $A$ 分子，产生一个 $P$ 分子。变化为 $(-1, -1, +1)$。$S$ 的第三列是 $\\begin{pmatrix} -1 \\\\ -1 \\\\ 1 \\end{pmatrix}$。\n\n- **反应 $v_4$：** $P + A \\rightarrow \\text{Biomass}$。这个汇反应消耗一个 $P$ 分子和一个 $A$ 分子。变化为 $(0, -1, -1)$。$S$ 的第四列是 $\\begin{pmatrix} 0 \\\\ -1 \\\\ -1 \\end{pmatrix}$。\n\n- **反应 $v_5$：** $A \\rightarrow \\text{ADP}$。这个非生长相关的维持反应消耗一个 $A$ 分子。变化为 $(0, -1, 0)$。$S$ 的第五列是 $\\begin{pmatrix} 0 \\\\ -1 \\\\ 0 \\end{pmatrix}$。\n\n将这些列组合起来，得到完整的 $3 \\times 5$ 化学计量矩阵 $S$：\n$$\nS = \\begin{pmatrix}\n1 & -1 & -1 & 0 & 0 \\\\\n0 & 1 & -1 & -1 & -1 \\\\\n0 & 0 & 1 & -1 & 0\n\\end{pmatrix}\n$$\n\n**2. 推导稳态条件**\n\n质量守恒原理指出，任何代谢物浓度的变化率等于所有产生它的反应速率之和，减去所有消耗它的反应速率之和。设 $\\mathbf{c} = [N, A, P]^T$ 为内部代谢物浓度向量，$\\mathbf{v} = [v_1, v_2, v_3, v_4, v_5]^T$ 为反应通量向量。系统的动力学由以下常微分方程组描述：\n$$\n\\frac{d\\mathbf{c}}{dt} = S \\mathbf{v}\n$$\n稳态假设假定内部代谢物的浓度不随时间变化。这是代谢建模中一个常见而有力的简化，它假设细胞内部环境达到平衡的速度远快于细胞生长或环境变化的速度。在数学上，该假设表示为：\n$$\n\\frac{d\\mathbf{c}}{dt} = \\mathbf{0}\n$$\n其中 $\\mathbf{0}$ 是适当维度的零向量（在本例中，$\\mathbf{0} \\in \\mathbb{R}^3$）。将此代入动力学方程，我们得到 FBA 的基本稳态质量平衡约束：\n$$\nS \\mathbf{v} = \\mathbf{0}\n$$\n这是一个线性方程组，它约束了稳态下通量向量 $\\mathbf{v}$ 的可能取值。\n\n**3. 建立通量平衡分析（FBA）线性规划**\n\nFBA 将寻找一个优化特定细胞目标的可行通量分布的问题，构建为一个线性规划（LP）问题。此处，目标是最大化生物质生产通量 $v_4$。\n\n该 LP 的公式化如下：\n\n**目标函数：**\n最大化 $v_4$。这等价于最大化线性函数 $f(\\mathbf{v}) = \\mathbf{c}_{obj}^T \\mathbf{v}$，其中 $\\mathbf{c}_{obj} = [0, 0, 0, 1, 0]^T$。\n\n**约束条件：**\n1.  **稳态质量平衡：** 通量向量 $\\mathbf{v}$ 必须满足先前推导出的稳态条件。\n    $$S \\mathbf{v} = \\mathbf{0}$$\n    这展开为以下三个线性方程组：\n    - 对于代谢物 $N$：$v_1 - v_2 - v_3 = 0$\n    - 对于代谢物 $A$：$v_2 - v_3 - v_4 - v_5 = 0$\n    - 对于代谢物 $P$：$v_3 - v_4 = 0$\n\n2.  **通量边界和不可逆性：** 所有反应都被定义为不可逆的，意味着它们的通量必须为非负值（$v_i \\ge 0$）。此外，每个通量 $v_i$ 都受到一个容量上界约束 $u_i$ 的限制。维持通量 $v_5$ 有一个特定的下界 $m$，代表与生长无关的细胞功能所需的最小能量消耗。\n    - $0 \\le v_1 \\le u_1$\n    - $0 \\le v_2 \\le u_2$\n    - $0 \\le v_3 \\le u_3$\n    - $0 \\le v_4 \\le u_4$\n    - $m \\le v_5 \\le u_5$\n\n标准的 LP 求解器通常解决最小化问题。要使用此类求解器，我们通过将目标函数取反，将我们的最大化问题重构为最小化问题。\n\n**标准 LP 公式（用于最小化）：**\n\n最小化：$-v_4$（或 $\\mathbf{c}^T \\mathbf{v}$，其中 $\\mathbf{c} = [0, 0, 0, -1, 0]^T$）\n\n约束条件：\n- 等式约束：$A_{eq} \\mathbf{v} = \\mathbf{b}_{eq}$，其中 $A_{eq} = S$ 且 $\\mathbf{b}_{eq} = [0, 0, 0]^T$。\n- 边界约束：$\\mathbf{v}_{lb} \\le \\mathbf{v} \\le \\mathbf{v}_{ub}$，其中\n  - $\\mathbf{v}_{lb} = [0, 0, 0, 0, m]^T$\n  - $\\mathbf{v}_{ub} = [u_1, u_2, u_3, u_4, u_5]^T$\n\n这个完全指定的 LP 可以使用标准的数值优化软件来求解，以找到最优通量向量 $\\mathbf{v}^\\star$ 和相应的最大生物质通量 $v_4^\\star$。如果约束条件不一致（例如，如果 $m > u_5$，或者营养物摄取限制 $u_1, u_2$ 不足以支持维持通量 $m$），则 LP 将是不可行的。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves the Flux Balance Analysis (FBA) linear program for a minimal\n    cell model under different parameter sets.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each tuple contains parameters (u1, u2, u3, u4, u5, m).\n    test_cases = [\n        (10, 10, 100, 100, 100, 1),\n        (100, 5, 100, 100, 100, 1),\n        (2, 2, 100, 100, 100, 2),\n        (100, 100, 1.5, 100, 100, 0.5),\n        (100, 100, 100, 1.234567, 100, 0.123456),\n    ]\n\n    # Objective function: Minimize -v4 to maximize v4.\n    # The flux vector v is [v1, v2, v3, v4, v5].\n    c_obj = np.array([0, 0, 0, -1, 0])\n\n    # Stoichiometric matrix S, used for equality constraints S*v = 0.\n    # Rows correspond to metabolites (N, A, P).\n    # Columns correspond to reactions (v1, v2, v3, v4, v5).\n    S_matrix = np.array([\n        [1, -1, -1, 0, 0],  # dN/dt = v1 - v2 - v3\n        [0, 1, -1, -1, -1], # dA/dt = v2 - v3 - v4 - v5\n        [0, 0, 1, -1, 0]    # dP/dt = v3 - v4\n    ])\n\n    # Right-hand side of the equality constraints, which is the zero vector.\n    b_eq = np.array([0, 0, 0])\n\n    results = []\n    for case in test_cases:\n        u1, u2, u3, u4, u5, m = case\n\n        # Define the bounds for each flux variable for the current case.\n        # Format is a list of (lower_bound, upper_bound) tuples.\n        flux_bounds = [\n            (0, u1),          # 0 <= v1 <= u1\n            (0, u2),          # 0 <= v2 <= u2\n            (0, u3),          # 0 <= v3 <= u3\n            (0, u4),          # 0 <= v4 <= u4\n            (m, u5)           # m <= v5 <= u5\n        ]\n\n        # Solve the linear program using the 'highs' solver, which is robust.\n        res = linprog(c=c_obj, \n                      A_eq=S_matrix, \n                      b_eq=b_eq, \n                      bounds=flux_bounds, \n                      method='highs')\n\n        # Check if the optimization was successful.\n        # res.success is True if an optimal solution was found.\n        if res.success:\n            # The objective was to minimize -v4, so the maximum v4 is -res.fun.\n            # The solver should respect bounds, making v4 non-negative.\n            # A small tolerance check is added for robustness against\n            # floating point noise around zero.\n            optimal_v4 = -res.fun\n            if optimal_v4 < 1e-9:\n                optimal_v4 = 0.0\n            results.append(optimal_v4)\n        else:\n            # If res.success is False, the problem is likely infeasible\n            # (or another issue occurred). As per the problem statement,\n            # report -1.0 for an infeasible problem.\n            results.append(-1.0)\n\n    # Format the results into the required single-line string format.\n    # Each result is formatted as a float with exactly six decimal places.\n    output_str = f\"[{','.join([f'{r:.6f}' for r in results])}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2717904"}]}