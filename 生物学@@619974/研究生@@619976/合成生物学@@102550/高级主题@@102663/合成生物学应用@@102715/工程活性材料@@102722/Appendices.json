{"hands_on_practices": [{"introduction": "工程化的生命材料通常需要对多种环境信号进行精确响应，这依赖于设计精巧的基因线路。本练习探讨了一个生物“与”逻辑门的设计，该设计可被用于智能生物传感器中，只有当两种条件（例如，高细胞密度和特定的感染标志物）同时满足时，才会产生输出信号。通过这个练习，你将学习如何运用希尔函数来量化分析这类基因线路的输入-输出行为，这是构建复杂生物功能的基础。[@problem_id:2034646]", "problem": "一种经过工程改造的细菌被设计用作生物“与”逻辑门，应用于智能绷带。只有当两个条件同时满足时，该细菌才会通过表达绿色荧光蛋白 (GFP) 产生荧光信号：高细胞密度（表明生物膜已良好形成，输入1）和存在与感染相关的特定化学标志物，该标志物充当诱导剂 $I$（输入2）。\n\n高细胞密度通过群体感应机制来感知，该机制由细菌自身产生的信号分子 $Q$ 介导。GFP的稳态浓度，记作 $[GFP]$，可以通过以下方程建模，该方程考虑了诱导剂 $I$ 和群体感应分子 $Q$ 的共同激活作用：\n\n$$ [GFP] = G_{max} \\left( \\frac{[I]^{n_I}}{K_I^{n_I} + [I]^{n_I}} \\right) \\left( \\frac{[Q]^{n_Q}}{K_Q^{n_Q} + [Q]^{n_Q}} \\right) $$\n\n该特定遗传回路的参数如下：\n- $G_{max} = 500$ nM（最大可能GFP浓度）\n- $K_I = 20.0$ µM（诱导剂 $I$ 的半最大激活浓度）\n- $n_I = 2.0$（诱导剂 $I$ 的希尔系数）\n- $K_Q = 100$ nM（分子 $Q$ 的半最大激活浓度）\n- $n_Q = 4.0$（分子 $Q$ 的希尔系数）\n\n假设绷带上的生物膜已经成熟，细菌培养物已达到非常高的密度。在此状态下，群体感应分子 $Q$ 的浓度处于饱和状态，即 $[Q]$ 远大于 $K_Q$。\n\n在这些高密度条件下，计算达到 375 nM 的稳态GFP浓度所需的诱导剂 $I$ 的最低浓度。答案以 µM 为单位，并四舍五入到三位有效数字。", "solution": "GFP 的稳态模型由下式给出：\n$$[GFP]=G_{\\max}\\left(\\frac{[I]^{n_{I}}}{K_{I}^{n_{I}}+[I]^{n_{I}}}\\right)\\left(\\frac{[Q]^{n_{Q}}}{K_{Q}^{n_{Q}}+[Q]^{n_{Q}}}\\right).$$\n在高密度条件下，$[Q]\\gg K_{Q}$，因此群体感应激活项达到饱和：\n$$\\frac{[Q]^{n_{Q}}}{K_{Q}^{n_{Q}}+[Q]^{n_{Q}}}\\approx 1.$$\n因此，\n$$[GFP]=G_{\\max}\\left(\\frac{[I]^{n_{I}}}{K_{I}^{n_{I}}+[I]^{n_{I}}}\\right).$$\n通过下式定义所需的分数激活 $f$：\n$$f=\\frac{[GFP]}{G_{\\max}}.$$\n当 $G_{\\max}=500\\ \\text{nM}$ 时，要达到 $[GFP]=375\\ \\text{nM}$，我们需要：\n$$f=\\frac{375}{500}=\\frac{3}{4}.$$\n为简洁起见，令 $n_{I}=2$ 并将 $[I]$ 记为 $I$。希尔激活满足：\n$$f=\\frac{I^{n_{I}}}{K_{I}^{n_{I}}+I^{n_{I}}}.$$\n求解 $I$：\n\\begin{align*}\nf\\left(K_{I}^{n_{I}}+I^{n_{I}}\\right)&=I^{n_{I}},\\\\\nfK_{I}^{n_{I}}&=I^{n_{I}}(1-f),\\\\\nI^{n_{I}}&=\\left(\\frac{f}{1-f}\\right)K_{I}^{n_{I}},\\\\\nI&=K_{I}\\left(\\frac{f}{1-f}\\right)^{\\frac{1}{n_{I}}}.\n\\end{align*}\n代入 $f=\\frac{3}{4}$ 和 $n_{I}=2$：\n$$I=K_{I}\\left(\\frac{\\frac{3}{4}}{1-\\frac{3}{4}}\\right)^{\\frac{1}{2}}=K_{I}\\left(\\frac{3}{1}\\right)^{\\frac{1}{2}}=K_{I}\\sqrt{3}.$$\n当 $K_{I}=20.0\\ \\mu\\text{M}$ 时,\n$$I=20.0\\sqrt{3}\\ \\mu\\text{M}\\approx 34.641\\ \\mu\\text{M}.$$\n四舍五入到三位有效数字得到 $34.6\\ \\mu\\text{M}$。因为希尔函数是关于 $I$ 的单调递增函数，所以在 $[Q]$ 饱和的条件下，这是达到目标 GFP 水平所需的最小 $[I]$。", "answer": "$$\\boxed{34.6}$$", "id": "2034646"}, {"introduction": "将经过基因改造的微生物应用于现实世界时，生物安全是首要考虑的设计原则。本练习模拟了一种常见的生物遏制策略——“自毁开关”，即工程菌株被设计成依赖一种环境中不存在的特殊营养物质才能存活。这个练习将让你通过建立种群动态模型，来定量评估自毁开关在防止工程微生物意外泄漏时的有效性，这是负责任的工程设计中不可或缺的一环。[@problem_id:2034666]", "problem": "一种工程菌被设计用于一种能自我修复的先进工程活体材料（ELM）。为确保生物遏制，其中植入了一种“死亡开关”机制。该机制使细菌对一种特定的非天然氨基酸（我们称之为Synthamine）呈营养缺陷型。只有在ELM内部外部供应Synthamine时，该细菌才能生长和分裂。\n\n该细菌的种群动态可以用以下微分方程来建模：\n$$\n\\frac{dN}{dt} = \\left( \\mu_{\\text{max}} \\frac{C}{K_C + C} - k_d \\right) N\n$$\n其中，$N$ 是细菌浓度（单位：细胞/毫升），$t$ 是时间（单位：小时），$C$ 是Synthamine的浓度（单位：µM），$\\mu_{\\text{max}}$ 是最大比生长速率，$K_C$ 是Synthamine的半饱和常数，$k_d$ 是比死亡速率常数。\n\n对于该工程菌株，通过实验确定了以下参数：\n- 最大比生长速率, $\\mu_{\\text{max}} = 0.80 \\text{ hr}^{-1}$\n- 半饱和常数, $K_C = 15 \\text{ µM}$\n- 比死亡速率常数, $k_d = 0.35 \\text{ hr}^{-1}$\n\n如果一小块ELM受损，细菌被释放到自然环境中，那里的Synthamine浓度有效为零，它们将开始消亡。计算逃逸的细菌种群浓度从释放瞬间的初始浓度降至其0.5%所需的时间。\n\n答案以小时为单位，并四舍五入到三位有效数字。", "solution": "当细菌被释放到Synthamine浓度有效为零的环境中时，设 $C=0$。Monod生长项变为 $\\mu_{\\text{max}} \\frac{C}{K_{C}+C}=\\mu_{\\text{max}} \\frac{0}{K_{C}+0}=0$，因此净比速率简化为 $-k_{d}$。种群动态变为\n$$\n\\frac{dN}{dt}=-k_{d}N.\n$$\n分离变量并从 $N(0)=N_{0}$ 到 $N(t)$ 进行积分：\n$$\n\\int_{N_{0}}^{N(t)} \\frac{dN}{N}=\\int_{0}^{t} -k_{d}\\, dt,\n$$\n得到\n$$\n\\ln\\!\\left(\\frac{N(t)}{N_{0}}\\right)=-k_{d} t.\n$$\n因此，\n$$\nN(t)=N_{0}\\,\\exp(-k_{d} t).\n$$\n我们要求解时间 $t$ 使得 $N(t)/N_{0}=0.005$。代入并求解：\n$$\n0.005=\\exp(-k_{d} t)\\;\\;\\Rightarrow\\;\\; \\ln(0.005)=-k_{d} t\\;\\;\\Rightarrow\\;\\; t=-\\frac{1}{k_{d}}\\ln(0.005)=\\frac{1}{k_{d}}\\ln\\!\\left(\\frac{1}{0.005}\\right)=\\frac{\\ln(200)}{k_{d}}.\n$$\n当 $k_{d}=0.35\\ \\text{hr}^{-1}$ 时，\n$$\nt=\\frac{\\ln(200)}{0.35}\\ \\text{hr}\\approx \\frac{5.298317}{0.35}\\ \\text{hr}\\approx 15.1\\ \\text{hr}\n$$\n四舍五入到三位有效数字。", "answer": "$$\\boxed{15.1}$$", "id": "2034666"}, {"introduction": "为了最大化工程生命材料的生产效率，我们必须将视角从单个基因线路提升到整个细胞的代谢网络层面。本练习介绍了一种强大的计算方法——流平衡分析 (Flux Balance Analysis, FBA)，用于优化细胞生产目标产物（如基质前体）的通量。通过将细胞代谢网络构建为一个线性规划问题，你将亲手实践如何预测最大生产速率，并解读“影子价格” (shadow prices) 等关键结果，以识别限制生产的营养瓶颈。[@problem_id:2731583]", "problem": "您正在设计一种能够分泌聚合物基质前体的工程活体材料 (ELM)。生产细胞使用流通平衡分析 (FBA) 进行建模，其简化的化学计量网络涵盖了有氧呼吸、无氧发酵、基质前体生物合成与分泌以及三磷酸腺苷 (ATP) 维持。假设所有内部代谢物均处于稳态，且约束为线性。您的任务是计算基质前体的最大分泌通量，并计算影子价格，以量化哪些营养物摄取上限限制了此最大通量。\n\n使用以下反应网络，其中包含内部代谢物 $\\mathrm{GLC_i}$ (细胞内葡萄糖)、$\\mathrm{NH4_i}$ (细胞内铵)、$\\mathrm{O2_i}$ (细胞内氧)、$\\mathrm{ATP}$、$\\mathrm{ADP}$、$\\mathrm{Pi}$ (无机磷酸盐)、$\\mathrm{M_i}$ (细胞内基质前体)、$\\mathrm{CO2_i}$ (细胞内二氧化碳) 和 $\\mathrm{B_i}$ (细胞内通用发酵副产物)。所有通量 $v_j$ 的单位均为 mmol gDW⁻¹ h⁻¹ (毫摩尔每克干重每小时)。最终报告通量数值时无需包含单位。\n\n反应（所有通量 $v_j \\ge 0$，除非另有界定）：\n- 葡萄糖摄取：$v_1: \\varnothing \\rightarrow \\mathrm{GLC_i}$，边界为 $0 \\le v_1 \\le G_{\\max}$。\n- 铵摄取：$v_2: \\varnothing \\rightarrow \\mathrm{NH4_i}$，边界为 $0 \\le v_2 \\le N_{\\max}$。\n- 氧气摄取：$v_3: \\varnothing \\rightarrow \\mathrm{O2_i}$，边界为 $0 \\le v_3 \\le O_{\\max}$。\n- 有氧呼吸 (ATP 生成)：$v_4: \\mathrm{GLC_i} + 6\\,\\mathrm{O2_i} + 20\\,\\mathrm{ADP} + 20\\,\\mathrm{Pi} \\rightarrow 6\\,\\mathrm{CO2_i} + 20\\,\\mathrm{ATP}$。\n- ATP 维持：$v_5: \\mathrm{ATP} \\rightarrow \\mathrm{ADP} + \\mathrm{Pi}$，边界为 $v_5 \\ge m_{\\mathrm{ATP}}$。\n- 无氧发酵 (ATP 生成)：$v_6: \\mathrm{GLC_i} + 2\\,\\mathrm{ADP} + 2\\,\\mathrm{Pi} \\rightarrow \\mathrm{B_i} + 2\\,\\mathrm{ATP}$。\n- 基质前体生物合成：$v_7: \\mathrm{GLC_i} + \\mathrm{NH4_i} + 2\\,\\mathrm{ATP} \\rightarrow \\mathrm{M_i} + 2\\,\\mathrm{ADP} + 2\\,\\mathrm{Pi} + \\mathrm{CO2_i}$。\n- 基质前体分泌：$v_8: \\mathrm{M_i} \\rightarrow \\varnothing$。\n- 发酵副产物分泌：$v_9: \\mathrm{B_i} \\rightarrow \\varnothing$。\n- 二氧化碳分泌：$v_{10}: \\mathrm{CO2_i} \\rightarrow \\varnothing$。\n\n对每种内部代谢物 $k$ 施加稳态质量平衡，使化学计量矩阵 $S \\in \\mathbb{R}^{9 \\times 10}$ 和通量向量 $v \\in \\mathbb{R}^{10}$ 满足 $S v = 0$。目标是最大化基质前体分泌通量 $v_8$。\n\n将此问题构建为一个线性规划问题，目标是最小化 $-v_8$，约束条件为 $S v = 0$ 以及上述指定的通量边界，其中 $G_{\\max}$, $N_{\\max}$, $O_{\\max}$ 和 $m_{\\mathrm{ATP}}$ 是给定参数。所有通量必须以浮点数形式报告数值。\n\n对每个营养物摄取上界定义资源影子价格如下。令 $\\lambda_k^{\\mathrm{up}}$ 表示在最小化 $-v_8$ 的问题中，与 $v_k$ (对于 $k \\in \\{1,2,3\\}$，即葡萄糖、铵、氧气) 的上界相关的对偶边际值。资源影子价格为 $\\sigma_k = \\max(0, -\\lambda_k^{\\mathrm{up}})$。该值等于相应摄取极限每发生一次边际松弛时，最优 $v_8$ 的边际增加量，其单位为 $v_8$ 的 mmol gDW⁻¹ h⁻¹ / 营养物上界增加的 mmol gDW⁻¹ h⁻¹。\n\n您必须实现一个求解器，该求解器能够：\n- 根据上述反应构建 $S$。\n- 针对每个测试用例，求解线性规划以获得最优 $v_8$ 并计算 $\\sigma_1$, $\\sigma_2$, 和 $\\sigma_3$。\n- 将报告的每个浮点数四舍五入到 $6$ 位小数。\n\n测试套件 (每个元组为 $(G_{\\max}, N_{\\max}, O_{\\max}, m_{\\mathrm{ATP}})$):\n- 用例 A: $(10, 2, 15, 8)$。\n- 用例 B: $(10, 100, 3, 8)$。\n- 用例 C: $(3, 100, 100, 50)$。\n- 用例 D: $(5, 1.2, 0, 2)$。\n\n作为最终答案，请提交一个单行字符串，其内容为 Python 风格的列表嵌套列表。每个内部列表对应一个测试用例（按A、B、C、D顺序排列），并包含四个浮点数：$[v_8^\\star, \\sigma_1, \\sigma_2, \\sigma_3]$。例如，输出应具有以下结构：\n- $[[x_{A1}, x_{A2}, x_{A3}, x_{A4}], [x_{B1}, x_{B2}, x_{B3}, x_{B4}], [x_{C1}, x_{C2}, x_{C3}, x_{C4}], [x_{D1}, x_{D2}, x_{D3}, x_{D4}]]$,\n其中每个 $x_{\\cdot}$ 是一个四舍五入到 $6$ 位小数的浮点数。", "solution": "该问题要求使用流通平衡分析 (FBA) 对简化的代谢网络，确定基质前体的最大分泌通量及相关的资源影子价格。该问题作为一个线性规划 (LP) 问题是科学上有效且适定的。解决方案首先根据所提供的生化反应构建数学模型，然后针对每个指定的参数集求解生成的 LP 问题。\n\n**1. 流通平衡分析 (FBA) 公式化**\n\nFBA 是一种数学方法，用于预测生物系统在稳态下的代谢通量。FBA 的核心是质量平衡约束，它规定对于每种内部代谢物，其生成速率必须等于其消耗速率。这通过方程 $Sv = 0$ 来表示，其中 $S$ 是化学计量矩阵，$v$ 是反应通量向量。\n\n该系统由 $9$ 种内部代谢物和 $10$ 个反应定义。这些代谢物按顺序为：$\\mathrm{GLC_i}$、$\\mathrm{NH4_i}$、$\\mathrm{O2_i}$、$\\mathrm{ATP}$、$\\mathrm{ADP}$、$\\mathrm{Pi}$、$\\mathrm{M_i}$、$\\mathrm{CO2_i}$ 和 $\\mathrm{B_i}$。反应是通量 $v_1$ 到 $v_{10}$。\n\n化学计量矩阵 $S \\in \\mathbb{R}^{9 \\times 10}$ 是通过用反应 $j$ 中代谢物 $i$ 的化学计量系数填充每个条目 $S_{ij}$ 来构建的。反应物被赋予负系数，生成物被赋予正系数。根据提供的反应列表，矩阵 $S$ 为：\n$$\nS = \\begin{pmatrix}\n1 & 0 & 0 & -1 & 0 & -1 & -1 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 & 0 & -1 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & -6 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 20 & -1 & 2 & -2 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & -20 & 1 & -2 & 2 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & -20 & 1 & -2 & 2 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 1 & -1 & 0 & 0 \\\\\n0 & 0 & 0 & 6 & 0 & 0 & 1 & 0 & 0 & -1 \\\\\n0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & -1 & 0\n\\end{pmatrix}\n$$\n注意，对应于 $\\mathrm{ADP}$ 和 $\\mathrm{Pi}$ 的行是相同的，这表明约束中存在线性相关性。这在生物化学上是合理的，并且标准的 LP 求解器可以正确处理。\n\n**2. 线性规划问题**\n\n目标是最大化基质前体分泌通量 $v_8$。这等同于最小化 $-v_8$。因此，该问题被公式化为以下 LP：\n\n**最小化：**\n$$ c^T v = -v_8 $$\n其中目标向量 $c \\in \\mathbb{R}^{10}$ 是 $c = [0, 0, 0, 0, 0, 0, 0, -1, 0, 0]^T$。\n\n**约束条件：**\n\n1.  **稳态约束：**\n    $$ Sv = 0 $$\n    其中 $0$ 是 $\\mathbb{R}^9$ 中的零向量。\n\n2.  **通量边界：**\n    $$ 0 \\le v_1 \\le G_{\\max} $$\n    $$ 0 \\le v_2 \\le N_{\\max} $$\n    $$ 0 \\le v_3 \\le O_{\\max} $$\n    $$ v_5 \\ge m_{\\mathrm{ATP}} $$\n    $$ v_j \\ge 0 \\quad \\text{for } j \\in \\{4, 6, 7, 8, 9, 10\\} $$\n\n这些约束定义了代谢状态的可行空间。LP 求解器在此空间内找到一个通量向量 $v$，该向量使目标函数最小化，从而提供最大通量 $v_8^*$。\n\n**3. 影子价格计算**\n\n资源的影子价格量化了最优目标值如何随着该资源可用性的边际变化而变化。在此背景下，我们关心的是与营养物摄取通量 $v_1$、$v_2$ 和 $v_3$ 上界相关的影子价格。\n\n对于一个最小化问题，与上界约束 $v_k \\le U_k$ 相关的对偶变量（或边际值）$\\lambda_k^{\\mathrm{up}}$ 代表最优目标值相对于 $U_k$ 增加的变化率。即 $\\lambda_k^{\\mathrm{up}} = \\frac{\\partial(\\text{min obj})}{\\partial U_k}$。在我们的案例中，目标是 $-v_8^*$，所以：\n$$ \\lambda_k^{\\mathrm{up}} = \\frac{\\partial(-v_8^*)}{\\partial U_k} = -\\frac{\\partial v_8^*}{\\partial U_k} $$\n问题将资源影子价格定义为 $\\sigma_k = \\max(0, -\\lambda_k^{\\mathrm{up}})$。代入 $\\lambda_k^{\\mathrm{up}}$ 的表达式：\n$$ \\sigma_k = \\max\\left(0, -\\left(-\\frac{\\partial v_8^*}{\\partial U_k}\\right)\\right) = \\max\\left(0, \\frac{\\partial v_8^*}{\\partial U_k}\\right) $$\n这证实了问题的解释：$\\sigma_k$ 是指营养物摄取极限 $U_k$ 每增加一个单位，最大生产通量 $v_8^*$ 的边际增加量。如果摄取极限不是生产的瓶颈，则该值为零。\n\n这些对偶边际值从对偶 LP 问题的解中获得，像 `scipy.optimize.linprog` 中的 'highs' 方法这样的求解器会自动计算。\n\n**4. 算法实现**\n\n该解决方案使用 `numpy` 和 `scipy` 库以 Python 实现。\n1.  将化学计量矩阵 $S$ 和目标向量 $c$ 定义为 `numpy` 数组。\n2.  循环遍历每个测试用例 $(G_{\\max}, N_{\\max}, O_{\\max}, m_{\\mathrm{ATP}})$。\n3.  对每个用例，为每个通量 $v_j$ 构建一个边界列表。\n    - $v_1$ 的边界为 `(0, G_max)`。\n    - $v_2$ 的边界为 `(0, N_max)`。\n    - $v_3$ 的边界为 `(0, O_max)`。\n    - $v_5$ 的边界为 `(m_ATP, None)`。\n    - 所有其他通量的边界为 `(0, None)`，其中 `None` 代表无穷大。\n4.  调用 `scipy.optimize.linprog` 函数，传入 $c$、$S$ (作为 `A_eq`)、一个零向量 (作为 `b_eq`) 和构建的边界。使用 `'highs'` 方法以确保能够访问边界的对偶变量。\n5.  从结果对象 `res` 中，获取最大通量为 $v_8^* = -res.fun$。\n6.  从 `res.upper.marginals[0]`、`res.upper.marginals[1]` 和 `res.upper.marginals[2]` 中分别检索 $v_1, v_2, v_3$ 上界的对偶边际值。这些对应于 $\\lambda_1^{\\mathrm{up}}, \\lambda_2^{\\mathrm{up}}, \\lambda_3^{\\mathrm{up}}$。\n7.  使用公式 $\\sigma_k = \\max(0, -\\lambda_k^{\\mathrm{up}})$ 计算影子价格 $\\sigma_k$。\n8.  将所得值 ($v_8^*, \\sigma_1, \\sigma_2, \\sigma_3$) 四舍五入到 $6$ 位小数，并收集起来用于最终输出。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves the Flux Balance Analysis problem for maximal matrix precursor secretion.\n    \"\"\"\n    \n    # Stoichiometric matrix S (9 metabolites x 10 reactions)\n    # Metabolites: GLCi, NH4i, O2i, ATP, ADP, Pi, Mi, CO2i, Bi\n    # Reactions: v1-v10\n    S = np.array([\n    #    v1, v2, v3, v4, v5, v6, v7, v8, v9, v10\n        [ 1,  0,  0, -1,  0, -1, -1,  0,  0,  0],  # GLC_i\n        [ 0,  1,  0,  0,  0,  0, -1,  0,  0,  0],  # NH4_i\n        [ 0,  0,  1, -6,  0,  0,  0,  0,  0,  0],  # O2_i\n        [ 0,  0,  0, 20, -1,  2, -2,  0,  0,  0],  # ATP\n        [ 0,  0,  0,-20,  1, -2,  2,  0,  0,  0],  # ADP\n        [ 0,  0,  0,-20,  1, -2,  2,  0,  0,  0],  # Pi\n        [ 0,  0,  0,  0,  0,  0,  1, -1,  0,  0],  # M_i\n        [ 0,  0,  0,  6,  0,  0,  1,  0,  0, -1],  # CO2_i\n        [ 0,  0,  0,  0,  0,  1,  0,  0, -1,  0]   # B_i\n    ])\n\n    # Objective function: maximize v8, which is to minimize -v8\n    c = np.array([0, 0, 0, 0, 0, 0, 0, -1, 0, 0])\n\n    # Steady-state constraint Sv = 0\n    b_eq = np.zeros(S.shape[0])\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (G_max, N_max, O_max, m_ATP)\n        (10, 2, 15, 8),   # Case A\n        (10, 100, 3, 8),  # Case B\n        (3, 100, 100, 50),# Case C\n        (5, 1.2, 0, 2)    # Case D\n    ]\n\n    all_results = []\n    \n    for case in test_cases:\n        G_max, N_max, O_max, m_ATP = case\n        \n        # Define flux bounds for the current case\n        bounds = [\n            (0, G_max),    # v1: Glucose uptake\n            (0, N_max),    # v2: Ammonium uptake\n            (0, O_max),    # v3: Oxygen uptake\n            (0, None),     # v4: Aerobic respiration\n            (m_ATP, None), # v5: ATP maintenance\n            (0, None),     # v6: Anaerobic fermentation\n            (0, None),     # v7: Matrix precursor biosynthesis\n            (0, None),     # v8: Matrix precursor secretion\n            (0, None),     # v9: Byproduct secretion\n            (0, None)      # v10: CO2 secretion\n        ]\n\n        # Solve the linear program\n        res = linprog(c=c, A_eq=S, b_eq=b_eq, bounds=bounds, method='highs')\n\n        if not res.success:\n            # Handle cases where solver fails, though not expected for these parameters\n            v8_star = 0.0\n            sigma_1, sigma_2, sigma_3 = 0.0, 0.0, 0.0\n        else:\n            # Objective function value is -v8_star\n            v8_star = -res.fun\n\n            # Get dual marginals for upper bounds on v1, v2, v3\n            # lambda_k^up = res.upper.marginals[k-1]\n            lambda_1_up = res.upper.marginals[0]\n            lambda_2_up = res.upper.marginals[1]\n            lambda_3_up = res.upper.marginals[2]\n            \n            # Shadow price sigma_k = max(0, -lambda_k^up)\n            sigma_1 = max(0, -lambda_1_up)\n            sigma_2 = max(0, -lambda_2_up)\n            sigma_3 = max(0, -lambda_3_up)\n            \n        # Round results to 6 decimal places\n        case_results = [\n            round(v8_star, 6),\n            round(sigma_1, 6),\n            round(sigma_2, 6),\n            round(sigma_3, 6)\n        ]\n        all_results.append(case_results)\n\n    # Format the final list of lists into the required string representation.\n    # The map(str,...) converts each float in an inner list to a string.\n    # The inner ','.join creates a string like \"x1,x2,x3,x4\".\n    # The outer f\"[{...}]\" wraps it in brackets.\n    # The final ','.join combines the strings for each case.\n    output_str = f\"[{','.join([f'[{\",\".join(map(str, r))}]' for r in all_results])}]\"\n    \n    print(output_str)\n\nsolve()\n```", "id": "2731583"}]}