{"hands_on_practices": [{"introduction": "通量平衡分析（FBA）模型的预测能力依赖于关键的生物物理参数，其中最重要的参数之一是细胞的维持能量需求。本练习将探讨非生长相关维持（NGAM）能量需求（以通量 $v_{\\text{ngam}}$ 表示）如何为细胞生长设定一个阈值。通过这个练习，我们将揭示低估该参数如何导致对生长速率的显著高估，尤其是在营养物受限的条件下，从而强调在基于约束的模型中准确参数化的重要性，并加深对能量平衡如何支配细胞决策的理解。[@problem_id:2724005]", "problem": "考虑一个适用于三磷酸腺苷（ATP）生产与生长进行通量平衡分析（FBA, Flux Balance Analysis）的最小约束代谢模型，重点关注非生长相关维持（NGAM, Non-Growth Associated Maintenance）的作用。该模型包含两种胞内代谢物，即底物 $S$ 和 ATP $A$，以及四个反应，其通量向量 $v = (v_{\\text{upt}}, v_{\\text{cat}}, v_{\\text{ngam}}, v_{\\text{gr}})$ 按顺序排列如下：\n- 底物摄取：$v_{\\text{upt}}: \\varnothing \\to S$，\n- 分解代谢生成ATP：$v_{\\text{cat}}: S \\to y \\, A$，\n- NGAM ATP水解：$v_{\\text{ngam}}: A \\to \\varnothing$，\n- 生物质形成（生长相关ATP需求）：$v_{\\text{gr}}: \\gamma \\, A \\to \\text{Biomass}$。\n\n假设系统处于稳态质量平衡 $S v = 0$，并满足以下化学计量约束\n$$\n\\begin{aligned}\nS\\text{-balance:}\\quad & v_{\\text{upt}} - v_{\\text{cat}} = 0, \\\\\nA\\text{-balance:}\\quad & y \\, v_{\\text{cat}} - v_{\\text{ngam}} - \\gamma \\, v_{\\text{gr}} = 0,\n\\end{aligned}\n$$\n以及通量边界条件\n$$\n0 \\le v_{\\text{upt}} \\le V_{\\max}, \\quad v_{\\text{cat}} \\ge 0, \\quad v_{\\text{ngam}} \\ge \\text{NGAM}, \\quad v_{\\text{gr}} \\ge 0.\n$$\nFBA的目标是在这些线性约束下最大化生长速率 $v_{\\text{gr}}$。其中，$y$ 是底物的ATP产率，$\\gamma$ 是单位生长所需的ATP（生长相关维持，GAM），而 NGAM 是非生长相关的ATP消耗。\n\n您的任务是通过显式模拟来证明，在低底物条件下，低估 NGAM 值会导致对生长的过高预测。使用线性规划计算两种参数化设置下的最优 $v_{\\text{gr}}$：\n- 真实的 NGAM 值 $\\text{NGAM}_{\\text{true}}$，\n- 一个被低估的 NGAM 值 $\\text{NGAM}_{\\text{under}}$。\n\n使用以下科学上符合实际的参数值和单位：\n- ATP产率 $y = 10$ $(\\text{mmol A} \\cdot (\\text{mmol S})^{-1})$，\n- 生长相关ATP需求 $\\gamma = 30$ $(\\text{mmol A} \\cdot \\text{gDW}^{-1})$，\n- 真实非生长ATP消耗 $\\text{NGAM}_{\\text{true}} = 1.5$ $(\\text{mmol A} \\cdot \\text{gDW}^{-1} \\cdot h^{-1})$，\n- 低估的非生长ATP消耗 $\\text{NGAM}_{\\text{under}} = 0.5$ $(\\text{mmol A} \\cdot \\text{gDW}^{-1} \\cdot h^{-1})$。\n\n测试集为一系列底物摄取上限，您必须将它们作为独立案例处理：\n$$\nV_{\\max} \\in \\{0.15, 0.16, 0.5, 1.0\\} \\ \\text{mmol S} \\cdot \\text{gDW}^{-1} \\cdot h^{-1}.\n$$\n这些值包括一个边界情况 $V_{\\max} = \\text{NGAM}_{\\text{true}}/y = 0.15$，一个接近阈值的低底物情况 $V_{\\max} = 0.16$，以及两个较高底物的情况。对于每个 $V_{\\max}$，求解两个线性规划问题（一次使用 $\\text{NGAM}=\\text{NGAM}_{\\text{true}}$，另一次使用 $\\text{NGAM}=\\text{NGAM}_{\\text{under}}$）并报告：\n- 最优生长速率 $v_{\\text{gr,true}}$ 和 $v_{\\text{gr,under}}$，单位为 $h^{-1}$，\n- 过高预测偏差 $b = v_{\\text{gr,under}} - v_{\\text{gr,true}}$，单位为 $h^{-1}$。\n\n将所有生长速率和偏差表示为四舍五入到6位小数的浮点数，并以 $h^{-1}$ 为单位报告。您的程序应生成单行输出，包含一个单一括号结构内的三个列表：\n- 测试集的 $v_{\\text{gr,true}}$ 值列表，\n- 测试集的 $v_{\\text{gr,under}}$ 值列表，\n- 测试集的偏差 $b$ 列表。\n\n最终输出格式要求：\n您的程序应生成单行输出，包含一个由逗号分隔的三个方括号列表组成的结果，格式完全如下：\n$$\n[ [g^{\\text{true}}_1,\\dots,g^{\\text{true}}_n], [g^{\\text{under}}_1,\\dots,g^{\\text{under}}_n], [b_1,\\dots,b_n] ]\n$$\n其中每个标量都四舍五入到6位小数，并且打印行中不含单位。对于指定的测试集，$n=4$。所有计算都必须遵循上述模型和约束，通量的单位是 $\\text{mmol} \\cdot \\text{gDW}^{-1} \\cdot h^{-1}$，生长速率的单位是 $h^{-1}$。", "solution": "问题陈述已经过验证，被认为是约束代谢模型领域中一个适定的、有科学依据的问题。我们将开始进行求解。\n\n该问题要求我们求解一个通量平衡分析（FBA）问题，这是线性规划（LP）的一个具体应用，旨在量化低估非生长相关维持（NGAM）能量需求对预测的微生物生长速率的影响。\n\n首先，我们将问题形式化为标准LP格式。系统状态由通量向量 $v = (v_{\\text{upt}}, v_{\\text{cat}}, v_{\\text{ngam}}, v_{\\text{gr}})^T$ 描述。为了方便标准求解器，我们将其表示为 $x = (x_1, x_2, x_3, x_4)^T$。目标是最大化生长速率 $v_{\\text{gr}}$（即 $x_4$）。在LP的标准最小化形式中，这等同于最小化 $-x_4$。因此，目标函数由成本向量 $c$ 定义：\n$$\n\\text{minimize } c^T x \\quad \\text{where} \\quad c = \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ -1 \\end{pmatrix}\n$$\n\n该系统受两类约束的制约：质量平衡等式约束和通量边界不等式约束。\n\n稳态质量平衡方程 $S v = 0$ 构成了等式约束 $A_{eq} x = b_{eq}$：\n$$\n\\begin{aligned}\n1 \\cdot v_{\\text{upt}} - 1 \\cdot v_{\\text{cat}} + 0 \\cdot v_{\\text{ngam}} + 0 \\cdot v_{\\text{gr}} &= 0 \\\\\n0 \\cdot v_{\\text{upt}} + y \\cdot v_{\\text{cat}} - 1 \\cdot v_{\\text{ngam}} - \\gamma \\cdot v_{\\text{gr}} &= 0\n\\end{aligned}\n$$\n这给出了等式约束矩阵 $A_{eq}$ 和向量 $b_{eq}$：\n$$\nA_{eq} = \\begin{pmatrix} 1 & -1 & 0 & 0 \\\\ 0 & y & -1 & -\\gamma \\end{pmatrix}, \\quad b_{eq} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}\n$$\n给定参数为 $y=10$ 和 $\\gamma=30$。\n\n通量边界以对 $x$ 中各元素的独立不等式约束形式给出：\n$$\n\\begin{aligned}\n0 \\le v_{\\text{upt}} \\le V_{\\max} \\\\\nv_{\\text{cat}} \\ge 0 \\\\\nv_{\\text{ngam}} \\ge \\text{NGAM} \\\\\nv_{\\text{gr}} \\ge 0\n\\end{aligned}\n$$\n这些是每个变量 $x_i$ 的下界和上界：$l_i \\le x_i \\le u_i$。\n- $0 \\le x_1 \\le V_{\\max}$\n- $0 \\le x_2 < \\infty$\n- $\\text{NGAM} \\le x_3 < \\infty$\n- $0 \\le x_4 < \\infty$\n\n该问题足够简单，可以得出解析解，这在进行数值计算前提供了关键的见解。由第一个等式约束可知，$v_{\\text{upt}} = v_{\\text{cat}}$。因为 $0 \\le v_{\\text{upt}} \\le V_{\\max}$，所以可得 $0 \\le v_{\\text{cat}} \\le V_{\\max}$。\n\n从第二个等式约束，我们可以表示生长速率 $v_{\\text{gr}}$：\n$$\n\\gamma v_{\\text{gr}} = y v_{\\text{cat}} - v_{\\text{ngam}} \\implies v_{\\text{gr}} = \\frac{1}{\\gamma} (y v_{\\text{cat}} - v_{\\text{ngam}})\n$$\n为最大化 $v_{\\text{gr}}$，我们必须在约束条件下最大化其表达式的值。通过同时最大化 $v_{\\text{cat}}$ 和最小化 $v_{\\text{ngam}}$，可以使 $v_{\\text{gr}}$ 的表达式最大化。根据边界条件，$v_{\\text{cat}}$ 的最大值为 $V_{\\max}$（通过将其对应的 $v_{\\text{upt}}$ 设为其最大值），而 $v_{\\text{ngam}}$ 的最小值为 $\\text{NGAM}$。\n\n将这些值代入 $v_{\\text{gr}}$ 的表达式，得到潜在的最大生长速率。然而，我们还必须遵守非负约束 $v_{\\text{gr}} \\ge 0$。因此，最优生长速率为：\n$$\nv_{\\text{gr,opt}} = \\max\\left(0, \\frac{y V_{\\max} - \\text{NGAM}}{\\gamma}\\right)\n$$\n这个解析公式揭示了底物摄取的一个临界阈值。只有当最大底物摄取所产生的ATP生成速率 $y V_{\\max}$ 足以克服非生长相关维持成本 $\\text{NGAM}$ 时，生长才可能发生（$v_{\\text{gr,opt}} > 0$）。这定义了生长所需的最小底物摄取速率：\n$$\ny V_{\\max} > \\text{NGAM} \\implies V_{\\max} > \\frac{\\text{NGAM}}{y}\n$$\n如果 $V_{\\max} \\le \\text{NGAM}/y$，所有生成的 ATP 都将被用于 NGAM，最优生长速率为 $0$。\n\n使用该公式，我们可以分析过高预测偏差 $b = v_{\\text{gr,under}} - v_{\\text{gr,true}}$。\n- $v_{\\text{gr,true}} = \\max\\left(0, \\frac{y V_{\\max} - \\text{NGAM}_{\\text{true}}}{\\gamma}\\right)$\n- $v_{\\text{gr,under}} = \\max\\left(0, \\frac{y V_{\\max} - \\text{NGAM}_{\\text{under}}}{\\gamma}\\right)$\n\n对于足够高的底物摄取速率，使得两个模型都预测正生长（即 $V_{\\max} > \\text{NGAM}_{\\text{true}}/y$），偏差变为：\n$$\nb = \\left(\\frac{y V_{\\max} - \\text{NGAM}_{\\text{under}}}{\\gamma}\\right) - \\left(\\frac{y V_{\\max} - \\text{NGAM}_{\\text{true}}}{\\gamma}\\right) = \\frac{\\text{NGAM}_{\\text{true}} - \\text{NGAM}_{\\text{under}}}{\\gamma}\n$$\n根据给定参数 $\\text{NGAM}_{\\text{true}} = 1.5$、$\\text{NGAM}_{\\text{under}} = 0.5$ 和 $\\gamma = 30$，这个恒定偏差为：\n$$\nb = \\frac{1.5 - 0.5}{30} = \\frac{1.0}{30} \\approx 0.033333 \\, h^{-1}\n$$\n这个偏差代表了由于模型未能考虑全部维持能量成本而被错误预测的生长部分。这种影响在低底物条件下尤其明显，此时被低估的模型可能会预测生长，而真实模型则正确地预测零生长，正如在 $V_{\\max} = 0.15$ 的边界情况中所见。\n\n在实现部分，我们将对每种情况使用 `scipy.optimize.linprog` 函数进行数值化求解LP问题。该函数接受我们已形式化定义的参数 $c$、$A_{eq}$、$b_{eq}$ 和 `bounds`。对于测试集 $\\{0.15, 0.16, 0.5, 1.0\\}$ 中的每个 $V_{\\max}$ 值，我们将执行此过程两次：一次使用 $\\text{NGAM} = \\text{NGAM}_{\\text{true}} = 1.5$，另一次使用 $\\text{NGAM} = \\text{NGAM}_{\\text{under}} = 0.5$。所得的最优 $v_{\\text{gr}}$ 值及其差异将被收集并按规定格式化。数值解必须与上面推导的解析结果一致。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves the FBA problem for a minimal metabolic model to demonstrate\n    how underestimating NGAM leads to overpredicted growth.\n    \"\"\"\n    \n    # Model Parameters\n    y = 10.0  # ATP yield (mmol A per mmol S)\n    gamma = 30.0  # Growth-associated ATP demand (mmol A per gDW)\n    \n    # NGAM cases\n    NGAM_true = 1.5  # True NGAM (mmol A gDW^-1 h^-1)\n    NGAM_under = 0.5  # Underestimated NGAM (mmol A gDW^-1 h^-1)\n    \n    # Test suite for substrate uptake upper bounds\n    V_max_suite = [0.15, 0.16, 0.5, 1.0]  # (mmol S gDW^-1 h^-1)\n\n    # Lists to store the results\n    g_true_list = []\n    g_under_list = []\n    bias_list = []\n\n    def solve_fba_instance(ngam_val, v_max_val):\n        \"\"\"\n        Solves the linear programming problem for a given set of parameters.\n\n        Variables are (v_upt, v_cat, v_ngam, v_gr).\n        \"\"\"\n        # Objective function: Maximize v_gr (v[3]). linprog minimizes, so minimize -v_gr.\n        c = [0, 0, 0, -1]\n        \n        # Equality constraints: S*v = 0\n        # v_upt - v_cat = 0\n        # y*v_cat - v_ngam - gamma*v_gr = 0\n        A_eq = np.array([\n            [1, -1, 0, 0],\n            [0, y, -1, -gamma]\n        ])\n        b_eq = np.array([0, 0])\n        \n        # Bounds on fluxes\n        # 0 <= v_upt <= v_max_val\n        # v_cat >= 0\n        # v_ngam >= ngam_val\n        # v_gr >= 0\n        bounds = [\n            (0, v_max_val),\n            (0, None),\n            (ngam_val, None),\n            (0, None)\n        ]\n        \n        # Solve the linear program using the 'highs' method for robustness.\n        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n        \n        if not res.success:\n            # For this well-posed problem, the solver should always succeed.\n            # An infeasible status (2) would imply no solution, but the analytical\n            # derivation proves a feasible solution always exists (even if v_gr=0).\n            # This check is for robust programming.\n            if res.status == 2: # Infeasible\n                return 0.0\n            raise ValueError(f\"Linear programming solver failed with status {res.status}: {res.message}\")\n        \n        # Optimal growth rate is the 4th variable in the solution vector x.\n        optimal_growth_rate = res.x[3]\n        \n        # Due to floating-point inaccuracies, the result can be a very small\n        # negative number close to zero. We enforce the non-negativity constraint.\n        return max(0.0, optimal_growth_rate)\n\n    # Iterate through each substrate uptake capacity in the test suite\n    for v_max in V_max_suite:\n        # Calculate optimal growth for the true NGAM value\n        v_gr_true = solve_fba_instance(NGAM_true, v_max)\n        \n        # Calculate optimal growth for the underestimated NGAM value\n        v_gr_under = solve_fba_instance(NGAM_under, v_max)\n        \n        # Calculate the overprediction bias\n        bias = v_gr_under - v_gr_true\n        \n        # Append results to their respective lists\n        g_true_list.append(v_gr_true)\n        g_under_list.append(v_gr_under)\n        bias_list.append(bias)\n    \n    # Format the lists into strings with 6 decimal places for each number\n    def format_list(data_list):\n        return \",\".join([f\"{x:.6f}\" for x in data_list])\n\n    g_true_str = format_list(g_true_list)\n    g_under_str = format_list(g_under_list)\n    b_str = format_list(bias_list)\n\n    # Print the final result in the exact specified format\n    print(f\"[[{g_true_str}],[{g_under_str}],[{b_str}]]\")\n\nsolve()\n```", "id": "2724005"}, {"introduction": "虽然标准的通量平衡分析（FBA）提供了代谢的静态“快照”，但真实的生物过程是动态的，细胞及其环境会随时间不断变化。本练习将指导您构建一个动态通量平衡分析（dFBA）模拟，其中 FBA 被迭代求解，以更新生物量和胞外底物浓度。这种方法能够模拟分批发酵过程中的不同生长阶段，并预测如溢流代谢等复杂现象，从而将静态的代谢快照与动态的系统级行为联系起来，这是生物过程建模的一项核心技能。[@problem_id:2723964]", "problem": "你的任务是编写一个完整、可运行的程序，该程序使用通量平衡分析（FBA）对一个最小的教学用代谢网络进行动态、基于约束的分批发酵模拟。目标是根据初始胞外底物浓度和摄取边界，确定生长阶段并检测溢出代谢（溢出代谢物的分泌）的发生。你的程序必须为每个测试用例计算一组定量输出，以总结其动态行为。答案必须在执行结束时以指定格式打印。\n\n模拟必须基于以下基本原理和定义构建：\n\n- 质量守恒与准稳态胞内代谢：如果 $S$ 表示胞内化学计量矩阵，$v$ 是反应通量向量，那么在准稳态下，对于胞内代谢物，$S v = 0$ 成立。\n- 通量平衡分析（FBA）：一个线性优化问题，它在胞内化学计量等式和反应边界的约束下，最大化一个细胞目标（此处为生物质生成速率）。\n- 分批培养中的动态胞外质量平衡：对于每种胞外物质 $i$，其浓度为 $C_i(t)$（单位：毫摩尔/升），有 $dC_i/dt = - v_i(t) X(t)$，其中 $v_i(t)$ 是单位生物量的摄取或分泌通量（单位：毫摩尔/克干重/小时），$X(t)$ 是生物质浓度（单位：克干重/升）。对于分泌，$v_i(t)$ 从胞内到胞外的方向取正值。\n- 生物质动态：比生长速率等于生物质反应通量，因此 $dX/dt = \\mu(t) X(t)$，其中 $\\mu(t) = v_{\\text{biomass}}(t)$，单位为 $h^{-1}$。\n\n模拟一个最小网络，包含以下胞内代谢物：胞内葡萄糖（$\\text{glc}_{c}$）、胞内氧气（$\\text{O}_{2,c}$）、三磷酸腺苷（$\\text{ATP}_{c}$）和胞内乙酸（$\\text{ac}_{c}$）。胞外代谢物为葡萄糖（$\\text{glc}_{e}$）、氧气（$\\text{O}_{2,e}$）和乙酸（$\\text{ac}_{e}$）。要使用的反应集、通量变量和化学计量如下：\n\n- 葡萄糖摄取：$v_{\\text{glc\\_in}} \\ge 0$, $\\text{glc}_e \\rightarrow \\text{glc}_{c}$。对胞内 $\\text{glc}_{c}$ 平衡的贡献为 $+1$。\n- 氧气摄取：$v_{\\text{o2\\_in}} \\ge 0$, $\\text{O}_{2,e} \\rightarrow \\text{O}_{2,c}$。对胞内 $\\text{O}_{2,c}$ 平衡的贡献为 $+1$。\n- 呼吸作用：$v_{\\text{resp}} \\ge 0$, $\\text{glc}_{c} + 6\\,\\text{O}_{2,c} \\rightarrow 30\\,\\text{ATP}_{c}$。对胞内平衡的贡献为：$\\text{glc}_{c}$ 为 $-1$，$\\text{O}_{2,c}$ 为 $-6$，$\\text{ATP}_{c}$ 为 $+30$。\n- 发酵作用：$v_{\\text{ferm}} \\ge 0$, $\\text{glc}_{c} \\rightarrow 2\\,\\text{ac}_{c} + 2\\,\\text{ATP}_{c}$。对胞内平衡的贡献为：$\\text{glc}_{c}$ 为 $-1$，$\\text{ac}_{c}$ 为 $+2$，$\\text{ATP}_{c}$ 为 $+2$。\n- 生物质生成：$v_{\\text{biomass}} \\ge 0$, $10\\,\\text{ATP}_{c} \\rightarrow \\text{biomass}$。对胞内 $\\text{ATP}_{c}$ 平衡的贡献为 $-10$。\n- 非生长相关维持：$v_{\\text{maint}} \\ge m$, $\\text{ATP}_{c} \\rightarrow \\emptyset$。对胞内 $\\text{ATP}_{c}$ 平衡的贡献为 $-1$。参数 $m$ 是一个给定的非负下界，单位为毫摩尔/克干重/小时。\n- 乙酸分泌：$v_{\\text{ac\\_ex}} \\ge 0$, $\\text{ac}_{c} \\rightarrow \\text{ac}_{e}$。对胞内 $\\text{ac}_{c}$ 平衡的贡献为 $-1$。\n\n胞内稳态约束为以下线性等式：\n- 葡萄糖平衡：$v_{\\text{glc\\_in}} - v_{\\text{resp}} - v_{\\text{ferm}} = 0$。\n- 氧气平衡：$v_{\\text{o2\\_in}} - 6 v_{\\text{resp}} = 0$。\n- 三磷酸腺苷平衡：$30 v_{\\text{resp}} + 2 v_{\\text{ferm}} - 10 v_{\\text{biomass}} - v_{\\text{maint}} = 0$。\n- 乙酸平衡：$2 v_{\\text{ferm}} - v_{\\text{ac\\_ex}} = 0$。\n\n交换通量的边界取决于胞外浓度和单位生物量的摄取限制：\n- 如果胞外葡萄糖浓度 $C_{\\text{glc}}(t) > 0$，则 $0 \\le v_{\\text{glc\\_in}} \\le V_{\\text{glc}}$；如果 $C_{\\text{glc}}(t) = 0$，则 $v_{\\text{glc\\_in}} = 0$。\n- 如果胞外氧气浓度 $C_{\\text{o2}}(t) > 0$，则 $0 \\le v_{\\text{o2\\_in}} \\le V_{\\text{o2}}$；如果 $C_{\\text{o2}}(t) = 0$，则 $v_{\\text{o2\\_in}} = 0$。\n- 所有其他通量的下界为 $0$（或对于 $v_{\\text{maint}}$ 为 $m$），上界足够大以至于不约束解。\n\n在每个时间点 $t$，求解 FBA 线性规划问题，最大化 $v_{\\text{biomass}}$，并受限于上述等式和边界。使用最优通量，通过显式时间步进方案来推进胞外浓度和生物质的演化。具体来说，如果步长为 $\\Delta t$ 小时，当前生物质为 $X(t)$ 克干重/升，则更新：\n- $C_{\\text{glc}}(t + \\Delta t) = \\max\\{0, C_{\\text{glc}}(t) - v_{\\text{glc\\_in}}(t)\\, X(t)\\, \\Delta t\\}$，单位：毫摩尔/升。\n- $C_{\\text{o2}}(t + \\Delta t) = \\max\\{0, C_{\\text{o2}}(t) - v_{\\text{o2\\_in}}(t)\\, X(t)\\, \\Delta t\\}$，单位：毫摩尔/升。\n- $C_{\\text{ac}}(t + \\Delta t) = C_{\\text{ac}}(t) + v_{\\text{ac\\_ex}}(t)\\, X(t)\\, \\Delta t$，单位：毫摩尔/升。\n- $X(t + \\Delta t) = X(t) + v_{\\text{biomass}}(t)\\, X(t)\\, \\Delta t$，单位：克干重/升。\n\n将溢出起始时间定义为最优乙酸分泌通量满足 $v_{\\text{ac\\_ex}}(t) > \\varepsilon$ 的最早时间 $t$，其中 $\\varepsilon$ 是一个小的正容差。如果在模拟结束前没有出现这样的时间，则报告起始时间为 $-1$。\n\n当 $t$ 达到指定的最终时间 $T_{\\text{end}}$ 或当葡萄糖耗尽时，以先到者为准，停止模拟。将葡萄糖耗尽时间定义为 $C_{\\text{glc}}(t) \\le \\delta$ 成立的最早时间 $t$，其中 $\\delta$ 是一个小的正容差。\n\n单位和数值要求：\n- 时间单位必须是小时，浓度单位是毫摩尔/升，生物质单位是克干重/升。\n- 报告时间单位为小时，浓度单位为毫摩尔/升。\n- 使用固定时间步长 $\\Delta t$（单位：小时）。\n- 使用正容差 $\\varepsilon$ 检测溢出起始，使用 $\\delta$ 检测葡萄糖耗尽。\n\n你的程序必须使用上述确切的网络和规则，并为以下每个测试用例生成输出。对每个测试用例，参数以元组 $(C_{\\text{glc}}(0), C_{\\text{o2}}(0), V_{\\text{glc}}, V_{\\text{o2}}, m, X(0), T_{\\text{end}}, \\Delta t)$ 的形式给出，单位如前所述。使用 $\\varepsilon = 10^{-9}$ 和 $\\delta = 10^{-9}$。\n\n测试套件（三个案例）：\n- 案例 A（氧气非限制性，预计无溢出）：$(100.0, 1000.0, 10.0, 60.0, 1.0, 0.1, 5.0, 0.005)$。\n- 案例 B（氧气摄取强限制性，从一开始就溢出）：$(100.0, 50.0, 10.0, 10.0, 1.0, 0.1, 5.0, 0.005)$。\n- 案例 C（初始氧气对单位生物量充足但会有限耗尽，延迟的溢出起始）：$(100.0, 20.0, 10.0, 60.0, 1.0, 0.1, 5.0, 0.005)$。\n\n对每个测试用例，你的程序必须计算并返回列表 $[t_{\\text{overflow}}, t_{\\text{glc\\_dep}}, C_{\\text{ac}}(t_{\\text{stop}}), X(t_{\\text{stop}})]$，其中 $t_{\\text{overflow}}$ 是溢出起始时间，单位为小时（如果从未发生则报告 $-1$），$t_{\\text{glc\\_dep}}$ 是葡萄糖耗尽时间，单位为小时（如果在 $T_{\\text{end}}$ 之前葡萄糖从未耗尽，则报告模拟停止的时间），$C_{\\text{ac}}(t_{\\text{stop}})$ 是最终乙酸浓度，单位为毫摩尔/升，以及 $X(t_{\\text{stop}})$ 是最终生物质，单位为克干重/升。\n\n最终输出格式：\n- 你的程序应生成单行输出，包含所有测试用例的结果，格式为由逗号分隔的各案例列表组成的列表，并用方括号括起，不含多余空格。例如：\"[[a,b,c,d],[e,f,g,h],[i,j,k,l]]\"。\n- 输出中的每个浮点数必须精确到小数点后六位。\n\n模型规范中的所有数值都已明确提供；除了上面列出的规则外，不需要其他领域知识。重点在于正确编码线性约束，在每个时间步求解线性规划问题，并对胞外和生物质动态进行积分。确保葡萄糖和氧气的使用遵循指定的边界，并且溢出检测的实现与此处定义完全一致。", "solution": "我们从基于约束的动态模拟所需的基本原理开始。\n\n首先，胞内通量必须满足稳态质量守恒，表示为 $S v = 0$，其中 $S$ 是针对胞内代谢物的化学计量矩阵，$v$ 是反应通量向量。在这个简化网络中，我们追踪 $\\text{glc}_{c}$、$\\text{O}_{2,c}$、$\\text{ATP}_{c}$ 和 $\\text{ac}_{c}$ 的胞内平衡。所选的反应和化学计量具有生化合理性，并编码了两种能量生成模式：呼吸作用和发酵作用。呼吸作用每单位葡萄糖具有高的三磷酸腺苷产率并消耗氧气，而发酵作用每单位葡萄糖的三磷酸腺苷产率低，并产生一种溢出代谢物——乙酸。非生长相关维持消耗确保了即使在零增长时，三磷酸腺苷的需求也非零。\n\n设胞内通量向量排序为 $v = [v_{\\text{glc\\_in}}, v_{\\text{o2\\_in}}, v_{\\text{resp}}, v_{\\text{ferm}}, v_{\\text{biomass}}, v_{\\text{maint}}, v_{\\text{ac\\_ex}}]^T$。等式 $S v = 0$ 对应于以下平衡：\n\n- 葡萄糖：$v_{\\text{glc\\_in}} - v_{\\text{resp}} - v_{\\text{ferm}} = 0$，因为胞内葡萄糖通过摄取生成，并通过呼吸作用和发酵作用消耗。\n- 氧气：$v_{\\text{o2\\_in}} - 6 v_{\\text{resp}} = 0$，因为呼吸作用每个葡萄糖消耗六个氧气，而氧气通过摄取进入。\n- 三磷酸腺苷：$30 v_{\\text{resp}} + 2 v_{\\text{ferm}} - 10 v_{\\text{biomass}} - v_{\\text{maint}} = 0$，反映了由产能途径的生产以及由生物质合成和维持的消耗。\n- 乙酸：$2 v_{\\text{ferm}} - v_{\\text{ac\\_ex}} = 0$，确保在稳态下，发酵产生的乙酸通过分泌离开细胞。\n\n边界源于胞外可用性和单位生物量的转运能力。对于葡萄糖，如果胞外浓度 $C_{\\text{glc}}(t)$ 为正，单位生物量的摄取边界为 $0 \\le v_{\\text{glc\\_in}} \\le V_{\\text{glc}}$，否则 $v_{\\text{glc\\_in}} = 0$。类似地，对于氧气，如果 $C_{\\text{o2}}(t) > 0$，则 $0 \\le v_{\\text{o2\\_in}} \\le V_{\\text{o2}}$，否则 $v_{\\text{o2\\_in}} = 0$。所有其他通量都是非负的，维持反应有一个下界 $v_{\\text{maint}} \\ge m$。通量平衡分析（FBA）的优化目标是在这些等式和边界的约束下，最大化生物质生成速率 $v_{\\text{biomass}}$。在代码中，我们可以通过使用线性规划求解器最小化 $v_{\\text{biomass}}$ 的负值来解决这个问题。\n\n给定时间 $t$ 的最优通量，胞外代谢物的动态演化遵循单位体积的物料平衡，使用摄取通量进入细胞为正的约定。对于葡萄糖和氧气：\n- $dC_{\\text{glc}}/dt = - v_{\\text{glc\\_in}}(t) X(t)$，\n- $dC_{\\text{o2}}/dt = - v_{\\text{o2\\_in}}(t) X(t)$。\n\n对于乙酸，分泌会增加胞外浓度：\n- $dC_{\\text{ac}}/dt = + v_{\\text{ac\\_ex}}(t) X(t)$。\n\n生物质以速率 $\\mu(t) = v_{\\text{biomass}}(t)$ 指数增长：\n- $dX/dt = \\mu(t) X(t)$。\n\n这些通过一个步长为 $\\Delta t$ 的显式 Euler 步长进行积分：对于每种胞外物质 $i$，有 $C_i(t+\\Delta t) = C_i(t) + (dC_i/dt)\\, \\Delta t$，其浓度被限制在零以上；以及 $X(t+\\Delta t) = X(t) + (dX/dt)\\, \\Delta t$。\n\n当发酵作用活跃且乙酸被分泌时，即识别为溢出代谢；在这个稳态模型中，由于乙酸平衡 $2 v_{\\text{ferm}} - v_{\\text{ac\\_ex}} = 0$，$v_{\\text{ac\\_ex}} > 0$ 当且仅当 $v_{\\text{ferm}} > 0$。将溢出起始时间定义为 $v_{\\text{ac\\_ex}}(t) > \\varepsilon$ 成立的最小时间 $t$，其中 $\\varepsilon$ 是一个小的正容差；如果这从未发生，则报告 $-1$。葡萄糖耗尽时间是 $C_{\\text{glc}}(t) \\le \\delta$ 成立的最小时间 $t$，其中 $\\delta$ 是一个小的正容差。模拟在 $t = T_{\\text{end}}$ 或葡萄糖耗尽时停止，以先到者为准。所要求的输出是：\n- $t_{\\text{overflow}}$，单位为小时，\n- $t_{\\text{glc\\_dep}}$，单位为小时，\n- $C_{\\text{ac}}(t_{\\text{stop}})$，单位为毫摩尔/升，\n- $X(t_{\\text{stop}})$，单位为克干重/升。\n\n适合实现的算法步骤：\n1.  为每个测试用例初始化 $t = 0$，$C_{\\text{glc}}(0)$，$C_{\\text{o2}}(0)$，$C_{\\text{ac}}(0) = 0$ 和 $X(0)$。\n2.  在每个时间步：\n    - 根据 $C_{\\text{glc}}(t)$ 和 $C_{\\text{o2}}(t)$ 设置 $v_{\\text{glc\\_in}}$ 和 $v_{\\text{o2\\_in}}$ 的边界。\n    - 构建带有等式和边界约束的线性规划问题，并最大化 $v_{\\text{biomass}}$（等效地，最小化其负值）。\n    - 从解中提取 $v_{\\text{biomass}}$、$v_{\\text{glc\\_in}}$、$v_{\\text{o2\\_in}}$ 和 $v_{\\text{ac\\_ex}}$。\n    - 如果 $v_{\\text{ac\\_ex}} > \\varepsilon$ 且溢出起始时间尚未设置，则将其设置为当前时间 $t$。\n    - 使用显式 Euler 步长更新 $C_{\\text{glc}}$、$C_{\\text{o2}}$、$C_{\\text{ac}}$ 和 $X$，并使用当前的 $X(t)$ 计算消耗和生产速率。\n    - 如果 $C_{\\text{glc}}$ 首次低于 $\\delta$，则将 $t_{\\text{glc\\_dep}}$ 记录为当前时间 $t$。\n    - 将 $t$ 增加 $\\Delta t$。\n3.  当 $t \\ge T_{\\text{end}}$ 或 $C_{\\text{glc}} \\le \\delta$ 时停止。如果 $t_{\\text{glc\\_dep}}$ 未设置且由于达到 $T_{\\text{end}}$ 而停止，则设置 $t_{\\text{glc\\_dep}} = t$。\n4.  如果从未检测到溢出起始，则设置 $t_{\\text{overflow}} = -1$。\n5.  按指定的顺序和单位返回四个要求的输出。\n\n在给定网络下各阶段的科学解释：\n- 当单位生物量的氧气摄取能力相对于葡萄糖摄取充足（$V_{\\text{o2}} \\ge 6 V_{\\text{glc}}$）且氧气仍然可用时，优化器偏好呼吸作用，因为它每单位葡萄糖产生更多的三磷酸腺苷。发酵作用保持不活跃，乙酸分泌为零：无溢出。\n- 如果氧气摄取能力相对于葡萄糖摄取不足，或氧气耗尽，优化器可以通过将葡萄糖分流至发酵作用来增加三磷酸腺苷的供应，从而激活乙酸分泌：溢出立即开始（如果氧气从一开始就受限）或在氧气耗尽的时刻开始。\n- 生长速率受三磷酸腺苷可用性的限制：在最优状态下，当三磷酸腺苷平衡是活跃的且 $v_{\\text{maint}}$ 处于其下界 $m$ 时，$\\mu = v_{\\text{biomass}} = \\left(30 v_{\\text{resp}} + 2 v_{\\text{ferm}} - v_{\\text{maint}}\\right) / 10$。\n\n测试套件涵盖了不同的机制：\n- 案例 A：$V_{\\text{o2}} = 60$ 和 $V_{\\text{glc}} = 10$ 满足 $V_{\\text{o2}} \\ge 6 V_{\\text{glc}}$，且有充足的氧气池；严格的呼吸性生长，无溢出。\n- 案例 B：$V_{\\text{o2}} = 10$ 远小于 $6 V_{\\text{glc}} = 60$；溢出立即发生并持续到葡萄糖耗尽或结束时间。\n- 案例 C：$V_{\\text{o2}} = 60$ 在氧气存在时允许完全呼吸性摄取；有限的氧气池耗尽，溢出在耗尽时开始。\n\n最后，程序必须将每个案例的结果汇总成单行，格式化为列表的列表，并按要求，每个浮点数打印到小数点后六位。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef fba_step(C_glc, C_o2, V_glc, V_o2, m_lb):\n    \"\"\"\n    Solve the instantaneous FBA given extracellular concentrations and uptake bounds.\n    Returns the optimal flux vector and status flag.\n    Variable order:\n    0: v_glc_in\n    1: v_o2_in\n    2: v_resp\n    3: v_ferm\n    4: v_biomass\n    5: v_maint\n    6: v_ac_ex\n    \"\"\"\n    # Bounds depend on extracellular availability\n    # If pool is depleted (<= 0), set uptake bound to exactly zero.\n    ub_glc = V_glc if C_glc > 0.0 else 0.0\n    ub_o2 = V_o2 if C_o2 > 0.0 else 0.0\n\n    # Equality constraints matrix A_eq * v = 0\n    # Rows: [glc_c, o2_c, ATP_c, ac_c]\n    A_eq = np.array([\n        [1.0, 0.0, -1.0, -1.0,  0.0,  0.0,  0.0],  # glc balance\n        [0.0, 1.0, -6.0,  0.0,  0.0,  0.0,  0.0],  # o2 balance\n        [0.0, 0.0, 30.0,  2.0, -10.0, -1.0,  0.0], # ATP balance\n        [0.0, 0.0,  0.0,  2.0,  0.0,  0.0, -1.0],  # acetate balance\n    ])\n    b_eq = np.zeros(4)\n\n    # Bounds for variables\n    bounds = [\n        (0.0, ub_glc),      # v_glc_in\n        (0.0, ub_o2),       # v_o2_in\n        (0.0, None),        # v_resp\n        (0.0, None),        # v_ferm\n        (0.0, None),        # v_biomass\n        (m_lb, None),       # v_maint (lower bound m)\n        (0.0, None),        # v_ac_ex\n    ]\n\n    # Objective: maximize v_biomass -> minimize -v_biomass\n    c = np.array([0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0])\n\n    res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n    return res\n\ndef simulate_case(params, eps_overflow=1e-9, delta_glc=1e-9):\n    \"\"\"\n    Simulate one test case.\n    params: (C_glc0, C_o20, V_glc, V_o2, m, X0, T_end, dt)\n    Returns [t_overflow, t_glc_dep, C_ac_final, X_final]\n    \"\"\"\n    C_glc, C_o2, V_glc, V_o2, m, X, T_end, dt = params\n    C_ac = 0.0\n    t = 0.0\n    t_overflow = None\n    t_glc_dep = None\n\n    # Run until time end or glucose depletion\n    while t < T_end and C_glc > delta_glc:\n        # Solve FBA at current state\n        res = fba_step(C_glc, C_o2, V_glc, V_o2, m)\n        if not res.success:\n            # Infeasible or failed optimization; treat as zero growth and no fluxes\n            v = np.zeros(7)\n            v[5] = m  # attempt to respect maintenance bound; but no ATP => growth 0\n        else:\n            v = res.x\n\n        v_glc_in = max(0.0, v[0])\n        v_o2_in = max(0.0, v[1])\n        v_resp = max(0.0, v[2])\n        v_ferm = max(0.0, v[3])\n        v_bio = max(0.0, v[4])\n        v_maint = max(m, v[5])\n        v_ac_ex = max(0.0, v[6])\n\n        # Detect overflow onset\n        if v_ac_ex > eps_overflow and t_overflow is None:\n            t_overflow = t\n\n        # Store previous concentrations for depletion time detection\n        C_glc_prev = C_glc\n\n        # Euler updates using current X\n        glc_cons = v_glc_in * X * dt\n        o2_cons = v_o2_in * X * dt\n        ac_prod = v_ac_ex * X * dt\n        growth = v_bio * X * dt\n\n        C_glc = max(0.0, C_glc - glc_cons)\n        C_o2 = max(0.0, C_o2 - o2_cons)\n        C_ac = C_ac + ac_prod\n        X = X + growth\n\n        t += dt\n\n        # Record glucose depletion time when it first crosses below delta_glc\n        if C_glc <= delta_glc and C_glc_prev > delta_glc and t_glc_dep is None:\n            t_glc_dep = t\n\n    # If simulation ended due to time, set t_glc_dep accordingly if not set\n    if t_glc_dep is None:\n        t_glc_dep = t\n\n    if t_overflow is None:\n        t_overflow_out = -1.0\n    else:\n        t_overflow_out = t_overflow\n\n    return [t_overflow_out, t_glc_dep, C_ac, X]\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each tuple: (C_glc0, C_o20, V_glc, V_o2, m, X0, T_end, dt)\n    test_cases = [\n        (100.0, 1000.0, 10.0, 60.0, 1.0, 0.1, 5.0, 0.005),  # Case A\n        (100.0, 50.0,   10.0, 10.0, 1.0, 0.1, 5.0, 0.005),  # Case B\n        (100.0, 20.0,   10.0, 60.0, 1.0, 0.1, 5.0, 0.005),  # Case C\n    ]\n\n    results = []\n    for case in test_cases:\n        t_overflow, t_glc_dep, C_ac_final, X_final = simulate_case(case, eps_overflow=1e-9, delta_glc=1e-9)\n        # Format to six decimals as strings; final assembly without spaces\n        formatted = [\n            f\"{t_overflow:.6f}\",\n            f\"{t_glc_dep:.6f}\",\n            f\"{C_ac_final:.6f}\",\n            f\"{X_final:.6f}\",\n        ]\n        results.append(f\"[{','.join(formatted)}]\")\n\n    # Final print statement in the exact required format: list of lists, no spaces\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2723964"}]}