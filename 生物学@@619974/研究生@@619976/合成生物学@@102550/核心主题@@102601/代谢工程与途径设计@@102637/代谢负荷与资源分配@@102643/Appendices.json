{"hands_on_practices": [{"introduction": "代谢负荷最直接的形式是在蛋白质合成过程中消耗的能量（ATP和GTP）。本练习提供了一个“信封背面”式的计算，旨在量化这一成本，这是任何希望预测异源基因影响的合成生物学家都应具备的基本技能。通过这个实践，你将对蛋白质生产所涉及的能量消耗规模建立起直观的认识。", "problem": "一个处于稳态的单个细菌细胞以 $6\\times 10^{9}\\ \\text{ATP s}^{-1}$ 的速率产生三磷酸腺苷 (ATP)。该细胞必须保留 $1\\times 10^{9}\\ \\text{ATP s}^{-1}$ 的ATP以维持诸如离子稳态、蛋白质质量控制和更新等基础维持过程，且该维持分配量不能减少。剩余的ATP可用于异源蛋白的合成。考虑一个长度为 $300$ 个氨基酸 (aa) 的异源蛋白。假设以下基于分子生物学中心法则和翻译过程的生物化学测量得出的广泛使用的能量衡算：\n\n- 氨酰-tRNA合成酶将一个氨基酸装载到转移核糖核酸 (tRNA) 上时，会消耗一个ATP分子生成一磷酸腺苷 (AMP) 和焦磷酸盐，在计算高能磷酸键时，这相当于每个并入的氨基酸消耗 $2$ 个ATP当量。\n- 每个并入的氨基酸的延伸过程消耗 $2$ 个鸟苷三磷酸 (GTP) 分子（一个用于递送，一个用于移位）；每次GTP水解计为 $1$ 个ATP当量，因此总共为每个并入的氨基酸消耗 $2$ 个ATP当量。\n- 起始和终止过程共同消耗每个完成的多肽链 $2$ 个GTP的固定开销；这计为每个蛋白质消耗 $2$ 个ATP当量。\n- 忽略转录、信使核糖核酸 (mRNA) 更新、蛋白质折叠和翻译后加工的ATP成本，并假设核糖体和前体供应不是限制因素。\n\n在这些假设下，且不从维持需求中挪用任何ATP的情况下，该 $300$ aa 蛋白质的最大可持续生产速率是多少（以分子/秒表示）？将您的答案四舍五入至三位有效数字，并以“分子 s$^{-1}$”为单位报告。", "solution": "对问题陈述进行验证。\n\n**步骤1：提取已知条件**\n- ATP总生产速率，$R_{ATP, total} = 6 \\times 10^{9}\\ \\text{ATP s}^{-1}$。\n- 维持过程ATP消耗速率，$R_{ATP, maint} = 1 \\times 10^{9}\\ \\text{ATP s}^{-1}$。\n- 异源蛋白长度，$L_p = 300$ 氨基酸 (aa)。\n- tRNA装载成本，$C_{charge} = 2$ ATP当量/氨基酸。\n- 延伸成本，$C_{elong} = 2$ GTP/氨基酸。\n- 能量等价关系，$1$ GTP $= 1$ ATP当量。\n- 起始和终止的固定成本，$C_{fixed, \\text{GTP}} = 2$ GTP/多肽。\n- 假设：忽略转录、mRNA更新、蛋白质折叠和翻译后加工的成本。核糖体和前体供应不受限制。\n- 目标：计算蛋白质的最大可持续生产速率（单位：分子/秒），并四舍五入至三位有效数字。\n\n**步骤2：使用提取的已知条件进行验证**\n该问题具有科学依据，因为它基于分子生物学中生物能量学和代谢衡算的既定原则。提供的ATP生产速率和蛋白质合成成本的数值与像 *Escherichia coli* 这样的模式生物所报道的数据相符。该问题提法恰当，提供了计算出唯一且有意义的解所需的所有信息。问题陈述客观，没有歧义或矛盾。所做的假设，如忽略转录成本和假设资源不受限制，是此类模型中为分离翻译负荷影响而采用的常见且明确说明的简化方法。该问题既不简单也不故作高深；它需要基于基本原则进行一个直接但不那么显而易见的计算。\n\n**步骤3：结论与行动**\n问题被视为有效。将制定解决方案。\n\n解决方案首先确定可用于异源蛋白合成的ATP净通量，然后计算合成单个多肽的总能量成本，最后将可用通量除以单位成本得到最大生产速率。\n\n首先，我们计算可用于蛋白质生产的ATP供应速率 $R_{ATP, avail}$。这是总ATP生产速率 $R_{ATP, total}$ 减去维持过程所需的不可减少的速率 $R_{ATP, maint}$。\n$$R_{ATP, avail} = R_{ATP, total} - R_{ATP, maint}$$\n代入给定值：\n$$R_{ATP, avail} = (6 \\times 10^{9} - 1 \\times 10^{9})\\ \\text{ATP s}^{-1} = 5 \\times 10^{9}\\ \\text{ATP s}^{-1}$$\n这是每秒可用于合成异源蛋白的总能量通量。\n\n接下来，我们计算合成一个蛋白质分子的总成本（以ATP当量计），我们将其记为 $C_{protein}$。该成本是随蛋白质长度变化的变动成本与用于起始和终止的固定成本之和。\n\n变动成本与每个氨基酸的并入有关。对于 $L_p = 300$ 个氨基酸中的每一个，成本有两个组成部分：\n1.  装载一个tRNA分子的成本，$C_{charge} = 2$ ATP当量/氨基酸。\n2.  延伸（tRNA递送和移位）的成本，每个氨基酸消耗 $2$ 个GTP分子。鉴于 $1$ 个GTP等同于 $1$ 个ATP，该成本为 $C_{elong} = 2 \\times 1 = 2$ ATP当量/氨基酸。\n\n因此，每个氨基酸的总成本 $C_{aa}$ 为：\n$$C_{aa} = C_{charge} + C_{elong} = 2 + 2 = 4\\ \\text{ATP-equivalents per amino acid}$$\n长度为 $L_p$ 的蛋白质的总变动成本为：\n$$C_{variable} = C_{aa} \\times L_p = 4 \\times 300 = 1200\\ \\text{ATP-equivalents}$$\n用于起始和终止的固定成本 $C_{fixed}$ 为每个蛋白质 $2$ 个GTP。这相当于：\n$$C_{fixed} = 2\\ \\text{GTP} \\times \\frac{1\\ \\text{ATP-equivalent}}{1\\ \\text{GTP}} = 2\\ \\text{ATP-equivalents}$$\n合成一个蛋白质分子的总成本是变动成本与固定成本之和：\n$$C_{protein} = C_{variable} + C_{fixed} = 1200 + 2 = 1202\\ \\text{ATP-equivalents per molecule}$$\n最后，蛋白质的最大可持续生产速率 $P_{max}$ 是可用ATP供应速率除以每个蛋白质分子的成本：\n$$P_{max} = \\frac{R_{ATP, avail}}{C_{protein}}$$\n代入计算出的值：\n$$P_{max} = \\frac{5 \\times 10^{9}\\ \\text{ATP s}^{-1}}{1202\\ \\text{ATP molecule}^{-1}} \\approx 4159733.777\\ \\text{molecules s}^{-1}$$\n问题要求答案四舍五入至三位有效数字。\n$$P_{max} \\approx 4.16 \\times 10^{6}\\ \\text{molecules s}^{-1}$$\n这表示在指定的能量约束条件下，每秒可以合成的蛋白质分子的最大数量。", "answer": "$$\\boxed{4.16 \\times 10^{6}}$$", "id": "2750632"}, {"introduction": "除了单个蛋白质的成本，高效的工程设计还要求在不同组分之间优化资源分配。本练习探讨了代谢工程的一个核心原则：在固定的蛋白质预算下，当没有单一酶成为瓶颈时，途径通量才能最大化。通过解决这个问题，你将理解酶动力学参数（$k_{\\text{cat}}$）如何直接决定蛋白质质量的最佳投资，以实现期望的产出，这是设计高效多基因构建体的关键考量。", "problem": "在一种细菌中，一条工程化的两步线性生物合成途径通过两种串联的酶 $E_{1}$ 和 $E_{2}$，将一种丰富的前体转化为一种产物。在稳态下，途径通量受上游生理需求的限制，为一个固定值 $v$。两种酶都在底物饱和条件下运行，因此每一步的速率都等于其催化能力。假设有以下物理和生物学基础：\n- 在 Michaelis–Menten (MM) 动力学的饱和条件下，第 $i$ 步的速率为 $v_{i} = k_{\\text{cat},i} E_{i}$，其中 $k_{\\text{cat},i}$ 是转换数，$E_{i}$ 是具有催化活性的酶 $i$ 的摩尔浓度。\n- 通过串联步骤的稳态通量是相等的，因此 $v = v_{1} = v_{2}$。\n- 投入该途径的总蛋白质质量与 $E_{1} + E_{2}$ 成正比，因为两种酶每个活性位点的分子质量相等，并且在细胞质中每摩尔蛋白质的成本相同。\n- 除了与质量成正比的成本外，没有诸如拥挤效应或分子伴侣限制等额外的限制。\n\n给定 $k_{\\text{cat},1} = 100\\ \\text{s}^{-1}$ 和 $k_{\\text{cat},2} = 10\\ \\text{s}^{-1}$。对于一个固定的通量 $v$，确定分配给酶 $E_{1}$ 的质量分数，该分数使得维持该通量所需的总酶质量最小。将你的最终答案表示为一个代表分配给 $E_{1}$ 的总酶质量分数的单个数字（无单位）。你可以提供一个精确的分数。如果你选择用小数表示，请将答案四舍五入到五位有效数字。", "solution": "问题要求确定细胞资源的最优分配，具体来说，是在一个两步途径中，能使维持固定代谢通量 $v$ 所需总酶质量最小化的酶 $E_{1}$ 的质量分数。\n\n设两种酶的摩尔浓度分别为 $E_{1}$ 和 $E_{2}$。问题指出，两种酶每个活性位点的分子质量是相同的。因此，最小化总蛋白质质量等同于最小化酶的总摩尔浓度，我们将其表示为 $E_{total}$。\n$$E_{total} = E_{1} + E_{2}$$\n分配给酶 $E_{1}$ 的质量分数等同于其摩尔分数 $f_{1}$。\n$$f_{1} = \\frac{E_{1}}{E_{1} + E_{2}} = \\frac{E_{1}}{E_{total}}$$\n根据这个定义，我们可以用总浓度 $E_{total}$ 和分数 $f_{1}$ 来表示单个酶的浓度：\n$$E_{1} = f_{1} E_{total}$$\n$$E_{2} = (1 - f_{1}) E_{total}$$\n在底物饱和条件下，每个酶促步骤的速率 $v_{i}$ 由 Michaelis-Menten 方程给出，可简化为 $v_{i} = k_{\\text{cat},i} E_{i}$。将 $E_{1}$ 和 $E_{2}$ 的表达式代入，可将每一步的催化能力表示为 $f_{1}$ 和 $E_{total}$ 的函数：\n$$v_{1} = k_{\\text{cat},1} E_{1} = k_{\\text{cat},1} f_{1} E_{total}$$\n$$v_{2} = k_{\\text{cat},2} E_{2} = k_{\\text{cat},2} (1 - f_{1}) E_{total}$$\n线性途径的总通量 $v$ 受其最慢步骤（瓶颈）的速率限制。因此，稳态通量 $v$ 是各个步骤能力的最小值。\n$$v = \\min(v_{1}, v_{2}) = \\min(k_{\\text{cat},1} f_{1} E_{total}, k_{\\text{cat},2} (1-f_{1}) E_{total})$$\n目标是找到能使达到固定通量 $v$ 所需的总酶浓度 $E_{total}$ 最小化的分数 $f_{1}$。我们可以重新排列通量方程，将 $E_{total}$ 表示为 $f_{1}$ 和恒定通量 $v$ 的函数：\n$$E_{total}(f_{1}) = \\frac{v}{\\min(k_{\\text{cat},1} f_{1}, k_{\\text{cat},2} (1-f_{1}))}$$\n为了最小化 $E_{total}(f_{1})$，我们必须最大化其分母，我们将其定义为函数 $g(f_{1})$：\n$$g(f_{1}) = \\min(k_{\\text{cat},1} f_{1}, k_{\\text{cat},2} (1-f_{1}))$$\n函数 $g(f_{1})$ 表示在区间 $f_1 \\in [0, 1]$ 上两个关于 $f_{1}$ 的线性函数的最小值。$k_{\\text{cat},1} f_{1}$ 项是 $f_{1}$ 的单调递增函数，当 $f_1=0$ 时其值为 $0$。$k_{\\text{cat},2} (1-f_{1})$ 项是 $f_{1}$ 的单调递减函数，当 $f_1=0$ 时其值为 $k_{\\text{cat},2}$。这两个函数最小值的最大值出现在它们相等的那一点。在这一点上，途径被完美地平衡，没有一个步骤是瓶颈。\n我们通过将 $\\min$ 函数的两个参数设为相等来找到最优分数 $f_{1}$：\n$$k_{\\text{cat},1} f_{1} = k_{\\text{cat},2} (1-f_{1})$$\n解出 $f_{1}$：\n$$k_{\\text{cat},1} f_{1} = k_{\\text{cat},2} - k_{\\text{cat},2} f_{1}$$\n$$k_{\\text{cat},1} f_{1} + k_{\\text{cat},2} f_{1} = k_{\\text{cat},2}$$\n$$f_{1} (k_{\\text{cat},1} + k_{\\text{cat},2}) = k_{\\text{cat},2}$$\n$$f_{1} = \\frac{k_{\\text{cat},2}}{k_{\\text{cat},1} + k_{\\text{cat},2}}$$\n这个表达式给出了在给定总酶量的情况下，为最大化途径通量而必须分配给 $E_{1}$ 的总酶分数，这等同于在给定通量的情况下最小化所需的总酶量。\n现在，我们代入给定的转换数值：$k_{\\text{cat},1} = 100\\ \\text{s}^{-1}$ 和 $k_{\\text{cat},2} = 10\\ \\text{s}^{-1}$。\n$$f_{1} = \\frac{10}{100 + 10} = \\frac{10}{110} = \\frac{1}{11}$$\n分配给酶 $E_{1}$ 的最优分数是 $\\frac{1}{11}$。", "answer": "$$\\boxed{\\frac{1}{11}}$$", "id": "2750701"}, {"introduction": "为了在系统层面捕捉资源分配的全部复杂性，我们需要整合了全局约束的计算模型。本练习将指导你如何用全蛋白质组资源约束来增强经典的通量平衡分析（FBA），这一技术被称为p-FBA。这个动手编程实践展示了如何将基本生物学原理转化为强大的预测模型，使你能够在全基因组范围内探索生长与异源生产之间的权衡。", "problem": "要求您实现一个计算模型，该模型通过引入蛋白质组预算约束来扩展经典流平衡分析（FBA），以体现代谢负荷和资源分配。目标是从有效的基础原则出发，推导出一个线性优化问题，其解可以预测最大生长速率。然后，通过计算一组小而明确定义的网络中，受蛋白质组约束的最优值与经典FBA最优值的比率，来量化蛋白质组约束如何改变预测的最大生长速率。\n\n使用的基本原理：\n- 细胞内代谢物的稳态质量守恒意味着一个形式为 $$S v = 0$$ 的线性约束，其中 $S$ 是化学计量矩阵，$v$ 是反应通量向量，两者都在一个固定的网络上定义。\n- 酶的催化能力产生不等式 $$v_i \\leq E_i k_{\\text{cat},i}$$，其中 $v_i$ 是通量，$E_i$ 是催化反应 $i$ 的酶的浓度（或分配量），$k_{\\text{cat},i}$ 是反应 $i$ 的催化转换数，单位为 $\\text{h}^{-1}$。\n- 蛋白质组预算体现了对总酶分配量的资源约束，即 $$\\sum_i E_i \\leq \\phi_P^{\\max}$$，其中 $\\phi_P^{\\max}$ 是可用于建模的催化酶的无量纲蛋白质组分数。\n\n基于这些前提，推导出一个完全用通量和催化转换数表示的线性约束，该约束可以被整合到FBA中。将生长速率最大化问题表述为包含和不包含此推导约束的两种线性规划问题。假设生长速率等于流经生物质生成反应的通量。对每个测试网络求解这两个优化问题，并计算无量纲比率 $r = \\mu_{\\text{prot}} / \\mu_{\\text{classical}}$，其中 $\\mu_{\\text{prot}}$ 是带蛋白质组约束的最优生长速率，而 $\\mu_{\\text{classical}}$ 是不带该约束的最优生长速率。\n\n实现要求：\n- 对于每个网络，您必须在满足 $S v = 0$ 和边界约束 $l \\leq v \\leq u$ 的条件下，最大化线性目标 $c^\\top v$。该目标代表生物质通量；如果存在多个生物质生成反应，$c$ 可以有多个正值项。\n- 对于受蛋白质组约束的情况，添加您从酶催化能力和蛋白质组预算原则中推导出的单一线性不等式。\n- 不涉及角度。生长速率的单位是 $\\text{h}^{-1}$；然而，您需要输出的比率是无量纲的，并且必须表示为小数。\n\n测试套件：\n对于每个情景，网络由化学计量矩阵 $S$、目标系数向量 $c$、每个通量的下界 $l$ 和上界 $u$、催化转换数 $k_{\\text{cat}}$（单位为 $\\text{h}^{-1}$）以及蛋白质组预算 $\\phi_P^{\\max}$（无量纲）完全指定。在所有情景中，边界均为逐分量施加，无界的上界应视为 $+\\infty$。\n\n- 情景A（单路径生长；蛋白质组非限制性）：\n  - $$S = \\begin{bmatrix} 1 & -1 \\end{bmatrix}.$$\n  - $$c = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}.$$\n  - $$l = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}, \\quad u = \\begin{bmatrix} 10 \\\\ +\\infty \\end{bmatrix}.$$\n  - $$k_{\\text{cat}} = \\begin{bmatrix} 1000 \\\\ 1000 \\end{bmatrix} \\ \\text{h}^{-1}.$$\n  - $$\\phi_P^{\\max} = 0.05.$$\n\n- 情景B（单路径生长；蛋白质组限制性）：\n  - $$S = \\begin{bmatrix} 1 & -1 \\end{bmatrix}.$$\n  - $$c = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}.$$\n  - $$l = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}, \\quad u = \\begin{bmatrix} 10 \\\\ +\\infty \\end{bmatrix}.$$\n  - $$k_{\\text{cat}} = \\begin{bmatrix} 1000 \\\\ 1000 \\end{bmatrix} \\ \\text{h}^{-1}.$$\n  - $$\\phi_P^{\\max} = 0.001.$$\n\n- 情景C（两条替代生物质路线；产量与酶效率之间的权衡）：\n  - $$S = \\begin{bmatrix} 1 & -1 & -2 \\end{bmatrix}.$$\n  - $$c = \\begin{bmatrix} 0 \\\\ 1 \\\\ 3 \\end{bmatrix}.$$\n  - $$l = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\quad u = \\begin{bmatrix} 10 \\\\ +\\infty \\\\ +\\infty \\end{bmatrix}.$$\n  - $$k_{\\text{cat}} = \\begin{bmatrix} 500 \\\\ 2000 \\\\ 100 \\end{bmatrix} \\ \\text{h}^{-1}.$$\n  - $$\\phi_P^{\\max} = 0.02.$$\n\n- 情景D（单路径生长；蛋白质组预算为零）：\n  - $$S = \\begin{bmatrix} 1 & -1 \\end{bmatrix}.$$\n  - $$c = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}.$$\n  - $$l = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}, \\quad u = \\begin{bmatrix} 10 \\\\ +\\infty \\end{bmatrix}.$$\n  - $$k_{\\text{cat}} = \\begin{bmatrix} 1000 \\\\ 1000 \\end{bmatrix} \\ \\text{h}^{-1}.$$\n  - $$\\phi_P^{\\max} = 0.$$\n\n您的程序必须：\n- 对于每个情景，求解两个线性规划问题以获得 $\\mu_{\\text{classical}}$ 和 $\\mu_{\\text{prot}}$。\n- 计算比率 $r = \\mu_{\\text{prot}} / \\mu_{\\text{classical}}$，结果为小数并四舍五入到恰好 $6$ 位小数。\n- 生成单行输出，其中包含用逗号分隔的结果列表，并用方括号括起，按 A、B、C、D 的情景顺序排列，例如 `[r_A,r_B,r_C,r_D]`。\n\n所有输入均已在上方提供；无需用户输入。所有输出都必须是无量纲小数，并四舍五入到恰好 $6$ 位小数。请通过遵循所提供的数据和假设来确保科学真实性。", "solution": "所提出的问题是计算系统生物学中的一个有效练习，具体涉及将资源分配约束整合到流平衡分析中。该问题具有科学依据、是良定的，并且求解所需的所有参数均已提供。我们将首先推导所需的约束，然后建立优化问题的数学模型。\n\n提供的基本原则是：\n$1$. 每个反应 $i$ 的酶催化能力约束：\n$$v_i \\leq E_i k_{\\text{cat},i}$$\n其中 $v_i$ 是通量，$E_i$ 是酶浓度，$k_{\\text{cat},i}$ 是转换数。问题为所有通量指定了非负下界，因此我们考虑 $v_i \\geq 0$。\n\n$2$. 建模的酶的总蛋白质组预算：\n$$\\sum_i E_i \\leq \\phi_P^{\\max}$$\n其中 $\\phi_P^{\\max}$ 是可用的最大蛋白质组分数。\n\n我们的目标是通过消除酶浓度 $E_i$ 来推导关于通量 $v_i$ 的单一线性约束。从酶催化能力约束，我们可以得出维持通量 $v_i$ 所需的最小酶浓度。假设 $k_{\\text{cat},i} > 0$，我们重排不等式以求解 $E_i$：\n$$E_i \\geq \\frac{v_i}{k_{\\text{cat},i}}$$\n这个不等式给出了为实现通量 $v_i$ 而必须分配给酶 $i$ 的最小蛋白质组资源。为满足整个网络的蛋白质组预算，这些最小分配量在所有酶上的总和不得超过总可用预算 $\\phi_P^{\\max}$。对所有反应 $i$ 的最小需求求和：\n$$\\sum_i E_i \\geq \\sum_i \\frac{v_i}{k_{\\text{cat},i}}$$\n将此与蛋白质组预算约束相结合，我们得到所需的关系：\n$$\\sum_i \\frac{v_i}{k_{\\text{cat},i}} \\leq \\sum_i E_i \\leq \\phi_P^{\\max}$$\n这就得到了最终的线性不等式，它基于总蛋白质组预算来约束反应通量：\n$$\\sum_i \\frac{v_i}{k_{\\text{cat},i}} \\leq \\phi_P^{\\max}$$\n该约束可以用向量形式表示为 $a^\\top v \\leq \\phi_P^{\\max}$，其中向量 $a$ 的分量是催化转换数的倒数，$a_i = 1/k_{\\text{cat},i}$。\n\n现在我们可以建立所需的两个线性规划（LP）问题的数学模型。\n\n$1$. **经典流平衡分析（FBA）：**\n目标是最大化生长速率 $\\mu_{\\text{classical}}$，它由通量的线性组合 $c^\\top v$ 表示。\n- **最大化：** $\\mu_{\\text{classical}} = c^\\top v$\n- **约束条件：**\n  - $S v = 0$ (稳态质量平衡)\n  - $l \\leq v \\leq u$ (通量边界)\n\n$2$. **蛋白质组约束的FBA（p-FBA）：**\n这个数学模型与经典FBA相同，只是增加了推导出的蛋白质组约束。\n- **最大化：** $\\mu_{\\text{prot}} = c^\\top v$\n- **约束条件：**\n  - $S v = 0$\n  - $l \\leq v \\leq u$\n  - $\\sum_i \\frac{v_i}{k_{\\text{cat},i}} \\leq \\phi_P^{\\max}$ (蛋白质组预算)\n\n这些是标准的LP问题。为了使用一个典型的执行最小化的求解器（如 `scipy.optimize.linprog`）进行计算求解，我们将最大化 $c^\\top v$ 的问题重新表述为最小化 $-c^\\top v$。求解器得到的最优目标值，我们称之为 $\\mu^*$，通过 $\\mu = -\\mu^*$ 关联到最大生长速率。\n\n对于每个测试情景，我们求解两个LP问题以找到 $\\mu_{\\text{classical}}$ 和 $\\mu_{\\text{prot}}$。最终要求的量是无量纲比率 $r = \\mu_{\\text{prot}} / \\mu_{\\text{classical}}$，它量化了蛋白质组约束对预测的最大生长速率的影响。实现过程将包括为每个情景构建适当的矩阵和向量，并使用一个数值LP求解器。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves for the ratio of proteome-constrained to classical FBA optimal growth rates\n    for a series of test cases.\n    \"\"\"\n    test_cases = [\n        # Case A: single-path growth; proteome non-limiting\n        {\n            \"S\": np.array([[1, -1]]),\n            \"c\": np.array([0, 1]),\n            \"l\": np.array([0, 0]),\n            \"u\": np.array([10, np.inf]),\n            \"k_cat\": np.array([1000, 1000]),\n            \"phi_P_max\": 0.05\n        },\n        # Case B: single-path growth; proteome limiting\n        {\n            \"S\": np.array([[1, -1]]),\n            \"c\": np.array([0, 1]),\n            \"l\": np.array([0, 0]),\n            \"u\": np.array([10, np.inf]),\n            \"k_cat\": np.array([1000, 1000]),\n            \"phi_P_max\": 0.001\n        },\n        # Case C: two alternative biomass routes; trade-off\n        {\n            \"S\": np.array([[1, -1, -2]]),\n            \"c\": np.array([0, 1, 3]),\n            \"l\": np.array([0, 0, 0]),\n            \"u\": np.array([10, np.inf, np.inf]),\n            \"k_cat\": np.array([500, 2000, 100]),\n            \"phi_P_max\": 0.02\n        },\n        # Case D: single-path growth; zero proteome budget\n        {\n            \"S\": np.array([[1, -1]]),\n            \"c\": np.array([0, 1]),\n            \"l\": np.array([0, 0]),\n            \"u\": np.array([10, np.inf]),\n            \"k_cat\": np.array([1000, 1000]),\n            \"phi_P_max\": 0.0\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        S = case[\"S\"]\n        c = case[\"c\"]\n        l = case[\"l\"]\n        u = case[\"u\"]\n        k_cat = case[\"k_cat\"]\n        phi_P_max = case[\"phi_P_max\"]\n        \n        # Common parameters for linprog\n        # We maximize c'v by minimizing -c'v\n        c_obj = -c\n        A_eq = S\n        b_eq = np.zeros(S.shape[0])\n        \n        # Create bounds list, replacing np.inf with None for scipy\n        bounds = []\n        for i in range(len(l)):\n            upper_bound = u[i] if u[i] != np.inf else None\n            bounds.append((l[i], upper_bound))\n\n        # 1. Solve classical FBA\n        res_classical = linprog(c=c_obj, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n        \n        # The result from minimizing -c'v is -mu\n        mu_classical = -res_classical.fun if res_classical.success else 0.0\n\n        # 2. Solve proteome-constrained FBA\n        # Add the proteome constraint: sum(v_i / k_cat_i) <= phi_P_max\n        A_ub_prot = (1 / k_cat).reshape(1, -1)\n        b_ub_prot = [phi_P_max]\n        \n        res_prot = linprog(c=c_obj, A_eq=A_eq, b_eq=b_eq, A_ub=A_ub_prot, b_ub=b_ub_prot, bounds=bounds, method='highs')\n\n        mu_prot = -res_prot.fun if res_prot.success else 0.0\n        \n        # 3. Compute the ratio\n        if mu_classical > 1e-9:  # Avoid division by zero\n            ratio = mu_prot / mu_classical\n        else:\n            # If classical growth is zero, the ratio is ill-defined unless proteome-\n            # constrained growth is also zero, in which case one might consider the ratio to be 1.\n            # However, for the given problem, mu_classical is always positive.\n            # Case D gives mu_prot = 0, mu_classical = 10, so ratio is 0.\n            ratio = 0.0\n\n        results.append(f\"{ratio:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2750686"}]}