{"hands_on_practices": [{"introduction": "CRISPR-Cas9 介导的种系编辑通常会导致嵌合体，这意味着并非所有生殖细胞都携带期望的编辑。本练习应用基本的概率论来量化成功将编辑等位基因遗传给下一代的可能性。通过这个实践，你将学会如何从第一性原理出发，将孟德尔遗传和概率理论与CRISPR编辑结果的随机性联系起来 [@problem_id:2802363]。", "problem": "一个创始生物体经受了成簇规律间隔短回文重复序列 (Clustered Regularly Interspaced Short Palindromic Repeats, CRISPR)-Cas9 基因组编辑，该编辑靶向其生殖系中的单个常染色体基因座。发育后，对性腺组织的深度测序估计，在参与配子生成的单倍体基因组中，编辑后的等位基因占有的比例为 $f$。假设减数分裂遵循随机分配原则，且抽样配子是从一个非常大的配子池中独立抽取的，因此每个配子独立地携带编辑后等位基因的概率为 $f$。一名研究人员从该池中随机抽取 $n$ 个成熟配子，以筛查是否存在该编辑。\n\n仅从以下基本原理和定义出发：(i) 减数分裂产生单倍体配子，其中等位基因随机分离；(ii) 参与配子生成的单倍体基因组中，估计的等位基因比例 $f$ 可解释为随机选择的单个配子携带编辑后等位基因的概率；(iii) 独立试验的概率相乘；以及 (iv) 一个事件的补集概率等于一减去该事件本身的概率，请推导一个关于 $f$ 和 $n$ 的闭式解析表达式，用于表示在 $n$ 个抽样配子中至少有一个携带编辑后等位基因的概率。\n\n请将您的最终答案表示为关于 $f$ 和 $n$ 的单个简化解析表达式。无需单位。请勿提供数值近似值。", "solution": "问题陈述已经过严格验证，被认为是有效的。它具有科学依据，问题设定良好，客观且内部一致。它基于遗传学和概率论的既定原则，提供了一个可形式化的场景，不含任何事实错误、歧义或矛盾。任务是从第一性原理出发推导一个表达式，这是定量科学中一项标准且有意义的练习。\n\n设 $A$ 为事件“$n$ 个抽样配子中至少有一个携带编辑后等位基因”。目标是求出此事件的概率 $P(A)$。\n\n直接计算 $P(A)$ 将需要对所有 $k$ 值（从 $1$ 到 $n$）观察到恰好 $k$ 个编辑后配子的概率进行求和：\n$$P(A) = \\sum_{k=1}^{n} P(\\text{恰好 } k \\text{ 个编辑后配子})$$\n这是一条正确但过于复杂的路径。一种更有效的推导方法是利用补集原理，即问题陈述中提供的四个基本原理之一。\n\n设 $A^c$ 为事件 $A$ 的补集。事件 $A^c$ 指的是“$n$ 个抽样配子中*没有一个*携带编辑后等位基因”。根据原理 (iv)，一个事件与其补集概率之间的关系是：\n$$P(A) = 1 - P(A^c)$$\n我们现在来推导 $P(A^c)$ 的表达式。\n\n设 $E_i$ 表示第 $i$ 个抽样配子携带编辑后等位基因的事件，其中 $i \\in \\{1, 2, \\dots, n\\}$。\n根据原理 (ii)，对于任何单个配子，此事件的概率为 $f$：\n$$P(E_i) = f$$\n$E_i$ 的补集，记作 $E_i^c$，是第 $i$ 个配子*不*携带编辑后等位基因的事件。对单次试验使用原理 (iv)：\n$$P(E_i^c) = 1 - P(E_i) = 1 - f$$\n事件 $A^c$（大小为 $n$ 的样本中没有编辑后配子）是所有 $n$ 个独立事件 $E_1^c, E_2^c, \\dots, E_n^c$ 同时发生。这可以写成这些事件的交集：\n$$A^c = E_1^c \\cap E_2^c \\cap \\dots \\cap E_n^c$$\n问题陈述指出配子是独立抽取的。这使得我们可以使用原理 (iii)，该原理指出一系列独立事件的概率是它们各自概率的乘积。因此：\n$$P(A^c) = P(E_1^c) \\times P(E_2^c) \\times \\dots \\times P(E_n^c)$$\n由于在所有 $n$ 次试验中，概率 $P(E_i^c) = 1 - f$ 是相同的，这个乘积简化为：\n$$P(A^c) = (1 - f) \\times (1 - f) \\times \\dots \\times (1 - f) \\quad (n \\text{ 次})$$\n$$P(A^c) = (1 - f)^{n}$$\n最后，我们将这个 $P(A^c)$ 的表达式代回到 $P(A)$ 的方程中：\n$$P(A) = 1 - (1 - f)^{n}$$\n这就是严格根据所提供的基本原理推导出的、$n$ 个抽样配子中至少有一个携带编辑后等位基因的概率的闭式解析表达式。", "answer": "$$\\boxed{1 - (1-f)^{n}}$$", "id": "2802363"}, {"introduction": "在CRISPR基因组编辑中，一个核心挑战是确保Cas9酶仅在目标位点进行切割，避免脱靶效应。本练习旨在通过构建一个简化的特异性评分模型，来量化评估单个引导RNA (sgRNA) 的脱靶风险。更重要的是，它将促使你批判性地思考该模型的局限性，例如染色质可及性和非种子区域错配的影响，从而培养对计算工具背后假设的深刻理解 [@problem_id:2626133]。", "problem": "一个发育生物学实验室计划在小鼠早期原肠胚形成期间，使用带有单导向RNA (sgRNA)的成簇规律间隔短回文重复序列/CRISPR相关蛋白9 (CRISPR/Cas9)来破坏一个转录因子基因座。该sgRNA的标准长度为$20$个核苷酸，其鸟嘌呤-胞嘧啶(GC)含量为$g=0.62$。全基因组与小鼠参考基因组的比对，识别出$m=7$个基因座（不包括预期的靶向基因座），这些基因座与一个典型的原间隔子邻近基序(PAM)旁边的$10$个核苷酸长度的原间隔子“种子”区域完全匹配，因此在一个简化的基于种子的模型下，它们是可能的脱靶位点。为了建立一个刻意简化的模型，假设在任何给定的编辑事件中，每个与种子区域匹配的基因座（包括靶向基因座）被CRISPR/Cas9核糖核蛋白结合和切割的可能性相等，并且这些事件在不同基因座之间是独立且同分布的。仅使用概率归一化和这个等概率事件假设，推导出一个简化的特异性得分$S(m)$的符号表达式。该得分定义为任何给定的切割事件发生在预期靶向基因座的概率，并仅用$m$表示。然后，计算当$m=7$时该表达式的值。将最终数值答案以无单位小数的形式报告，并四舍五入到四位有效数字。在推理过程中，请从第一性原理出发，解释该表达式是如何从假设中得出的，并简要阐述在发育基因组编辑的背景下，这种评分方法的两个具体生物学局限性，在相关处引用给定的GC含量$g$。", "solution": "对问题陈述进行有效性分析。\n\n逐字提取已知条件：\n1.  系统：在小鼠早期原肠胚形成中使用带有单导向RNA (sgRNA)的CRISPR/Cas9。\n2.  sgRNA长度：$20$个核苷酸。\n3.  sgRNA鸟嘌呤-胞嘧啶(GC)含量：$g=0.62$。\n4.  已识别的脱靶基因座数量：$m=7$。\n5.  脱靶标准：与一个典型的原间隔子邻近基序(PAM)旁边的$10$个核苷酸长度的原间隔子“种子”区域完全匹配。这$m=7$个基因座不包括预期的靶向基因座。\n6.  假设1：每个与种子区域匹配的基因座（靶向基因座和$m$个脱靶基因座）被结合和切割的可能性相等。\n7.  假设2：事件在不同基因座之间是独立且同分布的。\n8.  定义：一个简化的特异性得分$S(m)$是任何给定的切割事件发生在预期靶向基因座的概率。\n9.  约束：$S(m)$的表达式必须只用$m$表示。\n10. 任务：计算当$m=7$时$S(m)$的值，并四舍五入到四位有效数字。\n11. 任务：阐述该模型的两个具体生物学局限性。\n\n验证结论：\n此问题有效。它提出了一个基于分子生物学既定概念（CRISPR/Cas9基因组编辑）的简化但定义明确的理论模型。其中的假设虽然在生物学上是简化的，但为了模型目的而明确陈述，这是定量问题解决的标准做法。该问题是自洽的、逻辑一致的，并且同时需要数学推导和概念性的生物学推理。它在科学上并非不健全、不完整或模棱两可。因此，将提供解答。\n\n该问题要求在一组刻意简化的假设下推导特异性得分$S(m)$。让我们从第一性原理出发进行推导。\n\n问题的核心在于为单个切割事件定义可能结果的样本空间。该模型假定，切割只能发生在那些与$10$个核苷酸长度的种子区域完全匹配且邻近一个典型PAM的基因座上。根据已知条件，有$1$个这样的预期靶向基因座和$m$个这样的脱靶基因座。\n\n设$N$为该模型下易受切割的基因座总数。这个集合包括单个靶向基因座和$m$个脱靶基因座。因此，潜在切割位点的总数是：\n$$N = 1 + m$$\n问题陈述指出“每个与种子区域匹配的基因座……被结合和切割的可能性相等”。这是一个关于有限样本空间上均匀概率分布的经典假设。样本空间$\\Omega$由所有可能的切割事件集合构成，每个易受切割的基因座对应一个事件。这个样本空间的大小为 $|\\Omega| = N = 1+m$。\n\n特异性得分$S(m)$定义为任意给定的切割事件发生在预期靶向基因座的概率。设$A$为切割发生在靶向基因座上的事件。在我们的样本空间中，只有一个这样的结果。因此，对事件$A$有利的结果数量为 $|A|=1$。\n\n根据等可能结果的概率基本定义，一个事件的概率是该事件的有利结果数与所有可能结果总数的比值。\n$$P(A) = \\frac{\\text{有利结果数}}{\\text{所有可能结果总数}}$$\n将此定义应用于我们的问题，特异性得分$S(m)$的表达式为：\n$$S(m) = \\frac{|A|}{|\\Omega|} = \\frac{1}{1+m}$$\n该表达式仅用$m$表示，符合问题陈述的要求。\n\n接下来，我们必须计算当给定值$m=7$时该表达式的值。\n将$m=7$代入我们推导出的公式：\n$$S(7) = \\frac{1}{1+7} = \\frac{1}{8}$$\n为了将其报告为四舍五入到四位有效数字的小数，我们进行除法运算：\n$$\\frac{1}{8} = 0.125$$\n为了用四位有效数字表示，我们在末尾添加一个零，在这种情况下，这个零是有效的。\n$$S(7) = 0.1250$$\n\n最后，问题要求阐述这种简化评分方法的两个具体生物学局限性。其核心缺陷在于假设所有与种子区域匹配的位点都具有相等的切割概率。\n\n1.  **染色质可及性**：该模型将基因组视为裸露的、均一可及的DNA聚合物。这在生物学上是不正确的。在真核细胞核中，DNA与组蛋白复合形成染色质，后者以不同的压缩状态存在。一个位于高度浓缩的异染色质区域内的潜在脱靶位点，对于巨大的CRISPR/Cas9核糖核蛋白复合物来说存在空间位阻，因此无论其序列同一性如何，都极不可能被切割。相反，位于开放常染色质内的位点则更易接近。在像小鼠原肠胚形成这样的动态发育过程中，染色质景观会主动重塑，使得可及性成为一个决定Cas9活性的关键且可变的因素，而这一点被模型完全忽略了。\n\n2.  **种子区域外的错配和双链稳定性的影响**：该模型判断一个可能的脱靶位点的标准仅仅是与$10$个核苷酸的种子区域完全匹配。它完全忽略了$20$个核苷酸sgRNA结合位点的其余部分。实际上，在种子区域之外，sgRNA与DNA靶标之间错配的数量、位置和类型深刻影响切割效率。虽然种子区域对初始结合至关重要，但非种子部分的大量错配会破坏sgRNA-DNA双链的稳定性，并阻止核酸酶激活所需的Cas9蛋白构象变化。此外，RNA-DNA杂交链的热力学稳定性受其总GC含量（给定为$g=0.62$）的影响，进而影响结合亲和力和动力学。一个具有完美种子区但在其他位置有较低GC含量或不稳定错配的位点，其切割效率将远低于在整个$20$个核苷酸长度上完全匹配的靶向位点。模型的等概率假设错误地将这些截然不同的情况等同起来。", "answer": "$$\\boxed{0.1250}$$", "id": "2626133"}, {"introduction": "CRISPR-Cas9 编辑的最终目标往往是实现基因功能的敲除，但这取决于修复过程产生的具体插入或缺失 (indel) 类型。本综合性编程练习要求你构建一个计算模型，该模型整合了实验测得的indel谱、蛋白质结构域信息以及移码突变的概率后果。通过这项实践，你将学习如何将分子层面的编辑事件分布转化为一个宏观的、具有生物学意义的指标——即基因功能丧失的总概率 [@problem_id:2725970]。", "problem": "编写一个完整的、可运行的程序，该程序从分子生物学和概率论的基本定义出发，在给定一个indel谱和源自蛋白质结构域架构的基因特异性截短耐受性的情况下，计算经过CRISPR-Cas9介导的编辑后，基因被功能性敲除的概率。该程序必须实现以下有科学依据的假设和定义，且不使用任何外部数据或用户输入。\n\n使用的基本原理：\n- 分子生物学中心法则：脱氧核糖核酸 (DNA) 转录为核糖核酸 (RNA)，并以$3$个核苷酸大小的密码子翻译成蛋白质；开放阅读框由模$3$的相位决定。以非$3$的倍数改变编码序列长度的插入或缺失会引发移码，通常导致提前终止。\n- 在移码后的框架中，当遇到终止密码子时会发生提前终止。在一个简化的、广泛使用的模型下，随机框架中的终止密码子以每个密码子概率$s$（在每次测试中视为常数）出现，这导致在终止前可翻译的额外氨基酸数量服从几何分布。\n- 蛋白质结构域是结构和功能单元；基因的功能性可能要求每个必需结构域在任何截短或框内编辑后，至少保留其氨基酸的指定比例。在结构域内超过特定阈值的插入是破坏性的。\n\n要实现的模型定义：\n- 编码序列长度$L$以核苷酸为单位指定，且$L$可被$3$整除。设$L_{\\mathrm{aa}} = L/3$为以氨基酸为单位的蛋白质长度。\n- Cas9切割位点模拟在氨基酸索引$p$（从1开始计数）处，意味着第一个可能受indel影响的氨基酸位于位置$p$。位置小于$p$的氨基酸在任何切割后效应发生前是完整的。\n- 基因有一组必需结构域，每个由一个四元组$(a_i, b_i, f_i, g_i)$表示：\n  - $a_i$和$b_i$是从1开始计数的氨基酸索引，满足$1 \\le a_i \\le b_i \\le L_{\\mathrm{aa}}$。\n  - $f_i \\in [0,1]$是为保留功能，结构域$i$必须保持完整的最小比例。\n  - $g_i \\in \\mathbb{N}_0$是在不丧失功能的情况下，可在结构域$i$内某一位点插入的最大氨基酸数量。\n- 在移码框架中，每个密码子的终止概率为$s \\in (0,1)$，这引出了在切割后、遇到终止密码子前翻译的额外氨基酸数量的几何分布。\n\nIndel谱：\n- 每个编辑结果是一个元组$(\\text{type}, \\ell, q)$，其中$\\text{type} \\in \\{\\text{\"ins\"}, \\text{\"del\"}, \\text{\"none\"}\\}$，$\\ell$是indel的长度（单位：核苷酸）（对于$\\text{\"none\"}$，设$\\ell = 0$），$q$是其概率，所有$q$的总和为$1$。\n- $\\ell \\bmod 3 \\ne 0$的结果是移码（包括插入和缺失），$\\ell \\bmod 3 = 0$的结果是框内（同样包括插入和缺失）。$\\text{\"none\"}$结果使蛋白质保持不变。\n\n要实现的功能丧失规则：\n- 移码结果：\n  - 设$T$为在移码后、遇到终止密码子前翻译出的额外氨基酸的非负整数数量；根据参数为$s$的几何模型，$T$的支撑集为$\\{0,1,2,\\dots\\}$。\n  - 截短蛋白质的长度（以氨基酸为单位）为$L_{\\text{trunc}} = \\min\\{L_{\\mathrm{aa}}, (p-1) + T\\}$。\n  - 对于每个长度为$n_i = b_i - a_i + 1$的结构域$i$，为了保留功能，$L_{\\text{trunc}}$中必须存在该结构域至少$\\lceil f_i \\cdot n_i \\rceil$个氨基酸。如果$b_i \\le p-1$，则该结构域完全完整；如果$a_i \\ge p$，则其完全位于下游；否则它横跨切割位点。\n  - 从第一性原理推导出每个结构域满足其完整性比例所需的最小$L_{\\text{trunc}}$，从而得出所有结构域的最低要求；使用几何分布的尾部概率计算移码保留功能的概率。移码结果的功能丧失概率是1减去此保留概率。\n- 框内缺失结果（$\\ell \\bmod 3 = 0$，类型$\\text{\"del\"}$）：\n  - 设$D_{\\mathrm{aa}} = \\ell/3$为被删除的氨基酸数量，假定它们是一个从$p$开始并延伸至$p + D_{\\mathrm{aa}} - 1$（含）的连续片段。\n  - 对于每个结构域$i$，计算被删除片段与$[a_i,b_i]$之间的重叠长度。如果对于任何结构域，其完整部分$(n_i - \\text{overlap})/n_i$严格小于$f_i$，则此结果为功能丧失；否则不是。\n- 框内插入结果（$\\ell \\bmod 3 = 0$，类型$\\text{\"ins\"}$）：\n  - 设$I_{\\mathrm{aa}} = \\ell/3$为在位置$p$处插入的氨基酸数量。\n  - 如果对于任何结构域$i$，$p \\in [a_i,b_i]$且$I_{\\mathrm{aa}} > g_i$，则此结果为功能丧失；否则不是。\n- 无编辑结果（$\\text{\"none\"}$）不会导致功能丧失。\n\n总体敲除概率：\n- 功能性敲除的总概率是整个indel谱上功能丧失指标的概率加权和。为每个测试案例以小数形式表示最终答案。\n\n测试套件：\n提供代码，为以下$5$个案例计算敲除概率。每个案例都是独立的，必须完全按照规定进行评估。\n\n- 案例 1：\n  - $L = 1500$, $p = 100$, $s = 0.05$。\n  - 结构域：$\\{(50, 150, 0.9, 2), (300, 400, 0.5, 5)\\}$。\n  - Indel谱（每个条目为$(\\text{type}, \\ell, q)$）：\n    - $(\\text{\"del\"}, 1, 0.2)$,\n    - $(\\text{\"del\"}, 3, 0.15)$,\n    - $(\\text{\"del\"}, 9, 0.05)$,\n    - $(\\text{\"ins\"}, 1, 0.1)$,\n    - $(\\text{\"ins\"}, 3, 0.1)$,\n    - $(\\text{\"ins\"}, 6, 0.1)$,\n    - $(\\text{\"none\"}, 0, 0.3)$。\n- 案例 2：\n  - $L = 300$, $p = 95$, $s = 0.05$。\n  - 结构域：$\\{(1, 90, 0.8, 3)\\}$。\n  - Indel谱：\n    - $(\\text{\"del\"}, 1, 0.4)$,\n    - $(\\text{\"ins\"}, 2, 0.4)$,\n    - $(\\text{\"ins\"}, 3, 0.2)$。\n- 案例 3：\n  - $L = 900$, $p = 1$, $s = 0.05$。\n  - 结构域：$\\{\\}$ (无必需结构域)。\n  - Indel谱：\n    - $(\\text{\"del\"}, 1, 0.5)$,\n    - $(\\text{\"ins\"}, 1, 0.2)$,\n    - $(\\text{\"ins\"}, 3, 0.3)$。\n- 案例 4：\n  - $L = 1200$, $p = 50$, $s = 0.06$。\n  - 结构域：$\\{(1, 120, 1.0, 0)\\}$。\n  - Indel谱：\n    - $(\\text{\"del\"}, 1, 0.25)$,\n    - $(\\text{\"ins\"}, 2, 0.25)$,\n    - $(\\text{\"ins\"}, 5, 0.1)$,\n    - $(\\text{\"ins\"}, 3, 0.1)$,\n    - $(\\text{\"del\"}, 6, 0.3)$。\n- 案例 5：\n  - $L = 1800$, $p = 350$, $s = 0.04$。\n  - 结构域：$\\{(100, 200, 0.7, 3), (320, 500, 0.8, 2)\\}$。\n  - Indel谱：\n    - $(\\text{\"del\"}, 3, 0.2)$,\n    - $(\\text{\"ins\"}, 3, 0.2)$,\n    - $(\\text{\"del\"}, 30, 0.1)$,\n    - $(\\text{\"ins\"}, 6, 0.1)$,\n    - $(\\text{\"del\"}, 1, 0.2)$,\n    - $(\\text{\"ins\"}, 2, 0.2)$。\n\n要求输出：\n- 您的程序必须为每个案例计算一个浮点数形式的敲除概率。\n- 将每个概率表示为精确到小数点后$6$位的小数。\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表（例如，$[\\text{result}_1,\\text{result}_2,\\dots,\\text{result}_5]$），且不含空格。\n\n角度单位不适用。不涉及物理单位。所有概率必须是小数，而不是百分比。", "solution": "问题陈述在计算合成生物学领域提出了一个定义明确且有科学依据的问题。该问题是自洽的、一致的，并且没有使其无效的缺陷。我们将根据所提供的第一性原理推导解决方案。\n\n功能性敲除的总概率，记为$P(\\text{KO})$，是通过对所有导致功能丧失（LoF）的单个编辑结果的概率求和来计算的。对于由具有概率$q_j$的结果$j$组成的indel谱，总敲除概率为：\n$$ P(\\text{KO}) = \\sum_j q_j \\cdot \\mathbb{I}(\\text{结果 } j \\text{ 导致LoF}) $$\n其中$\\mathbb{I}(\\cdot)$是指示函数，当条件为真时其值为$1$，否则为$0$。因此，我们必须确定每类结果的LoF条件。\n\n问题指定了一个基因，其编码序列长度为$L$个核苷酸，对应于长度为$L_{\\mathrm{aa}} = L/3$个氨基酸的蛋白质。CRISPR-Cas9切割位点位于氨基酸位置$p$（从1开始计数）。基因的功能性取决于一组必需结构域，每个结构域由一个元组$(a_i, b_i, f_i, g_i)$描述。\n\n我们根据每种结果类型对开放阅读框的影响进行分析。\n\n**1. 移码结果**\n长度为$\\ell$个核苷酸且$\\ell \\pmod 3 \\neq 0$的插入或缺失会导致移码。由于在新阅读框中遇到提前终止密码子的概率很高，这必然会导致产生一个截短的蛋白质产物。仅当截短的蛋白质足够长，以保留所有必需结构域的所需部分时，蛋白质功能才得以保留。\n\n设$T$为在移码后、遇到终止密码子前翻译出的额外氨基酸数量。根据模型，$T$是一个随机变量，服从成功概率为$s$的几何分布（其中成功指遇到终止密码子）。其概率质量函数为$P(T=k) = (1-s)^k s$，对于$k \\in \\{0, 1, 2, \\dots\\}$。生成的截短蛋白质的氨基酸长度为$L_{\\text{trunc}} = \\min\\{L_{\\mathrm{aa}}, (p-1) + T\\}$，其中$(p-1)$是蛋白质完整的N端部分的长度。\n\n对于每个从$a_i$开始到$b_i$结束的必需结构域$i$，其长度为$n_i = b_i - a_i + 1$。功能性要求该结构域至少有$m_i = \\lceil f_i \\cdot n_i \\rceil$个氨基酸得以保留。为了使蛋白质具有功能，结构域$i$的完整氨基酸数量，即区间$[a_i, b_i]$与$[1, L_{\\text{trunc}}]$的交集大小，必须至少为$m_i$。此条件当且仅当截短的蛋白质包含该结构域的前$m_i$个氨基酸时才满足。因此，结构域$i$所需的最后一个氨基酸位置是$c_i = a_i + m_i - 1$。\n\n为了使整个蛋白质保持功能，此条件必须对所有必需结构域都成立。这要求截短的蛋白质长度$L_{\\text{trunc}}$必须至少是所有此类所需位置的最大值。设$L_{\\text{trunc,min}} = \\max_i \\{c_i\\}$。如果没有必需结构域，我们定义$L_{\\text{trunc,min}} = 0$。\n如果$L_{\\text{trunc}} \\ge L_{\\text{trunc,min}}$，则功能得以保留。代入$L_{\\text{trunc}}$的表达式，我们得到：\n$$ \\min\\{L_{\\mathrm{aa}}, (p-1) + T\\} \\ge L_{\\text{trunc,min}} $$\n如果$L_{\\text{trunc,min}} > L_{\\mathrm{aa}}$，则不可能满足此条件，保留功能的概率为$0$。否则，该条件简化为$(p-1) + T \\ge L_{\\text{trunc,min}}$，即$T \\ge L_{\\text{trunc,min}} - (p-1)$。设$T_{\\min} = \\max\\{0, L_{\\text{trunc,min}} - (p-1)\\}$。保留功能的概率是几何分布的尾部概率，$P(T \\ge T_{\\min})$。\n$$ P(\\text{保留功能} | \\text{移码}) = \\sum_{k=T_{\\min}}^{\\infty} (1-s)^k s = (1-s)^{T_{\\min}} $$\n因此，任何移码结果导致功能丧失的概率为$P(\\text{LoF} | \\text{移码}) = 1 - (1-s)^{T_{\\min}}$。\n\n**2. 框内缺失结果**\n长度为$\\ell$的缺失，其中$\\ell \\pmod 3 = 0$且$\\ell > 0$，会导致$D_{\\mathrm{aa}} = \\ell/3$个氨基酸的框内缺失。问题陈述该缺失跨越从氨基酸$p$到$p+D_{\\mathrm{aa}}-1$的片段，即区间$S_{del} = [p, p+D_{\\mathrm{aa}}-1]$。\n如果此结果破坏了任何必需结构域，则会导致LoF。对于一个跨越$[a_i, b_i]$的结构域$i$，我们计算其损失的氨基酸数量，即$S_{del}$与$[a_i, b_i]$交集的长度。重叠长度为$\\text{overlap}_i = \\max\\{0, \\min(b_i, p+D_{\\mathrm{aa}}-1) - \\max(a_i, p) + 1 \\}$。\n结构域中剩余的氨基酸数量为$n_i - \\text{overlap}_i$。如果剩余氨基酸的比例小于所需比例$f_i$，则结构域被破坏，导致LoF：\n$$ \\frac{n_i - \\text{overlap}_i}{n_i} < f_i $$\n如果此条件对任何必需结构域$i$成立，则该结果被分类为LoF。\n\n**3. 框内插入结果**\n长度为$\\ell$的插入，其中$\\ell \\pmod 3 = 0$且$\\ell > 0$，会导致在位置$p$处插入$I_{\\mathrm{aa}} = \\ell/3$个氨基酸。如果插入发生在必需结构域内且其大小超过该结构域的耐受性，则会导致LoF。对于每个参数为$(a_i, b_i, f_i, g_i)$的结构域$i$，如果插入位点$p$位于结构域的边界内，并且插入大小$I_{\\mathrm{aa}}$大于耐受大小$g_i$，则发生LoF：\n$$ (p \\in [a_i, b_i]) \\land (I_{\\mathrm{aa}} > g_i) $$\n如果此条件对任何必需结构域$i$成立，则该结果为LoF。\n\n**4. 其他结果**\n- “none”结果代表未编辑的等位基因，不会导致LoF。其对$P(\\text{KO})$的贡献为$0$。\n- 如果没有指定必需结构域（空集），则根据给定规则，任何结果都不会导致LoF，总$P(\\text{KO})$为$0$。\n\n总$P(\\text{KO})$是根据上述原理计算的，来自indel谱中每个结果$j$的贡献$q_j \\cdot P(\\text{LoF}_j)$的总和。", "answer": "```python\nimport math\nimport numpy as np\n\ndef calculate_ko_probability(L, p, s, domains, spectrum):\n    \"\"\"\n    Computes the knockout probability based on the provided model.\n    \"\"\"\n    total_ko_prob = 0.0\n    L_aa = L / 3.0\n\n    # Pre-calculate the probability of loss of function for any frameshift event,\n    # as it is constant for a given gene and cut site configuration.\n    c_i_list = []\n    for (a_i, b_i, f_i, g_i) in domains:\n        n_i = float(b_i - a_i + 1)\n        # Required number of intact amino acids for domain i\n        m_i = np.ceil(f_i * n_i)\n        # Position of the last required amino acid for domain i\n        c_i = a_i + m_i - 1\n        c_i_list.append(c_i)\n    \n    # Minimum required length of a truncated protein to be functional.\n    # max of an empty list would error, so start with [0].\n    L_trunc_min = max([0] + c_i_list)\n\n    prob_lof_frameshift = 0.0\n    if L_trunc_min > L_aa:\n        # If the minimally required length is greater than the full protein length,\n        # retention is impossible.\n        prob_lof_frameshift = 1.0\n    else:\n        # Minimum number of additional amino acids needed after the cut.\n        # Position p is 1-based, so (p-1) amino acids precede the cut.\n        T_min = max(0, L_trunc_min - (p - 1))\n        # Probability of retention is the tail probability of the geometric distribution.\n        prob_retain = (1.0 - s)**T_min\n        prob_lof_frameshift = 1.0 - prob_retain\n\n    for (type_outcome, l, q) in spectrum:\n        is_lof = False\n        \n        if type_outcome == \"none\":\n            is_lof = False\n        elif l % 3 != 0:  # Frameshift (insertion or deletion)\n            # For frameshifts, the LoF probability is calculated once and applied here.\n            total_ko_prob += q * prob_lof_frameshift\n            continue  # Proceed to the next outcome in the spectrum\n        elif l > 0:  # In-frame (insertion or deletion)\n            if type_outcome == \"del\":\n                D_aa = l // 3\n                del_start = p\n                del_end = p + D_aa - 1\n                for (a_i, b_i, f_i, g_i) in domains:\n                    n_i = float(b_i - a_i + 1)\n                    \n                    overlap_start = max(a_i, del_start)\n                    overlap_end = min(b_i, del_end)\n                    overlap_len = float(max(0, overlap_end - overlap_start + 1))\n                    \n                    # LoF if domain's intact fraction is below threshold\n                    if n_i > 0 and (n_i - overlap_len) / n_i  f_i:\n                        is_lof = True\n                        break\n            elif type_outcome == \"ins\":\n                I_aa = l // 3\n                for (a_i, b_i, f_i, g_i) in domains:\n                    # LoF if insertion is in-domain and larger than tolerance\n                    if a_i = p = b_i and I_aa > g_i:\n                        is_lof = True\n                        break\n        \n        if is_lof:\n            total_ko_prob += q\n            \n    return total_ko_prob\n\ndef solve():\n    \"\"\"\n    Main function to define test cases and compute results.\n    \"\"\"\n    test_cases = [\n        {\n            \"L\": 1500, \"p\": 100, \"s\": 0.05,\n            \"domains\": [(50, 150, 0.9, 2), (300, 400, 0.5, 5)],\n            \"spectrum\": [\n                (\"del\", 1, 0.2), (\"del\", 3, 0.15), (\"del\", 9, 0.05),\n                (\"ins\", 1, 0.1), (\"ins\", 3, 0.1), (\"ins\", 6, 0.1),\n                (\"none\", 0, 0.3)\n            ]\n        },\n        {\n            \"L\": 300, \"p\": 95, \"s\": 0.05,\n            \"domains\": [(1, 90, 0.8, 3)],\n            \"spectrum\": [(\"del\", 1, 0.4), (\"ins\", 2, 0.4), (\"ins\", 3, 0.2)]\n        },\n        {\n            \"L\": 900, \"p\": 1, \"s\": 0.05,\n            \"domains\": [],\n            \"spectrum\": [(\"del\", 1, 0.5), (\"ins\", 1, 0.2), (\"ins\", 3, 0.3)]\n        },\n        {\n            \"L\": 1200, \"p\": 50, \"s\": 0.06,\n            \"domains\": [(1, 120, 1.0, 0)],\n            \"spectrum\": [\n                (\"del\", 1, 0.25), (\"ins\", 2, 0.25), (\"ins\", 5, 0.1),\n                (\"ins\", 3, 0.1), (\"del\", 6, 0.3)\n            ]\n        },\n        {\n            \"L\": 1800, \"p\": 350, \"s\": 0.04,\n            \"domains\": [(100, 200, 0.7, 3), (320, 500, 0.8, 2)],\n            \"spectrum\": [\n                (\"del\", 3, 0.2), (\"ins\", 3, 0.2), (\"del\", 30, 0.1),\n                (\"ins\", 6, 0.1), (\"del\", 1, 0.2), (\"ins\", 2, 0.2)\n            ]\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = calculate_ko_probability(\n            case[\"L\"], case[\"p\"], case[\"s\"],\n            case[\"domains\"], case[\"spectrum\"]\n        )\n        results.append(f\"{result:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2725970"}]}