{"hands_on_practices": [{"introduction": "在植物合成生物学中，设计可预测的基因表达调控元件是构建复杂遗传线路的基础。本练习将通过一个核心的数学模型——希尔函数，来探索转录因子浓度与基因表达输出之间的非线性关系。通过计算和分析一个合成启动子的响应曲线及其灵敏度，你将深入理解基因开关的“开启”、“关闭”和转换区域的行为，这对于设计响应特定信号的稳定生物传感器至关重要。[@problem_id:2759991]", "problem": "在一项植物原生质体转录分析中，一个合成启动子被一个二聚化转录因子（TF）激活。根据基因调控的标准占据模型，启动子活性与转录因子结合到其调控位点的概率成正比。对于希尔系数 $n = 2$ 的协同结合，一个广泛使用的稳态、无量纲相对表达量的唯象模型是希尔函数 $f([ \\text{TF} ]) = \\dfrac{[ \\text{TF} ]^{2}}{K^{2} + [ \\text{TF} ]^{2}}$，其中 $K$ 是达到半数最大表达量时的浓度。假设 $K = 50\\ \\text{nM}$ (纳摩尔/升)。\n\n任务：\n1) 计算在 $[ \\text{TF} ] = 10\\ \\text{nM}$、$[ \\text{TF} ] = 50\\ \\text{nM}$ 和 $[ \\text{TF} ] = 200\\ \\text{nM}$ 处的 $f([ \\text{TF} ])$。将每个值表示为无量纲小数。你可以将这些中间值保留至少四位有效数字。\n\n2) 设局部对数灵敏度定义为 $S([ \\text{TF} ]) = \\dfrac{d \\ln f}{d \\ln [ \\text{TF} ]}$，它量化了每单位输入的相对变化所引起的输出的相对变化。从该定义和上述希尔函数出发，推导 $S([ \\text{TF} ])$ 的符号表达式，并计算其在 $[ \\text{TF} ] = K$ 处的值。利用你得到的 $S([ \\text{TF} ])$ 表达式和/或斜率 $df/d[\\text{TF}]$，简要论证为何 $[ \\text{TF} ] \\approx K$ 附近的区域通常被认为是控制的敏感区。\n\n最终答案只需提供无量纲灵敏度 $S([ \\text{TF} ] = K)$ 的数值。", "solution": "对所述问题进行验证。\n\n步骤1：提取已知条件。\n- 相对表达量的模型为希尔函数：$f([ \\text{TF} ]) = \\dfrac{[ \\text{TF} ]^{2}}{K^{2} + [ \\text{TF} ]^{2}}$。\n- 希尔系数为 $n = 2$。\n- $K$ 是达到半数最大表达量时的浓度。\n- $K$ 的给定值为 $K = 50\\ \\text{nM}$。\n- 局部对数灵敏度的定义为 $S([ \\text{TF} ]) = \\dfrac{d \\ln f}{d \\ln [ \\text{TF} ]}$。\n- 任务1：计算在 $[ \\text{TF} ] = 10\\ \\text{nM}$、$[ \\text{TF} ] = 50\\ \\text{nM}$ 和 $[ \\text{TF} ] = 200\\ \\text{nM}$ 处的 $f([ \\text{TF} ])$。\n- 任务2：推导 $S([ \\text{TF} ])$ 的符号表达式，计算其在 $[ \\text{TF} ] = K$ 处的值，并论证为何 $[ \\text{TF} ] \\approx K$ 附近的区域对控制是敏感的。\n- 要求最终答案：$S([ \\text{TF} ] = K)$ 的数值。\n\n步骤2：验证。\n- 问题具有 **科学依据**。希尔函数是生物化学和系统生物学中用于描述协同配体结合和转录调控的一个标准基础模型。在植物系统中使用合成启动子的情境是一个有效的应用领域。\n- 问题是 **适定的**。它提供了清晰的数学模型、明确的参数以及具体的计算和推导任务。存在唯一解。\n- 问题是 **客观的**。它使用精确、正式的语言陈述，没有主观或模糊的术语。\n- 问题没有指出的缺陷，包括科学上不合理、不完整和不可行性。给定的 $K=50\\ \\text{nM}$ 值对于转录因子-DNA相互作用在生物学上是合理的。\n\n步骤3：结论。\n此问题有效。将提供解答。\n\n按所述任务进行分析。为方便表示，令 $C = [ \\text{TF} ]$。无量纲相对表达量由以下函数给出：\n$$f(C) = \\frac{C^{2}}{K^{2} + C^{2}}$$\n其中 $K = 50\\ \\text{nM}$。\n\n任务1：计算在指定浓度下的 $f(C)$。\n\n- 对于 $C = 10\\ \\text{nM}$：\n$$f(10) = \\frac{(10)^{2}}{(50)^{2} + (10)^{2}} = \\frac{100}{2500 + 100} = \\frac{100}{2600} = \\frac{1}{26} \\approx 0.03846$$\n浓度单位 (nM) 相互抵消，得到所要求的无量纲值。\n\n- 对于 $C = 50\\ \\text{nM}$：\n$$f(50) = \\frac{(50)^{2}}{(50)^{2} + (50)^{2}} = \\frac{50^{2}}{2 \\times 50^{2}} = \\frac{1}{2} = 0.5000$$\n正如 $K$ 的定义所预期的，表达量达到半数最大值。\n\n- 对于 $C = 200\\ \\text{nM}$：\n$$f(200) = \\frac{(200)^{2}}{(50)^{2} + (200)^{2}} = \\frac{40000}{2500 + 40000} = \\frac{40000}{42500} = \\frac{400}{425} = \\frac{16 \\times 25}{17 \\times 25} = \\frac{16}{17} \\approx 0.9412$$\n\n任务2：对数灵敏度 $S(C)$ 的推导与分析。\n\n局部对数灵敏度定义为 $S(C) = \\dfrac{d \\ln f}{d \\ln C}$。\n为推导 $S(C)$ 的表达式，我们首先对 $f(C)$ 取自然对数：\n$$\\ln(f(C)) = \\ln\\left(\\frac{C^{2}}{K^{2} + C^{2}}\\right) = \\ln(C^{2}) - \\ln(K^{2} + C^{2}) = 2\\ln(C) - \\ln(K^{2} + C^{2})$$\n现在，我们对 $\\ln(f(C))$ 关于 $\\ln(C)$ 求导。令 $u = \\ln(C)$，这意味着 $C = \\exp(u)$。对 $u$ 求导等价于应用算子 $\\frac{d}{d \\ln C}$。\n$$S(C) = \\frac{d}{d \\ln C}[2\\ln(C) - \\ln(K^{2} + C^{2})]$$\n$$S(C) = 2\\frac{d(\\ln C)}{d(\\ln C)} - \\frac{d}{d\\ln C}[\\ln(K^{2} + C^{2})]$$\n第一项就是 $2$。对于第二项，我们使用链式法则：$\\frac{d g}{d \\ln C} = C \\frac{dg}{dC}$。\n$$S(C) = 2 - C \\frac{d}{dC}[\\ln(K^{2} + C^{2})] = 2 - C \\left(\\frac{1}{K^{2} + C^{2}} \\cdot \\frac{d}{dC}(K^{2} + C^{2})\\right)$$\n$$S(C) = 2 - C \\left(\\frac{2C}{K^{2} + C^{2}}\\right) = 2 - \\frac{2C^{2}}{K^{2} + C^{2}}$$\n合并各项，得到灵敏度的符号表达式：\n$$S(C) = \\frac{2(K^{2} + C^{2}) - 2C^{2}}{K^{2} + C^{2}} = \\frac{2K^{2} + 2C^{2} - 2C^{2}}{K^{2} + C^{2}} = \\frac{2K^{2}}{K^{2} + C^{2}}$$\n这是 $S(C)$ 的符号表达式。\n\n接下来，我们计算 $S(C)$ 在 $C=K$ 处的值：\n$$S(K) = \\frac{2K^{2}}{K^{2} + K^{2}} = \\frac{2K^{2}}{2K^{2}} = 1$$\n$C=K$ 处的无量纲灵敏度恰好为 $1$。\n\n最后，我们论证为何 $C \\approx K$ 附近的区域对控制是敏感的。\n一个系统的灵敏度可以从绝对变化（斜率，$\\frac{df}{dC}$）或相对变化（对数灵敏度，$S(C)$）两方面进行分析。\n\n绝对斜率由下式给出：\n$$\\frac{df}{dC} = \\frac{d}{dC}\\left(\\frac{C^{2}}{K^{2} + C^{2}}\\right) = \\frac{2C(K^{2} + C^{2}) - C^{2}(2C)}{(K^{2} + C^{2})^{2}} = \\frac{2CK^{2}}{(K^{2} + C^{2})^{2}}$$\n最大绝对灵敏度区域对应于最大斜率。这发生在 $\\frac{d}{dC}(\\frac{df}{dC}) = 0$ 处。计算表明，该最大值位于 $C = K/\\sqrt{3}$。该点确实在 $C=K$ 附近。S型响应曲线的这个区域是最陡峭的部分，在此处输入浓度 $C$ 的一个小的绝对变化会导致输出响应 $f$ 的最大可能绝对变化。\n\n对数灵敏度 $S(C) = \\frac{2K^{2}}{K^{2} + C^{2}}$ 量化了每单位输入的相对变化所引起的输出的相对变化。\n- 当 $C \\ll K$ 时，$S(C) \\approx \\frac{2K^{2}}{K^{2}} = 2$。灵敏度很高，但绝对输出 $f(C) \\approx (C/K)^{2}$ 非常小，因此系统实际上处于“关闭”状态。\n- 当 $C \\gg K$ 时，$S(C) \\approx \\frac{2K^{2}}{C^{2}} \\to 0$。系统饱和，对 $C$ 的变化无响应。\n- 在 $C = K$ 处，$S(K) = 1$。这表示 $C$ 的 $1\\%$ 变化会导致 $f$ 的 $1\\%$ 变化。\n\n$C \\approx K$ 附近的区域对控制至关重要，因为它代表了最优的权衡。这是启动子从低表达状态转换到高表达状态的地方。在这里，系统同时表现出显著的绝对斜率（接近其最大值）和重要的对数灵敏度（$S(K) = 1$），而输出水平本身（$f(K) = 1/2$）处于其动态范围的中间。这种响应能力和非平凡输出水平的结合，使该区域成为生物开关的有效工作点。", "answer": "$$\\boxed{1}$$", "id": "2759991"}, {"introduction": "设计好基因元件后，下一步是将其精确地组装成一个功能完整的表达框架，例如通过金门组装（Golden Gate Assembly）。这个过程并非完美无缺，其成功率受到连接效率和随机突变等概率性因素的影响。本练习将引导你建立一个数学模型，来量化评估一个多模块组装项目中获得完全正确构建体的预期比例，这有助于在实验前预测并优化克隆策略。[@problem_id:2760014]", "problem": "您正在使用IIs型限制酶克隆（金门组装，GGA）将一个多基因植物表达盒组装到一个双元载体中。该设计需要 $n$ 个独立的连接点。在每个连接点，有三种互斥的结果：正确连接（概率为 $p$）、不正确但仍完成连接（概率为 $r$），以及连接失败（概率为 $1 - p - r$）。在抗生素筛选下，只有环状质粒才能产生菌落；假设当且仅当所有 $n$ 个连接点都已连接（无论是正确还是不正确）时才会形成菌落，而任何带有未连接点的构建体都不会产生菌落。\n\n一个“完全正确的构建体”被定义为所有 $n$ 个连接点都正确，并且在长度为 $L$ 个碱基对的组装插入片段中不含任何碱基替换错误。假设点突变在各个碱基上独立发生，每个碱基的残留错误率为 $\\mu$，因此每个组装插入片段的总点突变数可以用泊松分布很好地描述。\n\n请从独立事件的乘法法则和针对罕见、独立点突变的泊松模型出发，明确推导出在形成的菌落中完全正确的构建体所占的期望分数表达式。然后，对以下设计参数进行数值计算：$n = 12$，$p = 0.95$，$r = 0.02$，$L = 7.5 \\times 10^{3}$，以及 $\\mu = 1.0 \\times 10^{-6}$。将最终结果报告为无单位小数，并四舍五入至四位有效数字。", "solution": "本题要求推导在形成菌落的转化细胞群体中，完全正确的构建体所占期望分数的表达式，并进行数值计算。在尝试求解之前，我们将对问题陈述进行严格的验证。\n\n首先，我们逐字提取给定信息。\n- 独立连接点的数量：$n$\n- 单个连接点正确连接的概率：$p$\n- 单个连接点不正确连接的概率：$r$\n- 单个连接点连接失败的概率：$1 - p - r$\n- 形成菌落的条件：所有 $n$ 个连接点都已连接（无论是正确还是不正确）。\n- “完全正确的构建体”的定义：所有 $n$ 个连接点都正确，并且不含碱基替换错误。\n- 组装插入片段的长度：$L$ 个碱基对\n- 点突变的每碱基残留错误率：$\\mu$\n- 每个组装插入片段的总点突变数遵循泊松分布。\n- 用于计算的数值：$n = 12$，$p = 0.95$，$r = 0.02$，$L = 7.5 \\times 10^{3}$，$\\mu = 1.0 \\times 10^{-6}$。\n\n接下来，我们验证这个问题。该问题具有科学依据，描述了一个标准的分子克隆过程（金门组装），并使用了一个概率模型，该模型是对此背后生物物理过程的常见且合理的简化。在此背景下，使用独立事件的乘法法则和针对罕见突变的泊松分布是标准的假设。问题陈述清晰，提供了所有必要的参数和明确的目标。语言精确客观。没有矛盾、信息缺失或伪科学的主张。此问题是有效的。\n\n我们现在开始求解。我们感兴趣的量是形成的菌落中完全正确的构建体所占的比例。这是一个条件概率。我们定义相关事件如下：\n- $C$：形成菌落的事件。根据题意，这当且仅当所有 $n$ 个连接点都已连接时发生。\n- $F$：构建体“完全正确”的事件。这当且仅当所有 $n$ 个连接点都正确并且插入片段中没有点突变时发生。\n\n我们要求解在事件 $C$ 发生的条件下事件 $F$ 发生的概率，记为 $P(F|C)$。根据条件概率的定义，我们有：\n$$ P(F|C) = \\frac{P(F \\cap C)}{P(C)} $$\n\n我们必须首先确定概率 $P(C)$ 和 $P(F \\cap C)$。\n\n形成菌落的概率 $P(C)$ 是所有 $n$ 个连接点都连接上的概率。对于单个连接点，其结果是正确连接（概率为 $p$）或不正确连接（概率为 $r$）。因此，单个连接点被连接上的概率是 $p+r$。由于这 $n$ 个连接点是独立事件，我们可以应用独立事件乘法法则来计算所有 $n$ 个连接点都连接上的概率：\n$$ P(C) = (p+r) \\times (p+r) \\times \\dots \\times (p+r) \\text{（$n$ 次）} = (p+r)^{n} $$\n\n接下来，我们考虑事件 $F \\cap C$。事件 $F$ 是一个复合事件，需要满足两个独立的条件：\n1.  所有 $n$ 个连接点都是正确的。设此事件为 $J_{correct}$。\n2.  长度为 $L$ 的插入片段中没有点突变。设此事件为 $M_0$。\n\n因此，$F = J_{correct} \\cap M_0$。问题假设连接过程和突变过程是独立的，所以 $P(F) = P(J_{correct})P(M_0)$。\n\n事件 $J_{correct}$ 要求所有 $n$ 个独立的连接点都是正确的。单个连接点正确的概率是 $p$。使用乘法法则，所有 $n$ 个都正确的概率是：\n$$ P(J_{correct}) = p^n $$\n\n事件 $M_0$ 是发生零次突变。突变次数由泊松分布建模，其速率参数为 $\\lambda$，表示预期的突变次数。此参数是序列长度 $L$ 和每碱基突变率 $\\mu$ 的乘积：\n$$ \\lambda = L\\mu $$\n在泊松分布中观察到 $k$ 个事件的概率由 $P(X=k) = \\frac{\\lambda^k \\exp(-\\lambda)}{k!}$ 给出。对于零次突变，即 $k=0$：\n$$ P(M_0) = P(X=0) = \\frac{(L\\mu)^0 \\exp(-L\\mu)}{0!} = \\exp(-L\\mu) $$\n注意，$0! = 1$ 且 $(L\\mu)^0 = 1$。\n\n综合这些结果，一个完全正确的构建体的概率是：\n$$ P(F) = P(J_{correct}) P(M_0) = p^n \\exp(-L\\mu) $$\n\n现在我们必须评估交集 $F \\cap C$。事件 $F$ 是“所有连接点都正确且零突变”。事件 $C$ 是“所有连接点都已连接”。如果所有连接点都是正确的（$J_{correct}$），那么根据定义，它们必然是已连接的。因此，事件 $J_{correct}$ 是所有连接点都已连接这一事件的子集。这意味着如果事件 $F$ 发生，事件 $C$ 也必然发生。因此，$F$ 和 $C$ 的交集就是 $F$：\n$$ F \\cap C = F $$\n所以，$P(F \\cap C) = P(F) = p^n \\exp(-L\\mu)$。\n\n现在我们有了计算所需条件概率的所有组成部分：\n$$ P(F|C) = \\frac{P(F \\cap C)}{P(C)} = \\frac{p^n \\exp(-L\\mu)}{(p+r)^n} $$\n这个表达式可以方便地改写为：\n$$ P(F|C) = \\left(\\frac{p}{p+r}\\right)^n \\exp(-L\\mu) $$\n这就是菌落中完全正确的构建体所占期望分数的一般表达式。\n\n最后，我们使用提供的数值来计算这个表达式：\n- $n = 12$\n- $p = 0.95$\n- $r = 0.02$\n- $L = 7.5 \\times 10^{3}$\n- $\\mu = 1.0 \\times 10^{-6}$\n\n首先，我们计算函数中的各项：\n幂的底数是 $\\frac{p}{p+r} = \\frac{0.95}{0.95+0.02} = \\frac{0.95}{0.97}$。\n指数项的指数是 $-L\\mu = -(7.5 \\times 10^3) \\times (1.0 \\times 10^{-6}) = -7.5 \\times 10^{-3} = -0.0075$。\n\n将这些值代入推导出的公式中：\n$$ P(F|C) = \\left(\\frac{0.95}{0.97}\\right)^{12} \\exp(-0.0075) $$\n我们现在计算其数值：\n$$ \\left(\\frac{0.95}{0.97}\\right)^{12} \\approx (0.97938144)^{12} \\approx 0.7788005 $$\n$$ \\exp(-0.0075) \\approx 0.99252803 $$\n乘积为：\n$$ P(F|C) \\approx 0.7788005 \\times 0.99252803 \\approx 0.7729896 $$\n按照要求，四舍五入到四位有效数字，我们得到 $0.7730$。", "answer": "$$\\boxed{0.7730}$$", "id": "2760014"}, {"introduction": "成功构建并导入植物细胞的合成通路，其最终性能取决于整个细胞代谢网络的资源分配。通量平衡分析（Flux Balance Analysis, FBA）是一种强大的计算工具，用于在稳态假设下预测代谢通量的分布。在本练习中，你将从头构建一个合成途径的化学计量矩阵，并运用线性规划来计算其最大理论产率，这让你能够像代谢工程师一样，通过模型来优化底物利用效率，最大化目标产物的合成。[@problem_id:2760005]", "problem": "您的任务是构建一个简约而又具备生物物理保真度的植物质体中合成途径的流量平衡分析（Flux Balance Analysis, FBA）模型。该途径通过$5$个酶促步骤将一个输入的底物转化为一个异源产物。您必须从质量守恒和稳态假设出发，从基本原理推导出化学计量矩阵，然后使用线性规划（Linear Programming, LP）计算在底物吸收上限和辅因子供应上限的约束下，产物生成的最大产率。您的程序必须纯粹从基本原理出发实现以下步骤，并输出所要求的数值结果。\n\n从以下基本事实和假设开始：\n- 模型化的代谢物在细胞内达到稳态浓度，因此对于每个内部代谢物 $i$，其净生成速率为零，由此得到线性系统 $S \\, v = 0$。其中 $S$ 是化学计量矩阵，$v$ 是流量向量。\n- 反应化学计量是精确的，并通过质量平衡约束流量。\n- 不可逆反应的流量为非负值。\n- 目标是在吸收和辅因子供应上限的约束下，最大化产物输出流量，然后在所有最优解中选择使底物吸收最小化的解，从而得到一个明确定义的最大产率。\n\n将内部代谢物定义为有序列表\n$[S, A, B, C, D, P, ATP, ADP, Pi, NADPH, NADP^+]$，\n其中 $S$ 是输入的底物，$P$ 是细胞内产物，$ATP$ 是三磷酸腺苷，$ADP$ 是二磷酸腺苷，$Pi$ 是无机磷酸盐，$NADPH$ 和 $NADP^+$ 是吡啶核苷酸，所有物质均处于稳态。\n\n按顺序定义以下反应（即 $S$ 的列）：\n- $R_0$：底物吸收 $S_{ext} \\rightarrow S$（上限为 $U_S$）。\n- $R_1$：步骤 $1$（缩合）：$2 \\, S \\rightarrow A$。\n- $R_2$：步骤 $2$：$A \\rightarrow B$。\n- $R_3$：步骤 $3$（还原）：$B + NADPH \\rightarrow C + NADP^+$。\n- $R_4$：步骤 $4$（活化）：$C + ATP \\rightarrow D + ADP + Pi$。\n- $R_5$：步骤 $5$：$D \\rightarrow P$。\n- $R_6$：产物输出 $P \\rightarrow P_{ext}$（待最大化的目标）。\n- $R_7$：光合作用ATP供应：$ADP + Pi \\rightarrow ATP$（上限为 $U_{ATP}$）。\n- $R_8$：光合作用NADPH供应：$NADP^+ \\rightarrow NADPH$（上限为 $U_{NADPH}$）。\n- $R_9$：底物生成ATP（呼吸作用替代）：$S + ADP + Pi \\rightarrow ATP$。\n- $R_{10}$：底物生成NADPH（氧化作用替代）：$S + NADP^+ \\rightarrow NADPH$。\n\n根据这些反应，按照上述给定的代谢物顺序和反应顺序 $R_0, \\dots, R_{10}$，为每个代谢物在每个反应列中写入带符号的化学计量系数，从而推导出化学计量矩阵 $S \\in \\mathbb{R}^{11 \\times 11}$。使用稳态约束 $S \\, v = 0$。\n\n流量边界：\n- 对于 $R_0$：$0 \\le v_0 \\le U_S$。\n- 对于 $R_6$：$0 \\le v_6$（不可逆）。\n- 对于 $R_7$：$0 \\le v_7 \\le U_{ATP}$。\n- 对于 $R_8$：$0 \\le v_8 \\le U_{NADPH}$。\n- 对于所有其他反应 $R_j$，$j \\in \\{1,2,3,4,5,9,10\\}$：$0 \\le v_j$（不可逆）。\n\n优化任务（两阶段，字典序）：\n- 阶段 $1$（最大化产物生成）：在 $S \\, v = 0$ 和上述边界约束下，最大化 $v_6$。\n- 阶段 $2$（在产物最大化时最小化底物使用）：在所有达到阶段 $1$ 最大 $v_6$ 值的 $v$ 中，在 $S \\, v = 0$、上述边界以及将 $v_6$ 固定在阶段 $1$ 最优值的约束下，最小化 $v_0$。\n\n根据阶段 $2$ 的解计算产率 $y = v_6 / v_0$。如果最优解中 $v_0 = 0$，则定义 $y = 0$。\n\n测试套件：\n- 每个测试用例是一个三元组 $\\left(U_S, U_{ATP}, U_{NADPH}\\right)$。按顺序使用以下五个用例：\n  $[(10, 100, 100), (10, 3, 100), (10, 0, 0), (0, 100, 100), (10, 7, 2)]$。\n- 对于每个用例，计算最大产率 $y$ 作为一个实数。将每个产率表示为小数点后保留六位的小数。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含与测试用例顺序相同的五个产率，形式为逗号分隔并用方括号括起来的列表，例如 $[0.123456,0.234567,0.345678,0.456789,0.567890]$。\n- 不应打印任何其他文本。", "solution": "该问题是有效的，因为它构成了一个适定且具有科学依据的流量平衡分析（FBA）应用，这是计算系统生物学中的一种标准方法。它没有矛盾、歧义和事实错误。任务是通过解决一个两阶段字典序线性规划（LP）问题，来确定一个合成产物的最大理论产率。\n\n求解过程分为三个主要步骤：首先，根据给定的反应网络推导出化学计量矩阵；其次，构建两阶段LP问题；第三，为每个指定的测试用例计算产率。\n\n**1. 化学计量矩阵的推导**\n\n化学计量矩阵，记为 $S$，表示代谢网络的质量平衡约束。其元素 $S_{ij}$ 对应于代谢物 $i$ 在反应 $j$ 中的化学计量系数。按照惯例，反应物的系数为负，产物的系数为正。该矩阵有11行（对应11种内部代谢物）和11列（对应11个反应）。\n\n代谢物的有序列表是：\n$[S, A, B, C, D, P, ATP, ADP, Pi, NADPH, NADP^+]$。\n\n反应的有序列表是：\n$R_0: S_{ext} \\rightarrow S$\n$R_1: 2 \\, S \\rightarrow A$\n$R_2: A \\rightarrow B$\n$R_3: B + NADPH \\rightarrow C + NADP^+$\n$R_4: C + ATP \\rightarrow D + ADP + Pi$\n$R_5: D \\rightarrow P$\n$R_6: P \\rightarrow P_{ext}$\n$R_7: ADP + Pi \\rightarrow ATP$\n$R_8: NADP^+ \\rightarrow NADPH$\n$R_9: S + ADP + Pi \\rightarrow ATP$\n$R_{10}: S + NADP^+ \\rightarrow NADPH$\n\n基于这些反应逐列构建矩阵，得到化学计量矩阵 $S \\in \\mathbb{R}^{11 \\times 11}$：\n\n$$\nS = \n\\begin{pmatrix}\n 1 & -2 &  0 &  0 &  0 &  0 &  0 &  0 &  0 & -1 & -1 \\\\\n 0 &  1 & -1 &  0 &  0 &  0 &  0 &  0 &  0 &  0 &  0 \\\\\n 0 &  0 &  1 & -1 &  0 &  0 &  0 &  0 &  0 &  0 &  0 \\\\\n 0 &  0 &  0 &  1 & -1 &  0 &  0 &  0 &  0 &  0 &  0 \\\\\n 0 &  0 &  0 &  0 &  1 & -1 &  0 &  0 &  0 &  0 &  0 \\\\\n 0 &  0 &  0 &  0 &  0 &  1 & -1 &  0 &  0 &  0 &  0 \\\\\n 0 &  0 &  0 &  0 & -1 &  0 &  0 &  1 &  0 &  1 &  0 \\\\\n 0 &  0 &  0 &  0 &  1 &  0 &  0 & -1 &  0 & -1 &  0 \\\\\n 0 &  0 &  0 &  0 &  1 &  0 &  0 & -1 &  0 & -1 &  0 \\\\\n 0 &  0 &  0 & -1 &  0 &  0 &  0 &  0 &  1 &  0 &  1 \\\\\n 0 &  0 &  0 &  1 &  0 &  0 &  0 &  0 & -1 &  0 & -1 \n\\end{pmatrix}\n$$\n\n**2. 线性规划的构建**\n\n令 $v = [v_0, v_1, \\dots, v_{10}]^T$ 为反应流量向量。FBA的核心是稳态假设，这可转化为线性方程组：\n$$S \\, v = 0$$\n这是LP问题的主要等式约束。\n\n流量边界是由热力学不可逆性和指定的吸收/供应上限派生出的不等式约束：\n- $0 \\le v_0 \\le U_S$\n- $0 \\le v_j$，对于 $j \\in \\{1, 2, 3, 4, 5, 6, 9, 10\\}$\n- $0 \\le v_7 \\le U_{ATP}$\n- $0 \\le v_8 \\le U_{NADPH}$\n\n优化分两个连续阶段进行。\n\n**阶段 1：最大化产物生成**\n目标是最大化产物输出流量 $v_6$。由于标准LP求解器执行最小化操作，我们转而最小化 $-v_6$。目标函数向量是 $c_1 \\in \\mathbb{R}^{11}$：\n$$c_1 = [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0]^T$$\n第一个LP问题是：\n$$ \\underset{v}{\\text{minimize}} \\quad c_1^T v $$\n$$ \\text{subject to} \\quad S v = 0 $$\n$$ \\text{and the flux bounds specified above.} $$\n设此阶段的最优目标值为 $f_1^*$。则最大产物流量为 $v_6^* = -f_1^*$。\n\n**阶段 2：最小化底物使用**\n第二阶段在所有能达到最大产物流量的解中，寻找底物效率最高的解。目标是最小化底物吸收流量 $v_0$。目标函数向量是 $c_2 \\in \\mathbb{R}^{11}$：\n$$c_2 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]^T$$\n增加一个新约束，将产物输出流量固定在阶段1确定的最大值：\n$$v_6 = v_6^*$$\n第二个LP问题是：\n$$ \\underset{v}{\\text{minimize}} \\quad c_2^T v $$\n$$ \\text{subject to} \\quad S v = 0 $$\n$$ v_6 = v_6^* $$\n$$ \\text{and the original flux bounds.} $$\n该问题的解 $v^{opt}$ 是一个唯一的流量向量，代表了最大产物产率的状态。\n\n**3. 产率计算**\n\n产物产率 $y$ 定义为阶段2最优解中产物输出流量与底物吸收流量之比：\n$$ y = \\frac{v_6^{opt}}{v_0^{opt}} $$\n根据问题规定，如果最优底物吸收 $v_0^{opt} = 0$，则产率定义为 $y = 0$。\n\n对每个测试用例三元组 $(U_S, U_{ATP}, U_{NADPH})$ 执行这整个过程，以计算相应的最大产率。数值解是使用 `scipy.optimize` 库中的 `linprog` 函数获得的。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Main function to solve the FBA problem for the given test cases.\n    \"\"\"\n    \n    # Define the stoichiometric matrix S based on first principles.\n    # Rows correspond to metabolites: [S, A, B, C, D, P, ATP, ADP, Pi, NADPH, NADP+]\n    # Columns correspond to reactions: [R0, R1, ..., R10]\n    S = np.array([\n        # R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10\n        [ 1, -2,  0,  0,  0,  0,  0,  0,  0, -1, -1], # S\n        [ 0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0], # A\n        [ 0,  0,  1, -1,  0,  0,  0,  0,  0,  0,  0], # B\n        [ 0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0], # C\n        [ 0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0], # D\n        [ 0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0], # P\n        [ 0,  0,  0,  0, -1,  0,  0,  1,  0,  1,  0], # ATP\n        [ 0,  0,  0,  0,  1,  0,  0, -1,  0, -1,  0], # ADP\n        [ 0,  0,  0,  0,  1,  0,  0, -1,  0, -1,  0], # Pi\n        [ 0,  0,  0, -1,  0,  0,  0,  0,  1,  0,  1], # NADPH\n        [ 0,  0,  0,  1,  0,  0,  0,  0, -1,  0, -1]  # NADP+\n    ], dtype=np.float64)\n\n    # Equality constraints for the LP: S * v = 0\n    A_eq = S\n    b_eq = np.zeros(S.shape[0])\n\n    def solve_fba(U_S, U_ATP, U_NADPH):\n        \"\"\"\n        Performs the two-stage FBA optimization for a given set of bounds.\n        \"\"\"\n        # Define bounds for all fluxes. (lower_bound, upper_bound)\n        # `None` signifies no upper bound.\n        bounds = [\n            (0, U_S),       # v0: R0 Substrate uptake\n            (0, None),      # v1: R1\n            (0, None),      # v2: R2\n            (0, None),      # v3: R3\n            (0, None),      # v4: R4\n            (0, None),      # v5: R5\n            (0, None),      # v6: R6 Product export\n            (0, U_ATP),     # v7: R7 Photosynthetic ATP\n            (0, U_NADPH),   # v8: R8 Photosynthetic NADPH\n            (0, None),      # v9: R9 ATP from substrate\n            (0, None)       # v10: R10 NADPH from substrate\n        ]\n\n        # --- Stage 1: Maximize product formation (v6) ---\n        # Objective: maximize v6, which is equivalent to minimizing -v6\n        c1 = np.zeros(S.shape[1])\n        c1[6] = -1\n\n        res1 = linprog(c=c1, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n\n        if not res1.success:\n            return 0.0\n\n        # Optimal value is -v6_max. Using a tolerance for floating point issues.\n        v6_max = -res1.fun if res1.fun is not None else 0.0\n        if v6_max  1e-9:\n            v6_max = 0.0\n\n        # --- Stage 2: Minimize substrate uptake (v0) at max product formation ---\n        # Update bounds to fix v6 at its maximum value.\n        stage2_bounds = list(bounds)\n        stage2_bounds[6] = (v6_max, v6_max)\n\n        # Objective: minimize v0\n        c2 = np.zeros(S.shape[1])\n        c2[0] = 1\n\n        res2 = linprog(c=c2, A_eq=A_eq, b_eq=b_eq, bounds=stage2_bounds, method='highs')\n        \n        if not res2.success:\n            return 0.0\n\n        v0_opt = res2.x[0] if res2.x is not None else 0.0\n        v6_opt = res2.x[6] if res2.x is not None else 0.0\n        \n        # As per problem, if v0_opt is zero, yield is zero.\n        if v0_opt  1e-9:\n            return 0.0\n        else:\n            yield_val = v6_opt / v0_opt\n            return yield_val\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (10, 100, 100), \n        (10, 3, 100), \n        (10, 0, 0), \n        (0, 100, 100), \n        (10, 7, 2)\n    ]\n\n    results = []\n    for case in test_cases:\n        U_S, U_ATP, U_NADPH = case\n        y = solve_fba(U_S, U_ATP, U_NADPH)\n        # Format the result to six digits after the decimal point.\n        results.append(f\"{y:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2760005"}]}