{"hands_on_practices": [{"introduction": "在任何无细胞实验中，DNA模板的选择是一项基本的设计决策，它直接影响着最终的蛋白产量。本练习旨在量化比较使用环状质粒与线性DNA片段作为模板时的性能差异。通过为线性DNA的降解过程建立一个简单的动力学模型，您将计算出模板不稳定性对总蛋白产量的影响，从而深刻理解为何模板稳定性对于构建稳健的生物系统至关重要 [@problem_id:2025426]。", "problem": "在合成生物学中，无细胞转录-翻译（TX-TL）系统是用于基因回路原型设计的强大工具。这些系统由细胞提取物组成，其中包含从DNA模板生产蛋白质所需的所有分子机器（核糖体、聚合酶、氨基酸等）。\n\n一位研究人员正在比较两种编码相同荧光蛋白的不同DNA模板的蛋白质表达产量。模板A是标准的环状质粒，而模板B是通过聚合酶链式反应（PCR）生成的线性DNA片段。两种模板都含有相同的启动子和基因序列。当将等量的初始摩尔浓度的每种模板分别添加到不同的TX-TL反应中时，研究人员观察到线性模板的最终蛋白质产量显著较低。\n\n这种差异主要归因于细胞提取物中存在的外切核酸酶，它们会降解线性DNA，但不会降解环状DNA。为了对这一现象进行建模，假设如下：\n1.  线性DNA模板的降解遵循一级动力学，降解速率常数为 $k_{deg}$。环状质粒模板的浓度在整个反应过程中保持不变。\n2.  任何时刻的蛋白质合成速率与该时刻存在的功能性（未降解）DNA模板的浓度成正比。两种模板类型的比例常数相同。\n3.  两种反应都以相同的DNA模板起始浓度开始，并持续进行总时长为 $T$。\n\n给定降解速率常数 $k_{deg} = 0.75 \\text{ hr}^{-1}$ 和总反应时间 $T = 4.0 \\text{ 小时}$，计算线性模板产生的蛋白质总量与环状质粒模板产生的蛋白质总量的比率。以保留三位有效数字的小数形式报告答案。", "solution": "设 $C_{0}$ 表示两种反应的初始DNA模板浓度。设 $C_{L}(t)$ 为线性DNA浓度，$C_{C}(t)$ 为环状DNA浓度。\n\n根据线性模板的一级降解，\n$$\n\\frac{dC_{L}}{dt}=-k_{deg}C_{L}, \\quad C_{L}(0)=C_{0},\n$$\n其解为\n$$\nC_{L}(t)=C_{0}\\exp(-k_{deg}t).\n$$\n环状质粒不被降解，因此\n$$\nC_{C}(t)=C_{0}.\n$$\n\n假设瞬时蛋白质合成速率与功能性模板浓度成正比，比例常数为 $\\alpha$，则到时间 $T$ 为止产生的总蛋白质为\n$$\nP_{L}(T)=\\int_{0}^{T}\\alpha C_{L}(t)\\,dt=\\alpha C_{0}\\int_{0}^{T}\\exp(-k_{deg}t)\\,dt=\\alpha C_{0}\\frac{1-\\exp(-k_{deg}T)}{k_{deg}},\n$$\n而\n$$\nP_{C}(T)=\\int_{0}^{T}\\alpha C_{C}(t)\\,dt=\\alpha C_{0}T.\n$$\n\n因此，线性模板与环状模板产生的总蛋白质之比为\n$$\nR=\\frac{P_{L}(T)}{P_{C}(T)}=\\frac{1-\\exp(-k_{deg}T)}{k_{deg}T}.\n$$\n\n已知 $k_{deg}=0.75\\ \\text{hr}^{-1}$ 且 $T=4.0\\ \\text{小时}$，我们得到 $k_{deg}T=3.0$，所以\n$$\nR=\\frac{1-\\exp(-3)}{3}\\approx\\frac{1-0.049787068}{3}\\approx\\frac{0.950212932}{3}\\approx 0.316737644.\n$$\n保留三位有效数字， $R\\approx 0.317$。", "answer": "$$\\boxed{0.317}$$", "id": "2025426"}, {"introduction": "基因表达动态的测量通常依赖于荧光报告蛋白，但原始的荧光信号并不直接等同于蛋白质的合成速率。本练习将挑战您从荧光测量的时间序列数据出发，反向推导出瞬时蛋白质合成速率。您将需要推导并应用一个动力学模型来校正由报告蛋白成熟过程引起的延迟，这是准确解读实验数据、洞察基因回路动态行为的一项关键技能 [@problem_id:2718570]。", "problem": "一个表达绿色荧光蛋白 (GFP) 的无细胞转录翻译 (TX-TL) 反应，使用微孔板读板机对其随时间的变化进行监测，其读数以任意荧光单位 (AU) 报告。该测量主要报告的是成熟的荧光物质。假设以下基本原理和事实：\n- 在线性检测条件下，测得的荧光强度与单位体积内成熟荧光蛋白分子的数量成正比。\n- 蛋白质折叠和生色团成熟可以被建模为一个从非荧光的未成熟状态到荧光的成熟状态的一级过程。\n- 蛋白质的瞬时合成速率等于新生的未成熟分子的产生速率。\n- 瞬时速率定义为时间导数。\n\n给定条件如下：\n- 在无DNA对照组中测得的背景荧光为：$F_{\\mathrm{blank}} = 120$ AU。\n- 将荧光转换为单位体积分子数的校准因子为：$\\alpha = 4.8 \\times 10^{9}$ 分子数/AU/μL。\n- 在反应温度下的一级成熟速率常数为：$k_{\\mathrm{mat}} = 0.10$ $\\mathrm{min}^{-1}$。\n- TX-TL反应的荧光读数时间序列（采样间隔均匀，为 $\\Delta t = 15$ $\\mathrm{min}$）：\n  - $t = 0$ $\\mathrm{min}$ 时，$F = 120$ AU\n  - $t = 15$ $\\mathrm{min}$ 时，$F = 240$ AU\n  - $t = 30$ $\\mathrm{min}$ 时，$F = 480$ AU\n  - $t = 45$ $\\mathrm{min}$ 时，$F = 840$ AU\n  - $t = 60$ $\\mathrm{min}$ 时，$F = 1200$ AU\n  - $t = 75$ $\\mathrm{min}$ 时，$F = 1440$ AU\n  - $t = 90$ $\\mathrm{min}$ 时，$F = 1560$ AU\n\n令 $F(t)$ 表示测得的荧光，令 $M(t)$ 表示每 μL 中成熟荧光蛋白分子的数量。假设仪器响应是线性的，并且在所考虑的时间窗口内，光漂白和蛋白质降解可以忽略不计。\n\n任务：从第一性原理出发，推导瞬时蛋白质合成速率 $S(t)$（单位：分子数/μL/min）的表达式，该表达式用 $M(t)$ 及其时间导数表示，并明确考虑一级成熟过程。然后，利用所提供的数据，并假设在 $t = 60$ $\\mathrm{min}$ 时的时间导数可以用基于相邻时间点的二阶中心差分来近似，计算出 $S(60\\,\\mathrm{min})$ 的数值。\n\n说明：\n- 使用给定的校准值和背景值，将荧光值转换为每 μL 的成熟分子数。\n- 在 $t = 60$ $\\mathrm{min}$ 处，使用 $\\Delta t = 15$ $\\mathrm{min}$ 的二阶中心差分来近似 $M(t)$ 的一阶和二阶时间导数。\n- 以 分子数/μL/min 为单位，将最终的合成速率报告为单个数值，并将答案保留三位有效数字。", "solution": "我们首先将测量和成熟动力学过程形式化。读板机报告的荧光值为 $F(t)$，单位为任意单位 (AU)。在线性响应下，单位体积内成熟荧光分子的数量与减去背景后的荧光值成正比。设校准因子为 $\\alpha$（单位：分子数/AU/μL），背景为 $F_{\\mathrm{blank}}$，则每 μL 中成熟物质的丰度为\n$$\nM(t) = \\alpha \\left[F(t) - F_{\\mathrm{blank}}\\right].\n$$\n\n接下来我们对成熟过程进行建模。令 $U(t)$ 表示每 μL 中未成熟的、非荧光的蛋白分子的数量。从 $U$ 到 $M$ 的一级成熟过程，其速率常数为 $k_{\\mathrm{mat}}$，这意味着满足以下动力学方程\n$$\n\\frac{dU}{dt} = S(t) - k_{\\mathrm{mat}} U(t), \\quad \\frac{dM}{dt} = k_{\\mathrm{mat}} U(t),\n$$\n其中 $S(t)$ 是瞬时合成速率（即未成熟蛋白的产生速率）。\n\n我们消去 $U(t)$，用 $M(t)$ 来表示。从 $\\frac{dM}{dt} = k_{\\mathrm{mat}} U(t)$ 可得\n$$\nU(t) = \\frac{1}{k_{\\mathrm{mat}}} \\frac{dM}{dt}.\n$$\n对此关系式求导可得\n$$\n\\frac{dU}{dt} = \\frac{1}{k_{\\mathrm{mat}}} \\frac{d^{2}M}{dt^{2}}.\n$$\n将 $U(t)$ 和 $\\frac{dU}{dt}$ 代入关于 $\\frac{dU}{dt}$ 的方程中：\n$$\n\\frac{1}{k_{\\mathrm{mat}}} \\frac{d^{2}M}{dt^{2}} = S(t) - k_{\\mathrm{mat}} \\left( \\frac{1}{k_{\\mathrm{mat}}} \\frac{dM}{dt} \\right).\n$$\n重新整理以求解 $S(t)$：\n$$\nS(t) = \\frac{1}{k_{\\mathrm{mat}}} \\frac{d^{2}M}{dt^{2}} + \\frac{dM}{dt}.\n$$\n因此，合成速率等于成熟物质的一阶导数，加上一个与其二阶导数成正比的修正项，比例系数为 $1/k_{\\mathrm{mat}}$。\n\n现在我们根据给定的荧光数据计算 $M(t)$。背景值为 $F_{\\mathrm{blank}} = 120$ AU，校准因子为 $\\alpha = 4.8 \\times 10^{9}$ 分子数/AU/μL。为了在 $t = 60$ $\\mathrm{min}$ 处构建中心差分，我们将需要 $t = 45$ $\\mathrm{min}$、$t = 60$ $\\mathrm{min}$ 和 $t = 75$ $\\mathrm{min}$ 处的 $M(t)$ 值。\n\n计算减去背景后的荧光值：\n- 在 $t = 45$ $\\mathrm{min}$ 时：$F(45) = 840$ AU，所以 $F(45) - F_{\\mathrm{blank}} = 840 - 120 = 720$ AU。\n- 在 $t = 60$ $\\mathrm{min}$ 时：$F(60) = 1200$ AU，所以 $F(60) - F_{\\mathrm{blank}} = 1200 - 120 = 1080$ AU。\n- 在 $t = 75$ $\\mathrm{min}$ 时：$F(75) = 1440$ AU，所以 $F(75) - F_{\\mathrm{blank}} = 1440 - 120 = 1320$ AU。\n\n转换为每 μL 的分子数：\n$$\nM(45) = \\alpha \\times 720 = \\left(4.8 \\times 10^{9}\\right) \\times 720 = 3.456 \\times 10^{12},\n$$\n$$\nM(60) = \\alpha \\times 1080 = \\left(4.8 \\times 10^{9}\\right) \\times 1080 = 5.184 \\times 10^{12},\n$$\n$$\nM(75) = \\alpha \\times 1320 = \\left(4.8 \\times 10^{9}\\right) \\times 1320 = 6.336 \\times 10^{12}.\n$$\n\n设采样间隔为 $\\Delta t = 15$ $\\mathrm{min}$。在 $t = 60$ $\\mathrm{min}$ 处使用二阶中心差分，一阶导数可近似为\n$$\n\\left.\\frac{dM}{dt}\\right|_{t=60} \\approx \\frac{M(75) - M(45)}{2 \\Delta t} = \\frac{6.336 \\times 10^{12} - 3.456 \\times 10^{12}}{2 \\times 15}.\n$$\n计算分子：$6.336 \\times 10^{12} - 3.456 \\times 10^{12} = 2.880 \\times 10^{12}$。因此，\n$$\n\\left.\\frac{dM}{dt}\\right|_{t=60} \\approx \\frac{2.880 \\times 10^{12}}{30} = 9.60 \\times 10^{10} \\ \\text{分子数/}\\mu\\text{L/分钟}.\n$$\n\n二阶导数可近似为\n$$\n\\left.\\frac{d^{2}M}{dt^{2}}\\right|_{t=60} \\approx \\frac{M(45) - 2 M(60) + M(75)}{(\\Delta t)^{2}} = \\frac{3.456 \\times 10^{12} - 2 \\times 5.184 \\times 10^{12} + 6.336 \\times 10^{12}}{15^{2}}.\n$$\n计算分子：$3.456 \\times 10^{12} - 10.368 \\times 10^{12} + 6.336 \\times 10^{12} = -0.576 \\times 10^{12} = -5.76 \\times 10^{11}$。分母为 $225$。因此，\n$$\n\\left.\\frac{d^{2}M}{dt^{2}}\\right|_{t=60} \\approx \\frac{-5.76 \\times 10^{11}}{225} = -2.56 \\times 10^{9} \\ \\text{分子数/}\\mu\\text{L/分钟}^{2}.\n$$\n\n当 $k_{\\mathrm{mat}} = 0.10$ $\\mathrm{min}^{-1}$ 时，在 $t = 60$ $\\mathrm{min}$ 处的合成速率为\n$$\nS(60) = \\left.\\frac{dM}{dt}\\right|_{t=60} + \\frac{1}{k_{\\mathrm{mat}}} \\left.\\frac{d^{2}M}{dt^{2}}\\right|_{t=60} = \\left(9.60 \\times 10^{10}\\right) + \\left(\\frac{1}{0.10}\\right)\\left(-2.56 \\times 10^{9}\\right).\n$$\n计算修正项：$\\frac{1}{0.10} = 10$，所以 $10 \\times \\left(-2.56 \\times 10^{9}\\right) = -2.56 \\times 10^{10}$。因此，\n$$\nS(60) = 9.60 \\times 10^{10} - 2.56 \\times 10^{10} = 7.04 \\times 10^{10}.\n$$\n\n保留三位有效数字，在 $t = 60$ $\\mathrm{min}$ 时的瞬时合成速率为 $7.04 \\times 10^{10}$ 分子数/μL/分钟。", "answer": "$$\\boxed{7.04 \\times 10^{10}}$$", "id": "2718570"}, {"introduction": "在包含多个基因的合成回路中，所有组分都必须竞争无细胞系统有限的资源，例如RNA聚合酶和核糖体。这项高级练习将资源竞争问题构建为一个优化问题，这是合成生物学中一个强大的设计范式。您将学习如何构建并求解一个线性规划模型，以确定资源的最优分配策略，从而最大化一个加权组合的蛋白产出，实现从系统分析到理性设计的跨越 [@problem_id:2718598]。", "problem": "在无细胞转录-翻译 (TX-TL) 反应中，多个基因的脱氧核糖核酸 (DNA) 模板会竞争有限的 RNA 聚合酶 (RNAP) 和核糖体池以生产蛋白质。根据分子生物学的中心法则，信息从 DNA 流向核糖核酸 (RNA)，再到蛋白质。在一个混合均匀的批次 TX-TL 系统中，RNAP 和核糖体的总数在感兴趣的时间窗口内是有限且守恒的，并且每个基因的蛋白质生产速率共同受到转录能力（每个分配的 RNAP 能生产多少 RNA）和翻译能力（每个分配的核糖体能生产多少蛋白质）的限制。\n\n考虑一个包含以下元素的粗粒化稳态分配模型：\n- 存在 $n$ 个基因，索引为 $i \\in \\{1, \\dots, n\\}$。\n- 每个基因 $i$ 的决策变量：$r_i \\ge 0$（分配的 RNAP 分子数），$b_i \\ge 0$（分配的核糖体数），以及 $p_i \\ge 0$（稳态蛋白质生产速率）。\n- 每个基因 $i$ 的参数：$\\alpha_i > 0$（转录到蛋白质的有效速率，单位：蛋白质/分钟/RNAP），$\\beta_i > 0$（翻译速率，单位：蛋白质/分钟/核糖体），以及 $w_i > 0$（无量纲的优先级权重）。\n- 全局资源约束：$\\sum_{i=1}^{n} r_i \\le R_{\\mathrm{tot}}$ 和 $\\sum_{i=1}^{n} b_i \\le B_{\\mathrm{tot}}$，其中 $R_{\\mathrm{tot}}$ 和 $B_{\\mathrm{tot}}$ 分别是可用的 RNAP 和核糖体分子总数。\n\n从生物物理学角度看，蛋白质的生产共同受到转录和翻译的限制。一个标准的保守近似是通过以下两个步骤来约束每个基因的速率：\n$$\np_i \\le \\alpha_i r_i, \\quad p_i \\le \\beta_i b_i, \\quad \\text{for all } i \\in \\{1,\\dots,n\\}.\n$$\n设计目标是在基因间分配 RNAP 和核糖体，以最大化蛋白质生产速率的加权和：\n$$\n\\max_{p_i,r_i,b_i \\ge 0} \\;\\; \\sum_{i=1}^{n} w_i p_i\n$$\n需满足上述资源和每个基因的能力约束。所有蛋白质生产速率 $p_i$ 的单位应解释为蛋白质/分钟，$R_{\\mathrm{tot}}$ 和 $B_{\\mathrm{tot}}$ 的单位为分子数。权重 $w_i$ 是无量纲的。\n\n您的任务是实现一个程序，给定特定的参数集 $\\{\\alpha_i\\}$、$\\{\\beta_i\\}$、$\\{w_i\\}$ 以及总量 $R_{\\mathrm{tot}}$、$B_{\\mathrm{tot}}$，构建并求解该线性规划，以返回最优目标值\n$$\nJ^\\star = \\sum_{i=1}^{n} w_i p_i^\\star,\n$$\n该值以蛋白质/分钟为单位。对于下方的每个测试用例，将 $J^\\star$ 输出为四舍五入到六位小数的浮点数。\n\n请使用以下测试套件。对于每个案例，$n$ 是基因数量，所有速率 $\\alpha_i$ 和 $\\beta_i$ 的单位分别为蛋白质/分钟/RNAP 和蛋白质/分钟/核糖体。总量 $R_{\\mathrm{tot}}$ 和 $B_{\\mathrm{tot}}$ 的单位是分子数。\n\n- 案例 A:\n  - $n = 3$\n  - $\\alpha_1 = 0.3$, $\\alpha_2 = 0.1$, $\\alpha_3 = 0.2$\n  - $\\beta_1 = 0.05$, $\\beta_2 = 0.2$, $\\beta_3 = 0.08$\n  - $w_1 = 1.0$, $w_2 = 0.5$, $w_3 = 2.0$\n  - $R_{\\mathrm{tot}} = 40$, $B_{\\mathrm{tot}} = 120$\n\n- 案例 B（无资源的边界情况）：\n  - $n = 2$\n  - $\\alpha_1 = 0.2$, $\\alpha_2 = 0.2$\n  - $\\beta_1 = 0.1$, $\\beta_2 = 0.1$\n  - $w_1 = 1.0$, $w_2 = 1.0$\n  - $R_{\\mathrm{tot}} = 0$, $B_{\\mathrm{tot}} = 0$\n\n- 案例 C（单个基因占主导权重）：\n  - $n = 3$\n  - $\\alpha_1 = 0.25$, $\\alpha_2 = 0.15$, $\\alpha_3 = 0.05$\n  - $\\beta_1 = 0.02$, $\\beta_2 = 0.05$, $\\beta_3 = 0.03$\n  - $w_1 = 10.0$, $w_2 = 1.0$, $w_3 = 1.0$\n  - $R_{\\mathrm{tot}} = 50$, $B_{\\mathrm{tot}} = 100$\n\n- 案例 D（强转录限制区域）：\n  - $n = 3$\n  - $\\alpha_1 = 0.01$, $\\alpha_2 = 0.02$, $\\alpha_3 = 0.015$\n  - $\\beta_1 = 0.2$, $\\beta_2 = 0.2$, $\\beta_3 = 0.2$\n  - $w_1 = 1.0$, $w_2 = 1.0$, $w_3 = 1.0$\n  - $R_{\\mathrm{tot}} = 30$, $B_{\\mathrm{tot}} = 1000$\n\n- 案例 E（强翻译限制区域）：\n  - $n = 3$\n  - $\\alpha_1 = 0.2$, $\\alpha_2 = 0.25$, $\\alpha_3 = 0.22$\n  - $\\beta_1 = 0.005$, $\\beta_2 = 0.004$, $\\beta_3 = 0.006$\n  - $w_1 = 1.0$, $w_2 = 2.0$, $w_3 = 1.5$\n  - $R_{\\mathrm{tot}} = 500$, $B_{\\mathrm{tot}} = 30$\n\n最终输出格式：您的程序应生成单行输出，其中按顺序包含案例 A 到 E 的结果。结果应是一个用方括号括起来的、无空格的逗号分隔列表，例如 $[x_A,x_B,x_C,x_D,x_E]$。每个条目必须是代表 $J^\\star$（单位：蛋白质/分钟）并四舍五入到六位小数的小数。", "solution": "问题陈述已提交验证。\n\n**第 1 步：提取给定条件**\n- 基因数量：$n$。\n- 决策变量：$r_i \\ge 0$（RNAP 分子数），$b_i \\ge 0$（核糖体数），$p_i \\ge 0$（蛋白质生产速率）。\n- 参数：$\\alpha_i > 0$（转录到蛋白质的速率），$\\beta_i > 0$（翻译速率），$w_i > 0$（优先级权重）。\n- 资源约束：$\\sum_{i=1}^{n} r_i \\le R_{\\mathrm{tot}}$，$\\sum_{i=1}^{n} b_i \\le B_{\\mathrm{tot}}$。\n- 生产约束：对于所有 $i \\in \\{1, \\dots, n\\}$，$p_i \\le \\alpha_i r_i$ 和 $p_i \\le \\beta_i b_i$。\n- 目标：最大化蛋白质生产的加权和 $\\sum_{i=1}^{n} w_i p_i$。\n- 提供了包含所有参数具体数值的测试用例。\n\n**第 2 步：使用给定条件进行验证**\n根据所需标准对问题进行评估。\n- **科学依据**：该模型是合成生物学中资源竞争的一个标准（尽管简化了）的表示，植根于中心法则。其公式在物理上和生物学上都是一致的。\n- **适定性**：该问题被构建为一个线性规划 (LP)。目标函数是线性的，所有约束都是线性不等式。可行集是一个凸多面体，并且由于资源是非负的，该集合非空且紧凑。因此，解是存在且定义明确的。\n- **目标**：问题使用精确、无歧义的数学语言陈述。\n- 问题是自洽的，没有缺失信息或矛盾。它是可形式化的、相关的，并且是科学上可验证的。\n\n**第 3 步：结论与行动**\n问题是**有效的**。将提供一个解决方案。\n\n问题是求解以下优化问题：\n$$\n\\max_{p_i, r_i, b_i \\ge 0} \\;\\; \\sum_{i=1}^{n} w_i p_i\n$$\n约束条件为：\n$$\n\\begin{align*}\np_i &\\le \\alpha_i r_i, \\quad \\forall i \\in \\{1, \\dots, n\\} \\\\\np_i &\\le \\beta_i b_i, \\quad \\forall i \\in \\{1, \\dots, n\\} \\\\\n\\sum_{i=1}^{n} r_i &\\le R_{\\mathrm{tot}} \\\\\n\\sum_{i=1}^{n} b_i &\\le B_{\\mathrm{tot}}\n\\end{align*}\n$$\n这是一个包含 $3n$ 个变量和 $2n+2$ 个约束的线性规划。我们可以简化此公式。目标是最大化 $p_i$ 的加权和，其中权重 $w_i > 0$。要实现任何非零的生产速率 $p_i > 0$，资源分配必须满足 $r_i \\ge p_i / \\alpha_i$ 和 $b_i \\ge p_i / \\beta_i$。为了最大化目标，我们必须尽可能高效地使用资源。因此，在最优解处，为支持其生产速率而分配的任何资源都将是最小的，即 $r_i^\\star = p_i^\\star / \\alpha_i$ 和 $b_i^\\star = p_i^\\star / \\beta_i$。我们可以将这些表达式代入总资源约束中，从而消去变量 $r_i$ 和 $b_i$。\n\n该优化问题可简化为一个等价且更紧凑的、仅含 $n$ 个变量 $p_i$ 的 LP：\n$$\n\\max_{p_i \\ge 0} \\;\\; \\sum_{i=1}^{n} w_i p_i\n$$\n约束条件为：\n$$\n\\begin{align*}\n\\sum_{i=1}^{n} \\frac{1}{\\alpha_i} p_i &\\le R_{\\mathrm{tot}} \\\\\n\\sum_{i=1}^{n} \\frac{1}{\\beta_i} p_i &\\le B_{\\mathrm{tot}}\n\\end{align*}\n$$\n这是一个标准的 LP 公式。此问题将使用 `scipy.optimize` 库中的 `linprog` 函数来解决，该函数是用于解决此类问题的稳健、成熟的数值求解器。`linprog` 函数旨在解决以下形式的最小化问题：\n$$\n\\min_{x} \\;\\; c^T x\n$$\n约束条件为 $A_{ub} x \\le b_{ub}$ 和 $A_{eq} x = b_{eq}$，以及对 $x$ 的界限。\n\n为了使我们的问题与此格式匹配，我们必须执行以下转换：\n$1$. 决策变量向量为 $x = [p_1, p_2, \\dots, p_n]^T$。\n$2$. 最大化 $\\sum w_i p_i$ 等价于最小化 $-\\sum w_i p_i$。因此，用于求解器的目标向量是 $c = [-w_1, -w_2, \\dots, -w_n]^T$。\n$3$. 约束已经处于 $A_{ub} x \\le b_{ub}$ 的形式。约束矩阵 $A_{ub}$ 是一个 $2 \\times n$ 矩阵，向量 $b_{ub}$ 有 2 个元素：\n$$\nA_{ub} = \\begin{pmatrix}\n1/\\alpha_1 & 1/\\alpha_2 & \\dots & 1/\\alpha_n \\\\\n1/\\beta_1 & 1/\\beta_2 & \\dots & 1/\\beta_n\n\\end{pmatrix}\n, \\quad\nb_{ub} = \\begin{pmatrix}\nR_{\\mathrm{tot}} \\\\\nB_{\\mathrm{tot}}\n\\end{pmatrix}\n$$\n$4$. 变量是非负的，因此每个 $p_i$ 的界限是 $[0, \\infty)$。\n\n求解器将返回一个包含结果的对象。最小化问题的最优目标值是 `result.fun`。因此，我们原始最大化问题的最优值是 $J^\\star = -(\\text{result.fun})$。实现过程将遍历每个测试用例，按定义构建 LP 参数 $c$、$A_{ub}$ 和 $b_{ub}$，调用求解器，并报告按要求格式化为六位小数的计算出的最优目标值。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A\n        {\n            \"alphas\": [0.3, 0.1, 0.2],\n            \"betas\": [0.05, 0.2, 0.08],\n            \"weights\": [1.0, 0.5, 2.0],\n            \"R_tot\": 40.0,\n            \"B_tot\": 120.0,\n        },\n        # Case B (boundary with no resources)\n        {\n            \"alphas\": [0.2, 0.2],\n            \"betas\": [0.1, 0.1],\n            \"weights\": [1.0, 1.0],\n            \"R_tot\": 0.0,\n            \"B_tot\": 0.0,\n        },\n        # Case C (dominant weight on a single gene)\n        {\n            \"alphas\": [0.25, 0.15, 0.05],\n            \"betas\": [0.02, 0.05, 0.03],\n            \"weights\": [10.0, 1.0, 1.0],\n            \"R_tot\": 50.0,\n            \"B_tot\": 100.0,\n        },\n        # Case D (strongly transcription-limited regime)\n        {\n            \"alphas\": [0.01, 0.02, 0.015],\n            \"betas\": [0.2, 0.2, 0.2],\n            \"weights\": [1.0, 1.0, 1.0],\n            \"R_tot\": 30.0,\n            \"B_tot\": 1000.0,\n        },\n        # Case E (strongly translation-limited regime)\n        {\n            \"alphas\": [0.2, 0.25, 0.22],\n            \"betas\": [0.005, 0.004, 0.006],\n            \"weights\": [1.0, 2.0, 1.5],\n            \"R_tot\": 500.0,\n            \"B_tot\": 30.0,\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        alphas = np.array(case[\"alphas\"])\n        betas = np.array(case[\"betas\"])\n        weights = np.array(case[\"weights\"])\n        R_tot = case[\"R_tot\"]\n        B_tot = case[\"B_tot\"]\n\n        # Objective function for minimization: c^T * x\n        # We maximize sum(w_i * p_i), which is equivalent to minimizing sum(-w_i * p_i).\n        c = -weights\n\n        # Inequality constraints: A_ub * x <= b_ub\n        # Constraint 1: sum(p_i / alpha_i) <= R_tot\n        # Constraint 2: sum(p_i / beta_i) <= B_tot\n        A_ub = np.array([\n            1.0 / alphas,\n            1.0 / betas\n        ])\n        b_ub = np.array([R_tot, B_tot])\n\n        # Bounds for variables p_i are [0, infinity).\n        p_bounds = (0, None)\n\n        # Solve the linear program using the 'highs' method.\n        res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=p_bounds, method='highs')\n\n        # The result from linprog is the minimum of the objective function.\n        # The maximum value for the original problem is the negative of this result.\n        if res.success:\n            # res.fun is the optimal value of the objective function for minimization.\n            optimal_value = -res.fun\n        else:\n            # Handle edge cases where the only feasible solution is zero, \n            # which might be flagged as a failure by the solver depending on the context.\n            if R_tot == 0.0 and B_tot == 0.0:\n                 optimal_value = 0.0\n            else:\n                 # In a well-posed problem like this, failure is unexpected. \n                 # However, we can use the reported (though non-optimal) value if it exists,\n                 # or default to 0. A robust implementation would log this event.\n                 optimal_value = -res.fun if res.fun is not None else 0.0\n\n        results.append(optimal_value)\n\n    # Format output as a comma-separated list in brackets, with each number\n    # formatted as a float with six decimal places.\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2718598"}]}