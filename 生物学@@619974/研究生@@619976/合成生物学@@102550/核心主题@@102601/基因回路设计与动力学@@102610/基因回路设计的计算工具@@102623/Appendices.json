{"hands_on_practices": [{"introduction": "在对基因线路进行建模时，我们通常会从众多的物理参数开始。无量纲化是一种强大的数学技术，它通过将参数组合成无量纲的量来减少参数数量，从而揭示系统动力学的真正驱动因素。这项实践将指导你对一个经典的相互抑制环路进行无量纲化，这是分析任何复杂模型并有效探索其行为的关键第一步。", "problem": "在合成基因线路的计算设计中，转录调控的常微分方程（ODE）模型被常规使用，而无量纲化是在进行计算机模拟搜索前为了约简参数而执行的基础步骤。考虑一个由两个基因间的相互抑制环路，该环路由以下 Hill 型抑制系统建模：\n$$\n\\frac{dx}{dt}=\\frac{\\alpha}{1+y^{n}}-\\delta\\,x,\\qquad \\frac{dy}{dt}=\\frac{\\beta}{1+x^{m}}-\\gamma\\,y,\n$$\n其中，$x(t)$ 和 $y(t)$ 表示归一化的启动子活性（无量纲，且均已经过缩放，使得抑制阈值为 $1$），$\\alpha$ 和 $\\beta$ 是正常数生产速率常数，$\\delta$ 和 $\\gamma$ 是正常数一阶衰变率，而 $n$ 和 $m$ 是正常数 Hill 系数。假设标准的转录-翻译动力学符合分子生物学中心法则（DNA $\\rightarrow$ RNA $\\rightarrow$ 蛋白质），并且 Hill 抑制是一种经过充分检验的唯象描述。\n\n请仅使用保持 Hill 函数中单位抑制阈值的缩放方法，通过重新缩放时间以归一化其中一个线性衰变项，从而推导出该系统的完全无量纲形式。从时间单位变化下的不变性第一性原理以及 Hill 非线性的结构作用出发，识别出完全决定该无量纲系统动力学的最小独立无量纲参数集，并论证为何在不改变 Hill 函数阈值的情况下，无法进一步减少参数数量。\n\n将此最小集合中独立无量纲参数的数量作为你的最终答案。以无单位的单个整数形式提供最终答案。无需四舍五入。", "solution": "我们从两个核心且被广泛接受的基础出发：(i) 分子生物学中心法则为受调控的基因产物的产生和衰变项提供了理论依据；(ii) Hill 型抑制是转录调控的一种标准唯象描述，其产生的生产项形如 $\\alpha/(1+y^{n})$ 和 $\\beta/(1+x^{m})$，其中 $n$ 和 $m$ 是正常数 Hill 系数，并且通过对 $x$ 和 $y$ 的预先缩放，已将抑制阈值归一化为 $1$。因此，变量 $x$ 和 $y$ 已经是无量纲的，并且因为在将 $x$ 和 $y$ 选为无量纲活性后，$\\frac{dx}{dt}$ 和 $\\frac{dy}{dt}$ 具有时间倒数的量纲，所以方程右侧也具有时间倒数的量纲。\n\n该系统为\n$$\n\\frac{dx}{dt}=\\frac{\\alpha}{1+y^{n}}-\\delta\\,x,\\qquad \\frac{dy}{dt}=\\frac{\\beta}{1+x^{m}}-\\gamma\\,y,\n$$\n其中 $\\alpha>0, \\beta>0, \\delta>0, \\gamma>0, n>0, m>0$。允许的无量纲化必须保持 Hill 阈值固定为 $1$，这禁止对 $x$ 或 $y$ 进行任何会在 $1+y^{n}$ 或 $1+x^{m}$ 内部引入额外系数的重新缩放。\n\n因此，我们只考虑对时间进行重新缩放。定义一个无量纲时间\n$$\n\\tau=\\delta\\,t,\n$$\n这相当于以 $x$ 的特征衰变时间为单位来度量时间。根据链式法则，\n$$\n\\frac{dx}{d\\tau}=\\frac{1}{\\delta}\\frac{dx}{dt},\\qquad \\frac{dy}{d\\tau}=\\frac{1}{\\delta}\\frac{dy}{dt}.\n$$\n代入原方程得到\n$$\n\\frac{dx}{d\\tau}=\\frac{\\alpha/\\delta}{1+y^{n}}-x,\\qquad \\frac{dy}{d\\tau}=\\frac{\\beta/\\delta}{1+x^{m}}-\\frac{\\gamma}{\\delta}\\,y.\n$$\n引入以下无量纲参数组合：\n$$\na=\\frac{\\alpha}{\\delta},\\qquad c=\\frac{\\beta}{\\delta},\\qquad r=\\frac{\\gamma}{\\delta}.\n$$\n无量纲化后的系统变为\n$$\n\\frac{dx}{d\\tau}=\\frac{a}{1+y^{n}}-x,\\qquad \\frac{dy}{d\\tau}=\\frac{c}{1+x^{m}}-r\\,y,\n$$\n其中 $x$ 和 $y$ 保持无量纲，Hill 阈值保持为 $1$。\n\n控制该无量纲系统动力学的参数集是\n$$\n\\{a,c,r,n,m\\}=\\left\\{\\frac{\\alpha}{\\delta},\\frac{\\beta}{\\delta},\\frac{\\gamma}{\\delta},n,m\\right\\}.\n$$\n现在我们论证其最小性。任何试图对 $x$ 或 $y$ 进行形如 $x=\\lambda\\,\\tilde{x}$ 或 $y=\\mu\\,\\tilde{y}$ 的进一步重新缩放，都会将 Hill 项变换为\n$$\n\\frac{a}{1+y^{n}}=\\frac{a}{1+(\\mu\\,\\tilde{y})^{n}}=\\frac{a}{1+\\mu^{n}\\,\\tilde{y}^{n}},\\qquad \\frac{c}{1+x^{m}}=\\frac{c}{1+(\\lambda\\,\\tilde{x})^{m}}=\\frac{c}{1+\\lambda^{m}\\,\\tilde{x}^{m}},\n$$\n这会在 Hill 函数的分母中引入新的乘法因子 $\\mu^{n}$ 和 $\\lambda^{m}$，这些因子无法在不将抑制阈值从 $1$ 改变的情况下被其他地方吸收。因此，这种缩放会增加而非减少独立参数的数量。第二次时间重缩放，例如 $\\sigma=\\kappa\\,\\tau$，最多只能将因子 $r$ 在方程之间转移，但不能消除它，因为归一化一个方程（$x$ 的方程）中的衰变项，必然会在另一个方程（$y$ 的方程）中留下一个相对速率因子。具体来说，选择 $\\tau=\\delta t$ 固定了第一个方程中的 $-x$ 项；任何进一步的时间重缩放 $\\sigma=\\kappa\\tau$ 都会在两个方程的右侧重新引入前置因子 $\\kappa^{-1}$，使得比率 $r=\\gamma/\\delta$ 作为一个真正的无量纲参数保持不变。因此，通过保持 Hill 阈值的允许缩放，不可能实现额外的参数消除。\n\n因此，最小的独立无量纲参数集是 $\\{a,c,r,n,m\\}$，它包含 $5$ 个元素。所以，控制该动力学的独立无量纲参数的数量是 $5$。", "answer": "$$\\boxed{5}$$", "id": "2723625"}, {"introduction": "合成生物学的一个关键目标是设计具有特定行为的线路，例如双稳态“拨动开关”的记忆功能。线性稳定性分析使我们能够通过检查系统在稳态附近的微小扰动下的响应，来从数学上确定线路展现出所需行为的条件。在本练习中，你将分析以希尔系数 $n$ 表示的协同性对于产生双稳态是何等重要，从而让你深刻理解基因开关的设计原则。", "problem": "在基因电路的计算机辅助设计(CAD)工具中，通常通过对转录调控进行建模来分析对称互抑制基因触发开关，该模型使用源于准平衡状态下协同结合的希尔函数。考虑两个参数相同的转录阻遏蛋白，其动力学由含希尔型抑制项和线性稀释-降解项的一阶质量平衡常微分方程(ODEs)描述。具体来说，设蛋白质浓度为 $x(t)$ 和 $y(t)$，并假设有相同的最大合成速率 $\\alpha > 0$，描述结合协同性的希尔系数 $n \\geq 0$，以及一个将有效一阶损失率标度为 $1$ 的时间尺度。标准的对称ODE模型是\n$$\n\\frac{dx}{dt} \\;=\\; \\frac{\\alpha}{1 + y^{n}} \\;-\\; x, \n\\qquad\n\\frac{dy}{dt} \\;=\\; \\frac{\\alpha}{1 + x^{n}} \\;-\\; y.\n$$\n这些方程源于分子生物学中心法则（即转录和翻译产生蛋白质），并结合了一阶损失和一个希尔抑制函数 $\\alpha/(1+(\\cdot)^{n})$。该函数是协同结合的一个经过充分检验的唯象简化模型。\n\n请使用线性稳定性分析，并仅根据上述基本定义，分析协同性 $n$ 如何影响该对称系统中双稳态的存在性。特别地，请确定能够使系统在某个 $\\alpha$ 值下产生双稳态（即两个通过交换对称性关联的、不同的稳定稳态）的最小希尔系数（解释为在所有实数 $n$ 上的下确界）。请将你的最终答案表示为一个实数。无需四舍五入。", "solution": "描述蛋白质浓度 $x(t)$ 和 $y(t)$ 的常微分方程组如下：\n$$\n\\frac{dx}{dt} = \\frac{\\alpha}{1 + y^{n}} - x\n$$\n$$\n\\frac{dy}{dt} = \\frac{\\alpha}{1 + x^{n}} - y\n$$\n在此，$\\alpha > 0$ 是最大合成速率，$n \\geq 0$ 是代表协同性的希尔系数，有效降解速率常数被标度为 $1$。\n\n双稳态指的是存在两个不同的稳定稳态。在这个对称系统中，双稳态通常表现为两个稳定的不对称稳态 $(\\bar{x}_a, \\bar{y}_a)$ 和 $(\\bar{y}_a, \\bar{x}_a)$（其中 $\\bar{x}_a \\neq \\bar{y}_a$）与一个不稳定的对称稳态 $(\\bar{x}_s, \\bar{y}_s)$（其中 $\\bar{x}_s = \\bar{y}_s$）共存。因此，双稳态的出现与对称稳态的失稳有关。我们首先分析这个对称稳态的稳定性。\n\n首先，我们求解对称稳态的浓度，记为 $x_s$。通过令 $\\frac{dx}{dt} = 0$ 且 $x=y=x_s$，我们得到：\n$$\nx_s = \\frac{\\alpha}{1 + x_s^{n}}\n$$\n这可以重写为 $\\alpha = x_s(1 + x_s^n)$。\n\n为了分析稳定性，我们通过计算雅可比矩阵 $J$ 在稳态 $(x_s, x_s)$ 附近对系统进行线性化。\n$$\nJ(x, y) = \\begin{pmatrix} \\frac{\\partial}{\\partial x}\\left(\\frac{\\alpha}{1 + y^{n}} - x\\right) & \\frac{\\partial}{\\partial y}\\left(\\frac{\\alpha}{1 + y^{n}} - x\\right) \\\\ \\frac{\\partial}{\\partial x}\\left(\\frac{\\alpha}{1 + x^{n}} - y\\right) & \\frac{\\partial}{\\partial y}\\left(\\frac{\\alpha}{1 + x^{n}} - y\\right) \\end{pmatrix} = \\begin{pmatrix} -1 & -\\frac{\\alpha n y^{n-1}}{(1+y^n)^2} \\\\ -\\frac{\\alpha n x^{n-1}}{(1+x^n)^2} & -1 \\end{pmatrix}\n$$\n在对称稳态 $(x_s, x_s)$ 处计算该雅可比矩阵：\n$$\nJ(x_s, x_s) = \\begin{pmatrix} -1 & -\\frac{\\alpha n x_s^{n-1}}{(1+x_s^n)^2} \\\\ -\\frac{\\alpha n x_s^{n-1}}{(1+x_s^n)^2} & -1 \\end{pmatrix}\n$$\n我们可以通过代入 $\\alpha = x_s(1 + x_s^n)$ 来简化非对角线项：\n$$\n-\\frac{\\alpha n x_s^{n-1}}{(1+x_s^n)^2} = -\\frac{x_s(1+x_s^n) n x_s^{n-1}}{(1+x_s^n)^2} = -\\frac{n x_s^n}{1+x_s^n}\n$$\n我们定义一个量 $S = \\frac{n x_s^n}{1+x_s^n}$。雅可比矩阵变为：\n$$\nJ_s = \\begin{pmatrix} -1 & -S \\\\ -S & -1 \\end{pmatrix}\n$$\n$J_s$ 的特征值 $\\lambda$ 可通过特征方程 $\\det(J_s - \\lambda I) = 0$ 求得：\n$$\n(-1-\\lambda)^2 - (-S)^2 = 0 \\implies (1+\\lambda)^2 = S^2\n$$\n这给出了两个特征值：\n$$\n\\lambda_1 = -1 - S\n$$\n$$\n\\lambda_2 = -1 + S\n$$\n为使稳态稳定，两个特征值的实部都必须为负。由于 $\\alpha > 0$ 且 $n \\geq 0$，因此 $x_s > 0$，从而 $S = \\frac{n x_s^n}{1+x_s^n} \\geq 0$。\n因此，$\\lambda_1 = -1 - S \\leq -1$ 恒为负。\n对称稳态的稳定性完全由 $\\lambda_2$ 的符号决定。如果 $\\lambda_2 < 0$，该稳态是稳定的；如果 $\\lambda_2 > 0$，则是不稳定的。稳定性丧失且可能出现双稳态的分岔发生在 $\\lambda_2 = 0$ 处。\n\n为使对称稳态不稳定（这是双稳态的一个必要条件），我们需要 $\\lambda_2 > 0$：\n$$\n-1 + S > 0 \\implies S > 1\n$$\n代入 $S$ 的表达式：\n$$\n\\frac{n x_s^n}{1+x_s^n} > 1\n$$\n这个不等式是对称稳态不稳定的条件。问题要求的是，能使系统在*某个* $\\alpha > 0$ 值下产生双稳态的最小 $n$ 值。这意味着我们在寻找能通过选择某个 $\\alpha$ 从而满足该不稳定条件的最小 $n$ 值。\n\n稳态值 $x_s$ 通过方程 $\\alpha = x_s(1+x_s^n)$ 依赖于 $\\alpha$。我们考虑函数 $f(x_s) = x_s(1+x_s^n)$。对于 $x_s > 0$ 和 $n \\geq 0$，该函数是连续且严格递增的，从 $f(0)=0$ 开始，当 $x_s \\to \\infty$ 时趋向于 $\\infty$。这意味着对于任意给定的 $\\alpha > 0$，都存在一个唯一对应的 $x_s > 0$。反过来说，对于任意期望的 $x_s > 0$ 值，我们都能找到一个对应的 $\\alpha > 0$，使其成为对称稳态点。\n\n因此，不稳定条件 $\\frac{n x_s^n}{1+x_s^n} > 1$ 是否能对某个 $\\alpha$ 成立的问题，等价于问该不等式是否能对某个 $x_s > 0$ 成立。\n我们来分析表达式 $\\frac{n x_s^n}{1+x_s^n}$。令 $u = x_s^n$。由于 $x_s$ 可以在 $(0, \\infty)$ 内取任意值，所以 $u$ 的取值范围也是 $(0, \\infty)$。该表达式变成一个关于 $u$ 和 $n$ 的函数：\n$$\nG(u) = \\frac{nu}{1+u}\n$$\n我们需要确定对于哪些 $n$ 值，$G(u)$ 在 $u \\in (0, \\infty)$ 上的值域会包含大于 $1$ 的值。\n函数 $G(u)$ 对 $u > 0$ 是单调递增的。其值域由区间 $(\\lim_{u\\to 0^+} G(u), \\lim_{u\\to\\infty} G(u))$ 给出。\n$$\n\\lim_{u\\to 0^+} G(u) = \\frac{n \\cdot 0}{1+0} = 0\n$$\n$$\n\\lim_{u\\to\\infty} G(u) = \\lim_{u\\to\\infty} \\frac{nu}{u(1/u+1)} = \\lim_{u\\to\\infty} \\frac{n}{1/u+1} = n\n$$\n所以，对于一个给定的 $n$，通过改变 $\\alpha$（从而改变 $x_s$），量 $S = \\frac{n x_s^n}{1+x_s^n}$ 的所有可能值的集合是开区间 $(0, n)$。\n\n不稳定条件 $S > 1$ 能被满足，当且仅当区间 $(0, n)$ 包含大于 $1$ 的值。而这成立的充要条件是该区间的上确界 $n$ 大于 $1$。\n$$\nn > 1\n$$\n如果 $n \\leq 1$，表达式 $\\frac{n x_s^n}{1+x_s^n}$ 的值永远不可能大于 $1$，因此对称稳态始终是稳定的，不会出现双稳态。如果 $n > 1$，我们总能找到一个足够大的 $\\alpha$，使得 $x_s$ 也足够大，从而满足 $\\frac{n x_s^n}{1+x_s^n} > 1$，这会导致对称稳态变得不稳定，并出现两个稳定的不对称稳态（这是该系统的一个标准的超临界叉式分岔情景）。\n\n因此，对于某个 $\\alpha$ 的选择，存在双稳态的希尔系数所需满足的条件是 $n>1$。问题要求的是这种希尔系数的最小值，即在实数 $n$ 上的下确界。能够出现双稳态的 $n$ 值集合是区间 $(1, \\infty)$。这个集合的下确界是 $1$。", "answer": "$$\n\\boxed{1}\n$$", "id": "2723594"}, {"introduction": "理论模型只有在它们的参数能通过实验数据与现实世界联系起来时才有用。通过将常微分方程 ($ODE$) 系统重新表述为线性回归问题，我们可以从时序测量数据中高效地估计出转录和翻译速率等关键动力学参数。这个动手编程问题将教你一种基本的参数推断方法，为你搭建起从抽象的基因表达模型到具体的实验数据（例如来自无细胞 TX-TL 系统）之间的桥梁。", "problem": "提供给您的是来自无细胞转录-翻译 (TX-TL) 反应的批量转录-翻译荧光时间序列数据，其中信使核糖核酸 (mRNA) 和蛋白质的荧光随时间被记录下来。假设以下基于中心法则（脱氧核糖核酸到核糖核酸到蛋白质）和一级质量作用动力学的基本且广泛使用的模型假设：\n\n- mRNA 浓度动态满足以下常微分方程 (ODE)：$$\\frac{dm}{dt} = k_{\\mathrm{tx}} - \\delta_m m,$$ 其中 $m$ 是 mRNA 浓度，单位为 $\\mathrm{nM}$；$k_{\\mathrm{tx}}$ 是转录速率，单位为 $\\mathrm{nM}\\,\\mathrm{min}^{-1}$；$\\delta_m$ 是 mRNA 的一级降解速率，单位为 $\\mathrm{min}^{-1}$。\n- 蛋白质浓度动态满足以下常微分方程：$$\\frac{dp}{dt} = k_{\\mathrm{tl}}\\, m - \\delta_p p,$$ 其中 $p$ 是蛋白质浓度，单位为 $\\mathrm{nM}$；$k_{\\mathrm{tl}}$ 是翻译速率，单位为 $\\mathrm{min}^{-1}$；$\\delta_p$ 是蛋白质的一级降解/稀释速率，单位为 $\\mathrm{min}^{-1}$。\n- 记录的荧光信号通过已知的校准（增益）和基线（偏移）与浓度呈线性关系：$$y_m = s_m\\, m + b_m,\\quad y_p = s_p\\, p + b_p,$$ 其中 $y_m$ 和 $y_p$ 是以任意单位 (au) 计的荧光强度，$s_m$ 和 $s_p$ 是校准增益，单位为 $\\mathrm{au}\\,\\mathrm{nM}^{-1}$，$b_m$ 和 $b_p$ 是基线偏移，单位为 $\\mathrm{au}$。\n\n仅使用这些基本假设和离散采样的时间点，通过使用时间导数的前向差分近似，将常微分方程重构为参数线性的回归模型，来估计参数 $k_{\\mathrm{tx}}$、$\\delta_m$、$k_{\\mathrm{tl}}$ 和 $\\delta_p$。具体来说，对于连续的时间点 $t_i$ 和 $t_{i+1}$，作如下近似：$$\\left.\\frac{dm}{dt}\\right|_{t_i} \\approx \\frac{m_{i+1}-m_i}{t_{i+1}-t_i},\\qquad \\left.\\frac{dp}{dt}\\right|_{t_i} \\approx \\frac{p_{i+1}-p_i}{t_{i+1}-t_i},$$ 构建线性系统：$$\\frac{m_{i+1}-m_i}{t_{i+1}-t_i} = -\\delta_m\\, m_i + k_{\\mathrm{tx}},\\qquad \\frac{p_{i+1}-p_i}{t_{i+1}-t_i} = k_{\\mathrm{tl}}\\, m_i - \\delta_p\\, p_i,$$ 并对所有有效的索引 $i$ 以最小二乘法求解 $k_{\\mathrm{tx}}$、$\\delta_m$、$k_{\\mathrm{tl}}$ 和 $\\delta_p$。\n\n重要实现要求：\n- 在计算导数之前，使用 $m_i = (y_{m,i} - b_m)/s_m$ 和 $p_i = (y_{p,i} - b_p)/s_p$ 将荧光转换为浓度。\n- 完全按照上述方式使用前向差分，将 $\\frac{m_{i+1}-m_i}{t_{i+1}-t_i}$ 与每个区间左端的 $m_i$ 和 $p_i$ 状态值配对。\n- 以指定单位表示所有速率参数：$k_{\\mathrm{tx}}$ 单位为 $\\mathrm{nM}\\,\\mathrm{min}^{-1}$，$\\delta_m$ 单位为 $\\mathrm{min}^{-1}$，$k_{\\mathrm{tl}}$ 单位为 $\\mathrm{min}^{-1}$，$\\delta_p$ 单位为 $\\mathrm{min}^{-1}$。\n- 您的程序应生成单行输出，其中包含一个以逗号分隔的列表的列表形式的结果，每个内部列表都按 $[k_{\\mathrm{tx}}, \\delta_m, k_{\\mathrm{tl}}, \\delta_p]$ 的顺序排列一个测试用例，所有值都四舍五入到小数点后六位。最终格式必须与 $$\\texttt{[[v\\_11,v\\_12,v\\_13,v\\_14],[v\\_21,v\\_22,v\\_23,v\\_24],\\dots]}$$ 完全一样，在单行上，没有空格。\n\n测试套件：\n对于下面的每个测试用例，请使用提供的时间向量、荧光轨迹和校准常数。\n\n- 测试用例 1：\n  - 时间（分钟）：$[0, 2, 4, 6, 8, 10, 12]$。\n  - mRNA 荧光 $y_m$（任意单位）：$[400, 1600, 2320, 2752, 3011.2, 3166.72, 3260.032]$。\n  - 蛋白质荧光 $y_p$（任意单位）：$[1000, 1000, 1450, 2125, 2894.5, 3684.25, 4453.345]$。\n  - 校准增益和基线：$s_m = 120\\,\\mathrm{au}\\,\\mathrm{nM}^{-1}$，$b_m = 400\\,\\mathrm{au}$，$s_p = 15\\,\\mathrm{au}\\,\\mathrm{nM}^{-1}$，$b_p = 1000\\,\\mathrm{au}$。\n- 测试用例 2：\n  - 时间（分钟）：$[0, 2, 4, 6, 8, 10]$。\n  - mRNA 荧光 $y_m$（任意单位）：$[100, 900, 1700, 2500, 3300, 4100]$。\n  - 蛋白质荧光 $y_p$（任意单位）：$[500, 500, 628, 858.4, 1170.72, 1548.576]$。\n  - 校准增益和基线：$s_m = 200\\,\\mathrm{au}\\,\\mathrm{nM}^{-1}$，$b_m = 100\\,\\mathrm{au}$，$s_p = 20\\,\\mathrm{au}\\,\\mathrm{nM}^{-1}$，$b_p = 500\\,\\mathrm{au}$。\n- 测试用例 3：\n  - 时间（分钟）：$[0, 1, 2, 3, 4, 5, 6, 7]$。\n  - mRNA 荧光 $y_m$（任意单位）：$[200, 2000, 2900, 3350, 3575, 3687.5, 3743.75, 3771.875]$。\n  - 蛋白质荧光 $y_p$（任意单位）：$[900, 900, 1188, 1533.6, 1847.52, 2103.264, 2300.2848, 2447.19936]$。\n  - 校准增益和基线：$s_m = 150\\,\\mathrm{au}\\,\\mathrm{nM}^{-1}$，$b_m = 200\\,\\mathrm{au}$，$s_p = 12\\,\\mathrm{au}\\,\\mathrm{nM}^{-1}$，$b_p = 900\\,\\mathrm{au}$。\n\n输出规范：\n- 对于每个测试用例，使用所述的线性回归方法估计 $(k_{\\mathrm{tx}}, \\delta_m, k_{\\mathrm{tl}}, \\delta_p)$。\n- 您的程序应产生一行输出，其中包含一个包含三个内部列表的单一列表，每个测试用例一个，按 $[[k_{\\mathrm{tx},1},\\delta_{m,1},k_{\\mathrm{tl},1},\\delta_{p,1}],[k_{\\mathrm{tx},2},\\delta_{m,2},k_{\\mathrm{tl},2},\\delta_{p,2}],[k_{\\mathrm{tx},3},\\delta_{m,3},k_{\\mathrm{tl},3},\\delta_{p,3}]]$ 的顺序排列，所有数字四舍五入到小数点后六位，且无空格。", "solution": "该问题被验证为具有科学依据、适定、客观且完整。它描述了系统生物学中的一个标准且合理的任务：从时间序列数据中估计动力学参数。所规定的方法虽然基础，却是数值近似和线性回归的有效应用。我们继续进行求解。\n\n目标是估计中心法则模型的四个动力学参数：转录速率 $k_{\\mathrm{tx}}$、信使核糖核酸 (mRNA) 降解速率 $\\delta_m$、翻译速率 $k_{\\mathrm{tl}}$ 和蛋白质降解速率 $\\delta_p$。该估计是使用 mRNA 和蛋白质荧光的离散时间序列测量值来进行的。\n\n该系统由一对线性常微分方程 (ODE) 控制：\n$$\n\\frac{dm}{dt} = k_{\\mathrm{tx}} - \\delta_m m(t) \\quad \\text{(1)}\n$$\n$$\n\\frac{dp}{dt} = k_{\\mathrm{tl}}\\, m(t) - \\delta_p p(t) \\quad \\text{(2)}\n$$\n其中 $m(t)$ 和 $p(t)$ 分别代表在时间 $t$ 的 mRNA 和蛋白质浓度。\n\n原始荧光数据 $y_m$ 和 $y_p$ 首先使用提供的线性校准常数转换为浓度 $m$ 和 $p$：\n$$\nm_i = \\frac{y_{m,i} - b_m}{s_m}\n$$\n$$\np_i = \\frac{y_{p,i} - b_p}{s_p}\n$$\n对于每个时间点 $t_i$。\n\n该方法的核心是将微分方程转换为适用于线性回归的代数方程。这是通过使用一阶前向差分格式来近似时间导数实现的。对于时间区间 $[t_i, t_{i+1}]$，在时间 $t_i$ 的导数近似为：\n$$\n\\left.\\frac{dm}{dt}\\right|_{t_i} \\approx \\frac{m_{i+1}-m_i}{t_{i+1}-t_i} \\quad \\text{and} \\quad \\left.\\frac{dp}{dt}\\right|_{t_i} \\approx \\frac{p_{i+1}-p_i}{t_{i+1}-t_i}\n$$\n将这些近似值代入方程 ($1$) 和 ($2$)，得到两组线性方程，一组用于 mRNA 动态，另一组用于蛋白质动态。\n\n对于 mRNA 参数，方程 ($1$) 变为：\n$$\n\\frac{m_{i+1}-m_i}{t_{i+1}-t_i} \\approx k_{\\mathrm{tx}} - \\delta_m m_i\n$$\n该方程在未知参数 $k_{\\mathrm{tx}}$ 和 $\\delta_m$ 上是线性的。通过为每个测量区间 $i = 0, 1, \\dots, N-2$（其中 $N$ 是总时间点数）写出一个这样的方程，我们可以构建一个形式为 $A_m \\mathbf{x}_m = \\mathbf{b}_m$ 的线性系统。系统各组成部分为：\n- 参数向量 $\\mathbf{x}_m = \\begin{bmatrix} k_{\\mathrm{tx}} \\\\ \\delta_m \\end{bmatrix}$。\n- 目标向量 $\\mathbf{b}_m$，一个 $(N-1) \\times 1$ 的列向量，其元素为 $(\\mathbf{b}_m)_i = \\frac{m_{i+1}-m_i}{t_{i+1}-t_i}$。\n- 回归矩阵 $A_m$，一个 $(N-1) \\times 2$ 的矩阵，其行为 $(A_m)_i = \\begin{bmatrix} 1 & -m_i \\end{bmatrix}$。\n\n类似地，对于蛋白质参数，方程 ($2$) 变为：\n$$\n\\frac{p_{i+1}-p_i}{t_{i+1}-t_i} \\approx k_{\\mathrm{tl}} m_i - \\delta_p p_i\n$$\n这在参数 $k_{\\mathrm{tl}}$ 和 $\\delta_p$ 上是线性的。为 $i = 0, 1, \\dots, N-2$ 构建一个线性系统 $A_p \\mathbf{x}_p = \\mathbf{b}_p$：\n- 参数向量 $\\mathbf{x}_p = \\begin{bmatrix} k_{\\mathrm{tl}} \\\\ \\delta_p \\end{bmatrix}$。\n- 目标向量 $\\mathbf{b}_p$，一个 $(N-1) \\times 1$ 的列向量，其元素为 $(\\mathbf{b}_p)_i = \\frac{p_{i+1}-p_i}{t_{i+1}-t_i}$。\n- 回归矩阵 $A_p$，一个 $(N-1) \\times 2$ 的矩阵，其行为 $(A_p)_i = \\begin{bmatrix} m_i & -p_i \\end{bmatrix}$。\n\n参数向量 $\\mathbf{x}_m$ 和 $\\mathbf{x}_p$ 是通过以最小二乘法求解这些超定线性系统来独立估计的。最小二乘解 $\\hat{\\mathbf{x}}$ 可最小化残差平方和 $\\| A\\mathbf{x} - \\mathbf{b} \\|_2^2$，并由正规方程的解给出：\n$$\n\\hat{\\mathbf{x}} = (A^T A)^{-1} A^T \\mathbf{b}\n$$\n该解可使用标准数值线性代数程序高效计算。每个测试用例的最终估计参数集是有序集合 $[k_{\\mathrm{tx}}, \\delta_m, k_{\\mathrm{tl}}, \\delta_p]$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for genetic circuit parameters using linear regression on\n    discretized ODEs for multiple test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"times\": np.array([0, 2, 4, 6, 8, 10, 12], dtype=float),\n            \"y_m\": np.array([400, 1600, 2320, 2752, 3011.2, 3166.72, 3260.032], dtype=float),\n            \"y_p\": np.array([1000, 1000, 1450, 2125, 2894.5, 3684.25, 4453.345], dtype=float),\n            \"calib\": {\"s_m\": 120.0, \"b_m\": 400.0, \"s_p\": 15.0, \"b_p\": 1000.0}\n        },\n        {\n            \"times\": np.array([0, 2, 4, 6, 8, 10], dtype=float),\n            \"y_m\": np.array([100, 900, 1700, 2500, 3300, 4100], dtype=float),\n            \"y_p\": np.array([500, 500, 628, 858.4, 1170.72, 1548.576], dtype=float),\n            \"calib\": {\"s_m\": 200.0, \"b_m\": 100.0, \"s_p\": 20.0, \"b_p\": 500.0}\n        },\n        {\n            \"times\": np.array([0, 1, 2, 3, 4, 5, 6, 7], dtype=float),\n            \"y_m\": np.array([200, 2000, 2900, 3350, 3575, 3687.5, 3743.75, 3771.875], dtype=float),\n            \"y_p\": np.array([900, 900, 1188, 1533.6, 1847.52, 2103.264, 2300.2848, 2447.19936], dtype=float),\n            \"calib\": {\"s_m\": 150.0, \"b_m\": 200.0, \"s_p\": 12.0, \"b_p\": 900.0}\n        }\n    ]\n\n    all_results = []\n    for case in test_cases:\n        # Extract data for the current case\n        t = case[\"times\"]\n        y_m = case[\"y_m\"]\n        y_p = case[\"y_p\"]\n        s_m, b_m = case[\"calib\"][\"s_m\"], case[\"calib\"][\"b_m\"]\n        s_p, b_p = case[\"calib\"][\"s_p\"], case[\"calib\"][\"b_p\"]\n\n        # 1. Convert fluorescence to concentration\n        m = (y_m - b_m) / s_m\n        p = (y_p - b_p) / s_p\n        \n        # Number of data points\n        N = len(t)\n        if N  2:\n            continue\n\n        # 2. Calculate time differences for derivative approximation\n        dt = np.diff(t)\n        \n        # 3. Estimate mRNA parameters (k_tx, delta_m)\n        # Approximate dm/dt using forward difference\n        dm_dt_approx = np.diff(m) / dt\n        # Regressors are taken at time t_i\n        m_reg = m[:-1]\n        # Construct the regressor matrix A_m for mRNA\n        A_m = np.vstack([np.ones(N - 1), -m_reg]).T\n        # Solve the linear system A_m * [k_tx, delta_m]^T = dm_dt_approx\n        theta_m, _, _, _ = np.linalg.lstsq(A_m, dm_dt_approx, rcond=None)\n        k_tx, delta_m = theta_m[0], theta_m[1]\n\n        # 4. Estimate protein parameters (k_tl, delta_p)\n        # Approximate dp/dt using forward difference\n        dp_dt_approx = np.diff(p) / dt\n        # Regressors are m_i and p_i\n        p_reg = p[:-1]\n        # Construct the regressor matrix A_p for protein\n        A_p = np.vstack([m_reg, -p_reg]).T\n        # Solve the linear system A_p * [k_tl, delta_p]^T = dp_dt_approx\n        theta_p, _, _, _ = np.linalg.lstsq(A_p, dp_dt_approx, rcond=None)\n        k_tl, delta_p = theta_p[0], theta_p[1]\n\n        all_results.append([k_tx, delta_m, k_tl, delta_p])\n\n    # Final print statement in the exact required format.\n    formatted_results = []\n    for res in all_results:\n        # Format each inner list with 6 decimal places\n        inner_str = \",\".join([f\"{val:.6f}\" for val in res])\n        formatted_results.append(f\"[{inner_str}]\")\n    \n    # Combine all formatted inner lists into the final string\n    final_output = f\"[[{','.join(formatted_results)}]]\"\n    print(final_output)\n\nsolve()\n```", "id": "2723649"}]}