{"hands_on_practices": [{"introduction": "在分析复杂的代谢调控之前，掌握代谢衡算的基本原理至关重要。本练习着重于详细计算一个奇数链脂肪酸完全氧化所产生的 $ATP$ 的化学计量产额。通过追踪每一个碳原子和每一对电子的路径，您将巩固对能量如何通过 $\\beta$-氧化、TCA 循环和补给途径被提取的定量理解。[@problem_id:2584264]", "problem": "饱和奇数碳链脂肪酸在线粒体中通过重复的β-氧化循环进行氧化，直到剩余一个三碳片段。该三碳片段被转化为三羧酸（TCA）循环的一种中间产物，并被进一步氧化。考虑在哺乳动物线粒体的有氧条件下，十七烷酸（heptadecanoate）被活化为十七烷酰辅酶A（heptadecanoyl-coenzyme A, CoA）并完全氧化为 $\\mathrm{CO_{2}}$ 和 $\\mathrm{H_{2}O}$ 的过程。\n\n使用以下基本事实与假设：\n- 每个饱和脂酰辅酶A的β-氧化循环使脂酰链缩短 $2$ 个碳原子，并产生 $1$ 分子烟酰胺腺嘌呤二核苷酸（还原型）（$\\mathrm{NADH}$）、$1$ 分子黄素腺嘌呤二核苷酸（还原型）（$\\mathrm{FADH_{2}}$）和 $1$ 分子乙酰辅酶A。\n- $1$ 分子乙酰辅酶A经三羧酸（TCA）循环氧化，产生 $3$ 分子 $\\mathrm{NADH}$、$1$ 分子 $\\mathrm{FADH_{2}}$ 和 $1$ 分子鸟苷三磷酸（GTP）。\n- 对于奇数碳链脂肪酸，末端的三碳片段以丙酰辅酶A的形式释放，它经过羧化作用（消耗 $1$ 分子腺苷三磷酸，ATP）并重排成琥珀酰辅酶A。在TCA循环序列中，琥珀酰辅酶A氧化为草酰乙酸，产生 $1$ 分子GTP、$1$ 分子 $\\mathrm{FADH_{2}}$ 和 $1$ 分子 $\\mathrm{NADH}$。\n- 磷/氧比（每对电子转移到氧所生成的腺苷三磷酸）为 $P/O_{\\mathrm{NADH}}=2.5$ 和 $P/O_{\\mathrm{FADH_{2}}}=1.5$。每个GTP计为 $1$ 个ATP当量。\n- 游离脂肪酸活化为脂酰辅酶A消耗相当于 $2$ 个ATP。\n\n十七烷酸有 $17$ 个碳原子且完全饱和，表示为 $(17{:}0)$。请确定十七烷酸完全氧化为 $\\mathrm{CO_{2}}$ 和 $\\mathrm{H_{2}O}$ 的净腺苷三磷酸产率（ATP当量），计算过程需包括β-氧化、TCA循环、丙酰辅酶A到琥珀酰辅酶A的途径，并计入活化消耗以及使用给定 $P/O$ 值的全部电子传递产率。\n\n以ATP当量的单个整数形式表示您的最终答案。由于使用给定的 $P/O$ 值进行计算会得到一个整数，因此无需进行舍入说明。", "solution": "在尝试解答之前，需对问题陈述进行验证。\n\n**第1步：提取已知条件**\n- **脂肪酸：** 十七烷酸，一种含有 $17$ 个碳原子的饱和奇数碳链脂肪酸，表示为 $(17{:}0)$。\n- **过程：** 完全氧化为 $\\mathrm{CO_{2}}$ 和 $\\mathrm{H_{2}O}$。\n- **活化成本：** 游离脂肪酸活化为脂酰辅酶A消耗相当于 $2$ 个 $\\mathrm{ATP}$。\n- **β-氧化循环产物：** 每个循环产生 $1$ 分子 $\\mathrm{NADH}$、$1$ 分子 $\\mathrm{FADH_{2}}$ 和 $1$ 分子乙酰辅酶A。\n- **末端片段：** 末端的三碳片段是丙酰辅酶A。\n- **丙酰辅酶A途径：** 丙酰辅酶A的羧化作用消耗 $1$ 个 $\\mathrm{ATP}$。其产物琥珀酰辅酶A被氧化为草酰乙酸，产生 $1$ 个 GTP、$1$ 个 $\\mathrm{FADH_{2}}$ 和 $1$ 个 $\\mathrm{NADH}$。\n- **TCA循环产物：** $1$ 分子乙酰辅酶A的氧化产生 $3$ 个 $\\mathrm{NADH}$、$1$ 个 $\\mathrm{FADH_{2}}$ 和 $1$ 个 GTP。\n- **ATP当量：** $P/O_{\\mathrm{NADH}}=2.5$ $\\mathrm{ATP}$；$P/O_{\\mathrm{FADH_{2}}}=1.5$ $\\mathrm{ATP}$；$1$ GTP = $1$ $\\mathrm{ATP}$。\n\n**第2步：使用提取的已知条件进行验证**\n根据所需标准对问题进行评估。\n- **科学依据：** 该问题描述了哺乳动物线粒体中奇数碳链脂肪酸完全氧化的典型代谢途径。指定的β-氧化和三羧酸（$\\mathrm{TCA}$）循环的产率、丙酰辅酶A代谢的步骤，以及活化和羧化作用的能量成本，都是生物化学中的标准概念。所提供的磷/氧（$P/O$）比率，即 $\\mathrm{NADH}$ 为 $2.5$ 和 $\\mathrm{FADH_{2}}$ 为 $1.5$，是反映当前对氧化磷酸化理解的现代公认值。该问题不含科学错误或伪科学内容。\n- **问题明确：** 该问题提供了一套完整的数据和条件，足以计算出唯一、确定的数值答案。脂肪酸的碳原子数、所有相关分解代谢步骤的产率以及能量转换因子都已明确指定。\n- **客观性：** 问题以精确、定量和客观的生物化学术语陈述。没有含糊不清或主观的语言。\n\n**第3步：结论与行动**\n该问题被判定为有效。这是一个在代谢化学计量学中表述明确、科学合理的问题。将提供完整的解答。\n\n十七烷酸（$C_{17:0}$）完全氧化的腺苷三磷酸（$\\mathrm{ATP}$）净产率，是通过系统地核算代谢途径中每个阶段的ATP当量成本和收益来计算的。\n\n**1. 十七烷酸的活化**\n第一步是在细胞质中将游离脂肪酸活化为其辅酶A（$\\mathrm{CoA}$）衍生物，即十七烷酰辅酶A。该反应消耗两个高能磷酸键，其成本相当于 $2$ 个 $\\mathrm{ATP}$。\n$$\\text{Activation Cost} = 2 \\, \\mathrm{ATP}$$\n\n**2. β-氧化**\n十七烷酰辅酶A，一种 $C_{17}$ 脂酰辅酶A，被转运到线粒体基质中，并进行重复的β-氧化循环。对于一个含有 $n$ 个碳原子的饱和奇数碳链脂肪酸，其β-氧化循环的次数 $N_{cyc}$ 为：\n$$N_{cyc} = \\frac{n-3}{2}$$\n对于十七烷酸， $n=17$ ，所以循环次数为：\n$$N_{cyc} = \\frac{17-3}{2} = \\frac{14}{2} = 7 \\, \\text{cycles}$$\n这 $7$ 个循环中的每一个都产生 $1$ 分子乙酰辅酶A、$1$ 分子 $\\mathrm{NADH}$ 和 $1$ 分子 $\\mathrm{FADH_{2}}$。最终产物是一个 $3$-碳的丙酰辅酶A分子。\n从 $7$ 轮β-氧化得到的总产物是：\n- $7$ 分子乙酰辅酶A\n- $7$ 分子 $\\mathrm{NADH}$\n- $7$ 分子 $\\mathrm{FADH_{2}}$\n- $1$ 分子丙酰辅酶A\n\n**3. 乙酰辅酶A通过TCA循环的氧化**\n产生的 $7$ 分子乙酰辅酶A进入三羧酸（$\\mathrm{TCA}$）循环，完全氧化为 $\\mathrm{CO_{2}}$。根据已知条件，每个乙酰辅酶A分子产生 $3$ 分子 $\\mathrm{NADH}$、$1$ 分子 $\\mathrm{FADH_{2}}$ 和 $1$ 分子 GTP。\n从 $7$ 分子乙酰辅酶A得到的总产物是：\n- $\\mathrm{NADH}$ 产率：$7 \\, \\text{acetyl-CoA} \\times 3 \\, \\mathrm{NADH/acetyl-CoA} = 21 \\, \\mathrm{NADH}$\n- $\\mathrm{FADH_{2}}$ 产率：$7 \\, \\text{acetyl-CoA} \\times 1 \\, \\mathrm{FADH_{2}/acetyl-CoA} = 7 \\, \\mathrm{FADH_{2}}$\n- GTP 产率：$7 \\, \\text{acetyl-CoA} \\times 1 \\, \\mathrm{GTP/acetyl-CoA} = 7 \\, \\mathrm{GTP}$\n\n**4. 丙酰辅酶A的代谢**\n$3$-碳的丙酰辅酶A被转化为TCA循环的中间产物琥珀酰辅酶A。这个过程有一个能量成本和随后的产出。\n- **成本：** 丙酰辅酶A羧化为甲基丙二酰辅酶A需要将一个 $\\mathrm{ATP}$ 水解为 $\\mathrm{ADP}$ 和 $P_i$。\n$$\\text{Carboxylation Cost} = 1 \\, \\mathrm{ATP}$$\n- **产率：** 生成的琥珀酰辅酶A在TCA循环内进一步氧化为草酰乙酸。如前所述，这一系列的反应产生 $1$ 分子 $\\mathrm{NADH}$、$1$ 分子 $\\mathrm{FADH_{2}}$ 和 $1$ 分子 GTP。\n\n**5. 总产率计算**\n现在我们把所有的产物相加，并减去成本，来确定净 $\\mathrm{ATP}$ 产率。\n\n**A. 还原型辅酶和高能磷酸盐的统计：**\n- **$\\mathrm{NADH}$ 总量：**\n$$7 \\, (\\text{from } \\beta\\text{-oxidation}) + 21 \\, (\\text{from TCA}) + 1 \\, (\\text{from succinyl-CoA}) = 29 \\, \\mathrm{NADH}$$\n- **$\\mathrm{FADH_{2}}$ 总量：**\n$$7 \\, (\\text{from } \\beta\\text{-oxidation}) + 7 \\, (\\text{from TCA}) + 1 \\, (\\text{from succinyl-CoA}) = 15 \\, \\mathrm{FADH_{2}}$$\n- **GTP 总量：**\n$$7 \\, (\\text{from TCA}) + 1 \\, (\\text{from succinyl-CoA}) = 8 \\, \\mathrm{GTP}$$\n- **ATP 总成本：**\n$$2 \\, (\\text{for activation}) + 1 \\, (\\text{for carboxylation}) = 3 \\, \\mathrm{ATP}$$\n\n**B. 转换为ATP当量和净产率计算：**\n使用所提供的 $P/O$ 比率和当量关系：\n- 来自 $\\mathrm{NADH}$ 的 $\\mathrm{ATP}$：$29 \\, \\mathrm{NADH} \\times 2.5 \\, \\mathrm{ATP/NADH} = 72.5 \\, \\mathrm{ATP}$\n- 来自 $\\mathrm{FADH_{2}}$ 的 $\\mathrm{ATP}$：$15 \\, \\mathrm{FADH_{2}} \\times 1.5 \\, \\mathrm{ATP/FADH_{2}} = 22.5 \\, \\mathrm{ATP}$\n- 来自 GTP 的 $\\mathrm{ATP}$：$8 \\, \\mathrm{GTP} \\times 1 \\, \\mathrm{ATP/GTP} = 8 \\, \\mathrm{ATP}$\n\n产生的ATP总额是这些贡献的总和：\n$$\\text{Gross ATP} = 72.5 + 22.5 + 8 = 103 \\, \\mathrm{ATP}$$\n净 ATP 产率是总产额减去总能量成本：\n$$\\text{Net ATP Yield} = \\text{Gross ATP} - \\text{Total ATP Cost}$$\n$$\\text{Net ATP Yield} = 103 \\, \\mathrm{ATP} - 3 \\, \\mathrm{ATP} = 100 \\, \\mathrm{ATP}$$\n\n一分子十七烷酸的完全氧化，其净产率为 $100$个ATP当量。", "answer": "$$\\boxed{100}$$", "id": "2584264"}, {"introduction": "除了计算能量产额外，对代谢途径的深入理解还需要能够想象单个原子在被酶处理过程中的命运。这个思想实验采用了经典的同位素标记技术，来追踪一个特定的碳原子在奇数链脂肪酸氧化过程中的路径。解决这个问题将考验您对丙酰辅酶A羧化酶和甲基丙二酰辅酶A变位酶反应的详细机理知识，揭示酶催化的立体特异性和复杂性。[@problem_id:2088360]", "problem": "在代谢研究中，同位素标记是一种强大的技术，用于追踪原子在复杂生化途径中的去向。考虑一种特定的奇数链饱和脂肪酸——十七酸（17:0）的完全分解代谢。对于这种脂肪酸，标准的编号规则将羧基碳定为 C-1，末端甲基碳定为 C-17。\n\n假设合成了一份十七酸样品，其碳-15（C-15）被碳-14（${}^{14}C$）放射性标记。然后，在线粒体制剂中，这种被标记的脂肪酸被完全氧化。该过程涉及多轮β-氧化，产生乙酰辅酶A（acetyl-CoA）和一个最终的三碳单位——丙酰辅酶A。随后，丙酰辅酶A被转化为琥珀酰辅酶A，后者是柠檬酸循环的一个中间产物。\n\n在本题中，琥珀酰辅酶A（HOOC-CH₂-CH₂-CO-SCoA）的碳原子编号如下：C-1是硫酯基的碳原子，C-2和C-3是亚甲基碳，C-4是游离羧基的碳原子。\n\n最终生成的琥珀酰辅酶A中，哪个碳原子会携带${}^{14}C$标记？\n\nA. 硫酯基的碳原子（C-1）\n\nB. 与硫酯基相邻的亚甲基碳（C-2）\n\nC. 与游离羧基相邻的亚甲基碳（C-3）\n\nD. 游离羧基的碳原子（C-4）\n\nE. 在丙酰辅酶A转化为琥珀酰辅酶A的过程中，标记以${}^{14}CO_2$的形式丢失。", "solution": "十七酸（17:0）的编号规则是：羧基碳为$C_{1}$，末端甲基碳为$C_{17}$。在线粒体的β-氧化过程中，每一轮循环都从羧基端移去一个乙酰辅酶A（两个碳），并保留剩余碳链朝向甲基端的顺序。在移去7个乙酰辅酶A单位（共14个碳）后，剩余的三碳酰基辅酶A对应于原始的$C_{15}$–$C_{17}$片段，即丙酰辅酶A。\n\n因此，在丙酰辅酶A（$\\text{CoA-S-CO-CH}_{2}\\text{-CH}_{3}$）中，来自原始脂肪酸的碳原子对应关系如下：\n$$\n\\text{丙酰辅酶A的碳原子 }(P_{1},P_{2},P_{3})=(C_{15},C_{16},C_{17}),\n$$\n其中，$P_{1}$是硫酯羰基碳，$P_{2}$是亚甲基碳，$P_{3}$是甲基碳。\n\n丙酰辅酶A在丙酰辅酶A羧化酶的作用下，于$P_{2}$位发生羧化反应，生成甲基丙二酰辅酶A，其中新的羧酸碳来自于$\\text{CO}_{2}$（或$\\text{HCO}_{3}^{-}$）。将甲基丙二酰辅酶A的碳原子表示为$M_{1}$（硫酯羰基）、$M_{2}$（手性中心）、$M_{b}$（甲基支链）和$M_{3}$（游离羧酸碳），则对应关系为：\n$$\nM_{1}=P_{1}=C_{15},\\quad M_{2}=P_{2}=C_{16},\\quad M_{b}=P_{3}=C_{17},\\quad M_{3}=\\text{源于}\\text{CO}_{2}.\n$$\n\n甲基丙二酰辅酶A变位酶催化一个1,2-重排反应，将甲基丙二酰辅酶A转化为琥珀酰辅酶A（HOOC-CH$_{2}$-CH$_{2}$-CO-SCoA）。在此重排反应中，两端官能团的类型保持不变（游离羧酸基仍然是游离羧酸端；硫酯羰基仍然是辅酶A硫酯端），而甲基支链则成为直链的一部分。将琥珀酰辅酶A的碳原子标记为$S_{1}$（硫酯羰基）、$S_{2}$和$S_{3}$（亚甲基碳）以及$S_{4}$（游离羧酸基），则碳原子对应关系为：\n$$\nS_{1}=M_{1},\\quad S_{2}=M_{b},\\quad S_{3}=M_{2},\\quad S_{4}=M_{3}.\n$$\n\n结合以上对应关系，原始脂肪酸$C_{15}$上的标记，在丙酰辅酶A中是$P_{1}$，在甲基丙二酰辅酶A中是$M_{1}$，因此在琥珀酰辅酶A中是$S_{1}$。根据题目的编号规则，$S_{1}$是硫酯基的碳原子（C-1）。在丙酰辅酶A转化为琥珀酰辅酶A的过程中没有发生脱羧反应，因此标记被保留。\n\n因此，$^{14}$C出现在琥珀酰辅酶A的C-1位（硫酯羰基碳）。", "answer": "$$\\boxed{A}$$", "id": "2088360"}, {"introduction": "在活细胞中，多种底物同时被氧化，它们的代谢通量受到共享的酶容量和动力学约束的制约。这项高级实践挑战您构建一个计算模型，该模型将化学计量原理与动力学限制（例如由电子传递黄素蛋白 ($ETF$) 和 $NADH$ 氧化途径施加的限制）相结合。通过实施这个模型，您将从简单的化学计量计算过渡到系统层面的视角，学习如何在一个更真实、动态的细胞环境中预测代谢结果。[@problem_id:2584299]", "problem": "要求您实现一个计算模型，该模型通过整合以下要素来预测饱和、不饱和及奇数链脂肪酸混合线粒体氧化过程中的稳态三磷酸腺苷（ATP）生成速率：烟酰胺腺嘌呤二核苷酸（NADH）/烟酰胺腺嘌呤二核苷酸磷酸（NADPH）池的利用、电子传递黄素蛋白（ETF）通量能力以及辅助酶动力学。您的程序必须计算受共享瓶颈限制的总ATP生成速率，并以 mol/s 为单位报告最终答案。\n\n建模基础与核心假设：\n- 线粒体脂肪酸氧化的化学计量：\n  -对于一个碳原子数为 $n$、双键数为 $d$ 的脂肪酸，如果 $n$ 是偶数，$\\beta$-氧化循环次数为 $c = \\frac{n}{2} - 1$；如果 $n$ 是奇数，则为 $c = \\frac{n - 3}{2}$。如果 $n$ 是偶数，乙酰辅酶A（acetyl-CoA）单元数为 $a = \\frac{n}{2}$；如果 $n$ 是奇数，则为 $a = \\frac{n - 3}{2}$。定义 $o = 1$（若 $n$ 为奇数），否则 $o = 0$。\n  - 每个 $\\beta$-氧化循环产生 $1$ 摩尔还原型烟酰胺腺嘌呤二核苷酸（NADH）和 $1$ 摩尔还原型黄素腺嘌呤二核苷酸（FADH$_2$）。对于不饱和脂肪酸，每个顺式双键会减少一次 FADH$_2$ 的生成：每分子净产生的 $\\beta$-氧化 FADH$_2$ 产量为 $f = \\max(c - d, 0)$，净产生的 $\\beta$-氧化 NADH 产量为 $h = c$。\n  - 通过 $2,4$-二烯酰辅酶A还原酶进行的多不饱和脂肪酸氧化会消耗 NADPH：每分子的 NADPH 需求量为 $r = \\max(d - 1, 0)$。\n  - 对于奇数链脂肪酸，末端丙酰辅酶A经补路反应生成琥珀酰辅酶A的过程消耗 $1$ 个 ATP，并在三羧酸（TCA）循环部分产生一个鸟苷三磷酸（GTP）、一个 FADH$_2$ 和一个 NADH，净产生 $4$ 个 ATP 当量。TCA 循环中，每个乙酰辅酶A氧化产生 $3$ 个 NADH、 $1$ 个 FADH$_2$ 和 $1$ 个 GTP。\n  - 每个脂肪酸活化为脂酰辅酶A（acyl-CoA）消耗 $2$ 个 ATP 当量。\n- 氧化磷酸化的 P/O 比：\n  - 在指定的分辨率下，氧化磷酸化过程中每个 NADH 产生 $2.5$ 个 ATP 当量，每个 FADH$_2$ 产生 $1.5$ 个 ATP 当量。\n- ETF 限制：\n  - ETF 通路的能力限制了由脂酰辅酶A脱氢酶产生的 FADH$_2$ 的再氧化。设 $C_{\\mathrm{ETF}}$ 为最大 ETF 通量（单位 mol/s）。所需的总 ETF 负载是所有底物 $\\beta$-氧化 FADH$_2$ 生成速率之和。\n- 辅助还原酶动力学：\n  - $2,4$-二烯酰辅酶A还原酶的通量受限于相对于 $[\\mathrm{NADPH}]$ 的伪 Michaelis-Menten 动力学：$C_{\\mathrm{red}} = V_{\\max}^{\\mathrm{red}} \\cdot \\frac{[\\mathrm{NADPH}]}{K_m^{\\mathrm{red}} + [\\mathrm{NADPH}]}$（单位 mol/s）。\n- NADH 氧化能力：\n  - 线粒体净 NADH 氧化受限于相对于 $[\\mathrm{NADH}]$ 的伪 Michaelis-Menten 动力学：$C_{\\mathrm{NADH}} = V_{\\max}^{\\mathrm{NADH}} \\cdot \\frac{[\\mathrm{NADH}]}{K_m^{\\mathrm{NADH}} + [\\mathrm{NADH}]}$（单位 mol/s）。\n- 混合供给稳态：\n  - 给定每个底物 $j$ 的摄取速率 $u_j$（mol/s），定义比例因子 $\\alpha = 1$ 时的无约束秒需求量：\n    - ETF 需求：$D_{\\mathrm{ETF}} = \\sum_j u_j f_j$。\n    - 还原酶周转需求（即 NADPH 消耗）：$D_{\\mathrm{red}} = \\sum_j u_j r_j$。\n    - NADH 生成：$D_{\\mathrm{NADH}} = \\sum_j u_j H_j$，其中 $H_j = h_j + 3 a_j + o_j$。\n  - 定义每分子 ATP 产量 $Y_j$ 为：\n    $$Y_j = (-2) + 2.5\\,h_j + 1.5\\,f_j + 10\\,a_j + 4\\,o_j.$$\n    该模型假设 ETF 仅限制源自 $\\beta$-氧化的 FADH$_2$ 的再氧化，而不限制源自 TCA 循环的 FADH$_2$。\n  - 设 $\\alpha \\in [0,1]$ 为应用于所有 $u_j$ 的统一比例因子，以满足共享能力限制。可行的 $\\alpha$ 为\n    $$\\alpha = \\min\\left( \\{1.0\\} \\cup \\left\\{ \\frac{C_{p}}{D_{p}} \\mid p \\in \\{\\text{ETF, red, NADH}\\} \\text{ and } D_p > 0 \\right\\} \\right)$$\n  - 稳态 ATP 生成速率为\n    $$R_{\\mathrm{ATP}} = \\alpha \\sum_j u_j Y_j,$$\n    必须以 mol/s 为单位报告。\n\n需要实现的内容：\n- 硬编码以下四个测试用例。对每个用例，提供一个底物列表 $(n, d, u)$（奇数链状态由 $n$ 隐含），并给出动力学参数。所有 $u$ 和 $V_{\\max}$ 的单位是 mol/s，所有浓度的单位是毫摩尔（mM）。您的代码必须计算每个用例的 $R_{\\mathrm{ATP}}$，并输出一行包含四个浮点数结果的类似Python列表的字符串。\n\n测试用例1 (NADH限制的混合底物供给)：\n- 底物：\n  - $(n, d, u) = (16, 0, 1.0 \\times 10^{-9})$，\n  - $(18, 1, 0.8 \\times 10^{-9})$，\n  - $(17, 0, 0.5 \\times 10^{-9})$。\n- ETF 能力：$C_{\\mathrm{ETF}} = 2.0 \\times 10^{-8}$。\n- 还原酶：$V_{\\max}^{\\mathrm{red}} = 8.0 \\times 10^{-9}$， $K_m^{\\mathrm{red}} = 0.05$， $[\\mathrm{NADPH}] = 0.05$。\n- NADH 氧化：$V_{\\max}^{\\mathrm{NADH}} = 6.0 \\times 10^{-8}$， $K_m^{\\mathrm{NADH}} = 0.05$， $[\\mathrm{NADH}] = 0.20$。\n\n测试用例2 (ETF限制的饱和底物供给)：\n- 底物：\n  - $(18, 0, 1.5 \\times 10^{-9})$，\n  - $(16, 0, 1.0 \\times 10^{-9})$。\n- ETF 能力：$C_{\\mathrm{ETF}} = 1.0 \\times 10^{-8}$。\n- 还原酶：$V_{\\max}^{\\mathrm{red}} = 1.0 \\times 10^{-8}$， $K_m^{\\mathrm{red}} = 0.05$， $[\\mathrm{NADPH}] = 0.10$。\n- NADH 氧化：$V_{\\max}^{\\mathrm{NADH}} = 1.0 \\times 10^{-7}$， $K_m^{\\mathrm{NADH}} = 0.10$， $[\\mathrm{NADH}] = 0.30$。\n\n测试用例3 (NADPH/还原酶限制的多不饱和底物供给)：\n- 底物：\n  - $(18, 3, 1.0 \\times 10^{-9})$，\n  - $(20, 4, 0.5 \\times 10^{-9})$。\n- ETF 能力：$C_{\\mathrm{ETF}} = 2.0 \\times 10^{-8}$。\n- 还原酶：$V_{\\max}^{\\mathrm{red}} = 3.0 \\times 10^{-9}$， $K_m^{\\mathrm{red}} = 0.02$， $[\\mathrm{NADPH}] = 0.01$。\n- NADH 氧化：$V_{\\max}^{\\mathrm{NADH}} = 8.0 \\times 10^{-8}$， $K_m^{\\mathrm{NADH}} = 0.05$， $[\\mathrm{NADH}] = 0.20$。\n\n测试用例4 (ETF边界与零不饱和度)：\n- 底物：\n  - $(12, 0, 1.0 \\times 10^{-9})$，\n  - $(15, 0, 0.5 \\times 10^{-9})$。\n- ETF 能力：$C_{\\mathrm{ETF}} = 1.0 \\times 10^{-10}$。\n- 还原酶：$V_{\\max}^{\\mathrm{red}} = 5.0 \\times 10^{-9}$， $K_m^{\\mathrm{red}} = 0.05$， $[\\mathrm{NADPH}] = 0.10$。\n- NADH 氧化：$V_{\\max}^{\\mathrm{NADH}} = 1.0 \\times 10^{-7}$， $K_m^{\\mathrm{NADH}} = 0.05$， $[\\mathrm{NADH}] = 0.20$。\n\n输出规范：\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表，例如，“[result1,result2,result3,result4]”。\n- 按照上述用例的顺序，以浮点数形式报告每个测试用例的 ATP 生成速率 $R_{\\mathrm{ATP}}$（单位 mol/s）。", "solution": "已对问题陈述进行严格评估，并认定其有效。该问题具有科学依据、提法明确、客观，并为构建一个预测脂肪酸氧化ATP合成速率的计算模型提供了一套完整且一致的定义和数据。该模型虽然是对复杂生物学现实的简化，但其内部逻辑一致，规则明确无歧义。此问题是一个应用给定生化和动力学方程组的程式化练习。\n\n该任务是计算四种不同混合底物氧化情况下的稳态ATP生成速率 $R_{\\mathrm{ATP}}$。求解方法首先计算无约束的代谢通量和ATP产量，然后应用一个统一比例因子 $\\alpha$ 来考虑共享酶促途径中的限制。$\\alpha$ 的值由电子传递黄素蛋白（ETF）途径、$2,4$-二烯酰辅酶A还原酶以及呼吸链的NADH氧化能力中最严格的瓶颈决定。\n\n每个测试用例的计算通过以下步骤序列执行。\n\n首先，对于每个以碳链长度 $n_j$ 和双键数量 $d_j$ 为特征的脂肪酸底物 $j$，我们确定关键的化学计量参数。\n奇数链指示因子 $o_j$ 定义为：\n$$ o_j = \\begin{cases} 1 & \\text{若 } n_j \\text{ 为奇数} \\\\ 0 & \\text{若 } n_j \\text{ 为偶数} \\end{cases} $$\n$\\beta$-氧化循环次数 $c_j$ 和产生的乙酰辅酶A分子数 $a_j$ 由下式给出：\n$$ c_j = a_j = \\frac{n_j - 3}{2} \\quad (\\text{对于奇数 } n_j) $$\n$$ c_j = \\frac{n_j}{2} - 1, \\quad a_j = \\frac{n_j}{2} \\quad (\\text{对于偶数 } n_j) $$\n\n其次，我们计算关键还原当量的单分子产量和NADPH消耗量。\n- 来自$\\beta$-氧化的NADH产量：$h_j = c_j$。\n- 来自$\\beta$-氧化的FADH$_2$产量：$f_j = \\max(c_j - d_j, 0)$。这考虑了每个双键绕过脂酰辅酶A脱氢酶的步骤。\n- 多不饱和脂肪酸氧化过程中的NADPH消耗量：$r_j = \\max(d_j - 1, 0)$。\n\n第三，我们根据给定的底物摄取速率 $u_j$ 确定总的无约束生产和消耗速率。\n每个底物分子 $j$ 产生的总NADH量 $H_j$ 包括来自$\\beta$-氧化、TCA循环（来自乙酰辅酶A）和丙酰辅酶A代谢（对于奇数链脂肪酸）的贡献：\n$$ H_j = h_j + 3 a_j + o_j $$\n每个共享途径上的总无约束需求是所有底物之和：\n- ETF 需求：$D_{\\mathrm{ETF}} = \\sum_j u_j f_j$。\n- 还原酶需求（NADPH消耗）：$D_{\\mathrm{red}} = \\sum_j u_j r_j$。\n- 总NADH生成量：$D_{\\mathrm{NADH}} = \\sum_j u_j H_j$。\n\n第四，我们计算每个底物分子 $j$ 的ATP产量 $Y_j$，它汇总了所有步骤的能量贡献，使用给定的P/O比（$2.5$ ATP/NADH，$1.5$ ATP/FADH$_2$）并计入了活化成本和补路反应。来自 $a_j$ 个乙酰辅酶A的产量是 $10 a_j$，来自 $o_j$ 个丙酰辅酶A的产量是 $4 o_j$。\n$$ Y_j = -2 + 2.5 h_j + 1.5 f_j + 10 a_j + 4 o_j $$\n总的无约束ATP生成速率为 $\\sum_j u_j Y_j$。\n\n第五，我们使用提供的动力学参数计算受限途径的最大能力。\n- ETF 能力：$C_{\\mathrm{ETF}}$，每个案例中作为常数给出。\n- 还原酶能力：$C_{\\mathrm{red}} = V_{\\max}^{\\mathrm{red}} \\cdot \\frac{[\\mathrm{NADPH}]}{K_m^{\\mathrm{red}} + [\\mathrm{NADPH}]}$。\n- NADH 氧化能力：$C_{\\mathrm{NADH}} = V_{\\max}^{\\mathrm{NADH}} \\cdot \\frac{[\\mathrm{NADH}]}{K_m^{\\mathrm{NADH}} + [\\mathrm{NADH}]}$。\n\n第六，我们通过识别最限制性的约束来确定统一比例因子 $\\alpha \\in [0, 1]$。$\\alpha$ 是 $1.0$ 和所有活跃途径（需求大于零）的能力-需求比中的最小值。\n$$ \\alpha = \\min\\left( \\left\\{1.0\\right\\} \\cup \\left\\{ \\frac{C_{\\mathrm{path}}}{D_{\\mathrm{path}}} \\mid D_{\\mathrm{path}} > 0 \\right\\} \\right) $$\n其中 `path` 遍历ETF、还原酶和NADH氧化途径。\n\n最后，稳态ATP生成速率 $R_{\\mathrm{ATP}}$ 通过将总无约束速率乘以 $\\alpha$ 来计算：\n$$ R_{\\mathrm{ATP}} = \\alpha \\sum_j u_j Y_j $$\n提供的Python代码精确地实现了此算法，遍历四个测试用例中的每一个，以计算各自的 $R_{\\mathrm{ATP}}$ 值。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy import ...\n\ndef solve():\n    \"\"\"\n    Computes the steady-state ATP production rate for mixed fatty acid oxidation\n    based on a provided computational model and test cases.\n    \"\"\"\n    # Hard-coded test suite as per problem description.\n    test_cases = [\n        {\n            \"name\": \"Test Case 1 (NADH-limited mixed feed)\",\n            \"substrates\": [\n                (16, 0, 1.0e-9),  # (n, d, u)\n                (18, 1, 0.8e-9),\n                (17, 0, 0.5e-9),\n            ],\n            \"C_ETF\": 2.0e-8,\n            \"reductase\": {\"vmax\": 8.0e-9, \"km\": 0.05, \"c\": 0.05},  # vmax, km, [NADPH]\n            \"nadh_ox\": {\"vmax\": 6.0e-8, \"km\": 0.05, \"c\": 0.20},  # vmax, km, [NADH]\n        },\n        {\n            \"name\": \"Test Case 2 (ETF-limited saturated feed)\",\n            \"substrates\": [\n                (18, 0, 1.5e-9),\n                (16, 0, 1.0e-9),\n            ],\n            \"C_ETF\": 1.0e-8,\n            \"reductase\": {\"vmax\": 1.0e-8, \"km\": 0.05, \"c\": 0.10},\n            \"nadh_ox\": {\"vmax\": 1.0e-7, \"km\": 0.10, \"c\": 0.30},\n        },\n        {\n            \"name\": \"Test Case 3 (NADPH/reductase-limited polyunsaturated feed)\",\n            \"substrates\": [\n                (18, 3, 1.0e-9),\n                (20, 4, 0.5e-9),\n            ],\n            \"C_ETF\": 2.0e-8,\n            \"reductase\": {\"vmax\": 3.0e-9, \"km\": 0.02, \"c\": 0.01},\n            \"nadh_ox\": {\"vmax\": 8.0e-8, \"km\": 0.05, \"c\": 0.20},\n        },\n        {\n            \"name\": \"Test Case 4 (ETF-boundary with zero unsaturation)\",\n            \"substrates\": [\n                (12, 0, 1.0e-9),\n                (15, 0, 0.5e-9),\n            ],\n            \"C_ETF\": 1.0e-10,\n            \"reductase\": {\"vmax\": 5.0e-9, \"km\": 0.05, \"c\": 0.10},\n            \"nadh_ox\": {\"vmax\": 1.0e-7, \"km\": 0.05, \"c\": 0.20},\n        }\n    ]\n\n    results = []\n\n    for case in test_cases:\n        D_ETF = 0.0\n        D_red = 0.0\n        D_NADH = 0.0\n        unconstrained_atp_rate = 0.0\n\n        for n, d, u in case[\"substrates\"]:\n            # Step 1: Calculate stoichiometric parameters c, a, o\n            if n % 2 == 0:  # Even-chain\n                o = 0\n                c = (n // 2) - 1\n                a = n // 2\n            else:  # Odd-chain\n                o = 1\n                c = (n - 3) // 2\n                a = (n - 3) // 2\n            \n            # Step 2: Calculate per-molecule yields/costs h, f, r\n            h = c\n            f = max(c - d, 0)\n            r = max(d - 1, 0)\n\n            # Step 3: Calculate total NADH yield H and aggregate demands\n            H = h + 3 * a + o\n            \n            D_ETF += u * f\n            D_red += u * r\n            D_NADH += u * H\n            \n            # Step 4: Calculate ATP yield per molecule Y and aggregate unconstrained rate\n            Y = -2.0 + 2.5 * h + 1.5 * f + 10.0 * a + 4.0 * o\n            unconstrained_atp_rate += u * Y\n\n        # Step 5: Calculate pathway capacities\n        C_ETF = case[\"C_ETF\"]\n        \n        red_params = case[\"reductase\"]\n        C_red = red_params[\"vmax\"] * red_params[\"c\"] / (red_params[\"km\"] + red_params[\"c\"])\n        \n        nadh_params = case[\"nadh_ox\"]\n        C_NADH = nadh_params[\"vmax\"] * nadh_params[\"c\"] / (nadh_params[\"km\"] + nadh_params[\"c\"])\n\n        # Step 6: Determine the scaling factor alpha\n        alpha = 1.0\n        \n        if D_ETF > 0:\n            alpha = min(alpha, C_ETF / D_ETF)\n        \n        if D_red > 0:\n            alpha = min(alpha, C_red / D_red)\n        \n        if D_NADH > 0:\n            alpha = min(alpha, C_NADH / D_NADH)\n\n        # Step 7: Calculate the final ATP production rate\n        R_ATP = alpha * unconstrained_atp_rate\n        results.append(R_ATP)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2584299"}]}