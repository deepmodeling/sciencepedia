{"hands_on_practices": [{"introduction": "在原肠胚形成过程中，细胞片的内聚性运动依赖于细胞间的粘附，这主要由钙粘蛋白介导。本练习旨在探索 E-钙粘蛋白 (E-cadherin) 分子密度与组织表面张力这一宏观属性之间的定量关系，后者是差异粘附假说 (Differential Adhesion Hypothesis) 的核心概念。通过应用一个简单的比例关系，您将练习如何将微观参数与宏观力学特性联系起来，这是生物物理学中的一项基本技能。[@problem_id:2640043]", "problem": "在原肠胚形成过程中经历外包的脊椎动物胚胎中，胚盘作为一个粘着的上皮层在卵黄细胞上扩散。粘着由上皮钙粘蛋白（E-cadherin）介导，而产生的有效组织表面张力（用 $\\Gamma$ 表示）是一种抵抗组织边界面积扩张和曲率变化的聚合属性。考虑一个基于差异性粘附假说（DAH）的最小化、力学上一致的描述，其中单位面积上功能性E-钙粘蛋白键的密度 $\\rho_{\\text{cad}}$ 被视作控制粘着的主要微观变量。已知，对于小的扰动以及固定的细胞骨架收缩性和几何形状，组织层面的表面张力与钙粘蛋白键的密度呈线性关系，即 $\\Gamma$ 与 $\\rho_{\\text{cad}}$ 成正比。胚盘被近似为一个曲率恒定的薄层，因此对扩散的毛细阻力由杨-拉普拉斯关系描述，压差为 $\\Delta P = \\Gamma \\kappa$，其中 $\\kappa$ 是平均曲率。\n\n一项实验操作将功能性E-钙粘蛋白键的密度降低到其基线值的一半，而不改变几何形状或主动的前突牵引力。设 $\\rho_{\\text{cad},0}$ 和 $\\Gamma_{0}$ 分别表示钙粘蛋白键密度和表面张力的基线值，$\\rho_{\\text{cad},1}$ 和 $\\Gamma_{1}$ 表示操作后的值。仅使用上述基本假设和关系，计算新的表面张力 $\\Gamma_{1}$（以 $\\Gamma_{0}$ 表示）。然后，基于在 $\\kappa$ 固定的情况下 $\\Delta P$ 变化的符号，定性预测对扩散的净阻力是增加还是减少。最终答案只报告 $\\Gamma_{1}$ 以 $\\Gamma_{0}$ 表示的符号表达式。无需四舍五入。最终答案中不应包含单位。", "solution": "首先将验证问题陈述的正确性和可解性。\n\n从问题陈述中提取的已知条件如下：\n1.  组织表面张力 $\\Gamma$ 与E-钙粘蛋白键的密度 $\\rho_{\\text{cad}}$ 呈线性关系。这被表述为 $\\Gamma$ 与 $\\rho_{\\text{cad}}$ 成正比，可写作 $\\Gamma \\propto \\rho_{\\text{cad}}$。\n2.  对扩散的毛细阻力由杨-拉普拉斯关系 $\\Delta P = \\Gamma \\kappa$ 描述，其中 $\\Delta P$ 是压差，$\\kappa$ 是平均曲率。\n3.  一项实验操作将功能性E-钙粘蛋白键的密度降低到其基线值的一半。\n4.  基线值用 $\\rho_{\\text{cad},0}$ 和 $\\Gamma_{0}$ 表示。\n5.  操作后的值用 $\\rho_{\\text{cad},1}$ 和 $\\Gamma_{1}$ 表示。\n6.  该操作意味着关系式 $\\rho_{\\text{cad},1} = \\frac{1}{2} \\rho_{\\text{cad},0}$。\n7.  在比较过程中，假设几何形状（因此平均曲率 $\\kappa$）和主动的前突牵引力是固定的。\n\n该问题具有科学依据，借鉴了差异性粘附假说和诸如杨-拉普拉斯方程等标准生物物理组织力学模型。E-钙粘蛋白介导的粘着和组织表面张力的概念是发育生物学的核心。该问题提法严谨，提供了一个清晰的数学关系和一个特定的扰动，可以从中推导出唯一的答案。语言客观，设置内部一致。计算所需的所有信息均已提供。因此，该问题是有效的，可以构建解答。\n\n问题的核心在于所述的组织表面张力 $\\Gamma$ 和功能性E-钙粘蛋白键密度 $\\rho_{\\text{cad}}$ 之间的线性正比关系。这种关系可以用数学方式表示为：\n$$\n\\Gamma = k \\cdot \\rho_{\\text{cad}}\n$$\n其中 $k$ 是一个比例常数。根据问题陈述，这个常数 $k$ 包含了诸如细胞骨架收缩性和化学键性质等其他生物力学参数，这些参数被假定为固定的。\n\n我们可以为基线（初始）状态和操作后（最终）状态分别写出这个关系式。\n对于基线状态，用下标 $0$ 表示：\n$$\n\\Gamma_{0} = k \\cdot \\rho_{\\text{cad},0}\n$$\n对于操作后状态，用下标 $1$ 表示：\n$$\n\\Gamma_{1} = k \\cdot \\rho_{\\text{cad},1}\n$$\n问题陈述指出，实验操作将E-钙粘蛋白键的密度降低到其基线值的一半。这提供了以下关系：\n$$\n\\rho_{\\text{cad},1} = \\frac{1}{2} \\rho_{\\text{cad},0}\n$$\n我们现在可以将 $\\rho_{\\text{cad},1}$ 的这个表达式代入 $\\Gamma_{1}$ 的方程中：\n$$\n\\Gamma_{1} = k \\cdot \\left(\\frac{1}{2} \\rho_{\\text{cad},0}\\right)\n$$\n通过重新整理各项，我们得到：\n$$\n\\Gamma_{1} = \\frac{1}{2} \\left(k \\cdot \\rho_{\\text{cad},0}\\right)\n$$\n我们认出括号中的项 $k \\cdot \\rho_{\\text{cad},0}$ 是基线表面张力 $\\Gamma_{0}$ 的表达式。因此，我们可以将 $\\Gamma_{0}$ 代入方程中：\n$$\n\\Gamma_{1} = \\frac{1}{2} \\Gamma_{0}\n$$\n这个结果表明，新的表面张力 $\\Gamma_{1}$ 是原始表面张力 $\\Gamma_{0}$ 的一半。\n\n问题的第二部分要求预测对扩散的净阻力的变化。阻力与来自杨-拉普拉斯关系 $\\Delta P = \\Gamma \\kappa$ 的压差 $\\Delta P$ 相关。由于曲率 $\\kappa$ 被认为是固定的，$\\Delta P$ 的变化完全由 $\\Gamma$ 的变化决定。\n新的压差是 $\\Delta P_{1} = \\Gamma_{1} \\kappa$。代入我们关于 $\\Gamma_{1}$ 的结果：\n$$\n\\Delta P_{1} = \\left(\\frac{1}{2} \\Gamma_{0}\\right) \\kappa = \\frac{1}{2} (\\Gamma_{0} \\kappa)\n$$\n由于原始压差为 $\\Delta P_{0} = \\Gamma_{0} \\kappa$，我们发现 $\\Delta P_{1} = \\frac{1}{2} \\Delta P_{0}$。压差的变化是负的（$\\Delta P_1  \\Delta P_0$）。由于 $\\Delta P$ 代表对扩散的毛细阻力，$\\Delta P$ 的减少意味着净阻力的减少。因此，在E-钙粘蛋白减少后，组织扩散受到的阻力变小了。\n\n按照要求，最终答案仅为 $\\Gamma_{1}$ 以 $\\Gamma_{0}$ 表示的符号表达式。", "answer": "$$\n\\boxed{\\frac{1}{2} \\Gamma_{0}}\n$$", "id": "2640043"}, {"introduction": "原肠胚形成的特点是大尺度的、协调的组织流动，这些流动可以通过粒子图像测速技术 (Particle Image Velocimetry, PIV) 等实验方法来测量。在本练习中，您将把组织视为一个连续介质，并分析给定的速度场以理解其局部变形特性。通过计算关键的运动学不变量，您将学习区分纯剪切和压缩区域，从而为细胞嵌入等驱动会聚延伸的细胞过程提供力学背景。[@problem_id:2640076]", "problem": "给定在原肠形成过程中的会聚延伸期间，通过粒子图像测速法 (PIV) 测得的二维欧拉组织速度场。将组织建模为具有速度场 $\\mathbf{v}(x,y) = (u(x,y), v(x,y))$ 的平面连续介质。运动学形变率张量（对称应变率张量）定义为\n$$\n\\mathbf{D} = \\frac{1}{2}\\left(\\nabla \\mathbf{v} + \\nabla \\mathbf{v}^{\\mathsf{T}}\\right),\n$$\n其中\n$$\n\\nabla \\mathbf{v} =\n\\begin{bmatrix}\n\\frac{\\partial u}{\\partial x}  \\frac{\\partial u}{\\partial y}\\\\\n\\frac{\\partial v}{\\partial x}  \\frac{\\partial v}{\\partial y}\n\\end{bmatrix}.\n$$\n定义散度 $\\delta = \\mathrm{tr}(\\mathbf{D}) = \\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y}$ 和偏张量 $\\mathbf{D}' = \\mathbf{D} - \\frac{1}{2}\\delta\\,\\mathbf{I}$，其中 $\\mathbf{I}$ 是二维单位张量。通过第二不变量定义标量剪切率大小\n$$\n\\dot{\\gamma} = \\sqrt{2\\,\\mathbf{D}':\\mathbf{D}'},\n$$\n其中 $:$ 表示双点积。使用这些不变量，根据两个阈值：无量纲比率 $\\rho > 0$ 和噪声基底 $\\varepsilon \\ge 0$，将每个网格点分类到不同区域：\n- 如果 $\\dot{\\gamma} \\ge \\rho\\,|\\delta|$ 且 $\\dot{\\gamma} \\ge \\varepsilon$，则为剪切主导，\n- 如果 $\\delta \\le -\\varepsilon$ 且 $|\\delta| > \\rho\\,\\dot{\\gamma}$，则为压缩主导，\n- 否则为皆不属于。\n\n假设速度分量 $u$ 和 $v$ 在一个均匀矩形网格上给出，沿 $x$ 和 $y$ 方向的间距分别为 $\\Delta x$ 和 $\\Delta y$。使用二阶中心差分计算内部点的偏导数，使用一阶单侧差分计算边界上的偏导数。提供了一系列细胞嵌入事件，以点坐标 $(x_e, y_e)$ 的形式给出，其坐标系与速度场相同；通过最近邻分配法将这些事件与最近的网格节点上的分类关联起来。\n\n对于每个测试用例，你的程序必须计算：\n- 位于剪切主导区域的嵌入事件的比例，\n- 位于压缩主导区域的嵌入事件的比例。\n\n比例是无量纲的，并且必须报告为四舍五入到三位小数的数值。\n\n您可以假设的基本原理：\n- 在介观尺度上，经历原肠形成的上皮组织可被视为连续介质；速度梯度 $\\mathbf{D}$ 的对称部分捕捉了瞬时组织应变率。\n- 粒子图像测速法 (PIV) 得到一个欧拉速度场 $\\mathbf{v}(x,y)$。\n- 在均匀网格上，有限差分法能一致地近似空间导数。\n\n不涉及角度单位。速度场单位为微米/分钟，网格坐标单位为微米，应变率不变量单位为/分钟。所要求的输出比例是无量纲的。\n\n测试套件：\n对于所有用例，使用一个方形网格，其中 $N_x = 21$，$N_y = 21$，$x \\in \\{-10,-9,\\dots,10\\}$ 微米，$y \\in \\{-10,-9,\\dots,10\\}$ 微米，$\\Delta x = 1$ 微米，$\\Delta y = 1$ 微米。对于每个用例，按指定方式构建 $u(x,y)$ 和 $v(x,y)$。\n\n- 测试用例 1 (会聚延伸，保面积拉伸剪切):\n  - 参数 $a = 0.1$ /分钟。\n  - 速度场: $u(x,y) = -a\\,x$, $v(x,y) = a\\,y$。\n  - 阈值: $\\rho = 1.0$, $\\varepsilon = 10^{-6}$ /分钟。\n  - 嵌入事件 (微米): $\\{(0,0), (1,0), (-1,0), (0,1), (2,-1), (-2,1)\\}$。\n\n- 测试用例 2 (各向同性压缩):\n  - 参数 $k = 0.05$ /分钟。\n  - 速度场: $u(x,y) = -k\\,x$, $v(x,y) = -k\\,y$。\n  - 阈值: $\\rho = 1.0$, $\\varepsilon = 10^{-6}$ /分钟。\n  - 嵌入事件 (微米): $\\{(5,5), (-5,-5), (3,-7), (0,0), (9,-2)\\}$。\n\n- 测试用例 3 (简单剪切):\n  - 参数 $s = 0.08$ /分钟。\n  - 速度场: $u(x,y) = s\\,y$, $v(x,y) = 0$。\n  - 阈值: $\\rho = 2.0$, $\\varepsilon = 0.01$ /分钟。\n  - 嵌入事件 (微米): $\\{(-6,0), (0,5), (7,-3), (2,2)\\}$。\n\n- 测试用例 4 (各向同性扩张，既非剪切也非压缩的边界情况):\n  - 参数 $k = 0.06$ /分钟。\n  - 速度场: $u(x,y) = k\\,x$, $v(x,y) = k\\,y$。\n  - 阈值: $\\rho = 1.0$, $\\varepsilon = 10^{-6}$ /分钟。\n  - 嵌入事件 (微米): $\\{(0,0), (8,8)\\}$。\n\n要求的最终输出格式：\n你的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表。每个测试用例对应一个双元素列表，顺序为 $[\\text{剪切比例}, \\text{压缩比例}]$，每个比例都四舍五入到三位小数。例如，两个测试用例的有效输出将如下所示：$[[0.500,0.250],[1.000,0.000]]$。", "solution": "问题陈述已经过分析，被认为是有效的。它在科学上基于连续介质力学和发育生物学，在数学上是适定的，并以客观、明确的语言呈现。为获得唯一解所需的所有数据、模型和边界条件均已提供。我们可以继续。\n\n基本任务是根据生物组织的速度场 $\\mathbf{v}(x,y) = (u(x,y), v(x,y))$，将其形变模式进行分类，该组织被建模为二维连续介质。然后，该分类用于分析特定生物事件（即细胞嵌入）所处的环境。\n\n求解方法包括以下步骤：\n1.  建立一个离散计算网格来表示连续域。问题指定了一个 $N_x=21 \\times N_y=21$ 个点的均匀网格，其中 $x \\in \\{-10, -9, \\dots, 10\\}$，$y \\in \\{-10, -9, \\dots, 10\\}$，对应的网格间距为 $\\Delta x = 1$ 微米和 $\\Delta y = 1$ 微米。\n2.  将每个测试用例的解析速度场 $(u(x,y), v(x,y))$ 采样到此网格上。\n3.  在每个网格点上计算速度梯度张量 $\\nabla \\mathbf{v}$。问题指定了一个数值微分方案：对内部点使用二阶中心差分，对边界点使用一阶单侧差分。该方案可以通过使用带 `edge_order=1` 参数的 `numpy.gradient` 函数方便地实现。梯度的分量为：\n    $$\n    \\nabla \\mathbf{v} =\n    \\begin{bmatrix}\n    \\frac{\\partial u}{\\partial x}  \\frac{\\partial u}{\\partial y}\\\\\n    \\frac{\\partial v}{\\partial x}  \\frac{\\partial v}{\\partial y}\n    \\end{bmatrix}\n    $$\n4.  从速度梯度中，我们计算两个关键的运动学不变量：散度 $\\delta$ 和标量剪切率大小 $\\dot{\\gamma}$。\n    - 散度 $\\delta$ 是形变率张量 $\\mathbf{D} = \\frac{1}{2}(\\nabla \\mathbf{v} + \\nabla \\mathbf{v}^{\\mathsf{T}})$ 的迹，可简化为速度梯度本身的迹：\n      $$\n      \\delta = \\mathrm{tr}(\\mathbf{D}) = \\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y}\n      $$\n      这个标量测量了局部面积变化率（$\\delta > 0$ 表示扩张，$\\delta  0$ 表示压缩）。\n    - 标量剪切率大小 $\\dot{\\gamma}$ 由偏形变率张量 $\\mathbf{D}' = \\mathbf{D} - \\frac{1}{2}\\delta\\,\\mathbf{I}$ 的第二不变量定义。定义为 $\\dot{\\gamma} = \\sqrt{2\\,\\mathbf{D}':\\mathbf{D}'}$，其中 $:$ 表示双点积。直接计算可以得到一个更方便的用速度导数表示的公式：\n      $$\n      \\dot{\\gamma} = \\sqrt{\\left(\\frac{\\partial u}{\\partial x} - \\frac{\\partial v}{\\partial y}\\right)^2 + \\left(\\frac{\\partial u}{\\partial y} + \\frac{\\partial v}{\\partial x}\\right)^2}\n      $$\n      这个标量测量了在面积不变的情况下的形状变化率（剪切）的大小。\n5.  使用计算出的 $\\delta$ 和 $\\dot{\\gamma}$ 场以及给定的阈值 $\\rho$ 和 $\\varepsilon$，将每个网格点分类为三种模式之一：\n    - 剪切主导：如果 $\\dot{\\gamma} \\ge \\rho\\,|\\delta|$ 且 $\\dot{\\gamma} \\ge \\varepsilon$。\n    - 压缩主导：如果 $\\delta \\le -\\varepsilon$ 且 $|\\delta| > \\rho\\,\\dot{\\gamma}$。\n    - 否则，分类为‘皆不属于’。\n    由此，为整个域生成了一张分类图。\n6.  将给定的位于坐标 $(x_e, y_e)$ 的细胞嵌入事件与分类区域关联起来。这通过最近邻分配完成。对于位于 $(x_e, y_e)$ 的一个事件，找到最近的网格节点，并将该节点的分类分配给该事件。由于网格节点和事件位置均以整数坐标给出，因此位于 $(x_e, y_e)$ 的事件与相同坐标处的网格节点精确重合。坐标对 $(x,y)$ 的网格索引 $(i,j)$ 通过以下映射确定：\n    $$\n    i = x - x_{\\min} = x + 10\n    $$\n    $$\n    j = y - y_{\\min} = y + 10\n    $$\n7.  最后，对于每个测试用例，我们统计落入剪切主导 ($N_{shear}$) 和压缩主导 ($N_{compression}$) 区域的事件数量。然后按如下方式计算所需的比例：\n    $$\n    f_{shear} = \\frac{N_{shear}}{N_{total}}, \\quad f_{compression} = \\frac{N_{compression}}{N_{total}}\n    $$\n    其中 $N_{total}$ 是嵌入事件的总数。根据要求，这些比例将四舍五入到三位小数。此过程系统地应用于所有提供的测试用例。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the tissue mechanics problem by computing deformation invariants,\n    classifying grid points, and analyzing intercalation event locations.\n    \"\"\"\n\n    # Grid definition, constant for all test cases\n    Nx, Ny = 21, 21\n    x_min, x_max = -10, 10\n    y_min, y_max = -10, 10\n    dx, dy = 1.0, 1.0\n\n    x_coords = np.arange(x_min, x_max + 1, dx)\n    y_coords = np.arange(y_min, y_max + 1, dy)\n    \n    # Using 'ij' indexing so that the first axis of arrays corresponds to x\n    # and the second to y.\n    xx, yy = np.meshgrid(x_coords, y_coords, indexing='ij')\n\n    test_cases = [\n        {\n            \"name\": \"Test Case 1 (Convergent Extension)\",\n            \"params\": {\"a\": 0.1},\n            \"u_func\": lambda x, y, p: -p[\"a\"] * x,\n            \"v_func\": lambda x, y, p: p[\"a\"] * y,\n            \"rho\": 1.0,\n            \"epsilon\": 1e-6,\n            \"events\": [(0, 0), (1, 0), (-1, 0), (0, 1), (2, -1), (-2, 1)],\n        },\n        {\n            \"name\": \"Test Case 2 (Isotropic Compression)\",\n            \"params\": {\"k\": 0.05},\n            \"u_func\": lambda x, y, p: -p[\"k\"] * x,\n            \"v_func\": lambda x, y, p: -p[\"k\"] * y,\n            \"rho\": 1.0,\n            \"epsilon\": 1e-6,\n            \"events\": [(5, 5), (-5, -5), (3, -7), (0, 0), (9, -2)],\n        },\n        {\n            \"name\": \"Test Case 3 (Simple Shear)\",\n            \"params\": {\"s\": 0.08},\n            \"u_func\": lambda x, y, p: p[\"s\"] * y,\n            \"v_func\": lambda x, y, p: 0 * x, # Keep it as a 2D array\n            \"rho\": 2.0,\n            \"epsilon\": 0.01,\n            \"events\": [(-6, 0), (0, 5), (7, -3), (2, 2)],\n        },\n        {\n            \"name\": \"Test Case 4 (Isotropic Expansion)\",\n            \"params\": {\"k\": 0.06},\n            \"u_func\": lambda x, y, p: p[\"k\"] * x,\n            \"v_func\": lambda x, y, p: p[\"k\"] * y,\n            \"rho\": 1.0,\n            \"epsilon\": 1e-6,\n            \"events\": [(0, 0), (8, 8)],\n        },\n    ]\n\n    results = []\n\n    for case in test_cases:\n        params = case[\"params\"]\n        rho = case[\"rho\"]\n        epsilon = case[\"epsilon\"]\n        events = case[\"events\"]\n\n        # 1. Generate velocity fields on the grid\n        u = case[\"u_func\"](xx, yy, params)\n        v = case[\"v_func\"](xx, yy, params)\n\n        # 2. Compute partial derivatives using specified finite difference rules\n        # np.gradient with edge_order=1 uses 2nd-order central differences in the\n        # interior and 1st-order one-sided differences at the boundaries.\n        # The return order is [derivative_along_axis_0, derivative_along_axis_1, ...].\n        # Due to `indexing='ij'`, axis 0 is x and axis 1 is y.\n        dudx, dudy = np.gradient(u, dx, dy, edge_order=1)\n        dvdx, dvdy = np.gradient(v, dx, dy, edge_order=1)\n\n        # 3. Calculate kinematic invariants: divergence (delta) and shear rate (gamma_dot)\n        delta = dudx + dvdy\n        gamma_dot = np.sqrt((dudx - dvdy)**2 + (dudy + dvdx)**2)\n\n        # 4. Classify each grid point\n        is_shear_dominated = (gamma_dot >= rho * np.abs(delta))  (gamma_dot >= epsilon)\n        is_compression_dominated = (delta = -epsilon)  (np.abs(delta) > rho * gamma_dot)\n\n        # 5. Correlate intercalation events with grid classifications\n        shear_event_count = 0\n        compression_event_count = 0\n        total_events = len(events)\n        \n        if total_events == 0:\n            results.append([0.0, 0.0])\n            continue\n\n        for xe, ye in events:\n            # Map event coordinates to grid indices.\n            # Grid runs from -10 to 10, so index i corresponds to x = i - 10.\n            # Thus, for a given coordinate x, the index is i = x + 10.\n            # Event coordinates are integers, so they fall exactly on grid nodes.\n            ix = int(round(xe - x_min))\n            iy = int(round(ye - y_min))\n\n            if is_shear_dominated[ix, iy]:\n                shear_event_count += 1\n            elif is_compression_dominated[ix, iy]:\n                compression_event_count += 1\n        \n        # 6. Calculate fractions\n        frac_shear = shear_event_count / total_events\n        frac_compression = compression_event_count / total_events\n        \n        results.append([frac_shear, frac_compression])\n\n    # 7. Format final output string\n    formatted_results = [f\"[{r[0]:.3f},{r[1]:.3f}]\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n\n```", "id": "2640076"}, {"introduction": "许多发育过程，例如左右不对称性的建立，尽管存在固有的生物学噪音，但必须表现出稳健性。这项高级练习将指导您建立一个概率模型，该模型整合了信号梯度、遗传嵌合体和随机的细胞响应。通过这样做，您将学习如何从第一性原理出发，预测发育表型的外显率，从而将细胞层面的变异性与生物体层面的结果联系起来。[@problem_id:2640068]", "problem": "给定一个关于原肠胚形成期间侧板中胚层 (LPM) 中 Nodal 信号传导的机制性概率模型。在该模型中，转化生长因子-β (TGF-$\\beta$) 家族配体 Nodal 建立了一个左偏的信号场，而拮抗剂 Dand5 (也称为 Cerl2) 在细胞中存在时会减少有效的 Nodal 输入。该模型基于以下基本事实：(i) 受扩散、降解和对流影响的配体浓度场可局部近似为连续分布；(ii) 基因激活的概率是相对于细胞阈值的有效配体输入的单调函数；(iii) 产生、运输和受体噪声的随机性可用一个连续随机变量建模。您将结合基本概率论来计算 Dand5 遗传嵌合条件下胚胎水平的左右不对称外显率。\n\n使用的模型假设：\n- 对于胚胎的每一侧 $s \\in \\{L,R\\}$ (左侧 $L$ 和右侧 $R$)，每个细胞的细胞外 Nodal 输入 $X_s$ 被建模为一个高斯随机变量 $X_s \\sim \\mathcal{N}(\\mu_s, \\sigma^2)$，其均值为 $\\mu_s$，标准差为 $\\sigma$，其中由于左右组织者处纤毛流产生的左向偏置，$\\mu_L \\ge \\mu_R$。\n- 当 Dand5 在细胞中存在时，它会以 $(1-\\gamma)$ 的因子乘性地减少有效 Nodal 输入，其中 $0  \\gamma  1$ 量化了拮抗强度。在 Dand5 缺失的细胞中，该细胞的 $\\gamma=0$。因此，在 $s$ 侧的一个细胞的有效输入，于 Dand5 缺失细胞中为 $C_s = X_s$，于 Dand5 存在细胞中为 $C_s = (1-\\gamma) X_s$。\n- 一个细胞当且仅当 $C_s \\ge T$ 时激活 Nodal 响应，其中 $T > 0$ 是细胞自主的激活阈值（无量纲）。\n- 该组织是一个遗传嵌合体：对于 $s$ 侧的每个细胞，其为 Dand5 缺失的概率是 $q_s \\in [0,1]$，而其为 Dand5 存在的概率是 $1-q_s$，此过程是独立的。假设在细胞层面，各细胞之间以及两侧之间是独立的。\n- 每一侧 $s$ 在 Nodal 反应域中有 $N_s$ 个细胞。设 $K_s$ 为 $s$ 侧激活的细胞数量。当且仅当 $K_L \\ge m$ 且 $K_R  m$ 时，胚胎被记为具有正确的左向不对称性，其中 $m$ 是用于组织水平读出的固定整数阈值。不对称外显率是在该随机模型下，此事件在所有胚胎中发生的概率。\n\n任务：\n1) 根据这些假设，仅使用高斯分布的性质并基于 Dand5 状态进行条件分析，推导 $s$ 侧单细胞激活概率 $p_s$ 作为 $(\\mu_s, \\sigma, \\gamma, T, q_s)$ 的函数公式。用高斯尾概率表示您的结果。\n2) 使用独立性假设，推导胚胎水平的正确左向不对称概率的闭式表达式（用标准概率分布函数表示），该表达式是 $N_L, N_R, m, p_L, p_R$ 的函数。\n3) 为明确阐明“Dand5 的局部缺失如何改变 Nodal 激活的阈值”，计算在 Dand5 存在与缺失两种情况下激活所需的有效输入阈值。将这两个阈值报告为 $T_{\\text{present}}$ 和 $T_{\\text{null}}$，其中 $T_{\\text{present}}$ 是满足 $(1-\\gamma) X_s \\ge T$ 的最小 $X_s$ 值，而 $T_{\\text{null}}$ 是满足 $X_s \\ge T$ 的最小 $X_s$ 值。\n\n数值评估：\n- 实现一个程序，对于下方的测试用例集，为每个案例输出一个包含三个浮点数的列表 $[T_{\\text{present}}, T_{\\text{null}}, P_{\\text{asym}}]$，其中 $P_{\\text{asym}}$ 是在任务2中获得的胚胎水平的正确左向不对称概率。所有输出都是无量纲的，并且必须以小数形式报告，四舍五入到小数点后六位。\n- 使用以下测试用例集。每个测试用例是一个元组 $(N_L,N_R,\\mu_L,\\mu_R,\\sigma,\\gamma,T,q_L,q_R,m)$：\n    - 案例 A (理想路径): $(100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 0.3, 0.3, 30)$, 即 $N_L=100$, $N_R=100$, $\\mu_L=1.0$, $\\mu_R=0.8$, $\\sigma=0.2$, $\\gamma=0.4$, $T=0.9$, $q_L=0.3$, $q_R=0.3$, $m=30$。\n    - 案例 B (边界：无嵌合): $(100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 0.0, 0.0, 30)$。\n    - 案例 C (边界：完全局部缺失): $(100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 1.0, 1.0, 30)$。\n    - 案例 D (小噪声，中等偏置): $(80, 80, 0.95, 0.85, 0.05, 0.3, 0.9, 0.2, 0.2, 10)$。\n    - 案例 E (高阈值，弱偏置): $(120, 120, 1.0, 0.95, 0.2, 0.3, 1.2, 0.5, 0.5, 20)$。\n\n最终输出格式要求：\n- 您的程序应生成一行输出，其中包含五个案例的结果，格式为用方括号括起来的逗号分隔列表，其中每个元素本身是一个包含三个浮点数 $[T_{\\text{present}}, T_{\\text{null}}, P_{\\text{asym}}]$ 的列表，并四舍五入到小数点后六位，例如：$[[a_1,b_1,c_1],[a_2,b_2,c_2],\\dots,[a_5,b_5,c_5]]$。", "solution": "问题陈述经审阅后被认定为有效。它在科学上基于发育生物学和定量建模的原理，在数学上是适定的，并为唯一解提供了足够的信息，且以客观、正式的语言表述。不存在矛盾、歧义或事实错误。我们将继续进行推导和求解。\n\n根据要求，解答分为三个任务。\n\n### 任务 1：单细胞激活概率 $p_s$ 的推导\n\n设 $A_s$ 为 $s \\in \\{L, R\\}$ 侧单个细胞激活 Nodal 响应的事件。此事件的概率为 $p_s = P(A_s)$。问题陈述该组织是遗传嵌合体。对于 $s$ 侧的任意给定细胞，设 $D_{null}$ 为该细胞是 Dand5 缺失的事件，其发生概率为 $P(D_{null}) = q_s$。其互补事件，即细胞为 Dand5 存在，记作 $D_{present}$，其概率为 $P(D_{present}) = 1 - q_s$。\n\n使用全概率定律，我们基于细胞的基因型对激活事件 $A_s$ 进行条件分析：\n$$p_s = P(A_s) = P(A_s | D_{null}) P(D_{null}) + P(A_s | D_{present}) P(D_{present})$$\n代入已知概率可得：\n$$p_s = q_s \\cdot P(A_s | D_{null}) + (1-q_s) \\cdot P(A_s | D_{present})$$\n\n接下来，我们计算条件概率。当有效 Nodal 输入 $C_s$ 达到或超过阈值 $T$ 时，即 $C_s \\ge T$，激活发生。\n\n对于一个 Dand5 缺失的细胞，$C_s = X_s$，其中 $X_s \\sim \\mathcal{N}(\\mu_s, \\sigma^2)$ 是细胞外 Nodal 输入。激活条件是 $X_s \\ge T$。其概率为：\n$$P(A_s | D_{null}) = P(X_s \\ge T)$$\n\n对于一个 Dand5 存在的细胞，$C_s = (1-\\gamma) X_s$。激活条件是 $(1-\\gamma)X_s \\ge T$。由于问题指定 $0  \\gamma  1$，项 $(1-\\gamma)$ 是正的，所以我们可以用它相除而不改变不等式方向：$X_s \\ge \\frac{T}{1-\\gamma}$。其概率为：\n$$P(A_s | D_{present}) = P\\left(X_s \\ge \\frac{T}{1-\\gamma}\\right)$$\n\n这些概率是高斯尾概率。对于一个随机变量 $X \\sim \\mathcal{N}(\\mu, \\sigma^2)$，尾概率 $P(X \\ge x)$ 通过对变量进行标准化来计算。设 $Z = (X-\\mu)/\\sigma \\sim \\mathcal{N}(0, 1)$。$Z$ 的累积分布函数是 $\\Phi(z) = P(Z \\le z)$。尾概率是 $1 - \\Phi(z)$。\n$$P(X \\ge x) = P\\left(\\frac{X - \\mu}{\\sigma} \\ge \\frac{x - \\mu}{\\sigma}\\right) = 1 - \\Phi\\left(\\frac{x - \\mu}{\\sigma}\\right)$$\n\n将此公式应用于我们的条件概率：\n$$P(A_s | D_{null}) = 1 - \\Phi\\left(\\frac{T - \\mu_s}{\\sigma}\\right)$$\n$$P(A_s | D_{present}) = 1 - \\Phi\\left(\\frac{T/(1-\\gamma) - \\mu_s}{\\sigma}\\right)$$\n\n将这些表达式代入 $p_s$ 的公式中，得到最终推导出的公式：\n$$p_s = q_s \\left[1 - \\Phi\\left(\\frac{T - \\mu_s}{\\sigma}\\right)\\right] + (1-q_s) \\left[1 - \\Phi\\left(\\frac{T/(1-\\gamma) - \\mu_s}{\\sigma}\\right)\\right]$$\n\n### 任务 2：胚胎水平不对称概率 $P_{\\text{asym}}$ 的推导\n\n设 $K_s$ 为 $s$ 侧激活细胞数量的随机变量，该侧包含 $N_s$ 个细胞。由于每个细胞以概率 $p_s$（在任务1中推导）独立激活，$K_s$ 服从二项分布，$K_s \\sim \\text{Binomial}(N_s, p_s)$。其概率质量函数为 $P(K_s = k) = \\binom{N_s}{k} p_s^k (1-p_s)^{N_s-k}$，其中 $k \\in \\{0, 1, \\dots, N_s\\}$。\n\n正确的左向不对称性由联合事件 $\\{K_L \\ge m\\} \\cap \\{K_R  m\\}$ 定义。模型假设左右两侧的细胞命运是独立的，这意味着随机变量 $K_L$ 和 $K_R$ 是独立的。因此，该联合事件的概率，即不对称外显率 $P_{\\text{asym}}$，是边际概率的乘积：\n$$P_{\\text{asym}} = P(K_L \\ge m) \\cdot P(K_R  m)$$\n\n这些概率可以用二项分布的累积分布函数 (CDF) 来表示，我们记作 $F_{\\text{Bin}}(k; N, p) = P(K \\le k) = \\sum_{i=0}^{k} \\binom{N}{i} p^i (1-p)^{N-i}$。\n\n对于右侧，$K_R  m$ 的概率等价于 $K_R \\le m-1$。这是对二项 CDF 的直接求值：\n$$P(K_R  m) = P(K_R \\le m-1) = F_{\\text{Bin}}(m-1; N_R, p_R)$$\n\n对于左侧，$K_L \\ge m$ 的概率是生存函数，即互补累积分布函数：\n$$P(K_L \\ge m) = 1 - P(K_L  m) = 1 - P(K_L \\le m-1) = 1 - F_{\\text{Bin}}(m-1; N_L, p_L)$$\n\n结合这些结果，得到不对称外显率的最终闭式表达式：\n$$P_{\\text{asym}} = \\left(1 - F_{\\text{Bin}}(m-1; N_L, p_L)\\right) \\cdot F_{\\text{Bin}}(m-1; N_R, p_R)$$\n其中概率 $p_L$ 和 $p_R$ 使用任务 1 的公式以及各自侧的相应参数计算得出。\n\n### 任务 3：有效输入阈值 $T_{\\text{present}}$ 和 $T_{\\text{null}}$ 的计算\n\n此任务要求根据细胞的 Dand5 状态，找出细胞激活所需的最小细胞外 Nodal 浓度 $X_s$。通用的激活规则是 $C_s \\ge T$。\n\n对于 Dand5 缺失的细胞，有效输入为 $C_s = X_s$。激活条件变为 $X_s \\ge T$。满足此条件的 $X_s$ 的最小值为 $T$。因此，有效阈值为：\n$$T_{\\text{null}} = T$$\n\n对于 Dand5 存在的细胞，有效输入为 $C_s = (1-\\gamma)X_s$。激活条件是 $(1-\\gamma)X_s \\ge T$。鉴于 $0  \\gamma  1$，我们可以除以正常数 $(1-\\gamma)$ 来分离出 $X_s$：\n$$X_s \\ge \\frac{T}{1-\\gamma}$$\n满足此条件的 $X_s$ 的最小值为 $T/(1-\\gamma)$。因此，有效阈值为：\n$$T_{\\text{present}} = \\frac{T}{1-\\gamma}$$\n这证实了拮抗剂会增加引发响应所需的配体浓度的生物学直觉。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import norm, binom\n\ndef solve():\n    \"\"\"\n    Calculates asymmetry penetrance for a probabilistic model of Nodal signaling.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (N_L, N_R, mu_L, mu_R, sigma, gamma, T, q_L, q_R, m)\n    test_cases = [\n        (100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 0.3, 0.3, 30), # Case A\n        (100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 0.0, 0.0, 30), # Case B\n        (100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 1.0, 1.0, 30), # Case C\n        (80, 80, 0.95, 0.85, 0.05, 0.3, 0.9, 0.2, 0.2, 10), # Case D\n        (120, 120, 1.0, 0.95, 0.2, 0.3, 1.2, 0.5, 0.5, 20), # Case E\n    ]\n\n    all_results_str = []\n\n    for case in test_cases:\n        N_L, N_R, mu_L, mu_R, sigma, gamma, T, q_L, q_R, m = case\n\n        # Task 3: Calculate effective input thresholds\n        T_null = float(T)\n        T_present = T / (1 - gamma)\n\n        # Task 1: Calculate per-cell activation probabilities p_L and p_R\n        def calculate_p_s(mu_s, q_s, T_val, T_present_val, sigma_val):\n            \"\"\"Calculates per-cell activation probability for a given side.\"\"\"\n            # Probability of activation for a Dand5-null cell: P(X_s >= T)\n            # norm.sf is the survival function (1 - CDF), which is P(X > x)\n            # For a continuous distribution, P(X >= x) = P(X > x)\n            prob_act_null = norm.sf(T_val, loc=mu_s, scale=sigma_val)\n            \n            # Probability of activation for a Dand5-present cell: P(X_s >= T/(1-gamma))\n            prob_act_present = norm.sf(T_present_val, loc=mu_s, scale=sigma_val)\n            \n            # Total probability via law of total probability\n            p_s = q_s * prob_act_null + (1 - q_s) * prob_act_present\n            return p_s\n\n        p_L = calculate_p_s(mu_L, q_L, T, T_present, sigma)\n        p_R = calculate_p_s(mu_R, q_R, T, T_present, sigma)\n\n        # Task 2: Calculate embryo-level asymmetry probability P_asym\n        # Probability of correct activation on the left side: K_L >= m\n        # This is 1 - P(K_L = m-1). binom.cdf(k, n, p) computes P(X = k).\n        # We need to handle m=0 case for m-1=-1, where cdf is 0, correctly.\n        # Scipy's binom.cdf correctly handles k  0 by returning 0.\n        prob_correct_L = 1.0 - binom.cdf(m - 1, n=N_L, p=p_L)\n\n        # Probability of correct lack of activation on the right side: K_R  m\n        # This is P(K_R = m-1).\n        prob_correct_R = binom.cdf(m - 1, n=N_R, p=p_R)\n\n        # Total asymmetry probability assuming independence\n        P_asym = prob_correct_L * prob_correct_R\n\n        # Format results for the current case into a string '[f1,f2,f3]'\n        result_str = f\"[{T_present:.6f},{T_null:.6f},{P_asym:.6f}]\"\n        all_results_str.append(result_str)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(all_results_str)}]\")\n\nsolve()\n```", "id": "2640068"}]}