{"hands_on_practices": [{"introduction": "源叶是植物进行光合作用和碳固定的主要引擎。要理解碳如何在整个植物中分配，第一步是量化源器官本身产生的可利用碳水化合物。本练习将运用基本的质量守恒定律，为单个源叶构建一个稳态碳收支平衡表，这是一个在假设条件下阐明核心原理的理想化场景。通过这个练习，你将学会如何从总光合速率中减去叶片自身的消耗（如呼吸和淀粉储存），从而计算出可用于输出到其他器官（库）的最大碳量，这是理解源-库关系的基础。[@problem_id:2554154]", "problem": "一片进行光合作用的叶片在饱和光照下以稳态运行，因此在其所考虑的时间窗内，其非结构性碳库没有发生可测量的变化。总光合碳固定速率为 $A = 20$ µmol $\\text{CO}_2$ m$^{-2}$ s$^{-1}$，同时发生的光下线粒体叶片呼吸速率为 $R_l = 2$ µmol $\\text{CO}_2$ m$^{-2}$ s$^{-1}$，淀粉合成速率为 $S = 4$ µmol C m$^{-2}$ s$^{-1}$。假设叶片内所有其他碳汇均可忽略不计，一个二氧化碳（$\\text{CO}_2$）分子为同化产物贡献一摩尔当量的碳，且蔗糖的化学式为 $\\text{C}_{12}\\text{H}_{22}\\text{O}_{11}$。\n\n仅使用碳的质量守恒和分子化学计量，计算通过韧皮部输出的稳态蔗糖最大速率，单位为 µmol 蔗糖 m$^{-2}$ s$^{-1}$。将您的答案四舍五入至四位有效数字。", "solution": "控制该系统的基本原理是碳的质量守恒。问题指明叶片在稳态下运行，这意味着非结构性碳库的大小是恒定的。这意味着流入该碳库的总碳速率必须等于流出该碳库的总碳速率。\n\n让我们以单位叶面积单位时间内的碳摩尔数来定义这些通量，具体单位为 $\\mu\\text{mol C m}^{-2} \\text{s}^{-1}$。\n\n碳的主要来源是总光合作用，其速率用 $A$ 表示。问题给出的该速率为 $A = 20$ µmol $\\text{CO}_2$ m$^{-2}$ s$^{-1}$。根据所提供的化学计量关系，一个$\\text{CO}_2$分子提供一个碳原子。因此，碳流入速率为：\n$$A_C = 20 \\, \\mu\\text{mol C m}^{-2} \\text{s}^{-1}$$\n\n固定的碳被分配到几个碳汇。问题指出了三个：\n1. 光下线粒体呼吸，$R_l$。这个过程释放 $\\text{CO}_2$，代表固定碳的损失。给出的速率为 $R_l = 2$ µmol $\\text{CO}_2$ m$^{-2}$ s$^{-1}$。这对应于一个碳流出速率：\n$$R_{l,C} = 2 \\, \\mu\\text{mol C m}^{-2} \\text{s}^{-1}$$\n2. 淀粉合成，$S$。这是叶片内的一个储存碳汇。该速率直接以碳单位给出：\n$$S = 4 \\, \\mu\\text{mol C m}^{-2} \\text{s}^{-1}$$\n3. 通过韧皮部输出蔗糖。我们用 $E_C$ 表示以这种形式输出的碳速率，单位为 $\\mu\\text{mol C m}^{-2} \\text{s}^{-1}$。这是我们必须首先确定的量。\n\n问题指出所有其他碳汇都可忽略不计。因此，碳的稳态质量平衡方程为：\n$$(\\text{碳流入速率}) = (\\text{碳流出速率})$$\n$$A_C = R_{l,C} + S + E_C$$\n\n现在我们可以求解碳输出速率 $E_C$：\n$$E_C = A_C - R_{l,C} - S$$\n代入给定的数值：\n$$E_C = 20 \\, \\frac{\\mu\\text{mol C}}{\\text{m}^2 \\cdot \\text{s}} - 2 \\, \\frac{\\mu\\text{mol C}}{\\text{m}^2 \\cdot \\text{s}} - 4 \\, \\frac{\\mu\\text{mol C}}{\\text{m}^2 \\cdot \\text{s}}$$\n$$E_C = 14 \\, \\frac{\\mu\\text{mol C}}{\\text{m}^2 \\cdot \\text{s}}$$\n这个结果代表碳原子从叶片中输出的速率。然而，问题要求的是蔗糖的输出速率，我们称之为 $E_{\\text{sucrose}}$，单位为 $\\mu\\text{mol} \\text{ 蔗糖 m}^{-2} \\text{s}^{-1}$。\n\n为了进行这种转换，我们使用蔗糖分子的化学计量，其化学式为 $\\text{C}_{12}\\text{H}_{22}\\text{O}_{11}$。该化学式表明一摩尔蔗糖含有 $12$ 摩尔的碳原子。蔗糖的摩尔通量与其所含碳的摩尔通量之间的关系是：\n$$E_C = 12 \\times E_{\\text{sucrose}}$$\n我们必须重新整理这个方程来求解蔗糖的输出速率：\n$$E_{\\text{sucrose}} = \\frac{E_C}{12}$$\n代入我们计算出的 $E_C$ 值：\n$$E_{\\text{sucrose}} = \\frac{14 \\, \\frac{\\mu\\text{mol C}}{\\text{m}^2 \\cdot \\text{s}}}{12 \\, \\frac{\\mu\\text{mol C}}{\\mu\\text{mol sucrose}}}$$\n$$E_{\\text{sucrose}} = \\frac{14}{12} \\, \\frac{\\mu\\text{mol sucrose}}{\\text{m}^2 \\cdot \\text{s}} = \\frac{7}{6} \\, \\frac{\\mu\\text{mol sucrose}}{\\text{m}^2 \\cdot \\text{s}}$$\n执行除法运算，我们得到：\n$$E_{\\text{sucrose}} \\approx 1.1666... \\, \\frac{\\mu\\text{mol sucrose}}{\\text{m}^2 \\cdot \\text{s}}$$\n问题要求答案四舍五入到四位有效数字。将结果四舍五入后得到：\n$$E_{\\text{sucrose}} \\approx 1.167 \\, \\frac{\\mu\\text{mol sucrose}}{\\text{m}^2 \\cdot \\text{s}}$$\n这是在指定的稳态条件下可能的最大输出速率，因为所有其他通量都是固定的。", "answer": "$$\\boxed{1.167}$$", "id": "2554154"}, {"introduction": "在理解了单个叶片的碳收支后，我们将视角提升到整个植物系统。环境变化（例如大气 $\\text{CO}_2$ 浓度升高）可能会打破源（光合作用）和库（生长和储存）之间的平衡，导致源的供给超过库的需求，即所谓的“库限制”。本练习通过一个假设性的案例，模拟了这一重要的生理生态学情景，要求你量化在这种失衡下产生的“过剩”碳，并根据给定的碳利用效率（$CUE$）参数，预测这些碳在储存和呼吸之间的分配命运。[@problem_id:2554161]", "problem": "可以在冠层尺度上建立一个全植物碳平衡恒等式，即总初级生产力（$GPP$，单位为 $\\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$）被分配为净初级生产力（$NPP$）和自养呼吸（$R_{a}$），其中碳利用效率（CUE）定义为 $CUE = \\frac{NPP}{GPP}$。在源-库框架中，源强度由 $GPP$ 量化，库强度是整合碳用于生长的能力（$NPP$）。在库限制下，实际的 $NPP$ 不能超过库容量，任何多余的碳（相对于此容量）可以作为非结构性碳水化合物暂时储存，或作为溢流呼吸而损失。\n\n考虑一个在环境二氧化碳浓度下具有以下测得的基线属性的作物冠层：\n- 基线总初级生产力 $GPP_{0} = $ $12$ $\\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$。\n- 基线碳利用效率 $CUE_{0} = $ $0.45$，因此 $NPP_{0} = CUE_{0}\\,GPP_{0}$。\n\n现在施加一个二氧化碳浓度升高的处理，该处理使叶片水平的净同化作用（与 $GPP$ 成比例）增加 $30\\%$，而生长的库容量（可实现的最大 $NPP$）相对于基线 $NPP_{0}$ 仅增加 $10\\%$。假设在没有库限制的情况下，植物在二氧化碳浓度升高时会保持与基线相同的生长碳利用效率 $CUE_{0}$，因此在二氧化碳浓度升高下的无约束潜在生长为 $CUE_{0}\\,GPP_{\\mathrm{elev}}$，其中 $GPP_{\\mathrm{elev}} = 1.30\\,GPP_{0}$。在库限制下，将潜在过剩碳 $X$ 定义为该无约束潜在生长与二氧化碳浓度升高下受库限制的最大 $NPP$ 之间的差值，并将负值截断为零。\n\n进一步假设，这种过剩碳 $X$ 的去向由储存碳利用效率 $CUE_{\\mathrm{store}} = $ $0.70$ 决定，此处定义为同化当天作为非结构性碳水化合物储存而保留的过剩碳的比例；剩余的比例 $1 - CUE_{\\mathrm{store}}$ 在当天作为溢流呼吸而损失。\n\n仅使用这些定义，计算：\n- 二氧化碳浓度升高下的潜在过剩碳 $X$\n- 保留在储存中的过剩碳量，以及\n- 因溢流呼吸而损失的过剩碳量。\n\n将最终答案表示为一个三分量行向量 $\\big(X,\\ \\text{stored},\\ \\text{respired}\\big)$，单位为 $\\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$，并四舍五入到四位有效数字。向量中不包含单位。", "solution": "该问题要求基于所提供的定义进行顺序计算。每一步都必须精确执行。\n\n首先，我们使用给定的基线总初级生产力 $GPP_{0}$ 和基线碳利用效率 $CUE_{0}$ 计算基线净初级生产力 $NPP_{0}$。\n已知条件为：\n$GPP_{0} = 12$ $\\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$\n$CUE_{0} = 0.45$\n\n使用定义 $NPP_{0} = CUE_{0}\\,GPP_{0}$：\n$$NPP_{0} = 0.45 \\times 12 = 5.4\\ \\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$$\n\n接下来，我们计算$\\text{CO}_2$浓度升高情景下的参数。\n$\\text{CO}_2$浓度升高下的总初级生产力 $GPP_{\\mathrm{elev}}$ 比基线高 $30\\%$：\n$$GPP_{\\mathrm{elev}} = 1.30 \\times GPP_{0} = 1.30 \\times 12 = 15.6\\ \\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$$\n\n生长的最大库容量 $NPP_{\\mathrm{max, elev}}$ 比基线净初级生产力高 $10\\%$：\n$$NPP_{\\mathrm{max, elev}} = 1.10 \\times NPP_{0} = 1.10 \\times 5.4 = 5.94\\ \\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$$\n\n现在，我们确定$\\text{CO}_2$浓度升高下的无约束潜在生长。问题陈述这是在假设保持基线碳利用效率 $CUE_{0}$ 的情况下计算的：\n$$\\text{Unconstrained Potential Growth} = CUE_{0} \\times GPP_{\\mathrm{elev}} = 0.45 \\times 15.6 = 7.02\\ \\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$$\n这个值代表了如果植物的库强度不是限制因素时可以实现的 $NPP$。\n\n潜在过剩碳 $X$ 是这个无约束潜在生长与实际受库限制的最大生长 $NPP_{\\mathrm{max, elev}}$ 之间的差值。\n$$X = (\\text{Unconstrained Potential Growth}) - NPP_{\\mathrm{max, elev}}$$\n$$X = 7.02 - 5.94 = 1.08\\ \\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$$\n由于此值为正，根据定义 $X = \\max(0, \\dots)$，它就等于 $X$。这个 $X$ 代表了由于库限制而无法并入新的结构性生物量的过剩碳。\n\n最后，我们根据储存碳利用效率 $CUE_{\\mathrm{store}} = 0.70$ 将这个过剩碳 $X$ 分配到储存和溢流呼吸中。\n\n保留在储存中的碳量为：\n$$\\text{Stored} = X \\times CUE_{\\mathrm{store}} = 1.08 \\times 0.70 = 0.756\\ \\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$$\n\n因溢流呼吸损失的碳量是剩余的部分：\n$$\\text{Respired} = X \\times (1 - CUE_{\\mathrm{store}}) = 1.08 \\times (1 - 0.70) = 1.08 \\times 0.30 = 0.324\\ \\mathrm{g\\ C\\ m^{-2}\\ day^{-1}}$$\n\n为验证，各分配部分的总和必须等于总的过剩碳：\n$$0.756 + 0.324 = 1.08 = X$$\n计算是一致的。\n\n问题要求最终答案为一个三分量行向量 $(X,\\ \\text{stored},\\ \\text{respired})$，并四舍五入到四位有效数字。因此，最终的向量是 $(1.080, 0.7560, 0.3240)$。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n1.080 & 0.7560 & 0.3240\n\\end{pmatrix}\n}\n$$", "id": "2554161"}, {"introduction": "从静态的收支计算，我们迈向动态建模，这是研究生理过程如何随时间演变的强大工具。这项高级实践要求你将一个简化的动态碳分配模型与提供的模拟数据进行拟合，从而估算关键的分配参数（$k_L$ 和 $k_R$）。这一过程不仅能让你体验现代生理学研究中的一个核心任务，更重要的是，它引入了“参数可辨识性”的关键概念，引导你通过这个思想实验思考一个核心问题：“我们究竟能从数据中学到什么？”。[@problem_id:2554157]", "problem": "给定一个简化的、基于生理学的源-汇碳分配模型，用于描述一株具有两个结构器官（叶和根）和单一均匀混合的非结构性碳水化合物（NSC）库的植物。目标是通过将模型预测值与所提供的器官生物量和NSC浓度时间序列数据进行拟合，来估计控制碳从NSC库流向每个结构器官的分配转移系数。您必须实现一个程序，解决一个约束加权最小二乘问题来估计参数，然后通过计算最优点处敏感性（雅可比）矩阵的秩和条件数来评估局部结构可辨识性。\n\n模型和基于质量守恒的假设：\n- 令 $L_t$ 和 $R_t$ 分别表示在第 $t$ 天的叶和根的结构生物量（单位：g）。\n- 令 $N_t$ 表示在第 $t$ 天的NSC质量（单位：g）。\n- 令 $A_t$ 表示在第 $t$ 天期间NSC的净同化输入量（单位：g/天）。\n- 在感兴趣的时间窗口内，从NSC库到结构生物量的分配被建模为具有恒定系数 $k_L$ 和 $k_R$（单位：天$^{-1}$）的一阶转移过程。\n- 时间以一天为步长，通过前向欧拉质量平衡法推进，除了分配项外，没有明确的维持或损失项：\n  $$\n  \\begin{aligned}\n  L_{t+1} &= L_t + k_L N_t, \\\\\n  R_{t+1} &= R_t + k_R N_t, \\\\\n  N_{t+1} &= N_t + A_t - (k_L + k_R)N_t.\n  \\end{aligned}\n  $$\n- 观测到的全株NSC浓度 $C_t$（单位：mg/g）与模型状态的关系如下：\n  $$\n  C_t = 1000 \\cdot \\frac{N_t}{L_t + R_t}.\n  $$\n- 在离散时间点 $t = 0, 1, \\dots, T$ 提供观测值，并提供已知的同化序列 $\\{A_t\\}_{t=0}^{T-1}$ 和已知的初始条件 $L_0$、$R_0$、$N_0$。\n\n参数估计问题：\n- 未知参数为 $k_L$ 和 $k_R$，约束在区间 $[0,1]$ 天$^{-1}$ 内。\n- 令 $\\widehat{L}_t(k_L,k_R)$、$\\widehat{R}_t(k_L,k_R)$ 和 $\\widehat{C}_t(k_L,k_R)$ 表示模型预测值。\n- 给定观测序列 $\\{L_t^{\\text{obs}}\\}$、$\\{R_t^{\\text{obs}}\\}$、$\\{C_t^{\\text{obs}}\\}$ 和正的缩放常数 $s_L$（单位：g）、$s_R$（单位：g）、$s_C$（单位：mg/g），通过按时间堆叠定义一个无量纲的残差向量：\n  $$\n  \\mathbf{r}(k_L,k_R) = \\left[ \\frac{\\widehat{L}_t - L_t^{\\text{obs}}}{s_L}, \\frac{\\widehat{R}_t - R_t^{\\text{obs}}}{s_R}, \\frac{\\widehat{C}_t - C_t^{\\text{obs}}}{s_C} \\right]_{t=0}^{T}.\n  $$\n- 通过最小化加权平方和 $J(k_L,k_R) = \\|\\mathbf{r}(k_L,k_R)\\|_2^2$ 来估计 $(k_L,k_R)$，约束条件为 $0 \\le k_L \\le 1$ 和 $0 \\le k_R \\le 1$。\n\n可辨识性评估：\n- 令 $\\mathbf{J}$ 表示 $\\mathbf{r}$ 关于 $(k_L,k_R)$ 在估计参数处的雅可比（敏感性）矩阵。如果 $\\operatorname{rank}(\\mathbf{J}) = 2$ 且条件数 $\\kappa(\\mathbf{J})$ 低于指定阈值，则表明具有局部结构可辨识性。使用奇异值分解来估计秩和条件数，并且当且仅当估计的秩等于 $2$ 且 $\\kappa(\\mathbf{J}) < 10^8$ 时，声明该参数对是局部可辨识的。\n\n数值单位和输出：\n- 转移系数 $k_L$ 和 $k_R$ 必须以 天$^{-1}$ 为单位报告。\n- 均方根误差（RMSE）必须根据无量纲残差计算，并以无量纲浮点数的形式报告。\n- 可辨识性判定必须是一个布尔值。\n- 不使用角度。不使用百分比。\n\n您的程序必须解决三个测试用例。对于每个用例，计算并报告 $[k_L, k_R, \\text{RMSE}, \\text{Identifiable}]$，其中 $k_L$ 和 $k_R$ 的单位是 天$^{-1}$，RMSE 无量纲，Identifiable 是一个布尔值。在最终输出中，将每个浮点数四舍五入到六位小数。\n\n测试套件：\n- 用例1（信息充分，良态）：\n  - 在第 $t=0,\\dots,6$ 天的同化序列（g/天）：$A = [1.2, 1.5, 1.3, 1.1, 1.4, 1.0, 0.8]$。\n  - 初始条件：$L_0 = 5.0$ g、$R_0 = 5.0$ g、$N_0 = 1.0$ g。\n  - 观测值：使用上述模型和真实参数 $k_L^{\\star} = 0.08$ 天$^{-1}$ 和 $k_R^{\\star} = 0.04$ 天$^{-1}$ 来为 $t=0,\\dots,7$ 生成 $\\{L_t^{\\text{obs}}\\}$、$\\{R_t^{\\text{obs}}\\}$ 和 $\\{C_t^{\\text{obs}}\\}$；不添加额外噪声。\n  - 缩放常数：$s_L = 1.0$ g、$s_R = 1.0$ g、$s_C = 10.0$ mg/g。\n  - 期望：接近恢复 $k_L^{\\star}$ 和 $k_R^{\\star}$，RMSE 很小，可辨识性为真。\n\n- 用例2（观测数据不足以区分流量）：\n  - 与用例1相同的 $A$、$L_0$、$R_0$、$N_0$ 和生成的观测值。\n  - 缩放常数：$s_L = +\\infty$（实现为权重 $0$）、$s_R = +\\infty$（实现为权重 $0$）、$s_C = 10.0$ mg/g。也就是说，只有 $\\{C_t^{\\text{obs}}\\}$ 对残差有贡献。\n  - 期望：目标函数仅依赖于 $k_L + k_R$，因此存在局部不可辨识性；算法将返回无限多个解中的一个（例如，接近 $0.06$ 和 $0.06$ 的对称值），可辨识性为假。\n\n- 用例3（无可用NSC，无同化作用）：\n  - 同化序列：$A = [0.0, 0.0, 0.0, 0.0]$（第 $t=0,\\dots,3$ 天）。\n  - 初始条件：$L_0 = 4.0$ g、$R_0 = 6.0$ g、$N_0 = 0.0$ g。\n  - 观测值：由于 $N_0=0$ g 且对所有 $t$ 都有 $A_t=0$ g/天，模型预测 $L_t$、$R_t$ 为常数，且 $C_t=0$ mg/g；使用这些值作为 $t=0,\\dots,4$ 的 $\\{L_t^{\\text{obs}}\\}$、$\\{R_t^{\\text{obs}}\\}$ 和 $\\{C_t^{\\text{obs}}\\}$。\n  - 缩放常数：$s_L = 1.0$ g、$s_R = 1.0$ g、$s_C = 1.0$ mg/g。\n  - 期望：残差与 $(k_L,k_R)$ 无关，因此可辨识性为假；优化器很可能会返回初始猜测值。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个由方括号括起来的、逗号分隔的结果列表。每个测试用例的结果必须是 $[k_L, k_R, \\text{RMSE}, \\text{Identifiable}]$ 形式的列表，其中 $k_L$ 和 $k_R$ 的单位是 天$^{-1}$，RMSE 无量纲，Identifiable 是一个布尔值。示例格式（非真实数字）：[[0.080000,0.040000,0.000000,True],[0.060000,0.060000,0.001234,False],[0.050000,0.050000,0.000000,False]]。\n\n实现说明：\n- 使用约束非线性最小二乘求解器来最小化 $J(k_L,k_R)$，其中每个参数的界限为 $[0,1]$ 天$^{-1}$。\n- 将RMSE计算为在所有时间和由缩放常数包括的观测值上，无量纲残差平方的均值的平方根。\n- 在最优点处数值计算雅可比矩阵，并通过秩和条件数（阈值为 $\\kappa(\\mathbf{J}) < 10^8$）来评估局部可辨识性。", "solution": "该问题要求在一个简化的植物生理模型中估计碳分配参数 $k_L$ 和 $k_R$。估计过程将通过使用约束加权非线性最小二乘法，将模型与合成数据进行拟合来完成。随后，必须使用雅可比矩阵对估计出的参数进行局部结构可辨识性分析。\n\n该模型描述了叶生物量（$L_t$）、根生物量（$R_t$）和非结构性碳水化合物（NSC）质量（$N_t$）在离散时间步长上的动态变化。方程组由前向欧拉近似给出：\n$$\n\\begin{aligned}\nL_{t+1} &= L_t + k_L N_t \\\\\nR_{t+1} &= R_t + k_R N_t \\\\\nN_{t+1} &= N_t + A_t - (k_L + k_R)N_t\n\\end{aligned}\n$$\n此处，$A_t$ 是每日净同化量。可观测的NSC浓度 $C_t$ 与状态变量的关系如下：\n$$\nC_t = 1000 \\cdot \\frac{N_t}{L_t + R_t}\n$$\n\n对于每个测试用例，解决方案按以下几个逻辑步骤进行：\n1.  **数据生成**：对于每个测试用例，通过使用指定的“真实”参数（或在不明确的情况下使用代表性参数）和初始条件来模拟模型方程，生成一组“观测”时间序列数据 $\\{L_t^{\\text{obs}}\\}$、$\\{R_t^{\\text{obs}}\\}$ 和 $\\{C_t^{\\text{obs}}\\}$。这为测试估计算法提供了基准真相。\n\n2.  **参数估计**：问题的核心是找到参数 $(k_L, k_R)$，以最小化加权残差平方和 $J(k_L, k_R)$。残差向量 $\\mathbf{r}$ 由模型预测值与生成的观测值之间的归一化差异构成。\n    $$\n    J(k_L,k_R) = \\sum_{t=0}^{T} \\left[ \\left(\\frac{\\widehat{L}_t - L_t^{\\text{obs}}}{s_L}\\right)^2 + \\left(\\frac{\\widehat{R}_t - R_t^{\\text{obs}}}{s_R}\\right)^2 + \\left(\\frac{\\widehat{C}_t - C_t^{\\text{obs}}}{s_C}\\right)^2 \\right]\n    $$\n    这是一个非线性最小二乘问题，需要数值求解。`scipy.optimize.least_squares` 函数非常适合此任务，因为它可以有效地最小化向量值函数的平方和，并能处理边界约束 $0 \\le k_L, k_R \\le 1$。需要一个参数的初始猜测值，例如 $(k_L, k_R) = (0.05, 0.05)$，来启动迭代优化过程。请注意，无限大的缩放常数 $s_L, s_R$ 是通过从残差向量中排除相应项来处理的，这实际上是给它们在目标函数中分配了零权重。\n\n3.  **RMSE计算**：找到最优参数 $(k_L^*, k_R^*)$ 后，计算均方根误差（RMSE）。它定义为无量纲残差平方的均值的平方根。如果 $J^*$ 是最小化的平方和，$M$ 是残差条目的总数（在所有时间点和包含的观测值上求和），则RMSE由下式给出：\n    $$\n    \\text{RMSE} = \\sqrt{\\frac{J^*}{M}}\n    $$\n\n4.  **局部结构可辨识性分析**：此分析评估参数是否可以从给定的数据和模型结构中唯一确定，至少在估计的最优值附近是如此。它依赖于敏感性（雅可比）矩阵 $\\mathbf{J}$，该矩阵包含残差向量关于每个参数的偏导数，并在最优参数值处进行评估。\n    $$\n    \\mathbf{J}_{ij} = \\frac{\\partial r_i}{\\partial p_j} \\bigg|_{(k_L^*, k_R^*)}\n    $$\n    `scipy.optimize.least_squares` 函数方便地提供了该矩阵的数值近似。\n    - **秩**：局部可辨识性对于 $n$ 个参数的一个必要条件是雅可比矩阵具有满列秩（即 $\\operatorname{rank}(\\mathbf{J}) = n$）。在此问题中，有两个参数 $(k_L, k_R)$，因此我们要求 $\\operatorname{rank}(\\mathbf{J}) = 2$。这意味着参数对模型输出具有线性无关的影响。秩是使用奇异值分解（SVD）稳健地计算的。\n    - **条件数**：如果满足秩条件，条件数 $\\kappa(\\mathbf{J})$ 提供了解对数据微小变化的敏感性度量。它是 $\\mathbf{J}$ 的最大奇异值与最小奇异值之比。一个非常大的条件数表明问题是病态的，意味着即使数据中存在少量噪声也可能导致估计参数发生巨大变化。问题指定了一个 $10^8$ 的阈值。\n\n    当且仅当 $\\operatorname{rank}(\\mathbf{J}) = 2$ 且 $\\kappa(\\mathbf{J}) < 10^8$ 时，参数对被声明为局部可辨识。\n\n实现将根据此方法处理三个指定的测试用例中的每一个，计算最优参数、RMSE和可辨识性状态，并按要求格式化结果。\n- **用例1**：在所有三个可观测量都被加权的情况下，模型参数对输出有不同的影响，从而得到一个良态的雅可比矩阵和成功的参数恢复。\n- **用例2**：仅通过观测NSC浓度 $C_t$，我们失去了区分 $k_L$ 和 $k_R$ 对生长的各自贡献的能力。NSC动态仅取决于它们的和 $k_L + k_R$。因此，雅可比矩阵的列变得线性相关，其秩降为1，参数变得不可辨识。\n- **用例3**：在初始NSC为零且无同化作用的情况下，不会发生生长。模型输出变为常数，且与 $k_L$ 和 $k_R$ 无关。对于任何参数值，残差都恒为零，这使得雅可比矩阵成为一个零矩阵。其秩为0，参数不可辨识。优化器将简单地返回其初始猜测值。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import least_squares\n\ndef run_simulation(k, initial_conditions, A_series):\n    \"\"\"\n    Simulates the plant growth model over time.\n    \"\"\"\n    k_L, k_R = k\n    L0, R0, N0 = initial_conditions\n    T_steps = len(A_series)\n\n    # T+1 time points: from t=0 to t=T_steps\n    L = np.zeros(T_steps + 1)\n    R = np.zeros(T_steps + 1)\n    N = np.zeros(T_steps + 1)\n    C = np.zeros(T_steps + 1)\n\n    L[0], R[0], N[0] = L0, R0, N0\n    \n    # Handle potential division by zero, though not expected with problem data.\n    if L[0] + R[0] > 0:\n        C[0] = 1000.0 * N[0] / (L[0] + R[0])\n    else:\n        C[0] = 0.0\n\n    for t in range(T_steps):\n        L[t + 1] = L[t] + k_L * N[t]\n        R[t + 1] = R[t] + k_R * N[t]\n        N[t + 1] = N[t] + A_series[t] - (k_L + k_R) * N[t]\n        \n        # Ensure NSC mass is non-negative, a physiological constraint.\n        N[t + 1] = max(0.0, N[t + 1])\n\n        if L[t + 1] + R[t + 1] > 0:\n            C[t + 1] = 1000.0 * N[t + 1] / (L[t + 1] + R[t + 1])\n        else:\n            C[t + 1] = 0.0\n\n    return L, R, C\n\ndef process_case(case_params):\n    \"\"\"\n    Solves one test case: data generation, optimization, and analysis.\n    \"\"\"\n    A = case_params['A']\n    initial_cond = case_params['initial_conditions']\n    true_params = case_params['true_params']\n    scales = case_params['scales']\n    \n    # 1. Generate observational data\n    L_obs, R_obs, C_obs = run_simulation(true_params, initial_cond, A)\n    obs_data = {'L': L_obs, 'R': R_obs, 'C': C_obs}\n    \n    s_L, s_R, s_C = scales['s_L'], scales['s_R'], scales['s_C']\n    \n    # 2. Define residual function for the optimizer\n    def residual_function(k):\n        L_pred, R_pred, C_pred = run_simulation(k, initial_cond, A)\n        \n        residuals = []\n        if np.isfinite(s_L):\n            residuals.append((L_pred - obs_data['L']) / s_L)\n        if np.isfinite(s_R):\n            residuals.append((R_pred - obs_data['R']) / s_R)\n        if np.isfinite(s_C):\n            residuals.append((C_pred - obs_data['C']) / s_C)\n            \n        return np.concatenate(residuals)\n\n    # 3. Parameter Estimation using constrained least squares\n    initial_guess = [0.05, 0.05]\n    bounds = ([0.0, 0.0], [1.0, 1.0])\n    \n    result = least_squares(\n        residual_function,\n        initial_guess,\n        bounds=bounds,\n        method='trf',\n        jac='2-point'\n    )\n    \n    k_L_opt, k_R_opt = result.x\n    \n    # 4. RMSE Calculation\n    sum_sq_residuals = 2 * result.cost\n    \n    num_residuals = 0\n    num_time_points = len(A) + 1\n    if np.isfinite(s_L): num_residuals += num_time_points\n    if np.isfinite(s_R): num_residuals += num_time_points\n    if np.isfinite(s_C): num_residuals += num_time_points\n    \n    rmse = np.sqrt(sum_sq_residuals / num_residuals) if num_residuals > 0 else 0.0\n\n    # 5. Local Structural Identifiability Analysis\n    J_matrix = result.jac\n    identifiable = False\n    \n    # Check if the Jacobian is non-trivial before analysis\n    if J_matrix is not None and J_matrix.shape[1] == 2:\n        rank = np.linalg.matrix_rank(J_matrix)\n        \n        if rank == 2:\n            try:\n                # compute_uv=False is more efficient\n                singular_values = np.linalg.svd(J_matrix, compute_uv=False)\n                # s_min can be zero if rank is numerically < 2 but matrix_rank rounded up\n                if singular_values[1] > 1e-12: # Check for effective rank 2\n                    condition_number = singular_values[0] / singular_values[1]\n                    if condition_number < 1e8:\n                        identifiable = True\n            except (np.linalg.LinAlgError, IndexError):\n                # Error in SVD or not enough singular values\n                identifiable = False\n    \n    return [k_L_opt, k_R_opt, rmse, identifiable]\n\n\ndef solve():\n    \"\"\"\n    Main function to define test cases and generate the final output.\n    \"\"\"\n    test_suite = [\n        {\n            \"name\": \"Case 1: Informative\",\n            \"A\": [1.2, 1.5, 1.3, 1.1, 1.4, 1.0, 0.8],\n            \"initial_conditions\": (5.0, 5.0, 1.0),\n            \"true_params\": (0.08, 0.04),\n            \"scales\": {'s_L': 1.0, 's_R': 1.0, 's_C': 10.0}\n        },\n        {\n            \"name\": \"Case 2: Insufficient Observables\",\n            \"A\": [1.2, 1.5, 1.3, 1.1, 1.4, 1.0, 0.8],\n            \"initial_conditions\": (5.0, 5.0, 1.0),\n            \"true_params\": (0.08, 0.04),\n            \"scales\": {'s_L': np.inf, 's_R': np.inf, 's_C': 10.0}\n        },\n        {\n            \"name\": \"Case 3: No Dynamics\",\n            \"A\": [0.0, 0.0, 0.0, 0.0],\n            \"initial_conditions\": (4.0, 6.0, 0.0),\n            # True params are arbitrary as N=0\n            \"true_params\": (0.1, 0.1),\n            \"scales\": {'s_L': 1.0, 's_R': 1.0, 's_C': 1.0}\n        }\n    ]\n\n    all_results = []\n    for case in test_suite:\n        result = process_case(case)\n        # Format floating-point numbers to six decimal places\n        formatted_result = [\n            f\"{result[0]:.6f}\",\n            f\"{result[1]:.6f}\",\n            f\"{result[2]:.6f}\",\n            str(result[3])\n        ]\n        all_results.append(f\"[{','.join(formatted_result)}]\")\n\n    print(f\"[{','.join(all_results)}]\")\n\nsolve()\n\n```", "id": "2554157"}]}