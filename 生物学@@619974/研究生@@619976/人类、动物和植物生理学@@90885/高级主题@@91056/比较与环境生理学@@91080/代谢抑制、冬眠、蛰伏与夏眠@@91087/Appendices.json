{"hands_on_practices": [{"introduction": "本练习旨在解决夏眠或冬眠动物面临的一个基本挑战：在无法饮水的情况下如何保持水平衡。通过将化学计量学和能量平衡原理应用于一个假设情景，您将计算代谢水的产生如何抵消必要的水分流失——这是生存的关键适应机制。这项实践将加强您建立和分析整合的生物整体质量平衡模型的能力。", "problem": "一只初始总质量为 $M_0 = 1.000 \\,\\text{kg}$ 的夏眠小型哺乳动物，在一个密封的、温度恒定的洞穴中开始了为期 $30$ 天的夏眠，期间无法获取食物或液态水。该动物的初始总身体水分质量为 $W_0 = 0.600 \\,\\text{kg}$。假设储存的脂质足够丰富（初始脂质储存量 $F_0 = 0.150 \\,\\text{kg}$），因此在夏眠期间蛋白质和糖原的分解代謝可以忽略不计（即，忽略氮排泄和糖原转换）。因此，能量完全由储存的三酰甘油氧化提供。\n\n对该物种的生理测量表明，其正常体温下的每日能量消耗为 $E_{\\text{norm}} = 250 \\,\\text{kJ}\\cdot\\text{day}^{-1}$，其正常体温下的必要水分流失（肾脏、粪便和蒸发）为 $L_{\\text{norm}} = 20.0 \\,\\text{g}\\cdot\\text{day}^{-1}$。在夏眠期间，代谢率被抑制到正常体温水平的 $20\\%$，并且相对于正常体温状态，必要水分流失减少了 $90\\%$。没有水蒸气冷凝或外部水分输入；所有产生的、未保留在体液中的 $\\text{CO}_2$ 和水都流失到环境中。\n\n假设被氧化的脂质是三油酸甘油酯，其化学式为 $\\mathrm{C}_{57}\\mathrm{H}_{104}\\mathrm{O}_6$。使用化学计量学方法确定每克三油酸甘油酯氧化产生的代谢水质量。三油酸甘油酯的燃烧热可取为 $39.6 \\,\\text{kJ}\\cdot\\text{g}^{-1}$。原子质量为：$\\text{C}=12$, $\\text{H}=1$, $\\text{O}=16$（单位为 $\\text{g}\\cdot\\text{mol}^{-1}$）。\n\n仅使用质量守恒和能量守恒定律以及上述信息，计算夏眠 $30$ 天后的身体水分分数，该分数定义为比率 $W_{30}/M_{30}$，其中 $W_{30}$ 是第 $30$ 天的总身体水分质量，$M_{30}$ 是第 $30$ 天的总体重。将最终答案表示为 $0$ 和 $1$ 之间的小数，并四舍五入到四位有效数字。不要使用百分号。", "solution": "该问题要求计算经过 $30$ 天夏眠期后的最终身体水分分数，该分数定义为总身体水分质量与总体重之比，即 $W_{30}/M_{30}$。求解过程涉及应用质量守恒和能量守恒原理。\n\n首先，我们必须确定夏眠期间的生理参数。已知正常体温下的每日能量消耗为 $E_{\\text{norm}} = 250 \\,\\text{kJ}\\cdot\\text{day}^{-1}$。在夏眠期间，代谢率被抑制到正常体温水平的 $20\\%$。因此，夏眠期间的每日能量消耗 $E_{\\text{est}}$ 为：\n$$E_{\\text{est}} = 0.20 \\times E_{\\text{norm}} = 0.20 \\times 250 \\,\\text{kJ}\\cdot\\text{day}^{-1} = 50 \\,\\text{kJ}\\cdot\\text{day}^{-1}$$\n\n同样，正常体温下的必要水分流失为 $L_{\\text{norm}} = 20.0 \\,\\text{g}\\cdot\\text{day}^{-1}$。在夏眠期间，该流失减少了 $90\\%$。夏眠期间的每日水分流失 $L_{\\text{est}}$ 为：\n$$L_{\\text{est}} = (1 - 0.90) \\times L_{\\text{norm}} = 0.10 \\times 20.0 \\,\\text{g}\\cdot\\text{day}^{-1} = 2.0 \\,\\text{g}\\cdot\\text{day}^{-1}$$\n\n夏眠期持续时间为 $t = 30 \\,\\text{days}$。现在我们可以计算在此期间消耗的总能量和流失的总水分。\n总能量消耗为：\n$$\\Delta E_{\\text{total}} = E_{\\text{est}} \\times t = 50 \\,\\text{kJ}\\cdot\\text{day}^{-1} \\times 30 \\,\\text{days} = 1500 \\,\\text{kJ}$$\n总必要水分流失为：\n$$\\Delta W_{\\text{lost}} = L_{\\text{est}} \\times t = 2.0 \\,\\text{g}\\cdot\\text{day}^{-1} \\times 30 \\,\\text{days} = 60.0 \\,\\text{g}$$\n\n能量完全由储存的三油酸甘油酯氧化提供，其燃烧热为 $h_c = 39.6 \\,\\text{kJ}\\cdot\\text{g}^{-1}$。消耗的脂质（脂肪）总质量 $\\Delta F$ 为：\n$$\\Delta F = \\frac{\\Delta E_{\\text{total}}}{h_c} = \\frac{1500 \\,\\text{kJ}}{39.6 \\,\\text{kJ}\\cdot\\text{g}^{-1}} \\approx 37.879 \\,\\text{g}$$\n初始脂质储存量为 $F_0 = 0.150 \\,\\text{kg} = 150 \\,\\text{g}$，这是足够的。\n\n接下来，我们确定这种脂质氧化产生的代谢水质量。三油酸甘油酯的化学式为 $\\mathrm{C}_{57}\\mathrm{H}_{104}\\mathrm{O}_6$。其完全氧化的配平化学方程式为：\n$$\\mathrm{C}_{57}\\mathrm{H}_{104}\\mathrm{O}_6 + 80\\,\\mathrm{O}_2 \\longrightarrow 57\\,\\mathrm{CO}_2 + 52\\,\\mathrm{H}_2\\mathrm{O}$$\n我们使用给定的原子质量（$\\text{C}=12 \\,\\text{g}\\cdot\\text{mol}^{-1}$，$\\text{H}=1 \\,\\text{g}\\cdot\\text{mol}^{-1}$，$\\text{O}=16 \\,\\text{g}\\cdot\\text{mol}^{-1}$）计算摩尔质量。\n三油酸甘油酯的摩尔质量，$M_{\\text{triolein}} = (57 \\times 12) + (104 \\times 1) + (6 \\times 16) = 684 + 104 + 96 = 884 \\,\\text{g}\\cdot\\text{mol}^{-1}$。\n水的摩尔质量，$M_{\\text{H}_2\\text{O}} = (2 \\times 1) + 16 = 18 \\,\\text{g}\\cdot\\text{mol}^{-1}$。\n\n根据化学计量关系，氧化 $1$ 摩尔（$884 \\,\\text{g}$）的三油酸甘油酯会产生 $52$ 摩尔的水。产生的水的质量为 $52 \\times 18 \\,\\text{g} = 936 \\,\\text{g}$。\n每克被氧化的脂质产生的代谢水的产率 $y_W$ 为：\n$$y_W = \\frac{52 \\times M_{\\text{H}_2\\text{O}}}{M_{\\text{triolein}}} = \\frac{936 \\,\\text{g}}{884 \\,\\text{g}} \\approx 1.0588 \\,\\text{g}_{\\text{H}_2\\text{O}}/\\text{g}_{\\text{lipid}}$$\n产生的代谢水总质量 $\\Delta W_{\\text{prod}}$ 为：\n$$\\Delta W_{\\text{prod}} = \\Delta F \\times y_W = \\left(\\frac{1500}{39.6}\\right) \\times \\left(\\frac{936}{884}\\right) \\,\\text{g} \\approx 40.109 \\,\\text{g}$$\n\n现在我们可以计算最终的身体水分质量 $W_{30}$ 和最终的总体重 $M_{30}$。\n初始身体水分质量为 $W_0 = 0.600 \\,\\text{kg} = 600 \\,\\text{g}$。最终水分质量等于初始质量加上产生的水量，减去流失的水量。\n$$W_{30} = W_0 + \\Delta W_{\\text{prod}} - \\Delta W_{\\text{lost}}$$\n$$W_{30} = 600 \\,\\text{g} + 40.109... \\,\\text{g} - 60.0 \\,\\text{g} = 580.109... \\,\\text{g}$$\n\n最终的总体重 $M_{30}$ 可以通过考虑动物身体成分质量的变化来计算。动物的总质量因脂肪质量的损失和水分质量的净变化而改变。\n其中 $M_0 = 1.000 \\,\\text{kg} = 1000 \\,\\text{g}$。\n代入数值：\n$$M_{30} = 1000 \\,\\text{g} - 37.878... \\,\\text{g} + (40.109... \\,\\text{g} - 60.0 \\,\\text{g})$$\n$$M_{30} = 1000 \\,\\text{g} - 37.878... \\,\\text{g} - 19.890... \\,\\text{g} = 942.230... \\,\\text{g}$$\n\n最后，我们计算身体水分分数 $W_{30}/M_{30}$：\n$$\\frac{W_{30}}{M_{30}} = \\frac{580.109... \\,\\text{g}}{942.230... \\,\\text{g}} \\approx 0.615672$$\n\n按照要求四舍五入到四位有效数字，最终答案是 $0.6157$。", "answer": "$$\\boxed{0.6157}$$", "id": "2582683"}, {"introduction": "当动物体温下降时，其血浆的化学性质，包括气体溶解度和缓冲液的解离常数，都会发生显著变化。本练习探讨这些变化如何影响血液 $\\text{pH}$ 值，并介绍生物在低温下用于管理酸碱稳态的两种主要策略：alpha-stat策略和 pH-stat策略。解决这个问题将使您能够在动态、温度依赖的背景下应用亨德森-哈塞尔巴尔赫方程，这对于理解变温动物和冬眠动物的生理学至关重要。[@problem_id:2582683]", "problem": "一只正在进行深度冬眠的潜水恒温哺乳动物，在没有代谢（肾脏）补偿的情况下，从正常体温的核心温度 $37\\,^{\\circ}\\text{C}$ 冷却到 $5\\,^{\\circ}\\text{C}$，因此在冷却过程中，其血浆碳酸氢盐浓度基本保持不变。假设血浆离子强度不变，且血浆中二氧化碳-碳酸氢盐缓冲体系的表观第一解离常数 $\\text{p}K'_1$ 和二氧化碳的溶解度系数 $\\alpha_{\\text{CO}_2}$ 随温度变化如下：\n- 在 $37\\,^{\\circ}\\text{C}$ 时：$\\text{p}K'_1 = 6.10$，$\\alpha_{\\text{CO}_2} = 0.0307\\,\\text{mmol}\\cdot\\text{L}^{-1}\\cdot\\text{mmHg}^{-1}$。\n- 在 $5\\,^{\\circ}\\text{C}$ 时：$\\text{p}K'_1 = 6.58$，$\\alpha_{\\text{CO}_2} = 0.0700\\,\\text{mmol}\\cdot\\text{L}^{-1}\\cdot\\text{mmHg}^{-1}$。\n\n在 $37\\,^{\\circ}\\text{C}$ 时，该动物的稳态动脉血值为 $[\\text{HCO}_3^-] = 24\\,\\text{mmol}\\cdot\\text{L}^{-1}$ 和 $P_{\\text{aCO}_2} = 40\\,\\text{mmHg}$。冷却至 $5\\,^{\\circ}\\text{C}$ 后，假设 $[\\text{HCO}_3^-]$ 保持在 $24\\,\\text{mmol}\\cdot\\text{L}^{-1}$，并且质量作用定律和亨利定律在两种温度下均适用。\n\n使用以下基本原理：\n- 缓冲对 $\\text{CO}_2\\text{(aq)} + \\text{H}_2\\text{O} \\rightleftharpoons \\text{H}^+ + \\text{HCO}_3^-$ 的质量作用定律，其随温度变化的表观平衡常数为 $K'_1$。\n- 关于溶解二氧化碳的亨利定律，$[\\text{CO}_2\\text{(aq)}] = \\alpha_{\\text{CO}_2}\\,P_{\\text{CO}_2}$。\n- 由此推导出的该缓冲对的亨德森-哈塞尔巴尔赫关系式，$\\text{pH} = \\text{p}K'_1 + \\log_{10}\\!\\big([\\text{HCO}_3^-]/(\\alpha_{\\text{CO}_2}\\,P_{\\text{CO}_2})\\big)$。\n\n在冷却至 $5\\,^{\\circ}\\text{C}$ 时，考虑以下两种通气策略：\n- Alpha-stat策略：不调节通气以将血气校正至体温水平，因此实际上 $P_{\\text{aCO}_2}$ 保持在正常碳酸血症的设定点；为进行本计算，在 $5\\,^{\\circ}\\text{C}$ 时，将在亨德森-哈塞尔巴尔赫关系式中使用的动脉分压取为 $P_{\\text{aCO}_2} = 40\\,\\text{mmHg}$。\n- pH-stat策略：调节通气（或吸入的二氧化碳）以将在动物体温下测量的动脉 $\\text{pH}$ 值钳制在其正常体温时的值。对于此策略，在 $5\\,^{\\circ}\\text{C}$ 时强制设定 $\\text{pH} = 7.40$。\n\n仅从所述的基本原理和假设出发，推导所需的表达式，并计算在 pH-stat策略下，为在 $5\\,^{\\circ}\\text{C}$ 时维持 $\\text{pH} = 7.40$ 所必须达到的动脉二氧化碳分压 $P_{\\text{aCO}_2}$（以 $\\text{mmHg}$ 为单位）。将您的答案四舍五入至三位有效数字，并以 $\\text{mmHg}$ 为单位表示。\n\n作为背景，您可以使用相同的关系式来评估在 alpha-stat策略下 $5\\,^{\\circ}\\text{C}$ 时的动脉 $\\text{pH}$ 值，但最终报告的答案必须是在 $5\\,^{\\circ}\\text{C}$ 时 pH-stat策略所需的 $P_{\\text{aCO}_2}$ 的单一值。", "solution": "所提出的问题被判定为有效。它有科学根据、提问清晰，并包含得出唯一解所需的所有信息。我们将着手进行分析。\n\n血浆二氧化碳-碳酸氢盐缓冲体系的核心控制原理是题目中给出的亨德森-哈塞尔巴尔赫方程：\n$$\n\\text{pH} = \\text{p}K'_1 + \\log_{10}\\!\\left(\\frac{[\\text{HCO}_3^-]}{\\alpha_{\\text{CO}_2}\\,P_{\\text{CO}_2}}\\right)\n$$\n其中，$\\text{p}K'_1$ 是碳酸的表观第一解离常数，$[\\text{HCO}_3^-]$ 是碳酸氢盐浓度，$\\alpha_{\\text{CO}_2}$ 是二氧化碳在血浆中的溶解度，而 $P_{\\text{CO}_2}$ 是二氧化碳的分压。\n\n首先，我们验证在核心温度 $T_1 = 37\\,^{\\circ}\\text{C}$ 时的初始正常体温状态。给定值为：\n- $\\text{p}K'_{1, T_1} = 6.10$\n- $\\alpha_{\\text{CO}_2, T_1} = 0.0307\\,\\text{mmol}\\cdot\\text{L}^{-1}\\cdot\\text{mmHg}^{-1}$\n- $[\\text{HCO}_3^-]_{T_1} = 24\\,\\text{mmol}\\cdot\\text{L}^{-1}$\n- $P_{\\text{aCO}_2, T_1} = 40\\,\\text{mmHg}$\n\n将这些值代入亨德森-哈塞尔巴尔赫方程，得出动脉 pH 值，$\\text{pH}_{\\text{a}, T_1}$：\n$$\n\\text{pH}_{\\text{a}, T_1} = 6.10 + \\log_{10}\\!\\left(\\frac{24}{0.0307 \\times 40}\\right) = 6.10 + \\log_{10}\\!\\left(\\frac{24}{1.228}\\right) \\approx 6.10 + \\log_{10}(19.544) \\approx 6.10 + 1.291 = 7.391\n$$\n该值与标准生理动脉 $\\text{pH}$ 值 $7.40$ 相符。\n\n接下来，我们分析冷却至 $T_2 = 5\\,^{\\circ}\\text{C}$ 后的状态。题目指出，由于没有肾脏补偿，碳酸氢盐浓度不变，因此 $[\\text{HCO}_3^-]_{T_2} = 24\\,\\text{mmol}\\cdot\\text{L}^{-1}$。在 $T_2 = 5\\,^{\\circ}\\text{C}$ 时与温度相关的常数给定为：\n- $\\text{p}K'_{1, T_2} = 6.58$\n- $\\alpha_{\\text{CO}_2, T_2} = 0.0700\\,\\text{mmol}\\cdot\\text{L}^{-1}\\cdot\\text{mmHg}^{-1}$\n\n问题要求计算在 pH-stat策略下所需的动脉 $P_{\\text{CO}_2}$。该策略规定，在动物体温（$5\\,^{\\circ}\\text{C}$）下测量的动脉 $\\text{pH}$ 值必须维持在其正常体温时的值。题目将此目标 $\\text{pH}$ 指定为 $7.40$。\n因此，在 $T_2 = 5\\,^{\\circ}\\text{C}$ 时的 pH-stat条件下，我们有：\n- $\\text{pH}_{\\text{a}, T_2} = 7.40$\n- $[\\text{HCO}_3^-]_{T_2} = 24\\,\\text{mmol}\\cdot\\text{L}^{-1}$\n- $\\text{p}K'_{1, T_2} = 6.58$\n- $\\alpha_{\\text{CO}_2, T_2} = 0.0700\\,\\text{mmol}\\cdot\\text{L}^{-1}\\cdot\\text{mmHg}^{-1}$\n\n我们的目标是求出所需的 $P_{\\text{aCO}_2}$，我们将其表示为 $P_{\\text{aCO}_2, \\text{pH-stat}}$。我们必须重新整理亨德森-哈塞尔巴尔赫方程以求解 $P_{\\text{aCO}_2}$：\n$$\n\\text{pH} - \\text{p}K'_1 = \\log_{10}\\!\\left(\\frac{[\\text{HCO}_3^-]}{\\alpha_{\\text{CO}_2}\\,P_{\\text{aCO}_2}}\\right)\n$$\n以 10 为底对两边取幂：\n$$\n10^{(\\text{pH} - \\text{p}K'_1)} = \\frac{[\\text{HCO}_3^-]}{\\alpha_{\\text{CO}_2}\\,P_{\\text{aCO}_2}}\n$$\n求解 $P_{\\text{aCO}_2}$：\n$$\nP_{\\text{aCO}_2} = \\frac{[\\text{HCO}_3^-]}{\\alpha_{\\text{CO}_2} \\cdot 10^{(\\text{pH} - \\text{p}K'_1)}}\n$$\n现在，我们将 $T_2 = 5\\,^{\\circ}\\text{C}$ 时 pH-stat策略的数值代入：\n$$\nP_{\\text{aCO}_2, \\text{pH-stat}} = \\frac{24\\,\\text{mmol}\\cdot\\text{L}^{-1}}{(0.0700\\,\\text{mmol}\\cdot\\text{L}^{-1}\\cdot\\text{mmHg}^{-1}) \\cdot 10^{(7.40 - 6.58)}}\n$$\n计算过程如下：\n$$\nP_{\\text{aCO}_2, \\text{pH-stat}} = \\frac{24}{0.0700 \\cdot 10^{0.82}}\n$$\n我们计算指数项：$10^{0.82} \\approx 6.6069$。\n$$\nP_{\\text{aCO}_2, \\text{pH-stat}} \\approx \\frac{24}{0.0700 \\times 6.6069} = \\frac{24}{0.46248} \\approx 51.9056\\,\\text{mmHg}\n$$\n作为背景信息，如果动物遵循 alpha-stat策略，其 $P_{\\text{aCO}_2}$ 将保持在 $40\\,\\text{mmHg}$。在 $5\\,^{\\circ}\\text{C}$ 时得到的 $\\text{pH}$ 将是：\n$$\n\\text{pH}_{\\text{alpha-stat}} = 6.58 + \\log_{10}\\!\\left(\\frac{24}{0.0700 \\times 40}\\right) = 6.58 + \\log_{10}\\!\\left(\\frac{24}{2.8}\\right) \\approx 6.58 + 0.933 = 7.513\n$$\n这表明，在较低体温下测量时，alpha-stat策略会导致呼吸性碱中毒。为了抵消这种效应并将 pH 维持在 $7.40$，pH-stat策略要求将 $P_{\\text{aCO}_2}$ 提高到高于正常体温值 $40\\,\\text{mmHg}$，这与我们的计算结果一致。\n\n问题要求将 $P_{\\text{aCO}_2, \\text{pH-stat}}$ 的最终答案四舍五入到三位有效数字。\n$$\nP_{\\text{aCO}_2, \\text{pH-stat}} \\approx 51.9\\,\\text{mmHg}\n$$\n这就是在给定条件下，为了在 $5\\,^{\\circ}\\text{C}$ 的低温状态下达到 $7.40$ 的 pH 值，所必须建立的动脉二氧化碳分压。", "answer": "$$\n\\boxed{51.9}\n$$", "id": "2582742"}, {"introduction": "进入代谢抑制状态通常不是一个渐进的过程，而是一个快速的、开关般的事件。这个高阶计算实践深入探讨了这种开关背后的分子逻辑，使用常微分方程组来模拟两种关键代谢调节因子AMPK和mTOR之间的相互抑制作用。通过探索该网络如何产生双稳态，您将深入了解细胞如何在高代谢和低代谢状态之间做出“全或无”的决定性转换，从而为蛰伏的启动提供了潜在的机理基础。[@problem_id:2582742]", "problem": "您被要求形式化并计算一个机制性的动力系统判据，用于描述通过AMP活化蛋白激酶（AMPK）和机制性雷帕霉素靶蛋白（mTOR）之间的拮抗信号传导，实现开关样地进入蛰眠状态的过程。请基于以下基本原理进行建模：(i) 中心法则意味着酶的浓度和活性可以在粗粒度水平上通过产生和降解来建模；(ii) 当协同相互作用是抑制的基础时，酶促信号传导层面的相互抑制可以用S型抑制函数来描述；(iii) 带有Hill型抑制的常微分方程（ODE）可以在稳态下近似此类信号传导动力学。本问题中的所有变量和参数均为无量纲。\n\n对能量应激输入 $S \\in [0,1]$ 条件下的AMPK活性（记为 $A(t)$）和mTOR活性（记为 $M(t)$）的动力学进行建模，其中 $S=0$ 表示低应激，$S=1$ 表示高应激。使用以下ODE系统：\n$$\n\\frac{dA}{dt} = k_A \\left( S + (1 - S)\\,\\frac{1}{1 + \\left(\\frac{M}{\\theta_M}\\right)^{n}} \\right) - \\gamma_A A,\n\\qquad\n\\frac{dM}{dt} = k_M \\left( (1 - S)\\,\\frac{1}{1 + \\left(\\frac{A}{\\theta_A}\\right)^{n}} \\right) - \\gamma_M M.\n$$\n此处，$n \\ge 1$ 是Hill系数（协同性），$k_A$ 和 $k_M$ 是最大产出速率，$\\gamma_A$ 和 $\\gamma_M$ 是一阶降解速率，$\\theta_A$ 和 $\\theta_M$ 是抑制阈值。Hill抑制函数为 $h(x;\\theta,n) = \\left(1 + \\left(\\frac{x}{\\theta}\\right)^n\\right)^{-1}$。\n\n任务：对于给定的一组参数 $\\{n, k_A, k_M, \\theta_A, \\theta_M, \\gamma_A, \\gamma_M\\}$，当能量应激参数 $S$ 变化时，系统可能表现出双稳态，对应于两个不同的稳定稳态（吸引子）：一个高 $M$ 值、低 $A$ 值的活性态，以及一个高 $A$ 值、低 $M$ 值的抑制态（类蛰眠态）。您的目标是在一个固定的 $S$ 值网格上，通过计算来确定双稳态的范围。具体来说，对于每组参数，需要计算网格\n$$\n\\mathcal{S} = \\{ 0.00, 0.05, 0.10, \\dots, 0.95, 1.00 \\}\n$$\n中有多少个应激水平使得该ODE系统存在至少两个不同的稳定不动点。\n\n科学依据与约束：您的程序必须实现一种有原则的方法，通过结合以下几点，来确定在每个 $S \\in \\mathcal{S}$ 下不同稳定不动点的数量：\n- 存在性搜索：从覆盖一个基于产出与降解速率之比（例如，$A \\lesssim \\frac{k_A}{\\gamma_A}$，$M \\lesssim \\frac{k_M}{\\gamma_M}(1-S)$）的合理边界框的初始条件 $(A(0), M(0))$ 网格出发，对ODE进行数值积分，直至收敛到稳态，以发现候选的吸引子。\n- 稳定性检验：对于固定的 $S$ 值下的一个候选不动点 $(A^\\ast, M^\\ast)$，计算其雅可比矩阵\n$$\nJ(A^\\ast,M^\\ast;S) =\n\\begin{pmatrix}\n-\\gamma_A & k_A(1-S)\\,\\frac{\\partial}{\\partial M}\\left[\\frac{1}{1 + \\left(\\frac{M}{\\theta_M}\\right)^{n}}\\right]\\bigg|_{M=M^\\ast} \\\\\nk_M(1-S)\\,\\frac{\\partial}{\\partial A}\\left[\\frac{1}{1 + \\left(\\frac{A}{\\theta_A}\\right)^{n}}\\right]\\bigg|_{A=A^\\ast} & -\\gamma_M\n\\end{pmatrix}\n$$\n并当 $J$ 的所有特征值都具有负实部时，将该不动点归类为稳定。使用精确导数\n$$\n\\frac{d}{dx}\\left[\\frac{1}{1 + \\left(\\frac{x}{\\theta}\\right)^{n}}\\right] = -\\frac{n}{\\theta}\\,\\frac{\\left(\\frac{x}{\\theta}\\right)^{n-1}}{\\left(1 + \\left(\\frac{x}{\\theta}\\right)^{n}\\right)^{2}}.\n$$\n- 区分性判据：从不同初始条件达到的不动点应进行聚类，如果两个不动点在 $(A,M)$ 空间中的欧几里得距离超过一个小的容差（例如 $10^{-4}$），则认为它们是不同的。\n\n您的程序必须将此方法统一应用于每个 $S \\in \\mathcal{S}$，并为每组参数返回存在至少两个不同稳定不动点的 $S$ 值的整数计数。\n\n测试套件：您的程序必须硬编码并评估以下参数集，每组都表示为一个元组 $(n, k_A, k_M, \\theta_A, \\theta_M, \\gamma_A, \\gamma_M)$：\n- 情况1（对称，强协同性）：$(4, 3.0, 3.0, 0.5, 0.5, 1.0, 1.0)$。\n- 情况2（弱协同性）：$(1, 3.0, 3.0, 0.5, 0.5, 1.0, 1.0)$。\n- 情况3（不对称阈值和降解）：$(3, 2.0, 2.0, 0.3, 0.8, 1.0, 1.2)$。\n- 情况4（强产出和协同性）：$(5, 5.0, 4.0, 0.4, 0.4, 1.0, 1.0)$。\n\n输出规范：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，例如 $[r_1,r_2,r_3,r_4]$，其中 $r_i$ 是情况 $i$ 在 $\\mathcal{S}$ 中具有至少两个不同稳定平衡点的 $S$ 值的整数数量。输出行中不允许有空格。所有变量和参数都是无量纲的，因此不需要物理单位。未使用角度。百分比必须作为小数处理；指定的网格 $\\mathcal{S}$ 已使用小数表示法。", "solution": "该问题提出了计算系统生物学中一个有效且定义明确的任务。它在科学上基于建模生物化学网络的既定原则，特别是使用具有Hill型动力学的常微分方程（ODE）来表示像AMPK和mTOR所涉及的信号通路中的相互抑制。该问题是适定的，提供了所有必要的方程、参数，以及一个清晰、客观的求解步骤。它没有歧义、事实错误和非科学性主张。因此，可以构建一个合理的解决方案。\n\n目标是确定一个代谢调节模型在几组不同参数集下的双稳态范围。双稳态，即在给定一组外部条件下存在两个不同的稳定稳态，是产生开关样细胞响应的关键机制。在这里，外部条件是能量应激参数 $S$。支持双稳态的 $S$ 值的计数越高，表明开关机制越稳健。\n\n解决方案策略遵循规定的计算方法。对于四个参数情况中的每一种，我们遍历网格 $\\mathcal{S} = \\{ 0.00, 0.05, \\dots, 1.00 \\}$ 中的每个应激水平 $S$。在每个 $S$ 值下，我们必须找到给定ODE系统的不同稳定不动点的数量：\n$$\n\\frac{dA}{dt} = k_A \\left( S + (1 - S)\\,\\frac{1}{1 + \\left(\\frac{M}{\\theta_M}\\right)^{n}} \\right) - \\gamma_A A\n$$\n$$\n\\frac{dM}{dt} = k_M \\left( (1 - S)\\,\\frac{1}{1 + \\left(\\frac{A}{\\theta_A}\\right)^{n}} \\right) - \\gamma_M M\n$$\n然后统计存在至少两个此类稳定不动点的 $S$ 值的数量。\n\n为特定的 $S$ 和参数集识别稳定不动点的过程分为三步：\n\n1.  **通过数值积分进行存在性搜索**：通过从广泛的初始条件模拟系统演化，找到动力系统的吸引子（包括稳定不動点）。在一个由产出与降解速率之比定义的边界框内创建一个初始点 $(A(0), M(0))$ 网格，例如 $A \\in [0, 1.5 k_A / \\gamma_A]$ 和 $M \\in [0, 1.5 k_M / \\gamma_M]$。从每个初始点开始，对ODE系统进行足够长时间的数值积分（例如，$t \\in [0, 100]$，这远大于特征降解时间尺度 $1/\\gamma_A$ 和 $1/\\gamma_M$），以使系统稳定到稳态。系统在最终时间点的状态 $(A_{final}, M_{final})$ 是一个候选不動点。\n\n2.  **候选不动点的聚类**：处理从所有积分中获得的最终状态集，以识别出唯一的候选点。这是通过聚类完成的。使用一种迭代方法：维护一个唯一不动点的列表。对于每个新的候选点，计算其与唯一列表中已有的每个点的欧几里得距离。如果发现其与某个已有点的距离小于指定的容差 $10^{-4}$，则认为它是重复的并被丢弃。否则，它被添加到唯一不动点的列表中。\n\n3.  **通过雅可比矩阵进行稳定性分析**：然后对每个唯一的候选不动点 $(A^\\ast, M^\\ast)$ 进行线性稳定性测试。如果偏离不动点的微小扰动随时间衰减，则该不动点是稳定的。此条件等效于要求在不动点处评估的雅可比矩阵 $J$ 的所有特征值都具有负实部。雅可比矩阵是系统速率方程的一阶偏导数矩阵：\n$$\nJ(A^\\ast,M^\\ast;S) =\n\\begin{pmatrix}\n\\frac{\\partial}{\\partial A}\\left(\\frac{dA}{dt}\\right) & \\frac{\\partial}{\\partial M}\\left(\\frac{dA}{dt}\\right) \\\\\n\\frac{\\partial}{\\partial A}\\left(\\frac{dM}{dt}\\right) & \\frac{\\partial}{\\partial M}\\left(\\frac{dM}{dt}\\right)\n\\end{pmatrix}\\Bigg|_{(A^\\ast,M^\\ast)}\n$$\n对于给定的系统，雅可比矩阵的分量为：\n$$\nJ =\n\\begin{pmatrix}\n-\\gamma_A & k_A(1-S)\\,\\frac{d}{dM}h(M;\\theta_M,n)\\big|_{M^\\ast} \\\\\nk_M(1-S)\\,\\frac{d}{dA}h(A;\\theta_A,n)\\big|_{A^\\ast} & -\\gamma_M\n\\end{pmatrix}\n$$\n其中 $h(x;\\theta,n) = (1 + (x/\\theta)^n)^{-1}$ 是Hill抑制函数。所需的导数明确给出为：\n$$\n\\frac{d}{dx}h(x;\\theta,n) = -\\frac{n}{\\theta}\\,\\frac{\\left(\\frac{x}{\\theta}\\right)^{n-1}}{\\left(1 + \\left(\\frac{x}{\\theta}\\right)^{n}\\right)^{2}}\n$$\n我们为每个 $(A^\\ast, M^\\ast)$ 计算这个 $2 \\times 2$ 矩阵的特征值，并统计所有特征值实部均为负的点数。\n\n如果稳定不动点的数量为两个或更多，则认为系统在该 $S$ 值下是双稳态的。每个参数情况的最终答案是网格 $\\mathcal{S}$ 中表现出这种双稳态的 $S$ 值的总数。整个过程在提供的Python代码中实现。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef solve():\n    \"\"\"\n    Solves the problem of finding the extent of bistability in an AMPK/mTOR model.\n    \"\"\"\n    \n    # Test suite: each tuple is (n, k_A, k_M, theta_A, theta_M, gamma_A, gamma_M)\n    test_cases = [\n        (4, 3.0, 3.0, 0.5, 0.5, 1.0, 1.0),\n        (1, 3.0, 3.0, 0.5, 0.5, 1.0, 1.0),\n        (3, 2.0, 2.0, 0.3, 0.8, 1.0, 1.2),\n        (5, 5.0, 4.0, 0.4, 0.4, 1.0, 1.0),\n    ]\n\n    results = []\n\n    # S grid from 0.0 to 1.0 with a step of 0.05\n    S_grid = np.linspace(0.0, 1.0, 21)\n    \n    # ODE system definition\n    def odesystem(t, y, params, S):\n        n, kA, kM, thetaA, thetaM, gammaA, gammaM = params\n        A, M = y\n        \n        # Handle potential division by zero if thresholds are zero, though not in test cases.\n        h_M = 1.0 / (1.0 + (M / thetaM)**n) if thetaM > 0 else 0.0\n        h_A = 1.0 / (1.0 + (A / thetaA)**n) if thetaA > 0 else 0.0\n        \n        dAdt = kA * (S + (1.0 - S) * h_M) - gammaA * A\n        dMdt = kM * ((1.0 - S) * h_A) - gammaM * M\n        \n        return [dAdt, dMdt]\n\n    # Jacobian and stability check\n    def check_stability(point, params, S):\n        n, kA, kM, thetaA, thetaM, gammaA, gammaM = params\n        A_star, M_star = point\n        \n        # Derivative of Hill function: h'(x) = -n/theta * (x/theta)^(n-1) / (1+(x/theta)^n)^2\n        def hill_derivative(x, theta, n_coeff):\n            if theta == 0: return 0.0\n            ratio = x / theta\n            # Use np.power for safe handling of 0**(n-1) when n=1.\n            if ratio == 0 and n_coeff  1:\n                return -np.inf\n\n            if ratio == 0 and n_coeff == 1:\n                return -1.0 / (theta * (1.0 + ratio)**2)\n            \n            if ratio == 0 and n_coeff > 1:\n                return 0.0\n\n            numerator = - (n_coeff / theta) * np.power(ratio, n_coeff - 1.0)\n            denominator = (1.0 + np.power(ratio, n_coeff))**2\n            return numerator / denominator\n\n        dh_dM = hill_derivative(M_star, thetaM, n)\n        dh_dA = hill_derivative(A_star, thetaA, n)\n\n        J12 = kA * (1.0 - S) * dh_dM\n        J21 = kM * (1.0 - S) * dh_dA\n\n        jacobian = np.array([\n            [-gammaA, J12],\n            [J21, -gammaM]\n        ])\n        \n        eigenvalues = np.linalg.eigvals(jacobian)\n        \n        return np.all(np.real(eigenvalues)  0)\n\n    for case_params in test_cases:\n        n, kA, kM, thetaA, thetaM, gammaA, gammaM = case_params\n        bistable_s_count = 0\n\n        # Define bounding box for initial conditions\n        A_bound = 1.5 * kA / gammaA\n        M_bound = 1.5 * kM / gammaM\n        \n        # Grid of initial conditions\n        num_grid_points = 20\n        A0_vals = np.linspace(0, A_bound, num_grid_points)\n        M0_vals = np.linspace(0, M_bound, num_grid_points)\n\n        for S_val in S_grid:\n            candidate_points = []\n            \n            # Numerically integrate from each initial condition\n            t_span = [0, 100]\n            for A0 in A0_vals:\n                for M0 in M0_vals:\n                    y0 = [A0, M0]\n                    # LSODA is a good general-purpose solver\n                    sol = solve_ivp(odesystem, t_span, y0, method='LSODA', \n                                    args=(case_params, S_val), dense_output=True, rtol=1e-6, atol=1e-8)\n                    final_point = sol.y[:, -1]\n                    \n                    # Ensure non-negativity\n                    if final_point[0] >= 0 and final_point[1] >= 0:\n                         candidate_points.append(final_point)\n\n            # Cluster candidate points to find unique fixed points\n            tol = 1e-4\n            unique_points = []\n            if candidate_points:\n                unique_points.append(candidate_points[0])\n                for p in candidate_points[1:]:\n                    is_new = True\n                    for up in unique_points:\n                        if np.linalg.norm(p - up)  tol:\n                            is_new = False\n                            break\n                    if is_new:\n                        unique_points.append(p)\n            \n            # Count stable fixed points\n            stable_count = 0\n            for p in unique_points:\n                if check_stability(p, case_params, S_val):\n                    stable_count += 1\n            \n            if stable_count >= 2:\n                bistable_s_count += 1\n        \n        results.append(bistable_s_count)\n\n    # Print results in the specified format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2582744"}]}