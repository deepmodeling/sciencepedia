{"hands_on_practices": [{"introduction": "在深入研究联会复合体组装的复杂动态过程之前，一个关键的初始步骤是理解其规模。本练习提供了一个化学计量学思维的基础训练，让您能够估算整个染色体组所需的横向纤维总数 [@problem_id:2853887]。通过应用一个简单的线性密度模型，您将把一个纳米尺度的结构参数与整个基因组的构件清单联系起来，这在定量细胞生物学中是一种常见而有效的方法。", "problem": "在减数分裂前期I，同源染色体配对并组装联会复合体（SC），这是一种三联体蛋白质结构。SC的特点是具有规则间隔的横向纤维（TF），这些纤维桥接了配对同源染色体的侧向元件（LE）。设沿中央元件的相邻TF插入位点之间的平均轴向中心距为 $s$，设染色体片段的联会长度为 $L$。假设 $L \\gg s$，因此可以忽略染色体末端的边界校正，并假设为化学计量组装，即每个可用的轴向位点平均都被占据。\n\n从适用于线性结合位点晶格的第一性原理（即线性密度的定义为“单位长度上的数量”）出发，推导出一个表达式，用于计算沿长度为 $L$ 的联会片段所包含的TF的期望数量。然后将您的表达式应用于以下生物体，该生物体在粗线期（完全联会）时，其单倍体组具有两类染色体长度：\n- $k_{s} = 10$ 个短二价体，每个的联会长度为 $L_{s} = 30\\,\\mu\\mathrm{m}$，\n- $k_{\\ell} = 2$ 个长二价体，每个的联会长度为 $L_{\\ell} = 150\\,\\mu\\mathrm{m}$，\n- 平均TF轴向间距 $s = 0.10\\,\\mu\\mathrm{m}$。\n\n假设在该生物体中，$s$ 对所有染色体都是统一的。使用您推导的表达式，计算在这些条件下，单个减数分裂细胞核中所有二价体组装所需的TF总数。将最终数值答案表示为无单位的计数。无需四舍五入。最后，使用您的表达式简要解释，当总联会长度固定时与不固定时，TF总数如何随染色体长度多样性而变化。", "solution": "在尝试解答之前，对问题陈述进行验证。\n\n**步骤1：提取已知条件**\n- 相邻横向纤维（TF）插入位点之间的平均轴向中心距：$s$\n- 染色体片段的联会长度：$L$\n- 假设：$L \\gg s$\n- 假设：化学计量组装，每个可用的轴向位点平均都被占据。\n- 短二价体数量：$k_{s} = 10$\n- 短二价体的联会长度：$L_{s} = 30\\,\\mu\\mathrm{m}$\n- 长二价体数量：$k_{\\ell} = 2$\n- 长二价体的联会长度：$L_{\\ell} = 150\\,\\mu\\mathrm{m}$\n- 平均TF轴向间距：$s = 0.10\\,\\mu\\mathrm{m}$\n- 假设：$s$ 对所有染色体都是统一的。\n\n**步骤2：使用提取的已知条件进行验证**\n该问题具有科学依据，描述了联会复合体（SC）的组装过程，这是减数分裂中一个公认的结构。所提出的模型是生物物理学中的一个标准简化，将SC视为一维晶格。给定的参数在生物学上是合理的。问题提法很明确；它提供了所有必要的数据和假设（$L \\gg s$），以得出一个唯一的、有意义的解。语言客观、精确。该问题没有科学上的不健全、信息缺失或其他逻辑缺陷。\n\n**步骤3：结论与行动**\n该问题有效。将提供解答。\n\n第一步是推导沿长度为 $L$ 的联会染色体片段的横向纤维（TF）期望数量（表示为 $N_{TF}$）的表达式。问题指示从线性密度的定义开始。TF在一个线性晶格上组织，相邻位点之间的平均间距为 $s$。线性密度 $\\rho$ 定义为单位长度上的实体数量。对于每个长度为 $s$ 的区间，有一个TF位点，因此TF位点的密度为：\n$$ \\rho = \\frac{1}{s} $$\n沿长度 $L$ 的TF总数是线性密度与长度的乘积：\n$$ N_{TF} = \\rho \\times L $$\n代入 $\\rho$ 的表达式，我们得到TF数量的通用表达式：\n$$ N_{TF} = \\frac{L}{s} $$\n在给定条件 $L \\gg s$ 下，这个表达式是一个极好的近似，该条件允许我们忽略边界贡献（即，在位置 $0$ 和位置 $L$ 是否各有一个TF，这将产生 $L/s + 1$ 个TF）。对于大量的TF， $L/s$ 和 $L/s + 1$ 之间的差异可以忽略不计。\n\n接下来，将此表达式应用于给定的生物体，以计算单个减数分裂细胞核中的TF总数 $N_{total}$。该细胞核包含两类染色体。\n\n对于短二价体：\n- 二价体数量：$k_{s} = 10$\n- 每个的长度：$L_{s} = 30\\,\\mu\\mathrm{m}$\n单个短二价体的TF数量为 $N_{s} = \\frac{L_{s}}{s}$。所有短二价体的总数为 $k_{s} N_{s} = k_{s} \\frac{L_{s}}{s}$。\n\n对于长二价体：\n- 二价体数量：$k_{\\ell} = 2$\n- 每个的长度：$L_{\\ell} = 150\\,\\mu\\mathrm{m}$\n单个长二价体的TF数量为 $N_{\\ell} = \\frac{L_{\\ell}}{s}$。所有长二价体的总数为 $k_{\\ell} N_{\\ell} = k_{\\ell} \\frac{L_{\\ell}}{s}$。\n\nTF的总数 $N_{total}$ 是这两类染色体贡献的总和：\n$$ N_{total} = k_{s} \\frac{L_{s}}{s} + k_{\\ell} \\frac{L_{\\ell}}{s} $$\n提出公因子 $\\frac{1}{s}$：\n$$ N_{total} = \\frac{1}{s} (k_{s} L_{s} + k_{\\ell} L_{\\ell}) $$\n括号中的项 $(k_{s} L_{s} + k_{\\ell} L_{\\ell})$ 表示整个基因组的总联会长度 $L_{total}$。\n$$ L_{total} = (10 \\times 30\\,\\mu\\mathrm{m}) + (2 \\times 150\\,\\mu\\mathrm{m}) = 300\\,\\mu\\mathrm{m} + 300\\,\\mu\\mathrm{m} = 600\\,\\mu\\mathrm{m} $$\n现在，我们代入 $L_{total}$ 和 $s$ 的数值来计算 $N_{total}$。间距为 $s = 0.10\\,\\mu\\mathrm{m}$。\n$$ N_{total} = \\frac{600\\,\\mu\\mathrm{m}}{0.10\\,\\mu\\mathrm{m}} = 6000 $$\n长度单位（$\\mu\\mathrm{m}$）相互抵消，得到一个无单位的计数，符合要求。\n\n最后，题目要求我们解释TF总数如何随染色体长度多样性而变化。推导出的TF总数的公式是 $N_{total} = \\frac{L_{total}}{s}$，其中 $L_{total} = \\sum_{i} k_i L_i$ 是所有 $i$ 类染色体的总联会长度。\n\n这个表达式表明，$N_{total}$与总联会长度 $L_{total}$ 成正比，与平均TF间距 $s$ 成反比。关键是，该表达式仅取决于所有联会片段的长度*总和*，而与该总长度如何在单个染色体间分布无关。\n\n因此，对于固定的总联会长度 $L_{total}$，TF总数 $N_{total}$ 随染色体长度多样性的变化而**保持不变**。只要总联会长度相同，并且假设 $L \\gg s$ 对所有染色体都成立，那么一个含有许多短染色体的基因组所需的TF总数与一个含有少数长染色体的基因组所需的TF总数相同。如果总联会长度不固定，$N_{total}$ 仅随 $L_{total}$ 线性变化，并且仍然与染色体间的特定长度分布无关。", "answer": "$$\\boxed{6000}$$", "id": "2853887"}, {"introduction": "生物过程很少是确定性的；它们受到几率和概率的支配。本练习超越了简单的计数，旨在模拟突触起始的随机性，这一过程始于DNA双链断裂的形成 [@problem_id:2853902]。您将运用概率论的原理，特别是泊松过程，来计算核化位点的期望数量，从而为我们描绘出一幅关于联会复合体如何启动的更真实的图景。", "problem": "在减数分裂前期 I，考虑一个具有清晰蛋白质轴的单条染色体，DNA双链断裂 (DSB) 沿该轴发生。假设在联会复合体 (SC) 组装的背景下，以下基本模型假设成立：(i) DSB沿染色体轴的分布是一个均匀泊松点过程，其线性强度（密度）为每微米 $\\rho$ 个事件，因此对于任意轴长度 $\\Delta \\ell$，DSB的期望数是 $\\rho \\,\\Delta \\ell$，且不相交片段中的计数是独立的；(ii) 每个DSB以概率 $p$ 独立地成熟为一个联会起始位点，且此成熟过程足以引发一个SC起始事件；(iii) 该染色体的轴长度为 $L$。仅使用这些假设以及期望的标准性质，从第一性原理推导每个染色体上联会起始位点期望数的表达式（用 $p$、$\\rho$ 和 $L$ 表示），然后对一个 $\\rho = 2.35$ DSB/微米、$L = 58.2$ 微米、$p = 0.17$ 的染色体进行数值计算。将期望计数以纯数字形式报告（无单位），并将答案四舍五入至 $4$ 位有效数字。", "solution": "所述问题是有效的。它具有科学依据、问题明确且客观。它提出了一个关于染色体上随机事件的简化但标准的生物物理模型，该模型可以使用概率论的基本原理进行分析。所有必要的参数和假设均已提供。我们可以开始求解。\n\n设随机变量 $N_{DSB}$ 表示沿整个长度为 $L$ 的染色体轴上的双链断裂 (DSB) 总数。问题指出，DSB的发生是一个线性强度为 $\\rho$ 的均匀泊松点过程。对于在总长度 $L$ 上发生的此类过程，事件数 $N_{DSB}$ 服从参数为 $\\lambda = \\rho L$ 的泊松分布。\n$$ N_{DSB} \\sim \\text{Poisson}(\\rho L) $$\n服从泊松分布的随机变量的期望等于其率参数。因此，染色体上DSB的期望数为：\n$$ E[N_{DSB}] = \\rho L $$\n\n接下来，设 $N_{syn}$ 为表示联会起始位点数量的随机变量。根据问题陈述，每个DSB以概率 $p$ 独立地成熟为一个起始位点。这种情况描述了一个称为点过程的二项稀疏的过程。\n\n为了求出起始位点的期望数 $E[N_{syn}]$，我们将使用全期望定律。该定律指出，对于任意两个随机变量 $X$ 和 $Y$，$E[X] = E[E[X|Y]]$。在我们的问题中，可以写成：\n$$ E[N_{syn}] = E[E[N_{syn} | N_{DSB}]] $$\n\n首先，我们确定条件期望 $E[N_{syn} | N_{DSB}]$。我们以染色体上恰好有 $n$ 个DSB的事件为条件，即 $N_{DSB} = n$。由于这 $n$ 个DSB中的每一个都以概率 $p$ 独立地成为一个起始位点，因此在 $N_{DSB}=n$ 的条件下，起始位点的数量服从二项分布：\n$$ (N_{syn} | N_{DSB}=n) \\sim \\text{Binomial}(n, p) $$\n二项分布 $\\text{Binomial}(n, p)$ 的期望是 $np$。因此，条件期望为：\n$$ E[N_{syn} | N_{DSB}=n] = np $$\n这个关系对任何特定的值 $n$ 都成立。因此，我们可以将条件期望表示为随机变量 $N_{DSB}$ 的函数：\n$$ E[N_{syn} | N_{DSB}] = p \\cdot N_{DSB} $$\n\n现在，我们将此结果代回全期望定律：\n$$ E[N_{syn}] = E[p \\cdot N_{DSB}] $$\n根据期望的线性性质，常数 $p$ 可以被提出来：\n$$ E[N_{syn}] = p \\cdot E[N_{DSB}] $$\n我们已经确定 $E[N_{DSB}] = \\rho L$。将此代入方程，得到联会起始位点期望数的最终表达式：\n$$ E[N_{syn}] = p \\rho L $$\n这就是从第一性原理推导出的所需表达式。\n\n最后一步是使用给定值进行数值计算：$\\rho = 2.35$ DSBs/$\\mu$m，$L = 58.2$ $\\mu$m，及 $p = 0.17$。\n$$ E[N_{syn}] = (0.17) \\times (2.35) \\times (58.2) $$\n计算得出：\n$$ E[N_{syn}] = (0.3995) \\times (58.2) $$\n$$ E[N_{syn}] = 23.2509 $$\n问题要求答案四舍五入至 $4$ 位有效数字。计算值为 $23.2509$。第五位有效数字是 $0$，因此我们向下取整。\n$$ E[N_{syn}] \\approx 23.25 $$\n这就是给定染色体上联会起始位点的期望计数。", "answer": "$$\n\\boxed{23.25}\n$$", "id": "2853902"}, {"introduction": "定量建模的最终目标通常是将理论与实验数据进行检验，并从中提取关键的生物物理参数。这项高级实践将挑战您从第一性原理推导出一个经典的联会复合体组装动力学成核-生长模型，并应用该模型分析延时成像数据 [@problem_id:2853839]。这个练习综合了物理学、数学和计算机科学的概念，体现了现代遗传学研究的跨学科性质。", "problem": "您的任务是推导并实现一个用于减数分裂联会期间联会复合体（SC）组装的一维成核-生长模型，并利用该模型从延时成像数据中估计动力学参数。请从适用于遗传学和组装过程生物物理建模的第一性原理出发。具体来说，假设沿着一维染色体轴，SC以一个恒定的单位长度单位时间成核速率（记为$J$，单位为$\\mathrm{\\mu m^{-1}\\,min^{-1}}$）成核。一旦成核，联会便以恒定的前沿速度$v$（单位为$\\mathrm{\\mu m\\,min^{-1}}$）双向传播，直到前沿相遇并停止（接触）。假设成核位置遵循时空泊松过程，并且生长中的区域之间除了接触之外不发生相互作用。在这些假设下，请从一个包含以下内容的最基本框架出发，推导覆盖动力学$C(t)$，它被定义为在时间$t$时被SC覆盖的染色体轴的分数（无量纲，范围在$[0,1]$内）：(i) 时空泊松过程的定义；(ii) 恒定速率成核和恒定速度双向生长；(iii) Kolmogorov关于扩展转变分数的思想，其中接触效应通过一个点保持未转变的概率来建模，该概率等于负的扩展分数的指数。任何简化公式都必须经过推导才能使用。\n\n然后，使用您推导的方程，实现一个程序，该程序可以根据给定的延时成像数据集来估计每个数据集的$J$和$v$。为确保参数的可识别性，我们还为您提供了基于动态谱（kymograph）的单个联会前沿随时间变化的位移数据；请使用这些数据通过回归直接估计$v$，然后从覆盖度的拟合中推断出$J$。\n\n您的算法必须：\n- 从所述假设出发，推导$C(t)$的关系式，不得直接使用预先记下的目标公式。\n- 通过对前沿位移与时间的数据进行过原点直线的最小二乘拟合来估计$v$，即模型$x(t) = v\\,t$，其中$x(t)$是以$\\mathrm{\\mu m}$为单位的位移，$t$是以$\\mathrm{min}$为单位的时间。使用非加权普通最小二乘法以及过原点斜率的解析解。\n- 通过将您的$C(t)$模型拟合到在时间$t_i$（单位为$\\mathrm{min}$）观测到的覆盖度数据$C_i$来估计乘积参数$\\alpha = J\\,v$。为此，您需要使用一种变换，使得拟合对$\\alpha$是线性的，并使用过原点的普通最小二乘法进行估计。通过将自然对数的参数限定在大于一个您自选的微小正数$\\epsilon$的范围内，以确保数值稳定性。\n- 计算 $J = \\alpha / v$。\n- 以所需单位的浮点数形式返回所有结果。覆盖度值是分数，而不是百分比。\n\n单位和数值表示要求：\n- 时间$t$必须以$\\mathrm{min}$为单位。\n- 位移必须以$\\mathrm{\\mu m}$为单位。\n- 成核速率$J$必须以$\\mathrm{\\mu m^{-1}\\,min^{-1}}$为单位报告。\n- 生长速度$v$必须以$\\mathrm{\\mu m\\,min^{-1}}$为单位报告。\n- 所有输出必须精确到$6$位小数。\n\n测试套件：\n- 程序的输入数据嵌入在代码中；不要读取任何外部输入。使用以下三个数据集，每个数据集包含成对的覆盖度和位移的时间数组，以及它们对应的观测覆盖度分数和观测前沿位移：\n\n数据集A（一般情况）：\n- 覆盖度时间（单位：$\\mathrm{min}$）：$[0, 2, 4, 6, 8, 10]$\n- 观测覆盖度（无量纲）：$[0.000, 0.041, 0.151, 0.297, 0.478, 0.628]$\n- 位移时间（单位：$\\mathrm{min}$）：$[0, 2, 4, 6, 8, 10]$\n- 观测位移（单位：$\\mathrm{\\mu m}$）：$[0.00, 0.98, 2.01, 2.97, 4.01, 5.02]$\n\n数据集B（低成核率，较快生长）：\n- 覆盖度时间（单位：$\\mathrm{min}$）：$[0, 5, 10, 15, 20, 25, 30]$\n- 观测覆盖度（无量纲）：$[0.000, 0.100, 0.322, 0.600, 0.790, 0.920, 0.970]$\n- 位移时间（单位：$\\mathrm{min}$）：$[0, 5, 10, 15, 20, 25, 30]$\n- 观测位移（单位：$\\mathrm{\\mu m}$）：$[0.00, 3.95, 8.02, 11.98, 16.05, 20.01, 23.95]$\n\n数据集C（高成核率，较慢生长；覆盖度轨迹相似以测试可识别性分辨率）：\n- 覆盖度时间（单位：$\\mathrm{min}$）：$[0, 2, 4, 6, 8, 10]$\n- 观测覆盖度（无量纲）：$[0.000, 0.038, 0.149, 0.300, 0.470, 0.635]$\n- 位移时间（单位：$\\mathrm{min}$）：$[0, 2, 4, 6, 8, 10]$\n- 观测位移（单位：$\\mathrm{\\mu m}$）：$[0.00, 0.42, 0.78, 1.19, 1.62, 1.98]$\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个方括号括起来的逗号分隔列表，顺序为$[J_A, v_A, J_B, v_B, J_C, v_C]$，其中下标表示数据集A、B和C；每个值都必须四舍五入到恰好$6$位小数。例如：$[0.012345,0.678900,0.010000,0.500000,0.020000,0.250000]$。", "solution": "问题陈述是生物物理建模领域一个有效且适定的问题。它在科学上基于已确立的相变理论，即Kolmogorov-Johnson-Mehl-Avrami (KJMA) 理论，在数学上是可形式化的，并提供了推导所要求参数的唯一确定性解所需的所有数据和约束。下面我们将进行推导和求解。\n\n问题要求推导一维联会复合体（SC）组装过程中的覆盖度分数$C(t)$，然后根据所提供的数据进行参数估计。模型假设如下：\n$1$. 成核过程是一个均匀时空泊松过程，其速率为常数$J$（单位：$\\mathrm{\\mu m^{-1}\\,min^{-1}}$）。\n$2$. 一旦晶核形成，它便以恒定的前沿速度$v$（单位：$\\mathrm{\\mu m\\,min^{-1}}$）双向生长。\n$3$. 生长中的区域仅在与另一个区域发生接触（碰撞）时才停止生长。\n\n**覆盖函数 $C(t)$的推导**\n\n我们将遵循Kolmogorov的方法，从第一性原理出发推导$C(t)$的表达式。其核心思想是计算染色体轴上任意一点在时间$t$时保持未转变状态的概率。根据空间均匀性，该概率等于保持未转变状态的总长度的比例，即$1 - C(t)$。\n\n让我们考虑一维染色体上的一个任意点$P$，不失一般性地，可将其置于位置$x_0 = 0$。这个点$P$在时间$t$时将成为已联会区域的一部分，条件是在某个位置$x$和某个更早的时间$\\tau \\in [0, t]$发生了一个成核事件，并且从该晶核生长的区域已经到达了点$P$。\n\n一个起源于$(x, \\tau)$的晶核双向扩展。在时间$t > \\tau$时，它覆盖了空间区间$[x - v(t-\\tau), x + v(t-\\tau)]$。位于$x_0=0$的点$P$如果位于此区间内，即$x - v(t-\\tau) \\le 0 \\le x + v(t-\\tau)$，则被该区域覆盖。这个不等式等价于$|x| \\le v(t-\\tau)$。\n\n因此，对于给定的成核时间$\\tau$，任何在空间区间$[-v(t-\\tau), +v(t-\\tau)]$内生成的晶核都将在时间$t$之前覆盖点$P$。所有能够在时间 $t$ 之前引起点 $P$ 转变的时空点 $(x, \\tau)$ 的集合被称为“危险区”（danger zone）或因果锥（causal cone）。这个危险区的体积（在一维空间+一维时间的时空中），$\\mathcal{V}_{\\text{danger}}$，可以通过对空间区间的长度$L(\\tau) = 2v(t-\\tau)$在时间域$\\tau \\in [0, t]$上积分得到：\n$$\n\\mathcal{V}_{\\text{danger}}(t) = \\int_{0}^{t} L(\\tau) \\, d\\tau = \\int_{0}^{t} 2v(t-\\tau) \\, d\\tau\n$$\n解此积分：\n$$\n\\mathcal{V}_{\\text{danger}}(t) = 2v \\left[ t\\tau - \\frac{\\tau^2}{2} \\right]_{0}^{t} = 2v \\left( t^2 - \\frac{t^2}{2} \\right) = vt^2\n$$\n成核过程是速率为$J$的泊松过程。在给定的时空体积$\\mathcal{V}$内发生的成核事件数$N$遵循均值为$\\lambda = J\\mathcal{V}$的泊松分布。因此，点$P$的危险区内预期的平均成核事件数为$\\lambda(t) = J \\cdot \\mathcal{V}_{\\text{danger}}(t) = Jvt^2$。\n\n点$P$在时间$t$时保持未转变，当且仅当其危险区内发生了零个成核事件。在均值为$\\lambda$的泊松过程中，发生零个事件的概率是$P(N=0) = e^{-\\lambda}$。因此，点$P$未转变的概率是：\n$$\nP(\\text{untransformed}) = e^{-Jvt^2}\n$$\n如前所述，这个概率等于未转变的染色体轴所占的比例，即$1-C(t)$。\n$$\n1 - C(t) = e^{-Jvt^2}\n$$\n这直接给出了覆盖分数$C(t)$为：\n$$\nC(t) = 1 - e^{-Jvt^2}\n$$\n至此，完成了所需的推导。这个方程是Avrami方程在一维、恒定成核速率下的一个特例。“扩展分数”（extended fraction）$C_{ex}(t)$，表示如果所有区域可以相互穿透生长时的总长度，它是指数的参数，即$C_{ex}(t) = Jvt^2$。\n\n**参数估计**\n\n问题要求一个两步估计程序。\n\n**第1步：估计生长速度$v$**\n速度$v$是根据前沿位移数据$(t_i, x_i)$，假设存在线性关系$x(t) = vt$来估计的。这是一个强制通过原点的线性回归模型。对于一组$N$个数据点$(t_i, x_i)$，使残差平方和$\\sum_{i=1}^N (x_i - vt_i)^2$最小化的最优斜率$v$由标准的过原点直线普通最小二乘法公式给出：\n$$\nv = \\frac{\\sum_{i=1}^N t_i x_i}{\\sum_{i=1}^N t_i^2}\n$$\n我们将对每个数据集的位移-时间测量值应用此公式。\n\n**第2步：估计成核速率$J$**\n在确定$v$之后，我们使用覆盖度数据$(t_i, C_i)$和推导出的模型$C(t) = 1 - e^{-Jvt^2}$来估计$J$。让我们定义一个复合参数$\\alpha = Jv$。模型则变为$C(t) = 1 - e^{-\\alpha t^2}$。为了进行线性拟合，我们变换这个方程：\n$$\n1 - C(t) = e^{-\\alpha t^2}\n$$\n对两边取自然对数：\n$$\n\\ln(1 - C(t)) = -\\alpha t^2\n$$\n整理得：\n$$\n-\\ln(1 - C_i) = \\alpha t_i^2\n$$\n让我们定义变换后的变量$Y_i = -\\ln(1 - C_i)$和$X_i = t_i^2$。模型变为$Y_i = \\alpha X_i$，这又是一个通过原点的线性回归。$\\alpha$的最小二乘估计值为：\n$$\n\\alpha = \\frac{\\sum_{i=1}^N X_i Y_i}{\\sum_{i=1}^N X_i^2} = \\frac{\\sum_{i=1}^N t_i^2 \\cdot (-\\ln(1-C_i))}{\\sum_{i=1}^N (t_i^2)^2} = \\frac{\\sum_{i=1}^N -t_i^2 \\ln(1-C_i)}{\\sum_{i=1}^N t_i^4}\n$$\n为确保当$C_i \\to 1$时的数值稳定性，我们通过将其限制在一个小的正值$\\epsilon$来防止对数的参数变为零。$Y_i$的计算变为$Y_i = -\\ln(\\max(\\epsilon, 1-C_i))$。数据点$(t_0=0, C_0=0)$导致$X_0=0, Y_0=0$，可以从求和中排除，因为它对结果没有贡献。\n\n一旦估计出$\\alpha$，成核速率$J$通过以下方式计算：\n$$\nJ = \\frac{\\alpha}{v}\n$$\n这个过程将应用于所提供的三个数据集中的每一个。所有数值结果将按要求四舍五入到$6$位小数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Derives and implements a nucleation-and-growth model for SC assembly,\n    and estimates kinetic parameters J and v from provided datasets.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"name\": \"A\",\n            \"coverage_times\": np.array([0, 2, 4, 6, 8, 10], dtype=float),\n            \"coverages\": np.array([0.000, 0.041, 0.151, 0.297, 0.478, 0.628], dtype=float),\n            \"disp_times\": np.array([0, 2, 4, 6, 8, 10], dtype=float),\n            \"displacements\": np.array([0.00, 0.98, 2.01, 2.97, 4.01, 5.02], dtype=float)\n        },\n        {\n            \"name\": \"B\",\n            \"coverage_times\": np.array([0, 5, 10, 15, 20, 25, 30], dtype=float),\n            \"coverages\": np.array([0.000, 0.100, 0.322, 0.600, 0.790, 0.920, 0.970], dtype=float),\n            \"disp_times\": np.array([0, 5, 10, 15, 20, 25, 30], dtype=float),\n            \"displacements\": np.array([0.00, 3.95, 8.02, 11.98, 16.05, 20.01, 23.95], dtype=float)\n        },\n        {\n            \"name\": \"C\",\n            \"coverage_times\": np.array([0, 2, 4, 6, 8, 10], dtype=float),\n            \"coverages\": np.array([0.000, 0.038, 0.149, 0.300, 0.470, 0.635], dtype=float),\n            \"disp_times\": np.array([0, 2, 4, 6, 8, 10], dtype=float),\n            \"displacements\": np.array([0.00, 0.42, 0.78, 1.19, 1.62, 1.98], dtype=float)\n        }\n    ]\n\n    all_results = []\n    # A small positive number to ensure numerical stability of log\n    epsilon = 1e-12\n\n    for case in test_cases:\n        # --- Step 1: Estimate growth velocity v ---\n        t_disp = case[\"disp_times\"]\n        x_disp = case[\"displacements\"]\n\n        # OLS for x = v*t is v = sum(t*x) / sum(t^2)\n        numerator_v = np.sum(t_disp * x_disp)\n        denominator_v = np.sum(t_disp**2)\n        \n        # Avoid division by zero if all times are 0, although not expected here\n        v = numerator_v / denominator_v if denominator_v != 0 else 0.0\n\n        # --- Step 2: Estimate composite parameter alpha = J*v ---\n        t_cov = case[\"coverage_times\"]\n        C_cov = case[\"coverages\"]\n        \n        # Filter out the t=0 data point, which is (0,0) in transformed coordinates\n        # and contributes nothing to the sums but simplifies array handling.\n        non_zero_mask = t_cov > 0\n        t_filt = t_cov[non_zero_mask]\n        C_filt = C_cov[non_zero_mask]\n        \n        # Transform variables for linear fit: Y = -ln(1-C), X = t^2\n        # The model is Y = alpha * X\n        # To avoid log(0), use max(epsilon, 1-C)\n        Y_transform = -np.log(np.maximum(epsilon, 1.0 - C_filt))\n        \n        # OLS for Y = alpha * X' where X'=t^2, is alpha = sum(X'*Y) / sum(X'^2)\n        numerator_alpha = np.sum(t_filt**2 * Y_transform)\n        denominator_alpha = np.sum(t_filt**4)\n\n        alpha = numerator_alpha / denominator_alpha if denominator_alpha != 0 else 0.0\n\n        # --- Step 3: Compute nucleation rate J ---\n        J = alpha / v if v != 0 else 0.0\n        \n        # Append J and v to the results list\n        all_results.append(J)\n        all_results.append(v)\n\n    # Format the final output string with rounding to 6 decimal places.\n    formatted_results = [f\"{res:.6f}\" for res in all_results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2853839"}]}