{"hands_on_practices": [{"introduction": "本练习将我们对DNA复制的理解置于一个基本的、定量的现实中。通过运用半保留复制和双向复制的核心原则，您将推导出在单个细胞周期中，整个基因组内合成的冈崎片段的总数。这项实践旨在提高您进行“信封背面”式估算的能力，将宏观的基因组参数与底层的分子机制联系起来 [@problem_id:2808901]。", "problem": "一个单倍体长度为 $G$ 个核苷酸的真核染色体，在S期严格的起点授权机制下复制一次：每个复制起点由起点识别复合物（ORC）及相关的复制前复合物授权一次，且最多起始一次，产生两个双向行进的复制叉，直到与相邻的复制叉汇合。在每个复制叉处，脱氧核糖核酸（DNA）的合成在前导链臂上连续进行，在滞后链臂上以一系列冈崎片段的形式不连续进行。假设为半保留复制，基因组中的每个核苷酸都被精确复制一次（无重复复制），不存在大的未复制间隙或重复，并且在计数瞬间之外，所有冈崎片段都已完全加工和连接。冈崎片段的平均长度为 $l=150$ 个核苷酸，其分布范围很窄，因此预期的片段数量可通过将合成的滞后链DNA总长度除以 $l$ 来获得。忽略端粒处的特殊末端加工过程和任何线粒体DNA。\n\n仅从上述核心定义以及双向复制叉（每个复制叉包含一个前导链臂和一个滞后链臂）的标准结构出发，推导在一次完整的核DNA复制过程中，整个基因组产生的冈崎片段总数的期望值表达式，然后针对 $l=150$ 个核苷酸的情况进行求值。将最终结果表示为以 $G$ 为变量的封闭形式解析表达式。无需四舍五入；报告一个无量纲的计数值。", "solution": "问题要求推导在一次完整的真核生物核DNA复制过程中产生的冈崎片段总数的表达式。该问题在科学上是合理的且表述清晰，允许基于DNA复制的标准模型进行严格求解。\n\n首先，我们必须精确定义需要合成的DNA总量。问题指出单倍体基因组长度为 $G$ 个核苷酸。真核生物在细胞周期S期的DNA复制通常发生在准备进行有丝分裂的二倍体体细胞中。一个二倍体细胞含有两套同源染色体，因此其G1期细胞核DNA总量是一个总长度为 $2G$ 个碱基对的双螺旋。半保留复制过程需要合成该基因组的一个完整新拷贝。因此，新合成的DNA总长度（我们记为 $L_{new}$）等于二倍体基因组的长度，即 $2G$。\n$$L_{new} = 2G$$\n\n接下来，我们必须确定这部分新DNA中有多少比例是作为滞后链合成的。复制的基本单位是复制叉。问题明确指出，复制起点起始后会产生两个方向相反的复制叉（双向复制）。每个复制叉在两条反向平行的模板链上合成DNA。由于DNA聚合酶具有单向极性（沿 $5' \\to 3'$ 方向合成），一条新链可以沿着复制叉前进的方向连续合成（前导链），而另一条链则必须通过称为冈崎片段的短片段，以不连续的方式向相反方向合成（滞后链）。\n\n考虑一个单一的双向复制起点。会建立两个复制叉，彼此相向移动。在一条模板链上，起点左侧是前导链合成，右侧是滞后链合成。在互补的模板链上，起点左侧是滞后链合成，右侧是前导链合成。因此，对于被复制的亲代DNA双螺旋的任何片段，两条新合成的链中，一条是通过前导链机制产生的，另一条是通过滞后链机制产生的。在对整个基因组进行求和时，这种对称性仍然成立，前提是忽略端粒处的特殊末端复制，这是问题陈述明确允许我们忽略的。\n\n因此，新合成的DNA总长度中恰好有一半由滞后链构成。设 $L_{lagging}$ 是作为冈崎片段合成的DNA总长度。\n$$L_{lagging} = \\frac{1}{2} L_{new}$$\n代入 $L_{new}$ 的表达式：\n$$L_{lagging} = \\frac{1}{2} (2G) = G$$\n所以，所有冈崎片段的总长度等于单倍体基因组的长度 $G$。\n\n问题给出冈崎片段的平均长度为 $l$，并且预期的片段总数 $N_{Okazaki}$ 可以通过将滞后链DNA的总长度除以该平均长度来计算。\n$$N_{Okazaki} = \\frac{L_{lagging}}{l}$$\n代入我们推导出的 $L_{lagging}$ 表达式：\n$$N_{Okazaki} = \\frac{G}{l}$$\n这是冈崎片段预期总数的一般表达式。\n\n问题要求对冈崎片段平均长度为 $l = 150$ 个核苷酸的特定情况进行求值。将该值代入我们的表达式中：\n$$N_{Okazaki} = \\frac{G}{150}$$\n这就是以单倍体基因组长度 $G$ 表示的冈崎片段总数的最终封闭形式解析表达式。", "answer": "$$\\boxed{\\frac{G}{150}}$$", "id": "2808901"}, {"introduction": "超越静态的计数，本练习利用一种强大的建模技术深入探讨S期的动态过程。您将把活性复制叉的群体建模为一个生灭过程，以推导其在稳态下的期望数量。这个练习阐明了细胞核的系统级特性（例如活性复制体的总数）是如何从起始点激活和复制叉终止等底层动力学参数中涌现出来的 [@problem_id:2808995]。", "problem": "在真核细胞核的合成期中期，已许可的复制起点以复制前复合体 (pre-RC) 的形式存在，该复合体由起点识别复合物 (Origin Recognition Complex, ORC)、细胞分裂周期蛋白6 (Cdc6)、染色质许可和DNA复制因子1 (Cdt1) 以及微型染色体维持蛋白2–7 (MCM2–7) 解旋酶组装而成。起点许可机制强制要求每个起点在每个合成期最多只能激活一次。考虑一个含有大量已许可起点的细胞核，使得随机涨落可以被平均掉，并且在一个有效起点激活速率近似恒定的时间区间内，稳态近似是适用的。\n\n假设如下：\n- 每个细胞核的有效起点激活速率为 $\\,\\lambda\\,$（单位：起点/分钟），该速率反映了起点许可及周期蛋白依赖性激酶和Dbf4依赖性激酶的调控。\n- 当一个已许可的起点激活时，它会建立 $\\,2\\,$ 个双向复制叉（两个复制体），这些复制叉会一直存在，直到因复制叉碰撞或到达染色体末端而终止。\n- 单个复制叉的活性时间（从起点激活瞬间到终止的时间）有一个明确的平均值，记为 $\\,\\tau\\,$（单位：分钟）。假设系统具有平稳性，即在所考虑的时间区间内，平均寿命不随时间变化，并且除了每个起点只能激活一次的限制外，资源限制不会在复制叉之间引入额外的耦合。\n\n在这些条件下，将每个细胞核中的活性复制叉数量建模为一个处于稳态的生灭过程，其中“生”对应于起点激活时的复制叉起始，“灭”对应于复制叉终止。请从第一性原理推导出一个闭合形式的解析表达式，用以表示稳态下每个细胞核中活性复制叉的期望数量，并用 $\\,\\lambda\\,$ 和 $\\,\\tau\\,$ 表示。最终答案应只包含 $\\,\\lambda\\,$ 和 $\\,\\tau\\,$ 的单个解析表达式。最终表达式中不应包含单位。", "solution": "所提出的问题是将随机过程建模应用于一个基本生物学过程——即真核DNA复制——的一个定义明确的练习。它要求推导稳态下活性复制叉的期望数量。我们将使用生灭过程的框架来对此系统进行建模。\n\n令 $N(t)$ 为表示在时间 $t$ 单个细胞核内活性复制叉数量的随机变量。我们的任务是求解在稳态条件下该变量的期望值 $\\langle N \\rangle$。\n\n复制叉数量随时间的变化可以用复制叉的产生速率（生）和终止速率（灭）来描述。\n\n首先，我们定义产生速率。问题陈述，已许可的起点以每个细胞核每分钟 $\\lambda$ 个起点的有效速率激活。每个起点激活事件都会启动一个双向复制过程，从而产生 $k=2$ 个新的复制叉。假设这些事件是独立的，那么总的复制叉产生速率是一个常数，与当前复制叉的数量 $N$ 无关。我们将此速率记为 $R_{\\text{birth}}$，其表达式为：\n$$\nR_{\\text{birth}} = k \\lambda = 2\\lambda\n$$\n这是活性复制叉群体的新到达率。\n\n接下来，我们定义终止速率。问题提供信息，单个复制叉的平均活性时间（或寿命）为 $\\tau$ 分钟。在连续时间随机过程的背景下，一个恒定的平均寿命意味着每个复制叉具有恒定的终止风险率。设此单个终止速率为 $\\mu$。对于一个速率恒定的过程，其平均寿命是该速率的倒数。因此：\n$$\n\\mu = \\frac{1}{\\tau}\n$$\n如果细胞核中存在 $N$ 个活性复制叉，并且每个复制叉以速率 $\\mu$ 独立终止，那么整个复制叉群体的总终止速率 $R_{\\text{death}}$ 与当前活性的复制叉数量成正比：\n$$\nR_{\\text{death}}(N) = N \\mu = \\frac{N}{\\tau}\n$$\n\n在稳态下，系统已达到统计平衡，这意味着活性复制叉的期望数量 $\\langle N \\rangle$ 不随时间变化。这要求期望的产生速率必须等于期望的终止速率。我们可以将此条件表示为：\n$$\n\\langle R_{\\text{birth}} \\rangle = \\langle R_{\\text{death}}(N) \\rangle\n$$\n我们现在来计算这些速率的期望值。\n产生速率是一个常数 $2\\lambda$。因此，其期望就是该速率本身：\n$$\n\\langle R_{\\text{birth}} \\rangle = 2\\lambda\n$$\n终止速率是随机变量 $N$ 的函数。其期望可以通过应用期望算子来求得：\n$$\n\\langle R_{\\text{death}}(N) \\rangle = \\left\\langle \\frac{N}{\\tau} \\right\\rangle\n$$\n由于 $\\tau$ 是一个常数参数，且期望算子是线性的，我们可以写出：\n$$\n\\left\\langle \\frac{N}{\\tau} \\right\\rangle = \\frac{\\langle N \\rangle}{\\tau}\n$$\n现在，我们令期望产生速率和期望终止速率相等，以满足稳态条件：\n$$\n2\\lambda = \\frac{\\langle N \\rangle}{\\tau}\n$$\n对此方程求解活性复制叉的期望数量 $\\langle N \\rangle$，即可得到所需的表达式。将方程两边同乘以 $\\tau$，我们得到：\n$$\n\\langle N \\rangle = 2\\lambda\\tau\n$$\n这个结果也是排队论中的一个基本定理——利特尔法则 (Little's Law) 的直接推论。根据该法则，一个系统中的平均项目数 ($\\langle N \\rangle$) 等于平均到达率 ($2\\lambda$) 乘以项目在系统中停留的平均时间 ($\\tau$)。从生灭过程的第一性原理出发的推导证实了这一结果。该表达式在物理上和量纲上都是一致的，因为一个速率 (时间$^{-1}$) 与一个时间的乘积产生了一个无量纲量，适合用于对物体进行计数。", "answer": "$$\n\\boxed{2\\lambda\\tau}\n$$", "id": "2808995"}, {"introduction": "最后一项实践旨在弥合理论模型与实验数据之间的鸿沟，这是现代定量生物学的核心活动。利用模拟的关于起始点许可和激活的全基因组数据，您将实施一个计算模型来估计起始点激活的效率。这项动手练习介绍了一种从“组学”数据集中推断生物过程参数的强大方法，揭示了复制起始点激活的竞争性本质 [@problem_id:2808927]。", "problem": "我们为您提供了两种在离散基因组区段上的全基因组分析总结：微型染色体维持复合体 (MCM) 的染色质免疫沉淀测序 (ChIP-seq) 信号，以及短新生链测序 (SNS-seq) 的计数。MCM ChIP-seq 信号近似于许可的复制起始点的局部密度，而 SNS-seq 计数则近似于激活的起始点的频率。在真核生物中，并非所有许可的起始点都会激活；相反，它们会相互竞争以启动复制，许多起始点会被从较早激活的邻近起始点延伸而来的复制叉钝化。\n\n从以下基本依据出发：(i) 许可作用的定义，即在 S 期之前，MCM 双六聚体沿基因组沉积，(ii) 激活是一个受局部因素和竞争调控的概率性事件的观察，以及 (iii) 在粗粒化区段的尺度上，观测到的 SNS-seq 密度反映了该区段中一个许可的起始点在被钝化前激活的相对概率的约束条件。请考虑以下最大熵风格的竞争模型。设 $m_i \\ge 0$ 表示区段 $i$ 中的 MCM ChIP-seq 信号，设 $s_i \\ge 0$ 表示区段 $i$ 中的 SNS-seq 计数。引入一个小的伪计数 $\\epsilon > 0$ 以避免零值。假设在竞争条件下，各区段间的相对激活概率由一个平滑化的幂律分配给出：\n$$\np_i(\\gamma) \\equiv \\frac{(m_i + \\epsilon)^{\\gamma}}{\\sum_{j=1}^{n} (m_j + \\epsilon)^{\\gamma}},\n$$\n其中 $\\gamma \\ge 0$ 是一个未知指数，它编码了在竞争性钝化条件下，许可的起始点作为许可密度的函数，其激活效率如何。根据 SNS-seq 计数构建一个经验目标分布：\n$$\no_i \\equiv \\frac{s_i + \\epsilon}{\\sum_{j=1}^{n} (s_j + \\epsilon)}.\n$$\n通过最小化从经验分布 $o$ 到模型分布 $p(\\gamma)$ 的 Kullback–Leibler 散度来估计 $\\hat{\\gamma}$：\n$$\n\\hat{\\gamma} \\in \\arg\\min_{\\gamma \\in [\\gamma_{\\min}, \\gamma_{\\max}]} \\; D_{\\mathrm{KL}}(o \\,\\|\\, p(\\gamma)) \\equiv \\sum_{i=1}^{n} o_i \\log\\!\\left(\\frac{o_i}{p_i(\\gamma)}\\right).\n$$\n如果所有的 $(m_i + \\epsilon)$ 值都相等（此时对于任意 $\\gamma$，$p_i(\\gamma)$ 均为均匀分布），那么 $D_{\\mathrm{KL}}(o \\,\\|\\, p(\\gamma))$ 的值将不依赖于 $\\gamma$。按照惯例，在这种情况下，您必须返回搜索区间中最小的 $\\gamma$。请使用以下固定常量：$\\epsilon = 10^{-6}$，$\\gamma_{\\min} = 0$ 和 $\\gamma_{\\max} = 5$。\n\n请编写一个完整的程序，对下面的每个测试用例，通过在闭区间 $[\\gamma_{\\min}, \\gamma_{\\max}]$ 上对目标函数进行数值最小化来计算 $\\hat{\\gamma}$。您的程序必须输出一行包含 $\\hat{\\gamma}$ 值列表的内容，每个值都四舍五入到 $6$ 位小数，并采用指定的最终输出格式。您可以假设所有输入至少有一个区段具有严格的正值，以确保归一化是良定义的。\n\n测试套件（每个用例提供一对向量 $(m, s)$）：\n\n- 用例 1（存在零值的常规成功路径）：\n  - $m = [10, 6, 3, 1, 0, 8, 2]$\n  - $s = [10, 6, 3, 1, 0, 8, 2]$\n- 用例 2（稀疏许可和存在零值的边界情况）：\n  - $m = [0, 0, 4, 0, 9, 0, 1]$\n  - $s = [0, 0, 2, 0, 3, 0, 1]$\n- 用例 3（均匀许可的边缘情况）：\n  - $m = [5, 5, 5, 5, 5]$\n  - $s = [1, 1, 1, 1, 1]$\n- 用例 4（倾斜的许可与放大的激活）：\n  - $m = [1, 2, 3, 4, 5, 6]$\n  - $s = [1, 4, 9, 16, 25, 36]$\n\n最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔的结果列表（例如 $[r_1,r_2,r_3,r_4]$），其中每个 $r_k$ 是用例 $k$ 的 $\\hat{\\gamma}$，四舍五入到 $6$ 位小数。不应打印任何其他文本。", "solution": "问题陈述经过了严格的验证。\n\n第 1 步：提取已知条件。\n- MCM ChIP-seq 信号：一个非负值向量 $m = [m_1, m_2, \\dots, m_n]$，其中 $m_i \\ge 0$。\n- SNS-seq 计数：一个非负值向量 $s = [s_1, s_2, \\dots, s_n]$，其中 $s_i \\ge 0$。\n- 伪计数：一个小的正常数 $\\epsilon = 10^{-6}$。\n- 模型概率分布：$p_i(\\gamma) \\equiv \\frac{(m_i + \\epsilon)^{\\gamma}}{\\sum_{j=1}^{n} (m_j + \\epsilon)^{\\gamma}}$。\n- 经验目标分布：$o_i \\equiv \\frac{s_i + \\epsilon}{\\sum_{j=1}^{n} (s_j + \\epsilon)}$。\n- 待估参数：$\\hat{\\gamma}$，它最小化 Kullback-Leibler 散度 $D_{\\mathrm{KL}}(o \\,\\|\\, p(\\gamma))$。\n- 目标函数：$\\hat{\\gamma} \\in \\arg\\min_{\\gamma} D_{\\mathrm{KL}}(o \\,\\|\\, p(\\gamma)) \\equiv \\sum_{i=1}^{n} o_i \\log\\!\\left(\\frac{o_i}{p_i(\\gamma)}\\right)$。\n- 优化搜索区间：$[\\gamma_{\\min}, \\gamma_{\\max}]$，其中 $\\gamma_{\\min} = 0$ 且 $\\gamma_{\\max} = 5$。\n- 特殊条件：如果所有 $(m_i + \\epsilon)$ 的值相等，解必须为 $\\gamma_{\\min}$。\n- 测试套件：四对向量 $(m, s)$。\n- 输出格式：单行输出，包含每个用例的 $\\hat{\\gamma}$ 值的逗号分隔列表，四舍五入到 $6$ 位小数，例如 `[r_1,r_2,r_3,r_4]`。\n\n第 2 步：验证。\n根据所需标准对问题进行评估。\n- **科学基础**：该问题使用了分子生物学中的既定概念（MCM、SNS-seq、起始点许可），并构建了一个简化的竞争性起始点激活的生物物理模型。使用幂律关系和最小化Kullback-Leibler散度是计算生物学和统计建模中的标准有效技术。其前提是科学上合理的抽象，而非事实错误。\n- **良定性**：该问题是在一个闭合有界区间 $[\\gamma_{\\min}, \\gamma_{\\max}]$ 上最小化一个连续函数。如下所示，目标函数是凸函数，这保证了唯一最小值的存在。因此，该问题是良定的。\n- **客观性**：问题以精确、定量的术语陈述，没有主观或含糊的语言。\n- **完整性和一致性**：提供了所有必要的数据、常量、方程和约束。没有矛盾之处。\n- **现实性和可行性**：所提供的数据是数值向量，模型虽然经过简化，但代表了一个物理上一致的假设。\n\n第 3 步：结论。\n该问题是有效的。它具有科学依据，是良定的，并且是完整的。将提供一个解决方案。\n\n目标是找到参数 $\\hat{\\gamma}$，它能最小化从经验分布 $o$ 到模型分布 $p(\\gamma)$ 的 Kullback-Leibler 散度：\n$$\n\\hat{\\gamma} = \\arg\\min_{\\gamma \\in [0, 5]} D_{\\mathrm{KL}}(o \\,\\|\\, p(\\gamma))\n$$\nKullback-Leibler 散度的定义为：\n$$\nD_{\\mathrm{KL}}(o \\,\\|\\, p(\\gamma)) = \\sum_{i=1}^{n} o_i \\log(o_i) - \\sum_{i=1}^{n} o_i \\log(p_i(\\gamma))\n$$\n由于项 $\\sum_{i=1}^{n} o_i \\log(o_i)$（即分布 $o$ 的负熵）是一个相对于 $\\gamma$ 的常数，因此最小化 $D_{\\mathrm{KL}}$ 等价于最小化交叉熵项，或最大化 $\\sum_{i=1}^{n} o_i \\log(p_i(\\gamma))$。为了进行最小化，我们将目标函数 $L(\\gamma)$ 定义为交叉熵：\n$$\nL(\\gamma) = -\\sum_{i=1}^{n} o_i \\log(p_i(\\gamma)) = -\\sum_{i=1}^{n} o_i \\log\\left(\\frac{(m_i + \\epsilon)^{\\gamma}}{\\sum_{j=1}^{n} (m_j + \\epsilon)^{\\gamma}}\\right)\n$$\n展开对数，我们得到：\n$$\nL(\\gamma) = -\\sum_{i=1}^{n} o_i \\left( \\gamma \\log(m_i + \\epsilon) - \\log\\left(\\sum_{j=1}^{n} (m_j + \\epsilon)^{\\gamma}\\right) \\right)\n$$\n由于 $\\sum_{i=1}^{n} o_i = 1$，表达式可简化为：\n$$\nL(\\gamma) = \\log\\left(\\sum_{j=1}^{n} (m_j + \\epsilon)^{\\gamma}\\right) - \\gamma \\sum_{i=1}^{n} o_i \\log(m_i + \\epsilon)\n$$\n对于 $\\gamma \\ge 0$，该函数 $L(\\gamma)$ 是关于 $\\gamma$ 的凸函数，因为牠是一个 log-sum-exp 项（这是凸的）和一个 $\\gamma$ 的线性项之和。凸性确保了在给定的凸集，即区间 $[\\gamma_{\\min}, \\gamma_{\\max}] = [0, 5]$ 上存在唯一的最小值。\n\n对每个提供的测试用例 $(m, s)$，解决方案的算法步骤如下：\n1.  定义常量：伪计数 $\\epsilon = 10^{-6}$，下界 $\\gamma_{\\min} = 0$，上界 $\\gamma_{\\max} = 5$。\n2.  为 MCM 信号 $m$ 和 SNS 计数 $s$ 构建数值向量。\n3.  按规定处理特殊情况：如果向量 $m$ 的所有元素都相同，则模型分布 $p_i(\\gamma) = 1/n$ 是均匀的且与 $\\gamma$ 无关。此时 KL 散度为常数。按照惯例，这种情况下的解是 $\\hat{\\gamma} = \\gamma_{\\min} = 0$。\n4.  对于一般情况，通过在有界区间 $[0, 5]$ 上对目标函数 $L(\\gamma)$ 进行数值最小化来找到最优的 $\\hat{\\gamma}$。为保证数值稳定性，我们可以直接实现 $D_{\\mathrm{KL}}$ 公式，它也是 $\\gamma$ 的一个凸函数。步骤如下：\n    a. 预先计算经验分布 $o_i = \\frac{s_i + \\epsilon}{\\sum_{j} (s_j + \\epsilon)}$ 和常数项 $\\sum_i o_i \\log(o_i)$。\n    b. 定义一个以 $\\gamma$ 为输入的 KL 散度函数。在该函数内部，计算模型分布 $p_i(\\gamma) = \\frac{(m_i + \\epsilon)^{\\gamma}}{\\sum_{j} (m_j + \\epsilon)^{\\gamma}}$。\n    c. 计算散度 $D_{\\mathrm{KL}}(\\gamma) = \\sum_i o_i (\\log(o_i) - \\log(p_i(\\gamma)))$。\n5.  使用一维数值优化程序，特别是 `scipy.optimize` 库中可用的有界 Brent 方法，来找到在指定边界 $[0, 5]$ 内最小化此函数的 $\\gamma$ 值。\n6.  按要求将得到的 $\\hat{\\gamma}$ 值四舍五入到 6 位小数。对所有测试用例重复此过程。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import minimize_scalar\n\ndef solve():\n    \"\"\"\n    Solves for the optimal gamma by minimizing the KL divergence\n    for a series of test cases.\n    \"\"\"\n    # Define fixed constants from the problem statement.\n    EPSILON = 1e-6\n    GAMMA_MIN = 0.0\n    GAMMA_MAX = 5.0\n\n    # Test suite from the problem statement.\n    test_cases = [\n        # Case 1 (general happy path with zeros present)\n        ([10, 6, 3, 1, 0, 8, 2], [10, 6, 3, 1, 0, 8, 2]),\n        # Case 2 (boundary with sparse licensing and zeros)\n        ([0, 0, 4, 0, 9, 0, 1], [0, 0, 2, 0, 3, 0, 1]),\n        # Case 3 (edge case with uniform licensing)\n        ([5, 5, 5, 5, 5], [1, 1, 1, 1, 1]),\n        # Case 4 (skewed licensing with amplified firing)\n        ([1, 2, 3, 4, 5, 6], [1, 4, 9, 16, 25, 36]),\n    ]\n\n    results = []\n    for m_vec, s_vec in test_cases:\n        m = np.array(m_vec, dtype=float)\n        s = np.array(s_vec, dtype=float)\n\n        # Handle the special case where licensing is uniform.\n        # np.unique(m).size == 1 checks if all elements are the same.\n        if np.unique(m).size == 1:\n            results.append(GAMMA_MIN)\n            continue\n\n        # Add pseudocounts to avoid division by zero or log(0).\n        m_plus_eps = m + EPSILON\n        s_plus_eps = s + EPSILON\n\n        # Compute the empirical target distribution 'o'.\n        o = s_plus_eps / np.sum(s_plus_eps)\n\n        # Pre-compute parts of the KL divergence that do not depend on gamma.\n        # We need to handle the case where o_i is zero, which is avoided by EPSILON.\n        # This term is constant with respect to gamma.\n        entropy_o_term = np.sum(o * np.log(o))\n\n        def kl_divergence(gamma):\n            \"\"\"\n            Objective function: Kullback-Leibler divergence D_KL(o || p(gamma)).\n            \"\"\"\n            # Compute the model distribution p(gamma).\n            # Using np.power is safe as m_plus_eps is always positive.\n            m_pow_gamma = np.power(m_plus_eps, gamma)\n            p_gamma = m_pow_gamma / np.sum(m_pow_gamma)\n            \n            # The cross-entropy term.\n            # We must handle log(0) case, which EPSILON prevents.\n            cross_entropy_term = np.sum(o * np.log(p_gamma))\n            \n            # D_KL = H(o,p) - H(o) = -sum(o*log(p)) - (-sum(o*log(o)))\n            return entropy_o_term - cross_entropy_term\n        \n        # Numerically minimize the objective function over the bounded interval.\n        # 'bounded' method is suitable for minimization over a closed interval.\n        opt_result = minimize_scalar(\n            kl_divergence,\n            bounds=(GAMMA_MIN, GAMMA_MAX),\n            method='bounded'\n        )\n        \n        # Extract the optimal gamma and round to 6 decimal places.\n        gamma_hat = round(opt_result.x, 6)\n        results.append(gamma_hat)\n\n    # Format the final output as a comma-separated list in brackets.\n    # The map(str, ...) is used to correctly format the floats.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2808927"}]}