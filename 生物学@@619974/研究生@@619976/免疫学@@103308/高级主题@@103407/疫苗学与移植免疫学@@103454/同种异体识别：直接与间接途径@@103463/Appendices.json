{"hands_on_practices": [{"introduction": "严谨的实验设计是验证免疫学中特定细胞通路机制假说的基石。本练习旨在挑战您运用免疫学家的思维，通过选择特异性的分子工具来剖析间接同种异体识别通路中复杂的交叉呈递机制，特别是如何确定其中的“限速步骤”。掌握这一技能对于深入理解免疫应答的分子机理至关重要 [@problem_id:2215678]。", "problem": "一位研究人员正在研究移植排斥反应背后的免疫学机制，重点关注同种异体识别的间接途径。在此途径中，受体的抗原呈递细胞 (APC) 内化来自供体移植物的细胞物质，加工供体抗原，并通过其自身的主要组织相容性复合体 (MHC) 分子进行呈递。为了激活受体的细胞毒性CD8+ T细胞——这些细胞对于杀死移植物细胞至关重要——该过程要求完整的供体MHC I类分子首先从吞噬体转运到受体APC的胞质溶胶中。在那里，它们被蛋白酶体降解，产生的肽段被装载到受体的MHC I类分子上，用于呈递给CD8+ T细胞（这一过程被称为交叉呈递）。\n\n中心假设是：这个特定的运输步骤——即完整的供体MHC I类蛋白从吞噬体逃逸到胞质溶胶中——是决定通过间接途径激活CD8+ T细胞动力学的主要限速步骤。\n\n提供给您以下生物资源：\n- **供体小鼠：** 近交系BALB/c，表达MHC单倍型$H-2^d$。我们将其感兴趣的MHC I类分子记为$K^d$。\n- **受体小鼠：** 近交系C57BL/6，表达MHC单倍型$H-2^b$。其相关的MHC I类分子为$K^b$。\n- **特化T细胞：** 一个从C57BL/6小鼠中分离的CD8+ T细胞克隆，它特异性识别一个源自$K^d$分子的已知肽段，但仅当该肽段由$K^b$分子呈递时才识别。如果这些T细胞在供体细胞上遇到完整的$K^d$分子，它们将不会被激活。\n- **检测方法：** 一种可以随时间定量测量活化T细胞产生的γ-干扰素 (IFN-$\\gamma$) 的方法。\n\n对于检验“吞噬体逃逸是这些特化CD8+ T细胞间接激活的限速步骤”这一假设，以下哪个实验设计最具特异性和严谨性？\n\nA. 构建两种版本的供体BALB/c细胞。第1组表达正常的$K^d$分子。第2组表达一种基因工程改造的融合蛋白，该蛋白由$K^d$分子与listeriolysin O (LLO)连接而成，LLO是一种已知的能破坏吞噬体膜的成孔毒素。将C57BL/6树突状细胞（作为受体APC）与来自第1组或第2组的经辐照、不增殖的细胞共同培养。短暂孵育后，加入特化的CD8+ T细胞，并在48小时内测量IFN-$\\gamma$的产生速率。\n\nB. 将C57BL/6树突状细胞与经辐照的BALB/c脾细胞共同培养。将这些共培养物分成两组。一组用chloroquine处理，这是一种能提高内吞囊泡pH值并抑制溶酶体蛋白酶功能的药物。另一组用溶剂对照处理。短暂预处理后，加入特化的CD8+ T细胞，并在48小时后测量IFN-$\\gamma$的总产量。\n\nC. 将C57BL/6树突状细胞与经辐照的BALB/c脾细胞共同培养。将这些共培养物分成两组。一组用蛋白酶体抑制剂MG-132处理。另一组用溶剂对照处理。短暂预处理后，加入特化的CD8+ T细胞，并在48小时后测量IFN-$\\gamma$的总产量。\n\nD. 将特化的CD8+ T细胞直接与经辐照的BALB/c脾细胞共培养，不含任何C57BL/6树突状细胞。与此同时，将相同的T细胞与已经用源自$K^d$的特异性合成肽段脉冲处理过的C57BL/6树突状细胞共培养。比较两种培养物中IFN-$\\gamma$的产生速率。\n\nE. 完全按照选项A中所述进行实验。但是，不使用特化的CD8+ T细胞，而是使用从先前用BALB/c细胞免疫过的C57BL/6小鼠中分离出的多克隆CD4+ T细胞群体。在72小时内测量T细胞的增殖速率。\n\nF. 将C57BL/6树突状细胞与经辐照的BALB/c脾细胞共同培养。将这些共培养物分成两组。一组用cytochalasin D处理，这是一种有效的肌动蛋白聚合抑制剂，可以阻断吞噬作用。另一组用溶剂对照处理。短暂预处理后，加入特化的CD8+ T细胞，并在48小时后测量IFN-$\\gamma$的总产量。", "solution": "我们将导致CD8 T细胞活化的交叉呈递间接途径形式化为受体树突状细胞 (DC) 内的一系列必要步骤：\n1) 通过吞噬作用摄取供体物质，\n2) 完整的供体MHC I类蛋白从吞噬体逃逸到胞质溶胶中，\n3) 经蛋白酶体降解生成肽段，\n4) 肽段通过TAP转运至内质网，\n5) 肽段装载到受体MHC I类分子（$K^{b}$）上，\n6) 表面呈递及T细胞活化，最终导致IFN-$\\gamma$分泌。\n\n设这些步骤是连续的，其有效一级速率常数为 $\\{k_{\\mathrm{upt}},k_{\\mathrm{esc}},k_{\\mathrm{prot}},k_{\\mathrm{TAP}},k_{\\mathrm{load}},k_{\\mathrm{act}}\\}$。对于串联过程，指向肽-MHC呈递的稳态通量$J$受限于最小的有效速率常数。如果$k_{\\mathrm{esc}}$是最小的，那么增加$k_{\\mathrm{esc}}$应该会提高呈递的动力学速率，从而提高IFN-$\\gamma$的产生速率$r_{\\gamma}(t)$，其中$r_{\\gamma}(t)\\propto J(t)$。一个严谨且特异地检验吞噬体逃逸是限速步骤这一假设的实验，必须选择性地增加$k_{\\mathrm{esc}}$，同时保持其他步骤不变，并且测量动力学（速率）而非仅仅是终点指标。\n\n我们根据对$k_{\\mathrm{esc}}$的选择性调节和合适的读出指标来评估每个选项：\n- 选项A通过在供体细胞中表达$K^{d}$-LLO融合蛋白，直接靶向吞噬体逃逸步骤。Listeriolysin O促进吞噬体膜的通透化；当供体物质被C57BL/6 DC吞噬时，增加的吞噬体逃逸会提高$k_{\\mathrm{esc}}$。特化的CD8 T细胞识别呈递在$K^{b}$上的源自$K^{d}$的肽段，这确保了读出指标报告的是交叉呈递而非直接同种异体识别。随时间测量IFN-$\\gamma$的产生速率，特异性地检验了增加$k_{\\mathrm{esc}}$是否会加速动力学过程，正如$k_{\\mathrm{esc}}$是限速步骤时所预测的那样。\n- 选项B用chloroquine调节内体pH和溶酶体蛋白酶，改变的是内体加工过程而非胞质逃逸步骤。这并不能直接检验$k_{\\mathrm{esc}}$是否是限制性的，并且使用的是单个时间点的终点测量。\n- 选项C抑制蛋白酶体（降低$k_{\\mathrm{prot}}$），这会抑制交叉呈递并证实其对蛋白酶体的依赖性，但没有提供关于抑制前$k_{\\mathrm{esc}}$是否是限速步骤的特异信息；它也采用终点测量。\n- 选项D比较了直接同种异体识别与肽段脉冲处理的DC激活，可作为验证T细胞特异性的对照，但它没有操纵或检验吞噬体逃逸步骤。\n- 选项E用多克隆CD4 T细胞替代CD8 T细胞，并测量通过MHC II类分子呈递的增殖情况；这涉及的是一个不同的途径，不能检验CD8交叉呈递的逃逸步骤。\n- 选项F用cytochalasin D阻断吞噬作用（降低$k_{\\mathrm{upt}}$），从而减少抗原输入。尽管这表明摄取是必需的，但它无法确定下游的逃逸步骤是否是限速的；它也使用终点测量。\n\n因此，只有选项A特异性地增加了$k_{\\mathrm{esc}}$，并测量了对精确相关的CD8 T细胞产生IFN-$\\gamma$的动力学影响，使其成为对所述假设最特异和最严谨的检验。", "answer": "$$\\boxed{A}$$", "id": "2215678"}, {"introduction": "除了识别参与的免疫通路，定量建模使我们能够预测免疫应答的动态过程。本练习将种群生态学基本原理应用于模拟直接同种异体识别通路中 T 细胞克隆的扩增与收缩。通过推导克隆反应达到峰值的时间，您将深入理解 T 细胞增殖率和抗原持续性等因素如何共同决定急性排斥反应的动力学特征 [@problem_id:2831575]。", "problem": "移植后，针对供体主要组织相容性复合体（MHC）的CD8（Cluster of Differentiation 8）T细胞队列通过直接同种异体识别途径立即扩增。在该途径中，供体抗原提呈细胞（APC）直接刺激受体T细胞，但会从移植物引流环境中迅速消失。假设以下机制基础植根于经过充分检验的免疫学和种群动力学原理：\n\n- 同种异体反应性CD8 T细胞的克隆大小 $N(t)$ 经历密度限制性扩增，其内在人均增长率为 $r>0$。\n- 最大可持续克隆大小（有效承载能力）与提呈完整供体MHC的供体APC丰度成正比。由于移出和凋亡，供体APC丰度以 $\\exp(-\\alpha t)$ (其中 $\\alpha>0$) 的形式衰减，因此承载能力下降为 $K(t)=K \\exp(-\\alpha t)$，其中 $K>0$ 是 $t=0$ 时的名义容量。\n- 直接途径下的早期扩增可以很好地用一个具有随时间变化的承载能力的逻辑斯谛增长定律来描述：\n$$\n\\frac{dN}{dt} \\;=\\; r\\,N(t)\\left(1 - \\frac{N(t)}{K(t)}\\right) \\,,\n$$\n初始条件为 $N(0)=N_0$，满足 $0<N_0<K$。\n\n将克隆反应的峰值定义为在抗原限制下净增殖停止的第一个时间点 $t_{\\text{peak}}$，即对于上述动力学系统，满足 $\\frac{dN}{dt}=0$ 的第一个 $t>0$。仅使用所述假设和模型，推导出一个用 $r$、$K$、$\\alpha$ 和 $N_0$ 表示的 $t_{\\text{peak}}$ 的闭式解析表达式。最终时间以天为单位表示。无需进行数值代入，也无需四舍五入。您的答案必须是单一的闭式表达式。", "solution": "对所述问题进行验证。\n\n逐字提取已知条件：\n1.  克隆大小 $N(t)$ 的微分方程：$\\frac{dN}{dt} = r\\,N(t)\\left(1 - \\frac{N(t)}{K(t)}\\right)$。\n2.  内在人均增长率：$r>0$。\n3.  随时间变化的承载能力：$K(t)=K \\exp(-\\alpha t)$。\n4.  初始承载能力常数：$K>0$。\n5.  承载能力衰减率：$\\alpha>0$。\n6.  克隆大小的初始条件：$N(0)=N_0$。\n7.  初始条件的约束：$0<N_0<K$。\n8.  峰值反应时间 $t_{\\text{peak}}$ 的定义：满足 $\\frac{dN}{dt}=0$ 的第一个 $t>0$ 的时间点。\n\n问题验证如下：\n-   **科学依据**：该模型基于逻辑斯谛方程，这是种群动力学的一个基本原理。其在淋巴细胞克隆扩增中的应用是数学免疫学的标准方法。关于因直接同种异体识别途径中供体抗原提呈细胞丢失而导致承载能力衰减的前提，在免疫学上是合理的。\n-   **适定性**：该问题提供了一个具有初始条件的明确定义的常微分方程。待求量 $t_{\\text{peak}}$ 的定义清晰无歧义。整个设定是自洽的，足以推导出一个唯一的解析解。\n-   **客观性**：问题以精确、定量的术语表述，没有主观或含糊不清的语言。\n\n结论是该问题有效。这是一个应用数学和理论生物学中的形式化、可解问题。我们接下来进行求解。\n\n目标是找到时间 $t_{\\text{peak}}$，其定义为净增殖率为零的第一个 $t>0$ 的时间点。控制方程为：\n$$\n\\frac{dN}{dt} = r N(t) \\left(1 - \\frac{N(t)}{K(t)}\\right)\n$$\n条件 $\\frac{dN}{dt}=0$ 意味着 $N(t)=0$ 或 $1 - \\frac{N(t)}{K(t)} = 0$。由于初始种群 $N_0$ 为正，且初始增长率 $\\frac{dN}{dt}\\Big|_{t=0} = r N_0 (1-N_0/K)$ 为正（因为 $r>0$，$N_0>0$ 且 $N_0<K$），种群 $N(t)$ 将从 $N_0$ 开始增长，在 $t>0$ 时不会为零。因此，峰值条件必须是：\n$$\n1 - \\frac{N(t_{\\text{peak}})}{K(t_{\\text{peak}})} = 0 \\quad \\implies \\quad N(t_{\\text{peak}}) = K(t_{\\text{peak}})\n$$\n这意味着我们必须找到扩增的T细胞种群大小等于衰减的承载能力的时刻。为此，我们必须首先求出 $N(t)$ 的解析解。\n\n将 $K(t) = K \\exp(-\\alpha t)$ 代入控制方程，可将其改写为：\n$$\n\\frac{dN}{dt} = rN - \\frac{rN^2}{K \\exp(-\\alpha t)}\n$$\n这是一个形式为 $\\frac{dy}{dt} + P(t)y = Q(t)y^n$ 且 $n=2$ 的伯努利（Bernoulli）微分方程。我们将其整理为标准形式：\n$$\n\\frac{dN}{dt} - rN = -\\frac{r}{K} \\exp(\\alpha t) N^2\n$$\n我们使用代换 $u(t) = N(t)^{1-2} = N(t)^{-1}$。其导数为 $\\frac{du}{dt} = -N^{-2}\\frac{dN}{dt}$。将伯努利方程两边同乘以 $-N^{-2}$ 得：\n$$\n-N^{-2}\\frac{dN}{dt} + rN^{-1} = \\frac{r}{K} \\exp(\\alpha t)\n$$\n代入 $u$ 及其导数，我们得到一个一阶线性微分方程：\n$$\n\\frac{du}{dt} + r u = \\frac{r}{K} \\exp(\\alpha t)\n$$\n我们使用积分因子 $I(t) = \\exp\\left(\\int r \\, dt\\right) = \\exp(rt)$ 求解。将线性方程两边同乘以 $I(t)$：\n$$\n\\exp(rt) \\frac{du}{dt} + r \\exp(rt) u = \\frac{r}{K} \\exp(\\alpha t) \\exp(rt)\n$$\n左边是一个乘积的导数：\n$$\n\\frac{d}{dt} \\left(u(t) \\exp(rt)\\right) = \\frac{r}{K} \\exp\\left((\\alpha+r)t\\right)\n$$\n对两边关于 $t$ 积分：\n$$\nu(t) \\exp(rt) = \\int \\frac{r}{K} \\exp\\left((\\alpha+r)t\\right) dt = \\frac{r}{K(\\alpha+r)} \\exp\\left((\\alpha+r)t\\right) + C\n$$\n其中 $C$ 是积分常数。我们解出 $u(t)$：\n$$\nu(t) = \\frac{r}{K(\\alpha+r)} \\exp(\\alpha t) + C \\exp(-rt)\n$$\n为了确定 $C$，我们应用初始条件 $N(0)=N_0$，这意味着 $u(0) = 1/N_0$。在 $t=0$ 时：\n$$\n\\frac{1}{N_0} = \\frac{r}{K(\\alpha+r)} \\exp(0) + C \\exp(0) \\quad \\implies \\quad C = \\frac{1}{N_0} - \\frac{r}{K(\\alpha+r)}\n$$\n将 $C$ 代回 $u(t)$ 的表达式中，并回顾 $u(t)=1/N(t)$，我们得到 $1/N(t)$ 的解：\n$$\n\\frac{1}{N(t)} = \\frac{r}{K(\\alpha+r)} \\exp(\\alpha t) + \\left(\\frac{1}{N_0} - \\frac{r}{K(\\alpha+r)}\\right) \\exp(-rt)\n$$\n现在我们应用峰值条件 $N(t_{\\text{peak}}) = K(t_{\\text{peak}})$，等价于 $\\frac{1}{N(t_{\\text{peak}})} = \\frac{1}{K(t_{\\text{peak}})}$。由于 $K(t) = K \\exp(-\\alpha t)$，我们有 $\\frac{1}{K(t)} = \\frac{1}{K} \\exp(\\alpha t)$。令 $t = t_{\\text{peak}}$：\n$$\n\\frac{r}{K(\\alpha+r)} \\exp(\\alpha t_{\\text{peak}}) + \\left(\\frac{1}{N_0} - \\frac{r}{K(\\alpha+r)}\\right) \\exp(-rt_{\\text{peak}}) = \\frac{1}{K} \\exp(\\alpha t_{\\text{peak}})\n$$\n我们重新整理此方程以求解 $t_{\\text{peak}}$。将含有 $\\exp(\\alpha t_{\\text{peak}})$ 的项组合在一起：\n$$\n\\left(\\frac{1}{N_0} - \\frac{r}{K(\\alpha+r)}\\right) \\exp(-rt_{\\text{peak}}) = \\left(\\frac{1}{K} - \\frac{r}{K(\\alpha+r)}\\right) \\exp(\\alpha t_{\\text{peak}})\n$$\n简化右侧的系数：\n$$\n\\frac{1}{K} - \\frac{r}{K(\\alpha+r)} = \\frac{\\alpha+r-r}{K(\\alpha+r)} = \\frac{\\alpha}{K(\\alpha+r)}\n$$\n方程变为：\n$$\n\\left(\\frac{1}{N_0} - \\frac{r}{K(\\alpha+r)}\\right) \\exp(-rt_{\\text{peak}}) = \\frac{\\alpha}{K(\\alpha+r)} \\exp(\\alpha t_{\\text{peak}})\n$$\n分离指数项：\n$$\n\\frac{\\exp(\\alpha t_{\\text{peak}})}{\\exp(-rt_{\\text{peak}})} = \\exp((\\alpha+r)t_{\\text{peak}}) = \\frac{\\frac{1}{N_0} - \\frac{r}{K(\\alpha+r)}}{\\frac{\\alpha}{K(\\alpha+r)}}\n$$\n将右侧的分子和分母同乘以 $K(\\alpha+r)$ 可得：\n$$\n\\exp((\\alpha+r)t_{\\text{peak}}) = \\frac{K(\\alpha+r)}{N_0 \\alpha} - \\frac{r}{\\alpha} = \\frac{K(\\alpha+r) - rN_0}{\\alpha N_0}\n$$\n通过重新整理各项，可以更清晰地重写为：\n$$\n\\exp((\\alpha+r)t_{\\text{peak}}) = \\frac{K\\alpha + Kr - rN_0}{\\alpha N_0} = \\frac{K\\alpha + r(K - N_0)}{\\alpha N_0} = \\frac{K}{N_0} + \\frac{r}{\\alpha}\\left(\\frac{K}{N_0} - 1\\right)\n$$\n由于 $K>N_0$、$r>0$ 和 $\\alpha>0$，表达式的参数大于1，确保 $t_{\\text{peak}}$ 为正。现在我们对两边取自然对数：\n$$\n(\\alpha+r)t_{\\text{peak}} = \\ln\\left( \\frac{K}{N_0} + \\frac{r}{\\alpha}\\left(\\frac{K}{N_0} - 1\\right) \\right)\n$$\n最后，$t_{\\text{peak}}$ 的闭式解析表达式为：\n$$\nt_{\\text{peak}} = \\frac{1}{\\alpha+r} \\ln\\left( \\frac{K}{N_0} + \\frac{r}{\\alpha}\\left(\\frac{K}{N_0} - 1\\right) \\right)\n$$\n$t_{\\text{peak}}$ 的单位由 $r$ 和 $\\alpha$ 的单位决定。问题暗示了一致性，因此如果 $r$ 和 $\\alpha$ 的单位是 天$^{-1}$，$t_{\\text{peak}}$ 的单位将是天。", "answer": "$$\n\\boxed{\\frac{1}{r+\\alpha} \\ln\\left(\\frac{K}{N_0} + \\frac{r}{\\alpha}\\left(\\frac{K}{N_0} - 1\\right)\\right)}\n$$", "id": "2831575"}, {"introduction": "现代免疫学高度依赖计算生物学来处理免疫系统的复杂性。这个实践将您置于生物信息学家的角色，解决一个移植免疫学中的关键挑战：预测供体来源的哪些肽段最有可能通过间接通路被受体细胞呈递。通过从基本原理出发构建一个免疫原性评分算法，您将练习并掌握那些用于鉴定免疫原性表位的核心生物信息学工具背后的逻辑 [@problem_id:2831566]。", "problem": "您正在设计一个用于间接同种异体识别的计算优先化流程，在该流程中，受体的抗原呈递细胞（APCs）将供体的主要组织相容性复合体（MHC）蛋白加工成肽，然后呈递在受体的人类白细胞抗原-DR（HLA-DR）上。该流程必须根据以下公认原则，通过一个基于免疫原性的优先分数对供体MHC来源的肽进行排序：由MHC-II类分子结合的长度约为$15$个氨基酸的肽，通常包含一个$9$聚体（9-mer）的结合核心；肽的生成概率取决于其末端的蛋白水解切割；并且T细胞耐受会降低对与自身高度相似的肽的反应。您的任务是形式化并实现一个完整、可测试的算法，该算法通过构建一个透明的替代结合模型并整合加工和耐受过程，将这些原则付诸实践，且不使用任何外部预测器。\n\n使用的基础理论：\n- MHC-II类分子的抗原加工与呈递：受体APCs摄取供体蛋白，通过内体-溶酶体蛋白酶生成长度约为$15$的肽，并将其呈递在HLA-DR上，其结合主要由一个$9$聚体核心和锚定残基的偏好决定。\n- T细胞识别依赖于非自身决定簇的存在；供体肽与自身的高度相似性会降低其免疫原性潜力。\n- 结合亲和力对免疫原性有正向贡献；生成概率有正向贡献；与自身的高度相似性有负向贡献；源蛋白丰度有正向贡献。\n\n数学形式化要求：\n- 从长度为$L$的供体MHC蛋白序列中生成所有长度为$l = 15$的重叠肽（如果$L < l$，则认为没有肽生成，并为此情况返回$0$）。\n- 对于每个$15$聚体肽$p$，将$9$聚体结合核心分数定义为\n$$\nB(p) = \\max_{k \\in \\{0,\\dots,l-9\\}} \\sum_{j=0}^{8} W\\big(p[k+j], j\\big),\n$$\n其中$W(a,j)$是一个位置特异性权重矩阵（Position-Specific Scoring Matrix, PSSM），该矩阵由受体HLA-DR等位基因为核心位置$j$的氨基酸$a$参数化。\n- 通过一个logistic函数将无界的核心分数转换为结合倾向$b(p)$\n$$\nb(p) = \\sigma\\!\\left(\\alpha\\,[B(p)-\\tau]\\right) = \\frac{1}{1 + e^{-\\alpha\\,[B(p)-\\tau]}}.\n$$\n- 将加工概率$P(p)$定义为肽$p$在供体蛋白中的N端和C端边界处的蛋白水解切割概率的乘积：\n$$\nP(p) = c[i]\\cdot c[i+l],\n$$\n其中$i$是$p$在供体序列中的起始索引（从零开始），$c[t] \\in [0,1]$是在边界索引$t$处残基之间发生切割的概率（$c$以长度为$L+1$的列表形式提供）。\n- 使用最优$9$聚体结合核心的自身相似性来定义一个耐受惩罚。设$k^\\star$为使$B(p)$最大化的偏移量。对于一个自身$15$聚体肽集合$\\mathcal{S}$，计算\n$$\nf(p) = \\max_{q \\in \\mathcal{S}} \\max_{s \\in \\{0,\\dots,l-9\\}} \\frac{1}{9}\\sum_{j=0}^{8} \\mathbf{1}\\{\\,p[k^\\star + j] = q[s + j]\\,\\},\n$$\n并设定一个惩罚\n$$\n\\pi(p) = \\big(f(p)\\big)^{\\beta}.\n$$\n- 设$A \\in [0,1]$为供体蛋白丰度权重，反映供体MHC蛋白可用于加工的可能性。\n- 定义最终的免疫原性优先分数\n$$\nI(p) = \\lambda_b\\, b(p) + \\lambda_p\\, P(p) + \\lambda_a\\, A - \\lambda_s\\, \\pi(p),\n$$\n计算后将结果限制在$[0,1]$范围内。\n\n所有计算使用的参数：\n- Logistic变换参数：$\\alpha = 1.0$，$\\tau = 1.5$。\n- 耐受指数：$\\beta = 2$。\n- 权重：$\\lambda_b = 0.5$，$\\lambda_p = 0.2$，$\\lambda_a = 0.2$，$\\lambda_s = 0.3$。\n- 肽长度：$l = 15$。\n\n受体等位基因特异性PSSM定义（数值单位为任意加性单位）：\n- 等位基因DR401：仅在$9$聚体核心的位置$j \\in \\{0,3,5,8\\}$处有非零权重；其他位置为零。\n    - 在$j=0$ (P1)处：对于疏水性残基$\\{ \\mathrm{F}, \\mathrm{W}, \\mathrm{Y}, \\mathrm{L}, \\mathrm{I}, \\mathrm{V}, \\mathrm{M}, \\mathrm{A} \\}$为$+1.5$；对于$\\{ \\mathrm{P}, \\mathrm{D}, \\mathrm{E}, \\mathrm{K}, \\mathrm{R} \\}$为$-1.0$；其他为$0$。\n    - 在$j=3$ (P4)处：对于$\\{ \\mathrm{S}, \\mathrm{T}, \\mathrm{N}, \\mathrm{Q}, \\mathrm{G} \\}$为$+0.8$；对于$\\{ \\mathrm{F}, \\mathrm{W}, \\mathrm{Y}, \\mathrm{L}, \\mathrm{I}, \\mathrm{V}, \\mathrm{M}, \\mathrm{P} \\}$为$-0.5$；其他为$0$。\n    - 在$j=5$ (P6)处：对于$\\{ \\mathrm{K}, \\mathrm{R}, \\mathrm{H} \\}$为$+1.0$；对于$\\{ \\mathrm{D}, \\mathrm{E} \\}$为$-0.5$；其他为$0$。\n    - 在$j=8$ (P9)处：对于$\\{ \\mathrm{F}, \\mathrm{W}, \\mathrm{Y}, \\mathrm{L}, \\mathrm{I}, \\mathrm{V}, \\mathrm{M}, \\mathrm{A} \\}$为$+1.2$；对于$\\{ \\mathrm{P}, \\mathrm{D}, \\mathrm{E}, \\mathrm{K}, \\mathrm{R} \\}$为$-0.8$；其他为$0$。\n- 等位基因DR1501：仅在$9$聚体核心的位置$j \\in \\{0,3,5,8\\}$处有非零权重；其他位置为零。\n    - 在$j=0$ (P1)处：对于$\\{ \\mathrm{F}, \\mathrm{W}, \\mathrm{Y} \\}$为$+2.0$；对于$\\{ \\mathrm{L}, \\mathrm{I}, \\mathrm{V}, \\mathrm{M} \\}$为$+1.0$；对于$\\{ \\mathrm{P}, \\mathrm{D}, \\mathrm{E} \\}$为$-1.2$；其他为$0$。\n    - 在$j=3$ (P4)处：对于$\\{ \\mathrm{D}, \\mathrm{E} \\}$为$+0.6$；对于$\\{ \\mathrm{P}, \\mathrm{F}, \\mathrm{W} \\}$为$-0.6$；其他为$0$。\n    - 在$j=5$ (P6)处：对于$\\{ \\mathrm{N}, \\mathrm{Q}, \\mathrm{S}, \\mathrm{T} \\}$为$+0.7$；对于$\\{ \\mathrm{K}, \\mathrm{R} \\}$为$-0.5$；其他为$0$。\n    - 在$j=8$ (P9)处：对于$\\{ \\mathrm{S}, \\mathrm{T}, \\mathrm{Y}, \\mathrm{N}, \\mathrm{Q} \\}$为$+0.8$；对于$\\{ \\mathrm{P}, \\mathrm{D}, \\mathrm{E} \\}$为$-1.0$；其他为$0$。\n\n算法任务：\n- 对于下方的每个测试用例，计算供体序列中每个重叠的$15$聚体的$I(p)$，并报告该供体序列中所有$p$的最大值。如果不存在$15$聚体，则报告$0$。\n\n测试套件：\n- 用例1（受体等位基因DR401）：\n    - 供体MHC序列$S_1$：\"GSHSMRYFYTAMSRPGRGEPRFIAV\" (长度 $25$)。\n    - 切割概率$c_1$ (长度 $26$)：[ $0.55$, $0.60$, $0.45$, $0.50$, $0.70$, $0.65$, $0.55$, $0.50$, $0.60$, $0.45$, $0.50$, $0.60$, $0.70$, $0.55$, $0.40$, $0.50$, $0.60$, $0.70$, $0.55$, $0.45$, $0.50$, $0.60$, $0.55$, $0.45$, $0.60$, $0.55$ ]。\n    - 自身肽$\\mathcal{S}_1$：[ \"TTTSRPGRGEPRFIA\", \"ALVSRPGRGEPRFIQ\" ]。\n    - 丰度权重$A_1 = 0.70$。\n- 用例2（受体等位基因DR1501）：\n    - 供体MHC序列$S_2$：\"LYLWNPDTDFRKFGLYQEFK\" (长度 $20$)。\n    - 切割概率$c_2$ (长度 $21$)：[ $0.60$, $0.50$, $0.50$, $0.40$, $0.60$, $0.50$, $0.60$, $0.50$, $0.60$, $0.40$, $0.50$, $0.50$, $0.60$, $0.50$, $0.60$, $0.40$, $0.50$, $0.60$, $0.50$, $0.60$, $0.50$ ]。\n    - 自身肽$\\mathcal{S}_2$：[ \"AAAKFGLYQEFKTTT\", \"QQQWNPDTDFRQQQQ\" ]。\n    - 丰度权重$A_2 = 0.60$。\n- 用例3（受体等位基因DR401；边界和不利组成）：\n    - 供体MHC序列$S_3$：\"PPPPPPPPPPPPPPP\" (长度 $15$)。\n    - 切割概率$c_3$ (长度 $16$)：[ $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$, $0.05$ ]。\n    - 自身肽$\\mathcal{S}_3$：[ ] (空集)。\n    - 丰度权重$A_3 = 0.80$。\n\n输出规范：\n- 您的程序应生成一行输出，其中包含三个用例的最大免疫原性优先分数。分数是一个以逗号分隔的浮点数列表，每个浮点数四舍五入到恰好$6$位小数，并用方括号括起来，按用例$1, 2, 3$的顺序排列。例如：\"[0.123456,0.654321,0.000000]\"。\n- 角度不适用。不需要物理单位。输出中不要包含任何额外文本。", "solution": "所提出的问题是免疫学领域中一个定义明确的计算任务，其基础是科学上公认的间接同种异体识别原则。该问题是自洽的，所有必需的参数、数据和数学公式都已明确定义。其中没有矛盾、科学谬误或致命的歧义。任务是实现一个指定的算法，用于计算供体来源肽的免疫原性优先分数，并将该算法应用于三个不同的测试用例。我将继续提供解决方案。\n\n问题的核心是计算从给定长度为$L$的供体主要组织相容性复合体（MHC）蛋白序列中衍生出的所有可能的长度为$l=15$的重叠肽$p$的最大免疫原性优先分数$I(p)$。如果$L<l$，则不存在这样的肽，分数为$0$。对于每个有效的肽$p$，分数$I(p)$是四个部分的加权和：一个结合倾向项，一个加工概率，一个蛋白丰度项和一个耐受惩罚。\n\n每个测试用例的总体算法流程如下：\n1. 从供体序列中生成所有长度为$l=15$的重叠肽。如果不存在这样的肽，则该用例的最终分数为$0$。\n2. 对于每个肽$p$，计算其免疫原性优先分数$I(p)$。\n3. 该测试用例的结果是所有肽中找到的最大分数。\n\n计算单个肽的分数$I(p)$需要几个中间步骤，详述如下。\n\n首先，必须为每个受体人类白细胞抗原-DR（HLA-DR）等位基因构建位置特异性评分矩阵（PSSM）。问题为等位基因`DR401`和`DR1501`提供了定义。这些矩阵，表示为$W(a, j)$，为$9$聚体结合核心的每个位置$j$（从$0$到$8$）的每个氨基酸$a$提供一个分数。对于未明确提及的位置和氨基酸，分数为$0$。\n\n设供体蛋白序列为$S$，长度为$L$，衍生肽为$p$，在$S$中起始于索引$i$。对$p$的计算如下：\n\n步骤1：计算结合核心分数$B(p)$。\n一个$15$聚体肽$p$可以通过一个$9$聚体核心锚定在MHC结合槽中。存在$l-9+1 = 15-9+1 = 7$个可能的核心对齐方式，由偏移量$k \\in \\{0, \\dots, 6\\}$索引。每个潜在核心的分数是其组成氨基酸的PSSM权重之和。最优结合核心分数$B(p)$是所有可能偏移量$k$上的最大分数：\n$$\nB(p) = \\max_{k \\in \\{0, \\dots, 6\\}} \\sum_{j=0}^{8} W\\big(p[k+j], j\\big)\n$$\n我们还必须记录产生此最大分数的偏移量$k^\\star$，因为耐受性计算需要它。如果多个偏移量产生相同的最大分数，我们采用选择最小的那个偏移量的约定。\n\n步骤2：将分数转换为结合倾向$b(p)$。\n原始分数$B(p)$是无界的。它通过一个logistic函数$\\sigma$被转换为一个概率性的倾向$b(p) \\in [0, 1]$：\n$$\nb(p) = \\sigma\\!\\left(\\alpha\\,[B(p)-\\tau]\\right) = \\frac{1}{1 + e^{-\\alpha\\,[B(p)-\\tau]}}\n$$\n给定的参数是$\\alpha = 1.0$和$\\tau = 1.5$。\n\n步骤3：计算加工概率$P(p)$。\n肽$p$的生成被建模为其在源蛋白中N端和C端边界处的切割概率的乘积。对于一个从索引$i$开始且长度为$l=15$的肽$p$，相关的切割位点在边界索引$i$（肽之前）和边界索引$i+l$（肽之后）。加工概率$P(p)$是：\n$$\nP(p) = c[i] \\cdot c[i+15]\n$$\n其中$c$是提供的长度为$L+1$的切割概率向量。\n\n步骤4：确定耐受惩罚$\\pi(p)$。\nT细胞耐受降低了与宿主自身肽相似的肽的免疫原性。这被建模为一个惩罚。首先，我们计算一个自身相似性分数$f(p)$。这是肽的最优$9$聚体结合核心（在偏移量$k^\\star$处）与自身肽集合$\\mathcal{S}$中任何肽的任何$9$聚体片段之间的最大序列一致性。\n$$\nf(p) = \\max_{q \\in \\mathcal{S}} \\max_{s \\in \\{0,\\dots,6\\}} \\frac{1}{9}\\sum_{j=0}^{8} \\mathbf{1}\\{\\,p[k^\\star + j] = q[s + j]\\,\\}\n$$\n其中$\\mathbf{1}\\{\\cdot\\}$是指示函数，如果条件为真则为$1$，否则为$0$。如果集合$\\mathcal{S}$为空，则不存在自身相似性，因此我们定义$f(p) = 0$。\n然后，耐受惩罚$\\pi(p)$被计算为：\n$$\n\\pi(p) = \\big(f(p)\\big)^{\\beta}\n$$\n指数$\\beta = 2.0$。\n\n步骤5：计算最终的免疫原性优先分数$I(p)$。\n最终分数是前面各部分的线性组合，再加上供体蛋白丰度权重$A$的项：\n$$\nI(p)_{\\text{raw}} = \\lambda_b\\, b(p) + \\lambda_p\\, P(p) + \\lambda_a\\, A - \\lambda_s\\, \\pi(p)\n$$\n给定的权重是$\\lambda_b = 0.5$, $\\lambda_p = 0.2$, $\\lambda_a = 0.2$ 和 $\\lambda_s = 0.3$。\n最后，这个原始分数被限制在区间$[0,1]$内：\n$$\nI(p) = \\max(0, \\min(1, I(p)_{\\text{raw}}))\n$$\n\n对从供体序列中得到的所有$L-15+1$个肽重复此过程。在所有肽中$I(p)$的最大值是给定测试用例的最终答案。这整个协议在提供的Python代码中实现，该代码根据这些形式化规范系统地处理每个用例。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the computational immunology problem for the given test cases.\n    \"\"\"\n\n    # ------------------\n    # Constants and Parameters\n    # ------------------\n    ALPHA = 1.0\n    TAU = 1.5\n    BETA = 2.0\n    LAMBDA_B = 0.5\n    LAMBDA_P = 0.2\n    LAMBDA_A = 0.2\n    LAMBDA_S = 0.3\n    PEPTIDE_LENGTH = 15\n    CORE_LENGTH = 9\n    AMINO_ACIDS = \"ACDEFGHIKLMNPQRSTVWY\"\n\n    # ------------------\n    # PSSM Construction\n    # ------------------\n    pssm_tables = {}\n\n    # Allele DR401 PSSM\n    dr401_pssm = {j: {aa: 0.0 for aa in AMINO_ACIDS} for j in range(CORE_LENGTH)}\n    # Position 0 (P1)\n    for aa in \"FWYLVIMA\": dr401_pssm[0][aa] = 1.5\n    for aa in \"PDEKR\": dr401_pssm[0][aa] = -1.0\n    # Position 3 (P4)\n    for aa in \"STNQG\": dr401_pssm[3][aa] = 0.8\n    for aa in \"FWYLVIMP\": dr401_pssm[3][aa] = -0.5\n    # Position 5 (P6)\n    for aa in \"KRH\": dr401_pssm[5][aa] = 1.0\n    for aa in \"DE\": dr401_pssm[5][aa] = -0.5\n    # Position 8 (P9)\n    for aa in \"FWYLVIMA\": dr401_pssm[8][aa] = 1.2\n    for aa in \"PDEKR\": dr401_pssm[8][aa] = -0.8\n    pssm_tables['DR401'] = dr401_pssm\n\n    # Allele DR1501 PSSM\n    dr1501_pssm = {j: {aa: 0.0 for aa in AMINO_ACIDS} for j in range(CORE_LENGTH)}\n    # Position 0 (P1)\n    for aa in \"FWY\": dr1501_pssm[0][aa] = 2.0\n    for aa in \"LVIM\": dr1501_pssm[0][aa] = 1.0\n    for aa in \"PDE\": dr1501_pssm[0][aa] = -1.2\n    # Position 3 (P4)\n    for aa in \"DE\": dr1501_pssm[3][aa] = 0.6\n    for aa in \"PFW\": dr1501_pssm[3][aa] = -0.6\n    # Position 5 (P6)\n    for aa in \"NQST\": dr1501_pssm[5][aa] = 0.7\n    for aa in \"KR\": dr1501_pssm[5][aa] = -0.5\n    # Position 8 (P9)\n    for aa in \"STYNQ\": dr1501_pssm[8][aa] = 0.8\n    for aa in \"PDE\": dr1501_pssm[8][aa] = -1.0\n    pssm_tables['DR1501'] = dr1501_pssm\n\n    # ------------------\n    # Test Cases\n    # ------------------\n    test_cases = [\n        {\n            \"allele\": \"DR401\",\n            \"donor_seq\": \"GSHSMRYFYTAMSRPGRGEPRFIAV\",\n            \"cleavage_probs\": [0.55, 0.60, 0.45, 0.50, 0.70, 0.65, 0.55, 0.50, 0.60, 0.45, 0.50, 0.60, 0.70, 0.55, 0.40, 0.50, 0.60, 0.70, 0.55, 0.45, 0.50, 0.60, 0.55, 0.45, 0.60, 0.55],\n            \"self_peptides\": [\"TTTSRPGRGEPRFIA\", \"ALVSRPGRGEPRFIQ\"],\n            \"abundance\": 0.70,\n        },\n        {\n            \"allele\": \"DR1501\",\n            \"donor_seq\": \"LYLWNPDTDFRKFGLYQEFK\",\n            \"cleavage_probs\": [0.60, 0.50, 0.50, 0.40, 0.60, 0.50, 0.60, 0.50, 0.60, 0.40, 0.50, 0.50, 0.60, 0.50, 0.60, 0.40, 0.50, 0.60, 0.50, 0.60, 0.50],\n            \"self_peptides\": [\"AAAKFGLYQEFKTTT\", \"QQQWNPDTDFRQQQQ\"],\n            \"abundance\": 0.60,\n        },\n        {\n            \"allele\": \"DR401\",\n            \"donor_seq\": \"PPPPPPPPPPPPPPP\",\n            \"cleavage_probs\": [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05],\n            \"self_peptides\": [],\n            \"abundance\": 0.80,\n        },\n    ]\n\n    # ------------------\n    # Main Calculation Logic\n    # ------------------\n    def calculate_max_score(case_data):\n        donor_seq = case_data[\"donor_seq\"]\n        cleavage_probs = case_data[\"cleavage_probs\"]\n        self_peptides = case_data[\"self_peptides\"]\n        abundance = case_data[\"abundance\"]\n        allele = case_data[\"allele\"]\n        pssm = pssm_tables[allele]\n        \n        seq_len = len(donor_seq)\n        if seq_len < PEPTIDE_LENGTH:\n            return 0.0\n\n        max_immunogenicity_score = 0.0\n        num_peptides = seq_len - PEPTIDE_LENGTH + 1\n\n        for i in range(num_peptides):\n            peptide = donor_seq[i : i + PEPTIDE_LENGTH]\n\n            # 1. Binding Score B(p) and optimal core offset k_star\n            max_core_score = -np.inf\n            k_star = -1\n            num_cores = PEPTIDE_LENGTH - CORE_LENGTH + 1\n            for k in range(num_cores):\n                core = peptide[k : k + CORE_LENGTH]\n                current_core_score = sum(pssm[j][core[j]] for j in range(CORE_LENGTH))\n                if current_core_score > max_core_score:\n                    max_core_score = current_core_score\n                    k_star = k\n            \n            B_p = max_core_score\n\n            # 2. Binding Propensity b(p)\n            b_p = 1.0 / (1.0 + np.exp(-ALPHA * (B_p - TAU)))\n\n            # 3. Processing Probability P(p)\n            P_p = cleavage_probs[i] * cleavage_probs[i + PEPTIDE_LENGTH]\n\n            # 4. Tolerance Penalty pi(p)\n            max_similarity_fraction = 0.0\n            if self_peptides:\n                optimal_core = peptide[k_star : k_star + CORE_LENGTH]\n                for self_pep in self_peptides:\n                    num_self_cores = len(self_pep) - CORE_LENGTH + 1\n                    for s in range(num_self_cores):\n                        self_core = self_pep[s : s + CORE_LENGTH]\n                        identity = sum(1 for aa1, aa2 in zip(optimal_core, self_core) if aa1 == aa2)\n                        similarity_fraction = identity / CORE_LENGTH\n                        if similarity_fraction > max_similarity_fraction:\n                            max_similarity_fraction = similarity_fraction\n\n            f_p = max_similarity_fraction\n            pi_p = f_p ** BETA\n            \n            # 5. Final Score I(p)\n            I_p_raw = LAMBDA_B * b_p + LAMBDA_P * P_p + LAMBDA_A * abundance - LAMBDA_S * pi_p\n            I_p = max(0.0, min(1.0, I_p_raw))\n\n            if I_p > max_immunogenicity_score:\n                max_immunogenicity_score = I_p\n        \n        return max_immunogenicity_score\n\n    results = [calculate_max_score(case) for case in test_cases]\n    \n    # ------------------\n    # Output Formatting\n    # ------------------\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2831566"}]}