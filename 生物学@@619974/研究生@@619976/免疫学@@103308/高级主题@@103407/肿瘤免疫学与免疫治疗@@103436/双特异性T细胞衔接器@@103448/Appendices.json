{"hands_on_practices": [{"introduction": "BiTE分子的有效性根本上源于其与T细胞和肿瘤细胞的结合特性。本练习将引导您从化学动力学的第一性原理出发，推导平衡解离常数 $K_D$，从而巩固您对结合亲和力的理解。掌握结合速率常数 $k_{\\text{on}}$ 与解离速率常数 $k_{\\text{off}}$ 之间的关系，对于解读和设计免疫疗法中的分子相互作用至关重要。[@problem_id:2837351]", "problem": "一种双特异性 T 细胞接合器 (BiTE) 分子具有两个独立的单价结合界面：一个与 T 细胞上的 T 细胞受体 CD3 复合物 (CD3) 结合，另一个与靶细胞上的肿瘤相关抗原 (TA) 结合。在低表面密度和充分稀释的条件下，使得重结合效应和亲合力效应可以忽略不计，每个臂都可以被建模为一个独立的、化学计量比为 $1{:}1$ 的可逆双分子结合反应。考虑通用反应式 $A + B \\rightleftharpoons C$，其中 $A$ 表示游离抗原，$B$ 表示游离的 BiTE 臂，$C$ 表示臂-抗原复合物。正向微观结合速率常数为 $k_{\\text{on}}$，单位为 $\\mathrm{M^{-1}\\,s^{-1}}$，反向微观解离速率常数为 $k_{\\text{off}}$，单位为 $\\mathrm{s^{-1}}$。\n\n从 $A + B \\rightleftharpoons C$ 的质量作用定律出发，在不使用任何预先记忆的快捷公式的情况下，完成以下任务：\n\n1. 用 $k_{\\text{on}}$、$k_{\\text{off}}$、$[A]$、$[B]$ 和 $[C]$ 定义复合物浓度 $[C](t)$ 随时间演化的微分速率方程。\n\n2. 使用化学平衡的定义和 $A + B \\rightleftharpoons C$ 反应的平衡解离常数 $K_D$ 的热力学定义，推导出一个用 $k_{\\text{on}}$ 和 $k_{\\text{off}}$ 表示的 $K_D$ 表达式，该表达式分别适用于每个 BiTE 臂。\n\n3. 对于结合 CD3 的臂，测得的动力学常数为 $k_{\\text{on,CD3}} = 2.8 \\times 10^{5}\\ \\mathrm{M^{-1}\\,s^{-1}}$ 和 $k_{\\text{off,CD3}} = 3.5 \\times 10^{-2}\\ \\mathrm{s^{-1}}$。对于结合肿瘤抗原的臂，测得的动力学常数为 $k_{\\text{on,TA}} = 9.0 \\times 10^{5}\\ \\mathrm{M^{-1}\\,s^{-1}}$ 和 $k_{\\text{off,TA}} = 2.7 \\times 10^{-3}\\ \\mathrm{s^{-1}}$。计算 $K_{D,\\mathrm{CD3}}$ 和 $K_{D,\\mathrm{TA}}$ (单位为 $\\mathrm{M}$)，然后报告无量纲比值 $R = K_{D,\\mathrm{CD3}}/K_{D,\\mathrm{TA}}$。\n\n将最终答案表示为一个纯数字（无单位），并四舍五入到 $3$ 位有效数字。", "solution": "该问题在科学和数学上是合理的、定义明确的，并包含了完整求解所需的所有信息。我们按照要求进行推导。\n\n基本过程是可逆双分子反应，其中游离抗原 $A$ 和游离 BiTE 臂 $B$ 结合形成复合物 $C$。该反应由以下反应式描述：\n$$ A + B \\underset{k_{\\text{off}}}{\\stackrel{k_{\\text{on}}}{\\rightleftharpoons}} C $$\n此处，$k_{\\text{on}}$ 是二级结合速率常数，$k_{\\text{off}}$ 是一级解离速率常数。\n\n1. $[C](t)$ 的微分速率方程的推导。\n复合物浓度 $[C]$ 随时间的演化遵循质量作用定律。$[C]$ 的变化速率是其生成速率与消耗速率之差。\n\n正向反应 $A + B \\xrightarrow{k_{\\text{on}}} C$ 描述了复合物的形成。此基元步骤的速率 $v_f$ 与反应物浓度的乘积成正比：\n$$ v_f = k_{\\text{on}} [A] [B] $$\n\n反向反应 $C \\xrightarrow{k_{\\text{off}}} A + B$ 描述了复合物的解离。此基元步骤的速率 $v_r$ 与复合物的浓度成正比：\n$$ v_r = k_{\\text{off}} [C] $$\n\n复合物浓度的净变化速率 $\\frac{d[C]}{dt}$ 是生成速率减去消耗速率：\n$$ \\frac{d[C]}{dt} = v_f - v_r $$\n代入 $v_f$ 和 $v_r$ 的表达式，得到所需的微分速率方程：\n$$ \\frac{d[C]}{dt} = k_{\\text{on}} [A] [B] - k_{\\text{off}} [C] $$\n\n2. 平衡解离常数 $K_D$ 的推导。\n化学平衡是反应净速率为零的状态。这意味着所有物质的浓度不再随时间变化。对于复合物 $C$，此条件表示为：\n$$ \\frac{d[C]}{dt} = 0 $$\n将此条件应用于第一部分推导的速率方程，我们得到：\n$$ k_{\\text{on}} [A]_{\\text{eq}} [B]_{\\text{eq}} - k_{\\text{off}} [C]_{\\text{eq}} = 0 $$\n其中下标 'eq' 表示平衡时的浓度。整理该方程可得：\n$$ k_{\\text{on}} [A]_{\\text{eq}} [B]_{\\text{eq}} = k_{\\text{off}} [C]_{\\text{eq}} $$\n这可以整理成一个浓度比：\n$$ \\frac{[A]_{\\text{eq}} [B]_{\\text{eq}}}{[C]_{\\text{eq}}} = \\frac{k_{\\text{off}}}{k_{\\text{on}}} $$\n根据热力学定义，对于解离反应 $C \\rightleftharpoons A + B$，平衡解离常数 $K_D$ 是解离物质的平衡浓度之积与复合物的平衡浓度之比：\n$$ K_D \\equiv \\frac{[A]_{\\text{eq}} [B]_{\\text{eq}}}{[C]_{\\text{eq}}} $$\n通过比较这两个表达式，我们推导出平衡解离常数与动力学速率常数之间的关系：\n$$ K_D = \\frac{k_{\\text{off}}}{k_{\\text{on}}} $$\n在指定条件下，此关系独立地适用于 BiTE 分子的每个结合臂。\n\n3. $K_{D,\\mathrm{CD3}}$、$K_{D,\\mathrm{TA}}$ 和比值 $R$ 的计算。\n我们应用推导出的公式来计算结合 CD3 的臂和结合肿瘤抗原 (TA) 的臂的解离常数。\n\n对于结合 CD3 的臂，给定的常数为 $k_{\\text{on,CD3}} = 2.8 \\times 10^{5}\\ \\mathrm{M^{-1}\\,s^{-1}}$ 和 $k_{\\text{off,CD3}} = 3.5 \\times 10^{-2}\\ \\mathrm{s^{-1}}$。解离常数 $K_{D,\\mathrm{CD3}}$ 为：\n$$ K_{D,\\mathrm{CD3}} = \\frac{k_{\\text{off,CD3}}}{k_{\\text{on,CD3}}} = \\frac{3.5 \\times 10^{-2}\\ \\mathrm{s^{-1}}}{2.8 \\times 10^{5}\\ \\mathrm{M^{-1}\\,s^{-1}}} = 1.25 \\times 10^{-7}\\ \\mathrm{M} $$\n\n对于结合 TA 的臂，给定的常数为 $k_{\\text{on,TA}} = 9.0 \\times 10^{5}\\ \\mathrm{M^{-1}\\,s^{-1}}$ 和 $k_{\\text{off,TA}} = 2.7 \\times 10^{-3}\\ \\mathrm{s^{-1}}$。解离常数 $K_{D,\\mathrm{TA}}$ 为：\n$$ K_{D,\\mathrm{TA}} = \\frac{k_{\\text{off,TA}}}{k_{\\text{on,TA}}} = \\frac{2.7 \\times 10^{-3}\\ \\mathrm{s^{-1}}}{9.0 \\times 10^{5}\\ \\mathrm{M^{-1}\\,s^{-1}}} = 0.3 \\times 10^{-8}\\ \\mathrm{M} = 3.0 \\times 10^{-9}\\ \\mathrm{M} $$\n\n最后，我们计算无量纲比值 $R = K_{D,\\mathrm{CD3}}/K_{D,\\mathrm{TA}}$：\n$$ R = \\frac{K_{D,\\mathrm{CD3}}}{K_{D,\\mathrm{TA}}} = \\frac{1.25 \\times 10^{-7}\\ \\mathrm{M}}{3.0 \\times 10^{-9}\\ \\mathrm{M}} = \\frac{1.25}{3.0} \\times 10^{2} \\approx 0.41666... \\times 100 = 41.666... $$\n问题要求答案四舍五入到 $3$ 位有效数字。\n$$ R \\approx 41.7 $$\n这个比值表明，BiTE 对肿瘤抗原的亲和力大约是其对 CD3 亲和力的 $41.7$ 倍，因为较小的 $K_D$ 对应较高的结合亲和力。", "answer": "$$\\boxed{41.7}$$", "id": "2837351"}, {"introduction": "癌症治疗的核心挑战之一是在有效杀伤肿瘤细胞的同时，最大限度地保护健康组织。本练习模拟了一个关键的临床前评估场景，即当靶抗原在重要正常组织上也有低水平表达时，如何界定BiTEs的安全性和有效性。通过构建一个定量模型，您将学会计算“治疗窗口”，即能够最大化抗肿瘤疗效并最小化“在靶、脱瘤”（on-target, off-tumor）毒性的药物浓度区间，这是药物开发中的一个核心决策依据。[@problem_id:2837361]", "problem": "一种双特异性 T 细胞衔接器 (BiTE) 被设计用于结合靶细胞上的肿瘤相关抗原以及 T 细胞受体 (TCR) 复合物中 T 细胞上的分化簇 3 (CD3)。该 BiTE 对肿瘤抗原的解离常数为 $K_{A} = 10\\,\\mathrm{nM}$，对 CD3 的解离常数为 $K_{C} = 30\\,\\mathrm{nM}$。一个候选抗原 $X$ 在每个肿瘤细胞上的表达量为 $n_{\\text{tumor}} = 5.0 \\times 10^{4}$ 个拷贝，在每个关键正常细胞上的表达量为 $n_{\\text{normal}} = 5.0 \\times 10^{2}$ 个拷贝。假设在一个充分混合的环境中，游离 BiTE 浓度为 $C$（单位为 $\\mathrm{nM}$）。\n\n使用以下基本依据：\n1) 根据质量作用定律和标准受体占据理论，每个臂的单表位占据率为 $f_{A}(C) = \\dfrac{C}{C + K_{A}}$ 和 $f_{C}(C) = \\dfrac{C}{C + K_{C}}$。\n2) 结合到靶细胞抗原上的 BiTE 分子预期数量为 $B(C,n) = n \\, f_{A}(C)$，其中 $n$ 是每个细胞的抗原拷贝数。\n3) 单次相遇中 T 细胞激活的最小可饱和突触信号度量可建模为 $S(C,n) = B(C,n) \\, f_{C}(C)$，并且每次相遇的细胞毒性激活概率呈类 Michaelis-Menten 形式 $P_{\\text{act}}(C,n) = \\dfrac{S(C,n)}{S(C,n) + \\theta}$，其中固定信号阈值参数 $\\theta = 1.0 \\times 10^{3}$，其有效单位与 $S$ 相同。\n\n将有效性定义为条件 $P_{\\text{act}}(C,n_{\\text{tumor}}) \\ge e_{\\min}$（其中 $e_{\\min} = 0.90$），将安全性定义为条件 $P_{\\text{act}}(C,n_{\\text{normal}}) \\le r_{\\max}$（其中 $r_{\\max} = 0.10$）。\n\n仅从上述基本依据出发，推导确定达到有效性所需的最小 BiTE 浓度 $C_{\\min}$ 和维持安全性所允许的最大浓度 $C_{\\max}$ 的解析表达式。然后计算定量选择性余量 $M = \\dfrac{C_{\\max}}{C_{\\min}}$。\n\n将最终的选择性余量表示为无单位实数，并将您的答案四舍五入至三位有效数字。", "solution": "对所述问题进行验证。\n\n逐字提取的已知条件如下：\n- 肿瘤抗原的解离常数：$K_{A} = 10\\,\\mathrm{nM}$\n- CD3 的解离常数：$K_{C} = 30\\,\\mathrm{nM}$\n- 每个肿瘤细胞的抗原拷贝数：$n_{\\text{tumor}} = 5.0 \\times 10^{4}$\n- 每个正常细胞的抗原拷贝数：$n_{\\text{normal}} = 5.0 \\times 10^{2}$\n- 游离 BiTE 浓度：$C$（单位 nM）\n- 抗原臂的单表位占据率：$f_{A}(C) = \\dfrac{C}{C + K_{A}}$\n- CD3 臂的单表位占据率：$f_{C}(C) = \\dfrac{C}{C + K_{C}}$\n- 预期结合的 BiTE 数量：$B(C,n) = n \\, f_{A}(C)$\n- 突触信号度量：$S(C,n) = B(C,n) \\, f_{C}(C)$\n- 细胞毒性激活概率：$P_{\\text{act}}(C,n) = \\dfrac{S(C,n)}{S(C,n) + \\theta}$\n- 信号阈值参数：$\\theta = 1.0 \\times 10^{3}$\n- 有效性条件：$P_{\\text{act}}(C,n_{\\text{tumor}}) \\ge e_{\\min}$，其中 $e_{\\min} = 0.90$\n- 安全性条件：$P_{\\text{act}}(C,n_{\\text{normal}}) \\le r_{\\max}$，其中 $r_{\\max} = 0.10$\n\n验证结论：该问题有效。它在科学上基于标准的药理学模型（质量作用定律，Michaelis-Menten 动力学），问题陈述清晰，提供了所有必要信息，并且是客观的。没有矛盾、歧义或不合理的假设。该问题是定量系统药理学原理的直接应用。\n\n我们开始求解。目标是推导有效性所需的最小浓度 $C_{\\min}$ 和安全性所需的最大浓度 $C_{\\max}$，然后计算它们的比值，即选择性余量 $M$。\n\n首先，我们构建激活概率 $P_{\\text{act}}(C,n)$ 的完整表达式。通过代入给定的定义，我们得到：\n$$S(C,n) = B(C,n) \\, f_{C}(C) = \\left( n \\, f_{A}(C) \\right) f_{C}(C) = n \\left( \\frac{C}{C + K_{A}} \\right) \\left( \\frac{C}{C + K_{C}} \\right) = \\frac{n C^2}{(C + K_{A})(C + K_{C})}$$\n然后，激活概率为：\n$$P_{\\text{act}}(C,n) = \\frac{S(C,n)}{S(C,n) + \\theta} = \\frac{\\frac{n C^2}{(C + K_{A})(C + K_{C})}}{\\frac{n C^2}{(C + K_{A})(C + K_{C})} + \\theta} = \\frac{nC^2}{nC^2 + \\theta(C + K_{A})(C + K_{C})}$$\n为了找到与给定激活概率 $P$ 对应的浓度 $C$，我们必须求解方程 $P_{\\text{act}}(C,n) = P$。在代数上，首先求解信号度量 $S$ 会更简单。从 $P = \\frac{S}{S+\\theta}$，我们重新整理得到 $S(1-P) = P\\theta$，这给出了临界信号水平：\n$$S_{crit} = \\frac{P\\theta}{1-P}$$\n现在，我们令 $S(C,n) = S_{crit}$：\n$$\\frac{n C^2}{(C + K_{A})(C + K_{C})} = S_{crit}$$\n这个方程可以重新整理成二次形式 $aC^2+bC+c=0$：\n$$n C^2 = S_{crit}(C^2 + (K_A + K_C)C + K_A K_C)$$\n$$(n - S_{crit}) C^2 - S_{crit}(K_A + K_C)C - S_{crit}K_A K_C = 0$$\n浓度 $C$ 的物理意义解必须为正值。使用二次公式，我们得到：\n$$C = \\frac{S_{crit}(K_A + K_C) + \\sqrt{\\left(S_{crit}(K_A + K_C)\\right)^2 + 4(n - S_{crit})(S_{crit}K_A K_C)}}{2(n - S_{crit})}$$\n我们为分子选择了正根。为使此解为正，分母 $n-S_{crit}$ 也必须为正，我们将在每种情况下对此进行验证。函数 $S(C,n)$ 在 $C>0$ 时随 $C$ 单调递增。因此，形式为 $P_{\\text{act}} \\ge P$ 的不等式等价于 $C \\ge C_{\\text{solution}}$，而 $P_{\\text{act}} \\le P$ 等价于 $C \\le C_{\\text{solution}}$。\n\n为了求出 $C_{\\min}$，我们分析有效性条件：$P_{\\text{act}}(C,n_{\\text{tumor}}) \\ge e_{\\min}$。这设定了所需的最小浓度。\n此处，$P = e_{\\min} = 0.90$，$n=n_{\\text{tumor}}=5.0 \\times 10^4$。有效性的临界信号水平是：\n$$S_{\\text{eff}} = \\frac{e_{\\min}\\theta}{1-e_{\\min}} = \\frac{0.90 \\times (1.0 \\times 10^3)}{1-0.90} = \\frac{900}{0.10} = 9000$$\n二次方程中 $C$ 的系数由 $n_{\\text{tumor}}=5.0 \\times 10^4$，$S_{crit}=S_{\\text{eff}}=9000$，$K_A=10$ 和 $K_C=30$ 决定。\n- $a = n_{\\text{tumor}} - S_{\\text{eff}} = 50000 - 9000 = 41000$（此为正值，符合要求。）\n- $b = -S_{\\text{eff}}(K_A + K_C) = -9000(10+30) = -360000$\n- $c = -S_{\\text{eff}}K_A K_C = -9000(10 \\times 30) = -2700000$\n二次方程为 $41000 C^2 - 360000 C - 2700000 = 0$，可简化为 $41 C^2 - 360 C - 2700 = 0$。\n其解给出 $C_{\\min}$：\n$$C_{\\min} = \\frac{360 + \\sqrt{(-360)^2 - 4(41)(-2700)}}{2(41)} = \\frac{360 + \\sqrt{129600 + 442800}}{82} = \\frac{360 + \\sqrt{572400}}{82}$$\n$$C_{\\min} \\approx \\frac{360 + 756.571}{82} \\approx 13.6167\\,\\mathrm{nM}$$\n\n为了求出 $C_{\\max}$，我们分析安全性条件：$P_{\\text{act}}(C,n_{\\text{normal}}) \\le r_{\\max}$。这设定了允许的最大浓度。\n此处，$P = r_{\\max} = 0.10$，$n=n_{\\text{normal}}=5.0 \\times 10^2$。安全性的临界信号水平是：\n$$S_{\\text{safe}} = \\frac{r_{\\max}\\theta}{1-r_{\\max}} = \\frac{0.10 \\times (1.0 \\times 10^3)}{1-0.10} = \\frac{100}{0.90} = \\frac{1000}{9}$$\n二次方程的系数由 $n_{\\text{normal}}=500$，$S_{crit}=S_{\\text{safe}}=\\frac{1000}{9}$，$K_A=10$ 和 $K_C=30$ 决定。\n- $a = n_{\\text{normal}} - S_{\\text{safe}} = 500 - \\frac{1000}{9} = \\frac{4500-1000}{9} = \\frac{3500}{9}$（正值，符合要求。）\n- $b = -S_{\\text{safe}}(K_A + K_C) = -\\frac{1000}{9}(40) = -\\frac{40000}{9}$\n- $c = -S_{\\text{safe}}K_A K_C = -\\frac{1000}{9}(300) = -\\frac{300000}{9}$\n方程为 $\\frac{3500}{9} C^2 - \\frac{40000}{9} C - \\frac{300000}{9} = 0$，可简化为 $35 C^2 - 400 C - 3000 = 0$，并进一步简化为 $7 C^2 - 80 C - 600 = 0$。\n其解给出 $C_{\\max}$：\n$$C_{\\max} = \\frac{80 + \\sqrt{(-80)^2 - 4(7)(-600)}}{2(7)} = \\frac{80 + \\sqrt{6400 + 16800}}{14} = \\frac{80 + \\sqrt{23200}}{14}$$\n$$C_{\\max} \\approx \\frac{80 + 152.315}{14} \\approx 16.5940\\,\\mathrm{nM}$$\n\n治疗窗口是区间 $[C_{\\min}, C_{\\max}]$，该区间存在是因为 $C_{\\min} < C_{\\max}$。选择性余量 $M$ 是这些浓度的比值：\n$$M = \\frac{C_{\\max}}{C_{\\min}} \\approx \\frac{16.5940}{13.6167} \\approx 1.21865$$\n四舍五入到三位有效数字，我们得到 $M = 1.22$。", "answer": "$$\\boxed{1.22}$$", "id": "2837361"}, {"introduction": "要全面评估BiTE疗法在体内的动态效果，必须整合药代动力学（PK）、药效动力学（PD）以及肿瘤与免疫系统的相互作用。这个高级动手实践将指导您构建一个最小定量系统药理学（QSP）模型，通过常微分方程来描述这些复杂的动态过程。通过编程模拟完整的治疗过程并执行灵敏度分析，您将洞察到哪些药理学或生物学参数是决定治疗成败的最关键因素。[@problem_id:2837358]", "problem": "构建一个独立的程序，用于编码和分析一个用于双特异性 T 细胞衔接器 (BiTE; bispecific T cell engager) 疗法的最小定量系统药理学 (QSP) 模型。该模型必须使用基于核心免疫学和药理学原理的常微分方程，将药代动力学、T 细胞活化、细胞因子产生和肿瘤负荷联系起来。假设以下基本原理和建模假设，这些必须用于推导该系统和计算：\n\n1. 药代动力学：初始推注后，血浆中的 BiTE 浓度 $C(t)$ 符合一级消除，因此\n$$\n\\frac{dC}{dt} = -k_{\\mathrm{el}}\\, C, \\quad C(0) = C_0,\n$$\n其中 $k_{\\mathrm{el}}$ 是一个消除速率常数，$C_0$ 是时间 $t=0$ 时的初始浓度。\n\n2. 受体占有率和活化耦合：BiTE 驱动的 T 细胞活化与一个从 Langmuir 等温线推导出的、类似受体占有率的函数成正比，\n$$\nE(C) = \\frac{C}{\\mathrm{EC}_{50} + C},\n$$\n其中 $\\mathrm{EC}_{50}$ 是半最大效应浓度。\n\n3. T 细胞活化动力学：设 $a(t)$ 为活化 T 细胞的比例，T 细胞总密度 $T$ 在时间范围内假设为常数。活化比例通过活化和去活化演变，\n$$\n\\frac{da}{dt} = k_{\\mathrm{act}}\\, E(C)\\, (1 - a) - k_{\\mathrm{deact}}\\, a, \\quad a(0)=0,\n$$\n其中 $k_{\\mathrm{act}}$ 和 $k_{\\mathrm{deact}}$ 分别是活化和去活化速率常数。\n\n4. 细胞因子动力学：设 $Y(t)$ 表示一个代表性细胞因子的浓度（例如，白细胞介素-2），它由活化 T 细胞按比例产生，并以一级动力学清除，\n$$\n\\frac{dY}{dt} = k_{\\mathrm{cyt}} \\, (a\\, T) - k_{\\mathrm{cyt,cl}}\\, Y, \\quad Y(0)=0,\n$$\n其中 $k_{\\mathrm{cyt}}$ 是每细胞产出系数，$k_{\\mathrm{cyt,cl}}$ 是细胞因子清除率。\n\n5. 肿瘤动力学：肿瘤细胞密度 $X(t)$ 遵循逻辑斯蒂增长，其环境承载能力为 $K$，内在增长率为 $r_g$，并以与活化 T 细胞比例成正比的速率被杀伤，\n$$\n\\frac{dX}{dt} = r_g\\, X \\left(1 - \\frac{X}{K}\\right) - k_{\\mathrm{kill}}\\, a\\, X,\\quad X(0)=X_0,\n$$\n其中 $k_{\\mathrm{kill}}$ 是随 $a(t)$ 变化的每小时最大杀伤率。\n\n您的程序必须：\n- 对每个测试用例，在一个固定的时间范围 $[0, T_{\\mathrm{end}}]$ 内，使用科学合理的容差和一个合适的自适应 ODE 求解器，对耦合系统进行数值积分。\n- 计算一个定义为在 $T_{\\mathrm{end}}$ 时肿瘤分数减少量的疗效指标，\n$$\nf = 1 - \\frac{X(T_{\\mathrm{end}})}{X_0},\n$$\n该指标必须以小数形式报告（无单位）。\n- 对参数向量\n$$\n\\mathbf{p} = \\left(C_0,\\; k_{\\mathrm{el}},\\; \\mathrm{EC}_{50},\\; k_{\\mathrm{act}},\\; k_{\\mathrm{deact}},\\; k_{\\mathrm{kill}},\\; r_g\\right),\n$$\n针对 $f$ 进行局部有限差分灵敏度分析，对每个参数 $p_i$ 使用大小为 $\\epsilon$ 的对称相对扰动，\n$$\nS_i = \\left|\\frac{f(\\ldots, p_i(1+\\epsilon), \\ldots) - f(\\ldots, p_i(1-\\epsilon), \\ldots)}{2\\, \\epsilon\\, p_i}\\right|.\n$$\n按 $S_i$ 降序对灵敏度进行排序，并识别出前两个最敏感参数的索引（从零开始）。索引必须严格对应于上面所写的 $\\mathbf{p}$ 中的顺序，其中 $C_0$ 的索引为 $0$，$r_g$ 的索引为 $6$。\n\n对所有测试用例使用以下固定的建模和数值规范：\n- 初始活化比例 $a(0)=0$，初始细胞因子 $Y(0)=0$，初始肿瘤 $X(0)=X_0$。\n- 时间单位为小时；按每个测试用例的指定积分至 $T_{\\mathrm{end}}$。\n- 灵敏度分析使用对称相对扰动大小 $\\epsilon = 0.01$。\n- 如果数值积分因数值误差产生负的肿瘤值，在计算 $f$ 时将 $X(T_{\\mathrm{end}})$ 视为 $\\max\\{X(T_{\\mathrm{end}}), 0\\}$。\n\n测试套件：对以下每个参数集运行程序；除非另有说明，省略的参数取基线值。所有量均为标量。\n\n基线值：\n- $T = 3\\times 10^5$ (细胞/毫升),\n- $k_{\\mathrm{cyt}} = 5\\times 10^{-6}$ (皮克/(细胞·小时)),\n- $k_{\\mathrm{cyt,cl}} = 0.5$ (/小时),\n- $K = 10^9$ (细胞/毫升),\n- $X_0 = 10^8$ (细胞/毫升),\n- $T_{\\mathrm{end}} = 240$ (小时).\n\n测试用例 1 (基线药理学和动力学):\n- $C_0 = 50$ (纳克/毫升),\n- $k_{\\mathrm{el}} = 0.2$ (/小时),\n- $\\mathrm{EC}_{50} = 20$ (纳克/毫升),\n- $k_{\\mathrm{act}} = 0.5$ (/小时),\n- $k_{\\mathrm{deact}} = 0.1$ (/小时),\n- $k_{\\mathrm{kill}} = 0.15$ (/小时),\n- $r_g = 0.01$ (/小时).\n\n测试用例 2 (低初始暴露):\n- $C_0 = 1$,\n- 其他参数与测试用例 1 相同，除非另有列出。\n\n测试用例 3 (快速消除):\n- $C_0 = 50$,\n- $k_{\\mathrm{el}} = 1.0$,\n- 其他参数与测试用例 1 相同，除非另有列出。\n\n测试用例 4 (高效价和高杀伤能力):\n- $C_0 = 50$,\n- $\\mathrm{EC}_{50} = 5$,\n- $k_{\\mathrm{kill}} = 0.3$,\n- 其他参数与测试用例 1 相同，除非另有列出。\n\n您的程序必须输出单行，其中包含四个测试用例的结果，形式为方括号括起来的逗号分隔列表。每个测试用例的结果必须是包含三个条目的列表：\n- 疗效 $f$，四舍五入到六位小数（无单位），\n- 最敏感参数的索引（整数，在 $\\{0,1,2,3,4,5,6\\}$ 中），\n- 第二敏感参数的索引（整数，在 $\\{0,1,2,3,4,5,6\\}$ 中）。\n\n例如，最后一行必须看起来像\n$$\n[\\,[f_1,i_{1,1},i_{1,2}],\\,[f_2,i_{2,1},i_{2,2}],\\,[f_3,i_{3,1},i_{3,2}],\\,[f_4,i_{4,1},i_{4,2}]\\,],\n$$\n其中每个 $f_j$ 是一个四舍五入到六位小数的小数，而 $i_{j,1}, i_{j,2}$ 是整数，表示在规定的 $\\mathbf{p}$ 参数顺序下，测试用例 $j$ 最敏感和第二敏感的参数索引。", "solution": "该问题要求构建和分析一个用于双特异性 T 细胞衔接器 (BiTE) 的定量系统药理学 (QSP) 模型。该模型由一个耦合常微分方程 (ODE) 系统描述。任务是数值求解该系统，计算一个疗效指标，并进行局部灵敏度分析。我已验证问题陈述，并发现其在科学上是合理的、适定的且计算上是可行的。以下详细说明了所需程序的原则性设计。\n\n系统在任何时间 $t$ 的状态由一个向量 $\\mathbf{y}(t) = [C(t), a(t), Y(t), X(t)]^T$ 描述，其中：\n- $C(t)$ 是血浆中的 BiTE 浓度。\n- $a(t)$ 是活化 T 细胞的比例。\n- $Y(t)$ 是一个代表性细胞因子的浓度。\n- $X(t)$ 是肿瘤细胞的密度。\n\n系统的动力学由以下一阶 ODE 系统 $\\frac{d\\mathbf{y}}{dt} = \\mathbf{f}(t, \\mathbf{y})$ 控制：\n\n1.  **BiTE 的药代动力学 (PK)：** 药物浓度 $C(t)$ 在初始推注剂量 $C_0$ 后遵循一级消除。\n    $$\n    \\frac{dC}{dt} = -k_{\\mathrm{el}} C(t)\n    $$\n    初始条件为 $C(0) = C_0$。\n\n2.  **T 细胞活化：** 活化 T 细胞的比例 $a(t)$ 的演变基于活化和去活化之间的平衡。活化由 BiTE 浓度通过一个类似 Langmuir 等温线的函数 $E(C) = \\frac{C}{\\mathrm{EC}_{50} + C}$ 驱动。\n    $$\n    \\frac{da}{dt} = k_{\\mathrm{act}} E(C(t)) (1 - a(t)) - k_{\\mathrm{deact}} a(t)\n    $$\n    初始条件为 $a(0) = 0$。\n\n3.  **细胞因子动力学：** 细胞因子浓度 $Y(t)$ 由活化 T 细胞（总密度为 $a(t)T$，其中 $T$ 为常数）产生，并通过一级动力学清除。\n    $$\n    \\frac{dY}{dt} = k_{\\mathrm{cyt}} a(t) T - k_{\\mathrm{cyt,cl}} Y(t)\n    $$\n    初始条件为 $Y(0) = 0$。\n\n4.  **肿瘤动力学：** 肿瘤细胞密度 $X(t)$ 遵循逻辑斯蒂增长，并因活化 T 细胞的杀伤而减少。\n    $$\n    \\frac{dX}{dt} = r_g X(t) \\left(1 - \\frac{X(t)}{K}\\right) - k_{\\mathrm{kill}} a(t) X(t)\n    $$\n    初始条件为 $X(0) = X_0$。\n\n该 ODE 系统构成一个初值问题 (IVP)。为解决此问题，我们采用一个数值积分器。SciPy 库中的 `scipy.integrate.solve_ivp` 函数是合适的，它利用了诸如 Dormand-Prince 对 (`RK45`) 之类的自适应步长方法。为确保科学上合理且准确的解，我们将相对容差设置为 $10^{-6}$，绝对容差设置为 $10^{-8}$。积分在时间区间 $[0, T_{\\mathrm{end}}]$ 上执行。\n\n求解系统后，我们计算主要疗效指标 $f$，定义为在最终时间 $T_{\\mathrm{end}}$ 时的肿瘤分数减少量：\n$$\nf = 1 - \\frac{X(T_{\\mathrm{end}})}{X_0}\n$$\n根据问题规范，任何由数值近似产生的不符合物理意义的 $X(T_{\\mathrm{end}})$ 负值都被截断为零，即 $X(T_{\\mathrm{end}}) \\leftarrow \\max(0, X(T_{\\mathrm{end}}))$。\n\n接下来，对疗效指标 $f$ 相对于参数向量 $\\mathbf{p} = (C_0, k_{\\mathrm{el}}, \\mathrm{EC}_{50}, k_{\\mathrm{act}}, k_{\\mathrm{deact}}, k_{\\mathrm{kill}}, r_g)$ 进行局部灵敏度分析。每个参数 $p_i$ 的灵敏度 $S_i$ 使用对称有限差分商计算，相对扰动 $\\epsilon = 0.01$：\n$$\nS_i = \\left|\\frac{f(\\mathbf{p}') - f(\\mathbf{p}'')}{2 \\epsilon p_i}\\right|\n$$\n其中 $\\mathbf{p}'$ 是将 $p_i$ 扰动至 $p_i(1+\\epsilon)$ 后的参数向量，$\\mathbf{p}''$ 是将 $p_i$ 扰动至 $p_i(1-\\epsilon)$ 后的向量。这要求对每次扰动重新评估整个 ODE 解。在计算出灵敏度 $\\{S_0, S_1, \\ldots, S_6\\}$ 后，我们识别出具有最高灵敏度值的两个参数的索引。\n\n计算流程如下：\n1.  定义一个函数来表示 ODE 系统。\n2.  对每个测试用例，通过组合基线值和用例特定的覆盖值来组装完整的参数集。\n3.  定义一个主模拟函数，该函数接收一个参数集，求解 IVP，并返回最终的肿瘤细胞密度。\n4.  对当前测试用例的基线参数集，计算疗效 $f_{base}$。\n5.  遍历灵敏度向量中的每个参数 $p_i$：\n    a. 创建两个扰动参数集：一个用于 $p_i(1+\\epsilon)$，另一个用于 $p_i(1-\\epsilon)$。\n    b. 对每个扰动集调用主模拟函数以获得 $f(\\mathbf{p}')$ 和 $f(\\mathbf{p}'')$。\n    c. 使用指定公式计算灵敏度 $S_i$。\n6.  按降序对计算出的灵敏度进行排序，并提取前两名的从零开始的索引。\n7.  存储该测试用例的结果：四舍五入后的基线疗效 $f_{base}$ 和两个索引。\n8.  处理完所有测试用例后，将收集到的结果格式化为指定的字符串表示形式。\n这种结构化方法确保了问题的所有要求都以科学和数值的严谨性得到满足。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef ode_system(t, y, params):\n    \"\"\"\n    Defines the system of ordinary differential equations for the QSP model.\n    State vector y = [C, a, Y, X].\n    \"\"\"\n    C, a, Y, X = y\n    \n    # Unpack parameters\n    kel = params['kel']\n    EC50 = params['EC50']\n    k_act = params['k_act']\n    k_deact = params['k_deact']\n    k_cyt = params['k_cyt']\n    T = params['T']\n    k_cyt_cl = params['k_cyt_cl']\n    rg = params['rg']\n    K = params['K']\n    k_kill = params['k_kill']\n\n    # Handle C < 0 due to numerical error, though unlikely\n    C = max(0, C)\n    \n    # Rate of change equations\n    dC_dt = -kel * C\n    \n    E_C = C / (EC50 + C)\n    da_dt = k_act * E_C * (1 - a) - k_deact * a\n    \n    dY_dt = k_cyt * a * T - k_cyt_cl * Y\n    \n    # Handle X < 0, important for logistic term stability\n    # If X becomes negative, the logistic term turns into exponential growth,\n    # which is undesirable. We let the solver handle it and clip at the end.\n    dX_dt = rg * X * (1 - X / K) - k_kill * a * X\n\n    return [dC_dt, da_dt, dY_dt, dX_dt]\n\ndef run_simulation(params):\n    \"\"\"\n    Runs the ODE simulation for a given set of parameters.\n    Returns the final tumor cell density.\n    \"\"\"\n    y0 = [params['C0'], 0.0, 0.0, params['X0']]\n    t_span = [0, params['Tend']]\n    \n    sol = solve_ivp(\n        ode_system,\n        t_span,\n        y0,\n        args=(params,),\n        method='RK45',\n        rtol=1e-6,\n        atol=1e-8\n    )\n    \n    # Return the final tumor cell density from the last time point\n    X_final = sol.y[3, -1]\n    return X_final\n\ndef calculate_efficacy(X_final, X0):\n    \"\"\"\n    Calculates the efficacy metric f.\n    \"\"\"\n    X_final_nonneg = max(0.0, X_final)\n    f = 1.0 - X_final_nonneg / X0\n    return f\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases.\n    \"\"\"\n    # Fixed modeling and numerical specifications\n    BASELINE_VALUES = {\n        'T': 3e5,          # cells/mL\n        'k_cyt': 5e-6,     # pg/(cell*hr)\n        'k_cyt_cl': 0.5,   # /hr\n        'K': 1e9,          # cells/mL\n        'X0': 1e8,         # cells/mL\n        'Tend': 240.0,     # hours\n    }\n    \n    SENSITIVITY_PARAMS = ['C0', 'kel', 'EC50', 'k_act', 'k_deact', 'k_kill', 'rg']\n    EPSILON = 0.01\n\n    # Test cases defined relative to case 1\n    case1_params = {'C0': 50.0, 'kel': 0.2, 'EC50': 20.0, 'k_act': 0.5, 'k_deact': 0.1, 'k_kill': 0.15, 'rg': 0.01}\n    \n    test_cases_overrides = [\n        {}, # Case 1\n        {'C0': 1.0},                                 # Case 2\n        {'kel': 1.0},                                # Case 3\n        {'EC50': 5.0, 'k_kill': 0.3},                 # Case 4\n    ]\n\n    all_results = []\n\n    for i, overrides in enumerate(test_cases_overrides):\n        \n        # Create full parameter set for the current test case\n        current_case_params = case1_params.copy()\n        current_case_params.update(overrides)\n\n        all_params = BASELINE_VALUES.copy()\n        all_params.update(current_case_params)\n\n        # 1. Calculate base efficacy f_base\n        X_final_base = run_simulation(all_params)\n        f_base = calculate_efficacy(X_final_base, all_params['X0'])\n\n        # 2. Perform sensitivity analysis\n        sensitivities = []\n        for p_name in SENSITIVITY_PARAMS:\n            p_val = all_params[p_name]\n            \n            # Perturb up\n            params_up = all_params.copy()\n            params_up[p_name] = p_val * (1 + EPSILON)\n            X_final_up = run_simulation(params_up)\n            f_up = calculate_efficacy(X_final_up, all_params['X0'])\n            \n            # Perturb down\n            params_down = all_params.copy()\n            params_down[p_name] = p_val * (1 - EPSILON)\n            X_final_down = run_simulation(params_down)\n            f_down = calculate_efficacy(X_final_down, all_params['X0'])\n            \n            # Calculate sensitivity S_i\n            # The case p_val = 0 is not expected for this problem's parameters\n            if p_val == 0:\n                S_i = 0.0 \n            else:\n                S_i = abs((f_up - f_down) / (2 * EPSILON * p_val))\n            sensitivities.append(S_i)\n            \n        # 3. Find top two sensitive parameters\n        # argsort gives indices that would sort the array in ascending order\n        sorted_indices = np.argsort(sensitivities)[::-1]\n        top1_idx = sorted_indices[0]\n        top2_idx = sorted_indices[1]\n        \n        # 4. Store the results for this case\n        all_results.append([f_base, top1_idx, top2_idx])\n\n    # 5. Format the final output string\n    result_strings = []\n    for res in all_results:\n        f_val, idx1, idx2 = res\n        result_strings.append(f\"[{f_val:.6f},{idx1},{idx2}]\")\n    \n    final_output = f\"[{','.join(result_strings)}]\"\n    # This print statement is for the platform's execution.\n    # The actual output string is constructed and printed once.\n    print(final_output)\n\n# This block allows the code to be run directly for testing.\nif __name__ == '__main__':\n    solve()\n```", "id": "2837358"}]}