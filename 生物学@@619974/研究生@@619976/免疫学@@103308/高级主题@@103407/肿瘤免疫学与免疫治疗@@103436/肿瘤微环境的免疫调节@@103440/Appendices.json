{"hands_on_practices": [{"introduction": "要理解免疫疗法的作用机制，我们必须首先掌握其在分子层面的基本原理。本练习将免疫检查点这一抽象概念与受体-配体结合动力学这一具体的物理现实联系起来。通过应用质量作用定律，您将推导并计算在典型的肿瘤微环境中，有多少比例的 $PD-1$ 受体被其配体 $PD-L1$ 占据，从而深入理解抑制性信号的强度，并为评估检查点抑制剂疗法的效用奠定定量的基础。[@problem_id:2903028]", "id": "2903028", "problem": "一个实体瘤块在癌细胞和基质细胞上大量表达程序性死亡配体1 (PD-L1)，在分化簇8 (CD8) T细胞的细胞周质空间中建立了一个有效的局部游离配体浓度，稳态时为 $[L]=10\\,\\mathrm{nM}$。这些T细胞上的程序性死亡蛋白1 (PD-1) 受体与PD-L1结合，在生理温度下的平衡解离常数为 $K_{D}=1\\,\\mathrm{nM}$。假设在游离配体 $L$、游离受体 $R$ 和复合物 $LR$ 之间存在单位点、可逆的 $1{:}1$ 配体-受体相互作用，并满足快速平衡和均一条件。仅使用质量作用定律和平衡解离常数的定义，从第一性原理推导出被PD-L1占据的PD-1受体的平衡分数，定义为 $f=\\frac{[LR]}{[R]_{T}}$，其中 $[R]_{T}$ 是T细胞上的总PD-1受体浓度。明确说明你所引用的任何标准近似。\n\n计算当 $[L]=10\\,\\mathrm{nM}$ 和 $K_{D}=1\\,\\mathrm{nM}$ 时 $f$ 的数值。将最终结果表示为无量纲小数，并四舍五入至四位有效数字。\n\n简要地（用一两句话）解释此受体占有率对于通过PD-1的免疫受体酪氨酸抑制基序 (ITIM) 和免疫受体酪氨酸转换基序 (ITSM) 的下游抑制性信号传导意味着什么，包括对含Src同源2结构域的磷酸酶-2 (SHP-2) 的招募以及对T细胞受体 (TCR) 和 CD28 信号传导的影响。你的解释无需是定量的。", "solution": "首先，将对问题陈述进行严格的验证过程。\n\n### 步骤1：提取已知条件\n问题陈述中提供的明确信息如下：\n- 稳态时的局部游离配体浓度：$[L] = 10\\,\\mathrm{nM}$\n- 平衡解离常数：$K_{D} = 1\\,\\mathrm{nM}$\n- 相互作用模型：单位点、可逆的 $1{:}1$ 配体-受体相互作用 ($L + R \\rightleftharpoons LR$)\n- 假设：快速平衡，均一条件\n- 分数占有率的定义：$f = \\frac{[LR]}{[R]_{T}}$，其中 $[R]_{T}$ 是总受体浓度。\n- 任务1：从第一性原理推导 $f$ 的表达式。\n- 任务2：计算 $f$ 的数值。\n- 任务3：在T细胞信号传导的背景下，对结果进行简要的定性解释。\n\n### 步骤2：使用提取的已知条件进行验证\n根据所需标准对问题进行评估。\n- **科学依据**：该问题坚实地基于物理化学（质量作用定律，化学平衡）和免疫学（受体-配体相互作用，特别是PD-1/PD-L1检查点通路）的基本原理。给定的 $K_{D}$ 和 $[L]$ 值对于此系统在生物学上是合理的。该问题在科学上是合理的。\n- **适定性**：该问题是适定的。它描述了一个标准的受体-配体结合模型，并要求进行推导和计算，存在唯一、稳定且有意义的解。所有必要的参数均已提供。\n- **客观性**：该问题以精确、客观和定量的术语表述。它没有主观或模棱两可的语言。\n- **完整性**：该问题是自洽的。它提供了推导公式和计算数值结果所需的所有必要数据（$[L]$, $K_D$）和定义。\n- **其他缺陷**：该问题没有表现出任何其他缺陷。它不是无足轻重的，因为它要求从第一性原理进行推导。它不是隐喻性的、矛盾的或无法验证的。\n\n### 步骤3：结论与行动\n该问题被判定为**有效**。将提供解答。\n\n该问题要求从第一性原理推导程序性死亡蛋白1 (PD-1) 受体的分数占有率。\n\n该系统描述了游离配体 $L$ (PD-L1)、游离受体 $R$ (PD-1) 和配体-受体复合物 $LR$ 之间的一个可逆的、单位点的结合平衡：\n$$\nR + L \\rightleftharpoons LR\n$$\n将质量作用定律应用于此平衡系统，可得到平衡解离常数 $K_D$ 的定义：\n$$\nK_D = \\frac{[R][L]}{[LR]}\n$$\n此处，$[R]$ 和 $[L]$ 分别是平衡时游离受体和游离配体的浓度，$[LR]$ 是结合复合物的浓度。\n\n总受体浓度 $[R]_T$ 是游离受体和结合受体浓度之和：\n$$\n[R]_T = [R] + [LR]\n$$\n目标是求出分数占有率 $f$，其定义为：\n$$\nf = \\frac{[LR]}{[R]_T}\n$$\n为了推导出用 $[L]$ 和 $K_D$ 表示 $f$ 的表达式，我们必须从方程组中消去 $[R]$ 和 $[LR]$。首先，我们重排 $K_D$ 的定义，用其他量来表示游离受体浓度 $[R]$：\n$$\n[R] = \\frac{K_D [LR]}{[L]}\n$$\n接下来，我们将 $[R]$ 的这个表达式代入总受体浓度的方程中：\n$$\n[R]_T = \\frac{K_D [LR]}{[L]} + [LR]\n$$\n将右侧的 $[LR]$ 项提取出来，得到：\n$$\n[R]_T = [LR] \\left( \\frac{K_D}{[L]} + 1 \\right)\n$$\n为了求出分数占有率 $f$，我们重排此方程，得到比率 $\\frac{[LR]}{[R]_T}$：\n$$\nf = \\frac{[LR]}{[R]_T} = \\frac{1}{\\frac{K_D}{[L]} + 1}\n$$\n通过将分子和分母同乘以 $[L]$，可以对该表达式进行代数简化：\n$$\nf = \\frac{[L]}{K_D + [L]}\n$$\n这是从第一性原理推导出的所需的分数占有率表达式。这是单结合位点（$n=1$）下Hill-Langmuir方程的一种特定形式。需要注意的是，题目给出的是平衡时的*游离*配体浓度 $[L]$。一种常见情况是知道总配体浓度 $[L]_T$。在这种情况下，通常必须引用近似 $[L] \\approx [L]_T$，该近似在总受体浓度远小于总配体浓度（$[R]_T \\ll [L]_T$）时有效，可以防止显著的配体消耗。然而，题目陈述直接提供了 $[L]$，使得在计算阶段无需使用此近似。\n\n现在，我们使用所提供的数据计算 $f$ 的数值：\n- $[L] = 10\\,\\mathrm{nM}$\n- $K_D = 1\\,\\mathrm{nM}$\n\n将这些值代入推导出的公式中：\n$$\nf = \\frac{10\\,\\mathrm{nM}}{1\\,\\mathrm{nM} + 10\\,\\mathrm{nM}} = \\frac{10}{11}\n$$\n按照要求，将此分数转换为小数并四舍五入到四位有效数字：\n$$\nf \\approx 0.909090... \\approx 0.9091\n$$\n因此，在稳态下，T细胞上大约有 $90.91\\%$ 的PD-1受体被PD-L1占据。\n\n最后，需要一个简短的解释。大约 $91\\%$ 的高受体占有率确保了磷酸酶SHP-2能被有效招募至PD-1的磷酸化ITIM和ITSM结构域。这种招募导致T细胞受体 (TCR) 和 CD28 通路中关键信号分子的强烈去磷酸化和信号衰减，从而抑制T细胞活化并促进耗竭表型。", "answer": "$$\n\\boxed{0.9091}\n$$"}, {"introduction": "除了直接的细胞间接触抑制，肿瘤微环境还通过重塑代谢环境来抑制免疫细胞。本练习将引导您探索这一关键的免疫抑制机制，重点关注吲哚胺2,3-双加氧酶 (Indoleamine 2,3-dioxygenase, IDO) 的活性。您将使用经典的米氏-孟顿 (Michaelis-Menten) 模型，来量化当关键营养物质色氨酸被消耗时，IDO 的催化速率如何变化，从而将酶动力学原理与免疫代谢的调控直接联系起来。[@problem_id:2902987]", "id": "2902987", "problem": "在实体瘤微环境中，肿瘤相关树突状细胞表达吲哚胺2,3-双加氧酶 (Indoleamine 2,3-dioxygenase, IDO)，该酶将色氨酸氧化为犬尿氨酸，从而耗尽可供T细胞使用的细胞外色氨酸。将IDO视为一种在初始速率条件下作用于色氨酸的单底物酶，其产物可忽略不计，且在实验时间尺度上催化作用是不可逆的。假设经典基元反应式 $E + S \\rightleftharpoons ES \\rightarrow E + P$ 适用，其中S代表色氨酸，且总酶浓度 $[E]_{T}$ 是恒定的，满足 $[E]_{T} \\ll [S]$。从质量作用定律和对酶-底物复合物的稳态近似出发，推导初始速率 $v$ 作为底物浓度 $[S]$ 和动力学参数的函数的速率定律。然后，使用 $K_{M} = 20\\,\\mu\\mathrm{M}$ 以及细胞外色氨酸浓度从 $[S]_{\\mathrm{high}} = 50\\,\\mu\\mathrm{M}$ 降至 $[S]_{\\mathrm{low}} = 5\\,\\mu\\mathrm{M}$ 的条件，计算定义为 $v_{\\mathrm{low}}/v_{\\mathrm{high}}$ 的初始速率倍数变化。\n\n你的最终答案必须是一个无单位的无量纲数。不要四舍五入；以最简形式给出精确值。", "solution": "在尝试任何解答之前，对问题陈述进行验证。\n\n步骤1：提取已知条件\n-   系统：吲哚胺2,3-双加氧酶 (IDO) 作用于色氨酸 ($S$)。\n-   反应式：$E + S \\rightleftharpoons ES \\rightarrow E + P$，在实验时间尺度上催化作用不可逆。\n-   假设：单底物酶，初始速率条件，产物浓度可忽略，总酶浓度 $[E]_{T}$ 恒定，且 $[E]_{T} \\ll [S]$。\n-   近似：对酶-底物复合物 $[ES]$ 使用稳态近似。\n-   任务1：推导初始速率 $v$ 作为底物浓度 $[S]$ 函数的速率定律。\n-   参数：$K_{M} = 20\\,\\mu\\mathrm{M}$，$[S]_{\\mathrm{high}} = 50\\,\\mu\\mathrm{M}$，$[S]_{\\mathrm{low}} = 5\\,\\mu\\mathrm{M}$。\n-   任务2：计算定义为 $v_{\\mathrm{low}}/v_{\\mathrm{high}}$ 的初始速率倍数变化。\n\n步骤2：使用提取的已知条件进行验证\n-   科学依据：该问题描述了IDO酶的动力学，IDO是肿瘤免疫学中一个被深入研究的靶点。米氏-门顿模型是描述此类单底物酶动力学的标准框架。所列出的假设是初始速率条件下推导该模型的经典假设。问题背景在科学上是合理的。\n-   适定性：该问题提供了推导所需速率定律和执行后续计算的所有必要信息和假设。存在唯一解。\n-   客观性：该问题以精确、客观的语言陈述，没有歧义或主观论断。\n\n步骤3：结论与行动\n该问题是有效的。这是酶动力学中的一个标准练习，基于正确的生物化学背景。将提供解答。\n\n速率定律的推导始于单底物酶IDO作用于其底物色氨酸($S$)的基元反应式。设$E$为酶，$ES$为酶-底物复合物，$P$为产物犬尿氨酸。反应为：\n$$E + S \\underset{k_{-1}}{\\stackrel{k_1}{\\rightleftharpoons}} ES \\stackrel{k_{cat}}{\\longrightarrow} E + P$$\n此处，$k_1$是$ES$复合物形成的速率常数，$k_{-1}$是其解离回$E$和$S$的速率常数，$k_{cat}$（也记作$k_2$）是产物$P$形成和游离酶$E$再生的催化速率常数。\n\n反应的初始速率 $v$ 是产物形成的速率。根据质量作用定律，这由下式给出：\n$$v = \\frac{d[P]}{dt} = k_{cat}[ES]$$\n为了用底物浓度 $[S]$ 表示 $v$，我们必须找到酶-底物复合物浓度 $[ES]$ 的表达式。我们应用稳态近似，该近似假设中间复合物 $[ES]$ 的浓度在反应的初始阶段保持恒定。这在数学上表示为：\n$$\\frac{d[ES]}{dt} = 0$$\n$[ES]$ 的形成速率为 $k_1[E][S]$，其分解速率是解离和催化速率之和，即 $(k_{-1} + k_{cat})[ES]$。在稳态下，这两个速率相等：\n$$k_1[E][S] = (k_{-1} + k_{cat})[ES]$$\n总酶浓度 $[E]_T$ 是游离酶浓度 $[E]$ 和与底物结合的酶浓度 $[ES]$ 之和：\n$$[E]_T = [E] + [ES]$$\n整理可得 $[E]$ 的表达式：\n$$[E] = [E]_T - [ES]$$\n将这个 $[E]$ 的表达式代入稳态方程，得到：\n$$k_1([E]_T - [ES])[S] = (k_{-1} + k_{cat})[ES]$$\n现在我们求解 $[ES]$。展开左侧：\n$$k_1[E]_T[S] - k_1[ES][S] = (k_{-1} + k_{cat})[ES]$$\n合并含有 $[ES]$ 的项：\n$$k_1[E]_T[S] = (k_{-1} + k_{cat})[ES] + k_1[ES][S]$$\n$$k_1[E]_T[S] = [ES](k_{-1} + k_{cat} + k_1[S])$$\n为简化起见，我们将所有项除以 $k_1$：\n$$[E]_T[S] = [ES]\\left(\\frac{k_{-1} + k_{cat}}{k_1} + [S]\\right)$$\n$\\frac{k_{-1} + k_{cat}}{k_1}$ 这一项被定义为米氏常数 $K_M$：\n$$K_M = \\frac{k_{-1} + k_{cat}}{k_1}$$\n将 $K_M$ 代入方程得到：\n$$[E]_T[S] = [ES](K_M + [S])$$\n求解 $[ES]$：\n$$[ES] = \\frac{[E]_T[S]}{K_M + [S]}$$\n现在，我们将这个 $[ES]$ 的表达式代回初始速率方程 $v = k_{cat}[ES]$：\n$$v = k_{cat} \\frac{[E]_T[S]}{K_M + [S]} = \\frac{k_{cat}[E]_T[S]}{K_M + [S]}$$\n当酶被底物完全饱和时，即 $[ES] = [E]_T$ 时，达到最大速率 $V_{max}$。在这种极限情况下，$v = V_{max} = k_{cat}[E]_T$。将 $V_{max}$ 代入速率方程，得到最终的米氏-门顿速率定律：\n$$v = \\frac{V_{max}[S]}{K_M + [S]}$$\n推导至此完成。\n\n接下来，我们根据细胞外色氨酸浓度的下降，计算初始速率的倍数变化 $v_{\\mathrm{low}}/v_{\\mathrm{high}}$。\n在高底物浓度和低底物浓度下的初始速率由下式给出：\n$$v_{\\mathrm{high}} = \\frac{V_{max}[S]_{\\mathrm{high}}}{K_M + [S]_{\\mathrm{high}}}$$\n$$v_{\\mathrm{low}} = \\frac{V_{max}[S]_{\\mathrm{low}}}{K_M + [S]_{\\mathrm{low}}}$$\n倍数变化是这两个速率的比值：\n$$\\frac{v_{\\mathrm{low}}}{v_{\\mathrm{high}}} = \\frac{\\frac{V_{max}[S]_{\\mathrm{low}}}{K_M + [S]_{\\mathrm{low}}}}{\\frac{V_{max}[S]_{\\mathrm{high}}}{K_M + [S]_{\\mathrm{high}}}}$$\n由于总酶浓度是恒定的，$V_{max}$ 项消去。\n$$\\frac{v_{\\mathrm{low}}}{v_{\\mathrm{high}}} = \\frac{[S]_{\\mathrm{low}}}{K_M + [S]_{\\mathrm{low}}} \\cdot \\frac{K_M + [S]_{\\mathrm{high}}}{[S]_{\\mathrm{high}}}$$\n已知数值为：\n$$K_M = 20\\,\\mu\\mathrm{M}$$\n$$[S]_{\\mathrm{high}} = 50\\,\\mu\\mathrm{M}$$\n$$[S]_{\\mathrm{low}} = 5\\,\\mu\\mathrm{M}$$\n将这些数值代入倍数变化的表达式：\n$$\\frac{v_{\\mathrm{low}}}{v_{\\mathrm{high}}} = \\frac{5}{20 + 5} \\cdot \\frac{20 + 50}{50}$$\n$$\\frac{v_{\\mathrm{low}}}{v_{\\mathrm{high}}} = \\frac{5}{25} \\cdot \\frac{70}{50}$$\n化简分数：\n$$\\frac{v_{\\mathrm{low}}}{v_{\\mathrm{high}}} = \\frac{1}{5} \\cdot \\frac{7}{5}$$\n$$\\frac{v_{\\mathrm{low}}}{v_{\\mathrm{high}}} = \\frac{7}{25}$$\n初始速率的倍数变化为 $\\frac{7}{25}$。", "answer": "$$\\boxed{\\frac{7}{25}}$$"}, {"introduction": "肿瘤微环境的最终状态是由多种细胞因子之间复杂的相互作用网络决定的。本练习将带您从单个分子事件进入系统层面，通过构建和模拟一个包含相互促进（IL-12, IFN-γ）和相互抑制（IL-10）反馈回路的最小细胞因子网络，来探索这种复杂性。您将通过计算发现，这些反馈回路如何导致系统出现多个稳定的状态（如“炎症型”或“抑制型”），这一“双稳态” (bistability) 概念是理解肿瘤免疫逃逸以及设计有效联合疗法的关键。[@problem_id:2902946]", "id": "2902946", "problem": "要求您形式化并分析一个代表肿瘤微环境中 Interleukin-12 (IL-12)、Interferon-gamma (IFN-$\\gamma$) 和 Interleukin-10 (IL-10) 的最小、无量纲细胞因子相互作用网络，该网络包含具有生物学动机的反馈回路。将细胞因子浓度建模为三个非负、无量纲、随时间变化的变量：$x(t)$ 代表 IL-12，$y(t)$ 代表 IFN-$\\gamma$，$z(t)$ 代表 IL-10。您必须从核心的免疫学和生物化学建模原理出发，并将其转化为一个动力学系统。然后，对于每个给定的参数集，通过从多个初始条件进行的数值模拟来计算渐近稳定稳态，对不同的终点进行聚类，并根据观测到的稳定稳态集合对所代表的定性肿瘤微环境模式进行分类。\n\n基本基础和建模约束：\n- 产生-衰减动力学：对于每种细胞因子，其净变化率等于产生率减去一阶移除率，移除速率常数为 $d \\gt 0$，这反映了在充分混合的微环境中的衰减和稀释等过程。\n- 受体介导的调控：使用 S 型 Hill 式函数进行激活和抑制调控。设正 Hill 函数为 $H_{+}(u;k,n) = \\dfrac{u^{n}}{k^{n} + u^{n}}$，负 Hill 函数为 $H_{-}(u;k,m) = \\dfrac{1}{1 + \\left(\\dfrac{u}{k}\\right)^{m}}$，其中 $k \\gt 0$，Hill 指数 $n, m \\ge 1$。\n- 反馈结构：IL-12 诱导 IFN-$\\gamma$；IFN-$\\gamma$ 诱导 IL-12（相互正反馈）。IL-10 抑制 IL-12 和 IFN-$\\gamma$ 的产生（负反馈），并且除了基础来源外，IL-10 还受 IFN-$\\gamma$ 诱导。\n\n在这些约束下，构建以下无量纲形式的最小常微分方程系统：\n$$\n\\begin{aligned}\n\\frac{dx}{dt} &= \\left(b_{x} + v_{xy}\\, H_{+}\\!\\left(y; k_{xy}, n_{xy}\\right)\\right)\\, H_{-}\\!\\left(z; k_{xz}, m_{xz}\\right) - d_{x}\\, x,\\\\\n\\frac{dy}{dt} &= \\left(b_{y} + v_{yx}\\, H_{+}\\!\\left(x; k_{yx}, n_{yx}\\right)\\right)\\, H_{-}\\!\\left(z; k_{yz}, m_{yz}\\right) - d_{y}\\, y,\\\\\n\\frac{dz}{dt} &= b_{z} + v_{zy}\\, H_{+}\\!\\left(y; k_{zy}, n_{zy}\\right) - d_{z}\\, z,\n\\end{aligned}\n$$\n其中 $b_{\\cdot} \\ge 0$ 是基础产出项，$v_{\\cdot} \\ge 0$ 是最大调控产出强度，$k_{\\cdot} \\gt 0$ 是激活或抑制半饱和常数，$n_{\\cdot}, m_{\\cdot} \\ge 1$ 是 Hill 指数，$d_{\\cdot} \\gt 0$ 是一阶移除速率。所有变量和参数均为无量纲。无需物理单位。\n\n对于下方的每个参数集，您的程序必须通过从一个小的初始条件网格出发对系统进行积分，来近似计算渐近稳定稳态的集合，并识别满足稳态标准的独特终点。然后使用以下阈值对该参数集的定性肿瘤微环境模式进行分类：\n- 若 $x \\ge 0.6$、$y \\ge 0.6$ 且 $z \\le 0.4$，则定义为炎性状态。\n- 若 $z \\ge 0.6$、$x \\le 0.4$ 且 $y \\le 0.4$，则定义为抑制状态。\n- 任何其他稳态均为混合型。\n\n为每个参数集计算一个整数代码，以总结所找到的稳定稳态集合：\n- 若只找到炎性状态，输出 $1$。\n- 若只找到抑制状态，输出 $0$。\n- 若同时找到至少一个炎性状态和至少一个抑制状态（双稳态），输出 $2$。\n- 否则（例如，仅有混合型，或不包含炎性与抑制两种状态的混合情况），输出 $3$。\n\n数值要求和算法指导：\n- 使用一个覆盖每个变量在 $[0, 1.2]$ 区间内低、中、高值的初始条件网格（例如，对 $x$、$y$ 和 $z$ 使用 $\\{0.01, 0.5, 1.2\\}$ 的笛卡尔积），从每个网格点开始对时间进行前向积分，并将长时间极限视为候选稳态。\n- 使用自适应步长方法积分至一个足够大的最终时间 $T$（例如，$T = 200$）。如果某个候选终点 $(x^{\\ast}, y^{\\ast}, z^{\\ast})$ 处的右侧向量场的范数小于一个很小的容差（例如，$10^{-6}$），或者在最终时间窗口内状态变化可忽略不计，则该终点被接受为稳态。将欧几里得距离小于一个很小容差（例如，$10^{-3}$）的终点进行聚类，以定义不同的稳态。\n- 所有计算都是无量纲的；无需报告物理单位。\n\n参数集测试套件：\n- 案例 A（炎性主导目标）：\n  - $b_{x} = 0.02$, $b_{y} = 0.02$, $b_{z} = 0.01$.\n  - $v_{xy} = 1.20$, $k_{xy} = 0.30$, $n_{xy} = 2$.\n  - $v_{yx} = 1.20$, $k_{yx} = 0.30$, $n_{yx} = 2$.\n  - $v_{zy} = 0.30$, $k_{zy} = 0.50$, $n_{zy} = 2$.\n  - $k_{xz} = 0.50$, $m_{xz} = 2$; $k_{yz} = 0.50$, $m_{yz} = 2$.\n  - $d_{x} = 1.00$, $d_{y} = 1.00$, $d_{z} = 1.00$.\n- 案例 B（抑制主导目标）：\n  - $b_{x} = 0.01$, $b_{y} = 0.01$, $b_{z} = 0.60$.\n  - $v_{xy} = 0.40$, $k_{xy} = 0.40$, $n_{xy} = 2$.\n  - $v_{yx} = 0.40$, $k_{yx} = 0.40$, $n_{yx} = 2$.\n  - $v_{zy} = 0.20$, $k_{zy} = 0.30$, $n_{zy} = 2$.\n  - $k_{xz} = 0.20$, $m_{xz} = 2$; $k_{yz} = 0.20$, $m_{yz} = 2$.\n  - $d_{x} = 1.00$, $d_{y} = 1.00$, $d_{z} = 1.00$.\n- 案例 C（双稳态目标）：\n  - $b_{x} = 0.02$, $b_{y} = 0.02$, $b_{z} = 0.10$.\n  - $v_{xy} = 1.30$, $k_{xy} = 0.30$, $n_{xy} = 2$.\n  - $v_{yx} = 1.30$, $k_{yx} = 0.30$, $n_{yx} = 2$.\n  - $v_{zy} = 0.50$, $k_{zy} = 0.40$, $n_{zy} = 2$.\n  - $k_{xz} = 0.30$, $m_{xz} = 2$; $k_{yz} = 0.30$, $m_{yz} = 2$.\n  - $d_{x} = 1.00$, $d_{y} = 1.00$, $d_{z} = 1.00$.\n\n最终输出格式：\n您的程序应生成一行输出，其中包含结果，格式为方括号内的逗号分隔列表，顺序为案例 A、案例 B、案例 C，例如 $[r_{A}, r_{B}, r_{C}]$，其中每个 $r_{\\cdot}$ 是上面定义的整数代码。", "solution": "所呈现的问题陈述是有效的。这是一个在计算系统生物学领域中适定且有科学依据的问题。它概述了一项清晰的定量任务：分析一个代表肿瘤微环境中细胞因子相互作用的最小动力学系统。该模型基于已建立的生物化学动力学原理，包括产生-衰减动力学和S型 Hill 式调控。参数、方程、数值流程和分类标准都以足够的精度进行了规定，从而能够得到唯一且可验证的解。\n\n目标是确定所提供的细胞因子网络模型在三种不同参数体系下的定性行为。这种行为由系统的渐近稳定稳态（吸引子）集合来表征。该模型由一个包含三个耦合非线性常微分方程（ODE）的系统描述，用于表示 IL-12 ($x(t)$), IFN-$\\gamma$ ($y(t)$) 和 IL-10 ($z(t)$) 的无量纲浓度：\n\n$$\n\\begin{aligned}\n\\frac{dx}{dt} &= \\left(b_{x} + v_{xy}\\, H_{+}\\!\\left(y; k_{xy}, n_{xy}\\right)\\right)\\, H_{-}\\!\\left(z; k_{xz}, m_{xz}\\right) - d_{x}\\, x \\\\\n\\frac{dy}{dt} &= \\left(b_{y} + v_{yx}\\, H_{+}\\!\\left(x; k_{yx}, n_{yx}\\right)\\right)\\, H_{-}\\!\\left(z; k_{yz}, m_{yz}\\right) - d_{y}\\, y \\\\\n\\frac{dz}{dt} &= b_{z} + v_{zy}\\, H_{+}\\!\\left(y; k_{zy}, n_{zy}\\right) - d_{z}\\, z\n\\end{aligned}\n$$\n\n函数 $H_{+}(u;k,n) = \\frac{u^{n}}{k^{n} + u^{n}}$ 和 $H_{-}(u;k,m) = \\frac{1}{1 + (u/k)^{m}}$ 分别为刺激性和抑制性调控相互作用建模。\n\n由于系统的非线性特性，通常无法求得稳态（其中 $\\frac{dx}{dt} = \\frac{dy}{dt} = \\frac{dz}{dt} = 0$）的解析解。因此，采用问题陈述中指定的数值方法。其方法论如下：\n\n1.  **数值积分**：对于每个给定的参数集，对常微分方程系统进行数值前向积分。自适应步长求解器适合此任务。积分从一个代表性的初始条件网格开始，直到最终时间 $T=200$。相对于系统的特征时间尺度（数量级为 $1/d_{\\cdot} = 1/1.00 = 1$），这个时间跨度足够长，能让轨迹收敛到其最终的吸引子。所选的初始条件网格，即 $x, y, z$ 的 $\\{0.01, 0.5, 1.2\\}$ 的笛卡尔积，为状态空间提供了一个粗略但有效的采样，以识别不同的吸引盆。\n\n2.  **稳态识别与聚类**：在最终积分时间 $T=200$ 时的状态向量 $(x(T), y(T), z(T))$ 被视为稳定稳态的候选。通过验证该点处速率向量 $(\\frac{dx}{dt}, \\frac{dy}{dt}, \\frac{dz}{dt})$ 的欧几里得范数低于一个很小的容差 $\\epsilon_{ss} = 10^{-6}$，来确认其作为稳态的有效性。为了识别唯一的吸引子集合，将来自所有初始模拟的终点进行聚类。任何两个欧几里得距离小于容差 $\\epsilon_{cluster} = 10^{-3}$ 的终点被认为属于同一个吸引子。这个过程为给定的参数集生成一个不同稳定稳态的列表。\n\n3.  **状态分类**：每个唯一的稳定稳态 $(x^{\\ast}, y^{\\ast}, z^{\\ast})$ 根据指定的阈值被分为三种模式之一：\n    *   **炎性**：若 $x^{\\ast} \\ge 0.6$、$y^{\\ast} \\ge 0.6$ 且 $z^{\\ast} \\le 0.4$。\n    *   **抑制**：若 $z^{\\ast} \\ge 0.6$、$x^{\\ast} \\le 0.4$ 且 $y^{\\ast} \\le 0.4$。\n    *   **混合型**：任何不满足炎性或抑制标准的状态。\n\n4.  **模式编码**：根据为某个参数集找到的状态类型集合，分配一个最终的整数代码：\n    *   代码 $1$：只找到炎性状态。\n    *   代码 $0$：只找到抑制状态。\n    *   代码 $2$：至少找到一个炎性状态和一个抑制状态（表明在这两个关键模式之间存在双稳态）。\n    *   代码 $3$：任何其他的状态组合（例如，只有混合型状态；炎性与混合型的混合；抑制与混合型的混合）。\n\n整个流程将依次应用于三个参数集（案例 A、案例 B 和案例 C）中的每一个，以生成最终的输出向量。实现将利用 `scipy` 和 `numpy` 库中的例程进行数值积分和向量运算。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nimport itertools\n\ndef solve():\n    \"\"\"\n    Solves the cytokine network problem by simulating the ODE system for three\n    parameter sets, identifying stable steady states, classifying them, and\n    generating a summary code for each case.\n    \"\"\"\n\n    # Define the helper Hill functions as per the problem statement.\n    def h_plus(u, k, n):\n        # Handles u < 0 by treating it as 0 to ensure non-negativity.\n        u_safe = np.maximum(u, 0)\n        # Avoid division by zero if k=0, though problem statement says k > 0.\n        k_n = k**n\n        return (u_safe**n) / (k_n + u_safe**n)\n\n    def h_minus(u, k, m):\n        # Handles u < 0 by treating it as 0.\n        u_safe = np.maximum(u, 0)\n        # Avoid division by zero if k=0.\n        if k == 0:\n            return 0.0 # Strict inhibition\n        return 1.0 / (1.0 + (u_safe / k)**m)\n\n    # Define the system of ordinary differential equations.\n    def ode_system(t, state, params):\n        x, y, z = state\n        \n        # dxdt\n        prod_x_term1 = params['b_x'] + params['v_xy'] * h_plus(y, params['k_xy'], params['n_xy'])\n        prod_x_term2 = h_minus(z, params['k_xz'], params['m_xz'])\n        decay_x = params['d_x'] * x\n        dxdt = prod_x_term1 * prod_x_term2 - decay_x\n\n        # dydt\n        prod_y_term1 = params['b_y'] + params['v_yx'] * h_plus(x, params['k_yx'], params['n_yx'])\n        prod_y_term2 = h_minus(z, params['k_yz'], params['m_yz'])\n        decay_y = params['d_y'] * y\n        dydt = prod_y_term1 * prod_y_term2 - decay_y\n\n        # dzdt\n        prod_z = params['b_z'] + params['v_zy'] * h_plus(y, params['k_zy'], params['n_zy'])\n        decay_z = params['d_z'] * z\n        dzdt = prod_z - decay_z\n        \n        return [dxdt, dydt, dzdt]\n\n    # Test suite of parameter sets.\n    test_cases = [\n        { # Case A (inflamed-dominant target)\n            'b_x': 0.02, 'b_y': 0.02, 'b_z': 0.01,\n            'v_xy': 1.20, 'k_xy': 0.30, 'n_xy': 2,\n            'v_yx': 1.20, 'k_yx': 0.30, 'n_yx': 2,\n            'v_zy': 0.30, 'k_zy': 0.50, 'n_zy': 2,\n            'k_xz': 0.50, 'm_xz': 2, 'k_yz': 0.50, 'm_yz': 2,\n            'd_x': 1.00, 'd_y': 1.00, 'd_z': 1.00,\n        },\n        { # Case B (suppressed-dominant target)\n            'b_x': 0.01, 'b_y': 0.01, 'b_z': 0.60,\n            'v_xy': 0.40, 'k_xy': 0.40, 'n_xy': 2,\n            'v_yx': 0.40, 'k_yx': 0.40, 'n_yx': 2,\n            'v_zy': 0.20, 'k_zy': 0.30, 'n_zy': 2,\n            'k_xz': 0.20, 'm_xz': 2, 'k_yz': 0.20, 'm_yz': 2,\n            'd_x': 1.00, 'd_y': 1.00, 'd_z': 1.00,\n        },\n        { # Case C (bistability target)\n            'b_x': 0.02, 'b_y': 0.02, 'b_z': 0.10,\n            'v_xy': 1.30, 'k_xy': 0.30, 'n_xy': 2,\n            'v_yx': 1.30, 'k_yx': 0.30, 'n_yx': 2,\n            'v_zy': 0.50, 'k_zy': 0.40, 'n_zy': 2,\n            'k_xz': 0.30, 'm_xz': 2, 'k_yz': 0.30, 'm_yz': 2,\n            'd_x': 1.00, 'd_y': 1.00, 'd_z': 1.00,\n        }\n    ]\n    \n    # Numerical and classification parameters.\n    t_final = 200.0\n    ic_grid_points = [0.01, 0.5, 1.2]\n    initial_conditions = list(itertools.product(ic_grid_points, repeat=3))\n    ss_tol = 1e-6\n    cluster_tol = 1e-3\n\n    results = []\n    \n    for params in test_cases:\n        unique_steady_states = []\n        \n        for y0 in initial_conditions:\n            sol = solve_ivp(\n                ode_system, \n                (0, t_final), \n                y0, \n                args=(params,), \n                method='LSODA', \n                dense_output=True,\n                rtol=1e-8,\n                atol=1e-8\n            )\n            \n            endpoint = sol.y[:, -1]\n            \n            # Ensure non-negative state due to potential small numerical errors\n            endpoint[endpoint < 0] = 0\n            \n            # Check steady-state criterion\n            rhs_norm = np.linalg.norm(ode_system(t_final, endpoint, params))\n            if rhs_norm >= ss_tol:\n                # This may happen if the system is oscillatory or chaotic.\n                # For this problem, we assume convergence to a fixed point.\n                # Silently ignore endpoints not meeting the criterion.\n                continue\n\n            # Cluster the endpoint\n            is_new = True\n            for state in unique_steady_states:\n                dist = np.linalg.norm(endpoint - state)\n                if dist < cluster_tol:\n                    is_new = False\n                    break\n            \n            if is_new:\n                unique_steady_states.append(endpoint)\n\n        # Classify the unique steady states\n        state_types_found = set()\n        for state in unique_steady_states:\n            x, y, z = state\n            if x >= 0.6 and y >= 0.6 and z <= 0.4:\n                state_types_found.add(\"inflamed\")\n            elif z >= 0.6 and x <= 0.4 and y <= 0.4:\n                state_types_found.add(\"suppressed\")\n            else:\n                state_types_found.add(\"mixed\")\n\n        # Determine the integer code for the case\n        has_inflamed = \"inflamed\" in state_types_found\n        has_suppressed = \"suppressed\" in state_types_found\n        \n        if has_inflamed and has_suppressed:\n            results.append(2)\n        elif has_inflamed and len(state_types_found) == 1:\n            results.append(1)\n        elif has_suppressed and len(state_types_found) == 1:\n            results.append(0)\n        else:\n            results.append(3)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}]}