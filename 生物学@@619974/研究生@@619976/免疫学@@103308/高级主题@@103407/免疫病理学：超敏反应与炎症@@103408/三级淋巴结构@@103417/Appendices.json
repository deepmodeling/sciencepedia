{"hands_on_practices": [{"introduction": "三级淋巴结构 (Tertiary Lymphoid Structures, TLS) 的存在与稳定依赖于一个复杂的信号分子网络。本练习旨在探讨两个关键信号通路在其中的层级作用：作为TLS发育基础的淋巴毒素β受体 (Lymphotoxin beta receptor, LTβR) 通路，以及起着支持但又不同作用的肿瘤坏死因子 (Tumor Necrosis Factor, TNF) 通路。通过预测阻断这些通路的不同效果，您将对TLS结构如何维持建立更深层次的机理理解，这是设计治疗策略的关键概念。[@problem_id:2895369]", "problem": "一个研究小组在一个持续性抗原暴露的小鼠模型中，研究在发炎的肺实质内形成的慢性异位淋巴样聚集体。在基线状态下，这些聚集体符合三级淋巴样结构 (Tertiary Lymphoid Structures, TLS) 的定义标准：它们显示出分隔的 B 细胞区和 T 细胞区，B 细胞滤泡内的滤泡树突状细胞 (follicular dendritic cell, FDC) 网络，表达外周淋巴结地址素 (peripheral node addressin, PNAd) 的高内皮微静脉 (high endothelial venules, HEV)，以及基质细胞表达的稳态趋化因子 C-X-C 基序趋化因子配体 $13$ ($CXCL13$)、C-C 基序趋化因子配体 $19$ ($CCL19$) 和 C-C 基序趋化因子配体 $21$ ($CCL21$)。研究人员现在施加两种扰动之一，并探究 TLS 的形态和细胞组成将如何改变：\n\n扰动 $1$：全身性施用一种淋巴毒素β受体-免疫球蛋白融合蛋白，该蛋白能隔离淋巴毒素$\\text{LT}\\alpha_1\\beta_2$ (LT$\\alpha_1\\beta_2$)，从而阻断基质组织者细胞上的淋巴毒素β受体 (Lymphotoxin beta receptor, LT$\\beta$R) 信号。\n\n扰动 $2$：全身性中和肿瘤坏死因子 (Tumor Necrosis Factor, TNF)，阻断造血细胞和基质区室上的肿瘤坏死因子受体 (Tumor Necrosis Factor receptors, TNFR) 信号。\n\n仅使用淋巴器官发生和维持的公认原理：(i) 接收到 LT$\\beta$R 信号的基质组织者细胞通过 NF-$\\kappa$B 诱导激酶启动并维持非经典核因子 $\\kappa$B (noncanonical nuclear factor kappa-light-chain-enhancer of activated B cells, NF-$\\kappa$B) 信号通路，从而驱动$CXCL13$、$CCL19$ 和 $CCL21$ 的表达、FDC 的分化以及 HEV 表型的维持；(ii) TNFR 信号支持经典的 NF-$\\kappa$B 依赖性的 FDC 成熟与存活以及内皮细胞活化，并加强但不能替代由 LT$\\beta$R 驱动的程序。定性预测每种扰动下 TLS 的形态和细胞组成将如何变化，并阐明每个预测的机理基础。\n\n哪个选项最符合这些机理预期？\n\nA. 扰动 $1$：TLS 区室化结构迅速瓦解，伴随独立的 B 细胞滤泡消失、FDC 网络几乎完全丧失、基质细胞中 $CXCL13$/$CCL19$/$CCL21$ 转录本显著减少、HEV 消退且其上的 PNAd 表达下调，并退化为弥散的血管周围白细胞聚集体；机理：由于 $\\text{LT}\\alpha_1\\beta_2$–LT$\\beta$R 信号的丧失，基质组织者细胞中的非经典 NF-$\\kappa$B 信号被废除。扰动 $2$：部分结构紊乱，主要局限于生发中心和 FDC 的成熟，滤泡尺寸减小，增殖的 B 细胞减少；B/T 细胞区隔得以保留但有所减弱；HEV 密度和 PNAd 强度降低，但仍有部分 HEV 存留；机理：TNFR 下游的经典 NF-$\\kappa$B 介导的基质和内皮活化减弱，但并未完全熄灭由 LT$\\beta$R 驱动的趋化因子程序。\n\nB. 扰动 $1$：T 细胞募集选择性减少，但 B 细胞滤泡、完整的 FDC 网络和 HEV 得以保留；机理：LT$\\beta$R 主要作用于内皮细胞，对于趋化因子的产生是可有可无的。扰动 $2$：$CXCL13$ 和 FDC 完全丧失，但 T 细胞区和 HEV 完好；机理：TNFR 驱动基质细胞中的非经典 NF-$\\kappa$B 通路，是主导性的组织者信号。\n\nC. 扰动 $1$：由于 LT$\\beta$R 的负反馈被移除，HEV 密度增加、PNAd 表达增强、B/T 细胞区隔更清晰；机理：LT$\\beta$R 信号抑制基质细胞活化。扰动 $2$：对 TLS 组织结构无实质性影响，因为在趋化因子诱导和 FDC 分化方面，TNF 与 LT$\\beta$R 的信号是冗余的。\n\nD. 扰动 $1$：T 细胞区消失，但生发中心和 FDC 网络得以保留，因为 B 细胞能自主提供足够的 $CXCL13$；HEV 保持稳定。机理：LT$\\beta$R 仅控制 $CCL19$/$CCL21$。扰动 $2$：HEV 消失，但趋化因子梯度和 B/T 细胞区隔得以保留。机理：TNFR 信号仅为内皮 PNAd 表达所必需，而对基质趋化因子程序则非必需。", "solution": "问题陈述经过验证，被认为是科学上合理的、阐述清晰且内部一致的。它提供了一套免疫学领域关于淋巴样结构形成与维持的公认原理。这些原理对于通过预测两种不同分子扰动的后果来推导出唯一解是充分且必要的。因此，该问题适用于进行严谨的分析。\n\n分析过程是通过将所提供的支配性原理应用于每种扰动来进行的。\n\n**扰动 $1$：阻断淋巴毒素 $\\beta$ 受体 (LT$\\beta$R) 信号**\n\n问题指出，扰动 $1$ 涉及全身性施用一种淋巴毒素 $\\beta$ 受体-免疫球蛋白融合蛋白，该蛋白能隔离配体淋巴毒素 $\\alpha_1\\beta_2$ ($\\text{LT}\\alpha_1\\beta_2$)。此操作有效阻断了基质组织者细胞中的 $LT\\beta$R 信号。\n\n根据原理 (i)，$LT\\beta$R 信号对于“启动和维持”非经典核因子 $\\kappa$B (NF-$\\kappa$B) 信号通路至关重要。该通路反过来驱动关键稳态趋化因子（C-X-C 基序趋化因子配体 $13$ ($CXCL13$)、C-C 基序趋化因子配体 $19$ ($CCL19$) 和 C-C 基序趋化因子配体 $21$ ($CCL21$)）的表达，促进滤泡树突状细胞 (FDC) 的分化，并维持高内皮微静脉 (HEV) 的表型。\n\n因此，废除 $LT\\beta$R 信号将导致组织和维持三级淋巴样结构 (TLS) 的分子和细胞程序发生灾难性失败。其逻辑后果是：\n$1$. **趋化因子产生停止**：非经典 NF-$\\kappa$B 通路将被失活，导致基质细胞中 $CXCL13$、$CCL19$ 和 $CCL21$ 的表达显著下调。\n$2$. **区室化结构瓦解**：$CXCL13$ 梯度的丧失将导致 B 细胞滤泡溶解。$CCL19$ 和 $CCL21$ 梯度的丧失将破坏 T 细胞区。TLS 的有组织的、分隔的结构将瓦解成弥散的白细胞集合。\n$3$. **FDC 网络的丧失**：由于 FDC 的分化依赖于此通路，FDC 网络将无法维持并会消退。这也将阻止功能性生发中心的形成。\n$4$. **HEV 的消退**：维持特化 HEV 表型（包括外周淋巴结地址素 (PNAd) 的表达）的信号将会丢失。HEV 将恢复为正常的扁平内皮表型，失去从血液中募集淋巴细胞的能力。\n\n总之，阻断主调节因子 $LT\\beta$R，预计将导致 TLS 快速而全面的解体。\n\n**扰动 $2$：中和肿瘤坏死因子 (TNF)**\n\n扰动 $2$ 涉及全身性中和 TNF，从而阻断造血细胞和基质细胞上的肿瘤坏死因子受体 (TNFR) 信号。\n\n根据原理 (ii)，TNFR 信号“支持经典的 NF-$\\kappa$B 依赖性的 FDC 成熟与存活以及内皮细胞活化”，并且关键是，“加强但不能替代由 $LT\\beta$R 驱动的程序”。\n\n这建立了一个清晰的层级关系：$LT\\beta$R 信号是基础性的，而 TNFR 信号是支持性和调节性的。因此，阻断 TNFR 信号的后果预计没有阻断 $LT\\beta$R 那样严重。\n$1$. **基本结构的保留**：因为 TNFR 信号不能替代由 $LT\\beta$R 驱动的主要程序，基本的趋化因子支架（$CXCL13$、$CCL19$、$CCL21$）将基本保持完整。因此，B 细胞区和 T 细胞区将持续存在，尽管它们可能不那么稳固或有所“减弱”。\n$2$. **FDC 功能受损**：TNFR 信号参与 FDC 的“成熟和存活”。阻断它可能会导致成熟的功能性 FDC 数量减少。这将对生发中心反应产生负面影响，导致滤泡变小和 B 细胞增殖减少。由 $LT\\beta$R 驱动的 FDC 分化应该仍会发生，但其网络将发育得不那么完善。\n$3$. **HEV 功能减弱**：由于 TNFR 信号“支持”内皮细胞活化，它的丧失可能会削弱 HEV 的功能。这可能表现为 HEV 密度降低或 PNAd 表达强度减弱。然而，由于 $LT\\beta$R 信号是 HEV“维持”的主要驱动力，预计不会完全丧失 HEV。\n\n总之，阻断支持性的 TNF 信号预计将导致 TLS 的部分结构紊乱和功能受损，尤其影响 FDC 的成熟和 HEV 的稳固性，但不会导致结构的完全瓦解。\n\n**评估所给选项**\n\n- **A.** 此选项提出的预测与上述推导完全一致。对于扰动 $1$，它预测 TLS 将迅速完全瓦解，并指出了正确的机理，即非经典 NF-$\\kappa$B 信号被废除。对于扰动 $2$，它预测了部分结构紊乱，主要影响 FDC 和 HEV，同时保留了基本结构，并正确地将机理归因于支持性的经典 NF-$\\kappa$B 信号的丧失，该信号并不能替代占主导地位的 $LT\\beta$R 通路。\n**结论：正确。**\n\n- **B.** 此选项包含多处错误。对于扰动 $1$，它错误地声称 B 细胞滤泡和 FDC 得以保留，并错误地识别了机理，这与原理 (i) 直接矛盾。对于扰动 $2$，它错误地声称 $CXCL13$ 和 FDC 完全丧失，并通过声称 TNFR 而非 $LT\\beta$R 是驱动非经典 NF-$\\kappa$B 的主导组织者，从而颠倒了已确立的层级关系。这些断言在根本上是有缺陷的。\n**结论：不正确。**\n\n- **C.** 此选项错误地暗示 $LT\\beta$R 信号是一个负向调节因子，预测阻断它会增强 TLS 的特征。这与原理 (i) 中描述的作用相反。它还错误地声称 TNF 是冗余的，这与原理 (ii) 中描述的特定支持作用相矛盾。\n**结论：不正确。**\n\n- **D.** 此选项错误地将 $LT\\beta$R 的作用局限于 T 细胞区的趋化因子，并声称生发中心得以保留。这忽略了原理 (i) 中指出的 $LT\\beta$R 是 $CXCL13$ 和 FDC 分化所必需的——这两者对生发中心至关重要。对于扰动 $2$，它错误地预测 HEV 将完全消失，这夸大了原理 (ii) 中定义的 TNFR 信号的支持作用。\n**结论：不正确。**\n\n基于对所提供原理的严谨应用，只有选项 A 准确地描述了两种扰动的预期结果及其机理基础。", "answer": "$$\\boxed{A}$$", "id": "2895369"}, {"introduction": "TLS的一个决定性特征是免疫细胞的有序分离，这是由趋化因子梯度所引导的。本实践采用经典的反应-扩散模型来描述负责组织B细胞滤泡的C-X-C基序趋化因子配体13 (CXCL13) 梯度的形成过程。您将推导出该梯度的特征长度尺度，它由趋化因子的扩散与降解之间的相互作用决定。这项练习完美地诠释了基本物理原理如何决定生物结构，为观察到的B细胞滤泡尺寸提供了定量解释。[@problem_id:2895378]", "problem": "三级淋巴结构 (TLS) 通过在细胞外基质 (ECM) 中建立的C-X-C基序趋化因子配体13 (CXCL13) 的梯度来组织B细胞滤泡。考虑一个一维组织半空间 $x \\geq 0$，其中CXCL13在一个位于$x=0$的平面基质层中产生，施加一个固定浓度 $C(0)=C_{0}$，并在ECM中以速率常数$k$通过一级过程降解。假设无平流，介质均匀，并且在$x=0$之外没有CXCL13的体积源。仅使用菲克第一定律和带有一级汇的质量守恒定律，推导$x>0$时的稳态浓度分布$C(x)$，并确定控制空间衰减的特征长度尺度$\\lambda$。然后，给定CXCL13在ECM中的测量扩散系数$D=9.0 \\times 10^{-11}\\ \\mathrm{m^{2}\\ s^{-1}}$和一级衰变常数$k=1.0 \\times 10^{-3}\\ \\mathrm{s^{-1}}$，以及观测到的TLS B细胞滤泡半径$R_{\\mathrm{obs}}=2.25 \\times 10^{-4}\\ \\mathrm{m}$，计算无量纲比值$R_{\\mathrm{obs}}/\\lambda$。将最终答案表示为一个纯数（无单位）并保留三位有效数字。", "solution": "所述问题在科学上是合理的、提法恰当的，并包含足够的信息以获得唯一解。它描述了一个经典的处于稳态的一维反应-扩散系统，这是化学物理学和生物学中的一个基本模型。我们现在开始进行推导和计算。\n\n在一维系统中，趋化因子C-X-C基序趋化因子配体13 (CXCL13)的质量守恒由以下偏微分方程描述：\n$$\n\\frac{\\partial C}{\\partial t} = -\\frac{\\partial J}{\\partial x} + S\n$$\n其中$C(x,t)$是CXCL13在位置$x$和时间$t$的浓度，$J(x,t)$是扩散通量，$S$是净生成速率（源项减去汇项）。\n\n问题陈述无平流且介质均匀。扩散通量$J$由菲克第一定律给出：\n$$\nJ = -D \\frac{\\partial C}{\\partial x}\n$$\n其中$D$是常数扩散系数。\n\n问题指明降解过程为速率常数为$k$的一级反应，且在$x > 0$区域没有体积源。因此，汇项为$-kC$，源项为$0$。净生成速率为$S = -kC$。\n\n将$J$和$S$的表达式代入守恒方程，得到反应-扩散方程：\n$$\n\\frac{\\partial C}{\\partial t} = -\\frac{\\partial}{\\partial x}\\left(-D \\frac{\\partial C}{\\partial x}\\right) - kC = D \\frac{\\partial^2 C}{\\partial x^2} - kC\n$$\n\n问题要求的是稳态浓度分布，这意味着浓度不随时间变化，即$\\frac{\\partial C}{\\partial t} = 0$。控制方程简化为一个二阶常微分方程(ODE)：\n$$\nD \\frac{d^2 C}{d x^2} - k C = 0\n$$\n这可以重写为：\n$$\n\\frac{d^2 C}{d x^2} - \\frac{k}{D} C = 0\n$$\n这是一个线性、齐次、常系数常微分方程。其特征方程为$r^2 - \\frac{k}{D} = 0$，它有两个实根：$r = \\pm\\sqrt{\\frac{k}{D}}$。因此，通解为：\n$$\nC(x) = A_{1} \\exp\\left(x\\sqrt{\\frac{k}{D}}\\right) + A_{2} \\exp\\left(-x\\sqrt{\\frac{k}{D}}\\right)\n$$\n其中$A_{1}$和$A_{2}$是待由边界条件确定的常数。\n\n边界条件是：\n1. 在源平面$x=0$处，浓度固定为$C_{0}$：$C(0) = C_{0}$。\n2. 在远离源的大距离处，浓度必须保持物理上的现实性。在半空间$x \\geq 0$中，当$x \\to \\infty$时，浓度不能无限增长。这意味着带有正指数的项（当$x \\to \\infty$时会发散）必须为零。因此，我们必须设定$A_{1}=0$。\n\n应用第一个边界条件并设$A_{1}=0$：\n$$\nC(0) = A_{2} \\exp(0) = A_{2} = C_{0}\n$$\n因此，稳态浓度分布为：\n$$\nC(x) = C_{0} \\exp\\left(-x\\sqrt{\\frac{k}{D}}\\right)\n$$\n该解描述了趋化因子浓度从源平面开始呈指数衰减。特征长度尺度$\\lambda$是浓度下降为原来的$1/e$倍时所经过的距离。通过将我们的解与通用形式$C(x) = C_0 \\exp(-x/\\lambda)$进行比较，我们确定$\\lambda$为：\n$$\n\\lambda = \\sqrt{\\frac{D}{k}}\n$$\n现在，我们必须计算这个特征长度尺度$\\lambda$的值，然后计算无量纲比值$R_{\\mathrm{obs}}/\\lambda$。\n\n给定的参数是：\n扩散系数，$D = 9.0 \\times 10^{-11} \\ \\mathrm{m^2 \\ s^{-1}}$。\n一级衰变常数，$k = 1.0 \\times 10^{-3} \\ \\mathrm{s^{-1}}$。\n观测到的B细胞滤泡半径，$R_{\\mathrm{obs}} = 2.25 \\times 10^{-4} \\ \\mathrm{m}$。\n\n首先，我们计算$\\lambda$：\n$$\n\\lambda = \\sqrt{\\frac{9.0 \\times 10^{-11} \\ \\mathrm{m^2 \\ s^{-1}}}{1.0 \\times 10^{-3} \\ \\mathrm{s^{-1}}}} = \\sqrt{9.0 \\times 10^{-8} \\ \\mathrm{m^2}} = 3.0 \\times 10^{-4} \\ \\mathrm{m}\n$$\n接下来，我们计算所需的无量纲比值：\n$$\n\\frac{R_{\\mathrm{obs}}}{\\lambda} = \\frac{2.25 \\times 10^{-4} \\ \\mathrm{m}}{3.0 \\times 10^{-4} \\ \\mathrm{m}} = \\frac{2.25}{3.0} = 0.75\n$$\n问题要求最终答案保留三位有效数字。\n$$\n0.75 \\rightarrow 0.750\n$$\n该比值表明，观测到的B细胞滤泡的大小是趋化因子梯度特征长度的很大一部分，准确地说是$75\\%$。", "answer": "$$\\boxed{0.750}$$", "id": "2895378"}, {"introduction": "虽然我们可以在TLS中直观地观察到B细胞和T细胞的分离，但要进行严谨的科学探究和在不同条件下比较其结构，定量分析是必不可少的。这项高级实践将向您介绍空间统计学，特别是交叉型Ripley's K函数，这是一个量化不同细胞群体之间空间关系的强大工具。您将通过一个计算模型来区分随机、分离和共定位的细胞模式。掌握这项技术将使您具备研究级别的技能，能够分析复杂的组织成像数据，从定性描述转向关于细胞组织的稳健、定量的结论。[@problem_id:2895404]", "problem": "您将承担一项基于免疫学中叔(三)级淋巴结构（TLS）研究的定量任务：对一个圆形TLS内B细胞和T细胞的空间分离或共定位进行建模，并量化其与空间随机性的偏差。将TLS表示为一个半径为 $R$ （单位为任意长度单位，缩写为 a.l.u.）的二维圆形观测窗口，并将细胞位置表示为两类点：B细胞和T细胞。\n\n使用的基本原理和定义：\n- 在均匀空间泊松点过程（完全空间随机性，缩写为 CSR）中，一个典型点在距离 $r$ 内的邻居期望数量与面积 $ \\pi r^2 $ 成正比。对于具有恒定强度的两个独立类型，跨类型邻居期望与目标类型的强度和 $ \\pi r^2 $ 成比例。\n- 令 $ \\lambda_B $ 和 $ \\lambda_T $ 分别表示B细胞和T细胞的（恒定）强度，定义为单位面积内的数量。\n- 跨类型Ripley $K$ 函数，记作 $K_{BT}(r)$，定义为一个典型B细胞在距离 $r$ 内的T细胞邻居的期望数量，除以 $ \\lambda_T $。在类型独立且均匀分布的条件下，$K_{BT}(r) = \\pi r^2$。\n- 常使用一种方差稳定变换 $L_{BT}(r) = \\sqrt{K_{BT}(r) / \\pi}$，因此在独立性条件下，$L_{BT}(r) - r$ 的期望值为 $0$。\n\n问题要求：\n1) 在圆形观测窗口中，为两个点类型从第一性原理推导并实现跨类型函数 $K_{BT}(r)$ 的一个一致估计量。使用适用于圆形窗口的边界（缩减样本）边缘校正：对于每个半径 $r$，只有其半径为 $r$ 的整个圆形区域都位于观测窗口内的B细胞“焦点”才可以贡献邻居，并用T细胞的强度进行归一化。令 $A$ 表示窗口面积。您的估计量必须使用：\n   - $ \\lambda_T = N_T / A $，其中 $ N_T $ 是T细胞的数量， $ A = \\pi R^2 $。\n   - 对于每个半径 $ r $，只包括那些到圆形边界的距离至少为 $ r $ 的B细胞；令此类B细胞的数量为 $ N_B^{\\ast}(r) $。\n   - 对于每个此类符合条件的B细胞，计算其欧几里得距离 $ r $ 内的T细胞数量。\n2) 计算 $ L_{BT}(r) = \\sqrt{ K_{BT}(r) / \\pi } $ 以及偏差 $ \\Delta(r) = L_{BT}(r) - r $。\n3) 定义一个标量分离摘要统计量，为 $ \\Delta(r) $ 在所提供的一组离散半径网格 $ \\{ r_k \\} $ 上的算术平均值。以 a.l.u. 为单位报告此平均偏差。直观地，负值表示分离（规避），正值表示吸引（共定位），而接近零的值表示在所考察的尺度上与独立性一致。\n4) 必须按照测试套件中的规定实现合成数据生成。所有随机数生成都必须按照规定精确设置种子，以确保可复现性。\n5) 数值单位：所有距离和坐标均使用任意长度单位（a.l.u.）。您的程序必须输出以 a.l.u. 为单位的平均偏差，并对每个测试用例四舍五入到六位小数。\n\n测试套件（三个探索不同行为的场景）：\n- 测试用例 $1$ （独立性/CSR基线）：\n  - 种子：$12345$\n  - 窗口半径：$R = 1.0$ a.l.u.\n  - 数量：$N_B = 150$, $N_T = 150$\n  - 生成：在半径为 $R$ 的圆形内独立且均匀地抽取B点和T点。\n  - 半径网格：$ \\{ 0.05, 0.10, 0.15, 0.20, 0.25, 0.30 \\} $ a.l.u.\n\n- 测试用例 $2$ （分离：两个分离的簇）：\n  - 种子：$202357$\n  - 窗口半径：$R = 1.0$ a.l.u.\n  - 数量：$N_B = 150$, $N_T = 150$\n  - 生成：从均值为 $(-0.4, 0.0)$ 、标准差为 $0.12$ （各向同性）的二元正态分布中抽取B点，拒绝并重新采样任何落在半径 $R$ 的圆形区域外的点，直到正好接受 $N_B$ 个点为止。以类似方式抽取T点，其均值为 $(+0.4, 0.0)$ ，标准差为 $0.12$，使用相同的拒绝规则。\n  - 半径网格：$ \\{ 0.05, 0.10, 0.15, 0.20, 0.25, 0.30 \\} $ a.l.u.\n\n- 测试用例 $3$ （吸引：T细胞聚集在B细胞周围）：\n  - 种子：$98765$\n  - 窗口半径：$R = 1.0$ a.l.u.\n  - 数量：$N_B = 150$, $N_T = 150$\n  - 生成：首先在半径为 $R$ 的圆形区域内均匀抽取 $N_B$ 个B点。然后，通过重复地随机均匀选择一个B点，并加上一个均值为 $(0,0)$ 、标准差为 $0.06$ （各向同性）的独立二元正态偏移量来生成T点。拒绝并重新采样任何落在圆形区域外的T点，直到正好接受 $N_T$ 个点为止。\n  - 半径网格：$ \\{ 0.05, 0.10, 0.15, 0.20, 0.25, 0.30 \\} $ a.l.u.\n\n算法输出：\n- 对每个测试用例，计算在所提供的半径网格上 $ \\Delta(r) $ 的平均值。每个输出必须是一个浮点数（以 a.l.u. 为单位），并四舍五入到六位小数。\n- 最终输出格式：您的程序应生成单行输出，其中包含用方括号括起来的、以逗号分隔的结果列表（例如，“[result1,result2,result3]”），其顺序与测试用例（$1$、$2$、$3$）的顺序相同。", "solution": "问题陈述已经过验证，被认定为具有科学依据、适定且客观。它提出了一个应用于免疫学的空间统计学中清晰、可形式化的任务，并提供了所有必要的参数和定义。不存在矛盾、歧义或违反科学原则之处。因此，该问题被视为**有效**，并随附完整解答。\n\n此问题的核心是为跨类型Ripley K函数（记作 $K_{BT}(r)$）实现一个特定的估计量，用以分析代表叔(三)级淋巴结构（TLS）的圆形域内两种细胞群（B细胞和T细胞）之间的空间关系。我们将使用从该函数派生的摘要统计量来量化与空间独立性的偏差。\n\n首先，我们按要求从第一性原理形式化该估计量。设B细胞位置集合为 $B = \\{\\mathbf{x}_i\\}_{i=1}^{N_B}$，T细胞位置集合为 $T = \\{\\mathbf{y}_j\\}_{j=1}^{N_T}$，其中 $\\mathbf{x}_i, \\mathbf{y}_j \\in \\mathbb{R}^2$。观测窗口是一个以原点为中心、半径为 $R$ 的圆盘 $W$，其面积为 $A = \\pi R^2$。T细胞的强度（单位面积的点数）估计为 $\\hat{\\lambda}_T = N_T / A$。\n\n问题指定了边界（或缩减样本）边缘校正。对于给定的分析半径 $r$，只有那些离 $W$ 边界足够远的B细胞才能用作计算邻居的焦点。这确保了每个焦点周围半径为 $r$ 的整个邻域都包含在观测窗口内，从而避免了估计未观测到的邻居。对于半径为 $R$ 的圆形窗口，如果一个点 $\\mathbf{x}_i$ 离原点的距离满足 $||\\mathbf{x}_i|| \\le R - r$，那么它就是一个符合条件的焦点。\n\n令 $N_B^*(r)$ 为给定半径 $r$ 时此类符合条件的B细胞数量：\n$$ N_B^*(r) = \\sum_{i=1}^{N_B} \\mathbb{I}(||\\mathbf{x}_i|| \\le R - r) $$\n其中 $\\mathbb{I}(\\cdot)$ 是指示函数，当其参数为真时取值为 $1$，否则为 $0$。我们假设对于分析网格中的所有半径 $r$，$N_B^*(r) > 0$，鉴于问题参数，这是一个合理的假设。\n\n跨类型K函数的估计量 $\\hat{K}_{BT}(r)$ 定义为在一个符合条件的B细胞距离 $r$ 内发现的T细胞的平均数量，并由T细胞强度 $\\hat{\\lambda}_T$ 进行归一化。公式为：\n$$ \\hat{K}_{BT}(r) = \\frac{1}{\\hat{\\lambda}_T N_B^*(r)} \\sum_{i=1}^{N_B} \\sum_{j=1}^{N_T} \\mathbb{I}(||\\mathbf{x}_i - \\mathbf{y}_j|| \\le r) \\mathbb{I}(||\\mathbf{x}_i|| \\le R-r) $$\n将 $\\hat{\\lambda}_T = N_T / A$ 代入并重新整理，我们得到计算公式：\n$$ \\hat{K}_{BT}(r) = \\frac{A}{N_T N_B^*(r)} \\sum_{\\{\\mathbf{x}_i : ||\\mathbf{x}_i|| \\le R-r\\}} \\left( \\sum_{j=1}^{N_T} \\mathbb{I}(||\\mathbf{x}_i - \\mathbf{y}_j|| \\le r) \\right) $$\n\n接着，我们应用方差稳定变换来获得 $L$ 函数，该函数在完全空间随机性（CSR）和两个点过程独立的零假设下将K函数线性化。\n$$ \\hat{L}_{BT}(r) = \\sqrt{\\frac{\\hat{K}_{BT}(r)}{\\pi}} $$\n在CSR条件下，理论期望为 $L_{BT}(r) = r$。因此，与该期望的偏差 $\\Delta(r)$ 提供了一个在尺度 $r$ 上聚类或分离的度量。\n$$ \\hat{\\Delta}(r) = \\hat{L}_{BT}(r) - r $$\n$\\hat{\\Delta}(r)$ 的正值表示吸引或共定位，而负值表示分离或规避。接近 $0$ 的值与空间独立性一致。\n\n最后，问题要求一个单一的摘要统计量，即 $\\hat{\\Delta}(r)$ 在一个离散半径网格 $\\{r_k\\}_{k=1}^M$ 上的算术平均值：\n$$ \\bar{\\Delta} = \\frac{1}{M} \\sum_{k=1}^M \\hat{\\Delta}(r_k) $$\n\n对每个测试用例，实现将按以下步骤进行：\n1.  使用指定的种子初始化伪随机数生成器，以确保可复现性。\n2.  根据每种情况的规则（均匀、分离双峰或吸引）为 $N_B$ 个B细胞和 $N_T$ 个T细胞生成点模式。这涉及到拒绝采样，以确保所有点都落在半径为 $R$ 的圆形窗口内。\n3.  对于所提供网格中的每个半径 $r_k$：\n    a. 通过选择满足 $||\\mathbf{x}_i|| \\le R-r_k$ 的B细胞来确定符合条件的B细胞集合。\n    b. 如果符合条件的B细胞数量 $N_B^*(r_k)$ 为 $0$，则估计量未定义。然而，鉴于给定的参数，这种情况预计不会发生。\n    c. 对每个符合条件的B细胞，计算其欧几里得距离 $r_k$ 内的T细胞数量。\n    d. 将这些计数在所有符合条件的B细胞上求和。\n    e. 使用推导出的公式计算 $\\hat{K}_{BT}(r_k)$、$\\hat{L}_{BT}(r_k)$ 和 $\\hat{\\Delta}(r_k)$。\n4.  计算所有已计算的 $\\hat{\\Delta}(r_k)$ 值的算术平均值。该平均值是该测试用例的最终结果，将四舍五入到六位小数后报告。\n\n这个系统化的过程将空间点过程分析的理论原则正确地转化为具体的计算算法，满足了问题陈述的所有要求。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef generate_uniform_in_circle(rng, n, r_max):\n    \"\"\"Generates n points uniformly distributed in a circle of radius r_max.\"\"\"\n    # To generate uniformly, sample radius-squared uniformly, and angle uniformly.\n    # r = R * sqrt(u1), theta = 2*pi*u2\n    mag = r_max * np.sqrt(rng.random(size=n))\n    angle = 2 * np.pi * rng.random(size=n)\n    x = mag * np.cos(angle)\n    y = mag * np.sin(angle)\n    return np.column_stack((x, y))\n\ndef generate_bvn_rejection(rng, n, r_max, mean, std):\n    \"\"\"Generates n points from a bivariate normal distribution, rejecting points\n    outside a circle of radius r_max.\"\"\"\n    points = []\n    cov = [[std**2, 0], [0, std**2]]\n    while len(points) < n:\n        # Generate a batch of points to be more efficient\n        batch_size = n - len(points)\n        candidates = rng.multivariate_normal(mean, cov, size=batch_size)\n        norms = np.linalg.norm(candidates, axis=1)\n        accepted = candidates[norms <= r_max]\n        points.extend(accepted)\n    return np.array(points[:n])\n\ndef generate_attraction_rejection(rng, n_b, n_t, r_max, offset_std):\n    \"\"\"Generates B-cells uniformly, then T-cells clustered around B-cells.\"\"\"\n    b_cells = generate_uniform_in_circle(rng, n_b, r_max)\n    t_cells = []\n    cov = [[offset_std**2, 0], [0, offset_std**2]]\n    while len(t_cells) < n_t:\n        # Select a random B-cell as a center\n        center_b_cell = b_cells[rng.integers(0, n_b)]\n        # Add a normal offset\n        offset = rng.multivariate_normal([0, 0], cov)\n        candidate_t = center_b_cell + offset\n        # Reject if outside the circle\n        if np.linalg.norm(candidate_t) <= r_max:\n            t_cells.append(candidate_t)\n    return b_cells, np.array(t_cells)\n\ndef calculate_mean_deviation(case):\n    \"\"\"\n    Orchestrates data generation and calculation for a single test case.\n    \"\"\"\n    seed = case['seed']\n    R = case['R']\n    N_B = case['N_B']\n    N_T = case['N_T']\n    radii_grid = case['radii_grid']\n    \n    rng = np.random.default_rng(seed)\n\n    if case['id'] == 1: # Independence/CSR\n        b_cells = generate_uniform_in_circle(rng, N_B, R)\n        t_cells = generate_uniform_in_circle(rng, N_T, R)\n    elif case['id'] == 2: # Segregation\n        b_cells = generate_bvn_rejection(rng, N_B, R, mean=[-0.4, 0.0], std=0.12)\n        t_cells = generate_bvn_rejection(rng, N_T, R, mean=[0.4, 0.0], std=0.12)\n    elif case['id'] == 3: # Attraction\n        b_cells, t_cells = generate_attraction_rejection(rng, N_B, N_T, R, offset_std=0.06)\n\n    area = np.pi * R**2\n    lambda_T_hat = N_T / area\n\n    delta_values = []\n    for r in radii_grid:\n        # 1. Identify eligible B-cells (focal points)\n        b_cell_norms = np.linalg.norm(b_cells, axis=1)\n        eligible_mask = b_cell_norms <= (R - r)\n        eligible_b_cells = b_cells[eligible_mask]\n        N_B_star = eligible_b_cells.shape[0]\n\n        if N_B_star == 0:\n            # Estimator is undefined. This is not expected for the given problem parameters.\n            # If it happened, one might return np.nan and use np.nanmean later.\n            # For this problem, we assume N_B_star > 0.\n            continue\n            \n        # 2. Calculate pairwise distances from eligible B-cells to all T-cells\n        dist_matrix = cdist(eligible_b_cells, t_cells)\n\n        # 3. Sum neighbor counts over all eligible B-cells\n        total_neighbors = np.sum(dist_matrix <= r)\n        \n        # 4. Calculate K_BT(r) estimator\n        # The factor 1/lambda_T is A/N_T.\n        # The sum over eligible points is total_neighbors / N_B_star\n        K_BT_hat = (area / N_T) * (total_neighbors / N_B_star)\n        \n        # 5. Calculate L_BT(r) and Delta(r)\n        L_BT_hat = np.sqrt(K_BT_hat / np.pi)\n        delta_r = L_BT_hat - r\n        delta_values.append(delta_r)\n\n    # 6. Compute the mean of Delta(r) values\n    mean_delta = np.mean(delta_values)\n    return mean_delta\n\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the final output.\n    \"\"\"\n    test_cases = [\n        {\n            \"id\": 1,\n            \"seed\": 12345,\n            \"R\": 1.0,\n            \"N_B\": 150,\n            \"N_T\": 150,\n            \"radii_grid\": [0.05, 0.10, 0.15, 0.20, 0.25, 0.30]\n        },\n        {\n            \"id\": 2,\n            \"seed\": 202357,\n            \"R\": 1.0,\n            \"N_B\": 150,\n            \"N_T\": 150,\n            \"radii_grid\": [0.05, 0.10, 0.15, 0.20, 0.25, 0.30]\n        },\n        {\n            \"id\": 3,\n            \"seed\": 98765,\n            \"R\": 1.0,\n            \"N_B\": 150,\n            \"N_T\": 150,\n            \"radii_grid\": [0.05, 0.10, 0.15, 0.20, 0.25, 0.30]\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = calculate_mean_deviation(case)\n        results.append(result)\n\n    # Format the final output string\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2895404"}]}