{"hands_on_practices": [{"introduction": "为了确保信号的特异性，细胞常常需要将特定的蛋白质精确地定位在细胞内的特定位置。本练习将挑战您运用这一原理，预测一个阻止接头蛋白 TRAM 定位到细胞膜的基因突变会带来何种后果 [@problem_id:2873658]。通过这个思想实验，您将巩固对空间隔离机制如何区分 TRIF 依赖性通路和 MyD88 依赖性通路这一核心概念的理解。", "problem": "一名实验室工程师使用成簇规律间隔短回文重复序列 (CRISPR) 技术，在TRIF相关衔接分子 (TRAM) 的第2位引入了一个甘氨酸到丙氨酸的取代 (G2A)，该取代消除了其N末端的豆蔻酰化。经过编辑的人单核细胞衍生的巨噬细胞表达内源性水平的所有Toll样受体4 (TLR4) 通路组分，包括TLR4、CD14、髓样分化初级应答蛋白88 (MyD88)、含Toll-白介素-1受体结构域的接头蛋白诱导干扰素-β (TRIF) 以及含Toll-白介素-1受体结构域的接头蛋白 (TIRAP，也称为Mal)。实验以单次脉冲的形式施加脂多糖 (LPS)，并在早期和晚期时间点测量下游的读出指标。\n\n基本事实：\n- Toll样受体 (TLR) 的模式识别将配体结合与胞质接头蛋白的招募耦合起来，从而启动信号级联反应。TLR4可以启动两个分支：\n  - 一个髓样分化初级应答蛋白88 (MyD88) 依赖性分支，由TIRAP在质膜上作为支架，激活活化B细胞的核因子κ-轻链增强子 (NF-κB) 和活化蛋白1 (AP-1)，诱导肿瘤坏死因子 (TNF) 和白介素-6 (IL-6)。\n  - 一个含Toll-白介素-1受体结构域的接头蛋白诱导干扰素-β (TRIF) 依赖性分支，需要TLR4的内吞作用以及在内体膜上组装TRAM–TRIF复合物，以激活TANK结合激酶1 (TBK1)、干扰素调节因子-3 (IRF3) 和I型干扰素（如干扰素-β (IFN-β)）以及干扰素刺激基因 (ISG)（如CXCL10）。\n- N末端甘氨酸豆蔻酰化是一种膜靶向修饰，是某些接头蛋白与细胞膜的胞质小叶稳定结合所必需的。\n\n在经过工程改造的细胞中，LPS刺激后进行了以下测量：NF-κB p65的早期核转位、TBK1和IRF3的磷酸化，以及IFN-β、CXCL10和TNF的mRNA诱导。细胞活力和LPS结合能力被证实相对于野生型细胞没有变化。\n\n下列哪种模式最能预测TRAM豆蔻酰化缺陷型突变体在响应LPS时所产生的先天免疫信号传导后果？\n\nA. 早期的NF-κB p65核转位和TNF诱导与野生型相当，而TBK1/IRF3的磷酸化以及IFN-β/CXCL10的转录本则显著减少。\n\nB. 由于TLR4内吞失败，NF-κB和IRF3的激活都被消除，导致 TNF、IFN-β和CXCL10几乎完全丧失。\n\nC. LPS诱导的IFN-β和CXCL10没有变化，因为TIRAP在将TRIF招募到TLR4方面补偿了TRAM豆蔻酰化的缺失。\n\nD. IFN-β和CXCL10得到增强，因为胞质中的TRAM在未被隔离在膜上时能更有效地与TRIF结合，导致TBK1/IRF3激活增加。", "solution": "首先必须验证问题陈述的科学严谨性、一致性和清晰度。\n\n该问题描述了一个分子免疫学实验。我将逐字提取给定信息以开始验证过程。\n\n**步骤1：提取已知信息**\n-   使用成簇规律间隔短回文重复序列 (CRISPR) 技术，在TRIF相关衔接分子 (TRAM) 中引入了一个甘氨酸到丙氨酸的取代 (G2A)。\n-   此G2A取代消除了TRAM的N末端豆蔻酰化。\n-   实验使用人单核细胞衍生的巨噬细胞，其表达内源性水平的Toll样受体4 (TLR4)、CD14、髓样分化初级应答蛋白88 (MyD88)、含Toll-白介素-1受体结构域的接头蛋白诱导干扰素-β (TRIF) 以及含Toll-白介素-1受体结构域的接头蛋白 (TIRAP, 也称为Mal)。\n-   脂多糖 (LPS) 是刺激物。\n-   测量的读出指标包括：NF-κB p65的早期核转位、TBK1和IRF3的磷酸化，以及IFN-β、CXCL10和TNF的mRNA诱导。\n-   对照测量证实细胞活力和LPS结合没有变化。\n-   基本事实1：TLR4启动两个信号分支。\n    -   一个MyD88依赖性分支，由TIRAP在质膜上作为支架，激活活化B细胞的核因子κ-轻链增强子 (NF-κB) 和活化蛋白1 (AP-1)，诱导肿瘤坏死因子 (TNF) 和白介素-6 (IL-6)。\n    -   一个TRIF依赖性分支，需要TLR4的内吞作用、在内体膜上组装TRAM–TRIF复合物、激活TANK结合激酶1 (TBK1) 和干扰素调节因子-3 (IRF3)，并诱导I型干扰素（如干扰素-β (IFN-β)）和干扰素刺激基因 (ISG)（如CXCL10）。\n-   基本事实2：N末端甘氨酸豆蔻酰化是一种膜靶向修饰，是某些蛋白与细胞膜稳定结合所必需的。\n\n**步骤2：使用提取的已知信息进行验证**\n问题陈述在科学上是有根据的并且表述清晰。对TLR4信号传导的描述，包括MyD88依赖性和TRIF依赖性通路在空间和时间上的分隔，与已确立的免疫学原理一致。分拣接头蛋白TIRAP和TRAM的作用被正确描述。实验性扰动——通过G2A突变消除N-豆蔻酰化——是细胞生物学中研究蛋白质定位的一种标准且有效的技术。G2A突变特异性地阻止了N-豆蔻酰转移酶的作用，该酶需要一个N-末端甘氨酸。基本事实提供了一个自成一体的框架来推导解决方案。该问题是客观的，没有矛盾，并包含足够的信息来确定唯一的结果。\n\n**步骤3：判断与行动**\n问题是有效的。我现在将继续推导解决方案。\n\n问题的核心在于理解消除TRAM的N-末端豆蔻酰化的后果。\n\n1.  **扰动及其直接影响**：TRAM中的G2A突变阻止了其N-末端豆蔻酰化。所提供的基本事实指出，此修饰是与细胞膜稳定结合所必需的。因此，突变的G2A-TRAM蛋白将无法定位到任何细胞膜，包括质膜和内体膜。它将保持为一种可溶的胞质蛋白。\n\n2.  **TRIF依赖性通路的分析**：基本事实指明，TRIF依赖性通路需要在**内体膜**上组装一个TRAM–TRIF复合物。这种组装对于将胞质接头蛋白TRIF招募到内吞的TLR4受体至关重要。TRAM作为桥接或分拣接头蛋白，将膜结合受体与下游信号传导机制连接起来。由于突变的G2A-TRAM无法定位到内体膜，它不能执行此功能。内吞的TLR4与TRIF之间的联系被打破。因此，整个TRIF依赖性信号级联反应将受到严重损害或被消除。该通路的下游事件——TBK1和IRF3的激活（磷酸化），以及随后IFN-β和ISG CXCL10的转录诱导——将显著减少。\n\n3.  **MyD88依赖性通路的分析**：基本事实指出，MyD88依赖性通路是由不同的分拣接头蛋白TIRAP在**质膜**上作为支架的。该通路在LPS与细胞表面的TLR4结合后立即运作，导致NF-κB的早期激活和TNF等促炎细胞因子的诱导。问题中描述的遗传修饰是针对TRAM的。MyD88通路的组分，包括TIRAP、MyD88和TLR4本身，都不受影响。由于TRAM不参与这个早期的、基于质膜的信号分支，MyD88依赖性通路应该能正常运作。因此，预计早期NF-κB p65核转位和随后的TNF mRNA诱导将与野生型细胞相当。\n\n4.  **预测综合**：\n    -   MyD88依赖性信号传导（早期）：正常。这意味着正常的早期NF-κB p65核转位和正常的TNF mRNA诱导。\n    -   TRIF依赖性信号传导（晚期）：有缺陷。这意味着TBK1/IRF3的磷酸化显著减少，IFN-β和CXCL10的mRNA诱导也显著减少。\n\n现在，我将根据此推导评估每个选项。\n\n**A. 早期的NF-κB p65核转位和TNF诱导与野生型相当，而TBK1/IRF3的磷酸化以及IFN-β/CXCL10的转录本则显著减少。**\n这个陈述与推导出的结果完全一致。它正确地指出MyD88依赖性通路（早期NF-κB，TNF）是完整的，而TRIF依赖性通路（TBK1/IRF3，IFN-β/CXCL10）由于TRAM定位失败而存在缺陷。\n**结论：正确。**\n\n**B. 由于TLR4内吞失败，NF-κB和IRF3的激活都被消除，导致 TNF、IFN-β和CXCL10几乎完全丧失。**\n这不正确，原因有二。首先，介导早期NF-κB激活和TNF产生的MyD88依赖性通路独立于TRAM，应不受影响。其次，该突变影响的是TRAM的膜锚定，而不是TLR4内吞过程本身。问题陈述其他细胞过程如LPS结合是正常的，没有理由假设内吞会失败。\n**结论：不正确。**\n\n**C. LPS诱导的IFN-β和CXCL10没有变化，因为TIRAP在将TRIF招募到TLR4方面补偿了TRAM豆蔻酰化的缺失。**\n这不正确。分拣接头蛋白TIRAP和TRAM具有由其定位和结合伴侣定义的、不同的、非冗余的作用。TIRAP定位于质膜，在MyD88通路中起作用。TRAM则是在内体上为TRIF通路所必需的。没有公认的生物学机制表明TIRAP会在一个不同的细胞区室和信号通路中补偿TRAM的功能。这个前提在生物学上是没有根据的。\n**结论：不正确。**\n\n**D. IFN-β和CXCL10得到增强，因为胞质中的TRAM在未被隔离在膜上时能更有效地与TRIF结合，导致TBK1/IRF3激活增加。**\n这不正确。信号转导严重依赖于信号复合物的空间组织。TRIF依赖性信号源于内体膜内的TLR4受体。为了让TRAM和TRIF接收该信号，它们必须被招募到这个特定位置。一个可溶的、胞质的TRAM-TRIF复合物将与上游受体断开连接，因此没有功能。破坏正确的定位总是导致功能丧失，而不是功能增强。\n**结论：不正确。**", "answer": "$$\\boxed{A}$$", "id": "2873658"}, {"introduction": "在理解了定位重要性的基础上，本练习将从定性逻辑转向定量分析。信号通路的强度不仅取决于蛋白质是否存在，还取决于其被招募的数量。此题目要求您运用解离常数（$K_D$）等基本生物物理学原理，来计算接头蛋白 TIRAP 在质膜上的招募程度，从而将分子亲和力与 MyD88 依赖性信号的初始强度联系起来 [@problem_id:2873589]。", "problem": "Toll样受体（TLR）信号通路的一个核心特征是衔接子招募的空间调控。在质膜上，含Toll/白细胞介素-1受体域的衔接蛋白（TIRAP）与4,5-二磷酸磷脂酰肌醇（$\\text{PI(4,5)P}_2$）结合，从而定位并招募骨髓分化初级反应蛋白88（MyD88），以进行MyD88依赖性信号传导。当Toll样受体4（TLR4）内吞进入内涵体后，含TIR结构域并诱导β-干扰素的衔接蛋白（TRIF）依赖的信号传导占主导地位，这一转变通常与磷脂酶C（PLC）介导的质膜上$\\text{PI(4,5)P}_2$的耗竭有关。假设TIRAP通过单个位点以$1:1$的可逆平衡与$\\text{PI(4,5)P}_2$结合，其特征是解离常数$K_{D}$，并且$\\text{PI(4,5)P}_2$相对于TIRAP远为过量，因此游离配体浓度等于总配体浓度。在稳态下，膜结合TIRAP的比例等于平衡时与$\\text{PI(4,5)P}_2$结合的TIRAP的比例。\n\n从解离常数$K_{D}$的定义和$1:1$结合反应的质量作用定律出发，在游离配体浓度$[L]$不因结合而发生可测量耗竭的假设下，推导出结合比例关于游离配体浓度$[L]$和$K_{D}$的表达式。然后使用以下科学上合理的参数：\n\n- 基线（质膜，野生型TIRAP）：$\\text{PI(4,5)P}_2$有效浓度$[L]_{0} = 5\\ \\mu\\mathrm{M}$且$K_{D,\\mathrm{wt}} = 2\\ \\mu\\mathrm{M}$。\n- 在与内涵体转换相关的PLC激活后，一个工程化的TIRAP变体表现出增强的膜亲和力：$\\text{PI(4,5)P}_2$有效浓度$[L]_{1} = 1.25\\ \\mu\\mathrm{M}$且$K_{D,\\mathrm{mut}} = 0.8\\ \\mu\\mathrm{M}$。\n\n计算稳态下膜结合TIRAP比例的倍数变化，该变化定义为在配体耗竭条件下工程化变体的结合比例与基线条件下野生型结合比例的比值。将最终答案表示为无单位的最简分数。不要四舍五入。", "solution": "质膜上的MyD88依赖性组装受含Toll/白细胞介素-1受体域的衔接蛋白（TIRAP）的膜定位调控，TIRAP与4,5-二磷酸磷脂酰肌醇（$\\text{PI(4,5)P}_2$）结合。我们使用一个$1:1$的可逆结合平衡来对此建模：\n$$\nE + L \\rightleftharpoons EL,\n$$\n其中$E$表示游离TIRAP，$L$表示游离$\\text{PI(4,5)P}_2$，$EL$表示膜结合复合物。根据质量作用定律，解离常数定义为\n$$\nK_{D} \\equiv \\frac{[E][L]}{[EL]}.\n$$\n设TIRAP总浓度为$[E]_{\\mathrm{tot}} = [E] + [EL]$。结合的（即与膜相关的）TIRAP的比例为\n$$\nf \\equiv \\frac{[EL]}{[E]_{\\mathrm{tot}}} = \\frac{[EL]}{[E] + [EL]}.\n$$\n根据$K_{D}$的定义，我们有$[EL] = \\frac{[E][L]}{K_{D}}$。将其代入$f$的分母，得到\n$$\nf = \\frac{[EL]}{[E] + [EL]} = \\frac{\\frac{[E][L]}{K_{D}}}{[E] + \\frac{[E][L]}{K_{D}}} = \\frac{\\frac{[L]}{K_{D}}}{1 + \\frac{[L]}{K_{D}}}.\n$$\n在$\\text{PI(4,5)P}_2$远为过量的假设下，游离配体浓度$[L]$约等于总配体浓度，因此结合比例简化为\n$$\nf = \\frac{[L]}{[L] + K_{D}}.\n$$\n我们现在计算两种指定条件下的结合比例。\n\n基线（野生型）：\n$$\n[L]_{0} = 5\\ \\mu\\mathrm{M}, \\quad K_{D,\\mathrm{wt}} = 2\\ \\mu\\mathrm{M} \\quad \\Rightarrow \\quad f_{0} = \\frac{[L]_{0}}{[L]_{0} + K_{D,\\mathrm{wt}}} = \\frac{5}{5 + 2} = \\frac{5}{7}.\n$$\n\n配体耗竭，工程化变体：\n$$\n[L]_{1} = 1.25\\ \\mu\\mathrm{M}, \\quad K_{D,\\mathrm{mut}} = 0.8\\ \\mu\\mathrm{M}.\n$$\n将这些值表示为有理数很方便：\n$$\n[L]_{1} = \\frac{5}{4}, \\quad K_{D,\\mathrm{mut}} = \\frac{4}{5}.\n$$\n于是\n$$\nf_{1} = \\frac{[L]_{1}}{[L]_{1} + K_{D,\\mathrm{mut}}} = \\frac{\\frac{5}{4}}{\\frac{5}{4} + \\frac{4}{5}} = \\frac{\\frac{5}{4}}{\\frac{25}{20} + \\frac{16}{20}} = \\frac{\\frac{5}{4}}{\\frac{41}{20}} = \\frac{5}{4} \\cdot \\frac{20}{41} = \\frac{100}{164} = \\frac{25}{41}.\n$$\n\n所要求的倍数变化是比率$f_{1}/f_{0}$：\n$$\n\\frac{f_{1}}{f_{0}} = \\frac{\\frac{25}{41}}{\\frac{5}{7}} = \\frac{25}{41} \\cdot \\frac{7}{5} = \\frac{175}{205} = \\frac{35}{41}.\n$$\n\n因此，尽管工程化的TIRAP变体亲和力得到增强，但PLC介导的$\\text{PI(4,5)P}_2$耗竭仍使膜结合比例降低至野生型基线值的$\\frac{35}{41}$。", "answer": "$$\\boxed{\\frac{35}{41}}$$", "id": "2873589"}, {"introduction": "我们的最后一个练习将这些概念整合到一个动态的系统视图中。TLR4 信号转导涉及一个从质膜到内体的关键性时间转换，这一过程必须被精确调控，以协同调控正确的免疫应答。本计算练习将指导您建立并分析该过程的数学模型，让您能亲手探索 TLR4 的内吞延迟如何直接影响 NF-κB 和 IRF3 的协同激活，并最终决定像 *Ifnb1* 这样的关键基因的表达 [@problem_id:2873583]。", "problem": "您的任务是编写一个完整的、可运行的程序，该程序能将一个最小的、符合机理的 Toll样受体4 (TLR4) 信号传导常微分方程 (ODE) 模型形式化。该模型需能捕捉到髓系分化初级反应蛋白88 (MyD88) 在质膜上对活化B细胞核因子κ轻链增强子 (NF-κB) 的依赖性激活，以及含TIR结构域的接头蛋白诱导干扰素-β (TRIF) 从内体对干扰素调节因子3 (IRF3) 的依赖性激活。其生物学前提基于经过充分检验的观察结果，即 TLR4 在质膜上通过 MyD88 发出信号，并在内吞后切换到 TRIF 途径；干扰素-β1 (*Ifnb1*) 的转录需要 NF-κB 和 IRF3 的协同活性。您的程序必须实现一个基于一阶激活/失活并与这些原则一致的最小分段线性 ODE 系统，并量化延迟内吞作用如何改变 *Ifnb1* 转录的时间。\n\n模型规范和必要定义：\n- 设 $N(t)$ 表示在时间 $t$（单位：分钟）时 NF-κB 的核内活性，$I(t)$ 表示 IRF3 的核内活性。设 $t_e$ 表示 TLR4 内吞的时间（单位：分钟），此时信号传导从 MyD88 切换到 TRIF。使用初始条件 $N(0)=0$ 和 $I(0)=0$。\n- 对于 $0 \\le t < t_e$（质膜，MyD88 主导）：\n  $$\\frac{dN}{dt} = k_N^{\\mathrm{on}} - k_N^{\\mathrm{off}}\\,N(t), \\quad \\frac{dI}{dt} = -\\,k_I^{\\mathrm{off}}\\,I(t)。$$\n- 对于 $t \\ge t_e$（内体，TRIF 主导）：\n  $$\\frac{dN}{dt} = -\\,k_N^{\\mathrm{off}}\\,N(t), \\quad \\frac{dI}{dt} = k_I^{\\mathrm{on}} - k_I^{\\mathrm{off}}\\,I(t)。$$\n- Ifnb$1$ 转录驱动被建模为希尔函数的“与”式乘积：\n  $$T(t) = k_{\\mathrm{tx}} \\cdot \\frac{N(t)^h}{K_N^h + N(t)^h} \\cdot \\frac{I(t)^h}{K_I^h + I(t)^h}。$$\n- 将半激活时间 $t_{1/2}(t_e)$ 定义为模拟窗口内使 $T(t) \\ge 0.5 \\cdot k_{\\mathrm{tx}}$ 成立的最小时间 $t$。\n- 使用以下参数值，这些值的选择基于科学合理性并反映了一阶激活/失活特性：\n  - $k_N^{\\mathrm{on}} = 0.15\\,\\mathrm{min}^{-1}$，$k_N^{\\mathrm{off}} = 0.10\\,\\mathrm{min}^{-1}$，\n  - $k_I^{\\mathrm{on}} = 0.12\\,\\mathrm{min}^{-1}$，$k_I^{\\mathrm{off}} = 0.05\\,\\mathrm{min}^{-1}$，\n  - $K_N = 0.3$（无量纲），$K_I = 0.5$（无量纲），$h=3$（无量纲），$k_{\\mathrm{tx}}=1$（无量纲）。\n- 在从 $t=0$ 到 $t=t_{\\max}$（$t_{\\max}=240\\,\\mathrm{min}$）的均匀时间网格上进行模拟，使用固定时间步长 $\\Delta t = 0.1\\,\\mathrm{min}$。所有时间量和输出都必须以分钟表示。\n\n计算任务：\n- 固定基线内吞时间 $t_{e,0} = 20\\,\\mathrm{min}$。\n- 对于给定的延迟 $d$（单位：分钟），定义 $t_e = t_{e,0} + d$ 并计算 $t_{1/2}(t_e)$。\n- 设 $b = t_{1/2}(t_{e,0})$ 为基线半激活时间。对于每个测试的延迟 $d$，报告\n  $$x_d = \\begin{cases}\n  t_{1/2}(t_{e,0}+d) - b, & \\text{如果 } t_{1/2}(t_{e,0}+d) \\text{ 和 } b \\text{ 均在 } [0,t_{\\max}] \\text{ 内存在，}\\\\\n  -1.0, & \\text{否则。}\n  \\end{cases}$$\n\n测试组：\n- 使用延迟时间集合（单位：分钟）$D = [0, 30, 60, 120]$。\n- 对于每个 $d \\in D$，按上述定义计算 $x_d$。\n\n最终输出格式：\n- 您的程序必须生成单行输出，其中包含一个逗号分隔的 Python 风格列表，内含四个值 $[x_0, x_{30}, x_{60}, x_{120}]$，每个值四舍五入到三位小数，用方括号括起来，并以分钟为单位表示。例如，一个可接受的格式是 $[0.000,30.000,60.000,120.000]$（此处显示的数字仅为示例；您的程序必须计算实际值）。", "solution": "问题陈述经过严格验证，被认为是有效的。它在科学上基于免疫学的既定原则，在数学上是作为一个常微分方程系统被良构的，并且其表述客观、没有歧义。所有必需的参数和条件都已提供，使得该问题是自洽且可解的。\n\n问题要求模拟一个用于 Toll 样受体 4 (TLR4) 信号传导的分段线性常微分方程 (ODE) 模型。该模型捕捉了两条不同通路的顺序激活：一条是早期的、定位于质膜的、激活 NF-κB 的 MyD88 依赖性通路，另一条是延迟的、定位于内体的、激活 IRF3 的 TRIF 依赖性通路。\n\n状态变量是 NF-κB 的核内活性（用 $N(t)$ 表示）和 IRF3 的核内活性（用 $I(t)$ 表示）。系统动力学在内吞时间 $t_e$ 发生切换。\n\n控制方程如下：\n1.  对于时间区间 $0 \\le t < t_e$ (MyD88 信号传导)：\n    $$\n    \\frac{dN}{dt} = k_N^{\\mathrm{on}} - k_N^{\\mathrm{off}}\\,N(t) \\\\\n    \\frac{dI}{dt} = -\\,k_I^{\\mathrm{off}}\\,I(t)\n    $$\n2.  对于时间区间 $t \\ge t_e$ (TRIF 信号传导)：\n    $$\n    \\frac{dN}{dt} = -\\,k_N^{\\mathrm{off}}\\,N(t) \\\\\n    \\frac{dI}{dt} = k_I^{\\mathrm{on}} - k_I^{\\mathrm{off}}\\,I(t)\n    $$\n初始条件为 $N(0)=0$ 和 $I(0)=0$。\n\n这些是一阶线性 ODE，可以解析求解。\n对于 $0 \\le t < t_e$：\n对于 $N(0)=0$，$N(t)$ 的解是指数趋近于稳态 $\\frac{k_N^{\\mathrm{on}}}{k_N^{\\mathrm{off}}}$：\n$$\nN(t) = \\frac{k_N^{\\mathrm{on}}}{k_N^{\\mathrm{off}}} \\left(1 - e^{-k_N^{\\mathrm{off}} t}\\right)\n$$\n对于 $I(0)=0$，$I(t)$ 的解是平凡的，因为没有激活项：\n$$\nI(t) = 0\n$$\n\n对于 $t \\ge t_e$：\n此阶段的解使用 $t=t_e$ 时的值作为初始条件。设 $\\tau = t - t_e$。\n$N$ 的初始条件是 $N(t_e) = \\frac{k_N^{\\mathrm{on}}}{k_N^{\\mathrm{off}}} \\left(1 - e^{-k_N^{\\mathrm{off}} t_e}\\right)$。\n$N(t)$ 的方程变成一个简单的指数衰减：\n$$\nN(t) = N(t_e) \\, e^{-k_N^{\\mathrm{off}} (t - t_e)}\n$$\n$I$ 的初始条件是 $I(t_e) = 0$。$I(t)$ 的解是指数趋近于其新的稳态 $\\frac{k_I^{\\mathrm{on}}}{k_I^{\\mathrm{off}}}$：\n$$\nI(t) = \\frac{k_I^{\\mathrm{on}}}{k_I^{\\mathrm{off}}} \\left(1 - e^{-k_I^{\\mathrm{off}} (t - t_e)}\\right)\n$$\n\n问题指定在步长为 $\\Delta t = 0.1\\,\\mathrm{min}$ 的离散时间网格上进行数值模拟。我们将使用前向欧拉法，这是一种一阶数值积分方案，适合此任务。对于微分方程 $\\frac{dy}{dt} = f(y, t)$，其更新规则为 $y_{k+1} = y_k + \\Delta t \\cdot f(y_k, t_k)$。\n\n将此应用于我们的系统：\n设 $N_k \\approx N(t_k)$ 且 $I_k \\approx I(t_k)$，其中 $t_k = k \\Delta t$。\n对于 $t_k < t_e$：\n$$\nN_{k+1} = N_k + \\Delta t \\left( k_N^{\\mathrm{on}} - k_N^{\\mathrm{off}} N_k \\right) \\\\\nI_{k+1} = I_k + \\Delta t \\left( -k_I^{\\mathrm{off}} I_k \\right)\n$$\n对于 $t_k \\ge t_e$：\n$$\nN_{k+1} = N_k + \\Delta t \\left( -k_N^{\\mathrm{off}} N_k \\right) \\\\\nI_{k+1} = I_k + \\Delta t \\left( k_I^{\\mathrm{on}} - k_I^{\\mathrm{off}} I_k \\right)\n$$\n\nIfnb$1$ 的转录驱动 $T(t)$ 被建模为一个协同的“与”门，需要 $N(t)$ 和 $I(t)$ 的协同活性：\n$$\nT(t) = k_{\\mathrm{tx}} \\cdot \\frac{N(t)^h}{K_N^h + N(t)^h} \\cdot \\frac{I(t)^h}{K_I^h + I(t)^h}\n$$\n半激活时间 $t_{1/2}(t_e)$ 是 $T(t)$ 达到或超过其最大可能值一半的第一个时间点 $t$，即 $T(t) \\ge 0.5 \\cdot k_{\\mathrm{tx}}$。\n\n计算步骤如下：\n1.  定义一个函数 `compute_t_half(t_e)`，它以内吞时间 $t_e$ 作为输入。\n2.  在该函数内部，初始化时间、N 和 I 数组。设置 $N_0=0$ 和 $I_0=0$。\n3.  从 $t=0$ 到 $t=t_{\\max}$ 以步长 $\\Delta t$ 进行迭代。在每一步中，根据 $t_{k-1}$ 是否小于 $t_e$ 来使用相应的欧拉更新规则计算 $N_k$ 和 $I_k$。\n4.  每一步之后，计算 $T(t_k)$。如果 $T(t_k) \\ge 0.5 \\cdot k_{\\mathrm{tx}}$，则返回当前时间 $t_k$。\n5.  如果循环完成而条件未被满足，则返回一个哨兵值（例如，无穷大或一个特殊常量）以表示在模拟窗口内未找到 $t_{1/2}$。\n6.  通过使用 $t_{e,0} = 20\\,\\mathrm{min}$ 调用函数来确定基线半激活时间 $b = t_{1/2}(t_{e,0})$。\n7.  遍历指定的延迟 $d \\in [0, 30, 60, 120]$。对于每个 $d$：\n    a. 计算受扰动的内吞时间 $t_e = t_{e,0} + d$。\n    b. 计算相应的半激活时间 $t_{1/2, d} = t_{1/2}(t_e)$。\n    c. 如果 $b$ 和 $t_{1/2, d}$ 都成功找到，则计算差值 $x_d = t_{1/2, d} - b$。\n    d. 否则，设置 $x_d = -1.0$。\n8.  收集所有延迟的 $x_d$ 值，并将输出格式化为一个四舍五入到三位小数的数字列表。\n\n这种结构化的方法确保了正确且稳健的实现，完全遵循了问题的规范。使用数值求解器与所提供的模拟参数是一致的。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the delay in Ifnb1 transcriptional activation\n    due to delayed TLR4 endocytosis.\n    \"\"\"\n\n    # Model parameters as specified in the problem\n    params = {\n        \"k_N_on\": 0.15,   # min^-1\n        \"k_N_off\": 0.10,  # min^-1\n        \"k_I_on\": 0.12,   # min^-1\n        \"k_I_off\": 0.05,  # min^-1\n        \"K_N\": 0.3,       # dimensionless\n        \"K_I\": 0.5,       # dimensionless\n        \"h\": 3,           # dimensionless\n        \"k_tx\": 1.0,      # dimensionless\n    }\n\n    # Simulation parameters\n    t_max = 240.0  # min\n    dt = 0.1       # min\n\n    # Test suite\n    t_e_baseline = 20.0  # min\n    delays = [0.0, 30.0, 60.0, 120.0]  # min\n\n    def compute_t_half(t_e, params, t_max, dt):\n        \"\"\"\n        Simulates the ODE system for a given endocytosis time t_e and finds\n        the half-activation time for Ifnb1 transcription.\n        \"\"\"\n        # Time grid\n        times = np.arange(0, t_max + dt, dt)\n        num_steps = len(times)\n\n        # State variable arrays\n        N = np.zeros(num_steps)\n        I = np.zeros(num_steps)\n\n        # Initial conditions are N[0] = 0, I[0] = 0, already set by np.zeros\n\n        # Simulation loop using Forward Euler method\n        for k in range(num_steps - 1):\n            t_current = times[k]\n\n            # Apply piecewise ODEs\n            if t_current < t_e:\n                # MyD88-dependent phase (plasma membrane)\n                dN_dt = params[\"k_N_on\"] - params[\"k_N_off\"] * N[k]\n                dI_dt = -params[\"k_I_off\"] * I[k]\n            else:\n                # TRIF-dependent phase (endosome)\n                dN_dt = -params[\"k_N_off\"] * N[k]\n                dI_dt = params[\"k_I_on\"] - params[\"k_I_off\"] * I[k]\n\n            # Update state variables\n            N[k+1] = N[k] + dN_dt * dt\n            I[k+1] = I[k] + dI_dt * dt\n\n            # Calculate transcriptional drive T(t)\n            N_h = N[k+1]**params[\"h\"]\n            I_h = I[k+1]**params[\"h\"]\n            KN_h = params[\"K_N\"]**params[\"h\"]\n            KI_h = params[\"K_I\"]**params[\"h\"]\n            \n            # Avoid division by zero if N or I are zero.\n            # In that case, the Hill term is zero.\n            if KN_h + N_h == 0 or KI_h + I_h == 0:\n                T_k1 = 0.0\n            else:\n                hill_N = N_h / (KN_h + N_h)\n                hill_I = I_h / (KI_h + I_h)\n                T_k1 = params[\"k_tx\"] * hill_N * hill_I\n\n            # Check for crossing the half-activation threshold\n            if T_k1 >= 0.5 * params[\"k_tx\"]:\n                return times[k+1]\n\n        # If threshold is not reached within t_max\n        return -1.0\n\n    # Calculate baseline half-activation time\n    baseline_t_half = compute_t_half(t_e_baseline, params, t_max, dt)\n\n    results = []\n    for d in delays:\n        current_t_e = t_e_baseline + d\n        current_t_half = compute_t_half(current_t_e, params, t_max, dt)\n\n        # Check if both baseline and current t_half were found\n        if baseline_t_half != -1.0 and current_t_half != -1.0:\n            x_d = current_t_half - baseline_t_half\n        else:\n            x_d = -1.0\n        \n        results.append(x_d)\n\n    # Format the final output string\n    output_str = f\"[{','.join(f'{val:.3f}' for val in results)}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2873583"}]}