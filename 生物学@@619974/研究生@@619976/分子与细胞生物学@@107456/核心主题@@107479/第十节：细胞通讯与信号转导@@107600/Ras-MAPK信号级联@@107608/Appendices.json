{"hands_on_practices": [{"introduction": "在之前的实践中，我们使用希尔方程来量化信号通路的开关特性，即超敏性（ultrasensitivity）。但这种开关行为的生化机制是什么呢？本练习将深入探讨一个核心的信号转导基序——共价修饰循环，例如由激酶催化的磷酸化和由磷酸酶催化的去磷酸化过程。通过推导著名的 Goldbeter-Koshland 方程，你将从第一性原理出发，理解当修饰酶和去修饰酶都工作在饱和（零级动力学）状态时，系统如何能产生急剧的、类似开关的响应。这项实践将使你从现象学描述转向机理层面的深刻理解，揭示简单酶促反应如何涌现出复杂的非线性系统行为。", "problem": "在一个模拟细胞外信号调节激酶 (ERK) 活化的共价修饰循环中，细胞外信号调节激酶激酶 (MEK) 催化 ERK 的磷酸化，使其成为活性的双磷酸化形式，而双特异性磷酸酶 (DUSP) 则催化其去磷酸化，使其回到非活性形式。设 ERK 的总保守浓度为 $S_{T}$，并定义無量綱活性分数 $R \\equiv [\\mathrm{ERK}^{\\ast}]/S_{T}$，其中 $R \\in [0,1]$。在对酶-底物复合物采用准稳态近似，并假设每种酶都遵循 Michaelis–Menten 动力学的情况下，正向和反向速率分别为：\n$$\nv_{1}(R) \\;=\\; \\frac{V_{1}\\,(1 - R)}{K_{1} + 1 - R}\n\\quad\\text{and}\\quad\nv_{2}(R) \\;=\\; \\frac{V_{2}\\,R}{K_{2} + R},\n$$\n其中 $V_{1} \\equiv k_{\\mathrm{cat},1} E_{1,T}$ 和 $V_{2} \\equiv k_{\\mathrm{cat},2} E_{2,T}$ 分别是 MEK 和 DUSP 的最大速率，$K_{1} \\equiv K_{m,1}/S_{T}$ 和 $K_{2} \\equiv K_{m,2}/S_{T}$ 是无量纲的 Michaelis 参数。仅从质量守恒、常微分方程 $dR/dt \\,=\\, v_{1}(R) - v_{2}(R)$ 以及上述 $v_1$ 和 $v_2$ 的准稳态依据出发，推导满足 $v_{1}(R^{\\ast}) = v_{2}(R^{\\ast})$ 和 $0 \\le R^{\\ast} \\le 1$ 的精确稳态解 $R^{\\ast}$ 的闭合形式表达式。你的最终表达式必须是关于 $V_{1}$、$V_{2}$、$K_{1}$ 和 $K_{2}$ 的单一代数公式，并且必须明确选择二次方程的正确分支，以确保对于所有可接受的参数，$R^{\\ast}$ 都是生物学上可接受的 ($0 \\le R^{\\ast} \\le 1$)。不要引入任何进一步的近似。\n\n然后，利用 MEK 催化的 ERK 磷酸化和双特异性磷酸酶 (DUSP) 催化的去磷酸化的生物化学特征，说明在何种参数范围下（根据 $K_1$、$K_2$ 相对于 $1$ 的大小以及 $V_1$ 相对于 $V_2$ 的大小），稳态输入-输出关系 $R^{\\ast}(V_{1},V_{2},K_{1},K_{2})$ 预期会表现出0级超敏性，并从第一性原理出发证明你的陈述。你报告的最终数值或解析答案必须是你推导出的 $R^{\\ast}$ 的单一闭合形式表达式，不带单位。无需四舍五入。", "solution": "该问题要求推导活化ERK的稳态分数（记为 $R^{\\ast}$），并分析导致超敏性的参数范围。验证证实了该问题是适定的 (well-posed)，并且在科学上基于酶动力学和细胞信号传导的原理。\n\n首先，我们推导稳态活性分数 $R^{\\ast}$ 的表达式。稳态由磷酸化速率 $v_{1}$ 等于去磷酸化速率 $v_{2}$ 的条件定义。\n给定的速率方程为：\n$$ v_{1}(R) = \\frac{V_{1}\\,(1 - R)}{K_{1} + 1 - R} $$\n$$ v_{2}(R) = \\frac{V_{2}\\,R}{K_{2} + R} $$\n在稳态下，$R = R^{\\ast}$ 且 $v_{1}(R^{\\ast}) = v_{2}(R^{\\ast})$。\n$$ \\frac{V_{1}\\,(1 - R^{\\ast})}{K_{1} + 1 - R^{\\ast}} = \\frac{V_{2}\\,R^{\\ast}}{K_{2} + R^{\\ast}} $$\n为求解 $R^{\\ast}$，我们交叉相乘以消去分母：\n$$ V_{1}(1 - R^{\\ast})(K_{2} + R^{\\ast}) = V_{2}R^{\\ast}(K_{1} + 1 - R^{\\ast}) $$\n展开方程两边：\n$$ V_{1}(K_{2} + R^{\\ast} - K_{2}R^{\\ast} - (R^{\\ast})^2) = V_{2}(K_{1}R^{\\ast} + R^{\\ast} - (R^{\\ast})^2) $$\n$$ V_{1}K_{2} + V_{1}(1 - K_{2})R^{\\ast} - V_{1}(R^{\\ast})^2 = V_{2}(1 + K_{1})R^{\\ast} - V_{2}(R^{\\ast})^2 $$\n将该方程重新排列成标准二次方程形式 $a(R^{\\ast})^2 + bR^{\\ast} + c = 0$：\n$$ (V_{2} - V_{1})(R^{\\ast})^2 + [V_{1}(1 - K_{2}) - V_{2}(1 + K_{1})]R^{\\ast} + V_{1}K_{2} = 0 $$\n二次方程的系数为：\n$$ a = V_{2} - V_{1} $$\n$$ b = V_{1}(1 - K_{2}) - V_{2}(1 + K_{1}) = V_{1} - V_{1}K_{2} - V_{2} - V_{2}K_{1} $$\n$$ c = V_{1}K_{2} $$\n$R^{\\ast}$ 的解由二次公式给出：\n$$ R^{\\ast} = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n我们必须选择物理上可接受的根，该根必须对所有有效的非负参数值 ($V_1, V_2, K_1, K_2 > 0$) 满足 $0 \\leq R^{\\ast} \\leq 1$。我们可以通过检验极限情况来确定正确的符号。\n考虑激酶活性为零的情况，$V_{1} \\to 0$。我们预期底物完全失活，因此 $R^{\\ast} \\to 0$。在此极限下，系数变为 $a \\to V_2$，$b \\to -V_2(1+K_1)$ 和 $c \\to 0$。二次方程简化为 $V_{2}(R^{\\ast})^2 - V_{2}(1+K_{1})R^{\\ast} = 0$，其解为 $R^{\\ast}=0$ 和 $R^{\\ast}=1+K_1$。由于 $K_1>0$，唯一可接受的解是 $R^{\\ast}=0$。二次公式给出 $R^{\\ast} \\to \\frac{V_2(1+K_1) \\pm \\sqrt{V_2^2(1+K_1)^2}}{2V_2} = \\frac{1+K_1 \\pm (1+K_1)}{2}$。取负号得到 $0$，而取正号得到 $1+K_1$。因此，我们必须选择负号。\n\n考虑磷酸酶活性为零的情況，$V_{2} \\to 0$。我们预期底物完全活化，因此 $R^{\\ast} \\to 1$。在此极限下，系数变为 $a \\to -V_1$，$b \\to V_1(1-K_2)$ 和 $c \\to V_1K_2$。方程变为 $-V_1(R^{\\ast})^2 + V_1(1-K_2)R^{\\ast} + V_1K_2 = 0$，简化为 $(R^{\\ast})^2 - (1-K_2)R^{\\ast} - K_2 = 0$。该式可因式分解为 $(R^{\\ast}-1)(R^{\\ast}+K_2)=0$，解为 $R^{\\ast}=1$ 和 $R^{\\ast}=-K_2$。唯一可接受的解为 $R^{\\ast}=1$。二次公式给出 $R^{\\ast} \\to \\frac{-V_1(1-K_2) \\pm \\sqrt{V_1^2(1-K_2)^2 - 4(-V_1)(V_1K_2)}}{2(-V_1)} = \\frac{-(1-K_2) \\pm \\sqrt{(1-K_2)^2+4K_2}}{-2} = \\frac{-(1-K_2) \\pm \\sqrt{(1+K_2)^2}}{-2} = \\frac{-(1-K_2) \\pm (1+K_2)}{-2}$。取负号得到 $\\frac{-1+K_2-1-K_2}{-2} = 1$，而取正号得到 $\\frac{-1+K_2+1+K_2}{-2} = -K_2$。我们同样必须选择负号。\n\n因此，唯一的、生物学上可接受的稳态解是：\n$$ R^{\\ast} = \\frac{-b - \\sqrt{b^2 - 4ac}}{2a} $$\n代入 $a$、$b$ 和 $c$ 的表达式：\n$$ R^{\\ast} = \\frac{V_{2}(1+K_{1}) - V_{1}(1-K_{2}) - \\sqrt{\\left(V_{1}(1-K_{2}) - V_{2}(1+K_{1})\\right)^2 - 4(V_{2}-V_{1})V_{1}K_{2}}}{2(V_{2}-V_{1})} $$\n这个精确的闭合形式表达式对所有可接受的参数值都有效。\n\n接下来，我们讨论0级超敏性的条件。当酶在其饱和或零级动力学区域内运作时，会出现这种现象。\n激酶 MEK 作用于非活性 ERK，其无量纲浓度为 $1-R$。当 MEK 的底物浓度远大于其 Michaelis 常数时，即 $S_{T}(1-R) \\gg K_{m,1}$，MEK 处于饱和状态。用无量綱形式表示，即为 $1-R \\gg K_1$。\n磷酸酶 DUSP 作用于活性 ERK，其无量纲浓度为 $R$。当 $S_{T}R \\gg K_{m,2}$ 時，DUSP 处于饱和状态，用无量纲形式表示，即为 $R \\gg K_2$。\n为使两种酶同时饱和，系统必须满足 $K_1 \\ll 1-R$ 和 $K_2 \\ll R$。这仅在 $R$ 不接近 $0$ 或 $1$ 时才可能实现，这反过来又要求无量纲 Michaelis 参数远小于 $1$：\n$$ K_{1} \\ll 1 \\quad \\text{and} \\quad K_{2} \\ll 1 $$\n在这些条件下，速率定律在 $R$ 的一个显著范围内近似于零级动力学。\n当 $1-R \\gg K_1$ 时，正向速率 $v_1(R) = \\frac{V_1(1-R)}{K_1+1-R} \\approx \\frac{V_1(1-R)}{1-R} = V_1$。\n当 $R \\gg K_2$ 时，反向速率 $v_2(R) = \\frac{V_2 R}{K_2+R} \\approx \\frac{V_2 R}{R} = V_2$。\n在稳态下，$v_1 \\approx v_2$，这意味着 $V_1 \\approx V_2$。这确定了系统响应最敏感的区域。\n如果 $V_1 < V_2$，净去磷酸化速率很高，将系统驱动到一个 $R^{\\ast}$ 非常小的状态。在这种“关闭”（OFF）状态下，DUSP 不再饱和 ($R^{\\ast} \\sim K_2$)，但 MEK 仍然饱和。速率在较低的 $R^{\\ast}$ 值处达到平衡。\n如果 $V_1 > V_2$，净磷酸化速率很高，将系统驱动到一个 $R^{\\ast}$ 接近 $1$ 的状态。在这种“开启”（ON）状态下，MEK 不再饱和 ($(1-R^{\\ast}) \\sim K_1$)，但 DUSP 饱和。速率在较高的 $R^{\\ast}$ 值处达到平衡。\n从“关闭”状态（$R^{\\ast} \\approx 0$）到“开启”状态（$R^{\\ast} \\approx 1$）的转换发生在以 $V_1 = V_2$ 为中心的一个非常窄的刺激（例如 $V_1$）范围内。这种急剧的、开关般的转换是零级超敏性的标志。\n总之，0级超敏性的参数范围具有以下特点：\n1.  $K_1 \\ll 1$ 且 $K_2 \\ll 1$：两种酶都有可能被各自的底物饱和，因为它们的 Michaelis 常数远小于总底物浓度 $S_T$。\n2.  $V_1$ 与 $V_2$ 大小相当：开关行为以最大酶促能力相平衡的点为中心。", "answer": "$$\\boxed{\\frac{V_{2}(1+K_{1}) - V_{1}(1-K_{2}) - \\sqrt{\\left(V_{1}(1-K_{2}) - V_{2}(1+K_{1})\\right)^2 - 4V_{1}K_{2}(V_{2}-V_{1})}}{2(V_{2}-V_{1})}}$$", "id": "2961613"}, {"introduction": "我们已经了解了单个信号模块如何产生开关行为，但当这些模块嵌入到具有反馈回路的更大网络中时，会发生什么呢？本练习将探讨正反馈这一关键网络基序如何产生更复杂的系统行为，特别是双稳态（bistability）。双稳态使细胞在相同输入信号下可以稳定地处于“开”或“关”两种状态之一，从而形成一种细胞记忆。通过构建一个包含正反馈的 Ras-MAPK 简化动力学模型，你将学习如何通过分析不动点及其稳定性来揭示双稳态等涌现特性。这项综合性实践将帮助你理解信号网络如何将暂时的刺激转化为持久的细胞状态变化，这是理解细胞决策过程的关键一步。", "problem": "我们为您提供一个简化的无量纲动力学模型，该模型描述了 RAF–MEK–ERK 信号级联，其中包含从细胞外信号调节激酶 (ERK) 到快速加速的纤维肉瘤 (RAF) 的正反馈。该模型将丝裂原活化蛋白激酶/细胞外信号调节激酶 (MEK/ERK) 的活化过程聚合成一个超敏模块，并将正反馈捕捉为 ERK 增强的 RAF 活化。状态变量是活性分数 $R \\in [0,1]$ (RAF) 和 $E \\in [0,1]$ (ERK)。常微分方程 (ODEs) 如下：\n$$\n\\frac{dR}{dt} = k_{R,\\mathrm{on}} \\left(\\alpha + \\beta \\, H_n(E;K)\\right)\\,(1 - R) - k_{R,\\mathrm{off}}\\,R,\n$$\n$$\n\\frac{dE}{dt} = k_{E,\\mathrm{on}} \\, H_m(R;J)\\,(1 - E) - k_{E,\\mathrm{off}}\\,E,\n$$\n其中 $H_n(x;K)$ 是一个 Hill 激活函数，定义为\n$$\nH_n(x;K) = \\frac{x^n}{K^n + x^n},\n$$\n其中 Hill 系数为 $n \\ge 1$，半饱和常数为 $K \\in (0,1]$。类似地，$H_m(R;J)$ 的 Hill 系数为 $m \\ge 1$，半饱和常数为 $J \\in (0,1]$。所有变量和参数均为无量纲。参数如下：\n- $k_{R,\\mathrm{on}} > 0$, $k_{R,\\mathrm{off}} > 0$: RAF 的活化和失活速率常数。\n- $k_{E,\\mathrm{on}} > 0$, $k_{E,\\mathrm{off}} > 0$: ERK 的活化和失活速率常数。\n- $\\alpha \\in [0,1]$: 基础的 Ras 驱动的 RAF 输入。\n- $\\beta \\ge 0$: ERK 到 RAF 的正反馈强度。\n- $n \\ge 1$, $m \\ge 1$: ERK 到 RAF 和 RAF 到 ERK 模块的 Hill 系数。\n- $K \\in (0,1]$, $J \\in (0,1]$: Hill 函数的半饱和常数。\n\n您的任务：\n1) 从生物化学反应动力学的第一性原理和核心定义出发，推导一个计算准则，以确定系统是否表现出双稳态（即在 $(R,E) \\in [0,1]^2$ 空间中，存在两个渐近稳定不动点，且它们之间至少被一个不稳定不动点分​​隔）。您可以使用基于图形的零斜线不动点映射方法，也可以使用通过平衡点处的雅可比矩阵特征值进行的线性稳定性分析，但您必须从给定的 ODEs 和不动点稳定性的定义开始。\n\n2) 设计一个算法流程，该流程在给定一组参数的情况下，计算出 $[0,1]^2$ 内的所有不动点，并使用您的准则将每个不动点分类为稳定或不稳定。该流程应具有鲁棒性，不依赖于外部文件或用户输入。不允许提供有关数值方法的提示；您必须从模型的数学结构中推导出您的方法。\n\n3) 将您的流程在一个程序中实现，该程序对于以下测试套件中的每一组参数，返回渐近稳定不动点的整数数量：\n- 测试 A (无反馈，预期为单稳态): \n  $\\alpha = 0.05$, $\\beta = 0.0$, $n = 4$, $m = 4$, $K = 0.4$, $J = 0.3$, $k_{R,\\mathrm{on}} = 5.0$, $k_{R,\\mathrm{off}} = 1.0$, $k_{E,\\mathrm{on}} = 5.0$, $k_{E,\\mathrm{off}} = 1.0$。\n- 测试 B (弱反馈且无超敏性，预期为单稳态):\n  $\\alpha = 0.05$, $\\beta = 0.2$, $n = 1$, $m = 1$, $K = 0.5$, $J = 0.5$, $k_{R,\\mathrm{on}} = 5.0$, $k_{R,\\mathrm{off}} = 1.0$, $k_{E,\\mathrm{on}} = 5.0$, $k_{E,\\mathrm{off}} = 1.0$。\n- 测试 C (强反馈且有超敏性，预期为双稳态):\n  $\\alpha = 0.01$, $\\beta = 1.2$, $n = 6$, $m = 6$, $K = 0.3$, $J = 0.2$, $k_{R,\\mathrm{on}} = 8.0$, $k_{R,\\mathrm{off}} = 1.0$, $k_{E,\\mathrm{on}} = 8.0$, $k_{E,\\mathrm{off}} = 1.0$。\n- 测试 D (与测试C相同，但具有强失活作用，预期为单稳态):\n  $\\alpha = 0.01$, $\\beta = 1.2$, $n = 6$, $m = 6$, $K = 0.3$, $J = 0.2$, $k_{R,\\mathrm{on}} = 8.0$, $k_{R,\\mathrm{off}} = 4.0$, $k_{E,\\mathrm{on}} = 8.0$, $k_{E,\\mathrm{off}} = 4.0$。\n- 测试 E (高基础输入，预期在高状态下为单稳态):\n  $\\alpha = 0.6$, $\\beta = 0.8$, $n = 2$, $m = 2$, $K = 0.8$, $J = 0.8$, $k_{R,\\mathrm{on}} = 5.0$, $k_{R,\\mathrm{off}} = 1.0$, $k_{E,\\mathrm{on}} = 5.0$, $k_{E,\\mathrm{off}} = 1.0$。\n\n要求的最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，例如 $[x_A,x_B,x_C,x_D,x_E]$，其中每个 $x_\\cdot$ 是对应测试用例的稳定不动点数量的整数。由于所有量都是无量纲的，因此不需要单位。\n\n注意：程序必须是一个完整、可运行的实现，它仅根据 ODE 定义和基础微积分来执行不动点搜索和稳定性分类，不使用任何外部数据或用户交互。鲁棒数值技术的使用必须直接源于数学结构，而不是来自预先指定的求解公式。请确保整个过程的科学真实性和内部一致性。此处不适用角度单位，输出中也不需要百分比。", "solution": "问题陈述已经过严格审查，并被确定为有效。它在科学上基于生物化学反应动力学和动力系统理论的原理，是适定、客观的，并为严谨求解提供了一套完整的信息。因此，我们可以继续进行推导和计算分析。\n\n该问题要求一个用于判断双稳态的准则，以及一个寻找并分类给定二维常微分方程 (ODEs) 系统不动点的算法流程：\n$$\n\\frac{dR}{dt} = F_R(R, E) = k_{R,\\mathrm{on}} \\left(\\alpha + \\beta \\, H_n(E;K)\\right)\\,(1 - R) - k_{R,\\mathrm{off}}\\,R\n$$\n$$\n\\frac{dE}{dt} = F_E(R, E) = k_{E,\\mathrm{on}} \\, H_m(R;J)\\,(1 - E) - k_{E,\\mathrm{off}}\\,E\n$$\n其中 $R, E \\in [0,1]^2$。正方形 $[0,1]^2$ 是该系统的一个不变集，因为其边界上的向量场指向域内或与其相切。\n\n**1. 双稳态计算准则的推导**\n\n系统的一个不动点（或平衡点）是状态 $(R^*, E^*)$，在该状态下所有状态变量的变化率均为零。在数学上，这由条件 $\\frac{dR}{dt} = 0$ 和 $\\frac{dE}{dt} = 0$ 定义。\n\n将导数设为零可以得到一个由两个代数方程组成的方程组，其解即为不动点：\n$$\nk_{R,\\mathrm{on}} \\left(\\alpha + \\beta \\, H_n(E^*;K)\\right)\\,(1 - R^*) - k_{R,\\mathrm{off}}\\,R^* = 0 \\quad (1)\n$$\n$$\nk_{E,\\mathrm{on}} \\, H_m(R^*;J)\\,(1 - E^*) - k_{E,\\mathrm{off}}\\,E^* = 0 \\quad (2)\n$$\n\n这些方程定义了系统的零斜线。$R$-零斜线是 $\\frac{dR}{dt}=0$ 所在的曲线，$E$-零斜线是 $\\frac{dE}{dt}=0$ 所在的曲线。不动点是这两条零斜线在 $(R, E)$ 相空间中的交点。\n\n从方程 (1) 中，我们可以将 $R^*$ 表示为 $E^*$ 的函数：\n$$\nR^* = N_R(E^*) = \\frac{k_{R,\\mathrm{on}} \\left(\\alpha + \\beta \\, H_n(E^*;K)\\right)}{k_{R,\\mathrm{on}} \\left(\\alpha + \\beta \\, H_n(E^*;K)\\right) + k_{R,\\mathrm{off}}}\n$$\n从方程 (2) 中，我们可以将 $E^*$ 表示为 $R^*$ 的函数：\n$$\nE^* = N_E(R^*) = \\frac{k_{E,\\mathrm{on}} \\, H_m(R^*;J)}{k_{E,\\mathrm{on}} \\, H_m(R^*;J) + k_{E,\\mathrm{off}}}\n$$\n将 $R^* = N_R(E^*)$ 代入第二个表达式，得到一个关于单变量 $E^*$ 的方程：\n$$\nE^* = N_E(N_R(E^*))\n$$\n函数 $g(E) = N_E(N_R(E)) - E = 0$ 在区间 $[0,1]$ 内的根提供了所有不动点的 E 坐标。对于每个根 $E^*$，相应的 R 坐标通过 $R^* = N_R(E^*)$ 计算得出。\n\n不动点 $(R^*, E^*)$ 的稳定性是通过在该点附近对系统进行线性化来确定的。我们考虑一个小扰动 $\\mathbf{u} = [R-R^*, E-E^*]^T$。扰动的动力学由在不动点处求值的雅可比矩阵 $\\mathbf{J}$ 决定：$\\frac{d\\mathbf{u}}{dt} = \\mathbf{J} \\mathbf{u}$，其中\n$$\n\\mathbf{J} =\n\\begin{pmatrix}\n\\frac{\\partial F_R}{\\partial R} & \\frac{\\partial F_R}{\\partial E} \\\\\n\\frac{\\partial F_E}{\\partial R} & \\frac{\\partial F_E}{\\partial E}\n\\end{pmatrix}_{(R^*, E^*)}\n$$\n当且仅当 $\\mathbf{J}$ 的所有特征值都具有负实部时，不动点是渐近稳定的。对于一个 $2 \\times 2$ 矩阵，Routh-Hurwitz 稳定性判据提供了充要条件：\n1.  $\\mathrm{Tr}(\\mathbf{J}) = \\frac{\\partial F_R}{\\partial R} + \\frac{\\partial F_E}{\\partial E} < 0$\n2.  $\\det(\\mathbf{J}) = \\frac{\\partial F_R}{\\partial R} \\frac{\\partial F_E}{\\partial E} - \\frac{\\partial F_R}{\\partial E} \\frac{\\partial F_E}{\\partial R} > 0$\n\n让我们计算雅可比矩阵的元素。\n$\\frac{\\partial F_R}{\\partial R} = -k_{R,\\mathrm{on}} (\\alpha + \\beta H_n(E;K)) - k_{R,\\mathrm{off}}$。使用方程 (1)，我们可以在不动点处将其简化为 $J_{11} = -\\frac{k_{R,\\mathrm{off}}}{1-R^*}$。\n$\\frac{\\partial F_E}{\\partial E} = -k_{E,\\mathrm{on}} H_m(R;J) - k_{E,\\mathrm{off}}$。使用方程 (2)，我们可将其简化为 $J_{22} = -\\frac{k_{E,\\mathrm{off}}}{1-E^*}$。\n由于所有参数均为正，且不动点必须位于 $[0,1)^2$ 内（当 $R=1$ 或 $E=1$ 时不可能存在不动点，因为这要求 $k_{R,\\mathrm{off}}=0$ 或 $k_{E,\\mathrm{off}}=0$），所以 $J_{11}$ 和 $J_{22}$ 均为严格负值。因此，$\\mathrm{Tr}(\\mathbf{J}) = J_{11} + J_{22}$ 总是为负。\n\n因此，任何不动点的稳定性完全由雅可比矩阵行列式的符号决定：\n-   如果 $\\det(\\mathbf{J}) > 0$，不动点是渐近稳定的。\n-   如果 $\\det(\\mathbf{J}) < 0$，不动点是不稳定的（一个鞍点，因为 $\\mathrm{Tr}(\\mathbf{J}) < 0$）。\n\n非对角线项为：\n$J_{12} = \\frac{\\partial F_R}{\\partial E} = k_{R,\\mathrm{on}} \\beta (1-R^*) \\frac{d H_n(E;K)}{dE} \\Big|_{E=E^*}$\n$J_{21} = \\frac{\\partial F_E}{\\partial R} = k_{E,\\mathrm{on}}(1-E^*) \\frac{d H_m(R;J)}{dR} \\Big|_{R=R^*}$\n其中 Hill 函数的导数为 $\\frac{dH_p(x;C)}{dx} = \\frac{p C^p x^{p-1}}{(C^p+x^p)^2} \\ge 0$。\n项 $J_{11}J_{22}$ 总是为正。项 $J_{12}J_{21}$ 代表正反馈回路的强度，为非负值。当正反馈项足够强，足以克服自阻尼对角项时，便会产生不稳定性，使得 $\\det(\\mathbf{J})$ 为负。\n\n**双稳态的计算准则：** 如果存在至少两个不同的不动点 $(R_1^*, E_1^*)$ 和 $(R_2^*, E_2^*)$，其雅可比矩阵行列式 $\\det(\\mathbf{J})$ 均为正，则系统是双稳态的。这意味着它们之间至少被一个 $\\det(\\mathbf{J}) < 0$ 的不稳定不动点分隔。\n\n**2. 算法流程**\n\n上述推导自然引出了以下鲁棒的计算流程：\n1.  **定义函数**：实现零斜线函数 $R = N_R(E)$ 和 $E = N_E(R)$，以及用于求根的复合函数 $g(E) = N_E(N_R(E)) - E$。\n2.  **寻找不动点**：\n    a. 在区间 $[0,1]$ 上为 $E$ 创建一个精细的均匀网格点。\n    b. 在每个网格点上计算 $g(E)$ 的值。识别所有 $g(E)$ 变号的相邻点对，这表明在该子区间内存在一个根。\n    c. 对于每个这样的子区间，使用数值求根算法（例如，Brent 法）来找到精确的根 $E^*$。\n    d. 对于每个根 $E^*$，使用 $R^*=N_R(E^*)$ 计算相应的 $R^*$。收集所有唯一的不动点 $(R^*, E^*)$。\n3.  **分类不动点**：\n    a. 对于找到的每个不动点 $(R^*, E^*)$，计算雅可比矩阵 $\\mathbf{J}$ 的四个元素。\n    b. 计算行列式 $\\det(\\mathbf{J}) = J_{11}J_{22} - J_{12}J_{21}$。\n    c. 如果 $\\det(\\mathbf{J}) > 0$，则将该不动点分类为稳定。\n4.  **统计稳定点**：对归类为稳定的不动点进行计数。这个整数就是给定参数集的最终结果。\n\n该流程在以下程序中实现，用以解决所提供的测试用例。\n```python\n# The complete and runnable Python 3 code that follows the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import brentq\n\ndef count_stable_fixed_points(alpha, beta, n, m, K, J, k_R_on, k_R_off, k_E_on, k_E_off):\n    \"\"\"\n    Calculates the number of stable fixed points for the given parameter set.\n\n    The algorithm is based on finding the roots of a composite function representing\n    the fixed-point condition and then classifying each fixed point using linear\n    stability analysis via the Jacobian matrix.\n    \"\"\"\n\n    # 1. Define helper functions based on the model equations.\n    def H(x, h_coeff, h_sat):\n        \"\"\"Numerically stable Hill function.\"\"\"\n        if x = 0.0:\n            return 0.0\n        # For large exponents, this could be unstable, but test cases are fine.\n        x_n = x**h_coeff\n        K_n = h_sat**h_coeff\n        return x_n / (K_n + x_n)\n\n    # R-nullcline: R = N_R(E)\n    def N_R(E):\n        \"\"\"Calculates R at equilibrium for a given E.\"\"\"\n        S_E = alpha + beta * H(E, n, K)\n        return (k_R_on * S_E) / (k_R_on * S_E + k_R_off)\n\n    # E-nullcline: E = N_E(R)\n    def N_E(R):\n        \"\"\"Calculates E at equilibrium for a given R.\"\"\"\n        H_R = H(R, m, J)\n        return (k_E_on * H_R) / (k_E_on * H_R + k_E_off)\n\n    # 2. Define the function g(E) = N_E(N_R(E)) - E for root-finding.\n    def g(E):\n        \"\"\"The function whose roots are the E-coordinates of the fixed points.\"\"\"\n        if E  0.0 or E > 1.0:\n            return 1e12  # Out of bounds\n        return N_E(N_R(E)) - E\n\n    # 3. Find all roots of g(E) = 0 in [0, 1].\n    fixed_points = []\n    num_grid_points = 10000\n    E_grid = np.linspace(0.0, 1.0, num_grid_points)\n    \n    # Scan for roots within intervals by checking for sign changes.\n    for i in range(num_grid_points - 1):\n        e1, e2 = E_grid[i], E_grid[i+1]\n        try:\n            # Check for sign change\n            if g(e1) * g(e2)  0:\n                E_root = brentq(g, e1, e2)\n                R_root = N_R(E_root)\n\n                # Ensure the point is physically valid and unique.\n                if 0.0 = R_root = 1.0 and 0.0 = E_root = 1.0:\n                    is_new = all(not np.isclose(E_root, fp[1], atol=1e-8) for fp in fixed_points)\n                    if is_new:\n                        fixed_points.append((R_root, E_root))\n        except (ValueError, RuntimeError):\n            # brentq might fail if g doesn't change sign or is ill-behaved. Ignore.\n            continue\n    \n    # 4. Classify each fixed point using the Jacobian determinant.\n    stable_fp_count = 0\n    for R_star, E_star in fixed_points:\n        # A fixed point at the boundary R=1 or E=1 is not possible for k > 0.\n        # This check is for numerical robustness.\n        if np.isclose(R_star, 1.0) or np.isclose(E_star, 1.0):\n            continue\n\n        # Derivative of the Hill function\n        def dH_dx(x, h_coeff, h_sat):\n            if x = 0.0:\n                if h_coeff > 1: return 0.0\n                if h_coeff == 1: return 1.0 / h_sat\n                return np.inf  # Not expected for n, m >= 1\n            \n            x_h_minus_1 = x**(h_coeff - 1)\n            x_h = x_h_minus_1 * x\n            K_h = h_sat**h_coeff\n            return h_coeff * K_h * x_h_minus_1 / ((K_h + x_h)**2)\n\n        # Jacobian elements evaluated at the fixed point (R*, E*)\n        J11 = -k_R_off / (1.0 - R_star)\n        \n        dH_dE = dH_dx(E_star, n, K)\n        J12 = k_R_on * beta * (1.0 - R_star) * dH_dE\n        \n        dH_dR = dH_dx(R_star, m, J)\n        J21 = k_E_on * (1.0 - E_star) * dH_dR\n\n        J22 = -k_E_off / (1.0 - E_star)\n\n        # As proven, Tr(J) is always negative. Stability depends on det(J).\n        if (J11 * J22 - J12 * J21) > 0:\n            stable_fp_count += 1\n            \n    return stable_fp_count\n\ndef solve():\n    \"\"\"Main function to solve the problem for all specified test cases.\"\"\"\n    \n    test_cases = [\n        # Test A: no feedback, monostability expected\n        {'alpha': 0.05, 'beta': 0.0, 'n': 4, 'm': 4, 'K': 0.4, 'J': 0.3,\n         'k_R_on': 5.0, 'k_R_off': 1.0, 'k_E_on': 5.0, 'k_E_off': 1.0},\n        # Test B: weak feedback, no ultrasensitivity, monostability expected\n        {'alpha': 0.05, 'beta': 0.2, 'n': 1, 'm': 1, 'K': 0.5, 'J': 0.5,\n         'k_R_on': 5.0, 'k_R_off': 1.0, 'k_E_on': 5.0, 'k_E_off': 1.0},\n        # Test C: strong feedback, ultrasensitivity, bistability expected\n        {'alpha': 0.01, 'beta': 1.2, 'n': 6, 'm': 6, 'K': 0.3, 'J': 0.2,\n         'k_R_on': 8.0, 'k_R_off': 1.0, 'k_E_on': 8.0, 'k_E_off': 1.0},\n        # Test D: strong deactivation, monostability expected\n        {'alpha': 0.01, 'beta': 1.2, 'n': 6, 'm': 6, 'K': 0.3, 'J': 0.2,\n         'k_R_on': 8.0, 'k_R_off': 4.0, 'k_E_on': 8.0, 'k_E_off': 4.0},\n        # Test E: high basal input, monostability expected\n        {'alpha': 0.6, 'beta': 0.8, 'n': 2, 'm': 2, 'K': 0.8, 'J': 0.8,\n         'k_R_on': 5.0, 'k_R_off': 1.0, 'k_E_on': 5.0, 'k_E_off': 1.0},\n    ]\n\n    results = []\n    for params in test_cases:\n        count = count_stable_fixed_points(**params)\n        results.append(count)\n\n    # Final print statement in the exact required format.\n    # print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "answer": "$$\\boxed{[1,1,2,1,1]}$$", "id": "2961630"}]}