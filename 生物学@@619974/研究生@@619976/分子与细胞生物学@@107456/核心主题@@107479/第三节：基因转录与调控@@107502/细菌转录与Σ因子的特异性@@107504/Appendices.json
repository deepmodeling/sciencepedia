{"hands_on_practices": [{"introduction": "理解 $\\sigma$ 因子特异性的一个基石，是量化DNA序列的微小变化如何影响其与RNA聚合酶的结合亲和力。本练习提供了一种具体方法，使用加性自由能模型（一种在生物物理学中广泛应用的基础工具）来解决这个问题。通过计算单个碱基突变所引起的结合自由能变化（$\\Delta\\Delta G$），您可以亲手实践并直观地理解序列偏离理想共有序列时所付出的能量代价，这是定量理解基因调控的第一步。[@problem_id:2934443]", "problem": "在细菌中，核糖核酸（RNA）聚合酶（RNAP）的$\\sigma^{70}$因子通过其区域$4$形成的碱基特异性接触来识别启动子$-35$六聚体。对于序列特异性结合，一个被广泛使用且有实验支持的近似方法是，结合自由能是模体中每个位置上核苷酸的独立、位置特异性贡献的总和，再加上一个序列无关的偏移量。设六聚体序列$b_{1}b_{2}b_{3}b_{4}b_{5}b_{6}$的结合自由能模型为\n$$\n\\Delta G_{\\text{bind}} = \\Delta G_{0} + \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}),\n$$\n其中$\\varepsilon_{i}(b)$是碱基 $b \\in \\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$在位置$i$上的贡献。考虑一个强$\\sigma^{70}$启动子的$-35$六聚体，其序列为TTGACA（在非模板编码链上从$5'$端向$3'$端读取），其中位置1是该六聚体最$5'$端的碱基。加性能量矩阵$\\varepsilon_{i}(b)$（单位：kcal/mol）如下：\n- 位置1: A: $0.6$, C: $0.7$, G: $0.3$, T: $-1.6$\n- 位置2: A: $0.5$, C: $0.8$, G: $0.4$, T: $-1.3$\n- 位置3: A: $0.9$, C: $0.6$, G: $-2.1$, T: $0.2$\n- 位置4: A: $-1.4$, C: $0.5$, G: $0.1$, T: $0.3$\n- 位置5: A: $0.7$, C: $-1.5$, G: $0.2$, T: $0.4$\n- 位置6: A: $-1.2$, C: $0.4$, G: $0.0$, T: $0.5$\n\n在-35六聚体中引入了一个单核苷酸变体，将TTGACA变为TTAACA（即在位置3发生$\\mathrm{G} \\rightarrow \\mathrm{A}$取代）。\n\n使用上述加性模型以及独立接触能量的基本热力学加性原理，计算结合自由能的预期变化，\n$$\n\\Delta\\Delta G \\equiv \\Delta G_{\\text{bind}}(\\text{mutant}) - \\Delta G_{\\text{bind}}(\\text{wild type}),\n$$\n对于此单碱基取代。请用kcal/mol表示您的最终答案，并四舍五入至四位有效数字。", "solution": "首先验证该问题的科学合理性和一致性。\n\n**步骤1：提取已知条件**\n- 六聚体序列$b_{1}b_{2}b_{3}b_{4}b_{5}b_{6}$的结合自由能由以下加性模型给出：\n$$\n\\Delta G_{\\text{bind}} = \\Delta G_{0} + \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i})\n$$\n- 野生型（WT）-35六聚体序列为$\\text{TTGACA}$。\n- 单核苷酸变体（突变体）序列为$\\text{TTAACA}$，这对应于位置3的$\\mathrm{G} \\rightarrow \\mathrm{A}$取代。\n- 位置特异性能量矩阵$\\varepsilon_{i}(b)$（单位：kcal/mol）为：\n  - 位置1: $\\varepsilon_{1}(\\mathrm{A})=0.6$, $\\varepsilon_{1}(\\mathrm{C})=0.7$, $\\varepsilon_{1}(\\mathrm{G})=0.3$, $\\varepsilon_{1}(\\mathrm{T})=-1.6$\n  - 位置2: $\\varepsilon_{2}(\\mathrm{A})=0.5$, $\\varepsilon_{2}(\\mathrm{C})=0.8$, $\\varepsilon_{2}(\\mathrm{G})=0.4$, $\\varepsilon_{2}(\\mathrm{T})=-1.3$\n  - 位置3: $\\varepsilon_{3}(\\mathrm{A})=0.9$, $\\varepsilon_{3}(\\mathrm{C})=0.6$, $\\varepsilon_{3}(\\mathrm{G})=-2.1$, $\\varepsilon_{3}(\\mathrm{T})=0.2$\n  - 位置4: $\\varepsilon_{4}(\\mathrm{A})=-1.4$, $\\varepsilon_{4}(\\mathrm{C})=0.5$, $\\varepsilon_{4}(\\mathrm{G})=0.1$, $\\varepsilon_{4}(\\mathrm{T})=0.3$\n  - 位置5: $\\varepsilon_{5}(\\mathrm{A})=0.7$, $\\varepsilon_{5}(\\mathrm{C})=-1.5$, $\\varepsilon_{5}(\\mathrm{G})=0.2$, $\\varepsilon_{5}(\\mathrm{T})=0.4$\n  - 位置6: $\\varepsilon_{6}(\\mathrm{A})=-1.2$, $\\varepsilon_{6}(\\mathrm{C})=0.4$, $\\varepsilon_{6}(\\mathrm{G})=0.0$, $\\varepsilon_{6}(\\mathrm{T})=0.5$\n- 待计算的量是结合自由能的变化：\n$$\n\\Delta\\Delta G = \\Delta G_{\\text{bind}}(\\text{mutant}) - \\Delta G_{\\text{bind}}(\\text{wild type})\n$$\n\n**步骤2：使用提取的已知条件进行验证**\n- **科学基础**：该问题基于生物物理学中广泛接受的加性模型（位置权重矩阵），该模型用于近似蛋白质-DNA结合能。这是分子和细胞生物学中的一个标准概念。\n- **适定性**：该问题是适定的。它提供了一个清晰的数学模型、所有必要的参数（能量矩阵）、具体的序列以及一个明确定义的目标计算量。存在唯一解。\n- **客观性**：该问题以客观、科学的语言陈述，没有歧义或主观论断。\n- 该问题是自洽且内部一致的。虽然未给出序列无关偏移量$\\Delta G_{0}$的值，但计算自由能的*变化*量并不需要它，因为它会被抵消掉。\n\n**步骤3：结论与操作**\n问题被判定为有效。下面将推导求解过程。\n\n结合自由能的变化量$\\Delta\\Delta G$定义为突变体序列的结合自由能与野生型序列的结合自由能之差。\n$$\n\\Delta\\Delta G = \\Delta G_{\\text{bind}}(\\text{mutant}) - \\Delta G_{\\text{bind}}(\\text{wild type})\n$$\n我们应用给定的加性模型来计算结合自由能。\n对于野生型序列$\\text{TTGACA}$，其结合自由能为：\n$$\n\\Delta G_{\\text{bind}}(\\text{WT}) = \\Delta G_{0} + \\varepsilon_{1}(\\mathrm{T}) + \\varepsilon_{2}(\\mathrm{T}) + \\varepsilon_{3}(\\mathrm{G}) + \\varepsilon_{4}(\\mathrm{A}) + \\varepsilon_{5}(\\mathrm{C}) + \\varepsilon_{6}(\\mathrm{A})\n$$\n对于突变体序列$\\text{TTAACA}$，其结合自由能为：\n$$\n\\Delta G_{\\text{bind}}(\\text{mutant}) = \\Delta G_{0} + \\varepsilon_{1}(\\mathrm{T}) + \\varepsilon_{2}(\\mathrm{T}) + \\varepsilon_{3}(\\mathrm{A}) + \\varepsilon_{4}(\\mathrm{A}) + \\varepsilon_{5}(\\mathrm{C}) + \\varepsilon_{6}(\\mathrm{A})\n$$\n现在，我们计算差值$\\Delta\\Delta G$：\n$$\n\\Delta\\Delta G = \\left( \\Delta G_{0} + \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}^{\\text{mutant}}) \\right) - \\left( \\Delta G_{0} + \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}^{\\text{WT}}) \\right)\n$$\n序列无关项$\\Delta G_{0}$被抵消：\n$$\n\\Delta\\Delta G = \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}^{\\text{mutant}}) - \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}^{\\text{WT}}) = \\sum_{i=1}^{6} \\left( \\varepsilon_{i}(b_{i}^{\\text{mutant}}) - \\varepsilon_{i}(b_{i}^{\\text{WT}}) \\right)\n$$\n突变是位置$i=3$处的单碱基取代，其中碱基从$\\mathrm{G}$变为$\\mathrm{A}$。对于所有其他位置($i \\in \\{1, 2, 4, 5, 6\\}$)，碱基保持不变，即$b_{i}^{\\text{mutant}} = b_{i}^{\\text{WT}}$。因此，对于所有$i \\neq 3$的情况，求和项均为零。$\\Delta\\Delta G$的表达式显著简化为仅包含突变位点的贡献：\n$$\n\\Delta\\Delta G = \\varepsilon_{3}(b_{3}^{\\text{mutant}}) - \\varepsilon_{3}(b_{3}^{\\text{WT}})\n$$\n位置3的野生型碱基是$\\mathrm{G}$，因此$b_{3}^{\\text{WT}} = \\mathrm{G}$。位置3的突变碱基是$\\mathrm{A}$，因此$b_{3}^{\\text{mutant}} = \\mathrm{A}$。\n将这些代入简化后的方程得到：\n$$\n\\Delta\\Delta G = \\varepsilon_{3}(\\mathrm{A}) - \\varepsilon_{3}(\\mathrm{G})\n$$\n根据所提供的位置3的能量矩阵：\n- $\\varepsilon_{3}(\\mathrm{A}) = 0.9$ kcal/mol\n- $\\varepsilon_{3}(\\mathrm{G}) = -2.1$ kcal/mol\n我们将这些值代入$\\Delta\\Delta G$的方程中：\n$$\n\\Delta\\Delta G = 0.9 - (-2.1) \\text{ kcal/mol}\n$$\n$$\n\\Delta\\Delta G = 0.9 + 2.1 \\text{ kcal/mol}\n$$\n$$\n\\Delta\\Delta G = 3.0 \\text{ kcal/mol}\n$$\n题目要求答案四舍五入到四位有效数字。计算值恰好为$3.0$。为了用四位有效数字表示，我们将其写为$3.000$。正的$\\Delta\\Delta G$值表明该突变破坏了结合相互作用的稳定性，使其变得更不利。", "answer": "$$\n\\boxed{3.000}\n$$", "id": "2934443"}, {"introduction": "虽然稳定的结合是转录起始的前提，但启动子的最终“强度”并不仅仅由结合能决定，它更是一个动力学问题。转录起始的实际速率取决于多个连续步骤的效率。本练习将引导您运用稳态动力学理论来分析一个经典的转录起始模型，通过计算，您将发现结合速率（$k_1$）、解离速率（$k_{-1}$）和后续的不可逆异构化速率（$k_2$）之间复杂的相互作用，是如何共同决定一个启动子的转录通量的。[@problem_id:2934446]", "problem": "一个单拷贝染色体启动子被建模为一个两步动力学系统，用于描述细菌的转录起始。该过程由一个预先组装的核糖核酸聚合酶（RNAP）全酶催化，该全酶含有一个赋予其启动子识别能力的特定σ因子（σ）。其机理步骤如下：RNAP全酶与启动子结合形成一个封闭复合物，该封闭复合物随后或者解离，或者发生异构化并逃逸，进入有效的起始阶段。假设在所关注的时间尺度上，异构化和逃逸被合并为一个有效的不可逆步骤。考虑两个大肠杆菌（Escherichia coli）启动子 $P_{A}$ 和 $P_{B}$，它们都能被同一种RNAP-σ全酶识别，但具有不同的动力学参数，这反映了不同的σ因子识别强度。\n\n设每个启动子的动力学方案为：$E + P \\xrightleftharpoons[k_{-1}]{k_{1}} EP \\xrightarrow{k_{2}} \\text{initiation}$，其中 $E$ 表示RNAP-σ全酶，$P$ 表示游离启动子，$EP$ 表示RNAP-启动子封闭复合物，$k_{1}$ 是二级结合速率常数，$k_{-1}$ 是一级解离速率常数，而 $k_{2}$ 是进入有效起始的一级异构化/逃逸速率常数。假设 $[E]$ 实际上是恒定的（RNAP全酶池很大），并且每个启动子以单拷贝形式存在，因此每个启动子拷贝的起始通量等于该单个位点的稳态起始速率。\n\n在 $37\\,^{\\circ}\\mathrm{C}$ 下的实验测量得到以下动力学常数：\n- 对于启动子 $P_{A}$：$k_{1,A} = 0.05\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}$，$k_{-1,A} = 2.0\\ \\mathrm{s}^{-1}$，$k_{2,A} = 0.50\\ \\mathrm{s}^{-1}$。\n- 对于启动子 $P_{B}$：$k_{1,B} = 0.020\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}$，$k_{-1,B} = 0.50\\ \\mathrm{s}^{-1}$，$k_{2,B} = 2.0\\ \\mathrm{s}^{-1}$。\n\n在一个确定的生长条件下，可供这些启动子使用的RNAP-σ全酶的浓度为 $[E] = 30\\ \\mathrm{nM}$。在上述假设下，计算每个启动子拷贝的稳态起始通量之比 $J_{A}/J_{B}$，其中 $J_{A}$ 和 $J_{B}$ 分别是 $P_{A}$ 和 $P_{B}$ 的起始通量。将答案表示为一个无量纲的数。无需进行四舍五入。", "solution": "所提出的问题是化学动力学中的一个标准练习，具体涉及稳态近似在类酶催化（本例中为RNA聚合酶催化的转录起始）中的应用。该问题有科学依据，提法恰当，并包含获得唯一解所需的全部信息。因此，我们着手进行推导。\n\n由RNAP全酶 $E$ 在启动子 $P$ 处催化的转录起始的动力学方案如下：\n$$ E + P \\xrightleftharpoons[k_{-1}]{k_{1}} EP \\xrightarrow{k_{2}} \\text{initiation} $$\n此处，$EP$ 代表封闭复合物。速率常数为 $k_2$ 的最后一步是不可逆的，并导致有效起始。每个启动子拷贝的起始通量 $J$ 即为这最后一步的速率。\n\n由于启动子在染色体上是单拷贝的，其状态可以用概率来描述。设 $p_{free}$ 为启动子处于游离状态（$P$）的概率，$p_{bound}$ 为其被全酶占据形成封闭复合物（$EP$）的概率。根据定义，这些概率之和为1：\n$$ p_{free} + p_{bound} = 1 $$\n\n结合态概率的变化率由以下微分方程描述，其中RNAP全酶的浓度 $[E]$ 假定为常数：\n$$ \\frac{dp_{bound}}{dt} = k_{1} [E] p_{free} - (k_{-1} + k_{2}) p_{bound} $$\n在稳态下，$\\frac{dp_{bound}}{dt} = 0$。此条件意味着封闭复合物的形成速率等于其消失速率（通过解离或有效起始）。\n$$ k_{1} [E] p_{free,ss} = (k_{-1} + k_{2}) p_{bound,ss} $$\n其中下标 $ss$ 表示稳态。\n\n将 $p_{free,ss} = 1 - p_{bound,ss}$ 代入稳态方程：\n$$ k_{1} [E] (1 - p_{bound,ss}) = (k_{-1} + k_{2}) p_{bound,ss} $$\n展开左侧并整理以求解 $p_{bound,ss}$：\n$$ k_{1} [E] - k_{1} [E] p_{bound,ss} = (k_{-1} + k_{2}) p_{bound,ss} $$\n$$ k_{1} [E] = (k_{1} [E] + k_{-1} + k_{2}) p_{bound,ss} $$\n这就得到了启动子处于封闭复合物构象的稳态概率：\n$$ p_{bound,ss} = \\frac{k_{1} [E]}{k_{1} [E] + k_{-1} + k_{2}} $$\n每个启动子的稳态起始通量 $J$ 是有效步骤的速率，即速率常数 $k_{2}$ 与启动子处于先决状态的概率 $p_{bound,ss}$ 的乘积：\n$$ J = k_{2} \\cdot p_{bound,ss} = k_{2} \\frac{k_{1} [E]}{k_{1} [E] + k_{-1} + k_{2}} $$\n我们将此通用公式应用于每个启动子 $P_{A}$ 和 $P_{B}$，使用所提供的动力学参数和恒定的全酶浓度 $[E] = 30\\ \\mathrm{nM}$。\n\n对于启动子 $P_{A}$：\n$k_{1,A} = 0.05\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}$\n$k_{-1,A} = 2.0\\ \\mathrm{s}^{-1}$\n$k_{2,A} = 0.50\\ \\mathrm{s}^{-1}$\n首先，我们计算乘积 $k_{1,A} [E]$：\n$$ k_{1,A} [E] = (0.05\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}) \\times (30\\ \\mathrm{nM}) = 1.5\\ \\mathrm{s}^{-1} $$\n现在，我们计算通量 $J_{A}$：\n$$ J_{A} = k_{2,A} \\frac{k_{1,A} [E]}{k_{1,A} [E] + k_{-1,A} + k_{2,A}} = (0.50\\ \\mathrm{s}^{-1}) \\frac{1.5\\ \\mathrm{s}^{-1}}{1.5\\ \\mathrm{s}^{-1} + 2.0\\ \\mathrm{s}^{-1} + 0.50\\ \\mathrm{s}^{-1}} $$\n$$ J_{A} = 0.50 \\frac{1.5}{4.0} \\ \\mathrm{s}^{-1} = \\frac{1}{2} \\cdot \\frac{3/2}{4} \\ \\mathrm{s}^{-1} = \\frac{1}{2} \\cdot \\frac{3}{8} \\ \\mathrm{s}^{-1} = \\frac{3}{16}\\ \\mathrm{s}^{-1} $$\n\n对于启动子 $P_{B}$：\n$k_{1,B} = 0.020\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}$\n$k_{-1,B} = 0.50\\ \\mathrm{s}^{-1}$\n$k_{2,B} = 2.0\\ \\mathrm{s}^{-1}$\n首先，我们计算乘积 $k_{1,B} [E]$：\n$$ k_{1,B} [E] = (0.020\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}) \\times (30\\ \\mathrm{nM}) = 0.60\\ \\mathrm{s}^{-1} $$\n现在，我们计算通量 $J_{B}$：\n$$ J_{B} = k_{2,B} \\frac{k_{1,B} [E]}{k_{1,B} [E] + k_{-1,B} + k_{2,B}} = (2.0\\ \\mathrm{s}^{-1}) \\frac{0.60\\ \\mathrm{s}^{-1}}{0.60\\ \\mathrm{s}^{-1} + 0.50\\ \\mathrm{s}^{-1} + 2.0\\ \\mathrm{s}^{-1}} $$\n$$ J_{B} = 2.0 \\frac{0.60}{3.1} \\ \\mathrm{s}^{-1} = 2 \\cdot \\frac{6/10}{31/10} \\ \\mathrm{s}^{-1} = 2 \\cdot \\frac{6}{31} \\ \\mathrm{s}^{-1} = \\frac{12}{31}\\ \\mathrm{s}^{-1} $$\n\n最后，我们计算稳态起始通量之比 $J_{A}/J_{B}$：\n$$ \\frac{J_{A}}{J_{B}} = \\frac{3/16\\ \\mathrm{s}^{-1}}{12/31\\ \\mathrm{s}^{-1}} = \\frac{3}{16} \\cdot \\frac{31}{12} = \\frac{1}{16} \\cdot \\frac{31}{4} = \\frac{31}{64} $$\n该比值是一个无量纲数，符合要求。", "answer": "$$\\boxed{\\frac{31}{64}}$$", "id": "2934446"}, {"introduction": "将生物物理学原理应用于实际的生物数据分析，是现代分子生物学研究的核心技能。这项综合性实践将指导您从零开始，构建一个能够区分不同 $\\sigma$ 因子（$\\sigma^{70}$ 与 $\\sigma^{E}$）靶启动子的计算分类器。您需要将前面练习中的能量模型思想进行扩展，整合对-35区和-10区两个基序的识别、对它们之间间隔区长度的考量，并最终运用统计决策规则，这模拟了一个真实的生物信息学挑战，展示了如何利用理论模型解决复杂的序列识别问题。[@problem_id:2934426]", "problem": "要求您构建一个基于能量的细菌启动子二元分类器，用于区分细菌中的管家 sigma 因子 $\\sigma^{70}$ 和胞外功能 sigma 因子 $\\sigma^{E}$ 的识别。该分类器必须在固定长度的脱氧核糖核酸（DNA）序列窗口上运行，并且必须基于以下原理和定义。\n\n基本生物学基础：\n- 细菌中的转录起始过程是当包含一个 σ 因子的核糖核酸聚合酶（RNA 聚合酶）全酶与转录起始位点上游的启动子序列结合时发生的。不同的 σ 因子在 -35 和 -10 启动子元件处（相对于转录起始位点）表现出不同的序列特异性。\n- 一个标准且经过充分检验的抽象模型是，结合自由能在各个独立贡献的位置上是可加的，并且结合概率与形式为 $\\exp(-E)$ 的玻尔兹曼因子成正比，其中 $E$ 是以热能 $k_B T$ 为单位的自由能。\n- σ 因子与候选启动子结合的总能量 $E$ 模型化为以下各项的总和：-35 和 -10 元件中每个位置上特定碱基的能量，以及一个间隔区长度罚分，该罚分与间隔区长度偏离其因子特异最优值的偏差呈二次方关系。\n\n需要实现的数学和算法规范：\n- 给定一个长度为 $L_w = 40$ 的 DNA 序列窗口 $S$（字符来自字母表 $\\{ \\mathrm{A}, \\mathrm{C}, \\mathrm{G}, \\mathrm{T} \\}$）。\n- 对于每个 σ 因子 $f \\in \\{\\sigma^{70}, \\sigma^{E}\\}$，您必须考虑窗口内一个 -35 六聚体和一个 -10 六聚体的所有排列位置。\n- 一个排列位置由 -35 六聚体的起始索引 $i$（对 $S$ 进行从零开始的索引）和一个间隔区长度 $L \\in \\{14,15,16,17,18,19,20\\}$ 完全指定，-10 六聚体的起始索引则为 $j = i + 6 + L$。仅当两个六聚体都完全位于窗口内部时，该排列位置才有效（即 $0 \\le i \\le L_w - 6$ 且 $0 \\le j \\le L_w - 6$）。\n- 对于给定的排列位置 $(i,L)$ 和 σ 因子 $f$，总能量为\n$$\nE_f(i,L; S) = E_{-35,f}(S[i:i+6]) + E_{-10,f}(S[j:j+6]) + k_f \\, (L - L^{\\mathrm{opt}}_f)^2,\n$$\n其中 $E_{-35,f}$ 和 $E_{-10,f}$ 是可加的单碱基贡献（定义如下），$k_f$ 是间隔区刚度（以 $k_B T$ 为单位），$L^{\\mathrm{opt}}_f$ 是因子 $f$ 的最优间隔区长度。\n- 因子 $f$ 的结合自由能是所有有效排列位置中的最小值：\n$$\nE^{\\star}_f(S) = \\min_{\\substack{0 \\le i \\le L_w - 6 \\\\ L \\in \\{14,\\dots,20\\} \\\\ i + 6 + L \\le L_w - 6}} E_f(i,L; S).\n$$\n\n单碱基能量模型：\n- 对于 $\\sigma^{70}$：\n  - -35 共有序列：$\\mathrm{TTGACA}$。\n  - -10 共有序列：$\\mathrm{TATAAT}$。\n  - 对于与序列 $Y_0 Y_1 Y_2 Y_3 Y_4 Y_5$ 对齐的六聚体 $X_0 X_1 X_2 X_3 X_4 X_5$，每个位置的能量贡献如下：\n    - 在每个位置 $p \\in \\{0,1,2,3,4,5\\}$，如果 $Y_p = X_p$，则对于 -35 元件贡献 $e^{(70)}_{\\mathrm{cons},-35} = -2.0$，对于 -10 元件贡献 $e^{(70)}_{\\mathrm{cons},-10} = -2.5$。\n    - 否则，贡献 $e^{(70)}_{\\mathrm{mis}} = +0.5$。\n  - 间隔区罚分：$k_{70} = 0.05$，最优间隔区长度 $L^{\\mathrm{opt}}_{70} = 17$。\n\n- 对于 $\\sigma^{E}$：\n  - -35 共有序列：$\\mathrm{GGAACT}$。\n  - -10 共有序列：$\\mathrm{TCAAAG}$。\n  - 每个位置的能量贡献：\n    - 在每个位置 $p \\in \\{0,1,2,3,4,5\\}$，如果 $Y_p = X_p$，则对于 -35 元件贡献 $e^{(E)}_{\\mathrm{cons},-35} = -2.0$，对于 -10 元件贡献 $e^{(E)}_{\\mathrm{cons},-10} = -2.3$。\n    - 否则，贡献 $e^{(E)}_{\\mathrm{mis}} = +0.5$。\n  - 间隔区罚分：$k_{E} = 0.08$，最优间隔区长度 $L^{\\mathrm{opt}}_{E} = 16$。\n\n后验概率和决策规则：\n- 假设 $\\sigma^{70}$ 和 $\\sigma^{E}$ 具有相等的先验概率。$S$ 被 $\\sigma^{E}$ 识别的后验概率为\n$$\np_{\\sigma^{E}}(S) = \\frac{\\exp(-E^{\\star}_{E}(S))}{\\exp(-E^{\\star}_{E}(S)) + \\exp(-E^{\\star}_{70}(S))}.\n$$\n- 如果 $\\sigma^{E}$ 的可能性更大（即 $p_{\\sigma^{E}}(S) \\ge 0.5$），则二元分类标签定义为 $1$，否则为 $0$。\n\n测试集：\n- 使用以下四个序列（每个长度为 $L_w = 40$），其中串联有明确指示。所有未明确指定的位置均用胞嘧啶（cytosine）填充。\n  - 案例 1（工程改造的类 $\\sigma^{70}$，最优间隔区）：$S_1 = \\mathrm{CC}$ + $\\mathrm{TTGACA}$ + $\\mathrm{C}$ 重复 $17$ 次 + $\\mathrm{TATAAT}$ + $\\mathrm{C}$ 重复直至长度达到 $40$。\n  - 案例 2（工程改造的类 $\\sigma^{E}$，最优间隔区）：$S_2 = \\mathrm{GGAACT}$ + $\\mathrm{C}$ 重复 $16$ 次 + $\\mathrm{TCAAAG}$ + $\\mathrm{C}$ 重复直至长度达到 $40$。\n  - 案例 3（富含鸟嘌呤-胞嘧啶，腺嘌呤-胸腺嘧啶含量最少）：$S_3 = \\mathrm{GCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGC}$。\n  - 案例 4（工程改造的类 $\\sigma^{70}$，边界间隔区）：$S_4 = \\mathrm{C}$ 重复 $10$ 次 + $\\mathrm{TTGACA}$ + $\\mathrm{C}$ 重复 $14$ 次 + $\\mathrm{TATAAT}$ + $\\mathrm{C}$ 重复直至长度达到 $40$。\n\n所需计算和输出：\n- 对于每个 $k \\in \\{1,2,3,4\\}$ 的 $S_k$，通过对所有有效排列位置进行穷举搜索来计算 $E^{\\star}_{70}(S_k)$ 和 $E^{\\star}_E(S_k)$，然后按上述规定计算 $p_{\\sigma^{E}}(S_k)$。\n- 对每个案例，按顺序输出两个值：整数分类标签（$\\sigma^{E}$ 编码为 $1$，$\\sigma^{70}$ 编码为 $0$）和后验概率 $p_{\\sigma^{E}}(S_k)$，表示为四舍五入到小数点后恰好三位的小数。\n- 您的程序应生成单行输出，其中包含所有四个测试案例的结果，结果按顺序 $[ \\text{label}_1, p_{\\sigma^{E}}(S_1), \\text{label}_2, p_{\\sigma^{E}}(S_2), \\text{label}_3, p_{\\sigma^{E}}(S_3), \\text{label}_4, p_{\\sigma^{E}}(S_4) ]$ 聚合为一个扁平列表，并以逗号分隔列表的形式打印，用方括号括起，例如 $[0,0.123,1,0.876, \\dots ]$。\n\n角度单位不适用。除了能量的隐式 $k_B T$ 归一化之外，不需要其他物理单位。所有数值输出必须是小数形式，而不是百分比形式。", "solution": "问题陈述已经过验证，并被确定为有效。它在科学上基于分子生物物理学的既定原理，特别是基于能量的蛋白质-DNA相互作用建模。该问题是适定的，提供了一套完整的定义、参数和明确的目标。它没有歧义、矛盾和事实错误。因此，将提供一个解决方案。\n\n任务是实现一个二元分类器，以确定一个给定的长度为 $L_w = 40$ 的脱氧核糖核酸（DNA）序列 $S$ 更可能被 $\\sigma^{70}$ 还是 $\\sigma^{E}$ σ 因子识别。该分类基于各自的RNA聚合酶全酶的结合自由能。\n\n模型的核心是为每个 σ 因子 $f \\in \\{\\sigma^{70}, \\sigma^{E}\\}$ 计算最小结合自由能 $E^{\\star}_f(S)$。该能量通过在序列窗口 $S$ 内搜索启动子元件（-35 和 -10 六聚体）的所有可能排列位置来找到。一个排列位置由一对 $(i, L)$ 定义，其中 $i$ 是 -35 六聚体的从零开始的起始索引，而 $L$ 是分隔 -35 和 -10 元件的间隔区长度。-10 六聚体的起始索引则为 $j = i + 6 + L$。\n\n为使搜索是穷举的，我们必须考虑所有有效的排列位置。如果两个六聚体都完全位于长度为 $L_w=40$ 的序列 $S$ 内，则排列位置 $(i, L)$ 是有效的。这施加了以下约束：$0 \\le i \\le L_w - 6$ 和 $0 \\le i + 6 + L \\le L_w - 6$。给定 $L_w = 40$，条件为 $0 \\le i \\le 34$ 和 $i+L \\le 28$。间隔区长度 $L$ 被限制在集合 $\\{14, 15, 16, 17, 18, 19, 20\\}$ 中。\n\n对于每个有效的排列位置 $(i, L)$ 和 σ 因子 $f$，总结合能 $E_f(i,L; S)$ 计算为三个组成部分的总和：\n$$\nE_f(i,L; S) = E_{-35,f}(S[i:i+6]) + E_{-10,f}(S[j:j+6]) + k_f \\, (L - L^{\\mathrm{opt}}_f)^2\n$$\n项 $E_{-35,f}$ 和 $E_{-10,f}$ 表示各自六聚体的结合能。该能量是可加的，通过将序列片段与因子的共有序列进行比较，以单个碱基为基础进行计算。在给定位置上与共有碱基的匹配会贡献一个有利的（负）能量 $e^{(f)}_{\\mathrm{cons}}$，而错配则会贡献一个不利的（正）能量 $e^{(f)}_{\\mathrm{mis}}$。\n\n具体来说，对于一个六聚体 $Y = Y_0Y_1Y_2Y_3Y_4Y_5$ 和一个共有序列 $X = X_0X_1X_2X_3Y_4Y_5$，能量为：\n$$\nE_{\\text{hexamer}}(Y) = \\sum_{p=0}^{5} \\delta(Y_p, X_p)\n$$\n其中，如果 $Y_p = X_p$，则 $\\delta(Y_p, X_p)$ 为 $e^{(f)}_{\\mathrm{cons}}$，否则为 $e^{(f)}_{\\mathrm{mis}}$。参数（$e^{(f)}_{\\mathrm{cons},-35}$、$e^{(f)}_{\\mathrm{cons},-10}$、$e^{(f)}_{\\mathrm{mis}}$、$k_f$、$L^{\\mathrm{opt}}_f$）已为 $\\sigma^{70}$ 和 $\\sigma^{E}$ 两者提供。\n\n因子 $f$ 的结合自由能 $E^{\\star}_f(S)$ 是所有有效排列位置中的最小能量：\n$$\nE^{\\star}_f(S) = \\min_{i,L} E_f(i,L; S)\n$$\n将实现一个算法来执行此最小化，具体方法是遍历所有有效的 $i$ 和 $L$ 值，为每个值计算 $E_f(i,L; S)$，并保留找到的最小值。\n\n一旦确定了最小能量 $E^{\\star}_{70}(S)$ 和 $E^{\\star}_{E}(S)$，就会计算序列被 $\\sigma^{E}$ 识别的后验概率。假设先验概率相等，该概率由玻尔兹曼加权比率给出：\n$$\np_{\\sigma^{E}}(S) = \\frac{\\exp(-E^{\\star}_{E}(S))}{\\exp(-E^{\\star}_{E}(S)) + \\exp(-E^{\\star}_{70}(S))}\n$$\n为了数值稳定性，这等价于：\n$$\np_{\\sigma^{E}}(S) = \\frac{1}{1 + \\exp(E^{\\star}_{E}(S) - E^{\\star}_{70}(S))}\n$$\n最终的二元分类标签基于此概率进行分配。如果 $p_{\\sigma^{E}}(S) \\ge 0.5$（这对应于条件 $E^{\\star}_{E}(S) \\le E^{\\star}_{70}(S)$），则标签为 $1$（代表 $\\sigma^{E}$）。否则，标签为 $0$（代表 $\\sigma^{70}$）。\n\n该过程将应用于所提供的四个测试序列中的每一个。最终输出将是一个扁平列表，为每个序列包含整数标签和四舍五入到三位小数的后验概率。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the bacterial promoter classification problem.\n    \"\"\"\n\n    # --- Problem Parameters ---\n\n    # General parameters\n    L_w = 40\n    spacer_lengths = range(14, 21)\n\n    # Parameters for sigma-70\n    params_70 = {\n        'cons_35': \"TTGACA\",\n        'cons_10': \"TATAAT\",\n        'e_cons_35': -2.0,\n        'e_cons_10': -2.5,\n        'e_mis': 0.5,\n        'k': 0.05,\n        'L_opt': 17\n    }\n\n    # Parameters for sigma-E\n    params_E = {\n        'cons_35': \"GGAACT\",\n        'cons_10': \"TCAAAG\",\n        'e_cons_35': -2.0,\n        'e_cons_10': -2.3,\n        'e_mis': 0.5,\n        'k': 0.08,\n        'L_opt': 16\n    }\n    \n    # --- Test Cases Construction ---\n\n    test_cases = []\n    # Case 1: Engineered sigma-70-like, optimal spacer\n    s1 = \"CC\" + \"TTGACA\" + \"C\" * 17 + \"TATAAT\"\n    s1 += \"C\" * (L_w - len(s1))\n    test_cases.append(s1)\n\n    # Case 2: Engineered sigma-E-like, optimal spacer\n    s2 = \"GGAACT\" + \"C\" * 16 + \"TCAAAG\"\n    s2 += \"C\" * (L_w - len(s2))\n    test_cases.append(s2)\n\n    # Case 3: Guanine-cytosine-rich\n    s3 = \"GCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGC\"\n    test_cases.append(s3)\n\n    # Case 4: Engineered sigma-70-like, boundary spacer\n    s4 = \"C\" * 10 + \"TTGACA\" + \"C\" * 14 + \"TATAAT\"\n    s4 += \"C\" * (L_w - len(s4))\n    test_cases.append(s4)\n\n    # --- Core Logic Functions ---\n\n    def calculate_hexamer_energy(hexamer, consensus, e_cons, e_mis):\n        \"\"\"Calculates the binding energy for a single hexamer.\"\"\"\n        energy = 0.0\n        for i in range(6):\n            if hexamer[i] == consensus[i]:\n                energy += e_cons\n            else:\n                energy += e_mis\n        return energy\n\n    def calculate_min_energy(sequence, params):\n        \"\"\"Calculates the minimum binding energy over all valid placements.\"\"\"\n        min_total_energy = float('inf')\n        \n        # Unpack parameters for clarity\n        cons_35 = params['cons_35']\n        cons_10 = params['cons_10']\n        e_cons_35 = params['e_cons_35']\n        e_cons_10 = params['e_cons_10']\n        e_mis = params['e_mis']\n        k = params['k']\n        L_opt = params['L_opt']\n        \n        # Exhaustive search over all valid placements (i, L)\n        for i in range(L_w - 6 + 1):\n            for L in spacer_lengths:\n                j = i + 6 + L\n                \n                # Check if placement is valid (both hexamers fit in the window)\n                if j > L_w - 6:\n                    continue\n\n                # Extract hexamer sequences\n                seq_35 = sequence[i : i+6]\n                seq_10 = sequence[j : j+6]\n\n                # Calculate energy components\n                e_35 = calculate_hexamer_energy(seq_35, cons_35, e_cons_35, e_mis)\n                e_10 = calculate_hexamer_energy(seq_10, cons_10, e_cons_10, e_mis)\n                e_spacer = k * (L - L_opt)**2\n\n                total_energy = e_35 + e_10 + e_spacer\n                \n                if total_energy  min_total_energy:\n                    min_total_energy = total_energy\n        \n        return min_total_energy\n\n    # --- Main Processing Loop ---\n\n    results = []\n    for s_k in test_cases:\n        # Calculate minimum energies for both sigma factors\n        e_star_70 = calculate_min_energy(s_k, params_70)\n        e_star_E = calculate_min_energy(s_k, params_E)\n        \n        # Calculate posterior probability for sigma-E\n        # p = 1 / (1 + exp(E_E - E_70))\n        # np.exp can handle large arguments without overflow issues in many cases\n        # by returning inf/0 which is handled correctly in division.\n        try:\n            p_sigma_E = 1.0 / (1.0 + np.exp(e_star_E - e_star_70))\n        except OverflowError:\n            # If (e_star_E - e_star_70) is very large, exp overflows.\n            # In this case, the denominator is huge, and p_sigma_E is practically 0.\n            p_sigma_E = 0.0\n\n        # Determine classification label\n        # Label is 1 if p_sigma_E >= 0.5, which is equivalent to E_E = E_70\n        label = 1 if e_star_E = e_star_70 else 0\n        \n        results.append(str(label))\n        results.append(f\"{p_sigma_E:.3f}\")\n        \n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2934426"}]}