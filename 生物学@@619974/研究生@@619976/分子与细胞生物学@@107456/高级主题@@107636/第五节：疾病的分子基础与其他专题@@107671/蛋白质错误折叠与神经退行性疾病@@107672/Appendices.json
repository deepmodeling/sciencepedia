{"hands_on_practices": [{"introduction": "蛋白质聚集的启动通常依赖于一个关键的成核事件，而这一过程往往并非由稳定的天然蛋白质直接引发，而是源于其构象系综中稀有且高能量的“易聚集”中间体。本练习将蛋白质折叠的宏观热力学稳定性（由折叠与去折叠速率常数 $k_f$ 和 $k_u$ 决定）与微观构象的统计分布（通过玻尔兹曼因子描述）及聚集动力学联系起来 [@problem_id:2960881]。通过这个计算，您将能定量地理解，即使一个蛋白质在热力学上非常稳定，只要它能瞬时形成并布居一个易于聚集的中间体构象，它仍然可能引发病理性的聚集过程。", "problem": "一个小型的单结构域球状蛋白根据一个双态模型进行折叠，该模型仅包含天然态 ($N$) 和去折叠态 ($U$) 两个盆地。在固定温度 $T$ 下，测得其微观折叠和去折叠速率常数分别为 $k_f$ 和 $k_u$。在去折叠态盆地内部，存在一个稀有的、部分结构化的中间体 $I$，它是 $U$ 的一个高自由能子状态，并且是聚集的种子。假设这个 $I$ 子状态与去折叠系统系综的其余部分处于快速预平衡状态。给定条件如下：\n- $k_f = 1.0\\,\\mathrm{s}^{-1}$ 且 $k_u = 2.0 \\times 10^{-5}\\,\\mathrm{s}^{-1}$，\n- 相对于平均去折叠系统系综，中间体 $I$ 的自由能惩罚为 $\\Delta G_{I|U} = 5\\,k_B T$，\n- 总单体浓度为 $C_{\\mathrm{tot}} = 20\\,\\mu\\mathrm{M}$，\n- 最早的聚集核是 $I$ 的二聚体，且成核反应相对于 $[I]$ 是二级反应，其速率常数 $k_n = 1.0 \\times 10^{8}\\,\\mathrm{M}^{-1}\\mathrm{s}^{-1}$。\n\n仅使用化学动力学和平衡统计力学的基本关系，按以下步骤进行：\n- 根据平衡状态下的细致平衡定义，从 $k_f$ 和 $k_u$ 推导出 $N$ 和 $U$ 之间的平衡常数 $K_{\\mathrm{eq}}$，然后求得平衡稳定性 $\\Delta G_{N-U}$。\n- 在一个具有指数等待时间的连续时间马尔可夫过程中，使用平均首过时间（MFPT）的定义，确定平均首过时间 $\\tau_{U \\to N}$ 和 $\\tau_{N \\to U}$。\n- 使用 Boltzmann 因子和 $U \\rightleftharpoons I$ 子系统系综的预平衡假设，确定 $I$ 的平衡概率 $p_I$（用去折叠态概率 $p_U$ 表示），然后用 $k_f$、$k_u$ 和 $\\Delta G_{I|U}$ 表示。\n- 假设在早期成核限制阶段，此时聚集体浓度可以忽略不计，写出瞬时成核通量 $J$ 作为 $k_n$ 和平衡浓度 $[I] = C_{\\mathrm{tot}}\\,p_I$ 的函数，并进行数值计算。\n\n将最终的 $J$ 以 $\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}$ 为单位表示，并将答案四舍五入到三位有效数字。最终答案必须是一个实数。在最终的方框答案中不要包含单位。", "solution": "首先必须验证问题陈述的科学合理性、自洽性和客观性。\n\n### 第1步：提取给定条件\n以下量和条件是逐字提供的：\n- 折叠模型：双态， $N \\rightleftharpoons U$。\n- 微观折叠速率常数：$k_f = 1.0\\,\\mathrm{s}^{-1}$。\n- 微观去折叠速率常数：$k_u = 2.0 \\times 10^{-5}\\,\\mathrm{s}^{-1}$。\n- 温度：固定为 $T$。\n- 中间子状态：$I$，是 $U$ 的一个子状态。\n- 中间体热力学：相对于平均去折叠系统系综，$I$ 的自由能惩罚为 $\\Delta G_{I|U} = 5\\,k_B T$。\n- 中间体动力学：$I$ 与 $U$ 的其余部分处于快速预平衡状态。\n- 总蛋白浓度：$C_{\\mathrm{tot}} = 20\\,\\mu\\mathrm{M}$。\n- 聚集机制：成核反应相对于 $[I]$ 是二级反应，形成 $I$ 的二聚体。\n- 成核速率常数：$k_n = 1.0 \\times 10^{8}\\,\\mathrm{M}^{-1}\\mathrm{s}^{-1}$。\n- 阶段：早期，成核限制，聚集体浓度可忽略。\n\n### 第2步：使用提取的给定条件进行验证\n- **科学依据**：该问题牢固地植根于化学动力学和平衡统计力学应用于蛋白质折叠和聚集的原理。双态模型、高能中间体的预平衡假设以及二级成核是生物物理化学中的标准理论框架。所提供的速率常数、浓度和自由能的数值对于在体外研究的稳定的小蛋白质是物理上合理的。\n- **适定性**：该问题是适定的。它提供了所有必要的信息和一套清晰、有序的任务，从而得出一个唯一的、可计算的成核通量结果。诸如可忽略的单体耗尽等假设都已明确说明。\n- **客观性**：该问题使用精确、客观和标准的科学术语进行陈述。没有主观或含糊的陈述。\n\n### 第3步：结论与行动\n该问题是有效的。它在科学上是合理的，是自洽的，并且是适定的。我将继续进行解答。\n\n解题过程将遵循问题陈述中指定的任务顺序构建。\n\n**平衡常数和去折叠的吉布斯自由能**\n\n折叠-去折叠反应是一个可逆过程，描述如下：\n$$\nN \\underset{k_f}{\\stackrel{k_u}{\\rightleftharpoons}} U\n$$\n这里，$N$ 代表天然态，$U$ 代表去折叠系统系综。正向反应（$N \\to U$）的速率为 $v_u = k_u [N]$，逆向反应（$U \\to N$）的速率为 $v_f = k_f [U]$。在平衡状态下，根据细致平衡原理，正向和逆向速率相等：\n$$\nk_u [N]_{\\mathrm{eq}} = k_f [U]_{\\mathrm{eq}}\n$$\n去折叠的平衡常数 $K_{\\mathrm{eq}}$ 定义为去折叠态和天然态的平衡浓度之比：\n$$\nK_{\\mathrm{eq}} = \\frac{[U]_{\\mathrm{eq}}}{[N]_{\\mathrm{eq}}}\n$$\n从细致平衡条件，我们推导出用微观速率常数表示的 $K_{\\mathrm{eq}}$ 表达式：\n$$\nK_{\\mathrm{eq}} = \\frac{k_u}{k_f}\n$$\n标准的去折叠吉布斯自由能 $\\Delta G_{N-U}$，即从状态 $N$ 移动到状态 $U$ 时的自由能变化，通过基本热力学关系与平衡常数相关联：\n$$\n\\Delta G_{N-U} = -k_B T \\ln(K_{\\mathrm{eq}})\n$$\n代入 $K_{\\mathrm{eq}}$ 的表达式，得到用动力学速率表示的稳定性：\n$$\n\\Delta G_{N-U} = -k_B T \\ln\\left(\\frac{k_u}{k_f}\\right) = k_B T \\ln\\left(\\frac{k_f}{k_u}\\right)\n$$\n给定 $k_f = 1.0\\,\\mathrm{s}^{-1}$ 和 $k_u = 2.0 \\times 10^{-5}\\,\\mathrm{s}^{-1}$，比值 $k_f/k_u = 5.0 \\times 10^4$ 远大于 $1$，表明 $\\Delta G_{N-U}$ 是一个大的正值，这意味着该蛋白质是热力学稳定的，在平衡状态下，天然态占绝对优势。\n\n**平均首过时间 (MFPTs)**\n\n对于一个具有指数等待时间的双态连续时间马尔可夫过程，从一个状态跃迁出去的平均首过时间（MFPT）是该跃迁速率常数的倒数。\n从去折叠系统系综 $U$ 到天然态 $N$ 的跃迁速率常数为 $k_f$。因此，折叠的平均首过时间 $\\tau_{U \\to N}$ 为：\n$$\n\\tau_{U \\to N} = \\frac{1}{k_f}\n$$\n类似地，从天然态 $N$ 到去折叠系统系综 $U$ 的跃迁速率常数为 $k_u$。去折叠的平均首过时间 $\\tau_{N \\to U}$ 为：\n$$\n\\tau_{N \\to U} = \\frac{1}{k_u}\n$$\n\n**易聚集的中间体 $I$ 的概率**\n\n蛋白质单体的总布居分布在天然态 ($p_N$) 和去折叠态 ($p_U$) 之间，其概率之和为1：$p_N + p_U = 1$。在平衡时，这些概率的比值由平衡常数给出：\n$$\n\\frac{p_U}{p_N} = K_{\\mathrm{eq}} = \\frac{k_u}{k_f}\n$$\n代入 $p_N = 1 - p_U$，我们求解去折叠态的平衡概率：\n$$\n\\frac{p_U}{1 - p_U} = \\frac{k_u}{k_f} \\implies p_U k_f = k_u(1 - p_U) \\implies p_U(k_f + k_u) = k_u\n$$\n$$\np_U = \\frac{k_u}{k_f + k_u}\n$$\n问题陈述指出，中间子状态 $I$ 在去折叠系统系综 $U$ 内处于快速预平衡状态，且相对于该系综的平均值，其自由能惩罚为 $\\Delta G_{I|U} = 5\\,k_B T$。在分子处于去折叠系统系综的条件下，发现其处于状态 $I$ 的概率由 Boltzmann 因子确定：\n$$\n\\frac{p_I}{p_U} = \\exp\\left(-\\frac{\\Delta G_{I|U}}{k_B T}\\right)\n$$\n这里，$p_I$ 是单体处于状态 $I$ 的总概率。这个关系允许我们用 $p_U$ 来表示 $p_I$：\n$$\np_I = p_U \\exp\\left(-\\frac{\\Delta G_{I|U}}{k_B T}\\right)\n$$\n将用速率常数表示的 $p_U$ 的表达式代入，我们得到 $p_I$ 的最终形式：\n$$\np_I = \\left(\\frac{k_u}{k_f + k_u}\\right) \\exp\\left(-\\frac{\\Delta G_{I|U}}{k_B T}\\right)\n$$\n\n**瞬时成核通量 $J$**\n\n问题陈述指出，成核是聚集的限速步骤，并通过涉及中间体 $I$ 的二级反应进行。瞬时成核通量 $J$ 由速率定律给出：\n$$\nJ = k_n [I]^2\n$$\n在早期成核限制阶段，聚集体的浓度可以忽略不计，因此总单体浓度 $C_{\\mathrm{tot}}$ 保持近似恒定。中间体 $[I]$ 的平衡浓度是总蛋白浓度乘以中间体状态的平衡概率 $p_I$：\n$$\n[I] = C_{\\mathrm{tot}} p_I = C_{\\mathrm{tot}} \\left(\\frac{k_u}{k_f + k_u}\\right) \\exp\\left(-\\frac{\\Delta G_{I|U}}{k_B T}\\right)\n$$\n将 $[I]$ 的这个表达式代入 $J$ 的速率定律，得到：\n$$\nJ = k_n \\left( C_{\\mathrm{tot}} \\left(\\frac{k_u}{k_f + k_u}\\right) \\exp\\left(-\\frac{\\Delta G_{I|U}}{k_B T}\\right) \\right)^2\n$$\n我们现在使用给定的数值来计算这个表达式。\n- $k_f = 1.0\\,\\mathrm{s}^{-1}$\n- $k_u = 2.0 \\times 10^{-5}\\,\\mathrm{s}^{-1}$\n- $k_n = 1.0 \\times 10^{8}\\,\\mathrm{M}^{-1}\\mathrm{s}^{-1}$\n- $C_{\\mathrm{tot}} = 20\\,\\mu\\mathrm{M} = 2.0 \\times 10^{-5}\\,\\mathrm{M}$\n- $\\Delta G_{I|U} = 5\\,k_B T \\implies \\frac{\\Delta G_{I|U}}{k_B T} = 5$\n\n首先，计算概率项 $p_I$：\n$$\np_I = \\left(\\frac{2.0 \\times 10^{-5}}{1.0 + 2.0 \\times 10^{-5}}\\right) \\exp(-5) = \\left(\\frac{2.0 \\times 10^{-5}}{1.00002}\\right) \\exp(-5) \\approx (1.99996 \\times 10^{-5}) \\times (6.7379 \\times 10^{-3}) \\approx 1.3475 \\times 10^{-7}\n$$\n接下来，计算中间体浓度 $[I]$：\n$$\n[I] = C_{\\mathrm{tot}} p_I = (2.0 \\times 10^{-5}\\,\\mathrm{M}) \\times (1.3475 \\times 10^{-7}) \\approx 2.695 \\times 10^{-12}\\,\\mathrm{M}\n$$\n最后，计算以 $\\mathrm{M}\\,\\mathrm{s}^{-1}$ 为单位的成核通量 $J$：\n$$\nJ = k_n [I]^2 = (1.0 \\times 10^{8}\\,\\mathrm{M}^{-1}\\mathrm{s}^{-1}) \\times (2.695 \\times 10^{-12}\\,\\mathrm{M})^2\n$$\n$$\nJ \\approx (1.0 \\times 10^{8}) \\times (7.263 \\times 10^{-24})\\,\\mathrm{M}\\,\\mathrm{s}^{-1} \\approx 7.263 \\times 10^{-16}\\,\\mathrm{M}\\,\\mathrm{s}^{-1}\n$$\n问题要求答案以 $\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}$ 为单位。我们使用换算关系 $1\\,\\mathrm{M} = 10^6\\,\\mu\\mathrm{M}$：\n$$\nJ \\approx (7.263 \\times 10^{-16}\\,\\mathrm{M}\\,\\mathrm{s}^{-1}) \\times \\left(\\frac{10^6\\,\\mu\\mathrm{M}}{1\\,\\mathrm{M}}\\right) = 7.263 \\times 10^{-10}\\,\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}\n$$\n四舍五入到三位有效数字，最终结果是 $7.26 \\times 10^{-10}\\,\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}$。", "answer": "$$\\boxed{7.26 \\times 10^{-10}}$$", "id": "2960881"}, {"introduction": "细胞内部署了精密的蛋白质质量控制（Protein Quality Control, PQC）系统，其中分子伴侣扮演着核心角色，负责识别、重折叠或引导降解错误折叠的蛋白质，以维持蛋白质稳态。本练习构建了一个简化的动力学模型，用以模拟错误折叠蛋白质在细胞内的命运 [@problem_id:2960883]。通过应用准稳态近似（Quasi-Steady-State Approximation, QSSA），您将推导并计算在合成、降解和分子伴侣辅助重折叠的共同作用下，错误折叠蛋白质的稳态浓度。这个实践旨在让您亲身体验如何通过数学模型来定量分析细胞稳态，并揭示分子伴侣功能的部分丧失——一种与衰老和疾病相关的常见细胞应激——是如何打破平衡，导致病理蛋白急剧积累的。", "problem": "在神经元中，单个底物蛋白可能错误折叠成无功能状态。设 $M$ 表示错误折叠物质的浓度，$E$ 表示游离伴侣蛋白的浓度，$EM$ 表示伴侣蛋白-错误折叠复合物的浓度。错误折叠蛋白以恒定速率 $s$ 产生，其来源是持续的合成和应激诱导的错误折叠。该系统遵循质量作用动力学，其基元步骤和参数如下：\n- 结合：$M + E \\xrightleftharpoons[k_{\\mathrm{off}}]{k_{\\mathrm{on}}} EM$，其中 $k_{\\mathrm{on}}$ 和 $k_{\\mathrm{off}}$ 分别是二级和一级速率常数。\n- 重折叠：$EM \\xrightarrow{k_{\\mathrm{ref}}} \\text{天然构象} + E$，其中 $k_{\\mathrm{ref}}$ 是一级速率常数。\n- 降解：$M \\xrightarrow{k_{\\mathrm{deg}}} \\varnothing$，其中 $k_{\\mathrm{deg}}$ 是一级速率常数。\n- 伴侣蛋白守恒：$E_{\\mathrm{T}} = E + EM$。\n\n假设复合物 $EM$ 满足准稳态近似（QSSA），且 $M$ 处于稳态。同时假设总底物蛋白池 $P_{\\mathrm{tot}}$ 是缓冲的，并且在所考虑的时间尺度上有效恒定，因此错误折叠比例 $f$ 与 $M$ 成正比，关系为 $f = M/P_{\\mathrm{tot}}$。因此，当伴侣蛋白容量受到扰动时，稳态错误折叠比例的倍数变化等于相应稳态错误折叠浓度的比值。\n\n考虑以下基线参数值：\n- $s = 0.50$ $\\mathrm{\\mu M \\cdot h^{-1}}$，\n- $k_{\\mathrm{deg}} = 0.20$ $\\mathrm{h^{-1}}$，\n- $k_{\\mathrm{on}} = 2.0$ $\\mathrm{\\mu M^{-1} \\cdot h^{-1}}$，\n- $k_{\\mathrm{off}} = 1.0$ $\\mathrm{h^{-1}}$，\n- $k_{\\mathrm{ref}} = 3.0$ $\\mathrm{h^{-1}}$，\n- $E_{\\mathrm{T}} = 1.0$ $\\mathrm{\\mu M}$。\n\n一种与疾病相关的应激使可用伴侣蛋白容量减半至 $E_{\\mathrm{T}}' = E_{\\mathrm{T}}/2$，但动力学速率常数 $k_{\\mathrm{on}}$、$k_{\\mathrm{off}}$、$k_{\\mathrm{ref}}$ 以及来源和降解参数 $s$ 和 $k_{\\mathrm{deg}}$ 保持不变。\n\n从上述基于质量作用的常微分方程和守恒定律出发，推导在准稳态近似（QSSA）下 $M$ 的稳态方程，求解基线稳态浓度 $M_{\\ast}$ 和 $E_{\\mathrm{T}}$ 减半后的扰动稳态浓度 $M_{\\ast}'$，然后计算由 $M_{\\ast}'/M_{\\ast}$ 给出的错误折叠比例的倍数变化。将最终比值四舍五入至四位有效数字。以纯数字（无量纲）形式表示您的答案。", "solution": "所提出的问题是生物化学动力学中的一个标准练习，其定义明确、科学上合理且内部一致。我们将对其进行系统性求解。\n\n首先，我们根据指定基元步骤的质量作用定律，为错误折叠蛋白 $M$ 和伴侣蛋白-错误折叠蛋白复合物 $EM$ 的浓度写出常微分方程（ODE），从而形式化系统动力学。游离伴侣蛋白的浓度用 $E$ 表示。\n\n$M$ 的变化率由下式给出：\n$$ \\frac{dM}{dt} = s - k_{\\mathrm{deg}}M - k_{\\mathrm{on}}ME + k_{\\mathrm{off}}EM $$\n复合物 $EM$ 的变化率是：\n$$ \\frac{d[EM]}{dt} = k_{\\mathrm{on}}ME - k_{\\mathrm{off}}EM - k_{\\mathrm{ref}}EM $$\n\n问题要求对复合物 $EM$ 应用准稳态近似（QSSA）。该近似假设中间复合物 $EM$ 的浓度能够迅速适应 $M$ 和 $E$ 浓度的变化，因此其变化率实际上为零：$\\frac{d[EM]}{dt} \\approx 0$。\n$$ 0 = k_{\\mathrm{on}}ME - (k_{\\mathrm{off}} + k_{\\mathrm{ref}})EM $$\n据此，我们可以用 $M$ 和 $E$ 表示复合物 $EM$ 的浓度：\n$$ EM = \\frac{k_{\\mathrm{on}}}{k_{\\mathrm{off}} + k_{\\mathrm{ref}}} ME $$\n为了方便，可以定义一个类似于米氏常数 $K_{\\mathrm{M}}$ 的复合参数：\n$$ K_{\\mathrm{M}} = \\frac{k_{\\mathrm{off}} + k_{\\mathrm{ref}}}{k_{\\mathrm{on}}} $$\n因此，QSSA 关系简化为：\n$$ EM = \\frac{M}{K_{\\mathrm{M}}}E $$\n\n接下来，我们使用总伴侣蛋白浓度 $E_{\\mathrm{T}}$ 的守恒定律：\n$$ E_{\\mathrm{T}} = E + EM $$\n代入来自 QSSA 的 $EM$ 表达式：\n$$ E_{\\mathrm{T}} = E + \\frac{M}{K_{\\mathrm{M}}}E = E \\left(1 + \\frac{M}{K_{\\mathrm{M}}}\\right) $$\n现在我们可以求解游离伴侣蛋白浓度 $E$，用 $M$ 和总伴侣蛋白浓度 $E_{\\mathrm{T}}$ 表示：\n$$ E = \\frac{E_{\\mathrm{T}}}{1 + M/K_{\\mathrm{M}}} = \\frac{E_{\\mathrm{T}}K_{\\mathrm{M}}}{M + K_{\\mathrm{M}}} $$\n将此结果代回 $EM$ 的表达式，我们得到 $EM$ 作为 $M$ 和 $E_{\\mathrm{T}}$ 的函数：\n$$ EM = \\frac{M}{K_{\\mathrm{M}}} \\left( \\frac{E_{\\mathrm{T}}K_{\\mathrm{M}}}{M + K_{\\mathrm{M}}} \\right) = \\frac{E_{\\mathrm{T}}M}{M + K_{\\mathrm{M}}} $$\n这个表达式描述了一个饱和结合过程，这是酶动力学的特征。\n\n现在，我们对错误折叠蛋白 $M$（表示为 $M_{\\ast}$）施加稳态条件。在稳态下，$\\frac{dM}{dt} = 0$：\n$$ 0 = s - k_{\\mathrm{deg}}M_{\\ast} - k_{\\mathrm{on}}M_{\\ast}E_{\\ast} + k_{\\mathrm{off}}EM_{\\ast} $$\n项 $-k_{\\mathrm{on}}M_{\\ast}E_{\\ast} + k_{\\mathrm{off}}EM_{\\ast}$ 代表 $M$ 进入伴侣蛋白结合途径的净通量。根据 $EM$ 的 QSSA，我们有 $k_{\\mathrm{on}}M_{\\ast}E_{\\ast} - k_{\\mathrm{off}}EM_{\\ast} = k_{\\mathrm{ref}}EM_{\\ast}$。因此，$M$ 的稳态方程简化为：\n$$ s = k_{\\mathrm{deg}}M_{\\ast} + k_{\\mathrm{ref}}EM_{\\ast} $$\n此方程表示生产速率（$s$）与降解（$k_{\\mathrm{deg}}M_{\\ast}$）和伴侣蛋白介导的重折叠（$k_{\\mathrm{ref}}EM_{\\ast}$）的总清除速率之间的平衡。\n\n代入用 $M_{\\ast}$ 和 $E_{\\mathrm{T}}$ 表示的 $EM_{\\ast}$ 表达式：\n$$ s = k_{\\mathrm{deg}}M_{\\ast} + \\frac{k_{\\mathrm{ref}}E_{\\mathrm{T}}M_{\\ast}}{M_{\\ast} + K_{\\mathrm{M}}} $$\n为了求解 $M_{\\ast}$，我们将其重新整理为一个多项式方程。两边乘以 $(M_{\\ast} + K_{\\mathrm{M}})$：\n$$ s(M_{\\ast} + K_{\\mathrm{M}}) = k_{\\mathrm{deg}}M_{\\ast}(M_{\\ast} + K_{\\mathrm{M}}) + k_{\\mathrm{ref}}E_{\\mathrm{T}}M_{\\ast} $$\n$$ sM_{\\ast} + sK_{\\mathrm{M}} = k_{\\mathrm{deg}}M_{\\ast}^2 + k_{\\mathrm{deg}}K_{\\mathrm{M}}M_{\\ast} + k_{\\mathrm{ref}}E_{\\mathrm{T}}M_{\\ast} $$\n合并同类项得到一个关于 $M_{\\ast}$ 的二次方程：\n$$ k_{\\mathrm{deg}}M_{\\ast}^2 + (k_{\\mathrm{deg}}K_{\\mathrm{M}} + k_{\\mathrm{ref}}E_{\\mathrm{T}} - s)M_{\\ast} - sK_{\\mathrm{M}} = 0 $$\n这就是在 QSSA 下 $M$ 的通用稳态方程。设该二次方程为 $aM_{\\ast}^2 + bM_{\\ast} + c = 0$，其中：\n$a = k_{\\mathrm{deg}}$\n$b = k_{\\mathrm{deg}}K_{\\mathrm{M}} + k_{\\mathrm{ref}}E_{\\mathrm{T}} - s$\n$c = -sK_{\\mathrm{M}}$\n\n$M_{\\ast}$ 的有物理意义的解必须是正数。鉴于 $a > 0$ 和 $c  0$，二次公式会产生一个正根和一个负根。我们取正根：\n$$ M_{\\ast} = \\frac{-b + \\sqrt{b^2 - 4ac}}{2a} $$\n\n我们现在计算数值。首先，计算复合常数 $K_{\\mathrm{M}}$：\n$$ K_{\\mathrm{M}} = \\frac{k_{\\mathrm{off}} + k_{\\mathrm{ref}}}{k_{\\mathrm{on}}} = \\frac{1.0 \\ \\mathrm{h^{-1}} + 3.0 \\ \\mathrm{h^{-1}}}{2.0 \\ \\mathrm{\\mu M^{-1} \\cdot h^{-1}}} = \\frac{4.0}{2.0} \\ \\mathrm{\\mu M} = 2.0 \\ \\mathrm{\\mu M} $$\n\n对于基线条件，$E_{\\mathrm{T}} = 1.0 \\ \\mathrm{\\mu M}$。二次方程的系数为：\n$a = k_{\\mathrm{deg}} = 0.20$\n$b = k_{\\mathrm{deg}}K_{\\mathrm{M}} + k_{\\mathrm{ref}}E_{\\mathrm{T}} - s = (0.20)(2.0) + (3.0)(1.0) - 0.50 = 0.40 + 3.0 - 0.50 = 2.9$\n$c = -sK_{\\mathrm{M}} = -(0.50)(2.0) = -1.0$\n\n求解基线稳态浓度 $M_{\\ast}$：\n$$ M_{\\ast} = \\frac{-2.9 + \\sqrt{2.9^2 - 4(0.20)(-1.0)}}{2(0.20)} = \\frac{-2.9 + \\sqrt{8.41 + 0.8}}{0.4} = \\frac{-2.9 + \\sqrt{9.21}}{0.4} \\approx 0.336995 \\ \\mathrm{\\mu M} $$\n\n对于扰动条件，伴侣蛋白容量减半：$E_{\\mathrm{T}}' = E_{\\mathrm{T}}/2 = 0.5 \\ \\mathrm{\\mu M}$。系数 $a$ 和 $c$ 保持不变。依赖于 $E_{\\mathrm{T}}$ 的新系数 $b'$ 为：\n$b' = k_{\\mathrm{deg}}K_{\\mathrm{M}} + k_{\\mathrm{ref}}E_{\\mathrm{T}}' - s = (0.20)(2.0) + (3.0)(0.5) - 0.50 = 0.40 + 1.5 - 0.50 = 1.4$\n\n求解新的稳态浓度 $M_{\\ast}'$：\n$$ M_{\\ast}' = \\frac{-1.4 + \\sqrt{1.4^2 - 4(0.20)(-1.0)}}{2(0.20)} = \\frac{-1.4 + \\sqrt{1.96 + 0.8}}{0.4} = \\frac{-1.4 + \\sqrt{2.76}}{0.4} \\approx 0.653312 \\ \\mathrm{\\mu M} $$\n\n错误折叠比例的倍数变化由稳态浓度之比 $M_{\\ast}'/M_{\\ast}$ 给出。\n$$ \\frac{M_{\\ast}'}{M_{\\ast}} = \\frac{0.653312}{0.336995} \\approx 1.938634 $$\n将结果四舍五入至四位有效数字，得到 $1.939$。", "answer": "$$\n\\boxed{1.939}\n$$", "id": "2960883"}, {"introduction": "许多神经退行性疾病的一个标志性特征是其病理改变在全脑范围内呈现出可预测的、符合解剖学规律的渐进式扩散模式。这种扩散被认为是通过大脑的神经网络（即连接组）实现的。本高阶计算练习将引导您构建一个网络扩散模型，这是一种模拟蛋白质病理跨神经元传播的强大计算框架 [@problem_id:2960901]。您将运用图论（图拉普拉斯算子）和线性代数（矩阵指数）的原理，将病理的扩散过程抽象为在脑连接组上的一种热传导过程。通过亲手实现该模型并使用交叉验证方法与假设的病理分期数据进行拟合与验证，您不仅能深入理解“连接组介导疾病扩散”的核心思想，还将掌握一种用于检验病理传播机制的前沿研究方法。", "problem": "您将构建并验证一个网络扩散模型，用于模拟错误折叠蛋白病理在大脑连接组上的扩散，并将其与类似于Braak分期的区域性序数分期标签进行拟合。该实现必须是完全确定性的，并且仅在下面提供的参数集上运行。所有量均为无量纲。最终程序必须生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。\n\n背景与基于第一性原理的建模假设：\n- 错误折叠的蛋白质种类（例如，tau蛋白或α-突触核蛋白）可以沿解剖学连接进行跨神经元传播。一个经过充分检验的唯象近似是网络上的线性扩散，这与Fick定律和图上的质量守恒定律一致。\n- 大脑连接组是一个对称、非负的加权邻接矩阵 $A \\in \\mathbb{R}^{n \\times n}$，其中 $A_{ij} = A_{ji} \\geq 0$ 且 $A_{ii} = 0$。\n- 令 $D$ 为对角度矩阵，其元素为 $D_{ii} = \\sum_{j=1}^{n} A_{ij}$。定义对称归一化图拉普拉斯算子 $L = I - D^{-1/2} A D^{-1/2}$，其中 $I$ 是大小为 $n \\times n$ 的单位矩阵。\n- 令初始种子向量为 $x_0 \\in \\mathbb{R}^n$，对于种子区域，$(x_0)_i = 1$，否则 $(x_0)_i = 0$。\n- 经过一个非负扩散尺度参数 $\\beta \\geq 0$ 后的病理场，是热核在初始种子上的作用：$x(\\beta) = \\exp(-\\beta L) x_0$，其中 $\\exp(\\cdot)$ 表示矩阵指数。\n- 序数分期标签 $b \\in \\{1,2,\\dots,B\\}^n$ 编码了相对受累顺序（值越小表示越早）。通过 $y_i = B + 1 - b_i$ 定义目标 $y \\in \\mathbb{R}^n$，以便较大的 $y_i$ 表示更早的受累。使用 $x(\\beta)$ 和 $y$ 之间的Spearman等级相关系数作为拟合优度度量，因为它对单调变换是不变的，并且适用于序数数据。如果在一个子集上由于方差为零（例如，所有值都相等）导致Spearman相关性未定义，则按照惯例将相关性设置为 $0$。\n\n交叉验证和超参数选择：\n- 使用 $K$-折交叉验证，其中第 $k$ 个测试折（对于 $k \\in \\{0,1,\\dots,K-1\\}$）由所有满足 $i \\bmod K = k$ 的索引 $i \\in \\{0,1,\\dots,n-1\\}$ 组成。训练集是其补集。\n- 对于给定的非负 $\\beta$ 值的候选网格 $\\mathcal{G}$，对每个 $\\beta \\in \\mathcal{G}$ 和每个折，计算该折训练索引所对应的 $x(\\beta)$ 和 $y$ 之间的Spearman相关性。将各折的训练相关性取平均，以获得该 $\\beta$ 的交叉验证训练分数。\n- 选择 $\\beta^\\star \\in \\mathcal{G}$，使其在各折上的平均训练Spearman相关性最大化。若出现平局，则选择最小的 $\\beta$。\n- 使用选定的 $\\beta^\\star$，在每个测试折上计算Spearman相关性，并将这些测试相关性的平均值报告为交叉验证性能。\n\n每个测试用例的必需输出：\n- 对于下面的每个测试用例，输出两个浮点数：选定的 $\\beta^\\star$ 和各折的平均测试Spearman相关性，每个数都四舍五入到六位小数。\n- 将所有测试用例的输出汇总到一个列表中，按测试用例的顺序排列，格式化为单行：例如，$[\\beta^\\star_1, \\rho_1, \\beta^\\star_2, \\rho_2, \\dots]$，无空格。\n\n测试套件：\n- 测试用例1（路径图，一端为单一种子，单调分期）：\n  - 大小 $n = 6$。\n  - 邻接矩阵 $A$，边的权重为 $1$：\n    - 第1行：$[0,1,0,0,0,0]$,\n    - 第2行：$[1,0,1,0,0,0]$,\n    - 第3行：$[0,1,0,1,0,0]$,\n    - 第4行：$[0,0,1,0,1,0]$,\n    - 第5行：$[0,0,0,1,0,1]$,\n    - 第6行：$[0,0,0,0,1,0]$。\n  - 种子索引 $S_0 = \\{0\\}$，因此 $x_0 = [1,0,0,0,0,0]^T$。\n  - 分期 $b = [1,2,3,4,5,6]$，因此 $B = 6$ 且 $y = [6,5,4,3,2,1]$。\n  - 折数 $K = 3$。\n  - 候选网格 $\\mathcal{G} = \\{0.05, 0.1, 0.2, 0.5, 1.0, 2.0, 5.0\\}$。\n\n- 测试用例2（两个不相连的三角形，一个三角形中为单一种子，另一个三角形中为晚期标签）：\n  - 大小 $n = 6$。\n  - 邻接矩阵 $A$：\n    - 第1-3行构成一个权重为1的团：第1-3行限制在第1-3列时等于 $[[0,1,1],[1,0,1],[1,1,0]]$；第4-6行限制在第4-6列时等于 $[[0,1,1],[1,0,1],[1,1,0]]$；所有跨区块的元素均为 $0$。\n  - 种子索引 $S_0 = \\{1\\}$，因此 $x_0 = [0,1,0,0,0,0]^T$。\n  - 分期 $b = [2,1,3,6,6,6]$，因此 $B = 6$ 且 $y = [5,6,4,1,1,1]$。\n  - 折数 $K = 3$。\n  - 候选网格 $\\mathcal{G} = \\{0.05, 0.1, 0.2, 0.5, 1.0, 2.0, 5.0\\}$。\n\n- 测试用例3（星形图，中心为种子，异构的叶节点分期以避免退化）：\n  - 大小 $n = 6$。\n  - 邻接矩阵 $A$，节点1与节点2-6以权重1相连，叶节点之间无边：\n    - 第1行：$[0,1,1,1,1,1]$,\n    - 第2行：$[1,0,0,0,0,0]$,\n    - 第3行：$[1,0,0,0,0,0]$,\n    - 第4行：$[1,0,0,0,0,0]$,\n    - 第5行：$[1,0,0,0,0,0]$,\n    - 第6行：$[1,0,0,0,0,0]$。\n  - 种子索引 $S_0 = \\{0\\}$，因此 $x_0 = [1,0,0,0,0,0]^T$。\n  - 分期 $b = [1,2,3,2,3,2]$，因此 $B = 3$ 且 $y = [3,2,1,2,1,2]$。\n  - 折数 $K = 3$。\n  - 候选网格 $\\mathcal{G} = \\{0.05, 0.1, 0.2, 0.5, 1.0, 2.0, 5.0\\}$。\n\n最终输出规范：\n- 您的程序应生成单行输出，其中包含按测试用例顺序排列的结果，格式为用方括号括起来的逗号分隔列表：$[\\beta^\\star_1, \\rho_1, \\beta^\\star_2, \\rho_2, \\beta^\\star_3, \\rho_3]$，每个数字都四舍五入到六位小数。", "solution": "所呈现的问题是计算生物学中一个适定且科学上合理的研究任务，特别是在神经退行性疾病病理建模方面。它要求实现并验证一个网络扩散模型。我们的任务是从一个离散的候选集 $\\mathcal{G}$ 中确定一个最优的扩散尺度参数 $\\beta^\\star$，并使用 $K$-折交叉验证来评估模型的性能。我现在将逐步描述解决此问题的步骤。\n\n首先，我们必须形式化数学模型。大脑的解剖网络由一个对称邻接矩阵 $A$ 表示，其中 $A_{ij} \\ge 0$ 是区域 $i$ 和区域 $j$ 之间的连接强度。错误折叠蛋白的传播受该图上的线性扩散方程支配。病理浓度向量 $x$ 的演化由图热方程描述。\n\n与拉普拉斯算子对应的离散形式是图拉普拉斯算子。我们使用对称归一化图拉普拉斯算子，定义如下：\n$$L = I - D^{-1/2} A D^{-1/2}$$\n其中 $I$ 是 $n \\times n$ 的单位矩阵，$D$ 是对角度矩阵，其元素为 $D_{ii} = \\sum_{j} A_{ij}$。项 $D^{-1/2}$ 表示 $D$ 对角线元素的逐元素平方根倒数。只要没有区域是完全孤立的（即所有度都非零），这个公式就是有效的，所有提供的测试用例都满足此条件。\n\n系统的初始状态由一个种子向量 $x_0$ 给出，其中对于初始受累区域 $(x_0)_i = 1$，否则为 $0$。图热方程的解描述了在之后的‘时间’，或者更准确地说，在扩散尺度 $\\beta \\ge 0$ 时的病理浓度。该解由拉普拉斯算子的矩阵指数作用于初始状态给出：\n$$x(\\beta) = \\exp(-\\beta L) x_0$$\n该方程模拟了初始病理 $x_0$ 如何在尺度 $\\beta$ 上扩散到整个网络。\n\n为了评估模型的预测，我们将预测的病理向量 $x(\\beta)$ 与经验分期数据进行比较。提供的序数分期标签 $b$（其中较小的值表示病理受累的较早阶段）被转换为一个定量的目标向量 $y$。转换为 $y_i = B + 1 - b_i$，其中 $B = \\max(b_i)$。这种转换确保了 $y$ 中较高的值对应于更早的疾病受累，这与浓度 $x_i(\\beta)$ 较高的区域更早受累的预期相一致。\n\n拟合优度通过模型输出 $x(\\beta)$ 和目标向量 $y$ 之间的Spearman等级相关系数 $\\rho_s$ 来量化。这种非参数度量适用于序数数据，因为它对数据的任何单调重缩放都不变，仅评估其等级的对应关系。根据规定，如果对于给定的数据子集（例如，由于其中一个向量的方差为零），相关性未定义，则其值取为 $0$。\n\n任务的核心是找到最优参数 $\\beta^\\star$，并使用 $K$-折交叉验证来评估模型的泛化能力。步骤如下：\n\n1. **数据划分**：将 $n$ 个大脑区域划分为 $K$ 个不相交的折。第 $k$ 个测试折由所有满足 $i \\pmod K = k$ 的索引 $i$ 组成。第 $k$ 折的训练集是其测试集的补集。\n\n2. **超参数优化**：我们遍历每个候选值 $\\beta \\in \\mathcal{G}$。对于每个 $\\beta$：\n    a. 计算病理向量 $x(\\beta) = \\exp(-\\beta L) x_0$。这个计算对每个 $\\beta$ 值执行一次。矩阵指数 $\\exp(-\\beta L)$ 使用稳健的数值库函数计算。\n    b. 对于 $K$ 个折中的每一个，我们计算 $x(\\beta)$ 和 $y$ 中对应于该折*训练*索引的分量之间的Spearman相关性。\n    c. $\\beta$ 的交叉验证训练分数是这 $K$ 个训练相关性的平均值。\n\n3. **最优参数选择**：最优参数 $\\beta^\\star$ 是 $\\mathcal{G}$ 中产生最大交叉验证训练分数的那个值。任何平局都通过选择最小的 $\\beta$ 值来解决。\n\n4. **性能评估**：使用选定的 $\\beta^\\star$，我们在留出的测试数据上评估模型的预测性能。\n    a. 使用病理向量 $x(\\beta^\\star)$。\n    b. 对于 $K$ 个折中的每一个，我们计算 $x(\\beta^\\star)$ 和 $y$ 中对应于该折*测试*索引的分量之间的Spearman相关性。\n    c. 最终报告的性能指标 $\\rho$ 是这 $K$ 个测试相关性的平均值。\n\n整个过程是确定性的，并将应用于提供的每个测试用例。每个用例的最终输出由一对 $(\\beta^\\star, \\rho)$ 组成，然后将它们汇总到一个格式化的列表中。\n\n实现将依赖于 `numpy` 库进行矩阵运算，并依赖于 `scipy` 库的专门函数，即用于矩阵指数的 `scipy.linalg.expm` 和用于相关系数的 `scipy.stats.spearmanr`。将注意处理 `spearmanr` 对恒定值输入返回 `NaN` 的情况，按照问题规范将结果设置为 $0$。\n```python\nimport numpy as np\nfrom scipy.linalg import expm\nfrom scipy.stats import spearmanr\n\ndef process_case(A, seed_indices, b, K, G):\n    \"\"\"\n    Solves for one test case of the network diffusion model.\n\n    Args:\n        A (np.ndarray): Adjacency matrix of the graph.\n        seed_indices (set): Set of indices for the seed regions.\n        b (np.ndarray): Ordinal staging labels.\n        K (int): Number of folds for cross-validation.\n        G (list): Grid of candidate beta values.\n\n    Returns:\n        tuple: A tuple containing the optimal beta (beta_star) and the mean\n               test Spearman correlation.\n    \"\"\"\n    n = A.shape[0]\n\n    # --- 1. Model Setup ---\n    # Initial pathology vector x_0\n    x0 = np.zeros(n)\n    for i in seed_indices:\n        x0[i] = 1.0\n\n    # Target vector y\n    B = np.max(b)\n    y = B + 1 - b\n\n    # Symmetric normalized graph Laplacian L\n    D = np.diag(np.sum(A, axis=1))\n    # Check for isolated nodes to prevent division by zero.\n    # The problem cases do not have isolated nodes.\n    with np.errstate(divide='ignore', invalid='ignore'):\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.diag(D)))\n    # Replace inf which results from 1/0 with 0\n    D_inv_sqrt[np.isinf(D_inv_sqrt)] = 0.0\n    L = np.identity(n) - D_inv_sqrt @ A @ D_inv_sqrt\n\n    # Fold indices\n    all_indices = np.arange(n)\n    fold_indices = [all_indices[all_indices % K == k] for k in range(K)]\n\n    # --- 2. Cross-validation to select beta_star ---\n    mean_train_rhos = {}\n    for beta in G:\n        # Calculate pathology vector x(beta)\n        x_beta = expm(-beta * L) @ x0\n\n        fold_train_rhos = []\n        for k in range(K):\n            test_idx = fold_indices[k]\n            train_idx = np.setdiff1d(all_indices, test_idx)\n            \n            x_train = x_beta[train_idx]\n            y_train = y[train_idx]\n            \n            # Spearman correlation on training set\n            if len(x_train)  2 or np.var(x_train) == 0 or np.var(y_train) == 0:\n                rho = 0.0\n            else:\n                rho, _ = spearmanr(x_train, y_train)\n                if np.isnan(rho):\n                    rho = 0.0\n            fold_train_rhos.append(rho)\n        \n        mean_train_rhos[beta] = np.mean(fold_train_rhos)\n\n    # Select beta_star\n    best_train_rho = -np.inf\n    beta_star = -1.0\n    for beta in G: # Iterate in increasing order of beta\n        if mean_train_rhos[beta] > best_train_rho:\n            best_train_rho = mean_train_rhos[beta]\n            beta_star = beta\n\n    # --- 3. Evaluate on test sets using beta_star ---\n    x_beta_star = expm(-beta_star * L) @ x0\n    \n    test_rhos = []\n    for k in range(K):\n        test_idx = fold_indices[k]\n        \n        x_test = x_beta_star[test_idx]\n        y_test = y[test_idx]\n        \n        # Spearman correlation on test set\n        if len(x_test)  2 or np.var(x_test) == 0 or np.var(y_test) == 0:\n            rho = 0.0\n        else:\n            rho, _ = spearmanr(x_test, y_test)\n            if np.isnan(rho):\n                rho = 0.0\n        test_rhos.append(rho)\n        \n    mean_test_rho = np.mean(test_rhos)\n\n    return beta_star, mean_test_rho\n\n\ndef solve():\n    # Define test cases\n    G_common = [0.05, 0.1, 0.2, 0.5, 1.0, 2.0, 5.0]\n    K_common = 3\n\n    test_cases = [\n        # Test Case 1\n        {\n            \"A\": np.array([\n                [0, 1, 0, 0, 0, 0],\n                [1, 0, 1, 0, 0, 0],\n                [0, 1, 0, 1, 0, 0],\n                [0, 0, 1, 0, 1, 0],\n                [0, 0, 0, 1, 0, 1],\n                [0, 0, 0, 0, 1, 0]\n            ], dtype=float),\n            \"seed_indices\": {0},\n            \"b\": np.array([1, 2, 3, 4, 5, 6]),\n            \"K\": K_common,\n            \"G\": G_common\n        },\n        # Test Case 2\n        {\n            \"A\": np.array([\n                [0, 1, 1, 0, 0, 0],\n                [1, 0, 1, 0, 0, 0],\n                [1, 1, 0, 0, 0, 0],\n                [0, 0, 0, 0, 1, 1],\n                [0, 0, 0, 1, 0, 1],\n                [0, 0, 0, 1, 1, 0]\n            ], dtype=float),\n            \"seed_indices\": {1},\n            \"b\": np.array([2, 1, 3, 6, 6, 6]),\n            \"K\": K_common,\n            \"G\": G_common\n        },\n        # Test Case 3\n        {\n            \"A\": np.array([\n                [0, 1, 1, 1, 1, 1],\n                [1, 0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0, 0]\n            ], dtype=float),\n            \"seed_indices\": {0},\n            \"b\": np.array([1, 2, 3, 2, 3, 2]),\n            \"K\": K_common,\n            \"G\": G_common\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        beta_star, mean_test_rho = process_case(**case)\n        results.append(f\"{beta_star:.6f}\")\n        results.append(f\"{mean_test_rho:.6f}\")\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\n# solve() # This is a library function now, not executed here.\n```", "answer": "[0.050000,1.000000,0.200000,1.000000,0.050000,0.333333]", "id": "2960901"}]}