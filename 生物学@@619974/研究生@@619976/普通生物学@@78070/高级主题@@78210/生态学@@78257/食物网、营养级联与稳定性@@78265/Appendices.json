{"hands_on_practices": [{"introduction": "将食物网抽象为网络图是理解其复杂性的第一步。这个练习将引导你使用基本的网络分析工具，通过计算节点的度（degree）和强度（strength）等指标，来量化物种在网络中的作用。掌握这些概念有助于识别生态系统中的关键物种或“枢纽”，它们对食物网的结构和功能可能具有不成比例的影响。[@problem_id:2799799]", "problem": "一个包含 $4$ 个物种（标记为 $A$、$B$、$C$ 和 $D$）的有向加权食物网由连接列表 $\\{B \\to C, B \\to D, A \\to B, D \\to A, C \\to A\\}$ 及其对应的边权重 $\\{1, 2, 3, 1, 2\\}$ 表示。每条有向边 $X \\to Y$ 表示从物种 $X$ 到物种 $Y$ 的营养相互作用，其正权重表示相互作用的强度。\n\n仅使用食物网网络分析中的基本定义：\n- 物种 $i$ 的入度 $k_{i}^{\\text{in}}$ 是到达 $i$ 的不同边的数量。\n- 物种 $i$ 的出度 $k_{i}^{\\text{out}}$ 是离开 $i$ 的不同边的数量。\n- 物种 $i$ 的入强度 $s_{i}^{\\text{in}}$ 是所有进入 $i$ 的边的权重之和。\n- 物种 $i$ 的出强度 $s_{i}^{\\text{out}}$ 是所有离开 $i$ 的边的权重之和。\n\n计算每个物种 $i \\in \\{A, B, C, D\\}$ 的 $k_{i}^{\\text{in}}$、$k_{i}^{\\text{out}}$、$s_{i}^{\\text{in}}$ 和 $s_{i}^{\\text{out}}$。然后，通过以下公式为每个物种定义复合中心性指数：\n$$\nH_{i} \\equiv \\big(k_{i}^{\\text{in}} + k_{i}^{\\text{out}}\\big)\\big(s_{i}^{\\text{in}} + s_{i}^{\\text{out}}\\big).\n$$\n使用这些量来解释在此食物网中哪些物种最可能充当枢纽。对于最终报告的结果，仅提供最大中心性值：\n$$\nH_{\\max} \\equiv \\max_{i \\in \\{A,B,C,D\\}} H_{i}.\n$$\n无需四舍五入。仅提供 $H_{\\max}$ 的值作为您的最终数值答案。", "solution": "该问题陈述经证实具有科学依据、问题设定合理且客观。它呈现了一个应用于简化食物网的标准网络分析任务，所有必要的数据和定义都已明确提供。因此，我们可以直接进行求解。\n\n该食物网由 $4$ 个物种组成，我们将其标记为有向图中的节点：$V = \\{A, B, C, D\\}$。营养相互作用以一组有向加权边的形式给出。连接列表 $\\{B \\to C, B \\to D, A \\to B, D \\to A, C \\to A\\}$ 及其对应的权重 $\\{1, 2, 3, 1, 2\\}$ 定义了网络结构。设 $w_{ij}$ 是从物种 $j$ 到物种 $i$ 的边的权重。给定的权重为：$w_{CB}=1$，$w_{DB}=2$，$w_{BA}=3$，$w_{AD}=1$ 和 $w_{AC}=2$。注意此处的约定：一条边 $X \\to Y$ 意味着 $Y$ 捕食 $X$，因此能量从 $X$ 流向 $Y$。\n\n我们将根据所提供的定义，为每个物种 $i \\in \\{A, B, C, D\\}$ 计算其入度（$k_{i}^{\\text{in}}$）、出度（$k_{i}^{\\text{out}}$）、入强度（$s_{i}^{\\text{in}}$）和出强度（$s_{i}^{\\text{out}}$）。\n\n对于物种 A：\n其入边为 $D \\to A$ 和 $C \\to A$。因此，入度为 $k_{A}^{\\text{in}} = 2$。\n这些入边的权重为 $w_{AD} = 1$ 和 $w_{AC} = 2$。入强度是这些权重之和：$s_{A}^{\\text{in}} = 1 + 2 = 3$。\n其唯一的出边是 $A \\to B$。因此，出度为 $k_{A}^{\\text{out}} = 1$。\n该出边的权重为 $w_{BA} = 3$。出强度为 $s_{A}^{\\text{out}} = 3$。\n物种 $A$ 的复合中心性指数是：\n$$H_{A} = (k_{A}^{\\text{in}} + k_{A}^{\\text{out}})(s_{A}^{\\text{in}} + s_{A}^{\\text{out}}) = (2 + 1)(3 + 3) = (3)(6) = 18$$\n\n对于物种 B：\n其唯一的入边是 $A \\to B$。因此，入度为 $k_{B}^{\\text{in}} = 1$。\n该入边的权重为 $w_{BA} = 3$。入强度为 $s_{B}^{\\text{in}} = 3$。\n其出边为 $B \\to C$ 和 $B \\to D$。因此，出度为 $k_{B}^{\\text{out}} = 2$。\n这些出边的权重为 $w_{CB} = 1$ 和 $w_{DB} = 2$。出强度是这些权重之和：$s_{B}^{\\text{out}} = 1 + 2 = 3$。\n物种 $B$ 的复合中心性指数是：\n$$H_{B} = (k_{B}^{\\text{in}} + k_{B}^{\\text{out}})(s_{B}^{\\text{in}} + s_{B}^{\\text{out}}) = (1 + 2)(3 + 3) = (3)(6) = 18$$\n\n对于物种 C：\n其唯一的入边是 $B \\to C$。因此，入度为 $k_{C}^{\\text{in}} = 1$。\n该入边的权重为 $w_{CB} = 1$。入强度为 $s_{C}^{\\text{in}} = 1$。\n其唯一的出边是 $C \\to A$。因此，出度为 $k_{C}^{\\text{out}} = 1$。\n该出边的权重为 $w_{AC} = 2$。出强度为 $s_{C}^{\\text{out}} = 2$。\n物种 $C$ 的复合中心性指数是：\n$$H_{C} = (k_{C}^{\\text{in}} + k_{C}^{\\text{out}})(s_{C}^{\\text{in}} + s_{C}^{\\text{out}}) = (1 + 1)(1 + 2) = (2)(3) = 6$$\n\n对于物种 D：\n其唯一的入边是 $B \\to D$。因此，入度为 $k_{D}^{\\text{in}} = 1$。\n该入边的权重为 $w_{DB} = 2$。入强度为 $s_{D}^{\\text{in}} = 2$。\n其唯一的出边是 $D \\to A$。因此，出度为 $k_{D}^{\\text{out}} = 1$。\n该出边的权重为 $w_{AD} = 1$。出强度为 $s_{D}^{\\text{out}} = 1$。\n物种 $D$ 的复合中心性指数是：\n$$H_{D} = (k_{D}^{\\text{in}} + k_{D}^{\\text{out}})(s_{D}^{\\text{in}} + s_{D}^{\\text{out}}) = (1 + 1)(2 + 1) = (2)(3) = 6$$\n\n计算出的中心性指数为 $H_{A} = 18$、$H_{B} = 18$、$H_{C} = 6$ 和 $H_{D} = 6$。中心性指数 $H_i$ 衡量了物种在网络中的整体重要性，它结合了物种的连接数量（总度）和这些连接的强度（总强度）。物种 $A$ 和 $B$ 的中心性得分显著高于 $C$ 和 $D$，表明它们是该食物网中的核心枢纽。\n\n最后一步是找到最大中心性值 $H_{\\max}$。\n$$H_{\\max} = \\max_{i \\in \\{A,B,C,D\\}} H_{i} = \\max\\{18, 18, 6, 6\\}$$\n最大值为 $18$。", "answer": "$$\\boxed{18}$$", "id": "2799799"}, {"introduction": "食物网的稳定性不仅取决于其结构，还取决于物种间相互作用的动态特性。本练习将深入探讨经典的 Rosenzweig-MacArthur 捕食者-猎物模型，揭示“富集悖论”这一核心概念。你将通过数学推导，确定导致系统从稳定平衡态转变为周期性振荡的关键阈值 $K_c$，从而亲身体验环境参数如何影响生态系统的稳定性。[@problem_id:2799822]", "problem": "考虑一个由带有Holling II型功能性反应的Rosenzweig–MacArthur (RM) 模型描述的捕食者-猎物系统。设猎物密度为$N$，捕食者密度为$P$。其控制常微分方程 (ODE) 如下\n$$\n\\frac{dN}{dt} \\;=\\; r\\,N\\left(1-\\frac{N}{K}\\right) \\;-\\; \\frac{a\\,N}{1+a\\,h\\,N}\\,P,\n\\qquad\n\\frac{dP}{dt} \\;=\\; e\\,\\frac{a\\,N}{1+a\\,h\\,N}\\,P \\;-\\; m\\,P,\n$$\n其中，$r>0$ 是猎物的内禀增长率，$K>0$ 是猎物的环境承载力，$a>0$ 是攻击率，$h>0$ 是处理时间，$e\\in(0,1]$ 是转化效率，$m>0$ 是捕食者的人均死亡率。假设参数值满足 $e>m\\,h$，从而保证存在一个严格正的共存平衡点。所有参数均为无量纲。\n\n从这些方程出发（且仅使用动力系统中已确立的定义和运算），推导出一个关于临界环境承载力 $K_c$ 的显式公式。在该临界值上，内部平衡点通过Hopf分支（即“富集悖论”阈值）失去局部稳定性。您的表达式必须仅用 $a$、$h$、$e$、$r$ 和 $m$ 表示。\n\n然后，使用 $r=1$、$a=0.8$、$h=0.4$、$e=0.6$ 和 $m=0.2$ 计算 $K_c$ 的数值。最后，判断 $K=5$ 是否是失稳的（即，它是否超过Hopf阈值，从而导致内部平衡点不稳定并出现小振幅周期解）。\n\n将您的最终答案以一个双元素行矩阵的形式报告：\n- 第一个元素：$K_c$ 的数值，四舍五入到四位有效数字。\n- 第二个元素：一个指示变量，如果 $K=5$ 是失稳的，则其值为 $1$，否则为 $0$。\n\n数值元素以纯数字形式表示（无单位）。", "solution": "所给问题是数学生态学中动力系统分析的一个标准练习，具体涉及Rosenzweig-MacArthur模型。任务是推导发生Hopf分支时的临界环境承载力，这一现象被称为“富集悖论”。\n\n首先，我们来验证问题陈述的合理性。\n给定的常微分方程（ODE）系统是：\n$$\n\\frac{dN}{dt} = r\\,N\\left(1-\\frac{N}{K}\\right) - \\frac{a\\,N}{1+a\\,h\\,N}\\,P\n$$\n$$\n\\frac{dP}{dt} = e\\,\\frac{a\\,N}{1+a\\,h\\,N}\\,P - m\\,P\n$$\n参数分别是猎物内禀增长率 $r > 0$、猎物环境承载力 $K > 0$、捕食者攻击率 $a > 0$、处理时间 $h > 0$、转化效率 $e \\in (0, 1]$ 和捕食者死亡率 $m > 0$。条件 $e > m\\,h$ 的给出是为了确保存在一个严格正的（共存）平衡点。为后续计算提供了具体的数值：$r=1$、$a=0.8$、$h=0.4$、$e=0.6$ 和 $m=0.2$。\n\n该问题具有科学依据，因为它涉及理论生态学中的一个典范模型。问题是适定的，提供了推导所求公式和计算数值结果所需的所有信息。其语言客观而精确。因此，该问题是有效的，我们可以着手求解。\n\n第一步是找到共存平衡点 $(N^*, P^*)$，其中 $N^* > 0$ 且 $P^* > 0$。这需要将两个时间导数都设为零。\n从捕食者方程 $\\frac{dP}{dt} = 0$ 出发，对于 $P \\neq 0$，我们有：\n$$\ne\\,\\frac{a\\,N^*}{1+a\\,h\\,N^*} - m = 0\n$$\n求解 $N^*$：\n$$\ne\\,a\\,N^* = m(1+a\\,h\\,N^*) \\implies (e\\,a - m\\,a\\,h)N^* = m \\implies N^* = \\frac{m}{a(e - m\\,h)}\n$$\n条件 $e > m\\,h$ 确保了 $N^* > 0$。\n\n接下来，我们使用猎物方程 $\\frac{dN}{dt} = 0$ 且 $N^* > 0$：\n$$\nr\\left(1-\\frac{N^*}{K}\\right) - \\frac{a}{1+a\\,h\\,N^*}\\,P^* = 0\n$$\n求解 $P^*$：\n$$\nP^* = \\frac{r(1+a\\,h\\,N^*)}{a}\\left(1-\\frac{N^*}{K}\\right)\n$$\n对于共存平衡点，我们必须有 $P^* > 0$，这意味着 $1 - \\frac{N^*}{K} > 0$，即 $K > N^*$。这意味着环境承载力必须足够大，以支持能够反过来维持捕食者种群的猎物种群。\n\n为了分析此平衡点的局部稳定性，我们计算系统在 $(N^*, P^*)$ 处的雅可比矩阵 $J$。设 $F(N,P) = \\frac{dN}{dt}$ 和 $G(N,P) = \\frac{dP}{dt}$。雅可比矩阵为：\n$$\nJ = \\begin{pmatrix} \\frac{\\partial F}{\\partial N} & \\frac{\\partial F}{\\partial P} \\\\ \\frac{\\partial G}{\\partial N} & \\frac{\\partial G}{\\partial P} \\end{pmatrix}\n$$\n偏导数是：\n$$\n\\frac{\\partial F}{\\partial N} = r - \\frac{2rN}{K} - \\frac{aP}{(1+ahN)^2}, \\qquad \\frac{\\partial F}{\\partial P} = -\\frac{aN}{1+ahN}\n$$\n$$\n\\frac{\\partial G}{\\partial N} = \\frac{eaP}{(1+ahN)^2}, \\qquad \\frac{\\partial G}{\\partial P} = \\frac{eaN}{1+ahN} - m\n$$\n在平衡点 $(N^*, P^*)$ 处计算这些值，我们将矩阵元素记为 $J_{ij}^*$：\n$J_{22}^* = \\frac{eaN^*}{1+ahN^*} - m = 0$，根据 $N^*$ 的定义。\n$J_{12}^* = -\\frac{aN^*}{1+ahN^*} = -\\frac{m}{e}$，使用相同的平衡条件。\n$J_{21}^* = \\frac{eaP^*}{(1+ahN^*)^2}$。由于 $e, a, P^*$ 均为正数，因此 $J_{21}^* > 0$。\n$J_{11}^* = r - \\frac{2rN^*}{K} - \\frac{aP^*}{(1+ahN^*)^2}$。\n\n关于特征值 $\\lambda$ 的特征方程是 $\\det(J^* - \\lambda I) = 0$，由此可得：\n$$\n\\lambda^2 - \\text{Tr}(J^*)\\lambda + \\det(J^*) = 0\n$$\n其中 $\\text{Tr}(J^*) = J_{11}^* + J_{22}^* = J_{11}^*$ 且 $\\det(J^*) = J_{11}^*J_{22}^* - J_{12}^*J_{21}^* = -J_{12}^*J_{21}^* = \\frac{m}{e}J_{21}^*$。\n由于 $m$、$e$ 及 $J_{21}^*$ 均为正（当 $K>N^*$ 时），我们有 $\\det(J^*) > 0$。因此，该平衡点是一个节点或一个焦点。其稳定性由迹的符号决定。如果 $\\text{Tr}(J^*) < 0$，则平衡点是局部稳定的；如果 $\\text{Tr}(J^*) > 0$，则是不稳定的。\n\n当共轭复特征值的实部穿过零时，发生Hopf分支。对于这个系统，这在 $\\text{Tr}(J^*) = 0$ 时发生。我们必须找到满足此条件的临界环境承载力 $K_c$。\n让我们来简化 $J_{11}^*$。根据平衡点处的猎物零增长线，有 $r(1 - N^*/K) = \\frac{aP^*}{1+ahN^*}$。\n我们可以将 $J_{11}^*$ 写成：\n$$\nJ_{11}^* = r\\left(1-\\frac{N^*}{K}\\right) - \\frac{rN^*}{K} - \\frac{aP^*}{(1+ahN^*)^2}\n$$\n代入来自零增长线的项：\n$$\nJ_{11}^* = \\frac{aP^*}{1+ahN^*} - \\frac{rN^*}{K} - \\frac{aP^*}{(1+ahN^*)^2} = \\frac{aP^*(1+ahN^*) - aP^*}{(1+ahN^*)^2} - \\frac{rN^*}{K} = \\frac{a^2hN^*P^*}{(1+ahN^*)^2} - \\frac{rN^*}{K}\n$$\n从 $J_{11}^*$ 的表达式出发，我们使用另一种更直接的简化方法。\n$J_{11}^* = r - \\frac{2rN^*}{K} - \\frac{1}{1+ahN^*} \\left(\\frac{aP^*}{1+ahN^*}\\right) = r - \\frac{2rN^*}{K} - \\frac{r}{1+ahN^*}\\left(1-\\frac{N^*}{K}\\right)$。\n对于 $K=K_c$，设 $J_{11}^* = 0$：\n$$\nr - \\frac{2rN^*}{K_c} - \\frac{r}{1+ahN^*}\\left(1-\\frac{N^*}{K_c}\\right) = 0\n$$\n两边同除以 $r$（因为 $r > 0$）：\n$$\n\\left(1 - \\frac{1}{1+ahN^*}\\right) = \\frac{2N^*}{K_c} - \\frac{N^*}{K_c(1+ahN^*)}\n$$\n$$\n\\frac{ahN^*}{1+ahN^*} = \\frac{N^*}{K_c}\\left(2 - \\frac{1}{1+ahN^*}\\right) = \\frac{N^*}{K_c}\\left(\\frac{2+2ahN^*-1}{1+ahN^*}\\right)\n$$\n两边同除以 $\\frac{N^*}{1+ahN^*}$（因为 $N^* > 0$）：\n$$\nah = \\frac{1}{K_c}(1+2ahN^*) \\implies K_c = \\frac{1+2ahN^*}{ah} = \\frac{1}{ah} + 2N^*\n$$\n代入 $N^* = \\frac{m}{a(e-mh)}$ 的表达式：\n$$\nK_c = \\frac{1}{ah} + 2\\frac{m}{a(e-mh)} = \\frac{e-mh + 2mh}{ah(e-mh)} = \\frac{e+mh}{ah(e-mh)}\n$$\n这就是临界环境承载力 $K_c$ 的显式公式。\n富集悖论指出，当 $K>K_c$ 时，迹变为正，平衡点变得不稳定，从而导致种群周期性波动。\n\n现在，我们使用给定的参数计算 $K_c$ 的数值：$r=1$、$a=0.8$、$h=0.4$、$e=0.6$、$m=0.2$。\n$$\nm\\,h = 0.2 \\times 0.4 = 0.08\n$$\n$$\na\\,h = 0.8 \\times 0.4 = 0.32\n$$\n$$\ne+m\\,h = 0.6 + 0.08 = 0.68\n$$\n$$\ne-m\\,h = 0.6 - 0.08 = 0.52\n$$\n将这些值代入 $K_c$ 的公式中：\n$$\nK_c = \\frac{e+m\\,h}{a\\,h\\,(e-m\\,h)} = \\frac{0.68}{0.32 \\times 0.52} = \\frac{0.68}{0.1664} \\approx 4.086538...\n$$\n四舍五入到四位有效数字，$K_c = 4.087$。\n\n最后，我们判断 $K=5$ 是否是失稳的。这需要检查是否 $K > K_c$。\n我们将 $K=5$ 与 $K_c \\approx 4.087$ 进行比较。\n由于 $5 > 4.087$，环境承载力 $K=5$ 超过了Hopf分支阈值。因此，内部平衡点在该值处是不稳定的，系统发生失稳。指示变量为 $1$。\n\n最终答案由两个元素组成：$K_c$ 的数值和指示变量。\n第一个元素：$4.087$\n第二个元素：$1$", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n4.087 & 1\n\\end{pmatrix}\n}\n$$", "id": "2799822"}, {"introduction": "物种的消失会在食物网中引发连锁反应，导致所谓的“级联灭绝”。这个练习要求你编写一个算法，模拟当一个或多个物种被移除后，完全依赖这些物种作为食物来源的消费者将如何相继灭绝。通过这种计算方法，你可以直观地探索食物网结构如何决定其对物种丧失的鲁棒性。[@problem_id:2799841]", "problem": "给定一个包含 $n$ 个物种的有向食物网，其表示为一个二元邻接矩阵 $A \\in \\{0,1\\}^{n \\times n}$，其中 $A_{ij} = 1$ 当且仅当物种 $i$ 捕食物种 $j$，否则 $A_{ij} = 0$。一个物种是基础物种，当且仅当它在原始网络中没有猎物，即当且仅当 $\\sum_{j=1}^{n} A_{ij} = 0$。一个物种是顶级捕食者，当且仅当它是一个消费者（至少有一个猎物）并且没有捕食者，即当且仅当 $\\sum_{j=1}^{n} A_{ij} \\ge 1$ 且 $\\sum_{i=1}^{n} A_{ij} = 0$。\n\n请根据以下基于最小结构性资源可行性和初级生产的规则，实现一个计算次级灭绝的算法：\n- 任何在存活物种中当前没有任何猎物的消费者都会灭绝。\n- 任何基础物种，无论是否有捕食者，都会持续存在，除非它作为初始扰动的一部分被明确移除。\n\n该算法必须纯粹基于有向图的结构进行操作，并按如下方式进行。给定一个初始移除物种集合 $R \\subseteq \\{1,2,\\dots,n\\}$，定义存活集合 $S$，起始为 $S_0 = \\{1,2,\\dots,n\\} \\setminus R$。然后迭代计算\n$$\nS_{t+1} \\;=\\; S_t \\setminus \\left\\{\\, i \\in S_t \\,\\middle|\\, \\sum_{j \\in S_t} A_{ij} = 0 \\text{ and } \\sum_{k=1}^{n} A_{ik} \\ge 1 \\,\\right\\} ,\n$$\n即，从 $S_t$ 中移除任何在 $S_t$ 中已失去所有猎物的消费者，同时绝不因缺少猎物而移除基础物种。重复此过程直到 $S_{t+1} = S_t$，并按物种索引的升序输出最终集合 $S^\\star$。物种从 $1$ 到 $n$ 编号，所有输出都必须使用这种基于 1 的索引。\n\n您的程序必须实现此算法并将其应用于以下测试套件。在下方的每个案例中，$n = 5$，邻接矩阵 $A$ 由其行指定，每行为一个包含 5 个 0 或 1 条目的列表。对于每个测试，也提供了一个初始移除物种集合 $R$。您的程序必须为每个测试计算最终的存活者列表，并生成单行输出，其中包含所有存活者列表，格式为用方括号括起来的逗号分隔列表，不含空格。例如，如果有三个测试的存活者分别为 $[1,2]$、$[3]$ 和 $[\\,]$，则单行输出必须是 $[[1,2],[3],[]]$。\n\n测试套件：\n- 测试 1（在一个五物种网络中首先移除一个顶级捕食者）：\n  - $A = \\begin{bmatrix}\n  0 & 0 & 0 & 0 & 0 \\\\\n  1 & 0 & 0 & 0 & 0 \\\\\n  1 & 1 & 0 & 0 & 0 \\\\\n  0 & 1 & 0 & 0 & 0 \\\\\n  0 & 0 & 1 & 1 & 0\n  \\end{bmatrix}$\n  - $R = \\{5\\}$\n- 测试 2（一个长度为 5 的食物链，首先移除顶级捕食者）：\n  - $A = \\begin{bmatrix}\n  0 & 0 & 0 & 0 & 0 \\\\\n  1 & 0 & 0 & 0 & 0 \\\\\n  0 & 1 & 0 & 0 & 0 \\\\\n  0 & 0 & 1 & 0 & 0 \\\\\n  0 & 0 & 0 & 1 & 0\n  \\end{bmatrix}$\n  - $R = \\{5\\}$\n- 测试 3（两个基础物种，移除一个基础物种后引发自下而上的级联效应）：\n  - $A = \\begin{bmatrix}\n  0 & 0 & 0 & 0 & 0 \\\\\n  0 & 0 & 0 & 0 & 0 \\\\\n  1 & 0 & 0 & 0 & 0 \\\\\n  0 & 1 & 0 & 0 & 0 \\\\\n  0 & 0 & 1 & 1 & 0\n  \\end{bmatrix}$\n  - $R = \\{1\\}$\n- 测试 4（全基础物种网络，移除一个物种）：\n  - $A = \\begin{bmatrix}\n  0 & 0 & 0 & 0 & 0 \\\\\n  0 & 0 & 0 & 0 & 0 \\\\\n  0 & 0 & 0 & 0 & 0 \\\\\n  0 & 0 & 0 & 0 & 0 \\\\\n  0 & 0 & 0 & 0 & 0\n  \\end{bmatrix}$\n  - $R = \\{3\\}$\n- 测试 5（杂食性网络，在移除唯一的基础资源后完全崩溃）：\n  - $A = \\begin{bmatrix}\n  0 & 0 & 0 & 0 & 0 \\\\\n  1 & 0 & 0 & 0 & 0 \\\\\n  1 & 0 & 0 & 0 & 0 \\\\\n  0 & 1 & 1 & 0 & 0 \\\\\n  0 & 1 & 0 & 1 & 0\n  \\end{bmatrix}$\n  - $R = \\{1\\}$\n\n答案规范：\n- 对于每个测试，答案是按升序排列的存活物种索引列表，使用基于 1 的索引。\n- 您的程序必须输出单行，其中包含这些列表，格式为用单对方括号括起来的逗号分隔列表，不含空格，并严格按照上述测试的顺序，例如 $[[\\cdots],[\\cdots],\\dots]$。", "solution": "问题陈述已经过评估，并被认为是有效的。它在理论生态学领域提出了一个适定、有科学依据且计算上可行的问题。次级灭绝模型虽然是对复杂生态动力学的简化，但它是一种基于资源可用性的标准结构化方法。算法的定义清晰明确，并且为测试用例提供了所有必要的数据。不存在会妨碍唯一解的矛盾、信息缺失或逻辑缺陷。\n\n该问题要求实现一个迭代算法来模拟食物网中的次级灭绝。食物网由一个邻接矩阵 $A \\in \\{0,1\\}^{n \\times n}$ 表示，其中 $A_{ij} = 1$ 表示物种 $i$ 捕食物种 $j$。物种数量为 $n$。\n\n首先，我们必须区分基础物种和消费者。物种 $i$ 如果没有猎物，则为基础物种，形式上表示为 $\\sum_{j=1}^{n} A_{ij} = 0$。相反，如果一个物种至少有一个猎物，它就是消费者，即 $\\sum_{j=1}^{n} A_{ij} \\ge 1$。这种区分至关重要，因为灭绝规则仅适用于消费者。让我们将所有物种的集合表示为 $N = \\{1, 2, \\dots, n\\}$，将消费者物种的集合表示为 $C = \\{i \\in N \\mid \\sum_{j=1}^{n} A_{ij} \\ge 1\\}$。\n\n模拟始于一个初始扰动，即移除一个物种集合 $R \\subseteq N$。初始存活物种集合为 $S_0 = N \\setminus R$。然后系统迭代演化。在每个步骤 $t \\ge 0$，通过从 $S_t$ 中移除那些无法再维持生存的物种来确定新的存活者集合 $S_{t+1}$。如果一个消费者物种 $i \\in S_t \\cap C$ 的所有猎物都已从生态系统中移除，它就会发生次级灭绝。物种 $i$ 的猎物集合是 $P_i = \\{j \\in N \\mid A_{ij} = 1\\}$。物种 $i$ 在步骤 $t$ 灭绝的条件是，在当前的存活者集合 $S_t$ 中它没有任何剩余的猎物，这可以表示为 $P_i \\cap S_t = \\emptyset$。\n\n问题为此检查提供了一个紧凑的数学公式：$\\sum_{j \\in S_t} A_{ij} = 0$。这个和非零，当且仅当物种 $i$ 的至少一个猎物 $j$（其中 $A_{ij}=1$）存在于 $S_t$ 中。\n\n因此，迭代更新规则是：\n$$\nS_{t+1} = S_t \\setminus D_t,\n$$\n其中 $D_t$ 是在步骤 $t$ 灭绝的物种集合：\n$$\nD_t = \\left\\{ i \\in S_t \\cap C \\,\\middle|\\, \\sum_{j \\in S_t} A_{ij} = 0 \\right\\}。\n$$\n这个过程一直重复，直到在某次迭代中没有物种被移除，即当 $D_t = \\emptyset$ 时，这意味着 $S_{t+1} = S_t$。最终的存活者集合就是这个稳定集合 $S^\\star$。由于物种总数 $n$ 是有限的，并且物种只会被移除，这个过程保证会终止。\n\n让我们用测试 3 来演示这个过程：\n- 邻接矩阵 $A$：\n$$\nA = \\begin{bmatrix}\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 1 & 0\n\\end{bmatrix}\n$$\n- 初始移除集合 $R = \\{1\\}$。\n- 所有物种的集合是 $N = \\{1, 2, 3, 4, 5\\}$。\n- 初始存活集合是 $S_0 = N \\setminus R = \\{2, 3, 4, 5\\}$。\n- 消费者集合是 $C = \\{3, 4, 5\\}$，因为物种 1 和 2 的行和为 0。\n\n迭代 $t=0$：\n- 我们评估 $S_0$ 中的消费者 $\\{3, 4, 5\\}$ 的存活情况。\n- 对于物种 $3 \\in C$：猎物集合为 $P_3 = \\{1\\}$。我们检查 $S_0$ 中是否有任何猎物。$P_3 \\cap S_0 = \\{1\\} \\cap \\{2, 3, 4, 5\\} = \\emptyset$。等价地，$\\sum_{j \\in S_0} A_{3j} = A_{32}+A_{33}+A_{34}+A_{35} = 0+0+0+0=0$。物种 3 灭绝。\n- 对于物种 $4 \\in C$：猎物集合为 $P_4 = \\{2\\}$。我们检查 $P_4 \\cap S_0 = \\{2\\} \\cap \\{2, 3, 4, 5\\} = \\{2\\} \\ne \\emptyset$。物种 4 存活。\n- 对于物种 $5 \\in C$：猎物集合为 $P_5 = \\{3, 4\\}$。我们检查 $P_5 \\cap S_0 = \\{3, 4\\} \\cap \\{2, 3, 4, 5\\} = \\{3, 4\\} \\ne \\emptyset$。物种 5 存活。\n- 灭绝集合是 $D_0 = \\{3\\}$。\n- 新的存活集合是 $S_1 = S_0 \\setminus \\{3\\} = \\{2, 4, 5\\}$。\n\n迭代 $t=1$：\n- 我们评估 $S_1$ 中的消费者，现在是 $\\{4, 5\\}$。\n- 对于物种 $4 \\in C$：猎物是 $P_4=\\{2\\}$。我们检查 $P_4 \\cap S_1 = \\{2\\} \\cap \\{2, 4, 5\\} = \\{2\\} \\ne \\emptyset$。物种 4 存活。\n- 对于物种 $5 \\in C$：猎物是 $P_5=\\{3, 4\\}$。我们检查 $P_5 \\cap S_1 = \\{3, 4\\} \\cap \\{2, 4, 5\\} = \\{4\\} \\ne \\emptyset$。物种 5 存活。\n- 灭绝集合是 $D_1 = \\emptyset$。\n\n由于在此次迭代中没有物种灭绝，系统已经稳定。最终的存活者集合是 $S^\\star = S_1 = \\{2, 4, 5\\}$。此测试的正确格式化输出为 `[2,4,5]`。\n\n将这个严格的程序应用于所有测试用例，得到以下最终存活者集合：\n- 测试 1 ($R=\\{5\\}$): $S^\\star = \\{1, 2, 3, 4\\}$\n- 测试 2 ($R=\\{5\\}$): $S^\\star = \\{1, 2, 3, 4\\}$\n- 测试 3 ($R=\\{1\\}$): $S^\\star = \\{2, 4, 5\\}$\n- 测试 4 ($R=\\{3\\}$): $S^\\star = \\{1, 2, 4, 5\\}$\n- 测试 5 ($R=\\{1\\}$): $S^\\star = \\emptyset$\n\n实现将编码此逻辑，使用数值数组进行高效计算。作为基于 1 的索引提供的物种索引，会通过转换为基于 0 的索引以进行数组操作，并在最终输出时转换回来。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef run_extinction_simulation(A, R, n):\n    \"\"\"\n    Simulates secondary extinctions in a food web.\n\n    Args:\n        A (np.ndarray): The n x n adjacency matrix.\n        R (set): The initial set of removed species (1-based).\n        n (int): The number of species.\n\n    Returns:\n        list: A sorted list of surviving species indices (1-based).\n    \"\"\"\n    # 0-based indexing for arrays.\n    # is_consumer[i] is True if species i+1 is a consumer.\n    is_consumer = np.sum(A, axis=1) > 0\n    \n    # Start with a boolean mask representing all species as survivors.\n    survivors_mask = np.ones(n, dtype=bool)\n    \n    # Apply initial removal set R. Convert 1-based R to 0-based indices.\n    if R:\n        initial_removed_indices = [r - 1 for r in R]\n        survivors_mask[initial_removed_indices] = False\n    \n    while True:\n        extinctions_in_step = []\n        \n        # Identify currently surviving consumers to check for extinction.\n        # np.where returns a tuple of arrays; we need the first element.\n        species_to_check = np.where(survivors_mask & is_consumer)[0]\n        \n        if species_to_check.size == 0:\n            # No more consumers left, so no more secondary extinctions are possible.\n            break\n\n        for i in species_to_check:\n            # Check if species i has any prey among the current survivors.\n            # A[i, survivors_mask] selects an array of 0s and 1s corresponding to\n            # the prey of i that are still alive. If the sum is 0, all prey are gone.\n            if np.sum(A[i, survivors_mask]) == 0:\n                extinctions_in_step.append(i)\n        \n        if not extinctions_in_step:\n            # No species went extinct in this step, a stable state is reached.\n            break\n        else:\n            # Remove the extinct species for the next iteration.\n            survivors_mask[extinctions_in_step] = False\n            \n    # Get final survivors' 0-based indices\n    final_survivor_indices_0based = np.where(survivors_mask)[0]\n    \n    # Convert to 1-based indices and return as a sorted list for the final answer.\n    final_survivor_indices_1based = (final_survivor_indices_0based + 1).tolist()\n    \n    return final_survivor_indices_1based\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Test 1\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [1, 1, 0, 0, 0],\n                [0, 1, 0, 0, 0],\n                [0, 0, 1, 1, 0]\n            ]),\n            \"R\": {5}\n        },\n        # Test 2\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [0, 1, 0, 0, 0],\n                [0, 0, 1, 0, 0],\n                [0, 0, 0, 1, 0]\n            ]),\n            \"R\": {5}\n        },\n        # Test 3\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [0, 1, 0, 0, 0],\n                [0, 0, 1, 1, 0]\n            ]),\n            \"R\": {1}\n        },\n        # Test 4\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ]),\n            \"R\": {3}\n        },\n        # Test 5\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [0, 1, 1, 0, 0],\n                [0, 1, 0, 1, 0]\n            ]),\n            \"R\": {1}\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        survivors = run_extinction_simulation(case[\"A\"], case[\"R\"], case[\"n\"])\n        results.append(survivors)\n    \n    # Final print statement in the exact required format.\n    # Convert list of lists to string and remove all whitespace.\n    final_output_string = str(results).replace(\" \", \"\")\n    print(final_output_string)\n\nsolve()\n```", "id": "2799841"}]}