{"hands_on_practices": [{"introduction": "免疫反应的初始阶段由抗原的持续存在时间决定。不同的疫苗技术，如信使核糖核酸（mRNA）和病毒载体疫苗，会导致不同时长的抗原表达。本练习应用一个一级动力学模型来量化和比较这两个平台产生的总抗原暴露量，让你对疫苗设计如何影响后续的免疫反应有一个基础的理解。[@problem_id:2808234]", "problem": "生发中心（GC）动态的一个核心决定因素是滤泡树突状细胞上呈递给B细胞受体的抗原的持续性。考虑两种递送等量抗原编码有效载荷的疫苗平台，一种是信使核糖核酸（mRNA），另一种是复制缺陷型病毒载体。假设以下基本原理和定义成立：\n\n1. 转导细胞内完整抗原编码模板的丰度以平台特定的一级速率常数 $k$ 呈指数衰减，该常数与模板半衰期 $t_{1/2}$ 的关系为 $k = \\frac{\\ln 2}{t_{1/2}}$。\n2. B细胞的瞬时抗原可用性（记为 $S(t)$）与剩余的完整模板成正比，因此对于 $t \\ge 0$，$S(t) = S_{0}\\exp(-k t)$，其中 $S_{0}$ 是初始抗原可用性。等量的抗原有效载荷意味着不同平台的 $S_{0}$ 相等。\n3. 在 $T$ 天的固定观察窗口内，早期GC动态受抗原限制，因此在 $[0,T]$ 上的积分抗原可用性（定义为 $\\mathrm{AUC}(T) \\equiv \\int_{0}^{T} S(t)\\, dt$）是GC持续时间和规模的一级预测指标。\n\n设mRNA平台的模板半衰期为 $t_{1/2}^{(\\mathrm{mRNA})} = $ $1$ 天，病毒载体平台的半衰期为 $t_{1/2}^{(\\mathrm{vector})} = $ $3$ 天。取观察窗口为 $T = $ $10$ 天。\n\n从上述原理出发，推导每个平台的 $\\mathrm{AUC}(T)$ 表达式，并计算比率\n$$\nR \\equiv \\frac{\\mathrm{AUC}^{(\\mathrm{vector})}(T)}{\\mathrm{AUC}^{(\\mathrm{mRNA})}(T)}.\n$$\n将 $R$ 报告为一个无量纲数，并四舍五入到四位有效数字。根据基本原理，此比率可作为在指定窗口内相对预期GC持续时间的代理指标；但是，您最终只需报告 $R$ 的数值作为最终答案。", "solution": "所提出的问题是定量生物学建模中的一个有效练习。该问题是良定的，具有科学依据，并包含获得唯一解所需的所有信息。我们将按要求进行推导。\n\n问题陈述，抗原可用性 $S(t)$ 遵循一级动力学呈指数衰减：\n$$\nS(t) = S_{0}\\exp(-k t)\n$$\n其中 $S_{0}$ 是时间 $t=0$ 时的初始抗原可用性，$k$ 是衰减速率常数。常数 $k$ 通过以下表达式与抗原编码模板的半衰期 $t_{1/2}$ 相关：\n$$\nk = \\frac{\\ln 2}{t_{1/2}}\n$$\n问题将在观察窗口 $[0, T]$ 内的积分抗原可用性定义为曲线下面积 $\\mathrm{AUC}(T)$：\n$$\n\\mathrm{AUC}(T) = \\int_{0}^{T} S(t) \\, dt\n$$\n首先，我们通过对函数 $S(t)$ 进行积分来推导 $\\mathrm{AUC}(T)$ 的通用表达式：\n$$\n\\mathrm{AUC}(T) = \\int_{0}^{T} S_{0}\\exp(-k t) \\, dt\n$$\n由于 $S_{0}$ 是一个常数，可以将其移到积分符号外：\n$$\n\\mathrm{AUC}(T) = S_{0} \\int_{0}^{T} \\exp(-k t) \\, dt\n$$\n指数函数的积分是：\n$$\n\\mathrm{AUC}(T) = S_{0} \\left[ -\\frac{1}{k} \\exp(-k t) \\right]_{0}^{T}\n$$\n在极限 $t=T$ 和 $t=0$ 处计算定积分：\n$$\n\\mathrm{AUC}(T) = S_{0} \\left( \\left(-\\frac{1}{k} \\exp(-k T)\\right) - \\left(-\\frac{1}{k} \\exp(-k \\cdot 0)\\right) \\right)\n$$\n$$\n\\mathrm{AUC}(T) = S_{0} \\left( -\\frac{1}{k} \\exp(-k T) + \\frac{1}{k} \\exp(0) \\right)\n$$\n由于 $\\exp(0) = 1$，我们可以简化表达式：\n$$\n\\mathrm{AUC}(T) = \\frac{S_{0}}{k} (1 - \\exp(-k T))\n$$\n这就是积分抗原可用性的通用表达式。\n\n接下来，我们必须使用给定的半衰期，计算mRNA和病毒载体这两种疫苗平台的特定衰减常数。\n对于mRNA平台，$t_{1/2}^{(\\mathrm{mRNA})} = 1$ 天。相应的衰减常数是：\n$$\nk_{\\mathrm{mRNA}} = \\frac{\\ln 2}{t_{1/2}^{(\\mathrm{mRNA})}} = \\frac{\\ln 2}{1} = \\ln 2 \\text{ day}^{-1}\n$$\n对于病毒载体平台，$t_{1/2}^{(\\mathrm{vector})} = 3$ 天。相应的衰减常数是：\n$$\nk_{\\mathrm{vector}} = \\frac{\\ln 2}{t_{1/2}^{(\\mathrm{vector})}} = \\frac{\\ln 2}{3} \\text{ day}^{-1}\n$$\n现在，我们可以使用观察窗口 $T=10$ 天，为每个平台写出 $\\mathrm{AUC}(T)$ 的具体表达式。问题陈述，两个平台的初始抗原可用性 $S_{0}$ 相同。\n\n对于mRNA平台：\n$$\n\\mathrm{AUC}^{(\\mathrm{mRNA})}(10) = \\frac{S_{0}}{k_{\\mathrm{mRNA}}} (1 - \\exp(-k_{\\mathrm{mRNA}} \\cdot 10)) = \\frac{S_{0}}{\\ln 2} (1 - \\exp(-10 \\ln 2))\n$$\n对于病毒载体平台：\n$$\n\\mathrm{AUC}^{(\\mathrm{vector})}(10) = \\frac{S_{0}}{k_{\\mathrm{vector}}} (1 - \\exp(-k_{\\mathrm{vector}} \\cdot 10)) = \\frac{S_{0}}{(\\ln 2)/3} (1 - \\exp\\left(-\\frac{10 \\ln 2}{3}\\right)) = \\frac{3 S_{0}}{\\ln 2} (1 - \\exp\\left(-\\frac{10}{3} \\ln 2\\right))\n$$\n问题要求计算比率 $R$：\n$$\nR = \\frac{\\mathrm{AUC}^{(\\mathrm{vector})}(10)}{\\mathrm{AUC}^{(\\mathrm{mRNA})}(10)}\n$$\n代入推导出的表达式：\n$$\nR = \\frac{\\frac{3 S_{0}}{\\ln 2} (1 - \\exp(-\\frac{10}{3} \\ln 2))}{\\frac{S_{0}}{\\ln 2} (1 - \\exp(-10 \\ln 2))}\n$$\n分子和分母中的项 $\\frac{S_{0}}{\\ln 2}$ 可以消去，从而简化 $R$ 的表达式：\n$$\nR = \\frac{3 (1 - \\exp(-\\frac{10}{3} \\ln 2))}{1 - \\exp(-10 \\ln 2)}\n$$\n为了计算该表达式，我们使用恒等式 $a \\exp(b \\ln c) = a c^b$。\n$$\n\\exp(-10 \\ln 2) = 2^{-10}\n$$\n$$\n\\exp\\left(-\\frac{10}{3} \\ln 2\\right) = 2^{-10/3}\n$$\n将这些代回 $R$ 的表达式中：\n$$\nR = \\frac{3 (1 - 2^{-10/3})}{1 - 2^{-10}}\n$$\n我们现在来计算数值。我们知道 $2^{10} = 1024$。\n$$\nR = \\frac{3 (1 - \\frac{1}{2^{10/3}})}{1 - \\frac{1}{1024}} = \\frac{3 (1 - (1024)^{-1/3})}{1023/1024}\n$$\n计算数值：\n$1 - (1024)^{-1/3} \\approx 1 - 0.09921252 \\approx 0.90078748$\n$1 - 1/1024 = 1023/1024 \\approx 0.99902344$\n因此，\n$$\nR \\approx \\frac{3 \\times 0.90078748}{0.99902344} \\approx \\frac{2.70236244}{0.99902344} \\approx 2.7050106\n$$\n按照要求将结果四舍五入到四位有效数字，得到 $2.705$。\n病毒载体模板的较长半衰期导致抗原存在更持久，与mRNA平台相比，在指定的10天窗口内产生了显著更大的积分抗原可用性。这个比率 $R$ 在该模型的框架内量化了这种相对优势。", "answer": "$$\\boxed{2.705}$$", "id": "2808234"}, {"introduction": "疫苗学的一个关键方面是预测保护力的持续时间。本实践将指导你使用一个双指数模型来模拟抗体滴度随时间的衰减，该模型反映了短寿命和长寿命抗体分泌细胞的独特动力学特性。通过将此模型与假设数据进行拟合，并求解滴度穿过保护阈值的时间，你将在定量免疫学的核心任务中获得动手实践经验。[@problem_id:2808251]", "problem": "疫苗诱导的抗体滴度轨迹通常可以用一个双室动力学模型很好地描述，该模型反映了短寿命和长寿命抗体分泌细胞的贡献。经验上，这会导致抗体滴度随时间呈双指数衰减。假设对于一个个体：在免疫后 $t \\in \\{1,3,6,12\\}$ 个月时测量其抗体滴度，且滴度为正标量。设 $A(t)$ 表示时间 $t$（单位：月）时的抗体滴度，并设 $A^{\\ast} > 0$ 为一个指定的保护性阈值。考虑以下双指数模型\n$$\nA(t) \\;=\\; A_1 \\, e^{-k_1 t} \\;+\\; A_2 \\, e^{-k_2 t},\n$$\n约束条件为 $A_1 > 0$、$A_2 > 0$、$k_1 > k_2 > 0$。生物学动机：初次和再次免疫应答会同时产生短寿命和长寿命的抗体分泌细胞；它们对循环抗体（例如，免疫球蛋白G (IgG)）的总贡献导致了抗体水平初始快速下降，随后缓慢衰减。基于此基本原理，如果 $A_1,A_2,k_1,k_2$ 均为正数且 $k_1 > k_2$，则可以推断出 $A(t)$ 在 $t \\ge 0$ 上是严格递减的，并且当 $t \\to \\infty$ 时趋近于 $0$。\n\n你的任务是编写一个程序，该程序对每个提供的测试用例执行以下操作：\n- 将上述模型拟合到四个数据点 $\\{(t_i, y_i)\\}_{i=1}^{4}$（其中 $t_i \\in \\{1,3,6,12\\}$ 个月，$y_i$ 为测量的滴度），方法是在满足约束条件 $A_1>0$, $A_2>0$, $k_1>k_2>0$ 的前提下，最小化残差平方和 $\\sum_{i=1}^{4} \\left(A(t_i) - y_i\\right)^2$。\n- 使用拟合得到的参数，计算满足 $A(t^{\\dagger}) \\le A^{\\ast}$ 的最小时间 $t^{\\dagger} \\ge 0$，并遵循以下精确约定：\n  - 如果 $A(0) \\le A^{\\ast}$，则设 $t^{\\dagger} = 0$。\n  - 如果对于所有 $t \\in [0, t_{\\max}]$（其中 $t_{\\max} = 240$ 个月），都有 $A(t) > A^{\\ast}$，则返回 $-1$ 以表示在 $t_{\\max}$ 时间范围内滴度未降至阈值以下。\n  - 否则，计算由单调性保证的方程 $A(t) - A^{\\ast} = 0$ 在 $[0, t_{\\max}]$ 上的唯一根，并返回该值。\n- 将 $t^{\\dagger}$ 以月为单位表示，并四舍五入到两位小数。哨兵值 $-1$ 应作为整数 $-1$ 返回。\n\n应直接使用而无需推导的基本出发点：源于双动力学室的双指数函数形式以及在 $A_1,A_2>0$ 和 $k_1>k_2>0$ 条件下的单调递减性；最小二乘估计的性质；以及一个在区间内变号的连续严格递减函数的根的存在性和唯一性。\n\n测试套件：\n- 案例 1 (典型的双相衰减): 在时间点 $[1,3,6,12]$ 个月测量的滴度为 $[800.0, 500.0, 300.0, 180.0]$；保护性阈值 $A^{\\ast} = 128.0$。\n- 案例 2 (接近阈值的中度衰减): 在时间点 $[1,3,6,12]$ 个月测量的滴度为 $[200.0, 170.0, 150.0, 140.0]$；保护性阈值 $A^{\\ast} = 128.0$。\n- 案例 3 (通过模型外推，在 t=0 时已低于阈值): 在时间点 $[1,3,6,12]$ 个月测量的滴度为 $[90.0, 85.0, 80.0, 75.0]$；保护性阈值 $A^{\\ast} = 100.0$。\n- 案例 4 (极慢衰减；在观测期内实际未降至阈值以下): 在时间点 $[1,3,6,12]$ 个月测量的滴度为 $[500.0, 498.0, 497.0, 496.0]$；保护性阈值 $A^{\\ast} = 0.1$。\n\n算法要求：\n- 使用非线性最小二乘法，在所述的正性和顺序约束下拟合 $A_1$, $A_2$, $k_1$, $k_2$。你可以通过变量变换来强制施加约束，以保证 $A_1>0$, $A_2>0$, $k_2>0$ 和 $k_1>k_2$。\n- 拟合后，通过在 $[0,t_{\\max}]$ 上进行区间限定和对 $A(t) - A^{\\ast}$ 进行一维求根来计算 $t^{\\dagger}$，并使用上述约定。\n\n最终输出格式：\n- 你的程序应产生单行输出，其中包含一个用方括号括起来的逗号分隔列表，结果的顺序与上述测试用例的顺序一致。例如，输出应类似于 $[x_1,x_2,x_3,x_4]$，其中 $x_i$ 要么是一个保留两位小数的小数（单位：月），要么是整数 $-1$。\n\n无需用户输入；将测试套件硬编码到程序中。所有时间单位均为月，所有滴度均为无单位的指数。确保所有时间相关的数值输出都按规定以月为单位，并四舍五入到两位小数，但哨兵值 $-1$ 必须打印为整数 $-1$。", "solution": "所提出的问题是定量生物建模领域的一个标准练习，特别是在药代动力学和免疫学领域。它要求应用基本的数值方法：非线性参数估计和求根。该问题是适定的，并有科学依据。我将提供一个系统性的解决方案。\n\n问题的核心是关于抗体滴度 $A(t)$（时间 $t$ 以月为单位）的双指数模型：\n$$\nA(t) \\;=\\; A_1 \\, e^{-k_1 t} \\;+\\; A_2 \\, e^{-k_2 t}\n$$\n该模型建立在存在两种具有不同寿命的抗体分泌细胞群的基础上，从而产生两种不同的衰减率。参数必须满足约束条件 $A_1 > 0$, $A_2 > 0$ 和 $k_1 > k_2 > 0$。这些约束具有物理意义：$A_1$ 和 $A_2$ 代表对抗体池的初始正贡献，而 $k_1$ 和 $k_2$ 是正的衰减常数。条件 $k_1 > k_2$ 区分了短寿命群体（衰减率较快的 $k_1$）和长寿命群体（衰减率较慢的 $k_2$）。正如问题所述，这些约束确保了抗体滴度 $A(t)$ 在 $t \\ge 0$ 上是一个严格单调递减函数。\n\n解决方案包括两个主要的计算步骤：\n\n**1. 通过非线性最小二乘法进行参数估计**\n\n第一个任务是通过将模型与提供的实验数据点 $\\{(t_i, y_i)\\}_{i=1}^{4}$ 进行拟合来确定四个模型参数 $\\theta = (A_1, A_2, k_1, k_2)$。我们通过最小化残差平方和（SSR）来实现这一点，这是回归分析中的一个标准目标函数：\n$$\nS(\\theta) = \\sum_{i=1}^{4} \\left( A(t_i; \\theta) - y_i \\right)^2\n$$\n由于参数具有正性和顺序要求，这是一个有约束的非线性优化问题。为了使用标准的无约束优化算法解决此问题，我们采用重参数化技术。我们引入一组新的无约束变量 $p = (p_1, p_2, p_3, p_4) \\in \\mathbb{R}^4$ 并如下定义原始参数：\n-   $A_1 = e^{p_1}$\n-   $A_2 = e^{p_2}$\n-   $k_2 = e^{p_3}$\n-   $k_1 = k_2 + e^{p_4} = e^{p_3} + e^{p_4}$\n\n这种变换保证了 $A_1 > 0$、$A_2 > 0$、$k_2 > 0$ 和 $k_1 > k_2$，满足所有约束。现在，优化问题转化为寻找最小化 SSR 的向量 $p$，这可以使用诸如 Nelder-Mead 单纯形法或类牛顿法（如 L-BFGS-B）等数值算法来解决，这些算法在 `scipy.optimize` 库中可用。需要一个合适的参数初始猜测值来引导优化器找到一个有意义的解。一个合理的起始点可以从观测数据中导出，例如，假设初始振幅与第一次测量值相关，并选择貌似合理的初始衰减常数。\n\n**2. 计算达到阈值的时间 $t^{\\dagger}$**\n\n一旦确定了最优参数 $(A_1, A_2, k_1, k_2)$，第二个任务就是找到抗体滴度降至或低于指定保护阈值 $A^{\\ast}$ 的最小时间 $t^{\\dagger} \\ge 0$。这等同于找到方程 $f(t) = A(t) - A^{\\ast} = 0$ 的根。该过程由问题陈述定义，并利用了 $A(t)$ 的单调性。\n\n算法流程如下：\n-   首先，评估在时间 $t=0$ 时的滴度。初始滴度是 $A(0) = A_1 + A_2$。如果 $A(0) \\le A^{\\ast}$，说明在免疫效果达到峰值时抗体水平就已经低于保护阈值。在这种情况下，我们设 $t^{\\dagger} = 0$。\n-   其次，如果 $A(0) > A^{\\ast}$，我们检查在指定的最大时间范围 $t_{\\max} = 240$ 个月时的滴度。我们计算 $A(t_{\\max}) = A_1 e^{-k_1 t_{\\max}} + A_2 e^{-k_2 t_{\\max}}$。如果 $A(t_{\\max}) > A^{\\ast}$，则滴度在整个240个月的周期内都保持在保护阈值之上。根据问题规范，我们用哨兵值 $t^{\\dagger} = -1$ 报告此结果。\n-   最后，如果前两个条件都不满足，那么我们有 $A(0) > A^{\\ast}$ 和 $A(t_{\\max}) \\le A^{\\ast}$。由于 $A(t)$ 是连续且严格递减的，根据介值定理，在区间 $(0, t_{\\max}]$ 内保证存在一个唯一的根 $t^{\\dagger}$。可以使用鲁棒的一维求根算法（例如 SciPy 中的 Brent-Dekker 方法 `brentq`）来高精度地数值定位此根，该方法能在给定的区间 $[0, t_{\\max}]$ 内高效地找到根。\n\n最终的 $t^{\\dagger}$ 值随后按要求四舍五入到两位小数，除非它是哨兵值 $-1$。至此，算法完成。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import minimize, brentq\n\ndef solve():\n    \"\"\"\n    Solves the problem of fitting a bi-exponential decay model to antibody titer data\n    and calculating the time until the titer drops below a protective threshold.\n    \"\"\"\n    test_cases = [\n        # Case 1: typical two-phase decay\n        {'titers': [800.0, 500.0, 300.0, 180.0], 'a_star': 128.0},\n        # Case 2: moderate decay near threshold\n        {'titers': [200.0, 170.0, 150.0, 140.0], 'a_star': 128.0},\n        # Case 3: already below threshold at t=0 by model extrapolation\n        {'titers': [90.0, 85.0, 80.0, 75.0], 'a_star': 100.0},\n        # Case 4: extremely slow decay; effectively no crossing within horizon\n        {'titers': [500.0, 498.0, 497.0, 496.0], 'a_star': 0.1},\n    ]\n\n    t_data = np.array([1, 3, 6, 12])\n    t_max = 240.0\n    results = []\n\n    for case in test_cases:\n        y_data = np.array(case['titers'])\n        a_star = case['a_star']\n\n        # Objective function for minimization, using transformed parameters p\n        # p[0] -> log(A1), p[1] -> log(A2), p[2] -> log(k2), p[3] -> log(k1 - k2)\n        def objective(p):\n            # Transformation to ensure constraints A1>0, A2>0, k1>k2>0\n            A1 = np.exp(p[0])\n            A2 = np.exp(p[1])\n            k2 = np.exp(p[2])\n            k1 = k2 + np.exp(p[3])\n            \n            # Model prediction\n            y_pred = A1 * np.exp(-k1 * t_data) + A2 * np.exp(-k2 * t_data)\n            \n            # Sum of squared residuals\n            return np.sum((y_pred - y_data) ** 2)\n\n        # Initial guess for transformed parameters p\n        # A1, A2 ~ y_data[0]/2; k1 ~ 1.0; k2 ~ 0.1\n        # The specific values are heuristic but robust for typical decay curves.\n        p_initial = np.array([\n            np.log(y_data[0] / 2.0),  # log(A1)\n            np.log(y_data[0] / 2.0),  # log(A2)\n            np.log(0.1),             # log(k2)\n            np.log(1.0 - 0.1)        # log(k1 - k2)\n        ])\n\n        # Perform the nonlinear least-squares optimization\n        opt_result = minimize(objective, p_initial, method='Nelder-Mead', options={'maxiter': 2000})\n        p_opt = opt_result.x\n\n        # Convert optimized transformed parameters back to physical parameters\n        A1_opt = np.exp(p_opt[0])\n        A2_opt = np.exp(p_opt[1])\n        k2_opt = np.exp(p_opt[2])\n        k1_opt = k2_opt + np.exp(p_opt[3])\n\n        # Define the fitted model function A(t)\n        def A_func(t):\n            return A1_opt * np.exp(-k1_opt * t) + A2_opt * np.exp(-k2_opt * t)\n\n        # 1. Check if titer is below threshold at t=0\n        if A_func(0) <= a_star:\n            t_dagger = 0.0\n        # 2. Check if titer remains above threshold for the entire horizon\n        elif A_func(t_max) > a_star:\n            t_dagger = -1\n        # 3. Find the unique root t_dagger in [0, t_max]\n        else:\n            # Define the function whose root we want to find: A(t) - A* = 0\n            def root_func(t):\n                return A_func(t) - a_star\n            \n            # Use Brent's method to find the root in the bracket [0, t_max]\n            t_dagger = brentq(root_func, 0, t_max)\n        \n        results.append(t_dagger)\n\n    # Format the results according to the problem specification\n    formatted_results = []\n    for res in results:\n        if res == -1:\n            formatted_results.append(\"-1\")\n        else:\n            formatted_results.append(f\"{res:.2f}\")\n\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2808251"}, {"introduction": "除了个体保护，疫苗的最终目标是在群体层面实现群体保护。本实践通过推导有效再生数（$R_{\\mathrm{eff}}$）来探讨疫苗接种的流行病学影响，该再生数综合了疫苗在预防感染和阻止传播方面的效力。计算 $R_{\\mathrm{eff}}$ 让你能够定量评估一个给定的疫苗接种策略是否足以在社区中阻止病原体的传播。[@problem_id:2808235]", "problem": "一个群体面临一种新出现的呼吸道病毒，其基本再生数 $R_0$ 定义为在一个完全易感、未接种疫苗且成比例混合的人群中，下一代算子的主特征值（谱半径）。疫苗通过记忆B细胞和T细胞的再次应答诱导免疫记忆，从而降低感染易感性（通过预防感染效力 $E_s$ 来量化，使得接种者的易感性乘以 $1 - E_s$），并通过更快的病毒清除和更低的病毒载量在突破性感染后减少继续传播（通过预防传播效力 $E_t$ 来量化，使得已感染的接种者的传染性乘以 $1 - E_t$）。疫苗覆盖率为 $v$（接种比例），并假设接触是同质的，接种者与未接种者之间成比例混合。在所考虑的时间尺度内，免疫力不发生减弱，并且疫苗对易感性和传染性的影响在每次传播事件中以乘法方式起作用。\n\n从基本再生数 $R_0$ 和有效再生数（定义为疫苗分层人群中下一代算子的谱半径）的基本定义出发，并仅使用上述假设，推导出有效再生数 $R_{\\mathrm{eff}}$ 关于 $R_0$、$v$、$E_s$ 和 $E_t$ 的解析表达式。然后，用 $R_0 = 3$，$E_s = 0.7$，$E_t = 0.5$ 和 $v = 0.6$ 计算 $R_{\\mathrm{eff}}$ 的值。最后，根据您计算出的 $R_{\\mathrm{eff}}$，判断在这些条件下是否达到了群体保护（定义为 $R_{\\mathrm{eff}} < 1$）。将 $R_{\\mathrm{eff}}$ 的值表示为无单位的小数；无需四舍五入。", "solution": "我们从基本再生数 $R_0$ 的定义开始，即在一个完全易感、未接种疫苗且成比例混合的人群中，下一代算子 $\\mathcal{K}$ 的主特征值（谱半径）。在一个分为接种和未接种个体的分层人群中，我们考虑一个 $2 \\times 2$ 的下一代矩阵 $K$，其元素 $K_{h,g}$ 是在成比例混合条件下，一个来自来源组 $g \\in \\{\\mathrm{V}, \\mathrm{U}\\}$ 的单一感染个体在其整个感染期内，在接收组 $h \\in \\{\\mathrm{V}, \\mathrm{U}\\}$ 中引起的新感染的期望数量。此处，$\\mathrm{V}$ 代表接种者，$\\mathrm{U}$ 代表未接种者。\n\n在以下假设下：\n- 接种者的易感性相对于基线乘以 $1 - E_s$，未接种者的易感性为 $1$；\n- 接种来源者的传染性相对于基线乘以 $1 - E_t$，未接种来源者的传染性为 $1$；\n- 接触是同质且成比例的，因此一个随机接触对象是接种者的概率为 $v$，是未接种者的概率为 $1 - v$，\n\n我们可以将每个 $K_{h,g}$ 分解为基线再生潜能 $R_0$ 乘以三个独立因子：(i) 一个随机接触者属于接收组 $h$ 的概率，(ii) 组 $h$ 的易感性因子，以及 (iii) 来源组 $g$ 的传染性因子。这得到\n$$\nK_{h,g} \\;=\\; R_0 \\times p_h \\times f_s(h) \\times f_t(g),\n$$\n其中 $p_{\\mathrm{V}} = v$，$p_{\\mathrm{U}} = 1 - v$，$f_s(\\mathrm{V}) = 1 - E_s$，$f_s(\\mathrm{U}) = 1$，$f_t(\\mathrm{V}) = 1 - E_t$，且 $f_t(\\mathrm{U}) = 1$。\n\n因此，矩阵 $K$ 可以写成一个外积：\n$$\nK \\;=\\; \\bigl(R_0 \\, \\mathbf{u}\\bigr)\\, \\mathbf{w}^{\\top},\n$$\n其中\n$$\n\\mathbf{u} \\;=\\; \\begin{pmatrix} p_{\\mathrm{V}} f_s(\\mathrm{V}) \\\\ p_{\\mathrm{U}} f_s(\\mathrm{U}) \\end{pmatrix}\n\\;=\\; \\begin{pmatrix} v (1 - E_s) \\\\ 1 - v \\end{pmatrix},\n\\qquad\n\\mathbf{w} \\;=\\; \\begin{pmatrix} f_t(\\mathrm{V}) \\\\ f_t(\\mathrm{U}) \\end{pmatrix}\n\\;=\\; \\begin{pmatrix} 1 - E_t \\\\ 1 \\end{pmatrix}.\n$$\n对于一个外积矩阵 $K = (R_0 \\mathbf{u}) \\mathbf{w}^{\\top}$，其非零特征值（因此也是谱半径）是\n$$\nR_{\\mathrm{eff}} \\;=\\; \\rho(K) \\;=\\; R_0 \\, \\mathbf{w}^{\\top}\\mathbf{u} \\;=\\; R_0 \\left[ f_t(\\mathrm{V}) \\, p_{\\mathrm{V}} f_s(\\mathrm{V}) \\;+\\; f_t(\\mathrm{U}) \\, p_{\\mathrm{U}} f_s(\\mathrm{U}) \\right].\n$$\n代入这些因子的表达式可得\n$$\nR_{\\mathrm{eff}} \\;=\\; R_0 \\left[ (1 - E_t)\\, v (1 - E_s) \\;+\\; 1 \\cdot (1 - v) \\cdot 1 \\right]\n\\;=\\; R_0 \\left[ (1 - v) \\;+\\; v (1 - E_s)(1 - E_t) \\right].\n$$\n\n我们现在用 $R_0 = 3$，$E_s = 0.7$，$E_t = 0.5$ 和 $v = 0.6$ 来计算这个表达式的值。首先计算方括号中的项：\n$$\n(1 - v) \\;=\\; 1 - 0.6 \\;=\\; 0.4,\n$$\n$$\n(1 - E_s)(1 - E_t) \\;=\\; (1 - 0.7)(1 - 0.5) \\;=\\; 0.3 \\times 0.5 \\;=\\; 0.15,\n$$\n$$\nv (1 - E_s)(1 - E_t) \\;=\\; 0.6 \\times 0.15 \\;=\\; 0.09,\n$$\n所以\n$$\n(1 - v) + v (1 - E_s)(1 - E_t) \\;=\\; 0.4 + 0.09 \\;=\\; 0.49.\n$$\n因此，\n$$\nR_{\\mathrm{eff}} \\;=\\; R_0 \\times 0.49 \\;=\\; 3 \\times 0.49 \\;=\\; 1.47.\n$$\n\n为了评估群体保护，我们将 $R_{\\mathrm{eff}}$ 与 $1$ 进行比较。因为 $1.47 > 1$，在这些条件下未达到群体保护（定义为 $R_{\\mathrm{eff}} < 1$）；持续传播仍然可能发生。所需的数值输出是 $R_{\\mathrm{eff}}$ 作为一个无单位的小数的值，我们已精确计算出其值为 $1.47$。", "answer": "$$\\boxed{1.47}$$", "id": "2808235"}]}