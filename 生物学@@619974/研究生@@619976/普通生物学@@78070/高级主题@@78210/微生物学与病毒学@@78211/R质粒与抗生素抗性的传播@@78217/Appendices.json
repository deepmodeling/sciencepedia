{"hands_on_practices": [{"introduction": "要理解 R 质粒如何传播，我们首先必须构建一个描述其背后种群动态的数学模型。本练习将指导您从基本原理出发，建立一个包含细菌生长、质粒转移（接合）和质粒丢失的区室模型。通过推導基本再生数 $R_0$，您将亲手掌握决定质粒能否成功入侵并存续于细菌种群中的关键阈值 [@problem_id:2831708]，这是流行病学的一项基础技能。", "problem": "在一个混合均匀的细菌种群中，考虑对应于质粒流行病学的三种仓室：供体 $D$（携带接合抗性质粒并能转移它的细胞）、受体 $R$（无质粒细胞）和接合子 $T$（通过接合新获得质粒并自身也能转移它的细胞）。假设以下基本生物学原理成立：\n- 逻辑斯谛种群调控：每种细胞类型都构成总种群 $N$ 的一部分，在承载能力 $K$ 处受到逻辑斯谛限制。无质粒细胞的单位细胞出生率为 $b$，而携带质粒的细胞（包括 $D$ 和 $T$）有适应性成本 $c$，因此其单位细胞出生率为 $b(1-c)$，其中 $0 \\le c < 1$。所有细胞具有相同的单位细胞自然死亡率 $m$。\n- 质量作用接合：供体-受体和接合子-受体的相遇以质量作用速率发生，速率常数分别为 $\\beta_D$ 和 $\\beta_T$，每次事件将一个 $R$ 细胞转化为一个 $T$ 细胞。\n- 质粒分离丢失：携带质粒的细胞能以单位细胞速率 $\\sigma_D$（对于 $D$）和 $\\sigma_T$（对于 $T$）丢失质粒，转化为 $R$ 细胞。\n- 无其他转化发生：$D$ 和 $T$ 不通过接合相互转化；所有接合都将 $R$ 转化为 $T$。\n\n仅从上述原理以及质量作用动力学和逻辑斯谛增长的定义出发，完成以下任务：\n1. 推导一个描述 $D(t)$、$R(t)$ 和 $T(t)$ 动力学的最小闭合常微分方程（ODE）系统，并根据所述原理清楚地阐明每一项的理由。\n2. 确定当 $D=0$ 和 $T=0$ 时的无质粒平衡点（通常称为无病平衡点（DFE）），并用 $b$、$m$ 和 $K$ 表示 $R^{\\ast}$，包括其生物学可行性的条件。\n3. 使用仓室感染模型的下一代矩阵构建方法，定义受感染仓室的向量，将 DFE 处的线性化系统分解为 $\\dot{x} = F x - V x$ 的形式，其中 $F$ 包含对应于新质粒感染出现的项，而 $V$ 包含受感染仓室间的所有其他转移和损失项，并推导基本再生数 $R_0$（基本再生数）为 $F V^{-1}$ 的谱半径。\n4. 将您的 $R_0$ 最终答案表示为仅包含 $b$、$c$、$m$、$\\sigma_D$、$\\sigma_T$、$\\beta_D$、$\\beta_T$ 和 $K$ 的单一闭式表达式。不要代入数值。您的最终答案必须是单一解析表达式。不要包含任何单位。不要四舍五入。", "solution": "该问题陈述具有科学依据、问题适定、客观且内容自洽。它描述了数学生物学中的一个标准仓室模型，所要求的任务基于成熟的分析技术。该问题是有效的。\n\n按要求分四部分进行解答。\n\n第一部分：常微分方程（ODE）系统的推导\n\n该系统模拟了三个仓室的种群动力学：供体（$D$）、受体（$R$）和接合子（$T$）。总种群为 $N(t) = D(t) + R(t) + T(t)$。动力学受逻辑斯谛增长、自然死亡、质粒接合和质粒分离的支配。我们通过将所有增加或减少各种群数量的过程的速率相加，来构建每个仓室的速率方程。\n\n1.  供体 $D$ 的变化率，$\\frac{dD}{dt}$：\n    -   出生：携带质粒的细胞，包括供体，其单位细胞出生率为 $b(1-c)$，并受到承载能力为 $K$ 的逻辑斯谛限制。增长项为 $b(1-c) D \\left(1 - \\frac{N}{K}\\right)$。\n    -   死亡：所有细胞的单位细胞自然死亡率为 $m$。损失项为 $-m D$。\n    -   质粒分离：供体以单位细胞速率 $\\sigma_D$ 丢失质粒，成为受体。损失项为 $-\\sigma_D D$。\n    -   接合：根据问题描述，供体将受体转化为接合子。在此过程中，它们既不产生也不损失，并且没有新的供体通过接合形成。\n    综合这些项，得到 $D$ 的 ODE 为：\n    $$ \\frac{dD}{dt} = b(1-c) D \\left(1 - \\frac{D+R+T}{K}\\right) - m D - \\sigma_D D $$\n\n2.  受体 $R$ 的变化率，$\\frac{dR}{dt}$：\n    -   出生：无质粒的受体细胞的单位细胞出生率为 $b$，并受到逻辑斯谛限制。增长项为 $b R \\left(1 - \\frac{N}{K}\\right)$。\n    -   死亡：因自然死亡造成的损失项为 $-m R$。\n    -   因分离而增加：当供体和接合子丢失质粒时，受体被形成，速率分别为 $\\sigma_D D$ 和 $\\sigma_T T$。增加项为 $+\\sigma_D D + \\sigma_T T$。\n    -   因接合而损失：受体与供体或接合子接触后会转化为接合子。这些事件以质量作用速率 $\\beta_D D R$ 和 $\\beta_T T R$ 发生。损失项为 $-\\beta_D D R - \\beta_T T R$。\n    综合这些项，得到 $R$ 的 ODE 为：\n    $$ \\frac{dR}{dt} = b R \\left(1 - \\frac{D+R+T}{K}\\right) - m R + \\sigma_D D + \\sigma_T T - (\\beta_D D + \\beta_T T)R $$\n\n3.  接合子 $T$ 的变化率，$\\frac{dT}{dt}$：\n    -   出生：作为携带质粒的细胞，接合子的单位细胞出生率为 $b(1-c)$，并受到逻辑斯谛限制。增长项为 $b(1-c) T \\left(1 - \\frac{N}{K}\\right)$。\n    -   死亡：因自然死亡造成的损失项为 $-m T$。\n    -   质粒分离：接合子以单位细胞速率 $\\sigma_T$ 丢失质粒，成为受体。损失项为 $-\\sigma_T T$。\n    -   因接合而增加：通过与供体和接合子进行接合，接合子由受体产生。增加项为 $+\\beta_D D R + \\beta_T T R$。\n    综合这些项，得到 $T$ 的 ODE 为：\n    $$ \\frac{dT}{dt} = b(1-c) T \\left(1 - \\frac{D+R+T}{K}\\right) - m T - \\sigma_T T + (\\beta_D D + \\beta_T T)R $$\n\n完整的闭合 ODE 系统是：\n$$ \\frac{dD}{dt} = D \\left[ b(1-c) \\left(1 - \\frac{D+R+T}{K}\\right) - m - \\sigma_D \\right] $$\n$$ \\frac{dR}{dt} = R \\left[ b \\left(1 - \\frac{D+R+T}{K}\\right) - m \\right] + \\sigma_D D + \\sigma_T T - (\\beta_D D + \\beta_T T)R $$\n$$ \\frac{dT}{dt} = T \\left[ b(1-c) \\left(1 - \\frac{D+R+T}{K}\\right) - m - \\sigma_T \\right] + (\\beta_D D + \\beta_T T)R $$\n\n第二部分：无质粒平衡点（DFE）\n\n无质粒平衡点（PFE），或称无病平衡点（DFE），是指种群中不存在质粒的稳态。我们通过设置 $D=0$、$T=0$ 和 $\\frac{dD}{dt}=\\frac{dR}{dt}=\\frac{dT}{dt}=0$ 来找到这个状态。\n当 $D=0$ 和 $T=0$ 时，$D$ 和 $T$ 的方程不言自明地得到满足。$R$ 的方程变为：\n$$ \\frac{dR}{dt} = b R \\left(1 - \\frac{R}{K}\\right) - m R = 0 $$\n将 $R$ 因子提出，我们得到：\n$$ R \\left[ b \\left(1 - \\frac{R}{K}\\right) - m \\right] = 0 $$\n这个方程有两个关于 $R$ 的解：平凡解 $R=0$（种群完全灭绝）和通过将括号中的项设为零得到的非平凡解：\n$$ b \\left(1 - \\frac{R}{K}\\right) - m = 0 $$\n$$ 1 - \\frac{R}{K} = \\frac{m}{b} $$\n$$ \\frac{R}{K} = 1 - \\frac{m}{b} = \\frac{b-m}{b} $$\n求解 $R$ 得到平衡状态下受体种群的大小，记为 $R^{\\ast}$：\n$$ R^{\\ast} = K \\left(1 - \\frac{m}{b}\\right) = K \\frac{b-m}{b} $$\n为使该平衡点在生物学上是可行的，种群规模必须为正，即 $R^{\\ast} > 0$。这要求 $b-m > 0$，或 $b > m$。无质粒种群要能存续，其单位细胞出生率必须超过单位细胞死亡率。\n因此，DFE 由状态 $(D, R, T) = (0, R^{\\ast}, 0) = \\left(0, K\\frac{b-m}{b}, 0\\right)$ 给出。\n\n第三部分：下一代矩阵的构建\n\n我们使用下一代矩阵（NGM）方法来求解基本再生数 $R_0$。受感染的仓室是那些携带质粒的仓室，因此受感染仓室的状态向量是 $x = (D, T)^T$。\n受感染仓室的动力学可以写成 $\\dot{x} = \\mathcal{F}(x) - \\mathcal{V}(x)$，其中 $\\mathcal{F}$ 是新感染出现的速率，而 $\\mathcal{V}$ 是所有其他转移（生长、死亡、恢复）的速率。\n\n对应于新携带质粒细胞（新感染）产生的项是来自接合的项。由于所有接合事件都产生接合子，新感染只出现在 $T$ 仓室中。\n$$ \\mathcal{F} = \\begin{pmatrix} \\mathcal{F}_D \\\\ \\mathcal{F}_T \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ (\\beta_D D + \\beta_T T)R \\end{pmatrix} $$\n剩余的项构成了转移部分 $\\mathcal{V}$：\n$$ \\mathcal{V} = \\begin{pmatrix} \\mathcal{V}_D \\\\ \\mathcal{V}_T \\end{pmatrix} = \\begin{pmatrix} -D \\left[ b(1-c) \\left(1 - \\frac{D+R+T}{K}\\right) - m - \\sigma_D \\right] \\\\ -T \\left[ b(1-c) \\left(1 - \\frac{D+R+T}{K}\\right) - m - \\sigma_T \\right] \\end{pmatrix} $$\n矩阵 $F$ 和 $V$ 是 $\\mathcal{F}$ 和 $\\mathcal{V}$ 关于受感染变量 $(D, T)$ 的雅可比矩阵，在 DFE $(0, R^{\\ast}, 0)$ 处求值。\n\n矩阵 $F$ 是：\n$$ F = \\left. \\begin{pmatrix} \\frac{\\partial \\mathcal{F}_D}{\\partial D} & \\frac{\\partial \\mathcal{F}_D}{\\partial T} \\\\ \\frac{\\partial \\mathcal{F}_T}{\\partial D} & \\frac{\\partial \\mathcal{F}_T}{\\partial T} \\end{pmatrix} \\right|_{(0,R^{\\ast},0)} = \\left. \\begin{pmatrix} 0 & 0 \\\\ \\beta_D R & \\beta_T R \\end{pmatrix} \\right|_{(0,R^{\\ast},0)} = \\begin{pmatrix} 0 & 0 \\\\ \\beta_D R^{\\ast} & \\beta_T R^{\\ast} \\end{pmatrix} $$\n矩阵 $V$ 是：\n$$ V = \\left. \\begin{pmatrix} \\frac{\\partial \\mathcal{V}_D}{\\partial D} & \\frac{\\partial \\mathcal{V}_D}{\\partial T} \\\\ \\frac{\\partial \\mathcal{V}_T}{\\partial D} & \\frac{\\partial \\mathcal{V}_T}{\\partial T} \\end{pmatrix} \\right|_{(0,R^{\\ast},0)} $$\n我们来计算 $\\mathcal{V}$ 的偏导数：\n$\\frac{\\partial \\mathcal{V}_D}{\\partial D} = -\\left[ b(1-c) \\left(1-\\frac{D+R+T}{K}\\right) - m - \\sigma_D \\right] - D \\left[ b(1-c)\\left(-\\frac{1}{K}\\right) \\right]$。\n在 DFE 处：$\\frac{\\partial \\mathcal{V}_D}{\\partial D} = -\\left[ b(1-c) \\left(1-\\frac{R^{\\ast}}{K}\\right) - m - \\sigma_D \\right]$。由于 $1-\\frac{R^{\\ast}}{K} = \\frac{m}{b}$，这可以简化为 $-\\left[ b(1-c)\\frac{m}{b} - m - \\sigma_D \\right] = -[m(1-c) - m - \\sigma_D] = -[-mc - \\sigma_D] = \\sigma_D + mc$。\n$\\frac{\\partial \\mathcal{V}_D}{\\partial T} = -D \\left[ b(1-c)\\left(-\\frac{1}{K}\\right) \\right]$。在 DFE 处，$D=0$，所以 $\\frac{\\partial \\mathcal{V}_D}{\\partial T} = 0$。\n根据对称性，$\\mathcal{V}_T$ 的导数是类似的：\n$\\frac{\\partial \\mathcal{V}_T}{\\partial T} = \\sigma_T + mc$。\n$\\frac{\\partial \\mathcal{V}_T}{\\partial D} = 0$。\n所以矩阵 $V$ 是：\n$$ V = \\begin{pmatrix} \\sigma_D + mc & 0 \\\\ 0 & \\sigma_T + mc \\end{pmatrix} $$\n\n第四部分：基本再生数 $R_0$ 的推导\n\n$R_0$ 是下一代矩阵 $K_L = FV^{-1}$ 的谱半径。首先，我们求 $V$ 的逆矩阵：\n$$ V^{-1} = \\begin{pmatrix} \\frac{1}{\\sigma_D + mc} & 0 \\\\ 0 & \\frac{1}{\\sigma_T + mc} \\end{pmatrix} $$\n只要 $V$ 的对角线元素非零，这个逆矩阵就是良定的。由于稳定的 DFE 要求 $m>0$，且 $c, \\sigma_D, \\sigma_T \\ge 0$，因此分母为正。\n\n现在，我们计算 $K_L$：\n$$ K_L = FV^{-1} = \\begin{pmatrix} 0 & 0 \\\\ \\beta_D R^{\\ast} & \\beta_T R^{\\ast} \\end{pmatrix} \\begin{pmatrix} \\frac{1}{\\sigma_D + mc} & 0 \\\\ 0 & \\frac{1}{\\sigma_T + mc} \\end{pmatrix} $$\n$$ K_L = \\begin{pmatrix} 0 & 0 \\\\ \\frac{\\beta_D R^{\\ast}}{\\sigma_D + mc} & \\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc} \\end{pmatrix} $$\n$R_0$ 是 $K_L$ 的最大绝对值特征值。特征值 $\\lambda$ 是特征方程 $\\det(K_L - \\lambda I)=0$ 的根：\n$$ \\det \\begin{pmatrix} -\\lambda & 0 \\\\ \\frac{\\beta_D R^{\\ast}}{\\sigma_D + mc} & \\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc} - \\lambda \\end{pmatrix} = (-\\lambda)\\left(\\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc} - \\lambda\\right) = 0 $$\n特征值为 $\\lambda_1=0$ 和 $\\lambda_2 = \\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc}$。由于所有参数都是非负的，谱半径为 $\\rho(K_L) = \\lambda_2$。\n$$ R_0 = \\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc} $$\n这一结果表明，质粒的侵染能力仅由接合子（$T$）的繁殖适应性决定，因为它们是唯一能够自我补充的感染类别。\n\n最后，我们将 $R^{\\ast} = K\\frac{b-m}{b}$ 的表达式代入，得到 $R_0$ 的最终形式：\n$$ R_0 = \\frac{\\beta_T \\left(K\\frac{b-m}{b}\\right)}{\\sigma_T + mc} = \\frac{\\beta_T K (b-m)}{b(\\sigma_T + mc)} $$", "answer": "$$\\boxed{\\frac{\\beta_T K (b-m)}{b(\\sigma_T + mc)}}$$", "id": "2831708"}, {"introduction": "细菌种群往往是多种质粒竞争宿主的生态环境。本实践通过一个包含两种不相容性质粒的模型，来探讨竞争排斥这一生态学原理。质粒的不相容性迫使它们争夺同一资源——无质粒的细胞。通过分析该系统的平衡点，您将看到接合率和分离丢失率的差异如何决定最终的胜者，从而阐明为何并非所有质粒都能共存 [@problem_id:2831738]。这个练习突显了基础生态学理论在微生物系统中的应用。", "problem": "抗性（R）质粒是一种自我复制的染色体外元件，它可以通过接合作用进行水平基因转移（HGT）而传播，并可能在细胞分裂过程中因分离失败而丢失。考虑一个充分混合的大型无性繁殖细菌种群，其中循环着 $A$ 型和 $B$ 型两种相互不相容的R质粒。不相容性意味着单个细胞不能同时携带两种质粒。设 $x(t)$、$y(t)$ 和 $z(t)$ 分别表示在时间 $t$ 时携带A质粒、B质粒或不含质粒的细胞的频率，且满足 $x(t)+y(t)+z(t)=1$。假设存在以下过程和参数：\n- 质量作用接合：$A$ 型供体以速率 $\\beta_A x z$ 将不含质粒的受体转化为 $A$ 型携带者，$B$ 型供体以速率 $\\beta_B y z$ 将不含质粒的受体转化为 $B$ 型携带者。\n- 分离丢失：A质粒以人均速率 $s_A$ 从携带者中丢失，使其转变为不含质粒的细胞；B质粒以人均速率 $s_B$ 从其携带者中丢失，使其转变为不含质粒的细胞。\n- 在生长或死亡方面没有其他差异；在所考虑的时间尺度上，种群大小恒定，因此动力学可以用频率来描述。\n\n仅从总频率守恒和质量作用接触动力学出发，首先为 $(x(t),y(t),z(t))$ 构建一个与这些假设一致的封闭常微分方程（ODE）系统。然后，使用参数值 $\\beta_A = 0.20$，$s_A = 0.020$，$\\beta_B = 0.20$ 和 $s_B = 0.030$（所有速率单位为“每单位时间”），解析地确定从任何满足 $x(0)>0$、$y(0)>0$ 和 $z(0)>0$ 的初始条件出发所趋近的生物学上允许的平衡点。报告满足 $x^{*}+y^{*}+z^{*}=1$ 和 $x^{*},y^{*},z^{*}\\in[0,1]$ 的唯一平衡频率 $(x^{*},y^{*},z^{*})$。\n\n使用 LaTeX 的 pmatrix 环境，将您的最终答案表示为一个行矩阵 $\\begin{pmatrix}x^{*} & y^{*} & z^{*}\\end{pmatrix}$，矩阵元素使用小数形式。不要包含单位，也不要四舍五入。", "solution": "所给出的问题具有科学依据，提法明确，且客观。它描述了两个实体（质粒）为争夺单一限制性资源（不含质粒的宿主细胞）而竞争的经典情景，并且可以形式化为一个常微分方程（ODE）系统。我们将着手进行推导和分析。\n\n首先，我们为携带A质粒的细胞频率 $x(t)$、携带B质粒的细胞频率 $y(t)$ 和不含质粒的细胞频率 $z(t)$ 构建ODE系统。该动力学由每个亚群的增益和损失之间的平衡所决定。\n\n$A$质粒携带者频率的变化率 $\\frac{dx}{dt}$ 是接合作用带来的增益速率减去分离丢失造成的损失速率。$A$型供体以速率 $\\beta_A x z$ 将不含质粒的细胞转化为$A$质粒携带者。$A$质粒以人均速率 $s_A$ 从其携带者中丢失，导致总损失速率为 $s_A x$。因此，$x$ 的方程为：\n$$ \\frac{dx}{dt} = \\beta_A x z - s_A x $$\n\n类似地，$B$质粒携带者频率的变化率 $\\frac{dy}{dt}$ 是接合作用带来的增益速率减去分离丢失造成的损失速率。$B$型供体以速率 $\\beta_B y z$ 将不含质粒的细胞转化为$B$质粒携带者。$B$质粒以人均速率 $s_B$ 从其携带者中丢失，总损失速率为 $s_B y$。$y$ 的方程为：\n$$ \\frac{dy}{dt} = \\beta_B y z - s_B y $$\n\n不含质粒细胞的频率 $z(t)$ 因 $A$ 质粒携带者和 $B$ 质粒携带者的分离丢失而增加，总增加速率为 $s_A x + s_B y$。频率 $z(t)$ 因不含质粒的细胞通过接合作用转化为 $A$ 质粒携带者或 $B$ 质粒携带者而减少，总减少速率为 $\\beta_A x z + \\beta_B y z$。因此，$z$ 的方程为：\n$$ \\frac{dz}{dt} = (s_A x + s_B y) - (\\beta_A x + \\beta_B y)z $$\n\n完整的ODE系统为：\n$$ \\frac{dx}{dt} = x(\\beta_A z - s_A) $$\n$$ \\frac{dy}{dt} = y(\\beta_B z - s_B) $$\n$$ \\frac{dz}{dt} = s_A x + s_B y - z(\\beta_A x + \\beta_B y) $$\n\n我们必须验证该系统与约束条件 $x(t)+y(t)+z(t)=1$ 一致。将各导数相加可得：\n$$ \\frac{d}{dt}(x+y+z) = (\\beta_A x z - s_A x) + (\\beta_B y z - s_B y) + (s_A x + s_B y - \\beta_A x z - \\beta_B y z) = 0 $$\n由于总频率是守恒的，我们可以使用约束条件 $z = 1 - x - y$ 在 $(x, y)$ 的二维状态空间上分析该动力学。\n\n为了找到平衡点 $(x^{*}, y^{*}, z^{*})$，我们将时间导数设为零：\n1. $x^{*}(\\beta_A z^{*} - s_A) = 0$\n2. $y^{*}(\\beta_B z^{*} - s_B) = 0$\n\n从这些方程中，我们可以确定几个潜在的平衡点：\na) 无质粒平衡点：$x^{*} = 0$，$y^{*} = 0$，这意味着 $z^{*} = 1$。\nb) 仅含A的平衡点：$y^{*} = 0$ 且 $x^{*} > 0$。为此，方程(1)要求 $\\beta_A z^{*} - s_A = 0$，因此 $z^{*} = \\frac{s_A}{\\beta_A}$。根据守恒定律，$x^{*} = 1 - z^{*} = 1 - \\frac{s_A}{\\beta_A}$。该平衡点仅在 $x^{*} > 0$（即 $\\beta_A > s_A$）时具有生物学意义。\nc) 仅含B的平衡点：$x^{*} = 0$ 且 $y^{*} > 0$。为此，方程(2)要求 $\\beta_B z^{*} - s_B = 0$，因此 $z^{*} = \\frac{s_B}{\\beta_B}$。根据守恒定律，$y^{*} = 1 - z^{*} = 1 - \\frac{s_B}{\\beta_B}$。该平衡点仅在 $y^{*} > 0$（即 $\\beta_B > s_B$）时有效。\nd) 共存平衡点：$x^{*} > 0$ 且 $y^{*} > 0$。这要求方程(1)和(2)中的两个括号项同时为零：\n$$ \\beta_A z^{*} - s_A = 0 \\implies z^{*} = \\frac{s_A}{\\beta_A} $$\n$$ \\beta_B z^{*} - s_B = 0 \\implies z^{*} = \\frac{s_B}{\\beta_B} $$\n仅当 $\\frac{s_A}{\\beta_A} = \\frac{s_B}{\\beta_B}$ 时，共存平衡点才可能存在。\n\n现在，我们代入给定的参数值：$\\beta_A = 0.20$，$s_A = 0.020$，$\\beta_B = 0.20$ 和 $s_B = 0.030$。\n我们来计算比率 $\\frac{s}{\\beta}$，它代表了每种质粒要持续存在所需的易感（不含质粒）细胞的最低频率。\n对于质粒A： $\\frac{s_A}{\\beta_A} = \\frac{0.020}{0.20} = 0.1$。\n对于质粒B： $\\frac{s_B}{\\beta_B} = \\frac{0.030}{0.20} = 0.15$。\n\n由于 $\\frac{s_A}{\\beta_A} \\neq \\frac{s_B}{\\beta_B}$，共存平衡点(d)不存在。这是一个竞争排斥的例子，即能够在限制性资源（不含质粒的细胞）密度较低时持续存在的质粒将会淘汰另一种质粒。质粒A需要 $z^{*} = 0.1$，而质粒B需要 $z^{*} = 0.15$。当质粒A将不含质粒细胞的频率降低到 $z=0.1$ 时，由于 $0.1 < 0.15$，这个水平对于质粒B来说太低而无法维持自身。因此，质粒B将被驱向灭绝。\n\n问题要求找到从任何满足 $x(0)>0$、$y(0)>0$ 和 $z(0)>0$ 的初始条件出发所趋近的平衡点。这对应于状态空间单纯形内部的全局稳定平衡点。我们必须分析单态平衡点的稳定性。\n\n考虑仅含A的平衡点 $(x_A^{*}, y_A^{*}, z_A^{*})$。我们计算其坐标：\n$z_A^{*} = \\frac{s_A}{\\beta_A} = 0.1$。\n$y_A^{*} = 0$。\n$x_A^{*} = 1 - z_A^{*} = 1 - 0.1 = 0.9$。\n所以该平衡点为 $(0.9, 0, 0.1)$。\n为检验其对B质粒入侵的稳定性，我们在该平衡点评估一个小的B种群的增长率：$\\frac{dy}{dt} = y(\\beta_B z_A^{*} - s_B)$。符号由 $\\beta_B z_A^{*} - s_B = (0.20)(0.1) - 0.030 = 0.02 - 0.03 = -0.01$ 决定。由于该值为负，$\\frac{dy}{dt} < 0$，因此B质粒无法入侵。仅含A的平衡点是稳定的。\n\n为完整起见，考虑仅含B的平衡点 $(x_B^{*}, y_B^{*}, z_B^{*})$：\n$z_B^{*} = \\frac{s_B}{\\beta_B} = 0.15$。\n$x_B^{*} = 0$。\n$y_B^{*} = 1 - z_B^{*} = 1 - 0.15 = 0.85$。\n所以该平衡点为 $(0, 0.85, 0.15)$。\n为检验其对A质粒入侵的稳定性，我们评估 $\\frac{dx}{dt} = x(\\beta_A z_B^{*} - s_A)$。符号由 $\\beta_A z_B^{*} - s_A = (0.20)(0.15) - 0.020 = 0.03 - 0.02 = 0.01$ 决定。由于该值为正，$\\frac{dx}{dt} > 0$，因此A质粒可以入侵。仅含B的平衡点是不稳定的。\n\n无质粒平衡点 $(0, 0, 1)$ 也是不稳定的，因为 $\\beta_A > s_A$ 和 $\\beta_B > s_B$ 都成立，意味着两种质粒都能入侵一个完全易感的种群。\n\n因此，唯一稳定的平衡点是仅含A的平衡点。任何从 $x(0)>0$ 和 $y(0)>0$ 开始的轨迹都将收敛于此点。平衡频率为 $(x^{*}, y^{*}, z^{*}) = (0.9, 0, 0.1)$。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n0.9 & 0 & 0.1\n\\end{pmatrix}\n}\n$$", "id": "2831738"}, {"introduction": "减缓抗生素耐药性的传播是一项重大的公共卫生挑战，而数学模型是评估不同干预策略的重要工具。这项计算练习模拟了在不同抗生素管理策略（限制使用、周期性使用、混合使用）下，耐药菌和敏感菌的生态与演化动态。通过编程实现并比较这些情景，您将锻炼数值模拟的实践技能，并探索在耐药性管理中不同治疗策略之间复杂且往往非直观的权衡 [@problem_id:2831761]。这种连接理论模型与政策评估的桥梁是现代计算流行病学的核心。", "problem": "通过将生态增长与水平基因转移和质粒丢失的演化过程明确耦合，模拟抗生素管理策略对耐药性 (R) 质粒流行率的影响。考虑一个充分混合环境中的两个细菌亚群：密度为 $s(t)$ 的无质粒细胞和密度为 $r(t)$ 的携带质粒的细胞。假设其增长为密度依赖性，环境承载力为单位1，基线人均内在增长因子为 $g$，质粒携带成本为 $c \\in [0,1)$，它会将携带质粒细胞的内在增长乘以一个因子 $(1-c)$，质量作用接合以速率 $\\beta$ 将无质粒细胞转化为携带质粒的细胞，以及质粒分离丢失以速率 $\\sigma$ 将携带质粒的细胞转化为无质粒细胞。设 $A(t) \\in [0,1]$ 表示随时间变化的抗生素强度，无质粒细胞和携带质粒细胞的人均抗生素诱导死亡系数分别为 $u$ 和 $v$，其中 $u \\ge v \\ge 0$。此耦合的生态-演化动力学由以下方程组定义：\n$$\n\\frac{ds}{dt} \\;=\\; s\\,\\big(g\\,(1 - (s+r))\\big)\\;-\\;u\\,A(t)\\,s\\;-\\;\\beta\\,s\\,r\\;+\\;\\sigma\\,r,\n$$\n$$\n\\frac{dr}{dt} \\;=\\; r\\,\\big(g\\,(1 - c)\\,(1 - (s+r))\\big)\\;-\\;v\\,A(t)\\,r\\;+\\;\\beta\\,s\\,r\\;-\\;\\sigma\\,r.\n$$\n将瞬时质粒流行率定义为以下比例：\n$$\nx(t) \\;=\\; \\frac{r(t)}{s(t) + r(t)}.\n$$\n对于给定的时间范围 $T$ 和后续窗口长度 $W$（其中 $0 &lt; W \\le T$），将长期平均质粒流行率定义为：\n$$\n\\bar{x} \\;=\\; \\frac{1}{W}\\int_{T-W}^{T} x(t)\\, dt.\n$$\n抗生素管理策略被编码为特定的 $A(t)$：\n- 停药 (Restriction)：对所有 $t$，$A(t) = 0$。\n- 周期性用药 (Cycling)：设周期 $P > 0$ 且占空比 $q \\in [0,1]$。则\n$$\nA(t) \\;=\\; \\begin{cases}\n1, & \\text{若 } t \\bmod P \\in [0, qP),\\\\\n0, & \\text{其他情况。}\n\\end{cases}\n$$\n- 混合用药 (Mixing)：在所有时间，环境中始终有恒定比例 $p \\in [0,1]$ 的部分受到抗生素的有效作用，因此对所有 $t$，$A(t) = p$。\n\n您的任务是，对于每个测试用例，根据给定的参数计算哪种策略能最小化长期平均质粒流行率 $\\bar{x}$。当出现平局时，根据以下映射选择最小的索引来打破平局：停药 (restriction) $\\to 0$，周期性用药 (cycling) $\\to 1$，混合用药 (mixing) $\\to 2$。具体来说，如果两种或更多策略的 $\\bar{x}$ 值与最小值之差的绝对值在 $\\varepsilon = 10^{-6}$ 以内，则返回它们当中最小的索引。\n\n实现要求：\n- 使用上述微分方程和所提供的参数值。\n- 在时间 $t=0$ 时，使用给定的密度 $s(0)$ 和 $r(0)$ 初始化系统。\n- 通过在区间 $[T-W,\\,T]$ 上进行数值时间积分来计算 $\\bar{x}$。所有量均为无量纲；无需物理单位。\n- 最终输出必须是一行，包含一个整数列表，每个测试用例对应一个整数，按下方给出的顺序排列，并用方括号括起，以逗号分隔，例如：$[0,1,2]$。\n\n测试套件（每个用例提供 $(g, c, \\beta, \\sigma, u, v, p, P, q, s(0), r(0), T, W)$）：\n- 用例 $1$：$(1.0,\\;0.04,\\;0.30,\\;0.05,\\;0.70,\\;0.10,\\;0.40,\\;40.0,\\;0.50,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$。\n- 用例 $2$（边界情况：无接合）：$(1.0,\\;0.02,\\;0.00,\\;0.10,\\;0.80,\\;0.05,\\;0.50,\\;20.0,\\;0.50,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$。\n- 用例 $3$（边缘情况：高质粒成本）：$(1.0,\\;0.20,\\;0.25,\\;0.15,\\;0.60,\\;0.10,\\;0.30,\\;30.0,\\;0.50,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$。\n- 用例 $4$（边缘情况：强水平转移）：$(1.0,\\;0.05,\\;0.80,\\;0.02,\\;0.50,\\;0.05,\\;0.20,\\;50.0,\\;0.30,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$。\n- 用例 $5$（边缘情况：快速周期，平均强度与混合策略相同）：$(1.0,\\;0.03,\\;0.30,\\;0.05,\\;0.70,\\;0.10,\\;0.50,\\;5.0,\\;0.50,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$。\n\n您的程序应生成单行输出，其中包含一个以逗号分隔的整数列表，并用方括号括起（例如 $[0,1,2,0,1]$），列表中的每个整数是对应于上述顺序的测试用例所选策略的索引。", "solution": "该问题陈述已经过验证，被认为是数学生物学领域一个合理且适定的问题。它具有科学依据，内部逻辑一致，并且可通过编程求解。\n\n该问题要求分析一个耦合的非线性常微分方程组 (ODEs)，该方程组模拟了无质粒、抗生素敏感细菌 $s(t)$ 和携带质粒、抗生素耐药细菌 $r(t)$ 的种群动态。该模型是 Lotka-Volterra 竞争框架的一个具体实例，并增加了与抗生素耐药性相关的关键演化过程：通过接合的水平基因转移（速率 $\\beta$）、质粒分离丢失（速率 $\\sigma$）以及与质粒携带相关的适应性成本（成本 $c$）。\n\n控制方程为：\n$$\n\\frac{ds}{dt} \\;=\\; s\\,\\big(g\\,(1 - (s+r))\\big)\\;-\\;u\\,A(t)\\,s\\;-\\;\\beta\\,s\\,r\\;+\\;\\sigma\\,r,\n$$\n$$\n\\frac{dr}{dt} \\;=\\; r\\,\\big(g\\,(1 - c)\\,(1 - (s+r))\\big)\\;-\\;v\\,A(t)\\,r\\;+\\;\\beta\\,s\\,r\\;-\\;\\sigma\\,r.\n$$\n此处，总种群 $N(t) = s(t) + r(t)$ 经历密度依赖性的增长限制，其环境承载力归一化为1。项 $A(t)$ 代表随时间变化的抗生素治疗强度，它以不同的死亡系数 $u$ 和 $v$（$u \\ge v$）影响这两个亚群。\n\n目标是确定三种不同的抗生素管理策略——停药 (Restriction) ($A(t)=0$)、周期性用药 (Cycling)（周期性应用）或混合用药 (Mixing)（以部分强度持续应用）——中哪一种在最小化长期平均质粒流行率方面最为有效，其定义为：\n$$\n\\bar{x} \\;=\\; \\frac{1}{W}\\int_{T-W}^{T} x(t)\\, dt, \\quad \\text{其中} \\quad x(t) = \\frac{r(t)}{s(t)+r(t)}.\n$$\n该非线性系统的解析解难以求得，因此需要采用数值方法。求解方法如下：\n\n1.  **数值积分**：对于每个测试用例和三种（$3$）指定策略中的每一种，都对常微分方程组进行数值求解。SciPy 库中的 `solve_ivp` 函数是一个合适的工具，它提供了一种稳健的自适应步长龙格-库塔方法（例如`RK45`），用于对初值问题进行积分。\n\n2.  **策略的实现**：函数 $A(t)$ 根据每种策略的定义来实现：\n    -   **停药 (Restriction)（索引 $0$）**：对所有 $t$，$A(t) = 0$。\n    -   **周期性用药 (Cycling)（索引 $1$）**：$A(t)$ 是一个周期为 $P$、占空比为 $q$ 的周期性阶跃函数。具体而言，如果 $t \\pmod P \\in [0, qP)$，则 $A(t)=1$，否则 $A(t)=0$。\n    -   **混合用药 (Mixing)（索引 $2$）**：对所有 $t$，$A(t) = p$，为一个恒定值。\n\n3.  **平均流行率 $\\bar{x}$ 的计算**：系统从初始状态 $(s(0), r(0))$ 在时间范围 $[0, T]$ 上进行积分。为精确计算 $\\bar{x}$ 的积分，使用了 `solve_ivp` 的 `dense_output=True` 选项。这提供了L解的连续表示，随后可以在覆盖平均窗口 $[T-W, T]$ 的一组密集点（例如 $2001$ 个点）上进行求值。在这些时间点上，计算瞬时流行率 $x(t)$。然后使用标准的数值求积法则（如梯形法则，可通过 `scipy.integrate.trapezoid` 使用）计算积分 $\\int_{T-W}^{T} x(t)\\, dt$。将所得结果除以窗口长度 $W$ 得到 $\\bar{x}$。为防止在种群崩溃这一罕见事件中计算 $x(t)$ 时出现除以零的情况，细胞密度 $s(t)$ 和 $r(t)$ 被处理为非负值，并且如果总种群低于一个小的数值阈值，则流行率定义为 $0$。\n\n4.  **最优策略选择**：在为三种策略中的每一种计算出 $\\bar{x}$ 后，对这些值进行比较。找出产生最小 $\\bar{x}$ 的策略。在出现近似平局的情况下，即多种策略产生的 $\\bar{x}$ 值与最小值之差的绝对容差在 $\\varepsilon = 10^{-6}$ 以内，则根据问题规定，选择索引最小的策略（$0$ 代表停药，$1$ 代表周期性用药，$2$ 代表混合用药）。\n\n该程序被系统地应用于所提供的五个（$5$）测试用例中的每一个，从而为每种情景下的最优策略生成一个明确的索引。最终输出是这些索引的列表。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp, trapezoid\n\ndef solve():\n    \"\"\"\n    Solves the antibiotic stewardship optimization problem by simulating a system\n    of ODEs for different policies and identifying the one that minimizes\n    the long-time average plasmid prevalence.\n    \"\"\"\n    # Test suite from the problem statement.\n    # Each tuple contains: (g, c, beta, sigma, u, v, p, P, q, s0, r0, T, W)\n    test_cases = [\n        (1.0, 0.04, 0.30, 0.05, 0.70, 0.10, 0.40, 40.0, 0.50, 0.99, 0.01, 400.0, 100.0),\n        (1.0, 0.02, 0.00, 0.10, 0.80, 0.05, 0.50, 20.0, 0.50, 0.99, 0.01, 400.0, 100.0),\n        (1.0, 0.20, 0.25, 0.15, 0.60, 0.10, 0.30, 30.0, 0.50, 0.99, 0.01, 400.0, 100.0),\n        (1.0, 0.05, 0.80, 0.02, 0.50, 0.05, 0.20, 50.0, 0.30, 0.99, 0.01, 400.0, 100.0),\n        (1.0, 0.03, 0.30, 0.05, 0.70, 0.10, 0.50, 5.0, 0.50, 0.99, 0.01, 400.0, 100.0),\n    ]\n\n    final_results = []\n\n    # Define the right-hand side of the ODE system.\n    def system_dynamics(t, y, g, c, beta, sigma, u, v, policy_idx, policy_params):\n        s, r = y\n        \n        # Ensure populations are non-negative, a safeguard against numerical artifacts.\n        s = max(s, 0.0)\n        r = max(r, 0.0)\n\n        p, P, q = policy_params\n        \n        A_t = 0.0\n        if policy_idx == 1:  # Cycling policy\n            if (t % P)  (q * P):\n                A_t = 1.0\n        elif policy_idx == 2:  # Mixing policy\n            A_t = p\n        # For policy_idx 0 (Restriction), A_t remains 0.0.\n\n        total_pop = s + r\n        \n        # Density-dependent growth factor.\n        growth_factor = 1.0 - total_pop\n        \n        dsdt = s * (g * growth_factor) - u * A_t * s - beta * s * r + sigma * r\n        drdt = r * (g * (1.0 - c) * growth_factor) - v * A_t * r + beta * s * r - sigma * r\n        \n        return [dsdt, drdt]\n\n    for case in test_cases:\n        g, c, beta, sigma, u, v, p, P, q, s0, r0, T, W = case\n        y0 = [s0, r0]\n        t_span = [0.0, T]\n        \n        policy_results_x_bar = []\n        \n        # Iterate through policies: 0: Restriction, 1: Cycling, 2: Mixing\n        for policy_idx in range(3):\n            policy_params = (p, P, q)\n            \n            # Solve the ODE system with dense output to allow for fine-grained\n            # evaluation in the final window.\n            sol = solve_ivp(\n                system_dynamics,\n                t_span,\n                y0,\n                args=(g, c, beta, sigma, u, v, policy_idx, policy_params),\n                dense_output=True,\n                method='RK45',\n                rtol=1e-6, \n                atol=1e-9\n            )\n            \n            # Create a fine grid of time points over the averaging window.\n            t_window = np.linspace(T - W, T, 2001)\n            s_window, r_window = sol.sol(t_window)\n            \n            total_pop_window = s_window + r_window\n            \n            # Calculate instantaneous prevalence x(t).\n            # Use np.divide for safe division, yielding 0 if denominator is near zero.\n            x_window = np.divide(r_window, total_pop_window, \n                                 out=np.zeros_like(r_window), \n                                 where=total_pop_window > 1e-12)\n            \n            # Numerically integrate x(t) over the window using the trapezoidal rule.\n            integral_x = trapezoid(x_window, t_window)\n            x_bar = integral_x / W\n            \n            policy_results_x_bar.append(x_bar)\n            \n        # Determine the best policy according to the problem's criteria.\n        min_x_bar = min(policy_results_x_bar)\n        epsilon = 1e-6\n        \n        best_policy_idx = -1\n        # Find the first policy index (0, 1, or 2) that is within epsilon\n        # of the minimum value. This handles the tie-breaking rule.\n        for i, x_val in enumerate(policy_results_x_bar):\n            if abs(x_val - min_x_bar) = epsilon:\n                best_policy_idx = i\n                break\n        \n        final_results.append(best_policy_idx)\n        \n    # Print the final result list in the specified format.\n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n```", "id": "2831761"}]}