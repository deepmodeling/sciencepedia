{"hands_on_practices": [{"introduction": "本节的第一个练习将带您回到群体遗传学的核心。我们将探讨最经典的平衡选择模型之一：超显性（heterozygote advantage）。通过推导杂合子具有最高适应度时的等位基因频率平衡点，您将亲身体验选择如何在一个种群中主动维持遗传多态性，而不是始终将某个等位基因推向固定。这个练习是理解适应性景观和为何有害等位基因（例如导致镰状细胞性贫血的等位基因）能在某些环境下得以保留的关键。[@problem_id:2791273]", "problem": "考虑一个世代不重叠、突变和迁移可忽略不计、且具有密度非依赖性生存能力选择的大型随机交配二倍体种群。假设一个单位点上的两个等位基因为 $A$ 和 $a$，选择前等位基因 $A$ 的频率为 $p$，$a$ 的频率为 $q = 1 - p$。假设选择前满足 Hardy–Weinberg 平衡比例。基因型的相对生存能力（适合度）由 $W_{AA} = 1 - s$, $W_{Aa} = 1$ 和 $W_{aa} = 1 - t$ 给出，其中 $s > 0$ 和 $t > 0$ 是选择系数，描述了杂合子具有最高生存能力的杂合子优势（超显性）情景。\n\n仅使用随机交配种群中生存能力选择的标准定义和 Hardy–Weinberg 比例，推导在选择作用下等位基因频率保持不变的内部稳定平衡等位基因频率 $p^{*}$ ($0 < p^{*} < 1$) 的精确闭合形式表达式。最终答案需表示为包含 $s$ 和 $t$ 的符号表达式。无需进行数值代入。最终答案必须是无单位的单个解析表达式。", "solution": "所述问题具有科学依据，表述清晰且客观。它代表了群体遗传学中平衡选择的一个基本案例。所有必要信息均已提供，且前提条件一致。因此，我们可以进行形式化推导。\n\n问题描述了一个在单位点上具有两个等位基因 $A$ 和 $a$ 的二倍体种群。在生存能力选择之前，假设种群处于 Hardy–Weinberg 平衡状态。三种基因型 $AA$、$Aa$ 和 $aa$ 的频率分别为 $p^2$、$2pq$ 和 $q^2$，其中 $p$ 是等位基因 $A$ 的频率，$q = 1-p$ 是等位基因 $a$ 的频率。\n\n相对生存能力（适合度）为 $W_{AA} = 1 - s$，$W_{Aa} = 1$ 和 $W_{aa} = 1 - t$，其中 $s > 0$ 且 $t > 0$。将这些适合度值与选择前的基因型频率相乘，以确定每种基因型对下一代的贡献比例。\n\n选择后各种基因型的频率与以下各项成正比：\n- 对于 $AA$：$p^2 W_{AA} = p^2 (1 - s)$\n- 对于 $Aa$：$2pq W_{Aa} = 2pq$\n- 对于 $aa$：$q^2 W_{aa} = q^2 (1 - t)$\n\n这些比例频率的总和给出了种群的平均适合度，记为 $\\bar{W}$。它作为归一化因子，确保下一代频率之和为 $1$。\n$$ \\bar{W} = p^2 W_{AA} + 2pq W_{Aa} + q^2 W_{aa} $$\n$$ \\bar{W} = p^2(1-s) + 2pq + q^2(1-t) $$\n\n下一代中等位基因 $A$ 的频率（记为 $p'$）是选择和归一化后 $AA$ 基因型频率加上 $Aa$ 基因型频率的一半。\n$$ p' = \\frac{p^2 W_{AA} + \\frac{1}{2}(2pq W_{Aa})}{\\bar{W}} = \\frac{p^2 W_{AA} + pq W_{Aa}}{\\bar{W}} $$\n代入给定的适合度：\n$$ p' = \\frac{p^2(1-s) + pq(1)}{\\bar{W}} = \\frac{p(p(1-s) + q)}{\\bar{W}} $$\n\n当等位基因频率代代之间不发生变化时，即 $\\Delta p = p' - p = 0$，存在平衡。这一条件在平凡平衡点 $p = 0$ 和 $p = 1$ 处满足，或者在内部平衡点 $p^{*}$ ($0 < p^{*} < 1$) 处满足，此时变化方程的非平凡部分为零。\n$$ \\Delta p = p' - p = \\frac{p(p(1-s) + q)}{\\bar{W}} - p = \\frac{p(p(1-s) + q) - p\\bar{W}}{\\bar{W}} $$\n对于内部平衡点 $p^*$，我们要求分子为零（同时 $p^* \\neq 0$）：\n$$ p^*(p^*(1-s) + q^*) - p^*\\bar{W} = 0 $$\n$$ p^*(1-s) + q^* - \\bar{W} = 0 $$\n代入 $\\bar{W}$ 的表达式：\n$$ p(1-s) + q - [p^2(1-s) + 2pq + q^2(1-t)] = 0 $$\n使用恒等式 $q = 1-p$：\n$$ p(1-s) + (1-p) - [p^2(1-s) + 2p(1-p) + (1-p)^2(1-t)] = 0 $$\n$$ p - ps + 1 - p - [p^2 - p^2s + 2p - 2p^2 + (1-2p+p^2)(1-t)] = 0 $$\n$$ 1 - ps - [ -p^2 - p^2s + 2p + 1 - 2p + p^2 - t(1-p)^2 ] = 0 $$\n$$ 1 - ps - [ 1 - p^2s - t(1-p)^2 ] = 0 $$\n$$ 1 - ps - 1 + p^2s + t(1-p)^2 = 0 $$\n$$ -ps + p^2s + t(1-p)^2 = 0 $$\n由于我们寻求 $p^* \\in (0, 1)$，我们可以除以 $p$ 和 $1-p=q$。\n$$ p(1-p)s(-1) + tp(1-p)^2 / p = 0 $$\n方程为 $s p(p-1) + t (1-p)^2 = 0$。这可简化为 $-spq + tq^2 = 0$。由于 $q \\neq 0$，我们可以除以 $q$。\n$$ -sp + tq = 0 $$\n这是一条更直接的路径。在平衡频率 $p^*$ 处，我们有：\n$$ -sp^* + tq^* = 0 $$\n代入 $q^* = 1 - p^*$：\n$$ -sp^* + t(1-p^*) = 0 $$\n$$ -sp^* + t - tp^* = 0 $$\n$$ t = sp^* + tp^* $$\n$$ t = p^*(s+t) $$\n解出平衡等位基因频率 $p^*$：\n$$ p^{*} = \\frac{t}{s+t} $$\n问题指定了杂合子优势（超显性），其中 $s > 0$ 且 $t > 0$。这确保了 $s+t > t$ 和 $s+t > s$。因此，$0 < p^* < 1$，证实了这是一个内部平衡点。这个平衡点也是全局稳定的，因为除了从 $0$ 或 $1$ 的起始频率出发，选择总是会驱动等位基因频率趋向于这个值。", "answer": "$$\\boxed{\\frac{t}{s+t}}$$", "id": "2791273"}, {"introduction": "在掌握了单基因座模型后，我们将视野拓宽到由多个基因和环境共同决定的复杂数量性状，如体型或产量。本练习将引导您运用进化生物学中一个极其强大的预测工具——育种家方程（breeder's equation，$R = h^2S$）。通过从基本原理出发推导并应用该方程，您将能够量化选择强度（selection differential, $S$）和狭义遗传力（narrow-sense heritability, $h^2$）如何共同决定下一代的演化响应（response to selection, $R$）。这项实践对于理解人工选择和自然选择如何塑造我们周围世界的表型多样性至关重要。[@problem_id:2791233]", "problem": "一个大的、随机交配（泛交配）的一年生植物群体表现出一个数量性状 $z$（种子质量），以毫克（mg）为单位测量。假设以下生物学条件成立：加性基因作用，无显性或上位性；无基因型-环境互作；无传递偏倚；且除了基因介导之外，亲子代之间不存在由环境诱导的相似性。选择在繁殖前作用于成年表型，且繁殖成功率与绝对适合度成正比。加性遗传方差为 $V_{A} = 0.5$ mg$^{2}$，表型方差为 $V_{P} = 1.0$ mg$^{2}$，亲代的表型选择差为 $S = 1.2$ mg。当前种群的平均种子质量为 $\\bar{z}_{0} = 23.17$ mg。\n\n从数量遗传学和进化理论的基本原理出发，包括狭义遗传力 $h^{2}$（加性遗传方差与表型方差之比）的定义，以及表型选择差 $S$（被选择亲本的平均表型与整个种群平均表型之差）的定义，推导在所述假设下子代均值对选择的预期反应。然后使用所提供的值来计算预测的下一代平均种子质量。\n\n将最终答案以毫克为单位表示为一个数字。将您的答案四舍五入到四位有效数字。", "solution": "该问题提出了一个数量遗传学中的标准情景，并且是有效的。它是自洽的，科学上基于进化理论的原理，并且是适定的。所有必要的数据和假设都已提供，以推导出一个唯一的、有意义的解。\n\n目标是预测经过一轮选择后，下一代的平均种子质量，记为 $\\bar{z}_{1}$。起点是进化数量遗传学的基本原理。\n\n种群平均表型从一代到下一代的变化被定义为选择反应（response to selection），$R$。它是子代平均表型 $\\bar{z}_{1}$ 与选择前亲代平均表型 $\\bar{z}_{0}$ 之间的差值。\n$$R = \\bar{z}_{1} - \\bar{z}_{0}$$\n\n育种家方程（breeder's equation）提供了选择反应 $R$、狭义遗传力 $h^{2}$ 和选择差 $S$ 之间的预测关系。\n$$R = h^{2}S$$\n问题中所述的假设——加性基因作用、无显性或上位性、无基因型-环境互作——正是这种线性关系预期成立的精确条件。\n\n该问题要求我们从该方程各组成部分的定义出发。\n狭义遗传力 $h^{2}$ 定义为总表型方差 $V_{P}$ 中可归因于基因加性效应的部分所占的比例，该部分由加性遗传方差 $V_{A}$ 表示。\n$$h^{2} = \\frac{V_{A}}{V_{P}}$$\n这个量度量了个体间的表型差异能够可靠地遗传给其后代的程度，并且它是一个种群响应选择潜力的关键决定因素。\n\n选择差 $S$ 定义为被选择成为亲本的个体的平均表型 $\\bar{z}_{\\text{sel}}$ 与选择前整个亲代种群的平均表型 $\\bar{z}_{0}$ 之间的差值。\n$$S = \\bar{z}_{\\text{sel}} - \\bar{z}_{0}$$\n它量化了在一个世代内作用于表型的定向选择的强度。\n\n通过将 $R$ 和 $h^{2}$ 的定义代入育种家方程，我们得到了下一代预期均值的综合表达式。\n首先，我们用基本方差和选择差来表示选择反应 $R$：\n$$R = \\left(\\frac{V_{A}}{V_{P}}\\right)S$$\n然后，我们使用 $R$ 的定义来求解下一代的均值 $\\bar{z}_{1}$：\n$$\\bar{z}_{1} - \\bar{z}_{0} = \\left(\\frac{V_{A}}{V_{P}}\\right)S$$\n$$\\bar{z}_{1} = \\bar{z}_{0} + \\left(\\frac{V_{A}}{V_{P}}\\right)S$$\n这是从指定的基本原理推导出的最终解析表达式。\n\n现在，我们将问题陈述中提供的数值代入此方程：\n- 当前种群均值: $\\bar{z}_{0} = 23.17$ mg\n- 加性遗传方差: $V_{A} = 0.5$ mg$^{2}$\n- 表型方差: $V_{P} = 1.0$ mg$^{2}$\n- 选择差: $S = 1.2$ mg\n\n首先，我们计算狭义遗传力 $h^{2}$：\n$$h^{2} = \\frac{0.5 \\text{ mg}^{2}}{1.0 \\text{ mg}^{2}} = 0.5$$\n遗传力是一个无量纲的量。\n\n接下来，我们计算选择反应 $R$：\n$$R = h^{2}S = (0.5) \\times (1.2 \\text{ mg}) = 0.6 \\text{ mg}$$\n\n最后，我们计算下一代预测的平均种子质量 $\\bar{z}_{1}$：\n$$\\bar{z}_{1} = \\bar{z}_{0} + R = 23.17 \\text{ mg} + 0.6 \\text{ mg} = 23.77 \\text{ mg}$$\n\n问题要求最终答案四舍五入到四位有效数字。计算出的值 $23.77$ 已经恰好包含四位有效数字。因此，无需进一步四舍五入。", "answer": "$$\\boxed{23.77}$$", "id": "2791233"}, {"introduction": "理论模型为我们提供了理解演化过程的框架，但现代演化生物学的核心任务之一是从真实的观测数据中推断这些过程的参数。最后一个练习将带您进入统计群体遗传学的领域，通过处理模拟的时间序列数据来估算选择系数（selection coefficient, $s$）。您将学习如何将等位基因频率变化的确定性模型（逻辑斯蒂增长）与二项式采样的随机性相结合，构建一个广义线性模型（GLM）来获得 $s$ 的最大似然估计。这项计算实践直接模拟了演化生物学家在分析实验演化或古DNA数据时所采用的方法，是连接理论与实证研究的关键桥梁。[@problem_id:2791293]", "problem": "给定从一个单一位点（locus）、双等位基因、在离散非重叠世代中演化的群体中，独立采样得到的等位基因计数时间序列。该群体处于单倍体生存力选择下，相对适应度为常数。设衍生等位基因的相对适应度为 $1+s$，祖先等位基因的相对适应度为 $1$，其中 $s > -1$。假设没有突变、没有迁移，且环境恒定。在采样世代 $t_i$，$n_i$ 条染色体的样本中观测到 $x_i$ 个衍生等位基因。在 Wright-Fisher 框架下，以群体等位基因频率 $p_{t_i}$ 为条件，观测模型为二项分布：$x_i \\sim \\mathrm{Binomial}(n_i, p_{t_i})$。在选择作用下，$p_{t}$ 的确定性期望可由相对适应度的定义和标准的离散世代频率更新公式得出。您的任务是：\n\n- 从一个未知的初始条件出发，推导出一个可估计的、参数呈线性（经过适当变换后）的表达式，以表示由恒定相对适应度 $1+s$（每代）所蕴含的确定性轨迹。\n- 将 $\\{p_{t_i}\\}$ 视为由您推导的表达式所规定的均值函数，为观测数据 $\\{(t_i, x_i, n_i)\\}_{i=1}^m$ 构建二项对数似然函数。\n- 对此似然函数进行关于参数的最大化，然后将拟合的参数映射回去，以获得选择系数 $s$ 的最大似然估计。\n\n科学真实性约束：您必须通过似然函数（等效于通过正则连接的广义线性模型公式）来考虑每个时间点的二项抽样方差。您必须确保预测的均值对所有 $i$ 满足 $0 < p_{t_i} < 1$。\n\n数值约束和输出规范：\n- 实现一种算法，保证能为所提供的数据集生成有限的估计值（例如，通过对二项似然使用正则 logistic 连接和带有安全保障的迭代重加权最小二乘程序，以保持 $p_{t_i}$ 严格在 $(0,1)$ 范围内）。\n- 对于下面的每个数据集，计算最大似然估计 $\\hat{s}$，结果为实数。报告每个 $\\hat{s}$，四舍五入到恰好 $6$ 位小数。\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的、以逗号分隔的结果列表，例如 $[0.123456,-0.000001,0.500000]$。\n\n测试套件（时间单位为世代；无物理单位需要报告）：\n- 情况 $1$（一般标准路径，多个时间点）：$t = [0,1,2,3]$, $n = [100,110,125,118]$, $x = [20,30,45,54]$。\n- 情况 $2$（中性选择的边界条件）：$t = [0,1,2,3]$, $n = [70,140,91,77]$, $x = [20,40,26,22]$。\n- 情况 $3$（负选择）：$t = [0,1,2,3]$, $n = [80,140,190,106]$, $x = [30,40,40,16]$。\n- 情况 $4$（时间点最少且间隔不等的边缘情况）：$t = [0,5]$, $n = [20,371]$, $x = [4,243]$。\n\n最终输出格式要求：\n- 生成单行文本，该文本是一个有效的 Python 列表字面量，包含四个浮点数，每个都四舍五入到恰好 $6$ 位小数，按情况 $1$ 到情况 $4$ 的顺序排列，例如 $[\\hat{s}_1,\\hat{s}_2,\\hat{s}_3,\\hat{s}_4]$。", "solution": "该问题已经过严格验证，并被证实有效。这是一个在统计群体遗传学中定义明确的问题，基于已建立的科学原理。我们可以着手求解。\n\n目标是从等位基因计数的时间序列数据中，推导选择系数 $s$ 的最大似然估计。这项任务包括三个主要部分：首先，推导等位基因频率变化的确定性方程；其次，将其置于一个适合计数数据的统计框架内；第三，实现一个用于参数估计的数值程序。\n\n设 $p_t$ 为衍生等位基因的频率，$q_t = 1 - p_t$ 为祖先等位基因在第 $t$ 代的频率。衍生等位基因的相对适应度为 $w_1 = 1+s$，祖先等位基因的相对适应度为 $w_0 = 1$。在具有离散世代的单倍体选择模型下，在第 $t$ 代，群体的平均适应度为 $\\bar{w}_t = p_t w_1 + q_t w_0 = p_t(1+s) + (1-p_t)(1) = 1 + s p_t$。\n\n下一代（$t+1$）衍生等位基因的频率 $p_{t+1}$，由其在选择后对基因库的比例贡献给出：\n$$p_{t+1} = \\frac{p_t w_1}{\\bar{w}_t} = \\frac{p_t(1+s)}{1+sp_t}$$\n祖先等位基因的频率也以类似方式更新：\n$$q_{t+1} = \\frac{q_t w_0}{\\bar{w}_t} = \\frac{q_t}{1+sp_t}$$\n为了找到一个易于处理且可线性化的频率轨迹表达式，我们考察等位基因频率的比率 $R_t = p_t / q_t$。该比率的递推关系是：\n$$\\frac{p_{t+1}}{q_{t+1}} = \\frac{p_t(1+s)}{q_t} = (1+s)\\left(\\frac{p_t}{q_t}\\right)$$\n这表明，等位基因频率的比率每代都以因子 $1+s$ 呈几何级数增长。从初始世代 $t=0$ 开始迭代这个关系，得到：\n$$R_t = R_0 (1+s)^t$$\n其中 $R_0 = p_0 / (1-p_0)$。为了使这个关系相对于时间 $t$ 线性化，我们取自然对数：\n$$\\ln(R_t) = \\ln(R_0) + t \\ln(1+s)$$\n项 $\\ln(R_t) = \\ln(p_t / (1-p_t))$ 是等位基因频率 $p_t$ 的 logit 变换，记作 $\\text{logit}(p_t)$。因此，我们推导出了变换后等位基因频率的线性模型：\n$$\\text{logit}(p_t) = \\beta_0 + \\beta_1 t$$\n其中待估计的参数是 $\\beta_0 = \\text{logit}(p_0)$ 和 $\\beta_1 = \\ln(1+s)$。这就是所要求的确定性轨迹的参数线性表示。\n\n观测数据的统计模型必须考虑抽样过程。在每个时间点 $t_i$，我们在一个包含 $n_i$ 条染色体的样本中观测到 $x_i$ 个衍生等位基因。这个过程由二项分布建模：\n$$x_i \\sim \\mathrm{Binomial}(n_i, p_{t_i})$$\n其中 $p_{t_i}$ 是第 $t_i$ 代的真实群体等位基因频率。完整的数据集是 $\\{(t_i, x_i, n_i)\\}_{i=1}^m$。\n\n这个结构恰好是广义线性模型 (Generalized Linear Model, GLM) 的结构。其组成部分是：\n1.  **随机部分**：观测值 $x_i$ 服从二项分布。响应变量可以看作是比例 $y_i = x_i/n_i$。\n2.  **系统部分**：一个线性预测器 $\\eta_i$，是协变量的线性函数。在这里，唯一的协变量是时间 $t_i$。线性预测器是 $\\eta_i = \\beta_0 + \\beta_1 t_i$。\n3.  **连接函数**：一个函数 $g(\\cdot)$ 将响应的期望值 $\\mu_i = \\mathbb{E}[y_i] = p_{t_i}$ 与线性预测器关联起来：$g(\\mu_i) = \\eta_i$。我们的推导表明，这个函数是 logit 函数，$g(p_{t_i}) = \\text{logit}(p_{t_i})$。\n\nLogit 连接是二项分布族的正则连接函数，这在理论和计算上都有优势。整个数据集的对数似然函数，用参数 $\\beta_0$ 和 $\\beta_1$ 表示为：\n$$L(\\beta_0, \\beta_1) = \\sum_{i=1}^{m} \\left( \\ln\\binom{n_i}{x_i} + x_i \\ln(p_{t_i}) + (n_i - x_i) \\ln(1 - p_{t_i}) \\right)$$\n代入 $p_{t_i} = \\text{logit}^{-1}(\\eta_i) = \\frac{e^{\\eta_i}}{1+e^{\\eta_i}}$ 和 $\\eta_i = \\beta_0 + \\beta_1 t_i$，我们得到需要就 $\\beta = (\\beta_0, \\beta_1)^T$ 进行最大化的似然函数。\n\n最大化过程通过数值方法，使用迭代重加权最小二乘 (Iteratively Reweighted Least Squares, IRLS) 算法来执行，该算法对于正则 GLM 等价于 Fisher 评分法。算法如下：\n1.  初始化参数向量 $\\boldsymbol{\\beta}^{(0)}$，例如，$\\boldsymbol{\\beta}^{(0)} = \\mathbf{0}$。\n2.  对于迭代 $k=0, 1, 2, \\dots$ 直到收敛：\n    a.  为每个观测值计算线性预测器：$\\boldsymbol{\\eta}^{(k)} = \\mathbf{X}\\boldsymbol{\\beta}^{(k)}$，其中 $\\mathbf{X}$ 是一个 $m \\times 2$ 的设计矩阵，其行为 $[1, t_i]$。\n    b.  计算当前的拟合概率（均值）：$\\boldsymbol{\\mu}^{(k)} = g^{-1}(\\boldsymbol{\\eta}^{(k)})$，其中 $g^{-1}$ 是 logistic 函数。\n    c.  构建工作响应向量 $\\mathbf{z}^{(k)}$：$z_i^{(k)} = \\eta_i^{(k)} + \\frac{y_i - \\mu_i^{(k)}}{\\mu_i^{(k)}(1-\\mu_i^{(k)})}$，其中 $y_i = x_i/n_i$。\n    d.  构建对角权重矩阵 $\\mathbf{W}^{(k)}$，其元素为 $W_{ii}^{(k)} = n_i \\mu_i^{(k)}(1-\\mu_i^{(k)})$。\n    e.  通过求解加权最小二乘方程来更新参数：$\\boldsymbol{\\beta}^{(k+1)} = (\\mathbf{X}^T \\mathbf{W}^{(k)} \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{W}^{(k)} \\mathbf{z}^{(k)}$。\n3.  当迭代间 $\\boldsymbol{\\beta}$ 的变化小于指定公差时，过程终止。为确保数值稳定性，拟合概率 $\\mu_i^{(k)}$ 被限制在严格的 $(0, 1)$ 区间内，例如通过将其裁剪到 $[\\epsilon, 1-\\epsilon]$ 范围内，其中 $\\epsilon$ 是一个小的正数。\n\n收敛后，该算法产生最大似然估计 $\\hat{\\boldsymbol{\\beta}} = (\\hat{\\beta}_0, \\hat{\\beta}_1)^T$。根据我们最初的推导，我们有关系式 $\\hat{\\beta}_1 = \\ln(1+\\hat{s})$。因此，选择系数 $s$ 的最大似然估计为：\n$$\\hat{s} = e^{\\hat{\\beta}_1} - 1$$\n该过程为从给定的时间序列数据估计选择系数提供了一种完整而稳健的方法。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef fit_selection_glm(t, x, n, tol=1e-8, max_iter=25, epsilon=1e-10):\n    \"\"\"\n    Computes the maximum likelihood estimate of the selection coefficient 's'\n    using an Iteratively Reweighted Least Squares (IRLS) algorithm for a\n    Binomial GLM with a logit link.\n\n    Args:\n        t (np.ndarray): Array of time points (generations).\n        x (np.ndarray): Array of derived allele counts.\n        n (np.ndarray): Array of sample sizes.\n        tol (float): Convergence tolerance for the beta parameters.\n        max_iter (int): Maximum number of iterations.\n        epsilon (float): Small value to prevent probabilities of 0 or 1.\n\n    Returns:\n        float: The maximum likelihood estimate of the selection coefficient, s.\n    \"\"\"\n    # Design matrix X, with an intercept column and a time column.\n    X = np.vstack([np.ones(len(t)), t]).T\n    \n    # Observed proportions\n    y = x / n\n    \n    # Initial guess for beta (b0, b1)\n    beta = np.zeros(X.shape[1])\n    \n    for i in range(max_iter):\n        # Linear predictor eta = b0 + b1*t\n        eta = X @ beta\n        \n        # Mean response (probabilities) from the inverse link function (logistic)\n        mu = 1.0 / (1.0 + np.exp(-eta))\n        \n        # Safeguard: clip probabilities to avoid division by zero or log(0)\n        mu = np.clip(mu, epsilon, 1.0 - epsilon)\n        \n        # Derivative of the link function, g'(mu) = 1/(mu*(1-mu))\n        g_prime_mu = 1.0 / (mu * (1.0 - mu))\n        \n        # Working response (adjusted dependent variable) z\n        z = eta + (y - mu) * g_prime_mu\n        \n        # Weights for IRLS\n        # For Binomial GLM, W_ii = n_i * V(mu_i) * (g'(mu_i))^2, where V is variance function\n        # For canonical logit link, g'(mu) = 1/V(mu), so W_ii = n_i * V(mu_i)\n        # V(mu) for Binomial/Bernoulli is mu*(1-mu)\n        w = n * mu * (1.0 - mu)\n        W = np.diag(w)\n        \n        # Update beta by solving the weighted least squares problem:\n        # beta_new = (X^T * W * X)^-1 * X^T * W * z\n        try:\n            # Equivalent to np.linalg.inv(X.T @ W @ X) @ X.T @ W @ z but more stable\n            beta_new = np.linalg.solve(X.T @ W @ X, X.T @ W @ z)\n        except np.linalg.LinAlgError:\n            print(\"Error: Singular matrix encountered in IRLS. The data may be uninformative.\")\n            return np.nan\n\n        # Check for convergence\n        if np.linalg.norm(beta_new - beta)  tol:\n            beta = beta_new\n            break\n            \n        beta = beta_new\n\n    # The estimated coefficient for time is beta[1]\n    # We have beta_1 = log(1+s)\n    beta_1_hat = beta[1]\n    s_hat = np.exp(beta_1_hat) - 1.0\n    \n    return s_hat\n\ndef solve():\n    \"\"\"\n    Main function to process all test cases and print the results.\n    \"\"\"\n    test_cases = [\n        # Case 1 (general happy path, multiple time points)\n        {'t': [0, 1, 2, 3], 'n': [100, 110, 125, 118], 'x': [20, 30, 45, 54]},\n        # Case 2 (boundary condition of neutrality)\n        {'t': [0, 1, 2, 3], 'n': [70, 140, 91, 77], 'x': [20, 40, 26, 22]},\n        # Case 3 (negative selection)\n        {'t': [0, 1, 2, 3], 'n': [80, 140, 190, 106], 'x': [30, 40, 40, 16]},\n        # Case 4 (edge case with minimal time points and unequal spacing)\n        {'t': [0, 5], 'n': [20, 371], 'x': [4, 243]}\n    ]\n\n    results = []\n    for case in test_cases:\n        t_arr = np.array(case['t'], dtype=float)\n        x_arr = np.array(case['x'], dtype=float)\n        n_arr = np.array(case['n'], dtype=float)\n        \n        s_hat = fit_selection_glm(t_arr, x_arr, n_arr)\n        results.append(s_hat)\n    \n    # Format the output as a list of floats rounded to 6 decimal places\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2791293"}]}