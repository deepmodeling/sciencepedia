{"hands_on_practices": [{"introduction": "本练习使用一个简化但功能强大的模型来探索热交换的动态过程。通过将牛顿冷却定律应用于在阴凉处和阳光下移动的蜥蜴，您将推导并计算其达到偏好体温所需的时间。这个实践有助于建立对热时间常数（$τ$）的基本理解，以及生物体温度如何响应其热环境的阶跃变化。[@problem_id:2539055]", "problem": "一只小型沙漠蜥蜴被建模为一个空间均匀的变温动物，其体温（记为 $T_b(t)$）根据体内热含量与环境净热交换之间的能量平衡而变化。假设在所研究的时间区间内：(i) 身体可被视为一个集总热容体，其热容为 $C$（单位为 $\\mathrm{J}\\,\\mathrm{K}^{-1}$），(ii) 与环境的净热传递与有效环境温度 $T_e$（单位为 $\\mathrm{K}$ 或 $^{\\circ}\\mathrm{C}$）和体温 $T_b$ 之差成正比，比例常数（总热导）为 $G$（单位为 $\\mathrm{W}\\,\\mathrm{K}^{-1}$），以及 (iii) 有效环境温度 $T_e$ 在时间 $t=0$ 时发生阶跃变化（蜥蜴从阴凉处移动到阳光下），此后保持恒定。\n\n从第一性原理热平衡方程 $C\\,\\frac{dT_b}{dt} = G\\,(T_e - T_b)$ 出发，并定义热时间常数 $\\tau \\equiv \\frac{C}{G}$，考虑以下情景。蜥蜴在阴凉处停留了足够长的时间，使其在 $t=0$ 时的初始体温等于阴凉处的有效温度，即 $T_b(0)=T_{e,\\mathrm{shade}} = 28\\,^{\\circ}\\mathrm{C}$。在 $t=0$ 时，它移动到阳光充足的地方，那里的有效温度为 $T_{e,\\mathrm{sun}} = 38\\,^{\\circ}\\mathrm{C}$，此后保持不变。蜥蜴的偏好体温为 $T_{\\mathrm{pref}} = 35\\,^{\\circ}\\mathrm{C}$。在这些条件下，测得的热时间常数为 $\\tau = 4\\,\\mathrm{min}$。\n\n仅使用给定的能量平衡模型和定义，推导出 $t \\ge 0$ 时的 $T_b(t)$，并确定使 $T_b(t^{\\ast}) = T_{\\mathrm{pref}}$ 成立的唯一时间 $t^{\\ast}$。请用分钟表示你的最终 $t^{\\ast}$，并将答案四舍五入到三位有效数字。", "solution": "对所述问题进行验证。\n\n逐字提取已知条件：\n1.  控制微分方程：$C\\,\\frac{dT_b}{dt} = G\\,(T_e - T_b)$\n2.  热时间常数定义：$\\tau \\equiv \\frac{C}{G}$\n3.  初始条件：$T_b(0) = T_{e,\\mathrm{shade}} = 28\\,^{\\circ}\\mathrm{C}$\n4.  $t \\ge 0$ 时的有效环境温度：$T_e = T_{e,\\mathrm{sun}} = 38\\,^{\\circ}\\mathrm{C}$\n5.  目标体温：$T_{\\mathrm{pref}} = 35\\,^{\\circ}\\mathrm{C}$\n6.  热时间常数值：$\\tau = 4\\,\\mathrm{min}$\n\n验证结论：\n该问题具有科学依据，是适定的，并且是客观的。控制方程是牛顿冷却定律的标准表示，这是热传递的一个基本原理。该问题提供了一个带指定初始条件的一阶线性常微分方程，构成了一个能保证有唯一解的适定初值问题。所有参数都定义清晰，给定值在物理上是合理的。问题没有矛盾、歧义和非科学性论述。因此，该问题被认定为有效，并将提供解答。\n\n分析始于第一性原理热平衡方程：\n$$C\\,\\frac{dT_b}{dt} = G\\,(T_e - T_b)$$\n这里，$T_b(t)$ 是时间 $t$ 时的体温，$C$ 是热容，$G$ 是热导，$T_e$ 是有效环境温度。\n通过将热时间常数的定义 $\\tau = \\frac{C}{G}$ 代入方程，我们可以简化其形式。将控制方程两边同除以 $G$ 得：\n$$\\frac{C}{G}\\,\\frac{dT_b}{dt} = T_e - T_b$$\n$$\\tau\\,\\frac{dT_b}{dt} = T_e - T_b$$\n对于时间区间 $t \\ge 0$，有效温度 $T_e$ 是恒定的，等于 $T_{e,\\mathrm{sun}}$。我们将方程重写为一阶线性可分离常微分方程的标准形式：\n$$\\frac{dT_b}{T_e - T_b} = \\frac{1}{\\tau}\\,dt$$\n对该方程两边进行积分：\n$$\\int \\frac{dT_b}{T_e - T_b} = \\int \\frac{1}{\\tau}\\,dt$$\n积分结果为：\n$$-\\ln|T_e - T_b| = \\frac{t}{\\tau} + K$$\n其中 $K$ 是积分常数。由于蜥蜴是从较低温度升温到较高温度，所以 $T_e - T_b$ 总是正数，因此绝对值是不必要的。\n$$\\ln(T_e - T_b) = -\\frac{t}{\\tau} - K$$\n对两边取指数可得：\n$$T_e - T_b = \\exp\\left(-\\frac{t}{\\tau} - K\\right) = \\exp(-K)\\exp\\left(-\\frac{t}{\\tau}\\right)$$\n令 $A = \\exp(-K)$ 为一个新常数。$T_b(t)$ 的通解为：\n$$T_b(t) = T_e - A\\exp\\left(-\\frac{t}{\\tau}\\right)$$\n我们使用 $t=0$ 时的初始条件来确定常数 $A$。给定 $T_b(0) = T_{e,\\mathrm{shade}}$ 且对于所有 $t \\ge 0$，$T_e = T_{e,\\mathrm{sun}}$。\n$$T_b(0) = T_{e,\\mathrm{sun}} - A\\exp(0)$$\n$$T_{e,\\mathrm{shade}} = T_{e,\\mathrm{sun}} - A$$\n解出 $A$：\n$$A = T_{e,\\mathrm{sun}} - T_{e,\\mathrm{shade}}$$\n将此 $A$ 的表达式代回通解，得到蜥蜴体温在 $t \\ge 0$ 时的特解：\n$$T_b(t) = T_{e,\\mathrm{sun}} - (T_{e,\\mathrm{sun}} - T_{e,\\mathrm{shade}})\\exp\\left(-\\frac{t}{\\tau}\\right)$$\n问题要求找到体温达到偏好温度 $T_b(t^{\\ast}) = T_{\\mathrm{pref}}$ 时的时间 $t^{\\ast}$。我们在解中令 $t = t^{\\ast}$ 和 $T_b(t^{\\ast})=T_{\\mathrm{pref}}$：\n$$T_{\\mathrm{pref}} = T_{e,\\mathrm{sun}} - (T_{e,\\mathrm{sun}} - T_{e,\\mathrm{shade}})\\exp\\left(-\\frac{t^{\\ast}}{\\tau}\\right)$$\n现在我们求解 $t^{\\ast}$。整理各项得：\n$$(T_{e,\\mathrm{sun}} - T_{e,\\mathrm{shade}})\\exp\\left(-\\frac{t^{\\ast}}{\\tau}\\right) = T_{e,\\mathrm{sun}} - T_{\\mathrm{pref}}$$\n$$\\exp\\left(-\\frac{t^{\\ast}}{\\tau}\\right) = \\frac{T_{e,\\mathrm{sun}} - T_{\\mathrm{pref}}}{T_{e,\\mathrm{sun}} - T_{e,\\mathrm{shade}}}$$\n对两边取自然对数：\n$$-\\frac{t^{\\ast}}{\\tau} = \\ln\\left(\\frac{T_{e,\\mathrm{sun}} - T_{\\mathrm{pref}}}{T_{e,\\mathrm{sun}} - T_{e,\\mathrm{shade}}}\\right)$$\n最后，解出 $t^{\\ast}$：\n$$t^{\\ast} = -\\tau \\ln\\left(\\frac{T_{e,\\mathrm{sun}} - T_{\\mathrm{pref}}}{T_{e,\\mathrm{sun}} - T_{e,\\mathrm{shade}}}\\right) = \\tau \\ln\\left(\\left(\\frac{T_{e,\\mathrm{sun}} - T_{\\mathrm{pref}}}{T_{e,\\mathrm{sun}} - T_{e,\\mathrm{shade}}}\\right)^{-1}\\right)$$\n$$t^{\\ast} = \\tau \\ln\\left(\\frac{T_{e,\\mathrm{sun}} - T_{e,\\mathrm{shade}}}{T_{e,\\mathrm{sun}} - T_{\\mathrm{pref}}}\\right)$$\n这是符号解。现在我们代入给定的数值：$\\tau = 4\\,\\mathrm{min}$，$T_{e,\\mathrm{shade}} = 28\\,^{\\circ}\\mathrm{C}$，$T_{e,\\mathrm{sun}} = 38\\,^{\\circ}\\mathrm{C}$，以及 $T_{\\mathrm{pref}} = 35\\,^{\\circ}\\mathrm{C}$。请注意，由于公式仅使用温差，因此使用摄氏温标是足够的。\n$$t^{\\ast} = 4\\,\\ln\\left(\\frac{38 - 28}{38 - 35}\\right)$$\n$$t^{\\ast} = 4\\,\\ln\\left(\\frac{10}{3}\\right)$$\n计算数值：\n$$t^{\\ast} = 4 \\times 1.203972... \\approx 4.81588... \\,\\mathrm{min}$$\n按题目要求四舍五入到三位有效数字，得到：\n$$t^{\\ast} \\approx 4.82\\,\\mathrm{min}$$", "answer": "$$\n\\boxed{4.82}\n$$", "id": "2539055"}, {"introduction": "生物物理模型的好坏取决于其参数的准确性。本练习将我们的重点从理论转向数据，演示如何从实验测量中估计一个关键的生物学参数——活化能（$E$）。您将使用阿伦尼乌斯方程和线性回归（这是定量生物学中的一项基本技术）来分析热性能数据，并量化您估计值的不确定性。[@problem_id:2539098]", "problem": "给定您关于变温动物代谢率的热性能测量数据集，这些测量是在一个生物学相关的绝对温度范围内进行的，对应于 $10\\,^{\\circ}\\mathrm{C}$ 到 $30\\,^{\\circ}\\mathrm{C}$ 之间。假设这些速率来自于受酶限制的过程，其温度依赖性可以很好地用阿伦尼乌斯型动力学来描述，并且速率的对数对绝对温度的倒数作图可以建模为线性关系。从反应速率的指数温度依赖性和玻尔兹曼常数定义的第一性原理出发，推导出活化能的有原则估计量以及基于转换变量的普通最小二乘模型的双边置信区间。\n\n您的任务是实现一个程序，针对每个测试用例执行以下操作：\n\n- 通过将每个摄氏度值加上 $273.15$ 来把温度从摄氏度转换为开尔文。\n- 构造预测变量为绝对温度的倒数（单位 $\\mathrm{K}^{-1}$），响应变量为速率的自然对数（无量纲）。\n- 对数速率对绝对温度倒数进行普通最小二乘线性回归拟合。\n- 根据估计的斜率及其标准误，使用玻尔兹曼常数推断活化能，并使用具有 $n-2$ 个自由度的 Student's $t$ 分布的适当分位数来量化双边 $95\\%$ 置信区间，其中 $n$ 是测试用例中的观测次数。\n- 报告活化能及其置信限，单位为电子伏特（写作 $\\mathrm{eV}$），并四舍五入到六位小数。\n\n使用玻尔兹曼常数，单位为电子伏特每开尔文，$k_{\\mathrm{B}} = 8.617333262 \\times 10^{-5}\\,\\mathrm{eV}\\,\\mathrm{K}^{-1}$。所有对数均为自然对数。每个测试用例的答案必须是一个包含三个浮点数的列表：活化能的点估计值、$95\\%$ 置信区间的下限和 $95\\%$ 置信区间的上限。所有三个值都以 $\\mathrm{eV}$ 表示。\n\n测试套件（每个测试用例提供一个摄氏温度列表和相应的正代谢速率列表）：\n\n- 测试用例 $1$（正常路径，覆盖整个范围的五个点）：\n  - 温度（单位 $^{\\circ}\\mathrm{C}$）：[$10,15,20,25,30$]\n  - 速率（无量纲）：[$0.50,0.70,1.00,1.40,2.00$]\n\n- 测试用例 $2$（近等温性能，斜率幅值小）：\n  - 温度（单位 $^{\\circ}\\mathrm{C}$）：[$10,15,20,25,30$]\n  - 速率（无量纲）：[$1.00,1.02,0.98,1.01,1.00$]\n\n- 测试用例 $3$（置信区间的样本量边界，三个点）：\n  - 温度（单位 $^{\\circ}\\mathrm{C}$）：[$12,21,30$]\n  - 速率（无量纲）：[$0.40,1.10,3.10$]\n\n最终输出格式：您的程序应生成单行输出，其中包含三个测试用例的结果，格式为无空格的 JSON 风格列表的列表，其中每个内部列表为 [$E,\\mathrm{CI}_{\\text{lower}},\\mathrm{CI}_{\\text{upper}}$]，单位为 $\\mathrm{eV}$。例如，打印的行必须类似于“[[$e_1,\\ell_1,u_1$],[$e_2,\\ell_2,u_2$],[$e_3,\\ell_3,u_3$]]”，所有值都四舍五入到六位小数。", "solution": "该问题是有效的，因为它具有科学依据、问题明确且客观。它要求将化学动力学和统计推断的既定原理应用于数据分析，这是定量生物学中的一个标准程序。我们现在将从第一性原理推导解决方案。\n\n由酶催化反应控制的代谢速率 $R$ 的温度依赖性由阿伦尼乌斯关系式描述。该模型假定速率与玻尔兹曼因子 $e^{-E / (k_{\\mathrm{B}} T)}$ 成正比，该因子表示拥有足够热能以克服活化能垒 $E$ 的分子所占的比例。该关系式为：\n$$ R(T) = R_0 e^{-\\frac{E}{k_{\\mathrm{B}} T}} $$\n此处，$T$ 是绝对温度，单位为开尔文（$\\mathrm{K}$），$k_{\\mathrm{B}}$ 是玻尔兹曼常数，单位为电子伏特每开尔文（$\\mathrm{eV}\\,\\mathrm{K}^{-1}$），$R_0$ 是指前因子。\n\n为了利用线性回归，我们必须将此指数模型线性化。这可以通过对等式两边取自然对数来实现：\n$$ \\ln(R) = \\ln(R_0 e^{-\\frac{E}{k_{\\mathrm{B}} T}}) = \\ln(R_0) + \\ln(e^{-\\frac{E}{k_{\\mathrm{B}} T}}) $$\n$$ \\ln(R) = \\ln(R_0) - \\frac{E}{k_{\\mathrm{B}}} \\frac{1}{T} $$\n该方程具有简单线性模型 $y = \\beta_0 + \\beta_1 x$ 的形式，我们做出以下识别：\n- 响应变量 $y$ 是速率的自然对数：$y = \\ln(R)$。\n- 预测变量 $x$ 是绝对温度的倒数：$x = 1/T$。\n- 截距 $\\beta_0$ 对应于指前因子的对数：$\\beta_0 = \\ln(R_0)$。\n- 斜率 $\\beta_1$ 与活化能直接相关：$\\beta_1 = -E/k_{\\mathrm{B}}$。\n\n我们的主要目标是估计 $E$。根据斜率的关系，我们可以基于斜率的普通最小二乘（OLS）估计值 $\\hat{\\beta}_1$ 推导出活化能的估计量 $\\hat{E}$：\n$$ \\hat{\\beta}_1 = -\\frac{\\hat{E}}{k_{\\mathrm{B}}} \\implies \\hat{E} = -k_{\\mathrm{B}} \\hat{\\beta}_1 $$\n对于一组 $n$ 个数据点 $(x_i, y_i)$，斜率的 OLS 估计量 $\\hat{\\beta}_1$ 由以下公式给出：\n$$ \\hat{\\beta}_1 = \\frac{\\sum_{i=1}^{n} (x_i - \\bar{x})(y_i - \\bar{y})}{\\sum_{i=1}^{n} (x_i - \\bar{x})^2} $$\n其中 $\\bar{x}$ 和 $\\bar{y}$ 分别是预测变量和响应变量的样本均值。\n\n为了量化我们估计值 $\\hat{E}$ 的不确定性，我们构造一个双边 $95\\%$ 置信区间。这从斜率参数 $\\beta_1$ 的置信区间开始。假设线性模型的误差服从正态分布，$\\beta_1$ 的置信区间由下式给出：\n$$ \\hat{\\beta}_1 \\pm t_{1-\\alpha/2, n-2} \\cdot \\text{SE}(\\hat{\\beta}_1) $$\n此处，对于 $95\\%$ 的置信水平，$\\alpha=0.05$，$\\text{SE}(\\hat{\\beta}_1)$ 是斜率估计的标准误，而 $t_{1-\\alpha/2, n-2}$ 是来自具有 $n-2$ 个自由度的 Student's $t$ 分布的临界值。标准误计算如下：\n$$ \\text{SE}(\\hat{\\beta}_1) = \\sqrt{\\frac{\\text{MSE}}{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}} $$\n其中 $\\text{MSE} = \\frac{1}{n-2} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2$ 是均方误差，$\\hat{y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1 x_i$。\n\n活化能 $E$ 的置信区间是通过将 $\\beta_1$ 的区间界限乘以 $-k_{\\mathrm{B}}$ 得到的。乘以一个负常数会反转区间的界限：\n$$ \\text{CI}_{\\text{lower}}(E) = -k_{\\mathrm{B}} (\\hat{\\beta}_1 + t_{0.975, n-2} \\cdot \\text{SE}(\\hat{\\beta}_1)) = \\hat{E} - t_{0.975, n-2} \\cdot k_{\\mathrm{B}} \\cdot \\text{SE}(\\hat{\\beta}_1) $$\n$$ \\text{CI}_{\\text{upper}}(E) = -k_{\\mathrm{B}} (\\hat{\\beta}_1 - t_{0.975, n-2} \\cdot \\text{SE}(\\hat{\\beta}_1)) = \\hat{E} + t_{0.975, n-2} \\cdot k_{\\mathrm{B}} \\cdot \\text{SE}(\\hat{\\beta}_1) $$\n因此，活化能的误差范围是 $ME_E = t_{0.975, n-2} \\cdot k_{\\mathrm{B}} \\cdot \\text{SE}(\\hat{\\beta}_1)$。\n\n计算过程如下：\n1. 对每个测试用例，使用 $T_K = T_C + 273.15$ 将温度从摄氏度（$T_C$）转换为开尔文（$T_K$）。\n2. 构造预测变量向量 $x = [1/T_{K,i}]$ 和响应变量向量 $y = [\\ln(R_i)]$。\n3. 使用标准统计库函数对 $y$ on $x$ 执行 OLS 回归，这将提供估计的斜率 $\\hat{\\beta}_1$ 及其标准误 $\\text{SE}(\\hat{\\beta}_1)$。\n4. 使用所提供的值 $k_{\\mathrm{B}} = 8.617333262 \\times 10^{-5}\\,\\mathrm{eV}\\,\\mathrm{K}^{-1}$ 计算活化能的点估计值 $\\hat{E} = -k_{\\mathrm{B}} \\hat{\\beta}_1$。\n5. 确定自由度 $df = n-2$，并从 Student's $t$ 分布中找到临界值 $t_{0.975, df}$。\n6. 计算 $E$ 的 $95\\%$ 置信区间的下限和上限。\n7. 报告点估计值 $\\hat{E}$ 和置信区间界限，全部以 $\\mathrm{eV}$ 为单位，并四舍五入到六位小数。", "answer": "```python\nimport numpy as np\nfrom scipy.stats import linregress, t\n\ndef solve():\n    \"\"\"\n    Calculates activation energy and its 95% confidence interval from thermal\n    performance data using an Arrhenius model and OLS regression.\n    \"\"\"\n    # Boltzmann constant in eV/K.\n    KB_EV_K = 8.617333262e-5\n\n    # Test suite provided in the problem statement.\n    test_cases = [\n        # Test case 1\n        ([10, 15, 20, 25, 30], [0.50, 0.70, 1.00, 1.40, 2.00]),\n        # Test case 2\n        ([10, 15, 20, 25, 30], [1.00, 1.02, 0.98, 1.01, 1.00]),\n        # Test case 3\n        ([12, 21, 30], [0.40, 1.10, 3.10])\n    ]\n\n    all_results = []\n    \n    for temps_c, rates in test_cases:\n        temps_c_np = np.array(temps_c, dtype=float)\n        rates_np = np.array(rates, dtype=float)\n        n = len(temps_c_np)\n\n        # Step 1: Convert temperatures to Kelvin.\n        temps_k = temps_c_np + 273.15\n        \n        # Step 2: Construct predictor (x) and response (y) variables for linearization.\n        # x = 1/T\n        # y = ln(Rate)\n        x = 1.0 / temps_k\n        y = np.log(rates_np)\n\n        # Step 3: Fit an ordinary least squares linear regression.\n        # The scipy.stats.linregress function returns slope and its standard error.\n        regression_result = linregress(x, y)\n        beta_1_hat = regression_result.slope\n        se_beta_1_hat = regression_result.stderr\n        \n        # Step 4: Infer the activation energy (E) from the slope.\n        # The relationship is beta_1 = -E / k_B.\n        E_hat = -KB_EV_K * beta_1_hat\n        \n        # Step 5: Quantify the 95% two-sided confidence interval for E.\n        # Degrees of freedom for the t-distribution is n - 2.\n        df = n - 2\n        \n        if df  0:\n            # Critical t-value for a 95% confidence interval (alpha = 0.05).\n            t_crit = t.ppf(1 - 0.05 / 2, df)\n            \n            # Margin of error for the activation energy estimate.\n            margin_of_error_E = t_crit * KB_EV_K * se_beta_1_hat\n            \n            # Confidence interval bounds.\n            ci_lower = E_hat - margin_of_error_E\n            ci_upper = E_hat + margin_of_error_E\n        else:\n            # If df = 0, CI is not well-defined.\n            ci_lower, ci_upper = np.nan, np.nan\n        \n        # Collect the results: point estimate, lower bound, upper bound.\n        case_results = [E_hat, ci_lower, ci_upper]\n        all_results.append(case_results)\n\n    # Format the final output string as a JSON-style list of lists with no spaces,\n    # with all numerical values rounded to six decimal places.\n    formatted_results = []\n    for res in all_results:\n        # Format numbers to 6 decimal places as strings.\n        formatted_nums = [f\"{x:.6f}\" for x in res]\n        # Create the inner list string \"[num1,num2,num3]\".\n        formatted_results.append(f\"[{','.join(formatted_nums)}]\")\n\n    # Join inner lists into the final string \"[[...],[...],[...]]\".\n    final_output = f\"[{','.join(formatted_results)}]\"\n    \n    print(final_output)\n\nsolve()\n```", "id": "2539098"}, {"introduction": "本综合性练习以基本原理为基础，要求您构建并实施一个全面的生物物理模型。您将通过整合多种动态的热交换路径与变化的环境，模拟变温动物在整整24小时周期内的体温。这项实践巩固了您的技能，展示了如何使用第一性原理建模来预测生物体在现实生态环境中的热体验和性能。[@problem_id:2539109]", "problem": "一个小型变温动物通过短波太阳辐射吸收、与天空和地面的长波辐射交换、与空气的对流以及与基质的传导，与其环境交换热量。从第一性原理出发，使用能量守恒定律为生物体温在昼夜周期内的变化轨迹建模，并计算总结性的性能指标。出发点是针对一个均匀混合物体的能量守恒定律：内能的变化率等于净外部热通量，由此得到常微分方程\n$$\nm c \\,\\frac{d T_b}{dt} = Q_{\\mathrm{sw}} + Q_{\\mathrm{lw}} + Q_{\\mathrm{conv}} + Q_{\\mathrm{cond}},\n$$\n其中 $m$ 是质量，$c$ 是比热容，$T_b$ 是体温，$Q_{\\mathrm{sw}}$ 是吸收的短波辐射，$Q_{\\mathrm{lw}}$ 是与天空和地面的净长波辐射交换，$Q_{\\mathrm{conv}}$ 是与空气的对流热交换，$Q_{\\mathrm{cond}}$ 是与基质的传导交换。使用以下经过充分检验的物理定律和定义作为基本基础：\n- 短波吸收：$Q_{\\mathrm{sw}} = \\alpha_{\\mathrm{sw}} \\, S(t) \\, A_{\\mathrm{proj}}$，其中 $\\alpha_{\\mathrm{sw}}$ 是短波吸收率，$S(t)$ 是全球太阳辐照度（单位 $\\mathrm{W\\, m^{-2}}$），$A_{\\mathrm{proj}}$ 是垂直于太阳的投影面积。将身体建模为直径为 $D$ 的球体，其表面积为 $A_{\\mathrm{surf}} = 4 \\pi (D/2)^2$，投影面积为 $A_{\\mathrm{proj}} = \\pi (D/2)^2$。\n- 长波辐射：使用 Stefan–Boltzmann 定律，其中发射率为 $\\epsilon$，Stefan–Boltzmann 常数为 $\\sigma = 5.670374419 \\times 10^{-8}\\ \\mathrm{W\\, m^{-2}\\, K^{-4}}$。设朝向天空和地面的视角因子分别为 $f_{\\mathrm{sky}} = 0.5$ 和 $f_{\\mathrm{gnd}} = 0.5$。通过 $T_{\\mathrm{sky}}^4 = \\epsilon_{\\mathrm{sky}}\\, T_{\\mathrm{air}}^4$ 定义一个有效天空辐射温度，其中 $\\epsilon_{\\mathrm{sky}}$ 是有效天空发射率，$T_{\\mathrm{air}}$ 是空气温度（均以 $\\mathrm{K}$ 为单位）。则\n$$\nQ_{\\mathrm{lw}} = \\epsilon \\sigma A_{\\mathrm{surf}} \\left[ f_{\\mathrm{sky}}\\left(T_{\\mathrm{sky}}^4 - T_b^4 \\right) + f_{\\mathrm{gnd}} \\left( T_{\\mathrm{g}}^4 - T_b^4 \\right) \\right],\n$$\n其中 $T_{\\mathrm{g}}$ 是基质温度（以 $\\mathrm{K}$ 为单位）。\n- 对流：使用 Newton 冷却定律 $Q_{\\mathrm{conv}} = h_c A_{\\mathrm{surf}} \\left( T_{\\mathrm{air}} - T_b \\right)$，其中对流传热系数 $h_c = \\mathrm{Nu}\\, k_{\\mathrm{air}}/D$。使用 Nusselt 数组合，结合球体周围的强制对流和自然对流\n$$\n\\mathrm{Nu} = \\left( \\mathrm{Nu}_{\\mathrm{forced}}^3 + \\mathrm{Nu}_{\\mathrm{nat}}^3 \\right)^{1/3},\n$$\n其中 $\\mathrm{Nu}_{\\mathrm{forced}} = 2 + 0.6 \\, \\mathrm{Re}^{1/2} \\, \\mathrm{Pr}^{1/3}$，$\\mathrm{Re} = U D / \\nu$，$U$ 是风速，$\\nu$ 是运动粘度，$\\mathrm{Pr}$ 是 Prandtl 数，$k_{\\mathrm{air}}$ 是空气的导热系数。对于自然对流，使用 Churchill–Chu 球体关联式，\n$$\n\\mathrm{Nu}_{\\mathrm{nat}} = 2 + \\frac{0.589\\, \\mathrm{Ra}^{1/4}}{\\left[1 + \\left(0.469/\\mathrm{Pr}\\right)^{9/16}\\right]^{4/9}},\n\\quad\n\\mathrm{Ra} = \\frac{g \\beta |T_b - T_{\\mathrm{air}}| D^3}{\\nu \\alpha_{\\mathrm{air}}},\n$$\n其中重力加速度 $g = 9.81\\ \\mathrm{m\\, s^{-2}}$，体积热膨胀系数 $\\beta \\approx 1/T_{\\mathrm{film}}$，其中 $T_{\\mathrm{film}} = (T_b + T_{\\mathrm{air}})/2$，以及热扩散率 $\\alpha_{\\mathrm{air}}$。\n- 传导：通过 $Q_{\\mathrm{cond}} = h_{\\mathrm{cond}} A_{\\mathrm{cond}} (T_{\\mathrm{g}} - T_b)$ 来近似接触传导，其中 $h_{\\mathrm{cond}} = k_{\\mathrm{sub}}/d_{\\mathrm{cond}}$，$k_{\\mathrm{sub}}$ 是基质导热系数，$d_{\\mathrm{cond}}$ 是一个有效接触长度尺度，$A_{\\mathrm{cond}} = \\eta_{\\mathrm{cond}} A_{\\mathrm{surf}}$，其中接触分数 $\\eta_{\\mathrm{cond}}$。\n\n假设空气属性为常数 $k_{\\mathrm{air}} = 0.026\\ \\mathrm{W\\, m^{-1}\\, K^{-1}}$，$\\nu = 1.5 \\times 10^{-5}\\ \\mathrm{m^2\\, s^{-1}}$，$\\mathrm{Pr} = 0.71$，以及 $\\alpha_{\\mathrm{air}} = 2.1 \\times 10^{-5}\\ \\mathrm{m^2\\, s^{-1}}$。使用显式欧拉法进行时间步进，时间步长为 $\\Delta t = 60\\ \\mathrm{s}$，模拟周期为24小时。使用初始条件 $T_b(0) = T_{\\mathrm{air}}(0)$。\n\n昼夜周期内的强迫函数使用小时数 $t_h \\in [0, 24]$ 定义如下：\n- 太阳辐照度 $S(t_h) = S_{\\max} \\sin\\left( \\pi \\frac{t_h - t_{\\mathrm{sunrise}}}{\\mathrm{daylength}} \\right)$，其中 $t_h \\in [t_{\\mathrm{sunrise}}, t_{\\mathrm{sunrise}} + \\mathrm{daylength}]$，其他情况下 $S(t_h) = 0$。$S$ 的单位是 $\\mathrm{W\\, m^{-2}}$。\n- 空气温度（摄氏度）$T_{\\mathrm{air},^\\circ\\mathrm{C}}(t_h) = \\overline{T}_{\\mathrm{air}} + A_{\\mathrm{air}} \\sin\\left( 2\\pi \\frac{t_h - \\phi_{\\mathrm{air}}}{24} \\right)$。通过 $T_{\\mathrm{air}} = T_{\\mathrm{air},^\\circ\\mathrm{C}} + 273.15$ 转换为开尔文。\n- 基质温度（摄氏度）$T_{\\mathrm{g},^\\circ\\mathrm{C}}(t_h) = \\overline{T}_{\\mathrm{air}} + A_{\\mathrm{air}} (1 + \\gamma_{\\mathrm{g}}) \\sin\\left( 2\\pi \\frac{t_h - \\phi_{\\mathrm{air}} - \\Delta \\phi_{\\mathrm{g}}}{24} \\right)$。通过 $T_{\\mathrm{g}} = T_{\\mathrm{g},^\\circ\\mathrm{C}} + 273.15$ 转换为开尔文。\n- 风速 $U(t_h) = \\max\\left( 0, \\overline{U} + A_U \\sin\\left( 2\\pi \\frac{t_h - \\phi_U}{24} \\right) \\right)$，单位为 $\\mathrm{m\\, s^{-1}}$。\n\n输出要求：\n- 对于每个测试用例，计算两个量：24小时周期内的最高体温（以摄氏度表示），以及体温 $T_b$ 严格高于热最适温度 $T_{\\mathrm{opt}}$（以摄氏度定义）的总时间（以小时表示）。将最高体温以摄氏度表示，并四舍五入到三位小数；将高于 $T_{\\mathrm{opt}}$ 的总时间以小时的小数形式表示，并四舍五入到三位小数。\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表的结果（例如，$\\left[\\mathrm{result1},\\mathrm{result2},\\ldots\\right]$），按顺序串联每个测试用例的两个数值。\n\n使用以下四个科学上合理的测试用例。除非另有说明，否则使用 $\\phi_{\\mathrm{air}} = 15.0\\ \\mathrm{h}$ 和 $\\phi_U = 14.0\\ \\mathrm{h}$，$f_{\\mathrm{sky}} = 0.5$，$f_{\\mathrm{gnd}} = 0.5$。\n\n- 测试用例1（晴天，中等风速，小型变温动物）：\n    - 形态学和材料：$m = 0.05\\ \\mathrm{kg}$，$D = 0.05\\ \\mathrm{m}$，$c = 3500\\ \\mathrm{J\\, kg^{-1}\\, K^{-1}}$，$\\alpha_{\\mathrm{sw}} = 0.85$，$\\epsilon = 0.95$，$\\eta_{\\mathrm{cond}} = 0.10$，$d_{\\mathrm{cond}} = 0.01\\ \\mathrm{m}$，$k_{\\mathrm{sub}} = 1.0\\ \\mathrm{W\\, m^{-1}\\, K^{-1}}$，$T_{\\mathrm{opt}} = 35.0\\ ^\\circ\\mathrm{C}$。\n    - 强迫条件：$S_{\\max} = 900\\ \\mathrm{W\\, m^{-2}}$，$\\epsilon_{\\mathrm{sky}} = 0.78$，$\\overline{T}_{\\mathrm{air}} = 25.0\\ ^\\circ\\mathrm{C}$，$A_{\\mathrm{air}} = 10.0\\ ^\\circ\\mathrm{C}$，$\\gamma_{\\mathrm{g}} = 0.5$，$\\Delta \\phi_{\\mathrm{g}} = -1.0\\ \\mathrm{h}$，$\\overline{U} = 1.0\\ \\mathrm{m\\, s^{-1}}$，$A_U = 1.0\\ \\mathrm{m\\, s^{-1}}$，$\\mathrm{daylength} = 12.0\\ \\mathrm{h}$，$t_{\\mathrm{sunrise}} = 6.0\\ \\mathrm{h}$。\n\n- 测试用例2（多云，风较大）：\n    - 形态学和材料：与测试用例1相同，除了 $T_{\\mathrm{opt}} = 33.0\\ ^\\circ\\mathrm{C}$。\n    - 强迫条件：$S_{\\max} = 400\\ \\mathrm{W\\, m^{-2}}$，$\\epsilon_{\\mathrm{sky}} = 0.90$，$\\overline{T}_{\\mathrm{air}} = 22.0\\ ^\\circ\\mathrm{C}$，$A_{\\mathrm{air}} = 6.0\\ ^\\circ\\mathrm{C}$，$\\gamma_{\\mathrm{g}} = 0.3$，$\\Delta \\phi_{\\mathrm{g}} = -1.0\\ \\mathrm{h}$，$\\overline{U} = 2.0\\ \\mathrm{m\\, s^{-1}}$，$A_U = 1.0\\ \\mathrm{m\\, s^{-1}}$，$\\mathrm{daylength} = 12.0\\ \\mathrm{h}$，$t_{\\mathrm{sunrise}} = 6.0\\ \\mathrm{h}$。\n\n- 测试用例3（风很大，平均气温较低）：\n    - 形态学和材料：与测试用例1相同，除了 $T_{\\mathrm{opt}} = 34.0\\ ^\\circ\\mathrm{C}$。\n    - 强迫条件：$S_{\\max} = 900\\ \\mathrm{W\\, m^{-2}}$，$\\epsilon_{\\mathrm{sky}} = 0.80$，$\\overline{T}_{\\mathrm{air}} = 20.0\\ ^\\circ\\mathrm{C}$，$A_{\\mathrm{air}} = 8.0\\ ^\\circ\\mathrm{C}$，$\\gamma_{\\mathrm{g}} = 0.5$，$\\Delta \\phi_{\\mathrm{g}} = -1.0\\ \\mathrm{h}$，$\\overline{U} = 5.0\\ \\mathrm{m\\, s^{-1}}$，$A_U = 3.0\\ \\mathrm{m\\, s^{-1}}$，$\\mathrm{daylength} = 12.0\\ \\mathrm{h}$，$t_{\\mathrm{sunrise}} = 6.0\\ \\mathrm{h}$。\n\n- 测试用例4（较大型变温动物，平均条件较暖）：\n    - 形态学和材料：$m = 0.30\\ \\mathrm{kg}$，$D = 0.09\\ \\mathrm{m}$，$c = 3500\\ \\mathrm{J\\, kg^{-1}\\, K^{-1}}$，$\\alpha_{\\mathrm{sw}} = 0.85$，$\\epsilon = 0.95$，$\\eta_{\\mathrm{cond}} = 0.10$，$d_{\\mathrm{cond}} = 0.01\\ \\mathrm{m}$，$k_{\\mathrm{sub}} = 1.0\\ \\mathrm{W\\, m^{-1}\\, K^{-1}}$，$T_{\\mathrm{opt}} = 38.0\\ ^\\circ\\mathrm{C}$。\n    - 强迫条件：$S_{\\max} = 900\\ \\mathrm{W\\, m^{-2}}$，$\\epsilon_{\\mathrm{sky}} = 0.80$，$\\overline{T}_{\\mathrm{air}} = 28.0\\ ^\\circ\\mathrm{C}$，$A_{\\mathrm{air}} = 12.0\\ ^\\circ\\mathrm{C}$，$\\gamma_{\\mathrm{g}} = 0.7$，$\\Delta \\phi_{\\mathrm{g}} = -1.0\\ \\mathrm{h}$，$\\overline{U} = 1.0\\ \\mathrm{m\\, s^{-1}}$，$A_U = 1.0\\ \\mathrm{m\\, s^{-1}}$，$\\mathrm{daylength} = 12.0\\ \\mathrm{h}$，$t_{\\mathrm{sunrise}} = 6.0\\ \\mathrm{h}$。\n\n角度单位：所有三角函数均使用弧度。物理单位：确保所有输入和内部计算在适用时均使用国际单位制（SI）。最终答案必须以指定单位表示：最高体温以摄氏度为单位，高于 $T_{\\mathrm{opt}}$ 的时间以小时为单位，每个都四舍五入到三位小数。程序必须输出一行包含四个测试用例串联结果的内容，格式严格遵循 $\\left[\\mathrm{r}_1,\\mathrm{r}_2,\\ldots,\\mathrm{r}_8\\right]$，如上所述，其中 $\\mathrm{r}_{2k-1}$ 是测试用例 $k$ 的最高体温（摄氏度），$\\mathrm{r}_{2k}$ 是高于 $T_{\\mathrm{opt}}$ 的时间（小时）。", "solution": "问题陈述提出了一个基于生物物理生态学和传热物理学原理的、科学上有效的初值问题。它使用从能量守恒定律推导出来的一阶常微分方程（ODE）来描述一个均匀混合的球形变温动物的热动态。所有物理参数、常数、强迫函数和初始条件都已提供，使得该问题是适定的和自洽的。指定的参数值在物理上是现实的。因此，可以计算出有意义的数值解。\n\n问题的核心是求解体温 $T_b$ 在24小时昼夜周期内的常微分方程：\n$$\nm c \\,\\frac{d T_b}{dt} = Q_{\\mathrm{net}}(t, T_b) = Q_{\\mathrm{sw}} + Q_{\\mathrm{lw}} + Q_{\\mathrm{conv}} + Q_{\\mathrm{cond}}\n$$\n其中 $m$是质量，$c$ 是比热容，右侧的各项分别代表来自短波辐射、长波辐射、对流和传导的净热通量。\n\n按照规定，该常微分方程使用显式欧拉法进行数值求解。下一个时间步的温度 $T_b(t+\\Delta t)$ 由当前时间步的温度 $T_b(t)$ 通过以下更新规则确定：\n$$\nT_b(t+\\Delta t) = T_b(t) + \\frac{\\Delta t}{m c} Q_{\\mathrm{net}}(t, T_b(t))\n$$\n模拟在24小时周期内进行，固定时间步长为 $\\Delta t=60$ 秒。初始条件是 $T_b(0) = T_{\\mathrm{air}}(0)$。所有计算均使用国际单位制（SI），温度单位为开尔文（K）。\n\n对每个测试用例，通过以下步骤实现求解：\n\n1.  **初始化和环境强迫**：定义所有物理常数和形态学参数。将随时间变化的环境变量——太阳辐照度 $S(t)$、空气温度 $T_{\\mathrm{air}}(t)$、基质温度 $T_{\\mathrm{g}}(t)$ 和风速 $U(t)$——作为时间序列数组，预先计算整个24小时周期的值，总共 $N = (24 \\times 3600) / 60 = 1440$ 个时间步。将以摄氏度给出的强迫温度使用关系式 $T_K = T_{^\\circ\\mathrm{C}} + 273.15$ 转换为开尔文。以小时为单位的时间变量 $t_h$ 在模拟中转换为秒。体温历史数组 $T_b$ 用 $T_b(0) = T_{\\mathrm{air}}(0)$ 初始化。\n\n2.  **时间步进模拟**：一个循环从 $t=0$ 迭代到 $t = 24 \\times 3600 - \\Delta t$。在每次迭代 $i$（对应时间 $t_i$）中：\n    *   使用当前体温 $T_{b,i}$ 和环境条件（$S_i, T_{\\mathrm{air},i}, T_{\\mathrm{g},i}, U_i$）计算四个热通量项。\n    *   **短波辐射 ($Q_{\\mathrm{sw}}$)**：$Q_{\\mathrm{sw}} = \\alpha_{\\mathrm{sw}} \\, S(t_i) \\, A_{\\mathrm{proj}}$，其中球体的投影面积为 $A_{\\mathrm{proj}} = \\pi (D/2)^2$。\n    *   **长波辐射 ($Q_{\\mathrm{lw}}$)**：$Q_{\\mathrm{lw}} = \\epsilon \\sigma A_{\\mathrm{surf}} [ f_{\\mathrm{sky}}(T_{\\mathrm{sky},i}^4 - T_{b,i}^4) + f_{\\mathrm{gnd}}(T_{\\mathrm{g},i}^4 - T_{b,i}^4) ]$。有效天空温度为 $T_{\\mathrm{sky},i} = (\\epsilon_{\\mathrm{sky}} T_{\\mathrm{air},i}^4)^{1/4}$。表面积为 $A_{\\mathrm{surf}} = \\pi D^2$，视角因子为 $f_{\\mathrm{sky}}=f_{\\mathrm{gnd}}=0.5$。\n    *   **对流 ($Q_{\\mathrm{conv}}$)**：$Q_{\\mathrm{conv}} = h_{c,i} A_{\\mathrm{surf}} (T_{\\mathrm{air},i} - T_{b,i})$。传热系数 $h_{c,i}$ 取决于组合的 Nusselt 数 $\\mathrm{Nu}_i = (\\mathrm{Nu}_{\\mathrm{forced},i}^3 + \\mathrm{Nu}_{\\mathrm{nat},i}^3)^{1/3}$。这需要计算强制对流的 Reynolds 数 $\\mathrm{Re}_i = U_i D / \\nu$ 和自然对流的 Rayleigh 数 $\\mathrm{Ra}_i = g \\beta_i |T_{b,i} - T_{\\mathrm{air},i}| D^3 / (\\nu \\alpha_{\\mathrm{air}})$。体积膨胀系数 $\\beta_i$ 近似为 $1/T_{\\mathrm{film},i}$，其中 $T_{\\mathrm{film},i}=(T_{b,i}+T_{\\mathrm{air},i})/2$。\n    *   **传导 ($Q_{\\mathrm{cond}}$)**：$Q_{\\mathrm{cond}} = h_{\\mathrm{cond}} A_{\\mathrm{cond}} (T_{\\mathrm{g},i} - T_{b,i})$，其中 $h_{\\mathrm{cond}} = k_{\\mathrm{sub}}/d_{\\mathrm{cond}}$ 且 $A_{\\mathrm{cond}} = \\eta_{\\mathrm{cond}} A_{\\mathrm{surf}}$。\n    *   将净热通量 $Q_{\\mathrm{net},i}$ 求和，并使用欧拉公式计算下一个时间步的体温 $T_{b,i+1}$。\n\n3.  **后处理和输出**：模拟循环完成后：\n    *   将整个体温历史 $T_b$ 从开尔文转换为摄氏度。\n    *   通过取摄氏度 $T_b$ 历史的最大值来找到最高体温。\n    *   计算体温严格大于热最适温度（$T_b > T_{\\mathrm{opt}}$）的总时间。这是通过对满足条件的（$t=0$之后）时间步数求和，再乘以单个时间步的持续时间 $\\Delta t = 60$ s 来实现的。结果转换为小时。\n    *   将计算出的两个指标（摄氏度的最高温度和小时为单位的超最适温度时间）四舍五入到三位小数。\n\n对所有四个测试用例重复此过程，并将结果串联成一个逗号分隔的列表，按要求格式化。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the ectotherm thermal balance problem for the given test cases.\n    \"\"\"\n    # Physical and simulation constants\n    sigma = 5.670374419e-8  # Stefan-Boltzmann constant, W m^-2 K^-4\n    g = 9.81              # Gravitational acceleration, m s^-2\n    k_air = 0.026           # Thermal conductivity of air, W m^-1 K^-1\n    nu = 1.5e-5             # Kinematic viscosity of air, m^2 s^-1\n    Pr = 0.71               # Prandtl number for air\n    alpha_air = 2.1e-5      # Thermal diffusivity of air, m^2 s^-1\n    dt_s = 60.0             # Time step, s\n    sim_duration_h = 24.0\n    sim_duration_s = sim_duration_h * 3600.0\n    time_s = np.arange(0, sim_duration_s + dt_s, dt_s)\n    time_h = time_s / 3600.0\n    n_points = len(time_s)\n\n    # Test case parameters organized in a list of dictionaries\n    test_cases = [\n        {\n            \"m\": 0.05, \"D\": 0.05, \"c\": 3500, \"alpha_sw\": 0.85, \"epsilon\": 0.95,\n            \"eta_cond\": 0.10, \"d_cond\": 0.01, \"k_sub\": 1.0, \"T_opt_C\": 35.0,\n            \"S_max\": 900, \"epsilon_sky\": 0.78, \"T_air_mean_C\": 25.0, \"A_air_C\": 10.0,\n            \"gamma_g\": 0.5, \"Delta_phi_g\": -1.0, \"U_mean\": 1.0, \"A_U\": 1.0,\n            \"daylength\": 12.0, \"t_sunrise\": 6.0, \"phi_air\": 15.0, \"phi_U\": 14.0,\n            \"f_sky\": 0.5, \"f_gnd\": 0.5\n        },\n        {\n            \"m\": 0.05, \"D\": 0.05, \"c\": 3500, \"alpha_sw\": 0.85, \"epsilon\": 0.95,\n            \"eta_cond\": 0.10, \"d_cond\": 0.01, \"k_sub\": 1.0, \"T_opt_C\": 33.0,\n            \"S_max\": 400, \"epsilon_sky\": 0.90, \"T_air_mean_C\": 22.0, \"A_air_C\": 6.0,\n            \"gamma_g\": 0.3, \"Delta_phi_g\": -1.0, \"U_mean\": 2.0, \"A_U\": 1.0,\n            \"daylength\": 12.0, \"t_sunrise\": 6.0, \"phi_air\": 15.0, \"phi_U\": 14.0,\n            \"f_sky\": 0.5, \"f_gnd\": 0.5\n        },\n        {\n            \"m\": 0.05, \"D\": 0.05, \"c\": 3500, \"alpha_sw\": 0.85, \"epsilon\": 0.95,\n            \"eta_cond\": 0.10, \"d_cond\": 0.01, \"k_sub\": 1.0, \"T_opt_C\": 34.0,\n            \"S_max\": 900, \"epsilon_sky\": 0.80, \"T_air_mean_C\": 20.0, \"A_air_C\": 8.0,\n            \"gamma_g\": 0.5, \"Delta_phi_g\": -1.0, \"U_mean\": 5.0, \"A_U\": 3.0,\n            \"daylength\": 12.0, \"t_sunrise\": 6.0, \"phi_air\": 15.0, \"phi_U\": 14.0,\n            \"f_sky\": 0.5, \"f_gnd\": 0.5\n        },\n        {\n            \"m\": 0.30, \"D\": 0.09, \"c\": 3500, \"alpha_sw\": 0.85, \"epsilon\": 0.95,\n            \"eta_cond\": 0.10, \"d_cond\": 0.01, \"k_sub\": 1.0, \"T_opt_C\": 38.0,\n            \"S_max\": 900, \"epsilon_sky\": 0.80, \"T_air_mean_C\": 28.0, \"A_air_C\": 12.0,\n            \"gamma_g\": 0.7, \"Delta_phi_g\": -1.0, \"U_mean\": 1.0, \"A_U\": 1.0,\n            \"daylength\": 12.0, \"t_sunrise\": 6.0, \"phi_air\": 15.0, \"phi_U\": 14.0,\n            \"f_sky\": 0.5, \"f_gnd\": 0.5\n        }\n    ]\n\n    all_results = []\n\n    for params in test_cases:\n        # Pre-calculate time series for forcing functions\n        t_sun_phase = (time_h - params[\"t_sunrise\"]) / params[\"daylength\"]\n        S_t = np.zeros_like(time_h)\n        daylight_mask = (time_h = params[\"t_sunrise\"])  (time_h  (params[\"t_sunrise\"] + params[\"daylength\"]))\n        S_t[daylight_mask] = params[\"S_max\"] * np.sin(np.pi * t_sun_phase[daylight_mask])\n\n        T_air_C_t = params[\"T_air_mean_C\"] + params[\"A_air_C\"] * np.sin(2 * np.pi * (time_h - params[\"phi_air\"]) / 24.0)\n        T_air_K_t = T_air_C_t + 273.15\n\n        T_g_C_t = params[\"T_air_mean_C\"] + params[\"A_air_C\"] * (1 + params[\"gamma_g\"]) * np.sin(2 * np.pi * (time_h - params[\"phi_air\"] - params[\"Delta_phi_g\"]) / 24.0)\n        T_g_K_t = T_g_C_t + 273.15\n\n        U_raw = params[\"U_mean\"] + params[\"A_U\"] * np.sin(2 * np.pi * (time_h - params[\"phi_U\"]) / 24.0)\n        U_t = np.maximum(0, U_raw)\n\n        # Body and heat transfer parameters\n        m, c, D = params[\"m\"], params[\"c\"], params[\"D\"]\n        A_surf = np.pi * D**2\n        A_proj = np.pi * (D / 2)**2\n        A_cond = params[\"eta_cond\"] * A_surf\n        h_cond = params[\"k_sub\"] / params[\"d_cond\"]\n        mc_inv = 1.0 / (m * c)\n        \n        # Initialize body temperature history\n        Tb_K_history = np.zeros(n_points)\n        Tb_K_history[0] = T_air_K_t[0]\n\n        # Time-stepping loop\n        for i in range(n_points - 1):\n            Tb_K = Tb_K_history[i]\n            T_air_K, T_g_K, U, S = T_air_K_t[i], T_g_K_t[i], U_t[i], S_t[i]\n            \n            # 1. Shortwave radiation\n            Q_sw = params[\"alpha_sw\"] * S * A_proj\n\n            # 2. Longwave radiation\n            T_sky_K_4 = params[\"epsilon_sky\"] * T_air_K**4\n            Q_lw = params[\"epsilon\"] * sigma * A_surf * (\n                params[\"f_sky\"] * (T_sky_K_4 - Tb_K**4) + params[\"f_gnd\"] * (T_g_K**4 - Tb_K**4)\n            )\n            \n            # 3. Convection\n            T_film_K = (Tb_K + T_air_K) / 2\n            beta = 1.0 / T_film_K\n            Re = U * D / nu\n            Ra = (g * beta * abs(Tb_K - T_air_K) * D**3) / (nu * alpha_air)\n            Nu_forced = 2.0 + 0.6 * Re**0.5 * Pr**(1/3)\n            _nat_denom = (1 + (0.469 / Pr)**(9/16))**(4/9)\n            Nu_nat = 2.0 + (0.589 * Ra**0.25) / _nat_denom\n            Nu = (Nu_forced**3 + Nu_nat**3)**(1/3)\n            h_c = Nu * k_air / D\n            Q_conv = h_c * A_surf * (T_air_K - Tb_K)\n\n            # 4. Conduction\n            Q_cond = h_cond * A_cond * (T_g_K - Tb_K)\n\n            # Total heat flux and temperature update\n            Q_net = Q_sw + Q_lw + Q_conv + Q_cond\n            dTb_dt = Q_net * mc_inv\n            Tb_K_history[i+1] = Tb_K + dTb_dt * dt_s\n\n        # Post-processing\n        Tb_C_history = Tb_K_history - 273.15\n        max_Tb_C = np.max(Tb_C_history)\n        \n        # Calculate time above T_opt, excluding t=0 point\n        time_above_opt_s = np.sum(Tb_C_history[1:]  params[\"T_opt_C\"]) * dt_s\n        time_above_opt_h = time_above_opt_s / 3600.0\n\n        all_results.append(round(max_Tb_C, 3))\n        all_results.append(round(time_above_opt_h, 3))\n\n    # Format and print the final output string\n    print(f\"[{','.join(map(str, all_results))}]\")\n\nsolve()\n```", "id": "2539109"}]}