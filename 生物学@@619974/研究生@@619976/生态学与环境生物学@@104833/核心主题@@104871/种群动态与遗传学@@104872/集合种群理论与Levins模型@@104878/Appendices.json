{"hands_on_practices": [{"introduction": "在掌握了莱文斯 (Levins) 模型的基本形式后，仅仅计算出平衡点（$p^*=0$ 和 $p^*=1-e/c$）是不够的。一个更核心的问题是：这些平衡点是稳定的吗？换句话说，当种群数量受到微小扰动时，它会恢复到平衡状态，还是会走向灭绝或另一个状态？本练习将引导你运用线性稳定性分析这一动力系统中的基本工具，通过计算与每个平衡点相关的特征值（$\\lambda$）来判断其稳定性，从而深刻理解集合种群持续生存的动态条件。[@problem_id:2508481]", "problem": "考虑一个由莱文斯模型描述的经典集合种群，其中状态变量 $p$ 表示物种占据的生境斑块的比例，且 $p \\in [0,1]$。假设每个斑块具有恒定的局部灭绝风险 $e>0$，以及一个速率参数为 $c>0$ 的质量作用定殖过程，使得占据率的变化速率由定殖和灭绝之间的净平衡给出。基于这些假设，可以写出关于 $p$ 的一个形式为 $\\frac{dp}{dt}=f(p)$ 的常微分方程 (ODE)，其中 $f(p)$ 依赖于 $c$、$e$ 和 $p$。\n\n从这些生态学假设（质量作用定殖与已占据和未占据斑块比例的乘积成正比，以及恒定的单位斑块灭绝率）出发，推导动力学函数 $f(p)$ 并确定系统的所有平衡点 $p^{*}$。然后，通过计算在 $p^{*}$ 处的一维线性化的特征值（其值等于 $f'(p^{*})$）来分析每个平衡点的线性稳定性。在两个平衡点处计算该量的值，并用 $c$ 和 $e$ 来完全简化表达式。\n\n将你的最终答案以行矩阵 $\\begin{pmatrix} \\lambda_{0}  \\lambda_{1} \\end{pmatrix}$ 的形式给出，其中 $\\lambda_{0}$ 是在 $p^{*}=0$ 处的特征值，$\\lambda_{1}$ 是在非平凡平衡点处的特征值。以单位时间的倒数为单位表示特征值。最终答案中不要包含解释性文本；对特征值符号的任何解释都只应出现在你的推导过程中。如果多个平衡点重合或某个平衡点位于 $[0,1]$ 区间之外，仍然报告通过形式计算得到的代数表达式。最终答案必须是一个解析表达式。", "solution": "该问题要求对经典的莱文斯集合种群模型进行推导和稳定性分析。我们必须首先根据所提供的生态学假设，将系统的动力学形式化。\n\n系统的状态由占据斑块的比例 $p$ 描述，其中 $p \\in [0, 1]$。$p$ 的变化速率，记作 $\\frac{dp}{dt}$，是两个相反过程（定殖和灭绝）的净结果。\n\n定殖过程被描述为一个质量作用现象，新斑块被定殖的速率与已占据斑块比例 $p$ 和未占据斑块比例 $(1-p)$ 的乘积成正比。已占据的斑块是定殖者的来源，未占据的斑块是定殖的目标。设有一个定殖速率参数 $c > 0$，则总定殖速率为：\n$$\n\\text{Colonization Rate} = c p (1-p)\n$$\n\n灭绝过程由一个恒定的单位斑块灭绝风险 $e > 0$ 描述。这意味着每个被占据的斑块在单位时间内都有一个恒定的概率变为灭绝。整个集合种群的总灭绝速率是这个单位斑块速率乘以当前被占据斑块的比例 $p$。因此，总灭绝速率为：\n$$\n\\text{Extinction Rate} = e p\n$$\n\n占据斑块比例的净变化速率是定殖速率与灭绝速率之差。这就给出了莱文斯模型的常微分方程 (ODE)：\n$$\n\\frac{dp}{dt} = f(p) = c p (1-p) - e p\n$$\n这就是控制该系统的动力学函数 $f(p)$。\n\n接下来，我们确定系统的平衡点（或不动点）$p^{*}$。平衡点是系统不发生变化的状态，这意味着 $\\frac{dp}{dt} = 0$。我们必须求解方程 $f(p^{*}) = 0$：\n$$\nc p^{*} (1-p^{*}) - e p^{*} = 0\n$$\n我们可以从表达式中提取公因子 $p^{*}$：\n$$\np^{*} [c (1-p^{*}) - e] = 0\n$$\n该方程对 $p^{*}$ 得出两个可能的解：\n1.  平凡平衡点：$p^{*}_0 = 0$。这对应于物种在整个集合种群中灭绝的状态。\n2.  非平凡平衡点，通过求解 $c (1-p^{*}) - e = 0$ 得到：\n    $$\n    c(1-p^{*}) = e\n    $$\n    $$\n    1 - p^{*} = \\frac{e}{c}\n    $$\n    $$\n    p^{*}_1 = 1 - \\frac{e}{c}\n    $$\n    这个平衡点代表一种持续存在的状态，其中定殖和灭绝处于平衡。为了使该平衡点具有生物学意义（即 $p^{*}_1 \\in (0, 1]$），必须满足条件 $c > e$。然而，题目要求我们不论参数值如何，都继续使用形式代数表达式进行计算。\n\n现在，我们来分析这两个平衡点的线性稳定性。一维系统在平衡点 $p^{*}$ 的稳定性由线性化系统的特征值的符号决定。这个特征值 $\\lambda$ 等于速率函数 $f'(p)$ 在平衡点 $p^{*}$ 处的导数值。负特征值（$\\lambda  0$）表示稳定平衡点，而正特征值（$\\lambda  0$）表示不稳定平衡点。\n\n首先，我们计算 $f(p)$ 关于 $p$ 的导数：\n$$\nf(p) = c p - c p^2 - e p\n$$\n$$\nf'(p) = \\frac{d}{dp} (c p - c p^2 - e p) = c - 2c p - e\n$$\n\n现在我们计算该导数在两个平衡点处的值。\n\n对于平凡平衡点 $p^{*}_0 = 0$：\n特征值 $\\lambda_0$ 由下式给出：\n$$\n\\lambda_0 = f'(0) = c - 2c(0) - e = c - e\n$$\n灭绝状态的稳定性取决于 $c-e$ 的符号。如果 $c  e$，在 $p=0$ 附近定殖能超过灭绝，因此该平衡点是不稳定的。如果 $c  e$，灭绝占主导地位，该平衡点是稳定的。\n\n对于非平凡平衡点 $p^{*}_1 = 1 - \\frac{e}{c}$：\n特征值 $\\lambda_1$ 由下式给出：\n$$\n\\lambda_1 = f'\\left(1 - \\frac{e}{c}\\right) = c - 2c\\left(1 - \\frac{e}{c}\\right) - e\n$$\n我们简化这个表达式：\n$$\n\\lambda_1 = c - \\left(2c \\cdot 1 - 2c \\cdot \\frac{e}{c}\\right) - e\n$$\n$$\n\\lambda_1 = c - (2c - 2e) - e\n$$\n$$\n\\lambda_1 = c - 2c + 2e - e\n$$\n$$\n\\lambda_1 = -c + e = e - c\n$$\n这个特征值决定了持续存在平衡点的稳定性。如果 $c  e$，则 $\\lambda_1  0$，该平衡点是稳定的。这与它在生物学相关域中存在的条件是一致的。\n\n题目要求最终答案为包含两个特征值 $\\lambda_0$ 和 $\\lambda_1$ 的行矩阵。\n计算出的特征值为 $\\lambda_0 = c - e$ 和 $\\lambda_1 = e - c$。", "answer": "$$\\boxed{\\begin{pmatrix} c - e  e - c \\end{pmatrix}}$$", "id": "2508481"}, {"introduction": "确定了一个稳定的种群持久性平衡点之后，生态学家和保育生物学家下一步关心的是：这个平衡状态对环境变化有多敏感？例如，如果我们通过建立生态廊道来提高定殖率（$c$），或者由于气候变化导致局部灭绝率（$e$）上升，种群的整体占有率会如何响应？本练习要求你使用微积分中的偏导数工具来进行敏感性分析，量化平衡占有率（$p^*$）对模型参数 $c$ 和 $e$ 变化的响应程度，这是评估保育措施效果和生态风险的关键一步。[@problem_id:2508459]", "problem": "考虑一个拥有许多生境斑块的景观，其中存在一个遵循经典集合种群框架的物种。令 $p(t)$ 表示在时间 $t$ 被占据斑块的比例。假设存在以下基本生态机制，每个机制都基于标准的集合种群推理：定殖事件通过由已占据斑块产生的繁殖体到达空斑块而发生，局部灭绝在已占据斑块中独立发生。令单个斑块的定殖率为 $c0$，单个斑块的灭绝率为 $e0$。在斑块数量极大的情况下，$p(t)$ 的期望动态由一个确定性的常微分方程（ODE）描述。\n\n仅使用这些基本前提，完成以下任务：\n- 建立由上述生态机制所蕴含的关于 $p(t)$ 的常微分方程。\n- 找出所有平衡点，并确定在存在时满足 $p^{*}\\in(0,1)$ 的内部平衡点 $p^{*}$。\n- 假设内部平衡点存在，推导敏感度 $\\frac{\\partial p^{*}}{\\partial c}$ 和 $\\frac{\\partial p^{*}}{\\partial e}$ 的精确符号表达式。\n\n将你的最终答案以单行矩阵的形式给出，矩阵中按顺序包含 $\\frac{\\partial p^{*}}{\\partial c}$ 和 $\\frac{\\partial p^{*}}{\\partial e}$。将最终答案表示为关于 $c$ 和 $e$ 的精确代数函数，不进行数值近似或四舍五入。由于 $p^{*}$ 是无量纲的，因此不需要单位。", "solution": "已占据斑块比例的变化率 $\\frac{dp}{dt}$，由空斑块的定殖速率与已占据斑块的灭绝速率之间的平衡决定。\n\n首先，我们构建定殖项。定殖需要定殖者的来源，即已占据的斑块（比例为 $p$），以及可供定殖的生境，即空斑块（比例为 $1 - p$）。因此，新斑块的定殖速率与这些比例的乘积成正比，并按单个斑块定殖速率常数 $c$ 进行缩放。\n定殖速率 $= c \\cdot p \\cdot (1 - p)$\n\n其次，我们构建灭绝项。灭绝发生在已占据的斑块（比例为 $p$）中，其单个斑块的恒定速率为 $e$。\n灭绝速率 $= e \\cdot p$\n\n已占据斑块比例的净变化率是这两个速率之差。这就得出了控制集合种群动态的常微分方程：\n$$\n\\frac{dp}{dt} = c p(1-p) - ep\n$$\n\n接下来，我们通过将变化率设为零（$\\frac{dp}{dt} = 0$）来求系统的平衡点：\n$$\nc p(1-p) - ep = 0\n$$\n我们可以从该方程中提出公因子 $p$：\n$$\np [c(1-p) - e] = 0\n$$\n这个方程为平衡时的已占据斑块比例（我们记为 $p_{eq}$）提供了两个可能的解。\n\n第一个平衡点是平凡平衡点：\n$$\np_{eq,1} = 0\n$$\n这对应于物种在集合种群中的完全灭绝。\n\n第二个平衡点是通过将方括号中的项设为零来求得的：\n$$\nc(1-p) - e = 0\n$$\n$$\nc - cp - e = 0\n$$\n$$\ncp = c - e\n$$\n$$\np = \\frac{c - e}{c} = 1 - \\frac{e}{c}\n$$\n这就是非平凡平衡点，或称内部平衡点，我们记为 $p^*$：\n$$\np^{*} = 1 - \\frac{e}{c}\n$$\n为使该内部平衡点具有生物学意义，它必须满足条件 $p^{*} \\in (0,1)$。\n条件 $p^*  1$ 要求 $1 - \\frac{e}{c}  1$，可简化为 $-\\frac{e}{c}  0$。由于 $e$ 和 $c$ 都被定义为正常数（$e0, c0$）, 该不等式恒成立。\n条件 $p^*  0$ 要求 $1 - \\frac{e}{c}  0$，这意味着 $1  \\frac{e}{c}$，即 $c  e$。这是一个关键阈值：只有当定殖率大于灭绝率时，内部平衡点才存在。问题要求我们为推导敏感度而假定该平衡点存在。\n\n最后，我们推导内部平衡点 $p^*$ 相对于参数 $c$ 和 $e$ 的敏感度的精确符号表达式。$p^*$ 对定殖率 $c$ 变化的敏感度由偏导数 $\\frac{\\partial p^{*}}{\\partial c}$ 给出。\n$$\n\\frac{\\partial p^{*}}{\\partial c} = \\frac{\\partial}{\\partial c} \\left( 1 - \\frac{e}{c} \\right) = \\frac{\\partial}{\\partial c} (1) - \\frac{\\partial}{\\partial c} (e c^{-1})\n$$\n常数的导数为零，应用幂函数求导法则：\n$$\n\\frac{\\partial p^{*}}{\\partial c} = 0 - e(-1)c^{-2} = \\frac{e}{c^2}\n$$\n\n$p^*$ 对灭绝率 $e$ 变化的敏感度由偏导数 $\\frac{\\partial p^{*}}{\\partial e}$ 给出。\n$$\n\\frac{\\partial p^{*}}{\\partial e} = \\frac{\\partial}{\\partial e} \\left( 1 - \\frac{e}{c} \\right) = \\frac{\\partial}{\\partial e} (1) - \\frac{\\partial}{\\partial e} \\left( \\frac{1}{c} e \\right)\n$$\n将 $c$ 视为关于 $e$ 的常数：\n$$\n\\frac{\\partial p^{*}}{\\partial e} = 0 - \\frac{1}{c} = -\\frac{1}{c}\n$$\n这些敏感度对于 $c$ 的变化为正，对于 $e$ 的变化为负，这在生态学上是直观的：增加定殖率会增加平衡时的斑块占据率，而增加灭绝率则会降低它。\n\n最终答案将以包含这两个表达式的单行矩阵形式呈现。", "answer": "$$\n\\boxed{\\begin{pmatrix} \\frac{e}{c^{2}}  -\\frac{1}{c} \\end{pmatrix}}\n$$", "id": "2508459"}, {"introduction": "经典的莱文斯模型为了理论的简洁性，做出了所有斑块均质且等价连通的强假设。然而，在现实世界中，栖息地斑块在面积、质量和空间位置上千差万别。本练习将带领你从抽象理论迈向更真实的应用，通过编写代码来求解一个空间异质性的集合种群模型，你将能够模拟并评估在一个具体景观中，增加一个高质量的核心斑块（例如一个大型自然保护区）对整个集合种群网络生存状态的实际影响。这不仅是对理论的深化，更是现代生态学研究和保育实践中必不可少的计算技能训练。[@problem_id:2508419]", "problem": "考虑一个空间显性的Levins型集合种群模型，其中有有限个生境斑块，索引为 $i \\in \\{1,\\dots,N\\}$。斑块 $i$ 的面积为 $A_i  0$，位于点 $\\mathbf{z}_i \\in \\mathbb{R}^2$，其随时间变化的占据概率为 $x_i(t) \\in [0,1]$。假设以下核心定义源自定植-灭绝框架。\n\n1. 斑块 $i$ 中的灭绝是一个速率参数为 $e  0$ 的泊松过程，产生一个损失项 $- e \\, x_i(t)$。\n2. 斑块 $i$ 的定植由所有其他已占据斑块的质量作用驱动，并受一个随欧几里得距离指数衰减的空间扩散核的调制。具体来说，定义欧几里得距离 $d_{ij} = \\|\\mathbf{z}_i - \\mathbf{z}_j\\|_2$ 和扩散核 $k(d) = \\exp(-\\alpha d)$，其中 $\\alpha  0$。设定植系数为 $m  0$。进入斑块 $i$ 的总定植流与其接收面积 $A_i$、所有其他斑块经占据率加权、面积加权、距离调制的贡献以及该斑块的可用性 $(1 - x_i(t))$ 成正比。这产生了一个形式如下的流入项\n$$\nm \\, A_i \\, \\bigl(1 - x_i(t)\\bigr)\\, \\sum_{\\substack{j=1\\\\ j\\neq i}}^N A_j \\, x_j(t)\\, e^{-\\alpha d_{ij}}.\n$$\n\n在这些假设下，每个斑块 $i$ 的动态由以下方程决定\n$$\n\\frac{dx_i}{dt} \\;=\\; m \\, A_i \\, \\bigl(1 - x_i(t)\\bigr)\\, \\sum_{\\substack{j=1\\\\ j\\neq i}}^N A_j \\, x_j(t)\\, e^{-\\alpha d_{ij}} \\;-\\; e \\, x_i(t).\n$$\n\n您的任务是，对于给定的景观和参数集，评估增加一个高质量斑块对整个系统平衡占据率的影响。具体要求如下：\n\n- 对于每个指定的测试用例，首先计算基准景观的平衡占据向量 $\\mathbf{x}^\\star \\in [0,1]^N$，该向量满足所有 $i \\in \\{1,\\dots,N\\}$ 的稳态条件 $\\frac{dx_i}{dt} = 0$。\n- 然后，通过增加一个额外的斑块来扩增景观，该斑块的面积等于基准斑块平均面积的 $4.0$ 倍，并位于基准坐标的质心处。在相同的参数下，为扩增后的景观（包含 $N+1$ 个斑块）重新计算平衡占据率。\n- 令 $\\bar{x} = \\frac{1}{N}\\sum_{i=1}^N x_i^\\star$ 表示基准平均占据率，令 $\\bar{x}_{+} = \\frac{1}{N+1}\\sum_{i=1}^{N+1} x_{i,+}^\\star$ 表示扩增后的平均占据率。对于每个测试用例，报告平均占据率的变化量\n$$\n\\Delta = \\bar{x}_{+} - \\bar{x},\n$$\n以小数形式表示（而非百分比）。\n\n您必须将稳态作为上述动力学系统的非线性不动点来求解。不要假设存在任何外部提供的定植者池。对所有 $d_{ij}$ 使用平面上的欧几里得距离，并使用 $e^{-\\alpha d_{ij}}$ 作为扩散核。本练习中没有物理单位；所有距离、面积、速率和占据率都是无量纲的。所有报告的值必须是小数。\n\n测试套件。在所有测试用例中使用以下通用的基准景观：\n- 基准斑块数量: $N = 12$。\n- 基准坐标：一个规则的矩形网格，其中\n  - $x \\in \\{0, 1, 2, 3\\}$ 且 $y \\in \\{0, 1, 2\\}$，\n  因此 $\\mathbf{z}_i$ 枚举了所有有序对 $(x,y)$，其中 $x$ 从 $0$ 到 $3$，$y$ 从 $0$ 到 $2$。\n- 基准面积（按行主序排列，先按 $y$ 递增，再按 $x$ 递增）：\n  $[\\,0.8,\\,1.1,\\,1.0,\\,0.9,\\,1.2,\\,0.7,\\,1.3,\\,1.0,\\,0.9,\\,1.1,\\,1.2,\\,0.8\\,]$。\n- 新增斑块：面积等于基准面积平均值的 $4.0$ 倍，位置等于基准坐标的质心，即所有基准 $\\mathbf{z}_i$ 的算术平均值。\n\n评估以下四个参数集：\n- 情况 A（一般情况）：$m = 0.35$，$e = 0.20$，$\\alpha = 1.00$。\n- 情况 B（接近存续阈值）：$m = 0.12$，$e = 0.20$，$\\alpha = 1.00$。\n- 情况 C（高定植率，缓坡核）：$m = 1.20$，$e = 0.20$，$\\alpha = 0.50$。\n- 情况 D（中等定植率，陡坡核）：$m = 0.50$，$e = 0.20$，$\\alpha = 3.00$。\n\n算法约束：\n- 您必须通过直接求解所有 $i$ 的稳态条件 $\\frac{dx_i}{dt} = 0$ 来计算稳态，使用一种确定性数值方案，该方案在这些单调动态下保证能收敛到存在的不动点。一种可接受的方法是对从上述动力学系统导出的稳态方程进行不动点迭代，其收敛容差在最大范数下至多为 $10^{-10}$，最大迭代次数至少为 $10^3$。如果系统不能存续，则唯一的稳态是零向量。\n- 对于每个测试用例，输出一个浮点数 $\\Delta$，四舍五入到六位小数。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔结果列表，顺序为 [情况 A, 情况 B, 情况 C, 情况 D]。例如，打印输出必须与\n$[r_A,r_B,r_C,r_D]$\n完全一样，其中每个 $r_\\cdot$ 是一个四舍五入到六位小数的小数。", "solution": "问题的核心是找到一个描述生境斑块占据概率 $x_i(t)$ 的耦合非线性常微分方程组的平衡态。每个斑块 $i$ 的控制方程由下式给出：\n$$\n\\frac{dx_i}{dt} \\;=\\; m \\, A_i \\, \\bigl(1 - x_i(t)\\bigr)\\, \\sum_{\\substack{j=1\\\\ j\\neq i}}^N A_j \\, x_j(t)\\, e^{-\\alpha d_{ij}} \\;-\\; e \\, x_i(t)\n$$\n此处，$x_i$ 是斑块 $i$ 的占据率，$A_i$ 是其面积，$d_{ij}$ 是斑块 $i$ 和 $j$ 之间的距离，$m$、$e$ 和 $\\alpha$ 分别是定植、灭绝和扩散衰减的参数。\n\n当系统随时间不再变化时，即对所有 $i \\in \\{1,\\dots,N\\}$ 都有 $\\frac{dx_i}{dt} = 0$，系统达到平衡或稳态，用向量 $\\mathbf{x}^\\star$ 表示。将时间导数设为零，得到一个包含 $N$ 个非线性代数方程的方程组：\n$$\ne \\, x_i \\;=\\; m \\, A_i \\, (1 - x_i) \\, \\sum_{\\substack{j=1\\\\ j\\neq i}}^N A_j \\, x_j \\, e^{-\\alpha d_{ij}}\n$$\n为了求解 $x_i$，我们可以重新整理这个方程。让我们将来自所有其他斑块对斑块 $i$ 的“定植压力”定义为 $C_i(\\mathbf{x}) = m \\, A_i \\, \\sum_{j \\neq i} A_j \\, x_j \\, e^{-\\alpha d_{ij}}$。方程变为：\n$$\ne \\, x_i = (1 - x_i) \\, C_i(\\mathbf{x}) = C_i(\\mathbf{x}) - x_i \\, C_i(\\mathbf{x})\n$$\n求解 $x_i$ 可得：\n$$\nx_i (e + C_i(\\mathbf{x})) = C_i(\\mathbf{x}) \\implies x_i = \\frac{C_i(\\mathbf{x})}{e + C_i(\\mathbf{x})}\n$$\n这种形式为寻找平衡向量 $\\mathbf{x}^\\star$ 提供了一种自然的不动点迭代方案。我们可以定义一个迭代映射 $\\mathbf{F}: [0,1]^N \\to [0,1]^N$，其第 $i$ 个分量由下式给出：\n$$\nF_i(\\mathbf{x}) = \\frac{m A_i \\sum_{j \\neq i} A_j x_j e^{-\\alpha d_{ij}}}{e + m A_i \\sum_{j \\neq i} A_j x_j e^{-\\alpha d_{ij}}}\n$$\n迭代过程则为 $\\mathbf{x}^{(k+1)} = \\mathbf{F}(\\mathbf{x}^{(k)})$。我们用一个起始向量来初始化系统，例如 $\\mathbf{x}^{(0)}$ 的所有元素都为 1，代表一个完全被占据的景观。映射 $\\mathbf{F}$ 是单调的，即如果分量上 $\\mathbf{x} \\ge \\mathbf{y}$，那么 $\\mathbf{F}(\\mathbf{x}) \\ge \\mathbf{F}(\\mathbf{y})$。对于此类系统，从 $\\mathbf{x}^{(0)} = (1, \\dots, 1)$ 开始迭代，可以保证收敛到 $[0,1]^N$ 中最大的、具有物理意义的不动点。如果这个极限是零向量，则意味着在该参数下集合种群无法存活，将会灭绝。当连续迭代之间的变化可以忽略不计时，即 $\\|\\mathbf{x}^{(k+1)} - \\mathbf{x}^{(k)}\\|_\\infty  10^{-10}$ 时，迭代终止。\n\n计算流程如下：\n1.  对于每个由参数 $m$、$e$ 和 $\\alpha$ 指定的测试用例：\n2.  定义包含 $N=12$ 个斑块的基准景观。坐标 $\\mathbf{z}_i$ 是一个 $4 \\times 3$ 网格上的点，面积 $A_i$ 已给出。\n3.  使用上述不动点迭代方法计算此基准景观的平衡占据向量 $\\mathbf{x}^\\star$。定植压力的求和可以通过矩阵-向量乘法高效计算。\n4.  计算基准平均占据率 $\\bar{x} = \\frac{1}{N}\\sum_{i=1}^N x_i^\\star$。\n5.  通过增加第 $(N+1)$ 个斑块来构建扩增景观。其面积是基准面积平均值的 $4.0$ 倍，其位置是基准斑块坐标的质心。\n6.  使用相同的迭代求解器为新的 $(N+1)$ 斑块系统重新计算平衡占据向量 $\\mathbf{x}_{+}^\\star$。\n7.  计算扩增后的平均占据率 $\\bar{x}_{+} = \\frac{1}{N+1}\\sum_{i=1}^{N+1} x_{i,+}^\\star$。\n8.  该测试用例的最终结果是差值 $\\Delta = \\bar{x}_{+} - \\bar{x}$。\n\n对四个参数集（情况 A、B、C、D）中的每一个都执行此流程，以确定在不同生态情景下增加一个高质量斑块的影响。代码将执行这些计算并按规定格式化输出。", "answer": "```python\nimport numpy as np\nfrom scipy.spatial import distance\n\ndef compute_equilibrium(m, e, alpha, areas, coords, tol=1e-10, max_iter=5000):\n    \"\"\"\n    Computes the equilibrium occupancy vector for a given metapopulation landscape.\n\n    Args:\n        m (float): Colonization coefficient.\n        e (float): Extinction rate.\n        alpha (float): Dispersal kernel decay parameter.\n        areas (np.ndarray): Array of patch areas.\n        coords (np.ndarray): Array of patch coordinates.\n        tol (float): Convergence tolerance.\n        max_iter (int): Maximum number of iterations.\n\n    Returns:\n        np.ndarray: The equilibrium occupancy vector.\n    \"\"\"\n    N = len(areas)\n    if N == 0:\n        return np.array([])\n        \n    dist_matrix = distance.cdist(coords, coords, 'euclidean')\n    kernel_matrix = np.exp(-alpha * dist_matrix)\n    np.fill_diagonal(kernel_matrix, 0)\n\n    # The interaction matrix G where S_i = sum_j G_ij x_j\n    # G_{ij} = kernel_matrix_{ij} * areas_j for i != j\n    # This is built by broadcasting the areas vector across the kernel matrix columns.\n    G = kernel_matrix * areas.reshape(1, N)\n\n    # Initial guess: fully occupied landscape. This ensures convergence to the\n    # largest (and typically the only stable non-trivial) fixed point.\n    x = np.ones(N)\n\n    for _ in range(max_iter):\n        x_old = x\n        \n        # Colonization pressure term S_i = sum_{j!=i} A_j x_j exp(-alpha d_ij)\n        # This is equivalent to G @ x\n        colonization_pressure_sum = G @ x\n        \n        # C_i = m * A_i * S_i\n        C = m * areas * colonization_pressure_sum\n        \n        # Iteration: x_i = C_i / (e + C_i)\n        # Add a small epsilon to the denominator to prevent division by zero,\n        # although with e  0 this is not strictly necessary.\n        x = C / (e + C)\n        \n        if np.max(np.abs(x - x_old))  tol:\n            break\n            \n    return x\n\ndef solve():\n    \"\"\"\n    Main solver function to run all test cases and print results.\n    \"\"\"\n    # Baseline landscape setup\n    N_base = 12\n    base_coords_list = [(x, y) for y in range(3) for x in range(4)]\n    base_coords = np.array(base_coords_list, dtype=float)\n    base_areas = np.array([\n        0.8, 1.1, 1.0, 0.9, 1.2, 0.7, 1.3, 1.0, 0.9, 1.1, 1.2, 0.8\n    ])\n\n    test_cases = [\n        # Case A: general case\n        (0.35, 0.20, 1.00),\n        # Case B: near persistence threshold\n        (0.12, 0.20, 1.00),\n        # Case C: high colonization, shallow kernel\n        (1.20, 0.20, 0.50),\n        # Case D: moderate colonization, steep kernel\n        (0.50, 0.20, 3.00),\n    ]\n\n    results = []\n\n    for m, e, alpha in test_cases:\n        # 1. Compute baseline equilibrium and mean occupancy\n        x_star_base = compute_equilibrium(m, e, alpha, base_areas, base_coords)\n        mean_x_base = np.mean(x_star_base)\n\n        # 2. Setup augmented landscape\n        mean_base_area = np.mean(base_areas)\n        added_patch_area = 4.0 * mean_base_area\n        added_patch_coord = np.mean(base_coords, axis=0)\n        \n        aug_areas = np.append(base_areas, added_patch_area)\n        aug_coords = np.vstack([base_coords, added_patch_coord])\n\n        # 3. Compute augmented equilibrium and mean occupancy\n        x_star_aug = compute_equilibrium(m, e, alpha, aug_areas, aug_coords)\n        mean_x_aug = np.mean(x_star_aug)\n\n        # 4. Calculate change in mean occupancy and store result\n        delta = mean_x_aug - mean_x_base\n        results.append(round(delta, 6))\n\n    # Final print statement in the exact required format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2508419"}]}