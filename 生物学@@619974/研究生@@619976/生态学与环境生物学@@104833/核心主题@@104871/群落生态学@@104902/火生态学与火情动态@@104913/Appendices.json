{"hands_on_practices": [{"introduction": "火的蔓延速率是火灾科学中的一个基本指标，它受到燃料、天气和地形等多种因素的复杂影响。本练习旨在探讨物理因素，特别是地形坡度，如何通过热传递机制显著改变火灾行为。通过从第一性原理出发，推导一个广泛使用的火蔓延模型中的关键组成部分，你将能更深刻地理解控制火动态的物理过程，以及这些过程如何被转化为预测模型 [@problem_id:2491842]。", "problem": "当地表火前方的未燃燃料吸收的净热通量使其达到燃点时，火就会向前蔓延。设前进蔓延速率 (ROS) 用 $R$ 表示。在无风无坡度的情况下，将火焰到未燃燃料的参考热通量表示为 $q_{0}''$，相应的蔓延速率表示为 $R_{0}$。当-地面向上倾斜一个角度 $\\theta$（以度为单位），并且风（如果存在）与上坡方向一致时，由于平行于地表的浮力流和风驱动流的分量，未燃燃料的对流加热会增加，这会使火焰朝向下坡方的燃料倾斜。\n\n从以下基本原则出发：\n- 蔓延的能量守恒：蔓延速率 $R$ 与进入未燃燃料的净热通量成正比，与单位面积的有效热汇成反比，其比例关系在无风、平坦情况下的 $R_{0}$ 中体现。\n- 对流传热换算：对于受热表面上的湍流边界层，对流传热系数与特征沿面流速的正幂成比例，对于羽流-火焰系统，这可以一阶近似地表示为与有效沿面对流速度的平方成正比，因此由沿面流动产生的增量对流通量与该沿面速度的平方成正比。\n- 在无风、坡度角为 $\\theta$ 的斜坡上，对于中等大小的 $\\theta$，浮力驱动的沿面分量与 $\\tan\\theta$ 成比例；当风与上坡方向一致时，有效沿面对流速度是上坡风分量和浮力沿坡分量的总和。\n\n(a) 使用这些基本原则，论证仅由坡度引起的对流加热的乘性增强效应，其一阶近似可以由一个无量纲坡度因子 $\\phi_{s}$ 表示，且该因子与 $\\tan^{2}\\theta$ 成比例。然后，通过采用将此比例关系与在细小地表燃料中观测到的蔓延联系起来的广泛使用的经验校准，将 $\\phi_{s}$ 写成校准形式\n$$\n\\phi_{s} \\;=\\; a_{s}\\,\\beta^{-0.3}\\,\\tan^{2}\\theta,\n$$\n其中 $\\beta$ 是填充率， $a_{s}$ 是针对细小枯死燃料的经验常数。使用 $a_{s}=5.275$。\n\n(b) 在无风情况下，根据标准的传播平衡（其中坡度线性地增加蔓延的驱动项），带有坡度 $\\theta$ 的蔓延速率为 $R=R_{0}\\left(1+\\phi_{s}\\right)$。对于填充率 $\\beta=0.02$、坡度为 $\\theta=30$ 度且无风的细小燃料床，计算相对于平坦地面的蔓延速率增加值，以无量纲小数表示，即 $(R-R_{0})/R_{0}$。将您的答案四舍五入到三位有效数字。答案以无量纲小数表示（不带百分号）。", "solution": "对问题陈述进行验证。\n\n逐字提取已知条件：\n- $R$：前进蔓延速率 (ROS)。\n- $R_{0}$：无风无坡度时的蔓延速率。\n- $q_{0}''$：对应于 $R_{0}$ 的参考热通量。\n- $\\theta$：地面倾斜角，以度为单位。\n- 原则1：$R$ 与净热通量成正比，与单位面积的有效热汇成反比。\n- 原则2：由沿面流动产生的增量对流通量与有效沿面对流速度的平方成正比。\n- 原则3：在无风情况下，浮力驱动的沿面分量与 $\\tan\\theta$ 成正比。\n- (a) 部分要求论证 $\\phi_s \\propto \\tan^2\\theta$ 的比例关系，并给出了校准形式 $\\phi_{s} = a_{s}\\,\\beta^{-0.3}\\,\\tan^{2}\\theta$。\n- 给定常数：$a_{s}=5.275$。\n- $\\beta$：填充率。\n- (b) 部分给出了带坡度的蔓延速率关系式：$R=R_{0}\\left(1+\\phi_{s}\\right)$。\n- 用于计算的给定值：$\\beta=0.02$，$\\theta=30$ 度。\n- 目标是计算蔓延的相对增量，$(R-R_{0})/R_{0}$。\n\n验证结论：\n问题有效。该问题在科学上基于应用于野火模型的传热学和燃烧学原理，这是应用物理和工程学中的一个标准课题。其前提是该领域中常见的基于物理动机的简化（例如，Rothermel 蔓延模型）。问题提法严谨，为求得唯一解提供了所有必要的原理、公式和数据。问题是客观的，没有歧义或矛盾。\n\n求解过程如下。\n\n(a) 部分：坡度因子 $\\phi_{s}$ 的比例关系推导。\n\n根据蔓延的能量守恒原理，蔓延速率 $R$ 与未燃燃料吸收的单位面积净热通量 $q''_{net}$ 成正比。我们可以将其写为 $R = C \\cdot q''_{net}$，其中 $C$ 是一个包含燃料热汇特性的常数。\n\n在无风和平坦地形（坡度 $\\theta=0$）的参考情况下，蔓延速率为 $R_0$，热通量为 $q_0''$。因此，$R_0 = C \\cdot q_0''$。\n\n在斜坡上，由于火焰倾斜和沿地表的浮力驱动流，会产生一个额外的对流热通量分量 $q''_{conv,inc}$。总净热通量是参考通量和这个增量通量之和：$q''_{net} = q_0'' + q''_{conv,inc}$。\n\n因此，在斜坡上的蔓延速率为：\n$$\nR = C \\cdot (q_0'' + q''_{conv,inc}) = (C \\cdot q_0'') \\left(1 + \\frac{q''_{conv,inc}}{q_0''}\\right) = R_0 \\left(1 + \\frac{q''_{conv,inc}}{q_0''}\\right)\n$$\n问题给出了表达式 $R=R_{0}\\left(1+\\phi_{s}\\right)$。通过比较这两种形式，我们将无量纲坡度因子 $\\phi_s$ 确定为增量对流热通量与参考热通量之比：\n$$\n\\phi_s = \\frac{q''_{conv,inc}}{q_0''}\n$$\n由于 $q_0''$ 是一个常数参考值，$\\phi_s$ 与增量对流通量成正比：$\\phi_s \\propto q''_{conv,inc}$。\n\n第二条原则指出，该增量对流通量与有效沿面对流速度（我们表示为 $U_{eff}$）的平方成正比。\n$$\nq''_{conv,inc} \\propto U_{eff}^2\n$$\n第三条原则指出，在无风情况下，沿面浮力驱动与 $\\tan\\theta$ 成正比。该驱动力驱动流动，因此产生的有效速度也与该项成正比。\n$$\nU_{eff} \\propto \\tan\\theta\n$$\n结合这些比例关系，我们得到 $\\phi_s$ 的比例关系：\n$$\n\\phi_s \\propto q''_{conv,inc} \\propto U_{eff}^2 \\propto (\\tan\\theta)^2\n$$\n因此，我们根据给定的基本原则论证了坡度因子 $\\phi_s$ 与 $\\tan^2\\theta$ 成正比。问题接着给出了经验校准形式，这与我们的推导一致：\n$$\n\\phi_{s} = a_{s}\\,\\beta^{-0.3}\\,\\tan^{2}\\theta\n$$\n给定常数 $a_s = 5.275$。\n\n(b) 部分：蔓延速率相对增量的计算。\n\n需要计算的量是相对于平坦地形的蔓延速率增加值，以无量纲小数表示。这由表达式 $(R-R_{0})/R_{0}$ 给出。\n\n使用关系式 $R = R_{0}(1+\\phi_{s})$，我们可以通过代数运算求出所需量：\n$$\nR - R_0 = R_0(1+\\phi_s) - R_0 = R_0 + R_0\\phi_s - R_0 = R_0\\phi_s\n$$\n两边同除以 $R_0$，我们得到：\n$$\n\\frac{R-R_0}{R_0} = \\phi_s\n$$\n问题简化为在指定条件下计算 $\\phi_s$ 的值。公式为：\n$$\n\\phi_{s} = a_{s}\\,\\beta^{-0.3}\\,\\tan^{2}\\theta\n$$\n给定的值为 $a_{s} = 5.275$，$\\beta = 0.02$，以及 $\\theta = 30^{\\circ}$。\n\n首先，我们计算三角函数项。\n$$\n\\tan(30^{\\circ}) = \\frac{1}{\\sqrt{3}}\n$$\n$$\n\\tan^2(30^{\\circ}) = \\left(\\frac{1}{\\sqrt{3}}\\right)^2 = \\frac{1}{3}\n$$\n接下来，我们将给定值代入 $\\phi_s$ 的公式中：\n$$\n\\phi_s = 5.275 \\times (0.02)^{-0.3} \\times \\frac{1}{3}\n$$\n我们计算 $(0.02)^{-0.3}$ 这一项：\n$$\n(0.02)^{-0.3} = \\left(\\frac{2}{100}\\right)^{-0.3} = \\left(\\frac{1}{50}\\right)^{-0.3} = 50^{0.3}\n$$\n$\\phi_s$ 的表达式为：\n$$\n\\phi_s = \\frac{5.275}{3} \\times 50^{0.3}\n$$\n现在我们计算数值：\n$$\n50^{0.3} \\approx 3.2336009\n$$\n$$\n\\phi_s \\approx \\frac{5.275}{3} \\times 3.2336009 \\approx 1.758333... \\times 3.2336009 \\approx 5.686000...\n$$\n问题要求答案四舍五入到三位有效数字。计算值为 $5.686000...$。第四位有效数字是 $6$，大于或等于 $5$，因此我们将第三位有效数字向上取整。结果是 $5.69$。\n\n蔓延的相对增量等于 $\\phi_s$。\n$$\n\\frac{R-R_0}{R_0} = \\phi_s \\approx 5.69\n$$", "answer": "$$\\boxed{5.69}$$", "id": "2491842"}, {"introduction": "现代火灾管理要求超越确定性预测，对预报中的不确定性进行量化，以便更好地进行风险评估。本练习将蒙特卡洛模拟应用于一个基于物理的火蔓延模型，整合了风和燃料湿度等关键环境驱动因素的预报不确定性。通过构建一个概率性预报并计算火蔓延速率超过临界管理阈值的概率，你将实践一项在作战火灾管理和战略规划中至关重要的技能 [@problem_id:2491920]。", "problem": "您的任务是构建一个用于描述不确定天气条件下地表火蔓延速率的概率模型，并计算一个超越概率。请使用Rothermel地表火蔓延框架中成熟的组成部分，并限定于无坡度、均质细小死燃料的情况。具体来说，蔓延速率由以下乘法形式给出\n$$\nR = R_b \\,\\varphi_w(U)\\,\\eta_M(M),\n$$\n其中，$R$ 是蔓延速率，单位为 $\\mathrm{m/s}$；$R_b$ 是基准（无风、无坡度）蔓延速率，单位为 $\\mathrm{m/s}$；$\\varphi_w(U)$ 是风因子；$\\eta_M(M)$ 是细小死燃料的湿度阻尼因子。假设采用以下经过充分测试的形式：\n- 风因子：\n$$\n\\varphi_w(U) = 1 + C\\,U^B,\n$$\n其中，$U$ 是10米高空开阔地风速，单位为 $\\mathrm{m/s}$；$C$ 和 $B$ 是燃料特定的正常数。\n- 湿度阻尼因子（细小死燃料；熄火含水率 $M_x$）：\n$$\n\\eta_M(M) = \n\\begin{cases}\n\\max\\{0,\\,\\min\\{1,\\,1 - 2.59\\,x + 5.11\\,x^2 - 3.52\\,x^3\\}\\}, & \\text{if } M < M_x, \\\\\n0, & \\text{if } M \\ge M_x,\n\\end{cases}\n\\quad\\text{其中 } x = \\dfrac{M}{M_x}.\n$$\n假设天气预报的不确定性由独立的截断正态分布表示：\n- 风速 $U \\sim \\mathcal{N}(\\mu_U,\\sigma_U^2)$，截断于 $[0,\\infty)$，单位为 $\\mathrm{m/s}$。\n- 细小死燃料含水率 $M \\sim \\mathcal{N}(\\mu_M,\\sigma_M^2)$，截断于 $[0,1]$，作为单位为 $\\mathrm{kg/kg}$（无量纲）的质量分数。\n在单个测试案例中，所有参数均为常数。我们关心的超越概率为\n$$\np = \\mathbb{P}\\left(R > R_{\\mathrm{th}}\\right),\n$$\n其中，$R_{\\mathrm{th}}$ 是一个管理阈值，单位为 $\\mathrm{m/s}$。将概率 $p$ 表示为小数点后保留六位的小数。\n\n基本原理：使用上述 Rothermel 地表火蔓延速率的乘法结构及其常用的风和湿度调节子模型；利用概率定义为联合密度上的积分，并通过截断下的蒙特卡洛采样对其进行近似。\n\n计算方法约束：\n- 每个测试案例使用独立的蒙特卡洛采样，样本数量 $N = 200000$。\n- 严格按照规定使用截断正态分布，其中 $U$ 的支撑集为 $[0,\\infty)$，$M$ 的支撑集为 $[0,1]$。\n- 为保证所有案例的可复现性，使用固定的伪随机种子 $12345$。\n- 单位：$R$、$R_b$ 和 $R_{\\mathrm{th}}$ 的单位为 $\\mathrm{m/s}$；$U$ 的单位为 $\\mathrm{m/s}$；$M$ 和 $M_x$ 的单位为 $\\mathrm{kg/kg}$（无量纲）。\n- 不需要角度单位。\n- 最终答案必须是小数（而不是百分比）。\n\n测试套件（五个案例）：\n- 案例1：$R_b=0.0045$, $C=0.05$, $B=1.5$, $M_x=0.30$, $\\mu_U=6.0$, $\\sigma_U=2.0$, $\\mu_M=0.09$, $\\sigma_M=0.02$, $R_{\\mathrm{th}}=0.0060$。\n- 案例2：$R_b=0.0045$, $C=0.05$, $B=1.5$, $M_x=0.30$, $\\mu_U=6.0$, $\\sigma_U=2.0$, $\\mu_M=0.09$, $\\sigma_M=0.02$, $R_{\\mathrm{th}}=0.0300$。\n- 案例3：$R_b=0.0080$, $C=0.06$, $B=1.5$, $M_x=0.30$, $\\mu_U=12.0$, $\\sigma_U=3.0$, $\\mu_M=0.05$, $\\sigma_M=0.01$, $R_{\\mathrm{th}}=0.0150$。\n- 案例4：$R_b=0.0035$, $C=0.05$, $B=1.5$, $M_x=0.30$, $\\mu_U=4.0$, $\\sigma_U=1.5$, $\\mu_M=0.28$, $\\sigma_M=0.03$, $R_{\\mathrm{th}}=0.0005$。\n- 案例5：$R_b=0.0040$, $C=0.05$, $B=1.5$, $M_x=0.30$, $\\mu_U=8.0$, $\\sigma_U=2.0$, $\\mu_M=0.32$, $\\sigma_M=0.02$, $R_{\\mathrm{th}}=0.000001$。\n\n您的程序应使用指定的蒙特卡洛配置为每个案例计算 $p$，并生成单行输出，其中包含五个结果，以逗号分隔并用方括号括起来，按案例1到案例5的顺序排列，每个值四舍五入到小数点后六位，例如：\n\"[0.123456,0.000000,0.987654,0.500000,0.314159]\"。", "solution": "所提出的问题是有效的。它在科学上基于成熟的火行为建模原则，在数学上是适定的，并且为获得唯一的计算解提供了所有必要的参数和约束。我们将继续进行分析。\n\n目标是为一个随机地表火蔓延速率模型计算超越概率 $p = \\mathbb{P}(R > R_{\\mathrm{th}})$。该模型基于 Rothermel 蔓延方程的简化形式，其中蔓延速率 $R$（单位 $\\mathrm{m/s}$）是基准速率 $R_b$、风因子 $\\varphi_w(U)$ 和湿度阻尼因子 $\\eta_M(M)$ 的乘积：\n$$\nR = R_b \\cdot \\varphi_w(U) \\cdot \\eta_M(M)\n$$\n各组成函数如下：\n1.  风因子：$\\varphi_w(U) = 1 + C U^B$，其中 $U$ 是风速，单位为 $\\mathrm{m/s}$。\n2.  湿度阻尼因子：该因子取决于细小死燃料含水率 $M$（无量纲质量分数）相对于熄火含水率 $M_x$ 的值。设 $x = M/M_x$。该因子定义为：\n    $$\n    \\eta_M(M) = \n    \\begin{cases}\n    \\max\\{0, \\min\\{1, 1 - 2.59x + 5.11x^2 - 3.52x^3\\}\\}, & \\text{if } M < M_x \\\\\n    0, & \\text{if } M \\ge M_x\n    \\end{cases}\n    $$\n\n环境条件的不确定性通过将风速 $U$ 和燃料含水率 $M$ 视为独立的随机变量来建模。\n-   $U$ 服从截断于区间 $[0, \\infty)$ 的正态分布 $\\mathcal{N}(\\mu_U, \\sigma_U^2)$。\n-   $M$ 服从截断于区间 $[0, 1]$ 的正态分布 $\\mathcal{N}(\\mu_M, \\sigma_M^2)$。\n\n超越概率 $p$ 的形式化定义为，在蔓延速率 $R(u, m)$ 超过阈值 $R_{\\mathrm{th}}$ 的 $(u, m)$ 定义域上，对联合概率密度函数 $f_{U,M}(u, m)$ 的积分：\n$$\np = \\iint_{R(u,m) > R_{\\mathrm{th}}} f_{U,M}(u, m) \\,du\\,dm\n$$\n由于函数 $R(u, m)$ 的复杂性以及定义的积分域，直接解析评估该积分是不可行的。因此，我们采用指定的蒙特卡洛方法。\n\n蒙特卡洛方法通过估计指示函数 $\\mathbb{I}(R > R_{\\mathrm{th}})$ 的期望值来近似概率 $p$。该期望由下式给出：\n$$\np = \\mathbb{E}[\\mathbb{I}(R > R_{\\mathrm{th}})]\n$$\n通过从 $(U, M)$ 的联合分布中生成大量的随机样本 $N$，并计算指示函数的样本均值，可以近似该期望：\n$$\n\\hat{p} = \\frac{1}{N} \\sum_{i=1}^{N} \\mathbb{I}(R(U_i, M_i) > R_{\\mathrm{th}})\n$$\n其中 $(U_i, M_i)$ 是从各自的截断正态分布中抽取的第 $i$ 个独立随机样本。该近似可简化为计算 $R_i > R_{\\mathrm{th}}$ 的模拟结果数量 $N_{\\mathrm{exceed}}$，然后除以总模拟次数 $N$：\n$$\n\\hat{p} = \\frac{N_{\\mathrm{exceed}}}{N}\n$$\n指定的流程要求样本数量 $N=200000$ 和固定的伪随机种子 $12345$，以确保可复现性。\n\n数值程序的核心是从截断正态分布中生成随机变量。对于一个均值为 $\\mu$、标准差为 $\\sigma$ 的一般正态分布，截断于物理区间 $[a_{\\mathrm{phy}}, b_{\\mathrm{phy}}]$，我们首先对区间边界进行标准化：\n$$\na = \\frac{a_{\\mathrm{phy}} - \\mu}{\\sigma}, \\quad b = \\frac{b_{\\mathrm{phy}} - \\mu}{\\sigma}\n$$\n然后从截断于 $[a, b]$ 的标准正态分布中抽取随机变量，随后将其缩放并平移回物理域。`scipy.stats.truncnorm` 库函数能正确处理此过程。\n\n对于在 $[0, \\infty)$ 上的风速 $U \\sim \\mathcal{N}(\\mu_U, \\sigma_U^2)$，标准化的边界为：\n$$\na_U = \\frac{0 - \\mu_U}{\\sigma_U}, \\quad b_U = \\frac{\\infty - \\mu_U}{\\sigma_U} = \\infty\n$$\n对于在 $[0, 1]$ 上的燃料含水率 $M \\sim \\mathcal{N}(\\mu_M, \\sigma_M^2)$，标准化的边界为：\n$$\na_M = \\frac{0 - \\mu_M}{\\sigma_M}, \\quad b_M = \\frac{1 - \\mu_M}{\\sigma_M}\n$$\n\n每个测试案例的计算算法如下：\n1.  将全局伪随机数生成器种子设置为 $12345$。此操作仅执行一次。\n2.  对于给定的测试案例，定义所有参数：$R_b, C, B, M_x, R_{\\mathrm{th}}, \\mu_U, \\sigma_U, \\mu_M, \\sigma_M$。\n3.  从其指定的截断正态分布中为 $U$ 生成一个包含 $N=200000$ 个随机样本的向量。\n4.  从其指定的截断正态分布中为 $M$ 生成一个包含 $N=200000$ 个随机样本的向量。独立性允许分开生成。\n5.  使用这些样本向量，通过逐元素操作计算蔓延速率向量 $\\mathbf{R}$：\n    a. 计算风因子向量：$\\boldsymbol{\\varphi_w} = 1 + C \\cdot \\mathbf{U}^B$。\n    b. 计算湿度比率向量：$\\mathbf{x} = \\mathbf{M} / M_x$。\n    c. 计算湿度因子的多项式部分：$\\mathbf{P} = 1 - 2.59\\mathbf{x} + 5.11\\mathbf{x}^2 - 3.52\\mathbf{x}^3$。\n    d. 应用截断和湿度阈值条件得到最终的湿度因子向量：$\\boldsymbol{\\eta_M} = \\mathbf{where}(\\mathbf{M} < M_x, \\mathrm{clip}(\\mathbf{P}, 0, 1), 0)$。\n    e. 计算最终蔓延速率向量：$\\mathbf{R} = R_b \\cdot \\boldsymbol{\\varphi_w} \\cdot \\boldsymbol{\\eta_M}$。\n6.  统计 $\\mathbf{R}$ 中满足 $R_i > R_{\\mathrm{th}}$ 的元素数量。这给出 $N_{\\mathrm{exceed}}$。\n7.  计算概率 $\\hat{p} = N_{\\mathrm{exceed}} / N$。\n8.  按要求将结果四舍五入到小数点后六位。\n\n对提供的所有五个测试案例重复此过程。实现将使用 `numpy` 进行高效的向量化计算，并使用 `scipy.stats.truncnorm` 进行正确的采样。", "answer": "```python\nimport numpy as np\nfrom scipy.stats import truncnorm\n\ndef solve():\n    \"\"\"\n    Computes the exceedance probability for a stochastic fire spread model\n    using Monte Carlo simulation for a suite of test cases.\n    \"\"\"\n    \n    # Test suite (five cases)\n    # R_b, C, B, M_x, mu_U, sigma_U, mu_M, sigma_M, R_th\n    test_cases = [\n        (0.0045, 0.05, 1.5, 0.30, 6.0, 2.0, 0.09, 0.02, 0.0060),\n        (0.0045, 0.05, 1.5, 0.30, 6.0, 2.0, 0.09, 0.02, 0.0300),\n        (0.0080, 0.06, 1.5, 0.30, 12.0, 3.0, 0.05, 0.01, 0.0150),\n        (0.0035, 0.05, 1.5, 0.30, 4.0, 1.5, 0.28, 0.03, 0.0005),\n        (0.0040, 0.05, 1.5, 0.30, 8.0, 2.0, 0.32, 0.02, 0.000001)\n    ]\n\n    # Monte Carlo simulation parameters\n    N = 200000\n    SEED = 12345\n    \n    # Initialize a single random number generator for all cases for reproducibility\n    rng = np.random.default_rng(SEED)\n    \n    results = []\n\n    for case in test_cases:\n        R_b, C, B, M_x, mu_U, sigma_U, mu_M, sigma_M, R_th = case\n\n        # 1. Generate random samples for U (wind speed)\n        # U ~ N(mu_U, sigma_U^2) truncated to [0, inf)\n        a_U, b_U = (0 - mu_U) / sigma_U, np.inf\n        U_dist = truncnorm(a=a_U, b=b_U, loc=mu_U, scale=sigma_U)\n        U_samples = U_dist.rvs(size=N, random_state=rng)\n        \n        # 2. Generate random samples for M (fuel moisture)\n        # M ~ N(mu_M, sigma_M^2) truncated to [0, 1]\n        a_M, b_M = (0 - mu_M) / sigma_M, (1 - mu_M) / sigma_M\n        M_dist = truncnorm(a=a_M, b=b_M, loc=mu_M, scale=sigma_M)\n        M_samples = M_dist.rvs(size=N, random_state=rng)\n\n        # 3. Calculate spread rate R from samples\n        # Wind factor phi_w\n        phi_w = 1 + C * (U_samples ** B)\n        \n        # Moisture damping factor eta_M\n        x = M_samples / M_x\n        # Polynomial: 1 - 2.59*x + 5.11*x^2 - 3.52*x^3\n        poly_val = 1 - 2.59 * x + 5.11 * x**2 - 3.52 * x**3\n        # Clamp result to [0, 1]\n        eta_M_poly = np.clip(poly_val, 0, 1)\n        # Apply condition: eta_M is 0 if M >= M_x\n        eta_M = np.where(M_samples < M_x, eta_M_poly, 0)\n\n        # Spread rate R\n        R = R_b * phi_w * eta_M\n\n        # 4. Compute exceedance probability\n        exceed_count = np.sum(R > R_th)\n        p = exceed_count / N\n        \n        results.append(p)\n\n    # Format output as required: rounded to 6 decimal places\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    \n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2491920"}, {"introduction": "为了理解火的长期生态影响，我们需要将视角从单次火灾事件扩展到整个火情（fire regime）的尺度。本实践利用状态与转换模型——景观生态学中的一个强大框架——来模拟植被镶嵌体在不同火情下的长期动态。通过构建一个马尔可夫链模型，你将学习如何将复杂的生态规则形式化为定量框架，并用它来探索管理政策的深远后果，例如生态系统发生不可逆类型转换的风险 [@problem_id:2491845]。", "problem": "要求您为一个受火灾影响的灌丛-森林镶嵌体，形式化并分析一个离散时间状态与转移模型。该模型在两种火灾机制情景下进行参数化：一种是基线机制，另一种是重复的短间隔期火灾机制，后者会增加类型转换的概率。您的解答必须从离散时间马尔可夫链 (DTMC) 和全概率定律的基本定义出发，并且必须在不使用快捷公式的情况下，推导出单步转移矩阵和多步状态分布。\n\n状态及生态学意义：\n- $F$：闭冠森林，在没有火灾的情况下能够自我维持。\n- $E$：演替早期、未成熟的灌丛或树苗阶段，在树冠闭合前再次燃烧时，容易发生类型转换。\n- $L$：演替晚期灌丛阶段，已超过未成熟期；在没有火灾的足够长时间后，会演替为 $F$。\n- $G$：类型转换后的草地或稀疏灌丛系统，具有自我强化特性，并在所关注的时间尺度上被假定为吸收态。\n\n火灾机制与生态过程假设：\n- 每年，火灾事件以年概率 $p_f$ 独立发生，无火灾的概率为 $1 - p_f$。\n- 如果 $F$ 燃烧，会因林冠损失而转变为 $E$。\n- 如果 $L$ 燃烧，会因灌木和幼树的顶梢枯死而转变为 $E$。\n- 如果 $E$ 燃烧，它或者保持为 $E$（重置演替时钟），或者以概率 $\\alpha$ 类型转换为 $G$。该概率取决于机制：基线机制下为 $\\alpha_{\\text{base}}$，短间隔期机制下为 $\\alpha_{\\text{short}}$，其中重复的短间隔期火灾会增加未成熟期风险转换的概率。\n- 在没有火灾的情况下，$E$ 以年概率 $q$ 向 $L$ 发展（近似于未成熟期窗口年份的倒数），否则保持为 $E$。\n- 在没有火灾的情况下，$L$ 以年概率 $s$（树木定居）演替为 $F$，否则保持为 $L$。\n- 在此时间范围内，$G$ 是吸收态：无论有无火灾，它都保持为 $G$。\n\n任务：\n1. 仅使用 DTMC、行随机转移矩阵和全概率定律的定义，根据上述生态学规则，将单步转移矩阵 $P(\\alpha)$ 的各项推导为 $p_f$、$q$、$s$ 和 $\\alpha$ 的函数。\n2. 给定 $[F,E,L,G]$ 上的初始状态分布 $x_0$（其和为 1），以及 $T$ 年的时间范围（其中 $T$ 以年为单位），计算在基线机制（$\\alpha = \\alpha_{\\text{base}}$）和短间隔期机制（$\\alpha = \\alpha_{\\text{short}}$）下，$T$ 年后预期的状态分布。\n3. 对于下述测试套件中的每个测试用例，计算度量 $D = G_{\\text{short}} - G_{\\text{base}}$，其中 $G_{\\text{short}}$ 是在短间隔期机制下 $T$ 年后状态 $G$ 的预期比例，而 $G_{\\text{base}}$ 是在基线机制下 $T$ 年后状态 $G$ 的预期比例。将 $D$ 表示为四舍五入到六位小数的小数（不带百分号）。\n\n测试套件：\n- 用例 $1$：$p_f = 0.05$， $q = 0.3$， $s = 0.15$， $\\alpha_{\\text{base}} = 0.02$， $\\alpha_{\\text{short}} = 0.35$， $T = 50$ 年， $x_0 = [1.0, 0.0, 0.0, 0.0]$。\n- 用例 $2$：$p_f = 0.15$， $q = 0.25$， $s = 0.10$， $\\alpha_{\\text{base}} = 0.05$， $\\alpha_{\\text{short}} = 0.50$， $T = 100$ 年， $x_0 = [0.8, 0.1, 0.1, 0.0]$。\n- 用例 $3$ (边界情况，无火灾)：$p_f = 0.0$， $q = 0.2$， $s = 0.2$， $\\alpha_{\\text{base}} = 0.05$， $\\alpha_{\\text{short}} = 0.50$， $T = 75$ 年， $x_0 = [0.6, 0.4, 0.0, 0.0]$。\n- 用例 $4$ (高火灾频率)：$p_f = 0.6$， $q = 0.3$， $s = 0.05$， $\\alpha_{\\text{base}} = 0.05$， $\\alpha_{\\text{short}} = 0.70$， $T = 50$ 年， $x_0 = [1.0, 0.0, 0.0, 0.0]$。\n- 用例 $5$ (未成熟期转换无机制差异)：$p_f = 0.1$， $q = 0.3$， $s = 0.12$， $\\alpha_{\\text{base}} = 0.2$， $\\alpha_{\\text{short}} = 0.2$， $T = 60$ 年， $x_0 = [0.9, 0.1, 0.0, 0.0]$。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含按用例顺序排列的 5 个 $D$ 值，并用逗号分隔，置于方括号内（例如，“[d1,d2,d3,d4,d5]”）。\n- 每个 $d_i$ 都必须是四舍五入到六位小数的小数（不带百分号）。", "solution": "所述问题是有效的。它在科学上基于生态建模的原理，特别是使用了状态与转移模型框架，该框架可形式化为离散时间马尔可夫链 (DTMC)。此问题是适定的、客观的，并且所有必要的参数和动态都已指定，使其自成体系且可解。不存在矛盾、科学上的不可能性或含糊不清之处。我现在将进行推导和求解。\n\n该系统被建模为一个 DTMC，其状态空间为 $S = \\{F, E, L, G\\}$。系统在任何时间步长 $t$（以年为单位）的状态由一个行向量 $x_t = [x_t(F), x_t(E), x_t(L), x_t(G)]$ 描述，其中每个分量代表系统处于相应状态的概率，且 $\\sum_{i \\in S} x_t(i) = 1$。其动态由一个 $4 \\times 4$ 的行随机转移矩阵 $P$ 控制，其中条目 $P_{ij}$ 是在一个时间步长内从状态 $i$ 转移到状态 $j$ 的条件概率，即 $P_{ij} = \\mathbb{P}(X_{t+1}=j | X_t=i)$。\n\n**任务 1：转移矩阵 $P(\\alpha)$ 的推导**\n\n转移概率是使用全概率定律推导出来的，以发生火灾（事件 `Fire`，概率为 $p_f$）或不发生火灾（事件 `No Fire`，概率为 $1 - p_f$）这两个互斥事件为条件。对于任何从状态 $i$ 到状态 $j$ 的转移：\n$$P_{ij} = \\mathbb{P}(X_{t+1}=j | X_t=i, \\text{Fire}) \\cdot p_f + \\mathbb{P}(X_{t+1}=j | X_t=i, \\text{No Fire}) \\cdot (1 - p_f)$$\n我们将按 $(F, E, L, G)$ 的顺序推导矩阵 $P$ 的每一行。\n\n**第 1 行：从状态 $F$ (森林) 的转移**\n给定 $X_t = F$:\n- 如果发生火灾（概率 $p_f$），系统转移到状态 $E$：$\\mathbb{P}(X_{t+1}=E | X_t=F, \\text{Fire}) = 1$。\n- 如果没有火灾发生（概率 $1-p_f$），系统保持在状态 $F$：$\\mathbb{P}(X_{t+1}=F | X_t=F, \\text{No Fire}) = 1$。\n转移概率为：\n$P_{FF} = (0 \\cdot p_f) + (1 \\cdot (1-p_f)) = 1-p_f$\n$P_{FE} = (1 \\cdot p_f) + (0 \\cdot (1-p_f)) = p_f$\n$P_{FL} = 0$\n$P_{FG} = 0$\n$P$ 的第一行为 $[1-p_f, p_f, 0, 0]$。\n\n**第 2 行：从状态 $E$ (演替早期) 的转移**\n给定 $X_t = E$:\n- 如果发生火灾（概率 $p_f$），系统以概率 $\\alpha$ 转移到状态 $G$，或以概率 $1-\\alpha$ 保持在状态 $E$。\n- 如果没有火灾发生（概率 $1-p_f$），系统以概率 $q$ 转移到状态 $L$，或以概率 $1-q$ 保持在状态 $E$。\n转移概率为：\n$P_{EF} = 0$\n$P_{EE} = ((1-\\alpha) \\cdot p_f) + ((1-q) \\cdot (1-p_f)) = (1-\\alpha)p_f + (1-q)(1-p_f)$\n$P_{EL} = (0 \\cdot p_f) + (q \\cdot (1-p_f)) = q(1-p_f)$\n$P_{EG} = (\\alpha \\cdot p_f) + (0 \\cdot (1-p_f)) = \\alpha p_f$\n$P$ 的第二行为 $[0, (1-\\alpha)p_f + (1-q)(1-p_f), q(1-p_f), \\alpha p_f]$。\n\n**第 3 行：从状态 $L$ (演替晚期) 的转移**\n给定 $X_t = L$:\n- 如果发生火灾（概率 $p_f$），系统转移到状态 $E$：$\\mathbb{P}(X_{t+1}=E | X_t=L, \\text{Fire}) = 1$。\n- 如果没有火灾发生（概率 $1-p_f$），系统以概率 $s$ 转移到状态 $F$，或以概率 $1-s$ 保持在状态 $L$。\n转移概率为：\n$P_{LF} = (0 \\cdot p_f) + (s \\cdot (1-p_f)) = s(1-p_f)$\n$P_{LE} = (1 \\cdot p_f) + (0 \\cdot (1-p_f)) = p_f$\n$P_{LL} = (0 \\cdot p_f) + ((1-s) \\cdot (1-p_f)) = (1-s)(1-p_f)$\n$P_{LG} = 0$\n$P$ 的第三行为 $[s(1-p_f), p_f, (1-s)(1-p_f), 0]$。\n\n**第 4 行：从状态 $G$ (草地/稀疏灌丛) 的转移**\n给定 $X_t = G$:\n- 状态 $G$ 是吸收态。系统以概率 1 保持在状态 $G$，与是否发生火灾无关。\n转移概率为：\n$P_{GF} = 0$，$P_{GE} = 0$，$P_{GL} = 0$，$P_{GG} = 1$。\n$P$ 的第四行为 $[0, 0, 0, 1]$。\n\n结合这些行，单步转移矩阵 $P(\\alpha)$ 为：\n$$\nP(\\alpha) =\n\\begin{pmatrix}\n1 - p_f & p_f & 0 & 0 \\\\\n0 & (1-\\alpha)p_f + (1-q)(1-p_f) & q(1-p_f) & \\alpha p_f \\\\\ns(1-p_f) & p_f & (1-s)(1-p_f) & 0 \\\\\n0 & 0 & 0 & 1\n\\end{pmatrix}\n$$\n\n**任务 2：多步状态分布**\n\n一个时间步长（一年）后的状态分布由基本的 DTMC 演化方程给出：$x_1 = x_0 P$。通过递归应用此规则，给定初始分布 $x_0$，$T$ 年后的状态分布可通过以下方式找到：\n$$x_T = x_{T-1}P = (x_{T-2}P)P = \\dots = x_0 P^T$$\n这需要计算矩阵幂 $P^T$。这可以通过重复的矩阵乘法来实现，该方法可以使用矩阵的快速幂算法（二进制取幂）高效地实现。这构成了计算瞬态分布的直接、基本的方法，而非概念上的快捷方式。\n\n**任务 3：度量 $D$ 的计算**\n\n对于每个测试用例，我们必须计算两种火灾机制情景下，类型转换状态 $G$ 在景观最终比例上的差异。\n\n1.  **基线机制**：我们使用给定的参数 $p_f, q, s$ 和 $\\alpha = \\alpha_{\\text{base}}$ 构建转移矩阵 $P(\\alpha_{\\text{base}})$。\n2.  我们计算 $T$ 年后的状态分布：$x_{T, \\text{base}} = x_0 (P(\\alpha_{\\text{base}}))^T$。\n3.  我们提取状态 $G$ 的比例，即结果向量的第四个分量：$G_{\\text{base}} = x_{T, \\text{base}}[3]$（使用基于 0 的索引）。\n\n4.  **短间隔期机制**：我们用 $\\alpha = \\alpha_{\\text{short}}$ 重复此过程。\n5.  构建矩阵 $P(\\alpha_{\\text{short}})$。\n6.  计算最终状态分布：$x_{T, \\text{short}} = x_0 (P(\\alpha_{\\text{short}}))^T$。\n7.  提取状态 $G$ 的比例：$G_{\\text{short}} = x_{T, \\text{short}}[3]$。\n\n8.  最后，我们计算所需的度量：$D = G_{\\text{short}} - G_{\\text{base}}$。\n\n以下程序为所有指定的测试用例实现了此过程。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the fire ecology DTMC problem for the given test cases.\n    \"\"\"\n    # Test cases from the problem statement:\n    # (p_f, q, s, alpha_base, alpha_short, T, x0)\n    test_cases = [\n        (0.05, 0.3, 0.15, 0.02, 0.35, 50, np.array([1.0, 0.0, 0.0, 0.0])),\n        (0.15, 0.25, 0.10, 0.05, 0.50, 100, np.array([0.8, 0.1, 0.1, 0.0])),\n        (0.0, 0.2, 0.2, 0.05, 0.50, 75, np.array([0.6, 0.4, 0.0, 0.0])),\n        (0.6, 0.3, 0.05, 0.05, 0.70, 50, np.array([1.0, 0.0, 0.0, 0.0])),\n        (0.1, 0.3, 0.12, 0.2, 0.2, 60, np.array([0.9, 0.1, 0.0, 0.0])),\n    ]\n\n    results = []\n\n    def get_final_g_proportion(p_f, q, s, alpha, T, x0):\n        \"\"\"\n        Constructs the transition matrix and computes the proportion in state G after T years.\n        \n        States are ordered: F, E, L, G.\n        \"\"\"\n        # Initialize the 4x4 transition matrix P\n        P = np.zeros((4, 4))\n        \n        # Row 1: Transitions from F\n        # P_FF = 1 - p_f\n        # P_FE = p_f\n        P[0, 0] = 1.0 - p_f\n        P[0, 1] = p_f\n        \n        # Row 2: Transitions from E\n        # P_EE = (1-alpha)p_f + (1-q)(1-p_f)\n        # P_EL = q(1-p_f)\n        # P_EG = alpha * p_f\n        P[1, 1] = (1.0 - alpha) * p_f + (1.0 - q) * (1.0 - p_f)\n        P[1, 2] = q * (1.0 - p_f)\n        P[1, 3] = alpha * p_f\n\n        # Row 3: Transitions from L\n        # P_LF = s(1-p_f)\n        # P_LE = p_f\n        # P_LL = (1-s)(1-p_f)\n        P[2, 0] = s * (1.0 - p_f)\n        P[2, 1] = p_f\n        P[2, 2] = (1.0 - s) * (1.0 - p_f)\n\n        # Row 4: Transitions from G (absorbing state)\n        # P_GG = 1\n        P[3, 3] = 1.0\n        \n        # Compute P^T\n        try:\n            P_T = np.linalg.matrix_power(P, T)\n        except np.linalg.LinAlgError:\n            # Handle potential numerical instability, although unlikely with these parameters\n            # Fallback to iterative multiplication if needed, but matrix_power is robust\n            P_T = P.copy()\n            for _ in range(T - 1):\n                P_T = P_T @ P\n        \n        # Compute final state distribution x_T = x_0 * P^T\n        x_T = x0 @ P_T\n        \n        # Return the proportion in state G (the 4th state, index 3)\n        return x_T[3]\n\n    for case in test_cases:\n        p_f, q, s, alpha_base, alpha_short, T, x0 = case\n        \n        # Calculate G_base for the baseline regime\n        G_base = get_final_g_proportion(p_f, q, s, alpha_base, T, x0)\n        \n        # Calculate G_short for the short-interval regime\n        G_short = get_final_g_proportion(p_f, q, s, alpha_short, T, x0)\n        \n        # Calculate the metric D and round it\n        D = G_short - G_base\n        results.append(round(D, 6))\n\n    # Format the final output string as required\n    output_str = f\"[{','.join(map(str, results))}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2491845"}]}