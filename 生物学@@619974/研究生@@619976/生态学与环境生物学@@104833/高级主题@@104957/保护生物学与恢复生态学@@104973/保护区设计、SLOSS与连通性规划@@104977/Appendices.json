{"hands_on_practices": [{"introduction": "这项练习提供了一个基础的保护规划工具，让您能够量化因生境缩减而导致的预期生物多样性损失。通过应用物种-面积关系（SAR），您将切实理解为何保护大面积的连续区域是保护区设计的基石。此实践利用成熟的幂律模型 $S = cA^z$ ，直接探讨了“单一巨大或数个零散”（SLOSS）辩论中的“面积”要素。[@problem_id:2528359]", "problem": "一位景观保护规划师因预算限制，必须缩减一个邻接保护区的面积。该生态区中目标分类单元的经验性物种-面积关系（SAR）数据显示，在拟合幂律SAR模型 $S = c A^{z}$ 时，其双对数斜率为 $z = 0.25$。其中，$S$ 是物种丰富度，$A$ 是面积，$c$ 是一个常数。假设系统在平衡状态下遵循SAR，不存在时间滞后或灭绝债务，并且其他影响丰富度的驱动因素保持不变。总保护区面积将从 $A_{0}$ 减少到 $A_{1} = 0.5 A_{0}$，同时保持其为一个单一、连接良好的区块，以最小化边缘效应和隔离效应。\n\n仅以SAR为基本依据，推导预期的物种丰富度保留比例，定义为 $R \\equiv S(A_{1})/S(A_{0})$，并计算当 $z = 0.25$ 且 $A_{1}/A_{0} = 0.5$ 时的数值。将 $R$ 的最终数值以小数形式给出。将您的答案四舍五入至四位有效数字。最终答案不带单位。\n\n在您的推导过程中，简要说明 $R$ 对 $z$ 的依赖性如何从SAR中产生，并解释为什么这意味着在保护区设计中，当面积缩减更严重时，物种保留比例对 $z$ 更敏感，及其对“单个大或多个小”（SLOSS）和连通性规划的启示。除所要求的 $R$ 值外，不要报告任何其他数值。", "solution": "在尝试解答之前，对问题陈述进行验证。\n\n**第一步：提取已知条件**\n- 物种-面积关系（SAR）模型：$S = c A^{z}$\n- $S$：物种丰富度\n- $A$：面积\n- $c$：一个常数\n- SAR的双对数斜率：$z = 0.25$\n- 初始保护区面积：$A_{0}$\n- 最终保护区面积：$A_{1} = 0.5 A_{0}$\n- 假设：系统处于平衡状态，无时间滞后或灭绝债务。\n- 假设：其他影响物种丰富度的驱动因素保持不变。\n- 假设：保护区保持为单一、邻接的区块。\n- 物种丰富度保留比例的定义：$R \\equiv S(A_{1})/S(A_{0})$\n- 任务1：推导 $R$ 的表达式。\n- 任务2：根据给定参数计算 $R$ 的数值，并四舍五入至四位有效数字。\n- 任务3：论证 $R$ 对 $z$ 的依赖性及其对保护区设计的启示。\n\n**第二步：使用提取的已知条件进行验证**\n评估问题的有效性。\n- **科学基础**：该问题基于幂律物种-面积关系 $S = cA^z$，这是生态学和生物地理学中一个基础且得到充分经验支持的模型。给定的 $z = 0.25$ 是大陆和陆地环境中的一个典型且现实的数值。所提及的概念——保护区设计、SLOSS、连通性和灭绝债务——是保护生物学中的标准概念。这些假设虽然是对现实的简化，但对于构建一个易于处理的理论模型以阐明核心原理是合适的。\n- **良构问题**：问题陈述清晰，提供了推导所需比率 $R$ 并计算其值所需的所有信息。目标明确。存在一个唯一的、稳定的、有意义的解。\n- **客观性**：问题以精确、定量和客观的语言构建，没有主观论断。\n\n**第三步：结论与行动**\n该问题具有科学基础，是良构且客观的。它不包含任何使其无效的缺陷。因此，该问题被判定为**有效**。将提供完整解答。\n\n物种丰富度（$S$）作为面积（$A$）函数的根本关系由幂律模型给出：\n$$S(A) = c A^{z}$$\n这里，$c$ 是一个与分类单元和区域相关的常数，代表单位面积的物种数量；$z$ 是决定物种丰富度随面积增加速度的指数。\n\n初始较大保护区 $A_{0}$ 内的物种丰富度由下式给出：\n$$S_{0} = S(A_{0}) = c A_{0}^{z}$$\n\n面积缩减后，较小面积 $A_{1}$ 内的新物种丰富度为：\n$$S_{1} = S(A_{1}) = c A_{1}^{z}$$\n\n问题将物种丰富度保留比例 $R$ 定义为最终物种丰富度与初始物种丰富度的比率：\n$$R \\equiv \\frac{S_{1}}{S_{0}}$$\n\n将 $S_{1}$ 和 $S_{0}$ 的表达式代入 $R$ 的定义中，可得：\n$$R = \\frac{c A_{1}^{z}}{c A_{0}^{z}}$$\n\n常数 $c$ 与面积无关，因此从分子和分母中约去。表达式简化为：\n$$R = \\left(\\frac{A_{1}}{A_{0}}\\right)^{z}$$\n这是面积变化后物种保留比例的通用符号表达式。\n\n问题给出了参数的具体数值。面积减少了一半，因此最终面积与初始面积的比率为：\n$$\\frac{A_{1}}{A_{0}} = \\frac{0.5 A_{0}}{A_{0}} = 0.5$$\nSAR的双对数斜率给定为 $z = 0.25$。\n\n将这些值代入推导出的 $R$ 方程：\n$$R = (0.5)^{0.25}$$\n指数 $0.25$ 等于分数 $\\frac{1}{4}$。因此，计算的是 $0.5$ 的四次方根：\n$$R = (0.5)^{1/4} = \\sqrt[4]{0.5}$$\n计算其数值：\n$$R \\approx 0.8408964...$$\n按照要求，将此结果四舍五入至四位有效数字，我们得到：\n$$R \\approx 0.8409$$\n\n$R$ 对 $z$ 的依赖性在推导出的公式 $R = (A_{1}/A_{0})^{z}$ 中是明确的。对于任何给定的面积缩减比例，其中 $A_{1}/A_{0} < 1$，$R$ 是 $z$ 的指数递减函数。更高的 $z$ 值意味着更陡峭的SAR斜率以及物种数量对面积更强的依赖性，导致在相同的栖息地面积缩减下，物种保留比例（$R$）更小。这是因为 $\\ln(A_{1}/A_{0})$ 是负数，所以该函数随 $z$ 递减。\n\n对于更严重的面积缩减，物种保留比例对 $z$ 的敏感性更为显著。为了形式化这一点，考虑 $R$ 对 $z$ 的导数，它衡量了当 $z$ 变化时保留比例的变化率：$\\frac{\\partial R}{\\partial z} = (A_{1}/A_{0})^{z} \\ln(A_{1}/A_{0})$。该敏感度的量级 $|\\frac{\\partial R}{\\partial z}|$ 表明了 $z$ 的不确定性对物种损失预测的影响强度。在现实的保护情景域中，例如给定的 $A_1/A_0 = 0.5$，更严重的缩减（即更小的 $A_{1}/A_{0}$ 比率）会导致该导数的量级更大。这意味着当计划的栖息地破坏更严重时，物种损失的预测对 $z$ 的精确值更敏感。\n\n这对“单个大或多个小”（SLOSS）辩论和连通性规划具有直接启示。SAR模型表明，将一个大面积区域破碎化为几个小区域，即使总面积保持不变，也会导致物种损失，因为较小的斑块各自支持的物种较少。高 $z$ 值会加剧这种效应，从而强烈支持“单个大”选项，以最大化任何单个斑块的面积。问题中关于维持“单一、连接良好的区块”的规定就是这一原则的直接应用。此外，如果破碎化不可避免，与大 $z$ 值相关的高敏感性强调了创建和维护连通性廊道的至关重要性。这种连通性允许生物体在斑块之间移动，从而将多个小型保护区部分地融合成一个功能上更大的复合种群网络，以减轻SAR模型对孤立碎块所预测的物种损失。", "answer": "$$\n\\boxed{0.8409}\n$$", "id": "2528359"}, {"introduction": "该实践超越了简单的欧几里得距离，模拟了景观特征如何实际地阻碍或促进生物体的移动。通过在成本表面上实现最短路径算法，您将学会计算“有效距离”，这是现代连通性规划中的一个关键指标。这项技能对于评估不同生境斑块之间的功能连通性至关重要，而功能连通性是集合种群持久性的关键因素。[@problem_id:2528280]", "problem": "给定一个生物在景观中扩散的移动成本表面的离散栅格表示。考虑一个规则的方形网格，其中每个单元格都具有正的移动成本。允许移动到单元格的八个相邻单元中的任意一个（四个基本方向和四个对角线方向）。定义穿过成本为 $c_{u}$ 的单元格与其相邻成本为 $c_{v}$ 的单元格之间边的成本为：端点成本的算术平均值乘以欧几里得步长。即，对于基本方向移动，步长为 $1$；对于对角线移动，步长为 $\\sqrt{2}$。在这些边权重下，源单元格和目标单元格之间的有效距离 $d_{\\text{eff}}$ 是两个单元格中心之间所有有效路径的最小总遍历成本。\n\n假设从源到达目标的繁殖体遵循泊松过程，其平均到达次数 $m$ 等于源供应量 $s$ 乘以在有效距离处取值的扩散核 $k(d_{\\text{eff}})$。假设使用速率参数为 $\\alpha > 0$ 的指数扩散核，因此 $k(d) = \\exp(-\\alpha d)$。使用这些前提，并仅利用泊松分布的性质，推导出定殖概率 $K(d_{\\text{eff}})$，即至少有一次到达的概率。然后，对于给定的测试套件，计算每种情况下的 $d_{\\text{eff}}$，并根据 $K(d_{\\text{eff}})$ 返回相应的定殖概率。\n\n网格几何与索引：\n- 使用坐标 $(x,y)$，其中 $x$ 是列索引，$y$ 是行索引。\n- 原点 $(0,0)$ 是网格的左上角单元格。\n- 网格形状为高度 $H$ × 宽度 $W$；有效索引满足 $0 \\le y < H$ 和 $0 \\le x < W$。\n\n相邻单元格 $(x,y)$ 和 $(x',y')$ 之间的边遍历成本为\n$$\nw\\big((x,y)\\to(x',y')\\big) \\;=\\; \\frac{c(x,y) + c(x',y')}{2} \\cdot \\ell\\big((x,y),(x',y')\\big),\n$$\n其中\n$$\n\\ell\\big((x,y),(x',y')\\big) \\;=\\; \\begin{cases}\n1, & \\text{if } |x-x'| + |y-y'| = 1,\\\\\n\\sqrt{2}, & \\text{if } |x-x'| = 1 \\text{ and } |y-y'| = 1.\n\\end{cases}\n$$\n\n有效距离的定义：\n$$\nd_{\\text{eff}}(\\text{source},\\text{target}) \\;=\\; \\min_{\\text{8-neighbor paths } P} \\sum_{e \\in P} w(e).\n$$\n\n定殖模型假设：\n- 期望到达次数：$m \\;=\\; s \\cdot k\\!\\left(d_{\\text{eff}}\\right)$。\n- 指数核：$k(d) \\;=\\; \\exp(-\\alpha d)$。\n- 到达次数遵循均值为 $m$ 的泊松过程。\n\n您的程序必须：\n- 通过在具有指定边权重的网格上使用正确的 Dijkstra 算法计算 $d_{\\text{eff}}$。\n- 从泊松模型的第一性原理出发，推导并实现 $K(d_{\\text{eff}})$。\n- 按顺序应用于以下测试套件。每个测试用例由成本网格 $C$、源坐标 $(x_s,y_s)$、目标坐标 $(x_t,y_t)$ 以及参数 $\\alpha$ 和 $s$ 定义。\n\n测试套件：\n1. 情况 A（均匀移动成本）：\n   - 网格 $C_A$ 是一个 $5 \\times 5$ 的矩阵，所有条目都等于 $1$。\n   - 源 $(x_s,y_s) = (0,0)$，目标 $(x_t,y_t) = (4,3)$。\n   - 参数：$\\alpha = 0.5$，$s = 3.0$。\n2. 情况 B（零距离边界）：\n   - 网格 $C_B$ 是一个 $5 \\times 5$ 的矩阵，所有条目都等于 $1$。\n   - 源 $(x_s,y_s) = (2,2)$，目标 $(x_t,y_t) = (2,2)$。\n   - 参数：$\\alpha = 0.9$，$s = 2.0$。\n3. 情况 C（中心障碍绕行）：\n   - 网格 $C_C$ 是一个 $3 \\times 3$ 的矩阵，由下式给出\n     $$\n     C_C \\;=\\; \\begin{bmatrix}\n     1 & 1 & 1\\\\\n     1 & 100 & 1\\\\\n     1 & 1 & 1\n     \\end{bmatrix}.\n     $$\n   - 源 $(x_s,y_s) = (0,0)$，目标 $(x_t,y_t) = (2,2)$。\n   - 参数：$\\alpha = 0.7$，$s = 1.5$。\n\n答案规格：\n- 对于每种情况，将定殖概率输出为精确到 $6$ 位小数的浮点数。\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔列表形式的结果，顺序与测试套件相同（例如, $[r_1,r_2,r_3]$）。\n- 不提供外部输入；将测试套件直接嵌入程序中。", "solution": "所提出的问题是生态建模领域一个定义明确的练习，具体涉及景观连通性。它要求综合两个部分：一个用于确定有效距离的图论寻路问题，以及一个用于定殖的概率模型。该问题具有科学依据且内部一致，因此可以得出严谨的解决方案。\n\n总体任务是计算几种情景下的定殖概率 $K$。这需要两个主要步骤：首先，根据有效距离 $d_{\\text{eff}}$ 推导出函数 $K$；其次，为每个具体情景计算 $d_{\\text{eff}}$。\n\n首先，我们推导定殖概率 $K(d_{\\text{eff}})$ 的表达式。问题陈述繁殖体到达目标单元格遵循泊松过程。因此，到达次数（一个我们记为 $N$ 的随机变量）遵循均值为 $m$ 的泊松分布。其概率质量函数由下式给出：\n$$\nP(N=k) \\;=\\; \\frac{e^{-m} m^k}{k!}\n$$\n对于非负整数的到达次数 $k$。定殖被定义为至少有一次到达的事件，即 $N \\ge 1$。此事件的概率 $K$ 是零次到达（$N=0$）概率的补集。\n$$\nK(d_{\\text{eff}}) \\;=\\; P(N \\ge 1) \\;=\\; 1 - P(N=0)\n$$\n将 $k=0$ 代入泊松概率质量函数，得到：\n$$\nP(N=0) \\;=\\; \\frac{e^{-m} m^0}{0!} \\;=\\; e^{-m}\n$$\n因此，定殖概率为：\n$$\nK(d_{\\text{eff}}) \\;=\\; 1 - e^{-m}\n$$\n平均到达次数 $m$ 作为有效距离 $d_{\\text{eff}}$ 的函数给出：\n$$\nm \\;=\\; s \\cdot k(d_{\\text{eff}})\n$$\n其中 $s$ 是源供应量，$k(d)$ 是速率参数为 $\\alpha > 0$ 的指数扩散核：\n$$\nk(d) \\;=\\; \\exp(-\\alpha d)\n$$\n通过代入，我们得到定殖概率作为有效距离函数的完整表达式：\n$$\nK(d_{\\text{eff}}) \\;=\\; 1 - \\exp\\left(-s \\cdot \\exp(-\\alpha d_{\\text{eff}})\\right)\n$$\n该公式为定殖模型提供了分析基础。\n\n其次，我们必须设计一种计算有效距离 $d_{\\text{eff}}$ 的方法。问题将 $d_{\\text{eff}}$ 定义为源单元格和目标单元格之间所有有效路径的最小总成本。景观表示为一个网格，可以解释为一个图，其中每个单元格 $(x,y)$ 是一个节点。一个单元格与其八个邻居（摩尔邻域）之间存在边。连接成本为 $c_u$ 的单元格 $u$ 和成本为 $c_v$ 的单元格 $v$ 的边的权重定义为：\n$$\nw_{uv} \\;=\\; \\frac{c_u + c_v}{2} \\cdot \\ell_{uv}\n$$\n其中 $\\ell_{uv}$ 是单元格中心之间的欧几里得距离，对于基本方向移动为 $1$，对于对角线移动为 $\\sqrt{2}$。由于所有移动成本 $c$ 都被指定为正数，因此所有边权重 $w_{uv}$ 也都严格为正。\n\n因此，寻找 $d_{\\text{eff}}$ 的问题是一个典型的在具有非负边权重的图上的单源最短路径问题。对于这类问题，Dijkstra 算法是标准且正确的程序。该算法系统地从一个源节点找到到图中所有其他节点的最短路径。\n\nDijkstra 算法的实现过程如下：\n$1.$ 一个距离数组 `dist` 被初始化，除源单元格的距离设为 $0$ 外，所有单元格的距离均设为无穷大。\n$2.$ 使用一个最小优先队列来存储待访问的节点，按其当前距源点的最短距离进行优先级排序。初始时将源单元格加入队列。\n$3.$ 算法从优先队列中迭代提取距离最小的节点 `(x,y)`。\n$4.$ 对于 `(x,y)` 的每个邻居 `(nx,ny)`，它计算通过 `(x,y)` 到达该邻居的潜在新距离为 `dist[y,x] + w`，其中 `w` 是它们之间边的权重。\n$5.$ 如果这个新距离小于当前已知的到 `(nx,ny)` 的距离，则更新该距离，并将该邻居及其新的、更短的距离添加到优先队列中。\n$6.$ 当优先队列为空时，或者作为一种优化，当目标节点从队列中被提取时，该过程终止。终止时 `dist` 数组中目标单元格的值即为有效距离 $d_{\\text{eff}}$。\n\n最终的解决方案是一个算法，对于每个测试用例，它首先在提供的成本网格上执行 Dijkstra 算法，以计算指定源单元格和目标单元格之间的 $d_{\\text{eff}}$。然后，它将计算出的 $d_{\\text{eff}}$ 以及给定的参数 $\\alpha$ 和 $s$ 代入推导出的 $K(d_{\\text{eff}})$ 公式中，以获得定殖概率。最终的数值结果被四舍五入到指定的精度。", "answer": "```python\nimport numpy as np\nimport heapq\n\ndef solve():\n    \"\"\"\n    Solves the problem by calculating effective distance and colonization probability\n    for a suite of test cases.\n    \"\"\"\n\n    def _calculate_colonization_probability(case):\n        \"\"\"\n        Computes the colonization probability for a single test case.\n\n        A test case is a dictionary containing:\n        - C: numpy array for the cost grid\n        - source: (x, y) tuple for the source cell\n        - target: (x, y) tuple for the target cell\n        - alpha: float, rate parameter for the exponential kernel\n        - s: float, source supply\n        \"\"\"\n        cost_grid = case[\"C\"]\n        source = case[\"source\"]\n        target = case[\"target\"]\n        alpha = case[\"alpha\"]\n        s = case[\"s\"]\n        \n        # Sub-function for Dijkstra's algorithm\n        def dijkstra(grid, src, tgt):\n            H, W = grid.shape\n            dist = np.full((H, W), np.inf, dtype=float)\n            \n            xs, ys = src\n            xt, yt = tgt\n            \n            dist[ys, xs] = 0.0\n            pq = [(0.0, xs, ys)]  # (distance, x, y)\n            \n            sqrt2 = np.sqrt(2.0)\n            \n            while pq:\n                d, x, y = heapq.heappop(pq)\n                \n                if d > dist[y, x]:\n                    continue\n                \n                if x == xt and y == yt:\n                    return d\n                \n                # Explore 8 neighbors\n                for dx in [-1, 0, 1]:\n                    for dy in [-1, 0, 1]:\n                        if dx == 0 and dy == 0:\n                            continue\n                        \n                        nx, ny = x + dx, y + dy\n                        \n                        # Check grid boundaries\n                        if 0 <= nx < W and 0 <= ny < H:\n                            step_length = sqrt2 if dx != 0 and dy != 0 else 1.0\n                            \n                            cost_u = grid[y, x]\n                            cost_v = grid[ny, nx]\n                            \n                            weight = (cost_u + cost_v) / 2.0 * step_length\n                            \n                            new_dist = d + weight\n                            \n                            if new_dist < dist[ny, nx]:\n                                dist[ny, nx] = new_dist\n                                heapq.heappush(pq, (new_dist, nx, ny))\n                                \n            return dist[yt, xt]\n\n        # Get effective distance\n        if source == target:\n            d_eff = 0.0\n        else:\n            d_eff = dijkstra(cost_grid, source, target)\n        \n        # Calculate colonization probability K\n        m = s * np.exp(-alpha * d_eff)\n        K = 1.0 - np.exp(-m)\n        \n        return K\n\n    test_cases = [\n        # Case A: uniform movement cost\n        {\n            \"C\": np.full((5, 5), 1.0),\n            \"source\": (0, 0),\n            \"target\": (4, 3),\n            \"alpha\": 0.5,\n            \"s\": 3.0\n        },\n        # Case B: zero-distance boundary\n        {\n            \"C\": np.full((5, 5), 1.0),\n            \"source\": (2, 2),\n            \"target\": (2, 2),\n            \"alpha\": 0.9,\n            \"s\": 2.0\n        },\n        # Case C: central barrier detour\n        {\n            \"C\": np.array([\n                [1.0, 1.0, 1.0],\n                [1.0, 100.0, 1.0],\n                [1.0, 1.0, 1.0]\n            ]),\n            \"source\": (0, 0),\n            \"target\": (2, 2),\n            \"alpha\": 0.7,\n            \"s\": 1.5\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = _calculate_colonization_probability(case)\n        # Round to exactly 6 decimal places\n        results.append(round(result, 6))\n\n    # Format the output as specified\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2528280"}, {"introduction": "保护规划通常涉及在严格的预算下做出艰难抉择，同时要确保所选区域具有生态功能。本练习将向您介绍强大的整数规划框架，以找到在满足财务和空间（连通性）约束的同时，最大化生态效益的最优保护区设计。构建并解决此问题将使您掌握系统性保护规划中的一项关键技能，从而将生态目标转化为可操作的优化策略。[@problem_id:2528291]", "problem": "一位保护规划师必须在“单个大保护区或多个小保护区”(SLOSS)框架下设计一个陆地保护区，通过选择规划单元来最大化生态效益，同时受预算和单一连续保护区要求的限制。该规划区域被建模为一个简单无向图，其中顶点代表规划单元，边代表邻接关系。您必须使用的基本原理是：(i) 将图的连通性定义为顶点之间存在路径，(ii) 节点流量守恒（流量平衡）原则，以及 (iii) 线性预算核算。在生态学上，要求所有选定的规划单元形成一个单一的连通集合是合理的，这可以通过一个基于流的公式来强制实现，该公式将一种概念上的商品从指定的根节点发送到导出子图内的所有选定单元。\n\n规划单元为 $V=\\{1,2,3,4,5\\}$，线性排列，无向边为 $E=\\{(1,2),(2,3),(3,4),(4,5)\\}$。令 $A$ 是通过将每条无向边 $(i,j)\\in E$ 替换为两条有向弧 $(i,j)$ 和 $(j,i)$ 而得到的有向弧集合。选择单元 $i\\in V$ 的成本和效益分别由 $c_i$ 和 $b_i$ 给出，可用总预算为 $B$。指定的根节点为 $r=3$。数据如下：\n- $c_1=3$, $c_2=2$, $c_3=2$, $c_4=1$, $c_5=3$.\n- $b_1=8$, $b_2=5$, $b_3=4$, $b_4=2$, $b_5=7$.\n- $B=7$.\n\n任务：\n- 构造一个二元整数规划，其决策变量选择 $V$ 的一个子集，该子集在预算约束 $\\sum_{i\\in V} c_i x_i \\le B$、要求 $x_r=1$ 和单商品流连通性约束下，最大化 $\\sum_{i\\in V} b_i x_i$。该连通性约束确保每个选定的单元在由选定单元导出的子图中都与根节点 $r$ 相连。您的构造必须仅依赖于上述基本原理，并且必须引入并论证为实现连续性所需的所有变量和约束。\n- 使用您的公式和所提供的数据，计算一个可行的连通选择所能达到的最优总效益值。最终答案以一个无单位的数字表示。无需四舍五入。", "solution": "在尝试任何解答之前，将对问题进行验证。\n\n### 第1步：提取已知条件\n已知条件逐字从问题陈述中提取：\n- **模型框架：** 问题是在“单个大保护区或多个小保护区”（SLOSS）框架下的保护区设计任务，基于一个简单无向图建模。顶点代表规划单元，边代表邻接关系。\n- **基本原理：** (i) 图的连通性定义为存在路径，(ii) 节点流量守恒原则，(iii) 线性预算核算。\n- **连通性强制措施：** 采用单商品流公式确保所有选定单元形成一个包含指定根节点的单一连通集合。\n- **图的定义：**\n    - 顶点：$V=\\{1,2,3,4,5\\}$。\n    - 无向边：$E=\\{(1,2),(2,3),(3,4),(4,5)\\}$。\n    - 有向弧：$A$ 是通过将 $E$ 中的每条边替换为两条有向弧而形成的。\n- **问题数据：**\n    - 成本：$c_1=3$, $c_2=2$, $c_3=2$, $c_4=1$, $c_5=3$。\n    - 效益：$b_1=8$, $b_2=5$, $b_3=4$, $b_4=2$, $b_5=7$。\n    - 预算：$B=7$。\n    - 根节点：$r=3$。\n- **任务：**\n    - 构造一个二元整数规划（BIP），以最大化总效益，同时满足预算和连通性约束，并要求必须选择根节点 $r$。\n    - 计算最优总效益值。\n\n### 第2步：使用提取的已知条件进行验证\n对问题进行严格的验证检查：\n- **科学依据：** 问题是运筹学（具体来说是整数规划）在保护规划中的一个标准的、科学上合理的应用。使用图论和基于流的约束来模拟空间连续性是景观生态学和保护区设计文献中一种成熟有效的方法。该问题牢固地建立在公认的数学和生态学原理之上。\n- **适定性：** 问题指定了明确的目标函数（最大化总效益）和一组定义明确的约束（预算、根节点选择、连通性）。它是一个在有限非空可行集（只包含根节点的集合是可行的）上的最大化问题，这保证了最优解的存在。该问题是适定的。\n- **客观性：** 问题以精确、量化的术语陈述。所有参数都已明确定义。没有主观、模糊或基于意见的语言。\n- **完整性和一致性：** 所有必要数据（$V$、$E$、成本、效益、预算、根节点）都已提供。选择根节点（$x_r=1$）的要求与预算是一致的，因为根节点的成本（$c_3=2$）小于总预算（$B=7$）。没有矛盾之处。\n- **现实性和可行性：** 该问题是一个抽象的表示，但它不违反任何物理或逻辑原理。数值的选择是为了一个易于处理的例子。\n\n### 第3步：结论与行动\n问题是**有效的**。它是应用于保护生物学的优化领域中一个正确且表述良好的问题。将提供解答。\n\n### 整数规划公式\n首先，我们按要求构造二元整数规划。\n\n**决策变量：**\n- 对每个规划单元 $i \\in V$，令 $x_i \\in \\{0, 1\\}$ 为一个决策变量。若 $x_i=1$，则选择单元 $i$；若 $x_i=0$，则不选择。\n- 令 $f_{ij} \\ge 0$ 为一个连续变量，表示在有向弧 $(i,j) \\in A$ 上流动的概念性商品的数量。\n\n**目标函数：**\n目标是最大化所选单元的效益总和：\n$$ \\text{最大化 } \\sum_{i \\in V} b_i x_i = 8x_1 + 5x_2 + 4x_3 + 2x_4 + 7x_5 $$\n\n**约束条件：**\n1.  **预算约束：** 所选单元的总成本不能超过预算 $B$。\n    $$ \\sum_{i \\in V} c_i x_i = 3x_1 + 2x_2 + 2x_3 + 1x_4 + 3x_5 \\le 7 $$\n\n2.  **根节点选择约束：** 必须选择指定的根单元 $r=3$。\n    $$ x_3 = 1 $$\n\n3.  **连通性约束（单商品流）：** 这些约束确保由所选单元集合 $\\{i \\in V \\mid x_i=1\\}$ 导出的子图是连通的，并且包含根节点 $r=3$。这是通过要求每个选定的非根节点消耗由根节点提供的一个单位流量来实现的，流量被限制在选定节点的路径上。\n\n    a. **根节点（$r=3$）的流量平衡：** 从根节点流出的净流量必须等于其他选定单元（汇点）的数量。\n    $$ \\sum_{(3,j)\\in A} f_{3j} - \\sum_{(j,3)\\in A} f_{j3} = \\sum_{i \\in V \\setminus \\{3\\}} x_i $$\n    对于给定的图，即：\n    $$ (f_{32} + f_{34}) - (f_{23} + f_{43}) = x_1 + x_2 + x_4 + x_5 $$\n\n    b. **非根节点（$i \\in V \\setminus \\{3\\}$）的流量平衡：** 每个选定的非根节点必须消耗一个单位的流量。如果一个节点未被选中，其流入量必须等于其流出量（它充当一个中转点）。\n    $$ \\sum_{(j,i)\\in A} f_{ji} - \\sum_{(i,j)\\in A} f_{ij} = x_i \\quad \\forall i \\in V \\setminus \\{3\\} $$\n    对于给定的图节点：\n    - $i=1$: $f_{21} - f_{12} = x_1$\n    - $i=2$: $(f_{12} + f_{32}) - (f_{21} + f_{23}) = x_2$\n    - $i=4$: $(f_{34} + f_{54}) - (f_{43} + f_{45}) = x_4$\n    - $i=5$: $f_{45} - f_{54} = x_5$\n\n    c. **流容量约束：** 流量被限制为只能从选定的节点发出。如果节点 $i$ 未被选中（$x_i=0$），则不能有流量离开它。这是通过将节点的总流出量与其选择状态相关联来强制执行的。一个正确且常见的写法是：\n    $$ \\sum_{(i,j)\\in A} f_{ij} \\le (|V|-1) x_i \\quad \\forall i \\in V $$\n    这里， $|V|-1 = 4$ 是可能的最大汇点数。\n    - $i=1$: $f_{12} \\le 4x_1$\n    - $i=2$: $f_{21} + f_{23} \\le 4x_2$\n    - $i=3$: $f_{32} + f_{34} \\le 4x_3$\n    - $i=4$: $f_{43} + f_{45} \\le 4x_4$\n    - $i=5$: $f_{54} \\le 4x_5$\n\n这就完成了二元整数规划的公式构建。\n\n### 最优解计算\n对于这种小规模问题，最优解可以通过系统地枚举所有可行的连通保护区配置并比较它们的总效益来找到。一个可行的配置是规划单元的一个集合 $S \\subseteq V$，它满足：\n1.  包含根节点：$3 \\in S$。\n2.  导出连通子图。\n3.  满足预算：$\\sum_{i \\in S} c_i \\le 7$。\n\n该图是一条线性路径 $1-2-3-4-5$。任何包含节点3的连通子图都必须是这条路径上包含节点3的连续段。我们列出所有这样的段，检查它们的成本是否符合预算，并计算它们的效益。\n\n- **候选集 $S_1 = \\{3\\}$：**\n  - 成本：$c_3 = 2$。预算检查：$2 \\le 7$ (可行)。\n  - 效益：$b_3 = 4$。\n\n- **候选集 $S_2 = \\{2, 3\\}$：**\n  - 成本：$c_2 + c_3 = 2 + 2 = 4$。预算检查：$4 \\le 7$ (可行)。\n  - 效益：$b_2 + b_3 = 5 + 4 = 9$。\n\n- **候选集 $S_3 = \\{3, 4\\}$：**\n  - 成本：$c_3 + c_4 = 2 + 1 = 3$。预算检查：$3 \\le 7$ (可行)。\n  - 效益：$b_3 + b_4 = 4 + 2 = 6$。\n\n- **候选集 $S_4 = \\{1, 2, 3\\}$：**\n  - 成本：$c_1 + c_2 + c_3 = 3 + 2 + 2 = 7$。预算检查：$7 \\le 7$ (可行)。\n  - 效益：$b_1 + b_2 + b_3 = 8 + 5 + 4 = 17$。\n\n- **候选集 $S_5 = \\{2, 3, 4\\}$：**\n  - 成本：$c_2 + c_3 + c_4 = 2 + 2 + 1 = 5$。预算检查：$5 \\le 7$ (可行)。\n  - 效益：$b_2 + b_3 + b_4 = 5 + 4 + 2 = 11$。\n\n- **候选集 $S_6 = \\{3, 4, 5\\}$：**\n  - 成本：$c_3 + c_4 + c_5 = 2 + 1 + 3 = 6$。预算检查：$6 \\le 7$ (可行)。\n  - 效益：$b_3 + b_4 + b_5 = 4 + 2 + 7 = 13$。\n\n- **候选集 $S_7 = \\{1, 2, 3, 4\\}$：**\n  - 成本：$c_1 + c_2 + c_3 + c_4 = 3 + 2 + 2 + 1 = 8$。预算检查：$8 > 7$ (不可行)。\n\n- **候选集 $S_8 = \\{2, 3, 4, 5\\}$：**\n  - 成本：$c_2 + c_3 + c_4 + c_5 = 2 + 2 + 1 + 3 = 8$。预算检查：$8 > 7$ (不可行)。\n\n- **候选集 $S_9 = \\{1, 2, 3, 4, 5\\}$：**\n  - 成本：$c_1 + c_2 + c_3 + c_4 + c_5 = 3 + 2 + 2 + 1 + 3 = 11$。预算检查：$11 > 7$ (不可行)。\n\n比较可行集合的总效益：\n$B(S_1) = 4$\n$B(S_2) = 9$\n$B(S_3) = 6$\n$B(S_4) = 17$\n$B(S_5) = 11$\n$B(S_6) = 13$\n\n这些值中的最大值为 $17$。这个效益是通过选择规划单元 $\\{1, 2, 3\\}$ 实现的。总成本为 $7$，刚好用完预算。该选择是连通的并且包含根节点。因此，最优总效益为 $17$。", "answer": "$$\\boxed{17}$$", "id": "2528291"}]}