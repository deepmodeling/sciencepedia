{"hands_on_practices": [{"introduction": "星形胶质细胞-神经元乳酸穿梭与突触活动紧密耦合。本练习提供了一个量化这种联系的框架，其重点是星形胶质细胞的主要任务：清除突触间隙的谷氨酸。通过应用基本的化学计量学原理，您将计算这一过程的代谢成本，并确定支持它所需的相应乳酸通量 [@problem_id:2698839]。", "problem": "新皮层中的一个星形胶质细胞与一个局部兴奋性突触网络形成三方突触。在持续活动期间，该星形胶质细胞通过星形胶质细胞兴奋性氨基酸转运体 (EAATs) 清除突触释放的谷氨酸，主要通过星形胶质细胞富集的亚型 EAAT1/谷氨酸天冬氨酸转运体 (GLAST) 和 EAAT2/谷氨酸转运体 1 (GLT-1)。假设以下经过充分检验的事实和条件成立：\n\n- 每个兴奋性氨基酸转运体 (EAAT) 循环将 $1$ 个谷氨酸分子、$3$ 个 $\\mathrm{Na}^{+}$ 离子和 $1$ 个 $\\mathrm{H}^{+}$ 离子协同转运入星形胶质细胞，并将 $1$ 个 $\\mathrm{K}^{+}$ 离子逆向转运出星形胶质细胞。\n- 细胞膜钠钾腺苷三磷酸酶 (ATPase) 每水解一个腺苷三磷酸 (ATP) 分子，可泵出 $3$ 个 $\\mathrm{Na}^{+}$ 离子并泵入 $2$ 个 $\\mathrm{K}^{+}$ 离子。\n- 星形胶质细胞谷氨酰胺合成酶将细胞内的谷氨酸转化为谷氨酰胺，每转化一个谷氨酸分子消耗 $1$ 个 ATP 分子。\n- 在此处考虑的星形胶质细胞-神经元乳酸穿梭 (ANLS) 机制中，星形胶质细胞仅通过糖酵解提供这些过程所需的所有 ATP，每分子葡萄糖净产生 $2$ 个 ATP 和 $2$ 个乳酸。所有丙酮酸都被还原为乳酸并被输出。\n\n该星形胶质细胞包裹了 $1.2 \\times 10^{5}$ 个兴奋性突触。每个突触平均以每秒 $2.5$ 个囊泡的速率释放谷氨酸，每个囊泡含有 $3.0 \\times 10^{3}$ 个谷氨酸分子。由于受体结合和扩散作用，星形胶质细胞通过其 EAATs 捕获所释放谷氨酸分子的 $0.80$。阿伏伽德罗常数为 $N_{A} = 6.022 \\times 10^{23}\\ \\mathrm{mol^{-1}}$。\n\n仅使用上述信息和基本的化学计量推理，计算在该星形胶质细胞支持此谷氨酸摄取和转化工作负载所需的稳态乳酸输出通量。请用飞摩尔/秒 (fmol/s) 作为单位表示最终答案，并四舍五入至三位有效数字。", "solution": "所陈述的问题具有科学依据、内容独立且表述清晰。它要求基于细胞神经科学和生物能量学的既定原理进行化学计量计算。我将开始解题。\n\n目标是计算一个星形胶质细胞在支持兴奋性突触网络中的谷氨酸清除时，其稳态乳酸输出通量。解题过程将遵循以下逻辑步骤：\n$1$. 计算星形胶质细胞捕获谷氨酸分子的总速率。\n$2$. 确定处理这些谷氨酸所需的腺苷三磷酸 (ATP) 总消耗速率，其中包括两个部分：转化为谷氨酰胺和恢复离子梯度。\n$3$. 计算供应此 ATP 量所需的糖酵解速率。\n$4$. 确定糖酵解产生的相应乳酸生成速率。\n$5$. 将此速率转换为指定的单位，即飞摩尔/秒。\n\n让我们用符号定义给定的参数：\n- 突触数量：$N_{syn} = 1.2 \\times 10^{5}$\n- 每个突触的囊泡释放速率：$R_{ves} = 2.5 \\ \\mathrm{s^{-1}}$\n- 每个囊泡的谷氨酸分子数：$N_{glu/ves} = 3.0 \\times 10^{3}$\n- 星形胶质细胞捕获分数：$f_{cap} = 0.80$\n- 阿伏伽德罗常数：$N_{A} = 6.022 \\times 10^{23}\\ \\mathrm{mol^{-1}}$\n\n首先，我们计算所有突触释放谷氨酸的总速率，记为 $\\dot{N}_{glu, release}$。\n$$ \\dot{N}_{glu, release} = N_{syn} \\times R_{ves} \\times N_{glu/ves} $$\n代入给定值：\n$$ \\dot{N}_{glu, release} = (1.2 \\times 10^{5}) \\times (2.5 \\ \\mathrm{s^{-1}}) \\times (3.0 \\times 10^{3}) = 9.0 \\times 10^{8} \\ \\mathrm{molecules \\ s^{-1}} $$\n星形胶质细胞摄取谷氨酸的速率 $\\dot{N}_{glu, uptake}$ 是该总释放速率的一部分，比例为 $f_{cap}$。\n$$ \\dot{N}_{glu, uptake} = \\dot{N}_{glu, release} \\times f_{cap} = (9.0 \\times 10^{8} \\ \\mathrm{s^{-1}}) \\times 0.80 = 7.2 \\times 10^{8} \\ \\mathrm{molecules \\ s^{-1}} $$\n\n接下来，我们评估 ATP 的总消耗速率 $\\dot{N}_{ATP, total}$。它等于谷氨酰胺合成酶消耗的 ATP ($\\dot{N}_{ATP, GS}$) 和 $\\mathrm{Na}^{+}/\\mathrm{K}^{+}$-ATPase 消耗的 ATP ($\\dot{N}_{ATP, pump}$) 之和。\n$$ \\dot{N}_{ATP, total} = \\dot{N}_{ATP, GS} + \\dot{N}_{ATP, pump} $$\n根据题意，谷氨酰胺合成酶每转化一个谷氨酸分子消耗 $1$ 个 ATP。因此，该过程的 ATP 消耗速率等于谷氨酸的摄取速率。\n$$ \\dot{N}_{ATP, GS} = 1 \\times \\dot{N}_{glu, uptake} = 7.2 \\times 10^{8} \\ \\mathrm{ATP \\ s^{-1}} $$\n为了确定离子转运的 ATP 成本，我们考虑化学计量关系。每个 EAAT 循环将 $1$ 个谷氨酸分子和 $3$ 个 $\\mathrm{Na}^{+}$ 离子一起转运入星形胶质细胞。$\\mathrm{Na}^{+}/\\mathrm{K}^{+}$-ATPase 通过每水解 $1$ 个 ATP 泵出 $3$ 个 $\\mathrm{Na}^{+}$ 离子来恢复 $\\mathrm{Na}^{+}$ 梯度。这种耦合是直接的：每摄取一个谷氨酸分子，就有 $3$ 个 $\\mathrm{Na}^{+}$ 离子进入，这需要泵正好进行一个循环来泵出这些离子。这个泵循环消耗 $1$ 个 ATP。\n因此，泵的 ATP 消耗速率也与谷氨酸摄取速率成正比。\n$$ \\dot{N}_{ATP, pump} = 1 \\times \\dot{N}_{glu, uptake} = 7.2 \\times 10^{8} \\ \\mathrm{ATP \\ s^{-1}} $$\n总 ATP 消耗速率是这两个部分的总和。\n$$ \\dot{N}_{ATP, total} = (7.2 \\times 10^{8} \\ \\mathrm{s^{-1}}) + (7.2 \\times 10^{8} \\ \\mathrm{s^{-1}}) = 1.44 \\times 10^{9} \\ \\mathrm{ATP \\ s^{-1}} $$\n\n题目指出，所有 ATP 均由糖酵解提供，每分子葡萄糖净产生 $2$ 个 ATP 和 $2$ 个乳酸分子。这建立了一个 $2 \\ \\mathrm{ATP} : 2 \\ \\mathrm{Lactate}$ 的化学计量比，即 $1:1$。因此，每秒产生的乳酸分子数 $\\dot{N}_{lactate}$ 等于每秒消耗的 ATP 分子数。\n$$ \\dot{N}_{lactate} = \\dot{N}_{ATP, total} = 1.44 \\times 10^{9} \\ \\mathrm{molecules \\ s^{-1}} $$\n\n最后，我们将此速率从“分子/秒”转换为“飞摩尔/秒 (fmol/s)”。摩尔通量 $\\Phi_{lactate}$ 可通过将分子速率除以阿伏伽德罗常数 $N_{A}$ 计算得出。\n$$ \\Phi_{lactate} = \\frac{\\dot{N}_{lactate}}{N_{A}} = \\frac{1.44 \\times 10^{9} \\ \\mathrm{s^{-1}}}{6.022 \\times 10^{23} \\ \\mathrm{mol^{-1}}} \\approx 2.39123 \\times 10^{-15} \\ \\mathrm{mol \\ s^{-1}} $$\n为了以飞摩尔/秒表示，我们使用换算关系 $1 \\ \\mathrm{fmol} = 10^{-15} \\ \\mathrm{mol}$。\n$$ \\Phi_{lactate} (\\mathrm{fmol/s}) = (2.39123 \\times 10^{-15} \\ \\mathrm{mol \\ s^{-1}}) \\times \\frac{1 \\ \\mathrm{fmol}}{10^{-15} \\ \\mathrm{mol}} = 2.39123 \\ \\mathrm{fmol \\ s^{-1}} $$\n根据题目要求，四舍五入到三位有效数字，最终答案为 $2.39 \\ \\mathrm{fmol \\ s^{-1}}$。", "answer": "$$\n\\boxed{2.39}\n$$", "id": "2698839"}, {"introduction": "除了谷氨酸的再循环，整个突触单元，包括突触前和突触后神经元，都有其巨大的能量需求。这个实践问题将我们的视角扩展到三方突触的系统级能量收支。您的任务是计算满足星形胶质细胞和神经元双方需求的最小葡萄糖供应量，从而识别系统中的潜在代谢瓶颈 [@problem_id:2698831]。", "problem": "单个皮层原浆星形胶质细胞包裹着许多谷氨酸能突触，并参与三方突触内的神经递质清除和再循环。请考虑以下基于科学的事实和假设：\n\n- 星形胶质细胞中的钠依赖性谷氨酸转运体每摄取一个谷氨酸分子，共转运大约 $3$ 个钠离子。$\\mathrm{Na}^{+}/\\mathrm{K}^{+}$-ATPase 水解 $1$ 个三磷酸腺苷 (ATP) 以泵出 $3$ 个钠离子；因此，在谷氨酸摄取后恢复钠平衡的成本约为每摄取一个谷氨酸消耗 $1$ 个ATP。谷氨酰胺合成酶每将一个谷氨酸转化为谷氨酰胺消耗 $1$ 个ATP。假设星形胶质细胞每回收一个谷氨酸，总共花费 $2$ 个ATP用于摄取和转化。\n- 当丙酮酸完全还原为乳酸并被输出时，星形胶质细胞的糖酵解过程每消耗一个葡萄糖分子产生 $2$ 个ATP和 $2$ 个乳酸分子。\n- 在神经元中，考虑到丙酮酸脱氢酶、三羧酸循环以及用于再氧化胞质烟酰胺腺嘌呤二核苷酸 (NADH) 的苹果酸-天冬氨酸穿梭 (MAS)，来自星形胶质细胞的乳酸的氧化代谢每分子乳酸大约产生 $15$ 个ATP。\n- 所有由星形胶质细胞生成的丙酮酸都被转化为乳酸并输出；星形胶质细胞依靠糖酵解来获取其自身所需的ATP。在本问题中，神经元完全依赖于这种来自星形胶质细胞的乳酸来获取ATP。忽略任何其他代谢底物或成本。\n\n现在考虑一个微域，其中一个星形胶质细胞接触 $M = 1.0 \\times 10^{5}$ 个谷氨酸能突触。每个突触平均以 $v = 1.2 \\, \\text{s}^{-1}$ 的速率释放囊泡，每个囊泡含有 $n = 3.5 \\times 10^{3}$ 个谷氨酸分子。星形胶质细胞回收释放的谷氨酸中的 $p = 0.85$ 比例。与突触传递相关的神经元过程（包括突触前循环和突触后离子泵送）平均每个释放的谷氨酸分子消耗 $c_{n} = 25$ 个ATP。\n\n仅使用上述事实，确定星形胶质细胞的最小葡萄糖摄取速率，该速率需同时满足 (i) 供应星形胶质细胞自身用于谷氨酸摄取和转化的ATP需求，以及 (ii) 通过星形胶质细胞-神经元乳酸穿梭供应神经元的ATP需求。请将您的最终答案表示为每秒的葡萄糖分子数，并四舍五入至三位有效数字。", "solution": "在尝试求解之前，对问题陈述进行验证。\n\n**步骤1：提取已知条件**\n问题陈述中提供了以下数据和定义：\n- 与一个谷氨酸分子共转运的钠离子数：$3$。\n- $\\mathrm{Na}^{+}/\\mathrm{K}^{+}$-ATPase泵出 $3$ 个钠离子所水解的ATP数：$1$。\n- 谷氨酰胺合成酶转化一个谷氨酸所消耗的ATP数：$1$。\n- 星形胶质细胞每摄取并转化一个谷氨酸的总ATP成本：$C_{ATP,a} = 2$。\n- 星形胶质细胞糖酵解每分子葡萄糖产生的ATP数：$Y_{ATP,glyc} = 2$。\n- 星形胶质细胞糖酵解每分子葡萄糖产生的乳酸数：$Y_{Lac,glyc} = 2$。\n- 神经元中每分子乳酸经氧化代谢产生的ATP数：$Y_{ATP,oxphos} = 15$。\n- 每个星形胶质细胞接触的突触数量：$M = 1.0 \\times 10^{5}$。\n- 每个突触的平均囊泡释放速率：$v = 1.2 \\, \\text{s}^{-1}$。\n- 每个囊泡的谷氨酸分子数：$n = 3.5 \\times 10^{3}$。\n- 星形胶质细胞回收的已释放谷氨酸的比例：$p = 0.85$。\n- 每个释放的谷氨酸分子所对应的神经元ATP消耗量：$c_{n} = 25$。\n\n该问题做出了以下明确假设：\n1. 谷氨酸摄取后恢复钠平衡的成本是每个谷氨酸消耗 $1$ 个ATP。\n2. 星形胶质细胞的总成本是每个谷氨酸消耗 $2$ 个ATP。\n3. 所有由星形胶质细胞生成的丙酮酸都被转化为乳酸并输出。\n4. 星形胶质细胞仅依靠糖酵解来获取其自身所需的ATP。\n5. 在本问题中，神经元完全依赖于来自星形胶质细胞的乳酸来获取ATP。\n6. 其他代谢底物或成本被忽略。\n\n**步骤2：使用提取的已知条件进行验证**\n根据验证标准对问题进行评估：\n- **科学依据：** 该问题基于星形胶质细胞-神经元乳酸穿梭 (ANLS) 假说，这是细胞神经科学中一个广为接受的概念。指定的生物能量学参数（例如，离子转运和合成的ATP成本，糖酵解和氧化磷酸化的ATP产量）是代谢建模中使用的标准、简化的近似值，并且与既定的生物化学原理一致。该问题是一个基于科学事实的定量练习。\n- **良定性：** 该问题要求从一组清晰、无矛盾的约束条件中推导出一个单一、明确定义的量（最小葡萄糖摄取速率）。通过满足所有陈述的条件可以确定一个唯一的解。\n- **客观性：** 问题陈述使用了精确、定量和客观的语言，没有主观或模糊的术语。\n- **完整性与一致性：** 问题提供了构建完整模型和推导答案所需的所有必要参数和关系。没有缺失数据或内部矛盾。\n\n**步骤3：结论与行动**\n该问题具有科学依据、良定性、客观性并且是自洽的。因此判定为**有效**。将提供完整解答。\n\n**求解过程**\n\n目标是找到星形胶质细胞的最小葡萄糖摄取速率（我们将其表示为 $R_{G}$），该速率能同时满足星形胶质细胞自身以及相关神经元的ATP需求。\n\n首先，我们计算微域中所有突触释放谷氨酸的总速率。该速率 $R_{Glu, release}$ 是突触数量、每个突触的囊泡释放速率以及每个囊泡的谷氨酸分子数的乘积。\n$$R_{Glu, release} = M \\times v \\times n$$\n代入给定值：\n$$R_{Glu, release} = (1.0 \\times 10^{5}) \\times (1.2 \\, \\text{s}^{-1}) \\times (3.5 \\times 10^{3}) = 4.2 \\times 10^{8} \\text{ 分子 s}^{-1}$$\n\n接下来，我们计算星形胶质细胞摄取谷氨酸的速率 $R_{Glu, uptake}$。这是总释放谷氨酸的一部分，比例为 $p$。\n$$R_{Glu, uptake} = p \\times R_{Glu, release}$$\n$$R_{Glu, uptake} = 0.85 \\times (4.2 \\times 10^{8} \\, \\text{s}^{-1}) = 3.57 \\times 10^{8} \\text{ 分子 s}^{-1}$$\n\n现在，我们确定星形胶质细胞和神经元的ATP需求。\n\n1.  **星形胶质细胞的ATP需求 ($D_{ATP,a}$):**\n    星形胶质细胞每摄取并转化为谷氨酰胺一个谷氨酸分子，消耗 $C_{ATP,a} = 2$ 个ATP。\n    $$D_{ATP,a} = R_{Glu, uptake} \\times C_{ATP,a}$$\n    $$D_{ATP,a} = (3.57 \\times 10^{8} \\text{ 分子 s}^{-1}) \\times (2 \\text{ ATP 分子}^{-1}) = 7.14 \\times 10^{8} \\text{ ATP s}^{-1}$$\n\n2.  **神经元的ATP需求 ($D_{ATP,n}$):**\n    对于在突触处释放的每个谷氨酸分子，神经元消耗 $c_{n} = 25$ 个ATP。请注意，此成本与总释放速率相关，而非与星形胶质细胞的摄取速率相关。\n    $$D_{ATP,n} = R_{Glu, release} \\times c_{n}$$\n    $$D_{ATP,n} = (4.2 \\times 10^{8} \\text{ 分子 s}^{-1}) \\times (25 \\text{ ATP 分子}^{-1}) = 1.05 \\times 10^{10} \\text{ ATP s}^{-1}$$\n\n星形胶质细胞通过以每秒 $R_{G}$ 个分子的速率消耗葡萄糖来满足这些能量需求。每消耗一个葡萄糖分子，星形胶质细胞为其自身使用产生 $Y_{ATP,glyc} = 2$ 个ATP，并产生 $Y_{Lac,glyc} = 2$ 个乳酸分子输出给神经元。\n\n供给星形胶质细胞的ATP，$S_{ATP,a}$，为：\n$$S_{ATP,a} = R_{G} \\times Y_{ATP,glyc} = 2 R_{G}$$\n\n供给神经元的乳酸，$S_{Lac,n}$，为：\n$$S_{Lac,n} = R_{G} \\times Y_{Lac,glyc} = 2 R_{G}$$\n\n神经元随后利用这些乳酸生成ATP。供给神经元的ATP，$S_{ATP,n}$，为：\n$$S_{ATP,n} = S_{Lac,n} \\times Y_{ATP,oxphos} = (2 R_{G}) \\times 15 = 30 R_{G}$$\n\n为了找到最小葡萄糖摄取速率，我们必须满足两个条件：\n条件1：星形胶质细胞的ATP供应必须满足其自身的需求。\n$$S_{ATP,a} \\ge D_{ATP,a}$$\n$$2 R_{G} \\ge 7.14 \\times 10^{8} \\text{ s}^{-1}$$\n$$R_{G} \\ge \\frac{7.14 \\times 10^{8}}{2} \\text{ s}^{-1} = 3.57 \\times 10^{8} \\text{ s}^{-1}$$\n\n条件2：供给神经元的ATP（来自星形胶质细胞衍生的乳酸）必须满足神经元的需求。\n$$S_{ATP,n} \\ge D_{ATP,n}$$\n$$30 R_{G} \\ge 1.05 \\times 10^{10} \\text{ s}^{-1}$$\n$$R_{G} \\ge \\frac{1.05 \\times 10^{10}}{30} \\text{ s}^{-1} = 3.5 \\times 10^{8} \\text{ s}^{-1}$$\n\n最小葡萄糖摄取速率 $R_{G,min}$ 必须足够大以同时满足这两个条件。因此，它必须是两个单独最小速率中的最大值。\n$$R_{G,min} = \\max(3.57 \\times 10^{8} \\text{ s}^{-1}, 3.5 \\times 10^{8} \\text{ s}^{-1})$$\n$$R_{G,min} = 3.57 \\times 10^{8} \\text{ s}^{-1}$$\n\n限制因素是星形胶质细胞自身处理谷氨酸的ATP需求。最终答案必须表示为每秒的葡萄糖分子数，并四舍五入至三位有效数字。计算出的值 $3.57 \\times 10^{8}$ 已经是用三位有效数字表示的。", "answer": "$$\\boxed{3.57 \\times 10^{8}}$$", "id": "2698831"}, {"introduction": "突触功能本质上是动态的，其能量供应和需求随时间波动。本高级练习将超越稳态计算，指导您使用常微分方程构建一个 *in silico*（计算机模拟）模型来模拟这些动态过程。通过对系统响应突发性突触活动进行建模，您将量化评估其代谢弹性，这是维持大脑健康与功能的关键因素 [@problem_id:2698840]。", "problem": "设计并实现一个单个谷氨酸能三方突触的数值计算机模型（*in silico* model），该模型包含通过星形胶质细胞-神经元乳酸穿梭实现的代谢耦合。您的模型必须源自守恒定律和标准生物物理动力学，并且必须在指定的刺激-需求模式下计算一个可量化的韧性指标。\n\n您必须使用的基本原理：\n- 充分混合区室的质量平衡：对于区室中任何物种浓度 $x(t)$，$dx/dt$ 等于生成量减去移除量加上净运输量。\n- 用于可饱和转运和酶促氧化的 Michaelis-Menten 动力学，其中底物浓度为 $s(t)$，最大速率为 $V_{max}$，半饱和常数为 $K_m$：$v(s) = \\dfrac{V_{max}\\, s}{K_m + s}$。\n- 相邻充分混合区室间的线性唯象输运，对于溶质浓度差 $\\Delta c(t)$ 和渗透系数 $P$：$J = P\\, \\Delta c$。\n\n模型结构和变量（所有浓度单位为 mM，时间单位为 s）：\n- $G_e(t)$: 突触间隙谷氨酸。\n- $L_a(t)$: 星形胶质细胞乳酸。\n- $L_e(t)$: 细胞外乳酸。\n- $L_n(t)$: 神经元乳酸。\n- $A_n(t)$: 神经元三磷酸腺苷 (ATP)。\n\n通量和输入：\n- 谷氨酸释放输入 $S(t)$，分段常数：当 $t \\in [t_{on}, t_{off}]$ 时 $S(t) = S_{amp}$，否则 $S(t)=0$。$S_{amp}$ 的单位是 mM/s。\n- 星形胶质细胞兴奋性氨基酸转运体 (EAAT) 对谷氨酸的摄取：$v_{EAAT}(G_e) = \\dfrac{V_{max,a}\\, G_e}{K_{m,a} + G_e}$。\n- 突触间隙谷氨酸的非饱和清除（扩散/酶促）：$k_{decay}\\, G_e$。\n- 由谷氨酸摄取刺激的星形胶质细胞乳酸生成：$v_{gly}(t) = v_{gly,0} + \\alpha\\, v_{EAAT}(G_e(t))$。\n- 单羧酸转运体 (MCT) 介导的乳酸交换，视为星形胶质细胞与细胞外空间之间的线性唯象过程：$J_{a\\to e} = P_a \\left(L_a - L_e\\right)$，以及细胞外空间与神经元之间：$J_{e\\to n} = P_n \\left(L_e - L_n\\right)$。\n- 神经元乳酸氧化（底物使用）以支持 ATP：$v_{ox}(L_n) = \\dfrac{V_{ox}\\, L_n}{K_{ox} + L_n}$。\n- 神经元 ATP 动力学：每氧化 1 mM 乳酸的 ATP 产量为 $y_{ATP}$，消耗需求为 $d(t) = d_0 + \\beta\\, S(t)$。\n\n常微分方程 (ODE)：\n- $\\,\\dfrac{dG_e}{dt} = S(t) - v_{EAAT}(G_e) - k_{decay}\\, G_e$。\n- $\\,\\dfrac{dL_a}{dt} = v_{gly}(t) - J_{a\\to e}$。\n- $\\,\\dfrac{dL_e}{dt} = J_{a\\to e} - J_{e\\to n} - k_{clear}\\, L_e$。\n- $\\,\\dfrac{dL_n}{dt} = J_{e\\to n} - v_{ox}(L_n)$。\n- $\\,\\dfrac{dA_n}{dt} = y_{ATP}\\, v_{ox}(L_n) - d(t)$。\n\n$t=0$ 时的初始条件：\n- $G_e(0)=0$ mM, $L_a(0)=1.0$ mM, $L_e(0)=1.0$ mM, $L_n(0)=1.0$ mM, $A_n(0)=2.5$ mM。\n\n模拟和指标：\n- 使用数值稳定的 ODE 求解器对每个测试案例在 $t \\in [0, T_{end}]$ 秒内进行模拟。为计算韧性指标，评估在模拟期间 $A_n(t)$ 低于临界阈值 $A_{crit}$ 的时间所占的比例。该比例必须以四位小数的十进制数形式返回。\n- 答案为无单位的十进制小数，小数点后保留四位。\n\n参数定义和单位：\n- $V_{max,a}$ (mM/s), $K_{m,a}$ (mM), $k_{decay}$ ($\\text{s}^{-1}$), $v_{gly,0}$ (mM/s), $\\alpha$ (无单位), $P_a$ ($\\text{s}^{-1}$), $P_n$ ($\\text{s}^{-1}$), $k_{clear}$ ($\\text{s}^{-1}$), $V_{ox}$ (mM/s), $K_{ox}$ (mM), $y_{ATP}$ (mM ATP / mM 乳酸), $d_0$ (mM/s), $\\beta$ (无单位), $S_{amp}$ (mM/s), $t_{on}$ (s), $t_{off}$ (s), $A_{crit}$ (mM), $T_{end}$ (s)。\n\n测试套件：\n对每个测试案例，使用以下值的元组\n$\\left(V_{max,a}, K_{m,a}, k_{decay}, v_{gly,0}, \\alpha, P_a, P_n, k_{clear}, V_{ox}, K_{ox}, y_{ATP}, d_0, \\beta, S_{amp}, t_{on}, t_{off}, A_{crit}, T_{end}\\right)$：\n- 案例 1 (平衡耦合，中等强度刺激): $\\left(0.2, 0.02, 0.1, 0.001, 0.5, 0.05, 0.05, 0.005, 0.002, 0.05, 15.0, 0.008, 0.02, 0.5, 5.0, 15.0, 2.0, 60.0\\right)$。\n- 案例 2 (神经元摄取减弱和星形胶质细胞激活减弱): $\\left(0.2, 0.02, 0.1, 0.001, 0.1, 0.05, 0.005, 0.005, 0.002, 0.05, 15.0, 0.008, 0.02, 0.5, 5.0, 15.0, 2.0, 60.0\\right)$。\n- 案例 3 (无突触刺激基线): $\\left(0.2, 0.02, 0.1, 0.001, 0.5, 0.05, 0.05, 0.005, 0.002, 0.05, 15.0, 0.008, 0.02, 0.0, 5.0, 15.0, 2.0, 60.0\\right)$。\n- 案例 4 (高需求爆发): $\\left(0.2, 0.02, 0.1, 0.001, 0.5, 0.05, 0.05, 0.005, 0.002, 0.05, 15.0, 0.012, 0.02, 2.0, 5.0, 15.0, 2.0, 60.0\\right)$。\n- 案例 5 (高需求下氧化能力和转运增强): $\\left(0.2, 0.02, 0.1, 0.001, 0.5, 0.08, 0.08, 0.005, 0.004, 0.05, 15.0, 0.012, 0.02, 2.0, 5.0, 15.0, 2.0, 60.0\\right)$。\n\n要求的最终输出格式：\n- 你的程序应生成单行输出，其中包含以上案例的五个韧性指标，按顺序排列，形式为用方括号括起来的逗号分隔列表（例如，$\\left[\\text{r}_1,\\text{r}_2,\\text{r}_3,\\text{r}_4,\\text{r}_5\\right]$），其中每个 $\\text{r}_i$ 四舍五入到小数点后四位。", "solution": "所提出的问题是有效的。它构成了一个耦合非线性常微分方程 (ODE) 组的适定初值问题。该模型在科学上基于质量平衡和标准生物物理动力学原理，描述了三方突触内的代谢耦合。未发现矛盾、歧义或信息缺失。任务是实现一个数值解法并计算指定的韧性指标。\n\n系统的状态由一个包含五个浓度的向量 $\\mathbf{y}(t) = [G_e(t), L_a(t), L_e(t), L_n(t), A_n(t)]^T$ 描述，其中 $t$ 是时间，单位为秒。该状态向量的演化由以下 ODE 系统 $\\frac{d\\mathbf{y}}{dt} = \\mathbf{f}(t, \\mathbf{y})$ 控制：\n\n1. 突触间隙谷氨酸, $G_e(t)$:\n$$\n\\frac{dG_e}{dt} = S(t) - v_{EAAT}(G_e) - k_{decay}\\, G_e\n$$\n其中 $S(t)$ 是分段常数谷氨酸释放，而 $v_{EAAT}$ 是 Michaelis-Menten 星形胶质细胞摄取：\n$$\nS(t) = \\begin{cases} S_{amp} & \\text{if } t \\in [t_{on}, t_{off}] \\\\ 0 & \\text{otherwise} \\end{cases}\n\\quad \\text{and} \\quad\nv_{EAAT}(G_e) = \\frac{V_{max,a}\\, G_e}{K_{m,a} + G_e}\n$$\n\n2. 星形胶质细胞乳酸, $L_a(t)$:\n$$\n\\frac{dL_a}{dt} = v_{gly}(t) - J_{a\\to e}\n$$\n这里，$v_{gly}(t)$ 是谷氨酸刺激的乳酸生成，$J_{a\\to e}$ 是到细胞外空间的线性输运通量：\n$$\nv_{gly}(t) = v_{gly,0} + \\alpha\\, v_{EAAT}(G_e(t))\n\\quad \\text{and} \\quad\nJ_{a\\to e} = P_a (L_a - L_e)\n$$\n\n3. 细胞外乳酸, $L_e(t)$:\n$$\n\\frac{dL_e}{dt} = J_{a\\to e} - J_{e\\to n} - k_{clear}\\, L_e\n$$\n该方程考虑了来自星形胶质细胞的乳酸流入、向神经元的流出 ($J_{e\\to n}$) 以及一个非饱和清除项。神经元流入为：\n$$\nJ_{e\\to n} = P_n (L_e - L_n)\n$$\n\n4. 神经元乳酸, $L_n(t)$:\n$$\n\\frac{dL_n}{dt} = J_{e\\to n} - v_{ox}(L_n)\n$$\n这平衡了来自细胞外空间的乳酸流入与其通过氧化消耗 $v_{ox}$ 的过程，后者遵循 Michaelis-Menten 动力学：\n$$\nv_{ox}(L_n) = \\frac{V_{ox}\\, L_n}{K_{ox} + L_n}\n$$\n\n5. 神经元三磷酸腺苷 (ATP), $A_n(t)$:\n$$\n\\frac{dA_n}{dt} = y_{ATP}\\, v_{ox}(L_n) - d(t)\n$$\nATP 水平由生产和消耗之间的平衡决定，生产与乳酸氧化耦合，产率为 $y_{ATP}$，消耗 $d(t)$ 取决于基础需求 $d_0$ 和刺激：\n$$\nd(t) = d_0 + \\beta\\, S(t)\n$$\n\n该系统需使用以下初始条件求解：\n$$\n\\mathbf{y}(0) = [G_e(0), L_a(0), L_e(0), L_n(0), A_n(0)]^T = [0, 1.0, 1.0, 1.0, 2.5]^T \\text{ mM}\n$$\n\n为了求解这个初值问题，我们采用一个数值 ODE 求解器。SciPy 库中的 `scipy.integrate.solve_ivp` 函数是一个合适的选择，它提供了鲁棒的自适应步长算法。求解方法的核心是首先将向量场 $\\mathbf{f}(t, \\mathbf{y})$ 实现为一个 Python 函数，然后对测试套件中提供的每组参数使用 `solve_ivp` 在时间区间 $[0, T_{end}]$ 上对系统进行积分。\n\n韧性指标定义为在总模拟时间 $T_{end}$ 内，神经元 ATP 浓度 $A_n(t)$ 低于临界阈值 $A_{crit}$ 的时间所占的比例。对该指标的精确计算需要确定 $A_n(t) = A_{crit}$ 的确切时间点。`solve_ivp` 的 `events` 特性非常适合此目的。我们定义一个事件函数 $g(t, \\mathbf{y}) = A_n(t) - A_{crit}$，求解器将找到所有满足 $g(t, \\mathbf{y}) = 0$ 的时间 $t$。\n\n设求解器找到的事件时间集合为 $\\{t_{ev,1}, t_{ev,2}, \\ldots, t_{ev,m}\\}$。我们将这些时间点与模拟的开始和结束时间结合，形成一个全面的时间点列表：$T_{points} = \\text{unique}([0, t_{ev,1}, \\ldots, t_{ev,m}, T_{end}])$。这些点将总区间 $[0, T_{end}]$ 分割成多个子区间。在每个子区间 $(T_{points}[i], T_{points}[i+1])$ 内，$A_n(t) - A_{crit}$ 的符号是恒定的。\n\n$A_n(t) < A_{crit}$ 的总持续时间是通过对满足条件的子区间的长度求和来计算的。为检查该条件，我们使用 `solve_ivp` 的密集输出功能（它为解提供了一个连续的插值函数）在每个子区间的中点评估 $A_n(t)$。随后，将总时间除以 $T_{end}$ 进行归一化，以获得最终的比例指标：\n$$\n\\text{韧性指标} = \\frac{1}{T_{end}} \\sum_{i \\text{ s.t. condition met}} (T_{points}[i+1] - T_{points}[i])\n$$\n对五个测试案例中的每一个重复此过程，以生成所需的输出。数值实现将精确遵循此描述的逻辑。", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef model(t, y, Vmax_a, Km_a, k_decay, v_gly0, alpha, Pa, Pn, k_clear, Vox, Kox, yATP, d0, beta, Samp, t_on, t_off, A_crit, T_end):\n    \"\"\"\n    Defines the system of ODEs for the tripartite synapse model.\n    \"\"\"\n    Ge, La, Le, Ln, An = y\n\n    # Glutamate stimulus input S(t)\n    S = Samp if t_on <= t <= t_off else 0.0\n\n    # Fluxes and intermediate calculations\n    # Glutamate dynamics in cleft\n    v_EAAT = (Vmax_a * Ge) / (Km_a + Ge)\n    dGe_dt = S - v_EAAT - k_decay * Ge\n\n    # Astrocytic lactate dynamics\n    v_gly = v_gly0 + alpha * v_EAAT\n    J_ae = Pa * (La - Le)\n    dLa_dt = v_gly - J_ae\n\n    # Extracellular lactate dynamics\n    J_en = Pn * (Le - Ln)\n    dLe_dt = J_ae - J_en - k_clear * Le\n\n    # Neuronal lactate dynamics\n    v_ox = (Vox * Ln) / (Kox + Ln)\n    dLn_dt = J_en - v_ox\n\n    # Neuronal ATP dynamics\n    d = d0 + beta * S\n    dAn_dt = yATP * v_ox - d\n\n    return [dGe_dt, dLa_dt, dLe_dt, dLn_dt, dAn_dt]\n\ndef solve():\n    \"\"\"\n    Main function to run simulations for all test cases and compute the resilience metric.\n    \"\"\"\n    test_cases = [\n        # Case 1: (balanced coupling, moderate stimulus)\n        (0.2, 0.02, 0.1, 0.001, 0.5, 0.05, 0.05, 0.005, 0.002, 0.05, 15.0, 0.008, 0.02, 0.5, 5.0, 15.0, 2.0, 60.0),\n        # Case 2: (weakened neuron uptake and weak astrocytic activation)\n        (0.2, 0.02, 0.1, 0.001, 0.1, 0.05, 0.005, 0.005, 0.002, 0.05, 15.0, 0.008, 0.02, 0.5, 5.0, 15.0, 2.0, 60.0),\n        # Case 3: (no synaptic stimulus baseline)\n        (0.2, 0.02, 0.1, 0.001, 0.5, 0.05, 0.05, 0.005, 0.002, 0.05, 15.0, 0.008, 0.02, 0.0, 5.0, 15.0, 2.0, 60.0),\n        # Case 4: (high-demand burst)\n        (0.2, 0.02, 0.1, 0.001, 0.5, 0.05, 0.05, 0.005, 0.002, 0.05, 15.0, 0.012, 0.02, 2.0, 5.0, 15.0, 2.0, 60.0),\n        # Case 5: (enhanced oxidative capacity and transport under high demand)\n        (0.2, 0.02, 0.1, 0.001, 0.5, 0.08, 0.08, 0.005, 0.004, 0.05, 15.0, 0.012, 0.02, 2.0, 5.0, 15.0, 2.0, 60.0),\n    ]\n\n    results = []\n\n    # Initial conditions\n    y0 = [0.0, 1.0, 1.0, 1.0, 2.5] # [Ge, La, Le, Ln, An] in mM\n\n    for i, case_params in enumerate(test_cases):\n        T_end = case_params[17]\n        A_crit = case_params[16]\n        t_span = (0, T_end)\n\n        # Event function to detect when An(t) crosses A_crit\n        def an_crit_event(t, y, *params):\n            return y[4] - params[16] # y[4] is An, params[16] is A_crit\n        an_crit_event.terminal = False # Do not stop integration at the event\n\n        # Solve the ODE system\n        sol = solve_ivp(\n            model,\n            t_span,\n            y0,\n            args=case_params,\n            dense_output=True,\n            events=an_crit_event\n        )\n\n        # Get the times where An(t) = A_crit\n        event_times = sol.t_events[0]\n\n        # Create a sorted list of time points including 0, T_end, and all event times\n        time_points = np.unique(np.concatenate(([0], event_times, [T_end])))\n\n        total_time_below_crit = 0.0\n        \n        # Check if initial state is below threshold\n        if y0[4] < A_crit:\n             # Find first upward crossing\n             upward_crossings = [t for t, y in zip(sol.t_events[0], sol.y_events[0]) if sol.sol(t-1e-9)[4] < A_crit]\n             if not upward_crossings:\n                 total_time_below_crit = T_end\n             else:\n                 total_time_below_crit += upward_crossings[0]\n        \n        # Iterate through intervals defined by the time points\n        for j in range(len(time_points) - 1):\n            t_start = time_points[j]\n            t_end = time_points[j+1]\n            \n            # Use midpoint to check if the interval is below the threshold\n            t_mid = (t_start + t_end) / 2.0\n            y_mid = sol.sol(t_mid)\n            An_mid = y_mid[4]\n\n            if An_mid < A_crit:\n                total_time_below_crit += (t_end - t_start)\n        \n        # In this problem, initial An > A_crit, so the simpler loop is sufficient.\n        # The logic is kept general but is effectively this:\n        # 1. Get crossing times.\n        # 2. Partition [0, T_end] using these times.\n        # 3. For each partition, check if An is below A_crit.\n        # 4. Sum durations of partitions where An is below A_crit.\n\n        resilience_metric = total_time_below_crit / T_end\n        results.append(f\"{resilience_metric:.4f}\")\n\n    # Print the final results in the required format\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2698840"}]}