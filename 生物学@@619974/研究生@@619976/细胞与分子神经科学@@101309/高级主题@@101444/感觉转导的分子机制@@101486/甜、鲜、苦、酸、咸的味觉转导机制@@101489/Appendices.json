{"hands_on_practices": [{"introduction": "味觉转导的本质是将化学刺激转化为细胞的电信号。第一个练习将带领你进行一次细胞神经生理学的基础实践，将离子通道活动与膜电位动态变化直接联系起来。通过计算 OTOP1 质子通道产生的电流所引发的膜电位初始变化率，你将对酸味刺激如何启动驱动细胞响应的去极化过程获得一个定量的理解 [@problem_id:2760640]。", "problem": "一个传导酸味的III型味觉感受器细胞表达质子选择性通道 Otopetrin 1 (OTOP1)。在一次细胞外酸化步骤后，于响应开始时，在电流钳模式下记录到一个大小为 $I_{H} = 50$ pA 的内向质子电流。该细胞的膜电容为 $C_{m} = 10$ pF。假设内向质子电流由正电荷进入所承载，因此在膜电位上产生一个初始的去极化变化。从电容器关系式和标准的电生理学符号约定出发，推导响应开始时膜电位的初始变化率 $\\Delta V / \\Delta t$。将你的最终数值答案以 $\\mathrm{mV/ms}$ 为单位表示，并四舍五入到三位有效数字。\n\n然后，运用发放动作电位的III型细胞的兴奋性第一性原理（在充分去极化后电压门控钠离子通道被激活），解释所计算出的初始速率是否可能足以在其他电导于电流起始瞬间尚未发生显著改变的假设下，使膜电位从静息状态迅速达到动作电位阈值。你的解释应是机制性的，并基于你计算出的速率的符号和大小。除了所要求的初始速率外，不要提供任何额外的数值答案。", "solution": "合适的基本出发点是连接膜电流与膜电压变化率的电容器关系式：对于一个被视为电容器的细胞膜，总膜电流 $I$ 和膜电容 $C_{m}$ 根据以下公式决定了膜电位的瞬时变化率\n$$\nI \\;=\\; C_{m}\\,\\frac{dV}{dt}.\n$$\n在这里，于响应开始时，由 Otopetrin 1 (OTOP1) 承载的记录到的内向质子电流，其大小指定为 $I_{H} = 50$ pA，并且是去极化的，因为它是由正电荷（质子）的进入所承载的。将 $I$ 视为驱动电容器的去极化电流，膜电位的初始变化率遵循\n$$\n\\frac{dV}{dt} \\;=\\; \\frac{I_{H}}{C_{m}}.\n$$\n代入给定值 $I_{H} = 50$ pA 和 $C_{m} = 10$ pF，得到\n$$\n\\frac{dV}{dt} \\;=\\; \\frac{50~\\mathrm{pA}}{10~\\mathrm{pF}}.\n$$\n使用定义 $1~\\mathrm{pA} = 10^{-12}~\\mathrm{A}$ 和 $1~\\mathrm{pF} = 10^{-12}~\\mathrm{F}$，\n$$\n\\frac{dV}{dt} \\;=\\; \\frac{50 \\times 10^{-12}~\\mathrm{A}}{10 \\times 10^{-12}~\\mathrm{F}} \\;=\\; 5~\\mathrm{V/s}.\n$$\n要将其表示为 $\\mathrm{mV/ms}$，请注意 $1~\\mathrm{V/s} = 1~\\mathrm{mV/ms}$，因为 $1~\\mathrm{V} = 10^{3}~\\mathrm{mV}$ 且 $1~\\mathrm{s} = 10^{3}~\\mathrm{ms}$，所以 $10^{3}$ 的因子相互抵消：\n$$\n5~\\mathrm{V/s} \\;=\\; 5~\\mathrm{mV/ms}.\n$$\n四舍五入到三位有效数字，得到 $5.00~\\mathrm{mV/ms}$。\n\n对于III型味觉感受器细胞发放动作电位的机制性解释：$\\frac{dV}{dt}$ 的符号为正，表示初始的去极化。其大小为 $5~\\mathrm{mV/ms}$，在电压门控钠离子通道激活的时间尺度上是相对陡峭的，而当去极化接近阈值时，这种激活通常发生在亚毫秒到毫秒的时间尺度上。如果膜电位处于低于动作电位阈值约几十毫伏的静息电位附近（例如，相差约 $20$–$30$ mV），在没有即时强反向电导的情况下，一个 $5~\\mathrm{mV/ms}$ 的持续初始斜率将足以在几毫秒内将膜电位带向阈值。具体来说，如果斜率保持不变，在 $5~\\mathrm{mV/ms}$ 的速率下产生 $30$ mV 的去极化大约需要 $6$ ms，这完全在电压门控钠离子通道的激活窗口内。因此，计算出的初始速率与响应开始时III型细胞膜电位快速接近动作电位阈值的情况是一致的，这支持了以下观点：由 OTOP1 介导的质子进入可提供强大的去极化驱动力来引发动作电位发放，而随后的动力学则由电压门控钠钾通道的参与以及任何酸敏感性漏电导的调制所塑造。", "answer": "$$\\boxed{5.00}$$", "id": "2760640"}, {"introduction": "味觉受体和离子通道的活动并非简单的“开”或“关”，而是常常受到化学物质浓度的精细调控。本练习以阿米洛利敏感性钠通道 (ENaC) 为例，聚焦于对这种剂量-反应关系的建模，这是药理学和生物物理学的基石。你将从基本原理出发，推导阻断剂浓度与通道抑制之间的关系，并将其应用于一个实际计算中，从而在生理学背景下巩固你对 $IC_{50}$ 和质量作用定律等核心概念的理解 [@problem_id:2760630]。", "problem": "在电压钳制的菌状味蕾感受器细胞中，上皮钠离子通道 (ENaC) 介导阿米洛利敏感性钠离子内流，这对低盐刺激的转导至关重要。考虑由阿米洛利引起的稳态阻断，阿米洛利是一种孔道阻断剂，它以一对一的方式与传导通路中的单个位点结合，亚基之间无协同作用，且在测试电位下不表现出电压依赖性。假设以下经过充分检验的前提：(i) 质量作用定律控制平衡状态下阻断剂的结合；(ii) 除了占据效应之外，阻断剂的结合不会改变未阻断通道的开放概率；(iii) 宏观电流与未阻断通道的比例成正比；及 (iv) 半数抑制浓度（记为 $IC_{50}$）是指在其他条件相同的情况下，宏观电流被抑制到其对照值一半时的游离阻断剂浓度。\n\n仅从这些前提出发，首先当希尔系数 $n=1$ 时，推导一个关联稳态下被阻断通道比例（记为 $f_{\\mathrm{block}}$）、游离阿米洛利浓度 $[B]$ 和 $IC_{50}$ 的表达式。然后，在给定 $IC_{50}=0.1\\,\\mu\\mathrm{M}$ 的条件下，使用该表达式计算当 $[B]=1\\,\\mu\\mathrm{M}$ 时的 $f_{\\mathrm{block}}$。将最终计算结果四舍五入至四位有效数字，并以无单位的小数形式表示。", "solution": "问题陈述已经过验证，被认为是自洽的、有科学依据且提法恰当的。所提供的前提足以进行严谨的推导和后续的计算。我们将开始解答。\n\n第一个任务是推导稳态下被阻断通道的比例 $f_{\\mathrm{block}}$ 作为游离阿米洛利浓度 $[B]$ 和半数抑制浓度 $IC_{50}$ 的函数表达式。该模型描述了通道 ($C$) 与阻断剂 ($B$) 之间一对一的结合相互作用，这与 $n=1$ 的希尔系数相符。\n\n可逆结合反应为：\n$$ C + B \\rightleftharpoons CB $$\n其中 $CB$ 代表被阻断的通道复合物。\n\n根据前提 (i)，质量作用定律适用于平衡状态。解离常数 $K_d$ 定义为：\n$$ K_d = \\frac{[C][B]}{[CB]} $$\n此处，$[C]$、$[B]$ 和 $[CB]$ 分别是游离通道、游离阻断剂和被阻断通道复合物的平衡浓度。\n\n被阻断通道的比例 $f_{\\mathrm{block}}$ 是被阻断通道的浓度与通道总浓度 $[C]_{\\text{total}} = [C] + [CB]$ 的比值：\n$$ f_{\\mathrm{block}} = \\frac{[CB]}{[C] + [CB]} $$\n\n为了用 $[B]$ 和 $K_d$ 来表示 $f_{\\mathrm{block}}$，我们首先重排 $K_d$ 的定义式，用其他物种来表示 $[C]$：\n$$ [C] = \\frac{K_d [CB]}{[B]} $$\n\n将此式代入 $f_{\\mathrm{block}}$ 的表达式中，可得：\n$$ f_{\\mathrm{block}} = \\frac{[CB]}{\\frac{K_d [CB]}{[B]} + [CB]} $$\n\n假设阻断剂浓度非零，从而 $[CB]$ 也非零，我们可以将分子和分母同除以 $[CB]$：\n$$ f_{\\mathrm{block}} = \\frac{1}{\\frac{K_d}{[B]} + 1} $$\n\n通过代数变换，此式可重写为 $n=1$ 时的 Hill 方程：\n$$ f_{\\mathrm{block}} = \\frac{[B]}{K_d + [B]} $$\n\n现在，我们必须将生物物理常数 $K_d$ 与唯象参数 $IC_{50}$ 联系起来。前提 (iii) 指出，宏观电流 $I$ 与未阻断通道的比例 $f_{\\text{unblock}}$ 成正比。未阻断通道的比例由 $f_{\\text{unblock}} = 1 - f_{\\text{block}}$ 给出：\n$$ f_{\\text{unblock}} = 1 - \\frac{[B]}{K_d + [B]} = \\frac{(K_d + [B]) - [B]}{K_d + [B]} = \\frac{K_d}{K_d + [B]} $$\n\n设 $I_{\\text{max}}$ 为无阻断剂存在时（$[B]=0$）的对照电流，此时 $f_{\\text{unblock}}=1$。在任意给定的阻断剂浓度 $[B]$ 下，电流为：\n$$ I([B]) = I_{\\text{max}} \\cdot f_{\\text{unblock}} = I_{\\text{max}} \\left( \\frac{K_d}{K_d + [B]} \\right) $$\n\n前提 (iv) 定义 $IC_{50}$ 为电流降低至其对照值一半时的阻断剂浓度。因此，当 $[B] = IC_{50}$ 时，我们有 $I(IC_{50}) = \\frac{1}{2} I_{\\text{max}}$。我们可以写出：\n$$ \\frac{1}{2} I_{\\text{max}} = I_{\\text{max}} \\left( \\frac{K_d}{K_d + IC_{50}} \\right) $$\n\n两边同除以 $I_{\\text{max}}$（为使实验有意义，其值必须为非零），得到：\n$$ \\frac{1}{2} = \\frac{K_d}{K_d + IC_{50}} $$\n\n解这个关于 $IC_{50}$ 的代数方程，证明了在这些模型假设下二者的等价性：\n$$ K_d + IC_{50} = 2 K_d \\implies IC_{50} = K_d $$\n\n通过将 $K_d = IC_{50}$ 代入我们推导出的 $f_{\\mathrm{block}}$ 方程，我们得到关联被阻断通道比例、阻断剂浓度和 $IC_{50}$ 的最终表达式：\n$$ f_{\\mathrm{block}} = \\frac{[B]}{IC_{50} + [B]} $$\n推导到此结束。\n\n第二个任务是使用所提供的数值 $[B] = 1 \\, \\mu\\mathrm{M}$ 和 $IC_{50} = 0.1 \\, \\mu\\mathrm{M}$ 来计算 $f_{\\mathrm{block}}$。\n\n将这些数值代入推导出的公式中：\n$$ f_{\\mathrm{block}} = \\frac{1 \\, \\mu\\mathrm{M}}{0.1 \\, \\mu\\mathrm{M} + 1 \\, \\mu\\mathrm{M}} = \\frac{1}{1.1} $$\n\n结果是一个无量纲量，这符合一个比例值的预期。执行除法运算：\n$$ f_{\\mathrm{block}} = \\frac{10}{11} \\approx 0.909090... $$\n\n题目要求将结果四舍五入至四位有效数字。\n$$ f_{\\mathrm{block}} \\approx 0.9091 $$", "answer": "$$\\boxed{0.9091}$$", "id": "2760630"}, {"introduction": "甜味、鲜味和苦味的复杂信号转导依赖于一个由多种分子相互作用组成的级联反应，而非单个组分。这项高阶练习要求你采用系统生物学的视角，构建一个 G 蛋白偶联受体 (GPCR) 完整通路的全动态计算模型。通过常微分方程来模拟该系统，你将探索信号通路中各组分间的非线性相互作用如何产生“超敏性” (ultrasensitivity) 这一涌现特性，这是细胞做出类似开关的敏锐决策的关键特征 [@problem_id:2760644]。", "problem": "要求你构建并分析一个最小但机械上忠实的常微分方程模型，用于描述 G 蛋白偶联味觉受体对甜、鲜或苦味配体的信号转导过程。该模型必须关联受体占据、异源三聚体 G 蛋白激活、磷脂酶 C β2 (PLCβ2) 活性、三磷酸肌醇 ($IP_3$) 动态、细胞内钙离子 ($Ca^{2+}$) 释放以及瞬时受体电位褪黑素 5 (Transient Receptor Potential Melastatin 5, TRPM5) 通道开放。所有量均为无量纲，时间采用任意归一化单位。\n\n仅使用以下基本定律和事实作为推导和实现的基础：\n- 用于受体-配体相互作用的质量作用结合，以及用于信号中间体的一阶失活。\n- 用于协同过程的 Hill 型 S 状激活，包括 $Ca^{2+}$ 依赖的 PLCβ2 激活、$IP_3$ 受体介导的 $Ca^{2+}$ 释放以及由 $Ca^{2+}$ 调控的 TRPM5 门控。\n- 因果通路：味觉 G 蛋白偶联受体的配体占据激活 G 蛋白，G 蛋白刺激 PLCβ2；PLCβ2 产生 $IP_3$，$IP_3$ 与内质网上的 $IP_3$ 受体结合，从而将 $Ca^{2+}$ 释放到胞浆中；胞浆中的 $Ca^{2+}$ 打开 TRPM5 通道。\n\n定义以下状态变量，每个都是时间 $t$ 的函数：受体激活分数 $R(t)$、激活的 G 蛋白分数 $G(t)$、激活的 PLCβ2 分数 $P(t)$、$IP_3$ 水平 $I(t)$、胞浆钙浓度 $C(t)$ 和 TRPM5 开放概率 $T(t)$。令 $L$ 表示胞外配体浓度，视为一个恒定输入。\n\n实现以下由非负常数参数化的最小 ODEs：\n- 通过质量作用的受体占据：\n$$\\frac{dR}{dt} = k_{\\mathrm{on}}\\,L\\,(1 - R) - k_{\\mathrm{off}}\\,R.$$\n- 由激活的受体引起的 G 蛋白激活及失活：\n$$\\frac{dG}{dt} = k_{G}^{\\mathrm{act}}\\,R\\,(1 - G) - k_{G}^{\\mathrm{deact}}\\,G.$$\n- PLCβ2 激活需要 $G$ 和 $Ca^{2+}$，具有 Hill 非线性和一阶失活：\n$$\\frac{dP}{dt} = k_{P}^{\\mathrm{act}}\\,H(G;K_G,n_G)\\,H(C;K_C,n_{P\\_Ca})\\,(1 - P) - k_{P}^{\\mathrm{deact}}\\,P.$$\n- 由激活的 PLCβ2 产生的 $IP_3$ 及其一阶降解：\n$$\\frac{dI}{dt} = v_{I}^{\\mathrm{prod}}\\,P\\,(1 - I) - k_{I}^{\\mathrm{deg}}\\,I.$$\n- 由 $IP_3$ 受体控制的 $Ca^{2+}$ 释放及从胞浆中泵出：\n$$\\frac{dC}{dt} = v_{C}^{\\mathrm{rel}}\\,H(I;K_I,n_I)\\,(1 - C) - v_{C}^{\\mathrm{pump}}\\,C.$$\n- TRPM5 门控作为一个向 $Ca^{2+}$ 依赖的稳态的一阶松弛过程：\n$$\\frac{dT}{dt} = \\frac{H(C;K_T,n_T) - T}{\\tau_T}.$$\n此处 $H(x;K,n)$ 是 Hill 函数：\n$$H(x;K,n) = \\frac{x^{n}}{K^{n} + x^{n}},$$\n其中 $x \\ge 0$，$K > 0$ 且 $n \\ge 1$。\n\n你的程序必须：\n1. 对于下方的每个测试用例（一个参数集），通过对数间距的配体浓度集 $L \\in [10^{-6}, 10^{2}]$（采样 $N = 41$ 个点）进行数值积分，将 ODEs 解算至稳态，以计算稳态剂量-响应关系 $T^\\ast(L)$。\n2. 对于每个测试用例，通过将分数响应 $T^\\ast(L)/\\max_{L}T^\\ast(L)$ 在其值介于 0.1 和 0.9 之间的范围内拟合到一个 Hill 函数 $L^{n}/(EC_{50}^{n} + L^{n})$，来估计稳态映射 $L \\mapsto T^\\ast(L)$ 的有效 Hill 系数 $n_{\\mathrm{eff}}$。如果拟合失败或点数不足，则将 $n_{\\mathrm{eff}}$ 估计为分数响应的 logit 对 $\\log L$ 在中点附近的局部斜率。\n3. 通过将 $n_{\\mathrm{eff}}$ 与阈值 $n_{\\mathrm{th}} = 2.5$ 进行比较，判断该测试用例是否为超敏性。为每个测试用例输出一个布尔值，指示是否 $n_{\\mathrm{eff}} > n_{\\mathrm{th}}$。\n4. 所有 ODE 积分必须强制状态变量的非负性，并使用合理的容差以确保收敛。\n\n除非在某个测试用例中另有规定，否则在所有模拟中使用以下常数：\n- $k_{\\mathrm{on}} = 1.0$, $k_{\\mathrm{off}} = 1.0$, $k_{G}^{\\mathrm{act}} = 5.0$, $k_{G}^{\\mathrm{deact}} = 1.0$, $k_{P}^{\\mathrm{act}} = 2.0$, $k_{P}^{\\mathrm{deact}} = 1.0$, $v_{I}^{\\mathrm{prod}} = 2.0$, $v_{C}^{\\mathrm{rel}} = 5.0$, $K_G = 0.3$, $n_G = 1.0$, $K_C = 0.3$, $K_I = 0.2$, $K_T = 0.3$, $n_T = 3.0$, $\\tau_T = 0.1$。\n\n测试套件（每个用例指定 $(n_{P\\_Ca}, n_I, k_{I}^{\\mathrm{deg}}, v_{C}^{\\mathrm{pump}})$；所有未指定的常数均如上所述）：\n- 用例 A (基线协同性): $(2.0, 2.0, 1.0, 1.0)$。\n- 用例 B (强非线性，预期超敏性): $(3.5, 3.0, 0.5, 0.8)$。\n- 用例 C (PLCβ2 的弱 $Ca^{2+}$ 依赖性): $(1.0, 2.0, 1.0, 1.0)$。\n- 用例 D (强的 $IP_3$ 降解和 $Ca^{2+}$ 泵出): $(3.0, 3.0, 3.0, 3.0)$。\n\n你的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表（例如，\"[resultA,resultB,resultC,resultD]\"），其中每一项是按 A、B、C 和 D 的顺序分别对应的布尔值。所有值都是无量纲的；不需要物理单位。最终的布尔值必须不带引号打印。\n\n你的实现必须是一个完整的、可在通用编程语言中运行的程序，并且不得需要任何输入。", "solution": "问题陈述经验证。\n\n**第 1 步：提取已知条件**\n- **状态变量**：$R(t)$、$G(t)$、$P(t)$、$I(t)$、$C(t)$、$T(t)$，均为无量纲。\n- **输入**：配体浓度 $L$，一个常数。\n- **Hill 函数**：$H(x;K,n) = \\frac{x^{n}}{K^{n} + x^{n}}$，其中 $x \\ge 0$，$K > 0$ 且 $n \\ge 1$。\n- **ODE 系统**：\n    1.  $\\frac{dR}{dt} = k_{\\mathrm{on}}\\,L\\,(1 - R) - k_{\\mathrm{off}}\\,R$\n    2.  $\\frac{dG}{dt} = k_{G}^{\\mathrm{act}}\\,R\\,(1 - G) - k_{G}^{\\mathrm{deact}}\\,G$\n    3.  $\\frac{dP}{dt} = k_{P}^{\\mathrm{act}}\\,H(G;K_G,n_G)\\,H(C;K_C,n_{P\\_Ca})\\,(1 - P) - k_{P}^{\\mathrm{deact}}\\,P$\n    4.  $\\frac{dI}{dt} = v_{I}^{\\mathrm{prod}}\\,P\\,(1 - I) - k_{I}^{\\mathrm{deg}}\\,I$\n    5.  $\\frac{dC}{dt} = v_{C}^{\\mathrm{rel}}\\,H(I;K_I,n_I)\\,(1 - C) - v_{C}^{\\mathrm{pump}}\\,C$\n    6.  $\\frac{dT}{dt} = \\frac{H(C;K_T,n_T) - T}{\\tau_T}$\n- **默认常数**：$k_{\\mathrm{on}} = 1.0$, $k_{\\mathrm{off}} = 1.0$, $k_{G}^{\\mathrm{act}} = 5.0$, $k_{G}^{\\mathrm{deact}} = 1.0$, $k_{P}^{\\mathrm{act}} = 2.0$, $k_{P}^{\\mathrm{deact}} = 1.0$, $v_{I}^{\\mathrm{prod}} = 2.0$, $v_{C}^{\\mathrm{rel}} = 5.0$, $K_G = 0.3$, $n_G = 1.0$, $K_C = 0.3$, $K_I = 0.2$, $K_T = 0.3$, $n_T = 3.0$, $\\tau_T = 0.1$。\n- **测试用例** (指定 $(n_{P\\_Ca}, n_I, k_{I}^{\\mathrm{deg}}, v_{C}^{\\mathrm{pump}})$)：\n    - 用例 A: $(2.0, 2.0, 1.0, 1.0)$\n    - 用例 B: $(3.5, 3.0, 0.5, 0.8)$\n    - 用例 C: $(1.0, 2.0, 1.0, 1.0)$\n    - 用例 D: $(3.0, 3.0, 3.0, 3.0)$\n- **计算任务**：\n    1.  为 $L \\in [10^{-6}, 10^{2}]$ 范围内的 $N = 41$ 个对数点计算稳态剂量响应 $T^\\ast(L)$。\n    2.  通过将 Hill 函数拟合到响应范围 $[0.1, 0.9]$，从曲线 $T^\\ast(L) / \\max_{L}T^\\ast(L)$ 估计有效 Hill 系数 $n_{\\mathrm{eff}}$，或使用 logit-log 图的局部斜率作为备用方法。\n    3.  如果 $n_{\\mathrm{eff}} > n_{\\mathrm{th}} = 2.5$，则分类为超敏性。\n    4.  为每个用例输出一个布尔值。\n\n**第 2 步：使用提取的已知条件进行验证**\n- **科学依据**：该问题基于生化动力学原理，特别是结合的质量作用动力学和一阶衰变，以及用于协同酶促和通道门控过程的 Hill 函数。这是计算系统生物学中使用的 G 蛋白偶联受体 (GPCR) 信号级联的一种标准且机理上可信的简化模型。\n- **适定性**：该问题定义了一个包含六个耦合、非线性、一阶常微分方程的系统。根据 Picard-Lindelöf 定理，给定一组非负参数和初始条件（所有状态变量从 0 开始），在有限时间区间内保证存在唯一解。该模型结构包含每个组分的激活和失活/降解项，这表明对于任何恒定输入 $L$，系统将收敛到一个唯一的、稳定的稳态，从而使问题具有适定性。\n- **客观性**：该问题完全使用客观的数学语言表述，没有主观或模糊的术语。\n- 所有其他验证标准均已满足。该问题是自包含的、计算上可行的，并且与指定的科学领域相关。它不包含矛盾、事实错误或无法验证的主张。\n\n**第 3 步：结论与行动**\n问题被判定为**有效**。将构建一个解决方案。\n\n**方法论**\n\n该问题要求分析一个模拟味觉传导通路的动力学系统。该系统由一组 $6$ 个耦合常微分方程 (ODEs) 描述，代表关键信号分子浓度或活性的时间演化。状态向量定义为 $\\vec{y}(t) = [R(t), G(t), P(t), I(t), C(t), T(t)]^T$。\n\n首先，构建一个实现 ODE 系统 $\\frac{d\\vec{y}}{dt} = f(t, \\vec{y}, \\text{params})$ 的函数，其中 `params` 是一个包含配体浓度 $L$ 以及所有速率常数和 Hill 参数的结构。对于未受刺激的细胞，初始条件为 $\\vec{y}(0) = \\vec{0}$。\n\n为了生成剂量-响应曲线 $T^\\ast(L)$，我们必须确定 TRPM5 通道的稳态开放概率 $T^\\ast$，这需要在一系列配体浓度 $L$ 下进行。浓度在区间 $[10^{-6}, 10^{2}]$ 内呈对数间隔分布，共 $N=41$ 个点。对于每个 $L$ 值，ODE 系统在一个足够长的时间区间内进行数值积分，以确保系统松弛到其稳态。积分得到的最后一个状态变量 $T(t)$ 的值即被视为稳态值 $T^\\ast(L)$。SciPy 库中的 `solve_ivp` 函数适用于此任务，因为它为求解初值问题提供了鲁棒和自适应的算法。\n\n核心任务是量化剂量-响应曲线 $L \\mapsto T^\\ast(L)$ 的“陡峭度”或“开关特性”。这通过估计一个有效 Hill 系数 $n_{\\mathrm{eff}}$ 来完成。响应数据 $T^\\ast(L)$ 首先对其最大值进行归一化，得到分数响应 $T_{\\mathrm{frac}}(L) = T^\\ast(L) / \\max_{L} T^\\ast(L)$。\n\n估计 $n_{\\mathrm{eff}}$ 的主要方法是非线性最小二乘拟合。选取满足 $0.1 \\le T_{\\mathrm{frac}}(L) \\le 0.9$ 的数据点 $(L, T_{\\mathrm{frac}}(L))$。将这些点拟合到双参数 Hill 函数 $H(L; EC_{50}, n_{\\mathrm{eff}}) = \\frac{L^{n_{\\mathrm{eff}}}}{EC_{50}^{n_{\\mathrm{eff}}} + L^{n_{\\mathrm{eff}}}}$。使用 SciPy 优化模块中的 `curve_fit` 函数来找到 $EC_{50}$ 和 $n_{\\mathrm{eff}}$ 的最优值。\n\n对于拟合失败或因目标范围内数据点不足而不可靠的情况，指定了一种备用方法。该方法利用了 Hill 方程的 logit 变换产生的线性关系：\n$$ \\log\\left(\\frac{T_{\\mathrm{frac}}}{1 - T_{\\mathrm{frac}}}\\right) = n_{\\mathrm{eff}} \\log(L) - n_{\\mathrm{eff}} \\log(EC_{50}) $$\n这表明 $\\log(T_{\\mathrm{frac}} / (1 - T_{\\mathrm{frac}}))$ 对 $\\log(L)$ 的图是一条斜率为 $n_{\\mathrm{eff}}$ 的直线。因此，我们通过计算该变换图在响应中点附近（即 $T_{\\mathrm{frac}} \\approx 0.5$）的局部斜率来估计 $n_{\\mathrm{eff}}$。\n\n最后，对于四个测试用例中的每一个，将估计的 $n_{\\mathrm{eff}}$ 与阈值 $n_{\\mathrm{th}} = 2.5$ 进行比较。如果 $n_{\\mathrm{eff}} > n_{\\mathrm{th}}$，则系统的响应被分类为超敏性，并记录一个布尔值 `True`。否则，记录为 `False`。整个过程被封装在一个程序中，该程序针对四个指定的参数集执行，并输出布尔结果列表。\n```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Solves the taste transduction ODE model and determines ultrasensitivity\n    for four test cases.\n    \"\"\"\n    \n    # --- Model Definition ---\n    \n    def hill_function(x, K, n):\n        \"\"\"Standard Hill function.\"\"\"\n        # Add a small epsilon to prevent division by zero if x and K are 0\n        x_n = x**n\n        K_n = K**n\n        return x_n / (K_n + x_n + 1e-12)\n\n    def ode_system(t, y, params):\n        \"\"\"The system of 6 ODEs for taste transduction.\"\"\"\n        R, G, P, I, C, T = y\n        \n        # Ensure states remain non-negative\n        R, G, P, I, C, T = max(0, R), max(0, G), max(0, P), max(0, I), max(0, C), max(0, T)\n\n        # Unpack parameters\n        L = params['L']\n        k_on, k_off = params['k_on'], params['k_off']\n        k_G_act, k_G_deact = params['k_G_act'], params['k_G_deact']\n        k_P_act, k_P_deact = params['k_P_act'], params['k_P_deact']\n        v_I_prod, k_I_deg = params['v_I_prod'], params['k_I_deg']\n        v_C_rel, v_C_pump = params['v_C_rel'], params['v_C_pump']\n        tau_T = params['tau_T']\n        K_G, n_G = params['K_G'], params['n_G']\n        K_C, n_P_Ca = params['K_C'], params['n_P_Ca']\n        K_I, n_I = params['K_I'], params['n_I']\n        K_T, n_T = params['K_T'], params['n_T']\n        \n        # ODEs\n        dR_dt = k_on * L * (1.0 - R) - k_off * R\n        dG_dt = k_G_act * R * (1.0 - G) - k_G_deact * G\n        dP_dt = k_P_act * hill_function(G, K_G, n_G) * hill_function(C, K_C, n_P_Ca) * (1.0 - P) - k_P_deact * P\n        dI_dt = v_I_prod * P * (1.0 - I) - k_I_deg * I\n        dC_dt = v_C_rel * hill_function(I, K_I, n_I) * (1.0 - C) - v_C_pump * C\n        dT_dt = (hill_function(C, K_T, n_T) - T) / tau_T\n        \n        return [dR_dt, dG_dt, dP_dt, dI_dt, dC_dt, dT_dt]\n\n    # --- Analysis Functions ---\n    def fit_hill_function(L, T_frac):\n        \"\"\"Fits a Hill function to the dose-response curve to find n_eff.\"\"\"\n        def hill_model(x, n, ec50):\n            return x**n / (ec50**n + x**n)\n\n        # Select data points between 0.1 and 0.9 of max response\n        mask = (T_frac >= 0.1) & (T_frac <= 0.9)\n        L_fit = L[mask]\n        T_frac_fit = T_frac[mask]\n\n        if len(L_fit) < 3:  # Not enough points to fit reliably\n            return None\n\n        try:\n            p0 = [1.0, np.median(L_fit)]  # Initial guess for [n, ec50]\n            bounds = ([0.1, 1e-7], [10.0, 1e3])\n            popt, _ = curve_fit(hill_model, L_fit, T_frac_fit, p0=p0, bounds=bounds)\n            n_eff = popt[0]\n            return n_eff\n        except (RuntimeError, ValueError):\n            return None\n\n    def estimate_n_eff_slope(L, T_frac):\n        \"\"\"Estimates n_eff from the logit-log slope as a fallback.\"\"\"\n        midpoint_idx = np.argmin(np.abs(T_frac - 0.5))\n\n        # Check for valid points around the midpoint for finite difference\n        if midpoint_idx == 0 or midpoint_idx == len(L) - 1:\n            return 1.0 # Cannot compute slope, return default\n\n        # Use indices around the midpoint\n        indices_to_check = [midpoint_idx - 1, midpoint_idx, midpoint_idx + 1]\n        valid_indices = []\n        for i in indices_to_check:\n            if 0.001 < T_frac[i] < 0.999: # Ensure logit is well-behaved\n                valid_indices.append(i)\n        \n        if len(valid_indices) < 2:\n            return 1.0 # Not enough valid points, return default\n\n        # Use finite difference on the valid points\n        # Using two outer points for a more stable slope calculation\n        i1 = valid_indices[0]\n        i2 = valid_indices[-1]\n        if i1 == i2:\n            return 1.0\n\n        logit_y1 = np.log(T_frac[i1] / (1.0 - T_frac[i1]))\n        logit_y2 = np.log(T_frac[i2] / (1.0 - T_frac[i2]))\n        \n        log_L1 = np.log(L[i1])\n        log_L2 = np.log(L[i2])\n\n        if np.isclose(log_L2, log_L1):\n            return 1.0\n\n        n_eff = (logit_y2 - logit_y1) / (log_L2 - log_L1)\n        return n_eff\n    \n    # --- Simulation Setup ---\n    \n    base_params = {\n        'k_on': 1.0, 'k_off': 1.0,\n        'k_G_act': 5.0, 'k_G_deact': 1.0,\n        'k_P_act': 2.0, 'k_P_deact': 1.0,\n        'v_I_prod': 2.0, 'k_I_deg': 1.0,\n        'v_C_rel': 5.0, 'v_C_pump': 1.0,\n        'K_G': 0.3, 'n_G': 1.0,\n        'K_C': 0.3, 'n_P_Ca': 2.0,\n        'K_I': 0.2, 'n_I': 2.0,\n        'K_T': 0.3, 'n_T': 3.0,\n        'tau_T': 0.1,\n    }\n\n    test_cases = {\n        'A': {'n_P_Ca': 2.0, 'n_I': 2.0, 'k_I_deg': 1.0, 'v_C_pump': 1.0},\n        'B': {'n_P_Ca': 3.5, 'n_I': 3.0, 'k_I_deg': 0.5, 'v_C_pump': 0.8},\n        'C': {'n_P_Ca': 1.0, 'n_I': 2.0, 'k_I_deg': 1.0, 'v_C_pump': 1.0},\n        'D': {'n_P_Ca': 3.0, 'n_I': 3.0, 'k_I_deg': 3.0, 'v_C_pump': 3.0},\n    }\n    \n    L_values = np.logspace(-6, 2, 41)\n    y0 = np.zeros(6)\n    t_span = (0, 500) # Integration time, long enough for steady state\n    n_th = 2.5\n    results = []\n\n    # --- Main Loop ---\n    \n    for case_id in ['A', 'B', 'C', 'D']:\n        params = base_params.copy()\n        params.update(test_cases[case_id])\n        \n        T_star = np.zeros_like(L_values)\n        \n        for i, L_val in enumerate(L_values):\n            current_params = params.copy()\n            current_params['L'] = L_val\n            \n            sol = solve_ivp(\n                fun=ode_system,\n                t_span=t_span,\n                y0=y0,\n                method='Radau',\n                args=(current_params,),\n                dense_output=True,\n                rtol=1e-6,\n                atol=1e-8\n            )\n            \n            # The last value is the steady state\n            T_star[i] = sol.y[5, -1]\n        \n        # --- Hill Coefficient Estimation ---\n        T_max = np.max(T_star)\n        if T_max < 1e-6: # No response\n            n_eff = 1.0\n        else:\n            T_frac = T_star / T_max\n            n_eff = fit_hill_function(L_values, T_frac)\n            if n_eff is None:\n                n_eff = estimate_n_eff_slope(L_values, T_frac)\n        \n        is_ultrasensitive = n_eff > n_th\n        results.append(is_ultrasensitive)\n\n    # --- Final Output ---\n    # Python booleans True/False need to be lowercase as 'true'/'false' for output\n    final_output = [str(r).lower() for r in results]\n    print(f\"[{','.join(final_output)}]\")\n\nsolve()\n\n```", "answer": "```\n[false,true,false,false]\n```", "id": "2760644"}]}