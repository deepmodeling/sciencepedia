{"hands_on_practices": [{"introduction": "在我们应用强大的解析类数公式之前，我们必须首先理解它所关联的基本代数对象。第一个练习将带你回归基础，指导你从第一性原理出发，计算二次域的域判别式 $D_K$——公式中的一个关键参数。这个练习将加深你对整数环和数域结构性质的理解。[@problem_id:3090168]", "problem": "设 $d$ 是一个无平方因子整数且 $d \\neq 0,1$，并设 $K=\\mathbb{Q}(\\sqrt{d})$。为应用解析类数公式做准备，请按以下第一性原理步骤确定域判别式 $D_{K}$：\n\n1. 仅使用代数整数是系数在 $\\mathbb{Z}$ 中的首一多项式的根的定义，以及从 $K$ 到 $\\mathbb{Q}$ 的域迹和范数的表达式，对 $K$ 中所有形如 $\\alpha=a+b\\sqrt{d}$（其中 $a,b \\in \\mathbb{Q}$）的整元进行分类。由此得出整数环 $\\mathcal{O}_{K}$ 关于 $d$ 的一个明确的 $\\mathbb{Z}$-基。\n\n2. 使用数域的判别式是通过迹配对计算其整数环的 $\\mathbb{Z}$-基的判别式的定义，计算 $D_{K}$（用 $d$ 表示）。\n\n3. 应用你的结果，计算当 $K=\\mathbb{Q}(\\sqrt{5})$ 和 $K=\\mathbb{Q}(\\sqrt{-7})$ 时 $D_{K}$ 的精确值。\n\n请按 $d=5$ 和 $d=-7$ 的顺序，以两个精确整数的形式提供你的最终答案。", "solution": "该问题要求确定二次域 $K=\\mathbb{Q}(\\sqrt{d})$ 的域判别式 $D_K$，其中 $d$ 是不等于 $0$ 或 $1$ 的无平方因子整数。此过程将遵循三个指定的步骤。\n\n1. 对整元进行分类并找到 $\\mathcal{O}_K$ 的一个 $\\mathbb{Z}$-基。\n\n一个元素 $\\alpha \\in K = \\mathbb{Q}(\\sqrt{d})$ 是代数整数，如果它是某个系数为整数的首一多项式的根。设 $\\alpha = a + b\\sqrt{d}$，其中 $a,b \\in \\mathbb{Q}$。如果 $b=0$，那么 $\\alpha = a \\in \\mathbb{Q}$。要使 $\\alpha$ 成为代数整数，它必须在 $\\mathbb{Z}$ 中。如果 $b \\neq 0$，$\\alpha$ 在 $\\mathbb{Q}$ 上的最小多项式是一个二次多项式，由下式给出：\n$$ P(x) = (x - \\alpha)(x - \\bar{\\alpha}) = x^2 - (\\alpha+\\bar{\\alpha})x + \\alpha\\bar{\\alpha} = 0 $$\n其中 $\\bar{\\alpha} = a - b\\sqrt{d}$ 是 $\\alpha$ 的共轭。$P(x)$ 的系数与从 $K$ 到 $\\mathbb{Q}$ 的域迹和范数有关：\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(\\alpha) = \\alpha + \\bar{\\alpha} = (a+b\\sqrt{d}) + (a-b\\sqrt{d}) = 2a $$\n$$ \\mathrm{N}_{K/\\mathbb{Q}}(\\alpha) = \\alpha\\bar{\\alpha} = (a+b\\sqrt{d})(a-b\\sqrt{d}) = a^2 - b^2d $$\n要使 $\\alpha$ 成为代数整数，其最小多项式的系数必须是整数。因此，我们要求：\n(i) $\\mathrm{Tr}_{K/\\mathbb{Q}}(\\alpha) = 2a \\in \\mathbb{Z}$\n(ii) $\\mathrm{N}_{K/\\mathbb{Q}}(\\alpha) = a^2 - b^2d \\in \\mathbb{Z}$\n\n根据条件 (i)，$a$ 必须是半整数。设 $2a = k$，其中 $k \\in \\mathbb{Z}$ 是某个整数，所以 $a = \\frac{k}{2}$。\n将此代入条件 (ii)：\n$$ \\left(\\frac{k}{2}\\right)^2 - b^2d \\in \\mathbb{Z} \\implies \\frac{k^2}{4} - b^2d \\in \\mathbb{Z} $$\n两边乘以 $4$ 得到 $k^2 - 4b^2d \\in \\mathbb{Z}$。因为 $k^2$ 是整数，这意味着 $4b^2d$ 必须是整数。设 $b = \\frac{p}{q}$，其中 $p,q \\in \\mathbb{Z}$，$q \\neq 0$，且 $\\gcd(p,q)=1$。\n那么 $4 \\left(\\frac{p}{q}\\right)^2 d = \\frac{4p^2d}{q^2}$ 必须是整数。由于 $\\gcd(p,q)=1$，我们有 $\\gcd(p^2, q^2)=1$。这迫使 $q^2$ 必须整除 $4d$。\n因为 $d$ 是无平方因子整数，所以 $d$ 的任何素因子都以指数 $1$ 出现。设 $p'$ 是一个奇素数。如果 $p'$ 整除 $q$，那么 $p'^2$ 必须整除 $q^2$，因此 $p'^2$ 必须整除 $4d$。由于 $d$ 是无平方因子的，$p'^2$ 不能整除 $d$。因此，$q$ 不能有任何奇素数因子。这意味着 $q$ 必须是 $2$ 的幂，比如说 $q=2^j$，其中 $j \\ge 0$ 是某个整数。\n所以，$q^2 = 2^{2j}$ 必须整除 $4d$。这意味着 $2^{2j-2}$ 必须整除 $d$。因为 $d$ 是无平方因子的，能整除 $d$ 的 $2$ 的最高次幂是 $2^1$。因此，我们必须有 $2j-2 \\le 1$，这意味着 $2j \\le 3$，所以 $j \\le 1.5$。由于 $j$ 必须是整数，唯一可能性是 $j=0$ 和 $j=1$。这意味着 $q$ 只能是 $1$ 或 $2$。\n所以，$b$ 也必须是半整数。设 $2b=m$，其中 $m \\in \\mathbb{Z}$ 是某个整数，所以 $b = \\frac{m}{2}$。\n\n现在我们回到条件 $k^2 - 4b^2d \\in \\mathbb{Z}$。代入 $b=\\frac{m}{2}$，我们得到 $k^2 - 4(\\frac{m}{2})^2 d = k^2 - m^2d$。这必须是一个整数，由于 $k,m,d$ 都是整数，这个条件已经满足了。原来的条件是 $a^2 - b^2d \\in \\mathbb{Z}$，也就是 $\\frac{k^2}{4} - \\frac{m^2 d}{4} \\in \\mathbb{Z}$。这意味着 $k^2 - m^2d$ 必须能被 $4$ 整除：\n$$ k^2 - m^2d \\equiv 0 \\pmod 4 $$\n我们根据 $d$ 模 $4$ 的值来分析这个同余式。注意，因为 $d$ 是无平方因子的，所以 $d$ 不能被 $4$ 整除，即 $d \\not\\equiv 0 \\pmod 4$。\n\n情况 A：$d \\equiv 1 \\pmod 4$。\n同余式变为 $k^2 - m^2 \\equiv 0 \\pmod 4$，或 $k^2 \\equiv m^2 \\pmod 4$。模 $4$ 的平方数是 $0^2 \\equiv 0$, $1^2 \\equiv 1$, $2^2 \\equiv 0$, $3^2 \\equiv 1$。因此，$k^2$ 和 $m^2$ 模 $4$ 只能是 $0$ 或 $1$。条件 $k^2 \\equiv m^2 \\pmod 4$ 意味着 $k$ 和 $m$ 必须有相同的奇偶性。\n如果 $k, m$ 都是偶数，比如 $k=2k'$ 和 $m=2m'$，那么 $a=k' \\in \\mathbb{Z}$ 且 $b=m' \\in \\mathbb{Z}$。\n如果 $k, m$ 都是奇数，比如 $k=2k'+1$ 和 $m=2m'+1$，那么 $a=k'+\\frac{1}{2}$ 且 $b=m'+\\frac{1}{2}$。\n元素 $\\alpha = a+b\\sqrt{d}$ 可以写成 $\\alpha = \\frac{k+m\\sqrt{d}}{2}$。设 $\\omega = \\frac{1+\\sqrt{d}}{2}$。那么 $\\alpha = \\frac{k-m}{2} + m\\frac{1+\\sqrt{d}}{2} = \\frac{k-m}{2} + m\\omega$。因为 $k$ 和 $m$ 具有相同的奇偶性，$k-m$ 是一个偶数，所以 $\\frac{k-m}{2} \\in \\mathbb{Z}$。因此，任何代数整数 $\\alpha$ 都是 $1$ 和 $\\omega$ 的 $\\mathbb{Z}$-线性组合。整数环是 $\\mathcal{O}_K = \\mathbb{Z}[\\frac{1+\\sqrt{d}}{2}]$，$\\mathcal{O}_K$ 的一个 $\\mathbb{Z}$-基是 $\\{1, \\frac{1+\\sqrt{d}}{2}\\}$。\n\n情况 B：$d \\equiv 2 \\pmod 4$。\n同余式为 $k^2 - 2m^2 \\equiv 0 \\pmod 4$。\n如果 $m$ 是奇数，$m^2 \\equiv 1 \\pmod 4$，所以 $k^2 - 2 \\equiv 0 \\pmod 4$，这意味着 $k^2 \\equiv 2 \\pmod 4$。这是不可能的。\n因此，$m$ 必须是偶数。所以 $m^2 \\equiv 0 \\pmod 4$。同余式变为 $k^2 \\equiv 0 \\pmod 4$，这意味着 $k$ 也必须是偶数。\n所以，$k=2a$ 和 $m=2b$ 都必须是偶数。这意味着 $a$ 和 $b$ 必须是整数。\n整数环是 $\\mathcal{O}_K = \\mathbb{Z}[\\sqrt{d}]$，$\\mathcal{O}_K$ 的一个 $\\mathbb{Z}$-基是 $\\{1, \\sqrt{d}\\}$。\n\n情况 C：$d \\equiv 3 \\pmod 4$。\n同余式为 $k^2 - 3m^2 \\equiv 0 \\pmod 4$，或 $k^2 + m^2 \\equiv 0 \\pmod 4$。\n如果 $k$ 和 $m$ 都是奇数，$k^2 \\equiv 1$ 且 $m^2 \\equiv 1 \\pmod 4$，所以 $k^2+m^2 \\equiv 1+1=2 \\pmod 4$。这不满足同余式。\n如果一个是奇数一个是偶数，比如 $k$ 奇 $m$ 偶，那么 $k^2+m^2 \\equiv 1+0=1 \\pmod 4$。这也失败了。\n满足 $k^2+m^2 \\equiv 0 \\pmod 4$ 的唯一方法是 $k$ 和 $m$ 都是偶数。\n与 $d \\equiv 2 \\pmod 4$ 的情况一样，这意味着 $a,b \\in \\mathbb{Z}$。\n整数环是 $\\mathcal{O}_K = \\mathbb{Z}[\\sqrt{d}]$，$\\mathcal{O}_K$ 的一个 $\\mathbb{Z}$-基是 $\\{1, \\sqrt{d}\\}$。\n\n第1部分总结：\n- 如果 $d \\equiv 1 \\pmod 4$，$\\mathcal{O}_K$ 的一个 $\\mathbb{Z}$-基是 $\\{\\omega_1, \\omega_2\\} = \\{1, \\frac{1+\\sqrt{d}}{2}\\}$。\n- 如果 $d \\equiv 2, 3 \\pmod 4$，$\\mathcal{O}_K$ 的一个 $\\mathbb{Z}$-基是 $\\{\\omega_1, \\omega_2\\} = \\{1, \\sqrt{d}\\}$。\n\n2. 域判别式 $D_K$ 的计算。\n\n$K$ 的判别式定义为一个矩阵的行列式，该矩阵的第 $(i,j)$ 个元素是 $\\mathrm{Tr}_{K/\\mathbb{Q}}(\\omega_i \\omega_j)$，其中 $\\{\\omega_1, \\omega_2\\}$ 是 $\\mathcal{O}_K$ 的一个 $\\mathbb{Z}$-基。\n$$ D_K = \\det \\begin{pmatrix} \\mathrm{Tr}(\\omega_1^2)  \\mathrm{Tr}(\\omega_1 \\omega_2) \\\\ \\mathrm{Tr}(\\omega_2 \\omega_1)  \\mathrm{Tr}(\\omega_2^2) \\end{pmatrix} $$\n\n情况 1：$d \\equiv 2, 3 \\pmod 4$。\n基是 $\\{\\omega_1, \\omega_2\\} = \\{1, \\sqrt{d}\\}$。我们计算所需的迹：\n- $\\mathrm{Tr}(\\omega_1^2) = \\mathrm{Tr}(1^2) = \\mathrm{Tr}(1) = 2$。\n- $\\mathrm{Tr}(\\omega_1 \\omega_2) = \\mathrm{Tr}(\\sqrt{d}) = 0$。\n- $\\mathrm{Tr}(\\omega_2^2) = \\mathrm{Tr}((\\sqrt{d})^2) = \\mathrm{Tr}(d) = 2d$。\n判别式是：\n$$ D_K = \\det \\begin{pmatrix} 2  0 \\\\ 0  2d \\end{pmatrix} = (2)(2d) - (0)(0) = 4d $$\n\n情况 2：$d \\equiv 1 \\pmod 4$。\n基是 $\\{\\omega_1, \\omega_2\\} = \\{1, \\frac{1+\\sqrt{d}}{2}\\}$。设 $\\omega = \\frac{1+\\sqrt{d}}{2}$。\n- $\\mathrm{Tr}(\\omega_1^2) = \\mathrm{Tr}(1) = 2$。\n- $\\mathrm{Tr}(\\omega_1 \\omega_2) = \\mathrm{Tr}(\\omega) = \\mathrm{Tr}(\\frac{1}{2} + \\frac{1}{2}\\sqrt{d}) = 2(\\frac{1}{2}) = 1$。\n- $\\omega_2^2 = \\omega^2 = \\left(\\frac{1+\\sqrt{d}}{2}\\right)^2 = \\frac{1+2\\sqrt{d}+d}{4} = \\frac{1+d}{4} + \\frac{1}{2}\\sqrt{d}$。\n- $\\mathrm{Tr}(\\omega_2^2) = \\mathrm{Tr}(\\omega^2) = \\mathrm{Tr}\\left(\\frac{1+d}{4} + \\frac{1}{2}\\sqrt{d}\\right) = 2\\left(\\frac{1+d}{4}\\right) = \\frac{1+d}{2}$。\n判别式是：\n$$ D_K = \\det \\begin{pmatrix} 2  1 \\\\ 1  \\frac{1+d}{2} \\end{pmatrix} = 2\\left(\\frac{1+d}{2}\\right) - (1)(1) = (1+d) - 1 = d $$\n\n3. 应用于特定域。\n\n对于 $K=\\mathbb{Q}(\\sqrt{5})$：\n我们有 $d=5$。我们检查 $d$ 模 $4$ 的同余类：$5 \\equiv 1 \\pmod 4$。\n这属于判别式计算的情况 2。判别式为 $D_K = d$。\n因此，对于 $K=\\mathbb{Q}(\\sqrt{5})$，判别式为 $D_K = 5$。\n\n对于 $K=\\mathbb{Q}(\\sqrt{-7})$：\n我们有 $d=-7$。我们检查 $d$ 模 $4$ 的同余类：$-7 = -8+1 \\equiv 1 \\pmod 4$。\n这也属于判别式计算的情况 2，其中 $D_K = d$。\n因此，对于 $K=\\mathbb{Q}(\\sqrt{-7})$，判别式为 $D_K = -7$。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n5  -7\n\\end{pmatrix}\n}\n$$", "id": "3090168"}, {"introduction": "解析类数公式的魅力在于它能够连接两个看似无关的世界：分析与代数。这个练习将让你推导虚二次域的这个不可思议的公式，然后用它从一个给定的分析量——$L$-函数在 $s=1$ 处的值——来计算类数 $h_K$ 这一关键的代数不变量。这个练习展示了该公式如何将分析信息转化为深刻的代数洞见。[@problem_id:3090140]", "problem": "设 $K$ 是一个虚二次域，其判别式为 $D  0$，类数为 $h_K$，$w_K$ 等于 $K$ 中包含的单位根的个数。设 $\\chi_D$ 表示与 $D$ 相关的克罗内克符号 (Kronecker symbol)，并设 $L(s,\\chi_D)$ 表示与 $\\chi_D$ 关联的狄利克雷 L-函数 (Dirichlet $L$-function)。从基本定义和事实出发，按以下步骤进行：\n\n- 使用单位根的定义和分圆域的次数来证明，对于 $D=-4$ 时 $w_K=4$，对于 $D=-3$ 时 $w_K=6$。\n- 利用二次域的戴德金 zeta 函数 (Dedekind zeta function) $\\zeta_K(s)$ 的分解式 $\\zeta_K(s)=\\zeta(s)\\,L(s,\\chi_D)$，结合虚二次域的 $\\zeta_K(s)$ 在 $s=1$ 附近的性质，推导出 $h_K$ 关于 $L(1,\\chi_D)$、$w_K$ 和 $|D|$ 的显式表达式。\n- 利用已知值 $L(1,\\chi_{-4})=\\frac{\\pi}{4}$ 和 $L(1,\\chi_{-3})=\\frac{\\pi}{3\\sqrt{3}}$，计算 $D=-4$ 和 $D=-3$ 对应的类数 $h_K$。\n\n你的最终答案必须是精确整数，不需要进行四舍五入。", "solution": "问题分为三个部分。我们将按顺序逐一解决。\n\n**第 1 部分：确定 $D=-4$ 和 $D=-3$ 时的 $w_K$**\n\n设 $K$ 是一个虚二次域。$K$ 中包含的单位根构成一个有限循环群，记为 $\\mu(K)$。该群的阶为 $w_K = |\\mu(K)|$。\n设 $\\zeta_m = \\exp(2\\pi i / m)$ 是一个 $m$ 次本原单位根。如果 $\\zeta_m \\in K$，那么分圆域 $\\mathbb{Q}(\\zeta_m)$ 必须是 $K$ 的一个子域。分圆域在 $\\mathbb{Q}$ 上的次数由欧拉总计函数给出，即 $[\\mathbb{Q}(\\zeta_m):\\mathbb{Q}] = \\phi(m)$。\n由于 $K$ 是一个二次域，其在 $\\mathbb{Q}$ 上的次数为 $[K:\\mathbb{Q}] = 2$。\n因此，如果 $\\mathbb{Q}(\\zeta_m) \\subseteq K$，则必须有 $\\phi(m)$ 整除 $[K:\\mathbb{Q}]$，即 $\\phi(m) | 2$。\n能整除 $2$ 的 $\\phi(m)$ 的整数值只有 $1$ 和 $2$。\n我们找到 $m$ 的可能值：\n- $\\phi(m) = 1$：这意味着 $m=1$ 或 $m=2$。相应的单位根是 $1$ 和 $-1$。这些单位根存在于任何作为 $\\mathbb{C}$ 的子域且包含 $\\mathbb{Q}$ 的数域中。因此，对于任何虚二次域，$w_K \\ge 2$。\n- $\\phi(m) = 2$：这意味着 $m=3$、$m=4$ 或 $m=6$。\n\n如果 $K$ 包含一个 $m$ 次本原单位根，那么 $w_K$ 必须是 $m$ 的倍数。阶数 $w_K$ 是使得 $\\zeta_m \\in K$ 的最大整数 $m$。因此，对于任何虚二次域 $K$，$w_K$ 只能是 $2$、$4$ 或 $6$。\n\n情况 $D=-4$：该域为 $K = \\mathbb{Q}(\\sqrt{-4}) = \\mathbb{Q}(\\sqrt{-1}) = \\mathbb{Q}(i)$。此域包含 $4$ 次本原单位根 $i$。$\\mathbb{Q}(i)$ 中所有单位根的集合是 $\\{1, i, i^2, i^3\\} = \\{1, i, -1, -i\\}$。这是一个 $4$ 阶循环群。因此，对于 $D=-4$，$w_K=4$。条件 $\\mathbb{Q}(\\zeta_4) = \\mathbb{Q}(i) \\subseteq K$ 迫使 $K = \\mathbb{Q}(i)$，因为它们都是 $\\mathbb{Q}$ 的二次扩张。\n\n情况 $D=-3$：该域为 $K = \\mathbb{Q}(\\sqrt{-3})$。一个 $3$ 次本原单位根是 $\\zeta_3 = \\frac{-1+i\\sqrt{3}}{2}$。域 $\\mathbb{Q}(\\zeta_3)$ 就是 $\\mathbb{Q}(\\sqrt{-3})$，其判别式为 $D=-3$。所以，$K = \\mathbb{Q}(\\zeta_3)$ 包含 $\\zeta_3$。因此，$K$ 中的单位根群必须包含由 $\\zeta_3$ 生成的群，即 $\\{1, \\zeta_3, \\zeta_3^2\\}$。然而，单位根群也必须包含 $-1$。如果一个域包含 $\\zeta_3$，它也包含 $-\\zeta_3^2 = -(\\frac{-1-i\\sqrt{3}}{2}) = \\frac{1+i\\sqrt{3}}{2} = \\zeta_6$，这是一个 $6$ 次本原单位根。单位根群是循环的，如果它包含一个 $6$ 次本原单位根，它的阶就是 $6$。其元素为 $\\{1, \\zeta_6, \\zeta_6^2, \\zeta_6^3, \\zeta_6^4, \\zeta_6^5\\}$。因此，对于 $D=-3$，$w_K=6$。\n\n对于任何其他判别式 $D  -4$，域 $K=\\mathbb{Q}(\\sqrt{D})$ 不是 $\\mathbb{Q}(i)$ 或 $\\mathbb{Q}(\\sqrt{-3})$，因此它不能包含 $3$ 次或 $4$ 次本原单位根。在这些情况下，$w_K=2$。\n\n**第 2 部分：类数公式的推导**\n\n数域 $K$ 的戴德金 zeta 函数 $\\zeta_K(s)$，在 $\\mathrm{Re}(s)1$ 时由级数 $\\zeta_K(s) = \\sum_{\\mathfrak{a} \\subseteq \\mathcal{O}_K} \\frac{1}{N(\\mathfrak{a})^s}$ 定义，其中求和遍及整数环 $\\mathcal{O}_K$ 的所有非零整理想。\n解析类数公式给出了 $\\zeta_K(s)$ 在其位于 $s=1$ 的一阶极点处的留数：\n$$ \\lim_{s \\to 1} (s-1)\\zeta_K(s) = \\frac{2^{r_1}(2\\pi)^{r_2} h_K R_K}{w_K \\sqrt{|D|}} $$\n这里，$r_1$ 是 $K$ 的实嵌入的个数，$r_2$ 是共轭复嵌入对的个数，$h_K$ 是类数，$R_K$ 是调节子，$w_K$ 是单位根的个数，$D$ 是判别式。\n\n对于一个虚二次域 $K=\\mathbb{Q}(\\sqrt{d})$ 且 $d  0$：\n- 没有实嵌入，所以 $r_1=0$。\n- 有一对复嵌入（包含映射和复共轭），所以 $r_2=1$。\n- 单位群的秩为 $r_1+r_2-1 = 0+1-1=0$。在这种情况下，调节子 $R_K$ 按照惯例取为 $1$。\n\n将这些值代入通用公式，得到虚二次域的留数：\n$$ \\lim_{s \\to 1} (s-1)\\zeta_K(s) = \\frac{2^0 (2\\pi)^1 h_K \\cdot 1}{w_K \\sqrt{|D|}} = \\frac{2\\pi h_K}{w_K \\sqrt{|D|}} $$\n\n问题给出了二次域的戴德金 zeta 函数的分解：\n$$ \\zeta_K(s) = \\zeta(s) L(s, \\chi_D) $$\n其中 $\\zeta(s)$ 是黎曼 zeta 函数，$L(s, \\chi_D)$ 是与克罗内克符号 $\\chi_D$ 相关的狄利克雷 L-函数。\n\n我们分析这些因子在 $s=1$ 附近的行为：\n- 黎曼 zeta 函数 $\\zeta(s)$ 在 $s=1$ 处有一个一阶极点，留数为 $1$，即 $\\lim_{s \\to 1} (s-1)\\zeta(s) = 1$。\n- 对于二次域，判别式 $D$ 不是完全平方数，所以特征标 $\\chi_D$ 是非主的。对于非主狄利克雷特征标，L-函数 $L(s, \\chi_D)$ 在 $\\mathrm{Re}(s)0$ 上是解析的，特别地，在 $s=1$ 处是有限且非零的。其值为 $L(1, \\chi_D)$。\n\n利用这些信息，我们可以从其分解形式计算 $\\zeta_K(s)$ 的留数：\n$$ \\lim_{s \\to 1} (s-1)\\zeta_K(s) = \\lim_{s \\to 1} (s-1)\\zeta(s) L(s, \\chi_D) = \\left(\\lim_{s \\to 1} (s-1)\\zeta(s)\\right) \\left(\\lim_{s \\to 1} L(s, \\chi_D)\\right) = 1 \\cdot L(1, \\chi_D) = L(1, \\chi_D) $$\n\n令两个留数表达式相等，我们得到：\n$$ \\frac{2\\pi h_K}{w_K \\sqrt{|D|}} = L(1, \\chi_D) $$\n解出类数 $h_K$，我们得到所需的显式表达式：\n$$ h_K = \\frac{w_K \\sqrt{|D|}}{2\\pi} L(1, \\chi_D) $$\n\n**第 3 部分：计算 $D=-4$ 和 $D=-3$ 时的 $h_K$**\n\n我们使用第 2 部分推导出的公式和给定的值。\n\n- 对于 $D=-4$：\n  该域为 $K = \\mathbb{Q}(i)$。我们有 $|D| = 4$，所以 $\\sqrt{|D|} = 2$。\n  从第 1 部分，我们确定了 $w_K = 4$。\n  给定值为 $L(1, \\chi_{-4}) = \\frac{\\pi}{4}$。\n  将这些值代入公式：\n  $$ h_K = \\frac{4 \\cdot \\sqrt{4}}{2\\pi} \\cdot \\frac{\\pi}{4} = \\frac{4 \\cdot 2}{2\\pi} \\cdot \\frac{\\pi}{4} = \\frac{8}{2\\pi} \\cdot \\frac{\\pi}{4} = \\frac{8\\pi}{8\\pi} = 1 $$\n  $D=-4$ 时的类数为 $1$。\n\n- 对于 $D=-3$：\n  该域为 $K = \\mathbb{Q}(\\sqrt{-3})$。我们有 $|D| = 3$，所以 $\\sqrt{|D|} = \\sqrt{3}$。\n  从第 1 部分，我们确定了 $w_K = 6$。\n  给定值为 $L(1, \\chi_{-3}) = \\frac{\\pi}{3\\sqrt{3}}$。\n  将这些值代入公式：\n  $$ h_K = \\frac{6 \\cdot \\sqrt{3}}{2\\pi} \\cdot \\frac{\\pi}{3\\sqrt{3}} = \\frac{6\\sqrt{3}}{2\\pi} \\cdot \\frac{\\pi}{3\\sqrt{3}} = \\frac{6\\pi\\sqrt{3}}{6\\pi\\sqrt{3}} = 1 $$\n  $D=-3$ 时的类数为 $1$。\n\n最终答案分别是为 $D=-4$ 和 $D=-3$ 计算出的类数。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n1  1\n\\end{pmatrix}\n}\n$$", "id": "3090140"}, {"introduction": "看过了类数公式如何运作后，一个自然的问题出现了：我们如何计算公式的分析侧，即 $L(1, \\chi_D)$ 的值？这最后一个练习通过从理论走向计算来解决这个问题。你将实现一种称为分部求和的方法，以加速缓慢收敛的狄利克雷级数的收敛速度，从而实现对 $L(1, \\chi_D)$ 高效而精确的数值估计。[@problem_id:3090180]", "problem": "要求您实现并比较两个用于计算与二次 Dirichlet 特征 $\\chi_D$ 相关联的 Dirichlet $L$ 函数在 $s=1$ 处的值的数值估计量。其中，$\\chi_D(n)$ 是由基本判别式 $D$ 的 Kronecker 符号 $\\left(\\dfrac{D}{n}\\right)$ 给出的模 $\\lvert D \\rvert$ 的本原二次特征。目标量为 $L(1,\\chi_D)$，它由 Dirichlet 级数 $L(s,\\chi_D)=\\sum_{n=1}^{\\infty} \\dfrac{\\chi_D(n)}{n^s}$（对于 $\\Re(s)1$）定义，并解析延拓到 $s=1$。您的目标是从第一性原理出发，实现一个程序，用两种方法来近似计算 $L(1,\\chi_D)$：朴素部分和法，以及一种基于收敛加速的部分和估计量。您必须从下述定义出发，推导出针对 $s=1$ 的部分和恒等式，然后设计相应的算法。\n\n从以下基本基础开始：\n- Dirichlet 级数定义 $L(s,\\chi_D)=\\sum_{n=1}^{\\infty} \\dfrac{\\chi_D(n)}{n^s}$（对于 $\\Re(s)1$），以及 $\\chi_D$ 是完全积性函数，以 $\\lvert D \\rvert$ 为周期，且当 $\\gcd(n,\\lvert D \\rvert)1$ 时 $\\chi_D(n)=0$。\n- 针对带单调权重函数的级数的 Abel（分部）求和原理，该原理可由级数的分部积分离散版本推导得出。您必须基于此原理，利用累积和 $S(x)=\\sum_{n\\le x}\\chi_D(n)$ 建立一个适合近似计算 $L(1,\\chi_D)$ 的恒等式。\n- Kronecker 符号 $\\left(\\dfrac{D}{n}\\right)$ 作为基本判别式 $D$ 的 $\\chi_D(n)$ 的典范实现，其特征为：当 $\\gcd(n,\\lvert D \\rvert)1$ 时，$\\left(\\dfrac{D}{n}\\right)=0$；当 $\\gcd(n,\\lvert D \\rvert)=1$ 时，它在奇数部分与 Jacobi 符号一致，并带有对 2 的幂的标准因子，即如果 $D$ 是偶数，则 $\\left(\\dfrac{D}{2}\\right)=0$，如果 $D$ 是奇数，则 $\\left(\\dfrac{D}{2}\\right)=(-1)^{\\frac{D^2-1}{8}}$。\n\n任务：\n1) 从上述基础出发，推导一个离散部分和恒等式，用累积和 $S(n)=\\sum_{k\\le n}\\chi_D(k)$ 以及由函数 $1/n$ 构造的伸缩权重来表示截断级数 $\\sum_{n\\le M}\\dfrac{\\chi_D(n)}{n}$。然后解释为什么当在一个较大的 $M$ 处截断时，该恒等式能产生一个 $L(1,\\chi_D)$ 的收敛加速估计量，以及一个阶为 $O\\!\\left(\\dfrac{\\sup_{t\\ge M}\\lvert S(t)\\rvert}{M}\\right)$ 的尾部界是如何产生的。\n2) 设计并实现一个算法，使用 Kronecker 符号的定义计算所有 $1\\le n\\le M$ 的 $\\chi_D(n)$，具体方法如下：\n   - 当 $\\gcd(n,\\lvert D \\rvert)1$ 时立即为零。\n   - 当 $\\gcd(n,\\lvert D \\rvert)=1$ 时，从 $n$ 中分解出因子 $2^{\\nu_2(n)}$，当 $D$ 为奇数时使用因子 $\\left(\\dfrac{D}{2}\\right)^{\\nu_2(n)}$，并将其化简为 Jacobi 符号 $\\left(\\dfrac{D}{n_{\\text{odd}}}\\right)$（其中 $n_{\\text{odd}}$ 为奇数）。通过二次互反律和模 8 下因子 2 的法则来实现 Jacobi 符号的计算。\n   - 注意：您不能将 $n$ 分解为素数；相反，应使用互反律和对因子 2 的二元处理来计算 Jacobi 符号。\n3) 实现两个 $L(1,\\chi_D)$ 的估计量：\n   - 朴素部分和：$L_{\\text{naive}}(N,D)=\\sum_{n=1}^{N}\\dfrac{\\chi_D(n)}{n}$，其中 $N$ 是截断参数。\n   - 部分和估计量：$L_{\\text{ps}}(M,D)$，通过应用您推导的离散部分和恒等式并使用截断参数 $M$ 获得（不要包含该恒等式在 $M$ 处产生的结果之外的任何额外尾部修正）。同时，计算显式界代理 $\\dfrac{\\max_{1\\le n\\le M}\\lvert S(n)\\rvert}{M}$，它在不考虑一个与 $M$ 无关的乘法常数的情况下，给出了被省略尾部绝对值的上界。\n4) 对于下面给出的每个测试用例，计算 $L_{\\text{naive}}(N,D)$ 和 $L_{\\text{ps}}(M,D)$。您的程序应该输出一行包含所有结果的文本，格式为一个用方括号括起来的逗号分隔列表。对于每个测试用例，按此顺序输出两个浮点数：首先是 $L_{\\text{naive}}(N,D)$，然后是 $L_{\\text{ps}}(M,D)$。不要打印任何额外文本。\n\n不涉及物理单位。\n\n测试套件（每个用例是一个三元组 $(D,N,M)$）：\n- 用例 1 (正常路径，小奇数导子): $(-3, 20000, 200000)$。\n- 用例 2 (高斯整数情况，小偶数导子): $(-4, 20000, 200000)$。\n- 用例 3 (另一个虚二次域，奇数导子): $(-7, 20000, 200000)$。\n- 用例 4 (实二次域，奇数导子): $(5, 50000, 300000)$。\n- 用例 5 (实二次域，偶数导子): $(8, 50000, 300000)$。\n\n最终输出格式：\n- 您的程序应生成一行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，顺序为\n  $\\big[L_{\\text{naive}}(N_1,D_1),L_{\\text{ps}}(M_1,D_1),L_{\\text{naive}}(N_2,D_2),L_{\\text{ps}}(M_2,D_2),\\dots\\big]$。\n- 所有输出必须是浮点数。", "solution": "这个问题的核心是为一个与基本判别式 $D$ 相关联的本原二次特征 $\\chi_D$ 近似计算 Dirichlet $L$-函数的值 $L(1, \\chi_D) = \\sum_{n=1}^\\infty \\frac{\\chi_D(n)}{n}$。我们将推导并实现两种估计量：一个朴素部分和，以及一个从分部求和原理推导出的收敛更快的估计量。\n\n**1. 部分和恒等式的推导与收敛性分析**\n\n分部求和原理，即分部积分的离散类比，提供了一种将慢收敛级数转换为更易于处理形式的方法。令 $\\{a_n\\}_{n=1}^\\infty$ 和 $\\{f_n\\}_{n=1}^\\infty$ 为两个复数序列。令 $S_n = \\sum_{k=1}^n a_k$ 为 $\\{a_n\\}$ 的部分和，且 $S_0 = 0$。那么对于任意整数 $M \\ge 1$：\n$$ \\sum_{n=1}^M a_n f_n = \\sum_{n=1}^M (S_n - S_{n-1}) f_n $$\n通过重新排列各项（一个称为 Abel 变换的过程）：\n$$ \\sum_{n=1}^M a_n f_n = \\sum_{n=1}^M S_n f_n - \\sum_{n=1}^M S_{n-1} f_n = \\sum_{n=1}^M S_n f_n - \\sum_{k=0}^{M-1} S_k f_{k+1} $$\n$$ = S_M f_M - S_0 f_1 + \\sum_{n=1}^{M-1} S_n f_n - \\sum_{n=1}^{M-1} S_n f_{n+1} $$\n由于 $S_0 = 0$，我们得到离散分部求和恒等式：\n$$ \\sum_{n=1}^M a_n f_n = S_M f_M + \\sum_{n=1}^{M-1} S_n (f_n - f_{n+1}) $$\n对于我们的问题，我们设 $a_n = \\chi_D(n)$ 和 $f_n = 1/n$。累积和为 $S(n) = \\sum_{k=1}^n \\chi_D(k)$。差分项为 $f_n - f_{n+1} = \\frac{1}{n} - \\frac{1}{n+1} = \\frac{1}{n(n+1)}$。将这些代入恒等式，得到截断级数所需的关系：\n$$ \\sum_{n=1}^M \\frac{\\chi_D(n)}{n} = \\frac{S(M)}{M} + \\sum_{n=1}^{M-1} \\frac{S(n)}{n(n+1)} $$\n这个恒等式对于到 $M$ 为止的部分和是精确的。为了估计 $L(1, \\chi_D)$，我们考虑 $M \\to \\infty$ 时的极限。对于任意非主 Dirichlet 特征 $\\chi_D$，和 $S(x) = \\sum_{n \\le x} \\chi_D(n)$ 是有界的。Pólya-Vinogradov 不等式给出一个界 $|S(x)| \\le C\\sqrt{|D|} \\log|D|$，其中 $C$ 是某个常数。当 $M \\to \\infty$ 时，由于 $S(M)$ 有界，项 $\\frac{S(M)}{M}$ 趋于 0。这得到了 $L$ 值的一个无穷级数表达式：\n$$ L(1, \\chi_D) = \\sum_{n=1}^\\infty \\frac{S(n)}{n(n+1)} $$\n这个新级数提供了一个更优的估计量。原级数 $\\sum \\frac{\\chi_D(n)}{n}$ 的项以 $O(1/n)$ 的速率衰减，导致缓慢的条件收敛。转换后的级数 $\\sum \\frac{S(n)}{n(n+1)}$ 的项以 $O(1/n^2)$ 的速率衰减（因为 $S(n)$ 有界），确保了绝对收敛和更快的收敛速度。\n\n部分和估计量 $L_{\\text{ps}}(M, D)$ 是通过截断这个加速级数来定义的。问题指定使用有限和的恒等式作为估计量，即：\n$$ L_{\\text{ps}}(M,D) = \\frac{S(M)}{M} + \\sum_{n=1}^{M-1} \\frac{S(n)}{n(n+1)} $$\n此估计量的误差是无穷级数的尾部，我们可以对其进行界定：\n$$ \\left| L(1, \\chi_D) - L_{\\text{ps}}(M, D) \\right| = \\left| \\sum_{n=M}^\\infty \\frac{S(n)}{n(n+1)} - \\frac{S(M)}{M} \\right| $$\n再次使用该恒等式，$L(1,\\chi_D) = \\lim_{K \\to \\infty} \\left( \\frac{S(K)}{K} + \\sum_{n=1}^{K-1} \\frac{S(n)}{n(n+1)} \\right)$，误差可以更简单地看作是从 $n=M$ 开始的加速级数的尾部：\n$$ \\text{Error} = \\left| \\sum_{n=M}^{\\infty} \\frac{S(n)}{n(n+1)} \\right| \\le \\sum_{n=M}^{\\infty} \\frac{|S(n)|}{n(n+1)} \\le \\left(\\sup_{t \\ge M} |S(t)|\\right) \\sum_{n=M}^{\\infty} \\left(\\frac{1}{n} - \\frac{1}{n+1}\\right) $$\n后一个和是一个等于 $1/M$ 的伸缩级数。因此，误差的界为：\n$$ \\text{Error} \\le \\frac{\\sup_{t \\ge M} |S(t)|}{M} $$\n这表明误差至少以 $O(1/M)$ 的速率减小，从而证实了收敛加速。量 $\\frac{\\max_{1\\le n\\le M}|S(n)|}{M}$ 可作为此误差界大小的一个可计算的代理。\n\n**2. Kronecker 符号 $\\chi_D(n)$ 的算法**\n\n特征 $\\chi_D(n)$ 作为 Kronecker 符号 $\\left(\\frac{D}{n}\\right)$ 来计算。该算法避免了将 $n$ 分解为素数，而是依赖于该符号的积性性质和互反律。对于一个整数 $n  0$：\n\n1.  **基本情况与整除性**：如果 $\\gcd(D, n)  1$，则 $\\left(\\frac{D}{n}\\right) = 0$。如果 $n=1$，则 $\\left(\\frac{D}{n}\\right) = 1$。为了实现，为进行高效的 GCD 检查，可预先识别出 $|D|$ 的因子。\n\n2.  **分解出 2 的幂**：将 $n$ 表示为 $n = 2^k m$，其中 $m$ 是奇数。根据积性，$\\left(\\frac{D}{n}\\right) = \\left(\\frac{D}{2}\\right)^k \\left(\\frac{D}{m}\\right)$。\n\n3.  **计算 $\\left(\\frac{D}{2}\\right)$**：如果 $k  0$，我们需要这一项。由于 $\\gcd(D, n) = 1$，$D$ 必须是奇数。其值由 $\\left(\\frac{D}{2}\\right) = (-1)^{(D^2-1)/8}$ 给出。如果 $D \\equiv 1, 7 \\pmod 8$，则值为 $1$；如果 $D \\equiv 3, 5 \\pmod 8$，则值为 $-1$。\n\n4.  **计算 $\\left(\\frac{D}{m}\\right)$**：这是 Jacobi 符号，有一个类似于计算 GCD 的欧几里得算法的高效迭代算法。\n    - 如果 $D   0$，我们使用 $\\left(\\frac{D}{m}\\right) = \\left(\\frac{-1}{m}\\right)\\left(\\frac{|D|}{m}\\right)$。项 $\\left(\\frac{-1}{m}\\right) = (-1)^{(m-1)/2}$。\n    - 为了计算 $\\left(\\frac{a}{b}\\right)$（其中 $a, b  0$ 且 $b$ 为奇数）：\n        a. 将 $a$ 对 $b$ 取模。\n        b. 从 $a$ 中反复提取因子 2。每提取一个因子，就将总结果乘以 $\\left(\\frac{2}{b}\\right) = (-1)^{(b^2-1)/8}$。\n        c. 当 $a$ 变为奇数后，应用二次互反律：$\\left(\\frac{a}{b}\\right) = \\left(\\frac{b}{a}\\right) (-1)^{(a-1)(b-1)/4}$。\n        d. 对模数更小的数对 $(b, a \\pmod b)$ 重复此过程，直到上方的参数变为 1。\n\n**3. 估计量的实现**\n\n两种估计量的实现如下：\n- **$L_{\\text{naive}}(N,D)$**：朴素部分和是 $\\sum_{n=1}^{N}\\frac{\\chi_D(n)}{n}$ 的直接实现。\n- **$L_{\\text{ps}}(M,D)$**：部分和估计量由 $\\frac{S(M)}{M} + \\sum_{n=1}^{M-1} \\frac{S(n)}{n(n+1)}$ 给出。\n\n总体计算过程高效进行：\n1.  对于给定的测试用例 $(D,N,M)$，确定所需的最大索引 $K = \\max(N, M)$。\n2.  创建一个向量来存储 $n=1, \\dots, K$ 的 $\\chi_D(n)$。通过对每个 $n$ 调用 Kronecker 符号算法来填充此向量。\n3.  创建第二个向量来存储累积和 $S(n) = \\sum_{k=1}^n \\chi_D(k)$。这通过单次遍历计算得出：$S(n) = S(n-1) + \\chi_D(n)$。\n4.  然后，使用对这些预计算数组的向量化操作来计算 $L_{\\text{naive}}$ 和 $L_{\\text{ps}}$ 的和，这非常高效。例如，$L_{\\text{naive}}(N,D)$ 计算为 `np.sum(chi_vals[1:N+1] / np.arange(1, N+1))`。\n\n这种策略最大限度地减少了冗余计算，并利用优化的数值库来执行求和步骤。", "answer": "```python\nimport numpy as np\nimport math\n\ndef get_optimized_gcd_check(D):\n    \"\"\"Returns a simple function to check for gcd(D, n)  1.\"\"\"\n    abs_D = abs(D)\n    if abs_D == 3:\n        return lambda n: n % 3 == 0\n    if abs_D == 4:\n        return lambda n: n % 2 == 0\n    if abs_D == 5:\n        return lambda n: n % 5 == 0\n    if abs_D == 7:\n        return lambda n: n % 7 == 0\n    if abs_D == 8:\n        return lambda n: n % 2 == 0\n    # Fallback for general D\n    return lambda n: math.gcd(abs_D, n)  1\n\ndef jacobi(a, n):\n    \"\"\"\n    Computes the Jacobi symbol (a/n) for n  0 odd.\n    Assumes a is non-negative.\n    \"\"\"\n    if n = 0 or n % 2 == 0:\n        raise ValueError(\"n must be a positive odd integer.\")\n    if n == 1:\n        return 1\n    \n    a %= n\n    t = 1\n    while a != 0:\n        while a % 2 == 0:\n            a //= 2\n            n_mod_8 = n % 8\n            if n_mod_8 == 3 or n_mod_8 == 5:\n                t = -t\n        \n        a, n = n, a\n        \n        # Apply quadratic reciprocity law\n        if a % 4 == 3 and n % 4 == 3:\n            t = -t\n        \n        a %= n\n        \n    if n == 1:\n        return t\n    else:\n        return 0\n\ndef make_kronecker_func(D, gcd_check):\n    \"\"\"\n    Returns a specialized Kronecker symbol function for a given D.\n    \"\"\"\n    def kronecker(n):\n        if n == 0:\n            return 0\n        if gcd_check(n):\n            return 0\n        if n == 1:\n            return 1\n\n        k = 0\n        while n % 2 == 0:\n            k += 1\n            n //= 2\n        \n        if k  0:\n            D_mod_8 = D % 8\n            if D_mod_8 == 3 or D_mod_8 == 5:\n                term_2 = -1 if k % 2 != 0 else 1\n            else: # D_mod_8 == 1 or 7\n                term_2 = 1\n        else:\n            term_2 = 1\n        \n        if n == 1:\n            return term_2\n        \n        d = D\n        if d  0:\n            # (-1/n) = (-1)^((n-1)/2)\n            sign_neg_d = -1 if (n - 1) // 2 % 2 != 0 else 1\n            d = -d\n        else:\n            sign_neg_d = 1\n            \n        return term_2 * sign_neg_d * jacobi(d, n)\n\n    return kronecker\n\ndef get_chi_and_S(D, max_val):\n    \"\"\"\n    Computes chi_D(n) and its cumulative sum S(n) up to max_val.\n    \"\"\"\n    gcd_check = get_optimized_gcd_check(D)\n    kronecker_func = make_kronecker_func(D, gcd_check)\n\n    chi_vals = np.zeros(max_val + 1)\n    for n in range(1, max_val + 1):\n        chi_vals[n] = kronecker_func(n)\n\n    S_vals = np.cumsum(chi_vals)\n    return chi_vals, S_vals\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases.\n    \"\"\"\n    test_cases = [\n        (-3, 20000, 200000),\n        (-4, 20000, 200000),\n        (-7, 20000, 200000),\n        (5, 50000, 300000),\n        (8, 50000, 300000),\n    ]\n\n    results = []\n    \n    for D, N, M in test_cases:\n        max_val = max(N, M)\n        chi_vals, S_vals = get_chi_and_S(D, max_val)\n\n        # Estimator 1: Naive partial sum\n        n_range_naive = np.arange(1, N + 1)\n        l_naive = np.sum(chi_vals[1 : N + 1] / n_range_naive)\n        results.append(l_naive)\n\n        # Estimator 2: Partial summation\n        n_range_ps = np.arange(1, M, dtype=np.float64)\n        sum_part = np.sum(S_vals[1:M] / (n_range_ps * (n_range_ps + 1.0)))\n        \n        if M  0:\n            tail_term = S_vals[M] / float(M)\n        else:\n            tail_term = 0.0\n\n        l_ps = sum_part + tail_term\n        results.append(l_ps)\n        \n    print(f\"[{','.join(f'{r:.12f}' for r in results)}]\")\n\nsolve()\n```", "id": "3090180"}]}