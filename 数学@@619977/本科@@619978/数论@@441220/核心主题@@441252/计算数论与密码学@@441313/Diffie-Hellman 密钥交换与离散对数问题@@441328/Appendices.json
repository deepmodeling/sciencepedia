{"hands_on_practices": [{"introduction": "理论是基础，但亲身实践能让知识变得鲜活。这个练习将带你完整地走一遍迪菲-赫尔曼密钥交换的流程。通过在一个小素数模下进行计算，你将亲手验证通信双方如何在不直接传递秘密的情况下，计算出完全相同的共享密钥，从而深刻理解其核心数学原理 $(g^a)^b \\equiv (g^b)^a \\pmod p$。[@problem_id:3086462]", "problem": "考虑模素数 $p$ 的整数乘法群 $G = (\\mathbb{Z}/p\\mathbb{Z})^{\\times}$，其群运算为模 $p$ 乘法。您可以使用的基本事实是：对于素数 $p$，$G$ 是一个阶为 $p-1$ 的有限群；对于 $g \\in G$ 和 $n \\in \\mathbb{N}$，幂运算 $g^{n}$ 定义为重复应用群运算；模 $p$ 规约与乘法兼容。双方运行迪菲-赫尔曼密钥交换（DHKE），选择一个公开已知的基 $g \\in G$ 和私有指数 $a$ 和 $b$。他们公布 $A \\equiv g^{a} \\ (\\mathrm{mod}\\ p)$ 和 $B \\equiv g^{b} \\ (\\mathrm{mod}\\ p)$，然后各自使用对方的公开值和自己的私有指数计算共享密钥。\n\n请仅使用群公理、群中幂运算的定义以及模算术的标准性质，首先证明为什么双方在从 $A$、$B$、$a$ 和 $b$ 计算共享密钥时会得到 $G$ 中的相同元素。然后，对于具体参数 $p=23$，$g=5$，$a=6$ 和 $b=15$，明确计算出 $A$ 和 $B$。最后，从双方的角度计算共享密钥，并验证两个计算结果一致，将公共值以一个在 1 到 $p-1$ 范围内的整数形式给出。无需四舍五入。", "solution": "问题陈述是有效的。这是一个在初等数论和密码学中定义明确的问题，基于成熟的数学原理，并包含获得唯一解所需的所有必要信息。\n\n该问题要求分为两部分：首先，从理论上证明为什么迪菲-赫尔曼密钥交换协议会产生一个共同的共享密钥；其次，通过一个具体的计算来为一组给定的参数演示这一点。\n\n**第一部分：共享密钥的证明**\n\n设双方为参与方1和参与方2。他们在模素数 $p$ 的整数乘法群中进行操作，记为 $G = (\\mathbb{Z}/p\\mathbb{Z})^{\\times}$。群运算是模 $p$ 乘法。选择一个公共基元素 $g \\in G$。参与方1选择一个私有整数指数 $a$，参与方2选择一个私有整数指数 $b$。\n\n参与方1计算其公开值 $A$ 如下：\n$$A \\equiv g^a \\pmod{p}$$\n\n参与方2计算其公开值 $B$ 如下：\n$$B \\equiv g^b \\pmod{p}$$\n\n他们交换这些公开值。然后，参与方1通过将接收到的公开值 $B$ 提升到自己的私有指数 $a$ 的幂来计算共享密钥 $S_1$：\n$$S_1 \\equiv B^a \\pmod{p}$$\n代入 $B$ 的定义，我们得到：\n$$S_1 \\equiv (g^b)^a \\pmod{p}$$\n\n参与方2通过将接收到的公开值 $A$ 提升到自己的私有指数 $b$ 的幂来计算共享密钥 $S_2$：\n$$S_2 \\equiv A^b \\pmod{p}$$\n代入 $A$ 的定义，我们得到：\n$$S_2 \\equiv (g^a)^b \\pmod{p}$$\n\n为了证明 $S_1$ 和 $S_2$ 相同，我们必须证明 $(g^b)^a \\equiv (g^a)^b \\pmod{p}$。这依赖于任何群中幂运算的一个基本性质。设 $x$ 是群的一个元素，且 $m, n \\in \\mathbb{N}$。表达式 $x^m$ 定义为对 $x$ 重复应用群运算 $m$ 次。\n那么，$(x^m)^n$ 是元素 $x^m$ 对自身进行 $n$ 次运算的结果：\n$$(x^m)^n = \\underbrace{(x^m) \\cdot (x^m) \\cdots (x^m)}_{n \\text{ 次}}$$\n展开每个 $x^m$：\n$$(x^m)^n = \\underbrace{(\\underbrace{x \\cdot x \\cdots x}_{m \\text{ 次}}) \\cdot (\\underbrace{x \\cdot x \\cdots x}_{m \\text{ 次}}) \\cdots (\\underbrace{x \\cdot x \\cdots x}_{m \\text{ 次}})}_{n \\text{ 个块}}$$\n因为群运算是结合的（群公理之一），我们可以移除对块进行分组的括号。$x$ 对自身进行运算的总次数是 $m$ 和 $n$ 的乘积，即 $m \\times n$。\n因此，$(x^m)^n = x^{mn}$。\n\n将此性质应用于我们对 $S_1$ 和 $S_2$ 的表达式：\n对于 $S_1$：\n$$S_1 \\equiv (g^b)^a \\equiv g^{ba} \\pmod{p}$$\n对于 $S_2$：\n$$S_2 \\equiv (g^a)^b \\equiv g^{ab} \\pmod{p}$$\n\n由于整数乘法是可交换的，我们有 $a \\times b = b \\times a$，或 $ab = ba$。因此，指数相等，这意味着得到的群元素也相等：\n$$g^{ab} = g^{ba}$$\n由此直接得出：\n$$S_1 \\equiv g^{ba} \\equiv g^{ab} \\equiv S_2 \\pmod{p}$$\n双方通过各自的计算，得到了群 $G$ 中的同一个元素。这个共同的元素就是他们的共享密钥。此方法的安全性依赖于在给定公开值 $g$、$p$ 和 $A=g^a \\pmod{p}$ 的情况下，确定私有指数 $a$ 的计算难度（这就是离散对数问题）。\n\n**第二部分：具体计算**\n\n给定的参数是 $p=23$，$g=5$，$a=6$ 和 $b=15$。所有计算都在模 23 下进行。\n\n首先，我们计算公开值 $A$ 和 $B$。\n\n计算 $A$：\n$$A \\equiv g^a \\pmod{p} \\equiv 5^6 \\pmod{23}$$\n我们可以通过逐次平方或直接求值来计算：\n$5^1 \\equiv 5 \\pmod{23}$\n$5^2 = 25 \\equiv 2 \\pmod{23}$\n$5^3 \\equiv 5^2 \\cdot 5 \\equiv 2 \\cdot 5 = 10 \\pmod{23}$\n$5^6 = (5^3)^2 \\equiv 10^2 = 100 \\pmod{23}$\n为了将 100 模 23 规约，我们发现 $100 = 4 \\times 23 + 8$。\n因此，$A \\equiv 8 \\pmod{23}$。参与方1的公开值是 $A=8$。\n\n计算 $B$：\n$$B \\equiv g^b \\pmod{p} \\equiv 5^{15} \\pmod{23}$$\n为了提高效率，我们使用平方求幂法。指数是 15，其二进制表示为 $1111_2$，所以 $15 = 8 + 4 + 2 + 1$。\n$5^1 \\equiv 5 \\pmod{23}$\n$5^2 \\equiv (5^1)^2 \\equiv 5^2 = 25 \\equiv 2 \\pmod{23}$\n$5^4 \\equiv (5^2)^2 \\equiv 2^2 = 4 \\pmod{23}$\n$5^8 \\equiv (5^4)^2 \\equiv 4^2 = 16 \\pmod{23}$\n现在，我们将这些组合起来求 $5^{15}$：\n$B \\equiv 5^{15} = 5^{8+4+2+1} = 5^8 \\cdot 5^4 \\cdot 5^2 \\cdot 5^1 \\pmod{23}$\n$B \\equiv 16 \\cdot 4 \\cdot 2 \\cdot 5 \\pmod{23}$\n$16 \\cdot 4 = 64 \\equiv 2 \\times 23 + 18 \\equiv 18 \\pmod{23}$\n所以，$B \\equiv 18 \\cdot 2 \\cdot 5 \\pmod{23}$\n$18 \\cdot 2 = 36 \\equiv 1 \\times 23 + 13 \\equiv 13 \\pmod{23}$\n所以，$B \\equiv 13 \\cdot 5 \\pmod{23}$\n$13 \\cdot 5 = 65 \\equiv 2 \\times 23 + 19 \\equiv 19 \\pmod{23}$\n参与方2的公开值是 $B=19$。\n\n最后，我们从每一方的角度计算共享密钥，并验证它们相等。\n\n参与方1计算共享密钥 $S_1$：\n$$S_1 \\equiv B^a \\pmod{p} \\equiv 19^6 \\pmod{23}$$\n我们可以利用 $19 \\equiv -4 \\pmod{23}$ 这一事实：\n$S_1 \\equiv (-4)^6 = 4^6 \\pmod{23}$\n之前计算$5^8$时，我们已经用到了$4$的幂：\n$4^1 \\equiv 4 \\pmod{23}$\n$4^2 \\equiv 16 \\pmod{23}$\n$4^3 \\equiv 4^2 \\cdot 4 \\equiv 16 \\cdot 4 = 64 \\equiv 18 \\pmod{23}$\n$S_1 \\equiv 4^6 = (4^3)^2 \\equiv 18^2 \\pmod{23}$\n$18^2 = 324$。将 324 模 23 规约：$324 = 14 \\times 23 + 2$。\n$S_1 \\equiv 2 \\pmod{23}$。\n\n参与方2计算共享密钥 $S_2$：\n$$S_2 \\equiv A^b \\pmod{p} \\equiv 8^{15} \\pmod{23}$$\n同样，我们对指数 $15 = 8 + 4 + 2 + 1$ 使用平方求幂法。\n$8^1 \\equiv 8 \\pmod{23}$\n$8^2 = 64 \\equiv 18 \\pmod{23}$\n$8^4 \\equiv (8^2)^2 \\equiv 18^2 \\equiv 2 \\pmod{23}$ （来自 $S_1$ 的计算）\n$8^8 \\equiv (8^4)^2 \\equiv 2^2 = 4 \\pmod{23}$\n现在，我们将这些组合起来求 $8^{15}$：\n$S_2 \\equiv 8^{15} = 8^{8+4+2+1} = 8^8 \\cdot 8^4 \\cdot 8^2 \\cdot 8^1 \\pmod{23}$\n$S_2 \\equiv 4 \\cdot 2 \\cdot 18 \\cdot 8 \\pmod{23}$\n$4 \\cdot 2 = 8$\n$S_2 \\equiv 8 \\cdot 18 \\cdot 8 \\pmod{23}$\n$8 \\cdot 18 = 144 \\equiv 6 \\times 23 + 6 \\equiv 6 \\pmod{23}$\n$S_2 \\equiv 6 \\cdot 8 \\pmod{23}$\n$6 \\cdot 8 = 48 \\equiv 2 \\times 23 + 2 \\equiv 2 \\pmod{23}$。\n\n计算结果确认双方得到相同的共享密钥：$S_1 = 2$ 和 $S_2 = 2$。这个公共值是所需范围 1 到 22 内的一个整数。\n共享密钥是 $2$。", "answer": "$$\\boxed{2}$$", "id": "3086462"}, {"introduction": "在了解了迪菲-赫尔曼密钥交换的正常工作流程后，让我们来探讨一个关键的安全问题：如果私钥意外泄露会发生什么？这个练习模拟了一个常见的安全事故场景，让你扮演窃听者的角色。通过利用截获的公钥和意外泄露的私钥，你将能够计算出共享密钥，这会让你切实体会到为何“私钥”必须被严格保密。[@problem_id:1363064]", "problem": "Alice 和 Bob 两方希望使用 Diffie-Hellman 密钥交换协议建立一个用于安全通信的共享密钥。他们公开约定一个素数模数 $p=107$ 和一个基数 $g=2$，其中 $g$ 是模 $p$ 的一个原根。\n\nAlice 选择一个秘密整数 $a$，计算出她的公钥 $A = g^a \\pmod p$，并通过公共信道发送 $A$。\n\nBob 选择一个秘密整数 $b$。他打算计算他的公钥 $B = g^b \\pmod p$ 并将其发送给 Alice。然而，由于一个软件故障，Bob 的系统出现故障，并通过公共信道广播了他的秘密整数 $b$ 本身，而不是他的公钥 $B$。\n\n一个窃听者 Eve 正在监听该信道，并截获了所有传输的信息。Eve 截获了 Alice 的公钥，即 $A=34$。她还截获了 Bob 错误发送的值，即 $b=25$。\n\n根据这些信息，确定 Eve 现在可以计算出的共享密钥的值。", "solution": "在 Diffie-Hellman 协议中，共享密钥为 $K \\equiv g^{ab} \\pmod p$。如果 Eve 知道了 $b$ 和 Alice 的公钥 $A = g^{a} \\pmod p$，她就可以如下计算共享密钥：\n$$\nK \\equiv A^{b} \\pmod p.\n$$\n当 $p=107$，$A=34$，$b=25$ 时，共享密钥为\n$$\nK \\equiv 34^{25} \\pmod{107}.\n$$\n使用重复平方算法和二进制分解 $25=16+8+1$：\n$$\n34^{2} \\equiv 1156 \\equiv 86 \\pmod{107},\n$$\n$$\n34^{4} \\equiv 86^{2} = 7396 \\equiv 13 \\pmod{107},\n$$\n$$\n34^{8} \\equiv 13^{2} = 169 \\equiv 62 \\pmod{107},\n$$\n$$\n34^{16} \\equiv 62^{2} = 3844 \\equiv 99 \\pmod{107}.\n$$\n因此，\n$$\n34^{25} \\equiv 34^{16}\\cdot 34^{8}\\cdot 34 \\equiv 99 \\cdot 62 \\cdot 34 \\pmod{107}.\n$$\n计算模 $107$ 的乘积：\n$$\n99 \\cdot 62 = 6138 \\equiv 39 \\pmod{107},\n$$\n$$\n39 \\cdot 34 = 1326 \\equiv 42 \\pmod{107}.\n$$\n因此，\n$$\nK \\equiv 42 \\pmod{107}.\n$$\nEve 可以计算出的共享密钥是 $42$。", "answer": "$$\\boxed{42}$$", "id": "1363064"}, {"introduction": "迪菲-赫尔曼密钥交换的安全性基石是离散对数问题 (DLP) 的计算难度。为了真正理解“困难”意味着什么，我们将学习一种解决小型DLP问题的经典算法——“小步大步法”(Baby-step Giant-step)。通过親手执行这个算法，你将体验攻击者破解密钥交换所需的过程，并直观地认识到为什么在实际应用中必须使用极大的素数来确保安全。[@problem_id:3090662]", "problem": "在有限循环群上的 Diffie–Hellman 密钥交换的背景下，其安全性依赖于有限域乘法群中离散对数问题的困难性。考虑模素数 $p$ 的单位构成的有限循环群，即 $G = \\mathbb{F}_{p}^{\\times}$，其阶为 $|G| = n = p - 1$。生成元 $g \\in G$ 满足映射 $x \\mapsto g^{x}$ 能遍历 $G$ 中的每一个元素。离散对数问题要求，给定 $g$ 和 $h \\in G$，找出指数 $x \\in \\{0,1,\\dots,n-1\\}$，使得 $g^{x} \\equiv h \\pmod{p}$。\n\n在素域 $p = 29$ 中进行计算，取具体生成元 $g = 2 \\in \\mathbb{F}_{29}^{\\times}$ 和目标元素 $h = 21 \\in \\mathbb{F}_{29}^{\\times}$。仅从群公理和关于循环群的标准性质出发，通过将未知指数 $x$ 分割成两个有界部分，推导出一个平方根时间复杂度的算法，然后完整执行该算法，以确定唯一的 $x \\in \\{0,1,\\dots,n-1\\}$，使得 $2^{x} \\equiv 21 \\pmod{29}$。作为推导的一部分，用 $n = |G|$ 来论证你的方法的内存和时间开销。\n\n最终答案只需报告 $x$ 在 $\\{0,1,\\dots,n-1\\}$ 中的整数值。无需四舍五入，也不涉及单位。", "solution": "我们从乘法群 $G = \\mathbb{F}_{p}^{\\times}$ 的结构开始，对于任意素数 $p$，该群是循环群，阶为 $n = p - 1$。此处 $p = 29$，所以 $n = 28$。如果元素 $g \\in G$ 的阶为 $n$，则它是一个生成元。要验证 $g = 2$ 是一个生成元，只需检查对于 $n$ 的每个素因子 $q$，都有 $2^{n/q} \\not\\equiv 1 \\pmod{29}$。$28$ 的因式分解是 $28 = 2^{2} \\cdot 7$，所以素因子是 $2$ 和 $7$。我们计算\n- $2^{28/2} = 2^{14} \\pmod{29}$。我们有 $2^{5} \\equiv 32 \\equiv 3 \\pmod{29}$，所以 $2^{10} \\equiv 3^{2} \\equiv 9 \\pmod{29}$ 且 $2^{14} \\equiv 2^{10} \\cdot 2^{4} \\equiv 9 \\cdot 16 \\equiv 144 \\equiv 28 \\not\\equiv 1 \\pmod{29}$。\n- $2^{28/7} = 2^{4} \\equiv 16 \\not\\equiv 1 \\pmod{29}$。\n因此，$2$ 是 $\\mathbb{F}_{29}^{\\times}$ 的一个生成元。\n\n给定 $h = 21$，我们必须求解 $2^{x} \\equiv 21 \\pmod{29}$，其中 $x \\in \\{0,1,\\dots,27\\}$。我们从第一性原理出发，推导出一种平方根时间复杂度的算法，通常称为小步大步法，如下所示。设 $m$ 是一个待选的正整数，其数量级约为 $\\sqrt{n}$。将未知指数写为\n$$\nx = im + j,\n$$\n其中 $0 \\le i, j  m$。根据群法则和指数运算法则，我们有\n$$\n2^{x} \\equiv 2^{im + j} \\equiv \\left(2^{m}\\right)^{i} \\cdot 2^{j} \\equiv h \\pmod{29}.\n$$\n将等式两边同乘以 $\\left(2^{m}\\right)^{-i}$ 进行整理，得到\n$$\nh \\cdot \\left(2^{-m}\\right)^{i} \\equiv 2^{j} \\pmod{29}.\n$$\n这个恒等式表明，如果我们预计算“小步”集合 $\\{2^{j} \\pmod{29} : 0 \\le j  m\\}$ 并将其值作为键存储在一个表中，那么当 $i$ 从 $0$ 到 $m-1$ 取值时，我们就可以在“大步”集合 $h \\cdot \\left(2^{-m}\\right)^{i} \\pmod{29}$ 中寻找匹配项。当出现匹配 $h \\cdot \\left(2^{-m}\\right)^{i} \\equiv 2^{j}$ 时，我们就能得到解 $x = im + j$。选择 $m = \\lceil \\sqrt{n} \\rceil$ 可以平衡 $i$ 和 $j$ 的搜索范围，并使算法复杂度达到平方根级别。\n\n我们现在具体执行这个计划。这里 $n = 28$，所以我们取\n$$\nm = \\lceil \\sqrt{28} \\rceil = 6.\n$$\n小步：计算 $j = 0,1,2,3,4,5$ 时的 $2^{j} \\pmod{29}$：\n- $j = 0$: $2^{0} \\equiv 1$。\n- $j = 1$: $2^{1} \\equiv 2$。\n- $j = 2$: $2^{2} \\equiv 4$。\n- $j = 3$: $2^{3} \\equiv 8$。\n- $j = 4$: $2^{4} \\equiv 16$。\n- $j = 5$: $2^{5} \\equiv 32 \\equiv 3 \\pmod{29}$。\n\n存储值到指数 $j$ 的映射：$1 \\mapsto 0$, $2 \\mapsto 1$, $4 \\mapsto 2$, $8 \\mapsto 3$, $16 \\mapsto 4$, $3 \\mapsto 5$。\n\n计算大步乘数 $c = 2^{-m} \\pmod{29}$。首先计算 $2^{m} \\pmod{29}$：\n$$\n2^{6} \\equiv 64 \\equiv 64 - 58 \\equiv 6 \\pmod{29}.\n$$\n模 $29$ 下 $6$ 的逆元可以通过扩展欧几里得算法找到。我们有 $29 = 4 \\cdot 6 + 5$，$6 = 1 \\cdot 5 + 1$，因此 $1 = 6 - 1 \\cdot 5 = 6 - (29 - 4 \\cdot 6) = 5 \\cdot 6 - 29$，所以 $6$ 模 $29$ 的逆元是 $5$。因此，\n$$\nc \\equiv (2^{6})^{-1} \\equiv 6^{-1} \\equiv 5 \\pmod{29}.\n$$\n\n大步：从 $h = 21$ 开始，迭代计算 $h \\cdot c^{i} \\pmod{29}$（其中 $i = 0,1,2,3,4,5$），直到在小步表中找到匹配项。\n- $i = 0$: $21 \\cdot c^{0} \\equiv 21$。这个值不在 $\\{1,2,3,4,8,16\\}$ 中。\n- $i = 1$: $21 \\cdot c \\equiv 21 \\cdot 5 \\equiv 105 \\equiv 105 - 87 \\equiv 18 \\pmod{29}$。不在表中。\n- $i = 2$: 将前一个值乘以 $c$：$18 \\cdot 5 \\equiv 90 \\equiv 90 - 87 \\equiv 3 \\pmod{29}$。这与小步值 $3$ 匹配，对应于 $j = 5$。\n\n我们找到了 $i = 2$ 和 $j = 5$，因此\n$$\nx = im + j = 2 \\cdot 6 + 5 = 17.\n$$\n验证：$2^{17} \\equiv -8 \\equiv 21 \\pmod{29}$，因为 $2^{14} \\equiv -1 \\pmod{29}$ 且 $2^{17} \\equiv 2^{14} \\cdot 2^{3} \\equiv (-1) \\cdot 8 \\equiv -8 \\equiv 21 \\pmod{29}$。\n\n复杂度分析：设 $n = |G|$。选择 $m = \\lceil \\sqrt{n} \\rceil$ 可得：\n- 内存：存储大小为 $m$ 的小步表需要 $O(m) = O(\\sqrt{n})$ 的空间。\n- 时间：计算 $m$ 个小步需要 $O(m)$ 次群运算；计算最多 $m$ 个大步并在哈希表/字典中查找，每步的期望时间为 $O(1)$，因此额外总时间为 $O(m)$。所以总时间为 $O(m) + O(m) = O(\\sqrt{n})$。\n这种平方根级别的时间和内存复杂度是针对离散对数问题的经典中间相遇攻击的基础，并说明了为什么 Diffie–Hellman 密钥交换的安全性要求 $n$ 足够大。\n\n因此，所求的离散对数为 $x = 17$。", "answer": "$$\\boxed{17}$$", "id": "3090662"}]}