{"hands_on_practices": [{"introduction": "本练习为含重复元素的排列问题提供了一个基础场景。通过计算一个机器人所有可能的独特工作日程，你将练习使用多项式系数，这是解决非唯一项目排列问题的核心公式。这个实践旨在巩固你对处理重复元素排列的基本理解。[@problem_id:1386528]", "problem": "一个机器人实验室正在为其清洁机器人编写日常维护计划。该计划包含一个由10个离散任务组成的序列，这些任务按顺序逐一执行。工程团队已经确定，对于一整天的工作，该计划必须由以下特定任务组成：\n- 3个“数据处理”任务\n- 2个“工作区清洁”任务\n- 2个“电池充电”任务\n- 1个“系统诊断”任务\n- 1个“状态报告”任务\n- 1个“返回坞站”任务\n\n一个有效的日常计划是这10个任务的任意一个唯一排序。确定可以为该机器人编写的不同的日常计划的总数。", "solution": "这个问题要求计算从10个任务的集合中可以形成的不同序列（计划）的数量，其中一些任务是相同的。这是一个组合问题，涉及求多重集合的排列数。\n\n首先，我们确定需要排列的任务总数。设这个总数为 $n$。各个任务数量的总和是 $n = 3 + 2 + 2 + 1 + 1 + 1 = 10$。\n\n如果所有10个任务都是不同的，将会有 $10!$ 种可能的排列方式。然而，由于一些任务是相同的，我们必须对因排列这些相同任务而产生的重复计数进行修正。对于一组 $k$ 个相同的项目，有 $k!$ 种排列它们的方式，但所有这些排列都是无法区分的。因此，我们必须将总排列数除以每种相同项目数量的阶乘。\n\n每种任务的数量如下：\n- $n_1 = 3$ 个“数据处理”任务\n- $n_2 = 2$ 个“工作区清洁”任务\n- $n_3 = 2$ 个“电池充电”任务\n- $n_4 = 1$ 个“系统诊断”任务\n- $n_5 = 1$ 个“状态报告”任务\n- $n_6 = 1$ 个“返回坞站”任务\n\n对于 $n$ 个对象的不同排列数，其中有 $n_1$ 个第一类相同对象，$n_2$ 个第二类相同对象，...，以及 $n_k$ 个第 $k$ 类相同对象，通用公式由多项式系数给出：\n$$ \\frac{n!}{n_1! n_2! \\dots n_k!} $$\n将此公式应用于我们的具体问题，不同计划的数量为：\n$$ \\frac{10!}{3! \\cdot 2! \\cdot 2! \\cdot 1! \\cdot 1! \\cdot 1!} $$\n由于 $1! = 1$，表达式简化为：\n$$ \\frac{10!}{3! \\cdot 2! \\cdot 2!} $$\n接下来，我们计算阶乘的值：\n$10! = 10 \\times 9 \\times 8 \\times 7 \\times 6 \\times 5 \\times 4 \\times 3 \\times 2 \\times 1 = 3,628,800$\n$3! = 3 \\times 2 \\times 1 = 6$\n$2! = 2 \\times 1 = 2$\n\n现在，我们将这些数值代回我们的公式中：\n$$ \\text{计划数量} = \\frac{3,628,800}{6 \\cdot 2 \\cdot 2} = \\frac{3,628,800}{24} $$\n最后，我们进行除法运算得到结果：\n$$ \\frac{3,628,800}{24} = 151,200 $$\n因此，可以为该机器人编写的不同的日常计划共有151,200个。", "answer": "$$\\boxed{151200}$$", "id": "1386528"}, {"introduction": "许多现实世界中的排列问题都包含特定约束，例如某些项目不能相邻。本练习将介绍一种巧妙的解题策略——“插空法”，用于解决此类问题。通过首先排列无限制的元素，为受限元素创造可放置的“空位”，你将学会一种处理复杂约束条件的强大技巧。[@problem_id:1391267]", "problem": "一种专门的网络协议被设计用于在两个节点之间传输一个包序列。每个序列由固定数量的两种不同类型的包组成：数据包和控制包。在本分析中，所有数据包均视为相同，所有控制包也均视为相同。\n\n为确保网络稳定性，该协议在一个基本约束下运行：任意两个控制包不能相邻传输。指定批次中的所有包都必须被传输。\n\n考虑一个包含恰好18个数据包和6个控制包的批次。请确定根据此协议可以形成的不同且有效的传输序列的总数。", "solution": "设 $D$ 表示一个数据包，$C$ 表示一个控制包。所有 $D$ 都是相同的，所有 $C$ 也都是相同的。限制条件是任意两个 $C$ 不能相邻。\n\n首先，将18个数据包 $D$ 排成一列。这样就产生了 $18+1=19$ 个可用于放置控制包的空隙：一个在第一个 $D$ 之前，一个在最后一个 $D$ 之后，以及每对相邻的 $D$ 之间各有一个。在任何一个空隙中最多放置一个 $C$，即可保证任意两个 $C$ 都不相邻。反之，任何没有相邻 $C$ 的有效序列，都唯一对应于从这19个空隙中选择6个来放置 $C$ 的一种方案。\n\n因此，有效序列的总数等于从19个可用空隙中选择6个的方法数：\n$$\n\\text{序列数}=\\binom{19}{6}\n$$\n计算可得，\n$$\n\\binom{19}{6}=\\frac{19!}{6!\\,13!}=\\frac{19\\cdot 18\\cdot 17\\cdot 16\\cdot 15\\cdot 14}{6\\cdot 5\\cdot 4\\cdot 3\\cdot 2\\cdot 1}=27132.\n$$", "answer": "$$\\boxed{27132}$$", "id": "1391267"}, {"introduction": "计数原理是概率论的基石。这个问题挑战你将理解从简单的列举可能性，提升到计算随机排列中特定事件发生的概率。通过分析数据包传输序列，你将探索如何运用组合计数来解决更抽象的概率问题，深化对这两个数学分支之间联系的认识。[@problem_id:1379157]", "problem": "在一个数据通信系统中，要发送一个由 $N$ 个数据包组成的流。该流由 $K$ 种不同类型的数据包组成。对于每种类型 $k$（其中 $k=1, 2, \\dots, K$），有 $n_k$ 个相同的数据包。数据包总数为 $N = \\sum_{k=1}^{K} n_k$。在发送前，这些数据包存储在一个缓冲区中，该缓冲区会打乱它们的顺序，形成一个原始数据包多重集的一个均匀随机排列。在打乱后的序列中，第一个数据包和最后一个数据包属于同一类型的概率是多少？请用一个关于 $N$ 和各 $n_k$（$k=1, \\dots, K$）的单解析闭式表达式来表示你的答案。", "solution": "假设 $N \\geq 2$，这样第一个和最后一个位置都存在且不同。设第一个数据包类型为 $k$ 的事件记为 $F=k$，最后一个数据包类型为 $k$ 的事件记为 $L=k$。根据全概率公式，\n$$\n\\Pr(\\text{first and last are the same type})=\\sum_{k=1}^{K}\\Pr(F=k)\\Pr(L=k\\mid F=k).\n$$\n因为打乱后的序列是该多重集的一个均匀随机排列，所以第一个数据包类型为 $k$ 的概率是\n$$\n\\Pr(F=k)=\\frac{n_{k}}{N}.\n$$\n在 $F=k$ 的条件下，剩余的多重集总共有 $N-1$ 个数据包，其中有 $n_k-1$ 个属于类型 $k$。最后一个位置在这些剩余的数据包中是均匀分布的，所以\n$$\n\\Pr(L=k\\mid F=k)=\\frac{n_{k}-1}{N-1}.\n$$\n因此，\n$$\n\\Pr(\\text{first and last are the same type})=\\sum_{k=1}^{K}\\frac{n_{k}}{N}\\cdot\\frac{n_{k}-1}{N-1}=\\frac{\\sum_{k=1}^{K}n_{k}(n_{k}-1)}{N(N-1)}.\n$$\n这也可以解释为，由相同类型占据的不同位置的有序对数量 $\\sum_{k}n_{k}(n_{k}-1)$，与不同位置的总有序对数量 $N(N-1)$ 之比。为完整起见，如果 $N=1$，则第一个和最后一个数据包是同一个，概率为 $1$，这与事件的直接解释相符。", "answer": "$$\\boxed{\\frac{\\sum_{k=1}^{K} n_{k}\\left(n_{k}-1\\right)}{N\\left(N-1\\right)}}$$", "id": "1379157"}]}