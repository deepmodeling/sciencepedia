{"hands_on_practices": [{"introduction": "第一个实践将带我们深入微分几何的核心。我们将看到一个测地三角形的角亏——这个看似全局的几何性质——是如何源于空间局部的“褶皱”的，而这些“褶皱”被度量张量所捕捉。通过在法坐标系下对度量张量进行泰勒展开 [@problem_id:3038090]，你将推导出角亏与高斯曲率之间的一阶关系，这实际上证明了高斯-博内定理的局部形式，从而对曲率的内在含义获得深刻的理解。", "problem": "设 $\\left(M,g\\right)$ 是一个二维黎曼流形，且 $p \\in M$。选取以 $p$ 为中心的正规坐标 $\\left(x^{1},x^{2}\\right)$，使得 $g_{ij}(p)=\\delta_{ij}$ 且 Christoffel 符号在 $p$ 点为零。在这些坐标下，度量具有泰勒展开式\n$$\ng_{ij}(x)=\\delta_{ij}-\\frac{1}{3}R_{ikjl}(p)\\,x^{k}x^{l}+O\\!\\left(|x|^{3}\\right),\n$$\n其中 $R_{ikjl}$ 是黎曼曲率张量，且 $|x|^{2}=(x^{1})^{2}+(x^{2})^{2}$。考虑一个小的测地三角形 $T$，其顶点为 $p, q, r$ 点，其中 $q$ 和 $r$ 位于坐标轴上：对于小的正参数 $a$ 和 $b$，$q$ 的坐标为 $(a,0)$，$r$ 的坐标为 $(0,b)$。$T$ 的每条边是连接相应顶点对的测地线段。定义 $T$ 的角亏为 $\\Delta(T)=\\alpha+\\beta+\\gamma-\\pi$，其中 $\\alpha,\\beta,\\gamma$ 分别是 $T$ 在 $p,q,r$ 点的内角。\n\n从正规坐标下 $g_{ij}$ 的展开式以及黎曼流形上角度和面积的基本定义出发，推导由曲率引起的对 $\\Delta(T)$ 的第一个非平凡贡献，到 $a$ 和 $b$ 的主阶项。将你的最终答案以弧度表示，形式为一个关于 $p$ 点高斯曲率 $K(p)$ 以及参数 $a$ 和 $b$ 的闭式解析表达式。无需数值近似。", "solution": "问题要求基于度量张量在正规坐标下的泰勒展开，求出小测地三角形 $T$ 的角亏 $\\Delta(T)$ 的主阶项。角亏定义为 $\\Delta(T) = \\alpha+\\beta+\\gamma-\\pi$，其中 $\\alpha$, $\\beta$, 和 $\\gamma$ 是三角形的内角。\n\n黎曼几何中的一个基本结果，即 Gauss-Bonnet 定理，将测地三角形的角亏与高斯曲率 $K$ 在该三角形面积上的积分直接联系起来。对于二维流形上的一个测地三角形 $T$，该定理表述为：\n$$ \\alpha + \\beta + \\gamma - \\pi = \\iint_T K \\, dA $$\n其中 $dA$ 是流形上的面积元。因此，我们的任务是计算右侧的积分，到小参数 $a$ 和 $b$ 的主阶。\n\n计算过程分几步进行：\n1.  将高斯曲率 $K$ 和面积元 $dA$ 与度量张量 $g_{ij}$ 联系起来。\n2.  使用给定的 $g_{ij}$ 在正规坐标下的泰勒展开，求出在 $p$ 点附近的 $K$ 和 $dA$ 的表达式。\n3.  对小测地三角形 $T$ 上的积分进行近似。\n\n设 $(x^1, x^2)$ 是以 $p$ 为中心的正规坐标。三角形的顶点是位于 $(0,0)$ 的 $p$，位于 $(a,0)$ 的 $q$，和位于 $(0,b)$ 的 $r$。\n\n首先，我们用 $p$ 点的黎曼张量分量来确定高斯曲率 $K(p)$。在二维情形下，黎曼张量的一般公式是 $R_{ikjl} = K(g_{il}g_{kj} - g_{ij}g_{kl})$。在 $p$ 点的正规坐标下，我们有 $g_{ij}(p) = \\delta_{ij}$。计算在 $p$ 点的分量 $R_{1212}$ 得到：\n$$ R_{1212}(p) = K(p) \\left( g_{11}(p)g_{22}(p) - g_{12}(p)g_{21}(p) \\right) = K(p) \\left( \\delta_{11}\\delta_{22} - \\delta_{12}\\delta_{21} \\right) = K(p)(1 \\cdot 1 - 0 \\cdot 0) = K(p) $$\n\n接下来，我们求面积元 $dA$。在局部坐标下，$dA = \\sqrt{\\det(g_{ij})} \\, dx^1 dx^2$。我们需要使用给定的泰勒展开来计算 $\\det(g_{ij})$：\n$$ g_{ij}(x) = \\delta_{ij} - \\frac{1}{3}R_{ikjl}(p) x^k x^l + O(|x|^3) $$\n度量张量的分量是：\n$g_{11}(x) = 1 - \\frac{1}{3}R_{1k1l}(p)x^k x^l + \\dots = 1 - \\frac{1}{3}R_{1212}(p)(x^2)^2 + \\dots = 1 - \\frac{1}{3}K(p)(x^2)^2 + O(|x|^3)$。\n$g_{22}(x) = 1 - \\frac{1}{3}R_{2k2l}(p)x^k x^l + \\dots = 1 - \\frac{1}{3}R_{2121}(p)(x^1)^2 + \\dots = 1 - \\frac{1}{3}K(p)(x^1)^2 + O(|x|^3)$。\n$g_{12}(x) = -\\frac{1}{3}R_{1k2l}(p)x^k x^l + \\dots = -\\frac{1}{3}(R_{1121}(x^1)^2 + (R_{1122}+R_{1221})x^1x^2 + R_{1222}(x^2)^2) + \\dots$。\n利用黎曼张量的对称性，$R_{1121}=0$, $R_{1222}=0$, 且 $R_{1122} + R_{1221} = -R_{1212} + R_{1212} = 0$。因此，$g_{12}(x) = O(|x|^3)$。\n\n度量的行列式是：\n$$ \\det(g(x)) = g_{11}(x)g_{22}(x) - (g_{12}(x))^2 $$\n$$ \\det(g(x)) = \\left(1 - \\frac{1}{3}K(p)(x^2)^2\\right)\\left(1 - \\frac{1}{3}K(p)(x^1)^2\\right) + O(|x|^4) $$\n$$ \\det(g(x)) = 1 - \\frac{1}{3}K(p)\\left((x^1)^2 + (x^2)^2\\right) + O(|x|^4) $$\n使用泰勒展开 $\\sqrt{1+u} \\approx 1 + u/2$ 求平方根：\n$$ \\sqrt{\\det(g(x))} = 1 - \\frac{1}{6}K(p)\\left((x^1)^2 + (x^2)^2\\right) + O(|x|^4) $$\n\n现在我们可以写出角亏的积分：\n$$ \\Delta(T) = \\iint_T K(x) \\sqrt{\\det(g(x))} \\, dx^1 dx^2 $$\n积分是在由连接 $p,q,r$ 的测地线所包围的区域 $T$ 上进行的。由于 $a$ 和 $b$ 很小，该三角形也很小且位于 $p$ 附近。我们可以为求主阶项做如下近似：\n1.  曲率 $K(x)$ 可以用其在 $p$ 点的值来近似，即 $K(x) \\approx K(p)$。修正项的量级为 $|x|$，积分后将产生 $a$ 和 $b$ 的更高阶项。\n2.  面积元因子 $\\sqrt{\\det(g(x))}$ 可以近似为 $1$。修正项的量级为 $|x|^2$，这也会在最终结果中产生更高阶项。\n3.  积分区域，即测地三角形 $T$，可以用坐标平面上顶点为 $(0,0), (a,0)$ 和 $(0,b)$ 的欧几里得三角形 $T_E$ 来近似。这是因为在正规坐标中，通过原点 $p$ 的测地线就是坐标轴，所以 $T$ 的两条边是直线段。第三条边，即从 $q$ 到 $r$ 的测地线，其与直线的偏离量是关于 $a$ 和 $b$ 的高阶项，因此对积分面积的修正也是高阶的。\n\n结合这些近似，我们计算积分的主阶项：\n$$ \\Delta(T) \\approx \\iint_{T_E} K(p) \\cdot 1 \\, dx^1 dx^2 = K(p) \\iint_{T_E} dx^1 dx^2 $$\n积分 $\\iint_{T_E} dx^1 dx^2$ 就是欧几里得三角形 $T_E$ 的面积。该面积由以下公式给出：\n$$ \\text{Area}(T_E) = \\frac{1}{2} \\times \\text{base} \\times \\text{height} = \\frac{1}{2}ab $$\n因此，角亏的第一个非平凡贡献，在 $a$ 和 $b$ 的主阶上，是：\n$$ \\Delta(T) \\approx K(p) \\left(\\frac{1}{2}ab\\right) $$\n该项的量级为 $O(ab)$。任何修正，无论是来自被积函数($K(x)\\sqrt{\\det g}$)的泰勒展开，还是来自积分区域的变形，都将涉及小参数 $a$ 和 $b$ 的更高次幂（例如，$O(a^3b)$，$O(ab^3)$），因此对于主阶结果而言可以忽略不计。\n最终的表达式是 Gauss-Bonnet 定理的局部版本，通常称为 Bertrand-Diguet-Puiseux 定理。", "answer": "$$\\boxed{\\frac{1}{2}K(p)ab}$$", "id": "3038090"}, {"introduction": "在建立了曲率与角亏之间的局部联系之后，我们现在转向一个更具普遍性的全局视角，运用完整的高斯-博内定理。这个实践提出了一个并非所有边都是测地线的“三角形”情景 [@problem_id:3038120]。通过将该定理应用于欧几里得平面中这个具体且易于可视化的案例，你将能分离并领会边界的测地曲率所扮演的角色，这是理解任意边界区域几何学的关键一环。", "problem": "考虑具有标准黎曼度量（平坦）的欧几里得平面 $\\mathbb{R}^2$。令 $C$ 为以原点为中心、半径为 $r0$ 的圆。固定一个角度 $\\Phi$，其中 $0  \\Phi  \\pi$，并令 $p$ 和 $q$ 分别为 $C$ 上极角为 $0$ 和 $\\Phi$ 的点。定义一个曲线三角形 $\\Delta$，其边界由三部分组成：从原点到 $p$ 的直线测地线段，从原点到 $q$ 的直线测地线段，以及 $C$ 上从 $p$ 到 $q$ 的逆时针圆弧。该圆弧边的测地曲率 $k_g$ 为常数，其弧长为 $L$。\n\n使用高斯-博内定理（在问题陈述中不写出其任何公式），用 $k_g$ 和 $L$ 来确定 $\\Delta$ 的内角和。用弧度表示你的最终答案，并给出精确的解析表达式（无数值近似）。", "solution": "问题陈述经评估有效。它自成一体，在黎曼几何中有科学依据，且提法恰当。因此，我们可以着手求解。\n\n该问题要求使用高斯-博内定理来确定欧几里得平面 $\\mathbb{R}^2$ 中一个特定曲线三角形 $\\Delta$ 的内角和。令 $S$ 为三角形 $\\Delta$ 的内角和。\n\n对于一个带边界的紧致二维黎曼流形，或此类流形的一个紧致区域 $R$，高斯-博内定理将其几何与拓扑联系起来。该定理的公式为：\n$$ \\int_{R} K \\, dA + \\int_{\\partial R} k_g \\, ds + \\sum_{i} \\alpha_i = 2\\pi \\chi(R) $$\n其中：\n- $R$ 是紧致区域，在本例中即为我们的曲线三角形 $\\Delta$。\n- $K$ 是区域 $R$ 内流形的高斯曲率。\n- $dA$ 是流形上的面积元。\n- $\\partial R$ 是区域 $R$ 的边界，它是分段光滑的。\n- $k_g$ 是边界 $\\partial R$ 的测地曲率。\n- $ds$ 是沿边界的弧长元。\n- $\\sum_i \\alpha_i$ 是边界顶点（角点）处外角之和。\n- $\\chi(R)$ 是区域 $R$ 的欧拉示性数。\n\n我们将对给定的三角形 $\\Delta$ 计算高斯-博内定理中的每一项。\n\n1.  **高斯曲率积分**：区域 $\\Delta$ 位于配备了标准平坦度量的欧几里得平面 $\\mathbb{R}^2$ 中。对于平坦流形，高斯曲率 $K$ 处处为零。因此，第一项为：\n    $$ \\int_{\\Delta} K \\, dA = \\int_{\\Delta} 0 \\, dA = 0 $$\n\n2.  **欧拉示性数**：区域 $\\Delta$ 是平面中的一个单连通闭区域，拓扑上等价于一个圆盘。对于任何同胚于圆盘的区域，其欧拉示性数 $\\chi(\\Delta)$ 为 $1$。因此，定理的右侧为 $2\\pi \\chi(\\Delta) = 2\\pi(1) = 2\\pi$。\n\n3.  **测地曲率的边界积分**：边界 $\\partial\\Delta$ 由三段组成：\n    - 从原点 $O$ 到点 $p$ 的直线段。\n    - 从原点 $O$ 到点 $q$ 的直线段。\n    - 从 $p$ 到 $q$ 的圆弧。\n\n    在欧几里得平面中，直线是测地线。根据定义，测地线的测地曲率为零。因此，沿两条直线段边界的测地曲率为 $0$。在这些段上 $k_g$ 的积分为零。\n\n    第三段是测地曲率为常数 $k_g$、总弧长为 $L$ 的圆弧，如问题陈述中所给。在该圆弧上的测地曲率积分为：\n    $$ \\int_{\\text{arc}} k_g \\, ds = k_g \\int_{\\text{arc}} ds = k_g L $$\n    总边界积分是三段积分之和：\n    $$ \\int_{\\partial\\Delta} k_g \\, ds = 0 + 0 + k_g L = k_g L $$\n\n4.  **外角和**：令三个顶点（原点 $O$、点 $p$ 和点 $q$）处的内角分别为 $\\theta_O$、$\\theta_p$ 和 $\\theta_q$。这些内角的和是我们所求的量：$S = \\theta_O + \\theta_p + \\theta_q$。\n\n    顶点处的外角 $\\alpha_i$ 定义为转角，即 $\\pi$ 减去对应的内角 $\\theta_i$。所以，$\\alpha_i = \\pi - \\theta_i$。外角之和为：\n    $$ \\sum_i \\alpha_i = (\\pi - \\theta_O) + (\\pi - \\theta_p) + (\\pi - \\theta_q) = 3\\pi - (\\theta_O + \\theta_p + \\theta_q) = 3\\pi - S $$\n\n现在，我们将这些分量代回高斯-博内公式：\n$$ 0 + k_g L + (3\\pi - S) = 2\\pi $$\n我们的目标是解出内角和 $S$。整理方程：\n$$ k_g L + 3\\pi - 2\\pi = S $$\n$$ S = \\pi + k_g L $$\n这个表达式用指定的量 $k_g$ 和 $L$ 给出了曲线三角形 $\\Delta$ 的内角和。结果按要求以弧度为单位。\n\n值得注意的是，为了验证（尽管解答并不需要），在欧几里得平面中，半径为 $r$ 的圆的测地曲率 $k_g = 1/r$。张角为 $\\Phi$ 的扇形的弧长 $L=r\\Phi$。因此，乘积 $k_g L = (1/r)(r\\Phi) = \\Phi$。原点处的内角是 $\\theta_O = \\Phi$。另外两个内角，即径向线与圆弧相交处的角，均为 $\\pi/2$，因为半径在交点处与圆的切线垂直。因此，内角和为 $S = \\Phi + \\pi/2 + \\pi/2 = \\Phi + \\pi$。这与我们推导出的结果 $S = k_g L + \\pi$ 相符，证实了其正确性。", "answer": "$$\\boxed{\\pi + k_g L}$$", "id": "3038120"}, {"introduction": "当理论可以被计算时，它才真正焕发生机。最后一个实践旨在通过一项构建数值工具的任务来弥合抽象公式与可触摸结果之间的鸿沟 [@problem_id:3038073]。你将通过对高斯曲率进行数值积分来实现一个估算角亏的算法，将基本方程 $\\delta = \\int K dA$ 转化为代码。这种计算方法使你能够“测量”曲率在不同几何世界（从球面到双曲平面）中的效应，从而对这些概念建立起强大而直观的感知。", "problem": "您的任务是实现一个数值估算器，通过在二维黎曼流形的测地三角形区域上对高斯曲率 $K$ 进行积分，来计算该三角形的角亏 $\\delta$。设计必须遵循基本原理：使用适用于测地三角形的 Gauss–Bonnet 定理以及从度量导出的局部面积元。避免使用捷径；通过对三角形进行网格剖分并对每个单元的贡献求和，来仔细构建估算器。\n\n基本和核心定义：\n- 令 $(M,g)$ 为一个二维黎曼流形，其度量张量为 $g$。高斯曲率 $K$ 是由 $g$ 决定的内蕴曲率。曲面面积元 $dA$ 由 $g$ 决定。\n- 对于 $(M,g)$ 中的一个具有测地边的测地三角形 $\\Delta$，Gauss–Bonnet 定理表明其角亏 $\\delta$ 等于 $K$ 在 $\\Delta$ 上的面积分，即 $\\delta$ 等于 $\\int_{\\Delta} K\\,dA$，因为每条边的测地曲率均为零，只有顶角对 $\\delta$ 有贡献。此关系是设计数值估算器所依据的基本原则。\n- 数值估算器必须通过用小单元构成的网格覆盖三角形，在每个单元上近似 $K$ 和 $dA$，并对各部分贡献求和来近似 $\\delta$。\n\n算法要求：\n- 近似 $\\delta \\approx \\sum_{i} K(p_{i})\\,\\Delta A_{i}$，其中 $p_{i}$ 是单元 $i$ 中的一个代表点（例如，单元中点），$\\Delta A_{i}$ 是由度量导出的该单元的面积。\n\n您的程序必须为以下模型和测地三角形参数集实现此估算器。对于每种情况，使用指定的度量和面积元，并以弧度为单位生成角亏 $\\delta$。将区域离散化为均匀网格，并对每个单元使用中点采样。\n\n模型：\n1. 欧几里得平面，具有标准度量 $g = dx^{2} + dy^{2}$，其高斯曲率为 $K = 0$，面积元为 $dA = dx\\,dy$。\n2. 半径为 $R$ 的球面，使用球坐标 $(\\theta,\\phi)$，其中 $\\theta \\in [0,\\pi]$ 是余纬，$\\phi \\in [0,2\\pi)$ 是经度。该度量的面积元为 $dA = R^{2}\\sin\\theta\\,d\\theta\\,d\\phi$，高斯曲率为常数 $K = 1/R^{2}$。\n3. Poincaré 圆盘模型中的双曲平面，坐标 $(x,y)$ 位于单位圆盘 $x^{2}+y^{2}  1$ 内部，度量为 $ds^{2} = \\frac{4(dx^{2}+dy^{2})}{(1 - x^{2} - y^{2})^{2}}$。面积元为 $dA = \\frac{4}{(1 - r^{2})^{2}}\\,dx\\,dy$，其中 $r^{2} = x^{2}+y^{2}$，高斯曲率为常数 $K = -1$。\n\n测地三角形和网格规格：\n- 情况 A（欧几里得平面，理想情况）：顶点为 $(0,0)$, $(1,0)$, $(0,1)$ 的三角形。该三角形由直线段界定，这些直线段是欧几里得平面中的测地线。在边界框 $[0,1]\\times[0,1]$ 上使用均匀矩形网格，如果单元的中点 $(x,y)$ 满足 $x \\ge 0$, $y \\ge 0$ 和 $x + y \\le 1$，则包含该单元。网格分辨率使用 $N_{x} = 400$ 和 $N_{y} = 400$。\n- 情况 B（半径为 $R=1$ 的球面，大直角测地三角形）：由子午线 $\\phi = 0$ 和 $\\phi = \\pi/2$ 以及赤道 $\\theta = \\pi/2$ 界定的球面楔形。第三个顶点在北极 $\\theta=0$。所有三条边界都是大圆，因此是测地线。在球坐标中的矩形区域 $\\theta \\in [0,\\pi/2]$，$\\phi \\in [0,\\pi/2]$ 上进行积分。使用 $N_{\\theta} = 600$ 和 $N_{\\phi} = 600$。\n- 情况 C（半径为 $R=1$ 的球面，小直角测地三角形）：由子午线 $\\phi = 0$ 和 $\\phi = 0.3$ 以及赤道 $\\theta = \\pi/2$ 界定的球面楔形。在矩形区域 $\\theta \\in [0,\\pi/2]$，$\\phi \\in [0,0.3]$ 上进行积分。使用 $N_{\\theta} = 600$ 和 $N_{\\phi} = 600$。\n- 情况 D（半径为 $R=2$ 的球面，中等大小直角测地三角形）：由子午线 $\\phi = 0$ 和 $\\phi = \\pi/3$ 以及赤道 $\\theta = \\pi/2$ 界定的球面楔形。在矩形区域 $\\theta \\in [0,\\pi/2]$，$\\phi \\in [0,\\pi/3]$ 上进行积分。使用 $N_{\\theta} = 600$ 和 $N_{\\phi} = 600$。\n- 情况 E（Poincaré 圆盘中的双曲平面，曲边测地三角形）：设两条边是沿坐标轴 $x=0$ 和 $y=0$ 的直径；第三条边是与单位圆正交的圆，其圆心为 $\\mathbf{c} = (1.2,1.2)$，半径 $r_{\\mathrm{circ}}$ 由正交性条件 $r_{\\mathrm{circ}}^{2} = \\|\\mathbf{c}\\|^{2} - 1$ 决定。三角形的内部是满足 $x \\ge 0$, $y \\ge 0$, $(x - c_{x})^{2} + (y - c_{y})^{2} \\le r_{\\mathrm{circ}}^{2}$ 和 $x^{2} + y^{2}  1$ 的点集。在正方形 $[0,1]\\times[0,1]$ 上使用网格分辨率 $N_{x} = 500$, $N_{y} = 500$ 进行积分，但只包括那些中点既位于单位圆盘内又位于指定的测地三角形区域内的单元。使用 Poincaré 面积元和 $K=-1$。\n\n角度单位：\n- 所有角亏 $\\delta$ 均以弧度报告。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，顺序为 $[\\delta_{\\mathrm{A}},\\delta_{\\mathrm{B}},\\delta_{\\mathrm{C}},\\delta_{\\mathrm{D}},\\delta_{\\mathrm{E}}]$，其中每个条目都是一个浮点数。例如，一个有效的输出格式是“[0.0,1.5707963267948966,0.3,1.0471975511965976,-0.4123456789]”。\n\n测试套件覆盖说明：\n- 情况 A 验证零曲率的平坦情况。\n- 情况 B–D 验证具有不同角宽度和不同半径 $R$ 的球面楔形的正恒定曲率和缩放情况。\n- 情况 C 作为具有小角亏的小面积边缘情况。\n- 情况 E 测试了负曲率和非平凡的测地边界（圆弧），在面积元不均匀的弯曲度量中检验估算器。\n\n您的实现必须是完全自包含的，并且不需要任何输入。在每个网格单元内使用中点采样。通过为每个模型使用正确的面积元和曲率，并逐个单元地对贡献求和，来确保科学真实性。所有计算出的 $\\delta$ 值必须是弧度单位的浮点数。", "solution": "该问题要求在一个二维黎曼流形 $(M, g)$ 上，为一个测地三角形 $\\Delta$ 的角亏 $\\delta$ 实现一个数值估算器。该设计基于 Gauss–Bonnet 定理。\n\n**问题验证**\n\n**步骤 1：提取已知信息**\n\n- **基本原理**：对于一个二维黎曼流形上的测地三角形 $\\Delta$，其角亏 $\\delta$ 由高斯曲率 $K$ 在该三角形面积上的积分给出：$\\delta = \\int_{\\Delta} K \\, dA$。\n- **数值方法**：该积分将通过对网格单元的求和来近似：$\\delta \\approx \\sum_{i} K(p_{i})\\,\\Delta A_{i}$，使用中点采样（$p_i$ 是单元中点）和由度量导出的每个单元的面积 $\\Delta A_i$。\n\n- **模型 1：欧几里得平面**\n  - 度量：$g = dx^{2} + dy^{2}$\n  - 高斯曲率：$K = 0$\n  - 面积元：$dA = dx\\,dy$\n\n- **模型 2：球面**\n  - 坐标：$(\\theta, \\phi)$，其中 $\\theta \\in [0,\\pi]$ 且 $\\phi \\in [0,2\\pi)$\n  - 半径：$R$\n  - 高斯曲率：$K = 1/R^{2}$\n  - 面积元：$dA = R^{2}\\sin\\theta\\,d\\theta\\,d\\phi$\n\n- **模型 3：双曲平面（Poincaré 圆盘）**\n  - 坐标：$(x,y)$，其中 $x^{2}+y^{2}  1$\n  - 度量：$ds^{2} = \\frac{4(dx^{2}+dy^{2})}{(1 - x^{2} - y^{2})^{2}}$\n  - 高斯曲率：$K = -1$\n  - 面积元：$dA = \\frac{4}{(1 - r^{2})^{2}}\\,dx\\,dy$，其中 $r^{2} = x^{2}+y^{2}$\n\n- **情况 A（欧几里得）**：\n  - 三角形顶点：$(0,0)$, $(1,0)$, $(0,1)$。\n  - 区域：$x \\ge 0$, $y \\ge 0$ 且 $x + y \\le 1$。\n  - 网格：在 $[0,1]\\times[0,1]$ 上的均匀网格，分辨率为 $N_{x} = 400$，$N_{y} = 400$。\n\n- **情况 B（球面）**：\n  - 半径：$R=1$。\n  - 三角形（球面楔形）区域：$\\theta \\in [0,\\pi/2]$，$\\phi \\in [0,\\pi/2]$。\n  - 网格：$N_{\\theta} = 600$，$N_{\\phi} = 600$。\n\n- **情况 C（球面）**：\n  - 半径：$R=1$。\n  - 三角形（球面楔形）区域：$\\theta \\in [0,\\pi/2]$，$\\phi \\in [0,0.3]$。\n  - 网格：$N_{\\theta} = 600$，$N_{\\phi} = 600$。\n\n- **情况 D（球面）**：\n  - 半径：$R=2$。\n  - 三角形（球面楔形）区域：$\\theta \\in [0,\\pi/2]$，$\\phi \\in [0,\\pi/3]$。\n  - 网格：$N_{\\theta} = 600$，$N_{\\phi} = 600$。\n\n- **情况 E（双曲平面）**：\n  - 区域：$x \\ge 0$, $y \\ge 0$, $(x - c_{x})^{2} + (y - c_{y})^{2} \\le r_{\\mathrm{circ}}^{2}$ 且 $x^{2} + y^{2}  1$。\n  - 测地圆圆心：$\\mathbf{c} = (1.2,1.2)$。\n  - 正交性条件：$r_{\\mathrm{circ}}^{2} = \\|\\mathbf{c}\\|^{2} - 1$。\n  - 网格：在 $[0,1]\\times[0,1]$ 上的均匀网格，分辨率为 $N_{x} = 500$，$N_{y} = 500$。\n\n- **输出要求**：一个单行的、以逗号分隔的弧度单位浮点数列表：$[\\delta_{\\mathrm{A}},\\delta_{\\mathrm{B}},\\delta_{\\mathrm{C}},\\delta_{\\mathrm{D}},\\delta_{\\mathrm{E}}]$。\n\n**步骤 2：使用提取的已知信息进行验证**\n该问题具有科学依据、是良定的且客观的。它基于微分几何的基本原理（Gauss-Bonnet 定理）和标准数值方法（使用中点法则的黎曼和），提供了一个清晰、可形式化的任务。所有模型（欧几里得平面、球面、Poincaré 圆盘）及其相关曲率和面积元都是标准的且陈述正确。每种情况都提供了所有必要的数据，包括积分域的精确定义和数值网格的参数。该问题是自包含的、一致的，并且没有任何说明中列出的导致问题无效的缺陷。\n\n**步骤 3：结论与行动**\n该问题是**有效的**。将开发一个解决方案。\n\n**解决方案推导**\n\n任务的核心是为五个不同的情况数值计算积分 $\\delta = \\int_{\\Delta} K \\, dA$。我们将对积分域进行离散化，并使用中点法则通过黎曼和来近似该积分。\n\n数值近似的通用公式为：\n$$\n\\delta \\approx \\sum_{i} K(p_i) \\Delta A_i\n$$\n其中求和遍及所有中点 $p_i$ 位于三角形 $\\Delta$ 内的单元 $i$。$\\Delta A_i$ 是单元 $i$ 的面积。\n\n**情况 A：欧几里得平面**\n欧几里得平面的高斯曲率为 $K=0$。三角形由顶点 $(0,0)$, $(1,0)$ 和 $(0,1)$ 定义。角亏由下式给出：\n$$\n\\delta_A = \\int_{\\Delta_A} 0 \\, dA = 0\n$$\n数值估算器也将得出 $0$，因为和中的每一项 $K(p_i)$ 均为 $0$。实现将简单地计算这个值，作为基线验证。\n\n**情况 B、C、D：半径为 $R$ 的球面**\n对于半径为 $R$ 的球面，高斯曲率为常数 $K = 1/R^2$，球坐标 $(\\theta, \\phi)$ 中的面积元为 $dA = R^2 \\sin\\theta \\, d\\theta \\, d\\phi$。乘积 $K \\, dA$ 可显著简化：\n$$\nK \\, dA = \\left(\\frac{1}{R^2}\\right) (R^2 \\sin\\theta \\, d\\theta \\, d\\phi) = \\sin\\theta \\, d\\theta \\, d\\phi\n$$\n注意结果与半径 $R$ 无关。角亏仅取决于三角形所对的立体角。\n指定的三角形是由 $(\\theta, \\phi)$ 坐标中的矩形区域定义的球面楔形：$\\theta \\in [0, \\pi/2]$ 和 $\\phi \\in [0, \\phi_{max}]$。该积分是可分离的：\n$$\n\\delta = \\int_0^{\\phi_{max}} \\int_0^{\\pi/2} \\sin\\theta \\, d\\theta \\, d\\phi = \\left(\\int_0^{\\phi_{max}} d\\phi\\right) \\left(\\int_0^{\\pi/2} \\sin\\theta \\, d\\theta\\right) = \\phi_{max} [-\\cos\\theta]_0^{\\pi/2} = \\phi_{max}(0 - (-1)) = \\phi_{max}\n$$\n精确的角亏为：\n- 情况 B：$R=1$, $\\phi_{max} = \\pi/2$。$\\delta_B = \\pi/2$。\n- 情况 C：$R=1$, $\\phi_{max} = 0.3$。$\\delta_C = 0.3$。\n- 情况 D：$R=2$, $\\phi_{max} = \\pi/3$。$\\delta_D = \\pi/3$。\n\n这些情况的数值估算器将在 $(\\theta, \\phi)$ 空间中的网格上求和。网格分辨率为 $N_\\theta$ 和 $N_\\phi$。单元尺寸为 $d\\theta = (\\pi/2)/N_\\theta$ 和 $d\\phi = \\phi_{max}/N_\\phi$。单元 $(i, j)$ 的中点是 $(\\theta_{m,i}, \\phi_{m,j})$，其中 $\\theta_{m,i} = (i+0.5)d\\theta$ 和 $\\phi_{m,j} = (j+0.5)d\\phi$。\n每个单元的贡献为 $K(p_{ij}) \\Delta A_{ij} = \\sin(\\theta_{m,i}) d\\theta d\\phi$。\n总角亏近似为：\n$$\n\\delta \\approx \\sum_{i=0}^{N_\\theta-1} \\sum_{j=0}^{N_\\phi-1} \\sin(\\theta_{m,i}) \\, d\\theta \\, d\\phi = (N_\\phi \\, d\\phi) \\left( \\sum_{i=0}^{N_\\theta-1} \\sin(\\theta_{m,i}) \\, d\\theta \\right) = \\phi_{max} \\sum_{i=0}^{N_\\theta-1} \\sin\\left(\\left(i+\\frac{1}{2}\\right)d\\theta\\right) d\\theta\n$$\n该公式将针对情况 B、C 和 D 及其各自的参数进行实现。\n\n**情况 E：双曲平面（Poincaré 圆盘）**\n高斯曲率为常数 $K = -1$。笛卡尔坐标 $(x,y)$ 中的面积元为 $dA = \\frac{4}{(1 - r^2)^2} \\, dx \\, dy$，其中 $r^2 = x^2+y^2$。\n角亏为 $\\delta_E = \\int_{\\Delta_E} K \\, dA = - \\int_{\\Delta_E} \\frac{4}{(1-r^2)^2} \\, dx \\, dy$。这等价于该三角形的双曲面积的负值。\n\n积分域 $\\Delta_E$ 由点 $(x,y)$ 的四个条件定义：\n1. $x \\ge 0$\n2. $y \\ge 0$\n3. $(x - c_x)^2 + (y - c_y)^2 \\le r_{\\mathrm{circ}}^2$，其中 $c_x = 1.2$，$c_y = 1.2$，且 $r_{\\mathrm{circ}}^2 = c_x^2 + c_y^2 - 1 = 1.2^2 + 1.2^2 - 1 = 1.44 + 1.44 - 1 = 1.88$。\n4. $x^2 + y^2  1$（在 Poincaré 圆盘内部）。\n\n数值估算器将边界框 $[0,1] \\times [0,1]$ 剖分为 $N_x \\times N_y$ 个单元，其中 $N_x=500$ 且 $N_y=500$。单元尺寸为 $dx=1/N_x$ 和 $dy=1/N_y$。单元 $(i,j)$ 的中点为 $(x_{m,i}, y_{m,j})$，其中 $x_{m,i} = (i+0.5)dx$ 且 $y_{m,j} = (j+0.5)dy$。\n\n对于每个单元，我们检查其中心点 $(x_m, y_m)$ 是否满足在 $\\Delta_E$ 内的条件。如果满足，我们将其贡献加到总角亏中。以 $(x_m, y_m)$ 为中心的单个单元的贡献是：\n$$\n\\Delta \\delta = K(x_m, y_m) \\cdot \\Delta A = (-1) \\cdot \\frac{4}{(1 - (x_m^2 + y_m^2))^2} \\, dx \\, dy\n$$\n总角亏是这些贡献在所有有效单元上的总和：\n$$\n\\delta_E \\approx \\sum_{i,j \\text{ s.t. } p_{ij} \\in \\Delta_E} - \\frac{4}{(1 - (x_{m,i}^2 + y_{m,j}^2))^2} \\, dx \\, dy\n$$\n这将通过生成一个中点网格，创建一个布尔掩码来识别 $\\Delta_E$ 内的点，为每个网格点计算贡献，并在掩码为真的地方对贡献求和来实现。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef _calculate_spherical_defect(R, phi_max, N_theta, N_phi):\n    \"\"\"\n    Calculates the angle defect of a spherical wedge using numerical integration.\n    The wedge is defined by theta in [0, pi/2] and phi in [0, phi_max].\n    \"\"\"\n    K = 1.0 / (R**2)\n    theta_max = np.pi / 2.0\n    \n    d_theta = theta_max / N_theta\n    d_phi = phi_max / N_phi\n\n    # Midpoint theta values\n    theta_midpoints = (np.arange(N_theta) + 0.5) * d_theta\n    \n    # K*dA = (1/R^2) * R^2*sin(theta)*d_theta*d_phi = sin(theta)*d_theta*d_phi\n    # We can sum over phi first, which is a simple multiplication by N_phi\n    # as the integrand does not depend on phi.\n    # Sum_j(sin(theta_m)*d_theta*d_phi) = N_phi * sin(theta_m) * d_theta * d_phi\n    # Then sum over theta.\n    \n    # Vectorized sum over all theta midpoints\n    # The term sin(theta_m) * d_theta approximates integral of sin(theta) d_theta\n    # The term phi_max approximates integral of d_phi\n    defect_sum = np.sum(np.sin(theta_midpoints)) * d_theta * phi_max\n    \n    return defect_sum\n\ndef _calculate_case_a():\n    \"\"\"Case A (Euclidean plane, happy path)\"\"\"\n    # Gaussian curvature K=0, so the integral of K*dA is 0.\n    return 0.0\n\ndef _calculate_case_b():\n    \"\"\"Case B (Sphere with R=1, large right-angled geodesic triangle)\"\"\"\n    R = 1.0\n    N_theta = 600\n    N_phi = 600\n    phi_max = np.pi / 2.0\n    return _calculate_spherical_defect(R, phi_max, N_theta, N_phi)\n\ndef _calculate_case_c():\n    \"\"\"Case C (Sphere with R=1, small right-angled geodesic triangle)\"\"\"\n    R = 1.0\n    N_theta = 600\n    N_phi = 600\n    phi_max = 0.3\n    return _calculate_spherical_defect(R, phi_max, N_theta, N_phi)\n\ndef _calculate_case_d():\n    \"\"\"Case D (Sphere with R=2, medium right-angled geodesic triangle)\"\"\"\n    R = 2.0\n    N_theta = 600\n    N_phi = 600\n    phi_max = np.pi / 3.0\n    return _calculate_spherical_defect(R, phi_max, N_theta, N_phi)\n\ndef _calculate_case_e():\n    \"\"\"Case E (Hyperbolic plane in the Poincaré disk)\"\"\"\n    Nx = 500\n    Ny = 500\n    \n    # Bounding box for integration\n    x_lim, y_lim = 1.0, 1.0\n    dx = x_lim / Nx\n    dy = y_lim / Ny\n    \n    # Parameters for the third geodesic boundary (a circular arc)\n    cx, cy = 1.2, 1.2\n    r_circ_sq = cx**2 + cy**2 - 1.0\n\n    # Create a mesh of midpoint coordinates for each cell\n    x_midpoints = (np.arange(Nx) + 0.5) * dx\n    y_midpoints = (np.arange(Ny) + 0.5) * dy\n    xx, yy = np.meshgrid(x_midpoints, y_midpoints, indexing='ij')\n\n    # Define the region of the geodesic triangle using boolean masks\n    # Condition 1: must be inside the Poincare disk\n    mask_disk = (xx**2 + yy**2)  1.0\n    # Condition 2: must be inside the region bounded by the orthogonal circle\n    mask_geodesic = ((xx - cx)**2 + (yy - cy)**2) = r_circ_sq\n    # Conditions x>=0 and y>=0 are handled by the mesh grid range from 0 to 1\n    \n    # Combine masks to find all valid cells\n    valid_mask = mask_disk  mask_geodesic\n\n    # Calculate contributions for all cells in the grid\n    K = -1.0\n    rr_sq = xx**2 + yy**2\n    \n    # Area element factor for each cell, dA = factor * dx * dy\n    # This avoids division by zero for points on the boundary r=1.\n    # The mask_disk ensures we only use points with r1.\n    area_element_factor = np.zeros_like(rr_sq)\n    # Calculate factor only for points inside the disk to avoid warnings\n    inside_disk_indices = rr_sq  1.0\n    area_element_factor[inside_disk_indices] = 4.0 / (1.0 - rr_sq[inside_disk_indices])**2\n    \n    # Cell contribution is K * dA\n    cell_contributions = K * area_element_factor * dx * dy\n    \n    # Sum contributions only from cells whose midpoints are in the triangle\n    total_defect = np.sum(cell_contributions[valid_mask])\n    \n    return total_defect\n\ndef solve():\n    \"\"\"\n    Main function to calculate the angle defect for all specified cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # The logic for each case is encapsulated in a helper function.\n    test_cases_solvers = [\n        _calculate_case_a,\n        _calculate_case_b,\n        _calculate_case_c,\n        _calculate_case_d,\n        _calculate_case_e,\n    ]\n\n    results = []\n    for solver_func in test_cases_solvers:\n        result = solver_func()\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3038073"}]}