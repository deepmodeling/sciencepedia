{"hands_on_practices": [{"introduction": "在探究椭圆曲线的秩之前，我们必须首先理解其基本的算术性质。一个关键的不变量是“坏约化素数” (primes of bad reduction) 的集合，在这些素数处曲线经模$p$约化后会变得奇异。本实践将演示如何通过计算曲线的判别式 $\\Delta$ 来识别这些素数，并引入极小Weierstrass模型的关键概念，运用实用判据 $v_p(\\Delta) < 12$ 来确保我们计算的判别式能准确反映曲线的内在属性。[@problem_id:3022305] 这项计算是许多高级算法的第一步，包括为下降法建立塞尔默群 (Selmer group) 以及为L函数定义欧拉乘积 (Euler product)。", "problem": "设 $E$ 是有理数域 $\\mathbb{Q}$ 上的椭圆曲线，由短 Weierstrass 方程 $y^{2} = x^{3} + Ax + B$ 给出，其中 $A = -91$ 且 $B = 140$。如果一条 $\\mathbb{Q}$ 上的椭圆曲线在模 $p$ 约化后是非奇异的，则称其在有理素数 $p$ 处有良好约化，否则称为坏约化。对于一个整 Weierstrass 模型，约化的非奇异性由判别式 $\\Delta$ 决定，对于短 Weierstrass 形式，该判别式由以下公式定义：\n$$\n\\Delta = -16\\left(4A^{3} + 27B^{2}\\right).\n$$\n仅使用基本事实和定义——特别地，坏约化有理素数集恰好是整除 $E$ 的最小判别式的素数集——完成以下任务：\n\n1. 解释对于给定的系数 $A = -91$ 和 $B = 140$，该短整 Weierstrass 模型为何在所有有理素数处都是极小的。你的解释必须从模 p 约化、非奇异性以及容许的整变量变换对判别式赋值的影响的定义出发，并且必须在不引用任何未证明的快捷判据的情况下，证明其在所有素数处的极小性。\n\n2. 计算判别式 $\\Delta$ 并将其分解为素数幂的乘积。\n\n3. 通过识别整除 $\\Delta$ 的素数，得出 $E$ 的坏约化有理素数集。\n\n你的最终答案必须以 LaTeX 的 $\\mathrm{pmatrix}$ 环境写成一个单行矩阵，其中包含按升序排列的坏素数集。无需四舍五入。", "solution": "椭圆曲线 $E$ 在 $\\mathbb{Q}$ 上由整 Weierstrass 模型 $y^{2} = x^{3} + Ax + B$ 给出，系数为 $A = -91$ 和 $B = 140$。问题要求三件事：证明此模型在所有素数处都是极小的，计算其判别式 $\\Delta$ 并进行因式分解，以及求出坏约化素数集。\n\n一条 $\\mathbb{Q}$ 上的椭圆曲线可以由许多不同的整 Weierstrass 模型表示，所有这些模型在 $\\mathbb{Q}$ 上都是同构的。如果一个模型在素数 $p$ 处的判别式的 $p$-进赋值（记作 $v_p(\\Delta)$）是在所有与 $E$ 在 $\\mathbb{Q}$ 上同构的整模型中最小的，则称该模型在该素数 $p$ 处是极小的。$E$ 的坏约化素数集是其最小判别式的素因子集。\n\n按照要求，我们首先从第一性原理出发，建立一个极小性判据。$E$ 的任意两个 Weierstrass 模型之间通过一个容许的变量变换相关联：\n$$\nx = u^{2}x' + r, \\quad y = u^{3}y' + su^{2}x' + t\n$$\n其中 $u, r, s, t \\in \\mathbb{Q}$ 且 $u \\neq 0$。新模型 $\\Delta'$ 的判别式与原模型 $\\Delta$ 的判别式通过公式 $\\Delta' = u^{-12}\\Delta$ 相关联。\n对于一个给定的判别式为 $\\Delta$ 的模型，若其在素数 $p$ 处非极小，则必定存在另一个同构的整模型，其判别式为 $\\Delta'$，满足 $v_p(\\Delta') < v_p(\\Delta)$。根据判别式的变换公式，这等价于：\n$$\nv_p(u^{-12}\\Delta) < v_p(\\Delta) \\implies -12v_p(u) + v_p(\\Delta) < v_p(\\Delta) \\implies -12v_p(u) < 0 \\implies v_p(u) > 0\n$$\n因此，一个在 $p$ 处非极小的模型可以通过一个变量变换转化为一个“更极小”的模型，其中 $u \\in \\mathbb{Q}$ 的 $p$-进赋值为正。由于 $v_p(u)$ 必须是一个整数（因为 $u$ 是有理数），这意味着 $v_p(u) \\ge 1$。\n此外，为使新模型是整模型，其判别式 $\\Delta'$ 必须是整数。这意味着 $v_p(\\Delta') \\ge 0$。\n现在考虑条件 $v_p(\\Delta') = v_p(\\Delta) - 12v_p(u)$。如果一个模型在 $p$ 处不是极小的，则存在一个 $v_p(u) \\ge 1$ 的变量变换，可以得到一个新的整模型。对于这个新模型，我们必须有 $v_p(\\Delta') \\ge 0$，这意味着：\n$$\nv_p(\\Delta) - 12v_p(u) \\ge 0 \\implies v_p(\\Delta) \\ge 12v_p(u)\n$$\n由于 $v_p(u) \\ge 1$，一个模型在 $p$ 处非极小的必要条件是 $v_p(\\Delta) \\ge 12$。该命题的逆否命题提供了一个极小性的充分条件：如果对于素数 $p$，$v_p(\\Delta) < 12$，则该模型在 $p$ 处必定是极小的。我们将使用此判据来证明给定模型在所有素数处的极小性。\n\n为了应用此判据，我们必须首先计算给定模型的判别式 $\\Delta$。对于短 Weierstrass 方程 $y^2 = x^3 + Ax + B$，其判别式公式为 $\\Delta = -16(4A^3 + 27B^2)$。\n给定的系数为 $A = -91$ 和 $B = 140$。我们将它们分解为素数：\n$A = -91 = -7 \\times 13$\n$B = 140 = 14 \\times 10 = (2 \\times 7) \\times (2 \\times 5) = 2^2 \\times 5 \\times 7$\n\n现在我们计算 $4A^3 + 27B^2$ 这一项：\n$$\n4A^3 + 27B^2 = 4(-7 \\times 13)^3 + 27(2^2 \\times 5 \\times 7)^2\n$$\n$$\n= 4(-1)(7^3 \\times 13^3) + (3^3)(2^4 \\times 5^2 \\times 7^2)\n$$\n$$\n= -2^2 \\times 7^3 \\times 13^3 + 3^3 \\times 2^4 \\times 5^2 \\times 7^2\n$$\n我们提取公因式 $2^2 \\times 7^2$：\n$$\n= (2^2 \\times 7^2) \\left[ -7 \\times 13^3 + 3^3 \\times 2^2 \\times 5^2 \\right]\n$$\n我们计算括号内的值：\n$13^3 = 2197$\n$-7 \\times 13^3 = -7 \\times 2197 = -15379$\n$3^3 \\times 2^2 \\times 5^2 = 27 \\times 4 \\times 25 = 27 \\times 100 = 2700$\n所以括号内的表达式为 $-15379 + 2700 = -12679$。\n因此，\n$$\n4A^3 + 27B^2 = 2^2 \\times 7^2 \\times (-12679)\n$$\n现在我们可以计算判别式 $\\Delta$：\n$$\n\\Delta = -16(4A^3 + 27B^2) = -16 \\left[ 2^2 \\times 7^2 \\times (-12679) \\right]\n$$\n$$\n= (-2^4) \\times (2^2 \\times 7^2 \\times (-12679)) = 2^6 \\times 7^2 \\times 12679\n$$\n为了完成因式分解，我们必须分解 $12679$。通过尝试小的素数除数，我们发现 $12679 = 31 \\times 409$。数字 $409$ 是一个素数，这可以通过检查直到 $\\sqrt{409} \\approx 20.2$ 的素数除数来验证。\n判别式的最终素因数分解为：\n$$\n\\Delta = 2^6 \\times 7^2 \\times 31^1 \\times 409^1\n$$\n\n计算并分解了 $\\Delta$ 后，我们回到极小性的证明。我们检查 $\\Delta$ 的每个素因子的 $p$-进赋值：\n\\begin{itemize}\n    \\item 对于 $p=2$，$v_2(\\Delta) = 6$。由于 $6 < 12$，该模型在 $p=2$ 处是极小的。\n    \\item 对于 $p=7$，$v_7(\\Delta) = 2$。由于 $2 < 12$，该模型在 $p=7$ 处是极小的。\n    \\item 对于 $p=31$，$v_{31}(\\Delta) = 1$。由于 $1 < 12$，该模型在 $p=31$ 处是极小的。\n    \\item 对于 $p=409$，$v_{409}(\\Delta) = 1$。由于 $1 < 12$，该模型在 $p=409$ 处是极小的。\n\\end{itemize}\n对于任何其他素数 $p$，$p$ 不整除 $\\Delta$，所以 $v_p(\\Delta) = 0$，这也小于 $12$。\n由于对所有素数 $p$ 都有 $v_p(\\Delta) < 12$，我们得出结论，给定的整 Weierstrass 模型 $y^2 = x^3 - 91x + 140$ 在所有有理素数处都是极小的。\n\n最后，我们确定坏约化有理素数集。问题指出，这是整除 $E$ 的最小判别式的素数集。既然我们已经确定了我们模型的判别式 $\\Delta$ 是一个最小判别式，那么坏约化素数就恰好是 $\\Delta$ 的素因子。\n从因式分解 $\\Delta = 2^6 \\times 7^2 \\times 31 \\times 409$ 可知，不同的素因子是 $2$、$7$、$31$ 和 $409$。\n$E$ 的坏约化素数集是 $\\{2, 7, 31, 409\\}$。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n2 & 7 & 31 & 409\n\\end{pmatrix}\n}\n$$", "id": "3022305"}, {"introduction": "2-下降法 (2-descent) 是为椭圆曲线的秩确定上界的一个强大工具，其原理是将寻找曲线上有理点的问题转化为在相关辅助方程，即齐性空间 (homogeneous spaces) 上寻找解。一个关键步骤是检验这些齐性空间是否在每个局部域 $\\mathbb{Q}_p$（以及 $\\mathbb{R}$）中都有解。本练习将通过使用希尔伯特符号 $(a,b)_p$ 来检验一个二次型方程在2-adic数域 $\\mathbb{Q}_2$ 上的局部可解性，从而提供对这一“从局部到整体”原则的动手实践。[@problem_id:3022295] 掌握此计算对于理解塞尔默群的构造和实际计算至关重要，该群衡量了局部-整体原则在何种程度上失效。", "problem": "设 $E$ 为定义在 $\\mathbb{Q}$ 上的椭圆曲线 $E \\colon y^{2} = x(x+1)(x+2)$。在对 $E$ 进行 2-下降 (2-descent) 的过程中，我们会遇到一个亏格为 1 的覆叠，它（在差一个非零有理数平方的缩放下）由以下二元二次型给出\n$$\n- X^{2} - 2 Y^{2} \\;=\\; Z^{2}.\n$$\n对于一个素数 $p$，与 $a,b \\in \\mathbb{Q}_{p}^{\\times}$ 相关联的希尔伯特符号 (Hilbert symbol) $(a,b)_{p} \\in \\{\\pm 1\\}$ 的定义条件是：$(a,b)_{p} = 1$ 当且仅当二次曲线 $a X^{2} + b Y^{2} = Z^{2}$ 在 $p$-进数 $\\mathbb{Q}_{p}$ 上有一个非平凡点。这在 2-下降的背景下为该二次曲线提供了标准的局部可解性检验。\n\n请仅使用 2-进赋值和模 8 的剩余类，计算当 $u = -1$ 和 $v = -2$ 时希尔伯特符号 $(u,v)_{2}$ 的值，并用其判断二次曲线 $-X^{2} - 2 Y^{2} = Z^{2}$ 在 $\\mathbb{Q}_{2}$ 上是否有非平凡点，从而判断相应的 2-覆叠在 $p=2$ 处是否局部可解。\n\n你的最终答案必须是 $(u,v)_{2}$ 的单一值，即 $\\{\\pm 1\\}$ 中的一个数。无需四舍五入。", "solution": "问题要求计算当 $u = -1$ 和 $v = -2$ 时的希尔伯特符号 $(u,v)_{2}$。该符号的值决定了二次曲线 $-X^{2} - 2Y^{2} = Z^{2}$ 在 2-进数域 $\\mathbb{Q}_{2}$ 中是否拥有非平凡解。一个非平凡解是指 $(X,Y,Z) \\neq (0,0,0)$ 的解。问题指明计算应基于 2-进赋值和模 8 的剩余类。这直接指向了素数 $p=2$ 处希尔伯特符号的标准显式公式。\n\n设 $a, b \\in \\mathbb{Q}_{2}^{\\times}$。我们可以将它们唯一地写成 $a = 2^{\\alpha} a'$ 和 $b = 2^{\\beta} b'$ 的形式，其中 $\\alpha = v_{2}(a)$ 和 $\\beta = v_{2}(b)$ 是 $a$ 和 $b$ 的 2-进赋值，而 $a'$ 和 $b'$ 是 2-进单位（即 $v_{2}(a') = v_{2}(b')=0$）。希尔伯特符号 $(a,b)_{2}$ 的公式由下式给出：\n$$\n(a,b)_{2} = (-1)^{ \\frac{a'-1}{2} \\frac{b'-1}{2} + \\alpha \\frac{b'^{2}-1}{8} + \\beta \\frac{a'^{2}-1}{8} }\n$$\n其中指数是在模 2 的意义下考虑的。对于任何 2-进单位 $a'$，表达式 $\\frac{a'-1}{2}$ 和 $\\frac{a'^{2}-1}{8}$ 都是良定义的，因为如果将 $a'$ 视为一个整数，当 $a'$ 为奇数时，$a'-1$ 是偶数，且 $a'^{2}-1 = (a'-1)(a'+1)$ 可被 8 整除（因为一个因子可被 2 整除，另一个可被 4 整除）。\n\n我们需要计算 $u = -1$ 和 $v = -2$ 时的 $(u,v)_{2}$。让我们确定公式所需的各个组成部分。\n\n对于 $a = u = -1$：\n2-进赋值为 $\\alpha = v_{2}(-1) = 0$，因为 $-1$ 是一个 2-进单位。\n其单位部分是 $a' = \\frac{-1}{2^{0}} = -1$。\n\n对于 $b = v = -2$：\n2-进赋值为 $\\beta = v_{2}(-2) = v_2(2 \\cdot (-1)) = v_2(2) + v_2(-1) = 1 + 0 = 1$。\n其单位部分是 $b' = \\frac{-2}{2^{1}} = -1$。\n\n现在，我们计算公式中指数的各个部分。这些部分取决于 $a'$ 和 $b'$ 模 2 的适当次幂的剩余类。在这里，$a' = -1$ 且 $b' = -1$。\n我们计算必要的表达式：\n\\begin{itemize}\n    \\item 对于 $a'=-1$：\n    $$ \\frac{a'-1}{2} = \\frac{-1-1}{2} = \\frac{-2}{2} = -1 $$\n    $$ \\frac{a'^{2}-1}{8} = \\frac{(-1)^{2}-1}{8} = \\frac{1-1}{8} = 0 $$\n    \\item 对于 $b'=-1$：\n    $$ \\frac{b'-1}{2} = \\frac{-1-1}{2} = \\frac{-2}{2} = -1 $$\n    $$ \\frac{b'^{2}-1}{8} = \\frac{(-1)^{2}-1}{8} = \\frac{1-1}{8} = 0 $$\n\\end{itemize}\n\n现在，我们可以将这些值与 $\\alpha=0$ 和 $\\beta=1$ 一起代入希尔伯特符号的公式中：\n$$\n(-1, -2)_{2} = (-1)^{ \\left(\\frac{-1-1}{2}\\right) \\left(\\frac{-1-1}{2}\\right) + (0) \\left(\\frac{(-1)^{2}-1}{8}\\right) + (1) \\left(\\frac{(-1)^{2}-1}{8}\\right) }\n$$\n$$\n(-1, -2)_{2} = (-1)^{ (-1)(-1) + 0 \\cdot 0 + 1 \\cdot 0 }\n$$\n$$\n(-1, -2)_{2} = (-1)^{1 + 0 + 0} = (-1)^{1} = -1\n$$\n希尔伯特符号的值是 $(-1, -2)_{2} = -1$。\n\n根据问题中提供的定义，$(a,b)_{p} = 1$ 当且仅当二次曲线 $a X^{2} + b Y^{2} = Z^{2}$ 在 $\\mathbb{Q}_{p}$ 上有一个非平凡点。在我们的例子中，当 $a=-1$，$b=-2$ 且 $p=2$ 时，我们已经得出 $(-1, -2)_{2} = -1$。\n这意味着二次曲线 $-X^{2} - 2Y^{2} = Z^{2}$ 在 2-进数域 $\\mathbb{Q}_{2}$ 上没有非平凡点。此方程可以改写为 $X^{2} + 2Y^{2} + Z^{2} = 0$。我们的结果表明，此方程在 $\\mathbb{Q}_{2}$ 中仅有平凡解 $(X,Y,Z)=(0,0,0)$。\n\n在椭圆曲线 $E$ 的 2-下降的背景下，这个结果意味着给定的 2-覆叠在素数 $p=2$ 处不是局部可解的。覆叠上存在全局有理点（这将对应于 $E$ 上的一个无限阶有理点）的一个必要条件是，它必须在每个 $\\mathbb{Q}_{p}$ 中（以及在 $\\mathbb{R}$ 中）都局部有解。由于这个条件在 $p=2$ 处不成立，这个塞尔默群 (Selmer group) 的特定元素并非来自 $E$ 上的一个有理点。\n然而，问题只要求计算希尔伯特符号的值以及关于局部可解性的直接结论。计算出的值为 $-1$。", "answer": "$$\\boxed{-1}$$", "id": "3022295"}, {"introduction": "精确确定一个椭圆曲线的秩仍然是一个重大的开放问题，在实践中，数论学家们将理论界限与数值证据相结合，从而对秩形成一个有充分依据的猜想。本练习模拟了这一研究过程，指导您编写一个程序，综合三种不同的方法：来自2-下降法的理论上界，通过直接搜索点得到的下界，以及基于Birch和Swinnerton-Dyer猜想通过数值计算L函数得到的解析秩预测。[@problem_id:3022323] 这个顶石项目不仅巩固了下降法和L函数等独立概念，还展示了在现代计算数论中如何将它们整合起来，以解决深层次的算术问题。", "problem": "考虑定义在有理数域上的椭圆曲线，其短 Weierstrass 方程为 $$E_A:\\ y^2 = x^3 - A x,$$ 其中 $A$ 是一个正整数。Mordell–Weil 定理断言 $E_A(\\mathbb{Q})$ 是一个有限生成阿贝尔群，同构于 $$E_A(\\mathbb{Q}) \\cong E_A(\\mathbb{Q})_{\\mathrm{tors}} \\oplus \\mathbb{Z}^r,$$ 其中 $E_A(\\mathbb{Q})_{\\mathrm{tors}}$ 是挠子群，$r$ 是秩。Birch and Swinnerton–Dyer 猜想将秩 $r$ 与 $L$-函数 $L(E_A,s)$ 在 $s=1$ 处的零点阶联系起来。\n\n您的任务是编写一个完整的、可运行的程序，针对特定曲线 $$E:\\ y^2 = x^3 - 36 x,$$ 结合 2-descent 方法得到的秩上界与 $L$-函数在 $s=1$ 附近的数值近似，来推测其确切的秩。为了评估鲁棒性，您的程序还必须处理一个包含 $E_{n^2}:\\ y^2 = x^3 - n^2 x$ 族中相关曲线的小型测试集。\n\n请从以下基本原理开始您的推导：\n- $\\mathbb{Q}$ 上椭圆曲线的定义以及 Mordell–Weil 群结构。\n- 2-Selmer 群的存在性以及不等式 $$r \\leq \\dim_{\\mathbb{F}_2} \\mathrm{Sel}_2(E_A) - \\dim_{\\mathbb{F}_2} E_A[2](\\mathbb{Q}).$$\n- 对于具有完全有理 2-挠点的曲线，特别是 $E_{n^2}:\\ y^2 = x(x - n)(x + n)$ 族，2-Selmer 群由整除 $2n$ 的素数处的局部条件所控制，因此通过分析整除 $2n$ 的有限个位上的平方类和局部可解性，可以得到一个形如 $$\\dim_{\\mathbb{F}_2} \\mathrm{Sel}_2(E_{n^2}) \\leq \\omega(n) + 2$$ 的实用界，其中 $\\omega(n)$ 表示 $n$ 的不同素因子个数。由此得出 2-descent 秩上界 $$r \\leq \\omega(n).$$\n- $L$-函数 $L(E,s)$ 由一个 Dirichlet 级数定义，其系数 $a_n$ 是积性的，并由局部点计数确定。在好约化素数 $p$ 处的欧拉乘积由 $$L_p(E,s) = \\left(1 - a_p p^{-s} + p^{1-2s}\\right)^{-1},$$ 给出，其中对于好约化素数，$a_p = p + 1 - \\#E(\\mathbb{F}_p)$。在 $s=1$ 附近，可以通过对好约化素数的截断 Dirichlet 级数或截断欧拉乘积来数值近似 $L(E,s)$，从而启发式地评估 $L(E,1)$ 是否接近于零，以及是否存在一阶零点。\n\n按如下方式设计您的算法：\n- 对每条测试曲线 $E_{n^2}$，通过对 $n$ 进行素因子分解，计算 2-descent 上界 $r_{\\mathrm{upper}} = \\omega(n)$。\n- 通过以下步骤在 $s=1$ 附近数值近似 $L(E_{n^2},s)$：\n  1. 对于好约化素数 $p$（不整除 $2n$ 的素数），通过计算 $y^2 \\equiv x^3 - n^2 x \\pmod{p}$ 的解的个数来得到 $\\#E(\\mathbb{F}_p)$，并使用 $a_p = p + 1 - \\#E(\\mathbb{F}_p)$ 计算 $a_p$。\n  2. 构造一个截断 Dirichlet 级数 $$S_N(s) = \\sum_{\\substack{1 \\leq m \\leq N \\\\ \\gcd(m,2n)=1}} \\frac{a_m}{m^s} e^{-m/N},$$ 其中 $N$ 是一个合适的截断值。系数 $a_m$ 由 $a_p$ 以积性方式构建，在好约化素数的幂次上使用 Hecke 递推关系 $$a_{p^k} = a_p a_{p^{k-1}} - p\\, a_{p^{k-2}},\\quad k\\ge 2,$$ 且 $a_1=1$，同时忽略含有坏约化素因子的项以保持近似的一致性。\n  3. 使用一个小的 $\\varepsilon$，在 $s \\in \\{1-\\varepsilon, 1, 1+\\varepsilon\\}$ 处计算 $S_N(s)$ 的值，以启发式地检测中心值是否像一个一阶零点，即 $|S_N(1)|$ 远小于相邻值，且有限差分斜率非平凡，从而预测解析秩为 $\\{0,1\\}$ 中的一个。\n- （可选）搜索 $y$ 非零的小的整有理点，以提供一个下界 $r_{\\mathrm{lower}} \\in \\{0,1\\}$；通过设置 $$r_{\\mathrm{conj}} = \\min\\left(r_{\\mathrm{upper}}, \\max\\left(r_{\\mathrm{lower}}, r_{\\mathrm{analytic}}\\right)\\right)$$ 来组合这些界。\n\n您的测试集必须包含以下 $n$ 的参数值：\n- $n=6$ (目标曲线 $E:y^2=x^3-36x$),\n- $n=1$,\n- $n=2$,\n- $n=3$。\n\n对于测试集中的每个 $n$，您的程序必须生成一个整数形式的推测秩 $r_{\\mathrm{conj}}$。最终输出必须是单行，包含推测秩的列表，格式严格为方括号内以逗号分隔的列表，例如，“[r1,r2,r3,r4]”。不涉及任何物理单位或角度；所有输出均为纯整数。您的程序必须无需任何输入，并能在指定环境下直接运行。", "solution": "任务是针对一组给定的参数 $n \\in \\{6, 1, 2, 3\\}$，对椭圆曲线族 $E_{n^2}: y^2 = x^3 - n^2 x$ 的秩进行推测。秩的推测值，记为 $r_{\\mathrm{conj}}$，将通过结合三种不同方法形成：来自 2-descent 的理论上界，来自点搜索的数值下界，以及来自曲线的 $L$-函数的解析秩的数值估计。最终的秩推测值由公式 $r_{\\mathrm{conj}} = \\min(r_{\\mathrm{upper}}, \\max(r_{\\mathrm{lower}}, r_{\\mathrm{analytic}}))$ 确定。\n\n在此，我们详细说明针对给定整数 $n$ 计算每个分量的分步推导和方法。\n\n### 1. 秩上界 ($r_{\\mathrm{upper}}$)\n\n问题提供了一个推导 Mordell-Weil 群 $E_{n^2}(\\mathbb{Q})$ 的秩 $r$ 的上界的框架。\n将秩与 2-Selmer 群 $\\mathrm{Sel}_2(E_{n^2})$ 联系起来的基本不等式是：\n$$r \\leq \\dim_{\\mathbb{F}_2} \\mathrm{Sel}_2(E_{n^2}) - \\dim_{\\mathbb{F}_2} E_{n^2}[2](\\mathbb{Q})$$\n其中 $E_{n^2}[2](\\mathbb{Q})$是阶为 2 的因子的有理点构成的群。\n我们曲线的方程是 $y^2 = x^3 - n^2 x = x(x-n)(x+n)$。阶为 2 的点是那些 $y$ 坐标为 $y=0$ 的点，这出现在 $x \\in \\{0, n, -n\\}$ 处。这三个点，连同无穷远点 $\\mathcal{O}$，构成了有理 2-挠子群 $E_{n^2}[2](\\mathbb{Q})$。这个群同构于 Klein 四元群 $\\mathbb{Z}/2\\mathbb{Z} \\times \\mathbb{Z}/2\\mathbb{Z}$，其作为含两个元素的有限域 $\\mathbb{F}_2$ 上的向量空间的维数是 2。\n$$\\dim_{\\mathbb{F}_2} E_{n^2}[2](\\mathbb{Q}) = 2$$\n问题指出，对于该族曲线，2-Selmer 群维数的一个实用上界是：\n$$\\dim_{\\mathbb{F}_2} \\mathrm{Sel}_2(E_{n^2}) \\leq \\omega(n) + 2$$\n其中 $\\omega(n)$ 是 $n$ 的不同素因子个数。\n将这两个结果代入秩不等式，我们得出结论：\n$$r \\leq (\\omega(n) + 2) - 2 = \\omega(n)$$\n这给了我们可计算的上界 $r_{\\mathrm{upper}} = \\omega(n)$。我们为测试集中的每个 $n$ 计算这个值：\n- 对于 $n=6=2 \\cdot 3$，$\\omega(6)=2$，所以 $r_{\\mathrm{upper}} = 2$。\n- 对于 $n=1$，没有素因子，$\\omega(1)=0$，所以 $r_{\\mathrm{upper}} = 0$。\n- 对于 $n=2$，是素数，$\\omega(2)=1$，所以 $r_{\\mathrm{upper}} = 1$。\n- 对于 $n=3$，是素数，$\\omega(3)=1$，所以 $r_{\\mathrm{upper}} = 1$。\n\n### 2. 秩下界 ($r_{\\mathrm{lower}}$)\n\n通过寻找无限阶有理点可以建立秩的下界。对于 $E_{n^2}$ 族（$n>2$ 时），挠子群仅包含 $y$ 坐标为 $y=0$ 的点。任何 $y$ 坐标非零的有理点都必须是无限阶的。只要找到一个这样的点，就可以证明 $r \\ge 1$。\n我们对 $y \\ne 0$ 的整点 $(x,y)$ 进行搜索。这涉及在一定范围的整数 $x$ 中，检查 $x^3 - n^2 x$ 的值是否为完全平方数。我们只需检查使得 $x^3 - n^2 x > 0$ 的整数 $x$。这种情况发生在 $x \\in (-n, 0) \\cup (n, \\infty)$。我们将在 $[-n+1, -1]$ 和 $[n+1, 200]$ 范围内搜索整数 $x$。\n- 如果找到一个点，我们设置 $r_{\\mathrm{lower}}=1$。\n- 如果在此范围内搜索未成功，我们设置 $r_{\\mathrm{lower}}=0$。\n\n### 3. 解析秩 ($r_{\\mathrm{analytic}}$)\n\nBirch and Swinnerton-Dyer (BSD) 猜想指出，椭圆曲线的秩 $r$ 等于其 Hasse-Weil $L$-函数 $L(E, s)$ 在中心点 $s=1$ 处的零点阶。我们将数值近似 $L(E_{n^2}, s)$ 来启发式地确定其在 $s=1$ 处的值是否为零，如果是，该零点是否为一阶。这给出了一个推测的解析秩 $r_{\\mathrm{analytic}} \\in \\{0, 1\\}$。\n\n过程如下：\n1.  **识别坏素数**：对于曲线 $E_{n^2}: y^2 = x^3 - n^2 x$，坏约化素数是整除判别式 $\\Delta = 2^8 n^6$ 的素数。这些恰好是 $2n$ 的素因子。\n2.  **计算 $a_p$ 系数**：对于每个好约化素数 $p$，我们计算 $L$-函数的系数 $a_p$，其定义为 $a_p = p + 1 - \\#E_{n^2}(\\mathbb{F}_p)$。在有限域 $\\mathbb{F}_p$ 上的点群大小 $\\#E_{n^2}(\\mathbb{F}_p)$ 由 $1 + \\sum_{x=0}^{p-1} (1 + (\\frac{x^3 - n^2 x}{p}))$ 给出，其中 $(\\frac{\\cdot}{p})$ 是 Legendre 符号。这导出公式：\n    $$a_p = -\\sum_{x=0}^{p-1} \\left(\\frac{x^3 - n^2 x}{p}\\right)$$\n3.  **计算 $a_m$ 系数**：系数 $a_m$ 对于互质的自变量是积性的。对于素数幂，它们遵循 Hecke 递推关系：\n    $$a_{p^k} = a_p a_{p^{k-1}} - p a_{p^{k-2}} \\quad (k \\ge 2)$$\n    初始条件为 $a_{p^0} = a_1 = 1$ 和 $a_{p^1} = a_p$。对于一个通用整数 $m = p_1^{k_1} \\cdots p_r^{k_r}$，我们有 $a_m = a_{p_1^{k_1}} \\cdots a_{p_r^{k_r}}$。我们实现一个类似筛法的方法来计算所有 $m \\le N$ 且 $\\gcd(m, 2n) = 1$ 的 $a_m$。\n4.  **评估截断的 $L$-级数**：我们使用平滑的、截断的 Dirichlet 级数来近似 $L(E_{n^2}, s)$：\n    $$S_N(s) = \\sum_{\\substack{1 \\leq m \\leq N \\\\ \\gcd(m,2n)=1}} \\frac{a_m}{m^s} e^{-m/N}$$\n    我们选择截断值 $N=10000$ 和一个小参数 $\\varepsilon=10^{-5}$。我们在中心点附近的三个点评估该和：$s=1-\\varepsilon$，$s=1$ 和 $s=1+\\varepsilon$。\n5.  **确定解析秩**：\n    -   如果 $|S_N(1)|$ 接近于零（例如，$< 10^{-3}$），且 $S_N(1-\\varepsilon)$ 和 $S_N(1+\\varepsilon)$ 的值符号相反且显著不为零，我们就有了单阶零点的数值证据。在这种情况下，我们推测 $r_{\\mathrm{analytic}}=1$。\n    -   否则，我们假设 $L$-函数在 $s=1$ 处不为零，并推测 $r_{\\mathrm{analytic}}=0$。\n\n### 4. 最终秩推测 ($r_{\\mathrm{conj}}$)\n\n最后，我们使用指定的公式综合来自这三种方法的信息：\n$$r_{\\mathrm{conj}} = \\min(r_{\\mathrm{upper}}, \\max(r_{\\mathrm{lower}}, r_{\\mathrm{analytic}}))$$\n这提供了一个鲁棒的推测，因为它确保了秩不超过严格的理论上界，同时允许数值证据（无论是来自找到一个点还是来自 $L$-函数）来表明一个正的秩。对测试集中的每个 $n$ 值重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Main function to conjecture the rank of elliptic curves y^2 = x^3 - n^2*x.\n    \"\"\"\n\n    def get_distinct_prime_factors(num):\n        \"\"\"Computes the set of distinct prime factors of a positive integer.\"\"\"\n        if num <= 1:\n            return set()\n        factors = set()\n        d = 2\n        temp_num = num\n        while d * d <= temp_num:\n            if temp_num % d == 0:\n                factors.add(d)\n                while temp_num % d == 0:\n                    temp_num //= d\n            d += 1\n        if temp_num > 1:\n            factors.add(temp_num)\n        return factors\n\n    def legendre_symbol(a, p):\n        \"\"\"Computes the Legendre symbol (a/p).\"\"\"\n        if p < 3 or p % 2 == 0:\n            return 0 # Not a valid prime for this simple implementation\n        ls = pow(a, (p - 1) // 2, p)\n        if ls == p - 1:\n            return -1\n        return ls\n\n    def compute_ap(p, n_sq):\n        \"\"\"Computes the coefficient a_p for the L-series.\"\"\"\n        # a_p = -sum_{x=0}^{p-1} (x^3 - n^2*x / p)\n        return -sum(legendre_symbol(x**3 - n_sq * x, p) for x in range(p))\n\n    def get_lower_bound(n):\n        \"\"\"\n        Searches for an integral point with y != 0 to find a lower bound for the rank.\n        if found, r_lower = 1, else 0.\n        \"\"\"\n        n_sq = n * n\n        # Search space x in (-n, 0) U (n, some_bound)\n        # Check negative x: x in [-n+1, -1]\n        for x in range(-n + 1, 0):\n            val = x**3 - n_sq * x\n            if val > 0:\n                y = math.isqrt(val)\n                if y * y == val:\n                    return 1\n        # Check positive x: x in [n+1, 201]\n        for x in range(n + 1, 201):\n            val = x**3 - n_sq * x\n            if val > 0:\n                y = math.isqrt(val)\n                if y * y == val:\n                    return 1\n        return 0\n\n    def conjecture_rank_analytic(n):\n        \"\"\"Numerically estimates the analytic rank (0 or 1).\"\"\"\n        N_CUTOFF = 10000\n        EPSILON = 1e-5\n        \n        n_sq = n * n\n        bad_primes = get_distinct_prime_factors(2 * n)\n        \n        # Sieve to find primes up to N_CUTOFF and their smallest prime factor\n        min_prime_factor = np.zeros(N_CUTOFF + 1, dtype=int)\n        primes = []\n        for i in range(2, N_CUTOFF + 1):\n            if min_prime_factor[i] == 0:\n                min_prime_factor[i] = i\n                primes.append(i)\n            for p in primes:\n                if p > min_prime_factor[i] or i * p > N_CUTOFF:\n                    break\n                min_prime_factor[i * p] = p\n        \n        # Compute a_p for good primes\n        ap_vals = {p: compute_ap(p, n_sq) for p in primes if p not in bad_primes}\n\n        # Compute a_m for m up to N_CUTOFF using a sieve-like method\n        am_vals = np.zeros(N_CUTOFF + 1, dtype=float)\n        am_vals[1] = 1.0\n\n        for p in primes:\n            if p in bad_primes:\n                continue\n            ap = ap_vals[p]\n            # Set a_{p^k}\n            pp = p\n            apk_prev = 1\n            apk_curr = ap\n            while pp <= N_CUTOFF:\n                am_vals[pp] = apk_curr\n                apk_next = ap * apk_curr - p * apk_prev\n                apk_prev = apk_curr\n                apk_curr = apk_next\n                if pp > N_CUTOFF // p: break\n                pp *= p\n        \n        for m in range(2, N_CUTOFF + 1):\n            if am_vals[m] != 0: # a_m is nonzero only if m is a prime power (for now)\n                continue\n            \n            p = min_prime_factor[m]\n            if p in bad_primes:\n                am_vals[m] = 0.0\n                continue\n            \n            pp = p\n            while (m // pp) % p == 0:\n                pp *= p\n            \n            m_rem = m // pp\n            am_vals[m] = am_vals[pp] * am_vals[m_rem]\n            \n        # Compute the truncated L-series sum S_N(s) at s=1-eps, 1, 1+eps\n        s_vals = [1.0 - EPSILON, 1.0, 1.0 + EPSILON]\n        L_approx = [0.0, 0.0, 0.0]\n        \n        m_vals = np.arange(1, N_CUTOFF + 1)\n        exp_term = np.exp(-m_vals / N_CUTOFF)\n\n        for i, s in enumerate(s_vals):\n            terms = am_vals[1:] / (m_vals**s) * exp_term\n            L_approx[i] = np.sum(terms)\n\n        s_left, s_center, s_right = L_approx\n        \n        # Heuristic for analytic rank 1: central value is small, and there's a sign change\n        is_zero = abs(s_center) < 1e-3\n        has_slope = abs(s_left - s_right) > 1e-2\n        sign_change = s_left * s_right < 0\n\n        if is_zero and has_slope and sign_change:\n            return 1\n        return 0\n\n    def get_rank_conjecture(n):\n        \"\"\"Computes the final rank conjecture for a given n.\"\"\"\n\n        # 1. Upper bound\n        if n == 1:\n            r_upper = 0\n        else:\n            r_upper = len(get_distinct_prime_factors(n))\n\n        # Short-circuit if upper bound is 0\n        if r_upper == 0:\n            return 0\n            \n        # 2. Lower bound from point search\n        r_lower = get_lower_bound(n)\n        \n        # 3. Analytic rank\n        r_analytic = conjecture_rank_analytic(n)\n        \n        # 4. Combine results\n        r_conj = min(r_upper, max(r_lower, r_analytic))\n        return r_conj\n\n    # Test cases from the problem statement\n    test_cases = [6, 1, 2, 3]\n    results = []\n\n    for n in test_cases:\n        rank = get_rank_conjecture(n)\n        results.append(rank)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3022323"}]}