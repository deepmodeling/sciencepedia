{"hands_on_practices": [{"introduction": "确定一个数域的整数环是代数数论中的首要任务。本练习将引导你完成一个具体但非平凡的例子，即对分圆域 $\\mathbb{Q}(\\zeta_8)$ 整数环的显式构造。此过程强调了判别式作为一个强大工具的作用：通过计算候选基的判别式，并将其与已知的域判别式进行比较，我们可以验证所选的基是否确实构成了完整的整数环。[@problem_id:3023010]", "problem": "令 $\\zeta_{8} := \\exp(2\\pi i/8)$ 且令 $K = \\mathbb{Q}(\\zeta_{8})$。记 $K$ 的整数环为 $\\mathcal{O}_{K}$。从数域的迹和判别式的核心定义出发，并利用 $\\mathbb{Z}[x]$ 中首一多项式的根是代数整数这一事实。按以下步骤进行：\n\n- 通过确定 $\\zeta_{8}$ 在 $\\mathbb{Q}$ 上的最小多项式，证明 $\\zeta_{8}$ 是一个代数整数，并得出结论：$\\mathbb{Z}[\\zeta_{8}]$ 是 $\\mathcal{O}_{K}$ 中的一个整环，其 $\\mathbb{Z}$-基为 $\\{1,\\zeta_{8},\\zeta_{8}^{2},\\zeta_{8}^{3}\\}$。\n- 使用迹 $\\operatorname{Tr}_{K/\\mathbb{Q}}$ 的定义以及嵌入 $\\sigma_{a}: \\zeta_{8} \\mapsto \\zeta_{8}^{a}$ (其中 $a \\in \\{1,3,5,7\\}$)，计算与基 $\\{1,\\zeta_{8},\\zeta_{8}^{2},\\zeta_{8}^{3}\\}$ 相关联的格拉姆矩阵 $G = \\big(\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_{8}^{i+j})\\big)_{0 \\leq i,j \\leq 3}$。\n- 显式计算判别式 $\\Delta(\\{1,\\zeta_{8},\\zeta_{8}^{2},\\zeta_{8}^{3}\\}) := \\det G$。\n- 使用关于分圆域的熟知事实（特别是，只有整除导子的素数才会分歧，以及分圆域的标准判别式公式），证明域判别式 $D_{K}$ 等于 $\\Delta(\\{1,\\zeta_{8},\\zeta_{8}^{2},\\zeta_{8}^{3}\\})$，并由此得出结论：$\\{1,\\zeta_{8},\\zeta_{8}^{2},\\zeta_{8}^{3}\\}$ 是 $\\mathcal{O}_{K}$ 的一个整基。\n\n给出判别式 $D_{K}$ 的精确值作为你的最终答案（不要近似或四舍五入）。", "solution": "本题要求通过一系列指定的计算和论证，确定分圆域 $K = \\mathbb{Q}(\\zeta_8)$ 的整数环 $\\mathcal{O}_K$，其中 $\\zeta_8 := \\exp(2\\pi i/8)$。\n\n首先，我们证明 $\\zeta_8$ 是一个代数整数，并且 $\\mathbb{Z}[\\zeta_8]$ 是 $\\mathcal{O}_K$ 中的一个整环。\n$8$ 次单位根是多项式 $x^8 - 1$ 的根。该多项式在整数上分解为 $x^8 - 1 = (x^4 - 1)(x^4 + 1) = (x^2-1)(x^2+1)(x^4+1) = (x-1)(x+1)(x^2+1)(x^4+1)$。\n本原 $8$ 次单位根是满足 $\\gcd(k,8)=1$ 的 $\\zeta_8^k$，即 $k \\in \\{1, 3, 5, 7\\}$。它们是第 $8$ 个分圆多项式 $\\Phi_8(x)$ 的根。$x^8-1$ 的其他根是 $\\Phi_d(x)$ 的根，其中 $d$ 是 $8$ 的除 $8$ 自身以外的因子（即 $d=1, 2, 4$）。因此，$\\Phi_8(x) = x^4+1$。\n为了证明 $\\Phi_8(x)$ 是 $\\zeta_8$ 在 $\\mathbb{Q}$ 上的最小多项式，我们必须证明它是不可约的。我们对多项式 $\\Phi_8(x+1)$ 应用艾森斯坦判别法：\n$$ \\Phi_8(x+1) = (x+1)^4 + 1 = (x^4 + 4x^3 + 6x^2 + 4x + 1) + 1 = x^4 + 4x^3 + 6x^2 + 4x + 2 $$\n对于素数 $p=2$，我们观察到 $2$ 整除除首项系数（$1$）外的所有系数，而 $p^2=4$ 不整除常数项（$2$）。因此，$\\Phi_8(x+1)$ 在 $\\mathbb{Q}$ 上是不可约的，这意味着 $\\Phi_8(x) = x^4+1$ 在 $\\mathbb{Q}$ 上也是不可约的。\n因为 $\\zeta_8$ 是首一多项式 $x^4+1 \\in \\mathbb{Z}[x]$ 的根，所以 $\\zeta_8$ 是一个代数整数。\n域扩张的次数为 $[K:\\mathbb{Q}] = \\deg(\\Phi_8(x)) = 4$。$K$ 作为 $\\mathbb{Q}$-向量空间的一个基是 $\\{1, \\zeta_8, \\zeta_8^2, \\zeta_8^3\\}$。由于 $\\zeta_8$ 是代数整数，环 $\\mathbb{Z}[\\zeta_8]$ 是 $\\mathcal{O}_K$ 的一个子环。作为 $\\mathbb{Z}$-模，$\\mathbb{Z}[\\zeta_8]$ 是秩为 $4$ 的自由模，其基为 $\\{1, \\zeta_8, \\zeta_8^2, \\zeta_8^3\\}$。由于其秩等于域扩张的次数，$\\mathbb{Z}[\\zeta_8]$ 是 $\\mathcal{O}_K$ 中的一个整环。\n\n接下来，我们计算与基 $\\{1, \\zeta_8, \\zeta_8^2, \\zeta_8^3\\}$ 相关的格拉姆矩阵。$K/\\mathbb{Q}$ 的伽罗瓦群是 $G \\cong (\\mathbb{Z}/8\\mathbb{Z})^\\times = \\{1, 3, 5, 7\\}$。嵌入 $\\sigma_a: K \\to \\mathbb{C}$ 定义为 $\\sigma_a(\\zeta_8) = \\zeta_8^a$，其中 $a \\in \\{1, 3, 5, 7\\}$。$K$ 中一个元素 $\\alpha$ 的迹由 $\\operatorname{Tr}_{K/\\mathbb{Q}}(\\alpha) = \\sum_{a \\in \\{1,3,5,7\\}} \\sigma_a(\\alpha)$ 给出。我们需要计算不同整数 $k$ 对应的 $\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^k)$。\n\n当 $k=0$ 时：$\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^0) = \\operatorname{Tr}_{K/\\mathbb{Q}}(1) = \\sum_{a \\in \\{1,3,5,7\\}} \\sigma_a(1) = 1+1+1+1 = 4$。\n当 $k \\in \\{1,2,3,5,6\\}$ 时，$\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^k)$ 是 $\\zeta_8^k$ 的所有伽罗瓦共轭的和。\n$\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^1) = \\zeta_8^1 + \\zeta_8^3 + \\zeta_8^5 + \\zeta_8^7$。这是最小多项式 $\\Phi_8(x)=x^4+1$ 的根之和。根据韦达定理，这个和是 $x^3$ 系数的相反数，即 $0$。所以，$\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8) = 0$。\n$\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^2) = \\sigma_1(\\zeta_8^2) + \\sigma_3(\\zeta_8^2) + \\sigma_5(\\zeta_8^2) + \\sigma_7(\\zeta_8^2) = \\zeta_8^2 + \\zeta_8^6 + \\zeta_8^{10} + \\zeta_8^{14} = \\zeta_8^2 + \\zeta_8^6 + \\zeta_8^2 + \\zeta_8^6 = 2(\\zeta_8^2 + \\zeta_8^6) = 2(i + (-i)) = 0$。\n$\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^3) = \\zeta_8^3 + \\zeta_8^9 + \\zeta_8^{15} + \\zeta_8^{21} = \\zeta_8^3 + \\zeta_8^1 + \\zeta_8^7 + \\zeta_8^5 = \\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8) = 0$。\n当 $k=4$ 时：$\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^4) = \\operatorname{Tr}_{K/\\mathbb{Q}}(-1) = \\sum_{a \\in \\{1,3,5,7\\}} \\sigma_a(-1) = -1-1-1-1 = -4$。\n$\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^5) = \\zeta_8^5 + \\zeta_8^{15} + \\zeta_8^{25} + \\zeta_8^{35} = \\zeta_8^5 + \\zeta_8^7 + \\zeta_8^1 + \\zeta_8^3 = \\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8) = 0$。\n$\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^6) = \\zeta_8^6 + \\zeta_8^{18} + \\zeta_8^{30} + \\zeta_8^{42} = \\zeta_8^6 + \\zeta_8^2 + \\zeta_8^6 + \\zeta_8^2 = 2(\\zeta_8^2+\\zeta_8^6) = 0$。\n格拉姆矩阵为 $G = \\big(\\operatorname{Tr}_{K/\\mathbb{Q}}(\\zeta_8^{i+j})\\big)_{0 \\leq i,j \\leq 3}$。\n$$ G = \\begin{pmatrix}\n\\operatorname{Tr}(\\zeta_8^0) & \\operatorname{Tr}(\\zeta_8^1) & \\operatorname{Tr}(\\zeta_8^2) & \\operatorname{Tr}(\\zeta_8^3) \\\\\n\\operatorname{Tr}(\\zeta_8^1) & \\operatorname{Tr}(\\zeta_8^2) & \\operatorname{Tr}(\\zeta_8^3) & \\operatorname{Tr}(\\zeta_8^4) \\\\\n\\operatorname{Tr}(\\zeta_8^2) & \\operatorname{Tr}(\\zeta_8^3) & \\operatorname{Tr}(\\zeta_8^4) & \\operatorname{Tr}(\\zeta_8^5) \\\\\n\\operatorname{Tr}(\\zeta_8^3) & \\operatorname{Tr}(\\zeta_8^4) & \\operatorname{Tr}(\\zeta_8^5) & \\operatorname{Tr}(\\zeta_8^6)\n\\end{pmatrix} = \\begin{pmatrix}\n4 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & -4 \\\\\n0 & 0 & -4 & 0 \\\\\n0 & -4 & 0 & 0\n\\end{pmatrix} $$\n\n第三，我们计算该基的判别式，即格拉姆矩阵的行列式。\n$$ \\Delta(\\{1,\\zeta_8,\\zeta_8^2,\\zeta_8^3\\}) = \\det G = \\det \\begin{pmatrix}\n4 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & -4 \\\\\n0 & 0 & -4 & 0 \\\\\n0 & -4 & 0 & 0\n\\end{pmatrix} $$\n沿第一行展开，我们得到：\n$$ \\det G = 4 \\cdot \\det \\begin{pmatrix}\n0 & 0 & -4 \\\\\n0 & -4 & 0 \\\\\n-4 & 0 & 0\n\\end{pmatrix} = 4 \\left( -4 \\det \\begin{pmatrix} 0 & -4 \\\\ -4 & 0 \\end{pmatrix} \\right) = 4(-4(0 - 16)) = 4(64) = 256 $$\n\n最后，我们证明域判别式 $D_K$ 等于这个值。一个整环 $\\mathcal{A}$ 的任意 $\\mathbb{Z}$-基 $\\{\\alpha_0, \\dots, \\alpha_3\\}$ 的判别式与域判别式 $D_K$ 通过公式 $\\Delta(\\{\\alpha_i\\}) = [\\mathcal{O}_K : \\mathcal{A}]^2 D_K$ 相关联。在我们的情况下，对于整环 $\\mathcal{A} = \\mathbb{Z}[\\zeta_8]$，该公式变为：\n$$ \\Delta(\\{1,\\zeta_8,\\zeta_8^2,\\zeta_8^3\\}) = [\\mathcal{O}_K : \\mathbb{Z}[\\zeta_8]]^2 D_K $$\n$$ 256 = [\\mathcal{O}_K : \\mathbb{Z}[\\zeta_8]]^2 D_K $$\n我们现在使用分圆域 $\\mathbb{Q}(\\zeta_n)$ 的标准判别式公式：\n$$ D_{\\mathbb{Q}(\\zeta_n)} = (-1)^{\\phi(n)/2} \\frac{n^{\\phi(n)}}{\\prod_{p|n} p^{\\phi(n)/(p-1)}} $$\n对于 $n=8$，我们有 $\\phi(8) = 8(1 - 1/2) = 4$，且唯一整除 $8$ 的素数是 $p=2$。\n$$ D_K = D_{\\mathbb{Q}(\\zeta_8)} = (-1)^{4/2} \\frac{8^4}{2^{4/(2-1)}} = (-1)^2 \\frac{(2^3)^4}{2^4} = 1 \\cdot \\frac{2^{12}}{2^4} = 2^8 = 256 $$\n这个结果与以下事实一致：在 $\\mathbb{Q}(\\zeta_8)$ 中唯一分歧的素数是 $p=2$，因此域判别式 $D_K$ 必须是 $2$ 的幂。\n将 $D_K=256$ 代入指数方程：\n$$ 256 = [\\mathcal{O}_K : \\mathbb{Z}[\\zeta_8]]^2 \\cdot 256 $$\n这意味着 $[\\mathcal{O}_K : \\mathbb{Z}[\\zeta_8]]^2 = 1$。由于指数是正整数，我们必有 $[\\mathcal{O}_K : \\mathbb{Z}[\\zeta_8]] = 1$。\n这意味着整环 $\\mathbb{Z}[\\zeta_8]$ 等于极大整环 $\\mathcal{O}_K$。因此，$\\mathbb{Z}[\\zeta_8]$ 的 $\\mathbb{Z}$-基 $\\{1, \\zeta_8, \\zeta_8^2, \\zeta_8^3\\}$ 是 $\\mathcal{O}_K$ 的一个整基。域判别式为 $D_K = 256$。", "answer": "$$\\boxed{256}$$", "id": "3023010"}, {"introduction": "在确定了整数环的结构之后，下一步是研究其内部元素的算术性质。迹 (trace) 和范数 (norm) 是代数整数的两个基本不变量。本练习将聚焦于一个关键元素的计算：$1-\\zeta_p$ 的迹与范数，这个特定元素的范数与有理素数 $p$ 在分圆域中的分解行为直接相关。[@problem_id:3022983]", "problem": "设 $n\\geq 3$ 为一整数，设 $\\zeta_{n}$ 为一个固定的 $n$ 次本原单位根，并设 $K=\\mathbb{Q}(\\zeta_{n})$。$K$ 的整数环是 $\\mathbb{Z}[\\zeta_{n}]$，因此 $K$ 中的每个代数整数都可以写成 $\\alpha=\\sum_{j=0}^{\\varphi(n)-1} a_{j}\\zeta_{n}^{j}$ 的形式，其中 $a_{j}\\in\\mathbb{Z}$，$\\varphi$ 表示欧拉$\\varphi$函数。仅使用从 $K$ 到 $\\mathbb{Q}$ 的域迹和域范数的定义，以及关于分圆域和对称多项式的标准基础知识，推导 $\\mathrm{Tr}_{K/\\mathbb{Q}}(\\alpha)$ 和 $N_{K/\\mathbb{Q}}(\\alpha)$ 关于 $\\zeta_{n}$ 的共轭的对称函数的表达式。然后，将情况特殊化到 $n=7$ 和元素 $\\alpha=1-\\zeta_{7}$，并明确计算由 $\\alpha$ 的迹和范数组成的有序对。以精确形式给出最终的有序对。如果进行任何数值计算，请勿四舍五入。你的最终答案必须是单个解析表达式。", "solution": "设 $K = \\mathbb{Q}(\\zeta_n)$，其中 $\\zeta_n$ 是一个 $n$ 次本原单位根。这个域扩张的次数为 $[K:\\mathbb{Q}] = \\varphi(n)$，其中 $\\varphi$ 是欧拉$\\varphi$函数。$\\zeta_n$ 在 $\\mathbb{Q}$ 上的极小多项式是第 $n$ 个分圆多项式 $\\Phi_n(x)$。$\\Phi_n(x)$ 的根是所有的 $n$ 次本原单位根，这些根正是 $\\zeta_n$ 的伽罗瓦共轭。设这些共轭的集合为 $\\mathcal{C} = \\{\\zeta_n^k \\mid 1 \\le k < n, \\gcd(k,n)=1\\}$。伽罗瓦群 $\\mathrm{Gal}(K/\\mathbb{Q})$ 由自同构 $\\sigma_k: \\zeta_n \\mapsto \\zeta_n^k$ 组成，其中 $k$ 取遍该集合中的所有值。\n\n设 $\\alpha$ 是 $K$ 中的一个代数整数。根据题意，$\\alpha \\in \\mathbb{Z}[\\zeta_n]$，所以我们可以将 $\\alpha$ 写成一个以 $\\zeta_n$ 为变量、整系数的多项式：\n$$ \\alpha = p(\\zeta_n) = \\sum_{j=0}^{\\varphi(n)-1} a_{j}\\zeta_{n}^{j}, \\quad a_j \\in \\mathbb{Z} $$\n$\\alpha$ 的共轭集由 $\\{\\sigma_k(\\alpha) \\mid \\sigma_k \\in \\mathrm{Gal}(K/\\mathbb{Q})\\}$ 给出。将自同构 $\\sigma_k$ 应用于 $\\alpha$ 得到：\n$$ \\sigma_k(\\alpha) = \\sigma_k\\left(\\sum_{j=0}^{\\varphi(n)-1} a_{j}\\zeta_{n}^{j}\\right) = \\sum_{j=0}^{\\varphi(n)-1} a_{j}\\sigma_k(\\zeta_{n}^j) = \\sum_{j=0}^{\\varphi(n)-1} a_{j}(\\sigma_k(\\zeta_n))^j = \\sum_{j=0}^{\\varphi(n)-1} a_{j}(\\zeta_{n}^k)^j = p(\\zeta_n^k) $$\n\n**迹和范数的一般表达式**\n\n从 $K$ 到 $\\mathbb{Q}$ 的 $\\alpha$ 的迹定义为其所有共轭之和：\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(\\alpha) = \\sum_{\\substack{1 \\le k < n \\\\ \\gcd(k,n)=1}} \\sigma_k(\\alpha) = \\sum_{\\substack{1 \\le k < n \\\\ \\gcd(k,n)=1}} p(\\zeta_n^k) $$\n代入 $p$ 的多项式表达式并交换求和顺序：\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(\\alpha) = \\sum_{\\substack{1 \\le k < n \\\\ \\gcd(k,n)=1}} \\sum_{j=0}^{\\varphi(n)-1} a_j (\\zeta_n^k)^j = \\sum_{j=0}^{\\varphi(n)-1} a_j \\left( \\sum_{\\substack{1 \\le k < n \\\\ \\gcd(k,n)=1}} (\\zeta_n^k)^j \\right) $$\n内层和是 $\\zeta_n$ 的共轭的 $j$ 次幂之和。这是 $j$ 次幂和对称多项式 $P_j$ 在共轭集 $\\mathcal{C}$ 上的取值。因此，迹是这些对称函数的线性组合：\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(\\alpha) = \\sum_{j=0}^{\\varphi(n)-1} a_j P_j(\\mathcal{C}) $$\n\n从 $K$ 到 $\\mathbb{Q}$ 的 $\\alpha$ 的范数定义为其所有共轭之积：\n$$ N_{K/\\mathbb{Q}}(\\alpha) = \\prod_{\\substack{1 \\le k < n \\\\ \\gcd(k,n)=1}} \\sigma_k(\\alpha) = \\prod_{\\substack{1 \\le k < n \\\\ \\gcd(k,n)=1}} p(\\zeta_n^k) $$\n该表达式是关于 $\\zeta_n$ 的共轭的对称多项式。根据对称多项式基本定理，它可以表示为 $\\zeta_n$ 的共轭的初等对称多项式的多项式，而这些初等对称多项式（除去符号）正是极小多项式 $\\Phi_n(x)$ 的系数。这个乘积也称为多项式 $p(x)$ 和 $\\Phi_n(x)$ 的结式，记为 $\\mathrm{Res}(p, \\Phi_n)$。\n\n**特殊情况 $n=7$ 和 $\\alpha=1-\\zeta_7$**\n\n对于 $n=7$（一个素数），$\\varphi(7) = 7-1 = 6$。该域为 $K = \\mathbb{Q}(\\zeta_7)$，是 $\\mathbb{Q}$ 的一个 6 次扩张。$\\zeta_7$ 的极小多项式是第 7 个分圆多项式：\n$$ \\Phi_7(x) = \\frac{x^7-1}{x-1} = x^6 + x^5 + x^4 + x^3 + x^2 + x + 1 $$\n$\\zeta_7$ 的共轭是 $\\{\\zeta_7^k \\mid k=1, 2, 3, 4, 5, 6\\}$。\n我们考虑的元素是 $\\alpha = 1-\\zeta_7$。这里，$\\alpha = p(\\zeta_7)$，其中 $p(x) = 1-x$。\n\n**迹的计算**\n$\\alpha = 1-\\zeta_7$ 的共轭是 $\\sigma_k(1-\\zeta_7) = 1-\\sigma_k(\\zeta_7) = 1-\\zeta_7^k$，其中 $k \\in \\{1, 2, 3, 4, 5, 6\\}$。\n迹是这些共轭的和：\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(1-\\zeta_7) = \\sum_{k=1}^6 (1-\\zeta_7^k) = \\sum_{k=1}^6 1 - \\sum_{k=1}^6 \\zeta_7^k $$\n第一个和是 $6$。第二个和是 $\\Phi_7(x)$ 的所有根之和。根据韦达定理，$\\Phi_7(x)$ 的根之和是 $x^5$ 系数的相反数。$\\Phi_7(x)$ 中 $x^5$ 的系数是 $1$。\n因此，$\\sum_{k=1}^6 \\zeta_7^k = -1$。\n将此代入迹的表达式：\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(1-\\zeta_7) = 6 - (-1) = 7 $$\n\n或者，利用迹算子的线性性：\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(1-\\zeta_7) = \\mathrm{Tr}_{K/\\mathbb{Q}}(1) - \\mathrm{Tr}_{K/\\mathbb{Q}}(\\zeta_7) $$\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(1) = \\sum_{k=1}^6 \\sigma_k(1) = \\sum_{k=1}^6 1 = 6 $$\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(\\zeta_7) = \\sum_{k=1}^6 \\sigma_k(\\zeta_7) = \\sum_{k=1}^6 \\zeta_7^k = -1 $$\n因此，$\\mathrm{Tr}_{K/\\mathbb{Q}}(1-\\zeta_7) = 6 - (-1) = 7$。\n\n**范数的计算**\n范数是共轭的积：\n$$ N_{K/\\mathbb{Q}}(1-\\zeta_7) = \\prod_{k=1}^6 (1-\\zeta_7^k) $$\n分圆多项式 $\\Phi_7(x)$ 可以写成因式分解形式：\n$$ \\Phi_7(x) = \\prod_{k=1}^6 (x - \\zeta_7^k) $$\n将该多项式在 $x=1$ 处求值得到：\n$$ \\Phi_7(1) = \\prod_{k=1}^6 (1 - \\zeta_7^k) $$\n这正是 $1-\\zeta_7$ 的范数的表达式。我们可以通过将 $x=1$ 代入其多项式形式来求 $\\Phi_7(1)$ 的值：\n$$ \\Phi_7(1) = 1^6 + 1^5 + 1^4 + 1^3 + 1^2 + 1^1 + 1 = 1+1+1+1+1+1+1=7 $$\n因此，范数为：\n$$ N_{K/\\mathbb{Q}}(1-\\zeta_7) = 7 $$\n\n由 $\\alpha=1-\\zeta_7$ 的迹和范数组成的有序对是 $(7, 7)$。", "answer": "$$ \\boxed{\\begin{pmatrix} 7 & 7 \\end{pmatrix}} $$", "id": "3022983"}, {"introduction": "现在，我们将从对单个元素的具体计算，转向探索整数环的一个更深刻的全局不变量：理想类群。类数（class number）度量了整数环中唯一因子分解失败的程度，是代数数论的核心概念。本练习介绍了 Kummer 判别法和“正则素数”的概念，它揭示了伯努利数（来自分析学）与类数（来自代数学）之间惊人的联系，你将通过编写算法来亲手探索这一深刻理论。[@problem_id:3023012]", "problem": "设 $p$ 是一个奇素数，并设 $\\zeta_{p}$ 表示一个本原 $p$ 次单位根。考虑分圆域 $\\mathbb{Q}(\\zeta_{p})$ 及其整数环 $\\mathcal{O}_{\\mathbb{Q}(\\zeta_{p})}$。如果对于所有满足 $2 \\leq k \\leq p - 3$ 的偶数 $k$，素数 $p$ 都不能整除 Bernoulli 数 $B_{k}$ 的分子（已化为最简分数），则该素数 $p$ 被称为正则素数。Bernoulli 数 $\\{B_{n}\\}_{n \\geq 0}$ 由指数生成函数定义：\n$$\n\\frac{t}{e^{t} - 1} = \\sum_{n=0}^{\\infty} \\frac{B_{n}}{n!} t^{n},\n$$\n该式与形式幂级数的标准操作相结合，可得到熟知的递推关系：\n$$\nB_{m} = -\\frac{1}{m+1} \\sum_{k=0}^{m-1} \\binom{m+1}{k} B_{k}, \\quad \\text{for } m \\geq 1, \\quad \\text{with } B_{0} = 1.\n$$\n使用这些基本定义，设计并实现一个算法，该算法能够：\n- 计算所有直到 $p-3$ 的 $n$ 所对应的 $B_{n}$，结果为最简有理数。\n- 对于满足 $2 \\leq k \\leq p-3$ 的偶数 $k$，通过检查 $p$ 是否整除 $B_{k}$ 的分子来判断 $p$ 是否为正则素数。\n- 通过 Kummer 判别法，使用您的结果推断其对整数环 $\\mathcal{O}_{\\mathbb{Q}(\\zeta_{p})}$ 算术性质的影响：$p$ 整除 $\\mathbb{Q}(\\zeta_{p})$ 的类数，当且仅当 $p$ 整除某个 $B_{k}$ 的分子，其中 $k$ 为满足 $2 \\leq k \\leq p-3$ 的偶数。特别地，这将确定 $\\mathcal{O}_{\\mathbb{Q}(\\zeta_{p})}$ 的理想类群的 $p$-准素部分是否非平凡。\n\n您的程序必须评估以下素数测试集：\n- $p = 3$ (边界情况，在 $2 \\leq k \\leq p-3$ 范围内没有偶数 $k$),\n- $p = 5$ (小的正则素数),\n- $p = 23$ (中等大小的素数),\n- $p = 37$ (要求的主要案例),\n- $p = 59$ (更大的素数以增加计算压力)。\n\n对于每个测试用例素数 $p$，生成以下由基本类型组成的列表作为输出：\n- 一个布尔值，指示 $p$ 是否为正则素数。\n- 一个整数，给出在 $[2, p-3]$ 范围内使得 $p$ 整除 $B_{k}$ 分子的偶数索引 $k$ 的数量。\n- 一个布尔值，指示 $p$ 是否整除 $\\mathbb{Q}(\\zeta_{p})$ 的类数（根据 Kummer 判别法，这在逻辑上等同于正则性的否定，但您必须按规定应用该判别法来计算）。\n- 一个整数，给出在 $[2, p-3]$ 范围内使得 $p$ 整除 $B_{k}$ 分子的最小偶数 $k$，如果不存在这样的 $k$ 则为 $0$。\n\n您的程序应生成单行输出，其中包含五个测试用例的结果，这些结果被聚合成一个由五个“每个素数的结果列表”组成的逗号分隔列表，且所有内容都包含在一对单独的方括号内。例如，输出格式必须为：\n$$\n[\\,[\\text{布尔值},\\text{整数},\\text{布尔值},\\text{整数}],\\ldots,[\\text{布尔值},\\text{整数},\\text{布尔值},\\text{整数}]\\,].\n$$\n此问题不涉及物理单位或角度。所有答案必须是指定的精确布尔值和整数。最终代码必须是自包含的，且无需任何输入。", "solution": "该问题要求基于 Bernoulli 数 $B_k$ 的性质，分析几个奇素数 $p$ 的正则性。根据定义，如果一个素数 $p$ 对于 $2 \\leq k \\leq p-3$ 范围内的所有偶数索引 $k$，都不能整除 Bernoulli 数 $B_k$ 的分子，则该素数 $p$ 是正则的。问题给出了 Bernoulli 数的标准指数生成函数，\n$$\n\\frac{t}{e^{t} - 1} = \\sum_{n=0}^{\\infty} \\frac{B_{n}}{n!} t^{n},\n$$\n以及一个用于计算它们的相应递推关系：\n$$\nB_{m} = -\\frac{1}{m+1} \\sum_{k=0}^{m-1} \\binom{m+1}{k} B_{k}, \\quad \\text{for } m \\geq 1,\n$$\n初始条件为 $B_0 = 1$。任务是实现一个算法，以确定给定素数集 $\\{3, 5, 23, 37, 59\\}$ 的正则性，并使用 Kummer 判别法推断分圆域 $\\mathbb{Q}(\\zeta_p)$ 的整数环 $\\mathcal{O}_{\\mathbb{Q}(\\zeta_{p})}$ 的一个关键性质，即其类数是否能被 $p$ 整除。\n\n解决方案的设计与实现基于以下原则和步骤：\n\n1.  **有理数运算**：Bernoulli 数 $B_n$ 是有理数。标准的浮点数运算不适用于此问题，因为它会引入精度误差，导致对整除性的错误判断。为确保数学上的精确性，所有涉及 Bernoulli 数的计算都使用有理数运算执行。为此，我们采用了 Python 的 `fractions.Fraction` 类，因为它将数字存储为任意精度的整数对（分子和分母），并自动将分数化简为其最简形式，这正是检查分子整除性所要求的。\n\n2.  **Bernoulli 数的计算**：需要一种高效的方法来计算 Bernoulli 数序列。提供的递推关系被直接实现。为避免朴素递归方法中固有的冗余计算，Bernoulli 数通过迭代计算并存储（记忆化）在一个列表中。算法首先确定所有测试用例所需的最大索引 $N = \\max(p-3)$。然后，它构建一个 Bernoulli 数列表 $B_0, B_1, \\ldots, B_N$。计算过程如下：\n    - 初始化 $B_0 = 1$。\n    - 对于从 $1$ 到 $N$ 的每个 $m$，使用递推关系计算 $B_m$。此计算涉及二项式系数 $\\binom{m+1}{k}$（使用 `math.comb` 计算）以及对 `Fraction` 对象的算术运算。\n    - 利用 Bernoulli 数的一个已知性质，即对于所有大于 1 的奇数 $m$，有 $B_m=0$，这被用作一个优化，以跳过对这些索引的求和计算。\n\n3.  **正则性验证与数据收集**：对于测试集中的每个素数 $p$，算法确定其正则性并收集指定的数据点。\n    - 对于给定的素数 $p$，算法遍历指定范围 $2 \\leq k \\leq p-3$ 内的所有偶数 $k$。请注意，对于 $p=3$，该范围为空，因此 $p=3$ 是空泛地正则的。\n    - 在每次迭代中，算法访问预先计算的 Bernoulli 数 $B_k$。由于 `fractions.Fraction` 将数字保持在最简形式，其分子可以通过 `.numerator` 属性直接访问。\n    - 执行一个整除性测试，即 `B_k.numerator % p == 0`。\n    - 如果该测试对任何 $k$ 值为真，则素数 $p$ 被标记为非正则。算法会维护此类 $k$ 值的计数，并记录满足该条件的最小 $k$ 值。\n    - 指示 $p$ 是否整除 $\\mathbb{Q}(\\zeta_p)$ 类数的布尔值是通过应用 Kummer 判别法来确定的，该判别法指出此性质等价于 $p$ 是非正则的。因此，这个布尔值是 $p$ 的正则性状态的逻辑非。\n\n4.  **输出格式化**：对于每个素数 $p$ 的结果——一个包含正则性状态（布尔值）、“非正则”索引的数量（整数）、类数整除性（布尔值）以及最小此类索引（整数，或为 $0$）的列表——被聚合起来。最终的结果集合根据问题要求，被格式化为表示列表之列表的单个字符串。\n\n这种系统性的方法确保了所有计算在数学上都是可靠的，并且所得的素数分类根据给定的定义是正确的。\n```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport math\nfrom fractions import Fraction\n\ndef solve():\n    \"\"\"\n    Solves the problem of determining the regularity of primes based on Bernoulli numbers.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [3, 5, 23, 37, 59]\n\n    # Determine the maximum Bernoulli number index needed.\n    # The check for a prime p goes up to k = p-3. The largest p is 59.\n    max_k_needed = max([p - 3 for p in test_cases if p - 3 >= 0] or [0])\n\n    # Pre-compute all required Bernoulli numbers up to max_k_needed.\n    # This avoids re-computation for each prime and is more efficient.\n    bernoulli_numbers = [Fraction(0)] * (max_k_needed + 1)\n    if max_k_needed >= 0:\n        bernoulli_numbers[0] = Fraction(1)  # B_0 = 1\n\n    for m in range(1, max_k_needed + 1):\n        # Optimization: B_m = 0 for all odd m > 1.\n        if m > 1 and m % 2 != 0:\n            bernoulli_numbers[m] = Fraction(0)\n            continue\n        \n        # Use the provided recurrence relation:\n        # B_m = -1/(m+1) * sum_{k=0}^{m-1} (m+1 choose k) * B_k\n        current_sum = Fraction(0)\n        for k in range(m):\n            # math.comb(n, k) computes the binomial coefficient \"n choose k\".\n            term = math.comb(m + 1, k) * bernoulli_numbers[k]\n            current_sum += term\n        \n        bernoulli_numbers[m] = -current_sum / (m + 1)\n\n    all_results = []\n    for p in test_cases:\n        # Initialize results for the current prime p.\n        is_regular = True\n        irregular_indices_count = 0\n        smallest_irregular_k = 0\n        \n        # A prime p is irregular if it divides the numerator of B_k for some\n        # even k in the range 2 = k = p-3.\n        # This range is empty for p=3, so p=3 is vacuously regular.\n        if p > 3:\n            # Iterate through even k in the specified range.\n            # The upper bound of range() is exclusive, so use p-2.\n            for k in range(2, p - 2, 2):\n                # The Fraction object is always in lowest terms.\n                B_k = bernoulli_numbers[k]\n                if B_k.numerator % p == 0:\n                    is_regular = False\n                    irregular_indices_count += 1\n                    # Record the first k that causes irregularity.\n                    if smallest_irregular_k == 0:\n                        smallest_irregular_k = k\n        \n        # According to Kummer's criterion, p divides the class number of Q(zeta_p)\n        # if and only if p is an irregular prime.\n        divides_class_number = not is_regular\n\n        result = [is_regular, irregular_indices_count, divides_class_number, smallest_irregular_k]\n        all_results.append(result)\n\n    # Final print statement in the exact required format.\n    # The format is a list of lists, with no spaces following internal commas.\n    # e.g., [[True,0,False,0],[True,0,False,0],...]\n    inner_results_str = [f\"[{','.join(map(str, r))}]\" for r in all_results]\n    print(f\"[{','.join(inner_results_str)}]\")\n\nsolve()\n```", "answer": "[[True,0,False,0],[True,0,False,0],[True,0,False,0],[False,1,True,32],[False,1,True,44]]", "id": "3023012"}]}