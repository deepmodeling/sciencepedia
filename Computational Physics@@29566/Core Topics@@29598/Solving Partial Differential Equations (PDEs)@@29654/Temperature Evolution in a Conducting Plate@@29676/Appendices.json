{"hands_on_practices": [{"introduction": "This first practice is a cornerstone exercise, guiding you through building a complete simulation of heat flow in a two-dimensional plate. You will implement the Forward-Time Central-Space (FTCS) scheme to solve the heat equation, a fundamental model for diffusive processes described by $\\frac{\\partial T}{\\partial t} = \\alpha \\nabla^2 T + s$. This exercise will hone your skills in handling different boundary conditions, including periodic and Neumann types, and extracting meaningful data from your simulation results [@problem_id:2445101].", "problem": "Consider a thin conducting plate of uniform thickness modeled as a two-dimensional domain with coordinates $x \\in [0,L_x)$ and $y \\in [0,L_y]$. The temperature field $T(x,y,t)$ evolves according to the Heat Equation, a Partial Differential Equation (PDE), given by\n$$\n\\frac{\\partial T}{\\partial t} = \\alpha \\left( \\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} \\right) + s(x,y,t),\n$$\nwhere $\\alpha$ is the constant thermal diffusivity and $s(x,y,t)$ is a volumetric heating term expressed in units of temperature rate. The boundary condition in the $x$-direction is periodic, meaning $T(0,y,t) = T(L_x,y,t)$ for all $y$ and $t$, which models a thin cylindrical shell obtained by identifying the edges $x=0$ and $x=L_x$. The $y$-direction boundary is thermally insulated (zero normal heat flux), meaning $\\frac{\\partial T}{\\partial y}(x,0,t)=0$ and $\\frac{\\partial T}{\\partial y}(x,L_y,t)=0$ for all $x$ and $t$. The initial condition is uniform: $T(x,y,0) = T_0$ everywhere.\n\nThe source term $s(x,y,t)$ represents a linear heating strip that is uniform along $x$ and confined to a band in $y$. It is defined by\n$$\ns(x,y,t) =\n\\begin{cases}\nH, & \\text{if } y \\in [y_1,y_2] \\text{ and } t \\in [0,\\tau],\\\\\n0, & \\text{otherwise},\n\\end{cases}\n$$\nwith $H$ a constant heating rate. All temperatures must be expressed in Kelvin, all lengths in meters, and all times in seconds. Angles do not appear in this problem. The material and geometry are spatially uniform, and the plate properties do not vary in time.\n\nYour program must numerically evolve $T(x,y,t)$ to a specified final time $t=t_f$ for several parameter sets and then report, for each set:\n- The temperature at the point $(x^\\ast,y^\\ast) = (L_x/4, L_y/2)$ at time $t_f$ (in Kelvin).\n- The temperature at the point $(x^\\ast,y^\\ast) = (3L_x/4, L_y/2)$ at time $t_f$ (in Kelvin).\n- The spatial area average of $T(\\cdot,\\cdot,t_f)$ over the plate (in Kelvin).\n\nTo ensure unambiguous evaluation of the required pointwise quantities, use a uniform grid in $x$ and $y$ defined by the node coordinates $x_i = i\\,L_x/N_x$ for $i \\in \\{0,1,\\dots,N_x-1\\}$ and $y_j = j\\,L_y/(N_y-1)$ for $j \\in \\{0,1,\\dots,N_y-1\\}$. For all test cases below, $(L_x/4, L_y/2)$ and $(3L_x/4, L_y/2)$ coincide with grid nodes under this convention. The area average is the continuous spatial average over the rectangular domain and must be reported in Kelvin.\n\nUse the following material parameter for all tests:\n- Thermal diffusivity $\\alpha = 1.11\\times 10^{-4}\\ \\text{m}^2/\\text{s}$.\n\nUse the following test suite of parameter sets. In each case, the plate is initially at $T_0 = 300\\ \\text{K}$, and $s(x,y,t)$ is specified by a strip of width $w$ and duration $\\tau$ as described above. All outputs must be expressed in Kelvin and rounded to three decimal places.\n\nTest Case A (central strip, heating turns off before $t_f$):\n- $L_x = 0.2\\ \\text{m}$, $L_y = 0.1\\ \\text{m}$.\n- $N_x = 64$, $N_y = 33$, $\\Delta t = 0.002\\ \\text{s}$, $t_f=1.0\\ \\text{s}$.\n- $H = 50\\ \\text{K/s}$, $w = 0.01\\ \\text{m}$, $\\tau = 0.5\\ \\text{s}$.\n- The strip occupies $y \\in [y_1,y_2]$ with $y_1 = (L_y - w)/2$ and $y_2 = (L_y + w)/2$.\n\nTest Case B (strip at the lower insulated edge):\n- $L_x = 0.2\\ \\text{m}$, $L_y = 0.1\\ \\text{m}$.\n- $N_x = 48$, $N_y = 25$, $\\Delta t = 0.002\\ \\text{s}$, $t_f=0.4\\ \\text{s}$.\n- $H = 100\\ \\text{K/s}$, $w = 0.01\\ \\text{m}$, $\\tau = 0.2\\ \\text{s}$.\n- The strip occupies $y \\in [y_1,y_2]$ with $y_1 = 0$ and $y_2 = w$.\n\nTest Case C (no heating):\n- $L_x = 0.2\\ \\text{m}$, $L_y = 0.1\\ \\text{m}$.\n- $N_x = 32$, $N_y = 17$, $\\Delta t = 0.002\\ \\text{s}$, $t_f=0.3\\ \\text{s}$.\n- $H = 0\\ \\text{K/s}$, $w = 0.01\\ \\text{m}$, $\\tau = 0.0\\ \\text{s}$.\n- The strip location is irrelevant.\n\nYour program should produce a single line of output containing the results for all test cases as a comma-separated list enclosed in square brackets. The list must be ordered as\n$$\n[\\ T^{(A)}(L_x/4,L_y/2,t_f),\\ T^{(A)}(3L_x/4,L_y/2,t_f),\\ \\overline{T}^{(A)}(t_f),\\ T^{(B)}(L_x/4,L_y/2,t_f),\\ T^{(B)}(3L_x/4,L_y/2,t_f),\\ \\overline{T}^{(B)}(t_f),\\ T^{(C)}(L_x/4,L_y/2,t_f),\\ T^{(C)}(3L_x/4,L_y/2,t_f),\\ \\overline{T}^{(C)}(t_f)\\ ],\n$$\nwith each entry in Kelvin rounded to three decimal places, where $T^{(\\cdot)}$ denotes the temperature field in the indicated test case and $\\overline{T}^{(\\cdot)}(t_f)$ denotes the spatial area average at time $t_f$.", "solution": "The problem presented is a well-posed initial-boundary value problem for the two-dimensional linear heat equation. It is scientifically grounded, requires a numerical solution, and provides all necessary parameters and conditions. The problem is therefore valid. I will proceed with the solution.\n\nThe governing partial differential equation (PDE) is the heat equation with a source term $s(x,y,t)$:\n$$\n\\frac{\\partial T}{\\partial t} = \\alpha \\left( \\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} \\right) + s(x,y,t)\n$$\nThis equation describes the evolution of the temperature field $T(x,y,t)$ in a domain $x \\in [0,L_x)$, $y \\in [0,L_y]$ with thermal diffusivity $\\alpha$.\n\nThe numerical solution will be obtained using the Finite Difference Method (FDM). I will employ the explicit Forward-Time, Central-Space (FTCS) scheme due to its direct implementation. The continuous domain is discretized into a grid of points $(x_i, y_j, t_n)$ where $x_i = i \\Delta x$, $y_j = j \\Delta y$, and $t_n = n \\Delta t$. The grid parameters are given as $N_x$ and $N_y$, so the spatial steps are $\\Delta x = L_x / N_x$ and $\\Delta y = L_y / (N_y - 1)$. The temperature at a grid point is denoted $T_{i,j}^n \\approx T(x_i, y_j, t_n)$.\n\nThe partial derivatives are approximated as follows:\n- Time derivative (first-order forward difference):\n$$\n\\frac{\\partial T}{\\partial t} \\approx \\frac{T_{i,j}^{n+1} - T_{i,j}^n}{\\Delta t}\n$$\n- Spatial derivatives (second-order central differences):\n$$\n\\frac{\\partial^2 T}{\\partial x^2} \\approx \\frac{T_{i+1,j}^n - 2T_{i,j}^n + T_{i-1,j}^n}{\\Delta x^2}\n$$\n$$\n\\frac{\\partial^2 T}{\\partial y^2} \\approx \\frac{T_{i,j+1}^n - 2T_{i,j}^n + T_{i,j-1}^n}{\\Delta y^2}\n$$\nSubstituting these into the heat equation yields the explicit update rule for the temperature at the next time step, $T_{i,j}^{n+1}$:\n$$\nT_{i,j}^{n+1} = T_{i,j}^n + \\Delta t \\left[ \\alpha \\left( \\frac{T_{i+1,j}^n - 2T_{i,j}^n + T_{i-1,j}^n}{\\Delta x^2} + \\frac{T_{i,j+1}^n - 2T_{i,j}^n + T_{i,j-1}^n}{\\Delta y^2} \\right) + s_{i,j}^n \\right]\n$$\nThis scheme is stable under the Courant-Friedrichs-Lewy (CFL) condition, which for the 2D heat equation is $\\alpha \\Delta t \\left( \\frac{1}{\\Delta x^2} + \\frac{1}{\\Delta y^2} \\right) \\le \\frac{1}{2}$. The parameters given for all test cases satisfy this condition, guaranteeing a stable numerical solution.\n\nThe boundary conditions must be correctly implemented in the finite difference scheme:\n1.  **Periodic boundary in $x$:** $T(0,y,t) = T(L_x,y,t)$. On the discrete grid, this implies $T_{0,j}^n = T_{N_x,j}^n$. The neighbors of a point at $i=0$ are $i=1$ and $i=N_x-1$. For a point at $i=N_x-1$, the neighbors are $i=N_x-2$ and $i=0$. This is efficiently implemented using a circular shift operation on the data array corresponding to the $x$-axis.\n\n2.  **Insulated (Neumann) boundary in $y$:** $\\frac{\\partial T}{\\partial y} = 0$ at $y=0$ ($j=0$) and $y=L_y$ ($j=N_y-1$). A second-order accurate central difference for the derivative using a \"ghost point\" outside the domain is employed. For $j=0$, the condition $\\frac{T_{i,1}^n - T_{i,-1}^n}{2\\Delta y} = 0$ implies the ghost point value $T_{i,-1}^n = T_{i,1}^n$. The Laplacian term at $j=0$ becomes:\n    $$\n    \\left. \\frac{\\partial^2 T}{\\partial y^2} \\right|_{j=0} \\approx \\frac{T_{i,1}^n - 2T_{i,0}^n + T_{i,-1}^n}{\\Delta y^2} = \\frac{2(T_{i,1}^n - T_{i,0}^n)}{\\Delta y^2}\n    $$\n    Similarly, for $j=N_y-1$, the ghost point $T_{i,N_y}^n = T_{i,N_y-2}^n$, and the Laplacian term is:\n    $$\n    \\left. \\frac{\\partial^2 T}{\\partial y^2} \\right|_{j=N_y-1} \\approx \\frac{2(T_{i,N_y-2}^n - T_{i,N_y-1}^n)}{\\Delta y^2}\n    $$\n\nThe simulation starts from the uniform initial condition $T(x,y,0) = T_0$. The FTCS update rule is applied iteratively for a total number of steps equal to $t_f/ \\Delta t$. The source term $s_{i,j}^n$ is applied at each step, taking the value $H$ if the grid point $(x_i, y_j)$ is within the heating strip and the current time $t_n$ is less than $\\tau$, and $0$ otherwise.\n\nAfter the final time $t_f$ is reached, the required quantities are extracted from the final temperature field $T_{i,j}^{final}$:\n-   **Pointwise temperatures:** The values are read directly from the grid nodes corresponding to $(L_x/4, L_y/2)$ and $(3L_x/4, L_y/2)$. The grid is constructed such that these are exact grid points with indices $i = N_x/4$ (or $i=3N_x/4$) and $j = (N_y-1)/2$.\n-   **Spatial area average:** The continuous average $\\overline{T}(t_f) = \\frac{1}{L_x L_y} \\iint T(x,y,t_f) \\,dx\\,dy$ is computed numerically. The integral is evaluated using a composite quadrature rule. Due to periodicity in $x$, the integral $\\int_0^{L_x} f(x) dx$ is best approximated by a rectangular rule: $\\Delta x \\sum_{i=0}^{N_x-1} f(x_i)$. For the non-periodic $y$ direction, the trapezoidal rule is appropriate: $\\int_0^{L_y} g(y) dy \\approx \\text{np.trapz}(g, \\text{dx=}\\Delta y)$. Combining these, the double integral is computed by first integrating along the $y$-axis for each $x_i$ using the trapezoidal rule, and then summing the results along the $x$-axis, scaled by $\\Delta x$. The final value is this integral divided by the total area $L_x L_y$.\n\nAs a verification, the evolution of the area-averaged temperature can be determined analytically. Integrating the PDE over the domain and applying the divergence theorem with the given zero-flux boundary conditions yields $\\frac{d\\overline{T}}{dt} = \\frac{1}{L_y} H w$ for $t \\le \\tau$, and $0$ for $t > \\tau$. The solution is $\\overline{T}(t_f) = T_0 + \\frac{Hw}{L_y} \\min(t_f, \\tau)$. For Case C where $H=0$, the temperature field must remain constant at $T_0=300\\,\\text{K}$ for all time. These analytical results serve as a rigorous check on the numerical implementation.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 2D heat equation for the specified test cases and prints the results.\n    \"\"\"\n    \n    # Material parameter\n    ALPHA = 1.11e-4  # m^2/s\n    T0 = 300.0  # K\n\n    test_cases = [\n        # Test Case A\n        {\n            \"Lx\": 0.2, \"Ly\": 0.1, \"Nx\": 64, \"Ny\": 33, \n            \"dt\": 0.002, \"tf\": 1.0, \n            \"H\": 50.0, \"w\": 0.01, \"tau\": 0.5,\n            \"strip_type\": \"central\"\n        },\n        # Test Case B\n        {\n            \"Lx\": 0.2, \"Ly\": 0.1, \"Nx\": 48, \"Ny\": 25, \n            \"dt\": 0.002, \"tf\": 0.4, \n            \"H\": 100.0, \"w\": 0.01, \"tau\": 0.2,\n            \"strip_type\": \"lower_edge\"\n        },\n        # Test Case C\n        {\n            \"Lx\": 0.2, \"Ly\": 0.1, \"Nx\": 32, \"Ny\": 17, \n            \"dt\": 0.002, \"tf\": 0.3,\n            \"H\": 0.0, \"w\": 0.01, \"tau\": 0.0,\n            \"strip_type\": \"irrelevant\"\n        }\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        # Extract parameters\n        Lx, Ly, Nx, Ny = case[\"Lx\"], case[\"Ly\"], case[\"Nx\"], case[\"Ny\"]\n        dt, tf = case[\"dt\"], case[\"tf\"]\n        H, w, tau = case[\"H\"], case[\"w\"], case[\"tau\"]\n        strip_type = case[\"strip_type\"]\n\n        # Grid setup\n        dx = Lx / Nx\n        dy = Ly / (Ny - 1)\n        \n        # Grid coordinates\n        y_coords = np.linspace(0, Ly, Ny)\n        x_coords = np.linspace(0, Lx, Nx, endpoint=False)\n\n        # Initialize temperature field\n        T = np.full((Ny, Nx), T0, dtype=np.float64)\n\n        # Define heating strip location\n        if strip_type == \"central\":\n            y1 = (Ly - w) / 2\n            y2 = (Ly + w) / 2\n        elif strip_type == \"lower_edge\":\n            y1 = 0.0\n            y2 = w\n        else: # \"irrelevant\" or other\n            y1, y2 = -1.0, -1.0 # No heating should occur\n\n        # Pre-calculate source term mask\n        source_mask = np.zeros_like(T)\n        if H > 0:\n            # Add a small epsilon for robust float comparison at boundaries\n            y_indices = np.where((y_coords >= y1 - 1e-9)  (y_coords = y2 + 1e-9))[0]\n            source_mask[y_indices, :] = H\n\n        # Time-stepping loop\n        num_steps = int(round(tf / dt))\n        for n in range(num_steps):\n            # Calculate laplacian\n            # x-direction (periodic)\n            T_xx = (np.roll(T, -1, axis=1) - 2 * T + np.roll(T, 1, axis=1)) / (dx * dx)\n            \n            # y-direction (Neumann)\n            T_yy = np.zeros_like(T)\n            # Interior points\n            T_yy[1:-1, :] = (T[2:, :] - 2 * T[1:-1, :] + T[:-2, :]) / (dy * dy)\n            # Boundary y=0\n            T_yy[0, :] = 2 * (T[1, :] - T[0, :]) / (dy * dy)\n            # Boundary y=Ly\n            T_yy[-1, :] = 2 * (T[-2, :] - T[-1, :]) / (dy * dy)\n            \n            laplacian = T_xx + T_yy\n            \n            # Current source term\n            current_time = (n + 1) * dt # time at end of step\n            s_current = source_mask if current_time = tau else 0.0\n            \n            # Update temperature using FTCS scheme\n            T += dt * (ALPHA * laplacian + s_current)\n        \n        # --- Post-processing ---\n        \n        # 1. Pointwise temperatures\n        # Indices for (Lx/4, Ly/2) and (3Lx/4, Ly/2)\n        ix1 = Nx // 4\n        ix2 = 3 * Nx // 4\n        iy = (Ny - 1) // 2\n        \n        T_pt1 = T[iy, ix1]\n        T_pt2 = T[iy, ix2]\n        \n        # 2. Spatial area average\n        # Integrate along y (non-periodic) using trapezoidal rule\n        integral_y = np.trapz(T, dx=dy, axis=0) # Result is a 1D array of size Nx\n        # Integrate along x (periodic) using rectangular rule (summation)\n        total_integral = np.sum(integral_y) * dx\n        avg_T = total_integral / (Lx * Ly)\n\n        # Store results for this case\n        all_results.extend([T_pt1, T_pt2, avg_T])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{val:.3f}' for val in all_results)}]\")\n\nsolve()\n```", "id": "2445101"}, {"introduction": "Building a simulation is only half the battle; a computational scientist must also understand the behavior of their chosen numerical methods. This practice presents a thought experiment to analyze the Forward-Time Central-Space (FTCS) scheme at the edge of its stability [@problem_id:2445107]. By examining the amplification factor $G$ for a given spatial mode, you will gain a profound, practical insight into the origins of numerical instability, governed by the dimensionless Fourier number $r = \\alpha \\Delta t / (\\Delta x)^2$.", "problem": "A thin, homogeneous conducting plate is modeled along one spatial coordinate by the one-dimensional heat equation, representing temperature evolution along a cut of the plate where temperature is uniform across the thickness. The governing equation is $ \\partial T / \\partial t = \\alpha \\, \\partial^2 T / \\partial x^2 $, where $T(x,t)$ is temperature and $\\alpha$ is the thermal diffusivity. Consider a uniform grid with spacing $\\Delta x$ and time step $\\Delta t$, indexed by $i \\in \\{0,1,\\dots,N-1\\}$ and $n \\in \\{0,1,2,\\dots\\}$, with periodic boundary conditions $T_0^n = T_N^n$ and $T_i^n \\equiv T(x_i, t_n)$. Using the Forward-Time Central-Space (FTCS) scheme, the explicit update is\n$$\nT_i^{n+1} \\;=\\; T_i^n \\;+\\; r \\,\\big( T_{i+1}^n \\;-\\; 2 T_i^n \\;+\\; T_{i-1}^n \\big),\n$$\nwhere the dimensionless Fourier number is $ r \\equiv \\alpha \\,\\Delta t / (\\Delta x)^2 $.\n\nSuppose the initial condition is the highest-wavenumber alternating grid pattern $T_i^0 = (-1)^i$ on a grid with even $N$ (so that the pattern is compatible with periodicity). You are interested in numerical oscillations and stability when the Fourier number $r$ is near the FTCS stability limit.\n\nWhich of the following statements are correct? Select all that apply.\n\nA. For $r = 1/2$, the magnitude of the initial alternating mode remains constant while the sign at each grid point flips at every time step.\n\nB. For $r = 0.49$, the temperature at each grid point decays monotonically in time without any sign change.\n\nC. For $r = 0.49$, the maximum absolute value across grid points decreases at every time step, while the sign at each grid point alternates at each time step.\n\nD. For $r = 0.51$, the solution grows without bound in magnitude while alternating in sign at each time step.\n\nE. For $r = 0.20$, any non-constant spatial Fourier mode decays in time without temporal sign reversal at any grid point.", "solution": "To analyze the stability and behavior of the Forward-Time Central-Space (FTCS) numerical scheme for the one-dimensional heat equation, we perform a von Neumann stability analysis. We consider a single spatial Fourier mode for the temperature field, $T_i^n$, at grid point $i$ and time step $n$:\n$$\nT_i^n = \\hat{T}^n(k) e^{\\mathrm{i} k x_i} = G^n \\hat{T}^0(k) e^{\\mathrm{i} k (i \\Delta x)}\n$$\nwhere $k$ is the wavenumber, $x_i = i \\Delta x$ is the spatial coordinate, $\\hat{T}^n(k)$ is the amplitude of the mode at time step $n$, and $G \\equiv G(k)$ is the amplification factor per time step. The symbol $\\mathrm{i}$ denotes the imaginary unit.\n\nSubstituting this form into the FTCS update equation:\n$$\nT_i^{n+1} = T_i^n + r \\left( T_{i+1}^n - 2 T_i^n + T_{i-1}^n \\right)\n$$\nwhere $r = \\alpha \\Delta t / (\\Delta x)^2$, we obtain:\n$$\nG \\hat{T}^n(k) e^{\\mathrm{i} k i \\Delta x} = \\hat{T}^n(k) e^{\\mathrm{i} k i \\Delta x} + r \\hat{T}^n(k) \\left( e^{\\mathrm{i} k (i+1) \\Delta x} - 2e^{\\mathrm{i} k i \\Delta x} + e^{\\mathrm{i} k (i-1) \\Delta x} \\right)\n$$\nDividing by $\\hat{T}^n(k) e^{\\mathrm{i} k i \\Delta x}$ yields the amplification factor $G$:\n$$\nG = 1 + r \\left( e^{\\mathrm{i} k \\Delta x} - 2 + e^{-\\mathrm{i} k \\Delta x} \\right)\n$$\nUsing the identity $e^{\\mathrm{i}\\theta} + e^{-\\mathrm{i}\\theta} = 2 \\cos(\\theta)$, this simplifies to:\n$$\nG(k) = 1 + 2r(\\cos(k \\Delta x) - 1)\n$$\nFinally, using the half-angle identity $1 - \\cos(\\theta) = 2\\sin^2(\\theta/2)$, we arrive at the standard expression for the amplification factor:\n$$\nG(k) = 1 - 4r \\sin^2\\left(\\frac{k \\Delta x}{2}\\right)\n$$\nThe problem specifies an initial condition $T_i^0 = (-1)^i$. This represents the highest-wavenumber (Nyquist frequency) mode that can be resolved on the grid, corresponding to a wavelength of $2 \\Delta x$. This means $k \\Delta x = \\pi$. For this specific mode, the amplification factor simplifies to:\n$$\nG = G(k \\Delta x = \\pi) = 1 - 4r \\sin^2\\left(\\frac{\\pi}{2}\\right) = 1 - 4r(1)^2 = 1 - 4r\n$$\nThe numerical solution for this initial condition is then given by $T_i^n = G^n T_i^0 = (1-4r)^n (-1)^i$. We now evaluate each statement.\n\n**A. For $r = 1/2$, the magnitude of the initial alternating mode remains constant while the sign at each grid point flips at every time step.**\nFor $r = 1/2$, the amplification factor is $G = 1 - 4(1/2) = 1 - 2 = -1$.\nThe solution becomes $T_i^n = (-1)^n (-1)^i = (-1)^{n+i}$.\nThe magnitude at each grid point is $|T_i^n| = |(-1)^{n+i}| = 1$. This magnitude is constant for all time steps $n$.\nThe evolution from one time step to the next is $T_i^{n+1} = G \\cdot T_i^n = -T_i^n$. This shows that the sign of the temperature at each grid point flips at every time step.\nThe statement is **Correct**.\n\n**B. For $r = 0.49$, the temperature at each grid point decays monotonically in time without any sign change.**\nFor $r = 0.49$, the amplification factor is $G = 1 - 4(0.49) = 1 - 1.96 = -0.96$.\nThe solution is $T_i^n = (-0.96)^n (-1)^i$.\nAt any fixed grid point $i$, the time-dependent factor is $(-0.96)^n$. As $n$ increases ($0, 1, 2, ...$), this factor becomes $1, -0.96, (-0.96)^2, ...$, which alternates in sign. Therefore, the temperature at each grid point changes sign at every time step. The claim \"without any sign change\" is false.\nMonotonic decay would mean $T_i^{n+1} \\le T_i^n$ (for positive $T_i^0$) or $T_i^{n+1} \\ge T_i^n$ (for negative $T_i^0$), which is not the case due to the sign oscillation. The magnitude $|T_i^n| = (0.96)^n$ decays monotonically, but the value $T_i^n$ does not.\nThe statement is **Incorrect**.\n\n**C. For $r = 0.49$, the maximum absolute value across grid points decreases at every time step, while the sign at each grid point alternates at each time step.**\nAs calculated for B, $G = -0.96$.\nThe solution is $T_i^n = (-0.96)^n (-1)^i$.\nThe maximum absolute value across all grid points at time step $n$ is $\\max_i |T_i^n| = \\max_i |(-0.96)^n (-1)^i| = |(-0.96)^n| = (0.96)^n$.\nSince $0  0.96  1$, the sequence $(0.96)^n$ is strictly decreasing for increasing $n$. Thus, the maximum absolute value decreases at every time step.\nThe sign alternation at each grid point is governed by the relation $T_i^{n+1} = G \\cdot T_i^n = -0.96 \\cdot T_i^n$. Since the multiplicative factor is negative, the sign of $T_i^n$ flips at each time step.\nBoth parts of the statement are true.\nThe statement is **Correct**.\n\n**D. For $r = 0.51$, the solution grows without bound in magnitude while alternating in sign at each time step.**\nFor $r = 0.51$, the amplification factor is $G = 1 - 4(0.51) = 1 - 2.04 = -1.04$.\nThis value of $r$ violates the stability condition $r \\le 1/2$.\nThe solution is $T_i^n = (-1.04)^n (-1)^i$.\nThe magnitude at any grid point is $|T_i^n| = |(-1.04)^n| = (1.04)^n$. Since $1.04  1$, this value grows exponentially without bound as $n \\to \\infty$.\nThe relation between consecutive time steps is $T_i^{n+1} = -1.04 \\cdot T_i^n$. The negative sign of the factor $-1.04$ indicates that the solution alternates in sign at each grid point at every time step.\nBoth parts of the statement are true.\nThe statement is **Correct**.\n\n**E. For $r = 0.20$, any non-constant spatial Fourier mode decays in time without temporal sign reversal at any grid point.**\nThis statement concerns any non-constant mode, not just the highest-wavenumber mode. We must use the general amplification factor $G(k) = 1 - 4r \\sin^2(k \\Delta x / 2)$.\nWith $r = 0.20$, this is $G(k) = 1 - 4(0.20) \\sin^2(k \\Delta x / 2) = 1 - 0.8 \\sin^2(k \\Delta x / 2)$.\nFor any non-constant mode, the wavenumber $k$ is non-zero. For a grid, the wavenumbers are discrete, and the product $k \\Delta x$ is in the range $(0, \\pi]$. This means the argument of the sine function, $k \\Delta x / 2$, is in the range $(0, \\pi/2]$.\nWithin this range, we have $0  \\sin(k \\Delta x / 2) \\le 1$, and thus $0  \\sin^2(k \\Delta x / 2) \\le 1$.\nThe range of the amplification factor $G(k)$ is therefore:\n$1 - 0.8(1) \\le G(k)  1 - 0.8(0)$, which is $0.2 \\le G(k)  1$.\nFor any non-constant mode, two conditions are met:\n1.  $|G(k)|  1$: The magnitude of the mode's amplitude decreases at each time step, so the mode decays.\n2.  $G(k) > 0$: The amplification factor is positive. This means the sign of the mode's amplitude at any given point does not flip from one time step to the next. The evolution is monotonic decay, not oscillatory decay.\nThe statement is **Correct**.", "answer": "$$\\boxed{ACDE}$$", "id": "2445107"}, {"introduction": "Our final practice ventures into the powerful domain of inverse problems, where we use a physical model to infer unknown causes from observed data. Instead of predicting the future temperature field $T(x,y,t_f)$ from a known source, you will be given this final field and tasked with deducing the location of the hidden heat source that created it [@problem_id:2445154]. This exercise demonstrates how the heat equation model, combined with a least-squares fitting strategy, can be used to solve a completely different and compelling class of scientific questions.", "problem": "You will solve an inverse problem for temperature evolution in a thin, homogeneous, isotropic conducting plate. Begin from the conservation of energy and Fourier’s law of heat conduction as the fundamental base. Consider a square plate of side length $L$ with constant thermal diffusivity $\\alpha$, held at zero temperature on its boundary for all times, and initially at zero temperature. A constant point heat source of unknown location injects heat at a constant rate from time $t=0$ until a final time $t=T$. The plate is modeled in two spatial dimensions and is sufficiently thin that out-of-plane conduction can be neglected. The goal is to determine the grid location of the source, given only the final temperature field at time $t=T$.\n\nYour program must implement the following pipeline in purely mathematical terms:\n- Derive a consistent discrete evolution from the two-dimensional heat equation starting from the energy balance and Fourier’s law, and use an unconditionally stable time-marching scheme on a uniform grid of $N_x \\times N_x$ nodes covering the square $[0,L]\\times[0,L]$ with zero-Dirichlet boundary conditions at $x=0$, $x=L$, $y=0$, and $y=L$.\n- Represent the constant point source as a single nodal forcing at one unknown interior grid node. The amplitude of the nodal forcing is constant in time but otherwise unknown.\n- Use the linear structure of the discrete evolution to formulate an inverse estimator that, for each candidate interior node, computes the least-squares residual between the measured final field and the prediction due to a source at that node with its optimal constant amplitude. Select the node that minimizes this residual.\n\nThe test suite below specifies parameter sets and the true source locations. For each test case, you must:\n- Construct the discrete operator on a uniform grid.\n- Generate the “measured” final temperature field internally by solving the forward problem using the same discrete model, a zero initial condition, and a constant source applied at the true source location with the specified constant amplitude throughout the integration interval.\n- Recover the source location by solving the inverse selection problem described above.\n\nDo not use any external input. Use zero-based indexing with the origin at the lower-left corner. Report the source location as integer grid indices $(i_x,i_y)$ on the full grid of size $N_x \\times N_x$, where $i_x \\in \\{0,1,\\dots,N_x-1\\}$ increases with $x$ from left to right and $i_y \\in \\{0,1,\\dots,N_x-1\\}$ increases with $y$ from bottom to top. The source will always be located strictly in the interior, i.e., $1 \\le i_x \\le N_x-2$ and $1 \\le i_y \\le N_x-2$. No physical units are required in your output.\n\nTest suite (five cases):\n- Case $1$: $L=1$, $N_x=25$, $\\alpha=10^{-3}$, time step $\\Delta t=2\\times 10^{-2}$, number of steps $N_t=200$, source amplitude $q=1$, true source location $(i_x,i_y)=(12,9)$.\n- Case $2$: $L=1$, $N_x=25$, $\\alpha=2\\times 10^{-3}$, time step $\\Delta t=1.5\\times 10^{-2}$, number of steps $N_t=160$, source amplitude $q=0.8$, true source location $(i_x,i_y)=(1,7)$.\n- Case $3$: $L=1$, $N_x=21$, $\\alpha=5\\times 10^{-4}$, time step $\\Delta t=10^{-2}$, number of steps $N_t=80$, source amplitude $q=1.2$, true source location $(i_x,i_y)=(10,10)$.\n- Case $4$: $L=1$, $N_x=27$, $\\alpha=1.5\\times 10^{-3}$, time step $\\Delta t=10^{-2}$, number of steps $N_t=150$, source amplitude $q=0.5$, true source location $(i_x,i_y)=(2,2)$.\n- Case $5$: $L=1$, $N_x=17$, $\\alpha=10^{-3}$, time step $\\Delta t=2.5\\times 10^{-2}$, number of steps $N_t=60$, source amplitude $q=1$, true source location $(i_x,i_y)=(8,1)$.\n\nFinal output format:\n- Your program should produce a single line containing a list of the estimated source locations for the five cases, in order, as a comma-separated list of $5$ items, each item being a two-element list of integers $[i_x,i_y]$. For example, the output format must be exactly like $[[i_{x,1},i_{y,1}],[i_{x,2},i_{y,2}],[i_{x,3},i_{y,3}],[i_{x,4},i_{y,4}],[i_{x,5},i_{y,5}]]$.", "solution": "The problem is evaluated to be scientifically sound, well-posed, and self-contained. It is a standard inverse problem in computational physics, based on the fundamental principles of heat transfer. All necessary parameters and conditions are provided. I will now proceed with the solution.\n\nThe temperature evolution in a homogeneous, isotropic conducting plate is governed by the two-dimensional heat equation. We begin by deriving its discrete form.\n\n**1. Governing Equation and Discretization**\n\nThe derivation starts from the principle of conservation of energy applied to a small control volume $d A=dx\\,dy$ within the plate. The time rate of change of thermal energy must equal the net heat flow into the volume plus any heat generated internally. This is expressed as:\n$$\n\\rho c_p \\frac{\\partial T}{\\partial t} = -\\nabla \\cdot \\mathbf{q} + Q\n$$\nwhere $T(x,y,t)$ is the temperature field, $\\rho$ is the density, $c_p$ is the specific heat capacity, $\\mathbf{q}$ is the heat flux vector, and $Q$ is the volumetric heat source density. Fourier's law of heat conduction relates the heat flux to the temperature gradient: $\\mathbf{q} = -k \\nabla T$, where $k$ is the thermal conductivity. For a homogeneous material with constant properties, substitution yields:\n$$\n\\rho c_p \\frac{\\partial T}{\\partial t} = \\nabla \\cdot (k \\nabla T) + Q = k \\nabla^2 T + Q\n$$\nDividing by $\\rho c_p$ and defining the thermal diffusivity $\\alpha = k/(\\rho c_p)$ and the source term $S = Q/(\\rho c_p)$ (with units of temperature per time), we obtain the standard heat equation:\n$$\n\\frac{\\partial T}{\\partial t} = \\alpha \\nabla^2 T + S(x,y,t)\n$$\nWe discretize the spatial domain $[0,L]\\times[0,L]$ using a uniform grid with $N_x \\times N_x$ nodes. The grid spacing is $\\Delta x = \\Delta y = h = L/(N_x-1)$. Let $T_{i,j}^n$ denote the temperature at grid point $(x_i, y_j) = (ih, jh)$ at time $t_n = n\\Delta t$. The Laplacian operator $\\nabla^2$ is approximated using a five-point central difference stencil:\n$$\n\\nabla^2 T \\Big|_{(i,j)} \\approx \\frac{T_{i+1,j} - 2T_{i,j} + T_{i-1,j}}{h^2} + \\frac{T_{i,j+1} - 2T_{i,j} + T_{i,j-1}}{h^2}\n$$\n\n**2. Temporal Discretization and Matrix Formulation**\n\nTo ensure unconditional stability as required, we use an implicit time-marching scheme. The Backward Euler method is chosen for its simplicity and stability. It evaluates the spatial derivatives at the future time step $n+1$:\n$$\n\\frac{T_{i,j}^{n+1} - T_{i,j}^n}{\\Delta t} = \\alpha \\left( \\frac{T_{i+1,j}^{n+1} + T_{i-1,j}^{n+1} + T_{i,j+1}^{n+1} + T_{i,j-1}^{n+1} - 4T_{i,j}^{n+1}}{h^2} \\right) + S_{i,j}^{n+1}\n$$\nRearranging the terms to place unknowns at time $n+1$ on the left side, we have a linear equation for each interior grid point $(i,j)$, where $i,j \\in \\{1, \\dots, N_x-2\\}$:\n$$\n(1 + 4c)T_{i,j}^{n+1} - c(T_{i+1,j}^{n+1} + T_{i-1,j}^{n+1} + T_{i,j+1}^{n+1} + T_{i,j-1}^{n+1}) = T_{i,j}^n + \\Delta t S_{i,j}^{n+1}\n$$\nwhere $c = \\alpha \\Delta t / h^2$ is the diffusion number. The zero-Dirichlet boundary conditions ($T=0$ on all boundaries) are implicitly handled as any term $T^{n+1}$ with an index on the boundary is zero and drops from the equation.\n\nThis system of $(N_x-2)^2$ linear equations must be solved at each time step. We can express this in matrix form. Let $\\mathbf{T}^n$ be a vector of size $N_{int} = (N_x-2)^2$ representing the temperatures at all interior nodes, flattened into a single column. The system becomes:\n$$\n\\mathbf{A} \\mathbf{T}^{n+1} = \\mathbf{T}^n + \\Delta t \\mathbf{S}^{n+1}\n$$\nThe matrix $\\mathbf{A}$ is a sparse, block-tridiagonal matrix representing the discrete implicit operator. It is constant in time. The vector $\\mathbf{S}^{n+1}$ represents the nodal source forcing. Since the source is constant in time and space (at a single node), we can write $\\mathbf{S}^{n+1} = q \\, \\mathbf{e}_{k_s}$, where $k_s$ is the flattened index of the source node, $\\mathbf{e}_{k_s}$ is the corresponding standard basis vector, and $q$ is the source amplitude.\n\n**3. Forward Problem Solution**\n\nThe forward problem consists of finding the final temperature field $\\mathbf{T}_{final} = \\mathbf{T}^{N_t}$, given the initial condition $\\mathbf{T}^0 = \\mathbf{0}$ and a source with known location $k_s$ and amplitude $q$. The time evolution is computed by iteratively solving the linear system:\n$$\n\\mathbf{T}^{n+1} = \\mathbf{A}^{-1}(\\mathbf{T}^n + q \\Delta t \\, \\mathbf{e}_{k_s})\n$$\nfor $n=0, \\dots, N_t-1$. To perform this efficiently, the matrix $\\mathbf{A}$ is factorized once (e.g., using LU decomposition), and the factorization is reused to solve for $\\mathbf{T}^{n+1}$ via forward and backward substitution at each time step. This procedure is used to generate the \"measured\" final temperature field, $\\mathbf{T}_{meas}$, using the true source parameters provided in each test case.\n\n**4. Inverse Problem Formulation**\n\nThe inverse problem aims to find the source location $k_s$, given $\\mathbf{T}_{meas}$. The source amplitude $q$ is also unknown. The problem is structured as a search over all possible interior nodes. For each candidate source location, $k_c$, we find the optimal source amplitude that best explains the measured data in a least-squares sense.\n\nLet $\\mathbf{U}_{k_c}$ be the final temperature field generated by a unit source ($q=1$) located at $k_c$, computed using the same forward model. Due to linearity, the predicted field for a source of amplitude $q_c$ at location $k_c$ is $\\mathbf{T}_{pred} = q_c \\mathbf{U}_{k_c}$. We must find $k_c$ and $q_c$ that minimize the residual:\n$$\nR(k_c, q_c) = \\| \\mathbf{T}_{meas} - q_c \\mathbf{U}_{k_c} \\|_2^2\n$$\nFor a fixed candidate location $k_c$, the optimal amplitude $q_c^*$ is found by setting the derivative of $R$ with respect to $q_c$ to zero:\n$$\n\\frac{\\partial R}{\\partial q_c} = 0 \\implies q_c^* = \\frac{\\mathbf{U}_{k_c}^T \\mathbf{T}_{meas}}{\\mathbf{U}_{k_c}^T \\mathbf{U}_{k_c}} = \\frac{\\langle \\mathbf{U}_{k_c}, \\mathbf{T}_{meas} \\rangle}{\\| \\mathbf{U}_{k_c} \\|_2^2}\n$$\nThis optimal amplitude is the scalar projection of $\\mathbf{T}_{meas}$ onto the basis vector $\\mathbf{U}_{k_c}$.\n\n**5. Algorithmic Procedure**\n\nThe final estimated source location is the candidate node that minimizes the residual after substituting its optimal amplitude:\n$$\nk_{est} = \\arg\\min_{k_c} \\| \\mathbf{T}_{meas} - q_c^*(k_c) \\, \\mathbf{U}_{k_c} \\|_2^2\n$$\nThe complete algorithm is as follows:\n1.  **Generate Data**: For each test case, construct the matrix $\\mathbf{A}$. Simulate the temperature evolution over $N_t$ time steps with the true source parameters to generate the measurement vector $\\mathbf{T}_{meas}$.\n2.  **Iterate and Test Candidates**: Loop through every interior grid node $(i_c, j_c)$ as a candidate source location.\n    a.  For each candidate $(i_c, j_c)$, simulate the forward problem with a unit source ($q=1$) at that location to compute the corresponding final temperature profile $\\mathbf{U}_{k_c}$.\n    b.  Calculate the optimal source amplitude $q_c^*$ using the derived projection formula.\n    c.  Compute the squared L2-norm of the residual between $\\mathbf{T}_{meas}$ and the prediction $q_c^* \\mathbf{U}_{k_c}$.\n3.  **Select Best Fit**: The estimated source location is the candidate $(i_c, j_c)$ that yields the minimum residual. The program implements this procedure for each specified test case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.sparse import diags\nfrom scipy.sparse.linalg import splu\n\ndef solve():\n    \"\"\"\n    Main function to solve the inverse heat source problem for all test cases.\n    \"\"\"\n    test_cases = [\n        {'L': 1, 'Nx': 25, 'alpha': 1e-3, 'dt': 2e-2, 'Nt': 200, 'q': 1, 'true_loc': (12, 9)},\n        {'L': 1, 'Nx': 25, 'alpha': 2e-3, 'dt': 1.5e-2, 'Nt': 160, 'q': 0.8, 'true_loc': (1, 7)},\n        {'L': 1, 'Nx': 21, 'alpha': 5e-4, 'dt': 1e-2, 'Nt': 80, 'q': 1.2, 'true_loc': (10, 10)},\n        {'L': 1, 'Nx': 27, 'alpha': 1.5e-3, 'dt': 1e-2, 'Nt': 150, 'q': 0.5, 'true_loc': (2, 2)},\n        {'L': 1, 'Nx': 17, 'alpha': 1e-3, 'dt': 2.5e-2, 'Nt': 60, 'q': 1, 'true_loc': (8, 1)},\n    ]\n\n    results = []\n    for case in test_cases:\n        estimated_loc = find_source_location(**case)\n        results.append(list(estimated_loc))\n\n    formatted_results = [f'[{r[0]},{r[1]}]' for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\ndef run_forward_simulation(solver, Nt, dt, source_amplitude, source_k, N_int):\n    \"\"\"\n    Simulates the heat equation forward in time.\n    \n    Args:\n        solver: Pre-factorized sparse matrix solver (from splu).\n        Nt: Number of time steps.\n        dt: Time step size.\n        source_amplitude: The 'q' value for the source.\n        source_k: The flattened index of the source node.\n        N_int: Total number of interior nodes.\n\n    Returns:\n        The final temperature field as a 1D numpy array.\n    \"\"\"\n    f_vec = np.zeros(N_int)\n    if source_k is not None:\n        f_vec[source_k] = source_amplitude * dt\n\n    u_n = np.zeros(N_int)\n    for _ in range(Nt):\n        b = u_n + f_vec\n        u_n = solver.solve(b)\n    \n    return u_n\n\ndef find_source_location(L, Nx, alpha, dt, Nt, q, true_loc):\n    \"\"\"\n    Finds the heat source location for a single test case.\n    \"\"\"\n    # 1. Setup grid and parameters\n    h = L / (Nx - 1)\n    c = alpha * dt / h**2\n    N_int_dim = Nx - 2\n    N_int = N_int_dim**2\n\n    # 2. Build the sparse matrix A for the implicit scheme (I - c*L)\n    M = N_int_dim\n    N = M * M\n    main_diag = np.full(N, 1 + 4 * c)\n    sub_diag = np.full(N - 1, -c)\n    sup_diag = np.full(N - 1, -c)\n    # Remove fictitious connections between grid rows\n    sub_diag[M-1::M] = 0\n    sup_diag[M-1::M] = 0\n    lower_M_diag = np.full(N - M, -c)\n    upper_M_diag = np.full(N - M, -c)\n    \n    diagonals_data = [upper_M_diag, sup_diag, main_diag, sub_diag, lower_M_diag]\n    offsets = [M, 1, 0, -1, -M]\n    A = diags(diagonals_data, offsets, shape=(N, N), format='csc')\n    \n    # Pre-factorize the matrix for efficient solves\n    solver = splu(A)\n\n    # 3. Generate \"measured\" data by solving the forward problem with true parameters\n    k_true = (true_loc[0] - 1) + (true_loc[1] - 1) * N_int_dim\n    u_meas = run_forward_simulation(solver, Nt, dt, q, k_true, N_int)\n\n    # 4. Inverse search for the source location\n    min_residual = float('inf')\n    best_location = None\n    \n    # Iterate through all possible interior nodes as candidates\n    for j_c in range(1, Nx - 1):\n        for i_c in range(1, Nx - 1):\n            k_c = (i_c - 1) + (j_c - 1) * N_int_dim\n            \n            # a. Simulate the final field for a unit source at the candidate location\n            U_kc = run_forward_simulation(solver, Nt, dt, 1.0, k_c, N_int)\n            \n            dot_Ukc_Ukc = np.dot(U_kc, U_kc)\n            # If the response is negligible, this is not a viable candidate\n            if dot_Ukc_Ukc  1e-30:\n                continue\n\n            # b. Calculate the optimal source amplitude and the corresponding residual\n            q_star = np.dot(U_kc, u_meas) / dot_Ukc_Ukc\n            residual = np.sum((u_meas - q_star * U_kc)**2)\n\n            # c. Update the best-fit location if the current candidate is better\n            if residual  min_residual:\n                min_residual = residual\n                best_location = (i_c, j_c)\n                \n    return best_location\n\nsolve()\n```", "id": "2445154"}]}