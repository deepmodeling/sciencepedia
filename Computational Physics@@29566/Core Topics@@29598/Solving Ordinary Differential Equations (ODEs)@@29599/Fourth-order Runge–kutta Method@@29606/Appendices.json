{"hands_on_practices": [{"introduction": "The first step in mastering any numerical method is to execute it by hand. This exercise allows you to apply a single step of the fourth-order Runge-Kutta method to a tangible physical problem: the temperature change of a space probe. By carefully calculating each of the four intermediate slopes—$k_1$, $k_2$, $k_3$, and $k_4$—you will build a concrete understanding of the algorithm's inner workings. [@problem_id:2174156]", "problem": "A small probe's temperature, $T$ (in degrees Celsius), as it enters a planetary atmosphere is modeled by a simplified differential equation. The rate of change of its temperature with respect to time, $t$ (in seconds), is influenced by both atmospheric friction heating and radiative cooling. The governing equation is given by:\n$$ \\frac{dT}{dt} = \\alpha t^{2} - \\beta T $$\nwhere $\\alpha = 0.50 \\text{ C/s}^3$ is a coefficient related to frictional heating and $\\beta = 0.20 \\text{ s}^{-1}$ is a cooling constant.\nAt the moment of entry, $t_0 = 0 \\text{ s}$, the probe has an initial temperature of $T_0 = 100.0 \\text{ C}$.\n\nUsing a single step of the fourth-order Runge-Kutta (RK4) method with a step size of $h = 0.4 \\text{ s}$, estimate the temperature of the probe at time $t_1 = 0.4 \\text{ s}$. Express your answer in degrees Celsius, rounded to four significant figures.", "solution": "We are given the initial value problem $T^{\\prime}(t)=f(t,T)=\\alpha t^{2}-\\beta T$ with $\\alpha=0.50$, $\\beta=0.20$, $t_{0}=0$, $T_{0}=100.0$, and step size $h=0.4$. A single fourth-order Runge-Kutta step computes\n$$\nT_{1}=T_{0}+\\frac{h}{6}\\left(k_{1}+2k_{2}+2k_{3}+k_{4}\\right),\n$$\nwhere\n$$\nk_{1}=f(t_{0},T_{0}),\\quad\nk_{2}=f\\!\\left(t_{0}+\\frac{h}{2},\\,T_{0}+\\frac{h}{2}k_{1}\\right),\\quad\nk_{3}=f\\!\\left(t_{0}+\\frac{h}{2},\\,T_{0}+\\frac{h}{2}k_{2}\\right),\\quad\nk_{4}=f(t_{0}+h,\\,T_{0}+hk_{3}).\n$$\n\nCompute each stage:\n$$\nk_{1}=\\alpha t_{0}^{2}-\\beta T_{0}=0.50\\cdot 0^{2}-0.20\\cdot 100.0=-20.\n$$\n$$\nt_{0}+\\frac{h}{2}=0.2,\\quad T_{0}+\\frac{h}{2}k_{1}=100.0+0.2(-20)=96.0,\n$$\n$$\nk_{2}=f(0.2,96.0)=0.50\\cdot(0.2)^{2}-0.20\\cdot 96.0=0.02-19.2=-19.18.\n$$\n$$\nt_{0}+\\frac{h}{2}=0.2,\\quad T_{0}+\\frac{h}{2}k_{2}=100.0+0.2(-19.18)=96.164,\n$$\n$$\nk_{3}=f(0.2,96.164)=0.50\\cdot(0.2)^{2}-0.20\\cdot 96.164=0.02-19.2328=-19.2128.\n$$\n$$\nt_{0}+h=0.4,\\quad T_{0}+hk_{3}=100.0+0.4(-19.2128)=92.31488,\n$$\n$$\nk_{4}=f(0.4,92.31488)=0.50\\cdot(0.4)^{2}-0.20\\cdot 92.31488=0.08-18.462976=-18.382976.\n$$\n\nCombine to update:\n$$\nT_{1}=100.0+\\frac{0.4}{6}\\left((-20)+2(-19.18)+2(-19.2128)+(-18.382976)\\right).\n$$\nCompute the weighted sum inside parentheses:\n$$\nk_{1}+2k_{2}+2k_{3}+k_{4}=-20-38.36-38.4256-18.382976=-115.168576.\n$$\nThus,\n$$\nT_{1}=100.0+\\frac{0.4}{6}\\left(-115.168576\\right)=100.0-\\frac{115.168576}{15}=92.322094933\\ldots\n$$\nRounded to four significant figures, the estimate is $92.32$.", "answer": "$$\\boxed{92.32}$$", "id": "2174156"}, {"introduction": "Physical systems are rarely described by a single equation; more often, we encounter systems of coupled differential equations. This practice extends the RK4 method to a simple yet fundamental system: the harmonic oscillator. More importantly, by calculating a quantity related to the system's energy, you will investigate how well the numerical method preserves a quantity that should be exactly conserved in the real physical system, a key consideration for long-term simulations. [@problem_id:2197392]", "problem": "Consider the following system of coupled first-order ordinary differential equations:\n$$\n\\frac{dx}{dt} = y\n$$\n$$\n\\frac{dy}{dt} = -x\n$$\nThe system starts at time $t=0$ with the initial conditions $x(0) = 1$ and $y(0) = 0$.\n\nApply a single step of the classical fourth-order Runge-Kutta (RK4) method with a step size of $h$ to approximate the state of the system at time $t=h$. Let this approximate state be denoted by $(x_1, y_1)$.\n\nYour task is to calculate the quantity $R = x_1^2 + y_1^2$. Express your answer as a polynomial in the step size $h$.", "solution": "We apply one step of the classical fourth-order Runge-Kutta (RK4) method to the system\n$$\n\\frac{dx}{dt} = y, \\quad \\frac{dy}{dt} = -x,\n$$\nwith initial conditions $x(0)=1$, $y(0)=0$ and step size $h$. For a system $\\mathbf{u}'=\\mathbf{F}(t,\\mathbf{u})$ with $\\mathbf{u}=(x,y)$ and $\\mathbf{F}=(y,-x)$, RK4 gives\n$$\n\\mathbf{u}_{1}=\\mathbf{u}_{0}+\\frac{h}{6}\\left(\\mathbf{k}_{1}+2\\mathbf{k}_{2}+2\\mathbf{k}_{3}+\\mathbf{k}_{4}\\right),\n$$\nwhere\n$$\n\\mathbf{k}_{1}=\\mathbf{F}(t_{0},\\mathbf{u}_{0}),\\quad\n\\mathbf{k}_{2}=\\mathbf{F}\\!\\left(t_{0}+\\frac{h}{2},\\mathbf{u}_{0}+\\frac{h}{2}\\mathbf{k}_{1}\\right),\n$$\n$$\n\\mathbf{k}_{3}=\\mathbf{F}\\!\\left(t_{0}+\\frac{h}{2},\\mathbf{u}_{0}+\\frac{h}{2}\\mathbf{k}_{2}\\right),\\quad\n\\mathbf{k}_{4}=\\mathbf{F}\\!\\left(t_{0}+h,\\mathbf{u}_{0}+h\\mathbf{k}_{3}\\right).\n$$\nWith $(x_{0},y_{0})=(1,0)$ and $t_{0}=0$, compute each stage:\n- $\\mathbf{k}_{1}=(y_{0},-x_{0})=(0,-1)$, so $k_{1x}=0$, $k_{1y}=-1$.\n- $\\mathbf{k}_{2}=\\left(y_{0}+\\frac{h}{2}k_{1y},-\\,\\left(x_{0}+\\frac{h}{2}k_{1x}\\right)\\right)=\\left(-\\frac{h}{2},-1\\right)$, so $k_{2x}=-\\frac{h}{2}$, $k_{2y}=-1$.\n- $\\mathbf{k}_{3}=\\left(y_{0}+\\frac{h}{2}k_{2y},-\\,\\left(x_{0}+\\frac{h}{2}k_{2x}\\right)\\right)=\\left(-\\frac{h}{2},-1+\\frac{h^{2}}{4}\\right)$, so $k_{3x}=-\\frac{h}{2}$, $k_{3y}=-1+\\frac{h^{2}}{4}$.\n- $\\mathbf{k}_{4}=\\left(y_{0}+h k_{3y},-\\,\\left(x_{0}+h k_{3x}\\right)\\right)=\\left(-h+\\frac{h^{3}}{4},-1+\\frac{h^{2}}{2}\\right)$, so $k_{4x}=-h+\\frac{h^{3}}{4}$, $k_{4y}=-1+\\frac{h^{2}}{2}$.\n\nThen\n$$\nx_{1}=x_{0}+\\frac{h}{6}\\left(k_{1x}+2k_{2x}+2k_{3x}+k_{4x}\\right)\n=1+\\frac{h}{6}\\left(0- h- h- h+\\frac{h^{3}}{4}\\right)\n=1-\\frac{h^{2}}{2}+\\frac{h^{4}}{24},\n$$\n$$\ny_{1}=y_{0}+\\frac{h}{6}\\left(k_{1y}+2k_{2y}+2k_{3y}+k_{4y}\\right)\n=0+\\frac{h}{6}\\left(-1-2-2+\\frac{h^{2}}{2}-1+\\frac{h^{2}}{2}\\right)\n=-h+\\frac{h^{3}}{6}.\n$$\n\nCompute $R=x_{1}^{2}+y_{1}^{2}$. First,\n$$\nx_{1}^{2}=\\left(1-\\frac{h^{2}}{2}+\\frac{h^{4}}{24}\\right)^{2}\n=1+2\\!\\left(-\\frac{h^{2}}{2}\\right)+2\\!\\left(\\frac{h^{4}}{24}\\right)+\\left(-\\frac{h^{2}}{2}\\right)^{2}+2\\!\\left(-\\frac{h^{2}}{2}\\right)\\!\\left(\\frac{h^{4}}{24}\\right)+\\left(\\frac{h^{4}}{24}\\right)^{2}\n$$\n$$\n=1-h^{2}+\\frac{h^{4}}{12}+\\frac{h^{4}}{4}-\\frac{h^{6}}{24}+\\frac{h^{8}}{576}\n=1-h^{2}+\\frac{h^{4}}{3}-\\frac{h^{6}}{24}+\\frac{h^{8}}{576},\n$$\nand\n$$\ny_{1}^{2}=\\left(-h+\\frac{h^{3}}{6}\\right)^{2}=h^{2}-\\frac{h^{4}}{3}+\\frac{h^{6}}{36}.\n$$\nTherefore,\n$$\nR=x_{1}^{2}+y_{1}^{2}=\\left(1-h^{2}+\\frac{h^{4}}{3}-\\frac{h^{6}}{24}+\\frac{h^{8}}{576}\\right)+\\left(h^{2}-\\frac{h^{4}}{3}+\\frac{h^{6}}{36}\\right)\n=1-\\frac{h^{6}}{72}+\\frac{h^{8}}{576}.\n$$\nThis is a polynomial in $h$ and quantifies the deviation from the exact invariant $x^{2}+y^{2}=1$ after one RK4 step.", "answer": "$$\\boxed{1-\\frac{h^{6}}{72}+\\frac{h^{8}}{576}}$$", "id": "2197392"}, {"introduction": "Many problems in physics are posed as boundary value problems (BVPs), where conditions are specified at different points, rather than all at the start. This advanced practice demonstrates how the Runge-Kutta method, an initial value problem solver, can be ingeniously adapted to solve BVPs using the \"shooting method\". You will tackle the famous Blasius equation from fluid dynamics, using RK4 as the engine within a root-finding algorithm to find the unknown initial condition that satisfies the required boundary condition at a distant point. [@problem_id:2395918]", "problem": "You are to implement a solver for the classical Blasius boundary layer problem by reducing it to an initial value problem and applying a shooting method combined with the classical fourth-order Runge–Kutta method. The Blasius function satisfies the third-order nonlinear ordinary differential equation\n$$\nf'''(\\eta) + \\tfrac{1}{2} f(\\eta) f''(\\eta) = 0,\n$$\nwith boundary conditions\n$$\nf(0) = 0,\\quad f'(0) = 0,\\quad f'(\\infty) = 1.\n$$\nTreat the condition at infinity by truncating the computational domain to a finite terminal point $$\\eta_{\\max} > 0$$. Convert the third-order equation into a first-order system by introducing the variables $$y_1(\\eta) = f(\\eta),\\ y_2(\\eta) = f'(\\eta),\\ y_3(\\eta) = f''(\\eta)$$ so that the system takes the form\n$$\n\\frac{d}{d\\eta}\n\\begin{bmatrix}\ny_1 \\\\\ny_2 \\\\\ny_3\n\\end{bmatrix}\n=\n\\begin{bmatrix}\ny_2 \\\\\ny_3 \\\\\n-\\tfrac{1}{2} y_1 y_3\n\\end{bmatrix},\n$$\nwith initial conditions\n$$\ny_1(0) = 0,\\quad y_2(0) = 0,\\quad y_3(0) = s,\n$$\nwhere $$s = f''(0)$$ is an unknown shooting parameter. For a given $$s$$, integrate the system from $$\\eta = 0$$ to $$\\eta = \\eta_{\\max}$$ using the classical fourth-order Runge–Kutta method with a uniform step size $$h > 0$$. Define the residual function\n$$\nR(s) \\equiv y_2(\\eta_{\\max}; s) - 1,\n$$\nand determine $$s$$ such that $$|R(s)| \\le \\varepsilon$$ for a specified tolerance $$\\varepsilon > 0$$ by using a one-dimensional root-finding iteration based on the shooting method (for example, a bracketed secant or regula falsi iteration). All computations are dimensionless; no physical units are required.\n\nTest suite and required outputs:\n- For each parameter set $$(\\eta_{\\max}, h, \\varepsilon, s_a, s_b)$$ below, find the value of $$s$$ such that $$|R(s)| \\le \\varepsilon$$, where $$s_a$$ and $$s_b$$ are two distinct initial guesses for $$s$$ used to start the root finder. Use uniform steps so that the final point coincides with $$\\eta_{\\max}$$ exactly.\n- Parameter sets to use:\n    1. $$(\\eta_{\\max}, h, \\varepsilon, s_a, s_b) = (8.0, 0.01, 10^{-8}, 0.30, 0.35)$$\n    2. $$(\\eta_{\\max}, h, \\varepsilon, s_a, s_b) = (6.0, 0.02, 10^{-6}, 0.20, 0.50)$$\n    3. $$(\\eta_{\\max}, h, \\varepsilon, s_a, s_b) = (10.0, 0.005, 10^{-10}, 0.32, 0.34)$$\n    4. $$(\\eta_{\\max}, h, \\varepsilon, s_a, s_b) = (12.0, 0.02, 10^{-8}, 0.10, 0.60)$$\n\nFinal output format:\n- Your program should produce a single line of output containing the computed values of $$s$$ for the four parameter sets, in the same order as listed above, rounded to exactly nine decimal places, as a comma-separated list enclosed in square brackets; for example, $$[0.332000000,0.332000000,0.332000000,0.332000000]$$.", "solution": "The problem presented is a classical boundary value problem from the field of fluid dynamics, specifically concerning the laminar boundary layer over a flat plate. The governing Blasius equation is a third-order nonlinear ordinary differential equation. We are tasked with finding the value of the unknown initial condition $$s = f''(0)$$ such that the boundary condition at infinity, approximated as $$f'(\\eta_{\\max})=1$$, is satisfied. This is a characteristic application of the shooting method.\n\nThe problem statement has been validated and is found to be scientifically sound, well-posed, and complete. All necessary parameters and methods are specified, allowing for a unique and verifiable solution. We will proceed with the systematic derivation of the numerical algorithm.\n\nFirst, the third-order ODE,\n$$\nf'''(\\eta) + \\tfrac{1}{2} f(\\eta) f''(\\eta) = 0,\n$$\nis converted into a system of three first-order ODEs. By defining the state vector $$\\mathbf{y}(\\eta) = [y_1(\\eta), y_2(\\eta), y_3(\\eta)]^T$$, where $$y_1 = f$$, $$y_2 = f' = y_1'$$, and $$y_3 = f'' = y_2'$$, the system becomes\n$$\n\\frac{d\\mathbf{y}}{d\\eta} =\n\\begin{bmatrix}\ny_2 \\\\\ny_3 \\\\\n-\\tfrac{1}{2} y_1 y_3\n\\end{bmatrix}\n= \\mathbf{F}(\\mathbf{y}).\n$$\nNote that the system is autonomous as the right-hand side $$\\mathbf{F}$$ does not explicitly depend on the independent variable $$\\eta$$.\n\nThe original boundary conditions are $$f(0)=0$$, $$f'(0)=0$$, and $$f'(\\infty)=1$$. In terms of our state vector, these become $$y_1(0)=0$$, $$y_2(0)=0$$, and $$y_2(\\infty)=1$$. The problem is thus converted into an initial value problem (IVP) by introducing the unknown shooting parameter $$s = f''(0) = y_3(0)$$. The initial conditions for the IVP are now fully specified at $$\\eta=0$$:\n$$\n\\mathbf{y}(0) = [0, 0, s]^T.\n$$\nThe objective of the shooting method is to determine the value of $$s$$ for which the solution of this IVP, when integrated to the specified finite boundary $$\\eta_{\\max}$$, satisfies the terminal condition $$y_2(\\eta_{\\max}) = 1$$. To this end, we define a residual function $$R(s)$$ whose root we seek:\n$$\nR(s) = y_2(\\eta_{\\max}; s) - 1 = 0.\n$$\nHere, the notation $$y_2(\\eta_{\\max}; s)$$ explicitly indicates that the solution depends on the choice of the parameter $$s$$.\n\nTo solve the IVP for any given guess of $$s$$, we must employ a numerical integrator. The problem mandates the use of the classical fourth-order Runge–Kutta (RK4) method. For a generic first-order ODE system $$\\mathbf{y}' = \\mathbf{F}(\\eta, \\mathbf{y})$$, the RK4 algorithm advances the solution from $$\\eta_n$$ to $$\\eta_{n+1} = \\eta_n + h$$ using the following steps:\n$$\n\\begin{aligned}\n\\mathbf{k}_1 &= h \\mathbf{F}(\\eta_n, \\mathbf{y}_n) \\\\\n\\mathbf{k}_2 &= h \\mathbf{F}(\\eta_n + \\tfrac{h}{2}, \\mathbf{y}_n + \\tfrac{\\mathbf{k}_1}{2}) \\\\\n\\mathbf{k}_3 &= h \\mathbf{F}(\\eta_n + \\tfrac{h}{2}, \\mathbf{y}_n + \\tfrac{\\mathbf{k}_2}{2}) \\\\\n\\mathbf{k}_4 &= h \\mathbf{F}(\\eta_n + h, \\mathbf{y}_n + \\mathbf{k}_3) \\\\\n\\mathbf{y}_{n+1} &= \\mathbf{y}_n + \\tfrac{1}{6}(\\mathbf{k}_1 + 2\\mathbf{k}_2 + 2\\mathbf{k}_3 + \\mathbf{k}_4)\n\\end{aligned}\n$$\nThis procedure is repeated for $$N = \\eta_{\\max} / h$$ steps to integrate the solution from $$\\eta=0$$ to $$\\eta=\\eta_{\\max}$$.\n\nTo find the root of $$R(s)=0$$, a one-dimensional root-finding algorithm is required. The problem suggests a bracketed method like the regula falsi (false position) method, starting with two initial guesses $$s_a$$ and $$s_b$$ which are presumed to bracket the root, i.e., $$R(s_a) R(s_b) < 0$$. The regula falsi method iteratively refines the estimate for the root by constructing a secant line between the points $$(s_a, R(s_a))$$ and $$(s_b, R(s_b))$$ and finding its intercept with the s-axis. The next approximation for the root, $$s_{next}$$, is given by:\n$$\ns_{next} = s_b - R(s_b) \\frac{s_b - s_a}{R(s_b) - R(s_a)} = \\frac{s_a R(s_b) - s_b R(s_a)}{R(s_b) - R(s_a)}.\n$$\nThe bracket is then updated by replacing either $$s_a$$ or $$s_b$$ with $$s_{next}$$, ensuring the new interval $$[s_a, s_b]$$ continues to bracket the root. This iterative process continues until the magnitude of the residual at the new estimate is less than or equal to the specified tolerance $$\\varepsilon$$, i.e., $$|R(s_{next})| \\le \\varepsilon$$.\n\nThe complete numerical procedure is as follows:\n1.  Initialize the regula falsi algorithm with the provided bracketing guesses $$s_a$$ and $$s_b$$.\n2.  In each iteration of the algorithm, calculate the next guess $$s_{next}$$ using the regula falsi formula.\n3.  For this $$s_{next}$$, solve the IVP using the RK4 method from $$\\eta=0$$ to $$\\eta=\\eta_{\\max}$$ with the initial condition $$\\mathbf{y}(0) = [0, 0, s_{next}]^T$$.\n4.  Evaluate the residual $$R(s_{next}) = y_2(\\eta_{\\max}) - 1$$.\n5.  If $$|R(s_{next})| \\le \\varepsilon$$, the process terminates, and $$s_{next}$$ is the desired solution.\n6.  Otherwise, update the bracket $$[s_a, s_b]$$ and proceed to the next iteration.\n\nThis robust combination of methods will be implemented to solve for the value of $$s$$ for each specified parameter set.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Blasius boundary layer problem for multiple parameter sets\n    using a shooting method with RK4 and a regula falsi root-finder.\n    \"\"\"\n\n    test_cases = [\n        (8.0, 0.01, 1e-8, 0.30, 0.35),\n        (6.0, 0.02, 1e-6, 0.20, 0.50),\n        (10.0, 0.005, 1e-10, 0.32, 0.34),\n        (12.0, 0.02, 1e-8, 0.10, 0.60),\n    ]\n\n    results = []\n    for params in test_cases:\n        s_final = find_blasius_s(*params)\n        results.append(s_final)\n    \n    formatted_results = [f\"{r:.9f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\ndef find_blasius_s(eta_max, h, epsilon, s_a, s_b, max_iter=100):\n    \"\"\"\n    Finds the shooting parameter s = f''(0) for the Blasius equation.\n\n    Args:\n        eta_max (float): The finite value to approximate infinity.\n        h (float): The step size for the RK4 method.\n        epsilon (float): The tolerance for the residual |R(s)|.\n        s_a (float): The first initial guess for s (part of the bracket).\n        s_b (float): The second initial guess for s (part of the bracket).\n        max_iter (int): Maximum number of iterations for the root-finder.\n\n    Returns:\n        float: The value of s that satisfies the boundary condition within the tolerance.\n    \"\"\"\n\n    def blasius_ode(y_vec):\n        \"\"\"\n        Defines the right-hand side of the Blasius system of ODEs.\n        y_vec = [y1, y2, y3] = [f, f', f'']\n        Returns dy/d(eta) = [y2, y3, -0.5*y1*y3]\n        \"\"\"\n        return np.array([y_vec[1], y_vec[2], -0.5 * y_vec[0] * y_vec[2]], dtype=np.float64)\n\n    def evaluate_residual(s_guess):\n        \"\"\"\n        Solves the IVP for a given s_guess using RK4 and returns the residual R(s).\n        \"\"\"\n        y = np.array([0.0, 0.0, s_guess], dtype=np.float64)\n        num_steps = int(round(eta_max / h))\n\n        for _ in range(num_steps):\n            k1 = h * blasius_ode(y)\n            k2 = h * blasius_ode(y + 0.5 * k1)\n            k3 = h * blasius_ode(y + 0.5 * k2)\n            k4 = h * blasius_ode(y + k3)\n            y += (k1 + 2.0 * k2 + 2.0 * k3 + k4) / 6.0\n        \n        # Residual is R(s) = y2(eta_max; s) - 1\n        return y[1] - 1.0\n\n    r_a = evaluate_residual(s_a)\n    r_b = evaluate_residual(s_b)\n\n    if np.sign(r_a) == np.sign(r_b):\n        # This case should not occur with the provided problem inputs.\n        raise ValueError(\"Initial guesses s_a and s_b do not bracket the root.\")\n    \n    s_next = s_a\n    for _ in range(max_iter):\n        s_next = (s_a * r_b - s_b * r_a) / (r_b - r_a)\n        r_next = evaluate_residual(s_next)\n\n        if abs(r_next) = epsilon:\n            return s_next\n\n        if np.sign(r_next) == np.sign(r_a):\n            s_a = s_next\n            r_a = r_next\n        else: # np.sign(r_next) == np.sign(r_b)\n            s_b = s_next\n            r_b = r_next\n    \n    # Return the last computed value if max_iter is reached\n    return s_next\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2395918"}]}