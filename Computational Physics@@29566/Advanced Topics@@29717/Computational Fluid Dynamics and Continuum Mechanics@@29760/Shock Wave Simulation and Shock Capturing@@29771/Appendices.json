{"hands_on_practices": [{"introduction": "The term \"shock-capturing\" can be misleading, suggesting these numerical schemes are only useful when discontinuities are present. This exercise [@problem_id:1761774] addresses this common misconception by exploring a scenario with a perfectly smooth flow. By comparing a simple first-order scheme with a high-resolution Total Variation Diminishing (TVD) scheme, you will discover that the true power of advanced methods lies in their ability to maintain higher-order accuracy in smooth regions, significantly reducing the numerical diffusion that plagues simpler schemes.", "problem": "A computational fluid dynamics researcher is simulating a one-dimensional, subsonic, inviscid flow governed by the Euler equations. The initial condition for the flow consists of a smooth, slowly-varying sinusoidal wave in velocity and pressure propagating through a uniform medium. There are no shocks, contact discontinuities, or any other sharp gradients present in the initial state, and none are expected to form during the simulation time.\n\nThe researcher must select a numerical scheme for spatial discretization and is considering two common options:\n1.  A standard first-order upwind scheme.\n2.  A high-resolution Total Variation Diminishing (TVD) scheme, such as a MUSCL scheme that utilizes a flux limiter to achieve second-order accuracy in smooth regions.\n\nWhile the first-order scheme is computationally cheaper, accuracy is the primary concern. Which of the following statements most accurately describes the expected difference in simulation accuracy between these two schemes for this specific smooth-flow problem?\n\nA. There will be no significant difference in accuracy because the primary advantage of a TVD scheme is its ability to handle shocks, and since there are no shocks, both schemes will perform similarly.\n\nB. The first-order upwind scheme will be significantly more accurate because its inherent numerical diffusion is beneficial for smooth flows, helping to damp out any non-physical oscillations and maintain a stable solution profile.\n\nC. The high-resolution TVD scheme will be significantly more accurate because it is designed to operate as a second-order accurate scheme in smooth regions of the flow, resulting in substantially lower numerical error than the purely first-order scheme.\n\nD. There will be no significant difference in accuracy because the \"high-resolution\" and TVD properties are only activated in the presence of steep gradients. In a smooth flow, a TVD scheme effectively defaults to a first-order scheme, making its performance equivalent to the upwind scheme.\n\nE. Both schemes will produce highly inaccurate results, as both first-order upwind and TVD schemes are specifically designed for capturing shocks in compressible flows and are fundamentally unsuitable for simulating smooth, subsonic wave propagation.", "solution": "We analyze the expected accuracy of the two schemes for a one-dimensional, smooth, subsonic, inviscid Euler flow featuring only slowly varying sinusoidal perturbations. The governing equations are hyperbolic conservation laws, and we focus on spatial discretization accuracy in smooth regions.\n\nFirst, recall the concept of local truncation error and formal order of accuracy. A standard first-order upwind discretization of a linear hyperbolic equation such as $\\partial_{t} u + a \\partial_{x} u = 0$ has a local truncation error of order $O(\\Delta x)$ in space. A modified equation analysis shows that the first-order upwind scheme behaves like the original advection equation with an added artificial diffusion term of the form $\\nu_{\\text{num}} \\partial_{xx} u$, where the numerical viscosity coefficient scales as $\\nu_{\\text{num}} = O(\\Delta x)$. For smooth waves (e.g., a sinusoid), this causes amplitude damping and phase errors that decay only linearly with grid refinement.\n\nIn contrast, a MUSCL-type TVD scheme with an appropriate flux limiter is designed to be second-order accurate in smooth regions. In smooth flows, the ratio of consecutive gradients $r$ in the limiter function satisfies $r \\approx 1$, so standard limiters (e.g., van Leer, MC, van Albada) return slopes that are essentially unlimited, thereby recovering a linear reconstruction and yielding second-order spatial accuracy. Consequently, the local truncation error is $O(\\Delta x^{2})$, and both dissipative and dispersive errors are substantially smaller than those of the first-order scheme at the same resolution.\n\nBecause the initial condition and the evolving solution remain smooth, the TVD limiter does not need to activate strongly to suppress oscillations (there are no discontinuities), so the scheme operates in its high-resolution, second-order regime almost everywhere and almost all the time. Therefore, relative to first-order upwind, the TVD scheme will exhibit significantly reduced numerical diffusion and better phase accuracy for the sinusoidal wave, leading to substantially lower numerical error.\n\nWe now address the options:\n- Option A is incorrect: although TVD methods are designed to be non-oscillatory near discontinuities, their principal advantage is that they retain second-order accuracy in smooth regions; here, the flow is smooth, so the TVD scheme is more accurate.\n- Option B is incorrect: while numerical diffusion can suppress spurious oscillations near discontinuities, in a smooth sinusoidal wave it primarily damps the physical wave amplitude and induces phase error. This reduces accuracy rather than improving it.\n- Option C is correct: in smooth regions, the MUSCL-TVD scheme is second-order accurate with error $O(\\Delta x^{2})$, whereas the first-order upwind scheme has error $O(\\Delta x)$. This yields a significant accuracy advantage for the TVD scheme in the stated problem.\n- Option D is incorrect: TVD schemes do not default to first order in smooth regions; rather, the limiter recovers second-order behavior when the solution is smooth.\n- Option E is incorrect: both schemes are commonly used for smooth subsonic wave propagation; the issue is not suitability but order of accuracy and numerical dissipation.\n\nTherefore, the high-resolution TVD scheme will be significantly more accurate for this smooth-flow problem due to its second-order accuracy in smooth regions, producing substantially lower numerical error than the first-order upwind method.", "answer": "$$\\boxed{C}$$", "id": "1761774"}, {"introduction": "Visual inspection can give a qualitative sense of a scheme's performance, but rigorous computational science requires quantitative metrics. This practice [@problem_id:1761739] moves beyond simple observation by introducing a \"gradient-weighted spread\" to measure the degree of smearing, or numerical diffusion, in a computed shock profile. By applying this metric to idealized shock profiles, you will develop a practical skill for objectively evaluating and comparing the effectiveness of different shock-capturing schemes.", "problem": "A Computational Fluid Dynamics (CFD) engineer is analyzing the performance of two different numerical schemes for capturing shock waves. The test case involves the one-dimensional inviscid Burgers' equation, $\\frac{\\partial u}{\\partial t} + \\frac{\\partial}{\\partial x}\\left(\\frac{1}{2}u^2\\right) = 0$, on the spatial domain $x \\in [0, 2]$. The initial condition at time $t=0$ is a step discontinuity described by $u(x,0) = 2$ for $x < 0.5$ and $u(x,0) = 1$ for $x \\ge 0.5$.\n\nThe simulation is run until a final time $t_f$ at which the exact solution is a single shock wave located at $x_s = 1.1$. The numerical solutions obtained from Scheme A and Scheme B, while capturing the shock, exhibit different amounts of numerical diffusion, which smears the discontinuity. The engineer finds that the resulting numerical profiles can be accurately modeled by the following analytical functions:\n\n- Scheme A Profile: $u_A(x) = 1.5 - 0.5 \\tanh\\left(\\frac{x - 1.1}{W_A}\\right)$, with width parameter $W_A = 0.0125$.\n- Scheme B Profile: $u_B(x) = 1.5 - 0.5 \\tanh\\left(\\frac{x - 1.1}{W_B}\\right)$, with width parameter $W_B = 0.0075$.\n\nTo quantitatively compare the smearing effect, which is a manifestation of numerical diffusion, the engineer defines a \"gradient-weighted spread\" metric, $M$, given by:\n$$M = \\int_{0}^{2} (x - x_s)^2 \\left| \\frac{du}{dx} \\right| dx$$\nGiven that the shock profiles are highly localized around $x_s = 1.1$, the error introduced by extending the integration limits from $[0, 2]$ to $(-\\infty, \\infty)$ is negligible. To aid in your calculation, you may use the following standard definite integral identity:\n$$\\int_{-\\infty}^{\\infty} y^2 \\text{sech}^2(y) dy = \\frac{\\pi^2}{6}$$\n\nCalculate the ratio of the gradient-weighted spreads for the two schemes, $M_A / M_B$. Round your final answer to three significant figures.", "solution": "We treat both schemes with the common profile $u(x)=1.5-0.5\\,\\tanh\\!\\left(\\frac{x-x_{s}}{W}\\right)$, where $W=W_{A}$ or $W_{B}$ and $x_{s}=1.1$. The gradient-weighted spread is\n$$\nM=\\int_{0}^{2}(x-x_{s})^{2}\\left|\\frac{du}{dx}\\right|dx.\n$$\nSince the profile is localized around $x_{s}$, we extend the limits to $(-\\infty,\\infty)$ without significant error:\n$$\nM=\\int_{-\\infty}^{\\infty}(x-x_{s})^{2}\\left|\\frac{du}{dx}\\right|dx.\n$$\nDifferentiate $u(x)$ using $\\frac{d}{dx}\\tanh(z)=\\operatorname{sech}^{2}(z)\\,\\frac{dz}{dx}$:\n$$\n\\frac{du}{dx}=-0.5\\,\\operatorname{sech}^{2}\\!\\left(\\frac{x-x_{s}}{W}\\right)\\cdot\\frac{1}{W}.\n$$\nThus\n$$\n\\left|\\frac{du}{dx}\\right|=\\frac{0.5}{W}\\,\\operatorname{sech}^{2}\\!\\left(\\frac{x-x_{s}}{W}\\right).\n$$\nSubstitute $y=\\frac{x-x_{s}}{W}$ so that $x-x_{s}=Wy$ and $dx=W\\,dy$. Then\n$$\nM=\\int_{-\\infty}^{\\infty}(Wy)^{2}\\left(\\frac{0.5}{W}\\operatorname{sech}^{2}(y)\\right)W\\,dy\n=\\frac{1}{2}W^{2}\\int_{-\\infty}^{\\infty}y^{2}\\operatorname{sech}^{2}(y)\\,dy.\n$$\nUsing the given identity $\\int_{-\\infty}^{\\infty}y^{2}\\operatorname{sech}^{2}(y)\\,dy=\\frac{\\pi^{2}}{6}$, we obtain $M=\\frac{\\pi^{2}}{12}W^{2}$.\nTherefore, for the two schemes, $$ \\frac{M_{A}}{M_{B}}=\\left(\\frac{W_{A}}{W_{B}}\\right)^{2} =\\left(\\frac{0.0125}{0.0075}\\right)^{2} =\\left(\\frac{5}{3}\\right)^{2} =\\frac{25}{9}\\approx 2.78 $$ rounded to three significant figures.", "answer": "$$\\boxed{2.78}$$", "id": "1761739"}, {"introduction": "A truly robust numerical solver must perform reliably not just in typical scenarios but also at the limits of physical possibility. This advanced practice [@problem_id:2437084] presents one of the most classic and demanding test cases in computational gas dynamics: the expansion of a gas into a perfect vacuum. You are tasked with implementing a complete solver for the Euler equations that can handle this challenging Riemann problem, requiring you to both derive the theoretical behavior and build a positivity-preserving numerical scheme to match it.", "problem": "You will design and implement a one-dimensional shock-capturing solver for the compressible Euler equations that robustly handles an an initial vacuum state. The goal is to compute the numerical propagation speed of the vacuum boundary in a Riemann problem with an initially empty right state and to compare it against the theoretical prediction derived from first principles. The implementation must be a complete, runnable program.\n\nStart from the conservation-law form of the one-dimensional Euler equations for a calorically perfect gas with ratio of specific heats $\\gamma$:\n- Mass conservation: $\\partial_t \\rho + \\partial_x (\\rho u) = 0$.\n- Momentum conservation: $\\partial_t (\\rho u) + \\partial_x (\\rho u^2 + p) = 0$.\n- Total energy conservation: $\\partial_t E + \\partial_x \\left(u (E + p)\\right) = 0$.\n- Equation of state: $E = \\dfrac{p}{\\gamma - 1} + \\dfrac{1}{2}\\rho u^2$.\n\nDiscretize these equations using a uniform finite-volume mesh on a bounded interval with transmissive (zero-gradient) boundary conditions. Use a first-order explicit method with the Rusanov (local Lax–Friedrichs) numerical flux. The time step must satisfy a Courant–Friedrichs–Lewy stability condition based on the maximum signal speed $s = |u| + a$, where $a = \\sqrt{\\gamma p / \\rho}$ is the local sound speed. Handle the vacuum state robustly by ensuring that density and pressure remain nonnegative at all times via a minimal positivity-preserving correction that clamps negative values to zero in a physically consistent manner.\n\nInitial condition: a Riemann problem with a left state $(\\rho_L, u_L, p_L)$ and a right vacuum state $(\\rho_R, u_R, p_R) = (0, 0, 0)$, with a discontinuity at $x=0$. The domain is symmetric, $[x_L, x_R] = [-L, L]$, with the left state applied for $x < 0$ and the right vacuum state for $x \\ge 0$. The simulation is nondimensional; report all requested numerical quantities as dimensionless numbers.\n\nYou must:\n- Implement the finite-volume solver with the Rusanov flux.\n- Enforce a Courant–Friedrichs–Lewy time step $\\Delta t = \\mathrm{CFL} \\cdot \\Delta x / \\max_i (|u_i| + a_i)$, not exceeding the remaining time to the final time $t_{\\text{final}}$.\n- Apply transmissive boundary conditions using one ghost cell on each side.\n- Apply a minimal positivity fix after each update: enforce $\\rho \\ge 0$; if computed pressure $p = (\\gamma-1)\\left(E - \\tfrac{1}{2}\\rho u^2\\right)$ is negative in any cell with $\\rho > 0$, reset the cell’s internal energy to zero by setting $E \\leftarrow \\tfrac{1}{2}\\rho u^2$, which implies $p \\leftarrow 0$.\n- After reaching $t_{\\text{final}}$, estimate the front position as the largest cell-center $x$ where $\\rho(x) > \\rho_{\\text{th}}$ with a threshold $\\rho_{\\text{th}} = 10^{-6}$, and compute the numerical front speed $\\hat{v}_{\\text{num}} = x_{\\text{front}}/t_{\\text{final}}$.\n- Independently, from first principles of gas dynamics and characteristic analysis of a centered rarefaction into vacuum, derive the theoretical boundary (tail) speed of the expansion into vacuum in terms of $(\\rho_L,u_L,p_L,\\gamma)$, and use that expression in your code to compute $\\hat{v}_{\\text{th}}$ for comparison.\n- For error metrics, use the absolute error $|\\hat{v}_{\\text{num}} - \\hat{v}_{\\text{th}}|$.\n\nTest suite. Run the solver for the following four parameter sets; all symbols and numerals below are in LaTeX for precision:\n- Case A (general case):\n  - $\\gamma = 1.4$, $\\rho_L = 1.0$, $u_L = 0.0$, $p_L = 1.0$,\n  - $[x_L,x_R] = [-1.0, 1.0]$, $N = 400$ cells, $\\mathrm{CFL} = 0.4$, $t_{\\text{final}} = 0.05$.\n  - Output for this case: the absolute error $|\\hat{v}_{\\text{num}} - \\hat{v}_{\\text{th}}|$ as a floating-point number.\n- Case B (near-Courant-limit robustness and positivity):\n  - $\\gamma = 1.4$, $\\rho_L = 1.0$, $u_L = 0.0$, $p_L = 1.0$,\n  - $[x_L,x_R] = [-1.0, 1.0]$, $N = 200$ cells, $\\mathrm{CFL} = 0.95$, $t_{\\text{final}} = 0.05$.\n  - Output for this case: a boolean indicating whether all cell densities and pressures satisfy $\\rho \\ge 0$ and $p \\ge 0$ at $t_{\\text{final}}$.\n- Case C (weaker left state):\n  - $\\gamma = 1.4$, $\\rho_L = 0.125$, $u_L = 0.0$, $p_L = 0.1$,\n  - $[x_L,x_R] = [-1.0, 1.0]$, $N = 400$ cells, $\\mathrm{CFL} = 0.4$, $t_{\\text{final}} = 0.05$.\n  - Output for this case: the absolute error $|\\hat{v}_{\\text{num}} - \\hat{v}_{\\text{th}}|$ as a floating-point number.\n- Case D (different heat-capacity ratio):\n  - $\\gamma = \\dfrac{5}{3}$, $\\rho_L = 1.0$, $u_L = 0.0$, $p_L = 1.0$,\n  - $[x_L,x_R] = [-1.0, 1.0]$, $N = 400$ cells, $\\mathrm{CFL} = 0.4$, $t_{\\text{final}} = 0.05$.\n  - Output for this case: the absolute error $|\\hat{v}_{\\text{num}} - \\hat{v}_{\\text{th}}|$ as a floating-point number.\n\nFinal output format. Your program must print a single line containing a Python-like list that aggregates the four case results in order [Case A result, Case B result, Case C result, Case D result]. For example, the output must look like a single line of the form $[r_A, r_B, r_C, r_D]$, where $r_A$, $r_C$, and $r_D$ are floating-point numbers (dimensionless), and $r_B$ is a boolean value. No additional text must be printed.", "solution": "The problem presented is valid. It is a well-posed problem in computational fluid dynamics, grounded in the fundamental principles of the Euler equations and standard numerical methods. All necessary parameters and conditions are provided, and the objectives are clear and scientifically verifiable.\n\nThe problem requires a two-part analysis: a theoretical derivation of the vacuum boundary's propagation speed and a numerical simulation to validate this theory.\n\nFirst, we derive the theoretical speed of the expansion front into a vacuum. The problem describes a one-dimensional Riemann problem for the Euler equations, with a high-pressure gas on the left and a vacuum on the right. The governing equations are:\n$$ \\partial_t \\mathbf{U} + \\partial_x \\mathbf{F}(\\mathbf{U}) = 0 $$\nwhere the state vector of conserved variables $\\mathbf{U}$ and the flux vector $\\mathbf{F}(\\mathbf{U})$ are:\n$$ \\mathbf{U} = \\begin{pmatrix} \\rho \\\\ \\rho u \\\\ E \\end{pmatrix}, \\quad \\mathbf{F}(\\mathbf{U}) = \\begin{pmatrix} \\rho u \\\\ \\rho u^2 + p \\\\ u(E+p) \\end{pmatrix} $$\nHere, $\\rho$ is the density, $u$ is the velocity, $p$ is the pressure, and $E$ is the total energy per unit volume, related by the equation of state for a calorically perfect gas:\n$$ E = \\frac{p}{\\gamma - 1} + \\frac{1}{2}\\rho u^2 $$\nThe solution to a Riemann problem is self-similar, depending only on the variable $\\xi = x/t$. The initial discontinuity at $x=0$ between the left state $(\\rho_L, u_L, p_L)$ and the right vacuum state $(\\rho_R, u_R, p_R) = (0, 0, 0)$ evolves into a centered rarefaction wave. This wave smoothly connects the left state to the vacuum.\n\nThe dynamics of the rarefaction wave are described by the method of characteristics. For the Euler equations, the Riemann invariants along the $C_{\\pm}$ characteristics (with speeds $\\lambda_{\\pm} = u \\pm a$) are constant. The sound speed is $a = \\sqrt{\\gamma p / \\rho}$. Along a $C_{-}$ characteristic, the quantity $u + \\frac{2a}{\\gamma-1}$ is constant. This invariant must hold throughout the entire rarefaction fan. Therefore, its value at any point $(\\rho, u, p)$ within the fan must be equal to its value in the undisturbed left state:\n$$ u + \\frac{2a}{\\gamma-1} = u_L + \\frac{2a_L}{\\gamma-1} $$\nwhere $a_L = \\sqrt{\\gamma p_L / \\rho_L}$.\n\nThe tail of the rarefaction wave is the boundary between the expanding gas and the vacuum. At this boundary, the density and pressure drop to zero, and consequently, the sound speed becomes zero ($a_{tail} = 0$). The speed of this boundary is given by the local characteristic speed, $\\lambda_{+} = u_{tail} + a_{tail}$. Since $a_{tail}=0$, the speed of the vacuum front is simply the fluid velocity at that point, $u_{tail}$.\n\nSubstituting $a=a_{tail}=0$ into the Riemann invariant equation gives the velocity at the tail:\n$$ u_{tail} + \\frac{2(0)}{\\gamma-1} = u_L + \\frac{2a_L}{\\gamma-1} $$\n$$ u_{tail} = u_L + \\frac{2a_L}{\\gamma-1} $$\nThus, the theoretical speed of the vacuum boundary, $\\hat{v}_{\\text{th}}$, is:\n$$ \\hat{v}_{\\text{th}} = u_L + \\frac{2}{\\gamma-1} \\sqrt{\\frac{\\gamma p_L}{\\rho_L}} $$\nThis is the expression used for comparison with the numerical result.\n\nNext, we describe the numerical solver. A finite-volume method is employed on a uniform grid with cell width $\\Delta x$. The semi-discrete form of the Euler equations is:\n$$ \\frac{d\\mathbf{U}_i}{dt} = - \\frac{1}{\\Delta x} (\\mathbf{F}_{i+1/2} - \\mathbf{F}_{i-1/2}) $$\nwhere $\\mathbf{U}_i$ is the cell-averaged state vector in cell $i$, and $\\mathbf{F}_{i\\pm1/2}$ are the numerical fluxes at the cell interfaces. A first-order explicit Euler method is used for time integration:\n$$ \\mathbf{U}_i^{n+1} = \\mathbf{U}_i^n - \\frac{\\Delta t}{\\Delta x} (\\mathbf{F}_{i+1/2} - \\mathbf{F}_{i-1/2}) $$\nThe numerical flux is the Rusanov (or local Lax-Friedrichs) flux, given by:\n$$ \\mathbf{F}_{i+1/2} = \\frac{1}{2}\\left(\\mathbf{F}(\\mathbf{U}_i) + \\mathbf{F}(\\mathbf{U}_{i+1})\\right) - \\frac{s_{i+1/2}}{2}\\left(\\mathbf{U}_{i+1} - \\mathbf{U}_i\\right) $$\nThe local wave-speed estimate $s_{i+1/2}$ is the maximum signal speed at the interface:\n$$ s_{i+1/2} = \\max(|u_i| + a_i, |u_{i+1}| + a_{i+1}) $$\nThe time step $\\Delta t$ is constrained by the Courant-Friedrichs-Lewy (CFL) condition:\n$$ \\Delta t = \\text{CFL} \\cdot \\frac{\\Delta x}{\\max_i(|u_i| + a_i)} $$\nTransmissive (zero-gradient) boundary conditions are applied using one ghost cell at each end of the domain.\n\nA critical aspect of this problem is the robust handling of the vacuum state. When $\\rho \\to 0$, both $p \\to 0$ and $a \\to 0$. Numerical schemes can produce unphysical negative values for density or pressure. The specified positivity-preserving fix is applied after each time step:\n1. Enforce density non-negativity: $\\rho_i \\leftarrow \\max(\\rho_i, 0)$. In practice, due to the nature of the Rusanov scheme, density should remain non-negative under a suitable CFL condition, but this handles any floating-point undershoot. A very small positive floor is used in implementation to prevent division by zero.\n2. Correct negative pressure: If the computed pressure $p_i = (\\gamma-1)(E_i - \\frac{1}{2}\\rho_i u_i^2)$ becomes negative in a cell where $\\rho_i > 0$, the cell's internal energy is reset to zero. This implies $p_i \\leftarrow 0$, and the total energy is updated to be purely kinetic: $E_i \\leftarrow \\frac{1}{2}\\rho_i u_i^2$.\n\nAfter the simulation runs to the final time $t_{\\text{final}}$, the numerical front speed $\\hat{v}_{\\text{num}}$ is estimated. The front position $x_{\\text{front}}$ is identified as the center of the rightmost cell where the density $\\rho$ exceeds a small threshold $\\rho_{\\text{th}} = 10^{-6}$. The numerical speed is then $\\hat{v}_{\\text{num}} = x_{\\text{front}} / t_{\\text{final}}$. The absolute error $|\\hat{v}_{\\text{num}} - \\hat{v}_{\\text{th}}|$ is then computed for the specified test cases. For case B, the positivity of the final density and pressure fields is checked.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite for the 1D Euler solver.\n    \"\"\"\n    RHO, MOM, ENE = 0, 1, 2  # Indices for conserved variables\n\n    def _conserved_to_primitive(U, gamma):\n        \"\"\"\n        Converts a matrix of conserved variables U to primitive variables rho, u, p.\n        U is a (3, M) array.\n        \"\"\"\n        rho = U[RHO, :]\n        mom = U[MOM, :]\n        ene = U[ENE, :]\n        \n        # Handle vacuum state rho=0\n        u = np.divide(mom, rho, out=np.zeros_like(mom), where=rho > 1e-12)\n        p = (gamma - 1) * (ene - 0.5 * mom * u)\n        \n        # Clamp pressure to be non-negative for physical consistency\n        p = np.maximum(p, 0.0)\n        return rho, u, p\n\n    def _get_flux(U, gamma, u, p):\n        \"\"\"\n        Computes the flux vector F from conserved variables U and some primitive variables.\n        U is a (3, M) array, u and p are (M,) arrays.\n        \"\"\"\n        F = np.zeros_like(U)\n        F[RHO, :] = U[MOM, :]\n        F[MOM, :] = U[RHO, :] * u**2 + p\n        F[ENE, :] = u * (U[ENE, :] + p)\n        return F\n\n    def solve_case(gamma, rho_L, u_L, p_L, L, N, CFL, t_final, rho_th, task):\n        \"\"\"\n        Solves a single case of the Riemann problem with vacuum.\n        \"\"\"\n        dx = 2.0 * L / N\n        x = np.linspace(-L + dx / 2.0, L - dx / 2.0, N)\n\n        # Initialize state vector U with ghost cells\n        U = np.zeros((3, N + 2))\n        \n        # Set initial conditions in the interior domain\n        rho_init = np.where(x < 0, rho_L, 0.0)\n        u_init = np.where(x < 0, u_L, 0.0)\n        p_init = np.where(x < 0, p_L, 0.0)\n        \n        # Convert to conserved variables\n        U[RHO, 1:N+1] = rho_init\n        U[MOM, 1:N+1] = rho_init * u_init\n        U[ENE, 1:N+1] = p_init / (gamma - 1) + 0.5 * rho_init * u_init**2\n        \n        t = 0.0\n        while t < t_final:\n            # Apply transmissive (zero-gradient) boundary conditions\n            U[:, 0] = U[:, 1]\n            U[:, N+1] = U[:, N]\n\n            # Decode primitive variables from conserved state\n            rho_all, u_all, p_all = _conserved_to_primitive(U, gamma)\n\n            # Calculate sound speed\n            a_all = np.sqrt(gamma * p_all / rho_all, out=np.zeros_like(rho_all), where=rho_all > 1e-12)\n            \n            # CFL condition for time step\n            max_speed = np.max(np.abs(u_all) + a_all)\n            if max_speed == 0: max_speed = 1e-6\n            dt = CFL * dx / max_speed\n            dt = min(dt, t_final - t)\n\n            # Rusanov (local Lax-Friedrichs) flux calculation\n            U_L = U[:, :-1]\n            U_R = U[:, 1:]\n            \n            rho_L_if, u_L_if, p_L_if = _conserved_to_primitive(U_L, gamma)\n            rho_R_if, u_R_if, p_R_if = _conserved_to_primitive(U_R, gamma)\n\n            a_L_if = np.sqrt(gamma * p_L_if / rho_L_if, out=np.zeros_like(rho_L_if), where=rho_L_if > 1e-12)\n            a_R_if = np.sqrt(gamma * p_R_if / rho_R_if, out=np.zeros_like(rho_R_if), where=rho_R_if > 1e-12)\n\n            F_L = _get_flux(U_L, gamma, u_L_if, p_L_if)\n            F_R = _get_flux(U_R, gamma, u_R_if, p_R_if)\n\n            s_half = np.maximum(np.abs(u_L_if) + a_L_if, np.abs(u_R_if) + a_R_if)\n            F_half = 0.5 * (F_L + F_R) - 0.5 * s_half[np.newaxis, :] * (U_R - U_L)\n\n            # Update state with first-order explicit Euler\n            U[:, 1:N+1] -= (dt / dx) * (F_half[:, 1:] - F_half[:, :-1])\n\n            # Positivity-preserving correction for pressure\n            rho_new = U[RHO, 1:N+1]\n            mom_new = U[MOM, 1:N+1]\n            ene_new = U[ENE, 1:N+1]\n\n            # Clamp density to be non-negative (robustness for floating point)\n            U[RHO, 1:N+1] = np.maximum(rho_new, 0.0)\n            rho_new = U[RHO, 1:N+1]\n\n            u_new = np.divide(mom_new, rho_new, out=np.zeros_like(mom_new), where=rho_new > 1e-12)\n            p_new = (gamma - 1) * (ene_new - 0.5 * rho_new * u_new**2)\n\n            # Find cells with negative pressure and positive density\n            neg_p_mask = (p_new < 0) & (rho_new > 1e-12)\n            \n            # Reset internal energy to zero for those cells\n            ene_new[neg_p_mask] = 0.5 * mom_new[neg_p_mask]**2 / rho_new[neg_p_mask]\n            U[ENE, 1:N+1] = ene_new\n\n            t += dt\n\n        # Post-processing and analysis\n        rho_final = U[RHO, 1:N+1]\n        \n        if task == 'positivity':\n            _, _, p_final = _conserved_to_primitive(U[:, 1:N+1], gamma)\n            return bool(np.all(rho_final >= 0) and np.all(p_final >= 0))\n        elif task == 'error':\n            # Numerical front speed\n            front_indices = np.where(rho_final > rho_th)[0]\n            if len(front_indices) > 0:\n                x_front = x[front_indices[-1]]\n                v_num = x_front / t_final\n            else:\n                v_num = 0.0\n\n            # Theoretical front speed\n            a_L = np.sqrt(gamma * p_L / rho_L) if rho_L > 0 else 0.0\n            v_th = u_L + (2.0 * a_L) / (gamma - 1.0)\n            \n            return abs(v_num - v_th)\n        return None\n\n\n    test_cases = [\n        # Case A\n        {'gamma': 1.4, 'rho_L': 1.0, 'u_L': 0.0, 'p_L': 1.0, 'L': 1.0, 'N': 400, 'CFL': 0.4, 't_final': 0.05, 'rho_th': 1e-6, 'task': 'error'},\n        # Case B\n        {'gamma': 1.4, 'rho_L': 1.0, 'u_L': 0.0, 'p_L': 1.0, 'L': 1.0, 'N': 200, 'CFL': 0.95, 't_final': 0.05, 'rho_th': 1e-6, 'task': 'positivity'},\n        # Case C\n        {'gamma': 1.4, 'rho_L': 0.125, 'u_L': 0.0, 'p_L': 0.1, 'L': 1.0, 'N': 400, 'CFL': 0.4, 't_final': 0.05, 'rho_th': 1e-6, 'task': 'error'},\n        # Case D\n        {'gamma': 5.0/3.0, 'rho_L': 1.0, 'u_L': 0.0, 'p_L': 1.0, 'L': 1.0, 'N': 400, 'CFL': 0.4, 't_final': 0.05, 'rho_th': 1e-6, 'task': 'error'},\n    ]\n\n    results = [solve_case(**case) for case in test_cases]\n    \n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2437084"}]}