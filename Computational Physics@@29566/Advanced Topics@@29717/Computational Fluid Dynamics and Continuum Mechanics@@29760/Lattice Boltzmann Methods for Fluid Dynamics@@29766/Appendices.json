{"hands_on_practices": [{"introduction": "The power of the Lattice Boltzmann Method (LBM) lies in its ability to reproduce complex macroscopic fluid dynamics from simple, local rules. This exercise tasks you with proving this connection by deriving the emergent kinematic viscosity, $\\nu$, from first principles. By applying the Chapman-Enskog expansion, you will uncover the direct relationship between the mesoscopic relaxation time $\\tau$ and the macroscopic fluid viscosity, solidifying your understanding of the physical basis of the LBM. [@problem_id:2501012]", "problem": "Consider an athermal lattice Boltzmann method (LBM) with the single-relaxation-time Bhatnagar-Gross-Krook (BGK) collision model for isothermal, weakly compressible flow. The discrete kinetic equation is\n$$\nf_i(\\mathbf{x}+\\mathbf{e}_i \\,\\Delta t,\\, t+\\Delta t) - f_i(\\mathbf{x},t) \\;=\\; -\\frac{\\Delta t}{\\tau}\\left[f_i(\\mathbf{x},t)-f_i^{\\mathrm{eq}}(\\mathbf{x},t)\\right],\n$$\nwhere $f_i$ is the discrete distribution function associated with discrete velocity $\\mathbf{e}_i$, $f_i^{\\mathrm{eq}}$ is its local equilibrium, $\\tau$ is the relaxation time, and $\\Delta t$ is the time step. The local hydrodynamic fields are defined by\n$$\n\\rho \\;=\\; \\sum_i f_i, \\qquad \\rho \\,\\mathbf{u} \\;=\\; \\sum_i \\mathbf{e}_i f_i.\n$$\nAssume an isothermal second-order equilibrium of the form\n$$\nf_i^{\\mathrm{eq}} \\;=\\; w_i \\,\\rho \\left[ 1 + \\frac{\\mathbf{e}_i\\cdot \\mathbf{u}}{c_s^2} + \\frac{(\\mathbf{e}_i\\cdot \\mathbf{u})^2}{2 c_s^4} - \\frac{\\mathbf{u}\\cdot\\mathbf{u}}{2 c_s^2} \\right],\n$$\nwith weights $w_i$ and lattice sound speed $c_s$ satisfying the isotropy constraints\n$$\n\\sum_i w_i \\;=\\; 1,\\quad \\sum_i w_i\\, e_{i\\alpha} \\;=\\; 0,\\quad \\sum_i w_i\\, e_{i\\alpha} e_{i\\beta} \\;=\\; c_s^2 \\delta_{\\alpha\\beta},\\quad \\sum_i w_i\\, e_{i\\alpha} e_{i\\beta} e_{i\\gamma} \\;=\\; 0,\n$$\nand\n$$\n\\sum_i w_i\\, e_{i\\alpha} e_{i\\beta} e_{i\\gamma} e_{i\\delta} \\;=\\; c_s^4\\left(\\delta_{\\alpha\\beta}\\delta_{\\gamma\\delta} + \\delta_{\\alpha\\gamma}\\delta_{\\beta\\delta} + \\delta_{\\alpha\\delta}\\delta_{\\beta\\gamma}\\right),\n$$\nwhere $\\delta_{\\alpha\\beta}$ is the Kronecker delta and Greek indices denote Cartesian components with the Einstein summation convention. Using a Chapman–Enskog expansion carried to second order in space and time scales, starting from the discrete kinetic equation itself and the above equilibrium and isotropy relations (but without assuming any target macroscopic transport coefficient a priori), derive the emergent Navier–Stokes momentum equation and identify the kinematic viscosity $\\,\\nu\\,$ in terms of $\\,\\tau\\,$, $\\,\\Delta t\\,$, and $\\,c_s\\,$.\n\nThen, based on your derivation, state the constraint on $\\,\\tau\\,$ required for non-negative kinematic viscosity and explain its physical relevance in terms of dissipation. Your explanation must be reasoned from the structure of the derived macroscopic equations, not by appeal to external formulas.\n\nExpress your final answer as a single closed-form analytic expression for $\\,\\nu\\,$ in terms of $\\,\\tau\\,$, $\\,\\Delta t\\,$, and $\\,c_s\\,$ only. Do not include any units in the final answer box. No numerical evaluation is required.", "solution": "The problem requires deriving the kinematic viscosity $\\nu$ from the discrete lattice Boltzmann equation using a Chapman-Enskog expansion.\n\nThe macroscopic momentum equation is obtained by taking the first moment of the distribution function over the discrete velocities:\n$$\n\\partial_t(\\rho u_\\alpha) + \\partial_\\beta \\Pi_{\\alpha\\beta} = 0,\n$$\nwhere $\\Pi_{\\alpha\\beta} = \\sum_i e_{i\\alpha} e_{i\\beta} f_i$ is the momentum flux tensor. To recover the Navier-Stokes equations, we must evaluate this tensor. We split it into its equilibrium and non-equilibrium parts: $\\Pi_{\\alpha\\beta} = \\Pi_{\\alpha\\beta}^{\\mathrm{eq}} + \\Pi_{\\alpha\\beta}^{\\mathrm{neq}}$.\n\n1.  **Equilibrium Momentum Flux:** The equilibrium part is calculated using the given $f_i^{\\mathrm{eq}}$:\n    $$\n    \\Pi_{\\alpha\\beta}^{\\mathrm{eq}} = \\sum_i e_{i\\alpha} e_{i\\beta} f_i^{\\mathrm{eq}} = \\rho u_\\alpha u_\\beta + p\\delta_{\\alpha\\beta},\n    $$\n    where $p = \\rho c_s^2$ is the ideal gas pressure. This is a standard result derived using the isotropy relations.\n\n2.  **Non-Equilibrium Momentum Flux:** The non-equilibrium part $\\Pi_{\\alpha\\beta}^{\\mathrm{neq}} = \\sum_i e_{i\\alpha} e_{i\\beta} f_i^{\\mathrm{neq}}$, where $f_i^{\\mathrm{neq}} = f_i - f_i^{\\mathrm{eq}}$, is responsible for viscous stress. To find an expression for $f_i^{\\mathrm{neq}}$, we Taylor-expand the discrete kinetic equation in $\\Delta t$:\n    $$\n    \\left(\\partial_t + \\mathbf{e}_i \\cdot \\nabla\\right)f_i + \\frac{\\Delta t}{2}\\left(\\partial_t + \\mathbf{e}_i \\cdot \\nabla\\right)^2 f_i + \\dots = -\\frac{1}{\\tau} f_i^{\\mathrm{neq}}.\n    $$\n    In the Chapman-Enskog expansion, we assume $f_i^{\\mathrm{neq}}$ is small. To first order, we can approximate $f_i \\approx f_i^{\\mathrm{eq}}$ on the left side:\n    $$\n    f_i^{\\mathrm{neq}} \\approx -\\tau \\left( \\partial_t + \\mathbf{e}_i \\cdot \\nabla \\right)f_i^{\\mathrm{eq}} - \\frac{\\Delta t}{2} \\left( \\partial_t + \\mathbf{e}_i \\cdot \\nabla \\right)^2 f_i^{\\mathrm{eq}}.\n    $$\n    A crucial insight of the analysis for the BGK model is that the second term on the right can be approximated. Since to lowest order, $(\\partial_t + \\mathbf{e}_i \\cdot \\nabla)f_i^{\\mathrm{eq}} \\approx -\\frac{1}{\\tau} f_i^{\\mathrm{neq}}$, we can write:\n    $$\n    \\left( \\partial_t + \\mathbf{e}_i \\cdot \\nabla \\right)^2 f_i^{\\mathrm{eq}} \\approx \\left( \\partial_t + \\mathbf{e}_i \\cdot \\nabla \\right) \\left(-\\frac{1}{\\tau} f_i^{\\mathrm{neq}}\\right)\n    $$\n    This term is of higher order and is often neglected in simplified derivations. However, a more complete analysis shows that the effect of the discrete time step $\\Delta t$ can be captured by relating the continuous-time non-equilibrium distribution $f_i^{(1)}$ from the expansion to the discrete-time $f_i^{\\mathrm{neq}}$ as $f_i^{\\mathrm{neq}} = f_i^{(1)} - \\frac{\\Delta t}{2\\tau} f_i^{(1)}$. Therefore, the non-equilibrium momentum flux is:\n    $$\n    \\Pi_{\\alpha\\beta}^{\\mathrm{neq}} = \\sum_i e_{i\\alpha} e_{i\\beta} \\left(1 - \\frac{\\Delta t}{2\\tau}\\right) f_i^{(1)}.\n    $$\n    To leading order in gradients, $f_i^{(1)} = -\\tau(\\partial_t + \\mathbf{e}_i \\cdot \\nabla)f_i^{\\mathrm{eq}}$. In the low Mach number, near-incompressible limit, time derivatives are neglected compared to spatial gradients, giving $f_i^{(1)} \\approx -\\tau (\\mathbf{e}_i \\cdot \\nabla)f_i^{\\mathrm{eq}}$.\n    Substituting this into the expression for $\\Pi_{\\alpha\\beta}^{\\mathrm{neq}}$:\n    $$\n    \\Pi_{\\alpha\\beta}^{\\mathrm{neq}} = -\\left(1 - \\frac{\\Delta t}{2\\tau}\\right)\\tau \\sum_i e_{i\\alpha}e_{i\\beta} e_{i\\gamma} \\partial_\\gamma f_i^{\\mathrm{eq}}.\n    $$\n    Using the given $f_i^{\\mathrm{eq}}$ and isotropy conditions in the low-velocity limit ($f_i^{\\mathrm{eq}} \\approx w_i \\rho(1 + \\mathbf{e}_i \\cdot \\mathbf{u}/c_s^2)$), the sum evaluates to $\\rho c_s^2(\\partial_\\alpha u_\\beta + \\partial_\\beta u_\\alpha + \\partial_\\gamma u_\\gamma \\delta_{\\alpha\\beta})$. The last term is incorrect due to the third-order moment of $f_i^{eq}$ not being used correctly. A more careful evaluation using the fourth-rank tensor isotropy yields:\n    $$\n    \\sum_i e_{i\\alpha}e_{i\\beta}e_{i\\gamma}\\partial_\\gamma f_i^{\\mathrm{eq}} \\approx \\rho c_s^2 (\\partial_\\beta u_\\alpha + \\partial_\\alpha u_\\beta).\n    $$\n    This leads to the viscous stress tensor for an incompressible flow:\n    $$\n    \\Pi_{\\alpha\\beta}^{\\mathrm{neq}} = - \\rho c_s^2 \\left(\\tau - \\frac{\\Delta t}{2}\\right) (\\partial_\\beta u_\\alpha + \\partial_\\alpha u_\\beta).\n    $$\n\n3.  **Recovering Navier-Stokes:** The full momentum equation becomes:\n    $$\n    \\partial_t(\\rho u_\\alpha) + \\partial_\\beta(\\rho u_\\alpha u_\\beta + p\\delta_{\\alpha\\beta}) = \\partial_\\beta \\left[ \\rho c_s^2 \\left(\\tau - \\frac{\\Delta t}{2}\\right) (\\partial_\\beta u_\\alpha + \\partial_\\alpha u_\\beta) \\right].\n    $$\n    Comparing this to the incompressible Navier-Stokes equation, $\\partial_t u_\\alpha + \\dots = \\nu \\nabla^2 u_\\alpha$, we can identify the dynamic viscosity $\\mu = \\rho c_s^2 (\\tau - \\frac{\\Delta t}{2})$.\n    The kinematic viscosity $\\nu$ is $\\mu/\\rho$. Therefore:\n    $$\n    \\nu = c_s^2 \\left(\\tau - \\frac{\\Delta t}{2}\\right).\n    $$\n\n4.  **Stability Constraint:** For the simulation to be physically meaningful and stable, the dissipation must be non-negative, which means the kinematic viscosity must be non-negative: $\\nu \\ge 0$. Since $c_s^2 > 0$, this implies the constraint:\n    $$\n    \\tau - \\frac{\\Delta t}{2} \\ge 0 \\quad \\implies \\quad \\tau \\ge \\frac{\\Delta t}{2}.\n    $$\n    Physically, this means the rate of relaxation towards equilibrium (controlled by $\\tau$) must be sufficient to overcome the \"numerical viscosity\" (the $-\\Delta t/2$ term), which arises from the finite time discretization of the streaming step. If this condition is violated, the system would exhibit anti-dissipation, leading to an unphysical amplification of small perturbations and numerical instability.", "answer": "$$\n\\boxed{c_s^2 \\left( \\tau - \\frac{\\Delta t}{2} \\right)}\n$$", "id": "2501012"}, {"introduction": "Moving from theory to application, this practice challenges you to implement a complete 3D LBM solver from scratch. You will simulate the decaying Taylor-Green vortex, a classic benchmark for validating fluid dynamics codes, and compare the accuracy of two different lattice models, D3Q19 and D3Q15. This hands-on coding experience is invaluable for mastering the algorithmic details of the LBM and appreciating the trade-offs between computational cost and physical fidelity in model selection. [@problem_id:2407073]", "problem": "Implement a self-contained program that simulates an isothermal single-relaxation-time Boltzmann Bhatnagar-Gross-Krook (BGK) lattice Boltzmann method for three-dimensional incompressible flow using two velocity sets and compares their accuracy for a decaying Taylor-Green vortex. The two velocity sets are D$3$Q$19$ and D$3$Q$15$. All quantities are to be expressed in lattice units, where the lattice spacing $\\Delta x$ and time step $\\Delta t$ are both equal to $1$.\n\nThe discrete velocity sets and weights are as follows.\n\nFor D$3$Q$19$, the discrete velocities $\\{\\mathbf{c}_i\\}_{i=0}^{18}$ and weights $\\{w_i\\}_{i=0}^{18}$ are:\n- One rest velocity: $\\mathbf{c}_0=(0,0,0)$ with $w_0=\\tfrac{1}{3}$.\n- Six face-centered velocities: $(\\pm 1,0,0)$, $(0,\\pm 1,0)$, $(0,0,\\pm 1)$ with $w_i=\\tfrac{1}{18}$.\n- Twelve edge-centered velocities: $(\\pm 1,\\pm 1,0)$, $(\\pm 1,0,\\pm 1)$, $(0,\\pm 1,\\pm 1)$ with $w_i=\\tfrac{1}{36}$.\n\nFor D$3$Q$15$, the discrete velocities $\\{\\mathbf{c}_i\\}_{i=0}^{14}$ and weights $\\{w_i\\}_{i=0}^{14}$ are:\n- One rest velocity: $\\mathbf{c}_0=(0,0,0)$ with $w_0=\\tfrac{2}{9}$.\n- Six face-centered velocities: $(\\pm 1,0,0)$, $(0,\\pm 1,0)$, $(0,0,\\pm 1)$ with $w_i=\\tfrac{1}{9}$.\n- Eight corner velocities: $(\\pm 1,\\pm 1,\\pm 1)$ with $w_i=\\tfrac{1}{72}$.\n\nFor both velocity sets, the isothermal lattice sound speed satisfies $c_s^2=\\tfrac{1}{3}$. The kinematic viscosity in lattice units is related to the relaxation time $\\tau$ by $\\nu=c_s^2(\\tau-\\tfrac{1}{2})$.\n\nConsider a triply periodic cubic domain with $N$ nodes in each coordinate direction and periodic boundary conditions. Let the initial condition at time $t=0$ be the divergence-free Taylor-Green vortex\n$$\nu_x(x,y,z,0)=U_0\\sin\\left(\\frac{2\\pi x}{N}\\right)\\cos\\left(\\frac{2\\pi y}{N}\\right)\\cos\\left(\\frac{2\\pi z}{N}\\right), \\quad\nu_y(x,y,z,0)=-U_0\\cos\\left(\\frac{2\\pi x}{N}\\right)\\sin\\left(\\frac{2\\pi y}{N}\\right)\\cos\\left(\\frac{2\\pi z}{N}\\right), \\quad\nu_z(x,y,z,0)=0,\n$$\nwith uniform density $\\rho(x,y,z,0)=1$. For the corresponding decaying solution of the incompressible Navier–Stokes equations, the velocity field remains of the same spatial form and decays in time according to\n$$\n\\mathbf{u}(x,y,z,t)=\\mathbf{u}(x,y,z,0)\\exp\\left(-\\nu k^2 t\\right), \\quad \\text{where } k^2=3\\left(\\frac{2\\pi}{N}\\right)^2.\n$$\n\nImplement both D$3$Q$19$ and D$3$Q$15$ models using the BGK collision operator with periodic boundaries in all directions. Evolve from the initial condition for a prescribed number of time steps $T$ and compute the relative $\\ell^2$ error of the numerical velocity field against the analytical Taylor-Green vortex at time $t=T$:\n$$\nE=\\frac{\\left\\|\\mathbf{u}_{\\text{num}}(\\cdot,T)-\\mathbf{u}_{\\text{ana}}(\\cdot,T)\\right\\|_2}{\\left\\|\\mathbf{u}_{\\text{ana}}(\\cdot,T)\\right\\|_2},\n$$\nwhere $\\|\\cdot\\|_2$ denotes the discrete $\\ell^2$ norm over all grid nodes and all three velocity components.\n\nUse the following test suite, where each case specifies $(N,\\tau,T,U_0)$:\n- Case A (general): $(N,\\tau,T,U_0)=\\left(16,\\,0.8,\\,60,\\,0.05\\right)$.\n- Case B (lower viscosity): $(N,\\tau,T,U_0)=\\left(16,\\,0.6,\\,60,\\,0.05\\right)$.\n- Case C (coarser grid, shorter time): $(N,\\tau,T,U_0)=\\left(8,\\,0.8,\\,20,\\,0.05\\right)$.\n\nFor each case, compute $E_{19}$ for D$3$Q$19$ and $E_{15}$ for D$3$Q$15$, and also determine the boolean $B$ that is true if and only if $E_{19}<E_{15}$.\n\nYour program should produce a single line of output containing the results for the three cases as a comma-separated list enclosed in square brackets, in the order\n$$\n\\left[E_{19}^{(A)},E_{15}^{(A)},B^{(A)},E_{19}^{(B)},E_{15}^{(B)},B^{(B)},E_{19}^{(C)},E_{15}^{(C)},B^{(C)}\\right],\n$$\nwhere each $E$ must be rounded to exactly six decimal places. No other text should be printed.", "solution": "The problem presented is a well-defined and standard benchmark in the field of computational fluid dynamics used to validate numerical schemes. It is known as the decaying Taylor-Green vortex. The problem statement is scientifically grounded, internally consistent, and contains all necessary information to proceed with a unique solution. It requires the implementation and comparison of two common lattice structures for the three-dimensional Lattice Boltzmann Method (LBM), D$3$Q$19$ and D$3$Q$15$. The validation is successful, and a solution will be provided.\n\nThe core of the solution is the Lattice Boltzmann Method (LBM) with the Bhatnagar-Gross-Krook (BGK) single-relaxation-time collision operator. In LBM, fluid dynamics are simulated by tracking the evolution of discrete particle distribution functions, $f_i(\\mathbf{x}, t)$, on a regular lattice. Each function $f_i$ represents the population of fluid particles at a lattice node $\\mathbf{x}$ at time $t$ moving with a discrete velocity $\\mathbf{c}_i$. The evolution of these populations is governed by the lattice Boltzmann equation:\n$$\nf_i(\\mathbf{x} + \\mathbf{c}_i\\Delta t, t + \\Delta t) - f_i(\\mathbf{x}, t) = \\Omega_i\n$$\nwhere $\\Omega_i$ is the collision operator. The problem specifies the BGK model, where $\\Omega_i = -\\frac{1}{\\tau} [f_i(\\mathbf{x}, t) - f_i^{eq}(\\mathbf{x}, t)]$. Here, $\\tau$ is the relaxation time, and $f_i^{eq}$ is the local equilibrium distribution function.\n\nThe simulation proceeds in two steps for each time increment $\\Delta t$:\n\n1.  **Collision Step:** At each lattice node, the particle distributions are relaxed towards their local equilibrium. The post-collision state $f_i^*$ is computed as:\n    $$\n    f_i^*(\\mathbf{x}, t) = f_i(\\mathbf{x}, t) - \\frac{1}{\\tau} [f_i(\\mathbf{x}, t) - f_i^{eq}(\\mathbf{x}, t)]\n    $$\n\n2.  **Streaming Step:** The post-collision distributions $f_i^*$ are propagated to adjacent lattice nodes according to their velocities:\n    $$\n    f_i(\\mathbf{x} + \\mathbf{c}_i, t + 1) = f_i^*(\\mathbf{x}, t)\n    $$\n    As the problem states, we work in lattice units where the lattice spacing $\\Delta x = 1$ and the time step $\\Delta t = 1$.\n\nMacroscopic fluid properties, specifically density $\\rho$ and velocity $\\mathbf{u}$, are calculated as moments of the distribution functions:\n$$\n\\rho = \\sum_{i} f_i\n$$\n$$\n\\rho\\mathbf{u} = \\sum_{i} f_i \\mathbf{c}_i\n$$\n\nThe equilibrium distribution $f_i^{eq}$ is a function of the local macroscopic properties. For nearly incompressible flows, a second-order expansion in velocity is sufficient:\n$$\nf_i^{eq}(\\rho, \\mathbf{u}) = w_i \\rho \\left[ 1 + \\frac{\\mathbf{c}_i \\cdot \\mathbf{u}}{c_s^2} + \\frac{(\\mathbf{c}_i \\cdot \\mathbf{u})^2}{2c_s^4} - \\frac{\\mathbf{u} \\cdot \\mathbf{u}}{2c_s^2} \\right]\n$$\nwhere $w_i$ are the model-specific weights and $c_s$ is the lattice speed of sound, given as $c_s^2 = \\frac{1}{3}$ for both models.\n\nThe problem requires implementation of two velocity sets: D$3$Q$19$ (3 dimensions, 19 velocities) and D$3$Q$15$ (3 dimensions, 15 velocities). The discrete velocities $\\{\\mathbf{c}_i\\}$ and weights $\\{w_i\\}$ are provided in the problem statement and are fundamental to defining the specific LBM model. The kinematic viscosity $\\nu$ is related to the relaxation time by $\\nu = c_s^2(\\tau - 0.5)$.\n\nThe simulation methodology is as follows:\n\n**1. Initialization:**\nA cubic domain of size $N \\times N \\times N$ is defined. The macroscopic velocity field $\\mathbf{u}(\\mathbf{x}, 0)$ and density field $\\rho(\\mathbf{x}, 0)$ are initialized according to the given Taylor-Green vortex formulas.\n-   $\\rho(\\mathbf{x}, 0) = 1$ for all $\\mathbf{x}$.\n-   $\\mathbf{u}(\\mathbf{x}, 0) = [u_x(0), u_y(0), u_z(0)]$ as defined in the problem.\nThe initial particle distributions $f_i(\\mathbf{x}, 0)$ are set to their equilibrium values, $f_i^{eq}(\\rho(\\mathbf{x}, 0), \\mathbf{u}(\\mathbf{x}, 0))$, to ensure consistency.\n\n**2. Time Evolution:**\nThe simulation evolves for $T$ time steps. In each step:\na.  Macroscopic quantities $\\rho(t)$ and $\\mathbf{u}(t)$ are computed from the current distributions $f_i(t)$.\nb.  The equilibrium distributions $f_i^{eq}(t)$ are calculated using these new macroscopic values.\nc.  The collision step is performed to obtain $f_i^*(t)$.\nd.  The streaming step is performed to obtain $f_i(t+1)$. For the specified periodic boundary conditions, this is implemented efficiently using a cyclic shift operation on the distribution function arrays.\n\n**3. Error Computation:**\nAfter $T$ steps, the final numerical velocity field $\\mathbf{u}_{\\text{num}}(\\mathbf{x}, T)$ is computed from the final distributions $f_i(\\mathbf{x}, T)$. This is compared against the analytical solution for the decaying Taylor-Green vortex:\n$$\n\\mathbf{u}_{\\text{ana}}(x,y,z,T) = \\mathbf{u}(x,y,z,0)\\exp\\left(-\\nu k^2 T\\right)\n$$\nwhere the decay wave number is $k^2=3\\left(\\frac{2\\pi}{N}\\right)^2$ and the viscosity $\\nu = \\frac{1}{3}(\\tau-\\frac{1}{2})$.\nThe relative $\\ell^2$ error $E$ is then calculated as specified:\n$$\nE=\\frac{\\left\\|\\mathbf{u}_{\\text{num}}(\\cdot,T)-\\mathbf{u}_{\\text{ana}}(\\cdot,T)\\right\\|_2}{\\left\\|\\mathbf{u}_{\\text{ana}}(\\cdot,T)\\right\\|_2}\n$$\nThe norm $\\|\\cdot\\|_2$ is the standard Euclidean norm computed over all grid nodes and all three velocity components.\n\nThis procedure is repeated for each of the test cases (A, B, C) and for both the D$3$Q$19$ and D$3$Q$15$ models. The numerical implementation leverages the `numpy` library for efficient, vectorized array operations, which is critical for performance in such simulations. Specifically, `np.einsum` is used for contractions in moment calculations, and `np.roll` is used for the streaming step.", "answer": "```python\n# The final answer must be a single, complete, standalone program.\n# It solves the problem by simulating a 3D Taylor-Green vortex flow using LBM.\n\nimport numpy as np\n# from scipy import ... # Scipy is not required for this problem.\n\ndef get_lattice_models():\n    \"\"\"Defines the D3Q19 and D3Q15 lattice models.\"\"\"\n    # D3Q19 Model\n    c19 = np.array([\n        [0, 0, 0], [1, 0, 0], [-1, 0, 0], [0, 1, 0], [0, -1, 0],\n        [0, 0, 1], [0, 0, -1], [1, 1, 0], [-1, 1, 0], [1, -1, 0],\n        [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1],\n        [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]\n    ], dtype=int)\n    w19 = np.array([\n        1/3] + [1/18]*6 + [1/36]*12\n    )\n\n    # D3Q15 Model\n    c15 = np.array([\n        [0, 0, 0], [1, 0, 0], [-1, 0, 0], [0, 1, 0], [0, -1, 0],\n        [0, 0, 1], [0, 0, -1], [1, 1, 1], [-1, 1, 1], [1, -1, 1],\n        [1, 1, -1], [-1, -1, 1], [-1, 1, -1], [1, -1, -1],\n        [-1, -1, -1]\n    ], dtype=int)\n    w15 = np.array([\n        2/9] + [1/9]*6 + [1/72]*8\n    )\n\n    return (c19, w19), (c15, w15)\n\ndef run_lbm(N, tau, T, U0, lattice_c, lattice_w):\n    \"\"\"\n    Runs a 3D LBM simulation for the Taylor-Green vortex.\n    \n    Args:\n        N (int): Number of nodes in each direction.\n        tau (float): Relaxation time.\n        T (int): Total number of time steps.\n        U0 (float): Initial velocity amplitude.\n        lattice_c (np.ndarray): Discrete velocities, shape (Q, 3).\n        lattice_w (np.ndarray): Weights, shape (Q,).\n        \n    Returns:\n        float: The relative l2 error of the velocity field at time T.\n    \"\"\"\n    Q = lattice_c.shape[0]\n    cs_sq = 1/3.0\n    \n    # 1. Initialization\n    x, y, z = np.mgrid[0:N, 0:N, 0:N]\n    twopi_N = 2 * np.pi / N\n    \n    u0 = np.zeros((3, N, N, N))\n    u0[0] = U0 * np.sin(twopi_N * x) * np.cos(twopi_N * y) * np.cos(twopi_N * z)\n    u0[1] = -U0 * np.cos(twopi_N * x) * np.sin(twopi_N * y) * np.cos(twopi_N * z)\n    \n    rho0 = np.ones((N, N, N))\n    \n    # Initialize f at equilibrium f_eq(rho0, u0)\n    u_dot_c_0 = np.einsum('ia,axyz->ixyz', lattice_c, u0)\n    u0_sq = np.einsum('axyz,axyz->xyz', u0, u0)\n    \n    term1_0 = u_dot_c_0 / cs_sq\n    term2_0 = 0.5 * (u_dot_c_0**2) / (cs_sq**2)\n    term3_0 = -0.5 * u0_sq / cs_sq\n\n    f = (lattice_w[:, None, None, None] * rho0[None, :, :, :] *\n         (1 + term1_0 + term2_0 + term3_0[None, :, :, :]))\n    \n    inv_tau = 1.0 / tau\n\n    # 2. Main Loop\n    for _ in range(T):\n        # Macroscopic quantities\n        rho = np.sum(f, axis=0)\n        u = np.einsum('ia,ixyz->axyz', lattice_c, f) / rho\n        \n        # Collision step\n        u_dot_c = np.einsum('ia,axyz->ixyz', lattice_c, u)\n        u_sq = np.einsum('axyz,axyz->xyz', u, u)\n        \n        term1 = u_dot_c / cs_sq\n        term2 = 0.5 * (u_dot_c**2) / (cs_sq**2)\n        term3 = -0.5 * u_sq / cs_sq\n        \n        f_eq = (lattice_w[:, None, None, None] * rho[None, :, :, :] *\n                (1 + term1 + term2 + term3[None, :, :, :]))\n        \n        f -= inv_tau * (f - f_eq)\n        \n        # Streaming step\n        for i in range(Q):\n            f[i] = np.roll(f[i], shift=lattice_c[i], axis=(0, 1, 2))\n\n    # 3. Post-processing\n    rho_final = np.sum(f, axis=0)\n    u_num = np.einsum('ia,ixyz->axyz', lattice_c, f) / rho_final\n\n    # Analytical velocity at T\n    nu = cs_sq * (tau - 0.5)\n    k_sq = 3 * (twopi_N**2)\n    decay = np.exp(-nu * k_sq * T)\n    u_ana = u0 * decay\n    \n    # Error calculation\n    diff_sq_sum = np.sum((u_num - u_ana)**2)\n    ana_sq_sum = np.sum(u_ana**2)\n    \n    error = np.sqrt(diff_sq_sum / ana_sq_sum)\n    \n    return error\n\ndef solve():\n    \"\"\"\n    Main function to run test cases and print results.\n    \"\"\"\n    d3q19_model, d3q15_model = get_lattice_models()\n    c19, w19 = d3q19_model\n    c15, w15 = d3q15_model\n\n    test_cases = [\n        # Case A (general)\n        (16, 0.8, 60, 0.05),\n        # Case B (lower viscosity)\n        (16, 0.6, 60, 0.05),\n        # Case C (coarser grid, shorter time)\n        (8, 0.8, 20, 0.05),\n    ]\n\n    results = []\n    for N, tau, T, U0 in test_cases:\n        E19 = run_lbm(N, tau, T, U0, c19, w19)\n        E15 = run_lbm(N, tau, T, U0, c15, w15)\n        B = E19 < E15\n        \n        results.append(f\"{E19:.6f}\")\n        results.append(f\"{E15:.6f}\")\n        results.append(str(B))\n\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2407073"}, {"introduction": "A simulation's accuracy is often determined by its treatment of boundaries, where the fluid interacts with its surroundings. This problem focuses on the crucial link between mesoscopic boundary rules and their macroscopic consequences in thermal flows. You will analyze a modified bounce-back scheme and derive the resulting macroscopic temperature jump condition, learning how to engineer and interpret LBM boundary conditions to model sophisticated physical phenomena at interfaces. [@problem_id:458581]", "problem": "The Lattice Boltzmann Method (LBM) is a powerful numerical technique for simulating fluid dynamics that operates on a mesoscopic level by tracking the evolution of particle distribution functions, $f_i(\\vec{x}, t)$, on a discrete lattice. For thermal flows, a second distribution function, $g_i(\\vec{x}, t)$, is often introduced to represent the thermal energy field.\n\nConsider a thermal LBM simulation for heat conduction in a stationary medium governed by the BGK (Bhatnagar-Gross-Krook) collision model. The evolution of the thermal distribution function $g_i(\\vec{x}, t)$ for discrete direction $i$ is given by:\n$$\ng_i(\\vec{x} + \\vec{c}_i \\delta t, t + \\delta t) - g_i(\\vec{x}, t) = -\\frac{\\delta t}{\\tau_g} \\left( g_i(\\vec{x}, t) - g_i^{\\text{eq}}(\\vec{x}, t) \\right)\n$$\nwhere $\\vec{c}_i$ are the discrete lattice velocities, $\\delta t$ is the time step (hereafter set to 1), and $\\tau_g$ is the relaxation time for the thermal field.\n\nThe macroscopic temperature $T$ is defined as the zeroth moment of the distribution functions:\n$$\nT(\\vec{x}, t) = \\sum_i g_i(\\vec{x}, t)\n$$\nThe corresponding equilibrium distribution function $g_i^{\\text{eq}}$ for a fluid at rest ($\\vec{u}=0$) is:\n$$\ng_i^{\\text{eq}} = w_i T\n$$\nwhere $w_i$ are weight factors associated with each direction $i$. The simulation is performed on a two-dimensional, nine-velocity (D2Q9) lattice. The lattice velocities are $\\vec{c}_0=(0,0)$, $\\vec{c}_{1-4}=(\\pm 1, 0), (0, \\pm 1)$, and $\\vec{c}_{5-8}=(\\pm 1, \\pm 1)$. The corresponding weights are $w_0=4/9$, $w_{1-4}=1/9$, and $w_{5-8}=1/36$.\n\nA solid, stationary boundary is located at $y=0$. To model thermal effects at this wall, a specific boundary condition is applied. We define the non-equilibrium part of the distribution function with respect to a prescribed wall temperature $T_w$ as $g'_i = g_i - w_i T_w$. The boundary condition is a modified bounce-back scheme on this non-equilibrium part. For populations $i$ that are leaving the wall and entering the fluid domain (i.e., for which the y-component of the velocity $c_{iy} > 0$), the scheme is given by:\n$$\ng'_i(\\vec{x}_w) = A \\, g'_{\\bar{i}}(\\vec{x}_w)\n$$\nwhere $\\vec{x}_w$ is a lattice node on the wall, $A$ is a constant parameter, and $\\bar{i}$ denotes the direction opposite to $i$ (i.e., $\\vec{c}_{\\bar{i}} = -\\vec{c}_i$). Incoming populations $g'_{\\bar{i}}$ are determined by the fluid state adjacent to the wall.\n\nThis mesoscopic boundary rule is known to produce a macroscopic temperature jump (or thermal slip) at the wall, which is described by a Robin-type boundary condition:\n$$\nT(\\vec{x}_w) - T_w = \\lambda_T \\frac{\\partial T}{\\partial y}\\bigg|_{\\vec{x}_w}\n$$\nHere, $T(\\vec{x}_w)$ is the effective fluid temperature at the wall, and $\\lambda_T$ is the temperature jump length.\n\nUsing a first-order Chapman-Enskog expansion for the incoming non-equilibrium distributions, derive an expression for the temperature jump length $\\lambda_T$ in terms of the boundary parameter $A$ and the thermal relaxation time $\\tau_g$.", "solution": "The goal is to derive the macroscopic temperature jump length $\\lambda_T$ from the given mesoscopic boundary condition. This involves expressing the populations at the wall in terms of macroscopic quantities and then applying the boundary rule.\n\n**Step 1: Express populations in terms of macroscopic variables**\n\nWe are interested in the distribution $g'_i = g_i - w_i T_w$ at a wall node $\\vec{x}_w$. We can rewrite this by adding and subtracting the local equilibrium $g_i^{\\text{eq}} = w_i T(\\vec{x}_w)$:\n$$\ng'_i(\\vec{x}_w) = \\left( g_i(\\vec{x}_w) - g_i^{\\text{eq}}(\\vec{x}_w) \\right) + \\left( g_i^{\\text{eq}}(\\vec{x}_w) - w_i T_w \\right)\n$$\nThe first term is the non-equilibrium part of the distribution, $g_i^{\\text{neq}}$. The second term is $w_i T(\\vec{x}_w) - w_i T_w = w_i(T(\\vec{x}_w) - T_w) = w_i \\Delta T$, where $\\Delta T$ is the temperature jump.\nSo, we have:\n$$\ng'_i(\\vec{x}_w) = g_i^{\\text{neq}}(\\vec{x}_w) + w_i \\Delta T\n$$\nThe first-order Chapman-Enskog expansion gives the non-equilibrium part for a stationary medium as:\n$$\ng_i^{\\text{neq}} \\approx -\\tau_g (\\vec{c}_i \\cdot \\nabla g_i^{\\text{eq}}) = -\\tau_g (\\vec{c}_i \\cdot \\nabla (w_i T)) = -\\tau_g w_i (\\vec{c}_i \\cdot \\nabla T)\n$$\nAt the wall located at $y=0$, we assume the temperature gradient is predominantly in the y-direction, so $\\nabla T \\approx (0, \\partial_y T)$. This simplifies to:\n$$\ng_i^{\\text{neq}}(\\vec{x}_w) \\approx -\\tau_g w_i c_{iy} \\frac{\\partial T}{\\partial y}\\bigg|_{\\vec{x}_w}\n$$\nSubstituting this back into the expression for $g'_i$:\n$$\ng'_i(\\vec{x}_w) = -\\tau_g w_i c_{iy} \\frac{\\partial T}{\\partial y}\\bigg|_{\\vec{x}_w} + w_i \\Delta T\n$$\n\n**Step 2: Apply the boundary condition**\n\nThe boundary rule is given for outgoing populations ($c_{iy} > 0$) as $g'_i = A \\, g'_{\\bar{i}}$. The corresponding incoming population $g'_{\\bar{i}}$ (where $\\vec{c}_{\\bar{i}} = -\\vec{c}_i$, so $c_{\\bar{i}y} = -c_{iy}$) is given by the same formula:\n$$\ng'_{\\bar{i}}(\\vec{x}_w) = -\\tau_g w_{\\bar{i}} c_{\\bar{i}y} \\frac{\\partial T}{\\partial y}\\bigg|_{\\vec{x}_w} + w_{\\bar{i}} \\Delta T = \\tau_g w_i c_{iy} \\frac{\\partial T}{\\partial y}\\bigg|_{\\vec{x}_w} + w_i \\Delta T\n$$\nHere we used $w_{\\bar{i}} = w_i$. Now we substitute these into the boundary rule:\n$$\n\\left(-\\tau_g w_i c_{iy} \\frac{\\partial T}{\\partial y} + w_i \\Delta T\\right) = A \\left(\\tau_g w_i c_{iy} \\frac{\\partial T}{\\partial y} + w_i \\Delta T\\right)\n$$\n\n**Step 3: Solve for the temperature jump**\n\nWe can cancel $w_i$ from both sides (since $w_i > 0$) and rearrange the equation to solve for $\\Delta T$:\n$$\n-\\tau_g c_{iy} \\frac{\\partial T}{\\partial y} + \\Delta T = A \\tau_g c_{iy} \\frac{\\partial T}{\\partial y} + A \\Delta T\n$$\n$$\n\\Delta T (1 - A) = \\tau_g c_{iy} \\frac{\\partial T}{\\partial y} (1 + A)\n$$\n$$\n\\Delta T = \\frac{1+A}{1-A} \\, \\tau_g c_{iy} \\frac{\\partial T}{\\partial y}\n$$\nFor the D2Q9 lattice, the outgoing populations have $c_{iy}=1$. Thus, the equation holds with $c_{iy}=1$.\n\n**Step 4: Identify the jump length**\n\nThe macroscopic boundary condition is defined as $T(\\vec{x}_w) - T_w = \\lambda_T \\frac{\\partial T}{\\partial y}$, which is $\\Delta T = \\lambda_T \\frac{\\partial T}{\\partial y}$.\nBy comparing this with our derived expression for $\\Delta T$, we can identify the temperature jump length $\\lambda_T$:\n$$\n\\lambda_T = \\frac{\\tau_g(1+A)}{1-A}\n$$", "answer": "$$\\boxed{\\frac{\\tau_g(1 + A)}{1 - A}}$$", "id": "458581"}]}