{"hands_on_practices": [{"introduction": "Before we can confidently simulate complex phenomena like vortex shedding, we must first ensure our code is working correctly. This foundational practice, known as code verification, involves testing our numerical implementation against a problem with a known solution. Here, we will use the classic case of inviscid potential flow past a cylinder, for which an exact analytical solution exists, allowing us to quantify the error of our simulation and confirm that it decreases at the theoretically expected rate as we refine our grid [@problem_id:2438894]. Mastering this process is the bedrock of reliable computational science.", "problem": "You are to design a convergence test and Richardson extrapolation study for a simulation of inviscid, incompressible flow past a circular cylinder using a potential-flow surrogate that isolates spatial and temporal discretization errors in a controlled, verifiable way.\n\nFundamental base:\n- For an inviscid, incompressible, irrotational flow, the velocity is the gradient of a scalar potential, $\\phi$, satisfying the Laplace equation $\\nabla^2 \\phi = 0$. The unsteady Bernoulli equation states that the pressure field satisfies $p = -\\rho\\left(\\frac{\\partial \\phi}{\\partial t} + \\frac{1}{2}\\lvert \\nabla \\phi \\rvert^2\\right) + C(t)$, where $\\rho$ is the density and $C(t)$ is a time-dependent constant.\n- The exact solution for uniform potential flow of speed $U(t)$ past a cylinder of radius $a$ centered at the origin yields the surface potential $\\phi(a,\\theta,t) = 2 a U(t) \\cos\\theta$ and the surface tangential speed $v_t(a,\\theta,t) = -2 U(t) \\sin\\theta$, where $\\theta$ is the polar angle measured from the positive $x$-axis.\n- A uniformly accelerating far-field flow requires a background pressure gradient to accelerate the fluid, which at leading order is $p_\\infty(x,t) = p_{\\mathrm{ref}} - \\rho\\left(x\\,\\frac{dU}{dt} + \\frac{1}{2} U(t)^2\\right)$, so that the undisturbed Euler equation $\\rho \\frac{dU}{dt} = -\\frac{\\partial p_\\infty}{\\partial x}$ is satisfied. The hydrodynamic force attributable to the presence of the cylinder is obtained by integrating only the disturbance pressure $p' = p - p_\\infty$ over the surface with the outward normal.\n- The exact disturbance force in the $x$-direction at time $t$ for this potential-flow problem is $F_x^{\\mathrm{true}}(t) = \\rho \\pi a^2 \\frac{dU}{dt}$.\n\nSimulation model and numerical approximation:\n- Discretize the circular cylinder boundary by a regular $M$-gon with vertices at polar angles $\\theta_j = \\frac{2\\pi j}{M}$ for $j = 0,1,\\dots,M-1$, mapped to points $(x_j,y_j) = \\left(a\\cos\\theta_j, a\\sin\\theta_j\\right)$. Each straight segment between consecutive vertices is a panel. For panel $j$, define its midpoint $\\mathbf{c}_j$, chord length $L_j$, unit tangent $\\hat{\\mathbf{t}}_j$ along the chord, and outward unit normal $\\hat{\\mathbf{n}}_j$ as the normal to the chord pointing outward (you may determine outward orientation by checking the dot product with $\\mathbf{c}_j$).\n- Use the midpoint angle $\\theta_j^{\\mathrm{mid}} = \\arctan2(c_{j,y}, c_{j,x})$ to evaluate analytic surface quantities at the geometric midpoint. Approximate the surface integral by the composite midpoint rule over panels with weight $L_j$ for each panel.\n- At each panel midpoint and time $t$, approximate the unsteady potential time derivative by a backward finite difference of order $\\mathcal{O}(\\Delta t)$:\n$$\\left.\\frac{\\partial \\phi}{\\partial t}\\right|_{j,t} \\approx \\frac{\\phi(a,\\theta_j^{\\mathrm{mid}},t) - \\phi(a,\\theta_j^{\\mathrm{mid}},t-\\Delta t)}{\\Delta t},$$\nwith $\\phi(a,\\theta,t) = 2 a U(t)\\cos\\theta$. Use $v_t(a,\\theta,t) = -2 U(t)\\sin\\theta$ to evaluate $\\lvert \\nabla \\phi \\rvert^2$ on the surface as $v_t^2$.\n- The undisturbed background pressure at the panel midpoint is\n$$p_\\infty(\\mathbf{c}_j,t) \\approx -\\rho\\left( x_j^{\\mathrm{mid}} \\frac{U(t) - U(t-\\Delta t)}{\\Delta t} + \\frac{1}{2}U(t)^2 \\right),$$\nwhere $x_j^{\\mathrm{mid}}$ is the $x$-coordinate of $\\mathbf{c}_j$. The total pressure approximation is\n$$p_j(t) \\approx -\\rho\\left( \\frac{\\phi(a,\\theta_j^{\\mathrm{mid}},t) - \\phi(a,\\theta_j^{\\mathrm{mid}},t-\\Delta t)}{\\Delta t} + \\frac{1}{2} v_t(a,\\theta_j^{\\mathrm{mid}},t)^2 \\right),$$\nand the disturbance pressure is $p'_j(t) = p_j(t) - p_\\infty(\\mathbf{c}_j,t)$. The approximate force is then\n$$F_x^{\\mathrm{num}}(M,\\Delta t; t) \\approx -\\sum_{j=0}^{M-1} p'_j(t)\\, \\hat{n}_{j,x}\\, L_j.$$\n\nConvergence study and Richardson extrapolation:\n- For a sequence of three discretizations with refinement ratio $r$ (that is, $h_1/h_2 = h_2/h_3 = r$ for an appropriate resolution measure $h$), if the leading truncation error behaves like $C h^p$, then the observed order $p$ can be estimated by the generalized Richardson formula\n$$p \\approx \\frac{\\ln\\left|\\frac{Q_{h_1} - Q_{h_2}}{Q_{h_2} - Q_{h_3}}\\right|}{\\ln r},$$\nwhere $Q_{h_k}$ are the numerical approximations at resolutions $h_k$. The extrapolated estimate to $h \\to 0$ is\n$$Q_{\\mathrm{ext}} \\approx Q_{h_3} + \\frac{Q_{h_3} - Q_{h_2}}{r^p - 1}.$$\n\nPhysical parameters and units:\n- Use $\\rho = 1\\,\\mathrm{kg/m^3}$, $a = 0.5\\,\\mathrm{m}$, and a time-dependent freestream speed $U(t) = U_0 + U_1 \\sin(\\omega t)$ with $U_0 = 1\\,\\mathrm{m/s}$, $U_1 = 0.2\\,\\mathrm{m/s}$, and $\\omega = 2\\pi\\,\\mathrm{rad/s}$. Evaluate all forces at $t^\\star = 0.30\\,\\mathrm{s}$. Express forces in $\\mathrm{N}$.\n- The exact disturbance force at $t^\\star$ is $F_x^{\\mathrm{true}}(t^\\star) = \\rho \\pi a^2 \\frac{dU}{dt}\\big\\rvert_{t^\\star}$, with $\\frac{dU}{dt} = U_1 \\omega \\cos(\\omega t)$.\n\nTasks:\n- Implement the above discretization to compute $F_x^{\\mathrm{num}}(M,\\Delta t; t^\\star)$ for given $M$ and $\\Delta t$.\n- For each of the following three convergence studies, compute the triple-grid observed order $p$ using the Richardson estimator. Use the ratio $r = 2$ for all triplets.\n  1. Spatial refinement at effectively fixed time discretization error: $\\Delta t = 10^{-6}\\,\\mathrm{s}$ and $M \\in \\{24,48,96\\}$.\n  2. Temporal refinement at effectively negligible spatial error: $M = 4096$ and $\\Delta t \\in \\{5\\times 10^{-3}\\,\\mathrm{s}, 2.5\\times 10^{-3}\\,\\mathrm{s}, 1.25\\times 10^{-3}\\,\\mathrm{s}\\}$.\n  3. Coupled refinement designed so that spatial and temporal leading errors have the same order: choose $M \\in \\{32,64,128\\}$ and $\\Delta t = c/M^2$ with $c = 2.0\\times 10^{-2}\\,\\mathrm{s}$ (that is, $\\Delta t$ in $\\mathrm{s}$ when $M$ is unitless). Use these paired $(M,\\Delta t)$ values for the three levels.\n\nRequirements:\n- Your program must implement the above and compute, for each study, the observed order $p$ using the Richardson estimator from the three $F_x^{\\mathrm{num}}$ values at $t^\\star$.\n- Use the International System of Units throughout and express the final results as dimensionless observed orders.\n- Test suite: The three studies specified above constitute the test suite. They cover a happy-path spatial case, a temporal case, and a coupled-refinement case where error contributions match in order.\n- Final output format: Your program should produce a single line of output containing the three observed orders as a comma-separated list enclosed in square brackets, rounded to three decimal places, in the order [spatial_p, temporal_p, coupled_p]. For example, a valid output format is “[2.000,1.000,2.000]”.", "solution": "The problem is submitted for analysis. It concerns a convergence study for a numerical approximation of the hydrodynamic force on a circular cylinder in an unsteady potential flow. Before any attempt at a solution, the problem statement must be rigorously validated against fundamental principles of science and logic.\n\n**Step 1: Extraction of Givens**\n\nThe following givens are extracted verbatim from the problem statement:\n- **Governing Equations**: Velocity potential $\\phi$ satisfies Laplace equation $\\nabla^2 \\phi = 0$. Unsteady Bernoulli equation: $p = -\\rho\\left(\\frac{\\partial \\phi}{\\partial t} + \\frac{1}{2}\\lvert \\nabla \\phi \\rvert^2\\right) + C(t)$.\n- **Exact Analytic Solution**: For a cylinder of radius $a$ in a uniform flow $U(t)$, the surface potential is $\\phi(a,\\theta,t) = 2 a U(t) \\cos\\theta$ and the surface tangential speed is $v_t(a,\\theta,t) = -2 U(t) \\sin\\theta$.\n- **Background and Disturbance Fields**: The background pressure is $p_\\infty(x,t) = p_{\\mathrm{ref}} - \\rho\\left(x\\,\\frac{dU}{dt} + \\frac{1}{2} U(t)^2\\right)$. The disturbance pressure is $p' = p - p_\\infty$. The exact disturbance force is $F_x^{\\mathrm{true}}(t) = \\rho \\pi a^2 \\frac{dU}{dt}$.\n- **Numerical Discretization**:\n    - Cylinder boundary is a regular $M$-gon with vertices $(x_j,y_j) = \\left(a\\cos\\theta_j, a\\sin\\theta_j\\right)$ for $\\theta_j = 2\\pi j/M$, $j = 0, \\dots, M-1$.\n    - Panel $j$ properties: midpoint $\\mathbf{c}_j$, length $L_j$, outward normal $\\hat{\\mathbf{n}}_j$.\n    - Surface quantities evaluated using the midpoint angle $\\theta_j^{\\mathrm{mid}} = \\arctan2(c_{j,y}, c_{j,x})$.\n    - Integration by composite midpoint rule with weights $L_j$.\n- **Numerical Approximations**:\n    - Time derivative: backward finite difference, $\\left.\\frac{\\partial \\phi}{\\partial t}\\right|_{j,t} \\approx \\frac{\\phi(a,\\theta_j^{\\mathrm{mid}},t) - \\phi(a,\\theta_j^{\\mathrm{mid}},t-\\Delta t)}{\\Delta t}$, where $\\phi(a,\\theta,t) = 2 a U(t)\\cos\\theta$.\n    - Surface kinetic energy: $\\lvert \\nabla \\phi \\rvert^2 = v_t^2$ with $v_t(a,\\theta,t) = -2 U(t)\\sin\\theta$.\n    - Background pressure: $p_\\infty(\\mathbf{c}_j,t) \\approx -\\rho\\left( x_j^{\\mathrm{mid}} \\frac{U(t) - U(t-\\Delta t)}{\\Delta t} + \\frac{1}{2}U(t)^2 \\right)$.\n    - Total pressure: $p_j(t) \\approx -\\rho\\left( \\frac{\\phi(a,\\theta_j^{\\mathrm{mid}},t) - \\phi(a,\\theta_j^{\\mathrm{mid}},t-\\Delta t)}{\\Delta t} + \\frac{1}{2} v_t(a,\\theta_j^{\\mathrm{mid}},t)^2 \\right)$.\n    - Disturbance pressure: $p'_j(t) = p_j(t) - p_\\infty(\\mathbf{c}_j,t)$.\n    - Numerical force: $F_x^{\\mathrm{num}}(M,\\Delta t; t) \\approx -\\sum_{j=0}^{M-1} p'_j(t)\\, \\hat{n}_{j,x}\\, L_j$.\n- **Convergence Analysis**:\n    - Refinement ratio $r$.\n    - Observed order: $p \\approx \\frac{\\ln\\left|\\frac{Q_{h_1} - Q_{h_2}}{Q_{h_2} - Q_{h_3}}\\right|}{\\ln r}$.\n- **Physical Parameters**: $\\rho = 1\\,\\mathrm{kg/m^3}$, $a = 0.5\\,\\mathrm{m}$, $U(t) = U_0 + U_1 \\sin(\\omega t)$ with $U_0 = 1\\,\\mathrm{m/s}$, $U_1 = 0.2\\,\\mathrm{m/s}$, $\\omega = 2\\pi\\,\\mathrm{rad/s}$. Evaluation time $t^\\star = 0.30\\,\\mathrm{s}$.\n- **Tasks**: Compute the observed order $p$ for three convergence studies with $r=2$:\n    1. Spatial: $\\Delta t = 10^{-6}\\,\\mathrm{s}$, $M \\in \\{24, 48, 96\\}$.\n    2. Temporal: $M = 4096$, $\\Delta t \\in \\{5\\times 10^{-3}, 2.5\\times 10^{-3}, 1.25\\times 10^{-3}\\}\\,\\mathrm{s}$.\n    3. Coupled: $M \\in \\{32, 64, 128\\}$ with $\\Delta t = c/M^2$ and $c = 2.0\\times 10^{-2}\\,\\mathrm{s}$.\n\n**Step 2: Validation of Problem Statement**\n\nThe problem is evaluated for soundness.\n- **Scientific Grounding**: The problem is based on the classical theory of potential flow, a valid and fundamental model in fluid dynamics for inviscid, incompressible, and irrotational conditions. The equations for potential, pressure, and force are canonical. The numerical approximations (panel method geometry, finite differences, midpoint rule) are standard techniques in computational physics. The problem is scientifically sound.\n- **Well-Posedness and Consistency**: The problem provides a complete set of equations, parameters, and numerical procedures. The objective is clearly defined: to compute the observed order of convergence for three distinct refinement studies. The definitions are unambiguous; for instance, the method for determining the outward normal vector is specified. A minor ambiguity in the units of constant $c$ is immediately clarified. The problem is self-contained, consistent, and well-posed.\n- **Objectivity**: The problem is stated in precise, objective, and technical language. It is free from subjective claims or opinions.\n\n**Step 3: Verdict and Action**\n\nThe problem statement is **valid**. It represents a well-formulated exercise in numerical analysis applied to a physical system. The solution will now be developed based on first principles as outlined in the problem.\n\n---\n\n**Solution Development**\n\nThe solution requires the implementation of a function to compute the numerical force $F_x^{\\mathrm{num}}(M, \\Delta t; t^\\star)$ and a supporting function to calculate the observed order of convergence using Richardson's method.\n\n**1. Geometric Discretization**\nThe cylinder surface is discretized into $M$ straight panels. For a regular $M$-gon inscribed in a circle of radius $a$:\n- The vertices are $\\mathbf{v}_j = (a \\cos(2\\pi j / M), a \\sin(2\\pi j / M))$ for $j = 0, \\dots, M-1$.\n- The $j$-th panel connects $\\mathbf{v}_j$ and $\\mathbf{v}_{j+1}$ (with index $(j+1)$ taken modulo $M$).\n- The panel midpoint is $\\mathbf{c}_j = (\\mathbf{v}_j + \\mathbf{v}_{j+1}) / 2$. Its coordinates are:\n  $$x_j^{\\mathrm{mid}} = a \\cos(\\pi/M)\\cos(2\\pi j/M + \\pi/M)$$\n  $$y_j^{\\mathrm{mid}} = a \\cos(\\pi/M)\\sin(2\\pi j/M + \\pi/M)$$\n- The angle of the midpoint vector is $\\theta_j^{\\mathrm{mid}} = \\arctan2(y_j^{\\mathrm{mid}}, x_j^{\\mathrm{mid}}) = (2\\pi j + \\pi)/M$.\n- The length of each panel is constant: $L_j = L = \\lvert \\mathbf{v}_{j+1} - \\mathbf{v}_j \\rvert = 2a \\sin(\\pi/M)$.\n- The outward unit normal to the panel, $\\hat{\\mathbf{n}}_j$, is perpendicular to the panel's chord. For this geometry, it aligns with the radius of the circle passing through the midpoint of the arc subtended by the panel. Thus, $\\hat{\\mathbf{n}}_j = (\\cos\\theta_j^{\\mathrm{mid}}, \\sin\\theta_j^{\\mathrm{mid}})$, and its x-component is $\\hat{n}_{j,x} = \\cos\\theta_j^{\\mathrm{mid}}$.\n\n**2. Pressure and Force Calculation**\nThe numerical force is a sum over all panels: $F_x^{\\mathrm{num}} = -\\sum_{j=0}^{M-1} p'_j(t^\\star)\\, \\hat{n}_{j,x}\\, L$.\nThe disturbance pressure $p'_j(t^\\star)$ is the difference between the total pressure at the collocation point and the background pressure there: $p'_j = p_j - p_{\\infty,j}$.\n\nLet $t = t^\\star$ and $t_p = t - \\Delta t$. The numerical approximation for the time derivative of the freestream velocity is $\\frac{\\Delta U}{\\Delta t} = \\frac{U(t) - U(t_p)}{\\Delta t}$. The expressions for pressure are:\n- Total pressure: $p_j(t) = -\\rho\\left( \\frac{\\phi(t) - \\phi(t_p)}{\\Delta t} + \\frac{1}{2} v_t(t)^2 \\right)$. Using $\\phi(a,\\theta,t) = 2aU(t)\\cos\\theta$:\n   $$p_j(t) = -\\rho\\left( 2a\\cos\\theta_j^{\\mathrm{mid}} \\frac{\\Delta U}{\\Delta t} + \\frac{1}{2} \\left(-2U(t)\\sin\\theta_j^{\\mathrm{mid}}\\right)^2 \\right)$$\n- Background pressure: $p_{\\infty,j}(t) = -\\rho\\left( x_j^{\\mathrm{mid}} \\frac{\\Delta U}{\\Delta t} + \\frac{1}{2}U(t)^2 \\right)$.\n\nCombining these gives the disturbance pressure on panel $j$:\n$$p'_j(t) = p_j(t) - p_{\\infty,j}(t) = \\rho\\left[ \\left(x_j^{\\mathrm{mid}} - 2a\\cos\\theta_j^{\\mathrm{mid}}\\right)\\frac{\\Delta U}{\\Delta t} + \\frac{1}{2}U(t)^2 - 2U(t)^2\\sin^2\\theta_j^{\\mathrm{mid}} \\right]$$\n\nThe total force is then computed by summing the contributions from each panel:\n$$F_x^{\\mathrm{num}}(M,\\Delta t; t) = -L \\sum_{j=0}^{M-1} p'_j(t) \\cos(\\theta_j^{\\mathrm{mid}})$$\n\n**3. Convergence Analysis**\nThe theoretical error sources are spatial discretization, with leading error term $\\mathcal{O}(M^{-2})$, and temporal discretization, with leading error term $\\mathcal{O}(\\Delta t)$.\n- **Study 1 (Spatial)**: With $\\Delta t = 10^{-6}\\,\\mathrm{s}$, the temporal error is negligible. The convergence should be dominated by the spatial error, so we expect $p \\approx 2$. The refinement parameter is $h \\sim 1/M$.\n- **Study 2 (Temporal)**: With $M = 4096$, the spatial error is negligible. The convergence should be dominated by the temporal error from the backward difference, so we expect $p \\approx 1$. The refinement parameter is $h \\sim \\Delta t$.\n- **Study 3 (Coupled)**: With $\\Delta t = c/M^2$, the total error is $E \\approx C_s M^{-2} + C_t \\Delta t = C_s M^{-2} + C_t c M^{-2} = (C_s+C_t c)M^{-2}$. The error scales as $M^{-2}$, so we expect $p \\approx 2$.\n\nThe observed order of convergence, $p$, is computed from three numerical results $Q_1, Q_2, Q_3$ obtained with resolutions $h_1, h_2, h_3$ such that $h_1/h_2 = h_2/h_3 = r$. The formula is:\n$$p = \\frac{\\ln\\left|\\frac{Q_1 - Q_2}{Q_2 - Q_3}\\right|}{\\ln r}$$\nFor all studies, the refinement ratio is $r=2$. The quantities $Q_k$ are the computed forces $F_x^{\\mathrm{num}}$ for each discretization level.\n\nThe implementation will follow this logic. A primary function will compute the force for given $(M, \\Delta t)$. This function will be called for each discretization level in the three studies. The resulting force values will then be used to calculate the observed convergence orders.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the convergence studies and print the results.\n    \"\"\"\n    # Physical parameters\n    rho = 1.0  # kg/m^3\n    a = 0.5   # m\n    U0 = 1.0  # m/s\n    U1 = 0.2  # m/s\n    omega = 2.0 * np.pi  # rad/s\n    t_star = 0.30  # s\n\n    # Freestream velocity function\n    def U(t):\n        return U0 + U1 * np.sin(omega * t)\n\n    def compute_force(M, dt):\n        \"\"\"\n        Computes the numerical force F_x^num for given M and dt at t_star.\n        \"\"\"\n        t = t_star\n        t_prev = t - dt\n\n        U_t = U(t)\n        U_t_prev = U(t_prev)\n        dUdt_num = (U_t - U_t_prev) / dt\n\n        # --- Geometric Discretization (Vectorized) ---\n        j = np.arange(M)\n        \n        # Midpoint angles of the panels\n        theta_mid = (2 * np.pi * j + np.pi) / M\n        \n        # Panel length (constant for all panels)\n        L = 2 * a * np.sin(np.pi / M)\n        \n        # x-component of panel midpoint coordinates\n        x_mid = a * np.cos(np.pi / M) * np.cos(theta_mid)\n        \n        # x-component of outward unit normal vectors\n        n_x = np.cos(theta_mid)\n\n        # --- Pressure and Force Calculation (Vectorized) ---\n        \n        # Disturbance pressure term from acceleration potential\n        # (x_j^mid - 2*a*cos(theta_j^mid)) * (dU/dt)\n        term1 = (x_mid - 2 * a * np.cos(theta_mid)) * dUdt_num\n        \n        # Disturbance pressure term from velocity squared\n        # 1/2*U(t)^2 - 2*U(t)^2*sin^2(theta_j^mid)\n        term2 = 0.5 * U_t**2 - 2 * U_t**2 * np.sin(theta_mid)**2\n        \n        # Disturbance pressure on each panel\n        p_prime = rho * (term1 + term2)\n        \n        # Numerical force by summing contributions (composite midpoint rule)\n        # F_x = - sum( p'_j * n_{j,x} * L_j )\n        force = -np.sum(p_prime * n_x) * L\n        \n        return force\n\n    def richardson_p(Q1, Q2, Q3, r):\n        \"\"\"\n        Calculates the observed order of convergence p.\n        Q1, Q2, Q3 are results from coarse, medium, fine resolutions.\n        \"\"\"\n        # To avoid division by zero or log of non-positive if convergence is perfect\n        # or non-monotonic.\n        diff_ratio_arg = (Q1 - Q2) / (Q2 - Q3)\n        if diff_ratio_arg = 0:\n            return np.nan # Indicates non-standard convergence\n            \n        return np.log(diff_ratio_arg) / np.log(r)\n\n    results = []\n    \n    # --- Study 1: Spatial Refinement ---\n    dt_spatial = 1e-6\n    M_spatial = [24, 48, 96]\n    r_spatial = 2.0\n    \n    forces_spatial = [compute_force(M, dt_spatial) for M in M_spatial]\n    p_spatial = richardson_p(forces_spatial[0], forces_spatial[1], forces_spatial[2], r_spatial)\n    results.append(p_spatial)\n\n    # --- Study 2: Temporal Refinement ---\n    M_temporal = 4096\n    dt_temporal = [5.0e-3, 2.5e-3, 1.25e-3]\n    r_temporal = 2.0\n\n    forces_temporal = [compute_force(M_temporal, dt) for dt in dt_temporal]\n    p_temporal = richardson_p(forces_temporal[0], forces_temporal[1], forces_temporal[2], r_temporal)\n    results.append(p_temporal)\n\n    # --- Study 3: Coupled Refinement ---\n    c_coupled = 2.0e-2\n    M_coupled = [32, 64, 128]\n    dt_coupled = [c_coupled / (M**2) for M in M_coupled]\n    r_coupled = 2.0\n\n    forces_coupled = [compute_force(M, dt) for M, dt in zip(M_coupled, dt_coupled)]\n    p_coupled = richardson_p(forces_coupled[0], forces_coupled[1], forces_coupled[2], r_coupled)\n    results.append(p_coupled)\n\n    # Format the final output string\n    formatted_results = [f\"{res:.3f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\n\nsolve()\n```", "id": "2438894"}, {"introduction": "Computational simulations are performed on finite domains, which requires us to define artificial boundaries that are not present in the physical world. A poorly chosen boundary condition can act like a mirror, reflecting outgoing waves back into the domain and contaminating the solution. This exercise uses a simplified one-dimensional model of a cylinder's wake to explore how different outlet boundary conditions—a simple pressure outlet versus a more sophisticated convective condition—can profoundly influence the solution even far upstream from the boundary itself [@problem_id:2438935].", "problem": "You will investigate how different outlet boundary conditions influence the upstream solution for a simplified model of two-dimensional incompressible laminar flow past a cylinder by studying the convection and diffusion of a scalar that represents the centerline wake signal (for example, a time-varying vorticity intensity). The model is one-dimensional in the streamwise coordinate and non-dimensionalized. The scalar field is denoted by $u(x,t)$, with spatial coordinate $x \\in [0,L]$ and time $t \\ge 0$. The scalar obeys the advection-diffusion equation with a localized oscillatory source that mimics periodic vortex shedding from a cylinder located at $x=x_c$:\n$$\n\\frac{\\partial u}{\\partial t} + U \\frac{\\partial u}{\\partial x} \\;=\\; \\nu \\frac{\\partial^2 u}{\\partial x^2} \\;+\\; s(x,t),\n$$\nwhere $U \\gt 0$ is the imposed mean streamwise advection speed, $\\nu \\ge 0$ is the kinematic diffusivity (dimensionless), and $s(x,t)$ is a compact forcing representing the cylinder wake shedding. The inlet boundary at $x=0$ prescribes \n$$\nu(0,t) \\;=\\; 0,\n$$\nwhich corresponds to no incoming wake signal. Two different outlet boundary conditions at $x=L$ must be compared:\n\n- Pressure outlet analog (Dirichlet): \n$$\nu(L,t) \\;=\\; 0.\n$$\n\n- Convective outlet (non-reflecting approximation for outgoing disturbances): \n$$\n\\frac{\\partial u}{\\partial t}(L,t) \\;+\\; U_c \\frac{\\partial u}{\\partial x}(L,t) \\;=\\; 0,\n$$\nwith a specified convective speed $U_c \\gt 0$.\n\nThe initial condition is\n$$\nu(x,0) \\;=\\; 0.\n$$\n\nThe wake shedding is modeled as a space-time separable source centered at $x=x_c$:\n$$\ns(x,t) \\;=\\; A \\,\\sin(2\\pi\\,\\mathrm{St}\\, t)\\,\\exp\\!\\left(-\\frac{(x-x_c)^2}{2\\sigma^2}\\right),\n$$\nwhere $A \\gt 0$ is the amplitude, $\\mathrm{St} \\gt 0$ is the Strouhal number controlling the shedding frequency, and $\\sigma \\gt 0$ is the spatial width of the source.\n\nStarting from conservation of a scalar with advection and diffusion, and the above boundary conditions, you must design and implement a stable, explicit numerical method to evolve $u(x,t)$ on a uniform grid with spacing $\\Delta x$ and time step $\\Delta t$ until time $T$. Use a first-order upwind discretization for the advective term, a second-order centered discretization for the diffusive term, and an explicit forward Euler time integrator. Choose $\\Delta t$ to satisfy a stability restriction that accounts for both advection and diffusion. For the convective boundary condition, you must discretize it directly at $x=L$ in a way consistent with a one-way outgoing wave of speed $U_c$.\n\nTo quantify the influence of the outlet boundary condition on the upstream solution, define the time-space averaged upstream discrepancy between the two solutions $u_{\\mathrm{Dir}}(x,t)$ (pressure outlet analog) and $u_{\\mathrm{conv}}(x,t)$ (convective outlet) over an upstream subdomain $x \\in [0,x_u]$ and a final time window $t \\in [T-\\Delta,T]$ as\n$$\n\\mathcal{D} \\;=\\; \\left(\\frac{1}{\\Delta\\,x_u} \\int_{T-\\Delta}^{T} \\int_{0}^{x_u} \\left(u_{\\mathrm{conv}}(x,t) - u_{\\mathrm{Dir}}(x,t)\\right)^2 \\,\\mathrm{d}x\\,\\mathrm{d}t\\right)^{1/2}.\n$$\nReport $\\mathcal{D}$ for each test case below, using the same spatial grid, time step, and forcing for both outlet boundary conditions within each case. The model is non-dimensional, so no physical units are required.\n\nImplement your program to run the following test suite. For each case, use a uniform grid spacing $\\Delta x = 0.05$, and choose a stable $\\Delta t$ automatically. For the upstream averaging, use $x_u$ as specified:\n\n- Case $1$ (advection-dominated, long domain): $U=1.0$, $\\nu=0.01$, $L=10.0$, $U_c=1.0$, $T=12.0$, $x_c=3.0$, $\\sigma=0.15$, $A=1.0$, $\\mathrm{St}=0.2$, $x_u=2.0$, and time-average window size $\\Delta = 0.2\\,T$.\n\n- Case $2$ (diffusion-elevated, moderate domain): $U=0.5$, $\\nu=0.1$, $L=6.0$, $U_c=0.5$, $T=12.0$, $x_c=2.0$, $\\sigma=0.15$, $A=1.0$, $\\mathrm{St}=0.2$, $x_u=1.5$, and time-average window size $\\Delta = 0.2\\,T$.\n\n- Case $3$ (short domain, outflow near source): $U=1.0$, $\\nu=0.05$, $L=4.0$, $U_c=1.0$, $T=8.0$, $x_c=2.5$, $\\sigma=0.12$, $A=1.0$, $\\mathrm{St}=0.2$, $x_u=1.2$, and time-average window size $\\Delta = 0.2\\,T$.\n\n- Case $4$ (convective speed mismatch at outlet): $U=1.0$, $\\nu=0.02$, $L=8.0$, $U_c=0.6$, $T=10.0$, $x_c=3.0$, $\\sigma=0.15$, $A=1.0$, $\\mathrm{St}=0.2$, $x_u=2.0$, and time-average window size $\\Delta = 0.2\\,T$.\n\nYour program should produce a single line of output containing the values of $\\mathcal{D}$ for the four cases as a comma-separated list enclosed in square brackets (for example, $\\left[\\mathrm{d}_1,\\mathrm{d}_2,\\mathrm{d}_3,\\mathrm{d}_4\\right]$). The outputs must be floating-point numbers. The numerical method, boundary condition discretizations, and stability choice must be implemented by you following the above principles, and the results must be computed directly by the program for the specified cases.", "solution": "The problem requires a numerical investigation of the upstream influence of different outlet boundary conditions on a one-dimensional advection-diffusion equation, which serves as a simplified model for the centerline wake of a cylinder. A solution will be developed and implemented based on the finite difference method.\n\nThe governing partial differential equation (PDE) for the scalar field $u(x,t)$ on the domain $x \\in [0,L]$ is:\n$$\n\\frac{\\partial u}{\\partial t} + U \\frac{\\partial u}{\\partial x} = \\nu \\frac{\\partial^2 u}{\\partial x^2} + s(x,t)\n$$\nThis is a linear, second-order parabolic PDE. We will solve this equation numerically using an explicit time-stepping scheme.\n\nFirst, the spatial domain $x \\in [0,L]$ is discretized into a uniform grid with $N_x+1$ points, where $N_x = L/\\Delta x$. The grid points are denoted by $x_i = i\\Delta x$ for $i = 0, 1, \\dots, N_x$. The time domain is discretized into steps of size $\\Delta t$, with $t_n = n\\Delta t$. The numerical approximation to the solution at a grid point $(x_i, t_n)$ is denoted by $u_i^n$.\n\nThe PDE is discretized using a forward Euler scheme for the time derivative, a first-order upwind scheme for the advection term (since $U0$), and a second-order central difference for the diffusion term.\nThe temporal derivative at $(x_i, t_n)$ is approximated as:\n$$\n\\frac{\\partial u}{\\partial t} \\approx \\frac{u_i^{n+1} - u_i^n}{\\Delta t}\n$$\nThe advection term is approximated using information from the upstream direction ($x_{i-1}$):\n$$\nU \\frac{\\partial u}{\\partial x} \\approx U \\frac{u_i^n - u_{i-1}^n}{\\Delta x}\n$$\nThe diffusion term is approximated using a standard central difference stencil:\n$$\n\\nu \\frac{\\partial^2 u}{\\partial x^2} \\approx \\nu \\frac{u_{i+1}^n - 2u_i^n + u_{i-1}^n}{(\\Delta x)^2}\n$$\nSubstituting these approximations into the governing equation and isolating the term at the new time step, $u_i^{n+1}$, yields the explicit update rule for the interior grid points ($i=1, 2, \\dots, N_x-1$):\n$$\nu_i^{n+1} = u_i^n + \\Delta t \\left[ -U \\frac{u_i^n - u_{i-1}^n}{\\Delta x} + \\nu \\frac{u_{i+1}^n - 2u_i^n + u_{i-1}^n}{(\\Delta x)^2} + s(x_i, t_n) \\right]\n$$\nThis can be rewritten by defining the Courant number $C = U\\Delta t/\\Delta x$ and the diffusion number $D = \\nu\\Delta t/(\\Delta x)^2$:\n$$\nu_i^{n+1} = (1 - C - 2D)u_i^n + (C+D)u_{i-1}^n + D u_{i+1}^n + \\Delta t \\, s_i^n\n$$\nwhere $s_i^n = s(x_i, t_n)$.\n\nThe stability of this explicit scheme is conditional. A von Neumann stability analysis, or simply ensuring the coefficients of the stencil are non-negative, leads to the following constraint on the time step $\\Delta t$:\n$$\n1 - C - 2D \\ge 0 \\implies \\frac{U\\Delta t}{\\Delta x} + \\frac{2\\nu\\Delta t}{(\\Delta x)^2} \\le 1\n$$\nThis gives an upper bound for $\\Delta t$:\n$$\n\\Delta t \\le \\frac{(\\Delta x)^2}{U\\Delta x + 2\\nu}\n$$\nThe implementation of the convective outlet boundary condition introduces a further stability constraint, as will be shown. The final choice of $\\Delta t$ must satisfy all such constraints. We will select a $\\Delta t$ value that is $90\\%$ of the most stringent stability limit.\n\nThe boundary conditions are implemented as follows:\n1.  **Inlet Condition** at $x=0$ ($i=0$): The problem specifies $u(0,t)=0$. This is a Dirichlet condition, enforced directly at each time step:\n    $$\n    u_0^n = 0 \\quad \\text{for all } n\n    $$\n2.  **Outlet Condition** at $x=L$ ($i=N_x$):\n    -   **Dirichlet (Pressure Outlet Analog)**: $u(L,t)=0$. This is enforced directly:\n        $$\n        u_{N_x}^n = 0 \\quad \\text{for all } n\n        $$\n    -   **Convective (Non-reflecting)**: $\\frac{\\partial u}{\\partial t} + U_c \\frac{\\partial u}{\\partial x} = 0$. We discretize this equation at $x_L = x_{N_x}$ using a forward Euler for time and a first-order backward difference for space (consistent with an outgoing wave):\n        $$\n        \\frac{u_{N_x}^{n+1} - u_{N_x}^n}{\\Delta t} + U_c \\frac{u_{N_x}^n - u_{N_x-1}^n}{\\Delta x} = 0\n        $$\n        Solving for $u_{N_x}^{n+1}$, we obtain the update rule for the outlet point:\n        $$\n        u_{N_x}^{n+1} = u_{N_x}^n - \\frac{U_c \\Delta t}{\\Delta x}(u_{N_x}^n - u_{N_x-1}^n) = \\left(1 - \\frac{U_c \\Delta t}{\\Delta x}\\right)u_{N_x}^n + \\frac{U_c \\Delta t}{\\Delta x}u_{N_x-1}^n\n        $$\n        For this two-point scheme to be stable, the coefficients must be non-negative, which requires $\\frac{U_c \\Delta t}{\\Delta x} \\le 1$, or $\\Delta t \\le \\frac{\\Delta x}{U_c}$.\n\nThe final stability constraint on the time step is thus the minimum of the two derived conditions:\n$$\n\\Delta t \\le \\min\\left( \\frac{(\\Delta x)^2}{U\\Delta x + 2\\nu}, \\frac{\\Delta x}{U_c} \\right)\n$$\nWe choose $\\Delta t = 0.9 \\times \\min\\left( \\frac{(\\Delta x)^2}{U\\Delta x + 2\\nu}, \\frac{\\Delta x}{U_c} \\right)$.\n\nThe initial condition $u(x,0)=0$ is set by initializing the solution vector $u_i^0=0$ for all $i$.\n\nTo quantify the upstream discrepancy $\\mathcal{D}$, we must compute the root-mean-square difference between the two solutions, $u_{\\mathrm{conv}}(x,t)$ and $u_{\\mathrm{Dir}}(x,t)$, averaged over the domain $x \\in [0, x_u]$ and $t \\in [T-\\Delta, T]$. The integral is approximated by a discrete sum over the corresponding grid points and time steps:\n$$\n\\mathcal{D}^2 = \\frac{1}{\\Delta \\cdot x_u} \\int_{T-\\Delta}^{T} \\int_{0}^{x_u} (u_{\\mathrm{conv}} - u_{\\mathrm{Dir}})^2 \\,dx\\,dt \\approx \\frac{\\Delta x \\Delta t}{\\Delta \\cdot x_u} \\sum_{n=N_{\\text{start}}}^{N_{\\text{end}}} \\sum_{i=0}^{N_{xu}} (u_{\\mathrm{conv},i}^n - u_{\\mathrm{Dir},i}^n)^2\n$$\nwhere $N_{xu} = \\text{int}(x_u/\\Delta x)$, $N_{\\text{start}} = \\text{int}((T-\\Delta)/\\Delta t)$, and $N_{\\text{end}} = \\text{int}(T/\\Delta t)$.\n\nThe algorithm proceeds as follows for each test case:\n1.  Initialize parameters and grid: $L, U, \\nu, A, \\mathrm{St}, x_c, \\sigma, U_c, T, x_u, \\Delta$.\n2.  Set $\\Delta x$ and calculate the stable $\\Delta t$. Determine the number of grid points $N_x$ and time steps $N_T$.\n3.  Initialize two solution vectors, $u_{\\mathrm{Dir}}$ and $u_{\\mathrm{conv}}$, to zero.\n4.  Iterate from $n=0$ to $N_T-1$:\n    a.  Compute the source term $s(x, t_n)$ for all grid points.\n    b.  Compute the next time step solutions $u_{\\mathrm{Dir}}^{n+1}$ and $u_{\\mathrm{conv}}^{n+1}$ using the explicit update rule for interior points and the respective boundary condition implementations.\n    c.  If the current time $t_n$ is in the averaging window $[T-\\Delta, T]$, calculate the sum of squared differences $(u_{\\mathrm{conv},i}^n - u_{\\mathrm{Dir},i}^n)^2$ for $i=0, \\dots, N_{xu}$ and add it to a running total.\n5.  After the time loop, calculate the final discrepancy $\\mathcal{D}$ using the accumulated sum and the normalization factor.\n6.  The computed a value of $\\mathcal{D}$ is the result for the test case.\nThis procedure is repeated for each of the four specified cases.", "answer": "```python\nimport numpy as np\n\ndef compute_discrepancy_for_case(case_params):\n    \"\"\"\n    Solves the 1D advection-diffusion equation for two different outlet\n    boundary conditions and computes the upstream discrepancy.\n    \"\"\"\n    # Extract parameters from the dictionary\n    U = case_params['U']\n    nu = case_params['nu']\n    L = case_params['L']\n    Uc = case_params['Uc']\n    T = case_params['T']\n    xc = case_params['xc']\n    sigma = case_params['sigma']\n    A = case_params['A']\n    St = case_params['St']\n    xu = case_params['xu']\n    delta_T_factor = case_params['delta_T_factor']\n    dx = case_params['dx']\n\n    delta = delta_T_factor * T\n\n    # Grid setup\n    Nx = int(L / dx)\n    x = np.linspace(0, L, Nx + 1)\n\n    # Stability analysis to determine the time step dt\n    # First condition from interior point scheme (advection-diffusion)\n    dt_bound1 = (dx**2) / (U * dx + 2 * nu)\n    # Second condition from convective outlet boundary condition scheme\n    dt_bound2 = dx / Uc\n    \n    # Choose dt with a safety factor\n    safety_factor = 0.9\n    dt = safety_factor * min(dt_bound1, dt_bound2)\n    Nt = int(T / dt)\n\n    # Initialize solution arrays for both boundary conditions\n    u_dir = np.zeros(Nx + 1)\n    u_conv = np.zeros(Nx + 1)\n\n    # Prepare for discrepancy calculation\n    sum_sq_diff = 0.0\n    t_start_avg = T - delta\n    n_start_avg = int(t_start_avg / dt)\n    Nxu = int(xu / dx)\n\n    # Time-marching loop\n    for n in range(Nt):\n        t = n * dt\n        \n        # Source term\n        s = A * np.sin(2 * np.pi * St * t) * np.exp(-((x - xc)**2) / (2 * sigma**2))\n\n        # --- Update solution for Dirichlet BC ---\n        u_dir_new = np.zeros(Nx + 1)\n        # Interior points (vectorized)\n        adv_dir = U * (u_dir[1:Nx] - u_dir[0:Nx-1]) / dx\n        diff_dir = nu * (u_dir[2:Nx+1] - 2 * u_dir[1:Nx] + u_dir[0:Nx-1]) / (dx**2)\n        u_dir_new[1:Nx] = u_dir[1:Nx] + dt * (-adv_dir + diff_dir + s[1:Nx])\n        # BCs are u_dir(0) = 0 and u_dir(L) = 0, which are already set by initialization\n        \n        # --- Update solution for Convective BC ---\n        u_conv_new = np.zeros(Nx + 1)\n        # Interior points (vectorized)\n        adv_conv = U * (u_conv[1:Nx] - u_conv[0:Nx-1]) / dx\n        diff_conv = nu * (u_conv[2:Nx+1] - 2 * u_conv[1:Nx] + u_conv[0:Nx-1]) / (dx**2)\n        u_conv_new[1:Nx] = u_conv[1:Nx] + dt * (-adv_conv + diff_conv + s[1:Nx])\n        # Inlet BC u_conv(0) = 0 is set by initialization\n        # Convective outlet BC at x=L\n        u_conv_new[Nx] = u_conv[Nx] - (Uc * dt / dx) * (u_conv[Nx] - u_conv[Nx-1])\n\n        # Update solutions for the next time step\n        u_dir = u_dir_new\n        u_conv = u_conv_new\n\n        # Accumulate squared difference if in the averaging time window\n        if n >= n_start_avg:\n            diff_vec = u_conv[0:Nxu+1] - u_dir[0:Nxu+1]\n            sum_sq_diff += np.sum(diff_vec**2)\n\n    # Calculate final discrepancy D\n    discrepancy = np.sqrt( (dx * dt) / (delta * xu) * sum_sq_diff )\n    \n    return discrepancy\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    test_cases = [\n        # Case 1: advection-dominated, long domain\n        {'U': 1.0, 'nu': 0.01, 'L': 10.0, 'Uc': 1.0, 'T': 12.0, 'xc': 3.0, 'sigma': 0.15, 'A': 1.0, 'St': 0.2, 'xu': 2.0, 'delta_T_factor': 0.2, 'dx': 0.05},\n        # Case 2: diffusion-elevated, moderate domain\n        {'U': 0.5, 'nu': 0.1, 'L': 6.0, 'Uc': 0.5, 'T': 12.0, 'xc': 2.0, 'sigma': 0.15, 'A': 1.0, 'St': 0.2, 'xu': 1.5, 'delta_T_factor': 0.2, 'dx': 0.05},\n        # Case 3: short domain, outflow near source\n        {'U': 1.0, 'nu': 0.05, 'L': 4.0, 'Uc': 1.0, 'T': 8.0, 'xc': 2.5, 'sigma': 0.12, 'A': 1.0, 'St': 0.2, 'xu': 1.2, 'delta_T_factor': 0.2, 'dx': 0.05},\n        # Case 4: convective speed mismatch at outlet\n        {'U': 1.0, 'nu': 0.02, 'L': 8.0, 'Uc': 0.6, 'T': 10.0, 'xc': 3.0, 'sigma': 0.15, 'A': 1.0, 'St': 0.2, 'xu': 2.0, 'delta_T_factor': 0.2, 'dx': 0.05},\n    ]\n\n    results = []\n    for case in test_cases:\n        discrepancy = compute_discrepancy_for_case(case)\n        results.append(discrepancy)\n\n    # Print results in the specified format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2438935"}, {"introduction": "Simulating the full physics of interacting systems, like the wakes of two nearby cylinders, can be computationally immense. This challenge introduces a powerful technique in computational physics: reduced-order modeling. Instead of solving the full Navier-Stokes equations, we will model the complex, periodic wake behind each cylinder as a simple nonlinear oscillator. By studying how these two oscillators couple, we can efficiently explore their collective behavior and search for fascinating synchronized states, such as an anti-phase \"binary vortex street,\" without the expense of a full-scale simulation [@problem_id:2438941].", "problem": "You are asked to construct and analyze a minimal, self-consistent reduced-order model for the unsteady, incompressible flow past two side-by-side circular cylinders in a uniform free stream in order to algorithmically determine whether a configuration exists that produces a \"binary vortex street\" (anti-phase vortex shedding). The physical setting is two infinitely long cylinders of diameters $D_1$ and $D_2$, with centers separated by a transverse center-to-center distance $T$ in a uniform free-stream of speed $U$. The cylinders are aligned so that the axes are parallel and the free stream is normal to the line joining their centers. Use the following principles and modeling assumptions to derive a computable criterion and implement a numerical search over spacing.\n\nFundamental base and modeling:\n- Start from the incompressible Navier–Stokes equations and the observation that the isolated cylinder wake exhibits a supercritical Hopf bifurcation to a saturated periodic limit cycle when the Reynolds number (Re) exceeds a threshold. Represent each wake by a Stuart–Landau oscillator for its dominant complex amplitude, and then perform a weakly coupled, weakly nonlinear phase reduction for two oscillators. This yields a single Ordinary Differential Equation (ODE) for the phase difference $\\theta(t) \\equiv \\phi_2(t) - \\phi_1(t)$ of the form\n$$\n\\frac{d\\theta}{dt} \\;=\\; \\Delta \\omega \\;-\\; 2\\,K(T/D_{\\mathrm{ref}}, \\overline{\\mathrm{Re}})\\,\\sin\\theta,\n$$\nwhere $\\Delta \\omega \\equiv \\omega_2 - \\omega_1$ is the difference of the natural angular frequencies of shedding, $K$ is a hydrodynamic coupling coefficient with the dimensions of angular frequency, $D_{\\mathrm{ref}}$ is a reference diameter, and $\\overline{\\mathrm{Re}}$ is a representative Reynolds number for the pair. In this reduced equation, stable fixed points satisfy\n$$\n\\sin\\theta^\\star \\;=\\; \\frac{\\Delta \\omega}{2\\,K},\n$$\nprovided that the phase-locking condition\n$$\n\\left|\\Delta \\omega\\right| \\;\\le\\; 2\\,\\left|K\\right|\n$$\nholds. The stable equilibrium near $\\theta^\\star = \\pi$ exists when $K  0$ and the above inequality is satisfied. We define the binary vortex street as the anti-phase locked state $\\theta^\\star \\approx \\pi$.\n\n- Use the standard dimensionless Strouhal number $\\mathrm{St} \\equiv f D / U$ with the empirically supported correlation\n$$\n\\mathrm{St}(\\mathrm{Re}) \\;=\\; \\max\\!\\left(0,\\; 0.212 \\;-\\; \\frac{4.5}{\\mathrm{Re}}\\right)\n$$\nfor $\\mathrm{Re} \\ge 50$, and no periodic shedding for $\\mathrm{Re}  50$. The angular frequency for cylinder $j \\in \\{1,2\\}$ is\n$$\n\\omega_j \\;=\\; 2\\pi\\,\\mathrm{St}(\\mathrm{Re}_j)\\,\\frac{U}{D_j},\n$$\nwith $\\mathrm{Re}_j \\equiv \\dfrac{U D_j}{\\nu}$ and $\\nu$ the kinematic viscosity.\n\n- Use a phenomenological hydrodynamic coupling of the form\n$$\nK\\!\\left(\\frac{T}{D_{\\mathrm{ref}}}, \\overline{\\mathrm{Re}}\\right) \\;=\\; \\kappa\\,\\overline{\\omega}\\,\\exp\\!\\Big(-\\alpha\\big(\\tfrac{T}{D_{\\mathrm{ref}}}-1\\big)\\Big)\\,\\Bigg(\\frac{\\tfrac{T}{D_{\\mathrm{ref}}}}{T_c(\\overline{\\mathrm{Re}})} - 1\\Bigg),\n$$\nwhere $\\overline{\\omega} \\equiv (\\omega_1 + \\omega_2)/2$, $D_{\\mathrm{ref}} \\equiv (D_1 + D_2)/2$, $\\overline{\\mathrm{Re}} \\equiv (\\mathrm{Re}_1 + \\mathrm{Re}_2)/2$, and\n$$\nT_c(\\overline{\\mathrm{Re}}) \\;=\\; 1.2 \\;+\\; 0.3\\,\\tanh\\!\\left(\\frac{\\overline{\\mathrm{Re}} - 100}{300}\\right).\n$$\nThis model encodes an exponential decay of coupling with increasing spacing and a sign change across a critical spacing $T_c$. Choose the dimensionless constants $\\kappa = 0.2$ and $\\alpha = 1.5$. Angles are to be treated in radians.\n\nBinary vortex street detection rule:\n- For given $(U,\\nu,D_1,D_2)$ and a trial spacing ratio $\\tau \\equiv T/D_{\\mathrm{ref}}$, there is a binary vortex street if and only if all of the following hold:\n    1. $\\mathrm{Re}_1 \\ge 50$ and $\\mathrm{Re}_2 \\ge 50$,\n    2. $K(\\tau,\\overline{\\mathrm{Re}})  0$,\n    3. $\\left|\\Delta \\omega\\right| \\le 2\\,\\left|K(\\tau,\\overline{\\mathrm{Re}})\\right|$.\n- If the above are satisfied, the anti-phase equilibrium exists and is stable, with the equilibrium phase difference $\\theta^\\star$ lying on the anti-phase branch.\n\nComputational task:\n- Implement a program that, for each test case, searches a uniform grid of spacing ratios\n$$\n\\tau \\in [1.05,\\,3.00]\n$$\nwith increment\n$$\n\\Delta \\tau \\;=\\; 0.01,\n$$\nand returns the smallest $\\tau$ that produces a binary vortex street according to the above rule. If no such $\\tau$ exists in the search range, return the sentinel value $-1.000$.\n\n- Use the following test suite. All physical quantities must be interpreted in the International System of Units: speed $U$ in m/s, diameters $D_1,D_2$ in m, kinematic viscosity $\\nu$ in m$^2$/s. Angles are measured in radians.\n    1. Case A (baseline identical cylinders): $U = 1.0$ m/s, $\\nu = 1.5\\times 10^{-5}$ m$^2$/s, $D_1 = 0.010$ m, $D_2 = 0.010$ m.\n    2. Case B (diameter mismatch): $U = 1.0$ m/s, $\\nu = 1.5\\times 10^{-5}$ m$^2$/s, $D_1 = 0.010$ m, $D_2 = 0.013$ m.\n    3. Case C (reduced speed, identical cylinders): $U = 0.5$ m/s, $\\nu = 1.5\\times 10^{-5}$ m$^2$/s, $D_1 = 0.010$ m, $D_2 = 0.010$ m.\n    4. Case D (below shedding threshold): $U = 0.05$ m/s, $\\nu = 1.5\\times 10^{-5}$ m$^2$/s, $D_1 = 0.004$ m, $D_2 = 0.004$ m.\n\nRequired final output format:\n- Your program should produce a single line of output containing the results for the four test cases as a comma-separated list enclosed in square brackets, with each number rounded to three decimals, for example\n$$\n[\\tau_A,\\tau_B,\\tau_C,\\tau_D],\n$$\nwhere each $\\tau$ is either the smallest spacing ratio $\\tau$ producing a binary vortex street for that case, rounded to three decimals, or the sentinel value $-1.000$ if none is found in the search interval. The spacing ratio is dimensionless and therefore unitless.", "solution": "The problem statement has been analyzed and is deemed valid. It presents a self-contained, scientifically grounded modeling exercise in computational physics that is well-posed and objective. The task is to implement a numerical search based on a provided reduced-order model for flow past two cylinders to find the minimal spacing that supports an anti-phase vortex shedding state. The following describes the methodical derivation of the required computational algorithm.\n\nThe core of the problem lies in satisfying a set of three specific conditions for the existence of a \"binary vortex street,\" which corresponds to a stable, anti-phase locked state in the coupled oscillator model. For a given set of physical parameters $(U, \\nu, D_1, D_2)$, our objective is to find the smallest dimensionless spacing ratio $\\tau \\equiv T/D_{\\mathrm{ref}}$ within the interval $[1.05, 3.00]$ that satisfies these conditions.\n\nThe algorithm for a single test case proceeds as follows:\n\n**Step 1: Initial Parameter Calculation and Pre-computation**\n\nFirst, we compute the physical parameters that do not depend on the spacing ratio $\\tau$. Given the free-stream velocity $U$, kinematic viscosity $\\nu$, and cylinder diameters $D_1$ and $D_2$:\n\nThe Reynolds number for each cylinder $j \\in \\{1,2\\}$ is calculated as:\n$$\n\\mathrm{Re}_j = \\frac{U D_j}{\\nu}\n$$\nThe first condition for a binary vortex street is that both cylinders must be in the periodic shedding regime. This is given by the criterion:\n$$\n\\mathrm{Re}_1 \\ge 50 \\quad \\text{and} \\quad \\mathrm{Re}_2 \\ge 50\n$$\nIf this condition is not met, no stable vortex shedding occurs for at least one cylinder, making the coupled analysis moot. In this case, the search is terminated, and the sentinel value of $-1.000$ is returned.\n\n**Step 2: Calculation of Natural Frequencies**\n\nIf the Reynolds numbers are satisfactory, we proceed to calculate the natural shedding frequencies. The Strouhal number, $\\mathrm{St}$, for each cylinder is determined using the provided empirical correlation:\n$$\n\\mathrm{St}(\\mathrm{Re}_j) = \\max\\left(0, 0.212 - \\frac{4.5}{\\mathrm{Re}_j}\\right)\n$$\nThe natural shedding angular frequency $\\omega_j$ for each cylinder is then:\n$$\n\\omega_j = 2\\pi \\cdot \\mathrm{St}(\\mathrm{Re}_j) \\cdot \\frac{U}{D_j}\n$$\nFrom these, we compute the difference in natural frequencies, $\\Delta\\omega$, which is a critical parameter for the phase-locking condition:\n$$\n\\Delta\\omega = \\omega_2 - \\omega_1\n$$\n\n**Step 3: Calculation of Model Reference Parameters**\n\nThe coupled oscillator model employs several reference and average quantities, which are computed next:\n- Reference diameter: $D_{\\mathrm{ref}} = (D_1 + D_2) / 2$\n- Average Reynolds number: $\\overline{\\mathrm{Re}} = (\\mathrm{Re}_1 + \\mathrm{Re}_2) / 2$\n- Average angular frequency: $\\overline{\\omega} = (\\omega_1 + \\omega_2) / 2$\n\nThe model for the hydrodynamic coupling coefficient $K$ depends on a critical spacing ratio $T_c$, which itself is a function of the average Reynolds number:\n$$\nT_c(\\overline{\\mathrm{Re}}) = 1.2 + 0.3 \\cdot \\tanh\\left(\\frac{\\overline{\\mathrm{Re}} - 100}{300}\\right)\n$$\nThese quantities are computed once per test case, as they are independent of the search variable $\\tau$.\n\n**Step 4: Numerical Search over the Spacing Ratio Grid**\n\nThe core of the task is a numerical search over a discrete grid of spacing ratios $\\tau$. The search domain is specified as $\\tau \\in [1.05, 3.00]$ with an increment of $\\Delta\\tau = 0.01$. This defines a grid of points $\\tau_i = 1.05 + i \\cdot 0.01$ for $i=0, 1, \\dots, 195$. We iterate through these values of $\\tau$ in increasing order. For each $\\tau$, we check the remaining two conditions for a binary vortex street.\n\n**Step 5: Evaluation of Conditions for each Trial Spacing**\n\nFor each trial value of $\\tau$, we must evaluate the coupling coefficient $K$ and check the final two conditions. The coupling coefficient is given by:\n$$\nK(\\tau, \\overline{\\mathrm{Re}}) = \\kappa \\cdot \\overline{\\omega} \\cdot \\exp\\left(-\\alpha(\\tau-1)\\right) \\cdot \\left(\\frac{\\tau}{T_c(\\overline{\\mathrm{Re}})} - 1\\right)\n$$\nwhere the model constants are given as $\\kappa = 0.2$ and $\\alpha = 1.5$.\n\nWith $K$ computed, we check the second and third conditions:\n1.  **Condition 2 (Negative Coupling):** An anti-phase state requires negative coupling.\n    $$\n    K(\\tau, \\overline{\\mathrm{Re}})  0\n    $$\n2.  **Condition 3 (Phase-Locking):** The frequency difference must be small enough to be overcome by the coupling strength.\n    $$\n    |\\Delta\\omega| \\le 2 |K(\\tau, \\overline{\\mathrm{Re}})|\n    $$\n\nIf both of these conditions, in addition to the initial Reynolds number check, are satisfied for a given $\\tau$, we have found a spacing that produces a binary vortex street. Because the search proceeds from the smallest $\\tau$ in the grid, the first value of $\\tau$ that satisfies all conditions is the minimal one required by the problem statement. The algorithm then returns this value and terminates the search for the current test case.\n\nIf the loop over the entire grid of $\\tau$ values completes without finding any value that satisfies all three conditions, it implies that no such configuration exists within the specified search range. In this scenario, the algorithm returns the sentinel value of $-1.000$.\n\nThis complete, step-by-step procedure provides a deterministic algorithm to find the required spacing ratio for each test case, which will be implemented in the final program.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the binary vortex street problem for a suite of test cases.\n    \"\"\"\n\n    test_cases = [\n        # Case A: U, nu, D1, D2\n        (1.0, 1.5e-5, 0.010, 0.010),\n        # Case B\n        (1.0, 1.5e-5, 0.010, 0.013),\n        # Case C\n        (0.5, 1.5e-5, 0.010, 0.010),\n        # Case D\n        (0.05, 1.5e-5, 0.004, 0.004)\n    ]\n\n    results = []\n    for case in test_cases:\n        result = find_minimal_spacing(*case)\n        results.append(f\"{result:.3f}\")\n\n    print(f\"[{','.join(results)}]\")\n\ndef find_minimal_spacing(U, nu, D1, D2):\n    \"\"\"\n    For a given set of physical parameters, finds the smallest spacing ratio tau\n    that produces a binary vortex street.\n    \n    Args:\n        U (float): Free-stream speed in m/s.\n        nu (float): Kinematic viscosity in m^2/s.\n        D1 (float): Diameter of cylinder 1 in m.\n        D2 (float): Diameter of cylinder 2 in m.\n\n    Returns:\n        float: The smallest spacing ratio tau, or -1.0 if none is found.\n    \"\"\"\n    # Model constants\n    KAPPA = 0.2\n    ALPHA = 1.5\n\n    # --- Step 1: Initial Parameter Calculation ---\n    Re1 = U * D1 / nu\n    Re2 = U * D2 / nu\n\n    # Check shedding condition (Condition 1)\n    if Re1  50 or Re2  50:\n        return -1.0\n\n    # --- Step 2: Calculation of Natural Frequencies ---\n    def strouhal(Re):\n        return max(0.0, 0.212 - 4.5 / Re)\n\n    St1 = strouhal(Re1)\n    St2 = strouhal(Re2)\n    \n    # Handle the case where diameter could be zero, though not in test cases\n    omega1 = 2 * np.pi * St1 * U / D1 if D1 > 0 else 0\n    omega2 = 2 * np.pi * St2 * U / D2 if D2 > 0 else 0\n    \n    delta_omega = omega2 - omega1\n\n    # --- Step 3: Calculation of Model Reference Parameters ---\n    D_ref = (D1 + D2) / 2.0\n    Re_bar = (Re1 + Re2) / 2.0\n    omega_bar = (omega1 + omega2) / 2.0\n\n    def critical_spacing_ratio(Re_bar_val):\n        return 1.2 + 0.3 * np.tanh((Re_bar_val - 100.0) / 300.0)\n\n    Tc = critical_spacing_ratio(Re_bar)\n\n    # --- Step 4: Numerical Search over the Spacing Ratio Grid ---\n    # Search grid for tau from 1.05 to 3.00 with step 0.01\n    num_points = round((3.00 - 1.05) / 0.01) + 1\n    tau_grid = np.linspace(1.05, 3.00, num_points)\n\n    for tau in tau_grid:\n        # --- Step 5: Evaluation of Conditions for each Trial Spacing ---\n        \n        # Calculate coupling coefficient K\n        K = (KAPPA * omega_bar * np.exp(-ALPHA * (tau - 1.0)) * \n             ((tau / Tc) - 1.0))\n\n        # Check Condition 2 (Negative Coupling)\n        if K >= 0:\n            continue\n\n        # Check Condition 3 (Phase-Locking)\n        if np.abs(delta_omega) = 2 * np.abs(K):\n            # All conditions met, this is the minimal tau\n            return tau\n\n    # If loop completes, no suitable tau was found\n    return -1.0\n\nsolve()\n\n```", "id": "2438941"}]}