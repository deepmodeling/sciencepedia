{"hands_on_practices": [{"introduction": "Welcome to the hands-on practices for the Minimum Image Convention. Our first exercise provides a crucial first step: translating the mathematical concept of MIC into a working algorithm. You will implement a function that calculates the distance between two particles in a periodic orthorhombic box, contrasting the naive Euclidean distance with the correct MIC-based distance. This practice [@problem_id:2458300] is essential for building a robust toolkit for any type of periodic simulation, from molecular dynamics to cosmology.", "problem": "You are to write a complete, runnable program that demonstrates the effect of the minimum image convention for periodic boundary conditions in molecular dynamics (MD) simulations. The program must compute the Euclidean distance between two particles in an orthorhombic periodic simulation box in two ways: (1) the naive Euclidean distance that ignores periodicity, and (2) the Euclidean distance after applying the minimum image convention. Distances must be expressed in nanometers (nm) and reported rounded to exactly six decimal places.\n\nBackground and fundamental base: In molecular dynamics (MD) simulations with periodic boundary conditions (PBC), an infinite tiling of the finite simulation box is used to mimic bulk behavior. The physical distance between two particles is interpreted as the minimum distance between one particle and any periodic image of the other. The underlying geometric rule is derived from the definition of Euclidean distance and the translation symmetry of the lattice. For an orthorhombic box with side lengths $L_x$, $L_y$, and $L_z$, the minimum distance is obtained by selecting an integer number of box-length translations along each axis that minimizes the Euclidean norm of the displacement vector. Your program must implement this rule.\n\nYour task:\n- Define a function that, given two $3$-dimensional positions $\\mathbf{r}_i$ and $\\mathbf{r}_j$ in nanometers and box lengths $(L_x,L_y,L_z)$ in nanometers, returns two values:\n  1) the naive Euclidean distance $d_{\\text{naive}} = \\lVert \\mathbf{r}_j - \\mathbf{r}_i \\rVert$ in nm,\n  2) the minimum image convention distance $d_{\\text{mic}}$ in nm, obtained by translating the displacement components by integer multiples of $(L_x,L_y,L_z)$ to minimize the norm.\n- Treat the box as orthorhombic and axis-aligned.\n- Positions may lie outside the primary box interval. Your implementation must still correctly compute $d_{\\text{mic}}$ using periodicity.\n- To make your implementation clear, also include within the program a multi-line pseudocode string (not printed) that outlines the minimum image convention logic you implemented.\n\nNumerical and unit requirements:\n- All distances must be in nanometers (nm).\n- Report distances rounded to exactly $6$ decimal places.\n\nTest suite:\nYour program must compute $[d_{\\text{naive}}, d_{\\text{mic}}]$ for each of the following $5$ test cases, in the stated order.\n\n1) Happy path, small separation well within the box:\n- Box: $(L_x,L_y,L_z) = (\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,0.5\\,\\text{nm},\\,1.0\\,\\text{nm},\\,1.5\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,0.7\\,\\text{nm},\\,1.2\\,\\text{nm},\\,1.6\\,\\text{nm}\\,)$\n\n2) Crossing a periodic boundary along one axis:\n- Box: $(L_x,L_y,L_z) = (\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,0.1\\,\\text{nm},\\,1.0\\,\\text{nm},\\,1.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,2.9\\,\\text{nm},\\,1.0\\,\\text{nm},\\,1.0\\,\\text{nm}\\,)$\n\n3) Anisotropic box and wrapping along multiple axes:\n- Box: $(L_x,L_y,L_z) = (\\,2.0\\,\\text{nm},\\,4.0\\,\\text{nm},\\,5.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,1.9\\,\\text{nm},\\,0.2\\,\\text{nm},\\,4.8\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,0.1\\,\\text{nm},\\,3.9\\,\\text{nm},\\,0.3\\,\\text{nm}\\,)$\n\n4) Exactly half-box separation along one axis (tie case):\n- Box: $(L_x,L_y,L_z) = (\\,4.0\\,\\text{nm},\\,4.0\\,\\text{nm},\\,4.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,0.0\\,\\text{nm},\\,0.0\\,\\text{nm},\\,0.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,2.0\\,\\text{nm},\\,0.0\\,\\text{nm},\\,0.0\\,\\text{nm}\\,)$\n\n5) Positions outside the primary box interval:\n- Box: $(L_x,L_y,L_z) = (\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,{-}0.1\\,\\text{nm},\\,{-}0.1\\,\\text{nm},\\,{-}0.1\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,3.1\\,\\text{nm},\\,3.1\\,\\text{nm},\\,3.1\\,\\text{nm}\\,)$\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list of pairs enclosed in square brackets. Each pair corresponds to one test case in the specified order and must have the form $[d_{\\text{naive}},d_{\\text{mic}}]$, with both values rounded to exactly $6$ decimal places in nanometers. There must be no spaces in the output.\n- For example, the required overall format is like $[[a_1,b_1],[a_2,b_2],\\dots]$ where each $a_k$ and $b_k$ are floats in nanometers with exactly $6$ decimal places.", "solution": "The problem posed is a fundamental exercise in computational statistical mechanics, specifically concerning the implementation of periodic boundary conditions (PBC) in molecular dynamics (MD) simulations. The use of PBC is a standard and necessary technique to approximate the properties of a macroscopic system by simulating a small, finite number of particles. It mitigates the severe surface effects that would otherwise dominate the behavior of a small system. The core of this problem is the correct calculation of inter-particle distances, which is governed by the minimum image convention (MIC).\n\nThe problem is well-posed, scientifically grounded, and provides all necessary data for a unique and verifiable solution. We will proceed with a rigorous derivation and implementation.\n\nLet the orthorhombic simulation box be defined by a set of three orthogonal vectors corresponding to the side lengths, $\\mathbf{L} = (L_x, L_y, L_z)$. The position of two particles, $i$ and $j$, are given by vectors $\\mathbf{r}_i$ and $\\mathbf{r}_j$.\n\nFirst, we define the naive Euclidean distance, $d_{\\text{naive}}$. This is the standard distance in a non-periodic, three-dimensional Euclidean space. It is calculated from the norm of the displacement vector $\\Delta\\mathbf{r} = \\mathbf{r}_j - \\mathbf{r}_i$.\n$$\nd_{\\text{naive}} = \\lVert \\Delta\\mathbf{r} \\rVert = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}\n$$\nwhere $\\Delta\\mathbf{r} = (\\Delta x, \\Delta y, \\Delta z)$. This calculation ignores the periodic nature of the simulation box and treats the system as if it were isolated in a vacuum.\n\nSecond, we address the minimum image convention distance, $d_{\\text{mic}}$. In a periodic system, the simulation box is replicated infinitely in all directions. A particle at position $\\mathbf{r}$ has an infinite lattice of periodic images at positions $\\mathbf{r} + n_x L_x \\hat{\\mathbf{x}} + n_y L_y \\hat{\\mathbf{y}} + n_z L_z \\hat{\\mathbf{z}}$, where $n_x, n_y, n_z$ are any integers. The physical distance between particle $i$ and particle $j$ is the shortest distance between particle $i$ and *any* of the periodic images of particle $j$.\n\nMathematically, this is expressed as:\n$$\nd_{\\text{mic}} = \\min_{n_x, n_y, n_z \\in \\mathbb{Z}} \\left\\lVert (\\mathbf{r}_j - \\mathbf{r}_i) - (n_x L_x \\hat{\\mathbf{x}} + n_y L_y \\hat{\\mathbf{y}} + n_z L_z \\hat{\\mathbf{z}}) \\right\\rVert\n$$\nFor an orthorhombic box, the minimization of the norm can be performed independently for each Cartesian component. Let us consider the $x$-component of the displacement vector, $\\Delta x = x_j - x_i$. We must find an integer $n_x$ that minimizes $|\\Delta x - n_x L_x|$. This is achieved when $n_x$ is the integer nearest to the ratio $\\Delta x / L_x$. This is the \"nearest integer function,\" often denoted as $\\text{nint}(s)$ or implemented via `round(s)`.\n\nThe MIC-adjusted displacement component, $\\Delta x'$, is therefore:\n$$\n\\Delta x' = \\Delta x - L_x \\cdot \\text{round}\\left(\\frac{\\Delta x}{L_x}\\right)\n$$\nThis formula correctly \"wraps\" the displacement vector component into the interval $[-L_x/2, L_x/2]$. The same logic applies to the $y$ and $z$ components. The complete MIC-adjusted displacement vector, $\\Delta\\mathbf{r}'$, is then:\n$$\n\\Delta\\mathbf{r}' = \\left( \\Delta x - L_x \\cdot \\text{round}\\left(\\frac{\\Delta x}{L_x}\\right), \\Delta y - L_y \\cdot \\text{round}\\left(\\frac{\\Delta y}{L_y}\\right), \\Delta z - L_z \\cdot \\text{round}\\left(\\frac{\\Delta z}{L_z}\\right) \\right)\n$$\nThis vector operation is robust and correctly handles cases where particle coordinates may lie outside the primary simulation box, as only their relative displacement matters.\n\nThe minimum image distance, $d_{\\text{mic}}$, is the Euclidean norm of this adjusted displacement vector:\n$$\nd_{\\text{mic}} = \\lVert \\Delta\\mathbf{r}' \\rVert = \\sqrt{(\\Delta x')^2 + (\\Delta y')^2 + (\\Delta z')^2}\n$$\n\nThe provided test cases will be solved using this established methodology. The implementation will utilize the `numpy` library for efficient vector arithmetic. For each test case, we will compute $d_{\\text{naive}}$ and $d_{\\text{mic}}$ and report the results rounded to precisely $6$ decimal places as specified. The special case of a displacement of exactly half a box length, e.g., $\\Delta x = L_x/2$, is handled by the `round` function, which typically rounds to the nearest even integer (e.g., in `numpy`), but the resulting distance is uniquely $L_x/2$ regardless of the sign choice for the adjusted displacement. For $\\Delta x = L_x/2$, $\\Delta x' = L_x/2 - L_x \\cdot \\text{round}(0.5) = L_x/2 - L_x \\cdot 0 = L_x/2$. The magnitude is unambiguous.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of calculating naive and minimum image convention (MIC)\n    distances for a set of test cases in a molecular dynamics context.\n    \"\"\"\n\n    # Per the problem specification, this multi-line string contains the\n    # pseudocode explaining the implemented MIC logic. It is not printed.\n    # noinspection PyUnusedLocal\n    MIC_PSEUDOCODE = \"\"\"\n    function calculate_minimum_image_distance(r_i, r_j, box_dims):\n        // r_i, r_j: 3D position vectors [x, y, z] of two particles in nm.\n        // box_dims: 3D vector of orthorhombic box lengths [L_x, L_y, L_z] in nm.\n\n        // 1. Calculate the raw displacement vector.\n        //    This is a simple vector subtraction.\n        delta_r = r_j - r_i\n\n        // 2. Apply the minimum image convention to each component of the displacement vector.\n        //    For an orthorhombic box, this can be done independently for each axis.\n        //    The principle is to find the closest periodic image by shifting the displacement\n        //    by an integer number of box lengths. This is mathematically equivalent to\n        //    finding the nearest integer multiple of the box length to subtract.\n        \n        //    Let dr_c be a component of delta_r (e.g., delta_x) and L_c be the\n        //    corresponding box length (e.g., L_x).\n        //    The scaled displacement is s = dr_c / L_c.\n        //    The nearest integer number of box lengths to shift by is n = round(s).\n        //    The MIC-adjusted displacement component is dr'_c = dr_c - n * L_c.\n\n        //    In vector notation, this is:\n        mic_delta_r = delta_r - box_dims * np.round(delta_r / box_dims)\n        \n        // 3. Calculate the Euclidean norm (length) of the MIC-adjusted displacement vector.\n        //    This is the final minimum image distance.\n        distance_mic = sqrt(mic_delta_r[0]^2 + mic_delta_r[1]^2 + mic_delta_r[2]^2)\n        \n        return distance_mic\n    \"\"\"\n\n    def compute_distances(r_i_tuple, r_j_tuple, box_dims_tuple):\n        \"\"\"\n        Calculates naive and MIC distances for a single pair of particles.\n        \n        Args:\n            r_i_tuple (tuple): Position of particle i.\n            r_j_tuple (tuple): Position of particle j.\n            box_dims_tuple (tuple): Orthorhombic box dimensions (Lx, Ly, Lz).\n        \n        Returns:\n            A list containing two floats: [d_naive, d_mic].\n        \"\"\"\n        r_i = np.array(r_i_tuple, dtype=float)\n        r_j = np.array(r_j_tuple, dtype=float)\n        box_dims = np.array(box_dims_tuple, dtype=float)\n\n        # 1. Naive Euclidean distance\n        delta_r_naive = r_j - r_i\n        d_naive = np.linalg.norm(delta_r_naive)\n\n        # 2. Minimum Image Convention (MIC) distance\n        # The logic delta_r - L * round(delta_r / L) correctly finds the\n        # shortest vector in a periodic lattice.\n        delta_r_mic = delta_r_naive - box_dims * np.round(delta_r_naive / box_dims)\n        d_mic = np.linalg.norm(delta_r_mic)\n        \n        return [d_naive, d_mic]\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # 1) Happy path, small separation\n        {'r_i': (0.5, 1.0, 1.5), 'r_j': (0.7, 1.2, 1.6), 'box': (3.0, 3.0, 3.0)},\n        # 2) Crossing a periodic boundary\n        {'r_i': (0.1, 1.0, 1.0), 'r_j': (2.9, 1.0, 1.0), 'box': (3.0, 3.0, 3.0)},\n        # 3) Anisotropic box and multi-axis wrapping\n        {'r_i': (1.9, 0.2, 4.8), 'r_j': (0.1, 3.9, 0.3), 'box': (2.0, 4.0, 5.0)},\n        # 4) Exactly half-box separation\n        {'r_i': (0.0, 0.0, 0.0), 'r_j': (2.0, 0.0, 0.0), 'box': (4.0, 4.0, 4.0)},\n        # 5) Positions outside the primary box\n        {'r_i': (-0.1, -0.1, -0.1), 'r_j': (3.1, 3.1, 3.1), 'box': (3.0, 3.0, 3.0)},\n    ]\n\n    result_strings = []\n    for case in test_cases:\n        d_naive, d_mic = compute_distances(case['r_i'], case['r_j'], case['box'])\n        \n        # Format the numbers to exactly 6 decimal places and create the pair string.\n        # This ensures trailing zeros are included and meets the formatting requirement.\n        result_strings.append(f\"[{d_naive:.6f},{d_mic:.6f}]\")\n\n    # Final print statement in the exact required format: [[a1,b1],[a2,b2],...]\n    # without spaces between elements.\n    print(f\"[{','.join(result_strings)}]\")\n\nsolve()\n```", "id": "2458300"}, {"introduction": "Having implemented the basic algorithm, let's now explore its geometric implications. The Minimum Image Convention confines all possible shortest displacement vectors to a specific volume centered on a particle, known as the Wigner-Seitz cell. This conceptual exercise [@problem_id:2460029] asks you to determine the maximum possible value for the MIC distance within a cubic cell of side length $L$. Solving this will deepen your geometric intuition and clarify why the MIC is fundamental for defining interaction cutoffs in simulations.", "problem": "In a molecular simulation employing Periodic Boundary Conditions (PBC) in a $3$-dimensional simple cubic simulation cell of side length $L$, the Minimum Image Convention (MIC) defines the distance between two particles at positions $\\mathbf{r}_{i}$ and $\\mathbf{r}_{j}$ as the Euclidean norm of the shortest vector connecting one particle to any periodic image of the other. Formally, the minimum image displacement is\n$$\n\\mathbf{d}_{\\text{MIC}} = \\operatorname*{arg\\,min}_{\\mathbf{n} \\in \\mathbb{Z}^{3}} \\left\\| \\left(\\mathbf{r}_{j} - \\mathbf{r}_{i}\\right) - L\\,\\mathbf{n} \\right\\|,\n$$\nand the corresponding minimum image distance is\n$$\nd_{\\text{MIC}} = \\left\\| \\mathbf{d}_{\\text{MIC}} \\right\\|.\n$$\nAssume each coordinate of $\\mathbf{r}_{i}$ and $\\mathbf{r}_{j}$ lies in the interval $[0,L)$. Over all possible choices of $\\mathbf{r}_{i}$ and $\\mathbf{r}_{j}$ in the cell, what is the maximum possible value of $d_{\\text{MIC}}$? Express your final answer as a closed-form analytic expression in terms of $L$. No numerical rounding is required.", "solution": "The problem statement is first subjected to validation.\n\nStep 1: Extract Givens\n- The system is a molecular simulation in a $3$-dimensional simple cubic simulation cell.\n- The side length of the cell is $L$.\n- The simulation employs Periodic Boundary Conditions (PBC).\n- Distances are calculated using the Minimum Image Convention (MIC).\n- The minimum image displacement is defined as $\\mathbf{d}_{\\text{MIC}} = \\operatorname*{arg\\,min}_{\\mathbf{n} \\in \\mathbb{Z}^{3}} \\left\\| \\left(\\mathbf{r}_{j} - \\mathbf{r}_{i}\\right) - L\\,\\mathbf{n} \\right\\|$.\n- The minimum image distance is $d_{\\text{MIC}} = \\left\\| \\mathbf{d}_{\\text{MIC}} \\right\\|$.\n- Particle position vectors $\\mathbf{r}_{i}$ and $\\mathbf{r}_{j}$ have coordinates in the interval $[0,L)$.\n- The objective is to find the maximum possible value of $d_{\\text{MIC}}$ over all possible choices of $\\mathbf{r}_{i}$ and $\\mathbf{r}_{j}$.\n\nStep 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, well-posed, and objective. It describes a standard and fundamental concept in computational statistical mechanics and condensed matter physics. The definitions are precise and mathematically rigorous. There are no contradictions, missing information, or pseudoscientific claims. The problem is a straightforward mathematical optimization problem based on the geometry of periodic space.\n\nStep 3: Verdict and Action\nThe problem is valid. A complete solution will be provided.\n\nThe task is to find the maximum value of the minimum image distance, $d_{\\text{MIC}}$, between any two particles in a cubic cell of side length $L$. Let the position vectors of the two particles be $\\mathbf{r}_{i} = (x_i, y_i, z_i)$ and $\\mathbf{r}_{j} = (x_j, y_j, z_j)$. The components of these vectors lie in the interval $[0, L)$.\n\nThe displacement vector between the two particles is $\\Delta\\mathbf{r} = \\mathbf{r}_j - \\mathbf{r}_i$. Its components, $\\Delta x = x_j - x_i$, $\\Delta y = y_j - y_i$, and $\\Delta z = z_j - z_i$, each lie in the interval $(-L, L)$.\n\nThe Minimum Image Convention (MIC) seeks the shortest vector connecting particle $i$ to any periodic image of particle $j$. The positions of the images of particle $j$ are given by $\\mathbf{r}_j + L\\mathbf{n}$, where $\\mathbf{n} = (n_x, n_y, n_z)$ is a vector of integers. The displacement from particle $i$ to an image of particle $j$ is $(\\mathbf{r}_j - \\mathbf{r}_i) + L\\mathbf{n} = \\Delta\\mathbf{r} + L\\mathbf{n}$. The MIC finds the vector of this form with the minimum Euclidean norm.\n\nThis procedure can be analyzed component by component. For the $x$-component, we seek an integer $n_x$ that minimizes $|\\Delta x - n_x L|$. Since $\\Delta x \\in (-L, L)$, the possible integers for $n_x$ that can minimize this expression are $-1$, $0$, or $1$. The resulting minimum image displacement component, $d_{\\text{MIC},x} = \\Delta x - n_x L$, will lie in the interval $[-L/2, L/2]$. The same logic applies to the $y$ and $z$ components.\n\nThus, the minimum image displacement vector, $\\mathbf{d}_{\\text{MIC}} = (d_{\\text{MIC},x}, d_{\\text{MIC},y}, d_{\\text{MIC},z})$, is a vector whose components are all constrained to the interval $[-L/2, L/2]$. Geometrically, the set of all possible vectors $\\mathbf{d}_{\\text{MIC}}$ forms a cube in $\\mathbb{R}^3$ centered at the origin, with vertices at $(\\pm L/2, \\pm L/2, \\pm L/2)$.\n\nWe are asked to find the maximum possible value of the norm of this vector, $d_{\\text{MIC}} = \\|\\mathbf{d}_{\\text{MIC}}\\|$. The problem is thus reduced to finding the point within this cube that is farthest from the origin.\n$$\n\\max d_{\\text{MIC}} = \\max \\sqrt{d_{\\text{MIC},x}^2 + d_{\\text{MIC},y}^2 + d_{\\text{MIC},z}^2}\n$$\nsubject to the constraints\n$$\nd_{\\text{MIC},x} \\in [-L/2, L/2]\n$$\n$$\nd_{\\text{MIC},y} \\in [-L/2, L/2]\n$$\n$$\nd_{\\text{MIC},z} \\in [-L/2, L/2]\n$$\nMaximizing the norm is equivalent to maximizing its square, $d_{\\text{MIC}}^2 = d_{\\text{MIC},x}^2 + d_{\\text{MIC},y}^2 + d_{\\text{MIC},z}^2$. The function $f(d_x, d_y, d_z) = d_x^2 + d_y^2 + d_z^2$ is maximized over a closed, bounded box (a cube) when the absolute values of its variables are maximized. The maximum value for $|d_{\\text{MIC},k}|$ for each component $k \\in \\{x,y,z\\}$ is $L/2$.\n\nThis maximum is attained at the vertices of the cube, for instance, at the point $(L/2, L/2, L/2)$. We must confirm that such a displacement vector is physically achievable. Consider two particles at $\\mathbf{r}_i = (0,0,0)$ and $\\mathbf{r}_j = (L/2, L/2, L/2)$. Both positions are valid as their coordinates are in $[0,L)$. The displacement is $\\Delta\\mathbf{r} = (L/2, L/2, L/2)$. For each component $\\Delta r_k = L/2$, the minimum distance to an image is $|L/2 - n_k L|$. The minimum is achieved for $n_k=0$ and $n_k=1$, giving a distance of $L/2$. The corresponding displacement vectors are $L/2$ and $-L/2$. Thus, a displacement vector with components of magnitude $L/2$ is possible. For example, if we simply choose $n_x=n_y=n_z=0$, we get $\\mathbf{d}_{\\text{MIC}} = (L/2, L/2, L/2)$.\n\nThe maximum squared distance is then:\n$$\n(d_{\\text{MIC}}^2)_{\\max} = \\left(\\frac{L}{2}\\right)^2 + \\left(\\frac{L}{2}\\right)^2 + \\left(\\frac{L}{2}\\right)^2 = 3 \\frac{L^2}{4}\n$$\nTaking the square root gives the maximum distance:\n$$\n(d_{\\text{MIC}})_{\\max} = \\sqrt{3 \\frac{L^2}{4}} = \\frac{\\sqrt{3}}{2}L\n$$\nThis distance corresponds to half the length of the main space diagonal of the cubic simulation cell. Any particle in the cell is closer to the central particle (or one of its images) than this distance. This value is critical in simulations as it defines the maximum cutoff radius for pair potentials that is consistent with the minimum image convention in a cubic cell.", "answer": "$$\n\\boxed{\\frac{\\sqrt{3}}{2}L}\n$$", "id": "2460029"}, {"introduction": "The Minimum Image Convention is more than just a tool for calculating forces; it is essential for analyzing the structure of molecules that cross periodic boundaries. This final practice [@problem_id:2460073] presents a classic challenge: calculating the true end-to-end distance of a polymer chain that may be longer than the simulation box. This exercise demonstrates how to 'unwrap' a molecule by sequentially applying the MIC to its bonds, a vital technique for correctly analyzing macromolecular conformations in periodic simulations.", "problem": "In a molecular dynamics simulation, a polymer with $N$ monomers is in a cubic simulation box of side length $L$ with Periodic Boundary Conditions (PBC). The stored Cartesian positions of monomers, $\\mathbf{r}_0,\\mathbf{r}_1,\\dots,\\mathbf{r}_{N-1}$, are wrapped so that each Cartesian component lies in the interval $[0,L)$. The polymer may be longer than $L$ and may cross the box boundaries multiple times. The Minimum Image Convention (MIC) is defined as follows: for any displacement $\\Delta \\mathbf{r}$ between two positions, $\\mathrm{MIC}(\\Delta \\mathbf{r})$ is the unique displacement vector that is equivalent under PBC and has the smallest Euclidean norm (equivalently, each Cartesian component is taken in $(-L/2,L/2]$).\n\nThe end-to-end distance is defined as the Euclidean norm of the unwrapped end-to-end vector from monomer $0$ to monomer $N-1$, i.e., the norm of the vector one would obtain if the polymer were made continuous across boundaries by adding or subtracting appropriate integer multiples of $L$ to the stored coordinates.\n\nWhich of the following expressions, computed directly from the wrapped coordinates $\\{\\mathbf{r}_i\\}$ and $L$, yields the correct end-to-end distance under PBC for a chain that may be longer than $L$?\n\nA. $d \\;=\\; \\left\\|\\, \\mathrm{MIC}\\!\\left(\\mathbf{r}_{N-1}-\\mathbf{r}_0\\right) \\right\\|$\n\nB. $d \\;=\\; \\left\\|\\, \\displaystyle\\sum_{i=0}^{N-2} \\mathrm{MIC}\\!\\left(\\mathbf{r}_{i+1}-\\mathbf{r}_i\\right) \\right\\|$\n\nC. $d \\;=\\; \\left\\|\\, \\mathbf{r}_{N-1}-\\mathbf{r}_0 \\right\\|$\n\nD. $d \\;=\\; \\left\\|\\, \\displaystyle\\sum_{i=0}^{N-2} \\left(\\mathbf{r}_{i+1}-\\mathbf{r}_i\\right) \\right\\|$", "solution": "The problem statement is subjected to validation before a solution is attempted.\n\n**Step 1: Extract Givens**\n- System: A polymer with $N$ monomers.\n- Simulation Box: Cubic, side length $L$.\n- Boundary Conditions: Periodic Boundary Conditions (PBC).\n- Monomer Positions: A set of stored Cartesian positions, $\\mathbf{r}_0, \\mathbf{r}_1, \\dots, \\mathbf{r}_{N-1}$.\n- Coordinate Wrapping: Each Cartesian component of any $\\mathbf{r}_i$ lies in the interval $[0, L)$.\n- Polymer Conformation: The polymer may be longer than $L$ and may cross the box boundaries multiple times.\n- Minimum Image Convention (MIC): For any displacement $\\Delta \\mathbf{r}$, the vector $\\mathrm{MIC}(\\Delta \\mathbf{r})$ is the unique PBC-equivalent displacement with the smallest Euclidean norm, where each Cartesian component is in the interval $(-L/2, L/2]$.\n- Definition of End-to-End Distance: The Euclidean norm of the *unwrapped* end-to-end vector from monomer $0$ to monomer $N-1$. This unwrapped vector is obtained by making the polymer chain continuous across boundaries.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientifically Grounded:** The problem is set in the context of molecular dynamics simulations, a standard method in computational chemistry and physics. The concepts of Periodic Boundary Conditions (PBC), wrapped coordinates, and the Minimum Image Convention (MIC) are fundamental and correctly defined principles in this field.\n- **Well-Posed:** The problem provides a clear and unambiguous definition of the quantity to be calculated (the end-to-end distance of an unwrapped chain) and asks for a method to compute it using the provided wrapped coordinates. All necessary information and definitions are present. A unique solution based on these principles exists.\n- **Objective:** The language is formal and precise. The definitions are mathematical and free of subjectivity.\n\n**Step 3: Verdict and Action**\nThe problem statement is scientifically sound, well-posed, and objective. It contains no logical contradictions or ambiguities. Therefore, the problem is **valid**. A solution will be derived.\n\n**Derivation of the Solution**\n\nLet $\\mathbf{R}_i$ denote the *unwrapped* Cartesian position vector of the $i$-th monomer. The chain is a sequence of points $\\mathbf{R}_0, \\mathbf{R}_1, \\dots, \\mathbf{R}_{N-1}$ in space. The problem defines the end-to-end distance, $d$, as the Euclidean norm of the unwrapped end-to-end vector, $\\mathbf{V}_{\\text{e2e}}$:\n$$\n\\mathbf{V}_{\\text{e2e}} = \\mathbf{R}_{N-1} - \\mathbf{R}_0\n$$\n$$\nd = \\left\\| \\mathbf{V}_{\\text{e2e}} \\right\\| = \\left\\| \\mathbf{R}_{N-1} - \\mathbf{R}_0 \\right\\|\n$$\nThe unwrapped end-to-end vector can be expressed as a telescoping sum of the unwrapped bond vectors, $(\\mathbf{R}_{i+1} - \\mathbf{R}_i)$:\n$$\n\\mathbf{V}_{\\text{e2e}} = \\sum_{i=0}^{N-2} (\\mathbf{R}_{i+1} - \\mathbf{R}_i)\n$$\nThe stored coordinates, $\\mathbf{r}_i$, are the wrapped versions of $\\mathbf{R}_i$. This means that for each coordinate component $\\alpha \\in \\{x, y, z\\}$, we have $r_{i\\alpha} = R_{i\\alpha} \\pmod L$.\n\nOur task is to compute $\\mathbf{V}_{\\text{e2e}}$ using only the wrapped coordinates $\\{\\mathbf{r}_i\\}$ and the box length $L$. To do this, we must reconstruct each true bond vector, $\\mathbf{R}_{i+1} - \\mathbf{R}_i$, from the wrapped coordinates $\\mathbf{r}_i$ and $\\mathbf{r}_{i+1}$.\n\nConsider the displacement vector calculated from wrapped coordinates, $\\Delta\\mathbf{r}_i = \\mathbf{r}_{i+1} - \\mathbf{r}_i$. The components of this vector lie in $(-L, L)$. Due to the wrapping of coordinates when a monomer crosses a boundary, this vector is not, in general, the true physical bond vector $\\mathbf{R}_{i+1} - \\mathbf{R}_i$.\n\nThe Minimum Image Convention (MIC) is designed to resolve this. When applied to the displacement between two particles, $\\mathrm{MIC}(\\mathbf{r}_{i+1} - \\mathbf{r}_i)$ finds the shortest vector connecting the position of monomer $i$ to the position of monomer $i+1$ (or one of its periodic images). For a polymer chain, it is a standard assumption that covalent bonds are short, specifically that the distance between adjacent monomers is less than $L/2$ in all dimensions. Under this condition, the MIC correctly identifies the true physical bond vector.\n$$\n\\mathbf{R}_{i+1} - \\mathbf{R}_i = \\mathrm{MIC}(\\mathbf{r}_{i+1} - \\mathbf{r}_i)\n$$\nBy substituting this into the expression for the total end-to-end vector, we obtain the correct formula for reconstruction:\n$$\n\\mathbf{V}_{\\text{e2e}} = \\sum_{i=0}^{N-2} \\mathrm{MIC}(\\mathbf{r}_{i+1} - \\mathbf{r}_i)\n$$\nFinally, the end-to-end distance $d$ is the Euclidean norm of this reconstructed vector:\n$$\nd = \\left\\| \\sum_{i=0}^{N-2} \\mathrm{MIC}(\\mathbf{r}_{i+1} - \\mathbf{r}_i) \\right\\|\n$$\nThis procedure correctly unwraps the entire chain by summing the sequence of true bond vectors and is valid even if the total length of the chain is many times the box side $L$.\n\n**Evaluation of Options**\n\n**A. $d \\;=\\; \\left\\|\\, \\mathrm{MIC}\\!\\left(\\mathbf{r}_{N-1}-\\mathbf{r}_0\\right) \\right\\|$**\nThis expression calculates the displacement vector between the wrapped positions of the first and last monomers and then applies the MIC. This yields the shortest possible distance between monomer $0$ and monomer $N-1$ considering all periodic images. However, this ignores the connectivity of the polymer chain between these two points. If the polymer chain wraps around the periodic box, its true end-to-end vector can be much larger than the MIC of the endpoint displacement. This calculation finds the distance between two independent particles, not the end-to-end distance of a polymer connecting them.\nVerdict: **Incorrect**.\n\n**B. $d \\;=\\; \\left\\|\\, \\displaystyle\\sum_{i=0}^{N-2} \\mathrm{MIC}\\!\\left(\\mathbf{r}_{i+1}-\\mathbf{r}_i\\right) \\right\\|$**\nThis expression follows the exact logic derived above. It first computes the true physical vector for each bond, $\\mathrm{MIC}(\\mathbf{r}_{i+1}-\\mathbf{r}_i)$. Then, it sums these bond vectors to reconstruct the full, unwrapped end-to-end vector. Finally, it computes the norm of this resulting vector. This correctly accounts for the polymer's path, including any crossings of the periodic boundaries.\nVerdict: **Correct**.\n\n**C. $d \\;=\\; \\left\\|\\, \\mathbf{r}_{N-1}-\\mathbf{r}_0 \\right\\|$**\nThis expression computes the norm of the displacement vector between the wrapped coordinates of the end monomers. It does not apply the MIC, so it does not even find the shortest distance between the endpoints. For example, if $L=10$, $\\mathbf{r}_0 = (1,0,0)$ and $\\mathbf{r}_{N-1}=(9,0,0)$, this formula gives a distance of $8$, while the minimum distance through the periodic boundary is $2$. More fundamentally, like option A, it completely ignores the path of the polymer chain. This is only valid for a short chain that does not cross any boundary, which contradicts the problem statement that the chain can be longer than $L$.\nVerdict: **Incorrect**.\n\n**D. $d \\;=\\; \\left\\|\\, \\displaystyle\\sum_{i=0}^{N-2} \\left(\\mathbf{r}_{i+1}-\\mathbf{r}_i\\right) \\right\\|$**\nThe sum inside the norm is a telescoping series:\n$$\n\\sum_{i=0}^{N-2} (\\mathbf{r}_{i+1}-\\mathbf{r}_i) = (\\mathbf{r}_1-\\mathbf{r}_0) + (\\mathbf{r}_2-\\mathbf{r}_1) + \\dots + (\\mathbf{r}_{N-1}-\\mathbf{r}_{N-2}) = \\mathbf{r}_{N-1} - \\mathbf{r}_0\n$$\nTherefore, this expression is mathematically identical to option C: $d = \\|\\mathbf{r}_{N-1}-\\mathbf{r}_0\\|$. As established in the analysis of option C, this is incorrect. The summation of wrapped displacement vectors cancels out all intermediate monomer positions, failing to reconstruct the true chain path.\nVerdict: **Incorrect**.", "answer": "$$\\boxed{B}$$", "id": "2460073"}]}