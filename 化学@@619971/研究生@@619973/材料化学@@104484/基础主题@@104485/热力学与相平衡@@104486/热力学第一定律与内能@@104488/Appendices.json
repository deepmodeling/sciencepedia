{"hands_on_practices": [{"introduction": "理想气体的内能仅是温度的函数，但由于分子间相互作用力的存在，真实气体并非如此。本练习通过研究范德华气体的自由膨胀（一个总内能 $\\Delta U=0$ 的过程）来探讨这一点。你将推导由此产生的温度变化，从而将宏观的冷却效应与范德华参数 $a$ 所代表的微观吸引力直接联系起来 [@problem_id:2011357]。", "problem": "一份数量为 $n$ 摩尔的真实气体被用于一个冷却装置中，该气体由范德瓦尔斯状态方程描述。该气体最初被置于一个体积为 $V_i$、初始温度为 $T_i$ 的隔间中。这个隔间位于一个更大的刚性绝热容器内。容器的其余部分是一个真空室。打开一个阀门，让气体进行自由膨胀，充满整个容器，最终体积达到 $V_f$。\n\n对于范德瓦尔斯气体，其内压（描述了在恒定温度下内能随体积的变化）由关系式 $(\\frac{\\partial U}{\\partial V})_T = \\frac{a n^2}{V^2}$ 给出，其中 $a$ 是范德瓦尔斯常数之一。假设在整个过程中发生的小温度变化范围内，摩尔定容热容 $C_{V,m}$ 是一个常数。\n\n推导总温度变化 $\\Delta T = T_f - T_i$ 的一个封闭形式解析表达式，用 $n$、$a$、$C_{V,m}$、$V_i$ 和 $V_f$ 表示。", "solution": "该过程是气体在刚性绝热容器内向真空的自由膨胀。根据热力学第一定律，系统的内能变化为：\n$$\n\\Delta U = Q + W\n$$\n其中 $Q$ 是流入系统的热量，$W$ 是外界对系统所做的功。\n\n因为容器是绝热的，所以没有热量交换，$Q=0$。因为气体是向真空自由膨胀，且容器是刚性的，所以外界没有对系统做功，$W=0$。因此，总的内能变化为零：\n$$\n\\Delta U = 0\n$$\n\n将 $U$ 视为 $T$ 和 $V$ 的状态函数，其全微分为\n$$\ndU = \\left(\\frac{\\partial U}{\\partial T}\\right)_{V} dT + \\left(\\frac{\\partial U}{\\partial V}\\right)_{T} dV.\n$$\n对于 $n$ 摩尔气体，假设在小的温度变化范围内摩尔定容热容 $C_{V,m}$ 为常数，则\n$$\n\\left(\\frac{\\partial U}{\\partial T}\\right)_{V} = n C_{V,m}.\n$$\n对于范德瓦尔斯气体，其内压由下式给出\n$$\n\\left(\\frac{\\partial U}{\\partial V}\\right)_{T} = \\frac{a n^{2}}{V^{2}}.\n$$\n因此，\n$$\ndU = n C_{V,m}\\, dT + \\frac{a n^{2}}{V^{2}}\\, dV.\n$$\n\n从初始状态 $(T_{i},V_{i})$ 积分到最终状态 $(T_{f},V_{f})$，并使用 $\\Delta U=0$，\n$$\n0 = \\int_{i}^{f} dU = n C_{V,m} \\int_{T_{i}}^{T_{f}} dT + a n^{2} \\int_{V_{i}}^{V_{f}} \\frac{dV}{V^{2}}.\n$$\n积分计算结果为\n$$\n0 = n C_{V,m} (T_{f} - T_{i}) + a n^{2} \\left[-\\frac{1}{V}\\right]_{V_{i}}^{V_{f}} = n C_{V,m} (T_{f} - T_{i}) + a n^{2} \\left(\\frac{1}{V_{i}} - \\frac{1}{V_{f}}\\right).\n$$\n求解温度变化 $\\Delta T = T_{f} - T_{i}$，\n$$\n\\Delta T = -\\,\\frac{a n}{C_{V,m}} \\left(\\frac{1}{V_{i}} - \\frac{1}{V_{f}}\\right) = \\frac{a n}{C_{V,m}} \\left(\\frac{1}{V_{f}} - \\frac{1}{V_{i}}\\right).\n$$\n因为 $V_{f} > V_{i}$，对于 $a>0$ 的情况，括号中的因子为负，这表明具有吸引力的（范德瓦尔斯）气体在自由膨胀过程中会冷却。", "answer": "$$\\boxed{\\frac{a n}{C_{V,m}}\\left(\\frac{1}{V_{f}}-\\frac{1}{V_{i}}\\right)}$$", "id": "2011357"}, {"introduction": "将我们的焦点从气体转向固体，本练习深入探讨了晶体内能的量子起源。你将运用德拜模型，推导晶格振动在低温下的内能 $U(T)$，并随之从第一性原理出发，通过 $C_V = (\\partial U / \\partial T)_V$ 导出著名的德拜 $T^3$ 定律。这个基础性的推导阐明了宏观热力学性质是如何从量子统计力学的基本原理中涌现出来的 [@problem_id:2529353]。", "problem": "一种用于材料化学量热学的非金属晶体固体包含$N$个原子，其性质可以很好地用长波声学晶格振动来描述。假设在各向同性连续介质极限下，色散关系是线性的，直至一个明确的截止角频率$\\omega_D$（德拜频率）。设德拜温度为$\\Theta_D \\equiv \\hbar \\omega_D / k_B$，其中$\\hbar$是约化普朗克常数，$k_B$是玻尔兹曼常数。您可以假设在三维空间中，振动模态密度在截止频率以下与$\\omega^2$成正比，且振动模态总数为$3N$。在角频率为$\\omega$和温度为$T$时，每个模态的平均能量由谐振子的玻色–爱因斯坦（BE）热平均给出。忽略任何对内能的与温度无关的贡献。\n\n仅使用热力学第一定律和核心定义，按以下步骤进行：\n\n- 从热力学第一定律和定容热容的定义出发，对于定容过程，用$U(T)$表示$C_V$。\n\n- 通过施加模态计数约束来构建模态密度$g(\\omega)$，并将晶格振动的内能$U(T)$写成一个关于$\\omega$的积分，该积分包含$g(\\omega)$和BE热平均。进行变量替换，将$U(T)$表示为一个无量纲积分，其积分上限包含$\\Theta_D/T$。\n\n- 从该表达式出发，求出$C_V(T)$的低温渐近形式，并通过精确计算所需积分来证明$T^3$定律。\n\n将您的最终结果表示为一个关于$N$、$k_B$、$T$和$\\Theta_D$的$C_V(T)$的闭合形式解析表达式。热容的单位是焦耳每开尔文。只需提供低温表达式作为最终答案。您无需代入常数的数值。", "solution": "根据热力学第一定律，$dU = \\delta Q + \\delta W$。对于一个只做压力-体积功的封闭系统，在恒定体积下，功 $\\delta W = -p_{ext}dV = 0$。因此，内能的变化等于吸收的热量，$dU = \\delta Q_V$。\n\n定容热容 $C_V$ 定义为：\n$$\nC_V \\equiv \\left(\\frac{\\partial Q}{\\partial T}\\right)_V\n$$\n将 $dU = \\delta Q_V$ 代入，我们得到热容与内能之间的基本关系：\n$$\nC_V = \\left(\\frac{\\partial U}{\\partial T}\\right)_V\n$$\n这就是问题第一部分所要求的表达式。\n\n接下来，我们构建振动模态密度$g(\\omega)$。问题指出，对于三维固体，态密度在截止频率$\\omega_D$以下与$\\omega^2$成正比。我们可以将其写作：\n$$\ng(\\omega) = \\begin{cases} A\\omega^2 & \\text{对于 } 0 \\le \\omega \\le \\omega_D \\\\ 0 & \\text{对于 } \\omega > \\omega_D \\end{cases}\n$$\n其中$A$是归一化常数。含有$N$个原子的固体的总振动模态数为$3N$。这个约束条件用于确定常数$A$：\n$$\n\\int_0^{\\infty} g(\\omega) d\\omega = \\int_0^{\\omega_D} A\\omega^2 d\\omega = 3N\n$$\n计算该积分得到：\n$$\nA \\left[ \\frac{\\omega^3}{3} \\right]_0^{\\omega_D} = A \\frac{\\omega_D^3}{3} = 3N\n$$\n解出$A$，我们得到：\n$$\nA = \\frac{9N}{\\omega_D^3}\n$$\n因此，态密度为：\n$$\ng(\\omega) = \\frac{9N}{\\omega_D^3} \\omega^2 \\quad \\text{对于 } 0 \\le \\omega \\le \\omega_D\n$$\n晶格振动的内能$U(T)$是通过将每个模态的平均能量对模态分布进行积分得到的。根据玻色–爱因斯坦分布，在温度$T$下，频率为$\\omega$的量子谐振子的平均能量是$\\langle E_\\omega \\rangle = \\frac{\\hbar\\omega}{\\exp(\\hbar\\omega/k_BT) - 1}$。根据题目要求，我们忽略与温度无关的零点能。\n$$\nU(T) = \\int_0^{\\infty} g(\\omega) \\frac{\\hbar\\omega}{\\exp(\\frac{\\hbar\\omega}{k_B T}) - 1} d\\omega\n$$\n代入$g(\\omega)$的表达式：\n$$\nU(T) = \\int_0^{\\omega_D} \\left(\\frac{9N}{\\omega_D^3} \\omega^2\\right) \\frac{\\hbar\\omega}{\\exp(\\frac{\\hbar\\omega}{k_B T}) - 1} d\\omega = \\frac{9N\\hbar}{\\omega_D^3} \\int_0^{\\omega_D} \\frac{\\omega^3}{\\exp(\\frac{\\hbar\\omega}{k_B T}) - 1} d\\omega\n$$\n为了简化这个积分，我们进行变量替换。令$x = \\frac{\\hbar\\omega}{k_B T}$。这是一个无量纲变量。由此，我们有$\\omega = \\frac{k_B T}{\\hbar} x$和$d\\omega = \\frac{k_B T}{\\hbar} dx$。积分上下限相应改变：当$\\omega=0$时，$x=0$；当$\\omega=\\omega_D$时，$x = \\frac{\\hbar\\omega_D}{k_B T} = \\frac{\\Theta_D}{T}$，其中$\\Theta_D$是德拜温度。\n将这些代入$U(T)$的表达式：\n$$\nU(T) = \\frac{9N\\hbar}{\\omega_D^3} \\int_0^{\\Theta_D/T} \\frac{\\left(\\frac{k_B T}{\\hbar} x\\right)^3}{\\exp(x) - 1} \\left(\\frac{k_B T}{\\hbar} dx\\right)\n$$\n$$\nU(T) = \\frac{9N\\hbar}{\\omega_D^3} \\left(\\frac{k_B T}{\\hbar}\\right)^4 \\int_0^{\\Theta_D/T} \\frac{x^3}{\\exp(x) - 1} dx\n$$\n我们使用定义$\\hbar\\omega_D = k_B\\Theta_D$来简化积分前的系数：\n$$\n\\frac{9N\\hbar}{\\omega_D^3} \\left(\\frac{k_B T}{\\hbar}\\right)^4 = \\frac{9N\\hbar}{(k_B\\Theta_D/\\hbar)^3} \\frac{(k_B T)^4}{\\hbar^4} = \\frac{9N\\hbar^4}{(k_B\\Theta_D)^3} \\frac{(k_B T)^4}{\\hbar^4} = 9 N k_B T \\left(\\frac{T}{\\Theta_D}\\right)^3\n$$\n因此，内能由下式给出：\n$$\nU(T) = 9 N k_B T \\left(\\frac{T}{\\Theta_D}\\right)^3 \\int_0^{\\Theta_D/T} \\frac{x^3}{\\exp(x) - 1} dx\n$$\n现在，我们考虑低温极限，即$T \\ll \\Theta_D$。在此区域，积分上限$\\frac{\\Theta_D}{T} \\to \\infty$。内能的表达式变为：\n$$\nU(T) \\approx 9 N k_B T \\left(\\frac{T}{\\Theta_D}\\right)^3 \\int_0^{\\infty} \\frac{x^3}{\\exp(x) - 1} dx\n$$\n这个定积分是一个与黎曼zeta函数和伽马函数相关的标准形式，具体为$\\int_0^{\\infty} \\frac{x^{s-1}}{\\exp(x) - 1} dx = \\Gamma(s)\\zeta(s)$。对于$s=4$，我们有：\n$$\n\\int_0^{\\infty} \\frac{x^3}{\\exp(x) - 1} dx = \\Gamma(4)\\zeta(4) = (3!) \\left(\\frac{\\pi^4}{90}\\right) = 6 \\cdot \\frac{\\pi^4}{90} = \\frac{\\pi^4}{15}\n$$\n将此值代回$U(T)$的表达式：\n$$\nU(T) \\approx 9 N k_B T \\left(\\frac{T}{\\Theta_D}\\right)^3 \\left(\\frac{\\pi^4}{15}\\right) = \\frac{3 N \\pi^4 k_B}{5 \\Theta_D^3} T^4\n$$\n在低温极限下，内能与$T^4$成正比。\n最后，我们通过对$U(T)$求关于$T$的导数来计算热容$C_V$：\n$$\nC_V(T) = \\left(\\frac{\\partial U}{\\partial T}\\right)_V \\approx \\frac{\\partial}{\\partial T} \\left(\\frac{3 N \\pi^4 k_B}{5 \\Theta_D^3} T^4\\right)\n$$\n$$\nC_V(T) \\approx \\frac{3 N \\pi^4 k_B}{5 \\Theta_D^3} (4T^3) = \\frac{12 N \\pi^4 k_B}{5 \\Theta_D^3} T^3\n$$\n这可以写成更常规的形式，该形式清楚地显示了对$T^3$的依赖关系：\n$$\nC_V(T) = \\frac{12 \\pi^4}{5} N k_B \\left(\\frac{T}{\\Theta_D}\\right)^3\n$$\n这个结果就是著名的德拜$T^3$定律，描述了固体在低温下的热容。", "answer": "$$\n\\boxed{\\frac{12\\pi^4}{5} N k_B \\left(\\frac{T}{\\Theta_D}\\right)^3}\n$$", "id": "2529353"}, {"introduction": "本练习将热力学理论与现代计算分析相结合，这是材料科学家的一项关键技能。你将首先推导将内能对体积的依赖性 $(\\partial U / \\partial V)_T$ 与可测量的 $pVT$ 数据联系起来的热力学状态方程，然后实现一个数值算法来计算等温过程中的内能变化 $\\Delta U$。这个实践展示了如何将基本原理转化为分析实验或模拟结果的实用工具 [@problem_id:2529390]。", "problem": "一个实验室将一种封闭的、单组分材料从初始摩尔体积 $V_{\\mathrm{i}}$ 等温压缩至最终摩尔体积 $V_{\\mathrm{f}}$。给定在一个矩形网格上的压力-温度-体积列表数据 $p(T,V)$，这些数据代表了与材料化学相关的几种材料和热力学模型的实验测量状态方程。仅从简单可压缩封闭系统的热力学第一定律以及状态函数的核心定义出发，推导一个表达式，该表达式将等温路径上的内能变化 $\\Delta U$ 与一个积分相关联，且积分的被积函数完全用可测量函数 $p(T,V)$ 及其在定容下的温度导数表示。然后，设计一个数值算法，在给定网格上的 $p(T,V)$ 数据的情况下，通过对 $V$ 进行有限差分微分和数值积分，计算从 $V_{\\mathrm{i}}$ 到 $V_{\\mathrm{f}}$ 的等温压缩过程中的 $\\Delta U$。\n\n您的程序必须实现这一通用算法，并将其应用于以下四个测试用例。在每种情况下，通过在给定的温度和体积网格上评估指定的状态方程来构建 $p(T,V)$ 表。使用 $R = 8.314462618\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$。所有情况均应视为化学成分固定的封闭系统；所有最终答案以 $\\mathrm{J}$（焦耳）为单位报告，四舍五入到小数点后六位。\n\n- 测试用例 A（理想气体参考，预期等温 $\\Delta U$ 接近于零）：\n  - 物质的量：$n = 1.0\\,\\mathrm{mol}$。\n  - 温度网格：$\\{290, 300, 310\\}\\,\\mathrm{K}$。\n  - 体积网格：$\\{2.0\\times 10^{-3}, 3.0\\times 10^{-3}, 4.0\\times 10^{-3}, 5.0\\times 10^{-3}\\}\\,\\mathrm{m^3}$。\n  - 状态方程：$p(T,V) = \\dfrac{n R T}{V}$。\n  - 等温温度：$T_{\\mathrm{iso}} = 300\\,\\mathrm{K}$（恰好是网格中的一个成员）。\n  - 压缩路径：从 $V_{\\mathrm{i}} = 5.0\\times 10^{-3}\\,\\mathrm{m^3}$ 到 $V_{\\mathrm{f}} = 2.0\\times 10^{-3}\\,\\mathrm{m^3}$。\n\n- 测试用例 B（在中等体积下具有弱吸引力的 van der Waals 流体，“理想路径”的非理想情况）：\n  - 物质的量：$n = 0.1\\,\\mathrm{mol}$。\n  - 温度网格：$\\{300, 320, 340\\}\\,\\mathrm{K}$。\n  - 体积网格：$\\{2.0\\times 10^{-2}, 2.5\\times 10^{-2}, 3.0\\times 10^{-2}, 3.5\\times 10^{-2}\\}\\,\\mathrm{m^3}$。\n  - 参数：$a = 359\\,\\mathrm{Pa\\,m^6\\,mol^{-2}}$，$b = 4.27\\times 10^{-5}\\,\\mathrm{m^3\\,mol^{-1}}$。\n  - 状态方程：$p(T,V) = \\dfrac{n R T}{V - n b} - \\dfrac{a n^2}{V^2}$。\n  - 等温温度：$T_{\\mathrm{iso}} = 320\\,\\mathrm{K}$。\n  - 压缩路径：从 $V_{\\mathrm{i}} = 3.0\\times 10^{-2}\\,\\mathrm{m^3}$ 到 $V_{\\mathrm{f}} = 2.0\\times 10^{-2}\\,\\mathrm{m^3}$。\n\n- 测试用例 C（与温度相关的吸引力，代表材料化学中的复杂流体）：\n  - 物质的量：$n = 0.2\\,\\mathrm{mol}$。\n  - 温度网格：$\\{300, 320, 340, 360\\}\\,\\mathrm{K}$。\n  - 体积网格：$\\{1.5\\times 10^{-2}, 1.8\\times 10^{-2}, 2.0\\times 10^{-2}, 2.2\\times 10^{-2}, 2.5\\times 10^{-2}\\}\\,\\mathrm{m^3}$。\n  - 参数：$a_0 = 50\\,\\mathrm{Pa\\,m^6\\,mol^{-2}}$，$\\alpha = 1.0\\times 10^{-3}\\,\\mathrm{K^{-1}}$，$b = 3.0\\times 10^{-5}\\,\\mathrm{m^3\\,mol^{-1}}$。\n  - 与温度相关的吸引力：$a(T) = a_0 \\exp(-\\alpha T)$。\n  - 状态方程：$p(T,V) = \\dfrac{n R T}{V - n b} - \\dfrac{a(T) n^2}{V^2}$。\n  - 等温温度：$T_{\\mathrm{iso}} = 340\\,\\mathrm{K}$。\n  - 压缩路径：从 $V_{\\mathrm{i}} = 2.5\\times 10^{-2}\\,\\mathrm{m^3}$ 到 $V_{\\mathrm{f}} = 1.5\\times 10^{-2}\\,\\mathrm{m^3}$。\n\n- 测试用例 D（边缘情况：短压缩范围以探测数值稳定性）：\n  - 物质的量：$n = 0.1\\,\\mathrm{mol}$。\n  - 温度网格：$\\{300, 320, 340\\}\\,\\mathrm{K}$。\n  - 体积网格：$\\{2.0\\times 10^{-2}, 2.1\\times 10^{-2}, 2.2\\times 10^{-2}, 2.3\\times 10^{-2}\\}\\,\\mathrm{m^3}$。\n  - 参数：$a = 359\\,\\mathrm{Pa\\,m^6\\,mol^{-2}}$，$b = 4.27\\times 10^{-5}\\,\\mathrm{m^3\\,mol^{-1}}$。\n  - 状态方程：$p(T,V) = \\dfrac{n R T}{V - n b} - \\dfrac{a n^2}{V^2}$。\n  - 等温温度：$T_{\\mathrm{iso}} = 300\\,\\mathrm{K}$。\n  - 压缩路径：从 $V_{\\mathrm{i}} = 2.3\\times 10^{-2}\\,\\mathrm{m^3}$ 到 $V_{\\mathrm{f}} = 2.2\\times 10^{-2}\\,\\mathrm{m^3}$。\n\n算法要求和输出格式：\n- 对于每个测试用例，您的算法必须在所提供的$T$网格上使用一致的有限差分格式对$p(T,V)$关于$T$在定容$V$下进行数值微分，以获得在 $T_{\\mathrm{iso}}$ 和所有体积节点处计算的 $\\left(\\dfrac{\\partial p}{\\partial T}\\right)_V$。然后，在指定的路径上，使用仅限于所提供$V$网格的复合梯形法则对得到的等温被积函数关于$V$进行数值积分。压缩的端点 $V_{\\mathrm{i}}$ 和 $V_{\\mathrm{f}}$ 是给定 $V$ 网格的成员。\n- 对每个测试用例，生成一个 $\\Delta U$ 的浮点值，单位为 $\\mathrm{J}$，四舍五入到小数点后六位。\n- 最终输出格式：您的程序应生成单行输出，包含一个用方括号括起来的逗号分隔列表的结果，例如 $\\texttt{[x_1,x_2,x_3,x_4]}$，其中每个 $x_k$ 是相应测试用例 A–D（按此顺序）的舍入后 $\\Delta U$ 值。", "solution": "该问题要求从热力学第一定律出发，推导等温压缩过程中内能变化 $\\Delta U$ 的表达式。最终表达式必须仅依赖于可测量的物理量，即压力 $p$、温度 $T$ 和体积 $V$。\n\n对于经历可逆过程的封闭、简单可压缩系统，热力学基本关系式为：\n$$dU = T\\,dS - p\\,dV$$\n此方程将 $U$ 表示为其自然变量 $S$ 和 $V$ 的函数。然而，问题提供的是 $p(T,V)$ 形式的实验数据。因此，有必要用变量 $T$ 和 $V$ 来表示 $dU$。将内能 $U$ 视为函数 $U(T,V)$，其全微分为：\n$$dU = \\left(\\frac{\\partial U}{\\partial T}\\right)_V dT + \\left(\\frac{\\partial U}{\\partial V}\\right)_T dV$$\n$\\left(\\frac{\\partial U}{\\partial V}\\right)_T$ 这一项通常被称为内压，它量化了物质内能在恒温下随体积的变化。为了找到它的表达式，我们对微分形式 $dU = T\\,dS - p\\,dV$ 进行操作。在恒定 $T$ 下除以 $dV$ 得到：\n$$\\left(\\frac{\\partial U}{\\partial V}\\right)_T = T\\left(\\frac{\\partial S}{\\partial V}\\right)_T - p$$\n此表达式仍然包含一个熵项 $\\left(\\frac{\\partial S}{\\partial V}\\right)_T$。为了用可测量量替换它，我们使用一个麦克斯韦关系。麦克斯韦关系源于热力学势的混合二阶偏导数的相等性。这里合适的热力学势是亥姆霍兹自由能 $A = U - TS$。其全微分为：\n$$dA = dU - T\\,dS - S\\,dT$$\n代入 $dU = T\\,dS - p\\,dV$ 可得：\n$$dA = (T\\,dS - p\\,dV) - T\\,dS - S\\,dT = -S\\,dT - p\\,dV$$\n由于 $A$ 是一个状态函数，其混合二阶偏导数必须相等（根据克莱罗定理）：\n$$\\frac{\\partial}{\\partial V}\\left(\\frac{\\partial A}{\\partial T}\\right)_V = \\frac{\\partial}{\\partial T}\\left(\\frac{\\partial A}{\\partial V}\\right)_T$$\n从 $dA$ 的表达式中，我们识别出 $\\left(\\frac{\\partial A}{\\partial T}\\right)_V = -S$ 和 $\\left(\\frac{\\partial A}{\\partial V}\\right)_T = -p$。将它们代入上述等式中得到：\n$$\\frac{\\partial}{\\partial V}(-S)_T = \\frac{\\partial}{\\partial T}(-p)_V$$\n这简化为所需的麦克斯韦关系：\n$$\\left(\\frac{\\partial S}{\\partial V}\\right)_T = \\left(\\frac{\\partial p}{\\partial T}\\right)_V$$\n现在我们将此结果代回内压的表达式中：\n$$\\left(\\frac{\\partial U}{\\partial V}\\right)_T = T\\left(\\frac{\\partial p}{\\partial T}\\right)_V - p$$\n这就是热力学状态方程，它提供了所期望的联系。它仅使用 $p, V, T$ 数据表达了内能的等温体积依赖性。\n\n对于等温过程，温度是恒定的，所以 $dT = 0$。内能的全微分简化为：\n$$dU_T = \\left(\\frac{\\partial U}{\\partial V}\\right)_T dV = \\left[T\\left(\\frac{\\partial p}{\\partial T}\\right)_V - p\\right]dV$$\n为了求出在恒定温度 $T_{\\mathrm{iso}}$ 下，从初始体积 $V_{\\mathrm{i}}$ 等温压缩到最终体积 $V_{\\mathrm{f}}$ 的总内能变化 $\\Delta U$，我们沿指定路径对上述表达式进行积分：\n$$\\Delta U = \\int_{V_{\\mathrm{i}}}^{V_{\\mathrm{f}}} \\left[T_{\\mathrm{iso}}\\left(\\frac{\\partial p(T,V)}{\\partial T}\\right)_{V, T=T_{\\mathrm{iso}}} - p(T_{\\mathrm{iso}}, V)\\right]dV$$\n这就是需要进行数值实现的最终表达式。对于理想气体，$p = nRT/V$，被积函数为 $T(nR/V) - (nRT/V) = 0$，所以对于任何等温过程 $\\Delta U = 0$，正如预期。这为我们的数值方法提供了一个关键的检验。\n\n数值算法的步骤如下。对于每个测试用例：\n1.  使用状态方程 $p(T,V)$ 在指定的温度和体积网格上生成离散的压力表 $p_{jk} = p(T_j, V_k)$。\n2.  等温路径由 $T_{\\mathrm{iso}}$、$V_{\\mathrm{i}}$ 和 $V_{\\mathrm{f}}$ 定义。设 $T_{\\mathrm{iso}}$ 在温度网格中的索引为 $j_{\\mathrm{iso}}$，$V_{\\mathrm{i}}$ 和 $V_{\\mathrm{f}}$ 在体积网格中的索引为 $k_{\\mathrm{i}}$ 和 $k_{\\mathrm{f}}$。\n3.  被积函数 $I(V) = T_{\\mathrm{iso}}\\left(\\frac{\\partial p}{\\partial T}\\right)_V - p(T_{\\mathrm{iso}}, V)$ 必须在积分路径上的每个体积节点 $V_k$ 处进行求值。\n4.  在 $(T_{\\mathrm{iso}}, V_k)$ 处的偏导数 $\\left(\\frac{\\partial p}{\\partial T}\\right)_V$ 是通过对每个固定的体积 $V_k$ 在温度网格上使用有限差分格式来近似的。采用一种一致的格式：\n    -   如果 $T_{\\mathrm{iso}}$ 是网格的内部点（$0 < j_{\\mathrm{iso}} < N_T-1$），则使用二阶中心差分：$\\left(\\frac{\\partial p}{\\partial T}\\right)_{V_k} \\approx \\frac{p_{j_{\\mathrm{iso}}+1, k} - p_{j_{\\mathrm{iso}}-1, k}}{T_{j_{\\mathrm{iso}}+1} - T_{j_{\\mathrm{iso)}-1}}$。\n    -   如果 $T_{\\mathrm{iso}}$ 是第一个点（$j_{\\mathrm{iso}}=0$），则使用一阶向前差分：$\\left(\\frac{\\partial p}{\\partial T}\\right)_{V_k} \\approx \\frac{p_{1, k} - p_{0, k}}{T_1 - T_0}$。\n    -   如果 $T_{\\mathrm{iso}}$ 是最后一个点（$j_{\\mathrm{iso}}=N_T-1$），则使用一阶向后差分：$\\left(\\frac{\\partial p}{\\partial T}\\right)_{V_k} \\approx \\frac{p_{N_T-1, k} - p_{N_T-2, k}}{T_{N_T-1} - T_{N_T-2}}$。\n5.  计算从 $V_{\\mathrm{i}}$ 到 $V_{\\mathrm{f}}$ 的所有体积节点上被积函数 $I(V_k)$ 的值。\n6.  使用复合梯形法则计算 $\\Delta U$ 的积分，该法则非常适合处理可能非均匀网格上的数据。这是通过 `numpy.trapz` 实现的，该函数将被积函数值和相应的体积坐标作为输入，并正确计算有符号面积。传递给 `numpy.trapz` 的点的顺序是从初始状态 ($V_{\\mathrm{i}}$) 到最终状态 ($V_{\\mathrm{f}}$)，以确保 $\\Delta U$ 的符号正确。\n7.  每个用例的最终结果四舍五入到小数点后六位。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the change in internal energy during isothermal compression\n    for four different test cases, based on a derived thermodynamic relation.\n    \"\"\"\n    R = 8.314462618  # Molar gas constant in J mol^-1 K^-1\n\n    # Define equations of state\n    def p_ideal(T, V, n, params):\n        return n * R * T / V\n\n    def p_vdw(T, V, n, params):\n        a = params['a']\n        b = params['b']\n        # Check for V > nb to avoid division by zero or negative pressure term\n        if V <= n * b:\n            return np.inf\n        return n * R * T / (V - n * b) - a * n**2 / V**2\n\n    def p_mod_vdw(T, V, n, params):\n        a0 = params['a0']\n        alpha = params['alpha']\n        b = params['b']\n        if V <= n * b:\n            return np.inf\n        a_T = a0 * np.exp(-alpha * T)\n        return n * R * T / (V - n * b) - a_T * n**2 / V**2\n\n    eos_map = {\n        \"ideal\": p_ideal,\n        \"vdw\": p_vdw,\n        \"mod_vdw\": p_mod_vdw\n    }\n\n    test_cases = [\n        {\n            \"n\": 1.0,\n            \"T_grid\": np.array([290.0, 300.0, 310.0]),\n            \"V_grid\": np.array([2.0e-3, 3.0e-3, 4.0e-3, 5.0e-3]),\n            \"eos_type\": \"ideal\",\n            \"params\": {},\n            \"T_iso\": 300.0,\n            \"V_i\": 5.0e-3,\n            \"V_f\": 2.0e-3,\n        },\n        {\n            \"n\": 0.1,\n            \"T_grid\": np.array([300.0, 320.0, 340.0]),\n            \"V_grid\": np.array([2.0e-2, 2.5e-2, 3.0e-2, 3.5e-2]),\n            \"eos_type\": \"vdw\",\n            \"params\": {\"a\": 359.0, \"b\": 4.27e-5},\n            \"T_iso\": 320.0,\n            \"V_i\": 3.0e-2,\n            \"V_f\": 2.0e-2,\n        },\n        {\n            \"n\": 0.2,\n            \"T_grid\": np.array([300.0, 320.0, 340.0, 360.0]),\n            \"V_grid\": np.array([1.5e-2, 1.8e-2, 2.0e-2, 2.2e-2, 2.5e-2]),\n            \"eos_type\": \"mod_vdw\",\n            \"params\": {\"a0\": 50.0, \"alpha\": 1.0e-3, \"b\": 3.0e-5},\n            \"T_iso\": 340.0,\n            \"V_i\": 2.5e-2,\n            \"V_f\": 1.5e-2,\n        },\n        {\n            \"n\": 0.1,\n            \"T_grid\": np.array([300.0, 320.0, 340.0]),\n            \"V_grid\": np.array([2.0e-2, 2.1e-2, 2.2e-2, 2.3e-2]),\n            \"eos_type\": \"vdw\",\n            \"params\": {\"a\": 359.0, \"b\": 4.27e-5},\n            \"T_iso\": 300.0,\n            \"V_i\": 2.3e-2,\n            \"V_f\": 2.2e-2,\n        },\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        n = case[\"n\"]\n        T_grid = case[\"T_grid\"]\n        V_grid = case[\"V_grid\"]\n        eos_func = eos_map[case[\"eos_type\"]]\n        params = case[\"params\"]\n        T_iso = case[\"T_iso\"]\n        V_i = case[\"V_i\"]\n        V_f = case[\"V_f\"]\n\n        # Generate the p(T,V) data table\n        p_table = np.zeros((len(T_grid), len(V_grid)))\n        for j, T in enumerate(T_grid):\n            for k, V in enumerate(V_grid):\n                p_table[j, k] = eos_func(T, V, n, params)\n\n        # Find indices for the isothermal path\n        j_iso = np.where(np.isclose(T_grid, T_iso))[0][0]\n        idx_i = np.where(np.isclose(V_grid, V_i))[0][0]\n        idx_f = np.where(np.isclose(V_grid, V_f))[0][0]\n\n        # Define the integration path from initial to final volume\n        step = 1 if idx_f > idx_i else -1\n        path_indices = np.arange(idx_i, idx_f + step, step)\n        \n        V_path = V_grid[path_indices]\n        integrand_values = []\n\n        # Compute the integrand at each volume node along the path\n        for k in path_indices:\n            p_at_Vk = p_table[:, k]\n\n            # Approximate (dp/dT)_V using finite differences\n            if 0 < j_iso < len(T_grid) - 1:  # Central difference\n                dp = p_at_Vk[j_iso + 1] - p_at_Vk[j_iso - 1]\n                dT = T_grid[j_iso + 1] - T_grid[j_iso - 1]\n            elif j_iso == 0:  # Forward difference\n                dp = p_at_Vk[1] - p_at_Vk[0]\n                dT = T_grid[1] - T_grid[0]\n            else:  # Backward difference (j_iso == len(T_grid) - 1)\n                dp = p_at_Vk[j_iso] - p_at_Vk[j_iso - 1]\n                dT = T_grid[j_iso] - T_grid[j_iso - 1]\n            \n            dp_dT = dp / dT\n            \n            p_iso_Vk = p_table[j_iso, k]\n            \n            # Integrand: T * (dp/dT)_V - p\n            integrand = T_iso * dp_dT - p_iso_Vk\n            integrand_values.append(integrand)\n        \n        # Perform numerical integration using the trapezoidal rule\n        delta_U = np.trapz(integrand_values, V_path)\n        \n        results.append(f\"{delta_U:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2529390"}]}