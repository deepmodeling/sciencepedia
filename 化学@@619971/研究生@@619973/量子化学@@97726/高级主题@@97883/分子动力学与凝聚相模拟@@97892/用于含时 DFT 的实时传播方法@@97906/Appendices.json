{"hands_on_practices": [{"introduction": "实时传播的核心是将含时薛定谔方程在时间上离散化。然而，并非所有的数值积分方案都同样有效；有些方案可能会引入导致解发散的灾难性错误。本练习将通过冯·诺依曼稳定性分析，引导你从数学上理解为什么某些传播方法（如显式欧拉法）是有条件不稳定的，而其他方法（如 Crank-Nicolson 方法）则是无条件稳定的 [@problem_id:2919790]。掌握这种分析方法是编写可靠的实时传播代码之前必不可少的理论基础。", "problem": "在实时含时密度泛函理论 (TDDFT) 中，一个常见的任务是数值传播一个 Kohn–Sham 轨道，在自由粒子极限下，该轨道满足原子单位制下的含时 Schrödinger 方程 $i \\,\\partial \\psi(x,t)/\\partial t = -\\frac{1}{2} \\,\\partial^{2}\\psi(x,t)/\\partial x^{2}$。考虑一个间距为 $h$ 且具有周期性边界条件的空间均匀的一维实空间网格。用标准的二阶中心有限差分算子 $(\\partial^{2}\\psi/\\partial x^{2})(x_{j}) \\approx \\left(\\psi_{j+1}-2\\psi_{j}+\\psi_{j-1}\\right)/h^{2}$ 来近似拉普拉斯算子，其中 $\\psi_{j}(t) \\equiv \\psi(x_{j},t)$ 且 $x_{j}=j h$。通过其作用 $(H\\psi)_{j} = -\\frac{1}{2}\\,(\\psi_{j+1}-2\\psi_{j}+\\psi_{j-1})/h^{2}$ 来定义离散哈密顿算子 $H$。\n\n考虑以下两种用于从 $t^{n}$ 推进到 $t^{n+1}=t^{n}+\\Delta t$ 的时间传播格式：\n- 显式前向 Euler 方法：$\\psi^{n+1} = \\psi^{n} - i\\,\\Delta t\\, H \\psi^{n}$。\n- Crank–Nicolson (CN) 方法：$\\left(I + i\\,\\frac{\\Delta t}{2}\\,H\\right)\\psi^{n+1} = \\left(I - i\\,\\frac{\\Delta t}{2}\\,H\\right)\\psi^{n}$，其中 $I$ 是单位算子。\n\n通过考虑一个波数 $\\kappa$ 位于第一 Brillouin 区的 Fourier 模式 $\\psi^{n}_{j} = G^{n}\\,\\exp(i \\kappa j h)$，对每种格式进行 von Neumann 稳定性分析。对每种格式：\n- 推导出放大因子 $G(\\kappa)$，将其表示为 $\\kappa$、$\\Delta t$ 和 $h$ 的函数。\n- 确定放大因子模在所有 $\\kappa$ 上的上确界，并将其表示为类 Courant 比率 $r \\equiv \\Delta t/h^{2}$ 的函数。\n- 利用对所有 $\\kappa$ 谱半径不超过 1 的稳定性条件，推导出每种格式所允许的最大 $r$ 值（即所有满足稳定性条件的 $r \\ge 0$ 的上确界）。\n\n将您的最终答案表示为一个单行矩阵，其中包含这两个允许的最大 $r$ 值（第一项为显式 Euler 方法，第二项为 Crank–Nicolson 方法）。最终答案中不应出现推导过程。最终答案必须是精确的符号表达式。", "solution": "问题陈述提出了计算量子力学领域中的一个适定任务，具体而言，是针对含时 Schrödinger 方程数值格式的 von Neumann 稳定性分析。其前提具有科学依据，目标定义足够严格。因此，该问题被认为是有效的，并且可以构建解答。\n\n分析始于离散哈密顿算子 $H$ 对一个通用 Fourier 模式 $\\psi_j = \\exp(i \\kappa j h)$ 的作用，其中 $\\psi_j \\equiv \\psi(x_j)$ 且 $x_j = j h$。该算子通过其在网格点 $\\psi_j$ 上的作用定义为 $ (H\\psi)_{j} = -\\frac{1}{2h^2}(\\psi_{j+1}-2\\psi_{j}+\\psi_{j-1}) $。将其应用于该 Fourier 模式可得：\n$$ (H \\exp(i \\kappa j h))_j = -\\frac{1}{2h^{2}} \\left( \\exp(i \\kappa (j+1) h) - 2\\exp(i \\kappa j h) + \\exp(i \\kappa (j-1) h) \\right) $$\n将项 $\\exp(i \\kappa j h)$ 因子分解出来：\n$$ (H \\exp(i \\kappa j h))_j = -\\frac{\\exp(i \\kappa j h)}{2h^{2}} \\left( \\exp(i \\kappa h) - 2 + \\exp(-i \\kappa h) \\right) $$\n使用恒等式 $2\\cos(\\theta) = \\exp(i\\theta) + \\exp(-i\\theta)$，括号中的表达式变为 $2\\cos(\\kappa h) - 2$。\n$$ (H \\exp(i \\kappa j h))_j = -\\frac{\\exp(i \\kappa j h)}{2h^{2}} \\left( 2\\cos(\\kappa h) - 2 \\right) = \\frac{1 - \\cos(\\kappa h)}{h^{2}} \\exp(i \\kappa j h) $$\n使用半角公式 $1 - \\cos(\\theta) = 2\\sin^2(\\theta/2)$，我们发现该 Fourier 模式是离散哈密顿算子 $H$ 的一个本征函数，其对应的实值本征值为 $\\lambda(\\kappa)$：\n$$ \\lambda(\\kappa) = \\frac{2}{h^2} \\sin^2\\left(\\frac{\\kappa h}{2}\\right) $$\n这一结果是分析两种传播格式的基础。\n\nvon Neumann 稳定性分析的步骤是将试探解 $\\psi^{n}_{j} = G^{n}\\,\\exp(i \\kappa j h)$ 代入有限差分时间步进格式。稳定性条件是放大因子 $G(\\kappa)$ 对于第一 Brillouin 区内的所有波数 $\\kappa$ 都必须满足 $|G(\\kappa)| \\le 1$。\n\n显式前向 Euler 格式的分析：\n该格式由 $\\psi^{n+1} = \\psi^{n} - i\\,\\Delta t\\, H \\psi^{n} = (I - i\\,\\Delta t\\,H)\\psi^n$ 给出。\n代入试探解可得：\n$$ G^{n+1}\\exp(i \\kappa j h) = (I - i\\,\\Delta t\\,H) G^{n}\\exp(i \\kappa j h) $$\n由于 $\\exp(i \\kappa j h)$ 是 $H$ 的本征函数，我们可以用其本征值 $\\lambda(\\kappa)$ 替换算子 $H$：\n$$ G^{n+1} = (1 - i\\,\\Delta t\\,\\lambda(\\kappa))G^{n} $$\n因此，放大因子为 $G(\\kappa) = 1 - i\\,\\Delta t\\,\\lambda(\\kappa)$。代入 $\\lambda(\\kappa)$ 的表达式和定义 $r = \\Delta t/h^2$：\n$$ G(\\kappa) = 1 - i\\,\\Delta t\\, \\frac{2}{h^2} \\sin^2\\left(\\frac{\\kappa h}{2}\\right) = 1 - 2 i r \\sin^2\\left(\\frac{\\kappa h}{2}\\right) $$\n放大因子的模为：\n$$ |G(\\kappa)| = \\left| 1 - 2 i r \\sin^2\\left(\\frac{\\kappa h}{2}\\right) \\right| = \\sqrt{1^2 + \\left(-2r \\sin^2\\left(\\frac{\\kappa h}{2}\\right)\\right)^2} = \\sqrt{1 + 4r^2 \\sin^4\\left(\\frac{\\kappa h}{2}\\right)} $$\n为了确定稳定性，我们需要 $|G(\\kappa)|$ 的上确界。当 $|\\sin(\\kappa h/2)|$ 最大化时，项 $\\sin^4(\\kappa h/2)$ 也达到最大值。在第一 Brillouin 区内，$\\kappa \\in [-\\pi/h, \\pi/h]$，所以自变量 $\\kappa h/2$ 在 $[-\\pi/2, \\pi/2]$ 区间内。$|\\sin(\\kappa h/2)|$ 的最大值为 $1$。因此，模的上确界是：\n$$ \\sup_{\\kappa} |G(\\kappa)| = \\sqrt{1 + 4r^2} $$\n稳定性条件要求 $\\sup_{\\kappa} |G(\\kappa)| \\le 1$，这意味着：\n$$ \\sqrt{1 + 4r^2} \\le 1 $$\n$$ 1 + 4r^2 \\le 1 $$\n$$ 4r^2 \\le 0 $$\n由于 $r = \\Delta t/h^2$ 必须为非负值 ($r \\ge 0$)，唯一满足此不等式的 $r$ 值为 $r=0$。允许的 $r$ 的集合是 $\\{0\\}$，其上确界是 $0$。这意味着对于任意非零时间步长，显式前向 Euler 格式对于 Schrödinger 方程都是无条件不稳定的。允许的最大 $r$ 值为 $0$。\n\nCrank–Nicolson (CN) 格式的分析：\n该格式定义为 $\\left(I + i\\,\\frac{\\Delta t}{2}\\,H\\right)\\psi^{n+1} = \\left(I - i\\,\\frac{\\Delta t}{2}\\,H\\right)\\psi^{n}$。\n代入试探解 $\\psi_j^n = G^n \\exp(i \\kappa j h)$ 并用其本征值 $\\lambda(\\kappa)$ 替换 $H$：\n$$ \\left(1 + i\\,\\frac{\\Delta t}{2}\\,\\lambda(\\kappa)\\right)G^{n+1} = \\left(1 - i\\,\\frac{\\Delta t}{2}\\,\\lambda(\\kappa)\\right)G^{n} $$\n放大因子为：\n$$ G(\\kappa) = \\frac{1 - i\\,\\frac{\\Delta t}{2}\\,\\lambda(\\kappa)}{1 + i\\,\\frac{\\Delta t}{2}\\,\\lambda(\\kappa)} $$\n令实数、非负量 $A$ 定义为 $A = \\frac{\\Delta t}{2}\\lambda(\\kappa) = \\frac{\\Delta t}{2} \\frac{2}{h^2} \\sin^2\\left(\\frac{\\kappa h}{2}\\right) = r \\sin^2\\left(\\frac{\\kappa h}{2}\\right)$。\n放大因子可以写为 $G(\\kappa) = (1 - iA) / (1 + iA)$。其模为：\n$$ |G(\\kappa)| = \\frac{|1 - iA|}{|1 + iA|} = \\frac{\\sqrt{1^2 + (-A)^2}}{\\sqrt{1^2 + A^2}} = \\frac{\\sqrt{1+A^2}}{\\sqrt{1+A^2}} = 1 $$\n对于所有的 $\\kappa$、$\\Delta t$ 和 $h$ 值，放大因子的模都恰好为 $1$。因此，该模的上确界是：\n$$ \\sup_{\\kappa} |G(\\kappa)| = 1 $$\n稳定性条件 $\\sup_{\\kappa} |G(\\kappa)| \\le 1$ 对于任何 $r \\ge 0$ 的选择都成立。该格式是无条件稳定的。所有允许的 $r$ 值的集合是 $[0, \\infty)$。问题要求此集合的上确界，即 $\\infty$。\n\n最终结果由显式 Euler 格式和 Crank-Nicolson 格式各自允许的最大 $r$ 值组成。\n对于显式 Euler 方法，允许的最大 $r$ 值为 $0$。\n对于 Crank-Nicolson 方法，允许的最大 $r$ 值为 $\\infty$。", "answer": "$$\\boxed{\\begin{pmatrix} 0 & \\infty \\end{pmatrix}}$$", "id": "2919790"}, {"introduction": "在理论上理解了数值稳定性的重要性之后，亲手观察和诊断不稳定现象是至关重要的一步。这个编码练习将使用一个简单的双能级系统和一个特意选择的非幺正传播方法（显式欧拉法），让你直观地看到数值不稳定性如何体现为波函数范数的不守恒 [@problem_id:2461360]。通过这个实践，你将学会识别模拟中的数值错误来源，例如时间步长 $\\Delta t$ 相对于系统能量尺度过大，这是一项关键的调试技能。", "problem": "您需要为一个双能级含时密度泛函理论（TD-DFT）Kohn–Sham 系统构建一个最小化的、自洽的实时传播模型，该模型能够揭示数值不稳定性并允许归因其来源。考虑一个双能级模型，其含时哈密顿量在原子单位（a.u.）下定义为\n$$\nH(t) \\;=\\;\n\\begin{pmatrix}\n0 & -\\mu\\,E(t)\\\\\n-\\mu\\,E(t) & \\Delta\n\\end{pmatrix},\n\\qquad\nE(t) \\;=\\; E_0 \\sin(\\omega t),\n$$\n其中基态能量设为零，激发态能量为 $\\,\\Delta\\,$，跃迁偶极矩为 $\\,\\mu\\,$，$\\,E(t)\\,$ 是一个振幅为 $\\,E_0\\,$、角频率为 $\\,\\omega\\,$ 的经典单色电场。态矢量 $\\,\\psi(t)\\,$ 遵循含时薛定谔方程\n$$\ni\\,\\frac{d\\psi(t)}{dt} \\;=\\; H(t)\\,\\psi(t),\n$$\n初始条件为\n$$\n\\psi(0) \\;=\\; \\begin{pmatrix}1\\\\ 0\\end{pmatrix}.\n$$\n所有量和参数都以原子单位（a.u.）处理。波函数范数应计算为\n$$\n\\|\\psi(t)\\| \\;=\\; \\sqrt{\\psi(t)^\\dagger\\psi(t)}.\n$$\n\n您的程序必须对下面定义的每个测试用例，使用均匀的时间步长 $\\,\\Delta t\\,$ 模拟总时间 $\\,T\\,$ 内的演化，并根据以下准则判断传播是否数值稳定：\n- 定义最大相对范数偏差为\n$$\n\\delta_{\\max} \\;=\\; \\max_{0 \\le n \\le N}\\,\\big|\\,\\|\\psi(t_n)\\| - 1\\,\\big|,\\quad t_n = n\\,\\Delta t,\\quad N = T/\\Delta t.\n$$\n如果 $\\,\\delta_{\\max} \\le \\varepsilon\\,$，则传播被分类为稳定；如果 $\\,\\delta_{\\max} > \\varepsilon\\,$，则为不稳定，其中 $\\,\\varepsilon = 0.05\\,$.\n\n此外，对于每个测试用例，您必须确定如果存在不稳定性，是否可归因于相对于外加场频率而言过大的时间步长（时间欠采样）。对于单色场 $\\,E(t) = E_0 \\sin(\\omega t)\\,$，如果满足\n$$\n\\Delta t \\;>\\; \\frac{\\pi}{\\omega},\n$$\n则标记为时间欠采样（混叠），并约定当 $\\,\\omega = 0\\,$ 时不可能发生混叠。\n\n对所有情况使用以下固定的物理参数：$\\,\\Delta = 0.5\\,$，$\\,\\mu = 0.2\\,$，和 $\\,E_0 = 0.05\\,$（均为原子单位）。模拟参数构成下面的测试套件，其中 $\\,\\omega\\,$ 是场的角频率，$\\,\\Delta t\\,$ 是时间步长，$\\,T\\,$ 是总模拟时间。所有时间都以原子单位（a.u.）表示，并且每个时间的选择都使 $\\,T/\\Delta t\\,$ 为整数：\n- 测试用例 A（理想情况）：$\\,\\omega = 0.2\\,$，$\\,\\Delta t = 0.05\\,$，$\\,T = 5.0\\,$.\n- 测试用例 B（混叠驱动的压力测试）：$\\,\\omega = 4.0\\,$，$\\,\\Delta t = 1.0\\,$, $\\,T = 5.0\\,$.\n- 测试用例 C（非混叠大步长压力测试）：$\\,\\omega = 0.2\\,$，$\\,\\Delta t = 0.5\\,$, $\\,T = 20.0\\,$.\n- 测试用例 D（近奈奎斯特边界，短时运行）：$\\,\\omega = 10.0\\,$，$\\,\\Delta t = 0.3\\,$, $\\,T = 1.2\\,$.\n\n对于每个测试用例，您的程序必须根据以下规则输出一个整数代码：\n- 如果传播稳定，输出 $\\,0\\,$.\n- 如果传播不稳定且满足混叠条件 $\\,\\Delta t > \\pi/\\omega\\,$，输出 $\\,1\\,$.\n- 如果传播不稳定且不满足混叠条件，输出 $\\,2\\,$.\n\n您的程序应生成单行输出，其中包含一个用方括号括起来的、以逗号分隔的结果列表，顺序为测试用例 A、B、C、D。例如，输出格式必须与\n$$\n[\\text{result\\_A},\\text{result\\_B},\\text{result\\_C},\\text{result\\_D}],\n$$\n完全一样，其中每个条目都是如上定义的整数，没有额外的空格或文本。所有量都必须以原子单位（a.u.）处理，并且角度按指定通过 $\\,\\sin(\\omega t)\\,$ 以弧度表示。", "solution": "问题陈述经过严格验证，确认有效。该问题具有科学依据，提法明确且客观。问题描述了一个双能级量子系统在经典外场下的时间演化，该过程由含时薛定谔方程控制，这是量子力学和计算化学中的一个标准和基础模型。所有参数和条件都已明确定义。任务是构建一个能够揭示数值不稳定性的最小化模拟，这是数值分析中的一个关键概念。这意味着可以选择一个合适的、简单的数值积分器。为了实现问题中展示不稳定性的目标，我们选择显式前向欧拉法，这是一种一阶积分器，以其简单性著称，并且当应用于薛定谔方程时具有非幺正性，这会表现为波函数范数的不守恒。\n\n问题是模拟一个双能级系统中态矢量 $\\psi(t)$ 的时间演化，该演化遵循含时薛定谔方程（TDSE）：\n$$\ni\\,\\frac{d\\psi(t)}{dt} \\;=\\; H(t)\\,\\psi(t)\n$$\n这里，$i$ 是虚数单位，我们使用原子单位，其中约化普朗克常数 $\\hbar$ 为 1。态矢量是一个双分量列向量 $\\psi(t) = \\begin{pmatrix} c_1(t) \\\\ c_2(t) \\end{pmatrix}$，哈密顿量 $H(t)$ 是一个 $2 \\times 2$ 矩阵。初始态给定为 $\\psi(0) = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$。\n\n为了数值求解这个微分方程，我们将时间离散化为大小为 $\\Delta t$ 的均匀步长。令 $t_n = n\\,\\Delta t$（对于整数 $n \\ge 0$）。$t_{n+1}$ 时刻的态由 $t_n$ 时刻的态决定。将 TDSE 重写为 $\\frac{d\\psi(t)}{dt} = -i H(t)\\psi(t)$，我们应用显式前向欧拉法，该方法将导数近似为有限差分：\n$$\n\\frac{\\psi(t_{n+1}) - \\psi(t_n)}{\\Delta t} \\approx -i H(t_n)\\psi(t_n)\n$$\n整理后得到从一个时间步到下一个时间步的态矢量传播规则：\n$$\n\\psi(t_{n+1}) = \\psi(t_n) - i \\Delta t H(t_n) \\psi(t_n) = (I - i \\Delta t H(t_n)) \\psi(t_n)\n$$\n其中 $I$ 是 $2 \\times 2$ 单位矩阵。算符 $U(t_n, \\Delta t) = I - i \\Delta t H(t_n)$ 是前向欧拉传播子。对于厄米哈密顿量 $H(t_n)$，此传播子不是幺正的，意味着它不保持态矢量的范数。下一步的范数平方为 $\\|\\psi(t_{n+1})\\|^2 = \\psi(t_n)^\\dagger (I + i \\Delta t H(t_n))(I - i \\Delta t H(t_n)) \\psi(t_n) = \\|\\psi(t_n)\\|^2 + (\\Delta t)^2 \\psi(t_n)^\\dagger H(t_n)^2 \\psi(t_n)$。由于 $H(t_n)^2$ 是半正定的，范数保证是非递减的，即 $\\|\\psi(t_{n+1})\\| \\ge \\|\\psi(t_n)\\|$。初始范数为 $\\|\\psi(0)\\| = \\sqrt{1^2 + 0^2} = 1$。在模拟过程中，范数与 1 的任何偏差都是数值积分误差的直接结果，这标志着数值不稳定性。预计这种误差的增长对于较大的时间步长 $\\Delta t$ 会更加显著。\n\n每个测试用例的模拟流程如下：\n1.  使用给定的参数初始化系统：$\\Delta = 0.5$，$\\mu = 0.2$，$E_0 = 0.05$，以及特定用例的 $\\omega$、$\\Delta t$ 和 $T$ 值。稳定性阈值为 $\\varepsilon = 0.05$。\n2.  设置初始态矢量为 $\\psi = \\begin{pmatrix} 1+0i \\\\ 0+0i \\end{pmatrix}$。\n3.  将最大相对范数偏差 $\\delta_{\\max}$ 初始化为 $0$。\n4.  确定总时间步数 $N = T/\\Delta t$。\n5.  对 $n$ 从 $0$ 到 $N$ 进行迭代。在每次迭代中，对应时间 $t_n = n \\Delta t$：\n    a. 计算当前态矢量的范数 $\\|\\psi(t_n)\\| = \\sqrt{\\psi(t_n)^\\dagger \\psi(t_n)}$。\n    b. 计算与 1 的绝对偏差 $|\\,\\|\\psi(t_n)\\| - 1\\,|$。\n    c. 将 $\\delta_{\\max}$ 更新为其当前值与此新偏差中的最大值。\n    d. 如果 $n < N$，使用 $E(t_n) = E_0 \\sin(\\omega t_n)$ 构建哈密顿矩阵 $H(t_n)$：\n    $$\n    H(t_n) = \\begin{pmatrix} 0 & -\\mu E_0 \\sin(\\omega t_n) \\\\ -\\mu E_0 \\sin(\\omega t_n) & \\Delta \\end{pmatrix}\n    $$\n    e. 使用前向欧拉规则将态矢量传播到下一个时间步：$\\psi(t_{n+1}) = (I - i \\Delta t H(t_n)) \\psi(t_n)$。\n6.  循环结束后，对模拟的稳定性进行分类：如果 $\\delta_{\\max} \\le \\varepsilon$ 则为“稳定”，否则为“不稳定”。\n7.  检查时间欠采样（混叠）的条件：如果 $\\omega > 0$ 且 $\\Delta t > \\pi/\\omega$，则发生此情况。\n8.  根据结果分配一个整数代码：\n    - 如果传播稳定，则为 $0$。\n    - 如果传播不稳定且满足混叠条件，则为 $1$。\n    - 如果传播不稳定且不满足混叠条件，则为 $2$。\n\n此流程将应用于所提供的四个测试用例中的每一个，并收集所得的整数代码。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the TD-DFT simulations for all test cases\n    and print the results in the specified format.\n    \"\"\"\n\n    def run_simulation(omega, dt, T, delta, mu, E0, epsilon):\n        \"\"\"\n        Runs a single simulation for a given set of parameters.\n\n        Args:\n            omega: Field angular frequency (a.u.).\n            dt: Time step (a.u.).\n            T: Total simulation time (a.u.).\n            delta: Excited state energy (a.u.).\n            mu: Transition dipole (a.u.).\n            E0: Electric field amplitude (a.u.).\n            epsilon: Stability threshold for norm deviation.\n\n        Returns:\n            An integer code (0, 1, or 2) representing the outcome.\n        \"\"\"\n        # Ensure the number of steps is an integer\n        num_steps = round(T / dt)\n\n        # Initial state vector psi(0) = [1, 0]\n        psi = np.array([1.0 + 0j, 0.0 + 0j])\n\n        # 2x2 Identity matrix\n        I = np.identity(2, dtype=complex)\n\n        max_norm_deviation = 0.0\n\n        # Loop over time steps from t=0 to t=T\n        for n in range(num_steps + 1):\n            t = n * dt\n\n            # 1. Compute norm and update max deviation\n            # np.vdot is the conjugate dot product: psi_dagger * psi\n            norm = np.sqrt(np.vdot(psi, psi)).real\n            norm_deviation = abs(norm - 1.0)\n            if norm_deviation > max_norm_deviation:\n                max_norm_deviation = norm_deviation\n\n            # Break loop after the last state's norm is checked at t=T\n            if n == num_steps:\n                break\n\n            # 2. Construct the time-dependent Hamiltonian H(t)\n            E_t = E0 * np.sin(omega * t)\n            H_t = np.array([\n                [0.0, -mu * E_t],\n                [-mu * E_t, delta]\n            ], dtype=complex)\n\n            # 3. Propagate using the Explicit Forward Euler method\n            # psi(t + dt) = (I - i*dt*H(t)) * psi(t)\n            propagator = I - 1j * dt * H_t\n            psi = propagator @ psi\n\n        # 4. Classify the result\n        is_stable = (max_norm_deviation <= epsilon)\n        \n        # Aliasing occurs if the time step is larger than half the field period\n        # Convention: no aliasing for omega = 0\n        is_aliasing = (omega > 0 and dt > np.pi / omega)\n\n        if is_stable:\n            return 0  # Stable\n        else:\n            if is_aliasing:\n                return 1  # Unstable and aliasing\n            else:\n                return 2  # Unstable, no aliasing\n\n    # Fixed physical parameters in atomic units\n    delta_param = 0.5\n    mu_param = 0.2\n    E0_param = 0.05\n    epsilon_param = 0.05\n\n    # Define the test cases from the problem statement.\n    # Each tuple is (omega, delta_t, T)\n    test_cases = [\n        (0.2, 0.05, 5.0),   # Case A\n        (4.0, 1.0, 5.0),   # Case B\n        (0.2, 0.5, 20.0),  # Case C\n        (10.0, 0.3, 1.2),  # Case D\n    ]\n\n    results = []\n    for case in test_cases:\n        omega_val, dt_val, T_val = case\n        result = run_simulation(omega_val, dt_val, T_val, delta_param, mu_param, E0_param, epsilon_param)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2461360"}, {"introduction": "现在，我们将运用所学知识解决一个更高级且物理意义深刻的问题：验证规范不变性。在描述光与物质相互作用时，我们可以选择不同的规范（如长度规范或速度规范），但所有物理可观测量必须保持不变。本练习将指导你实现一个强大且广泛使用的分裂算符传播方法，模拟一个量子系统在激光脉冲下的动力学，并最终通过计算来数值验证偶极矩和吸收能量等可观测量在不同规范下的等价性 [@problem_id:2919764]。这是一个对传播代码正确性的终极考验。", "problem": "在本任务中，你将实现含时密度泛函理论 (TDDFT) 中单个 Kohn–Sham 轨道在偶极近似下的一维实时演化，分别在长度规范和速度规范下进行，并用它来定量地证明可观测量的规范一致性。你必须从原子单位下单电子 Kohn–Sham 轨道的含时薛定谔方程 (TDSE) 出发。该系统是一个束缚在一维谐振子势阱中的电子。你必须在两种规范下都实现一个数值上幺正的演化方案，计算可观测量，并以数值精度比较结果。\n\n使用以下物理和数学基础：\n- 原子单位：设置 $\\hbar = 1$，$m_e = 1$，电子电荷 $q = -1$。\n- 无场哈密顿量：$H_0 = \\frac{\\hat{p}^2}{2} + \\frac{1}{2}\\,\\omega_0^2\\,x^2$。\n- 长度规范哈密顿量：$H_L(t) = \\frac{\\hat{p}^2}{2} + \\frac{1}{2}\\,\\omega_0^2\\,x^2 + x\\,E(t)$。\n- 速度规范哈密顿量：$H_V(t) = \\frac{(\\hat{p} + A(t))^2}{2} + \\frac{1}{2}\\,\\omega_0^2\\,x^2$。\n- 电场和矢量势通过 $E(t) = -\\frac{dA(t)}{dt}$ 关联。\n- 初始态是谐振子的基态（在你选择的网格上归一化）：$\\psi(x,0) \\propto \\exp\\!\\left(-\\frac{\\omega_0 x^2}{2}\\right)$。\n\n使用傅里叶谱表示动能，实现一个能确保时间上二阶精度和数值幺正性的分裂算符演化。你必须对哈密顿量的显含时部分在时间上使用中点取值，以确保对含时场的二阶精度。空间网格应是均匀的，并应使用快速傅里叶变换在位置表象和动量表象之间切换。\n\n将矢量势脉冲定义在有限时间区间 $t \\in [0, T]$ 上：\n$$\nA(t) = A_0 \\,\\sin^2\\!\\left(\\frac{\\pi t}{T}\\right)\\,\\sin(\\omega\\, t + \\phi),\n$$\n并通过解析微分精确地设置 $E(t) = -\\frac{dA(t)}{dt}$。在区间 $[0,T]$ 之外，场为零。你必须在演化过程中计算以下可观测量：\n- 含时偶极矩 $d(t) = \\langle x \\rangle_t$。\n- 无场能量 $E_0(t) = \\langle \\psi(t) | H_0 | \\psi(t) \\rangle$。\n- 相对于无场哈密顿量的吸收能量，$\\Delta E = E_0(T) - E_0(0)$。\n\n通过对每种情况进行两次演化来数值上证明规范一致性：一次使用 $E(t)$ 和 $H_L(t)$，另一次使用 $A(t)$ 和 $H_V(t)$，均从相同的初始态开始。对每种情况，计算：\n- 两种偶极矩轨迹之间的最大绝对偏差，$\\max_t |d_L(t) - d_V(t)|$。\n- 吸收能量的绝对差值， $|\\Delta E_L - \\Delta E_V|$。\n\n所有量均使用原子单位。所需输出中不出现以度为单位的角度；若内部使用角度，应采用弧度制。你的程序必须实现以下测试套件，并生成一个包含所有结果的单行输出。对每个测试用例，你必须使用指定的参数并计算上述两个浮点数。时间步长应按指定值使用，但你必须通过将有效步长调整为 $T/N_t$ 来确保总时长 $T$是时间步长的整数倍，其中 $N_t$ 是最接近的整数步数。\n\n空间离散化及所有情况的通用参数：\n- 网格点数 $N_x = 1024$。\n- 盒子长度 $L = 40.0$（因此网格间距为 $dx = L/N_x$）。\n- 谐振子频率 $\\omega_0 = 0.5$。\n\n对每种情况，定义 $T = N_{\\text{cycles}} \\times \\frac{2\\pi}{\\omega}$ 并使用给定的名义时间步长 $dt$（按上述方式调整）从 $t = 0$ 演化到 $t = T$。\n\n测试套件：\n- 情况1（正常路径）：\n  - 载波频率 $\\omega = 0.7$。\n  - 周期数 $N_{\\text{cycles}} = 6$。\n  - 矢量势振幅 $A_0 = 0.07142857142857142$。\n  - 载波包络相位 $\\phi = 0.0$。\n  - 名义时间步长 $dt = 0.02$。\n- 情况2（零场边缘情况）：\n  - 载波频率 $\\omega = 0.7$。\n  - 周期数 $N_{\\text{cycles}} = 6$。\n  - 矢量势振幅 $A_0 = 0.0$。\n  - 载波包络相位 $\\phi = 0.0$。\n  - 名义时间步长 $dt = 0.02$。\n- 情况3（更强的场和不同相位）：\n  - 载波频率 $\\omega = 0.5$。\n  - 周期数 $N_{\\text{cycles}} = 6$。\n  - 矢量势振幅 $A_0 = 0.3$。\n  - 载波包络相位 $\\phi = 1.0471975511965976$。\n  - 名义时间步长 $dt = 0.01$。\n\n要求的最终输出格式：\n- 你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。该列表必须按顺序包含：情况1的最大偶极矩偏差和吸收能量差，接着是情况2的相同两个量，然后是情况3的相同两个量。例如，输出必须形如\n\"[r1,r2,r3,r4,r5,r6]\"\n，其中每个 $r_j$ 是一个浮点数。不允许有其他输出。\n\n所有数值必须以原子单位计算，返回的浮点数应为原始数值（不四舍五入到固定的小数位数）。", "solution": "用户提供了一个有科学依据、提法明确且完整的问题。所有必要的物理常数、数学方程、参数和数值步骤都已明确指定，没有歧义或矛盾。该问题要求实现一种标准的数值方法（傅里叶分裂算符方法）来求解在外部激光脉冲影响下，谐振子势中单粒子的含时薛定谔方程 (TDSE)。这是计算量子动力学领域的一个典范问题。\n\n问题的核心在于证明物理可观测量的规范不变性原理。需要进行两次独立的模拟：一次在长度规范下，一次在速度规范下。为这两种规范提供的哈密顿量 $H_L(t)$ 和 $H_V(t)$ 是原子单位下的标准正确形式。电场 $E(t)$ 和矢量势 $A(t)$ 之间的关系 $E(t) = -dA(t)/dt$ 是基础性的。问题还正确地指出，在电荷 $q=-1$ 的情况下，一个规范变换将两种规范下的波函数联系起来：$\\psi_L(x,t) = \\exp(-ixA(t))\\psi_V(x,t)$。\n\n只有当物理可观测量是规范不变的时候，它们才有意义。偶极矩 $d(t) = \\langle \\psi(t) | \\hat{x} | \\psi(t) \\rangle$ 是一个依赖于位置的算符的期望值，它是规范不变的。吸收的能量 $\\Delta E = E_0(T) - E_0(0)$ 也是规范不变的，前提是矢量势 $A(t)$ 在脉冲的开始 ($t=0$) 和结束 ($t=T$) 时为零，这对于给定的脉冲形状 $A(t) = A_0 \\sin^2(\\pi t/T) \\sin(\\omega t + \\phi)$ 是成立的。由于 $A(0)=A(T)=0$，在这些时刻规范变换因子为1，意味着 $\\psi_L(0) = \\psi_V(0)$ 且 $\\psi_L(T) = \\psi_V(T)$。因此，定义了 $E_0(t)$ 的无场哈密顿量 $H_0$ 的期望值在 $t=0$ 和 $t=T$ 时在两种规范下必须相同。所以，在精确计算中，$\\Delta E_L$ 和 $\\Delta E_V$ 必须是完全相同的。\n\n该问题旨在数值上验证这些理论上的等价性。任何计算出的差异都将是衡量由时间步进算法和空间离散化引入的数值误差的尺度。指定的分裂算符方法是一个合适的选择，因为它是幺正的，并且在时间步长 $dt$ 上具有二阶精度。\n\n解决方案包含以下步骤：\n1.  **离散化**：建立位置坐标 $x$ 的均匀空间网格和相应的动量网格 $k$。动量网格通过快速傅里叶变换 (FFT) 关系确定。\n2.  **初始态**：初始波函数 $\\psi(x,t=0)$ 是一维量子谐振子的归一化基态。\n3.  **哈密顿算符**：动能算符 $\\hat{T} = \\hat{p}^2/2$ 在动量空间中表示为对角算符 $k^2/2$。势能算符在位置空间中是对角的。\n4.  **时间演化**：实现一个对称的二阶分裂算符（Strang 分裂）方案。对于哈密顿量 $H = \\hat{T} + \\hat{V}(t)$，该方案为：\n    $$\n    \\psi(t+dt) \\approx e^{-i \\hat{V}(t+dt/2) dt/2} \\, e^{-i \\hat{T} dt} \\, e^{-i \\hat{V}(t+dt/2) dt/2} \\psi(t)\n    $$\n    算符 $e^{-i\\hat{V}dt/2}$ 在位置空间中应用，而 $e^{-i\\hat{T}dt}$ 在动量空间中应用，使用 FFT 在不同表象间切换。含时势在时间间隔的中点 $t+dt/2$ 处取值，以保持二阶精度。\n    *   **长度规范**：势算符为 $V_L(x,t) = \\frac{1}{2}\\omega_0^2 x^2 + x E(t)$。\n    *   **速度规范**：分裂在依赖于位置的势 $V_0(x) = \\frac{1}{2}\\omega_0^2 x^2$ 和含时的动能算符 $T_V(k,t) = \\frac{(k+A(t))^2}{2}$ 之间进行。演化算符为：\n        $$\n        \\psi(t+dt) \\approx e^{-i \\hat{V}_0 dt/2} \\, e^{-i \\hat{T}_V(t+dt/2) dt} \\, e^{-i \\hat{V}_0 dt/2} \\psi(t)\n        $$\n5.  **可观测量**：在每个时间步，计算偶极矩 $d(t) = \\int \\psi^*(x,t) x \\psi(x,t) dx$ 和无场能量 $E_0(t) = \\langle \\psi(t) | H_0 | \\psi(t) \\rangle$。$E_0(t)$ 中的动能项使用 帕塞瓦尔定理 (Parseval's theorem) 在动量空间中计算。\n6.  **比较**：在两种规范下完成从 $t=0$ 到 $t=T$ 的演化后，对每个测试用例计算偶极矩轨迹之间的最大绝对偏差 $\\max_t |d_L(t) - d_V(t)|$ 和总吸收能量的绝对差值 $|\\Delta E_L - \\Delta E_V|$。\n\n实现将通过定义一个函数来进行，该函数接收一个测试用例的参数，执行两种规范的演化，并返回所需的两个指标。将为三个指定的测试用例中的每一个调用此函数，以生成最终输出。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n\n    def run_simulation(case_params):\n        \"\"\"\n        Performs the TDDFT propagation in both length and velocity gauges for a single test case.\n        \"\"\"\n        # Unpack parameters\n        omega, N_cycles, A0, phi, dt_nominal = case_params\n        \n        # Fixed physical and grid parameters\n        Nx = 1024\n        L = 40.0\n        omega0 = 0.5\n\n        # 1. Setup Grid and Time\n        dx = L / Nx\n        x = np.linspace(-L/2, L/2, Nx, endpoint=False)\n        k = 2 * np.pi * np.fft.fftfreq(Nx, d=dx)\n        \n        if omega == 0.0:\n            T = 0.0\n        else:\n            T = N_cycles * 2 * np.pi / omega\n        \n        if T == 0.0 or dt_nominal == 0.0:\n            Nt = 0\n            dt = 0.0\n        else:\n            Nt = int(round(T / dt_nominal))\n            if Nt == 0 and T > 0: Nt = 1\n            dt = T / Nt\n        \n        time_points = np.linspace(0, T, Nt + 1)\n        \n        # 2. Define External Fields\n        def A_field(t):\n            if 0 < t < T:\n                return A0 * (np.sin(np.pi * t / T)**2) * np.sin(omega * t + phi)\n            return 0.0\n\n        def E_field(t):\n            if 0 < t < T:\n                s_pi_t_T = np.sin(np.pi * t / T)\n                s_om_t_p = np.sin(omega * t + phi)\n                c_om_t_p = np.cos(omega * t + phi)\n                s_2pi_t_T = np.sin(2 * np.pi * t / T)\n                \n                term1 = (np.pi / T) * s_2pi_t_T * s_om_t_p\n                term2 = omega * (s_pi_t_T**2) * c_om_t_p\n                return -A0 * (term1 + term2)\n            return 0.0\n            \n        # 3. Initial State\n        psi0 = (omega0 / np.pi)**0.25 * np.exp(-0.5 * omega0 * x**2)\n        psi0 /= np.sqrt(np.sum(np.abs(psi0)**2) * dx)\n        psi0 = psi0.astype(np.complex128)\n        \n        # 4. Operators and Helper Functions\n        V0_op = 0.5 * omega0**2 * x**2\n        T_op_k_space = 0.5 * k**2\n        \n        def calculate_E0(psi):\n            psi_k = np.fft.fft(psi)\n            kin_energy = (dx**2 / L) * np.sum(T_op_k_space * np.abs(psi_k)**2)\n            pot_energy = np.sum(V0_op * np.abs(psi)**2) * dx\n            return np.real(kin_energy + pot_energy)\n\n        if Nt == 0:\n            return 0.0, 0.0\n\n        # ==========================\n        # LENGTH GAUGE PROPAGATION\n        # ==========================\n        psi_L = np.copy(psi0)\n        dipole_L = np.zeros(Nt + 1)\n        energy_L = np.zeros(Nt + 1)\n        \n        dipole_L[0] = np.sum(x * np.abs(psi_L)**2) * dx\n        energy_L[0] = calculate_E0(psi_L)\n\n        exp_T_prop = np.exp(-1j * T_op_k_space * dt)\n\n        for i in range(Nt):\n            t_mid = time_points[i] + dt / 2.0\n            \n            E_mid = E_field(t_mid)\n            V_L_mid = V0_op + x * E_mid\n            exp_V_prop_half = np.exp(-1j * V_L_mid * dt / 2.0)\n            \n            psi_L *= exp_V_prop_half\n            psi_L = np.fft.ifft(np.fft.fft(psi_L) * exp_T_prop)\n            psi_L *= exp_V_prop_half\n            \n            dipole_L[i+1] = np.sum(x * np.abs(psi_L)**2) * dx\n            energy_L[i+1] = calculate_E0(psi_L)\n\n        # ==========================\n        # VELOCITY GAUGE PROPAGATION\n        # ==========================\n        psi_V = np.copy(psi0)\n        dipole_V = np.zeros(Nt + 1)\n        energy_V = np.zeros(Nt + 1)\n\n        dipole_V[0] = np.sum(x * np.abs(psi_V)**2) * dx\n        energy_V[0] = calculate_E0(psi_V)\n        \n        exp_V0_prop_half = np.exp(-1j * V0_op * dt / 2.0)\n\n        for i in range(Nt):\n            t_mid = time_points[i] + dt / 2.0\n            \n            A_mid = A_field(t_mid)\n            T_V_op = 0.5 * (k + A_mid)**2\n            exp_T_V_prop = np.exp(-1j * T_V_op * dt)\n\n            psi_V *= exp_V0_prop_half\n            psi_V = np.fft.ifft(np.fft.fft(psi_V) * exp_T_V_prop)\n            psi_V *= exp_V0_prop_half\n            \n            dipole_V[i+1] = np.sum(x * np.abs(psi_V)**2) * dx\n            energy_V[i+1] = calculate_E0(psi_V)\n        \n        # 5. Final Metrics Calculation\n        delta_E_L = energy_L[-1] - energy_L[0]\n        delta_E_V = energy_V[-1] - energy_V[0]\n        \n        max_dipole_deviation = np.max(np.abs(dipole_L - dipole_V))\n        abs_energy_difference = np.abs(delta_E_L - delta_E_V)\n        \n        return max_dipole_deviation, abs_energy_difference\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1 (happy path)\n        (0.7, 6, 0.07142857142857142, 0.0, 0.02),\n        # Case 2 (zero field edge case)\n        (0.7, 6, 0.0, 0.0, 0.02),\n        # Case 3 (stronger field and different phase)\n        (0.5, 6, 0.3, 1.0471975511965976, 0.01),\n    ]\n\n    results = []\n    for case in test_cases:\n        res1, res2 = run_simulation(case)\n        results.append(res1)\n        results.append(res2)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2919764"}]}