{"hands_on_practices": [{"introduction": "多极展开是描述远程静电相互作用的基石。本练习将此理论应用于一个具体场景，要求您计算一个多极分子与一个点电荷之间的主导相互作用项 [@problem_id:2899200]。通过这个实践，您将巩固对分子电荷分布如何转化为相互作用能，以及这些能量如何依赖于距离和方向的理解。", "problem": "一个刚性的轴对称单体 A 位于原点，且是电中性的（其净电荷为零）。在其与对称轴对齐的体固坐标系中，其直到八极矩的非零球多极矩强度由集合 $\\{M_{1}, M_{2}, M_{3}\\}$ 指定，其中在原子单位制中，$M_{l}$ 的单位为 $e a_{0}^{l}$，其值分别为 $M_{1} = 2.00$、$M_{2} = 5.00$ 和 $M_{3} = -8.00$。该单体的对称轴与从单体 A 指向第二个单体 B 的分子间矢量 $\\mathbf{R}$ 形成 $\\theta = 60.0$ 度的夹角。第二个单体 B 是一个电荷为 $+e$ 的无结构点阳离子，位于沿 $\\mathbf{R}$ 方向，与 A 的中心间距为 $R = 15.0\\,a_{0}$ 的位置。忽略所有感应、交换和色散效应；只考虑 A 的永久静电与 B 的电荷之间的相互作用。\n\n利用局域电荷分布的静电势的长程多极展开，并根据相互作用能的定义（即 B 的电荷乘以 B 所在位置由 A 产生的电势），确定在给定的取向和间距下，A 和 B 之间的领头（在 $1/R$ 中渐近占主导地位的）静电相互作用能。推导过程在原子单位制（因此 $4\\pi\\epsilon_{0} = 1$ 且 $e = 1$）中进行，然后使用 $1$ 哈特里 $= 2625.50\\,\\mathrm{kJ\\,mol^{-1}}$ 将最终结果转换为 $\\mathrm{kJ\\,mol^{-1}}$。最终答案以 $\\mathrm{kJ\\,mol^{-1}}$ 为单位表示，并四舍五入到四位有效数字。角度 $\\theta$ 以度为单位指定。", "solution": "局域电荷分布外部的静电势可以通过求解拉普拉斯方程并用正则球谐函数展开得到。对于轴对称源，电势 $V(\\mathbf{R}) \\equiv V(R,\\theta)$ 可以进行勒让德展开，\n$$\nV(R,\\theta) \\;=\\; \\sum_{l=0}^{\\infty} \\frac{A_{l}}{R^{l+1}}\\,P_{l}(\\cos\\theta),\n$$\n其中 $P_{l}$ 是勒让德多项式，$A_{l}$ 是由源的多极矩成分决定的系数。当采用与对称轴对齐的球多极矩强度时，在国际单位制中，系数可写为 $A_{l} = \\frac{1}{4\\pi\\epsilon_{0}}\\,M_{l}$。在原子单位制中，$4\\pi\\epsilon_{0}=1$，这简化为 $A_{l} = M_{l}$。单体 A 是电中性的，所以 $M_{0}=0$，而指定的非零多极矩直到八极矩为 $M_{1}$、$M_{2}$ 和 $M_{3}$。\n\n一个位于相对于源的 $(R,\\theta)$ 位置的点电荷 $q_{B}$ 的静电相互作用能为\n$$\nU(R,\\theta) \\;=\\; q_{B}\\,V(R,\\theta) \\;=\\; q_{B}\\sum_{l=0}^{\\infty} \\frac{M_{l}}{R^{l+1}}\\,P_{l}(\\cos\\theta),\n$$\n（在原子单位制中）。在大 $R$ 处，领头（渐近占主导地位的）贡献由满足 $M_{l}\\neq 0$ 的最小 $l$ 给出。单体 A 是电中性的，所以 $M_{0}=0$。已知 $M_{1}\\neq 0$，因此领头项是 $l=1$（偶极）项。因此，\n$$\nU_{\\text{lead}}(R,\\theta) \\;=\\; q_{B}\\,\\frac{M_{1}}{R^{2}}\\,P_{1}(\\cos\\theta).\n$$\n使用 $q_{B}=+1$（原子单位制）和 $P_{1}(x)=x$，我们得到\n$$\nU_{\\text{lead}}(R,\\theta) \\;=\\; \\frac{M_{1}}{R^{2}}\\,\\cos\\theta.\n$$\n\n现在代入给定的数据。角度为 $\\theta=60.0$ 度，所以\n$$\n\\cos\\theta \\;=\\; \\cos(60.0^\\circ) \\;=\\; \\frac{1}{2}.\n$$\n间距为 $R=15.0\\,a_{0}$，因此 $R^{2} = 225$。代入 $M_{1}=2.00$，可得\n$$\nU_{\\text{lead}} \\;=\\; \\frac{2.00}{225}\\,\\frac{1}{2} \\;=\\; \\frac{1.00}{225} \\;=\\; 0.004444\\overline{4}\\ \\text{Hartree}.\n$$\n\n使用 $1$ 哈特里 $= 2625.50\\,\\mathrm{kJ\\,mol^{-1}}$ 将此能量转换为 $\\mathrm{kJ\\,mol^{-1}}$：\n$$\nU_{\\text{lead}} \\;=\\; 0.004444\\overline{4}\\times 2625.50\\ \\mathrm{kJ\\,mol^{-1}} \\;=\\; \\frac{2625.50}{225}\\ \\mathrm{kJ\\,mol^{-1}} \\;=\\; 11.668\\overline{8}\\ \\mathrm{kJ\\,mol^{-1}}.\n$$\n四舍五入到四位有效数字，得到\n$$\nU_{\\text{lead}} \\;=\\; 11.67\\ \\mathrm{kJ\\,mol^{-1}}.\n$$\n\n我们注意到，更高阶的多极矩以 $l=2$ 和 $l=3$ 项的形式贡献，分别按 $R^{-3}$ 和 $R^{-4}$ 的比例变化，因此在大 $R$ 处是次领头项。因为 $\\cos(60^\\circ)\\neq 0$，偶极项没有角度上的抵消，所以 $l=1$ 项确实主导了长程相互作用。", "answer": "$$\\boxed{11.67}$$", "id": "2899200"}, {"introduction": "尽管许多模型将分子间作用力近似为成对相互作用的总和，但多体效应对于实现定量准确性至关重要。本练习将探讨首要的三体色散相互作用——Axilrod-Teller-Muto (ATM) 项 [@problem_id:2899255]。您将通过对一个简单的共线三原子系统进行直接计算，来量化一个非加和的能量贡献，从而揭示两个原子间的相互作用是如何被第三个原子所调控的——这是理解凝聚相体系的关键概念。", "problem": "考虑三个相同的、各向同性的闭壳层原子 $A$–$B$–$C$ 共线排列，在非推迟区内，最近邻间距相等，均为 $R$。假设每个原子都具有各向同性的动态偶极极化率 $\\alpha(i\\omega)$，并且在长程范围内，唯一相关的原子间耦合源于作用在偶极算符上的电偶极-偶极相互作用张量 $T_{ij}^{ab} = \\partial_a \\partial_b (1/r_{ij})$（其中 $i$ 和 $j$ 为原子序）。在不含时 Rayleigh–Schrödinger 微扰理论的框架下，对分子间耦合计算至三阶，并忽略交换作用和高阶多极矩的贡献，则主导的三体色散能（Axilrod–Teller–Muto 三偶极项）可以写为一个与几何相关的标量前因子乘以一个正的材料系数的形式\n$$\nC_9 \\equiv \\frac{3}{\\pi} \\int_{0}^{\\infty} \\alpha(i\\omega)^3 \\, d\\omega,\n$$\n该系数仅取决于原子本身。对于给定的共线几何构型，其中 $r_{AB} = r_{BC} = R$ 且 $r_{AC} = 2R$，请确定三偶极色散贡献 $E^{(3)}(R)$ 的封闭形式解析表达式（用 $C_9$ 和 $R$ 表示），并根据表达式的符号判断该相互作用是吸引的还是排斥的。最终答案仅能用 $C_9$ 和 $R$ 表示为单个解析表达式。不要进行任何数值计算或四舍五入。", "solution": "对于三个相同的各向同性原子$A$, $B$, $C$，三阶微扰理论给出的三体色散能由它们之间的循环耦合产生。使用 Casimir-Polder 形式，总的三阶能量可以表示为在虚频率$\\omega$上的积分：\n$$\nE^{(3)} = -\\frac{1}{\\pi} \\int_0^{\\infty} \\alpha(i\\omega)^3 \\text{Tr}[\\mathbf{T}_{AB} \\mathbf{T}_{BC} \\mathbf{T}_{CA}] \\, d\\omega\n$$\n这里，我们已经考虑了两个循环排列（$A \\to B \\to C \\to A$ 和 $A \\to C \\to B \\to A$）的贡献，并且由于体系的对称性，它们是相等的。$\\boldsymbol{\\alpha}(i\\omega) = \\alpha(i\\omega) \\mathbf{I}$ 是各向同性极化率张量，$\\mathbf{T}_{ij}$ 是偶极-偶极相互作用张量。\n\n利用问题中给出的$C_9$定义，$C_9 = \\frac{3}{\\pi} \\int_{0}^{\\infty} \\alpha(i\\omega)^3 \\, d\\omega$，我们可以将积分部分替换掉：\n$$\nE^{(3)} = -\\frac{C_9}{3} \\text{Tr}[\\mathbf{T}_{AB} \\mathbf{T}_{BC} \\mathbf{T}_{CA}]\n$$\n现在我们的任务是计算几何因子 $\\text{Tr}[\\mathbf{T}_{AB} \\mathbf{T}_{BC} \\mathbf{T}_{CA}]$。\n我们将原子沿$z$轴放置，使原子$B$位于原点，$A$位于$z=-R$，$C$位于$z=+R$。原子间矢量为：\n$\\mathbf{r}_{AB} = R\\hat{\\mathbf{z}}$ ($r_{AB}=R$)\n$\\mathbf{r}_{BC} = R\\hat{\\mathbf{z}}$ ($r_{BC}=R$)\n$\\mathbf{r}_{CA} = -2R\\hat{\\mathbf{z}}$ ($r_{CA}=2R$)\n\n偶极-偶极相互作用张量的一般形式为 $\\mathbf{T}_{ij} = \\frac{3\\hat{\\mathbf{r}}_{ij} \\otimes \\hat{\\mathbf{r}}_{ij} - \\mathbf{I}}{r_{ij}^3}$。对于沿$z$轴的分离矢量（$\\hat{\\mathbf{r}} = \\pm \\hat{\\mathbf{z}}$），该张量是对角的：\n$$\n\\mathbf{T} = \\frac{1}{r^3} \\begin{pmatrix} -1 & 0 & 0 \\\\ 0 & -1 & 0 \\\\ 0 & 0 & 2 \\end{pmatrix}\n$$\n我们定义矩阵 $\\mathbf{M} = \\mathrm{diag}(-1, -1, 2)$。因此，所需的张量为：\n$$\n\\mathbf{T}_{AB} = \\frac{1}{R^3}\\mathbf{M}, \\quad \\mathbf{T}_{BC} = \\frac{1}{R^3}\\mathbf{M}, \\quad \\mathbf{T}_{CA} = \\frac{1}{(2R)^3}\\mathbf{M} = \\frac{1}{8R^3}\\mathbf{M}\n$$\n现在计算迹：\n$$\n\\text{Tr}[\\mathbf{T}_{AB} \\mathbf{T}_{BC} \\mathbf{T}_{CA}] = \\text{Tr} \\left[ \\left(\\frac{1}{R^3}\\mathbf{M}\\right) \\left(\\frac{1}{R^3}\\mathbf{M}\\right) \\left(\\frac{1}{8R^3}\\mathbf{M}\\right) \\right] = \\frac{1}{8R^9} \\text{Tr}[\\mathbf{M}^3]\n$$\n由于$\\mathbf{M}$是对角矩阵，$\\mathbf{M}^3 = \\mathrm{diag}((-1)^3, (-1)^3, 2^3) = \\mathrm{diag}(-1, -1, 8)$。\n其迹为 $\\text{Tr}[\\mathbf{M}^3] = -1 - 1 + 8 = 6$。\n因此，几何因子为 $\\frac{6}{8R^9} = \\frac{3}{4R^9}$。\n\n将此结果代回能量表达式：\n$$\nE^{(3)}(R) = -\\frac{C_9}{3} \\left( \\frac{3}{4R^9} \\right) = -\\frac{C_9}{4R^9}\n$$\n这是给定共线几何构型的三偶极色散能的最终解析表达式。\n\n为了确定相互作用的性质，我们分析 $E^{(3)}(R)$ 的符号。根据定义，$C_9$ 是通过对$\\alpha(i\\omega)^3$进行积分得到的。对于物理系统，虚频动态极化率$\\alpha(i\\omega)$对实数$\\omega \\ge 0$是严格为正的。因此，$C_9 > 0$。由于$R$是物理距离，$R^9$也为正。\n因此$E^{(3)}(R)$的表达式为负。负的能量贡献表示吸引相互作用，因为它降低了系统的总能量。", "answer": "$$\n\\boxed{-\\frac{C_9}{4R^{9}}}\n$$", "id": "2899255"}, {"introduction": "现代计算化学严重依赖经验校正来处理色散力，因为这对许多电子结构方法来说都是一个挑战。这项高级实践要求您实现一个简化版的、被广泛使用的 Grimme D3 色散模型 [@problem_id:2899243]。通过将有关阻尼和环境依赖的色散相互作用公式转化为一个可运行的计算机程序，您将在理论与实践之间架起一座桥梁，并深入了解这些基本的校正项是如何被设计和应用的。", "problem": "实现一种Grimme D3类型的对加性色散能校正，该校正使用零阻尼和依赖于配位数的$C_6$系数，并应用于一个固定的小分子集合。仅使用下面提供的定义、数据和基本原理。您的实现必须是一个完整的、可运行的程序，该程序计算两个单体之间的相互作用色散能，作为单体间原子对的交叉总和。然后，通过报告从不依赖环境的$C_6$系数切换到依赖环境的$C_6$系数时的分数变化，来量化相互作用色散能对配位数依赖性的敏感度。\n\n使用的基本原理和定义：\n- 两个分离良好的中性闭壳层片段之间的主要长程相互作用是一个吸引项，其大小与组成部分可极化中心之间距离的六次方成反比。将色散能建模为原子间的对加性总和，并带有一个短程阻尼因子，该因子能平滑地衰减非物理的短距离发散。对能量必须为负，并且随着分离距离的增加从下方趋近于零。\n- 原子的配位数应被建模为一个关于原子间距离与共价半径之和的比值的平滑、可微函数，使得近共价键距离的贡献值每个键接近于一，而远处原子的贡献可忽略不计。\n- $C_6$的环境依赖性必须通过基于计算出的配位数，在低配位和高配位极限之间对元素特定的$C_6$参考值进行连续插值来建模。\n\n程序要求：\n- 对于每个原子$i$，通过对同一单体内的原子$j$求和来计算配位数$CN_i$：\n  - 使用一个逻辑斯蒂型权重，该权重取决于共价半径之和与实际原子间距离的比值。令尖锐度参数为$k = 16$。权重和配位数的具体数学形式必须设计为满足上述定性描述。\n- 对于每个原子$i$，根据提供的元素特定的低配位参考值计算一个不依赖环境的原子系数$C_{6,i}^{(0)}$，并通过使用$CN_i$在提供的元素特定的配位范围之间的钳位线性分数，在提供的低配位和高配位参考值之间进行连续插值，从而计算出依赖环境的$C_{6,i}(CN_i)$。\n- 对于每个单体间原子对$(i,j)$，使用一个对称的混合规则将原子系数合并为对系数$C_{6,ij}$，该规则在$i$和$j$为相同元素时能简化为正确的同元素值。\n- 使用一个零阻尼函数，该函数依赖于原子间距离和元素特定参考半径之和，以衰减短程行为。该阻尼函数必须是无量纲的、随距离单调递增，并在大分离时趋近于一。对参考距离使用固定的指数参数$\\alpha = 14$和缩放因子$s_R = 1.0$；对能量也使用固定的全局前置因子$s_6 = 1.0$。设计一个与这些约束一致的阻尼函数。\n- 通过对所有单体间原子对求和来计算总的单体间色散能。在六次方反比因子中使用单位为Bohr的距离，并结合单位为原子单位的原子$C_6$，使得能量单位为Hartree，然后将最终能量转换为千焦耳/摩尔(kJ/mol)。使用以下精确常数：\n  - $1\\,\\text{Angstrom} = 1.889726125\\,\\text{Bohr}$。\n  - $1\\,\\text{Hartree} = 2625.499638\\,\\text{kJ/mol}$。\n- 每个测试用例的敏感性分析指标：计算分数变化 $\\Delta = \\dfrac{E_{\\text{env}} - E_{\\text{indep}}}{\\lvert E_{\\text{indep}} \\rvert}$，其中$E_{\\text{env}}$是使用依赖环境的$C_6$得到的单体间色散能，$E_{\\text{indep}}$是使用不依赖环境的参考值得到的能量。\n\n元素特定数据：\n- 考虑的元素：氢(H)、碳(C)、氮(N)、氧(O)、氖(Ne)、氩(Ar)。原子序数：H $= 1$, C $= 6$, N $= 7$, O $= 8$, Ne $= 10$, Ar $= 18$.\n- 共价半径（单位为Angstrom）：\n  - H: $0.31$, C: $0.76$, N: $0.71$, O: $0.66$, Ne: $0.58$, Ar: $0.96$。\n- 范德华半径（单位为Angstrom，用于在阻尼函数中定义参考距离）：\n  - H: $1.20$, C: $1.70$, N: $1.55$, O: $1.52$, Ne: $1.54$, Ar: $1.88$。\n- 原子$C_6$参考值（单位为原子单位，即Hartree Bohr$^6$）；用于插值的低配位和高配位极限以及配位范围：\n  - H: $C_6^{\\text{low}} = 6.50$, $C_6^{\\text{high}} = 6.50$, $CN_{\\text{low}} = 0.0$, $CN_{\\text{high}} = 1.0$。\n  - C: $C_6^{\\text{low}} = 44.00$, $C_6^{\\text{high}} = 50.00$, $CN_{\\text{low}} = 1.0$, $CN_{\\text{high}} = 4.0$。\n  - N: $C_6^{\\text{low}} = 22.00$, $C_6^{\\text{high}} = 26.00$, $CN_{\\text{low}} = 1.0$, $CN_{\\text{high}} = 3.0$。\n  - O: $C_6^{\\text{low}} = 15.60$, $C_6^{\\text{high}} = 18.00$, $CN_{\\text{low}} = 1.0$, $CN_{\\text{high}} = 2.0$。\n  - Ne: $C_6^{\\text{low}} = 6.38$, $C_6^{\\text{high}} = 6.38$, $CN_{\\text{low}} = 0.0$, $CN_{\\text{high}} = 0.0$。\n  - Ar: $C_6^{\\text{low}} = 64.30$, $C_6^{\\text{high}} = 64.30$, $CN_{\\text{low}} = 0.0$, $CN_{\\text{high}} = 0.0$。\n\n测试套件的几何构型和单体划分（所有坐标单位为Angstrom，如需要，角度单位为弧度）：\n- 测试用例$1$（氖二聚体，质心分离距离$3.1$）：\n  - 单体A：Ne位于$(0.0, 0.0, 0.0)$。\n  - 单体B：Ne位于$(3.1, 0.0, 0.0)$。\n- 测试用例$2$（氩二聚体，质心分离距离$3.8$）：\n  - 单体A：Ar位于$(0.0, 0.0, 0.0)$。\n  - 单体B：Ar位于$(3.8, 0.0, 0.0)$。\n- 测试用例$3$（甲烷二聚体，沿$z$轴分离距离$4.0$）：\n  - 单体A：\n    - C位于$(0.000, 0.000, 0.000)$，\n    - H位于$(0.000, 0.000, 1.089)$，\n    - H位于$(1.026719, 0.000000, -0.363000)$，\n    - H位于$(-0.513360, 0.889165, -0.363000)$，\n    - H位于$(-0.513360, -0.889165, -0.363000)$。\n  - 单体B：与单体A坐标相同，但沿$z$轴平移$(0.000, 0.000, 4.000)$。\n- 测试用例$4$（苯三明治构型二聚体，平面间分离距离$3.5$）：\n  - 单体A：六个碳原子和六个氢原子位于$z = 0.0$的$xy$平面上，碳环为边长$1.397$的正六边形，氢原子从碳原子径向向外延伸$1.089$：\n    - 对于$k = 0,1,2,3,4,5$，令$\\theta_k = k \\times \\pi/3$。\n    - 碳原子位置：$(1.397 \\cos\\theta_k, 1.397 \\sin\\theta_k, 0.000)$。\n    - 氢原子位置：$((1.397 + 1.089) \\cos\\theta_k, (1.397 + 1.089) \\sin\\theta_k, 0.000)$。\n  - 单体B：与单体A相同，但沿$z$轴平移$(0.000, 0.000, 3.500)$。\n\n数值和输出要求：\n- 所有能量必须以$\\text{kJ/mol}$为单位报告。\n- 对于上述四个测试用例中的每一个，计算敏感性指标$\\Delta = \\dfrac{E_{\\text{env}} - E_{\\text{indep}}}{\\lvert E_{\\text{indep}} \\rvert}$，结果为浮点数。\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表（例如，`[result1,result2,result3,result4]`）。每个结果必须精确到小数点后六位。\n\n覆盖性设计：\n- 测试用例$1$探测一个同核稀有气体二聚体，其配位数消失，提供了一个环境依赖性应无影响的边缘案例。\n- 测试用例$2$探测一个在更大分离距离下的更重的稀有气体二聚体，再次检验消失的环境依赖性和距离标度关系。\n- 测试用例$3$探测一个弱相互作用的饱和烃二聚体，其配位数接近最大值，提供了一个具有中等环境依赖性的“理想路径”案例。\n- 测试用例$4$探测一个具有更高配位数和多种原子类型的更大芳香体系，以检验阻尼和插值行为。\n\n约束条件：\n- 严格按照所描述的逻辑实现，不要使用此处提供之外的外部数据。\n- 不要提示输入；程序必须是自包含且确定性的。", "solution": "该模型通过对单体A中的原子$i$和单体B中的原子$j$进行对加求和来计算总的单体间色散能$E_{\\text{disp}}$。每对$(i, j)$的能量由以下公式给出：\n$$\nE_{ij} = -s_6 \\cdot f_{\\text{damp}}(R_{ij}) \\cdot \\frac{C_{6,ij}}{R_{ij}^6}\n$$\n其中$s_6=1.0$是全局缩放因子。\n\n计算流程包括几个关键步骤：\n\n1.  **配位数($CN$)计算**：每个原子$i$的配位数反映其局部化学环境，通过对同一单体内的所有其他原子$j$的贡献求和来计算。贡献由逻辑斯蒂函数加权：\n$$\nCN_i = \\sum_{j \\in \\text{monomer}(i), j \\neq i} \\frac{1}{1 + e^{-k \\left( \\frac{R_{\\text{cov},i} + R_{\\text{cov},j}}{R_{ij}} - 1 \\right)}}\n$$\n其中$R_{\\text{cov}}$是共价半径，$k=16$是尖锐度参数。\n\n2.  **$C_6$系数计算**：\n    -   **不依赖环境**：原子的$C_6$系数为其参考低配位值 $C_{6,i}^{(0)} = C_{6,Z_i}^{\\text{low}}$。\n    -   **依赖环境**：系数通过基于$CN_i$的钳位线性插值确定。分数进程变量 $x_i = \\frac{CN_i - CN_{Z_i,\\text{low}}}{CN_{Z_i,\\text{high}} - CN_{Z_i,\\text{low}}}$被钳位到$[0, 1]$区间，然后用于插值：$C_{6,i}(CN_i) = C_{6,Z_i}^{\\text{low}} + x_{i, \\text{clamped}} \\cdot (C_{6,Z_i}^{\\text{high}} - C_{6,Z_i}^{\\text{low}})$。\n\n3.  **对系数混合**：原子系数通过几何平均混合规则合并为对系数：\n$$\nC_{6,ij} = \\sqrt{C_{6,i} \\cdot C_{6,j}}\n$$\n\n4.  **阻尼函数**：为了校正短程发散，使用零阻尼函数：\n$$\nf_{\\text{damp}}(R_{ij}) = \\frac{1}{1 + 6 \\left(\\frac{R_{ij}}{R_{0,ij}}\\right)^{-\\alpha}}\n$$\n其中$\\alpha=14$，参考距离$R_{0,ij}$是范德华半径之和 $R_{0,ij} = s_R \\cdot (R_{\\text{vdW},i} + R_{\\text{vdW},j})$，且$s_R=1.0$。\n\n5.  **总能量和敏感性分析**：分别使用不依赖和依赖环境的$C_6$系数计算总能量$E_{\\text{indep}}$和$E_{\\text{env}}$。所有距离以Bohr为单位，能量以Hartree为单位计算，然后转换为kJ/mol。最后，计算敏感性指标 $\\Delta = (E_{\\text{env}} - E_{\\text{indep}})/\\lvert E_{\\text{indep}} \\rvert$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Implements a Grimme D3-type dispersion energy correction model and\n    computes the sensitivity of interaction energies to coordination-number-dependent\n    C6 coefficients for a set of molecular systems.\n    \"\"\"\n\n    # --- Constants ---\n    ANGSTROM_TO_BOHR = 1.889726125\n    HARTREE_TO_KJ_MOL = 2625.499638\n\n    # --- Model Parameters ---\n    K_CN = 16.0  # Sharpness parameter for coordination number\n    ALPHA_DAMP = 14.0  # Exponent for damping function\n    SR_DAMP = 1.0  # Scaling factor for reference distance in damping\n    S6_FACTOR = 1.0  # Global scaling factor for dispersion energy\n\n    # --- Element-specific Data ---\n    ELEMENT_DATA = {\n        'H': {'rcov': 0.31, 'rvdw': 1.20, 'c6_low': 6.50, 'c6_high': 6.50, 'cn_low': 0.0, 'cn_high': 1.0},\n        'C': {'rcov': 0.76, 'rvdw': 1.70, 'c6_low': 44.00, 'c6_high': 50.00, 'cn_low': 1.0, 'cn_high': 4.0},\n        'N': {'rcov': 0.71, 'rvdw': 1.55, 'c6_low': 22.00, 'c6_high': 26.00, 'cn_low': 1.0, 'cn_high': 3.0},\n        'O': {'rcov': 0.66, 'rvdw': 1.52, 'c6_low': 15.60, 'c6_high': 18.00, 'cn_low': 1.0, 'cn_high': 2.0},\n        'Ne': {'rcov': 0.58, 'rvdw': 1.54, 'c6_low': 6.38, 'c6_high': 6.38, 'cn_low': 0.0, 'cn_high': 0.0},\n        'Ar': {'rcov': 0.96, 'rvdw': 1.88, 'c6_low': 64.30, 'c6_high': 64.30, 'cn_low': 0.0, 'cn_high': 0.0},\n    }\n\n    # --- Test Cases ---\n    def get_benzene_geom(z_offset=0.0):\n        # Regular hexagon with side length 1.397 Angstrom\n        # Ring radius is also 1.397 Angstrom\n        c_radius = 1.397\n        h_radius = c_radius + 1.089\n        atoms = []\n        coords = []\n        for k in range(6):\n            theta = k * math.pi / 3.0\n            # Carbon\n            atoms.append('C')\n            coords.append([c_radius * math.cos(theta), c_radius * math.sin(theta), z_offset])\n            # Hydrogen\n            atoms.append('H')\n            coords.append([h_radius * math.cos(theta), h_radius * math.sin(theta), z_offset])\n        return atoms, np.array(coords)\n\n    test_cases = [\n        {\n            \"monomer_A\": (['Ne'], np.array([[0.0, 0.0, 0.0]])),\n            \"monomer_B\": (['Ne'], np.array([[3.1, 0.0, 0.0]])),\n        },\n        {\n            \"monomer_A\": (['Ar'], np.array([[0.0, 0.0, 0.0]])),\n            \"monomer_B\": (['Ar'], np.array([[3.8, 0.0, 0.0]])),\n        },\n        {\n            \"monomer_A\": (\n                ['C', 'H', 'H', 'H', 'H'],\n                np.array([\n                    [0.000, 0.000, 0.000],\n                    [0.000, 0.000, 1.089],\n                    [1.026719, 0.000000, -0.363000],\n                    [-0.513360, 0.889165, -0.363000],\n                    [-0.513360, -0.889165, -0.363000]\n                ])\n            ),\n            \"monomer_B\": (\n                ['C', 'H', 'H', 'H', 'H'],\n                np.array([\n                    [0.000, 0.000, 4.000],\n                    [0.000, 0.000, 4.000 + 1.089],\n                    [1.026719, 0.000000, 4.000 - 0.363000],\n                    [-0.513360, 0.889165, 4.000 - 0.363000],\n                    [-0.513360, -0.889165, 4.000 - 0.363000]\n                ])\n            ),\n        },\n        {\n            \"monomer_A\": get_benzene_geom(z_offset=0.0),\n            \"monomer_B\": get_benzene_geom(z_offset=3.5),\n        }\n    ]\n\n    def calculate_cn(atoms, coords_bohr):\n        \"\"\"Calculates coordination numbers for all atoms in a monomer.\"\"\"\n        n_atoms = len(atoms)\n        cns = np.zeros(n_atoms)\n        if n_atoms <= 1:\n            return cns\n        \n        dist_matrix = np.linalg.norm(coords_bohr[:, np.newaxis, :] - coords_bohr[np.newaxis, :, :], axis=2)\n        \n        for i in range(n_atoms):\n            cn_i = 0.0\n            for j in range(n_atoms):\n                if i == j:\n                    continue\n                \n                rcov_i = ELEMENT_DATA[atoms[i]]['rcov'] * ANGSTROM_TO_BOHR\n                rcov_j = ELEMENT_DATA[atoms[j]]['rcov'] * ANGSTROM_TO_BOHR\n                rcov_sum = rcov_i + rcov_j\n                rij = dist_matrix[i, j]\n                \n                if rij == 0: continue # Should not happen for i != j\n                \n                ratio = rcov_sum / rij\n                cn_i += 1.0 / (1.0 + math.exp(-K_CN * (ratio - 1.0)))\n            cns[i] = cn_i\n        return cns\n\n    def get_c6_coeffs(atoms, cns):\n        \"\"\"Calculates environment-dependent C6 coefficients.\"\"\"\n        c6_coeffs = np.zeros(len(atoms))\n        for i, atom_symbol in enumerate(atoms):\n            data = ELEMENT_DATA[atom_symbol]\n            cn_i = cns[i]\n            \n            cn_low = data['cn_low']\n            cn_high = data['cn_high']\n            \n            if cn_high == cn_low:\n                # Avoid division by zero, also C6_high == C6_low here.\n                x_clamped = 0.0\n            else:\n                x = (cn_i - cn_low) / (cn_high - cn_low)\n                x_clamped = max(0.0, min(1.0, x))\n            \n            c6_low = data['c6_low']\n            c6_high = data['c6_high']\n            \n            c6_coeffs[i] = c6_low + x_clamped * (c6_high - c_low)\n        return c6_coeffs\n\n    def calculate_dispersion_energy(monomer_A, monomer_B, use_env_dependent_c6):\n        \"\"\"Calculates the total inter-monomer dispersion energy.\"\"\"\n        atoms_A, coords_A_ang = monomer_A\n        atoms_B, coords_B_ang = monomer_B\n\n        coords_A_bohr = coords_A_ang * ANGSTROM_TO_BOHR\n        coords_B_bohr = coords_B_ang * ANGSTROM_TO_BOHR\n\n        cns_A = calculate_cn(atoms_A, coords_A_bohr)\n        cns_B = calculate_cn(atoms_B, coords_B_bohr)\n\n        if use_env_dependent_c6:\n            c6_A = get_c6_coeffs(atoms_A, cns_A)\n            c6_B = get_c6_coeffs(atoms_B, cns_B)\n        else:\n            c6_A = np.array([ELEMENT_DATA[atom]['c6_low'] for atom in atoms_A])\n            c6_B = np.array([ELEMENT_DATA[atom]['c6_low'] for atom in atoms_B])\n\n        total_energy_hartree = 0.0\n        \n        for i in range(len(atoms_A)):\n            for j in range(len(atoms_B)):\n                rij = np.linalg.norm(coords_A_bohr[i] - coords_B_bohr[j])\n                \n                # Pairwise C6 coefficient\n                c6_ij = math.sqrt(c6_A[i] * c6_B[j])\n                \n                # Damping function\n                rvdw_i = ELEMENT_DATA[atoms_A[i]]['rvdw'] * ANGSTROM_TO_BOHR\n                rvdw_j = ELEMENT_DATA[atoms_B[j]]['rvdw'] * ANGSTROM_TO_BOHR\n                r0_ij = SR_DAMP * (rvdw_i + rvdw_j)\n                \n                if r0_ij == 0: continue\n                \n                ratio = rij / r0_ij\n                if ratio == 0: continue # Should not happen between monomers\n\n                f_damp = 1.0 / (1.0 + 6.0 * (ratio ** -ALPHA_DAMP))\n                \n                # Pairwise energy\n                e_ij = -S6_FACTOR * f_damp * c6_ij / (rij ** 6)\n                total_energy_hartree += e_ij\n                \n        return total_energy_hartree * HARTREE_TO_KJ_MOL\n\n    results = []\n    for case in test_cases:\n        monomer_A = (case[\"monomer_A\"][0], case[\"monomer_A\"][1])\n        monomer_B = (case[\"monomer_B\"][0], case[\"monomer_B\"][1])\n        \n        e_indep = calculate_dispersion_energy(monomer_A, monomer_B, use_env_dependent_c6=False)\n        e_env = calculate_dispersion_energy(monomer_A, monomer_B, use_env_dependent_c6=True)\n        \n        if abs(e_indep) < 1e-12:\n            delta = 0.0\n        else:\n            delta = (e_env - e_indep) / abs(e_indep)\n        \n        results.append(delta)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2899243"}]}