{"hands_on_practices": [{"introduction": "在任何计算模拟中，理解所用参数的物理意义和量级都至关重要。本练习 [@problem_id:2878271] 聚焦于 Car-Parrinello 分子动力学中的两个核心参数：虚拟电子质量 $\\mu$ 和积分时间步长 $\\Delta t$。通过将它们从抽象的原子单位转换为更直观的飞秒（fs）和统一原子质量单位（u），你将掌握一项在设置模拟参数和与文献结果进行比较时不可或缺的基本技能。", "problem": "在 Car-Parrinello 分子动力学 (CPMD) 中，电子自由度被赋予一个虚构质量参数 $\\mu$，并以有限的时间步长 $\\Delta t$ 进行演化。考虑一个 CPMD 模拟，其中使用的虚构质量为 $\\mu = 400$ 原子单位（a.u.），时间步长为 $\\Delta t = 5$ 原子单位。从原子单位的基本定义出发，推导转换公式，将 $\\Delta t$ 以飞秒为单位表示，将 $\\mu$ 以统一原子质量单位为单位表示。然后进行数值转换。\n\n仅使用以下基本定义和常数作为基础：\n- 时间的原子单位是 $t_{\\mathrm{au}} \\equiv \\hbar / E_{\\mathrm{h}}$。\n- 质量的原子单位是 $m_{\\mathrm{au}} \\equiv m_{e}$。\n- 一飞秒是 $1\\,\\mathrm{fs} = 10^{-15}\\,\\mathrm{s}$。\n- 一统一原子质量单位是 $1\\,\\mathrm{u} = 1.66053906660 \\times 10^{-27}\\,\\mathrm{kg}$。\n- 约化普朗克常数：$\\hbar = 1.054571817 \\times 10^{-34}\\,\\mathrm{J\\,s}$。\n- 哈特里能量：$E_{\\mathrm{h}} = 4.3597447222071 \\times 10^{-18}\\,\\mathrm{J}$。\n- 电子质量：$m_{e} = 9.1093837015 \\times 10^{-31}\\,\\mathrm{kg}$。\n\n为评估合理性，许多 CPMD 研究报告指出，对于在 $300$–$800$ a.u. 范围内的 $\\mu$，只要保持绝热分离，稳定的时间步长通常在 $0.08$–$0.20\\,\\mathrm{fs}$ 的范围内。\n\n任务：\n1. 推导表达式，将任意时间步长 $\\Delta t_{\\mathrm{au}}$（以原子单位计）转换为飞秒，以及将任意虚构质量 $\\mu_{\\mathrm{au}}$（以原子单位计）转换为统一原子质量单位。\n2. 将您的公式应用于给定值 $\\Delta t_{\\mathrm{au}} = 5$ 和 $\\mu_{\\mathrm{au}} = 400$。\n3. 简要论证转换后的 $\\Delta t$ 对于给定的 $\\mu$ 是否与上述文献中的典型范围一致。\n4. 报告转换后的 $\\Delta t$（以飞秒为单位），并四舍五入到四位有效数字。以 $\\mathrm{fs}$ 为单位表示最终答案。\n\n最终的数值答案只需报告转换后的 $\\Delta t$；所有的推导过程和单位检查都应在您的推导过程中展示。", "solution": "目标是从原子单位的基本定义出发，将虚构电子质量参数 $\\mu$ 从原子单位转换为统一原子质量单位，并将时间步长 $\\Delta t$ 从原子单位转换为飞秒。\n\n根据定义，时间原子单位是\n$$\nt_{\\mathrm{au}} \\equiv \\frac{\\hbar}{E_{\\mathrm{h}}}.\n$$\n因此，任何以原子单位表示的时间步长 $\\Delta t_{\\mathrm{au}}$ 对应于一个物理时间\n$$\n\\Delta t = \\Delta t_{\\mathrm{au}} \\, t_{\\mathrm{au}} = \\Delta t_{\\mathrm{au}} \\, \\frac{\\hbar}{E_{\\mathrm{h}}}.\n$$\n为了以飞秒表示 $\\Delta t$，我们使用 $1\\,\\mathrm{fs} = 10^{-15}\\,\\mathrm{s}$ 并写出\n$$\n\\Delta t_{\\mathrm{fs}} = \\Delta t_{\\mathrm{au}} \\, \\frac{\\hbar}{E_{\\mathrm{h}}} \\times \\frac{1}{10^{-15}}.\n$$\n代入给定的常数，\n$$\nt_{\\mathrm{au}} = \\frac{\\hbar}{E_{\\mathrm{h}}} = \\frac{1.054571817 \\times 10^{-34}\\,\\mathrm{J\\,s}}{4.3597447222071 \\times 10^{-18}\\,\\mathrm{J}} = 2.4188843265857 \\times 10^{-17}\\,\\mathrm{s}.\n$$\n因此，\n$$\nt_{\\mathrm{au}} = 2.4188843265857 \\times 10^{-17}\\,\\mathrm{s} = 0.024188843265857\\,\\mathrm{fs}.\n$$\n对于给定的 $\\Delta t_{\\mathrm{au}} = 5$，\n$$\n\\Delta t_{\\mathrm{fs}} = 5 \\times 0.024188843265857 = 0.120944216329285\\,\\mathrm{fs}.\n$$\n\n接下来，对于虚构质量参数，质量的原子单位定义为\n$$\nm_{\\mathrm{au}} \\equiv m_{e}.\n$$\n因此，一个以原子单位表示的虚构质量 $\\mu_{\\mathrm{au}}$ 对应于一个物理质量\n$$\n\\mu = \\mu_{\\mathrm{au}} \\, m_{e}.\n$$\n为了以统一原子质量单位表示 $\\mu$，使用 $1\\,\\mathrm{u} = 1.66053906660 \\times 10^{-27}\\,\\mathrm{kg}$。因此，\n$$\n\\mu_{\\mathrm{u}} = \\frac{\\mu}{1\\,\\mathrm{u}} = \\mu_{\\mathrm{au}} \\, \\frac{m_{e}}{1\\,\\mathrm{u}}.\n$$\n当 $\\mu_{\\mathrm{au}} = 400$ 时，\n$$\n\\mu = 400 \\times 9.1093837015 \\times 10^{-31}\\,\\mathrm{kg} = 3.6437534806 \\times 10^{-28}\\,\\mathrm{kg},\n$$\n并且\n$$\n\\mu_{\\mathrm{u}} = \\frac{3.6437534806 \\times 10^{-28}}{1.66053906660 \\times 10^{-27}} = 0.219432.\n$$\n等效地，使用已知比率 $m_{e} = 5.48579909065 \\times 10^{-4}\\,\\mathrm{u}$，\n$$\n\\mu_{\\mathrm{u}} = 400 \\times 5.48579909065 \\times 10^{-4} = 0.219431963626,\n$$\n这与上面的直接除法结果一致。\n\n与文献进行一致性检查：对于在 $300$–$800$ a.u. 范围内的 $\\mu$，文献报道的稳定时间步长通常在 $0.08$–$0.20\\,\\mathrm{fs}$ 范围内。我们转换得到的值 $\\Delta t_{\\mathrm{fs}} \\approx 0.120944216329285\\,\\mathrm{fs}$ 完全落在此范围内，这与典型的 CPMD 实践以及绝热分离的要求是一致的。\n\n最后，将 $\\Delta t_{\\mathrm{fs}}$ 四舍五入到四位有效数字，得到\n$$\n\\Delta t_{\\mathrm{fs}} = 0.1209\\,\\mathrm{fs}.\n$$", "answer": "$$\\boxed{0.1209}$$", "id": "2878271"}, {"introduction": "在确定了模拟参数的物理尺度后，我们必须考虑数值积分的稳定性。本练习 [@problem_id:2626844] 深入探讨了 CPMD 方法的数值核心，要求你为最快的电子模式推导出能维持积分稳定的最大时间步长。理解这一极限对于防止模拟发散（即“爆炸”）至关重要，并且有助于你体会选择模拟参数时所做的权衡。", "problem": "在Car–Parrinello分子动力学 (CPMD) 中，电子自由度被赋予一个虚拟惯量，使其根据二阶运动方程进行演化。在绝热基态子空间附近，最快的电子简正模式可以被建模为一个角频率为 $\\,\\omega_{e}^{\\max}\\,$ 的标量谐振子。假设此模式的运动方程简化为\n$$\n\\ddot{q}(t) + \\omega^{2} q(t) = 0,\n$$\n其中 $\\,\\omega = \\omega_{e}^{\\max}\\,$。位置使用标准的速度–Verlet（等效于中心差分）格式，以恒定时间步长 $\\,\\Delta t\\,$ 进行时间推进。\n\n从该谐振子模型和对速度–Verlet算法所隐含的离散更新进行线性稳定性分析出发，确定能使最快电子模式的离散轨迹保持有界的最大时间步长 $\\,\\Delta t_{\\max}\\,$。然后，对于一个估计的最快电子角频率为 $\\,\\omega_{e}^{\\max} = 25\\,\\mathrm{rad\\,fs^{-1}}\\,$ 的系统，计算 $\\,\\Delta t_{\\max}\\,$ 的相应数值。\n\n请以飞秒为单位表达最终数值答案，并四舍五入至三位有效数字。", "solution": "该问题要求对应用于简谐振子的速度-Verlet积分算法进行线性稳定性分析。此模型代表了Car-Parrinello模拟中最快的电子模式。该模式的控制方程为：\n$$\n\\ddot{q}(t) + \\omega^{2} q(t) = 0\n$$\n其中 $\\omega = \\omega_{e}^{\\max}$ 是振子的角频率。\n\n对于位置坐标，速度-Verlet算法在数学上等效于二阶中心差分格式。这为稳定性分析提供了最直接的方法。我们用一个恒定的时间步长 $\\Delta t$ 将时域离散化，将时间 $t_n = n \\Delta t$ 处的位置记为 $q_n = q(t_n)$。在时间 $t_n$ 处的二阶导数 $\\ddot{q}(t)$ 由中心差分公式近似：\n$$\n\\ddot{q}(t_n) \\approx \\frac{q(t_{n+1}) - 2q(t_n) + q(t_{n-1})}{(\\Delta t)^{2}} = \\frac{q_{n+1} - 2q_n + q_{n-1}}{(\\Delta t)^{2}}\n$$\n将此近似代入连续运动方程，其中 $\\ddot{q}(t_n) = -\\omega^{2}q(t_n)$，我们得到离散递推关系：\n$$\n\\frac{q_{n+1} - 2q_n + q_{n-1}}{(\\Delta t)^{2}} = -\\omega^{2} q_n\n$$\n重排该方程得到一个在时间上传播位置的规则：\n$$\nq_{n+1} = 2q_n - q_{n-1} - (\\omega \\Delta t)^{2} q_n\n$$\n$$\nq_{n+1} = (2 - (\\omega \\Delta t)^{2}) q_n - q_{n-1}\n$$\n为了分析这个二阶递推关系所生成的轨迹的稳定性，我们将其改写为一阶矩阵形式。我们定义第 $n$ 步的状态向量为 $\\mathbf{x}_n = \\begin{pmatrix} q_n \\\\ q_{n-1} \\end{pmatrix}$。那么，下一步的状态 $\\mathbf{x}_{n+1} = \\begin{pmatrix} q_{n+1} \\\\ q_n \\end{pmatrix}$ 与 $\\mathbf{x}_n$ 通过一个由转移矩阵 $\\mathbf{T}$ 定义的线性变换相关联：\n$$\n\\mathbf{x}_{n+1} = \\begin{pmatrix} 2 - (\\omega \\Delta t)^{2} & -1 \\\\ 1 & 0 \\end{pmatrix} \\mathbf{x}_n = \\mathbf{T} \\mathbf{x}_n\n$$\n当且仅当转移矩阵 $\\mathbf{T}$ 的特征值 $\\lambda$ 的模长不超过1（即 $|\\lambda| \\le 1$）时，轨迹 $\\{q_n\\}$ 对于所有初始条件都保持有界。如果任何特征值的模长大于1，解将呈指数增长，导致不稳定、无界的轨迹。\n\n$\\mathbf{T}$ 的特征值可以通过求解特征方程 $\\det(\\mathbf{T} - \\lambda \\mathbf{I}) = 0$ 找到：\n$$\n\\det \\begin{pmatrix} 2 - (\\omega \\Delta t)^{2} - \\lambda & -1 \\\\ 1 & -\\lambda \\end{pmatrix} = 0\n$$\n$$\n(-\\lambda)(2 - (\\omega \\Delta t)^{2} - \\lambda) - (-1)(1) = 0\n$$\n$$\n\\lambda^{2} - (2 - (\\omega \\Delta t)^{2}) \\lambda + 1 = 0\n$$\n这个二次方程两根之积为1。要使两根的模长都小于或等于1，它们必须是位于复平面单位圆上的共轭复数（或者两根都是 $1$ 或 $-1$）。当且仅当该二次方程的判别式为非正时，此条件才成立。\n$$\n\\text{Discriminant} = (2 - (\\omega \\Delta t)^{2})^{2} - 4 \\cdot 1 \\cdot 1 \\le 0\n$$\n$$\n(2 - (\\omega \\Delta t)^{2})^{2} \\le 4\n$$\n两边取平方根，我们得到：\n$$\n|2 - (\\omega \\Delta t)^{2}| \\le 2\n$$\n这个绝对值不等式等价于复合不等式：\n$$\n-2 \\le 2 - (\\omega \\Delta t)^{2} \\le 2\n$$\n我们分别分析这个不等式的两部分。\n1. 右边部分：$2 - (\\omega \\Delta t)^{2} \\le 2 \\implies -(\\omega \\Delta t)^{2} \\le 0 \\implies (\\omega \\Delta t)^{2} \\ge 0$。对于实数 $\\omega$ 和 $\\Delta t$，此式恒成立。\n2. 左边部分：$-2 \\le 2 - (\\omega \\Delta t)^{2} \\implies (\\omega \\Delta t)^{2} \\le 4$。\n\n这个最终条件 $(\\omega \\Delta t)^{2} \\le 4$ 决定了算法的稳定性。由于 $\\omega$ 和 $\\Delta t$ 均为正值，我们可以取正平方根：\n$$\n\\omega \\Delta t \\le 2\n$$\n为了确保电子子系统数值积分的整体稳定性，此不等式必须对系统中角频率为 $\\omega = \\omega_{e}^{\\max}$ 的最快模式成立。因此，时间步长 $\\Delta t$ 必须满足：\n$$\n\\Delta t \\le \\frac{2}{\\omega_{e}^{\\max}}\n$$\n因此，保证轨迹有界的最大时间步长 $\\Delta t_{\\max}$ 位于此稳定区域的边界上：\n$$\n\\Delta t_{\\max} = \\frac{2}{\\omega_{e}^{\\max}}\n$$\n问题给出的数值为 $\\omega_{e}^{\\max} = 25\\,\\mathrm{rad\\,fs^{-1}}$。我们现在可以计算 $\\Delta t_{\\max}$：\n$$\n\\Delta t_{\\max} = \\frac{2}{25} \\, \\mathrm{fs} = 0.08 \\, \\mathrm{fs}\n$$\n问题要求答案以飞秒为单位表示，并四舍五入到三位有效数字。\n$$\n\\Delta t_{\\max} = 0.0800 \\, \\mathrm{fs}\n$$\n这个结果是速度-Verlet算法应用于无阻尼谐振子时众所周知的稳定性极限。", "answer": "$$\n\\boxed{0.0800}\n$$", "id": "2626844"}, {"introduction": "最后，我们将参数选择与绝热近似这一核心物理原则直接联系起来。这个编程练习 [@problem_id:2451945] 让你亲身体验当电子与离子子系统之间的绝热分离被破坏时会发生什么。通过模拟一个简化模型并观察在不同虚拟质量 $\\mu$ 设置下能量是如何在子系统间传递的，你将对为何正确选择参数是保证 CPMD 模拟有效性的关键，获得一个直观的认识。", "problem": "考虑一个 Car-Parrinello 分子动力学 (CPMD) 的一维玩具模型，该模型具有一个质量为 $M$ 的单一离子坐标 $R(t)$ 和一个虚拟质量为 $\\mu$ 的单一电子虚拟坐标 $c(t)$。该系统由以下拉格朗日量描述\n$$\nL = \\frac{M}{2}\\,\\dot{R}^2 + \\frac{\\mu}{2}\\,\\dot{c}^2 - \\left[\\frac{k}{2}\\,(R - R_0)^2 + \\frac{k_e}{2}\\,(c - R)^2\\right].\n$$\n假设全文使用原子单位 (Hartree 原子单位)：位置以玻尔 (bohr) 为单位，质量以电子质量为单位，时间以原子时间单位为单位，能量以哈特里 (hartree) 为单位。参数值固定为 $M = 10$，$k = 1$，$k_e = 50$ 以及 $R_0 = 0$。初始条件为 $R(0) = 1$，$\\dot{R}(0) = 0$，$c(0) = 0$ 以及 $\\dot{c}(0) = 0$。\n\n令离子 Born–Oppenheimer 能量定义为\n$$\nE_{\\mathrm{BO}}(t) = \\frac{M}{2}\\,\\dot{R}(t)^2 + \\frac{k}{2}\\,\\big(R(t) - R_0\\big)^2,\n$$\n电子-离子失配为 $m(t) = c(t) - R(t)$。\n\n您的任务是实现一个程序，对于每个给定的参数集 $(\\mu, \\Delta t, T)$，使用均匀时间步长 $\\Delta t$ 在时间区间 $[0, T]$ 上模拟由上述拉格朗日量的 Euler–Lagrange 方程所控制的动力学过程，并计算以下三个诊断量：\n- 离子 Born–Oppenheimer 能量漂移 $\\Delta E_{\\mathrm{BO}} = E_{\\mathrm{BO}}(T) - E_{\\mathrm{BO}}(0)$，以哈特里 (hartree) 为单位报告。\n- 最大绝对离子位移 $D_{\\max} = \\max_{t \\in [0,T]} |R(t) - R_0|$，以玻尔 (bohr) 为单位报告。\n- 均方失配 $M_2 = \\frac{1}{N}\\sum_{i=0}^{N-1} m(t_i)^2$，其中 $t_i$ 是均匀间隔的模拟时间点，以玻尔$^2$ (bohr$^2$) 为单位报告。\n\n测试套件包含以下四个案例，每个案例以 $(\\mu, \\Delta t, T)$ 的形式给出：\n- 案例 A: $(0.1, 0.01, 50.0)$\n- 案例 B: $(10.0, 0.01, 50.0)$\n- 案例 C: $(50.0, 0.01, 50.0)$\n- 案例 D: $(125.0, 0.01, 50.0)$\n\n所有量都必须使用原子单位。您的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表形式的结果，每个测试案例贡献一个包含三个浮点数的子列表，顺序为 $[\\Delta E_{\\mathrm{BO}}, D_{\\max}, M_2]$。例如，输出格式必须为\n$$\n\\big[\\,[\\Delta E_{\\mathrm{BO}}^{(A)}, D_{\\max}^{(A)}, M_2^{(A)}], [\\Delta E_{\\mathrm{BO}}^{(B)}, D_{\\max}^{(B)}, M_2^{(B)}], [\\Delta E_{\\mathrm{BO}}^{(C)}, D_{\\max}^{(C)}, M_2^{(C)}], [\\Delta E_{\\mathrm{BO}}^{(D)}, D_{\\max}^{(D)}, M_2^{(D)}]\\,\\big].\n$$\n不应打印任何额外文本。数值必须以原子单位的标准十进制浮点数形式报告。", "solution": "问题的核心是使用数值积分方法求解从给定拉格朗日量导出的运动方程。对于具有离子坐标 $R(t)$ 和虚拟电子坐标 $c(t)$ 的一维系统，其拉格朗日量为：\n$$\nL = \\frac{M}{2}\\,\\dot{R}^2 + \\frac{\\mu}{2}\\,\\dot{c}^2 - V(R, c)\n$$\n其中势能 $V(R, c)$ 由下式给出：\n$$\nV(R, c) = \\frac{k}{2}\\,(R - R_0)^2 + \\frac{k_e}{2}\\,(c - R)^2\n$$\n动力学过程由 Euler-Lagrange 方程 $\\frac{d}{dt}\\left(\\frac{\\partial L}{\\partial \\dot{q}}\\right) - \\frac{\\partial L}{\\partial q} = 0$ 控制，其中 $q \\in \\{R, c\\}$。\n\n对于离子坐标 $R(t)$：\n偏导数为：\n$$\n\\frac{\\partial L}{\\partial \\dot{R}} = M\\dot{R}\n$$\n$$\n\\frac{\\partial L}{\\partial R} = -\\frac{\\partial V}{\\partial R} = -\\left[ k(R - R_0) - k_e(c - R) \\right] = -k(R - R_0) + k_e(c - R)\n$$\n这得到第一个运动方程：\n$$\nM\\ddot{R} = -k(R - R_0) + k_e(c - R)\n$$\n\n对于电子坐标 $c(t)$：\n偏导数为：\n$$\n\\frac{\\partial L}{\\partial \\dot{c}} = \\mu\\dot{c}\n$$\n$$\n\\frac{\\partial L}{\\partial c} = -\\frac{\\partial V}{\\partial c} = -\\left[ k_e(c - R) \\right] = -k_e(c - R)\n$$\n这得到第二个运动方程：\n$$\n\\mu\\ddot{c} = -k_e(c - R)\n$$\n\n这两个耦合的二阶常微分方程可以进行数值求解。我们将每个坐标上的力定义为 $F_R = M\\ddot{R}$ 和 $F_c = \\mu\\ddot{c}$。那么加速度为 $a_R(t) = F_R/M$ 和 $a_c(t) = F_c/\\mu$：\n$$\na_R(t) = \\frac{1}{M}\\left[-k(R(t) - R_0) + k_e(c(t) - R(t))\\right]\n$$\n$$\na_c(t) = \\frac{1}{\\mu}\\left[-k_e(c(t) - R(t))\\right]\n$$\n\n为了在时间区间 $[0, T]$ 上以时间步长 $\\Delta t$ 从初始状态 $(R(0), \\dot{R}(0), c(0), \\dot{c}(0))$ 对这些运动方程进行积分，我们将采用 Velocity Verlet 算法。这种常见的辛积分器因其良好的能量守恒特性而非常适合分子动力学模拟。对于一个通用坐标 $x(t)$、其速度 $v(t)$ 和加速度 $a(t)$，该算法的一个步骤如下：\n1.  将速度更新半步：$v(t + \\Delta t/2) = v(t) + a(t) \\frac{\\Delta t}{2}$。\n2.  将位置更新一步：$x(t + \\Delta t) = x(t) + v(t + \\Delta t/2) \\Delta t$。\n3.  使用新位置 $x(t + \\Delta t)$ 计算新的加速度 $a(t + \\Delta t)$。\n4.  将速度更新一步：$v(t + \\Delta t) = v(t + \\Delta t/2) + a(t + \\Delta t) \\frac{\\Delta t}{2}$。\n\n该算法在每个时间步同时应用于坐标 $R$ 和 $c$。模拟开始时，根据初始位置 $R(0)$ 和 $c(0)$ 计算初始加速度 $a_R(0)$ 和 $a_c(0)$。然后，循环进行 $N_{steps} = \\text{int}(T/\\Delta t)$ 步。\n\n在模拟过程中，我们计算三个所需的诊断量：\n1.  **离子 Born–Oppenheimer 能量漂移, $\\Delta E_{\\mathrm{BO}}$**：\n    它定义为 $\\Delta E_{\\mathrm{BO}} = E_{\\mathrm{BO}}(T) - E_{\\mathrm{BO}}(0)$。初始能量 $E_{\\mathrm{BO}}(0)$ 使用初始条件计算得出：\n    $$\n    E_{\\mathrm{BO}}(0) = \\frac{M}{2}\\,\\dot{R}(0)^2 + \\frac{k}{2}\\,\\big(R(0) - R_0\\big)^2 = \\frac{10}{2}\\,(0)^2 + \\frac{1}{2}\\,(1 - 0)^2 = 0.5 \\text{ hartree}\n    $$\n    最终能量 $E_{\\mathrm{BO}}(T) = \\frac{M}{2}\\,\\dot{R}(T)^2 + \\frac{k}{2}\\,\\big(R(T) - R_0\\big)^2$ 是使用模拟结束时的位置 $R(T)$ 和速度 $\\dot{R}(T)$ 计算的。\n\n2.  **最大绝对离子位移, $D_{\\max}$**：\n    这是 $D_{\\max} = \\max_{t \\in [0,T]} |R(t) - R_0|$。由于 $R_0 = 0$，这便是 $\\max_{t \\in [0,T]} |R(t)|$。我们初始化一个变量 $D_{\\max} = |R(0)|$，并在每个时间步 $t_i$ 用 $\\max(D_{\\max}, |R(t_i)|)$ 对其进行更新。\n\n3.  **均方失配, $M_2$**：\n    它定义为 $M_2 = \\frac{1}{N}\\sum_{i=0}^{N-1} m(t_i)^2$。我们将其解释为在模拟轨迹的所有离散时间点上（从 $t_0=0$ 到 $t_{N_{steps}}=T$），失配平方 $m(t)^2 = (c(t) - R(t))^2$ 的时间平均值。总点数为 $N_{points} = N_{steps} + 1$。因此，公式为：\n    $$\n    M_2 = \\frac{1}{N_{steps}+1}\\sum_{i=0}^{N_{steps}} \\left(c(t_i) - R(t_i)\\right)^2\n    $$\n    在整个模拟过程中，维持一个 $(c(t_i) - R(t_i))^2$ 的动态和，并在最后除以总点数。\n\n固定参数为 $M = 10$，$k = 1$，$k_e = 50$ 和 $R_0 = 0$。初始条件为 $R(0) = 1$，$\\dot{R}(0) = 0$，$c(0) = 0$ 和 $\\dot{c}(0) = 0$。对每个测试案例 $(\\mu, \\Delta t, T)$ 运行模拟，以获得相应的诊断量。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef simulate(mu, dt, T):\n    \"\"\"\n    Simulates the 1D Car-Parrinello toy model and computes diagnostics.\n\n    Args:\n        mu (float): The fictitious electronic mass.\n        dt (float): The time step for numerical integration.\n        T (float): The total simulation time.\n\n    Returns:\n        list: A list containing [delta_E_BO, D_max, M_2].\n    \"\"\"\n    # Fixed parameters in atomic units\n    M = 10.0\n    k = 1.0\n    ke = 50.0\n    R0_eq = 0.0\n\n    # Initial conditions in atomic units\n    R = 1.0\n    R_dot = 0.0\n    c = 0.0\n    c_dot = 0.0\n\n    # To ensure the number of steps is correct even with floating point inaccuracies\n    num_steps = int(round(T / dt))\n\n    # Calculate initial Born-Oppenheimer energy\n    E_BO_initial = 0.5 * M * R_dot**2 + 0.5 * k * (R - R0_eq)**2\n\n    # Initialize diagnostics\n    # D_max: Maximum absolute ionic displacement\n    max_displacement = abs(R - R0_eq)\n    # M_2: Mean-squared mismatch\n    sum_sq_mismatch = (c - R)**2\n    num_points = 1\n\n    # Initial accelerations\n    a_R = (-k * (R - R0_eq) + ke * (c - R)) / M\n    a_c = (-ke * (c - R)) / mu\n\n    # Main simulation loop using Velocity Verlet algorithm\n    for _ in range(num_steps):\n        # 1. Update velocities to half-step\n        R_dot_half = R_dot + 0.5 * a_R * dt\n        c_dot_half = c_dot + 0.5 * a_c * dt\n\n        # 2. Update positions to full-step\n        R = R + R_dot_half * dt\n        c = c + c_dot_half * dt\n\n        # 3. Compute new accelerations at the new positions\n        a_R = (-k * (R - R0_eq) + ke * (c - R)) / M\n        a_c = (-ke * (c - R)) / mu\n\n        # 4. Update velocities to full-step\n        R_dot = R_dot_half + 0.5 * a_R * dt\n        c_dot = c_dot_half + 0.5 * a_c * dt\n\n        # Update diagnostics at each step\n        max_displacement = max(max_displacement, abs(R - R0_eq))\n        sum_sq_mismatch += (c - R)**2\n        num_points += 1\n\n    # Calculate final Born-Oppenheimer energy\n    E_BO_final = 0.5 * M * R_dot**2 + 0.5 * k * (R - R0_eq)**2\n\n    # Finalize diagnostic calculations\n    delta_E_BO = E_BO_final - E_BO_initial\n    mean_sq_mismatch = sum_sq_mismatch / num_points\n\n    return [delta_E_BO, max_displacement, mean_sq_mismatch]\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (mu, delta_t, T)\n    test_cases = [\n        (0.1, 0.01, 50.0),   # Case A\n        (10.0, 0.01, 50.0),  # Case B\n        (50.0, 0.01, 50.0),  # Case C\n        (125.0, 0.01, 50.0), # Case D\n    ]\n\n    results = []\n    for case in test_cases:\n        mu, delta_t, T_final = case\n        result = simulate(mu, delta_t, T_final)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    # The default str() representation of a list of lists matches the format\n    # `[[val1, val2, ...], [val1, val2, ...]]`\n    # including spaces after commas inside the sublists.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2451945"}]}