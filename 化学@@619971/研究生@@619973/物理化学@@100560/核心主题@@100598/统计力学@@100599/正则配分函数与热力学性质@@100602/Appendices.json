{"hands_on_practices": [{"introduction": "本练习将引导您完成统计力学中最基本的计算之一。通过推导量子谐振子的配分函数，您将看到我们如何直接从微观能谱计算宏观热力学性质，如平均能量和热容。该模型是理解分子和固体中振动的基石。[@problem_id:2671874]", "problem": "一个角频率为 $\\omega$ 的非简并一维量子谐振子与温度为 $T$ 的热浴处于热平衡状态，因此可用正则系综描述。其精确能谱为 $\\varepsilon_{n}=\\hbar\\omega\\left(n+\\tfrac{1}{2}\\right)$，其中 $n\\in\\{0,1,2,\\dots\\}$，$\\hbar$ 是约化普朗克常数。令 $\\beta\\equiv 1/\\left(k_{B}T\\right)$，其中 $k_{B}$ 是玻尔兹曼常数。\n\n从正则分子配分函数的基本定义 $q=\\sum_{n=0}^{\\infty}\\exp\\left(-\\beta\\varepsilon_{n}\\right)$ 以及连接正则系综热力学可观测量与配分函数导数的标准关系式出发，完成以下任务：\n\n- 推导该振子振动正则配分函数 $q_{\\text{vib}}$ 的闭合形式表达式，使其作为 $\\beta$、$\\hbar$ 和 $\\omega$ 的显式函数。\n- 推导精确的热平均能量 $\\langle E\\rangle$。\n- 推导其定容热容（CV）$C_{V}(T)$。\n\n您的推导必须从正则系综的第一性原理出发，并可在适当之处使用经过充分验证的数学结论，例如几何级数的收敛性与求和公式。将所有最终结果以 $\\beta$、$k_{B}$、$\\hbar$ 和 $\\omega$ 表示为闭合形式。不要进行任何高温或低温近似。不要计算任何数值。以单个有序三元组 $\\left(q_{\\text{vib}},\\langle E\\rangle, C_{V}(T)\\right)$ 的形式报告您的最终结果。由于最终结果为符号形式，因此无需指明单位。", "solution": "所述问题在科学上是合理的、自洽的且表述清晰。这是一个平衡统计力学中的标准基础练习，可以从第一性原理求解。我们开始进行推导。\n\n该系统是一个单一的一维量子谐振子，其分立能级由表达式 $\\varepsilon_{n}=\\hbar\\omega\\left(n+\\frac{1}{2}\\right)$ 给出，其中 $n \\in \\{0, 1, 2, \\dots\\}$。该振子与温度为 $T$ 的热浴处于热平衡状态。此类系统的统计性质由正则系综描述。\n\n首先，我们推导振动正则配分函数 $q_{\\text{vib}}$。根据定义，配分函数是对所有可能状态的玻尔兹曼因子 $\\exp(-\\beta \\varepsilon_{n})$ 求和，其中 $\\beta = \\frac{1}{k_{B}T}$。\n$$q_{\\text{vib}} = \\sum_{n=0}^{\\infty} \\exp(-\\beta \\varepsilon_{n})$$\n代入给定的能谱：\n$$q_{\\text{vib}} = \\sum_{n=0}^{\\infty} \\exp\\left(-\\beta \\hbar\\omega\\left(n+\\frac{1}{2}\\right)\\right)$$\n我们可以将指数项分离为两个因子：\n$$q_{\\text{vib}} = \\sum_{n=0}^{\\infty} \\exp(-\\beta \\hbar\\omega n) \\exp\\left(-\\frac{\\beta \\hbar\\omega}{2}\\right)$$\n项 $\\exp\\left(-\\frac{\\beta \\hbar\\omega}{2}\\right)$ 是零点能的贡献，并且与求和指数 $n$ 无关。它可以从求和中提取出来：\n$$q_{\\text{vib}} = \\exp\\left(-\\frac{\\beta \\hbar\\omega}{2}\\right) \\sum_{n=0}^{\\infty} \\exp(-\\beta \\hbar\\omega n)$$\n求和内部的项可以重写为 $\\left(\\exp(-\\beta \\hbar\\omega)\\right)^{n}$。现在，该求和可以看作是形式为 $\\sum_{n=0}^{\\infty} x^{n}$ 的无穷几何级数，其中 $x = \\exp(-\\beta \\hbar\\omega)$。为使级数收敛，我们要求 $|x|<1$。由于 $\\beta$、$\\hbar$ 和 $\\omega$ 都是正的物理量，我们有 $0 < \\exp(-\\beta \\hbar\\omega) < 1$，因此该条件得到满足。这种级数的和为 $\\frac{1}{1-x}$。\n应用这个结果，级数和为：\n$$\\sum_{n=0}^{\\infty} \\left(\\exp(-\\beta \\hbar\\omega)\\right)^{n} = \\frac{1}{1 - \\exp(-\\beta \\hbar\\omega)}$$\n将此结果代回 $q_{\\text{vib}}$ 的表达式，得到振动配分函数的闭合形式表达式：\n$$q_{\\text{vib}} = \\frac{\\exp\\left(-\\frac{\\beta \\hbar\\omega}{2}\\right)}{1 - \\exp(-\\beta \\hbar\\omega)}$$\n\n其次，我们推导热平均能量 $\\langle E\\rangle$。在正则系综中，平均能量通过以下基本关系式与配分函数相关联：\n$$\\langle E \\rangle = -\\left(\\frac{\\partial \\ln q_{\\text{vib}}}{\\partial \\beta}\\right)_{V}$$\n首先，我们求得配分函数的自然对数：\n$$\\ln q_{\\text{vib}} = \\ln\\left(\\frac{\\exp\\left(-\\frac{\\beta \\hbar\\omega}{2}\\right)}{1 - \\exp(-\\beta \\hbar\\omega)}\\right) = \\ln\\left(\\exp\\left(-\\frac{\\beta \\hbar\\omega}{2}\\right)\\right) - \\ln\\left(1 - \\exp(-\\beta \\hbar\\omega)\\right)$$\n$$\\ln q_{\\text{vib}} = -\\frac{\\beta \\hbar\\omega}{2} - \\ln\\left(1 - \\exp(-\\beta \\hbar\\omega)\\right)$$\n现在，我们将此表达式对 $\\beta$ 求导：\n$$\\frac{\\partial \\ln q_{\\text{vib}}}{\\partial \\beta} = \\frac{\\partial}{\\partial \\beta}\\left(-\\frac{\\beta \\hbar\\omega}{2}\\right) - \\frac{\\partial}{\\partial \\beta}\\left(\\ln\\left(1 - \\exp(-\\beta \\hbar\\omega)\\right)\\right)$$\n$$\\frac{\\partial \\ln q_{\\text{vib}}}{\\partial \\beta} = -\\frac{\\hbar\\omega}{2} - \\frac{1}{1 - \\exp(-\\beta \\hbar\\omega)} \\cdot \\left(-\\exp(-\\beta \\hbar\\omega)\\right) \\cdot (-\\hbar\\omega)$$\n$$\\frac{\\partial \\ln q_{\\text{vib}}}{\\partial \\beta} = -\\frac{\\hbar\\omega}{2} - \\frac{\\hbar\\omega \\exp(-\\beta \\hbar\\omega)}{1 - \\exp(-\\beta \\hbar\\omega)}$$\n将此结果代入 $\\langle E \\rangle$ 的公式：\n$$\\langle E \\rangle = -\\left(-\\frac{\\hbar\\omega}{2} - \\frac{\\hbar\\omega \\exp(-\\beta \\hbar\\omega)}{1 - \\exp(-\\beta \\hbar\\omega)}\\right) = \\frac{\\hbar\\omega}{2} + \\frac{\\hbar\\omega \\exp(-\\beta \\hbar\\omega)}{1 - \\exp(-\\beta \\hbar\\omega)}$$\n为得到更标准的形式，我们可以将第二项的分子和分母同乘以 $\\exp(\\beta\\hbar\\omega)$：\n$$\\langle E \\rangle = \\frac{\\hbar\\omega}{2} + \\frac{\\hbar\\omega}{\\exp(\\beta \\hbar\\omega) - 1}$$\n该表达式正确地包含了零点能 $\\frac{\\hbar\\omega}{2}$ 和用于热激发能的普朗克分布。\n\n第三，我们推导定容热容 $C_{V}$。热容定义为定容条件下平均能量对温度的导数：\n$$C_{V} = \\left(\\frac{\\partial \\langle E \\rangle}{\\partial T}\\right)_{V}$$\n使用链式法则并结合 $\\beta = \\frac{1}{k_{B}T}$，计算会更直接。\n$$C_{V} = \\left(\\frac{\\partial \\langle E \\rangle}{\\partial \\beta}\\right)_{V} \\frac{d\\beta}{dT}$$\n$\\beta$ 对 $T$ 的导数是：\n$$\\frac{d\\beta}{dT} = \\frac{d}{dT}\\left(\\frac{1}{k_{B}T}\\right) = -\\frac{1}{k_{B}T^{2}} = -k_{B}\\beta^{2}$$\n现在，我们将 $\\langle E \\rangle$ 的表达式对 $\\beta$ 求导：\n$$\\frac{\\partial \\langle E \\rangle}{\\partial \\beta} = \\frac{\\partial}{\\partial \\beta}\\left(\\frac{\\hbar\\omega}{2} + \\frac{\\hbar\\omega}{\\exp(\\beta \\hbar\\omega) - 1}\\right)$$\n常数项零点能的导数为零。我们关注第二项：\n$$\\frac{\\partial}{\\partial \\beta}\\left(\\hbar\\omega\\left(\\exp(\\beta \\hbar\\omega) - 1\\right)^{-1}\\right) = \\hbar\\omega \\cdot (-1)\\left(\\exp(\\beta \\hbar\\omega) - 1\\right)^{-2} \\cdot \\frac{\\partial}{\\partial \\beta}\\left(\\exp(\\beta \\hbar\\omega) - 1\\right)$$\n$$= -\\hbar\\omega\\left(\\exp(\\beta \\hbar\\omega) - 1\\right)^{-2} \\cdot \\left(\\hbar\\omega \\exp(\\beta \\hbar\\omega)\\right)$$\n$$= -(\\hbar\\omega)^{2} \\frac{\\exp(\\beta \\hbar\\omega)}{\\left(\\exp(\\beta \\hbar\\omega) - 1\\right)^{2}}$$\n现在我们将各部分组合起来求 $C_{V}$：\n$$C_{V} = \\left(-(\\hbar\\omega)^{2} \\frac{\\exp(\\beta \\hbar\\omega)}{\\left(\\exp(\\beta \\hbar\\omega) - 1\\right)^{2}}\\right) \\cdot (-k_{B}\\beta^{2})$$\n$$C_{V}(T) = k_{B} (\\beta \\hbar\\omega)^{2} \\frac{\\exp(\\beta \\hbar\\omega)}{\\left(\\exp(\\beta \\hbar\\omega) - 1\\right)^{2}}$$\n这就是量子谐振子热容的最终表达式。\n\n最终结果是有序三元组 $\\left(q_{\\text{vib}}, \\langle E\\rangle, C_{V}(T)\\right)$。", "answer": "$$ \\boxed{ \\begin{pmatrix} \\frac{\\exp\\left(-\\frac{\\beta\\hbar\\omega}{2}\\right)}{1 - \\exp(-\\beta\\hbar\\omega)} & \\frac{\\hbar\\omega}{2} + \\frac{\\hbar\\omega}{\\exp(\\beta\\hbar\\omega) - 1} & k_{B} (\\beta\\hbar\\omega)^{2} \\frac{\\exp(\\beta\\hbar\\omega)}{\\left(\\exp(\\beta\\hbar\\omega) - 1\\right)^{2}} \\end{pmatrix} } $$", "id": "2671874"}, {"introduction": "在对离散态求和的概念基础上，本练习探讨了平移运动的正则配分函数，该运动由一维盒子中的粒子模型描述。主要目标是理解并推导其高温（经典）极限，这提供了一个具体的例子，说明了离散的量子求和如何过渡到连续的经典积分。这个练习完美地诠释了统计力学中的对应原理。[@problem_id:2671883]", "problem": "一个质量为 $m$ 的、无相互作用的、可分辨的量子粒子被限制在长度为 $L$ 的一维 (1D) 无限深势阱中。其定态能量为 $E_{n}=\\dfrac{\\pi^{2}\\hbar^{2} n^{2}}{2m L^{2}}$，其中 $n=1,2,3,\\dots$，$\\hbar$ 是约化普朗克常数，$h=2\\pi\\hbar$ 是普朗克常数。系统与一个绝对温度为 $T$ 的热库接触，并由正则系综描述。\n\n从正则配分函数 $Z(T)=\\sum_{n} \\exp\\!\\big(-\\beta E_{n}\\big)$ （其中 $\\beta=1/(k_{B}T)$，$k_{B}$ 是玻尔兹曼常数）的定义出发，完成以下任务：\n\n- 推导单粒子正则配分函数 $Z_{1}(T)$ 的精确表达式，使其成为一个收敛级数形式的、数学上良定的对象，并在方便时用标准特殊函数表示。\n- 仅使用基本定义和在高温下有效的渐近推理，求出 $T\\to \\infty$ 时 $Z_{1}(T)$ 的领头高温（经典）极限，并确定第一亚领头量子修正项。\n- 给出领头经典极限 $Z_{1}^{\\mathrm{cl}}(T)$ 的封闭形式解析表达式，用 $m$、$L$、$h$、$k_{B}$ 和 $T$ 表示，作为你的最终答案。\n\n你的最终答案必须是单一的封闭形式解析表达式。最终答案框中不要包含单位。由于答案是符号形式，因此无需四舍五入。", "solution": "该问题陈述具有科学依据，表述清晰且客观。它代表了量子统计力学中的一个标准练习，要求推导一维无限深势阱中粒子的正则配分函数，并检验其高温极限。所有必要的物理参数和基本常数都以符号形式给出。因此，该问题是有效的，我们可以着手求解。\n\n系统包含一个质量为 $m$ 的粒子，处于长度为 $L$ 的一维无限深势阱中。其能量本征值为\n$$E_{n} = \\frac{\\pi^{2}\\hbar^{2} n^{2}}{2m L^{2}}, \\quad n=1,2,3,\\dots$$\n系统与温度为 $T$ 的热库处于热平衡状态。单粒子正则配分函数 $Z_{1}(T)$ 定义为对所有可能的量子态求和：\n$$Z_{1}(T) = \\sum_{n=1}^{\\infty} \\exp(-\\beta E_{n})$$\n其中 $\\beta = 1/(k_{B}T)$，$k_{B}$ 是玻尔兹曼常数。\n\n代入能量 $E_{n}$ 的表达式，我们得到：\n$$Z_{1}(T) = \\sum_{n=1}^{\\infty} \\exp\\left(-\\frac{\\beta \\pi^{2}\\hbar^{2} n^{2}}{2m L^{2}}\\right)$$\n为了简化记号，我们引入一个无量纲参数 $\\alpha$，它包含了所有的常数和温度依赖关系：\n$$\\alpha = \\frac{\\beta \\pi^{2}\\hbar^{2}}{2m L^{2}} = \\frac{\\pi^{2}\\hbar^{2}}{2m L^{2} k_{B}T}$$\n配分函数可以写成一个级数：\n$$Z_{1}(T) = \\sum_{n=1}^{\\infty} \\exp(-\\alpha n^{2})$$\n对于任何 $T > 0$（即 $\\alpha > 0$），这个级数都是收敛的，并定义了一个数学上良定的函数。该表达式可以与雅可比 $\\theta$ 函数 $\\vartheta_{3}(z,q) = \\sum_{k=-\\infty}^{\\infty} q^{k^2} e^{2kiz}$ 联系起来。当 $z=0$ 时，该函数变为 $\\vartheta_{3}(0,q) = 1 + 2\\sum_{k=1}^{\\infty} q^{k^2}$。令 $q = \\exp(-\\alpha)$，我们的配分函数恰好是 $Z_{1}(T) = \\frac{1}{2}[\\vartheta_{3}(0, \\exp(-\\alpha)) - 1]$。\n\n问题要求的是高温极限，对应于 $T \\to \\infty$。在此极限下，$\\beta \\to 0$，因此 $\\alpha \\to 0$。当 $\\alpha$ 非常小时，相对于热能 $k_{B}T$，能级间距很小。离散求和可以精确地用积分来近似，这代表了向经典极限的过渡。\n$$Z_{1}(T) = \\sum_{n=1}^{\\infty} \\exp(-\\alpha n^{2}) \\approx \\int_{0}^{\\infty} \\exp(-\\alpha x^{2}) dx$$\n积分下限设为 $0$ 而不是 $1$。这是对领头项的标准近似，因为当 $\\alpha \\to 0$ 时，来自区间 $[0,1]$ 的贡献与整个积分值相比可以忽略不计。使用欧拉-麦克劳林公式进行更严格的处理，可以证实对领头项的这种选择。\n\n该积分为标准的高斯积分：\n$$\\int_{0}^{\\infty} \\exp(-ax^{2}) dx = \\frac{1}{2}\\sqrt{\\frac{\\pi}{a}}$$\n将此结果应用于 $a=\\alpha$，我们得到配分函数的领头阶高温近似：\n$$Z_{1}^{\\mathrm{cl}}(T) = \\frac{1}{2}\\sqrt{\\frac{\\pi}{\\alpha}}$$\n这个表达式代表了粒子的经典配分函数。\n\n为了确定亚领头量子修正项，我们可以将欧拉-麦克劳林公式应用于级数 $\\sum_{n=1}^{\\infty}f(n)$，其中 $f(n)=\\exp(-\\alpha n^2)$。一个更简单的方法是使用从 $n=0$ 开始求和的公式：$\\sum_{n=0}^{\\infty} f(n) \\approx \\int_0^\\infty f(x)dx + \\frac{f(0)}{2} - \\frac{f'(0)}{12} + \\dots$。\n我们的级数是 $\\sum_{n=1}^{\\infty} f(n) = \\left(\\sum_{n=0}^{\\infty} f(n)\\right) - f(0)$。\n这里，$f(x) = \\exp(-\\alpha x^{2})$。我们发现 $f(0) = 1$ 且 $f'(x) = -2\\alpha x \\exp(-\\alpha x^{2})$，所以 $f'(0)=0$。所有更高阶的奇次导数在 $x=0$ 处也为零。\n因此，展开式为：\n$$Z_{1}(T) = \\sum_{n=1}^{\\infty} \\exp(-\\alpha n^{2}) \\approx \\left(\\int_{0}^{\\infty} \\exp(-\\alpha x^{2}) dx + \\frac{1}{2}f(0) \\right) - f(0) = \\left(\\frac{1}{2}\\sqrt{\\frac{\\pi}{\\alpha}} + \\frac{1}{2}\\right) - 1 = \\frac{1}{2}\\sqrt{\\frac{\\pi}{\\alpha}} - \\frac{1}{2}$$\n此分析表明，领头项是经典极限 $Z_{1}^{\\mathrm{cl}}(T)$，第一亚领头量子修正项是一个常数 $-\\frac{1}{2}$。\n\n问题要求给出领头经典极限 $Z_{1}^{\\mathrm{cl}}(T)$ 的封闭形式表达式，用 $m$、$L$、$h$、$k_{B}$、$T$ 表示。我们取分析中的领头项：\n$$Z_{1}^{\\mathrm{cl}}(T) = \\frac{1}{2}\\sqrt{\\frac{\\pi}{\\alpha}}$$\n代入 $\\alpha$ 的定义：\n$$Z_{1}^{\\mathrm{cl}}(T) = \\frac{1}{2}\\sqrt{\\frac{\\pi}{\\frac{\\pi^{2}\\hbar^{2}}{2m L^{2} k_{B}T}}} = \\frac{1}{2}\\sqrt{\\frac{2\\pi m L^{2} k_{B}T}{\\pi^{2}\\hbar^{2}}} = \\frac{1}{2} \\frac{L\\sqrt{2\\pi m k_{B}T}}{\\pi\\hbar}$$\n最后，我们必须用普朗克常数 $h$ 而不是约化普朗克常数 $\\hbar$ 来表示结果。使用关系式 $h = 2\\pi\\hbar$，即 $\\hbar = h/(2\\pi)$：\n$$Z_{1}^{\\mathrm{cl}}(T) = \\frac{1}{2} \\frac{L\\sqrt{2\\pi m k_{B}T}}{\\pi(h/2\\pi)} = \\frac{1}{2} \\frac{2L\\sqrt{2\\pi m k_{B}T}}{h} = \\frac{L\\sqrt{2\\pi m k_{B}T}}{h}$$\n这就是长度为 $L$ 的一维箱中粒子的经典配分函数。它可以看作是箱长与热德布罗意波长的比值，$Z_{1}^{\\mathrm{cl}}(T) = L/\\Lambda$，其中 $\\Lambda = h/\\sqrt{2\\pi m k_{B}T}$。", "answer": "$$\\boxed{\\frac{L\\sqrt{2\\pi m k_{B}T}}{h}}$$", "id": "2671883"}, {"introduction": "这项高级实践练习弥合了形式统计力学与现代计算建模之间的鸿沟。您将推导维里状态方程，然后设计一种迭代算法，以创建一个在结构和热力学上与更精细的原子模型相一致的粗粒化势。这个问题展示了理论框架如何成为开发实用模拟模型的强大工具。[@problem_id:2671900]", "problem": "考虑一个由 $N$ 个全同粒子组成的经典流体，其处于体积为 $V$、绝对温度为 $T$ 的条件下，并通过正则系综中的正则配分函数 $Z_{NVT}$ 进行描述。微观相互作用是两两可加的，具有球对称对势 $u(r)$，其中 $r$ 是两个粒子间的标量距离。令 $\\beta \\equiv 1/(k_{\\mathrm{B}} T)$ 表示逆热能，其中 $k_{\\mathrm{B}}$ 是 Boltzmann 常数。全文采用约化 Lennard–Jones 单位，其中 $k_{\\mathrm{B}} T = 1$，特征长度 $\\sigma = 1$，特征能量 $\\varepsilon = 1$，压强以 $\\varepsilon/\\sigma^3$ 为单位进行度量。\n\n您的任务如下，并且必须从第一性原理（正则系综定义、标准统计力学恒等式和低密度近似）出发进行推导，不得直接引用已有的目标结果：\n\n- 从正则配分函数 $Z_{NVT}$ 和 Helmholtz 自由能 $A(T,V,N)$ 的定义出发，推导联系热力学压强 $P$ 与 $A$ 的导数的状态方程，并在对加性假设下将 $P$ 与对相互作用联系起来。在低密度区域，采用受控近似，即径向分布函数 $g(r)$ 由 Boltzmann 因子给出：$g(r) \\approx \\exp\\!\\big(-\\beta u(r)\\big)$，并推导相应的用 $u(r)$ 和 $g(r)$ 表示的压强 $P$ 的维里表达式。\n- 定义一个具有有效对势 $u_{\\mathrm{CG}}(r)$ 和相应粗粒化自由能 $A_{\\mathrm{CG}}(T,V,N)$ 的粗粒化模型。在固定的温度 $T$ 和粒子数密度 $\\rho \\equiv N/V$ 条件下，为保证粗粒化模型能复现与原子模型相同的状态方程，请为其热力学一致性建立一个精确的条件。证明一个充分条件是 $A_{\\mathrm{CG}}(T,V,N) = A_{\\mathrm{AT}}(T,V,N) + C(T,N)$，其中 $C$ 与 $V$ 无关，并解释为何这能推导出压强 $P_{\\mathrm{CG}}$ 和 $P_{\\mathrm{AT}}$ 相等。\n- 提出一个构造性的迭代算法，通过构建 $u_{\\mathrm{CG}}(r)$ 来强制实现热力学一致性，使其能同时复现输入的目标结构 $g_{\\mathrm{target}}(r)$ 和输入的目标压强 $P_{\\mathrm{target}}$。该算法对 $r \\le r_{\\mathrm{match}}$ 使用迭代 Boltzmann 反演过程，对 $r \\in [r_{\\mathrm{match}}, r_c]$ 使用专用的压强修正尾部。您的提案必须明确说明：\n  - 一个更新规则，该规则通过基于当前模型的 $g(r)$ 和目标 $g_{\\mathrm{target}}(r)$ 迭代地修正 $u(r)$，以减小 $r \\le r_{\\mathrm{match}}$ 范围内的结构差异。\n  - 一个支撑集在 $[r_{\\mathrm{match}}, r_c]$ 上的尾部基函数 $\\phi(r)$，以及一个用于计算其在每次迭代中振幅的公式，该公式在低密度近似下强制 $P = P_{\\mathrm{target}}$ 在尾部振幅上达到一阶精度。\n  - 明确的停止准则，以 $r \\le r_{\\mathrm{match}}$ 上的结构误差和压强误差来表述。\n- 实现任务。将您提出的算法实现为一个完整的、可运行的程序，该程序使用低密度近似作为其正向模型。使用以下包含三个合成原子模型的测试套件，每个模型都会产生一个目标 $g_{\\mathrm{target}}(r)$ 和 $P_{\\mathrm{target}}$：\n  - 案例1 (Lennard–Jones 截断–移位势)：当 $r \\le r_c$ 时，$u_{\\mathrm{AT}}(r) = 4\\varepsilon \\big[(\\sigma/r)^{12} - (\\sigma/r)^6\\big]$，经过移位以使 $u_{\\mathrm{AT}}(r_c) = 0$；当 $r > r_c$ 时，$u_{\\mathrm{AT}}(r) = 0$。参数：$\\varepsilon = 1$，$\\sigma = 1$，$T = 1$，$\\rho = 0.05$，$r_c = 2.5$，$r_{\\mathrm{match}} = 2.0$。\n  - 案例2 (Weeks–Chandler–Andersen 排斥势)：当 $r \\le r_m$ 时，$u_{\\mathrm{AT}}(r) = 4\\varepsilon \\big[(\\sigma/r)^{12} - (\\sigma/r)^6\\big] - 4\\varepsilon \\big[(\\sigma/r_m)^{12} - (\\sigma/r_m)^6\\big]$，其中 $r_m = 2^{1/6}\\sigma$；当 $r > r_m$ 时，$u_{\\mathrm{AT}}(r) = 0$。参数：$\\varepsilon = 1$，$\\sigma = 1$，$T = 1$，$\\rho = 0.05$，$r_c = r_m$，$r_{\\mathrm{match}} = 1.0$。\n  - 案例3 (理想气体极限)：对所有 $r$，$u_{\\mathrm{AT}}(r) = 0$。参数：$\\varepsilon = 0$，$\\sigma = 1$，$T = 1$，$\\rho = 0.05$，$r_c = 2.5$，$r_{\\mathrm{match}} = 2.0$。\n  使用一个径向网格 $r \\in [r_{\\min}, r_c]$，其中 $r_{\\min} = 0.9$，包含 $N_r = 500$ 个等距点。在此网格上构造合成结构目标为 $g_{\\mathrm{target}}(r) = \\exp\\!\\big(-\\beta u_{\\mathrm{AT}}(r)\\big)$。在相同的低密度近似下，根据维里表达式计算 $P_{\\mathrm{target}}$。使用一个迭代方案，混合参数 $\\alpha = 0.5$，最大迭代次数为 $1000$，停止容差为：$r \\le r_{\\mathrm{match}}$ 上的最大结构对数误差小于 $10^{-8}$，绝对压强误差小于 $10^{-10}$。对于压强修正尾部，当 $r \\in [r_{\\mathrm{match}}, r_c]$ 时使用二次基函数 $\\phi(r) = (r - r_{\\mathrm{match}})(r_c - r)$，其他情况下 $\\phi(r) = 0$。\n- 所需单位和输出。所有物理量均用上述约化单位表示。您的程序应产生单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，具体内容是案例1、2和3的三个绝对压强偏差 $|P_{\\mathrm{final}} - P_{\\mathrm{target}}|$，单位为 $\\varepsilon/\\sigma^3$，汇总为 $[x_1,x_2,x_3]$。\n\n您的推导和实现必须内部一致且科学上合理。算法设计必须由正则系综框架和低密度近似来证明其合理性。最终的数值答案必须是浮点数。不允许用户输入；所有参数均按上文规定，程序必须按原样运行至完成。", "solution": "所提出的问题是统计力学和数值方法中的一个有效练习，并将按要求进行解决。它要求推导基本结果，构建一个多目标优化算法并加以实现。我们分阶段进行。\n\n首先，我们从正则配分函数 $Z_{NVT}$ 推导维里状态方程。对于一个包含 $N$ 个全同、不可区分粒子，处于体积为 $V$、温度为 $T$ 的系统，其配分函数为\n$$Z_{NVT} = \\frac{1}{N! \\Lambda^{3N}} Q_{NVT}$$\n其中 $\\Lambda$ 是热德布罗意波长，$Q_{NVT}$ 是位形积分：\n$$Q_{NVT} = \\int_{V} \\dots \\int_{V} e^{-\\beta U(\\mathbf{r}_1, \\dots, \\mathbf{r}_N)} d\\mathbf{r}_1 \\dots d\\mathbf{r}_N$$\n此处，$U$ 是总势能，$\\beta = 1/(k_{\\mathrm{B}}T)$。Helmholtz 自由能 $A$ 通过以下关系与 $Z_{NVT}$ 相关联：\n$$A = -k_{\\mathrm{B}}T \\ln Z_{NVT} = -k_{\\mathrm{B}}T \\ln\\left(\\frac{1}{N! \\Lambda^{3N}}\\right) - k_{\\mathrm{B}}T \\ln Q_{NVT}$$\n热力学压强 $P$ 由 $A$ 在 $N$ 和 $T$ 恒定时对体积 $V$ 的偏导数给出：\n$$P = -\\left(\\frac{\\partial A}{\\partial V}\\right)_{N,T} = k_{\\mathrm{B}}T \\frac{\\partial \\ln Q_{NVT}}{\\partial V}$$\n为了计算该导数，我们进行坐标变换，从 $\\mathbf{r}_i$ 变换到标度化坐标 $\\mathbf{s}_i = V^{-1/3}\\mathbf{r}_i$，使得每个 $\\mathbf{s}_i$ 都在单位体积上积分。位形积分变为\n$$Q_{NVT} = V^N \\int_{unit} \\dots \\int_{unit} e^{-\\beta U(V^{1/3}\\mathbf{s}_1, \\dots, V^{1/3}\\mathbf{s}_N)} d\\mathbf{s}_1 \\dots d\\mathbf{s}_N$$\n现在，我们将 $\\ln Q_{NVT}$ 对 $V$ 求导：\n$$\\frac{\\partial \\ln Q_{NVT}}{\\partial V} = \\frac{N}{V} + \\frac{1}{Q_{NVT}} V^N \\int \\dots \\int \\left(-\\beta \\frac{\\partial U}{\\partial V}\\right) e^{-\\beta U} d\\mathbf{s}^N$$\n使用链式法则，$\\frac{\\partial U}{\\partial V} = \\sum_{i=1}^N \\frac{\\partial U}{\\partial \\mathbf{r}_i} \\cdot \\frac{\\partial \\mathbf{r}_i}{\\partial V} = \\sum_{i=1}^N \\nabla_{\\mathbf{r}_i} U \\cdot \\frac{\\mathbf{r}_i}{3V}$。\n将此代回，我们得到\n$$P = \\frac{N k_{\\mathrm{B}}T}{V} - \\frac{1}{3V} \\left\\langle \\sum_{i=1}^N \\mathbf{r}_i \\cdot \\nabla_{\\mathbf{r}_i} U \\right\\rangle$$\n其中尖括号表示正则系综平均。这就是广义维里定理。假设对加性成立，$U = \\sum_{i<j} u(r_{ij})$，其中 $r_{ij} = |\\mathbf{r}_i - \\mathbf{r}_j|$。该求和变为\n$$\\sum_{i=1}^N \\mathbf{r}_i \\cdot \\nabla_{\\mathbf{r}_i} U = \\sum_{i} \\sum_{j \\neq i} \\mathbf{r}_i \\cdot \\nabla_{\\mathbf{r}_i} u(r_{ij}) = \\sum_{i<j} \\left( \\mathbf{r}_i \\cdot \\nabla_{\\mathbf{r}_i} u(r_{ij}) + \\mathbf{r}_j \\cdot \\nabla_{\\mathbf{r}_j} u(r_{ij}) \\right)$$\n由于 $\\nabla_{\\mathbf{r}_j} u(r_{ij}) = -\\nabla_{\\mathbf{r}_i} u(r_{ij})$，此式简化为：\n$$\\sum_{i<j} (\\mathbf{r}_i - \\mathbf{r}_j) \\cdot \\nabla_{\\mathbf{r}_i} u(r_{ij}) = \\sum_{i<j} \\mathbf{r}_{ij} \\cdot \\left(\\frac{d u}{d r_{ij}} \\frac{\\mathbf{r}_{ij}}{r_{ij}}\\right) = \\sum_{i<j} r_{ij} \\frac{d u}{d r_{ij}}$$\n此求和的系综平均使用径向分布函数 $g(r)$ 来表示。距离在 $r$ 和 $r+dr$ 之间的粒子对的平均数量由 $\\frac{1}{2}N\\rho g(r) 4\\pi r^2 dr$ 给出，其中 $\\rho=N/V$ 是数密度。因此，系综平均为\n$$\\left\\langle \\sum_{i<j} r_{ij} \\frac{d u}{d r_{ij}} \\right\\rangle = \\frac{N\\rho}{2} \\int_0^\\infty r \\frac{du}{dr} g(r) 4\\pi r^2 dr$$\n将此代入压强表达式，即可得到维里状态方程：\n$$P = \\rho k_{\\mathrm{B}}T - \\frac{2\\pi\\rho^2}{3} \\int_0^\\infty r^3 \\frac{du(r)}{dr} g(r) dr$$\n在低密度区域，径向分布函数可以近似为对势的 Boltzmann 因子，$g(r) \\approx \\exp(-\\beta u(r))$。压强表达式则变为：\n$$P \\approx \\rho k_{\\mathrm{B}}T - \\frac{2\\pi\\rho^2}{3} \\int_0^\\infty r^3 \\frac{du(r)}{dr} e^{-\\beta u(r)} dr$$\n\n其次，我们讨论热力学一致性。如果一个粗粒化（CG）模型能够复现与原子（AT）模型相同的状态方程，即 $P_{\\mathrm{CG}}(T,V,N) = P_{\\mathrm{AT}}(T,V,N)$，那么它就与原子模型是热力学一致的。压强由它们各自的自由能 $A_{\\mathrm{CG}}$ 和 $A_{\\mathrm{AT}}$ 导出，即 $P = -(\\partial A / \\partial V)_{N,T}$。\n如果我们假设自由能之间的关系为 $A_{\\mathrm{CG}}(T,V,N) = A_{\\mathrm{AT}}(T,V,N) + C(T,N)$，其中 $C$ 是一个依赖于温度和粒子数但与体积无关的函数，那么求导可得：\n$$P_{\\mathrm{CG}} = -\\left(\\frac{\\partial A_{\\mathrm{CG}}}{\\partial V}\\right)_{N,T} = -\\frac{\\partial}{\\partial V}\\left(A_{\\mathrm{AT}}(T,V,N) + C(T,N)\\right)_{N,T} = -\\left(\\frac{\\partial A_{\\mathrm{AT}}}{\\partial V}\\right)_{N,T} - \\left(\\frac{\\partial C(T,N)}{\\partial V}\\right)_{N,T}$$\n由于 $C(T,N)$ 与 $V$ 无关，其对 $V$ 的偏导数为零。因此，\n$$P_{\\mathrm{CG}} = P_{\\mathrm{AT}} - 0 = P_{\\mathrm{AT}}$$\n这表明，自由能中依赖于体积的部分相同是复现状态方程的一个充分条件，尽管并非严格必要。\n\n第三，我们提出了一个构造性算法，用于寻找一个能够同时复现目标结构 $g_{\\mathrm{target}}(r)$ 和目标压强 $P_{\\mathrm{target}}$ 的粗粒化势 $u_{\\mathrm{CG}}(r)$。我们使用低密度近似作为我们的正向模型，其中关系式 $g_k(r) = \\exp(-\\beta u_k(r))$ 将第 $k$ 次迭代的势 $u_k(r)$ 与其对应的结构 $g_k(r)$ 联系起来。该算法按以下步骤进行：\n1.  **初始化**：从一个对势的初始猜测开始，例如 $u_0(r) = 0$。\n2.  **迭代**：对于每次迭代 $k$，从当前的势 $u_k(r)$ 开始：\n    a. **结构精化**：生成一个中间势 $u'_{k+1}(r)$ 以减小 $r \\le r_{\\mathrm{match}}$ 范围内的结构误差。我们使用带有混合参数 $\\alpha$ 的迭代 Boltzmann 反演（IBI）更新。能够产生 $g_{\\mathrm{target}}(r)$ 的目标势为 $u_{\\mathrm{target}}(r) = -k_{\\mathrm{B}}T \\ln g_{\\mathrm{target}}(r)$。更新规则为线性混合：\n    $$u'_{k+1}(r) = \\begin{cases} (1-\\alpha)u_k(r) + \\alpha u_{\\mathrm{target}}(r) & r \\le r_{\\mathrm{match}} \\\\ u_k(r) & r > r_{\\mathrm{match}} \\end{cases}$$\n    b. **压强修正**：势 $u'_{k+1}(r)$ 通常不会产生目标压强 $P_{\\mathrm{target}}$。我们引入一个修正尾部，$u_{k+1}(r) = u'_{k+1}(r) + \\lambda_k \\phi(r)$，其中 $\\phi(r)$ 是一个仅在区间 $[r_{\\mathrm{match}}, r_c]$ 上非零的基函数。计算振幅 $\\lambda_k$ 以强制 $P(u_{k+1}) = P_{\\mathrm{target}}$ 达到一阶精度。压强是势的泛函，记为 $P[u]$。我们将其在 $u'_{k+1}$ 附近对 $\\lambda$ 进行线性化：\n    $$P_{\\mathrm{target}} \\approx P[u'_{k+1}] + \\lambda_k \\left. \\frac{d P[u'_{k+1} + \\lambda \\phi]}{d\\lambda} \\right|_{\\lambda=0}$$\n    令 $P'_{k+1} = P[u'_{k+1}]$，我们解出 $\\lambda_k$：\n    $$\\lambda_k = \\frac{P_{\\mathrm{target}} - P'_{k+1}}{J_{k+1}}$$\n    其中 $J_{k+1}$ 是压强响应导数：\n    $$J_{k+1} = \\left. \\frac{d P}{d\\lambda} \\right|_{\\lambda=0} = - \\frac{2\\pi\\rho^2}{3} \\int_{r_{\\mathrm{match}}}^{r_c} r^3 \\left( \\frac{d\\phi}{dr} - \\beta\\phi \\frac{du'_{k+1}}{dr} \\right) e^{-\\beta u'_{k+1}(r)} dr$$\n    下一次迭代的新势为 $u_{k+1}(r) = u'_{k+1}(r) + \\lambda_k \\phi(r)$。请注意，由于当 $r < r_{\\mathrm{match}}$ 时 $\\phi(r)$ 为零，此步骤在当前迭代中不会改变核心区域的势。\n3.  **停止准则**：迭代持续进行，直到结构误差和压强误差均低于指定的容差：\n    -   结构误差：$\\max_{r \\le r_{\\mathrm{match}}} |\\ln g_k(r) - \\ln g_{\\mathrm{target}}(r)| < \\epsilon_{\\mathrm{struct}}$\n    -   压强误差：$|P_k - P_{\\mathrm{target}}| < \\epsilon_{\\mathrm{press}}$\n\n该算法系统地精化势函数，以同时匹配局域结构和全局热力学性质。\n\n第四，我们为指定的测试案例提供了该算法的实现。代码遵循上文推导的原理和公式。目标性质（$g_{\\mathrm{target}}$，$P_{\\mathrm{target}}$）是使用相同的低密度近似从已知的原子势生成的，这确保了完美解的存在，并为算法的收敛性和正确性提供了严格的测试。所有量均在指定的约化 Lennard-Jones 单位下计算。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements an iterative algorithm to construct a coarse-grained potential\n    that reproduces a target structure and pressure, based on the low-density\n    approximation g(r) = exp(-beta * u(r)).\n    \"\"\"\n    test_cases = [\n        {\n            'name': 'Lennard-Jones TS',\n            'rho': 0.05, 'rc': 2.5, 'rmatch': 2.0, 'rmin': 0.9,\n            'u_at_func': lambda r, eps=1.0, sig=1.0, rc=2.5: (\n                4 * eps * ((sig/r)**12 - (sig/r)**6) -\n                (4 * eps * ((sig/rc)**12 - (sig/rc)**6))\n            ) * (r <= rc)\n        },\n        {\n            'name': 'Weeks-Chandler-Andersen',\n            'rho': 0.05, 'rc': 2**(1/6), 'rmatch': 1.0, 'rmin': 0.9,\n            'u_at_func': lambda r, eps=1.0, sig=1.0, rm=2**(1/6): (\n                (4 * eps * ((sig/r)**12 - (sig/r)**6) -\n                 4 * eps * ((sig/rm)**12 - (sig/rm)**6))\n            ) * (r <= rm)\n        },\n        {\n            'name': 'Ideal Gas',\n            'rho': 0.05, 'rc': 2.5, 'rmatch': 2.0, 'rmin': 0.9,\n            'u_at_func': lambda r, eps=0.0: np.zeros_like(r)\n        }\n    ]\n\n    # Algorithm parameters\n    Nr = 500\n    alpha = 0.5\n    max_iter = 1000\n    tol_struct = 1e-8\n    tol_press = 1e-10\n    beta = 1.0  # Since k_B * T = 1\n\n    results = []\n\n    for case in test_cases:\n        rho, rc, rmatch, rmin = case['rho'], case['rc'], case['rmatch'], case['rmin']\n        \n        # Setup radial grid\n        r = np.linspace(rmin, rc, Nr)\n        dr = r[1] - r[0]\n\n        # Define atomistic target properties\n        u_at = case['u_at_func'](r)\n        g_target = np.exp(-beta * u_at)\n        u_target_from_g = - (1.0 / beta) * np.log(g_target)\n\n        # Numerical derivative of the atomistic potential\n        du_at_dr = np.gradient(u_at, dr)\n\n        # Function to calculate pressure\n        def calculate_pressure(potential, du_dr, density):\n            g_r = np.exp(-beta * potential)\n            # Virial expression for pressure\n            integrand = r**3 * du_dr * g_r\n            integral = np.trapz(integrand, r)\n            pressure = density / beta - (2.0 * np.pi * density**2 / 3.0) * integral\n            return pressure\n\n        p_target = calculate_pressure(u_at, du_at_dr, rho)\n\n        # Define pressure-correction tail basis function and its derivative\n        tail_mask = (r >= rmatch) & (r <= rc)\n        phi = np.zeros_like(r)\n        dphi_dr = np.zeros_like(r)\n        phi[tail_mask] = (r[tail_mask] - rmatch) * (rc - r[tail_mask])\n        dphi_dr[tail_mask] = (rc + rmatch) - 2 * r[tail_mask]\n\n        # Initialize CG potential\n        u_cg = np.zeros_like(r)\n\n        for k in range(max_iter):\n            # Calculate current properties from u_cg\n            g_cg = np.exp(-beta * u_cg)\n            du_cg_dr = np.gradient(u_cg, dr)\n            p_cg = calculate_pressure(u_cg, du_cg_dr, rho)\n\n            # Check for convergence\n            core_mask = r <= rmatch\n            g_cg_core = g_cg[core_mask]\n            g_target_core = g_target[core_mask]\n            # Avoid log(0) for g values that might be numerically zero\n            g_cg_core[g_cg_core < 1e-16] = 1e-16\n            \n            struct_error = np.max(np.abs(np.log(g_cg_core) - np.log(g_target_core)))\n            press_error = np.abs(p_cg - p_target)\n            \n            if struct_error < tol_struct and press_error < tol_press:\n                break\n\n            # 1. Structural update (IBI-like mixing)\n            u_prime = u_cg.copy()\n            u_prime[core_mask] = (1 - alpha) * u_cg[core_mask] + alpha * u_target_from_g[core_mask]\n            \n            # 2. Pressure correction\n            du_prime_dr = np.gradient(u_prime, dr)\n            p_prime = calculate_pressure(u_prime, du_prime_dr, rho)\n            \n            dp_required = p_target - p_prime\n            \n            if abs(dp_required) < 1e-12:\n                lambda_val = 0.0\n            else:\n                # Calculate pressure response integral J\n                g_prime = np.exp(-beta * u_prime)\n                response_integrand = r**3 * (dphi_dr - beta * phi * du_prime_dr) * g_prime\n                J = - (2.0 * np.pi * rho**2 / 3.0) * np.trapz(response_integrand[tail_mask], r[tail_mask])\n                \n                if abs(J) < 1e-15:\n                    lambda_val = 0.0 # Cannot correct if response is zero\n                else:\n                    lambda_val = dp_required / J\n\n            # Update final potential for this iteration\n            u_cg = u_prime + lambda_val * phi\n        \n        # Calculate final pressure deviation\n        du_cg_final_dr = np.gradient(u_cg, dr)\n        p_final = calculate_pressure(u_cg, du_cg_final_dr, rho)\n        final_press_dev = np.abs(p_final - p_target)\n        results.append(final_press_dev)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2671900"}]}