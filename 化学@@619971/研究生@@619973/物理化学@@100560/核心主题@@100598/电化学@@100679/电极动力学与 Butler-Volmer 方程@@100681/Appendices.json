{"hands_on_practices": [{"introduction": "理论的美妙之处常常在于其在特定极限下的简化形式。完整的巴特勒-沃尔默（Butler-Volmer）方程是非线性的，但在接近平衡电位、过电位（$\\eta$）极小的情况下，可以进行线性化处理。这个练习将引导您推导电荷转移电阻（$R_{ct}$），这是表征电极/电解质界面动力学的一个核心参数，在电化学阻抗谱（EIS）等技术中至关重要。通过这个推导，您将深入理解在弱极化区，电流密度与过电位之间近似的欧姆关系，并掌握如何从基本动力学方程中提取关键的界面物理量[@problem_id:1296571]。", "problem": "在电化学领域，电极-电解质界面的电荷转移动力学通常由巴特勒-沃尔默（Butler-Volmer）方程描述。该方程将净电流密度 $j$ 与过电势 $\\eta$ 联系起来，过电势是实际电极电势与平衡电势之差。对于单步氧化还原反应，该方程为：\n\n$$j = j_0 \\left( \\exp\\left(\\frac{(1-\\alpha)nF\\eta}{RT}\\right) - \\exp\\left(-\\frac{\\alpha nF\\eta}{RT}\\right) \\right)$$\n\n在此式中，$j_0$ 是交换电流密度，$\\alpha$ 是电荷转移系数（一个无量纲因子），$n$ 是基元反应步骤中转移的电子数，$F$ 是法拉第常数，$R$ 是通用气体常数，$T$ 是绝对温度。\n\n一个用于表征该界面，特别是在像电化学阻抗谱（EIS）这样的技术中，的关键参数是电荷转移电阻 $R_{ct}$。该量表示在平衡条件下，界面对电荷转移的内在阻力。它的正式定义是过电势相对于电流密度的变化率，在过电势趋近于零的极限条件下取值。在数学上，这表示为：\n\n$$R_{ct} = \\lim_{\\eta \\to 0} \\left( \\frac{d\\eta}{dj} \\right)$$\n\n假设一个电化学界面的动力学行为完全由巴特勒-沃尔默方程描述，请推导电荷转移电阻 $R_{ct}$ 关于 $R$、$T$、$n$、$F$ 和 $j_0$ 的闭合形式解析表达式。", "solution": "我们从作为过电势函数的净电流密度的巴特勒-沃尔默方程开始：\n$$\nj(\\eta) = j_{0}\\left( \\exp\\left( \\frac{(1-\\alpha)nF\\eta}{RT} \\right) - \\exp\\left( -\\frac{\\alpha nF\\eta}{RT} \\right) \\right).\n$$\n定义常数\n$$\na \\equiv \\frac{nF}{RT}\n$$\n以简化符号。则\n$$\nj(\\eta) = j_{0}\\left( \\exp\\left( (1-\\alpha)a\\eta \\right) - \\exp\\left( -\\alpha a\\eta \\right) \\right).\n$$\n电荷转移电阻定义为\n$$\nR_{ct} = \\lim_{\\eta \\to 0} \\left( \\frac{d\\eta}{dj} \\right) = \\left. \\left( \\frac{dj}{d\\eta} \\right)^{-1} \\right|_{\\eta=0}.\n$$\n使用链式法则和指数函数的导数，对 $j(\\eta)$ 关于 $\\eta$ 求导：\n$$\n\\frac{dj}{d\\eta} = j_{0}\\left( (1-\\alpha)a \\exp\\left( (1-\\alpha)a\\eta \\right) + \\alpha a \\exp\\left( -\\alpha a\\eta \\right) \\right).\n$$\n在 $\\eta=0$ 处求值：\n$$\n\\left. \\frac{dj}{d\\eta} \\right|_{\\eta=0} = j_{0}\\left( (1-\\alpha)a \\exp(0) + \\alpha a \\exp(0) \\right) = j_{0} a \\left( (1-\\alpha) + \\alpha \\right) = j_{0} a.\n$$\n将 $a = nF/(RT)$ 代回，得到\n$$\n\\left. \\frac{dj}{d\\eta} \\right|_{\\eta=0} = j_{0} \\frac{nF}{RT}.\n$$\n因此，电荷转移电阻为\n$$\nR_{ct} = \\left( \\left. \\frac{dj}{d\\eta} \\right|_{\\eta=0} \\right)^{-1} = \\frac{RT}{nF j_{0}}.\n$$\n此结果表明 $R_{ct}$ 与电荷转移系数 $\\alpha$ 无关，且与交换电流密度 $j_{0}$ 成反比。", "answer": "$$\\boxed{\\frac{RT}{nF j_{0}}}$$", "id": "1296571"}, {"introduction": "一个成熟的科学模型不仅在于其解释力，也在于其假设的明确性。巴特勒-沃尔默方程中一个核心假设是电荷转移系数 $\\alpha$ 是一个常数。本练习邀请您进行一个思想实验：如果在一个假设的电化学体系中，$\\alpha$ 不再是常数，而是随过电位 $\\eta$ 线性变化，将会发生什么？通过分析这种情况下阳极电流密度的行为，您将探索模型基本假设被打破后可能出现的非经典现象，从而培养批判性审视理论模型及其适用边界的能力[@problem_id:1296566]。", "problem": "在电催化研究中，电极-电解质界面的电荷转移动力学通常由 Butler-Volmer 方程描述。考虑一个假设的单电子转移反应 $\\text{O} + e^- \\rightleftharpoons \\text{R}$，该反应在恒定温度 $T$ 下于电极表面发生。此反应的交换电流密度为 $j_0$。普适气体常数为 $R$，法拉第常数为 $F$。\n\n在标准模型中，电荷转移系数（或对称因子）$\\alpha$ 通常被假定为一个常数，约为 0.5。然而，对于这个特定的假设系统，理论研究表明 $\\alpha$ 不是一个常数，而是随外加过电位 $\\eta$ 线性变化。该依赖关系由以下公式给出：\n$$ \\alpha(\\eta) = \\alpha_0 + \\beta \\eta $$\n其中 $\\alpha_0$ 是一个无量纲常数，表示零过电位时的对称因子（$0  \\alpha_0  1$），而 $\\beta$ 是一个小的正常数，单位为电压的倒数。\n\n对于大的正过电位（$\\eta \\gg RT/F$），净电流密度 $j$ 主要由阳极过程决定，并可由 Butler-Volmer 方程的阳极项近似表示：\n$$ j \\approx j_a = j_0 \\exp\\left( \\frac{(1-\\alpha)F\\eta}{RT} \\right) $$\n其中转移的电子数 $n$ 为 1。\n\n考虑到 $\\alpha$ 对 $\\eta$ 的线性依赖关系，阳极电流密度 $j_a$ 并不随过电位单调增加。相反，它会在某个特定的过电位处达到一个最大值。请确定阳极电流密度 $j_a$ 达到最大值时的阳极过电位 $\\eta_{\\text{max}}$ 的值。请用 $\\alpha_0$ 和 $\\beta$ 将你的答案表示为符号表达式。", "solution": "我们从大正过电位下的阳极电流密度近似公式开始：\n$$\nj_{a} = j_{0} \\exp\\left( \\frac{(1-\\alpha)F\\eta}{R T} \\right).\n$$\n在这个假设的系统中，电荷转移系数与过电位呈线性关系：\n$$\n\\alpha(\\eta) = \\alpha_{0} + \\beta \\eta.\n$$\n将此关系代入 $j_{a}$ 的表达式，得到\n$$\nj_{a} = j_{0} \\exp\\left( \\frac{\\left[1 - (\\alpha_{0} + \\beta \\eta)\\right]F\\eta}{R T} \\right)\n= j_{0} \\exp\\left( \\frac{F}{R T}\\left[(1-\\alpha_{0})\\eta - \\beta \\eta^{2}\\right] \\right).\n$$\n令\n$$\n\\phi(\\eta) = \\frac{F}{R T}\\left[(1-\\alpha_{0})\\eta - \\beta \\eta^{2}\\right].\n$$\n由于 $j_{0}$ 和前置因子 $F/(R T)$ 均为正常数，最大化 $j_{a}$ 等价于最大化 $\\phi(\\eta)$，亦即等价于最大化以下二次函数\n$$\ng(\\eta) = (1-\\alpha_{0})\\eta - \\beta \\eta^{2}.\n$$\n计算其关于 $\\eta$ 的导数：\n$$\n\\frac{d g}{d \\eta} = (1-\\alpha_{0}) - 2\\beta \\eta.\n$$\n令该导数为零以求得临界点：\n$$\n(1-\\alpha_{0}) - 2\\beta \\eta = 0 \\quad \\Rightarrow \\quad \\eta_{\\text{max}} = \\frac{1 - \\alpha_{0}}{2\\beta}.\n$$\n为确认其为最大值，计算二阶导数：\n$$\n\\frac{d^{2} g}{d \\eta^{2}} = -2\\beta  0 \\quad \\text{for} \\quad \\beta  0,\n$$\n这确保了该临界点确实是一个最大值。因此，阳极电流密度 $j_{a}$ 在以下过电位处达到最大值：\n$$\n\\eta_{\\text{max}} = \\frac{1 - \\alpha_{0}}{2\\beta}.\n$$", "answer": "$$\\boxed{\\frac{1-\\alpha_{0}}{2\\beta}}$$", "id": "1296566"}, {"introduction": "现代物理化学研究高度依赖于理论模型与实验数据的结合。本实践是一项综合性的计算练习，旨在将巴特勒-沃尔默方程的理论应用于模拟的实验数据分析中。您将扮演一名研究者的角色，任务是从包含噪声的电流-电位数据中提取关键的动力学参数，如交换电流密度 $i_0$ 和电荷转移系数 $\\alpha$。更进一步，您将使用严格的统计学方法（F检验）来判断一个更复杂的模型（$\\alpha$ 随温度变化）是否比一个更简单的模型（$\\alpha$ 为常数）更能解释数据。这项练习将全面锻炼您在模型拟合、参数估计和假设检验方面的计算与数据科学技能[@problem_id:2635899]，是连接电化学理论与定量分析实践的桥梁。", "problem": "您需要编写一个完整的程序，从过渡态理论和电化学热力学的基础原理出发，为动力学控制下平面电极上的电化学电荷转移反应，构建并解决一个同步非线性参数估计问题。您必须假设反应为单电子反应，传质限制可忽略，单位活度被吸收到交换电流密度中，并通过选择参考电极将平衡电势设置为零。待估计的未知数是每个温度下的交换电流密度和每个温度下的转移系数，并附加一个假设检验，以验证转移系数是不随温度变化的。\n\n推导起点：利用过渡态理论和细致平衡原理，描述在外加过电势下阳极和阴极基元步骤，从而获得以交换电流密度和转移系数（该系数将静电驱动力分配给正向和反向活化能垒）表示的单电子反应的电流-过电势关系。然后，基于此推导出的关系，建立一个针对所有温度和过电势的加权非线性最小二乘目标，通过最小化加权残差平方和来同时估计未知参数。\n\n您的模型和数值计算中应使用的实验常数：\n- 气体常数：$R = 8.314 \\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$。\n- 法拉第常数：$F = 96485 \\,\\mathrm{C\\,mol^{-1}}$。\n- 电子数：$n = 1$。\n- 平衡电势：$E_{\\mathrm{eq}} = 0 \\,\\mathrm{V}$。\n\n合成数据生成方案（用于在您的程序内部构建测试套件数据集）：\n- 对每种情况，使用物理推导的电流-过电势关系以及给定的真实参数值和温度，构建作为过电势函数的电流密度数据。交换电流密度作为温度的函数通过 Arrhenius 定律 $i_{0}(T) = i_{00}\\,\\exp\\!\\left(-E_{\\mathrm{a}}/(R\\,T)\\right)$ 生成，其中指前因子 $i_{00}$ 和活化能 $E_{\\mathrm{a}}$ 如下文指定。为每个电流数据点添加独立的零均值高斯噪声，其标准差在每个温度下定义为 $\\sigma_{T} = r \\times \\max_{\\eta}\\{|i(T,\\eta)|\\}$，其中 $r$ 是预设的相对噪声水平。所有情况使用相同的 $r$。单位为：电流密度 $\\mathrm{A\\,m^{-2}}$，温度 $\\mathrm{K}$，过电势 $\\mathrm{V}$，活化能 $\\mathrm{J\\,mol^{-1}}$，$i_{00}$ $\\mathrm{A\\,m^{-2}}$。\n- 为确保可复现性，使用固定的伪随机种子 $0$。\n\n参数估计任务：\n- 针对每种情况，在涵盖所有温度的组合数据集上定义两个嵌套模型。\n  - 受限模型 $\\mathcal{M}_{\\mathrm{const}\\,\\alpha}$：所有温度共享一个转移系数 $\\alpha$，每个温度 $T_{j}$ 有一个独立的交换电流密度 $i_{0}(T_{j})$。\n  - 完整模型 $\\mathcal{M}_{\\mathrm{free}\\,\\alpha}$：每个温度 $T_{j}$ 有一个独立的转移系数 $\\alpha(T_{j})$ 和一个独立的交换电流密度 $i_{0}(T_{j})$。\n- 通过最小化所有温度和过电势上的总加权残差平方和来拟合这两个模型，对相应温度 $T$ 使用权重 $1/\\sigma_{T}^{2}$。\n- 使用与物理约束一致的界限：$i_{0}(T)0$ 和 $0\\alpha1$。\n- 使用显著性水平为 $0.05$ 的额外平方和 $F$ 检验，检验原假设（即温度不变的转移系数模型 $\\mathcal{M}_{\\mathrm{const}\\,\\alpha}$ 是充分的）与备择假设 $\\mathcal{M}_{\\mathrm{free}\\,\\alpha}$。设 $N$ 为数据点总数，$p_{\\mathrm{const}}$ 为 $\\mathcal{M}_{\\mathrm{const}\\,\\alpha}$ 中的参数数量，$p_{\\mathrm{free}}$ 为 $\\mathcal{M}_{\\mathrm{free}\\,\\alpha}$ 中的参数数量。利用加权残差平方和 $\\mathrm{SSR}_{\\mathrm{const}}$ 和 $\\mathrm{SSR}_{\\mathrm{free}}$，计算\n$$\nF = \\frac{\\left(\\mathrm{SSR}_{\\mathrm{const}} - \\mathrm{SSR}_{\\mathrm{free}}\\right)/(p_{\\mathrm{free}}-p_{\\mathrm{const}})}{\\mathrm{SSR}_{\\mathrm{free}}/(N-p_{\\mathrm{free}})} \\,,\n$$\n及其在自由度为 $(p_{\\mathrm{free}}-p_{\\mathrm{const}},\\, N-p_{\\mathrm{free}})$ 的 $F$ 分布下的相应右尾概率。如果 $p$ 值小于 $0.05$，则拒绝原假设。\n\n测试套件规范（由您的程序生成和分析的三种案例）：\n- 案例 1（真实转移系数不随温度变化的一般情况）：\n  - 温度：$T \\in \\{298, 318, 338\\}\\,\\mathrm{K}$。\n  - 真实转移系数：$\\alpha(T) \\equiv 0.45$。\n  - 过电势网格：$\\eta \\in [-0.12, 0.12]\\,\\mathrm{V}$，共 $121$ 个均匀间隔点。\n  - Arrhenius 参数：$i_{00} = 1.0\\times 10^{6}\\,\\mathrm{A\\,m^{-2}}$，$E_{\\mathrm{a}} = 5.0\\times 10^{4}\\,\\mathrm{J\\,mol^{-1}}$。\n  - 相对噪声水平：$r = 0.002$。\n- 案例 2（真实转移系数随温度变化的一般情况）：\n  - 温度：$T \\in \\{298, 318, 338\\}\\,\\mathrm{K}$。\n  - 真实转移系数：$\\alpha(T) \\in \\{0.35, 0.45, 0.55\\}$，与给定温度按相同顺序对齐。\n  - 过电势网格：$\\eta \\in [-0.15, 0.15]\\,\\mathrm{V}$，共 $151$ 个均匀间隔点。\n  - Arrhenius 参数：$i_{00} = 1.0\\times 10^{6}\\,\\mathrm{A\\,m^{-2}}$，$E_{\\mathrm{a}} = 5.0\\times 10^{4}\\,\\mathrm{J\\,mol^{-1}}$。\n  - 相对噪声水平：$r = 0.002$。\n- 案例 3（近平衡、小过电势区域的边缘情况，真实转移系数随温度变化但可辨识度有限）：\n  - 温度：$T \\in \\{298, 318, 338\\}\\,\\mathrm{K}$。\n  - 真实转移系数：$\\alpha(T) \\in \\{0.20, 0.80, 0.30\\}$，与给定温度按相同顺序对齐。\n  - 过电势网格：$\\eta \\in [-0.005, 0.005]\\,\\mathrm{V}$，共 $101$ 个均匀间隔点。\n  - Arrhenius 参数：$i_{00} = 1.0\\times 10^{6}\\,\\mathrm{A\\,m^{-2}}$，$E_{\\mathrm{a}} = 5.0\\times 10^{4}\\,\\mathrm{J\\,mol^{-1}}$。\n  - 相对噪声水平：$r = 0.002$。\n\n实现要求：\n- 按照上述规定，从基本原理推导电流-过电势关系，并针对给定常数的单电子反应进行实现。\n- 对模型 $\\mathcal{M}_{\\mathrm{const}\\,\\alpha}$ 和 $\\mathcal{M}_{\\mathrm{free}\\,\\alpha}$，通过加权非线性最小二乘法估计参数，同时遵守所述界限。\n- 对每种情况，计算额外平方和 $F$ 统计量及其 $p$ 值，并判断是否在 $0.05$ 的水平上拒绝 $\\alpha$ 不随温度变化的假设。\n\n最终输出格式：\n- 您的程序应生成一行输出，其中包含一个与案例 1、2、3 对齐的三个布尔值的列表，指示在每种情况下是否拒绝温度不变的 $\\alpha$ 的原假设（使用规则 $p0.05$）。该行必须严格遵循 $[\\text{b}_{1},\\text{b}_{2},\\text{b}_{3}]$ 的格式，其中每个 $\\text{b}_{j}$ 为 $\\text{True}$ 或 $\\text{False}$。", "solution": "所述问题是有效的。这是一个在计算物理化学领域中定义明确、有科学依据且客观的任务。它要求从第一性原理推导基本模型，应用标准、稳健的数值方法进行参数估计（非线性最小二乘法），并使用严格的统计假设检验（额外平方和 F 检验）进行模型比较。数据生成的规范，包括所有参数和固定的随机种子，确保了可复现性。所有常数都已提供，且约束条件具有物理意义。因此，我们将直接进行求解。\n\n主要任务是推导单电子电荷转移反应的电流-过电势关系，然后利用这一关系对合成生成的数据进行非线性参数估计和假设检验。\n\n首先，我们推导 Butler-Volmer 方程。考虑在电极表面发生的一般单电子氧化还原反应：\n$$\n\\mathrm{O} + e^- \\rightleftharpoons \\mathrm{R}\n$$\n净电流密度 $i$ 是阳极电流密度 $i_a$（对于氧化反应 $\\mathrm{R} \\to \\mathrm{O} + e^-$）和阴极电流密度 $i_c$（对于还原反应 $\\mathrm{O} + e^- \\to \\mathrm{R}$）之间的差值。\n$$\ni = i_a - i_c\n$$\n根据过渡态理论，这些基元步骤的速率取决于活化自由能 $\\Delta G_a^\\ddagger$ 和 $\\Delta G_c^\\ddagger$。施加相对于平衡电势 $E_{\\mathrm{eq}}$ 的电极电势 $E$ 会改变这些能垒。过电势定义为 $\\eta = E - E_{\\mathrm{eq}}$。电能 $nF\\eta$（对于单电子反应，n=1）的一部分用于改变活化能。这一部分由转移系数 $\\alpha$ 描述，其中 $0  \\alpha  1$。\n\n阳极过程的活化能增加，而阴极过程的活化能减少：\n$$\n\\Delta G_a^\\ddagger(\\eta) = \\Delta G_a^\\ddagger(0) + (1-\\alpha)nF\\eta\n$$\n$$\n\\Delta G_c^\\ddagger(\\eta) = \\Delta G_c^\\ddagger(0) - \\alpha nF\\eta\n$$\n电流密度与这些活化能的指数成正比：\n$$\ni_a \\propto \\exp\\left(-\\frac{\\Delta G_a^\\ddagger(\\eta)}{RT}\\right) = \\exp\\left(-\\frac{\\Delta G_a^\\ddagger(0)}{RT}\\right) \\exp\\left(-\\frac{(1-\\alpha)nF\\eta}{RT}\\right)\n$$\n$$\ni_c \\propto \\exp\\left(-\\frac{\\Delta G_c^\\ddagger(\\eta)}{RT}\\right) = \\exp\\left(-\\frac{\\Delta G_c^\\ddagger(0)}{RT}\\right) \\exp\\left(\\frac{\\alpha nF\\eta}{RT}\\right)\n$$\n在平衡状态（$\\eta=0$）时，净电流为零，因此 $i_a(0) = i_c(0)$。这个平衡电流被定义为交换电流密度 $i_0$。\n$$\ni_0 = i_a(0) = i_c(0)\n$$\n因此，我们可以用 $i_0$ 来表示依赖于电势的电流：\n$$\ni_a(\\eta) = i_0 \\exp\\left(\\frac{(1-\\alpha)nF\\eta}{RT}\\right)\n$$\n$$\ni_c(\\eta) = i_0 \\exp\\left(-\\frac{\\alpha nF\\eta}{RT}\\right)\n$$\n净电流密度则由 Butler-Volmer 方程给出：\n$$\ni(\\eta) = i_a(\\eta) - i_c(\\eta) = i_0 \\left( \\exp\\left[\\frac{(1-\\alpha)nF\\eta}{RT}\\right] - \\exp\\left[-\\frac{\\alpha nF\\eta}{RT}\\right] \\right)\n$$\n对于此问题，给定的电子数为 $n=1$。\n\n该问题要求对来自多个温度的数据进行同步拟合。我们有两个模型需要比较。假设有 $N_T$ 个温度，$\\{T_j\\}_{j=1}^{N_T}$。\n模型 $\\mathcal{M}_{\\mathrm{const}\\,\\alpha}$（受限模型）假设转移系数 $\\alpha$ 在所有温度下都是恒定的。待估计的参数是一个单一的 $\\alpha$ 和每个温度下的一个交换电流密度 $i_0(T_j)$。参数向量为 $P_{\\mathrm{const}} = (\\alpha, i_0(T_1), \\dots, i_0(T_{N_T}))$。参数数量为 $p_{\\mathrm{const}} = 1 + N_T$。\n模型 $\\mathcal{M}_{\\mathrm{free}\\,\\alpha}$（完整模型）允许转移系数随温度变化。待估计的参数是每个温度下的 $\\alpha(T_j)$ 和 $i_0(T_j)$。参数向量为 $P_{\\mathrm{free}} = (\\alpha(T_1), \\dots, \\alpha(T_{N_T}), i_0(T_1), \\dots, i_0(T_{N_T}))$。参数数量为 $p_{\\mathrm{free}} = 2 N_T$。\n\n参数估计通过最小化所有数据点 $(T_j, \\eta_k, i_{jk})$ 的加权残差平方和（SSR）来执行。权重为 $w_j = 1/\\sigma_{T_j}^2$，其中 $\\sigma_{T_j}$ 是温度 $T_j$ 下噪声的标准差。\n待最小化的目标函数是：\n$$\n\\mathrm{SSR} = \\sum_{j=1}^{N_T} \\sum_{k=1}^{N_{\\eta,j}} w_j \\left( i_{jk} - i_{\\mathrm{model}}(T_j, \\eta_k; P) \\right)^2 = \\sum_{j,k} \\left( \\frac{i_{jk} - i_{\\mathrm{model}}(T_j, \\eta_k; P)}{\\sigma_{T_j}} \\right)^2\n$$\n其中 $i_{\\mathrm{model}}$ 是由 Butler-Volmer 方程以参数 $P$ 预测的电流密度。此最小化过程受物理界限 $i_0(T_j)  0$ 和 $0  \\alpha(T_j)  1$ 的约束。\n\n为了检验原假设 $H_0: \\alpha(T) = \\mathrm{constant}$，我们使用额外平方和 F 检验。该检验比较了更复杂的模型（$\\mathcal{M}_{\\mathrm{free}\\,\\alpha}$）所实现的残差平方和的减少量与该模型的残差方差。F 统计量计算如下：\n$$\nF = \\frac{\\left(\\mathrm{SSR}_{\\mathrm{const}} - \\mathrm{SSR}_{\\mathrm{free}}\\right) / (p_{\\mathrm{free}} - p_{\\mathrm{const}})}{\\mathrm{SSR}_{\\mathrm{free}} / (N - p_{\\mathrm{free}})}\n$$\n这里，$\\mathrm{SSR}_{\\mathrm{const}}$ 和 $\\mathrm{SSR}_{\\mathrm{free}}$ 分别是受限模型和完整模型的最小化加权残差平方和。$N$ 是数据点的总数。在原假设下，该统计量服从自由度为 $df_1 = p_{\\mathrm{free}} - p_{\\mathrm{const}}$ 和 $df_2 = N - p_{\\mathrm{free}}$ 的 F 分布。我们计算 p 值，即假设 $H_0$ 为真时，观测到至少与计算值一样大的 F 统计量的概率。如果此 p 值小于显著性水平 $\\alpha_{\\mathrm{sig}} = 0.05$，我们就拒绝原假设，并得出结论：证据支持转移系数是随温度变化的。\n\n计算策略如下：\n1.  对于三个测试案例中的每一个，根据指定的方案生成合成数据。这包括从 Arrhenius 定律计算真实的 $i_0(T)$ 值，使用 Butler-Volmer 方程计算纯净的电流密度，并添加正确缩放的高斯噪声。\n2.  对每个数据集，为每个模型定义一个残差函数，该函数返回一个加权残差向量 $(i_{\\mathrm{model}} - i_{\\mathrm{data}})/\\sigma_T$。\n3.  使用 `scipy.optimize.least_squares` 函数找到使这两个模型残差平方和最小化的参数估计值，同时遵守指定的界限。\n4.  从优化结果中，提取每个模型的最小化加权 SSR。\n5.  使用 `scipy.stats.f` 中 F 分布的生存函数，计算 F 统计量及其对应的 p 值。\n6.  将 p 值与 $0.05$ 进行比较，以决定是否拒绝 $\\alpha$ 不随温度变化的原假设。最终输出将是这三种情况下布尔决策的列表。\n对于案例 3，它研究的是小过电势区域，线性化的 Butler-Volmer 方程为 $i \\approx i_0 nF\\eta / (RT)$。参数 $\\alpha$ 不存在，这表明它将很难从数据中辨识。因此，预计 F 检验将缺乏区分这两个模型的功效，我们预期不会拒绝原假设，无论其真实状态如何。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import least_squares\nfrom scipy.stats import f as f_dist\n\ndef solve():\n    \"\"\"\n    Main function to orchestrate the data generation, parameter estimation,\n    and hypothesis testing for all specified cases.\n    \"\"\"\n    # Define global constants\n    R = 8.314  # Gas constant, J/mol/K\n    F = 96485  # Faraday constant, C/mol\n    n = 1      # Number of electrons\n\n    # Test suite specification\n    test_cases = [\n        {\n            \"name\": \"Case 1: True constant alpha\",\n            \"temps\": np.array([298, 318, 338]),\n            \"true_alphas\": np.array([0.45, 0.45, 0.45]),\n            \"eta_range\": [-0.12, 0.12],\n            \"eta_points\": 121,\n            \"i00\": 1.0e6,\n            \"Ea\": 5.0e4,\n            \"r_noise\": 0.002,\n        },\n        {\n            \"name\": \"Case 2: True varying alpha\",\n            \"temps\": np.array([298, 318, 338]),\n            \"true_alphas\": np.array([0.35, 0.45, 0.55]),\n            \"eta_range\": [-0.15, 0.15],\n            \"eta_points\": 151,\n            \"i00\": 1.0e6,\n            \"Ea\": 5.0e4,\n            \"r_noise\": 0.002,\n        },\n        {\n            \"name\": \"Case 3: Edge case, small overpotential\",\n            \"temps\": np.array([298, 318, 338]),\n            \"true_alphas\": np.array([0.20, 0.80, 0.30]),\n            \"eta_range\": [-0.005, 0.005],\n            \"eta_points\": 101,\n            \"i00\": 1.0e6,\n            \"Ea\": 5.0e4,\n            \"r_noise\": 0.002,\n        },\n    ]\n\n    results = []\n    rng = np.random.default_rng(0) # For reproducible noise\n\n    # Butler-Volmer model function\n    def butler_volmer(params, T, eta, model_type, n_temps, temp_indices):\n        if model_type == 'const':\n            alpha = params[0]\n            i0_values = np.array(params[1:])\n            alpha_per_point = alpha\n            i0_per_point = i0_values[temp_indices]\n        elif model_type == 'free':\n            alpha_values = np.array(params[:n_temps])\n            i0_values = np.array(params[n_temps:])\n            alpha_per_point = alpha_values[temp_indices]\n            i0_per_point = i0_values[temp_indices]\n        \n        exponent = n * F * eta / (R * T)\n        arg_a = (1 - alpha_per_point) * exponent\n        arg_c = -alpha_per_point * exponent\n        i_model = i0_per_point * (np.exp(arg_a) - np.exp(arg_c))\n        return i_model\n\n    # Residual functions for least_squares\n    def residuals(params, T_all, eta_all, i_data_all, sigma_per_temp, model_type, n_temps, temp_indices):\n        i_model = butler_volmer(params, T_all, eta_all, model_type, n_temps, temp_indices)\n        sigma_per_point = sigma_per_temp[temp_indices]\n        return (i_model - i_data_all) / sigma_per_point\n\n    for case in test_cases:\n        # --- 1. Data Generation ---\n        temps = case[\"temps\"]\n        n_temps = len(temps)\n        true_alphas = case[\"true_alphas\"]\n        i00, Ea, r_noise = case[\"i00\"], case[\"Ea\"], case[\"r_noise\"]\n        \n        # Calculate true i0 from Arrhenius law\n        true_i0s = i00 * np.exp(-Ea / (R * temps))\n        \n        # Generate data grid\n        eta_grids = [np.linspace(case[\"eta_range\"][0], case[\"eta_range\"][1], case[\"eta_points\"]) for _ in temps]\n        \n        all_T = []\n        all_eta = []\n        all_i_data = []\n        all_temp_indices = []\n        sigma_per_temp = np.zeros(n_temps)\n        \n        for i, T in enumerate(temps):\n            eta_grid = eta_grids[i]\n            \n            # True current density\n            true_i0 = true_i0s[i]\n            true_alpha = true_alphas[i]\n            exponent = n * F * eta_grid / (R * T)\n            i_clean = true_i0 * (np.exp((1 - true_alpha) * exponent) - np.exp(-true_alpha * exponent))\n            \n            # Add noise\n            sigma_T = r_noise * np.max(np.abs(i_clean))\n            sigma_per_temp[i] = sigma_T\n            noise = rng.normal(0, sigma_T, size=len(eta_grid))\n            i_noisy = i_clean + noise\n            \n            # Aggregate data\n            all_T.extend([T] * len(eta_grid))\n            all_eta.extend(eta_grid)\n            all_i_data.extend(i_noisy)\n            all_temp_indices.extend([i] * len(eta_grid))\n\n        all_T = np.array(all_T)\n        all_eta = np.array(all_eta)\n        all_i_data = np.array(all_i_data)\n        all_temp_indices = np.array(all_temp_indices)\n        N = len(all_i_data)\n\n        # --- 2. Parameter Estimation ---\n        \n        # Model 1: Constant alpha\n        p_const = 1 + n_temps\n        x0_const = [0.5] + list(true_i0s * rng.uniform(0.8, 1.2, size=n_temps))\n        bounds_const = ( [1e-9] * (p_const), [1-1e-9] + [np.inf] * n_temps)\n        \n        res_const = least_squares(\n            residuals, x0_const, bounds=bounds_const,\n            args=(all_T, all_eta, all_i_data, sigma_per_temp, 'const', n_temps, all_temp_indices),\n            method='trf'\n        )\n        ssr_const = np.sum(res_const.fun**2)\n\n        # Model 2: Free alpha\n        p_free = 2 * n_temps\n        x0_free = list(true_alphas * rng.uniform(0.8, 1.2, size=n_temps)) + \\\n                  list(true_i0s * rng.uniform(0.8, 1.2, size=n_temps))\n        bounds_free = ([1e-9] * p_free, [1-1e-9] * n_temps + [np.inf] * n_temps)\n\n        res_free = least_squares(\n            residuals, x0_free, bounds=bounds_free,\n            args=(all_T, all_eta, all_i_data, sigma_per_temp, 'free', n_temps, all_temp_indices),\n            method='trf'\n        )\n        ssr_free = np.sum(res_free.fun**2)\n\n        # --- 3. F-test for model comparison ---\n        df1 = p_free - p_const\n        df2 = N - p_free\n        \n        # Guard against ssr_const  ssr_free due to numerical precision issues\n        if ssr_const = ssr_free or df2 = 0:\n            f_stat = 0.0\n        else:\n            f_stat = ((ssr_const - ssr_free) / df1) / (ssr_free / df2)\n            \n        p_value = f_dist.sf(f_stat, df1, df2)\n        \n        # Decision rule: reject null hypothesis if p-value  0.05\n        reject_null = p_value  0.05\n        results.append(reject_null)\n\n    # Final print statement in the exact required format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2635899"}]}