{"hands_on_practices": [{"introduction": "理解化学反应的第一步往往是描绘其势能面。本练习提供了一个基础的分析性训练，让您亲手实践如何定位势能面上的驻点（反应物、产物、过渡态），并利用Hessian矩阵对其进行分类。通过在一个典型的二维模型势能面上掌握这些技能，您将为解读研究中遇到的复杂高维势能面打下坚实的数学基础。", "problem": "在约化、无量纲的质量加权坐标中，一个反应区域附近的二维势能面 (PES) 由以下模型描述：\n$$\nV(x,y) \\;=\\; a x^{2} \\;+\\; b y^{2} \\;+\\; c x y \\;+\\; d x^{3},\n$$\n其中 $a>0$，$b<0$，$c\\neq 0$，且 $|d|$ 足够小。仅使用以下基本定义来处理该势能面：驻点是梯度为零的点，局部形状由 Hessian 矩阵（二阶导数矩阵）的特征值进行分类。势能面上的过渡态 (TS) 是一个指数为 1 的鞍点，即在该驻点处，Hessian 矩阵恰好有一个负特征值。\n\n从这些定义出发，完成以下任务：\n- 推导并求解驻点条件，以确定所有驻点 $(x^{\\ast},y^{\\ast})$，将其表示为参数 $a$、$b$、$c$ 和 $d$ 的函数。\n- 在每个驻点处，构建 Hessian 矩阵，并根据负特征值的数量对该点进行分类，从第一性原理出发证明你的结论。\n- 确定哪个驻点是控制沿不稳定方向（反应坐标）的反应的过渡态（指数为 1 的鞍点），并将过渡态处的反应坐标曲率定义为该点 Hessian 矩阵的负特征值。\n\n你的最终任务是，仅用 $a$、$b$ 和 $c$ 表示，为过渡态处的反应坐标曲率（即过渡态处 Hessian 矩阵的负特征值）提供精确的闭合形式解析表达式。将你的最终答案表示为单个解析表达式。无需数值取舍。在约化、无量纲单位下进行计算，因此最终答案中无需物理单位。", "solution": "该问题要求分析由函数 $V(x,y) = a x^{2} + b y^{2} + c x y + d x^{3}$ 给出的势能面 (PES)，其中参数满足 $a>0$，$b<0$，$c\\neq 0$，且 $|d|$ 足够小。目标是找到所有驻点，通过分析 Hessian 矩阵对其进行分类，确定过渡态 (TS)，并计算过渡态处的反应坐标曲率。\n\n首先，我们必须确定势能面的驻点。根据定义，驻点是势的梯度 $\\nabla V$ 为零的点 $(x^{\\ast}, y^{\\ast})$。梯度的分量是关于 $x$ 和 $y$ 的偏导数。\n$$\n\\frac{\\partial V}{\\partial x} = 2ax + cy + 3dx^2\n$$\n$$\n\\frac{\\partial V}{\\partial y} = 2by + cx\n$$\n令这些导数为零，得到一个包含两个方程的方程组：\n$$\n\\begin{cases}\n2ax + cy + 3dx^2 = 0 & (1) \\\\\n2by + cx = 0 & (2)\n\\end{cases}\n$$\n由方程 $(2)$，因为 $b<0$ 故 $2b \\neq 0$，我们可以用 $x$ 表示 $y$：\n$$\ny = -\\frac{c}{2b}x\n$$\n将这个 $y$ 的表达式代入方程 $(1)$：\n$$\n2ax + c\\left(-\\frac{c}{2b}x\\right) + 3dx^2 = 0\n$$\n$$\n\\left(2a - \\frac{c^2}{2b}\\right)x + 3dx^2 = 0\n$$\n$$\nx \\left( \\frac{4ab - c^2}{2b} + 3dx \\right) = 0\n$$\n该方程对 $x$ 有两个可能的解。\n\n情况 1：$x^{\\ast} = 0$。\n如果 $x^{\\ast}=0$，则 $y^{\\ast} = -\\frac{c}{2b}(0) = 0$。这给出了第一个驻点，我们记为 $P_1$：\n$$\nP_1 = (0, 0)\n$$\n\n情况 2：第二个因子为零。\n$$\n\\frac{4ab - c^2}{2b} + 3dx = 0\n$$\n求解 $x$，假设 $d \\neq 0$：\n$$\n3dx = -\\left(\\frac{4ab - c^2}{2b}\\right) = \\frac{c^2 - 4ab}{2b}\n$$\n$$\nx^{\\ast} = \\frac{c^2 - 4ab}{6bd}\n$$\n对应的 $y^{\\ast}$ 是：\n$$\ny^{\\ast} = -\\frac{c}{2b}x^{\\ast} = -\\frac{c}{2b} \\left( \\frac{c^2 - 4ab}{6bd} \\right) = -\\frac{c(c^2 - 4ab)}{12b^2 d}\n$$\n这给出了第二个驻点 $P_2$：\n$$\nP_2 = \\left( \\frac{c^2 - 4ab}{6bd}, -\\frac{c(c^2 - 4ab)}{12b^2 d} \\right)\n$$\n接下来，我们通过检查每个点处的二阶导数 Hessian 矩阵来对这两个驻点进行分类。Hessian 矩阵 $\\mathbf{H}$ 由下式给出：\n$$\n\\mathbf{H}(x,y) = \\begin{pmatrix} \\frac{\\partial^2 V}{\\partial x^2} & \\frac{\\partial^2 V}{\\partial x \\partial y} \\\\ \\frac{\\partial^2 V}{\\partial y \\partial x} & \\frac{\\partial^2 V}{\\partial y^2} \\end{pmatrix}\n$$\n所需的二阶偏导数是：\n$$\n\\frac{\\partial^2 V}{\\partial x^2} = 2a + 6dx\n$$\n$$\n\\frac{\\partial^2 V}{\\partial y^2} = 2b\n$$\n$$\n\\frac{\\partial^2 V}{\\partial x \\partial y} = \\frac{\\partial^2 V}{\\partial y \\partial x} = c\n$$\n因此，Hessian 矩阵是：\n$$\n\\mathbf{H}(x,y) = \\begin{pmatrix} 2a + 6dx & c \\\\ c & 2b \\end{pmatrix}\n$$\n现在，我们计算每个驻点处的 Hessian 矩阵。\n\n对于 $P_1 = (0, 0)$：\n$$\n\\mathbf{H}(0,0) = \\begin{pmatrix} 2a & c \\\\ c & 2b \\end{pmatrix}\n$$\n为了对该点进行分类，我们分析该矩阵的特征值。行列式 $\\det(\\mathbf{H})$ 的符号表明了该点的性质。\n$$\n\\det(\\mathbf{H}(0,0)) = (2a)(2b) - c^2 = 4ab - c^2\n$$\n给定约束条件 $a>0$，$b<0$ 和 $c \\neq 0$，$4ab$ 项为负，$-c^2$ 也为负。因此，它们的和严格为负：\n$$\n\\det(\\mathbf{H}(0,0)) < 0\n$$\n行列式是特征值的乘积 $\\lambda_1 \\lambda_2$。负的行列式意味着一个特征值为正，一个为负。根据定义，具有一个正特征值和一个负特征值的驻点是指数为 1 的鞍点。根据问题描述，这就是一个过渡态。\n\n对于 $P_2 = \\left( \\frac{c^2 - 4ab}{6bd}, y_2^{\\ast} \\right)$：\n我们在 $x_2^{\\ast}$ 处计算 Hessian 矩阵的 $(1,1)$ 元：\n$$\nH_{11}(P_2) = 2a + 6d\\left(\\frac{c^2 - 4ab}{6bd}\\right) = 2a + \\frac{c^2 - 4ab}{b} = \\frac{2ab + c^2 - 4ab}{b} = \\frac{c^2 - 2ab}{b}\n$$\n$P_2$ 处的 Hessian 矩阵为：\n$$\n\\mathbf{H}(P_2) = \\begin{pmatrix} \\frac{c^2 - 2ab}{b} & c \\\\ c & 2b \\end{pmatrix}\n$$\n其行列式为：\n$$\n\\det(\\mathbf{H}(P_2)) = \\left(\\frac{c^2 - 2ab}{b}\\right)(2b) - c^2 = 2(c^2 - 2ab) - c^2 = c^2 - 4ab\n$$\n给定 $a>0$，$b<0$，则 $-4ab$ 为正。因为 $c \\neq 0$，$c^2$ 也为正。因此：\n$$\n\\det(\\mathbf{H}(P_2)) = c^2 - 4ab > 0\n$$\n正的行列式表明特征值具有相同的符号。为了确定该符号，我们考察 Hessian 矩阵的迹，即特征值之和。\n$$\n\\mathrm{Tr}(\\mathbf{H}(P_2)) = \\frac{c^2 - 2ab}{b} + 2b = \\frac{c^2 - 2ab + 2b^2}{b}\n$$\n分子由三个正项组成（$c^2 > 0$，$-2ab > 0$，$2b^2 > 0$），所以分子为正。分母 $b$ 为负。因此，迹为负：\n$$\n\\mathrm{Tr}(\\mathbf{H}(P_2)) < 0\n$$\n由于迹（特征值之和）为负，行列式（特征值之积）为正，因此两个特征值都必须为负。这意味着 $P_2$ 是一个局域极大值（指数为 2 的驻点）。\n\n问题将过渡态定义为指数为 1 的鞍点。我们的分析表明，只有 $P_1 = (0,0)$ 符合这个定义。因此，过渡态位于原点。\n\n最后的任务是找到反应坐标曲率，它被定义为过渡态处 Hessian 矩阵的负特征值。我们必须找到 $\\mathbf{H}(0,0) = \\begin{pmatrix} 2a & c \\\\ c & 2b \\end{pmatrix}$ 的特征值。其特征方程为 $\\lambda^2 - \\mathrm{Tr}(\\mathbf{H})\\lambda + \\det(\\mathbf{H}) = 0$。\n$$\n\\lambda^2 - (2a+2b)\\lambda + (4ab - c^2) = 0\n$$\n使用二次公式，特征值 $\\lambda_{\\pm}$ 为：\n$$\n\\lambda_{\\pm} = \\frac{(2a+2b) \\pm \\sqrt{(2a+2b)^2 - 4(4ab - c^2)}}{2}\n$$\n$$\n\\lambda_{\\pm} = (a+b) \\pm \\sqrt{(a+b)^2 - (4ab - c^2)}\n$$\n$$\n\\lambda_{\\pm} = (a+b) \\pm \\sqrt{a^2 + 2ab + b^2 - 4ab + c^2}\n$$\n$$\n\\lambda_{\\pm} = (a+b) \\pm \\sqrt{a^2 - 2ab + b^2 + c^2}\n$$\n$$\n\\lambda_{\\pm} = (a+b) \\pm \\sqrt{(a-b)^2 + c^2}\n$$\n项 $\\sqrt{(a-b)^2 + c^2}$ 严格为正。为了找到负特征值，我们必须比较 $\\sqrt{(a-b)^2 + c^2}$ 的大小与 $|a+b|$ 的大小。\n注意 $(a-b)^2 > (a+b)^2$，因为 $(a-b)^2 - (a+b)^2 = -4ab > 0$。\n所以，$\\sqrt{(a-b)^2 + c^2} > \\sqrt{(a-b)^2} = |a-b|$。\n同样，$\\sqrt{(a-b)^2+c^2} > \\sqrt{(a+b)^2-4ab+c^2} > \\sqrt{(a+b)^2} = |a+b|$。\n因此，项 $(a+b) - \\sqrt{(a-b)^2+c^2}$ 总是负的。这个负特征值是：\n$$\n\\lambda_{-} = (a+b) - \\sqrt{(a-b)^2+c^2}\n$$\n根据问题的定义，该表达式就是过渡态处的反应坐标曲率。它仅是 $a$、$b$ 和 $c$ 的函数，这与问题对最终答案的要求一致。参数 $d$ 决定了非过渡态驻点的位置，但不影响原点处过渡态的性质。", "answer": "$$\n\\boxed{(a+b) - \\sqrt{(a-b)^{2} + c^{2}}}\n$$", "id": "2952104"}, {"introduction": "在定位了驻点之后，下一步是理解它们对于反应动力学的物理意义。本练习聚焦于过渡态及其独特的负曲率特性，正是这种负曲率导致了“虚频率”的出现，它标志着一种不稳定性，驱动体系从反应物跨越能垒到达产物。通过分析一个经典的双阱势，您将能把势能面的静态几何特征与跨越反应能垒的动态过程联系起来。", "problem": "考虑一个一维反应坐标 $q$，其位于一个由四次函数 $V(q)=a q^{4}-b q^{2}$（其中 $a>0$ 且 $b>0$）描述的对称双势阱势能面上。设 $m$ 表示与沿反应坐标 $q$ 运动相关联的恒定有效质量。沿反应坐标的过渡态（也称为鞍点）被定义为 $V(q)$ 的一个驻点，在该点处沿 $q$ 方向的曲率为负。从驻点的定义和牛顿第二定律 $m\\,d^{2}q/dt^{2}=-\\,dV/dq$ 出发，并利用 $V(q)$ 在过渡态坐标 $q^{\\ddagger}$ 附近的二阶泰勒展开，确定该坐标 $q^{\\ddagger}$ 以及表征过渡态附近不稳定模式的相应虚角频率 $\\omega^{\\ddagger}$。将最终答案表示为单个行向量 $\\big(q^{\\ddagger},\\,\\omega^{\\ddagger}\\big)$，用 $a$、$b$ 和 $m$ 的符号形式表达，并省略单位。不要包含任何数值近似。", "solution": "势能面 $V(q)$ 由一维四次函数给出：\n$$V(q) = a q^{4} - b q^{2}$$\n其中 $a > 0$ 且 $b > 0$。这些参数确保了这是一个对称双势阱，其两个极小值点被一个势垒隔开。\n\n首先，我们必须确定势能的驻点。驻点是力（即势的梯度）为零的位置。我们计算 $V(q)$ 对反应坐标 $q$ 的一阶导数，并令其为零：\n$$\\frac{dV}{dq} = \\frac{d}{dq}(a q^{4} - b q^{2}) = 4 a q^{3} - 2 b q$$\n令 $\\frac{dV}{dq} = 0$：\n$$4 a q^{3} - 2 b q = 0$$\n$$2q(2aq^2 - b) = 0$$\n这个方程给出了三个驻点坐标的解：\n$$q = 0$$\n和\n$$q^{2} = \\frac{b}{2a} \\implies q = \\pm\\sqrt{\\frac{b}{2a}}$$\n\n接下来，我们必须通过检查这些驻点处势能的曲率来区分极小值点（稳定态）和过渡态（鞍点）。曲率由二阶导数 $V''(q)$ 给出。\n$$V''(q) = \\frac{d^{2}V}{dq^{2}} = \\frac{d}{dq}(4 a q^{3} - 2 b q) = 12 a q^{2} - 2 b$$\n我们在每个驻点处计算 $V''(q)$ 的值：\n1.  对于 $q=0$：\n    $$V''(0) = 12 a (0)^{2} - 2 b = -2b$$\n    由于 $b > 0$，曲率 $V''(0)$ 为负。根据定义，沿反应坐标曲率为负的驻点即为过渡态。因此，过渡态的坐标是 $q^{\\ddagger} = 0$。\n\n2.  对于 $q = \\pm\\sqrt{\\frac{b}{2a}}$：\n    $$V''\\left(\\pm\\sqrt{\\frac{b}{2a}}\\right) = 12 a \\left(\\frac{b}{2a}\\right) - 2b = 6b - 2b = 4b$$\n    由于 $b > 0$，曲率为正。这些点对应于势能极小值点。\n\n在确定了过渡态坐标为 $q^{\\ddagger}=0$ 之后，我们现在来确定该点附近运动的特征频率。一个有效质量为 $m$ 的粒子沿坐标 $q$ 的运动方程由牛顿第二定律给出：\n$$m \\frac{d^{2}q}{dt^{2}} = -\\frac{dV}{dq}$$\n在过渡态 $q^{\\ddagger}$ 附近，我们可以使用围绕 $q^{\\ddagger}$ 的二阶泰勒级数展开来近似势能 $V(q)$：\n$$V(q) \\approx V(q^{\\ddagger}) + \\frac{dV}{dq}\\bigg|_{q=q^{\\ddagger}}(q-q^{\\ddagger}) + \\frac{1}{2}\\frac{d^{2}V}{dq^{2}}\\bigg|_{q=q^{\\ddagger}}(q-q^{\\ddagger})^{2}$$\n在驻点处，$\\frac{dV}{dq}\\big|_{q=q^{\\ddagger}} = 0$。令 $\\delta q = q - q^{\\ddagger}$。势能变为：\n$$V(q) \\approx V(q^{\\ddagger}) + \\frac{1}{2}V''(q^{\\ddagger})(\\delta q)^{2}$$\n于是，过渡态附近的力为：\n$$-\\frac{dV}{dq} \\approx -V''(q^{\\ddagger})(\\delta q)$$\n将这个力代入运动方程：\n$$m \\frac{d^{2}(\\delta q)}{dt^{2}} = -V''(q^{\\ddagger})(\\delta q)$$\n这可以改写为：\n$$\\frac{d^{2}(\\delta q)}{dt^{2}} + \\left(\\frac{V''(q^{\\ddagger})}{m}\\right)(\\delta q) = 0$$\n这是振子方程的标准形式 $\\frac{d^{2}x}{dt^{2}} + \\omega^{2}x = 0$，其中角频率的平方为 $\\omega^{2} = \\frac{V''(q^{\\ddagger})}{m}$。\n在过渡态 $q^{\\ddagger}=0$ 处，我们已求得 $V''(0) = -2b$。代入此值：\n$$(\\omega^{\\ddagger})^{2} = \\frac{-2b}{m}$$\n因此，角频率 $\\omega^{\\ddagger}$ 是虚数，这是鞍点处不稳定模式的特征，代表着从过渡态的指数发散，而非稳定振荡。\n$$\\omega^{\\ddagger} = \\sqrt{\\frac{-2b}{m}} = i\\sqrt{\\frac{2b}{m}}$$\n其中 $i$ 是虚数单位。\n\n题目要求坐标 $q^{\\ddagger}$ 和虚角频率 $\\omega^{\\ddagger}$。我们已求得：\n$$q^{\\ddagger} = 0$$\n$$\\omega^{\\ddagger} = i\\sqrt{\\frac{2b}{m}}$$\n最终答案以单个行向量的形式呈现。", "answer": "$$ \\boxed{ \\begin{pmatrix} 0 & i\\sqrt{\\frac{2b}{m}} \\end{pmatrix} } $$", "id": "2952096"}, {"introduction": "解析模型固然强大，但我们如何将其与真实的量子化学世界联系起来？本练习旨在弥合这一差距。您将扮演一名计算化学家的角色，将一个多项式模型拟合到一组离散的能量点上，这些数据模拟了从头算（`ab initio`）的计算结果。这项实践任务不仅包括数据拟合，还要求您批判性地评估模型再现关键化学可观测量（如能垒高度和振动频率）的能力，这是现代理论化学研究中的一项至关重要的技能。", "problem": "给定沿假定反应坐标的一维 ab initio 势能数据切片。假设沿反应坐标的势能可由形式为 $V(x) = a x^{4} + b x^{3} + c x^{2} + d x + e$ 的四次多项式近似，其中 $x$ 是无量纲反应坐标，$V$ 是能量，单位为 $\\mathrm{kJ\\ mol^{-1}}$。您的任务是实现一个程序，该程序使用普通最小二乘法将此四次模型拟合到每个数据集，在所提供数据的定义域内，从拟合曲线中识别过渡态（一个局部最大值）和反应物最小值，然后通过将预测的能垒高度和曲率与直接从离散数据获得的值进行比较来评估拟合质量。\n\n应用的基本原理：\n- 势能面为每组核坐标赋予一个能量；沿单一反应坐标 $x$，这变成一个函数 $V(x)$。\n- 相对于反应物最小值 $x_{\\mathrm{R}}$ 的能垒高度定义为 $\\Delta E^{\\ddagger} = V(x_{\\mathrm{TS}}) - V(x_{\\mathrm{R}})$，其中 $x_{\\mathrm{TS}}$ 是一个过渡态坐标，满足 $V'(x_{\\mathrm{TS}}) = 0$ 和 $V''(x_{\\mathrm{TS}}) &lt; 0$。\n- 沿反应坐标在最小值处的曲率由二阶导数 $V''(x)$ 给出；在拟合模型中，$V''(x) = 12 a x^{2} + 6 b x + 2 c$。\n- 对于离散数据 $\\{(x_i, E_i)\\}$，索引 $i$ 处的局部曲率可以通过三点有限差分公式来近似。对于最小值附近的三个不同横坐标 $x_{-1}$、$x_{0}$、$x_{+1}$ 及其能量 $E_{-1}$、$E_{0}$、$E_{+1}$，在 $x_0$ 处的无偏二阶导数近似为\n$$\n\\hat{V}''(x_0) \\approx 2\\left(\\frac{E_{-1}}{(x_{-1}-x_0)(x_{-1}-x_{+1})} + \\frac{E_{0}}{(x_0-x_{-1})(x_0-x_{+1})} + \\frac{E_{+1}}{(x_{+1}-x_{-1})(x_{+1}-x_0)}\\right).\n$$\n\n为每个数据集需实现的步骤：\n- 通过最小化 $\\sum_{i} (V(x_i) - E_i)^2$ 来将 $V(x) = a x^{4} + b x^{3} + c x^{2} + d x + e$ 拟合到给定的点集 $\\{(x_i, E_i)\\}$，其中最小化是相对于系数 $a$、$b$、$c$、$d$、$e$。\n- 通过求解 $V'(x) = 0$ 计算拟合的 $V(x)$ 的驻点，其中 $V'(x) = 4 a x^{3} + 3 b x^{2} + 2 c x + d$。\n- 在所提供的 $x$ 值所跨越的闭区间 $[x_{\\min}, x_{\\max}]$ 内，选择：\n  - 过渡态 $x_{\\mathrm{TS}}$：任何满足 $V''(x_{\\mathrm{TS}}) < 0$ 且在此类点中使 $V(x)$ 最大的实驻点。如果不存在这样的点，则使用 $[x_{\\min}, x_{\\max}]$ 中使 $V(x)$ 最大的点作为备用方案。\n  - 反应物最小值 $x_{\\mathrm{R,fit}}$：任何满足 $V''(x_{\\mathrm{R,fit}}) > 0$ 的实驻点，且该点与所提供的反应物索引 $i_{\\mathrm{R}}$ （其坐标为 $x_{\\mathrm{R,data}} = x_{i_{\\mathrm{R}}}$）最接近（在 $|x - x_{\\mathrm{R,data}}|$ 意义下）。如果不存在这样的点，则使用 $x_{\\mathrm{R,data}}$ 作为备用方案。\n- 计算三个指标：\n  1. 拟合的均方根误差 (RMSE)，单位为 $\\mathrm{kJ\\ mol^{-1}}$，\n  $$\n  \\mathrm{RMSE} = \\sqrt{\\frac{1}{N}\\sum_{i=1}^{N} \\left(V(x_i) - E_i\\right)^2}.\n  $$\n  2. 能垒高度的绝对误差，单位为 $\\mathrm{kJ\\ mol^{-1}}$，\n  $$\n  \\left| \\left(V(x_{\\mathrm{TS}}) - V(x_{\\mathrm{R,fit}})\\right) - \\left(\\max_i E_i - E_{i_{\\mathrm{R}}}\\right) \\right|.\n  $$\n  3. 反应物最小值处曲率的绝对误差，单位为 $\\mathrm{kJ\\ mol^{-1}}$ 每平方坐标单位，\n  $$\n  \\left| V''(x_{\\mathrm{R,fit}}) - \\hat{V}''(x_{i_{\\mathrm{R}}}) \\right|,\n  $$\n  其中 $\\hat{V}''(x_{i_{\\mathrm{R}}})$ 使用上述三点公式计算，索引为 $i_{\\mathrm{R}}-1$、$i_{\\mathrm{R}}$、$i_{\\mathrm{R}}+1$。\n\n数据集（能量单位为 $\\mathrm{kJ\\ mol^{-1}}$，反应坐标 $x$ 无量纲）：\n- 情况 1：\n  - $x = [-1.5,\\ -1.0,\\ -0.5,\\ 0.0,\\ 0.5,\\ 1.0,\\ 1.5]$\n  - $E = [28.08,\\ 0.03,\\ 10.09,\\ 17.95,\\ 10.12,\\ -0.02,\\ 28.15]$\n  - 反应物索引 $i_{\\mathrm{R}} = 1$（即 $x_{\\mathrm{R,data}} = -1.0$）\n- 情况 2：\n  - $x = [-1.6,\\ -1.2,\\ -0.8,\\ -0.4,\\ 0.0,\\ 0.4,\\ 0.8,\\ 1.2]$\n  - $E = [30.55,\\ -1.12,\\ -0.10,\\ 10.62,\\ 17.02,\\ 14.55,\\ 7.98,\\ 10.88]$\n  - 反应物索引 $i_{\\mathrm{R}} = 1$（即 $x_{\\mathrm{R,data}} = -1.2$）\n- 情况 3：\n  - $x = [-1.5,\\ -1.0,\\ -0.5,\\ 0.0,\\ 0.5,\\ 1.0]$\n  - $E = [9.45,\\ -2.05,\\ 3.48,\\ 8.10,\\ 5.47,\\ 2.02]$\n  - 反应物索引 $i_{\\mathrm{R}} = 1$（即 $x_{\\mathrm{R,data}} = -1.0$）\n\n不涉及角度单位。没有百分比。\n\n要求输出：\n- 对于每种情况，按顺序生成三个数字：$\\mathrm{RMSE}$、能垒高度绝对误差、曲率绝对误差。所有值必须四舍五入到恰好 $6$ 位小数。\n- 将所有三种情况的结果汇总到一行，形式为方括号内包含的逗号分隔列表，顺序为\n$[\\mathrm{RMSE}_1,\\ \\mathrm{BHerr}_1,\\ \\mathrm{CurvErr}_1,\\ \\mathrm{RMSE}_2,\\ \\mathrm{BHerr}_2,\\ \\mathrm{CurvErr}_2,\\ \\mathrm{RMSE}_3,\\ \\mathrm{BHerr}_3,\\ \\mathrm{CurvErr}_3]$，\n例如，$[0.123456,0.234567,0.345678, \\dots ]$。\n\n测试套件：\n- 上述三个数据集构成了完整的测试套件。它们涵盖了对称双阱能垒（情况 1）、不对称倾斜能垒（情况 2）以及带倾斜的相对平坦能垒（情况 3）。边界情况包括检查在数据域内正确选择驻点，以及在离散最大值与精确驻点不重合时的鲁棒性。\n\n您的程序必须是自包含的，不需要用户输入，并严格按照上述格式打印一行输出。所有能量量均以 $\\mathrm{kJ\\ mol^{-1}}$ 表示，曲率以 $\\mathrm{kJ\\ mol^{-1}}$ 每平方坐标单位表示。将每个打印的值四舍五入到恰好 $6$ 位小数。", "solution": "我们被要求用一个四次多项式 $V(x) = a x^{4} + b x^{3} + c x^{2} + d x + e$ 来表示势能面沿反应坐标的一维切片，并通过能垒高度和曲率的误差来评估拟合质量。推导从势能面和过渡态的核心定义开始，并采用经过充分检验的数学程序：最小二乘拟合、基于导数的驻点分类和有限差分曲率估计。\n\n基本原理与定义。在 Born–Oppenheimer 图像中，势能面为每个核构型赋予一个能量；限制在单一反应坐标 $x$ 上会产生一个单变量函数 $V(x)$。沿此坐标的过渡态是一个点 $x_{\\mathrm{TS}}$，满足 $V'(x_{\\mathrm{TS}}) = 0$ 和 $V''(x_{\\mathrm{TS}}) < 0$，而反应物最小值是 $x_{\\mathrm{R}}$，满足 $V'(x_{\\mathrm{R}}) = 0$ 和 $V''(x_{\\mathrm{R}}) > 0$。相对于反应物最小值的能垒高度是 $\\Delta E^{\\ddagger} = V(x_{\\mathrm{TS}}) - V(x_{\\mathrm{R}})$。某一点的曲率由二阶导数 $V''(x)$ 量化。对于一个拟合的四次多项式 $V(x) = a x^{4} + b x^{3} + c x^{2} + d x + e$，其导数为 $V'(x) = 4 a x^{3} + 3 b x^{2} + 2 c x + d$ 和 $V''(x) = 12 a x^{2} + 6 b x + 2 c$。\n\n最小二乘拟合。给定数据 $\\{(x_i, E_i)\\}_{i=1}^{N}$，我们寻找系数 $(a,b,c,d,e)$ 以最小化残差平方和 $\\sum_{i=1}^{N} (V(x_i) - E_i)^2$。这是一个在基 $\\{x^{4}, x^{3}, x^{2}, x, 1\\}$ 中的普通最小二乘线性回归，可以写成矩阵形式 $\\mathbf{X}\\boldsymbol{\\beta} \\approx \\mathbf{y}$，其中 $\\mathbf{X}_{i,:} = [x_i^{4}, x_i^{3}, x_i^{2}, x_i, 1]$, $\\boldsymbol{\\beta} = [a, b, c, d, e]^{\\top}$，以及 $\\mathbf{y}_i = E_i$。最小二乘解最小化 $\\|\\mathbf{X}\\boldsymbol{\\beta} - \\mathbf{y}\\|_{2}^{2}$，并且可以使用数值稳定的算法（例如由标准线性求解器实现的奇异值分解）来获得。\n\n驻点的识别。为了从拟合中定位候选的过渡态和最小值，我们求解 $V'(x) = 0$。由于 $V'(x)$ 是一个三次多项式 $4 a x^{3} + 3 b x^{2} + 2 c x + d$，它最多有三个实根。我们计算所有根，保留虚部可忽略不计的根，并限制在所提供 $x$ 值所跨越的区间 $[x_{\\min}, x_{\\max}]$ 内。然后我们通过计算 $V''(x^{*})$ 来对每个实根 $x^{*}$ 进行分类：\n- 如果 $V''(x^{*}) < 0$，$x^{*}$ 是一个局部最大值候选点。在这些点中，我们选择具有最大 $V(x^{*})$ 值的点作为 $x_{\\mathrm{TS}}$。如果区间内没有这样的驻点最大值，我们回退到一种备用方案，即在一个足够精细的网格上近似，取 $[x_{\\min}, x_{\\max}]$ 中使 $V(x)$ 最大的 $x$ 值，以避免错过窄峰。\n- 如果 $V''(x^{*}) > 0$，$x^{*}$ 是一个局部最小值候选点。我们选择预测的反应物最小值 $x_{\\mathrm{R,fit}}$ 作为最接近所提供的反应物坐标 $x_{\\mathrm{R,data}}$ （与提供的反应物索引相关联）的最小值候选点。如果区间内没有这样的驻点最小值，我们就回退到 $x_{\\mathrm{R,fit}} = x_{\\mathrm{R,data}}$。\n\n能垒高度与 RMSE。在指定了 $x_{\\mathrm{TS}}$ 和 $x_{\\mathrm{R,fit}}$ 后，我们计算拟合的能垒高度 $\\Delta E^{\\ddagger}_{\\mathrm{fit}} = V(x_{\\mathrm{TS}}) - V(x_{\\mathrm{R,fit}})$。对于基于数据的能垒，我们使用 $\\Delta E^{\\ddagger}_{\\mathrm{data}} = \\max_{i} E_i - E_{i_{\\mathrm{R}}}$，这是在不进行插值的情况下可用的最佳离散近似。绝对能垒误差是 $|\\Delta E^{\\ddagger}_{\\mathrm{fit}} - \\Delta E^{\\ddagger}_{\\mathrm{data}}|$。均方根误差计算为 $\\mathrm{RMSE} = \\sqrt{N^{-1}\\sum_{i=1}^{N} (V(x_i) - E_i)^2}$，其中 $N$ 是数据点的数量。\n\n从数据计算曲率。从拟合得到的反应物曲率是 $V''(x_{\\mathrm{R,fit}}) = 12 a x_{\\mathrm{R,fit}}^{2} + 6 b x_{\\mathrm{R,fit}} + 2 c$。从离散数据中，我们使用一个适用于非均匀网格的三点有限差分公式来近似反应物索引 $i_{\\mathrm{R}}$ 处的曲率。令 $x_{-1} = x_{i_{\\mathrm{R}}-1}$，$x_{0} = x_{i_{\\mathrm{R}}}$，$x_{+1} = x_{i_{\\mathrm{R}}+1}$，以及 $E_{-1}$，$E_{0}$，$E_{+1}$ 为相应的能量。那么\n$$\n\\hat{V}''(x_0) \\approx 2\\left(\\frac{E_{-1}}{(x_{-1}-x_0)(x_{-1}-x_{+1})} + \\frac{E_{0}}{(x_0-x_{-1})(x_0-x_{+1})} + \\frac{E_{+1}}{(x_{+1}-x_{-1})(x_{+1}-x_0)}\\right).\n$$\n这是通过对穿过这三点的唯一二次拉格朗日插值多项式求导，并在 $x_0$ 处计算二阶导数得到的。绝对曲率误差则为 $|V''(x_{\\mathrm{R,fit}}) - \\hat{V}''(x_{i_{\\mathrm{R}}})|$。\n\n算法实现。对于每种情况：\n- 构建以 $x^{4}$、$x^{3}$、$x^{2}$、$x$ 和 $1$ 为列的设计矩阵，并求解最小二乘问题以获得 $(a,b,c,d,e)$。\n- 计算导数三次多项式的根，并筛选出在 $[x_{\\min}, x_{\\max}]$ 内的实根。通过 $V''$ 进行分类以识别最大值和最小值。\n- 根据上述规则选择 $x_{\\mathrm{TS}}$ 和 $x_{\\mathrm{R,fit}}$，如果需要，在 $[x_{\\min}, x_{\\max}]$ 内使用基于网格的备用方案。\n- 计算 $\\mathrm{RMSE}$、数据能垒高度 $\\max_i E_i - E_{i_{\\mathrm{R}}}$、拟合能垒高度 $V(x_{\\mathrm{TS}}) - V(x_{\\mathrm{R,fit}})$、通过三点公式计算的数据曲率，以及通过 $12 a x^{2} + 6 b x + 2 c$ 在 $x_{\\mathrm{R,fit}}$ 处计算的拟合曲率。\n- 取能垒和曲率误差的绝对差。\n- 将 $\\mathrm{RMSE}$、能垒误差和曲率误差四舍五入到恰好 $6$ 位小数。\n\n输出将所有三种情况的三元组聚合到一个由方括号括起来的逗号分隔值列表中，确保格式简洁且可由程序检验。所有能量单位均为 $\\mathrm{kJ\\ mol^{-1}}$，曲率单位为 $\\mathrm{kJ\\ mol^{-1}}$ 每平方坐标单位，其中坐标是无量纲的。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef fit_quartic_least_squares(x, E):\n    \"\"\"\n    Fit V(x) = a x^4 + b x^3 + c x^2 + d x + e by ordinary least squares.\n    Returns coefficients [a,b,c,d,e].\n    \"\"\"\n    x = np.asarray(x, dtype=float)\n    E = np.asarray(E, dtype=float)\n    # Design matrix with columns: x^4, x^3, x^2, x, 1\n    X = np.vstack([x**4, x**3, x**2, x, np.ones_like(x)]).T\n    coeffs, _, _, _ = np.linalg.lstsq(X, E, rcond=None)\n    return coeffs  # a,b,c,d,e\n\ndef polyval_quartic(coeffs, x):\n    a, b, c, d, e = coeffs\n    x = np.asarray(x, dtype=float)\n    return ((a*x + b)*x + c)*x**2 + d*x + e  # improved numerical but clear version\n\ndef polyder_coeffs(coeffs):\n    a, b, c, d, e = coeffs\n    # derivative: 4a x^3 + 3b x^2 + 2c x + d\n    return np.array([4*a, 3*b, 2*c, d], dtype=float)\n\ndef poly2nd_coeffs(coeffs):\n    a, b, c, d, e = coeffs\n    # second derivative: 12 a x^2 + 6 b x + 2 c\n    return np.array([12*a, 6*b, 2*c], dtype=float)\n\ndef polyval_poly(coeffs, x):\n    # Generic polynomial evaluation with highest degree first\n    # coeffs array like [c_n, c_{n-1}, ..., c_0]\n    return np.polyval(coeffs, x)\n\ndef real_roots_in_interval(poly_coeffs, xmin, xmax, imag_tol=1e-10):\n    roots = np.roots(poly_coeffs)\n    real_roots = []\n    for r in roots:\n        if abs(r.imag) <= imag_tol:\n            xr = r.real\n            if (xr >= xmin - 1e-12) and (xr <= xmax + 1e-12):\n                real_roots.append(xr)\n    return np.array(sorted(real_roots), dtype=float)\n\ndef select_ts_and_minima(coeffs, x_data, xR_data):\n    \"\"\"\n    Select transition state (maximum) and reactant minimum near xR_data\n    from stationary points of the fitted quartic within data domain.\n    Fallbacks: use grid max for TS, use xR_data for reactant minimum if needed.\n    \"\"\"\n    xmin, xmax = float(np.min(x_data)), float(np.max(x_data))\n    d1 = polyder_coeffs(coeffs)\n    d2 = poly2nd_coeffs(coeffs)\n    # Stationary points in domain\n    stat_pts = real_roots_in_interval(d1, xmin, xmax)\n    # Classify by second derivative\n    maxima = []\n    minima = []\n    for x0 in stat_pts:\n        curv = polyval_poly(d2, x0)\n        if curv < 0:\n            maxima.append(x0)\n        elif curv > 0:\n            minima.append(x0)\n        # if exactly zero curvature, ignore as inflection or degenerate\n    maxima = np.array(maxima, dtype=float) if len(maxima) > 0 else np.array([], dtype=float)\n    minima = np.array(minima, dtype=float) if len(minima) > 0 else np.array([], dtype=float)\n\n    # Transition state selection\n    if maxima.size > 0:\n        # choose the one with highest V\n        Vs = polyval_quartic(coeffs, maxima)\n        idx = int(np.argmax(Vs))\n        x_ts = float(maxima[idx])\n    else:\n        # Fallback: grid search max on dense grid\n        grid = np.linspace(xmin, xmax, 2001)\n        Vg = polyval_quartic(coeffs, grid)\n        x_ts = float(grid[int(np.argmax(Vg))])\n\n    # Reactant minimum selection\n    if minima.size > 0:\n        idx = int(np.argmin(np.abs(minima - xR_data)))\n        x_rmin = float(minima[idx])\n    else:\n        x_rmin = float(xR_data)\n\n    return x_ts, x_rmin\n\ndef rmse(y_true, y_pred):\n    y_true = np.asarray(y_true, dtype=float)\n    y_pred = np.asarray(y_pred, dtype=float)\n    return float(np.sqrt(np.mean((y_true - y_pred)**2)))\n\ndef curvature_three_point(xm, x0, xp, fm, f0, fp):\n    \"\"\"\n    Second derivative at x0 from three-point Lagrange formula, valid for nonuniform spacing.\n    \"\"\"\n    # Avoid division by zero in degenerate input\n    denom1 = (xm - x0) * (xm - xp)\n    denom2 = (x0 - xm) * (x0 - xp)\n    denom3 = (xp - xm) * (xp - x0)\n    return float(2.0 * (fm/denom1 + f0/denom2 + fp/denom3))\n\ndef evaluate_case(x, E, r_index):\n    x = np.asarray(x, dtype=float)\n    E = np.asarray(E, dtype=float)\n    coeffs = fit_quartic_least_squares(x, E)\n    Vfit = polyval_quartic(coeffs, x)\n    case_rmse = rmse(E, Vfit)\n\n    # Stationary-point based selection\n    xR_data = float(x[r_index])\n    x_ts, x_rmin = select_ts_and_minima(coeffs, x, xR_data)\n\n    # Barrier heights\n    V_ts = float(polyval_quartic(coeffs, x_ts))\n    V_rmin_fit = float(polyval_quartic(coeffs, x_rmin))\n    barrier_fit = V_ts - V_rmin_fit\n\n    barrier_data = float(np.max(E) - E[r_index])\n    barrier_err = abs(barrier_fit - barrier_data)\n\n    # Curvature: fitted at x_rmin\n    d2 = poly2nd_coeffs(coeffs)\n    curv_fit = float(polyval_poly(d2, x_rmin))\n\n    # Curvature: data at r_index using neighbors\n    if r_index - 1 < 0 or r_index + 1 >= len(x):\n        # If neighbors do not exist, fall back to simple equal-spacing approx if possible.\n        # In given test suite, neighbors exist. For completeness:\n        curv_data = np.nan\n    else:\n        curv_data = curvature_three_point(x[r_index-1], x[r_index], x[r_index+1],\n                                          E[r_index-1], E[r_index], E[r_index+1])\n    curv_err = abs(curv_fit - curv_data)\n\n    return case_rmse, barrier_err, curv_err\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (x array, E array, reactant index r_index)\n        ([-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5],\n         [28.08, 0.03, 10.09, 17.95, 10.12, -0.02, 28.15],\n         1),\n        ([-1.6, -1.2, -0.8, -0.4, 0.0, 0.4, 0.8, 1.2],\n         [30.55, -1.12, -0.10, 10.62, 17.02, 14.55, 7.98, 10.88],\n         1),\n        ([-1.5, -1.0, -0.5, 0.0, 0.5, 1.0],\n         [9.45, -2.05, 3.48, 8.10, 5.47, 2.02],\n         1),\n    ]\n\n    results = []\n    for x, E, r_index in test_cases:\n        case_rmse, barrier_err, curv_err = evaluate_case(x, E, r_index)\n        # Round to exactly 6 decimal places\n        results.extend([\n            f\"{case_rmse:.6f}\",\n            f\"{barrier_err:.6f}\",\n            f\"{curv_err:.6f}\",\n        ])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2952105"}]}