{"hands_on_practices": [{"introduction": "第一个练习提供了一个应用正则溶液理论的基本实践。你将利用给定的相互作用参数 $\\Omega$ 计算一个组分在无限稀释极限下的活度系数。这项基础技能对于量化分子间相互作用如何导致溶液偏离理想行为至关重要。[@problem_id:2002474]", "problem": "一位化学工程师正在研究由两种非极性有机化合物henone（组分A）和octol（组分B）组成的二元液体混合物。该混合物的热力学行为可以很好地用正规溶液模型来描述，该模型使用单个相互作用参数$\\Omega$来解释与理想行为的偏差。对于此特定混合物，在$298 \\text{ K}$的恒定温度下，通过实验测定相互作用参数为$\\Omega = +5.00 \\text{ kJ mol}^{-1}$。计算当henone（组分A）的摩尔分数趋近于零时，其活度系数。使用普适气体常数$R = 8.314 \\text{ J K}^{-1} \\text{mol}^{-1}$。将最终答案四舍五入至三位有效数字。", "solution": "对于具有单个相互作用参数的二元正规溶液，其超额吉布斯能由下式给出\n$$G^{E} = n x_{A} x_{B} \\Omega,$$\n其中$n$是总摩尔数，$x_{A}$和$x_{B}$是摩尔分数，$\\Omega$是相互作用参数。\n\n活度系数可由超额化学势得出，\n$$\\mu_{i}^{E} = RT \\ln \\gamma_{i}, \\quad \\mu_{i}^{E} = \\left(\\frac{\\partial G^{E}}{\\partial n_{i}}\\right)_{T,P,n_{j\\neq i}}.$$\n将$G^{E} = \\Omega \\frac{n_{A} n_{B}}{n_{A}+n_{B}}$在固定$n_{B}$的情况下对$n_{A}$求导：\n$$\\mu_{A}^{E} = \\Omega \\frac{n_{B}^{2}}{(n_{A}+n_{B})^{2}} = \\Omega x_{B}^{2}.$$\n因此，\n$$\\ln \\gamma_{A} = \\frac{\\mu_{A}^{E}}{RT} = \\frac{\\Omega}{RT} x_{B}^{2}.$$\n在A在B中的无限稀释极限下，$x_{A} \\to 0$ 且 $x_{B} \\to 1$，所以\n$$\\ln \\gamma_{A}^{\\infty} = \\frac{\\Omega}{RT}, \\quad \\gamma_{A}^{\\infty} = \\exp\\!\\left(\\frac{\\Omega}{RT}\\right).$$\n\n代入给定值，并将$\\Omega$转换为一致的单位：\n$$\\Omega = 5.00 \\times 10^{3}\\ \\text{J mol}^{-1}, \\quad R = 8.314\\ \\text{J K}^{-1}\\ \\text{mol}^{-1}, \\quad T = 298\\ \\text{K},$$\n$$\\frac{\\Omega}{RT} = \\frac{5.00 \\times 10^{3}}{8.314 \\times 298} \\approx 2.018,$$\n$$\\gamma_{A}^{\\infty} = \\exp(2.018) \\approx 7.52.$$\n四舍五入至三位有效数字，活度系数为$7.52$。", "answer": "$$\\boxed{7.52}$$", "id": "2002474"}, {"introduction": "虽然最简单的正则溶液模型假设相互作用参数 $\\Omega$ 是一个常数，但实验数据常常表明 $\\Omega$ 依赖于温度。本练习挑战你探索这种依赖性所带来的热力学推论，特别是通过推导超额摩尔焓 ($H_m^E$) 和超额摩尔熵 ($S_m^E$) 的表达式。这项实践将加深你对连接 $G^E$、$H^E$ 和 $S^E$ 的基本吉布斯-亥姆霍兹关系的理解。[@problem_id:2002536]", "problem": "在非理想混合物（例如某些金属合金或聚合物共混物）的研究中，正规溶液模型为理想行为之外的情况提供了一个有用的初步近似。对于一个由组分1和组分2构成的特定二元混合物，大量的实验测量表明，相互作用能参数 $\\Omega$ 不是恒定的，而是与绝对温度 $T$ 呈线性关系。这种行为可以用经验关系式 $\\Omega = A + BT$ 来描述，其中 $A$ 和 $B$ 是该特定混合物的特征常数。设 $x_1$ 和 $x_2$ 分别是组分1和组分2的摩尔分数。该体系的摩尔超额吉布斯能由扩展正规溶液模型给出，为 $G_m^E = \\Omega x_1 x_2$。\n\n利用基本热力学关系，推导出该体系的摩尔超额焓 $H_m^E$ 和摩尔超额熵 $S_m^E$ 的表达式。以一对表达式的形式给出你的最终答案，先是 $H_m^E$ 的表达式，然后是 $S_m^E$ 的表达式。", "solution": "给定一个由扩展正规溶液模型描述的二元混合物，其摩尔超额吉布斯能为\n$$\nG_{m}^{E}=\\Omega x_{1}x_{2}, \\quad \\Omega=A+BT,\n$$\n其中 $A$ 和 $B$ 是常数，$x_{1},x_{2}$ 是摩尔分数。我们旨在利用基本热力学求解 $H_{m}^{E}$ 和 $S_{m}^{E}$。\n\n首先，使用在恒定压力 $P$ 和组成下的摩尔超额熵的恒等式：\n$$\nS_{m}^{E}=-\\left(\\frac{\\partial G_{m}^{E}}{\\partial T}\\right)_{P,x}.\n$$\n在组成固定的情况下，$x_{1}$ 和 $x_{2}$ 相对于 $T$ 是常数，而 $\\Omega$ 仅依赖于 $T$。因此，\n$$\n\\left(\\frac{\\partial G_{m}^{E}}{\\partial T}\\right)_{P,x}\n=\\left(\\frac{\\partial \\Omega}{\\partial T}\\right)_{P}x_{1}x_{2}.\n$$\n已知 $\\Omega=A+BT$，我们有 $\\left(\\frac{\\partial \\Omega}{\\partial T}\\right)_{P}=B$，因此\n$$\nS_{m}^{E}=-Bx_{1}x_{2}.\n$$\n\n接下来，通过 $G=H-TS$ 关联超额焓和吉布斯能，这意味着 $H=G+TS$。根据超额量的线性关系，\n$$\nH_{m}^{E}=G_{m}^{E}+TS_{m}^{E}.\n$$\n代入 $G_{m}^{E}=\\Omega x_{1}x_{2}$ 和 $S_{m}^{E}=-Bx_{1}x_{2}$ 得到\n$$\nH_{m}^{E}=\\Omega x_{1}x_{2}+T\\left(-Bx_{1}x_{2}\\right)\n=\\left(\\Omega-T\\frac{\\partial \\Omega}{\\partial T}\\right)x_{1}x_{2}.\n$$\n已知 $\\Omega=A+BT$ 和 $\\frac{\\partial \\Omega}{\\partial T}=B$，上式变为\n$$\nH_{m}^{E}=Ax_{1}x_{2}.\n$$\n\n因此，所求的表达式为\n$$\nH_{m}^{E}=Ax_{1}x_{2}, \\quad S_{m}^{E}=-Bx_{1}x_{2}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}A x_{1} x_{2} & - B x_{1} x_{2}\\end{pmatrix}}$$", "id": "2002536"}, {"introduction": "将理论与实验现实联系起来，需要稳健的参数估计方法。这个高级计算练习将指导你建立一个现代贝叶斯推断框架，从模拟的气液平衡 (VLE) 数据中确定依赖于温度的溶解度参数。成功完成这项挑战将展示你整合热力学模型与统计数据分析的能力，这是当代化学工程和材料科学中的一项关键技能。[@problem_id:2665948]", "problem": "要求您在正规溶液理论框架内，仅使用第一性原理关系式作为建模基础，对依赖于温度的溶解度参数进行形式化并实现一个基于原理的贝叶斯参数推断。您需要构建一个内部一致的合成汽液平衡数据集，然后对定义 Hildebrand 溶解度参数温度依赖性的参数进行最大后验估计。您的程序必须为一个小型测试套件返回通过/失败的布尔值，该测试套件用于检验不同的可辨识性情况。\n\n建模基础和定义，需作为唯一的出发点：\n- 正规溶液理论假设每摩尔超额吉布斯自由能 $g^{E}$ 由内聚能密度的差异决定。在 Scatchard–Hildebrand 图像中，超额自由能密度与溶解度参数之差的平方成正比。采用常见的体积分数线性混合规则，单位体积的超额自由能表示为 $g^{E}/\\bar{V} = \\phi_{1}\\,\\phi_{2}\\,(\\delta_{1}-\\delta_{2})^{2}$，其中 $\\phi_{i}$ 是组分 $i$ 的液相体积分数，$\\bar{V}$ 是混合物的摩尔体积，$\\delta_{i}$ 是组分 $i$ 的 Hildebrand 溶解度参数。活度系数 $\\gamma_{i}$ 可由超额化学势的定义 $\\ln \\gamma_{i} = \\mu_{i}^{E}/(R\\,T)$ 得出，其中 $\\mu_{i}^{E} = \\left(\\partial (n\\,g^{E})/\\partial n_{i}\\right)_{T,P,n_{j\\neq i}}$，$R$ 是普适气体常数。\n- 在中低压下，修正的 Raoult 定律关联了平衡时的相组成：$y_{i}\\,P = x_{i}\\,\\gamma_{i}\\,P_{i}^{\\mathrm{sat}}(T)$，其中 $x_{i}$ 和 $y_{i}$ 分别是液相和汽相的摩尔分数，$P$ 是系统压力，$P_{i}^{\\mathrm{sat}}(T)$ 是组分 $i$ 在温度 $T$ 下的饱和压力。对于给定温度 $T$ 和液相组成的泡点计算，总压力满足 $P = \\sum_{i} x_{i}\\,\\gamma_{i}\\,P_{i}^{\\mathrm{sat}}(T)$，对应的汽相组成为 $y_{i} = x_{i}\\,\\gamma_{i}\\,P_{i}^{\\mathrm{sat}}(T)\\,\\big/ \\sum_{k} x_{k}\\,\\gamma_{k}\\,P_{k}^{\\mathrm{sat}}(T)$。\n- 一种与内聚能密度论证相一致的、简单且广泛使用的溶解度参数温度依赖性模型是将溶解度参数的平方建模为温度 $T$ 的近似线性函数：$\\delta_{i}^{2}(T) = \\alpha_{i} - \\beta_{i}\\,T$，其中 $\\alpha_{i} > 0$ 且 $\\beta_{i} > 0$。这反映出由于热扰动，内聚能密度随温度升高而降低。\n- 饱和压力可由双参数 Clausius–Clapeyron 型关系式 $\\ln P_{i}^{\\mathrm{sat}}(T) = A_{i} - B_{i}/T$ 建模。此处的对数为自然对数。\n\n您的贝叶斯框架：\n- 参数化：从测量的汽液平衡组成中推断 $\\theta = (\\alpha_{1},\\beta_{1},\\alpha_{2},\\beta_{2})$。\n- 似然函数：假设组分 1 的测量汽相组成存在独立同分布的高斯观测噪声，其标准差 $\\sigma_{y}$ 已知。具体而言，如果模型在温度 $T_{m}$ 预测的值为 $y_{1}^{\\mathrm{model}}(T_{m};\\theta)$，则测量模型为 $y_{1}^{\\mathrm{obs}}(T_{m}) = y_{1}^{\\mathrm{model}}(T_{m};\\theta) + \\varepsilon_{m}$，其中 $\\varepsilon_{m} \\sim \\mathcal{N}(0,\\sigma_{y}^{2})$ 且所有 $\\varepsilon_{m}$ 对于不同的 $m$ 相互独立。\n- 由汽化能学提供信息的先验：内聚能密度近似满足 $\\delta_{i}^{2}(T)\\,V_{i} \\approx \\Delta E_{\\mathrm{coh},i}(T) \\approx \\Delta H_{\\mathrm{vap},i}(T) - R\\,T$，因此 $\\delta_{i}^{2}(T)$ 相对于 $T$ 的斜率在 $R/V_{i}$ 的量级上。使用截断到具有物理意义定义域 $\\alpha_{i} > 0$ 和 $\\beta_{i} > 0$ 的独立高斯先验：\n  - $\\alpha_{i} \\sim \\mathcal{N}(\\mu_{\\alpha},\\sigma_{\\alpha}^{2})$，其中 $\\mu_{\\alpha}$ 是 $\\delta^{2}$ 在环境条件下的一个典型量值，$\\sigma_{\\alpha}$ 足够宽以构成弱信息先验。\n  - $\\beta_{i} \\sim \\mathcal{N}(R/V_{i},\\sigma_{\\beta}^{2})$，其中 $\\sigma_{\\beta}$ 反映了温度导数估计中的不确定性。截断操作强制参数为正，从而确保了 $\\delta_{i}^{2}(T)$ 随 $T$ 物理单调递减的特性。\n- 后验：根据 Bayes 定理，$p(\\theta\\mid \\text{data}) \\propto p(\\text{data}\\mid \\theta)\\,p(\\theta)$。通过最小化负对数后验来计算最大后验 (MAP) 估计。使用边界 $\\alpha_{i} \\in [\\alpha_{\\min},\\alpha_{\\max}]$ 和 $\\beta_{i} \\in [\\beta_{\\min},\\beta_{\\max}]$ 来确保物理合理性和数值稳定性。\n\n需使用的科学常数、单位和固定建模选择：\n- 普适气体常数：$R = 8.314\\times 10^{-6}\\,\\mathrm{MPa\\,m^{3}\\,mol^{-1}\\,K^{-1}}$。\n- 饱和压力模型参数（自然对数，压力单位为 $\\mathrm{bar}$）：$A_{1} = 10.000$，$B_{1} = 3200.0$，$A_{2} = 9.200$，$B_{2} = 2800.0$。因此 $\\ln P_{i}^{\\mathrm{sat}}(T) = A_{i} - B_{i}/T$，其中 $T$ 的单位是 $\\mathrm{K}$，$P_{i}^{\\mathrm{sat}}$ 的单位是 $\\mathrm{bar}$。\n- 活度系数模型：从上述超额自由能基础和定义 $\\ln \\gamma_{i} = \\mu_{i}^{E}/(R\\,T)$ 推导 $\\ln \\gamma_{i}$。使用液相体积分数 $\\phi_{i} = x_{i} V_{i} / (x_{1} V_{1} + x_{2} V_{2})$，其中 $V_{i}$ 是纯液体摩尔体积，单位为 $\\mathrm{m^{3}\\,mol^{-1}}$。\n- 溶解度参数模型：$\\delta_{i}(T) = \\sqrt{\\max(\\epsilon, \\alpha_{i} - \\beta_{i}\\,T)}$，其中 $\\epsilon = 10^{-9}\\,\\mathrm{MPa}$ 以确保数值安全性。报告并推断 $\\alpha_{i}$ 和 $\\beta_{i}$；所有隐含的 $\\delta_{i}$ 值的单位为 $\\mathrm{MPa^{1/2}}$，$\\delta_{i}^{2}$ 的单位为 $\\mathrm{MPa}$。\n- 先验：使用 $\\mu_{\\alpha} = 300.0\\,\\mathrm{MPa}$，$\\sigma_{\\alpha} = 100.0\\,\\mathrm{MPa}$，以及 $\\sigma_{\\beta} = 0.03\\,\\mathrm{MPa\\,K^{-1}}$。截断至 $\\alpha_{i} > 0$ 和 $\\beta_{i} > 0$。优化的边界：$\\alpha_{\\min} = 50.0\\,\\mathrm{MPa}$，$\\alpha_{\\max} = 600.0\\,\\mathrm{MPa}$，$\\beta_{\\min} = 0.01\\,\\mathrm{MPa\\,K^{-1}}$，$\\beta_{\\max} = 0.20\\,\\mathrm{MPa\\,K^{-1}}$。\n- 似然函数中的噪声标准差：$\\sigma_{y}$ 由下文每个测试案例指定；汽相组成为 $[0,1]$ 区间内的无量纲摩尔分数。\n\n需精确实现的合成数据生成协议：\n- 对于给定集合 $\\{T_{m}\\}_{m=1}^{M}$、液相组成 $x_{1}$（其中 $x_{2} = 1 - x_{1}$）、纯液体摩尔体积 $(V_{1},V_{2})$ 以及真实的溶解度参数 $(\\alpha_{1}^{\\star},\\beta_{1}^{\\star},\\alpha_{2}^{\\star},\\beta_{2}^{\\star})$，计算：\n  - $\\delta_{i}(T_{m}) = \\sqrt{\\max(\\epsilon, \\alpha_{i}^{\\star} - \\beta_{i}^{\\star} T_{m})}$,\n  - 液相体积分数 $\\phi_{i}(T_{m}) = x_{i}\\,V_{i}/(x_{1} V_{1} + x_{2} V_{2})$,\n  - 从基本假设推导出的正规溶液表达式计算的活度系数 $\\gamma_{i}(T_{m})$,\n  - 饱和压力 $P_{i}^{\\mathrm{sat}}(T_{m}) = \\exp(A_{i} - B_{i}/T_{m})$，单位 bar,\n  - 泡点压力 $P_{\\mathrm{bub}}(T_{m}) = \\sum_{i=1}^{2} x_{i}\\,\\gamma_{i}(T_{m})\\,P_{i}^{\\mathrm{sat}}(T_{m})$,\n  - 汽相组成 $y_{1}^{\\mathrm{model}}(T_{m}) = x_{1}\\,\\gamma_{1}(T_{m})\\,P_{1}^{\\mathrm{sat}}(T_{m})/P_{\\mathrm{bub}}(T_{m})$,\n  - 观测值 $y_{1}^{\\mathrm{obs}}(T_{m}) = y_{1}^{\\mathrm{model}}(T_{m}) + \\varepsilon_{m}$，其中 $\\varepsilon_{m} \\sim \\mathcal{N}(0,\\sigma_{y}^{2})$ 对于每个 $m$ 独立。\n- 使用固定的随机种子 $s = 1729$ 来抽取高斯噪声，以确保可复现性。\n\n测试套件规范：\n提供三个具有不同可辨识性特征的案例。对于每个测试案例 $k \\in \\{1,2,3\\}$，您的程序必须使用指定的参数，完全按照上述方式生成合成数据，然后对 $\\theta = (\\alpha_{1},\\beta_{1},\\alpha_{2},\\beta_{2})$ 执行 MAP 估计。最后，使用相对误差准则将估计参数 $\\hat{\\theta}$ 与真实参数 $\\theta^{\\star}$ 进行比较，并为该案例返回一个指示成功的布尔值。\n\n- 案例 1 (溶解度参数分离良好):\n  - 温度 (单位 K): $[330.0, 340.0, 350.0, 360.0]$。\n  - 液相组成: $x_{1} = 0.5$。\n  - 摩尔体积 (单位 $\\mathrm{m^{3}\\,mol^{-1}}$): $V_{1} = 1.0\\times 10^{-4}$, $V_{2} = 1.0\\times 10^{-4}$。\n  - 真实参数 (单位 $\\mathrm{MPa}$ 和 $\\mathrm{MPa\\,K^{-1}}$): $(\\alpha_{1}^{\\star},\\beta_{1}^{\\star},\\alpha_{2}^{\\star},\\beta_{2}^{\\star}) = (340.0, 0.080, 260.0, 0.060)$。\n  - 观测噪声: $\\sigma_{y} = 0.005$。\n  - 通过准则: 所有四个相对误差 $|\\hat{\\theta}_{j} - \\theta^{\\star}_{j}|/\\theta^{\\star}_{j}$ 小于 $0.20$。\n\n- 案例 2 (近理想溶液，弱信息数据):\n  - 温度 (单位 K): $[330.0, 340.0, 350.0, 360.0]$。\n  - 液相组成: $x_{1} = 0.5$。\n  - 摩尔体积 (单位 $\\mathrm{m^{3}\\,mol^{-1}}$): $V_{1} = 1.0\\times 10^{-4}$, $V_{2} = 1.0\\times 10^{-4}$。\n  - 真实参数 (单位 $\\mathrm{MPa}$ 和 $\\mathrm{MPa\\,K^{-1}}$): $(\\alpha_{1}^{\\star},\\beta_{1}^{\\star},\\alpha_{2}^{\\star},\\beta_{2}^{\\star}) = (300.0, 0.080, 300.0, 0.080)$。\n  - 观测噪声: $\\sigma_{y} = 0.002$。\n  - 通过准则: 所有四个相对误差小于 $0.35$。\n\n- 案例 3 (不对称的摩尔体积和组成):\n  - 温度 (单位 K): $[330.0, 345.0, 360.0]$。\n  - 液相组成: $x_{1} = 0.3$。\n  - 摩尔体积 (单位 $\\mathrm{m^{3}\\,mol^{-1}}$): $V_{1} = 1.2\\times 10^{-4}$, $V_{2} = 0.8\\times 10^{-4}$。\n  - 真实参数 (单位 $\\mathrm{MPa}$ 和 $\\mathrm{MPa\\,K^{-1}}$): $(\\alpha_{1}^{\\star},\\beta_{1}^{\\star},\\alpha_{2}^{\\star},\\beta_{2}^{\\star}) = (370.0, 0.090, 240.0, 0.050)$。\n  - 观测噪声: $\\sigma_{y} = 0.005$。\n  - 通过准则: 所有四个相对误差小于 $0.25$。\n\n算法要求：\n- 在独立高斯噪声假设下实现对数似然，在独立截断高斯分布假设下实现对数先验。将负对数后验构造为一个加权最小二乘项与来自先验的二次惩罚项之和。\n- 通过一个带边界约束的数值优化器计算 MAP 估计。在先验均值附近使用多次随机重启以减轻局部最小值问题，并返回找到的最佳解。\n- 所有温度单位必须是 $\\mathrm{K}$，压力单位是 $\\mathrm{bar}$，摩尔体积单位是 $\\mathrm{m^{3}\\,mol^{-1}}$，溶解度参数单位是 $\\mathrm{MPa^{1/2}}$，$\\delta_{i}^{2}$ 的单位是 $\\mathrm{MPa}$。确保内部单位一致性。\n\n最终输出规范：\n- 对于每个测试案例 $k \\in \\{1,2,3\\}$，计算一个布尔值，指示是否满足通过准则。\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表（例如，$[result_{1},result_{2},result_{3}]$）。每个 $result_{k}$ 必须是字符串 $\\texttt{True}$ 或 $\\texttt{False}$，分别对应于测试案例 $k$（按 $k=1,2,3$ 的顺序）的布尔值。", "solution": "我们从正规溶液的能量基础出发，通过将基本的热力学定义和贝叶斯估计程序链接起来，构建完整的框架。\n\n首先，针对正规混合物的 Scatchard–Hildebrand 假设指出，超额自由能密度由 $g^{E}/\\bar{V} = \\phi_{1}\\,\\phi_{2}\\,(\\delta_{1}-\\delta_{2})^{2}$ 给出，其中 $\\phi_{i}$ 表示组分 $i$ 的液相体积分数，$\\bar{V}$ 是溶液的摩尔体积。对于二元混合物，$\\phi_{i} = x_{i}\\,V_{i} / (x_{1} V_{1} + x_{2} V_{2})$，其中 $x_{i}$ 是液相摩尔分数，$V_{i}$ 是纯液体摩尔体积。\n\n活度系数可由超额化学势的定义得出。物种 $i$ 的超额化学势由 $\\mu_{i}^{E} = \\left(\\partial (n\\,g^{E}) / \\partial n_{i}\\right)_{T,P,n_{j\\neq i}}$ 给出，而活度系数通过 $\\ln \\gamma_{i} = \\mu_{i}^{E}/(R\\,T)$ 定义。为了计算 $\\mu_{i}^{E}$，我们写出总超额自由能 $n\\,g^{E} = n\\,\\bar{V}\\,\\phi_{1}\\,\\phi_{2}\\,(\\delta_{1}-\\delta_{2})^{2}$，并在恒定 $T$，$P$ 和 $n_{j\\neq i}$ 的条件下对 $n_{i}$ 求导。使用 $\\phi_{i} = x_{i}\\,V_{i} / \\bar{V}$ 和 $\\bar{V} = x_{1} V_{1} + x_{2} V_{2}$，并保持 $V_{i}$ 恒定（不可压缩液体近似），经过直接的代数运算可以得到标准的正规溶液表达式：\n$\\ln \\gamma_{1} = \\dfrac{V_{1}}{R\\,T}\\,\\phi_{2}^{2}\\,(\\delta_{1}-\\delta_{2})^{2}$ 和 $\\ln \\gamma_{2} = \\dfrac{V_{2}}{R\\,T}\\,\\phi_{1}^{2}\\,(\\delta_{1}-\\delta_{2})^{2}$。这些表达式与基本基础一致，并保持了交换标号时的对称性。\n\n接下来，我们关联相组成。在中低压下，当 Poynting 校正可忽略时，修正的 Raoult 定律适用：$y_{i}\\,P = x_{i}\\,\\gamma_{i}\\,P_{i}^{\\mathrm{sat}}(T)$。对于给定 $T$ 和 $x_{i}$ 的泡点计算，一致的总压力满足 $P = \\sum_{k=1}^{2} x_{k}\\,\\gamma_{k}(T)\\,P_{k}^{\\mathrm{sat}}(T)$，这导出了归一化的汽相组成\n$y_{i}(T) = \\dfrac{x_{i}\\,\\gamma_{i}(T)\\,P_{i}^{\\mathrm{sat}}(T)}{\\sum_{k=1}^{2} x_{k}\\,\\gamma_{k}(T)\\,P_{k}^{\\mathrm{sat}}(T)}$。\n对于饱和压力，我们使用双参数的 Clausius–Clapeyron 型关系式 $\\ln P_{i}^{\\mathrm{sat}}(T) = A_{i} - B_{i}/T$，其中 $\\ln$ 为自然对数，$P_{i}^{\\mathrm{sat}}$ 的单位为 $\\mathrm{bar}$。\n\n现在我们通过溶解度参数平方的温度线性形式对其温度依赖性进行参数化：\n$\\delta_{i}^{2}(T) = \\alpha_{i} - \\beta_{i}\\,T$，其中 $\\alpha_{i} > 0$ 且 $\\beta_{i} > 0$。这与内聚能密度诠释 $\\delta_{i}^{2}(T)\\,V_{i} \\approx \\Delta E_{\\mathrm{coh},i}(T) \\approx \\Delta H_{\\mathrm{vap},i}(T) - R\\,T$ 一致，后者意味着相对于温度的负斜率，并启发了斜率的量级约为 $R/V_{i}$。\n\n有了这些组件，对于温度为 $T_m$ 和液相组成为 $x_1$ 的数据点，其正向模型为：\n- 计算 $\\delta_{i}(T_{m}) = \\sqrt{\\max(\\epsilon,\\alpha_{i} - \\beta_{i}\\,T_{m})}$，其中 $\\epsilon$ 为保证数值安全性的一个小的正常数。\n- 计算 $\\phi_{i}(T_{m}) = x_{i}\\,V_{i}/(x_{1} V_{1} + x_{2} V_{2})$。\n- 计算 $\\ln \\gamma_{1} = \\dfrac{V_{1}}{R\\,T_{m}}\\,\\phi_{2}^{2}\\,(\\delta_{1}-\\delta_{2})^{2}$ 和 $\\ln \\gamma_{2} = \\dfrac{V_{2}}{R\\,T_{m}}\\,\\phi_{1}^{2}\\,(\\delta_{1}-\\delta_{2})^{2}$，然后计算 $\\gamma_{i} = \\exp(\\ln \\gamma_{i})$。\n- 计算 $P_{i}^{\\mathrm{sat}}(T_{m}) = \\exp(A_{i} - B_{i}/T_{m})$ 和 $P_{\\mathrm{bub}}(T_{m}) = \\sum_{k} x_{k}\\,\\gamma_{k}(T_{m})\\,P_{k}^{\\mathrm{sat}}(T_{m})$。\n- 返回 $y_{1}^{\\mathrm{model}}(T_{m};\\theta) = x_{1}\\,\\gamma_{1}(T_{m})\\,P_{1}^{\\mathrm{sat}}(T_{m})/P_{\\mathrm{bub}}(T_{m})$。\n\n我们假设 $y_{1}$ 上存在标准差 $\\sigma_{y}$ 已知的独立高斯测量噪声。对于一个数据集 $\\{(T_{m},y_{1,m}^{\\mathrm{obs}})\\}_{m=1}^{M}$，对数似然为\n$\\log p(\\{y_{1,m}^{\\mathrm{obs}}\\}\\mid \\theta) = -\\dfrac{1}{2}\\sum_{m=1}^{M}\\left[\\dfrac{\\left(y_{1,m}^{\\mathrm{obs}} - y_{1}^{\\mathrm{model}}(T_{m};\\theta)\\right)^{2}}{\\sigma_{y}^{2}} + \\ln(2\\pi\\sigma_{y}^{2})\\right]$。\n\n选择的先验旨在编码来自汽化能学的、有物理依据的约束：\n- 对于与 $\\delta_i^2$ 单位相同的 $\\alpha_i$，我们使用截断至 $\\alpha_i > 0$ 的先验 $\\alpha_{i} \\sim \\mathcal{N}(\\mu_{\\alpha},\\sigma_{\\alpha}^{2})$，这反映了 $\\delta^2$ 在中等温度下的一个典型量值，同时保持弱信息性。\n- 对于单位为 $\\mathrm{MPa\\,K^{-1}}$ 的 $\\beta_i$，我们使用截断至 $\\beta_i > 0$ 的先验 $\\beta_{i} \\sim \\mathcal{N}(R/V_{i},\\sigma_{\\beta}^{2})$，其动机是近似斜率 $\\partial \\delta_{i}^{2}/\\partial T \\approx -R/V_{i}$，该关系在 $\\Delta H_{\\mathrm{vap},i}$ 变化缓慢的条件下由 $\\delta_{i}^{2}\\,V_{i} \\approx \\Delta H_{\\mathrm{vap},i} - R\\,T$ 导出。\n我们采用 $\\mu_{\\alpha} = 300.0\\,\\mathrm{MPa}$，$\\sigma_{\\alpha} = 100.0\\,\\mathrm{MPa}$，和 $\\sigma_{\\beta} = 0.03\\,\\mathrm{MPa\\,K^{-1}}$。采用相容单位的普适气体常数为 $R = 8.314\\times 10^{-6}\\,\\mathrm{MPa\\,m^{3}\\,mol^{-1}\\,K^{-1}}$，且摩尔体积在每个测试案例中固定。\n\n对数先验是高斯对数密度之和（忽略截断归一化常数，因为它们是与 MAP 无关的常数偏移量），对数后验是对数似然与对数先验之和。MAP 估计通过最小化受边界 $\\alpha_{i} \\in [\\alpha_{\\min},\\alpha_{\\max}]$ 和 $\\beta_{i} \\in [\\beta_{\\min},\\beta_{\\max}]$ 约束的负对数后验得到，其中 $\\alpha_{\\min} = 50.0\\,\\mathrm{MPa}$，$\\alpha_{\\max} = 600.0\\,\\mathrm{MPa}$，$\\beta_{\\min} = 0.01\\,\\mathrm{MPa\\,K^{-1}}$，以及 $\\beta_{\\max} = 0.20\\,\\mathrm{MPa\\,K^{-1}}$。围绕先验均值的多次随机重启有助于避免局部最小值；我们保留找到的最佳（目标函数值最小）解。\n\n合成数据生成使用相同的正向模型，但使用真实参数 $(\\alpha_{i}^{\\star},\\beta_{i}^{\\star})$ 计算 $y_{1}^{\\mathrm{model}}(T_{m};\\theta^{\\star})$，然后添加独立的、服从 $\\varepsilon_{m} \\sim \\mathcal{N}(0,\\sigma_{y}^{2})$ 的高斯噪声，并使用固定种子以确保可复现性。Clausius–Clapeyron 参数固定为 $A_{1} = 10.000, B_{1} = 3200.0, A_{2} = 9.200, B_{2}=2800.0$，其中 $\\ln$ 为自然对数，$P_{i}^{\\mathrm{sat}}$ 的单位为 $\\mathrm{bar}$。尽管压力不直接进入似然函数，但它们通过泡点表达式中的归一化影响组成预测。\n\n对于三个测试案例中的每一个，推断程序会输出一个估计值 $\\hat{\\theta}$，我们通过逐分量的相对误差 $|\\hat{\\theta}_{j} - \\theta^{\\star}_{j}|/\\theta^{\\star}_{j}$ 将其与真实值 $\\theta^{\\star}$ 进行比较。如果所有四个相对误差都低于该案例指定的阈值，则该案例通过。程序以规定的单行输出格式 $[\\texttt{True},\\texttt{False},\\texttt{True}]$ 风格聚合这些布尔值。\n\n该框架将热力学第一性原理（正规溶液能量学、从超额化学势得出的活度系数、修正的 Raoult 定律）与贝叶斯推断和由能量学启发的先验（通过内聚能密度与汽化热的联系）相结合，为从汽液平衡数据推断温度依赖的溶解度参数提供了一种稳健且物理上可解释的方法。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Fixed random seed for reproducibility of synthetic noise\nRNG = np.random.default_rng(1729)\n\n# Physical constants and model constants\nR = 8.314e-6  # MPa*m^3/(mol*K)\n# Clausius–Clapeyron parameters for ln P_sat (natural log), P in bar\nA1, B1 = 10.000, 3200.0\nA2, B2 = 9.200, 2800.0\n\n# Prior hyperparameters\nmu_alpha = 300.0  # MPa\nsigma_alpha = 100.0  # MPa\nsigma_beta = 0.03  # MPa/K\n\n# Bounds for parameters: alpha1, beta1, alpha2, beta2\nalpha_min, alpha_max = 50.0, 600.0\nbeta_min, beta_max = 0.01, 0.20\n\neps_delta2 = 1e-9  # MPa, safeguard for delta^2 positivity\n\n\ndef psat_ln(T, comp):\n    \"\"\"Natural log of saturation pressure in bar.\"\"\"\n    if comp == 1:\n        return A1 - B1 / T\n    else:\n        return A2 - B2 / T\n\n\ndef compute_activity_coeffs(T, x1, V1, V2, alpha1, beta1, alpha2, beta2):\n    \"\"\"\n    Compute gamma1, gamma2 using regular solution expressions:\n    ln γ1 = (V1/(R*T)) * φ2^2 * (δ1 - δ2)^2\n    ln γ2 = (V2/(R*T)) * φ1^2 * (δ1 - δ2)^2\n    \"\"\"\n    x2 = 1.0 - x1\n    # Volume fractions\n    Vm = x1 * V1 + x2 * V2\n    phi1 = (x1 * V1) / Vm\n    phi2 = (x2 * V2) / Vm\n\n    # Temperature-dependent solubility parameters\n    delta1_sq = max(eps_delta2, alpha1 - beta1 * T)\n    delta2_sq = max(eps_delta2, alpha2 - beta2 * T)\n    delta1 = np.sqrt(delta1_sq)\n    delta2 = np.sqrt(delta2_sq)\n    d12_sq = (delta1 - delta2) ** 2\n\n    ln_gamma1 = (V1 / (R * T)) * (phi2 ** 2) * d12_sq\n    ln_gamma2 = (V2 / (R * T)) * (phi1 ** 2) * d12_sq\n    return np.exp(ln_gamma1), np.exp(ln_gamma2)\n\n\ndef y1_model(Ts, x1, V1, V2, theta):\n    \"\"\"Compute y1 predictions for a sequence of temperatures.\"\"\"\n    alpha1, beta1, alpha2, beta2 = theta\n    y1s = []\n    for T in Ts:\n        gamma1, gamma2 = compute_activity_coeffs(T, x1, V1, V2, alpha1, beta1, alpha2, beta2)\n        P1_sat = np.exp(psat_ln(T, 1))\n        P2_sat = np.exp(psat_ln(T, 2))\n        x2 = 1.0 - x1\n        P_bub = x1 * gamma1 * P1_sat + x2 * gamma2 * P2_sat\n        y1 = (x1 * gamma1 * P1_sat) / P_bub\n        y1s.append(y1)\n    return np.array(y1s)\n\n\ndef neg_log_posterior(theta, Ts, y1_obs, x1, V1, V2, sigma_y):\n    \"\"\"Negative log-posterior: - (log-likelihood + log-prior).\"\"\"\n    alpha1, beta1, alpha2, beta2 = theta\n\n    # Enforce positivity via bounds; additional hard check\n    if (alpha1 <= 0.0) or (alpha2 <= 0.0) or (beta1 <= 0.0) or (beta2 <= 0.0):\n        return 1e300  # effectively infinite\n\n    y_pred = y1_model(Ts, x1, V1, V2, theta)\n    resid = (y1_obs - y_pred)\n    ll = -0.5 * np.sum((resid / sigma_y) ** 2) - 0.5 * len(Ts) * np.log(2.0 * np.pi * sigma_y ** 2)\n\n    # Priors: truncated Gaussians (omit normalization constants)\n    # alpha_i ~ N(mu_alpha, sigma_alpha^2), beta_i ~ N(R/V_i, sigma_beta^2)\n    beta1_mu = R / V1\n    beta2_mu = R / V2\n\n    lp_alpha = -0.5 * (((alpha1 - mu_alpha) / sigma_alpha) ** 2 + ((alpha2 - mu_alpha) / sigma_alpha) ** 2) \\\n               - 2.0 * np.log(sigma_alpha * np.sqrt(2.0 * np.pi))\n    lp_beta = -0.5 * (((beta1 - beta1_mu) / sigma_beta) ** 2 + ((beta2 - beta2_mu) / sigma_beta) ** 2) \\\n              - 2.0 * np.log(sigma_beta * np.sqrt(2.0 * np.pi))\n\n    lp = lp_alpha + lp_beta\n\n    return -(ll + lp)\n\n\ndef map_estimate(Ts, y1_obs, x1, V1, V2, sigma_y, n_restarts=8):\n    \"\"\"Compute MAP estimate with multiple random restarts.\"\"\"\n    bounds = [(alpha_min, alpha_max), (beta_min, beta_max),\n              (alpha_min, alpha_max), (beta_min, beta_max)]\n    best_val = np.inf\n    best_theta = None\n\n    # Prior means as central guesses\n    beta1_mu = R / V1\n    beta2_mu = R / V2\n    mean_guess = np.array([mu_alpha, beta1_mu, mu_alpha, beta2_mu], dtype=float)\n\n    for i in range(n_restarts):\n        # Randomize initial guess around prior means\n        init = mean_guess + RNG.normal(0.0, [30.0, 0.02, 30.0, 0.02])\n        # Project into bounds\n        init = np.array([\n            np.clip(init[0], alpha_min, alpha_max),\n            np.clip(init[1], beta_min, beta_max),\n            np.clip(init[2], alpha_min, alpha_max),\n            np.clip(init[3], beta_min, beta_max),\n        ])\n\n        res = minimize(\n            neg_log_posterior, init,\n            args=(Ts, y1_obs, x1, V1, V2, sigma_y),\n            method=\"L-BFGS-B\",\n            bounds=bounds,\n            options={\"maxiter\": 1000, \"ftol\": 1e-12}\n        )\n        if res.fun < best_val and res.success:\n            best_val = res.fun\n            best_theta = res.x\n\n    # As a fallback, if optimization didn't succeed in any restart, return the prior means projected\n    if best_theta is None:\n        best_theta = mean_guess\n        best_theta[0] = np.clip(best_theta[0], alpha_min, alpha_max)\n        best_theta[1] = np.clip(best_theta[1], beta_min, beta_max)\n        best_theta[2] = np.clip(best_theta[2], alpha_min, alpha_max)\n        best_theta[3] = np.clip(best_theta[3], beta_min, beta_max)\n\n    return best_theta\n\n\ndef generate_synthetic_data(Ts, x1, V1, V2, true_theta, sigma_y):\n    \"\"\"Generate noisy y1 observations using the forward model and fixed RNG.\"\"\"\n    y_clean = y1_model(Ts, x1, V1, V2, true_theta)\n    noise = RNG.normal(0.0, sigma_y, size=len(Ts))\n    return y_clean + noise\n\n\ndef relative_errors(est, true):\n    \"\"\"Component-wise relative absolute error.\"\"\"\n    return np.abs((est - true) / true)\n\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each case: dict with Ts, x1, V1, V2, true_theta, sigma_y, rel_tol\n    test_cases = [\n        {\n            \"Ts\": np.array([330.0, 340.0, 350.0, 360.0]),\n            \"x1\": 0.5,\n            \"V1\": 1.0e-4,\n            \"V2\": 1.0e-4,\n            \"true_theta\": np.array([340.0, 0.080, 260.0, 0.060]),\n            \"sigma_y\": 0.005,\n            \"rel_tol\": 0.20,\n        },\n        {\n            \"Ts\": np.array([330.0, 340.0, 350.0, 360.0]),\n            \"x1\": 0.5,\n            \"V1\": 1.0e-4,\n            \"V2\": 1.0e-4,\n            \"true_theta\": np.array([300.0, 0.080, 300.0, 0.080]),\n            \"sigma_y\": 0.002,\n            \"rel_tol\": 0.35,\n        },\n        {\n            \"Ts\": np.array([330.0, 345.0, 360.0]),\n            \"x1\": 0.3,\n            \"V1\": 1.2e-4,\n            \"V2\": 0.8e-4,\n            \"true_theta\": np.array([370.0, 0.090, 240.0, 0.050]),\n            \"sigma_y\": 0.005,\n            \"rel_tol\": 0.25,\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        Ts = case[\"Ts\"]\n        x1 = case[\"x1\"]\n        V1 = case[\"V1\"]\n        V2 = case[\"V2\"]\n        true_theta = case[\"true_theta\"]\n        sigma_y = case[\"sigma_y\"]\n        rel_tol = case[\"rel_tol\"]\n\n        # Generate synthetic observations\n        y1_obs = generate_synthetic_data(Ts, x1, V1, V2, true_theta, sigma_y)\n\n        # MAP estimation\n        theta_hat = map_estimate(Ts, y1_obs, x1, V1, V2, sigma_y, n_restarts=10)\n\n        # Evaluate relative error pass criterion\n        rel_errs = relative_errors(theta_hat, true_theta)\n        passed = bool(np.all(rel_errs <= rel_tol))\n        results.append(passed)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2665948"}]}