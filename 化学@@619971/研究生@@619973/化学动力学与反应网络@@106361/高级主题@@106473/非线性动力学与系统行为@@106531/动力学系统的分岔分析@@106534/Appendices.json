{"hands_on_practices": [{"introduction": "在分析任何动力学系统的行为之前，首要任务是确定其稳态并评估其稳定性。这个练习将使用著名的“布鲁塞尔振子”（Brusselator）模型，这是一个研究化学振荡的典型例子。通过这个练习，你将实践一项核心技能：通过计算雅可比矩阵对系统进行线性化，并由此确定其稳定性的关键指标——迹 $\\text{Tr}(J)$ 和行列式 $\\det(J)$，这是理解和预测分岔行为的基础。[@problem_id:2628406]", "problem": "考虑一个等温、完美混合的开放式化学反应器的无量纲 Brusselator 模型，其中包含两种动态物质，其浓度分别为 $x(t)$ 和 $y(t)$，且恒化进料浓度 $A>0$ 和 $B>0$。根据质量作用定律，该动力学由以下常微分方程 (ODEs) 描述：\n$$\n\\frac{dx}{dt} \\;=\\; A \\;-\\; (B+1)\\,x \\;+\\; x^{2}\\,y,\\qquad\n\\frac{dy}{dt} \\;=\\; B\\,x \\;-\\; x^{2}\\,y.\n$$\n从稳态和向量场的雅可比矩阵的定义出发，完成以下任务：\n- 用 $A$ 和 $B$ 表示，确定唯一的严格正稳态 $(x^{\\ast},y^{\\ast})$。\n- 计算在 $(x^{\\ast},y^{\\ast})$ 处求值的雅可比矩阵，并由此获得作为 $A$ 和 $B$ 函数的迹和行列式。\n\n将最终答案以单行矩阵的形式报告，该矩阵由迹和行列式组成的有序对构成。无需进行数值计算或四舍五入。这些变量是无量纲的，因此最终答案中不需要单位。", "solution": "问题陈述需进行验证。\n\n**步骤 1：提取已知条件**\n提供的信息如下：\n- 描述物质浓度 $x(t)$ 和 $y(t)$ 动力学的常微分方程（ODEs）组：\n$$\n\\frac{dx}{dt} = f(x,y) = A - (B+1)x + x^{2}y\n$$\n$$\n\\frac{dy}{dt} = g(x,y) = Bx - x^{2}y\n$$\n- 参数为恒化进料浓度 $A$ 和 $B$，它们是严格为正的常数：$A > 0$ 和 $B > 0$。\n- 任务是找到唯一的严格正稳态 $(x^{\\ast}, y^{\\ast})$，然后计算系统在该稳态处求值的雅可比矩阵的迹和行列式。\n\n**步骤 2：使用提取的已知条件进行验证**\n根据既定标准对问题进行评估。\n- **科学依据：** Brusselator 是理论化学动力学和非线性动力学中的一个典型模型，用于研究化学振荡反应。该问题是动力学系统局部稳定性分析中的一个标准练习。它具有科学有效性。\n- **适定性：** 该问题提供了确定唯一解所需的所有定义和方程。要求一个*严格正*稳态，对于浓度不能为非正值的化学系统而言，这是一个标准且明确定义的约束。\n- **客观性：** 问题采用精确的数学语言陈述，没有歧义或主观看法。\n\n**步骤 3：结论与行动**\n该问题被判定为**有效**。它在科学上是合理的、适定的且客观的。没有逻辑矛盾、缺失数据或不科学的前提。可以继续求解过程。\n\n第一个任务是确定系统的稳态，表示为 $(x^{\\ast}, y^{\\ast})$。根据定义，稳态是所有时间导数都为零的点。因此，我们必须求解以下代数方程组：\n$$\n\\frac{dx}{dt} = 0 \\implies A - (B+1)x^{\\ast} + (x^{\\ast})^{2}y^{\\ast} = 0 \\quad (1)\n$$\n$$\n\\frac{dy}{dt} = 0 \\implies Bx^{\\ast} - (x^{\\ast})^{2}y^{\\ast} = 0 \\quad (2)\n$$\n问题要求一个*严格正*稳态，所以我们假设 $x^{\\ast} > 0$ 和 $y^{\\ast} > 0$。从方程 $(2)$ 中，我们可以提取因子 $x^{\\ast}$：\n$$\nx^{\\ast} (B - x^{\\ast}y^{\\ast}) = 0\n$$\n由于 $x^{\\ast} > 0$，我们必然有 $B - x^{\\ast}y^{\\ast} = 0$，这意味着 $(x^{\\ast})^{2}y^{\\ast} = Bx^{\\ast}$。将此结果直接代入方程 $(1)$ 得出：\n$$\nA - (B+1)x^{\\ast} + Bx^{\\ast} = 0\n$$\n$$\nA - Bx^{\\ast} - x^{\\ast} + Bx^{\\ast} = 0\n$$\n$$\nA - x^{\\ast} = 0\n$$\n这给出了 $x$ 的稳态浓度：\n$$\nx^{\\ast} = A\n$$\n为了找到对应的稳态浓度 $y^{\\ast}$，我们将 $x^{\\ast} = A$ 代回关系式 $B - x^{\\ast}y^{\\ast} = 0$ 中：\n$$\nB - Ay^{\\ast} = 0\n$$\n由于 $A > 0$ 是一个给定条件，我们可以解出 $y^{\\ast}$：\n$$\ny^{\\ast} = \\frac{B}{A}\n$$\n因此，唯一的严格正稳态是 $(x^{\\ast}, y^{\\ast}) = (A, \\frac{B}{A})$。$A > 0$ 和 $B > 0$ 的条件确保了 $x^{\\ast}$ 和 $y^{\\ast}$ 确实是严格为正的。\n\n下一个任务是计算向量场 $F(x,y) = (f(x,y), g(x,y))$ 在此稳态处的雅可比矩阵。一般雅可比矩阵 $J(x,y)$ 定义为：\n$$\nJ(x,y) = \\begin{pmatrix} \\frac{\\partial f}{\\partial x} & \\frac{\\partial f}{\\partial y} \\\\ \\frac{\\partial g}{\\partial x} & \\frac{\\partial g}{\\partial y} \\end{pmatrix}\n$$\n我们从给定的速率方程中计算必要的偏导数：\n- $\\frac{\\partial f}{\\partial x} = \\frac{\\partial}{\\partial x} (A - (B+1)x + x^2y) = -(B+1) + 2xy$\n- $\\frac{\\partial f}{\\partial y} = \\frac{\\partial}{\\partial y} (A - (B+1)x + x^2y) = x^2$\n- $\\frac{\\partial g}{\\partial x} = \\frac{\\partial}{\\partial x} (Bx - x^2y) = B - 2xy$\n- $\\frac{\\partial g}{\\partial y} = \\frac{\\partial}{\\partial y} (Bx - x^2y) = -x^2$\n\n因此，雅可比矩阵为：\n$$\nJ(x,y) = \\begin{pmatrix} 2xy - B - 1 & x^2 \\\\ B - 2xy & -x^2 \\end{pmatrix}\n$$\n现在，我们在稳态 $(x^{\\ast}, y^{\\ast}) = (A, \\frac{B}{A})$ 处对此矩阵求值。在此点，乘积 $x^{\\ast}y^{\\ast}$ 简化为 $A \\cdot \\frac{B}{A} = B$。将 $x = A$ 和 $xy = B$ 代入雅可比矩阵的元素中，可得：\n$$\nJ(x^{\\ast}, y^{\\ast}) = \\begin{pmatrix} 2B - B - 1 & A^2 \\\\ B - 2B & -A^2 \\end{pmatrix} = \\begin{pmatrix} B - 1 & A^2 \\\\ -B & -A^2 \\end{pmatrix}\n$$\n最后，我们计算这个矩阵的迹和行列式。\n迹，$\\text{Tr}(J)$，是主对角线元素之和：\n$$\n\\text{Tr}(J) = (B - 1) + (-A^2) = B - A^2 - 1\n$$\n行列式，$\\det(J)$，由公式 $ad - bc$ 给出：\n$$\n\\det(J) = (B - 1)(-A^2) - (A^2)(-B) = -A^2B + A^2 + A^2B = A^2\n$$\n问题要求将最终答案表示为由 (迹, 行列式) 组成的有序对，并写成单行矩阵形式。该有序对为 $(B - A^2 - 1, A^2)$。", "answer": "$$\n\\boxed{\\begin{pmatrix} B - A^2 - 1 & A^2 \\end{pmatrix}}\n$$", "id": "2628406"}, {"introduction": "在掌握了局部稳定性分析的基础上，我们进一步探究当稳定性丧失时会发生什么。鞍结分岔是系统中稳态产生或消失的最基本机制，是分岔理论的基石。这个问题提供了一个简洁的一维系统，让你通过解析推导，精确地找到发生这种分岔的参数值，从而加深对切向条件（即 $f(x)=0$ 和 $f'(x)=0$ 同时成立）的理解。[@problem_id:2628457]", "problem": "一个自催化反应网络的简化模型可导出标量常微分方程（ODE） $\\dot{x}=\\mu + x - x^{3}$，其中 $x$ 是一个无量纲浓度，$\\mu$ 是一个代表可控进料项的实分岔参数。在化学动力学的标准确定性框架内进行分析，其中平衡点通过将方程右侧设为零来定义，而线性稳定性由在平衡点处求值的雅可比矩阵决定。从平衡点的定义以及一维动力系统中鞍结分岔的概念出发，该分岔被定义为当矢量场与零点集相切时两个平衡点的合并。仅使用这些基础知识，完成以下任务：\n\n- 通过联立求解平衡条件和相切条件，确定系统经历鞍结分岔的所有参数值 $\\mu$。\n- 在每个此类参数下，验证鞍结分岔的通用非退化条件，即矢量场在相应平衡点处对 $x$ 的二阶导数非零，以及对 $\\mu$ 的偏导数非零。\n\n仅报告分岔参数值 $\\mu$ 的集合作为最终答案，并将其格式化为行矩阵。用精确的根式表示你的答案。无需四舍五入。", "solution": "所给问题是初等分岔理论中的一个标准练习，在科学和数学上都是有效的。问题提法恰当、内容自洽且没有歧义。我们将着手进行分析。\n\n该系统由以下标量常微分方程 (ODE) 描述：\n$$\n\\dot{x} = f(x, \\mu) = \\mu + x - x^{3}\n$$\n这里，$x$ 代表状态变量，$\\mu$ 是分岔参数。\n\n鞍结分岔发生在状态-参数空间中的一点 $(x_{sn}, \\mu_{sn})$，在该点上两个平衡点合并并相互湮灭。这对应于函数 $f(x, \\mu_{sn})$ 的图像与 $x$ 轴相切的点。当函数对状态变量的导数也为零时，满足此相切条件。因此，我们必须求解一个由两个方程组成的联立方程组。\n\n第一个条件是平衡条件：\n$$\nf(x, \\mu) = \\mu + x - x^{3} = 0\n$$\n这定义了 $(x, \\mu)$ 平面中的平衡点曲线。\n\n第二个条件是相切条件，对于一维系统，这意味着雅可比矩阵（在此即为对 $x$ 的偏导数）为零：\n$$\n\\frac{\\partial f}{\\partial x}(x, \\mu) = 0\n$$\n计算给定矢量场的这个导数，得到：\n$$\n\\frac{\\partial}{\\partial x}(\\mu + x - x^{3}) = 1 - 3x^{2} = 0\n$$\n从第二个方程中，我们解出可能发生分岔的 $x$ 值：\n$$\n3x^{2} = 1 \\implies x^{2} = \\frac{1}{3}\n$$\n这给出了在分岔点处状态变量 $x$ 的两个可能值：\n$$\nx_{sn} = \\pm \\frac{1}{\\sqrt{3}} = \\pm \\frac{\\sqrt{3}}{3}\n$$\n现在，我们将这些 $x$ 的值代回平衡条件 $f(x, \\mu) = 0$，以求出对应的分岔参数 $\\mu$ 的值。平衡条件可以写成 $\\mu = x^{3} - x$。\n\n情况 1：$x = +\\frac{\\sqrt{3}}{3}$\n$$\n\\mu_{sn,1} = \\left(\\frac{\\sqrt{3}}{3}\\right)^{3} - \\frac{\\sqrt{3}}{3} = \\frac{3\\sqrt{3}}{27} - \\frac{\\sqrt{3}}{3} = \\frac{\\sqrt{3}}{9} - \\frac{3\\sqrt{3}}{9} = -\\frac{2\\sqrt{3}}{9}\n$$\n因此，一个分岔点是 $(x, \\mu) = \\left(\\frac{\\sqrt{3}}{3}, -\\frac{2\\sqrt{3}}{9}\\right)$。\n\n情况 2：$x = -\\frac{\\sqrt{3}}{3}$\n$$\n\\mu_{sn,2} = \\left(-\\frac{\\sqrt{3}}{3}\\right)^{3} - \\left(-\\frac{\\sqrt{3}}{3}\\right) = -\\frac{3\\sqrt{3}}{27} + \\frac{\\sqrt{3}}{3} = -\\frac{\\sqrt{3}}{9} + \\frac{3\\sqrt{3}}{9} = \\frac{2\\sqrt{3}}{9}\n$$\n因此，第二个分岔点是 $(x, \\mu) = \\left(-\\frac{\\sqrt{3}}{3}, \\frac{2\\sqrt{3}}{9}\\right)$。\n\n问题要求验证鞍结分岔的通用非退化条件。这些条件确保该分岔不是更高级、更退化的类型。\n\n第一个非退化条件是，对状态变量的二阶导数非零：$\\frac{\\partial^{2} f}{\\partial x^{2}} \\neq 0$。\n我们计算二阶导数：\n$$\n\\frac{\\partial^{2} f}{\\partial x^{2}} = \\frac{\\partial}{\\partial x}(1 - 3x^{2}) = -6x\n$$\n我们在 $x$ 的两个分岔值处对此进行求值：\n对于 $x = +\\frac{\\sqrt{3}}{3}$：$\\frac{\\partial^{2} f}{\\partial x^{2}} = -6\\left(\\frac{\\sqrt{3}}{3}\\right) = -2\\sqrt{3} \\neq 0$。\n对于 $x = -\\frac{\\sqrt{3}}{3}$：$\\frac{\\partial^{2} f}{\\partial x^{2}} = -6\\left(-\\frac{\\sqrt{3}}{3}\\right) = 2\\sqrt{3} \\neq 0$。\n第一个条件对两点都满足。\n\n第二个非退化条件是，对分岔参数的偏导数非零：$\\frac{\\partial f}{\\partial \\mu} \\neq 0$。\n我们计算这个导数：\n$$\n\\frac{\\partial f}{\\partial \\mu} = \\frac{\\partial}{\\partial \\mu}(\\mu + x - x^{3}) = 1\n$$\n该导数等于 $1$，对于所有 $(x, \\mu)$ 都不为零。因此，此条件也满足。\n\n找到的两个点确实都是鞍结分岔点。发生这些分岔的参数值 $\\mu$ 的集合是 $\\left\\{-\\frac{2\\sqrt{3}}{9}, \\frac{2\\sqrt{3}}{9}\\right\\}$。问题要求将这些值以行矩阵的形式报告。", "answer": "$$\n\\boxed{\\begin{pmatrix} -\\frac{2\\sqrt{3}}{9} & \\frac{2\\sqrt{3}}{9} \\end{pmatrix}}\n$$", "id": "2628457"}, {"introduction": "虽然许多局部分岔可以通过解析方法研究，但像同宿分岔这样的全局分岔往往需要借助计算工具。这个实践将引导你实现一种强大的数值技术——打靶法（shooting method），以检测鞍点的稳定和不稳定流形何时连接形成一个环。这项练习为你架起了一座从理论动力系统概念到实际编程实现的桥梁，这是现代科学研究中一项至关重要的技能。[@problem_id:2628466]", "problem": "考虑以下平面、无量纲的动力学范式，它捕捉了一个双物种自催化-抑制反应网络在鞍环（同宿）分岔附近的局部相图几何结构：\n$$\n\\begin{aligned}\n\\dot{x} &= y,\\\\\n\\dot{y} &= \\mu + x - x^{3} - \\gamma\\, y,\n\\end{aligned}\n$$\n其中，$x$ 和 $y$ 是无量纲单位的浓度，$\\mu$ 是一个控制净产量的实值分岔参数，而 $\\gamma>0$ 是一个无量纲阻尼率，表示由损耗或稀释引起的有效弛豫。对于固定的 $\\gamma$，该系统族是 Bogdanov–Takens 情景附近平面化学动力学的一个典范局部模型，并在一定范围的 $\\mu$ 值上呈现鞍点平衡。同宿（鞍环）分岔发生在一个参数值 $\\mu_{\\mathrm{hom}}$ 处，在该值下，鞍点的全局稳定流形和不稳定流形重合，形成一个离开并返回鞍点的环路。\n\n你的任务是通过对鞍点平衡的稳定流形进行延拓，实现一个用于同宿分岔的数值检测器。该检测器必须基于平面动力系统的第一性原理，并且不应使用任何预构建的分岔软件。你必须推导并实现以下流程：\n\n1) 平衡点与线性化。对于任意的 $\\mu$ 和 $\\gamma$，平衡点 $(x^{\\ast},y^{\\ast})$ 满足 $y^{\\ast}=0$ 和 $\\mu + x^{\\ast} - (x^{\\ast})^{3}=0$。平衡点处的雅可比矩阵为\n$$\nJ(x^{\\ast},y^{\\ast})=\\begin{pmatrix} 0 & 1 \\\\ 1-3(x^{\\ast})^{2} & -\\gamma \\end{pmatrix}.\n$$\n使用此矩阵确定平衡点是否为鞍点，即判断是否 $\\det(J)<0$（等价于 $1-3(x^{\\ast})^{2}>0$）。如果对于给定的 $\\mu$ 不存在鞍点平衡，你的检测器必须报告无法评估同宿性。\n\n2) 局部不变子空间。当平衡点为鞍点时，$J$ 有一个负实数特征值和一个正实数特征值，其对应的特征向量分别为 $v_{s}$（稳定）和 $v_{u}$（不稳定）。将两个特征向量都归一化为单位长度。局部稳定流形 $W^{s}$ 在鞍点处与 $v_{s}$ 相切，局部不稳定流形 $W^{u}$ 在鞍点处与 $v_{u}$ 相切。\n\n3) 源于稳定流形的有符号位移泛函。固定小半径 $0<\\delta \\ll r_{\\mathrm{out}}\\ll 1$ 和一个大的积分时域 $T>0$。按如下方式定义有符号位移 $s(\\mu)$：\n- 从鞍点 $(x^{\\ast},y^{\\ast})$ 开始，沿 $v_{s}$ 方向移动距离 $\\delta$ 到达点 $(x_{0},y_{0})=(x^{\\ast},y^{\\ast})+\\delta\\, v_{s}$。该点位于局部稳定流形上。\n- 从点 $(x_{0},y_{0})$ 开始，将系统从 $t=0$ 到 $t=-T$ 进行时间反向积分，一旦轨迹离开以鞍点为中心、半径为 $r_{\\mathrm{out}}$ 的球体，立即停止积分。记此出射点为 $(x_{\\mathrm{out}},y_{\\mathrm{out}})$。\n- 通过将出射位移投影到不稳定特征方向上，定义有符号位移：\n$$\ns(\\mu)=\\big\\langle (x_{\\mathrm{out}},y_{\\mathrm{out}})-(x^{\\ast},y^{\\ast}),\\; v_{u}\\big\\rangle,\n$$\n其中 $\\langle\\cdot,\\cdot\\rangle$ 是欧几里得内积。$s(\\mu)$ 的符号编码了延拓的稳定流形从不稳定轴的哪一侧离开邻域。同宿连接对应于 $s(\\mu)=0$，因为稳定流形在出射点处与不稳定特征方向对齐，这表明存在一个连接回鞍点的环路。根据连续性，当 $\\mu$ 变化时 $s(\\mu)$ 的符号发生改变，即表示同宿参数 $\\mu_{\\mathrm{hom}}$ 位于这些采样的 $\\mu$ 值之间。\n\n4) 数值延拓与区间限定。在一个给定的区间 $[\\mu_{\\min},\\mu_{\\max}]$ 上，在一个粗糙的 $\\mu$ 值网格上计算 $s(\\mu)$。识别出 $s(\\mu)$ 符号发生变化的子区间，并使用二分法对这些子区间进行细化，直到 $\\mu$ 的变化小于指定容差，或者 $|s(\\mu)|$ 的值低于指定的投影容差。如果在该区间内的任何地方都不存在鞍点，或者没有检测到符号变化，则报告未找到同宿参数。\n\n5) 输出。对于下面的每个测试用例，你的程序必须返回一个标量值：\n- 如果通过符号变化准则检测到同宿参数并通过二分法进行了细化，则返回估计的 $\\mu_{\\mathrm{hom}}$ 作为浮点值。\n- 否则，返回浮点值 $-1.0$。\n\n由于系统是无量纲的，因此不需要物理单位。角度（如果存在）是内部计算量，无需显式单位。\n\n测试套件。实现你的程序来解决以下测试用例。每个测试用例是一个包含 $(\\gamma,[\\mu_{\\min},\\mu_{\\max}],\\delta,r_{\\mathrm{out}},T, N_{\\mathrm{coarse}}, \\text{tol}_{\\mu}, \\text{tol}_{s})$ 的元组，并且必须独立处理。\n\n- 用例 A (理想路径)：$(\\gamma,[\\mu_{\\min},\\mu_{\\max}],\\delta,r_{\\mathrm{out}},T, N_{\\mathrm{coarse}}, \\text{tol}_{\\mu}, \\text{tol}_{s}) = (0.2,[-0.2,0.2],10^{-7},10^{-2},25,41,10^{-6},10^{-9})$。预期在 $\\mu=0$ 附近有一个同宿参数。\n- 用例 B (无鞍点区间)：$(\\gamma,[\\mu_{\\min},\\mu_{\\max}],\\delta,r_{\\mathrm{out}},T, N_{\\mathrm{coarse}}, \\text{tol}_{\\mu}, \\text{tol}_{s}) = (0.2,[0.6,1.0],10^{-7},10^{-2},25,41,10^{-6},10^{-9})$。对于此区间，系统只有一个非鞍点的平衡点；报告 $-1.0$。\n- 用例 C (边界/刚性情况)：$(\\gamma,[\\mu_{\\min},\\mu_{\\max}],\\delta,r_{\\mathrm{out}},T, N_{\\mathrm{coarse}}, \\text{tol}_{\\mu}, \\text{tol}_{s}) = (0.05,[-0.1,0.1],10^{-7},10^{-2},25,41,10^{-6},10^{-9})$。预期在 $\\mu=0$ 附近有一个同宿参数，由于阻尼较弱，灵敏度增加。\n\n最终输出格式。你的程序应生成一行输出，其中包含用例 A、B 和 C 的结果，格式为方括号内由逗号分隔的列表（例如，“[x,y,z]”）。每个条目必须是浮点数。如果某个用例未检测到同宿参数，则相应条目必须为“-1.0”。", "solution": "所述问题在科学上是合理的、适定的和客观的。它提出了计算动力学系统中的一个标准但非平凡的问题：在典范范式中对同宿分岔进行数值检测。\n\n所规定的方法论——定位鞍点平衡、分析其线性稳定性，以及实现一种基于流形延拓的打靶法——是一种经典且有效的方法。因此，我将进行系统的推导和实现。\n\n任务的核心是构造一个函数 $s(\\mu)$，其零点对应于同宿事件，然后用数值方法找到这个零点。整个过程被分解为多个逻辑步骤。\n\n1. 平衡分析与鞍点识别\n\n系统的平衡点 $(x^{\\ast}, y^{\\ast})$ 必须满足条件 $\\dot{x}=0$ 和 $\\dot{y}=0$。这导出：\n$y^{\\ast} = 0$\n$\\mu + x^{\\ast} - (x^{\\ast})^{3} = 0$\n\n因此，平衡点的形式为 $(x^{\\ast}, 0)$，其中 $x^{\\ast}$ 是三次多项式 $p(x) = x^3 - x - \\mu$ 的一个实根。实根的数量取决于分岔参数 $\\mu$。\n平衡点的稳定性由在该点计算的雅可比矩阵 $J$ 的特征值确定：\n$$\nJ(x^{\\ast}, 0) = \\begin{pmatrix} 0 & 1 \\\\ 1-3(x^{\\ast})^{2} & -\\gamma \\end{pmatrix}\n$$\n如果平衡点的雅可比矩阵的行列式为负，则该平衡点为鞍点，这确保了存在一个正实数特征值和一个负实数特征值。\n$$\n\\det(J) = -(1-3(x^{\\ast})^{2}) < 0\n$$\n该条件等价于 $1 - 3(x^{\\ast})^{2} > 0$，可简化为 $|x^{\\ast}| < 1/\\sqrt{3}$。\n因此，要为给定的 $\\mu$ 找到一个鞍点，我们必须找到 $p(x)=0$ 在开区间 $(-1/\\sqrt{3}, 1/\\sqrt{3})$ 内的一个根。\n导数 $p'(x) = 3x^2 - 1$ 对于所有 $x \\in (-1/\\sqrt{3}, 1/\\sqrt{3})$ 均为负，这意味着 $p(x)$ 在此区间内是严格单调的。因此，最多只能存在一个这样的根。根存在的充分必要条件是 $p(-1/\\sqrt{3})$ 和 $p(1/\\sqrt{3})$ 异号。\n$p(-1/\\sqrt{3}) = 2/(3\\sqrt{3}) - \\mu$\n$p(1/\\sqrt{3}) = -2/(3\\sqrt{3}) - \\mu$\n为使其乘积为负，我们必须有 $|\\mu| < 2/(3\\sqrt{3}) \\approx 0.3849$。如果不满足此关于 $\\mu$ 的条件，则不存在鞍点平衡，无法评估同宿性。在计算上，可以使用像二分法或 Brent 方法这样的鲁棒求根方法来找到此区间内的 $x^{\\ast}$。\n\n2. 局部不变子空间\n\n在鞍点 $(x^{\\ast}, 0)$ 处，$J$ 的特征值是特征方程 $\\lambda^2 + \\gamma \\lambda - (1 - 3(x^{\\ast})^2) = 0$ 的根。解为：\n$$\n\\lambda_{s,u} = \\frac{-\\gamma \\pm \\sqrt{\\gamma^2 + 4(1 - 3(x^{\\ast})^2)}}{2}\n$$\n由于 $1-3(x^{\\ast})^2 > 0$ 且 $\\gamma>0$，我们得到一个负（稳定）特征值 $\\lambda_s$ 和一个正（不稳定）特征值 $\\lambda_u$。\n对应于特征值 $\\lambda$ 的特征向量 $\\mathbf{v} = (v_x, v_y)^T$ 满足 $(J - \\lambda I)\\mathbf{v} = 0$。这给出 $-\\lambda v_x + v_y = 0$，所以 $v_y = \\lambda v_x$。因此，特征向量与 $(1, \\lambda)^T$ 成正比。\n稳定特征向量 $\\mathbf{v}_s$ 与 $(1, \\lambda_s)^T$ 成正比，不稳定特征向量 $\\mathbf{v}_u$ 与 $(1, \\lambda_u)^T$ 成正比。按照规定，这些向量必须被归一化为单位长度：\n$$\n\\mathbf{v}_s = \\frac{1}{\\sqrt{1+\\lambda_s^2}} \\begin{pmatrix} 1 \\\\ \\lambda_s \\end{pmatrix}, \\quad \\mathbf{v}_u = \\frac{1}{\\sqrt{1+\\lambda_u^2}} \\begin{pmatrix} 1 \\\\ \\lambda_u \\end{pmatrix}\n$$\n这些向量定义了鞍点处稳定流形 $W^s$ 和不稳定流形 $W^u$ 的切线方向。\n\n3. 有符号位移泛函 $s(\\mu)$ 的数值构造\n\n该检测方法的核心是一种数值打靶算法。我们沿时间反向追踪稳定流形，以观察其相对于不稳定流形的位置。\n首先，我们通过从鞍点沿稳定特征向量位移来选择局部稳定流形上的一个初始点：\n$$\n(x_0, y_0) = (x^{\\ast}, y^{\\ast}) + \\delta \\mathbf{v}_s\n$$\n其中 $\\delta$ 是一个小的正常数。\n接下来，我们从 $t=0$ 处的 $(x_0, y_0)$ 开始，对常微分方程组进行时间反向积分。这等价于对系统 $\\dot{\\mathbf{z}} = -\\mathbf{F}(\\mathbf{z})$ 进行时间正向积分，其中 $\\mathbf{z}=(x,y)$ 且 $\\mathbf{F}(\\mathbf{z}) = (y, \\mu + x - x^3 - \\gamma y)$。积分在时域 $[0, -T]$ 上执行，但如果轨迹离开以鞍点 $(x^{\\ast}, y^{\\ast})$ 为中心、半径为 $r_{\\text{out}}$ 的球体，则会提前终止。设出射点为 $(x_{\\text{out}}, y_{\\text{out}})$。此任务最好由一个可靠的数值常微分方程求解器来处理，例如 `scipy.integrate` 库中的求解器，它支持事件检测，可以精确捕捉出射条件 $\\|(x(t), y(t)) - (x^{\\ast}, y^{\\ast})\\| = r_{\\text{out}}$。\n最后，通过将出射点相对于鞍点的位移向量投影到不稳定特征向量 $\\mathbf{v}_u$ 上，定义有符号位移泛函 $s(\\mu)$：\n$$\ns(\\mu) = \\langle (x_{\\text{out}}, y_{\\text{out}}) - (x^{\\ast}, y^{\\ast}), \\mathbf{v}_u \\rangle\n$$\n当稳定流形和不稳定流形重合时，存在同宿轨道。在我们的设置中，这发生在时间反向演化的稳定轨迹落在不稳定流形上时。在出射半径 $r_{\\text{out}}$ 处，这对应于出射点位于 $\\mathbf{v}_u$ 的方向上，这意味着位移向量与垂直于 $\\mathbf{v}_u$ 的方向正交。一个更简单且等价的条件是位移向量与 $\\mathbf{v}_u$ 平行，这导致 $s(\\mu)=0$。$s(\\mu)$ 的符号指示了稳定流形从不稳定流形的哪一“侧”离开邻域。当 $\\mu$ 变化时，$s(\\mu)$ 符号的变化标志着系统经过了一次同宿分岔。\n\n4. 同宿分岔参数 $\\mu_{\\mathrm{hom}}$ 的数值搜索\n\n搜索 $\\mu_{\\mathrm{hom}}$ 是一个求解 $s(\\mu)=0$ 的求根问题。采用两阶段方法：\na) 粗网格搜索：在指定的参数区间 $[\\mu_{\\min}, \\mu_{\\max}]$ 上，在一个由 $N_{\\text{coarse}}$ 个点组成的粗略均匀网格上评估函数 $s(\\mu)$。扫描结果值，以查找任意两个相邻网格点 $(\\mu_i, \\mu_{i+1})$ 之间是否存在符号变化。找到的第一对这样的点为 $\\mu_{\\mathrm{hom}}$ 提供了一个区间 $[\\mu_i, \\mu_{i+1}]$。如果此扫描显示网格中没有任何 $\\mu$ 存在鞍点，或者未检测到符号变化，我们则断定在给定区间内未找到同宿分岔，并终止该测试用例的程序。\nb) 二分法细化：一旦确定了一个限定区间 $[\\mu_a, \\mu_b]$，就应用二分法来细化 $\\mu_{\\mathrm{hom}}$ 的估计值。计算中点 $\\mu_m = (\\mu_a + \\mu_b)/2$，然后计算 $s(\\mu_m)$。然后将区间更新为 $[\\mu_a, \\mu_m]$ 或 $[\\mu_m, \\mu_b]$，以保持端点处的符号变化。这个迭代过程持续进行，直到区间宽度 $|\\mu_b - \\mu_a|$ 小于给定容差 $\\text{tol}_{\\mu}$，或者直到位移泛函的值 $|s(\\mu_m)|$ 小于容差 $\\text{tol}_s$。最终的中点作为 $\\mu_{\\mathrm{hom}}$ 的估计值返回。\n\n如果在粗略搜索中没有找到限定区间，则按照问题规范返回数值 $-1.0$。", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import brentq\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases for homoclinic bifurcation detection.\n    \"\"\"\n    test_cases = [\n        # Case A: Happy path\n        (0.2, [-0.2, 0.2], 1e-7, 1e-2, 25, 41, 1e-6, 1e-9),\n        # Case B: No-saddle interval\n        (0.2, [0.6, 1.0], 1e-7, 1e-2, 25, 41, 1e-6, 1e-9),\n        # Case C: Edge/stiffness case\n        (0.05, [-0.1, 0.1], 1e-7, 1e-2, 25, 41, 1e-6, 1e-9),\n    ]\n\n    results = []\n    for case in test_cases:\n        mu_hom = solve_case(*case)\n        results.append(mu_hom)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef solve_case(gamma, mu_interval, delta, r_out, T, N_coarse, tol_mu, tol_s):\n    \"\"\"\n    Solves for the homoclinic bifurcation parameter for a single test case.\n    \"\"\"\n    mu_min, mu_max = mu_interval\n    mu_grid = np.linspace(mu_min, mu_max, N_coarse)\n    s_values = []\n    \n    saddle_found_anywhere = False\n    for mu in mu_grid:\n        s_val, saddle_exists = compute_s_functional(mu, gamma, delta, r_out, T)\n        s_values.append(s_val)\n        if saddle_exists:\n            saddle_found_anywhere = True\n\n    if not saddle_found_anywhere:\n        return -1.0\n\n    # Find a bracketing interval for the root of s(mu)\n    for i in range(N_coarse - 1):\n        s1 = s_values[i]\n        s2 = s_values[i+1]\n        \n        if not (np.isnan(s1) or np.isnan(s2)) and np.sign(s1) != np.sign(s2):\n            mu_a, mu_b = mu_grid[i], mu_grid[i+1]\n            \n            # Bisection method for refinement\n            s_a, _ = compute_s_functional(mu_a, gamma, delta, r_out, T)\n\n            for _ in range(100): # Max iterations for bisection\n                mu_mid = (mu_a + mu_b) / 2.0\n                s_mid, _ = compute_s_functional(mu_mid, gamma, delta, r_out, T)\n\n                if np.isnan(s_mid): # Should not happen inside a valid bracket\n                    return -1.0\n\n                if abs(s_mid) < tol_s or (mu_b - mu_a) / 2.0 < tol_mu:\n                    return mu_mid\n\n                if np.sign(s_mid) == np.sign(s_a):\n                    mu_a = mu_mid\n                    s_a = s_mid\n                else:\n                    mu_b = mu_mid\n            \n            return (mu_a + mu_b) / 2.0\n\n    return -1.0\n\ndef compute_s_functional(mu, gamma, delta, r_out, T):\n    \"\"\"\n    Computes the signed displacement functional s(mu).\n    Returns (s(mu), saddle_exists_flag).\n    \"\"\"\n    # 1. Find saddle equilibrium\n    x_saddle_bound = 1.0 / np.sqrt(3.0)\n    mu_bound = 2.0 / (3.0 * np.sqrt(3.0))\n\n    if abs(mu) >= mu_bound:\n        return np.nan, False\n\n    try:\n        # Pushing bounds slightly inward to avoid potential issues at endpoints\n        epsilon = 1e-12\n        x_saddle = brentq(lambda x: x**3 - x - mu, -x_saddle_bound + epsilon, x_saddle_bound - epsilon)\n    except ValueError:\n        return np.nan, False # No root in interval, hence no saddle\n    \n    saddle_pos = np.array([x_saddle, 0.0])\n\n    # 2. Linearization and Eigenspaces\n    J = np.array([[0, 1], [1 - 3 * x_saddle**2, -gamma]])\n    eigenvalues, eigenvectors = np.linalg.eig(J)\n\n    # Sort eigenvalues to identify stable and unstable\n    idx_sort = np.argsort(eigenvalues)\n    lambda_s, lambda_u = eigenvalues[idx_sort]\n    v_s = eigenvectors[:, idx_sort[0]]\n    v_u = eigenvectors[:, idx_sort[1]]\n\n    # Ensure eigenvectors are correctly normalized (numpy already does this)\n    # v_s /= np.linalg.norm(v_s)\n    # v_u /= np.linalg.norm(v_u)\n\n    # 3. Backward integration\n    x0 = saddle_pos + delta * v_s\n    \n    # Vector field\n    def dynamics(t, z):\n        x, y = z\n        return np.array([y, mu + x - x**3 - gamma * y])\n\n    # Event function: stop when trajectory exits the ball of radius r_out\n    def exit_ball(t, z):\n        return np.linalg.norm(z - saddle_pos) - r_out\n    exit_ball.terminal = True # Stop integration on this event\n    exit_ball.direction = 1 # Trigger on increasing distance\n\n    # Integrate backward in time\n    sol = solve_ivp(dynamics, [0, -T], x0, method='RK45', events=exit_ball, dense_output=True)\n\n    if not sol.t_events or len(sol.t_events[0]) == 0:\n        return np.nan, True # Failed to exit the ball within time T\n\n    exit_point = sol.y_events[0][0]\n    \n    # 4. Compute signed displacement\n    displacement_vec = exit_point - saddle_pos\n    s = np.dot(displacement_vec, v_u)\n    \n    return s, True\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2628466"}]}