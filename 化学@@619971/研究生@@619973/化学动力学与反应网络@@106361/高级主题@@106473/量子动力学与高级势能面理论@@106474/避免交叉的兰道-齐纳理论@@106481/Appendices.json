{"hands_on_practices": [{"introduction": "Landau-Zener 公式是在无限长时间的渐近极限下导出的一个解析近似。本练习通过在有限时间内数值求解底层的含时薛定谔方程 ($TDSE$)，并观察结果如何收敛于解析解，为学生提供了亲手验证该极限的宝贵机会。这项实践不仅能增强你对该公式的信心，还能培养你在计算量子动力学方面的基本技能。[@problem_id:2652123]", "problem": "考虑一个与化学反应网络中的非绝热跃迁相关的双能级系统，其含时薛定谔方程 (TDSE) 为 $i \\hbar \\, \\frac{d}{dt}\\psi(t) = H(t)\\,\\psi(t)$，并在无量纲单位制中进行计算，其中 $\\hbar = 1$。Landau–Zener 模型指定了在非绝热基下的一个线性含时哈密顿量为\n$$\nH(t) = \\begin{pmatrix}\n\\frac{v t}{2} & \\Delta \\\\\n\\Delta & -\\frac{v t}{2}\n\\end{pmatrix},\n$$\n其中 $v > 0$ 是非绝热能量的恒定斜率差，$\\Delta > 0$ 是不含时的非绝热耦合。设 $\\psi(t)$ 为一个归一化的双分量态矢量。取 $t=-t_{\\max}$ 时的初始条件为第一个非绝热态，即 $\\psi(-t_{\\max}) = (1,0)^{\\top}$。\n\n您的任务是为 TDSE 实现一个数值积分器，即在有限时间区间 $t \\in [-t_{\\max}, t_{\\max}]$ 上求解\n$$\ni \\frac{d}{dt}\\psi(t) = H(t)\\psi(t),\n$$\n并计算数值 Landau–Zener 跃迁概率 $P_{\\mathrm{num}}(\\Delta, v, t_{\\max})$，其定义为在 $t=+t_{\\max}$ 时占据初始非绝热态的概率：\n$$\nP_{\\mathrm{num}}(\\Delta, v, t_{\\max}) = \\left|\\psi_1(t_{\\max})\\right|^2,\n$$\n其中 $\\psi_1$ 是 $\\psi$ 在非绝热基下的第一个分量。\n\n从第一性原理（TDSE 和给定的哈密顿量）出发，推导如何计算 $P_{\\mathrm{num}}$ 以及当 $t_{\\max} \\to \\infty$ 时的预期渐近行为。使用一个适用于光滑、非刚性复值系统的高精度自适应积分器。为保证数值稳定性和科学真实性，请事后验证模长在微小数值误差范围内是守恒的，并使用能够使 $t_{\\max}$ 的渐近收敛变得可观测的容差。\n\n为验证当 $\\pm t_{\\max} \\to \\infty$ 时向解析 Landau–Zener 极限的收敛性，定义绝对误差\n$$\n\\varepsilon(\\Delta, v, t_{\\max}) = \\left| P_{\\mathrm{num}}(\\Delta, v, t_{\\max}) - P_{\\mathrm{LZ}}(\\Delta, v) \\right|,\n$$\n其中 $P_{\\mathrm{LZ}}(\\Delta, v)$ 是针对指定哈密顿量的闭式 Landau–Zener 概率。尽管在您的推导中不能使用简便公式，但您的程序可以在解题中推导出解析的 $P_{\\mathrm{LZ}}(\\Delta, v)$ 后，用它来计算 $\\varepsilon$。\n\n实现一个程序，为以下参数三元组 $(\\Delta, v, t_{\\max})$ 的测试套件计算 $\\varepsilon$：\n- $(\\Delta, v, t_{\\max}) = (0.5, 1.0, 6.0)$，\n- $(\\Delta, v, t_{\\max}) = (0.5, 1.0, 10.0)$，\n- $(\\Delta, v, t_{\\max}) = (0.5, 1.0, 14.0)$，\n- $(\\Delta, v, t_{\\max}) = (1.0, 0.5, 8.0)$，\n- $(\\Delta, v, t_{\\max}) = (1.0, 0.5, 12.0)$，\n- $(\\Delta, v, t_{\\max}) = (1.0, 0.5, 16.0)$，\n- $(\\Delta, v, t_{\\max}) = (0.1, 1.5, 6.0)$，\n- $(\\Delta, v, t_{\\max}) = (0.1, 1.5, 10.0)$，\n- $(\\Delta, v, t_{\\max}) = (0.1, 1.5, 14.0)$。\n\n覆盖性设计：\n- 前三个用例是一般情景，具有中等耦合和速度，用于评估基本收敛性。\n- 接下来三个用例探测绝热区（较大的 $\\Delta$ 和较小的 $v$），此区域跃迁概率很小，用于测试积分器在小概率附近的准确性。\n- 最后三个用例探测非绝热区（较小的 $\\Delta$ 和较大的 $v$），此区域跃迁概率接近于一，用于测试在边界附近的稳定性。\n\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如 $[r_1,r_2,\\ldots,r_9]$），其中每个 $r_k$ 是为第 k 个参数三元组计算出的绝对误差 $\\varepsilon$，表示为一个无单位（无量纲）的浮点数。", "solution": "所提出的问题是计算量子动力学中的一个有效练习。它在科学上基于完善的 Landau-Zener 非绝热跃迁模型，这是化学动力学和物理学中的一个基本概念。该问题是适定的，提供了一整套参数、一个清晰的微分方程、一个明确定义的初始条件以及一个待计算的特定量。所有术语都得到了明确的定义，其设定在数学和物理上都是一致的。因此，我们将着手求解。\n\n问题的核心是在无量纲单位（$\\hbar=1$）下，求解一个双能级量子系统的含时薛定谔方程 (TDSE)。TDSE 由以下公式给出：\n$$\ni \\frac{d}{dt}\\psi(t) = H(t)\\psi(t)\n$$\n态矢量是一个双分量复数矢量 $\\psi(t) = \\begin{pmatrix} \\psi_1(t) \\\\ \\psi_2(t) \\end{pmatrix}$，含时哈密顿量 $H(t)$ 由以下矩阵给出：\n$$\nH(t) = \\begin{pmatrix}\n\\frac{v t}{2} & \\Delta \\\\\n\\Delta & -\\frac{v t}{2}\n\\end{pmatrix}\n$$\n其中 $v > 0$ 和 $\\Delta > 0$ 是实参数。这个哈密顿矩阵是厄米的，这确保了时间演化算符是幺正的，并且态矢量的模长 $\\|\\psi(t)\\|^2 = |\\psi_1(t)|^2 + |\\psi_2(t)|^2$ 是一个守恒量。\n\n为了准备进行数值积分，我们可以将该方程写成一个一阶常微分方程组 (ODEs)。矩阵方程展开为：\n$$\ni \\frac{d\\psi_1}{dt} = \\frac{v t}{2} \\psi_1(t) + \\Delta \\psi_2(t)\n$$\n$$\ni \\frac{d\\psi_2}{dt} = \\Delta \\psi_1(t) - \\frac{v t}{2} \\psi_2(t)\n$$\n对于标准的数值 ODE 求解器，我们将系统表示为 $\\frac{d\\vec{y}}{dt} = \\vec{f}(t, \\vec{y})$ 的形式。将 TDSE 乘以 $-i$（并使用 $1/i = -i$），我们得到：\n$$\n\\frac{d\\psi}{dt} = -i H(t) \\psi(t)\n$$\n这是一个关于复变量 $\\psi_1(t)$ 和 $\\psi_2(t)$ 的包含两个耦合线性一阶 ODE 的方程组。我们必须在时间区间 $t \\in [-t_{\\max}, t_{\\max}]$ 上求解此系统，初始条件为 $\\psi(-t_{\\max}) = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$。\n\n问题要求使用一个适用于光滑、非刚性系统的高精度自适应积分器。哈密顿量的系数是 t 的线性函数，使得该系统是光滑的。它不是刚性的。因此，一个高阶的 Runge-Kutta 方法，例如 8(5,3) 阶的 Dormand-Prince 方法 (DOP853)，是一个绝佳的选择。现代科学计算库，例如 Python 中的 `scipy.integrate.solve_ivp`，可以直接对复值 ODE 系统进行积分，这极大地简化了实现。我们将设置严格的绝对和相对容差（例如 $10^{-13}$），以确保来自数值积分方案的误差远小于因使用有限时间区间 $[-t_{\\max}, t_{\\max}]$ 而产生的物理误差。\n\n数值积分后，我们得到最终时刻的态矢量 $\\psi(t_{\\max})$。问题将数值概率 $P_{\\mathrm{num}}$ 定义为发现系统处于其初始非绝热态的概率，该概率由态矢量第一个分量的模的平方给出：\n$$\nP_{\\mathrm{num}}(\\Delta, v, t_{\\max}) = |\\psi_1(t_{\\max})|^2\n$$\n\n为了计算误差 $\\varepsilon$，我们必须将此数值结果与著名的解析 Landau-Zener 概率 $P_{\\mathrm{LZ}}(\\Delta, v)$ 进行比较，后者对应于 $t_{\\max} \\to \\infty$ 的极限。该公式的推导考虑了系统的绝热能级，即 $H(t)$ 的瞬时本征值。这些本征值可通过特征方程 $\\det(H(t) - E I) = 0$ 求得，结果为：\n$$\nE_{\\pm}(t) = \\pm \\sqrt{\\left(\\frac{v t}{2}\\right)^2 + \\Delta^2}\n$$\n这些能级在 $t=0$ 处形成一个避让交叉，最小能隙为 $2\\Delta$。在 $t \\to -\\infty$ 时的初始态是非绝热态 $|\\phi_1\\rangle = (1, 0)^{\\top}$。此时，对角元 $H_{11}(t) = vt/2 \\to -\\infty$，因此 $|\\phi_1\\rangle$ 对应于较低的绝热本征态 $E_{-}(t)$。在一个完全绝热的演化中（无限慢的变化，即 $v \\to 0$），系统将保持在较低的能量面上，并在 $t \\to +\\infty$ 时演化为非绝热态 $|\\phi_2\\rangle = (0, 1)^{\\top}$，因为对于大的正 t 值，$H_{22}(t) = -vt/2$ 是较低的能量。\n\n然而，对于有限的速率 $v > 0$，存在发生非绝热跃迁的概率，此时系统在避让交叉处“跳”到较高的绝热能量面 $E_{+}(t)$。这对应于系统保持在初始的非绝热态 $|\\phi_1\\rangle$。这种跃迁的概率，也即初始非绝热态的存活概率，由 Landau-Zener 公式给出：\n$$\nP_{\\mathrm{LZ}}(\\Delta, v) = \\exp\\left(-\\frac{2\\pi \\Delta^2}{\\hbar v}\\right)\n$$\n在我们的无量纲单位制中，$\\hbar=1$，该公式变为：\n$$\nP_{\\mathrm{LZ}}(\\Delta, v) = \\exp\\left(-\\frac{2\\pi \\Delta^2}{v}\\right)\n$$\n然后，绝对误差 $\\varepsilon$ 计算如下：\n$$\n\\varepsilon(\\Delta, v, t_{\\max}) = \\left| P_{\\mathrm{num}}(\\Delta, v, t_{\\max}) - P_{\\mathrm{LZ}}(\\Delta, v) \\right|\n$$\n数值实现将循环遍历所提供的测试用例，为每组 $(\\Delta, v, t_{\\max})$ 执行积分，计算 $P_{\\mathrm{num}}$，将其与解析的 $P_{\\mathrm{LZ}}$ 进行比较，并存储所得的绝对误差 $\\varepsilon$。作为对数值积分质量的最终验证，应检查最终态矢量 $\\|\\psi(t_{\\max})\\|$ 的模长是否在微小容差内为一，以确认模拟的量子演化的幺正性。对于固定的 $(\\Delta, v)$ 对，当 $t_{\\max}$ 增加时 $\\varepsilon$ 的减小将展示有限时间数值解向渐近解析结果的收敛。", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef solve():\n    \"\"\"\n    Computes the absolute error between the numerical solution of the\n    time-dependent Schrödinger equation for a two-level Landau-Zener system\n    and the analytic Landau-Zener transition probability.\n    \"\"\"\n    \n    # Test cases are given as tuples of (delta, v, t_max).\n    test_cases = [\n        (0.5, 1.0, 6.0),\n        (0.5, 1.0, 10.0),\n        (0.5, 1.0, 14.0),\n        (1.0, 0.5, 8.0),\n        (1.0, 0.5, 12.0),\n        (1.0, 0.5, 16.0),\n        (0.1, 1.5, 6.0),\n        (0.1, 1.5, 10.0),\n        (0.1, 1.5, 14.0),\n    ]\n\n    results = []\n\n    def schrodinger_rhs(t, psi, delta, v):\n        \"\"\"\n        Defines the right-hand side of the TDSE in the form dy/dt = f(t, y).\n        The equation is d(psi)/dt = -i * H(t) * psi.\n        \n        Args:\n            t (float): Time.\n            psi (np.ndarray): State vector [psi_1, psi_2], complex-valued.\n            delta (float): Diabatic coupling.\n            v (float): Difference in slopes of diabatic energies.\n            \n        Returns:\n            np.ndarray: The time derivative of the state vector.\n        \"\"\"\n        # The Hamiltonian H(t) is [[v*t/2, delta], [delta, -v*t/2]].\n        H00 = 0.5 * v * t\n        H11 = -H00\n        H01 = delta\n        H10 = delta\n        \n        psi1, psi2 = psi\n        \n        # d(psi)/dt = -i * H * psi\n        d_psi1_dt = -1j * (H00 * psi1 + H01 * psi2)\n        d_psi2_dt = -1j * (H10 * psi1 + H11 * psi2)\n        \n        return np.array([d_psi1_dt, d_psi2_dt])\n\n    for delta, v, t_max in test_cases:\n        # Initial condition: psi(-t_max) = [1, 0]^T\n        psi0 = np.array([1.0 + 0.0j, 0.0 + 0.0j])\n        \n        # Time interval for integration\n        t_span = [-t_max, t_max]\n        \n        # Perform high-accuracy numerical integration using a high-order method.\n        # Tolerances are set to be very strict to ensure the numerical error\n        # from the integrator is negligible compared to the physical error\n        # from the finite time interval.\n        sol = solve_ivp(\n            fun=schrodinger_rhs,\n            t_span=t_span,\n            y0=psi0,\n            args=(delta, v),\n            method='DOP853',  # High-order adaptive Runge-Kutta method\n            rtol=1e-13,\n            atol=1e-13\n        )\n        \n        # Extract the final state vector at t = t_max\n        psi_final = sol.y[:, -1]\n        \n        # A posteriori check for norm preservation (optional but good practice)\n        # The norm should be 1 for unitary evolution.\n        norm = np.linalg.norm(psi_final)\n        if not np.isclose(norm, 1.0, rtol=1e-9, atol=1e-9):\n             # This block is for verification and would not typically be in\n             # production code unless for debugging.\n             # In a strict setting, this might even raise an error.\n             print(f\"Warning: Norm preservation failed for case ({delta}, {v}, {t_max}). Norm = {norm}\")\n\n        # Numerical probability P_num is |psi_1(t_max)|^2\n        p_num = np.abs(psi_final[0])**2\n        \n        # Analytic Landau-Zener probability P_LZ = exp(-2*pi*delta^2 / v)\n        # for a transition that remains on the diabatic curve (and jumps\n        # between adiabatic curves). With h_bar = 1.\n        p_lz = np.exp(-2.0 * np.pi * delta**2 / v)\n        \n        # Compute the absolute error\n        error = np.abs(p_num - p_lz)\n        results.append(error)\n\n    # Format the output as a comma-separated list in brackets.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2652123"}, {"introduction": "简单的 Landau-Zener 模型可以通过“表面跳跃”(surface hopping) 等方法进行扩展，用于模拟复杂的分子反应。这些模拟的一个关键环节是在势能面之间发生跳跃后，正确调整原子核的动量以保证总能量守恒。本练习深入探讨了这一动量重标度过程的力学原理，这是许多现代非绝热模拟软件包中的一个基本构建模块。[@problem_id:2652129]", "problem": "在多维化学反应网络中，一条反应性轨迹在 Landau–Zener 势面跳跃框架内进行处理，以解释在避免交叉处绝热电子态之间的非绝热跃迁。考虑在核构型 $\\mathbf{R}$ 处，从绝热态 $i$ 到绝热态 $j$ 的单次跳跃尝试，其中绝热势分别为 $V_{i}(\\mathbf{R})$ 和 $V_{j}(\\mathbf{R})$。设跳跃时的势能变化为 $\\Delta V \\equiv V_{j}(\\mathbf{R}) - V_{i}(\\mathbf{R})$。跳跃前的核动量为 $\\mathbf{p}$，核质量矩阵为 $M = \\mathrm{diag}(m_{1},\\dots,m_{N})$。核动能为 $K(\\mathbf{p}) = \\frac{1}{2}\\,\\mathbf{p}^{\\mathsf{T}} M^{-1} \\mathbf{p}$。在 $\\mathbf{R}$ 处，两个绝热态之间的非绝热耦合矢量为 $\\mathbf{d}_{ij}(\\mathbf{R})$。在一种保持总能量守恒且仅改变动量沿非绝热耦合方向分量的 Fewest Switches Surface Hopping (FSSH) 更新方法中，我们定义质量度规归一化的耦合方向\n$$\n\\hat{\\mathbf{d}} \\equiv \\frac{\\mathbf{d}_{ij}}{\\sqrt{\\mathbf{d}_{ij}^{\\mathsf{T}} M^{-1} \\mathbf{d}_{ij}}} \\quad \\text{以使} \\quad \\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} \\hat{\\mathbf{d}} = 1,\n$$\n以及相应的平行核速度分量\n$$\nc \\equiv \\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} \\mathbf{p}.\n$$\n假设跳跃（如果被接受）是通过平行于 $\\hat{\\mathbf{d}}$ 的动量变化 $\\Delta \\mathbf{p}$ 来实现的，即 $\\Delta \\mathbf{p} = \\alpha\\,\\hat{\\mathbf{d}}$，其中标量 $\\alpha$ 的选择是为了在固定的 $\\mathbf{R}$ 处强制总能量守恒：\n$$\n\\frac{1}{2}\\,(\\mathbf{p}+\\Delta \\mathbf{p})^{\\mathsf{T}} M^{-1} (\\mathbf{p}+\\Delta \\mathbf{p}) + V_{j}(\\mathbf{R})\n\\;=\\;\n\\frac{1}{2}\\,\\mathbf{p}^{\\mathsf{T}} M^{-1} \\mathbf{p} + V_{i}(\\mathbf{R}).\n$$\n在此设定下：\n- 推导当跳跃被接受时，跳跃后动量 $\\mathbf{p}'$ 的封闭形式表达式，用 $\\mathbf{p}$、$\\hat{\\mathbf{d}}$、$c$ 和 $\\Delta V$ 表示。此推导遵循的约定是：沿 $\\hat{\\mathbf{d}}$ 方向的跳跃后速度分量保持 $c$ 的符号，同时为满足能量守恒，其大小变化应最小化。\n- 推导一个标量表达式，当其为负值时，表示由于沿耦合方向的动能不足，该跳跃必须被拒绝。\n\n将你的最终答案以单行矩阵的形式给出，其第一个条目是 $\\mathbf{p}'$ 的符号表达式，第二个条目是其负值表示拒绝跳跃的标量表达式。请以符号形式表示您的答案；不要代入数值，也不要包含单位。", "solution": "所述问题具有科学依据，提法恰当且内容自洽。它描述了 Fewest Switches Surface Hopping (FSSH) 算法中的一种标准动量调整程序，该算法是非绝热分子动力学模拟的基石。质量加权度规、能量守恒以及对动量更新的约束的定义与理论化学物理领域的既有文献一致。因此，该问题是有效的，我将着手解决它。\n\n系统在态 $i$ 的总能量为 $E = K(\\mathbf{p}) + V_{i}(\\mathbf{R})$。跳跃到态 $j$ 后，新的动量为 $\\mathbf{p}'$，总能量为 $E' = K(\\mathbf{p}') + V_{j}(\\mathbf{R})$。问题要求总能量守恒，因此 $E' = E$。\n$$K(\\mathbf{p}') + V_{j}(\\mathbf{R}) = K(\\mathbf{p}) + V_{i}(\\mathbf{R})$$\n使用动能的定义 $K(\\mathbf{p}) = \\frac{1}{2}\\mathbf{p}^{\\mathsf{T}} M^{-1} \\mathbf{p}$ 和跳跃后动量 $\\mathbf{p}' = \\mathbf{p} + \\Delta \\mathbf{p}$，我们可以将能量守恒方程写为：\n$$\\frac{1}{2}(\\mathbf{p} + \\Delta \\mathbf{p})^{\\mathsf{T}} M^{-1} (\\mathbf{p} + \\Delta \\mathbf{p}) - \\frac{1}{2}\\mathbf{p}^{\\mathsf{T}} M^{-1} \\mathbf{p} = V_{i}(\\mathbf{R}) - V_{j}(\\mathbf{R})$$\n设 $\\Delta V = V_{j}(\\mathbf{R}) - V_{i}(\\mathbf{R})$。方程变为：\n$$\\frac{1}{2}(\\mathbf{p} + \\Delta \\mathbf{p})^{\\mathsf{T}} M^{-1} (\\mathbf{p} + \\Delta \\mathbf{p}) - \\frac{1}{2}\\mathbf{p}^{\\mathsf{T}} M^{-1} \\mathbf{p} = -\\Delta V$$\n我们展开第一项。由于质量矩阵 $M$ 是对角的，其逆矩阵 $M^{-1}$ 是对称的。因此，$\\mathbf{x}^{\\mathsf{T}} M^{-1} \\mathbf{y} = \\mathbf{y}^{\\mathsf{T}} M^{-1} \\mathbf{x}$。\n$$\\frac{1}{2}(\\mathbf{p}^{\\mathsf{T}} M^{-1} \\mathbf{p} + 2\\Delta \\mathbf{p}^{\\mathsf{T}} M^{-1} \\mathbf{p} + \\Delta \\mathbf{p}^{\\mathsf{T}} M^{-1} \\Delta \\mathbf{p}) - \\frac{1}{2}\\mathbf{p}^{\\mathsf{T}} M^{-1} \\mathbf{p} = -\\Delta V$$\n$$\\Delta \\mathbf{p}^{\\mathsf{T}} M^{-1} \\mathbf{p} + \\frac{1}{2}\\Delta \\mathbf{p}^{\\mathsf{T}} M^{-1} \\Delta \\mathbf{p} = -\\Delta V$$\n问题指出，动量变化平行于质量度规归一化的耦合方向 $\\hat{\\mathbf{d}}$，即 $\\Delta \\mathbf{p} = \\alpha \\hat{\\mathbf{d}}$，其中 $\\alpha$ 是某个标量。将此代入方程：\n$$(\\alpha \\hat{\\mathbf{d}})^{\\mathsf{T}} M^{-1} \\mathbf{p} + \\frac{1}{2}(\\alpha \\hat{\\mathbf{d}})^{\\mathsf{T}} M^{-1} (\\alpha \\hat{\\mathbf{d}}) = -\\Delta V$$\n$$\\alpha (\\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} \\mathbf{p}) + \\frac{1}{2}\\alpha^2 (\\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} \\hat{\\mathbf{d}}) = -\\Delta V$$\n我们已知定义 $c \\equiv \\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} \\mathbf{p}$ 和 $\\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} \\hat{\\mathbf{d}} = 1$。代入这些定义可将方程简化为关于 $\\alpha$ 的二次方程：\n$$\\alpha c + \\frac{1}{2}\\alpha^2 = -\\Delta V$$\n$$\\frac{1}{2}\\alpha^2 + c\\alpha + \\Delta V = 0$$\n使用二次公式求解 $\\alpha$ 得到两个可能的解：\n$$\\alpha = \\frac{-c \\pm \\sqrt{c^2 - 4(\\frac{1}{2})(\\Delta V)}}{2(\\frac{1}{2})} = -c \\pm \\sqrt{c^2 - 2\\Delta V}$$\n\n为了使动量变化 $\\Delta \\mathbf{p}$ 具有物理意义（即为一个实值向量），标量 $\\alpha$ 必须是实数。这要求二次方程的判别式为非负：\n$$c^2 - 2\\Delta V \\ge 0$$\n如果不满足此条件，则不存在能够守恒能量的实数解 $\\alpha$，该跳跃必须被拒绝。因此，其负值表示必须拒绝跳跃的标量表达式是 $c^2 - 2\\Delta V$。这完成了问题的第二部分。\n\n对于第一部分，我们必须确定选择哪个 $\\alpha$ 的解。问题指定了一个约定：沿 $\\hat{\\mathbf{d}}$ 方向的跳跃后速度分量必须保持跳跃前分量 $c$ 的符号。\n设跳跃后动量为 $\\mathbf{p}' = \\mathbf{p} + \\alpha \\hat{\\mathbf{d}}$。沿 $\\hat{\\mathbf{d}}$ 方向的跳跃后速度分量是 $c'$：\n$$c' \\equiv \\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} \\mathbf{p}' = \\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} (\\mathbf{p} + \\alpha \\hat{\\mathbf{d}}) = (\\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} \\mathbf{p}) + \\alpha (\\hat{\\mathbf{d}}^{\\mathsf{T}} M^{-1} \\hat{\\mathbf{d}}) = c + \\alpha$$\n代入 $\\alpha$ 的两个解：\n$$c'_{1} = c + (-c + \\sqrt{c^2 - 2\\Delta V}) = \\sqrt{c^2 - 2\\Delta V}$$\n$$c'_{2} = c + (-c - \\sqrt{c^2 - 2\\Delta V}) = -\\sqrt{c^2 - 2\\Delta V}$$\n根据定义，平方根是非负的。因此，$c'_{1} \\ge 0$ 且 $c'_{2} \\le 0$。约定要求 $\\mathrm{sgn}(c') = \\mathrm{sgn}(c)$，其中 $\\mathrm{sgn}$ 是符号函数。\n- 如果 $c > 0$，我们必须选择 $c'$ 的非负解，因此 $c' = c'_{1}$。这对应于选择 $\\alpha_1 = -c + \\sqrt{c^2 - 2\\Delta V}$。\n- 如果 $c < 0$，我们必须选择 $c'$ 的非正解，因此 $c' = c'_{2}$。这对应于选择 $\\alpha_2 = -c - \\sqrt{c^2 - 2\\Delta V}$。\n- 如果 $c = 0$，约定要求 $c'=0$。这仅在 $c^2 - 2\\Delta V = 0$ 时才可能，即 $\\Delta V = 0$。在这种情况下，$\\alpha$ 的两个解都为零。\n\n这三种情况可以使用符号函数 $\\mathrm{sgn}(c)$ 统一为 $c'$ 的单个表达式：\n$$c' = \\mathrm{sgn}(c) \\sqrt{c^2 - 2\\Delta V}$$\n从 $c' = c + \\alpha$，我们找到满足该约定的唯一 $\\alpha$ 值：\n$$\\alpha = c' - c = -c + \\mathrm{sgn}(c) \\sqrt{c^2 - 2\\Delta V}$$\n最后，跳跃后的动量 $\\mathbf{p}'$ 由下式给出：\n$$\\mathbf{p}' = \\mathbf{p} + \\alpha \\hat{\\mathbf{d}} = \\mathbf{p} + \\left( -c + \\mathrm{sgn}(c) \\sqrt{c^2 - 2 \\Delta V} \\right) \\hat{\\mathbf{d}}$$\n这就给出了当跳跃被接受时，跳跃后动量的封闭形式表达式。\n\n问题还提到了最小化幅度变化的条件。动量的幅度变化是 $\\|\\Delta \\mathbf{p}\\|$，它与 $|\\alpha|$ 成正比。仔细分析证实，保持 $c$ 符号的 $\\alpha$ 选择与最小化 $|\\alpha|$ 的选择是相同的，因此这两个约定是一致的。\n\n现在已经推导出所要求的两个表达式。第一个是跳跃后的动量 $\\mathbf{p}'$。第二个是标量表达式 $c^2-2\\Delta V$，其负值表示跳跃被拒绝。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\mathbf{p} + \\left( -c + \\mathrm{sgn}(c) \\sqrt{c^2 - 2 \\Delta V} \\right) \\hat{\\mathbf{d}} & c^2 - 2 \\Delta V\n\\end{pmatrix}\n}\n$$", "id": "2652129"}, {"introduction": "在真实的化学系统中，分子以由温度决定的速度分布穿过交叉区域，因此单次穿越的概率需要与统计力学相结合。本练习旨在计算热平均跃迁概率，通过在麦克斯韦-玻尔兹曼速度分布上对 Landau-Zener 公式进行积分，这是计算宏观反应速率的关键一步。这项实践还突出了精确高效地执行此计算所需的高级数值技术，即高斯-拉盖尔积分法 (Gauss–Laguerre quadrature)。[@problem_id:2652090]", "problem": "要求您计算朗道-曾纳 (Landau–Zener) 跃迁概率在一个麦克斯韦-玻尔兹曼 (Maxwell–Boltzmann) 速度分布上的热平均值，并为其评估设计一个数值稳定的求积方案。考虑一个一维反应坐标，其约化质量为 $\\mu$，以及一个线性避免交叉，其特征为非绝热耦合 $V$（能量单位）和恒定的斜率差大小 $\\lvert \\Delta F \\rvert$（力的单位）。对于以速度 $v \\equiv \\dot{R} \\gt 0$ 穿过避免交叉点的轨迹，其朗道-齐纳非绝热跃迁概率由经过充分检验的朗道-齐纳公式给出\n$$\nP_{\\mathrm{LZ}}(v) \\;=\\; \\exp\\!\\left( - \\frac{2\\pi V^2}{\\hbar\\, v\\, \\lvert \\Delta F \\rvert} \\right),\n$$\n其中 $\\hbar$ 是约化普朗克常数。在绝对温度 $T$ 下，沿反应坐标的正速度 $v \\gt 0$ 的热分布是通过对一维麦克斯韦-玻尔兹曼分布进行通量加权得到的，从而得出归一化权重\n$$\nw_T(v) \\;=\\; \\frac{\\mu}{k_{\\mathrm{B}} T}\\, v \\, \\exp\\!\\left( - \\frac{\\mu v^2}{2 k_{\\mathrm{B}} T} \\right),\n$$\n其中 $k_{\\mathrm{B}}$ 是玻尔兹曼常数。因此，$P_{\\mathrm{LZ}}$ 的热平均值为\n$$\n\\langle P_{\\mathrm{LZ}} \\rangle_T \\;=\\; \\int_{0}^{\\infty} P_{\\mathrm{LZ}}(v)\\, w_T(v)\\, dv,\n$$\n这是一个无量纲数。\n\n您的任务是：\n1) 从上述定义和变量替换 $t = \\frac{\\mu v^2}{2 k_{\\mathrm{B}} T}$ 出发，推导出一个积分形式，使其能与一个在 $[0,\\infty)$ 上权函数为 $\\exp(-t)$ 的经典高斯求积法则自然配对，并解释为什么这种映射能改善小速度和大速度情况下的数值稳定性。\n2) 基于该映射，提出并实现一个数值稳定的求积方案来评估 $\\langle P_{\\mathrm{LZ}} \\rangle_T$。您的实现必须是自包含的，且不要求任何输入。使用具有 $N=64$ 和 $N=128$ 个节点的高斯-拉盖尔 (Gauss–Laguerre) 求积法来生成一个近似值和一个后验误差估计。将用 $N=128$ 个节点计算的近似值作为最终值报告，并将 $N=128$ 节点和 $N=64$ 节点结果之间的绝对差作为误差估计。误差估计必须是一个非负浮点数。\n3) 使用以下常数和单位：\n- $\\hbar$ 单位为 $\\mathrm{J\\,s}$，\n- $k_{\\mathrm{B}}$ 单位为 $\\mathrm{J/K}$，\n- $\\mu$ 单位为 $\\mathrm{kg}$，\n- $\\lvert \\Delta F \\rvert$ 单位为 $\\mathrm{N}$，\n- $V$ 单位为 $\\mathrm{J}$，\n- $T$ 单位为 $\\mathrm{K}$。\n所有计算都必须在国际单位制（SI）中进行。最终的热平均值 $\\langle P_{\\mathrm{LZ}} \\rangle_T$ 是无量纲的，因此输出值不需要单位。\n4) 对于数值评估，使用物理上合理的固定参数 $\\mu = 1.0\\times 10^{-26}\\ \\mathrm{kg}$ 和 $\\lvert \\Delta F \\rvert = 1.0\\times 10^{-9}\\ \\mathrm{N}$。使用以下 $(T, V)$ 参数集测试套件，以确保覆盖各种情况：\n- 情况1（中等温度，弱耦合）：$T = 300\\ \\mathrm{K}$，$V = 1.0\\times 10^{-22}\\ \\mathrm{J}$。\n- 情况2（中等温度，中等耦合）：$T = 300\\ \\mathrm{K}$，$V = 5.0\\times 10^{-22}\\ \\mathrm{J}$。\n- 情况3（较低温度，相同中等耦合）：$T = 100\\ \\mathrm{K}$，$V = 5.0\\times 10^{-22}\\ \\mathrm{J}$。\n- 情况4（较高温度，强耦合）：$T = 1000\\ \\mathrm{K}$，$V = 1.0\\times 10^{-21}\\ \\mathrm{J}$。\n- 情况5（低温，非常强耦合）：$T = 50\\ \\mathrm{K}$，$V = 5.0\\times 10^{-21}\\ \\mathrm{J}$。\n- 情况6（非常高温度，非常弱耦合）：$T = 2000\\ \\mathrm{K}$，$V = 1.0\\times 10^{-23}\\ \\mathrm{J}$。\n5) 要求的最终输出格式：您的程序必须打印单行内容，该行包含一个 Python 风格的列表，内有六个项目，每个项目都是一个双元素浮点数列表，顺序为 $[\\langle P_{\\mathrm{LZ}} \\rangle_T, \\text{err}]$。每个浮点数使用八位有效数字。例如，对于两种情况的有效输出看起来像 [[0.12345679,1.234e-08],[0.98765432,2.468e-09]]（您的输出应在单个列表中包含所有六种情况）。不应打印任何附加文本。\n\n所有结果都是无量纲浮点数，必须按规定以八位有效数字打印。此问题不涉及角度，因此不需要指定角度单位。", "solution": "问题陈述已经过严格验证，被认为是科学上可靠、适定且无歧义的。它基于量子力学和统计力学的既定原理，特别是朗道-曾纳 (Landau-Zener) 理论和麦克斯韦-玻尔兹曼 (Maxwell-Boltzmann) 分布。唯一解所需的所有必要参数和条件均已提供。因此，我们可以进行推导和数值求解。\n\n目标是计算朗道-齐纳跃迁概率的热平均值 $\\langle P_{\\mathrm{LZ}} \\rangle_T$：\n$$\n\\langle P_{\\mathrm{LZ}} \\rangle_T = \\int_{0}^{\\infty} P_{\\mathrm{LZ}}(v)\\, w_T(v)\\, dv\n$$\n各组成部分为朗道-齐纳概率，\n$$\nP_{\\mathrm{LZ}}(v) = \\exp\\!\\left( - \\frac{2\\pi V^2}{\\hbar\\, v\\, \\lvert \\Delta F \\rvert} \\right)\n$$\n以及通量加权的速度分布，\n$$\nw_T(v) = \\frac{\\mu}{k_{\\mathrm{B}} T}\\, v \\, \\exp\\!\\left( - \\frac{\\mu v^2}{2 k_{\\mathrm{B}} T} \\right)\n$$\n其中 v 是速率，V 是非绝热耦合，|ΔF| 是力差，μ 是约化质量，T 是温度，而 ħ 和 $k_{\\mathrm{B}}$ 分别是约化普朗克常数和玻尔兹曼常数。完整的积分为：\n$$\n\\langle P_{\\mathrm{LZ}} \\rangle_T = \\int_{0}^{\\infty} \\exp\\!\\left( - \\frac{2\\pi V^2}{\\hbar v \\lvert \\Delta F \\rvert} \\right) \\frac{\\mu v}{k_{\\mathrm{B}} T} \\exp\\!\\left( - \\frac{\\mu v^2}{2 k_{\\mathrm{B}} T} \\right) dv\n$$\n问题要求进行变量替换，换为无量纲能量 $t = \\frac{\\mu v^2}{2 k_{\\mathrm{B}} T}$。我们来推导积分的变换。微分量 $dt$ 通过对 $v$ 求导得到：\n$$\ndt = \\frac{d}{dv} \\left( \\frac{\\mu v^2}{2 k_{\\mathrm{B}} T} \\right) dv = \\frac{2\\mu v}{2 k_{\\mathrm{B}} T} dv = \\frac{\\mu v}{k_{\\mathrm{B}} T} dv\n$$\n这一项 $\\frac{\\mu v}{k_{\\mathrm{B}} T} dv$ 直接出现在被积函数中。麦克斯韦-玻尔兹曼指数项变换为 $\\exp\\!\\left( - \\frac{\\mu v^2}{2 k_{\\mathrm{B}} T} \\right) = \\exp(-t)$。因此，加权微分元 $w_T(v)dv$ 简化为：\n$$\nw_T(v) dv = \\left[ \\exp\\!\\left( - \\frac{\\mu v^2}{2 k_{\\mathrm{B}} T} \\right) \\right] \\left( \\frac{\\mu v}{k_{\\mathrm{B}} T} dv \\right) = e^{-t} dt\n$$\n积分限保持不变，因为 $v \\in [0, \\infty)$ 映射到 $t \\in [0, \\infty)$。接下来，我们将 $P_{\\mathrm{LZ}}(v)$ 项表示为 $t$ 的函数。根据 $t$ 的定义，对于 $v>0$，速度 $v$ 由 $v = \\sqrt{\\frac{2 k_{\\mathrm{B}} T t}{\\mu}}$ 给出。将其代入 $P_{\\mathrm{LZ}}(v)$：\n$$\nP_{\\mathrm{LZ}}(t) = \\exp\\!\\left( - \\frac{2\\pi V^2}{\\hbar \\lvert \\Delta F \\rvert} \\left(\\sqrt{\\frac{2 k_{\\mathrm{B}} T t}{\\mu}}\\right)^{-1} \\right) = \\exp\\!\\left( - \\frac{2\\pi V^2}{\\hbar \\lvert \\Delta F \\rvert} \\sqrt{\\frac{\\mu}{2 k_{\\mathrm{B}} T}} \\frac{1}{\\sqrt{t}} \\right)\n$$\n为简化此表达式，我们引入一个无量纲参数 $\\gamma$，它包含了系统的所有物理参数：\n$$\n\\gamma = \\frac{2\\pi V^2}{\\hbar \\lvert \\Delta F \\rvert} \\sqrt{\\frac{\\mu}{2 k_{\\mathrm{B}} T}}\n$$\n根据此定义，$P_{\\mathrm{LZ}}(t)$ 变为 $\\exp(-\\gamma/\\sqrt{t})$。因此，变换后的完整积分为：\n$$\n\\langle P_{\\mathrm{LZ}} \\rangle_T = \\int_{0}^{\\infty} \\exp\\left(-\\frac{\\gamma}{\\sqrt{t}}\\right) e^{-t} dt\n$$\n该积分是高斯-拉盖尔 (Gauss-Laguerre) 求积法的标准形式 $\\int_0^\\infty f(t) e^{-t} dt$，其中要用多项式近似的函数是 $f(t) = \\exp(-\\gamma/\\sqrt{t})$。\n\n这种变换不仅仅是数学上的便利；它是确保数值稳定性和准确性的关键步骤。\n1.  **分离主导衰减项：** 麦克斯韦-玻尔兹曼分布包含项 $\\exp(-\\frac{\\mu v^2}{2 k_{\\mathrm{B}} T})$，该项导致高速时快速衰减。该项成为高斯-拉盖尔求积法的权函数 $e^{-t}$。通过将此权函数纳入求积法则的节点和权重中，数值方法可以集中精力近似更为平滑、非衰减的函数 $f(t)$。这比通用积分器效率高得多，因为通用积分器必须解析原始被积函数的完整峰状结构。\n2.  **减轻奇点影响：** 原始被积函数包含项 $P_{\\mathrm{LZ}}(v) \\propto \\exp(-\\text{const}/v)$，该项在 $v=0$ 处有一个本性奇点。尽管总被积函数在 $v=0$ 时趋于零，但函数在原点附近的极端平坦性对基于多项式的近似方法构成了挑战。映射到 $f(t) = \\exp(-\\gamma/\\sqrt{t})$ 改变了原点附近的行为。虽然当 $t \\to 0^+$ 时，$f(t)$ 也极其平坦，但将问题转化为标准的高斯-拉盖尔形式，使我们能够使用一种专门的求积法，其节点针对 $e^{-t}$ 权重进行了优化配置，从而确保了稳健的评估。\n\n数值评估使用高斯-拉盖尔 (Gauss-Laguerre) 求积法进行。该积分通过加权和来近似：\n$$\n\\int_0^\\infty f(t) e^{-t} dt \\approx \\sum_{i=1}^{N} w_i f(t_i)\n$$\n这里，$t_i$ 和 $w_i$ 是 $N$ 点求积的节点和权重，由 $N$ 阶拉盖尔 (Laguerre) 多项式 $L_N(t)$ 的根导出。这些值是使用标准的高精度数值库获得的。按照规定，我们计算 $N=64$ 点 ($I_{64}$) 和 $N=128$ 点 ($I_{128}$) 的近似值。最终报告的值是 $I_{128}$，后验误差估计是绝对差 $|I_{128} - I_{64}|$。对六个指定的 $(T, V)$ 参数集中的每一个都执行此过程，使用 `scipy.constants` 中的基本物理常数和问题提供的参数，全部采用国际单位制。", "answer": "```python\nimport numpy as np\nfrom scipy import constants\nfrom scipy.special import roots_laguerre\n\ndef solve():\n    \"\"\"\n    Computes the thermally averaged Landau-Zener transition probability\n    using Gauss-Laguerre quadrature.\n    \"\"\"\n\n    # Fundamental constants from scipy in SI units.\n    hbar = constants.hbar\n    k_B = constants.k\n\n    # Fixed physical parameters from the problem statement in SI units.\n    mu = 1.0e-26  # kg\n    delta_F_abs = 1.0e-9  # N\n\n    # Test cases defined in the problem statement as (T, V) pairs.\n    # T is in Kelvin, V is in Joules.\n    test_cases = [\n        (300.0, 1.0e-22),   # Case 1\n        (300.0, 5.0e-22),   # Case 2\n        (100.0, 5.0e-22),   # Case 3\n        (1000.0, 1.0e-21),  # Case 4\n        (50.0, 5.0e-21),    # Case 5\n        (2000.0, 1.0e-23)   # Case 6\n    ]\n\n    results = []\n\n    # Number of nodes for Gauss-Laguerre quadrature.\n    N_low = 64\n    N_high = 128\n\n    # Pre-compute nodes and weights to avoid repeated calculations if they were constant.\n    # However, since we define f(t) within the loop, pre-computation of nodes/weights\n    # for each N is better done once.\n    nodes_64, weights_64 = roots_laguerre(N_low)\n    nodes_128, weights_128 = roots_laguerre(N_high)\n\n    for T, V in test_cases:\n        # Calculate the dimensionless parameter gamma.\n        gamma = (2.0 * np.pi * V**2) / (hbar * delta_F_abs) * np.sqrt(mu / (2.0 * k_B * T))\n\n        # Define the function f(t) = exp(-gamma / sqrt(t)) to be integrated.\n        # The quadrature nodes t_i from roots_laguerre are strictly positive,\n        # so no division by zero will occur.\n        def f(t, current_gamma):\n            return np.exp(-current_gamma / np.sqrt(t))\n\n        # Perform Gauss-Laguerre quadrature for N=64.\n        # The sum is sum(w_i * f(t_i)).\n        integral_64 = np.sum(weights_64 * f(nodes_64, gamma))\n\n        # Perform Gauss-Laguerre quadrature for N=128.\n        integral_128 = np.sum(weights_128 * f(nodes_128, gamma))\n\n        # The final value is the more accurate N=128 result.\n        value = integral_128\n        # The error estimate is the absolute difference between the two approximations.\n        error = np.abs(integral_128 - integral_64)\n\n        results.append([value, error])\n\n    # Format the output string according to the problem specification.\n    # Each float must be represented with eight significant digits.\n    # The '.8g' format specifier is suitable for this purpose.\n    formatted_results = []\n    for val, err in results:\n        formatted_results.append(f\"[{val:.8g},{err:.8g}]\")\n    \n    # Print the final result in a single line as a Python-style list of lists.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2652090"}]}