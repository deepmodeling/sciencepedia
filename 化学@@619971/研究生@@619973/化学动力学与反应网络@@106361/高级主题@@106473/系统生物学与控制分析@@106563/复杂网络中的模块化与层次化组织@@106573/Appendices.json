{"hands_on_practices": [{"introduction": "在探索网络模块化的过程中，模块度（$Q$）是一个核心的量化指标。在我们运用复杂的算法来最大化 $Q$ 值之前，我们必须首先理解这个函数本身的性质和内在局限性。本练习将引导你通过一个具体的计算，亲手揭示模块度的一个著名问题——分辨率极限（resolution limit），即 $Q$ 值的最大化有时会不符合直觉地将明显分离的小模块合并起来。[@problem_id:2656674]", "problem": "考虑一个可逆化学反应网络，该网络表示为一个无向无权图，其中顶点是化学物质，两个物质之间的无向边表示它们共同参与至少一个可逆反应步骤。该网络被组织成 $3$ 个假设的模块，表示为 $\\mathcal{A}$、$\\mathcal{B}$ 和 $\\mathcal{C}$。模块 $\\mathcal{A}$ 和 $\\mathcal{B}$ 都是密集且小的；具体来说，每个都是包含 $5$ 个顶点的完全子图，因此每个都有 $10$ 条内部边。模块 $\\mathcal{C}$ 是一个较大的密集子图，其内部边的数量未知，表示为 $L_{\\mathcal{C}} \\in \\mathbb{N}$。模块之间，$\\mathcal{A}$ 和 $\\mathcal{B}$ 之间恰好有 $1$ 条边，$\\mathcal{A}$ 和 $\\mathcal{C}$ 之间恰好有 $1$ 条边，$\\mathcal{B}$ 和 $\\mathcal{C}$ 之间也恰好有 $1$ 条边；没有其他边。您可以假定使用标准的 Newman–Girvan 模块度定义来处理无向无权网络，并且可以将给定的 $3$ 模块分配视为一个候选划分。\n\n计算具有 $3$ 个独立模块 $\\{\\mathcal{A}\\}, \\{\\mathcal{B}\\}, \\{\\mathcal{C}\\}$ 的划分的模块度 $Q$，以及将两个小模块合并后的划分 $\\{\\mathcal{A}\\cup\\mathcal{B}\\}, \\{\\mathcal{C}\\}$ 的模块度。通过比较这两个值，确定使得合并后的划分的模块度严格大于 $3$ 模块划分的模块度的最小整数 $L_{\\mathcal{C}}^{\\star}$。您的最终答案必须是单个整数 $L_{\\mathcal{C}}^{\\star}$，无需单位，也无需四舍五入。", "solution": "该问题要求确定网络中模块 $\\mathcal{C}$ 的内部边数 $L_{\\mathcal{C}}$ 的一个条件，使得合并另外两个模块 $\\mathcal{A}$ 和 $\\mathcal{B}$ 会导致网络模块度的严格增加。\n\n首先，我们必须定义模块度。对于划分为一组社群（模块）的无向无权网络，Newman-Girvan 模块度 $Q$ 由以下公式给出：\n$$Q = \\sum_{s} \\left( e_s - a_s^2 \\right)$$\n其中，总和是针对划分中的所有模块 $s$。项 $e_s = \\frac{L_s}{m}$ 是网络中属于模块 $s$ 内部的边的比例，其中 $L_s$ 是两端都位于模块 $s$ 内的边的数量，而 $m$ 是网络中的总边数。项 $a_s = \\frac{d_s}{2m}$ 是连接到模块 $s$ 中顶点的所有边“端点”的比例，其中 $d_s$ 是模块 $s$ 中所有顶点的度之和。这可以重写为：\n$$Q = \\sum_{s} \\left[ \\frac{L_s}{m} - \\left(\\frac{d_s}{2m}\\right)^2 \\right]$$\n\n为了继续进行，我们必须计算两个给定划分所需的参数。\n该网络由三个模块组成：$\\mathcal{A}$、$\\mathcal{B}$ 和 $\\mathcal{C}$。\n模块 $\\mathcal{A}$ 是一个包含 $n_{\\mathcal{A}} = 5$ 个顶点的完全图，因此其内部边数为 $L_{\\mathcal{A}} = \\binom{5}{2} = 10$。\n模块 $\\mathcal{B}$ 是一个包含 $n_{\\mathcal{B}} = 5$ 个顶点的完全图，因此其内部边数为 $L_{\\mathcal{B}} = \\binom{5}{2} = 10$。\n模块 $\\mathcal{C}$ 的内部边数未知，为 $L_{\\mathcal{C}}$。\n模块间的连接是给定的：$\\mathcal{A}$ 和 $\\mathcal{B}$ 之间有一条边，$\\mathcal{A}$ 和 $\\mathcal{C}$ 之间有一条边，$\\mathcal{B}$ 和 $\\mathcal{C}$ 之间也有一条边。没有其他边。\n\n网络中的总边数 $m$ 是所有内部边和模块间边的总和：\n$$m = L_{\\mathcal{A}} + L_{\\mathcal{B}} + L_{\\mathcal{C}} + E_{\\mathcal{A}\\mathcal{B}} + E_{\\mathcal{A}\\mathcal{C}} + E_{\\mathcal{B}\\mathcal{C}} = 10 + 10 + L_{\\mathcal{C}} + 1 + 1 + 1 = 23 + L_{\\mathcal{C}}$$\n\n一个模块 $s$ 的总度数 $d_s$ 是其节点度数的总和。这可以计算为 $d_s = 2L_s + (\\text{连接到 } s \\text{ 的外部边数})$。\n对于模块 $\\mathcal{A}$：$d_{\\mathcal{A}} = 2L_{\\mathcal{A}} + E_{\\mathcal{A}\\mathcal{B}} + E_{\\mathcal{A}\\mathcal{C}} = 2(10) + 1 + 1 = 22$。\n对于模块 $\\mathcal{B}$：$d_{\\mathcal{B}} = 2L_{\\mathcal{B}} + E_{\\mathcal{A}\\mathcal{B}} + E_{\\mathcal{B}\\mathcal{C}} = 2(10) + 1 + 1 = 22$。\n对于模块 $\\mathcal{C}$：$d_{\\mathcal{C}} = 2L_{\\mathcal{C}} + E_{\\mathcal{A}\\mathcal{C}} + E_{\\mathcal{B}\\mathcal{C}} = 2L_{\\mathcal{C}} + 1 + 1 = 2L_{\\mathcal{C}} + 2$。\n\n现在，我们计算第一个划分 $P_1 = \\{\\mathcal{A}, \\mathcal{B}, \\mathcal{C}\\}$ 的模块度 $Q_1$。\n$$Q_1 = \\left[\\frac{L_{\\mathcal{A}}}{m} - \\left(\\frac{d_{\\mathcal{A}}}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{B}}}{m} - \\left(\\frac{d_{\\mathcal{B}}}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{C}}}{m} - \\left(\\frac{d_{\\mathcal{C}}}{2m}\\right)^2\\right]$$\n代入我们的值：\n$$Q_1 = \\left[\\frac{10}{m} - \\left(\\frac{22}{2m}\\right)^2\\right] + \\left[\\frac{10}{m} - \\left(\\frac{22}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{C}}}{m} - \\left(\\frac{2L_{\\mathcal{C}}+2}{2m}\\right)^2\\right]$$\n$$Q_1 = \\frac{20+L_{\\mathcal{C}}}{m} - \\frac{1}{m^2} \\left[ \\left(\\frac{22}{2}\\right)^2 + \\left(\\frac{22}{2}\\right)^2 + \\left(\\frac{2L_{\\mathcal{C}}+2}{2}\\right)^2 \\right]$$\n$$Q_1 = \\frac{20+L_{\\mathcal{C}}}{m} - \\frac{1}{m^2} \\left( 11^2 + 11^2 + (L_{\\mathcal{C}}+1)^2 \\right)$$\n$$Q_1 = \\frac{20+L_{\\mathcal{C}}}{m} - \\frac{121 + 121 + L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 1}{m^2} = \\frac{20+L_{\\mathcal{C}}}{m} - \\frac{L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 243}{m^2}$$\n为了合并这些项，我们使用 $m = 23 + L_{\\mathcal{C}}$：\n$$Q_1 = \\frac{(20+L_{\\mathcal{C}})(23+L_{\\mathcal{C}}) - (L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 243)}{(23+L_{\\mathcal{C}})^2}$$\n$$Q_1 = \\frac{(460 + 43L_{\\mathcal{C}} + L_{\\mathcal{C}}^2) - (L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 243)}{(23+L_{\\mathcal{C}})^2} = \\frac{41L_{\\mathcal{C}} + 217}{(23+L_{\\mathcal{C}})^2}$$\n\n接下来，我们计算第二个划分 $P_2 = \\{\\mathcal{M}, \\mathcal{C}\\}$ 的模块度 $Q_2$，其中 $\\mathcal{M} = \\mathcal{A} \\cup \\mathcal{B}$。\n对于合并后的模块 $\\mathcal{M}$，其内部边数是 $\\mathcal{A}$ 内部、$\\mathcal{B}$ 内部以及 $\\mathcal{A}$ 和 $\\mathcal{B}$ 之间边的总和：\n$$L_{\\mathcal{M}} = L_{\\mathcal{A}} + L_{\\mathcal{B}} + E_{\\mathcal{A}\\mathcal{B}} = 10 + 10 + 1 = 21$$\n模块 $\\mathcal{M}$ 的总度数是其组成模块的度数之和：\n$$d_{\\mathcal{M}} = d_{\\mathcal{A}} + d_{\\mathcal{B}} = 22 + 22 = 44$$\n模块 $\\mathcal{C}$ 的参数 ($L_{\\mathcal{C}}$, $d_{\\mathcal{C}}$) 和总边数 $m$ 保持不变。\n模块度 $Q_2$ 是：\n$$Q_2 = \\left[\\frac{L_{\\mathcal{M}}}{m} - \\left(\\frac{d_{\\mathcal{M}}}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{C}}}{m} - \\left(\\frac{d_{\\mathcal{C}}}{2m}\\right)^2\\right]$$\n代入合并划分的值：\n$$Q_2 = \\left[\\frac{21}{m} - \\left(\\frac{44}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{C}}}{m} - \\left(\\frac{2L_{\\mathcal{C}}+2}{2m}\\right)^2\\right]$$\n$$Q_2 = \\frac{21+L_{\\mathcal{C}}}{m} - \\frac{1}{m^2} \\left[ \\left(\\frac{44}{2}\\right)^2 + \\left(\\frac{2L_{\\mathcal{C}}+2}{2}\\right)^2 \\right]$$\n$$Q_2 = \\frac{21+L_{\\mathcal{C}}}{m} - \\frac{1}{m^2} \\left( 22^2 + (L_{\\mathcal{C}}+1)^2 \\right)$$\n$$Q_2 = \\frac{21+L_{\\mathcal{C}}}{m} - \\frac{484 + L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 1}{m^2} = \\frac{21+L_{\\mathcal{C}}}{m} - \\frac{L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 485}{m^2}$$\n合并项：\n$$Q_2 = \\frac{(21+L_{\\mathcal{C}})(23+L_{\\mathcal{C}}) - (L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 485)}{(23+L_{\\mathcal{C}})^2}$$\n$$Q_2 = \\frac{(483 + 44L_{\\mathcal{C}} + L_{\\mathcal{C}}^2) - (L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 485)}{(23+L_{\\mathcal{C}})^2} = \\frac{42L_{\\mathcal{C}} - 2}{(23+L_{\\mathcal{C}})^2}$$\n\n我们的任务是找到最小的整数 $L_{\\mathcal{C}}^{\\star}$，使得合并后的划分的模块度严格增加。这对应于条件 $Q_2 > Q_1$。\n$$\\frac{42L_{\\mathcal{C}} - 2}{(23+L_{\\mathcal{C}})^2} > \\frac{41L_{\\mathcal{C}} + 217}{(23+L_{\\mathcal{C}})^2}$$\n由于 $L_{\\mathcal{C}}$ 表示边的数量，$L_{\\mathcal{C}} \\in \\mathbb{N}$，因此 $L_{\\mathcal{C}} \\ge 0$。分母 $(23+L_{\\mathcal{C}})^2$ 是严格正的。因此，我们可以用该项乘以不等式两边，而不会改变不等号的方向。\n$$42L_{\\mathcal{C}} - 2 > 41L_{\\mathcal{C}} + 217$$\n两边减去 $41L_{\\mathcal{C}}$ 得：\n$$L_{\\mathcal{C}} - 2 > 217$$\n两边加上 $2$ 得：\n$$L_{\\mathcal{C}} > 219$$\n问题要求满足此条件的 $L_{\\mathcal{C}}$ 的最小整数值，记为 $L_{\\mathcal{C}}^{\\star}$。严格大于 $219$ 的最小整数是 $220$。\n因此，$L_{\\mathcal{C}}^{\\star} = 220$。", "answer": "$$\\boxed{220}$$", "id": "2656674"}, {"introduction": "掌握了模块度的基本概念后，我们转向一个更实际、由算法驱动的模块检测方法。本练习将带领你走过一个完整的分析流程：从化学反应动力学出发构建物种相互作用图，然后利用基于图拉普拉斯矩阵（graph Laplacian）的强大谱聚类算法来划分网络。通过这个实践，你将建立起分析真实世界网络数据的关键计算技能。[@problem_id:2656656]", "problem": "考虑一个小型的质量作用化学反应网络族，每个网络都被解释为一个加权无向物种相互作用图，该图源自物种动力学在参考浓度下线性化后的雅可比矩阵。从质量作用动力学和常微分方程（ODE）的基本原理出发，你需要计算物种相互作用图的谱嵌入，然后使用k-均值算法将物种聚类成假定模块。最后，你将通过比较总内部强度与跨簇的切割大小来验证所得的划分。\n\n基本原理如下。对于一个汇集在向量 $\\mathbf{x} \\in \\mathbb{R}_{\\ge 0}^{n}$ 中的物种浓度集合，以及一组由 $j \\in \\{1,\\dots,m\\}$ 索引的、具有质量作用速率 $v_j(\\mathbf{x})$ 的反应，物种动力学表示为\n$$\n\\frac{d \\mathbf{x}}{dt} \\;=\\; \\mathbf{S}\\, \\mathbf{v}(\\mathbf{x}),\n$$\n其中 $\\mathbf{S} \\in \\mathbb{R}^{n \\times m}$ 是化学计量矩阵。对于每个反应 $j$，$v_j(\\mathbf{x})$ 是物种浓度以化学计量阶为幂的乘积，再乘以一个正常数速率常数 $k_j$。在参考浓度 $\\mathbf{x}^{\\star}$ 处评估的雅可比矩阵（即右侧对 $\\mathbf{x}$ 的偏导数矩阵）为\n$$\n\\mathbf{J} \\;\\equiv\\; \\left. \\frac{\\partial}{\\partial \\mathbf{x}} \\left(\\mathbf{S}\\, \\mathbf{v}(\\mathbf{x})\\right)\\right|_{\\mathbf{x} = \\mathbf{x}^{\\star}} \\;=\\; \\mathbf{S}\\, \\left. \\frac{\\partial \\mathbf{v}}{\\partial \\mathbf{x}} \\right|_{\\mathbf{x} = \\mathbf{x}^{\\star}}.\n$$\n定义物种上的对称非负权重矩阵 $\\mathbf{W}$ 为\n$$\n\\mathbf{W} \\;=\\; \\frac{1}{2}\\left( |\\mathbf{J}| + |\\mathbf{J}|^{\\mathsf{T}} \\right),\n$$\n其对角线元素设为零，其中绝对值是逐元素计算的。设 $\\mathbf{D}$ 为对角度矩阵，其元素为 $D_{ii} = \\sum_{j} W_{ij}$，并考虑对称归一化图拉普拉斯矩阵\n$$\n\\mathbf{L}_{\\mathrm{sym}} \\;=\\; \\mathbf{I} - \\mathbf{D}^{-1/2}\\, \\mathbf{W}\\, \\mathbf{D}^{-1/2}.\n$$\n一个$k$维谱嵌入是通过将与$k$个最小特征值（计算多重性）相关联的 $\\mathbf{L}_{\\mathrm{sym}}$ 的$k$个特征向量作为列堆叠起来，形成 $\\mathbf{U} \\in \\mathbb{R}^{n \\times k}$，然后对 $\\mathbf{U}$ 进行行归一化，使得每一行都具有单位欧几里得范数（零范数的行可以保持为零）。然后对这个嵌入矩阵的行执行$k$-均值聚类。\n\n对一个划分 $\\mathcal{C} = \\{C_1,\\dots,C_k\\}$ 的验证通过计算以下值来完成：\n- 内部强度\n$$\nS_{\\mathrm{intra}} \\;=\\; \\sum_{i<j} W_{ij}\\, \\mathbf{1}\\{\\, \\exists\\, \\ell \\text{ with } i \\in C_\\ell \\text{ and } j \\in C_\\ell \\,\\},\n$$\n- 切割大小\n$$\nS_{\\mathrm{cut}} \\;=\\; \\sum_{i<j} W_{ij}\\, \\mathbf{1}\\{\\, \\text{for all } \\ell, \\; \\neg(i \\in C_\\ell \\wedge j \\in C_\\ell) \\,\\}.\n$$\n定义质量比\n$$\nR \\;=\\; \\frac{S_{\\mathrm{intra}}}{S_{\\mathrm{cut}} + \\varepsilon},\n$$\n其中 $\\varepsilon = 10^{-12}$ 以避免在 $S_{\\mathrm{cut}} = 0$ 的情况下发生除零错误。\n\n使用以下反应网络测试套件。在每种情况下，物种由 $\\{1,\\dots,n\\}$ 索引，反应是形式为 $i \\to j$ 的单分子反应，在质量作用动力学 $v(\\mathbf{x}) = k\\, x_i$ 下速率为 $k$，参考浓度为 $\\mathbf{x}^{\\star} = (1,1,\\dots,1)^{\\mathsf{T}}$。对于每个网络，通过上述的雅可比矩阵构建 $\\mathbf{W}$，计算指定 $k$ 值的谱嵌入，运行 $k$-均值算法（进行10次随机初始化，每次运行最多100次迭代），选择簇内平方和最小的那次运行，然后返回质量比 $R$。\n\n测试用例 A（两个弱耦合模块，$n = 6$，$k = 2$）：\n- 反应 $(i \\to j, k)$:\n  - $(1 \\to 2, 1.0)$, $(2 \\to 1, 1.0)$, $(2 \\to 3, 1.0)$, $(3 \\to 2, 1.0)$,\n  - $(4 \\to 5, 1.0)$, $(5 \\to 4, 1.0)$, $(5 \\to 6, 1.0)$, $(6 \\to 5, 1.0)$,\n  - $(3 \\to 4, 0.02)$, $(6 \\to 1, 0.02)$.\n\n测试用例 B（强混合网络，$n = 6$，$k = 2$）：\n- 反应 $(i \\to j, k)$:\n  - $(1 \\to 4, 0.9)$, $(4 \\to 1, 0.9)$, $(2 \\to 5, 0.9)$, $(5 \\to 2, 0.9)$, $(3 \\to 6, 0.9)$, $(6 \\to 3, 0.9)$,\n  - $(1 \\to 2, 0.8)$, $(2 \\to 3, 0.8)$, $(3 \\to 1, 0.8)$, $(4 \\to 5, 0.8)$, $(5 \\to 6, 0.8)$, $(6 \\to 4, 0.8)$.\n\n测试用例 C（三个弱耦合模块，$n = 6$，$k = 3$）：\n- 反应 $(i \\to j, k)$:\n  - $(1 \\to 2, 1.0)$, $(2 \\to 1, 1.0)$,\n  - $(3 \\to 4, 1.0)$, $(4 \\to 3, 1.0)$,\n  - $(5 \\to 6, 1.0)$, $(6 \\to 5, 1.0)$,\n  - $(2 \\to 3, 0.03)$, $(4 \\to 5, 0.03)$.\n\n测试用例 D（两个不相连的模块，$n = 6$，$k = 2$）：\n- 反应 $(i \\to j, k)$:\n  - $(1 \\to 2, 1.0)$, $(2 \\to 1, 1.0)$, $(2 \\to 3, 1.0)$, $(3 \\to 2, 1.0)$,\n  - $(4 \\to 5, 1.0)$, $(5 \\to 4, 1.0)$, $(5 \\to 6, 1.0)$, $(6 \\to 5, 1.0)$.\n- 这种情况下没有跨模块的反应。\n\n算法要求：\n- 对于速率常数为 $k$ 的单分子反应 $i \\to j$，其反应速率的唯一非零偏导数为 $\\partial v/\\partial x_i = k$，利用这一点来构建 $\\mathbf{J}$。这对 $\\mathbf{J}$ 的贡献是列式的：$J_{i,i} \\leftarrow J_{i,i} - k$ 且 $J_{j,i} \\leftarrow J_{j,i} + k$。\n- 构建 $\\mathbf{W}$、$\\mathbf{L}_{\\mathrm{sym}}$，计算具有最小特征值的$k$个特征向量，进行行归一化，然后运行$k$-均值算法（10次随机初始化，每次最多100次迭代），并选择簇内平方和最小的那次运行。\n- 计算 $R = S_{\\mathrm{intra}}/(S_{\\mathrm{cut}} + 10^{-12})$。\n\n最终输出格式：\n- 你的程序应产生单行输出，包含一个用方括号括起来的逗号分隔列表（例如，`[r_1,r_2,r_3,r_4]`），其中 $r_i$ 是测试用例 $i$ 的质量比 $R$，以浮点数表示。不允许有额外的文本或空格。", "solution": "该问题陈述是有效的。它在科学上是合理的、定义明确且客观的。它为使用标准谱聚类流程分析化学反应网络的模块性提供了一套完整且一致的指令。该方法论植根于化学动力学、线性代数、图论和机器学习的既定原理。其中不存在事实错误、矛盾或含糊之处。我将继续提供详细的解决方案。\n\n问题的核心是识别化学反应网络中的模块化结构。一个模块是一组相互之间相互作用强、但与模块外物种相互作用弱的物种。所提供的方法论系统地将化学网络转化为数学图，然后使用谱方法对其进行划分。\n\n**1. 从反应动力学到相互作用图**\n\n物种浓度 $\\mathbf{x} = (x_1, \\dots, x_n)^{\\mathsf{T}}$ 的动力学由一个常微分方程（ODE）系统描述，即 $\\frac{d\\mathbf{x}}{dt} = \\mathbf{S} \\mathbf{v}(\\mathbf{x})$，其中 $\\mathbf{S}$ 是化学计量矩阵，$\\mathbf{v}(\\mathbf{x})$ 是反应速率向量。为了分析物种间的相互作用，我们在一个参考浓度 $\\mathbf{x}^{\\star}$ 周围对该系统进行线性化。这种线性化的矩阵就是雅可比矩阵 $\\mathbf{J}$。每个元素 $J_{ij} = \\frac{\\partial}{\\partial x_j} (\\frac{dx_i}{dt})$ 表示物种 $j$ 浓度的微小变化对物种 $i$ 变化率的影响。\n\n问题指定了形式为 $i \\to j$ 且质量作用速率为 $v(\\mathbf{x}) = k x_i$ 的单分子反应。该反应消耗物种 $i$ 并产生物种 $j$。速率仅依赖于 $x_i$，因此该速率的唯一非零偏导数是 $\\frac{\\partial v}{\\partial x_i} = k$。该反应的化学计量向量对于物种 $i$ 为 $-1$，对于物种 $j$ 为 $+1$。对雅可比矩阵 $\\mathbf{J}$ 的贡献是第 $i$ 列的变化：对角元素 $J_{ii}$ 减少 $k$（由于消耗），非对角元素 $J_{ji}$ 增加 $k$（由于产生）。我们通过对所有反应的这些贡献求和来构建完整的雅可比矩阵。\n\n雅可比矩阵 $\\mathbf{J}$ 通常不是对称的。为了定义一个加权的无向物种相互作用图，我们需要一个对称的权重矩阵 $\\mathbf{W}$。问题通过对雅可比矩阵的逐元素绝对值进行对称化来定义它：$\\mathbf{W} = \\frac{1}{2}(|\\mathbf{J}| + |\\mathbf{J}|^{\\mathsf{T}})$。取绝对值确保了所有权重都是非负的，表示相互作用的强度，而不管它是激活性的还是抑制性的。对角线元素被设置为零，因为我们关心的是不同物种之间的相互作用。\n\n**2. 用于模块检测的谱聚类**\n\n有了权重矩阵 $\\mathbf{W}$，我们就得到了一个无向图，其中物种是节点，$W_{ij}$ 是物种 $i$ 和 $j$ 之间边的权重。为了在该图中找到簇，我们采用谱聚类，这是一种基于图拉普拉斯矩阵性质的强大技术。问题使用了对称归一化拉普拉斯矩阵，定义为 $\\mathbf{L}_{\\mathrm{sym}} = \\mathbf{I} - \\mathbf{D}^{-1/2}\\mathbf{W}\\mathbf{D}^{-1/2}$，其中 $\\mathbf{D}$ 是对角度矩阵，其元素为 $D_{ii} = \\sum_j W_{ij}$。\n\n谱聚类的关键见解在于，与拉普拉斯矩阵最小特征值相对应的特征向量捕捉了图的大尺度结构。对于一个有 $c$ 个连通分量的图，拉普拉斯矩阵有 $c$ 个等于 $0$ 的特征值。相应的特征向量是这些分量的指示向量。对于一个近乎可分解的图（即具有强模块的图），与最小非零特征值相关的特征向量（通常称为菲德勒向量）在模块内部将几乎是常数，而在模块间的弱连接处会改变数值。\n\n我们计算与 $k$ 个最小特征值相对应的 $\\mathbf{L}_{\\mathrm{sym}}$ 的 $k$ 个特征向量。这些特征向量构成了矩阵 $\\mathbf{U} \\in \\mathbb{R}^{n \\times k}$ 的列。$\\mathbf{U}$ 的行可以被看作是 $n$ 个物种在 $k$ 维欧几里得空间中的新坐标。这就是“谱嵌入”。在这个空间中，属于同一模块的物种预计会彼此靠近。为了使这些点更适合基于距离的聚类，我们对矩阵 $\\mathbf{U}$ 进行行归一化，将嵌入投影到一个单位球面上。\n\n**3. K-均值聚类与划分评估**\n\n一旦物种被嵌入到新的 $k$ 维空间中，我们使用 k-均值算法将它们分成 $k$ 个簇。K-均值旨在找到一个使簇内平方和（WCSS）最小化的划分。由于 k-均值对初始化很敏感，问题指定了使用随机初始化多次（10次）运行该算法，并选择产生最小 WCSS 的划分。\n\n最后，所得划分 $\\mathcal{C} = \\{C_1, \\dots, C_k\\}$ 的质量通过比较簇内边的总权重（$S_{\\mathrm{intra}}$）与簇间边的总权重（$S_{\\mathrm{cut}}$）来量化。质量比 $R = S_{\\mathrm{intra}} / (S_{\\mathrm{cut}} + \\varepsilon)$ 作为最终的度量标准。一个高的 $R$ 值表示成功地将网络划分成了内部密集、界限分明的模块。在分母中加入小常数 $\\varepsilon = 10^{-12}$ 是为了在完全不连通的模块（$S_{\\mathrm{cut}} = 0$）情况下保证数值稳定性。\n\n下面的 Python 代码为给定的四个测试用例实现了这整个过程。", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import eigh\nimport random\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases.\n    \"\"\"\n\n    def custom_kmeans(X, k, n_init, max_iter, seed):\n        \"\"\"\n        Performs k-means clustering.\n\n        Args:\n            X (np.ndarray): The data to cluster, shape (n_samples, n_features).\n            k (int): The number of clusters.\n            n_init (int): The number of times to run k-means with different random seeds.\n            max_iter (int): The maximum number of iterations for a single run.\n            seed (int): A seed for the random number generator for reproducibility.\n\n        Returns:\n            np.ndarray: The final cluster labels for each sample.\n        \"\"\"\n        rng = np.random.default_rng(seed)\n        best_labels = None\n        best_wcss = float('inf')\n        n_samples = X.shape[0]\n\n        for _ in range(n_init):\n            # Initialize centroids by picking k unique random points from X\n            initial_indices = rng.choice(n_samples, size=k, replace=False)\n            centroids = X[initial_indices, :]\n            \n            for i in range(max_iter):\n                # Assignment step: assign each point to the nearest centroid\n                dists_sq = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :])**2, axis=2)\n                labels = np.argmin(dists_sq, axis=1)\n\n                # Update step: recalculate centroids\n                new_centroids = np.copy(centroids)\n                for j in range(k):\n                    cluster_points = X[labels == j]\n                    if cluster_points.shape[0] > 0:\n                        new_centroids[j] = cluster_points.mean(axis=0)\n                \n                # Check for convergence\n                if np.allclose(new_centroids, centroids):\n                    break\n                centroids = new_centroids\n\n            # Calculate Within-Cluster Sum of Squares (WCSS) for this run\n            current_wcss = 0\n            for j in range(k):\n                cluster_points = X[labels == j]\n                if cluster_points.shape[0] > 0:\n                    current_wcss += np.sum((cluster_points - centroids[j])**2)\n            \n            # Keep track of the best result\n            if current_wcss  best_wcss:\n                best_wcss = current_wcss\n                best_labels = labels\n        \n        return best_labels\n\n    test_cases = [\n        {\n            \"name\": \"A\", \"n\": 6, \"k\": 2, \"reactions\": [\n                (1, 2, 1.0), (2, 1, 1.0), (2, 3, 1.0), (3, 2, 1.0),\n                (4, 5, 1.0), (5, 4, 1.0), (5, 6, 1.0), (6, 5, 1.0),\n                (3, 4, 0.02), (6, 1, 0.02)\n            ]\n        },\n        {\n            \"name\": \"B\", \"n\": 6, \"k\": 2, \"reactions\": [\n                (1, 4, 0.9), (4, 1, 0.9), (2, 5, 0.9), (5, 2, 0.9), (3, 6, 0.9), (6, 3, 0.9),\n                (1, 2, 0.8), (2, 3, 0.8), (3, 1, 0.8), (4, 5, 0.8), (5, 6, 0.8), (6, 4, 0.8)\n            ]\n        },\n        {\n            \"name\": \"C\", \"n\": 6, \"k\": 3, \"reactions\": [\n                (1, 2, 1.0), (2, 1, 1.0),\n                (3, 4, 1.0), (4, 3, 1.0),\n                (5, 6, 1.0), (6, 5, 1.0),\n                (2, 3, 0.03), (4, 5, 0.03)\n            ]\n        },\n        {\n            \"name\": \"D\", \"n\": 6, \"k\": 2, \"reactions\": [\n                (1, 2, 1.0), (2, 1, 1.0), (2, 3, 1.0), (3, 2, 1.0),\n                (4, 5, 1.0), (5, 4, 1.0), (5, 6, 1.0), (6, 5, 1.0)\n            ]\n        }\n    ]\n\n    results = []\n    epsilon = 1e-12\n\n    for case in test_cases:\n        n, k, reactions = case['n'], case['k'], case['reactions']\n\n        # 1. Construct the Jacobian matrix J\n        J = np.zeros((n, n))\n        for i, j, rate_const in reactions:\n            # Using 0-based indexing\n            J[i - 1, i - 1] -= rate_const\n            J[j - 1, i - 1] += rate_const\n\n        # 2. Construct the symmetric weight matrix W\n        abs_J = np.abs(J)\n        W = 0.5 * (abs_J + abs_J.T)\n        np.fill_diagonal(W, 0)\n\n        # 3. Construct the symmetric normalized Laplacian L_sym\n        D_diag = np.sum(W, axis=1)\n        D_inv_sqrt_diag = np.zeros_like(D_diag, dtype=float)\n        non_zero_mask = D_diag > 0\n        D_inv_sqrt_diag[non_zero_mask] = 1.0 / np.sqrt(D_diag[non_zero_mask])\n        D_inv_sqrt = np.diag(D_inv_sqrt_diag)\n        L_sym = np.identity(n) - D_inv_sqrt @ W @ D_inv_sqrt\n\n        # 4. Compute the spectral embedding\n        eigenvalues, eigenvectors = eigh(L_sym)\n        U = eigenvectors[:, :k]\n\n        # Row-normalize the embedding U\n        U_norm = np.copy(U)\n        row_norms = np.linalg.norm(U_norm, axis=1, keepdims=True)\n        # Avoid division by zero for rows with zero norm\n        non_zero_rows_mask = (row_norms > 1e-15).flatten()\n        U_norm[non_zero_rows_mask] /= row_norms[non_zero_rows_mask]\n\n        # 5. Perform k-means clustering on the embedded data\n        # Use a fixed seed for reproducibility as required for a deterministic check\n        labels = custom_kmeans(U_norm, k, n_init=10, max_iter=100, seed=42)\n\n        # 6. Compute the quality ratio R\n        S_intra = 0.0\n        S_cut = 0.0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if W[i, j] > 0:\n                    if labels[i] == labels[j]:\n                        S_intra += W[i, j]\n                    else:\n                        S_cut += W[i, j]\n        \n        R = S_intra / (S_cut + epsilon)\n        results.append(R)\n    \n    # Format the results into the required string format\n    print(f\"[{','.join([f'{r:.10f}' for r in results])}]\")\n\nsolve()\n```", "id": "2656656"}, {"introduction": "虽然基于图论的算法非常强大，但模块的定义也可以根植于基本的化学原理。最后一个练习将探讨一种替代视角，即基于网络化学计量学推导出的守恒律（conserved moieties）来定义模块。这个练习要求你识别出不可再分的物种组，并以此为约束来划分网络，从而提供一种概念上与纯粹拓扑方法截然不同的模块化定义。[@problem_id:2656659]", "problem": "一个封闭、充分混合的反应网络含有 $6$ 个化学物种 $\\{X_1,\\dots,X_6\\}$ 和 $6$ 个基元反应 $\\{R_1,\\dots,R_6\\}$，遵循质量作用动力学。该网络的结构特性由化学计量变化向量（列向量）$v_r \\in \\mathbb{Z}^{6}$ 指定，这些向量构成化学计量矩阵 $S \\in \\mathbb{Z}^{6 \\times 6}$，其中第 $j$ 列是 $v_j$。这些反应是：\n- $R_1: X_1 + X_4 \\rightarrow X_2 + X_5$，其 $v_1 = (-1,\\,+1,\\,0,\\,-1,\\,+1,\\,0)^{\\top}$，\n- $R_2: X_2 + X_5 \\rightarrow X_3 + X_4$，其 $v_2 = (0,\\,-1,\\,+1,\\,+1,\\,-1,\\,0)^{\\top}$，\n- $R_3: X_3 + X_4 \\rightarrow X_1 + X_5$，其 $v_3 = (+1,\\,0,\\,-1,\\,-1,\\,+1,\\,0)^{\\top}$，\n- $R_4: X_4 \\rightarrow X_5$，其 $v_4 = (0,\\,0,\\,0,\\,-1,\\,+1,\\,0)^{\\top}$，\n- $R_5: X_5 \\rightarrow X_4$，其 $v_5 = (0,\\,0,\\,0,\\,+1,\\,-1,\\,0)^{\\top}$，\n- $R_6: X_6 + X_5 \\rightarrow X_6 + X_4$，其 $v_6 = (0,\\,0,\\,0,\\,+1,\\,-1,\\,0)^{\\top}$。\n\n因此，\n$$\nS \\;=\\;\n\\begin{pmatrix}\n-1  0  +1  0  0  0\\\\\n+1  -1  0  0  0  0\\\\\n0  +1  -1  0  0  0\\\\\n-1  +1  -1  -1  +1  +1\\\\\n+1  -1  +1  +1  -1  -1\\\\\n0  0  0  0  0  0\n\\end{pmatrix}.\n$$\n\n守恒量是任意满足 $l^{\\top} S = 0^{\\top}$ 的非零向量 $l \\in \\mathbb{R}^{6}$。守恒量向量 $l$ 的支撑集是满足 $l_i \\neq 0$ 的索引 $i$ 的集合。考虑将物种划分为恰好两个非空模块 $\\mathcal{M}_1$ 和 $\\mathcal{M}_2$ 的模块划分。如果对于一个非负守恒量基的每个基向量 $l$，其支撑集完全包含在 $\\mathcal{M}_1$ 或 $\\mathcal{M}_2$ 中，则称该划分满足守恒量完整性。\n\n分区的模块间相互作用权重定义如下：每个反应 $R_r$ 被赋予一个正的无量纲权重 $w_r$，其中\n$$\nw_1 = 2,\\;\\; w_2 = 1.5,\\;\\; w_3 = 1,\\;\\; w_4 = 0.2,\\;\\; w_5 = 0.2,\\;\\; w_6 = 0.8.\n$$\n对于给定的划分，当且仅当参与反应 $R_r$ 的物种集合（其反应物和产物的并集）不完全包含在单个模块内时，该反应对模块间相互作用权重贡献 $w_r$。\n\n任务：\n1. 仅从化学计量矩阵的定义、守恒量作为满足 $l^{\\top} S = 0^{\\top}$ 的向量 $l$ 的定义，以及基于 $\\mathbb{R}$ 的线性代数出发，计算该网络守恒量的一个非负基，并识别出每个基向量支撑集中的物种。\n2. 在上述定义的守恒量完整性约束下，在将 $6$ 个物种划分为恰好两个非空模块的所有划分中，确定一个使总模块间相互作用权重最小化的划分。\n\n你的最终答案必须仅为最小总模块间相互作用权重。不要在最终答案中包含任何其他量。", "solution": "该问题提出了一个化学反应网络，并要求完成两个不同的任务。首先，确定该系统的基本守恒律；其次，利用这些守恒律找到一个物种的最优模块划分，以最小化模块间的化学相互作用。我将以所需的严谨性依次解决这些任务。\n\n首先，我们必须验证问题陈述的有效性。该问题提供了一组包含 $6$ 个物种、 $6$ 个反应、一个化学计量矩阵 $S \\in \\mathbb{Z}^{6 \\times 6}$、守恒量的定义、一个划分约束以及一个待最小化的成本函数。所有定义和数据都已明确给出，并与化学反应网络理论的标准形式体系一致。该问题具有科学依据，是适定的，并且不含任何歧义或矛盾。因此，这是一个有效的问题，我将继续进行求解。\n\n第 1 部分：计算守恒量的非负基\n\n守恒量被定义为满足 $l^{\\top} S = 0^{\\top}$ 的非零向量 $l \\in \\mathbb{R}^{6}$。这是化学计量矩阵 $S$ 的左零向量的标准定义。所有这类向量构成一个向量空间，即 $S$ 的左零空间，记为 $\\text{ker}(S^{\\top})$。我们的任务是找到这个空间的一个基，并附加一个约束条件，即基向量必须是非负的，意味着它们的所有分量都必须大于或等于零。\n\n需要求解的线性方程组是 $S^{\\top} l = 0$，其中 $l = (l_1, l_2, l_3, l_4, l_5, l_6)^{\\top}$。给定化学计量矩阵 $S$ 的转置是：\n$$\nS^{\\top} =\n\\begin{pmatrix}\n-1  1  0  -1  1  0 \\\\\n0  -1  1  1  -1  0 \\\\\n1  0  -1  -1  1  0 \\\\\n0  0  0  -1  1  0 \\\\\n0  0  0  1  -1  0 \\\\\n0  0  0  1  -1  0\n\\end{pmatrix}\n$$\n我们执行高斯消元法来求 $S^{\\top}$ 的零空间。\n将第一行加到第三行（$R_3 \\leftarrow R_3 + R_1$）得到：\n$$\n\\begin{pmatrix}\n-1  1  0  -1  1  0 \\\\\n0  -1  1  1  -1  0 \\\\\n0  1  -1  -2  2  0 \\\\\n0  0  0  -1  1  0 \\\\\n0  0  0  1  -1  0 \\\\\n0  0  0  1  -1  0\n\\end{pmatrix}\n$$\n将第二行加到第三行（$R_3 \\leftarrow R_3 + R_2$）得到：\n$$\n\\begin{pmatrix}\n-1  1  0  -1  1  0 \\\\\n0  -1  1  1  -1  0 \\\\\n0  0  0  -1  1  0 \\\\\n0  0  0  -1  1  0 \\\\\n0  0  0  1  -1  0 \\\\\n0  0  0  1  -1  0\n\\end{pmatrix}\n$$\n最后四行是线性相关的。我们可以将它们简化为单个唯一的行和若干零行，得到行阶梯形矩阵：\n$$\n\\begin{pmatrix}\n-1  1  0  -1  1  0 \\\\\n0  -1  1  1  -1  0 \\\\\n0  0  0  -1  1  0 \\\\\n0  0  0  0  0  0 \\\\\n0  0  0  0  0  0 \\\\\n0  0  0  0  0  0\n\\end{pmatrix}\n$$\n与此矩阵对应的方程组是：\n1. $-l_1 + l_2 - l_4 + l_5 = 0$\n2. $-l_2 + l_3 + l_4 - l_5 = 0$\n3. $-l_4 + l_5 = 0$\n\n该矩阵的秩为 $3$，因此零空间的维数是 $6 - 3 = 3$。我们可以选择 $l_3$、$l_5$ 和 $l_6$ 作为自由变量。\n由方程(3)，我们有 $l_4 = l_5$。\n将 $l_4 = l_5$ 代入方程(2)得到 $-l_2 + l_3 = 0$，这意味着 $l_2 = l_3$。\n将 $l_2 = l_3$ 和 $l_4 = l_5$ 代入方程(1)得到 $-l_1 + l_3 - l_5 + l_5 = 0$，这意味着 $l_1 = l_3$。\n因此，通解向量 $l$ 是：\n$$\nl = \\begin{pmatrix} l_3 \\\\ l_3 \\\\ l_3 \\\\ l_5 \\\\ l_5 \\\\ l_6 \\end{pmatrix} = l_3 \\begin{pmatrix} 1 \\\\ 1 \\\\ 1 \\\\ 0 \\\\ 0 \\\\ 0 \\end{pmatrix} + l_5 \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 1 \\\\ 1 \\\\ 0 \\end{pmatrix} + l_6 \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 1 \\end{pmatrix}\n$$\n守恒量空间的一个基由三个向量给出，这三个向量分别通过将一个自由变量设为 $1$、其余设为 $0$ 得到。它们是：\n$l^{(1)} = (1, 1, 1, 0, 0, 0)^{\\top}$\n$l^{(2)} = (0, 0, 0, 1, 1, 0)^{\\top}$\n$l^{(3)} = (0, 0, 0, 0, 0, 1)^{\\top}$\n这些向量完全由非负项构成，因此它们形成一个有效的非负基。\n这些基向量的支撑集是：\n- $\\text{supp}(l^{(1)}) = \\{1, 2, 3\\}$，对应于物种 $\\{X_1, X_2, X_3\\}$。\n- $\\text{supp}(l^{(2)}) = \\{4, 5\\}$，对应于物种 $\\{X_4, X_5\\}$。\n- $\\text{supp}(l^{(3)}) = \\{6\\}$，对应于物种 $\\{X_6\\}$。\n\n第 2 部分：守恒量完整性约束下的最优划分\n\n“守恒量完整性”约束要求，对于将物种划分为两个模块 $\\mathcal{M}_1$ 和 $\\mathcal{M}_2$ 的任何有效划分，每个守恒量基向量的支撑集必须完全位于一个模块内。这从根本上意味着每个支撑集内的物种不能被分开。物种集合 $\\{X_1, X_2, X_3\\}$、$\\{X_4, X_5\\}$ 和 $\\{X_6\\}$ 必须各自被视为一个不可分割的单元。我们记这些单元为 $G_1 = \\{X_1, X_2, X_3\\}$、$G_2 = \\{X_4, X_5\\}$ 和 $G_3 = \\{X_6\\}$。\n\n问题现在简化为将三个单元的集合 $\\{G_1, G_2, G_3\\}$ 划分为两个非空模块。恰好存在三种这样的划分：\n1.  $\\mathcal{M}_1 = G_1$, $\\mathcal{M}_2 = G_2 \\cup G_3$。用物种表示：$\\mathcal{M}_1 = \\{X_1, X_2, X_3\\}$，$\\mathcal{M}_2 = \\{X_4, X_5, X_6\\}$。\n2.  $\\mathcal{M}_1 = G_2$, $\\mathcal{M}_2 = G_1 \\cup G_3$。用物种表示：$\\mathcal{M}_1 = \\{X_4, X_5\\}$，$\\mathcal{M}_2 = \\{X_1, X_2, X_3, X_6\\}$。\n3.  $\\mathcal{M}_1 = G_3$, $\\mathcal{M}_2 = G_1 \\cup G_2$。用物种表示：$\\mathcal{M}_1 = \\{X_6\\}$，$\\mathcal{M}_2 = \\{X_1, X_2, X_3, X_4, X_5\\}$。\n\n现在我们必须计算每种划分的总模块间相互作用权重。一个权重为 $w_r$ 的反应 $R_r$ 对此总权重有贡献，条件是其参与物种（反应物和产物）不全都包含在单个模块内。我们列出每个反应的参与物种集合 $P_r$：\n- $R_1$: $P_1 = \\{X_1, X_4, X_2, X_5\\} \\subset G_1 \\cup G_2$。权重 $w_1 = 2$。\n- $R_2$: $P_2 = \\{X_2, X_5, X_3, X_4\\} \\subset G_1 \\cup G_2$。权重 $w_2 = 1.5$。\n- $R_3$: $P_3 = \\{X_3, X_4, X_1, X_5\\} \\subset G_1 \\cup G_2$。权重 $w_3 = 1$。\n- $R_4$: $P_4 = \\{X_4, X_5\\} \\subset G_2$。权重 $w_4 = 0.2$。\n- $R_5$: $P_5 = \\{X_5, X_4\\} \\subset G_2$。权重 $w_5 = 0.2$。\n- $R_6$: $P_6 = \\{X_6, X_5, X_4\\} \\subset G_2 \\cup G_3$。权重 $w_6 = 0.8$。\n\n现在我们评估每种划分的相互作用权重：\n\n情况 1：$\\mathcal{M}_1 = G_1$，$\\mathcal{M}_2 = G_2 \\cup G_3$。\n- $R_1, R_2, R_3$ 涉及来自 $G_1$ 和 $G_2$ 的物种。由于 $G_1 \\subset \\mathcal{M}_1$ 且 $G_2 \\subset \\mathcal{M}_2$，这些反应跨越了模块。\n- $R_4, R_5$ 只涉及来自 $G_2$ 的物种，而 $G_2$ 完全在 $\\mathcal{M}_2$ 中。这些是模块内反应。\n- $R_6$ 涉及来自 $G_2$ 和 $G_3$ 的物种，而这两者都在 $\\mathcal{M}_2$ 中。这是模块内反应。\n总权重 $W_1 = w_1 + w_2 + w_3 = 2 + 1.5 + 1 = 4.5$。\n\n情况 2：$\\mathcal{M}_1 = G_2$，$\\mathcal{M}_2 = G_1 \\cup G_3$。\n- $R_1, R_2, R_3$ 涉及来自 $G_1$ 和 $G_2$ 的物种。由于 $G_2 \\subset \\mathcal{M}_1$ 且 $G_1 \\subset \\mathcal{M}_2$，这些反应跨越了模块。\n- $R_4, R_5$ 只涉及来自 $G_2$ 的物种，而 $G_2$ 完全在 $\\mathcal{M}_1$ 中。这些是模块内反应。\n- $R_6$ 涉及来自 $G_2$ 和 $G_3$ 的物种。由于 $G_2 \\subset \\mathcal{M}_1$ 且 $G_3 \\subset \\mathcal{M}_2$，该反应跨越了模块。\n总权重 $W_2 = w_1 + w_2 + w_3 + w_6 = 2 + 1.5 + 1 + 0.8 = 5.3$。\n\n情况 3：$\\mathcal{M}_1 = G_3$，$\\mathcal{M}_2 = G_1 \\cup G_2$。\n- $R_1, R_2, R_3$ 涉及来自 $G_1$ 和 $G_2$ 的物种，而这两者都在 $\\mathcal{M}_2$ 中。这些是模块内反应。\n- $R_4, R_5$ 只涉及来自 $G_2$ 的物种，而 $G_2$ 完全在 $\\mathcal{M}_2$ 中。这些是模块内反应。\n- $R_6$ 涉及来自 $G_2$ 和 $G_3$ 的物种。由于 $G_3 \\subset \\mathcal{M}_1$ 且 $G_2 \\subset \\mathcal{M}_2$，该反应跨越了模块。\n总权重 $W_3 = w_6 = 0.8$。\n\n比较总相互作用权重：$W_1 = 4.5$，$W_2 = 5.3$ 和 $W_3 = 0.8$。最小值为 $0.8$。这个最小权重对应于催化物种 $X_6$ 在一个模块中，而所有其他物种在另一个模块中的划分。这个结果在化学上是直观的，因为催化剂的作用是连接原本分离的动力学过程。\n\n可达到的最小总模块间相互作用权重是 $0.8$。", "answer": "$$\n\\boxed{0.8}\n$$", "id": "2656659"}]}