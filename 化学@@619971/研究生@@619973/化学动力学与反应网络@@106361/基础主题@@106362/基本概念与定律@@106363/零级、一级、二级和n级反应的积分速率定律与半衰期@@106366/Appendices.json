{"hands_on_practices": [{"introduction": "虽然教科书中常见整数级反应，但复杂的反应机理（如涉及自由基稳态的反应）常常导致分数级动力学。本练习将引导你运用变量分离这一基本方法，为半整数级反应推导积分速率方程和半衰期[@problem_id:2648470]。掌握这一核心数学技能对于处理更复杂的动力学模型至关重要。", "problem": "一个充分混合的等温间歇式反应器包含单一反应物种，其浓度用 $C(t)$ 表示，其中 $t$ 是时间。根据经验观察，其消失速率遵循半级反应定律，这与自由基稳态机理一致：浓度变化率由以下常微分方程（ODE）建模\n$$\n\\frac{dC}{dt}=-k\\,C^{1/2},\n$$\n其中 $k>0$ 是一个恒定的速率系数。初始浓度为 $C(0)=C_0$，且 $C_0>0$。请仅从给定的常微分方程、初始条件以及半衰期的定义（即当时间为 $t_{1/2}$ 时，浓度满足 $C(t_{1/2})=C_0/2$）出发，推导积分浓度-时间关系式，然后求出半衰期。假设平方根取主支，并且解在达到半衰期之前保持物理意义（浓度非负）。请以 $k$ 和 $C_0$ 的形式，给出一个关于 $t_{1/2}$ 的单一闭式解析表达式作为最终结果。使用国际单位制（SI）：$k$ 的单位为 $\\mathrm{(mol\\,m^{-3})^{1/2}\\,s^{-1}}$，$C_0$ 的单位为 $\\mathrm{mol\\,m^{-3}}$，因此 $t_{1/2}$ 的单位为秒。在最终的方框答案中不要包含单位。", "solution": "题目提供了一个半级消失过程的常微分方程（ODE），\n$$\n\\frac{dC}{dt}=-k\\,C^{1/2},\n$$\n初始条件为 $C(0)=C_0>0$。我们所使用的基本依据包括：(i) 速率的定义，即浓度对时间的导数；(ii) 对时间一阶的常微分方程使用分离变量法；以及 (iii) 半衰期的定义，即浓度降低到其初始值一半时所用的时间。\n\n我们通过分离变量法进行求解。由于在所关心的时间段内 $C(t)\\ge 0$ 且 $k>0$，我们可以写出\n$$\n\\frac{dC}{C^{1/2}}=-k\\,dt.\n$$\n对两边进行积分，从 $t=0$ 时的初始条件 $C=C_0$ 到任意时间 $t$ 时的 $C=C(t)$：\n$$\n\\int_{C_0}^{C(t)} C^{-1/2}\\,dC=\\int_{0}^{t}(-k)\\,dt'.\n$$\n左侧的积分是基本积分：\n$$\n\\int C^{-1/2}\\,dC = 2\\,C^{1/2},\n$$\n因此，定积分的计算结果为\n$$\n2\\left(C(t)^{1/2}-C_0^{1/2}\\right)=-k\\,t.\n$$\n求解 $C(t)^{1/2}$，得到积分速率定律的平方根形式，\n$$\nC(t)^{1/2}=C_0^{1/2}-\\frac{k}{2}\\,t.\n$$\n只要右侧保持非负，该表达式就具有物理意义。特别地，在达到半衰期之前的时间里，浓度保持为正，且平方根主支是良定义的。\n\n根据半衰期的定义，$C(t_{1/2})=C_0/2$。代入积分关系式中，\n$$\n\\left(\\frac{C_0}{2}\\right)^{1/2}=C_0^{1/2}-\\frac{k}{2}\\,t_{1/2}.\n$$\n重新整理以求解 $t_{1/2}$：\n$$\n\\frac{k}{2}\\,t_{1/2}=C_0^{1/2}-\\left(\\frac{C_0}{2}\\right)^{1/2},\n$$\n因此\n$$\nt_{1/2}=\\frac{2}{k}\\left(C_0^{1/2}-\\left(\\frac{C_0}{2}\\right)^{1/2}\\right).\n$$\n通常为了方便，可以提出因子 $C_0^{1/2}$：\n$$\nt_{1/2}=\\frac{2}{k}\\left(1-\\frac{1}{\\sqrt{2}}\\right)C_0^{1/2}.\n$$\n可以进行量纲一致性检查：$k$ 的量纲为 $\\mathrm{(concentration)^{1/2}\\,(time)^{-1}}$，所以 $\\frac{C_0^{1/2}}{k}$ 的量纲是时间，而无量纲因子 $\\left(1-\\frac{1}{\\sqrt{2}}\\right)$ 保持单位不变，因此根据给定的国际单位制（SI）约定，$t_{1/2}$ 的单位是秒。\n\n因此，半衰期即为所陈述的以 $k$ 和 $C_0$ 表示的闭式表达式。", "answer": "$$\\boxed{\\frac{2}{k}\\left(1-\\frac{1}{\\sqrt{2}}\\right)C_0^{1/2}}$$", "id": "2648470"}, {"introduction": "掌握了积分速率方程的推导之后，下一步是深入理解这些数学模型背后的物理意义。本练习将探讨零级动力学的一个独特性质——反应在有限时间内完全终结，并将其与一级反应的渐进行为进行对比[@problem_id:2648446]。它将挑战你像实验科学家一样思考，识别出能够区分不同反应级数的关键实验特征。", "problem": "一个等温、混合均匀的间歇式反应器中含有一种单一反应物，其浓度为 $C(t)$，该反应物不可逆地消耗生成产物。假设宏观速率定律可写作 $-\\,\\mathrm{d}C/\\mathrm{d}t = k\\,C^{n}$，其中在恒定温度下 $k>0$ 为常数，且 $n\\ge 0$ 是与时间无关的表观级数。初始条件为 $C(0)=C_0>0$。一个物理上可接受的描述必须满足对于所有 $t\\ge 0$ 都有 $C(t)\\ge 0$。基于此，推断该模型是否可能意味着存在一个有限时间 $t_{\\mathrm{end}}$，在该时间点 $C(t)$ 首次达到 $0$，以及这种行为在实验上会如何表现。选择所有与正确解释相符的陈述。\n\nA. 对于零级速率定律，施加 $C(t)\\ge 0$ 的约束会强制存在一个有限的完成时间 $t_{\\mathrm{end}}=C_0/k$，在该时间点 $C(t)$ 首次达到 $0$。\n\nB. 对于一级速率定律，$C(t)$ 也会在有限时间内消失，尽管 $t_{\\mathrm{end}}$ 的值与零级情况不同。\n\nC. 在零级动力学中，半衰期 $t_{1/2}$ 依赖于 $C_0$，关系式为 $t_{1/2}=C_0/(2k)$；因此 $t_{1/2}$ 对 $C_0$ 的作图是一条通过原点、斜率为 $1/(2k)$ 的直线。\n\nD. 具有有限 $t_{\\mathrm{end}}$ 的零级行为的一个实验标志是 $\\ln C$ 对 $t$ 的作图在 $t_{\\mathrm{end}}$ 之前是线性的，斜率为 $-k$。\n\nE. 如果在相同温度下进行两次间歇反应，初始浓度分别为 $C_0^{(1)}$ 和 $C_0^{(2)}$，并且观察到每次反应中消耗速率 $-\\,\\mathrm{d}C/\\mathrm{d}t=k$ 均为常数，同时完成时间之比为 $t_{\\mathrm{end}}^{(2)}/t_{\\mathrm{end}}^{(1)}=C_0^{(2)}/C_0^{(1)}$，那么这些观察结果共同支持一个具有有限完成时间的零级模型。", "solution": "所呈现的问题陈述在科学上是合理的、适定的且客观的。它描述了化学动力学中一个标准的初值问题，基于基本的幂律速率表达式 $-\\,\\mathrm{d}C/\\mathrm{d}t = k\\,C^{n}$。所有参数和条件都已明确定义。物理约束 $C(t) \\ge 0$ 是任何有效浓度物理模型的必要且不矛盾的条件。由于问题是有效的，我将对所提供的陈述进行严谨的分析。\n\n控制常微分方程为：\n$$-\\frac{\\mathrm{d}C}{\\mathrm{d}t} = k C^n$$\n初始条件为 $C(0) = C_0 > 0$。我们必须分离变量并进行积分。\n$$ \\int_{C_0}^{C(t)} C^{-n} \\, \\mathrm{d}C = -k \\int_0^t \\mathrm{d}\\tau $$\n积分的结果取决于 $n$ 的值。\n\n情况1：$n=1$（一级反应）\n$$ \\int_{C_0}^{C(t)} \\frac{1}{C} \\, \\mathrm{d}C = -k \\int_0^t \\mathrm{d}\\tau $$\n$$ \\ln(C(t)) - \\ln(C_0) = -kt $$\n$$ C(t) = C_0 e^{-kt} $$\n在这种情况下，由于对于所有有限的 $t$，$C_0 > 0$ 且 $e^{-kt} > 0$，浓度 $C(t)$ 仅在 $t \\to \\infty$ 时才趋近于 $0$。它永远不会在有限时间内达到 $0$。\n\n情况2：$n \\neq 1$\n$$ \\left[ \\frac{C^{1-n}}{1-n} \\right]_{C_0}^{C(t)} = -kt $$\n$$ \\frac{C(t)^{1-n} - C_0^{1-n}}{1-n} = -kt $$\n$$ C(t)^{1-n} = C_0^{1-n} - (1-n)kt $$\n一个使浓度消失的有限时间 $t_{\\mathrm{end}}$（即 $C(t_{\\mathrm{end}}) = 0$）仅在 $C(t)^{1-n}$ 项可以等于零时才可能存在。如果指数 $(1-n)$ 为正，即 $n < 1$，这是可能的。如果 $n > 1$，则指数为负，当 $C(t) \\to 0$ 时，$C(t)^{1-n} \\to \\infty$，这与方程右侧对于有限 $t$ 的值不一致。因此，有限的完成时间仅在 $n < 1$ 时存在。\n对于 $n < 1$，令 $C(t_{\\mathrm{end}}) = 0$：\n$$ 0 = C_0^{1-n} - (1-n)kt_{\\mathrm{end}} $$\n$$ t_{\\mathrm{end}} = \\frac{C_0^{1-n}}{(1-n)k} $$\n由于 $C_0 > 0$，$k > 0$ 且 $(1-n) > 0$，这会得到一个有限的正值 $t_{\\mathrm{end}}$。\n\n现在，我们来评估每个陈述。\n\nA. 对于零级速率定律，施加 $C(t)\\ge 0$ 的约束会强制存在一个有限的完成时间 $t_{\\mathrm{end}}=C_0/k$，在该时间点 $C(t)$ 首次达到 $0$。\n这对应于 $n=0$ 的情况。由于 $0 < 1$，存在有限的完成时间。我们使用 $n \\ne 1$ 的通用表达式并代入 $n=0$：\n$$ C(t)^{1-0} = C_0^{1-0} - (1-0)kt $$\n$$ C(t) = C_0 - kt $$\n为了找到 $C(t_{\\mathrm{end}})=0$ 时的时间 $t_{\\mathrm{end}}$，我们令：\n$$ 0 = C_0 - k t_{\\mathrm{end}} \\implies t_{\\mathrm{end}} = \\frac{C_0}{k} $$\n对于 $t > t_{\\mathrm{end}}$，数学解预测 $C(t) < 0$，这在物理上是荒谬的。物理约束 $C(t) \\ge 0$ 决定了反应在反应物耗尽后即停止。因此，物理上正确的模型是：当 $t \\in [0, t_{\\mathrm{end}}]$ 时，$C(t) = C_0 - kt$；当 $t > t_{\\mathrm{end}}$ 时，$C(t)=0$。该陈述是对这一物理现实的正确描述。\n结论：**正确**。\n\nB. 对于一级速率定律，$C(t)$ 也会在有限时间内消失，尽管 $t_{\\mathrm{end}}$ 的值与零级情况不同。\n如上文对 $n=1$ 的推导，积分速率定律为 $C(t) = C_0 e^{-kt}$。条件 $C(t)=0$ 要求 $e^{-kt}=0$，这仅在极限 $t \\to \\infty$ 时发生。因此，浓度永远不会在有限时间内消失。该陈述是根本错误的。\n结论：**错误**。\n\nC. 在零级动力学中，半衰期 $t_{1/2}$ 依赖于 $C_0$，关系式为 $t_{1/2}=C_0/(2k)$；因此 $t_{1/2}$ 对 $C_0$ 的作图是一条通过原点、斜率为 $1/(2k)$ 的直线。\n半衰期 $t_{1/2}$ 定义为 $C(t_{1/2}) = C_0/2$ 时的时间。对于零级动力学 ($n=0$)，我们使用积分速率定律 $C(t) = C_0 - kt$。\n$$ \\frac{C_0}{2} = C_0 - k t_{1/2} $$\n$$ k t_{1/2} = C_0 - \\frac{C_0}{2} = \\frac{C_0}{2} $$\n$$ t_{1/2} = \\frac{C_0}{2k} $$\n这个公式与陈述中的公式完全相同。如果我们将 $t_{1/2}$ 视为 $C_0$ 的函数，该关系的形式为 $y=mx+b$，其中 $y=t_{1/2}$，$x=C_0$，斜率为 $m=1/(2k)$，y轴截距为 $b=0$。这描述了一条经过原点且具有指定斜率的直线。该陈述完全正确。\n结论：**正确**。\n\nD. 具有有限 $t_{\\mathrm{end}}$ 的零级行为的一个实验标志是 $\\ln C$ 对 $t$ 的作图在 $t_{\\mathrm{end}}$ 之前是线性的，斜率为 $-k$。\n该陈述混淆了不同反应级数的特征图。\n对于零级反应 ($n=0$)，积分速率定律为 $C(t) = C_0 - kt$。$C$ 对 $t$ 的作图是一条斜率为 $-k$ 的直线。\n对于一级反应 ($n=1$)，积分速率定律为 $\\ln(C(t)) = \\ln(C_0) - kt$。$\\ln C$ 对 $t$ 的作图是一条斜率为 $-k$ 的直线。\n该陈述错误地将一级反应的标志——线性的 $\\ln C$ 对 $t$ 图——归因于零级动力学。\n结论：**错误**。\n\nE. 如果在相同温度下进行两次间歇反应，初始浓度分别为 $C_0^{(1)}$ 和 $C_0^{(2)}$，并且观察到每次反应中消耗速率 $-\\,\\mathrm{d}C/\\mathrm{d}t=k$ 均为常数，同时完成时间之比为 $t_{\\mathrm{end}}^{(2)}/t_{\\mathrm{end}}^{(1)}=C_0^{(2)}/C_0^{(1)}$，那么这些观察结果共同支持一个具有有限完成时间的零级模型。\n让我们分析这两项观察结果。\n1. ‘每次反应中消耗速率 $-\\,\\mathrm{d}C/\\mathrm{d}t=k$ 均为常数’：速率定律是 $-\\,\\mathrm{d}C/\\mathrm{d}t = kC^n$。要使速率在 $C$ 随时间变化的反应过程中保持恒定， $C^n$ 项必须与 $C$ 无关。这只有在 $n=0$ 时才可能，此时 $-\\,\\mathrm{d}C/\\mathrm{d}t = kC^0 = k$。这个观察结果是零级反应的直接标志。\n2. ‘完成时间之比为 $t_{\\mathrm{end}}^{(2)}/t_{\\mathrm{end}}^{(1)}=C_0^{(2)}/C_0^{(1)}$’：如对陈述 A 的分析所示，零级反应的完成时间是 $t_{\\mathrm{end}} = C_0/k$。由于温度相同，两次反应的 $k$ 值也相同。我们可以写出 $t_{\\mathrm{end}}^{(1)} = C_0^{(1)}/k$ 和 $t_{\\mathrm{end}}^{(2)} = C_0^{(2)}/k$。其比值为：\n$$ \\frac{t_{\\mathrm{end}}^{(2)}}{t_{\\mathrm{end}}^{(1)}} = \\frac{C_0^{(2)}/k}{C_0^{(1)}/k} = \\frac{C_0^{(2)}}{C_0^{(1)}} $$\n这与第二个观察结果相符。\n这两条实验证据都是零级动力学模型的直接且典型的推论。它们的共同出现为该模型提供了强有力的证实。\n结论：**正确**。", "answer": "$$\\boxed{ACE}$$", "id": "2648446"}, {"introduction": "实际的化学反应通常在非理想条件下进行，其中速率系数等参数可能随时间变化。这个高级练习将指导你将积分速率定律推广到速率系数 $k(t)$ 随时间变化的情形[@problem_id:2648447]。你还将通过编写程序来验证你的解析推导，这在现代动力学分析和计算化学中是一种常见且必不可少的工作流程。", "problem": "考虑一种等温、充分混合的间歇式分解反应，其中单一反应物 $A$ 的浓度为 $C(t)$。该反应遵循广义幂律速率，其速率系数随时间变化。速率方程为\n$$\n\\frac{dC}{dt} \\;=\\; -\\,k(t)\\,C(t)^{n},\n$$\n其中 $n$ 是反应级数，$k(t) \\ge 0$ 是一个给定的、关于时间 $t$ 的可积函数。仅从上述速率方程的基本定义和可分离常微分方程（ODE）的基本微积分定理出发，推导通用的反应级数 $n$ 下的积分浓度 $C(t)$，用时间积分\n$$\nK(t) \\;=\\; \\int_{0}^{t} k(\\tau)\\,d\\tau,\n$$\n表示。然后，推导由 $C(t_{1/2}) = C(0)/2$ 隐式定义的半衰期条件 $t_{1/2}$。接着，设计一个程序，通过两种独立的方式对推导出的表达式进行数值验证：\n- 通过对 $k(t)$ 进行一维积分，直接数值求积得到 $K(t)$，\n- 通过对 $C(t)$ 的常微分方程初值问题进行直接数值积分。\n\n科学真实性与单位：浓度 $C$ 使用摩尔/升（mol/L），时间 $t$ 使用秒（s）。反应级数 $n$ 是无量纲的。$k(t)$ 的单位取决于 $n$，且必须使得 $dC/dt$ 的单位为 mol/L/s。\n\n每个测试案例需实现的验证任务：\n- 通过对 $k(t)$ 进行符号时间积分得到 $K(t)$，计算出解析的 $C(t)$（在推导中不得使用任何预先记忆的速率方程“捷径”公式；仅使用变量分离和定积分）。\n- 通过对 $[0,t]$ 上的 $k(t)$ 进行求积，计算 $K(t)$ 的一个数值近似 $\\widehat{K}(t)$，并由此通过你推导的 $C(t)$–vs–$K(t)$ 关系构造一个数值浓度 $\\widehat{C}_{\\mathrm{quad}}(t)$。\n- 通过对 $C(t)$ 的初值问题进行积分，计算一个直接的数值ODE解 $\\widehat{C}_{\\mathrm{ode}}(t)$。\n- 在 $[0,t_{\\max}]$ 上一个包含 $N_t = 301$ 个点的均匀网格上，报告解析解 $C(t)$ 与ODE解之间的最大相对误差是否小于容差 $\\varepsilon = 10^{-8}$，以及解析解 $C(t)$ 与基于求积的 $\\widehat{C}_{\\mathrm{quad}}(t)$ 之间的最大相对误差是否小于容差 $\\varepsilon = 10^{-8}$。使用相对误差 $|x-y|/\\max(|x|,\\delta)$，其中 $\\delta = 10^{-14}$ 以避免除以零。\n- 计算你的推导所隐含的半衰期 $t_{1/2}$。如果对于给定的 $k(t)$，它可以以闭合形式表示，则使用该形式。否则，通过对你推导的半衰期条件应用一个稳健的标量求根器来求解 $t_{1/2}$。通过检查ODE解是否满足 $|\\widehat{C}_{\\mathrm{ode}}(t_{1/2})/C(0) - 1/2| < \\varepsilon = 10^{-8}$ 来验证 $t_{1/2}$。\n\n用于覆盖不同级数和 $k(t)$ 行为的测试套件。对于下述每个案例，$C(0) = C_0$ 已给定，同时给出了时间和浓度以SI一致单位（时间为秒，浓度为mol/L）表示的参数：\n- 案例 A（一级反应）：$n = 1$，$C_0 = 1.5$ mol/L，$t_{\\max} = 2.0$ s，$k(t) = k_0\\,(1 + \\alpha t)$，其中 $k_0 = 0.8$ s$^{-1}$ 和 $\\alpha = 0.4$ s$^{-1}$。\n- 案例 B（二级反应）：$n = 2$，$C_0 = 0.7$ mol/L，$t_{\\max} = 5.0$ s，$k(t) = k_0\\,e^{-\\beta t}$，其中 $k_0 = 0.6$ L/(mol·s) 和 $\\beta = 0.3$ s$^{-1}$。\n- 案例 C（零级反应）：$n = 0$，$C_0 = 2.0$ mol/L，$t_{\\max} = 3.0$ s，$k(t) = k_0\\,(1 + a \\sin(\\omega t))$，其中 $k_0 = 0.5$ mol/(L·s)，$a = 0.5$（无量纲），以及 $\\omega = 1.2$ s$^{-1}$。\n\n程序要求：\n- 在包含 $N_t = 301$ 个时间点的 $[0,t_{\\max}]$ 均匀网格上，为每个案例执行上述三个验证任务。\n- 对于 $K(t)$ 的数值求积，你必须通过对每个网格点从 $\\tau=0$ 到 $\\tau=t$ 对 $k(\\tau)$ 进行数值积分来独立计算 $\\widehat{K}(t)$，不依赖任何解析反导数。\n- 对于直接ODE积分，使用提供的 $k(t)$ 和级数 $n$ 对 $C(t)$ 的初值问题进行积分。\n- 对于半衰期 $t_{1/2}$，如果你的推导对于给定的 $k(t)$ 能得出闭合形式的表达式，则使用它；否则，通过一个稳健的区间法求解你的半衰期条件所隐含的标量方程来确定 $t_{1/2}$。按照规定，对照ODE解验证 $t_{1/2}$。\n\n最终输出格式：\n- 你的程序应生成一行输出，包含三个案例的9个布尔值结果，顺序如下：对于每个案例（按A、B、C的顺序），追加三个布尔值\n  1. 解析的 $C(t)$ 是否在网格上与ODE解在容差范围内一致，\n  2. 解析的 $C(t)$ 是否在网格上与基于求积的 $\\widehat{C}_{\\mathrm{quad}}(t)$ 在容差范围内一致，\n  3. 半衰期验证不等式是否成立。\n- 该单行必须是一个用方括号括起来的逗号分隔列表，例如 [True,False,True,True,True,False]，且该行上无其他内容。", "solution": "所给出的问题是有效的。它在科学上基于化学动力学原理，作为一个常微分方程的初值问题被良好地提出，并且客观地陈述了所有必要的参数。我们将首先推导所需的表达式，然后设计一个数值验证程序。\n\n单一反应物 $A$ 的分解速率由以下微分方程描述：\n$$\n\\frac{dC}{dt} = -k(t)C(t)^n\n$$\n其中 $C(t)$ 是 $A$ 在时间 $t$ 的浓度，$n$ 是反应级数，$k(t)$ 是一个随时间变化的速率系数。初始浓度为 $C(0) = C_0$。这是一个可分离的常微分方程。我们重新整理方程以分离变量 $C$ 和 $t$：\n$$\n\\frac{dC}{C^n} = -k(t)dt\n$$\n我们对等式两边从初始条件 $(t=0, C=C_0)$ 到一个一般状态 $(t, C(t))$ 进行积分：\n$$\n\\int_{C_0}^{C(t)} \\frac{dC'}{C'^n} = -\\int_{0}^{t} k(\\tau)d\\tau\n$$\n右侧的积分被定义为 $K(t)$，因此方程变为：\n$$\n\\int_{C_0}^{C(t)} C'^{-n} dC' = -K(t)\n$$\n左侧积分的计算取决于级数 $n$ 的值。有必要考虑两种不同的情况。\n\n情况1：反应级数 $n=1$。\n当 $n=1$ 时，被积函数是 $1/C'$。积分为自然对数：\n$$\n\\int_{C_0}^{C(t)} \\frac{dC'}{C'} = \\left[\\ln(C')\\right]_{C_0}^{C(t)} = \\ln(C(t)) - \\ln(C_0) = \\ln\\left(\\frac{C(t)}{C_0}\\right)\n$$\n将其与右侧相等得到：\n$$\n\\ln\\left(\\frac{C(t)}{C_0}\\right) = -K(t)\n$$\n解出 $C(t)$，得到具有时变速率系数的一级反应的积分速率方程：\n$$\nC(t) = C_0 \\exp(-K(t))\n$$\n\n情况2：反应级数 $n \\neq 1$。\n当 $n \\neq 1$ 时，我们使用幂函数积分法则：\n$$\n\\int_{C_0}^{C(t)} C'^{-n} dC' = \\left[\\frac{C'^{1-n}}{1-n}\\right]_{C_0}^{C(t)} = \\frac{C(t)^{1-n} - C_0^{1-n}}{1-n}\n$$\n将其与右侧相等得到：\n$$\n\\frac{C(t)^{1-n} - C_0^{1-n}}{1-n} = -K(t)\n$$\n我们解出 $C(t)$：\n$$\nC(t)^{1-n} - C_0^{1-n} = -(1-n)K(t) = (n-1)K(t)\n$$\n$$\nC(t)^{1-n} = C_0^{1-n} + (n-1)K(t)\n$$\n这导出了 $n$ 级反应（$n \\neq 1$）的通用积分速率方程：\n$$\nC(t) = \\left[C_0^{1-n} + (n-1)K(t)\\right]^{\\frac{1}{1-n}}\n$$\n对于零级反应（$n=0$），这简化为 $C(t) = C_0 - K(t)$。物理上，浓度不能为负，因此当 $C(t)=0$ 时反应停止。正确的形式是 $C(t) = \\max(0, C_0 - K(t))$。对于 $n > 0$，由于 $C_0 > 0$ 且速率 $dC/dt \\le 0$，浓度 $C(t)$ 将渐近地趋近于零但永远不会变为负值。\n\n接下来，我们推导半衰期 $t_{1/2}$ 的条件，即 $C(t_{1/2}) = C_0/2$ 的时间。\n\n对于 $n=1$：\n$$\n\\frac{C_0}{2} = C_0 \\exp(-K(t_{1/2})) \\implies \\frac{1}{2} = \\exp(-K(t_{1/2})) \\implies \\ln\\left(\\frac{1}{2}\\right) = -K(t_{1/2})\n$$\n这给出了 $n=1$ 时的半衰期条件：\n$$\nK(t_{1/2}) = \\ln(2)\n$$\n\n对于 $n \\neq 1$：\n$$\n\\frac{C_0}{2} = \\left[C_0^{1-n} + (n-1)K(t_{1/2})\\right]^{\\frac{1}{1-n}}\n$$\n将两边同时取 $(1-n)$ 次方：\n$$\n\\left(\\frac{C_0}{2}\\right)^{1-n} = C_0^{1-n} + (n-1)K(t_{1/2})\n$$\n$$\nC_0^{1-n} 2^{-(1-n)} = C_0^{1-n} + (n-1)K(t_{1/2})\n$$\n$$\nC_0^{1-n} (2^{n-1} - 1) = (n-1)K(t_{1/2})\n$$\n这得出了 $n \\neq 1$ 时的半衰期条件：\n$$\nK(t_{1/2}) = \\frac{C_0^{1-n}(2^{n-1} - 1)}{n-1}\n$$\n这些推导出的表达式构成了解析解的基础。程序将实现这些公式，并通过与直接求积和ODE积分得到的数值解进行比较来验证它们，从而通过计算实验确认推导的正确性。", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import quad, solve_ivp\nfrom scipy.optimize import brentq\n\ndef solve():\n    \"\"\"\n    Main solver function that defines and processes test cases.\n    \"\"\"\n    TOLERANCE = 1e-8\n    REL_ERR_FLOOR = 1e-14\n\n    # Case A: n=1\n    case_a_params = {\n        'name': 'A', 'n': 1, 'C0': 1.5, 't_max': 2.0,\n        'k_func': lambda t: 0.8 * (1 + 0.4 * t),\n        'K_analytic_func': lambda t: 0.8 * (t + 0.4 * t**2 / 2),\n        't_half_solver': lambda k0, alpha, c0: (-k0 + np.sqrt(k0**2 + 2*k0*alpha*np.log(2))) / (k0*alpha)\n    }\n    case_a_params['t_half_args'] = {'k0': 0.8, 'alpha': 0.4, 'c0': 1.5}\n\n    # Case B: n=2\n    case_b_params = {\n        'name': 'B', 'n': 2, 'C0': 0.7, 't_max': 5.0,\n        'k_func': lambda t: 0.6 * np.exp(-0.3 * t),\n        'K_analytic_func': lambda t: (0.6 / 0.3) * (1 - np.exp(-0.3 * t)),\n        't_half_solver': lambda k0, beta, c0: (1/beta) * np.log((k0 * c0) / (k0 * c0 - beta))\n    }\n    case_b_params['t_half_args'] = {'k0': 0.6, 'beta': 0.3, 'c0': 0.7}\n\n    # Case C: n=0\n    case_c_params = {\n        'name': 'C', 'n': 0, 'C0': 2.0, 't_max': 3.0,\n        'k_func': lambda t: 0.5 * (1 + 0.5 * np.sin(1.2 * t)),\n        'K_analytic_func': lambda t: 0.5 * (t - (0.5 / 1.2) * (np.cos(1.2 * t) - 1)),\n        't_half_solver': lambda K_func, c0, t_max: brentq(lambda t: K_func(t) - c0 / 2, 0, t_max)\n    }\n    case_c_params['t_half_args'] = {\n        'K_func': case_c_params['K_analytic_func'], \n        'c0': 2.0, \n        't_max': 3.0\n    }\n\n    test_cases = [case_a_params, case_b_params, case_c_params]\n    \n    all_results = []\n    \n    for case in test_cases:\n        results = process_case(case, TOLERANCE, REL_ERR_FLOOR)\n        all_results.extend(results)\n\n    print(f\"[{','.join(map(str, all_results))}]\")\n\ndef process_case(params, tol, rel_err_floor):\n    \"\"\"\n    Processes a single test case: derives numerical solutions and validates them.\n    \"\"\"\n    n = params['n']\n    C0 = params['C0']\n    t_max = params['t_max']\n    k_func = params['k_func']\n    K_analytic_func = params['K_analytic_func']\n    t_half_solver = params['t_half_solver']\n    t_half_args = params['t_half_args']\n\n    t_grid = np.linspace(0, t_max, 301)\n    \n    # --- Analytic Solution ---\n    K_analytic = K_analytic_func(t_grid)\n    if n == 1:\n        C_analytic = C0 * np.exp(-K_analytic)\n    elif n == 0:\n        C_analytic = np.maximum(0, C0 - K_analytic)\n    else:\n        C_analytic = (C0**(1 - n) + (n - 1) * K_analytic)**(1 / (1 - n))\n\n    # --- Validation 1: ODE Integration ---\n    def dCdt(t, C):\n        if n == 0:\n            return -k_func(t) if C > 0 else 0.0\n        return -k_func(t) * C**n if C > 0 else 0.0\n\n    sol_ode = solve_ivp(dCdt, [0, t_max], [C0], t_eval=t_grid, rtol=1e-12, atol=1e-12)\n    C_ode = sol_ode.y.flatten()\n\n    rel_err_ode = np.max(np.abs(C_analytic - C_ode) / np.maximum(np.abs(C_analytic), rel_err_floor))\n    ode_valid = rel_err_ode  tol\n\n    # --- Validation 2: Numerical Quadrature ---\n    K_quad = np.array([quad(k_func, 0, t)[0] for t in t_grid])\n    \n    if n == 1:\n        C_quad = C0 * np.exp(-K_quad)\n    elif n == 0:\n        C_quad = np.maximum(0, C0 - K_quad)\n    else:\n        C_quad = (C0**(1 - n) + (n - 1) * K_quad)**(1 / (1 - n))\n\n    rel_err_quad = np.max(np.abs(C_analytic - C_quad) / np.maximum(np.abs(C_analytic), rel_err_floor))\n    quad_valid = rel_err_quad  tol\n\n    # --- Validation 3: Half-Life ---\n    t_half = t_half_solver(**t_half_args)\n\n    sol_thalf = solve_ivp(dCdt, [0, t_half], [C0], t_eval=[t_half], rtol=1e-12, atol=1e-12)\n    C_at_thalf = sol_thalf.y[0, 0]\n    \n    thalf_valid_err = np.abs(C_at_thalf / C0 - 0.5)\n    thalf_valid = thalf_valid_err  tol\n\n    return [ode_valid, quad_valid, thalf_valid]\n\nif __name__ == \"__main__\":\n    solve()\n\n```", "id": "2648447"}]}