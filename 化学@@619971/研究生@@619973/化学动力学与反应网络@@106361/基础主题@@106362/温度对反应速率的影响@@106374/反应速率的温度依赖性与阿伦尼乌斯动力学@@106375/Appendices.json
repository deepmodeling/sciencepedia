{"hands_on_practices": [{"introduction": "标准的阿伦尼乌斯图，即 $\\ln k$ 对 $1/T$ 的关系图，通常被假定为线性的。然而，更深入的理论，如过渡态理论（Transition State Theory, TST），预测了该图可能存在曲率。本练习将引导您探索这种曲率的物理根源，推导阿伦尼乌斯图的二阶导数与活化热容 $\\Delta C_p^\\ddagger$ 之间的关系。通过这项实践，您将在经验数据拟合与过渡态的基本热力学性质之间建立联系，从而加深对非阿伦尼乌斯动力学的理解。[@problem_id:2682876]", "problem": "在以参考温度 $T_{0} = 300\\,\\mathrm{K}$ 为中心的窄温度窗口内，研究了一个单分子异构化反应。在此窗口内，$\\ln k$ 对 $1/T$ 的阿伦尼乌斯图显示出可测量的曲率。为了局部地总结其温度依赖性，通过最小二乘法拟合了以下二次模型：\n$$\n\\ln k(T) = a + b\\left(\\frac{1}{T}\\right) + c\\left(\\frac{1}{T}\\right)^{2},\n$$\n得到的系数为 $c = 9.0000 \\times 10^{4}\\,\\mathrm{K}^{2}$。\n\n假设过渡态理论 (TST) 成立，并且活化热容 $\\Delta C_{p}^{\\ddagger}$ 在该温度窗口内与温度无关。使用以下基本公式：\n- TST 速率表达式 $k(T) = \\frac{k_{B} T}{h} \\exp\\!\\left(\\frac{\\Delta S^{\\ddagger}(T)}{R}\\right)\\exp\\!\\left(-\\frac{\\Delta H^{\\ddagger}(T)}{R T}\\right)$。\n- 活化热容恒定时的标准热力学温度依赖关系，\n$$\n\\Delta H^{\\ddagger}(T) = \\Delta H^{\\ddagger}(T_{0}) + \\Delta C_{p}^{\\ddagger}\\,(T - T_{0}), \\quad\n\\Delta S^{\\ddagger}(T) = \\Delta S^{\\ddagger}(T_{0}) + \\Delta C_{p}^{\\ddagger}\\,\\ln\\!\\left(\\frac{T}{T_{0}}\\right).\n$$\n\n从这些基础出发，并且不使用任何额外的简化公式，推导在 $T_{0}$ 处计算的 $\\ln k$ 相对于 $1/T$ 的曲率与 $\\Delta C_{p}^{\\ddagger}$ 之间的局部关系。然后，用 $\\Delta C_{p}^{\\ddagger}$ 解释拟合的二次系数 $c$，并计算在 $T_{0} = 300\\,\\mathrm{K}$ 时 $\\Delta C_{p}^{\\ddagger}$ 的数值。使用普适气体常数 $R = 8.314462618\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$。将最终数值答案四舍五入至四位有效数字。以 $\\mathrm{J\\,mol^{-1}\\,K^{-1}}$ 为单位表示最终值。", "solution": "对问题陈述进行验证。\n\n**第 1 步：提取给定信息**\n- 速率常数 $k(T)$ 的经验模型：$\\ln k(T) = a + b\\left(\\frac{1}{T}\\right) + c\\left(\\frac{1}{T}\\right)^{2}$。\n- 参考温度：$T_{0} = 300\\,\\mathrm{K}$。\n- 拟合的二次系数：$c = 9.0000 \\times 10^{4}\\,\\mathrm{K}^{2}$。\n- 理论模型：过渡态理论 (TST)。\n- TST 速率表达式：$k(T) = \\frac{k_{B} T}{h} \\exp\\left(\\frac{\\Delta S^{\\ddagger}(T)}{R}\\right)\\exp\\left(-\\frac{\\Delta H^{\\ddagger}(T)}{R T}\\right)$。\n- 假设：活化热容 $\\Delta C_{p}^{\\ddagger}$ 在该温度窗口内是恒定的。\n- 热力学关系：\n  $\\Delta H^{\\ddagger}(T) = \\Delta H^{\\ddagger}(T_{0}) + \\Delta C_{p}^{\\ddagger}\\,(T - T_{0})$\n  $\\Delta S^{\\ddagger}(T) = \\Delta S^{\\ddagger}(T_{0}) + \\Delta C_{p}^{\\ddagger}\\,\\ln\\left(\\frac{T}{T_{0}}\\right)$\n- 普适气体常数：$R = 8.314462618\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$。\n\n**第 2 步：使用提取的给定信息进行验证**\n该问题具有科学依据，依赖于化学动力学（过渡态理论、阿伦尼乌斯方程）和热力学（基尔霍夫定律）的既定原理。此问题提法严谨，提供了一套独立的方程和数据，足以推导出 $\\Delta C_{p}^{\\ddagger}$ 的唯一解。语言客观而精确。诸如在窄温度范围内 $\\Delta C_{p}^{\\ddagger}$ 恒定的假设是标准且物理上合理的近似。该问题没有违反任何科学原理，内容完整，提出了一个在物理化学领域中虽非微不足道但可解的挑战。\n\n**第 3 步：结论与行动**\n该问题被判定为有效。将推导解答。\n\n推导从所给的过渡态理论的速率常数表达式 $k(T)$ 开始。对该表达式取自然对数，得到：\n$$\n\\ln k(T) = \\ln\\left(\\frac{k_{B}T}{h}\\right) + \\frac{\\Delta S^{\\ddagger}(T)}{R} - \\frac{\\Delta H^{\\ddagger}(T)}{RT}\n$$\n题目指定了 $\\ln k$ 对 $1/T$ 的图。该图的曲率由二阶导数 $\\frac{d^2(\\ln k)}{d(1/T)^2}$ 给出。为计算此导数，我们首先建立关于 $1/T$ 和 $T$ 的导数之间的关系。令 $x = 1/T$，这意味着 $T = 1/x$ 且 $dT/dx = -1/x^2 = -T^2$。使用链式法则：\n$$\n\\frac{d}{dx} = \\frac{dT}{dx}\\frac{d}{dT} = -T^2 \\frac{d}{dT}\n$$\n$\\ln k$ 对 $x=1/T$ 的一阶导数是：\n$$\n\\frac{d(\\ln k)}{d(1/T)} = -T^2 \\frac{d(\\ln k)}{dT}\n$$\n阿伦尼乌斯活化能 $E_a$ 定义为 $E_a = RT^2 \\frac{d(\\ln k)}{dT}$。根据过渡态理论，还可知 $E_a = \\Delta H^{\\ddagger}(T) + RT$。因此，我们可以将关于 $T$ 的导数表示为：\n$$\n\\frac{d(\\ln k)}{dT} = \\frac{E_a}{RT^2} = \\frac{\\Delta H^{\\ddagger}(T) + RT}{RT^2} = \\frac{\\Delta H^{\\ddagger}(T)}{RT^2} + \\frac{1}{T}\n$$\n对 $x=1/T$ 的二阶导数通过再次求导得到：\n$$\n\\frac{d^2(\\ln k)}{d(1/T)^2} = \\frac{d}{d(1/T)}\\left(-T^2 \\frac{d(\\ln k)}{dT}\\right) = -T^2 \\frac{d}{dT}\\left(-T^2 \\frac{d(\\ln k)}{dT}\\right)\n$$\n代入一阶导数的表达式：\n$$\n\\frac{d^2(\\ln k)}{d(1/T)^2} = T^2 \\frac{d}{dT}\\left(T^2 \\left(\\frac{\\Delta H^{\\ddagger}(T)}{RT^2} + \\frac{1}{T}\\right)\\right) = T^2 \\frac{d}{dT}\\left(\\frac{\\Delta H^{\\ddagger}(T)}{R} + T\\right)\n$$\n$\\Delta H^{\\ddagger}(T)$ 对 $T$ 的导数是活化热容 $\\Delta C_{p}^{\\ddagger}$。由于假设 $\\Delta C_{p}^{\\ddagger}$ 是恒定的：\n$$\n\\frac{d(\\Delta H^{\\ddagger}(T))}{dT} = \\frac{d}{dT}\\left(\\Delta H^{\\ddagger}(T_0) + \\Delta C_p^{\\ddagger}(T - T_0)\\right) = \\Delta C_p^{\\ddagger}\n$$\n将此应用于曲率的表达式：\n$$\n\\frac{d^2(\\ln k)}{d(1/T)^2} = T^2 \\left(\\frac{1}{R}\\frac{d(\\Delta H^{\\ddagger}(T))}{dT} + 1\\right) = T^2 \\left(\\frac{\\Delta C_{p}^{\\ddagger}}{R} + 1\\right)\n$$\n这个基本表达式将阿伦尼乌斯图的曲率与给定温度 $T$ 下的活化热容联系起来。\n\n现在，我们来解释经验二次模型 $\\ln k(T) = a + b(1/T) + c(1/T)^2$。对 $1/T$ 求导两次：\n$$\n\\frac{d(\\ln k)}{d(1/T)} = b + 2c\\left(\\frac{1}{T}\\right)\n$$\n$$\n\\frac{d^2(\\ln k)}{d(1/T)^2} = 2c\n$$\n因此，系数 $c$ 与二次模型的恒定曲率成正比。对于在以 $T_0$ 为中心的窄温度范围内拟合的模型，这个经验曲率 $2c$ 是在 $T_0$ 处计算的理论曲率的最佳拟合近似值。因此，我们将两个曲率表达式在 $T = T_0$ 时等同起来：\n$$\n2c = T_0^2 \\left(1 + \\frac{\\Delta C_{p}^{\\ddagger}}{R}\\right)\n$$\n这就是推导出的局部关系。对拟合系数 $c$ 的解释是，它等于参考温度 $T_0$ 下阿伦尼乌斯图理论曲率的一半。\n\n为了求出 $\\Delta C_{p}^{\\ddagger}$ 的值，我们重排该方程：\n$$\n\\frac{2c}{T_0^2} - 1 = \\frac{\\Delta C_{p}^{\\ddagger}}{R}\n$$\n$$\n\\Delta C_{p}^{\\ddagger} = R \\left(\\frac{2c}{T_0^2} - 1\\right)\n$$\n我们已知 $c = 9.0000 \\times 10^{4}\\,\\mathrm{K}^{2}$，$T_0 = 300\\,\\mathrm{K}$ 和 $R = 8.314462618\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$。在计算中，参考温度 $T_0$ 被视为精确值，这是参考态定义的标准惯例。\n首先，我们计算括号中的项：\n$$\n\\frac{2c}{T_0^2} = \\frac{2 \\times (9.0000 \\times 10^{4}\\,\\mathrm{K}^{2})}{(300\\,\\mathrm{K})^2} = \\frac{1.8000 \\times 10^{5}\\,\\mathrm{K}^{2}}{90000\\,\\mathrm{K}^{2}} = 2.0000\n$$\n这个结果是一个无量纲的量，有五位有效数字，受限于 $c$ 的精度。\n现在，将此代回 $\\Delta C_{p}^{\\ddagger}$ 的表达式：\n$$\n\\Delta C_{p}^{\\ddagger} = (8.314462618\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}) \\times (2.0000 - 1) = (8.314462618\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}) \\times 1.0000\n$$\n乘法的结果是 $8.314462618\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$。有效数字的位数由 $1.0000$ 决定，它有五位。因此，该值为 $8.3145\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$。四舍五入到所要求的四位有效数字，得到 $8.314\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$。", "answer": "$$\n\\boxed{8.314}\n$$", "id": "2682876"}, {"introduction": "从实验数据中确定动力学参数（如 $E_a$ 和 $A$）后，这些值总是伴随着不确定性。理解这种不确定性如何影响工程预测至关重要。本练习将指导您运用线性误差传播和更稳健的蒙特卡洛模拟两种方法，来量化阿伦尼乌斯参数的不确定性如何传递到关键性能指标（例如达到特定转化率所需的时间）。这项实践将使您掌握不确定性量化的基本技能，从而在反应工程中做出更可靠的预测和风险评估。[@problem_id:2682857]", "problem": "考虑一个单分子一级反应，其温度依赖性由阿伦尼乌斯定律描述，速率常数 $k(T) = A \\exp\\!\\left(-E_a/(R T)\\right)$，其中 $A$ 是指前因子，$E_a$ 是活化能，$R$ 是通用气体常数。令不确定的动力学参数由随机向量 $\\boldsymbol{\\theta} = (\\theta_1,\\theta_2)^\\top = (\\ln A, E_a)^\\top$ 表示。假设 $\\boldsymbol{\\theta}$ 服从联合正态分布，其均值为 $\\boldsymbol{\\mu}_\\theta = (\\mu_{\\ln A}, \\mu_{E_a})^\\top$，协方差矩阵为 $\\boldsymbol{\\Sigma}_\\theta$，该矩阵由各分量的标准差 $\\sigma_{\\ln A}$、$\\sigma_{E_a}$ 和相关系数 $\\rho$ 构建，如下所示\n$$\n\\boldsymbol{\\Sigma}_\\theta =\n\\begin{pmatrix}\n\\sigma_{\\ln A}^2 & \\rho\\, \\sigma_{\\ln A}\\, \\sigma_{E_a} \\\\\n\\rho\\, \\sigma_{\\ln A}\\, \\sigma_{E_a} & \\sigma_{E_a}^2\n\\end{pmatrix}.\n$$\n定义两个关注的导出量：\n- 在阿伦尼乌斯动力学下，达到指定目标速率常数 $k_{\\mathrm{target}}$ 所需的温度 $T_{\\mathrm{req}}$。\n- 对于一级动力学等温间歇式反应器，在固定操作温度 $T_{\\mathrm{op}}$ 下达到指定转化率 $X$ 所需的间歇时间 $t_{X}$。该过程由物料平衡 $dC_A/dt = -k(T_{\\mathrm{op}}) C_A$ 控制，其中 $C_A$ 是物质 A 的浓度，转化率定义为 $X = 1 - C_A/C_{A0}$。\n\n从这些基本定义出发，推导 $T_{\\mathrm{req}}$ 和 $t_X$ 关于 $\\boldsymbol{\\theta}$ 和给定常数的表达式。然后，对于下面列出的每个测试用例，计算 $T_{\\mathrm{req}}$ 和 $t_X$ 各自的四个量：\n- 通过使用在 $\\boldsymbol{\\mu}_\\theta$ 处评估的从 $\\boldsymbol{\\theta}$ 到目标量的变换的雅可比矩阵，进行一阶（线性）误差传播得到的均值和标准差。\n- 通过对 $\\boldsymbol{\\theta} \\sim \\mathcal{N}(\\boldsymbol{\\mu}_\\theta,\\boldsymbol{\\Sigma}_\\theta)$ 进行蒙特卡洛抽样（固定样本大小为 $N_{\\mathrm{MC}}$）估算的均值和标准差。\n\n使用通用气体常数 $R = 8.31446261815324\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$。对于蒙特卡洛方法，使用 $N_{\\mathrm{MC}} = 200000$ 个独立样本，并为保证可复现性将伪随机数生成器的种子设置为 $\\mathrm{seed} = 12345$。对于 $T_{\\mathrm{req}}$ 的蒙特卡洛估计，丢弃任何导致 $T_{\\mathrm{req}}$ 不为正数或非实数的抽样实现，并基于剩余样本计算统计数据。所有温度以 $\\mathrm{K}$ 表示，所有时间以 $\\mathrm{s}$ 表示。报告所有最终数值，并四舍五入至六位有效数字。\n\n测试套件：\n- 用例 1：$(\\mu_{\\ln A}, \\sigma_{\\ln A}) = (30.0, 0.5)$（无量纲），$(\\mu_{E_a}, \\sigma_{E_a}) = (80000.0, 5000.0)$（单位 $\\mathrm{J}\\,\\mathrm{mol}^{-1}$），$\\rho = 0.2$（无量纲），$k_{\\mathrm{target}} = 1.0\\,\\mathrm{s}^{-1}$，$T_{\\mathrm{op}} = 600.0\\,\\mathrm{K}$，$X = 0.90$（无量纲）。\n- 用例 2：$(\\mu_{\\ln A}, \\sigma_{\\ln A}) = (25.0, 1.0)$（无量纲），$(\\mu_{E_a}, \\sigma_{E_a}) = (120000.0, 15000.0)$（单位 $\\mathrm{J}\\,\\mathrm{mol}^{-1}$），$\\rho = 0.8$（无量纲），$k_{\\mathrm{target}} = 0.1\\,\\mathrm{s}^{-1}$，$T_{\\mathrm{op}} = 700.0\\,\\mathrm{K}$，$X = 0.99$（无量纲）。\n- 用例 3：$(\\mu_{\\ln A}, \\sigma_{\\ln A}) = (35.0, 0.2)$（无量纲），$(\\mu_{E_a}, \\sigma_{E_a}) = (60000.0, 2000.0)$（单位 $\\mathrm{J}\\,\\mathrm{mol}^{-1}$），$\\rho = -0.5$（无量纲），$k_{\\mathrm{target}} = 10.0\\,\\mathrm{s}^{-1}$，$T_{\\mathrm{op}} = 500.0\\,\\mathrm{K}$，$X = 0.50$（无量纲）。\n\n对于每个测试用例，您的程序必须按以下顺序输出一个包含八个浮点数的子列表：\n$[\\mu_{T,\\mathrm{lin}}, \\sigma_{T,\\mathrm{lin}}, \\mu_{T,\\mathrm{MC}}, \\sigma_{T,\\mathrm{MC}}, \\mu_{t,\\mathrm{lin}}, \\sigma_{t,\\mathrm{lin}}, \\mu_{t,\\mathrm{MC}}, \\sigma_{t,\\mathrm{MC}}]$，其中 $\\mu$ 表示均值，$\\sigma$ 表示指定方法和数量的标准差。将所有三个用例的结果汇总到一个外部列表中。您的程序应生成单行输出，其中包含一个由方括号括起来的、由逗号分隔的三个子列表的结果（例如，$[[\\cdots],[\\cdots],[\\cdots]]$）。确保输出中的所有浮点数都四舍五入到六位有效数字，并带有上述指定的隐式单位，但输出中不含单位符号。", "solution": "该问题经过严格验证。\n\n**步骤1：提取的给定信息**\n- **动力学：** 单分子一级反应，其阿伦尼乌斯速率常数为 $k(T) = A \\exp(-E_a/(R T))$。\n- **不确定参数：** 向量 $\\boldsymbol{\\theta} = (\\theta_1, \\theta_2)^\\top = (\\ln A, E_a)^\\top$ 服从联合正态分布 $\\mathcal{N}(\\boldsymbol{\\mu}_\\theta, \\boldsymbol{\\Sigma}_\\theta)$。\n- **分布矩：** 均值为 $\\boldsymbol{\\mu}_\\theta = (\\mu_{\\ln A}, \\mu_{E_a})^\\top$，协方差矩阵为 $\\boldsymbol{\\Sigma}_\\theta = \\begin{pmatrix} \\sigma_{\\ln A}^2 & \\rho\\, \\sigma_{\\ln A}\\, \\sigma_{E_a} \\\\ \\rho\\, \\sigma_{\\ln A}\\, \\sigma_{E_a} & \\sigma_{E_a}^2 \\end{pmatrix}$。\n- **关注量 (QoI)：**\n    1. $T_{\\mathrm{req}}$：达到速率常数 $k_{\\mathrm{target}}$ 所需的温度。\n    2. $t_X$：在温度 $T_{\\mathrm{op}}$ 的等温间歇式反应器中达到转化率 $X$ 所需的时间，该过程由 $dC_A/dt = -k(T_{\\mathrm{op}}) C_A$ 控制，其中 $X = 1 - C_A/C_{A0}$。\n- **任务：**\n    1. 推导 $T_{\\mathrm{req}}(\\boldsymbol{\\theta})$ 和 $t_X(\\boldsymbol{\\theta})$ 的表达式。\n    2. 对每个测试用例，通过以下方法计算 $T_{\\mathrm{req}}$ 和 $t_X$ 的均值和标准差：\n        a. 一阶线性误差传播。\n        b. 使用 $N_{\\mathrm{MC}} = 200000$ 个样本进行蒙特卡洛抽样。\n- **常数与设置：**\n    - 通用气体常数，$R = 8.31446261815324\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$。\n    - 蒙特卡洛样本大小，$N_{\\mathrm{MC}} = 200000$。\n    - 随机数生成器种子，$\\mathrm{seed} = 12345$。\n- **测试用例：** 提供了三组不同的参数集 $(\\mu_{\\ln A}, \\sigma_{\\ln A}, \\mu_{E_a}, \\sigma_{E_a}, \\rho, k_{\\mathrm{target}}, T_{\\mathrm{op}}, X)$。\n- **输出格式：** 每个用例输出一个包含八个浮点数的列表：$[\\mu_{T,\\mathrm{lin}}, \\sigma_{T,\\mathrm{lin}}, \\mu_{T,\\mathrm{MC}}, \\sigma_{T,\\mathrm{MC}}, \\mu_{t,\\mathrm{lin}}, \\sigma_{t,\\mathrm{lin}}, \\mu_{t,\\mathrm{MC}}, \\sigma_{t,\\mathrm{MC}}]$。所有结果汇总到一个列表的列表中。所有数值输出必须四舍五入到六位有效数字。\n\n**步骤2：使用提取的给定信息进行验证**\n- **科学依据：** 该问题基于化学动力学的基础原理（阿伦尼乌斯定律、间歇式反应器设计）以及不确定性量化的标准方法（线性误差传播、蒙特卡洛模拟）。它在科学上是合理的。\n- **适定性：** 所有必要的方程、参数、常数和程序细节都已明确提供。对于给定的相关系数 $|\\rho| \\le 1$，协方差矩阵是良定义的。该问题是自洽且完整的。\n- **客观性：** 问题陈述由精确的技术语言构成，没有歧义或主观论断。\n\n**步骤3：结论与行动**\n该问题是有效的。这是一个在化学工程问题中应用统计方法的明确定义的练习。将提供完整解答。\n\n---\n\n**关注量的推导**\n\n令不确定参数为 $\\theta_1 = \\ln A$ 和 $\\theta_2 = E_a$。\n\n**1. 温度 $T_{\\mathrm{req}}$**\n阿伦尼乌斯方程为 $k(T) = \\exp(\\theta_1) \\exp(-\\theta_2 / (RT))$。我们设置 $k(T) = k_{\\mathrm{target}}$ 和 $T = T_{\\mathrm{req}}$：\n$$ k_{\\mathrm{target}} = \\exp\\left(\\theta_1 - \\frac{\\theta_2}{R T_{\\mathrm{req}}}\\right) $$\n对方程两边取自然对数并整理以求解 $T_{\\mathrm{req}}$，得到：\n$$ \\ln(k_{\\mathrm{target}}) = \\theta_1 - \\frac{\\theta_2}{R T_{\\mathrm{req}}} \\implies \\frac{\\theta_2}{R T_{\\mathrm{req}}} = \\theta_1 - \\ln(k_{\\mathrm{target}}) $$\n$$ T_{\\mathrm{req}}(\\boldsymbol{\\theta}) = \\frac{\\theta_2}{R (\\theta_1 - \\ln(k_{\\mathrm{target}}))} $$\n这是 $T_{\\mathrm{req}}$ 作为 $\\boldsymbol{\\theta}$ 函数的表达式。\n\n**2. 间歇时间 $t_X$**\n对于等温间歇式反应器中的一级反应，反应物 A 的浓度随时间的变化遵循 $\\frac{dC_A}{dt} = -k(T_{\\mathrm{op}}) C_A$。从 $t=0$（此时 $C_A = C_{A0}$）到时间 $t_X$（此时 $C_A = C_A(t_X)$）进行积分，得到：\n$$ \\ln\\left(\\frac{C_A(t_X)}{C_{A0}}\\right) = -k(T_{\\mathrm{op}}) t_X $$\n根据转化率的定义 $X = 1 - C_A/C_{A0}$，我们有 $C_A/C_{A0} = 1 - X$。将此代入积分速率定律：\n$$ \\ln(1-X) = -k(T_{\\mathrm{op}}) t_X \\implies t_X = -\\frac{\\ln(1-X)}{k(T_{\\mathrm{op}})} $$\n用 $\\boldsymbol{\\theta}$ 表示速率常数 $k(T_{\\mathrm{op}})$：\n$$ k(T_{\\mathrm{op}}) = \\exp\\left(\\theta_1 - \\frac{\\theta_2}{R T_{\\mathrm{op}}}\\right) $$\n将此代入 $t_X$ 的表达式中：\n$$ t_X(\\boldsymbol{\\theta}) = -\\ln(1-X) \\exp\\left(-\\left(\\theta_1 - \\frac{\\theta_2}{R T_{\\mathrm{op}}}\\right)\\right) = -\\ln(1-X) \\exp\\left(-\\theta_1 + \\frac{\\theta_2}{R T_{\\mathrm{op}}}\\right) $$\n这是 $t_X$ 作为 $\\boldsymbol{\\theta}$ 函数的表达式。\n\n**不确定性传播方法**\n\n**方法1：线性误差传播**\n对于函数 $Y = f(\\boldsymbol{\\theta})$，其中 $\\boldsymbol{\\theta} \\sim \\mathcal{N}(\\boldsymbol{\\mu}_\\theta, \\boldsymbol{\\Sigma}_\\theta)$，一阶近似给出均值 $\\mu_Y \\approx f(\\boldsymbol{\\mu}_\\theta)$ 和方差 $\\sigma_Y^2 \\approx \\boldsymbol{J}_f \\boldsymbol{\\Sigma}_\\theta \\boldsymbol{J}_f^\\top$，其中 $\\boldsymbol{J}_f$ 是 $f$ 在 $\\boldsymbol{\\mu}_\\theta$ 处求值的雅可比行向量。\n\n对于 $Y = T_{\\mathrm{req}}$，均值为 $\\mu_{T,\\mathrm{lin}} = T_{\\mathrm{req}}(\\boldsymbol{\\mu}_\\theta) = \\frac{\\mu_{E_a}}{R(\\mu_{\\ln A} - \\ln(k_{\\mathrm{target}}))}$。在 $\\boldsymbol{\\mu}_\\theta$ 处求值的偏导数为：\n$$ J_{T,1} = \\frac{\\partial T_{\\mathrm{req}}}{\\partial \\theta_1}\\bigg|_{\\boldsymbol{\\mu}_\\theta} = -\\frac{\\mu_{E_a}}{R(\\mu_{\\ln A} - \\ln(k_{\\mathrm{target}}))^2} = -\\frac{\\mu_{T,\\mathrm{lin}}}{\\mu_{\\ln A} - \\ln(k_{\\mathrm{target}})} $$\n$$ J_{T,2} = \\frac{\\partial T_{\\mathrm{req}}}{\\partial \\theta_2}\\bigg|_{\\boldsymbol{\\mu}_\\theta} = \\frac{1}{R(\\mu_{\\ln A} - \\ln(k_{\\mathrm{target}}))} = \\frac{\\mu_{T,\\mathrm{lin}}}{\\mu_{E_a}} $$\n方差为 $\\sigma_{T,\\mathrm{lin}}^2 = J_{T,1}^2 \\sigma_{\\ln A}^2 + J_{T,2}^2 \\sigma_{E_a}^2 + 2 J_{T,1} J_{T,2} \\rho \\sigma_{\\ln A} \\sigma_{E_a}$。\n\n对于 $Y = t_X$，均值为 $\\mu_{t,\\mathrm{lin}} = t_X(\\boldsymbol{\\mu}_\\theta) = -\\ln(1-X) \\exp(-\\mu_{\\ln A} + \\frac{\\mu_{E_a}}{R T_{\\mathrm{op}}})$。在 $\\boldsymbol{\\mu}_\\theta$ 处求值的偏导数为：\n$$ J_{t,1} = \\frac{\\partial t_X}{\\partial \\theta_1}\\bigg|_{\\boldsymbol{\\mu}_\\theta} = -t_X(\\boldsymbol{\\mu}_\\theta) = -\\mu_{t,\\mathrm{lin}} $$\n$$ J_{t,2} = \\frac{\\partial t_X}{\\partial \\theta_2}\\bigg|_{\\boldsymbol{\\mu}_\\theta} = \\frac{t_X(\\boldsymbol{\\mu}_\\theta)}{R T_{\\mathrm{op}}} = \\frac{\\mu_{t,\\mathrm{lin}}}{R T_{\\mathrm{op}}} $$\n方差为 $\\sigma_{t,\\mathrm{lin}}^2 = J_{t,1}^2 \\sigma_{\\ln A}^2 + J_{t,2}^2 \\sigma_{E_a}^2 + 2 J_{t,1} J_{t,2} \\rho \\sigma_{\\ln A} \\sigma_{E_a}$。\n\n**方法2：蒙特卡洛模拟**\n1.  根据给定参数构建协方差矩阵 $\\boldsymbol{\\Sigma}_\\theta$。\n2.  使用指定的随机种子从 $\\mathcal{N}(\\boldsymbol{\\mu}_\\theta, \\boldsymbol{\\Sigma}_\\theta)$ 中生成 $N_{\\mathrm{MC}} = 200000$ 个随机样本 $\\boldsymbol{\\theta}^{(i)}$。\n3.  对于每个样本 $\\boldsymbol{\\theta}^{(i)}$，使用推导的表达式计算 $T_{\\mathrm{req}}^{(i)}$ 和 $t_X^{(i)}$。\n4.  对于 $T_{\\mathrm{req}}$ 样本集，丢弃任何非正值或非实数值。\n5.  对得到的 $T_{\\mathrm{req}}$ 和 $t_X$ 值集合计算样本均值和样本标准差（分母为 $N-1$）。\n\n所有最终数值结果将四舍五入到六位有效数字。整个过程在提供的程序中实现。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of propagating uncertainty in Arrhenius parameters \n    to derived quantities in chemical kinetics.\n    \"\"\"\n\n    # --- Constants and Settings ---\n    R = 8.31446261815324  # Universal gas constant in J/mol/K\n    N_MC = 200000         # Number of Monte Carlo samples\n    SEED = 12345          # Pseudorandom number generator seed\n\n    # --- Test Cases ---\n    _test_cases = [\n        # Case 1: (mu_lnA, sig_lnA), (mu_Ea, sig_Ea), rho, k_target, T_op, X\n        {'params': (30.0, 0.5, 80000.0, 5000.0), 'rho': 0.2, 'k_target': 1.0, 'T_op': 600.0, 'X': 0.90},\n        # Case 2\n        {'params': (25.0, 1.0, 120000.0, 15000.0), 'rho': 0.8, 'k_target': 0.1, 'T_op': 700.0, 'X': 0.99},\n        # Case 3\n        {'params': (35.0, 0.2, 60000.0, 2000.0), 'rho': -0.5, 'k_target': 10.0, 'T_op': 500.0, 'X': 0.50},\n    ]\n\n    all_results = []\n    rng = np.random.default_rng(SEED)\n\n    def round_to_sig_figs(x, sf=6):\n        \"\"\"Rounds a number to a specified number of significant figures.\"\"\"\n        if x == 0:\n            return 0.0\n        return float(f'{x:.{sf}g}')\n\n    for case in _test_cases:\n        mu_lnA, sig_lnA, mu_Ea, sig_Ea = case['params']\n        rho = case['rho']\n        k_target = case['k_target']\n        T_op = case['T_op']\n        X = case['X']\n\n        mu_theta = np.array([mu_lnA, mu_Ea])\n        cov_lnA_Ea = rho * sig_lnA * sig_Ea\n        Sigma_theta = np.array([[sig_lnA**2, cov_lnA_Ea],\n                                [cov_lnA_Ea, sig_Ea**2]])\n\n        # --- 1. First-Order (Linear) Error Propagation ---\n        \n        # For T_req\n        ln_k_target = np.log(k_target)\n        mu_T_lin = mu_Ea / (R * (mu_lnA - ln_k_target))\n        \n        J_T_1 = -mu_T_lin / (mu_lnA - ln_k_target)\n        J_T_2 = mu_T_lin / mu_Ea\n        J_T = np.array([J_T_1, J_T_2])\n        \n        var_T_lin = J_T @ Sigma_theta @ J_T.T\n        sig_T_lin = np.sqrt(var_T_lin)\n        \n        # For t_X\n        C_X = -np.log(1 - X)\n        mu_t_lin = C_X * np.exp(-mu_lnA + mu_Ea / (R * T_op))\n\n        J_t_1 = -mu_t_lin\n        J_t_2 = mu_t_lin / (R * T_op)\n        J_t = np.array([J_t_1, J_t_2])\n\n        var_t_lin = J_t @ Sigma_theta @ J_t.T\n        sig_t_lin = np.sqrt(var_t_lin)\n        \n        # --- 2. Monte Carlo Simulation ---\n        \n        theta_samples = rng.multivariate_normal(mu_theta, Sigma_theta, size=N_MC)\n        theta1 = theta_samples[:, 0]\n        theta2 = theta_samples[:, 1]\n        \n        # For T_req\n        T_req_samples = theta2 / (R * (theta1 - ln_k_target))\n        # Filter non-positive/non-real T_req samples\n        valid_T_req_samples = T_req_samples[np.isfinite(T_req_samples) & (T_req_samples > 0)]\n        \n        mu_T_mc = np.mean(valid_T_req_samples)\n        sig_T_mc = np.std(valid_T_req_samples, ddof=1)\n        \n        # For t_X\n        t_X_samples = C_X * np.exp(-theta1 + theta2 / (R * T_op))\n        \n        mu_t_mc = np.mean(t_X_samples)\n        sig_t_mc = np.std(t_X_samples, ddof=1)\n        \n        # --- Collect and Round Results ---\n        case_results = [\n            round_to_sig_figs(mu_T_lin),\n            round_to_sig_figs(sig_T_lin),\n            round_to_sig_figs(mu_T_mc),\n            round_to_sig_figs(sig_T_mc),\n            round_to_sig_figs(mu_t_lin),\n            round_to_sig_figs(sig_t_lin),\n            round_to_sig_figs(mu_t_mc),\n            round_to_sig_figs(sig_t_mc),\n        ]\n        all_results.append(case_results)\n\n    # --- Print Final Output ---\n    final_output_str = str(all_results).replace(' ', '')\n    print(final_output_str)\n\nsolve()\n```", "id": "2682857"}, {"introduction": "所估算的动力学参数的精度在很大程度上取决于实验设计，特别是温度的选择。我们如何才能设计出信息量最大的实验？本练习将向您介绍基于费雪信息矩阵（Fisher Information Matrix, FIM）的最优实验设计概念。您将编写代码，根据 D-最优和 A-最优等准则来评估不同的温度方案，以找到最能约束参数的实验条件。完成这项实践后，您将学会如何主动设计实验以最小化参数不确定性，这是一项能够节约资源并获得更可靠科学结论的强大技能。[@problem_id:2682865]", "problem": "给定一个单步反应，其温度依赖性遵循阿伦尼乌斯定律。对于以 $\\mathrm{K}$ 为单位的绝对温度 $T$，速率常数为 $k(T) = A \\exp\\!\\left(-E_a/(R T)\\right)$，其中 $E_a$ 是以 $\\mathrm{J/mol}$ 为单位的活化能，$A$ 是指前因子，$R$ 是以 $\\mathrm{J/(mol\\cdot K)}$ 为单位的通用气体常数。您在温度 $T_1,\\dots,T_n$下对速率常数进行了 $n$ 次测量，并考虑测量速率常数的对数。假设对数上存在一个加性、独立、同分布的高斯噪声模型：\n- 对于每个 $i \\in \\{1,\\dots,n\\}$，测量值为 $y_i = \\ln k(T_i) + \\varepsilon_i$，其中 $\\varepsilon_i \\sim \\mathcal{N}(0,\\sigma_y^2)$，且相互独立。\n- 参数矢量为 $\\theta = (E_a, \\ln A)$。\n- 通用气体常数为 $R = 8.314462618\\,\\mathrm{J/(mol\\cdot K)}$。\n\n您的任务是，对于每个候选温度方案（一个由温度 $T_i$ 构成的有限多重集），仅使用独立高斯噪声下费雪信息的基础定义，计算参数 $E_a$ 和 $\\ln A$ 的费雪信息矩阵 (FIM)，然后评估候选方案的两个设计准则：\n- 行列式最优性 (D-最优性): 最大化 $\\det(\\mathcal{I}(\\theta))$。\n- A-最优性: 最小化 $\\operatorname{tr}(\\mathcal{I}(\\theta)^{-1})$。\n\n您可以使用的基本依据：\n- 阿伦尼乌斯定律 $k(T) = A \\exp\\!\\left(-E_a/(R T)\\right)$ 以及定义 $y_i = \\ln k(T_i) + \\varepsilon_i$，其中 $\\varepsilon_i \\sim \\mathcal{N}(0,\\sigma_y^2)$。\n- 对于已知方差 $\\sigma_y^2$ 的高斯噪声下的独立观测，费雪信息矩阵 (FIM) 的定义为：\n  $$\\mathcal{I}(\\theta) = \\mathbb{E}\\!\\left[-\\frac{\\partial^2}{\\partial \\theta \\partial \\theta^\\top} \\log L(\\theta; y_1,\\dots,y_n)\\right] = \\sum_{i=1}^n \\frac{1}{\\sigma_y^2}\\, \\left(\\frac{\\partial \\mu_i(\\theta)}{\\partial \\theta}\\right)\\left(\\frac{\\partial \\mu_i(\\theta)}{\\partial \\theta}\\right)^\\top,$$\n  其中 $\\mu_i(\\theta) = \\mathbb{E}[y_i \\mid \\theta]$。\n\n重要实现细节：\n- 物理单位：使用 $\\mathrm{K}$ 作为 $T$ 的单位，$\\mathrm{J/(mol\\cdot K)}$ 作为 $R$ 的单位，$\\mathrm{J/mol}$ 作为 $E_a$ 的单位，$\\sigma_y$ 作为 $y_i = \\ln k_i$ 的无量纲标准差。程序的输出是无量纲的索引和实值准则；无需为输出附加物理单位。\n- 数值稳定性：为稳健地确定奇异性并计算行列式和逆的迹，请使用对称 $2\\times 2$ 费雪信息矩阵的特征值 $\\lambda_1,\\lambda_2$。设 $\\lambda_{\\max} = \\max(\\lambda_1,\\lambda_2)$。定义容差 $\\tau = 10^{-12}$。如果 $\\lambda_{\\max} = 0$ 或任何 $\\lambda_j \\le \\tau \\lambda_{\\max}$，则为求逆目的将该矩阵视为奇异矩阵；在此情况下，设 $\\det(\\mathcal{I}) = 0$ 且 $\\operatorname{tr}(\\mathcal{I}^{-1}) = +\\infty$。否则，计算 $\\det(\\mathcal{I}) = \\lambda_1 \\lambda_2$ 和 $\\operatorname{tr}(\\mathcal{I}^{-1}) = \\lambda_1^{-1} + \\lambda_2^{-1}$。\n- 决胜规则：为 D-最优性比较行列式时，如果两个行列式之差最多为 $10^{-9}$ 的相对容差，则选择索引较小的方案。为 A-最优性比较逆的迹时，如果两个迹之差最多为 $10^{-9}$ 的相对容差，则选择索引较小的方案。\n- 索引：候选方案的索引是从零开始的整数 $0,1,2,\\dots$。\n\n需要实现和求解的测试套件：\n- 使用 $R = 8.314462618\\,\\mathrm{J/(mol\\cdot K)}$ 和以下案例。对于每个案例 $c$，给定 $\\sigma_y$（无量纲）和一系列候选方案 $\\mathcal{S}_c = \\{S_{c,0}, S_{c,1}, \\dots \\}$，其中每个 $S_{c,j}$ 是一个以 $\\mathrm{K}$ 为单位的温度列表。\n- 案例 1：$\\sigma_y = 0.05$。候选方案：\n  - $S_{1,0} = [290, 310, 330, 350]\\,\\mathrm{K}$。\n  - $S_{1,1} = [300, 400, 500, 600]\\,\\mathrm{K}$。\n  - $S_{1,2} = [320, 325, 330, 335]\\,\\mathrm{K}$。\n  - $S_{1,3} = [280, 280, 600, 600]\\,\\mathrm{K}$。\n- 案例 2：$\\sigma_y = 0.05$。候选方案：\n  - $S_{2,0} = [500, 505, 510, 515]\\,\\mathrm{K}$。\n  - $S_{2,1} = [290, 450, 700, 900]\\,\\mathrm{K}$。\n  - $S_{2,2} = [300, 300, 300, 300]\\,\\mathrm{K}$。\n- 案例 3：$\\sigma_y = 0.2$。候选方案：\n  - $S_{3,0} = [300, 350, 400, 450, 500]\\,\\mathrm{K}$。\n  - $S_{3,1} = [280, 280, 600, 600, 600]\\,\\mathrm{K}$。\n  - $S_{3,2} = [320, 420, 520, 620, 720]\\,\\mathrm{K}$。\n- 案例 4：$\\sigma_y = 0.05$。候选方案：\n  - $S_{4,0} = [250, 1000]\\,\\mathrm{K}$。\n  - $S_{4,1} = [250, 250, 1000]\\,\\mathrm{K}$。\n  - $S_{4,2} = [500, 500]\\,\\mathrm{K}$。\n\n程序要求：\n- 对于每个案例 $c$ 和每个候选方案 $S_{c,j}$，使用上述基础定义计算 $\\theta = (E_a, \\ln A)$ 的 $2\\times 2$ 费雪信息矩阵 $\\mathcal{I}_{c,j}$。然后，使用所述的基于特征值的规则和容差计算 $\\det(\\mathcal{I}_{c,j})$ 和 $\\operatorname{tr}(\\mathcal{I}_{c,j}^{-1})$。\n- 对于每个案例 $c$，找出最大化 $\\det(\\mathcal{I}_{c,j})$ 的 D-最优索引 $j_D$（带决胜规则）和最小化 $\\operatorname{tr}(\\mathcal{I}_{c,j}^{-1})$ 的 A-最优索引 $j_A$（带决胜规则）。同时报告最佳 D-最优行列式值 $\\det(\\mathcal{I}_{c,j_D})$ 和最佳 A-最优逆的迹值 $\\operatorname{tr}(\\mathcal{I}_{c,j_A}^{-1})$。\n- 最终输出格式：您的程序应生成单行输出，其中包含以逗号分隔的各案例摘要列表，每个案例摘要是形式为 $[j_D, j_A, \\det(\\mathcal{I}_{c,j_D}), \\operatorname{tr}(\\mathcal{I}_{c,j_A}^{-1})]$ 的列表。总体输出必须是单个列表的列表，例如：\n  $$\\texttt{[[jD\\_1,jA\\_1,det\\_1,traceinv\\_1],[jD\\_2,jA\\_2,det\\_2,traceinv\\_2],\\dots]}.$$", "solution": "用户提供的问题陈述已经过严格验证，被认为是科学上合理、适定、客观且完整的。所有提供的信息都是一致的，该任务是关于最优实验设计理论在化学动力学基本模型中的一个标准应用。因此，该问题是有效的。我们现在开始进行求解。\n\n核心任务是为估计阿伦尼乌斯方程的参数确定最优实验设计。在此背景下，设计是指选择用于测量反应速率常数的温度 $T_i$。最优性是使用从费雪信息矩阵 (FIM) 导出的准则来评估的。\n\n速率常数 $k(T)$ 的对数模型由下式给出\n$$y_i = \\ln k(T_i) + \\varepsilon_i$$\n其中 $\\varepsilon_i \\sim \\mathcal{N}(0,\\sigma_y^2)$ 是独立同分布的高斯噪声项。阿伦尼乌斯定律指出 $k(T) = A \\exp(-E_a/(RT))$，因此我们测量值 $y_i$ 的均值为\n$$\\mu_i(\\theta) = \\mathbb{E}[y_i \\mid \\theta] = \\ln(A \\exp(-E_a/(RT_i))) = \\ln A - \\frac{E_a}{RT_i}$$\n未知参数的矢量是 $\\theta = (E_a, \\ln A)^\\top$。平均响应 $\\mu_i(\\theta)$ 的模型可以写成参数的线性函数：\n$$\\mu_i(\\theta) = \\begin{pmatrix} -1/(RT_i) & 1 \\end{pmatrix} \\begin{pmatrix} E_a \\\\ \\ln A \\end{pmatrix}$$\n这是一个线性回归模型。对于此类模型，费雪信息矩阵不依赖于参数 $\\theta$ 的真实值，这是一个至关重要的属性，它允许在实验尚未进行之前就进行实验设计。\n\n对于已知高斯噪声方差 $\\sigma_y^2$ 的 $n$ 次独立测量，费雪信息矩阵 $\\mathcal{I}(\\theta)$ 由以下基础公式给出：\n$$\\mathcal{I}(\\theta) = \\sum_{i=1}^n \\frac{1}{\\sigma_y^2} \\left(\\frac{\\partial \\mu_i(\\theta)}{\\partial \\theta}\\right) \\left(\\frac{\\partial \\mu_i(\\theta)}{\\partial \\theta}\\right)^\\top$$\n首先，我们计算平均响应 $\\mu_i$ 相对于参数矢量 $\\theta = (E_a, \\ln A)^\\top$ 的梯度：\n$$\\frac{\\partial \\mu_i(\\theta)}{\\partial \\theta} = \\begin{pmatrix} \\partial \\mu_i / \\partial E_a \\\\ \\partial \\mu_i / \\partial \\ln A \\end{pmatrix} = \\begin{pmatrix} -1/(RT_i) \\\\ 1 \\end{pmatrix}$$\n我们将此梯度矢量表示为 $g(T_i)$。在温度 $T_i$ 下单次测量对 FIM 的贡献是该梯度矢量与其自身的外积，再乘以 $1/\\sigma_y^2$：\n$$\\mathcal{I}_i = \\frac{1}{\\sigma_y^2} g(T_i) g(T_i)^\\top = \\frac{1}{\\sigma_y^2} \\begin{pmatrix} -1/(RT_i) \\\\ 1 \\end{pmatrix} \\begin{pmatrix} -1/(RT_i) & 1 \\end{pmatrix} = \\frac{1}{\\sigma_y^2} \\begin{pmatrix} 1/(RT_i)^2 & -1/(RT_i) \\\\ -1/(RT_i) & 1 \\end{pmatrix}$$\n在温度 $T_1, \\dots, T_n$ 下进行 $n$ 次测量的方案的总 FIM 是各个贡献的总和：\n$$\\mathcal{I} = \\sum_{i=1}^n \\mathcal{I}_i = \\frac{1}{\\sigma_y^2} \\sum_{i=1}^n \\begin{pmatrix} 1/(RT_i)^2 & -1/(RT_i) \\\\ -1/(RT_i) & 1 \\end{pmatrix}$$\n$$ \\mathcal{I} = \\frac{1}{\\sigma_y^2} \\begin{pmatrix} \\frac{1}{R^2} \\sum_{i=1}^n \\frac{1}{T_i^2} & -\\frac{1}{R} \\sum_{i=1}^n \\frac{1}{T_i} \\\\ -\\frac{1}{R} \\sum_{i=1}^n \\frac{1}{T_i} & n \\end{pmatrix} $$\n当且仅当所有梯度矢量 $g(T_i)$ 共线时，FIM 是奇异的，即其行列式为零。对于我们特定的梯度矢量，这当且仅当所有温度 $T_i$ 相同时发生。从物理上讲，这意味着如果仅在一个温度下进行测量，就不可能唯一地确定活化能 $E_a$（与 $\\ln k$ 对 $1/T$ 图的斜率相关）和指前因子 $\\ln A$（截距）。这导致了参数的不可辨识性。\n\n我们评估两个标准的最优性准则：\n1.  **D-最优性**: 最大化 $\\det(\\mathcal{I})$。FIM 的逆矩阵 $\\mathcal{I}^{-1}$ 与参数估计的协方差矩阵成正比。参数的置信椭球体积与 $1/\\sqrt{\\det(\\mathcal{I})}$ 成正比。因此，最大化 $\\det(\\mathcal{I})$ 等效于最小化置信区域的体积，从而联合地获得最精确的参数估计。\n2.  **A-最优性**: 最小化 $\\operatorname{tr}(\\mathcal{I}^{-1})$。由于 $\\operatorname{tr}(\\mathcal{I}^{-1})$ 与参数估计方差之和成正比，A-最优性旨在最小化估计的平均方差。\n\n每个候选温度方案的计算过程如下：\n1.  给定温度方案 $\\{T_1, \\dots, T_n\\}$，计算必要的和：$S_1 = \\sum_{i=1}^n 1/T_i$ 和 $S_2 = \\sum_{i=1}^n 1/T_i^2$。\n2.  使用推导的公式、给定的噪声标准差 $\\sigma_y$ 和气体常数 $R = 8.314462618\\,\\mathrm{J/(mol\\cdot K)}$ 构建 $2 \\times 2$ FIM $\\mathcal{I}$。\n3.  计算对称矩阵 $\\mathcal{I}$ 的两个特征值 $\\lambda_1$ 和 $\\lambda_2$。\n4.  应用指定的数值稳定性规则：设 $\\lambda_{\\max} = \\max(\\lambda_1, \\lambda_2)$ 和 $\\lambda_{\\min} = \\min(\\lambda_1, \\lambda_2)$。如果 $\\lambda_{\\max} = 0$ 或 $\\lambda_{\\min} \\le \\tau \\lambda_{\\max}$（其中 $\\tau = 10^{-12}$），则该矩阵被视为奇异矩阵。\n5.  如果是奇异的，则 D-最优性准则值为 $\\det(\\mathcal{I}) = 0$，A-最优性准则值为 $\\operatorname{tr}(\\mathcal{I}^{-1}) = \\infty$。\n6.  如果非奇异，则准则计算为 $\\det(\\mathcal{I}) = \\lambda_1 \\lambda_2$ 和 $\\operatorname{tr}(\\mathcal{I}^{-1}) = 1/\\lambda_1 + 1/\\lambda_2$。\n\n对于每个测试案例，我们为所有候选方案计算这两个准则。然后我们为每个准则确定最优方案。选择过程包含一个决胜规则：如果两个方案产生的准则值之差最多为 $10^{-9}$ 的相对容差，则选择索引较小的方案。实现方式是：首先在一个案例的所有方案中找到全局最优值（最大行列式或最小逆的迹），然后找出其准则值在该最优值的容差带内的所有方案，最后从这个子集中选择索引最小的那个。此过程系统地应用于所有测试案例以生成最终结果。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes Fisher Information Matrices for different temperature schedules\n    and determines optimal schedules based on D- and A-optimality criteria.\n    \"\"\"\n\n    # Global constants defined in the problem\n    R = 8.314462618  # J/(mol*K)\n    SINGULARITY_TOL = 1e-12\n    TIE_BREAK_TOL = 1e-9\n\n    # Test suite from the problem statement\n    test_cases = [\n        {\n            \"sigma_y\": 0.05,\n            \"schedules\": [\n                [290, 310, 330, 350],\n                [300, 400, 500, 600],\n                [320, 325, 330, 335],\n                [280, 280, 600, 600],\n            ],\n        },\n        {\n            \"sigma_y\": 0.05,\n            \"schedules\": [\n                [500, 505, 510, 515],\n                [290, 450, 700, 900],\n                [300, 300, 300, 300],\n            ],\n        },\n        {\n            \"sigma_y\": 0.2,\n            \"schedules\": [\n                [300, 350, 400, 450, 500],\n                [280, 280, 600, 600, 600],\n                [320, 420, 520, 620, 720],\n            ],\n        },\n        {\n            \"sigma_y\": 0.05,\n            \"schedules\": [\n                [250, 1000], \n                [250, 250, 1000],\n                [500, 500]\n            ],\n        },\n    ]\n\n    def calculate_criteria(T_schedule, sigma_y):\n        \"\"\"\n        Calculates D- and A-optimality criteria for a given temperature schedule.\n        \"\"\"\n        T = np.array(T_schedule, dtype=np.float64)\n        n = len(T)\n\n        if n < 2:  # Not enough points to estimate two parameters\n            return 0.0, np.inf\n\n        # FIM elements calculation\n        sum_inv_T = np.sum(1.0 / T)\n        sum_inv_T2 = np.sum(1.0 / (T**2))\n\n        # The core matrix M such that FIM = (1/sigma_y^2) * M\n        m11 = sum_inv_T2 / (R**2)\n        m12 = -sum_inv_T / R\n        m22 = float(n)\n        \n        fim = (1.0 / sigma_y**2) * np.array([[m11, m12], [m12, m22]])\n\n        # Calculate eigenvalues for robust computation\n        try:\n            eigvals = np.linalg.eigvalsh(fim)\n        except np.linalg.LinAlgError:\n            return 0.0, np.inf\n        \n        # Ensure eigenvalues are non-negative\n        lambda1, lambda2 = max(0, eigvals[0]), max(0, eigvals[1])\n        \n        lambda_max = max(lambda1, lambda2)\n        lambda_min = min(lambda1, lambda2)\n\n        # Evaluate singularity based on problem-defined rule\n        if lambda_max == 0 or lambda_min <= SINGULARITY_TOL * lambda_max:\n            det_val = 0.0\n            trace_inv_val = np.inf\n        else:\n            det_val = lambda1 * lambda2\n            trace_inv_val = (1.0 / lambda1) + (1.0 / lambda2)\n\n        return det_val, trace_inv_val\n\n    all_results = []\n    for case in test_cases:\n        sigma_y = case[\"sigma_y\"]\n        schedules = case[\"schedules\"]\n\n        results_per_schedule = []\n        for i, schedule in enumerate(schedules):\n            d_val, a_val = calculate_criteria(schedule, sigma_y)\n            results_per_schedule.append({\"idx\": i, \"d\": d_val, \"a\": a_val})\n\n        # --- D-optimality (maximize determinant) ---\n        max_d_val = -1.0\n        for res in results_per_schedule:\n            if res[\"d\"] > max_d_val:\n                max_d_val = res[\"d\"]\n        \n        d_candidates = []\n        if max_d_val >= 0:\n            # Handle division-by-zero for relative tolerance\n            norm = max_d_val if max_d_val > 0 else 1.0\n            for res in results_per_schedule:\n                if abs(res[\"d\"] - max_d_val) <= TIE_BREAK_TOL * norm:\n                    d_candidates.append(res[\"idx\"])\n        \n        best_d_idx = min(d_candidates)\n        final_d_val = results_per_schedule[best_d_idx][\"d\"]\n\n        # --- A-optimality (minimize trace of inverse) ---\n        min_a_val = np.inf\n        for res in results_per_schedule:\n            if res[\"a\"] < min_a_val:\n                min_a_val = res[\"a\"]\n                \n        a_candidates = []\n        if np.isfinite(min_a_val):\n             # Handle division-by-zero for relative tolerance\n            norm = min_a_val if min_a_val > 0 else 1.0\n            for res in results_per_schedule:\n                if abs(res[\"a\"] - min_a_val) <= TIE_BREAK_TOL * norm:\n                    a_candidates.append(res[\"idx\"])\n        else: # min_a_val is inf\n            for res in results_per_schedule:\n                if not np.isfinite(res[\"a\"]):\n                    a_candidates.append(res[\"idx\"])\n\n        best_a_idx = min(a_candidates)\n        final_a_val = results_per_schedule[best_a_idx][\"a\"]\n\n        all_results.append([best_d_idx, best_a_idx, final_d_val, final_a_val])\n\n    # Construct the final output string exactly as specified\n    case_strings = []\n    for res in all_results:\n        # Use a format that automatically handles scientific notation if needed\n        s = f\"[{res[0]},{res[1]},{res[2]:.15g},{res[3]:.15g}]\"\n        case_strings.append(s)\n    \n    final_output = f\"[{','.join(case_strings)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2682865"}]}