{"hands_on_practices": [{"introduction": "我们如何从一个理论模型出发，构建一个激发函数呢？这个实践将指导你完成这一过程。对于有能垒的反应，一个常见的理论方法是将不同总角动量量子数（$J$）分波的反应概率加和。本练习 [@problem_id:2641875] 将挑战你使用一个简化但功能强大的反应概率公式来实现这种分波求和，从而揭示总反应截面是如何由各量子力学分波贡献构成的。", "problem": "设计并实现一个完整的、可运行的程序。该程序针对指定势能面（PES）上的三原子反应共线模型，在目标入射通道平动能窗口内，计算收敛的激发函数。激发函数定义为积分反应截面随能量的变化关系。您的程序必须是自洽的，并能为多组预设参数集生成结果。其科学和数值框架如下。\n\n从以下基础出发：\n- 在具有良好总角动量量子数 $J$ 的中心势散射描述中，平动能为 $E$ 时的积分反应截面为\n$$\n\\sigma(E) \\;=\\; \\frac{\\pi}{k^2(E)} \\sum_{J=0}^{\\infty} (2J+1)\\,P_J(E),\n$$\n其中 $k(E)=\\sqrt{2\\mu E}/\\hbar$ 是入射通道的波数，$\\mu$ 是约化质量，$\\hbar$ 是约化普朗克常数，$P_J(E)$ 是第 $J$ 个分波的反应概率。\n- 在过渡态附近，沿最小能量反应坐标用高度为 $V_0$、势垒频率为 $\\omega_b$ 的倒谐振子势垒来近似 PES，因此对于第 $J$ 个分波，有效势垒顶因离心项而发生移动，\n$$\nV_{\\mathrm{eff}}^{(J)} \\;=\\; V_0 \\;+\\; \\frac{\\hbar^2 J(J+1)}{2\\mu R_c^2},\n$$\n其中 $R_c$ 是沿入射通道的势垒位置。在此近似下，使用 Hill–Wheeler 公式计算通过倒抛物线势垒的透射概率，\n$$\nP_J(E) \\;=\\; \\frac{1}{1+\\exp\\!\\left(\\frac{2\\pi}{\\hbar \\omega_b}\\left[V_{\\mathrm{eff}}^{(J)}-E\\right]\\right)}.\n$$\n\n设计一个计算协议，规定以下内容：\n- 一个总角动量 $J$ 的分波基组和一种自适应截断策略，用 $\\sum_{J=0}^{J_{\\max}}$ 近似 $\\sum_{J=0}^{\\infty}$，同时保证收敛到用户指定的容差。\n- 区间 $[E_{\\min},E_{\\max}]$ 上的一个能量网格，包含指定数量 $N_E$ 个均匀间隔的点。\n- 控制 $J$ 的截断误差和数值稳定性的传播与收敛参数。\n\n您的程序必须实现以下数值规格：\n- 对于网格上的每个能量 $E_n$，从 $J=0$ 开始自适应地增加 $J$，并累加级数 $S(E_n)=\\sum_{J=0}^{J_{\\max}(E_n)} (2J+1)P_J(E_n)$，直到在整个能量网格上同时满足相对增量判据和绝对增量判据。具体来说，如果在某个尝试的 $J$ 值下，增量项\n$$\n\\Delta_J(E_n)= (2J+1)P_J(E_n)\n$$\n满足\n$$\n\\max_n \\frac{\\Delta_J(E_n)}{\\max\\{S(E_n),\\epsilon_{\\mathrm{floor}}\\}} \\le \\varepsilon_{\\mathrm{rel}}\n\\quad\\text{和}\\quad\n\\max_n \\Delta_J(E_n) \\le \\varepsilon_{\\mathrm{abs}},\n$$\n则停止；否则包含此 $J$ 值并继续。此处 $\\epsilon_{\\mathrm{floor}}$ 是一个小正数，用于避免累加开始时出现除以零的情况。同时施加一个硬性上限 $J \\le J_{\\mathrm{cap}}$。\n- 计算截面\n$$\n\\sigma(E_n) = \\frac{\\pi}{k^2(E_n)} S(E_n),\n$$\n并使用 $1\\,\\mathrm{\\AA} = 10^{-10}\\,\\mathrm{m}$ 从平方米转换为平方埃（$\\mathrm{\\AA}^2$）进行报告。能量单位使用电子伏特（eV），质量单位使用千克（kg），距离单位使用埃（Å），频率单位使用反秒（s⁻¹），普朗克常数单位使用焦耳-秒（J·s），电子伏特到焦耳的转换为 $1\\,\\mathrm{eV} = 1.602176634\\times 10^{-19}\\,\\mathrm{J}$。将每个报告的截面值四舍五入到 $\\mathrm{\\AA}^2$ 的6位小数。\n- 无需角度单位。\n\n您的程序不得接受任何输入，并且必须为以下参数集测试套件计算结果，每个参数集指定为一个元组\n$$\n(\\mu,\\;V_0,\\;\\omega_b,\\;R_c,\\;E_{\\min},\\;E_{\\max},\\;N_E,\\;\\varepsilon_{\\mathrm{rel}},\\;\\varepsilon_{\\mathrm{abs}},\\;J_{\\mathrm{cap}}),\n$$\n单位如上所述：\n- 测试 A (正常路径): $\\mu=1.66053906660\\times 10^{-27}$, $V_0=0.200$, $\\omega_b=8.0\\times 10^{13}$, $R_c=1.60$, $E_{\\min}=0.050$, $E_{\\max}=0.600$, $N_E=5$, $\\varepsilon_{\\mathrm{rel}}=1.0\\times 10^{-6}$, $\\varepsilon_{\\mathrm{abs}}=1.0\\times 10^{-6}$, $J_{\\mathrm{cap}}=2000$。\n- 测试 B (近阈值，更陡峭的势垒): $\\mu=1.66053906660\\times 10^{-27}$, $V_0=0.050$, $\\omega_b=1.5\\times 10^{14}$, $R_c=1.50$, $E_{\\min}=0.005$, $E_{\\max}=0.200$, $N_E=5$, $\\varepsilon_{\\mathrm{rel}}=1.0\\times 10^{-6}$, $\\varepsilon_{\\mathrm{abs}}=1.0\\times 10^{-8}$, $J_{\\mathrm{cap}}=2000$。\n- 测试 C (更重的入射通道，更高的势垒，更高的能量): $\\mu=3.32107813320\\times 10^{-27}$, $V_0=0.300$, $\\omega_b=1.0\\times 10^{14}$, $R_c=1.20$, $E_{\\min}=0.200$, $E_{\\max}=1.000$, $N_E=5$, $\\varepsilon_{\\mathrm{rel}}=1.0\\times 10^{-6}$, $\\varepsilon_{\\mathrm{abs}}=1.0\\times 10^{-6}$, $J_{\\mathrm{cap}}=3000$。\n- 测试 D (宽而软的势垒，强的隧穿尾): $\\mu=1.66053906660\\times 10^{-27}$, $V_0=0.120$, $\\omega_b=5.0\\times 10^{13}$, $R_c=2.00$, $E_{\\min}=0.020$, $E_{\\max}=0.400$, $N_E=5$, $\\varepsilon_{\\mathrm{rel}}=1.0\\times 10^{-7}$, $\\varepsilon_{\\mathrm{abs}}=1.0\\times 10^{-7}$, $J_{\\mathrm{cap}}=2500$。\n\n您的程序应生成单行输出，其中包含一个由逗号分隔的列表的列表，不含空格，并用方括号括起来。每个内部列表按 A、B、C、D 的顺序对应一个测试用例，并包含从 $E_{\\min}$ 到 $E_{\\max}$（含）的 $N_E$ 个能量点上的 $\\sigma(E_n)$ 值，按升序排列，四舍五入到 $\\mathrm{\\AA}^2$ 的6位小数。例如，输出格式必须严格为\n$[ [\\sigma_{A,1},\\dots,\\sigma_{A,N_E}], [\\sigma_{B,1},\\dots,\\sigma_{B,N_E}], [\\sigma_{C,1},\\dots,\\sigma_{C,N_E}], [\\sigma_{D,1},\\dots,\\sigma_{D,N_E}] ]$\n但不含任何空格，即，\n$[[\\sigma_{A,1},\\dots,\\sigma_{A,N_E}],[\\sigma_{B,1},\\dots,\\sigma_{B,N_E}],[\\sigma_{C,1},\\dots,\\sigma_{C,N_E}],[\\sigma_{D,1},\\dots,\\sigma_{D,N_E}]]$.\n\n科学真实性约束：\n- 所有参数必须使用上述指定的单位，并且必须一致地执行单位转换。\n- 激发函数必须在所述模型内根据第一性原理计算；不要硬编码任何目标输出。\n- 为相对增量测试选择一个小的正数下限 $\\epsilon_{\\mathrm{floor}}$ 以确保数值稳定性。\n\n您的程序不得读取任何输入或写入任何文件，并且必须仅依赖于 Python 标准库以及执行环境中指定的数值库。最终输出必须是严格符合上述格式的单行文本，其中截面值以 $\\mathrm{\\AA}^2$ 为单位并四舍五入到6位小数。", "solution": "问题陈述已经过严格的验证过程。\n\n首先，所有给定条件均被逐字提取。这些包括积分反应截面 $\\sigma(E)$、入射通道波数 $k(E)$、有效离心移动势垒 $V_{\\mathrm{eff}}^{(J)}$ 以及 Hill-Wheeler 透射概率 $P_J(E)$ 的基本方程。问题还指定了一个完整的计算协议，包括分波求和的自适应截断方案、能量网格规范以及所有必需的数值参数、容差（$\\varepsilon_{\\mathrm{rel}}$, $\\varepsilon_{\\mathrm{abs}}$）和硬性上限 $J_{\\mathrm{cap}}$。提供了四个不同的参数集用于计算，同时对物理单位、常数和输出格式有精确要求。\n\n其次，根据有效科学问题的标准对这些给定条件进行了评估。所提出的框架具有科学依据，代表了基于量子散射理论和过渡态概念的化学反应动力学中一个简化但标准的模型。使用分波和 Hill-Wheeler 近似处理势垒透射是公认的方法。该问题是适定的，提供了一套确定性且完整的指令，保证了唯一且可计算的解。求和的收敛判据定义清晰，确保了算法的终止。其语言客观且定量，提供的物理参数对于分子体系是切合实际的。未发现任何科学、逻辑或数学上的缺陷。该问题并非微不足道，因为它要求仔细实现一个数值算法，并严格注意单位的一致性。\n\n结论是该问题是**有效的**。它是自洽的、科学上合理的，并且在计算上是明确定义的。我现在将提供完整的解决方案。\n\n目标是计算激发函数 $\\sigma(E)$，它表示总反应截面对初始平动能 $E$ 的依赖关系。这将针对一个以倒抛物线势垒为特征的势能面上的三原子反应共线模型来完成。\n\n解决方案按以下原则构建：\n\n1.  **控制方程与单位一致性**：所有物理计算都将在国际单位制（SI）中执行：距离使用米，质量使用千克，时间使用秒，能量使用焦耳。所有以非国际单位制（电子伏特、埃）提供的输入参数必须首先进行转换。使用的主要常数是约化普朗克常数 $\\hbar \\approx 1.054571817 \\times 10^{-34} \\, \\mathrm{J \\cdot s}$，以及用于能量转换的基本电荷 $e \\approx 1.602176634 \\times 10^{-19} \\, \\mathrm{J/eV}$。最终以 $\\mathrm{m}^2$ 计算出的截面将使用转换关系 $1 \\, \\mathrm{\\AA} = 10^{-10} \\, \\mathrm{m}$ 转换为平方埃（$\\mathrm{\\AA}^2$）进行报告。\n\n2.  **能量离散化**：对于每个测试用例，连续能量区间 $[E_{\\min}, E_{\\max}]$ 被离散化为一个包含 $N_E$ 个点的均匀网格。将这些能量点表示为 $\\{E_n\\}$，其中 $n$ 的范围从 $0$ 到 $N_E-1$。所有计算将同时对该网格上的所有点执行，利用矢量化操作以提高计算效率。\n\n3.  **自适应分波求和**：积分截面由分波级数给出：\n    $$\n    \\sigma(E) = \\frac{\\pi}{k^2(E)} \\sum_{J=0}^{\\infty} (2J+1) P_J(E)\n    $$\n    其中 $k^2(E) = 2\\mu E / \\hbar^2$。该和是关于总角动量量子数 $J$ 的无穷级数。该级数通过截断和 $\\sum_{J=0}^{J_{\\max}}$ 来近似。截断点 $J_{\\max}$ 不是固定的，而是为每个测试用例自适应地确定。对于每个能量网格 $\\{E_n\\}$，算法按以下步骤进行：\n    \n    a. 为所有 $n$ 初始化分波和向量，$S(E_n) = 0$。\n    \n    b. 从 $J=0$ 开始迭代，直至硬性上限 $J_{\\mathrm{cap}}$。\n    \n    c. 在每次迭代中，计算依赖于 $J$ 的有效势垒高度：\n    $$\n    V_{\\mathrm{eff}}^{(J)} = V_0 + \\frac{\\hbar^2 J(J+1)}{2\\mu R_c^2}\n    $$\n    该值是一个标量，与能量无关。\n    \n    d. 使用 Hill-Wheeler 公式计算网格上所有能量点的透射概率向量 $P_J(E_n)$：\n    $$\n    P_J(E_n) = \\frac{1}{1+\\exp\\left(\\frac{2\\pi}{\\hbar \\omega_b}\\left[V_{\\mathrm{eff}}^{(J)}-E_n\\right]\\right)}\n    $$\n    \n    e. 计算当前 $J$ 对和的增量贡献：\n    $$\n    \\Delta_J(E_n) = (2J+1) P_J(E_n)\n    $$\n    \n    f. 检查收敛性。当增量 $\\Delta_J(E_n)$ 在整个能量网格上变得足够小，同时满足两个条件时，关于 $J$ 的求和终止：\n    $$\n    \\max_n \\left( \\frac{\\Delta_J(E_n)}{\\max\\{S(E_n), \\epsilon_{\\mathrm{floor}}\\}} \\right) \\le \\varepsilon_{\\mathrm{rel}}\n    $$\n    和\n    $$\n    \\max_n \\left( \\Delta_J(E_n) \\right) \\le \\varepsilon_{\\mathrm{abs}}\n    $$\n    参数 $\\epsilon_{\\mathrm{floor}}$ 是一个小的正常数，此处选择为 $10^{-30}$，以防止在求和开始时累加和 $S(E_n)$ 为零或接近零时出现除以零的情况。\n    \n    g. 如果满足收敛判据，则终止关于 $J$ 的循环。否则，将增量加到总和中，$S(E_n) \\leftarrow S(E_n) + \\Delta_J(E_n)$，然后迭代进入 $J+1$。\n\n4.  **最终截面计算**：一旦获得收敛的和 $S(E_n)$，就在每个能量点计算截面：\n    $$\n    \\sigma(E_n) = \\frac{\\pi}{k^2(E_n)} S(E_n) = \\frac{\\pi \\hbar^2}{2\\mu E_n} S(E_n)\n    $$\n    注意，对于 $E_n > 0$，波数 $k(E_n)$ 是明确定义的。问题约束确保 $E_{\\min} > 0$。\n\n5.  **输出格式化**：以 $\\mathrm{m}^2$ 为单位计算出的截面 $\\sigma(E_n)$ 被转换为 $\\mathrm{\\AA}^2$。根据指定，结果值四舍五入到6位小数。然后，所有测试用例的结果被汇总并格式化为符合问题陈述所要求的精确嵌套列表结构的单行字符串。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes converged excitation functions for a collinear triatomic reaction model.\n    \"\"\"\n    \n    # --- Physical Constants (SI units) ---\n    HBAR = 1.054571817e-34  # J·s\n    E_CHARGE = 1.602176634e-19 # J/eV\n    ANGSTROM_TO_M = 1e-10       # m/Å\n\n    # --- Test Suite of Parameter Sets ---\n    # Each tuple contains:\n    # (μ (kg), V₀ (eV), ω_b (s⁻¹), R_c (Å), E_min (eV), E_max (eV), N_E, ε_rel, ε_abs, J_cap)\n    test_cases = [\n        # Test A: happy path\n        (1.66053906660e-27, 0.200, 8.0e13, 1.60, 0.050, 0.600, 5, 1.0e-6, 1.0e-6, 2000),\n        # Test B: near-threshold, sharper barrier\n        (1.66053906660e-27, 0.050, 1.5e14, 1.50, 0.005, 0.200, 5, 1.0e-6, 1.0e-8, 2000),\n        # Test C: heavier entrance channel, high barrier\n        (3.32107813320e-27, 0.300, 1.0e14, 1.20, 0.200, 1.000, 5, 1.0e-6, 1.0e-6, 3000),\n        # Test D: broad, soft barrier, strong tunneling\n        (1.66053906660e-27, 0.120, 5.0e13, 2.00, 0.020, 0.400, 5, 1.0e-7, 1.0e-7, 2500),\n    ]\n\n    all_results = []\n    \n    for case in test_cases:\n        mu, V0_eV, omega_b, Rc_A, E_min_eV, E_max_eV, N_E, eps_rel, eps_abs, J_cap = case\n\n        # --- Unit Conversion to SI ---\n        V0_J = V0_eV * E_CHARGE\n        Rc_m = Rc_A * ANGSTROM_TO_M\n        E_min_J = E_min_eV * E_CHARGE\n        E_max_J = E_max_eV * E_CHARGE\n\n        # --- Setup Energy Grid ---\n        E_grid_J = np.linspace(E_min_J, E_max_J, N_E)\n\n        # --- Adaptive Partial-Wave Summation ---\n        S_E = np.zeros(N_E)\n        epsilon_floor = 1e-30\n        \n        # Precompute constants to improve performance inside the loop\n        centrifugal_const = (HBAR**2) / (2 * mu * Rc_m**2)\n        hw_exponent_const = (2 * np.pi) / (HBAR * omega_b)\n\n        for J in range(J_cap + 1):\n            # Calculate J-dependent effective barrier\n            V_eff_J = V0_J + centrifugal_const * J * (J + 1)\n            \n            # Calculate transmission probability vector P_J(E)\n            exponent_arg = hw_exponent_const * (V_eff_J - E_grid_J)\n            P_J_E = 1.0 / (1.0 + np.exp(exponent_arg))\n            \n            # Calculate incremental contribution vector\n            delta_J_E = (2 * J + 1) * P_J_E\n\n            # --- Convergence Check ---\n            # Check conditions only if not the first iteration (J > 0)\n            if J > 0:\n                with np.errstate(divide='ignore', invalid='ignore'):\n                    relative_increment = delta_J_E / np.maximum(S_E, epsilon_floor)\n                \n                max_rel_inc = np.max(np.nan_to_num(relative_increment))\n                max_abs_inc = np.max(delta_J_E)\n                \n                if max_rel_inc = eps_rel and max_abs_inc = eps_abs:\n                    break # Converged\n            \n            # Accumulate sum\n            S_E += delta_J_E\n        \n        # --- Final Cross Section Calculation ---\n        # k^2 = 2*mu*E/hbar^2\n        k_squared_E = (2 * mu * E_grid_J) / (HBAR**2)\n        \n        # sigma = (pi/k^2) * S\n        sigma_m2 = (np.pi / k_squared_E) * S_E\n        \n        # Convert from m^2 to Å^2\n        sigma_A2 = sigma_m2 / (ANGSTROM_TO_M**2)\n        \n        # Round to 6 decimal places and store\n        all_results.append(np.round(sigma_A2, 6).tolist())\n\n    # --- Format Output ---\n    # Construct the final string without any spaces\n    # Example: [[1.0,2.0],[3.0,4.0]]\n    result_str = \"[\" + \",\".join([f\"[{','.join(map(str, res))}]\" for res in all_results]) + \"]\"\n    print(result_str)\n\nsolve()\n```", "id": "2641875"}, {"introduction": "在从理论上构建了反应截面之后，我们现在转向如何从实验测量中确定它。实验通常测量产物的角分布，即微分散射截面 (DCS)。本练习 [@problem_id:2641892] 提供了一个机会，让你从假设的 DCS 数据出发，通过积分计算总反应截面。你还将面对一个现实世界中的复杂问题：不完整的测量会如何引入系统偏差。", "problem": "在一次固定碰撞能量 $E$ 的双分子反应散射实验中，产生了三个不同的产物通道，标记为 $f \\in \\{1,2,3\\}$。每个通道测得的微分散射截面 (DCS)，记作 $\\frac{d\\sigma_{fi}}{d\\Omega}(E,\\theta)$，围绕入射相对速度呈轴对称，并由以下综合形式给出\n$$\n\\frac{d\\sigma_{fi}}{d\\Omega}(E,\\theta)=a_f\\left[1+b_f P_1(\\cos\\theta)+c_f P_2(\\cos\\theta)\\right],\n$$\n其中 $P_\\ell$ 是 $\\ell$ 阶勒让德多项式，$\\theta$ 是散射角（以弧度为单位），且 $d\\Omega=\\sin\\theta\\,d\\theta\\,d\\phi$。参数 $a_f$、$b_f$ 和 $c_f$ 均为实常数；$a_f$ 的单位是 $\\text{\\AA}^2\\,\\text{sr}^{-1}$，而 $b_f$ 和 $c_f$ 是无量纲的。其数值为：\n- 通道 $f=1$：$a_1=0.40$, $b_1=0.30$, $c_1=0.20$。\n- 通道 $f=2$：$a_2=0.25$, $b_2=-0.10$, $c_2=0.15$。\n- 通道 $f=3$：$a_3=0.15$, $b_3=0.05$, $c_3=-0.20$。\n\n根据定义，能量为 $E$ 时的反应积分截面 (ICS)，即 $\\sigma_r(E)$，是对相应微分散射截面 (DCS) 进行立体角积分后，再对所有产物通道求和的结果。这个 $\\sigma_r(E)$ 是激发函数在所选能量 $E$ 处的值。\n\n1. 仅使用勒让德多项式的基本定义和性质，通过将每个通道的 DCS 对所有立体角进行积分，然后对 $f=1,2,3$ 求和，来计算 $\\sigma_r(E)$。\n\n2. 现假设在一个实际的探测器配置中，由于产物识别限制等原因，整个通道 $f=2$ 在实验中未被观测到，而通道 $f=1$ 和 $f=3$ 则被完全观测到。设 $\\sigma_{\\text{obs}}(E)$ 表示仅从观测到的通道重建的 ICS。将分数低估（偏差）定义为\n$$\nB \\equiv \\frac{\\sigma_r(E)-\\sigma_{\\text{obs}}(E)}{\\sigma_r(E)}.\n$$\n计算 $B$。\n\n报告两个量：以 $\\text{\\AA}^2$ 为单位的 $\\sigma_r(E)$ 和以小数形式表示的 $B$。两者均需四舍五入到四位有效数字。", "solution": "基本出发点是固定碰撞能量 $E$ 下的反应积分截面 (ICS) 的定义，即微分散射截面 (DCS) 对立体角积分后，再对所有产物通道求和。当 $d\\Omega=\\sin\\theta\\,d\\theta\\,d\\phi$ 且系统围绕入射方向呈轴对称时，我们有\n$$\n\\sigma_r(E)=\\sum_{f=1}^{3}\\int_{0}^{2\\pi}\\!\\!\\int_{0}^{\\pi}\\frac{d\\sigma_{fi}}{d\\Omega}(E,\\theta)\\,\\sin\\theta\\,d\\theta\\,d\\phi.\n$$\n对于每个通道，我们代入给定的综合形式\n$$\n\\frac{d\\sigma_{fi}}{d\\Omega}(E,\\theta)=a_f\\left[1+b_f P_1(\\cos\\theta)+c_f P_2(\\cos\\theta)\\right].\n$$\n现在我们使用勒让德多项式经过充分检验的正交性和归一化性质：\n$$\n\\int_{0}^{2\\pi}\\!\\!\\int_{0}^{\\pi}P_\\ell(\\cos\\theta)\\,\\sin\\theta\\,d\\theta\\,d\\phi=4\\pi\\,\\delta_{\\ell 0},\n$$\n其中 $\\delta_{\\ell 0}$ 是克罗内克符号。特别地，\n$$\n\\int d\\Omega\\,1=4\\pi,\\quad \\int d\\Omega\\,P_1(\\cos\\theta)=0,\\quad \\int d\\Omega\\,P_2(\\cos\\theta)=0.\n$$\n因此，对于每个通道 $f$，积分简化为\n$$\n\\sigma_f(E)=\\int d\\Omega\\,\\frac{d\\sigma_{fi}}{d\\Omega}(E,\\theta)=a_f\\left[4\\pi+b_f\\times 0+c_f\\times 0\\right]=4\\pi a_f.\n$$\n所以，总反应积分截面为\n$$\n\\sigma_r(E)=\\sum_{f=1}^{3}\\sigma_f(E)=4\\pi\\sum_{f=1}^{3}a_f.\n$$\n根据所给的数值，\n$$\n\\sum_{f=1}^{3}a_f=a_1+a_2+a_3=0.40+0.25+0.15=0.80,\n$$\n所以\n$$\n\\sigma_r(E)=4\\pi\\times 0.80=3.2\\pi.\n$$\n为了获得以 $\\text{\\AA}^2$ 为单位的数值，计算：\n$$\n\\sigma_r(E)=3.2\\pi\\approx 10.05309649\\ldots\n$$\n四舍五入到四位有效数字，结果是\n$$\n\\sigma_r(E)\\approx 10.05\\ \\text{\\AA}^2.\n$$\n\n对于偏差的计算，如果通道 $f=2$ 未被观测到，那么观测到的 ICS 是\n$$\n\\sigma_{\\text{obs}}(E)=\\sigma_1(E)+\\sigma_3(E)=4\\pi(a_1+a_3)=4\\pi(0.40+0.15)=4\\pi\\times 0.55=2.2\\pi.\n$$\n分数低估（偏差）为\n$$\nB=\\frac{\\sigma_r(E)-\\sigma_{\\text{obs}}(E)}{\\sigma_r(E)}=\\frac{3.2\\pi-2.2\\pi}{3.2\\pi}=\\frac{1.0\\pi}{3.2\\pi}=\\frac{1}{3.2}.\n$$\n数值上，\n$$\nB=\\frac{1}{3.2}=0.3125,\n$$\n该值已有四位有效数字。\n\n因此，所求的量为 $\\sigma_r(E)\\approx 10.05$ (单位 $\\text{\\AA}^2$) 和以小数表示的 $B=0.3125$，两者均满足四位有效数字的要求。", "answer": "$$\\boxed{\\begin{pmatrix}10.05  0.3125\\end{pmatrix}}$$", "id": "2641892"}, {"introduction": "激发函数是一个强大的微观量，但它的最终效用往往在于预测宏观的化学行为。这最后一个实践将弥合这一差距。从一个列表形式的激发函数（类似于前两个练习可能产生的数据）开始，你将计算热速率系数 $k(T)$ 及其不确定度 [@problem_id:2641862]。这包括执行玻尔兹曼平均，这是统计力学和化学动力学中的一个基本步骤，它将微观反应性与宏观速率联系起来。", "problem": "设计并实现一个程序，该程序根据列表形式的激发函数计算热双分子速率系数 $k(T)$ 及其传播的标准不确定度。激发函数是指反应截面 $\\sigma_r(E)$ 作为相对平动能 $E$ 的函数。热速率系数定义为，对于折合质量为 $\\mu$ 的双体碰撞，在相对速率的麦克斯韦-玻尔兹曼分布上对 $\\sigma_r(v)\\,v$ 的系综平均，其中 $E = \\tfrac{1}{2}\\mu v^2$。您的推导必须从系综平均的气体动理论定义出发，并使用相对运动的麦克斯韦-玻尔兹曼分布。然后，您必须将速率平均转换为能量积分。程序必须实现一种具有物理解释的求积方案，该方案在给定能量网格上对 $\\sigma_r(E)$ 进行分段线性插值时是精确的，并通过常数外推来处理列表范围之外的能量域：对于低于最低列表能量的区域（$E=0$），以及对于高于最高列表能量的区域（$E\\to\\infty$）。假设列表中的 $\\sigma_r(E_i)$ 的不确定度是独立的（不相关的）单标准差不确定度，并通过您的求积方案，使用线性（一阶）不确定度传播方法，将这些不确定度传播到 $k(T)$ 的不确定度中。\n\n科学与数值要求：\n- 以相对速率的麦克斯韦-玻尔兹曼分布为基本出发点，严格推导 $k(T)$ 关于 $\\sigma_r(E)$、折合质量 $\\mu$ 和玻尔兹曼常数 $k_{\\mathrm{B}}$ 的能量积分表达式。\n- 采用以下数值求积设计假设：\n  1. 在列表能量之间，于每个区间 $\\left[E_i,E_{i+1}\\right]$ 上通过线性插值来近似 $\\sigma_r(E)$。\n  2. 对于下尾部 $E\\in[0,E_0)$，通过常数值 $\\sigma_r(E_0)$ 来近似 $\\sigma_r(E)$。\n  3. 对于上尾部 $E\\in(E_N,\\infty)$，通过常数值 $\\sigma_r(E_N)$ 来近似 $\\sigma_r(E)$。\n- 在这些假设下，推导出乘以节点值 $\\sigma_r(E_i)$ 的权重，使得 $\\sigma_r(E)$ 与麦克斯韦-玻尔兹曼能量核的乘积的积分可以精确地表示为节点上的加权和，外加常数外推尾部的贡献。使用初等函数或不完全伽马函数以闭式形式表示这些权重。\n- 在独立性假设下，使用线性不确定度传播，将列表给出的 $\\sigma_r(E_i)$ 的独立不确定度 $u_i$ 传播到 $k(T)$ 上，以获得其标准不确定度 $u_k(T)$。清晰地指明用于传播的函数依赖关系。\n\n使用的物理常数和单位：\n- 使用玻尔兹曼常数 $k_{\\mathrm{B}} = 1.380649\\times 10^{-23}\\ \\mathrm{J/K}$。\n- 使用电子伏特到焦耳的转换关系 $1\\ \\mathrm{eV} = 1.602176634\\times 10^{-19}\\ \\mathrm{J}$。\n- 所有截面必须使用 $\\mathrm{m}^2$ 单位，能量使用 $\\mathrm{J}$，质量使用 $\\mathrm{kg}$，温度使用 $\\mathrm{K}$，并且速率系数 $k(T)$ 必须以 $\\mathrm{m}^3/\\mathrm{s}$ 报告。\n- 不使用角度。如果您内部使用的数学函数需要角度单位，则必须使用弧度。\n\n程序需计算的测试套件（三个独立案例）：\n- 案例A（理想情况；包含下限；覆盖范围广）：\n  - 折合质量 $\\mu = 0.5\\times 1.66053906660\\times 10^{-27}\\ \\mathrm{kg}$。\n  - 能量网格（单位：电子伏特）：$[0.00,\\ 0.05,\\ 0.10,\\ 0.20,\\ 0.40,\\ 0.80]$。\n  - 截面（单位：$\\mathrm{m}^2$）：$[0.0,\\ 1.0\\times 10^{-21},\\ 2.5\\times 10^{-21},\\ 5.0\\times 10^{-21},\\ 7.0\\times 10^{-21},\\ 8.0\\times 10^{-21}]$。\n  - 单标准差不确定度（单位：$\\mathrm{m}^2$）：$[0.0,\\ 1.0\\times 10^{-22},\\ 2.5\\times 10^{-22},\\ 5.0\\times 10^{-22},\\ 7.0\\times 10^{-22},\\ 8.0\\times 10^{-22}]$。\n  - 温度（单位：开尔文）：$[300.0,\\ 1000.0,\\ 2500.0]$。\n- 案例B（非零下限；在较低温度下双尾部均不可忽略）：\n  - 折合质量 $\\mu = 10.0\\times 1.66053906660\\times 10^{-27}\\ \\mathrm{kg}$。\n  - 能量网格（单位：电子伏特）：$[0.05,\\ 0.08,\\ 0.12,\\ 0.20,\\ 0.30]$。\n  - 截面（单位：$\\mathrm{m}^2$）：$[0.5\\times 10^{-21},\\ 1.5\\times 10^{-21},\\ 3.0\\times 10^{-21},\\ 4.0\\times 10^{-21},\\ 4.5\\times 10^{-21}]$。\n  - 单标准差不确定度（单位：$\\mathrm{m}^2$）：$[0.075\\times 10^{-21},\\ 0.225\\times 10^{-21},\\ 0.45\\times 10^{-21},\\ 0.60\\times 10^{-21},\\ 0.675\\times 10^{-21}]$。\n  - 温度（单位：开尔文）：$[150.0,\\ 300.0,\\ 600.0]$。\n- 案例C（非均匀稀疏网格；在高温下上尾部显著）：\n  - 折合质量 $\\mu = 1.5\\times 1.66053906660\\times 10^{-27}\\ \\mathrm{kg}$。\n  - 能量网格（单位：电子伏特）：$[0.02,\\ 0.07,\\ 0.15,\\ 0.50]$。\n  - 截面（单位：$\\mathrm{m}^2$）：$[0.2\\times 10^{-21},\\ 0.8\\times 10^{-21},\\ 1.2\\times 10^{-21},\\ 1.5\\times 10^{-21}]$。\n  - 单标准差不确定度（单位：$\\mathrm{m}^2$）：$[0.04\\times 10^{-21},\\ 0.16\\times 10^{-21},\\ 0.24\\times 10^{-21},\\ 0.30\\times 10^{-21}]$。\n  - 温度（单位：开尔文）：$[3000.0,\\ 6000.0,\\ 10000.0]$。\n\n程序要求：\n- 您的程序必须对每个案例和每个所列温度 $T$，使用上述推导的求积和不确定度传播方法，计算出以 $\\mathrm{m}^3/\\mathrm{s}$ 为单位的数值对 $\\left(k(T), u_k(T)\\right)$。\n- 您的程序不得读取任何输入；必须使用此处给出的常数和测试套件。\n- 最终输出格式：您的程序应生成单行输出，包含一个顶级列表和三个子列表（每个案例一个）。每个子列表必须包含 $2 n_T$ 个以 $\\mathrm{m}^3/\\mathrm{s}$ 为单位的浮点数，按 $\\left[k(T_1), u_k(T_1), k(T_2), u_k(T_2), \\dots\\right]$ 的顺序排列，文本中不含单位。例如，整体结构必须类似于 $[[\\cdots],[\\cdots],[\\cdots]]$。\n- 将 $k(T)$ 和 $u_k(T)$ 的所有答案以 $\\mathrm{m}^3/\\mathrm{s}$ 为单位表示为浮点数。", "solution": "该问题要求设计并实现一个程序，以根据列表形式的激发函数数据 $(\\sigma_r(E_i), u(\\sigma_r(E_i)))$ 计算热双分子速率系数 $k(T)$ 及其相关不确定度 $u_k(T)$。该问题在科学上是适定的，并为计算提供了所有必需的物理常数、数据以及一组明确定义的数学假设。我们将开始推导和求解。\n\n首先，我们为速率系数建立理论基础。双分子反应的热速率系数 $k(T)$ 定义为反应截面 $\\sigma_r(v)$ 与相对速率 $v$ 的乘积在温度为 $T$ 的系统相对速率的麦克斯韦-玻尔兹曼分布上的平均值。对于折合质量为 $\\mu$ 的粒子对，其相对速率 $v$ 的分布由下式给出：\n$$ f(v) dv = 4\\pi \\left( \\frac{\\mu}{2\\pi k_B T} \\right)^{3/2} v^2 \\exp\\left( -\\frac{\\mu v^2}{2 k_B T} \\right) dv $$\n其中 $k_B$ 是玻尔兹曼常数。速率系数是系综平均：\n$$ k(T) = \\langle \\sigma_r(v) v \\rangle = \\int_0^\\infty (\\sigma_r(v) v) f(v) dv $$\n代入分布 $f(v)$，我们得到：\n$$ k(T) = 4\\pi \\left( \\frac{\\mu}{2\\pi k_B T} \\right)^{3/2} \\int_0^\\infty \\sigma_r(v) v^3 \\exp\\left( -\\frac{\\mu v^2}{2 k_B T} \\right) dv $$\n为求解此式，我们将积分变量从速率 $v$ 转换为相对平动能 $E$。它们的关系是 $E = \\frac{1}{2}\\mu v^2$，这意味着 $v = \\sqrt{2E/\\mu}$ 且 $dv = (1/\\sqrt{2\\mu E}) dE$。通过此变换，$v^3 dv$ 项变为：\n$$ v^3 dv = \\left(\\frac{2E}{\\mu}\\right)^{3/2} \\frac{dE}{\\sqrt{2\\mu E}} = \\frac{2\\sqrt{2} E^{3/2}}{\\mu^{3/2}} \\frac{dE}{\\sqrt{2\\mu} E^{1/2}} = \\frac{2E}{\\mu^2} dE $$\n指数项变为 $\\exp(-E/k_B T)$。将这些代入 $k(T)$ 的表达式并化简前置因子，得到：\n$$ k(T) = 4\\pi \\left( \\frac{\\mu}{2\\pi k_B T} \\right)^{3/2} \\int_0^\\infty \\sigma_r(E) \\frac{2E}{\\mu^2} \\exp\\left( -\\frac{E}{k_B T} \\right) dE $$\n$$ k(T) = \\left( \\frac{8}{\\pi \\mu (k_B T)^3} \\right)^{1/2} \\int_0^\\infty \\sigma_r(E) E \\exp\\left( -\\frac{E}{k_B T} \\right) dE $$\n为方便起见，我们定义 $\\beta = (k_B T)^{-1}$。速率系数的最终表达式为：\n$$ k(T) = \\sqrt{\\frac{8}{\\pi \\mu}} \\beta^{3/2} \\int_0^\\infty \\sigma_r(E) E e^{-\\beta E} dE $$\n问题的核心是使用特定的求积法则来计算该积分。该法则是基于激发函数 $\\sigma_r(E)$ 的分段模型，该模型是根据给定的 $N+1$ 个数据点 $(E_i, \\sigma_i)$（$i=0, \\dots, N$）构建的。\n该模型假设：\n1. 对于 $E \\in [0, E_0)$，$\\sigma_r(E) = \\sigma_0$。\n2. 对于 $E \\in [E_i, E_{i+1}]$，$\\sigma_r(E)$ 通过在 $(\\sigma_i, E_i)$ 和 $(\\sigma_{i+1}, E_{i+1})$ 之间进行线性插值得到。\n3. 对于 $E \\in (E_N, \\infty)$，$\\sigma_r(E) = \\sigma_N$。\n\n$\\sigma_r(E)$ 的这个分段模型可以表示为基函数 $\\phi_j(E)$ 的线性组合：\n$$ \\sigma_r(E) = \\sum_{j=0}^{N} \\sigma_j \\phi_j(E) $$\n基函数 $\\phi_j(E)$ 在 $E=E_j$ 处为 $1$，在所有其他节点 $E_k$ ($k \\neq j$) 处为 $0$。根据插值和外推规则，基函数为：\n- 对于内部节点 $j \\in \\{1, \\dots, N-1\\}$：\n$$ \\phi_j(E) = \\begin{cases} (E - E_{j-1})/(E_j - E_{j-1})  \\text{若 } E \\in [E_{j-1}, E_j] \\\\ (E_{j+1} - E)/(E_{j+1} - E_j)  \\text{若 } E \\in (E_j, E_{j+1}] \\\\ 0  \\text{其他情况} \\end{cases} $$\n- 对于第一个节点 $j=0$：\n$$ \\phi_0(E) = \\begin{cases} 1  \\text{若 } E \\in [0, E_0) \\\\ (E_1 - E)/(E_1 - E_0)  \\text{若 } E \\in [E_0, E_1] \\\\ 0  \\text{其他情况} \\end{cases} $$\n- 对于最后一个节点 $j=N$：\n$$ \\phi_N(E) = \\begin{cases} (E - E_{N-1})/(E_N - E_{N-1})  \\text{若 } E \\in [E_{N-1}, E_N] \\\\ 1  \\text{若 } E \\in (E_N, \\infty) \\\\ 0  \\text{其他情况} \\end{cases} $$\n将此展开式代入 $k(T)$ 的积分中，我们可以将速率系数表示为节点截面 $\\sigma_j$ 的加权和：\n$$ k(T) = \\sqrt{\\frac{8}{\\pi \\mu}} \\beta^{3/2} \\sum_{j=0}^{N} \\sigma_j \\int_0^\\infty \\phi_j(E) E e^{-\\beta E} dE = \\sum_{j=0}^{N} C \\cdot W_j \\cdot \\sigma_j $$\n其中 $C = \\sqrt{8/(\\pi\\mu)}\\beta^{3/2}$ 是一个常数因子，权重 $W_j$ 定义为：\n$$ W_j = \\int_0^\\infty \\phi_j(E) E e^{-\\beta E} dE $$\n这些权重可以通过在 $\\phi_j(E)$ 非零的区间上积分来计算。这些积分涉及形如 $\\int E e^{-\\beta E} dE$ 和 $\\int E^2 e^{-\\beta E} dE$ 的项。我们定义相应的不定积分（原函数）：\n$$ P_1(E; \\beta) = \\int E e^{-\\beta E} dE = -\\frac{e^{-\\beta E}}{\\beta^2}(\\beta E + 1) $$\n$$ P_2(E; \\beta) = \\int E^2 e^{-\\beta E} dE = -\\frac{e^{-\\beta E}}{\\beta^3}(\\beta^2 E^2 + 2\\beta E + 2) $$\n以及在区间 $[a, b]$ 上的定积分：\n$$ J_1(a, b; \\beta) = \\int_a^b E e^{-\\beta E} dE = P_1(b; \\beta) - P_1(a; \\beta) $$\n$$ J_2(a, b; \\beta) = \\int_a^b E^2 e^{-\\beta E} dE = P_2(b; \\beta) - P_2(a; \\beta) $$\n使用这些定义，权重 $W_j$ 计算如下（令 $\\Delta E_i = E_{i+1} - E_i$）：\n- 对于 $j=0$：\n$$ W_0 = \\int_0^{E_0} E e^{-\\beta E} dE + \\int_{E_0}^{E_1} \\frac{E_1-E}{\\Delta E_0} E e^{-\\beta E} dE = J_1(0, E_0) + \\frac{E_1 J_1(E_0, E_1) - J_2(E_0, E_1)}{\\Delta E_0} $$\n- 对于 $j \\in \\{1, \\dots, N-1\\}$：\n$$ W_j = \\int_{E_{j-1}}^{E_j} \\frac{E-E_{j-1}}{\\Delta E_{j-1}} E e^{-\\beta E} dE + \\int_{E_j}^{E_{j+1}} \\frac{E_{j+1}-E}{\\Delta E_j} E e^{-\\beta E} dE $$\n$$ W_j = \\frac{J_2(E_{j-1}, E_j) - E_{j-1} J_1(E_{j-1}, E_j)}{\\Delta E_{j-1}} + \\frac{E_{j+1} J_1(E_j, E_{j+1}) - J_2(E_j, E_{j+1})}{\\Delta E_j} $$\n- 对于 $j=N$：\n$$ W_N = \\int_{E_{N-1}}^{E_N} \\frac{E-E_{N-1}}{\\Delta E_{N-1}} E e^{-\\beta E} dE + \\int_{E_N}^\\infty E e^{-\\beta E} dE = \\frac{J_2(E_{N-1}, E_N) - E_{N-1} J_1(E_{N-1}, E_N)}{\\Delta E_{N-1}} + J_1(E_N, \\infty) $$\n$J_1(E_N, \\infty)$ 的值为 $(1/\\beta^2)(1+\\beta E_N)e^{-\\beta E_N}$。如果 $E_0=0$（如案例A中），则 $J_1(0, E_0)$ 项为零。\n\n接下来，我们处理不确定度传播问题。速率系数 $k(T)$ 是输入截面 $\\sigma_j$ 的线性函数，$k(T) = \\sum_{j=0}^{N} c_j \\sigma_j$，其中系数为 $c_j = C \\cdot W_j$。问题指出不确定度 $u_j = u(\\sigma_j)$ 是相互独立的。根据独立变量线性组合的不确定度传播定律，结果的方差是输入方差的加权和：\n$$ u_k(T)^2 = \\sum_{j=0}^{N} \\left(\\frac{\\partial k}{\\partial \\sigma_j}\\right)^2 u_j^2 $$\n偏导数就是 $\\partial k/\\partial \\sigma_j = c_j = C \\cdot W_j$。因此，速率系数的标准不确定度的平方是：\n$$ u_k(T)^2 = \\sum_{j=0}^{N} (C \\cdot W_j)^2 u_j^2 = C^2 \\sum_{j=0}^{N} W_j^2 u_j^2 $$\n标准不确定度为 $u_k(T) = \\sqrt{u_k(T)^2}$。\n\n程序实现将使用推导出的公式计算每个温度 $T$ 的权重 $W_j$。然后它将通过对节点贡献求和来计算 $k(T)$ 和 $u_k(T)$。所有计算均使用国际单位制（SI），输入能量从电子伏特转换为焦耳。物理常数按规定使用。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy import ...\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases and print the results.\n    \"\"\"\n    \n    # Physical and mathematical constants\n    KB_J_K = 1.380649e-23  # Boltzmann constant in J/K\n    EV_TO_J = 1.602176634e-19  # Electronvolt to Joule conversion\n\n    # Test cases from the problem statement\n    test_cases = [\n        # Case A\n        {\n            \"mu\": 0.5 * 1.66053906660e-27,\n            \"E_eV\": np.array([0.00, 0.05, 0.10, 0.20, 0.40, 0.80]),\n            \"sigma\": np.array([0.0, 1.0e-21, 2.5e-21, 5.0e-21, 7.0e-21, 8.0e-21]),\n            \"u_sigma\": np.array([0.0, 1.0e-22, 2.5e-22, 5.0e-22, 7.0e-22, 8.0e-22]),\n            \"T_K\": np.array([300.0, 1000.0, 2500.0]),\n        },\n        # Case B\n        {\n            \"mu\": 10.0 * 1.66053906660e-27,\n            \"E_eV\": np.array([0.05, 0.08, 0.12, 0.20, 0.30]),\n            \"sigma\": np.array([0.5e-21, 1.5e-21, 3.0e-21, 4.0e-21, 4.5e-21]),\n            \"u_sigma\": np.array([0.075e-21, 0.225e-21, 0.45e-21, 0.60e-21, 0.675e-21]),\n            \"T_K\": np.array([150.0, 300.0, 600.0]),\n        },\n        # Case C\n        {\n            \"mu\": 1.5 * 1.66053906660e-27,\n            \"E_eV\": np.array([0.02, 0.07, 0.15, 0.50]),\n            \"sigma\": np.array([0.2e-21, 0.8e-21, 1.2e-21, 1.5e-21]),\n            \"u_sigma\": np.array([0.04e-21, 0.16e-21, 0.24e-21, 0.30e-21]),\n            \"T_K\": np.array([3000.0, 6000.0, 10000.0]),\n        },\n    ]\n\n    # --- Helper functions for integral calculations ---\n    \n    # Primitive of E * exp(-beta * E)\n    def P1(E, beta):\n        if E == float('inf'):\n            return 0.0\n        # For large beta*E, exp(-beta*E) underflows to 0\n        if beta * E > 700:\n            return 0.0\n        return -np.exp(-beta * E) / beta**2 * (beta * E + 1.0)\n\n    # Primitive of E^2 * exp(-beta * E)\n    def P2(E, beta):\n        if E == float('inf'):\n            return 0.0\n        if beta * E > 700:\n            return 0.0\n        return -np.exp(-beta * E) / beta**3 * ((beta * E)**2 + 2.0 * beta * E + 2.0)\n\n    # Definite integral of E * exp(-beta * E) from E_a to E_b\n    def J1(E_a, E_b, beta):\n        return P1(E_b, beta) - P1(E_a, beta)\n\n    # Definite integral of E^2 * exp(-beta * E) from E_a to E_b\n    def J2(E_a, E_b, beta):\n        return P2(E_b, beta) - P2(E_a, beta)\n\n    def calculate_rate_and_uncertainty(mu, E_J, sigma, u_sigma, T):\n        \"\"\"\n        Computes k(T) and u_k(T) for a single temperature.\n        \"\"\"\n        beta = 1.0 / (KB_J_K * T)\n        N = len(E_J) - 1\n        weights = np.zeros(N + 1)\n\n        # Calculate quadrature weights W_j\n        # Weight W_0\n        delta_E_0 = E_J[1] - E_J[0] if N > 0 else 0\n        term1_W0 = J1(0.0, E_J[0], beta)\n        term2_W0 = 0.0\n        if delta_E_0 > 0:\n            term2_W0 = (E_J[1] * J1(E_J[0], E_J[1], beta) - J2(E_J[0], E_J[1], beta)) / delta_E_0\n        weights[0] = term1_W0 + term2_W0\n\n        # Weights W_j for j = 1 to N-1\n        for j in range(1, N):\n            delta_E_prev = E_J[j] - E_J[j-1]\n            delta_E_next = E_J[j+1] - E_J[j]\n            term1_Wj = 0.0\n            if delta_E_prev > 0:\n                term1_Wj = (J2(E_J[j-1], E_J[j], beta) - E_J[j-1] * J1(E_J[j-1], E_J[j], beta)) / delta_E_prev\n            term2_Wj = 0.0\n            if delta_E_next > 0:\n                term2_Wj = (E_J[j+1] * J1(E_J[j], E_J[j+1], beta) - J2(E_J[j], E_J[j+1], beta)) / delta_E_next\n            weights[j] = term1_Wj + term2_Wj\n\n        # Weight W_N\n        if N > 0:\n            delta_E_last = E_J[N] - E_J[N-1]\n            term1_WN = 0.0\n            if delta_E_last > 0:\n                term1_WN = (J2(E_J[N-1], E_J[N], beta) - E_J[N-1] * J1(E_J[N-1], E_J[N], beta)) / delta_E_last\n            term2_WN = J1(E_J[N], float('inf'), beta)\n            weights[N] = term1_WN + term2_WN\n        elif N == 0: # Only one point in grid\n            weights[0] = J1(0, float('inf'), beta)\n\n        # Combine terms to get rate coefficient and its uncertainty\n        I = np.sum(weights * sigma)\n        C = np.sqrt(8.0 / (np.pi * mu)) * (beta**1.5)\n        \n        k_T = C * I\n        \n        u_k_T_sq = C**2 * np.sum((weights**2) * (u_sigma**2))\n        u_k_T = np.sqrt(u_k_T_sq)\n        \n        return k_T, u_k_T\n\n    all_results_str = []\n    for case in test_cases:\n        mu = case[\"mu\"]\n        E_eV = case[\"E_eV\"]\n        sigma = case[\"sigma\"]\n        u_sigma = case[\"u_sigma\"]\n        T_K_list = case[\"T_K\"]\n        \n        # Convert energy grid to SI units (Joules)\n        E_J = E_eV * EV_TO_J\n        \n        case_results = []\n        for T in T_K_list:\n            k, u_k = calculate_rate_and_uncertainty(mu, E_J, sigma, u_sigma, T)\n            case_results.append(f\"{k:.12e}\")\n            case_results.append(f\"{u_k:.12e}\")\n            \n        all_results_str.append(f\"[{','.join(case_results)}]\")\n    \n    # Final print statement in the exact required format\n    print(f\"[{','.join(all_results_str)}]\")\n\nsolve()\n```", "id": "2641862"}]}