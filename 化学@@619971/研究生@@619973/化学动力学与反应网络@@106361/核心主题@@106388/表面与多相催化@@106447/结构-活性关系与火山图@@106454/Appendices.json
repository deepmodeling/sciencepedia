{"hands_on_practices": [{"introduction": "火山图的形成源于催化循环中不同基本步骤之间的动力学竞争。这个练习将带你深入探讨一个经典的Langmuir-Hinshelwood机理，帮助你理解火山图两侧（弱吸附区和强吸附区）的动力学本质。通过分析表观活化能如何由吸附焓和表面反应能垒共同构成，你将学会如何将宏观测量的动力学参数与微观的基本步骤联系起来，这是掌握结构-活性关系的核心技能之一。[@problem_id:2680778]", "problem": "一个催化反应网络的转换频率与单个描述符 $x$ 之间呈现火山型关系，该描述符 $x$ 参数化了关键反应物 $A$ 的吸附焓大小，其中更大的 $x$ 值表示更强的吸附。考虑一个最简的Langmuir–Hinshelwood机理\nA(g) + * ⇌ A*\nA* → P(g) + *\n其中表面反应步骤的能垒相对于 $x$ 遵循斜率为 $0<\\alpha<1$ 的Brønsted–Evans–Polanyi (BEP)关系。设吸附焓为 $\\Delta H_{\\mathrm{ads}}(x)=-x$ (放热)，并假设基元反应速率遵循标准过渡态理论，吸附遵循平衡热力学。$A$ 的表面覆盖度（记为 $\\theta_A$）遵循理想的Langmuir统计，具有单一类型的活性位点且无横向相互作用。$A$ 的压力固定为 $p_A$。\n\n假设你计算了带有温度依赖性的基本物理量（特别是表面反应速率常数 $k_{\\mathrm{sr}}$ 和吸附平衡常数 $K_{\\mathrm{ads}}$）的速率控制度 $X_i(x)$。你发现在火山曲线的弱吸附侧（$x$ 较小），转换频率对 $k_{\\mathrm{sr}}$ 和 $K_{\\mathrm{ads}}$ 都很敏感；而在强吸附侧（$x$ 较大），对 $K_{\\mathrm{ads}}$ 的敏感性变得可以忽略不计，而对 $k_{\\mathrm{sr}}$ 的敏感性占主导地位。\n\n仅使用过渡态理论、Arrhenius分析、吸附平衡热力学、位点平衡的定义，以及速率控制度的定义 $X_i(x)=\\partial \\ln r/\\partial \\ln q_i$（其中 $q_i\\in\\{k_{\\mathrm{sr}},K_{\\mathrm{ads}}\\}$），推断以下哪个陈述正确地解释了为什么在火山曲线的任一侧，将Arrhenius数据拟合到一个表观的单一速控步骤（RDS）会得到作为 $x$ 函数的不同表观活化能和指前因子。\n\nA. 在火山曲线的两侧，通过Arrhenius拟合提取的表观活化能等于表面反应步骤的微观能垒，因此表观参数的任何差异都必定完全源于实验噪声。\n\nB. 在弱吸附侧，测得的表观活化能同时包含了表面反应能垒和通过 $\\Delta H_{\\mathrm{ads}}(x)$ 体现的吸附热化学的贡献，其对 $x$ 的依赖关系形式为 $E_{\\mathrm{app}}(x)\\approx E_0+\\alpha x - x$，而在强吸附侧，它简化为表面反应的能垒 $E_{\\mathrm{app}}(x)\\approx E_0+\\alpha x$。相应地，在弱吸附侧，表观指前因子累积了来自 $k_{\\mathrm{sr}}$ 和 $K_{\\mathrm{ads}}$ 的乘积贡献，但在强吸附侧，它坍缩为仅与 $k_{\\mathrm{sr}}$ 相关的指前因子。\n\nC. 在火山曲线的两侧，表观活化能和指前因子都与描述符 $x$ 无关，因为单一速控步骤的概念将所有结构敏感性都吸收到了一个不随 $x$ 变化的单一基元能垒中。\n\nD. 在强吸附侧，更强的吸附必然会降低表观活化能，因为表面已饱和（$\\theta_A\\approx 1$），并且吸附熵主导了速率的温度依赖性。\n\nE. 两侧的表观活化能可能存在差异，但表观指前因子在两侧必须相同，因为过渡态理论的指前因子项 $\\left(k_B T/h\\right)$ 是普适的，因此对机理不敏感。\n\n选择唯一的最佳选项。", "solution": "首先需要确定问题陈述的有效性。\n\n**步骤1：提取已知条件**\n- 系统是一个催化反应网络，其转换频率（$r$）和描述符 $x$ 之间呈现火山型关系。\n- 描述符 $x$ 表示反应物 $A$ 吸附焓的大小；更大的 $x$ 意味着更强的吸附。\n- 机理是Langmuir–Hinshelwood类型：\n    1.  A(g) + * ⇌ A*\n    2.  A* → P(g) + *\n- 表面反应步骤的活化能垒相对于 $x$ 遵循斜率为 $0 < \\alpha < 1$ 的Brønsted–Evans–Polanyi (BEP) 关系。\n- 吸附焓由 $\\Delta H_{\\mathrm{ads}}(x) = -x$ 给出。\n- 理论框架包括标准过渡态理论（TST）、平衡热力学，以及具有单一活性位点类型且无横向相互作用的理想Langmuir吸附动力学。\n- $A$ 的压力 $p_A$ 是恒定的。\n- 速率控制度的定义为 $X_i(x) = \\partial \\ln r / \\partial \\ln q_i$，其中 $q_i \\in \\{k_{\\mathrm{sr}}, K_{\\mathrm{ads}}\\}$。\n- 在弱吸附侧（$x$ 较小），$r$ 对表面反应速率常数 $k_{\\mathrm{sr}}$ 和吸附平衡常数 $K_{\\mathrm{ads}}$ 都敏感。\n- 在强吸附侧（$x$ 较大），对 $K_{\\mathrm{ads}}$ 的敏感性可以忽略不计，而对 $k_{\\mathrm{sr}}$ 的敏感性占主导地位。\n- 问题是为火山曲线两侧的Arrhenius拟合为何会产生作为 $x$ 的函数的不同表观活化能和指前因子提供合理解释。\n\n**步骤2：问题陈述的有效性验证**\n问题定义明确且科学上合理。它描述了非均相催化中的一个经典模型（Sabatier原理和火山图），使用了诸如Langmuir-Hinshelwood机理、BEP关系和表观活化能概念等标准理论结构。所提供的信息是自洽的，足以推导出系统在指定极限情况下的行为。基于速率控制度来区分弱吸附和强吸附区域是动力学分析中一种标准而严谨的方法。这个问题并非无足轻重，需要正确应用化学动力学的基本原理。\n\n**步骤3：结论**\n问题陈述是**有效的**。我们继续进行求解。\n\n**表观动力学参数的推导**\n\n整个反应的速率，以转换频率（$r$）表示，由表面反应步骤的速率决定，即 $r = k_{\\mathrm{sr}} \\theta_A$，其中 $k_{\\mathrm{sr}}$ 是表面反应的速率常数，$\\theta_A$ 是物种 $A$ 的表面覆盖度。\n\n在吸附步骤 A(g) + * ⇌ A* 处于准平衡的假设下，覆盖度 $\\theta_A$ 由Langmuir等温线描述：\n$$ \\theta_A = \\frac{K_{\\mathrm{ads}} p_A}{1 + K_{\\mathrm{ads}} p_A} $$\n其中 $K_{\\mathrm{ads}}$ 是吸附平衡常数，$p_A$ 是反应物 $A$ 的分压。\n\n将 $\\theta_A$ 的表达式代入速率方程，得到完整的速率定律：\n$$ r = k_{\\mathrm{sr}} \\frac{K_{\\mathrm{ads}} p_A}{1 + K_{\\mathrm{ads}} p_A} $$\n$k_{\\mathrm{sr}}$ 和 $K_{\\mathrm{ads}}$ 的温度依赖性分别由Arrhenius方程和van 't Hoff方程决定。\n根据过渡态理论和给定的BEP关系，表面反应的活化能为 $E_a(x) = E_0 + \\alpha x$，其中 $E_0$ 是某个基准能量。速率常数为：\n$$ k_{\\mathrm{sr}}(x, T) = A_{\\mathrm{sr}} \\exp\\left(-\\frac{E_a(x)}{RT}\\right) = A_{\\mathrm{sr}} \\exp\\left(-\\frac{E_0 + \\alpha x}{RT}\\right) $$\n其中 $A_{\\mathrm{sr}}$ 是表面反应的指前因子。\n\n根据平衡热力学，吸附平衡常数与吸附焓 $\\Delta H_{\\mathrm{ads}}(x) = -x$ 相关。\n$$ K_{\\mathrm{ads}}(x, T) = K_{\\mathrm{ads},0} \\exp\\left(-\\frac{\\Delta H_{\\mathrm{ads}}(x)}{RT}\\right) = K_{\\mathrm{ads},0} \\exp\\left(\\frac{x}{RT}\\right) $$\n其中 $K_{\\mathrm{ads},0}$ 包含了对吸附自由能的熵贡献。\n\n表观活化能 $E_{\\mathrm{app}}$ 由总速率 $r$ 的温度依赖性定义：\n$$ E_{\\mathrm{app}} = -R \\frac{\\partial \\ln r}{\\partial(1/T)} $$\n使用完整的速率表达式，我们有：\n$$ \\ln r = \\ln k_{\\mathrm{sr}} + \\ln(K_{\\mathrm{ads}} p_A) - \\ln(1 + K_{\\mathrm{ads}} p_A) $$\n对 $1/T$ 求导得出：\n$$ \\frac{\\partial \\ln r}{\\partial(1/T)} = \\frac{\\partial \\ln k_{\\mathrm{sr}}}{\\partial(1/T)} + \\frac{\\partial \\ln K_{\\mathrm{ads}}}{\\partial(1/T)} - \\frac{p_A}{1 + K_{\\mathrm{ads}} p_A} \\frac{\\partial K_{\\mathrm{ads}}}{\\partial(1/T)} $$\n我们知道 $\\frac{\\partial \\ln k_{\\mathrm{sr}}}{\\partial(1/T)} = -E_a(x)/R$ 和 $\\frac{\\partial \\ln K_{\\mathrm{ads}}}{\\partial(1/T)} = -\\Delta H_{\\mathrm{ads}}(x)/R$。并且，$\\frac{\\partial K_{\\mathrm{ads}}}{\\partial(1/T)} = K_{\\mathrm{ads}} (-\\Delta H_{\\mathrm{ads}}(x)/R)$。\n代入这些关系得到：\n$$ \\frac{\\partial \\ln r}{\\partial(1/T)} = -\\frac{E_a(x)}{R} - \\frac{\\Delta H_{\\mathrm{ads}}(x)}{R} - \\frac{K_{\\mathrm{ads}} p_A}{1 + K_{\\mathrm{ads}} p_A} \\left(-\\frac{\\Delta H_{\\mathrm{ads}}(x)}{R}\\right) $$\n注意到 $\\theta_A = \\frac{K_{\\mathrm{ads}} p_A}{1 + K_{\\mathrm{ads}} p_A}$：\n$$ E_{\\mathrm{app}} = E_a(x) + \\Delta H_{\\mathrm{ads}}(x) - \\theta_A \\Delta H_{\\mathrm{ads}}(x) = E_a(x) + (1 - \\theta_A) \\Delta H_{\\mathrm{ads}}(x) $$\n代入 $E_a(x) = E_0 + \\alpha x$ 和 $\\Delta H_{\\mathrm{ads}}(x) = -x$：\n$$ E_{\\mathrm{app}}(x) = (E_0 + \\alpha x) + (1 - \\theta_A)(-x) = E_0 + \\alpha x - x(1-\\theta_A) $$\n\n我们现在分析问题中描述的两种极限情况。\n\n**情况1：弱吸附侧（$x$ 较小）**\n较小的 $x$ 意味着弱吸附，因此 $K_{\\mathrm{ads}}$ 很小，且 $K_{\\mathrm{ads}} p_A \\ll 1$。\n在此极限下，$\\theta_A \\approx K_{\\mathrm{ads}} p_A \\to 0$。\n速率表达式简化为 $r \\approx k_{\\mathrm{sr}} (K_{\\mathrm{ads}} p_A)$。这与问题陈述中速率对 $k_{\\mathrm{sr}}$ 和 $K_{\\mathrm{ads}}$ 都敏感（$X_{k_{\\mathrm{sr}}} \\approx 1, X_{K_{\\mathrm{ads}}} \\approx 1$）的说法一致。\n表观活化能变为：\n$$ E_{\\mathrm{app}}(x) \\approx E_a(x) + (1-0)\\Delta H_{\\mathrm{ads}}(x) = E_a(x) + \\Delta H_{\\mathrm{ads}}(x) $$\n$$ E_{\\mathrm{app}}(x) \\approx (E_0 + \\alpha x) + (-x) = E_0 + (\\alpha-1)x $$\n相应的速率表达式是 $r \\approx (A_{\\mathrm{sr}} e^{-(E_0+\\alpha x)/RT}) (K_{\\mathrm{ads},0} e^{x/RT} p_A) = (A_{\\mathrm{sr}} K_{\\mathrm{ads},0} p_A) e^{-(E_0+(\\alpha-1)x)/RT}$。\n因此，表观指前因子为 $A_{\\mathrm{app}} \\approx A_{\\mathrm{sr}} K_{\\mathrm{ads},0} p_A$，这是一个复合项。\n\n**情况2：强吸附侧（$x$ 较大）**\n较大的 $x$ 意味着强吸附，因此 $K_{\\mathrm{ads}}$ 很大，且 $K_{\\mathrm{ads}} p_A \\gg 1$。\n在此极限下，$\\theta_A = \\frac{K_{\\mathrm{ads}} p_A}{1 + K_{\\mathrm{ads}} p_A} \\to 1$。表面达到饱和。\n速率表达式简化为 $r \\approx k_{\\mathrm{sr}}(1) = k_{\\mathrm{sr}}$。这与问题陈述中速率对 $K_{\\mathrm{ads}}$ 的敏感性可以忽略不计，而对 $k_{\\mathrm{sr}}$ 的敏感性占主导（$X_{k_{\\mathrm{sr}}} \\approx 1, X_{K_{\\mathrm{ads}}} \\approx 0$）的说法一致。\n表观活化能变为：\n$$ E_{\\mathrm{app}}(x) \\approx E_a(x) + (1-1)\\Delta H_{\\mathrm{ads}}(x) = E_a(x) $$\n$$ E_{\\mathrm{app}}(x) \\approx E_0 + \\alpha x $$\n速率表达式为 $r \\approx k_{\\mathrm{sr}} = A_{\\mathrm{sr}} e^{-(E_0+\\alpha x)/RT}$。\n因此，表观指前因子为 $A_{\\mathrm{app}} \\approx A_{\\mathrm{sr}}$，这恰好是表面反应的指前因子。\n\n**选项评估**\n\nA. **不正确**。推导表明，只有在强吸附侧 $E_{\\mathrm{app}}$ 才等于微观能垒 $E_a(x)$。在弱吸附侧，它包含了吸附焓的贡献，即 $E_{\\mathrm{app}}(x) \\approx E_a(x) + \\Delta H_{\\mathrm{ads}}(x)$。这种差异是反应动力学的系统性结果，而非噪声。\n\nB. **正确**。该陈述精确总结了上述推导结果。两侧 $E_{\\mathrm{app}}(x)$ 的表达式与我们的推导完全一致。关于表观指前因子如何构成的描述也与我们的发现相符（弱吸附侧为 $A_{\\mathrm{app}} \\approx A_{\\mathrm{sr}} K_{\\mathrm{ads},0} p_A$，而强吸附侧为 $A_{\\mathrm{app}} \\approx A_{\\mathrm{sr}}$）。\n\nC. **不正确**。这在多个层面上都是错误的。描述符 $x$ 是结构敏感性的来源。BEP关系 $E_a(x) = E_0 + \\alpha x$ 明确指出基元能垒依赖于 $x$。我们推导出的表观活化能 $E_0+(\\alpha-1)x$ 和 $E_0+\\alpha x$ 都依赖于 $x$。\n\nD. **不正确**。在强吸附侧， $E_{\\mathrm{app}}(x) \\approx E_0 + \\alpha x$。由于 $\\alpha > 0$，$x$ 的增加（更强的吸附）会*增加*表观活化能。关于吸附熵的推理也是错误的；在此极限下，速率的温度依赖性由表面反应的活化能 $E_a(x)$ 决定，而非吸附热力学。\n\nE. **不正确**。如推导所示，表观指前因子在两种情况下明显不同。$k_B T/h$ 项的普适性与此无关，因为完整的指前因子 $A_{\\mathrm{app}}$ 是一个复合量，包括熵项，并且在弱吸附情况下还包括压力。将整个表观指前因子等同于普适的TST项是严重的错误。", "answer": "$$\\boxed{B}$$", "id": "2680778"}, {"introduction": "理论模型的力量在于其预测能力，但这首先需要我们从数据中构建和验证模型。本实践将指导你完成一个典型的计算催化学工作流程：从一组计算出的吸附能数据出发，通过线性回归建立标度关系，并进一步构建火山图模型来预测催化活性。至关重要的是，本练习还引入了不确定性传播的概念，让你能够量化因数据拟合而产生的模型预测不确定性，这是严谨科学研究中不可或缺的一环。[@problem_id:2680827]", "problem": "给定一个结构-活性建模任务，该任务将吸附能的标度关系与一个简单的双势垒火山模型联系起来以描述催化活性。考虑两种吸附中间体，其物种指数为 $i \\in \\{A, B\\}$，其吸附能 $\\Delta E_i$ 通过未知线性标度关系 $\\Delta E_i = a_i \\Delta E_{\\text{ref}} + b_i$ 与单个描述符 $\\Delta E_{\\text{ref}}$ 线性相关。您的基本假设是：(i) 线性标度关系源于对计算数据集的最小二乘拟合，因此必须从有限样本中估计；(ii) 使用线性最小二乘估计量；(iii) 决定系数 $R^2$ 由常规方差分解定义；(iv) 不确定度根据一阶高斯-牛顿线性化（估计值的一阶泰勒展开）进行传播。活性由两个有效势垒建模，这两个势垒通过 Bronsted–Evans–Polanyi (BEP) 型关系中的常数与吸附物能量线性相关。具体而言，两个控制势垒为 $E_{\\text{bar},1}(\\Delta E_{\\text{ref}}) = \\kappa_1 + \\lambda_1 \\Delta E_A$ 和 $E_{\\text{bar},2}(\\Delta E_{\\text{ref}}) = \\kappa_2 + \\lambda_2 \\Delta E_B$。火山顶点描述符值 $\\Delta E_{\\text{ref}}^{\\star}$ 定义为满足 $E_{\\text{bar},1}(\\Delta E_{\\text{ref}}^{\\star}) = E_{\\text{bar},2}(\\Delta E_{\\text{ref}}^{\\star})$ 的点。所有能量均以电子伏特 (eV) 为单位，您最终的能量数值答案必须以 eV 表示。决定系数 $R^2$ 是无量纲的，必须表示为小数。\n\n对于每个测试用例，您的任务是：\n- 使用普通最小二乘法，从给定的有限数据集 $\\{(\\Delta E_{\\text{ref}}^j, \\Delta E_i^j)\\}_j$ 中，为 $i \\in \\{A,B\\}$ 估计 $\\Delta E_i = a_i \\Delta E_{\\text{ref}} + b_i$ 中的斜率 $a_i$ 和截距 $b_i$。\n- 对每次拟合，仅使用基于平方和的基本定义来计算决定系数 $R^2$。\n- 使用线性回归得到的拟合参数及其估计的协方差矩阵，通过一阶高斯误差传播，将参数不确定度传播到顶点描述符 $\\Delta E_{\\text{ref}}^{\\star}$，其中假定两次线性回归在给定描述符值的条件下是统计独立的。\n- 对于每个测试用例，报告包含以下结果的集合：两个 $R^2$ 值（分别对应 A 和 B）、顶点描述符 $\\Delta E_{\\text{ref}}^{\\star}$（单位 eV），以及 $\\Delta E_{\\text{ref}}^{\\star}$ 的标准差（方差的平方根）（单位 eV）。\n\n您必须遵循的基本原理：\n- 普通最小二乘估计量最小化残差平方和，并产生可用设计矩阵 $X$ 和响应向量 $y$ 表示的正规方程。\n- 决定系数 $R^2$ 定义为解释平方和与总平方和之比，等价于 $1$ 减去残差平方和与总平方和之比。\n- 对于具有独立同分布同方差残差的线性模型，最小二乘参数估计的协方差矩阵与 Fisher 信息的逆矩阵成正比，具体而言，等于由残差平方和与自由度估计出的残差方差所缩放的 $(X^{\\mathsf{T}} X)^{-1}$。\n- 一阶不确定度传播使用从参数到导出量的变换的雅可比矩阵，得到的方差等于雅可比矩阵乘以参数协方差矩阵再乘以其转置。\n\n火山模型与顶点定义：\n- 设定 $\\Delta E_A = a_A \\Delta E_{\\text{ref}} + b_A$ 和 $\\Delta E_B = a_B \\Delta E_{\\text{ref}} + b_B$，定义 $E_{\\text{bar},1}(\\Delta E_{\\text{ref}}) = \\kappa_1 + \\lambda_1 \\Delta E_A$ 和 $E_{\\text{bar},2}(\\Delta E_{\\text{ref}}) = \\kappa_2 + \\lambda_2 \\Delta E_B$，其中 $\\kappa_1$、$\\kappa_2$ 的单位为 $\\text{eV}$，$\\lambda_1$、$\\lambda_2$ 无量纲。顶点 $\\Delta E_{\\text{ref}}^{\\star}$ 是方程 $E_{\\text{bar},1}(\\Delta E_{\\text{ref}}^{\\star}) = E_{\\text{bar},2}(\\Delta E_{\\text{ref}}^{\\star})$ 的解。\n\n测试套件：\n- 测试用例 $1$：\n  - 描述符值 $\\{\\Delta E_{\\text{ref}}^j\\}$: $\\{-1.8, -1.5, -1.2, -0.9, -0.6\\}$ $\\text{eV}$。\n  - 吸附能 $\\{\\Delta E_A^j\\}$: $\\{-0.93, -0.70, -0.44, -0.23, 0.02\\}$ $\\text{eV}$。\n  - 吸附能 $\\{\\Delta E_B^j\\}$: $\\{0.58, 0.46, 0.30, 0.14, 0.02\\}$ $\\text{eV}$。\n  - 火山图常数: $\\kappa_1 = 0.8$ $\\text{eV}$, $\\lambda_1 = 0.6$, $\\kappa_2 = 0.9$ $\\text{eV}$, $\\lambda_2 = 0.7$。\n- 测试用例 $2$：\n  - 描述符值 $\\{\\Delta E_{\\text{ref}}^j\\}$: $\\{-2.0, -1.6, -1.2, -0.8, -0.4, 0.0\\}$ $\\text{eV}$。\n  - 吸附能 $\\{\\Delta E_A^j\\}$: $\\{-0.32, -0.41, -0.20, -0.31, -0.34, -0.20\\}$ $\\text{eV}$。\n  - 吸附能 $\\{\\Delta E_B^j\\}$: $\\{-0.68, -0.55, -0.38, -0.21, -0.09, 0.12\\}$ $\\text{eV}$。\n  - 火山图常数: $\\kappa_1 = 0.5$ $\\text{eV}$, $\\lambda_1 = 0.5$, $\\kappa_2 = 0.6$ $\\text{eV}$, $\\lambda_2 = 0.4$。\n- 测试用例 $3$：\n  - 描述符值 $\\{\\Delta E_{\\text{ref}}^j\\}$: $\\{-1.02, -1.01, -1.00, -0.99, -0.98\\}$ $\\text{eV}$。\n  - 吸附能 $\\{\\Delta E_A^j\\}$: $\\{-1.03, -1.02, -1.00, -0.99, -0.97\\}$ $\\text{eV}$。\n  - 吸附能 $\\{\\Delta E_B^j\\}$: $\\{-1.18, -1.16, -1.15, -1.14, -1.12\\}$ $\\text{eV}$。\n  - 火山图常数: $\\kappa_1 = 0.7$ $\\text{eV}$, $\\lambda_1 = 0.8$, $\\kappa_2 = 0.9$ $\\text{eV}$, $\\lambda_2 = 0.64$。\n\n每个测试用例的必需输出：\n- $\\Delta E_A$ 对 $\\Delta E_{\\text{ref}}$ 拟合的决定系数 $R^2$（无量纲，小数形式）。\n- $\\Delta E_B$ 对 $\\Delta E_{\\text{ref}}$ 拟合的决定系数 $R^2$（无量纲，小数形式）。\n- 顶点描述符 $\\Delta E_{\\text{ref}}^{\\star}$（单位 $\\text{eV}$）。\n- 通过从回归参数协方差进行一阶不确定度传播得到的 $\\Delta E_{\\text{ref}}^{\\star}$ 的标准差（单位 $\\text{eV}$）。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含所有三个测试用例的结果，格式为列表的列表，每个内部列表按 $[R^2_A, R^2_B, \\Delta E_{\\text{ref}}^{\\star}, \\sigma_{\\Delta E_{\\text{ref}}^{\\star}}]$ 的顺序排列。整个输出必须是包含在方括号内的、由逗号分隔的单行列表。", "solution": "所提出的问题是计算催化领域的一个标准练习，要求将线性回归、统计分析和误差传播应用于火山图模型。该问题定义明确，科学上合理，并包含唯一解所需的所有必要信息。我们将着手进行推导和计算。\n\n该方法包括四个主要步骤：第一，使用普通最小二乘法 (OLS) 估计线性标度关系参数；第二，使用决定系数 $R^2$ 评估拟合优度；第三，根据拟合模型计算火山顶点描述符；第四，将 OLS 拟合的参数不确定度传播到计算出的顶点描述符。\n\n**$1$. 普通最小二乘 (OLS) 回归**\n\n对于每个物种 $i \\in \\{A, B\\}$，我们给定一个包含 $N$ 个数据点的集合 $\\{(\\Delta E_{\\text{ref}}^j, \\Delta E_i^j)\\}_{j=1}^N$。我们假定一个线性关系 $\\Delta E_i = a_i \\Delta E_{\\text{ref}} + b_i$。这可以用矩阵形式表示为：\n$$\n\\mathbf{y}_i = \\mathbf{X} \\boldsymbol{\\beta}_i + \\boldsymbol{\\epsilon}_i\n$$\n其中 $\\mathbf{y}_i$ 是观测到的吸附能 $\\Delta E_i^j$ 的 $N \\times 1$ 向量，$\\boldsymbol{\\beta}_i = \\begin{pmatrix} b_i \\\\ a_i \\end{pmatrix}$ 是 $2 \\times 1$ 的参数向量（截距和斜率），$\\mathbf{X}$ 是 $N \\times 2$ 的设计矩阵，对两个物种都相同：\n$$\n\\mathbf{y}_i = \\begin{pmatrix} \\Delta E_i^1 \\\\ \\Delta E_i^2 \\\\ \\vdots \\\\ \\Delta E_i^N \\end{pmatrix}, \\quad\n\\mathbf{X} = \\begin{pmatrix} 1 & \\Delta E_{\\text{ref}}^1 \\\\ 1 & \\Delta E_{\\text{ref}}^2 \\\\ \\vdots & \\vdots \\\\ 1 & \\Delta E_{\\text{ref}}^N \\end{pmatrix}\n$$\nOLS 估计量 $\\hat{\\boldsymbol{\\beta}}_i$ 最小化残差平方和 $\\text{RSS}_i = (\\mathbf{y}_i - \\mathbf{X}\\boldsymbol{\\beta}_i)^{\\mathsf{T}}(\\mathbf{y}_i - \\mathbf{X}\\boldsymbol{\\beta}_i)$。解由正规方程给出：\n$$\n\\hat{\\boldsymbol{\\beta}}_i = (\\mathbf{X}^{\\mathsf{T}} \\mathbf{X})^{-1} \\mathbf{X}^{\\mathsf{T}} \\mathbf{y}_i\n$$\n这提供了斜率 $\\hat{a}_i$ 和截距 $\\hat{b}_i$ 的估计值。\n\n**$2$. 决定系数 ($R^2$)**\n\n线性拟合的质量通过决定系数 $R^2$ 进行评估。它被定义为因变量总方差中可由自变量预测的部分。\n$$\nR^2_i = 1 - \\frac{\\text{RSS}_i}{\\text{TSS}_i}\n$$\n其中 $\\text{RSS}_i$ 是残差平方和 (Residual Sum of Squares)，$\\text{TSS}_i$ 是总平方和 (Total Sum of Squares)。\n$$\n\\text{RSS}_i = \\sum_{j=1}^{N} (y_{ij} - \\hat{y}_{ij})^2 = \\sum_{j=1}^{N} (\\Delta E_i^j - (\\hat{a}_i \\Delta E_{\\text{ref}}^j + \\hat{b}_i))^2\n$$\n$$\n\\text{TSS}_i = \\sum_{j=1}^{N} (y_{ij} - \\bar{y}_i)^2\n$$\n这里，$\\hat{y}_{ij}$ 是回归的预测值，$\\bar{y}_i$ 是观测值 $y_{ij}$ 的平均值。\n\n**$3$. 火山顶点描述符 ($\\Delta E_{\\text{ref}}^{\\star}$)**\n\n火山顶点 $\\Delta E_{\\text{ref}}^{\\star}$ 位于两个控制动力学势垒相等的描述符值处：\n$$\nE_{\\text{bar},1}(\\Delta E_{\\text{ref}}^{\\star}) = E_{\\text{bar},2}(\\Delta E_{\\text{ref}}^{\\star})\n$$\n代入势垒的定义 $E_{\\text{bar},1} = \\kappa_1 + \\lambda_1 \\Delta E_A$ 和 $E_{\\text{bar},2} = \\kappa_2 + \\lambda_2 \\Delta E_B$，以及拟合的线性标度关系，我们得到：\n$$\n\\kappa_1 + \\lambda_1 (\\hat{a}_A \\Delta E_{\\text{ref}}^{\\star} + \\hat{b}_A) = \\kappa_2 + \\lambda_2 (\\hat{a}_B \\Delta E_{\\text{ref}}^{\\star} + \\hat{b}_B)\n$$\n解出 $\\Delta E_{\\text{ref}}^{\\star}$ 得：\n$$\n\\Delta E_{\\text{ref}}^{\\star} = \\frac{\\kappa_2 - \\kappa_1 + \\lambda_2 \\hat{b}_B - \\lambda_1 \\hat{b}_A}{\\lambda_1 \\hat{a}_A - \\lambda_2 \\hat{a}_B}\n$$\n该表达式将 $\\Delta E_{\\text{ref}}^{\\star}$ 定义为四个估计参数 $\\hat{b}_A, \\hat{a}_A, \\hat{b}_B, \\hat{a}_B$ 的函数 $f$。\n\n**$4$. 不确定度传播**\n\n估计参数 $\\hat{\\boldsymbol{\\beta}}_i$ 的方差由协方差矩阵给出：\n$$\n\\text{Cov}(\\hat{\\boldsymbol{\\beta}}_i) = \\hat{\\sigma}^2_i (\\mathbf{X}^{\\mathsf{T}} \\mathbf{X})^{-1}\n$$\n其中 $\\hat{\\sigma}^2_i$ 是残差方差的无偏估计量：\n$$\n\\hat{\\sigma}^2_i = \\frac{\\text{RSS}_i}{N - p}\n$$\n其中 $p=2$ 是线性模型中的参数数量。\n\n由于物种 A 和 B 的两次回归假定为统计独立的，参数向量 $\\boldsymbol{\\theta} = (\\hat{b}_A, \\hat{a}_A, \\hat{b}_B, \\hat{a}_B)^{\\mathsf{T}}$ 的完整协方差矩阵是块对角矩阵：\n$$\n\\mathbf{C}_{\\boldsymbol{\\theta}} = \\begin{pmatrix} \\text{Cov}(\\hat{\\boldsymbol{\\beta}}_A) & \\mathbf{0} \\\\ \\mathbf{0} & \\text{Cov}(\\hat{\\boldsymbol{\\beta}}_B) \\end{pmatrix}\n$$\n$\\Delta E_{\\text{ref}}^{\\star}$ 的方差通过一阶泰勒展开（delta 方法）求得：\n$$\n\\text{Var}(\\Delta E_{\\text{ref}}^{\\star}) \\approx \\mathbf{J} \\mathbf{C}_{\\boldsymbol{\\theta}} \\mathbf{J}^{\\mathsf{T}}\n$$\n其中 $\\mathbf{J}$ 是函数 $f$ 相对于 $\\boldsymbol{\\theta}$ 中参数的偏导数雅可比行向量，在其估计值处求值。令 $U = \\kappa_2 - \\kappa_1 + \\lambda_2 \\hat{b}_B - \\lambda_1 \\hat{b}_A$ 且 $V = \\lambda_1 \\hat{a}_A - \\lambda_2 \\hat{a}_B$。偏导数为：\n$$\n\\frac{\\partial f}{\\partial \\hat{b}_A} = -\\frac{\\lambda_1}{V}, \\quad \\frac{\\partial f}{\\partial \\hat{a}_A} = -\\frac{U \\lambda_1}{V^2} = -\\Delta E_{\\text{ref}}^{\\star} \\frac{\\lambda_1}{V}\n$$\n$$\n\\frac{\\partial f}{\\partial \\hat{b}_B} = \\frac{\\lambda_2}{V}, \\quad \\frac{\\partial f}{\\partial \\hat{a}_B} = \\frac{U \\lambda_2}{V^2} = \\Delta E_{\\text{ref}}^{\\star} \\frac{\\lambda_2}{V}\n$$\n由于 $\\mathbf{C}_{\\boldsymbol{\\theta}}$ 的块对角结构，方差简化为每次回归贡献的总和：\n$$\n\\text{Var}(\\Delta E_{\\text{ref}}^{\\star}) \\approx \\mathbf{J}_A \\text{Cov}(\\hat{\\boldsymbol{\\beta}}_A) \\mathbf{J}_A^{\\mathsf{T}} + \\mathbf{J}_B \\text{Cov}(\\hat{\\boldsymbol{\\beta}}_B) \\mathbf{J}_B^{\\mathsf{T}}\n$$\n其中 $\\mathbf{J}_A = (\\frac{\\partial f}{\\partial \\hat{b}_A}, \\frac{\\partial f}{\\partial \\hat{a}_A})$ 且 $\\mathbf{J}_B = (\\frac{\\partial f}{\\partial \\hat{b}_B}, \\frac{\\partial f}{\\partial \\hat{a}_B})$。标准差是该方差的平方根，$\\sigma_{\\Delta E_{\\text{ref}}^{\\star}} = \\sqrt{\\text{Var}(\\Delta E_{\\text{ref}}^{\\star})}$。\n\n此完整过程被实现并应用于所提供的每个测试用例。数值结果由附带的程序生成。\n```python\nimport numpy as np\n\ndef perform_linear_regression(x_data, y_data):\n    \"\"\"\n    Performs ordinary least squares regression for a simple linear model.\n\n    Args:\n        x_data (np.ndarray): Independent variable data.\n        y_data (np.ndarray): Dependent variable data.\n\n    Returns:\n        tuple: A tuple containing:\n            - params (np.ndarray): Estimated parameters [intercept, slope].\n            - r_squared (float): Coefficient of determination.\n            - cov_matrix (np.ndarray): Covariance matrix of the parameters.\n    \"\"\"\n    N = len(x_data)\n    if N  2:\n        raise ValueError(\"At least two data points are required for linear regression.\")\n    p = 2  # Number of parameters: intercept and slope\n\n    # Construct the design matrix X\n    X = np.vstack([np.ones(N), x_data]).T\n\n    # Calculate (X^T * X)^-1\n    try:\n        XTX_inv = np.linalg.inv(X.T @ X)\n    except np.linalg.LinAlgError:\n        # This case is unlikely with the given test data but is good practice.\n        raise np.linalg.LinAlgError(\"Design matrix is singular.\")\n\n    # Estimate parameters using the normal equations: beta = (X^T * X)^-1 * X^T * y\n    params = XTX_inv @ X.T @ y_data\n\n    # Calculate R-squared\n    y_predicted = X @ params\n    rss = np.sum((y_data - y_predicted) ** 2)\n    tss = np.sum((y_data - np.mean(y_data)) ** 2)\n    if tss == 0:\n        # Handle case where all y values are the same\n        r_squared = 1.0 if rss == 0 else 0.0\n    else:\n        r_squared = 1 - rss / tss\n\n    # Calculate the covariance matrix of parameters\n    dof = N - p\n    if dof = 0:\n      raise ValueError(\"Degrees of freedom must be positive.\")\n    residual_variance = rss / dof\n    cov_matrix = residual_variance * XTX_inv\n\n    return params, r_squared, cov_matrix\n\ndef calculate_apex_and_uncertainty(params_A, cov_A, params_B, cov_B, k1, l1, k2, l2):\n    \"\"\"\n    Calculates the volcano apex descriptor and its uncertainty.\n\n    Args:\n        params_A (np.ndarray): Parameters [b_A, a_A] for species A.\n        cov_A (np.ndarray): Covariance matrix for parameters of A.\n        params_B (np.ndarray): Parameters [b_B, a_B] for species B.\n        cov_B (np.ndarray): Covariance matrix for parameters of B.\n        k1, l1, k2, l2 (float): Constants for the volcano model.\n\n    Returns:\n        tuple: A tuple containing:\n            - apex_descriptor (float): The value of Delta E_ref at the apex.\n            - apex_std_dev (float): The standard deviation of the apex descriptor.\n    \"\"\"\n    b_A, a_A = params_A\n    b_B, a_B = params_B\n\n    # Calculate apex descriptor\n    numerator = k2 - k1 + l2 * b_B - l1 * b_A\n    denominator = l1 * a_A - l2 * a_B\n    \n    if abs(denominator)  1e-9:\n        # This indicates parallel lines, no unique apex.\n        apex_descriptor = np.nan\n        apex_std_dev = np.nan\n        return apex_descriptor, apex_std_dev\n\n    apex_descriptor = numerator / denominator\n\n    # Calculate Jacobian components\n    # f = (k2 - k1 + l2*bB - l1*bA) / (l1*aA - l2*aB)\n    # Parameters are ordered [b_A, a_A, b_B, a_B]\n    # Jacobian for A: [df/db_A, df/da_A]\n    # Jacobian for B: [df/db_B, df/da_B]\n    \n    df_dbA = -l1 / denominator\n    df_daA = -numerator * l1 / (denominator ** 2)\n    \n    df_dbB = l2 / denominator\n    df_daB = numerator * l2 / (denominator ** 2)\n\n    J_A = np.array([df_dbA, df_daA])\n    J_B = np.array([df_dbB, df_daB])\n\n    # Propagate uncertainty\n    var_A = J_A.T @ cov_A @ J_A\n    var_B = J_B.T @ cov_B @ J_B\n    \n    total_variance = var_A + var_B\n    apex_std_dev = np.sqrt(total_variance)\n\n    return apex_descriptor, apex_std_dev\n```", "answer": "[[0.9961919632312674,0.9922033898305084,-1.02027027027027,0.1477738222687556],[0.37049875311720696,0.9877708506288647,-1.597777777777778,0.7225114138075363],[0.9921259842519685,0.9803921568627451,-0.8931506849315068,0.06192231221469555]]", "id": "2680827"}, {"introduction": "在掌握了构建和理解火山图的基础后，我们可以将其应用于更高层次的挑战：催化剂的理性设计。这个高级实践将结构-活性关系模型置于一个受约束的优化框架中，模拟了在真实的材料和热力学限制下寻找最佳催化剂的过程。通过将问题转化为线性规划问题来求解，你将体验如何利用理论模型在广阔的设计空间中筛选出性能最优的催化剂，这正是现代催化剂信息学的前沿方法。[@problem_id:2680849]", "problem": "考虑一个催化剂设计问题，其本征活性由一个双描述符火山型曲面建模。令描述符为 $x_1$ 和 $x_2$（单位均为 $\\mathrm{kJ/mol}$）。假设一个包含多个基元步骤的微观动力学网络遵循阿伦尼乌斯定律，并且每个步骤的表观活化自由能与这些描述符之间遵循线性 Bronsted–Evans–Polanyi (BEP) 关系。用索引 $i \\in \\{1,\\dots,M\\}$ 表示基元步骤的集合，并设步骤 $i$ 的表观活化能垒为一个仿射函数 $E_i(x_1,x_2) = c_i + a_{i1} x_1 + a_{i2} x_2$，其中 $c_i$ 的单位为 $\\mathrm{kJ/mol}$，$a_{i1}, a_{i2}$ 为无量纲。假设总速控能垒是这些仿射能垒中的最大值，即 $g(x_1,x_2) = \\max_{i} E_i(x_1,x_2)$。位点归一化活性为 $r(x_1,x_2) = k_0 \\exp\\!\\left(-\\dfrac{g(x_1,x_2)}{R T}\\right)$，其中 $k_0$ 是指前因子，单位为 $\\mathrm{s^{-1}}$；$R$ 是普适气体常数，单位为 $\\mathrm{kJ\\ mol^{-1}\\ K^{-1}}$；$T$ 是绝对温度，单位为 $\\mathrm{K}$。\n\n给定编码了热力学一致性、合金化空间和标度关系的线性可行性约束：一个可行集 $\\mathcal{F} = \\{(x_1,x_2) \\in \\mathbb{R}^2 \\mid L_j(x_1,x_2) \\le d_j \\text{ for all } j \\in \\{1,\\dots,J\\}\\}$，其中每个 $L_j(x_1,x_2) = p_{j1} x_1 + p_{j2} x_2$ 是仿射的，$d_j$ 是实数。约束下的催化剂设计问题是在可行集约束下找到最佳可达活性，这对应于求解约束优化问题：\n在 $(x_1,x_2) \\in \\mathcal{F}$ 的约束下最大化 $r(x_1,x_2)$。\n等价地，在 $\\mathcal{F}$ 上最小化速控能垒 $g(x_1,x_2)$。最佳可达活性为 $r^\\star = r(x_1^\\star,x_2^\\star)$，其中 $(x_1^\\star,x_2^\\star)$ 是该约束优化的解。在解处，如果一个基元步骤 $i$ 满足 $E_i(x_1^\\star,x_2^\\star) = g(x_1^\\star,x_2^\\star)$，则称其为火山活性的；如果一个可行性不等式 $j$ 满足 $L_j(x_1^\\star,x_2^\\star) = d_j$，则称其为激活的。\n\n仅使用基本动力学原理：速率的阿伦尼乌斯表达式和活化能垒的 BEP 线性关系。假设 $R = 0.008314462618$，单位为 $\\mathrm{kJ\\ mol^{-1}\\ K^{-1}}$。您必须计算 $r^\\star$（单位为 $\\mathrm{s^{-1}}$），并四舍五入到 6 位小数。同时，在最优点处，识别出火山活性集 $\\mathcal{I}_{\\mathrm{act}} \\subseteq \\{1,\\dots,M\\}$ 和可行性激活集 $\\mathcal{J}_{\\mathrm{act}} \\subseteq \\{1,\\dots,J\\}$，并使用基于 1 的索引报告索引值。\n\n您的程序必须解决以下四个测试用例。对于每个用例，输入为 $(k_0,T)$、火山分支列表 $\\{(c_i,a_{i1},a_{i2})\\}_{i=1}^M$ 以及用于指定 $p_{j1} x_1 + p_{j2} x_2 \\le d_j$ 的可行性不等式 $\\{(p_{j1},p_{j2},d_j)\\}_{j=1}^J$。所有能量单位为 $\\mathrm{kJ/mol}$，所有温度单位为 $\\mathrm{K}$，所有活性单位为 $\\mathrm{s^{-1}}$。\n\n测试用例 A：\n- $k_0 = 10^{13}$，$T = 600$。\n- 火山分支 ($M = 3$)：\n  $E_1 = 80 + 8 x_1 + 2 x_2$，\n  $E_2 = 75 - 6 x_1 + 5 x_2$，\n  $E_3 = 70 + 1 x_1 - 9 x_2$。\n- 可行集 ($J = 5$)：$x_1 \\le 1$，$-x_1 \\le 1$，$x_2 \\le 1$，$-x_2 \\le 1$，$0.5 x_1 - x_2 \\le 0.2$。\n\n测试用例 B：\n- $k_0 = 10^{13}$，$T = 700$。\n- 火山分支 ($M = 3$)：\n  $E_1 = 90 + 10 x_1 + 2 x_2$，\n  $E_2 = 60 - 2 x_1 + 6 x_2$，\n  $E_3 = 65 + 1 x_1 + 1 x_2$。\n- 可行集 ($J = 4$)：$-x_1 \\le 0$，$-x_2 \\le 0$，$x_1 + x_2 \\le 0.3$，$x_1 \\le 0.25$。\n\n测试用例 C：\n- $k_0 = 10^{13}$，$T = 500$。\n- 火山分支 ($M = 3$)：\n  $E_1 = 100 - 4 x_1 + 0 x_2$，\n  $E_2 = 95 + 0 x_1 - 4 x_2$，\n  $E_3 = 110 + 3 x_1 + 3 x_2$。\n- 可行集 ($J = 6$)：$x_1 \\le 0.5$，$-x_1 \\le 0.5$，$x_2 \\le 0.5$，$-x_2 \\le 0.5$，$0.8 x_1 - x_2 \\le 0.1$，$-0.1 x_1 + x_2 \\le 0.2$。\n\n测试用例 D：\n- $k_0 = 10^{13}$，$T = 800$。\n- 火山分支 ($M = 4$)：\n  $E_1 = 80 + 6 x_1 + 6 x_2$，\n  $E_2 = 80 - 6 x_1 + 6 x_2$，\n  $E_3 = 80 + 6 x_1 - 6 x_2$，\n  $E_4 = 80 - 6 x_1 - 6 x_2$。\n- 可行集 ($J = 4$)：$x_1 \\le 1$，$-x_1 \\le 1$，$x_2 \\le 1$，$-x_2 \\le 1$。\n\n计算任务要求：\n- 对于每个测试用例，求解在可行集上最大化 $r(x_1,x_2)$ 的约束优化问题。报告最佳可达活性 $r^\\star$（单位为 $\\mathrm{s^{-1}}$），四舍五入到 6 位小数。同时报告：\n  - 火山活性集 $\\mathcal{I}_{\\mathrm{act}} = \\{ i \\in \\{1,\\dots,M\\} \\mid E_i(x_1^\\star,x_2^\\star) = g(x_1^\\star,x_2^\\star) \\}$,\n  - 可行性激活集 $\\mathcal{J}_{\\mathrm{act}} = \\{ j \\in \\{1,\\dots,J\\} \\mid p_{j1} x_1^\\star + p_{j2} x_2^\\star = d_j \\}$。\n在判断活性集中的相等关系时，使用 $\\mathrm{kJ/mol}$ 为单位的数值容差 $10^{-7}$。\n\n- 最终输出格式：您的程序应生成单行输出，其中包含一个长度为 4 的类 Python 列表形式的结果，每个元素对应一个测试用例，本身是一个形如 $[r^\\star,\\ \\mathcal{I}_{\\mathrm{act}},\\ \\mathcal{J}_{\\mathrm{act}}]$ 的列表。例如，两个用例的有效输出可能如下所示：$[[1.234567,[1,3],[2]],[0.314159,[],[1,4]]]$。\n\n此处所有角度均不相关。所有输出必须与上述定义单位一致，$r^\\star$ 必须以浮点数形式报告（单位为 $\\mathrm{s^{-1}}$），并四舍五入到 6 位小数。索引列表必须包含使用基于 1 的索引的整数。", "solution": "所述问题经过了严格验证。\n\n**步骤 1：提取已知条件**\n- **模型**：本征活性 $r(x_1, x_2)$ 通过阿伦尼乌斯方程与速控活化能垒 $g(x_1, x_2)$ 相关：$r(x_1, x_2) = k_0 \\exp\\left(-\\frac{g(x_1, x_2)}{RT}\\right)$。\n- **目标函数**：速控能垒 $g(x_1, x_2)$ 定义为 $M$ 个仿射函数（BEP 关系）的最大值：$g(x_1, x_2) = \\max_{i \\in \\{1,\\dots,M\\}} E_i(x_1, x_2)$，其中 $E_i(x_1, x_2) = c_i + a_{i1} x_1 + a_{i2} x_2$。\n- **优化目标**：最大化 $r(x_1, x_2)$，等价于最小化 $g(x_1, x_2)$。\n- **可行集**：优化被约束在一个可行集 $\\mathcal{F} = \\{(x_1, x_2) \\in \\mathbb{R}^2 \\mid L_j(x_1, x_2) \\le d_j \\text{ for all } j \\in \\{1,\\dots,J\\}\\}$ 内，其中 $L_j(x_1, x_2) = p_{j1} x_1 + p_{j2} x_2$。\n- **常数**：$R = 0.008314462618 \\, \\mathrm{kJ\\ mol^{-1}\\ K^{-1}}$。\n- **输出**：对于每个测试用例，确定最大活性 $r^\\star$（四舍五入到 6 位小数）、火山活性步骤索引集 $\\mathcal{I}_{\\mathrm{act}}$ 和可行性激活约束索引集 $\\mathcal{J}_{\\mathrm{act}}$。检查活性集成员资格时指定了 $10^{-7}$ 的数值容差。\n- **测试用例**：提供了四个具体的实例（A、B、C、D），包含了所有必要的参数：$(k_0, T)$、火山分支系数 $\\{(c_i, a_{i1}, a_{i2})\\}$ 和可行性不等式系数 $\\{(p_{j1}, p_{j2}, d_j)\\}$。\n\n**步骤 2：验证**\n根据验证标准对问题进行评估。\n- **科学依据**：该问题在化学动力学和多相催化原理方面有充分的依据。阿伦尼乌斯定律、BEP 关系以及活性火山图概念的使用是该领域的标准且公认的模型。\n- **适定性**：目标函数 $g(x_1, x_2)$ 是一组仿射函数（因此是凸函数）的最大值，这使得 $g$ 本身也是一个凸函数。可行集 $\\mathcal{F}$ 由一个线性不等式系统定义，该系统描述了一个凸多边形（一个凸集）。因此，该问题是一个在凸集上最小化凸函数的问题。此类问题是适定的，保证了全局最小值的存在。\n- **客观性**：问题以精确、无歧义的数学语言表述。所有数据都已定量提供。\n- **完整性与一致性**：问题陈述是自洽的。对于每个测试用例，所有参数都已指定，没有明显的矛盾。\n- **其他缺陷**：问题未表现出任何其他缺陷，例如无法形式化、不切实际、过于简单或无法验证。\n\n**步骤 3：结论**\n问题被判定为有效。将构建一个解决方案。\n\n**基于原理的解决方案设计**\n\n核心任务是求解以下约束优化问题：\n$$\n\\underset{(x_1, x_2) \\in \\mathcal{F}}{\\text{minimize}} \\quad g(x_1, x_2) = \\max_{i=1,\\dots,M} \\{c_i + a_{i1} x_1 + a_{i2} x_2\\}\n$$\n这是一个非光滑凸优化问题。解决此类问题的一个标准而强大的技术是将其重构为一个线性规划 (Linear Program, LP) 问题。我们引入一个辅助变量 $z \\in \\mathbb{R}$，作为所有基元活化能垒 $E_i(x_1, x_2)$ 的上界。最小化 $g(x_1, x_2)$ 随后等价于最小化这个上界 $z$。\n\n原始问题可以表示为：\n$$\n\\begin{aligned}\n\\text{minimize} \\quad  z \\\\\n\\text{subject to} \\quad  z \\ge E_i(x_1, x_2) \\quad \\text{for } i=1, \\dots, M \\\\\n (x_1, x_2) \\in \\mathcal{F}\n\\end{aligned}\n$$\n\n代入 $E_i$ 和 $\\mathcal{F}$ 的定义，我们得到一个关于变量 $(x_1, x_2, z)$ 的线性不等式系统：\n$$\n\\begin{aligned}\n\\text{minimize} \\quad  z \\\\\n\\text{subject to} \\quad  c_i + a_{i1} x_1 + a_{i2} x_2 - z \\le 0 \\quad \\text{for } i=1, \\dots, M \\\\\n p_{j1} x_1 + p_{j2} x_2 \\le d_j \\quad \\text{for } j=1, \\dots, J\n\\end{aligned}\n$$\n\n这是一个标准形式的线性规划问题。设变量向量为 $\\mathbf{x} = [x_1, x_2, z]^T$。目标是最小化 $\\mathbf{c}^T \\mathbf{x}$，其中 $\\mathbf{c} = [0, 0, 1]^T$。约束可以写成 $\\mathbf{A}_{\\text{ub}} \\mathbf{x} \\le \\mathbf{b}_{\\text{ub}}$。矩阵 $\\mathbf{A}_{\\text{ub}}$ 的大小为 $(M+J) \\times 3$，向量 $\\mathbf{b}_{\\text{ub}}$ 的大小为 $(M+J)$。\n\n对于 $k = 1, \\dots, M$，不等式系统的第 $k$ 行对应火山分支约束 $a_{k1} x_1 + a_{k2} x_2 - z \\le -c_k$。\n对于 $k = 1, \\dots, J$，第 $(M+k)$ 行对应可行性约束 $p_{k1} x_1 + p_{k2} x_2 \\le d_k$。\n\n这个 LP 问题可以通过科学计算库中提供的标准算法（如单纯形法）来解决。求解结果将得到最优描述符值 $(x_1^\\star, x_2^\\star)$ 和最小速控能垒 $g^\\star = z^\\star$。\n\n一旦找到最优解 $(x_1^\\star, x_2^\\star, z^\\star)$，即可按以下方式计算所需的输出：\n1.  **最优活性 ($r^\\star$)**：使用阿伦尼乌斯表达式和最优能垒 $g^\\star = z^\\star$ 来计算活性：\n    $$\n    r^\\star = k_0 \\exp\\left(-\\frac{z^\\star}{RT}\\right)\n    $$\n2.  **火山活性集 ($\\mathcal{I}_{\\mathrm{act}}$)**：如果一个基元步骤 $i$ 在最优点处的能垒等于总速控能垒，则该步骤是火山活性的。这对应于条件 $E_i(x_1^\\star, x_2^\\star) = z^\\star$。使用指定的容差 $\\tau = 10^{-7}$，我们识别出该集合：\n    $$\n    \\mathcal{I}_{\\mathrm{act}} = \\{i \\in \\{1, \\dots, M\\} \\mid |(c_i + a_{i1} x_1^\\star + a_{i2} x_2^\\star) - z^\\star| \\le \\tau \\}\n    $$\n3.  **可行性激活集 ($\\mathcal{J}_{\\mathrm{act}}$)**：如果一个可行性约束 $j$ 在最优点处以等式成立，即 $L_j(x_1^\\star, x_2^\\star) = d_j$，则该约束是激活的。使用容差 $\\tau$，该集合为：\n    $$\n    \\mathcal{J}_{\\mathrm{act}} = \\{j \\in \\{1, \\dots, J\\} \\mid |(p_{j1} x_1^\\star + p_{j2} x_2^\\star) - d_j| \\le \\tau \\}\n    $$\n根据问题规范，这些集合中的索引必须是基于 1 的。这个系统性的、基于原理的流程将被执行以解决给定的测试用例。\n```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Main function to solve the catalyst design optimization problems.\n    \"\"\"\n    R = 0.008314462618  # Universal gas constant in kJ mol^-1 K^-1\n    TOL = 1e-7\n\n    # Test cases data\n    test_cases_data = [\n        {\n            \"k0\": 1e13, \"T\": 600,\n            \"branches\": [\n                (80, 8, 2),   # E1\n                (75, -6, 5),  # E2\n                (70, 1, -9),  # E3\n            ],\n            \"constraints\": [\n                (1, 0, 1),    # x1 = 1\n                (-1, 0, 1),   # -x1 = 1\n                (0, 1, 1),    # x2 = 1\n                (0, -1, 1),   # -x2 = 1\n                (0.5, -1, 0.2), # 0.5*x1 - x2 = 0.2\n            ],\n        },\n        {\n            \"k0\": 1e13, \"T\": 700,\n            \"branches\": [\n                (90, 10, 2),  # E1\n                (60, -2, 6),  # E2\n                (65, 1, 1),   # E3\n            ],\n            \"constraints\": [\n                (-1, 0, 0),   # -x1 = 0\n                (0, -1, 0),   # -x2 = 0\n                (1, 1, 0.3),  # x1 + x2 = 0.3\n                (1, 0, 0.25), # x1 = 0.25\n            ],\n        },\n        {\n            \"k0\": 1e13, \"T\": 500,\n            \"branches\": [\n                (100, -4, 0), # E1\n                (95, 0, -4),  # E2\n                (110, 3, 3),  # E3\n            ],\n            \"constraints\": [\n                (1, 0, 0.5),    # x1 = 0.5\n                (-1, 0, 0.5),   # -x1 = 0.5\n                (0, 1, 0.5),    # x2 = 0.5\n                (0, -1, 0.5),   # -x2 = 0.5\n                (0.8, -1, 0.1), # 0.8*x1 - x2 = 0.1\n                (-0.1, 1, 0.2), # -0.1*x1 + x2 = 0.2\n            ],\n        },\n        {\n            \"k0\": 1e13, \"T\": 800,\n            \"branches\": [\n                (80, 6, 6),   # E1\n                (80, -6, 6),  # E2\n                (80, 6, -6),  # E3\n                (80, -6, -6), # E4\n            ],\n            \"constraints\": [\n                (1, 0, 1),    # x1 = 1\n                (-1, 0, 1),   # -x1 = 1\n                (0, 1, 1),    # x2 = 1\n                (0, -1, 1),   # -x2 = 1\n            ],\n        }\n    ]\n\n    results = []\n    for case in test_cases_data:\n        k0, T = case[\"k0\"], case[\"T\"]\n        branches = case[\"branches\"]\n        constraints = case[\"constraints\"]\n        \n        M = len(branches)\n        J = len(constraints)\n        \n        # LP formulation: minimize c^T * x subject to A_ub * x = b_ub\n        # x = [x1, x2, z]\n        c = np.array([0, 0, 1])\n        \n        A_ub = np.zeros((M + J, 3))\n        b_ub = np.zeros(M + J)\n        \n        # Volcano branch constraints: a_i1*x1 + a_i2*x2 - z = -c_i\n        for i, (ci, ai1, ai2) in enumerate(branches):\n            A_ub[i, 0] = ai1\n            A_ub[i, 1] = ai2\n            A_ub[i, 2] = -1\n            b_ub[i] = -ci\n            \n        # Feasibility constraints: p_j1*x1 + p_j2*x2 = d_j\n        for j, (pj1, pj2, dj) in enumerate(constraints):\n            A_ub[M + j, 0] = pj1\n            A_ub[M + j, 1] = pj2\n            A_ub[M + j, 2] = 0\n            b_ub[M + j] = dj\n        \n        # Solve the linear program\n        res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=(None, None), method='highs')\n        \n        if not res.success:\n            raise RuntimeError(f\"Linear programming solver failed for a test case.\")\n            \n        x1_star, x2_star, g_star = res.x\n        \n        # Calculate optimal activity\n        r_star = k0 * np.exp(-g_star / (R * T))\n        \n        # Identify volcano-active set (1-based indexing)\n        I_act = []\n        for i, (ci, ai1, ai2) in enumerate(branches):\n            Ei = ci + ai1 * x1_star + ai2 * x2_star\n            if abs(Ei - g_star) = TOL:\n                I_act.append(i + 1)\n                \n        # Identify feasibility-active set (1-based indexing)\n        J_act = []\n        for j, (pj1, pj2, dj) in enumerate(constraints):\n            Lj = pj1 * x1_star + pj2 * x2_star\n            if abs(Lj - dj) = TOL:\n                J_act.append(j + 1)\n        \n        results.append([round(r_star, 6), sorted(I_act), sorted(J_act)])\n\n    # Format the final output string as a Python-like list of lists\n    print(f\"[{','.join(map(str, results))}]\".replace(\" \", \"\"))\n\n```", "answer": "[[0.000329,[1,2,3],[5]],[0.001962,[2,3],[3]],[0.000003,[1,2],[5,6]],[0.000002,[1,2,3,4],[]]]", "id": "2680849"}]}