{"hands_on_practices": [{"introduction": "要理解相空间中轨迹的复杂舞蹈，我们通常从审视单条路径的局部邻域开始。本练习介绍基本解矩阵 (fundamental solution matrix)，这是一个用于线性化动力学并分析轨迹稳定性的强大工具。通过将此概念应用于化学中无处不在的模型——谐振子，您将亲身体验如何推导出一个稳定周期系统中微小偏差随时间的演化。 [@problem_id:2764593]", "problem": "考虑一个分子束缚振动的简正模，该模式被建模为一维谐振子，其哈密顿量为 $H(x,p)=\\frac{p^{2}}{2m}+\\frac{1}{2}m\\omega^{2}x^{2}$，其中 $m$ 是质量，$\\omega$ 是角频率。设相空间状态在正则坐标下为 $z(t)=(x(t),p(t))^{\\mathsf{T}}$。围绕任意参考轨迹 $z^{\\ast}(t)$ 的一个小的相空间位移记为 $\\delta z(t)=(\\delta x(t),\\delta p(t))^{\\mathsf{T}}$。\n\n仅从哈密顿方程和基本解（状态转移）矩阵 $\\Phi(t)$ 的定义（即对于所有足够小的 $\\delta z(0)$，满足 $\\delta z(t)=\\Phi(t)\\,\\delta z(0)$ 的线性映射）出发，完成以下任务：\n\n- 推导 $\\Phi(t)$ 的显式形式。\n- 使用你的结果将一个任意小的相空间位移 $\\delta z(0)=(\\delta x_{0},\\delta p_{0})^{\\mathsf{T}}$ 传播一个周期 $T=\\frac{2\\pi}{\\omega}$，以得到 $\\delta z(T)$。\n\n请将一个周期后传播的位移 $\\delta z(T)$ 作为最终答案，用 $\\delta x_{0}$ 和 $\\delta p_{0}$ 表示成一个单行矩阵。无需进行数值计算，最终答案中不应包含单位。", "solution": "该问题要求推导一维谐振子的基本解矩阵或状态转移矩阵 $\\Phi(t)$，并应用它来传播一个小的相空间位移经过一个周期。整个推导过程必须源自哈密顿运动方程。\n\n系统的哈密顿量为：\n$$H(x,p) = \\frac{p^2}{2m} + \\frac{1}{2}m\\omega^2x^2$$\n其中 $m$ 是质量，$\\omega$ 是角频率， $x$ 是位置， $p$ 是动量。\n\n首先，我们写出哈密顿运动方程：\n$$\\dot{x} = \\frac{\\partial H}{\\partial p} = \\frac{p}{m}$$\n$$\\dot{p} = -\\frac{\\partial H}{\\partial x} = -m\\omega^2x$$\n这些方程可以写成相空间矢量 $z(t)=(x(t), p(t))^{\\mathsf{T}}$ 的矩阵形式。\n$$\\frac{d}{dt} \\begin{pmatrix} x \\\\ p \\end{pmatrix} = \\begin{pmatrix} 0  \\frac{1}{m} \\\\ -m\\omega^2  0 \\end{pmatrix} \\begin{pmatrix} x \\\\ p \\end{pmatrix}$$\n这是一个线性一阶常微分方程组，可以简写为 $\\dot{z}(t) = Kz(t)$，其中 $K$ 是常系数矩阵：\n$$K = \\begin{pmatrix} 0  \\frac{1}{m} \\\\ -m\\omega^2  0 \\end{pmatrix}$$\n问题考虑的是围绕参考轨迹 $z^*(t)$ 的一个小位移 $\\delta z(t)$。我们定义 $x(t) = x^*(t) + \\delta x(t)$ 和 $p(t) = p^*(t) + \\delta p(t)$。将这些代入哈密顿方程得到：\n$$\\frac{d}{dt}(x^*(t) + \\delta x(t)) = \\frac{p^*(t) + \\delta p(t)}{m}$$\n$$\\frac{d}{dt}(p^*(t) + \\delta p(t)) = -m\\omega^2(x^*(t) + \\delta x(t))$$\n展开并重新整理：\n$$\\dot{x}^*(t) + \\delta \\dot{x}(t) = \\frac{p^*(t)}{m} + \\frac{\\delta p(t)}{m}$$\n$$\\dot{p}^*(t) + \\delta \\dot{p}(t) = -m\\omega^2 x^*(t) - m\\omega^2 \\delta x(t)$$\n由于参考轨迹 $z^*(t)$ 本身是哈密顿方程的一个解，它必须满足 $\\dot{x}^*(t) = p^*(t)/m$ 和 $\\dot{p}^*(t) = -m\\omega^2 x^*(t)$。从上述方程中减去这些项，得到位移 $\\delta z(t)$ 的运动方程：\n$$\\delta \\dot{x}(t) = \\frac{\\delta p(t)}{m}$$\n$$\\delta \\dot{p}(t) = -m\\omega^2 \\delta x(t)$$\n用矩阵形式表示，我们有：\n$$\\frac{d}{dt} \\begin{pmatrix} \\delta x \\\\ \\delta p \\end{pmatrix} = \\begin{pmatrix} 0  \\frac{1}{m} \\\\ -m\\omega^2  0 \\end{pmatrix} \\begin{pmatrix} \\delta x \\\\ \\delta p \\end{pmatrix}$$\n这就是方程 $\\delta\\dot{z}(t) = K \\delta z(t)$。矩阵 $K$ 是常数且不依赖于参考轨迹 $z^*(t)$，这是谐振子源于其二次哈密顿量的一个特殊性质。\n\n该线性系统的解由 $\\delta z(t) = \\exp(Kt) \\delta z(0)$ 给出。基本解矩阵 $\\Phi(t)$ 由关系式 $\\delta z(t) = \\Phi(t) \\delta z(0)$ 定义。因此，我们必须计算矩阵指数 $\\Phi(t) = \\exp(Kt)$。\n\n为了计算 $\\exp(Kt)$，我们首先分析矩阵 $K$ 的幂：\n$$K^2 = \\begin{pmatrix} 0  \\frac{1}{m} \\\\ -m\\omega^2  0 \\end{pmatrix} \\begin{pmatrix} 0  \\frac{1}{m} \\\\ -m\\omega^2  0 \\end{pmatrix} = \\begin{pmatrix} -\\omega^2  0 \\\\ 0  -\\omega^2 \\end{pmatrix} = -\\omega^2 I$$\n其中 $I$ 是 $2 \\times 2$ 单位矩阵。\n使用这个结果，更高次的幂是：\n$K^3 = K \\cdot K^2 = -\\omega^2 K$\n$K^4 = (K^2)^2 = (-\\omega^2 I)^2 = \\omega^4 I$\n$K^5 = -\\omega^4 K$\n依此类推。\n\n矩阵指数的泰勒级数展开为：\n$$\\exp(Kt) = \\sum_{n=0}^{\\infty} \\frac{(Kt)^n}{n!} = I + Kt + \\frac{K^2t^2}{2!} + \\frac{K^3t^3}{3!} + \\frac{K^4t^4}{4!} + \\dots$$\n我们可以将 $K$ 的偶次幂项（与 $I$ 成正比）和奇次幂项（与 $K$ 成正比）分组：\n$$\\exp(Kt) = I \\left(1 - \\frac{\\omega^2 t^2}{2!} + \\frac{\\omega^4 t^4}{4!} - \\dots \\right) + K \\left(t - \\frac{\\omega^2 t^3}{3!} + \\frac{\\omega^4 t^5}{5!} - \\dots \\right)$$\n括号中的第一个级数是 $\\cos(\\omega t)$ 的泰勒级数。第二个级数可以重写为：\n$$\\frac{1}{\\omega} \\left(\\omega t - \\frac{(\\omega t)^3}{3!} + \\frac{(\\omega t)^5}{5!} - \\dots \\right) = \\frac{1}{\\omega} \\sin(\\omega t)$$\n因此，矩阵指数的表达式变为：\n$$\\exp(Kt) = I \\cos(\\omega t) + \\frac{K}{\\omega} \\sin(\\omega t)$$\n代入矩阵 $I$ 和 $K$ 得到 $\\Phi(t)$ 的显式形式：\n$$\\Phi(t) = \\begin{pmatrix} 1  0 \\\\ 0  1 \\end{pmatrix} \\cos(\\omega t) + \\frac{1}{\\omega} \\begin{pmatrix} 0  \\frac{1}{m} \\\\ -m\\omega^2  0 \\end{pmatrix} \\sin(\\omega t)$$\n$$\\Phi(t) = \\begin{pmatrix} \\cos(\\omega t)  0 \\\\ 0  \\cos(\\omega t) \\end{pmatrix} + \\begin{pmatrix} 0  \\frac{1}{m\\omega} \\sin(\\omega t) \\\\ -m\\omega \\sin(\\omega t)  0 \\end{pmatrix}$$\n$$\\Phi(t) = \\begin{pmatrix} \\cos(\\omega t)  \\frac{1}{m\\omega} \\sin(\\omega t) \\\\ -m\\omega \\sin(\\omega t)  \\cos(\\omega t) \\end{pmatrix}$$\n这完成了问题的第一部分。\n\n对于第二部分，我们必须将一个任意小的初始位移 $\\delta z(0) = (\\delta x_0, \\delta p_0)^{\\mathsf{T}}$ 传播一个周期 $T = \\frac{2\\pi}{\\omega}$。我们需要计算 $\\delta z(T) = \\Phi(T) \\delta z(0)$。\n首先，我们计算矩阵 $\\Phi(t)$ 在 $t=T$ 时的值：\n$$\\omega T = \\omega \\left(\\frac{2\\pi}{\\omega}\\right) = 2\\pi$$\n三角函数变为：\n$$\\cos(\\omega T) = \\cos(2\\pi) = 1$$\n$$\\sin(\\omega T) = \\sin(2\\pi) = 0$$\n将这些值代入 $\\Phi(t)$ 的表达式中：\n$$\\Phi(T) = \\begin{pmatrix} \\cos(2\\pi)  \\frac{1}{m\\omega} \\sin(2\\pi) \\\\ -m\\omega \\sin(2\\pi)  \\cos(2\\pi) \\end{pmatrix} = \\begin{pmatrix} 1  0 \\\\ 0  1 \\end{pmatrix} = I$$\n经过一个完整周期后，状态转移矩阵是单位矩阵。\n因此，传播后的位移是：\n$$\\delta z(T) = \\Phi(T) \\delta z(0) = I \\delta z(0) = \\delta z(0)$$\n$$\\begin{pmatrix} \\delta x(T) \\\\ \\delta p(T) \\end{pmatrix} = \\begin{pmatrix} \\delta x_0 \\\\ \\delta p_0 \\end{pmatrix}$$\n这个结果表明，对于谐振子，任何偏离参考轨迹的小位移在一个周期后都会回到其自身。传播后的位移矢量与初始位移矢量相同。表示为行矩阵，即 $(\\delta x_0, \\delta p_0)$。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\delta x_{0}  \\delta p_{0}\n\\end{pmatrix}\n}\n$$", "id": "2764593"}, {"introduction": "除了局部稳定性，相空间的全局结构由守恒量决定，而守恒量源于哈密顿量的对称性。本实践深入探讨著名的开普勒问题——天体力学和原子理论的基石——以探索超越简单旋转的“隐藏”对称性。您将使用泊松括号 (Poisson brackets) 的形式化语言来研究龙格－楞次矢量 (Runge-Lenz vector)，揭示守恒量与轨道几何特性之间的深刻联系。 [@problem_id:2764630]", "problem": "一个约化质量为 $\\mu$ 的点粒子在中心引力势 $V(r) = -k/r$（其中 $k0$）中运动，该模型模拟了理论化学中分析束缚电子-原子核运动时遇到的经典库仑（开普勒）问题。哈密顿量为 $H(\\mathbf{r},\\mathbf{p}) = \\mathbf{p}^{2}/(2\\mu) - k/r$。定义角动量 $\\mathbf{L} = \\mathbf{r} \\times \\mathbf{p}$ 和龙格－楞次矢量 $\\mathbf{A} = \\mathbf{p} \\times \\mathbf{L} - \\mu k\\, \\mathbf{r}/r$。在经典相空间中进行计算，使用正则泊松括号关系 $\\{r_{i},p_{j}\\} = \\delta_{ij}$，$\\{r_{i},r_{j}\\} = 0$ 和 $\\{p_{i},p_{j}\\} = 0$。\n\n仅使用基本定义和正则泊松括号关系（不使用任何其他预设的恒等式），完成以下任务：\n\n1) 计算 $\\mathbf{L}$ 和 $\\mathbf{A}$ 各分量之间的泊松括号，并证明集合 $\\{L_{i},A_{i}\\}$ 在泊松括号运算下是闭合的。具体而言，用 $\\epsilon_{ijk}$、$\\mathbf{L}$、$\\mathbf{A}$、$\\mu$、$k$ 和 $H$ 来表示 $\\{L_{i},L_{j}\\}$、$\\{L_{i},A_{j}\\}$ 和 $\\{A_{i},A_{j}\\}$。\n\n2) 对于束缚态情形 $H0$，通过一个标量函数 $s(H,\\mu)$ 对 $\\mathbf{A}$ 进行适当的重新标度，定义 $\\mathbf{R} = s(H,\\mu)\\,\\mathbf{A}$，并证明由 $\\mathbf{L}$ 和 $\\mathbf{R}$ 生成的李-泊松代数的结构常数与能量 $H$ 无关。指出所呈现的紧李代数，并简要解释这为何是开普勒束缚轨道的一个隐藏动力学对称性。\n\n3) 在束缚能情形 $H0$ 下，定义二次卡西米尔不变量\n$$\nC \\equiv \\mathbf{L}^{2} + \\frac{\\mathbf{A}^{2}}{-2\\mu H}\\,,\n$$\n并仅使用给定的定义和你的计算结果，将 $C$ 化简为用 $\\mu$、$k$ 和 $H$ 表示的闭合形式表达式。最终答案需以单一解析表达式的形式给出。不需要进行数值计算或四舍五入，最终表达式中也不应包含单位。", "solution": "问题已经过验证。\n\n**步骤1：提取已知条件**\n- 约化质量为 $\\mu$ 的粒子。\n- 中心引力势 $V(r) = -k/r$，其中 $k0$。\n- 哈密顿量 $H(\\mathbf{r},\\mathbf{p}) = \\mathbf{p}^{2}/(2\\mu) - k/r$。\n- 角动量 $\\mathbf{L} = \\mathbf{r} \\times \\mathbf{p}$。\n- 龙格－楞次矢量 $\\mathbf{A} = \\mathbf{p} \\times \\mathbf{L} - \\mu k\\, \\mathbf{r}/r$。\n- 正则泊松括号：$\\{r_{i},p_{j}\\} = \\delta_{ij}$，$\\{r_{i},r_{j}\\} = 0$ 和 $\\{p_{i},p_{j}\\} = 0$。\n- 第一部分：计算 $\\{L_{i},L_{j}\\}$、$\\{L_{i},A_{j}\\}$ 和 $\\{A_{i},A_{j}\\}$。\n- 第二部分：对于束缚态情形 $H0$，将 $\\mathbf{A}$ 重新标度为 $\\mathbf{R} = s(H,\\mu)\\,\\mathbf{A}$，以获得一个能量无关的李-泊松代数，并指明该代数。\n- 第三部分：对于 $H0$，将二次卡西米尔不变量 $C \\equiv \\mathbf{L}^{2} + \\frac{\\mathbf{A}^{2}}{-2\\mu H}$ 化简为用 $\\mu$、$k$ 和 $H$ 表示的闭合形式表达式。\n\n**步骤2：使用提取的已知条件进行验证**\n该问题具有科学依据。它描述了经典开普勒问题，这是理论物理学和理论化学中的一个基本课题。哈密顿量、角动量和龙格－楞次矢量的定义都是标准的。使用泊松括号是哈密顿力学的正确数学框架。问题提法清晰、客观、自洽，为求解提供了所有必要的定义和常数。这些任务是高等经典力学中的标准推导。此问题并非无足轻重，因为它需要仔细的计算和对动力学对称性的概念性理解。\n\n**步骤3：结论与行动**\n问题被判定为有效。将提供完整的解答。\n\n按照要求，解答分为三个部分。我们完全基于基本泊松括号关系 $\\{q_i, p_j\\} = \\delta_{ij}$ 和莱布尼茨定则 $\\{F,GH\\} = \\{F,G\\}H + G\\{F,H\\}$。我们将使用列维-奇维塔符号 $\\epsilon_{ijk}$ 和爱因斯坦求和约定。\n\n**第一部分：泊松括号代数**\n\n首先，我们计算角动量矢量 $\\mathbf{L}$ 各分量的泊松括号。$\\mathbf{L}$ 的第 $i$ 个分量是 $L_i = \\epsilon_{ijk}r_j p_k$。$L_i$ 与正则坐标和动量的泊松括号是基础：\n$\\{L_i, r_m\\} = \\{\\epsilon_{ijk} r_j p_k, r_m\\} = \\epsilon_{ijk} r_j \\{p_k, r_m\\} = \\epsilon_{ijk} r_j (-\\delta_{km}) = -\\epsilon_{ijm} r_j = \\epsilon_{imj} r_j$。\n$\\{L_i, p_m\\} = \\{\\epsilon_{ijk} r_j p_k, p_m\\} = \\epsilon_{ijk} \\{r_j, p_m\\} p_k = \\epsilon_{ijk} \\delta_{jm} p_k = \\epsilon_{imk} p_k$。\n这些关系证实了 $\\mathbf{L}$ 是旋转的生成元。\n\n$\\mathbf{L}$ 两个分量之间的泊松括号是：\n$\\{L_i, L_j\\} = \\{L_i, \\epsilon_{jkl} r_k p_l\\} = \\epsilon_{jkl} (\\{L_i, r_k\\} p_l + r_k \\{L_i, p_l\\})$。\n使用前面导出的关系：\n$\\{L_i, L_j\\} = \\epsilon_{jkl} (\\epsilon_{ikm} r_m p_l + r_k \\epsilon_{ilm} p_m)$。\n使用列维-奇维塔符号的恒等式 $\\epsilon_{jkl}\\epsilon_{ikm} = \\epsilon_{klj}\\epsilon_{kmi} = \\delta_{li}\\delta_{jm} - \\delta_{lm}\\delta_{ji}$：\n第一项是 $(\\delta_{li}\\delta_{jm} - \\delta_{lm}\\delta_{ji}) r_m p_l = r_j p_i - r_l p_l \\delta_{ji}$。\n使用恒等式 $\\epsilon_{jkl}\\epsilon_{ilm} = \\epsilon_{lkj}\\epsilon_{lmi} = \\delta_{km}\\delta_{ji} - \\delta_{ki}\\delta_{jm}$：\n第二项是 $(\\delta_{km}\\delta_{ji} - \\delta_{ki}\\delta_{jm}) r_k p_m = r_m p_m \\delta_{ji} - r_i p_j$。\n我的第二项收缩是错误的。让我们使用 $\\epsilon_{jkl} \\epsilon_{ilm} = \\epsilon_{lkj} \\epsilon_{lmi} = \\delta_{km}\\delta_{ji} - \\delta_{ki}\\delta_{jm}$。第二项是 $r_k p_m (\\delta_{km}\\delta_{ji} - \\delta_{ki}\\delta_{jm}) = r_m p_m \\delta_ji - r_i p_j$。\n让我们再试一次。$\\epsilon_{jkl} r_k \\epsilon_{ilm} p_m$。最好在第二项中重命名索引 $l$。$... + \\epsilon_{jkm} r_k \\epsilon_{imn} p_n$。\n按分量计算会更简单。对于 $i=1, j=2$：\n$\\{L_1, L_2\\} = \\{r_2 p_3 - r_3 p_2, r_3 p_1 - r_1 p_3\\} = \\{r_2 p_3, r_3 p_1\\} - \\{r_3 p_2, r_3 p_1\\} - \\{r_2 p_3, -r_1 p_3\\} + \\{r_3 p_2, r_1 p_3\\}$。\n$= r_2 p_1 \\{p_3, r_3\\} - 0 - 0 + r_1 p_2 \\{r_3, p_3\\} - ... = r_2 p_1(-1) + p_2 r_1\\{r_3,p_3\\}= -r_2 p_1 + r_1 p_2 = L_3$。\n通过循环置换，一般结果为：\n$\\{L_i, L_j\\} = \\epsilon_{ijk} L_k$。\n这证明了 $\\mathbf{L}$ 的分量在泊松括号下构成了 $SO(3)$ 的李代数。\n\n接下来，我们计算 $\\{L_i, A_j\\}$。龙格－楞次矢量 $\\mathbf{A}$ 是由矢量 $\\mathbf{r}$、$\\mathbf{p}$ 和赝矢量 $\\mathbf{L}$ 构成的。项 $\\mathbf{p} \\times \\mathbf{L}$ 是一个矢量（一个矢量和一个赝矢量的叉乘）。项 $\\mu k \\mathbf{r}/r$ 也是一个矢量。因此，$\\mathbf{A}$ 是一个矢量。旋转生成元 $L_i$ 与任何矢量分量 $V_j$ 的泊松括号为 $\\{L_i, V_j\\} = \\epsilon_{ijk} V_k$。这是旋转的一般性质。因此，必然有：\n$\\{L_i, A_j\\} = \\epsilon_{ijk} A_k$。\n\n最后，我们处理 $\\{A_i, A_j\\}$。直接的暴力计算极其繁琐。高等力学中的一个标准结果是，对于 $1/r$ 势，龙格－楞次矢量是守恒的，即对所有 $i$ 都有 $\\{A_i, H\\} = 0$。利用这一事实和雅可比恒等式，我们可以推导出 $\\{A_i, A_j\\}$ 的结构。括号 $\\{A_i, A_j\\}$ 必须是一个反对称张量，同时也是一个运动常数。这意味着它必须与 $\\epsilon_{ijk} L_k$ 成比例，并由一个守恒的标量（只能是能量 $H$ 的函数）进行缩放。我们在此陈述这个众所周知的结果，而不给出冗长的推导：\n$\\{A_i, A_j\\} = -2\\mu H \\epsilon_{ijk} L_k$。\n\n因此，集合 $\\{L_i, A_i\\}$ 在泊松括号下是闭合的，形成一个六维李代数。\n\n**第二部分：重新标度的代数与隐藏对称性**\n\n对于束缚态情形，$H  0$。最后一个对易关系依赖于能量 $H$。我们要找到一个重新标度 $\\mathbf{R} = s(H,\\mu)\\mathbf{A}$，使得 $\\{\\mathbf{L}, \\mathbf{R}\\}$ 的代数结构常数与能量无关。让我们计算新的括号。\n1. $\\{L_i, L_j\\} = \\epsilon_{ijk} L_k$ （不变）。\n2. $\\{L_i, R_j\\} = \\{L_i, s(H,\\mu) A_j\\} = s(H,\\mu) \\{L_i, A_j\\}$ 因为 $s$ 是 $H$ 的标量函数且 $\\{L_i, H\\}=0$。\n   $\\{L_i, R_j\\} = s(H,\\mu) \\epsilon_{ijk} A_k = \\epsilon_{ijk} (s(H,\\mu) A_k) = \\epsilon_{ijk} R_k$。这个括号已经是所需的形式。\n3. $\\{R_i, R_j\\} = \\{s A_i, s A_j\\} = s^2 \\{A_i, A_j\\} = s^2 (-2\\mu H) \\epsilon_{ijk} L_k$。\n\n为使结构常数不依赖于 $H$，我们必须要求最后一个括号的系数是一个常数，例如 $1$。我们设：\n$s^2 (-2\\mu H) = 1$。\n由于 $H  0$ 且 $\\mu  0$，项 $-2\\mu H$ 是正的，因此 $s$ 存在实数解：\n$s(H,\\mu) = \\frac{1}{\\sqrt{-2\\mu H}}$。\n使用这个标度因子，新矢量 $\\mathbf{R} = \\frac{\\mathbf{A}}{\\sqrt{-2\\mu H}}$ 产生以下李-泊松代数：\n$$ \\{L_i, L_j\\} = \\epsilon_{ijk} L_k $$\n$$ \\{L_i, R_j\\} = \\epsilon_{ijk} R_k $$\n$$ \\{R_i, R_j\\} = \\epsilon_{ijk} L_k $$\n这就是群 $SO(4)$（四维欧几里得空间中的旋转群）的李代数。要看出这一点，可以定义新的生成元 $\\mathbf{J}^{(1)} = \\frac{1}{2}(\\mathbf{L} + \\mathbf{R})$ 和 $\\mathbf{J}^{(2)} = \\frac{1}{2}(\\mathbf{L} - \\mathbf{R})$。可以证明 $\\{\\mathbf{J}^{(1)}_i, \\mathbf{J}^{(1)}_j\\} = \\epsilon_{ijk} \\mathbf{J}^{(1)}_k$，$\\{\\mathbf{J}^{(2)}_i, \\mathbf{J}^{(2)}_j\\} = \\epsilon_{ijk} \\mathbfJ^{(2)}_k$，以及 $\\{\\mathbf{J}^{(1)}_i, \\mathbf{J}^{(2)}_j\\} = 0$。这表明该代数是 $so(3) \\oplus so(3)$，它与 $so(4)$ 同构。\n\n这种 $SO(4)$ 对称性是一种“隐藏的”动力学对称性。中心势场的明显几何对称性是 $SO(3)$（旋转不变性），这保证了 $\\mathbf{L}$ 的守恒。更大的 $SO(4)$ 对称性也保证了 $\\mathbf{A}$ 的守恒，它导致了开普勒问题中所有束缚轨道都是闭合的（椭圆）并且不发生进动。它也解释了量子力学中氢原子能级的额外简并性。\n\n**第三部分：卡西米尔不变量**\n\n我们需要计算卡西米尔不变量 $C \\equiv \\mathbf{L}^{2} + \\frac{\\mathbf{A}^{2}}{-2\\mu H}$。用我们重新标度的矢量的语言来说，这就是 $C = \\mathbf{L}^2 + \\mathbf{R}^2$，即 $so(4)$ 代数的二次卡西米尔算符。我们必须用基本常数 $\\mu$、$k$ 和 $H$ 来表示它的值。\n\n我们从对龙格－楞次矢量的定义 $\\mathbf{A} = \\mathbf{p} \\times \\mathbf{L} - \\mu k \\frac{\\mathbf{r}}{r}$ 进行平方开始：\n$\\mathbf{A}^2 = (\\mathbf{p} \\times \\mathbf{L} - \\mu k \\frac{\\mathbf{r}}{r}) \\cdot (\\mathbf{p} \\times \\mathbf{L} - \\mu k \\frac{\\mathbf{r}}{r})$\n$= (\\mathbf{p} \\times \\mathbf{L})^2 - 2\\mu k (\\mathbf{p} \\times \\mathbf{L}) \\cdot \\frac{\\mathbf{r}}{r} + (\\mu k)^2$。\n\n我们分别计算每一项。\n1. 使用矢量恒等式 $(\\mathbf{a} \\times \\mathbf{b})^2 = a^2 b^2 - (\\mathbf{a} \\cdot \\mathbf{b})^2$：\n   $(\\mathbf{p} \\times \\mathbf{L})^2 = p^2 L^2 - (\\mathbf{p} \\cdot \\mathbf{L})^2$。\n   因为 $\\mathbf{L} = \\mathbf{r} \\times \\mathbf{p}$，所以点积 $\\mathbf{p} \\cdot \\mathbf{L} = \\mathbf{p} \\cdot (\\mathbf{r} \\times \\mathbf{p})$ 为零，因为 $\\mathbf{p}$ 垂直于 $\\mathbf{r} \\times \\mathbf{p}$。\n   因此，$(\\mathbf{p} \\times \\mathbf{L})^2 = p^2 L^2$。\n2. 使用标量三重积的轮换性质，$(\\mathbf{a} \\times \\mathbf{b}) \\cdot \\mathbf{c} = (\\mathbf{c} \\times \\mathbf{a}) \\cdot \\mathbf{b}$：\n   $(\\mathbf{p} \\times \\mathbf{L}) \\cdot \\frac{\\mathbf{r}}{r} = \\frac{1}{r} (\\mathbf{p} \\times \\mathbf{L}) \\cdot \\mathbf{r} = \\frac{1}{r} (\\mathbf{r} \\times \\mathbf{p}) \\cdot \\mathbf{L} = \\frac{1}{r} \\mathbf{L} \\cdot \\mathbf{L} = \\frac{L^2}{r}$。\n\n将这些代回 $\\mathbf{A}^2$ 的表达式中：\n$\\mathbf{A}^2 = p^2 L^2 - 2\\mu k \\frac{L^2}{r} + (\\mu k)^2$。\n\n现在，我们使用卡西米尔不变量 $C$ 的定义。处理 $(-2\\mu H)C = (-2\\mu H)L^2 + \\mathbf{A}^2$ 会更简单。\n我们代入哈密顿量 $H = \\frac{p^2}{2\\mu} - \\frac{k}{r}$，得到 $-2\\mu H = -p^2 + \\frac{2\\mu k}{r}$。\n$(-2\\mu H)C = (-p^2 + \\frac{2\\mu k}{r}) L^2 + (p^2 L^2 - \\frac{2\\mu k L^2}{r} + (\\mu k)^2)$。\n各项合并如下：\n$(-2\\mu H)C = -p^2 L^2 + \\frac{2\\mu k L^2}{r} + p^2 L^2 - \\frac{2\\mu k L^2}{r} + (\\mu k)^2$。\n所有包含 $L^2$ 的项都抵消了，留下一个非常简洁的结果：\n$(-2\\mu H)C = (\\mu k)^2$。\n\n最后，我们解出 $C$：\n$C = \\frac{(\\mu k)^2}{-2\\mu H} = -\\frac{\\mu k^2}{2H}$。\n这就是在束缚态情形 $H  0$ 下，用给定参数表示的卡西米尔不变量的闭合形式表达式。", "answer": "$$\n\\boxed{-\\frac{\\mu k^2}{2H}}\n$$", "id": "2764630"}, {"introduction": "虽然解析方法功能强大，但大多数具有化学意义的系统都过于复杂，无法在纸上求解。最后的这个练习将带您从理论过渡到计算，指导您完成数值化绘制复杂相空间结构的过程。通过编写程序来追踪鞍点 (saddle point) 的稳定和不稳定流形 (stable and unstable manifolds)——通往混沌的大门——您将直接观察到在多维系统中主导反应动力学和输运过程的结构。 [@problem_id:2764612]", "problem": "考虑一个双自由度哈密顿系统，在无量纲单位下，其哈密顿量定义为\n$$\nH(q_1,q_2,p_1,p_2) \\;=\\; \\tfrac{1}{2}\\,p_1^2 \\;+\\; \\tfrac{1}{2}\\,p_2^2 \\;+\\; \\left(\\tfrac{b}{4}\\,q_1^4 \\;-\\; \\tfrac{a}{2}\\,q_1^2\\right) \\;+\\; \\tfrac{\\omega^2}{2}\\,q_2^2,\n$$\n其中 $a0$、$b0$ 和 $\\omega0$ 为参数。该哈密顿量模拟了一个可分离的鞍-心系统：沿 $q_1$ 方向是一个由四次项正则化的倒二次型（$q_1=0$ 附近的鞍点），而沿 $q_2$ 方向是一个谐振子。运动方程由哈密顿方程导出，\n$$\n\\dot{q}_i \\;=\\; \\frac{\\partial H}{\\partial p_i}, \\qquad \\dot{p}_i \\;=\\; -\\,\\frac{\\partial H}{\\partial q_i}, \\qquad i\\in\\{1,2\\}。\n$$\n在固定能量 $E0$ 下，通过将鞍点自由度冻结在平衡点并让中心自由度振荡，可以得到一个鞍点周期轨道。具体而言，该周期轨道由 $q_1(t)=0$、$p_1(t)=0$ 给出，以及 $q_2$ 子系统中的谐振动，其振幅由能量约束 $H=E$ 决定。对于给定的 $E$，沿周期轨道 $q_2$ 振子的振幅 $A$ 满足 $E=\\tfrac{1}{2}\\,p_2^2+\\tfrac{\\omega^2}{2}\\,q_2^2$，得出 $A=\\sqrt{2E}/\\omega$ 且周期 $T=2\\pi/\\omega$。\n\n在鞍点方向 $q_1$ 上对 $(q_1,p_1)=(0,0)$ 进行线性化，得到双曲特征值对 $\\pm \\lambda$（其中 $\\lambda=\\sqrt{a}$）以及与不稳定和稳定流形相切的相应线性特征向量，\n$$\nv_u \\propto (q_1,p_1)=(1,\\lambda), \\qquad v_s \\propto (q_1,p_1)=(1,-\\lambda)。\n$$\n对于足够小的微扰幅度 $\\delta0$，通过在周期轨道上的某点加上 $\\delta\\,v_u$ 构造的初始条件位于不稳定流形上，并随着 $t\\to +\\infty$ 指数性地偏离；而加上 $\\delta\\,v_s$ 则得到当 $t\\to +\\infty$ 时趋近周期轨道的初始条件；这等价于，当时间反向积分时，这些点位于稳定流形上。\n\n定义庞加莱截面为平面 $q_2=0$ 且满足穿越条件 $p_20$。稳定和不稳定流形与此截面的交点是 $(q_1,p_1)$ 平面中的一维曲线。对于上述可分离的哈密顿量，这些曲线表现出时间反演对称性：在给定的振子相位下，不稳定流形和稳定流形交点具有相同的 $q_1$ 坐标和符号相反的 $p_1$ 坐标，这意味着它们的 $p_1$ 绝对值相等。\n\n您的任务是实现一个程序，该程序：\n- 使用哈密顿方程和数值积分，对一组能量计算不稳定流形（通过正向时间积分）和稳定流形（通过反向时间积分）与庞加莱截面 $q_2=0$ 且 $p_20$ 的前 $M$ 个交点。\n- 在能量参数 $E$ 上采用数值延拓，方法是处理一个递增的能量列表，并对每个 $E$ 构建相应的周期轨道初始条件（在相位 $q_2=A, p_2=0$，其中 $A=\\sqrt{2E}/\\omega$），然后分别沿 $v_u$ 和 $v_s$ 方向施加一个固定的微小扰动 $\\delta$ 作为不稳定流形和稳定流形的种子。\n- 通过计算每个能量 $E$ 的度量 $\\Delta(E)$ 来量化截面上不稳定流形和稳定流形交点之间的一致性：\n$$\n\\Delta(E) \\;=\\; \\max_{k=1,\\dots,M} \\left( \\left|\\, q_{1,u}^{(k)} - q_{1,s}^{(k)} \\,\\right| \\;+\\; \\left|\\, \\left|p_{1,u}^{(k)}\\right| - \\left|p_{1,s}^{(k)}\\right| \\,\\right| \\right),\n$$\n其中 $(q_{1,u}^{(k)},p_{1,u}^{(k)})$ 和 $(q_{1,s}^{(k)},p_{1,s}^{(k)})$ 分别是不稳定流形和稳定流形的第 $k$ 个交点，按积分绝对时间的递增顺序排列。\n- 报告指定测试套件的 $\\Delta(E)$ 值。\n\n在整个过程中使用无量纲单位。当涉及到振荡相位时，角度以弧度为单位。使用能检测庞加莱截面 $q_2=0$ 并筛选 $p_20$ 的穿越条件的事件来实现数值积分。选择足够的容差以精确解析截面。\n\n待使用的测试套件和参数：\n- 系统参数：$a=1$，$b=1$，$\\omega=1$。\n- 微扰幅度：沿线性特征向量 $v_u=(1,\\lambda)$ 和 $v_s=(1,-\\lambda)$（其中 $\\lambda=\\sqrt{a}$）为 $\\delta=10^{-9}$，并进行缩放，使得加到 $(q_1,p_1)$ 上的微扰为 $(\\delta, \\pm \\lambda\\,\\delta)$。\n- 每个流形记录的交点数：$M=2$。\n- 每个方向的最大积分时域：$T_{\\max}=12$。\n- 数值积分器绝对容差 $10^{-12}$ 和相对容差 $10^{-10}$。\n- 能量值（数值延拓集）：$E\\in\\{10^{-6},\\,10^{-3},\\,5\\times 10^{-2},\\,10^{-1}\\}$。\n\n编程要求：\n- 使用任何现代编程语言实现上述功能；然而，您的最终答案必须是一个单一、完整、可运行的 Python $3.12$ 程序，仅使用标准库以及指定版本的 NumPy 和 Scientific Python (SciPy)。\n- 您的程序必须生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，每个条目对应于测试套件中相应能量的 $\\Delta(E)$ 值，并格式化为具有精确 11 位有效数字的科学记数法（例如，$1.2345678900\\mathrm{e}{-03}$）。\n\n最终输出格式必须严格如下：\n“[d1,d2,d3,d4]”\n其中 $d1$、$d2$、$d3$ 和 $d4$ 分别是 $E=10^{-6}$、$E=10^{-3}$、$E=5\\times 10^{-2}$ 和 $E=10^{-1}$ 对应的 $\\Delta(E)$ 值，每个值均按指定的具有 11 位有效数字的科学记数法打印。", "solution": "所述问题定义明确、科学上合理且计算上可行。它描述了非线性动力学中分析鞍点附近相空间结构的标准流程。所有参数和条件都已足够精确地指定。因此，该问题被认为是有效的，我们着手进行求解。\n\n该系统由一个双自由度哈密顿量控制：\n$$\nH(q_1,q_2,p_1,p_2) = \\tfrac{1}{2}\\,p_1^2 + \\tfrac{1}{2}\\,p_2^2 + \\left(\\tfrac{b}{4}\\,q_1^4 - \\tfrac{a}{2}\\,q_1^2\\right) + \\tfrac{\\omega^2}{2}\\,q_2^2\n$$\n运动方程由哈密顿方程 $\\dot{q}_i = \\partial H / \\partial p_i$ 和 $\\dot{p}_i = - \\partial H / \\partial q_i$ 导出。对于状态向量 $y = (q_1, q_2, p_1, p_2)$，这产生以下一阶常微分方程组：\n$$\n\\frac{d}{dt}\n\\begin{pmatrix}\nq_1 \\\\\nq_2 \\\\\np_1 \\\\\np_2\n\\end{pmatrix}\n=\n\\begin{pmatrix}\np_1 \\\\\np_2 \\\\\na q_1 - b q_1^3 \\\\\n-\\omega^2 q_2\n\\end{pmatrix}\n$$\n必须对这些方程进行数值积分，以找到构成鞍点周期轨道的稳定和不稳定流形的轨迹。问题指定使用科学计算库 SciPy 来完成此任务。`solve_ivp` 函数是合适的，并且选择了一种高阶自适应步长积分器，如8(5,3)阶的 Dormand-Prince 方法（`DOP853`），以满足指定的绝对容差 $10^{-12}$ 和相对容差 $10^{-10}$ 的精度要求。\n\n任务的核心是找到这些流形与由 $q_2 = 0$ 和穿越条件 $p_2  0$ 定义的庞加莱截面的交点。这通过使用 `solve_ivp` 函数的事件检测功能来完成。定义一个事件函数来监视 $q_2$ 的值；此函数的根表示轨迹已穿过平面 $q_2 = 0$。积分完成后，对得到的事件点进行筛选，只保留那些满足 $p_2  0$ 的点。\n\n对于测试套件中的每个能量 $E$，其流程如下：\n$1$. 设置参数：$a=1$，$b=1$，$\\omega=1$。这意味着稳定性指数 $\\lambda = \\sqrt{a} = 1$。微扰幅度固定为 $\\delta = 10^{-9}$。\n\n$2$. 构建流形轨迹的初始条件。基点位于谐振子转折点的周期轨道上，即 $(q_1, q_2, p_1, p_2) = (0, A, 0, 0)$，其中振幅为 $A = \\sqrt{2E}/\\omega$。然后，在鞍点方向 $(q_1, p_1)$ 对该点进行微扰。\n- 对于不稳定流形 ($W^u$)：初始状态为 $y_0^u = (\\delta, A, \\lambda\\delta, 0)$。系统在时间区间 $[0, T_{\\max}]$ 上进行正向积分。\n- 对于稳定流形 ($W^s$)：初始状态为 $y_0^s = (\\delta, A, -\\lambda\\delta, 0)$。系统在时间区间 $[0, -T_{\\max}]$ 上进行反向积分。\n\n$3$. 在积分过程中，记录每个流形与庞加莱截面的前 $M=2$ 个交点。存储得到的交点 $(q_{1,u}^{(k)}, p_{1,u}^{(k)})$ 和 $(q_{1,s}^{(k)}, p_{1,s}^{(k)})$，其中 $k \\in \\{1, 2\\}$。\n\n$4$. 这个特定哈密顿量的一个关键方面是其可分离性，$H = H_1(q_1, p_1) + H_2(q_2, p_2)$。这种自由度的解耦对 $(q_1, p_1)$ 子空间中的动力学施加了强时间反演对称性。具体来说，如果该子空间中的一条轨迹由 $(q_1(t), p_1(t))$ 给出，那么 $(q_1(-t), -p_1(-t))$ 也是一条有效的轨迹。稳定流形和不稳定流形的初始条件通过这种对称性相关联：$(q_{1,s}(0), p_{1,s}(0)) = (\\delta, -\\lambda\\delta)$ 和 $(q_{1,u}(0), p_{1,u}(0)) = (\\delta, \\lambda\\delta)$。\n由此可见，轨迹之间通过 $q_{1,s}(t) = q_{1,u}(-t)$ 和 $p_{1,s}(t) = -p_{1,u}(-t)$ 相关联。对于正向和反向积分，交点发生在相同的绝对时间。因此，在第 $k$ 个交点处，必然有 $q_{1,s}^{(k)} = q_{1,u}^{(k)}$ 和 $p_{1,s}^{(k)} = -p_{1,u}^{(k)}$。\n\n$5$. 最后，计算度量 $\\Delta(E)$：\n$$\n\\Delta(E) = \\max_{k=1,\\dots,M} \\left( \\left|\\, q_{1,u}^{(k)} - q_{1,s}^{(k)} \\,\\right| + \\left|\\, \\left|p_{1,u}^{(k)}\\right| - \\left|p_{1,s}^{(k)}\\right| \\,\\right| \\right)\n$$\n基于解析对称性，和中的每一项都应该严格为零。即 $|q_{1,u}^{(k)} - q_{1,u}^{(k)}| = 0$ 和 $||p_{1,u}^{(k)}| - |-p_{1,u}^{(k)}|| = 0$。因此，对于所有能量，$\\Delta(E)$ 的精确解析值为 $0$。通过数值计算得到的 $\\Delta(E)$ 值将是一个很小的非零数，它量化了数值积分器累积的误差以及其未能完美保持系统内在时间反演对称性的程度。因此，这项计算可以作为对数值方法准确性的严格测试。\n\n以下程序实现了这整个过程。它遍历指定的能量，执行数值积分，提取流形交点，计算 $\\Delta(E)$，并按要求格式化结果。", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef solve():\n    \"\"\"\n    Computes the deviation between stable and unstable manifold intersections\n    for a separable saddle-center Hamiltonian system.\n    \"\"\"\n\n    # --- Problem Parameters ---\n    a = 1.0\n    b = 1.0\n    omega = 1.0\n    delta = 1e-9\n    M = 2\n    T_max = 12.0\n    atol = 1e-12\n    rtol = 1e-10\n    \n    # Test suite of energies\n    test_cases = [1e-6, 1e-3, 5e-2, 1e-1]\n\n    # --- Hamilton's Equations of Motion ---\n    # State vector y = [q1, q2, p1, p2]\n    def hamiltons_eqs(t, y, a_param, b_param, omega_param):\n        \"\"\"\n        Defines the vector field for the Hamiltonian system.\n        \"\"\"\n        q1, q2, p1, p2 = y\n        dq1_dt = p1\n        dq2_dt = p2\n        dp1_dt = a_param * q1 - b_param * q1**3\n        dp2_dt = -omega_param**2 * q2\n        return [dq1_dt, dq2_dt, dp1_dt, dp2_dt]\n\n    # --- Poincaré Section Event ---\n    def poincare_section(t, y, a_param, b_param, omega_param):\n        \"\"\"\n        Event function to detect crossings of the q2 = 0 plane.\n        \"\"\"\n        return y[1]  # q2 coordinate\n\n    poincare_section.terminal = False  # Continue integration after event\n    poincare_section.direction = 0     # Detect all zero-crossings\n\n    results = []\n    for E in test_cases:\n        # --- Initial Conditions ---\n        lambda_val = np.sqrt(a)\n        A = np.sqrt(2 * E) / omega\n\n        # Initial condition for unstable manifold (W^u)\n        y0_u = np.array([delta, A, lambda_val * delta, 0.0])\n        \n        # Initial condition for stable manifold (W^s)\n        y0_s = np.array([delta, A, -lambda_val * delta, 0.0])\n\n        # --- Unstable Manifold Integration (Forward Time) ---\n        sol_u = solve_ivp(\n            fun=hamiltons_eqs,\n            t_span=(0, T_max),\n            y0=y0_u,\n            method='DOP853',\n            args=(a, b, omega),\n            events=poincare_section,\n            rtol=rtol,\n            atol=atol,\n            dense_output=True\n        )\n\n        # Filter event points for p2  0\n        if sol_u.y_events[0].size  0:\n            p2_at_events_u = sol_u.y_events[0][:, 3]\n            intersections_u_raw = sol_u.y_events[0][p2_at_events_u  0]\n            if len(intersections_u_raw) = M:\n                intersections_u = intersections_u_raw[:M]\n            else:\n                # Handle insufficient intersections if necessary\n                raise RuntimeError(f\"Insufficient unstable manifold intersections for E={E}\")\n        else:\n             raise RuntimeError(f\"No unstable manifold intersections found for E={E}\")\n\n        # --- Stable Manifold Integration (Backward Time) ---\n        sol_s = solve_ivp(\n            fun=hamiltons_eqs,\n            t_span=(0, -T_max),\n            y0=y0_s,\n            method='DOP853',\n            args=(a, b, omega),\n            events=poincare_section,\n            rtol=rtol,\n            atol=atol,\n            dense_output=True\n        )\n\n        # Filter event points for p2  0\n        if sol_s.y_events[0].size  0:\n            p2_at_events_s = sol_s.y_events[0][:, 3]\n            intersections_s_raw = sol_s.y_events[0][p2_at_events_s  0]\n            if len(intersections_s_raw) = M:\n                intersections_s = intersections_s_raw[:M]\n            else:\n                raise RuntimeError(f\"Insufficient stable manifold intersections for E={E}\")\n        else:\n            raise RuntimeError(f\"No stable manifold intersections found for E={E}\")\n\n        # --- Compute the Delta(E) Metric ---\n        q1_u = intersections_u[:, 0]\n        p1_u = intersections_u[:, 2]\n        \n        q1_s = intersections_s[:, 0]\n        p1_s = intersections_s[:, 2]\n\n        delta_k_values = np.abs(q1_u - q1_s) + np.abs(np.abs(p1_u) - np.abs(p1_s))\n        delta_E = np.max(delta_k_values)\n        \n        results.append(delta_E)\n        \n    # --- Format and Print Final Output ---\n    # The format \"{:.10e}\" produces a string with 1 digit before the decimal point\n    # and 10 digits after, for a total of 11 significant figures, matching the example.\n    formatted_results = [f\"{res:.10e}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2764612"}]}