{"hands_on_practices": [{"introduction": "我们的探索始于一个基本但至关重要的问题：平动配分函数是否依赖于其容器的几何形状？通过一个思想实验，我们比较一个分子在立方体和球形容器中的平动配分函数，这两个容器体积相同。此练习旨在阐明经典近似的一个基本特征，即在宏观尺度下，配分函数仅依赖于系统的体积 $V$ 而非其边界的具体形状 [@problem_id:2014964]。", "problem": "考虑一个质量为 $m$ 的氮气分子，它被视为理想气体粒子。该分子被限制在一个温度恒为 $T$ 的容器内。我们比较两种情况。在情况 A 中，容器是一个内部体积为 $V_0 = 1.00$ 升的立方体盒子。在情况 B 中，容器是一个球形烧瓶，其内部体积同样为 $V_0 = 1.00$ 升。设 $q_{cube}$ 是氮气分子在立方体盒子中的平动配分函数，而 $q_{sphere}$ 是其在球形烧瓶中的平动配分函数。假设温度足够高，其平动可以被经典地处理。普朗克常数为 $h$，玻尔兹曼常数为 $k_B$。\n\n比值 $R = \\frac{q_{sphere}}{q_{cube}}$ 的值为多少？\n\nA. $1$\n\nB. $\\frac{\\pi}{6}$\n\nC. $\\frac{6}{\\pi}$\n\nD. $(\\frac{4\\pi}{3})^{1/3}$\n\nE. $(\\frac{\\pi}{6})^{1/3}$", "solution": "对于单个粒子，在经典（高温）极限下，其平动配分函数可由相空间积分得到，\n$$\nq=\\frac{1}{h^{3}}\\int_{V}d^{3}r\\int d^{3}p\\,\\exp\\!\\left(-\\beta\\frac{p^{2}}{2m}\\right),\n$$\n其中 $\\beta=1/(k_{B}T)$。空间积分得到可及体积 $V$，该体积只取决于容器的容积，而与容器的形状无关：\n$$\n\\int_{V}d^{3}r=V.\n$$\n动量积分是一个高斯积分，其计算结果为\n$$\n\\int d^{3}p\\,\\exp\\!\\left(-\\beta\\frac{p^{2}}{2m}\\right)=(2\\pi m k_{B}T)^{3/2}.\n$$\n因此，\n$$\nq=\\frac{V(2\\pi m k_{B}T)^{3/2}}{h^{3}}.\n$$\n由于立方体和球体具有相同的体积 $V_{0}$，它们的单粒子平动配分函数相等：\n$$\nq_{cube}=q_{sphere}=\\frac{V_{0}(2\\pi m k_{B}T)^{3/2}}{h^{3}}.\n$$\n因此，该比值为\n$$\nR=\\frac{q_{sphere}}{q_{cube}}=1.\n$$", "answer": "$$\\boxed{A}$$", "id": "2014964"}, {"introduction": "在经典极限下，我们通常将粒子视为可分辨的，或使用一个校正因子 $N!$ 来处理不可分辨性，而不考虑其内在的量子统计特性。然而，粒子实际上遵循费米-狄拉克统计或玻色-爱因斯坦统计。这个练习将我们带回量子力学的基础，要求我们通过对少量量子态进行求和，为少量粒子（玻色子与费米子）构建平动配分函数 [@problem_id:2014983]。这揭示了泡利不相容原理等量子规则如何从根本上影响系统的微观状态计数和宏观热力学性质。", "problem": "考虑一个由两个质量为 $m$ 的无相互作用全同粒子组成的系统，它们被限制在一个长度为 $L$ 的一维无限深势阱中。单粒子能量本征态由量子数 $n \\in \\{1, 2, 3, \\dots\\}$ 索引，其能量为 $E_n = n^2 E_0$，其中 $E_0 = \\frac{h^2}{8mL^2}$ 是一个代表基态能量标度的常数。该系统与一个恒定温度为 $T$ 的热库处于热接触状态。\n\n这个双粒子系统的正则配分函数由求和 $Z = \\sum_S \\exp(-\\beta E_S)$ 给出，其中求和遍历所有不同的双粒子量子态 $S$，$E_S$ 是态 $S$ 的总能量，$\\beta = (k_B T)^{-1}$，而 $k_B$ 是玻尔兹曼常数。\n\n为了探究量子统计的效应，我们将在一个特定约束下计算这个配分函数。你只需考虑那些由单粒子量子数对 $(n_1, n_2)$ 描述的、且量子数之和小于或等于五的双粒子态，即 $n_1 + n_2 \\le 5$。请记住，对于全同粒子，态 $(n_1, n_2)$ 与态 $(n_2, n_1)$ 是不可区分的。\n\n在此约束下，计算玻色子的双粒子配分函数 $Z_B$ 与费米子的双粒子配分函数 $Z_F$ 的比值。将你的最终答案表示为关于变量 $x = \\exp(-\\beta E_0)$ 的单个符号表达式。", "solution": "对于一维无限深方势阱，单粒子能级为 $E_{n} = n^{2}E_{0}$，其中 $n \\in \\{1,2,3,\\dots\\}$。对于两个无相互作用的全同粒子，一对被占据的单粒子能级 $(n_{1},n_{2})$ 的总能量为\n$$\nE_{S} = E_{n_{1}} + E_{n_{2}} = (n_{1}^{2} + n_{2}^{2})E_{0}.\n$$\n当 $x = \\exp(-\\beta E_{0})$ 时，这样一个态的玻尔兹曼权重为\n$$\n\\exp(-\\beta E_{S}) = \\exp\\!\\big(-\\beta (n_{1}^{2} + n_{2}^{2})E_{0}\\big) = x^{n_{1}^{2} + n_{2}^{2}}.\n$$\n因为粒子是全同的，无序对 $\\{n_{1},n_{2}\\}$ 标记一个单一的双粒子态，并有附加限制：$n_{1} = n_{2}$ 的情况只对玻色子允许，而根据泡利不相容原理对费米子是禁止的。约束条件 $n_{1} + n_{2} \\le 5$ 产生以下无序对\n$$\n(1,1),\\ (2,1),\\ (3,1),\\ (2,2),\\ (4,1),\\ (3,2).\n$$\n它们各自的贡献分别为 $x^{2}, x^{5}, x^{10}, x^{8}, x^{17}, x^{13}$，因为对于所列出的数对，$n_{1}^{2} + n_{2}^{2}$ 的值分别为 $2, 5, 10, 8, 17, 13$。因此，\n$$\nZ_{B} = x^{2} + x^{5} + x^{10} + x^{8} + x^{17} + x^{13} = x^{2} + x^{5} + x^{8} + x^{10} + x^{13} + x^{17},\n$$\n而对于费米子，相同能级的数对被排除在外，得到\n$$\nZ_{F} = x^{5} + x^{10} + x^{13} + x^{17}.\n$$\n因此，比值为\n$$\n\\frac{Z_{B}}{Z_{F}} = \\frac{x^{2} + x^{5} + x^{8} + x^{10} + x^{13} + x^{17}}{x^{5} + x^{10} + x^{13} + x^{17}}.\n$$", "answer": "$$\\boxed{\\frac{x^{2} + x^{5} + x^{8} + x^{10} + x^{13} + x^{17}}{x^{5} + x^{10} + x^{13} + x^{17}}}$$", "id": "2014983"}, {"introduction": "平动配分函数的标准公式是量子态求和在高温/大体积极限下积分近似的结果。但是这个近似在何种条件下成立，其偏差有多大？这项高级计算练习要求你设计一个算法，通过直接对量子态进行求和以及使用积分近似两种方法来计算配分函数 [@problem_id:2823215]。通过在不同温度和尺寸下比较这两种方法的结果，你将亲身体验从量子到经典的过渡，并深刻理解经典近似的适用范围与局限性。", "problem": "设计并实现一个程序，该程序针对三维边长为 $L$ 的立方无限深势阱中的单个非相对论性粒子（质量为 $m$），以两种方式计算其正则平动配分函数 $q_{\\text{trans}}$，并在多个热力学和几何体系下对结果进行比较。\n\n计算必须基于正则系综的定义。从 Boltzmann 求和定义 $q_{\\text{trans}} = \\sum_{i} \\exp\\left(-\\beta E_{i}\\right)$ 出发，其中对于温度 $T$ 和 Boltzmann 常数 $k_{\\mathrm{B}}$，$\\beta = 1/\\left(k_{\\mathrm{B}} T\\right)$。三维边长为 $L$ 的立方箱中粒子的量子能级由 $E_{n_x n_y n_z} = \\frac{h^2}{8 m L^2}\\left(n_x^2 + n_y^2 + n_z^2\\right)$ 给出，其中 $n_x,n_y,n_z \\in \\mathbb{N}$。您的程序必须计算：\n\n- 基于 Hamiltonian 的可分离性的显式状态求和。利用三维求和可分解为三个相同的一维求和的乘积，其形式为 $S(c) = \\sum_{n=1}^{\\infty} \\exp\\left(-c n^2\\right)$，其中 $n \\in \\mathbb{N}$，$c = \\beta \\,\\frac{h^2}{8 m L^2}$。将此结果记为 $q_{\\text{sum}} = \\left[S(c)\\right]^3$。\n\n- 通过将量子态求和替换为具有量子元胞体积 $h^3$ 的适当相空间积分，得到的积分（连续谱）近似。将此近似记为 $q_{\\text{int}}$。$q_{\\text{int}}$ 必须用 $T$、$L$、$m$、$h$ 和 $k_{\\mathrm{B}}$ 表示，并且必须是无量纲的。体积为 $V = L^3$。\n\n为了在不同体系下保证数值稳定性和效率，一维级数 $S(c)$ 必须通过一种自适应的、可证明收敛的策略进行评估，该策略只显式使用低能级箱中态，并对其余部分进行解析处理：\n\n- 定义无量纲参数 $c = \\beta \\,\\frac{h^2}{8 m L^2}$。\n\n- 当 $c \\geq 0.5$ 时，通过显式求和 $s_N = \\sum_{n=1}^{N} \\exp\\left(-c n^2\\right)$ 并用具有半整数端点的高斯积分近似尾部来计算 $S(c)$：\n  $$R_N(c) \\approx \\int_{N+\\frac{1}{2}}^{\\infty} \\exp\\left(-c n^2\\right)\\, dn \\;=\\; \\frac{1}{2}\\sqrt{\\frac{\\pi}{c}}\\,\\mathrm{erfc}\\!\\left(\\left(N+\\frac{1}{2}\\right)\\sqrt{c}\\right),$$\n  其中 $\\mathrm{erfc}$ 是互补误差函数。增加 $N$ 直到相对尾部占比 $\\frac{R_N(c)}{s_N + R_N(c)}$ 严格小于 $10^{-12}$，然后设置 $S(c) = s_N + R_N(c)$。\n\n- 当 $c < 0.5$ 时，使用 Jacobi theta 模变换以避免对许多高能级态求和。令 $q = \\exp\\left(-\\frac{\\pi^2}{c}\\right)$，使用\n  $$S(c) \\;=\\; \\frac{1}{2}\\left(\\sqrt{\\frac{\\pi}{c}}\\left[1 + 2\\sum_{n=1}^{\\infty} q^{n^2}\\right] - 1\\right)。$$\n  在 $M$ 处截断变换后的级数，使得下一项 $q^{(M+1)^2}$ 的绝对值严格小于 $10^{-12}$，并相应地设置 $S(c)$。\n\n两种分支的构造都保证了只对低能级箱中态进行显式求和，而对其余部分进行解析控制。\n\n使用的常量和单位：\n\n- 使用 $h = 6.62607015\\times 10^{-34}\\ \\text{J s}$、$k_{\\mathrm{B}} = 1.380649\\times 10^{-23}\\ \\text{J K}^{-1}$ 以及原子质量单位 $u = 1.66053906660\\times 10^{-27}\\ \\text{kg}$。\n\n- 使用粒子质量 $m = 39.948\\,u$。\n\n- 所有温度 $T$ 均以开尔文为单位。所有箱长 $L$ 均以纳米为单位；在进行任何计算之前，您必须在内部将 $L$ 转换为米。\n\n程序输出及计算内容：\n\n- 对于下面测试套件中的每个测试用例 $(T, L)$，计算相对偏差\n  $$\\Delta(T,L) \\;=\\; \\frac{q_{\\text{sum}}(T,L) - q_{\\text{int}}(T,L)}{q_{\\text{int}}(T,L)}。$$\n\n- 您的程序必须打印单行，其中包含一个 Python 风格的列表，该列表包含测试套件的 $\\Delta(T,L)$ 值，顺序与所列完全一致，每个条目均采用科学记数法格式化，并保留八位有效数字。\n\n- 不允许有其他输出。\n\n待评估的测试套件：\n\n- 用例 1：$T = 0.5\\ \\text{K}$，$L = 1.0\\ \\text{nm}$。\n\n- 用例 2：$T = 5.0\\ \\text{K}$，$L = 2.0\\ \\text{nm}$。\n\n- 用例 3：$T = 300.0\\ \\text{K}$，$L = 5.0\\ \\text{nm}$。\n\n- 用例 4：$T = 300.0\\ \\text{K}$，$L = 50.0\\ \\text{nm}$。\n\n- 用例 5：$T = 5000.0\\ \\text{K}$，$L = 1.0\\ \\text{nm}$。\n\n最终输出格式：\n\n- 您的程序应精确地产生一行输出，其中包含一个形式为 $[x_1,x_2,x_3,x_4,x_5]$ 的列表字面量，其中每个 $x_i$ 是对应的 $\\Delta(T,L)$，采用科学记数法，并精确到八位有效数字（例如，使用像 $a.bbbbbbbb\\times 10^{e}$ 这样的格式）。列表中不允许有空格。", "solution": "此问题要求计算并比较质量为 $m$ 的单个非相对论性粒子被限制在边长为 $L$ 的三维立方箱中时的正则平动配分函数 $q_{\\text{trans}}$。计算必须通过两种不同的方法进行：一种是量子态的直接求和，$q_{\\text{sum}}$；另一种是从相空间积分推导出的经典连续谱近似，$q_{\\text{int}}$。通过相对偏差 $\\Delta = (q_{\\text{sum}} - q_{\\text{int}}) / q_{\\text{int}}$ 来进行比较。\n\n该系统由无限深势阱中粒子的 Schrödinger 方程所描述，得出立方箱中的量子化能级为：\n$$E_{n_x n_y n_z} = \\frac{h^2}{8 m L^2}\\left(n_x^2 + n_y^2 + n_z^2\\right)$$\n其中 $h$ 是 Planck 常数，量子数 $n_x, n_y, n_z$ 为正整数，即 $n_x, n_y, n_z \\in \\{1, 2, 3, \\dots\\}$。\n\n在正则系综中，配分函数是所有态 $i$ 的 Boltzmann 因子 $e^{-\\beta E_i}$ 的总和，其中 $\\beta = 1/(k_{\\mathrm{B}} T)$，$k_{\\mathrm{B}}$ 是 Boltzmann 常数，$T$ 是绝对温度。\n\n**1. 积分近似 ($q_{\\text{int}}$)**\n\n积分近似，也称为经典或高温极限，是通过将能量视为连续变量，并用相空间上的积分代替对态的求和来获得的。单个粒子的正则配分函数由以下公式给出：\n$$q_{\\text{int}} = \\frac{1}{h^3} \\iint e^{-\\beta H(\\mathbf{r}, \\mathbf{p})} \\, d^3\\mathbf{r} \\, d^3\\mathbf{p}$$\nHamiltonian 为 $H = \\frac{|\\mathbf{p}|^2}{2m} + V(\\mathbf{r})$。在箱内，势能 $V(\\mathbf{r}) = 0$，粒子被限制在体积 $V=L^3$ 内。该积分可分离为空间部分和动量部分：\n$$q_{\\text{int}} = \\frac{1}{h^3} \\left( \\int_{\\text{box}} d^3\\mathbf{r} \\right) \\left( \\int e^{-\\beta (p_x^2 + p_y^2 + p_z^2)/(2m)} \\, d^3\\mathbf{p} \\right)$$\n空间积分得出体积 $V = L^3$。动量积分是三个相同的高斯积分的乘积：\n$$\\int_{-\\infty}^{\\infty} e^{-\\beta p^2/(2m)} \\, dp = \\sqrt{\\frac{2m\\pi}{\\beta}} = \\sqrt{2\\pi m k_{\\mathrm{B}} T}$$\n综合这些结果，三维动量积分为 $(2\\pi m k_{\\mathrm{B}} T)^{3/2}$。因此，配分函数的积分近似为：\n$$q_{\\text{int}} = \\frac{V}{h^3} (2\\pi m k_{\\mathrm{B}} T)^{3/2} = L^3 \\left( \\frac{2\\pi m k_{\\mathrm{B}} T}{h^2} \\right)^{3/2}$$\n该表达式是无量纲的，符合要求。它通常写成 $q_{\\text{int}} = V / \\Lambda^3$ 的形式，其中 $\\Lambda = h/\\sqrt{2\\pi m k_{\\mathrm{B}} T}$ 是热 de Broglie 波长。\n\n**2. 状态求和方法 ($q_{\\text{sum}}$)**\n\n量子力学配分函数是对所有可能能态的离散求和：\n$$q_{\\text{sum}} = \\sum_{n_x=1}^{\\infty} \\sum_{n_y=1}^{\\infty} \\sum_{n_z=1}^{\\infty} \\exp\\left(-\\beta E_{n_x n_y n_z}\\right)$$\n由于能量表达式的加和性，Hamiltonian 是可分离的，配分函数因此可以分解为三个相同的一维配分函数的乘积：\n$$q_{\\text{sum}} = \\left[ \\sum_{n=1}^{\\infty} \\exp\\left(-\\beta \\frac{h^2 n^2}{8mL^2}\\right) \\right]^3$$\n我们定义一个无量纲参数 $c$：\n$$c = \\beta \\frac{h^2}{8mL^2} = \\frac{h^2}{8mL^2k_{\\mathrm{B}}T}$$\n这个参数 $c$ 代表了一维基态能量（$n=1$）与热能标度 $k_{\\mathrm{B}}T$ 的比值（相差一个常数因子）。它决定了系统的行为：\n-   $c \\gg 1$：量子体系（低 $T$，小 $L$）。能级间距远大于 $k_{\\mathrm{B}}T$。\n-   $c \\ll 1$：经典体系（高 $T$，大 $L$）。能级间距很小，趋近于连续谱。\n\n使用这个参数，一维求和为 $S(c) = \\sum_{n=1}^{\\infty} e^{-cn^2}$，总配分函数为 $q_{\\text{sum}} = [S(c)]^3$。\n\n**3. $S(c)$ 的数值评估**\n\n级数 $S(c)$ 的收敛速度严重依赖于 $c$。为实现稳健高效的计算，需要采用混合策略。\n\n**情况 1：量子体系 ($c \\geq 0.5$)**\n对于大的 $c$ 值，$e^{-cn^2}$ 项随着 $n$ 的增加而迅速衰减，因此级数收敛很快。我们通过显式求和少量项 $s_N = \\sum_{n=1}^{N} e^{-cn^2}$，并用积分来近似剩余的尾部 $R_N = \\sum_{n=N+1}^{\\infty} e^{-cn^2}$ 来计算总和，这对于大的 $n$ 是一个非常精确的近似：\n$$R_N(c) \\approx \\int_{N+1/2}^{\\infty} e^{-cn^2} \\, dn$$\n积分下限 $N+1/2$ 是中点法则校正的标准选择。该积分的计算结果为：\n$$R_N(c) = \\frac{1}{2}\\sqrt{\\frac{\\pi}{c}} \\mathrm{erfc}\\left(\\left(N+\\frac{1}{2}\\right)\\sqrt{c}\\right)$$\n其中 $\\mathrm{erfc}$ 是互补误差函数。计算过程是不断增加 $N$，直到尾部的相对贡献 $R_N / (s_N + R_N)$ 低于指定的容差 $10^{-12}$。\n\n**情况 2：经典体系 ($c < 0.5$)**\n对于小的 $c$ 值，$e^{-cn^2}$ 项衰减缓慢，直接求和的计算成本过高。在该体系下，我们使用 Poisson 求和公式，对于本级数，这等价于 Jacobi theta 函数的模变换：\n$$ \\sum_{n=-\\infty}^{\\infty} e^{-cn^2} = \\sqrt{\\frac{\\pi}{c}} \\sum_{n=-\\infty}^{\\infty} e^{-\\pi^2 n^2 / c} $$\n我们的求和是 $S(c) = \\frac{1}{2} \\left( \\left(\\sum_{n=-\\infty}^{\\infty} e^{-cn^2}\\right) - 1 \\right)$。应用该恒等式可得到问题中提供的表达式：\n$$S(c) = \\frac{1}{2}\\left(\\sqrt{\\frac{\\pi}{c}}\\left[1 + 2\\sum_{n=1}^{\\infty} q^{n^2}\\right] - 1\\right)$$\n其中 $q = e^{-\\pi^2/c}$。当 $c < 0.5$ 时，我们有 $\\pi^2/c > 2\\pi^2 \\approx 19.7$，这使得 $q$ 成为一个极小的数。因此，变换后的级数 $\\sum q^{n^2}$ 收敛得异常之快。我们可以在几项之后截断此求和，具体来说，在第 $M$ 项处，使得下一项 $q^{(M+1)^2}$ 低于容差 $10^{-12}$。\n\n这种混合方法确保了在所有指定的物理体系下对 $q_{\\text{sum}}$ 的精确和高效计算。最终的程序实现了这两种方法来计算 $q_{\\text{sum}}$ 和 $q_{\\text{int}}$，然后为给定的测试用例计算它们的相对偏差 $\\Delta(T,L)$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import erfc\n\ndef solve():\n    \"\"\"\n    Computes the translational partition function for a particle in a 3D cubic box\n    using two methods (summation and integral approximation) and finds their\n    relative deviation for several test cases.\n    \"\"\"\n    # Define physical constants\n    H = 6.62607015e-34      # Planck constant (J s)\n    K_B = 1.380649e-23      # Boltzmann constant (J K^-1)\n    U = 1.66053906660e-27   # Atomic mass unit (kg)\n    \n    # Particle mass for Argon-40\n    M_PARTICLE = 39.948 * U # kg\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (0.5, 1.0),    # T (K), L (nm)\n        (5.0, 2.0),\n        (300.0, 5.0),\n        (300.0, 50.0),\n        (5000.0, 1.0),\n    ]\n\n    def calculate_S(c: float) -> float:\n        \"\"\"\n        Calculates the 1D partition sum S(c) = sum_{n=1 to inf} exp(-c*n^2)\n        using an adaptive strategy based on the value of c.\n        \n        Args:\n            c: The dimensionless parameter h^2 / (8*m*L^2*k_B*T).\n\n        Returns:\n            The value of the sum S(c).\n        \"\"\"\n        if c >= 0.5:\n            # Regime 1: c is large (quantum limit). Direct sum + integral tail.\n            N = 0\n            s_N = 0.0\n            while True:\n                N += 1\n                s_next = s_N + np.exp(-c * N**2)\n                \n                # Approximate the tail R_N using the integral of a Gaussian\n                sqrt_c = np.sqrt(c)\n                arg_erfc = (N + 0.5) * sqrt_c\n                R_N = 0.5 * np.sqrt(np.pi / c) * erfc(arg_erfc)\n                \n                # Check for convergence based on the relative size of the tail\n                if R_N == 0.0 or R_N / (s_next + R_N) < 1.0e-12:\n                    return s_next + R_N\n                \n                s_N = s_next\n        else:\n            # Regime 2: c is small (classical limit). Use Jacobi theta transform.\n            pi_squared_over_c = np.pi**2 / c\n            \n            M = 1\n            series_sum = 0.0\n            while True:\n                # Term for n=M\n                term_M = np.exp(-pi_squared_over_c * (M**2))\n                series_sum += term_M\n                \n                # Check the next term for the truncation condition\n                # The exponent grows as (M+1)^2, so the term shrinks very fast\n                term_M_plus_1 = np.exp(-pi_squared_over_c * ((M + 1)**2))\n                if term_M_plus_1 < 1.0e-12:\n                    break\n                M += 1\n\n            S_val = 0.5 * (np.sqrt(np.pi / c) * (1.0 + 2.0 * series_sum) - 1.0)\n            return S_val\n\n    results = []\n    \n    # Pre-calculate the constant part of the parameter 'c'\n    c_prefactor = H**2 / (8 * M_PARTICLE * K_B)\n    \n    # Pre-calculate constant part of q_int\n    q_int_prefactor = (2 * np.pi * M_PARTICLE * K_B / H**2)**1.5\n\n    for T, L_nm in test_cases:\n        # Convert box length L from nanometers to meters\n        L_m = L_nm * 1e-9\n        \n        # Calculate the dimensionless parameter c\n        c = c_prefactor / (L_m**2 * T)\n        \n        # 1. Compute q_sum using the state summation method\n        S_c = calculate_S(c)\n        q_sum = S_c**3\n        \n        # 2. Compute q_int using the integral approximation\n        V = L_m**3\n        q_int = V * q_int_prefactor * T**1.5\n        \n        # 3. Calculate the relative deviation and store it\n        delta = (q_sum - q_int) / q_int\n        results.append(delta)\n\n    # Final print statement in the exact required format.\n    # The format specifier \"{:.7e}\" yields 8 significant digits (1 before decimal, 7 after).\n    formatted_results = [f\"{res:.7e}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2823215"}]}