{"hands_on_practices": [{"introduction": "本练习将引导您探索微扰三激发$(T)$校正的基本结构。通过考虑电子的不可区分性及其导致的排列对称性，您将学习如何为$(T)$能量构建一个高效、无冗余的求和形式。这项实践对于理解耦合簇方程背后的组合复杂性以及理论化学家如何处理它是至关重要的[@problem_id:2819926]。", "problem": "考虑在正则哈特里-福克自旋轨道基中、并对单粒子希尔伯特空间进行占据-虚拟划分下计算的耦合簇单双激发加微扰三激发 (CCSD(T))。设占据轨道指数用 $i,j,k,\\dots$ 表示，虚拟轨道指数用 $a,b,c,\\dots$ 表示。微扰三激发校正 $(T)$ 是一个标量，通过将完全反对称的三空穴-三粒子客体与能量分母进行缩并得到，这些能量分母在占据指数集内部的排列和虚拟指数集内部的排列下保持不变。在一个完全展开的求和中，对于任意固定的无序三元组 $\\{i,j,k\\}$ 和 $\\{a,b,c\\}$，三重激发贡献项要遍历所有 $3!\\times 3!$ 种排列。\n\n从以下基本事实出发：(i) 多电子波函数在交换不可区分的费米子时是反对称的；(ii) 三重激发的正则轨道能量分母 $\\Delta\\varepsilon_{ijk}^{abc}=\\varepsilon_{i}+\\varepsilon_{j}+\\varepsilon_{k}-\\varepsilon_{a}-\\varepsilon_{b}-\\varepsilon_{c}$ 在 $(i,j,k)$ 的排列和 $(a,b,c)$ 的排列下保持不变，请通过强制执行严格的指数顺序 $i<j<k$ 和 $a<b<c$，并将排列多重性吸收到简化被加数的定义中，来构造一个 $(T)$ 的排列简化求和。然后，对于一个具有 $N_{o}=2$ 个占据自旋轨道和 $N_{v}=3$ 个虚拟自旋轨道的模型空间，确定对排列简化的 $(T)$ 求和有贡献的唯一有序指数组合 $(i<j<k,a<b<c)$ 的总数。给出最终计数，为一个无单位的数字。", "solution": "我们首先回顾与耦合簇单双激发加微扰三激发 (CCSD(T)) 中微扰三激发校正结构相关的两个基本原理：\n\n1. 多费米子波函数及相关的激发振幅在相同指数的排列下以确定的奇偶性进行变换，这意味着进入 $(T)$ 校正的任何三空穴-三粒子张量对于其占据指数是完全反对称的，并且对于其虚拟指数也是单独完全反对称的。符号上，如果 $X_{ijk}^{abc}$ 是这样一个张量构件，那么对于任何 $\\sigma\\in S_{3}$ 和 $\\tau\\in S_{3}$，\n$$\nX_{\\,\\sigma(i j k)}^{\\,\\tau(a b c)}=\\operatorname{sgn}(\\sigma)\\,\\operatorname{sgn}(\\tau)\\,X_{ijk}^{abc}.\n$$\n\n2. 三重激发的正则轨道能量分母，\n$$\n\\Delta\\varepsilon_{ijk}^{abc}=\\varepsilon_{i}+\\varepsilon_{j}+\\varepsilon_{k}-\\varepsilon_{a}-\\varepsilon_{b}-\\varepsilon_{c},\n$$\n在 $(i,j,k)$ 的任意排列和 $(a,b,c)$ 的任意排列下是不变的，因为它只依赖于无序集合 $\\{i,j,k\\}$ 和 $\\{a,b,c\\}$。\n\n在一个对占据空间中的所有指数 $i,j,k$ 和虚拟空间中的所有指数 $a,b,c$ 进行的完全展开求和中，每个无序三元组 $\\{i,j,k\\}$ 和 $\\{a,b,c\\}$ 会生成对应于所有排列的 $3!\\times 3!$ 个项。因为分母是排列不变的，而分子是由完全反对称的组合构成的（当组合成标量能量时，这些组合产生的贡献在计入反对称化后除符号外完全相同），所以可以通过强制执行严格的指数顺序，将求和简化为每个无序三元组只有一个代表项。具体来说，我们限制 $i<j<k$ 和 $a<b<c$，并将 $3!\\times 3!$ 个排列的效应吸收到一个简化的被加数（比如 $W_{ijk}^{abc}$）的定义中，该被加数被构造成等于无序三元组对 $\\{\\{i,j,k\\},\\{a,b,c\\}\\}$ 的所有排列的总贡献。\n\n符号上，排列简化的形式可以写为\n$$\nE^{(T)}=\\sum_{i<j<k}\\;\\sum_{a<b<c}\\;W_{ijk}^{abc},\n$$\n其中 $W_{ijk}^{abc}$ 是一个由完全反对称的三空穴-三粒子客体和排列不变的分母构成的排列不变标量。计算项数时不需要 $W_{ijk}^{abc}$ 的精确代数内容；重要的是，在简化的求和中，每一种无序地选择三个占据指数和三个虚拟指数的方式都恰好贡献一项。\n\n因此，排列简化求和中的项数等于从 $N_{o}$ 个占据指数中选择 $3$ 个不同指数，并从 $N_{v}$ 个虚拟指数中选择 $3$ 个不同指数的方法数，这由二项式系数的乘积给出\n$$\n\\binom{N_{o}}{3}\\,\\binom{N_{v}}{3}.\n$$\n\n对于给定的模型空间，其中 $N_{o}=2$ 和 $N_{v}=3$，我们计算\n$$\n\\binom{N_{o}}{3}\\,\\binom{N_{v}}{3}=\\binom{2}{3}\\,\\binom{3}{3}.\n$$\n使用二项式系数的定义，当 $k>n$ 时 $\\binom{n}{k}=0$，我们有\n$$\n\\binom{2}{3}=0,\\qquad \\binom{3}{3}=1,\n$$\n因此\n$$\n\\binom{2}{3}\\,\\binom{3}{3}=0\\times 1=0.\n$$\n\n所以，在只有 $2$ 个占据自旋轨道可用的情况下，不存在满足 $i<j<k$ 的占据指数三元组 $(i,j,k)$，并且排列简化的 $(T)$ 求和不包含任何项。有贡献的唯一有序指数组合 $(i<j<k,a<b<c)$ 的总数是 $0$。", "answer": "$$\\boxed{0}$$", "id": "2819926"}, {"introduction": "在理解$(T)$求和的结构之后，任何计算化学家的下一个关键步骤都是分析其计算成本。本练习将深入探讨CCSD(T)算法的核心，让您推导出其著名的$N^7$计算标度并估算其巨大的内存需求[@problem_id:2819947]。这项实践将使您对高精度量子化学方法所涉及的计算权衡有一个切实的体会。", "problem": "考虑耦合簇单双激发附带微扰三重激发校正 (CCSD(T)) 方法中的微扰三重激发校正。在使用正则 Hartree–Fock (HF) 轨道的标准自旋轨道表述中，微扰三重激发能量是通过作用于三重激发的相似变换哈密顿量所构建的“矩”来评估的。将三重激发“矩”张量定义为 $M_{ijk}^{abc} \\equiv \\langle \\Phi_{ijk}^{abc} | \\bar{H}_{N} | \\Phi_{0} \\rangle$，其中 $\\bar{H}_{N}$ 是正规排序的相似变换哈密顿量， $|\\Phi_{0}\\rangle$ 是 HF 参考态，而 $|\\Phi_{ijk}^{abc}\\rangle$ 表示用空自旋轨道 $a,b,c$ 替换占据自旋轨道 $i,j,k$ 的三重激发。假设这是一个闭壳层体系，并且 $M_{ijk}^{abc}$ 的领头阶近似由一个双电子相互作用和一个双激发振幅 $t_{jk}^{dc}$ 收缩得到，在每个贡献项中产生一个内部虚轨道指标 $d$，同时对各指标进行必要的反对称化。\n\n(a) 从上述定义和标准的二次量子化双电子相互作用出发，确定一个对 $M_{ijk}^{abc}$ 有贡献的代表性收缩模式，当对所有 $(i,j,k,a,b,c)$ 进行求值时，该模式决定了形成 $M_{ijk}^{abc}$ 的形式标度。使用第一性原理的指标计数法，推导形式运算计数作为占据自旋轨道数 $N_{o}$ 和空自旋轨道数 $N_{v}$ 的函数，并证明它与 $N_{o}^{3} N_{v}^{4}$ 成正比。\n\n(b) 假设要以双精度格式将完整的张量 $M_{ijk}^{abc}$ 存储在内存中。使用 $N_{o} = 50$、$N_{v} = 300$ 以及每个实数 8 字节的设定，估算存储 $M_{ijk}^{abc}$ 所有元素所需的总内存（以太字节为单位）。使用 $1$ terabyte $= 10^{12}$ bytes 的换算关系，并将您的答案四舍五入到三位有效数字。用太字节表示最终的内存值。", "solution": "所提出的问题是计算量子化学中的一个有效练习。它要求推导耦合簇单双激发附带微扰三重激发校正 (CCSD(T)) 方法中一个关键步骤的计算标度，并随后估算内存需求。该问题具有科学依据，提法严谨，并包含了求解所需的所有信息。我们直接进行分析。\n\n(a) 问题要求推导三重激发“矩”张量形成过程的形式标度，该张量定义为 $M_{ijk}^{abc} \\equiv \\langle \\Phi_{ijk}^{abc} | \\bar{H}_{N} | \\Phi_{0} \\rangle$。在 CCSD(T) 理论的背景下，该张量表示作用在参考态上的相似变换哈密顿量在三重激发行列式空间上的投影。它的领头阶贡献用于计算一阶三重激发振幅，来源于算符 $(V_N T_2)$ 的连通部分，其中 $V_N$ 是哈密顿量的正规排序双电子部分，而 $T_2$ 是来自收敛的 CCSD 解的双激发簇算符。\n\n问题明确指出，我们必须考虑一个代表性项，该项由一个双电子相互作用和一个双激发振幅 $t_{jk}^{dc}$ 收缩而成，并涉及对单个内部虚轨道指标的求和。CCSD(T) 方程的标准图形或代数推导表明，此类项的形式涉及对一条虚轨道线（粒子线）的求和。按照惯例，我们将一个对 $M_{ijk}^{abc}$ 有贡献的代表性项记为 $W_{ijk}^{abc}$，其表达式为：\n$$\nW_{ijk}^{abc} \\supset \\hat{\\mathcal{P}}(i|jk) \\hat{\\mathcal{P}}(a|bc) \\sum_{e} \\langle bc | ke \\rangle_{\\text{as}} t_{ij}^{ae}\n$$\n在此，$i,j,k$ 是占据自旋轨道指标，$a,b,c,e$ 是空自旋轨道指标，$\\langle bc | ke \\rangle_{\\text{as}}$ 是物理学家标记法下的反对称化双电子积分，$t_{ij}^{ae}$ 是一个双激发振幅，而 $\\hat{\\mathcal{P}}(p|qr)$ 是一个对其参数生成带符号置换的置换算符。为了进行形式标度分析，这些置换不会改变计算成本的最高次幂，因此我们可以分析一个单独的构成项，例如：\n$$\n\\text{Term} = \\sum_{e} \\langle bc | ke \\rangle_{\\text{as}} t_{ij}^{ae}\n$$\n为了确定通过此项构建整个 $W_{ijk}^{abc}$ 张量的形式运算计数，我们必须考虑计算该张量每个元素所需的操作数量。这对应于一组嵌套循环，遍历所有自由指标（$i, j, k, a, b, c$）和求和的内部指标（$e$）的所有可能值。\n\n这些指标的取值范围如下：\n-   占据指标 $i, j, k$：$1, \\dots, N_o$\n-   空指标 $a, b, c, e$：$1, \\dots, N_v$\n\n一个直接的、未优化的计算 $W$ 张量所有元素的算法如下：\n1. 遍历三个占据指标 $i, j, k$。这对总复杂度贡献一个因子 $N_o \\times N_o \\times N_o = N_o^3$。\n2. 遍历三个外部虚轨道指标 $a, b, c$。这对总复杂度贡献一个因子 $N_v \\times N_v \\times N_v = N_v^3$。\n3. 对于每个唯一的外部指标组合 $(i,j,k,a,b,c)$，对内部虚轨道指标 $e$ 进行求和。这个循环运行 $N_v$ 次。在最内层循环中，执行一次浮点乘法和一次加法。\n\n因此，浮点运算的总数与所有循环范围的乘积成正比。\n$$\n\\text{Operation Count} \\propto N_o \\times N_o \\times N_o \\times N_v \\times N_v \\times N_v \\times N_v = N_o^3 N_v^4\n$$\n这个基于对指定张量收缩所需循环进行计数的从头推导，证实了该步骤的形式标度与 $N_o^3 N_v^4$ 成正比。另一类项涉及对内部占据指标的求和，其标度为 $N_o^4 N_v^3$。(T) 校正的总体标度由这些步骤中计算最昂贵的一步决定。\n\n(b) 在第二部分，我们被要求估算以双精度存储完整张量 $M_{ijk}^{abc}$ 所需的内存。该张量拥有三个占据指标（$i,j,k$）和三个空指标（$a,b,c$）。\n\n给定的占据自旋轨道数为 $N_o = 50$。\n给定的空自旋轨道数为 $N_v = 300$。\n\n问题说明我们要存储“完整张量”。这意味着我们为一个稠密的、未压缩的六维数组计算内存，而不利用指标的置换反对称性（例如，$M_{ijk}^{abc} = -M_{jik}^{abc}$）。这样一个数组中元素的总数是每个指标维度的乘积。\n$$\n\\text{Number of elements} = N_o \\times N_o \\times N_o \\times N_v \\times N_v \\times N_v = N_o^3 N_v^3\n$$\n代入给定值：\n$$\n\\text{Number of elements} = (50)^3 \\times (300)^3 = (125 \\times 10^3) \\times (27 \\times 10^6) = 3375 \\times 10^9 = 3.375 \\times 10^{12}\n$$\n每个元素是一个双精度浮点数，需要 $8$ 字节的存储空间。\n$$\n\\text{Total memory in bytes} = (\\text{Number of elements}) \\times (\\text{Bytes per element})\n$$\n$$\n\\text{Total memory in bytes} = (3.375 \\times 10^{12}) \\times 8 = 27 \\times 10^{12} \\text{ bytes}\n$$\n问题要求以太字节（TB）为单位给出答案，使用换算关系 $1 \\text{ TB} = 10^{12} \\text{ bytes}$。\n$$\n\\text{Total memory in TB} = \\frac{27 \\times 10^{12} \\text{ bytes}}{10^{12} \\text{ bytes/TB}} = 27 \\text{ TB}\n$$\n问题要求答案四舍五入到三位有效数字。计算出的值恰好是 $27$，写成 $27.0$ 以表示所需的精度。", "answer": "$$ \\boxed{27.0} $$", "id": "2819947"}, {"introduction": "理论通过实践得以升华。在本练习中，您将从纸笔分析转向实际编程，为一个开壳层分子的$(T)$校正实现一个简化但物理意义明确的模型，并特别关注自旋污染效应[@problem_id:2819999]。这项动手编程实践将巩固您对参考波函数选择（例如，UHF与ROHF）如何传播并影响高阶相关校正的理解。", "problem": "设计并实现一个程序，该程序使用一个基于 Rayleigh–Schrödinger 微扰理论和耦合簇拟设 (coupled-cluster ansatz) 的有原理的微扰模型，比较在一个双线态自由基上，基于非限制性 Hartree–Fock (UHF) 和限制性开壳层 Hartree–Fock (ROHF) 参考态计算的微扰三重激发校正。目标是量化自旋污染如何传播到三重激发校正中，并在一个简化的、但系统定义的设定下，对比基于 UHF 和基于 ROHF 的含微扰三重激发的耦合簇单双激发 (CCSD(T)) 方法的实际性能。\n\n从以下基本依据出发：\n- 耦合簇能量源于一个相似变换后的哈密顿量作用于一个参考行列式，并且微扰校正可以按照 Rayleigh–Schrödinger 阶数进行组织。\n- 对于微扰三重激发贡献，其典型结构包含对唯一的三重激发的求和，其中分子是二次项（一个由相似变换后的哈密顿量与近似的三重激发振幅的连通缩并构建的“矩”或“残数”），分母是由轨道能差构建的能量分母。\n\n对三重激发校正采用以下简化的、且自旋轨道一致的模型：\n- 考虑一组唯一的已占据三重态，索引为 $(i,j,k)$ 且 $i<j<k$，选自一个包含 $n_{\\mathrm{occ}}$ 个已占据自旋轨道的集合；以及一个唯一的虚拟三重态，索引为 $(a,b,c)$ 且 $a<b<c$，选自一个包含 $n_{\\mathrm{vir}}$ 个虚拟自旋轨道的集合。在提供的测试套件中，$n_{\\mathrm{vir}}=3$，因此只有一个虚拟三重态 $(a,b,c)=(0,1,2)$。\n- 对于每个唯一的已占据三重态 $(i,j,k)$ 和唯一的虚拟三重态 $(a,b,c)$，提供一个预先计算的连通三重激发“矩” $\\mathcal{M}_{ijk}^{abc}$。在这个简化模型中，给定参考态“ref”的微扰三重激发校正为\n$$\nE_{\\mathrm{ref}}^{(T)} \\;=\\; \\sum_{i<j<k}\\; c_{\\mathrm{ref}}(i,j,k)\\; \\frac{\\left(\\mathcal{M}_{ijk}^{abc}\\right)^{2}}{D_{\\mathrm{ref}}(i,j,k;a,b,c;\\varepsilon)} \\,,\n$$\n其中 $D_{\\mathrm{ref}}(i,j,k;a,b,c;\\varepsilon)$ 是一个正则化的类 Møller–Plesset 分母\n$$\nD_{\\mathrm{ref}}(i,j,k;a,b,c;\\varepsilon)\\;=\\; \\left(\\varepsilon_{i}^{\\mathrm{ref}}+\\varepsilon_{j}^{\\mathrm{ref}}+\\varepsilon_{k}^{\\mathrm{ref}}\\right) \\;-\\; \\left(\\varepsilon_{a}^{\\mathrm{ref}}+\\varepsilon_{b}^{\\mathrm{ref}}+\\varepsilon_{c}^{\\mathrm{ref}}\\right) \\;+\\; \\varepsilon\\,\\mathrm{sgn}\\!\\left[\\left(\\varepsilon_{i}^{\\mathrm{ref}}+\\varepsilon_{j}^{\\mathrm{ref}}+\\varepsilon_{k}^{\\mathrm{ref}}\\right) - \\left(\\varepsilon_{a}^{\\mathrm{ref}}+\\varepsilon_{b}^{\\mathrm{ref}}+\\varepsilon_{c}^{\\mathrm{ref}}\\right)\\right],\n$$\n并且 $\\varepsilon>0$ 是一个以 Hartree（原子单位）表示的微小能级移动正则化子。\n- 自旋污染标度因子 $c_{\\mathrm{ref}}(i,j,k)$ 模拟了非纯自旋特性泄漏到三重激发分子中的主要影响。设单占据分子轨道 (SOMO) 索引为 $p_{\\mathrm{SOMO}}$。根据总自旋算符的期望值定义自旋污染度量 $\\kappa$ 为\n$$\n\\kappa \\;=\\; \\max\\!\\left( \\langle \\hat{S}^2\\rangle \\;-\\; S(S+1)\\,,\\, 0 \\right), \\quad \\text{其中}\\; S=\\tfrac{1}{2}\\;\\Rightarrow\\; S(S+1)=\\tfrac{3}{4}=0.75.\n$$\n然后使用\n$$\nc_{\\mathrm{ROHF}}(i,j,k)\\;=\\;1,\n\\qquad\nc_{\\mathrm{UHF}}(i,j,k)\\;=\\; \\begin{cases}\n1+\\lambda\\,\\kappa, & \\text{若 } p_{\\mathrm{SOMO}}\\in\\{i,j,k\\},\\\\\n1, & \\text{其他情况},\n\\end{cases}\n$$\n其中 $\\lambda$ 是一个无量纲敏感度参数。\n- 能量必须以 Hartree（原子单位）报告。量化污染表观影响的比率定义为\n$$\nr \\;=\\; \\frac{E_{\\mathrm{UHF}}^{(T)} - E_{\\mathrm{ROHF}}^{(T)}}{\\left|E_{\\mathrm{ROHF}}^{(T)}\\right|}.\n$$\n\n你的程序必须：\n- 精确地按所述实现上述模型。\n- 对于每个测试用例，计算并返回四个量：$E_{\\mathrm{UHF}}^{(T)}$、 $E_{\\mathrm{ROHF}}^{(T)}$、 $\\Delta E^{(T)} = E_{\\mathrm{UHF}}^{(T)} - E_{\\mathrm{ROHF}}^{(T)}$ 和 $r$。\n- 所有能量以 Hartree 表示，r 为无量纲。将每个输出浮点数四舍五入到小数点后恰好8位。\n\n测试套件：\n- 所有用例的通用参数：虚拟自旋轨道索引为 $(a,b,c)=(0,1,2)$，因此每个用例只有一个虚拟三重态。正则化参数 $\\varepsilon=0.001$ Hartree。敏感度参数 $\\lambda=0.5$。\n- 用例 A（理想路径，轻微自旋污染）：\n    - UHF 已占据轨道能量 $\\left[\\varepsilon_{i}^{\\mathrm{UHF}}\\right] = \\{-0.50,-0.42,-0.35,-0.28\\}$，\n    - UHF 虚拟轨道能量 $\\left[\\varepsilon_{a}^{\\mathrm{UHF}}\\right] = \\{0.10,0.21,0.33\\}$，\n    - ROHF 已占据轨道能量 $\\left[\\varepsilon_{i}^{\\mathrm{ROHF}}\\right] = \\{-0.50,-0.40,-0.34,-0.29\\}$，\n    - ROHF 虚拟轨道能量 $\\left[\\varepsilon_{a}^{\\mathrm{ROHF}}\\right] = \\{0.12,0.22,0.32\\}$，\n    - SOMO 索引 $p_{\\mathrm{SOMO}}=2$，\n    - 自旋期望值 $\\langle \\hat{S}^2\\rangle=0.78$，\n    - 为四个已占据三重态指定的非零三重激发矩 $\\mathcal{M}_{ijk}^{012}$：\n        - $(i,j,k)=(0,1,2): \\mathcal{M}=0.040$，\n        - $(i,j,k)=(0,1,3): \\mathcal{M}=0.035$，\n        - $(i,j,k)=(0,2,3): \\mathcal{M}=0.030$，\n        - $(i,j,k)=(1,2,3): \\mathcal{M}=0.025$。\n- 用例 B（边缘情况覆盖：更强的自旋污染和轻微压缩的能谱）：\n    - UHF 已占据 $\\{-0.20,-0.19,-0.18,-0.17\\}$，\n    - UHF 虚拟 $\\{0.03,0.04,0.05\\}$，\n    - ROHF 已占据 $\\{-0.21,-0.19,-0.175,-0.165\\}$，\n    - ROHF 虚拟 $\\{0.032,0.042,0.052\\}$，\n    - SOMO 索引 $2$，\n    - $\\langle \\hat{S}^2\\rangle=0.95$，\n    - 非零 $\\mathcal{M}_{ijk}^{012}$：\n        - $(0,1,2): 0.020$，\n        - $(0,1,3): 0.018$，\n        - $(0,2,3): 0.016$，\n        - $(1,2,3): 0.014$。\n- 用例 C（边缘情况覆盖：大的动态相关范围和显著的自旋污染）：\n    - UHF 已占据 $\\{-0.80,-0.60,-0.40,-0.30\\}$，\n    - UHF 虚拟 $\\{0.05,0.15,0.25\\}$，\n    - ROHF 已占据 $\\{-0.79,-0.59,-0.39,-0.31\\}$，\n    - ROHF 虚拟 $\\{0.055,0.155,0.255\\}$，\n    - SOMO 索引 $2$，\n    - $\\langle \\hat{S}^2\\rangle=1.25$，\n    - 非零 $\\mathcal{M}_{ijk}^{012}$：\n        - $(0,1,2): 0.060$，\n        - $(0,1,3): 0.050$，\n        - $(0,2,3): 0.040$，\n        - $(1,2,3): 0.030$。\n\n你的程序应生成单行输出，其中包含所有三个用例的结果，格式为以逗号分隔的列表的列表，每个内部列表按 $\\left[E_{\\mathrm{UHF}}^{(T)},E_{\\mathrm{ROHF}}^{(T)},\\Delta E^{(T)},r\\right]$ 排序，每个浮点数四舍五入到恰好8位小数，整个集合用方括号括起来。例如，一个语法上有效的输出形状是\n$[[x_{A},y_{A},z_{A},r_{A}],[x_{B},y_{B},z_{B},r_{B}],[x_{C},y_{C},z_{C},r_{C}]]$，\n其中每个符号代表所需格式的浮点数。所有能量单位为 Hartree；比率为无量纲。", "solution": "该问题要求实现一个特定模型，以计算并比较一个双线态自由基体系的耦合簇能量的微扰三重激发校正 $E^{(T)}$。比较是在基于一个非限制性 Hartree-Fock (UHF) 参考态的计算和一个基于限制性开壳层 Hartree-Fock (ROHF) 参考态的计算之间进行的。该模型植根于 Rayleigh-Schrödinger 微扰理论，并考虑了 UHF 情况下的自旋污染效应。任务是为三个不同的测试用例计算两种参考态的三重激发校正、它们的差值以及一个相对比率。\n\n首先，对问题陈述进行验证。提取所有给定信息，包括公式、常数和数据集。\n微扰三重激发校正的基本公式为：\n$$\nE_{\\mathrm{ref}}^{(T)} \\;=\\; \\sum_{i<j<k}\\; c_{\\mathrm{ref}}(i,j,k)\\; \\frac{\\left(\\mathcal{M}_{ijk}^{abc}\\right)^{2}}{D_{\\mathrm{ref}}(i,j,k;a,b,c;\\varepsilon)}\n$$\n这个求和遍历所有唯一的已占据三重态，索引为 $(i,j,k)$，它们来自一个包含 $n_{\\mathrm{occ}}$ 个已占据自旋轨道的集合。仅考虑一个唯一的虚拟三重态，索引为 $(a,b,c)$。项 $\\mathcal{M}_{ijk}^{abc}$ 是一个为三重激发预先计算的矩。\n\n分母 $D_{\\mathrm{ref}}$ 是一个正则化的类 Møller-Plesset 能量差：\n$$\nD_{\\mathrm{ref}}(i,j,k;a,b,c;\\varepsilon)\\;=\\; \\left(\\varepsilon_{i}^{\\mathrm{ref}}+\\varepsilon_{j}^{\\mathrm{ref}}+\\varepsilon_{k}^{\\mathrm{ref}}\\right) \\;-\\; \\left(\\varepsilon_{a}^{\\mathrm{ref}}+\\varepsilon_{b}^{\\mathrm{ref}}+\\varepsilon_{c}^{\\mathrm{ref}}\\right) \\;+\\; \\varepsilon\\,\\mathrm{sgn}\\!\\left[\\left(\\varepsilon_{i}^{\\mathrm{ref}}+\\varepsilon_{j}^{\\mathrm{ref}}+\\varepsilon_{k}^{\\mathrm{ref}}\\right) - \\left(\\varepsilon_{a}^{\\mathrm{ref}}+\\varepsilon_{b}^{\\mathrm{ref}}+\\varepsilon_{c}^{\\mathrm{ref}}\\right)\\right]\n$$\n其中 $\\varepsilon_{p}^{\\mathrm{ref}}$ 是给定参考态（UHF 或 ROHF）的自旋轨道能量，$\\varepsilon > 0$ 是一个微小的能级移动正则化子，给定为 $\\varepsilon=0.001$ Hartree。\n\nROHF 和 UHF 计算之间的关键区别在于标度因子 $c_{\\mathrm{ref}}(i,j,k)$。对于 ROHF 参考态（它是双线态的 $\\hat{S}^2$ 算符的本征函数），该因子为 1：\n$$\nc_{\\mathrm{ROHF}}(i,j,k)\\;=\\;1\n$$\n对于可能遭受自旋污染的 UHF 参考态，该因子根据单占据分子轨道 (SOMO) 是否出现在三重激发中进行调节。自旋污染的程度由 $\\kappa$ 量化：\n$$\n\\kappa \\;=\\; \\max\\!\\left( \\langle \\hat{S}^2\\rangle \\;-\\; S(S+1)\\,,\\, 0 \\right)\n$$\n对于双线态，$S=1/2$，因此 $S(S+1)=0.75$。UHF 标度因子随后定义为：\n$$\nc_{\\mathrm{UHF}}(i,j,k)\\;=\\; \\begin{cases}\n1+\\lambda\\,\\kappa, & \\text{若 } p_{\\mathrm{SOMO}}\\in\\{i,j,k\\}\\\\\n1, & \\text{其他情况}\n\\end{cases}\n$$\n其中 $p_{\\mathrm{SOMO}}$ 是 SOMO 的索引，$\\lambda$ 是一个敏感度参数，给定为 $\\lambda=0.5$。\n\n该问题具有科学依据，定义明确，并且提供了所有必要的数据。该模型是对量子化学中真实物理效应的有效（尽管简化）的表示。因此，该问题被认为是有效的，适合直接进行计算求解。\n\n算法步骤如下：\n1.  建立通用参数：$\\varepsilon=0.001$，$\\lambda=0.5$，以及双线态的精确自旋本征值 $S(S+1)=0.75$。\n2.  对每个测试用例（A, B, C），执行以下步骤：\n    a. 根据给定的期望值 $\\langle \\hat{S}^2\\rangle$ 计算自旋污染度量 $\\kappa$。\n    b. 计算三重激发校正 $E_{\\mathrm{ROHF}}^{(T)}$。这涉及遍历四个指定的已占据三重态 $(i,j,k)$。对于每个三重态：\n        i.  计算已占据 ROHF 轨道能量之和 $\\varepsilon_{i}^{\\mathrm{ROHF}}+\\varepsilon_{j}^{\\mathrm{ROHF}}+\\varepsilon_{k}^{\\mathrm{ROHF}}$。\n        ii. 计算虚拟 ROHF 轨道能量之和 $\\varepsilon_{a}^{\\mathrm{ROHF}}+\\varepsilon_{b}^{\\mathrm{ROHF}}+\\varepsilon_{c}^{\\mathrm{ROHF}}$。因为只有一个虚拟三重态 $(0,1,2)$，对于给定的用例，这个和是恒定的。\n        iii. 使用正则化公式计算分母 $D_{\\mathrm{ROHF}}$。\n        iv. 获取矩 $\\mathcal{M}_{ijk}^{012}$。\n        v. 标度因子是 $c_{\\mathrm{ROHF}}=1$。\n        vi. 对能量的贡献是 $(\\mathcal{M}_{ijk}^{012})^2 / D_{\\mathrm{ROHF}}$。\n        vii. 将这些贡献求和以获得 $E_{\\mathrm{ROHF}}^{(T)}$。\n    c. 以类似的方式计算三重激发校正 $E_{\\mathrm{UHF}}^{(T)}$，使用 UHF 轨道能量。关键区别在于计算标度因子 $c_{\\mathrm{UHF}}(i,j,k)$。对于每个三重态 $(i,j,k)$，我们检查 SOMO 索引 $p_{\\mathrm{SOMO}}$ 是否是 $i,j,k$ 之一。如果是，则将因子 $1+\\lambda\\kappa$ 应用于该项的贡献；否则，因子为1。\n    d. 从两个能量校正中，计算差值 $\\Delta E^{(T)} = E_{\\mathrm{UHF}}^{(T)} - E_{\\mathrm{ROHF}}^{(T)}$。\n    e. 计算相对比率 $r = \\Delta E^{(T)} / |E_{\\mathrm{ROHF}}^{(T)}|$。\n3.  每个用例的最终结果，包括四个量 $\\left[E_{\\mathrm{UHF}}^{(T)}, E_{\\mathrm{ROHF}}^{(T)}, \\Delta E^{(T)}, r\\right]$，四舍五入到8位小数，并格式化为所需的输出字符串。\n\n此过程直接实现了所提供的物理模型，并遵守了问题陈述的所有规范。使用像 NumPy 这样的数值库适合处理基于数组的数据和数学运算。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes and compares UHF- and ROHF-based CCSD(T) triples corrections\n    for a doublet radical based on a specified perturbative model.\n    \"\"\"\n\n    # Common parameters defined in the problem statement\n    EPSILON_REG = 0.001  # Regularization parameter in Hartree\n    LAMBDA_PARAM = 0.5   # Sensitivity parameter for spin contamination\n    S2_EXACT_DOUBLET = 0.75  # Exact S(S+1) for a doublet (S=1/2)\n\n    # Test suite data\n    test_cases = [\n        {\n            \"name\": \"A\",\n            \"uhf_occ_e\": np.array([-0.50, -0.42, -0.35, -0.28]),\n            \"uhf_virt_e\": np.array([0.10, 0.21, 0.33]),\n            \"rohf_occ_e\": np.array([-0.50, -0.40, -0.34, -0.29]),\n            \"rohf_virt_e\": np.array([0.12, 0.22, 0.32]),\n            \"p_somo\": 2,\n            \"s2_exp\": 0.78,\n            \"moments\": {\n                (0, 1, 2): 0.040,\n                (0, 1, 3): 0.035,\n                (0, 2, 3): 0.030,\n                (1, 2, 3): 0.025,\n            },\n        },\n        {\n            \"name\": \"B\",\n            \"uhf_occ_e\": np.array([-0.20, -0.19, -0.18, -0.17]),\n            \"uhf_virt_e\": np.array([0.03, 0.04, 0.05]),\n            \"rohf_occ_e\": np.array([-0.21, -0.19, -0.175, -0.165]),\n            \"rohf_virt_e\": np.array([0.032, 0.042, 0.052]),\n            \"p_somo\": 2,\n            \"s2_exp\": 0.95,\n            \"moments\": {\n                (0, 1, 2): 0.020,\n                (0, 1, 3): 0.018,\n                (0, 2, 3): 0.016,\n                (1, 2, 3): 0.014,\n            },\n        },\n        {\n            \"name\": \"C\",\n            \"uhf_occ_e\": np.array([-0.80, -0.60, -0.40, -0.30]),\n            \"uhf_virt_e\": np.array([0.05, 0.15, 0.25]),\n            \"rohf_occ_e\": np.array([-0.79, -0.59, -0.39, -0.31]),\n            \"rohf_virt_e\": np.array([0.055, 0.155, 0.255]),\n            \"p_somo\": 2,\n            \"s2_exp\": 1.25,\n            \"moments\": {\n                (0, 1, 2): 0.060,\n                (0, 1, 3): 0.050,\n                (0, 2, 3): 0.040,\n                (1, 2, 3): 0.030,\n            },\n        },\n    ]\n\n    def calculate_triples_correction(ref_type, occ_energies, virt_energies, moments, p_somo, kappa):\n        \"\"\"\n        Calculates the perturbative triples correction E^(T) for a given reference.\n        \"\"\"\n        e_t = 0.0\n        e_virt_sum = np.sum(virt_energies)\n\n        for ijk_triple, moment in moments.items():\n            i, j, k = ijk_triple\n            \n            # Calculate spin contamination factor c_ref\n            c_ref = 1.0\n            if ref_type == 'UHF':\n                if p_somo in ijk_triple:\n                    c_ref = 1.0 + LAMBDA_PARAM * kappa\n            \n            # Calculate denominator D_ref\n            e_occ_sum_ijk = occ_energies[i] + occ_energies[j] + occ_energies[k]\n            d_raw = e_occ_sum_ijk - e_virt_sum\n            d_ref = d_raw + EPSILON_REG * np.sign(d_raw)\n\n            # Accumulate energy contribution\n            e_t += c_ref * (moment**2) / d_ref\n            \n        return e_t\n\n    all_results_str = []\n    for case in test_cases:\n        # Calculate spin contamination measure kappa\n        kappa = max(case[\"s2_exp\"] - S2_EXACT_DOUBLET, 0)\n\n        # Compute ROHF-based triples correction\n        e_rohf_t = calculate_triples_correction(\n            ref_type='ROHF',\n            occ_energies=case[\"rohf_occ_e\"],\n            virt_energies=case[\"rohf_virt_e\"],\n            moments=case[\"moments\"],\n            p_somo=case[\"p_somo\"],\n            kappa=kappa\n        )\n        \n        # Compute UHF-based triples correction\n        e_uhf_t = calculate_triples_correction(\n            ref_type='UHF',\n            occ_energies=case[\"uhf_occ_e\"],\n            virt_energies=case[\"uhf_virt_e\"],\n            moments=case[\"moments\"],\n            p_somo=case[\"p_somo\"],\n            kappa=kappa\n        )\n\n        # Calculate derived quantities\n        delta_e_t = e_uhf_t - e_rohf_t\n        # Avoid division by zero, though unlikely with negative e_rohf_t\n        ratio = delta_e_t / abs(e_rohf_t) if e_rohf_t != 0 else 0.0\n\n        # Format results for this case\n        case_results = [e_uhf_t, e_rohf_t, delta_e_t, ratio]\n        case_str = f\"[{','.join([f'{val:.8f}' for val in case_results])}]\"\n        all_results_str.append(case_str)\n        \n    # Final print statement in the exact required format\n    print(f\"[{','.join(all_results_str)}]\")\n\nsolve()\n```", "id": "2819999"}]}