{"hands_on_practices": [{"introduction": "我们从一个基本但极具启发性的例子开始。秩一矩阵是构成更复杂矩阵的基本单元，理解它们的结构对于掌握线性代数至关重要。这个练习将通过分析一个由向量外积 $A = uv^T$ 构成的矩阵，来巩固你对秩、值域和零空间这些核心概念的理解，并直接运用它们的定义来揭示矩阵的几何本质。[@problem_id:2431359]", "problem": "在一个热系统的降阶传感模型中，一个测量算子被建模为一个秩一映射，它将一个低维子空间中的状态向量映射到一个沿固定仪器方向的测量位移上。具体来说，设 $u \\in \\mathbb{R}^{5}$ 和 $v \\in \\mathbb{R}^{3}$ 为非零列向量，并通过外积 $A = u v^{T}$ 定义测量矩阵 $A \\in \\mathbb{R}^{5 \\times 3}$。映射 $A$ 将一个输入 $x \\in \\mathbb{R}^{3}$ 映为输出 $A x \\in \\mathbb{R}^{5}$。从线性映射的值域、零空间和秩的基本定义出发，首先确定 $A$ 的值域和零空间的结构，然后确定 $A$ 的秩。最后，计算由下式定义的标量 $S$：\n$$\nS = \\dim(\\operatorname{range}(A)) + \\dim(\\operatorname{null}(A)).\n$$\n将你的最终答案表示为单个实数。无需单位。不要四舍五入。", "solution": "问题陈述已经过严格验证。已知条件如下：\n1. $u \\in \\mathbb{R}^{5}$ 是一个非零列向量。\n2. $v \\in \\mathbb{R}^{3}$ 是一个非零列向量。\n3. 矩阵 $A \\in \\mathbb{R}^{5 \\times 3}$ 由外积 $A = u v^{T}$ 定义。\n4. 线性映射为 $x \\mapsto Ax$，其中 $x \\in \\mathbb{R}^{3}$。\n5. 需要计算的量是 $S = \\dim(\\operatorname{range}(A)) + \\dim(\\operatorname{null}(A))$。\n\n该问题具有坚实的线性代数基础，提法恰当，提供了所有必要信息且无矛盾，并且陈述客观。这是一个有效的问题。我们开始求解。\n\n该问题要求基于由矩阵 $A$ 表示的线性变换的值域、零空间和秩的基本定义进行分析。\n\n$A$ 的值域，记作 $\\operatorname{range}(A)$，是对于定义域 $\\mathbb{R}^{3}$ 中任意向量 $x$ 的所有可能输出 $Ax$ 的集合。这也称为 $A$ 的列空间。\n$$ \\operatorname{range}(A) = \\{ y \\in \\mathbb{R}^{5} \\mid y = Ax \\text{ for some } x \\in \\mathbb{R}^{3} \\} $$\n根据定义 $A = u v^{T}$，值域中的任意向量可以写为：\n$$ y = Ax = (u v^{T}) x $$\n根据矩阵乘法的结合律，此表达式变为：\n$$ y = u (v^{T} x) $$\n项 $v^{T}x$ 是向量 $v$ 和 $x$ 的点积。由于 $v \\in \\mathbb{R}^{3}$ 且 $x \\in \\mathbb{R}^{3}$，$v^{T}$ 是一个 $1 \\times 3$ 的行向量，$x$ 是一个 $3 \\times 1$ 的列向量。它们的积 $v^{T}x$ 是一个 $1 \\times 1$ 矩阵，即一个标量。我们用 $\\alpha = v^{T}x$ 表示这个标量。\n因此，$A$ 的值域中的任何向量 $y$ 都具有 $y = \\alpha u$ 的形式。这意味着 $A$ 值域中的每个向量都是固定向量 $u$ 的标量倍数。单个向量的所有标量倍数的集合是该向量的生成空间。\n$$ \\operatorname{range}(A) = \\operatorname{span}(u) $$\n已知 $u$ 是一个非零向量。单个非零向量的生成空间的基就是该向量本身。一个向量空间的维数是其基中向量的个数。因此，$A$ 的值域的维数是 $1$。\n$$ \\dim(\\operatorname{range}(A)) = 1 $$\n\n矩阵的秩定义为其值域的维数。\n$$ \\operatorname{rank}(A) = \\dim(\\operatorname{range}(A)) $$\n根据我们的分析，我们得出结论，$A$ 的秩为 $1$。\n$$ \\operatorname{rank}(A) = 1 $$\n\n$A$ 的零空间，记作 $\\operatorname{null}(A)$，是定义域 $\\mathbb{R}^{3}$ 中所有被映射到上域 $\\mathbb{R}^{5}$ 中零向量的向量 $x$ 的集合。\n$$ \\operatorname{null}(A) = \\{ x \\in \\mathbb{R}^{3} \\mid Ax = 0 \\} $$\n我们代入 $Ax$ 的表达式：\n$$ u(v^{T}x) = 0 $$\n已知 $u$ 是一个非零向量。要使一个非零向量 $u$ 与一个标量 $\\alpha = v^{T}x$ 的乘积为零向量，该标量必须为零。\n$$ v^{T}x = 0 $$\n这个方程定义了 $A$ 的零空间。它由所有与向量 $v$ 正交的向量 $x \\in \\mathbb{R}^{3}$ 组成。从几何上看，$\\mathbb{R}^{3}$ 中所有与一个给定的非零向量 $v$ 正交的向量集合构成一个过原点的平面。在 $\\mathbb{R}^{3}$ 中，一个过原点的平面是一个二维子空间。\n更正式地说，集合 $\\{x \\in \\mathbb{R}^{3} \\mid v^T x = 0\\}$ 是由 $v$ 生成的子空间在空间 $\\mathbb{R}^3$ 内的正交补，记作 $(\\operatorname{span}(v))^{\\perp}$。由于 $v$ 是一个非零向量，$\\dim(\\operatorname{span}(v)) = 1$。对于有限维内积空间 $V$ 的任何子空间 $W$，我们知道 $\\dim(V) = \\dim(W) + \\dim(W^{\\perp})$。在我们的例子中，$V = \\mathbb{R}^{3}$ 且 $W = \\operatorname{span}(v)$。\n$$ \\dim(\\mathbb{R}^{3}) = \\dim(\\operatorname{span}(v)) + \\dim((\\operatorname{span}(v))^{\\perp}) $$\n$$ 3 = 1 + \\dim(\\operatorname{null}(A)) $$\n由此可见，零空间的维数是 $2$。\n$$ \\dim(\\operatorname{null}(A)) = 2 $$\n\n最后，我们需要计算标量 $S$：\n$$ S = \\dim(\\operatorname{range}(A)) + \\dim(\\operatorname{null}(A)) $$\n代入我们求出的维数：\n$$ S = 1 + 2 = 3 $$\n这个结果是对线性映射 $A: \\mathbb{R}^{3} \\to \\mathbb{R}^{5}$ 的秩-零度定理的直接验证。该定理指出，线性映射的定义域的维数等于其值域的维数（秩）和其零空间的维数（零度）之和。\n$$ \\dim(\\text{domain of } A) = \\operatorname{rank}(A) + \\dim(\\operatorname{null}(A)) $$\n在这个问题中，定义域是 $\\mathbb{R}^{3}$，所以其维数是 $3$。我们的计算证实了这个基本定理。\n$$ 3 = 1 + 2 $$\n因此，$S$ 的值为 $3$。", "answer": "$$\n\\boxed{3}\n$$", "id": "2431359"}, {"introduction": "在理解了像零空间这样的子空间之后，一个常见的计算任务是将向量投影到这些子空间上。这个练习将指导你如何构建一个正交投影矩阵，这是一个在信号处理、优化和机器学习中无处不在的工具。通过这个实践，你将把零空间的抽象概念与一个具体的矩阵联系起来，并运用子空间与其正交补之间深刻而实用的关系。[@problem_id:2431352]", "problem": "在计算工程中，线性等式约束下的可行性通常通过将候选向量正交投影到约束流形上来强制实现。考虑 $\\mathbb{R}^{3}$ 上的标准欧几里得内积，以及由矩阵 $A \\in \\mathbb{R}^{1 \\times 3}$ 定义的线性约束，该矩阵由下式给出\n$$\nA = \\begin{pmatrix} 1 & 2 & 3 \\end{pmatrix}.\n$$\n令 $\\mathcal{N}(A) \\subset \\mathbb{R}^{3}$ 表示 $A$ 的零空间。构建矩阵 $P \\in \\mathbb{R}^{3 \\times 3}$，该矩阵表示 $\\mathbb{R}^{3}$ 中任意向量到 $\\mathcal{N}(A)$ 上的正交投影（相对于标准欧几里得内积）。报告 $P$ 的 $(1,2)$ 元素（记为 $P_{12}$）的精确值。请以精确值的形式给出答案，无需四舍五入。", "solution": "对问题陈述进行验证。\n\n**步骤 1：提取已知条件**\n- 向量空间为带标准欧几里得内积的 $\\mathbb{R}^{3}$。\n- 一个线性约束由矩阵 $A = \\begin{pmatrix} 1 & 2 & 3 \\end{pmatrix}$ 定义，其中 $A \\in \\mathbb{R}^{1 \\times 3}$。\n- $\\mathcal{N}(A)$ 是矩阵 $A$ 的零空间。\n- 任务是找到一个矩阵 $P \\in \\mathbb{R}^{3 \\times 3}$，它表示到 $\\mathcal{N}(A)$ 上的正交投影。\n- 要求的具体值是 $P$ 的 $(1,2)$ 元素，记为 $P_{12}$。\n\n**步骤 2：使用提取的已知条件进行验证**\n该问题具有科学依据，是适定且客观的。这是一个线性代数中的标准问题，涉及构建到子空间上的投影矩阵，这是计算工程和其他应用科学中的一个基本概念。子空间 $\\mathcal{N}(A)$ 是良定义的，到其上的正交投影算子是唯一的。所有必需的信息都已提供且自洽。该问题不违反任何科学或数学逻辑原理。\n\n**步骤 3：结论与行动**\n该问题被判定为**有效**。将提供解答。\n\n$A$ 的零空间，记为 $\\mathcal{N}(A)$，是所有满足 $Ax = 0$ 的向量 $x \\in \\mathbb{R}^{3}$ 的集合。这个条件 $x_{1} + 2x_{2} + 3x_{3} = 0$ 定义了 $\\mathbb{R}^{3}$ 中一个过原点的平面。我们需要求解到这个平面上的正交投影矩阵 $P$。\n\n在任何内积空间中，该空间可以分解为一个子空间及其正交补的直和。对于空间 $\\mathbb{R}^{3}$ 和子空间 $\\mathcal{N}(A)$，我们有正交分解 $\\mathbb{R}^{3} = \\mathcal{N}(A) \\oplus \\mathcal{N}(A)^{\\perp}$。矩阵 $A$ 的零空间的正交补是其转置 $A^{T}$ 的像空间。这是线性代数的一个基本结果，通常被称为线性代数基本定理。因此，$\\mathcal{N}(A)^{\\perp} = \\mathcal{R}(A^{T})$。\n\n矩阵 $A$ 是一个行向量 $A = \\begin{pmatrix} 1 & 2 & 3 \\end{pmatrix}$。其转置是列向量 $A^{T} = \\begin{pmatrix} 1 \\\\ 2 \\\\ 3 \\end{pmatrix}$。我们将这个向量记为 $a = \\begin{pmatrix} 1 & 2 & 3 \\end{pmatrix}^{T}$。$A^{T}$ 的像空间 $\\mathcal{R}(A^{T})$ 是由向量 $a$ 张成的一维子空间。这是一条通过原点的直线。\n\n任意向量 $v \\in \\mathbb{R}^{3}$ 都可以唯一地写成 $v = v_{\\mathcal{N}} + v_{\\mathcal{N}^{\\perp}}$，其中 $v_{\\mathcal{N}} \\in \\mathcal{N}(A)$ 且 $v_{\\mathcal{N}^{\\perp}} \\in \\mathcal{N}(A)^{\\perp} = \\mathcal{R}(A^{T})$。$v$ 到 $\\mathcal{N}(A)$ 上的投影是 $v_{\\mathcal{N}} = P v$，而 $v$ 到 $\\mathcal{R}(A^{T})$ 上的投影是 $v_{\\mathcal{N}^{\\perp}} = P_{\\perp}v$。由此可得 $v = P v + P_{\\perp}v = (P + P_{\\perp})v$。这对所有 $v \\in \\mathbb{R}^3$ 都必须成立，所以我们有矩阵关系 $P + P_{\\perp} = I$，其中 $I$ 是 $3 \\times 3$ 的单位矩阵。\n\n在计算上，先确定到一维子空间 $\\mathcal{R}(A^{T})$ 上的投影矩阵 $P_{\\perp}$，然后使用关系式 $P = I - P_{\\perp}$ 来求 $P$ 会更简单。一个向量到由非零向量 $a$ 张成的直线上的正交投影由以下公式给出：\n$$\nP_{\\perp} = \\frac{a a^{T}}{a^{T} a}\n$$\n这里，$a = \\begin{pmatrix} 1 \\\\ 2 \\\\ 3 \\end{pmatrix}$。我们计算各个部分：\n分母是 $a$ 与自身的内积，也就是欧几里得范数的平方：\n$$\na^{T} a = \\begin{pmatrix} 1 & 2 & 3 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 2 \\\\ 3 \\end{pmatrix} = (1)(1) + (2)(2) + (3)(3) = 1 + 4 + 9 = 14\n$$\n分子是 $a$ 与自身的外积：\n$$\na a^{T} = \\begin{pmatrix} 1 \\\\ 2 \\\\ 3 \\end{pmatrix} \\begin{pmatrix} 1 & 2 & 3 \\end{pmatrix} = \\begin{pmatrix}\n1 \\cdot 1 & 1 \\cdot 2 & 1 \\cdot 3 \\\\\n2 \\cdot 1 & 2 \\cdot 2 & 2 \\cdot 3 \\\\\n3 \\cdot 1 & 3 \\cdot 2 & 3 \\cdot 3\n\\end{pmatrix}\n= \\begin{pmatrix}\n1 & 2 & 3 \\\\\n2 & 4 & 6 \\\\\n3 & 6 & 9\n\\end{pmatrix}\n$$\n因此，到 $\\mathcal{R}(A^{T})$ 上的投影矩阵是：\n$$\nP_{\\perp} = \\frac{1}{14} \\begin{pmatrix}\n1 & 2 & 3 \\\\\n2 & 4 & 6 \\\\\n3 & 6 & 9\n\\end{pmatrix}\n$$\n那么，到零空间 $\\mathcal{N}(A)$ 上的投影矩阵 $P$ 是：\n$$\nP = I - P_{\\perp} = \\begin{pmatrix}\n1 & 0 & 0 \\\\\n0 & 1 & 0 \\\\\n0 & 0 & 1\n\\end{pmatrix} - \\frac{1}{14} \\begin{pmatrix}\n1 & 2 & 3 \\\\\n2 & 4 & 6 \\\\\n3 & 6 & 9\n\\end{pmatrix}\n$$\n$$\nP = \\frac{1}{14} \\left[ \\begin{pmatrix}\n14 & 0 & 0 \\\\\n0 & 14 & 0 \\\\\n0 & 0 & 14\n\\end{pmatrix} - \\begin{pmatrix}\n1 & 2 & 3 \\\\\n2 & 4 & 6 \\\\\n3 & 6 & 9\n\\end{pmatrix} \\right] = \\frac{1}{14} \\begin{pmatrix}\n13 & -2 & -3 \\\\\n-2 & 10 & -6 \\\\\n-3 & -6 & 5\n\\end{pmatrix}\n$$\n问题要求的是该矩阵 $P$ 的 $(1,2)$ 元素，即 $P_{12}$。从结果矩阵中，我们确定此元素：\n$$\nP_{12} = \\frac{-2}{14} = -\\frac{1}{7}\n$$\n这就是所要求的精确值。", "answer": "$$\n\\boxed{-\\frac{1}{7}}\n$$", "id": "2431352"}, {"introduction": "理论与实践在计算工程中并非总是完全一致，尤其是在处理有限精度浮点数时。这个编程练习将探讨希尔伯特矩阵——一个著名的病态矩阵例子——来说明理论秩和数值秩之间的差异。通过这个实践，你将明白为什么一个理论上满秩的矩阵在数值计算中可能表现出秩亏，并学习如何量化这种“有效”秩，这是设计稳健数值算法的关键一步。[@problem_id:2431404]", "problem": "构建一个程序，用于在精确算术和浮点算术意义下分析希尔伯特矩阵的秩、零空间和值域属性。对于一个正整数 $n$，定义实数域上的 $n \\times n$ 希尔伯特矩阵 $H_n$ 如下：\n$$\n(H_n)_{ij} = \\frac{1}{i + j - 1}, \\quad i,j \\in \\{1, \\dots, n\\}.\n$$\n对于每个指定的尺寸 $n$，您的程序必须计算并返回以下量值：\n- 在精确算术下，$H_n$ 在实数域上的理论秩 $r_{\\text{theory}}$。\n- 矩阵二范数条件数 $\\kappa_2(H_n)$，定义为\n$$\n\\kappa_2(H_n) = \\frac{\\sigma_{\\max}(H_n)}{\\sigma_{\\min}(H_n)},\n$$\n其中 $\\sigma_{\\max}(H_n)$ 和 $\\sigma_{\\min}(H_n)$ 分别表示 $H_n$ 的最大和最小奇异值。\n- 在阈值 $\\tau_1 = 10^{-12}$ 和 $\\tau_2 = 10^{-8}$ 下的相对数值秩，定义为\n$$\nr_{\\text{num}}(H_n;\\tau) = \\#\\{ i \\in \\{1,\\dots,n\\} : \\sigma_i / \\sigma_{\\max}(H_n) > \\tau \\},\n$$\n其中 $\\{\\sigma_i\\}_{i=1}^n$ 是 $H_n$ 按非增序排列的奇异值。对于每个阈值，还需返回相应的数值零度\n$$\n\\nu_{\\text{num}}(H_n;\\tau) = n - r_{\\text{num}}(H_n;\\tau).\n$$\n\n测试套件及所需覆盖范围：\n- 使用以下尺寸集合来测试一般行为、边界情况和病态情况：$n \\in \\{1, 3, 5, 8, 12, 15\\}$。\n- 对于上述集合中的每个 $n$，计算并返回元组\n$$\n[n,\\ r_{\\text{theory}},\\ \\kappa_2(H_n),\\ r_{\\text{num}}(H_n;10^{-12}),\\ \\nu_{\\text{num}}(H_n;10^{-12}),\\ r_{\\text{num}}(H_n;10^{-8}),\\ \\nu_{\\text{num}}(H_n;10^{-8})].\n$$\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，列表中的每个条目本身都是一个按上述顺序排列的列表。例如：\n\"[ [n1,r_theory,cond2,rank_tau1,nullity_tau1,rank_tau2,nullity_tau2], [n2,r_theory,cond2,rank_tau1,nullity_tau1,rank_tau2,nullity_tau2], ... ]\".\n- 本问题不涉及任何物理单位、角度单位或百分比；所有输出均为上文定义的无量纲实数或整数。", "solution": "希尔伯特矩阵 $H_n$ 定义为 $(H_n)_{ij} = 1/(i + j - 1)$，其中 $i,j \\in \\{1,\\dots,n\\}$。程序必须计算理论秩、矩阵二范数条件数以及在指定阈值下的相对数值秩。解决方案从基本定义出发，如下所述。\n\n首先，确定在实数域上的理论秩 $r_{\\text{theory}}$。从定义可以得出一个基本恒等式，即积分表示法\n$$\n(H_n)_{ij} = \\int_0^1 x^{i + j - 2}\\,dx,\n$$\n这表明 $H_n$ 是函数族 $\\{x^{k}\\}_{k=0}^{n-1}$ 关于内积 $\\langle f, g\\rangle = \\int_0^1 f(x) g(x)\\,dx$ 的 Gram 矩阵。对于任意非零向量 $c \\in \\mathbb{R}^n$，定义多项式 $p(x) = \\sum_{k=0}^{n-1} c_{k+1} x^k$。于是\n$$\nc^\\top H_n c = \\sum_{i=1}^n \\sum_{j=1}^n c_i c_j \\int_0^1 x^{i + j - 2}\\,dx = \\int_0^1 \\left(\\sum_{i=1}^n c_i x^{i-1}\\right)^2 dx = \\int_0^1 p(x)^2 dx.\n$$\n因为当 $c \\neq 0$ 时，$p$ 不是零多项式，所以该积分严格为正。因此，$H_n$ 是对称正定矩阵。对称正定矩阵是非奇异的，因此具有满秩。故而，\n$$\nr_{\\text{theory}} = \\operatorname{rank}(H_n) = n.\n$$\n\n其次，计算矩阵二范数条件数 $\\kappa_2(H_n)$。矩阵的二范数是其最大奇异值，而当矩阵非奇异时，最小奇异值的倒数是其逆矩阵的二范数。根据定义，\n$$\n\\kappa_2(H_n) = \\frac{\\sigma_{\\max}(H_n)}{\\sigma_{\\min}(H_n)},\n$$\n其中奇异值 $\\sigma_i$ 是 $H_n^\\top H_n$ 特征值的非负平方根。这些奇异值可以通过奇异值分解（SVD）获得，即因子分解 $H_n = U \\Sigma V^\\top$，其中 $U$ 和 $V$ 是正交矩阵，$\\Sigma$ 是对角矩阵，其对角线上的非负元素满足 $\\sigma_1 \\ge \\cdots \\ge \\sigma_n \\ge 0$。在精确算术中，$H_n$ 是非奇异的且 $\\sigma_{\\min}(H_n) > 0$，但在浮点算术中，随着 $n$ 的增长，最小奇异值可能会接近机器下溢范围，这反映了矩阵的病态性。\n\n第三，定义并计算在阈值 $\\tau \\in \\{10^{-12}, 10^{-8}\\}$ 下的相对数值秩。相对数值秩衡量的是在固定的相对截断值下，相对于最大奇异值而言，有多少奇异值仍然是显著的。形式上，\n$$\nr_{\\text{num}}(H_n;\\tau) = \\#\\{ i \\in \\{1,\\dots,n\\} : \\sigma_i / \\sigma_{\\max}(H_n) > \\tau \\}.\n$$\n相关的数值零度是在该阈值下有效损失的维度，\n$$\n\\nu_{\\text{num}}(H_n;\\tau) = n - r_{\\text{num}}(H_n;\\tau).\n$$\n这些量值反映了在由 $\\tau$ 设定的有限精度约束下，值域和零空间的有效维度。\n\n与这些原则一致的算法步骤：\n- 对于测试集 $\\{1,3,5,8,12,15\\}$ 中的每个 $n$，通过在整数索引网格上计算 $(H_n)_{ij} = 1/(i+j-1)$ 来构建 $H_n$。\n- 使用奇异值分解（SVD）计算 $H_n$ 的奇异值 $\\{\\sigma_i\\}_{i=1}^n$，并按非增序排列。\n- 计算 $\\kappa_2(H_n) = \\sigma_1 / \\sigma_n$；如果 $\\sigma_n$ 在数值上因下溢而变为零，则在浮点算术中将 $\\kappa_2(H_n)$ 视为 $+\\infty$。\n- 对于阈值 $\\tau_1 = 10^{-12}$ 和 $\\tau_2 = 10^{-8}$，使用基于归一化奇异值 $\\sigma_i/\\sigma_1$ 的定义来计算 $r_{\\text{num}}(H_n;\\tau)$ 和 $\\nu_{\\text{num}}(H_n;\\tau)$。\n- 理论秩 $r_{\\text{theory}}$ 等于 $n$，因为如上所示，$H_n$ 是对称正定的。\n\n随尺寸增大的行为：\n- 对于每个 $n$，理论秩保持为 $n$，因为 $H_n$ 是对称正定矩阵，因此是满秩的。\n- 由于 $H_n$ 的最大和最小奇异值之间存在巨大差异，二范数条件数 $\\kappa_2(H_n)$ 随 $n$ 迅速增长；这种增长是超线性的，在实践中，对于中等大小的 $n$，该值会变得极其巨大。\n- 对于固定的相对阈值 $\\tau_1$ 和 $\\tau_2$，相对数值秩 $r_{\\text{num}}(H_n;\\tau)$ 通常随着 $n$ 的增加而减小，这反映了更多的奇异值落在了相对截断值以下。因此，对于固定的 $\\tau$，数值零度 $\\nu_{\\text{num}}(H_n;\\tau)$ 随 $n$ 的增加而增加。\n\n输出规格：\n- 对于每个 $n \\in \\{1,3,5,8,12,15\\}$，返回列表 $[n, r_{\\text{theory}}, \\kappa_2(H_n), r_{\\text{num}}(H_n;10^{-12}), \\nu_{\\text{num}}(H_n;10^{-12}), r_{\\text{num}}(H_n;10^{-8}), \\nu_{\\text{num}}(H_n;10^{-8})]$。\n- 将这些列表聚合到一个顶层列表中，并以单行形式打印，其中条目以逗号分隔并用方括号括起来，严格按照问题陈述中的规定。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef hilbert_matrix(n: int) -> np.ndarray:\n    \"\"\"Construct the n x n Hilbert matrix H where H[i,j] = 1/(i+j-1).\"\"\"\n    i = np.arange(1, n + 1, dtype=np.float64).reshape(-1, 1)\n    j = np.arange(1, n + 1, dtype=np.float64).reshape(1, -1)\n    return 1.0 / (i + j - 1.0)\n\ndef compute_metrics_for_n(n: int, tau_list):\n    \"\"\"\n    Compute:\n    - theoretical rank (n)\n    - 2-norm condition number kappa2 = sigma_max/sigma_min\n    - relative numerical ranks and nullities for thresholds in tau_list\n    Returns a list: [n, r_theory, kappa2, r_num_tau1, null_tau1, r_num_tau2, null_tau2, ...]\n    \"\"\"\n    H = hilbert_matrix(n)\n    # Singular values in descending order\n    s = np.linalg.svd(H, compute_uv=False)\n    sigma_max = float(s[0])\n    sigma_min = float(s[-1])\n    if sigma_min == 0.0:\n        kappa2 = float('inf')\n    else:\n        kappa2 = sigma_max / sigma_min\n\n    # Theoretical rank for Hilbert matrices over R is n (positive definite)\n    r_theory = n\n\n    results = [n, r_theory, kappa2]\n    # Relative numerical ranks per tau\n    ratios = s / sigma_max if sigma_max != 0.0 else np.zeros_like(s)\n    for tau in tau_list:\n        r_num = int(np.sum(ratios > tau))\n        null_num = n - r_num\n        results.extend([r_num, null_num])\n    return results\n\ndef format_number(x):\n    \"\"\"\n    Format numbers without spaces and with a stable representation.\n    Use repr for floats/ints to preserve precision and avoid locale issues.\n    \"\"\"\n    if isinstance(x, float):\n        return repr(x)\n    else:\n        return str(int(x))\n\ndef format_list_no_spaces(lst):\n    return \"[\" + \",\".join(format_number(x) if not isinstance(x, (list, tuple)) else format_list_no_spaces(x) for x in lst) + \"]\"\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Sizes n to test: {1, 3, 5, 8, 12, 15}\n    test_ns = [1, 3, 5, 8, 12, 15]\n    # Relative thresholds tau1 = 1e-12, tau2 = 1e-8\n    tau_list = [1e-12, 1e-8]\n\n    results = []\n    for n in test_ns:\n        metrics = compute_metrics_for_n(n, tau_list)\n        results.append(metrics)\n\n    # Final print statement in the exact required format: a single line with a list of lists.\n    print(format_list_no_spaces(results))\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2431404"}]}