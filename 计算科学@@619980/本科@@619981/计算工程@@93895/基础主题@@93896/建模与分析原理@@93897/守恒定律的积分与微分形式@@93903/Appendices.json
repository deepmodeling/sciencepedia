{"hands_on_practices": [{"introduction": "在理论物理和工程学中，我们经常遇到由点源（如热源或污染物源）产生的影响，而微分形式的守恒定律在源点本身是奇异的，难以直接处理。本练习将引导你使用积分形式的守恒定律，通过一个巧妙选择的控制体，优雅地解决这个问题。通过这个过程，你将深刻体会到积分形式在处理奇异性时的强大威力，并理解一个物理源的强度如何与其周围的通量联系起来。[@problem_id:2404130]", "problem": "一个标量浓度场 $c(\\vec{x})$ 在一个无界、静态的三维介质中扩散，其扩散系数 $D$ 为常数。一个强度为 $S_{0}$ 的稳态点源位于位置 $\\vec{x}_{0}$，通过狄拉克δ函数建模为 $S(\\vec{x}) = S_{0}\\,\\delta(\\vec{x}-\\vec{x}_{0})$。对于任意有界控制体积 $V$（其边界 $\\partial V$ 上的外向单位法向量为 $\\vec{n}$），$c(\\vec{x})$ 的稳态质量守恒以积分形式表示为\n$$\n\\int_{\\partial V} \\left(-D\\,\\nabla c\\right)\\cdot \\vec{n}\\, \\mathrm{d}A \\;=\\; \\int_{V} S(\\vec{x})\\, \\mathrm{d}V,\n$$\n并以微分形式（在分布的意义上）表示为\n$$\n- D\\,\\nabla^{2} c \\;=\\; S(\\vec{x}).\n$$\n在远离源点 $\\vec{x}_{0}$ 的地方，该场满足 $\\nabla^{2} c = 0$ 并在空间无穷远处衰减至零。已知关于 $\\vec{x}_{0}$ 的、在无穷远处衰减的唯一球对称解具有 $c(\\vec{x}) = A/r$ 的形式，其中 $r = \\|\\vec{x}-\\vec{x}_{0}\\| > 0$，A 为一个常数。\n\n请用 $S_{0}$ 和 $D$ 确定常数 $A$，使得该解与质量守恒的积分和微分表述都一致。请将最终答案表示为一个闭式解析表达式。不需要进行数值近似。", "solution": "经评估，该问题陈述是有效的。这是一个数学物理中的适定问题，具体涉及三维拉普拉斯算子的基本解（或格林函数），这是势论和输运现象的基石。该问题具有科学依据，内容自洽，并使用了精确的数学语言。我们进行求解。\n\n目标是确定所提出的解 $c(\\vec{x}) = A/r$（其中 $r = \\|\\vec{x}-\\vec{x}_{0}\\|$）中的常数 $A$，使其在存在点源 $S(\\vec{x}) = S_{0}\\,\\delta(\\vec{x}-\\vec{x}_{0})$ 的情况下，满足标量浓度 $c(\\vec{x})$ 的稳态质量守恒。我们将使用守恒定律的积分形式，因为它能自然地处理点源的奇异性。\n\n对于任意控制体积 $V$，积分守恒定律给出如下：\n$$\n\\int_{\\partial V} \\left(-D\\,\\nabla c\\right)\\cdot \\vec{n}\\, \\mathrm{d}A \\;=\\; \\int_{V} S(\\vec{x})\\, \\mathrm{d}V\n$$\n我们选择一个方便的控制体积。由于解的形式关于源点 $\\vec{x}_{0}$ 具有球对称性，我们选择 $V$ 为一个以 $\\vec{x}_{0}$ 为中心、半径为任意 $R > 0$ 的球体。该球体的边界是 $\\partial V$。\n\n首先，我们计算方程的右侧 (RHS)，它表示体积 $V$ 内的总源强度。\n$$\n\\text{RHS} = \\int_{V} S(\\vec{x})\\, \\mathrm{d}V = \\int_{V} S_{0}\\,\\delta(\\vec{x}-\\vec{x}_{0})\\, \\mathrm{d}V\n$$\n根据狄拉克δ函数的筛选性质，由于点 $\\vec{x}_{0}$ 包含在任何以 $\\vec{x}_{0}$ 为中心、半径 $R>0$ 的球体 $V$ 内，该积分的计算结果为 $S_{0}$。\n$$\n\\text{RHS} = S_{0}\n$$\n\n接下来，我们计算方程的左侧 (LHS)，它表示流出控制体积的标量总通量。\n$$\n\\text{LHS} = \\int_{\\partial V} \\left(-D\\,\\nabla c\\right)\\cdot \\vec{n}\\, \\mathrm{d}A\n$$\n量 $\\vec{J} = -D\\,\\nabla c$ 是扩散通量矢量。我们必须首先计算浓度场 $c(\\vec{x}) = A/r$ 的梯度。在以 $\\vec{x}_{0}$ 为中心的球坐标系中进行计算最为方便，其中 $r$ 是径向坐标。一个球对称函数 $f(r)$ 的梯度由 $\\nabla f(r) = \\frac{\\mathrm{d}f}{\\mathrm{d}r}\\hat{e}_{r}$ 给出，其中 $\\hat{e}_{r}$ 是径向单位矢量。\n对于 $c(r) = A/r = Ar^{-1}$，其对 $r$ 的导数为：\n$$\n\\frac{\\mathrm{d}c}{\\mathrm{d}r} = -A r^{-2} = -\\frac{A}{r^{2}}\n$$\n因此，浓度场的梯度为：\n$$\n\\nabla c = -\\frac{A}{r^{2}}\\hat{e}_{r}\n$$\n于是，扩散通量矢量为：\n$$\n\\vec{J} = -D\\,\\nabla c = -D \\left(-\\frac{A}{r^{2}}\\hat{e}_{r}\\right) = \\frac{DA}{r^{2}}\\hat{e}_{r}\n$$\n在我们的控制体积边界 $\\partial V$（一个半径为 $r=R$ 的球面）上，外向单位法向量 $\\vec{n}$ 与径向单位矢量 $\\hat{e}_{r}$ 相同。因此，被积函数中的点积变为：\n$$\n\\vec{J} \\cdot \\vec{n} = \\left(\\frac{DA}{r^{2}}\\hat{e}_{r}\\right) \\cdot \\hat{e}_{r} = \\frac{DA}{r^{2}}\n$$\n在曲面 $\\partial V$ 上，我们有 $r=R$，因此被积函数在整个曲面上为常数：\n$$\n\\left.\\left(\\vec{J} \\cdot \\vec{n}\\right)\\right|_{r=R} = \\frac{DA}{R^{2}}\n$$\n现在，我们可以计算左侧的面积分：\n$$\n\\text{LHS} = \\int_{\\partial V} \\frac{DA}{R^{2}} \\, \\mathrm{d}A = \\frac{DA}{R^{2}} \\int_{\\partial V} \\mathrm{d}A\n$$\n积分 $\\int_{\\partial V} \\mathrm{d}A$ 是半径为 $R$ 的球体的表面积，即 $4\\pi R^{2}$。\n$$\n\\text{LHS} = \\frac{DA}{R^{2}} (4\\pi R^{2}) = 4\\pi DA\n$$\n左侧的结果与控制体积的半径 $R$ 无关，这是一致性的一个必要条件。\n\n最后，我们令左侧和右侧相等：\n$$\n4\\pi DA = S_{0}\n$$\n求解常数 $A$，我们得到：\n$$\nA = \\frac{S_{0}}{4\\pi D}\n$$\n此结果与积分形式和微分形式均一致。为了完整起见，我们用微分形式 $-D\\,\\nabla^{2}c = S(\\vec{x})$ 进行验证。根据分布理论，一个标准结果是三维空间中函数 $1/r$ 的拉普拉斯算子为 $\\nabla^{2}(1/r) = -4\\pi\\delta(\\vec{x}-\\vec{x}_{0})$。\n将 $c = A/r$ 代入微分方程，得到：\n$$\n-D\\,\\nabla^{2}\\left(\\frac{A}{r}\\right) = S_{0}\\,\\delta(\\vec{x}-\\vec{x}_{0})\n$$\n$$\n-DA\\,\\nabla^{2}\\left(\\frac{1}{r}\\right) = S_{0}\\,\\delta(\\vec{x}-\\vec{x}_{0})\n$$\n$$\n-DA(-4\\pi\\,\\delta(\\vec{x}-\\vec{x}_{0})) = S_{0}\\,\\delta(\\vec{x}-\\vec{x}_{0})\n$$\n$$\n4\\pi DA\\,\\delta(\\vec{x}-\\vec{x}_{0}) = S_{0}\\,\\delta(\\vec{x}-\\vec{x}_{0})\n$$\n为使此等式成立，系数必须相等：$4\\pi DA = S_{0}$，这得出了与之前相同的 A 的表达式。因此，该解是完全自洽的。", "answer": "$$\n\\boxed{\\frac{S_{0}}{4\\pi D}}\n$$", "id": "2404130"}, {"introduction": "真实的工程系统，如复合材料或生物过滤系统，通常由具有不同物理特性的多个区域组成。本练习将挑战你分析一个包含两种不同介质和一层半透膜的扩散问题，这比处理单一均匀介质要复杂得多。通过推导跨越多层介质的稳态通量表达式，你将学会如何应用通量守恒原理并正确处理界面上的物理条件，这对于模拟复杂的多材料系统至关重要。[@problem_id:2404179]", "problem": "一种溶质在一个具有恒定横截面积的长直通道中扩散。设轴向坐标为 $x$，左边界位于 $x=-L_1$，右边界位于 $x=+L_2$，其中 $L_1>0$ 且 $L_2>0$。区域 $-L_1 \\le x < 0$ 填充有扩散系数为恒定值 $D_1>0$ 的介质，而区域 $0 < x \\le L_2$ 填充有另一种扩散系数为恒定值 $D_2>0$ 的不同介质。在 $x=0$ 处有一层厚度可忽略不计的理想化半透膜，其单位面积的法向摩尔通量与膜两侧的浓度跳跃成线性比例。具体来说，如果 $c(0^-)$ 和 $c(0^+)$ 分别表示从左侧和右侧趋近于膜的极限浓度，那么膜通量定律为\n$$\nJ = P\\big(c(0^-) - c(0^+)\\big),\n$$\n其中膜渗透率 $P>0$。系统中没有溶质的体积源或汇，且系统处于稳态。边界浓度固定为 $c(-L_1)=c_1$ 和 $c(L_2)=c_2$，其中 $c_1$ 和 $c_2$ 是给定的常数。\n\n假设在每个均匀区域内为一维输运，遵循质量守恒和 Fick 扩散定律。定义通量的正方向为从左到右。确定稳态单位面积摩尔通量 $J$ 关于 $c_1$、$c_2$、$L_1$、$L_2$、$D_1$、$D_2$ 和 $P$ 的闭式符号表达式。以 $J$ 的单一解析表达式的形式给出你的答案，无需代入数值，且最终表达式中不包含单位。", "solution": "首先必须对问题陈述进行严格的验证过程，以确保其科学上合理、适定且客观。\n\n步骤1：提取已知条件\n问题陈述中提供了以下信息：\n- 定义域：沿坐标 $x$ 的一维通道，从 $x=-L_1$ 到 $x=+L_2$，其中 $L_1>0$ 且 $L_2>0$。\n- 区域1：$-L_1 \\le x < 0$，具有恒定扩散系数 $D_1>0$。\n- 区域2：$0 < x \\le L_2$，具有恒定扩散系数 $D_2>0$。\n- $x=0$ 处的界面：一层厚度可忽略不计的半透膜。\n- 膜通量定律：穿过膜的单位面积摩尔通量为 $J = P\\big(c(0^-) - c(0^+)\\big)$，其中 $P>0$ 是膜渗透率，$c(0^-)$ 和 $c(0^+)$ 分别是膜左右两侧的极限浓度。\n- 体积源/汇：无。\n- 系统状态：稳态。\n- 边界条件：固定浓度 $c(-L_1)=c_1$ 和 $c(L_2)=c_2$。\n- 控制物理学：在每个均匀区域内为一维输运、质量守恒和 Fick 扩散定律。\n- 目标：确定稳态单位面积摩尔通量 $J$ 的闭式符号表达式。\n\n步骤2：使用提取的已知条件进行验证\n根据所需标准对问题进行评估：\n- **科学依据**：该问题基于质量输运的基本原理，特别是 Fick 扩散和质量守恒的概念。使用具有确定渗透率的半透膜是输运现象和化学工程中一种标准的、物理上真实的构造。这是一个经典的一维稳态扩散问题。\n- **适定性**：该问题是适定的。它描述了在两个独立区域中的一个二阶常微分方程（稳态下的扩散方程）。为了找到唯一解，需要四个条件。问题提供了两个外部边界条件（$c(-L_1)=c_1$ 和 $c(L_2)=c_2$）和在 $x=0$ 处的两个界面条件（膜通量定律和通量连续性）。这是一组足以确定积分常数和未知通量，从而得到唯一且稳定解的充分条件。\n- **客观性**：问题以精确、定量且无歧义的语言陈述。所有参数（$L_1$、$L_2$、$D_1$、$D_2$、$P$、$c_1$、$c_2$）都得到了明确定义。\n\n该问题不违反任何无效性标准。它在科学上是合理的、完全可形式化的、内部一致的、物理上可信的，并且结构良好。\n\n步骤3：结论与行动\n该问题有效。将推导求解。\n\n基本原理是质量守恒。对于一个没有体积源或汇的稳态一维系统，质量守恒定律的微分形式为：\n$$\n\\frac{dJ}{dx} = 0\n$$\n该方程意味着单位面积摩尔通量 $J$ 在从 $x = -L_1$ 到 $x = L_2$ 的整个区域内是恒定的。\n\n在每个均匀区域内，通量由 Fick 第一扩散定律描述。\n对于区域1（$-L_1 \\le x < 0$）：\n$$\nJ = -D_1 \\frac{dc}{dx}\n$$\n对于区域2（$0 < x \\le L_2$）：\n$$\nJ = -D_2 \\frac{dc}{dx}\n$$\n由于 $J$、$D_1$ 和 $D_2$ 是常数，浓度梯度 $\\frac{dc}{dx}$ 在每个区域内也是恒定的。因此，浓度分布 $c(x)$ 在每个区域内是线性的。对常数通量 $J$ 的方程进行积分，得到：\n对于区域1：$c(x) = -\\frac{J}{D_1}x + A_1$\n对于区域2：$c(x) = -\\frac{J}{D_2}x + A_2$\n其中 $A_1$ 和 $A_2$ 是积分常数。\n\n我们使用给定的边界和界面条件来确定未知数 $A_1$、$A_2$ 和通量 $J$。\n外部边缘的边界条件是：\n1. $c(-L_1) = c_1 \\implies c_1 = -\\frac{J}{D_1}(-L_1) + A_1 = \\frac{JL_1}{D_1} + A_1$\n2. $c(L_2) = c_2 \\implies c_2 = -\\frac{J}{D_2}(L_2) + A_2 = -\\frac{JL_2}{D_2} + A_2$\n\n从这两个方程中，我们可以将积分常数表示为通量 $J$ 的函数：\n从 (1) 式：$A_1 = c_1 - \\frac{JL_1}{D_1}$\n从 (2) 式：$A_2 = c_2 + \\frac{JL_2}{D_2}$\n\n界面 $x=0$ 处的浓度通过对浓度分布取极限得到：\n$c(0^-) = \\lim_{x \\to 0^-} c(x) = A_1$\n$c(0^+) = \\lim_{x \\to 0^+} c(x) = A_2$\n\n现在我们使用第三个条件，即膜通量定律，它将通量与膜两侧的浓度跳跃联系起来：\n3. $J = P\\big(c(0^-) - c(0^+)\\big) = P(A_1 - A_2)$\n\n将 $A_1$ 和 $A_2$ 的表达式代入此方程：\n$$\nJ = P \\left[ \\left(c_1 - \\frac{JL_1}{D_1}\\right) - \\left(c_2 + \\frac{JL_2}{D_2}\\right) \\right]\n$$\n我们现在求解这个关于 $J$ 的代数方程。\n$$\nJ = P(c_1 - c_2) - P\\frac{JL_1}{D_1} - P\\frac{JL_2}{D_2}\n$$\n将所有含 $J$ 的项归到左侧：\n$$\nJ + \\frac{PJL_1}{D_1} + \\frac{PJL_2}{D_2} = P(c_1 - c_2)\n$$\n提取公因式 $J$：\n$$\nJ \\left( 1 + \\frac{PL_1}{D_1} + \\frac{PL_2}{D_2} \\right) = P(c_1 - c_2)\n$$\n分离出 $J$ 可得表达式：\n$$\nJ = \\frac{P(c_1 - c_2)}{1 + \\frac{PL_1}{D_1} + \\frac{PL_2}{D_2}}\n$$\n这个表达式是正确的。为了得到一个更具物理洞察力的表示形式，我们可以将分子和分母同除以渗透率 $P$：\n$$\nJ = \\frac{c_1 - c_2}{\\frac{1}{P} + \\frac{L_1}{D_1} + \\frac{L_2}{D_2}}\n$$\n此形式展示了与欧姆定律的类比，其中通量 $J$（类比电流）由一个势差（$c_1 - c_2$）驱动，并与总阻力成反比。总阻力是三个串联部分阻力之和：介质1的扩散阻力（$\\frac{L_1}{D_1}$）、介质2的扩散阻力（$\\frac{L_2}{D_2}$）以及膜的阻力（$\\frac{1}{P}$）。这就是最终的表达式。", "answer": "$$\n\\boxed{\\frac{c_1 - c_2}{\\frac{L_1}{D_1} + \\frac{L_2}{D_2} + \\frac{1}{P}}}\n$$", "id": "2404179"}, {"introduction": "将连续的守恒定律转化为离散的数值算法是计算工程的核心任务之一，但这个过程充满了潜在的陷阱。一个看似合理的数值格式可能并不会真正地“守恒”物理量，从而导致模拟结果中物质被凭空创造或销毁。本编码练习将让你亲手实现一个非守恒格式，并量化其导致的数值误差，从而深刻理解为何在构建可靠的数值模拟时，坚持使用“守恒型”离散格式是如此关键。[@problem_id:2404137]", "problem": "考虑周期性域 $[0,1]$ 上的一维标量守恒律的守恒形式：\n$$\\frac{\\partial \\phi}{\\partial t} + \\frac{\\partial}{\\partial x}\\left(u(x)\\,\\phi\\right) = 0,$$\n其中 $u(x)$ 是一个给定的、光滑的、空间变化的速率，而 $\\phi(x,t)$ 是一个被输运的标量。对于周期性边界条件，积分守恒声明意味着 $\\phi$ 的总量，\n$$M(t) = \\int_0^1 \\phi(x,t)\\,dx,$$\n满足 $\\frac{d}{dt} M(t) = 0$，因此对于精确解而言，$M(t)$ 随时间保持恒定。\n\n您将分析一个在均匀网格上、未强制执行通量差分的非守恒显式更新格式所引入的 $\\phi$ 的人为产生或耗散。设网格有 $N$ 个点，网格间距为 $\\Delta x = 1/N$，节点位置为 $x_i = i\\,\\Delta x$，其中 $i\\in\\{0,1,\\dots,N-1\\}$，并采用周期性索引。设速率为\n$$u(x) = 1 + \\tfrac{1}{2}\\,\\sin^2(2\\pi x),$$\n其在 $[0,1]$ 上恒为正。为时间步长 $\\Delta t$ 定义以下逐点的显式非守恒更新格式：\n$$\\phi_i^{n+1} = \\phi_i^{n} - \\frac{\\Delta t}{\\Delta x}\\,u(x_i)\\,\\left(\\phi_i^{n} - \\phi_{i-1}^{n}\\right),$$\n其中周期性索引为 $\\phi_{-1}^{n} \\equiv \\phi_{N-1}^{n}$。\n\n对于每次模拟，定义离散总量\n$$M^n = \\Delta x \\sum_{i=0}^{N-1} \\phi_i^n,$$\n并用差值来量化在模拟时间内 $\\phi$ 的人为产生或耗散\n$$\\Delta M = M^{n_{\\text{final}}} - M^{0},$$\n其中 $n_{\\text{final}} = T/\\Delta t$ 是一个整数时间步数。正的 $\\Delta M$ 表示人为产生；负的 $\\Delta M$ 表示人为耗散。\n\n使用周期性域 $[0,1]$ 和下面指定的两个初始条件：\n- 混合光滑初始条件：\n$$\\phi_0^{\\text{mixed}}(x) = \\exp\\!\\left(-100\\,(x-0.3)^2\\right) + \\tfrac{1}{2}\\,\\sin(2\\pi x).$$\n- 常数初始条件：\n$$\\phi_0^{\\text{const}}(x) = 1.$$\n\n测试组。对于每个测试用例，从指定的初始条件开始，严格按照给定的总时间 $T$、时间步长 $\\Delta t$ 和网格大小 $N$ 运行模拟，并报告 $\\Delta M$：\n- 测试 $1$：$N=64$，$\\Delta t=0.001$，$T=0.2$，初始条件 $\\phi_0^{\\text{mixed}}$。\n- 测试 $2$：$N=64$，$\\Delta t=0.004$，$T=0.2$，初始条件 $\\phi_0^{\\text{mixed}}$。\n- 测试 $3$：$N=128$，$\\Delta t=0.001$，$T=1.0$，初始条件 $\\phi_0^{\\text{mixed}}$。\n- 测试 $4$：$N=16$，$\\Delta t=0.002$，$T=0.2$，初始条件 $\\phi_0^{\\text{mixed}}$。\n- 测试 $5$：$N=64$，$\\Delta t=0.001$，$T=0.0$，初始条件 $\\phi_0^{\\text{mixed}}$。\n- 测试 $6$：$N=64$，$\\Delta t=0.001$，$T=0.5$，初始条件 $\\phi_0^{\\text{const}}$。\n\n所有量均为无量纲；无需物理单位。三角函数中的角度以弧度为单位。\n\n最终输出格式。您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，列表内容为上述测试的结果，顺序与测试顺序一致。其中每个条目是 $\\Delta M$ 的浮点值，四舍五入到 $12$ 位有效数字并以科学记数法表示。例如，一个有效的输出形式为\n$$[\\text{a}_1,\\text{a}_2,\\text{a}_3,\\text{a}_4,\\text{a}_5,\\text{a}_6],$$\n其中每个 $\\text{a}_k$ 是一个类似于 $1.23456789012\\text{e}{-03}$ 的数字。", "solution": "问题陈述已经过严格验证，并被确定为有效。它具有科学依据，是适定的、客观且完整的。它提出了数值分析中的一个标准问题：研究一个离散格式对标量守恒律的守恒性质。所有参数、初始条件和控制方程的规定都明确无歧义。我们可以着手求解。\n\n该问题的核心是分析所提供的数值格式的非守恒性。控制偏微分方程(PDE)是一个一维标量守恒律：\n$$\n\\frac{\\partial \\phi}{\\partial t} + \\frac{\\partial F(\\phi, x)}{\\partial x} = 0,\n$$\n其中通量为 $F(\\phi, x) = u(x)\\phi$。该方程在周期性域 $[0,1]$ 上的一个基本性质是标量 $\\phi$ 的总量守恒，记为 $M(t) = \\int_0^1 \\phi(x,t)\\,dx$。$M(t)$ 的时间变化率为：\n$$\n\\frac{dM(t)}{dt} = \\frac{d}{dt}\\int_0^1 \\phi(x,t)\\,dx = \\int_0^1 \\frac{\\partial \\phi}{\\partial t}\\,dx = -\\int_0^1 \\frac{\\partial F}{\\partial x}\\,dx = -[F]_0^1.\n$$\n由于周期性边界条件，$F(1, t) = F(0, t)$，这意味着 $[F]_0^1 = 0$。因此，$\\frac{dM(t)}{dt}=0$，对于精确解，总量 $M(t)$ 是守恒的。\n\n所提供的数值格式是在具有 $N$ 个点 $x_i = i\\Delta x$（其中 $i \\in \\{0, 1, \\dots, N-1\\}$）的均匀网格上的一个显式更新：\n$$\n\\phi_i^{n+1} = \\phi_i^{n} - \\frac{\\Delta t}{\\Delta x}\\,u(x_i)\\,\\left(\\phi_i^{n} - \\phi_{i-1}^{n}\\right).\n$$\n这里，$\\phi_i^n$ 是 $\\phi(x_i, n\\Delta t)$ 的数值近似，并使用周期性索引 $\\phi_{-1}^n \\equiv \\phi_{N-1}^n$。该格式通过对空间导数 $\\frac{\\partial \\phi}{\\partial x}$ 使用一阶后向差分来离散化 PDE 的对流（或非守恒）形式 $\\frac{\\partial \\phi}{\\partial t} + u(x)\\frac{\\partial \\phi}{\\partial x} = 0$。正确的守恒形式是 $\\frac{\\partial \\phi}{\\partial t} + \\frac{\\partial(u\\phi)}{\\partial x} = \\frac{\\partial \\phi}{\\partial t} + u\\frac{\\partial \\phi}{\\partial x} + \\phi\\frac{\\partial u}{\\partial x} = 0$。该格式省略了对应于 $\\phi\\frac{\\partial u}{\\partial x}$ 的项，当速率 $u(x)$ 不为常数时，这是导致非守恒的根源。\n\n为了证明这一缺陷，我们分析离散总量 $M^n = \\Delta x \\sum_{i=0}^{N-1} \\phi_i^n$ 的演变。将数值格式对所有网格点 $i$ 从 $0$ 到 $N-1$ 求和，得到：\n$$\n\\sum_{i=0}^{N-1} \\phi_i^{n+1} = \\sum_{i=0}^{N-1} \\phi_i^{n} - \\frac{\\Delta t}{\\Delta x} \\sum_{i=0}^{N-1} u_i (\\phi_i^{n} - \\phi_{i-1}^{n}),\n$$\n其中 $u_i = u(x_i)$。两边乘以 $\\Delta x$ 得到 $M^{n+1}$ 和 $M^n$ 之间的关系：\n$$\nM^{n+1} = M^n - \\Delta t \\sum_{i=0}^{N-1} u_i (\\phi_i^{n} - \\phi_{i-1}^{n}).\n$$\n单个时间步内的总量变化为 $\\Delta M^{n+1} = M^{n+1} - M^n = -\\Delta t \\sum_{i=0}^{N-1} u_i (\\phi_i^{n} - \\phi_{i-1}^{n})$。要使该格式是守恒的，这个和必须为零。我们可以对求和重新索引来分析其结构：\n$$\n\\sum_{i=0}^{N-1} u_i (\\phi_i^{n} - \\phi_{i-1}^{n}) = \\sum_{i=0}^{N-1} u_i \\phi_i^n - \\sum_{i=0}^{N-1} u_i \\phi_{i-1}^n.\n$$\n通过对各项按 $\\phi_i^n$ 重组并利用周期性，上式变为：\n$$\n\\sum_{i=0}^{N-1} u_i \\phi_i^n - \\sum_{i=0}^{N-1} u_{i+1} \\phi_i^n = \\sum_{i=0}^{N-1} \\phi_i^n (u_i - u_{i+1}).\n$$\n除非 $u_i$ 是常数，否则这个和不是一个值为零的伸缩求和。相反，它近似于一个积分：\n$$\n\\sum_{i=0}^{N-1} \\phi_i^n (u_i - u_{i+1}) = \\sum_{i=0}^{N-1} \\phi_i^n \\left(-\\frac{u_{i+1}-u_i}{\\Delta x}\\right) \\Delta x \\approx -\\int_0^1 \\phi(x,t^n) \\frac{du}{dx} dx.\n$$\n因此，离散总质量的变化率近似为：\n$$\n\\frac{M^{n+1} - M^n}{\\Delta t} \\approx \\int_0^1 \\phi(x,t^n) \\frac{du}{dx} dx.\n$$\n这个值通常不为零，导致 $\\phi$ 的人为产生或耗散，其总量计算为 $\\Delta M = M^{n_{\\text{final}}} - M^0$。\n\n测试组中有两个特殊情况会导致质量变化为零，即 $\\Delta M = 0$：\n1. 测试 $5$：$T=0$。这意味着时间步数为 $n_{\\text{final}}=0$。模拟不运行，所以显然 $M^{n_{\\text{final}}} = M^0$ 且 $\\Delta M = 0$。\n2. 测试 $6$：初始条件是常数 $\\phi_0^{\\text{const}}(x) = 1$，因此对所有 $i$ 都有 $\\phi_i^0 = 1$。更新规则中的空间差分项为 $\\phi_i^0 - \\phi_{i-1}^0 = 1 - 1 = 0$。因此，$\\phi_i^1 = \\phi_i^0$。通过归纳法，对于所有时间步 $n$，都有 $\\phi_i^n = 1$。离散量 $M^n$ 保持恒定，且 $\\Delta M = 0$。这也与我们推导的表达式一致，因为对于一个常数 $\\phi_i^n = c$，求和项 $\\sum_i c(u_i - u_{i+1}) = c \\sum_i (u_i - u_{i+1})$ 是一个因周期性而等于零的伸缩求和。\n\n计算每个测试用例的 $\\Delta M$ 的算法如下：\n1. 对于给定的网格大小 $N$，定义网格间距 $\\Delta x = 1/N$ 和节点位置 $x_i = i\\Delta x$。\n2. 将速率分布 $u(x)$ 离散化到网格上，得到数组 $u_i$。\n3. 将指定的初始条件 $\\phi_0(x)$ 离散化到网格上，得到初始状态 $\\phi_i^0$。\n4. 计算初始总量 $M^0 = \\Delta x \\sum_{i=0}^{N-1} \\phi_i^0$。\n5. 确定总时间步数 $n_{\\text{final}} = T/\\Delta t$。\n6. 从 $n=0$ 迭代到 $n_{\\text{final}}-1$。在每一步中，使用向量化的更新规则从当前状态 $\\phi^n$ 计算下一个状态 $\\phi^{n+1}$。$\\phi_{i-1}^n$ 的周期性平移可以通过对代表 $\\phi^n$ 的数组执行循环移位操作来高效实现。\n7. 在最后一个时间步之后，计算最终总量 $M^{n_{\\text{final}}} = \\Delta x \\sum_{i=0}^{N-1} \\phi_i^{n_{\\text{final}}}$。\n8. 结果是差值 $\\Delta M = M^{n_{\\text{final}}} - M^0$。\n将对每个测试用例实施此过程以生成所需结果。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef phi0_mixed(x):\n    \"\"\"\n    Computes the mixed smooth initial condition.\n    phi(x) = exp(-100*(x-0.3)^2) + 0.5*sin(2*pi*x)\n    \"\"\"\n    return np.exp(-100.0 * (x - 0.3)**2) + 0.5 * np.sin(2.0 * np.pi * x)\n\ndef phi0_const(x):\n    \"\"\"\n    Computes the constant initial condition.\n    phi(x) = 1\n    \"\"\"\n    return np.ones_like(x)\n\ndef run_simulation(N, dt, T, ic_func):\n    \"\"\"\n    Runs one simulation case for the non-conservative scheme and returns Delta M.\n\n    Args:\n        N (int): Number of grid points.\n        dt (float): Time step size.\n        T (float): Total simulation time.\n        ic_func (function): Function to generate the initial condition.\n\n    Returns:\n        float: The artificial change in total mass, Delta M.\n    \"\"\"\n    # Handle the trivial case of T=0, where no steps are taken.\n    if T == 0.0:\n        return 0.0\n\n    # 1. Define grid and velocity\n    dx = 1.0 / N\n    x = np.arange(N) * dx\n    u = 1.0 + 0.5 * np.sin(2.0 * np.pi * x)**2\n\n    # 2. Set initial condition\n    phi = ic_func(x)\n\n    # 3. Calculate initial total mass M^0\n    M0 = dx * np.sum(phi)\n\n    # 4. Determine number of time steps\n    # The problem statement guarantees this is an integer.\n    # Using round() for robustness against floating-point representation issues.\n    n_final = int(round(T / dt))\n\n    # Handle the case where the initial condition is constant.\n    # The update term will be zero, so Delta M is zero.\n    if ic_func == phi0_const:\n        return 0.0\n\n    # 5. Time-stepping loop\n    for _ in range(n_final):\n        # phi_{i-1} with periodic boundary condition\n        phi_prev = np.roll(phi, 1)\n        \n        # Apply the explicit non-conservative update rule\n        # phi_i^{n+1} = phi_i^n - (dt/dx) * u_i * (phi_i^n - phi_{i-1}^n)\n        phi = phi - (dt / dx) * u * (phi - phi_prev)\n\n    # 6. Calculate final total mass M^n_final\n    M_final = dx * np.sum(phi)\n\n    # 7. Compute the change in total mass\n    delta_M = M_final - M0\n    \n    return delta_M\n\ndef solve():\n    \"\"\"\n    Defines and runs the test suite, then prints the formatted results.\n    \"\"\"\n    # Test suite parameters: (N, dt, T, initial_condition_function)\n    test_cases = [\n        (64, 0.001, 0.2, phi0_mixed),\n        (64, 0.004, 0.2, phi0_mixed),\n        (128, 0.001, 1.0, phi0_mixed),\n        (16, 0.002, 0.2, phi0_mixed),\n        (64, 0.001, 0.0, phi0_mixed),\n        (64, 0.001, 0.5, phi0_const),\n    ]\n\n    results = []\n    for case in test_cases:\n        N, dt, T, ic_func = case\n        result = run_simulation(N, dt, T, ic_func)\n        results.append(result)\n\n    # Format results to 12 significant digits in scientific notation\n    # and print in the specified single-line format.\n    formatted_results = [f\"{res:.11e}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2404137"}]}