{"hands_on_practices": [{"introduction": "理论是骨架，实践是血肉。本节的第一个练习将引导你亲手实现一个完整的打靶法，来解决一个经典的非线性边值问题。通过这个练习，你不仅会将边值问题（BVP）转化为一个根查找问题，还将直观地看到非线性系统一个有趣的特性——解的非唯一性 [@problem_id:2377656]。这是一个绝佳的起点，它将理论与代码实践相结合，让你对打靶法的核心思想有深刻的理解。", "problem": "考虑一个定义在有限区间上的常微分方程非线性边界值问题：求一个函数 $y(x)$，使其满足\n$$\ny''(x) + y(x)^3 = 0 \\quad \\text{for } x \\in [0,L], \\quad \\text{with} \\quad y(0)=0, \\; y(L)=0,\n$$\n其中 $L>0$ 是一个给定的长度。此问题是模拟一个单位质量粒子在四次势 $V(y)=\\tfrac{1}{4}y^4$ 中运动的模型，$x$ 扮演时间的角色。从经典力学和常微分方程的第一性原理出发，完成以下任务。\n\n1) 从牛顿第二定律和单位质量的机械能定义出发，利用势 $V(y)=\\tfrac{1}{4}y^4$ 来证明，初始条件为 $y(0)=0$ 和 $y'(0)=s$ 的初值问题能量守恒\n$$\nE = \\tfrac{1}{2}\\,[y'(x)]^2 + \\tfrac{1}{4}\\, [y(x)]^4,\n$$\n并且对于 $s>0$，解 $y(x)$ 是关于 $x$ 的周期函数，并在由能量决定的对称转折点 $\\pm A$ 之间振荡。然后，仅使用这些基本事实（不引用任何预先推导的周期公式），定性地论证为何对于固定的 $L$，该边界值问题可以有多个不同解：选择不同的初始斜率 $s$ 可以产生使一个或多个半振荡恰好落在区间 $[0,L]$ 内的轨迹，它们都满足相同的最终边界条件 $y(L)=0$。\n\n2) 实现一个打靶法，以数值方式揭示这种非唯一性。将初始斜率 $s=y'(0)$ 视为一个可调节的打靶参数，并定义残差\n$$\nR(s;L) := y(L;s),\n$$\n其中 $y(x;s)$ 是满足 $y(0)=0$ 和 $y'(0)=s$ 的初值问题的解。使用一个数值稳定的常微分方程积分器来求解与二阶方程等价的一阶系统，以及一个稳健的、基于区间搜索的一维求根器来定位 $R(s;L)=0$ 的不同正根。具体来说：\n- 将二阶方程转换为一阶系统 $y_1' = y_2$, $y_2' = -y_1^3$，其中 $y_1(0)=0$ 且 $y_2(0)=s$。\n- 对于每个给定的 $L$，计算两个最小的不同正打靶值 $s_1(L)$ 和 $s_2(L)$，满足 $s_2(L) > s_1(L) > 0$ 且 $|R(s_k;L)| \\le \\varepsilon$，其中公差为 $\\varepsilon = 10^{-8}$。\n- 排除平庸解 $s=0$。\n\n3) 测试集。在以下三个定义域长度集上运行您的程序：\n- $L_1 = 1.00$,\n- $L_2 = 1.20$,\n- $L_3 = 0.75$。\n对于每个 $L_i$，返回列表 $[s_1(L_i), s_2(L_i)]$，结果四舍五入到6位小数。您的最终程序输出必须是单行，包含用方括号括起来的、以逗号分隔的结果列表，顺序为 $L_1, L_2, L_3$，例如：\n$[[s_1(L_1),s_2(L_1)],[s_1(L_2),s_2(L_2)],[s_1(L_3),s_2(L_3)]]$。\n所有数字必须以十进制表示法书写。不应打印任何额外文本。\n\n附加实现要求：\n- 使用标准的自适应步长常微分方程求解器，其绝对和相对公差不高于 $10^{-9}$。\n- 使用区间求根方法，对 $s$ 的解的绝对公差不高于 $10^{-10}$。\n- 通过在足够大的 $s$ 区间内进行符号变化扫描，以确保对每个 $L_i$ 都能分离出至少两个不同的正根，从而保证稳健性。", "solution": "所述问题已经过验证，被认为是科学上合理的、适定的、客观的且内部一致的。这是一个计算物理和非线性动力学中的标准问题，涉及保守系统的边界值问题（BVP）的求解。所有必要的数据、方程和约束条件均已提供。因此，该问题被视为有效。我们接下来给出完整的解答。\n\n根据要求，解答分为两部分：首先，从第一性原理出发进行理论论证；其次，描述为解决此问题而设计的数值打靶法。\n\n**1. 理论论证与定性分析**\n\n该问题涉及一个质量为单位1（$m=1$）的粒子，在由势能函数 $V(y)$ 派生出的力 $F(y)$ 的作用下的运动。牛顿第二定律指出 $ma = F$，其中加速度为 $a = y''(x)$，$x$ 代表时间。该力是保守力，由 $F(y) = -V'(y)$ 给出。对于给定的势 $V(y) = \\frac{1}{4}y^4$，相应的力为 $F(y) = -\\frac{d}{dy}(\\frac{1}{4}y^4) = -y^3$。将这些代入 $m=1$ 时的牛顿定律，得到：\n$$\n(1) y''(x) = -y(x)^3\n$$\n整理后即为指定的常微分方程（ODE）：\n$$\ny''(x) + y(x)^3 = 0.\n$$\n这证实了该控制方程的物理来源。\n\n为了证明机械能守恒，我们将该常微分方程乘以速度 $y'(x)$：\n$$\ny''(x) y'(x) + y(x)^3 y'(x) = 0.\n$$\n此表达式等价于能量对时间的全导数。注意到 $y'' y' = \\frac{d}{dx}(\\frac{1}{2}[y'(x)]^2)$ 以及 $y^3 y' = \\frac{d}{dx}(\\frac{1}{4}[y(x)]^4)$，我们有：\n$$\n\\frac{d}{dx} \\left( \\frac{1}{2}[y'(x)]^2 + \\frac{1}{4}[y(x)]^4 \\right) = 0.\n$$\n这表明括号内的量，即总机械能 $E$，是一个运动常量：\n$$\nE = \\frac{1}{2}[y'(x)]^2 + \\frac{1}{4}[y(x)]^4 = \\text{constant}.\n$$\n能量 $E$ 由初始条件确定。对于初值问题（IVP），其初始条件为 $y(0)=0$ 和 $y'(0)=s$，能量为：\n$$\nE = \\frac{1}{2}[y'(0)]^2 + \\frac{1}{4}[y(0)]^4 = \\frac{1}{2}s^2 + \\frac{1}{4}(0)^4 = \\frac{1}{2}s^2.\n$$\n对于任何 $s > 0$，能量 $E > 0$。粒子的运动受势能的约束。振荡的转折点（记为 $\\pm A$）发生在速度 $y'(x)$ 为零的地方。在这些点，动能为零，所有能量都是势能：$E = V(A) = \\frac{1}{4}A^4$。令两种能量表达式相等，可得：\n$$\n\\frac{1}{2}s^2 = \\frac{1}{4}A^4 \\implies A = (2s^2)^{1/4}.\n$$\n粒子从 $y=0$ 处以正速度 $s$ 开始运动，朝正转折点 $+A$ 移动，然后反向，以速度 $-s$ 经过 $y=0$，到达负转折点 $-A$，最后返回到 $y=0$。这个循环构成了一个周期性运动。\n\n边界值问题解的非唯一性源于初值问题解的周期性。边界条件 $y(L)=0$ 要求粒子在时间 $x=L$ 时位于原点。从 $y(0)=0$ 开始，粒子在经过一个半周期、两个半周期（一个完整周期）、三个半周期等等之后，会再次到达 $y=0$。设 $T_{1/2}(s)$ 表示对应于初始斜率 $s$ 的振荡半周期。如果区间长度 $L$ 是半周期的整数倍，则边界条件 $y(L)=0$ 得到满足：\n$$\nL = k \\cdot T_{1/2}(s) \\quad \\text{for } k = 1, 2, 3, \\dots\n$$\n这个非谐振子的周期取决于其能量，因此也取决于 $s$。通过改变 $s$，我们改变了周期。对于一个固定的长度 $L$，上述方程成为一个关于 $s$ 的隐式方程。可以合理地推断，该方程对于不同的 $s$ 值有解，每个解对应一个不同的整数 $k$。对于 $k=1$，我们寻找一个初始斜率 $s_1$，使得粒子恰好在区间 $[0, L]$ 内完成其第一个半振荡。这产生了基解，一个单拱形。对于 $k=2$，我们寻找一个不同的斜率 $s_2$，使得粒子在 $[0, L]$ 内完成两个半振荡（一个完整的波）。这些不同的值 $s_1, s_2, \\dots$ 都产生满足两个边界条件 $y(0)=0$ 和 $y(L)=0$ 的解 $y(x; s_k)$，从而解释了为何该边界值问题存在多个非平庸解。\n\n**2. 数值设计：打靶法**\n\n为了用数值方法找到这些不同的初始斜率，我们采用打靶法。该方法将边界值问题重构为一个求根问题。\n\n打靶参数是未知的初始斜率 $s = y'(0)$。\n初值问题（IVP）定义为：\n$$\ny''(x) + y(x)^3 = 0, \\quad y(0)=0, \\quad y'(0)=s.\n$$\n为了数值求解此问题，我们将二阶常微分方程转换为一个等价的一阶系统。令 $y_1(x) = y(x)$ 和 $y_2(x) = y'(x)$。该系统为：\n$$\n\\begin{cases}\ny_1'(x) = y_2(x) \\\\\ny_2'(x) = -y_1(x)^3\n\\end{cases}\n$$\n在 $x=0$ 处的初始条件为：\n$$\n\\begin{pmatrix} y_1(0) \\\\ y_2(0) \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ s \\end{pmatrix}.\n$$\n我们从 $x=0$ 到 $x=L$ 对该系统进行积分。在 $x=L$ 处的解，我们记为 $y(L;s)$，它依赖于 $s$ 的选择。第二个边界条件 $y(L)=0$（或 $y_1(L)=0$）仅对特定的 $s$ 值成立。我们定义一个残差函数 $R(s;L)$，它衡量在最终边界上的不匹配程度：\n$$\nR(s;L) = y_1(L;s).\n$$\n现在问题就变成了求方程 $R(s;L) = 0$ 的根。\n\n数值步骤如下：\n1.  **定义残差函数**：创建一个函数，对于给定的 $s$ 和 $L$，它使用一个高精度、自适应步长的常微分方程积分器（例如，`scipy.integrate.solve_ivp`，绝对和相对公差设置为 $10^{-10}$）来数值求解从 $x=0$ 到 $x=L$ 的初值问题。该函数返回 $y_1(L)$ 的值。\n2.  **确定根的区间**：正如定性分析所论证的，$R(s;L)$ 是一个关于 $s$ 的振荡函数。要找到它的根，我们首先需要将它们隔离在不同的区间内。我们通过在一系列 $s$ 网格点上评估 $R(s;L)$，并找出相邻点对 $(s_a, s_b)$，使得 $R(s_a;L)$ 和 $R(s_b;L)$ 符号相反。每个这样的区间 $[s_a, s_b]$ 保证至少包含一个根。\n3.  **求解根**：对于找到的每个区间 $[s_a, s_b]$，使用一个稳健的一维区间求根器（例如 Brent 方法，`scipy.optimize.brentq`）来高精度地定位根 $s_k$ （对 $s$ 的公差设置为 $10^{-11}$）。\n4.  **收集并报告**：我们对每个给定的长度 $L_i$ 应用此过程，以找到两个最小的不同正根 $s_{1}(L_i)$ 和 $s_{2}(L_i)$，将它们四舍五入到指定的精度，并按要求格式化输出。平庸解 $s=0$ 被明确排除。\n\n这种高保真度常微分方程求解器与可靠求根算法的结合，为确定非线性边界值问题的非唯一解提供了一种稳健而准确的方法。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import brentq\n\ndef solve():\n    \"\"\"\n    Solves the nonlinear BVP y'' + y^3 = 0 with y(0)=0, y(L)=0\n    using a shooting method to find the first two non-trivial positive\n    initial slopes s = y'(0) for given lengths L.\n    \"\"\"\n\n    # --- 1. Define the core components of the shooting method ---\n\n    # ODE system: y' = f(x, y), where y = [y_1, y_2] = [y, y']\n    def ode_system(t, y):\n        \"\"\"First-order system for y'' = -y^3\"\"\"\n        return [y[1], -y[0]**3]\n\n    # Residual function R(s; L) = y(L; s)\n    def residual(s, L):\n        \"\"\"\n        Computes the residual R(s;L) = y(L;s) by solving the IVP.\n\n        Args:\n            s (float): The initial slope y'(0), our shooting parameter.\n            L (float): The length of the interval [0, L].\n\n        Returns:\n            float: The value of y(L), which we want to be zero.\n        \"\"\"\n        if s == 0:\n            return 0.0 # Trivial solution y(x)=0 for all x\n\n        # Initial conditions for the IVP: y(0)=0, y'(0)=s\n        y0 = [0.0, s]\n        \n        # Integration interval\n        t_span = [0, L]\n        \n        # High-precision ODE solver settings\n        atol = 1e-10\n        rtol = 1e-10\n\n        # Solve the initial value problem\n        sol = solve_ivp(\n            fun=ode_system,\n            t_span=t_span,\n            y0=y0,\n            method='DOP853',\n            atol=atol,\n            rtol=rtol,\n        )\n        \n        # Return the final value of y(x), which is y_1(L)\n        # sol.y is a 2xN array. We need the first component at the last time step.\n        return sol.y[0, -1]\n\n    # --- 2. Implement the root-finding logic ---\n\n    def find_shooting_values(L, num_roots=2):\n        \"\"\"\n        Finds the first `num_roots` positive values of s for a given L.\n        \"\"\"\n        roots = []\n        \n        # Scan for sign changes to find brackets for the roots.\n        # The required s values increase as L decreases. The scan range\n        # must be large enough to find the required number of roots.\n        s_scan_points = np.linspace(0.1, 100.0, 500)\n        r_values = np.array([residual(s, L) for s in s_scan_points])\n        \n        # Find intervals where the sign of the residual changes\n        for i in range(len(s_scan_points) - 1):\n            if np.sign(r_values[i]) != np.sign(r_values[i+1]):\n                s_a, s_b = s_scan_points[i], s_scan_points[i+1]\n                \n                try:\n                    # Use a robust bracketing root-finder\n                    root = brentq(\n                        residual, \n                        a=s_a, \n                        b=s_b, \n                        args=(L,), \n                        xtol=1e-11 # Tolerance on the root s\n                    )\n                    roots.append(root)\n                    \n                    if len(roots) == num_roots:\n                        break\n                except ValueError:\n                    # brentq can fail if signs are not opposite, though our check prevents this.\n                    continue\n        \n        if len(roots) < num_roots:\n            raise RuntimeError(f\"Could not find {num_roots} roots for L={L}. Try increasing the scan range for s.\")\n        \n        return sorted(roots)\n\n    # --- 3. Execute for the test suite ---\n\n    # Define the test cases from the problem statement.\n    test_cases = [1.00, 1.20, 0.75]\n    \n    all_results = []\n    \n    for L_val in test_cases:\n        # Find the two smallest positive shooting values\n        s1, s2 = find_shooting_values(L_val, num_roots=2)\n        \n        # Round to 6 decimal places as required\n        result_pair = [round(s1, 6), round(s2, 6)]\n        all_results.append(result_pair)\n    \n    # Format the final output string exactly as specified\n    # e.g., [[val1,val2],[val3,val4]]\n    output_str = \"[\" + \",\".join([str(pair) for pair in all_results]) + \"]\"\n    \n    # Final print statement in the exact required format.\n    print(output_str.replace(\" \", \"\"))\n\nsolve()\n```", "id": "2377656"}, {"introduction": "打靶法的威力并不仅限于处理形如 $y(b) = C$ 这样的简单点值边界条件。这个练习将挑战你对“残差”概念的理解，将其从一个点上的误差扩展到一个积分约束。通过解决这个带有积分边界条件的边值问题，你将学会如何扩展和调整数值方法以适应更多样化、更复杂的工程和科学问题 [@problem_id:2445835]。这个过程能极大地锻炼你的抽象思维和问题建模能力。", "problem": "考虑定义在闭区间 $[a,b]$ 上，带有一个积分边界条件的线性二阶边值问题(BVP)族。对于每个实例，找出唯一的初始斜率 $s = y'(a)$，使得该微分方程的解 $y(x)$ 满足积分约束。每个实例由参数 $(a,b,k,C)$ 指定，其边值问题如下：\n1. 微分方程：$y''(x) - k\\,y(x) = 0$，其中 $x \\in [a,b]$。\n2. 左端点的点值条件：$y(a) = 0$。\n3. 积分边界条件：$\\int_{a}^{b} y(x)\\,dx = C$。\n\n您的任务是为每个给定的实例计算初始斜率 $s = y'(a)$ (一个实数)的值，使得对应的边值问题解 $y(x)$ 满足积分边界条件。假定所选参数能确保问题是唯一可解的，或遵循下述的约定惯例。如果问题不是唯一可解的，则采纳以下约定：若存在无穷多解（即对于所有的 $s$，积分条件都恒成立），则返回 $s=0$。\n\n所有出现的角度均以弧度为单位。不涉及任何物理单位。\n\n测试集：\n为下列每组参数 $(a,b,k,C)$ 计算 $s$：\n- 情况1：$a=0, b=1, k=1, C=0.2$。\n- 情况2：$a=0, b=1, k=1, C=0$。\n- 情况3：$a=0, b=2, k=1, C=-0.5$。\n- 情况4：$a=0, b=1.5, k=0, C=0.3$。\n- 情况5：$a=0, b=\\pi, k=-1, C=0.5$。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表。每个条目是按上述顺序列出的一个情况所对应的 $s$ 值，四舍五入到8位小数。例如，一个包含三个结果的输出应如下所示：$[0.12345678,-2.00000000,5.50000000]$。", "solution": "问题陈述已经过验证，被认为是具有科学依据、适定且客观的。它提出了一个可解的线性边值问题(BVP)。对于此类问题，解析解不仅是可能的，而且优于数值近似解。\n\n任务是为由以下条件定义的边值问题的解 $y(x)$ 找到初始斜率 $s = y'(a)$：\n1.  常微分方程(ODE)：$y''(x) - k\\,y(x) = 0$，区间为 $x \\in [a,b]$。\n2.  初始条件：$y(a) = 0$。\n3.  积分条件：$\\int_{a}^{b} y(x)\\,dx = C$。\n\n该常微分方程是一个线性、齐次、二阶常系数方程。初始条件为 $y(a)=0$ 和 $y'(a)=s$。由于常微分方程和初始条件的线性特性，该初值问题(IVP)的解（记作 $y(x; s)$）必然与参数 $s$ 成正比。也就是说，$y(x; s) = s \\cdot y(x; 1)$，其中 $y(x; 1)$ 是初始斜率为1的特定情况下的解。\n\n将此线性形式代入积分条件，可以得到一个关于 $s$ 的简单代数方程：\n$$ \\int_{a}^{b} s \\cdot y(x; 1)\\,dx = C $$\n$$ s \\left( \\int_{a}^{b} y(x; 1)\\,dx \\right) = C $$\n如果积分项非零，该方程即可解出 $s$。\n$$ s = \\frac{C}{\\int_{a}^{b} y(x; 1)\\,dx} $$\n$y(x)$ 解的具体形式取决于参数 $k$ 的符号。我们必须分析三种不同的情况。\n\n**情况1：$k > 0$**\n令 $\\omega = \\sqrt{k}$。微分方程 $y''(x) - \\omega^2 y(x) = 0$ 的通解为 $y(x) = A_1 \\cosh(\\omega(x-a)) + A_2 \\sinh(\\omega(x-a))$。\n应用初始条件：\n$y(a) = 0 \\implies A_1 \\cosh(0) + A_2 \\sinh(0) = A_1 = 0$。\n解简化为 $y(x) = A_2 \\sinh(\\omega(x-a))$。\n其导数为 $y'(x) = A_2 \\omega \\cosh(\\omega(x-a))$。\n$y'(a) = s \\implies A_2 \\omega \\cosh(0) = A_2 \\omega = s \\implies A_2 = s/\\omega$。\n因此，该初值问题的解为：\n$$ y(x; s) = \\frac{s}{\\omega} \\sinh(\\omega(x-a)) $$\n现在，我们应用积分条件：\n$$ \\int_{a}^{b} \\frac{s}{\\omega} \\sinh(\\omega(x-a))\\,dx = C $$\n$$ \\frac{s}{\\omega} \\left[ \\frac{1}{\\omega} \\cosh(\\omega(x-a)) \\right]_{a}^{b} = C $$\n$$ \\frac{s}{\\omega^2} \\left( \\cosh(\\omega(b-a)) - \\cosh(0) \\right) = C $$\n$$ \\frac{s}{k} \\left( \\cosh(\\sqrt{k}(b-a)) - 1 \\right) = C $$\n由于 $b>a$ 且 $k>0$，双曲余弦函数的参数为正，因此 $\\cosh(\\sqrt{k}(b-a)) > 1$。分母永远不为零。解出 $s$：\n$$ s = \\frac{kC}{\\cosh(\\sqrt{k}(b-a)) - 1} $$\n\n**情况2：$k = 0$**\n微分方程变为 $y''(x) = 0$。其通解为 $y(x) = A_1(x-a) + A_2$。\n应用初始条件：\n$y(a) = 0 \\implies A_1(0) + A_2 = A_2 = 0$。\n解为 $y(x) = A_1(x-a)$。\n其导数为 $y'(x) = A_1$。\n$y'(a) = s \\implies A_1 = s$。\n因此，该初值问题的解为：\n$$ y(x; s) = s(x-a) $$\n应用积分条件：\n$$ \\int_{a}^{b} s(x-a)\\,dx = C $$\n$$ s \\left[ \\frac{(x-a)^2}{2} \\right]_{a}^{b} = C $$\n$$ s \\frac{(b-a)^2}{2} = C $$\n对于 $a \\neq b$，我们可以解出 $s$：\n$$ s = \\frac{2C}{(b-a)^2} $$\n\n**情况3：$k < 0$**\n令 $\\omega = \\sqrt{-k}$。微分方程为 $y''(x) + \\omega^2 y(x) = 0$。其通解为 $y(x) = A_1 \\cos(\\omega(x-a)) + A_2 \\sin(\\omega(x-a))$。\n应用初始条件：\n$y(a) = 0 \\implies A_1 \\cos(0) + A_2 \\sin(0) = A_1 = 0$。\n解为 $y(x) = A_2 \\sin(\\omega(x-a))$。\n其导数为 $y'(x) = A_2 \\omega \\cos(\\omega(x-a))$。\n$y'(a) = s \\implies A_2 \\omega \\cos(0) = A_2 \\omega = s \\implies A_2 = s/\\omega$。\n因此，该初值问题的解为：\n$$ y(x; s) = \\frac{s}{\\omega} \\sin(\\omega(x-a)) $$\n应用积分条件：\n$$ \\int_{a}^{b} \\frac{s}{\\omega} \\sin(\\omega(x-a))\\,dx = C $$\n$$ \\frac{s}{\\omega} \\left[ -\\frac{1}{\\omega} \\cos(\\omega(x-a)) \\right]_{a}^{b} = C $$\n$$ -\\frac{s}{\\omega^2} \\left( \\cos(\\omega(b-a)) - \\cos(0) \\right) = C $$\n$$ \\frac{s}{-k} \\left( \\cos(\\sqrt{-k}(b-a)) - 1 \\right) = C $$\n解出 $s$：\n$$ s = \\frac{kC}{\\cos(\\sqrt{-k}(b-a)) - 1} $$\n此表达式中的分母 $\\cos(\\sqrt{-k}(b-a)) - 1$ 可能为零，如果 $\\sqrt{-k}(b-a)$ 是 $2\\pi$ 的倍数。如果分母为零且 $C=0$，则积分条件对任何 $s$ 值都满足，从而导致无穷多解。在这种情况下，根据问题陈述的约定，返回 $s=0$。如果分母为零且 $C \\neq 0$，则无解。问题陈述保证了这种情况不会发生。因此，如果分母为零，我们取 $s=0$。\n\n这些推导出的解析公式将用于计算每个测试用例的 $s$ 值。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the initial slope s for a family of BVPs for given test cases.\n    \"\"\"\n\n    def calculate_s(a, b, k, C):\n        \"\"\"\n        Calculates the initial slope s for a single BVP instance.\n\n        The BVP is:\n        y''(x) - k*y(x) = 0\n        y(a) = 0\n        integral from a to b of y(x) dx = C\n\n        Args:\n            a (float): The left endpoint of the interval.\n            b (float): The right endpoint of the interval.\n            k (float): The parameter in the differential equation.\n            C (float): The value of the integral constraint.\n\n        Returns:\n            float: The initial slope s = y'(a).\n        \"\"\"\n        if k > 0:\n            # For k > 0, the analytical solution for s is derived from the IVP solution\n            # y(x) = (s/sqrt(k)) * sinh(sqrt(k)*(x-a)).\n            # The denominator cosh(sqrt(k)*(b-a)) - 1 is never zero for b > a.\n            omega = np.sqrt(k)\n            denominator = np.cosh(omega * (b - a)) - 1.0\n            return (k * C) / denominator\n        elif k == 0:\n            # For k = 0, the analytical solution for s is derived from y(x) = s*(x-a).\n            # The denominator (b-a)^2 is non-zero for b != a.\n            if a == b:\n                # If a=b, the integral is 0. If C must be 0, any s works.\n                # Convention: s=0. If C is not 0, no solution.\n                return 0.0 if np.isclose(C, 0) else np.nan\n            return (2.0 * C) / ((b - a)**2)\n        else:  # k < 0\n            # For k < 0, the analytical solution for s is derived from\n            # y(x) = (s/sqrt(-k)) * sin(sqrt(-k)*(x-a)).\n            omega = np.sqrt(-k)\n            denominator = np.cos(omega * (b - a)) - 1.0\n            \n            # Check for the case of infinite solutions (or no solution).\n            # If denominator is close to 0, it means cos(omega*(b-a)) is close to 1.\n            # This happens if omega*(b-a) is a multiple of 2*pi.\n            # If C is also 0, any s is a solution. Convention is s=0.\n            # The problem statement guarantees that the case where denominator=0 and C!=0\n            # will not occur.\n            if np.isclose(denominator, 0):\n                return 0.0\n            else:\n                return (k * C) / denominator\n\n    # Test suite from the problem statement\n    test_cases = [\n        (0.0, 1.0, 1.0, 0.2),\n        (0.0, 1.0, 1.0, 0.0),\n        (0.0, 2.0, 1.0, -0.5),\n        (0.0, 1.5, 0.0, 0.3),\n        (0.0, np.pi, -1.0, 0.5)\n    ]\n\n    results = []\n    for case in test_cases:\n        a, b, k, C = case\n        s = calculate_s(a, b, k, C)\n        # Round to 8 decimal places as required for the output format.\n        results.append(f\"{s:.8f}\")\n\n    # Print the final output in the required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2445835"}, {"introduction": "任何强大的数值算法都建立在严谨的数学框架之上，多重打靶法尤其如此。在处理了两个具体的计算问题后，这个练习将视角转向了方法的内部构造 [@problem_id:2445807]。你需要辨析单步打靶法和多步打靶法的正确数学表述，包括如何为牛顿法等高效求解器构建灵敏度方程。准确地构建这些方程是从理解单步打靶法到掌握更稳定、更强大的多重打靶法的关键一步。", "problem": "考虑区间 $[0,1]$ 上标量函数 $y$ 的边界值问题，由二阶常微分方程 (ODE) 给出\n$y''(x) + y(x) = \\sin(x)$，对于 $x \\in (0,1)$，\n其边界条件为 $y(0) = 0$ 和 $y(1) + \\left(y'(1)\\right)^2 = 1$。\n\n为进行数值处理，一种常见的重构方法是引入一阶状态 $z(x) = \\begin{bmatrix} z_1(x) \\\\ z_2(x) \\end{bmatrix} = \\begin{bmatrix} y(x) \\\\ y'(x) \\end{bmatrix}$ 和一个用于单次打靶法的打靶参数 $s = y'(0)$。对于在 $x = c \\in (0,1)$ 处有一个内部分割面的两段多次打靶法，可以引入独立的分段初始状态并施加连续性约束。\n\n哪个选项提供了正确的表达形式，包括：(i) 一个与终端非线性边界条件相关的有效单次打靶标量残差 $R(s)$，以及一个用于计算 $\\mathrm{d}R/\\mathrm{d}s$ 的一致的线性灵敏度初值问题（Initial Value Problem, IVP），和 (ii) 一个一致的两段多次打靶未知向量和残差向量，用于施加内部分割面连续性和终端边界条件？\n\nA. 单次打靶法：定义 $f(x,z) = \\begin{bmatrix} z_2 \\\\ -z_1 + \\sin(x) \\end{bmatrix}$ 使得 $z'(x) = f(x,z(x))$ 且 $z(0) = \\begin{bmatrix} 0 \\\\ s \\end{bmatrix}$。定义残差 $R(s) = z_1(1;s) + \\left(z_2(1;s)\\right)^2 - 1$。灵敏度 $w(x) = \\partial z(x;s)/\\partial s$ 满足 $w'(x) = \\left(\\partial f/\\partial z\\right)(x,z(x;s))\\,w(x)$ 且 $w(0) = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$，其中 $\\left(\\partial f/\\partial z\\right)(x,z) = \\begin{bmatrix} 0 & 1 \\\\ -1 & 0 \\end{bmatrix}$。则 $\\mathrm{d}R/\\mathrm{d}s = w_1(1) + 2\\,z_2(1;s)\\,w_2(1)$。多次打靶法（两段，分割面在 $x=c$）：未知向量 $u = \\begin{bmatrix} s \\\\ q_1 \\\\ q_2 \\end{bmatrix}$，其中 $q = \\begin{bmatrix} q_1 \\\\ q_2 \\end{bmatrix}$ 是右侧分段在 $x=c$ 处的初始状态。残差向量 $F(u) = \\begin{bmatrix} z_1(c;s) - q_1 \\\\ z_2(c;s) - q_2 \\\\ \\tilde z_1(1;q) + \\left(\\tilde z_2(1;q)\\right)^2 - 1 \\end{bmatrix}$，其中 $\\tilde z(x;q)$ 是 $z'(x) = f(x,z)$ 在 $[c,1]$ 上的解，且满足 $z(c) = q$。\n\nB. 单次打靶法：$R(s) = z_1(1;s) - 1$。灵敏度 IVP 使用 $w'(x) = \\left(\\partial f/\\partial z\\right)(x,z)\\,w(x)$ 且 $w(0) = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix}$，以及 $\\mathrm{d}R/\\mathrm{d}s = w_1(1)$。多次打靶法：未知向量 $u = \\begin{bmatrix} s \\\\ q_1 \\end{bmatrix}$ 和残差向量 $F(u) = \\begin{bmatrix} z_1(c;s) - q_1 \\\\ \\tilde z_1(1;q_1) + \\left(\\tilde z_2(1;q_1)\\right)^2 - 1 \\end{bmatrix}$，其中右侧分段从 $z(c) = \\begin{bmatrix} q_1 \\\\ 0 \\end{bmatrix}$ 开始。\n\nC. 单次打靶法：$R(s) = z_1(1;s) + z_2(1;s) - 1$。灵敏度 IVP 增广了 $w'(x) = \\left(\\partial f/\\partial z\\right)(x,z)\\,w(x) + \\begin{bmatrix} 0 \\\\ 2\\,z_2(x;s)\\,w_2(x) \\end{bmatrix}$ 且 $w(0) = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$，以及 $\\mathrm{d}R/\\mathrm{d}s = w_1(1) + w_2(1)$。多次打靶法：未知向量 $u = \\begin{bmatrix} s \\\\ q_1 \\\\ q_2 \\end{bmatrix}$ 和残差向量 $F(u) = \\begin{bmatrix} \\left(z_1(c;s) - q_1\\right)^2 + \\left(z_2(c;s) - q_2\\right)^2 \\\\ \\tilde z_1(1;q) + \\tilde z_2(1;q) - 1 \\\\ q_2 \\end{bmatrix}$。\n\nD. 单次打靶法：$R(s) = z_1(1;s) + \\left(z_2(1;s)\\right)^2 - 1$，以及 $w'(x) = \\begin{bmatrix} 0 & 1 \\\\ -1 & 1 \\end{bmatrix} w(x)$ 且 $w(0) = \\begin{bmatrix} 0 \\\\ -1 \\end{bmatrix}$ 使得 $\\mathrm{d}R/\\mathrm{d}s = w_1(1) + 2\\,z_2(1;s)\\,w_2(1)$。多次打靶法：未知向量 $u = \\begin{bmatrix} y_0 \\\\ s \\\\ q_1 \\\\ q_2 \\end{bmatrix}$，其中 $y_0$ 代表 $y(0)$，以及残差向量 $F(u) = \\begin{bmatrix} y_0 \\\\ z_1(c;s) - q_1 \\\\ z_2(c;s) - q_2 \\\\ \\tilde z_1(1;q) + \\left(\\tilde z_2(1;q)\\right)^2 - 1 \\end{bmatrix}$。", "solution": "任务是验证问题陈述的有效性，如果有效，则确定应用于给定边界值问题（BVP）的单次打靶法和多次打靶法的正确表达形式。\n\n首先，对问题陈述进行验证。\n\n**步骤 1：提取已知条件**\n- 常微分方程 (ODE) 为 $y''(x) + y(x) = \\sin(x)$，对于 $x \\in (0,1)$。\n- 边界条件 (BCs) 为 $y(0) = 0$ 和 $y(1) + \\left(y'(1)\\right)^2 = 1$。\n- 状态向量定义为 $z(x) = \\begin{bmatrix} z_1(x) \\\\ z_2(x) \\end{bmatrix} = \\begin{bmatrix} y(x) \\\\ y'(x) \\end{bmatrix}$。\n- 单次打靶法的打靶参数为 $s = y'(0)$。\n- 多次打靶法设置涉及两段，分割面位于 $x = c \\in (0,1)$。\n\n**步骤 2：使用提取的已知条件进行验证**\n- **科学依据：** 问题描述了一个二阶非线性 BVP。非线性来源于 $x=1$ 处的边界条件。所提及的方法——单次打靶法和多次打靶法——是计算工程和应用数学中解决此类问题的标准、成熟的数值技术。将其重构为一阶系统也是一个标准程序。该问题在科学上是合理的。\n- **适定的：** 问题要求确定一种数值方法的正确数学表达形式。这个问题是明确的，并且基于数值分析的原理有确定的答案。这是一个关于方法论的适定问题。\n- **客观性：** 问题以精确的数学语言陈述，没有任何主观性或歧义。\n\n**步骤 3：结论与行动**\n问题陈述是有效的。这是微分方程数值方法领域的一个标准问题。我将继续推导正确的表达形式并评估给定的选项。\n\n**正确表达形式的推导**\n\n**第 (i) 部分：单次打靶法**\n\n1.  **一阶系统：**\n    令 $z_1(x) = y(x)$ 且 $z_2(x) = y'(x)$。则导数为：\n    $z_1'(x) = y'(x) = z_2(x)$\n    $z_2'(x) = y''(x) = -y(x) + \\sin(x) = -z_1(x) + \\sin(x)$\n    这可以写成一个向量值初值问题 (IVP)：\n    $$z'(x) = \\begin{bmatrix} z_1'(x) \\\\ z_2'(x) \\end{bmatrix} = \\begin{bmatrix} z_2(x) \\\\ -z_1(x) + \\sin(x) \\end{bmatrix} = f(x, z(x))$$\n    其中 $f(x,z) = \\begin{bmatrix} z_2 \\\\ -z_1 + \\sin(x) \\end{bmatrix}$。\n\n2.  **初始条件与残差：**\n    $x=0$ 处的边界条件是 $y(0)=0$。$y'(0)$ 的值是未知的，并被指定为打靶参数 $s$。因此，IVP 的初始条件是：\n    $$z(0) = \\begin{bmatrix} y(0) \\\\ y'(0) \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ s \\end{bmatrix}$$\n    我们从 $x=0$ 到 $x=1$ 求解这个 IVP。其解依赖于 $s$，记为 $z(x;s)$。\n    打靶法旨在寻找一个 $s$ 值，使得第二个边界条件 $y(1) + (y'(1))^2 = 1$ 得到满足。这个边界条件可转化为 $z_1(1;s) + (z_2(1;s))^2 = 1$。\n    标量残差函数 $R(s)$ 的定义使其根 $R(s)=0$ 满足此条件：\n    $$R(s) = z_1(1;s) + (z_2(1;s))^2 - 1$$\n\n3.  **灵敏度分析：**\n    为了用 Newton-Raphson 方法求解 $R(s)=0$，我们需要导数 $\\mathrm{d}R/\\mathrm{d}s$。\n    令 $w(x) = \\frac{\\partial z(x;s)}{\\partial s} = \\begin{bmatrix} \\partial z_1(x;s)/\\partial s \\\\ \\partial z_2(x;s)/\\partial s \\end{bmatrix} = \\begin{bmatrix} w_1(x) \\\\ w_2(x) \\end{bmatrix}$。\n    对 $R(s)$ 应用链式法则：\n    $$\\frac{\\mathrm{d}R}{\\mathrm{d}s} = \\frac{\\partial z_1(1;s)}{\\partial s} + 2 z_2(1;s) \\frac{\\partial z_2(1;s)}{\\partial s} = w_1(1) + 2 z_2(1;s) w_2(1)$$\n    灵敏度向量 $w(x)$ 通过对 ODE 系统 $z'(x;s) = f(x, z(x;s))$ 关于 $s$ 求导得到：\n    $$\\frac{\\partial}{\\partial s} \\left( z'(x;s) \\right) = \\frac{\\mathrm{d}}{\\mathrm{d}x} \\left( \\frac{\\partial z(x;s)}{\\partial s} \\right) = w'(x)$$\n    $$w'(x) = \\frac{\\partial}{\\partial s} f(x, z(x;s)) = \\frac{\\partial f}{\\partial z}(x, z(x;s)) \\frac{\\partial z(x;s)}{\\partial s} = \\frac{\\partial f}{\\partial z}(x, z(x;s)) w(x)$$\n    雅可比矩阵 $\\partial f / \\partial z$ 为：\n    $$\\frac{\\partial f}{\\partial z} = \\begin{bmatrix} \\frac{\\partial f_1}{\\partial z_1} & \\frac{\\partial f_1}{\\partial z_2} \\\\ \\frac{\\partial f_2}{\\partial z_1} & \\frac{\\partial f_2}{\\partial z_2} \\end{bmatrix} = \\begin{bmatrix} 0 & 1 \\\\ -1 & 0 \\end{bmatrix}$$\n    $w(x)$ 的初始条件通过对 $z(x;s)$ 的初始条件求导得到：\n    $$w(0) = \\frac{\\partial z(0;s)}{\\partial s} = \\frac{\\partial}{\\partial s} \\begin{bmatrix} 0 \\\\ s \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$$\n    因此，灵敏度 IVP 为 $w'(x) = \\begin{bmatrix} 0 & 1 \\\\ -1 & 0 \\end{bmatrix} w(x)$ 且 $w(0) = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$。\n\n**第 (ii) 部分：两段多次打靶法**\n\n1.  **未知数：**\n    域 $[0,1]$ 被分割为 $[0,c]$ 和 $[c,1]$。\n    - 对于第一段 $[0,c]$，我们有 IVP $z'(x) = f(x,z)$ 且 $z(0)=\\begin{bmatrix} 0 \\\\ s \\end{bmatrix}$。未知数为 $s$。\n    - 对于第二段 $[c,1]$，我们在分割面 $x=c$ 处定义一个新的初始状态，该状态是未知的。令该状态为 $q = \\begin{bmatrix} q_1 \\\\ q_2 \\end{bmatrix}$。这又增加了两个未知数 $q_1$ 和 $q_2$。\n    总的未知向量是 $u = \\begin{bmatrix} s \\\\ q_1 \\\\ q_2 \\end{bmatrix}$，这是一个大小为 3 的向量。\n\n2.  **残差：**\n    我们需要 3 个方程来求解 3 个未知数。\n    - **$x=c$ 处的连续性：** 来自第一段在 $x=c$ 处的解，记为 $z(c;s)$，必须等于第二段的初始状态 $q$。这提供了两个方程：\n        $F_1(u) = z_1(c;s) - q_1 = 0$\n        $F_2(u) = z_2(c;s) - q_2 = 0$\n    - **$x=1$ 处的终端条件：** 第二段的解，记为 $\\tilde{z}(x;q)$，它求解 $\\tilde{z}'=f(x,\\tilde{z})$ 且 $\\tilde{z}(c)=q$，必须满足终端边界条件。\n        $\\tilde{z}_1(1;q) + (\\tilde{z}_2(1;q))^2 - 1 = 0$\n        这给出了第三个方程：$F_3(u) = \\tilde{z}_1(1;q) + (\\tilde{z}_2(1;q))^2 - 1 = 0$。\n    完整的残差向量为：\n    $$F(u) = \\begin{bmatrix} z_1(c;s) - q_1 \\\\ z_2(c;s) - q_2 \\\\ \\tilde{z}_1(1;q) + (\\tilde{z}_2(1;q))^2 - 1 \\end{bmatrix}$$\n\n**选项评估**\n\n*   **选项 A：**\n    - **单次打靶法：** 残差 $R(s)$、ODE 系统函数 $f(x,z)$、灵敏度 IVP（方程、雅可比矩阵和初始条件）以及 $\\mathrm{d}R/\\mathrm{d}s$ 的表达式都与推导完全匹配。\n    - **多次打靶法：** 未知向量 $u$ 和残差向量 $F(u)$ 也与推导完全匹配。\n    - **结论：正确。**\n\n*   **选项 B：**\n    - **单次打靶法：** 残差 $R(s) = z_1(1;s) - 1$ 不正确；它对应于一个不同的边界条件 $y(1)=1$。灵敏度初始条件 $w(0) = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix}$ 不正确；它将对应于对 $y(0)$ 进行打靶，但参数是 $s=y'(0)$。\n    - **多次打靶法：** 未知向量 $u = \\begin{bmatrix} s \\\\ q_1 \\end{bmatrix}$ 不完整。它在分割面处任意固定了第二个状态变量 $z_2(c)=0$，这是不合理的。该系统是不适定的，因为其未知数和方程的数量少于所需。\n    - **结论：不正确。**\n\n*   **选项 C：**\n    - **单次打靶法：** 残差 $R(s) = z_1(1;s) + z_2(1;s) - 1$ 不正确；它对应于一个线性边界条件 $y(1)+y'(1)=1$。灵敏度 ODE 被设定为非齐次的，这根本上是错误的。对于与参数无关的 $f$，灵敏度 ODE 必须是线性的和齐次的，即 $w'=Jw$。\n    - **多次打靶法：** 残差向量对连续性使用了平方范数 $(\\dots)^2+(\\dots)^2=0$，这将两个必需的方程减少为一个，使得系统欠定。它还包括一个任意条件 $q_2=0$。该表达形式完全错误。\n    - **结论：不正确。**\n\n*   **选项 D：**\n    - **单次打靶法：** 灵敏度方程的雅可比矩阵被给出为 $\\begin{bmatrix} 0 & 1 \\\\ -1 & 1 \\end{bmatrix}$，这是不正确的。正确的雅可比矩阵是 $\\begin{bmatrix} 0 & 1 \\\\ -1 & 0 \\end{bmatrix}$。灵敏度初始条件 $w(0)=\\begin{bmatrix} 0 \\\\ -1 \\end{bmatrix}$ 也因符号错误而不正确。\n    - **多次打靶法：** 未知向量 $u$ 错误地将 $y_0=y(0)$ 包含为一个变量。由于 $y(0)=0$ 是一个给定的固定值，在标准形式中它不应是未知向量的一部分。\n    - **结论：不正确。**\n\n基于此分步分析，只有选项 A 为给定的边界值问题提供了完全正确且一致的单次打靶法和多次打靶法的表达形式。", "answer": "$$\\boxed{A}$$", "id": "2445807"}]}