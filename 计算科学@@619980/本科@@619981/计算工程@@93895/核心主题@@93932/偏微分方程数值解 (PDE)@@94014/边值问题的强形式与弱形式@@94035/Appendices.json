{"hands_on_practices": [{"introduction": "理论联系实践是掌握有限元法（FEM）的关键。本练习将指导您手动构建一个简单的 $1D$ 边界值问题（BVP）的有限元系统，这是理解抽象的弱形式如何转化为具体的线性代数方程 $K\\mathbf{u} = \\mathbf{F}$ 的最佳途径。通过为两个线性单元手动构建 $2 \\times 2$ 刚度矩阵和力向量，您将巩固对伽辽金法（Galerkin Method）核心机制的理解。[@problem_id:2440325]", "problem": "考虑区间 $\\left(0,1\\right)$ 上的稳定一维扩散边界值问题 (BVP)：\n$$\n- \\frac{d}{dx}\\!\\left(k\\,\\frac{du}{dx}\\right) \\;=\\; f_0 \\quad \\text{在 } \\left(0,1\\right) \\text{ 内},\n$$\n其中本质边界条件为 $u(0)=0$，自然边界条件为 $k\\,u'(1)=t_0$，$k>0$、$f_0$ 和 $t_0$ 是给定常数。使用标准伽辽金有限元法 (FEM)，在 $\\left[0,1\\right]$ 上采用两个均匀的线性单元（节点位于 $x_0=0$、$x_1=\\tfrac{1}{2}$、$x_2=1$）对该问题的弱形式进行离散化。施加本质边界条件 $u(0)=0$ 后，手动构建与未知节点值 $u_1$ 和 $u_2$ 相关联的组装后的简化 $2\\times 2$ 全局刚度矩阵及相应的右端力向量。\n\n请给出此组装后的简化 $2\\times 2$ 刚度矩阵的行列式作为最终答案，表示为仅含 $k$ 的简化解析表达式。不包含单位。无需四舍五入。", "solution": "首先将对问题陈述进行严格验证。\n\n**步骤 1：提取已知条件**\n- 微分方程：$- \\frac{d}{dx}\\!\\left(k\\,\\frac{du}{dx}\\right) = f_0$\n- 域：$x \\in (0,1)$\n- 边界条件：$u(0)=0$ (本质) 和 $k\\,u'(1)=t_0$ (自然)\n- 常数：$k>0$、$f_0$、$t_0$ 是给定常数。\n- 离散化：标准伽辽金有限元法 (FEM)，采用两个均匀的线性单元。\n- 节点：$x_0=0$、$x_1=\\tfrac{1}{2}$、$x_2=1$。\n- 目标：为未知节点值 $u_1$ 和 $u_2$ 构建简化的 $2\\times 2$ 全局刚度矩阵和力向量，然后求此刚度矩阵的行列式。\n\n**步骤 2：使用提取的已知条件进行验证**\n该问题是标准的二阶一维扩散边界值问题。\n- **科学依据：** 该问题是稳态热传导或扩散的典型表示，是物理学和工程学中的一个基本概念。它是科学上合理的。\n- **适定性：** 对于二阶椭圆方程，一端的本质边界条件和另一端的自然（诺伊曼）边界条件相结合，确保了唯一且稳定解的存在。该问题是适定的。\n- **客观性：** 问题使用精确的数学语言陈述，没有主观或含糊的术语。\n- **完备性：** 所有必要信息，包括微分方程、域、边界条件、离散化方案和要求输出，都已明确提供。该问题是自洽的。\n\n**步骤 3：结论与行动**\n问题有效。将推导完整解法。\n\n起点是该边界值问题的强形式：\n$$\n- \\frac{d}{dx}\\!\\left(k\\,\\frac{du}{dx}\\right) = f_0 \\quad \\text{for } x \\in (0,1)\n$$\n边界条件为 $u(0)=0$ 和 $k \\frac{du}{dx}(1) = t_0$。\n\n为了推导弱形式，我们将微分方程乘以一个合适的检验函数 $v(x)$，并在域 $\\Omega = (0,1)$ 上积分：\n$$\n-\\int_{0}^{1} v \\frac{d}{dx}\\!\\left(k\\,\\frac{du}{dx}\\right) dx = \\int_{0}^{1} v f_0 dx\n$$\n对左侧项应用分部积分法得到：\n$$\n\\int_{0}^{1} \\frac{dv}{dx} k \\frac{du}{dx} dx - \\left[ v k \\frac{du}{dx} \\right]_{0}^{1} = \\int_{0}^{1} v f_0 dx\n$$\n整理并代入边界条件：\n$$\n\\int_{0}^{1} k \\frac{du}{dx} \\frac{dv}{dx} dx = \\int_{0}^{1} f_0 v dx + v(1) \\left(k \\frac{du}{dx}(1)\\right) - v(0) \\left(k \\frac{du}{dx}(0)\\right)\n$$\n本质边界条件是 $u(0)=0$。检验函数 $v$ 必须属于一个函数空间，在该空间中，此条件以其齐次形式满足，即 $v(0)=0$。这使得包含 $v(0)$ 的项消失。自然边界条件是 $k \\frac{du}{dx}(1) = t_0$。此值被直接代入。\n\n弱形式为：求 $u(x) \\in V = \\{ w \\in H^1(0,1) | w(0)=0 \\}$，使得对于所有 $v(x) \\in V$：\n$$\n\\int_{0}^{1} k u'(x) v'(x) dx = \\int_{0}^{1} f_0 v(x) dx + t_0 v(1)\n$$\n将域 $[0,1]$ 离散为两个均匀单元，记为 $\\Omega_1 = [0, \\tfrac{1}{2}]$ 和 $\\Omega_2 = [\\tfrac{1}{2}, 1]$。节点位于 $x_0=0$，$x_1=\\tfrac{1}{2}$ 和 $x_2=1$。单元长度为 $h = \\tfrac{1}{2}$。\n\n我们使用线性基（形）函数 $N_i(x)$ 来近似解 $u(x)$：\n$$\nu(x) \\approx u^h(x) = \\sum_{j=0}^{2} u_j N_j(x) = u_0 N_0(x) + u_1 N_1(x) + u_2 N_2(x)\n$$\n其中 $u_j = u(x_j)$ 是节点值。伽辽金法使用基函数作为检验函数，即 $v(x) = N_i(x)$。\n\n长度为 $h$ 的线性单元的单元刚度矩阵由 $K^{(e)}_{ij} = \\int_{\\Omega_e} k \\frac{dN_j}{dx} \\frac{dN_i}{dx} dx$ 给出。对于常数 $k$ 和单元长度 $h$，其为：\n$$\nK^{(e)} = \\frac{k}{h} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}\n$$\n由于 $h=\\tfrac{1}{2}$，两个单元的刚度矩阵均为：\n$$\nK^{(1)} = K^{(2)} = \\frac{k}{1/2} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} = \\begin{pmatrix} 2k & -2k \\\\ -2k & 2k \\end{pmatrix}\n$$\n源项 $f_0$ 产生的单元力向量为 $F^{(e)}_{f,i} = \\int_{\\Omega_e} f_0 N_i dx$。对于常数 $f_0$ 和线性单元，其为：\n$$\nF^{(e)}_f = \\frac{f_0 h}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\n$$\n由于 $h=\\tfrac{1}{2}$，两个单元的力向量均为：\n$$\nF^{(1)}_f = F^{(2)}_f = \\frac{f_0 (1/2)}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} f_0/4 \\\\ f_0/4 \\end{pmatrix}\n$$\n现在，我们组装 $3 \\times 3$ 全局系统 $K \\mathbf{u} = F$。\n全局刚度矩阵 $K$ 是通过对各单元的贡献求和来组装的：\n$$\nK_{00} = K^{(1)}_{11} = 2k\n$$\n$$\nK_{11} = K^{(1)}_{22} + K^{(2)}_{11} = 2k + 2k = 4k\n$$\n$$\nK_{22} = K^{(2)}_{22} = 2k\n$$\n$$\nK_{01} = K_{10} = K^{(1)}_{12} = -2k\n$$\n$$\nK_{12} = K_{21} = K^{(2)}_{12} = -2k\n$$\n因此，全局刚度矩阵为：\n$$\nK = \\begin{pmatrix} 2k & -2k & 0 \\\\ -2k & 4k & -2k \\\\ 0 & -2k & 2k \\end{pmatrix}\n$$\n全局力向量 $F$ 包含源项 $f_0$ 和自然边界条件 $t_0$ 的贡献。总力向量为 $F_i = \\int_0^1 f_0 N_i dx + t_0 N_i(1)$。\n$$\nF_0 = \\int_{\\Omega_1} f_0 N_0 dx + t_0 N_0(1) = f_0/4 + t_0(0) = f_0/4\n$$\n$$\nF_1 = \\int_{\\Omega_1} f_0 N_1 dx + \\int_{\\Omega_2} f_0 N_1 dx + t_0 N_1(1) = f_0/4 + f_0/4 + t_0(0) = f_0/2\n$$\n$$\nF_2 = \\int_{\\Omega_2} f_0 N_2 dx + t_0 N_2(1) = f_0/4 + t_0(1) = f_0/4 + t_0\n$$\n组装后的系统为：\n$$\n\\begin{pmatrix} 2k & -2k & 0 \\\\ -2k & 4k & -2k \\\\ 0 & -2k & 2k \\end{pmatrix} \\begin{pmatrix} u_0 \\\\ u_1 \\\\ u_2 \\end{pmatrix} = \\begin{pmatrix} f_0/4 \\\\ f_0/2 \\\\ f_0/4 + t_0 \\end{pmatrix}\n$$\n接下来，我们施加本质边界条件 $u(0)=u_0=0$。这将系统简化为关于未知节点值 $u_1$ 和 $u_2$ 的 $2 \\times 2$ 系统。我们考虑完整系统的第二行和第三行，并代入 $u_0=0$：\n$$\n-2k(u_0) + 4k u_1 - 2k u_2 = f_0/2 \\implies 4k u_1 - 2k u_2 = f_0/2\n$$\n$$\n0(u_0) - 2k u_1 + 2k u_2 = f_0/4 + t_0 \\implies -2k u_1 + 2k u_2 = f_0/4 + t_0\n$$\n得到的简化 $2 \\times 2$ 系统为：\n$$\n\\begin{pmatrix} 4k & -2k \\\\ -2k & 2k \\end{pmatrix} \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix} = \\begin{pmatrix} f_0/2 \\\\ f_0/4 + t_0 \\end{pmatrix}\n$$\n问题要求计算组装后的简化 $2 \\times 2$ 全局刚度矩阵的行列式，该矩阵为：\n$$\nK_{reduced} = \\begin{pmatrix} 4k & -2k \\\\ -2k & 2k \\end{pmatrix}\n$$\n行列式计算如下：\n$$\n\\det(K_{reduced}) = (4k)(2k) - (-2k)(-2k) = 8k^2 - 4k^2 = 4k^2\n$$\n这就是所要求的表达式。", "answer": "$$\\boxed{4k^{2}}$$", "id": "2440325"}, {"introduction": "弱形式的一个主要优势在于其优雅地处理强形式难以应对的问题，例如奇异源项。本练习探讨了一个带有集中点热源（数学上用狄拉克 $\\delta$ 函数表示）的稳态热传导问题。您将从第一性原理出发，推导出问题的强形式和弱形式，并观察弱形式的积分特性如何自然地将点源纳入系统，即使该点源不位于任何单元节点上。[@problem_id:2440379]", "problem": "一根长度为 $L$、横截面积 $A$ 为常数的细杆，以恒定的导热系数 $k$ 进行稳态导热。杆内没有分布体热源，但在位置 $x_p$ 处施加了一个总速率为 $Q$ (单位瓦特) 的集中点热输入，其中 $0 < x_p < a < L$。边界温度给定为 $u(0) = 0$ 和 $u(L) = 0$。你需要推导该边值问题的强形式和弱形式，然后使用有限元法 (FEM) 近似求解。有限元网格包含两个线性单元和三个节点，分别位于 $x_0 = 0$、$x_1 = a$ 和 $x_2 = L$。特意选择 $x_p \\neq x_i$ (对于任意节点 $i$)，以使点热源严格位于左侧单元内。\n\n仅从能量守恒和 Fourier 定律出发，且不假设任何简便公式：\n\n- 推导描述此情况的温度场 $u(x)$ 在 $(0,L)$ 上的强形式，包括所有边界条件。\n- 将强形式乘以一个满足本质边界条件的任意光滑检验函数 $v(x)$，并进行一次分部积分，从而推导弱形式，同时明确所涉及的函数空间。\n- 在每个单元上构建双节点线性形函数，并利用弱形式得到针对三个节点温度 $u_0$、$u_1$ 和 $u_2$ 的单元级和组装后的全局有限元平衡方程。\n- 施加本质边界条件 $u_0 = 0$和 $u_2 = 0$，并求解得到的简化系统，以获得内部节点温度 $u_1$ 关于 $Q$、$k$、$A$、$L$、$a$ 和 $x_p$ 的闭合解形式。\n\n提供 $u_1$ 的单一闭合解析表达式作为最终结果。温度以开尔文表示。", "solution": "在尝试任何求解之前，将首先对问题进行验证。这不是可选项，而是严谨科学工作的必要环节。\n\n步骤1：提取已知条件。\n- 一根长度为 $L$ 且横截面积 $A$ 恒定的细杆。\n- 稳态导热。\n- 导热系数 $k$ 为常数。\n- 无分布体热源。\n- 在位置 $x_p$ 处施加总速率为 $Q$ 的集中点热输入。\n- 热源位置满足 $0 < x_p < a < L$。\n- 给定的边界温度：$u(0) = 0$ 和 $u(L) = 0$。\n- 使用有限元法 (FEM) 和一个包含两个线性单元的网格来近似求解。\n- 三个节点位于 $x_0 = 0$、$x_1 = a$ 和 $x_2 = L$。\n- 点热源严格位于第一个单元内，因为对任意节点 $i$ 都有 $x_p \\neq x_i$。\n- 节点温度 $u_1$ 的最终结果必须是单一闭合解析表达式。\n- 温度以开尔文表示。\n\n步骤2：利用提取的已知条件进行验证。\n依据有效性标准对问题进行评估。\n- **科学依据**：该问题基于热传递的基本原理，即能量守恒和 Fourier 导热定律。使用点热源（数学上用 Dirac delta 函数表示）是物理学和工程分析中的一种标准且有效的理想化模型。该问题在科学上是合理的。\n- **适定性**：该问题描述了一个在两端具有给定 Dirichlet 边界条件的二阶常微分方程。这构成了一个适定的边值问题，预期存在唯一解。\n- **客观性**：该问题使用精确、无歧义的技术语言陈述，不含主观或基于观点的内容。\n- **完整性与一致性**：所有必要的参数（$L, A, k, Q, x_p, a$）、边界条件和几何约束均已提供。这些条件是内部一致的（例如，$0 < x_p < a < L$ 正确地将热源置于所定义网格的第一个单元内）。\n- **物理真实性**：虽然 $u(0) = 0$ 开尔文的边界条件在物理上是不可能的，但这在理论问题中是一种常见的数学简化，通常表示相对于某个参考基准的温差。我们将把它理解为一种数学理想化并继续进行。\n\n步骤3：结论与行动。\n问题有效。将进行求解。\n\n推导将按要求的四个阶段进行。\n\n首先，我们推导边值问题的强形式。\n控制原理是稳态下的能量守恒。对于杆内不包含热源 $x_p$ 的任意一段 $[x_a, x_b]$，在 $x_a$ 处进入的热量速率必须等于在 $x_b$ 处流出的热量速率。热流率由热通量 $q(x)$ 和面积 $A$ 的乘积给出。因此，$q(x_a)A - q(x_b)A = 0$。\nFourier 定律指出 $q(x) = -k \\frac{du}{dx}$。将其代入能量平衡方程，得到 $-kA\\frac{du}{dx}|_{x_a} - (-kA\\frac{du}{dx}|_{x_b}) = 0$。由于这对任意区间 $[x_a, x_b]$ 都成立，这意味着量 $-kA \\frac{du}{dx}$ 是一个常数。对 $x$ 求导，得到无源区域的控制微分方程：\n$$\n\\frac{d}{dx}\\left(-kA\\frac{du}{dx}\\right) = 0\n$$\n由于 $k$ 和 $A$ 是常数，方程简化为 $\\frac{d^2u}{dx^2} = 0$，适用于 $x \\in (0, L)$ 且 $x \\neq x_p$。\n\n在点热源位置 $x_p$ 处，我们对一个无穷小控制体 $[x_p - \\epsilon, x_p + \\epsilon]$（当 $\\epsilon \\to 0$ 时）进行能量平衡。平衡关系为：(在 $x_p-\\epsilon$ 处输入的热量) - (在 $x_p+\\epsilon$ 处输出的热量) + (热源项) = 0。\n$$\n\\left(-kA\\frac{du}{dx}\\right)\\bigg|_{x_p-\\epsilon} - \\left(-kA\\frac{du}{dx}\\right)\\bigg|_{x_p+\\epsilon} + Q = 0\n$$\n这表示热通量的不连续性。我们可以用 Dirac delta 函数 $\\delta(x-x_p)$ 来表示分布在整个域上的热源项 $Q$。整个域 $(0,L)$ 的控制方程变为：\n$$\n-kA\\frac{d^2u}{dx^2} = Q \\delta(x-x_p)\n$$\n强形式是求解满足此微分方程和给定 Dirichlet 边界条件 $u(0)=0$ 和 $u(L)=0$ 的温度场 $u(x)$。\n\n第二，我们推导弱形式。\n我们将强形式的微分方程乘以一个光滑的检验函数 $v(x)$，并在域 $\\Omega = (0, L)$ 上积分。检验函数 $v(x)$ 必须属于一个函数空间 $V$，该空间中的函数满足本质边界条件的齐次形式，即 $v(0)=0$ 和 $v(L)=0$。\n$$\n\\int_0^L \\left(-kA\\frac{d^2u}{dx^2} - Q \\delta(x-x_p)\\right) v(x) \\,dx = 0\n$$\n这必须对所有 $v \\in V$ 成立。我们将各项分开：\n$$\n-\\int_0^L kA\\frac{d^2u}{dx^2} v(x) \\,dx - \\int_0^L Q \\delta(x-x_p) v(x) \\,dx = 0\n$$\n第二个积分利用 Dirac delta 函数的筛选性质进行计算：$\\int_0^L Q \\delta(x-x_p) v(x) \\,dx = Q v(x_p)$。\n我们对第一项应用分部积分，$\\int u''v = [u'v] - \\int u'v'$：\n$$\n-\\int_0^L kA\\frac{d^2u}{dx^2} v(x) \\,dx = -kA \\left[ \\frac{du}{dx} v(x) \\right]_0^L + \\int_0^L kA \\frac{du}{dx} \\frac{dv}{dx} \\,dx\n$$\n边界项 $-kA \\left( \\frac{du}{dx}|_L v(L) - \\frac{du}{dx}|_0 v(0) \\right)$ 为零，因为对于任何检验函数 $v \\in V$，都有 $v(L)=0$ 和 $v(0)=0$。\n代回后，方程变为：\n$$\n\\int_0^L kA \\frac{du}{dx} \\frac{dv}{dx} \\,dx - Q v(x_p) = 0\n$$\n弱形式为：求解 $u \\in U = \\{u \\in H^1(0,L) \\mid u(0)=0, u(L)=0\\}$，使得对于所有 $v \\in V = \\{v \\in H^1(0,L) \\mid v(0)=0, v(L)=0\\}$，以下关系式成立：\n$$\n\\int_0^L kA \\frac{du}{dx} \\frac{dv}{dx} \\,dx = Q v(x_p)\n$$\n此处，$H^1(0,L)$ 是定义在 $(0,L)$ 上且其一阶导数平方可积的函数所构成的 Sobolev 空间。\n\n第三，我们构建有限元近似。\n将域 $[0, L]$ 离散化为节点 $x_0=0, x_1=a, x_2=L$，形成两个单元：单元 1 覆盖 $[0,a]$，单元 2 覆盖 $[a,L]$。\n温度场 $u(x)$ 和检验函数 $v(x)$ 使用线性形函数 $N_i(x)$ 进行近似：$u(x) \\approx u_h(x) = \\sum_{i=0}^{2} u_i N_i(x)$ 和 $v(x) \\approx v_h(x) = \\sum_{j=0}^{2} c_j N_j(x)$，其中 $u_i$ 是未知的节点温度，$c_j$ 是任意系数。\n\n全局形函数 $N_i(x)$ 是分段线性的。\n对于单元 1（$x \\in [0, a]$，长度 $L_e^{(1)}=a$）：\n$N_0^{(1)}(x) = 1 - \\frac{x}{a}$, $N_1^{(1)}(x) = \\frac{x}{a}$.\n它们的导数是 $\\frac{dN_0^{(1)}}{dx} = -\\frac{1}{a}$，$\\frac{dN_1^{(1)}}{dx} = \\frac{1}{a}$。\n\n对于单元 2（$x \\in [a, L]$，长度 $L_e^{(2)}=L-a$）：\n$N_1^{(2)}(x) = 1 - \\frac{x-a}{L-a} = \\frac{L-x}{L-a}$, $N_2^{(2)}(x) = \\frac{x-a}{L-a}$.\n它们的导数是 $\\frac{dN_1^{(2)}}{dx} = -\\frac{1}{L-a}$，$\\frac{dN_2^{(2)}}{dx} = \\frac{1}{L-a}$。\n\n将这些近似代入弱形式，得到代数方程组 $[K]\\{u\\}=\\{F\\}$。\n刚度矩阵的分量为 $K_{ji} = \\int_0^L kA \\frac{dN_j}{dx} \\frac{dN_i}{dx} dx$。\n力向量的分量为 $F_j = Q N_j(x_p)$。\n\n长度为 $L_e$ 的一维线性单元的单元刚度矩阵为 $k^{(e)} = \\frac{kA}{L_e} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}$。\n对于单元 1（节点 0, 1），$L_e=a$：$k^{(1)} = \\frac{kA}{a} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}$。\n对于单元 2（节点 1, 2），$L_e=L-a$：$k^{(2)} = \\frac{kA}{L-a} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}$。\n\n由于 $0 < x_p < a$，热源 $Q$ 在 $x_p$ 处位于单元 1 内部。\n单元力向量为 $F^{(e)}_j = \\int_{L_e} Q \\delta(x-x_p) N_j^{(e)}(x) dx = Q N_j^{(e)}(x_p)$。\n对于单元 1（节点 0, 1）：$F^{(1)} = \\begin{pmatrix} Q N_0^{(1)}(x_p) \\\\ Q N_1^{(1)}(x_p) \\end{pmatrix} = Q \\begin{pmatrix} 1-x_p/a \\\\ x_p/a \\end{pmatrix}$。\n对于单元 2，没有热源：$F^{(2)} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}$。\n\n组装节点 (0, 1, 2) 的全局系统：\n$K_{00} = k^{(1)}_{00} = \\frac{kA}{a}$\n$K_{11} = k^{(1)}_{11} + k^{(2)}_{11} = \\frac{kA}{a} + \\frac{kA}{L-a}$\n$K_{22} = k^{(2)}_{22} = \\frac{kA}{L-a}$\n$K_{01}=K_{10} = k^{(1)}_{01} = -\\frac{kA}{a}$\n$K_{12}=K_{21} = k^{(2)}_{12} = -\\frac{kA}{L-a}$\n$K_{02}=K_{20} = 0$\n全局刚度矩阵是 $K = kA \\begin{pmatrix} \\frac{1}{a} & -\\frac{1}{a} & 0 \\\\ -\\frac{1}{a} & \\frac{1}{a} + \\frac{1}{L-a} & -\\frac{1}{L-a} \\\\ 0 & -\\frac{1}{L-a} & \\frac{1}{L-a} \\end{pmatrix}$。\n\n全局力向量是 $F = \\begin{pmatrix} F^{(1)}_0 \\\\ F^{(1)}_1 + F^{(2)}_1 \\\\ F^{(2)}_2 \\end{pmatrix} = \\begin{pmatrix} Q(1-x_p/a) \\\\ Q(x_p/a) \\\\ 0 \\end{pmatrix}$。\n\n完整方程组是：\n$$\nkA \\begin{pmatrix} \\frac{1}{a} & -\\frac{1}{a} & 0 \\\\ -\\frac{1}{a} & \\frac{1}{a} + \\frac{1}{L-a} & -\\frac{1}{L-a} \\\\ 0 & -\\frac{1}{L-a} & \\frac{1}{L-a} \\end{pmatrix} \\begin{pmatrix} u_0 \\\\ u_1 \\\\ u_2 \\end{pmatrix} = Q \\begin{pmatrix} 1 - \\frac{x_p}{a} \\\\ \\frac{x_p}{a} \\\\ 0 \\end{pmatrix}\n$$\n\n第四，我们施加边界条件并求解 $u_1$。\n本质边界条件是 $u_0 = 0$ 和 $u_2 = 0$。这些节点是受约束的。唯一的未知数是自由节点 $x_1=a$ 处的温度 $u_1$。我们只需要对应于该自由度的方程，即矩阵系统的第二行：\n$$\nkA \\left[ -\\frac{1}{a} u_0 + \\left(\\frac{1}{a} + \\frac{1}{L-a}\\right)u_1 - \\frac{1}{L-a} u_2 \\right] = Q \\frac{x_p}{a}\n$$\n代入 $u_0 = 0$ 和 $u_2 = 0$：\n$$\nkA \\left(\\frac{1}{a} + \\frac{1}{L-a}\\right)u_1 = Q \\frac{x_p}{a}\n$$\n我们简化括号中的项：\n$$\n\\frac{1}{a} + \\frac{1}{L-a} = \\frac{L-a+a}{a(L-a)} = \\frac{L}{a(L-a)}\n$$\n关于 $u_1$ 的方程变为：\n$$\nkA \\frac{L}{a(L-a)} u_1 = Q \\frac{x_p}{a}\n$$\n最后，我们求解 $u_1$：\n$$\nu_1 = \\frac{Q x_p/a}{kA L / (a(L-a))} = \\frac{Q x_p}{a} \\cdot \\frac{a(L-a)}{kA L}\n$$\n$$\nu_1 = \\frac{Q x_p (L-a)}{kA L}\n$$\n这就是节点 $x_1=a$ 处温度的闭合解。单位分析 $\\frac{[W][m][m]}{[W/(m \\cdot K)][m^2][m]} = [K]$ 证实结果是一个温度，与题目要求一致。", "answer": "$$\n\\boxed{\\frac{Q x_p (L-a)}{k A L}}\n$$", "id": "2440379"}, {"introduction": "从解析推导过渡到真实的计算实践，我们必须考虑数值积分的影响。在实际的有限元软件中，弱形式中的积分通常是通过数值求积（numerical quadrature）来近似计算的，而这种近似的精度至关重要。这个编码练习将引导您探索“变分犯罪”（variational crimes）——即由于数值积分不精确而导致的误差——并使用“制造解法”（method of manufactured solutions）来研究它对有限元解的收敛率的影响。[@problem_id:2440375]", "problem": "考虑在开区间 $\\Omega = (0,1)$ 上的具有齐次Dirichlet边界条件的一维、二阶、线性、自伴边值问题：\n求 $u:\\,[0,1]\\to\\mathbb{R}$ 使得\n对于 $x \\in (0,1)$，有 $-(a(x)\\,u^{\\prime}(x))^{\\prime} = f(x)$，并且 $u(0)=0$ 和 $u(1)=0$。\n假设一个构造的精确解为 $u_{\\text{ex}}(x) = \\sin(\\pi x)$。对于给定的系数函数 $a(x)$，通过 $f(x) = -\\big(a^{\\prime}(x)\\,u_{\\text{ex}}^{\\prime}(x) + a(x)\\,u_{\\text{ex}}^{\\prime\\prime}(x)\\big)$ 定义源项 $f(x)$，其中 $u_{\\text{ex}}^{\\prime}(x) = \\pi \\cos(\\pi x)$ 且 $u_{\\text{ex}}^{\\prime\\prime}(x) = -\\pi^{2}\\sin(\\pi x)$。其弱形式为：求 $u \\in H_{0}^{1}(0,1)$，使得对于所有 $v \\in H_{0}^{1}(0,1)$，\n$\\int_{0}^{1} a(x)\\,u^{\\prime}(x)\\,v^{\\prime}(x)\\,dx = \\int_{0}^{1} f(x)\\,v(x)\\,dx$。\n\n使用在 $[0,1]$ 的均匀剖分（划分为 $N$ 个大小为 $h = 1/N$ 的单元）上的连续分片线性有限元空间进行离散化。组装并求解所得的线性系统，以获得离散解的节点值。\n\n定义两种用于近似双线性和线性形式的单元数值积分法则：\n- 精确积分 $Q_{\\text{acc}}$：在参考区间 $[-1,1]$ 上的3点Gauss–Legendre法则，节点为 $\\{\\xi_{q}\\} = \\{-\\sqrt{3/5},\\,0,\\,\\sqrt{3/5}\\}$，权重为 $\\{w_{q}\\} = \\{5/9,\\,8/9,\\,5/9\\}$。\n- 非精确积分 $Q_{\\text{crime}}$：在参考区间 $[-1,1]$ 上的1点中点法则，节点为 $\\xi_{1} = 0$，权重为 $w_{1} = 2$。\n\n在 $L^{2}$ 范数下度量离散误差，$\\|u_{h} - u_{\\text{ex}}\\|_{L^{2}(0,1)} = \\left(\\int_{0}^{1} (u_{h}(x) - u_{\\text{ex}}(x))^{2}\\,dx\\right)^{1/2}$，其中该积分需在每个单元上使用5点Gauss–Legendre法则进行数值计算。\n\n对于下方测试套件中的每个系数函数 $a(x)$，以及每种积分选择 $\\{Q_{\\text{acc}}, Q_{\\text{crime}}\\}$，为一系列网格尺寸 $\\{N\\}$ 计算有限元解，计算相应的 $L^{2}$ 误差，并以 $\\log(\\|u_{h}-u_{\\text{ex}}\\|_{L^{2}})$ 对 $\\log(h)$ 的最小二乘拟合斜率作为经验收敛率进行报告。\n\n测试套件：\n- 系数函数情形：\n  1. $a_{1}(x) = 1$。\n  2. $a_{2}(x) = 1 + x$。\n  3. $a_{3}(x) = e^{2x}$。\n- 网格尺寸：$N \\in \\{8,\\,16,\\,32,\\,64\\}$。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含六个经验收敛率，格式为方括号内以逗号分隔的列表，顺序如下\n$[r_{1,\\text{acc}}, r_{1,\\text{crime}}, r_{2,\\text{acc}}, r_{2,\\text{crime}}, r_{3,\\text{acc}}, r_{3,\\text{crime}}]$,\n其中 $r_{k,\\cdot}$ 表示在指定积分下，系数函数情形 $k \\in \\{1,2,3\\}$ 的经验收敛率。每个 $r_{k,\\cdot}$ 必须以浮点数形式报告。", "solution": "所给出的问题是计算工程领域中的一个适定的标准练习，具体涉及将有限元方法 (FEM) 应用于一维边值问题。它要求分析在不同数值积分方案下数值解的收敛率。问题陈述是完整的、科学上合理的且无歧义的。我们将着手进行形式化的求解。\n\n问题是找到满足以下微分方程和边界条件的函数 $u(x)$：\n$$\n-\\frac{d}{dx}\\left(a(x)\\frac{du}{dx}\\right) = f(x) \\quad \\text{for } x \\in (0,1)\n$$\n$$\nu(0) = 0, \\quad u(1) = 0\n$$\n这是问题的**强形式**。对于有限元方法，我们使用**弱形式**。为推导弱形式，我们将微分方程乘以一个来自合适空间的试探函数 $v(x)$，并在域 $\\Omega = (0,1)$ 上积分。与解空间一样，试探函数空间必须满足齐次Dirichlet边界条件。我们选择Sobolev空间 $H_0^1(0,1)$，其中包含在边界处为零且一阶导数平方可积的函数。\n\n$$\n-\\int_0^1 \\frac{d}{dx}\\left(a(x)\\frac{du}{dx}\\right) v(x) \\,dx = \\int_0^1 f(x) v(x) \\,dx\n$$\n我们对左侧项应用分部积分：\n$$\n\\int_0^1 a(x)\\frac{du}{dx}\\frac{dv}{dx} \\,dx - \\left[a(x)\\frac{du}{dx}v(x)\\right]_0^1 = \\int_0^1 f(x) v(x) \\,dx\n$$\n由于 $v(0)=0$ 和 $v(1)=0$，边界项 $\\left[a(x)\\frac{du}{dx}v(x)\\right]_0^1$ 为零。这便得到了弱形式：求 $u \\in H_0^1(0,1)$，使得对于所有 $v \\in H_0^1(0,1)$：\n$$\nB(u,v) \\equiv \\int_0^1 a(x)u'(x)v'(x) \\,dx = \\int_0^1 f(x)v(x) \\,dx \\equiv L(v)\n$$\n这里，$B(u,v)$ 是双线性形式，$L(v)$ 是线性形式。\n\n接下来，我们对问题进行离散化。将域 $[0,1]$ 剖分为 $N$ 个长度均匀为 $h=1/N$ 的子区间（单元）。节点位于 $x_i = ih$，其中 $i=0, 1, \\dots, N$。我们在有限维子空间 $V_h \\subset H_0^1(0,1)$ 内寻求近似解 $u_h(x)$。对于此问题，$V_h$ 是在 $x=0$ 和 $x=1$ 处为零的连续分片线性函数空间。该空间的一组基是“帽”函数集合 $\\{\\phi_j(x)\\}_{j=1}^{N-1}$，其中 $\\phi_j(x)$ 在每个单元上是线性的，在节点 $x_j$ 处为1，在所有其他节点处为0。近似解可写为这些基函数的线性组合：\n$$\nu_h(x) = \\sum_{j=1}^{N-1} U_j \\phi_j(x)\n$$\n其中 $U_j$ 是解的未知节点值。离散问题是：求 $u_h \\in V_h$，使得对于所有 $v_h \\in V_h$ 都有 $B(u_h, v_h) = L(v_h)$。通过为每个 $i=1, \\dots, N-1$ 选择 $v_h = \\phi_i(x)$，我们得到一个线性代数方程组：\n$$\n\\sum_{j=1}^{N-1} U_j B(\\phi_j, \\phi_i) = L(\\phi_i) \\quad \\text{for } i=1, \\dots, N-1\n$$\n这就是线性系统 $K\\mathbf{U} = \\mathbf{F}$，其中 $\\mathbf{U}$ 是未知节点值的向量，$K$ 是刚度矩阵，其元素为 $K_{ij} = B(\\phi_j, \\phi_i)$，$\\mathbf{F}$ 是载荷向量，其元素为 $F_i = L(\\phi_i)$。\n\n刚度矩阵和载荷向量的元素是通过组装每个单元的贡献来计算的。对于一个一般单元 $e_k = [x_k, x_{k+1}]$，单元刚度矩阵 $K^e$ 和单元载荷向量 $\\mathbf{F}^e$ 的元素为：\n$$\nK^e_{ij} = \\int_{x_k}^{x_{k+1}} a(x) \\phi_j'(x) \\phi_i'(x) \\,dx \\quad \\text{and} \\quad F^e_i = \\int_{x_k}^{x_{k+1}} f(x) \\phi_i(x) \\,dx\n$$\n其中 $\\phi_i, \\phi_j$ 在此是单元 $e_k$ 上的局部基函数。这些积分通常需要数值计算。我们使用线性映射 $x(\\xi) = x_k + \\frac{h}{2}(\\xi+1)$ 将积分变换到参考单元 $\\hat{e} = [-1,1]$ 上，其雅可比行列式为 $J = dx/d\\xi = h/2$。\n基函数的导数变换为 $\\phi'(x) = \\frac{d\\phi}{d\\xi}\\frac{d\\xi}{dx} = \\frac{d\\phi}{d\\xi} \\frac{1}{J}$。在参考单元上，线性基函数为 $\\hat{\\phi}_1(\\xi) = \\frac{1-\\xi}{2}$ 和 $\\hat{\\phi}_2(\\xi) = \\frac{1+\\xi}{2}$，其导数为 $\\mp\\frac{1}{2}$。因此，在物理单元上，导数是常数 $\\mp\\frac{1}{h}$。\n\n使用在 $[-1,1]$ 上具有节点 $\\xi_q$ 和权重 $w_q$ 的数值积分法则来近似这些积分：\n$$\nK^e_{ij} \\approx \\sum_{q} w_q \\left(a(x(\\xi_q)) \\phi_j'(x(\\xi_q)) \\phi_i'(x(\\xi_q))\\right) \\frac{h}{2}\n$$\n$$\nF^e_i \\approx \\sum_{q} w_q \\left(f(x(\\xi_q)) \\phi_i(x(\\xi_q))\\right) \\frac{h}{2}\n$$\n问题指定了两种积分法则：一个对此问题是精确的3点Gauss法则（$Q_{\\text{acc}}$），和一个可能不精确的1点中点法则（$Q_{\\text{crime}}$）。这种故意的非精确性被称为“变分犯罪”。它对收敛率的影响是本研究的主题。对于分片线性单元，只要积分法则足够精确，$L^2$ 范数下的误差 $\\|u_h - u_{\\text{ex}}\\|_{L^2}$ 的理论收敛率是 $O(h^2)$。使用像 $Q_{\\text{crime}}$ 这样的非精确法则可能会降低此收敛率。\n\n在组装全局 $(N-1) \\times (N-1)$ 矩阵 $K$ 和向量 $\\mathbf{F}$ 并求解 $K\\mathbf{U} = \\mathbf{F}$ 后，我们得到数值解 $u_h(x)$。误差在 $L^2$ 范数下度量：\n$$\n\\|u_h - u_{\\text{ex}}\\|_{L^{2}(0,1)} = \\left(\\int_{0}^{1} (u_h(x) - u_{\\text{ex}}(x))^{2}\\,dx\\right)^{1/2}\n$$\n该积分本身使用高阶（5点Gauss）积分法则进行数值计算，以确保其精度不会污染离散误差的度量。\n\n最后，我们分析收敛性。假设误差 $E = \\|u_h - u_{\\text{ex}}\\|_{L^2}$ 的行为符合 $E \\approx C h^p$，其中 $p$ 是收敛率，我们可以写出 $\\log(E) \\approx \\log(C) + p \\log(h)$。通过为一系列网格尺寸 $h$ 计算误差，我们可以通过找到点 $(\\log(h), \\log(E))$ 的最佳拟合线的斜率来确定经验收敛率 $p$。这是一个线性最小二乘回归问题。对每个系数函数 $a(x)$ 和每种积分法则重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D BVP using FEM and calculates empirical convergence rates.\n    \"\"\"\n\n    # Quadrature rules on [-1, 1]\n    Q_ACC = (\n        np.array([-np.sqrt(3./5.), 0., np.sqrt(3./5.)]),  # nodes\n        np.array([5./9., 8./9., 5./9.])                  # weights\n    )\n    Q_CRIME = (\n        np.array([0.]),     # node\n        np.array([2.])      # weight\n    )\n    Q_ERROR = (\n        np.array([-0.906179845938664, -0.538469310105683, 0, 0.538469310105683, 0.906179845938664]),\n        np.array([0.236926885056189, 0.478628670499366, 0.568888888888889, 0.478628670499366, 0.236926885056189])\n    )\n    \n    # Mesh sizes\n    Ns = [8, 16, 32, 64]\n    hs = [1.0 / n for n in Ns]\n\n    # Manufactured solution and its derivatives\n    pi = np.pi\n    u_ex = lambda x: np.sin(pi * x)\n    u_ex_prime = lambda x: pi * np.cos(pi * x)\n    u_ex_prime_prime = lambda x: -pi**2 * np.sin(pi * x)\n\n    # Test cases: coefficient functions a(x) and their derivatives a'(x)\n    test_suite = [\n        (lambda x: 1.0, lambda x: 0.0),                               # a1(x) = 1\n        (lambda x: 1.0 + x, lambda x: 1.0),                           # a2(x) = 1 + x\n        (lambda x: np.exp(2 * x), lambda x: 2 * np.exp(2 * x))         # a3(x) = e^(2x)\n    ]\n    \n    quad_choices = {\"acc\": Q_ACC, \"crime\": Q_CRIME}\n\n    results = []\n\n    def fem_1d_solver(N, a_func, f_func, quad_rule):\n        \"\"\"Assembles and solves the FEM system for a given case.\"\"\"\n        h = 1.0 / N\n        num_unknowns = N - 1\n        K = np.zeros((num_unknowns, num_unknowns))\n        F = np.zeros(num_unknowns)\n\n        quad_nodes, quad_weights = quad_rule\n        \n        # Local basis functions (hat functions) on reference element [-1, 1]\n        phi_ref = [lambda xi: (1.0 - xi) / 2.0, lambda xi: (1.0 + xi) / 2.0]\n        # Derivatives of local basis functions on physical element (constant)\n        dphi_dx = np.array([-1.0 / h, 1.0 / h])\n\n        for k in range(N):  # Loop over elements\n            x_k = k * h\n            \n            # Element stiffness matrix and load vector\n            K_e = np.zeros((2, 2))\n            F_e = np.zeros(2)\n\n            for q_idx, xi_q in enumerate(quad_nodes):\n                w_q = quad_weights[q_idx]\n                x_q = x_k + h / 2.0 * (xi_q + 1.0)\n                \n                #\n                # Element stiffness matrix contribution\n                # K_ij = integral( a(x) * phi_j' * phi_i' dx)\n                #\n                a_val = a_func(x_q)\n                for i in range(2):\n                    for j in range(2):\n                        K_e[i, j] += w_q * a_val * dphi_dx[j] * dphi_dx[i] * (h / 2.0)\n                \n                #\n                # Element load vector contribution\n                # F_i = integral( f(x) * phi_i dx )\n                #\n                f_val = f_func(x_q)\n                for i in range(2):\n                    F_e[i] += w_q * f_val * phi_ref[i](xi_q) * (h / 2.0)\n\n            # Assemble into global system\n            for i in range(2):\n                global_i = k + i\n                if 0  global_i  N: # Is it an interior node?\n                    F[global_i - 1] += F_e[i]\n                    for j in range(2):\n                        global_j = k + j\n                        if 0  global_j  N:\n                            K[global_i - 1, global_j - 1] += K_e[i, j]\n        \n        # Solve for nodal values\n        U_interior = np.linalg.solve(K, F)\n        \n        # Construct full solution vector (including boundaries)\n        U_h = np.zeros(N + 1)\n        U_h[1:-1] = U_interior\n        \n        return U_h\n\n    def calculate_l2_error(N, U_h, u_ex_func):\n        \"\"\"Calculates the L2 norm of the error.\"\"\"\n        h = 1.0 / N\n        total_error_sq = 0.0\n        \n        nodes, weights = Q_ERROR\n        # Local basis functions (hat functions) on reference element [-1, 1]\n        phi_ref = [lambda xi: (1.0 - xi) / 2.0, lambda xi: (1.0 + xi) / 2.0]\n\n        for k in range(N): # Loop over elements\n            x_k = k * h\n            \n            U_local = U_h[k:k+2] # Nodal values for this element\n            \n            element_error_sq = 0.0\n            for q_idx, xi_q in enumerate(nodes):\n                w_q = weights[q_idx]\n                x_q = x_k + h / 2.0 * (xi_q + 1.0)\n                \n                # Interpolate numerical solution at quadrature point\n                u_h_val = U_local[0] * phi_ref[0](xi_q) + U_local[1] * phi_ref[1](xi_q)\n                \n                # Evaluate exact solution\n                u_ex_val = u_ex_func(x_q)\n                \n                # Add to integral\n                element_error_sq += w_q * (u_h_val - u_ex_val)**2 * (h / 2.0)\n            \n            total_error_sq += element_error_sq\n            \n        return np.sqrt(total_error_sq)\n\n    for a_func, a_prime_func in test_suite:\n        # Define source term f(x) for the current a(x)\n        f_func = lambda x: -(a_prime_func(x) * u_ex_prime(x) + a_func(x) * u_ex_prime_prime(x))\n        \n        for name, quad in quad_choices.items():\n            errors = []\n            for N in Ns:\n                # 1. Solve the system\n                U_h = fem_1d_solver(N, a_func, f_func, quad)\n                \n                # 2. Calculate error\n                error = calculate_l2_error(N, U_h, u_ex)\n                errors.append(error)\n\n            # 3. Compute convergence rate\n            log_h = np.log(hs)\n            log_err = np.log(errors)\n            # F(x) = m*x + c. We want m.\n            rate = np.polyfit(log_h, log_err, 1)[0]\n            results.append(rate)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2440375"}]}