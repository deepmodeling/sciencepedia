{"hands_on_practices": [{"introduction": "在对诸如平流方程之类的守恒律进行离散化时，有限体积法（FVM）和有限差分法（FD）都是强大的工具。尽管它们在概念上有所不同——前者基于单元平均和通量，后者基于点的导数近似——但它们是否总会产生不同的数值格式？本练习将挑战你从这两种视角出发，实现一个一阶迎风格式，并比较所得的常微分方程（ODE）组，从而揭示这两种重要方法之间的根本联系。[@problem_id:2444651]", "problem": "考虑由偏微分方程（PDE）给出的线性平流守恒律\n$$\n\\partial_t u(x,t) + a\\,\\partial_x u(x,t) = 0,\n$$\n该方程定义在空间域 $x\\in[0,1]$ 上，具有周期性边界条件，时间 $t\\ge 0$。平流速度 $a$ 是一个常实数。使用线方法（MOL），在一个包含 $N$ 个单元的均匀网格上构造两种空间半离散化。网格单元宽度为 $\\Delta x = 1/N$，单元中心为 $x_i = (i+\\tfrac{1}{2})\\Delta x$，其中 $i\\in\\{0,1,\\dots,N-1\\}$：\n\n- 一种有限体积法（FVM），其中未知数 $U_i(t)$ 近似第 $i$ 个单元上的单元平均值，其半离散常微分方程（ODE）系统为\n$$\n\\frac{\\mathrm{d}U_i}{\\mathrm{d}t} = -\\frac{F_{i+\\frac{1}{2}} - F_{i-\\frac{1}{2}}}{\\Delta x},\n$$\n其中一阶迎风数值通量为\n$$\nF_{i+\\frac{1}{2}} =\n\\begin{cases}\na\\,U_i, & a>0,\\\\\na\\,U_{i+1}, & a<0,\n\\end{cases}\n$$\n并采用周期性索引，使得 $U_{-1} = U_{N-1}$ 且 $U_{N} = U_0$。\n\n- 一种有限差分法（FD），其中未知数 $V_i(t)$ 近似相同单元中心 $x_i$ 处的点值，其半离散ODE系统为\n$$\n\\frac{\\mathrm{d}V_i}{\\mathrm{d}t} =\n\\begin{cases}\n- a\\,\\dfrac{V_i - V_{i-1}}{\\Delta x}, & a>0,\\\\[6pt]\n- a\\,\\dfrac{V_{i+1} - V_i}{\\Delta x}, & a<0,\n\\end{cases}\n$$\n同样采用周期性索引，使得 $V_{-1} = V_{N-1}$ 且 $V_{N} = V_0$。\n\n对于下述的每个测试用例，设初始数据由指定函数 $u_0(x)$ 给出，即 $U_i(0) = V_i(0) = u_0(x_i)$。对每个测试用例，计算两个半离散ODE系统在时间 $t=0$ 时的右侧项，即向量\n$$\n\\left(\\frac{\\mathrm{d}U_i}{\\mathrm{d}t}\\bigg|_{t=0}\\right)_{i=0}^{N-1} \\quad \\text{和} \\quad \\left(\\frac{\\mathrm{d}V_i}{\\mathrm{d}t}\\bigg|_{t=0}\\right)_{i=0}^{N-1},\n$$\n然后计算标量\n$$\n\\max_{0\\le i \\le N-1} \\left| \\frac{\\mathrm{d}U_i}{\\mathrm{d}t}\\bigg|_{t=0} - \\frac{\\mathrm{d}V_i}{\\mathrm{d}t}\\bigg|_{t=0} \\right|.\n$$\n不涉及物理单位。所有三角函数的参数均以弧度为单位。\n\n测试套件（五个用例）：\n- 用例 $1$：$N=5$，$a=1.0$，$u_0(x) = \\sin(2\\pi x)$。\n- 用例 $2$：$N=64$，$a=-2.5$，$u_0(x) = \\cos(4\\pi x)$。\n- 用例 $3$：$N=32$，$a=1.0$，$u_0(x) =\n\\begin{cases}\n1, & 0.25 \\le x < 0.75,\\\\\n0, & \\text{其他情况},\n\\end{cases}$\n需要理解的是，由于周期性，$x$ 是对 $1$ 取模。\n- 用例 $4$：$N=7$，$a=-1.0$，$u_0(x) = x$，在周期性中心点 $x_i \\in [0,1)$ 上求值。\n- 用例 $5$：$N=128$，$a=3.0$，$u_0(x) = \\exp(\\sin(2\\pi x))$。\n\n您的程序必须生成单行输出，其中包含五个用例的结果。结果应为方括号括起来的逗号分隔列表，顺序与上述用例相同，其中每个条目是计算出的最大绝对差值（一个浮点数）。例如，输出格式必须与以下完全一样\n$$\n[\\text{result}_1,\\text{result}_2,\\text{result}_3,\\text{result}_4,\\text{result}_5].\n$$", "solution": "控制偏微分方程是线性守恒律\n$$\n\\partial_t u(x,t) + a\\,\\partial_x u(x,t) = 0\n$$\n其中平流速度 $a$ 为常数，在区间 $[0,1]$ 上具有周期性边界条件。线方法（MOL）通过离散化空间导数来得到一个关于时间的常微分方程组。\n\n我们定义一个包含 $N$ 个单元的均匀网格，单元宽度为 $\\Delta x = 1/N$，单元中心为 $x_i = (i+\\tfrac{1}{2})\\Delta x$，其中 $i\\in\\{0,1,\\dots,N-1\\}$。使用周期性索引，因此索引算术按模 $N$ 进行。\n\n对于有限体积法（FVM），我们将守恒律在对应于单元 $i$ 的控制体积上进行积分：\n$$\n\\frac{\\mathrm{d}}{\\mathrm{d}t}\\int_{x_{i-\\frac{1}{2}}}^{x_{i+\\frac{1}{2}}} u(x,t)\\,\\mathrm{d}x + \\left[ a\\,u(x,t) \\right]_{x=x_{i-\\frac{1}{2}}}^{x=x_{i+\\frac{1}{2}}} = 0,\n$$\n其中 $x_{i\\pm\\frac{1}{2}}$ 是单元界面。定义单元平均值\n$$\nU_i(t) = \\frac{1}{\\Delta x}\\int_{x_{i-\\frac{1}{2}}}^{x_{i+\\frac{1}{2}}} u(x,t)\\,\\mathrm{d}x,\n$$\n半离散更新方程变为\n$$\n\\frac{\\mathrm{d}U_i}{\\mathrm{d}t} = -\\frac{F_{i+\\frac{1}{2}} - F_{i-\\frac{1}{2}}}{\\Delta x},\n$$\n其中 $F_{i+\\frac{1}{2}}$ 是在界面 $x_{i+\\frac{1}{2}}$ 处对物理通量 $a\\,u$ 的一个相容的数值近似。对于具有常数 $a$ 的线性标量平流，一阶迎风数值通量由下式给出\n$$\nF_{i+\\frac{1}{2}} =\n\\begin{cases}\na\\,U_i, & a>0,\\\\\na\\,U_{i+1}, & a<0,\n\\end{cases}\n$$\n该式根据信息传播的方向选择迎风状态。将此通量代入FVM更新方程，得到\n$$\n\\frac{\\mathrm{d}U_i}{\\mathrm{d}t} =\n\\begin{cases}\n-\\,\\dfrac{a}{\\Delta x}\\left(U_i - U_{i-1}\\right), & a>0,\\\\[8pt]\n-\\,\\dfrac{a}{\\Delta x}\\left(U_{i+1} - U_i\\right), & a<0,\n\\end{cases}\n$$\n其中对 $U_{-1}$ 和 $U_N$ 采用周期性索引。\n\n对于在相同中心点 $x_i$ 上的有限差分法（FD），对空间导数 $\\partial_x u$ 进行一阶迎风离散化，得到半离散系统\n$$\n\\frac{\\mathrm{d}V_i}{\\mathrm{d}t} =\n\\begin{cases}\n-\\,a\\,\\dfrac{V_i - V_{i-1}}{\\Delta x}, & a>0,\\\\[8pt]\n-\\,a\\,\\dfrac{V_{i+1} - V_i}{\\Delta x}, & a<0,\n\\end{cases}\n$$\n同样采用周期性索引。当初始数据设置为 $U_i(0) = V_i(0) = u_0(x_i)$ 时，对于所有索引 $i$ 以及 $a$ 的两种符号，两个半离散系统的右侧项在代数上是完全相同的：\n$$\n\\frac{\\mathrm{d}U_i}{\\mathrm{d}t}\\bigg|_{t=0} = \\frac{\\mathrm{d}V_i}{\\mathrm{d}t}\\bigg|_{t=0}.\n$$\n这个等式通过比较公式直接得出：对于 $a>0$，两者都使用索引 $i$ 和 $i-1$ 之间的后向差分 $(\\cdot - \\cdot)$，并乘以 $a/\\Delta x$；对于 $a<0$，两者都使用索引 $i+1$ 和 $i$ 之间的前向差分，并乘以 $a/\\Delta x$。由于两种表述都采用周期性索引，因此环绕处理是相同的。\n\n因此，最大绝对差值\n$$\n\\max_{0\\le i \\le N-1} \\left| \\frac{\\mathrm{d}U_i}{\\mathrm{d}t}\\bigg|_{t=0} - \\frac{\\mathrm{d}V_i}{\\mathrm{d}t}\\bigg|_{t=0} \\right|\n$$\n对于在相同中心点上赋给 $U_i$ 和 $V_i$ 的任何相同初始数据，包括光滑的三角函数剖面和在中心点上逐点定义的不连续剖面，预计在浮点舍入误差范围内为零。指定的测试套件涵盖了不同的平流方向（$a>0$ 和 $a<0$）、网格尺寸（$N$ 小和大）以及光滑和不连续的初始数据。所要求的程序需要为每个测试用例计算在时间 $t=0$ 时的这些右侧项，并按规定顺序报告最大绝对差值的单行列表。在数值上，这些值应非常接近于零，通常在机器精度的数量级，因为在这种设置下，两个半离散算子在代数形式上是完全一致的。", "answer": "```python\nimport numpy as np\n\ndef fv_rhs(u, a, dx):\n    \"\"\"\n    Finite Volume Method (FVM) semi-discrete RHS using first-order upwind flux\n    on a periodic 1D uniform grid. u represents cell averages U_i.\n    \"\"\"\n    N = u.size\n    rhs = np.empty_like(u)\n    if a > 0:\n        # F_{i+1/2} = a * U_i; F_{i-1/2} = a * U_{i-1}\n        # dU_i/dt = -(F_{i+1/2} - F_{i-1/2})/dx = -(a/dx)*(U_i - U_{i-1})\n        rhs[:] = -(a / dx) * (u - np.roll(u, 1))\n    elif a < 0:\n        # F_{i+1/2} = a * U_{i+1}; F_{i-1/2} = a * U_i\n        # dU_i/dt = -(a/dx)*(U_{i+1} - U_i)\n        rhs[:] = -(a / dx) * (np.roll(u, -1) - u)\n    else:\n        rhs.fill(0.0)\n    return rhs\n\ndef fd_rhs(v, a, dx):\n    \"\"\"\n    Finite Difference (FD) semi-discrete RHS using first-order upwind difference\n    on a periodic 1D uniform grid. v represents nodal values V_i at cell centers.\n    \"\"\"\n    N = v.size\n    rhs = np.empty_like(v)\n    if a > 0:\n        # dV_i/dt = -a*(V_i - V_{i-1})/dx\n        rhs[:] = -(a / dx) * (v - np.roll(v, 1))\n    elif a < 0:\n        # dV_i/dt = -a*(V_{i+1} - V_i)/dx\n        rhs[:] = -(a / dx) * (np.roll(v, -1) - v)\n    else:\n        rhs.fill(0.0)\n    return rhs\n\ndef initial_profile(x, kind):\n    \"\"\"\n    Construct initial profiles u0(x) for specified kind.\n    x is assumed in [0,1) and is a NumPy array of cell-center coordinates.\n    \"\"\"\n    if kind == \"sin2pi\":\n        return np.sin(2.0 * np.pi * x)\n    elif kind == \"cos4pi\":\n        return np.cos(4.0 * np.pi * x)\n    elif kind == \"tophat_0p25_0p75\":\n        # Periodic top-hat: 1 on [0.25,0.75), 0 otherwise\n        # Since x in [0,1), direct comparison works\n        return np.where((x >= 0.25) & (x < 0.75), 1.0, 0.0)\n    elif kind == \"linear_x\":\n        # Periodic centers x in [0,1), just use x\n        return x.copy()\n    elif kind == \"exp_sin2pi\":\n        return np.exp(np.sin(2.0 * np.pi * x))\n    else:\n        raise ValueError(\"Unknown initial profile kind.\")\n\ndef run_case(N, a, kind):\n    dx = 1.0 / N\n    x = (np.arange(N) + 0.5) * dx  # cell centers\n    u0 = initial_profile(x, kind)\n    # Set U(0) = V(0) = u0 at centers\n    fv = fv_rhs(u0, a, dx)\n    fd = fd_rhs(u0, a, dx)\n    diff = np.max(np.abs(fv - fd))\n    return float(diff)\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (N, a, initial_kind)\n        (5,   1.0, \"sin2pi\"),\n        (64, -2.5, \"cos4pi\"),\n        (32,  1.0, \"tophat_0p25_0p75\"),\n        (7,  -1.0, \"linear_x\"),\n        (128, 3.0, \"exp_sin2pi\"),\n    ]\n\n    results = []\n    for N, a, kind in test_cases:\n        result = run_case(N, a, kind)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2444651"}, {"introduction": "空间离散格式的选择会极大地影响数值解的稳定性，特别是对于同时包含平流和扩散的问题。中心差分格式虽然形式上精度更高，但在平流主导的情况下却容易产生非物理的振荡。这个动手编程练习将让你通过比较中心差分格式与一阶迎风格式，直接观察到这一现象，为你提供一堂关于精度与数值稳定性之间权衡的实践课。[@problem_id:2444647]", "problem": "考虑具有周期性边界条件的一维线性平流扩散偏微分方程 (PDE)，\n$$\n\\frac{\\partial u}{\\partial t}(x,t) + a \\,\\frac{\\partial u}{\\partial x}(x,t) = \\nu \\,\\frac{\\partial^2 u}{\\partial x^2}(x,t), \\quad x \\in [0,1], \\quad t \\in [0,T],\n$$\n其空间周期性为 $u(0,t) = u(1,t)$（对于所有 $t \\in [0,T]$），初始条件为\n$$\nu(x,0) = \\sin(2\\pi x) + 0.1 \\sin(16\\pi x).\n$$\n设空间网格是均匀的，有 $N$ 个点，间距为 $\\Delta x = 1/N$，并采用周期性索引。在网格点值 $u_j(t) \\approx u(x_j,t)$ （其中 $x_j = j \\,\\Delta x$）上定义两个半离散空间算子：\n- 中心平流，其平流项采用二阶中心差分，扩散项采用二阶导数描述，\n$$\n\\left.\\frac{\\mathrm{d}u_j}{\\mathrm{d}t}\\right|_{\\text{centered}} = -a \\,\\frac{u_{j+1} - u_{j-1}}{2\\Delta x} + \\nu \\,\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}.\n$$\n- 迎风平流（与 $a$ 的符号一致的一阶迎风格式），其扩散项采用二阶导数描述，\n$$\n\\left.\\frac{\\mathrm{d}u_j}{\\mathrm{d}t}\\right|_{\\text{upwind}} =\n\\begin{cases}\n-a \\,\\frac{u_j - u_{j-1}}{\\Delta x} + \\nu \\,\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}, & a \\ge 0,\\\\[6pt]\n-a \\,\\frac{u_{j+1} - u_j}{\\Delta x} + \\nu \\,\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}, & a < 0.\n\\end{cases}\n$$\n使用显式前向欧拉法以时间步长 $\\Delta t$ 向前推进至最终时间 $T$。对于每次模拟，将时间层 $n$ 的离散 $L^2$ 范数定义为\n$$\n\\|u^n\\|_2 = \\left( \\Delta x \\sum_{j=0}^{N-1} \\left(u_j^n\\right)^2 \\right)^{1/2}.\n$$\n如果所有时间步中的最大范数满足\n$$\n\\max_{0 \\le n \\le N_t} \\|u^n\\|_2 \\le G_{\\max} \\,\\|u^0\\|_2,\n$$\n则声明该次运行为“稳定”，否则为“不稳定”，其中 $G_{\\max} = 5$ 是一个固定值，而 $N_t$ 是达到 $T$ 所需的时间步数。时间步长根据平流和扩散界限的最小值选取，由无量纲因子 $C_{\\mathrm{adv}}$ 和 $C_{\\mathrm{diff}}$ 决定，如下所示：\n$$\n\\Delta t =\n\\min\\!\\left(\n\\begin{array}{l}\nC_{\\mathrm{adv}} \\,\\frac{\\Delta x}{|a|} \\quad \\text{若 } |a|>0, \\text{ 否则 } +\\infty, \\\\[6pt]\nC_{\\mathrm{diff}} \\,\\frac{\\Delta x^2}{2\\nu} \\quad \\text{若 } \\nu>0, \\text{ 否则 } +\\infty\n\\end{array}\n\\right).\n$$\n如果 $|a|=0$ 且 $\\nu=0$，则此设置不在测试中考虑。\n\n您的任务是实现上述定义，并针对下列每个测试用例，确定在由给定参数计算出的相同 $\\Delta t$ 下，中心格式和迎风格式是否稳定。该区域是无量纲的，输出中不需要物理单位。\n\n使用以下测试套件，其中每个用例指定了 $(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T)$：\n- 测试 $1$：$(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T) = (\\,1.0,\\,0.001,\\,200,\\,0.5,\\,0.4,\\,0.5\\,)$。\n- 测试 $2$：$(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T) = (\\,20.0,\\,0.0001,\\,400,\\,0.8,\\,0.2,\\,0.2\\,)$。\n- 测试 $3$：$(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T) = (\\,0.0,\\,0.01,\\,100,\\,0.5,\\,0.4,\\,0.5\\,)$。\n- 测试 $4$：$(a,\\nu,N,C_{\\mathrm{adv}},C_{\\mathrm{diff}},T) = (\\,1.0,\\,0.0,\\,200,\\,0.99,\\,0.0,\\,0.5\\,)$。\n\n您的程序必须：\n- 在每个测试用例中，对中心格式和迎风格式使用完全按照上述定义计算的相同 $\\Delta t$。\n- 积分到指定的最终时间 $T$（如果 $T$ 不能被 $\\Delta t$ 整除，则取 $N_t = \\lceil T/\\Delta t \\rceil$ 并使用 $T/N_t$ 作为均匀时间步长）。\n- 对于每个测试，根据 $G_{\\max} = 5$ 的标准，按顺序 $\\big[$中心格式稳定性, 迎风格式稳定性$\\big]$ 返回两个布尔值。\n\n最终输出格式：您的程序应生成一行输出，其中包含一个用方括号括起来的逗号分隔列表。按测试顺序将四个测试的结果连接起来，将布尔值展平为一个列表。例如，输出格式应如下所示：\n$$\n[\\text{c}_1,\\text{u}_1,\\text{c}_2,\\text{u}_2,\\text{c}_3,\\text{u}_3,\\text{c}_4,\\text{u}_4],\n$$\n其中 $\\text{c}_k$ 和 $\\text{u}_k$ 分别是测试 $k$ 中中心格式和迎风格式的布尔稳定性结果。", "solution": "所提出的问题已经过验证，是有效的。它具有科学依据、提法恰当、客观，并包含了获得一个唯一的、可验证的解所需的所有信息。因此，我们可以继续进行解的推导和实现。\n\n该问题要求对一维线性平流扩散方程进行数值求解，\n$$\n\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = \\nu \\frac{\\partial^2 u}{\\partial x^2},\n$$\n求解域为 $x \\in [0,1]$，边界条件为周期性。解将使用线方法 (Method of Lines, MOL) 获得，即首先对空间导数进行离散化，将偏微分方程 (PDE) 转化为一个耦合常微分方程 (ODEs) 组。然后对该系统进行时间积分。\n\n首先，我们定义离散空间网格。将域 $[0,1]$ 离散为 $N$ 个长度为 $\\Delta x = 1/N$ 的均匀段。网格点为 $x_j = j\\Delta x$，其中 $j = 0, 1, \\dots, N-1$。此网格上的解由向量 $\\vec{u}(t)$ 表示，其第 $j$ 个分量为 $u_j(t) \\approx u(x_j, t)$。周期性边界条件意味着对于任何整数 $j$，都有 $u_{j+N} = u_j$。\n\nMOL 将 PDE 转换为 $\\frac{d\\vec{u}}{dt} = \\mathbf{L}\\vec{u}$ 的形式，其中 $\\mathbf{L}$ 是一个表示离散化空间算子的矩阵。我们被要求评估平流项 $\\frac{\\partial u}{\\partial x}$ 的两种不同离散化方法，而扩散项 $\\frac{\\partial^2 u}{\\partial x^2}$ 则始终使用标准的二阶中心差分进行离散化。\n\n二阶导数的二阶中心差分近似为：\n$$\n\\left.\\frac{\\partial^2 u}{\\partial x^2}\\right|_{x_j} \\approx \\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}.\n$$\n此算子应用于两种格式。\n\n格式 1：中心平流\n平流项使用二阶中心差分进行近似：\n$$\n\\left.\\frac{\\partial u}{\\partial x}\\right|_{x_j} \\approx \\frac{u_{j+1} - u_{j-1}}{2\\Delta x}.\n$$\n结合这些，中心格式的半离散系统为：\n$$\n\\frac{d u_j}{d t} = -a \\left(\\frac{u_{j+1} - u_{j-1}}{2\\Delta x}\\right) + \\nu \\left(\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}\\right).\n$$\n\n格式 2：迎风平流\n平流项使用一阶迎风差分进行近似，其模板取决于平流速度 $a$ 的符号。做出此选择是为了引入能够增强稳定性的数值耗散。\n若 $a \\ge 0$，使用后向差分：\n$$\n\\left.\\frac{\\partial u}{\\partial x}\\right|_{x_j} \\approx \\frac{u_j - u_{j-1}}{\\Delta x}.\n$$\n若 $a < 0$，使用前向差分：\n$$\n\\left.\\frac{\\partial u}{\\partial x}\\right|_{x_j} \\approx \\frac{u_{j+1} - u_j}{\\Delta x}.\n$$\n因此，迎风格式的相应半离散系统为：\n$$\n\\frac{d u_j}{d t} =\n\\begin{cases}\n-a \\left(\\frac{u_j - u_{j-1}}{\\Delta x}\\right) + \\nu \\left(\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}\\right), & a \\ge 0 \\\\\n-a \\left(\\frac{u_{j+1} - u_j}{\\Delta x}\\right) + \\nu \\left(\\frac{u_{j+1} - 2u_j + u_{j-1}}{\\Delta x^2}\\right), & a < 0\n\\end{cases}\n$$\n\n对于时间积分，指定使用显式前向欧拉法。给定时间 $t_n$ 的解向量 $\\vec{u}^n$，下一个时间步 $t_{n+1} = t_n + \\Delta t$ 的解计算如下：\n$$\n\\vec{u}^{n+1} = \\vec{u}^n + \\Delta t \\cdot \\frac{d\\vec{u}}{dt}\\bigg|_{\\vec{u}=\\vec{u}^n}.\n$$\n必须仔细选择时间步长 $\\Delta t$ 以确保数值稳定性。前向欧拉法只是有条件稳定的。问题提供了一个基于平流和扩散的 Courant-Friedrichs-Lewy (CFL) 条件的初步时间步长 $\\Delta t_{cfl}$ 的具体公式：\n$$\n\\Delta t_{cfl} = \\min\\left( C_{\\mathrm{adv}} \\frac{\\Delta x}{|a|}, \\; C_{\\mathrm{diff}} \\frac{\\Delta x^2}{2\\nu} \\right).\n$$\n如果分母（$|a|$ 或 $\\nu$）为零，则相应项被视为无穷大。为确保模拟在时间 $T$ 准时结束，步数固定为 $N_t = \\lceil T/\\Delta t_{cfl} \\rceil$，并使用统一的实际时间步长 $\\Delta t = T/N_t$ 进行积分。这确保了 $\\Delta t \\le \\Delta t_{cfl}$，从而满足稳定性约束。\n\n每次模拟运行的稳定性都进行定量评估。如果整个模拟过程中观察到的最大离散 $L^2$ 范数不超过初始范数的特定倍数，则该次运行被声明为“稳定”。时间步长 $n$ 处的离散 $L^2$ 范数为：\n$$\n\\|u^n\\|_2 = \\left( \\Delta x \\sum_{j=0}^{N-1} (u_j^n)^2 \\right)^{1/2}.\n$$\n稳定性判据为：\n$$\n\\max_{0 \\le n \\le N_t} \\|u^n\\|_2 \\le G_{\\max} \\|u^0\\|_2,\n$$\n其中增长因子给定为 $G_{\\max} = 5$。初始条件由 $u(x,0) = \\sin(2\\pi x) + 0.1 \\sin(16\\pi x)$ 给出，它在网格上求值以提供初始向量 $\\vec{u}^0$。\n\n每个测试用例的算法流程如下：\n1.  设置参数 $(a, \\nu, N, C_{\\mathrm{adv}}, C_{\\mathrm{diff}}, T)$。\n2.  计算网格间距 $\\Delta x = 1/N$ 并创建网格点 $x_j$。\n3.  通过计算 $u(x_j, 0)$ 生成初始条件向量 $\\vec{u}^0$。\n4.  计算初始范数 $\\|u^0\\|_2$ 和稳定性阈值 $G_{\\max} \\|u^0\\|_2$。\n5.  计算 $\\Delta t_{cfl}$，然后计算实际时间步长 $\\Delta t = T/\\lceil T/\\Delta t_{cfl} \\rceil$。\n6.  对于每种格式（中心和迎风）：\n    a. 初始化解向量 $\\vec{u} = \\vec{u}^0$ 并设置 $\\text{max\\_norm} = \\|u^0\\|_2$。\n    b. 循环 $N_t$ 次：\n        i.   使用适当的有限差分公式计算右端向量 $\\frac{d\\vec{u}}{dt}$。\n        ii.  使用前向欧拉步长更新解：$\\vec{u} \\leftarrow \\vec{u} + \\Delta t \\frac{d\\vec{u}}{dt}$。\n        iii. 计算当前范数 $\\|\\vec{u}\\|_2$ 并在必要时更新 $\\text{max\\_norm}$。如果解变为非有限值，则 $\\text{max\\_norm}$ 变为无穷大。\n    c. 将最终的 $\\text{max\\_norm}$ 与阈值进行比较以确定稳定性（真/假）。\n7.  收集两种格式的布尔稳定性结果，并将它们附加到一个全局列表中。\n\n此过程将对所有提供的测试用例实施，最终的布尔结果列表将按规定格式输出。使用向量化操作，特别是周期性移位，可以高效地在周期性网格上实现有限差分。", "answer": "```python\nimport numpy as np\nimport math\n\ndef get_rhs_calculator(a, nu, N, scheme):\n    \"\"\"\n    Returns a function that computes the right-hand side of the semi-discretized PDE.\n    This corresponds to the spatial operator applied to the solution vector u.\n    \"\"\"\n    dx = 1.0 / N\n    d2udx2_term_func = lambda u: (np.roll(u, -1) - 2 * u + np.roll(u, 1)) / (dx**2)\n\n    if scheme == 'centered':\n        def rhs_centered(u):\n            dudx_adv = (np.roll(u, -1) - np.roll(u, 1)) / (2 * dx)\n            return -a * dudx_adv + nu * d2udx2_term_func(u)\n        return rhs_centered\n    elif scheme == 'upwind':\n        def rhs_upwind(u):\n            if a >= 0:\n                dudx_adv = (u - np.roll(u, 1)) / dx\n            else:  # a < 0\n                dudx_adv = (np.roll(u, -1) - u) / dx\n            return -a * dudx_adv + nu * d2udx2_term_func(u)\n        return rhs_upwind\n    else:\n        raise ValueError(\"Unknown scheme type\")\n\ndef check_stability(params, scheme, G_max):\n    \"\"\"\n    Runs a single simulation for a given test case and scheme, then reports its stability.\n    \"\"\"\n    a, nu, N, C_adv, C_diff, T = params\n\n    # 1. Grid and Initial Condition\n    dx = 1.0 / N\n    x = np.arange(N, dtype=float) / N\n    u = np.sin(2 * np.pi * x) + 0.1 * np.sin(16 * np.pi * x)\n\n    # 2. Initial norm and stability threshold\n    norm_initial = np.sqrt(dx * np.sum(u**2))\n    if norm_initial == 0:\n        return True  # Trivial case: zero initial condition is always stable\n    max_norm = norm_initial\n\n    # 3. Time step calculation\n    dt_adv = C_adv * dx / abs(a) if abs(a) > 0 else float('inf')\n    dt_diff = C_diff * dx**2 / (2 * nu) if nu > 0 else float('inf')\n    dt_cfl = min(dt_adv, dt_diff)\n\n    if T == 0:\n        return True\n    if dt_cfl == float('inf'): # Corresponds to a=0 and nu=0 case, u(x,t) is constant.\n      return True\n\n    num_steps = math.ceil(T / dt_cfl)\n    dt = T / num_steps\n    \n    # 4. Get the appropriate RHS function for the scheme\n    rhs_calculator = get_rhs_calculator(a, nu, N, scheme)\n\n    # 5. Time integration loop\n    for _ in range(num_steps):\n        u = u + dt * rhs_calculator(u)\n        \n        current_norm = np.sqrt(dx * np.sum(u**2))\n        \n        if np.isnan(current_norm) or np.isinf(current_norm):\n            max_norm = float('inf')\n            break\n            \n        if current_norm > max_norm:\n            max_norm = current_norm\n            \n    # 6. Check stability criterion\n    return max_norm <= G_max * norm_initial\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the results.\n    \"\"\"\n    test_cases = [\n        # (a,      nu,       N,   C_adv, C_diff, T)\n        (1.0,    0.001,    200, 0.5,   0.4,    0.5),\n        (20.0,   0.0001,   400, 0.8,   0.2,    0.2),\n        (0.0,    0.01,     100, 0.5,   0.4,    0.5),\n        (1.0,    0.0,      200, 0.99,  0.0,    0.5),\n    ]\n\n    G_max = 5.0\n    results = []\n\n    for i, case in enumerate(test_cases):\n        is_stable_cen = check_stability(case, 'centered', G_max)\n        is_stable_upw = check_stability(case, 'upwind', G_max)\n        results.extend([is_stable_cen, is_stable_upw])\n\n    # Final print statement in the exact required format.\n    # str(True) -> 'True', str(False) -> 'False'\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2444647"}, {"introduction": "离散化求解域的内部通常直接了当，但准确地施加边界条件是“线方法”中需要精细处理的关键步骤。本练习将超越简单的周期性或狄利克雷（Dirichlet）边界条件，转而处理更复杂的罗宾（Robin）边界条件，该条件将解的值与其在边界上的导数联系起来。通过解析推导，你将学习如何使用“虚拟单元”（ghost cell）为边界节点构建一个协调的、二阶精度的常微分方程（ODE），这是有限差分法中的一项基本技术。[@problem_id:2444675]", "problem": "考虑一维热传导偏微分方程 (PDE) $u_{t}(x,t) = \\kappa\\,u_{xx}(x,t)$，其定义在空间区间 $x \\in [0,L]$ 上，热扩散系数为 $\\kappa > 0$。在左边界 $x=0$ 处，热通量由 Robin 边界条件 $u_{x}(0,t) + a\\,u(0,t) = b$ 决定，其中 $a \\ge 0$ 且 $b$ 为常数。在右边界 $x=L$ 处，假设为 Dirichlet 条件 $u(L,t)=0$；后续推导中将不需要此右边界条件。您将使用线方法 (Method of Lines, MOL) 对空间进行离散化，该方法仅在空间上进行离散，从而将偏微分方程 (PDE) 转化为一个常微分方程组 (ODEs)。\n\n设空间网格为均匀网格，包含 $M+1$ 个节点 $x_{j} = j h$（$j=0,1,\\dots,M$），步长为 $h = L/M$。定义半离散未知数 $u_{j}(t) \\approx u(x_{j},t)$。对于内部点，使用二阶中心差分来近似二阶导数。在边界节点 $j=0$ 处，使用同样的三点二阶中心差分格式来近似 $u_{xx}(0,t)$，这会引入一个虚拟值 (ghost value) $u_{-1}(t)$。通过对 $u_{x}(0,t)$ 使用二阶中心差分近似来施加 Robin 边界条件，以消去 $u_{-1}(t)$，使其用 $u_{0}(t)$ 和 $u_{1}(t)$ 表示。\n\n仅使用这些标准的二阶有限差分近似和控制偏微分方程，推导边界节点的半离散常微分方程 $u_{0}'(t) = F(u_{0},u_{1};a,b,h,\\kappa)$ 的闭合表达式 $F(u_{0},u_{1};a,b,h,\\kappa)$。请将您的最终结果表示为 $F(u_{0},u_{1};a,b,h,\\kappa)$ 的单个解析表达式。无需进行数值计算。", "solution": "问题陈述已经过验证，被认为是有效的。它提出了一个计算工程领域内定义明确、具有科学依据的问题，要求使用线方法推导边界节点上的半离散常微分方程 (ODE)。所有必要的组成部分——控制偏微分方程 (PDE)、边界条件以及指定的数值近似格式——均已提供且相互一致。我们现在开始进行正式推导。\n\n控制偏微分方程为一维热方程：\n$$\nu_{t}(x,t) = \\kappa\\,u_{xx}(x,t)\n$$\n其中 $u_{t} = \\frac{\\partial u}{\\partial t}$ 且 $u_{xx} = \\frac{\\partial^2 u}{\\partial x^2}$。我们的任务是求解边界点 $x=0$ 处半离散近似值 $u_{0}(t) \\approx u(0,t)$ 所满足的常微分方程。应用线方法，我们在空间节点 $x_0 = 0$ 处评估该偏微分方程：\n$$\n\\frac{d u_0}{d t}(t) = \\kappa \\, u_{xx}(0,t)\n$$\n问题指定对空间二阶导数 $u_{xx}$ 使用二阶中心差分近似。在节点 $x_0$ 处，该差分格式涉及点 $x_{-1} = -h$、$x_0 = 0$ 和 $x_1 = h$：\n$$\nu_{xx}(0,t) \\approx \\frac{u(x_1,t) - 2u(x_0,t) + u(x_{-1},t)}{h^2} = \\frac{u_1(t) - 2u_0(t) + u_{-1}(t)}{h^2}\n$$\n在这里，$u_{-1}(t) \\approx u(-h,t)$ 是一个虚构的“虚拟点”值，因为点 $x_{-1}$ 位于物理域 $[0,L]$ 之外。将此近似代入 $u_0(t)$ 的常微分方程，得到：\n$$\n\\frac{d u_0}{d t}(t) = \\frac{\\kappa}{h^2} \\left[ u_1(t) - 2u_0(t) + u_{-1}(t) \\right]\n$$\n该方程尚未封闭，因为它依赖于未知的虚拟值 $u_{-1}(t)$。为消去此项，我们必须使用在 $x=0$ 处指定的 Robin 边界条件：\n$$\nu_{x}(0,t) + a\\,u(0,t) = b\n$$\n问题要求用二阶中心差分来近似空间导数 $u_{x}(0,t)$。该近似涉及点 $x_{-1}$ 和 $x_1$：\n$$\nu_{x}(0,t) \\approx \\frac{u(x_1,t) - u(x_{-1},t)}{2h} = \\frac{u_1(t) - u_{-1}(t)}{2h}\n$$\n将此近似代入边界条件，得到一个离散的代数关系：\n$$\n\\frac{u_1(t) - u_{-1}(t)}{2h} + a\\,u_0(t) = b\n$$\n我们现在从此方程中求解虚拟值 $u_{-1}(t)$，用物理值 $u_0(t)$ 和 $u_1(t)$ 来表示。\n$$\nu_1(t) - u_{-1}(t) = 2h \\left( b - a\\,u_0(t) \\right)\n$$\n$$\nu_{-1}(t) = u_1(t) - 2h \\left( b - a\\,u_0(t) \\right) = u_1(t) - 2hb + 2ha\\,u_0(t)\n$$\n现在我们得到了 $u_{-1}(t)$ 的表达式，可以将其代回到 $u_0(t)$ 的半离散常微分方程中。这样做可以消除虚拟点，并在边界处使系统封闭。\n$$\n\\frac{d u_0}{d t}(t) = \\frac{\\kappa}{h^2} \\left[ u_1(t) - 2u_0(t) + \\left( u_1(t) - 2hb + 2ha\\,u_0(t) \\right) \\right]\n$$\n下一步是合并和简化右侧的各项。\n$$\n\\frac{d u_0}{d t}(t) = \\frac{\\kappa}{h^2} \\left[ (u_1(t) + u_1(t)) + (-2u_0(t) + 2ha\\,u_0(t)) - 2hb \\right]\n$$\n$$\n\\frac{d u_0}{d t}(t) = \\frac{\\kappa}{h^2} \\left[ 2u_1(t) + (2ha - 2)u_0(t) - 2hb \\right]\n$$\n提取公因数 $2$ 后，得到边界节点 $u_0(t)$ 的常微分方程的最终形式：\n$$\n\\frac{d u_0}{d t}(t) = \\frac{2\\kappa}{h^2} \\left[ u_1(t) + (ha - 1)u_0(t) - hb \\right]\n$$\n问题要求的是函数 $F(u_{0},u_{1};a,b,h,\\kappa)$，使得 $u_{0}'(t) = F(u_{0},u_{1};a,b,h,\\kappa)$。通过直接比较，我们将所推导方程的右侧部分确定为函数 $F$。在半离散格式中，时间依赖性是隐含的，因此我们用变量 $u_0$ 和 $u_1$ 来表示该函数。\n$$\nF(u_{0},u_{1};a,b,h,\\kappa) = \\frac{2\\kappa}{h^2} \\left[ u_1 + (ha - 1)u_0 - hb \\right]\n$$\n该表达式即为所求的左边界解的时间导数的闭合表达式。", "answer": "$$\n\\boxed{\\frac{2\\kappa}{h^2}\\left(u_1 + (ha-1)u_0 - hb\\right)}\n$$", "id": "2444675"}]}