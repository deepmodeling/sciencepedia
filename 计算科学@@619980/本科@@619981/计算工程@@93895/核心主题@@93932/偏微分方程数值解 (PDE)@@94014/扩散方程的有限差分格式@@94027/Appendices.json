{"hands_on_practices": [{"introduction": "我们的动手实践始于数值方法中的一个基本概念：稳定性。第一个练习将探讨用于求解扩散方程的经典前向时间中心空间（FTCS）格式。通过分析当稳定性条件被违反时的具体情形 [@problem_id:2392556]，您将对数值不稳定性及其特有的振荡行为获得至关重要的直观理解，这是每位计算工程师都必须掌握的一课。", "problem": "考虑一维扩散方程 $u_{t}=D\\,u_{xx}$，其中扩散系数 $D>0$ 为常数，定义在周期性域上，并在间距为 $\\Delta x$、时间步长为 $\\Delta t$ 的均匀网格上进行离散。应用前向时间中心空间 (Forward-Time Central-Space, FTCS) 格式：\n$$\nu_{j}^{n+1}=u_{j}^{n}+r\\left(u_{j+1}^{n}-2u_{j}^{n}+u_{j-1}^{n}\\right),\n$$\n其中 $r=D\\,\\Delta t/(\\Delta x)^{2}$。假设 $r$ 略大于 $0.5$，且初始条件是光滑的、非平凡的，并且不是单一傅里叶模态。存在机器精度级别的舍入误差。\n\n在这些条件下，当 $n$ 增大时，以下哪个选项最能描述离散数值解的定性行为？\n\nA. 高波数分量获得一个幅值大于 $1$ 且为负的放大因子，产生符号交替的网格尺度振荡，其振幅无界增长，最终污染整个解。\n\nB. 对于任何以低波数内容为主的初始条件，当 $r$ 略高于 $0.5$ 时，该格式保持稳定，因为扩散会衰减所有模态，所以放大因子的幅值保持小于或等于 $1$。\n\nC. 当 $r>0.5$ 时，该格式变得过度耗散，导致所有傅里叶模态比精确解衰减得更快；离散解保持单调和稳定，没有振荡。\n\nD. 不稳定性仅在 $r>1$ 时发生，因为最坏情况下的放大因子等于 $1-2r$；对于 $0.5<r<1$，该格式是稳定的，但会产生有界振幅的振荡。", "solution": "所提出的问题是偏微分方程数值分析中的一个标准练习。任务是确定在前向时间中心空间 (FTCS) 格式应用于一维扩散方程时，在参数 $r$ 的特定条件下其行为。首先，我们来验证问题陈述。\n\n### 问题验证\n\n**步骤1：提取已知条件**\n- **控制方程**：一维扩散方程 $u_{t}=D\\,u_{xx}$，扩散系数 $D>0$ 为常数。\n- **区域**：周期性。\n- **离散化**：空间步长为 $\\Delta x$、时间步长为 $\\Delta t$ 的均匀网格。\n- **数值格式**：FTCS，由 $u_{j}^{n+1}=u_{j}^{n}+r\\left(u_{j+1}^{n}-2u_{j}^{n}+u_{j-1}^{n}\\right)$ 给出。\n- **参数**：$r=D\\,\\Delta t/(\\Delta x)^{2}$。\n- **条件**：$r$ 略大于 $0.5$。\n- **初始条件**：光滑、非平凡，且不是单一傅里叶模态。\n- **隐含条件**：存在机器精度级别的舍入误差。\n- **问题**：描述当时间步索引 $n$ 增大时，离散数值解的定性行为。\n\n**步骤2：使用提取的已知条件进行验证**\n- **科学依据**：该问题在计算流体动力学和偏微分方程数值方法的理论中有充分的依据。扩散方程、FTCS 格式及其稳定性分析都是经典课题。\n- **适定性**：该问题是适定的。它提供了进行 von Neumann 稳定性分析所需的所有必要信息（方程、格式、参数范围），这是对此类问题的标准分析方法。对初始条件和舍入误差的描述对于构建完整的物理和数值图像至关重要。\n- **客观性**：语言精确、客观，使用了标准术语。\n\n**步骤3：结论与行动**\n问题陈述是有效的。这是一个来自计算工程领域的、科学上合理、适定且客观的问题。我将继续进行解答。\n\n### 推导\n\n线性有限差分格式的稳定性可以用 von Neumann 方法来分析。我们考虑数值解的单个傅里叶模态的演化。设在网格点 $j$ 和时间层 $n$ 的解表示为：\n$$\nu_{j}^{n} = G(k)^{n} e^{i k x_{j}}\n$$\n其中 $x_{j} = j\\Delta x$，$k$ 是波数，$i = \\sqrt{-1}$，$G(k)$ 是放大因子，即波数为 $k$ 的模态的振幅在单个时间步长 $\\Delta t$ 内被乘的因子。对于一个稳定的格式，所有可能波数的放大因子的幅值都必须不超过 1，即 $|G(k)| \\le 1$。\n\n我们将傅里叶模态的表示代入 FTCS 格式：\n$$\nG(k)^{n+1} e^{i k j \\Delta x} = G(k)^{n} e^{i k j \\Delta x} + r G(k)^{n} \\left( e^{i k (j+1) \\Delta x} - 2e^{i k j \\Delta x} + e^{i k (j-1) \\Delta x} \\right)\n$$\n两边同除以 $G(k)^{n} e^{i k j \\Delta x}$，得到放大因子 $G(k)$ 的表达式：\n$$\nG(k) = 1 + r \\left( e^{i k \\Delta x} - 2 + e^{-i k \\Delta x} \\right)\n$$\n使用恒等式 $e^{i\\theta} + e^{-i\\theta} = 2\\cos(\\theta)$，其中 $\\theta = k \\Delta x$，我们将其简化为：\n$$\nG(k) = 1 + r (2 \\cos(k \\Delta x) - 2) = 1 - 2r (1 - \\cos(k \\Delta x))\n$$\n使用半角恒等式 $1 - \\cos(\\theta) = 2\\sin^2(\\theta/2)$，我们得到放大因子的最终形式：\n$$\nG(k) = 1 - 4r \\sin^2\\left(\\frac{k \\Delta x}{2}\\right)\n$$\n稳定性条件 $|G(k)| \\le 1$ 必须对所有波数 $k$ 都成立。在离散系统中，波数的有效范围使得项 $k \\Delta x$ 从 $0$ 延伸到 $\\pi$。因此，项 $\\sin^2(k \\Delta x/2)$ 的范围从 $\\sin^2(0) = 0$ 到 $\\sin^2(\\pi/2) = 1$。\n\n我们来检查稳定性条件，即 $-1 \\le G(k) \\le 1$：\n$1$. 上界 $G(k) \\le 1$ 变为 $1 - 4r \\sin^2(k \\Delta x/2) \\le 1$。这简化为 $-4r \\sin^2(k \\Delta x/2) \\le 0$，由于 $r > 0$ 且正弦平方项非负，此式恒成立。\n$2$. 下界 $G(k) \\ge -1$ 是关键。它变为 $1 - 4r \\sin^2(k \\Delta x/2) \\ge -1$，简化为 $2 \\ge 4r \\sin^2(k \\Delta x/2)$，或：\n$$\nr \\sin^2\\left(\\frac{k \\Delta x}{2}\\right) \\le \\frac{1}{2}\n$$\n该不等式必须对所有可能的 $k \\Delta x$ 值都满足。最严格的情况（“最坏情况”）发生在 $\\sin^2(k \\Delta x/2)$ 达到其最大值 $1$ 时。这发生在网格上可能存在的最高波数处，即 $k \\Delta x = \\pi$ 时，对应于 $(-1)^j$ 形式的网格尺度振荡。对于这个模态，稳定性条件简化为：\n$$\nr \\le \\frac{1}{2}\n$$\n这就是著名的 Courant-Friedrichs-Lewy (CFL) 稳定性条件，应用于一维扩散方程的 FTCS 格式。\n\n问题陈述中指出 $r$ 略大于 $0.5$。这意味着稳定性条件被违反了。不稳定性将在最严重违反该条件的模态上最为显著，即最高波数模态，其 $k \\Delta x = \\pi$。对于该模态，放大因子为：\n$$\nG(k \\Delta x = \\pi) = 1 - 4r \\sin^2\\left(\\frac{\\pi}{2}\\right) = 1 - 4r\n$$\n由于 $r > 0.5$，我们有 $4r > 2$，因此 $G = 1 - 4r < 1 - 2 = -1$。\n因此，对于最高波数模态，放大因子是一个幅值大于 $1$ 的负数。例如，如果 $r = 0.51$，则 $G = 1 - 4(0.51) = 1 - 2.04 = -1.04$。\n\n初始条件被指定为光滑的，这意味着其高波数分量初始时非常小。然而，问题正确地包含了舍入误差的存在。这些误差充当随机噪声源，包含所有波数的分量，也包括不稳定的高波数分量。这些不稳定模态的振幅在每个时间步都会乘以 $G < -1$。这导致模态振幅的指数增长，且符号在每一步都会翻转。这种行为表现为网格尺度（点对点）的振荡，其振幅无界增长，最终压倒真实的光滑解。\n\n### 选项评估\n\n**A. 高波数分量获得一个幅值大于 $1$ 且为负的放大因子，产生符号交替的网格尺度振荡，其振幅无界增长，最终污染整个解。**\n这个陈述精确地描述了上面推导出的不稳定性机制。对于 $r > 0.5$，最高波数模态有 $G = 1 - 4r < -1$。因此， $|G| > 1$ 且 $G < 0$。该模态对应于 $(-1)^j$ 的空间模式，这是一种符号交替的网格尺度振荡。其振幅呈指数增长（$|G|^n$），并最终将污染整个数值域。\n**结论：正确。**\n\n**B. 对于任何以低波数内容为主的初始条件，当 $r$ 略高于 $0.5$ 时，该格式保持稳定，因为扩散会衰减所有模态，所以放大因子的幅值保持小于或等于 $1$。**\n这个陈述有根本性错误。线性格式的稳定性是格式本身的属性，而不是初始条件的属性。虽然光滑的初始条件可能会延迟不稳定性的可见发生，但舍入误差的存在保证了不稳定模态将被激发并增长。如推导所示，声称当 $r > 0.5$ 时 $|G| \\le 1$ 在事实上是错误的。\n**结论：错误。**\n\n**C. 当 $r>0.5$ 时，该格式变得过度耗散，导致所有傅里叶模态比精确解衰减得更快；离散解保持单调和稳定，没有振荡。**\n这是对行为的错误描述。“过度耗散”或“数值耗散”指的是对解分量的人为衰减，这是在稳定格式中观察到的现象。当 $r>0.5$ 时，该格式是不稳定的。主导行为不是增强的衰减，而是爆炸性的振荡增长。关于稳定性和单调性的说法是错误的。\n**结论：错误。**\n\n**D. 不稳定性仅在 $r>1$ 时发生，因为最坏情况下的放大因子等于 $1-2r$；对于 $0.5<r<1$，该格式是稳定的，但会产生有界振幅的振荡。**\n该陈述基于错误的公式和错误的稳定性极限。最坏情况下的放大因子是 $G = 1 - 4r$，而不是 $1-2r$。稳定性极限是 $r \\le 0.5$，而不是 $r \\le 1$。因此，声称该格式在 $0.5 < r < 1$ 时是稳定的，是错误的。对于任何 $r > 0.5$，该格式都是无条件不稳定的。\n**结论：错误。**", "answer": "$$\\boxed{A}$$", "id": "2392556"}, {"introduction": "在探索了一维简单情况下的稳定性后，我们现在进入一个更复杂的二维场景，使用交替方向隐式（ADI）格式。这项实践引入了一个混合导数项，这是更高级物理模型中的一个常见特征，它使稳定性分析变得复杂 [@problem_id:2392607]。您将推导该格式的放大因子，然后使用计算方法来检验其稳定性，从而将纯理论与实际数值研究联系起来。", "problem": "考虑在均匀笛卡尔网格上的二维扩散方程，该方程具有常数系数和混合二阶导数，网格在两个方向上的间距相等。该方程由以下偏微分方程控制\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^{2} u}{\\partial x^{2}} + \\beta \\frac{\\partial^{2} u}{\\partial y^{2}} + \\gamma \\frac{\\partial^{2} u}{\\partial x \\partial y},\n$$\n其中 $u = u(x,y,t)$, $\\alpha > 0$, $\\beta > 0$, 且 $\\gamma \\in \\mathbb{R}$，空间步长为 $h > 0$，时间步长为 $\\Delta t > 0$。假设网格是均匀的，边界是周期的，并且所有二阶导数都使用中心差分近似，其中纯二阶导数使用标准的 $5$ 点模板，混合导数使用标准的 $4$ 点中心模板。定义无量纲比率 $r = \\Delta t / h^{2}$，$r_{x} = \\alpha r$，$r_{y} = \\beta r$ 和 $r_{xy} = \\gamma r$。考虑以下交替方向隐式 (ADI) 格式，该格式在每个半步中显式处理混合导数项：\n- 第一个半步：\n$$\n\\left(I - \\frac{\\Delta t}{2} \\,\\alpha D_{xx}^{h}\\right) u^{\\star} = \\left(I + \\frac{\\Delta t}{2}\\, \\beta D_{yy}^{h}\\right) u^{n} + \\frac{\\Delta t}{2}\\, \\gamma D_{xy}^{h} \\, u^{n}.\n$$\n- 第二个半步：\n$$\n\\left(I - \\frac{\\Delta t}{2} \\,\\beta D_{yy}^{h}\\right) u^{n+1} = \\left(I + \\frac{\\Delta t}{2}\\, \\alpha D_{xx}^{h}\\right) u^{\\star} + \\frac{\\Delta t}{2}\\, \\gamma D_{xy}^{h} \\, u^{\\star}.\n$$\n此处，$D_{xx}^{h}$、$D_{yy}^{h}$ 和 $D_{xy}^{h}$ 分别表示在间距为 $h$ 的均匀网格上，对于 $\\partial^{2}/\\partial x^{2}$、$\\partial^{2}/\\partial y^{2}$ 和 $\\partial^{2}/\\partial x \\partial y$ 的标准中心差分算子。假设网格是无限周期的，以便应用傅里叶 (von Neumann) 分析。\n\n任务：\n- 从 von Neumann (傅里叶) 稳定性分析的定义和均匀网格上中心差分算子的符号出发，推导单个傅里叶模式的标量放大因子 $G(\\theta_{x}, \\theta_{y}; r_{x}, r_{y}, r_{xy})$，其中 $\\theta_{x}$ 和 $\\theta_{y}$ 分别是 $x$ 和 $y$ 方向上的无量纲波数，均在区间 $[-\\pi, \\pi]$ 内。\n- 用放大因子陈述稳定性条件，并解释 $r_{x}$、$r_{y}$ 和 $r_{xy}$ 的作用。\n- 设计一个算法，对于给定的 $(\\alpha,\\beta,\\gamma,r)$，通过在 $N \\times N$ 点的方形网格上进行均匀采样（选择 $N=801$），计算在 $(\\theta_{x},\\theta_{y}) \\in [-\\pi,\\pi] \\times [-\\pi,\\pi]$ 上的放大因子的最大模。使用这个最大值，根据条件 $\\max_{\\theta_{x},\\theta_{y}} |G| \\le 1$ 来判断稳定性。\n- 此问题中无需报告物理单位；所有量根据构造都是无量纲的。\n\n测试套件：\n- 使用以下四组参数 $(\\alpha,\\beta,\\gamma,r)$:\n    - 情况 $1$：$(1.0, 1.0, 0.0, 5.0)$。\n    - 情况 $2$：$(1.0, 1.0, 1.0, 0.25)$。\n    - 情况 $3$：$(1.0, 1.0, 1.5, 4.0)$。\n    - 情况 $4$：$(1.0, 2.0, 1.8, 1.0)$。\n- 对于每种情况，计算放大因子的最大模，并使用上述准则确定稳定性。\n\n最终输出格式要求：\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔列表形式的结果。对于给定顺序的每种情况，该列表必须首先包含四舍五入到六位小数的最大放大因子，然后是一个布尔稳定性指标。例如，输出格式必须为\n$$\n[\\text{max}_{1}, \\text{stable}_{1}, \\text{max}_{2}, \\text{stable}_{2}, \\text{max}_{3}, \\text{stable}_{3}, \\text{max}_{4}, \\text{stable}_{4}],\n$$\n其中每个 $\\text{max}_{k}$ 是一个小数点后有六位数字的浮点数，每个 $\\text{stable}_{k}$ 是 $\\text{True}$ 或 $\\text{False}$。", "solution": "该问题要求对一个针对含混合导数项的二维扩散方程的特定交替方向隐式 (ADI) 格式进行严格的 von Neumann 稳定性分析。分析将有条不紊地进行，首先从推导放大因子开始。\n\n首先，我们建立分析工具。von Neumann 分析假设计算网格上的解为单个傅里叶模式。对于网格点 $(x_j, y_k) = (j h, k h)$ 和时间 $t_n = n \\Delta t$，该模式表示为：\n$$\nu_{j,k}^n = \\hat{u}^n e^{i(k_x x_j + k_y y_k)} = \\hat{u}^n e^{i(j \\theta_x + k \\theta_y)}\n$$\n其中 $\\hat{u}^n$ 是在时间步 $n$ 的模式的复振幅，$k_x$ 和 $k_y$ 是波数，$\\theta_x = k_x h$ 和 $\\theta_y = k_y h$ 是无量纲波数，且 $\\theta_x, \\theta_y \\in [-\\pi, \\pi]$。线性差分算子作用于此模式，等效于将其振幅乘以一个称为算子符号的复数。\n\n我们现在推导指定中心差分算子的符号。\n关于 $x$ 的二阶偏导数由 $D_{xx}^h$ 近似：\n$$\nD_{xx}^h u_{j,k}^n = \\frac{u_{j+1,k}^n - 2u_{j,k}^n + u_{j-1,k}^n}{h^2}\n$$\n将此应用于傅里叶模式可得：\n$$\nD_{xx}^h \\left(\\hat{u}^n e^{ij\\theta_x} e^{ik\\theta_y}\\right) = \\frac{\\hat{u}^n e^{ik\\theta_y} (e^{i(j+1)\\theta_x} - 2e^{ij\\theta_x} + e^{i(j-1)\\theta_x})}{h^2} = \\left(\\frac{e^{i\\theta_x} - 2 + e^{-i\\theta_x}}{h^2}\\right) u_{j,k}^n\n$$\n因此，算子 $D_{xx}^h$ 的符号（记为 $\\widehat{D_{xx}^h}$）为：\n$$\n\\widehat{D_{xx}^h} = \\frac{2\\cos(\\theta_x) - 2}{h^2} = -\\frac{4}{h^2}\\sin^2\\left(\\frac{\\theta_x}{2}\\right)\n$$\n根据对称性，$D_{yy}^h$ 的符号为：\n$$\n\\widehat{D_{yy}^h} = -\\frac{4}{h^2}\\sin^2\\left(\\frac{\\theta_y}{2}\\right)\n$$\n混合导数由 $4$ 点中心模板 $D_{xy}^h$ 近似：\n$$\nD_{xy}^h u_{j,k}^n = \\frac{u_{j+1,k+1}^n - u_{j+1,k-1}^n - u_{j-1,k+1}^n + u_{j-1,k-1}^n}{4h^2}\n$$\n此算子的符号 $\\widehat{D_{xy}^h}$ 推导如下：\n$$\n\\widehat{D_{xy}^h} = \\frac{e^{i(\\theta_x+\\theta_y)} - e^{i(\\theta_x-\\theta_y)} - e^{i(-\\theta_x+\\theta_y)} + e^{i(-\\theta_x-\\theta_y)}}{4h^2} = \\frac{(e^{i\\theta_x} - e^{-i\\theta_x})(e^{i\\theta_y} - e^{-i\\theta_y})}{4h^2} = \\frac{(2i\\sin\\theta_x)(2i\\sin\\theta_y)}{4h^2}\n$$\n$$\n\\widehat{D_{xy}^h} = -\\frac{\\sin\\theta_x \\sin\\theta_y}{h^2}\n$$\n注意，这三个符号都是纯实数量。\n\n接下来，我们将 ADI 格式的两个半步转换到傅里叶空间。傅里叶模式在时间步 $n$、中间步 $\\star$ 和 $n+1$ 的振幅分别表示为 $\\hat{u}^n$、$\\hat{u}^\\star$ 和 $\\hat{u}^{n+1}$。\n第一个半步是：\n$$\n\\left(I - \\frac{\\Delta t}{2} \\alpha D_{xx}^{h}\\right) u^{\\star} = \\left(I + \\frac{\\Delta t}{2} \\beta D_{yy}^{h} + \\frac{\\Delta t}{2} \\gamma D_{xy}^{h}\\right) u^{n}\n$$\n在傅里叶空间中，这变成一个代数方程：\n$$\n\\left(1 - \\frac{\\Delta t}{2} \\alpha \\widehat{D_{xx}^h}\\right) \\hat{u}^{\\star} = \\left(1 + \\frac{\\Delta t}{2} \\beta \\widehat{D_{yy}^h} + \\frac{\\Delta t}{2} \\gamma \\widehat{D_{xy}^h}\\right) \\hat{u}^{n}\n$$\n第二个半步是：\n$$\n\\left(I - \\frac{\\Delta t}{2} \\beta D_{yy}^{h}\\right) u^{n+1} = \\left(I + \\frac{\\Delta t}{2} \\alpha D_{xx}^{h} + \\frac{\\Delta t}{2} \\gamma D_{xy}^{h}\\right) u^{\\star}\n$$\n在傅里叶空间中：\n$$\n\\left(1 - \\frac{\\Delta t}{2} \\beta \\widehat{D_{yy}^h}\\right) \\hat{u}^{n+1} = \\left(1 + \\frac{\\Delta t}{2} \\alpha \\widehat{D_{xx}^h} + \\frac{\\Delta t}{2} \\gamma \\widehat{D_{xy}^h}\\right) \\hat{u}^{\\star}\n$$\n为简化起见，我们代入符号并使用无量纲比率 $r_x = \\alpha \\Delta t/h^2$，$r_y = \\beta \\Delta t/h^2$ 和 $r_{xy} = \\gamma \\Delta t/h^2$。\n我们定义以下实值项：\n$$\nA = \\frac{\\Delta t}{2} \\alpha \\widehat{D_{xx}^h} = \\frac{\\Delta t \\alpha}{2} \\left(-\\frac{4}{h^2}\\sin^2\\left(\\frac{\\theta_x}{2}\\right)\\right) = -2 r_x \\sin^2\\left(\\frac{\\theta_x}{2}\\right)\n$$\n$$\nB = \\frac{\\Delta t}{2} \\beta \\widehat{D_{yy}^h} = \\frac{\\Delta t \\beta}{2} \\left(-\\frac{4}{h^2}\\sin^2\\left(\\frac{\\theta_y}{2}\\right)\\right) = -2 r_y \\sin^2\\left(\\frac{\\theta_y}{2}\\right)\n$$\n$$\nC = \\frac{\\Delta t}{2} \\gamma \\widehat{D_{xy}^h} = \\frac{\\Delta t \\gamma}{2} \\left(-\\frac{\\sin\\theta_x \\sin\\theta_y}{h^2}\\right) = -\\frac{r_{xy}}{2}\\sin\\theta_x\\sin\\theta_y\n$$\n使用这些定义，方程组简化为：\n$$\n(1 - A) \\hat{u}^{\\star} = (1 + B + C) \\hat{u}^{n}\n$$\n$$\n(1 - B) \\hat{u}^{n+1} = (1 + A + C) \\hat{u}^{\\star}\n$$\n放大因子为 $G = \\hat{u}^{n+1} / \\hat{u}^{n}$。我们通过消去 $\\hat{u}^\\star$ 来求解 $G$。从第一个方程，$\\hat{u}^{\\star} = \\frac{1+B+C}{1-A}\\hat{u}^{n}$。将此代入第二个方程可得：\n$$\n(1 - B) \\hat{u}^{n+1} = (1 + A + C) \\frac{1+B+C}{1-A}\\hat{u}^{n}\n$$\n因此，放大因子是：\n$$\nG(\\theta_x, \\theta_y) = \\frac{(1 + A + C)(1 + B + C)}{(1 - A)(1 - B)}\n$$\n将 $A$、$B$ 和 $C$ 的表达式代回此方程，得到放大因子的完整公式：\n$$\nG(\\theta_x, \\theta_y; r_x, r_y, r_{xy}) = \\frac{\\left(1 - 2r_x\\sin^2\\left(\\frac{\\theta_x}{2}\\right) - \\frac{r_{xy}}{2}\\sin\\theta_x\\sin\\theta_y\\right)\\left(1 - 2r_y\\sin^2\\left(\\frac{\\theta_y}{2}\\right) - \\frac{r_{xy}}{2}\\sin\\theta_x\\sin\\theta_y\\right)}{\\left(1 + 2r_x\\sin^2\\left(\\frac{\\theta_x}{2}\\right)\\right)\\left(1 + 2r_y\\sin^2\\left(\\frac{\\theta_y}{2}\\right)\\right)}\n$$\n数值格式的稳定性由 von Neumann 准则决定，该准则要求对于任何傅里叶模式，放大因子的模不得超过 1：\n$$\n\\max_{\\theta_x, \\theta_y \\in [-\\pi, \\pi]} |G(\\theta_x, \\theta_y)| \\le 1\n$$\n参数 $r_x$ 和 $r_y$ 控制纯扩散项的强度。在这种 ADI 公式中，这些项在每个半步中在一个方向上被隐式处理，在另一个方向上被显式处理。如果混合导数项不存在（$\\gamma = 0$，因此 $r_{xy} = 0$），该格式将简化为 Peaceman-Rachford ADI 方法，该方法对于扩散方程是无条件稳定的（即，对于所有 $r_x, r_y > 0$ 都有 $|G| \\le 1$）。\n然而，参数 $r_{xy}$ 对应于混合导数项，而在此特定格式中，该项在两个半步中均被显式处理。导数项的显式处理通常会引入条件稳定性。因此，我们预计此格式的稳定性将取决于 $|r_{xy}|$ 的大小，可能与 $r_x$ 和 $r_y$ 相关。较大的 $|r_{xy}|$ 值可能导致 $|G| > 1$，从而引起不稳定性。\n\n评估给定参数集 $(\\alpha, \\beta, \\gamma, r)$ 的稳定性的算法如下：\n1.  计算无量纲比率 $r_x = \\alpha r$，$r_y = \\beta r$ 和 $r_{xy} = \\gamma r$。\n2.  为 $(\\theta_x, \\theta_y)$ 在域 $[-\\pi, \\pi] \\times [-\\pi, \\pi]$ 上定义一个 $N \\times N$ 点的离散均匀网格，其中 $N=801$。\n3.  对于此网格上的每个点，使用推导的公式评估放大因子 $G$。\n4.  计算每个网格点上的模 $|G|$。\n5.  确定整个网格上 $|G|$ 的最大值。这提供了 $\\max_{\\theta_x, \\theta_y} |G|$ 的数值估计。\n6.  将此最大模与 $1$ 进行比较。如果最大值小于或等于 $1$，则认为该格式对于给定参数是稳定的。否则，它是不稳定的。\n将实施此过程以测试所提供的情况。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of determining the stability of an ADI scheme for a 2D diffusion\n    equation with a mixed derivative term.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (alpha, beta, gamma, r)\n        (1.0, 1.0, 0.0, 5.0),    # Case 1\n        (1.0, 1.0, 1.0, 0.25),   # Case 2\n        (1.0, 1.0, 1.5, 4.0),   # Case 3\n        (1.0, 2.0, 1.8, 1.0),   # Case 4\n    ]\n\n    results = []\n    \n    # Grid parameters for the von Neumann analysis\n    N = 801\n    theta_vals = np.linspace(-np.pi, np.pi, N)\n    THETA_X, THETA_Y = np.meshgrid(theta_vals, theta_vals)\n\n    # Pre-compute trigonometric terms for efficiency\n    SIN2_HALF_X = np.sin(THETA_X / 2)**2\n    SIN2_HALF_Y = np.sin(THETA_Y / 2)**2\n    SIN_X = np.sin(THETA_X)\n    SIN_Y = np.sin(THETA_Y)\n\n    for case in test_cases:\n        alpha, beta, gamma, r = case\n        \n        # Calculate dimensionless ratios\n        rx = alpha * r\n        ry = beta * r\n        rxy = gamma * r\n\n        # The amplification factor G is given by:\n        # G = ( (1 + A + C) * (1 + B + C) ) / ( (1 - A) * (1 - B) )\n        # where:\n        # A = -2 * rx * sin^2(theta_x / 2)\n        # B = -2 * ry * sin^2(theta_y / 2)\n        # C = -0.5 * rxy * sin(theta_x) * sin(theta_y)\n        \n        # Numerator calculation\n        # The terms in the numerator are (1 - 2*rx*S_x - C_xy) and (1 - 2*ry*S_y - C_xy)\n        c_xy_term = 0.5 * rxy * SIN_X * SIN_Y\n        \n        num_term_1 = 1.0 - 2.0 * rx * SIN2_HALF_X - c_xy_term\n        num_term_2 = 1.0 - 2.0 * ry * SIN2_HALF_Y - c_xy_term\n        numerator = num_term_1 * num_term_2\n        \n        # Denominator calculation\n        # The terms are (1 + 2*rx*S_x) and (1 + 2*ry*S_y)\n        den_term_1 = 1.0 + 2.0 * rx * SIN2_HALF_X\n        den_term_2 = 1.0 + 2.0 * ry * SIN2_HALF_Y\n        denominator = den_term_1 * den_term_2\n        \n        # Compute amplification factor over the grid\n        # Avoid division by zero, although with rx, ry > 0, denominator is >= 1\n        g_grid = numerator / denominator\n        \n        # Find the maximum modulus of the amplification factor\n        max_abs_g = np.max(np.abs(g_grid))\n        \n        # Determine stability based on the von Neumann criterion\n        is_stable = max_abs_g <= 1.0\n        \n        results.append(f\"{max_abs_g:.6f}\")\n        results.append(str(is_stable))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2392607"}, {"introduction": "我们的最终实践将从分析时间相关的格式转向为一个稳态问题实现一个完整的有限差分求解器。您将要处理在一个带有复杂内部边界（一个有圆孔的正方形）的二维域上的拉普拉斯方程 [@problem_id:2392562]。这个练习将指导您完成构建求解器的基本步骤：处理复杂几何形状、组装稀疏线性系统，并使用“制造解方法”验证您的结果，从而将您的技能整合成一个具体的计算工具。", "problem": "考虑在二维域 $\\Omega$ 中，标量场 $u(x,y)$ 的稳态扩散，其中扩散系数 $k$ 为常数，域 $\\Omega$ 是一个内部有圆孔的正方形。从通量守恒和 Fick's law 出发，无体积源项的稳态扩散的控制偏微分方程 (PDE) 为\n$$\n-\\nabla \\cdot (k \\nabla u) = 0 \\quad \\text{in } \\Omega \\setminus \\mathcal{H},\n$$\n其中 $\\mathcal{H}$ 是孔的内部。在外部正方形边界 $\\partial \\Omega$ 和内部边界 $\\partial \\mathcal{H}$ 上，均施加 Dirichlet 边界条件 $u=g(x,y)$，其中 $g(x,y)$ 是给定的。为进行数值验证，使用人工解法，并指定精确解为\n$$\nu^{\\star}(x,y) = e^{x}\\cos(y),\n$$\n并设置 $k=1$。那么，与 $u^{\\star}(x,y)$ 相容的源项满足\n$$\n-\\nabla \\cdot (k \\nabla u^{\\star}) = 0,\n$$\n因此，PDE 在 $\\Omega \\setminus \\mathcal{H}$ 内部保持齐次，且在两个边界上的 Dirichlet 数据为 $u=g=u^{\\star}$。使用 $N\\times N$ 个节点的均匀笛卡尔网格对 $\\Omega=[-1,1]\\times[-1,1]$ 进行离散化，其中 $N$ 是大于或等于 5 的给定整数，网格间距为 $h = \\frac{2}{N-1}$。设节点坐标为 $x_i=-1+ih$ 和 $y_j=-1+jh$，其中 $i,j\\in\\{0,1,\\dots,N-1\\}$。圆孔由其中心 $(x_c,y_c)$ 和半径 $r$ 定义。内部边界按如下方式处理：\n- 对于每个中心满足 $(x_i-x_c)^2+(y_j-y_c)^2<r^2$ 的网格节点 $(i,j)$，将其标记为孔洞内部；这些节点被排除在计算域之外。\n- 对于每个不属于孔洞内部且其四个网格邻居中至少有一个属于孔洞内部的网格节点 $(i,j)$，将其标记为内部边界；在这些节点上施加 Dirichlet 数据 $u_{i,j}=u^{\\star}(x_i,y_j)$。\n- 对于 $i\\in\\{0,N-1\\}$ 或 $j\\in\\{0,N-1\\}$ 的节点，将其标记为外部边界；在这些节点上施加 Dirichlet 数据 $u_{i,j}=u^{\\star}(x_i,y_j)$。\n- 未知量是所有剩余的节点，即既不属于孔洞内部也不在任何边界上的节点。\n\n在未知量集合上，推导并实现拉普拉斯算子的二阶五点有限差分法 (FDM) 近似，该近似与二阶导数的基本定义一致，即对于任何内部未知节点 $(i,j)$，\n$$\n4u_{i,j} - u_{i-1,j} - u_{i+1,j} - u_{i,j-1} - u_{i,j+1} = 0,\n$$\n如果邻近节点是具有已知值的边界节点，则将其贡献移至右侧。将得到的线性系统组装成标准稀疏格式，并求解未知节点上的 $u$。求解后，计算所有未知节点上相对于 $u^{\\star}$ 的最大绝对误差：\n$$\nE_{\\infty} = \\max_{(i,j)\\in \\mathcal{U}} \\left| u_{i,j} - u^{\\star}(x_i,y_j) \\right|,\n$$\n其中 $\\mathcal{U}$ 是未知量的索引集。\n\n本问题中无需报告物理单位。$u^{\\star}(x,y)$ 中的角度使用弧度，因为 $y$ 是一个笛卡尔坐标，且余弦函数使用弧度。\n\n实现一个完整的程序，对以下测试套件执行上述计算，每个测试由 $(N, x_c, y_c, r)$ 指定：\n- 测试 $1$：$N=65$, $x_c=0.2$, $y_c=-0.1$, $r=0.35$。\n- 测试 $2$：$N=65$, $x_c=0.0$, $y_c=0.0$, $r=0.12$。\n- 测试 $3$：$N=33$, $x_c=-0.3$, $y_c=0.4$, $r=0.30$。\n- 测试 $4$：$N=97$, $x_c=0.55$, $y_c=0.0$, $r=0.40$。\n\n对每个测试，计算如上定义的 $E_{\\infty}$。您的程序应产生单行输出，包含一个用方括号括起来的逗号分隔的结果列表，每个误差都使用科学记数法格式化，小数点后保留八位数字（例如，$[1.23456789\\mathrm{e}{-04},5.00000000\\mathrm{e}{-05}]$）。", "solution": "问题陈述经过严格审查，被认为是有效的。它具有科学依据、是适定的、客观且自洽的。它描述了计算工程中的一个标准问题：使用有限差分法在复杂域上求解 Laplace 方程，并使用人工解进行验证。我们着手进行推导和实现。\n\n无源项、常数扩散系数 $k=1$ 的稳态扩散的控制偏微分方程是二维 Laplace 方程：\n$$\n\\nabla^2 u = \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} = 0\n$$\n该方程在域 $\\Omega \\setminus \\mathcal{H}$ 中成立，其中 $\\Omega = [-1,1] \\times [-1,1]$ 是一个正方形， $\\mathcal{H}$ 是一个内部圆孔。在外部边界 $\\partial\\Omega$ 和内部边界 $\\partial\\mathcal{H}$ 上，使用人工解 $u^{\\star}(x,y) = e^{x}\\cos(y)$ 施加 Dirichlet 边界条件。\n\n该域使用 $N \\times N$ 个节点的均匀笛卡尔网格进行离散化。对于 $i,j \\in \\{0, 1, \\dots, N-1\\}$，节点 $(i,j)$ 的坐标由 $(x_i, y_j)$ 给出，其中 $x_i = -1 + ih$ 且 $y_j = -1 + jh$。网格间距为 $h = \\frac{2}{N-1}$。令 $u_{i,j}$ 表示 $u(x_i, y_j)$ 的数值近似。\n\n在内部节点 $(x_i, y_j)$ 处，Laplace 算子使用二阶中心差分进行近似：\n$$\n\\frac{\\partial^2 u}{\\partial x^2}\\bigg|_{(x_i, y_j)} \\approx \\frac{u_{i-1,j} - 2u_{i,j} + u_{i+1,j}}{h^2}\n$$\n$$\n\\frac{\\partial^2 u}{\\partial y^2}\\bigg|_{(x_i, y_j)} \\approx \\frac{u_{i,j-1} - 2u_{i,j} + u_{i,j+1}}{h^2}\n$$\n将这些近似代入 Laplace 方程并乘以 $h^2$，得到五点有限差分格式：\n$$\n(u_{i-1,j} - 2u_{i,j} + u_{i+1,j}) + (u_{i,j-1} - 2u_{i,j} + u_{i,j+1}) = 0\n$$\n整理这些项，得到每个未知内部节点的方程：\n$$\n4u_{i,j} - u_{i-1,j} - u_{i+1,j} - u_{i,j-1} - u_{i,j+1} = 0\n$$\n\n数值过程的核心是对每个网格节点 $(i,j)$ 进行分类，以确定其值 $u_{i,j}$ 是待求解的未知量还是已知的边界值。我们定义三类节点：\n1.  **孔洞节点**：其坐标 $(x_i, y_j)$ 满足 $(x_i - x_c)^2 + (y_j - y_c)^2 < r^2$ 的节点。这些节点被排除在计算之外。\n2.  **边界节点**：这些是其上 $u$ 的值被指定的节点。该类别包括：\n    (a) $\\partial\\Omega$ 上的外部边界节点，其中 $i \\in \\{0, N-1\\}$ 或 $j \\in \\{0, N-1\\}$。\n    (b) 内部边界节点，它们是非孔洞节点，并且其四个基本邻居（左、右、上、下）中至少有一个被分类为孔洞节点。\n    对于所有边界节点，其值被设置为精确解，$u_{i,j} = u^{\\star}(x_i, y_j)$。\n3.  **未知节点**：这些是域 $\\Omega \\setminus \\mathcal{H}$ 内所有未被分类为边界节点的节点。这些节点上的值 $u_{i,j}$ 是问题的未知量。\n\n假设有 $M$ 个未知节点。我们构建一个大小为 $M \\times M$ 的线性方程组 $A\\mathbf{u}_{\\text{unk}} = \\mathbf{b}$。向量 $\\mathbf{u}_{\\text{unk}}$ 包含 $M$ 个未知的 $u$ 值。在未知节点的二维索引 $(i,j)$ 和一维索引 $k \\in \\{0, 1, \\dots, M-1\\}$ 之间建立一个映射。\n\n对于每个具有对应索引 $k$ 的未知节点 $(i,j)$，我们根据五点格式写出线性系统的第 k 个方程。矩阵 $A$ 和向量 $\\mathbf{b}$ 按如下方式组装：\n- 对角线元素为 $A_{k,k} = 4$。\n- 右侧向量元素 $b_k$ 初始化为 $0$。\n- 对于 $(i,j)$ 的四个邻居中的每一个，设其索引为 $(i', j')$：\n    - 如果该邻居也是一个索引为 $p$ 的未知节点，我们设置非对角线元素 $A_{k,p} = -1$。\n    - 如果该邻居是一个边界节点（内部或外部），其值 $u_{i',j'}$ 是已知的。这个已知值被移到方程的右侧。因此，我们将其值加到 $b_k$ 中：$b_k \\leftarrow b_k + u^{\\star}(x_{i'}, y_{j'})$。\n\n得到的矩阵 $A$ 是稀疏、对称且对角占优的，这保证了唯一解的存在。该系统使用稀疏线性代数求解器进行高效求解，以得到 $\\mathbf{u}_{\\text{unk}}$。\n\n在所有未知节点上获得数值解 $u_{i,j}$ 后，计算最大绝对误差 $E_{\\infty}$ 以评估该方法的精度。该误差是相对于已知的人工解 $u^{\\star}$ 计算的：\n$$\nE_{\\infty} = \\max_{(i,j) \\in \\mathcal{U}} | u_{i,j} - u^{\\star}(x_i,y_j) |\n$$\n其中 $\\mathcal{U}$ 是对应所有未知节点的索引集。该过程被实现并应用于指定的测试用例。", "answer": "```python\nimport numpy as np\nfrom scipy.sparse import lil_matrix\nfrom scipy.sparse.linalg import spsolve\nfrom scipy.ndimage import binary_dilation\n\ndef solve_one_case(N, xc, yc, r):\n    \"\"\"\n    Solves the 2D Laplace equation on a square domain with a circular hole\n    for a single set of parameters.\n    \"\"\"\n    # Node type constants\n    HOLE = -1\n    UNKNOWN = 0\n    BOUNDARY = 1\n\n    # 1. Grid Generation and Node Classification\n    x = np.linspace(-1, 1, N)\n    y = np.linspace(-1, 1, N)\n    xx, yy = np.meshgrid(x, y, indexing='ij')\n\n    node_type = np.full((N, N), UNKNOWN, dtype=int)\n\n    # Classify hole nodes\n    is_hole = (xx - xc)**2 + (yy - yc)**2 < r**2\n    node_type[is_hole] = HOLE\n\n    # Classify boundary nodes (both external and internal)\n    is_boundary = np.zeros_like(node_type, dtype=bool)\n    \n    # External boundaries\n    is_boundary[0, :] = True\n    is_boundary[N - 1, :] = True\n    is_boundary[:, 0] = True\n    is_boundary[:, N - 1] = True\n    \n    # Internal boundaries (nodes adjacent to the hole)\n    # A 5-point cross-shaped structuring element identifies cardinal neighbors.\n    struct = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]], dtype=bool)\n    dilated_hole = binary_dilation(is_hole, structure=struct)\n    is_internal_boundary = dilated_hole & ~is_hole\n    is_boundary |= is_internal_boundary\n\n    # Apply boundary classification, ensuring hole nodes are not overwritten.\n    node_type[is_boundary & ~is_hole] = BOUNDARY\n\n    # 2. Map unknown nodes to linear indices for the linear system\n    unknown_indices = np.where(node_type == UNKNOWN)\n    num_unknowns = len(unknown_indices[0])\n    \n    map_ij_to_k = { (i, j): k for k, (i, j) in enumerate(zip(*unknown_indices)) }\n\n    # 3. Assemble the linear system Ax = b\n    # LIL format is efficient for building the sparse matrix\n    A = lil_matrix((num_unknowns, num_unknowns), dtype=float)\n    b = np.zeros(num_unknowns, dtype=float)\n    \n    u_exact = np.exp(xx) * np.cos(yy)\n\n    for k in range(num_unknowns):\n        i, j = unknown_indices[0][k], unknown_indices[1][k]\n        \n        # Diagonal term from the 5-point stencil\n        A[k, k] = 4.0\n        \n        # Consider the four cardinal neighbors\n        for ni, nj in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            neighbor_type = node_type[ni, nj]\n            \n            if neighbor_type == UNKNOWN:\n                # Off-diagonal term for an unknown neighbor\n                p = map_ij_to_k[(ni, nj)]\n                A[k, p] = -1.0\n            elif neighbor_type == BOUNDARY:\n                # Known value from a boundary neighbor contributes to the RHS\n                b[k] += u_exact[ni, nj]\n\n    # 4. Solve the sparse linear system\n    # Convert to CSR format for efficient solving\n    A_csr = A.tocsr()\n    u_vec_numeric = spsolve(A_csr, b)\n\n    # 5. Compute the maximum absolute error\n    u_vec_exact = u_exact[unknown_indices]\n    max_abs_error = np.max(np.abs(u_vec_numeric - u_vec_exact))\n    \n    return max_abs_error\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (N, xc, yc, r)\n        (65, 0.2, -0.1, 0.35),\n        (65, 0.0, 0.0, 0.12),\n        (33, -0.3, 0.4, 0.30),\n        (97, 0.55, 0.0, 0.40),\n    ]\n\n    results = []\n    for case in test_cases:\n        error = solve_one_case(*case)\n        results.append(error)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{e:.8e}' for e in results)}]\")\n\nsolve()\n```", "id": "2392562"}]}