{"hands_on_practices": [{"introduction": "在建立任何有限差分格式之前，我们必须首先掌握如何精确地近似导数。这项实践将带你超越均匀网格的理想情况，推导一个非均匀网格上二阶导数的近似公式。通过这个练习，你将深入理解泰勒级数在构造差分算子中的核心作用，并揭示网格质量如何直接影响数值解的精度，这是处理复杂几何或自适应网格问题时的关键考量。 [@problem_id:2392901]", "problem": "考虑一个光滑标量场 $u(x)$，例如，它代表一维线性波动方程中的位移场，其中空间算子涉及空间二阶导数 $u_{xx}$。设 $x_{i-1}<x_{i}<x_{i+1}$ 为三个连续的、通常非均匀的网格点，其间距为 $h_{i-1}=x_{i}-x_{i-1}$ 和 $h_{i}=x_{i+1}-x_{i}$。假设 $u$ 在 $x_{i}$ 的一个邻域内至少四次连续可微。在讨论渐近一致性时，您也可以假设网格是由一个从间距为 $\\Delta \\xi$ 的均匀计算网格出发的、两次连续可微的严格递增映射 $x(\\xi)$ 生成的，因此当 $\\Delta \\xi\\to 0$ 时 $h=\\max\\{h_{i-1},h_{i}\\}\\to 0$，并且 $h_{i}-h_{i-1}=\\mathcal{O}(h^{2})$。\n\n在上述光滑网格假设下，推导一个在 $x_i$ 点形式为 $a\\,u(x_{i-1})+b\\,u(x_{i})+c\\,u(x_{i+1})$ 的三点有限差分近似，该近似以二阶一致性逼近 $u_{xx}(x_{i})$。确定局部截断误差的主项（用 $h_{i-1}$、$h_{i}$ 和在 $x_{i}$ 点求值的 $u$ 的导数表示），并陈述该近似达到二阶精确的条件。\n\n答案格式：\n- 将您对 $u_{xx}(x_{i})$ 的有限差分近似的最终答案表示为单个闭式解析表达式，用 $u(x_{i-1})$、$u(x_{i})$、$u(x_{i+1})$、$h_{i-1}$ 和 $h_{i}$ 表示。\n- 不需要单位。", "solution": "问题陈述经审慎核查，确认为有效。其科学基础为数值分析原理，问题是适定的，数据充分且一致，并以客观的数学语言表述。该问题未违反任何无效性标准。因此，我们可以进行推导。\n\n我们的目标是确定一个形式为 $L[u](x_i) = a\\,u(x_{i-1})+b\\,u(x_{i})+c\\,u(x_{i+1})$ 的有限差分近似的系数 $a$、$b$ 和 $c$，该近似用于逼近二阶导数 $u_{xx}(x_i) \\equiv u''(x_i)$。假设函数 $u(x)$ 至少四次连续可微。我们对 $u(x_{i+1})$ 和 $u(x_{i-1})$ 在点 $x_i$ 附近进行 Taylor 级数展开。令 $h_i = x_{i+1} - x_i$ 且 $h_{i-1} = x_i - x_{i-1}$。为简化推导，我们将 $u(x_k)$ 记作 $u_k$，并将 $u$ 在 $x_i$ 处的导数记作 $u'_i, u''_i, u'''_i, u^{(4)}_i$。\n\nTaylor 级数展开式为：\n$$u(x_{i+1}) = u_{i+1} = u_i + h_i u'_i + \\frac{h_i^2}{2} u''_i + \\frac{h_i^3}{6} u'''_i + \\frac{h_i^4}{24} u^{(4)}_i + \\mathcal{O}(h_i^5)$$\n$$u(x_{i-1}) = u_{i-1} = u_i - h_{i-1} u'_i + \\frac{h_{i-1}^2}{2} u''_i - \\frac{h_{i-1}^3}{6} u'''_i + \\frac{h_{i-1}^4}{24} u^{(4)}_i + \\mathcal{O}(h_{i-1}^5)$$\n\n我们构造线性组合并代入这些展开式：\n$$a u_{i-1} + b u_i + c u_{i+1} = a\\left(u_i - h_{i-1} u'_i + \\frac{h_{i-1}^2}{2} u''_i - \\dots\\right) + b u_i + c\\left(u_i + h_i u'_i + \\frac{h_i^2}{2} u''_i + \\dots\\right)$$\n\n按 $u$ 在 $x_i$ 处的导数对各项进行分组：\n$$a u_{i-1} + b u_i + c u_{i+1} = (a+b+c)u_i + (c h_i - a h_{i-1})u'_i + \\left(\\frac{c h_i^2}{2} + \\frac{a h_{i-1}^2}{2}\\right)u''_i + \\left(\\frac{c h_i^3}{6} - \\frac{a h_{i-1}^3}{6}\\right)u'''_i + \\left(\\frac{c h_i^4}{24} + \\frac{a h_{i-1}^4}{24}\\right)u^{(4)}_i + \\dots$$\n\n为确保该表达式近似 $u''_i$，我们匹配各导数项的系数：\n1. $u_i$ 的系数：$a+b+c=0$\n2. $u'_i$ 的系数：$c h_i - a h_{i-1} = 0$\n3. $u''_i$ 的系数：$\\frac{c h_i^2}{2} + \\frac{a h_{i-1}^2}{2} = 1$\n\n从方程(2)中，我们得到 $a = c \\frac{h_i}{h_{i-1}}$。将此代入方程(3)：\n$$\\frac{c h_i^2}{2} + \\frac{(c h_i/h_{i-1}) h_{i-1}^2}{2} = 1$$\n$$\\frac{c}{2} (h_i^2 + h_i h_{i-1}) = 1$$\n$$\\frac{c h_i}{2} (h_i + h_{i-1}) = 1$$\n这给出了系数 $c$：\n$$c = \\frac{2}{h_i(h_i + h_{i-1})}$$\n现在我们利用方程(2)中的关系求出 $a$：\n$$a = c \\frac{h_i}{h_{i-1}} = \\frac{2}{h_i(h_i + h_{i-1})} \\frac{h_i}{h_{i-1}} = \\frac{2}{h_{i-1}(h_i + h_{i-1})}$$\n最后，我们从方程(1)中求出 $b$：\n$$b = -a - c = -\\left(\\frac{2}{h_{i-1}(h_i + h_{i-1})} + \\frac{2}{h_i(h_i + h_{i-1})}\\right)$$\n$$b = -\\frac{2}{h_i + h_{i-1}}\\left(\\frac{1}{h_{i-1}} + \\frac{1}{h_i}\\right) = -\\frac{2}{h_i + h_{i-1}}\\left(\\frac{h_i + h_{i-1}}{h_i h_{i-1}}\\right) = -\\frac{2}{h_i h_{i-1}}$$\n\n因此，$u_{xx}(x_i)$ 的有限差分近似为：\n$$L[u](x_i) = \\frac{2}{h_{i-1}(h_i + h_{i-1})} u_{i-1} - \\frac{2}{h_i h_{i-1}} u_i + \\frac{2}{h_i(h_i + h_{i-1})} u_{i+1}$$\n该表达式可以重排为一种更直观的形式：\n$$L[u](x_i) = \\frac{2}{h_i + h_{i-1}} \\left[ \\frac{u_{i+1} - u_i}{h_i} - \\frac{u_i - u_{i-1}}{h_{i-1}} \\right]$$\n这表明该算子是一阶差商之差，并由平均间距 $\\frac{1}{2}(h_i+h_{i-1})$ 进行了归一化。\n\n局部截断误差 $\\tau_i$ 定义为 $L[u](x_i) = u''(x_i) + \\tau_i$。$\\tau_i$ 的主项由 Taylor 展开式中未被消去的高阶项给出。\n$$\\tau_i = \\left(\\frac{c h_i^3}{6} - \\frac{a h_{i-1}^3}{6}\\right)u'''_i + \\left(\\frac{c h_i^4}{24} + \\frac{a h_{i-1}^4}{24}\\right)u^{(4)}_i + \\mathcal{O}(h^3)$$\n其中 $h = \\max\\{h_i, h_{i-1}\\}$。我们计算这些系数。\n$u'''_i$ 的系数是：\n$$\\frac{1}{6}(c h_i^3 - a h_{i-1}^3) = \\frac{1}{6}\\left(\\frac{2 h_i^3}{h_i(h_i + h_{i-1})} - \\frac{2 h_{i-1}^3}{h_{i-1}(h_i + h_{i-1})}\\right) = \\frac{1}{3(h_i + h_{i-1})}(h_i^2 - h_{i-1}^2) = \\frac{1}{3}(h_i - h_{i-1})$$\n$u^{(4)}_i$ 的系数是：\n$$\\frac{1}{24}(c h_i^4 + a h_{i-1}^4) = \\frac{1}{24}\\left(\\frac{2 h_i^4}{h_i(h_i + h_{i-1})} + \\frac{2 h_{i-1}^4}{h_{i-1}(h_i + h_{i-1})}\\right) = \\frac{1}{12(h_i + h_{i-1})}(h_i^3 + h_{i-1}^3)$$\n使用恒等式 $h_i^3 + h_{i-1}^3 = (h_i+h_{i-1})(h_i^2 - h_i h_{i-1} + h_{i-1}^2)$，此项可化简为：\n$$\\frac{1}{12}(h_i^2 - h_i h_{i-1} + h_{i-1}^2)$$\n因此，局部截断误差的主项为：\n$$\\tau_i = \\frac{h_i - h_{i-1}}{3} u'''(x_i) + \\frac{h_i^2 - h_i h_{i-1} + h_{i-1}^2}{12} u^{(4)}(x_i) + \\mathcal{O}(h^3)$$\n一致性的阶数由 $\\tau_i$ 中 $h$ 的最低次幂决定。第一项是 $\\mathcal{O}(h_i - h_{i-1})$，第二项是 $\\mathcal{O}(h^2)$。对于一般的非均匀网格，$h_i - h_{i-1} = \\mathcal{O}(h)$，因此该格式是一阶一致的。\n为使格式达到二阶一致，截断误差必须为 $\\mathcal{O}(h^2)$。这要求 $u'''(x_i)$ 项的系数为 $\\mathcal{O}(h^2)$ 阶。因此条件是 $h_i - h_{i-1} = \\mathcal{O}(h^2)$。这正是问题陈述中给出的光滑网格假设。在此条件下，截断误差的主部为 $\\mathcal{O}(h^2)$，该近似是二阶精确的。", "answer": "$$\\boxed{\\frac{2}{h_i+h_{i-1}} \\left( \\frac{u(x_{i+1})-u(x_i)}{h_i} - \\frac{u(x_i)-u(x_{i-1})}{h_{i-1}} \\right)}$$", "id": "2392901"}, {"introduction": "现实世界中的波现象常常发生在球对称的几何结构中，这在方程中引入了坐标奇点，给数值求解带来挑战。本练习将指导你运用一个巧妙的变量替换技巧，将带有奇点的球坐标波动方程转化为我们熟悉的一维标准波动方程。这个过程不仅能让你掌握处理坐标奇点的实用方法，更能体现出在计算科学中，如何通过分析预处理来简化问题，从而为稳健的数值模拟铺平道路。 [@problem_id:2392876]", "problem": "考虑一维球对称波动方程\n$$\nu_{tt}(r,t) = c^2\\left(u_{rr}(r,t) + \\frac{2}{r}u_r(r,t)\\right), \\quad r \\in [0,R], \\ t \\ge 0,\n$$\n附带正则性要求，即解在原点处是有限的。所有量均为无量纲量。初始位移和初始速度由下式指定\n$$\nu(r,0) = \\frac{1}{r} f(r), \\quad u_t(r,0) = 0,\n$$\n其中\n$$\nf(r) = r \\exp\\!\\left(-\\frac{(r - r_c)^2}{2\\sigma^2}\\right),\n$$\n并且原点处的值必须解释为极限\n$$\nu(0,0) = \\lim_{r \\to 0^+} \\frac{f(r)}{r}.\n$$\n在外边界上，施加齐次 Dirichlet 条件\n$$\nu(R,t) = 0 \\quad \\text{对所有 } t \\ge 0.\n$$\n你必须为原点处的奇异项设计一个数值上稳定且一致的处理方法，在空间和时间均匀网格上实现一个时域有限差分求解器，并将解演化到指定的最终时间。为了进行误差评估，将数值解与按如下方式构造的精确解进行比较。将 $f$ 的奇延拓定义到实直线上\n$$\n\\tilde{f}(x) = \\begin{cases}\nf(x), & x \\ge 0,\\\\\n- f(-x), & x < 0,\n\\end{cases}\n$$\n并设\n$$\nv(r,t) = \\frac{1}{2}\\left[\\tilde{f}(r - c t) + \\tilde{f}(r + c t)\\right], \\quad r \\ge 0, \\ t \\ge 0.\n$$\n那么精确位移是\n$$\nu_{\\text{exact}}(r,t) = \\begin{cases}\n\\displaystyle \\frac{v(r,t)}{r}, & r > 0,\\\\\n\\displaystyle \\left.\\frac{\\partial v}{\\partial r}\\right|_{r=0,t}, & r = 0,\n\\end{cases}\n$$\n其中原点处的导数由下式给出\n$$\nu_{\\text{exact}}(0,t) = f'(c t), \\quad f'(r) = \\exp\\!\\left(-\\frac{(r - r_c)^2}{2\\sigma^2}\\right) - \\frac{r(r - r_c)}{\\sigma^2} \\exp\\!\\left(-\\frac{(r - r_c)^2}{2\\sigma^2}\\right).\n$$\n使用以下参数值测试套件；所有量均为无量纲量：\n\n- 所有测试的通用参数：$c = 1.0$, $R = 2.0$, $r_c = 0.6$, $\\sigma = 0.08$。\n- 测试 1 (内部稳定性，亚 Courant 情况)：在 $[0,R]$ 上有 $N = 400$ 个空间子区间；空间步长 $\\Delta r = R/N$；时间步长 $\\Delta t = 0.9 \\, \\Delta r / c$；时间步数 $M = 50$；最终时间 $T = M \\Delta t$。\n- 测试 2 (边界 Courant 情况)：$N = 400$；$\\Delta r = R/N$；$\\Delta t = 1.0 \\, \\Delta r / c$；$M = 50$；$T = M \\Delta t$。\n- 测试 3 (用于稳定性检测的超 Courant 压力测试)：$N = 300$；$\\Delta r = R/N$；$\\Delta t = 1.05 \\, \\Delta r / c$；$M = 200$；$T = M \\Delta t$。\n\n你的程序必须：\n\n- 实现一个有限差分求解器，在网格点 $r_i = i \\Delta r$（$i = 0,1,\\dots,N$）处生成数值近似解 $u_{\\text{num}}(r_i, T)$。\n- 对于测试 1 和测试 2，计算均方根误差\n$$\nE = \\left(\\frac{1}{N+1} \\sum_{i=0}^N \\left[u_{\\text{num}}(r_i,T) - u_{\\text{exact}}(r_i,T)\\right]^2 \\right)^{1/2}.\n$$\n- 对于测试 3，返回一个布尔值，指示数值解在所有网格点和直到（并包括）最终时间 $T$ 的所有时间步长中，其绝对值是否保持在 $10^6$ 以内且为有限值；如果保持有界和有限，则返回 $\\text{True}$，否则返回 $\\text{False}$。\n- 此外，对于测试 1，报告最终时间在原点处的绝对误差，\n$$\nE_0 = \\left|u_{\\text{num}}(0,T) - u_{\\text{exact}}(0,T)\\right|.\n$$\n\n最终输出格式：你的程序应生成单行输出，其中包含一个列表，按顺序有四个条目 $[E_{\\text{Test 1}}, E_{\\text{Test 2}}, \\text{Stable}_{\\text{Test 3}}, E_{0,\\text{Test 1}}]$，打印为用逗号分隔并用方括号括起来的列表（例如，$[0.00123,0.00111,True,0.00045]$）。所有输出均为无量纲实数，第三个条目是布尔值。本问题不涉及角度。不得使用或推断任何其他单位。", "solution": "问题陈述为一维球对称波动方程提出了一个定义明确的初边值问题。它在科学上是合理的、自洽的、客观的。所有用于验证的参数、条件和要求都已明确。所提供的基于 d'Alembert 公式的“精确”解适用于指定的模拟时间，因为在计算误差的测试案例中，来自外边界 $r=R$ 的反射没有时间影响解域。因此，该问题是有效的，我将着手解决。\n\n控制偏微分方程 (PDE) 是\n$$\nu_{tt} = c^2\\left(u_{rr} + \\frac{2}{r}u_r\\right)\n$$\n其中 $u=u(r,t)$，下标表示偏微分。项 $\\frac{2}{r}u_r$ 在原点 $r=0$ 处存在一个奇点，这在数值格式中需要特殊处理。\n\n处理此奇点的一个稳健且标准的方法是引入变量替换。令 $v(r,t) = r u(r,t)$。我们可以用 $v$ 来表示 $u$ 的偏导数：\n$$\nu = \\frac{v}{r} \\implies u_r = \\frac{v_r r - v}{r^2}, \\quad u_{rr} = \\frac{(v_{rr} r) r^2 - (v_r r - v) 2r}{r^4} = \\frac{v_{rr}}{r} - \\frac{2v_r}{r^2} + \\frac{2v}{r^3}\n$$\n将这些代入原始 PDE 可得：\n$$\n\\left(\\frac{v}{r}\\right)_{tt} = c^2\\left(\\left(\\frac{v_{rr}}{r} - \\frac{2v_r}{r^2} + \\frac{2v}{r^3}\\right) + \\frac{2}{r}\\left(\\frac{v_r r - v}{r^2}\\right)\\right)\n$$\n$$\n\\frac{v_{tt}}{r} = c^2\\left(\\frac{v_{rr}}{r} - \\frac{2v_r}{r^2} + \\frac{2v}{r^3} + \\frac{2v_r}{r^2} - \\frac{2v}{r^3}\\right)\n$$\n$$\n\\frac{v_{tt}}{r} = c^2 \\frac{v_{rr}}{r}\n$$\n对于 $r>0$，这简化为关于 $v(r,t)$ 的标准一维波动方程：\n$$\nv_{tt} = c^2 v_{rr}\n$$\n这种变换有效地移除了奇点。我们现在可以求解 $v(r,t)$，然后恢复 $u(r,t)$。\n\n接下来，我们必须将初始条件和边界条件从 $u$ 转换到 $v$：\n1.  **初始位移：** $v(r,0) = r u(r,0) = r \\left(\\frac{1}{r} f(r)\\right) = f(r)$。\n2.  **初始速度：** $v_t(r,0) = r u_t(r,0) = r \\cdot 0 = 0$。\n3.  **$r=R$ 处的边界条件：** $v(R,t) = R u(R,t) = R \\cdot 0 = 0$。\n4.  **$r=0$ 处的边界条件：** $u(r,t)$ 在原点处有限的要求意味着 $v(0,t) = \\lim_{r \\to 0} r u(r,t) = 0$。\n\n现在我们有了一个关于 $v(r,t)$ 在域 $[0,R]$ 上的一维波动方程的标准问题，其齐次 Dirichlet 边界条件为 $v(0,t)=v(R,t)=0$。我们可以使用时域有限差分 (FDTD) 方法在具有空间步长 $\\Delta r = R/N$ 和时间步长 $\\Delta t$ 的均匀网格上求解。设 $v_i^n \\approx v(i\\Delta r, n\\Delta t)$。对导数 $v_{tt}$ 和 $v_{rr}$ 使用二阶中心差分，我们得到显式蛙跳格式：\n$$\n\\frac{v_i^{n+1} - 2v_i^n + v_i^{n-1}}{(\\Delta t)^2} = c^2 \\frac{v_{i+1}^n - 2v_i^n + v_{i-1}^n}{(\\Delta r)^2}\n$$\n对 $v_i^{n+1}$ 求解，得到内部点（$i=1, \\dots, N-1$）的更新规则：\n$$\nv_i^{n+1} = 2v_i^n - v_i^{n-1} + \\lambda^2 (v_{i+1}^n - 2v_i^n + v_{i-1}^n)\n$$\n其中 $\\lambda = c \\Delta t / \\Delta r$ 是 Courant-Friedrichs-Lewy (CFL) 数。此格式在 $\\lambda \\le 1$ 时稳定。\n\n为了开始模拟，我们需要两个初始时间层（$n=0$ 和 $n=1$）的值。我们有 $v_i^0 = f(r_i)$。对于第一个时间步，我们对初始速度条件 $v_t(r,0)=0$ 使用中心差分：\n$$\n\\frac{v_i^1 - v_i^{-1}}{2\\Delta t} = 0 \\implies v_i^{-1} = v_i^1\n$$\n将此代入 $n=0$ 的主更新规则：\n$$\nv_i^1 = 2v_i^0 - v_i^{-1} + \\lambda^2(v_{i+1}^0 - 2v_i^0 + v_{i-1}^0) = 2v_i^0 - v_i^1 + \\lambda^2(v_{i+1}^0 - 2v_i^0 + v_{i-1}^0)\n$$\n$$\nv_i^1 = v_i^0 + \\frac{\\lambda^2}{2} (v_{i+1}^0 - 2v_i^0 + v_{i-1}^0)\n$$\n这提供了 $v_i^1$ 的值，从而可以进行时间步进。在所有时间步都强制执行边界条件 $v_0^n=0$ 和 $v_N^n=0$。\n\n将 $v_i^n$ 演化到最终时间 $T=M\\Delta t$ 后，我们必须重构解 $u_i^M$。\n-   对于内部点 $r_i > 0$ (即 $i=1, \\dots, N$), 重构是直接的：$u_i^M = v_i^M / r_i = v_i^M / (i\\Delta r)$。\n-   在原点 $r_0=0$ 处，我们有 $u(0,t) = \\lim_{r\\to 0} u(r,t) = \\lim_{r\\to 0} \\frac{v(r,t)}{r}$。由于 $v(0,t)=0$，这是 $v$ 在 $r=0$ 处关于 $r$ 的偏导数的定义。\n    $$\n    u(0,t) = \\left. \\frac{\\partial v}{\\partial r} \\right|_{r=0, t}\n    $$\n    我们可以使用中心差分来近似这个导数。根据 d'Alembert 解的结构，$v$ 必须是关于原点的奇函数。这意味着 $v(-\\Delta r, t) = -v(\\Delta r, t)$，所以 $v_{-1}^n = -v_1^n$。\n    $$\n    u_0^M = \\frac{v_1^M - v_{-1}^M}{2\\Delta r} = \\frac{v_1^M - (-v_1^M)}{2\\Delta r} = \\frac{2v_1^M}{2\\Delta r} = \\frac{v_1^M}{\\Delta r}\n    $$\n这就完成了数值方法。实现将遵循这种变量变换方法。对于测试 3，CFL 数 $\\lambda=1.05>1$，违反了稳定性条件；我们预计数值解会指数增长，这可以通过检查其幅值是否超过一个大阈值 ($10^6$) 来检测。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D spherically symmetric wave equation using an FDTD scheme\n    and evaluates results for three test cases.\n    \"\"\"\n\n    # Common parameters for all tests\n    c_param = 1.0\n    R_param = 2.0\n    rc_param = 0.6\n    sigma_param = 0.08\n    \n    # Test cases defined in the problem statement\n    test_cases = [\n        {'N': 400, 'cfl': 0.9, 'M': 50, 'id': 'Test 1'},\n        {'N': 400, 'cfl': 1.0, 'M': 50, 'id': 'Test 2'},\n        {'N': 300, 'cfl': 1.05, 'M': 200, 'id': 'Test 3'},\n    ]\n\n    # Helper functions for the exact solution\n    def f(r, rc, sigma):\n        \"\"\"Initial condition function f(r).\"\"\"\n        return r * np.exp(-(r - rc)**2 / (2 * sigma**2))\n\n    def f_tilde(x, rc, sigma):\n        \"\"\"Odd extension of f(r).\"\"\"\n        x = np.asarray(x)\n        # Use np.where to handle piecewise definition\n        positive_x = x[x >= 0]\n        negative_x = x[x < 0]\n        \n        # Explicitly define for positive and negative parts\n        f_pos = f(positive_x, rc, sigma)\n        f_neg = -f(-negative_x, rc, sigma)\n        \n        # Combine results\n        result = np.zeros_like(x)\n        result[x >= 0] = f_pos\n        result[x < 0] = f_neg\n        return result\n\n    def f_prime(r, rc, sigma):\n        \"\"\"Derivative of f(r).\"\"\"\n        factor = np.exp(-(r - rc)**2 / (2 * sigma**2))\n        return factor - r * (r - rc) / sigma**2 * factor\n\n    def get_u_exact(r_grid, t, c, rc, sigma):\n        \"\"\"Computes the exact solution u(r,t).\"\"\"\n        u_ex = np.zeros_like(r_grid)\n        \n        r_plus_ct = r_grid + c * t\n        r_minus_ct = r_grid - c * t\n        \n        v_exact_t = 0.5 * (f_tilde(r_minus_ct, rc, sigma) + f_tilde(r_plus_ct, rc, sigma))\n        \n        # For r > 0\n        mask_r_pos = r_grid > 0\n        u_ex[mask_r_pos] = v_exact_t[mask_r_pos] / r_grid[mask_r_pos]\n        \n        # For r = 0\n        u_ex[0] = f_prime(c * t, rc, sigma)\n        \n        return u_ex\n\n    def run_simulation(N, cfl, M, c, R, rc, sigma, check_stability=False):\n        \"\"\"\n        Runs the FDTD simulation for the transformed variable v = r*u.\n        \"\"\"\n        dr = R / N\n        dt = cfl * dr / c\n        r_grid = np.linspace(0, R, N + 1)\n        lambda_sq = (c * dt / dr)**2\n\n        # Arrays for v at n-1, n, n+1 time steps\n        v_prev = np.zeros(N + 1)\n        v_curr = f(r_grid, rc, sigma)\n\n        # Enforce boundary conditions on initial state v(r,0)\n        v_curr[0] = 0.0\n        v_curr[N] = 0.0\n        \n        v_prev[:] = v_curr\n\n        # First time step using v_t(r,0)=0\n        v_next = np.zeros(N + 1)\n        for i in range(1, N):\n            v_next[i] = v_curr[i] + 0.5 * lambda_sq * (v_curr[i+1] - 2 * v_curr[i] + v_curr[i-1])\n        # BCs for v_next are already 0\n        v_curr[:] = v_next\n\n        # Main FDTD loop\n        for _ in range(1, M):\n            # This must be a copy to not be a view\n            v_temp = v_curr.copy()\n            for i in range(1, N):\n                v_next[i] = 2.0 * v_curr[i] - v_prev[i] + lambda_sq * (v_curr[i+1] - 2.0 * v_curr[i] + v_curr[i-1])\n            \n            v_prev[:] = v_temp\n            v_curr[:] = v_next\n\n            if check_stability:\n                u_check = np.zeros(N + 1)\n                u_check[1:] = v_curr[1:] / r_grid[1:]\n                u_check[0] = v_curr[1] / dr\n                if np.any(np.abs(u_check) > 1e6) or np.any(np.isnan(u_check)):\n                    return False  # Unstable\n        \n        if check_stability:\n            return True # Stable\n\n        # Reconstruct u from v at final time\n        u_num = np.zeros(N + 1)\n        u_num[1:] = v_curr[1:] / r_grid[1:]\n        u_num[0] = v_curr[1] / dr\n        return u_num\n\n    results = {}\n    for case in test_cases:\n        N, cfl, M, case_id = case['N'], case['cfl'], case['M'], case['id']\n\n        if case_id == 'Test 3':\n            is_stable = run_simulation(N, cfl, M, c_param, R_param, rc_param, sigma_param, check_stability=True)\n            results['stable_test3'] = is_stable\n        else:\n            T_final = M * cfl * (R_param / N) / c_param\n            u_numerical = run_simulation(N, cfl, M, c_param, R_param, rc_param, sigma_param)\n            \n            r_points = np.linspace(0, R_param, N + 1)\n            u_analytical = get_u_exact(r_points, T_final, c_param, rc_param, sigma_param)\n\n            rms_error = np.sqrt(np.mean((u_numerical - u_analytical)**2))\n\n            if case_id == 'Test 1':\n                results['E_test1'] = rms_error\n                origin_error = np.abs(u_numerical[0] - u_analytical[0])\n                results['E0_test1'] = origin_error\n            elif case_id == 'Test 2':\n                results['E_test2'] = rms_error\n\n    # Assemble the final list in the required order\n    final_output = [\n        results['E_test1'],\n        results['E_test2'],\n        results['stable_test3'],\n        results['E0_test1']\n    ]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, final_output))}]\")\n\nsolve()\n```", "id": "2392876"}, {"introduction": "虽然线性方程是学习的基石，但自然界中更普遍的是非线性现象。本练习将引导你进入非线性波动方程的领域，并探索其数值稳定性。你将学习一种核心技术——“冻结系数”法，通过局部线性化来分析非线性格式的稳定性，并推导出一个基于最差情况的充分稳定条件，这项实践对于设计能够可靠模拟真实世界非线性动力学系统的求解器至关重要。 [@problem_id:2392905]", "problem": "您将分析并实现一个稳定性检查，该检查应用于求解一维非线性波动方程的显式中心差分格式。考虑非线性波动方程\n$$\nu_{tt}(x,t) = \\bigl(1 + \\alpha\\, u(x,t)\\bigr)\\, u_{xx}(x,t),\n$$\n该方程建立在均匀空间网格（间距为 $\\Delta x$）和均匀时间步长（$\\Delta t$）之上。设 $x_j = j\\,\\Delta x$ 且 $t^n = n\\,\\Delta t$，其中 $j,n$ 为整数。使用如下显式格式，其中系数在已知时间层 $t^n$ 上求值：\n$$\nu_{j}^{n+1} = 2\\,u_{j}^{n} - u_{j}^{n-1} + \\Delta t^2\\,\\bigl(1+\\alpha\\,u_{j}^{n}\\bigr)\\,\\frac{u_{j+1}^{n} - 2\\,u_{j}^{n} + u_{j-1}^{n}}{\\Delta x^2}.\n$$\n假设在所有网格点和时间层上，解的振幅存在一个已知界，即对于给定的 $M \\ge 0$，有 $|u_{j}^{n}| \\le M$。您的任务是：\n\n- 从有限差分的基本定义和线性常系数格式的傅里叶分析原理出发，围绕一个常数背景解 $u(x,t) \\equiv \\bar{u}$ 和小扰动，对上述显式格式进行线性化，并推导单个傅里叶模态对应的线性化放大关系式。在线性化过程中不要跳过步骤。\n- 根据该放大关系式，推导线性化格式的稳定性充分必要条件，该条件需用无量纲比率 $r = c\\,\\Delta t/\\Delta x$ 表示，其中 $c = \\sqrt{1+\\alpha\\,\\bar{u}}$ 是线性化后的有效波速。解释离散拉普拉斯算子的傅里叶符号在推导过程中的作用。\n- 仅使用给定的振幅界 $M$，将此条件转换为原始非线性格式的一个稳定性充分条件。展示如何获得一个关于 $\\Delta t$ 的保守不等式，以保证对于所有满足 $|u|\\le M$ 的容许状态，都有 $r \\le 1$。明确陈述并论证为避免偏微分方程类型发生改变而需要对系数 $\\bigl(1+\\alpha u\\bigr)$ 施加的额外要求。\n- 实现一个程序，对于每个参数元组 $(\\alpha, M, \\Delta x, \\Delta t)$，返回一个布尔值，用于指示您推导出的稳定性充分条件是否得到满足。请遵循以下约定：如果对于某个满足 $|u|\\le M$ 的 $u$，系数可能变为非正值，则结果为假。\n\n本问题中的所有量均为无量纲，因此不需要物理单位。不涉及角度。\n\n测试套件和要求的输出格式：\n- 使用以下五个测试用例，每个用例以元组 $(\\alpha, M, \\Delta x, \\Delta t)$ 的形式给出：\n  1. $(0.0,\\, 1.0,\\, 0.01,\\, 0.01)$\n  2. $(2.0,\\, 0.5,\\, 0.01,\\, 0.006)$\n  3. $(-3.0,\\, 0.2,\\, 0.01,\\, 0.008)$\n  4. $(150.0,\\, 0.02,\\, 0.005,\\, 0.001)$\n  5. $(-0.5,\\, 0.8,\\, 0.02,\\, 0.016908103)$\n- 您的程序应生成单行输出，其中包含一个按测试用例顺序排列、由逗号分隔且不含空格的列表，并用方括号括起来。例如，对于五个假设的结果，一个有效的输出格式是\n$[{\\rm True},{\\rm False},{\\rm True},{\\rm True},{\\rm False}]$\n- 您的程序必须且只能打印这样一行文本，不得包含任何其他内容。\n\n您的最终答案必须是一个完整、可运行的程序。", "solution": "问题陈述经评估有效。该问题有科学依据、适定且客观，是偏微分方程数值分析领域的一个标准问题。所有必需信息均已提供，任务定义明确。我们开始进行求解。\n\n任务是分析求解一维非线性波动方程的显式有限差分格式的稳定性。\n\n控制方程为：\n$$\nu_{tt}(x,t) = \\bigl(1 + \\alpha\\, u(x,t)\\bigr)\\, u_{xx}(x,t)\n$$\n显式中心差分格式由下式给出：\n$$\n\\frac{u_{j}^{n+1} - 2\\,u_{j}^{n} + u_{j}^{n-1}}{\\Delta t^2} = \\bigl(1+\\alpha\\,u_{j}^{n}\\bigr)\\,\\frac{u_{j+1}^{n} - 2\\,u_{j}^{n} + u_{j-1}^{n}}{\\Delta x^2}\n$$\n\n**步骤 1：线性化与放大关系式**\n\n我们进行 von Neumann 稳定性分析。此方法仅严格适用于线性常系数方程。因此，我们必须首先围绕一个常数基解 $u(x,t) \\equiv \\bar{u}$ 对该格式进行线性化。我们引入一个小扰动 $\\delta u(x,t)$，使得数值解为 $u_j^n = \\bar{u} + \\delta u_j^n$。\n\n将此代入格式中：\n$$\n\\frac{(\\bar{u} + \\delta u_{j}^{n+1}) - 2(\\bar{u} + \\delta u_{j}^{n}) + (\\bar{u} + \\delta u_{j}^{n-1})}{\\Delta t^2} = \\bigl(1+\\alpha(\\bar{u} + \\delta u_j^n)\\bigr)\\,\\frac{(\\bar{u} + \\delta u_{j+1}^{n}) - 2(\\bar{u} + \\delta u_{j}^{n}) + (\\bar{u} + \\delta u_{j-1}^{n})}{\\Delta x^2}\n$$\n常数项 $\\bar{u}$ 在等式两侧被消去。在左侧，$\\bar{u} - 2\\bar{u} + \\bar{u} = 0$。在右侧，空间差分算子内部，$\\bar{u} - 2\\bar{u} + \\bar{u} = 0$。关于扰动的方程变为：\n$$\n\\frac{\\delta u_{j}^{n+1} - 2\\,\\delta u_{j}^{n} + \\delta u_{j}^{n-1}}{\\Delta t^2} = \\bigl(1+\\alpha\\bar{u} + \\alpha\\,\\delta u_j^n\\bigr)\\,\\frac{\\delta u_{j+1}^{n} - 2\\,\\delta u_{j}^{n} + \\delta u_{j-1}^{n}}{\\Delta x^2}\n$$\n线性化要求舍去 $\\mathcal{O}((\\delta u)^2)$ 及更高阶的项。项 $(\\alpha\\,\\delta u_j^n) \\times (\\delta u_{j+1}^{n} - 2\\,\\delta u_{j}^{n} + \\delta u_{j-1}^{n})$ 是关于扰动的二阶项，因此被忽略。由此得到关于扰动 $\\delta u$ 的线性化常系数方程：\n$$\n\\frac{\\delta u_{j}^{n+1} - 2\\,\\delta u_{j}^{n} + \\delta u_{j}^{n-1}}{\\Delta t^2} = \\bigl(1+\\alpha\\bar{u}\\bigr)\\,\\frac{\\delta u_{j+1}^{n} - 2\\,\\delta u_{j}^{n} + \\delta u_{j-1}^{n}}{\\Delta x^2}\n$$\n现在我们通过考虑扰动的单个傅里叶模态试探解来分析此线性方程：\n$$\n\\delta u_j^n = \\hat{u}^n(k) e^{i k x_j} = g^n \\hat{u}_0 e^{i k j \\Delta x}\n$$\n其中 $k$ 是波数，$g$ 是每个时间步的放大因子。将此形式代入线性化格式中得到：\n$$\n\\frac{g^2 \\hat{u}^n e^{i k x_j} - 2g \\hat{u}^n e^{i k x_j} + \\hat{u}^n e^{i k x_j}}{\\Delta t^2} = \\bigl(1+\\alpha\\bar{u}\\bigr)\\,\\frac{\\hat{u}^n e^{i k x_{j+1}} - 2\\hat{u}^n e^{i k x_j} + \\hat{u}^n e^{i k x_{j-1}}}{\\Delta x^2}\n$$\n两边同除以 $\\hat{u}^n e^{i k x_j} = \\hat{u}^n e^{i k j \\Delta x}$ 可得符号放大关系式：\n$$\n\\frac{g^2 - 2g + 1}{\\Delta t^2} = \\bigl(1+\\alpha\\bar{u}\\bigr)\\,\\frac{e^{i k \\Delta x} - 2 + e^{-i k \\Delta x}}{\\Delta x^2}\n$$\n使用恒等式 $e^{i\\theta} + e^{-i\\theta} = 2\\cos\\theta$，我们有 $e^{i k \\Delta x} - 2 + e^{-i k \\Delta x} = 2\\cos(k\\Delta x) - 2$。再利用半角公式 $1-\\cos\\theta=2\\sin^2(\\theta/2)$，上式变为 $-4\\sin^2(k\\Delta x/2)$。放大关系式为：\n$$\ng^2 - 2g + 1 = -\\left(\\frac{\\Delta t}{\\Delta x}\\right)^2 \\bigl(1+\\alpha\\bar{u}\\bigr)\\, 4\\sin^2\\left(\\frac{k\\Delta x}{2}\\right)\n$$\n\n**步骤 2：线性化格式的稳定性条件**\n\n令 $c = \\sqrt{1+\\alpha\\bar{u}}$ 为有效局部波速（假设 $1+\\alpha\\bar{u} > 0$）。令 $r = c \\Delta t / \\Delta x$ 为无量纲的 Courant 数。放大关系式可重写为：\n$$\n(g-1)^2 = -4 r^2 \\sin^2\\left(\\frac{k\\Delta x}{2}\\right)\n$$\n整理后得到关于放大因子 $g$ 的二次方程：\n$$\ng^2 - \\left(2 - 4 r^2 \\sin^2\\left(\\frac{k\\Delta x}{2}\\right)\\right)g + 1 = 0\n$$\n为使格式稳定，对于任意波数 $k$，放大因子的模都不能超过 1，即 $|g| \\le 1$。该二次方程的形式为 $g^2 - 2Ag + 1 = 0$，其中 $A = 1 - 2r^2\\sin^2(k\\Delta x/2)$。其根为 $g = A \\pm \\sqrt{A^2 - 1}$。如果 $|A| > 1$，则其中一根的模将大于 1，导致不稳定。如果 $|A| \\le 1$，则根是一对位于单位圆上的共轭复数 $g = A \\pm i\\sqrt{1-A^2}$，其模 $|g| = \\sqrt{A^2 + (1-A^2)} = 1$。这种情况是稳定的（尽管非耗散）。\n因此，稳定性条件为 $|A| \\le 1$，即：\n$$\n-1 \\le 1 - 2r^2\\sin^2\\left(\\frac{k\\Delta x}{2}\\right) \\le 1\n$$\n右侧的不等式 $1 - 2r^2\\sin^2(k\\Delta x/2) \\le 1$ 意味着 $-2r^2\\sin^2(k\\Delta x/2) \\le 0$，此式恒成立。\n左侧的不等式给出了约束条件：\n$$\n-1 \\le 1 - 2r^2\\sin^2\\left(\\frac{k\\Delta x}{2}\\right) \\implies 2r^2\\sin^2\\left(\\frac{k\\Delta x}{2}\\right) \\le 2 \\implies r^2\\sin^2\\left(\\frac{k\\Delta x}{2}\\right) \\le 1\n$$\n这个不等式必须对所有可能的波数 $k$ 成立。最严格的情况（“最坏情况”模态）发生在 $\\sin^2(k\\Delta x/2)$ 达到其最大值 1 时，这对应于网格上可表示的最高频率模态 ($k\\Delta x = \\pi$)。因此，线性化格式的充分必要稳定性条件是：\n$$\nr^2 \\le 1 \\implies r \\le 1 \\implies \\frac{c\\,\\Delta t}{\\Delta x} \\le 1\n$$\n这就是 Courant-Friedrichs-Lewy (CFL) 条件。\n\n中心二阶空间差分算子 $\\delta_{xx}u_j = (u_{j+1} - 2u_j + u_{j-1})/\\Delta x^2$ 的傅里叶符号是 $\\widehat{\\delta_{xx}}(k) = (e^{ik\\Delta x} - 2 + e^{-ik\\Delta x})/\\Delta x^2 = -4\\sin^2(k\\Delta x/2)/\\Delta x^2$。稳定性条件 $r^2\\sin^2(k\\Delta x/2) \\le 1$ 可表示为 $-\\frac{1}{4}c^2\\Delta t^2 \\widehat{\\delta_{xx}}(k) \\le 1$。这表明稳定性由离散空间算子的谱性质决定，时间步长 $\\Delta t$ 受限于算子在最高波数处取得的最大特征值（按模）。\n\n**步骤 3：非线性格式的充分条件**\n\n前述分析适用于常系数 $c^2 = 1+\\alpha\\bar{u}$ 的情况。在非线性问题中，系数 $1+\\alpha u$ 随空间和时间变化。获得稳定性充分条件的一种标准技术是“冻结系数”法：我们要求局部 CFL 条件在每个点和每个时刻都成立，使用局部波速 $c(u_j^n) = \\sqrt{1+\\alpha u_j^n}$。为保证在所有时间都稳定，我们必须对计算域中可能出现的任何最大波速强制满足此条件。\n我们已知解是有界的：对于常数 $M \\ge 0$，有 $|u_j^n| \\le M$。波速的平方 $c^2(u) = 1+\\alpha u$ 必须在区间 $u \\in [-M, M]$ 上被最大化。\n函数 $1+\\alpha u$ 是关于 $u$ 的线性函数。其在 $[-M, M]$ 上的最大值在端点处取得：\n$$\nc_{\\max}^2 = \\max_{|u| \\le M} (1+\\alpha u) = 1 + \\alpha(\\mathrm{sgn}(\\alpha)M) = 1 + |\\alpha|M\n$$\n稳定性充分条件是，基于此最大波速的 CFL 数必须至多为 1：\n$$\n\\frac{c_{\\max}\\Delta t}{\\Delta x} \\le 1 \\implies \\frac{\\sqrt{1+|\\alpha|M}\\Delta t}{\\Delta x} \\le 1\n$$\n这为时间步长提供了一个保守的限制：\n$$\n\\Delta t \\le \\frac{\\Delta x}{\\sqrt{1+|\\alpha|M}}\n$$\n此外，为使控制偏微分方程保持双曲型（即波动方程），$u_{xx}$ 的系数必须严格为正。系数为零或为负将分别使方程类型变为抛物型或椭圆型，从而导致我们基于波动的分析失效。这一物理约束要求对所有容许的解值，都有 $1+\\alpha u > 0$。给定 $|u| \\le M$，我们必须确保对所有 $u \\in [-M, M]$ 该条件均成立。$1+\\alpha u$ 在此区间上的最小值为：\n$$\n\\min_{|u| \\le M} (1+\\alpha u) = 1 - |\\alpha|M\n$$\n因此，我们必须强制满足双曲性条件：\n$$\n1 - |\\alpha|M > 0\n$$\n根据问题的约定，如果此条件被违反（即 $1 - |\\alpha|M \\le 0$），则该参数配置被认为是不稳定的。\n\n综上所述，对于给定的参数集 $(\\alpha, M, \\Delta x, \\Delta t)$，程序实现必须检查两个条件：\n1. 双曲性：$1 - |\\alpha|M > 0$。若不成立，结果为 `False`。\n2. CFL 条件：$\\Delta t \\le \\Delta x / \\sqrt{1+|\\alpha|M}$。如果第一个条件满足，则检查此第二个条件。若该条件成立，结果为 `True`，否则为 `False`。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Analyzes the stability of a finite difference scheme for a nonlinear wave equation\n    based on a derived sufficient stability condition.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (alpha, M, delta_x, delta_t)\n    test_cases = [\n        (0.0, 1.0, 0.01, 0.01),\n        (2.0, 0.5, 0.01, 0.006),\n        (-3.0, 0.2, 0.01, 0.008),\n        (150.0, 0.02, 0.005, 0.001),\n        (-0.5, 0.8, 0.02, 0.016908103),\n    ]\n\n    results = []\n    for case in test_cases:\n        alpha, M, delta_x, delta_t = case\n        \n        abs_alpha = np.abs(alpha)\n\n        # Condition 1: Hyperbolicity\n        # The equation must remain hyperbolic for all |u| <= M.\n        # This requires the coefficient (1 + alpha*u) > 0.\n        # The minimum value of this coefficient is 1 - |alpha|*M.\n        # If 1 - |alpha|*M <= 0, the equation type can change, so the scheme is considered invalid.\n        if 1.0 - abs_alpha * M <= 0:\n            results.append(False)\n            continue\n\n        # Condition 2: Sufficient CFL Stability Condition\n        # The time step must be small enough to satisfy the CFL condition based on\n        # the maximum possible wave speed.\n        # c_max^2 = 1 + |alpha|*M\n        # dt <= dx / sqrt(c_max^2)\n        \n        c_max_sq = 1.0 + abs_alpha * M\n        delta_t_max = delta_x / np.sqrt(c_max_sq)\n        \n        # Check if the given time step satisfies the condition.\n        # A direct comparison is used, as is standard practice.\n        # For floating point, this is equivalent to dt < delta_t_max + epsilon.\n        if delta_t <= delta_t_max:\n            results.append(True)\n        else:\n            results.append(False)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2392905"}]}