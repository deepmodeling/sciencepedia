{"hands_on_practices": [{"introduction": "在计算流体力学中，保证数值方法的稳定性至关重要。本练习将带你实践 von Neumann 稳定性分析，这是一个评估离散格式稳定性的强大工具。通过对一个同时包含对流和反应过程的典型方程进行分析，你将揭示迎风格式如何与源项的显式处理相互作用，并共同决定数值解的稳定性，从而定量地计算出最大允许的时间步长。[@problem_id:2449011]", "problem": "考虑由偏微分方程 $$u_t + a\\,u_x = -\\epsilon\\,u,$$ 定义的一维线性对流-反应初值问题，其中 $u=u(x,t)$ 是无量纲量，$a$ 是一个常数平流速度，$\\epsilon \\ge 0$ 是一个常数反应（汇）系数。假设一个空间步长为 $\\Delta x$ 的均匀空间网格和一个时间步长为 $\\Delta t$ 的显式向前欧拉时间离散。对流项使用根据 $a$ 的符号选择的一阶迎风空间离散（如果 $a \\ge 0$ 则为左迎风，如果 $a < 0$ 则为右迎风），并显式处理汇项。所有量都是无量纲的，因此不需要物理单位。\n\n您的任务是：\n- 从守恒律解释以及常微分方程的向前欧拉法和空间平流的一阶迎风有限差分的定义出发，推导在网格点索引 $i$ 和时间层 $n$ 上的网格值 $u_i^n$ 的单步更新公式。然后，通过代入单模假设 $u_i^n = G^n \\exp(\\mathrm{i} k x_i)$ 进行傅里叶（von Neumann）稳定性分析，并推导放大因子 $G(k)$ 作为波数 $k$ 的函数。\n- 根据放大因子，确定线性稳定的充分必要条件，即 $\\max_k |G(k)| \\le 1$，用无量纲参数 $r = \\epsilon\\,\\Delta t$ 和 $\\sigma = |a|\\,\\Delta t / \\Delta x$ 表示。证明极端波数 $k = 0$ 和 $k = \\pi/\\Delta x$ 控制其界限，并获得最大稳定时间步长 $\\Delta t_{\\max}$ 作为 $a$、$\\epsilon$ 和 $\\Delta x$ 的函数的显式公式。\n- 定性解释分布汇（通过 $\\epsilon$）如何与迎风格式相互作用，从而改变允许的 Courant–Friedrichs–Lewy (CFL) 条件。\n\n程序规范：\n- 实现一个程序，对于下面列出的每个测试用例，计算您通过 von Neumann 分析得到的、针对所述的时间上显式向前欧拉和空间上一阶迎风格式的最大线性稳定时间步长 $\\Delta t_{\\max}$。\n- 使用以下参数三元组 $(a,\\epsilon,\\Delta x)$ 的测试套件：\n    - 测试 $1$：$(a,\\epsilon,\\Delta x) = (1.0, 0.5, 0.01)$。\n    - 测试 $2$：$(a,\\epsilon,\\Delta x) = (2.0, 0.0, 0.05)$。\n    - 测试 $3$：$(a,\\epsilon,\\Delta x) = (0.0, 4.0, 0.01)$。\n    - 测试 $4$：$(a,\\epsilon,\\Delta x) = (-3.0, 1.0, 0.02)$。\n    - 测试 $5$：$(a,\\epsilon,\\Delta x) = (0.75, 1.5, 0.10)$。\n- 您的程序应生成一行输出，其中包含用方括号括起来的逗号分隔列表形式的结果（例如，“[0.1, 0.2, 0.3]”）。输出列表必须按顺序包含测试 $1$到 $5$ 的五个 $\\Delta t_{\\max}$ 浮点数值。\n\n答案类型：\n- 每个测试用例的结果必须是一个浮点数。将五个结果汇总到如上所述的单个列表中，并打印在单行上。", "solution": "在尝试任何解答之前，需对问题陈述进行验证。\n\n### 第一步：提取已知条件\n- **偏微分方程 (PDE)**: $u_t + a\\,u_x = -\\epsilon\\,u$\n- **变量与常数**: $u=u(x,t)$ 是无量纲因变量，$a$ 是常数平流速度，$\\epsilon \\ge 0$ 是常数反应（汇）系数。\n- **离散参数**: $\\Delta x$ 是均匀空间网格步长，$\\Delta t$ 是时间步长。\n- **数值格式**:\n    - **时间积分**: 显式向前欧拉法。\n    - **空间离散**: 对流项 $a\\,u_x$ 采用一阶迎风格式。迎风方向取决于 $a$ 的符号。\n    - **源项处理**: 汇项 $-\\epsilon\\,u$ 采用显式处理。\n- **分析任务**: 执行 von Neumann 稳定性分析，求出放大因子 $G(k)$ 和稳定性条件 $\\max_k |G(k)| \\le 1$。\n- **推导任务**: 从稳定性条件推导出最大稳定时间步长 $\\Delta t_{\\max}$ 作为 $a$、$\\epsilon$ 和 $\\Delta x$ 的函数。\n- **定性任务**: 解释汇项和迎风离散对稳定性条件的相互作用。\n\n### 第二步：使用提取的已知条件进行验证\n- **科学依据**: 该问题基于一维线性对流-反应方程，这是输运现象中的一个基本模型。所指定的数值方法（向前欧拉法、一阶迎风法）和分析技术（von Neumann 稳定性）是计算工程和数值分析中的标准且严格定义的主题。该问题在科学和数学上是合理的。\n- **适定的**: 问题陈述清晰。PDE、数值格式和目标都得到了明确的定义。其结构能够导向一个唯一且有意义的解。\n- **客观性**: 问题以精确、客观的数学语言陈述。它不含主观论断或非科学内容。\n\n### 第三步：结论与行动\n该问题有效。它是偏微分方程数值方法中的一个标准的、适定的问题。将提供一个完整的解答。\n\n### 推导与分析\n\n控制偏微分方程为：\n$$\nu_t + a\\,u_x = -\\epsilon\\,u\n$$\n对于网格点 $i$，这可以重排为关于时间的常微分方程 (ODE) 的半离散形式：\n$$\n\\frac{d u_i}{d t} = -a (u_x)_i - \\epsilon u_i\n$$\n应用显式向前欧拉法进行时间积分，我们得到：\n$$\n\\frac{u_i^{n+1} - u_i^n}{\\Delta t} = -a (u_x)_i^n - \\epsilon u_i^n\n$$\n其中上标 $n$ 表示时间层 $t^n = n\\,\\Delta t$。单步更新公式为：\n$$\nu_i^{n+1} = u_i^n - a\\,\\Delta t\\,(u_x)_i^n - \\epsilon\\,\\Delta t\\,u_i^n\n$$\n接下来，我们使用一阶迎风格式对空间导数 $(u_x)_i^n$ 进行离散，这取决于平流速度 $a$ 的符号。\n\n**情况 1: 平流速度 $a \\ge 0$**\n迎风方向是向左（逆流），所以我们使用后向差分：\n$$\n(u_x)_i^n \\approx \\frac{u_i^n - u_{i-1}^n}{\\Delta x}\n$$\n将此代入更新公式得到：\n$$\nu_i^{n+1} = u_i^n - a\\,\\Delta t\\,\\left(\\frac{u_i^n - u_{i-1}^n}{\\Delta x}\\right) - \\epsilon\\,\\Delta t\\,u_i^n\n$$\n我们定义无量纲参数：Courant 数 $\\sigma = \\frac{|a|\\,\\Delta t}{\\Delta x}$ 和反应数 $r = \\epsilon\\,\\Delta t$。因为 $a \\ge 0$，所以 $|a|=a$。方程变为：\n$$\nu_i^{n+1} = u_i^n - \\sigma(u_i^n - u_{i-1}^n) - r\\,u_i^n = (1 - \\sigma - r)u_i^n + \\sigma u_{i-1}^n\n$$\n\n**情况 2: 平流速度 $a < 0$**\n迎风方向是向右，所以我们使用前向差分：\n$$\n(u_x)_i^n \\approx \\frac{u_{i+1}^n - u_i^n}{\\Delta x}\n$$\n将其代入更新公式：\n$$\nu_i^{n+1} = u_i^n - a\\,\\Delta t\\,\\left(\\frac{u_{i+1}^n - u_i^n}{\\Delta x}\\right) - \\epsilon\\,\\Delta t\\,u_i^n\n$$\n由于 $\\sigma = \\frac{|a|\\,\\Delta t}{\\Delta x} = \\frac{-a\\,\\Delta t}{\\Delta x}$，我们有 $a\\,\\Delta t = -\\sigma\\,\\Delta x$。方程变为：\n$$\nu_i^{n+1} = u_i^n - (-\\sigma\\,\\Delta x)\\,\\left(\\frac{u_{i+1}^n - u_i^n}{\\Delta x}\\right) - r\\,u_i^n = u_i^n + \\sigma(u_{i+1}^n - u_i^n) - r\\,u_i^n\n$$\n$$\nu_i^{n+1} = (1 - \\sigma - r)u_i^n + \\sigma u_{i+1}^n\n$$\n\n**傅里叶 (von Neumann) 稳定性分析**\n我们假设一个形式为 $u_i^n = G^n e^{\\mathrm{i} k x_i}$ 的单傅里叶模态解，其中 $x_i = i\\,\\Delta x$，$k$ 是波数，$\\mathrm{i} = \\sqrt{-1}$，$G(k)$ 是每个时间步长的复放大因子。\n\n对于 $a \\ge 0$：\n$$\nG^{n+1} e^{\\mathrm{i} k i \\Delta x} = (1 - \\sigma - r)G^n e^{\\mathrm{i} k i \\Delta x} + \\sigma G^n e^{\\mathrm{i} k (i-1) \\Delta x}\n$$\n除以 $G^n e^{\\mathrm{i} k i \\Delta x}$ 得到放大因子 $G$：\n$$\nG = (1 - \\sigma - r) + \\sigma e^{-\\mathrm{i} k \\Delta x}\n$$\n对于 $a < 0$：\n$$\nG^{n+1} e^{\\mathrm{i} k i \\Delta x} = (1 - \\sigma - r)G^n e^{\\mathrm{i} k i \\Delta x} + \\sigma G^n e^{\\mathrm{i} k (i+1) \\Delta x}\n$$\n除以 $G^n e^{\\mathrm{i} k i \\Delta x}$ 得到：\n$$\nG = (1 - \\sigma - r) + \\sigma e^{\\mathrm{i} k \\Delta x}\n$$\n令 $\\theta = k\\,\\Delta x$ 为无量纲波数。$G$ 的模的平方决定了稳定性。对于这两种情况，$|G|^2$ 具有相同的形式：\n$$\n|G(\\theta)|^2 = |(1 - \\sigma - r) + \\sigma(\\cos\\theta \\mp \\mathrm{i}\\sin\\theta)|^2 = \\left( (1 - \\sigma - r) + \\sigma\\cos\\theta \\right)^2 + (\\mp\\sigma\\sin\\theta)^2\n$$\n$$\n|G(\\theta)|^2 = (1 - \\sigma - r)^2 + 2\\sigma(1 - \\sigma - r)\\cos\\theta + \\sigma^2\\cos^2\\theta + \\sigma^2\\sin^2\\theta\n$$\n$$\n|G(\\theta)|^2 = (1 - \\sigma - r)^2 + \\sigma^2 + 2\\sigma(1 - \\sigma - r)\\cos\\theta\n$$\n当且仅当对于所有 $\\theta \\in [-\\pi, \\pi]$，有 $|G(\\theta)| \\le 1$ 时，该格式是线性稳定的。这等价于 $|G(\\theta)|^2 \\le 1$。$|G(\\theta)|^2$ 的表达式是 $\\cos\\theta$ 的线性函数。其极值出现在 $\\cos\\theta$ 的取值范围的边界上，即 $\\cos\\theta = 1$（对应 $\\theta = 0$, $k=0$）和 $\\cos\\theta = -1$（对应 $\\theta = \\pi$, $k=\\pi/\\Delta x$）。\n\n1.  **在 $\\theta = 0$ ($k=0$) 处:** $\\cos\\theta = 1$。\n    $$\n    |G(0)|^2 = (1 - \\sigma - r)^2 + \\sigma^2 + 2\\sigma(1 - \\sigma - r) = [(1 - \\sigma - r) + \\sigma]^2 = (1 - r)^2\n    $$\n    稳定性条件 $|G(0)|^2 \\le 1$ 意味着 $(1-r)^2 \\le 1$，即 $-1 \\le 1-r \\le 1$。\n    由于 $r = \\epsilon\\,\\Delta t \\ge 0$，不等式 $1-r \\le 1$ 总是成立的。另一个不等式 $-1 \\le 1-r$ 给出 $r \\le 2$。\n\n2.  **在 $\\theta = \\pi$ ($k=\\pi/\\Delta x$) 处:** $\\cos\\theta = -1$。\n    $$\n    |G(\\pi)|^2 = (1 - \\sigma - r)^2 + \\sigma^2 - 2\\sigma(1 - \\sigma - r) = [(1 - \\sigma - r) - \\sigma]^2 = (1 - 2\\sigma - r)^2\n    $$\n    稳定性条件 $|G(\\pi)|^2 \\le 1$ 意味着 $(1 - 2\\sigma - r)^2 \\le 1$，即 $-1 \\le 1 - 2\\sigma - r \\le 1$。\n    右边的不等式 $1 - 2\\sigma - r \\le 1$ 给出 $-2\\sigma - r \\le 0$，或 $2\\sigma + r \\ge 0$。由于 $\\sigma \\ge 0$ 且 $r \\ge 0$，这个条件总是满足的。\n    左边的不等式 $-1 \\le 1 - 2\\sigma - r$ 给出 $2\\sigma + r \\le 2$。\n\n**组合稳定性条件与最大时间步长**\n如果 $r \\le 2$ 和 $2\\sigma + r \\le 2$ 这两个条件都满足，则该格式是稳定的。由于 $\\sigma \\ge 0$，第二个条件 $2\\sigma + r \\le 2$ 意味着 $r \\le 2 - 2\\sigma \\le 2$。因此，$2\\sigma + r \\le 2$ 是稳定性的唯一充分必要条件。\n\n我们代入 $\\sigma$ 和 $r$ 的定义：\n$$\n2 \\left(\\frac{|a|\\,\\Delta t}{\\Delta x}\\right) + \\epsilon\\,\\Delta t \\le 2\n$$\n提出 $\\Delta t$ 因子：\n$$\n\\Delta t \\left( \\frac{2|a|}{\\Delta x} + \\epsilon \\right) \\le 2\n$$\n由此，我们推导出最大稳定时间步长 $\\Delta t_{\\max}$：\n$$\n\\Delta t_{\\max} = \\frac{2}{\\frac{2|a|}{\\Delta x} + \\epsilon}\n$$\n这个公式适用于所有情况，包括 $a=0$ 或 $\\epsilon=0$ 的情况。\n- 如果 $\\epsilon=0$ (纯平流)，$\\Delta t_{\\max} = \\frac{2}{2|a|/\\Delta x} = \\frac{\\Delta x}{|a|}$，这对应于经典 CFL 条件 $\\sigma \\le 1$。\n- 如果 $a=0$ (纯反应)，$\\Delta t_{\\max} = \\frac{2}{\\epsilon}$，这是向前欧拉法对 ODE $u'=-\\epsilon u$ 的稳定性极限，对应于 $r \\le 2$。\n\n**稳定性相互作用的定性解释**\n稳定性条件可以重写为 $\\sigma + r/2 \\le 1$。\n- 项 $\\sigma = |a|\\Delta t/\\Delta x$ 代表了对流项的显式迎风离散所带来的稳定性要求。单独来看，稳定性要求 $\\sigma \\le 1$。\n- 项 $r/2 = \\epsilon \\Delta t / 2$ 代表了对反应项进行显式处理所带来的稳定性要求。单独来看，稳定性要求 $r \\le 2$。\n\n组合条件 $\\sigma + r/2 \\le 1$ 表明，来自这两种现象的时间步长限制是累加的。虽然汇项 $-\\epsilon u$ 在物理上是耗散的并会衰减解，但其通过向前欧拉法的*显式*数值处理引入了其自身的时间步长约束。对于具有负实特征值的问题（刚性或耗散系统），向前欧拉法只是条件稳定的。对稳定性的总“需求”，由 Courant 数与反应数一半之和表示，不能超过 1。因此，显式处理的汇项（$\\epsilon > 0$）的存在使得总的时间步长限制比纯平流的 CFL 条件*更为严格*。时间步长必须足够小，以便在所选显式时间积分格式的限制内，同时稳定地解析平流和反应动力学。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the maximum linearly stable time step for a 1D convection-reaction\n    equation discretized with forward-Euler in time and first-order upwind in space.\n    \"\"\"\n    \n    # Test cases defined as tuples of (a, epsilon, delta_x)\n    test_cases = [\n        (1.0, 0.5, 0.01),   # Test 1\n        (2.0, 0.0, 0.05),   # Test 2\n        (0.0, 4.0, 0.01),   # Test 3\n        (-3.0, 1.0, 0.02),  # Test 4\n        (0.75, 1.5, 0.10)   # Test 5\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        a, epsilon, delta_x = case\n        \n        # The stability analysis yields the formula for the maximum stable time step:\n        # dt_max = 2 / (2*|a|/dx + epsilon)\n        \n        # Denominator of the formula\n        denominator = (2.0 * abs(a) / delta_x) + epsilon\n        \n        # Calculate the maximum stable time step.\n        # This formula correctly handles the edge cases where a=0 or epsilon=0.\n        # If the denominator is zero (a=0 and epsilon=0), the PDE is u_t = 0,\n        # which is unconditionally stable. The time step would be infinite,\n        # but this case is not in the test suite.\n        if denominator == 0.0:\n            # This case corresponds to a=0 and epsilon=0.\n            # The scheme is unconditionally stable for u_t = 0.\n            # Representing this as infinity.\n            dt_max = float('inf')\n        else:\n            dt_max = 2.0 / denominator\n            \n        results.append(dt_max)\n\n    # Format the output as a comma-separated list of floating-point numbers\n    # enclosed in square brackets.\n    output_str = f\"[{','.join(map(str, results))}]\"\n    \n    print(output_str)\n\nsolve()\n```", "id": "2449011"}, {"introduction": "一阶迎风格式的稳定性并非没有代价，这个代价通常表现为“数值扩散”，它会像物理扩散一样使解中的陡峭梯度变得平滑。本练习通过一个巧妙的“逆问题”深化你对这一核心概念的理解。你将不再是去预测一个已知格式产生的误差，而是要根据一个已被模糊化的数值解轮廓，反推出未知格式的等效数值扩散系数 $μ_{\\text{num}}$，从而将抽象的数值误差概念转化为一个具体的、可量化的物理属性。[@problem_id:2449005]", "problem": "考虑一个标量场的一维线性平流，它在实数轴上由方程 $u_t + a\\,u_x = 0$ 控制，其黎曼阶跃初始条件为：当 $x < x_0$ 时 $u(x,0) = u_L$，当 $x > x_0$ 时 $u(x,0) = u_R$，其中 $a > 0$ 为常数。使用一个未知但稳定的迎风有限差分格式，在间距为 $\\Delta x$ 的均匀网格上，以时间步长 $\\Delta t$ 计算最终时刻 $T$ 的数值解。Courant–Friedrichs–Lewy (CFL) 数为 $\\nu = a\\,\\Delta t / \\Delta x$。仅告知您以下信息：该格式的主阶修正方程可以很好地由常系数平流-扩散方程 $u_t + a\\,u_x = \\mu_{\\text{num}}\\,u_{xx}$ 建模，其中数值扩散系数 $\\mu_{\\text{num}} \\ge 0$ 未知。并且，在时刻 $T$ 报告的数值输出已被变换到随动坐标系中，使得坐标 $\\xi = x - (x_0 + a\\,T)$ 将平流间断名义上置于 $\\xi = 0$ 处。\n\n将观测剖面的 $10$–$90$ 厚度 $\\delta_{10\\text{–}90}$ 定义为 $u$ 分别达到 $u = u_R + 0.1\\,(u_L - u_R)$ 和 $u = u_R + 0.9\\,(u_L - u_R)$ 这两个水平时所对应的两个 $\\xi$ 位置之差。假设观测窗口足够大，以至于边界效应可以忽略不计。在这些假设下，为下面每个独立的测试配置估计 $\\mu_{\\text{num}}$ 的值。\n\n所有量均为无量纲；不需要物理单位。\n\n测试套件（每个条目都是一个独立的案例）：\n- 案例 A (一般情况): $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.005$, $\\nu = 0.5$, $T = 0.2$, $u_L = 1$, $u_R = 0$, 测得的 $\\delta_{10\\text{–}90} = 0.08105244$。\n- 案例 B (具有最小耗散的边界情况): $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.01$, $\\nu = 1$, $T = 0.2$, $u_L = 1$, $u_R = 0$, 测得的 $\\delta_{10\\text{–}90} = 0$。\n- 案例 C (更强的耗散): $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.002$, $\\nu = 0.2$, $T = 0.1$, $u_L = 1$, $u_R = 0$, 测得的 $\\delta_{10\\text{–}90} = 0.07249550416$。\n\n您的程序必须为每个案例计算与给定数据和假设一致的 $\\mu_{\\text{num}}$ 的单个标量估计值，并按指定格式汇总这三个结果。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含三个估计值，按案例 A、案例 B、案例 C 的顺序，以逗号分隔的列表形式并用方括号括起来（例如，$[result1,result2,result3]$）。", "solution": "首先对问题陈述进行严格的验证过程。\n\n**步骤 1：提取已知条件**\n- 控制偏微分方程 (PDE): $u_t + a\\,u_x = 0$\n- 初始条件：黎曼阶跃，$u(x,0) = u_L$ for $x < x_0$ 且 $u(x,0) = u_R$ for $x > x_0$。\n- 平流速度: $a > 0$，常数。\n- 数值格式：一个未指定但稳定的迎风有限差分格式。\n- 离散化参数：网格间距 $\\Delta x$，时间步长 $\\Delta t$，Courant–Friedrichs–Lewy (CFL) 数 $\\nu = a\\,\\Delta t / \\Delta x$。\n- 主阶修正方程: $u_t + a\\,u_x = \\mu_{\\text{num}}\\,u_{xx}$，其中数值扩散系数 $\\mu_{\\text{num}} \\ge 0$。\n- 最终时刻: $T$。\n- 随动坐标: $\\xi = x - (x_0 + a\\,T)$。\n- 剖面厚度的定义: $\\delta_{10\\text{–}90}$ 是 $u = u_R + 0.1\\,(u_L - u_R)$ 和 $u = u_R + 0.9\\,(u_L - u_R)$ 处 $\\xi$ 坐标之差。\n- 测试案例 A: $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.005$, $\\nu = 0.5$, $T = 0.2$, $u_L = 1$, $u_R = 0$, 测得的 $\\delta_{10\\text{–}90} = 0.08105244$。\n- 测试案例 B: $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.01$, $\\nu = 1$, $T = 0.2$, $u_L = 1$, $u_R = 0$, 测得的 $\\delta_{10\\text{–}90} = 0$。\n- 测试案例 C: $a = 1$, $\\Delta x = 0.01$, $\\Delta t = 0.002$, $\\nu = 0.2$, $T = 0.1$, $u_L = 1$, $u_R = 0$, 测得的 $\\delta_{10\\text{–}90} = 0.07249550416$。\n\n**步骤 2：验证提取的已知条件**\n该问题具有科学依据，因为它基于使用修正方程分析双曲守恒律数值格式耗散误差的标准概念。平流-扩散方程是一阶迎风格式的正确主阶模型。该问题是适定的、客观的、自洽的，提供了推导所测剖面厚度与未知数值扩散系数之间关系所需的所有信息。为每个测试案例提供的数据是内部一致的，例如，对于案例 A，$a\\,\\Delta t / \\Delta x = 1 \\times 0.005 / 0.01 = 0.5$，与给定的 $\\nu = 0.5$ 相匹配。该问题没有可识别的缺陷。\n\n**步骤 3：结论与行动**\n问题有效。将基于第一性原理推导解决方案。\n\n基本原理是，在时刻 $T$ 观测到的数值解，可由带有指定阶跃初始条件的修正平流-扩散方程 $u_t + a\\,u_x = \\mu_{\\text{num}}\\,u_{xx}$ 的解析解来近似。我们将推导这个解析解，用它来表示厚度 $\\delta_{10\\text{–}90}$ 作为 $\\mu_{\\text{num}}$ 和 $T$ 的函数，然后反演这个关系以求得 $\\mu_{\\text{num}}$。\n\n首先，我们将偏微分方程变换到一个随动参考系 $\\eta = x - a t$ 中。空间和时间导数变换为 $\\partial/\\partial x \\to \\partial/\\partial \\eta$ 和 $\\partial/\\partial t \\to \\partial/\\partial t - a\\,\\partial/\\partial \\eta$。将这些代入修正方程得到：\n$$\n(\\frac{\\partial u}{\\partial t} - a\\frac{\\partial u}{\\partial \\eta}) + a(\\frac{\\partial u}{\\partial \\eta}) = \\mu_{\\text{num}}\\frac{\\partial^2 u}{\\partial \\eta^2}\n$$\n这在移动坐标系中简化为标准的一维热（或扩散）方程：\n$$\n\\frac{\\partial u}{\\partial t} = \\mu_{\\text{num}}\\frac{\\partial^2 u}{\\partial \\eta^2}\n$$\n初始条件 $u(x,0) = u_L$ for $x < x_0$ 和 $u(x,0) = u_R$ for $x > x_0$ 在一个平移后的坐标系 $\\eta' = x - x_0 - at$ 中，变为在 $\\eta'=0$ 处的一个阶跃：当 $\\eta' < 0$ 时 $u(\\eta',0) = u_L$，当 $\\eta' > 0$ 时 $u(\\eta',0) = u_R$。对于此类初始数据，热方程的众所周知的解可用互补误差函数 $\\text{erfc}(z)$ 表示：\n$$\nu(\\eta', t) = u_R + \\frac{u_L - u_R}{2} \\text{erfc}\\left(\\frac{\\eta'}{\\sqrt{4 \\mu_{\\text{num}} t}}\\right)\n$$\n问题在坐标 $\\xi = x - (x_0 + aT)$ 中指定了最终观测。在最终时刻 $t=T$，坐标 $\\eta'$ 为 $\\eta' = x - x_0 - aT$，这与 $\\xi$ 完全相同。因此，时刻 $T$ 的解的剖面为：\n$$\nu(\\xi, T) = u_R + \\frac{u_L - u_R}{2} \\text{erfc}\\left(\\frac{\\xi}{\\sqrt{4 \\mu_{\\text{num}} T}}\\right)\n$$\n接下来，我们使用 $\\delta_{10\\text{–}90}$ 的定义。我们必须找到与解的值 $u = u_R + 0.9\\,(u_L - u_R)$ 和 $u = u_R + 0.1\\,(u_L - u_R)$ 相对应的位置 $\\xi_{90}$ 和 $\\xi_{10}$。\n对于 $90\\%$ 水平（在 $\\xi_{90}$ 处）：\n$$\nu_R + 0.9(u_L - u_R) = u_R + \\frac{u_L - u_R}{2} \\text{erfc}\\left(\\frac{\\xi_{90}}{\\sqrt{4 \\mu_{\\text{num}} T}}\\right)\n$$\n$$\n0.9 = \\frac{1}{2} \\text{erfc}(z_{90}) \\implies \\text{erfc}(z_{90}) = 1.8 \\implies 1 - \\text{erf}(z_{90}) = 1.8 \\implies \\text{erf}(z_{90}) = -0.8\n$$\n其中 $z_{90} = \\xi_{90} / \\sqrt{4 \\mu_{\\text{num}} T}$。因此，$z_{90} = \\text{erf}^{-1}(-0.8) = -\\text{erf}^{-1}(0.8)$。\n\n对于 $10\\%$ 水平（在 $\\xi_{10}$ 处）：\n$$\nu_R + 0.1(u_L - u_R) = u_R + \\frac{u_L - u_R}{2} \\text{erfc}\\left(\\frac{\\xi_{10}}{\\sqrt{4 \\mu_{\\text{num}} T}}\\right)\n$$\n$$\n0.1 = \\frac{1}{2} \\text{erfc}(z_{10}) \\implies \\text{erfc}(z_{10}) = 0.2 \\implies 1 - \\text{erf}(z_{10}) = 0.2 \\implies \\text{erf}(z_{10}) = 0.8\n$$\n其中 $z_{10} = \\xi_{10} / \\sqrt{4 \\mu_{\\text{num}} T}$。因此，$z_{10} = \\text{erf}^{-1}(0.8)$。\n\n由此，我们求得位置：\n$$\n\\xi_{90} = \\sqrt{4 \\mu_{\\text{num}} T} \\cdot z_{90} = -\\sqrt{4 \\mu_{\\text{num}} T} \\cdot \\text{erf}^{-1}(0.8)\n$$\n$$\n\\xi_{10} = \\sqrt{4 \\mu_{\\text{num}} T} \\cdot z_{10} = \\sqrt{4 \\mu_{\\text{num}} T} \\cdot \\text{erf}^{-1}(0.8)\n$$\n由于 $u_L > u_R$，解的剖面随着 $\\xi$ 的增加而减小，所以 $\\xi_{10} > \\xi_{90}$。厚度 $\\delta_{10\\text{–}90}$ 定义为这些位置之差：\n$$\n\\delta_{10\\text{–}90} = \\xi_{10} - \\xi_{90} = 2 \\sqrt{4 \\mu_{\\text{num}} T} \\cdot \\text{erf}^{-1}(0.8) = 4 \\sqrt{\\mu_{\\text{num}} T} \\cdot \\text{erf}^{-1}(0.8)\n$$\n我们现在反演这个表达式来求解 $\\mu_{\\text{num}}$：\n$$\n\\sqrt{\\mu_{\\text{num}}} = \\frac{\\delta_{10\\text{–}90}}{4 \\sqrt{T} \\cdot \\text{erf}^{-1}(0.8)}\n$$\n$$\n\\mu_{\\text{num}} = \\left( \\frac{\\delta_{10\\text{–}90}}{4 \\sqrt{T} \\cdot \\text{erf}^{-1}(0.8)} \\right)^2 = \\frac{\\delta_{10\\text{–}90}^2}{16 \\cdot T \\cdot (\\text{erf}^{-1}(0.8))^2}\n$$\n这就是估计 $\\mu_{\\text{num}}$ 的最终公式。该公式将应用于每个测试案例。\n对于案例 B，$\\delta_{10\\text{–}90} = 0$，这立即得出 $\\mu_{\\text{num}} = 0$。这在物理上是正确的，因为对于一阶迎风格式，CFL 数 $\\nu=1$ 会导致精确平流，数值扩散为零。\n对于案例 A 和 C，我们将提供的 $\\delta_{10\\text{–}90}$ 和 $T$ 的值代入推导出的公式。常数 $\\text{erf}^{-1}(0.8)$ 是一个已知的数值。\n计算过程如下：\n- 令 $C = \\text{erf}^{-1}(0.8) \\approx 0.9061938$。\n- 案例 A: $\\mu_{\\text{num,A}} = \\frac{(0.08105244)^2}{16 \\cdot 0.2 \\cdot C^2} = 0.0025$。\n- 案例 B: $\\mu_{\\text{num,B}} = \\frac{0^2}{16 \\cdot 0.2 \\cdot C^2} = 0$。\n- 案例 C: $\\mu_{\\text{num,C}} = \\frac{(0.07249550416)^2}{16 \\cdot 0.1 \\cdot C^2} = 0.004$。\n这些值构成了问题的解。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import erfinv\n\ndef solve():\n    \"\"\"\n    Computes the numerical diffusivity mu_num for each test case based on the \n    analytical solution to the advection-diffusion equation.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (measured_delta_10_90, final_time_T)\n    test_cases = [\n        (0.08105244, 0.2),       # Case A\n        (0.0, 0.2),              # Case B\n        (0.07249550416, 0.1)     # Case C\n    ]\n\n    results = []\n\n    # Pre-calculate the constant C_erf = erf_inv(0.8)\n    # This value is derived from the definition of the 10-90 thickness.\n    try:\n        C_erf = erfinv(0.8)\n    except NameError:\n        # Fallback in case scipy is not available, though problem spec guarantees it.\n        # This constant is approximately 0.9061938024368232.\n        # This fallback is for robustness and not expected to be used.\n        C_erf = 0.9061938024368232\n\n    # The formula for mu_num is derived from the analytical solution:\n    # delta = 4 * sqrt(mu_num * T) * C_erf\n    # mu_num = delta^2 / (16 * T * C_erf^2)\n\n    for delta, T in test_cases:\n        # Handle the special case where delta is zero, corresponding to no numerical\n        # diffusion (e.g., when CFL=1 for first-order upwind).\n        # This also avoids any potential floating point inaccuracies.\n        if delta == 0.0:\n            mu_num = 0.0\n        else:\n            # Apply the derived formula to estimate the numerical diffusivity.\n            mu_num = delta**2 / (16 * T * C_erf**2)\n        \n        results.append(mu_num)\n\n    # The problem asks for the results as a comma-separated list in brackets.\n    # The default string conversion for floats is sufficient here.\n    # Example: [0.0025, 0.0, 0.004]\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2449005"}, {"introduction": "从线性问题到非线性问题的跨越是计算科学中的关键一步，因为真实的物理现象往往是非线性的。本练习将引导你进入非线性流动的世界，通过求解经典的伯格斯方程 (Burgers' equation) 来处理激波和稀疏波的复杂相互作用。你将学习如何应用为非线性问题设计的 Engquist-Osher 迎风格式，并验证其总变差不增 (Total Variation Diminishing, TVD) 的重要性质，从而亲身体验迎风类格式在捕捉不连续解时的鲁棒性和必要性。[@problem_id:2449012]", "problem": "考虑具有非线性平流速度的一维标量守恒律，\n$$\nu_t + a(u)\\,u_x = 0,\n$$\n该方程定义在空间域 $[-1,1]$ 和时间 $t \\ge 0$ 上。使用通量形式\n$$\nu_t + \\partial_x f(u) = 0,\\quad \\text{with } f'(u)=a(u).\n$$\n令非线性平流速度为 $a(u)=u$，即通量为 $f(u)=\\tfrac{1}{2}u^2$ 的无粘伯格斯方程。初始数据为分段常数三态配置\n$$\nu(x,0) = \\begin{cases}\nu_L, & x &lt; x_L,\\\\\nu_M, & x_L \\le x &lt; x_R,\\\\\nu_R, & x \\ge x_R,\n\\end{cases}\n$$\n其中 $u_L=2$, $u_M=-1$, $u_R=0$, $x_L=-0.2$，$x_R=0.2$。该配置在每个间断处产生与特征线法一致的左行波或右行波：当特征线汇合时（左侧状态大于右侧状态）产生激波，当特征线发散时（左侧状态小于右侧状态）产生稀疏波。对于无粘伯格斯方程，连接常数态 $u_-$ 到 $u_+$ 的激波的 Rankine–Hugoniot 速度为\n$$\ns = \\frac{f(u_-) - f(u_+)}{u_- - u_+},\n$$\n而稀疏波则通过一个自相似扇形区连接两个状态，该扇形区由速度为 $a(u_-)$ 和 $a(u_+)$ 的特征线界定。\n\n您的任务是：\n- 根据守恒形式和特征结构，推导一个场景：在左界面 $x=x_L$ 处形成激波，在右界面 $x=x_R$ 处形成稀疏波。证明激波和稀疏波相互移动，并在波到达计算边界 $x=-1$ 和 $x=1$ 之前，于有限时间 $t_c$ 发生碰撞。你的推理过程仅能使用守恒律的基本定义、Rankine–Hugoniot 条件以及特征速度 $a(u)$。\n- 实现一个一阶有限体积法，该方法使用适用于非线性 $a(u)$ 的迎风数值通量，具体为基于 $f'(u)$ 符号构建的 Engquist–Osher 通量：\n  - 令 $f(u)=\\tfrac{1}{2}u^2$ 且 $a(u)=f'(u)=u$。\n  - 定义\n    $$\n    F^{+}(u) = \\int_{0}^{u} \\max(a(s),0)\\,ds = \\tfrac{1}{2}\\max(u,0)^2,\\quad\n    F^{-}(u) = \\int_{0}^{u} \\min(a(s),0)\\,ds = \\tfrac{1}{2}\\min(u,0)^2,\n    $$\n    并且界面处左右状态为 $u_L$ 和 $u_R$ 的数值通量为\n    $$\n    \\widehat{f}(u_L,u_R) = F^{+}(u_L) + F^{-}(u_R).\n    $$\n  - 在 $[-1,1]$ 上使用包含 $N$ 个单元的均匀网格，通过常数外推实现透射（出流）边界，并使用显式欧拉时间积分器。\n  - 在每一步通过 Courant–Friedrichs–Lewy (CFL) 条件和自适应时间步长来保证稳定性\n    $$\n    \\Delta t = \\text{CFL}\\cdot \\frac{\\Delta x}{\\max_i |a(u_i)|} = \\text{CFL}\\cdot \\frac{\\Delta x}{\\max_i |u_i|},\n    $$\n    最终时间设为 $t_{\\text{final}}=0.4$。\n- 使用相同方法在 $N_{\\text{ref}}=6400$ 和 $\\text{CFL}=0.5$ 的细网格上构建一个高分辨率参考解，并计算至相同的 $t_{\\text{final}}$。为了在粗网格上进行比较，通过对每个粗网格单元内 $m=N_{\\text{ref}}/N$ 个细网格单元值进行精确平均，来计算参考解在粗网格上的单元平均值一致的限制（假设 $N$ 能整除 $N_{\\text{ref}}$）。\n- 对于下面指定的每个测试用例，计算：\n  1. $t_{\\text{final}}$ 时刻的离散 $\\ell^1$ 误差，\n     $$\n     E_1 = \\sum_{i=1}^{N} \\Delta x \\,\\big|u_i^{\\text{num}}(t_{\\text{final}}) - u_i^{\\text{ref}\\to \\text{coarse}}(t_{\\text{final}})\\big|.\n     $$\n  2. 一个布尔值，指示总变差是否不增，\n     $$\n     \\mathrm{TV}(u) = \\sum_{i=1}^{N-1} |u_{i+1} - u_i|,\n     $$\n     即，如果 $\\mathrm{TV}(u(\\cdot,t_{\\text{final}})) \\le \\mathrm{TV}(u(\\cdot,0)) + 10^{-10}$ 则报告 $\\mathrm{True}$，否则报告 $\\mathrm{False}$。\n\n测试套件：\n- 用例 A (理想路径): $N=200$, $\\text{CFL}=0.5$, $t_{\\text{final}}=0.4$。\n- 用例 B (接近 CFL 极限): $N=200$, $\\text{CFL}=0.95$, $t_{\\text{final}}=0.4$。\n- 用例 C (加密网格): $N=800$, $\\text{CFL}=0.5$, $t_{\\text{final}}=0.4$。\n\n你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。每个测试用例对应一个包含两个元素的子列表 $[E_1,\\text{TV\\_nonincrease}]$。例如，输出格式必须为\n`[[E_{1,A}, TV_A], [E_{1,B}, TV_B], [E_{1,C}, TV_C]]`,\n其中误差为浮点数，总变差标志为布尔值。不应打印任何其他文本。", "solution": "所述问题需要经过验证。\n\n**步骤 1：提取已知条件**\n-   **控制方程**：非线性标量守恒律 $u_t + \\partial_x f(u) = 0$。\n-   **通量函数**：$f(u) = \\frac{1}{2}u^2$，对应于平流速度为 $a(u) = f'(u) = u$ 的无粘伯格斯方程。\n-   **域**：$x \\in [-1, 1]$，$t \\ge 0$。\n-   **初始条件**：一个三态分段常数函数：\n    $$\n    u(x,0) = \\begin{cases}\n    u_L=2, & x < x_L = -0.2, \\\\\n    u_M=-1, & x_L \\le x < x_R = 0.2, \\\\\n    u_R=0, & x \\ge x_R.\n    \\end{cases}\n    $$\n-   **激波速度**：Rankine-Hugoniot 条件 $s = \\frac{f(u_-) - f(u_+)}{u_- - u_+}$。\n-   **数值方法**：采用 Engquist-Osher 数值通量的一阶有限体积法。\n    -   **通量定义**：$\\widehat{f}(u_L,u_R) = F^{+}(u_L) + F^{-}(u_R)$，其中 $F^{+}(u) = \\tfrac{1}{2}\\max(u,0)^2$ 且 $F^{-}(u) = \\tfrac{1}{2}\\min(u,0)^2$。\n    -   **网格**：包含 $N$ 个单元的均匀网格。\n    -   **边界**：通过常数外推实现的透射（出流）边界。\n    -   **时间积分**：采用自适应时间步长 $\\Delta t = \\text{CFL}\\cdot \\frac{\\Delta x}{\\max_i |u_i|}$ 的显式欧拉法。\n    -   **最终时间**：$t_{\\text{final}}=0.4$。\n-   **参考解**：使用 $N_{\\text{ref}}=6400$ 和 $\\text{CFL}=0.5$ 计算。到粗网格的限制通过单元平均实现。\n-   **输出**：\n    1.  离散 $\\ell^1$ 误差：$E_1 = \\sum_{i=1}^{N} \\Delta x \\,|u_i^{\\text{num}} - u_i^{\\text{ref}\\to \\text{coarse}}|$。\n    2.  总变差不增检查：$\\mathrm{TV}(u(t_{\\text{final}})) \\le \\mathrm{TV}(u(0)) + 10^{-10}$。\n-   **测试用例**：\n    -   A: $N=200$, $\\text{CFL}=0.5$。\n    -   B: $N=200$, $\\text{CFL}=0.95$。\n    -   C: $N=800$, $\\text{CFL}=0.5$。\n\n**步骤 2：使用提取的已知条件进行验证**\n该问题具有科学依据、提法恰当且客观。它涉及标准的无粘伯格斯方程，这是流体动力学中的一个基本模型。初始条件是一组黎曼问题，其解是经典的。所规定的数值方法（采用 Engquist-Osher 通量的一阶有限体积法）是适用于此类问题的标准单调格式。稳定性条件 (CFL)、误差度量 (\\ell^1 范数) 和属性分析 (总变差) 都是偏微分方程数值分析的标准组成部分。所有必要的数据和定义都已提供，不存在矛盾。\n\n**步骤 3：结论与行动**\n问题有效。将提供完整的解决方案。\n\n**第一部分：解析波结构和相互作用**\n\n初始数据包含两个间断，定义了两个黎曼问题。我们分别分析每一个。\n\n**1. 位于 $x_L = -0.2$ 的左界面：**\n状态为 $u_- = u_L = 2$ 和 $u_+ = u_M = -1$。特征速度为 $a(u_-) = 2$ 和 $a(u_+) = -1$。由于 $u_- > u_+$，特征线汇合，间断演变为一个激波。其速度 $s_L$ 由 Rankine-Hugoniot 条件确定：\n$$\ns_L = \\frac{f(u_L) - f(u_M)}{u_L - u_M} = \\frac{\\frac{1}{2}u_L^2 - \\frac{1}{2}u_M^2}{u_L - u_M} = \\frac{1}{2}(u_L + u_M)\n$$\n代入给定值：\n$$\ns_L = \\frac{1}{2}(2 + (-1)) = \\frac{1}{2} = 0.5\n$$\n激波速度为正，因此激波阵面向右移动。其在时间 $t$ 的位置由 $x_s(t) = x_L + s_L t = -0.2 + 0.5t$ 给出。\n\n**2. 位于 $x_R = 0.2$ 的右界面：**\n状态为 $u_- = u_M = -1$ 和 $u_+ = u_R = 0$。特征速度为 $a(u_-) = -1$ 和 $a(u_+) = 0$。由于 $u_- < u_+$，特征线发散，间断分解为稀疏波。这是一个自相似解，形式为 $u(x,t) = (x-x_{R})/t$，适用于波扇区内的 $x$。稀疏波扇区由源于间断的最慢和最快特征线界定。\n-   扇区的左边缘以速度 $a(u_M) = u_M = -1$ 移动。其位置为 $x_{r,left}(t) = x_R + a(u_M) t = 0.2 - t$。\n-   扇区的右边缘以速度 $a(u_R) = u_R = 0$ 移动。其位置为 $x_{r,right}(t) = x_R + a(u_R) t = 0.2$。\n\n**3. 激波-稀疏波碰撞：**\n源于 $x_L$ 的激波向右移动。源于 $x_R$ 的稀疏波扇区扩张，其左前缘向左移动。这两个波相互靠近。当位于 $x_s(t)$ 的激波阵面与位于 $x_{r,left}(t)$ 的稀疏波最左侧特征线相遇时，碰撞发生。设碰撞时间为 $t_c$。我们通过令位置相等来求 $t_c$：\n$$\nx_s(t_c) = x_{r,left}(t_c)\n$$\n$$\n-0.2 + 0.5t_c = 0.2 - t_c\n$$\n$$\n1.5t_c = 0.4 \\implies t_c = \\frac{0.4}{1.5} = \\frac{4}{15} \\approx 0.2667\n$$\n碰撞发生在时间 $t_c \\approx 0.2667$，这在最终时间 $t_{\\text{final}} = 0.4$ 之前。碰撞位置为：\n$$\nx_c = -0.2 + 0.5 \\left(\\frac{4}{15}\\right) = -0.2 + \\frac{2}{15} = -\\frac{3}{15} + \\frac{2}{15} = -\\frac{1}{15} \\approx -0.0667\n$$\n碰撞的时间和位置都在指定的计算域和持续时间范围内。该分析正确预测了一个复杂的波相互作用场景。\n\n**第二部分：有限体积数值格式**\n\n我们将域 $[-1, 1]$ 离散化为 $N$ 个宽度为 $\\Delta x = 2/N$ 的均匀单元 $C_i = [x_{i-1/2}, x_{i+1/2}]$。单元中心为 $x_i = -1 + (i-1/2)\\Delta x$，其中 $i=1, \\dots, N$。有限体积法演化的是单元平均值 $u_i(t) \\approx \\frac{1}{\\Delta x}\\int_{C_i} u(x,t) dx$。守恒律的半离散形式为：\n$$\n\\frac{d u_i}{dt} + \\frac{1}{\\Delta x} \\left( \\widehat{f}_{i+1/2} - \\widehat{f}_{i-1/2} \\right) = 0\n$$\n其中 $\\widehat{f}_{i+1/2}$ 是单元 $C_i$ 和 $C_{i+1}$ 之间界面处的数值通量，近似于 $f(u(x_{i+1/2}, t))$。\n\n**1. Engquist-Osher 数值通量：**\n该通量基于根据特征速度 $a(u) = f'(u)$ 符号的通量矢量分裂。对于状态 $u$，通量分裂为 $f(u) = f^+(u) + f^-(u)$。对于伯格斯方程，$a(u)=u$。左状态 $u_L$ 和右状态 $u_R$ 之间的迎风偏置数值通量为：\n$$\n\\widehat{f}(u_L, u_R) = F^+(u_L) + F^-(u_R)\n$$\n其中\n$$\nF^+(u) = \\int_0^u \\max(a(s), 0) \\, ds = \\int_0^u \\max(s, 0) \\, ds = \\frac{1}{2}(\\max(u,0))^2\n$$\n$$\nF^-(u) = \\int_0^u \\min(a(s), 0) \\, ds = \\int_0^u \\min(s, 0) \\, ds = \\frac{1}{2}(\\min(u,0))^2\n$$\n此通量函数是连续的，并确保格式是单调的，因此在满足 CFL 条件的前向欧拉时间步进背景下是总变差递减 (TVD) 的。\n\n**2. 时间积分与稳定性：**\n我们使用显式欧拉法进行时间积分。全离散格式为：\n$$\nu_i^{n+1} = u_i^n - \\frac{\\Delta t^n}{\\Delta x} \\left( \\widehat{f}(u_i^n, u_{i+1}^n) - \\widehat{f}(u_{i-1}^n, u_i^n) \\right)\n$$\n其中 $u_i^n$ 是在时刻 $t^n$ 单元 $C_i$ 中的近似值。时间步长 $\\Delta t^n$ 是自适应的，并受 Courant-Friedrichs-Lewy (CFL) 稳定性条件的约束：\n$$\n\\Delta t^n = \\text{CFL} \\cdot \\frac{\\Delta x}{\\max_{i} |a(u_i^n)|} = \\text{CFL} \\cdot \\frac{\\Delta x}{\\max_{i} |u_i^n|}\n$$\n对于此显式一阶格式，$\\text{CFL}$ 的值必须小于或等于 1。\n\n**3. 边界条件：**\n透射（或出流）边界条件通过使用虚拟单元实现。对于最左侧的单元 $C_1$，所需的状态 $u_0$ 设置为 $u_1$。对于最右侧的单元 $C_N$，状态 $u_{N+1}$ 设置为 $u_N$。这种常数外推允许波无反射地离开计算域。\n\n**第三部分：验证与分析**\n\n**1. 参考解与误差：**\n为评估精度，将数值解与一个高分辨率的参考解进行比较。参考解是在一个非常精细的网格 ($N_{\\text{ref}}=6400$) 上使用相同方法生成的，假设它接近真实解。为了与在 $N$ 个单元的粗网格上的解进行比较，必须将此参考解投影到粗网格上。使用单元平均值一致的限制方法：每个粗网格单元的值是对应的 $m = N_{\\text{ref}}/N$ 个细网格单元值的算术平均值。然后在离散 $\\ell^1$ 范数下测量误差：\n$$\nE_1 = \\sum_{i=1}^{N} \\Delta x \\left| u_i^{\\text{num}}(t_{\\text{final}}) - u_i^{\\text{ref}\\to \\text{coarse}}(t_{\\text{final}}) \\right|\n$$\n\n**2. 总变差 (TV):**\n对于标量守恒律，数值格式的一个理想属性是它不会引入伪振荡。单调格式（例如此处使用的格式）在时间上满足总变差递减 (TVD) 的属性，意味着离散解的总变差不会增加。我们通过比较最终时间的 TV 与初始条件的 TV 来衡量此属性。离散 TV 为：\n$$\n\\mathrm{TV}(u) = \\sum_{i=1}^{N-1} |u_{i+1} - u_i|\n$$\n我们检查是否满足 $\\mathrm{TV}(u^{n_{final}}) \\le \\mathrm{TV}(u^0)$，允许一个小的数值容差。一个不增的总变差是无振荡稳定解的指标。初始条件是分段常数，其 TV 为 $|u_M-u_L| + |u_R-u_M| = |-1 - 2| + |0 - (-1)| = 3 + 1 = 4$。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the inviscid Burgers' equation for a triple-state Riemann problem\n    using a first-order finite volume method with Engquist-Osher flux,\n    and performs a grid convergence and stability study.\n    \"\"\"\n\n    # --- Problem Parameters ---\n    X_MIN, X_MAX = -1.0, 1.0\n    U_L, U_M, U_R = 2.0, -1.0, 0.0\n    X_L, X_R = -0.2, 0.2\n    \n    # --- Reference Solution Parameters ---\n    N_REF = 6400\n    CFL_REF = 0.5\n    T_FINAL_REF = 0.4\n    \n    # --- Test Cases ---\n    test_cases = [\n        # (N, CFL, t_final)\n        (200, 0.5, 0.4),  # Case A\n        (200, 0.95, 0.4), # Case B\n        (800, 0.5, 0.4),  # Case C\n    ]\n\n    # --- Engquist-Osher Flux specific functions ---\n    def f_plus(u):\n        return 0.5 * np.maximum(u, 0.0)**2\n\n    def f_minus(u):\n        return 0.5 * np.minimum(u, 0.0)**2\n\n    def engquist_osher_flux(ul, ur):\n        return f_plus(ul) + f_minus(ur)\n\n    def run_simulation(N, CFL, t_final):\n        \"\"\"\n        Runs the finite volume simulation for a given set of parameters.\n        \"\"\"\n        dx = (X_MAX - X_MIN) / N\n        x_centers = X_MIN + dx / 2.0 + np.arange(N) * dx\n\n        # Initialize solution at cell centers\n        u = np.zeros(N)\n        u[x_centers < X_L] = U_L\n        u[(x_centers >= X_L) & (x_centers < X_R)] = U_M\n        u[x_centers >= X_R] = U_R\n\n        # Store initial TV\n        tv_initial = np.sum(np.abs(np.diff(u)))\n\n        t = 0.0\n        while t < t_final:\n            # Adaptive time step from CFL condition\n            max_speed = np.max(np.abs(u))\n            if max_speed < 1e-12: # Avoid division by zero for static solution\n                dt = t_final - t\n            else:\n                dt = CFL * dx / max_speed\n            \n            dt = min(dt, t_final - t)\n\n            # Apply outflow boundary conditions (constant extrapolation)\n            # using one ghost cell on each side\n            u_ghost = np.concatenate(([u[0]], u, [u[-1]]))\n\n            # Compute numerical fluxes at all N+1 interfaces\n            # fluxes[j] is the flux between u_ghost[j] and u_ghost[j+1]\n            fluxes = engquist_osher_flux(u_ghost[:-1], u_ghost[1:])\n\n            # Update cell averages using explicit Euler\n            # (fluxes[1:] - fluxes[:-1]) is the flux difference for each cell\n            u = u - (dt / dx) * (fluxes[1:] - fluxes[:-1])\n            \n            t += dt\n\n        return u, tv_initial\n\n    # --- Main Logic ---\n    \n    # 1. Compute high-resolution reference solution\n    u_ref_fine, _ = run_simulation(N_REF, CFL_REF, T_FINAL_REF)\n\n    results = []\n    for N, CFL, t_final in test_cases:\n        # 2. Run simulation for the current test case\n        u_num, tv_initial = run_simulation(N, CFL, t_final)\n\n        # 3. Coarsen the reference solution\n        m = N_REF // N\n        if N_REF % N != 0:\n            raise ValueError(\"N_ref must be divisible by N for simple coarsening.\")\n        u_ref_coarse = u_ref_fine.reshape((N, m)).mean(axis=1)\n        \n        # 4. Compute error and TV property\n        dx = (X_MAX - X_MIN) / N\n        error_l1 = dx * np.sum(np.abs(u_num - u_ref_coarse))\n\n        tv_final = np.sum(np.abs(np.diff(u_num)))\n        tv_nonincreasing = bool(tv_final <= tv_initial + 1e-10)\n\n        results.append([error_l1, tv_nonincreasing])\n\n    # 5. Format and print the final output\n    # The string conversion of the list will correctly format floats and booleans.\n    # Eg: [[0.0123, True], [0.0456, False]]\n    formatted_results = \", \".join(map(str, results))\n    print(f\"[{formatted_results}]\")\n\nsolve()\n\n```", "id": "2449012"}]}