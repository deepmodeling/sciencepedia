{"hands_on_practices": [{"introduction": "我们从最基本的构建单元——单元刚度矩阵开始。本练习将标准推导过程扩展到具有非均匀材料属性的杆件，要求您在积分中处理一个可变的系数。通过完成这个推导 [@problem_id:2387978]，您将更深刻地理解材料属性如何直接影响单元行为，并体会到微积分在有限元方法中的基础性作用。", "problem": "考虑一个沿 $x$ 轴放置的直的、等截面的一维杆单元，其长度为 $L$，占据区间 $x \\in [0,L]$。该杆在轴向变形中承受小应变和小位移，具有恒定的横截面积 $A$ 和一个与位置相关的杨氏模量，由 $E(x) = E_{0} + a x$ 给出，其中 $E_{0}$ 和 $a$ 是常数。假设对于所有 $x \\in [0,L]$，都有 $E(x) \\gt 0$。采用标准的双节点线性有限元近似来描述轴向位移场，节点位移在 $x=0$ 处为 $u_{1}$，在 $x=L$ 处为 $u_{2}$。忽略任何体力或面力，因此只考虑单元的内力响应。\n\n从一维线弹性力学的第一性原理和标准双节点线性有限元运动学出发，推导单元刚度矩阵，该矩阵将节点位移向量 $\\begin{pmatrix} u_{1} & u_{2} \\end{pmatrix}^{\\mathsf{T}}$ 映射到相应的单元内力节点力向量。将最终答案表示为一个仅包含 $A$、$L$、$E_{0}$ 和 $a$ 的封闭形式的二乘二矩阵。不需要进行数值计算，也不需要进行舍入。最终答案中不要包含单位。", "solution": "在尝试进行任何求解之前，将首先对所述问题进行严格的验证。\n\n逐字提取的已知条件如下：\n- **单元类型**：直的、等截面的一维杆单元。\n- **长度**：$L$。\n- **定义域**：$x \\in [0,L]$。\n- **运动学**：轴向变形中的小应变和小位移。\n- **横截面**：恒定面积 $A$。\n- **材料属性**：位置相关的杨氏模量 $E(x) = E_{0} + a x$，其中 $E_{0}$ 和 $a$ 是常数。\n- **约束条件**：对于所有 $x \\in [0,L]$，$E(x) > 0$。\n- **近似方法**：轴向位移场 $u(x)$ 的双节点线性有限元近似。\n- **节点自由度 (DOFs)**：在 $x=0$ 处的节点位移 $u_{1}$ 和在 $x=L$ 处的节点位移 $u_{2}$。\n- **载荷**：忽略体力与面力。\n- **目标**：推导将节点位移向量映射到内力节点力向量的单元刚度矩阵。\n- **输出规格**：一个用 $A$、$L$、$E_{0}$ 和 $a$ 表示的封闭形式的 $2 \\times 2$ 矩阵。\n\n对问题进行验证。\n1.  **科学依据**：该问题是在一维线弹性力学和有限元法等成熟的框架内提出的。空间变化的杨氏模量是用于模拟功能梯度材料的有效概念。该提法在科学上是合理的。\n2.  **适定性**：该问题是适定的。它要求基于一套完整且一致的物理和数学假设，推导一个特定量，即单元刚度矩阵。预期存在唯一解。\n3.  **客观性**：该问题使用精确、客观、无歧义的技术语言陈述。它不包含任何主观陈述。\n\n该问题被认为是有效的。现在将从第一性原理推导求解。\n\n一维杆单元的刚度矩阵 $\\mathbf{K}$ 由其在单元体积 $V$ 上的积分给出：\n$$\n\\mathbf{K} = \\int_{V} \\mathbf{B}^{\\mathsf{T}} \\mathbf{D} \\mathbf{B} \\, dV\n$$\n对于一个横截面积为常数 $A$、长度为 $L$ 的等截面杆，体积积分简化为沿 $x$ 轴的线积分：\n$$\n\\mathbf{K} = \\int_{0}^{L} \\mathbf{B}^{\\mathsf{T}} D \\mathbf{B} A \\, dx\n$$\n此处，$\\mathbf{B}$ 是应变-位移矩阵，$D$ 是材料刚度，在一维情况下即为杨氏模量 $E(x)$。\n\n首先，我们使用标准的双节点线性形函数 $N_{1}(x)$ 和 $N_{2}(x)$ 来定义位移场 $u(x)$。任意点 $x$ 处的位移是节点位移 $u_{1}$ 和 $u_{2}$ 的插值：\n$$\nu(x) = N_{1}(x) u_{1} + N_{2}(x) u_{2}\n$$\n对于定义在域 $x \\in [0,L]$ 上的单元，其线性形函数为：\n$$\nN_{1}(x) = 1 - \\frac{x}{L}\n$$\n$$\nN_{2}(x) = \\frac{x}{L}\n$$\n以矩阵形式表示，位移场为 $u(x) = \\mathbf{N}(x) \\mathbf{d}$，其中 $\\mathbf{N}(x) = \\begin{pmatrix} N_{1}(x) & N_{2}(x) \\end{pmatrix}$ 且 $\\mathbf{d} = \\begin{pmatrix} u_{1} \\\\ u_{2} \\end{pmatrix}$。\n\n接下来，我们确定轴向应变 $\\epsilon_{x}$，它是位移场的空间导数：\n$$\n\\epsilon_{x}(x) = \\frac{du}{dx} = \\frac{d}{dx} \\left( N_{1}(x) u_{1} + N_{2}(x) u_{2} \\right) = \\left( \\frac{dN_{1}}{dx} \\right) u_{1} + \\left( \\frac{dN_{2}}{dx} \\right) u_{2}\n$$\n形函数的导数为：\n$$\n\\frac{dN_{1}}{dx} = -\\frac{1}{L}\n$$\n$$\n\\frac{dN_{2}}{dx} = \\frac{1}{L}\n$$\n应变可以写成矩阵形式 $\\epsilon_{x}(x) = \\mathbf{B} \\mathbf{d}$，其中应变-位移矩阵 $\\mathbf{B}$ 为：\n$$\n\\mathbf{B} = \\begin{pmatrix} \\frac{dN_{1}}{dx} & \\frac{dN_{2}}{dx} \\end{pmatrix} = \\begin{pmatrix} -\\frac{1}{L} & \\frac{1}{L} \\end{pmatrix}\n$$\n注意，对于线性单元，$\\mathbf{B}$ 矩阵不随 $x$ 变化，是恒定的。\n\n材料本构关系由 $\\sigma_{x}(x) = E(x) \\epsilon_{x}(x)$ 给出。因此，材料刚度 $D$ 是与位置相关的杨氏模量，$D = E(x) = E_{0} + a x$。\n\n现在我们组集刚度矩阵 $\\mathbf{K}$ 的积分：\n$$\n\\mathbf{K} = \\int_{0}^{L} \\mathbf{B}^{\\mathsf{T}} (E_{0} + ax) \\mathbf{B} A \\, dx\n$$\n项 $\\mathbf{B}^{\\mathsf{T}} \\mathbf{B}$ 为：\n$$\n\\mathbf{B}^{\\mathsf{T}} \\mathbf{B} = \\begin{pmatrix} -\\frac{1}{L} \\\\ \\frac{1}{L} \\end{pmatrix} \\begin{pmatrix} -\\frac{1}{L} & \\frac{1}{L} \\end{pmatrix} = \\begin{pmatrix} \\frac{1}{L^{2}} & -\\frac{1}{L^{2}} \\\\ -\\frac{1}{L^{2}} & \\frac{1}{L^{2}} \\end{pmatrix} = \\frac{1}{L^{2}} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}\n$$\n将此代入 $\\mathbf{K}$ 的积分中：\n$$\n\\mathbf{K} = \\int_{0}^{L} \\left( \\frac{1}{L^{2}} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} \\right) (E_{0} + ax) A \\, dx\n$$\n由于矩阵项、$A$ 和 $1/L^2$ 相对于积分变量 $x$ 是常数，它们可以从积分中提出：\n$$\n\\mathbf{K} = \\frac{A}{L^{2}} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} \\int_{0}^{L} (E_{0} + ax) \\, dx\n$$\n现在，我们计算该定积分：\n$$\n\\int_{0}^{L} (E_{0} + ax) \\, dx = \\left[ E_{0}x + \\frac{ax^{2}}{2} \\right]_{0}^{L} = (E_{0}L + \\frac{aL^{2}}{2}) - (0) = L \\left( E_{0} + \\frac{aL}{2} \\right)\n$$\n该积分代表了 $E(x)$ 在长度 $L$ 上的平均值乘以 $L$。令 $\\bar{E} = E_{0} + \\frac{aL}{2}$ 为平均杨氏模量。\n\n最后，将积分结果代回 $\\mathbf{K}$ 的表达式中：\n$$\n\\mathbf{K} = \\frac{A}{L^{2}} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} \\left( L \\left( E_{0} + \\frac{aL}{2} \\right) \\right)\n$$\n通过消去一个因子 $L$ 来化简表达式：\n$$\n\\mathbf{K} = \\frac{A}{L} \\left( E_{0} + \\frac{aL}{2} \\right) \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}\n$$\n这就是单元刚度矩阵的最终封闭形式表达式。条件 $E(x) > 0$ 在 $[0,L]$ 上意味着 $E_0>0$ 和 $E_0+aL >0$，这保证了平均模量 $\\bar{E} = E_0 + aL/2 = \\frac{1}{2}(E_0 + (E_0+aL))$ 也为正，从而确保了物理稳定性所要求的正定刚度矩阵。", "answer": "$$\n\\boxed{\\frac{A}{L} \\left( E_{0} + \\frac{aL}{2} \\right) \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}}\n$$", "id": "2387978"}, {"introduction": "有了单元矩阵后，下一步是将它们组装成一个全局系统。本练习通过逆向思维，要求您观察添加一个单元前后全局刚度矩阵的变化，从而推断出该单元连接了哪些自由度。这项“侦探工作” [@problem_id:2388003] 能有效地巩固您对局部单元自由度到全局系统映射关系的理解，而这正是组装过程的核心。", "problem": "一个小型结构模型通过有限元法（FEM）进行分析。该全局系统有$5$个自由的全局自由度，标记为$\\{1,2,3,4,5\\}$。在组装了除一个单元外的所有单元后，得到的部分组装的全局刚度矩阵为\n$$\n\\mathbf{K}^{(p)}=\\begin{bmatrix}\n10 & -3 & 0 & -2 & 0\\\\\n-3 & 6 & 1 & 0 & 0\\\\\n0 & 1 & 5 & -1 & 2\\\\\n-2 & 0 & -1 & 7 & 0\\\\\n0 & 0 & 2 & 0 & 4\n\\end{bmatrix}.\n$$\n接着，将一个剩下的、具有以下局部刚度矩阵的$2$节点轴向单元\n$$\n\\mathbf{k}^{e}=\\begin{bmatrix}\n8 & -8\\\\\n-8 & 8\n\\end{bmatrix}\n$$\n进行组装，得到新的全局刚度矩阵\n$$\n\\mathbf{K}^{(n)}=\\begin{bmatrix}\n10 & -3 & 0 & -2 & 0\\\\\n-3 & 14 & 1 & 0 & -8\\\\\n0 & 1 & 5 & -1 & 2\\\\\n-2 & 0 & -1 & 7 & 0\\\\\n0 & -8 & 2 & 0 & 12\n\\end{bmatrix}.\n$$\n假设采用标准的有限元组装方法，该单元连接的是哪一对全局自由度？\n\nA. $\\{1,5\\}$\n\nB. $\\{2,5\\}$\n\nC. $\\{2,4\\}$\n\nD. $\\{3,5\\}$", "solution": "在尝试任何解答之前，我们首先对问题陈述进行严格的验证。\n\n### 步骤1：提取已知条件\n- 系统有$5$个自由的全局自由度，标记为$\\{1,2,3,4,5\\}$。\n- 部分组装的全局刚度矩阵为 $\\mathbf{K}^{(p)}=\\begin{bmatrix} 10 & -3 & 0 & -2 & 0\\\\ -3 & 6 & 1 & 0 & 0\\\\ 0 & 1 & 5 & -1 & 2\\\\ -2 & 0 & -1 & 7 & 0\\\\ 0 & 0 & 2 & 0 & 4 \\end{bmatrix}$。\n- 一个$2$节点轴向单元的局部刚度矩阵为 $\\mathbf{k}^{e}=\\begin{bmatrix} 8 & -8\\\\ -8 & 8 \\end{bmatrix}$。\n- 组装最后一个单元后的新全局刚度矩阵为 $\\mathbf{K}^{(n)}=\\begin{bmatrix} 10 & -3 & 0 & -2 & 0\\\\ -3 & 14 & 1 & 0 & -8\\\\ 0 & 1 & 5 & -1 & 2\\\\ -2 & 0 & -1 & 7 & 0\\\\ 0 & -8 & 2 & 0 & 12 \\end{bmatrix}$。\n- 问题是需要确定最后一个单元所连接的全局自由度对。\n\n### 步骤2：使用提取的已知条件进行验证\n根据既有的科学和数学原理对该问题进行有效性评估。\n1.  **科学依据：** 该问题设置在有限元法（FEM）的背景下，具体是使用直接刚度法来组装全局刚度矩阵。所提供的刚度矩阵 $\\mathbf{K}^{(p)}$、$\\mathbf{K}^{(n)}$ 和 $\\mathbf{k}^{e}$ 都是对称的，且对角线元素为正，这与线性结构分析中刚度矩阵的物理特性一致。该问题在科学和数学上是合理的。\n2.  **适定性：** 该问题提供了确定最后一个单元连接关系所需的所有数据。部分矩阵、单元矩阵和最终矩阵之间的关系遵循一个简单的加法原理，这使得可以确定唯一的解。该问题是适定的。\n3.  **客观性：** 该问题使用精确的数学语言和符号进行陈述，没有歧义或主观论断。\n\n### 步骤3：结论与行动\n问题陈述是有效的。这是一个计算力学中的标准练习，它是自洽的、一致的且有科学依据的。现在开始推导求解过程。\n\n### 推导\n直接刚度法的基本原理是通过叠加各个单元刚度矩阵来形成全局刚度矩阵。对于一个包含$N$个单元的系统，其全局矩阵$\\mathbf{K}$由扩展后的单元刚度矩阵之和给出：\n$$\n\\mathbf{K} = \\sum_{e=1}^{N} \\mathbf{L}^{(e)T} \\mathbf{k}^{(e)} \\mathbf{L}^{(e)}\n$$\n其中 $\\mathbf{L}^{(e)}$ 是单元 $e$ 的连接矩阵或定位矩阵。\n\n在本问题中，新的全局刚度矩阵 $\\mathbf{K}^{(n)}$ 是部分组装的矩阵 $\\mathbf{K}^{(p)}$ 与最后一个单元 $\\mathbf{k}^{e}$ 的贡献之和。设 $\\Delta\\mathbf{K}$ 为最后一个单元对全局刚度矩阵的贡献。那么，根据叠加原理：\n$$\n\\mathbf{K}^{(n)} = \\mathbf{K}^{(p)} + \\Delta\\mathbf{K}\n$$\n为了求出最后一个单元的贡献，我们计算新全局矩阵与部分组装全局矩阵之间的差值：\n$$\n\\Delta\\mathbf{K} = \\mathbf{K}^{(n)} - \\mathbf{K}^{(p)}\n$$\n代入给定的矩阵：\n$$\n\\Delta\\mathbf{K} = \\begin{bmatrix}\n10 & -3 & 0 & -2 & 0\\\\\n-3 & 14 & 1 & 0 & -8\\\\\n0 & 1 & 5 & -1 & 2\\\\\n-2 & 0 & -1 & 7 & 0\\\\\n0 & -8 & 2 & 0 & 12\n\\end{bmatrix} - \\begin{bmatrix}\n10 & -3 & 0 & -2 & 0\\\\\n-3 & 6 & 1 & 0 & 0\\\\\n0 & 1 & 5 & -1 & 2\\\\\n-2 & 0 & -1 & 7 & 0\\\\\n0 & 0 & 2 & 0 & 4\n\\end{bmatrix}\n$$\n进行逐元素相减可得：\n$$\n\\Delta\\mathbf{K} = \\begin{bmatrix}\n10-10 & -3-(-3) & 0-0 & -2-(-2) & 0-0\\\\\n-3-(-3) & 14-6 & 1-1 & 0-0 & -8-0\\\\\n0-0 & 1-1 & 5-5 & -1-(-1) & 2-2\\\\\n-2-(-2) & 0-0 & -1-(-1) & 7-7 & 0-0\\\\\n0-0 & -8-0 & 2-2 & 0-0 & 12-4\n\\end{bmatrix}\n= \\begin{bmatrix}\n0 & 0 & 0 & 0 & 0\\\\\n0 & 8 & 0 & 0 & -8\\\\\n0 & 0 & 0 & 0 & 0\\\\\n0 & 0 & 0 & 0 & 0\\\\\n0 & -8 & 0 & 0 & 8\n\\end{bmatrix}\n$$\n这个矩阵 $\\Delta\\mathbf{K}$ 表示局部刚度矩阵 $\\mathbf{k}^{e}$ 在“散布”或组装到全局坐标系之后的形式。给定的局部刚度矩阵是：\n$$\n\\mathbf{k}^{e}=\\begin{bmatrix}\n8 & -8\\\\\n-8 & 8\n\\end{bmatrix} = \\begin{bmatrix}\nk_{11} & k_{12}\\\\\nk_{21} & k_{22}\n\\end{bmatrix}\n$$\n设该单元的两个节点连接全局自由度（DOF）$i$ 和 $j$。组装过程规定，$\\mathbf{k}^{e}$ 的分量被添加到全局矩阵 $\\mathbf{K}$ 中与这些自由度相对应的位置上：\n- 项 $k_{11}=8$ 加到 $K_{ii}$。\n- 项 $k_{12}=-8$ 加到 $K_{ij}$。\n- 项 $k_{21}=-8$ 加到 $K_{ji}$。\n- 项 $k_{22}=8$ 加到 $K_{jj}$。\n\n通过检查计算出的矩阵 $\\Delta\\mathbf{K}$ 中的非零项，我们可以确定相连的全局自由度：\n- $\\Delta K_{22} = 8$\n- $\\Delta K_{25} = -8$\n- $\\Delta K_{52} = -8$\n- $\\Delta K_{55} = 8$\n\n$\\Delta\\mathbf{K}$ 的所有其他元素均为零。这种在第2行和第5行以及第2列和第5列出现的非零项模式，唯一地确定了所连接的自由度。我们可以直接映射索引：$i=2$ 和 $j=5$。因此，该单元连接了全局自由度 $\\{2, 5\\}$。\n\n### 逐项分析\n\nA. $\\{1,5\\}$：如果单元连接自由度1和5，则矩阵 $\\Delta\\mathbf{K}$ 将在位置 $(1,1)$、$(1,5)$、$(5,1)$ 和 $(5,5)$ 处有非零项。计算出的 $\\Delta\\mathbf{K}$ 不具有此结构。**错误**。\n\nB. $\\{2,5\\}$：如果单元连接自由度2和5，则矩阵 $\\Delta\\mathbf{K}$ 将在位置 $(2,2)$、$(2,5)$、$(5,2)$ 和 $(5,5)$ 处有非零项，其值分别为$8$、$-8$、$-8$和$8$。这与推导出的矩阵 $\\Delta\\mathbf{K}$ 完全匹配。**正确**。\n\nC. $\\{2,4\\}$：如果单元连接自由度2和4，则矩阵 $\\Delta\\mathbf{K}$ 将在位置 $(2,2)$、$(2,4)$、$(4,2)$ 和 $(4,4)$ 处有非零项。计算出的 $\\Delta\\mathbf{K}$ 显示第4行或第4列没有变化。**错误**。\n\nD. $\\{3,5\\}$：如果单元连接自由度3和5，则矩阵 $\\Delta\\mathbf{K}$ 将在位置 $(3,3)$、$(3,5)$、$(5,3)$ 和 $(5,5)$ 处有非零项。计算出的 $\\Delta\\mathbf{K}$ 显示第3行或第3列没有变化。**错误**。", "answer": "$$\\boxed{B}$$", "id": "2388003"}, {"introduction": "在实际编程中，组装过程很容易出错。这个动手编码挑战旨在探讨组装算法中的常见错误如何破坏正确组装的全局刚度矩阵的基本数学性质（如对称性、正半定性和零行和特性）。通过诊断这些模拟错误 [@problem_id:2388002]，您将学会运用理论原则作为强大的调试工具，这是任何计算工程师都必须具备的关键技能。", "problem": "给定一个一维网格，包含 $n=4$ 个全局节点，标记为 $0,1,2,3$，以及三个双节点线性单元，其连接关系为\n- $e_1 = (0,1)$，\n- $e_2 = (1,2)$，\n- $e_3 = (2,3)$。\n\n每个单元具有相同的局部刚度矩阵，明确由下式给出\n$$\nk^{(e)} \\;=\\; \\begin{bmatrix} 2 & -2 \\\\ -2 & 2 \\end{bmatrix}.\n$$\n预期的全局刚度矩阵 $K$ 是通过标准的有限元组装过程生成的。该过程将每个局部项 $k^{(e)}_{ab}$ 加到相应的全局项 $K_{ij}$ 上，其中 $i$ 和 $j$ 是单元 $e$ 的局部节点 $a$ 和 $b$ 对应的全局节点索引。不施加任何边界条件。\n\n需要分析一组四个备选全局矩阵。它们仅使用上述网格和局部矩阵定义如下：\n\n- 情况 1 (正确组装)：对于所有单元和所有局部索引对 $(a,b)$，通过将所有贡献 $k^{(e)}_{ab}$ 求和到相应的全局项 $K_{ij}$ 中来组装 $K$。\n- 情况 2 (仅下三角组装)：对于每个单元和每个局部索引对 $(a,b)$，只有当相应的全局索引满足 $i \\ge j$ 时，才加上 $k^{(e)}_{ab}$。不执行对称镜像操作。\n- 情况 3 (覆盖而非累加的错误)：对于每个单元和每个局部索引对 $(a,b)$，设置 $K_{ij} \\leftarrow k^{(e)}_{ab}$，即覆盖当前值而不是累加。单元按 $e_1, e_2, e_3$ 的顺序处理。\n- 情况 4 (缺少中间单元的错误)：与情况 1 一样组装，但完全跳过单元 $e_2$。\n\n对于每个备选矩阵 $\\widehat{K}$，使用容差 $\\tau = 10^{-10}$ 确定以下属性：\n\n- $p_1$：对称性，即 $\\|\\widehat{K}-\\widehat{K}^\\top\\|_\\infty \\le \\tau$ 是否成立。\n- $p_2$：二次型意义下的半正定性，即对称部分 $S=(\\widehat{K}+\\widehat{K}^\\top)/2$ 的所有特征值是否都 $\\ge -\\tau$。\n- $p_3$：行和为零属性，即 $\\widehat{K}$ 的每一行之和的绝对值是否 $\\le \\tau$。\n- $p_4$：与扩散型刚度一致的符号模式，即 $\\widehat{K}$ 的所有对角线元素是否 $\\ge -\\tau$ 且所有非对角线元素是否 $\\le \\tau$。\n- $p_5$：$\\widehat{K}$ 的零度，定义为 $\\widehat{K}$ 的奇异值中小于等于 $\\tau$ 的数量。\n\n您的程序必须使用上述数据从头开始实现组装过程，并严格按照规定构造四个备选矩阵。然后，按 $1,2,3,4$ 的顺序，为每种情况计算 $[p_1,p_2,p_3,p_4,p_5]$。\n\n测试套件：\n- 网格参数：$n=4$ 个节点，单元 $e_1=(0,1)$, $e_2=(1,2)$, $e_3=(2,3)$。\n- 所有单元的局部刚度矩阵：$k^{(e)} = \\begin{bmatrix} 2 & -2 \\\\ -2 & 2 \\end{bmatrix}$。\n- 容差：$\\tau = 10^{-10}$。\n\n要求的最终输出格式：\n- 您的程序应生成单行输出，其中包含一个逗号分隔的列表，按 $1,2,3,4$ 的顺序给出每种情况的结果，并用方括号括起来。每种情况的结果本身也必须是一个用方括号括起来的逗号分隔列表，包含 $5$ 个条目 $[p_1,p_2,p_3,p_4,p_5]$，其中 $p_1,p_2,p_3,p_4$ 是布尔值，$p_5$ 是整数。例如，整体结构必须是\n$$\n[[p_{1,1},p_{1,2},p_{1,3},p_{1,4},p_{1,5}],[p_{2,1},p_{2,2},p_{2,3},p_{2,4},p_{2,5}],[p_{3,1},p_{3,2},p_{3,3},p_{3,4},p_{3,5}],[p_{4,1},p_{4,2},p_{4,3},p_{4,4},p_{4,5}]].\n$$\n输出行中不允许有空格或其他额外字符。", "solution": "问题陈述经评估有效。它在科学上基于有限元法的原理，提供了一个清晰、独立且客观的任务。构建和分析指定矩阵所需的所有数据均已提供。该问题是适定的，并允许一个唯一的、可验证的解。我们将继续进行推导。\n\n问题要求构建和分析四个不同的 $4 \\times 4$ 全局刚度矩阵，记为 $\\widehat{K}$，这些矩阵源于一个包含 $n=4$ 个节点和 $3$ 个单元的一维网格。节点索引为 $0, 1, 2, 3$。单元连接关系为 $e_1 = (0,1)$、$e_2 = (1,2)$ 和 $e_3 = (2,3)$。每个单元都拥有相同的局部刚度矩阵 $k^{(e)}$：\n$$\nk^{(e)} = \\begin{bmatrix} 2 & -2 \\\\ -2 & 2 \\end{bmatrix}\n$$\n组装过程将局部项 $k^{(e)}_{ab}$（其中 $a, b \\in \\{0, 1\\}$）映射到全局项 $\\widehat{K}_{ij}$，其中 $i$ 和 $j$ 是单元 $e$ 的局部节点 $a$ 和 $b$ 对应的全局索引。\n\n首先，我们构造四个备选矩阵。所有矩阵都初始化为 $4 \\times 4$ 的零矩阵。\n\n情况 1：正确组装。\n标准的组装过程将所有单元的贡献相加。\n- 单元 $e_1=(0,1)$ 将 $k^{(1)}$ 贡献给对应于节点 $(0,1)$ 的子矩阵。\n- 单元 $e_2=(1,2)$ 将 $k^{(2)}$ 贡献给对应于节点 $(1,2)$ 的子矩阵。\n- 单元 $e_3=(2,3)$ 将 $k^{(3)}$ 贡献给对应于节点 $(2,3)$ 的子矩阵。\n\n累加过程如下：\n来自 $e_1$ 的贡献：$\\begin{bmatrix} 2 & -2 & 0 & 0 \\\\ -2 & 2 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\end{bmatrix}$\n来自 $e_2$ 的贡献：$\\begin{bmatrix} 0 & 0 & 0 & 0 \\\\ 0 & 2 & -2 & 0 \\\\ 0 & -2 & 2 & 0 \\\\ 0 & 0 & 0 & 0 \\end{bmatrix}$\n来自 $e_3$ 的贡献：$\\begin{bmatrix} 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\\\ 0 & 0 & 2 & -2 \\\\ 0 & 0 & -2 & 2 \\end{bmatrix}$\n\n将这些贡献相加，得到最终矩阵 $\\widehat{K}_1$：\n$$\n\\widehat{K}_1 = \\begin{bmatrix}\n2 & -2 & 0 & 0 \\\\\n-2 & 4 & -2 & 0 \\\\\n0 & -2 & 4 & -2 \\\\\n0 & 0 & -2 & 2\n\\end{bmatrix}\n$$\n\n情况 2：仅下三角组装。\n对于每个单元，只有当全局索引满足 $i \\ge j$ 时，才将项 $k^{(e)}_{ab}$ 加到 $\\widehat{K}_{ij}$ 上。\n- 对于 $e_1=(0,1)$，全局对 $(i,j)$ 为 $(0,0), (0,1), (1,0), (1,1)$。条件 $i \\ge j$ 对 $(0,0), (1,0), (1,1)$ 成立。\n- 对于 $e_2=(1,2)$，全局对为 $(1,1), (1,2), (2,1), (2,2)$。条件对 $(1,1), (2,1), (2,2)$ 成立。\n- 对于 $e_3=(2,3)$，全局对为 $(2,2), (2,3), (3,2), (3,3)$。条件对 $(2,2), (3,2), (3,3)$ 成立。\n\n累加这些贡献：\n$\\widehat{K}_{00} \\leftarrow 2$\n$\\widehat{K}_{10} \\leftarrow -2$, $\\widehat{K}_{11} \\leftarrow 2$\n来自 $e_2$: $\\widehat{K}_{11} \\leftarrow 2+2=4$, $\\widehat{K}_{21} \\leftarrow -2$, $\\widehat{K}_{22} \\leftarrow 2$\n来自 $e_3$: $\\widehat{K}_{22} \\leftarrow 2+2=4$, $\\widehat{K}_{32} \\leftarrow -2$, $\\widehat{K}_{33} \\leftarrow 2$\n得到的矩阵为：\n$$\n\\widehat{K}_2 = \\begin{bmatrix}\n2 & 0 & 0 & 0 \\\\\n-2 & 4 & 0 & 0 \\\\\n0 & -2 & 4 & 0 \\\\\n0 & 0 & -2 & 2\n\\end{bmatrix}\n$$\n\n情况 3：覆盖而非累加的错误。\n贡献不是相加，而是覆盖现有值。单元按 $e_1, e_2, e_3$ 的顺序处理。\n- 处理 $e_1=(0,1)$ 后：$\\widehat{K}_3 = \\begin{bmatrix} 2 & -2 & 0 & 0 \\\\ -2 & 2 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\end{bmatrix}$\n- 处理 $e_2=(1,2)$ 后：对应于节点 $(1,2)$ 的子矩阵被覆盖。$\\widehat{K}_{11}$ 变为 $2$ (而不是 $4$)。\n$\\widehat{K}_3 = \\begin{bmatrix} 2 & -2 & 0 & 0 \\\\ -2 & 2 & -2 & 0 \\\\ 0 & -2 & 2 & 0 \\\\ 0 & 0 & 0 & 0 \\end{bmatrix}$\n- 处理 $e_3=(2,3)$ 后：对应于节点 $(2,3)$ 的子矩阵被覆盖。$\\widehat{K}_{22}$ 变为 $2$。\n$$\n\\widehat{K}_3 = \\begin{bmatrix}\n2 & -2 & 0 & 0 \\\\\n-2 & 2 & -2 & 0 \\\\\n0 & -2 & 2 & -2 \\\\\n0 & 0 & -2 & 2\n\\end{bmatrix}\n$$\n\n情况 4：缺少中间单元的错误。\n组装是正确的，但跳过了单元 $e_2$。只组装 $e_1$ 和 $e_3$。\n$$\n\\widehat{K}_4 = \\begin{bmatrix} 2 & -2 & 0 & 0 \\\\ -2 & 2 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\end{bmatrix} + \\begin{bmatrix} 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 \\\\ 0 & 0 & 2 & -2 \\\\ 0 & 0 & -2 & 2 \\end{bmatrix} = \\begin{bmatrix}\n2 & -2 & 0 & 0 \\\\\n-2 & 2 & 0 & 0 \\\\\n0 & 0 & 2 & -2 \\\\\n0 & 0 & -2 & 2\n\\end{bmatrix}\n$$\n\n接下来，我们对每个矩阵分析其五个属性，容差为 $\\tau = 10^{-10}$。\n\n$p_1$：对称性：$\\|\\widehat{K}-\\widehat{K}^\\top\\|_\\infty \\le \\tau$。无穷范数是最大绝对行和。\n$p_2$：半正定性：$\\min(\\text{eig}(S)) \\ge -\\tau$，其中 $S = (\\widehat{K}+\\widehat{K}^\\top)/2$ 是对称部分。\n$p_3$：行和为零属性：$\\max_i |\\sum_j \\widehat{K}_{ij}| \\le \\tau$。\n$p_4$：符号模式：$\\min_i \\widehat{K}_{ii} \\ge -\\tau$ 且 $\\max_{i\\ne j} \\widehat{K}_{ij} \\le \\tau$。\n$p_5$：零度：$\\widehat{K}$ 的奇异值 $\\sigma$ 中满足 $\\sigma \\le \\tau$ 的数量。\n\n$\\widehat{K}_1$ 的分析：\n- $p_1$：通过观察可知 $\\widehat{K}_1$ 是对称的。True。\n- $p_2$：$\\widehat{K}_1$ 是路径图的标准图拉普拉斯矩阵。已知它是半正定的。向量 $[1,1,1,1]^\\top$ 在其零空间中，产生一个零特征值。所有其他特征值都是正的。True。\n- $p_3$：所有行和都为 0。例如，索引为 1 的行：$-2+4-2=0$。True。\n- $p_4$：对角线元素（$2,4,4,2$）为正。非对角线元素（$-2,0$）为非正。True。\n- $p_5$：一个连通的浮动机械系统的零度为 1（刚体平移）。秩为 3。零度为 $4-3=1$。值为 1。\n结果 1: $[True, True, True, True, 1]$\n\n$\\widehat{K}_2$ 的分析：\n- $p_1$：非对称，例如 $\\widehat{K}_{10}=-2$ 但 $\\widehat{K}_{01}=0$。False。\n- $p_2$：其对称部分为 $S = (\\widehat{K}_2+\\widehat{K}_2^\\top)/2 = \\begin{bsmallmatrix} 2 & -1 & 0 & 0 \\\\ -1 & 4 & -1 & 0 \\\\ 0 & -1 & 4 & -1 \\\\ 0 & 0 & -1 & 2 \\end{bsmallmatrix}$。这是一个具有正对角线元素的对称对角占优矩阵，因此是正定的。所有特征值均为正。True。\n- $p_3$：行和为 $[2, 2, 2, 0]^\\top$。并非全部为零。False。\n- $p_4$：对角线元素（$2,4,4,2$）为正。非对角线元素（$-2,0$）为非正。True。\n- $p_5$：$\\det(\\widehat{K}_2) = 2 \\cdot 4 \\cdot 4 \\cdot 2 = 64 \\ne 0$。该矩阵可逆，因此其秩为 4，零度为 0。值为 0。\n结果 2: $[False, True, False, True, 0]$\n\n$\\widehat{K}_3$ 的分析：\n- $p_1$：通过观察可知 $\\widehat{K}_3$ 是对称的。True。\n- $p_2$：由于 $\\widehat{K}_3$ 是对称的，$S=\\widehat{K}_3$。其 $3 \\times 3$ 主子式为 $\\det(\\begin{bsmallmatrix} 2 & -2 & 0 \\\\ -2 & 2 & -2 \\\\ 0 & -2 & 2 \\end{bsmallmatrix}) = 2(4-4) - (-2)(-4) = -8$。一个具有负主子式的对称矩阵不是半正定的。False。\n- $p_3$：行和为 $[0, -2, -2, 0]^\\top$。并非全部为零。False。\n- $p_4$：对角线元素（$2,2,2,2$）为正。非对角线元素（$-2,0$）为非正。True。\n- $p_5$：$\\det(\\widehat{K}_3) = -16 \\ne 0$。该矩阵可逆，因此其秩为 4，零度为 0。值为 0。\n结果 3: $[True, False, False, True, 0]$\n\n$\\widehat{K}_4$ 的分析：\n- $p_1$：通过观察可知 $\\widehat{K}_4$ 是对称的。True。\n- $p_2$：$\\widehat{K}_4$ 是一个分块对角矩阵，有两个相同的块 $\\begin{bsmallmatrix} 2 & -2 \\\\ -2 & 2 \\end{bsmallmatrix}$。每个块都是半正定的，特征值为 0 和 4。因此 $\\widehat{K}_4$ 的特征值为 $\\{0, 4, 0, 4\\}$。所有特征值都非负。True。\n- $p_3$：每个块的行和为零，所以 $\\widehat{K}_4$ 的所有行和都为零。True。\n- $p_4$：对角线元素（$2,2$）为正。非对角线元素（$-2,0$）为非正。True。\n- $p_5$：由于有两个零特征值，零空间的维度为 2。这对应于两个不连通子系统的两个独立刚体运动。零度为 2。值为 2。\n结果 4: $[True, True, True, True, 2]$", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef assemble_case1(k_elem, conn, n_nodes):\n    \"\"\"Case 1: Correct standard assembly.\"\"\"\n    K = np.zeros((n_nodes, n_nodes))\n    for nodes in conn:\n        for i_local, i_global in enumerate(nodes):\n            for j_local, j_global in enumerate(nodes):\n                K[i_global, j_global] += k_elem[i_local, j_local]\n    return K\n\ndef assemble_case2(k_elem, conn, n_nodes):\n    \"\"\"Case 2: Lower-triangular-only assembly.\"\"\"\n    K = np.zeros((n_nodes, n_nodes))\n    for nodes in conn:\n        for i_local, i_global in enumerate(nodes):\n            for j_local, j_global in enumerate(nodes):\n                if i_global >= j_global:\n                    K[i_global, j_global] += k_elem[i_local, j_local]\n    return K\n\ndef assemble_case3(k_elem, conn, n_nodes):\n    \"\"\"Case 3: Overwrite-instead-of-accumulate bug.\"\"\"\n    K = np.zeros((n_nodes, n_nodes))\n    for nodes in conn:\n        for i_local, i_global in enumerate(nodes):\n            for j_local, j_global in enumerate(nodes):\n                K[i_global, j_global] = k_elem[i_local, j_local]\n    return K\n\ndef assemble_case4(k_elem, conn, n_nodes):\n    \"\"\"Case 4: Missing middle element e_2.\"\"\"\n    K = np.zeros((n_nodes, n_nodes))\n    conn_case4 = [conn[0], conn[2]]\n    for nodes in conn_case4:\n        for i_local, i_global in enumerate(nodes):\n            for j_local, j_global in enumerate(nodes):\n                K[i_global, j_global] += k_elem[i_local, j_local]\n    return K\n\ndef analyze_properties(K, tol):\n    \"\"\"Analyzes a given matrix for the 5 specified properties.\"\"\"\n    n_nodes = K.shape[0]\n\n    # p1: Symmetry check using infinity norm\n    p1 = np.linalg.norm(K - K.T, ord=np.inf) <= tol\n\n    # p2: Positive semi-definiteness of the symmetric part\n    S = (K + K.T) / 2.0\n    try:\n        # eigvalsh is for symmetric/Hermitian matrices and is more efficient/stable.\n        eigenvalues = np.linalg.eigvalsh(S)\n        p2 = np.min(eigenvalues) >= -tol\n    except np.linalg.LinAlgError:\n        p2 = False\n\n    # p3: Zero row-sum property\n    row_sums = np.sum(K, axis=1)\n    p3 = np.all(np.abs(row_sums) <= tol)\n\n    # p4: Sign pattern consistency\n    diag_vals = np.diag(K)\n    # Create a boolean mask for off-diagonal elements\n    off_diag_mask = ~np.eye(n_nodes, dtype=bool)\n    off_diag_vals = K[off_diag_mask]\n    \n    diag_ok = np.all(diag_vals >= -tol)\n    # Handle the case of a 1x1 matrix with no off-diagonal elements\n    off_diag_ok = np.all(off_diag_vals <= tol) if off_diag_vals.size > 0 else True\n    p4 = diag_ok and off_diag_ok\n\n    # p5: Nullity (dimension of null space)\n    singular_values = np.linalg.svd(K, compute_uv=False)\n    p5 = np.sum(singular_values <= tol)\n\n    return [p1, p2, p3, p4, int(p5)]\n\ndef solve():\n    # Define the problem parameters from the statement.\n    n_nodes = 4\n    connectivity = [(0, 1), (1, 2), (2, 3)]\n    k_element = np.array([[2.0, -2.0], [-2.0, 2.0]])\n    tolerance = 1e-10\n\n    # Build the matrices for each case\n    candidate_matrices = [\n        assemble_case1(k_element, connectivity, n_nodes),\n        assemble_case2(k_element, connectivity, n_nodes),\n        assemble_case3(k_element, connectivity, n_nodes),\n        assemble_case4(k_element, connectivity, n_nodes),\n    ]\n\n    all_results = []\n    for K_hat in candidate_matrices:\n        properties = analyze_properties(K_hat, tolerance)\n        all_results.append(properties)\n\n    # Format the final output string exactly as required, with no spaces.\n    # 1. Convert each inner list of properties to a comma-separated string.\n    #    e.g., [True, True, 1] becomes \"True,True,1\"\n    # 2. Enclose each resulting string in brackets.\n    #    e.g., \"True,True,1\" becomes \"[True,True,1]\"\n    # 3. Join these strings with commas.\n    #    e.g., \"[True,True,1],[False,False,0]\"\n    # 4. Enclose the final result in brackets.\n    #    e.g., \"[[True,True,1],[False,False,0]]\"\n    result_strings = [f\"[{','.join(str(p).replace('True', 'true').replace('False', 'false'))}]\" for p in all_results]\n    final_output_string = f\"[{','.join(result_strings)}]\"\n    # A quick fix for the output format to be JSON-like boolean\n    final_output_string_py = str(all_results).replace(\" \",\"\").replace(\"True\",\"true\").replace(\"False\",\"false\")\n\n    print(final_output_string_py)\n\nsolve()\n```", "id": "2388002"}]}