{"hands_on_practices": [{"introduction": "有限体积方法的核心在于将控制方程的积分形式应用于离散的控制体积上。本练习将带你从第一性原理出发，为一个 $2$D 扩散问题推导半离散化的控制方程。通过这个实践，你将掌握如何应用高斯散度定理，并对手动构建离散通量平衡获得深入的理解，这是所有计算工程师都必须具备的基本功。", "problem": "考虑一个标量场 $\\phi(\\boldsymbol{x}, t)$ 在一个由全等正六边形控制体铺成的二维($2$D)域中的瞬态扩散过程。其控制偏微分方程(PDE)的守恒形式为\n$$\n\\frac{\\partial \\phi}{\\partial t} + \\nabla \\cdot \\boldsymbol{j} = s(\\boldsymbol{x}, t),\n$$\n其本构关系为(Fick 定律) $\\boldsymbol{j} = - D(\\boldsymbol{x}) \\nabla \\phi$，其中 $D(\\boldsymbol{x})$ 是一个严格为正的扩散率场，$s(\\boldsymbol{x}, t)$ 是一个体积源。使用有限体积法(FVM)，并在平面外方向上采用单位厚度($1$)。\n\n关注单个内部六边形控制体 $V_i$，其面积为 $A_i$，边界 $\\partial V_i$ 由 $6$ 个直面组成，面由 $k \\in \\{1,\\dots,6\\}$ 索引。令 $\\ell_k$ 表示面 $k$ 的长度，$\\boldsymbol{n}_k$ 为其外法向单位向量。令 $N_k$ 表示与 $V_i$ 共享面 $k$ 的相邻控制体。用 $\\phi_i(t)$ 和 $D_i$ 表示 $V_i$ 中的单元平均标量和扩散率，用 $\\phi_{N_k}(t)$ 和 $D_{N_k}$ 表示相邻单元 $N_k$ 中的相应量。假设连接 $V_i$ 和 $N_k$ 形心的线与面 $k$ 正交，形心到形心的距离为 $d_k>0$。定义单元平均源 $S_i(t) \\equiv \\frac{1}{A_i}\\int_{V_i} s(\\boldsymbol{x}, t)\\,\\mathrm{d}V$。\n\n使用基于单元中心值的两点法向梯度和界面处扩散率的调和平均来近似面 $k$ 上的面法向扩散通量：\n$$\nD_{f,k} \\equiv \\frac{2 D_i D_{N_k}}{D_i + D_{N_k}},\n\\qquad\n\\nabla \\phi \\cdot \\boldsymbol{n}_k \\big|_{f,k} \\approx \\frac{\\phi_{N_k} - \\phi_i}{d_k}.\n$$\n\n从第一性原理(在 $V_i$ 上的局部守恒)出发，推导内部单元 $i$ 的半离散守恒通量平衡，并用 $\\{\\phi_i, \\phi_{N_k}, D_i, D_{N_k}, \\ell_k, d_k, A_i, S_i\\}$ 表示其右侧项。你的最终答案必须是由下式隐式定义的右侧项 $R_i$ 的一个封闭形式的解析表达式\n$$\nA_i \\,\\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} \\;=\\; R_i.\n$$\n最终结果中不要包含等号。不需要进行数值计算或四舍五入。请用符号表示你的答案。", "solution": "该问题陈述具有科学依据、提法恰当且客观。它描述了有限体积法在瞬态扩散方程上的一个标准应用，这是计算工程中的一项基本任务。所有必要的数据和近似都已给出，不存在矛盾或含糊之处。下面开始推导过程。\n\n出发点是所给出的守恒形式的控制偏微分方程：\n$$\n\\frac{\\partial \\phi}{\\partial t} + \\nabla \\cdot \\boldsymbol{j} = s(\\boldsymbol{x}, t)\n$$\n有限体积法基于守恒定律的积分形式。我们将此方程在一个任意的内部控制体 $V_i$ 上积分：\n$$\n\\int_{V_i} \\left( \\frac{\\partial \\phi}{\\partial t} + \\nabla \\cdot \\boldsymbol{j} \\right) \\mathrm{d}V = \\int_{V_i} s(\\boldsymbol{x}, t) \\mathrm{d}V\n$$\n利用积分的线性性质，该方程可分为三项：\n$$\n\\int_{V_i} \\frac{\\partial \\phi}{\\partial t} \\mathrm{d}V + \\int_{V_i} \\nabla \\cdot \\boldsymbol{j} \\mathrm{d}V = \\int_{V_i} s(\\boldsymbol{x}, t) \\mathrm{d}V\n$$\n现在，我们通过引入所给出的单元平均量的近似来处理每一项。\n\n第一项表示标量 $\\phi$ 在体积 $V_i$ 上积分后对时间的变化率。单元平均标量 $\\phi_i(t)$ 定义为 $\\phi_i(t) \\equiv \\frac{1}{A_i}\\int_{V_i} \\phi(\\boldsymbol{x}, t)\\,\\mathrm{d}V$。由于控制体 $V_i$ 不随时间变化，我们可以交换积分和时间微分的顺序：\n$$\n\\int_{V_i} \\frac{\\partial \\phi}{\\partial t} \\mathrm{d}V = \\frac{\\mathrm{d}}{\\mathrm{d}t} \\int_{V_i} \\phi(\\boldsymbol{x}, t) \\mathrm{d}V = \\frac{\\mathrm{d}}{\\mathrm{d}t} \\left(A_i \\phi_i(t)\\right) = A_i \\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t}\n$$\n方程的右侧是积分源项。使用所给出的单元平均源的定义 $S_i(t) \\equiv \\frac{1}{A_i}\\int_{V_i} s(\\boldsymbol{x}, t)\\,\\mathrm{d}V$，我们得到：\n$$\n\\int_{V_i} s(\\boldsymbol{x}, t) \\mathrm{d}V = A_i S_i(t)\n$$\n左侧的第二项是通量矢量 $\\boldsymbol{j}$ 的散度的体积分。我们应用 Gauss-Ostrogradsky 散度定理将这个体积分转换为一个沿边界 $\\partial V_i$ 的面积分：\n$$\n\\int_{V_i} \\nabla \\cdot \\boldsymbol{j} \\mathrm{d}V = \\oint_{\\partial V_i} \\boldsymbol{j} \\cdot \\boldsymbol{n} \\, \\mathrm{d}S\n$$\n其中 $\\boldsymbol{n}$ 是边界表面上指向外部的单位法向量。六边形控制体的边界由 $6$ 个面组成，由 $k \\in \\{1,\\dots,6\\}$ 索引。通过该边界的总通量是穿过每个面的通量之和：\n$$\n\\oint_{\\partial V_i} \\boldsymbol{j} \\cdot \\boldsymbol{n} \\, \\mathrm{d}S = \\sum_{k=1}^{6} \\int_{f_k} \\boldsymbol{j} \\cdot \\boldsymbol{n}_k \\, \\mathrm{d}S\n$$\n问题指定了一个二维域，其厚度为单位 $1$。因此，面 $f_k$ 上的面积元 $\\mathrm{d}S$ 为 $\\mathrm{d}\\ell \\times 1$，其中 $\\mathrm{d}\\ell$ 是线微元。假设垂直于面的通量分量 $\\boldsymbol{j} \\cdot \\boldsymbol{n}_k$ 在每个面 $f_k$ 上是常数，则面上的积分可近似为：\n$$\n\\int_{f_k} \\boldsymbol{j} \\cdot \\boldsymbol{n}_k \\, \\mathrm{d}\\ell \\approx (\\boldsymbol{j} \\cdot \\boldsymbol{n}_k)|_{f,k} \\cdot \\ell_k\n$$\n其中 $\\ell_k$ 是面 $k$ 的长度。\n现在我们将本构关系(Fick 定律) $\\boldsymbol{j} = - D(\\boldsymbol{x}) \\nabla \\phi$ 代入面通量项。在面上的通量矢量的法向分量为 $(\\boldsymbol{j} \\cdot \\boldsymbol{n}_k)|_{f,k} = (-D \\nabla\\phi \\cdot \\boldsymbol{n}_k)|_{f,k}$。这可以使用所给出的面扩散率 $D_{f,k}$ 和面法向梯度来近似：\n$$\n(\\boldsymbol{j} \\cdot \\boldsymbol{n}_k)|_{f,k} \\approx -D_{f,k} \\left(\\nabla \\phi \\cdot \\boldsymbol{n}_k \\big|_{f,k}\\right)\n$$\n代入 $D_{f,k}$ 和梯度近似的给定表达式：\n$$\nD_{f,k} = \\frac{2 D_i D_{N_k}}{D_i + D_{N_k}} \\quad \\text{和} \\quad \\nabla \\phi \\cdot \\boldsymbol{n}_k \\big|_{f,k} \\approx \\frac{\\phi_{N_k} - \\phi_i}{d_k}\n$$\n因此，流出单元 $i$ 并穿过面 $k$ 的总通量近似为：\n$$\n\\int_{f_k} \\boldsymbol{j} \\cdot \\boldsymbol{n}_k \\, \\mathrm{d}\\ell \\approx - \\left( \\frac{2 D_i D_{N_k}}{D_i + D_{N_k}} \\right) \\left( \\frac{\\phi_{N_k} - \\phi_i}{d_k} \\right) \\ell_k\n$$\n现在，我们将所有近似项组合成积分平衡方程：\n$$\nA_i \\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} + \\sum_{k=1}^{6} \\left[ - \\frac{2 \\ell_k D_i D_{N_k}}{d_k (D_i + D_{N_k})} (\\phi_{N_k} - \\phi_i) \\right] = A_i S_i\n$$\n问题要求解方程 $A_i \\,\\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} = R_i$ 的右侧项 $R_i$。我们通过将求和项移到右侧，将推导出的方程重排为此形式：\n$$\nA_i \\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} = A_i S_i - \\sum_{k=1}^{6} \\left[ - \\frac{2 \\ell_k D_i D_{N_k}}{d_k (D_i + D_{N_k})} (\\phi_{N_k} - \\phi_i) \\right]\n$$\n简化该表达式，得到右侧项的最终形式：\n$$\nA_i \\frac{\\mathrm{d}\\phi_i}{\\mathrm{d} t} = A_i S_i + \\sum_{k=1}^{6} \\frac{2 \\ell_k D_i D_{N_k}}{d_k (D_i + D_{N_k})} (\\phi_{N_k} - \\phi_i)\n$$\n这个表达式代表了源项和来自所有相邻单元的扩散通量的净效应，即所要求的右侧项 $R_i$。$\\phi_i$、$\\phi_{N_k}$ 和 $S_i$ 对时间的依赖性是隐式理解的。", "answer": "$$\n\\boxed{\\sum_{k=1}^{6} \\left( \\frac{2 \\ell_k D_i D_{N_k}}{d_k (D_i + D_{N_k})} \\left(\\phi_{N_k} - \\phi_i\\right) \\right) + A_i S_i}\n$$", "id": "2379775"}, {"introduction": "将离散方程转化为可执行的代码是理论联系实际的关键一步。在本练习中，你将为一个简单的 $1$D 稳态扩散问题编写一个完整的有限体积求解器。此实践的重点是使用“虚拟单元”方法处理混合边界条件，并通过与精确解的比较来验证你的代码，这是计算科学中不可或缺的验证环节。", "problem": "您需要使用虚拟单元（ghost cells）为具有混合边界条件的稳态、无源扩散问题实现一维守恒有限体积法（FVM）。其基本依据是积分守恒律：在稳态、无源的情况下，通过任意控制体积边界的净向外通量为零。控制定律为总通量即为扩散通量，$\\; \\vec{f} = -k \\nabla u \\;$，其中 $k$ 是一个正常数，$u$ 是一个标量场。在域 $\\; x \\in [0,L] \\;$ 上，假设 $k$ 是空间常数且为正。对于一个控制体积，守恒声明为其边界上 $\\vec{f} \\cdot \\hat{n}$ 的积分为零。在一维空间中，这简化为在稳态下，每个控制体积的左侧面通量等于右侧面通量。\n\n使用一个包含 $\\; N \\;$ 个控制体积的均匀网格，单元中心位于 $\\; x_i \\in (0,L) \\;$，间距为 $\\; \\Delta x = L/N \\;$。使用域外的虚拟单元来施加边界条件。通过相邻单元中心（对于边界面，包括虚拟单元中心）之间的二阶中心差分来近似面梯度。位于 $\\; x=0 \\;$ 的左边界是关于总通量的 Neumann 条件，$\\; \\vec{f} \\cdot \\hat{n} = g \\;$，其中 $\\; \\hat{n} \\;$ 是向外单位法向量。位于 $\\; x=L \\;$ 的右边界是关于解的 Dirichlet 条件，$\\; u = u_R \\;$。所有量均视为无量纲。\n\n待完成的任务：\n- 从积分守恒律和扩散通量的定义出发，使用面法向梯度的二阶中心差分为每个内部控制体积构建守恒通量平衡。引入虚拟单元，通过面通量和面值在离散层面施加左侧的 Neumann 边界条件 $\\; \\vec{f} \\cdot \\hat{n} = g \\;$ 和右侧的 Dirichlet 边界条件 $\\; u = u_R \\;$。为内部未知量 $\\; \\{u_i\\}_{i=1}^{N} \\;$ 组装并求解得到的线性系统。\n- 为了验证，推导由守恒律和给定边界条件所蕴含的精确连续解，并在控制体积中心 $\\; x_i = (i - \\tfrac{1}{2}) \\Delta x \\;$（其中 $\\; i = 1, \\dots, N \\;$）处对其进行求值。计算在所有内部中心点上，数值解与精确解之间的最大绝对误差。\n- 将您的实现设计为可由 $\\; (N, L, k, g, u_R) \\;$ 参数化。\n\n测试套件：\n- 案例 1（正常路径）：$\\; N = 10 \\;$, $\\; L = 1.0 \\;$, $\\; k = 2.0 \\;$, $\\; g = 1.0 \\;$, $\\; u_R = 3.0 \\;$。\n- 案例 2（单单元边缘情况）：$\\; N = 1 \\;$, $\\; L = 1.0 \\;$, $\\; k = 2.0 \\;$, $\\; g = 1.0 \\;$, $\\; u_R = 3.0 \\;$。\n- 案例 3（通量符号改变）：$\\; N = 8 \\;$, $\\; L = 2.0 \\;$, $\\; k = 0.5 \\;$, $\\; g = -1.0 \\;$, $\\; u_R = 0.0 \\;$。\n- 案例 4（小域，大扩散系数）：$\\; N = 3 \\;$, $\\; L = 0.3 \\;$, $\\; k = 10.0 \\;$, $\\; g = 1.5 \\;$, $\\; u_R = 1.2 \\;$。\n\n最终程序要求的行为：\n- 按照描述实现带虚拟单元的守恒 FVM，为每个测试案例求解线性系统，计算该案例中数值解与单元中心处精确解的最大绝对误差，并报告该误差。\n- 输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，列表中的结果与测试案例顺序相同，每个误差四舍五入到 $\\; 10 \\;$ 位小数（例如，$\\;[0.0000000000,0.1234500000,0.0000000000,0.0000000000]\\;$）。", "solution": "用户要求使用守恒通量平衡方法和虚拟单元处理边界条件，为扩散方程实现一维、稳态、无源的有限体积法（FVM）。\n\n对于一个控制体积 $V$，其积分形式的控制守恒律为 $\\oint_{\\partial V} \\vec{f} \\cdot \\hat{n} \\, dS = 0$，其中 $\\vec{f}$ 是通量矢量，$\\hat{n}$ 是向外单位法向量。在一维域 $x \\in [0, L]$ 上，对于控制体积 $V_i = [x_{i-1/2}, x_{i+1/2}]$，这简化为通量平衡：\n$$f(x_{i+1/2}) - f(x_{i-1/2}) = 0$$\n这意味着通量 $f(x)$ 在整个域中是恒定的。通量定义为 $\\vec{f} = -k \\nabla u$，在一维中即为 $f(x) = -k \\frac{du}{dx}$，其中 $k$ 是一个正常数。\n\n边界条件是：\n1.  位于 $x=0$ 的左边界：一个关于总通量的 Neumann 条件，$\\vec{f} \\cdot \\hat{n} = g$。向外法向量在 $x$ 方向上是 $\\hat{n} = -1$，因此 $(f(0)\\hat{i}) \\cdot (-\\hat{i}) = -f(0) = g$。这意味着左边界处的通量为 $f(0) = -g$。由于通量在任何地方都必须是恒定的，我们有对于所有 $x \\in [0, L]$，$f(x) = -g$。\n2.  位于 $x=L$ 的右边界：一个 Dirichlet 条件，$u(L) = u_R$。\n\n根据恒定通量关系，我们可以推导出精确的解析解：\n$$-k \\frac{du}{dx} = -g \\implies \\frac{du}{dx} = \\frac{g}{k}$$\n对 $x$ 积分得到：\n$$u(x) = \\frac{g}{k}x + C$$\n在 $x=L$ 处应用 Dirichlet 条件：\n$$u(L) = \\frac{g}{k}L + C = u_R \\implies C = u_R - \\frac{gL}{k}$$\n因此，精确解为：\n$$u_{exact}(x) = \\frac{g}{k}x + u_R - \\frac{gL}{k} = \\frac{g}{k}(x - L) + u_R$$\n\n对于 FVM 实现，我们将域离散为 $N$ 个宽度为 $\\Delta x = L/N$ 的均匀控制体积（单元）。单元 $i$ 的中心位于 $x_i = (i - \\frac{1}{2})\\Delta x$（对于 $i = 1, \\dots, N$）。单元面位于 $x_{i+1/2} = i \\Delta x$。\n\n单元 $i$ 的通量平衡为 $f_{i+1/2} - f_{i-1/2} = 0$，其中 $f_{i \\pm 1/2}$ 是单元面上的通量。我们使用相邻单元中心之间的二阶中心差分来近似面通量。对于位于单元 $i-1$ 和单元 $i$ 之间的通用面 $x_{i-1/2}$，通量为：\n$$f_{i-1/2} \\approx -k \\frac{u_i - u_{i-1}}{\\Delta x}$$\n将此代入内部单元 $i$（其中 $1 < i < N$）的通量平衡方程：\n$$-k \\frac{u_{i+1} - u_i}{\\Delta x} - \\left(-k \\frac{u_i - u_{i-1}}{\\Delta x}\\right) = 0$$\n$$\\implies -u_{i-1} + 2u_i - u_{i+1} = 0$$\n\n为了处理边界条件，我们在单元 1 的左侧引入一个虚拟单元 0，在单元 $N$ 的右侧引入一个虚拟单元 $N+1$。\n在左边界（$x=0$，面 $x_{1/2}$），通量是已知的：$f_{1/2} = -g$。我们通过将我们的数值通量近似值设为该值来强制执行此条件：\n$$f_{1/2} = -k \\frac{u_1 - u_0}{\\Delta x} = -g \\implies u_0 = u_1 - \\frac{g \\Delta x}{k}$$\n单元 $i=1$ 的 FVM 方程为 $-u_0 + 2u_1 - u_2 = 0$。代入虚拟值 $u_0$ 的表达式：\n$$-(u_1 - \\frac{g \\Delta x}{k}) + 2u_1 - u_2 = 0 \\implies u_1 - u_2 = -\\frac{g \\Delta x}{k}$$\n\n在右边界（$x=L$，面 $x_{N+1/2}$），场值是已知的：$u(L) = u_R$。我们通过假设边界上的值是相邻单元中心值的平均值，来使用二阶近似：\n$$u_R = \\frac{u_N + u_{N+1}}{2} \\implies u_{N+1} = 2u_R - u_N$$\n单元 $i=N$ 的 FVM 方程为 $-u_{N-1} + 2u_N - u_{N+1} = 0$。代入 $u_{N+1}$ 的表达式：\n$$-u_{N-1} + 2u_N - (2u_R - u_N) = 0 \\implies -u_{N-1} + 3u_N = 2u_R$$\n\n这会产生一个关于未知单元中心值 $\\mathbf{u} = [u_1, u_2, \\dots, u_N]^T$ 的线性系统 $A\\mathbf{u} = \\mathbf{b}$。对于 $N > 1$，矩阵 $A$ 和向量 $\\mathbf{b}$ 的构造如下：\n-   第 1 行：$A_{1,1}=1$, $A_{1,2}=-1$。$b_1 = -g\\Delta x/k$。\n-   第 $i=2, \\dots, N-1$ 行：$A_{i,i-1}=-1$, $A_{i,i}=2$, $A_{i,i+1}=-1$。$b_i = 0$。\n-   第 $N$ 行：$A_{N,N-1}=-1$, $A_{N,N}=3$。$b_N = 2u_R$。\n\n对于边缘情况 $N=1$，该单元被两个域边界所界定。FVM 方程 $-u_0 + 2u_1 - u_2 = 0$ 需要代入两个虚拟单元的值：\n$$-(u_1 - \\frac{g \\Delta x}{k}) + 2u_1 - (2u_R - u_1) = 0$$\n$$2u_1 = 2u_R - \\frac{g \\Delta x}{k} \\implies u_1 = u_R - \\frac{g \\Delta x}{2k}$$\n由于对于 $N=1$，$\\Delta x=L$，所以 $u_1 = u_R - gL/(2k)$。\n\n通过求解这个线性系统可以获得数值解。然后，通过计算所有单元中心处数值解 $u_i$ 和精确解 $u_{exact}(x_i)$ 之间的最大绝对差来计算误差。值得注意的是，由于精确解是 $x$ 的线性函数，其二阶及更高阶导数均为零。FVM 模板的截断误差和边界条件近似涉及这些高阶导数。因此，对于这个特定问题，该方法是精确的，计算出的误差在机器浮点精度范围内应为零。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_fvm(N, L, k, g, u_R):\n    \"\"\"\n    Solves a 1D steady-state diffusion problem using the Finite Volume Method.\n\n    This function implements the conservative FVM with ghost cells for a\n    1D diffusion problem on the domain [0, L] with a Neumann condition at x=0\n    and a Dirichlet condition at x=L.\n\n    Args:\n        N (int): Number of control volumes.\n        L (float): Length of the domain.\n        k (float): Diffusion coefficient.\n        g (float): Prescribed flux at the left boundary (f_vec . n_out = g).\n        u_R (float): Prescribed value at the right boundary.\n\n    Returns:\n        float: The maximum absolute error between the numerical and exact solutions.\n    \"\"\"\n    dx = L / N\n\n    # Calculate numerical solution u_numerical\n    if N == 1:\n        # Special case for a single control volume\n        u_numerical = np.array([u_R - (g * dx) / (2 * k)])\n    else:\n        # Assemble the linear system A*u = b for N > 1\n        A = np.zeros((N, N))\n        b = np.zeros(N)\n\n        # First row (Neumann BC at x=0)\n        A[0, 0] = 1.0\n        A[0, 1] = -1.0\n        b[0] = -g * dx / k\n\n        # Interior rows\n        for i in range(1, N - 1):\n            A[i, i - 1] = -1.0\n            A[i, i] = 2.0\n            A[i, i + 1] = -1.0\n            b[i] = 0.0\n\n        # Last row (Dirichlet BC at x=L)\n        A[N - 1, N - 2] = -1.0\n        A[N - 1, N - 1] = 3.0\n        b[N - 1] = 2 * u_R\n\n        # Solve the linear system for cell-centered values\n        u_numerical = np.linalg.solve(A, b)\n\n    # Calculate cell center coordinates\n    x_coords = dx * (np.arange(1, N + 1) - 0.5)\n\n    # Calculate the exact solution at cell centers\n    # u_exact(x) = (g/k)*(x - L) + u_R\n    u_exact = (g / k) * (x_coords - L) + u_R\n\n    # Compute the maximum absolute error\n    max_error = np.max(np.abs(u_numerical - u_exact))\n\n    return max_error\n\n\ndef solve():\n    \"\"\"\n    Runs the FVM solver for the test cases specified in the problem statement\n    and prints the results in the required format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (N, L, k, g, u_R)\n        (10, 1.0, 2.0, 1.0, 3.0),\n        (1, 1.0, 2.0, 1.0, 3.0),\n        (8, 2.0, 0.5, -1.0, 0.0),\n        (3, 0.3, 10.0, 1.5, 1.2),\n    ]\n\n    results = []\n    for case in test_cases:\n        N, L, k, g, u_R = case\n        error = solve_fvm(N, L, k, g, u_R)\n        results.append(f\"{error:.10f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2379797"}, {"introduction": "如果通量平衡没有被精确地维持，会发生什么？这个练习通过一个精心设计的非守恒数值格式，来揭示守恒形式的至关重要性。通过实现这个方案并追踪总“质量” $M$ 随时间的变化，你将深刻体会到为什么严格的通量“伸缩求和”是有限体积方法的基石。", "problem": "考虑一个在周期性域上的无量纲形式的一维线性平流方程，其中单元均匀，\n$$\n\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0,\\quad x \\in [0,L],\\quad t \\ge 0,\n$$\n在 $[0,L]$ 上具有周期性边界条件，以及一个空间上恒定的平流速度 $a \\in \\mathbb{R}$。设该域被划分为 $N$ 个宽度为 $\\Delta x = L/N$ 的均匀有限体积（单元），单元中心位于 $x_i = (i+\\tfrac{1}{2})\\Delta x$，其中 $i \\in \\{0,1,\\dots,N-1\\}$。令 $u_i^n$ 表示在离散时间层 $t^n = n\\,\\Delta t$ 时，$u(x,t)$ 在单元 $i$ 上的单元平均值，其中整数 $n \\ge 0$ 且时间步长 $\\Delta t > 0$。所有量均为无量纲。\n\n定义交界面 $x_{i+\\frac{1}{2}}$ 处的数值面通量为迎风选择\n$$\nF_{i+\\frac{1}{2}}^n =\n\\begin{cases}\na\\,u_i^n, & a \\ge 0 \\\\\na\\,u_{i+1}^n, & a < 0\n\\end{cases}\n$$\n其中索引对 $N$ 取模以实现周期性。考虑以下面不平衡更新格式，该格式对每个单元的左、右面使用不同的权重：\n$$\nu_i^{n+1} \\;=\\; u_i^n \\;-\\; \\frac{\\Delta t}{\\Delta x}\\Big[(1+\\eta)\\,F_{i+\\frac{1}{2}}^n \\;-\\; (1-\\eta)\\,F_{i-\\frac{1}{2}}^n\\Big],\n$$\n其中 $\\eta \\in \\mathbb{R}$ 是一个固定的偏差参数。当 $\\eta \\ne 0$ 时，此更新格式作为一个加权面平衡看似合理，但它并非严格的伸缩通量差分。\n\n初始数据由从周期性剖面采样得到的单元平均值给出\n$$\nu(x,0) = 1 + 0.2 \\,\\sin(2\\pi x/L).\n$$\n你必须在均匀网格上实现上述具有周期性边界的格式，并为每个测试用例计算在最终时间 $t^{n_{\\text{steps}}} = n_{\\text{steps}}\\,\\Delta t$ 时的最终相对全局质量误差。时间层 $n$ 的离散全局质量为\n$$\nM^n = \\Delta x \\sum_{i=0}^{N-1} u_i^n.\n$$\n为每个测试用例报告一对浮点数\n$$\n\\Big[\\,E_{\\text{num}},\\;E_{\\text{theory}}\\,\\Big]\n\\quad\\text{其中}\\quad\nE_{\\text{num}} = \\frac{M^{n_{\\text{steps}}} - M^0}{M^0},\\qquad\nE_{\\text{theory}} = \\left(1 - 2\\,\\eta\\,a\\,\\frac{\\Delta t}{\\Delta x}\\right)^{n_{\\text{steps}}} - 1,\n$$\n其中 $E_{\\text{theory}}$ 是上述更新规则在周期性索引下所蕴含的解析预测的相对质量误差。\n\n测试套件 (所有用例中 $L=1$)：\n- 用例 1 (标准情况)：$N=100$, $a=1$, $\\Delta t=0.005$, $\\eta=0.1$, $n_{\\text{steps}}=40$。\n- 用例 2 (保守情况)：$N=64$, $a=1$, $\\Delta t=0.0046875$, $\\eta=0$, $n_{\\text{steps}}=50$。\n- 用例 3 (负平流速度下的质量增长)：$N=80$, $a=-1.5$, $\\Delta t=\\tfrac{1}{300}$, $\\eta=0.25$, $n_{\\text{steps}}=5$。\n- 用例 4 (零平流)：$N=32$, $a=0$, $\\Delta t=0.01$, $\\eta=0.3$, $n_{\\text{steps}}=100$。\n\n最终输出格式：\n你的程序应生成单行输出，包含一个逗号分隔的列表形式的结果，其中每个内部列表对应一个测试用例，并按 $[E_{\\text{num}},E_{\\text{theory}}]$ 的顺序排列。例如，输出必须具有以下形式\n$$\n\\big[ [e_{1,\\text{num}},e_{1,\\text{theory}}], [e_{2,\\text{num}},e_{2,\\text{theory}}], [e_{3,\\text{num}},e_{3,\\text{theory}}], [e_{4,\\text{num}},e_{4,\\text{theory}}] \\big].\n$$\n只应打印这单行内容。", "solution": "对所述问题进行验证。\n\n**第1步：提取的已知条件**\n*   **控制方程**：一维线性平流方程，$\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0$。\n*   **域**：$x \\in [0,L]$, $t \\ge 0$，具有周期性边界条件。\n*   **平流速度**：$a \\in \\mathbb{R}$，常数。\n*   **离散化**：$N$ 个宽度为 $\\Delta x = L/N$ 的均匀有限体积。单元中心位于 $x_i = (i+\\tfrac{1}{2})\\Delta x$，其中 $i \\in \\{0,1,\\dots,N-1\\}$。\n*   **状态变量**：$u_i^n$ 是在时间 $t^n = n\\Delta t$ 时单元 $i$ 中的单元平均值。\n*   **数值通量**：在面 $x_{i+\\frac{1}{2}}$ 处的迎风通量是 $F_{i+\\frac{1}{2}}^n = \\begin{cases} a\\,u_i^n, & a \\ge 0 \\\\ a\\,u_{i+1}^n, & a < 0 \\end{cases}$，使用周期性索引。\n*   **更新格式**：$u_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x}\\Big[(1+\\eta)\\,F_{i+\\frac{1}{2}}^n - (1-\\eta)\\,F_{i-\\frac{1}{2}}^n\\Big]$，其中偏差参数为 $\\eta \\in \\mathbb{R}$。\n*   **初始条件**：从 $u(x,0) = 1 + 0.2 \\,\\sin(2\\pi x/L)$ 采样得到的单元平均值。\n*   **关注量**：离散全局质量 $M^n = \\Delta x \\sum_{i=0}^{N-1} u_i^n$。\n*   **输出**：对于每个测试用例，报告一对值 $[E_{\\text{num}}, E_{\\text{theory}}]$，其中：\n    *   $E_{\\text{num}} = \\frac{M^{n_{\\text{steps}}} - M^0}{M^0}$\n    *   $E_{\\text{theory}} = \\left(1 - 2\\,\\eta\\,a\\,\\frac{\\Delta t}{\\Delta x}\\right)^{n_{\\text{steps}}} - 1$\n*   **测试用例**：所有用例中 $L=1$。\n    1.  $N=100$, $a=1$, $\\Delta t=0.005$, $\\eta=0.1$, $n_{\\text{steps}}=40$。\n    2.  $N=64$, $a=1$, $\\Delta t=0.0046875$, $\\eta=0$, $n_{\\text{steps}}=50$。\n    3.  $N=80$, $a=-1.5$, $\\Delta t=\\tfrac{1}{300}$, $\\eta=0.25$, $n_{\\text{steps}}=5$。\n    4.  $N=32$, $a=0$, $\\Delta t=0.01$, $\\eta=0.3$, $n_{\\text{steps}}=100$。\n\n**第2步：验证**\n对问题进行严格的科学和逻辑审查。\n*   **科学依据**：该问题涉及线性平流方程的数值解法，这是计算工程和物理学中的一个基础课题。所提出的数值格式是标准有限体积法的一种变体。对其非保守性质的分析是一个有效且具有指导意义的练习。理论质量误差公式可以从第一性原理推导出来，如下所示，这证实了其科学合理性。\n*   **适定性**：问题是适定的。所有必需的参数、初始条件、边界条件和定义都已提供。任务的规定没有歧义。对于给定的测试用例，格式的稳定性得到满足，因为 Courant-Friedrichs-Lewy (CFL) 数 $C = |a|\\frac{\\Delta t}{\\Delta x}$ 在所有用例中均小于或等于 $1$。\n*   **一致性与完备性**：问题是自洽且内部一致的。没有缺失数据或矛盾的约束。\n\n**第3步：结论**\n问题被判定为**有效**。这是一个清晰、一致且在科学上合理的数值分析问题。\n\n**求解推导**\n有限体积法的基本原理是某个量的守恒，这是通过确保进出域边界的通量总和为零来实现的。单元 $i$ 的标准守恒更新格式为 $u_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x}(F_{i+\\frac{1}{2}}^n - F_{i-\\frac{1}{2}}^n)$。当在周期性域上对所有单元求和时，通量项形成一个抵消为零的伸缩求和，因此总质量 $M^n = \\Delta x \\sum_{i=0}^{N-1} u_i^n$ 是守恒的，即 $M^{n+1} = M^n$。\n\n指定的格式 $u_i^{n+1} = u_i^n - \\frac{\\Delta t}{\\Delta x}\\Big[(1+\\eta)\\,F_{i+\\frac{1}{2}}^n - (1-\\eta)\\,F_{i-\\frac{1}{2}}^n\\Big]$ 在 $\\eta \\ne 0$ 时是一个非守恒的修改。我们必须分析总质量 $M^n$ 在此规则下的演化。\n\n将更新规则对所有单元 $i=0, \\dots, N-1$ 求和，并乘以 $\\Delta x$：\n$$\n\\Delta x \\sum_{i=0}^{N-1} u_i^{n+1} = \\Delta x \\sum_{i=0}^{N-1} u_i^n - \\Delta t \\sum_{i=0}^{N-1} \\Big[(1+\\eta)\\,F_{i+\\frac{1}{2}}^n - (1-\\eta)\\,F_{i-\\frac{1}{2}}^n\\Big]\n$$\n这等价于：\n$$\nM^{n+1} = M^n - \\Delta t \\left[ (1+\\eta)\\sum_{i=0}^{N-1}F_{i+\\frac{1}{2}}^n - (1-\\eta)\\sum_{i=0}^{N-1}F_{i-\\frac{1}{2}}^n \\right]\n$$\n由于周期性索引，对面 $i-\\frac{1}{2}$ 求和与对面 $i+\\frac{1}{2}$ 求和是相同的：$\\sum_{i=0}^{N-1} F_{i-\\frac{1}{2}}^n = \\sum_{j=-1}^{N-2} F_{j+\\frac{1}{2}}^n = \\sum_{j=0}^{N-1} F_{j+\\frac{1}{2}}^n$。令 $\\mathcal{F}^n = \\sum_{i=0}^{N-1}F_{i+\\frac{1}{2}}^n$。表达式简化为：\n$$\nM^{n+1} = M^n - \\Delta t \\Big[ (1+\\eta)\\mathcal{F}^n - (1-\\eta)\\mathcal{F}^n \\Big] = M^n - 2\\eta\\Delta t \\mathcal{F}^n\n$$\n现在，我们计算总通量 $\\mathcal{F}^n$。使用迎风通量的定义。\n如果 $a \\ge 0$，则 $F_{i+\\frac{1}{2}}^n = a u_i^n$。总和为 $\\mathcal{F}^n = \\sum_{i=0}^{N-1} a u_i^n = a \\sum_{i=0}^{N-1} u_i^n = \\frac{a}{\\Delta x} M^n$。\n如果 $a < 0$，则 $F_{i+\\frac{1}{2}}^n = a u_{i+1}^n$。总和为 $\\mathcal{F}^n = \\sum_{i=0}^{N-1} a u_{i+1}^n = a \\sum_{j=1}^{N} u_j^n$。由于周期性（$u_N^n=u_0^n$），这同样是 $\\mathcal{F}^n = a \\sum_{j=0}^{N-1} u_j^n = \\frac{a}{\\Delta x} M^n$。\n此结果对任何 $a \\in \\mathbb{R}$ 都成立。\n\n将 $\\mathcal{F}^n$ 的表达式代入质量演化方程，得到 $M^n$ 的递推关系：\n$$\nM^{n+1} = M^n - 2\\eta\\Delta t \\left(\\frac{a}{\\Delta x} M^n\\right) = M^n \\left(1 - 2\\eta a \\frac{\\Delta t}{\\Delta x}\\right)\n$$\n这是一个等比级数。经过 $n_{\\text{steps}}$ 个时间步后，最终质量 $M^{n_{\\text{steps}}}$ 与初始质量 $M^0$ 的关系为：\n$$\nM^{n_{\\text{steps}}} = M^0 \\left(1 - 2\\eta a \\frac{\\Delta t}{\\Delta x}\\right)^{n_{\\text{steps}}}\n$$\n因此，理论相对质量误差 $E_{\\text{theory}}$ 为：\n$$\nE_{\\text{theory}} = \\frac{M^{n_{\\text{steps}}} - M^0}{M^0} = \\left(1 - 2\\eta a \\frac{\\Delta t}{\\Delta x}\\right)^{n_{\\text{steps}}} - 1\n$$\n这证实了问题陈述中提供的公式。任务简化为实现数值格式并将其计算出的质量误差 $E_{\\text{num}}$ 与此解析预测进行比较。\n\n**算法实现**\n1.  对于每个测试用例，定义网格参数：单元宽度 $\\Delta x = L/N$ 和单元中心坐标 $x_i = (i+0.5)\\Delta x$，其中 $i \\in \\{0, \\dots, N-1\\}$。\n2.  通过在单元中心采样初始剖面来初始化解向量 $u^0$：$u_i^0 = 1 + 0.2 \\sin(2\\pi x_i/L)$。\n3.  计算初始全局质量 $M^0 = \\Delta x \\sum_{i=0}^{N-1} u_i^0$。对于给定的初始剖面，解析积分表明 $M^0 = L$。由于正弦函数的对称性，点采样也得到 $M^0 = L$。\n4.  开始时间步进循环，从 $n=0$到 $n_{\\text{steps}}-1$。\n5.  在循环内部，对于当前解 $u^n$：\n    a.  计算面通量向量 $F_{i+\\frac{1}{2}}^n$。这根据 $a$ 的符号来完成。使用数组移位（例如 `numpy.roll`）的向量化操作对于处理周期性边界是高效的。\n    b.  通过对右面通量向量进行周期性移位来构建左面的通量 $F_{i-\\frac{1}{2}}^n$。\n    c.  应用面不平衡更新公式来同时计算整个解向量 $u^{n+1}$。\n6.  循环终止后，计算最终全局质量 $M^{n_{\\text{steps}}} = \\Delta x \\sum_{i=0}^{N-1} u_i^{n_{\\text{steps}}}$。\n7.  使用它们的定义计算数值和理论相对质量误差 $E_{\\text{num}}$ 和 $E_{\\text{theory}}$。\n8.  存储这对值 $[E_{\\text{num}}, E_{\\text{theory}}]$，然后进行下一个测试用例。\n9.  按指定格式格式化最终的结果集合。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef run_simulation(L, N, a, dt, eta, n_steps):\n    \"\"\"\n    Runs a single simulation of the face-imbalanced finite volume scheme.\n\n    Args:\n        L (float): Domain length.\n        N (int): Number of cells.\n        a (float): Advection speed.\n        dt (float): Time step size.\n        eta (float): Face imbalance parameter.\n        n_steps (int): Number of time steps.\n\n    Returns:\n        list: A list containing [E_num, E_theory].\n    \"\"\"\n    # 1. Grid setup\n    dx = L / N\n    # Cell centers, not cell boundaries\n    x_centers = (np.arange(N) + 0.5) * dx\n\n    # 2. Initial condition\n    # Sampled at cell centers.\n    u = 1.0 + 0.2 * np.sin(2 * np.pi * x_centers / L)\n\n    # 3. Initial mass calculation\n    # For this IC, M0 is analytically L, but we compute from the discrete data\n    # to maintain consistency for E_num calculation.\n    M0 = dx * np.sum(u)\n\n    # 4. Time-stepping loop\n    for _ in range(n_steps):\n        # 5a. Compute fluxes at right faces (i + 1/2) using upwinding\n        if a >= 0:\n            # Information comes from cell i (the current cell)\n            flux_right_faces = a * u\n        else:\n            # Information comes from cell i+1 (the cell to the right)\n            # np.roll(u, -1) provides the array of right neighbors u_{i+1}\n            flux_right_faces = a * np.roll(u, -1)\n        \n        # 5b. Compute fluxes at left faces (i - 1/2)\n        # The flux at face i-1/2 is the same as flux_right_faces for cell i-1.\n        # This is a circular shift to the right.\n        flux_left_faces = np.roll(flux_right_faces, 1)\n\n        # 5c. Apply the face-imbalanced update rule\n        u = u - (dt / dx) * ((1 + eta) * flux_right_faces - (1 - eta) * flux_left_faces)\n\n    # 6. Final mass calculation\n    Mf = dx * np.sum(u)\n\n    # 7. Compute numerical and theoretical errors\n    E_num = (Mf - M0) / M0\n    E_theory = (1 - 2 * eta * a * dt / dx)**n_steps - 1\n\n    # In cases where theory predicts exactly 0, ensure output is 0.0, not a small float.\n    if np.isclose(E_num, 0.0):\n        E_num = 0.0\n    if np.isclose(E_theory, 0.0):\n        E_theory = 0.0\n\n    return [E_num, E_theory]\n\ndef solve():\n    \"\"\"\n    Defines and runs the test suite, then prints the results in the required format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (L, N, a, dt, eta, n_steps)\n        # Case 1: happy path\n        (1.0, 100, 1.0, 0.005, 0.1, 40),\n        # Case 2: conservative boundary\n        (1.0, 64, 1.0, 0.0046875, 0.0, 50),\n        # Case 3: mass growth with negative advection\n        (1.0, 80, -1.5, 1.0/300.0, 0.25, 5),\n        # Case 4: zero advection\n        (1.0, 32, 0.0, 0.01, 0.3, 100),\n    ]\n\n    results = []\n    for case in test_cases:\n        result = run_simulation(*case)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    # The format string produces output like: [[v1,v2],[v3,v4]]\n    # where map(str, results) converts each inner list [v1, v2] to its string '[v1, v2]'.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2379829"}]}