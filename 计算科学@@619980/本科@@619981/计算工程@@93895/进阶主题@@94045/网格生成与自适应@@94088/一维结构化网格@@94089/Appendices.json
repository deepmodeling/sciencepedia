{"hands_on_practices": [{"introduction": "有限差分法利用邻近网格点上的函数值来近似导数，其精度由截断误差来衡量，而截断误差可通过泰勒级数展开进行分析。本练习旨在通过推导和比较两种不同差分格式的截断误差，让您亲身体验格式设计如何从根本上影响数值精度。这个思想实验将清晰地展示，在近似一阶导数时，仅仅改变计算模板的宽度就会对误差产生显著影响 [@problem_id:2440670]。", "problem": "考虑一个均匀的一维结构化网格，其节点位置为 $x_i = x_0 + i h$，其中 $h > 0$ 是恒定的网格间距，$i$ 是一个整数索引。设 $f(x)$ 是一个标量场，在 $x_i$ 的邻域内至少具有5阶连续导数。一阶导数 $f^{\\prime}(x_i)$ 的两种离散近似定义如下：\n\n- 使用紧邻节点的标准中心差分格式：\n$$D_{\\mathrm{std}} f\\big|_{x_i} = \\frac{f(x_{i+1}) - f(x_{i-1})}{2 h}.$$\n\n- 一种修正格式，它通过只连接每隔一个的节点来强制产生一个连接“空洞”：\n$$D_{\\mathrm{hole}} f\\big|_{x_i} = \\frac{f(x_{i+2}) - f(x_{i-2})}{4 h}.$$\n\n假设 $f$ 足够光滑且忽略舍入误差，每种近似都会产生一个与 $h^2 f^{(3)}(x_i)$ 成正比的首项截断误差项。将 $D_{\\mathrm{std}}$ 和 $D_{\\mathrm{hole}}$ 的首项截断误差中乘以 $h^2 f^{(3)}(x_i)$ 的标量系数（包含符号）分别定义为 $C_{\\mathrm{std}}$ 和 $C_{\\mathrm{hole}}$。请确定比率 $R = \\left|\\dfrac{C_{\\mathrm{hole}}}{C_{\\mathrm{std}}}\\right|$，结果为一个实数。无需四舍五入。", "solution": "该问题陈述已经过验证，具有科学依据、适定且客观。它提出了一个数值分析中的标准问题，涉及有限差分格式截断误差的推导与比较。我们将基于泰勒级数展开进行严谨的求解。\n\n分析的核心是将函数 $f(x)$ 在网格点 $x_i$ 附近展开为泰勒级数。函数被假设为足够光滑，允许其展开到所需的阶数。$f(x)$ 在点 $x_i+\\delta$ 的泰勒级数由下式给出：\n$$f(x_i + \\delta) = f(x_i) + \\delta f'(x_i) + \\frac{\\delta^2}{2!} f''(x_i) + \\frac{\\delta^3}{3!} f^{(3)}(x_i) + \\frac{\\delta^4}{4!} f^{(4)}(x_i) + \\dots$$\n其中撇号和括号中的上标表示关于 $x$ 的导数。\n\n首先，我们确定标准中心差分近似 $D_{\\mathrm{std}} f\\big|_{x_i}$ 的系数 $C_{\\mathrm{std}}$。其公式为：\n$$D_{\\mathrm{std}} f\\big|_{x_i} = \\frac{f(x_{i+1}) - f(x_{i-1})}{2 h}$$\n我们需要 $f(x_{i+1}) = f(x_i+h)$ 和 $f(x_{i-1}) = f(x_i-h)$ 的展开式。\n令 $\\delta = h$：\n$$f(x_{i+1}) = f(x_i) + h f'(x_i) + \\frac{h^2}{2} f''(x_i) + \\frac{h^3}{6} f^{(3)}(x_i) + \\frac{h^4}{24} f^{(4)}(x_i) + O(h^5)$$\n令 $\\delta = -h$：\n$$f(x_{i-1}) = f(x_i) - h f'(x_i) + \\frac{h^2}{2} f''(x_i) - \\frac{h^3}{6} f^{(3)}(x_i) + \\frac{h^4}{24} f^{(4)}(x_i) + O(h^5)$$\n用第一个展开式减去第二个展开式，得到该格式的分子：\n$$f(x_{i+1}) - f(x_{i-1}) = (f(x_i) - f(x_i)) + (h - (-h)) f'(x_i) + (\\frac{h^2}{2} - \\frac{h^2}{2}) f''(x_i) + (\\frac{h^3}{6} - (-\\frac{h^3}{6})) f^{(3)}(x_i) + O(h^5)$$\n$$f(x_{i+1}) - f(x_{i-1}) = 2 h f'(x_i) + \\frac{2 h^3}{6} f^{(3)}(x_i) + O(h^5) = 2 h f'(x_i) + \\frac{h^3}{3} f^{(3)}(x_i) + O(h^5)$$\n现在，将此代入 $D_{\\mathrm{std}} f\\big|_{x_i}$ 的表达式中：\n$$D_{\\mathrm{std}} f\\big|_{x_i} = \\frac{2 h f'(x_i) + \\frac{h^3}{3} f^{(3)}(x_i) + O(h^5)}{2 h} = f'(x_i) + \\frac{h^2}{6} f^{(3)}(x_i) + O(h^4)$$\n截断误差 $\\mathcal{E}_{\\mathrm{std}}$ 是近似值与真实导数之间的差值：\n$$\\mathcal{E}_{\\mathrm{std}} = D_{\\mathrm{std}} f\\big|_{x_i} - f'(x_i) = \\frac{h^2}{6} f^{(3)}(x_i) + O(h^4)$$\n该误差的首项被定义为 $C_{\\mathrm{std}} h^2 f^{(3)}(x_i)$。通过直接比较，我们确定该系数为：\n$$C_{\\mathrm{std}} = \\frac{1}{6}$$\n\n接下来，我们对修正格式 $D_{\\mathrm{hole}} f\\big|_{x_i}$ 进行相同的分析。其公式为：\n$$D_{\\mathrm{hole}} f\\big|_{x_i} = \\frac{f(x_{i+2}) - f(x_{i-2})}{4 h}$$\n该格式涉及点 $x_{i+2} = x_i+2h$ 和 $x_{i-2} = x_i-2h$。我们可以使用步长为 $2h$ 的泰勒级数展开。让我们定义一个有效网格间距 $H = 2h$。该格式可以改写为：\n$$D_{\\mathrm{hole}} f\\big|_{x_i} = \\frac{f(x_i+H) - f(x_i-H)}{2 H}$$\n这在结构上与标准中心差分公式相同，只是步长为 $H$ 而非 $h$。因此，其首项截断误差在结构上也将相同，只是用 $H$ 替换了 $h$：\n$$\\mathcal{E}_{\\mathrm{hole}} = \\frac{H^2}{6} f^{(3)}(x_i) + O(H^4)$$\n将 $H = 2h$ 代回表达式中：\n$$\\mathcal{E}_{\\mathrm{hole}} = \\frac{(2h)^2}{6} f^{(3)}(x_i) + O((2h)^4) = \\frac{4h^2}{6} f^{(3)}(x_i) + O(h^4) = \\frac{2}{3} h^2 f^{(3)}(x_i) + O(h^4)$$\n该误差的首项被定义为 $C_{\\mathrm{hole}} h^2 f^{(3)}(x_i)$。通过比较，我们确定该系数为：\n$$C_{\\mathrm{hole}} = \\frac{2}{3}$$\n\n最后，我们需要计算比率 $R = \\left|\\dfrac{C_{\\mathrm{hole}}}{C_{\\mathrm{std}}}\\right|$。使用推导出的系数：\n$$R = \\left|\\frac{2/3}{1/6}\\right| = \\left|\\frac{2}{3} \\cdot \\frac{6}{1}\\right| = \\left|\\frac{12}{3}\\right| = |4|$$\n因此，得到的比率为：\n$$R = 4$$\n这个结果表明，在保持中心差分近似结构的同时，将格式宽度从 $2h$ 增加到 $4h$，会使首项截断误差的系数增加 4 倍。", "answer": "$$\\boxed{4}$$", "id": "2440670"}, {"introduction": "理论分析通常假设网格是光滑的，但在实际应用中，网格可能存在不规则的扰动。本练习将引导您从理论推导转向计算实验，通过编写代码来测量一个中心差分格式在随机扰动网格上的实际收敛阶。通过这个数值实验，您将发现一个深刻的结论：网格质量有时比数值格式的理论精度更为重要，微小且不平滑的网格扰动便可能导致精度阶的下降 [@problem_id:2440669]。", "problem": "考虑开区间定义域 $\\left(0,1\\right)$ 和一个由 $u(x)=\\sin\\!\\left(2\\pi x\\right)$ 给出的连续可微函数 $u:\\left[0,1\\right]\\to\\mathbb{R}$，其中角度以弧度为单位。其精确导数为 $u'(x)=2\\pi\\cos\\!\\left(2\\pi x\\right)$。对于给定的正整数 $N$，定义名义均匀间距 $\\Delta x = 1/N$，并定义一个具有随机扰动节点位置的一维结构化网格，其节点位置由下式给出\n$$\nx_i = i\\,\\Delta x + \\epsilon_i,\\quad i=0,1,\\dots,N,\n$$\n其中 $\\epsilon_0 = 0$ 且扰动满足增量条件\n$$\n\\epsilon_{i+1}-\\epsilon_i \\sim \\text{Uniform}\\!\\left(-\\rho\\,\\Delta x,\\;\\rho\\,\\Delta x\\right)\n$$\n其中抖动参数 $\\rho \\in [0,1)$ 是固定的，且对于 $i=0,1,\\dots,N-1$ 是独立的。对于任何固定的 $\\rho\\in[0,1)$，此构造保证了节点 $x_0<x_1<\\cdots<x_N$ 是严格递增的。\n\n在内部节点 $i=1,2,\\dots,N-1$ 上定义三点对称中心差分算子\n$$\n\\left(Du\\right)\\!\\left(x_i\\right) \\;=\\; \\frac{u\\!\\left(x_{i+1}\\right) - u\\!\\left(x_{i-1}\\right)}{x_{i+1} - x_{i-1}}。\n$$\n令分辨率 $N$ 下的误差为内部最大范数\n$$\nE(N,\\rho) \\;=\\; \\max_{i=1,\\dots,N-1} \\left| \\left(Du\\right)\\!\\left(x_i\\right) - u'(x_i) \\right|。\n$$\n\n你的任务是，在名义间距 $\\Delta x$ 加密的过程中，分析上述中心差分算子的观测收敛率 $p(\\rho)$。使用拟合 $\\{\\left(\\log \\Delta x_k, \\log E(N_k,\\rho)\\right)\\}$ 的直线之最小二乘斜率来估计 $p(\\rho)$，其中对数为自然对数，且 $\\Delta x_k = 1/N_k$。\n\n使用以下抖动参数和加密级别的测试套件：\n- 抖动参数：$\\rho \\in \\{0,\\;0.25,\\;0.5\\}$。\n- 加密级别：$N \\in \\{50,\\;100,\\;200,\\;400,\\;800\\}$。\n\n为保证可复现性，对于每个固定的 $\\rho$，使用由下式定义的基础种子 $s(\\rho)$\n$$\ns(0) = 314159,\\quad s(0.25) = 271828,\\quad s(0.5) = 161803,\n$$\n并且在同一 $\\rho$ 的情况下，对于每个 $N$，使用种子 $s(\\rho)+N$ 来生成如上所述的独立扰动序列 $\\{\\epsilon_i\\}_{i=0}^N$。\n\n你的程序必须对测试套件中的每个 $\\rho$，根据给定加密级别下的数据对 $\\left(\\log \\Delta x, \\log E(N,\\rho)\\right)$，计算收敛率 $p(\\rho)$ 的最小二乘估计值。报告 $p(0)$、$p(0.25)$ 和 $p(0.5)$ 这三个值，并四舍五入至三位小数。\n\n最终输出格式：你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，顺序为 $[p(0),p(0.25),p(0.5)]$。例如，包含三个数字 $a$、$b$ 和 $c$ 的输出必须严格以 $[a,b,c]$ 的格式显示在单行上。", "solution": "对问题陈述进行解析和验证。经确定，该问题在科学上是可靠的、适定的，并且是计算数值分析领域一个明确的练习。所有获得唯一、可验证解所必需的条件、参数和定义均已提供。因此，该问题是有效的。\n\n任务是确定在一维随机扰动网格上，三点中心差分格式的观测收敛阶 $p(\\rho)$。收敛阶量化了数值误差 $E$ 如何随着网格间距 $\\Delta x$ 的加密而减小，通常遵循幂律关系 $E \\propto (\\Delta x)^p$。通过取自然对数，我们得到一个线性关系 $\\log E = p \\log \\Delta x + C$，其中斜率 $p$ 就是所求的收敛阶。\n\n此分析的理论基础在于待逼近函数 $u(x)$ 的泰勒级数展开。对于给定的差分算子\n$$\n\\left(Du\\right)\\!\\left(x_i\\right) = \\frac{u(x_{i+1}) - u(x_{i-1})}{x_{i+1} - x_{i-1}},\n$$\n我们检验其在内部节点 $x_i$ 的局部截断误差 $\\tau_i = \\left(Du\\right)\\!\\left(x_i\\right) - u'(x_i)$。\n\n情况 1：均匀网格 ($\\rho = 0$)。\n在此情况下，网格节点为 $x_i = i \\Delta x$。间距是均匀的，因此 $x_{i+1} - x_i = \\Delta x$ 且 $x_i - x_{i-1} = \\Delta x$。算子简化为标准的二阶中心差分公式：\n$$\n\\left(Du\\right)\\!\\left(x_i\\right) = \\frac{u(x_i + \\Delta x) - u(x_i - \\Delta x)}{2 \\Delta x}。\n$$\n$u(x_i \\pm \\Delta x)$ 在 $x_i$ 点的泰勒级数展开表明，截断误差为\n$$\n\\tau_i = \\frac{u'''(x_i)}{6} (\\Delta x)^2 + O((\\Delta x)^4)。\n$$\n误差与 $(\\Delta x)^2$ 成正比。因此，我们预期收敛阶为 $p(0) = 2$。\n\n情况 2：扰动网格 ($\\rho > 0$)。\n此处，网格间距是非均匀的。令 $h_i = x_{i+1} - x_i$ 且 $h_{i-1} = x_i - x_{i-1}$。截断误差为\n$$\n\\tau_i = \\frac{u''(x_i)}{2} (h_i - h_{i-1}) + O(\\max(h_i^2, h_{i-1}^2))。\n$$\n相邻单元尺寸的差异由 $h_i - h_{i-1} = (\\Delta x + \\epsilon_{i+1} - \\epsilon_i) - (\\Delta x + \\epsilon_i - \\epsilon_{i-1}) = (\\epsilon_{i+1} - \\epsilon_i) - (\\epsilon_i - \\epsilon_{i-1})$ 给出。由于每个增量 $\\epsilon_{j+1} - \\epsilon_j$ 是 $O(\\rho \\Delta x)$ 阶的随机变量，它们的差也是 $O(\\rho \\Delta x)$ 阶的。因此，主导误差项与 $\\rho \\Delta x$ 成正比，格式的精度降至一阶。我们预期对于任何 $\\rho > 0$，收敛阶为 $p(\\rho) = 1$。\n\n验证这些理论速率的计算过程如下。对于每个指定的抖动参数 $\\rho \\in \\{0, 0.25, 0.5\\}$，我们使用分辨率 $N \\in \\{50, 100, 200, 400, 800\\}$ 进行网格加密研究。对于每对 $(N, \\rho)$：\n1.  为保证可复现性，使用 $s(\\rho) + N$ 对随机数生成器进行播种，其中 $s(\\rho)$ 是给定的基础种子。\n2.  名义间距为 $\\Delta x = 1/N$。\n3.  生成扰动 $\\{\\epsilon_i\\}_{i=0}^N$。增量 $\\Delta \\epsilon_i = \\epsilon_{i+1} - \\epsilon_i$ 从 $\\text{Uniform}(-\\rho \\Delta x, \\rho \\Delta x)$ 中抽样得到。从 $\\epsilon_0 = 0$ 开始，这些增量的累积和生成了完整的扰动集。\n4.  计算网格节点位置 $x_i = i \\Delta x + \\epsilon_i$。\n5.  在每个节点 $x_i$ 上计算函数 $u(x) = \\sin(2\\pi x)$ 的值。\n6.  在每个内部节点 $i=1, \\dots, N-1$ 上，使用三点公式计算数值导数 $\\left(Du\\right)\\!\\left(x_i\\right)$，并计算精确导数 $u'(x_i) = 2\\pi \\cos(2\\pi x)$。\n7.  在每个内部节点计算绝对误差 $|\\left(Du\\right)\\!\\left(x_i\\right) - u'(x_i)|$，并将这些误差的最大值存储为 $E(N, \\rho)$。\n8.  对于每个 $\\rho$，此过程生成五个数据点 $(\\log(\\Delta x_k), \\log(E(N_k, \\rho)))$。\n9.  对这些数据点应用线性最小二乘回归来找出斜率，该斜率即为我们对收敛率 $p(\\rho)$ 的估计。\n\n最终结果通过将计算出的速率 $p(0)$、$p(0.25)$ 和 $p(0.5)$ 四舍五入到三位小数得到。以下代码实现了此指定过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the observed convergence rate for a central difference operator\n    on a randomly perturbed grid for different jitter parameters.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (jitter_parameter, base_seed)\n        (0.0, 314159),\n        (0.25, 271828),\n        (0.5, 161803),\n    ]\n\n    # Refinement levels\n    N_values = [50, 100, 200, 400, 800]\n\n    # Define the function and its exact derivative\n    u = lambda x: np.sin(2 * np.pi * x)\n    u_prime = lambda x: 2 * np.pi * np.cos(2 * np.pi * x)\n\n    convergence_rates = []\n\n    for rho, base_seed in test_cases:\n        log_dx_data = []\n        log_E_data = []\n\n        for N in N_values:\n            # Step 1: Set seed for reproducibility\n            seed = base_seed + N\n            rng = np.random.default_rng(seed)\n\n            # Step 2: Generate the perturbed grid\n            dx = 1.0 / N\n            \n            # Generate increments for epsilon: delta_eps_i = epsilon_{i+1} - epsilon_i\n            delta_eps = rng.uniform(low=-rho * dx, high=rho * dx, size=N)\n            \n            # Compute epsilon_i from increments, with epsilon_0 = 0\n            # epsilon_i = sum_{j=0}^{i-1} delta_eps_j\n            eps = np.zeros(N + 1)\n            eps[1:] = np.cumsum(delta_eps)\n\n            # Define grid nodes x_i = i*dx + epsilon_i\n            x_ideal = np.arange(N + 1) * dx\n            x = x_ideal + eps\n\n            # Step 3: Evaluate the function on the grid\n            u_vals = u(x)\n\n            # Step 4: Compute numerical derivative at interior nodes i=1,...,N-1\n            # (Du)(x_i) = (u(x_{i+1}) - u(x_{i-1})) / (x_{i+1} - x_{i-1})\n            x_interior = x[1:-1]\n            Du_vals = (u_vals[2:] - u_vals[:-2]) / (x[2:] - x[:-2])\n\n            # Step 5: Compute exact derivative at interior nodes\n            u_prime_vals = u_prime(x_interior)\n\n            # Step 6: Calculate the interior maximum norm error E(N, rho)\n            errors = np.abs(Du_vals - u_prime_vals)\n            E_N_rho = np.max(errors)\n            \n            # Step 7: Store log-log data for regression\n            log_dx_data.append(np.log(dx))\n            log_E_data.append(np.log(E_N_rho))\n\n        # Step 8: Perform linear least-squares regression to find the convergence rate p(rho)\n        # We are fitting log(E) = p * log(dx) + c\n        # numpy.polyfit returns the coefficients [p, c] of the fitted polynomial.\n        p_rho, _ = np.polyfit(log_dx_data, log_E_data, 1)\n\n        convergence_rates.append(p_rho)\n\n    # Final print statement in the exact required format.\n    # Round results to three decimal places.\n    rounded_rates = [round(p, 3) for p in convergence_rates]\n    print(f\"[{','.join(map(str, rounded_rates))}]\")\n\nsolve()\n```", "id": "2440669"}, {"introduction": "在计算工程中，边界条件的处理至关重要，尤其是在边界附近采用非均匀网格以提高效率时。这个高级练习将挑战您分析一个用于诺伊曼 (Neumann) 边界条件的有限差分格式，在极端网格拉伸情况下的表现。通过推导其截断误差，您将检验该格式的一致性——即当网格间距趋于零时，离散近似能否准确地收敛到真实的微分方程 [@problem_id:2440694]。这个过程将加深您对如何在复杂边界条件下设计和验证稳健数值方法的理解。", "problem": "考虑一个足够光滑的函数 $u \\in C^{3}([0,L])$，它在 $[0,L]$ 上解一维偏微分方程 (PDE) $u''(x)=f(x)$，其右端点满足诺伊曼(Neumann)边界条件 $u'(L)=g$，左端点满足狄利克雷(Dirichlet)边界条件 $u(0)=u_{0}$。设 $\\{x_{i}\\}_{i=0}^{N}$ 是一个结构化但非均匀的网格，其中 $x_{0}=0$，$x_{N}=L$，对于 $i \\in \\{1,\\dots,N\\}$，间距为 $\\Delta x_{i}=x_{i}-x_{i-1}$。关注右边界 $x_{N}$，并记 $s=\\Delta x_{N}$ 和 $t=\\Delta x_{N-1}$。\n\n在 $x_{N}$ 处，通过一个有限差分 (FD) 表达式来施加诺伊曼边界条件，该表达式使用三点格式 $\\{x_{N-2},x_{N-1},x_{N}\\}$ 来近似 $u'(x_{N})$，并且对所有次数至多为 $2$ 的关于 $x$ 的多项式都是精确的。这唯一确定了一个近似 $u'(x_{N})$ 的线性组合 $A u(x_{N-2}) + B u(x_{N-1}) + C u(x_{N})$。\n\n将边界节点 $x_{N}$ 处的局部截断误差（记为 $\\tau_{N}$）定义为这个三点有限差分近似与精确导数 $u'(x_{N})$ 之间的差。考虑一族网格，对于这族网格，$s \\to 0$, $t \\to 0$，且比率 $r=\\dfrac{s}{t} \\to \\infty$。\n\n计算极限的精确值\n$$\nC_{\\infty} \\;=\\; \\lim_{r \\to \\infty} \\; \\frac{\\tau_{N}}{u^{(3)}(x_{N})\\, s^{2}} .\n$$\n\n将您的答案表示为一个无单位的精确实数。", "solution": "所述问题是适定的，有科学依据，并包含足够的信息以得到唯一解。这是有限差分方法分析中的一个标准练习。我们开始进行推导。\n\n我们的首要目标是确定用于近似 $u'(x_{N})$ 的有限差分法的系数 $A$、$B$ 和 $C$。该近似使用三点格式 $\\{x_{N-2}, x_{N-1}, x_{N}\\}$，形式为 $A u(x_{N-2}) + B u(x_{N-1}) + C u(x_{N})$。格式点位于坐标 $x_{N}$、$x_{N-1} = x_{N} - s$ 和 $x_{N-2} = x_{N-1} - t = x_{N} - s - t$。此近似的定义属性是它对所有次数至多为2的多项式都是精确的。我们通过在一个合适的多项式基（例如 $\\{1, x-x_{N}, (x-x_{N})^2\\}$）上测试来强制施加此属性。\n\n设 $p(x)$ 是一个多项式。近似 $D[p]$ 由 $D[p] = A p(x_{N-2}) + B p(x_{N-1}) + C p(x_{N})$ 给出。条件是当 $\\deg(p) \\le 2$ 时，$D[p] = p'(x_N)$。\n\n情况1：$p(x) = p_{0}(x) = 1$。导数为 $p'_{0}(x_{N}) = 0$。\n$A p_{0}(x_{N-2}) + B p_{0}(x_{N-1}) + C p_{0}(x_{N}) = A(1) + B(1) + C(1) = 0$。\n这给出了我们的第一个方程：\n$$A + B + C = 0 \\quad (1)$$\n\n情况2：$p(x) = p_{1}(x) = x-x_{N}$。导数为 $p'_{1}(x_{N}) = 1$。\n$A p_{1}(x_{N-2}) + B p_{1}(x_{N-1}) + C p_{1}(x_{N}) = A(-s-t) + B(-s) + C(0) = 1$。\n这给出了我们的第二个方程：\n$$-A(s+t) - B s = 1 \\quad (2)$$\n\n情况3：$p(x) = p_{2}(x) = (x-x_{N})^2$。导数为 $p'_{2}(x_{N}) = 2(x_{N}-x_{N}) = 0$。\n$A p_{2}(x_{N-2}) + B p_{2}(x_{N-1}) + C p_{2}(x_{N}) = A(-s-t)^2 + B(-s)^2 + C(0)^2 = 0$。\n这给出了我们的第三个方程：\n$$A(s+t)^2 + B s^2 = 0 \\quad (3)$$\n\n我们现在求解这个关于 $A$、$B$ 和 $C$ 的线性方程组。由方程 $(3)$ 得：\n$B = -A \\frac{(s+t)^2}{s^2}$。\n将这个 $B$ 的表达式代入方程 $(2)$：\n$-A(s+t) - s \\left( -A \\frac{(s+t)^2}{s^2} \\right) = 1$\n$-A(s+t) + A \\frac{(s+t)^2}{s} = 1$\n$A \\left( \\frac{(s+t)^2 - s(s+t)}{s} \\right) = 1$\n$A \\left( \\frac{(s+t)(s+t-s)}{s} \\right) = 1$\n$A \\frac{t(s+t)}{s} = 1 \\implies A = \\frac{s}{t(s+t)}$。\n\n现在，我们求 $B$：\n$B = - \\frac{s}{t(s+t)} \\cdot \\frac{(s+t)^2}{s^2} = -\\frac{s+t}{st}$。\n\n最后，由方程 $(1)$，我们求 $C$：\n$C = -A - B = -\\frac{s}{t(s+t)} - \\left( -\\frac{s+t}{st} \\right) = \\frac{s+t}{st} - \\frac{s}{t(s+t)}$\n$C = \\frac{(s+t)^2 - s^2}{st(s+t)} = \\frac{s^2+2st+t^2-s^2}{st(s+t)} = \\frac{2st+t^2}{st(s+t)} = \\frac{t(2s+t)}{st(s+t)} = \\frac{2s+t}{s(s+t)}$。\n\n下一步是分析局部截断误差 $\\tau_{N}$，它被定义为有限差分近似与精确导数之差：\n$\\tau_{N} = \\left( A u(x_{N-2}) + B u(x_{N-1}) + C u(x_{N}) \\right) - u'(x_{N})$。\n由于 $u \\in C^{3}([0,L])$，我们可以使用 $u(x_{N-2})$ 和 $u(x_{N-1})$ 在 $x_{N}$ 处的泰勒级数展开：\n$u(x_{N-1}) = u(x_N - s) = u(x_N) - s u'(x_N) + \\frac{s^2}{2} u''(x_N) - \\frac{s^3}{6} u^{(3)}(x_N) + O(s^4)$。\n$u(x_{N-2}) = u(x_N - s - t) = u(x_N) - (s+t) u'(x_N) + \\frac{(s+t)^2}{2} u''(x_N) - \\frac{(s+t)^3}{6} u^{(3)}(x_N) + O((s+t)^4)$。\n\n将这些展开式代入 $\\tau_{N}$ 的表达式，并按 $u$ 在 $x_{N}$ 处的各阶导数整理各项：\n$\\tau_N = u(x_N) (A+B+C) + u'(x_N) (-A(s+t) - Bs - 1) + u''(x_N) \\left( A\\frac{(s+t)^2}{2} + B\\frac{s^2}{2} \\right) - u^{(3)}(x_N) \\left( A\\frac{(s+t)^3}{6} + B\\frac{s^3}{6} \\right) + \\text{H.O.T.}$\n根据构造， $u(x_N)$、$u'(x_N)$ 和 $u''(x_N)$ 的系数均为零。\n- $A+B+C = 0$。\n- $-A(s+t) - Bs = 1$，所以 $u'(x_N)$ 的系数是 $1-1=0$。\n- $A(s+t)^2 + Bs^2 = 0$，所以 $u''(x_N)$ 的系数是 $0$。\n\n截断误差的首项由 $u^{(3)}(x_N)$ 项决定：\n$\\tau_{N} = - \\left( A\\frac{(s+t)^3}{6} + B\\frac{s^3}{6} \\right) u^{(3)}(x_N) + \\dots$\n我们来计算系数 $K = - \\frac{1}{6} \\left( A(s+t)^3 + B s^3 \\right)$:\n$K = - \\frac{1}{6} \\left[ \\frac{s}{t(s+t)} (s+t)^3 - \\frac{s+t}{st} s^3 \\right]$\n$K = - \\frac{1}{6} \\left[ \\frac{s(s+t)^2}{t} - \\frac{s^2(s+t)}{t} \\right]$\n这可以被因式分解：\n$K = - \\frac{s(s+t)}{6t} \\left[ (s+t) - s \\right]$\n$K = - \\frac{s(s+t)}{6t} [t] = - \\frac{s(s+t)}{6}$。\n\n因此，截断误差为 $\\tau_N = -\\frac{s(s+t)}{6} u^{(3)}(x_N) + O(s^4, t^4)$。\n我们需要计算极限 $C_{\\infty} = \\lim_{r \\to \\infty} \\frac{\\tau_N}{u^{(3)}(x_N) s^2}$。代入 $\\tau_N$ 的首项：\n$C_{\\infty} = \\lim_{r \\to \\infty} \\frac{-\\frac{s(s+t)}{6} u^{(3)}(x_N)}{u^{(3)}(x_N) s^2}$。\n假设 $u^{(3)}(x_N) \\neq 0$，我们可以化简该表达式：\n$C_{\\infty} = \\lim_{r \\to \\infty} \\left( -\\frac{s(s+t)}{6s^2} \\right) = \\lim_{r \\to \\infty} \\left( -\\frac{s+t}{6s} \\right) = \\lim_{r \\to \\infty} \\left( -\\frac{1}{6} \\left(1 + \\frac{t}{s}\\right) \\right)$。\n问题将网格比率定义为 $r = \\frac{s}{t}$。因此，$\\frac{t}{s} = \\frac{1}{r}$。\n将此代入极限表达式：\n$C_{\\infty} = \\lim_{r \\to \\infty} \\left( -\\frac{1}{6} \\left(1 + \\frac{1}{r}\\right) \\right)$。\n当 $r \\to \\infty$ 时，$\\frac{1}{r}$ 项趋近于 0。极限是：\n$C_{\\infty} = -\\frac{1}{6} (1+0) = -\\frac{1}{6}$。\n泰勒展开中的高阶项在除以 $s^2$ 后，当 $s \\to 0$ 和 $t \\to 0$ 时，将在极限中消失，这证明了在此计算中使用误差首项是合理的。", "answer": "$$ \\boxed{-\\frac{1}{6}} $$", "id": "2440694"}]}