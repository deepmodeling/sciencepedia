{"hands_on_practices": [{"introduction": "计算流体动力学 (CFD) 的结果本质上是对控制方程的近似解。因此，我们必须回答一个基本问题：“我们的数值解距离方程的精确解有多近？” 网格收敛性研究是回答这一问题的核心工具，也是所谓的*代码验证* (verification) 过程的关键部分。本练习将指导您使用理查森外推法 (Richardson extrapolation)，根据一系列系统加密的网格上的结果来估计离散化误差，这是产出可靠仿真结果的一项关键技能。[@problem_id:1810208]", "problem": "一位工程师正在为一个绕方形棱柱的稳定、层流、不可压缩流动的计算流体动力学 (CFD) 模拟进行验证研究。其目标是量化一个关键模拟输出的离散误差：棱柱后方尾流区中的峰值速度。\n\n研究使用三套系统加密的网格进行了一项网格收敛性研究，我们称之为粗网格、中等网格和细网格。中等网格的特征网格单元尺寸是粗网格的一半，而细网格的特征网格单元尺寸是中等网格的一半。这对应于连续网格级别之间恒定的网格加密因子 $r=2$。\n\n从这三套网格的模拟中获得的峰值尾流速度如下：\n- 粗网格解 $V_{\\text{coarse}}$: $0.170$ m/s\n- 中等网格解 $V_{\\text{medium}}$: $0.230$ m/s\n- 细网格解 $V_{\\text{fine}}$: $0.245$ m/s\n\n假设模拟结果处于渐近收敛范围内，使用这些数据来估计细网格解中的离散误差，其定义为 $E_{fine} = V_{fine} - V_{exact}$，其中 $V_{exact}$ 是峰值速度的精确解。\n\n答案以 m/s 为单位表示，并四舍五入到三位有效数字。", "solution": "假设为渐近网格收敛，将峰值速度的网格依赖性建模为 $V(h)=V_{exact}+C h^{p}$，其中 $h$ 是特征网格尺寸，$C$ 是一个常数，$p$ 是观测到的精度阶。当恒定加密因子 $r=2$ 时，细网格、中等网格和粗网格分别对应于 $h_{1}$、$h_{2}=r h_{1}$ 和 $h_{3}=r^{2} h_{1}$，其对应的解为 $V_{1}=V_{fine}$、$V_{2}=V_{medium}$ 和 $V_{3}=V_{coarse}$。\n\n从三个解计算出的观测阶 $p$ 使用以下公式：\n$$\np=\\frac{\\ln\\!\\left(\\left|\\frac{V_{3}-V_{2}}{V_{2}-V_{1}}\\right|\\right)}{\\ln(r)}.\n$$\n代入 $V_{3}=0.170$，$V_{2}=0.230$，$V_{1}=0.245$ 和 $r=2$，\n$$\nV_{3}-V_{2}=-0.060,\\quad V_{2}-V_{1}=-0.015,\\quad \\frac{V_{3}-V_{2}}{V_{2}-V_{1}}=4,\n$$\n因此\n$$\np=\\frac{\\ln(4)}{\\ln(2)}=2.\n$$\n\n用于计算精确值的 Richardson 外推法公式为：\n$$\nV_{exact}\\approx V_{1}+\\frac{V_{1}-V_{2}}{r^{p}-1}.\n$$\n代入 $V_{1}=0.245$，$V_{2}=0.230$，$r^{p}=2^{2}=4$，\n$$\nV_{exact}\\approx 0.245+\\frac{0.245-0.230}{4-1}=0.245+\\frac{0.015}{3}=0.245+0.005=0.250.\n$$\n\n细网格解的离散误差为\n$$\nE_{fine}=V_{fine}-V_{exact}=0.245-0.250=-0.005.\n$$\n四舍五入到三位有效数字，结果为 $-0.00500$。", "answer": "$$\\boxed{-0.00500}$$", "id": "1810208"}, {"introduction": "在确认我们的解正在收敛之后，我们必须关注离散化方案的细节。边界条件对于一个适定的 (well-posed) 问题至关重要，而它们的数值实现方式会显著影响解的准确性。本练习将聚焦于一种常见的出口边界条件——零梯度条件，并演示如何为其构建一个二阶精度的近似格式，这项技术对于维持整个仿真的准确性至关重要。[@problem_id:1749392]", "problem": "一位计算流体力学工程师正在使用有限体积法 (FVM) 模拟流经一个长通道的稳态、不可压缩、二维流动。该模拟使用均匀笛卡尔网格，主流沿 x 轴正方向。\n\nx 方向的计算域终止于通道出口平面，其位置在 $x=L$。\n\n网格的布置方式是，域内最后两列计算单元的中心分别位于 $x_N = L - \\Delta x/2$ 和 $x_{N-1} = L - (3/2)\\Delta x$，其中 $\\Delta x$ 是 x 方向的均匀网格间距。根据稳态模拟结果，在特定行 $k$ 的这些单元中心处，速度的 x 分量已被确定：\n- 单元中心 $(N-1, k)$ 处的速度：$u_{N-1,k} = 1.450$ m/s\n- 单元中心 $(N, k)$ 处的速度：$u_{N,k} = 1.480$ m/s\n\n对于位于 $x=L$ 的通道出口，指定了零梯度边界条件，即在出口平面上 $\\frac{\\partial u}{\\partial x} = 0$。为与域内部使用的高阶数值方法保持一致，出口面（位于 $x=L$）的速度 $u_{e,k}$ 必须使用相对于网格间距 $\\Delta x$ 具有二阶精度的近似方法来计算。\n\n仅使用所提供的内部速度值 $u_{N,k}$ 和 $u_{N-1,k}$ 以及零梯度条件，确定出口面速度 $u_{e,k}$ 的数值。答案以 m/s 为单位表示，并四舍五入到四位有效数字。", "solution": "设出口面位于 $x=L$。引入局部坐标 $\\xi = L - x$，则出口面位于 $\\xi=0$，最后一个内部单元中心位于 $\\xi=\\Delta x/2$，倒数第二个中心位于 $\\xi=3\\Delta x/2$。为在出口处施加零梯度条件的同时达到二阶精度，将 $u(\\xi)$ 用二次多项式近似，\n$$\nu(\\xi)=a+b\\,\\xi+c\\,\\xi^{2}.\n$$\n出口处的零梯度条件为 $\\frac{\\partial u}{\\partial x}\\big|_{x=L}=0$。使用 $\\xi=L-x$，我们有 $\\frac{\\partial u}{\\partial x}=\\frac{\\partial u}{\\partial \\xi}\\frac{\\partial \\xi}{\\partial x}=-\\frac{\\partial u}{\\partial \\xi}$。因此 $\\frac{\\partial u}{\\partial x}\\big|_{x=L}=0$ 意味着\n$$\n\\frac{\\mathrm{d}u}{\\mathrm{d}\\xi}\\bigg|_{\\xi=0}=0 \\quad\\Rightarrow\\quad b=0,\n$$\n所以 $u(\\xi)=a+c\\,\\xi^{2}$。\n\n将多项式与内部值进行匹配：\n$$\nu_{N,k}=u\\!\\left(\\tfrac{\\Delta x}{2}\\right)=a+c\\,\\frac{\\Delta x^{2}}{4},\\qquad\nu_{N-1,k}=u\\!\\left(\\tfrac{3\\Delta x}{2}\\right)=a+c\\,\\frac{9\\Delta x^{2}}{4}.\n$$\n两式相减得到\n$$\nu_{N-1,k}-u_{N,k}=2c\\,\\Delta x^{2}\\quad\\Rightarrow\\quad c=\\frac{u_{N-1,k}-u_{N,k}}{2\\Delta x^{2}}.\n$$\n使用 $u_{N,k}=a+c\\,\\frac{\\Delta x^{2}}{4}$ 求解 $a$：\n$$\na=u_{N,k}-\\frac{1}{4}c\\,\\Delta x^{2}\n=u_{N,k}-\\frac{u_{N-1,k}-u_{N,k}}{8}\n=\\frac{9u_{N,k}-u_{N-1,k}}{8}.\n$$\n出口面的值为 $u_{e,k}=u(0)=a$，因此\n$$\nu_{e,k}=\\frac{9u_{N,k}-u_{N-1,k}}{8}.\n$$\n代入 $u_{N,k}=1.480$ 和 $u_{N-1,k}=1.450$，\n$$\nu_{e,k}=\\frac{9\\times 1.480-1.450}{8}=1.48375,\n$$\n四舍五入到四位有效数字为 $1.484$。", "answer": "$$\\boxed{1.484}$$", "id": "1749392"}, {"introduction": "动手实践的终极考验是亲手构建一个求解器。这项练习将帮助您跨越从纸上的离散方程到可工作的程序之间的鸿沟。您将为一个经典的流动问题实现一个有限差分格式，但会遇到更复杂的“滑移”边界条件（也称为 Robin 边界条件），这需要使用“虚拟点” (ghost points) 的技巧。通过这个练习，您将巩固对整个数值求解过程的理解，从离散化到求解线性方程组，一脉相承。[@problem_id:2377679]", "problem": "考虑在 $y$ 方向上相距为 $H$ 的两个无限大平行板之间的不可压缩牛顿流体的稳态、充分发展的层流，流动由恒定的流向压力梯度在 $x$ 方向上驱动。从不可压缩的纳维–斯托克斯方程出发，通过引入稳态、单向流 $u = u(y)$ 以及流向无变化的假设，将动量平衡简化为一维线性偏微分方程（PDE）\n$$\n\\mu \\frac{d^2 u}{d y^2} = \\frac{d p}{d x} \\, ,\n$$\n其中 $\\mu$ 是动力黏度，$d p / d x$ 是一个常数。定义正驱动量级 $G$ 为 $G = -\\, d p / d x$，因此 $G > 0$ 对应于正 $x$ 方向的流动。控制常微分方程则变为\n$$\n\\mu \\frac{d^2 u}{d y^2} = -\\, G \\, .\n$$\n在壁面 $y=0$ 和 $y=H$ 处，不使用无滑移条件 $u=0$ 或自由滑移条件 $\\frac{d u}{d y}=0$。而是实施基于指定的壁面摩擦系数 $\\beta$ 的纳维滑移（也称罗宾）边界条件，该条件通过一个线性定律将切向剪应力与切向速度关联起来。使用每个壁面上指向内部的单位法向量，滑移边界条件为\n$$\n\\mu \\, \\frac{\\partial u}{\\partial n_{\\text{in}}} = \\beta \\, u \\, .\n$$\n具体来说，在底壁 $y=0$ 处，向内的法向量是 $+\\hat{\\mathbf{y}}$，所以\n$$\n\\mu \\, \\frac{d u}{d y}(0) = \\beta_0 \\, u(0) \\, ,\n$$\n在顶壁 $y=H$ 处，向内的法向量是 $-\\hat{\\mathbf{y}}$，所以\n$$\n- \\, \\mu \\, \\frac{d u}{d y}(H) = \\beta_H \\, u(H) \\, .\n$$\n此处 $\\beta_0$ 和 $\\beta_H$ 分别是 $y=0$ 和 $y=H$ 处的壁面摩擦系数（单位为 $\\mathrm{Pa \\cdot s / m}$）。注意，令 $\\beta \\to +\\infty$ 可恢复无滑移极限，令 $\\beta \\to 0$ 可恢复自由滑移极限；然而，同时设置 $\\beta_0 = 0$ 和 $\\beta_H = 0$ 与非零的 $G$ 不相容，会导致无解。\n\n您的任务是实现一个有限差分解算器，将区间 $[0,H]$ 离散化为一个包含 $N$ 个节点的均匀网格，节点间距为 $\\Delta y = H/(N-1)$，并求解该线性边值问题，要求内部具有二阶精度，并通过鬼点消除法对滑移边界条件进行一致的二阶处理。对内部节点 $j=1,\\dots,N-2$ 使用中心二阶格式：\n$$\n\\mu \\, \\frac{u_{j-1} - 2 u_{j} + u_{j+1}}{\\Delta y^2} = - \\, G \\, .\n$$\n在下边界 $j=0$ 处，使用一个鬼点 $u_{-1}$ 和导数的中心差分近似来强制实施\n$$\n\\mu \\, \\frac{u_1 - u_{-1}}{2 \\Delta y} = \\beta_0 \\, u_0 \\quad \\Rightarrow \\quad u_{-1} = u_1 - \\frac{2 \\Delta y \\, \\beta_0}{\\mu} \\, u_0 \\, ,\n$$\n将其代入 $j=0$ 处的离散扩散方程，得到\n$$\n\\mu \\, \\frac{u_{-1} - 2 u_0 + u_1}{\\Delta y^2} = - \\, G \\quad \\Rightarrow \\quad\n\\left( - \\frac{2 \\mu}{\\Delta y^2} - \\frac{2 \\beta_0}{\\Delta y} \\right) u_0 + \\left( \\frac{2 \\mu}{\\Delta y^2} \\right) u_1 = - \\, G \\, .\n$$\n在上边界 $j=N-1$ 处，使用一个鬼点 $u_{N}$ 和导数的中心差分近似来强制实施\n$$\n- \\, \\mu \\, \\frac{u_{N} - u_{N-2}}{2 \\Delta y} = \\beta_H \\, u_{N-1} \\quad \\Rightarrow \\quad u_{N} = u_{N-2} - \\frac{2 \\Delta y \\, \\beta_H}{\\mu} \\, u_{N-1} \\, ,\n$$\n将其代入 $j=N-1$ 处的离散扩散方程，得到\n$$\n\\left( \\frac{2 \\mu}{\\Delta y^2} \\right) u_{N-2} + \\left( - \\frac{2 \\mu}{\\Delta y^2} - \\frac{2 \\beta_H}{\\Delta y} \\right) u_{N-1} = - \\, G \\, .\n$$\n求解得到的三对角线性系统，以获得 $u_0,\\dots,u_{N-1}$。为了验证，推导该边值问题的精确解\n$$\nu(y) = - \\, \\frac{G}{2 \\mu} \\, y^2 + C_1 \\, y + C_2 \\, ,\n$$\n其常数由滑移边界条件确定：\n$$\nC_1 = \\frac{\\beta_0}{\\mu} \\, C_2 \\, , \\quad\nC_2 = \\frac{G \\, H \\left( 1 + \\frac{\\beta_H H}{2 \\mu} \\right)}{\\beta_H \\left( 1 + \\frac{\\beta_0 H}{\\mu} \\right) + \\beta_0} \\, .\n$$\n使用此解析解计算参考速度剖面并评估数值精度。\n\n每个测试用例的所需输出：\n- 使用 $N = 401$ 个节点构建数值解。\n- 计算数值剖面和解析剖面之间速度的最大绝对逐点误差，\n$$\ne_{\\max} = \\max_{0 \\le j \\le N-1} \\left| u_j - u\\!\\left( j \\, \\Delta y \\right) \\right| \\, .\n$$\n- 以 $\\mathrm{m/s}$ 为单位报告 $e_{\\max}$。\n\n您的程序必须使用国际单位制（SI units）硬编码并运行以下参数集 $(H,\\mu,G,\\beta_0,\\beta_H)$ 的测试套件：\n- 测试 $1$：$(H,\\mu,G,\\beta_0,\\beta_H) = (\\, 0.02 \\,,\\, 1.0 \\times 10^{-3} \\,,\\, 100.0 \\,,\\, 1.0 \\times 10^{5} \\,,\\, 1.0 \\times 10^{5} \\,)$。\n- 测试 $2$：$(H,\\mu,G,\\beta_0,\\beta_H) = (\\, 0.02 \\,,\\, 1.0 \\times 10^{-3} \\,,\\, 100.0 \\,,\\, 500.0 \\,,\\, 500.0 \\,)$。\n- 测试 $3$：$(H,\\mu,G,\\beta_0,\\beta_H) = (\\, 0.02 \\,,\\, 1.0 \\times 10^{-3} \\,,\\, 100.0 \\,,\\, 0.0 \\,,\\, 500.0 \\,)$。\n- 测试 $4$：$(H,\\mu,G,\\beta_0,\\beta_H) = (\\, 0.01 \\,,\\, 1.8 \\times 10^{-5} \\,,\\, 50.0 \\,,\\, 0.0 \\,,\\, 1.0 \\times 10^{6} \\,)$。\n\n角度单位不适用。将每个 $e_{\\max}$ 以 $\\mathrm{m/s}$ 为单位表示为浮点数。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含按上述测试顺序排列的结果，格式为方括号内以逗号分隔的列表，例如 $[e_1,e_2,e_3,e_4]$，其中每个 $e_k$ 是测试 $k$ 的最大绝对误差（单位为 $\\mathrm{m/s}$）。", "solution": "该问题要求对具有纳维滑移边界条件的平面泊肃叶流的一维边值问题进行数值求解。控制常微分方程（ODE）如下：\n$$\n\\mu \\frac{d^2 u}{d y^2} = -G\n$$\n在定义域 $y \\in [0, H]$ 上。参数 $\\mu$、$G$ 和 $H$ 分别代表动力黏度、负压力梯度的大小以及板间距离。速度剖面由 $u(y)$ 表示。\n\n边界条件为罗宾（Robin）型，也称为纳维滑移条件：\n$$\n\\mu \\, \\frac{d u}{d y}(0) = \\beta_0 \\, u(0) \\quad (\\text{在 } y=0 \\text{ 处})\n$$\n$$\n- \\, \\mu \\, \\frac{d u}{d y}(H) = \\beta_H \\, u(H) \\quad (\\text{在 } y=H \\text{ 处})\n$$\n其中 $\\beta_0$ 和 $\\beta_H$ 是底壁和顶壁的壁面摩擦系数。\n\n该问题将使用在含 $N$ 个节点的均匀网格上的二阶精度有限差分法求解。网格点为 $y_j = j \\Delta y$，$j=0, 1, \\dots, N-1$，网格间距为 $\\Delta y = H / (N-1)$。未知数是这些节点上的速度值 $u_j = u(y_j)$。\n\n离散化后得到形如 $A \\mathbf{u} = \\mathbf{b}$ 的线性方程组，其中 $\\mathbf{u} = [u_0, u_1, \\dots, u_{N-1}]^T$。矩阵 $A$ 是三对角的，其元素和右侧向量 $\\mathbf{b}$ 推导如下。\n\n对于内部节点 $j=1, \\dots, N-2$，使用标准的二阶中心差分近似来表示二阶导数：\n$$\n\\mu \\frac{u_{j-1} - 2 u_{j} + u_{j+1}}{\\Delta y^2} = -G\n$$\n重新整理后得到线性系统中第 $j$ 行的方程：\n$$\n\\left(\\frac{\\mu}{\\Delta y^2}\\right) u_{j-1} - \\left(\\frac{2\\mu}{\\Delta y^2}\\right) u_j + \\left(\\frac{\\mu}{\\Delta y^2}\\right) u_{j+1} = -G\n$$\n\n对于边界节点 $j=0$ 和 $j=N-1$，采用鬼点法来保持二阶精度。\n在下边界（$j=0$）处，ODE离散为 $\\mu (u_{-1} - 2u_0 + u_1) / \\Delta y^2 = -G$，其中 $u_{-1}$ 是位于 $y=-\\Delta y$ 的鬼点。边界条件使用中心差分进行离散：$\\mu (u_1 - u_{-1}) / (2 \\Delta y) = \\beta_0 u_0$。解出鬼点 $u_{-1} = u_1 - (2 \\Delta y \\beta_0 / \\mu) u_0$ 并代入ODE的离散形式，得到第一行（$j=0$）的方程：\n$$\n\\left(-\\frac{2\\mu}{\\Delta y^2} - \\frac{2\\beta_0}{\\Delta y}\\right) u_0 + \\left(\\frac{2\\mu}{\\Delta y^2}\\right) u_1 = -G\n$$\n在上边界（$j=N-1$）处，采用类似的过程，在 $y=H+\\Delta y$ 处设置鬼点 $u_N$，得到最后一行（$j=N-1$）的方程：\n$$\n\\left(\\frac{2\\mu}{\\Delta y^2}\\right) u_{N-2} + \\left(-\\frac{2\\mu}{\\Delta y^2} - \\frac{2\\beta_H}{\\Delta y}\\right) u_{N-1} = -G\n$$\n这些方程为 $N$ 个未知速度 $u_j$ 定义了一个包含 $N$ 个线性方程的三对角系统。我们可以构建系数矩阵 $A$ 和右侧向量 $\\mathbf{b}$，并求解该系统以得到 $\\mathbf{u}$。\n\n矩阵 $A$ 有三个非零对角线：主对角线、次对角线和超对角线。设 $c_1 = \\mu / \\Delta y^2$。各对角线为：\n- 主对角线 ($d_0$)：\n  $A_{j,j} = -2c_1$，对于 $j=1, \\dots, N-2$。\n  $A_{0,0} = -2c_1 - 2\\beta_0 / \\Delta y$。\n  $A_{N-1,N-1} = -2c_1 - 2\\beta_H / \\Delta y$。\n- 次对角线 ($d_{-1}$):\n  $A_{j,j-1} = c_1$，对于 $j=1, \\dots, N-2$。\n  $A_{N-1,N-2} = 2c_1$。\n- 超对角线 ($d_{+1}$):\n  $A_{0,1} = 2c_1$。\n  $A_{j,j+1} = c_1$，对于 $j=1, \\dots, N-2$。\n\n右侧向量 $\\mathbf{b}$ 就是：\n对所有 $j=0, \\dots, N-1$，$b_j = -G$。\n\n通过求解 $A \\mathbf{u} = \\mathbf{b}$ 得到的数值解 $\\mathbf{u}$，将与精确的解析解进行比较以评估其精度。解析解通过对ODE进行两次积分得到：\n$$\nu(y) = -\\frac{G}{2\\mu} y^2 + C_1 y + C_2\n$$\n积分常数 $C_1$ 和 $C_2$ 通过应用两个边界条件来确定。问题给出了这些常数的正确表达式：\n$$\nC_1 = \\frac{\\beta_0}{\\mu} C_2\n$$\n$$\nC_2 = \\frac{G H \\left(1 + \\frac{\\beta_H H}{2\\mu}\\right)}{\\beta_H \\left(1 + \\frac{\\beta_0 H}{\\mu}\\right) + \\beta_0}\n$$\n误差由数值解 $u_j$ 和解析解 $u(y_j)$ 之间的最大绝对逐点差量化：\n$$\ne_{\\max} = \\max_{0 \\le j \\le N-1} |u_j - u(y_j)|\n$$\n程序实现将为每个指定的测试用例构建并求解此线性系统，计算用于比较的解析解，并计算最大误差 $e_{\\max}$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D plane Poiseuille flow with Navier slip boundary conditions\n    using a finite difference method and compares with the analytical solution.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (H, mu, G, beta_0, beta_H) in SI units.\n    test_cases = [\n        (0.02, 1.0e-3, 100.0, 1.0e5, 1.0e5),\n        (0.02, 1.0e-3, 100.0, 500.0, 500.0),\n        (0.02, 1.0e-3, 100.0, 0.0, 500.0),\n        (0.01, 1.8e-5, 50.0, 0.0, 1.0e6),\n    ]\n\n    N = 401\n    results = []\n\n    for case in test_cases:\n        H, mu, G, beta0, betaH = case\n        \n        dy = H / (N - 1)\n        y_grid = np.linspace(0, H, N)\n\n        # --- Numerical Solution ---\n        # Construct the tridiagonal matrix A for the system Au = b.\n        \n        A = np.zeros((N, N))\n        b = np.full(N, -G)\n\n        # Coefficients for finite difference equations\n        c1 = mu / dy**2\n\n        # Interior points (j = 1 to N-2)\n        for j in range(1, N - 1):\n            A[j, j-1] = c1\n            A[j, j]   = -2 * c1\n            A[j, j+1] = c1\n\n        # Boundary point at y=0 (j=0)\n        A[0, 0] = -2 * c1 - 2 * beta0 / dy\n        A[0, 1] = 2 * c1\n        \n        # Boundary point at y=H (j=N-1)\n        A[N-1, N-2] = 2 * c1\n        A[N-1, N-1] = -2 * c1 - 2 * betaH / dy\n        \n        # Solve the linear system Au = b\n        u_numerical = np.linalg.solve(A, b)\n\n        # --- Analytical Solution ---\n        # Calculate integration constants C1 and C2\n        \n        # Denominator of C2 must not be zero. This is guaranteed by the problem constraints.\n        den_C2 = betaH * (1 + beta0 * H / mu) + beta0\n        num_C2 = G * H * (1 + betaH * H / (2 * mu))\n        \n        C2 = num_C2 / den_C2\n        C1 = (beta0 / mu) * C2\n\n        # Calculate the analytical velocity profile\n        u_analytical = -G / (2 * mu) * y_grid**2 + C1 * y_grid + C2\n\n        # --- Error Calculation ---\n        # Compute the maximum absolute pointwise error\n        e_max = np.max(np.abs(u_numerical - u_analytical))\n        results.append(e_max)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2377679"}]}