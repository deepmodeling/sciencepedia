{"hands_on_practices": [{"introduction": "本练习是热-结构耦合问题的绝佳起点，它将引导你模拟一个由温度驱动的智能材料执行器。我们将探索形状记忆合金（SMA）如何因受热而发生相变，进而产生收缩力并提起重物。通过这个实践，你将从第一性原理出发，将一个描述温度随时间变化的一阶常微分方程与一个描述材料响应的准静态力学模型耦合起来，从而亲手实现一个完整的热-机耦合分析过程 [@problem_id:2394080]。", "problem": "一根笔直的形状记忆合金（SMA）单丝通过焦耳加热，当温度超过其奥氏体相变温度时，会提起一个悬挂的重物。使用热能平衡和一维线性弹性的第一性原理，结合一个简单的相分数模型，对热驱动收缩及由此产生的在准静态力学平衡下的向上位移进行建模。所有独立和派生的物理量都必须使用国际单位制（SI）处理。最终的向上位移必须以米为单位表示，为保留六位小数的浮点数。\n\n假设和定义：\n- 将SMA丝视为一维杆模型，具有均匀的横截面、长度和属性。设金属丝长度为 $L$，圆形横截面半径为 $r$，因此面积 $A = \\pi r^2$，侧表面积 $A_{\\text{surf}} = 2 \\pi r L$。\n- 设悬挂在丝上的质量为 $m$。重力大小为 $g$。\n- 设环境温度为 $T_{\\text{amb}}$。金属丝的初始温度为 $T(0) = T_{\\text{amb}}$，并从 $t=0$ 到 $t=t_{\\text{end}}$ 被恒定电流 $I$ 加热。\n- 金属丝的热能平衡（集总电容法）由以下公式决定\n  $$ C_{\\text{th}} \\, \\frac{dT}{dt} = I^2 R - h A_{\\text{surf}} \\left( T - T_{\\text{amb}} \\right), $$\n  其中 $C_{\\text{th}} = \\rho c A L$ 是热容，$\\rho$ 是密度， $c$ 是比热容， $h$ 是对流传热系数， $R$ 是金属丝的电阻。假设电阻率 $\\rho_e$ 恒定，则 $R = \\rho_e \\, \\dfrac{L}{A}$。\n- 奥氏体体积分数 $\\xi(T)$ 近似为关于温度的分段线性函数：\n  $$ \\xi(T) = \\begin{cases}\n  0, & T \\le A_s,\\\\\n  \\dfrac{T - A_s}{A_f - A_s}, & A_s < T < A_f,\\\\\n  1, & T \\ge A_f,\n  \\end{cases} $$\n  其中 $A_s$ 是奥氏体相变开始温度， $A_f$ 是奥氏体相变完成温度。\n- 有效杨氏模量是一个线性混合体，\n  $$ E(T) = \\xi(T) \\, E_A + \\left(1 - \\xi(T)\\right) E_M, $$\n  其中 $E_A$ 是奥氏体模量， $E_M$ 是马氏体模量。\n- 可恢复相变应变建模为\n  $$ \\varepsilon_{\\text{tr}}(T) = \\left(1 - \\xi(T)\\right) \\, \\varepsilon_L, $$\n  其中 $\\varepsilon_L$ 是在完全马氏体状态下的最大可恢复应变。\n- 在一维杆的准静态力学平衡下，拉伸应力为 $\\sigma = \\dfrac{m g}{A}$，弹性应变为 $\\varepsilon_{\\text{el}}(T) = \\dfrac{\\sigma}{E(T)}$。\n- 相对于无应力奥氏体参考长度的总轴向应变为\n  $$ \\varepsilon_{\\text{tot}}(T) = \\varepsilon_{\\text{tr}}(T) + \\varepsilon_{\\text{el}}(T). $$\n  相对于初始状态 $T(0) = T_{\\text{amb}}$，重物的向上位移是金属丝长度的减少量，\n  $$ u_{\\uparrow} = L \\left[ \\varepsilon_{\\text{tot}}\\left(T(0)\\right) - \\varepsilon_{\\text{tot}}\\left(T(t_{\\text{end}})\\right) \\right]. $$\n  您必须根据热能平衡计算 $T(t_{\\text{end}})$，然后相应地评估 $\\xi(T)$、 $E(T)$、 $\\varepsilon_{\\text{tr}}(T)$ 和 $\\varepsilon_{\\text{el}}(T)$。在每个温度下，将整个过程视为力学上的准静态过程。\n\n给定常量（请精确使用这些值）：\n- 几何与重力：$L = 0.1$ m, $r = 2.5 \\times 10^{-4}$ m, $g = 9.81$ m/s$^2$。\n- 热学与电学：$\\rho = 6450$ kg/m$^3$, $c = 837$ J/(kg K), $\\rho_e = 7.6 \\times 10^{-7}$ $\\Omega \\cdot$ m, $h = 30$ W/(m$^2$ K)。\n- 相变与弹性：$A_s = 333$ K, $A_f = 353$ K, $E_M = 28 \\times 10^9$ Pa, $E_A = 70 \\times 10^9$ Pa, $\\varepsilon_L = 0.04$。\n\n测试套件：\n对于下面的每个元组 $(m, I, t_{\\text{end}}, T_{\\text{amb}})$，计算向上位移 $u_{\\uparrow}$（以米为单位，四舍五入到六位小数）。\n\n- 案例 1： $(0.2, 2.0, 5.0, 293.0)$。\n- 案例 2： $(0.2, 0.4, 5.0, 293.0)$。\n- 案例 3： $(0.2, 0.8, 50.0, 293.0)$。\n- 案例 4： $(2.0, 2.0, 5.0, 293.0)$。\n\n对您程序的要求：\n- 使用上述定律和定义实现解决方案。求解热学常微分方程以获得 $T(t_{\\text{end}})$，然后从第一性原理评估位移 $u_{\\uparrow}$。\n- 所有输入均由测试套件固定；没有用户输入。\n- 最终输出格式：生成一行包含 Python 风格的列表，其中包含按顺序排列的四个四舍五入的结果，以逗号分隔并用方括号括起来。例如，输出形式为 $[x_1,x_2,x_3,x_4]$，其中每个 $x_i$ 是以米为单位、四舍五入到六位小数的浮点数。", "solution": "问题陈述已经过严格验证，被认为是有效的。它具有科学依据，问题设定良好，客观，并为模拟形状记忆合金（SMA）丝的热力学行为提供了一套自洽的定义、常数和方程。该模型基于已确立的传热学和固体力学原理。我们现在可以进行正式求解。\n\n该问题要求我们确定一个质量为 $m$ 的重物，由一根长度为 $L$ 的SMA丝悬挂，在焦耳加热收缩时产生的向上位移 $u_{\\uparrow}$。解决方案分为两个主要阶段：进行热分析以找出金属丝随时间变化的温度，以及进行力学分析以计算应变和最终位移。\n\n首先，我们分析热行为。金属丝的温度 $T(t)$ 由集总电容模型决定，这是一个一阶线性常微分方程（ODE）：\n$$ C_{\\text{th}} \\, \\frac{dT}{dt} = I^2 R - h A_{\\text{surf}} \\left( T - T_{\\text{amb}} \\right) $$\n其中 $C_{\\text{th}} = \\rho c A L$ 是热容， $R = \\rho_e L / A$ 是电阻， $A_{\\text{surf}} = 2 \\pi r L$ 是金属丝的侧表面积。其他参数包括：电流 $I$、对流传热系数 $h$、环境温度 $T_{\\text{amb}}$、密度 $\\rho$、比热容 $c$ 和电阻率 $\\rho_e$。金属丝具有半径为 $r$ 的圆形横截面，因此其面积为 $A = \\pi r^2$。\n\n为了求解这个 ODE，我们将其重新排列为标准形式：\n$$ \\frac{dT}{dt} + \\frac{h A_{\\text{surf}}}{C_{\\text{th}}} \\left( T - T_{\\text{amb}} \\right) = \\frac{I^2 R}{C_{\\text{th}}} $$\n$$ \\frac{dT}{dt} + \\frac{h A_{\\text{surf}}}{C_{\\text{th}}} T = \\frac{I^2 R}{C_{\\text{th}}} + \\frac{h A_{\\text{surf}}}{C_{\\text{th}}} T_{\\text{amb}} $$\n我们定义特征时间常数 $\\tau$ 和稳态温度 $T_{ss}$：\n$T$ 的系数是 $\\frac{1}{\\tau} = \\alpha = \\frac{h A_{\\text{surf}}}{C_{\\text{th}}}$。代入 $A_{\\text{surf}}$ 和 $C_{\\text{th}}$ 的表达式：\n$$ \\alpha = \\frac{h (2 \\pi r L)}{\\rho c (\\pi r^2) L} = \\frac{2h}{\\rho c r} $$\n当 $\\frac{dT}{dt} = 0$ 时，达到稳态温度 $T_{ss}$，这得出：\n$$ I^2 R = h A_{\\text{surf}} (T_{ss} - T_{\\text{amb}}) \\implies T_{ss} = T_{\\text{amb}} + \\frac{I^2 R}{h A_{\\text{surf}}} $$\n现在 ODE 可以写成：\n$$ \\frac{dT}{dt} + \\alpha T = \\alpha T_{ss} $$\n这是一个一阶线性 ODE，其通解为 $T(t) = C e^{-\\alpha t} + T_{ss}$。我们使用初始条件 $T(0) = T_{\\text{amb}}$ 来找到积分常数 $C$：\n$$ T(0) = C e^0 + T_{ss} = C + T_{ss} = T_{\\text{amb}} \\implies C = T_{\\text{amb}} - T_{ss} $$\n因此，金属丝温度随时间 $t$ 变化的特解是：\n$$ T(t) = T_{ss} + \\left( T_{\\text{amb}} - T_{ss} \\right) e^{-\\alpha t} $$\n我们必须使用此方程为每个测试案例计算最终温度 $T(t_{\\text{end}})$。\n\n其次，我们在准静态假设下分析力学行为。在给定温度 $T$ 下的总应变 $\\varepsilon_{\\text{tot}}(T)$ 是相变应变 $\\varepsilon_{\\text{tr}}(T)$ 和弹性应变 $\\varepsilon_{\\text{el}}(T)$ 的总和。\n$$ \\varepsilon_{\\text{tot}}(T) = \\varepsilon_{\\text{tr}}(T) + \\varepsilon_{\\text{el}}(T) $$\n奥氏体体积分数 $\\xi(T)$ 是一个分段线性函数：\n$$ \\xi(T) = \\begin{cases}\n0, & T \\le A_s \\\\\n\\frac{T - A_s}{A_f - A_s}, & A_s < T < A_f \\\\\n1, & T \\ge A_f\n\\end{cases} $$\n其中 $A_s$ 和 $A_f$ 分别是奥氏体相变开始和完成温度。\n\n相变应变 $\\varepsilon_{\\text{tr}}(T)$ 是相对于奥氏体相定义的，并取决于马氏体分数 $(1 - \\xi(T))$：\n$$ \\varepsilon_{\\text{tr}}(T) = (1 - \\xi(T)) \\varepsilon_L $$\n其中 $\\varepsilon_L$ 是完全马氏体状态下金属丝的最大可恢复应变。\n\n弹性应变 $\\varepsilon_{\\text{el}}(T)$ 由胡克定律给出，$\\varepsilon_{\\text{el}}(T) = \\sigma / E(T)$，其中应力 $\\sigma = mg/A$ 是由悬挂的质量 $m$ 引起的。有效杨氏模量 $E(T)$ 由线性混合法则确定：\n$$ E(T) = \\xi(T) E_A + (1 - \\xi(T)) E_M $$\n其中 $E_A$ 和 $E_M$ 分别是奥氏体和马氏体的模量。\n\n向上位移 $u_{\\uparrow}$ 是金属丝从其初始状态 $t=0$ （此时 $T(0) = T_{\\text{amb}}$）到其最终状态 $t=t_{\\text{end}}$ 的总收缩量。这由总应变的变化量乘以原始长度 $L$ 给出：\n$$ u_{\\uparrow} = L \\left[ \\varepsilon_{\\text{tot}}(T(0)) - \\varepsilon_{\\text{tot}}(T(t_{\\text{end}})) \\right] $$\n代入 $T(0) = T_{\\text{amb}}$：\n$$ u_{\\uparrow} = L \\left[ \\varepsilon_{\\text{tot}}(T_{\\text{amb}}) - \\varepsilon_{\\text{tot}}(T(t_{\\text{end}})) \\right] $$\n对于每个测试案例 $(m, I, t_{\\text{end}}, T_{\\text{amb}})$，计算过程如下：\n1.  计算与几何相关的常数：$A = \\pi r^2$， $A_{\\text{surf}} = 2 \\pi r L$。\n2.  计算与材料相关的常数：$R = \\rho_e L / A$， $\\alpha = 2h / (\\rho c r)$。\n3.  计算稳态温度 $T_{ss} = T_{\\text{amb}} + I^2 R / (h A_{\\text{surf}})$。\n4.  使用导出的解析解计算最终温度 $T(t_{\\text{end}})$。\n5.  确定初始温度下的总应变 $\\varepsilon_{\\text{tot}}(T_{\\text{amb}})$。这需要计算 $\\xi(T_{\\text{amb}})$、 $E(T_{\\text{amb}})$、 $\\varepsilon_{\\text{tr}}(T_{\\text{amb}})$ 和 $\\varepsilon_{\\text{el}}(T_{\\text{amb}})$。\n6.  确定最终温度下的总应变 $\\varepsilon_{\\text{tot}}(T(t_{\\text{end}}))$。这需要计算 $\\xi(T(t_{\\text{end}}))$、 $E(T(t_{\\text{end}}))$、 $\\varepsilon_{\\text{tr}}(T(t_{\\text_end}}))$ 和 $\\varepsilon_{\\text{el}}(T(t_{\\text{end}}))$。\n7.  计算最终向上位移 $u_{\\uparrow} = L (\\varepsilon_{\\text{tot}}(T_{\\text{amb}}) - \\varepsilon_{\\text{tot}}(T(t_{\\text{end}})))$。\n\n这个基于第一性原理的严谨、分步的程序将被执行，以解决给定测试套件的问题。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the upward displacement of a mass suspended by a Shape Memory Alloy (SMA) wire.\n    The wire contracts when heated by an electrical current. The model combines a lumped\n    capacitance thermal model with a one-dimensional quasi-static mechanical model.\n    \"\"\"\n\n    # --- Given constants (SI units) ---\n    # Geometry and gravity\n    L = 0.1  # m\n    r = 2.5e-4  # m\n    g = 9.81  # m/s^2\n\n    # Thermal and electrical properties\n    rho = 6450.0  # kg/m^3\n    c = 837.0  # J/(kg*K)\n    rho_e = 7.6e-7  # Ohm*m\n    h = 30.0  # W/(m^2*K)\n\n    # Phase transformation and elasticity\n    A_s = 333.0  # K (Austenite start)\n    A_f = 353.0  # K (Austenite finish)\n    E_M = 28.0e9  # Pa (Martensite modulus)\n    E_A = 70.0e9  # Pa (Austenite modulus)\n    epsilon_L = 0.04  # Dimensionless (Max recoverable strain)\n\n    # --- Derived constants ---\n    A = np.pi * r**2  # Cross-sectional area (m^2)\n    A_surf = 2 * np.pi * r * L  # Lateral surface area (m^2)\n    R = rho_e * L / A  # Electrical resistance (Ohm)\n    alpha = (2 * h) / (rho * c * r)  # Thermal decay constant (1/s)\n\n    # --- Helper functions for the constitutive model ---\n    def get_austenite_fraction(T):\n        \"\"\"Calculates the austenite volume fraction xi(T).\"\"\"\n        if T <= A_s:\n            return 0.0\n        elif T >= A_f:\n            return 1.0\n        else:\n            return (T - A_s) / (A_f - A_s)\n\n    def get_total_strain(T, m):\n        \"\"\"Calculates the total strain epsilon_tot(T, m).\"\"\"\n        xi_T = get_austenite_fraction(T)\n        \n        # Transformation strain\n        eps_tr = (1.0 - xi_T) * epsilon_L\n        \n        # Effective Young's modulus\n        E_T = xi_T * E_A + (1.0 - xi_T) * E_M\n        \n        # Stress\n        sigma = (m * g) / A\n        \n        # Elastic strain\n        eps_el = sigma / E_T\n        \n        return eps_tr + eps_el\n\n    # --- Test suite ---\n    test_cases = [\n        (0.2, 2.0, 5.0, 293.0),  # Case 1: (m, I, t_end, T_amb)\n        (0.2, 0.4, 5.0, 293.0),  # Case 2\n        (0.2, 0.8, 50.0, 293.0), # Case 3\n        (2.0, 2.0, 5.0, 293.0),  # Case 4\n    ]\n\n    results = []\n    for case in test_cases:\n        m, I, t_end, T_amb = case\n\n        # --- Thermal Analysis ---\n        # 1. Calculate steady-state temperature\n        joule_heating = I**2 * R\n        convective_cooling_rate = h * A_surf\n        T_ss = T_amb + joule_heating / convective_cooling_rate\n        \n        # 2. Calculate wire temperature at t_end\n        T_final = T_ss + (T_amb - T_ss) * np.exp(-alpha * t_end)\n\n        # --- Mechanical Analysis ---\n        # 3. Calculate initial total strain at T_amb\n        epsilon_tot_initial = get_total_strain(T_amb, m)\n\n        # 4. Calculate final total strain at T_final\n        epsilon_tot_final = get_total_strain(T_final, m)\n\n        # 5. Calculate upward displacement\n        u_upward = L * (epsilon_tot_initial - epsilon_tot_final)\n        \n        # 6. Round and store result\n        results.append(round(u_upward, 6))\n\n    # --- Final Output ---\n    # Convert results to strings for joining\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2394080"}, {"introduction": "在前一个练习的基础上，本次实践将带你进入一个更复杂且至关重要的工程领域：热致结构失稳。你将模拟一根垂直放置的意大利面在热水中逐渐软化，最终因自重而失稳（屈曲）的过程。这个练习要求你应用有限元法（FEM）求解一个屈曲特征值问题，并将其与瞬态热模型相结合，以预测结构达到失效临界点的时间，深刻理解热效应对结构完整性的影响 [@problem_id:2394088]。", "problem": "一个浸入沸水中的垂直细长圆柱形意大利面条，被建模为在自身重量作用下发生小横向挠曲的一维Euler–Bernoulli梁。水通过对流传热使意大利面条热软化。意大利面条的弹性模量依赖于温度，因此也依赖于时间，从而产生热-结构耦合。将从水到意大利面条的对流视为单向流固耦合，其中流体（水）驱动温度演化，进而改变结构刚度。\n\n假设和基本定律：\n- 使用Euler–Bernoulli小挠度梁理论，抗弯刚度为 $E I$，其中 $E$ 是杨氏模量，$I$ 是圆形横截面的截面二次矩。该梁是长度为 $L$ 的垂直悬臂梁，底部夹紧，顶部自由。令 $x \\in [0,L]$ 表示从夹紧处向上测量的垂直坐标。\n- 由自重引起的梁上轴向力为 $N(x) = q_0 (L - x)$，其中 $q_0 = \\rho_s A g$ 是单位长度的重量，$\\rho_s$ 是材料密度，$A = \\pi r^2$ 是半径为 $r$ 的横截面积，$g$ 是重力加速度。\n- 轴向压缩下的线性化屈曲方程由微分算子 $E I \\, \\frac{d^4 w}{dx^4} + N(x) \\, \\frac{d^2 w}{dx^2} = 0$ 控制，边界条件为 $x=0$ 处的夹紧-自由边界条件（零位移和零转角）以及 $x=L$ 处的边界条件（零弯矩和零剪力）。您必须使用一致的离散化方法将其作为广义特征值问题求解。\n- 热模型是基于能量平衡和牛顿冷却定律的集总模型（固体内部温度在空间上是均匀的）：$\\rho_s c_s V \\, \\frac{dT}{dt} = h A_s (T_w - T)$，其中 $c_s$ 是比热容，$V = A L$ 是体积，$A_s = 2 \\pi r L$ 是侧表面积（端面可忽略不计），$h$ 是对流传热系数，$T_w$ 是水温。在初始温度为 $T(0)=T_0$ 的情况下，解为 $T(t) = T_w - (T_w - T_0) \\exp(-t/\\tau)$，其中 $\\tau = \\frac{\\rho_s c_s V}{h A_s}$。\n- 弹性模量相对于参考状态随温度线性软化：$E(T) = E_{\\mathrm{ref}} \\, \\left[1 - \\alpha \\, (T - T_{\\mathrm{ref}})\\right]$，其中 $E_{\\mathrm{ref}}$ 是在 $T_{\\mathrm{ref}}$ 时的弹性模量，$\\alpha$ 是一个温度系数。为保持物理合理性，将模量的下限设定为参考值的一小部分：$E(T) \\ge E_{\\min} = \\beta \\, E_{\\mathrm{ref}}$，其中 $\\beta = 0.05$。\n\n任务：\n- 使用有限元法（FEM）离散化该梁，采用Euler–Bernoulli运动学，并通过在每个单元上平均 $N(x)$ 来近似由轴向压缩引起的几何刚度。在施加底部夹紧边界条件后，组装全局抗弯刚度矩阵 $\\mathbf{K}_b^0$（已分解，使得物理抗弯刚度为 $E I \\mathbf{K}_b^0$）和与单位长度重量分布相关的全局几何刚度矩阵 $\\mathbf{K}_g^{\\mathrm{unit}}$（即对应于 $q_0 = 1$ 的分布 $N(x) = (L-x)$）。求解广义特征值问题\n$$\n\\mathbf{K}_b^0 \\, \\boldsymbol{\\phi} = \\mu \\, \\mathbf{K}_g^{\\mathrm{unit}} \\, \\boldsymbol{\\phi},\n$$\n并提取最小正特征值 $\\mu_{\\min}$。临界抗弯刚度阈值由下式给出\n$$\nE I_{\\mathrm{crit}} = \\frac{q_0}{\\mu_{\\min}}.\n$$\n等效地，当 $E(t) I \\le E I_{\\mathrm{crit}}$ 时，系统变得线性不稳定（屈曲）。\n- 使用热模型和模量-温度模型，确定临界屈曲时间 $t_{\\mathrm{b}}$，即满足 $E(t) I \\le E I_{\\mathrm{crit}}$ 的最小 $t \\ge 0$。如果 $E(0) I \\le E I_{\\mathrm{crit}}$，则设 $t_{\\mathrm{b}} = 0$。如果对于所有 $t \\ge 0$，都有 $E(t) I > E I_{\\mathrm{crit}}$，则按照惯例返回 $t_{\\mathrm{b}} = -1$。\n- 以秒为单位表示 $t_{\\mathrm{b}}$，并四舍五入到三位小数。\n\n常量和单位：\n- 使用 $g = 9.81$ $\\mathrm{m/s^2}$。所有几何输入单位为 $\\mathrm{m}$，密度单位为 $\\mathrm{kg/m^3}$，比热单位为 $\\mathrm{J/(kg \\cdot K)}$，温度单位为 $\\mathrm{K}$，对流系数单位为 $\\mathrm{W/(m^2 \\cdot K)}$，模量单位为 $\\mathrm{Pa}$，时间单位为 $\\mathrm{s}$。不需要角度。\n\n测试集：\n对于以下五个参数集中的每一个，按上述规定计算 $t_{\\mathrm{b}}$（以秒为单位），并将结果汇总到单行输出中。\n\n- 案例A（典型长度和加热）：\n  - $L = 0.25$, $r = 0.0009$, $\\rho_s = 1400$, $c_s = 1400$, $E_{\\mathrm{ref}} = 5.0 \\times 10^9$, $\\alpha = 0.012$, $T_{\\mathrm{ref}} = 293$, $T_w = 373$, $T_0 = 293$, $h = 1200$.\n- 案例B（短条）：\n  - $L = 0.10$, $r = 0.0009$, $\\rho_s = 1400$, $c_s = 1400$, $E_{\\mathrm{ref}} = 5.0 \\times 10^9$, $\\alpha = 0.012$, $T_{\\mathrm{ref}} = 293$, $T_w = 373$, $T_0 = 293$, $h = 1200$.\n- 案例C（更长更细，加热更慢）：\n  - $L = 0.30$, $r = 0.0008$, $\\rho_s = 1400$, $c_s = 1400$, $E_{\\mathrm{ref}} = 5.0 \\times 10^9$, $\\alpha = 0.012$, $T_{\\mathrm{ref}} = 293$, $T_w = 373$, $T_0 = 293$, $h = 300$.\n- 案例D（更硬的材料，软化更温和）：\n  - $L = 0.25$, $r = 0.0009$, $\\rho_s = 1400$, $c_s = 1400$, $E_{\\mathrm{ref}} = 7.0 \\times 10^9$, $\\alpha = 0.010$, $T_{\\mathrm{ref}} = 293$, $T_w = 373$, $T_0 = 293$, $h = 1200$.\n- 案例E（预热初始条件）：\n  - $L = 0.25$, $r = 0.0009$, $\\rho_s = 1400$, $c_s = 1400$, $E_{\\mathrm{ref}} = 5.0 \\times 10^9$, $\\alpha = 0.012$, $T_{\\mathrm{ref}} = 293$, $T_w = 373$, $T_0 = 363$, $h = 1200$.\n\n输出格式：\n- 您的程序应生成单行输出，其中包含五个案例的结果，形式为用方括号括起来的逗号分隔列表，例如 $[t_A,t_B,t_C,t_D,t_E]$，其中每个 $t_\\bullet$ 是一个浮点数，以秒为单位，小数点后精确到三位数字。如果不发生屈曲，则输出 $-1.000$。如果系统在 $t=0$ 时已经不稳定，则输出 $0.000$。", "solution": "所提出的问题是计算工程领域的一个有效练习，具体涉及流固耦合场景中的热-结构耦合。它要求确定一个承受自重的细长柱（一根意大利面条）的屈曲时间，其材料属性随温度升高而退化。求解路径包括进行有限元分析以解决一个线性化屈曲特征值问题，并与一个瞬态热模型耦合。所有参数和控制定律均已提供，使得该问题在指定的建模假设范围内是适定的并且具有科学依据。\n\n求解过程分为三个主要阶段：\n1.  **用于屈曲分析的有限元法（FEM）**：我们离散化一维Euler-Bernoulli梁以求解广义特征值问题。这将得出临界屈曲参数。\n2.  **热力学分析**：我们基于给定的热模型和模量-温度关系，建立随时间变化的弹性模量 $E(t)$。\n3.  **临界时间确定**：我们计算时间 $t_{\\mathrm{b}}$，在该时间点，梁的刚度 $E(t)I$ 下降到临界屈曲阈值 $E I_{\\mathrm{crit}}$。\n\n**步骤1：屈曲的FEM公式化**\n\n在可变轴向压力 $N(x)$ 作用下，梁的线性化屈曲方程为：\n$$\nE I \\, \\frac{d^4 w}{dx^4} + N(x) \\, \\frac{d^2 w}{dx^2} = 0\n$$\n由自重引起的轴向力为 $N(x) = q_0 (L - x)$，其中 $q_0 = \\rho_s A g$。使用有限元法对此方程进行离散化，我们得到特征值问题的矩阵形式：\n$$\nE I \\mathbf{K}_b \\mathbf{d} + \\mathbf{K}_g(N) \\mathbf{d} = 0\n$$\n其中 $\\mathbf{K}_b$ 是常规抗弯刚度矩阵，$\\mathbf{K}_g(N)$ 是依赖于轴向力分布 $N(x)$ 的几何刚度矩阵，$\\mathbf{d}$ 是节点位移和转角的向量。\n\n问题规定几何刚度矩阵应使用每个单元上的平均轴向力来构建。对于一个从 $x_i$ 延伸到 $x_{i+1}$ 的单元 $i$，平均力为 $\\bar{N}_i = \\frac{1}{l_e} \\int_{x_i}^{x_{i+1}} q_0(L-x) dx = q_0 \\left(L - \\frac{x_i+x_{i+1}}{2}\\right)$，其中 $l_e$ 是单元长度。\n\n问题被表述为求解广义特征值问题：\n$$\n\\mathbf{K}_b^0 \\, \\boldsymbol{\\phi} = \\mu \\, \\mathbf{K}_g^{\\mathrm{unit}} \\, \\boldsymbol{\\phi}\n$$\n物理屈曲方程为 $E I \\mathbf{K}_b^0 \\mathbf{d} = q_0 \\mathbf{K}_g^{\\mathrm{unit}} \\mathbf{d}$。比较这两种形式可以发现，特征值 $\\mu$ 对应于比率 $q_0 / (E I)$。临界条件（第一屈曲模态）对应于最小正特征值 $\\mu_{\\min}$。\n$$\n\\mu_{\\min} = \\frac{q_0}{E I_{\\mathrm{crit}}}\n$$\n由此，我们得到临界抗弯刚度：\n$$\nE I_{\\mathrm{crit}} = \\frac{q_0}{\\mu_{\\min}}\n$$\n我们通过从标准的单元级对应矩阵组装全局矩阵来实现这一点。对于长度为 $l_e$ 的Euler-Bernoulli梁单元，单元抗弯刚度矩阵（不含 $EI$ 因子）为：\n$$\n\\mathbf{k}_b^e = \\frac{1}{l_e^3}\n\\begin{pmatrix}\n12 & 6 l_e & -12 & 6 l_e \\\\\n6 l_e & 4 l_e^2 & -6 l_e & 2 l_e^2 \\\\\n-12 & -6 l_e & 12 & -6 l_e \\\\\n6 l_e & 2 l_e^2 & -6 l_e & 4 l_e^2\n\\end{pmatrix}\n$$\n对于单位平均力项 $\\bar{N}^{\\mathrm{unit}}_i / q_0 = (L - (x_i+x_{i+1})/2)$ 的单元几何刚度矩阵为：\n$$\n\\mathbf{k}_g^{e, \\mathrm{unit}} = \\left(L - \\frac{x_i+x_{i+1}}{2}\\right) \\frac{1}{30 l_e}\n\\begin{pmatrix}\n36 & 3 l_e & -36 & 3 l_e \\\\\n3 l_e & 4 l_e^2 & -3 l_e & -l_e^2 \\\\\n-36 & -3 l_e & 36 & -3 l_e \\\\\n3 l_e & -l_e^2 & -3 l_e & 4 l_e^2\n\\end{pmatrix}\n$$\n组装全局矩阵后，通过移除前两行和前两列来施加 $x=0$ 处的夹紧边界条件（第一节点位移和转角为零）。然后，我们求解得到的简化系统的特征值 $\\mu$ 并确定 $\\mu_{\\min}$。为了数值稳定性和准确性，该梁被离散化为 $n_{el}=100$ 个单元。\n\n**步骤2：热力学模型**\n\n意大利面条的温度 $T$ 根据牛顿冷却定律演化：\n$$\nT(t) = T_w - (T_w - T_0) \\exp(-t/\\tau)\n$$\n其中热时间常数 $\\tau$ 由 $\\tau = \\frac{\\rho_s c_s V}{h A_s} = \\frac{\\rho_s c_s (\\pi r^2 L)}{h (2 \\pi r L)} = \\frac{\\rho_s c_s r}{2 h}$ 给出。\n\n弹性模量 $E$ 随温度变化如下：\n$$\nE(T) = \\max \\left( \\beta E_{\\mathrm{ref}}, E_{\\mathrm{ref}} \\left[1 - \\alpha (T - T_{\\mathrm{ref}})\\right] \\right)\n$$\n其中 $\\beta=0.05$ 为模量提供了下界。将 $T(t)$ 代入此方程，得到随时间变化的模量 $E(t)$。\n\n**步骤3：屈曲时间 $t_{\\mathrm{b}}$ 的确定**\n\n当梁的模量 $E(t)$ 下降到由抗屈曲能力 $E_{\\mathrm{crit}} I = E I_{\\mathrm{crit}}$ 定义的临界值 $E_{\\mathrm{crit}}$ 时，发生屈曲。因此，$E_{\\mathrm{crit}} = E I_{\\mathrm{crit}} / I$。为每个案例找到屈曲时间 $t_{\\mathrm{b}}$ 的步骤如下：\n1.  计算几何属性 $A=\\pi r^2$、$I=\\pi r^4/4$ 和材料属性（如 $q_0=\\rho_s A g$）。\n2.  使用FEM程序数值计算给定长度 $L$ 的 $\\mu_{\\min}$。\n3.  计算临界模量 $E_{\\mathrm{crit}} = \\frac{q_0}{\\mu_{\\min} I}$。\n4.  分别使用温度 $T_0$ 和 $T_w$ 计算初始模量 $E(0)$ 和渐近模量 $E(\\infty)$。\n5.  应用条件：\n    - 如果 $E(0) \\le E_{\\mathrm{crit}}$，则屈曲是瞬时发生的或已经发生。我们设 $t_{\\mathrm{b}} = 0$。\n    - 如果 $E(\\infty) > E_{\\mathrm{crit}}$，模量永远不会退化到临界水平。不发生屈曲。我们设 $t_{\\mathrm{b}} = -1$。\n    - 否则，存在一个唯一的屈曲时间 $t_{\\mathrm{b}} > 0$。我们求解方程 $E(t_{\\mathrm{b}}) = E_{\\mathrm{crit}}$ 以得到 $t_{\\mathrm{b}}$。这需要首先从 $E(T_{\\mathrm{crit}}) = E_{\\mathrm{crit}}$ 找到临界温度 $T_{\\mathrm{crit}}$，可得 $T_{\\mathrm{crit}} = T_{\\mathrm{ref}} + \\frac{1}{\\alpha} \\left(1 - \\frac{E_{\\mathrm{crit}}}{E_{\\mathrm{ref}}}\\right)$。然后，我们求解时间：\n    $$\n    t_{\\mathrm{b}} = \\tau \\ln \\left( \\frac{T_w - T_0}{T_w - T_{\\mathrm{crit}}} \\right)\n    $$\n每个案例的计算都按照此程序执行。最终结果按要求四舍五入到三位小数。", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import eig\n\ndef solve():\n    \"\"\"\n    Main function to solve for the buckling time for all test cases.\n    \"\"\"\n    # Parameter sets for the five test cases.\n    # (L, r, rho_s, c_s, E_ref, alpha, T_ref, T_w, T_0, h)\n    test_cases = [\n        # Case A\n        (0.25, 0.0009, 1400, 1400, 5.0e9, 0.012, 293, 373, 293, 1200),\n        # Case B\n        (0.10, 0.0009, 1400, 1400, 5.0e9, 0.012, 293, 373, 293, 1200),\n        # Case C\n        (0.30, 0.0008, 1400, 1400, 5.0e9, 0.012, 293, 373, 293, 300),\n        # Case D\n        (0.25, 0.0009, 1400, 1400, 7.0e9, 0.010, 293, 373, 293, 1200),\n        # Case E\n        (0.25, 0.0009, 1400, 1400, 5.0e9, 0.012, 293, 373, 363, 1200),\n    ]\n\n    results = []\n    for params in test_cases:\n        t_b = calculate_buckling_time(*params)\n        results.append(f\"{t_b:.3f}\")\n\n    print(f\"[{','.join(results)}]\")\n\ndef get_fem_eigenvalue(L, n_el=100):\n    \"\"\"\n    Computes the smallest positive eigenvalue mu_min using FEM.\n    \"\"\"\n    n_nodes = n_el + 1\n    n_dofs = 2 * n_nodes\n    l_e = L / n_el\n\n    # Element bending stiffness matrix (for EI=1)\n    k_b_e_factored = np.array([\n        [12, 6 * l_e, -12, 6 * l_e],\n        [6 * l_e, 4 * l_e**2, -6 * l_e, 2 * l_e**2],\n        [-12, -6 * l_e, 12, -6 * l_e],\n        [6 * l_e, 2 * l_e**2, -6 * l_e, 4 * l_e**2]\n    ])\n    k_b_e = (1 / l_e**3) * k_b_e_factored\n\n    # Element geometric stiffness matrix base (for N=1)\n    k_g_e_base_factored = np.array([\n        [36, 3 * l_e, -36, 3 * l_e],\n        [3 * l_e, 4 * l_e**2, -3 * l_e, -l_e**2],\n        [-36, -3 * l_e, 36, -3 * l_e],\n        [3 * l_e, -l_e**2, -3 * l_e, 4 * l_e**2]\n    ])\n    k_g_e_base = (1 / (30 * l_e)) * k_g_e_base_factored\n\n    # Assemble global matrices\n    K_b = np.zeros((n_dofs, n_dofs))\n    K_g_unit = np.zeros((n_dofs, n_dofs))\n\n    for i in range(n_el):\n        x_i = i * l_e\n        x_j = (i + 1) * l_e\n        x_mid = (x_i + x_j) / 2\n        N_avg_unit = L - x_mid\n        \n        k_g_e_unit = N_avg_unit * k_g_e_base\n        \n        dof_indices = np.array([2*i, 2*i+1, 2*i+2, 2*i+3])\n        for r_idx, r_glob in enumerate(dof_indices):\n            for c_idx, c_glob in enumerate(dof_indices):\n                K_b[r_glob, c_glob] += k_b_e[r_idx, c_idx]\n                K_g_unit[r_glob, c_glob] += k_g_e_unit[r_idx, c_idx]\n    \n    # Apply clamped BC at x=0 (remove first 2 DOFs)\n    K_b_red = K_b[2:, 2:]\n    K_g_unit_red = K_g_unit[2:, 2:]\n    \n    # Solve generalized eigenvalue problem: K_b * phi = mu * K_g_unit * phi\n    eigenvalues, _ = eig(K_b_red, K_g_unit_red)\n    \n    # Find smallest positive eigenvalue\n    positive_real_eigenvalues = [ev.real for ev in eigenvalues if ev.real > 1e-9]\n    mu_min = min(positive_real_eigenvalues) if positive_real_eigenvalues else -1\n\n    return mu_min\n\ndef calculate_buckling_time(L, r, rho_s, c_s, E_ref, alpha, T_ref, T_w, T_0, h):\n    \"\"\"\n    Calculates the critical time to buckling for a given set of parameters.\n    \"\"\"\n    g = 9.81\n    beta = 0.05\n    \n    # --- Structural Analysis ---\n    A = np.pi * r**2\n    I = np.pi * r**4 / 4\n    q0 = rho_s * A * g\n\n    mu_min = get_fem_eigenvalue(L)\n    if mu_min <= 0:\n        return -1.0 \n\n    EI_crit = q0 / mu_min\n    E_crit = EI_crit / I\n    \n    # --- Thermal Analysis ---\n    tau = (rho_s * c_s * r) / (2 * h)\n    \n    # --- Time to Buckling Calculation ---\n    \n    # Initial modulus E(0)\n    E_unbounded_0 = E_ref * (1 - alpha * (T_0 - T_ref))\n    E_0 = max(beta * E_ref, E_unbounded_0)\n\n    if E_0 <= E_crit:\n        return 0.0\n\n    # Asymptotic modulus E(inf)\n    E_unbounded_inf = E_ref * (1 - alpha * (T_w - T_ref))\n    E_inf = max(beta * E_ref, E_unbounded_inf)\n\n    if E_inf > E_crit:\n        return -1.0\n        \n    # Buckling occurs at a finite time t_b > 0\n    # Solve E(t_b) = E_crit for t_b\n    # Find critical temperature T_crit\n    T_crit = T_ref + (1 / alpha) * (1 - E_crit / E_ref)\n    \n    # Numerator for the log argument T_w - T_0\n    num = T_w - T_0\n    # Denominator for the log argument T_w - T_crit\n    den = T_w - T_crit\n    \n    # Check for valid log argument\n    if num <= 0 or den <= 0 or num/den <= 0:\n        return -1.0 \n\n    t_b = tau * np.log(num / den)\n    \n    return t_b\n\nsolve()\n```", "id": "2394088"}, {"introduction": "本节的最终实践是一个综合性的挑战，它将流体动力学、结构力学和热力学无缝集成到一个动态的多物理场问题中。你将从头开始构建一个充气式建筑穹顶的动力学模型，模拟其在充气过程中的压力、温度和形态演变。这项顶级练习将要求你求解一个耦合的微分-代数方程组，从而掌握为复杂的工程系统建立和求解时域仿真模型的关键技能 [@problem_id:2394098]。", "problem": "要求您从第一性原理出发，建立一个零维（集总参数）的流固耦合与热-结构耦合模型，用于描述一个球形建筑充气结构（一个包裹空气的弹性球形薄膜）的动态充气过程。该过程受到通过线性阀门从供应源输入的质量流入以及与环境之间的对流热交换的影响。结构动力学被假设为准静态，因此薄膜始终处于薄膜平衡状态。该模型必须实现为一个程序，该程序对一个常微分方程组进行时间积分，并为所提供的测试套件输出一个单一的聚合结果。\n\n您的模型必须仅使用以下基本原理和定义进行推导：\n- 内部空气控制体的质量守恒。\n- 包含理想气体的开放系统的能量守恒（热力学第一定律），包括流动功和热传递。\n- 空气的理想气体定律。\n- 均匀内压和线性弹性小应变条件下的球形薄膜力平衡。\n- 作为工程近似的质量流入线性阀门定律。\n方程中出现的所有符号、变量、函数、运算符和数字都必须按其标准数学含义处理。\n\n假设：\n- 内部充满空气，建模为理想气体，其比气体常数为 $R = 287\\,\\mathrm{J/(kg\\cdot K)}$，定压比热为 $c_p = 1005\\,\\mathrm{J/(kg\\cdot K)}$，定容比热为 $c_v = 718\\,\\mathrm{J/(kg\\cdot K)}$，且满足 $c_p - c_v = R$。\n- 薄膜是一个将气体包围的薄球壳，其初始（未变形）半径为 $R_0$，厚度为 $t$，杨氏模量为 $E$，泊松比为 $\\nu$。外部环境压力恒定为 $p_\\mathrm{ext}$，环境温度为 $T_\\mathrm{amb}$。\n- 流入温度为 $T_\\mathrm{in}$，质量流入速率由线性阀门定律 $\\dot{m}_\\mathrm{in} = C_f \\max\\{0, p_\\mathrm{sup} - p\\}$ 控制，其中 $p_\\mathrm{sup}$ 是供应压力，$C_f$ 是阀门系数。\n- 没有质量流出。\n- 气体与环境之间通过薄膜进行对流热传递，其特征在于一个传热系数 $h$ 和气体侧的瞬时薄膜面积。\n\n推导的出发点：\n- 内部气体的质量守恒：$\\dfrac{d m}{d t} = \\dot{m}_\\mathrm{in}$。\n- 内部气体作为只有一个入口且无出口的开放系统的能量守恒：$\\dfrac{d}{d t}(m c_v T) = \\dot{m}_\\mathrm{in} c_p T_\\mathrm{in} + \\dot{Q} - p \\dfrac{d V}{d t}$，其中 $\\dot{Q}$ 表示进入气体的净热传递。\n- 理想气体定律：$p V = m R T$。\n- 球形薄膜平衡和线性弹性：将内部超压和薄膜应力状态与经向和周向应变相关联，并将这些应变与半径的变化相关联。\n- 对流热传递：$\\dot{Q} = - h A (T - T_\\mathrm{amb})$，其中 $A$ 是内表面积，$T$ 是内部气体温度。\n\n目标：\n- 推导一组封闭的耦合常微分方程，用于描述内部气体质量 $m(t)$ 和温度 $T(t)$ 的时间演化，并通过由准静态薄膜平衡决定的体积 $V(t)$ 与结构耦合。在每个时刻，压力 $p(t)$ 必须同时满足理想气体定律和结构平衡关系。您可以根据需要消去变量或引入代数关系以获得一个可进行数值积分的系统。\n- 实现一个具有固定时间步长的数值稳定的时间积分器，为每个用例模拟到测试套件中要求的最终时间。如果您在每个时间阶段通过同时强制执行理想气体关系和薄膜平衡来精确地处理耦合，则任何一致的高阶显式方法都是可接受的。\n- 对于每个测试用例，报告最终的内部绝对压力 $p(t_\\mathrm{final})$，单位为帕斯卡，四舍五入到最接近的整数。\n\n测试套件：\n使用以下物理上一致的测试用例。在所有用例中，穹顶在环境条件下初始化，$p(0) = p_\\mathrm{ext}$ 和 $T(0) = T_\\mathrm{amb}$，初始内部质量 $m(0)$ 由体积 $V(0) = \\dfrac{4}{3}\\pi R_0^3$ 下的理想气体定律设定。薄膜面积为 $A(t) = 4\\pi R(t)^2$。对于每个用例，使用固定时间步长 $\\Delta t = 0.01\\,\\mathrm{s}$ 进行模拟，直到指定的 $t_\\mathrm{final}$。\n\n- 用例 1 (有热损失的基准充气)：\n  $R_0 = 2.0\\,\\mathrm{m}$，$t = 0.002\\,\\mathrm{m}$，$E = 2.0\\times 10^8\\,\\mathrm{Pa}$，$\\nu = 0.3$，$p_\\mathrm{ext} = 101325\\,\\mathrm{Pa}$，$T_\\mathrm{amb} = 293.15\\,\\mathrm{K}$，$T_\\mathrm{in} = 300.0\\,\\mathrm{K}$，$h = 5.0\\,\\mathrm{W/(m^2\\cdot K)}$，$C_f = 5.0\\times 10^{-7}\\,\\mathrm{kg/(s\\cdot Pa)}$，$p_\\mathrm{sup} = 200000\\,\\mathrm{Pa}$，$t_\\mathrm{final} = 60.0\\,\\mathrm{s}$。\n\n- 用例 2 (类绝热充气)：\n  $R_0 = 2.0\\,\\mathrm{m}$，$t = 0.002\\,\\mathrm{m}$，$E = 2.0\\times 10^8\\,\\mathrm{Pa}$，$\\nu = 0.3$，$p_\\mathrm{ext} = 101325\\,\\mathrm{Pa}$，$T_\\mathrm{amb} = 293.15\\,\\mathrm{K}$，$T_\\mathrm{in} = 300.0\\,\\mathrm{K}$，$h = 0.0\\,\\mathrm{W/(m^2\\cdot K)}$，$C_f = 5.0\\times 10^{-7}\\,\\mathrm{kg/(s\\cdot Pa)}$，$p_\\mathrm{sup} = 200000\\,\\mathrm{Pa}$，$t_\\mathrm{final} = 60.0\\,\\mathrm{s}$。\n\n- 用例 3 (近刚性壳体)：\n  $R_0 = 2.0\\,\\mathrm{m}$，$t = 0.002\\,\\mathrm{m}$，$E = 1.0\\times 10^{12}\\,\\mathrm{Pa}$，$\\nu = 0.3$，$p_\\mathrm{ext} = 101325\\,\\mathrm{Pa}$，$T_\\mathrm{amb} = 293.15\\,\\mathrm{K}$，$T_\\mathrm{in} = 300.0\\,\\mathrm{K}$，$h = 5.0\\,\\mathrm{W/(m^2\\cdot K)}$，$C_f = 5.0\\times 10^{-7}\\,\\mathrm{kg/(s\\cdot Pa)}$，$p_\\mathrm{sup} = 200000\\,\\mathrm{Pa}$，$t_\\mathrm{final} = 60.0\\,\\mathrm{s}$。\n\n- 用例 4 (小流量，较慢充气)：\n  $R_0 = 2.0\\,\\mathrm{m}$，$t = 0.002\\,\\mathrm{m}$，$E = 2.0\\times 10^8\\,\\mathrm{Pa}$，$\\nu = 0.3$，$p_\\mathrm{ext} = 101325\\,\\mathrm{Pa}$，$T_\\mathrm{amb} = 293.15\\,\\mathrm{K}$，$T_\\mathrm{in} = 300.0\\,\\mathrm{K}$，$h = 5.0\\,\\mathrm{W/(m^2\\cdot K)}$，$C_f = 1.0\\times 10^{-7}\\,\\mathrm{kg/(s\\cdot Pa)}$，$p_\\mathrm{sup} = 200000\\,\\mathrm{Pa}$，$t_\\mathrm{final} = 60.0\\,\\mathrm{s}$。\n\n输出要求：\n- 对于每个用例，计算最终的内部绝对压力 $p(t_\\mathrm{final})$，单位为帕斯卡。\n- 您的程序应生成一行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，顺序与上述用例相同，每个条目都四舍五入到最接近的整数，并以 $\\mathrm{Pa}$ 表示，例如 $\\left[\\dots\\right]$。", "solution": "问题陈述经过审视，被认为是有效的。它在科学上基于连续介质力学、热力学和固体力学的原理。它被良好地表述为一个耦合常微分方程(ODEs)组的初值问题，所有必要的参数和初始条件均已提供。其语言客观而精确。\n\n目标是推导并实现一个用于球形弹性薄膜充气的集总参数模型。系统在任意时刻 $t$ 的状态由薄膜内部空气的质量 $m(t)$ 和温度 $T(t)$ 描述。必须为这些状态变量建立一个包含两个耦合常微分方程的方程组。\n\n首先，我们建立耦合流体域和结构域的代数关系。在准静态假设下，该系统涉及三个必须在任何时刻都同时满足的关键物理定律：\n1.  理想气体定律：内部空气的压力 $p$、体积 $V$、质量 $m$ 和温度 $T$ 通过 $p V = m R_{gas} T$ 相关联，其中 $R_{gas}$ 是空气的比气体常数。球体的体积为 $V = \\frac{4}{3}\\pi R^3$，其中 $R$ 是瞬时半径。\n2.  球形薄膜平衡：表压 $\\Delta p = p - p_\\mathrm{ext}$ 由薄膜应力 $\\sigma$ 承担。平衡方程为 $\\Delta p = \\frac{2 \\sigma t}{R}$，其中 $t$ 是薄膜厚度。\n3.  线性弹性：对于均匀双轴拉伸下的薄球壳，应力与应变 $\\epsilon$ 的关系为 $\\sigma = \\frac{E}{1-\\nu}\\epsilon$，其中 $E$ 是杨氏模量，$\\nu$ 是泊松比。应变由半径的变化给出：$\\epsilon = \\frac{R - R_0}{R_0}$，其中 $R_0$ 是初始未变形半径。\n\n通过组合结构方程，我们得到了压力和半径之间的关系：\n$$p(R) = p_\\mathrm{ext} + \\frac{2t}{R} \\left( \\frac{E}{1-\\nu} \\frac{R-R_0}{R_0} \\right) = p_\\mathrm{ext} + K_s \\left(1 - \\frac{R_0}{R}\\right)$$\n其中我们定义了一个结构刚度参数 $K_s = \\frac{2Et}{(1-\\nu)R_0}$。\n\n将来自理想气体定律的压力 $p = \\frac{m R_{gas} T}{V} = \\frac{3 m R_{gas} T}{4\\pi R^3}$ 与来自结构平衡的压力相等，得到一个关于半径 $R$ 的非线性代数方程，该方程是状态变量 $m$ 和 $T$ 的函数：\n$$g(R; m, T) = \\frac{3 m R_{gas} T}{4 \\pi R^3} - p_\\mathrm{ext} - K_s \\left( 1 - \\frac{R_0}{R} \\right) = 0$$\n这个方程必须在每个时间瞬间求解 $R$。由于它是非线性的，需要使用数值求根方法，如牛顿-拉弗森法。\n\n接下来，我们推导状态变量 $m(t)$ 和 $T(t)$ 的常微分方程组。\n\n1.  **质量守恒**：质量的变化率由净质量流率给出。仅有流入时，此为：\n    $$\\frac{dm}{dt} = \\dot{m}_\\mathrm{in}$$\n    质量流入速率 $\\dot{m}_\\mathrm{in}$ 由线性阀门定律控制：\n    $$\\dot{m}_\\mathrm{in} = C_f \\max\\{0, p_\\mathrm{sup} - p\\}$$\n    其中 $p_\\mathrm{sup}$ 是供应压力，$C_f$ 是阀门系数，$p$ 是内部压力，它通过代数耦合依赖于状态 $(m, T)$。\n\n2.  **能量守恒**：开放系统（内部空气）的热力学第一定律是：\n    $$\\frac{d}{dt}(m c_v T) = c_p T_\\mathrm{in} \\dot{m}_\\mathrm{in} + \\dot{Q} - p \\frac{dV}{dt}$$\n    其中 $c_v$ 和 $c_p$ 分别是定容和定压比热，$T_\\mathrm{in}$ 是流入温度，$\\dot{Q}$ 是热传递速率。热传递是对流性的：$\\dot{Q} = -hA(T - T_\\mathrm{amb})$，其中 $h$ 是传热系数，$A=4\\pi R^2$ 是薄膜面积，$T_\\mathrm{amb}$ 是环境温度。$p \\frac{dV}{dt}$ 项表示气体对膨胀的薄膜所做的功的速率。\n\n$\\frac{dV}{dt}$ 项使得方程是隐式的。为了获得一个关于 $T$ 的显式常微分方程，我们对能量方程进行变换。对理想气体定律 $pV=mR_{gas}T$ 进行微分得到 $p\\frac{dV}{dt} + V\\frac{dp}{dt} = R_{gas}(m\\frac{dT}{dt} + T\\frac{dm}{dt})$。代入 $p\\frac{dV}{dt}$ 并使用 $R_{gas} = c_p - c_v$，能量方程可以重写为：\n$$m c_p \\frac{dT}{dt} = \\dot{m}_\\mathrm{in} c_p (T_\\mathrm{in} - T) - h A (T - T_\\mathrm{amb}) + V \\frac{dp}{dt}$$\n这个形式包含 $\\frac{dp}{dt}$。由于 $p$ 是状态变量 $(m, T)$ 通过半径 $R(m, T)$ 的代数函数，我们可以使用链式法则：$\\frac{dp}{dt} = \\frac{\\partial p}{\\partial m}\\frac{dm}{dt} + \\frac{\\partial p}{\\partial T}\\frac{dT}{dt}$。将其代入能量方程并求解 $\\frac{dT}{dt}$ 得到：\n$$\\frac{dT}{dt} = \\frac{\\dot{m}_\\mathrm{in} \\left[ c_p (T_\\mathrm{in} - T) + V \\frac{\\partial p}{\\partial m} \\right] - h A (T - T_\\mathrm{amb})}{m c_p - V \\frac{\\partial p}{\\partial T}}$$\n偏导数 $\\frac{\\partial p}{\\partial m}$ 和 $\\frac{\\partial p}{\\partial T}$ 通过对代数约束 $g(R; m, T)=0$ 进行隐式微分求得。这得到：\n$$\\frac{\\partial p}{\\partial m} = \\frac{\\partial p}{\\partial R} \\frac{\\partial R}{\\partial m} = \\frac{K_s R_0 p / m}{3pR + K_s R_0} \\quad \\text{和} \\quad \\frac{\\partial p}{\\partial T} = \\frac{\\partial p}{\\partial R} \\frac{\\partial R}{\\partial T} = \\frac{K_s R_0 p / T}{3pR + K_s R_0}$$\n至此，常微分方程组的构建完成。\n\n该系统使用固定时间步长 $\\Delta t$ 的四阶龙格-库塔(RK4)方法进行数值积分。在RK4积分器的每个阶段，使用牛顿法求解关于 $R$ 的代数方程，以确保流体与结构之间的耦合得到精确执行。\n\n$t=0$ 时的初始条件是：\n$T(0) = T_\\mathrm{amb}$\n$p(0) = p_\\mathrm{ext}$ (意味着 $R(0) = R_0$)\n$m(0) = \\frac{p_\\mathrm{ext} V_0}{R_{gas} T_\\mathrm{amb}}$，其中 $V_0 = \\frac{4}{3}\\pi R_0^3$。\n\n实现将对每个测试用例遵循此程序，模拟至 $t_\\mathrm{final}$，并报告四舍五入到最接近整数的最终压力 $p(t_\\mathrm{final})$。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the fluid-structure interaction problem for a set of test cases.\n    \"\"\"\n    \n    # Define physical constants\n    R_gas = 287.0  # J/(kg.K)\n    c_p = 1005.0   # J/(kg.K)\n\n    test_cases = [\n        # Case 1: baseline inflation with heat loss\n        {'R0': 2.0, 't_mem': 0.002, 'E': 2.0e8, 'nu': 0.3, 'p_ext': 101325.0, 'T_amb': 293.15, 'T_in': 300.0, 'h': 5.0, 'Cf': 5.0e-7, 'p_sup': 200000.0, 't_final': 60.0},\n        # Case 2: adiabatic-like inflation\n        {'R0': 2.0, 't_mem': 0.002, 'E': 2.0e8, 'nu': 0.3, 'p_ext': 101325.0, 'T_amb': 293.15, 'T_in': 300.0, 'h': 0.0, 'Cf': 5.0e-7, 'p_sup': 200000.0, 't_final': 60.0},\n        # Case 3: nearly rigid shell\n        {'R0': 2.0, 't_mem': 0.002, 'E': 1.0e12, 'nu': 0.3, 'p_ext': 101325.0, 'T_amb': 293.15, 'T_in': 300.0, 'h': 5.0, 'Cf': 5.0e-7, 'p_sup': 200000.0, 't_final': 60.0},\n        # Case 4: small inflow, slower inflation\n        {'R0': 2.0, 't_mem': 0.002, 'E': 2.0e8, 'nu': 0.3, 'p_ext': 101325.0, 'T_amb': 293.15, 'T_in': 300.0, 'h': 5.0, 'Cf': 1.0e-7, 'p_sup': 200000.0, 't_final': 60.0},\n    ]\n    \n    dt = 0.01\n    results = []\n\n    for case in test_cases:\n        p_final = run_simulation(case, dt, R_gas, c_p)\n        results.append(str(int(round(p_final))))\n\n    print(f\"[{','.join(results)}]\")\n\ndef run_simulation(params, dt, R_gas, c_p):\n    \"\"\"\n    Runs a single simulation case.\n    \"\"\"\n    # Unpack parameters\n    R0, t_mem, E, nu, p_ext, T_amb = params['R0'], params['t_mem'], params['E'], params['nu'], params['p_ext'], params['T_amb']\n    T_in, h, Cf, p_sup, t_final = params['T_in'], params['h'], params['Cf'], params['p_sup'], params['t_final']\n\n    # Structural constant\n    K_s = (2.0 * E * t_mem) / ((1.0 - nu) * R0)\n\n    # Initial conditions\n    V0 = (4.0 / 3.0) * np.pi * R0**3\n    T0 = T_amb\n    m0 = (p_ext * V0) / (R_gas * T0)\n    \n    y = np.array([m0, T0])\n    R_current = R0\n\n    def get_derivatives(y_state, R_guess, p_dict):\n        m, T = y_state\n\n        # 1. Solve for Radius R using Newton's method\n        R = R_guess\n        for _ in range(10):\n            R2, R3 = R**2, R**3\n            p_gas_term = (3.0 * m * R_gas * T) / (4.0 * np.pi * R3)\n            g_R = p_gas_term - p_dict['p_ext'] - p_dict['K_s'] * (1.0 - p_dict['R0'] / R)\n            g_prime_R = -3.0 * p_gas_term / R - p_dict['K_s'] * p_dict['R0'] / R2\n            \n            if abs(g_prime_R) < 1e-12: break\n            delta_R = -g_R / g_prime_R\n            R = R + delta_R\n            if abs(delta_R) < 1e-9 * R: break\n\n        # 2. Calculate algebraic quantities\n        p = p_dict['p_ext'] + p_dict['K_s'] * (1.0 - p_dict['R0'] / R)\n        V = (4.0 / 3.0) * np.pi * R**3\n        A = 4.0 * np.pi * R**2\n        m_dot_in = p_dict['Cf'] * max(0, p_dict['p_sup'] - p)\n        \n        # 3. Calculate ODE derivatives dy/dt\n        dm_dt = m_dot_in\n        \n        D_denom = 3.0 * p * R + p_dict['K_s'] * p_dict['R0']\n        if abs(D_denom) < 1e-9 or m < 1e-9 or T < 1e-9:\n            dp_dm, dp_dT = 0.0, 0.0\n        else:\n            dp_dm = (p_dict['K_s'] * p_dict['R0'] * p / m) / D_denom\n            dp_dT = (p_dict['K_s'] * p_dict['R0'] * p / T) / D_denom\n\n        num_dT_dt = m_dot_in * (c_p * (p_dict['T_in'] - T) + V * dp_dm) - p_dict['h'] * A * (T - p_dict['T_amb'])\n        den_dT_dt = m * c_p - V * dp_dT\n        \n        dT_dt = num_dT_dt / den_dT_dt if abs(den_dT_dt) > 1e-9 else 0.0\n        \n        return np.array([dm_dt, dT_dt]), R\n\n    param_dict = {\n        'R0': R0, 'K_s': K_s, 'p_ext': p_ext, 'T_in': T_in,\n        'h': h, 'Cf': Cf, 'p_sup': p_sup, 'T_amb': T_amb\n    }\n\n    num_steps = int(t_final / dt)\n    for _ in range(num_steps):\n        # 4th-order Runge-Kutta (RK4)\n        k1, R1 = get_derivatives(y, R_current, param_dict)\n        k2, R2 = get_derivatives(y + 0.5 * dt * k1, R1, param_dict)\n        k3, R3 = get_derivatives(y + 0.5 * dt * k2, R2, param_dict)\n        k4, _ = get_derivatives(y + dt * k3, R3, param_dict)\n        \n        y += (dt / 6.0) * (k1 + 2.0 * k2 + 2.0 * k3 + k4)\n        \n        # Update R_current as an initial guess for the next step's Newton solver\n        _, R_current = get_derivatives(y, R_current, param_dict)\n\n    # Final pressure calculation\n    m_final, T_final = y\n    \n    # Solve for final radius R_final\n    R_final = R_current\n    for _ in range(10):\n        R_f2, R_f3 = R_final**2, R_final**3\n        p_gas_term = (3.0 * m_final * R_gas * T_final) / (4.0 * np.pi * R_f3)\n        g_R = p_gas_term - p_ext - K_s * (1.0 - R0 / R_final)\n        g_prime_R = -3.0 * p_gas_term / R_final - K_s * R0 / R_f2\n        if abs(g_prime_R) < 1e-12: break\n        delta_R = -g_R / g_prime_R\n        R_final += delta_R\n        if abs(delta_R) < 1e-9 * R_final: break\n            \n    p_final = p_ext + K_s * (1.0 - R0 / R_final)\n    return p_final\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2394098"}]}