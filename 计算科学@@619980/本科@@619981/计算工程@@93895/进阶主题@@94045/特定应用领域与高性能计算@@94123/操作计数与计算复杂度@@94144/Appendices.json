{"hands_on_practices": [{"introduction": "本章的第一个实践练习将我们对计算复杂性的研究置于一个具体的计算工程应用场景中：图像处理。我们将从最基本的技能——从第一性原理出发直接进行操作计数——开始。通过计算一个视频分析任务所需的总操作数，您将亲眼看到计算成本如何随图像尺寸和视频时长等问题参数而扩展，这为进行更抽象的分析奠定了坚实的基础 [@problem_id:2421532]。", "problem": "一个结构检测流水线中的裂纹检测程序处理一幅宽度为 $W$ 像素、高度为 $H$ 像素的单张灰度图像。对于每个像素，该程序执行恰好 $c$ 次基本操作，其中 $c$ 是一个与 $W$ 和 $H$ 无关的正常数。因此，每图像的操作计数与像素数量成线性关系，并与 $O(W \\cdot H)$ 的缩放级别一致。该流水线必须处理一个以每秒 $30$ 帧（frames per second (fps)）录制、时长为 $1$ 分钟的视频流，其中每一帧都是尺寸为 $W \\times H$ 的图像。假设不存在帧间复用，且每帧的操作计数与时间无关。从操作计数的定义以及组合重复独立工作负载的概念出发，推导出处理整个视频所需的基本操作总数，并表示为 $W$、$H$ 和 $c$ 的函数。请以 $W$、$H$ 和 $c$ 的单个闭式表达式提供您的答案。最终表达式无需四舍五入，也无需单位。", "solution": "在尝试任何解答之前，将首先对问题陈述进行严格验证。\n\n### 步骤1：提取已知条件\n问题陈述中逐字提供了以下数据：\n- 图像宽度：$W$ 像素\n- 图像高度：$H$ 像素\n- 每像素操作数：$c$（一个与 $W$ 和 $H$ 无关的正常数）\n- 每图像操作计数缩放级别：$O(W \\cdot H)$\n- 视频流帧率：每秒 $30$ 帧（fps）\n- 视频流时长：$1$ 分钟\n- 处理假设：无帧间复用\n- 处理假设：每帧操作计数与时间无关\n- 目标：推导处理整个视频所需的基本操作总数，并表示为 $W$、$H$ 和 $c$ 的函数。\n\n### 步骤2：使用提取的已知条件进行验证\n根据既定标准对问题进行评估：\n- **科学依据**：该问题基于计算复杂度分析的基本原理，特别是图像和视频处理中算法的操作计数。该模型是计算工程学中使用的标准且有效的简化。它不违反任何科学或数学定律。\n- **适定性**：该问题是适定的。它提供了计算唯一解所需的所有必要参数（$W$、$H$、$c$、帧率、时长）。目标陈述清晰。\n- **客观性**：问题以精确、客观的语言陈述。它没有歧义、主观性或非科学性主张。\n\n该问题没有任何缺陷。它在科学上是合理的，完全指定的，并且以适合定量求解的正式、客观的方式提出。\n\n### 步骤3：结论与行动\n问题被判定为**有效**。现在将推导解答。\n\n任务是确定处理一个视频流所需的基本操作总数。这是一个组合独立工作负载的问题。总工作负载是每个组成部分工作负载的总和。在这种情况下，组成部分是视频的单个帧。\n\n首先，我们确定处理单帧所需的操作数。单帧是尺寸为 $W \\times H$ 像素的图像。\n一帧中的总像素数 $N_{\\text{pixels}}$ 是其宽度和高度的乘积：\n$$N_{\\text{pixels}} = W \\cdot H$$\n问题陈述指出，对于每个像素，程序都执行恰好 $c$ 次基本操作。因此，单帧的总操作数 $O_{\\text{frame}}$ 是像素数与每像素操作数的乘积：\n$$O_{\\text{frame}} = N_{\\text{pixels}} \\cdot c = (W \\cdot H) \\cdot c$$\n缩放级别为 $O(W \\cdot H)$ 的信息与这种线性关系一致，因为 $c$ 是一个常数。\n\n接下来，我们确定视频流中的总帧数。视频时长 $T$ 给定为 $1$ 分钟。我们必须将其转换为与帧率一致的时间单位。\n$$T = 1 \\text{ minute} = 60 \\text{ seconds}$$\n帧率 $f$ 给定为每秒 $30$ 帧。\n$$f = 30 \\text{ fps}$$\n总帧数 $N_{\\text{frames}}$ 是以秒为单位的时长与帧率的乘积：\n$$N_{\\text{frames}} = T \\cdot f = 60 \\text{ s} \\cdot 30 \\text{ s}^{-1} = 1800$$\n因此，流水线必须处理 $1800$ 帧。\n\n最后，我们计算整个视频的总操作数 $O_{\\text{total}}$。问题陈述中指出没有帧间复用，这意味着每一帧都是一个独立的计算任务。因此，总操作数是每帧操作数与总帧数的乘积：\n$$O_{\\text{total}} = O_{\\text{frame}} \\cdot N_{\\text{frames}}$$\n代入上面推导出的表达式：\n$$O_{\\text{total}} = (W \\cdot H \\cdot c) \\cdot 1800$$\n按照惯例，数字系数写在前面。因此，基本操作的总数为：\n$$O_{\\text{total}} = 1800 W H c$$\n这是作为给定参数 $W$、$H$ 和 $c$ 函数的总操作计数的最终闭式表达式。", "answer": "$$\\boxed{1800WHc}$$", "id": "2421532"}, {"introduction": "现实世界中的计算任务通常是由多个阶段组成的流水线。这个练习将我们从简单的操作计数，提升到使用大O符号（Big-O notation）来分析这样一个复合工作流。通过分析一个假设的金融风险模型，您将学习如何组合序列步骤的复杂性并识别出主导项，这是预测复杂软件中性能瓶颈的关键技能 [@problem_id:2380831]。", "problem": "一家银行经营着 $D$ 个业务单元，每个单元持有一个包含 $N$ 个头寸的投资组合。为了满足监管报告要求，该银行计算每个业务单元的部门风险指标，然后将这些部门指标汇总成一个全公司范围的数值。假设以下成本模型基于基本的算法操作：\n\n- 对于一个给定的部门，其本地风险计算会扫描所有无序的头寸对以评估相互作用，然后执行常数次数的额外线性时间遍数进行缩放和归一化。因此，一个部门的最坏情况操作计数可以用 $a N^{2} + b N + c$ 作为上界，其中 $a$、$b$ 和 $c$ 为正常数，所以其复杂度为 $\\mathcal{O}(N^{2})$。\n\n- 在所有 $D$ 个部门的指标计算完毕后，企业聚合器通过读取每个部门的数值一次，应用一个常数时间变换，然后求和，来用固定的权重对它们进行线性组合。聚合成本的上界为 $k D$，其中 $k$ 为正常数，因此其复杂度为 $\\mathcal{O}(D)$。\n\n假设各部门在单个计算线程上顺序处理，部门之间没有记忆化或计算复用，并且 $N \\ge 1$，$D \\ge 1$。请仅使用渐进上界（大O）的基本定义和顺序组合的成本相加原理，推导出生成全公司风险数值的总时间复杂度，并以一个关于 $N$ 和 $D$ 的单一简化 $\\mathcal{O}(\\cdot)$ 表达式表示。你的最终答案必须是一个单一的封闭形式 $\\mathcal{O}(\\cdot)$ 表达式。不需要四舍五入，也不需要报告单位。", "solution": "首先将对问题陈述进行严格的验证过程。\n\n**步骤 1：提取已知条件**\n- 业务单元数量：$D$\n- 每个单元的头寸数量：$N$\n- 单个部门风险计算的最坏情况操作计数的上界为 $a N^{2} + b N + c$。\n- 常数 $a$、$b$ 和 $c$ 均为正。\n- 单个部门的复杂度为 $\\mathcal{O}(N^{2})$。\n- 企业聚合的成本上界为 $k D$。\n- 常数 $k$ 为正。\n- 聚合的复杂度为 $\\mathcal{O}(D)$。\n- 处理模型：在单个线程上顺序执行。\n- 部门之间无记忆化或计算复用。\n- 约束条件：$N \\ge 1$ 且 $D \\ge 1$。\n- 目标：推导出总时间复杂度，并以一个关于 $N$ 和 $D$ 的单一简化 $\\mathcal{O}(\\cdot)$ 表达式表示。\n\n**步骤 2：使用提取的已知条件进行验证**\n根据所需标准对问题进行评估。\n\n- **科学依据**：该问题是计算复杂性理论（大O表示法）在金融风险计算的一个简化但合理的模型中的应用。用于成对相互作用和线性遍数的成本模型 $a N^{2} + b N + c$ 在算法分析中是标准的。它完全符合计算机科学的原理。\n- **适定性**：该问题是适定的。它提供了所有必要的组成部分：子问题的成本函数、它们的组合方法（顺序相加）以及变量的约束条件。可以推导出一个唯一的、有意义的解。\n- **客观性**：问题以精确、客观和量化的术语陈述。诸如“无序对”、“线性时间遍数”和“在单个计算线程上顺序进行”等术语都是明确的。\n\n**步骤 3：结论与行动**\n该问题是**有效的**。这是一个直接、定义明确的算法分析练习。我现在将着手解决。\n\n设 $T_{dept}(N)$ 表示计算一个拥有 $N$ 个头寸的部门的风险指标所需的时间。根据问题陈述，其上界为一个关于 $N$ 的多项式，即：\n$$T_{dept}(N) \\le a N^{2} + b N + c$$\n其中 $a > 0$，$b > 0$ 和 $c > 0$ 是常数。这对应于单个部门的时间复杂度为 $\\mathcal{O}(N^{2})$。\n\n银行有 $D$ 个这样的部门，它们被顺序处理。顺序组合原理指出，一系列操作的总时间是每个独立操作时间的总和。由于部门之间没有计算复用，处理所有 $D$ 个部门所需的总时间，我们称之为 $T_{all\\_depts}(N, D)$，是 $D$ 次相同计算的成本之和。\n$$T_{all\\_depts}(N, D) = \\sum_{i=1}^{D} T_{dept}(N) = D \\cdot T_{dept}(N)$$\n因此，此计算阶段的上界为：\n$$D \\cdot (a N^{2} + b N + c)$$\n\n在部门计算之后，执行一个企业聚合步骤。设此聚合的时间为 $T_{agg}(D)$。问题陈述其上界为一个关于 $D$ 的线性函数：\n$$T_{agg}(D) \\le k D$$\n其中 $k > 0$ 是一个常数。这对应于时间复杂度为 $\\mathcal{O}(D)$。\n\n整个过程包括所有部门的计算，然后是最终的聚合。再次应用顺序组合原理，计算全公司风险的总时间 $T_{total}(N, D)$ 是这两个阶段时间之和。总时间的上界是：\n$$T_{total}(N, D) \\le T_{all\\_depts}(N, D) + T_{agg}(D)$$\n$$T_{total}(N, D) \\le D(a N^{2} + b N + c) + k D$$\n展开此表达式可得：\n$$T_{total}(N, D) \\le a D N^{2} + b D N + c D + k D$$\n$$T_{total}(N, D) \\le a D N^{2} + b D N + (c+k)D$$\n\n为了确定总的渐进时间复杂度，我们必须在这个多项式表达式中为大的 $N$ 和 $D$ 值找到主导项。这些项是 $a D N^{2}$、$b D N$ 和 $(c+k)D$。根据大O表示法的定义，我们需要找到常数 $C > 0$、$N_{0} \\ge 1$ 和 $D_{0} \\ge 1$，使得对于所有 $N \\ge N_{0}$ 和 $D \\ge D_{0}$，以下不等式成立：\n$$a D N^{2} + b D N + (c+k)D \\le C \\cdot g(N, D)$$\n其中 $g(N,D)$ 是表征增长率的最简函数。\n\n我们选择 $g(N, D) = D N^{2}$。我们必须证明 $a D N^{2} + b D N + (c+k)D \\in \\mathcal{O}(D N^{2})$。\n根据问题约束条件，$N \\ge 1$ 和 $D \\ge 1$。\n对于 $N \\ge 1$，我们有 $N \\le N^{2}$，因此 $b D N \\le b D N^{2}$。\n同样地，对于 $N \\ge 1$，我们有 $1 \\le N^{2}$，这意味着 $D \\le D N^{2}$，所以 $(c+k)D \\le (c+k)D N^{2}$。\n\n将这些不等式代回到总时间的表达式中：\n$$a D N^{2} + b D N + (c+k)D \\le a D N^{2} + b D N^{2} + (c+k)D N^{2}$$\n$$a D N^{2} + b D N + (c+k)D \\le (a + b + c + k) D N^{2}$$\n设 $C = a + b + c + k$。由于 $a, b, c, k$ 都是正常数，所以 $C$ 也是一个正常数。该不等式对所有 $N \\ge 1$ 和 $D \\ge 1$ 成立。\n因此，根据大O表示法的正式定义，总时间复杂度的上界为 $C \\cdot D N^{2}$。\n\n总体时间复杂度为 $\\mathcal{O}(D N^{2})$。", "answer": "$$\\boxed{\\mathcal{O}(D N^{2})}$$", "id": "2380831"}, {"introduction": "渐近复杂性告诉我们算法在输入规模极大时的行为，但对于实际问题规模，情况又如何呢？最后的这个实践练习探讨了在渐近效率和实际开销之间的关键权衡。通过比较标准的矩阵乘法算法和渐近更快的 Strassen 算法，您将计算出两者效率相当的“交叉点”，从而深入理解在实际应用中选择算法时所需考虑的因素 [@problem_id:2421609]。", "problem": "在计算工程中，算法效率通常通过计算算术运算次数与问题规模的函数关系来评估。考虑使用两种不同的算法来乘以两个大小为 $n \\times n$ 的稠密方阵：\n- 经典的三重循环算法的运算次数模型为 $T_{\\mathrm{std}}(n) = \\alpha n^{3}$，其中 $\\alpha > 0$ 是一个表示每次运算成本的常数。\n- Strassen 算法的运算次数模型为 $T_{\\mathrm{str}}(n) = \\beta n^{\\log_{2}(7)}$，其中 $\\beta > 0$ 是一个常数。\n\n假设由于不依赖于 $n$ 的实现开销，Strassen 算法在小规模问题上所需的运算次数是经典算法的 $10$ 倍，因此有 $\\beta = 10 \\alpha$。将 $n$ 视为一个正实数变量，确定一个阈值大小 $n^{\\ast}$，当规模达到此值时，Strassen 算法的运算次数首次小于或等于经典算法。\n\n请以单一的封闭形式解析表达式给出 $n^{\\ast}$ 的最终答案。不需要也不允许进行数值近似。", "solution": "必须首先验证问题陈述的科学正确性、逻辑一致性和客观性。\n\n步骤 1：提取已知条件。\n已知条件如下：\n- 经典算法的运算次数：$T_{\\mathrm{std}}(n) = \\alpha n^{3}$。\n- Strassen 算法的运算次数：$T_{\\mathrm{str}}(n) = \\beta n^{\\log_{2}(7)}$。\n- 矩阵是大小为 $n \\times n$ 的稠密方阵。\n- $\\alpha$ 是一个大于 $0$ 的常数，即 $\\alpha > 0$。\n- $\\beta$ 是一个大于 $0$ 的常数，即 $\\beta > 0$。\n- 给定了常数之间的特定关系：$\\beta = 10 \\alpha$。\n- 变量 $n$ 被视为一个正实数变量。\n- 目标是找到阈值大小 $n^{\\ast}$，在该值下 $T_{\\mathrm{str}}(n) \\le T_{\\mathrm{std}}(n)$。\n\n步骤 2：使用提取的已知条件进行验证。\n根据所需标准对问题进行评估。\n- **科学依据**：运算次数的模型 $T_{\\mathrm{std}}(n) \\propto n^{3}$ 和 $T_{\\mathrm{str}}(n) \\propto n^{\\log_{2}(7)}$ 分别是经典矩阵乘法算法和 Strassen 矩阵乘法算法渐近复杂度的标准且正确的表示。像 Strassen 这种更高级的算法具有更高的常数因子开销（由 $\\beta > \\alpha$ 表示）这一前提，在计算实践中是真实存在的情景。该问题牢固地建立在计算复杂度分析的既定原则之上。\n- **适定性**：问题定义清晰。它提供了关于单个变量 $n$ 的两个函数，并要求找出当它们关系改变时 $n$ 的值。所有常数都已定义，并给出了特定关系 $\\beta = 10 \\alpha$，这使得问题对于唯一的交叉点是可解的。将 $n$ 视为实数是此类渐近分析中标准且可接受的简化方法。\n- **客观性**：问题以精确、无偏见的数学语言陈述。不存在主观或基于观点的论断。\n\n步骤 3：结论与行动。\n问题陈述是有效的。它在科学上是合理的、适定的且客观的。我现在将继续提供一个完整的解决方案。\n\n目标是确定阈值大小 $n^{\\ast}$，在该值下 Strassen 算法的效率等于或高于经典算法。这个条件可以用以下不等式表示：\n$$T_{\\mathrm{str}}(n) \\le T_{\\mathrm{std}}(n)$$\n阈值 $n^{\\ast}$ 是指两个运算次数相等时 $n$ 的特定值。因此，我们求解以下方程：\n$$T_{\\mathrm{str}}(n^{\\ast}) = T_{\\mathrm{std}}(n^{\\ast})$$\n代入给定的运算次数表达式：\n$$\\beta (n^{\\ast})^{\\log_{2}(7)} = \\alpha (n^{\\ast})^{3}$$\n我们已知关系式 $\\beta = 10 \\alpha$。将其代入方程得到：\n$$10 \\alpha (n^{\\ast})^{\\log_{2}(7)} = \\alpha (n^{\\ast})^{3}$$\n因为题目说明 $\\alpha > 0$，所以我们可以将方程两边同时除以 $\\alpha$ 而不失一般性：\n$$10 (n^{\\ast})^{\\log_{2}(7)} = (n^{\\ast})^{3}$$\n为了求解 $n^{\\ast}$，我们重排各项以分离变量。假设 $n^{\\ast} > 0$，我们可以用 $(n^{\\ast})^{\\log_{2}(7)}$ 来除：\n$$10 = \\frac{(n^{\\ast})^{3}}{(n^{\\ast})^{\\log_{2}(7)}}$$\n使用指数性质 $x^{a} / x^{b} = x^{a-b}$：\n$$10 = (n^{\\ast})^{3 - \\log_{2}(7)}$$\n为了求出 $n^{\\ast}$，我们必须将其分离出来。这可以通过对等式两边取对数来实现。我们将使用自然对数，记作 $\\ln$。\n$$\\ln(10) = \\ln\\left((n^{\\ast})^{3 - \\log_{2}(7)}\\right)$$\n使用对数幂法则 $\\ln(x^{a}) = a \\ln(x)$：\n$$\\ln(10) = (3 - \\log_{2}(7)) \\ln(n^{\\ast})$$\n现在，我们可以求解 $\\ln(n^{\\ast})$。项 $3 - \\log_{2}(7)$ 不为零。我们注意到 $3 = \\log_{2}(2^{3}) = \\log_{2}(8)$。由于 $8 > 7$，因此 $\\log_{2}(8) > \\log_{2}(7)$，从而 $3 - \\log_{2}(7) > 0$。我们可以用这一项来除：\n$$\\ln(n^{\\ast}) = \\frac{\\ln(10)}{3 - \\log_{2}(7)}$$\n最后，为了求出 $n^{\\ast}$，我们对等式两边取指数：\n$$n^{\\ast} = \\exp\\left(\\frac{\\ln(10)}{3 - \\log_{2}(7)}\\right)$$\n此表达式为阈值 $n^{\\ast}$ 提供了精确的封闭形式解析值。对于任何 $n > n^{\\ast}$，不等式 $10 < n^{3 - \\log_{2}(7)}$ 都将成立，这等价于 $T_{\\mathrm{str}}(n) < T_{\\mathrm{std}}(n)$，从而证实 $n^{\\ast}$ 确实是交叉点，超过此点后 Strassen 算法更优。", "answer": "$$\\boxed{\\exp\\left(\\frac{\\ln(10)}{3 - \\log_{2}(7)}\\right)}$$", "id": "2421609"}]}