{"hands_on_practices": [{"introduction": "掌握任何算法的关键在于理解其在所有情况下的行为，包括边界情况。这项练习旨在检验你对动态规划方法基础的理解。通过构建一个背包容量小于任何物品重量的实例，我们能够直接审视动态规划的初始条件和递推关系如何正确处理看似简单但至关重要的场景。这个练习将帮助你验证算法的稳健性，并加深对递推过程的理解。[@problem_id:3202252]", "problem": "考虑 $0/1$ 背包问题，有 $n$ 个物品，其中每个物品 $i$ 有一个正整数重量 $w_i$ 和一个正整数价值 $v_i$，背包的容量为一个正整数 $W$。目标是选择一个物品子集，以在总重量不超过 $W$ 的约束下最大化总价值。\n\n给定以下实例：\n$$\nn = 5, \\quad W = 6,\n$$\n$$\n(w_1, w_2, w_3, w_4, w_5) = (7, 9, 11, 13, 15),\n$$\n$$\n(v_1, v_2, v_3, v_4, v_5) = (10, 14, 20, 26, 31).\n$$\n\n使用 $0/1$ 背包问题的标准动态规划 (DP) 公式，确定该算法对此实例所获得的最优总价值 $V^{\\ast}$。在您的推理中，审查容量 $j$（其中 $0 \\leq j \\leq W$）的 DP 基本情况的行为，以验证在 $W  \\min_{i} w_i$ 时的正确性。将最终答案表示为精确的实数。无需四舍五入。", "solution": "该问题是经典 $0/1$ 背包问题的一个实例，这是一个定义明确的组合优化问题。所提供的数据是自洽且一致的。要求是应用标准的动态规划 (DP) 算法，并在背包容量小于任何物品重量的特定条件下审查其行为。这是一个合理且有科学依据的查询，旨在测试对算法机制的理解，特别是其基本情况和递推逻辑。\n\n$0/1$ 背包问题的形式化表述如下：给定一组 $n$ 个物品，每个物品都有重量 $w_i  0$ 和价值 $v_i  0$，以及一个总容量为 $W$ 的背包，目标是找到一个物品子集，使得所选物品的总重量不超过 $W$ 的约束下，总价值最大化。\n\n标准的动态规划解法涉及创建一个大小为 $(n+1) \\times (W+1)$ 的表，我们将其表示为 $dp$。状态 $dp(i, j)$ 表示使用前 $i$ 个物品（从物品 $1$ 到物品 $i$）的子集，在背包容量为 $j$ 的情况下可以实现的最大价值。\n\n递推关系定义为：\n$$\ndp(i, j) =\n\\begin{cases}\ndp(i-1, j),  \\text{if } w_i  j \\\\\n\\max(dp(i-1, j), v_i + dp(i-1, j-w_i)),  \\text{if } w_i \\le j\n\\end{cases}\n$$\n对于 $i \\in \\{1, \\dots, n\\}$ 和 $j \\in \\{1, \\dots, W\\}$。\n\n递推的基本情况是：\n1. 对所有 $j \\in \\{0, \\dots, W\\}$，$dp(0, j) = 0$。这对应于没有物品可供选择的情况，因此无论背包容量如何，总价值始终为 $0$。\n2. 对所有 $i \\in \\{0, \\dots, n\\}$，$dp(i, 0) = 0$。这对应于背包容量为 $0$ 的情况，它不能容纳任何重量为正的物品，因此总价值始终为 $0$。\n\n给定的问题实例提供了以下参数：\n- 物品数量：$n = 5$\n- 背包容量：$W = 6$\n- 物品重量：$(w_1, w_2, w_3, w_4, w_5) = (7, 9, 11, 13, 15)$\n- 物品价值：$(v_1, v_2, v_3, v_4, v_5) = (10, 14, 20, 26, 31)$\n\n最终答案是 $dp(n, W) = dp(5, 6)$ 的值。\n\n对于这个特定实例，一个关键的观察是每个物品的重量都大于背包的容量。最小重量是 $\\min_{i \\in \\{1, \\dots, 5\\}} w_i = w_1 = 7$。由于 $W=6$，对于所有物品 $i \\in \\{1, \\dots, 5\\}$，条件 $w_i  W$ 都成立。因此，对于任何容量为 $j \\le W$ 的子问题，条件 $w_i  j$ 将始终为真。\n\n这意味着对于所有 $i \\in \\{1, \\dots, 5\\}$ 和所有 $j \\in \\{0, \\dots, 6\\}$，将只会调用递推关系的第一种情况：\n$$\ndp(i, j) = dp(i-1, j)\n$$\n这是因为不可能将任何物品 $i$ 放入容量为 $j \\le 6$ 的背包中，因为物品的重量 $w_i$ 太大了。DP 算法通过陈述使用前 $i$ 个物品能做的最好情况与使用前 $i-1$ 个物品能做的最好情况相同，从而正确地捕捉了这一事实。\n\n让我们构建 $i \\in \\{0, \\dots, 5\\}$ 和 $j \\in \\{0, \\dots, 6\\}$ 的 DP 表，以按要求演示该过程。\n\n步骤 0：初始化 (基本情况)\n表的第一行 ($i=0$) 和第一列 ($j=0$) 被初始化为 $0$。\n对于 $j \\in \\{0, 1, 2, 3, 4, 5, 6\\}$，$dp(0, j) = 0$。\n对于 $i \\in \\{0, 1, 2, 3, 4, 5\\}$，$dp(i, 0) = 0$。\n\n步骤 1：考虑物品 1 ($i=1$)\n重量为 $w_1 = 7$。对于每个容量 $j \\in \\{1, \\dots, 6\\}$，我们有 $w_1  j$。\n因此，对于每个 $j$，我们应用 $dp(1, j) = dp(0, j)$。\n$dp(1, 1) = dp(0, 1) = 0$\n$dp(1, 2) = dp(0, 2) = 0$\n...\n$dp(1, 6) = dp(0, 6) = 0$\n$i=1$ 的整行都保持为 $0$。\n\n步骤 2：考虑物品 2 ($i=2$)\n重量为 $w_2 = 9$。对于每个容量 $j \\in \\{1, \\dots, 6\\}$，我们有 $w_2  j$。\n因此，对于每个 $j$，我们应用 $dp(2, j) = dp(1, j)$。\n$dp(2, 1) = dp(1, 1) = 0$\n$dp(2, 2) = dp(1, 2) = 0$\n...\n$dp(2, 6) = dp(1, 6) = 0$\n$i=2$ 的整行都保持为 $0$。\n\n这个模式对所有后续物品都继续适用。\n\n步骤 3：考虑物品 3 ($i=3$, $w_3=11$)。对于所有 $j \\le 6$，$w_3  j$，所以 $dp(3, j) = dp(2, j) = 0$。\n步骤 4：考虑物品 4 ($i=4$, $w_4=13$)。对于所有 $j \\le 6$，$w_4  j$，所以 $dp(4, j) = dp(3, j) = 0$。\n步骤 5：考虑物品 5 ($i=5$, $w_5=15$)。对于所有 $j \\le 6$，$w_5  j$，所以 $dp(5, j) = dp(4, j) = 0$。\n\n传播是直接的：\n$dp(5, 6) = dp(4, 6)$ 因为 $w_5 = 15  6$。\n$dp(4, 6) = dp(3, 6)$ 因为 $w_4 = 13  6$。\n$dp(3, 6) = dp(2, 6)$ 因为 $w_3 = 11  6$。\n$dp(2, 6) = dp(1, 6)$ 因为 $w_2 = 9  6$。\n$dp(1, 6) = dp(0, 6)$ 因为 $w_1 = 7  6$。\n\n从基本情况我们知道 $dp(0, 6) = 0$。因此，通过这个递推链，$dp(5, 6) = 0$。\n\n完整的 DP 表将是一个 $6 \\times 7$ 的矩阵（对于 $i=0..5, j=0..6$），完全用零填充。这正确地反映了没有物品可以放入背包的事实。最优总价值 $V^{\\ast}$ 是单元格 $dp(n, W) = dp(5, 6)$ 中的值。\n\n因此，最优总价值为 $0$。对 DP 算法行为的审查证实，它通过从基本情况系统地传播零值解，正确处理了 $W  \\min_{i} w_i$ 的情况。", "answer": "$$\n\\boxed{0}\n$$", "id": "3202252"}, {"introduction": "组合优化问题有时会展现出令人惊讶的“临界点”现象，即微小的输入变化可能导致最优解结构的巨大改变。本练习精心设计了一个场景，其中增加一个价值不高的小物品，会使最优策略从选择少数几个大重量物品彻底转变为选择多个小重量物品。通过解决这个问题，你将亲身体会到为何直觉在背包问题中可能不可靠，并理解动态规划等系统性方法对于确保找到真正最优解的必要性。[@problem_id:3202249]", "problem": "考虑经典的 $0/1$ 背包问题：给定一组索引为 $i \\in \\{1, 2, \\dots, n\\}$ 的物品，每件物品都有一个整数重量 $w_i$ 和一个整数价值 $v_i$，以及一个背包容量 $W$，选择一个子集以最大化总价值，但总重量不能超过 $W$。形式上，选择二进制决策变量 $x_i \\in \\{0,1\\}$，以最大化 $\\sum_{i=1}^{n} v_i x_i$，约束条件为 $\\sum_{i=1}^{n} w_i x_i \\leq W$。一种基础的解决方法是使用动态规划 (DP)，其中对于前 $i$ 件物品和容量 $c$ 的价值函数满足递推关系：当 $c \\geq w_i$ 时，$F[i,c] = \\max\\{F[i-1,c], F[i-1, c - w_i] + v_i\\}$，否则 $F[i,c] = F[i-1,c]$，边界条件为 $F[0,c] = 0$。\n\n设计并分析以下实例，以证明增加一种重量小但价值适中的物品类型，可以使最优解从装入几件大重量物品变为装入多件小重量物品。设初始容量为 $W = 16$。初始物品集包含两件大物品和七件小物品：\n- 大物品：$L_1$ 的 $(w, v) = (9, 18)$ 和 $L_2$ 的 $(w, v) = (7, 13)$。\n- 小物品：$S_j$（$j \\in \\{1, 2, \\dots, 7\\}$），共七件，每件的 $(w, v) = (2, 4)$。\n\n计算此初始实例的最优总价值，记为 $V_{\\text{before}}$。然后，通过增加一件类型为 $S_8$ 的物品，其 $(w, v) = (2, 4)$，来扩充该实例（因此现在总共有八件小物品）。计算扩充后实例的最优总价值，记为 $V_{\\text{after}}$。最后，计算 $V_{\\text{after}} - V_{\\text{before}}$。请提供精确的整数值作为最终答案。", "solution": "该问题要求我们解决两个 0/1 背包问题的实例，并找出它们最优值的差异。背包的容量是 $W=16$。\n\n物品可以分为两个不同的大物品 $L_1$ 和 $L_2$，以及一组相同的小物品 $S_j$。由于大物品的数量很少（2个），我们可以通过考虑放入或不放入这些大物品的所有可能组合来解决这个问题。对于每种组合，我们计算剩余容量，并用尽可能多的小物品来填充。\n\n**第 1 部分：初始实例 ($V_{\\text{before}}$)**\n\n物品集包含 $(w,v)=(9,18)$ 的 $L_1$、$(w,v)=(7,13)$ 的 $L_2$ 以及 7 件 $(w,v)=(2,4)$ 的小物品 $S_j$。总容量为 $W=16$。\n\n我们根据对大物品的选择，分析以下四种互斥的情况：\n\n- **情况 A：不选择任何大物品。**\n  可用容量为 $W = 16$。小物品每件重量为 $w_S = 2$。我们有 7 件这样的小物品。可以装入的小物品数量为 $\\min(\\lfloor \\frac{16}{2} \\rfloor, 7) = \\min(8, 7) = 7$。\n  总重量为 $7 \\times 2 = 14 \\leq 16$。\n  总价值为 $V_A = 7 \\times 4 = 28$。\n\n- **情况 B：只选择物品 $L_1$。**\n  $L_1$ 的重量为 $w_{L_1} = 9$，价值为 $v_{L_1} = 18$。\n  剩余容量为 $W' = 16 - 9 = 7$。\n  可以装入剩余容量的小物品数量为 $\\lfloor \\frac{7}{2} \\rfloor = 3$。\n  总价值为 $V_B = v_{L_1} + 3 \\times v_S = 18 + 3 \\times 4 = 18 + 12 = 30$。\n  总重量为 $9 + 3 \\times 2 = 15 \\leq 16$。\n\n- **情况 C：只选择物品 $L_2$。**\n  $L_2$ 的重量为 $w_{L_2} = 7$，价值为 $v_{L_2} = 13$。\n  剩余容量为 $W' = 16 - 7 = 9$。\n  可以装入的小物品数量为 $\\lfloor \\frac{9}{2} \\rfloor = 4$。\n  总价值为 $V_C = v_{L_2} + 4 \\times v_S = 13 + 4 \\times 4 = 13 + 16 = 29$。\n  总重量为 $7 + 4 \\times 2 = 15 \\leq 16$。\n\n- **情况 D：物品 $L_1$ 和 $L_2$ 都被选择。**\n  总重量为 $w_{L_1} + w_{L_2} = 9 + 7 = 16$。这正好填满了背包容量。\n  总价值为 $V_D = v_{L_1} + v_{L_2} = 18 + 13 = 31$。\n  剩余容量为 $16 - 16 = 0$，因此不能再添加小物品。\n\n初始实例的最优值 $V_{\\text{before}}$ 是这四种情况中价值的最大值：\n$$V_{\\text{before}} = \\max\\{V_A, V_B, V_C, V_D\\} = \\max\\{28, 30, 29, 31\\} = 31$$\n最优解是选择两个大物品 $L_1$ 和 $L_2$。\n\n**第 2 部分：扩充实例 ($V_{\\text{after}}$)**\n\n现在，增加了一件小物品，因此有 8 件 $(w,v)=(2,4)$ 的物品 $S_j$。大物品和背包容量保持不变。我们重新评估这四种情况。\n\n- **情况 A'：不选择任何大物品。**\n  可用容量为 $W = 16$。我们现在有 8 件小物品。\n  可以装入的小物品数量为 $\\min(\\lfloor \\frac{16}{2} \\rfloor, 8) = \\min(8, 8) = 8$。\n  总重量为 $8 \\times 2 = 16$。\n  总价值为 $V_{A'} = 8 \\times 4 = 32$。\n\n- **情况 B'：只选择物品 $L_1$。**\n  这种情况与初始实例中的情况 B 相同，因为可用的小物品数量（8）超过了可以装入的数量（3）。\n  总价值为 $V_{B'} = 30$。\n\n- **情况 C'：只选择物品 $L_2$。**\n  这种情况与初始实例中的情况 C 相同，因为可用的小物品数量（8）超过了可以装入的数量（4）。\n  总价值为 $V_{C'} = 29$。\n\n- **情况 D'：物品 $L_1$ 和 $L_2$ 都被选择。**\n  这种情况与初始实例中的情况 D 相同。\n  总价值为 $V_{D'} = 31$。\n\n扩充实例的最优值 $V_{\\text{after}}$ 是这些新情况中价值的最大值：\n$$V_{\\text{after}} = \\max\\{V_{A'}, V_{B'}, V_{C'}, V_{D'}\\} = \\max\\{32, 30, 29, 31\\} = 32$$\n最优解现在转变为只选择 8 件小物品。\n\n**第 3 部分：最终计算**\n\n问题要求计算 $V_{\\text{after}} - V_{\\text{before}}$ 的值。\n$$V_{\\text{after}} - V_{\\text{before}} = 32 - 31 = 1$$\n增加一件价值为 4 的小物品，使可实现的最大价值并非增加了 4，而只增加了 1，这是通过使一个完全不同的物品组合成为最优解来实现的。", "answer": "$$\\boxed{1}$$", "id": "3202249"}, {"introduction": "在算法学习中，评估不同策略的性能与学习最优算法本身同样重要。贪心算法因其直观和简单而具有吸引力，但它们往往无法保证最优解。这项练习挑战你分析针对0/1背包问题的“价值重量比”贪心启发式算法。你的任务是找出一族特定的问题实例，在该实例下，这种贪心策略的性能会变得极差，其结果与最优解的差距可以无限拉大。这有助于深刻理解贪心算法的局限性，并突显动态规划方法的优越性。[@problem_id:3202339]", "problem": "给定一个0-1背包问题，其中有一组物品，每个物品 $i$ 都有一个正整数重量 $w_i$ 和一个正整数价值 $v_i$，以及一个容量为 $C$ 的背包。目标是选择一个物品子集，使得在总重量不超过 $C$ 的约束下，价值总和最大化。考虑按比率贪心启发式算法，该算法重复选择价值重量比 $v_i / w_i$ 最大且仍然能放入背包的剩余物品，直到没有更多物品可以添加为止。仅使用问题的核心定义和贪心选择规则，确定下列哪个参数化实例族导致按比率贪心启发式算法具有最差的渐近性能，即当参数增长时，该启发式算法的目标值与最优目标值的比率趋于 $0$。\n\n每个选项都描述了一个由整数参数 $m$ 索引的实例族，并指定了容量和物品。在每个选项中，所有重量和价值都是整数。\n\nA. 对于每个整数 $m \\ge 2$：容量 $C = m$。物品：\n- 物品 $H$：重量 $w_H = m$，价值 $v_H = 2m - 1$。\n- 物品 $D$：重量 $w_D = 1$，价值 $v_D = 2$。\n没有其他物品。\n\nB. 对于每个整数 $m \\ge 2$：容量 $C = m$。物品：\n- $m$ 个物品，每个物品的重量 $w = 1$，价值 $v = 1$。\n- 物品 $H$：重量 $w_H = m$，价值 $v_H = m - 1$。\n没有其他物品。\n\nC. 对于每个整数 $m \\ge 4$：容量 $C = m$。物品：\n- 物品 $H$：重量 $w_H = m$，价值 $v_H = m$。\n- 物品 $D$：重量 $w_D = \\lfloor m/2 \\rfloor + 1$，价值 $v_D = \\lfloor m/2 \\rfloor + 2$。\n没有其他物品。\n\nD. 对于每个整数 $m \\ge 3$：容量 $C = m$。物品：\n- 物品 $H$：重量 $w_H = m - 1$，价值 $v_H = m$。\n- 物品 $S$：重量 $w_S = 1$，价值 $v_S = 1$。\n没有其他物品。\n\n当 $m \\to \\infty$ 时，哪个选项展示了按比率贪心启发式算法的最差渐近性能？", "solution": "问题的核心是分析按比率贪心启发式算法在四种不同的由整数 $m$ 参数化的0/1背包问题实例族上的渐近性能。性能指标是贪心启发式算法获得的价值 $V_{greedy}$ 与最优解获得的价值 $V_{optimal}$ 的比率。我们正在寻找当 $m \\to \\infty$ 时，该比率 $R(m) = V_{greedy} / V_{optimal}$ 趋于 $0$ 的实例族。\n\n我们来逐一分析每个选项。\n\nA. 对于每个整数 $m \\ge 2$：容量 $C = m$。\n物品：\n- 物品 $H$：重量 $w_H = m$，价值 $v_H = 2m - 1$\n- 物品 $D$：重量 $w_D = 1$，价值 $v_D = 2$\n\n首先，我们计算价值重量比：\n- 物品 $H$ 的比率：$\\frac{v_H}{w_H} = \\frac{2m - 1}{m} = 2 - \\frac{1}{m}$\n- 物品 $D$ 的比率：$\\frac{v_D}{w_D} = \\frac{2}{1} = 2$\n\n对于任何 $m \\ge 2$，我们有 $2  2 - \\frac{1}{m}$。因此，物品 $D$ 的比率严格更高。\n\n按比率贪心启发式算法的执行过程如下：\n1.  选择物品 $D$ (最高比率)。其重量 $w_D = 1 \\le C = m$，因此可以放入。\n2.  背包现在包含物品 $D$，总价值为 $v_D = 2$。剩余容量为 $C' = C - w_D = m - 1$。\n3.  考虑下一个物品 $H$。其重量为 $w_H = m$。由于 $w_H  C'$，物品 $H$ 无法放入。\n4.  没有更多物品可以添加。启发式算法终止。\n\n贪心启发式算法得到的总价值为 $V_{greedy} = 2$。\n\n现在，我们来寻找最优解。可能的有效物品子集是 $\\{D\\}$ 和 $\\{H\\}$。子集 $\\{H, D\\}$ 是无效的，因为其总重量 $w_H + w_D = m + 1  C = m$。\n- 子集 $\\{D\\}$ 的价值是 $v_D = 2$。\n- 子集 $\\{H\\}$ 的价值是 $v_H = 2m - 1$。\n对于 $m \\ge 2$，$v_H = 2m - 1 \\ge 2(2) - 1 = 3  2$。因此，最优选择是只取物品 $H$。\n最优价值为 $V_{optimal} = v_H = 2m - 1$。\n\n性能比为 $R_A(m) = \\frac{V_{greedy}}{V_{optimal}} = \\frac{2}{2m - 1}$。\n当 $m \\to \\infty$ 时，其渐近性能为此比率的极限：\n$$ \\lim_{m \\to \\infty} R_A(m) = \\lim_{m \\to \\infty} \\frac{2}{2m - 1} = 0 $$\n该比率趋于 $0$。这个实例族表现出所述的最差渐近行为。\n\n基于此分析，选项A是正确答案的候选者。\n\nB. 对于每个整数 $m \\ge 2$：容量 $C = m$。\n物品：\n- $m$ 个物品（我们称之为 $S_i$，其中 $i=1, \\dots, m$），每个物品的重量 $w_{S_i} = 1$，价值 $v_{S_i} = 1$。\n- 物品 $H$：重量 $w_H = m$，价值 $v_H = m - 1$。\n\n价值重量比为：\n- 每个物品 $S_i$ 的比率：$\\frac{v_{S_i}}{w_{S_i}} = \\frac{1}{1} = 1$\n- 物品 $H$ 的比率：$\\frac{v_H}{w_H} = \\frac{m - 1}{m} = 1 - \\frac{1}{m}$\n\n对于任何 $m \\ge 2$，我们有 $1  1 - \\frac{1}{m}$。物品 $S_i$ 具有最高的比率。\n\n贪心启发式算法的执行过程如下：\n1.  选择一个物品 $S_1$ (比率 $1$)。它可以放入。剩余容量为 $m-1$。\n2.  选择 $S_2$。它可以放入。剩余容量为 $m-2$。\n...\nm. 选择 $S_m$。它可以放入。剩余容量为 $m - m = 0$。\n启发式算法装入了所有 $m$ 个 S 类型的物品。总重量为 $m \\times 1 = m$，总价值为 $m \\times 1 = m$。没有其他物品可以添加。\n得到的总价值为 $V_{greedy} = m$。\n\n对于最优解，我们比较两种主要可能性：\n- 装入所有 $m$ 个 S 类型的物品：总价值为 $m$。\n- 装入物品 H：总价值为 $v_H = m - 1$。\n由于对于所有 $m$ 都有 $m  m - 1$，最优解是装入 $m$ 个小物品。\n最优价值为 $V_{optimal} = m$。\n\n性能比为 $R_B(m) = \\frac{V_{greedy}}{V_{optimal}} = \\frac{m}{m} = 1$。\n渐近性能为 $\\lim_{m \\to \\infty} R_B(m) = 1$。该比率不趋于 $0$。\n因此，此选项不正确。\n\nC. 对于每个整数 $m \\ge 4$：容量 $C = m$。\n物品：\n- 物品 $H$：重量 $w_H = m$，价值 $v_H = m$。\n- 物品 $D$：重量 $w_D = \\lfloor m/2 \\rfloor + 1$，价值 $v_D = \\lfloor m/2 \\rfloor + 2$。\n\n价值重量比为：\n- 物品 $H$ 的比率：$\\frac{v_H}{w_H} = \\frac{m}{m} = 1$。\n- 物品 $D$ 的比率：$\\frac{v_D}{w_D} = \\frac{\\lfloor m/2 \\rfloor + 2}{\\lfloor m/2 \\rfloor + 1} = 1 + \\frac{1}{\\lfloor m/2 \\rfloor + 1}$。\n由于 $m \\ge 4$，$\\lfloor m/2 \\rfloor \\ge 2$，所以物品 $D$ 的比率严格大于 $1$。\n\n贪心启发式算法首先选择物品 $D$。\n其重量 $w_D = \\lfloor m/2 \\rfloor + 1 \\le m/2 + 1$。对于 $m \\ge 2$，$m \\ge m/2 + 1$，所以该物品可以放入。剩余容量为 $m - (\\lfloor m/2 \\rfloor + 1)$。重量为 $w_H = m$ 的物品 $H$ 无法放入。\n启发式算法终止，背包中只有物品 $D$。\n得到的价值为 $V_{greedy} = v_D = \\lfloor m/2 \\rfloor + 2$。\n\n对于最优解，我们比较取物品 $D$ 和取物品 $H$：\n- 取 $D$ 的价值：$v_D = \\lfloor m/2 \\rfloor + 2$。\n- 取 $H$ 的价值：$v_H = m$。\n对于 $m \\ge 4$，我们有 $m  m/2 + 1$，这意味着 $m/2 - 1  0$。同时，$\\lfloor m/2 \\rfloor \\le m/2$。因此 $m - (\\lfloor m/2 \\rfloor + 2) \\ge m - (m/2 + 2) = m/2 - 2$。对于 $m \\ge 4$，$m/2-2 \\ge 0$，所以 $m \\ge m/2+2 \\ge \\lfloor m/2 \\rfloor + 2$。最优解是取物品 $H$。\n最优价值为 $V_{optimal} = m$。\n\n性能比为 $R_C(m) = \\frac{V_{greedy}}{V_{optimal}} = \\frac{\\lfloor m/2 \\rfloor + 2}{m}$。\n为了求极限，我们可以使用夹逼定理。我们知道 $\\frac{m}{2} - 1  \\lfloor m/2 \\rfloor \\le \\frac{m}{2}$。\n所以，$\\frac{m/2 + 1}{m}  \\frac{\\lfloor m/2 \\rfloor + 2}{m} \\le \\frac{m/2 + 2}{m}$。\n当 $m \\to \\infty$ 时，下界 $\\frac{m/2 + 1}{m} \\to \\frac{1}{2}$ 和上界 $\\frac{m/2 + 2}{m} \\to \\frac{1}{2}$ 都趋于 $\\frac{1}{2}$。\n$$ \\lim_{m \\to \\infty} R_C(m) = \\frac{1}{2} $$\n该比率趋于 $1/2$，而不是 $0$。\n因此，此选项不正确。\n\nD. 对于每个整数 $m \\ge 3$：容量 $C = m$。\n物品：\n- 物品 $H$：重量 $w_H = m - 1$，价值 $v_H = m$。\n- 物品 $S$：重量 $w_S = 1$，价值 $v_S = 1$。\n\n价值重量比为：\n- 物品 $H$ 的比率：$\\frac{v_H}{w_H} = \\frac{m}{m - 1} = 1 + \\frac{1}{m - 1}$。\n- 物品 $S$ 的比率：$\\frac{v_S}{w_S} = \\frac{1}{1} = 1$。\n对于 $m \\ge 3$，物品 $H$ 的比率严格大于物品 $S$ 的比率。\n\n贪心启发式算法的执行过程如下：\n1.  选择物品 $H$。其重量 $w_H = m - 1 \\le C = m$，因此可以放入。\n2.  背包中包含物品 $H$。价值为 $v_H = m$。剩余容量为 $C' = C - w_H = m - (m-1) = 1$。\n3.  考虑物品 $S$。其重量为 $w_S = 1$。由于 $w_S \\le C'$，它可以放入。\n4.  背包现在同时包含物品 $H$ 和 $S$。\n总价值为 $V_{greedy} = v_H + v_S = m + 1$。\n\n最优解必须至少与贪心解一样好。贪心算法装入了所有可用的物品，达到了 $m+1$ 的总价值。由于没有更多物品可以添加，这显然就是最优解。\n最优价值为 $V_{optimal} = m + 1$。\n\n性能比为 $R_D(m) = \\frac{V_{greedy}}{V_{optimal}} = \\frac{m + 1}{m + 1} = 1$。\n渐近性能为 $\\lim_{m \\to \\infty} R_D(m) = 1$。该比率不趋于 $0$。在这种情况下，贪心启发式算法总是最优的。\n因此，此选项不正确。\n\n结果总结：\n- 选项 A：$\\lim_{m \\to \\infty} R_A(m) = 0$。\n- 选项 B：$\\lim_{m \\to \\infty} R_B(m) = 1$。\n- 选项 C：$\\lim_{m \\to \\infty} R_C(m) = 1/2$。\n- 选项 D：$\\lim_{m \\to \\infty} R_D(m) = 1$。\n\n只有选项A中的实例族导致按比率贪心启发式算法的性能比在参数 $m$ 增长时趋于 $0$。这代表了问题陈述中定义的最差渐近性能。\n\n选项的最终评估：\n- 选项 A：正确。性能比趋于 $0$。\n- 选项 B：不正确。性能比趋于 $1$。\n- 选项 C：不正确。性能比趋于 $1/2$。\n- 选项 D：不正确。性能比趋于 $1$。", "answer": "$$\\boxed{A}$$", "id": "3202339"}]}