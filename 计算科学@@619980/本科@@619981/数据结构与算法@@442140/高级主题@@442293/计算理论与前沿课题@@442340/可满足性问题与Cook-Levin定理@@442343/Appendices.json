{"hands_on_practices": [{"introduction": "许多复杂的组合问题，例如经典的图3-着色问题，都可以通过将其转化为布尔可满足性（SAT）问题来求解。这个练习将指导你亲手完成这一著名的归约过程，将图的顶点和边的约束条件转化为逻辑子句。通过这个实践，你将对NP完备性理论的核心思想——“一个问题可以被‘伪装’成另一个问题”——建立起直观而深刻的理解。[@problem_id:3268206]", "problem": "考虑布尔可满足性问题 (SAT) 和 Cook–Levin 定理，该定理确立了 SAT 是非确定性多项式时间完全的 (NP-完全)。证明组合问题困难性的一个经典方法是将其归约到 SAT。图 $3$-着色问题的定义如下：给定一个无向图 $G=(V,E)$，判断是否可以用恰好 $3$ 种颜色对 $V$ 中的顶点进行着色，使得 $E$ 中任意一条边的两个端点颜色都不同。仅使用 SAT、合取范式 (CNF) 和图 3-着色问题的基本定义，对以下特定图实例执行归约：\n$$\nG=(V,E),\\quad V=\\{v_{1},v_{2},v_{3},v_{4},v_{5}\\},\\quad E=\\{(v_{1},v_{2}),(v_{2},v_{3}),(v_{3},v_{4}),(v_{4},v_{5}),(v_{5},v_{1}),(v_{2},v_{5})\\}.\n$$\n通过为每个顶点 $v_{i}\\in V$ 和每种颜色 $c\\in\\{1,2,3\\}$ 引入布尔变量 $x_{i,c}$，并编码以下约束，构造一个 CNF 公式，该公式的满足赋值与 $G$ 的有效 3-着色一一对应：\n- 对每个顶点，它至少被赋予一种颜色且至多被赋予一种颜色的约束，以及\n- 对每条边，其端点颜色不同的约束。\n\n明确地列举出此实例中为每个顶点和每条边生成的所有变量和所有 CNF 子句。然后，计算所得 CNF 公式中的子句总数。将最终答案表示为一个精确整数。无需四舍五入。", "solution": "该问题是有效的，因为它是计算复杂性理论中一个定义明确的标准练习，具体涉及将图 3-着色问题归约到布尔可满足性问题 (SAT)。所有必需信息，包括具体的图实例和构造合取范式 (CNF) 公式的规则，都已明确提供且逻辑上一致。\n\n我们的任务是构造一个 CNF 公式 $\\Phi$，该公式是可满足的当且仅当给定的图 $G=(V, E)$ 是 3-可着色的。该图的定义为顶点集 $V=\\{v_{1},v_{2},v_{3},v_{4},v_{5}\\}$ 和边集 $E=\\{(v_{1},v_{2}),(v_{2},v_{3}),(v_{3},v_{4}),(v_{4},v_{5}),(v_{5},v_{1}),(v_{2},v_{5})\\}$。顶点数为 $|V|=5$，边数为 $|E|=6$。我们将使用 3 种颜色，可以将其标记为 $\\{1, 2, 3\\}$。\n\n首先，我们定义布尔变量。对于每个顶点 $v_i \\in V$ 和每种颜色 $c \\in \\{1, 2, 3\\}$，我们引入一个变量 $x_{i,c}$。如果顶点 $v_i$ 被着以颜色 $c$，则变量 $x_{i,c}$ 的值为真，否则为假。由于有 5 个顶点和 3 种颜色，我们总共有 $5 \\times 3 = 15$ 个变量：\n$x_{1,1}, x_{1,2}, x_{1,3}, x_{2,1}, x_{2,2}, x_{2,3}, x_{3,1}, x_{3,2}, x_{3,3}, x_{4,1}, x_{4,2}, x_{4,3}, x_{5,1}, x_{5,2}, x_{5,3}$。\n\nCNF 公式 $\\Phi$ 是强制执行问题陈述中描述的三种类型约束的子句的合取。\n\n约束1：每个顶点必须被赋予至少一种颜色。\n对于每个顶点 $v_i \\in V$，它必须被着以颜色 1，或颜色 2，或颜色 3。这可以转化为形式为 $(x_{i,1} \\lor x_{i,2} \\lor x_{i,3})$ 的子句。由于有 $|V|=5$ 个顶点，该约束生成 5 个子句：\n1. 对于 $v_1$：$(x_{1,1} \\lor x_{1,2} \\lor x_{1,3})$\n2. 对于 $v_2$：$(x_{2,1} \\lor x_{2,2} \\lor x_{2,3})$\n3. 对于 $v_3$：$(x_{3,1} \\lor x_{3,2} \\lor x_{3,3})$\n4. 对于 $v_4$：$(x_{4,1} \\lor x_{4,2} \\lor x_{4,3})$\n5. 对于 $v_5$：$(x_{5,1} \\lor x_{5,2} \\lor x_{5,3})$\n此约束的子句总数为 5。\n\n约束2：每个顶点必须被赋予至多一种颜色。\n对于每个顶点 $v_i \\in V$ 以及每对不同的颜色 $c_1, c_2 \\in \\{1, 2, 3\\}$，顶点 $v_i$ 不能同时被着以 $c_1$ 和 $c_2$ 两种颜色。这由子句 $(\\neg x_{i,c_1} \\lor \\neg x_{i,c_2})$ 强制执行。对于每个顶点，有 $\\binom{3}{2}=3$ 对颜色：$(1,2)$, $(1,3)$ 和 $(2,3)$。由于有 $|V|=5$ 个顶点，该约束生成 $5 \\times 3 = 15$ 个子句。\n1. 对于 $v_1$：$(\\neg x_{1,1} \\lor \\neg x_{1,2})$，$(\\neg x_{1,1} \\lor \\neg x_{1,3})$，$(\\neg x_{1,2} \\lor \\neg x_{1,3})$\n2. 对于 $v_2$：$(\\neg x_{2,1} \\lor \\neg x_{2,2})$，$(\\neg x_{2,1} \\lor \\neg x_{2,3})$，$(\\neg x_{2,2} \\lor \\neg x_{2,3})$\n3. 对于 $v_3$：$(\\neg x_{3,1} \\lor \\neg x_{3,2})$，$(\\neg x_{3,1} \\lor \\neg x_{3,3})$，$(\\neg x_{3,2} \\lor \\neg x_{3,3})$\n4. 对于 $v_4$：$(\\neg x_{4,1} \\lor \\neg x_{4,2})$，$(\\neg x_{4,1} \\lor \\neg x_{4,3})$，$(\\neg x_{4,2} \\lor \\neg x_{4,3})$\n5. 对于 $v_5$：$(\\neg x_{5,1} \\lor \\neg x_{5,2})$，$(\\neg x_{5,1} \\lor \\neg x_{5,3})$，$(\\neg x_{5,2} \\lor \\neg x_{5,3})$\n此约束的子句总数为 15。\n\n约束3：没有两个相邻顶点共享相同的颜色。\n对于每条边 $(v_i, v_j) \\in E$ 和每种颜色 $c \\in \\{1, 2, 3\\}$，不允许 $v_i$ 和 $v_j$ 都被着以颜色 $c$。这由子句 $(\\neg x_{i,c} \\lor \\neg x_{j,c})$ 来体现。该图有 $|E|=6$ 条边。对于每条边，我们必须对所有 3 种颜色强制执行此约束。因此，该约束生成 $6 \\times 3 = 18$ 个子句。\n边集为 $E=\\{(v_{1},v_{2}),(v_{2},v_{3}),(v_{3},v_{4}),(v_{4},v_{5}),(v_{5},v_{1}),(v_{2},v_{5})\\}$。\n1. 对于边 $(v_1, v_2)$：$(\\neg x_{1,1} \\lor \\neg x_{2,1})$，$(\\neg x_{1,2} \\lor \\neg x_{2,2})$，$(\\neg x_{1,3} \\lor \\neg x_{2,3})$\n2. 对于边 $(v_2, v_3)$：$(\\neg x_{2,1} \\lor \\neg x_{3,1})$，$(\\neg x_{2,2} \\lor \\neg x_{3,2})$，$(\\neg x_{2,3} \\lor \\neg x_{3,3})$\n3. 对于边 $(v_3, v_4)$：$(\\neg x_{3,1} \\lor \\neg x_{4,1})$，$(\\neg x_{3,2} \\lor \\neg x_{4,2})$，$(\\neg x_{3,3} \\lor \\neg x_{4,3})$\n4. 对于边 $(v_4, v_5)$：$(\\neg x_{4,1} \\lor \\neg x_{5,1})$，$(\\neg x_{4,2} \\lor \\neg x_{5,2})$，$(\\neg x_{4,3} \\lor \\neg x_{5,3})$\n5. 对于边 $(v_5, v_1)$：$(\\neg x_{5,1} \\lor \\neg x_{1,1})$，$(\\neg x_{5,2} \\lor \\neg x_{1,2})$，$(\\neg x_{5,3} \\lor \\neg x_{1,3})$\n6. 对于边 $(v_2, v_5)$：$(\\neg x_{2,1} \\lor \\neg x_{5,1})$，$(\\neg x_{2,2} \\lor \\neg x_{5,2})$，$(\\neg x_{2,3} \\lor \\neg x_{5,3})$\n此约束的子句总数为 18。\n\n最后，为了找到最终的 CNF 公式 $\\Phi$ 中的子句总数，我们将由三种约束生成的子句数量相加：\n子句总数 = (约束1的子句数) + (约束2的子句数) + (约束3的子句数)\n子句总数 = $5 + 15 + 18 = 38$。\n因此，对于给定的图实例，与 3-着色问题等价的 CNF 公式包含 38 个子句。", "answer": "$$\\boxed{38}$$", "id": "3268206"}, {"introduction": "SAT的表达能力远不止于图论等组合问题，它甚至可以编码计算的基本构件——算术运算。本练习将深入探讨如何将一个简单的算术不等式 $x + y < z$ 编码为合取范式（CNF）公式。通过遵循Tseitin变换这一系统性方法，你将亲身体验如何将一个布尔电路网络精确地转化为逻辑子句，从而领会Cook-Levin定理背后“任何计算过程都可以由一个布尔公式建模”的精髓。[@problem_id:3268195]", "problem": "考虑 Cook–Levin 定理背后的典范归约视角，其中有限计算的约束被编码为合取范式 (CNF) 的布尔公式。设 $x,y,z$ 为无符号 2 位整数，其位向量为 $x = (x_{1}, x_{0})$、$y = (y_{1}, y_{0})$ 和 $z = (z_{1}, z_{0})$，其中每一位都是一个布尔变量。通过一个由布尔门构成的纹波进位加法器，定义 $x+y$ 的算术和位如下：\n- 最低有效位：$s_{0} = x_{0} \\oplus y_{0}$ 且 $c_{1} = x_{0} \\land y_{0}$。\n- 最高有效位：引入一个辅助变量 $u = x_{1} \\oplus y_{1}$，则 $s_{1} = u \\oplus c_{1}$，并使用 $d = x_{1} \\land y_{1}$、$w = c_{1} \\land u$ 和 $c_{2} = d \\lor w$ 定义进位输出 $c_{2}$。\n\n为将严格不等式 $x + y  z$ 编码为布尔电路，需将 3 位和 $(c_{2}, s_{1}, s_{0})$ 与用一个前导零扩展的 2 位 $z$（即 $(0, z_{1}, z_{0})$）进行比较。使用一个由布尔门构成的字典序比较器：\n- 最高有效位上的前缀相等：$e_{2} = \\lnot c_{2}$。\n- 在下一位上的首次小于检测：$l_{1} = (e_{2} \\land \\lnot s_{1}) \\land z_{1}$。\n- 将相等性传播到下一位：$e_{1} = e_{2} \\land (s_{1} \\leftrightarrow z_{1})$，其中 $\\leftrightarrow$ 表示逻辑等价（异或的补）。\n- 在最低有效位上的最终小于检测：$l_{0} = (e_{1} \\land \\lnot s_{0}) \\land z_{0}$。\n- 总体严格不等式输出：$\\ell = l_{1} \\lor l_{0}$，并通过断言 $\\ell$ 为真来施加该约束。\n\n使用 Tseitin 变换将整个网络编码为 CNF：为每个门的输出引入一个布尔变量，并通过与其输入的等价关系来断言门的语义。对门的等价关系使用以下最小 CNF 模板，每个模板都写为关于门的输出和输入的子句：\n- 否定：$t \\leftrightarrow \\lnot a$ 使用 2 个子句。\n- 合取：$t \\leftrightarrow (a \\land b)$ 使用 3 个子句。\n- 析取：$t \\leftrightarrow (a \\lor b)$ 使用 3 个子句。\n- 异或：$t \\leftrightarrow (a \\oplus b)$ 使用 4 个子句（每个子句的大小为 3）。\n\n最后，添加一个单位子句断言 $\\ell$ 为真。请严格使用上述的门分解和这些 CNF 模板，确定约束 $x + y  z$ 的编码中的 CNF 子句总数。提供精确的计数作为最终答案。无需四舍五入。", "solution": "用户希望找出编码严格不等式 $x + y  z$ 的合取范式 (CNF) 公式中的子句总数，其中 $x$、$y$ 和 $z$ 是 2 位无符号整数。编码过程遵循应用于该不等式特定布尔电路实现的 Tseitin 变换。\n\n首先，我必须验证问题陈述。\n问题提供了对过程的完整且自洽的描述。\n- **已知条件**：\n    - 变量：$x, y, z$ 为 2 位整数，位向量为 $x = (x_{1}, x_{0})$、$y = (y_{1}, y_{0})$ 和 $z = (z_{1}, z_{0})$。\n    - 加法器电路定义：\n        - $s_{0} = x_{0} \\oplus y_{0}$\n        - $c_{1} = x_{0} \\land y_{0}$\n        - $u = x_{1} \\oplus y_{1}$\n        - $s_{1} = u \\oplus c_{1}$\n        - $d = x_{1} \\land y_{1}$\n        - $w = c_{1} \\land u$\n        - $c_{2} = d \\lor w$\n    - 比较器电路定义，用于 $(c_{2}, s_{1}, s_{0})  (0, z_{1}, z_{0})$：\n        - $e_{2} = \\lnot c_{2}$\n        - $l_{1} = (e_{2} \\land \\lnot s_{1}) \\land z_{1}$\n        - $e_{1} = e_{2} \\land (s_{1} \\leftrightarrow z_{1})$\n        - $l_{0} = (e_{1} \\land \\lnot s_{0}) \\land z_{0}$\n        - $\\ell = l_{1} \\lor l_{0}$\n    - CNF 编码规则 (Tseitin 变换)：\n        - 为每个门的输出引入一个新变量。\n        - 门等价关系的子句计数：\n            - $t \\leftrightarrow \\lnot a$：2 个子句\n            - $t \\leftrightarrow (a \\land b)$：3 个子句\n            - $t \\leftrightarrow (a \\lor b)$：3 个子句\n            - $t \\leftrightarrow (a \\oplus b)$：4 个子句\n    - 最终约束：一个断言 $\\ell$ 为真的单位子句。\n\n- **验证**：\n    - 该问题在理论计算机科学（计算复杂性、逻辑学）领域具有科学依据。\n    - 它的提法是适定的，提供了一个确定性的过程以及所有必要的定义和约束，从而导出一个唯一的数值答案。\n    - 该问题是客观的，并使用了精确、无歧义的语言。\n    - 未发现任何缺陷。该问题有效。\n\n我现在将着手求解，通过系统地计算编码过程中每一步生成的子句。子句总数是加法器电路编码、比较器电路编码和最终断言所产生的子句之和。\n\n**1. 加法器电路编码：$(c_{2}, s_{1}, s_{0}) = x + y$**\n加法器电路由一组指定的门构成。对于每个门，我们为其输出引入一个新变量，并根据提供的模板添加子句来强制执行该门的逻辑功能。\n\n- 用于 $s_{0}$ 的门：$s_{0} = x_{0} \\oplus y_{0}$。这是一个异或 (XOR) 门。\n  $s_{0} \\leftrightarrow (x_{0} \\oplus y_{0})$ 的子句数为 4。\n- 用于 $c_{1}$ 的门：$c_{1} = x_{0} \\land y_{0}$。这是一个合取 (AND) 门。\n  $c_{1} \\leftrightarrow (x_{0} \\land y_{0})$ 的子句数为 3。\n- 用于 $u$ 的门：$u = x_{1} \\oplus y_{1}$。这是一个异或门。\n  $u \\leftrightarrow (x_{1} \\oplus y_{1})$ 的子句数为 4。\n- 用于 $s_{1}$ 的门：$s_{1} = u \\oplus c_{1}$。这是一个异或门。\n  $s_{1} \\leftrightarrow (u \\oplus c_{1})$ 的子句数为 4。\n- 用于 $d$ 的门：$d = x_{1} \\land y_{1}$。这是一个 AND 门。\n  $d \\leftrightarrow (x_{1} \\land y_{1})$ 的子句数为 3。\n- 用于 $w$ 的门：$w = c_{1} \\land u$。这是一个 AND 门。\n  $w \\leftrightarrow (c_{1} \\land u)$ 的子句数为 3。\n- 用于 $c_{2}$ 的门：$c_{2} = d \\lor w$。这是一个析取 (OR) 门。\n  $c_{2} \\leftrightarrow (d \\lor w)$ 的子句数为 3。\n\n加法器电路的子句总数是每个门的子句数之和：\n总子句数 (加法器) = $4 + 3 + 4 + 4 + 3 + 3 + 3 = 24$。\n\n**2. 比较器电路编码：$(c_{2}, s_{1}, s_{0})  (0, z_{1}, z_{0})$**\n比较器电同样由一组逻辑表达式定义。我们必须将这些表达式分解为基本门，并应用 Tseitin 变换。\n\n- 用于 $e_{2}$ 的门：$e_{2} = \\lnot c_{2}$。这是一个否定 (NOT) 门。\n  $e_{2} \\leftrightarrow \\lnot c_{2}$ 的子句数为 2。\n- 用于 $l_{1}$ 的门：表达式为 $l_{1} = (e_{2} \\land \\lnot s_{1}) \\land z_{1}$。这需要分解为一系列基本门。\n  1. 设 $t_{1} = \\lnot s_{1}$。这是一个 NOT 门，增加 2 个子句。\n  2. 设 $t_{2} = e_{2} \\land t_{1}$。这是一个 AND 门，增加 3 个子句。\n  3. 设 $l_{1} = t_{2} \\land z_{1}$。这是一个 AND 门，增加 3 个子句。\n  $l_{1}$ 的总子句数为 $2 + 3 + 3 = 8$。\n- 用于 $e_{1}$ 的门：表达式为 $e_{1} = e_{2} \\land (s_{1} \\leftrightarrow z_{1})$。问题将 $s_{1} \\leftrightarrow z_{1}$ 定义为“异或的补”，即 $\\lnot(s_{1} \\oplus z_{1})$。\n  1. 设 $t_{3} = s_{1} \\oplus z_{1}$。这是一个 XOR 门，增加 4 个子句。\n  2. 设 $t_{4} = \\lnot t_{3}$。这代表等价关系 $(s_{1} \\leftrightarrow z_{1})$。它是一个 NOT 门，增加 2 个子句。\n  3. 设 $e_{1} = e_{2} \\land t_{4}$。这是一个 AND 门，增加 3 个子句。\n  $e_{1}$ 的总子句数为 $4 + 2 + 3 = 9$。\n- 用于 $l_{0}$ 的门：表达式为 $l_{0} = (e_{1} \\land \\lnot s_{0}) \\land z_{0}$。其结构与 $l_{1}$ 相同。\n  1. 设 $t_{5} = \\lnot s_{0}$。这是一个 NOT 门，增加 2 个子句。\n  2. 设 $t_{6} = e_{1} \\land t_{5}$。这是一个 AND 门，增加 3 个子句。\n  3. 设 $l_{0} = t_{6} \\land z_{0}$。这是一个 AND 门，增加 3 个子句。\n  $l_{0}$ 的总子句数为 $2 + 3 + 3 = 8$。\n- 用于 $\\ell$ 的门：最终输出为 $\\ell = l_{1} \\lor l_{0}$。这是一个 OR 门。\n  $\\ell \\leftrightarrow (l_{1} \\lor l_{0})$ 的子句数为 3。\n\n比较器电路的子句总数是每个分解部分的子句数之和：\n总子句数 (比较器) = $2 (\\text{用于 } e_{2}) + 8 (\\text{用于 } l_{1}) + 9 (\\text{用于 } e_{1}) + 8 (\\text{用于 } l_{0}) + 3 (\\text{用于 } \\ell) = 30$。\n\n**3. 最终断言**\n问题要求通过断言最终输出 $\\ell$ 为真来强制执行约束 $x + y  z$。这是通过添加单个单位子句 $(\\ell)$ 来完成的。\n最终断言的子句数 = 1。\n\n**子句总数**\n最终 CNF 公式中的子句总数是所有部分子句数的总和。\n总子句数 = 总数 (加法器) + 总数 (比较器) + 最终断言\n总子句数 = $24 + 30 + 1 = 55$。", "answer": "$$\\boxed{55}$$", "id": "3268195"}]}