{"hands_on_practices": [{"introduction": "此练习将经典的滑雪租赁问题扩展为一个“先租后买”模型。通过分析一个确定性阈值算法，您将练习竞争性分析的基本步骤：为在线算法和最优离线算法定义成本，然后优化算法参数以获得最佳竞争比。这个练习旨在加深您对如何形式化建模和解决在线决策问题的理解 [@problem_id:3257188]。", "problem": "一个由对手控制的用户打算滑雪未知天数 $T \\in \\mathbb{R}_{\\ge 0}$。您面临以下在线决策问题。每天可以租用滑雪板，每日费用为 $c > 0$。也可以一次性花费 $B > 0$ 的成本直接购买滑雪板。这是一个“租购”模式：每天的租赁都会为所有权贡献 $\\alpha c$ 的信用额度，其中 $\\alpha \\in [0,1]$ 是算法已知的一个固定参数。在任何时间 $t \\ge 0$，您可以决定支付剩余款项 $B - \\alpha c t$（如果为正）以立即获得所有权；一旦获得所有权（无论是通过支付剩余款项还是当信用额度达到 $B$ 时），未来的使用都是免费的。如果在时间 $t_{0} = \\frac{B}{\\alpha c}$ 时信用额度达到 $B$，则无需额外支付即可自动获得所有权。\n\n设计并分析一个由时间 $\\tau \\ge 0$ 参数化的确定性阈值在线算法族。该算法族在时间 $\\tau$ 之前一直租用，如果在时间 $\\tau$ 时尚未通过信用累积获得所有权，则支付剩余款项购买。对手在看到您选择的 $\\tau$ 后选择 $T$。使用在线算法的竞争比形式化定义，推导该阈值算法的最坏情况竞争比，使其成为 $\\tau$、$B$、$c$ 和 $\\alpha$ 的函数，然后选择 $\\tau$ 以最小化该最坏情况比率。您的最终答案必须是仅以 $\\alpha$ 的封闭形式函数表示的最优竞争比。不需要四舍五入，最终表达式中不应包含任何物理单位。此外，请简要说明当 $\\alpha = 0$ 时，您的表达式与经典滑雪租赁问题设置的比较情况。", "solution": "用户希望解决一个带有“租购”机制的滑雪租赁问题的修改版本。\n\n### 步骤 1：提取已知条件\n-   总滑雪时长：$T \\in \\mathbb{R}_{\\ge 0}$，由对手选择。\n-   每日租赁费用：$c > 0$。\n-   直接购买成本：$B > 0$。\n-   “租购”信用参数：$\\alpha \\in [0,1]$。每天的租赁为购买价格 $B$ 贡献 $\\alpha c$ 的信用额度。\n-   购买选项：在任何时间 $t \\ge 0$，用户可以支付剩余款项 $B - \\alpha c t$（如果为正）来购买滑雪板。\n-   自动获得所有权：如果在时间 $t_0 = \\frac{B}{\\alpha c}$ 时累积的信用额度 $\\alpha c t$ 达到 $B$，则自动获得所有权。\n-   算法族：由 $\\tau \\ge 0$ 参数化的确定性阈值算法。该算法在时间 $\\tau$ 之前一直租用，如果届时尚未获得所有权，则支付剩余款项购买。\n-   目标：推导该算法的最坏情况竞争比，作为 $\\tau, B, c, \\alpha$ 的函数。然后，找到最小化该比率的最优 $\\tau$，并以 $\\alpha$ 的函数形式给出最终的最优竞争比。\n\n### 步骤 2：使用提取的已知条件进行验证\n该问题在科学上和数学上都是合理的。它是在线算法和竞争性分析领域中一个定义明确的问题。所有术语都有定义，前提条件是自洽且一致的。该问题是客观的，不含任何非形式化或主观因素。\n\n-   **科学依据：** 是。这是一个计算机科学领域的理论问题。\n-   **良态问题：** 是。目标明确，设置允许唯一解的存在。\n-   **客观性：** 是。语言精确且数学化。\n-   **完整性：** 是。所有必要参数（$B, c, \\alpha, \\tau, T$）均已定义。\n-   **一致性：** 是。没有内部矛盾。\n\n### 步骤 3：结论与行动\n该问题是**有效的**。开始求解。\n\n### 形式化分析\n\n设 $C_{\\text{ALG}}(T, \\tau)$ 为参数为 $\\tau$ 的在线算法在总滑雪时长为 $T$ 时的成本。设 $C_{\\text{OPT}}(T)$ 为时长为 $T$ 的最优离线算法的成本。\n\n**最优离线算法成本 ($C_{\\text{OPT}}$)**\n最优离线算法预先知道 $T$。它有两个主要策略：\n1.  在时间 $t=0$ 以成本 $B$ 购买滑雪板。\n2.  在整个时长 $T$ 内租用滑雪板。成本为 $cT$。\n\n最优策略是选择这两种成本中的较小者。“租购”特性不改变最优决策框架。如果最优选择是购买，那么总是在 $t=0$ 时购买最好，因为将购买延迟到时间 $t > 0$ 会导致成本为 $ct + (B - \\alpha c t) = B + ct(1-\\alpha)$，当 $t>0$ 且 $\\alpha  1$ 时，该成本大于 $B$。如果 $\\alpha=1$，成本为 $B$，因此在 $t=0$ 时购买仍然是最优的。在 $t_0 = \\frac{B}{\\alpha c}$ 时自动获得所有权仅在连续租用的情况下发生。对于最优算法，仅当 $cT  B$ 时才倾向于租用，即 $T  B/c$。由于对于 $\\alpha \\in [0,1]$，有 $B/c \\le B/(\\alpha c) = t_0$，因此 $T  t_0$，所以自动获得所有权不是最优算法决策中的一个因素。\n因此，最优成本为：\n$$ C_{\\text{OPT}}(T) = \\min(cT, B) $$\n\n**在线算法成本 ($C_{\\text{ALG}}$)**\n在线算法在时间 $\\tau$ 之前一直租用，如果尚未自动获得所有权，则在此时购买。设 $t_0 = \\frac{B}{\\alpha c}$ 为自动获得所有权的时间。\n\n成本取决于总滑雪时间 $T$ 和算法阈值 $\\tau$ 之间的关系。\n1.  如果 $T  \\tau$：算法的决策点 $\\tau$ 未达到。算法只在时长 $T$ 内租用。然而，如果 $T$ 足够大以触发自动所有权（$T \\ge t_0$），成本上限为截至 $t_0$ 所支付的总租金，即 $c t_0 = c \\frac{B}{\\alpha c} = \\frac{B}{\\alpha}$。所以，对于 $T  \\tau$，成本为 $C_{\\text{ALG}}(T, \\tau) = \\min(cT, \\frac{B}{\\alpha})$。\n\n2.  如果 $T \\ge \\tau$：算法达到其决策点 $\\tau$。\n    -   如果 $\\tau  t_0$：尚未发生自动所有权。算法已支付了 $c\\tau$ 的租金，现在支付剩余款项 $B - \\alpha c \\tau$。总成本为 $c\\tau + (B - \\alpha c \\tau) = B + c\\tau(1-\\alpha)$。\n    -   如果 $\\tau \\ge t_0$：在时间 $t_0$ 已自动获得所有权。算法只支付了截至 $t_0$ 的租金。总成本为 $c t_0 = \\frac{B}{\\alpha}$。\n    综合这些情况，对于 $T \\ge \\tau$，成本是恒定的：$C_{\\text{ALG}}(T, \\tau) = \\min(B + c\\tau(1-\\alpha), \\frac{B}{\\alpha})$。\n\n**竞争比 $\\mathcal{R}(\\tau)$**\n竞争比是对手所有可能的 $T$ 选择下成本比率的上确界：\n$$ \\mathcal{R}(\\tau) = \\sup_{T \\ge 0} \\frac{C_{\\text{ALG}}(T, \\tau)}{C_{\\text{OPT}}(T)} $$\n我们可以根据 $T$ 将分析分为两部分：\n$$ \\mathcal{R}(\\tau) = \\max \\left( \\sup_{0 \\le T  \\tau} \\frac{C_{\\text{ALG}}(T, \\tau)}{C_{\\text{OPT}}(T)}, \\sup_{T \\ge \\tau} \\frac{C_{\\text{ALG}}(T, \\tau)}{C_{\\text{OPT}}(T)} \\right) $$\n\n我们来分析这两个部分。设 $t_B = B/c$。\n**第 1 部分：$\\sup_{0 \\le T  \\tau} \\frac{\\min(cT, B/\\alpha)}{\\min(cT, B)}$**\n-   如果 $\\tau \\le t_B$，则对于任何 $T  \\tau$，我们有 $T  t_B$，所以 $cT  B$。比率为 $\\frac{cT}{cT} = 1$。上确界为 $1$。\n-   如果 $t_B  \\tau \\le t_0$，对手可以在范围 $[t_B, \\tau)$ 内选择 $T$。对于这样的 $T$，$cT \\ge B$。比率为 $\\frac{\\min(cT, B/\\alpha)}{B}$。由于 $T \\le t_0 = B/(\\alpha c)$，$cT \\le B/\\alpha$，所以比率为 $\\frac{cT}{B}$。当 $T \\to \\tau^{-}$ 时，该比率最大化，得到的上确界为 $\\frac{c\\tau}{B}$。\n-   如果 $\\tau > t_0$，对手可以在 $[t_0, \\tau)$ 内选择 $T$。对于这样的 $T$，$C_{\\text{ALG}} = B/\\alpha$ 且 $C_{\\text{OPT}}=B$。比率为 $\\frac{B/\\alpha}{B} = \\frac{1}{\\alpha}$。对于 $T \\in [t_B, t_0)$，比率为 $cT/B$，在 $T \\to t_0^-$ 时最大化，得到 $ct_0/B = (B/\\alpha)/B = 1/\\alpha$。所以上确界是 $1/\\alpha$。\n\n**第 2 部分：$\\sup_{T \\ge \\tau} \\frac{\\min(B + c\\tau(1-\\alpha), B/\\alpha)}{\\min(cT, B)}$**\n分子相对于 $T$ 是一个常数。为了使比率最大化，对手必须最小化分母 $C_{\\text{OPT}}(T) = \\min(cT, B)$，其中 $T \\ge \\tau$。最小值在 $T=\\tau$ 时达到，此时 $C_{\\text{OPT}}(\\tau) = \\min(c\\tau, B)$。\n因此，上确界为 $\\frac{\\min(B + c\\tau(1-\\alpha), B/\\alpha)}{\\min(c\\tau, B)}$。\n\n**综合并寻找最优 $\\tau$**\n我们将竞争比 $\\mathcal{R}$ 用归一化阈值 $x = \\frac{c\\tau}{B}$ 来表示，因此 $\\tau = \\frac{xB}{c}$。关键点是 $x=1$（对应于 $\\tau=t_B$）和 $x=1/\\alpha$（对应于 $\\tau=t_0$）。我们分析 $\\mathcal{R}(x)$。\n\n-   **情况 1：$0  x \\le 1$（即 $0  \\tau \\le t_B$）**\n    $\\sup_{T\\tau}$ 为 $1$。\n    $\\sup_{T\\ge\\tau}$ 为 $\\frac{B+c\\tau(1-\\alpha)}{c\\tau} = \\frac{B}{c\\tau} + 1-\\alpha = \\frac{1}{x} + 1-\\alpha$。\n    由于 $x \\le 1$, $1/x \\ge 1$。由于 $\\alpha \\le 1$, $1-\\alpha \\ge 0$。所以 $\\frac{1}{x} + 1-\\alpha \\ge 1$。\n    $\\mathcal{R}(x) = \\frac{1}{x} + 1-\\alpha$。这个函数在 $x$ 上是递减的。它在此区间内的最小值在 $x=1$ 时取得，得到 $\\mathcal{R}(1) = 1 + 1 - \\alpha = 2-\\alpha$。\n\n-   **情况 2：$1  x \\le 1/\\alpha$（即 $t_B  \\tau \\le t_0$）**\n    $\\sup_{T\\tau}$ 为 $\\frac{c\\tau}{B} = x$。\n    $\\sup_{T\\ge\\tau}$ 为 $\\frac{B+c\\tau(1-\\alpha)}{B} = 1 + \\frac{c\\tau}{B}(1-\\alpha) = 1 + x(1-\\alpha)$。\n    $\\mathcal{R}(x) = \\max(x, 1+x(1-\\alpha))$。\n    我们比较 $x$ 和 $1+x(1-\\alpha) = 1+x-\\alpha x$。不等式 $x \\le 1+x-\\alpha x$ 简化为 $0 \\le 1-\\alpha x$，或 $\\alpha x \\le 1$，这是成立的，因为 $x \\le 1/\\alpha$。\n    因此，$\\mathcal{R}(x) = 1+x(1-\\alpha)$。这是一个关于 $x$ 的增函数（对于 $\\alpha1$）。它在这个区间上的最小值在 $x \\to 1^{+}$ 时逼近，即 $1+(1-\\alpha) = 2-\\alpha$。\n\n-   **情况 3：$x > 1/\\alpha$（即 $\\tau > t_0$）**\n    $\\sup_{T\\tau}$ 为 $1/\\alpha$。\n    $\\sup_{T\\ge\\tau}$ 为 $\\frac{B/\\alpha}{B} = \\frac{1}{\\alpha}$。\n    $\\mathcal{R}(x) = \\max(1/\\alpha, 1/\\alpha) = \\frac{1}{\\alpha}$。\n\n**关于最优比率的结论**\n函数 $\\mathcal{R}(x)$ 在 $x \\in (0,1]$ 上递减，在 $x \\in (1, 1/\\alpha]$ 上递增，在 $x > 1/\\alpha$ 时为常数 $1/\\alpha$。\n$\\mathcal{R}(x)$ 的最小值在 $x=1$ 时取得，这对应于设置阈值 $\\tau = \\tau_{\\text{opt}} = B/c$。\n最小的最坏情况竞争比是此最小值点的值：\n$$ \\mathcal{R}_{\\text{opt}} = \\mathcal{R}(\\tau_{\\text{opt}}) = \\mathcal{R}(x=1) = 2-\\alpha $$\n\n**与经典滑雪租赁问题（$\\alpha=0$）的比较**\n在经典的滑雪租赁问题中，没有“租购”信用，这对应于 $\\alpha=0$。将 $\\alpha=0$ 代入我们推导出的最优竞争比，得到 $2-0=2$。这与经典问题最优确定性算法的著名的2-竞争性相匹配。策略 $\\tau=B/c$（一直租用到总租金等于购买价格，然后购买）也是经典设置中的最优确定性策略。我们的结果正确地推广了经典问题。此外，如果 $\\alpha=1$，每一美元的租金都会计入信用。比率变为 $2-1=1$，表明这是一个完美的算法。这是合乎逻辑的，因为先租后买没有任何惩罚；获得滑雪板的总支出始终以 $B$ 为上限。", "answer": "$$\\boxed{2-\\alpha}$$", "id": "3257188"}, {"introduction": "在滑雪租赁问题的框架基础上，此题引入了两个关键概念：转售能力和随机化的力量。您将确定任何随机算法所能达到的最佳竞争比，这是在线算法领域的一个经典结果。这个练习展示了在算法策略中引入概率如何能显著提高其对抗“无知”对手（oblivious adversary）的性能保证 [@problem_id:3257106]。", "problem": "考虑以下在线决策问题，它是经典滑雪租赁模型的扩展。时间是连续的，并以非负实数度量。存在一种资源，可以以每单位时间 $r \\gt 0$ 的速率租用，或者以一次性成本 $B \\gt 0$ 购买。如果在任何时间购买了该资源，并且之后停止使用，购买者可以将其转售，并收回购买价格的一个固定比例 $\\alpha \\in [0,1)$，这与拥有该资源的时间长短无关。因此，如果一个人购买并最终停止使用，净购买成本为 $(1-\\alpha)B$。使用期限 $T \\in [0,\\infty)$ 由一个无所知的对手选择，在线算法事先不知道。\n\n一个在线算法根据无未来信息，（可能随机地）指定一个购买时间 $\\tau \\in [0,\\infty]$。如果 $T \\le \\tau$，算法在整个期间内租用，产生 $rT$ 的成本。如果 $T \\gt \\tau$，算法租用到时间 $\\tau$，然后购买并在之后转售，产生的总成本为 $r \\tau + (1-\\alpha)B$。设 $\\text{ALG}(T)$ 表示算法在使用期限 $T$ 上的（可能随机的）成本，设 $\\text{OPT}(T)$ 表示在完全了解 $T$ 的情况下的离线最优成本。一个随机化在线算法的竞争比定义为 $\\sup_{T \\ge 0} \\mathbb{E}[\\text{ALG}(T)]/\\text{OPT}(T)$，其中上确界是针对所有 $T \\in [0,\\infty)$，期望是关于算法内部的随机性。\n\n从在线算法和竞争性分析的核心定义出发，并且不假设任何目标公式，确定任何随机化在线算法对该问题可达成的最佳竞争比。将您的最终答案表示为一个仅含通用常数的封闭形式解析表达式。不需要也不允许进行数值四舍五入。您的最终答案必须是单个表达式。", "solution": "用户希望我解决一个在线算法和竞争性分析领域的问题。\n\n### 步骤1：提取已知条件\n- 时间是连续且非负的：$t \\in [0, \\infty)$。\n- 租用速率：$r > 0$。\n- 购买成本：$B > 0$。\n- 转售回收比例：$\\alpha \\in [0, 1)$。\n- 净购买成本：$(1-\\alpha)B$。\n- 使用期限（在线算法未知）：$T \\in [0, \\infty)$。\n- 一个在线算法指定一个购买时间 $\\tau \\in [0, \\infty]$。\n- 算法成本，$\\text{ALG}(T)$：\n  - 如果 $T \\le \\tau$，$\\text{ALG}(T) = rT$。\n  - 如果 $T > \\tau$，$\\text{ALG}(T) = r\\tau + (1-\\alpha)B$。\n- 已知 $T$ 的离线最优成本：$\\text{OPT}(T)$。\n- 一个随机化在线算法的竞争比是 $c = \\sup_{T \\ge 0} \\frac{\\mathbb{E}[\\text{ALG}(T)]}{\\text{OPT}(T)}$。\n- 目标是找到所有随机化在线算法中可能的最小竞争比。\n\n### 步骤2：使用提取的已知条件进行验证\n该问题是理论计算机科学领域，特别是在线算法领域中一个定义明确的数学问题。它是经典滑雪租赁问题的一个推广。所有术语都有正式定义，参数及其有效范围都已指定，目标明确。问题是自洽的，在其领域内有科学依据，没有矛盾或歧义。它没有违反任何指定的无效标准。\n\n### 步骤3：结论和行动\n问题有效。将提供完整解答。\n\n### 解答推导\n\n首先，我们确定最优离线算法的成本 $\\text{OPT}(T)$，该算法预先知道总使用期限 $T$。离线算法有两个选择：在整个期间租用，总成本为 $rT$；或者在时间 $0$ 立即购买资源，并在时间 $T$ 转售，净成本为 $(1-\\alpha)B$。最优策略是选择更便宜的选项。\n$$ \\text{OPT}(T) = \\min(rT, (1-\\alpha)B) $$\n这两种成本在一个盈亏平衡时间 $T_0$ 相等，定义为 $rT_0 = (1-\\alpha)B$。因此，$T_0 = \\frac{(1-\\alpha)B}{r}$。最优离线成本可以表示为：\n$$ \\text{OPT}(T) = \\begin{cases} rT  \\text{if } 0 \\le T \\le T_0 \\\\ (1-\\alpha)B = rT_0  \\text{if } T > T_0 \\end{cases} $$\n\n接下来，我们考虑一个随机化在线算法。这样的算法由购买时间 $\\tau$ 的概率分布来表征。设 $F(t) = P(\\tau \\le t)$ 是购买时间 $\\tau$ 的累积分布函数（CDF）。我们假设 $F(0) = 0$（在时间 $0$ 购买的概率不为有限值）并且 $F$ 是连续的。对于给定的使用期限 $T$，算法的期望成本，记为 $\\mathbb{E}[\\text{ALG}(T)]$，是：\n$$ \\mathbb{E}[\\text{ALG}(T)] = \\int_0^\\infty \\text{cost}(\\tau, T) dF(\\tau) $$\n其中 $\\text{cost}(\\tau, T)$ 是确定性购买时间 $\\tau$ 的成本。我们可以根据 $\\tau  T$ 或 $\\tau \\ge T$ 来拆分积分：\n$$ \\mathbb{E}[\\text{ALG}(T)] = \\int_0^T (r\\tau + (1-\\alpha)B) dF(\\tau) + \\int_T^\\infty rT dF(\\tau) $$\n使用 $1 - F(T) = \\int_T^\\infty dF(\\tau)$，这变为：\n$$ \\mathbb{E}[\\text{ALG}(T)] = rT(1 - F(T)) + \\int_0^T (r\\tau + rT_0) dF(\\tau) $$\n$$ \\mathbb{E}[\\text{ALG}(T)] = rT(1 - F(T)) + r\\int_0^T \\tau dF(\\tau) + rT_0 F(T) $$\n\n竞争比是 $c = \\sup_{T \\ge 0} \\frac{\\mathbb{E}[\\text{ALG}(T)]}{\\text{OPT}(T)}$。我们寻求最小化这个上确界的算法（即CDF $F$）。对于最优随机化算法，对于所有“困难”输入 $T$，其竞争比预计是一个常数 $c$。我们假设困难输入的集合是 $T \\in [0, \\infty)$ 并设置等式：\n$$ \\mathbb{E}[\\text{ALG}(T)] = c \\cdot \\text{OPT}(T) \\quad \\forall T \\ge 0 $$\n这根据 $\\text{OPT}(T)$ 的定义给出了两个不同的方程。\n\n情况1：$0 \\le T \\le T_0$。\n这里，$\\text{OPT}(T) = rT$。条件变为：\n$$ rT(1 - F(T)) + r\\int_0^T \\tau dF(\\tau) + rT_0 F(T) = c \\cdot rT $$\n两边除以 $r$ 并对 $T$ 求导（假设 $F$ 有密度函数 $f=F'$）得到：\n$$ (1-F(T)) - TF'(T) + TF'(T) + T_0F'(T) = c $$\n$$ T_0 F'(T) + 1 - F(T) = c $$\n这是一个关于 $F(T)$ 的一阶线性常微分方程。其解的形式为 $F(T) = K\\exp(T/T_0) + (1-c)$，其中 $K$ 是某个常数。使用边界条件 $F(0)=0$，我们得到 $0 = K + (1-c)$，所以 $K=c-1$。因此，对于 $T \\in [0, T_0]$：\n$$ F(T) = (c-1)(\\exp(T/T_0) - 1) $$\n为了使 $F(T)$ 成为一个有效的CDF，必须有 $F'(T) \\ge 0$。由于 $F'(T) = \\frac{c-1}{T_0}\\exp(T/T_0)$，这要求 $c \\ge 1$。\n\n情况2：$T > T_0$。\n这里，$\\text{OPT}(T) = rT_0$。条件变为：\n$$ rT(1 - F(T)) + r\\int_0^T \\tau dF(\\tau) + rT_0 F(T) = c \\cdot rT_0 $$\n对 $T$ 求导：\n$$ (1-F(T)) - TF'(T) + TF'(T) + T_0F'(T) = 0 $$\n$$ T_0 F'(T) + 1 - F(T) = 0 $$\n这个常微分方程的解形式为 $F(T) = 1 - C\\exp(-T/T_0)$，其中 $C$ 是某个常数。为了使 $F(T)$ 成为一个有效的CDF，必须有 $\\lim_{T \\to \\infty} F(T) = 1$，这个函数形式满足此条件。\n\n如果租金变得任意昂贵，在线算法不应无限期推迟购买。具体来说，在时间 $\\tau > T_0$ 购买是次优的。对手可以选择 $T=\\tau$，此时 $\\text{ALG}(T)=r\\tau$，而 $\\text{OPT}(T)=rT_0$。比率将是 $\\tau/T_0 > 1$。如果对手选择 $T=\\tau+\\epsilon$ (对于某个小的 $\\epsilon>0$)，成本是 $r\\tau + rT_0$，比率是 $(r\\tau+rT_0)/(rT_0) = 1+\\tau/T_0$。一个可能在 $\\tau > T_0$ 购买的算法面临比保证在 $T_0$ 之前购买的算法更差的竞争比。这表明最优随机化策略对 $\\tau$ 的支撑集包含在 $[0, T_0]$ 内。\n因此，我们假设对于所有 $T \\ge T_0$，$F(T)=1$。\n这通过在情况1中 $F(T)$ 的表达式中设置 $T=T_0$ 提供了一个关键条件：\n$$ F(T_0) = 1 $$\n$$ (c-1)(\\exp(T_0/T_0) - 1) = 1 $$\n$$ (c-1)(e - 1) = 1 $$\n求解 $c$，我们找到最优竞争比：\n$$ c-1 = \\frac{1}{e-1} \\implies c = 1 + \\frac{1}{e-1} = \\frac{e-1+1}{e-1} = \\frac{e}{e-1} $$\n\n相应的最优随机化策略是从区间 $[0, T_0]$ 中选择购买时间 $\\tau$，其CDF为：\n$$ F(\\tau) = \\frac{\\exp(\\tau/T_0) - 1}{e - 1} \\quad \\text{for } \\tau \\in [0, T_0] $$\n我们必须验证该策略对所有 $T \\ge 0$ 都达到了竞争比 $c = e/(e-1)$。我们已经通过构造为 $T \\in [0, T_0]$ 建立了这一点。对于 $T > T_0$，算法总是在某个 $\\tau \\in [0, T_0]$ 购买，所以成本总是 $r\\tau + (1-\\alpha)B = r\\tau + rT_0$。期望成本是：\n$$ \\mathbb{E}[\\text{ALG}(T)] = \\mathbb{E}[r\\tau + rT_0] = r\\mathbb{E}[\\tau] + rT_0 $$\n$\\tau$ 的期望值是：\n$$ \\mathbb{E}[\\tau] = \\int_0^{T_0} \\tau F'(\\tau) d\\tau = \\int_0^{T_0} \\tau \\frac{\\exp(\\tau/T_0)}{T_0(e-1)} d\\tau $$\n使用分部积分法，并进行代换 $u=\\tau/T_0$ 和 $d\\tau = T_0 du$：\n$$ \\mathbb{E}[\\tau] = \\frac{T_0}{e-1} \\int_0^1 u \\exp(u) du = \\frac{T_0}{e-1} [u\\exp(u) - \\exp(u)]_0^1 $$\n$$ \\mathbb{E}[\\tau] = \\frac{T_0}{e-1} [(1\\cdot e^1 - e^1) - (0 \\cdot e^0 - e^0)] = \\frac{T_0}{e-1} [0 - (-1)] = \\frac{T_0}{e-1} $$\n将此代回 $T > T_0$ 的期望成本中：\n$$ \\mathbb{E}[\\text{ALG}(T)] = r \\frac{T_0}{e-1} + rT_0 = rT_0 \\left(\\frac{1}{e-1} + 1\\right) = rT_0 \\frac{e}{e-1} $$\n对于 $T > T_0$ 的竞争比是：\n$$ \\frac{\\mathbb{E}[\\text{ALG}(T)]}{\\text{OPT}(T)} = \\frac{rT_0 \\frac{e}{e-1}}{rT_0} = \\frac{e}{e-1} $$\n对于所有 $T \\ge 0$，竞争比是常数且等于 $e/(e-1)$。根据构造，这是任何随机化算法对抗无所知的对手时可能达到的最低竞争比。参数 $r$、$B$ 和 $\\alpha$ 被封装在盈亏平衡时间 $T_0$ 内，但它们不出现在竞争比的最终表达式中，该表达式仅取决于通用常数 $e$。这个结果是滑雪租赁系列问题中的一个著名发现。", "answer": "$$\\boxed{\\frac{e}{e-1}}$$", "id": "3257106"}, {"introduction": "此练习将我们的焦点从“租或买”的决策问题转移到数据结构管理领域，即列表更新问题。您将分析著名的“移至前端”（Move-To-Front, MTF）算法在一个特定最坏情况序列上的性能，其中移动一个项目会产生相应成本。这个练习阐释了竞争性分析的原则如何应用于评估在线数据管理策略，并提供了一个在非平凡场景下计算成本和最终比率的具体示例 [@problem_id:3257171]。", "problem": "考虑一个在线列表更新问题，该问题涉及一个包含$n$个标记为$1,2,\\dots,n$的不同项目的单向链表，初始排列顺序为$(1,2,\\dots,n)$。访问当前位于位置$i$的项目会产生$i$的访问成本。访问一个项目后，算法可以立即将被访问的项目向前移动$k$个位置（其中$0 \\leq k \\leq i-1$）；这次前移是付费的，成本为$\\alpha \\, i \\, k$，其中$\\alpha  0$是一个固定参数，$i$是操作开始时被访问项目的位置。不允许其他任何付费交换。离线最优算法（Optimal offline algorithm (OPT)）预先知道整个请求序列，并且可以在每次访问后，在遵循相同成本规则的前提下，选择对被访问项目进行任何前移操作。在线算法在决定移动多少时，并不知道未来的请求。\n\n重点关注移至最前算法（Move-To-Front (MTF)），记为$\\mathrm{MTF}_{\\alpha}$。该算法在每次访问后，将被访问的项目移动到列表的最前端（即向前移动$k=i-1$个位置），并支付相应的移动成本。\n\n现在考虑以下长度为$n$的固定请求序列：按严格降序的标签顺序$(n, n-1, \\dots, 1)$访问项目，每个项目恰好访问一次。从初始列表$(1,2,\\dots,n)$开始，计算针对此特定序列的$\\mathrm{MTF}_{\\alpha}$相对于$\\mathrm{OPT}$的竞争比的闭式解，该竞争比定义为：\n$$\\mathrm{CR}(n,\\alpha) = \\frac{\\text{序列上}\\mathrm{MTF}_{\\alpha}\\text{产生的总成本}}{\\text{序列上}\\mathrm{OPT}\\text{产生的总成本}}。$$\n您的最终答案必须是关于$n$和$\\alpha$的单一解析表达式。请勿四舍五入。", "solution": "该问题要求计算在一个包含$n$个项目的列表上，针对一个特定请求序列的竞争比$\\mathrm{CR}(n,\\alpha)$。该比率定义为移至最前算法($\\mathrm{MTF}_{\\alpha}$)产生的总成本除以离线最优算法($\\mathrm{OPT}$)产生的总成本。总成本是访问成本和移动成本之和。\n\n首先，我们计算$\\mathrm{MTF}_{\\alpha}$算法的总成本，记为$C_{\\mathrm{MTF}}$。\n初始列表为$L_0 = (1, 2, \\dots, n)$。请求序列为$\\sigma = (n, n-1, \\dots, 1)$。\n\n让我们逐步分析$\\mathrm{MTF}_{\\alpha}$的过程。\n在任何步骤$j \\in \\{1, 2, \\dots, n\\}$，被请求的项目是$m_j = n-j+1$。\n\n步骤1：请求项目$n$。\n初始列表为$(1, 2, \\dots, n)$。项目$n$位于位置$i_1 = n$。\n访问成本为$i_1 = n$。\n$\\mathrm{MTF}_{\\alpha}$将被访问的项目移动到列表的前端。这相当于向前移动$k_1 = i_1 - 1 = n-1$个位置。\n移动成本为$\\alpha \\, i_1 \\, k_1 = \\alpha \\cdot n \\cdot (n-1)$。\n此步骤的总成本为$C_1 = n + \\alpha n(n-1)$。\n新列表变为$(n, 1, 2, \\dots, n-1)$。\n\n步骤2：请求项目$n-1$。\n当前列表为$(n, 1, 2, \\dots, n-1)$。项目$n-1$是列表中的最后一个元素，因此其位置为$i_2 = n$。\n访问成本为$i_2 = n$。\n$\\mathrm{MTF}_{\\alpha}$将该项目移动到前端，即向前移动$k_2 = i_2 - 1 = n-1$个位置。\n移动成本为$\\alpha \\, i_2 \\, k_2 = \\alpha \\cdot n \\cdot (n-1)$。\n此步骤的总成本为$C_2 = n + \\alpha n(n-1)$。\n新列表变为$(n-1, n, 1, 2, \\dots, n-2)$。\n\n我们观察到一个模式。在步骤$j$（对于$j \\in \\{1, \\dots, n\\}$）开始时，已经被请求过的项目是$\\{n, n-1, \\dots, n-j+2\\}$。这$j-1$个项目已经被移动到列表的前端。尚未被请求的项目是$\\{1, 2, \\dots, n-j+1\\}$。它们的相对顺序与初始列表保持一致。因此，它们在列表的末尾形成一个连续的块。待请求的项目$m_j = n-j+1$是这些未请求项目中最大的，因此出现在列表的最后。\n项目$n-j+1$在访问前的位置总是$i_j = n$。\n步骤$j$的访问成本是$i_j = n$。\n移动总是到最前端，所以项目向前移动$k_j = i_j - 1 = n-1$个位置。\n步骤$j$的移动成本是$\\alpha \\, i_j \\, k_j = \\alpha \\cdot n \\cdot (n-1)$。\n对于所有的$j$，步骤$j$的总成本是恒定的：$C_j = n + \\alpha n(n-1)$。\n\n$\\mathrm{MTF}_{\\alpha}$的总成本是$n$次请求的成本之和：\n$$ C_{\\mathrm{MTF}} = \\sum_{j=1}^{n} \\left( n + \\alpha n(n-1) \\right) $$\n由于求和项与$j$无关，我们有：\n$$ C_{\\mathrm{MTF}} = n \\cdot \\left( n + \\alpha n(n-1) \\right) = n^2 \\left( 1 + \\alpha(n-1) \\right) $$\n\n接下来，我们计算离线最优算法$\\mathrm{OPT}$的总成本，记为$C_{\\mathrm{OPT}}$。\n$\\mathrm{OPT}$算法预先知道整个请求序列$\\sigma = (n, n-1, \\dots, 1)$。这个序列的一个关键特征是每个项目都只被请求一次。\n\n在任何步骤中，当访问一个位置为$i$的项目时，算法会产生$i$的成本，并可以选择以$\\alpha i k$的额外成本将该项目向前移动$k$个位置（$0 \\le k \\le i-1$）。这种移动会改变后续请求的列表配置。支付移动成本的目的是为了减少被移动项目未来的访问成本。\n\n在给定的序列中，一旦一个项目被访问，它就再也不会被请求。因此，将被访问的项目移动到更有利的位置不会带来未来的收益。由于$\\alpha > 0$，$i \\ge 1$和$k \\ge 0$，移动成本$\\alpha i k$总是非负的。为了最小化总成本，$\\mathrm{OPT}$必须避免任何会产生没有相应未来收益的成本的行动。因此，对于每次访问，$\\mathrm{OPT}$会选择$k=0$，使移动成本为零。\n这意味着对于这个特定序列，最优策略是永远不改变列表。这等同于静态算法（Static algorithm）。\n\n在整个操作序列中，$\\mathrm{OPT}$的列表配置保持为初始列表$L = (1, 2, \\dots, n)$不变。\n$\\mathrm{OPT}$的总成本是访问成本之和。\n\n步骤1：请求项目$n$。位置是$n$。成本是$n$。\n步骤2：请求项目$n-1$。位置是$n-1$。成本是$n-1$。\n...\n步骤$j$：请求项目$n-j+1$。位置是$n-j+1$。成本是$n-j+1$。\n...\n步骤$n$：请求项目$1$。位置是$1$。成本是$1$。\n\n$\\mathrm{OPT}$的总成本是这些访问成本的总和：\n$$ C_{\\mathrm{OPT}} = n + (n-1) + \\dots + 2 + 1 = \\sum_{j=1}^{n} j $$\n这是前$n$个正整数的和，其闭式解是众所周知的：\n$$ C_{\\mathrm{OPT}} = \\frac{n(n+1)}{2} $$\n\n最后，我们计算竞争比$\\mathrm{CR}(n,\\alpha)$，即$C_{\\mathrm{MTF}}$与$C_{\\mathrm{OPT}}$的比值。\n$$ \\mathrm{CR}(n,\\alpha) = \\frac{C_{\\mathrm{MTF}}}{C_{\\mathrm{OPT}}} = \\frac{n^2 \\left( 1 + \\alpha(n-1) \\right)}{\\frac{n(n+1)}{2}} $$\n对于$n \\ge 1$，我们可以简化这个表达式：\n$$ \\mathrm{CR}(n,\\alpha) = \\frac{2n^2 \\left( 1 + \\alpha(n-1) \\right)}{n(n+1)} = \\frac{2n \\left( 1 + \\alpha(n-1) \\right)}{n+1} $$\n这就是给定序列的竞争比的闭式表达式。\n该表达式也可以写成$\\frac{2n + 2\\alpha n(n-1)}{n+1}$。\n我们将使用因式分解的形式。", "answer": "$$ \\boxed{\\frac{2n(1 + \\alpha(n-1))}{n+1}} $$", "id": "3257171"}]}