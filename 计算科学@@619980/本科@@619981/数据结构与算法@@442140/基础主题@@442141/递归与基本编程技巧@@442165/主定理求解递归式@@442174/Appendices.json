{"hands_on_practices": [{"introduction": "主定理的威力在于它能够根据分治成本 $f(n)$ 和子问题增长率 $n^{\\log_b a}$ 之间的“力量”对比，来确定算法的复杂度。本练习通过直接比较两个结构相似但分治成本有细微差异的递归关系 [@problem_id:3248627]，旨在帮助你建立对这种对比的直观理解。通过观察 $f(n)$ 的指数跨越临界值 $n^{\\log_b a}$ 时复杂度的变化，你可以清晰地看到主定理不同情况之间的“阈值效应”。", "problem": "给你两个分治递归关系式，它们对所有足够大的 $n$ 都成立（假设 $n$ 是 $2$ 的幂，以避免出现向下取整和向上取整函数），其基本情况为常数时间 $T_1(1)=\\Theta(1)$ 和 $T_2(1)=\\Theta(1)$：\n$$\nT_1(n)=4\\,T_1(n/2)+n^{1.9}, \\qquad T_2(n)=4\\,T_2(n/2)+n^{2.1}.\n$$\n仅使用关于分治递归和渐近符号的基本定义，确定哪个陈述最能描述 $T_1(n)$ 和 $T_2(n)$ 的渐近增长。回顾一下，大西塔 ($\\Theta(\\cdot)$) 符号表示紧密的渐近界，而 $\\log$ 表示以任何大于 $1$ 的固定底数的对数。\n\n选择唯一的最佳选项。\n\nA. $T_1(n)=\\Theta(n^{2})$ 且 $T_2(n)=\\Theta(n^{2.1})$，因此 $T_2(n)$ 渐近地支配 $T_1(n)$。\n\nB. $T_1(n)=\\Theta(n^{2}\\log n)$ 且 $T_2(n)=\\Theta(n^{2.1})$，因此 $T_2(n)$ 渐近地支配 $T_1(n)$。\n\nC. $T_1(n)=\\Theta(n^{2})$ 且 $T_2(n)=\\Theta(n^{2}\\log n)$，因此 $T_2(n)$ 仅以一个对数因子支配 $T_1(n)$。\n\nD. $T_1(n)=\\Theta(n^{1.9})$ 且 $T_2(n)=\\Theta(n^{2.1})$，所以在这两个递归中，非递归项决定了增长。\n\nE. $T_1(n)$ 和 $T_2(n)$ 都是 $\\Theta(n^{2})$。", "solution": "用户提供了一个问题，要求对两个分治递归关系式进行渐近分析。\n\n### 第 1 步：问题验证\n\n首先，我将提取已知条件并验证问题陈述。\n\n**已知条件：**\n1.  $T_1(n)$ 的递归关系式：$T_1(n)=4\\,T_1(n/2)+n^{1.9}$，对足够大的 $n$ 成立。\n2.  $T_2(n)$ 的递归关系式：$T_2(n)=4\\,T_2(n/2)+n^{2.1}$，对足够大的 $n$ 成立。\n3.  $n$ 的约束条件：$n$ 是 $2$ 的幂。\n4.  基本情况：$T_1(1)=\\Theta(1)$ 和 $T_2(1)=\\Theta(1)$。\n5.  定义：$\\Theta(\\cdot)$ 表示紧密的渐近界，$\\log$ 表示以任何大于 $1$ 的固定底数的对数。\n6.  任务是确定最能描述 $T_1(n)$ 和 $T_2(n)$ 渐近增长的陈述。\n\n**验证：**\n该问题定义明确，在算法分析领域具有科学依据。这些递归关系式是标准形式 $T(n) = aT(n/b) + f(n)$，对此存在一种系统化的解法，即主定理。所提供的信息（递归关系式、基本情况、对 $n$ 的约束）是完整、一致且充分的，足以推导出渐近界的唯一解。语言客观且精确。该问题没有违反数学或计算机科学的任何原则。因此，问题陈述是有效的。\n\n### 第 2 步：推导渐近界\n\n所提供的递归关系式形式为 $T(n) = aT(n/b) + f(n)$。这类递归关系式的渐近行为可以使用主定理来确定。该定理将函数 $f(n)$ 与项 $n^{\\log_b a}$ 进行比较，后者代表了子问题数量的增长率。\n\n对于这两个递归关系式，我们有 $a=4$ 和 $b=2$。我们计算关键指数：\n$$\n\\log_b a = \\log_2 4 = 2\n$$\n因此，对于这两个问题，我们将比较非递归工作项 $f(n)$ 与 $n^2$。\n\n**$T_1(n)$ 的分析：**\n递归式为 $T_1(n)=4\\,T_1(n/2)+n^{1.9}$。\n这里，$f_1(n) = n^{1.9}$。\n我们将 $f_1(n)$ 与 $n^{\\log_b a} = n^2$ 进行比较。\n$f_1(n)$ 的指数是 $1.9$，小于关键指数 $2$。\n具体来说，对于某个常数 $\\epsilon > 0$，$f_1(n) = n^{1.9} = O(n^{2 - \\epsilon})$。例如，我们可以选择 $\\epsilon = 0.1$，这得到 $n^{1.9} = O(n^{1.9})$。\n这对应于主定理的**情况1**，该情况指出如果 $f(n) = O(n^{\\log_b a - \\epsilon})$，那么 $T(n) = \\Theta(n^{\\log_b a})$。\n应用此情况，我们得出结论：\n$$\nT_1(n) = \\Theta(n^2)\n$$\n在这种情况下，增长由递归树叶子节点的成本主导。\n\n**$T_2(n)$ 的分析：**\n递归式为 $T_2(n)=4\\,T_2(n/2)+n^{2.1}$。\n这里，$f_2(n) = n^{2.1}$。\n我们将 $f_2(n)$ 与 $n^{\\log_b a} = n^2$ 进行比较。\n$f_2(n)$ 的指数是 $2.1$，大于关键指数 $2$。\n具体来说，对于某个常数 $\\epsilon > 0$，$f_2(n) = n^{2.1} = \\Omega(n^{2 + \\epsilon})$。例如，我们可以选择 $\\epsilon = 0.1$，这得到 $n^{2.1} = \\Omega(n^{2.1})$。\n这指向主定理的**情况3**。要应用此情况，我们还必须满足正则性条件：对于某个常数 $c  1$ 和所有足够大的 $n$，$a f(n/b) \\leq c f(n)$。\n我们来验证 $T_2(n)$ 的这个条件：\n$$\na f_2(n/b) = 4 \\cdot (n/2)^{2.1} = 4 \\cdot \\frac{n^{2.1}}{2^{2.1}} = \\frac{4}{2^{2.1}} \\cdot n^{2.1}\n$$\n我们需要一个常数 $c = \\frac{4}{2^{2.1}}  1$。由于 $2^{2.1} > 2^2 = 4$，分数 $\\frac{4}{2^{2.1}}$ 确实小于 $1$。正则性条件得到满足。\n主定理的情况3指出，如果 $f(n) = \\Omega(n^{\\log_b a + \\epsilon})$ 并且正则性条件成立，那么 $T(n) = \\Theta(f(n))$。\n应用此情况，我们得出结论：\n$$\nT_2(n) = \\Theta(n^{2.1})\n$$\n在这种情况下，增长由递归树根节点的工作成本主导。\n\n**结果摘要：**\n- $T_1(n) = \\Theta(n^2)$\n- $T_2(n) = \\Theta(n^{2.1})$\n\n### 第 3 步：逐项分析\n\n现在我将根据推导出的结果评估每个提供的选项。\n\n**A. $T_1(n)=\\Theta(n^{2})$ 且 $T_2(n)=\\Theta(n^{2.1})$，因此 $T_2(n)$ 渐近地支配 $T_1(n)$。**\n- 陈述 $T_1(n)=\\Theta(n^2)$ 是正确的，这是根据主定理的情况1推导出来的。\n- 陈述 $T_2(n)=\\Theta(n^{2.1})$ 是正确的，这是根据主定理的情况3推导出来的。\n- 结论“$T_2(n)$ 渐近地支配 $T_1(n)$”也是正确的。渐近支配意味着 $\\lim_{n \\to \\infty} \\frac{T_1(n)}{T_2(n)} = 0$。对于首项，这个极限是 $\\lim_{n \\to \\infty} \\frac{C_1 n^2}{C_2 n^{2.1}} = \\lim_{n \\to \\infty} \\frac{C_1}{C_2 n^{0.1}} = 0$，其中 $C_1, C_2$ 是正常数。函数 $n^{2.1}$ 的增长严格快于 $n^2$。\n- **结论：正确。**\n\n**B. $T_1(n)=\\Theta(n^{2}\\log n)$ 且 $T_2(n)=\\Theta(n^{2.1})$，因此 $T_2(n)$ 渐近地支配 $T_1(n)$。**\n- 陈述 $T_1(n)=\\Theta(n^{2}\\log n)$ 是不正确的。这个解对应于主定理的情况2，该情况适用于 $f_1(n) = \\Theta(n^2)$。然而，$f_1(n) = n^{1.9}$，它比 $n^2$ 多项式地小。\n- **结论：不正确。**\n\n**C. $T_1(n)=\\Theta(n^{2})$ 且 $T_2(n)=\\Theta(n^{2}\\log n)$，因此 $T_2(n)$ 仅以一个对数因子支配 $T_1(n)$。**\n- 陈述 $T_2(n)=\\Theta(n^2 \\log n)$ 是不正确的。这个解对应于主定理的情况2，该情况适用于 $f_2(n) = \\Theta(n^2)$。然而，$f_2(n) = n^{2.1}$，它比 $n^2$ 多项式地大。\n- **结论：不正确。**\n\n**D. $T_1(n)=\\Theta(n^{1.9})$ 且 $T_2(n)=\\Theta(n^{2.1})$，所以在这两个递归中，非递归项决定了增长。**\n- 陈述 $T_1(n)=\\Theta(n^{1.9})$ 是不正确的。如情况1的分析所示，解是 $\\Theta(n^2)$。增长是由项 $n^{\\log_b a}$ 决定的，而不是非递归项 $f_1(n)=n^{1.9}$。\n- 声稱“在这两个递归中，非递归项都决定了增长”是错误的，因为它对 $T_1(n)$ 不成立。\n- **结论：不正确。**\n\n**E. $T_1(n)$ 和 $T_2(n)$ 都是 $\\Theta(n^{2})$。**\n- 陈述 $T_2(n) = \\Theta(n^2)$ 是不正确的。根据我们的分析，$T_2(n) = \\Theta(n^{2.1})$。\n- **结论：不正确。**\n\n基于分析，选项 A 是唯一正确描述了两个递归关系式的渐近行为及其关系的选项。", "answer": "$$\\boxed{A}$$", "id": "3248627"}, {"introduction": "当递归树中每一层的工作量大致相等时，我们遇到了主定理中最微妙的“临界情况”。在这种情况下，总复杂度不再由单层主导，而是依赖于递归树的深度，因此最终结果中会出现一个对数因子。本练习要求你从第一性原理出发，通过对递归树各层工作量进行求和来推导复杂度 [@problem_id:3248731]，从而让你亲身体验并理解这个对数因子是如何从逐层累加的工作中产生的。", "problem": "一个处理大小为 $n$ 的输入的算法，执行一次分治分解，将其分成 $9$ 个大小为 $n/3$ 的相同子问题，每次调用产生 $n^{2}(\\ln n)^{3}$ 的额外处理成本，其中 $\\ln$ 表示自然对数。假设基本情况满足 $T(1)=\\Theta(1)$，且 $n$ 是 $3$ 的精确整数次幂，因此递归可以进行整数层而无需向下取整。从分治递归树的基本理解出发——即当每次调用分裂成 $a$ 个子节点时，在第 $i$ 层有 $a^{i}$ 个子问题，且当每层的规模缩减因子为 $b$ 时，在第 $i$ 层的每个子问题的规模缩减为原来的 $b^{i}$ 分之一——通过对递归树中所有层级贡献的工作量求和并计入叶节点成本，来推导总成本。你可以使用关于级数估计和多项式函数定积分的标准结论来界定总和，但不得调用任何现成的主定理公式。请使用大西塔表示法，以单个闭式渐近表达式给出最终的复杂度。最终答案必须是单个符号数学表达式，不得是不等式或等式。", "solution": "对问题陈述进行验证。\n\n**步骤1：提取已知条件**\n-   递归关系类型：分治法。\n-   子问题数量 $a$：$9$。\n-   子问题规模缩放：每个子问题的规模为 $n/3$。因子 $b$ 为 $3$。\n-   每次调用的合并/分解成本 $f(n)$：$n^{2}(\\ln n)^{3}$。\n-   基本情况：$T(1)=\\Theta(1)$。\n-   约束条件：$n$ 是 $3$ 的精确整数次幂。\n-   方法论：通过对递归树中每一层的工作量求和来推导总成本。\n-   禁止事项：不直接使用主定理。\n-   要求输出：使用大西塔表示法，给出总成本 $T(n)$ 的单个闭式渐近表达式。\n\n**步骤2：使用提取的已知条件进行验证**\n-   **科学依据：** 该问题是算法分析中的一个标准练习，这是计算机科学的核心课题。所使用的数学对象和方法都已得到公认。该问题在科学上和事实上都是合理的。\n-   **定义良好：** 问题为递归关系 $T(n) = 9T(n/3) + n^{2}(\\ln n)^{3}$ 提供了完整的定义，并指定了基本情况和对 $n$ 形式的简化假设。这种结构确保了存在且可以推导出唯一的渐近解。\n-   **客观性：** 问题以精确、形式化的语言陈述，没有歧义或主观内容。\n-   **_其他缺陷_：** 问题不违反任何其他标准。它是完整的、一致的、可形式化的，并提出了一个在其主题领域内具有核心地位的非平凡挑战。避免使用主定理的指令是一种旨在测试基础理解的教学约束，而非问题陈述本身的缺陷。\n\n**步骤3：结论与行动**\n问题是**有效的**。将提供完整解答。\n\n给定的递归关系为 $T(n) = 9T(n/3) + n^{2}(\\ln n)^{3}$，基本情况为 $T(1) = \\Theta(1)$。我们按照指示，使用递归树方法分析此递归关系。\n\n递归树有一个对应于大小为 $n$ 的初始问题的根节点。在每个层级 $i$（根节点在第 $i=0$ 层），问题被分解为更小的子问题。\n-   在第 $i$ 层，有 $a^{i} = 9^{i}$ 个节点。\n-   第 $i$ 层的每个节点对应一个大小为 $n/b^{i} = n/3^{i}$ 的子问题。\n-   在第 $i$ 层单个节点上完成的工作量由 $f(n/3^{i})$ 给出。\n-   $f(n/3^{i}) = \\left(\\frac{n}{3^{i}}\\right)^{2} \\left(\\ln\\left(\\frac{n}{3^{i}}\\right)\\right)^{3} = \\frac{n^{2}}{(3^{i})^{2}} (\\ln(n) - \\ln(3^{i}))^{3} = \\frac{n^{2}}{9^{i}} (\\ln(n) - i \\ln(3))^{3}$。\n\n第 $i$ 层完成的总工作量，记为 $W_{i}$，是该层的节点数乘以每个节点的工作量：\n$$W_{i} = 9^{i} \\times f\\left(\\frac{n}{3^{i}}\\right) = 9^{i} \\times \\frac{n^{2}}{9^{i}} (\\ln(n) - i \\ln(3))^{3} = n^{2} (\\ln(n) - i \\ln(3))^{3}$$\n\n递归持续进行，直到子问题的大小变为 $1$。设树的深度为 $k$。在第 $k$ 层，大小为 $n/3^{k} = 1$，这意味着 $n = 3^{k}$。因此，树的深度为 $k = \\log_{3}(n)$。内部节点的层级范围是从 $i=0$ 到 $i=k-1$。叶节点在第 $k$ 层。\n\n总成本 $T(n)$ 是从根节点到叶节点所有层级完成的工作量之和。\n总成本 = (内部层级的工作量总和) + (叶节点的成本)。\n\n叶节点（在第 $k$ 层）的成本是叶节点的数量乘以基本情况的成本 $T(1)$。\n叶节点数量 = $9^{k} = 9^{\\log_{3}(n)} = (3^{2})^{\\log_{3}(n)} = (3^{\\log_{3}(n)})^{2} = n^{2}$。\n叶节点的成本 = $n^{2} \\times T(1) = n^{2} \\times \\Theta(1) = \\Theta(n^{2})$。\n\n内部层级（从 $i=0$到$k-1$）的工作量总和为：\n$$ \\sum_{i=0}^{k-1} W_{i} = \\sum_{i=0}^{k-1} n^{2} (\\ln(n) - i \\ln(3))^{3} = n^{2} \\sum_{i=0}^{k-1} (\\ln(n) - i \\ln(3))^{3} $$\n为了简化求和，我们代入 $\\ln(n) = \\ln(3^{k}) = k \\ln(3)$：\n$$ \\sum_{i=0}^{k-1} W_{i} = n^{2} \\sum_{i=0}^{k-1} (k \\ln(3) - i \\ln(3))^{3} = n^{2} (\\ln 3)^{3} \\sum_{i=0}^{k-1} (k-i)^{3} $$\n我们对求和进行变址。设 $j = k-i$。当 $i$ 从 $0$ 到 $k-1$ 变化时，$j$ 从 $k$ 递减到 $1$。\n$$ \\sum_{i=0}^{k-1} W_{i} = n^{2} (\\ln 3)^{3} \\sum_{j=1}^{k} j^{3} $$\n前 $k$ 个立方数的和是一个众所周知的结果：\n$$ \\sum_{j=1}^{k} j^{3} = \\left(\\frac{k(k+1)}{2}\\right)^{2} = \\frac{k^{2}(k+1)^{2}}{4} $$\n这个和渐近等价于 $\\frac{k^{4}}{4}$，所以 $\\sum_{j=1}^{k} j^{3} = \\Theta(k^{4})$。\n将此代回内部层级工作量的表达式中：\n$$ \\sum_{i=0}^{k-1} W_{i} = n^{2} (\\ln 3)^{3} \\cdot \\Theta(k^{4}) $$\n现在，我们代入 $k = \\log_{3}(n) = \\frac{\\ln(n)}{\\ln(3)}$。注意 $k = \\Theta(\\ln n)$。\n$$ \\sum_{i=0}^{k-1} W_{i} = n^{2} (\\ln 3)^{3} \\cdot \\Theta\\left(\\left(\\frac{\\ln n}{\\ln 3}\\right)^{4}\\right) = n^{2} (\\ln 3)^{3} \\cdot \\Theta\\left(\\frac{(\\ln n)^{4}}{(\\ln 3)^{4}}\\right) = \\Theta(n^{2} (\\ln n)^{4}) $$\n总成本 $T(n)$ 是内部节点的工作量和叶节点成本的总和：\n$$ T(n) = \\Theta(n^{2}(\\ln n)^{4}) + \\Theta(n^{2}) $$\n对于大的 $n$，$(\\ln n)^{4}$ 项无界增长。因此，$\\Theta(n^{2}(\\ln n)^{4})$ 项主导了 $\\Theta(n^{2})$ 项。\n最终的渐近复杂度是：\n$$ T(n) = \\Theta(n^{2}(\\ln n)^{4}) $$\n这个结果与扩展主定理（$f(n) = \\Theta(n^{\\log_b a} (\\log n)^p)$ 的情况）一致，该定理将得出 $T(n) = \\Theta(n^{\\log_b a} (\\log n)^{p+1})$。这里，$\\log_b a = \\log_3 9 = 2$ 且 $p=3$，得到 $\\Theta(n^2 (\\ln n)^{3+1}) = \\Theta(n^2 (\\ln n)^4)$，这证实了我们的推导。", "answer": "$$\\boxed{\\Theta(n^{2}(\\ln n)^{4})}$$", "id": "3248731"}, {"introduction": "并非所有递归关系都能直接套用主定理的标准形式 $T(n) = aT(n/b) + f(n)$。这个练习展示了一种强大的技巧——变量替换，它能将非标准形式（如本题中的 $T(\\sqrt{n})$）的递归关系转化为我们熟悉的形式。通过解决这个问题 [@problem_id:3248785]，你将学会如何扩展主定理的应用范围，从而处理更广泛和更复杂的算法分析问题。", "problem": "考虑一个为 $n \\geq 2$ 定义的非负函数 $T(n)$ 的递归式\n$$\nT(n) \\;=\\; 2\\,T(\\sqrt{n}) \\;+\\; \\ln n,\n$$\n其基准条件为 $T(2)=1$。这里 $\\ln$ 表示自然对数。此递归式并非可直接应用分治递归主定理（Master Theorem）的标准形式。你的任务是使用一种合理的变量替换，将该递归式转换为标准的分治形式。然后，应用主定理以获得其紧密的领头阶渐近增长。请将最终答案表示为关于 $n$ 的单个闭式解析表达式，该表达式应捕捉领头阶渐近项，其中乘法常数和低阶项不计在内。在最终答案中不要包含任何不等式、$\\mathcal{O}$ 符号或 $\\Theta$ 符号。", "solution": "该问题给出了函数 $T(n)$ 的一个递归关系，并要求求解其领头阶渐近增长。\n第一步是验证问题陈述的有效性。\n已知条件如下：\n1. 递归关系：$T(n) = 2\\,T(\\sqrt{n}) + \\ln n$，对于 $n \\geq 2$。\n2. 基准条件：$T(2)=1$。\n3. 函数 $T(n)$ 是非负的。\n4. 任务是使用变量替换和主定理来找到领头阶渐近增长。\n\n为了进行渐近分析，该问题在数学上是良定义的且自洽的。这是算法分析中的一个标准问题，没有违反任何科学或数学原理。其结构合理，要求是客观且可形式化的。因此，该问题被认为是有效的，可以寻求解答。\n\n给定的递归式 $T(n) = 2\\,T(\\sqrt{n}) + \\ln n$ 不符合主定理的标准形式 $T(n) = a\\,T(n/b) + f(n)$。递归调用的参数是 $\\sqrt{n}$ 而不是 $n/b$。我们进行变量替换来变换该递归式。令变量 $n$ 用新变量 $k$ 表示为 $n = \\exp(k)$，这意味着 $k = \\ln n$。我们定义一个新函数 $S(k) = T(n) = T(\\exp(k))$。\n\n我们将此代入原始的递归关系中。\n项 $T(n)$ 变为 $S(k)$。\n项 $T(\\sqrt{n})$ 变为 $T(\\sqrt{\\exp(k)}) = T(\\exp(k/2)) = S(k/2)$。\n项 $\\ln n$ 变为 $\\ln(\\exp(k)) = k$。\n将这些代入原方程，得到关于 $S(k)$ 的新递归式：\n$$\nS(k) = 2\\,S(k/2) + k\n$$\n这个递归式符合主定理的标准形式 $S(k) = a\\,S(k/b) + g(k)$，其参数为：\n$a = 2$\n$b = 2$\n$g(k) = k$\n\n为了应用主定理，我们将 $g(k)$ 的增长与函数 $k^{\\log_b a}$ 进行比较。\n关键指数为 $\\log_b a = \\log_2 2 = 1$。\n我们将 $g(k) = k$ 与 $k^1$ 进行比较。\n由于 $g(k) = k = \\Theta(k^1)$，这属于主定理的第二种情况（Case 2）。\n该定理指出，如果 $g(k) = \\Theta(k^{\\log_b a})$，那么递归式的解为 $S(k) = \\Theta(k^{\\log_b a} \\log k)$。\n将此应用于我们变换后的递归式：\n$$\nS(k) = \\Theta(k^{\\log_2 2} \\log k) = \\Theta(k \\log k)\n$$\n问题要求的是领头阶项，而不是 $\\Theta$ 符号表示。主定理第二种情况的解来自于递归每一层所做工作的总和。\n对于 $S(k) = a S(k/b) + g(k)$，解是各项 $\\sum_{j=0}^{\\log_b k - 1} a^j g(k/b^j)$ 的和，再加上基准情形的项。\n在我们的例子中，这个和是 $\\sum_{j=0}^{\\log_2 k - 1} 2^j (k/2^j) = \\sum_{j=0}^{\\log_2 k - 1} k = k \\log_2 k$。\n来自基准情形的低阶项是 $k^{\\log_b a}S(k_0) = k S(k_0)$，它被 $k \\log_2 k$ 所主导。\n因此，$S(k)$ 的领头阶渐近行为与 $k \\log_2 k$ 成正比。\n\n最后，我们必须将此结果转换回原变量 $n$ 的形式。\n我们回想一下替换 $k = \\ln n$。\n$$\nT(n) = S(k) = S(\\ln n)\n$$\n将 $k = \\ln n$ 代入 $S(k)$ 的渐近表达式，我们得到 $T(n)$ 的渐近行为：\n$$\nT(n) \\propto (\\ln n) \\log_2(\\ln n)\n$$\n我们可以用自然对数来表示 $\\log_2(\\ln n)$：$\\log_2(\\ln n) = \\frac{\\ln(\\ln n)}{\\ln 2}$。\n所以，$T(n)$ 的领头项与 $(\\ln n) \\frac{\\ln(\\ln n)}{\\ln 2}$ 成正比。\n项 $\\frac{1}{\\ln 2}$ 是一个乘法常数。问题要求最终答案捕捉领头阶增长，“其中乘法常数和低阶项不计在内”。这意味着我们应该提供领头阶项的函数形式，按照问题的规定，通常使用自然对数来表示。\n其函数形式是 $n$ 的自然对数与 $n$ 的自然对数的自然对数的乘积。", "answer": "$$\n\\boxed{(\\ln n) (\\ln(\\ln n))}\n$$", "id": "3248785"}]}