{"hands_on_practices": [{"introduction": "算法的复杂度并非总是单一输入规模 $n$ 的函数，其性能往往还受到其他参数的影响。本练习 [@problem_id:3222246] 旨在探讨一个重要问题：当辅助参数 $k$ 与主输入规模 $n$ 存在不同尺度的关联（例如，$k=\\ln n$ 或 $k=\\sqrt{n}$）时，算法的整体渐近行为会发生怎样截然不同的变化。通过这个练习，你将学会如何通过代入参数的尺度关系来分析算法在不同应用场景下的性能表现，这是一项评估和选择算法时非常实用的技能。", "problem": "一个算法处理大小为 $n$ 的输入，并带有一个辅助参数 $k$，其最坏情况下的时间复杂度由 Landau 大O符号（Big-O）界定为 $O(k^2 \\ln n)$，其中 $\\ln$ 表示自然对数。考虑两种参数随输入大小变化的情况：(i) $k=\\ln n$ 和 (ii) $k=\\sqrt{n}$。使用大O的形式化定义和第一性原理的极限比较法，通过分别对应于代入 $k=\\ln n$ 和 $k=\\sqrt{n}$ 的代表性函数 $f_{1}(n)$ 和 $f_{2}(n)$，为每种情况下的主导项增长建模。然后计算极限\n$$L \\;=\\; \\lim_{n\\to\\infty}\\,\\frac{f_{1}(n)}{f_{2}(n)}.$$\n将最终答案表示为单个实数。在整个计算过程中使用自然对数，并且不要引入任何单位或进行四舍五入。", "solution": "该问题陈述经核实具有科学依据、提法恰当且客观。这是一个关于函数增长率比较的算法分析中的标准问题。所有必要的组成部分均已提供，不存在矛盾或模糊之处。\n\n算法的最坏情况时间复杂度以大O符号表示为 $O(k^2 \\ln n)$。这意味着对于大的输入，执行时间 $T(n, k)$ 的上界是函数 $g(n, k) = k^2 \\ln n$ 的一个常数倍。为了对主导项的增长进行建模，我们使用此函数 $g(n, k)$ 并代入给定的参数 $k$ 的伸缩关系。\n\n首先，我们为两种指定情况定义代表性函数 $f_{1}(n)$ 和 $f_{2}(n)$。\n\n在情况 (i) 中，参数 $k$ 随输入大小 $n$ 的变化关系为 $k = \\ln n$。将此关系代入增长函数 $g(n, k)$，得到代表性函数 $f_{1}(n)$：\n$$f_{1}(n) = (\\ln n)^{2} \\cdot \\ln n = (\\ln n)^{3}$$\n\n在情况 (ii) 中，参数 $k$ 的变化关系为 $k = \\sqrt{n}$。将此关系代入增长函数 $g(n, k)$，得到代表性函数 $f_{2}(n)$：\n$$f_{2}(n) = (\\sqrt{n})^{2} \\cdot \\ln n = (n^{\\frac{1}{2}})^{2} \\cdot \\ln n = n \\ln n$$\n\n接下来，我们需要计算当 $n$ 趋于无穷大时这两个函数之比的极限 $L$：\n$$L = \\lim_{n\\to\\infty}\\,\\frac{f_{1}(n)}{f_{2}(n)} = \\lim_{n\\to\\infty}\\,\\frac{(\\ln n)^{3}}{n \\ln n}$$\n对于 $n > 1$，我们可以通过消去一个因子 $\\ln n$ 来简化极限内的表达式：\n$$L = \\lim_{n\\to\\infty}\\,\\frac{(\\ln n)^{2}}{n}$$\n为了计算这个极限，我们观察当 $n \\to \\infty$ 时分子和分母的行为。分子 $(\\ln n)^{2}$ 趋于 $\\infty$，分母 $n$ 也趋于 $\\infty$。这构成了 $\\frac{\\infty}{\\infty}$ 类型的不定式。因此，我们可以应用 L'Hôpital's Rule，该法则指出，如果 $\\lim_{x\\to c} h(x) = \\lim_{x\\to c} p(x) = \\infty$，则 $\\lim_{x\\to c} \\frac{h(x)}{p(x)} = \\lim_{x\\to c} \\frac{h'(x)}{p'(x)}$，前提是后一个极限存在。\n\n令 $h(n) = (\\ln n)^{2}$ 和 $p(n) = n$。它们关于 $n$ 的导数是：\n$$h'(n) = \\frac{d}{dn}\\left[(\\ln n)^{2}\\right] = 2(\\ln n) \\cdot \\frac{d}{dn}(\\ln n) = 2(\\ln n) \\cdot \\frac{1}{n} = \\frac{2 \\ln n}{n}$$\n$$p'(n) = \\frac{d}{dn}(n) = 1$$\n应用 L'Hôpital's Rule，极限变为：\n$$L = \\lim_{n\\to\\infty}\\,\\frac{h'(n)}{p'(n)} = \\lim_{n\\to\\infty}\\,\\frac{\\frac{2 \\ln n}{n}}{1} = \\lim_{n\\to\\infty}\\,\\frac{2 \\ln n}{n}$$\n我们计算这个新的极限。当 $n \\to \\infty$ 时，分子 $2 \\ln n$ 趋于 $\\infty$，分母 $n$ 也趋于 $\\infty$。我们再次遇到了 $\\frac{\\infty}{\\infty}$ 类型的不定式。我们第二次应用 L'Hôpital's Rule。\n\n令新的分子为 $h_{2}(n) = 2 \\ln n$，新的分母为 $p_{2}(n) = n$。它们的导数是：\n$$h_{2}'(n) = \\frac{d}{dn}(2 \\ln n) = 2 \\cdot \\frac{1}{n} = \\frac{2}{n}$$\n$$p_{2}'(n) = \\frac{d}{dn}(n) = 1$$\n再次应用 L'Hôpital's Rule：\n$$L = \\lim_{n\\to\\infty}\\,\\frac{h_{2}'(n)}{p_{2}'(n)} = \\lim_{n\\to\\infty}\\,\\frac{\\frac{2}{n}}{1} = \\lim_{n\\to\\infty}\\,\\frac{2}{n}$$\n在这个最终的表达式中，分子是一个常数 $2$，而分母 $n$ 趋于无穷大。一个常数除以一个无限增大的量，其结果趋于 $0$。\n因此，极限的值是：\n$$L = 0$$\n这个结果证实了一个普遍原理：$n$ 的任何多项式函数（此处为 $n^{1}$）的增长速度都快于 $n$ 的任何多对数函数（此处为 $(\\ln n)^{2}$）。", "answer": "$$\\boxed{0}$$", "id": "3222246"}, {"introduction": "许多算法的执行过程是迭代式的，其总成本是每一步操作成本的累加。当每一步的成本不是一个常数，而是一个随迭代次数变化的函数时，精确计算总成本（即求和）可能变得复杂。本练习 [@problem_id:3222276] 将引导你运用一项核心分析技巧：使用定积分来近似一个离散的和。通过这种方法，你将能够驾驭那些没有简单封闭解的递归关系，并精确地量化它们的主要增长趋势，深刻理解离散算法分析与连续数学工具之间的桥梁。", "problem": "考虑两个算法，算法 $A$ 和算法 $B$，它们使用迭代求精的方式处理大小为 $n$ 的输入。在第 $i$ 次迭代时，算法 $A$ 产生的增量成本等于自然对数 $\\ln i$，而算法 $B$ 产生的增量成本等于平方根 $\\sqrt{i}$。总成本满足以下递推关系\n$$T_{A}(1) = 0,\\quad T_{A}(n) = T_{A}(n-1) + \\ln n,$$\n$$T_{B}(1) = 0,\\quad T_{B}(n) = T_{B}(n-1) + \\sqrt{n},$$\n对于所有整数 $n \\geq 2$。从求和与自然对数性质的核心定义出发，并使用由单调性和积分证明的第一性原理近似，确定以下极限的精确值\n$$L \\;=\\; \\lim_{n \\to \\infty} \\frac{T_{B}(n) - T_{A}(n)}{n^{3/2}}.$$\n你的最终答案必须是一个实数。不需要四舍五入，也不涉及物理单位。", "solution": "所述问题是适定的、数学上合理的且自洽的。它没有科学上的不准确性、矛盾或歧义。因此，可以推导出严谨的解。\n\n总成本 $T_{A}(n)$ 和 $T_{B}(n)$ 由以下递推关系定义：\n$$T_{A}(1) = 0, \\quad T_{A}(n) = T_{A}(n-1) + \\ln n \\quad \\text{对于 } n \\geq 2$$\n$$T_{B}(1) = 0, \\quad T_{B}(n) = T_{B}(n-1) + \\sqrt{n} \\quad \\text{对于 } n \\geq 2$$\n通过展开这些递推关系，我们可以将 $T_{A}(n)$ 和 $T_{B}(n)$ 表示为求和形式：\n$$T_{A}(n) = T_{A}(1) + \\sum_{k=2}^{n} \\ln k = 0 + \\sum_{k=2}^{n} \\ln k = \\sum_{k=2}^{n} \\ln k$$\n$$T_{B}(n) = T_{B}(1) + \\sum_{k=2}^{n} \\sqrt{k} = 0 + \\sum_{k=2}^{n} \\sqrt{k} = \\sum_{k=2}^{n} \\sqrt{k}$$\n问题要求计算极限：\n$$L = \\lim_{n \\to \\infty} \\frac{T_{B}(n) - T_{A}(n)}{n^{3/2}}$$\n如果各个极限存在，我们可以拆分该极限：\n$$L = \\lim_{n \\to \\infty} \\left( \\frac{T_{B}(n)}{n^{3/2}} - \\frac{T_{A}(n)}{n^{3/2}} \\right) = \\left( \\lim_{n \\to \\infty} \\frac{T_{B}(n)}{n^{3/2}} \\right) - \\left( \\lim_{n \\to \\infty} \\frac{T_{A}(n)}{n^{3/2}} \\right)$$\n我们将根据问题中基于单调性和积分的第一性原理方法的要求，使用积分界限分别计算每个极限。\n\n首先，我们分析包含 $T_{A}(n)$ 的项。\n函数 $f(x) = \\ln x$ 在 $x > 0$ 上是连续且单调递增的。因此，我们可以使用定积分来界定总和 $T_{A}(n) = \\sum_{k=2}^{n} \\ln k$。\n对于一个递增函数 $f(x)$，以下不等式成立：\n$$\\int_{a-1}^{b} f(x) \\, dx \\leq \\sum_{k=a}^{b} f(k) \\leq \\int_{a}^{b+1} f(x) \\, dx$$\n对于 $T_{A}(n)$，我们有 $a=2$ 和 $b=n$。\n下界为：\n$$T_{A}(n) \\geq \\int_{2-1}^{n} \\ln x \\, dx = \\int_{1}^{n} \\ln x \\, dx$$\n$\\ln x$ 的积分通过分部积分法求得：$\\int \\ln x \\, dx = x \\ln x - x + C$。\n$$T_{A}(n) \\geq [x \\ln x - x]_{1}^{n} = (n \\ln n - n) - (1 \\ln 1 - 1) = n \\ln n - n + 1$$\n上界为：\n$$T_{A}(n) \\leq \\int_{2}^{n+1} \\ln x \\, dx = [x \\ln x - x]_{2}^{n+1} = ((n+1)\\ln(n+1) - (n+1)) - (2\\ln 2 - 2)$$\n所以我们得到 $T_{A}(n)$ 的界限：\n$$n \\ln n - n + 1 \\leq T_{A}(n) \\leq (n+1)\\ln(n+1) - n + 1 - 2\\ln 2$$\n现在，我们可以通过应用夹逼定理来求 $\\frac{T_{A}(n)}{n^{3/2}}$ 的极限。\n$$\\frac{n \\ln n - n + 1}{n^{3/2}} \\leq \\frac{T_{A}(n)}{n^{3/2}} \\leq \\frac{(n+1)\\ln(n+1) - n + 1 - 2\\ln 2}{n^{3/2}}$$\n让我们计算下界的极限：\n$$\\lim_{n \\to \\infty} \\frac{n \\ln n - n + 1}{n^{3/2}} = \\lim_{n \\to \\infty} \\left( \\frac{\\ln n}{n^{1/2}} - \\frac{1}{n^{1/2}} + \\frac{1}{n^{3/2}} \\right)$$\n项 $\\lim_{n \\to \\infty} \\frac{\\ln n}{n^{1/2}}$ 可以使用洛必达法则计算：\n$$\\lim_{n \\to \\infty} \\frac{\\ln n}{n^{1/2}} = \\lim_{n \\to \\infty} \\frac{1/n}{\\frac{1}{2}n^{-1/2}} = \\lim_{n \\to \\infty} \\frac{2}{n^{1/2}} = 0$$\n因此，下界的极限是 $0 - 0 + 0 = 0$。\n上界的极限渐近等价于 $\\lim_{n \\to \\infty} \\frac{n \\ln n}{n^{3/2}} = \\lim_{n \\to \\infty} \\frac{\\ln n}{n^{1/2}} = 0$。\n根据夹逼定理，我们得出结论：\n$$\\lim_{n \\to \\infty} \\frac{T_{A}(n)}{n^{3/2}} = 0$$\n\n接下来，我们分析包含 $T_{B}(n)$ 的项。\n函数 $g(x) = \\sqrt{x}$ 在 $x \\geq 0$ 上是连续且单调递增的。我们使用相同的积分不等式来界定总和 $T_{B}(n) = \\sum_{k=2}^{n} \\sqrt{k}$。\n$T_B(n)$ 的下界为：\n$$T_{B}(n) \\geq \\int_{2-1}^{n} \\sqrt{x} \\, dx = \\int_{1}^{n} x^{1/2} \\, dx$$\n积分为：\n$$T_{B}(n) \\geq \\left[ \\frac{2}{3}x^{3/2} \\right]_{1}^{n} = \\frac{2}{3}n^{3/2} - \\frac{2}{3}$$\n上界为：\n$$T_{B}(n) \\leq \\int_{2}^{n+1} \\sqrt{x} \\, dx = \\left[ \\frac{2}{3}x^{3/2} \\right]_{2}^{n+1} = \\frac{2}{3}(n+1)^{3/2} - \\frac{2}{3}(2)^{3/2} = \\frac{2}{3}(n+1)^{3/2} - \\frac{4\\sqrt{2}}{3}$$\n所以我们得到 $T_{B}(n)$ 的界限：\n$$\\frac{2}{3}n^{3/2} - \\frac{2}{3} \\leq T_{B}(n) \\leq \\frac{2}{3}(n+1)^{3/2} - \\frac{4\\sqrt{2}}{3}$$\n对 $\\frac{T_{B}(n)}{n^{3/2}}$ 应用夹逼定理：\n$$\\frac{\\frac{2}{3}n^{3/2} - \\frac{2}{3}}{n^{3/2}} \\leq \\frac{T_{B}(n)}{n^{3/2}} \\leq \\frac{\\frac{2}{3}(n+1)^{3/2} - \\frac{4\\sqrt{2}}{3}}{n^{3/2}}$$\n$$\\frac{2}{3} - \\frac{2}{3n^{3/2}} \\leq \\frac{T_{B}(n)}{n^{3/2}} \\leq \\frac{2}{3}\\left(\\frac{n+1}{n}\\right)^{3/2} - \\frac{4\\sqrt{2}}{3n^{3/2}}$$\n取极限 $n \\to \\infty$：\n下界的极限是 $\\lim_{n \\to \\infty} \\left(\\frac{2}{3} - \\frac{2}{3n^{3/2}}\\right) = \\frac{2}{3}$。\n上界的极限是 $\\lim_{n \\to \\infty} \\left(\\frac{2}{3}\\left(1+\\frac{1}{n}\\right)^{3/2} - \\frac{4\\sqrt{2}}{3n^{3/2}}\\right) = \\frac{2}{3}(1)^{3/2} - 0 = \\frac{2}{3}$。\n根据夹逼定理，我们得出结论：\n$$\\lim_{n \\to \\infty} \\frac{T_{B}(n)}{n^{3/2}} = \\frac{2}{3}$$\n\n最后，我们将这些结果代回到 $L$ 的表达式中：\n$$L = \\left( \\lim_{n \\to \\infty} \\frac{T_{B}(n)}{n^{3/2}} \\right) - \\left( \\lim_{n \\to \\infty} \\frac{T_{A}(n)}{n^{3/2}} \\right) = \\frac{2}{3} - 0 = \\frac{2}{3}$$\n极限的精确值是 $\\frac{2}{3}$。", "answer": "$$ \\boxed{\\frac{2}{3}} $$", "id": "3222276"}, {"introduction": "在算法分析中，我们偶尔会遇到一些形式复杂、难以直接比较的函数，例如阶乘、复合函数等，直接计算它们之间比值的极限可能非常繁琐。本练习 [@problem_id:3222399] 囊括了 $n!$、$n^n$ 和 $(\\log n)!$ 等多个重量级函数，旨在训练一种应对此类挑战的普适性策略：比较它们的对数。由于对数函数是单调递增的，它能保持原函数的增长顺序，同时极大地简化函数的结构，从而让增长率的比较变得豁然开朗。", "problem": "一个算法设计团队正在比较四个候选的渐近运行时间，以了解当输入大小 $n$ 趋于无穷大时它们的相对增长率。这四个函数定义为\n$f_1(n) = n!$，$f_2(n) = (\\log n)!$，$f_3(n) = n^n$ 和 $f_4(n) = n^{\\log n}$，其中 $\\log n$ 表示自然对数。使用算法理论中渐近比较的核心定义（例如，小o记号所体现的概念），并且不依赖任何快捷的排序方法，确定这四个函数在 $n \\to \\infty$ 时从增长最慢到增长最快的严格全序。将你的最终排序编码为一个行向量形式的索引 $(i_1, i_2, i_3, i_4)$，其中每个 $i_k \\in \\{1,2,3,4\\}$ 标识函数 $f_{i_k}$，并且该序列按增长率递增排列。使用 $\\operatorname{pmatrix}$ 环境将你的最终答案表示为单个行矩阵。无需进行舍入。", "solution": "问题要求根据四个函数在输入大小 $n$ 趋于无穷大时的渐近增长率来确定它们的严格全序。这四个函数为 $f_1(n) = n!$，$f_2(n) = (\\log n)!$，$f_3(n) = n^n$ 和 $f_4(n) = n^{\\log n}$。符号 $\\log n$ 指的是自然对数。\n\n为了建立严格排序，我们必须排列函数 $f_{i_k}$，使得 $f_{i_1}(n) = o(f_{i_2}(n))$，$f_{i_2}(n) = o(f_{i_3}(n))$ 并且 $f_{i_3}(n) = o(f_{i_4}(n))$。小o记号 $f(n) = o(g(n))$ 表示 $g(n)$ 的增长严格快于 $f(n)$，其形式化定义为极限 $\\lim_{n \\to \\infty} \\frac{f(n)}{g(n)} = 0$。\n\n我们将进行一系列成对比较来建立这个顺序。比较函数的一个有效方法是分析它们对数的渐近行为。由于对数是单调递增函数，函数的增长顺序在它们的对数中得以保持。具体来说，如果 $\\lim_{n \\to \\infty} (\\log g(n) - \\log f(n)) = \\infty$，则可以推出 $\\lim_{n \\to \\infty} \\log\\left(\\frac{g(n)}{f(n)}\\right) = \\infty$，这意味着 $\\lim_{n \\to \\infty} \\frac{g(n)}{f(n)} = \\infty$。这等价于 $\\lim_{n \\to \\infty} \\frac{f(n)}{g(n)} = 0$，从而证明 $f(n) = o(g(n))$。\n\n四个函数的对数是：\n$\\log(f_1(n)) = \\log(n!)$\n$\\log(f_2(n)) = \\log((\\log n)!)$\n$\\log(f_3(n)) = \\log(n^n) = n \\log n$\n$\\log(f_4(n)) = \\log(n^{\\log n}) = (\\log n) \\log n = (\\log n)^2$\n\n为了分析阶乘项，我们使用阶乘对数的斯特林近似，即对于大的 $k$，有 $\\log(k!) = k \\log k - k + O(\\log k)$。这提供了 $\\log(f_1(n))$ 和 $\\log(f_2(n))$ 的渐近行为。\n\n**比较 1：$f_2(n)$ 与 $f_4(n)$**\n\n我们比较 $f_2(n) = (\\log n)!$ 和 $f_4(n) = n^{\\log n}$。让我们分析它们的对数。\n$\\log(f_4(n)) = (\\log n)^2$。\n对于 $\\log(f_2(n))$，我们应用斯特林近似，令 $k = \\log n$。当 $n \\to \\infty$ 时，$k \\to \\infty$。\n$\\log(f_2(n)) = \\log((\\log n)!) = (\\log n)\\log(\\log n) - \\log n + O(\\log(\\log n))$。\n现在，我们考察当 $n \\to \\infty$ 时对数的差：\n$$ \\log(f_4(n)) - \\log(f_2(n)) = (\\log n)^2 - \\left((\\log n)\\log(\\log n) - \\log n + O(\\log(\\log n))\\right) $$\n$$ = (\\log n)^2 - (\\log n)\\log(\\log n) + \\log n - O(\\log(\\log n)) $$\n我们可以看到 $(\\log n)^2$ 比 $(\\log n)\\log(\\log n)$ 增长得更快。让我们提取出 $\\log n$：\n$$ \\log n \\left(\\log n - \\log(\\log n) + 1 - O\\left(\\frac{\\log(\\log n)}{\\log n}\\right)\\right) $$\n当 $n \\to \\infty$ 时，项 $\\log n - \\log(\\log n)$ 趋于无穷大。后面的项要么是常数，要么趋于 $0$。因此，整个表达式趋于无穷大。\n$$ \\lim_{n \\to \\infty} (\\log(f_4(n)) - \\log(f_2(n))) = \\infty $$\n这意味着 $f_2(n) = o(f_4(n))$。\n\n**比较 2：$f_4(n)$ 与 $f_1(n)$**\n\n我们比较 $f_4(n) = n^{\\log n}$ 和 $f_1(n) = n!$。同样，我们考察它们的对数。\n$\\log(f_4(n)) = (\\log n)^2$。\n对于 $\\log(f_1(n))$，我们使用斯特林近似，令 $k = n$：\n$\\log(f_1(n)) = \\log(n!) = n \\log n - n + O(\\log n)$。\n我们考察当 $n \\to \\infty$ 时对数的差：\n$$ \\log(f_1(n)) - \\log(f_4(n)) = (n \\log n - n + O(\\log n)) - (\\log n)^2 $$\n$$ = n \\log n - n - (\\log n)^2 + O(\\log n) $$\n当 $n \\to \\infty$ 时，项 $n \\log n$ 比表达式中的所有其他项（$n$、$(\\log n)^2$ 和 $O(\\log n)$）增长得都快。因此，差的极限由主导项 $n \\log n$ 决定。\n$$ \\lim_{n \\to \\infty} (\\log(f_1(n)) - \\log(f_4(n))) = \\infty $$\n这意味着 $f_4(n) = o(f_1(n))$。\n\n**比较 3：$f_1(n)$ 与 $f_3(n)$**\n\n我们比较 $f_1(n) = n!$ 和 $f_3(n) = n^n$。对于这一对函数，可以直接计算它们比值的极限。\n$$ \\lim_{n \\to \\infty} \\frac{f_1(n)}{f_3(n)} = \\lim_{n \\to \\infty} \\frac{n!}{n^n} = \\lim_{n \\to \\infty} \\frac{1 \\cdot 2 \\cdot 3 \\cdots n}{n \\cdot n \\cdot n \\cdots n} $$\n我们可以将这个比值写成一个乘积：\n$$ \\frac{n!}{n^n} = \\left(\\frac{1}{n}\\right) \\left(\\frac{2}{n}\\right) \\left(\\frac{3}{n}\\right) \\cdots \\left(\\frac{n}{n}\\right) $$\n对于任何 $n \\ge 2$，我们可以为这个乘积建立一个上界。对于 $k=1, \\dots, n$，每一项 $\\frac{k}{n} \\le 1$。第一项是 $\\frac{1}{n}$。\n$$ 0  \\frac{n!}{n^n} = \\frac{1}{n} \\cdot \\left(\\frac{2}{n} \\cdots \\frac{n}{n}\\right) \\le \\frac{1}{n} \\cdot (1 \\cdots 1) = \\frac{1}{n} $$\n由于我们有 $0  \\frac{n!}{n^n} \\le \\frac{1}{n}$ 并且 $\\lim_{n \\to \\infty} \\frac{1}{n} = 0$，根据夹逼定理，可以得出：\n$$ \\lim_{n \\to \\infty} \\frac{n!}{n^n} = 0 $$\n这证明了 $f_1(n) = o(f_3(n))$。\n\n**结论**\n\n通过我们的成对比较，我们建立了以下严格排序：\n$1.$ $f_2(n) = o(f_4(n))$\n$2.$ $f_4(n) = o(f_1(n))$\n$3.$ $f_1(n) = o(f_3(n))$\n\n根据小o关系的传递性，我们可以将这些结果合并为一个单一的严格全序：\n$$ f_2(n) \\prec f_4(n) \\prec f_1(n) \\prec f_3(n) $$\n其中 $\\prec$ 表示“严格慢于增长”。\n\n问题要求将答案编码为与此排序相对应的行向量索引 $(i_1, i_2, i_3, i_4)$。增长最慢的函数是 $f_2(n)$，其次是 $f_4(n)$，然后是 $f_1(n)$，增长最快的是 $f_3(n)$。因此，索引序列是 $(2, 4, 1, 3)$。", "answer": "$$\\boxed{\\begin{pmatrix} 2  4  1  3 \\end{pmatrix}}$$", "id": "3222399"}]}