{"hands_on_practices": [{"introduction": "时间复杂度分析不仅仅是理论上的练习，它更是工程实践中的一个关键工具。通过一个算法的复杂度函数，工程师可以预估其在特定硬件上的运行时间，从而判断它是否能满足现实世界中的性能要求，例如实时处理视频流。这个练习 [@problem_id:3221840] 将带你体验如何将抽象的复杂度函数 $T(n)$ 与具体的硬件性能和时间预算相结合，计算出算法能够处理的最大问题规模，从而将理论与实践联系起来。", "problem": "一个生产环境的增强现实管道必须维持每秒 $60$ 帧的帧率，因此每帧的处理预算为 $16$ 毫秒。其中一个特定阶段使用了一种算法，在随机存取机器（RAM）模型下，对于输入大小 $n$，其精确操作计数由 $T(n) = 5n^{2} + 100n$ 个基本步骤给出。在目标中央处理器（CPU）上，微基准测试显示，在稳态负载下，每个基本步骤的平均时间为 $40$ 纳秒。\n\n假设这 $16$ 毫秒的全部预算都可用于该算法阶段，请确定能使该算法在每帧预算内完成的最大整数输入大小 $n$。最终答案请以无单位的整数形式表示。", "solution": "用户希望找到一个算法的最大整数输入大小 $n$，使得其执行时间不超过给定的时间预算。\n\n### 第 1 步：提取已知条件\n问题提供了以下信息：\n- 每帧处理预算，$\\tau_{budget} = 16$ 毫秒。\n- 作为输入大小 $n$ 的函数的操作计数：$T(n) = 5n^2 + 100n$。\n- 每个基本操作的平均时间：$\\tau_{step} = 40$ 纳秒。\n\n### 第 2 步：使用提取的已知条件进行验证\n该问题具有科学依据，使用了算法分析（操作计数、时间复杂度）和计算机体系结构（处理时间、纳秒）中的标准概念。该问题是良构的，因为它寻求满足特定不等式的最大整数 $n$，并且由于时间复杂度函数在 $n  0$ 时是单调递增的，所以该问题有唯一解。语言客观且定量。没有矛盾或信息缺失。因此，该问题被认为是有效的。\n\n### 第 3 步：建立并求解控制不等式\n对于大小为 $n$ 的输入，算法的总执行时间记为 $\\tau_{exec}(n)$，是操作数量 $T(n)$ 与每个操作的时间 $\\tau_{step}$ 的乘积。\n$$\n\\tau_{exec}(n) = T(n) \\cdot \\tau_{step}\n$$\n问题要求此执行时间在每帧预算之内：\n$$\n\\tau_{exec}(n) \\le \\tau_{budget}\n$$\n代入 $T(n)$、$\\tau_{step}$ 和 $\\tau_{budget}$ 的给定表达式：\n$$\n(5n^2 + 100n) \\cdot \\tau_{step} \\le \\tau_{budget}\n$$\n在求解之前，我们必须确保所有单位一致。让我们将所有时间单位都转换为秒。\n- $\\tau_{budget} = 16 \\text{ ms} = 16 \\times 10^{-3} \\text{ s}$\n- $\\tau_{step} = 40 \\text{ ns} = 40 \\times 10^{-9} \\text{ s}$\n\n将这些值代入不等式：\n$$\n(5n^2 + 100n) \\cdot (40 \\times 10^{-9}) \\le 16 \\times 10^{-3}\n$$\n为了解出 $n$，我们首先分离出多项式项：\n$$\n5n^2 + 100n \\le \\frac{16 \\times 10^{-3}}{40 \\times 10^{-9}}\n$$\n$$\n5n^2 + 100n \\le \\frac{16}{40} \\times 10^{(-3 - (-9))}\n$$\n$$\n5n^2 + 100n \\le 0.4 \\times 10^6\n$$\n$$\n5n^2 + 100n \\le 400000\n$$\n为简化这个二次不等式，我们可以将所有项都除以 $5$：\n$$\nn^2 + 20n \\le 80000\n$$\n这可以重写为标准二次型：\n$$\nn^2 + 20n - 80000 \\le 0\n$$\n为了找到使该不等式成立的 $n$ 的范围，我们首先使用二次公式 $n = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$（其中 $a=1$，$b=20$，$c=-80000$）来求对应方程 $n^2 + 20n - 80000 = 0$ 的根。\n$$\nn = \\frac{-20 \\pm \\sqrt{20^2 - 4(1)(-80000)}}{2(1)}\n$$\n$$\nn = \\frac{-20 \\pm \\sqrt{400 + 320000}}{2}\n$$\n$$\nn = \\frac{-20 \\pm \\sqrt{320400}}{2}\n$$\n判别式的值计算为 $\\sqrt{320400} \\approx 566.038867$。\n两个根 $n_1$ 和 $n_2$ 分别是：\n$$\nn_1 = \\frac{-20 + 566.038867}{2} = \\frac{546.038867}{2} \\approx 273.0194\n$$\n$$\nn_2 = \\frac{-20 - 566.038867}{2} = \\frac{-586.038867}{2} \\approx -293.0194\n$$\n二次函数 $f(n) = n^2 + 20n - 80000$ 表示一个开口向上的抛物线。因此，不等式 $f(n) \\le 0$ 在两个根之间的 $n$ 值成立：\n$$\n-293.0194 \\le n \\le 273.0194\n$$\n由于输入大小 $n$ 必须是一个非负整数，我们有约束 $n \\ge 0$。将此与推导出的不等式结合，我们得到：\n$$\n0 \\le n \\le 273.0194\n$$\n满足此条件的最大整数 $n$ 值为 $273$。\n\n为了验证，我们可以计算 $n=273$ 时的执行时间：\n$T(273) = 5(273)^2 + 100(273) = 5(74529) + 27300 = 372645 + 27300 = 399945$ 次操作。\n$\\tau_{exec}(273) = 399945 \\times (40 \\times 10^{-9} \\text{ s}) = 15997800 \\times 10^{-9} \\text{ s} = 15.9978 \\text{ ms}$。这小于或等于 $16 \\text{ ms}$ 的预算。\n\n对于 $n=274$：\n$T(274) = 5(274)^2 + 100(274) = 5(75076) + 27400 = 375380 + 27400 = 402780$ 次操作。\n$\\tau_{exec}(274) = 402780 \\times (40 \\times 10^{-9} \\text{ s}) = 16111200 \\times 10^{-9} \\text{ s} = 16.1112 \\text{ ms}$。这超过了 $16 \\text{ ms}$ 的预算。\n\n因此，最大整数输入大小是 $273$。", "answer": "$$\\boxed{273}$$", "id": "3221840"}, {"introduction": "在算法设计中，我们常常需要在多个可行的方案中做出选择。虽然渐进符号（如 $O(n \\ln n)$ 和 $O(n^{1.5})$）告诉了我们当输入规模 $n$ 趋于无穷时哪个算法更优，但在实际应用中，我们处理的 $n$ 值往往是有限的。这个练习 [@problem_id:3221856] 将引导你探索“交叉点”的概念——即一个算法的性能超越另一个算法的精确输入规模。通过求解这个问题，你将深刻理解在实际决策中，常数因子和低阶项同样扮演着至关重要的角色。", "problem": "一个研究团队正在比较同一任务的两种实现。一种实现采用分治策略，其渐近增长属于大O表示法（Big-O）类 $O(n \\ln n)$；另一种则采用基于几何的分批策略，其渐近增长为 $O(n^{3/2})$。为了做出部署决策，他们将完整的步数函数（包括常数项和低阶项）建模如下：\n- 分治实现：$T_1(n) = 5\\,n \\ln n + 10\\bigl(1 - \\ln 2\\bigr)\\,n + 11$。\n- 分批实现：$T_2(n) = 5\\,n^{3/2} + 11$。\n\n此处，$n$ 表示输入规模，$\\ln$ 表示自然对数。\n\n根据精确交叉点输入规模 $n_0$ 是 $T_1(n) = T_2(n)$ 的正解这一基本定义，求出 $n_0$ 的精确闭式解。您的最终答案必须是一个精确值。请勿近似或四舍五入。", "solution": "题目要求找到精确的正交叉点输入规模 $n_0$，在该点上两种不同算法实现的步数函数相等。\n\n两个步数函数如下：\n1. 分治实现：$T_1(n) = 5\\,n \\ln n + 10\\bigl(1 - \\ln 2\\bigr)\\,n + 11$。\n2. 分批实现：$T_2(n) = 5\\,n^{3/2} + 11$。\n\n交叉点 $n_0$ 是方程 $T_1(n) = T_2(n)$ 的正解。我们首先建立这个等式：\n$$5\\,n \\ln n + 10\\bigl(1 - \\ln 2\\bigr)\\,n + 11 = 5\\,n^{3/2} + 11$$\n\n我们可以先从等式两边减去 $11$ 来简化方程：\n$$5\\,n \\ln n + 10\\bigl(1 - \\ln 2\\bigr)\\,n = 5\\,n^{3/2}$$\n\n变量 $n$ 代表输入规模，必须为正数，因此我们可以谨慎地假设 $n  0$。这允许我们将整个方程除以 $5n$ 而没有除以零的风险：\n$$\\frac{5\\,n \\ln n}{5n} + \\frac{10\\bigl(1 - \\ln 2\\bigr)\\,n}{5n} = \\frac{5\\,n^{3/2}}{5n}$$\n$$\\ln n + 2\\bigl(1 - \\ln 2\\bigr) = n^{3/2 - 1}$$\n$$\\ln n + 2 - 2 \\ln 2 = n^{1/2}$$\n\n为了方便求解这个超越方程，我们重新整理各项，将常数部分分离出来：\n$$n^{1/2} - \\ln n = 2 - 2 \\ln 2$$\n\n利用对数性质 $k \\ln x = \\ln(x^k)$，我们可以将 $2 \\ln 2$ 写成 $\\ln(2^2) = \\ln 4$。方程变为：\n$$n^{1/2} - \\ln n = 2 - \\ln 4$$\n\n为了分析这个方程，我们定义一个函数 $f(n)$，其中 $n0$：\n$$f(n) = n^{1/2} - \\ln n$$\n\n我们的目标是找到使 $f(n) = 2 - \\ln 4$ 成立的 $n$ 值。我们可以用微积分来分析 $f(n)$ 的行为以找到其极值。首先，我们计算 $f(n)$ 关于 $n$ 的导数：\n$$f'(n) = \\frac{d}{dn} \\left( n^{1/2} - \\ln n \\right) = \\frac{1}{2}n^{-1/2} - \\frac{1}{n} = \\frac{1}{2\\sqrt{n}} - \\frac{1}{n}$$\n\n为了找到临界点，我们将一阶导数设为零：\n$$f'(n) = 0$$\n$$\\frac{1}{2\\sqrt{n}} - \\frac{1}{n} = 0$$\n$$\\frac{1}{2\\sqrt{n}} = \\frac{1}{n}$$\n\n假设 $n \\neq 0$，我们可以交叉相乘得到：\n$$n = 2\\sqrt{n}$$\n\n为了解出 $n$，我们将方程两边平方。这是一个有效的步骤，因为 $n  0$ 意味着 $\\sqrt{n}$ 是实数且为正。\n$$n^2 = (2\\sqrt{n})^2$$\n$$n^2 = 4n$$\n$$n^2 - 4n = 0$$\n$$n(n - 4) = 0$$\n\n这得到两个可能的解：$n=0$ 和 $n=4$。由于我们函数 $f(n)$ 的定义域是 $n0$（因为当 $n \\le 0$ 时 $\\ln n$ 无定义），所以在有效定义域内唯一的临界点是 $n=4$。\n\n为了确定这个临界点的性质，我们采用二阶导数检验。$f(n)$ 的二阶导数是：\n$$f''(n) = \\frac{d}{dn} \\left( \\frac{1}{2}n^{-1/2} - n^{-1} \\right) = \\frac{1}{2}\\left(-\\frac{1}{2}\\right)n^{-3/2} - (-1)n^{-2} = -\\frac{1}{4}n^{-3/2} + n^{-2}$$\n\n现在，我们在临界点 $n=4$ 处计算 $f''(n)$ 的值：\n$$f''(4) = -\\frac{1}{4}(4)^{-3/2} + (4)^{-2} = -\\frac{1}{4(\\sqrt{4})^3} + \\frac{1}{16} = -\\frac{1}{4(2)^3} + \\frac{1}{16} = -\\frac{1}{4(8)} + \\frac{1}{16} = -\\frac{1}{32} + \\frac{2}{32} = \\frac{1}{32}$$\n\n由于 $f''(4) = \\frac{1}{32}  0$，函数 $f(n)$ 在 $n=4$ 处有一个局部最小值。因为这是定义域 $(0, \\infty)$ 内唯一的临界点，所以这个局部最小值也是函数的全局最小值。\n\n让我们在该最小值点 $n=4$ 处计算函数 $f(n)$ 的值：\n$$f(4) = (4)^{1/2} - \\ln 4 = 2 - \\ln 4$$\n\n我们观察到函数 $f(n)$ 的最小值恰好是我们方程 $f(n) = 2 - \\ln 4$ 中的常数项。这意味着该方程仅在函数达到其全局最小值的点上成立。\n\n因此，方程 $T_1(n) = T_2(n)$ 的唯一正解 $n_0$ 就是该最小值出现时的 $n$ 值。\n$$n_0 = 4$$", "answer": "$$\\boxed{4}$$", "id": "3221856"}, {"introduction": "最坏情况复杂度分析有时可能过于悲观，而平均情况分析又常常依赖于理想化的假设（例如，输入是完全随机的）。这个高级练习 [@problem_id:3221921] 引入了一种更精妙的混合模型，它同时考虑了典型的随机输入和恶意的对抗性输入。通过在这种更现实的混合场景下计算算法的期望成本，你将学会如何进行更细致的性能评估，从而更深入地理解算法在不可预测环境下的真实表现。", "problem": "考虑一个使用链表实现拉链法的哈希表，该哈希表有 $M$ 个桶。表中存储了 $n$ 个键，每个键是一个在有限字母表上长度为 $L$ 的固定长度字符串。成本模型如下：计算一个长度为 $L$ 的字符串的哈希值需要 $c_h \\cdot L$ 个基本步骤，而在遍历链表时，每次键比较需要 $c_c$ 个基本步骤。假设与哈希计算和键比较相比，指针解引用和链接遍历的成本可以忽略不计。\n\n定义以下混合输入分布，该分布模拟了典型行为和对抗性行为：\n\n- 以 $1 - \\alpha$ 的概率，哈希函数的行为符合均匀随机哈希（URH），即每个键被独立地分配到一个从 $\\{0, 1, \\dots, M-1\\}$ 中均匀随机选择的桶中。\n- 以 $\\alpha$ 的概率，一个对抗性哈希函数 $h_{\\mathrm{adv}}$ 将每个键都映射到同一个桶（不失一般性，设为桶 $0$）：对于所有字符串 $s$，都有 $h_{\\mathrm{adv}}(s) = 0$。\n\n假设表的尺寸设置为 $M = n$（负载因子为 $1$），并且一次查找查询会从已存储的键中均匀随机选择一个，并执行一次成功搜索。假设在任何链中，键的相对顺序等可能地是任何一种排列。\n\n设置混合参数为 $\\alpha = \\frac{1}{n}$。从期望值的基本定义和 URH 引起的桶占用情况出发，推导出在此混合分布下，一次成功查找所需的期望基本步骤数。结果需表示为关于 $n$、$L$、$c_h$ 和 $c_c$ 的闭式解析函数。\n\n您的最终答案必须是完全简化的精确表达式，不得进行四舍五入。", "solution": "用户希望我解决一个关于哈希表中成功查找的期望成本的问题。\n\n我的计划如下：\n1.  **验证问题陈述**：我将首先仔细检查问题是否存在任何逻辑、科学或结构上的缺陷。\n2.  **解构问题**：我将根据所提供的混合模型，将期望成本的计算分解为其组成部分。\n3.  **分别求解**：我将分别计算均匀随机哈希（URH）场景和对抗性场景下的期望成本。\n4.  **合并与简化**：我将使用全期望定律合并结果，并简化最终的表达式。\n\n### 步骤 1：提取已知条件\n- 数据结构：使用链表实现拉链法的哈希表。\n- 桶（槽）的数量：$M$。\n- 键的数量：$n$。\n- 键结构：长度为 $L$ 的固定长度字符串。\n- 成本模型：\n    - 哈希一个长度为 $L$ 的字符串的成本：$c_h \\cdot L$。\n    - 一次键比较的成本：$c_c$。\n- 哈希函数行为（混合模型）：\n    - 以 $1 - \\alpha$ 的概率：哈希函数是均匀随机哈希函数（URH），每个键被均匀且独立地映射到 $\\{0, 1, \\dots, M-1\\}$ 中的一个桶。\n    - 以 $\\alpha$ 的概率：哈希函数是对抗性的（$h_{\\mathrm{adv}}$），将所有键映射到桶 $0$。\n- 表的尺寸：$M = n$。\n- 查询模型：对从 $n$ 个已存储键中均匀随机选择的一个键进行成功搜索。\n- 链内排序：任何给定链中键的相对顺序等可能地是任何一种排列。\n- 混合参数值：$\\alpha = \\frac{1}{n}$。\n\n### 步骤 2：使用提取的已知条件进行验证\n- **科学依据（关键）**：该问题植根于算法分析的标准理论框架，特别是关于哈希的理论。拉链法、均匀随机哈希、对抗性模型和成本分析等概念在计算机科学中都是标准且成熟的。该问题在科学上是合理的。\n- **良态**：问题定义清晰，并提供了推导解决方案所需的所有信息。数据结构、成本模型、输入分布（通过混合模型）和查询类型都得到了明确的规定。存在一个唯一的、有意义的解。\n- **客观性（关键）**：问题以精确、客观的数学语言陈述，没有任何主观性或歧义。\n\n额外检查：\n- **不完整或矛盾的设置**：问题是自洽的，没有矛盾。约束条件 $M=n$ 和 $\\alpha = 1/n$ 的值与设置一致。\n- **不现实或不可行**：该场景是一个理论模型，但在其定义的上下文中并非物理上不可能或科学上不可信。\n- **病态或结构不良**：结构清晰，导向一个可推导的单一量。\n- 所有其他有效问题的标准均已满足。\n\n### 步骤 3：结论与行动\n该问题被判定为**有效**。我将继续推导解决方案。\n\n### 求解过程\n\n令 $C$ 为一次成功查找所需的总基本步骤数的随机变量。总成本是哈希成本 $C_{\\text{hash}}$ 和比较成本 $C_{\\text{comp}}$ 的和。\n$$C = C_{\\text{hash}} + C_{\\text{comp}}$$\n计算一个长度为 $L$ 的键的哈希成本被指定为 $c_h L$。无论哪种哈希函数（URH 或对抗性）生效，每次查找都会产生这个成本。因此，期望哈希成本是恒定的：\n$$E[C_{\\text{hash}}] = c_h L$$\n总期望成本是：\n$$E[C] = E[C_{\\text{hash}}] + E[C_{\\text{comp}}] = c_h L + E[C_{\\text{comp}}]$$\n我们需要求出期望比较成本 $E[C_{\\text{comp}}]$。我们根据哈希函数的混合模型，使用全期望定律：\n$$E[C_{\\text{comp}}] = P(\\text{URH}) \\cdot E[C_{\\text{comp}} | \\text{URH}] + P(\\text{adv}) \\cdot E[C_{\\text{comp}} | \\text{adv}]$$\n给定 $P(\\text{URH}) = 1 - \\alpha$ 和 $P(\\text{adv}) = \\alpha$，这变为：\n$$E[C_{\\text{comp}}] = (1 - \\alpha) E[C_{\\text{comp}} | \\text{URH}] + \\alpha E[C_{\\text{comp}} | \\text{adv}]$$\n\n我们现在将分别计算每种情况下的期望比较成本。\n\n**1. 均匀随机哈希下的期望比较成本 ($E[C_{\\text{comp}} | \\text{URH}]$)**\n\n对于一次成功搜索，我们查找的是从 $n$ 个键中均匀随机选择的一个。令 $N_j$ 为哈希到桶 $j$ 的键的数量。由于任何链中的键都是随机排列的，找到桶 $j$ 中所有 $N_j$ 个键各一次所需的总比较次数为 $c_c \\cdot (1 + 2 + \\dots + N_j) = c_c \\frac{N_j(N_j+1)}{2}$。\n找到表中所有 $n$ 个键的总比较次数是所有桶的总和：$\\sum_{j=0}^{M-1} c_c \\frac{N_j(N_j+1)}{2}$。\n由于搜索查询是针对一个均匀随机的键，期望比较次数是这个总成本的期望值除以 $n$：\n$$E[C_{\\text{comp}} | \\text{URH}] = E\\left[ \\frac{1}{n} \\sum_{j=0}^{M-1} c_c \\frac{N_j(N_j+1)}{2} \\right]$$\n根据期望的线性性：\n$$E[C_{\\text{comp}} | \\text{URH}] = \\frac{c_c}{2n} \\sum_{j=0}^{M-1} E[N_j^2 + N_j] = \\frac{c_c}{2n} \\sum_{j=0}^{M-1} (E[N_j^2] + E[N_j])$$\n在 URH 条件下，落入桶 $j$ 的键的数量 $N_j$ 服从二项分布 $N_j \\sim \\text{Bin}(n, p=\\frac{1}{M})$。\n其期望和方差为 $E[N_j] = np = \\frac{n}{M}$ 和 $\\text{Var}(N_j) = np(1-p) = \\frac{n}{M}(1-\\frac{1}{M})$。\n从关系式 $\\text{Var}(N_j) = E[N_j^2] - (E[N_j])^2$ 中，我们求出 $E[N_j^2]$：\n$$E[N_j^2] = \\text{Var}(N_j) + (E[N_j])^2 = \\frac{n}{M}\\left(1-\\frac{1}{M}\\right) + \\left(\\frac{n}{M}\\right)^2 = \\frac{n}{M} - \\frac{n}{M^2} + \\frac{n^2}{M^2}$$\n将这些代入求和式中：\n$$ \\sum_{j=0}^{M-1} (E[N_j^2] + E[N_j]) = \\sum_{j=0}^{M-1} \\left( \\left(\\frac{n}{M} - \\frac{n}{M^2} + \\frac{n^2}{M^2}\\right) + \\frac{n}{M} \\right) $$\n由于这一项对于所有 $M$ 个桶都是相同的：\n$$ = M \\left( \\frac{2n}{M} - \\frac{n}{M^2} + \\frac{n^2}{M^2} \\right) = 2n - \\frac{n}{M} + \\frac{n^2}{M} = 2n + \\frac{n(n-1)}{M} $$\n现在，我们将其代回 $E[C_{\\text{comp}} | \\text{URH}]$ 的表达式中：\n$$E[C_{\\text{comp}} | \\text{URH}] = \\frac{c_c}{2n} \\left( 2n + \\frac{n(n-1)}{M} \\right) = c_c \\left( 1 + \\frac{n-1}{2M} \\right)$$\n使用问题的约束条件 $M=n$：\n$$E[C_{\\text{comp}} | \\text{URH}] = c_c \\left( 1 + \\frac{n-1}{2n} \\right) = c_c \\left( \\frac{2n + n - 1}{2n} \\right) = c_c \\left( \\frac{3n-1}{2n} \\right)$$\n\n**2. 对抗性哈希下的期望比较成本 ($E[C_{\\text{comp}} | \\text{adv}]$)**\n\n在对抗性情况下，所有 $n$ 个键都被哈希到同一个桶（桶 $0$）。这形成了一个长度为 $n$ 的单链表。搜索是针对这 $n$ 个键中的一个均匀随机选择的键。由于键是随机排列的，所需键的位置在 $\\{1, 2, \\dots, n\\}$ 中是均匀分布的。\n期望比较次数是 $c_c$ 乘以期望位置：\n$$E[C_{\\text{comp}} | \\text{adv}] = c_c \\cdot E[\\text{position}] = c_c \\cdot \\left(\\frac{1}{n} \\sum_{i=1}^n i\\right) = c_c \\cdot \\left(\\frac{1}{n} \\frac{n(n+1)}{2}\\right) = c_c \\frac{n+1}{2}$$\n\n**3. 合并结果**\n\n现在我们使用混合参数 $\\alpha = \\frac{1}{n}$ 来合并两种情况。\n$E[C_{\\text{comp}}] = \\left(1 - \\frac{1}{n}\\right) E[C_{\\text{comp}} | \\text{URH}] + \\frac{1}{n} E[C_{\\text{comp}} | \\text{adv}]$\n$E[C_{\\text{comp}}] = \\left(\\frac{n-1}{n}\\right) c_c \\left(\\frac{3n-1}{2n}\\right) + \\frac{1}{n} c_c \\left(\\frac{n+1}{2}\\right)$\n$E[C_{\\text{comp}}] = c_c \\left[ \\frac{(n-1)(3n-1)}{2n^2} + \\frac{n+1}{2n} \\right]$\n为了合并这些项，我们使用公分母 $2n^2$：\n$E[C_{\\text{comp}}] = c_c \\left[ \\frac{3n^2 - 3n - n + 1}{2n^2} + \\frac{n(n+1)}{2n^2} \\right]$\n$E[C_{\\text{comp}}] = c_c \\left[ \\frac{3n^2 - 4n + 1}{2n^2} + \\frac{n^2 + n}{2n^2} \\right]$\n$E[C_{\\text{comp}}] = c_c \\left[ \\frac{(3n^2 - 4n + 1) + (n^2 + n)}{2n^2} \\right]$\n$E[C_{\\text{comp}}] = c_c \\left[ \\frac{4n^2 - 3n + 1}{2n^2} \\right]$\n这个表达式可以通过将分子中的每一项除以分母来简化：\n$E[C_{\\text{comp}}] = c_c \\left( \\frac{4n^2}{2n^2} - \\frac{3n}{2n^2} + \\frac{1}{2n^2} \\right) = c_c \\left( 2 - \\frac{3}{2n} + \\frac{1}{2n^2} \\right)$\n\n**4. 总期望成本的最终表达式**\n\n最后，总期望成本 $E[C]$ 是期望哈希成本和期望比较成本的和：\n$$E[C] = c_h L + c_c \\left( 2 - \\frac{3}{2n} + \\frac{1}{2n^2} \\right)$$\n这是最终的、完全简化的、闭式解析函数。", "answer": "$$\n\\boxed{c_h L + c_c \\left( 2 - \\frac{3}{2n} + \\frac{1}{2n^2} \\right)}\n$$", "id": "3221921"}]}