{"hands_on_practices": [{"introduction": "关于任何随机过程，一个基本问题是它返回其起点的倾向。这个练习 [@problem_id:2425131] 深入探讨了简单对称随机游走中的这一概念，要求计算在特定时间首次返回的概率。通过解决这个问题，你将应用组合计数和反射原理来揭示一维随机游走的一个关键特性。", "problem": "考虑一个简化的市场微观结构模型，其中中间价在离散时间内变动，每一步以相等的概率向上或向下变动一个单位价格，且各步之间相互独立。设 $\\{X_{k}\\}_{k \\geq 1}$ 为独立同分布的随机变量，满足 $\\mathbb{P}(X_{k}=1)=\\mathbb{P}(X_{k}=-1)=\\tfrac{1}{2}$，并定义对称一维随机游走 $S_{0}=0$ 及 $S_{n}=\\sum_{k=1}^{n} X_{k}$（对于 $n \\geq 1$）。定义首次返回到起始水平的时间为 $\\tau=\\min\\{k \\geq 1 : S_{k}=0\\}$。对于一个固定的正整数 $n$，计算概率 $\\mathbb{P}(\\tau=2n)$，并将其表示为 $n$ 的一个闭式函数。将最终答案表示为关于 $n$ 的单个解析表达式。无需进行四舍五入。", "solution": "我们从对称简单随机游走的定义开始。长度为 $2n$ 的路径由序列 $(X_{1},\\dots,X_{2n})$ 决定，其中每个元素都在 $\\{-1,1\\}$ 中，且每个这样的序列的概率为 $2^{-2n}$。事件 $\\{\\tau=2n\\}$ 是指 $S_{2n}=0$ 且对于所有 $1 \\leq k \\leq 2n-1$ 都有 $S_{k} \\neq 0$。因为 $S_{k}$ 与 $k$ 具有相同的奇偶性，所以返回到 $0$ 只能在偶数时刻发生，因此，关注 $2n$ 是很自然的。\n\n为了计算实现 $\\{\\tau=2n\\}$ 的序列数量，我们首先根据第一步的符号进行分类。根据对称性，以 $X_{1}=1$ 开始的有效路径数等于以 $X_{1}=-1$ 开始的有效路径数。因此，我们只需计算以 $X_{1}=1$ 开始、以 $X_{2n}=-1$ 结束，且在此期间保持严格为正的有效路径数，然后乘以 $2$ 即可。\n\n考虑满足 $X_{1}=1$，$X_{2n}=-1$，且对所有 $1 \\leq k \\leq 2n-1$ 都有 $S_{k} \\geq 1$ 的路径。去掉第一步和最后一步，对于剩下的 $2n-2$ 步，通过向下平移 $1$ 个单位来定义一个变换后的路径：令 $Y_{j}=S_{j+1}-1$，其中 $j=0,1,\\dots,2n-2$，满足 $Y_{0}=0$ 和 $Y_{2n-2}=0$。条件 $S_{k} \\geq 1$（对于 $1 \\leq k \\leq 2n-1$）变为 $Y_{j} \\geq 0$（对于所有 $0 \\leq j \\leq 2n-2$）。因此，变换后的路径是长度为 $2n-2$ 的戴克路径(Dyck path)，即一条在整数上从 $0$ 开始到 $0$ 结束且从不低于 $0$ 的最近邻路径。此类戴克路径的数量是卡特兰数 $C_{n-1}$，其中\n$$\nC_{n-1}=\\frac{1}{n}\\binom{2n-2}{n-1}.\n$$\n根据对称性，以 $X_{1}=-1$ 开始，在时刻 $2n-1$ 之前保持严格为负（然后在时刻 $2n$ 步进到 $0$）的有效路径数也是 $C_{n-1}$。因此，实现 $\\{\\tau=2n\\}$ 的序列总数为 $2 C_{n-1}$。\n\n由于每个序列的概率为 $2^{-2n}$，我们得到\n$$\n\\mathbb{P}(\\tau=2n)=\\frac{2 C_{n-1}}{2^{2n}}=\\frac{2}{2^{2n}}\\cdot \\frac{1}{n}\\binom{2n-2}{n-1}.\n$$\n这可以通过代数方法简化为中心二项式形式。使用恒等式\n$$\n\\frac{2}{n}\\binom{2n-2}{n-1}=\\frac{1}{2n-1}\\binom{2n}{n},\n$$\n我们得出结论\n$$\n\\mathbb{P}(\\tau=2n)=\\frac{1}{2n-1}\\binom{2n}{n} 2^{-2n}.\n$$\n这就是所求的以 $n$ 表示的闭式表达式。", "answer": "$$\\boxed{\\frac{1}{2n-1}\\binom{2n}{n}2^{-2n}}$$", "id": "2425131"}, {"introduction": "在掌握了随机游走的基本原理之后，我们可以将此模型应用于金融领域，来为金融工具估值。这个问题 [@problem_id:2425167] 要求你为一种常见的衍生证券——“障碍期权”——定价，方法是将标的资产建模为一个带有吸收壁的随机游走。解决此问题需要运用“一步分析法”来构建一个差分方程，为风险中性定价在离散时间模型中的应用提供了一个强有力的实践范例。", "problem": "考虑一个状态变量 $X_{t}$ 的离散时间模型，该变量在一个有限格点 $\\{0,1,2,\\dots,H\\}$ 上进行一维随机游走，其中 $H \\in \\mathbb{N}$ 且 $H \\geq 2$。该过程从 $X_{0} = i$ 开始，其中 $i \\in \\{1,2,\\dots,H-1\\}$，并根据以下内部状态的转移概率进行演化：\n- $\\mathbb{P}(X_{t+1} = x+1 \\mid X_{t} = x) = p$,\n- $\\mathbb{P}(X_{t+1} = x-1 \\mid X_{t} = x) = 1-p$,\n对所有 $x \\in \\{1,2,\\dots,H-1\\}$ 成立，其中 $p \\in (0,1)$。边界状态 $0$ 和 $H$ 是吸收态：一旦 $X_{t}$ 到达 $0$ 或 $H$，它将停留在那里。\n\n设每期无风险总回报为 $1+r$，其中 $r > 0$，并定义折现因子 $\\beta \\equiv (1+r)^{-1} \\in (0,1)$。根据风险中性定价原理，任何支付的0时刻价格是在风险中性测度下该支付的折现期望。\n\n定义停时 $\\tau_{H} \\equiv \\inf\\{t \\geq 0 : X_{t} = H\\}$ 和 $\\tau_{0} \\equiv \\inf\\{t \\geq 0 : X_{t} = 0\\}$。考虑一个向上敲入数字障碍期权，该期权在首次触碰上边界 $H$ 时支付1个记账单位，否则支付0。精确地说，当初始状态为 $X_{0}=i$ 时，其0时刻的价值为\n$$\nV(i) \\equiv \\mathbb{E}_{i}\\big[\\beta^{\\tau_{H}} \\mathbf{1}_{\\{\\tau_{H}  \\tau_{0}\\}}\\big],\n$$\n其中 $\\mathbb{E}_{i}[\\cdot]$ 表示在 $X_{0}=i$ 条件下的期望。\n\n从风险中性定价原理、$X_{t}$ 的马尔可夫性质和首步分析法（不使用现成公式）出发，推导 $V(i)$ 作为 $H$、$i$、$p$ 和 $\\beta$ 的函数的闭式表达式。你的最终答案必须是关于这些参数的单一闭式解析表达式。不要提供不等式或待解方程；请提供显式表达式。无需四舍五入。", "solution": "期权的价值 $V(i)$ 定义为在初始状态 $X_{0}=i$ 的条件下，支付的折现期望值：\n$$\nV(i) = \\mathbb{E}_{i}\\big[\\beta^{\\tau_{H}} \\mathbf{1}_{\\{\\tau_{H}  \\tau_{0}\\}}\\big]\n$$\n此处，$\\tau_{H}$ 和 $\\tau_{0}$ 分别是首次触碰上边界 $H$ 和下边界 $0$ 的时间。状态空间为 $\\{0, 1, \\dots, H\\}$。状态 $0$ 和 $H$ 是吸收态。\n\n$V(i)$ 的边界条件由吸收态的性质决定：\n1. 如果过程从 $i=0$ 开始，它会立即被吸收。因此 $\\tau_{0}=0$ 且 $\\tau_{H}$ 必须大于 $0$。条件 $\\tau_{H}  \\tau_{0}$ 不被满足，因此支付为 $0$。所以，$V(0)=0$。\n2. 如果过程从 $i=H$ 开始，它会立即被吸收。因此 $\\tau_{H}=0$。下边界尚未被触碰，所以 $\\tau_{0}  0$。条件 $\\tau_{H}  \\tau_{0}$ 被满足。支付在时间 $t=0$ 实现，所以折现值为 $\\beta^{0} \\cdot 1 = 1$。因此，$V(H)=1$。\n\n对于任何内部状态 $i \\in \\{1, 2, \\dots, H-1\\}$，我们可以利用全期望定律和过程 $X_{t}$ 的马尔可夫性质，应用首步分析法。我们将期望以第一步（从 $t=0$ 到 $t=1$）的结果为条件：\n$$\nV(i) = \\mathbb{E}_{i}\\left[ \\mathbb{E}\\left[ \\beta^{\\tau_{H}} \\mathbf{1}_{\\{\\tau_{H}  \\tau_{0}\\}} \\mid X_1 \\right] \\right]\n$$\n在时间 $t=1$ 时，过程将以概率 $p$ 处于状态 $i+1$，或以概率 $1-p$ 处于状态 $i-1$。\n如果 $X_{1}=i+1$，则一个时间步已经过去。从这一点开始寻找折现期望支付的问题，与从状态 $i+1$ 开始的原始问题相同，但所有未来的支付都必须再乘以一个折现因子 $\\beta$。因此，该价值为 $\\beta V(i+1)$。\n类似地，如果 $X_{1}=i-1$，则后续的价值为 $\\beta V(i-1)$。\n\n结合这些可能性，我们得到关于 $V(i)$ 的以下二阶线性齐次差分方程：\n$$\nV(i) = p \\cdot (\\beta V(i+1)) + (1-p) \\cdot (\\beta V(i-1))\n$$\n这可以改写为：\n$$\np\\beta V(i+1) - V(i) + (1-p)\\beta V(i-1) = 0\n$$\n对 $i \\in \\{1, 2, \\dots, H-1\\}$ 成立。\n\n为了解此递推关系，我们假设解的形式为 $V(i) = \\lambda^{i}$。将此形式代入方程，得到特征方程：\n$$\np\\beta \\lambda^{i+1} - \\lambda^{i} + (1-p)\\beta \\lambda^{i-1} = 0\n$$\n假设 $\\lambda \\neq 0$，两边同除以 $\\lambda^{i-1}$ 得到关于 $\\lambda$ 的二次方程：\n$$\np\\beta \\lambda^2 - \\lambda + (1-p)\\beta = 0\n$$\n该二次方程的根由求根公式给出：\n$$\n\\lambda_{1,2} = \\frac{1 \\pm \\sqrt{1 - 4(p\\beta)((1-p)\\beta)}}{2p\\beta} = \\frac{1 \\pm \\sqrt{1 - 4p(1-p)\\beta^2}}{2p\\beta}\n$$\n已知 $p \\in (0,1)$ 和 $\\beta \\in (0,1)$，则项 $p(1-p)$ 的范围是 $0  p(1-p) \\leq \\frac{1}{4}$，且 $\\beta^2 \\in (0,1)$。因此，判别式 $1 - 4p(1-p)\\beta^2$ 严格大于0且小于1。这确保了存在两个不同的实根 $\\lambda_1$ 和 $\\lambda_2$。\n\n该差分方程的通解是这些根的幂的线性组合：\n$$\nV(i) = c_1 \\lambda_1^i + c_2 \\lambda_2^i\n$$\n其中 $c_1$ 和 $c_2$ 是由边界条件决定的常数。\n令 $\\lambda_1$ 为带加号的根，$\\lambda_2$ 为带减号的根。\n使用边界条件 $V(0)=0$：\n$$\nV(0) = c_1 \\lambda_1^0 + c_2 \\lambda_2^0 = c_1 + c_2 = 0 \\implies c_2 = -c_1\n$$\n这将通解简化为：\n$$\nV(i) = c_1 (\\lambda_1^i - \\lambda_2^i)\n$$\n现在，我们应用第二个边界条件 $V(H)=1$：\n$$\nV(H) = c_1 (\\lambda_1^H - \\lambda_2^H) = 1\n$$\n由于 $\\lambda_1 \\neq \\lambda_2$ 且两者均为正，对于 $H \\ge 1$ 有 $\\lambda_1^H - \\lambda_2^H \\neq 0$。我们可以解出 $c_1$：\n$$\nc_1 = \\frac{1}{\\lambda_1^H - \\lambda_2^H}\n$$\n将 $c_1$ 代回到 $V(i)$ 的表达式中，我们得到最终的闭式解：\n$$\nV(i) = \\frac{\\lambda_1^i - \\lambda_2^i}{\\lambda_1^H - \\lambda_2^H}\n$$\n代入根 $\\lambda_1$ 和 $\\lambda_2$ 的表达式，我们就得到了 $V(i)$ 作为 $H, i, p$ 和 $\\beta$ 的函数的显式解。", "answer": "$$\n\\boxed{\\frac{\\left(\\frac{1 + \\sqrt{1 - 4p(1-p)\\beta^2}}{2p\\beta}\\right)^{i} - \\left(\\frac{1 - \\sqrt{1 - 4p(1-p)\\beta^2}}{2p\\beta}\\right)^{i}}{\\left(\\frac{1 + \\sqrt{1 - 4p(1-p)\\beta^2}}{2p\\beta}\\right)^{H} - \\left(\\frac{1 - \\sqrt{1 - 4p(1-p)\\beta^2}}{2p\\beta}\\right)^{H}}}\n$$", "id": "2425167"}, {"introduction": "虽然简单的随机游走是基础，但现实世界的现象通常需要更复杂的模型，而这些模型可能没有封闭解。这个问题 [@problem_id:2425171] 介绍了一种连续时间随机游走，其中事件之间的时间间隔遵循幂律分布，这是在许多金融系统中观察到的特征。通过从零开始构建一个蒙特卡洛模拟，你将学会如何分析这些在解析上难以处理的复杂过程，并估计期望值和事件概率等重要指标，这是计算金融领域的一项核心技能。", "problem": "考虑一个在对数空间中建模的资产价格的连续时间随机游走。设 $\\{T_n\\}_{n \\ge 0}$ 为随机交易时间序列，其中 $T_0 = 0$ 且 $T_n = \\sum_{i=1}^n \\tau_i$。在此，等待时间 $\\{\\tau_i\\}_{i \\ge 1}$ 是具有幂律尾的独立同分布正随机变量。具体来说，假设 $\\tau_i$ 服从Lomax（Pareto II型）分布，其形状参数为 $\\alpha  0$，尺度参数为 $t_0  0$，其累积分布函数在 $t  0$ 时为 $F_{\\tau}(t) = 1 - (1 + t/t_0)^{-\\alpha}$。在每个交易时间 $T_n$，对数价格发生一次跳跃，跳跃量为 $Y_n$，其中 $\\{Y_n\\}_{n \\ge 1}$ 是独立同分布的，并且与等待时间相互独立。假设 $Y_n \\sim \\mathcal{N}(\\mu_J,\\sigma_J^2)$，即均值为 $\\mu_J$、方差为 $\\sigma_J^2$ 的正态分布。将时间范围 $T$ 内的交易次数定义为 $N(T) = \\max\\{n \\ge 0: T_n \\le T\\}$。那么，在时间 $T$ 的对数价格为 $X(T) = \\sum_{n=1}^{N(T)} Y_n$，价格为 $S(T) = S_0 \\exp(X(T))$，其中 $S_0  0$ 是初始价格。为进行风险事件分析，定义在一次交易中发生不利跳跃事件，如果其单期总回报满足 $\\exp(Y_n) \\le 1 - \\theta$，其中阈值为 $\\theta \\in (0,1)$。等价地，如果 $Y_n \\le \\ln(1-\\theta)$，则发生一次不利跳跃。在时间范围 $[0,T]$ 内我们关注的事件是，在 $N(T)$ 次跳跃中至少发生一次不利跳跃。\n\n您必须仅从上述基本定义出发，实现一个模拟程序，为每组参数生成以下数量的蒙特卡洛估计值：\n- 预期交易次数 $E[N(T)]$。\n- 预期终端价格 $E[S(T)]$。\n- 在 $[0,T]$ 范围内至少发生一次不利跳跃的概率，即 $\\mathbb{P}(\\exists n \\le N(T): Y_n \\le \\ln(1-\\theta))$。\n\n对等待时间使用逆变换采样法（从给定的累积分布函数推导出逆变换，不使用任何现成的快捷公式），并模拟路径直到超出时间范围 $T$。对于每条路径，从时间 $0$ 和价格 $S(0)=S_0$ 开始，并保持跳跃之间的价格恒定。将所有数量视为无单位。如果您使用任何与百分比相关的概率，必须将其表示为小数（例如，使用 $0.05$ 而非 $5\\%$）。\n\n测试套件和要求输出：\n- 对于每个测试用例 $k \\in \\{1,2,3\\}$，使用一个以 $123456 + k - 1$ 为种子的独立伪随机数生成器。\n- 对于每个测试用例，精确模拟 $M$ 条独立路径，并计算上述三个数量的蒙特卡洛估计值。\n- 您的程序必须生成单行输出，其中包含一个由方括号括起来的、逗号分隔的九个浮点数列表，顺序为 $[E[N_1],E[S_1],p_1,E[N_2],E[S_2],p_2,E[N_3],E[S_3],p_3]$，其中 $E[N_k]$ 是用例 $k$ 的预期交易次数的估计值，$E[S_k]$ 是用例 $k$ 的预期终端价格的估计值，$p_k$ 是用例 $k$ 的至少发生一次不利跳跃的概率的估计值。\n- 将每个报告的数字四舍五入到 $6$ 位小数。输出中不要包含任何空格。\n\n使用以下参数集（符号 $M$ 表示该用例的蒙特卡洛路径数）：\n- 用例 1：$T=10.0$, $S_0=100.0$, $t_0=1.0$, $\\alpha=1.5$, $\\mu_J=0.0$, $\\sigma_J=0.02$, $\\theta=0.05$, $M=3000$。\n- 用例 2：$T=10.0$, $S_0=100.0$, $t_0=1.0$, $\\alpha=0.7$, $\\mu_J=0.0$, $\\sigma_J=0.02$, $\\theta=0.05$, $M=3000$。\n- 用例 3：$T=10.0$, $S_0=100.0$, $t_0=0.5$, $\\alpha=3.0$, $\\mu_J=-0.0002$, $\\sigma_J=0.01$, $\\theta=0.02$, $M=3000$。\n\n您的程序必须仅使用所提供的定义来实现模拟（不使用更新计数的任何封闭形式快捷方式），必须是自包含的，无任何输入，并且必须仅按指定格式打印所需的单行。请确保您的实现能够处理 $\\alpha \\le 1$ 的情况，此时 $E[\\tau_i]=\\infty$，不要依赖任何基于均值的近似，而是通过直接模拟直到 $T$ 的更新过程来处理。", "solution": "我们接下来构建一个基于蒙特卡洛模拟的解决方案。对于我们关心的数量，特别是更新次数 $N(T)$ 的分布，其解析解通常是难以处理的，尤其是当等待时间服从Lomax分布且形状参数 $\\alpha \\le 1$ 时，这对应于无限的平均等待时间。\n\n该模拟需要从两个分布中生成随机变量：用于等待时间 $\\{\\tau_i\\}$ 的Lomax分布和用于对数价格跳跃 $\\{Y_n\\}$ 的正态分布。\n\n首先，我们推导Lomax分布的逆变换采样公式。其累积分布函数（CDF）在 $t > 0$ 时给出为 $F_{\\tau}(t) = 1 - (1 + t/t_0)^{-\\alpha}$。为了找到分位数函数 $F_{\\tau}^{-1}(u)$，我们设 $u = F_{\\tau}(t)$，其中 $u$ 是从均匀分布 $U(0,1)$ 中抽取的随机变量，然后解出 $t$：\n$$u = 1 - \\left(1 + \\frac{t}{t_0}\\right)^{-\\alpha}$$\n$$1 - u = \\left(1 + \\frac{t}{t_0}\\right)^{-\\alpha}$$\n两边取 $-1/\\alpha$ 次方：\n$$(1 - u)^{-1/\\alpha} = 1 + \\frac{t}{t_0}$$\n$$t = t_0 \\left( (1 - u)^{-1/\\alpha} - 1 \\right)$$\n由于 $u$ 是从 $U(0,1)$ 中抽取的，随机变量 $u' = 1 - u$ 也服从 $U(0,1)$ 分布。因此，我们可以通过生成一个均匀随机数 $u' \\in (0,1)$ 并应用以下变换来生成一个服从Lomax分布的等待时间 $\\tau$：\n$$\\tau = t_0 \\left( (u')^{-1/\\alpha} - 1 \\right)$$\n\n其次，对数价格跳跃 $Y_n$ 从正态分布 $Y_n \\sim \\mathcal{N}(\\mu_J, \\sigma_J^2)$ 中抽取。这些可以使用标准的数值库函数生成。\n\n蒙特卡洛模拟通过为每个参数集生成 $M$ 条独立的样本路径来进行。对于每条由 $k \\in \\{1, 2, \\dots, M\\}$ 索引的路径，我们模拟该过程直至时间范围 $T$。\n\n单条路径 $k$ 的算法如下：\n1.  初始化状态变量：当前时间 $t_{curr} = 0$，交易次数 $n_k = 0$，累积对数价格 $x_k = 0$，以及不利跳跃事件的指示符 $a_k = 0$。\n2.  定义不利跳跃阈值 $y_{crit} = \\ln(1 - \\theta)$。如果一次跳跃 $Y_i \\le y_{crit}$，则发生不利事件。\n3.  开始一个由 $i = 1, 2, \\dots$ 索引的迭代循环：\n    a. 使用上面推导的逆变换公式生成一个等待时间 $\\tau_i$。\n    b. 检查下一次交易时间是否会超过时间范围：如果 $t_{curr} + \\tau_i  T$，则此路径的模拟终止。此路径的最终数量为 $N(T)_k = n_k$ 次交易，累积对数价格为 $X(T)_k = x_k$，以及不利事件指示符 $a_k$。\n    c. 如果路径不终止，更新当前时间：$t_{curr} \\leftarrow t_{curr} + \\tau_i$。\n    d. 发生一次交易。增加交易计数：$n_k \\leftarrow n_k + 1$。\n    e. 生成一个对数价格跳跃 $Y_i \\sim \\mathcal{N}(\\mu_J, \\sigma_J^2)$。\n    f. 更新累积对数价格：$x_k \\leftarrow x_k + Y_i$。\n    g. 检查是否发生不利事件。如果 $Y_i \\le y_{crit}$，则设置指示符 $a_k = 1$。一旦设置，此指示符在路径的剩余部分中不再改变。\n4.  循环继续，直到满足步骤3b中的条件。\n\n此模拟过程正确地处理了平均等待时间为无限的情况（即当 $\\alpha \\le 1$ 时），因为它直接从指定的分布生成等待时间，而不依赖其矩。\n\n在模拟 $M$ 条路径后，通过取所有路径结果的样本均值来估计我们关心的数量：\n- 预期交易次数估计为 $\\hat{E}[N(T)] = \\frac{1}{M} \\sum_{k=1}^M N(T)_k$。\n- 路径 $k$ 的终端价格为 $S(T)_k = S_0 \\exp(X(T)_k)$。预期终端价格估计为 $\\hat{E}[S(T)] = \\frac{1}{M} \\sum_{k=1}^M S_0 \\exp(X(T)_k)$。\n- 至少发生一次不利跳跃的概率估计为 $\\hat{p} = \\frac{1}{M} \\sum_{k=1}^M a_k$。\n\n对于三个测试用例中的每一个，都使用伪随机数生成器的不同种子执行此完整过程，以确保试验的独立性。然后按要求格式化最终结果。", "answer": "```python\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Solves the problem by running Monte Carlo simulations for the given test cases.\n    \"\"\"\n    test_cases = [\n        {'case_id': 1, 'T': 10.0, 'S0': 100.0, 't0': 1.0, 'alpha': 1.5, 'mu_J': 0.0, 'sigma_J': 0.02, 'theta': 0.05, 'M': 3000},\n        {'case_id': 2, 'T': 10.0, 'S0': 100.0, 't0': 1.0, 'alpha': 0.7, 'mu_J': 0.0, 'sigma_J': 0.02, 'theta': 0.05, 'M': 3000},\n        {'case_id': 3, 'T': 10.0, 'S0': 100.0, 't0': 0.5, 'alpha': 3.0, 'mu_J': -0.0002, 'sigma_J': 0.01, 'theta': 0.02, 'M': 3000},\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        # Unpack parameters\n        seed = 123456 + case['case_id'] - 1\n        T = case['T']\n        S0 = case['S0']\n        t0 = case['t0']\n        alpha = case['alpha']\n        mu_J = case['mu_J']\n        sigma_J = case['sigma_J']\n        theta = case['theta']\n        M = case['M']\n\n        # Initialize a dedicated random number generator for this case\n        rng = np.random.default_rng(seed)\n\n        # Pre-calculate the adverse jump threshold\n        y_crit = math.log(1.0 - theta)\n\n        # Accumulators for Monte Carlo estimates\n        total_num_trades = 0\n        total_terminal_price = 0.0\n        paths_with_adverse_event = 0\n\n        for _ in range(M):\n            # --- Simulate a single path ---\n            current_time = 0.0\n            num_trades = 0\n            log_price = 0.0\n            adverse_event_occurred = False\n\n            while True:\n                # Generate waiting time tau from Lomax distribution using inverse transform sampling\n                u = rng.uniform()\n                tau = t0 * (u**(-1.0 / alpha) - 1.0)\n\n                # If the next trade is after the horizon, the path ends\n                if current_time + tau > T:\n                    break\n                \n                # Update time and trade count\n                current_time += tau\n                num_trades += 1\n\n                # Generate log-price jump Y from Normal distribution\n                y_jump = rng.normal(loc=mu_J, scale=sigma_J)\n                log_price += y_jump\n                \n                # Check for adverse jump event\n                if not adverse_event_occurred and y_jump = y_crit:\n                    adverse_event_occurred = True\n            \n            # --- Accumulate path results ---\n            terminal_price = S0 * math.exp(log_price)\n            \n            total_num_trades += num_trades\n            total_terminal_price += terminal_price\n            if adverse_event_occurred:\n                paths_with_adverse_event += 1\n\n        # Calculate Monte Carlo estimates\n        est_E_N_T = total_num_trades / M\n        est_E_S_T = total_terminal_price / M\n        est_P_adverse = paths_with_adverse_event / M\n\n        all_results.extend([est_E_N_T, est_E_S_T, est_P_adverse])\n\n    # Format and print the final output string\n    output_str = \",\".join([f\"{r:.6f}\" for r in all_results])\n    print(f\"[{output_str}]\")\n\nsolve()\n```", "id": "2425171"}]}