{"hands_on_practices": [{"introduction": "在部署复杂的模拟之前，在简化的确定性环境中对其进行测试至关重要。此练习通过将模型的波动率设置为零来实现这一点。当波动率 $\\sigma=0$ 时，标的资产的价格不再是随机的，而是以无风险利率进行确定性增长，这为任何蒙特卡洛定价器提供了一个基本的合理性检查，确保在引入随机因素之前，资产增长和折现的核心逻辑已正确实施。[@problem_id:2411899]", "problem": "您已经实现了一个风险中性蒙特卡洛模拟器，用于为不支付股息股票的欧式看涨期权定价。在风险中性测度下，股价遵循几何布朗运动 (GBM)，即随机微分方程 (SDE) $$\\mathrm{d}S_t = r S_t \\,\\mathrm{d}t + \\sigma S_t \\,\\mathrm{d}W_t,$$ 其中初始值为 $$S_0>0,$$ 无风险利率为 $$r\\ge 0,$$ 波动率为 $$\\sigma\\ge 0,$$ 到期时间为 $$T>0.$$ 该期权的行权价为 $$K>0,$$ 定价器通过模拟期末价格 $$S_T$$ 并计算折现后收益 $$e^{-rT}(S_T - K)^+$$ 的样本均值来估计无套利现值。\n\n作为一项单元测试，您设定 $$\\sigma=0.$$ 在模拟路径数量无穷大的极限情况下，蒙特卡洛估计量应收敛到哪个值？\n\nA. $$e^{-rT}\\,\\max\\!\\big(S_0 e^{rT} - K,\\,0\\big)$$\n\nB. $$\\max\\!\\big(S_0 e^{rT} - K,\\,0\\big)$$\n\nC. $$\\max\\!\\big(S_0 - K,\\,0\\big)$$\n\nD. $$e^{-rT}\\,\\max\\!\\big(S_0 - K,\\,0\\big)$$", "solution": "首先必须验证问题陈述的科学合理性、自洽性和清晰性。\n\n步骤1：提取已知条件\n-   标的资产是一只不支付股息的股票，其价格 $S_t$ 在风险中性测度下遵循几何布朗运动 (GBM) 的随机微分方程 (SDE)：$$\\mathrm{d}S_t = r S_t \\,\\mathrm{d}t + \\sigma S_t \\,\\mathrm{d}W_t$$。\n-   初始股价：$$S_0 > 0$$。\n-   无风险利率：$$r \\ge 0$$。\n-   波动率：$$\\sigma \\ge 0$$。\n-   到期时间：$$T > 0$$。\n-   该期权为欧式看涨期权，行权价为 $$K > 0$$。\n-   蒙特卡洛估计量通过计算折现后收益的样本均值来估算无套利现值：$$e^{-rT}(S_T - K)^+$$。\n-   单元测试的特定条件是 $$\\sigma=0$$。\n-   问题要求的是在模拟路径数量无穷大的极限情况下，蒙特卡洛估计量的收敛值。\n\n步骤2：使用提取的已知条件进行验证\n该问题在现代量化金融的标准框架内，特别是在 Black-Scholes-Merton 模型中，是定义明确的。该 SDE 是不支付股息股票的标准风险中性动态。所述的蒙特卡洛定价方法是一种标准的数值技术。问题要求的是估计量的极限，根据大数定律，该极限即为理论期望值。条件 $$\\sigma=0$$ 是一个有效且常见的退化情形，用于测试模型的一致性，因为它代表了一个没有不确定性的世界。在这种情况下，资产应以无风险利率确定性地增长。所有参数都有适当的定义和约束。该问题具有科学依据、是适定的、客观的，并且不包含矛盾或歧义。\n\n步骤3：结论与行动\n问题陈述有效。将推导解答。\n\n欧式看涨期权价格 $C_0$ 的蒙特卡洛估计量 $\\hat{C}_{0,N}$ 由大量（$N$个）模拟的折现后收益的样本均值给出：\n$$ \\hat{C}_{0,N} = \\frac{1}{N} \\sum_{i=1}^{N} e^{-rT} \\max(S_T^{(i)} - K, 0) $$\n其中 $S_T^{(i)}$ 是第 $i$ 条模拟路径得出的期末股票价格。\n\n根据大数定律，当模拟路径数 $N$ 趋于无穷大时，蒙特卡洛估计量 $\\hat{C}_{0,N}$ 收敛于风险中性测度 $\\mathbb{Q}$ 下折现后收益的真实期望值：\n$$ \\lim_{N \\to \\infty} \\hat{C}_{0,N} = \\mathbb{E}_{\\mathbb{Q}}\\left[e^{-rT} \\max(S_T - K, 0)\\right] $$\n由于折现因子 $e^{-rT}$ 是一个常数，它可以被从期望中提出：\n$$ C_0 = e^{-rT} \\mathbb{E}_{\\mathbb{Q}}\\left[\\max(S_T - K, 0)\\right] $$\n本题要求我们在波动率 $\\sigma$ 设为 $0$ 的特定条件下评估此极限。\n\n当 $\\sigma = 0$ 时，股价的 SDE 变为：\n$$ \\mathrm{d}S_t = r S_t \\,\\mathrm{d}t + (0) S_t \\,\\mathrm{d}W_t $$\n$$ \\mathrm{dS_t = r S_t \\,\\mathrm{d}t} $$\n这不再是一个随机微分方程，而是一个简单的一阶常微分方程 (ODE)。引入价格路径随机性的随机部分已经消失。该 ODE 在初始条件 $S(0) = S_0$ 下的解可以通过分离变量法求得：\n$$ \\frac{\\mathrm{d}S_t}{S_t} = r \\,\\mathrm{d}t $$\n从时间 $0$ 积分到时间 $T$：\n$$ \\int_{S_0}^{S_T} \\frac{\\mathrm{d}S}{S} = \\int_0^T r \\,\\mathrm{d}t $$\n$$ \\ln(S_T) - \\ln(S_0) = rT $$\n$$ \\ln\\left(\\frac{S_T}{S_0}\\right) = rT $$\n对两边取指数，得到期末价格 $S_T$ 的解：\n$$ S_T = S_0 e^{rT} $$\n在这种零波动率的情景下，期末股票价格 $S_T$ 是一个确定性的量，而不是一个随机变量。每一条模拟路径都将产生完全相同的期末价格。\n\n现在，我们将这个确定性的 $S_T$ 值代回到期权价格的期望公式中。由于期望内的表达式不再是随机的，一个常数的期望就是它本身：\n$$ \\mathbb{E}_{\\mathbb{Q}}\\left[\\max(S_T - K, 0)\\right] = \\max(S_0 e^{rT} - K, 0) $$\n最后，期权的价格是这个确定性收益的现值：\n$$ C_0 = e^{-rT} \\max(S_0 e^{rT} - K, 0) $$\n这就是蒙特卡洛估计量必须收敛到的值。\n\n现在，我们来评估每个提供的选项。\n\nA. $$e^{-rT}\\,\\max\\!\\big(S_0 e^{rT} - K,\\,0\\big)$$\n该表达式与我们推导出的结果相符。它正确地确定了确定性的期末价格 $S_T = S_0 e^{rT}$，计算了相应的到期日收益 $\\max(S_0 e^{rT} - K, 0)$，并使用因子 $e^{-rT}$ 将其折算回现值。此选项是 **正确的**。\n\nB. $$\\max\\!\\big(S_0 e^{rT} - K,\\,0\\big)$$\n该表达式代表了到期日 $T$ 的未折现收益。任务是找到定价器的值，该定价器估计的是期权的现值（在时间 $0$）。此选项忽略了必要的折现因子 $e^{-rT}$。这是期权在时间 $T$ 的价值，而不是在时间 $0$ 的价值。此选项是 **不正确的**。\n\nC. $$\\max\\!\\big(S_0 - K,\\,0\\big)$$\n这是期权在时间 $t=0$ 的内在价值。这是如果期权可以立即行权所能获得的收益。它完全忽略了到期时间 $T > 0$、股价的增长以及货币的时间价值。此选项是 **不正确的**。\n\nD. $$e^{-rT}\\,\\max\\!\\big(S_0 - K,\\,0\\big)$$\n该表达式错误地基于初始价格 $S_0$ 而不是期末价格 $S_T$ 来计算收益。然后它对这个不正确的收益值进行折现。欧式期权的收益根本上与标的资产在到期日的价格 $S_T$ 相关联。该选项在构造上存在根本性缺陷。此选项是 **不正确的**。", "answer": "$$\\boxed{A}$$", "id": "2411899"}, {"introduction": "计算金融中的一个常见挑战是找出数值模型输出与已知解析解不符的原因。本练习提出了一种系统性的方法来诊断这类差异。蒙特卡洛模拟的总误差可以分解为实现错误、时间离散化偏差和统计抽样误差，通过学习设计能够分离每个误差来源的测试，你将掌握验证和调试复杂量化模型的关键技能。[@problem_id:2411885]", "problem": "您为一个在 Black-Scholes (BS) 模型下的欧式看涨期权价格实现了一个 Monte Carlo (MC) 估计量。在风险中性测度下，标的资产遵循几何布朗运动 (Geometric Brownian Motion, GBM)：$\\,\\mathrm{d}S_t = r S_t \\,\\mathrm{d}t + \\sigma S_t \\,\\mathrm{d}W_t\\,$，其中初始价格为 $\\,S_0\\,$，无风险利率 $\\,r\\,$ 与波动率 $\\,\\sigma\\,$ 为常数，到期日为 $\\,T\\,$。欧式看涨期权的收益为 $\\,\\max(S_T - K, 0)\\,$，行权价为 $\\,K\\,$。您的 MC 定价器使用 Euler 离散化方法对状态动态进行模拟，生成了 $\\,N\\,$ 条样本路径，每条路径有 $\\,m\\,$ 个大小为 $\\,\\Delta t = T/m\\,$ 的均匀时间步，并使用 $\\,\\exp(-rT)\\,$ 进行折现。您观察到您的 MC 估计值与 BS 解析解价格之间存在持续的差异。\n\n您需要确定这种差异是由实现中的错误 (bug)、时间离散化偏差，还是有限样本的抽样误差所引起的。以下哪个测试方案最能从第一性原理出发，可靠地诊断出问题的原因？\n\nA. 固定一个随机种子，并将您的 MC 估计值与使用相同 $\\,m\\,$ 的二叉树模型价格进行比较；如果两者接近，则断定没有 bug。然后，将用于布朗运动增量的标准正态随机数切换为均匀分布随机数；如果价格变化很小，则将残余差异归因于抽样误差。最后，将行权价 $\\,K\\,$ 改变 $\\,10\\%\\,$，看价格敏感度是否与数值微分的结果相匹配；如果不匹配，则断定存在离散化偏差。\n\nB. 将路径模拟替换为对终端分布 $\\,S_T = S_0 \\exp\\!\\big((r - \\tfrac{1}{2}\\sigma^2)T + \\sigma \\sqrt{T}\\, Z\\big)\\,$（其中 $\\,Z \\sim \\mathcal{N}(0,1)\\,$）进行精确抽样，并保持 $\\,N\\,$ 不变；将得到的 MC 估计值与 BS 价格进行比较，以测试时间离散化偏差。接下来，重复地将 $\\,N\\,$ 加倍（例如，$\\,N, 2N, 4N, 8N\\,$），每次都计算样本标准误和一个 $\\,95\\%\\,$ 置信区间，以测试差异是否按 $\\,N^{-1/2}\\,$ 的比例缩放，以及 BS 价格是否落在该区间内（测试抽样误差）。另外，通过您的模拟估算 $\\,\\mathbb{E}[e^{-rT} S_T]\\,$ 并检查其结果是否在统计上与 $\\,S_0\\,$ 不可区分，从而进行鞅诊断；如果并非如此，则怀疑存在实现中的 bug（例如，漂移项、折现或随机数问题）。最后，如果精确终端分布的模拟结果与 BS 价格一致，而带时间步长的模拟结果不一致，则通过细化 $\\,m\\,$（例如，$\\,m, 2m, 4m\\,$）来验证偏差是否随着 $\\,\\Delta t \\to 0\\,$ 而缩小。\n\nC. 保持 $\\,N\\,$ 和 $\\,m\\,$ 固定，在一系列网格点上改变 $\\,S_0\\,$；对每个 $\\,S_0\\,$，计算看涨和看跌期权的 MC 价格，并精确验证看跌-看涨期权平价关系。如果平价关系对所有网格点都成立，则断定没有 bug。然后，将您的价格与一个具有 $\\,m\\,$ 步的格子法进行比较，并将任何剩余的差异归因于抽样误差，因为两种方法都是离散近似。\n\nD. 切换到使用 Sobol’ 序列的拟蒙特卡洛 (quasi-Monte Carlo, QMC) 方法，使用相同的 $\\,N\\,$ 和 $\\,m\\,$，并与您的伪随机 MC 价格进行比较。如果 QMC 使估计值更接近 BS 价格，则推断原始差异是抽样误差。如果不接近，则将 $\\,m\\,$ 增加一次；如果估计值仍然与通过 QMC 复制计算出的单个标准误范围内的 BS 价格不匹配，则宣布该问题为 bug。\n\n选择最佳答案。", "solution": "当前的问题是数值模拟验证与调试中的一个经典实践，这在任何定量学科中都是一项至关重要的任务。我们面对的是一个用于 Black-Scholes 模型下欧式看涨期权的 Monte Carlo 定价器，它与已知的解析解存在“持续的差异”。我们的目标是确定最科学严谨的方案，以诊断此误差的来源，其可能来自实现中的 bug、时间离散化偏差或有限样本的统计误差。\n\n首先，让我们对问题进行形式化描述。在风险中性测度 $\\mathbb{Q}$ 下，资产价格 $S_t$ 遵循如下随机微分方程 (SDE)：\n$$ \\mathrm{d}S_t = r S_t \\,\\mathrm{d}t + \\sigma S_t \\,\\mathrm{d}W_t $$\n其中 $r$ 是恒定的无风险利率，$\\sigma$ 是恒定的波动率，$W_t$ 是一个标准布朗运动。该 Monte Carlo 模拟使用 Euler-Maruyama 离散格式，在 $m$ 个大小为 $\\Delta t = T/m$ 的时间步上进行：\n$$ S_{t_{i+1}} = S_{t_i} + r S_{t_i} \\Delta t + \\sigma S_{t_i} \\sqrt{\\Delta t} Z_i $$\n其中 $Z_i \\sim \\mathcal{N}(0,1)$ 是独立的标准正态随机变量。看涨期权价格 $C_0$ 的 MC 估计量为：\n$$ \\hat{C}_N = e^{-rT} \\frac{1}{N} \\sum_{j=1}^{N} \\max(S_{T}^{(j)} - K, 0) $$\n其中 $S_T^{(j)}$ 是第 $j$ 条模拟路径的终端价格。\n\nMC 估计值 $\\hat{C}_N$ 与真实的 Black-Scholes 价格 $C_{BS}$ 之间的总误差可以分解为：\n$$ \\text{Error} = \\hat{C}_N - C_{BS} = (\\hat{C}_N - \\mathbb{E}[\\hat{C}_N]) + (\\mathbb{E}[\\hat{C}_N] - C_{BS}) $$\n第一项 $(\\hat{C}_N - \\mathbb{E}[\\hat{C}_N])$ 是**统计抽样误差**，它是随机的，并且其量级随着 $N \\to \\infty$ 而减小，具体来说是 $O(N^{-1/2})$ 阶。第二项 $(\\mathbb{E}[\\hat{C}_N] - C_{BS})$ 是**系统性偏差**。此偏差主要由 SDE 的时间离散化引起。对于 Euler 格式，这种**离散化偏差**的弱收敛阶为 1，意味着它是 $O(\\Delta t)$ 阶，即 $O(m^{-1})$ 阶。一个**实现中的 bug** 可能会表现为一种额外的、通常是主导性的系统性偏差来源，或者它可能会错误地影响估计量的统计特性。\n\n一个稳健的诊断程序必须能够独立地分离和测试这三种潜在的误差来源中的每一种。\n\n让我们来评估所提出的各个方案。\n\n**对方案 A 的分析：**\n该方案在方法论上是不健全的，并包含严重缺陷。\n$1$. 将 MC 估计值与二叉树模型价格进行比较，是两种不同数值近似方法之间的比较。它们之间的一致性并不意味着相对于真实连续时间模型的正确性。两者都可能存在量级相似的离散化偏差，或者其中一个的 bug 可能恰好抵消了其偏差。这个测试无法分离出任何问题。\n$2$. 建议“将用于布朗运动增量的标准正态随机数切换为均匀分布随机数”在推理上是一个灾难性的错误。SDE 是用布朗运动定义的，其增量必然是高斯分布的。用均匀分布的变量替换它们，从根本上改变了所模拟的模型。这不是一个诊断测试，而是故意引入一个严重的建模错误。这种程序的结果是毫无意义的。\n$3$. 通过改变行权价 $K$ 来测试价格敏感度 (delta) 是一种间接测试。数值 delta 的差异可能是三种误差类型中任何一种的症状，并且无法将它们分离开来。例如，价格估计中的巨大抽样误差将导致其数值导数出现巨大误差。\n因此，该方案充满了逻辑谬误和不科学的程序。\n**对 A 的裁定：错误。**\n\n**对方案 B 的分析：**\n该方案系统、严谨，并遵循了此类研究的既定最佳实践。每一步都旨在分离出一种特定的误差来源。\n$1$. **测试离散化偏差：** $S_t$ 的 SDE 有一个已知的解析解：$S_T = S_0 \\exp((r - \\frac{1}{2}\\sigma^2)T + \\sigma W_T)$，其中 $W_T = \\sqrt{T}Z$ 且 $Z \\sim \\mathcal{N}(0,1)$。通过将分步的 Euler 模拟替换为从这个精确的终端分布中直接抽样，时间离散化误差被完全消除。如果使用这种精确方法的 MC 估计值与 Black-Scholes 价格（在统计噪音范围内）一致，而原始基于 Euler 的估计值不一致，那么该差异就可明确地被识别为离散化偏差。这是一个完美的对照实验。\n$2$. **测试抽样误差：** 重复地将路径数 $N$ 加倍并构建置信区间的程序，是分析统计收敛性的标准方法。中心极限定理规定，MC 均值的标准误应与 $N^{-1/2}$ 成比例缩小。通过验证这种缩放关系，并检查真实的 $C_{BS}$ 价格是否落在计算出的置信区间内，就可以确定观察到的差异是否与给定样本量 $N$ 的预期统计波动一致。\n$3$. **测试实现中的 bug：** 折现后资产价格的鞅性质，$\\mathbb{E}_{\\mathbb{Q}}[e^{-rT} S_T] = S_0$，是风险中性定价的一个基本原则。左侧的 MC 估计量 $\\frac{1}{N} \\sum_{j=1}^N e^{-rT} S_T^{(j)}$ 应该得出一个在统计上接近 $S_0$ 的值。显著的偏差指向模拟逻辑中的根本性缺陷——例如不正确的漂移项、随机数的不当缩放，或折现因子中的错误——这些问题可能仅通过为期权定价无法揭示。这为核心路径生成器的正确性提供了一个干净、强大且独立的测试。\n$4$. **确认：** 最后一步，通过细化时间步数 $m$ 并观察偏差向零收敛的过程，可以作为对离散化偏差诊断的确认。它验证了该误差的行为与弱收敛格式的理论预测一致。\n该方案的每个部分在逻辑上都是健全的，并且精准地针对了潜在的误差原因。\n**对 B 的裁定：正确。**\n\n**对方案 C 的分析：**\n该方案的推理较弱，并包含不切实际的建议。\n$1$. 验证看跌-看涨期权平价关系，$C - P = S_0 - K e^{-rT}$，是一个有效的合理性检查。由于收益线性组合为 $\\max(S_T-K,0) - \\max(K-S_T,0) = S_T - K$，该测试简化为检查 $e^{-rT}\\mathbb{E}[S_T] - e^{-rT}K \\approx S_0 - K e^{-rT}$ 是否成立，这又可以简化为鞅测试 $e^{-rT}\\mathbb{E}[S_T] \\approx S_0$。虽然这是一个有效的检查，但该方案要求“精确验证看跌-看涨期权平价关系”对于像 Monte Carlo 这样的统计方法来说是不可能的。总会存在抽样误差。\n$2$. 如果平价关系成立就断定“没有 bug”的结论是不稳健的。例如，一个使用了不正确波动率 $\\sigma$ 的实现仍然会满足看跌-看涨期权平价关系，因为该关系与 $\\sigma$ 无关。这个测试不够全面。\n$3$. 将一个离散近似（Euler MC）与另一个离散近似（格子法）进行比较，与方案 A 一样，不是一个决定性的诊断方法。它没有使用已知的解析解作为基准。将差异完全归因于“抽样误差”是一个没有根据的跳跃性结论，因为两种方法都有各自可能不同的离散化偏差。\n**对 C 的裁定：错误。**\n\n**对方案 D 的分析：**\n该方案依赖于一种复杂的技术，即拟蒙特卡洛 (quasi-Monte Carlo, QMC)，但其应用是启发式的，而非用于严谨的诊断。\n$1$. QMC 方法使用像 Sobol’ 这样的低差异序列，通常能达到比标准 MC 的 $O(N^{-1/2})$ 速率更快的收敛速率（例如，$O(N^{-1}\\log^d N)$）。如果切换到 QMC 显著减小了误差，这表明误差确实与抽样质量有关，指向抽样误差。然而，这不是一个决定性的测试。如果存在很大的离散化偏差，MC 和 QMC 都会收敛到同一个错误的、有偏差的值。QMC 只是会用更少的点数达到那个值。它无助于区分相对于真实价格的偏差和抽样误差。\n$2$. 诊断逻辑薄弱：“将 $m$ 增加一次”不足以分析离散化偏差的趋势。基于未能匹配到“单个标准误”范围内的 BS 价格就断定存在“bug”的结论是武断的，且缺乏统计严谨性。QMC 的标准误估计也并非易事，通常需要对序列进行随机化，而该提议并未提及这一点。\n该方案将一个方差缩减技术误用作主要的诊断工具，并采用了有缺陷的、不严谨的逻辑。\n**对 D 的裁定：错误。**\n\n总而言之，方案 B 提出了唯一全面且科学合理的方法论。它使用确定性的、独立的测试系统地分离了每种潜在的误差来源——离散化偏差、抽样误差和实现中的 bug——这些测试是计算金融领域的标准实践。", "answer": "$$\\boxed{B}$$", "id": "2411885"}, {"introduction": "除了计算期权价格，理解其对市场变化的敏感性通常更为重要。这个动手编程练习将指导您估算一个关键风险指标——“伽马”($\\Gamma$)。期权的敏感性指标（“希腊字母”）可以通过将有限差分近似应用于蒙特卡洛模拟的输出来进行数值估算，从而将理论与实践联系起来，并展示如何扩展定价模型来计算重要的风险管理指标和分析估算器的数值稳定性。[@problem_id:2411952]", "problem": "考虑一个欧式看跌期权，其标的资产的价格演变遵循风险中性的 Black–Scholes–Merton (BSM) 模型。在风险中性概率测度下，资产价格过程 $\\{S_t\\}_{t \\ge 0}$ 满足随机微分方程 $dS_t = r S_t \\, dt + \\sigma S_t \\, dW_t$，其中 $r$ 是连续复利无风险利率，$\\sigma$ 是波动率，$\\{W_t\\}_{t \\ge 0}$ 是标准布朗运动。该欧式看跌期权的行权价为 $K$，到期日为 $T$，其折现后收益价格由风险中性期望 $e^{-r T} \\mathbb{E}[(K - S_T)^+]$ 给出，其中 $(x)^+ = \\max\\{x, 0\\}$。希腊字母 $\\Gamma$ 定义为期权价格相对于初始资产价格 $S_0$ 的二阶导数，即 $\\Gamma = \\frac{\\partial^2}{\\partial S_0^2} \\text{Price}(S_0)$。\n\n您的任务是编写一个完整的程序，通过蒙特卡洛 (MC) 模拟来估计欧式看跌期权的 $\\Gamma$ 值。该模拟使用基于三个初始价格 $S_0 - \\varepsilon$、$S_0$ 和 $S_0 + \\varepsilon$ 的对称三点有限差分近似法。对于每个给定的测试用例，使用两种不同的扰动幅度 $\\varepsilon_{\\text{small}}$ 和 $\\varepsilon_{\\text{large}}$ 对 $\\Gamma$ 进行两次估计。对于每个 $\\varepsilon$，通过将每条路径的二阶差分贡献视为独立同分布的观测值，并使用样本标准差除以模拟路径数量的平方根，来计算相关的标准误差。在每个测试用例的每次 $\\varepsilon$ 计算中，对三个初始价格使用相同的随机冲击。所有答案都表示为无量纲的十进制数。\n\n估计量的稳定性定义如下：设 $\\widehat{\\Gamma}_{\\text{small}}$ 和 $\\widehat{\\Gamma}_{\\text{large}}$ 分别是用 $\\varepsilon_{\\text{small}}$ 和 $\\varepsilon_{\\text{large}}$ 得到的两个估计值，并设 $\\widehat{\\text{SE}}_{\\text{small}}$ 和 $\\widehat{\\text{SE}}_{\\text{large}}$ 是它们对应的估计标准误差。定义绝对差 $\\Delta = |\\widehat{\\Gamma}_{\\text{small}} - \\widehat{\\Gamma}_{\\text{large}}|$ 和稳定性阈值 $\\Theta = 2 \\cdot \\max\\{\\widehat{\\text{SE}}_{\\text{small}}, \\widehat{\\text{SE}}_{\\text{large}}\\}$。如果 $\\Delta \\le \\Theta$，则认为估计量是稳定的。\n\n实现您的程序来处理以下参数集的测试套件。对于每个测试用例，使用指定的输入：初始价格 $S_0$、行权价 $K$、无风险利率 $r$、波动率 $\\sigma$、到期时间 $T$、蒙特卡洛路径数 $N$、小扰动 $\\varepsilon_{\\text{small}}$ 和大扰动 $\\varepsilon_{\\text{large}}$。\n\n测试用例 A（平价，一年）：\n- $S_0 = 100.0$, $K = 100.0$, $r = 0.05$, $\\sigma = 0.2$, $T = 1.0$, $N = 200000$, $\\varepsilon_{\\text{small}} = 0.1$, $\\varepsilon_{\\text{large}} = 1.0$。\n\n测试用例 B（深度价内看跌期权，一年）：\n- $S_0 = 60.0$, $K = 100.0$, $r = 0.01$, $\\sigma = 0.4$, $T = 1.0$, $N = 200000$, $\\varepsilon_{\\text{small}} = 0.2$, $\\varepsilon_{\\text{large}} = 2.0$。\n\n测试用例 C（平价，短期）：\n- $S_0 = 100.0$, $K = 100.0$, $r = 0.0$, $\\sigma = 0.2$, $T = 0.05$, $N = 200000$, $\\varepsilon_{\\text{small}} = 0.05$, $\\varepsilon_{\\text{large}} = 0.5$。\n\n您的程序必须为每个测试用例生成一个包含六个值的列表，顺序如下：\n- $\\widehat{\\Gamma}_{\\text{small}}$，\n- $\\widehat{\\text{SE}}_{\\text{small}}$，\n- $\\widehat{\\Gamma}_{\\text{large}}$，\n- $\\widehat{\\text{SE}}_{\\text{large}}$，\n- $\\Delta$，\n- 一个布尔稳定性标志，如果 $\\Delta \\le \\Theta$ 则定义为 $true$，否则为 $false$。\n\n所有浮点数必须四舍五入到 $6$ 位小数打印。布尔值必须以小写形式 $true$ 或 $false$ 打印。\n\n最终输出格式：您的程序应生成单行输出，其中包含结果，形式为三个按测试用例排列的列表的逗号分隔列表，并用方括号括起来。例如，结构必须严格遵循 $[[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot]]$ 的形式，不含空格。不应打印任何额外文本。", "solution": "所提出的问题经过了严格的验证。\n\n步骤 1：提取已知条件\n- 模型：Black–Scholes–Merton (BSM) 风险中性模型。\n- 资产价格动态：随机微分方程 (SDE) 为 $dS_t = r S_t \\, dt + \\sigma S_t \\, dW_t$，其中 $r$ 是无风险利率，$\\sigma$ 是波动率，$W_t$ 是标准布朗运动。\n- 期权类型：欧式看跌期权。\n- 参数：行权价 $K$、到期日 $T$、初始资产价格 $S_0$。\n- 到期时收益：$(K - S_T)^+ = \\max\\{K - S_T, 0\\}$。\n- 期权价格公式：$\\text{Price}(S_0) = e^{-r T} \\mathbb{E}[(K - S_T)^+]$。\n- 待估计的希腊字母：$\\Gamma = \\frac{\\partial^2}{\\partial S_0^2} \\text{Price}(S_0)$。\n- 估计方法：使用对称三点有限差分近似的蒙特卡洛 (MC) 模拟。\n- 有限差分格式：利用初始价格 $S_0 - \\varepsilon$、$S_0$ 和 $S_0 + \\varepsilon$。\n- 扰动幅度：两个值 $\\varepsilon_{\\text{small}}$ 和 $\\varepsilon_{\\text{large}}$ 用于分别进行估计。\n- 标准误差 (SE) 估计：SE 根据每条路径的二阶差分贡献的样本标准差计算，然后除以路径数 $N$ 的平方根。\n- 方差缩减：在每次估计中，必须对三个价格点（$S_0 - \\varepsilon$、$S_0$ 和 $S_0 + \\varepsilon$）使用相同的随机冲击（公共随机数）。\n- 估计量稳定性度量：由 $\\Delta = |\\widehat{\\Gamma}_{\\text{small}} - \\widehat{\\Gamma}_{\\text{large}}|$ 和阈值 $\\Theta = 2 \\cdot \\max\\{\\widehat{\\text{SE}}_{\\text{small}}, \\widehat{\\text{SE}}_{\\text{large}}\\}$ 定义。如果 $\\Delta \\le \\Theta$，则稳定性成立。\n- 测试用例 A：$S_0 = 100.0$, $K = 100.0$, $r = 0.05$, $\\sigma = 0.2$, $T = 1.0$, $N = 200000$, $\\varepsilon_{\\text{small}} = 0.1$, $\\varepsilon_{\\text{large}} = 1.0$。\n- 测试用例 B：$S_0 = 60.0$, $K = 100.0$, $r = 0.01$, $\\sigma = 0.4$, $T = 1.0$, $N = 200000$, $\\varepsilon_{\\text{small}} = 0.2$, $\\varepsilon_{\\text{large}} = 2.0$。\n- 测试用例 C：$S_0 = 100.0$, $K = 100.0$, $r = 0.0$, $\\sigma = 0.2$, $T = 0.05$, $N = 200000$, $\\varepsilon_{\\text{small}} = 0.05$, $\\varepsilon_{\\text{large}} = 0.5$。\n- 每个测试用例的所需输出：一个包含六个值的列表：$[\\widehat{\\Gamma}_{\\text{small}}, \\widehat{\\text{SE}}_{\\text{small}}, \\widehat{\\Gamma}_{\\text{large}}, \\widehat{\\text{SE}}_{\\text{large}}, \\Delta, \\text{稳定性标志}]$。浮点数必须四舍五入到 6 位小数，布尔值必须为小写（`true`/`false`）。\n\n步骤 2：使用提取的已知条件进行验证\n对问题的有效性进行评估。\n- **科学依据：** 该问题基于金融工程的基石——经典的 Black–Scholes–Merton 模型。所规定的方法——蒙特卡洛模拟和有限差分近似——是计算金融中标准、有效的数值技术。该问题在科学上是合理的。\n- **适定性：** 所有必要的参数（$S_0, K, r, \\sigma, T$）、数值设置（$N, \\varepsilon_{\\text{small}}, \\varepsilon_{\\text{large}}$）和定义（例如，稳定性）都为每个测试用例明确提供。目标陈述清晰。该问题是适定的。\n- **客观性：** 问题陈述以精确的数学和计算术语表述，不含任何主观或基于观点的内容。\n\n步骤 3：结论与行动\n该问题是有效的。它具有科学依据、适定、客观，并包含一个完整且一致的设置。将构建一个解决方案。\n\n基本原理是欧式期权的风险中性定价。在 BSM 模型下，给定初始价格 $S_0$，到期日 $T$ 的资产价格 $S_T$ 服从对数正态分布。该 SDE 的显式解为：\n$$ S_T = S_0 \\exp\\left( \\left(r - \\frac{1}{2}\\sigma^2\\right)T + \\sigma\\sqrt{T}Z \\right) $$\n其中 $Z$ 是从标准正态分布 $\\mathcal{N}(0, 1)$ 中抽取的随机变量。\n\n期权的 Gamma 值 $\\Gamma$ 是期权价格 $P$ 相对于初始资产价格 $S_0$ 的二阶导数：\n$$ \\Gamma = \\frac{\\partial^2 P(S_0)}{\\partial S_0^2} $$\n我们使用中心有限差分公式来近似这个导数：\n$$ \\Gamma \\approx \\frac{P(S_0 + \\varepsilon) - 2P(S_0) + P(S_0 - \\varepsilon)}{\\varepsilon^2} $$\n其中 $\\varepsilon$ 是一个小的扰动量。\n\n期权价格 $P(S_0)$ 是风险中性测度下的折现期望收益：\n$$ P(S_0) = e^{-rT}\\mathbb{E}\\left[(K - S_T(S_0))^+\\right] $$\n通过将其代入有限差分公式并利用期望算子的线性性质，我们可以将 Gamma 近似值表示为单个随机变量的期望：\n$$ \\Gamma \\approx \\mathbb{E}\\left[ \\frac{e^{-rT}(K - S_T(S_0+\\varepsilon))^+ - 2e^{-rT}(K - S_T(S_0))^+ + e^{-rT}(K - S_T(S_0-\\varepsilon))^+}{\\varepsilon^2} \\right] $$\n这种表述方式非常适合蒙特卡洛估计。我们为第 $i$ 条模拟路径定义 Gamma 的单路径估计量 $\\gamma_i$：\n$$ \\gamma_i(\\varepsilon) = \\frac{p_i(S_0+\\varepsilon) - 2p_i(S_0) + p_i(S_0-\\varepsilon)}{\\varepsilon^2} $$\n其中 $p_i(S)$ 表示从价格 $S$ 开始的路径 $i$ 的折现收益：\n$$ p_i(S) = e^{-rT} \\max\\left(K - S \\exp\\left( \\left(r - \\frac{1}{2}\\sigma^2\\right)T + \\sigma\\sqrt{T}Z_i \\right), 0\\right) $$\n且 $Z_i$ 是第 $i$ 次从 $\\mathcal{N}(0, 1)$ 中抽取的样本。在计算 $\\gamma_i$ 的表达式时，对三个收益使用相同的随机变量 $Z_i$ 至关重要。这就是公共随机数法，它可以显著减少估计量的方差。\n\nGamma 的蒙特卡洛估计量 $\\widehat{\\Gamma}$ 是 $N$ 个此类路径估计量的样本均值：\n$$ \\widehat{\\Gamma} = \\frac{1}{N} \\sum_{i=1}^{N} \\gamma_i $$\n该估计量的标准误差 $\\widehat{\\text{SE}}(\\widehat{\\Gamma})$ 由 $\\gamma_i$ 值的样本标准差除以路径数的平方根给出：\n$$ \\widehat{\\text{SE}}(\\widehat{\\Gamma}) = \\frac{s_\\gamma}{\\sqrt{N}} = \\frac{1}{\\sqrt{N}} \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^{N} (\\gamma_i - \\widehat{\\Gamma})^2} $$\n对每个测试用例，整个过程执行两次：一次使用 $\\varepsilon = \\varepsilon_{\\text{small}}$ 获得 $\\widehat{\\Gamma}_{\\text{small}}$ 和 $\\widehat{\\text{SE}}_{\\text{small}}$，另一次使用 $\\varepsilon = \\varepsilon_{\\text{large}}$ 获得 $\\widehat{\\Gamma}_{\\text{large}}$ 和 $\\widehat{\\text{SE}}_{\\text{large}}$。\n\n最后，评估估计量相对于扰动大小 $\\varepsilon$ 的稳定性。我们计算估计值的绝对差 $\\Delta$ 和稳定性阈值 $\\Theta$：\n$$ \\Delta = |\\widehat{\\Gamma}_{\\text{small}} - \\widehat{\\Gamma}_{\\text{large}}| $$\n$$ \\Theta = 2 \\cdot \\max\\{\\widehat{\\text{SE}}_{\\text{small}}, \\widehat{\\text{SE}}_{\\text{large}}\\} $$\n选择 $2$ 与构建近似 $95\\%$ 的置信区间有关。如果差值 $\\Delta$ 在此阈值之内，即 $\\Delta \\le \\Theta$，则认为估计量是稳定的。然后按规定汇编结果。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy is not used but is noted as available.\n\ndef solve():\n    \"\"\"\n    Main function to run the Monte Carlo simulation for all test cases\n    and print the results in the required format.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Test Case A (at-the-money, one year)\n        (100.0, 100.0, 0.05, 0.2, 1.0, 200000, 0.1, 1.0),\n        # Test Case B (deep in-the-money put, one year)\n        (60.0, 100.0, 0.01, 0.4, 1.0, 200000, 0.2, 2.0),\n        # Test Case C (at-the-money, short maturity)\n        (100.0, 100.0, 0.0, 0.2, 0.05, 200000, 0.05, 0.5),\n    ]\n\n    all_results = []\n    \n    # Instantiate a random number generator for reproducibility.\n    rng = np.random.default_rng(seed=42)\n\n    for case in test_cases:\n        s0, k, r, sigma, t, n, eps_small, eps_large = case\n\n        # Generate common random numbers for both epsilon calculations\n        z_shocks = rng.standard_normal(n)\n\n        # --- Calculation for epsilon_small ---\n        gamma_small, se_small = estimate_gamma_and_se(\n            s0, k, r, sigma, t, n, eps_small, z_shocks\n        )\n\n        # --- Calculation for epsilon_large ---\n        gamma_large, se_large = estimate_gamma_and_se(\n            s0, k, r, sigma, t, n, eps_large, z_shocks\n        )\n\n        # --- Stability Analysis ---\n        delta = abs(gamma_small - gamma_large)\n        theta = 2.0 * max(se_small, se_large)\n        is_stable = delta <= theta\n\n        all_results.append(\n            [gamma_small, se_small, gamma_large, se_large, delta, is_stable]\n        )\n\n    # Final print statement in the exact required format.\n    print_formatted_results(all_results)\n\ndef estimate_gamma_and_se(s0, k, r, sigma, t, n, epsilon, z_shocks):\n    \"\"\"\n    Estimates Gamma and its standard error for a European put option using\n    Monte Carlo with a three-point finite difference method.\n\n    Args:\n        s0 (float): Initial asset price.\n        k (float): Strike price.\n        r (float): Risk-free interest rate.\n        sigma (float): Volatility.\n        t (float): Time to maturity.\n        n (int): Number of Monte Carlo paths.\n        epsilon (float): Perturbation for finite difference.\n        z_shocks (np.ndarray): Array of standard normal random numbers.\n\n    Returns:\n        tuple[float, float]: Estimated Gamma and its standard error.\n    \"\"\"\n    # Define initial prices for the finite difference scheme\n    s0_plus = s0 + epsilon\n    s0_minus = s0 - epsilon\n\n    # Calculate the common component for asset price simulation\n    drift = (r - 0.5 * sigma**2) * t\n    vol_shock = sigma * np.sqrt(t) * z_shocks\n    \n    # Terminal prices for the three perturbed initial prices\n    # using common random numbers (z_shocks)\n    st_plus = s0_plus * np.exp(drift + vol_shock)\n    st_0 = s0 * np.exp(drift + vol_shock)\n    st_minus = s0_minus * np.exp(drift + vol_shock)\n\n    # Discounted payoffs for the put option\n    discount_factor = np.exp(-r * t)\n    payoff_plus = discount_factor * np.maximum(k - st_plus, 0)\n    payoff_0 = discount_factor * np.maximum(k - st_0, 0)\n    payoff_minus = discount_factor * np.maximum(k - st_minus, 0)\n    \n    # Per-path estimators for Gamma\n    gamma_paths = (payoff_plus - 2 * payoff_0 + payoff_minus) / (epsilon**2)\n\n    # Estimate Gamma (mean of per-path estimators)\n    gamma_hat = np.mean(gamma_paths)\n\n    # Estimate Standard Error\n    # ddof=1 for sample standard deviation\n    se_hat = np.std(gamma_paths, ddof=1) / np.sqrt(n)\n\n    return gamma_hat, se_hat\n\ndef print_formatted_results(results_data):\n    \"\"\"\n    Formats the final results list into the specific string format required by the problem.\n    \"\"\"\n    formatted_cases = []\n    for case_results in results_data:\n        formatted_values = []\n        for value in case_results:\n            if isinstance(value, float):\n                formatted_values.append(f\"{value:.6f}\")\n            elif isinstance(value, (bool, np.bool_)):\n                formatted_values.append(str(value).lower())\n        formatted_cases.append(f\"[{','.join(formatted_values)}]\")\n    \n    final_output_string = f\"[{','.join(formatted_cases)}]\"\n    print(final_output_string)\n\nsolve()\n```", "id": "2411952"}]}