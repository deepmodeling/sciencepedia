{"hands_on_practices": [{"introduction": "这第一个练习是一个基础性的检验，旨在巩固您对核心概念的理解。通过计算一个零息债券的凸性，并将其与一个标准的附息债券进行概念上的对比，您将能直观地理解现金流的时间分布是如何从根本上决定债券的二阶利率风险的。这项练习强化了“现金流越靠后，对凸性贡献越大”这一核心直觉。[@problem_id:2376960]", "problem": "一支面值为 $1$、到期期限为 $T = 5$ 年的无违约风险零息债券，以 $y = 5\\%$ 的统一年度到期收益率 (YTM) 定价。定义债券相对于年度 YTM 的凸性为 $C(y) \\equiv \\dfrac{1}{P(y)} \\dfrac{d^{2}P(y)}{dy^{2}}$，其中 $P(y)$ 是作为 $y$ 的函数的债券价格。再考虑一支无违约风险的每年付息附息债券，其面值同样为 $1$，到期期限同样为 $T = 5$ 年，年度票面利率为 $5\\%$，也以相同的统一年度 YTM $y = 5\\%$ 定价。\n\n哪个选项正确地报告了零息债券在 $y = 5\\%$ 时的凸性（四舍五入到两位小数），并为其凸性高于同期限附息债券的凸性提供了正确的解释？\n\nA. $27.21$；因为零息债券的所有现金流都发生在最终日期 $t = T$，曲率权重 $t(t+1)$ 完全作用于最大的 $t$ 上，而票息支付将权重转移到了更早、更小的 $t$，从而降低了附息债券的凸性。\n\nB. $23.94$；因为较早的票息支付会产生更高的利率敏感性，所以附息债券的凸性超过了零息债券。\n\nC. $27.21$；因为零息债券的久期低于其他方面相同的附息债券，所以其凸性必须更高。\n\nD. $30.00$；因为零息债券的凸性等于 $T(T+1)$，与收益率水平无关。", "solution": "必须首先验证问题陈述的科学性和逻辑完整性。\n\n**第1步：提取已知条件**\n\n- **债券1（零息债券）：**\n  - 类型：无违约风险的零息债券。\n  - 面值：$F = 1$。\n  - 到期期限：$T = 5$ 年。\n  - 到期收益率 (YTM)：统一的年化利率，$y = 5\\% = 0.05$。\n\n- **债券2（附息债券）：**\n  - 类型：无违约风险的每年付息附息债券。\n  - 面值：$F = 1$。\n  - 到期期限：$T = 5$ 年。\n  - 年度票面利率：$c = 5\\% = 0.05$。\n  - 到期收益率 (YTM)：统一的年化利率，$y = 5\\% = 0.05$。\n\n- **凸性的定义：**\n  - $C(y) \\equiv \\dfrac{1}{P(y)} \\dfrac{d^{2}P(y)}{dy^{2}}$，其中 $P(y)$ 是作为年度 YTM $y$ 的函数的债券价格。\n\n**第2步：使用提取的已知条件进行验证**\n\n对问题进行严格验证。\n1.  **科学依据**：债券定价、到期收益率 (YTM) 和债券凸性的概念是金融数学中基本且成熟的原则。其定义和关系都是标准的。该问题具有科学合理性。\n2.  **适定性**：该问题提供了所有必要参数（$F$, $T$, $y$, $c$）和凸性的精确定义，足以计算出零息债券的唯一数值答案，并与附息债券进行定性比较。\n3.  **客观性**：问题以客观、定量的术语陈述，不含主观或模糊的语言。\n4.  **完整性和一致性**：提供的信息是充分的，且没有内部矛盾。问题中对两种债券都使用“统一年度到期收益率 (YTM)”，这表明所有计算都基于年复利，设定是一致的。\n\n**第3步：结论与行动**\n\n问题陈述有效。可以推导出严谨的解决方案。\n\n**解答推导**\n\n首先，我们计算零息债券的凸性。面值为 $F=1$、到期期限为 $T=5$ 的零息债券的价格 $P(y)$ 由其到期时的单笔现金流的现值给出：\n$$P(y) = \\dfrac{1}{(1+y)^T} = (1+y)^{-T}$$\n给定 $T=5$，价格函数为：\n$$P(y) = (1+y)^{-5}$$\n\n为了求出凸性，我们必须计算价格函数相对于收益率 $y$ 的一阶和二阶导数。\n一阶导数为：\n$$\\dfrac{dP(y)}{dy} = -5(1+y)^{-6}$$\n二阶导数为：\n$$\\dfrac{d^{2}P(y)}{dy^{2}} = (-5)(-6)(1+y)^{-7} = 30(1+y)^{-7}$$\n\n使用给定的凸性定义，$C(y) = \\dfrac{1}{P(y)} \\dfrac{d^{2}P(y)}{dy^{2}}$：\n$$C(y) = \\dfrac{1}{(1+y)^{-5}} \\left[ 30(1+y)^{-7} \\right] = 30(1+y)^{-2}$$\n或者，对于零息债券，凸性的一般公式为：\n$$C(y) = \\dfrac{T(T+1)}{(1+y)^2}$$\n代入 $T=5$：\n$$C(y) = \\dfrac{5(5+1)}{(1+y)^2} = \\dfrac{30}{(1+y)^2}$$\n这验证了推导出的表达式。现在我们在给定的收益率 $y = 0.05$ 下计算其值：\n$$C(0.05) = \\dfrac{30}{(1+0.05)^2} = \\dfrac{30}{(1.05)^2} = \\dfrac{30}{1.1025} \\approx 27.21088...$$\n四舍五入到两位小数，零息债券的凸性为 $27.21$。\n\n接下来，我们必须解释为什么该凸性高于附息债券的凸性。一般债券的价格是其现金流 $CF_t$ 的现值之和：\n$$P(y) = \\sum_{t=1}^{T} \\dfrac{CF_t}{(1+y)^t}$$\n二阶导数为：\n$$\\dfrac{d^2P(y)}{dy^2} = \\sum_{t=1}^{T} CF_t \\cdot t(t+1)(1+y)^{-(t+2)}$$\n那么凸性为：\n$$C(y) = \\dfrac{1}{P(y)} \\sum_{t=1}^{T} \\dfrac{CF_t \\cdot t(t+1)}{(1+y)^{t+2}} = \\dfrac{1}{(1+y)^2} \\sum_{t=1}^{T} \\left[ \\dfrac{CF_t / (1+y)^t}{P(y)} \\right] t(t+1)$$\n令 $w_t = \\dfrac{PV(CF_t)}{P(y)}$ 为时间 $t$ 的现金流相对于总价格的权重。这些权重之和为1，即 $\\sum w_t = 1$。凸性表达式变为一个加权平均：\n$$C(y) = \\dfrac{1}{(1+y)^2} \\sum_{t=1}^{T} w_t \\cdot t(t+1)$$\n对于零息债券，仅在 $t=T=5$ 时有一笔现金流。因此，$w_5=1$ 且所有其他权重 $w_{t<5}=0$。求和式简化为单项：\n$$C_{zero}(y) = \\dfrac{1}{(1+y)^2} \\cdot [1 \\cdot T(T+1)] = \\dfrac{T(T+1)}{(1+y)^2} = \\dfrac{30}{(1+y)^2}$$\n对于附息债券，在时间 $t=1, 2, 3, 4, 5$ 都有现金流。因此，$w_1, w_2, w_3, w_4, w_5$ 均为正值。其凸性为：\n$$C_{coupon}(y) = \\dfrac{1}{(1+y)^2} \\left[ w_1(1\\cdot2) + w_2(2\\cdot3) + w_3(3\\cdot4) + w_4(4\\cdot5) + w_5(5\\cdot6) \\right]$$\n这是对 $t=1,...,5$ 的项 $t(t+1)$ 的加权平均。由于权重 $w_{t<5}$ 为正，加权平均值 $\\sum w_t \\cdot t(t+1)$ 必须严格小于最大可能值 $T(T+1) = 30$。票息支付将权重转移到了较早的时间点 $t$，在这些时间点上，“曲率贡献”项 $t(t+1)$ 更小（例如，$1 \\cdot 2 = 2$，$2 \\cdot 3 = 6$），而 $t=5$ 时的最终项为 $5 \\cdot 6 = 30$。因此，附息债券的总体凸性更低。\n$$C_{coupon}(y) < C_{zero}(y)$$\n\n**逐项分析**\n\n- **选项A：**\n  - **数值：** $27.21$。这是**正确**的。\n  - **解释：** 理由陈述为，零息债券的现金流完全发生在 $t=T$ 时，此时“曲率权重”$t(t+1)$ 最大。相比之下，附息债券的现金流分布到更早的时间点 $t$，这些点对应的 $t(t+1)$ 值较小，从而降低了加权平均值和总凸性。这一逻辑与我们的推导完全一致。\n  - **结论：** **正确**。\n\n- **选项B：**\n  - **数值：** $23.94$。这是**错误**的。\n  - **解释：** “较早的票息支付会产生更高的利率敏感性”这一说法在凸性的背景下具有误导性。虽然久期（一阶敏感度）较为复杂，但凸性（二阶敏感度）明确地会因较早的现金流而降低。此外，附息债券凸性更高的结论在事实上是错误的。\n  - **结论：** **错误**。\n\n- **选项C：**\n  - **数值：** $27.21$。这是**正确**的。\n  - **解释：** 该推理基于“零息债券的久期低于其他方面相同的附息债券”这一前提。这个前提是错误的。零息债券的麦考利久期（Macaulay duration）恰好等于其到期期限 $T=5$。而附息债券支付中间票息，因此其麦考利久期（现金流的加权平均时间）总是严格小于其到期期限 $T$。因此，对于给定的到期期限，零息债券具有*最高*的可能久期，而非最低。该推理存在根本性缺陷。\n  - **结论：** **错误**。\n\n- **选项D：**\n  - **数值：** $30.00$。这是**错误**的。我们的计算得出的结果约为 $27.21$。\n  - **解释：** 零息债券的凸性等于 $T(T+1)$ 的说法是错误的。它等于 $\\dfrac{T(T+1)}{(1+y)^2}$。所给公式错误地省略了分母 $(1+y)^2$，从而错误地断言其与收益率水平无关。\n  - **结论：** **错误**。\n\n只有选项 A 同时提供了正确的数值和科学的解释。", "answer": "$$\\boxed{A}$$", "id": "2376960"}, {"introduction": "从数值计算转向解析推导，这个练习将挑战您处理一个理论上但极具启发性的工具：永续债券。通过从第一性原理出发，为永续债券的凸性推导出一个封闭形式的表达式，您将揭示凸性与收益率之间强大的反比关系。此练习有助于您深入理解为什么在低收益率环境下，二阶风险（凸性）会变得异常重要。[@problem_id:2376948]", "problem": "考虑一种永续债券（也称统一公债），它在每年年末永久支付一笔金额为 $C$ 的固定票息。假设存在一个固定的年化到期收益率 $y$（按年复利），以小数形式表示（例如，$5\\%$ 表示为 $0.05$），并假设 $y>0$。根据基本现值原理，现值 $P(y)$ 被定义为折现现金流的无穷级数求和：\n$$\nP(y) \\equiv \\sum_{t=1}^{\\infty} \\frac{C}{(1+y)^{t}}.\n$$\n定义相对于收益率的价格凸性为\n$$\n\\mathcal{C}(y) \\equiv \\frac{1}{P(y)} \\frac{d^{2} P(y)}{d y^{2}}.\n$$\n请仅基于上述定义，推导出一个仅作为 $y$ 的函数的 $\\mathcal{C}(y)$ 的闭式表达式。然后，使用你推导出的表达式，定性地讨论当 $y>0$ 时 $\\mathcal{C}(y)$ 的行为，并说明其在 $y \\to 0^{+}$ 时的极限。你可以选择一个区间 $y \\in (0, \\bar{y}]$ 绘制 $\\mathcal{C}(y)$ 的图表来支持你的讨论，但最终只需报告解析表达式作为答案。\n\n答案规格：\n- 提供你的最终答案，形式为仅含 $y$ 的单个闭式解析表达式。\n- 无需四舍五入。\n- 最终答案中不要包含任何单位。", "solution": "我们将首先对问题陈述进行严格的验证过程。\n\n步骤 1：提取已知条件\n- 一只永续债券在每年年末支付固定票息，金额为 $C$。\n- 到期收益率为固定的年化利率 $y$，且 $y > 0$。\n- 现值定义为无穷级数：\n$$\nP(y) \\equiv \\sum_{t=1}^{\\infty} \\frac{C}{(1+y)^{t}}\n$$\n- 相对于收益率的价格凸性定义为：\n$$\n\\mathcal{C}(y) \\equiv \\frac{1}{P(y)} \\frac{d^{2} P(y)}{d y^{2}}\n$$\n- 任务是推导 $\\mathcal{C}(y)$ 的闭式表达式，使其仅作为 $y$ 的函数，并讨论其定性行为，包括其在 $y \\to 0^{+}$ 时的极限。\n\n步骤 2：验证\n该问题具有科学依据，因为它使用了金融数学中关于永续年金现值和债券凸性的标准基本定义。它是一个适定的问题，提供了所有必要的定义和约束条件（$y>0$），从而可以得出一个唯一的、有意义的 $\\mathcal{C}(y)$ 解。该问题是客观的，以清晰、明确的数学形式主义陈述。它没有违反任何指定的无效性标准。因此，该问题被视为有效。\n\n步骤 3：结论与行动\n问题有效。将推导出解答。\n\n推导过程如下。首先，我们必须找到现值 $P(y)$ 的闭式表达式。提供的 $P(y)$ 定义是一个几何级数：\n$$\nP(y) = \\sum_{t=1}^{\\infty} \\frac{C}{(1+y)^{t}} = C \\sum_{t=1}^{\\infty} \\left(\\frac{1}{1+y}\\right)^{t}\n$$\n这是一个首项为 $a = \\frac{1}{1+y}$、公比为 $r = \\frac{1}{1+y}$ 的几何级数。由于问题陈述 $y > 0$，因此有 $1+y > 1$，所以 $0 < \\frac{1}{1+y} < 1$。因为公比的绝对值小于 1，所以该级数收敛。无穷几何级数的和由 $\\frac{a}{1-r}$ 给出。\n应用此公式，我们得到：\n$$\n\\sum_{t=1}^{\\infty} \\left(\\frac{1}{1+y}\\right)^{t} = \\frac{\\frac{1}{1+y}}{1 - \\frac{1}{1+y}} = \\frac{\\frac{1}{1+y}}{\\frac{(1+y)-1}{1+y}} = \\frac{\\frac{1}{1+y}}{\\frac{y}{1+y}} = \\frac{1}{y}\n$$\n将此结果代回 $P(y)$ 的表达式中，得到永续年金现值的闭式表达式：\n$$\nP(y) = C \\left(\\frac{1}{y}\\right) = \\frac{C}{y}\n$$\n接下来，我们必须计算 $P(y)$ 相对于 $y$ 的二阶导数。首先，我们求一阶导数 $\\frac{d P(y)}{d y}$：\n$$\n\\frac{d P(y)}{d y} = \\frac{d}{dy}\\left(C y^{-1}\\right) = C(-1)y^{-2} = -\\frac{C}{y^{2}}\n$$\n现在，我们进行二次微分来求 $\\frac{d^{2} P(y)}{d y^{2}}$：\n$$\n\\frac{d^{2} P(y)}{d y^{2}} = \\frac{d}{dy}\\left(-\\frac{C}{y^{2}}\\right) = \\frac{d}{dy}\\left(-C y^{-2}\\right) = -C(-2)y^{-3} = \\frac{2C}{y^{3}}\n$$\n我们现在将 $P(y)$ 和 $\\frac{d^{2} P(y)}{d y^{2}}$ 的表达式代入凸性 $\\mathcal{C}(y)$ 的定义中：\n$$\n\\mathcal{C}(y) = \\frac{1}{P(y)} \\frac{d^{2} P(y)}{d y^{2}} = \\frac{1}{\\frac{C}{y}} \\left(\\frac{2C}{y^{3}}\\right)\n$$\n化简此表达式，我们观察到票息金额 $C$ 被消掉了，这与预期相符，因为凸性是与现金流结构和收益率相关的内在属性，而非票息的大小：\n$$\n\\mathcal{C}(y) = \\frac{y}{C} \\cdot \\frac{2C}{y^{3}} = \\frac{2y}{y^{3}} = \\frac{2}{y^{2}}\n$$\n这就是所求的永续债券凸性作为收益率 $y$ 的函数的闭式表达式。\n\n为了进行定性讨论，我们分析函数 $\\mathcal{C}(y) = \\frac{2}{y^{2}}$ 在 $y > 0$ 时的行为。\n1.  由于 $y > 0$，项 $y^{2}$ 严格为正。因此，$\\mathcal{C}(y) = \\frac{2}{y^{2}}$ 始终为正。这与常规债券（如本例中的永续债券）具有正凸性这一事实相符，意味着其价格-收益率曲线相对于原点是凸的。\n2.  随着收益率 $y$ 的增加，分母 $y^{2}$ 也增加，导致 $\\mathcal{C}(y)$ 的值减小。这种反比关系表明，在较高的收益率水平下，债券的凸性会减弱。随着 $y$ 的增长，价格-收益率曲线变得更平坦，或曲率更小。\n3.  我们需要求 $\\mathcal{C}(y)$ 在 $y \\to 0^{+}$ 时的极限。\n$$\n\\lim_{y \\to 0^{+}} \\mathcal{C}(y) = \\lim_{y \\to 0^{+}} \\frac{2}{y^{2}}\n$$\n当 $y$ 从正方向趋近于 0 时，$y^{2}$ 也从正方向趋近于 0。因此，该分式无界增长。\n$$\n\\lim_{y \\to 0^{+}} \\frac{2}{y^{2}} = +\\infty\n$$\n这个结果表明，对于非常低的收益率，债券表现出极高的凸性。价格-收益率关系变得高度非线性，仅基于久期（一阶导数）的价格近似变得非常不准确。由凸性捕捉到的二阶效应在这种情况下变得占主导地位。", "answer": "$$\n\\boxed{\\frac{2}{y^2}}\n$$", "id": "2376948"}, {"introduction": "最后的这项实践将理论与投资组合风险管理的实际应用相结合，展示了凸性为何不仅仅是一个抽象指标，更是一个关键的风险管理工具。您将设计一个算法，在利率发生平行移动后，通过求解一个约束优化问题来动态地重新平衡投资组合，以维持预设的久期和凸性目标。这项练习是理解和应用凸性进行风险免疫的绝佳实践，是高级固定收益策略的基石。[@problem_id:2376977]", "problem": "要求您设计并实现一个完整的、可运行的程序，该程序在发生平行收益率冲击后，动态地再平衡一个固定票息债券投资组合，以维持恒定的目标久期和凸性。您的推导和算法必须从现值的基本定义以及久期和凸性的基于导数的定义出发。请勿使用任何预封装的“捷径”公式；相反，您需要从第一性原理推导出必要的表达式。\n\n考虑一组由 $i \\in \\{1,\\dots,N\\}$ 索引的固定票息、每年付息的子弹式债券。每只债券 $i$ 的到期年限为 $T_i$（年）、年票面利率为 $c_i$（以每年小数表示）、面值归一化为 $1$、到期收益率 (YTM) 为 $y_i$（以每年小数表示）。债券 $i$ 作为收益率 $y$ 的函数的现值价格 $P_i(y)$ 由其未来现金流的贴现总和给出：\n$$\nP_i(y) \\equiv \\sum_{t=1}^{T_i} \\frac{\\mathrm{CF}_{i,t}}{(1+y)^t},\n$$\n其中，第 $t$ 年的现金流 $\\mathrm{CF}_{i,t}$ 在 $t \\in \\{1,\\dots,T_i-1\\}$ 时为 $c_i$，在 $t = T_i$ 时为 $1 + c_i$。\n\n将债券 $i$ 在收益率 $y$ 时的基于导数的修正久期 $D_i(y)$ 和凸性 $C_i(y)$ 定义为\n$$\nD_i(y) \\equiv -\\frac{1}{P_i(y)} \\frac{\\partial P_i}{\\partial y}(y), \\qquad\nC_i(y) \\equiv \\frac{1}{P_i(y)} \\frac{\\partial^2 P_i}{\\partial y^2}(y).\n$$\n\n设投资组合权重为 $w \\in \\mathbb{R}^N$，其中 $w_i$ 是债券 $i$ 的市值权重，且 $\\sum_{i=1}^N w_i = 1$。在当前收益率向量 $y = (y_1,\\dots,y_N)$ 下，投资组合的修正久期和凸性是各成分债券敏感性指标的市值加权平均：\n$$\nD^{\\mathrm{port}}(w,y) \\equiv \\sum_{i=1}^N w_i \\, D_i(y_i), \\qquad\nC^{\\mathrm{port}}(w,y) \\equiv \\sum_{i=1}^N w_i \\, C_i(y_i).\n$$\n\n您需要强制执行恒定目标 $D^\\star$ 和 $C^\\star$，这两个目标等于在基准收益率和初始权重下计算的投资组合初始修正久期和凸性。当施加一个平行收益率冲击 $\\Delta y$（即所有债券的收益率变为 $y_i + \\Delta y$）后，您必须重新平衡权重，以精确匹配目标，同时在欧几里得意义上使新权重与冲击前权重的偏差最小。形式上，给定冲击前权重 $w^{\\mathrm{prev}}$ 和冲击后债券层面的敏感性指标 $D_i(y_i+\\Delta y)$ 及 $C_i(y_i+\\Delta y)$，计算新权重 $w^{\\mathrm{new}}$，该权重是以下等式约束最小二乘问题的解：\n$$\n\\begin{aligned}\n\\min_{w \\in \\mathbb{R}^N} \\quad & \\| w - w^{\\mathrm{prev}} \\|_2^2 \\\\\n\\text{subject to} \\quad & \\sum_{i=1}^N w_i = 1, \\\\\n& \\sum_{i=1}^N w_i \\, D_i(y_i+\\Delta y) = D^\\star, \\\\\n& \\sum_{i=1}^N w_i \\, C_i(y_i+\\Delta y) = C^\\star.\n\\end{aligned}\n$$\n不施加不等式约束；如果为了达到目标有必要，允许卖空头寸。\n\n您的程序必须为每个测试用例执行的任务：\n1. 根据上述定义，通过直接对现值公式关于收益率进行微分，计算每只债券的价格 $P_i(y_i)$、修正久期 $D_i(y_i)$ 和凸性 $C_i(y_i)$。\n2. 使用基准权重 $w^{0}$ 和基准收益率 $y$ 计算初始投资组合目标 $D^\\star$ 和 $C^\\star$。\n3. 施加指定的平行收益率冲击 $\\Delta y$ 以获得冲击后收益率 $y_i^{\\mathrm{post}} = y_i + \\Delta y$，重新计算 $D_i(y_i^{\\mathrm{post}})$ 和 $C_i(y_i^{\\mathrm{post}})$，然后求解等式约束最小二乘问题，以获得在与 $w^{\\mathrm{prev}}$ 保持最小欧几里得偏差的情况下精确达到目标的 $w^{\\mathrm{new}}$。\n\n科学与数值细节：\n- 付息为每年一次。所有利率（$c_i$、$y_i$ 和 $\\Delta y$）必须作为每年小数处理（例如，0.05 表示每年百分之五）。不要使用百分号。\n- 久期的单位是年，凸性的单位是年平方。权重是加总为 $1$ 的无单位分数。\n- 本问题不涉及角度；不需要角度单位。\n- 对于数值输出，权重应四舍五入到 $6$ 位小数。\n\n测试套件：\n使用 $N=4$ 只具有以下特征的债券（每年付息，面值为 $1$）：\n- 债券 1：$T_1 = 2$， $c_1 = 0.03$，基准 $y_1 = 0.032$。\n- 债券 2：$T_2 = 5$， $c_2 = 0.04$，基准 $y_2 = 0.039$。\n- 债券 3：$T_3 = 10$， $c_3 = 0.05$，基准 $y_3 = 0.051$。\n- 债券 4：$T_4 = 30$， $c_4 = 0.06$，基准 $y_4 = 0.059$。\n\n所有测试用例的基准投资组合权重（冲击前）：\n- $w^{0} = [0.25, 0.25, 0.25, 0.25]$。\n\n通过在基准收益率下计算 $D^{\\mathrm{port}}(w^{0}, y)$ 和 $C^{\\mathrm{port}}(w^{0}, y)$ 来定义目标 $D^\\star$ 和 $C^\\star$。\n\n提供三个收益率冲击测试用例，每个用例都是从相同基准进行的单步再平衡：\n- 案例 A（理想路径）：$\\Delta y = 0.005$。\n- 案例 B（无操作边界）：$\\Delta y = 0.000$。\n- 案例 C（较大的负冲击）：$\\Delta y = -0.010$。\n\n最终输出格式：\n您的程序应产生单行输出，其中包含一个用方括号括起来的逗号分隔列表。列表中的每个元素是对应一个测试用例的再平衡权重 $w^{\\mathrm{new}}$ 列表，每个权重都四舍五入到 $6$ 位小数。例如：\n\"[[w1_A,w2_A,w3_A,w4_A],[w1_B,w2_B,w3_B,w4_B],[w1_C,w2_C,w3_C,w4_C]]\"。", "solution": "用户要求设计并实现一个程序，用以在收益率冲击后重新平衡债券投资组合，以维持恒定的久期和凸性，同时最小化投资组合权重的变化。\n\n### 第 1 步：提取已知条件\n\n- **债券**：一组 $N$ 只固定票息、每年付息的子弹式债券。\n- **债券参数**：对于每只债券 $i \\in \\{1, \\dots, N\\}$：到期年限 $T_i$（年）、年票面利率 $c_i$（小数）、面值 $1$、到期收益率 $y_i$（小数）。\n- **现值（价格）**：$P_i(y) = \\sum_{t=1}^{T_i} \\frac{\\mathrm{CF}_{i,t}}{(1+y)^t}$，其中当 $t < T_i$ 时 $\\mathrm{CF}_{i,t} = c_i$，当 $t = T_i$ 时 $\\mathrm{CF}_{i,T_i} = 1 + c_i$。\n- **修正久期**：$D_i(y) = -\\frac{1}{P_i(y)} \\frac{\\partial P_i}{\\partial y}(y)$。\n- **凸性**：$C_i(y) = \\frac{1}{P_i(y)} \\frac{\\partial^2 P_i}{\\partial y^2}(y)$。\n- **投资组合权重**：$w \\in \\mathbb{R}^N$，满足 $\\sum_{i=1}^N w_i = 1$。\n- **投资组合久期**：$D^{\\mathrm{port}}(w,y) = \\sum_{i=1}^N w_i \\, D_i(y_i)$。\n- **投资组合凸性**：$C^{\\mathrm{port}}(w,y) = \\sum_{i=1}^N w_i \\, C_i(y_i)$。\n- **优化问题**：\n  $$\n  \\begin{aligned}\n  \\min_{w \\in \\mathbb{R}^N} \\quad & \\| w - w^{\\mathrm{prev}} \\|_2^2 \\\\\n  \\text{subject to} \\quad & \\sum_{i=1}^N w_i = 1, \\\\\n  & \\sum_{i=1}^N w_i \\, D_i(y_i+\\Delta y) = D^\\star, \\\\\n  & \\sum_{i=1}^N w_i \\, C_i(y_i+\\Delta y) = C^\\star.\n  \\end{aligned}\n  $$\n- **目标**：$D^\\star$ 和 $C^\\star$ 是使用基准权重 $w^0$ 和基准收益率 $y$ 计算的初始投资组合久期和凸性。\n- **测试数据**：\n  - $N=4$ 只债券：\n    - 债券 1：$T_1 = 2$, $c_1 = 0.03$, $y_1 = 0.032$.\n    - 债券 2：$T_2 = 5$, $c_2 = 0.04$, $y_2 = 0.039$.\n    - 债券 3：$T_3 = 10$, $c_3 = 0.05$, $y_3 = 0.051$.\n    - 债券 4：$T_4 = 30$, $c_4 = 0.06$, $y_4 = 0.059$.\n  - 基准权重：$w^0 = [0.25, 0.25, 0.25, 0.25]$。\n  - 收益率冲击 $\\Delta y$：$0.005$、$0.000$、$-0.010$。\n\n### 第 2 步：使用提取的已知条件进行验证\n\n参照所需标准对问题陈述进行验证。\n\n- **科学依据**：该问题植根于金融数学和投资组合理论的既定原则。债券定价、修正久期和凸性作为价格-收益率函数的导数，是固定收益分析中的基本概念。该优化问题描述了一种标准的投资组合免疫策略。该问题在科学上是合理的。\n- **适定性**：该问题是一个等式约束二次规划 (QP) 问题。目标函数 $\\| w - w^{\\mathrm{prev}} \\|_2^2$ 是严格凸的，且约束是线性的。这种结构保证了只要约束不是线性相关的，就存在一个唯一的、稳定的、有意义的解。对于给定的债券数据，经过数值验证，冲击后久期和凸性的向量与全一向量是线性无关的，从而确保了约束矩阵是满秩的。该问题是适定的。\n- **客观性**：该问题使用标准的数学和金融符号以精确、量化的术语陈述。它不含主观、模糊或基于观点性的语言。\n- **完整性和一致性**：所有必要的数据（债券特征、初始权重、收益率冲击）和定义均已提供。该问题是自洽的，没有内部矛盾。\n- **现实性**：债券参数和收益率冲击在金融市场的现实范围内。再平衡策略是动态对冲的一个实用（尽管简化了）的表示。\n- **可验证性**：解决方案可以进行解析推导和数值实现，产生可验证和可复现的结果。\n\n### 第 3 步：结论与行动\n\n问题陈述是有效的。它在科学上是合理的、适定的、客观的且完整的。可以推导并实现一个严谨的解决方案。我将继续进行解决方案的推导。\n\n### 基于原理的解决方案设计\n\n解决方案分三步制定：首先，从第一性原理推导债券敏感性的解析表达式；其次，使用拉格朗日乘数法求解约束优化问题；第三，概述计算算法。\n\n**1. 债券敏感性的推导**\n\n债券 i 的价格由其贴现现金流的总和给出：\n$$\nP_i(y) = \\sum_{t=1}^{T_i} \\frac{\\mathrm{CF}_{i,t}}{(1+y)^t}\n$$\n为了求得修正久期和凸性，我们必须计算价格 $P_i(y)$ 相对于收益率 $y$ 的一阶和二阶偏导数。\n\n一阶导数通过逐项微分求得：\n$$\n\\frac{\\partial P_i}{\\partial y}(y) = \\frac{\\partial}{\\partial y} \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} (1+y)^{-t} = \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} \\frac{\\partial}{\\partial y} (1+y)^{-t} = \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} (-t) (1+y)^{-t-1}\n$$\n二阶导数通过对一阶导数微分求得：\n$$\n\\frac{\\partial^2 P_i}{\\partial y^2}(y) = \\frac{\\partial}{\\partial y} \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} (-t) (1+y)^{-t-1} = \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} (-t) (-(t+1)) (1+y)^{-t-2} = \\sum_{t=1}^{T_i} \\mathrm{CF}_{i,t} \\, t(t+1) (1+y)^{-t-2}\n$$\n使用给定的定义，修正久期 $D_i(y)$ 和凸性 $C_i(y)$ 为：\n$$\nD_i(y) = -\\frac{1}{P_i(y)} \\frac{\\partial P_i}{\\partial y}(y) = \\frac{1}{P_i(y)} \\sum_{t=1}^{T_i} \\frac{t \\cdot \\mathrm{CF}_{i,t}}{(1+y)^{t+1}}\n$$\n$$\nC_i(y) = \\frac{1}{P_i(y)} \\frac{\\partial^2 P_i}{\\partial y^2}(y) = \\frac{1}{P_i(y)} \\sum_{t=1}^{T_i} \\frac{t(t+1) \\cdot \\mathrm{CF}_{i,t}}{(1+y)^{t+2}}\n$$\n这些公式允许直接计算债券敏感性，构成了我们算法的基础。\n\n**2. 约束优化问题的求解**\n\n再平衡问题旨在找到新的权重向量 $w^{\\mathrm{new}}$，该向量在满足三个线性等式约束的条件下，最小化与前一个权重向量 $w^{\\mathrm{prev}}$ 的欧几里得距离平方。我们可以将目标函数简化为 $\\frac{1}{2} \\| w - w^{\\mathrm{prev}} \\|_2^2$，而不会改变最优解。问题是：\n$$\n\\begin{aligned}\n\\min_{w \\in \\mathbb{R}^N} \\quad & \\frac{1}{2} \\| w - w^{\\mathrm{prev}} \\|_2^2 \\\\\n\\text{subject to} \\quad & \\sum_{i=1}^N w_i = 1, \\\\\n& \\sum_{i=1}^N w_i D^{\\mathrm{post}}_i = D^\\star, \\\\\n& \\sum_{i=1}^N w_i C^{\\mathrm{post}}_i = C^\\star.\n\\end{aligned}\n$$\n其中 $D^{\\mathrm{post}}_i = D_i(y_i+\\Delta y)$ 和 $C^{\\mathrm{post}}_i = C_i(y_i+\\Delta y)$ 是冲击后的敏感性指标。\n\n这是一个经典的带线性等式约束的二次规划问题，可以使用拉格朗日乘数法求解。拉格朗日函数 $\\mathcal{L}$ 是：\n$$\n\\mathcal{L}(w, \\lambda) = \\frac{1}{2} \\sum_{k=1}^N (w_k - w_k^{\\mathrm{prev}})^2 - \\lambda_1 \\left( \\sum_{k=1}^N w_k - 1 \\right) - \\lambda_2 \\left( \\sum_{k=1}^N w_k D^{\\mathrm{post}}_k - D^\\star \\right) - \\lambda_3 \\left( \\sum_{k=1}^N w_k C^{\\mathrm{post}}_k - C^\\star \\right)\n$$\n其中 $\\lambda = (\\lambda_1, \\lambda_2, \\lambda_3)$ 是拉格朗日乘子向量。最优性的一阶条件是 $\\nabla_w \\mathcal{L} = 0$。对于每个权重 $w_k$：\n$$\n\\frac{\\partial \\mathcal{L}}{\\partial w_k} = (w_k - w_k^{\\mathrm{prev}}) - \\lambda_1 - \\lambda_2 D^{\\mathrm{post}}_k - \\lambda_3 C^{\\mathrm{post}}_k = 0\n$$\n求解 $w_k$，我们用拉格朗日乘子表示最优权重：\n$$\nw_k = w_k^{\\mathrm{prev}} + \\lambda_1 + \\lambda_2 D^{\\mathrm{post}}_k + \\lambda_3 C^{\\mathrm{post}}_k\n$$\n这可以写成矩阵形式。设约束矩阵 $A$ 是一个 $3 \\times N$ 的矩阵，其行是约束中权重的系数，设向量 $b$ 包含约束的常数项：\n$$\nA = \\begin{pmatrix} 1 & 1 & \\dots & 1 \\\\ D^{\\mathrm{post}}_1 & D^{\\mathrm{post}}_2 & \\dots & D^{\\mathrm{post}}_N \\\\ C^{\\mathrm{post}}_1 & C^{\\mathrm{post}}_2 & \\dots & C^{\\mathrm{post}}_N \\end{pmatrix}, \\quad b = \\begin{pmatrix} 1 \\\\ D^\\star \\\\ C^\\star \\end{pmatrix}\n$$\n线性约束系统为 $A w = b$。最优权重向量 $w$ 的表达式为：\n$$\nw = w^{\\mathrm{prev}} + A^T \\lambda\n$$\n为了求出未知的拉格朗日乘子 $\\lambda$，我们将 $w$ 的这个表达式代回到约束方程 $A w = b$ 中：\n$$\nA(w^{\\mathrm{prev}} + A^T \\lambda) = b \\implies A w^{\\mathrm{prev}} + (A A^T) \\lambda = b\n$$\n这给出了一个关于 $\\lambda$ 的线性系统：\n$$\n(A A^T) \\lambda = b - A w^{\\mathrm{prev}}\n$$\n矩阵 $A A^T$ 是一个 $3 \\times 3$ 的矩阵。假设它是可逆的（对于给定的问题数据，它确实是可逆的），我们可以解出 $\\lambda$：\n$$\n\\lambda = (A A^T)^{-1} (b - A w^{\\mathrm{prev}})\n$$\n一旦计算出 $\\lambda$，将 $\\lambda$ 代回到 $w$ 的表达式中，即可找到新的权重向量 $w^{\\mathrm{new}}$。\n\n**3. 算法实现**\n\n对于每个测试用例，算法按以下步骤进行：\n1.  **初始化**：计算每只债券 $i$ 在基准收益率 $y_i$ 下的初始敏感性指标 $D_i(y_i)$ 和 $C_i(y_i)$。\n2.  **目标计算**：使用初始权重 $w^0$ 计算投资组合的目标久期 $D^\\star$ 和凸性 $C^\\star$：\n    $D^\\star = \\sum_{i=1}^N w_i^0 D_i(y_i)$ 以及 $C^\\star = \\sum_{i=1}^N w_i^0 C_i(y_i)$。\n3.  **冲击后计算**：对于给定的收益率冲击 $\\Delta y$，计算每只债券的冲击后收益率 $y_i^{\\mathrm{post}} = y_i + \\Delta y$。然后，计算新的敏感性指标 $D^{\\mathrm{post}}_i = D_i(y_i^{\\mathrm{post}})$ 和 $C^{\\mathrm{post}}_i = C_i(y_i^{\\mathrm{post}})$。\n4.  **求解新权重**：\n    a. 构造 $3 \\times N$ 的约束矩阵 $A$ 和 $3 \\times 1$ 的目标向量 $b$。\n    b. 计算 $3 \\times 3$ 的矩阵 $M = A A^T$。\n    c. 计算 $3 \\times 1$ 的右侧向量 $R = b - A w^{\\mathrm{prev}}$（其中 $w^{\\mathrm{prev}} = w^0$）。\n    d. 求解线性系统 $M \\lambda = R$ 以得到拉格朗日乘子 $\\lambda$。\n    e. 计算新的权重向量 $w^{\\mathrm{new}} = w^{\\mathrm{prev}} + A^T \\lambda$。\n5.  **输出**：根据指定的输出格式存储和格式化结果 $w^{\\mathrm{new}}$。对所有给定的收益率冲击重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for rebalanced bond portfolio weights after yield shocks.\n    \"\"\"\n\n    def calculate_bond_sensitivities(T, c, y):\n        \"\"\"\n        Calculates price, modified duration, and convexity of a single bond\n        from first principles.\n\n        Args:\n            T (int): Maturity in years.\n            c (float): Annual coupon rate as a decimal.\n            y (float): Yield to maturity as a decimal.\n\n        Returns:\n            tuple: A tuple containing (price, duration, convexity).\n        \"\"\"\n        if y = -1.0:\n            raise ValueError(\"Yield must be greater than -1.\")\n            \n        price_val = 0.0\n        dp_dy_sum = 0.0\n        d2p_dy2_sum = 0.0\n        \n        for t in range(1, T + 1):\n            if t  T:\n                cf = c\n            else:  # At maturity, cash flow is coupon + face value (1)\n                cf = 1.0 + c\n            \n            discount_factor = (1.0 + y) ** (-t)\n            \n            # Accumulate terms for price and derivatives based on summation formulas\n            price_val += cf * discount_factor\n            dp_dy_sum += cf * (-t) * (1.0 + y) ** (-t - 1.0)\n            d2p_dy2_sum += cf * t * (t + 1.0) * (1.0 + y) ** (-t - 2.0)\n            \n        # Calculate Modified Duration and Convexity from their definitions\n        # D = - (1/P) * (dP/dy)\n        # C =   (1/P) * (d^2P/dy^2)\n        if price_val == 0.0:\n             # Avoid division by zero, though unlikely for these params\n            return 0.0, 0.0, 0.0\n\n        duration = - (1.0 / price_val) * dp_dy_sum\n        convexity = (1.0 / price_val) * d2p_dy2_sum\n        \n        return price_val, duration, convexity\n\n    # Define the test cases from the problem statement.\n    bonds = [\n        {'T': 2, 'c': 0.03, 'y': 0.032},\n        {'T': 5, 'c': 0.04, 'y': 0.039},\n        {'T': 10, 'c': 0.05, 'y': 0.051},\n        {'T': 30, 'c': 0.06, 'y': 0.059}\n    ]\n    N = len(bonds)\n    w_initial = np.array([0.25, 0.25, 0.25, 0.25])\n    \n    test_cases = [\n        0.005,   # Case A\n        0.000,   # Case B\n        -0.010   # Case C\n    ]\n\n    # --- Step 1  2: Calculate initial portfolio state and targets D*, C* ---\n    initial_durations = np.zeros(N)\n    initial_convexities = np.zeros(N)\n    for i, bond in enumerate(bonds):\n        _, D, C = calculate_bond_sensitivities(bond['T'], bond['c'], bond['y'])\n        initial_durations[i] = D\n        initial_convexities[i] = C\n    \n    D_target = np.sum(w_initial * initial_durations)\n    C_target = np.sum(w_initial * initial_convexities)\n\n    all_results = []\n    \n    # Process each yield shock test case\n    for delta_y in test_cases:\n        w_prev = w_initial\n        \n        # --- Step 3: Calculate post-shock sensitivities ---\n        post_shock_durations = np.zeros(N)\n        post_shock_convexities = np.zeros(N)\n        for i, bond in enumerate(bonds):\n            post_shock_yield = bond['y'] + delta_y\n            _, D_post, C_post = calculate_bond_sensitivities(bond['T'], bond['c'], post_shock_yield)\n            post_shock_durations[i] = D_post\n            post_shock_convexities[i] = C_post\n\n        # --- Step 4: Solve the constrained optimization problem ---\n        # min ||w - w_prev||^2 subject to A*w = b\n        \n        # The constraint matrix A is a 3xN matrix\n        A = np.array([\n            np.ones(N),\n            post_shock_durations,\n            post_shock_convexities\n        ])\n        \n        # The constraint vector b is a 3x1 vector\n        b = np.array([1.0, D_target, C_target])\n        \n        # Solve for Lagrange multipliers lambda: (A*A.T)*lambda = b - A*w_prev\n        M = A @ A.T  # This is a 3x3 matrix\n        rhs = b - (A @ w_prev) # This is a 3x1 vector\n        \n        # Solve the 3x3 system M * lambda = rhs\n        lagrange_multipliers = np.linalg.solve(M, rhs)\n        \n        # Calculate new weights: w_new = w_prev + A.T * lambda\n        w_new = w_prev + A.T @ lagrange_multipliers\n        \n        all_results.append(w_new)\n\n    # --- Final print statement in the exact required format ---\n    # Example: [[w1_A,w2_A,w3_A,w4_A],[w1_B,w2_B,w3_B,w4_B],[w1_C,w2_C,w3_C,w4_C]]\n    case_strings = []\n    for result_vector in all_results:\n        # Round each weight to 6 decimal places and format as a string\n        weight_strings = [f\"{w:.6f}\" for w in result_vector]\n        # Join weights for one case into a string like \"[w1,w2,w3,w4]\"\n        case_strings.append(f\"[{','.join(weight_strings)}]\")\n\n    # Join all case strings into the final format \"[[...],[...],...]\"\n    final_output_string = f\"[{','.join(case_strings)}]\"\n    print(final_output_string)\n\nsolve()\n```", "id": "2376977"}]}