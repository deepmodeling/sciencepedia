{"hands_on_practices": [{"introduction": "掌握多期二叉树模型的关键在于熟练运用其核心定价机制。这个练习将引导你为一种常见的奇异期权——封顶看涨期权——定价，其收益在达到预设上限后将不再增加。通过这个实践 [@problem_id:2412781]，你将巩固如何构建资产价格树、计算风险中性概率，并运用回溯归纳法来处理非标准的期权收益结构，这是将理论模型应用于现实金融产品的重要一步。", "problem": "考虑一个无摩擦、无套利的市场。某单一风险资产的当前价格为 $S_0 = 100$，并根据一个重组二叉树模型在 $N = 3$ 个等长时期内演变，每期的固定上涨因子为 $u = 1.2$，下跌因子为 $d = 0.9$。无风险资产以每期固定的有效利率 $r = 0.05$ 增长，因此每期的总回报率为 $R = 1 + r = 1.05$。该风险资产不支付股息。\n\n一份基于该风险资产的欧式封顶看涨期权的执行价格为 $K = 100$，封顶金额为 $C = 15$。其在到期日 $T$ 的收益由 $\\min\\!\\big(\\max(S_T - K, 0), C\\big)$ 给出。假设上述二叉树模型及参数在期权的整个存续期内均有效。\n\n在该二叉树模型的无套利原则下，计算此封顶看涨期权在时间 $t=0$ 的无套利价格。以与 $S_0$ 相同的货币单位表示您的最终答案，并四舍五入至 $4$ 位有效数字。在您的最终数值中不要包含任何货币符号。", "solution": "所述问题是有效的。这是一个量化金融领域内自洽且有科学依据的问题。二叉树期权定价模型所需的所有参数均已提供：初始资产价格 $S_0$、上涨因子 $u$、下跌因子 $d$、无风险利率 $r$、期数 $N$，以及衍生品的特定收益结构（一份执行价格为 $K$、封顶金额为 $C$ 的欧式封顶看涨期权）。该模型基于无套利基本原则，这是金融理论的基石。唯一风险中性概率存在的无套利条件 $d < R < u$（其中 $R = 1+r$）是满足的。给定 $d=0.9$，$u=1.2$ 和 $R=1.05$，我们有 $0.9 < 1.05 < 1.2$。因此，该问题是适定的，并且可以计算出唯一的无套利价格。\n\n该欧式封顶看涨期权在时间 $t=0$ 的价格（记为 $V_0$）由风险中性定价原则确定。该原则指出，衍生品的当前价格是其未来收益的折现期望值，其中期望是在风险中性概率测度下计算的，折现则使用无风险利率。\n\n首先，我们必须计算资产价格上涨的风险中性概率 $q$。$q$ 的公式由以下条件推导得出：在风险中性测度下，风险资产的预期回报率必须等于无风险回报率。\n$$\nq S_0 u + (1-q) S_0 d = S_0 R\n$$\n求解 $q$，我们得到：\n$$\nq = \\frac{R - d}{u - d}\n$$\n代入给定值：$R = 1.05$，$u = 1.2$，$d = 0.9$。\n$$\nq = \\frac{1.05 - 0.9}{1.2 - 0.9} = \\frac{0.15}{0.30} = 0.5\n$$\n下跌的概率为 $1 - q = 1 - 0.5 = 0.5$。\n\n该问题涉及 $N=3$ 个时期。标的资产在到期日 $S_T = S_3$ 的价格可以取 $N+1 = 4$ 个不同的值。设 $j$ 为 $N$ 个时期内价格上涨的次数。到期日的资产价格由 $S_3(j) = S_0 u^j d^{N-j}$ 给出。可能的终端价格为：\n-   对于 $j=3$ (3次上涨): $S_3(3) = 100 \\times (1.2)^3 = 100 \\times 1.728 = 172.8$\n-   对于 $j=2$ (2次上涨, 1次下跌): $S_3(2) = 100 \\times (1.2)^2 \\times (0.9)^1 = 100 \\times 1.44 \\times 0.9 = 129.6$\n-   对于 $j=1$ (1次上涨, 2次下跌): $S_3(1) = 100 \\times (1.2)^1 \\times (0.9)^2 = 100 \\times 1.2 \\times 0.81 = 97.2$\n-   对于 $j=0$ (3次下跌): $S_3(0) = 100 \\times (0.9)^3 = 100 \\times 0.729 = 72.9$\n\n接下来，我们计算在每个终端资产价格下，期权在到期日 $V_3$ 的收益。收益定义为 $V_3 = \\min(\\max(S_3 - K, 0), C)$，其中执行价格 $K=100$，封顶金额 $C=15$。\n-   在 $S_3(3) = 172.8$ 时的收益: $V_3(3) = \\min(\\max(172.8 - 100, 0), 15) = \\min(72.8, 15) = 15$。\n-   在 $S_3(2) = 129.6$ 时的收益: $V_3(2) = \\min(\\max(129.6 - 100, 0), 15) = \\min(29.6, 15) = 15$。\n-   在 $S_3(1) = 97.2$ 时的收益: $V_3(1) = \\min(\\max(97.2 - 100, 0), 15) = \\min(0, 15) = 0$。\n-   在 $S_3(0) = 72.9$ 时的收益: $V_3(0) = \\min(\\max(72.9 - 100, 0), 15) = \\min(0, 15) = 0$。\n\n时间 $t=0$ 的无套利价格是风险中性测度下预期收益的现值。在 $N$ 个时期内实现 $j$ 次上涨状态的概率遵循概率为 $q$ 的二项分布。该概率由 $\\binom{N}{j} q^j (1-q)^{N-j}$ 给出。\n$$\nV_0 = \\frac{1}{R^N} \\sum_{j=0}^{N} \\binom{N}{j} q^j (1-q)^{N-j} V_3(j)\n$$\n代入 $N=3$，$R=1.05$ 和 $q=0.5$：\n$$\nV_0 = \\frac{1}{(1.05)^3} \\left[ \\binom{3}{0}(0.5)^3 V_3(0) + \\binom{3}{1}(0.5)^3 V_3(1) + \\binom{3}{2}(0.5)^3 V_3(2) + \\binom{3}{3}(0.5)^3 V_3(3) \\right]\n$$\n二项式系数为 $\\binom{3}{0}=1$，$\\binom{3}{1}=3$，$\\binom{3}{2}=3$，$\\binom{3}{3}=1$。\n$$\nV_0 = \\frac{(0.5)^3}{(1.05)^3} \\left[ 1 \\cdot V_3(0) + 3 \\cdot V_3(1) + 3 \\cdot V_3(2) + 1 \\cdot V_3(3) \\right]\n$$\n代入计算出的收益值：\n$$\nV_0 = \\frac{0.125}{(1.05)^3} \\left[ 1 \\cdot 0 + 3 \\cdot 0 + 3 \\cdot 15 + 1 \\cdot 15 \\right]\n$$\n$$\nV_0 = \\frac{0.125}{(1.05)^3} \\left[ 45 + 15 \\right] = \\frac{0.125 \\times 60}{(1.05)^3} = \\frac{7.5}{(1.05)^3}\n$$\n现在，我们计算数值。\n$$\n(1.05)^3 = 1.157625\n$$\n$$\nV_0 = \\frac{7.5}{1.157625} \\approx 6.4788506...\n$$\n问题要求答案四舍五入至 $4$ 位有效数字。\n$$\nV_0 \\approx 6.479\n$$\n这是该欧式封顶看涨期权在时间 $t=0$ 的无套利价格。", "answer": "$$\n\\boxed{6.479}\n$$", "id": "2412781"}, {"introduction": "超越简单的期权定价，理解期权价值如何随市场变化而动态演变至关重要。本练习 [@problem_id:2412797] 将深入探讨一个看似有悖常理的概念：正的Theta($\\Theta$)，即期权价值随时间流逝而增加。通过分析一个含股息股票上的美式看涨期权，你将发现为何放弃股息的持有成本会影响期权的时间价值，从而揭示看似简单的“时间衰减”背后的复杂经济权衡。", "problem": "考虑一个基于两步Cox–Ross–Rubinstein (CRR)二叉树模型定价的、支付股息股票的美式看涨期权。在时间$t=0$时，股票价格为$S_0 = 100$。该期权的执行价格为$K = 95$，到期日为$T = 0.5$年。连续复利无风险利率为每年$r = 0.02$，连续股息率为每年$q = 0.08$，年化波动率为$\\sigma = 0.20$。该二叉树使用$N=2$个相等的时间步，因此$\\Delta t = T/N = 0.25$。在CRR模型中，上涨因子和下跌因子分别为$u = e^{\\sigma \\sqrt{\\Delta t}}$和$d = 1/u$，风险中性概率为$p^\\ast = \\dfrac{e^{(r-q)\\Delta t} - d}{u - d}$。在每个节点，时间$\\Delta t$的折现因子为$e^{-r \\Delta t}$。美式看涨期权在某个节点上的价值等于其续存价值（下一步期权价值的折现风险中性期望）与其立即执行价值中的较大者。\n\n定义在$t=0$和$S=S_0$处的离散Theta值$\\Theta$为期权价值对时间（保持$S$固定）的偏导数的有限差分近似。通过在时间$\\Delta t$时价格为$S_0 u$和$S_0 d$的两个期权价值之间进行线性插值，来近似$C(t+\\Delta t, S_0)$在$S=S_0$处的值。然后，将离散Theta值计算为\n$$\n\\Theta \\approx \\frac{C(t+\\Delta t, S_0) - C(t, S_0)}{\\Delta t}.\n$$\n使用此框架，确定哪个陈述是正确的。\n\nA. 对于给定的参数，在$t=0$和$S_0=100$处的离散$\\Theta$值为正。更一般地，在具有连续股息率$q$超过$r$的多期二叉树模型中，对于价内状态，续存区域中可能存在美式看涨期权呈现正$\\Theta$值的区域。\n\nB. 对于给定的参数，在$t=0$和$S_0=100$处的离散$\\Theta$值为负；无论股息如何，时间衰减总是会降低看涨期权的价值，因此在所有节点上$\\Theta<0$。\n\nC. 对于给定的参数，在$t=0$和$S_0=100$处的离散$\\Theta$值为零，因为在$t=0$时立即执行是最优的。\n\nD. 美式看涨期权的正$\\Theta$值只能在立即执行为最优的节点上出现；否则$\\Theta$值为非正。", "solution": "在尝试解答之前，对问题陈述进行验证。\n\n**步骤1：提取已知条件**\n-   模型：针对美式看涨期权的两步Cox–Ross–Rubinstein (CRR)二叉树模型。\n-   初始股价：$S_0 = 100$。\n-   执行价格：$K = 95$。\n-   到期日：$T = 0.5$年。\n-   时间步数：$N=2$。\n-   时间步长：$\\Delta t = T/N = 0.25$年。\n-   连续复利无风险利率：每年$r = 0.02$。\n-   连续股息率：每年$q = 0.08$。\n-   年化波动率：$\\sigma = 0.20$。\n-   上涨因子：$u = e^{\\sigma \\sqrt{\\Delta t}}$。\n-   下跌因子：$d = 1/u$。\n-   风险中性概率：$p^\\ast = \\dfrac{e^{(r-q)\\Delta t} - d}{u - d}$。\n-   时间$\\Delta t$的折现因子：$e^{-r \\Delta t}$。\n-   美式看涨期权价值规则：在任何节点，价值是其续存价值和立即执行价值中的最大值。\n-   离散Theta定义：$\\Theta \\approx \\frac{C(t+\\Delta t, S_0) - C(t, S_0)}{\\Delta t}$，其中$C(t+\\Delta t, S_0)$是通过对$t+\\Delta t$时刻的期权价值进行线性插值得到的。\n\n**步骤2：使用提取的已知条件进行验证**\n-   **科学依据**：问题使用了标准的CRR二叉树模型，这是计算金融学的基本工具。所有定义和参数都是标准的且科学上有效。$q > r$这一条件是一个关键特征，它既现实又会导致美式期权的非平凡行为。\n-   **问题的良定性**：问题是良定的。它提供了所有必要的数据和清晰、明确的程序来计算离散Theta值。存在唯一的数值解。\n-   **客观性**：问题以精确、客观的数学语言陈述。\n\n**步骤3：结论和行动**\n问题有效。它科学合理、良定且客观。将推导求解。\n\n**推导**\n\n首先，我们计算二叉树模型的参数。\n时间步长为 $\\Delta t = T/N = 0.5 / 2 = 0.25$。\n上涨和下跌因子为：\n$$ u = e^{\\sigma \\sqrt{\\Delta t}} = e^{0.20 \\sqrt{0.25}} = e^{0.10} \\approx 1.105171 $$\n$$ d = 1/u = e^{-0.10} \\approx 0.904837 $$\n风险中性概率$p^\\ast$为：\n$$ p^\\ast = \\frac{e^{(r-q)\\Delta t} - d}{u - d} = \\frac{e^{(0.02-0.08)(0.25)} - e^{-0.10}}{e^{0.10} - e^{-0.10}} = \\frac{e^{-0.015} - e^{-0.10}}{e^{0.10} - e^{-0.10}} $$\n$$ p^\\ast \\approx \\frac{0.985112 - 0.904837}{1.105171 - 0.904837} = \\frac{0.080275}{0.200334} \\approx 0.40069 $$\n单期折现因子为：\n$$ e^{-r\\Delta t} = e^{-0.02 \\times 0.25} = e^{-0.005} \\approx 0.9950125 $$\n\n接下来，我们构建$N=2$步的股价树。\n-   时间$t=0$：$S_0 = 100$。\n-   时间$t=\\Delta t=0.25$：\n    -   $S_u = S_0 u \\approx 100 \\times 1.105171 = 110.5171$\n    -   $S_d = S_0 d \\approx 100 \\times 0.904837 = 90.4837$\n-   时间$t=2\\Delta t=0.5$：\n    -   $S_{uu} = S_u u \\approx 110.5171 \\times 1.105171 = 122.140$\n    -   $S_{ud} = S_u d = S_d u = S_0 = 100.000$\n    -   $S_{dd} = S_d d \\approx 90.4837 \\times 0.904837 = 81.873$\n\n现在，我们从到期日$T=0.5$开始通过向后归纳法为美式看涨期权估值。执行价格为$K=95$。到期时期权价值为$C = \\max(S-K, 0)$。\n-   在节点$(uu)$处：$C_{uu} = \\max(S_{uu} - K, 0) = \\max(122.140 - 95, 0) = 27.140$。\n-   在节点$(ud)$处：$C_{ud} = \\max(S_{ud} - K, 0) = \\max(100.000 - 95, 0) = 5.000$。\n-   在节点$(dd)$处：$C_{dd} = \\max(S_{dd} - K, 0) = \\max(81.873 - 95, 0) = 0$。\n\n接下来，我们回退到$t=\\Delta t=0.25$并计算期权价值，检查是否提前执行。\n-   在节点$(u)$处：\n    -   续存价值：$C_{u, \\text{cont}} = e^{-r\\Delta t} [p^\\ast C_{uu} + (1-p^\\ast) C_{ud}] \\approx 0.9950125 [0.40069 \\times 27.140 + 0.59931 \\times 5.000] \\approx 0.9950125 [10.8730 + 2.9966] \\approx 13.800$。\n    -   立即执行价值：$C_{u, \\text{exer}} = \\max(S_u - K, 0) = \\max(110.5171 - 95, 0) = 15.5171$。\n    -   期权价值为 $C_u = \\max(C_{u, \\text{cont}}, C_{u, \\text{exer}}) = \\max(13.800, 15.5171) = 15.5171$。在此节点提前执行是最优的。\n-   在节点$(d)$处：\n    -   续存价值：$C_{d, \\text{cont}} = e^{-r\\Delta t} [p^\\ast C_{ud} + (1-p^\\ast) C_{dd}] \\approx 0.9950125 [0.40069 \\times 5.000 + 0.59931 \\times 0] \\approx 0.9950125 [2.00345] \\approx 1.993$。\n    -   立即执行价值：$C_{d, \\text{exer}} = \\max(S_d - K, 0) = \\max(90.4837 - 95, 0) = 0$。\n    -   期权价值为 $C_d = \\max(C_{d, \\text{cont}}, C_{d, \\text{exer}}) = \\max(1.993, 0) = 1.993$。\n\n最后，我们回退到$t=0$以找到初始期权价值，$C_0 = C(t=0, S_0)$。\n-   在节点$(0)$处：\n    -   续存价值：$C_{0, \\text{cont}} = e^{-r\\Delta t} [p^\\ast C_u + (1-p^\\ast) C_d] \\approx 0.9950125 [0.40069 \\times 15.5171 + (1-0.40069) \\times 1.993] \\approx 0.9950125 [6.2163 + 1.1944] \\approx 0.9950125 \\times 7.4107 \\approx 7.374$。\n    -   立即执行价值：$C_{0, \\text{exer}} = \\max(S_0 - K, 0) = \\max(100 - 95, 0) = 5$。\n    -   期权价值为 $C(t=0, S_0) = C_0 = \\max(C_{0, \\text{cont}}, C_{0, \\text{exer}}) = \\max(7.374, 5) = 7.374$。在$t=0$时，提前执行不是最优的。\n\n现在我们计算离散Theta值。我们有$C(t=0, S_0) \\approx 7.374$。我们需要通过在股价$S_u$和$S_d$处的$C_u$和$C_d$之间进行线性插值来找到$C(t=\\Delta t, S_0)$。\n要寻找的值是在$S=S_0=100$处，介于$(S_d, C_d) \\approx (90.4837, 1.993)$和$(S_u, C_u) \\approx (110.5171, 15.5171)$之间。\n$$ C(\\Delta t, S_0) \\approx C_d + \\left(\\frac{S_0 - S_d}{S_u - S_d}\\right)(C_u - C_d) $$\n$$ C(\\Delta t, S_0) \\approx 1.993 + \\left(\\frac{100 - 90.4837}{110.5171 - 90.4837}\\right)(15.5171 - 1.993) $$\n$$ C(\\Delta t, S_0) \\approx 1.993 + \\left(\\frac{9.5163}{20.0334}\\right)(13.5241) \\approx 1.993 + 0.47501 \\times 13.5241 \\approx 1.993 + 6.4241 \\approx 8.417 $$\n那么离散Theta值为：\n$$ \\Theta \\approx \\frac{C(\\Delta t, S_0) - C(0, S_0)}{\\Delta t} \\approx \\frac{8.417 - 7.374}{0.25} = \\frac{1.043}{0.25} = 4.172 $$\n计算出的离散Theta值为正。\n\n**逐项分析**\n\n**A. 对于给定的参数，在$t=0$和$S_0=100$处的离散$\\Theta$值为正。更一般地，在具有连续股息率$q$超过$r$的多期二叉树模型中，对于价内状态，续存区域中可能存在美式看涨期权呈现正$\\Theta$值的区域。**\n我们的计算得出$\\Theta \\approx 4.172$，为正值。这证实了陈述的第一部分。第二部分提供了正确的理论依据。对于美式看涨期权，持有者会放弃股息。当股息率$q$很高（特别是$q>r$）时，这代表了显著的机会成本。随着时间的推移和到期日的临近，被放弃的股息流的现值会减少。这种持有成本的降低可以增加期权的价值，为Theta贡献一个正的分量，该分量可能超过标准负时间衰减分量（与时间流逝和执行价格现值增加相关）。对于那些处于价内、接近但尚未达到提前执行边界的期权，这种效应最为明显。我们在$t=0$的计算恰恰表明了这一点：期权是价内（$S_0>K$）但未被执行（$C_0 > S_0-K$），并且$\\Theta$为正。\n**结论：正确。**\n\n**B. 对于给定的参数，在$t=0$和$S_0=100$处的离散$\\Theta$值为负；无论股息如何，时间衰减总是会降低看涨期权的价值，因此在所有节点上$\\Theta<0$。**\n计算表明$\\Theta > 0$，直接与第一个论断相矛盾。第二个论断，即看涨期权的时间衰减总是负的，是一种常见的过度简化。如选项A中所解释，对于高股息率股票的美式看涨期权，这一说法通常是错误的。\n**结论：不正确。**\n\n**C. 对于给定的参数，在$t=0$和$S_0=100$处的离散$\\Theta$值为零，因为在$t=0$时立即执行是最优的。**\n我们的计算表明，在$t=0$时，期权的续存价值为$C_0 \\approx 7.374$，而立即执行价值为$5$。由于$7.374 > 5$，立即执行并**不是**最优的。该陈述的前提是错误的。因此，整个陈述无效。计算出的Theta值也不为零。\n**结论：不正确。**\n\n**D. 美式看涨期权的正$\\Theta$值只能在立即执行为最优的节点上出现；否则$\\Theta$值为非正。**\n这个陈述在理论上和事实上都是错误的。我们的计算提供了一个反例：在$t=0$时，$\\Theta$为正，但此时执行并非最优。原则上，美式看涨期权的正Theta是一种发生在*续存区域*（即不执行期权的区域）的现象，通常当期权处于价内且接近提前执行边界时出现。它表明等待的好处（由于放弃股息的成本降低）超过了等待的成本（标准的时间衰减）。如果执行是最优的，期权的价值就仅仅是$C=S-K$，其价值不再根据期权定价动态演变，而只是简单地跟踪股票价格减去执行价格。在执行点，连续时间Theta值$\\partial C/\\partial t$将为零。\n**结论：不正确。**", "answer": "$$\\boxed{A}$$", "id": "2412797"}, {"introduction": "无套利定价理论的基石是完美复制。这个动手实践 [@problem_id:2412792] 要求你亲自扮演一个期权卖方，通过实施动态Delta($\\Delta$)对冲策略来管理风险。你将沿着一条模拟的资产价格路径，不断调整由股票和无风险资产构成的复制投资组合，并验证对冲误差是否如理论所预测的那样始终为零。这项练习将二叉树模型的抽象理论转化为具体可操作的交易策略，从而深刻揭示其定价逻辑的精髓。", "problem": "给定一个离散时间、多期的二项资产定价模型。设标的资产价格过程 $\\{S_{t}\\}_{t=0}^{N}$ 服从乘性动态，其中在每个时期，价格或以上涨因子 $u$ 移动，或以下跌因子 $d$ 移动，且 $u&gt;d&gt;0$。每期的无风险总回报率为 $R$，且满足无套利条件 $d&lt;R&lt;u$。考虑一个基于此资产的欧式看涨期权，其行权价为 $K$，到期时间步为 $N$。设 $C_{t}$ 表示在给定节点上，期权在时间 $t$ 的唯一无套利价值，该价值在风险中性测度下计算，对应的上涨概率为 $q=(R-d)/(u-d)$，终值条件为 $C_{N}=\\max(S_{N}-K,0)$。在每个非终点节点，将局部 Delta 定义为复制投资组合中的股票数量，\n$$\n\\Delta_{t}=\\frac{C_{t+1}^{(u)}-C_{t+1}^{(d)}}{S_{t+1}^{(u)}-S_{t+1}^{(d)}},\n$$\n其中上标表示在上行或下行子节点中的值。\n\n一个交易员在时间 $0$ 卖空一份看涨期权，收到期权费 $C_{0}$，并通过持有 $\\Delta_{t}$ 份股票和一个无风险账户头寸 $B_{t}$ 来动态对冲该空头头寸，交易成本为零，且满足自融资约束。初始对冲满足 $B_{0}=C_{0}-\\Delta_{0}S_{0}$。沿着一条长度为 $N$ 的已实现价格路径，设在时期 $t$ 结束时的再平衡前对冲误差为\n$$\ne_{t}=\\Delta_{t-1}S_{t}+B_{t-1}R-C_{t}, \\quad t=1,2,\\dots,N,\n$$\n其中 $C_{t}$ 是在时间 $t$ 到达的节点上的期权价值，且 $C_{N}=\\max(S_{N}-K,0)$。在测量 $e_{t}$ 之后，对冲组合在时间 $t$ 被再平衡为 $\\Delta_{t}$，其中 $t=1,2,\\dots,N-1$。\n\n你的任务是实现一个程序，对于每个给定的参数集和已实现路径，构建二项价格树，计算期权价值树，实现上述定义的针对看涨期权空头的动态 Delta 对冲策略，并返回沿该路径的序列 $\\{e_{t}\\}_{t=1}^{N}$。所有值都必须表示为小数（无百分号），每个 $e_{t}$ 都必须四舍五入到小数点后 10 位。\n\n测试套件。对于以下每个案例，使用所提供的参数和已实现的上涨/下跌移动路径，其中 $U$ 表示按因子 $u$ 上涨，$D$ 表示按因子 $d$ 下跌：\n- 案例 1（一般多期路径）：$S_{0}=100.0$, $u=1.1$, $d=0.9$, $R=1.02$, $K=100.0$, $N=4$, 路径 $[U,D,U,U]$。\n- 案例 2（边界，单期）：$S_{0}=50.0$, $u=1.2$, $d=0.8$, $R=1.0$, $K=50.0$, $N=1$, 路径 $[U]$。\n- 案例 3（边缘，零利率且全为下跌）：$S_{0}=80.0$, $u=1.25$, $d=0.8$, $R=1.0$, $K=90.0$, $N=3$, 路径 $[D,D,D]$。\n- 案例 4（边缘，深度实值且全为上涨）：$S_{0}=100.0$, $u=1.2$, $d=0.8$, $R=1.01$, $K=80.0$, $N=3$, 路径 $[U,U,U]$。\n\n要求的最终输出格式。你的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表。此列表的每个元素都必须是相应测试案例的四舍五入后的对冲误差列表 $[e_{1},e_{2},\\dots,e_{N}]$。例如，包含两个案例的输出应如下所示：$[[e_{1}^{(1)},\\dots,e_{N_1}^{(1)}],[e_{1}^{(2)},\\dots,e_{N_2}^{(2)}]]$，行内任何地方都没有空格。", "solution": "问题陈述经验证。\n\n逐字提取给定条件：\n- 资产价格过程：$\\{S_{t}\\}_{t=0}^{N}$，遵循乘性二项模型。\n- 上涨因子：$u$。下跌因子：$d$。且 $u > d > 0$。\n- 每期无风险总回报率：$R$。\n- 无套利条件：$d < R < u$。\n- 衍生品：欧式看涨期权，行权价 $K$，到期日 $N$。\n- 期权价值：在时间 $t$ 为 $C_{t}$。\n- 终值条件：$C_{N} = \\max(S_{N}-K, 0)$。\n- 上涨的风险中性概率：$q = \\frac{R-d}{u-d}$。\n- 期权估值：在风险中性测度下，意味着 $C_{t} = R^{-1}[q C_{t+1}^{(u)} + (1-q) C_{t+1}^{(d)}]$。\n- 复制投资组合的 Delta：$\\Delta_{t}=\\frac{C_{t+1}^{(u)}-C_{t+1}^{(d)}}{S_{t+1}^{(u)}-S_{t+1}^{(d)}}$。\n- 对冲策略：卖空一份看涨期权，用 $\\Delta_{t}$ 份股票和无风险账户头寸 $B_{t}$ 进行对冲。\n- 初始对冲：$B_{0}=C_{0}-\\Delta_{0}S_{0}$。\n- 再平衡前对冲误差：$e_{t}=\\Delta_{t-1}S_{t}+B_{t-1}R-C_{t}$，其中 $t=1, 2, \\dots, N$。\n- 再平衡：在自融资约束下，对冲组合在时间 $t$ 被再平衡为 $\\Delta_{t}$，其中 $t=1, 2, \\dots, N-1$。\n- 测试案例：提供了四组特定的参数（$S_{0}, u, d, R, K, N$）和已实现的路径。\n- 输出要求：一个由各案例对冲误差列表 $\\{e_{t}\\}_{t=1}^{N}$ 组成的列表，四舍五入到小数点后 10 位。\n\n验证结论：问题有效。\n该问题具有科学依据，是 Cox-Ross-Rubinstein 二项期权定价模型中的一个标准练习，这是计算金融学的一个基本概念。该问题是适定的；所有参数、定义和约束都已提供，确保可以通过计算确定唯一的解。期权价值、风险中性概率和 delta 的定义是标准且正确的。问题是客观的，不包含任何歧义。无套利条件被正确陈述，且测试案例均满足该条件。问题的核心是验证二项模型的核心论点：衍生品的支付可以通过对标的资产和无风险债券的动态、自融资交易策略来完美复制。因此，所定义的对冲误差在所有时间步长上理论上应为零，任何非零结果仅可归因于浮点数精度问题。\n\n现在提出一个完整的解决方案。该方法论建立在离散时间资产定价的基本原理之上。\n\n首先，我们构建标的资产价格的二项格子 $\\{S_{t}\\}_{t=0}^{N}$。在时间步 $i$（$0 \\le i \\le N$）经过 $j$ 次上涨（$0 \\le j \\le i$）后，树中的一个节点的价格由以下公式给出：\n$$S_{i,j} = S_{0} u^{j} d^{i-j}$$\n\n其次，我们确定树中每个节点的期权价值。这是通过反向归纳法完成的，从到期日 $t=N$ 的已知期权价值开始。欧式看涨期权在到期日的价值是其内在价值：\n$$C_{N,j} = \\max(S_{N,j} - K, 0) \\quad \\text{for } j = 0, 1, \\dots, N$$\n对于任何非终点节点 $(i,j)$（其中 $i < N$），无套利期权价值 $C_{i,j}$ 是下一时期期权价值的折现期望值，该值在风险中性测度下计算。上涨的风险中性概率为 $q = \\frac{R-d}{u-d}$。估值公式为：\n$$C_{i,j} = \\frac{1}{R} \\left[ q C_{i+1,j+1} + (1-q) C_{i+1,j} \\right]$$\n这个反向递归计算填充了整个期权价值树 $\\{C_{i,j}\\}$。\n\n第三，我们沿着指定的资产价格移动路径实施动态对冲策略。该策略涉及创建一个包含 $\\Delta_{t}$ 份资产股票和在无风险账户中持有现金头寸 $B_{t}$ 的投资组合。该投资组合在时间 $t$ 的价值为 $V_t = \\Delta_t S_t + B_t$。\n\n该策略在 $t=0$ 时启动。构建初始投资组合以复制期权的价值，即 $V_0 = C_0$。股票数量 $\\Delta_0$ 由 delta 对冲公式给出：\n$$\\Delta_{0} = \\frac{C_{1,1} - C_{1,0}}{S_{1,1} - S_{1,0}}$$\n然后设置初始现金头寸 $B_0$，以确保投资组合价值与期权价值相匹配：$B_{0} = C_{0,0} - \\Delta_{0}S_{0,0}$。\n\n该投资组合是自融资的。这意味着对于任何后续时期 $t > 0$，投资组合构成的任何变化都由内部融资，没有外部现金注入或提取。在时期 $t$ 开始时（在价格从 $t-1$ 变动之后），来自上一时期 $(\\Delta_{t-1}, B_{t-1})$ 的投资组合价值已演变为：\n$$V_{t}^{-} = \\Delta_{t-1}S_{t} + B_{t-1}R$$\n问题将时间 $t$ 的对冲误差定义为该投资组合价值与新节点上的理论期权价格 $C_{t}$ 之间的差额：\n$$e_{t} = V_{t}^{-} - C_{t}$$\n二项模型的一个核心结果是，复制投资组合的价值 $V_{t}^{-}$ 在每个节点上都将精确匹配期权的价值 $C_{t}$。因此，我们预期对于所有 $t$，$e_t = 0$，但结果会受数值精度的影响。\n\n计算误差后，如果 $t < N$，则为下一时期重新平衡投资组合。新的股票数量 $\\Delta_t$ 根据当前节点的后继节点值计算：\n$$\\Delta_{t} = \\frac{C_{t+1}^{\\text{(up)}} - C_{t+1}^{\\text{(down)}}}{S_{t+1}^{\\text{(up)}} - S_{t+1}^{\\text{(down)}}}$$\n新的现金头寸 $B_t$ 由自融资条件确定。在再平衡过程中，投资组合的价值保持不变，因此再平衡后的价值 $V_t^{+} = \\Delta_t S_t + B_t$ 必须等于再平衡前的价值 $V_t^{-}$。因此，新的现金头寸为：\n$$B_{t} = V_{t}^{-} - \\Delta_{t}S_{t}$$\n这个沿着路径移动、计算对冲误差和再平衡的过程会一直重复，直到在 $t=N$ 到期。计算出的误差序列 $\\{e_t\\}_{t=1}^N$ 就是给定路径的最终结果。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run test cases and print results.\n    \"\"\"\n\n    test_cases = [\n        {'S0': 100.0, 'u': 1.1, 'd': 0.9, 'R': 1.02, 'K': 100.0, 'N': 4, 'path': ['U', 'D', 'U', 'U']},\n        {'S0': 50.0, 'u': 1.2, 'd': 0.8, 'R': 1.0, 'K': 50.0, 'N': 1, 'path': ['U']},\n        {'S0': 80.0, 'u': 1.25, 'd': 0.8, 'R': 1.0, 'K': 90.0, 'N': 3, 'path': ['D', 'D', 'D']},\n        {'S0': 100.0, 'u': 1.2, 'd': 0.8, 'R': 1.01, 'K': 80.0, 'N': 3, 'path': ['U', 'U', 'U']}\n    ]\n\n    results = []\n    for case in test_cases:\n        errors = _calculate_hedging_errors(\n            S0=case['S0'],\n            u=case['u'],\n            d=case['d'],\n            R=case['R'],\n            K=case['K'],\n            N=case['N'],\n            path=case['path']\n        )\n        results.append(errors)\n    \n    # Format the final output string precisely as required.\n    inner_parts = []\n    for err_list in results:\n        # Format each error to a string with the required precision.\n        # Although the errors are theoretically zero, they may be small non-zero floats.\n        # We ensure standard float representation e.g. '0.0' instead of '0'\n        # The rounding is already done, this is for formatting.\n        formatted_list = [f\"{err:.10f}\".rstrip('0').rstrip('.') if err != 0 else '0.0' for err in err_list]\n        inner_parts.append(f\"[{','.join(formatted_list)}]\")\n        \n    final_output = f\"[{','.join(inner_parts)}]\"\n    print(final_output)\n\ndef _calculate_hedging_errors(S0: float, u: float, d: float, R: float, K: float, N: int, path: list[str]) -> list[float]:\n    \"\"\"\n    Calculates the sequence of dynamic hedging errors for a given path.\n\n    Args:\n        S0: Initial asset price.\n        u: Up-move factor.\n        d: Down-move factor.\n        R: Gross risk-free return per period.\n        K: Option strike price.\n        N: Number of periods to maturity.\n        path: A list of 'U' or 'D' strings representing the realized path.\n\n    Returns:\n        A list of hedging errors {e_t} for t=1,...,N, rounded to 10 decimal places.\n    \"\"\"\n    # 1. Construct asset price and option value trees\n    # Risk-neutral probability\n    q = (R - d) / (u - d)\n\n    # Initialize trees\n    S_tree = np.zeros((N + 1, N + 1))\n    C_tree = np.zeros((N + 1, N + 1))\n\n    # Populate asset price tree S[i,j] = price at time i after j up-moves\n    for i in range(N + 1):\n        for j in range(i + 1):\n            S_tree[i, j] = S0 * (u**j) * (d**(i - j))\n\n    # Populate option value tree at maturity (t=N)\n    C_tree[N, :] = np.maximum(S_tree[N, :] - K, 0)\n\n    # Populate option value tree by backward induction\n    for i in range(N - 1, -1, -1):\n        for j in range(i + 1):\n            C_up = C_tree[i + 1, j + 1]\n            C_down = C_tree[i + 1, j]\n            C_tree[i, j] = (q * C_up + (1 - q) * C_down) / R\n\n    # 2. Trace the path and compute hedging errors\n    hedging_errors = []\n    \n    # Initial portfolio setup at t=0\n    num_ups = 0  # number of up moves from t=0\n    \n    # Initial delta (Delta_0)\n    delta_prev = (C_tree[1, 1] - C_tree[1, 0]) / (S_tree[1, 1] - S_tree[1, 0])\n    \n    # Initial bond position (B_0)\n    B_prev = C_tree[0, 0] - delta_prev * S_tree[0, 0]\n\n    # Iterate along the path from t=1 to N\n    for t in range(1, N + 1):\n        # Determine current node based on path\n        move = path[t - 1]\n        if move == 'U':\n            num_ups += 1\n        \n        # Current asset and option values at node (t, num_ups)\n        current_S = S_tree[t, num_ups]\n        current_C = C_tree[t, num_ups]\n        \n        # Value of hedge portfolio before rebalancing\n        portfolio_val_pre_rebalance = delta_prev * current_S + B_prev * R\n        \n        # Calculate hedging error e_t\n        error = portfolio_val_pre_rebalance - current_C\n        hedging_errors.append(round(error, 10))\n\n        # Rebalance the portfolio for the next period (if not at maturity)\n        if t < N:\n            # Calculate new delta (Delta_t) at the current node\n            delta_curr = (C_tree[t + 1, num_ups + 1] - C_tree[t + 1, num_ups]) / \\\n                         (S_tree[t + 1, num_ups + 1] - S_tree[t + 1, num_ups])\n            \n            # Calculate new bond position (B_t) to maintain self-financing\n            # New portfolio value V_t+ must equal V_t-\n            B_curr = portfolio_val_pre_rebalance - delta_curr * current_S\n            \n            # Update portfolio for the next iteration\n            delta_prev = delta_curr\n            B_prev = B_curr\n\n    return hedging_errors\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2412792"}]}