{"hands_on_practices": [{"introduction": "我们的第一个练习将从自回归模型的一个核心特性入手，以此来巩固我们的理解。平稳时间序列的一个关键特性是它会围绕一个长期均值波动。通过为一个简单的 $AR(1)$ 模型计算这个无条件均值，你将掌握解读和验证时间序列模型的一项基本技能 [@problem_id:1897485]。", "problem": "一个经济研究小组正在对某个国家的季度通胀异常（记为 $I_t$）进行建模。该异常被定义为观测到的通货膨胀率与中央银行目标利率之间的偏差。该小组的分析表明，这个时间序列可以被一个形式如下的一阶自回归（AR(1)）模型有效地描述：\n\n$I_t = \\alpha + \\beta I_{t-1} + \\epsilon_t$\n\n在此模型中，$I_t$ 代表第 $t$ 季度的通胀异常，以百分点为单位。该模型包含一个常数截距项 $\\alpha = 0.4$ 和一个自回归系数 $\\beta = 0.75$，后者捕捉了通胀异常从上一季度以来的持续性。项 $\\epsilon_t$ 是一个白噪声过程，其特征为均值为零和方差恒定，代表了对通货膨胀的不可预测的冲击。\n\n假设该通胀异常的时间序列过程是平稳的，计算其长期期望值。答案以百分点表示。", "solution": "给定通胀异常的 AR(1) 过程：\n$$\nI_{t} = \\alpha + \\beta I_{t-1} + \\epsilon_{t},\n$$\n其中 $\\alpha = 0.4$，$\\beta = 0.75$，且 $\\epsilon_{t}$ 是一个白噪声过程，满足 $\\mathbb{E}[\\epsilon_{t}] = 0$。在平稳性假设下（要求 $|\\beta| < 1$），长期期望值（或无条件均值）是恒定的，等于 $\\mu = \\mathbb{E}[I_{t}]$。\n\n对模型两边取期望：\n$$\n\\mathbb{E}[I_{t}] = \\mathbb{E}[\\alpha + \\beta I_{t-1} + \\epsilon_{t}] = \\alpha + \\beta \\mathbb{E}[I_{t-1}] + \\mathbb{E}[\\epsilon_{t}].\n$$\n使用 $\\mathbb{E}[\\epsilon_{t}] = 0$ 和平稳性条件 $\\mathbb{E}[I_{t}] = \\mathbb{E}[I_{t-1}] = \\mu$，我们得到：\n$$\n\\mu = \\alpha + \\beta \\mu.\n$$\n整理得，\n$$\n\\mu - \\beta \\mu = \\alpha \\quad \\Rightarrow \\quad \\mu (1 - \\beta) = \\alpha \\quad \\Rightarrow \\quad \\mu = \\frac{\\alpha}{1 - \\beta}.\n$$\n代入 $\\alpha = 0.4$ 和 $\\beta = 0.75$，\n$$\n\\mu = \\frac{0.4}{1 - 0.75} = \\frac{0.4}{0.25} = 1.6.\n$$\n因此，该通胀异常的长期期望值为 $1.6$ 个百分点。", "answer": "$$\\boxed{1.6}$$", "id": "1897485"}, {"introduction": "理解了模型的性质后，我们如何从观测数据中确定其具体参数呢？这个练习将介绍尤尔-沃克方程 (Yule-Walker equations)，这是一种将过程的自协方差与其 $AR$ 系数联系起来的经典方法。通过完成这个练习，你将亲身体验模型拟合中的一项基本技术 [@problem_id:2373810]。", "problem": "一个去均值的、弱平稳的月度超额收益序列 $\\{r_{t}\\}$ 被建模为一个二阶自回归 (AR) 模型，即\n$r_{t} = \\phi_{1} r_{t-1} + \\phi_{2} r_{t-2} + \\varepsilon_{t}$，\n其中 $\\{\\varepsilon_{t}\\}$ 是一个均值为零、方差为 $\\sigma_{\\varepsilon}^{2}$ 的白噪声新息过程，并且对于所有 $s < t$，$\\varepsilon_{t}$ 与 $\\{r_{s}\\}$ 不相关。从一个长样本中，计算出滞后阶数为 $0$、$1$ 和 $2$ 的样本自协方差如下，并将其视为总体值用于估计：\n$\\hat{\\gamma}(0) = 0.010$，$\\hat{\\gamma}(1) = 0.006$，$\\hat{\\gamma}(2) = 0.002$。\n使用与该自回归结构相关的 Yule–Walker 方程和给定的自协方差，确定参数 $\\phi_{1}$、$\\phi_{2}$ 和新息方差 $\\sigma_{\\varepsilon}^{2}$ 的 Yule–Walker 估计值。请将最终答案表示为单行矩阵 $\\left(\\phi_{1} \\ \\phi_{2} \\ \\sigma_{\\varepsilon}^{2}\\right)$。无需四舍五入；请提供精确值。", "solution": "该问题要求使用 Yule-Walker 方程来确定一个弱平稳的二阶自回归模型（AR($2$)）的参数。这构成了时间序列分析中矩估计法的一个标准应用。\n\n首先，我们必须验证问题的陈述。\n给定的信息如下：\n- 过程 $\\{r_{t}\\}$ 是一个去均值的、弱平稳的 AR($2$) 过程：$r_{t} = \\phi_{1} r_{t-1} + \\phi_{2} r_{t-2} + \\varepsilon_{t}$。\n- 新息过程 $\\{\\varepsilon_{t}\\}$ 是均值为零、方差为 $\\sigma_{\\varepsilon}^{2}$ 的白噪声。\n- 总体自协方差被视为给定的样本值：$\\gamma(0) = 0.010$，$\\gamma(1) = 0.006$ 和 $\\gamma(2) = 0.002$。\n\n该问题具有科学依据，提法恰当且客观。它提供了一套完整且一致的数据，足以得到唯一解。对于平稳过程，这些自协方差值在物理上是合理的；方差 $\\gamma(0)$ 为正，且相应的自相关系数 $\\rho(1) = \\frac{\\gamma(1)}{\\gamma(0)} = 0.6$ 和 $\\rho(2) = \\frac{\\gamma(2)}{\\gamma(0)} = 0.2$ 均在有效范围 $[-1, 1]$ 内。因此，该问题被认为是有效的。\n\n我们开始求解。对于一个一般的 AR($p$) 过程，Yule-Walker 方程是通过将定义方程两边同乘以 $r_{t-k}$ (其中 $k > 0$) 并取期望得到的。这得到：\n$$E[r_{t}r_{t-k}] = \\sum_{i=1}^{p} \\phi_{i} E[r_{t-i}r_{t-k}] + E[\\varepsilon_{t}r_{t-k}]$$\n考虑到弱平稳性以及 $\\varepsilon_{t}$ 与过去的 $r_s$ 值不相关（即，当 $k>0$ 时 $E[\\varepsilon_{t}r_{t-k}]=0$），该式可简化为：\n$$\\gamma(k) = \\sum_{i=1}^{p} \\phi_{i} \\gamma(k-i)$$\n对于给定的 AR($2$) 过程，我们令 $p=2$ 并使用 $k=1$ 和 $k=2$：\n当 $k=1$ 时：$\\gamma(1) = \\phi_{1} \\gamma(0) + \\phi_{2} \\gamma(-1)$。因为 $\\gamma(k) = \\gamma(-k)$，所以该式为 $\\gamma(1) = \\phi_{1} \\gamma(0) + \\phi_{2} \\gamma(1)$。\n当 $k=2$ 时：$\\gamma(2) = \\phi_{1} \\gamma(1) + \\phi_{2} \\gamma(0)$。\n\n这给出了一个关于两个未知参数 $\\phi_{1}$ 和 $\\phi_{2}$ 的二元线性方程组：\n$$\n\\begin{cases}\n\\gamma(1) = \\phi_{1} \\gamma(0) + \\phi_{2} \\gamma(1) \\\\\n\\gamma(2) = \\phi_{1} \\gamma(1) + \\phi_{2} \\gamma(0)\n\\end{cases}\n$$\n其矩阵形式为：\n$$\n\\begin{pmatrix} \\gamma(1) \\\\ \\gamma(2) \\end{pmatrix} =\n\\begin{pmatrix} \\gamma(0) & \\gamma(1) \\\\ \\gamma(1) & \\gamma(0) \\end{pmatrix}\n\\begin{pmatrix} \\phi_{1} \\\\ \\phi_{2} \\end{pmatrix}\n$$\n问题要求将给定的样本自协方差作为总体值使用。为保持精度，我们将小数值转换为分数：\n$\\gamma(0) = 0.010 = \\frac{10}{1000} = \\frac{1}{100}$\n$\\gamma(1) = 0.006 = \\frac{6}{1000} = \\frac{3}{500}$\n$\\gamma(2) = 0.002 = \\frac{2}{1000} = \\frac{1}{500}$\n\n将这些值代入方程组：\n$$\n\\begin{cases}\n\\frac{3}{500} = \\phi_{1} \\frac{1}{100} + \\phi_{2} \\frac{3}{500} \\\\\n\\frac{1}{500} = \\phi_{1} \\frac{3}{500} + \\phi_{2} \\frac{1}{100}\n\\end{cases}\n$$\n为简化计算，我们将两个方程同乘以 $500$：\n$$\n\\begin{cases}\n3 = 5\\phi_{1} + 3\\phi_{2} \\\\\n1 = 3\\phi_{1} + 5\\phi_{2}\n\\end{cases}\n$$\n我们可以解这个方程组。由第二个方程可得 $3\\phi_{1} = 1 - 5\\phi_{2}$，所以 $\\phi_{1} = \\frac{1 - 5\\phi_{2}}{3}$。将此代入第一个方程：\n$$3 = 5\\left(\\frac{1 - 5\\phi_{2}}{3}\\right) + 3\\phi_{2}$$\n两边同乘以 $3$ 得：\n$$9 = 5(1 - 5\\phi_{2}) + 9\\phi_{2}$$\n$$9 = 5 - 25\\phi_{2} + 9\\phi_{2}$$\n$$4 = -16\\phi_{2}$$\n$$\\phi_{2} = -\\frac{4}{16} = -\\frac{1}{4}$$\n现在，我们求解 $\\phi_{1}$：\n$$\\phi_{1} = \\frac{1 - 5(-\\frac{1}{4})}{3} = \\frac{1 + \\frac{5}{4}}{3} = \\frac{\\frac{9}{4}}{3} = \\frac{9}{12} = \\frac{3}{4}$$\n自回归系数的 Yule-Walker 估计值为 $\\phi_{1} = \\frac{3}{4}$ 和 $\\phi_{2} = -\\frac{1}{4}$。\n\n接下来，我们必须求出新息方差 $\\sigma_{\\varepsilon}^{2}$。这可以从 $k=0$ 时的 Yule-Walker 方程获得，该方程涉及过程的方差 $\\gamma(0)$。我们将 AR($2$) 方程两边同乘以 $r_t$ 并取期望：\n$$E[r_{t}^2] = \\phi_{1} E[r_{t}r_{t-1}] + \\phi_{2} E[r_{t}r_{t-2}] + E[r_{t}\\varepsilon_{t}]$$\n$$\\gamma(0) = \\phi_{1} \\gamma(1) + \\phi_{2} \\gamma(2) + E[(\\phi_{1}r_{t-1} + \\phi_{2}r_{t-2} + \\varepsilon_{t})\\varepsilon_{t}]$$\n由于 $\\varepsilon_{t}$ 与过去的 $r$ 值不相关，所以 $E[r_{t-1}\\varepsilon_{t}]=0$ 且 $E[r_{t-2}\\varepsilon_{t}]=0$。由此可得：\n$$\\gamma(0) = \\phi_{1}\\gamma(1) + \\phi_{2}\\gamma(2) + E[\\varepsilon_{t}^2]$$\n$$\\gamma(0) = \\phi_{1}\\gamma(1) + \\phi_{2}\\gamma(2) + \\sigma_{\\varepsilon}^{2}$$\n求解 $\\sigma_{\\varepsilon}^{2}$：\n$$\\sigma_{\\varepsilon}^{2} = \\gamma(0) - \\phi_{1}\\gamma(1) - \\phi_{2}\\gamma(2)$$\n代入已知值：\n$$\\sigma_{\\varepsilon}^{2} = \\frac{1}{100} - \\left(\\frac{3}{4}\\right)\\left(\\frac{3}{500}\\right) - \\left(-\\frac{1}{4}\\right)\\left(\\frac{1}{500}\\right)$$\n$$\\sigma_{\\varepsilon}^{2} = \\frac{1}{100} - \\frac{9}{2000} + \\frac{1}{2000}$$\n$$\\sigma_{\\varepsilon}^{2} = \\frac{1}{100} - \\frac{8}{2000} = \\frac{1}{100} - \\frac{1}{250}$$\n使用公分母 $500$：\n$$\\sigma_{\\varepsilon}^{2} = \\frac{5}{500} - \\frac{2}{500} = \\frac{3}{500}$$\n因此，新息方差为 $\\sigma_{\\varepsilon}^{2} = \\frac{3}{500}$。\n\n所求参数为 $\\phi_{1} = \\frac{3}{4}$、$\\phi_{2} = -\\frac{1}{4}$ 和 $\\sigma_{\\varepsilon}^{2} = \\frac{3}{500}$。我们将它们以所要求的单行矩阵格式呈现。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\frac{3}{4} & -\\frac{1}{4} & \\frac{3}{500}\n\\end{pmatrix}\n}\n$$", "id": "2373810"}, {"introduction": "我们之前练习过的许多 $AR$ 模型的性质和估计技术，都建立在平稳性这一关键假设之上。但是，我们如何凭经验检验这个假设呢？这项高级练习将挑战你从零开始构建一个迪基-福勒 (Dickey-Fuller) 单位根检验，让你深入、实践地理解计量经济学家是如何验证其模型的基本假设的 [@problem_id:2373818]。", "problem": "要求您从基本原理出发，实现一个针对一阶自回归过程中单位根的单边左尾 Dickey–Fuller 检验。设定为一个一阶自回归模型，其中单变量时间序列 $\\{y_t\\}_{t=1}^T$ 服从递归式 $y_t = \\phi y_{t-1} + \\varepsilon_t$，$\\varepsilon_t$ 为独立同分布于均值为 $0$、方差为 $\\sigma^2$ 的高斯随机变量，初始值为 $y_0 = 0$。原假设是该过程存在一个单位根，即 $H_0: \\phi = 1$。Dickey–Fuller 检验的构建方法是，首先进行一阶差分，然后将一阶差分 $\\Delta y_t$ 对滞后水平 $y_{t-1}$ 进行不含截距项或趋势项的回归。统计决策基于针对备择假设 $H_1: \\phi < 1$（等价于 $H_1: \\rho < 0$，其中 $\\rho \\equiv \\phi - 1$）的单边左尾检验，当检验统计量小于临界值时拒绝原假设。\n\n仅从一阶自回归模型和普通最小二乘法的定义出发，实现完整的检验流程，不使用任何预构建的单位根检验函数。在原假设下，Dickey–Fuller 检验统计量的分布是非标准的；因此，您必须在原假设下，使用带高斯新息的随机游走，通过蒙特卡洛模拟来近似显著性水平为 $\\alpha$ 时的临界值。\n\n您的程序必须：\n- 为 $\\Delta y_t$ 对 $y_{t-1}$（$t = 2, \\dots, T$）的无截距项、无趋势项回归实现普通最小二乘法，并计算斜率系数的相关 $t$-统计量。\n- 通过在 $H_0$ 下模拟 $M$ 个长度为 $T$ 的独立随机游走，并计算模拟检验统计量的经验 $\\alpha$-分位数，来近似显著性水平为 $\\alpha$ 的 Dickey-Fuller 左尾临界值。\n- 对于每个测试用例，使用指定的参数从一阶自回归模型中模拟一个数据集，计算 Dickey–Fuller 检验统计量，将其与模拟的临界值进行比较，并输出一个布尔值，指示在水平 $\\alpha$ 下是否拒绝 $H_0$。\n\n使用以下基本定义和事实作为您的基础：\n- 一阶自回归模型由 $y_t = \\phi y_{t-1} + \\varepsilon_t$ 给出，对于平稳或单位根过程，有 $|\\phi| \\leq 1$，且 $\\varepsilon_t \\sim \\mathcal{N}(0,\\sigma^2)$ 在 $t$ 上独立。\n- 一阶差分为 $\\Delta y_t \\equiv y_t - y_{t-1}$。\n- 对于无截距项的简单回归，将 $u_t$ 对 $v_t$（$t = 1, \\dots, n$）进行回归，其普通最小二乘估计量为 $\\hat{\\beta} = \\frac{\\sum_{t=1}^n v_t u_t}{\\sum_{t=1}^n v_t^2}$，残差方差估计为 $s^2 = \\frac{1}{n-1} \\sum_{t=1}^n (u_t - \\hat{\\beta} v_t)^2$，标准误为 $\\operatorname{se}(\\hat{\\beta}) = \\sqrt{s^2 / \\sum_{t=1}^n v_t^2}$，从而得到 $t$-统计量 $t = \\hat{\\beta} / \\operatorname{se}(\\hat{\\beta})$。\n\n实现要求：\n- 使用显著性水平 $\\alpha = 0.05$ 和蒙特卡洛模拟次数 $M = 2000$ 来近似临界值。\n- 在每个测试用例的数据模拟中，使用提供的数据生成随机种子以确保可复现性。对于原假设下的蒙特卡洛近似，使用特定于该测试用例的所提供的原假设模拟随机种子，以确保临界值的可复现性。请勿重复使用任何预构建的单位根或 Dickey-Fuller 函数。\n- 您的程序必须是完全确定性的，并且不得要求任何用户输入。\n\n测试套件：\n- 每个测试用例都是一个元组 $(T,\\phi,\\sigma,\\text{data\\_seed},\\text{null\\_seed})$，其值如下：\n  - 用例 A（理想路径，单位根）：$(T=\\;200,\\;\\phi=\\;1.0,\\;\\sigma=\\;1.0,\\;\\text{data\\_seed}=\\;123,\\;\\text{null\\_seed}=\\;9001)$。\n  - 用例 B（近单位根，平稳）：$(T=\\;200,\\;\\phi=\\;0.95,\\;\\sigma=\\;1.0,\\;\\text{data\\_seed}=\\;456,\\;\\text{null\\_seed}=\\;9002)$。\n  - 用例 C（强平稳）：$(T=\\;200,\\;\\phi=\\;0.0,\\;\\sigma=\\;1.0,\\;\\text{data\\_seed}=\\;789,\\;\\text{null\\_seed}=\\;9003)$。\n  - 用例 D（样本较短的边界情况）：$(T=\\;60,\\;\\phi=\\;1.0,\\;\\sigma=\\;1.0,\\;\\text{data\\_seed}=\\;321,\\;\\text{null\\_seed}=\\;9004)$。\n\n输出规范：\n- 对于每个用例，使用 $M=\\;2000$ 次模拟的蒙特卡洛临界值，计算在 $\\alpha=0.05$ 水平下是否拒绝 $H_0$。如果 Dickey–Fuller 统计量小于在 $H_0$ 下计算的经验 $\\alpha$-分位数，则发生拒绝。\n- 您的程序应生成一行输出，其中包含 A、B、C、D 四个用例的布尔结果，按顺序排列，格式为用方括号括起来的逗号分隔列表，例如 $\\texttt{[True,False,True,False]}$。\n\n不适用任何物理单位或角度单位。请将任何分数或比例表示为小数，例如 $\\alpha=\\;0.05$ 是 $\\left[0,1\\right]$ 中的一个小数。", "solution": "用户的问题陈述已经过验证并被认为是有效的。它构成了一个在计算计量经济学领域中定义良好且有科学依据的问题，特别是关于时间序列分析中的单位根检验。所有必要的组成部分，包括模型、假设、检验统计量公式和模拟参数，都已提供，没有矛盾或含糊之处。该问题要求从基本原理出发进行实现，这是一个标准的教学练习。\n\n核心任务是为一个表示为 AR(1) 的一阶自回归过程实现一个单边左尾 Dickey-Fuller 检验。\n\n首先，我们建立理论框架。时间序列 $\\{y_t\\}_{t=1}^T$ 的 AR(1) 模型由以下方程给出：\n$$y_t = \\phi y_{t-1} + \\varepsilon_t$$\n其中初始值为 $y_0 = 0$，新息 $\\varepsilon_t$ 是均值为 0、方差为 $\\sigma^2$ 的独立同分布（i.i.d.）高斯随机变量，即 $\\varepsilon_t \\sim \\mathcal{N}(0, \\sigma^2)$。参数 $\\phi$ 控制过程的动态。如果 $|\\phi| < 1$，过程是平稳的。如果 $|\\phi| = 1$，过程包含一个单位根且是非平稳的。\n\n问题是检验单位根的存在性。原假设 $H_0$ 是过程具有单位根，而单边备择假设 $H_1$ 是过程是平稳的。这可以表述为：\n$$H_0: \\phi = 1 \\quad \\text{vs.} \\quad H_1: \\phi < 1$$\n在原假设下，模型变为 $y_t = y_{t-1} + \\varepsilon_t$，这是一个随机游走。\n\nDickey-Fuller 检验过程涉及对模型进行重新参数化。从 AR(1) 方程的两边减去 $y_{t-1}$，我们得到：\n$$y_t - y_{t-1} = (\\phi - 1) y_{t-1} + \\varepsilon_t$$\n令 $\\Delta y_t = y_t - y_{t-1}$ 为一阶差分，$\\rho = \\phi - 1$。方程转换为 Dickey-Fuller 回归模型：\n$$\\Delta y_t = \\rho y_{t-1} + \\varepsilon_t$$\n在这种形式下，假设等价于：\n$$H_0: \\rho = 0 \\quad \\text{vs.} \\quad H_1: \\rho < 0$$\n我们通过对 $\\Delta y_t$ 在 $y_{t-1}$（$t = 2, \\dots, T$）上进行无截距项的简单普通最小二乘法（OLS）回归来检验这个假设。该回归中的观测数量为 $n = T-1$。\n\n$\\rho$ 的 OLS 估计量由下式给出：\n$$\\hat{\\rho} = \\frac{\\sum_{t=2}^T y_{t-1} \\Delta y_t}{\\sum_{t=2}^T y_{t-1}^2}$$\n此回归的残差为 $e_t = \\Delta y_t - \\hat{\\rho} y_{t-1}$。新息方差的无偏估计量 $s^2$ 使用 $n-k$ 个自由度计算，其中 $n=T-1$ 是观测数量，$k=1$ 是估计参数的数量（仅 $\\rho$）。\n$$s^2 = \\frac{1}{T-2} \\sum_{t=2}^T e_t^2$$\nOLS 估计量 $\\hat{\\rho}$ 的标准误为：\n$$\\operatorname{se}(\\hat{\\rho}) = \\sqrt{\\frac{s^2}{\\sum_{t=2}^T y_{t-1}^2}}$$\nDickey-Fuller 检验统计量是系数 $\\hat{\\rho}$ 的 $t$-统计量：\n$$t_{\\hat{\\rho}} = \\frac{\\hat{\\rho}}{\\operatorname{se}(\\hat{\\rho})}$$\n\n在原假设 $H_0: \\rho=0$ 下，回归量 $y_{t-1}$ 是一个非平稳过程（独立同分布随机变量之和）。因此，检验统计量 $t_{\\hat{\\rho}}$ 不遵循标准学生 $t$-分布。其极限分布是布朗运动的一个泛函，称为 Dickey-Fuller 分布。由于这个分布是非标准的，临界值必须通过模拟获得。\n\n在显著性水平 $\\alpha$ 下近似临界值的步骤如下：\n1.  在原假设（$H_0: \\phi=1$, 即随机游走）下，生成大量（$M$ 个）长度为 $T$ 的独立时间序列。由于 $t$-统计量的分布对新息方差 $\\sigma^2$ 不变，我们可以方便地在这些模拟中使用 $\\sigma^2=1$。\n2.  对于 $M$ 个模拟时间序列中的每一个，都计算 Dickey-Fuller 检验统计量 $t_{\\hat{\\rho}}$。\n3.  收集 $M$ 个计算出的统计量。这些统计量的经验 $\\alpha$-分位数即为估计的临界值 $c_\\alpha$。对于左尾检验，该值是使得 $\\alpha$ 比例的模拟统计量小于它的值。\n\n每个测试用例的完整算法是：\n1.  **临界值模拟**：给定样本大小 $T$、显著性水平 $\\alpha=0.05$ 和模拟次数 $M=2000$，使用提供的 `null_seed` 模拟临界值 $c_{0.05}$。\n2.  **数据生成**：给定参数 $T$、$\\phi$、$\\sigma$，使用提供的 `data_seed` 根据 AR(1) 模型 $y_t = \\phi y_{t-1} + \\varepsilon_t$（$y_0 = 0$）生成单个时间序列 $\\{y_t\\}_{t=0}^T$。\n3.  **检验统计量计算**：根据上一步生成的序列计算 Dickey-Fuller 统计量 $t_{\\text{data}}$。\n4.  **假设检验决策**：将计算出的检验统计量与模拟的临界值进行比较。由于备择假设是 $H_1: \\rho < 0$，我们执行左尾检验。如果 $t_{\\text{data}} < c_{0.05}$，则拒绝原假设 $H_0$。结果是一个指示拒绝与否的布尔值。\n\n这种基于原理的方法允许根据基本定义构建整个检验过程，正如问题陈述所要求的那样。", "answer": "```python\nimport numpy as np\n\ndef compute_df_statistic(y_series, T):\n    \"\"\"\n    Computes the Dickey-Fuller t-statistic for a given time series.\n    The regression is Delta y_t on y_{t-1} without an intercept.\n    \n    Args:\n        y_series (np.ndarray): The time series {y_t} from t=0 to T. Length must be T+1.\n        T (int): The number of time periods in the original series {y_t}_{t=1}^T.\n\n    Returns:\n        float: The computed t-statistic.\n    \"\"\"\n    # The regression uses observations from t=2 to T.\n    # y_lagged corresponds to y_{t-1} for t=2,...,T, so it is y_1, ..., y_{T-1}.\n    y_lagged = y_series[1:T]\n    \n    # delta_y corresponds to Delta y_t for t=2,...,T.\n    y_current = y_series[2:T+1]\n    delta_y = y_current - y_lagged\n\n    # Number of observations in the regression is n = T-1.\n    n_obs = T - 1\n\n    # OLS estimation for rho in Delta y_t = rho * y_{t-1} + e_t\n    sum_sq_y_lag = np.sum(y_lagged**2)\n    \n    # Avoid division by zero, although highly unlikely with random data.\n    if sum_sq_y_lag == 0:\n        return np.nan\n\n    rho_hat = np.sum(y_lagged * delta_y) / sum_sq_y_lag\n    \n    # Calculate residuals and estimate of error variance s^2\n    residuals = delta_y - rho_hat * y_lagged\n    # Degrees of freedom is n_obs - k, where k=1 (one parameter, rho)\n    # So, df = (T-1) - 1 = T-2.\n    df = n_obs - 1\n    if df = 0: # Should not happen for T > 2\n        return np.nan\n        \n    s2 = np.sum(residuals**2) / df\n    \n    # Calculate standard error of rho_hat\n    se_rho_hat = np.sqrt(s2 / sum_sq_y_lag)\n    \n    # Avoid division by zero for the t-statistic itself.\n    if se_rho_hat == 0:\n        return np.nan # Or a large number, but NaN is more informative.\n\n    t_stat = rho_hat / se_rho_hat\n    return t_stat\n\ndef run_dickey_fuller_test(T, phi, sigma, data_seed, null_seed):\n    \"\"\"\n    Performs the complete Dickey-Fuller test for a single case.\n    \n    Args:\n        T (int): Sample size.\n        phi (float): Autoregressive coefficient.\n        sigma (float): Standard deviation of innovations.\n        data_seed (int): Random seed for data generation.\n        null_seed (int): Random seed for critical value simulation.\n\n    Returns:\n        bool: True if H0 is rejected, False otherwise.\n    \"\"\"\n    ALPHA = 0.05\n    M = 2000\n\n    # Step 1: Simulate the critical value under the null hypothesis (phi=1)\n    null_rng = np.random.default_rng(null_seed)\n    simulated_stats = np.empty(M)\n    for i in range(M):\n        # Generate a random walk (phi=1). The t-stat is invariant to sigma, so we use 1.0.\n        eps_null = null_rng.normal(scale=1.0, size=T)\n        y_null = np.zeros(T + 1)\n        # Using a loop for direct implementation of the model definition\n        for t in range(1, T + 1):\n            y_null[t] = y_null[t-1] + eps_null[t-1]\n        \n        simulated_stats[i] = compute_df_statistic(y_null, T)\n\n    # The critical value is the alpha-quantile of the simulated statistics distribution.\n    critical_value = np.quantile(simulated_stats, ALPHA)\n    \n    # Step 2: Generate the data for the specific test case\n    data_rng = np.random.default_rng(data_seed)\n    eps_data = data_rng.normal(scale=sigma, size=T)\n    y_data = np.zeros(T + 1)\n    for t in range(1, T + 1):\n        y_data[t] = phi * y_data[t-1] + eps_data[t-1]\n\n    # Step 3: Compute the Dickey-Fuller statistic for the generated data\n    t_stat_data = compute_df_statistic(y_data, T)\n    \n    # Step 4: Make the decision. Reject H0 if the statistic is in the left tail.\n    return t_stat_data  critical_value\n    \ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    # Test suite: (T, phi, sigma, data_seed, null_seed)\n    test_cases = [\n        (200, 1.0, 1.0, 123, 9001),   # Case A (Unit root)\n        (200, 0.95, 1.0, 456, 9002),  # Case B (Near unit root)\n        (200, 0.0, 1.0, 789, 9003),   # Case C (Strongly stationary)\n        (60, 1.0, 1.0, 321, 9004),    # Case D (Unit root, shorter sample)\n    ]\n\n    results = []\n    for case in test_cases:\n        T, phi, sigma, data_seed, null_seed = case\n        reject_h0 = run_dickey_fuller_test(T, phi, sigma, data_seed, null_seed)\n        results.append(reject_h0)\n\n    # Format the final output as specified.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2373818"}]}