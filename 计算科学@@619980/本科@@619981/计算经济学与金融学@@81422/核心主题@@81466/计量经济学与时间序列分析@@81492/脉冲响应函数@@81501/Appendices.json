{"hands_on_practices": [{"introduction": "要真正理解脉冲响应函数 (IRF)，最直接的方法就是亲手计算它。本练习将指导您完成一个标准自回归 (AR) 模型的脉冲响应计算。我们将利用 AR 模型的递归特性，逐期追踪一次性冲击所产生的影响。通过编程实现这一计算过程，您将对冲击如何在动态系统中随时间传播获得具体而深刻的理解 ([@problem_id:2373828])，并为进行任何时间序列分析打下坚实的计算基础。", "problem": "给定一个由下式定义的 $3$ 阶单变量自回归 (AR) 模型：\n$$\ny_t \\;=\\; \\phi_1\\,y_{t-1} \\;+\\; \\phi_2\\,y_{t-2} \\;+\\; \\phi_3\\,y_{t-3} \\;+\\; \\varepsilon_t,\n$$\n其中 $\\{\\varepsilon_t\\}$ 是一个零均值、有限方差的白噪声序列。考虑在时间 $t=0$ 时的一次性单位脉冲，即 $\\varepsilon_0 = 1$ 且对于所有 $t \\neq 0$ 均有 $\\varepsilon_t = 0$，并施加零初始条件 $y_{-1} = y_{-2} = y_{-3} = 0$。脉冲响应函数 (IRF) 是序列 $\\{\\psi_h\\}_{h=0}^H$，其中 $\\psi_h$ 是在这些条件下，系统在期 $h$ 对时间 $0$ 的脉冲的响应。请对以下测试套件中的每组参数，以数值方式构建 IRF，直至指定的有限期 $H$。尽管可视化是标准分析的一部分，但在此任务中，您必须提供数值化的 IRF 值；您可能进行的任何绘图都不是所要求输出的一部分。\n\n测试套件：\n- 情况 A (稳定，单调)：$\\phi_1 = 0.7$, $\\phi_2 = -0.14$, $\\phi_3 = 0.008$, $H = 10$。\n- 情况 B (稳定，振荡)：$\\phi_1 = 1.1$, $\\phi_2 = -0.88$, $\\phi_3 = 0.192$, $H = 12$。\n- 情况 C (高持续性，$1$ 阶 AR 特例)：$\\phi_1 = 0.98$, $\\phi_2 = 0.0$, $\\phi_3 = 0.0$, $H = 10$。\n\n要求：\n- 对于每种情况，仅使用模型定义、给定的冲击和初始条件来计算 IRF 向量 $\\left[\\psi_0,\\psi_1,\\dots,\\psi_H\\right]$。\n- 将每个实数四舍五入到恰好 $6$ 位小数。\n- 最终输出格式：您的程序必须生成单一行，其中包含一个顶级列表，该列表包含三个列表（每种情况一个），且不含任何空格。内部列表的长度必须为 $H+1$，并按期 $h=0,1,\\dots,H$ 的顺序排列。例如，包含三个列表的输出应类似于 $[[\\cdot,\\cdot],[\\cdot],[\\cdot]]$，数字和列表之间用逗号分隔，不含空格，并且每个数字打印时小数点后恰好有 $6$ 位。\n\n您的程序必须按此确切顺序（情况 A、情况 B、情况 C）为以下三个测试用例实现上述要求。唯一可接受的输出是包含指定嵌套列表的单一行；不要输出任何其他文本或字符。", "solution": "问题陈述已经过验证，并被认定为有效。它在科学上基于线性时间序列模型理论，特别是自回归 (AR) 过程。该问题是良态的，提供了所有必要的参数、初始条件和一个明确的目标。给定测试用例的参数对应于稳定的 AR 过程，确保了有意义的、衰减的脉冲响应。语言客观而精确。因此，我将继续提供完整的解决方案。\n\n问题要求对一个记为 AR($3$) 的 $3$ 阶单变量自回归模型进行脉冲响应函数 (IRF) 的数值计算。该模型由以下方程指定：\n$$\ny_t = \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\phi_3 y_{t-3} + \\varepsilon_t\n$$\n其中 $\\{\\varepsilon_t\\}$ 是一个零均值 ($E[\\varepsilon_t] = 0$)、有限方差的白噪声过程。\n\nIRF，由序列 $\\{\\psi_h\\}_{h=0}^\\infty$ 表示，描述了在假设系统在冲击前处于均衡状态（零）的情况下，过程 $\\{y_t\\}$ 对 $t=0$ 时刻的单次冲击的演化。指定的条件是：\n1.  在时间 $t=0$ 时的单位脉冲：$\\varepsilon_0 = 1$ 且对于所有 $t \\neq 0$ 均有 $\\varepsilon_t=0$。\n2.  零初始条件：对于所有 $t < 0$ 均有 $y_t = 0$。特别是，$y_{-1} = y_{-2} = y_{-3} = 0$。\n\nIRF 系数 $\\psi_h$ 就是过程 $y_h$ 在这些特定条件下的值，即对于 $h \\ge 0$ 有 $\\psi_h \\equiv y_h$。我们可以递归地计算这些值。\n\n对于期 $h=0$：\n$$\n\\psi_0 = y_0 = \\phi_1 y_{-1} + \\phi_2 y_{-2} + \\phi_3 y_{-3} + \\varepsilon_0\n$$\n代入初始条件和脉冲值：\n$$\n\\psi_0 = \\phi_1(0) + \\phi_2(0) + \\phi_3(0) + 1 = 1\n$$\n单位冲击对过程的瞬时影响恒为 1。\n\n对于任何期 $h > 0$：\n$$\n\\psi_h = y_h = \\phi_1 y_{h-1} + \\phi_2 y_{h-2} + \\phi_3 y_{h-3} + \\varepsilon_h\n$$\n由于当 $h > 0$ 时 $\\varepsilon_h=0$，且当 $k \\ge 0$ 时 $y_k=\\psi_k$：\n$$\n\\psi_h = \\phi_1 \\psi_{h-1} + \\phi_2 \\psi_{h-2} + \\phi_3 \\psi_{h-3}\n$$\n这是一个关于 $h \\ge 1$ 的 IRF 系数的线性齐次递推关系。此递推的初始值由样本前历史和初始影响 $\\psi_0$ 导出。我们可以形式上定义当 $k < 0$ 时 $\\psi_k = 0$。这样可以进行统一计算。\n\n让我们明确地计算前几项：\n-   $\\psi_0 = 1$\n-   $\\psi_1 = \\phi_1 \\psi_0 + \\phi_2 \\psi_{-1} + \\phi_3 \\psi_{-2} = \\phi_1 (1) + \\phi_2(0) + \\phi_3(0) = \\phi_1$\n-   $\\psi_2 = \\phi_1 \\psi_1 + \\phi_2 \\psi_0 + \\phi_3 \\psi_{-1} = \\phi_1(\\phi_1) + \\phi_2(1) + \\phi_3(0) = \\phi_1^2 + \\phi_2$\n-   $\\psi_3 = \\phi_1 \\psi_2 + \\phi_2 \\psi_1 + \\phi_3 \\psi_0 = \\phi_1(\\phi_1^2+\\phi_2) + \\phi_2(\\phi_1) + \\phi_3(1) = \\phi_1^3 + 2\\phi_1\\phi_2 + \\phi_3$\n-   对于 $h \\ge 3$，递推仅使用先前计算过的正索引 $\\psi$ 项：$\\psi_h = \\phi_1 \\psi_{h-1} + \\phi_2 \\psi_{h-2} + \\phi_3 \\psi_{h-3}$。\n\n数值算法是此递归计算的直接实现。对于一个 AR($p$) 模型（此处 $p=3$），我们需要维持过程的最后 $p$ 个值的历史记录，以计算下一个值。我们可以使用一个大小为 $H+1+p$ 的数组，例如 `y_ext`，来存储从时间 $t=-p$ 到 $t=H$ 的过程的完整历史。\n\n每个测试用例的算法如下：\n1.  定义参数 $\\boldsymbol{\\phi} = [\\phi_1, \\phi_2, \\phi_3]$ 和期 $H$。过程的阶数为 $p=3$。\n2.  初始化一个大小为 $H+1+p$ 的数值数组 `y_ext`，所有元素设为零。这自动满足了零初始条件 $y_{-1}=y_{-2}=y_{-3}=0$，它们对应于 `y_ext` 的索引 $p-1, p-2, \\dots, 0$。\n3.  从时间 $t=0$ 迭代到 $H$。值 $y_t$ 将存储在 `y_ext` 的索引 $t+p$ 处。\n4.  在每次迭代 $t$ 中：\n    a.  定义冲击 $\\varepsilon_t$。如果 $t=0$，它为 $1$，否则为 $0$。\n    b.  使用 AR($3$) 公式计算 $y_t$。这涉及参数向量 $\\boldsymbol{\\phi}$ 与过程的最后 $p$ 个值组成的向量 $[y_{t-1}, y_{t-2}, y_{t-3}]$ 之间的点积。这些过去的值从 `y_ext` 数组中检索。\n    c.  将冲击 $\\varepsilon_t$ 加到结果中。\n    d.  将计算出的 $y_t$ 存储在 `y_ext` 的索引 $t+p$ 处。\n5.  循环完成后，IRF 序列 $\\{\\psi_0, \\psi_1, \\dots, \\psi_H\\}$ 对应于值 $\\{y_0, y_1, \\dots, y_H\\}$，这些值存储在 `y_ext` 中从索引 $p$ 到 $p+H$ 的位置。\n6.  按照要求，将最终的数值格式化为 $6$ 位小数。\n此过程应用于问题陈述中提供的三个测试用例中的每一个。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef compute_irf(phis, H):\n    \"\"\"\n    Computes the Impulse Response Function (IRF) for an AR model.\n\n    Args:\n        phis (np.ndarray): Array of AR coefficients [phi_1, phi_2, ...].\n        H (int): The horizon for the IRF calculation (computes up to psi_H).\n\n    Returns:\n        np.ndarray: The IRF sequence [psi_0, psi_1, ..., psi_H].\n    \"\"\"\n    p = len(phis)\n    # Extended history array to hold pre-sample values (y_{-p} to y_{-1})\n    # and the IRF values (y_0 to y_H).\n    # Indices 0 to p-1 hold y_{-p} to y_{-1}.\n    # Indices p to p+H hold y_0 to y_H.\n    y_ext = np.zeros(H + 1 + p)\n\n    # The initial conditions y_t=0 for t<0 are satisfied by np.zeros.\n\n    # Iterate from t=0 to H to compute the IRF.\n    for t in range(H + 1):\n        idx = t + p\n        \n        # Unit impulse at t=0.\n        epsilon = 1.0 if t == 0 else 0.0\n        \n        # The vector of past y values: [y_{t-1}, y_{t-2}, ..., y_{t-p}]\n        # These correspond to y_ext[idx-1], y_ext[idx-2], ..., y_ext[idx-p].\n        # The slice y_ext[t:t+p] gets y_{t-p},...,y_{t-1}. We reverse it for dot product.\n        past_y = y_ext[t:t+p][::-1]\n\n        # Compute y_t = sum(phi_i * y_{t-i}) + epsilon_t\n        y_ext[idx] = np.dot(phis, past_y) + epsilon\n\n    # The IRF is the sequence y_0, ..., y_H, which is stored from index p.\n    return y_ext[p:]\n\ndef solve():\n    \"\"\"\n    Solves the problem for the given test cases and prints the result\n    in the specified format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A (stable, monotone)\n        {'phis': [0.7, -0.14, 0.008], 'H': 10},\n        # Case B (stable, oscillatory)\n        {'phis': [1.1, -0.88, 0.192], 'H': 12},\n        # Case C (high persistence, AR(1) special case)\n        {'phis': [0.98, 0.0, 0.0], 'H': 10},\n    ]\n\n    all_results_str = []\n    \n    for case in test_cases:\n        phis_list = case['phis']\n        # Pad with zeros if fewer than 3 phis are given (as in Case C)\n        # to maintain a consistent AR(3) structure.\n        while len(phis_list) < 3:\n            phis_list.append(0.0)\n\n        phis = np.array(phis_list)\n        H = case['H']\n        \n        irf_values = compute_irf(phis, H)\n        \n        # Format the numbers to exactly 6 decimal places.\n        formatted_irf = [\"{:.6f}\".format(v) for v in irf_values]\n        # Create the string for a single case's list, e.g., \"[num1,num2,...]\"\n        case_result_str = \"[\" + \",\".join(formatted_irf) + \"]\"\n        all_results_str.append(case_result_str)\n        \n    # Join the results of all cases into a single list string, e.g., \"[[...],[...]]\"\n    # The requirement is no spaces anywhere.\n    final_output = \"[\" + \",\".join(all_results_str) + \"]\"\n\n    # Final print statement in the exact required format.\n    print(final_output)\n\nsolve()\n```", "id": "2373828"}, {"introduction": "在许多经济模型中，冲击并非一次性的“事件”，其自身可能具有持续性。本练习将探讨如何分析一个系统对此类持续性结构冲击的响应。我们将为一个冲击本身遵循一阶自回归 (AR(1)) 过程的系统推导出其脉冲响应函数，从而展示冲击的动态与系统的动态是如何相互作用的。这项练习 ([@problem_id:2400800]) 将教您处理更复杂、更贴近现实的冲击结构，这是从教科书案例迈向应用结构建模的关键一步。", "problem": "考虑一个常用于计算经济学和金融学中的线性动态系统，该系统用于研究结构性冲击对宏观经济变量的影响。设内生变量 $y_t$ 的演化过程如下：\n$$\ny_t = a\\,y_{t-1} + b\\,u_t,\n$$\n其中 $a$ 和 $b$ 是实数常数，$u_t$ 是遵循一阶自回归过程的结构性冲击：\n$$\nu_t = \\rho\\,u_{t-1} + \\varepsilon_t,\n$$\n满足 $|\\rho|<1$。序列 $\\{\\varepsilon_t\\}$ 代表结构性创新，对于所有 $t\\neq 0$ 都有 $\\varepsilon_t=0$，并在 $t=0$ 时刻有一个单位创新，即 $\\varepsilon_0=1$。假设系统从其确定性稳态开始，因此 $y_{-1}=0$ 且 $u_{-1}=0$。同时假设 $|a|<1$ 且 $a\\neq \\rho$。\n\n将脉冲响应函数（IRF）定义为，在所有其他创新为零且给定初始条件下，$y_t$ 对单位结构性创新 $\\varepsilon_0$ 的响应序列。仅使用模型方程、IRF 的定义以及诸如几何级数求和闭式解等公认事实，从第一性原理推导 $y_t$ 在整数期 $h\\ge 0$ 的脉冲响应函数，并将其表示为关于 $a$、$b$、$\\rho$ 和 $h$ 的闭式解析函数。\n\n您的最终答案必须是 IRF 在期 $h$ 的单一闭式解析表达式。不需要数值近似。如果在中间步骤中使用了求和，您的最终答案必须将它们简化为单一的闭式表达式。", "solution": "在尝试任何解答之前，将首先对问题进行严格的验证过程。\n\n### 第 1 步：提取已知条件\n问题陈述中明确给出的已知条件如下：\n- 内生变量 $y_t$ 的演化过程：\n$$y_t = a\\,y_{t-1} + b\\,u_t$$\n- 结构性冲击 $u_t$ 的过程：\n$$u_t = \\rho\\,u_{t-1} + \\varepsilon_t$$\n- 常数及其性质：$a$、$b$ 和 $\\rho$ 是实数常数。给出了以下约束：$|\\rho|<1$，$|a|<1$ 且 $a \\neq \\rho$。\n- 结构性创新序列 $\\{\\varepsilon_t\\}$ 定义为，对于所有 $t\\neq 0$ 都有 $\\varepsilon_t=0$，且 $\\varepsilon_0=1$。\n- 初始条件：系统处于其确定性稳态，意味着 $y_{-1}=0$ 且 $u_{-1}=0$。\n- 脉冲响应函数 (IRF) 的定义：IRF 是 $y_t$ 对单一单位创新 $\\varepsilon_0=1$ 的响应序列，此处记为 $y_h$，其中期数 $h \\ge 0$。\n- 任务是推导 IRF 在期 $h$ 的闭式解析表达式，即 $y_h$，作为 $a$、$b$、$\\rho$ 和 $h$ 的函数。\n\n### 第 2 步：使用提取的已知条件进行验证\n根据所需标准对问题进行评估。\n\n- **科学依据**：该问题描述了一个线性时不变 (LTI) 系统，这是时间序列分析、计量经济学和控制理论的基石。该模型是向量自回归 (VAR) 或动态随机一般均衡 (DSGE) 模型的简化表示，这些都是计算经济学和金融学中的标准工具。脉冲响应函数的概念对于分析此类系统至关重要。该问题是科学合理的。\n\n- **适定性**：该问题是适定的。初始条件 ($y_{-1}=0, u_{-1}=0$) 和冲击的特定性质（在 $t=0$ 时的单一脉冲）提供了一个完整的设置。约束条件 $|a|<1$ 和 $|\\rho|<1$ 确保了系统的稳定性，保证了脉冲响应收敛且不表现出爆炸性行为。条件 $a \\neq \\rho$ 对于避免解中出现除以零的奇点至关重要，这可以防止问题退化。存在一个唯一的、稳定的、有意义的解。\n\n- **客观性**：该问题以精确的数学语言陈述，没有任何主观或模棱两可的术语。\n\n该问题不违反任何无效标准。它是动态系统分析中一个标准的、定义明确的练习。\n\n### 第 3 步：结论与行动\n问题是**有效的**。将从第一性原理推导解答。\n\n### 脉冲响应函数的推导\n\n目标是在给定系统动态和单一冲击 $\\varepsilon_0=1$ 的情况下，求出任意整数期 $h \\ge 0$ 的 $y_h$ 的表达式。\n\n首先，我们确定在 $t=0$ 时的创新之后，冲击过程 $u_t$ 的路径。该过程由 $u_t = \\rho u_{t-1} + \\varepsilon_t$ 给出。初始条件为 $u_{-1}=0$。\n\n对于 $t=0$：\n$$u_0 = \\rho u_{-1} + \\varepsilon_0 = \\rho(0) + 1 = 1$$\n对于 $t=1$：\n$$u_1 = \\rho u_0 + \\varepsilon_1 = \\rho(1) + 0 = \\rho$$\n对于 $t=2$：\n$$u_2 = \\rho u_1 + \\varepsilon_2 = \\rho(\\rho) + 0 = \\rho^2$$\n通过简单归纳，对于任何 $t \\ge 0$，冲击过程的路径由下式给出：\n$$u_t = \\rho^t$$\n\n接下来，我们将 $u_t$ 的这个表达式代入 $y_t$ 的方程中：\n$$y_t = a y_{t-1} + b \\rho^t$$\n这是一个一阶线性差分方程。我们可以从初始条件 $y_{-1}=0$ 开始，通过递归向前代入求解 $y_t$。对于 $t \\ge 0$ 的响应 $y_t$ 代表了 IRF。\n\n对于 $t=0$：\n$$y_0 = a y_{-1} + b \\rho^0 = a(0) + b(1) = b$$\n对于 $t=1$：\n$$y_1 = a y_0 + b \\rho^1 = a(b) + b \\rho = b(a+\\rho)$$\n对于 $t=2$：\n$$y_2 = a y_1 + b \\rho^2 = a(b(a+\\rho)) + b \\rho^2 = b(a^2 + a\\rho + \\rho^2)$$\n这表明了一个模式。为了推导一般形式，我们可以通过从一个通用时间 $t$ 开始向后迭代来求解差分方程。\n$$y_t = a y_{t-1} + b \\rho^t$$\n代入 $y_{t-1}$：\n$$y_t = a(a y_{t-2} + b \\rho^{t-1}) + b \\rho^t = a^2 y_{t-2} + ab\\rho^{t-1} + b\\rho^t$$\n继续这个代入过程，直到我们达到初始条件 $y_{-1}$：\n$$y_t = a^{t+1} y_{-1} + \\sum_{k=0}^{t} a^k (b \\rho^{t-k})$$\n给定初始条件 $y_{-1}=0$，第一项消失：\n$$y_t = b \\sum_{k=0}^{t} a^k \\rho^{t-k}$$\n为了获得闭式解，我们必须计算这个求和。我们可以通过提出因子 $\\rho^t$ 来重写该和式：\n$$y_t = b \\rho^t \\sum_{k=0}^{t} a^k \\rho^{-k} = b \\rho^t \\sum_{k=0}^{t} \\left(\\frac{a}{\\rho}\\right)^k$$\n该求和是一个有限几何级数，形式为 $\\sum_{k=0}^{n} r^k$，其中 $n=t$，公比为 $r = \\frac{a}{\\rho}$。由于问题陈述 $a \\neq \\rho$，我们有 $r \\neq 1$。有限几何级数的和由以下公式给出：\n$$\\sum_{k=0}^{n} r^k = \\frac{1-r^{n+1}}{1-r}$$\n将此公式应用于我们对 $y_t$ 的表达式：\n$$\\sum_{k=0}^{t} \\left(\\frac{a}{\\rho}\\right)^k = \\frac{1 - \\left(\\frac{a}{\\rho}\\right)^{t+1}}{1 - \\frac{a}{\\rho}}$$\n现在，将此结果代回 $y_t$ 的方程中：\n$$y_t = b \\rho^t \\left( \\frac{1 - \\frac{a^{t+1}}{\\rho^{t+1}}}{1 - \\frac{a}{\\rho}} \\right)$$\n我们将此表达式简化为其最终形式：\n$$y_t = b \\rho^t \\left( \\frac{\\frac{\\rho^{t+1} - a^{t+1}}{\\rho^{t+1}}}{\\frac{\\rho - a}{\\rho}} \\right) = b \\rho^t \\left( \\frac{\\rho^{t+1} - a^{t+1}}{\\rho^{t+1}} \\cdot \\frac{\\rho}{\\rho - a} \\right)$$\n$$y_t = b \\rho^t \\left( \\frac{\\rho^{t+1} - a^{t+1}}{\\rho^t (\\rho - a)} \\right)$$\n消去 $\\rho^t$ 项后得到：\n$$y_t = b \\frac{\\rho^{t+1} - a^{t+1}}{\\rho - a}$$\n问题要求在整数期 $h \\ge 0$ 的 IRF。我们只需将 $t$ 替换为 $h$。$y$ 在期 $h$ 的脉冲响应是：\n$$y_h = b \\frac{\\rho^{h+1} - a^{h+1}}{\\rho - a}$$\n这是 IRF 的最终闭式解析表达式。稳定性条件 $|a|<1$ 和 $|\\rho|<1$ 确保当 $h \\to \\infty$ 时，$y_h \\to 0$，这对于稳定系统对暂时性冲击的响应是符合预期的。", "answer": "$$\\boxed{b \\frac{\\rho^{h+1} - a^{h+1}}{\\rho - a}}$$", "id": "2400800"}, {"introduction": "现实世界中的经济问题通常涉及多个变量和不同类型的冲击（例如，供给冲击与需求冲击）。这最后一个练习将我们的分析提升到结构向量自回归 (SVAR) 框架。我们将计算并比较不同类型的结构性冲击对目标变量（此处为通货膨胀）的累积效应。这项练习 ([@problem_id:2400780]) 让您亲手操作宏观计量经济学中的一个主力模型，学习如何区分不同的经济驱动力并评估它们的总体影响。", "problem": "考虑一个用于计算经济学和金融学中研究脉冲响应函数 (IRFs) 的二元线性时不变离散时间结构系统：\n$$\n\\mathbf{x}_t = A \\mathbf{x}_{t-1} + B \\mathbf{e}_t,\n$$\n其中 $\\mathbf{x}_t \\in \\mathbb{R}^2$ 是由变量 $\\mathbf{x}_t = \\begin{bmatrix} p^c_t \\\\ \\pi_t \\end{bmatrix}$ 构成的向量，其中 $p^c_t$ 表示商品价格通胀，$\\pi_t$ 表示总体通胀。结构性冲击 $\\mathbf{e}_t \\in \\mathbb{R}^2$ 满足 $\\mathbb{E}[\\mathbf{e}_t] = \\mathbf{0}$ 和 $\\mathbb{E}[\\mathbf{e}_t \\mathbf{e}_t'] = I_2$。$2 \\times 2$ 矩阵 $A$ 和 $B$ 不随时间变化。结构识别如下：第一个冲击是供给侧冲击，第二个冲击是需求侧冲击，这是通过它们对商品价格的影响来识别的，并带有符号约束，即 $B$ 矩阵第一列的第一个元素为负（供给侧冲击在冲击发生时使 $p^c_t$ 下降），而 $B$ 矩阵第二列的第一个元素为正（需求侧冲击在冲击发生时使 $p^c_t$ 上升）。\n\n对于在 $t=0$ 时刻发生的一次性单位 $j \\in \\{1,2\\}$ 类型结构性冲击，在期限 $h \\in \\{0,1,2,\\ldots\\}$ 时 $\\mathbf{x}_{h}$ 的脉冲响应函数（IRF）定义为\n$$\n\\mathrm{IRF}_j(h) = A^h \\mathbf{b}_j,\n$$\n其中 $\\mathbf{b}_j$ 是 $B$ 的第 $j$ 列。在期限 $h$ 时，通胀对冲击 $j$ 的脉冲响应函数是 $\\mathrm{IRF}_j(h)$ 的第二个分量，即 $\\left[\\mathrm{IRF}_j(h)\\right]_2$。\n\n对于下方的每个参数集，将期限 $h = 0,1,\\ldots,H$ 内通胀对需求侧冲击的累积响应定义为\n$$\nC^{\\text{dem}} = \\sum_{h=0}^{H} \\left[\\mathrm{IRF}_2(h)\\right]_2,\n$$\n以及通胀对供给侧冲击的累积响应为\n$$\nC^{\\text{sup}} = \\sum_{h=0}^{H} \\left[\\mathrm{IRF}_1(h)\\right]_2.\n$$\n计算比较标量\n$$\n\\Delta = C^{\\text{dem}} - C^{\\text{sup}}.\n$$\n\n您的任务是编写一个完整的程序，对下列每个参数集计算作为实数的 $\\Delta$。不涉及物理单位。\n\n测试套件（每个案例指定了 $A$、$B$ 和 $H$）：\n1. 案例 1：\n   $$\n   A = \\begin{bmatrix} 0.6 & 0.0 \\\\ 0.2 & 0.5 \\end{bmatrix}, \\quad\n   B = \\begin{bmatrix} -0.5 & 0.6 \\\\ 0.1 & 0.3 \\end{bmatrix}, \\quad\n   H = 20.\n   $$\n2. 案例 2：\n   $$\n   A = \\begin{bmatrix} 0.9 & 0.0 \\\\ 0.1 & 0.95 \\end{bmatrix}, \\quad\n   B = \\begin{bmatrix} -0.2 & 0.2 \\\\ 0.05 & 0.25 \\end{bmatrix}, \\quad\n   H = 40.\n   $$\n3. 案例 3（$A$ 中有重复特征值的边界条件）：\n   $$\n   A = \\begin{bmatrix} 0.8 & 0.0 \\\\ 0.3 & 0.8 \\end{bmatrix}, \\quad\n   B = \\begin{bmatrix} -0.3 & 0.3 \\\\ 0.02 & 0.15 \\end{bmatrix}, \\quad\n   H = 30.\n   $$\n4. 案例 4：\n   $$\n   A = \\begin{bmatrix} 0.2 & 0.0 \\\\ 0.5 & 0.3 \\end{bmatrix}, \\quad\n   B = \\begin{bmatrix} -0.1 & 0.1 \\\\ 0.0 & 0.1 \\end{bmatrix}, \\quad\n   H = 10.\n   $$\n\n您的程序必须为每个案例计算 $\\Delta$，并生成单行输出，该行包含四个结果，形式为用方括号括起来、由逗号分隔的浮点数列表，结果按案例顺序排列。每个浮点数表示为小数点后六位。例如，包含四个结果的输出应如下所示\n$$\n[\\delta_1,\\delta_2,\\delta_3,\\delta_4],\n$$\n其中，每个 $\\delta_i$ 表示案例 $i$ 所计算出的 $\\Delta$ 值，并保留小数点后六位。", "solution": "所述问题定义严谨、内容自洽，并且与应用于计算计量经济学的线性系统理论原理一致。未检测到不一致或谬误之处。因此，我们可以进行形式化求解。\n\n该问题要求计算一个标量 $\\Delta$，它代表了总体通胀（$\\pi_t$）对需求侧冲击和供给侧冲击的累积脉冲响应之间的差异。系统动态由以下线性模型决定：\n$$\n\\mathbf{x}_t = A \\mathbf{x}_{t-1} + B \\mathbf{e}_t\n$$\n其中 $\\mathbf{x}_t = \\begin{bmatrix} p^c_t \\\\ \\pi_t \\end{bmatrix}$。\n\n脉冲响应函数 $\\mathrm{IRF}_j(h)$ 衡量了在 $t=0$ 时刻发生的单位 $j \\in \\{1, 2\\}$ 类型结构性冲击对期限 $h$ 时的状态向量 $\\mathbf{x}_h$ 的影响。其表达式为：\n$$\n\\mathrm{IRF}_j(h) = A^h \\mathbf{b}_j\n$$\n其中 $\\mathbf{b}_j$ 是矩阵 $B$ 的第 $j$ 列。冲击 $j=1$ 对应供给侧冲击，冲击 $j=2$ 对应需求侧冲击。\n\n我们关心的是第二个变量，即总体通胀 $\\pi_t$ 的响应。为了从向量 $\\mathrm{IRF}_j(h)$ 中提取这个分量，我们使用标准基向量 $\\mathbf{e}_2' = \\begin{bmatrix} 0 & 1 \\end{bmatrix}$。在期限 $h$ 时，通胀对冲击 $j$ 的响应为：\n$$\n[\\mathrm{IRF}_j(h)]_2 = \\mathbf{e}_2' \\mathrm{IRF}_j(h) = \\mathbf{e}_2' A^h \\mathbf{b}_j\n$$\n\n问题定义了在期限 $h=0, 1, \\ldots, H$ 内的累积通胀响应。对需求侧冲击（$j=2$）的累积响应为：\n$$\nC^{\\text{dem}} = \\sum_{h=0}^{H} [\\mathrm{IRF}_2(h)]_2 = \\sum_{h=0}^{H} \\mathbf{e}_2' A^h \\mathbf{b}_2\n$$\n而对供给侧冲击（$j=1$）的累积响应为：\n$$\nC^{\\text{sup}} = \\sum_{h=0}^{H} [\\mathrm{IRF}_1(h)]_2 = \\sum_{h=0}^{H} \\mathbf{e}_2' A^h \\mathbf{b}_1\n$$\n\n根据矩阵运算的线性性质，我们可以从求和中提出常数项：\n$$\nC^{\\text{dem}} = \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) \\mathbf{b}_2\n$$\n$$\nC^{\\text{sup}} = \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) \\mathbf{b}_1\n$$\n\n目标量是 $\\Delta = C^{\\text{dem}} - C^{\\text{sup}}$。代入以上表达式：\n$$\n\\Delta = \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) \\mathbf{b}_2 - \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) \\mathbf{b}_1\n$$\n再次因式分解可得到一个更紧凑的表达式：\n$$\n\\Delta = \\mathbf{e}_2' \\left( \\sum_{h=0}^{H} A^h \\right) (\\mathbf{b}_2 - \\mathbf{b}_1)\n$$\n这是我们计算所用的基本方程。\n\n$\\sum_{h=0}^{H} A^h$ 这一项是一个有限的矩阵几何级数。直接的迭代求和在计算上是有效的，但效率不高。一个更简洁且在数值上更优的方法是使用几何级数和的闭式解。设 $S_H = \\sum_{h=0}^{H} A^h = I + A + A^2 + \\dots + A^H$。则有 $(I - A)S_H = (I - A)(I + A + \\dots + A^H) = I - A^{H+1}$。\n如果矩阵 $(I - A)$ 可逆，我们可以写成：\n$$\nS_H = (I - A^{H+1}) (I - A)^{-1}\n$$\n如果 $1$ 不是 $A$ 的特征值，则 $(I - A)$ 的可逆性得到保证。对于给定的经济系统，稳定性要求 $A$ 的所有特征值都位于单位圆内，这意味着它们的模严格小于 $1$。对所提供的矩阵 $A$ 的检查证实，该条件对所有测试案例均成立。因此，使用此闭式表达式是合理且正确的。\n\n因此，$\\Delta$ 的最终计算公式为：\n$$\n\\Delta = \\mathbf{e}_2' \\left[ (I - A^{H+1}) (I - A)^{-1} \\right] (\\mathbf{b}_2 - \\mathbf{b}_1)\n$$\n\n每个测试案例的算法如下：\n1. 给定矩阵 $A \\in \\mathbb{R}^{2 \\times 2}$、$B \\in \\mathbb{R}^{2 \\times 2}$ 和整数期限 $H$。\n2. 从 $B$ 中提取列向量 $\\mathbf{b}_1$ 和 $\\mathbf{b}_2$。\n3. 计算差分向量 $\\mathbf{b}_{\\text{diff}} = \\mathbf{b}_2 - \\mathbf{b}_1$。\n4. 计算矩阵的幂 $A^{H+1}$。\n5. 计算矩阵的逆 $(I - A)^{-1}$，其中 $I$ 是 $2 \\times 2$ 的单位矩阵。\n6. 计算矩阵和 $S_H = (I - A^{H+1}) (I - A)^{-1}$。\n7. 计算结果向量 $\\mathbf{v} = S_H \\mathbf{b}_{\\text{diff}}$。\n8. 标量 $\\Delta$ 是向量 $\\mathbf{v}$ 的第二个元素，即 $\\Delta = [\\mathbf{v}]_2$。\n\n该程序是稳健的，并将针对所有指定的测试案例实施。数值精度将由标准浮点运算处理，最终输出将按要求格式化为小数点后六位。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the comparison scalar Delta for each test case according to the problem definition.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"A\": np.array([[0.6, 0.0], [0.2, 0.5]]),\n            \"B\": np.array([[-0.5, 0.6], [0.1, 0.3]]),\n            \"H\": 20,\n        },\n        {\n            \"A\": np.array([[0.9, 0.0], [0.1, 0.95]]),\n            \"B\": np.array([[-0.2, 0.2], [0.05, 0.25]]),\n            \"H\": 40,\n        },\n        {\n            \"A\": np.array([[0.8, 0.0], [0.3, 0.8]]),\n            \"B\": np.array([[-0.3, 0.3], [0.02, 0.15]]),\n            \"H\": 30,\n        },\n        {\n            \"A\": np.array([[0.2, 0.0], [0.5, 0.3]]),\n            \"B\": np.array([[-0.1, 0.1], [0.0, 0.1]]),\n            \"H\": 10,\n        },\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        A = case[\"A\"]\n        B = case[\"B\"]\n        H = case[\"H\"]\n\n        # The dimension of the system, n=2.\n        n = A.shape[0]\n        I = np.identity(n)\n\n        # Extract columns of B, corresponding to supply (b1) and demand (b2) shocks.\n        b1 = B[:, 0]\n        b2 = B[:, 1]\n        \n        # Compute the difference vector b_diff = b2 - b1.\n        b_diff = b2 - b1\n\n        # The core calculation is based on the formula:\n        # Delta = e2' * [sum_{h=0 to H} A^h] * (b2 - b1)\n        # where the sum is a finite geometric series of matrices.\n        # sum_{h=0 to H} A^h = (I - A^(H+1)) * (I - A)^(-1)\n\n        # Compute A^(H+1)\n        A_pow_H1 = np.linalg.matrix_power(A, H + 1)\n\n        # Compute (I - A)^(-1)\n        I_minus_A_inv = np.linalg.inv(I - A)\n\n        # Compute the matrix sum S_H\n        S_H = (I - A_pow_H1) @ I_minus_A_inv\n\n        # Compute the cumulative response vector\n        cumulative_response_vector = S_H @ b_diff\n\n        # The scalar Delta is the second component of the response vector (inflation response).\n        delta = cumulative_response_vector[1]\n\n        results.append(delta)\n\n    # Format the final output as a comma-separated list of floats with six decimal places, enclosed in brackets.\n    output_str = f\"[{','.join(f'{r:.6f}' for r in results)}]\"\n    \n    # Final print statement in the exact required format.\n    print(output_str)\n\nsolve()\n```", "id": "2400780"}]}