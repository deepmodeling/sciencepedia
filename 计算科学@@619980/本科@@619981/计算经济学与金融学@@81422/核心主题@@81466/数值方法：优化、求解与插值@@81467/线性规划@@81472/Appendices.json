{"hands_on_practices": [{"introduction": "在金融和商业决策中，我们经常面临“是/否”的选择，例如是否投资某个项目。整数规划中的二元变量为这类决策提供了强大的建模工具。本练习旨在训练一项基本技能：如何将复杂的商业逻辑规则（如项目间的互斥性或依赖关系）转化为简洁的线性数学约束 [@problem_id:2406839]。", "problem": "一家金融公司的资本预算部门必须决定下一时期要进行哪些投资项目。有四个候选项目，分别标记为 $A$、$B$、$C$ 和 $D$。对于每个项目 $i \\in \\{A,B,C,D\\}$，定义一个二元决策变量 $x_i \\in \\{0,1\\}$，其中，当且仅当项目 $i$ 被选中时 $x_i=1$，否则 $x_i=0$。选择必须满足以下逻辑要求，公司打算将这些要求编码到一个整数线性规划（ILP）模型中：\n\n(i) 项目 $A$ 和 $B$ 是互斥的。\n\n(ii) 只有在项目 $B$ 被执行的情况下，才能执行项目 $C$。\n\n(iii) 项目 $A$ 或 $D$ 中至少必须选择一个。\n\n(iv) 总共最多只能执行 $2$ 个项目。\n\n下列哪组线性约束，与二元限制条件 $x_A,x_B,x_C,x_D \\in \\{0,1\\}$ 一起使用时，能正确地为所有四个要求建模？\n\nA. \n$$\n\\begin{aligned}\n&x_A + x_B \\le 1,\\\\\n&x_C \\le x_B,\\\\\n&x_A + x_D \\ge 1,\\\\\n&x_A + x_B + x_C + x_D \\le 2.\n\\end{aligned}\n$$\n\nB.\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1,\\\\\n&x_B \\le x_C,\\\\\n&x_A + x_D \\ge 1,\\\\\n&x_A + x_B + x_C + x_D \\le 2.\n\\end{aligned}\n$$\n\nC.\n$$\n\\begin{aligned}\n&x_A + x_B \\ge 1,\\\\\n&x_C \\le x_B,\\\\\n&x_A + x_D = 1,\\\\\n&x_A + x_B + x_C + x_D \\le 2.\n\\end{aligned}\n$$\n\nD.\n$$\n\\begin{aligned}\n&x_A x_B = 0,\\\\\n&x_C \\ge x_B,\\\\\n&x_A + x_D \\ge 1,\\\\\n&x_A + x_B + x_C + x_D = 2.\n\\end{aligned}\n$$", "solution": "在尝试任何解答之前，必须首先对问题陈述进行严格验证，以确保其科学上合理、内容独立完整且提法恰当。\n\n**步骤1：提取已知信息**\n\n问题提供了以下数据和定义：\n- 四个候选项目：$A$、$B$、$C$、$D$。\n- 二元决策变量：对于 $i \\in \\{A,B,C,D\\}$，$x_i \\in \\{0,1\\}$。如果项目 $i$ 被选中，则 $x_i=1$；否则 $x_i=0$。\n- 四个要编码到整数线性规划（ILP）模型中的逻辑要求：\n    (i) 项目 $A$ 和 $B$ 是互斥的。\n    (ii) 只有在项目 $B$ 被执行的情况下，才能执行项目 $C$。\n    (iii) 项目 $A$ 或 $D$ 中至少必须选择一个。\n    (iv) 总共最多只能执行 $2$ 个项目。\n\n**步骤2：使用提取的已知信息进行验证**\n\n根据数学建模和运筹学的既定原则，对该问题进行审视。\n\n- **科学依据**：该问题属于整数线性规划的标准框架，这是应用数学和计算经济学中一个成熟的学科。将逻辑条件转化为线性不等式是该领域一项基本且有效的练习。\n- **适定性**：该问题要求找出正确的线性约束集来表示一组给定的逻辑条件。这是一个定义明确的任务，有确定的正确答案。这些逻辑条件并非内在矛盾。例如，单独选择项目 $D$（$x_D=1$，$x_A=x_B=x_C=0$）满足所有四个要求：(i) $0+0=0 \\le 1$；(ii) $x_C=0$，所以该条件平凡满足；(iii) $0+1=1 \\ge 1$；(iv) 总共1个项目 $\\le 2$。因此，存在一个可行解空间。\n- **客观性**：问题陈述使用了数学和金融建模中常见的精确、无歧义的语言。没有主观或基于意见的元素。\n\n该问题没有缺陷。它不是科学上不合理、不可形式化、不完整、不切实际或不适定的。它是ILP模型构建中的一个标准问题。\n\n**步骤3：结论和行动**\n\n问题陈述是**有效的**。我们可以继续进行推导和分析。\n\n**约束的推导**\n\n我们将把每个逻辑要求转化为一个包含二元变量 $x_A, x_B, x_C, x_D$ 的线性不等式约束。\n\n(i) **项目 $A$ 和 $B$ 是互斥的。**\n这意味着不能同时选择这两个项目。如果 $x_A=1$，则 $x_B$ 必须为 $0$。如果 $x_B=1$，则 $x_A$ 必须为 $0$。两者都为 $0$ 也是允许的。这两个二元变量的和不能超过 $1$。\n这可以被线性不等式正确地表达为：\n$$x_A + x_B \\le 1$$\n\n(ii) **只有在项目 $B$ 被执行的情况下，才能执行项目 $C$。**\n这是一个条件语句：“如果执行 $C$，那么必须执行 $B$。”用决策变量来说，如果 $x_C=1$，那么必须有 $x_B=1$。如果 $x_C=0$，这个要求对 $x_B$没有任何限制。我们来检验不等式 $x_C \\le x_B$：\n- 如果 $x_C=1$，不等式变为 $1 \\le x_B$。由于 $x_B$ 是二元变量，这迫使 $x_B=1$。这是正确的。\n- 如果 $x_C=0$，不等式变为 $0 \\le x_B$。对于二元变量，该不等式恒成立，允许 $x_B$ 为 $0$ 或 $1$。这也是正确的。\n因此，正确的约束是：\n$$x_C \\le x_B$$\n\n(iii) **项目 $A$ 或 $D$ 中至少必须选择一个。**\n这意味着我们必须选择项目 $A$，或项目 $D$，或者两者都选。相应决策变量的和必须至少为 $1$。\n正确的约束是：\n$$x_A + x_D \\ge 1$$\n\n(iv) **总共最多只能执行 $2$ 个项目。**\n被选中的项目总数是所有决策变量的和，$x_A + x_B + x_C + x_D$。这个和不能超过 $2$。\n正确的约束是：\n$$x_A + x_B + x_C + x_D \\le 2$$\n\n结合这些结果，正确的线性约束集是：\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1\\\\\n&x_C \\le x_B\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\n\n**评估所给选项**\n\n现在，我们根据我们推导出的正确约束集来评估每个选项。\n\n**A.**\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1\\\\\n&x_C \\le x_B\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\n这组约束与我们从第一性原理推导出的约束完全匹配。每个约束都正确地为相应的逻辑要求建模。\n结论：**正确**。\n\n**B.**\n$$\n\\begin{aligned}\n&x_A + x_B \\le 1\\\\\n&x_B \\le x_C\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\n第二个约束 $x_B \\le x_C$ 建模的条件是“只有在项目 $C$ 被执行的情况下，才能执行项目 $B$。”这与要求(ii)相反。因此，这个选项是错误的。\n结论：**错误**。\n\n**C.**\n$$\n\\begin{aligned}\n&x_A + x_B \\ge 1\\\\\n&x_C \\le x_B\\\\\n&x_A + x_D = 1\\\\\n&x_A + x_B + x_C + x_D \\le 2\n\\end{aligned}\n$$\n第一个约束 $x_A + x_B \\ge 1$ 建模的是“$A$ 或 $B$ 中至少选择一个”，这与要求(i)的互斥性相矛盾。第三个约束 $x_A + x_D = 1$ 建模的是“$A$ 或 $D$ 中恰好选择一个”，这比要求(iii)“至少一个”的限制性更强。这两个约束都是错误的。\n结论：**错误**。\n\n**D.**\n$$\n\\begin{aligned}\n&x_A x_B = 0\\\\\n&x_C \\ge x_B\\\\\n&x_A + x_D \\ge 1\\\\\n&x_A + x_B + x_C + x_D = 2\n\\end{aligned}\n$$\n第一个约束 $x_A x_B = 0$ 是一个**非线性**约束。问题指定了一个整数**线性**规划（ILP）模型，其所有约束都必须是线性的。第二个约束 $x_C \\ge x_B$ 等同于 $x_B \\le x_C$，错误地建模了要求(ii)。第四个约束 $x_A + x_B + x_C + x_D = 2$ 建模的是“必须恰好执行 $2$ 个项目”，这比要求(iv)“最多 $2$ 个”的限制性更强。该选项包含多个错误和对ILP的无效表述。\n结论：**错误**。", "answer": "$$\\boxed{A}$$", "id": "2406839"}, {"introduction": "现实世界的问题往往同时包含离散的“是/否”抉择和连续的数量决策。本练习将前一练习的逻辑建模提升一步，通过经典的“自制或外购”场景，展示如何将一个二元决策（是否建厂）与相应的固定成本和生产能力上限联系起来 [@problem_id:2406916]。掌握这种混合整数线性规划（MILP）的建模方法对于解决涉及固定费用的资源配置问题至关重要。", "problem": "一家单一产品的公司必须在一个计划期内满足确定的需求 $D$。该公司可以选择建造一座新工厂并进行内部生产，或者从外部供应商处购买产品。如果公司建造工厂，会产生一笔固定成本 $F$，并能以每单位 $c$ 的可变成本生产最多 $K$ 个单位的产品。从外部供应商处购买的成本为每单位 $s$，且没有产能限制。所有需求必须在当期内被满足，不允许延期交货和销售损失。公司的目标是以最小的总成本来满足需求。\n\n设 $x$ 表示内部生产数量，$z$ 表示从外部供应商采购的数量，$y \\in \\{0,1\\}$ 表示是否建造工厂（$y=1$ 表示建造，$y=0$ 表示不建造）。下列哪个混合整数线性规划（MILP）模型正确地为这个建厂与否的决策进行建模，并包含了大额固定成本和产能关联？\n\nA.\n最小化总成本\n$$\\min\\; c\\,x + s\\,z + F\\,y$$\n约束条件为\n$$x + z = D,$$\n$$x \\le K\\,y,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n\nB.\n最小化总成本\n$$\\min\\; c\\,x + s\\,z + F\\,y$$\n约束条件为\n$$x + z = D,$$\n$$x \\ge K\\,y,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n\nC.\n最小化总成本\n$$\\min\\; c\\,x + s\\,z + F\\,x$$\n约束条件为\n$$x + z = D,$$\n$$x \\le K,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n\nD.\n最小化总成本\n$$\\min\\; c\\,x + s\\,z$$\n约束条件为\n$$x + z = D,$$\n$$x \\le K\\,y + K,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$", "solution": "首先将对问题陈述进行严格的验证过程。\n\n**步骤1：提取已知信息**\n\n问题提供了以下信息：\n-   需要满足的需求：$D$（确定的）。\n-   计划期：$1$。\n-   建厂的固定成本：$F$。\n-   工厂产能：$K$ 单位。\n-   内部生产的可变成本：每单位 $c$。\n-   外部供应的成本：每单位 $s$。\n-   外部供应能力：无限。\n-   要求：所有需求必须被满足。没有延期交货或销售损失。\n-   目标：最小化总成本。\n-   决策变量：\n    -   $x$：内部生产的数量。\n    -   $z$：从外部供应商采购的数量。\n    -   $y$：二元变量，$y \\in \\{0,1\\}$，其中 $y=1$ 表示建厂，$y=0$ 表示不建厂。\n\n**步骤2：使用提取的已知信息进行验证**\n\n1.  **科学基础**：该问题是运筹学领域一个经典的“自制或外购”（make-or-buy）问题或“固定费用”（fixed-charge）问题，特指混合整数线性规划。它完全基于成熟的数学建模原则。该问题具有科学有效性。\n2.  **适定性**：目标定义清晰（最小化成本），决策与成本之间的关系也已明确。问题要求建立一个数学模型，这是该领域内一项标准的、适定的任务。\n3.  **客观性**：问题陈述使用了数学和经济学中常见、精确、客观的术语。没有主观或含糊不清的语言。\n4.  **完整性**：问题提供了构建所需数学模型的所有必要参数（$D, F, K, c, s$）和决策变量（$x, z, y$）。问题是自洽的。\n5.  **现实性与可行性**：尽管做了一些简化假设，如确定性需求，但这些都是此类入门级模型中的标准做法，并不代表科学或逻辑上的缺陷。该构造是用于决策分析的有效抽象。\n\n**步骤3：结论与行动**\n\n问题陈述是有效的。这是一个定义明确的、标准的混合整数线性规划问题。我将着手推导正确的模型，并评估给定的选项。\n\n**正确模型的推导**\n\n模型必须涵盖三个方面：总成本、需求满足以及建厂决策的逻辑。\n\n1.  **目标函数**：目标是最小化总成本。总成本是可变生产成本、外部采购成本和工厂固定成本的总和。\n    -   可变生产成本：$c \\cdot x$。\n    -   外部采购成本：$s \\cdot z$。\n    -   工厂固定成本：只有在建造工厂时才会产生这笔成本 $F$。二元变量 $y$ 就是为此设计的：如果 $y=1$，成本为 $F%；如果 $y=0$，成本为 $0$。这在数学上表示为 $F \\cdot y$。\n    -   因此，要最小化的目标函数是：$\\min\\; c\\,x + s\\,z + F\\,y$。\n\n2.  **约束条件**：\n    -   **需求满足**：从内部生产（$x$）和外部供应（$z$）获得的总产品数量必须恰好满足需求 $D$。由于成本是正的，任何超过需求的生产都是次优的，因此该约束可以表示为等式：$x + z = D$。\n    -   **产能与建厂逻辑**：这是关键的关联。只有在建造工厂（$y=1$）时，才可能进行内部生产（$x$）。\n        -   如果 $y=0$（不建厂），那么产量必须为零：$x=0$。\n        -   如果 $y=1$（建厂），那么产量受产能 $K$ 的限制：$x \\le K$。\n        这两个条件必须通过一个（或一组）线性约束来体现。对此建模的标准方法是使用“大M”（big-M）约束：$x \\le M \\cdot y$。在这里，参数 $K$ 是产量 $x$ 的一个已知上界，因此它完美地充当了 $M$ 的角色。该约束为 $x \\le K \\cdot y$。\n        我们来验证其逻辑：\n        -   如果 $y=0$，约束变为 $x \\le K \\cdot 0$，即 $x \\le 0$。结合非负约束 $x \\ge 0$，这正确地迫使 $x=0$。\n        -   如果 $y=1$，约束变为 $x \\le K \\cdot 1$，即 $x \\le K$。这正确地施加了生产产能限制。\n    -   **变量定义域**：生产和采购数量不能为负，且建厂决策是二元的。\n        -   $x \\ge 0$。\n        -   $z \\ge 0$。\n        -   $y \\in \\{0, 1\\}$。\n\n**完整模型**：\n正确的混合整数线性规划模型为：\n最小化总成本\n$$\\min\\; c\\,x + s\\,z + F\\,y$$\n约束条件为\n$$x + z = D,$$\n$$x \\le K\\,y,$$\n$$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n\n**选项评估**\n\n-   **选项 A**：\n    $$\\min\\; c\\,x + s\\,z + F\\,y$$\n    约束条件为\n    $$x + z = D,$$\n    $$x \\le K\\,y,$$\n    $$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n    该模型与从基本原则推导出的模型完全相同。目标函数正确地计算了所有成本的总和。第一个约束确保了需求被满足。第二个约束 $x \\le K\\,y$ 正确地将生产数量 $x$ 与建厂决策变量 $y$ 关联起来。如果 $y=0$，则 $x=0$；如果 $y=1$，则 $x \\le K$。变量定义域约束是正确的。\n    **结论：正确。**\n\n-   **选项 B**：\n    $$\\min\\; c\\,x + s\\,z + F\\,y$$\n    约束条件为\n    $$x + z = D,$$\n    $$x \\ge K\\,y,$$\n    $$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n    约束条件 $x \\ge K\\,y$ 存在根本性缺陷。如果建造工厂（$y=1$），它错误地强制产量至少为产能 $K$（$x \\ge K$），而问题陈述是产量*不超过*产能。如果不建工厂（$y=0$），该约束变为 $x \\ge 0$，这是一个冗余条件，并且未能强制产量为零（$x=0$）。这个模型没有正确地为问题建模。\n    **结论：不正确。**\n\n-   **选项 C**：\n    $$\\min\\; c\\,x + s\\,z + F\\,x$$\n    约束条件为\n    $$x + z = D,$$\n    $$x \\le K,$$\n    $$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n    该模型包含多个错误。目标函数将固定成本建模为 $F \\cdot x$，仿佛 $F$ 是每单位产品的可变成本，这与 $F$ 是固定成本的定义相矛盾。此外，决策变量 $y$ 是“悬空”的——它出现在变量列表中，但没有出现在目标函数或任何约束条件中。因此，它对解没有影响。约束 $x \\le K$ 始终有效，错误地暗示了无论是否建厂，产能 $K$ 都可用。\n    **结论：不正确。**\n\n-   **选项 D**：\n    $$\\min\\; c\\,x + s\\,z$$\n    约束条件为\n    $$x + z = D,$$\n    $$x \\le K\\,y + K,$$\n    $$x \\ge 0,\\; z \\ge 0,\\; y \\in \\{0,1\\}.$$\n    该模型同样存在缺陷。首先，目标函数完全忽略了固定成本 $F \\cdot y$，这意味着建厂的成本从未被计入。其次，产能约束 $x \\le K\\,y + K$ 是不合逻辑的。如果 $y=0$（不建厂），它变为 $x \\le K$，错误地允许了内部生产。如果 $y=1$（建厂），它变为 $x \\le 2K$，这违反了规定的产能 $K$。\n    **结论：不正确。**", "answer": "$$\\boxed{A}$$", "id": "2406916"}, {"introduction": "此练习将我们从模型构建转向计算求解与分析。解决经典的“饮食问题”不仅是线性规划的基石应用，更重要的是，它引导我们进行灵敏度分析——通过改变关键经济参数（如食品价格）来观察最优解的变化 [@problem_id:2406884]。对于任何经济或金融分析师来说，理解模型对输入变化的反应是一项核心能力。", "problem": "考虑一个成本最小化的膳食模型，该模型被构建为一个线性规划 (LP) 问题，包含五种食物：牛油果、鸡胸肉、黑豆、白米和西兰花。设决策变量为非负的食用份数，分别表示为 $x_{A}$ (牛油果)、$x_{C}$ (鸡肉)、$x_{B}$ (豆子)、$x_{R}$ (米饭) 和 $x_{Br}$ (西兰花)。每份食物的营养成分如下：牛油果提供 $240$ 千卡热量、$3$ 克蛋白质、$22$ 克脂肪和 $10$ 克纤维；鸡肉提供 $200$ 千卡热量、$35$ 克蛋白质、$5$ 克脂肪和 $0$ 克纤维；豆子提供 $180$ 千卡热量、$12$ 克蛋白质、$1$ 克脂肪和 $12$ 克纤维；米饭提供 $220$ 千卡热量、$4$ 克蛋白质、$1$ 克脂肪和 $1$ 克纤维；西兰花提供 $55$ 千卡热量、$4$ 克蛋白质、$0$ 克脂肪和 $5$ 克纤维。每日最低需求量为 $2000$ 千卡热量、$50$ 克蛋白质、$44$ 克脂肪和 $30$ 克纤维。需要最小化的总成本为 $c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}$，其中 $c_{A} \\ge 0$ 是每份牛油果的价格，其他价格是固定的，单位为每份的同一货币单位。该模型为\n$$\n\\min_{x_{A},x_{C},x_{B},x_{R},x_{Br} \\ge 0} \\; c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}\n$$\n受以下营养需求约束\n$$\n240 x_{A} + 200 x_{C} + 180 x_{B} + 220 x_{R} + 55 x_{Br} \\ge 2000,\n$$\n$$\n3 x_{A} + 35 x_{C} + 12 x_{B} + 4 x_{R} + 4 x_{Br} \\ge 50,\n$$\n$$\n22 x_{A} + 5 x_{C} + 1 x_{B} + 1 x_{R} + 0 x_{Br} \\ge 44,\n$$\n$$\n10 x_{A} + 0 x_{C} + 12 x_{B} + 1 x_{R} + 5 x_{Br} \\ge 30.\n$$\n所有份数均为无量纲的份数计数，成本采用统一的每份货币单位。对于每个指定的牛油果价格 $c_{A}$，该模型都有一个明确定义的最优解。\n\n任务：通过对一组牛油果价格 $c_{A}$ 求解上述问题，对牛油果的目标函数系数 $c_{A}$ 进行敏感性分析，并针对每种情况，返回最优的牛油果数量 $x_{A}^{\\star}$（以份为单位）和最优的最小总成本 $z^{\\star}$（以相同货币单位表示）。报告 $x_{A}^{\\star}$ 和 $z^{\\star}$，四舍五入到小数点后 $4$ 位。\n\n待分析的牛油果价格测试集：\n- 标准中等价格：$c_{A} = 1.00$。\n- 低价（趋向于以牛油果为主的边界情况）：$c_{A} = 0.50$。\n- 低于可能基变换的中高价格：$c_{A} = 10.00$。\n- 高于可能基变换的高价格：$c_{A} = 12.00$。\n- 极高价格（趋向于排除牛油果的边界情况）：$c_{A} = 25.00$。\n\n最终输出格式：您的程序应生成单行输出，其中包含结果，格式为一个逗号分隔的 $[x_{A}^{\\star},z^{\\star}]$ 对列表，用方括号括起来，顺序与测试集完全相同。将每个数字四舍五入到小数点后 $4$ 位。例如：$[[0.0000,123.4567],[1.2345,67.8901]]$。", "solution": "首先按照要求执行问题验证。\n\n步骤 1：提取已知信息\n\n- **决策变量**：非负的食用份数：$x_{A}$ (牛油果), $x_{C}$ (鸡肉), $x_{B}$ (豆子), $x_{R}$ (米饭), $x_{Br}$ (西兰花)，其中 $x_{A}, x_{C}, x_{B}, x_{R}, x_{Br} \\ge 0$。\n- **每份的营养成分**：\n    - 牛油果：$240$ 千卡热量，$3$ 克蛋白质，$22$ 克脂肪，$10$ 克纤维。\n    - 鸡肉：$200$ 千卡热量，$35$ 克蛋白质，$5$ 克脂肪，$0$ 克纤维。\n    - 豆子：$180$ 千卡热量，$12$ 克蛋白质，$1$ 克脂肪，$12$ 克纤维。\n    - 米饭：$220$ 千卡热量，$4$ 克蛋白质，$1$ 克脂肪，$1$ 克纤维。\n    - 西兰花：$55$ 千卡热量，$4$ 克蛋白质，$0$ 克脂肪，$5$ 克纤维。\n- **每日最低需求**：$\\ge 2000$ 千卡热量, $\\ge 50$ 克蛋白质, $\\ge 44$ 克脂肪, $\\ge 30$ 克纤维。\n- **目标函数**：最小化总成本 $c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}$，其中 $c_{A} \\ge 0$。\n- **线性规划模型**：\n$$\n\\min_{x_{A},x_{C},x_{B},x_{R},x_{Br} \\ge 0} \\; c_{A} x_{A} + 2.5 x_{C} + 1.2 x_{B} + 0.6 x_{R} + 0.8 x_{Br}\n$$\n约束条件：\n$$\n240 x_{A} + 200 x_{C} + 180 x_{B} + 220 x_{R} + 55 x_{Br} \\ge 2000\n$$\n$$\n3 x_{A} + 35 x_{C} + 12 x_{B} + 4 x_{R} + 4 x_{Br} \\ge 50\n$$\n$$\n22 x_{A} + 5 x_{C} + 1 x_{B} + 1 x_{R} + 0 x_{Br} \\ge 44\n$$\n$$\n10 x_{A} + 0 x_{C} + 12 x_{B} + 1 x_{R} + 5 x_{Br} \\ge 30\n$$\n- **任务**：对于一组给定的 $c_{A}$ 值，找出最优牛油果数量 $x_{A}^{\\star}$ 和最优最小成本 $z^{\\star}$，四舍五入到小数点后 4 位。\n- **测试集**：$c_{A} \\in \\{1.00, 0.50, 10.00, 12.00, 25.00\\}$。\n\n步骤 2：使用提取的已知信息进行验证\n\n该问题是一个经典的“食谱问题”，被构建为一个线性规划任务。这是运筹学和计算经济学中一个标准且易于理解的问题。\n\n- **科学依据**：该问题基于成熟的线性规划数学理论。营养数据和膳食需求是合理的，并为模型提供了有效的基础。它没有违反任何科学原理。\n- **适定性 (Well-Posed)**：该问题是一个标准形式的线性规划。由线性不等式交集定义的可行域是凸的且非空。目标函数是线性的。由于成本和决策变量都是非负的，目标函数在可行域上有下界。问题陈述正确地断言，对于每个指定的价格 $c_{A}$，都存在一个明确定义的最优解。\n- **问题明确性**：该问题以数学精度指定，使用了明确的变量、系数和约束。它不含主观论断。\n\n该问题通过了所有验证标准。它是自洽的、一致的、科学合理的且适定的。\n\n步骤 3：结论与行动\n\n该问题被判定为**有效**。将提供一个解决方案。\n\n该问题需要对一个线性规划 (LP) 模型求解多个实例，每个实例由变量 $x_A$ 的不同成本系数 $c_A$ 定义。这是对目标函数系数的敏感性分析。\n\n该LP模型可以表示为矩阵形式。设决策变量向量为 $\\mathbf{x} = [x_{A}, x_{C}, x_{B}, x_{R}, x_{Br}]^T$。目标是最小化总成本 $z = \\mathbf{c}^T \\mathbf{x}$，其中成本向量为 $\\mathbf{c} = [c_{A}, 2.5, 1.2, 0.6, 0.8]^T$。\n\n约束条件的形式为 $\\mathbf{A}\\mathbf{x} \\ge \\mathbf{b}$，其中约束矩阵 $\\mathbf{A}$ 和需求向量 $\\mathbf{b}$ 由下式给出：\n$$\n\\mathbf{A} = \\begin{pmatrix}\n240 & 200 & 180 & 220 & 55 \\\\\n3 & 35 & 12 & 4 & 4 \\\\\n22 & 5 & 1 & 1 & 0 \\\\\n10 & 0 & 12 & 1 & 5\n\\end{pmatrix},\n\\quad\n\\mathbf{b} = \\begin{pmatrix}\n2000 \\\\\n50 \\\\\n44 \\\\\n30\n\\end{pmatrix}\n$$\n决策变量还必须满足非负约束 $\\mathbf{x} \\ge \\mathbf{0}$。\n\n为了通过计算解决此问题，我们使用 Python 中 `scipy.optimize` 库的 `linprog` 函数。该函数旨在解决以下形式的最小化问题：最小化 $\\mathbf{c}^T \\mathbf{x}$，约束条件为 $\\mathbf{A}_{ub} \\mathbf{x} \\le \\mathbf{b}_{ub}$ 和 $\\mathbf{A}_{eq} \\mathbf{x} = \\mathbf{b}_{eq}$，并对 $\\mathbf{x}$ 有界。\n\n我们的问题的约束是“大于等于”类型，即 $\\mathbf{A}\\mathbf{x} \\ge \\mathbf{b}$。必须将其转换为 `linprog` 函数所要求的“小于等于”形式。这可以通过将不等式两边乘以 $-1$ 来实现，从而反转不等号：\n$$\n\\mathbf{A}\\mathbf{x} \\ge \\mathbf{b} \\iff -\\mathbf{A}\\mathbf{x} \\le -\\mathbf{b}\n$$\n因此，我们将向求解器传递 $\\mathbf{A}_{ub} = -\\mathbf{A}$ 和 $\\mathbf{b}_{ub} = -\\mathbf{b}$。非负约束 $x_i \\ge 0$ 通过将每个变量的 `bounds` 设置为 $(0, \\infty)$ 来处理。\n\n求解算法如下：\n1. 将常数矩阵 $\\mathbf{A}$ 和 $\\mathbf{b}$ 定义为 NumPy 数组。\n2. 定义牛油果价格 $c_A$ 的测试值列表：$\\{1.00, 0.50, 10.00, 12.00, 25.00\\}$。\n3. 遍历测试集中的每个 $c_A$ 值。\n4. 在每次迭代中，构建相应的成本向量 $\\mathbf{c}$。\n5. 使用成本向量 $\\mathbf{c}$、转换后的约束矩阵 $-\\mathbf{A}$、转换后的需求向量 $-\\mathbf{b}$以及非负边界调用 `scipy.optimize.linprog`。`highs` 方法是求解器的一个现代、高效且稳健的选择。\n6. 从求解器返回的结果对象中，提取最优牛油果数量 $x_A^\\star$（即解向量 $\\mathbf{x}^\\star$ 的第一个元素）和最优最小成本 $z^\\star$。\n7. 存储数对 $[x_A^\\star, z^\\star]$。\n8. 处理完所有 $c_A$ 值后，将收集到的结果格式化为指定的单个字符串：一个数对列表，其中每个数值都四舍五入到小数点后 4 位。\n此过程系统地执行了所要求的敏感性分析，并生成了所需的输出。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves a cost-minimization diet problem for a range of avocado prices.\n\n    The problem is formulated as a Linear Program (LP) and solved using\n    scipy.optimize.linprog.\n    \"\"\"\n    \n    # Define the constant constraint matrix A and requirements vector b.\n    # The columns correspond to [avocado, chicken, beans, rice, broccoli].\n    # The rows correspond to [kilocalories, protein, fat, fiber].\n    A_mat = np.array([\n        [240.0, 200.0, 180.0, 220.0, 55.0],  # Kilocalories\n        [3.0,   35.0,  12.0,  4.0,   4.0],   # Protein (g)\n        [22.0,  5.0,   1.0,   1.0,   0.0],   # Fat (g)\n        [10.0,  0.0,   12.0,  1.0,   5.0]    # Fiber (g)\n    ])\n    \n    # Daily minimum requirements vector b.\n    b_vec = np.array([2000.0, 50.0, 44.0, 30.0])\n    \n    # Fixed costs for non-avocado foods (per serving).\n    # [chicken, beans, rice, broccoli]\n    c_others = [2.5, 1.2, 0.6, 0.8]\n    \n    # Test suite of avocado prices (c_A) to be analyzed.\n    test_cases = [1.00, 0.50, 10.00, 12.00, 25.00]\n    \n    results = []\n    \n    for c_A in test_cases:\n        # Construct the full cost vector c for the current c_A.\n        c_vec = np.array([c_A] + c_others)\n        \n        # The linprog function solves minimization problems with constraints of\n        # the form A_ub @ x <= b_ub. Our problem has A @ x >= b, which is\n        # equivalent to -A @ x <= -b.\n        # We also enforce non-negativity constraints via the bounds parameter.\n        res = linprog(c=c_vec, \n                      A_ub=-A_mat, \n                      b_ub=-b_vec, \n                      bounds=(0, None), \n                      method='highs')\n        \n        if res.success:\n            # The optimal quantity of avocado (x_A) is the first element of the solution vector.\n            x_A_star = res.x[0]\n            # The optimal cost (z*) is the function value at the optimum.\n            z_star = res.fun\n            results.append([x_A_star, z_star])\n        else:\n            # The problem statement guarantees a solution exists, so this path\n            # should ideally not be taken. We include it for robustness.\n            results.append([float('nan'), float('nan')])\n            \n    # Format the results into the required string format.\n    # e.g., [[x1, z1], [x2, z2], ...] with numbers rounded to 4 decimal places.\n    formatted_pairs = [f\"[{x:.4f},{z:.4f}]\" for x, z in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_pairs)}]\")\n\nsolve()\n```", "id": "2406884"}]}