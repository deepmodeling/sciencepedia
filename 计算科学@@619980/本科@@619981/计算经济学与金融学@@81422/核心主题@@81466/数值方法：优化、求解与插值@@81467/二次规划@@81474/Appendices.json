{"hands_on_practices": [{"introduction": "二次规划在资源分配问题中扮演着核心角色，尤其是在需要考虑边际效应递减和活动间相互作用的情况下。本练习将引导你解决一个实际的商业决策问题：一家公司如何在网络安全和新功能开发之间分配其 IT 预算，以实现效用最大化 [@problem_id:2424372]。通过这个练习，你将实践如何处理具有线性不等式约束的二次规划问题，并掌握当无约束最优解不可行时，在可行域边界上寻找最优解的关键技巧。", "problem": "一家科技公司将其年度信息技术预算分配给两项活动：网络安全和新功能开发。令 $x$ 表示分配给网络安全的预算（单位：百万美元），令 $y$ 表示分配给新功能开发的预算（单位：百万美元）。该公司从此分配中获得的净战略效用（以利润等价单位衡量）为\n$$\nU(x,y) \\;=\\; 12\\,x \\;-\\; 1.5\\,x^{2} \\;+\\; 10\\,y \\;-\\; y^{2} \\;+\\; 0.6\\,x\\,y.\n$$\n该分配受以下约束条件限制：\n$$\nx + y \\leq 10,\\quad x \\geq 2,\\quad y \\geq 0,\n$$\n其中，$10$ 是总预算（单位：百万美元），$x \\geq 2$ 反映了网络安全的监管最低要求，而 $y \\geq 0$ 反映了投资的非负性。\n\n确定在满足约束条件下，使 $U(x,y)$ 最大化的 $x$ 的值。答案以百万美元为单位表示，并四舍五入到四位有效数字。", "solution": "该问题是求解在满足一组线性不等式约束的条件下，使效用函数 $U(x,y)$ 最大化的 $x$ 和 $y$ 的值。这是一个约束优化问题，具体来说是一个二次规划问题。目标函数为\n$$\nU(x,y) = 12x - 1.5x^2 + 10y - y^2 + 0.6xy\n$$\n约束条件为：\n$$\nx + y \\leq 10 \\\\\nx \\geq 2 \\\\\ny \\geq 0\n$$\n\n首先，我们验证问题的结构。由线性不等式定义的可行域是一个闭合有界集（一个紧集）。具体来说，它是 $xy$ 平面上的一个三角形，顶点为 $(2,0)$, $(10,0)$ 和 $(2,8)$。作为一个多边形，该可行域是凸的。\n\n接下来，我们分析目标函数 $U(x,y)$。为了确定其凸性/凹性，我们计算其海森矩阵（Hessian matrix），即二阶偏导数矩阵。\n一阶偏导数为：\n$$\n\\frac{\\partial U}{\\partial x} = 12 - 3x + 0.6y\n$$\n$$\n\\frac{\\partial U}{\\partial y} = 10 - 2y + 0.6x\n$$\n二阶偏导数为：\n$$\n\\frac{\\partial^2 U}{\\partial x^2} = -3\n$$\n$$\n\\frac{\\partial^2 U}{\\partial y^2} = -2\n$$\n$$\n\\frac{\\partial^2 U}{\\partial x \\partial y} = \\frac{\\partial^2 U}{\\partial y \\partial x} = 0.6\n$$\n海森矩阵 $H$ 为：\n$$\nH = \\begin{pmatrix} -3 & 0.6 \\\\ 0.6 & -2 \\end{pmatrix}\n$$\n$H$ 的主子式为 $D_1 = -3$ 和 $D_2 = \\det(H) = (-3)(-2) - (0.6)(0.6) = 6 - 0.36 = 5.64$。\n因为 $D_1 < 0$ 且 $D_2 > 0$，所以海森矩阵是负定的。这意味着函数 $U(x,y)$ 是严格凹的。\n\n在一个紧凸集上最大化一个严格凹函数，可以保证存在唯一的全局最大值。该最大值可能出现在可行域的内部，也可能出现在其边界上。\n\n我们首先通过将 $U(x,y)$ 的梯度设为零来求解无约束最大值：\n$$\n12 - 3x + 0.6y = 0 \\implies 3x - 0.6y = 12\n$$\n$$\n10 - 2y + 0.6x = 0 \\implies -0.6x + 2y = 10\n$$\n解这个线性方程组。由第二个方程，$2y = 10 + 0.6x$，得到 $y = 5 + 0.3x$。代入第一个方程：\n$$\n3x - 0.6(5 + 0.3x) = 12\n$$\n$$\n3x - 3 - 0.18x = 12\n$$\n$$\n2.82x = 15 \\implies x = \\frac{15}{2.82} = \\frac{1500}{282} = \\frac{250}{47} \\approx 5.319\n$$\n那么，\n$$\ny = 5 + 0.3\\left(\\frac{250}{47}\\right) = 5 + \\frac{75}{47} = \\frac{235 + 75}{47} = \\frac{310}{47} \\approx 6.596\n$$\n无约束最大值点大约在 $(5.319, 6.596)$。我们检查该点是否满足约束条件：\n$x = 250/47 \\approx 5.319 \\geq 2$（满足）。\n$y = 310/47 \\approx 6.596 \\geq 0$（满足）。\n$x + y = \\frac{250}{47} + \\frac{310}{47} = \\frac{560}{47} \\approx 11.915$。这违反了约束条件 $x + y \\leq 10$。\n由于无约束最大值点在可行域之外，因此有约束最大值点必定位于可行域的边界上。边界由三条线段组成：\n1. $x + y = 10$，$x \\in [2, 10]$\n2. $x = 2$，$y \\in [0, 8]$\n3. $y = 0$，$x \\in [2, 10]$\n\n我们在每一条线段上分析函数 $U(x,y)$。\n\n情况1：边界 $x + y = 10$。\n我们将 $y = 10 - x$ 代入 $U(x,y)$。该线段上 $x$ 的定义域由 $x \\geq 2$ 和 $y = 10 - x \\geq 0 \\implies x \\leq 10$ 确定。所以，$x \\in [2,10]$。\n令 $f(x) = U(x, 10 - x)$：\n$$\nf(x) = 12x - 1.5x^2 + 10(10-x) - (10-x)^2 + 0.6x(10-x)\n$$\n$$\nf(x) = 12x - 1.5x^2 + 100 - 10x - (100 - 20x + x^2) + 6x - 0.6x^2\n$$\n$$\nf(x) = (12 - 10 + 20 + 6)x + (-1.5 - 1 - 0.6)x^2 + (100 - 100)\n$$\n$$\nf(x) = 28x - 3.1x^2\n$$\n这是一条凹抛物线。我们通过将其导数设为零来求其最大值：\n$$\nf'(x) = 28 - 6.2x = 0 \\implies x = \\frac{28}{6.2} = \\frac{280}{62} = \\frac{140}{31}\n$$\n$x = \\frac{140}{31} \\approx 4.5161$。该值在区间 $[2, 10]$ 内。因此，它是一个最大值的候选点。对应的 $y$ 值为 $y = 10 - \\frac{140}{31} = \\frac{310 - 140}{31} = \\frac{170}{31}$。\n在该点，效用为 $U\\left(\\frac{140}{31}, \\frac{170}{31}\\right) = f\\left(\\frac{140}{31}\\right) = 28\\left(\\frac{140}{31}\\right) - 3.1\\left(\\frac{140}{31}\\right)^2 = \\frac{3920}{31} - \\frac{31}{10}\\frac{19600}{961} = \\frac{3920}{31} - \\frac{1960}{31} = \\frac{1960}{31} \\approx 63.226$。\n\n情况2：边界 $x=2$。\n该线段上 $y$ 的定义域为 $y \\geq 0$ 且 $2+y \\leq 10 \\implies y \\leq 8$。所以，$y \\in [0,8]$。\n令 $g(y) = U(2,y)$：\n$$\ng(y) = 12(2) - 1.5(2^2) + 10y - y^2 + 0.6(2)y\n$$\n$$\ng(y) = 24 - 6 + 10y - y^2 + 1.2y = 18 + 11.2y - y^2\n$$\n为了求这条凹抛物线的最大值，我们将其导数设为零：\n$$\ng'(y) = 11.2 - 2y = 0 \\implies y = 5.6\n$$\n该值在区间 $[0, 8]$ 内。候选点为 $(2, 5.6)$。\n效用为 $U(2, 5.6) = 18 + 11.2(5.6) - (5.6)^2 = 18 + 62.72 - 31.36 = 49.36$。\n\n情况3：边界 $y=0$。\n该线段上 $x$ 的定义域为 $x \\geq 2$ 且 $x+0 \\leq 10 \\implies x \\leq 10$。所以，$x \\in [2,10]$。\n令 $h(x) = U(x,0)$：\n$$\nh(x) = 12x - 1.5x^2\n$$\n为了求这条凹抛物线的最大值，我们将其导数设为零：\n$$\nh'(x) = 12 - 3x = 0 \\implies x = 4\n$$\n该值在区间 $[2, 10]$ 内。候选点为 $(4, 0)$。\n效用为 $U(4, 0) = 12(4) - 1.5(4^2) = 48 - 1.5(16) = 48 - 24 = 24$。\n\n最后，我们比较在边界线段上找到的候选点的效用值。我们也隐式地检查了可行域的顶点，因为对线段的分析已经覆盖了它们。\n1. 在线段 $x+y=10$ 上：$U(\\frac{140}{31}, \\frac{170}{31}) = \\frac{1960}{31} \\approx 63.226$。\n2. 在线段 $x=2$ 上：$U(2, 5.6) = 49.36$。\n3. 在线段 $y=0$ 上：$U(4, 0) = 24$。\n\n最大效用值为 $\\frac{1960}{31}$，在点 $(x, y) = \\left(\\frac{140}{31}, \\frac{170}{31}\\right)$ 处取得。\n问题要求的是使 $U(x,y)$ 最大化的 $x$ 的值，并四舍五入到四位有效数字。\n$$\nx = \\frac{140}{31} \\approx 4.516129...\n$$\n四舍五入到四位有效数字，我们得到 $x = 4.516$。\n结果 $4.516$ 的单位是百万美元，符合题目要求。", "answer": "$$\n\\boxed{4.516}\n$$", "id": "2424372"}, {"introduction": "在现代金融领域，二次规划是构建最优投资组合的基石，尤其是在 Harry Markowitz 的均值-方差理论框架下。这个练习模拟了一位基金经理在多个风险资产之间进行财富分配的场景，目标是在满足一系列现实约束（如预算、非负性、个别资产上限等）的同时，优化风险调整后的收益 [@problem_id:2424376]。通过解决这个问题，你将深入理解如何将金融理论转化为数学模型，并应用 Karush-Kuhn-Tucker (KKT) 条件系统地找到最优投资权重。", "problem": "考虑一个二次规划（QP）中的均值-方差资产配置问题，这是计算经济学和金融学中的典型问题。一位基金经理将财富分配到 $3$ 种风险资产上，其投资组合权重为 $x = (x_{1}, x_{2}, x_{3})^{\\top}$。该经理求解以下严格凸的二次规划问题\n$$\n\\min_{x \\in \\mathbb{R}^{3}} \\;\\; \\frac{1}{2} x^{\\top} \\Sigma x - \\mu^{\\top} x\n$$\n满足以下 $10$ 个线性约束条件：\n- 预算约束：$x_{1} + x_{2} + x_{3} = 1$。\n- 非负约束：$x_{1} \\geq 0$，$x_{2} \\geq 0$，$x_{3} \\geq 0$。\n- 上限约束：$x_{1} \\leq 0.4$，$x_{2} \\leq 0.3$，$x_{3} \\leq 0.8$。\n- 行业风险暴露上限：$x_{1} + x_{3} \\leq 0.75$。\n- 离散度限制：$x_{1} - x_{2} \\leq 0.15$。\n- 资产 $3$ 的最小配置：$x_{3} \\geq 0.02$。\n\n假设方差-协方差矩阵为单位矩阵 $\\Sigma = I_{3}$，预期收益向量为 $\\mu = (1.2, 1.1, 0.9)^{\\top}$。目标函数和约束条件均以精确算术形式给出。\n\n计算该二次规划问题的最优目标值。请提供一个实数作为最终答案，无需四舍五入。", "solution": "所呈现的问题是一个标准的二次规划（QP）问题，具体来说是一个均值-方差资产配置模型。首先，需要对问题陈述进行验证。\n\n已知条件如下：\n- 需要最小化的目标函数为 $f(x) = \\frac{1}{2} x^{\\top} \\Sigma x - \\mu^{\\top} x$，其中 $x = (x_{1}, x_{2}, x_{3})^{\\top} \\in \\mathbb{R}^{3}$。\n- 方差-协方差矩阵为单位矩阵 $\\Sigma = I_{3}$。\n- 预期收益向量为 $\\mu = (1.2, 1.1, 0.9)^{\\top}$。\n- 约束条件为：\n    1. 预算约束：$x_{1} + x_{2} + x_{3} = 1$。\n    2. 非负约束：$x_{1} \\geq 0$, $x_{2} \\geq 0$, $x_{3} \\geq 0$。\n    3. 上限约束：$x_{1} \\leq 0.4$, $x_{2} \\leq 0.3$, $x_{3} \\leq 0.8$。\n    4. 行业风险暴露上限：$x_{1} + x_{3} \\leq 0.75$。\n    5. 离散度限制：$x_{1} - x_{2} \\leq 0.15$。\n    6. 最小配置：$x_{3} \\geq 0.02$。\n\n该问题是有效的。这是一个在计算金融学领域中具有科学依据、良定且客观的问题。目标函数是严格凸的，因为其Hessian矩阵 $\\Sigma=I_3$ 是正定的。由一组线性等式和不等式约束定义的可行域是一个凸多胞体。可行点的存在，例如 $x = (0.4, 0.3, 0.3)^{\\top}$，证实了可行集非空。因此，存在唯一的全局最小值。该解可以通过应用Karush-Kuhn-Tucker（KKT）条件找到。\n\n目标函数为：\n$$ f(x_1, x_2, x_3) = \\frac{1}{2}(x_1^2 + x_2^2 + x_3^2) - 1.2 x_1 - 1.1 x_2 - 0.9 x_3 $$\n该问题使用拉格朗日乘子法求解。构建拉格朗日函数 $L(x, \\lambda, \\nu)$。约束条件可以写为 $g_i(x) \\leq 0$ 和 $h_j(x)=0$。\n等式约束：$h_1(x) = x_1 + x_2 + x_3 - 1 = 0$，乘子为 $\\lambda$。\n不等式约束，乘子为 $\\nu_i \\geq 0$：\n1. $g_1(x) = -x_1 \\leq 0$ ($\\nu_1$)\n2. $g_2(x) = -x_2 \\leq 0$ ($\\nu_2$)\n3. $g_3(x) = -x_3 \\leq 0$ ($\\nu_3$)\n4. $g_4(x) = x_1 - 0.4 \\leq 0$ ($\\nu_4$)\n5. $g_5(x) = x_2 - 0.3 \\leq 0$ ($\\nu_5$)\n6. $g_6(x) = x_3 - 0.8 \\leq 0$ ($\\nu_6$)\n7. $g_7(x) = x_1 + x_3 - 0.75 \\leq 0$ ($\\nu_7$)\n8. $g_8(x) = x_1 - x_2 - 0.15 \\leq 0$ ($\\nu_8$)\n9. $g_9(x) = 0.02 - x_3 \\leq 0$ ($\\nu_9$)\n\n平稳性条件 $\\nabla_x L = 0$ 为：\n$$ \\frac{\\partial L}{\\partial x_1}: x_1 - 1.2 + \\lambda - \\nu_1 + \\nu_4 + \\nu_7 + \\nu_8 = 0 $$\n$$ \\frac{\\partial L}{\\partial x_2}: x_2 - 1.1 + \\lambda - \\nu_2 + \\nu_5 - \\nu_8 = 0 $$\n$$ \\frac{\\partial L}{\\partial x_3}: x_3 - 0.9 + \\lambda - \\nu_3 + \\nu_6 + \\nu_7 - \\nu_9 = 0 $$\n求解这样的系统需要确定在最优点处的有效约束集。首先分析只强制执行预算约束的无约束问题。令所有 $\\nu_i = 0$。\n平稳性条件简化为：\n$x_1 = 1.2 - \\lambda$\n$x_2 = 1.1 - \\lambda$\n$x_3 = 0.9 - \\lambda$\n代入预算约束 $x_1 + x_2 + x_3 = 1$：\n$$ (1.2 - \\lambda) + (1.1 - \\lambda) + (0.9 - \\lambda) = 1 \\implies 3.2 - 3\\lambda = 1 \\implies 3\\lambda = 2.2 \\implies \\lambda = \\frac{2.2}{3} = \\frac{11}{15} $$\n无约束情况下的权重为：\n$x_1 = 1.2 - \\frac{11}{15} = \\frac{18}{15} - \\frac{11}{15} = \\frac{7}{15} \\approx 0.4667$\n$x_2 = 1.1 - \\frac{11}{15} = \\frac{16.5}{15} - \\frac{11}{15} = \\frac{5.5}{15} = \\frac{11}{30} \\approx 0.3667$\n$x_3 = 0.9 - \\frac{11}{15} = \\frac{13.5}{15} - \\frac{11}{15} = \\frac{2.5}{15} = \\frac{5}{30} = \\frac{1}{6} \\approx 0.1667$\n\n此解违反了约束条件 $x_1 \\leq 0.4$ 和 $x_2 \\leq 0.3$。这表明这两个约束在最优点处是有效的。我们来检验这个假设。\n假设约束 $x_1 \\leq 0.4$ 和 $x_2 \\leq 0.3$ 是有效的，即 $x_1 = 0.4$ 且 $x_2 = 0.3$。\n根据预算约束，$x_3 = 1 - x_1 - x_2 = 1 - 0.4 - 0.3 = 0.3$。\n最优解的候选点为 $x^* = (0.4, 0.3, 0.3)^\\top$。\n\n我们必须检查该点是否可行。\n- 预算约束：$0.4 + 0.3 + 0.3 = 1$。（满足）\n- 非负约束：所有分量均为正。（满足）\n- 上限约束：$x_1 = 0.4 \\leq 0.4$, $x_2 = 0.3 \\leq 0.3$, $x_3 = 0.3 \\leq 0.8$。（满足，前两个为有效约束）\n- 行业风险暴露上限：$x_1 + x_3 = 0.4 + 0.3 = 0.7 \\leq 0.75$。（满足）\n- 离散度限制：$x_1 - x_2 = 0.4 - 0.3 = 0.1 \\leq 0.15$。（满足）\n- 最小配置：$x_3 = 0.3 \\geq 0.02$。（满足）\n点 $x^*$ 是原始可行的。\n\n现在，我们通过计算拉格朗日乘子来检查对偶可行性。我们假设只有对应于有效约束的 $\\nu_4$ 和 $\\nu_5$ 非零。根据互补松弛性，所有其他的 $\\nu_i$ 均为零。\n平稳性条件变为：\n$$ x_1: 0.4 - 1.2 + \\lambda + \\nu_4 = 0 \\implies \\lambda + \\nu_4 = 0.8 $$\n$$ x_2: 0.3 - 1.1 + \\lambda + \\nu_5 = 0 \\implies \\lambda + \\nu_5 = 0.8 $$\n$$ x_3: 0.3 - 0.9 + \\lambda = 0 \\implies \\lambda = 0.6 $$\n将 $\\lambda = 0.6$ 代入前两个方程：\n$$ 0.6 + \\nu_4 = 0.8 \\implies \\nu_4 = 0.2 $$\n$$ 0.6 + \\nu_5 = 0.8 \\implies \\nu_5 = 0.2 $$\n有效约束的所有乘子 $\\nu_4$ 和 $\\nu_5$ 均为正。所有其他乘子 $\\nu_i$ 均为零。因此，对偶可行性条件（$\\nu_i \\geq 0$）得到满足。所有KKT条件均已满足。由于问题是严格凸的，$x^* = (0.4, 0.3, 0.3)^\\top$ 是唯一的全局最优解。\n\n最后一步是计算在 $x^*$ 处的最优目标值：\n$$ f(x^*) = \\frac{1}{2} ((0.4)^2 + (0.3)^2 + (0.3)^2) - (1.2(0.4) + 1.1(0.3) + 0.9(0.3)) $$\n$$ f(x^*) = \\frac{1}{2} (0.16 + 0.09 + 0.09) - (0.48 + 0.33 + 0.27) $$\n$$ f(x^*) = \\frac{1}{2} (0.34) - (1.08) $$\n$$ f(x^*) = 0.17 - 1.08 = -0.91 $$\n最优目标值为 $-0.91$。", "answer": "$$\\boxed{-0.91}$$", "id": "2424376"}, {"introduction": "除了解决特定的优化问题，二次规划理论还为开发通用算法提供了强大的基础。本练习要求你解决一个在机器学习和金融中都至重要的问题：将一个任意向量投影到概率单纯形上 [@problem_id:2424310]。这个问题等价于在“只做多”且总权重为 $1$ 的投资组合约束下，寻找与目标向量最接近的投资组合。这个练习不仅是一个计算挑战，更重要的是，它将引导你从 KKT 条件出发，推导并实现一个比通用二次规划求解器更高效的专门算法。", "problem": "考虑在计算经济学和金融学中构建只做多投资组合权重时出现的以下凸二次规划问题。给定一个向量 $y \\in \\mathbb{R}^n$，通过求解以下问题，找到 $y$ 在概率单纯形上的投影 $x^\\star \\in \\mathbb{R}^n$：\n$$\n\\min_{x \\in \\mathbb{R}^n} \\ \\|x - y\\|_2^2 \\quad \\text{subject to} \\quad \\sum_{i=1}^n x_i = 1,\\ \\ x_i \\ge 0 \\ \\text{for all } i.\n$$\n对于下方的每个测试用例，计算上述问题的唯一最优点 $x^\\star$。将 $x^\\star$ 的每个分量四舍五入到 $6$ 位小数。不涉及物理单位。您的程序不得读取任何输入，并且必须严格使用以下测试套件。\n\n测试套件（每个 $y$ 以其分量的有序元组形式列出）：\n- 用例 $1$：$y = (0.2, 0.6, 0.7)$。\n- 用例 $2$：$y = (0.1, 0.2, 0.7)$。\n- 用例 $3$：$y = (-0.5, 0.3, 1.2)$。\n- 用例 $4$：$y = (-1.0, -2.0, -3.0)$。\n- 用例 $5$：$y = (0.5, 0.5, 0.5)$。\n- 用例 $6$：$y = (0.1, 0.2, -0.3)$。\n- 用例 $7$：$y = (10.0, -10.0, 0.0)$。\n- 用例 $8$：$y = (-2.0)$。\n- 用例 $9$：$y = (0.9, 0.1, 0.1, -0.2, 0.0, 0.1)$。\n\n您的程序应生成单行输出，其中包含所有结果，形式为一个逗号分隔的列表，并用方括号括起来。每个结果本身是对应测试用例的 $x^\\star$ 的四舍五入分量列表。例如，要求的格式为：\n$$\n[\\![x^\\star_{1,1},\\ldots,x^\\star_{1,n_1}],[x^\\star_{2,1},\\ldots,x^\\star_{2,n_2}],\\ldots,[x^\\star_{9,1},\\ldots,x^\\star_{9,n_9}]\\,],\n$$\n输出行中任何地方都不能有空格。最终输出类型是一个浮点数列表的列表，表示为单行文本。", "solution": "该问题旨在寻找一个向量 $y \\in \\mathbb{R}^n$ 在标准单纯形（或称概率单纯形）$\\Delta^n = \\{x \\in \\mathbb{R}^n \\mid \\sum_{i=1}^n x_i = 1, x_i \\ge 0\\}$ 上的欧几里得投影。这是一个凸二次规划问题，因为目标函数 $f(x) = \\|x - y\\|_2^2$ 是严格凸的，且可行域 $\\Delta^n$ 是一个非空、闭合且有界的凸集。因此，保证存在唯一的解 $x^\\star$。\n\n该问题可以表述为：\n$$\n\\begin{aligned}\n\\text{minimize} \\quad & \\frac{1}{2}\\sum_{i=1}^n (x_i - y_i)^2 \\\\\n\\text{subject to} \\quad & \\sum_{i=1}^n x_i - 1 = 0 \\\\\n& -x_i \\le 0, \\quad \\text{for } i=1, \\dots, n\n\\end{aligned}\n$$\n引入因子 $1/2$ 是为了方便，它不会改变最小值的位置。我们可以使用 Karush-Kuhn-Tucker (KKT) 条件来解决这个问题。该问题的拉格朗日函数是：\n$$\nL(x, \\lambda, \\mu) = \\frac{1}{2} \\sum_{i=1}^n (x_i - y_i)^2 - \\lambda \\left(\\sum_{i=1}^n x_i - 1\\right) - \\sum_{i=1}^n \\mu_i x_i\n$$\n这里，$\\lambda$ 是等式约束的拉格朗日乘子，$\\mu_i \\ge 0$ 是非负性约束的乘子。\n\n最优解 $(x^\\star, \\lambda^\\star, \\mu^\\star)$ 的 KKT 条件如下：\n1.  **平稳性 (Stationarity)**：拉格朗日函数对 $x$ 的梯度必须为零。对于每个分量 $x_i$：\n    $$\n    \\frac{\\partial L}{\\partial x_i} = (x_i^\\star - y_i) - \\lambda^\\star - \\mu_i^\\star = 0 \\implies x_i^\\star = y_i + \\lambda^\\star + \\mu_i^\\star\n    $$\n2.  **原始可行性 (Primal Feasibility)**：解 $x^\\star$ 必须位于可行集中。\n    $$\n    \\sum_{i=1}^n x_i^\\star = 1 \\quad \\text{and} \\quad x_i^\\star \\ge 0 \\quad \\text{for all } i\n    $$\n3.  **对偶可行性 (Dual Feasibility)**：不等式约束的乘子必须为非负。\n    $$\n    \\mu_i^\\star \\ge 0 \\quad \\text{for all } i\n    $$\n4.  **互补松弛性 (Complementary Slackness)**：每个不等式乘子与其对应约束的乘积必须为零。\n    $$\n    \\mu_i^\\star x_i^\\star = 0 \\quad \\text{for all } i\n    $$\n\n根据互补松弛性条件，如果 $x_i^\\star > 0$，则 $\\mu_i^\\star$ 必须为 $0$。在这种情况下，平稳性条件简化为 $x_i^\\star - y_i - \\lambda^\\star = 0$，得到 $x_i^\\star = y_i + \\lambda^\\star$。\n如果 $x_i^\\star = 0$，则 $\\mu_i^\\star \\ge 0$。平稳性条件给出 $-y_i - \\lambda^\\star - \\mu_i^\\star = 0$，或 $\\mu_i^\\star = -y_i - \\lambda^\\star$。对偶可行性 $\\mu_i^\\star \\ge 0$ 意味着 $-y_i - \\lambda^\\star \\ge 0$，或 $y_i + \\lambda^\\star \\le 0$。\n\n让我们定义一个阈值 $\\theta = -\\lambda^\\star$。关于 $x_i^\\star$ 的条件可以统一为：\n$$\nx_i^\\star = \\max(0, y_i - \\theta)\n$$\n这个单一表达式巧妙地结合了互补松弛性分析中的两种情况。如果 $y_i - \\theta > 0$，则 $x_i^\\star = y_i - \\theta > 0$，且对应的 $\\mu_i^\\star = 0$。如果 $y_i - \\theta \\le 0$，则 $x_i^\\star = 0$，这要求 $\\mu_i^\\star \\ge 0$。\n\n$\\theta$ 的值由原始可行性约束 $\\sum_{i=1}^n x_i^\\star = 1$ 确定：\n$$\n\\sum_{i=1}^n \\max(0, y_i - \\theta) = 1\n$$\n设函数 $F(\\theta) = \\sum_{i=1}^n \\max(0, y_i - \\theta)$。我们需要找到 $F(\\theta) - 1 = 0$ 的根。$F(\\theta)$ 是一个关于 $\\theta$ 的连续、分段线性且单调非增的函数。此性质使得我们可以通过一个高效的算法找到唯一的 $\\theta$。\n\n算法如下：\n1.  将输入向量 $y$ 的分量按降序排序，得到一个新向量 $u$，其中 $u_1 \\ge u_2 \\ge \\dots \\ge u_n$。\n2.  找到满足不等式 $u_j > \\frac{1}{j}\\left(\\sum_{k=1}^j u_k - 1\\right)$ 的最大索引 $j \\in \\{1, \\dots, n\\}$。我们将这个最大索引记为 $\\rho$。\n3.  利用这个 $\\rho$ 值，所需的阈值 $\\theta$ 由以下公式给出：\n    $$\n    \\theta = \\frac{1}{\\rho}\\left(\\sum_{k=1}^\\rho u_k - 1\\right)\n    $$\n4.  一旦找到 $\\theta$，就可以使用原始向量 $y$ 逐分量地计算最优解 $x^\\star$：\n    $$\n    x_i^\\star = \\max(0, y_i - \\theta) \\quad \\text{for } i=1, \\dots, n\n    $$\n\n对于任何给定的 $y \\in \\mathbb{R}^n$，该算法保证能找到唯一的解。最后一步是按要求将计算出的 $x^\\star$ 的每个分量四舍五入到 $6$ 位小数。", "answer": "```python\nimport numpy as np\n\ndef project_on_simplex(y):\n    \"\"\"\n    Project a vector y onto the probability simplex.\n\n    This function solves the convex quadratic program:\n    min ||x - y||_2^2\n    s.t. sum(x) = 1, x_i >= 0 for all i.\n\n    The algorithm is based on the efficient method described in papers\n    such as \"Efficient Projections onto the L1-Ball for Learning in\n    High Dimensions\" by Duchi et al. (2008) and related works.\n\n    Args:\n        y (np.ndarray): The input vector to project.\n\n    Returns:\n        np.ndarray: The projected vector x_star.\n    \"\"\"\n    y_arr = np.asarray(y)\n    n = len(y_arr)\n\n    # Sort the input vector in descending order.\n    u = np.sort(y_arr)[::-1]\n\n    # Compute the cumulative sum of the sorted vector.\n    s = np.cumsum(u)\n\n    # Find the value rho, which is the number of positive elements in the solution.\n    # This is done by finding the largest j for which u_j - (1/j)(s_j - 1) > 0.\n    j_indices = np.arange(1, n + 1)\n    \n    # The condition will always be met for at least j=1 (1 > 0 unless n=0),\n    # so np.where will not be empty.\n    conditions = u - (s - 1) / j_indices > 0\n    \n    # Get the index of the last element that satisfies the condition.\n    # This corresponds to rho. Since indices are 0-based, rho = index + 1.\n    rho_idx = np.where(conditions)[0][-1]\n    rho = rho_idx + 1\n\n    # Compute the threshold theta.\n    theta = (s[rho_idx] - 1) / rho\n\n    # Compute the projection x_star by applying the threshold.\n    x_star = np.maximum(0, y_arr - theta)\n    \n    return x_star\n\ndef solve():\n    \"\"\"\n    Solves the projection on simplex problem for a suite of test cases\n    and prints the results in the specified format.\n    \"\"\"\n    test_cases = [\n        (0.2, 0.6, 0.7),\n        (0.1, 0.2, 0.7),\n        (-0.5, 0.3, 1.2),\n        (-1.0, -2.0, -3.0),\n        (0.5, 0.5, 0.5),\n        (0.1, 0.2, -0.3),\n        (10.0, -10.0, 0.0),\n        (-2.0,),\n        (0.9, 0.1, 0.1, -0.2, 0.0, 0.1),\n    ]\n\n    results_as_strings = []\n    for case in test_cases:\n        # Calculate the projection\n        x_star = project_on_simplex(case)\n        \n        # Round each component to 6 decimal places\n        rounded_x = [round(val, 6) for val in x_star]\n        \n        # Format the list of numbers into the required string format '[n1,n2,...]'\n        list_str = f\"[{','.join(map(str, rounded_x))}]\"\n        results_as_strings.append(list_str)\n\n    # Join all results into a single string '[[...],[...]]'\n    final_output = f\"[{','.join(results_as_strings)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2424310"}]}