{"hands_on_practices": [{"introduction": "标准的线性模型是一个很好的起点，但现实世界的生产常常伴随着各种约束。本练习引入了最低生产配额的限制，这导致供给曲线出现不连续性。解决这个问题，需要我们超越简单的代数求解，运用基于逻辑的分类讨论方法，这是为真实市场建模时一项至关重要的技能。[@problem_id:2429894]", "problem": "考虑一个单一商品的竞争市场，其特征是向下倾斜的线性反需求曲线和向上倾斜的线性反供给曲线，其中唯一的供给方是一家不能在低于最低运营产能的情况下运行的工厂。令 $Q$ 表示数量，$P$ 表示价格。\n\n需求由反需求函数 $P_{D}(Q) = \\alpha - \\beta Q$ 给出，其中 $Q \\ge 0$，$\\alpha > 0$ 且 $\\beta > 0$。窒息价格为 $P_{choke} = \\alpha$，此时需求量为 $0$。\n\n供给的特征是存在最低运营产能约束：如果工厂运营，其产量必须至少为 $Q_{min}$ 单位。运营时，反供给函数为 $P_{S}(Q) = \\gamma + \\delta Q$，其中 $Q \\ge Q_{min}$，$\\gamma \\ge 0$ 且 $\\delta > 0$。如果工厂不运营，市场供给为 $Q_{S} = 0$。\n\n一个市场均衡点 $(Q^{*}, P^{*})$ 满足市场出清和可行性条件：(i) 要么工厂运营，且 $Q^{*} \\ge Q_{min}$，同时 $P^{*} = P_{D}(Q^{*}) = P_{S}(Q^{*})$ 且 $P^{*} \\ge 0$；(ii) 要么工厂不运营，$Q^{*} = 0$，此时价格必须在需求为零的情况下使市场出清，在这种情况下，选择能够出清市场的最小非负价格，即 $P^{*} = P_{choke} = \\alpha$。\n\n你的任务是编写一个程序，对下面给出的每组参数 $(\\alpha, \\beta, \\gamma, \\delta, Q_{min})$，根据上述定义计算均衡点对 $(Q^{*}, P^{*})$。报告的每个 $Q^{*}$ 和 $P^{*}$ 值需四舍五入到六位小数。\n\n测试用例 (每个元组为 $(\\alpha, \\beta, \\gamma, \\delta, Q_{min})$):\n\n- Case A: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (100, 1, 10, 1, 20)$.\n- Case B: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (100, 1, 10, 1, 60)$.\n- Case C: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (90, 1.5, 30, 0.5, 20)$.\n- Case D (boundary): $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (110, 2, 10, 2, 25)$.\n- Case E (standard with $Q_{min} = 0$): $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (80, 2, 20, 4, 0)$.\n- Case F (no positive-quantity intersection): $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (5, 2, 10, 3, 1)$.\n\n最终输出格式：\n你的程序应生成单行输出，其中包含一个由方括号括起来的、以逗号分隔的点对列表，顺序与上述案例相同。每个点对的形式为 $[Q^{*},P^{*}]$，且两个条目都四舍五入到六位小数。例如，一个使用占位符数字的有效输出看起来像这样：$[[x_{1},y_{1}],[x_{2},y_{2}],\\dots,[x_{6},y_{6}]]$。", "solution": "首先将对所提供的问题进行严格验证。\n\n### 步骤1：提取已知信息\n问题提供了以下数据和定义：\n- **反需求函数**：$P_{D}(Q) = \\alpha - \\beta Q$，其中 $Q \\ge 0$，参数 $\\alpha > 0$，$\\beta > 0$。\n- **反供给函数**：$P_{S}(Q) = \\gamma + \\delta Q$，其中 $Q \\ge Q_{min}$，参数 $\\gamma \\ge 0$，$\\delta > 0$。\n- **最低运营产能**：$Q_{min}$。如果工厂不运营，供给为 $Q_{S} = 0$。\n- **均衡定义**：一个市场均衡点 $(Q^{*}, P^{*})$ 是一个满足以下两个条件之一的点对：\n    1.  工厂运营：$Q^{*} \\ge Q_{min}$，$P^{*} = P_{D}(Q^{*}) = P_{S}(Q^{*})$，且 $P^{*} \\ge 0$。\n    2.  工厂不运营：$Q^{*} = 0$，其市场出清价格为 $P^{*} = P_{choke} = \\alpha$。\n- **测试用例**：\n    - Case A: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (100, 1, 10, 1, 20)$\n    - Case B: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (100, 1, 10, 1, 60)$\n    - Case C: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (90, 1.5, 30, 0.5, 20)$\n    - Case D: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (110, 2, 10, 2, 25)$\n    - Case E: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (80, 2, 20, 4, 0)$\n    - Case F: $(\\alpha, \\beta, \\gamma, \\delta, Q_{min}) = (5, 2, 10, 3, 1)$\n\n### 步骤2：使用提取的已知信息进行验证\n根据既定标准对问题进行验证。\n\n- **科学性**：该问题描述了一个带有线性函数和最低产量约束的简单供需模型。这些是微观经济学中的标准基本概念。该问题具有科学合理性。\n- **定义明确（良态性）**：问题以数学精度进行了规定。函数、参数和均衡条件都得到了明确无误的定义。参数约束 ($\\alpha > 0, \\beta > 0, \\delta > 0, \\gamma \\ge 0$) 确保了向下倾斜的需求和向上倾斜的供给符合经济学意义。均衡的两部分定义涵盖了所有可能性，并为每种情况提供了唯一的结果。该问题是定义明确的。\n- **客观性**：问题陈述纯粹是定量的和定义性的，不包含主观语言或基于观点的断言。它是客观的。\n\n该问题没有表现出科学性不健全、不完整或模棱两可等缺陷。它是在计算经济学特定领域内一个可形式化的问题。\n\n### 步骤3：结论与行动\n问题是 **有效的**。将制定解决方案。\n\n### 解决方案的构建\n市场均衡点 $(Q^*, P^*)$ 的确定需要基于所提供的定义进行系统性评估。存在两种可能的均衡类型：一种是正产量均衡，另一种是零产量均衡（停产）。\n\n首先，我们确定一个潜在的正产量均衡。根据定义，如果存在一个数量 $Q_e$ 使得市场出清，即 $P_D(Q_e) = P_S(Q_e)$，则该均衡存在。这是无约束均衡点。我们求解这个数量，并将其表示为 $Q_e$：\n$$\n\\alpha - \\beta Q_e = \\gamma + \\delta Q_e\n$$\n$$\n\\alpha - \\gamma = (\\beta + \\delta) Q_e\n$$\n$$\nQ_e = \\frac{\\alpha - \\gamma}{\\beta + \\delta}\n$$\n由于 $\\beta > 0$ 且 $\\delta > 0$，分母 $(\\beta + \\delta)$ 恒为正。相应的均衡价格 $P_e$ 可以通过将 $Q_e$ 代入需求或供给函数求得：\n$$\nP_e = P_D(Q_e) = \\alpha - \\beta \\left( \\frac{\\alpha - \\gamma}{\\beta + \\delta} \\right) = \\frac{\\alpha(\\beta + \\delta) - \\beta(\\alpha - \\gamma)}{\\beta + \\delta} = \\frac{\\alpha\\delta + \\beta\\gamma}{\\beta + \\delta}\n$$\n在约束条件 $\\alpha > 0, \\beta > 0, \\delta > 0, \\gamma \\ge 0$ 下，价格 $P_e$ 总是非负的。\n\n问题指出，对于正产量均衡，必须满足 $Q^* \\ge Q_{min}$。这种均衡的唯一候选点是 $(Q_e, P_e)$，因为只有在该点才满足条件 $P_D(Q^*) = P_S(Q^*)$。因此，核心的逻辑测试是，在给定最低产能约束 $Q_{min}$ 的情况下，这个无约束均衡点 $(Q_e, P_e)$ 是否可行。\n\n这引出了一个简单的二分逻辑：\n\n**情况1：无约束均衡是可行的。**\n该条件成立当且仅当 $Q_e \\ge Q_{min}$。\n如果这为真，工厂能够并且将会以市场出清数量 $Q_e$进行生产。运营均衡的所有条件都已满足：$Q_e \\ge Q_{min}$，$P_D(Q_e) = P_S(Q_e)$ 且 $P_e \\ge 0$。因此，市场均衡点为 $(Q^*, P^*) = (Q_e, P_e)$。\n\n**情况2：无约束均衡是不可行的。**\n该条件成立当且仅当 $Q_e < Q_{min}$。这涵盖了两种情景：\n  a) 曲线相交于一个过小的正数量上（$0 \\le Q_e < Q_{min}$）。\n  b) 曲线不在非负数量上相交（$\\alpha \\le \\gamma$，导致 $Q_e \\le 0$）。\n\n在任一情景下，唯一满足 $P_D(Q) = P_S(Q)$ 的点都出现在小于 $Q_{min}$ 的数量上。对于任何数量 $Q \\ge Q_{min}$，都有 $Q > Q_e$。由于函数 $P_D(Q) - P_S(Q) = (\\alpha - \\gamma) - (\\beta + \\delta)Q$ 是关于 $Q$ 严格递减的，因此对于任何 $Q > Q_e$，我们有 $P_D(Q) < P_S(Q)$。这意味着，在任何等于或高于最低产能的生产水平上，消费者愿意支付的价格都低于供给方要求的价格。因此，在任何可行水平上的生产都是无利可图的。工厂将不会运营。\n\n在这种情况下，市场默认为问题陈述中定义的停产均衡：市场供给为零，均衡点为 $(Q^*, P^*) = (0, \\alpha)$。\n\n**算法总结：**\n1. 给定参数 $(\\alpha, \\beta, \\gamma, \\delta, Q_{min})$，计算无约束均衡数量 $Q_e = \\frac{\\alpha - \\gamma}{\\beta + \\delta}$。\n2. 如果 $Q_e \\ge Q_{min}$，则均衡点为 $Q^* = Q_e$ 且 $P^* = \\alpha - \\beta Q_e$。\n3. 如果 $Q_e < Q_{min}$，则均衡点为 $Q^* = 0$ 且 $P^* = \\alpha$。\n\n将实施此程序来求解给定的测试用例。所有结果将按要求四舍五入到六位小数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the market equilibrium for a set of supply and demand parameters\n    with a minimum production capacity constraint.\n    \"\"\"\n    # Define the test cases from the problem statement as tuples of\n    # (alpha, beta, gamma, delta, Q_min).\n    test_cases = [\n        (100.0, 1.0, 10.0, 1.0, 20.0),   # Case A\n        (100.0, 1.0, 10.0, 1.0, 60.0),   # Case B\n        (90.0, 1.5, 30.0, 0.5, 20.0),   # Case C\n        (110.0, 2.0, 10.0, 2.0, 25.0),   # Case D (boundary)\n        (80.0, 2.0, 20.0, 4.0, 0.0),    # Case E (standard with Q_min=0)\n        (5.0, 2.0, 10.0, 3.0, 1.0),    # Case F (no positive-quantity intersection)\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        alpha, beta, gamma, delta, q_min = case\n\n        # The denominator (beta + delta) is always positive given the problem constraints\n        # (beta > 0, delta > 0).\n        denominator = beta + delta\n\n        # Calculate the unconstrained equilibrium quantity, Q_e, where the\n        # supply and demand curves intersect.\n        # Q_e = (alpha - gamma) / (beta + delta)\n        q_e = (alpha - gamma) / denominator\n\n        q_star, p_star = 0.0, 0.0\n\n        # The core logic is to check if the unconstrained equilibrium is feasible.\n        # An operating equilibrium is only possible at the intersection point (Q_e, P_e).\n        # If Q_e is less than the minimum required production Q_min, then no\n        # production is profitable, and the market shuts down.\n        if q_e >= q_min:\n            # Case 1: The unconstrained equilibrium is feasible.\n            # The market operates at this point.\n            q_star = q_e\n            # Calculate the price P* using the inverse demand function.\n            p_star = alpha - beta * q_star\n        else:\n            # Case 2: The unconstrained equilibrium is not feasible (Q_e < Q_min).\n            # For any Q >= Q_min, P_D(Q) < P_S(Q), so production is not viable.\n            # The market shuts down as per the problem definition.\n            q_star = 0.0\n            p_star = alpha\n        \n        # Format the result for the current case as a string \"[Q*,P*]\" with\n        # values rounded to six decimal places.\n        results.append(f\"[{q_star:.6f},{p_star:.6f}]\")\n\n    # Final print statement must produce a single line with the specified format:\n    # [[Q1,P1],[Q2,P2],...,[QN,PN]]\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2429894"}, {"introduction": "尽管线性模型是有效的近似，但许多经济关系本质上是非线性的。本练习将探讨一个供给和需求曲线均为指数函数的市场，在这种情况下，市场均衡不存在简单的封闭解。你将学习如何通过构建问题并运用牛顿法等数值求根算法，来求解均衡价格和数量。[@problem_id:2414687]", "problem": "考虑一个单一商品的竞争性市场，其中存在单位补贴以及非线性的供给和需求。设消费者支付的价格为 $p_c \\ge 0$，单位补贴为 $s \\ge 0$，生产者收到的价格为 $p_p = p_c + s$。需求函数由 $Q_d(p_c) = A \\exp(-B p_c)$ 给出，其参数为 $A > 0$ 和 $B > 0$。供给函数由 $Q_s(p_p) = K \\left(\\exp(H p_p) - 1\\right)$ 给出，其参数为 $K > 0$ 和 $H > 0$。均衡是一个点对 $(p_c^*, q^*)$，满足 $Q_d(p_c^*) = q^* = Q_s(p_c^* + s)$ 且 $p_c^* \\ge 0$。\n\n您的任务是为下面列出的每一组参数计算 $(p_c^*, q^*)$。对于每种情况，请报告消费者价格 $p_c^*$ 和均衡数量 $q^*$，结果为四舍五入到六 ($6$) 位小数的实数。\n\n测试用例 (每个元组为 $(A, B, K, H, s)$):\n- 情况 $1$：$(A, B, K, H, s) = (100, 0.4, 4, 0.25, 2)$。\n- 情况 $2$：$(A, B, K, H, s) = (100, 0.4, 4, 0.25, 0)$。\n- 情况 $3$：$(A, B, K, H, s) = (120, 0.35, 6, 0.3, 3.5)$。\n- 情况 $4$：$(A, B, K, H, s) = (80, 0.6, 3, 0.5, 1)$。\n- 情况 $5$：$(A, B, K, H, s) = (60, 0.5, 2, 0.3, 8)$。\n\n最终输出格式要求：\n- 您的程序应生成单行输出，包含所有情况的结果，按顺序排列，形式为 $[p_c^*, q^*]$ 对的列表，每个数字四舍五入到六 ($6$) 位小数。输出必须是单行，没有多余空格，格式与以下完全相同：\n\"[[p_{c,1}^*,q_1^*],[p_{c,2}^*,q_2^*],[p_{c,3}^*,q_3^*],[p_{c,4}^*,q_4^*],[p_{c,5}^*,q_5^*]]\"。", "solution": "所提出的问题是一个定义明确的计算经济学练习，要求在特定的非线性供给和需求函数以及政府补贴下确定市场均衡。该问题具有科学依据、内容自洽且逻辑一致。因此，可以通过严谨的数学分析得出解决方案。\n\n竞争性市场均衡的基本原则是，消费者需求量必须等于生产者供给量。价格会进行调整以达到这种平衡。在此模型中，消费者支付的价格 $p_c$ 和生产者收到的价格 $p_p$ 通过单位补贴 $s$ 相关联，即 $p_p = p_c + s$。\n\n需求函数为 $Q_d(p_c) = A \\exp(-B p_c)$，供给函数为 $Q_s(p_p) = K (\\exp(H p_p) - 1)$。代入 $p_p$ 的关系式，供给函数可以表示为消费者价格 $p_c$ 的函数：$Q_s(p_c + s) = K (\\exp(H (p_c + s)) - 1)$。\n\n均衡条件 $Q_d(p_c^*) = Q_s(p_c^* + s)$ 要求我们找到超额需求函数（我们定义为 $f(p_c)$）的根 $p_c^*$：\n$$\nf(p_c) = Q_d(p_c) - Q_s(p_c + s) = A \\exp(-B p_c) - K (\\exp(H (p_c + s)) - 1) = 0\n$$\n因此，问题转化为求解单变量 $p_c$ 的求根问题。约束条件是 $p_c \\ge 0$，且所有模型参数（$A, B, K, H, s$）均为非负，其中 $A, B, K, H$ 严格为正。\n\n为了求解这个超越方程，需要使用数值方法。牛顿-拉夫逊方法是完成此任务的强大而高效的选择，当初始猜测值足够接近根时，它以二次收敛速度而闻名。牛顿-拉夫逊方法的迭代公式为：\n$$\np_{c, n+1} = p_{c, n} - \\frac{f(p_{c, n})}{f'(p_{c, n})}\n$$\n其中 $p_{c, n}$ 是第 $n$ 次迭代时根的估计值，而 $f'(p_c)$ 是 $f(p_c)$ 相对于 $p_c$ 的一阶导数。\n\n首先，我们计算导数 $f'(p_c)$：\n$$\nf'(p_c) = \\frac{d}{dp_c} \\left( A \\exp(-B p_c) - K \\exp(H (p_c + s)) + K \\right)\n$$\n$$\nf'(p_c) = -A B \\exp(-B p_c) - K H \\exp(H (p_c + s))\n$$\n由于所有参数 $A, B, K, H$ 均为正数，显然对于所有 $p_c \\ge 0$，都有 $f'(p_c) < 0$。这证实了超额需求函数 $f(p_c)$ 是严格单调递减的。一个严格单调的函数最多只与横轴相交一次，这保证了如果根存在，它就是唯一的。对函数在边界上的分析，$f(0) = A - K(\\exp(Hs) - 1)$，表明对于所有给定的测试用例，该值都是正的。由于当 $p_c \\to \\infty$ 时，$f(p_c) \\to -\\infty$，根据介值定理，保证存在一个唯一的正根 $p_c^* > 0$。\n\n找到均衡的算法如下：\n1.  对于每组参数 $(A, B, K, H, s)$，定义函数 $f(p_c)$ 和 $f'(p_c)$。\n2.  为消费者价格选择一个初始猜测值 $p_{c,0}$。一个合理的选择是根据需求函数特性导出的价格，例如，需求减半时的价格，$p_{c,0} = \\frac{\\ln(2)}{B}$。\n3.  迭代应用牛顿-拉夫逊公式，直到连续迭代之间的变化 $|p_{c, n+1} - p_{c, n}|$ 小于指定的容差（例如 $10^{-9}$）。\n4.  一旦均衡价格 $p_c^*$ 收敛，使用需求函数计算相应的均衡数量 $q^*$：$q^* = Q_d(p_c^*) = A \\exp(-B p_c^*)$。\n5.  将最终结果 $(p_c^*, q^*)$ 按要求四舍五入到六位小数。\n\n此过程在一个 Python 脚本中实现，利用 `scipy.optimize.newton` 函数，该函数提供了对牛顿-拉夫逊方法的稳健且数值稳定的实现。这避免了手动实现可能出现的问题，并确保了可靠的收敛。对提供的五个测试用例中的每一个都重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import optimize\n\ndef solve():\n    \"\"\"\n    Computes the equilibrium consumer price and quantity for a series of market parameters\n    using the Newton-Raphson method for root-finding.\n    \"\"\"\n    \n    # Test suite: each element is a tuple (A, B, K, H, s)\n    test_cases = [\n        (100, 0.4, 4, 0.25, 2),\n        (100, 0.4, 4, 0.25, 0),\n        (120, 0.35, 6, 0.3, 3.5),\n        (80, 0.6, 3, 0.5, 1),\n        (60, 0.5, 2, 0.3, 8),\n    ]\n\n    results_str = []\n    for params in test_cases:\n        A, B, K, H, s = params\n\n        def f(pc):\n            \"\"\"Excess demand function, f(p_c) = Q_d(p_c) - Q_s(p_p).\"\"\"\n            if pc < 0: # Consumer price must be non-negative\n                return np.inf\n            return A * np.exp(-B * pc) - K * (np.exp(H * (pc + s)) - 1.0)\n\n        def f_prime(pc):\n            \"\"\"Derivative of the excess demand function.\"\"\"\n            return -A * B * np.exp(-B * pc) - K * H * np.exp(H * (pc + s))\n        \n        # An initial guess based on the price where demand is half its maximum value.\n        # This provides a reasonable starting point in the correct region.\n        p0 = np.log(2.0) / B\n        \n        # Use SciPy's Newton-Raphson solver for robustness and efficiency.\n        # A tight tolerance is used for high precision before rounding.\n        pc_star = optimize.newton(f, x0=p0, fprime=f_prime, tol=1e-12, maxiter=100)\n        \n        # Calculate the equilibrium quantity using the demand function.\n        q_star = A * np.exp(-B * pc_star)\n        \n        # Format the result pair as a string with numbers rounded to 6 decimal places.\n        pair_str = f\"[{pc_star:.6f},{q_star:.6f}]\"\n        results_str.append(pair_str)\n\n    # Assemble the final output string in the exact format required.\n    final_output = f\"[{','.join(results_str)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2414687"}, {"introduction": "在现代市场中，特别是对于技术或社交产品，一种商品的价值可能取决于使用它的用户数量——这种现象被称为网络外部性。本练习将这一高级概念整合到供需框架中，用以分析税收的影响。你将首先推导出市场的有效需求曲线，然后利用它来计算均衡点和无谓损失，从而将抽象的理论与具体的政策分析联系起来。[@problem_id:2429889]", "problem": "考虑一个单一商品的竞争性市场，其供给和需求均为线性，且需求侧存在线性网络外部性。对消费者征收特定的（单位）税。您必须为几组参数，数值上并精确地计算该税收造成的无谓损失（DWL）。\n\n基本要素和定义：\n- 反供给曲线由 $P_S(Q) = s_0 + s_1 Q$ 给出，其中 $s_1 > 0$，$Q \\ge 0$，$P_S(Q)$ 是生产者收到的价格。\n- 存在线性网络外部性的直接需求由 $Q_D(P_c, Q) = a - b P_c + m Q$ 给出，其中 $b > 0$，$m < 1$，$Q \\ge 0$，$P_c$ 是消费者支付的价格。参数 $m$ 捕捉了网络效应：随着均衡数量 $Q$ 的增加，一个更高的 $m$ 会增加需求。\n- 对消费者征收税率为 $t \\ge 0$ 的特定税，因此消费者支付 $P_c = P + t$，而生产者收到 $P$，其中 $P$ 是与供给曲线一致的市场价格。\n- 在任何税率 $t$ 下的市场均衡由不动点系统 $Q = Q_D(P + t, Q)$ 和 $P = P_S(Q)$ 以及可行性约束 $Q \\ge 0$ 定义。\n- 在给定均衡数量 $Q$ 下的总剩余定义为私人边际支付意愿曲线（反需求曲线）与反供给曲线之间的面积，即反需求减去反供给对数量从 $0$ 到 $Q$ 的定积分。无谓损失（DWL）是总剩余中未被政府收入抵消的损失部分，等价于无税时的总剩余与包含政府收入的有税时的总剩余之差。\n\n任务：\n1. 从上述基本定义出发，推导出与不动点需求 $Q_D(P_c, Q)$ 和线性网络外部性参数 $m$ 一致的简化形式反需求曲线（作为 $Q$ 的函数的私人边际支付意愿）。然后，使用条件 $P_S(Q) = P$，将无税均衡数量 $Q_0$ 和有税均衡数量 $Q_t$ 表述为基本要素 $(a, b, m, s_0, s_1, t)$ 的函数，并施加可行性约束 $Q \\ge 0$。\n2. 使用总剩余的标准定义，即反需求减去反供给从 $0$ 到 $Q$ 的定积分，将无谓损失（DWL）表示为 $Q_0$、$Q_t$ 和基本要素 $(a, b, m, s_0, s_1)$ 的函数。确保您的实现能正确处理 $Q_0 = 0$ 或 $Q_t = 0$ 的角点解情况。\n3. 实现一个程序，为下面测试套件中的每一组参数计算无谓损失。将每个结果表示为四舍五入到六位小数的浮点数。\n\n参数约束：\n- $b > 0$, $s_1 > 0$, $m < 1$, $t \\ge 0$。选择满足 $Q \\ge 0$ 的主均衡。\n\n测试用例 (每个元组为 $(a, b, m, s_0, s_1, t)$):\n- 具有内部解的正常路径：$(100, 2, 0.2, 10, 1, 5)$。\n- 零税收边界（DWL应为零）：$(80, 1.5, 0.5, 5, 0.5, 0)$。\n- 导致有税情况下无交易的高税收角点解：$(60, 1, 0.3, 20, 0.8, 50)$。\n- 接近边界 $m \\to 1$ 的强网络效应：$(100, 3, 0.95, 5, 0.2, 2)$。\n- 负网络效应（拥堵）：$(90, 2, -0.3, 8, 0.4, 4)$。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，列表顺序与测试套件相同，例如 $[r_1,r_2,r_3,r_4,r_5]$，其中每个 $r_i$ 是测试用例 $i$ 的无谓损失，四舍五入到六位小数。\n- 不应打印任何其他输出。", "solution": "问题陈述需经过验证。\n\n步骤 1：提取已知条件\n- 反供给曲线：$P_S(Q) = s_0 + s_1 Q$，其中 $s_1 > 0$，$Q \\ge 0$。\n- 存在网络外部性的直接需求：$Q_D(P_c, Q) = a - b P_c + m Q$，其中 $b > 0$，$m < 1$，$Q \\ge 0$。\n- 对消费者的特定税：税率 $t \\ge 0$。消费者价格 $P_c = P + t$。生产者价格是 $P$。市场价格 $P$ 与供给一致，所以 $P = P_S(Q)$。\n- 市场均衡条件：一个不动点 $(P, Q)$ 满足 $Q = Q_D(P + t, Q)$ 和 $P = P_S(Q)$，且 $Q \\ge 0$。\n- 数量为 $Q$ 时的总剩余：私人边际支付意愿曲线与反供给曲线之间从 $0$ 到 $Q$ 的面积。\n- 无谓损失（DWL）：总剩余中未被政府收入抵消的损失。\n- 任务 1：推导简化形式的反需求曲线，以及无税均衡数量 $Q_0$ 和有税均衡数量 $Q_t$ 的表达式。\n- 任务 2：将 DWL 表示为 $Q_0$、$Q_t$ 和基本要素的函数。\n- 任务 3：实现一个程序，为给定的参数集计算 DWL。\n- 参数约束：$b > 0$, $s_1 > 0$, $m < 1$, $t \\ge 0$。\n- 测试套件：\n    1. $(a, b, m, s_0, s_1, t) = (100, 2, 0.2, 10, 1, 5)$\n    2. $(a, b, m, s_0, s_1, t) = (80, 1.5, 0.5, 5, 0.5, 0)$\n    3. $(a, b, m, s_0, s_1, t) = (60, 1, 0.3, 20, 0.8, 50)$\n    4. $(a, b, m, s_0, s_1, t) = (100, 3, 0.95, 5, 0.2, 2)$\n    5. $(a, b, m, s_0, s_1, t) = (90, 2, -0.3, 8, 0.4, 4)$\n\n步骤 2：使用提取的已知条件进行验证\n该问题具有科学依据，提法明确且客观。这是一个标准的微观经济学模型，涉及供给、需求、网络外部性和税收。所有术语都得到了正式且无歧义的定义。参数受到约束（$s_1 > 0, b > 0, m < 1$），以确保供给和需求函数具有良好性状，从而导向一个唯一的、稳定的均衡。这些任务是将经济学原理直接应用于给定模型。不存在事实错误、矛盾或信息缺失。该问题是计算经济学中的一个正式练习。\n\n步骤 3：结论与行动\n问题有效。将提供解决方案。\n\n按要求，分析分三部分进行。\n\n首先，我们推导简化形式的反需求曲线，它代表了私人边际支付意愿。这可以通过重新整理直接需求函数 $Q = a - b P_c + m Q$ 来求解作为数量 $Q$ 的函数的消费者价格 $P_c$。\n$$Q(1-m) = a - b P_c$$\n$$b P_c = a - (1-m)Q$$\n因此，我们记为 $P_D(Q)$ 的反需求曲线是：\n$$P_D(Q) = \\frac{a}{b} - \\frac{1-m}{b}Q$$\n由于 $m < 1$ 且 $b > 0$，斜率 $-\\frac{1-m}{b}$ 为负，这与向下倾斜的需求曲线相符。反供给曲线由 $P_S(Q) = s_0 + s_1 Q$ 给出。\n\n其次，我们确定市场均衡数量。均衡发生在需求量等于供给量的地方。消费者愿意支付的价格 $P_D(Q)$ 必须等于供给者要求的价格 $P_S(Q)$ 加上任何单位税 $t$。均衡条件是 $P_D(Q) = P_S(Q) + t$。\n代入 $P_D(Q)$ 和 $P_S(Q)$ 的表达式：\n$$\\frac{a}{b} - \\frac{1-m}{b}Q = (s_0 + s_1 Q) + t$$\n我们求解均衡数量 $Q$，对于税率 $t$，我们将其记为 $Q_t$：\n$$\\frac{a}{b} - s_0 - t = s_1 Q + \\frac{1-m}{b}Q$$\n$$\\frac{a - bs_0 - bt}{b} = \\left(\\frac{bs_1 + 1 - m}{b}\\right)Q_t$$\n$$Q_t = \\frac{a - bs_0 - bt}{1 - m + bs_1}$$\n给定 $m < 1$，$b > 0$ 和 $s_1 > 0$，分母 $1 - m + bs_1$ 严格为正。数量 $Q_t$ 必须为非负。因此，均衡数量是：\n$$Q_t = \\max\\left(0, \\frac{a - bs_0 - bt}{1 - m + bs_1}\\right)$$\n无税均衡数量 $Q_0$ 是 $t=0$ 的特殊情况：\n$$Q_0 = \\max\\left(0, \\frac{a - bs_0}{1 - m + bs_1}\\right)$$\n\n第三，我们推导无谓损失（DWL）的公式。DWL 是由税收导致的总剩余损失。总剩余是私人反需求曲线 $P_D(Q)$ 与反供给曲线 $P_S(Q)$ 之间的面积。税收导致数量从有效率水平 $Q_0$ 移动到扭曲水平 $Q_t$。DWL 是在这次数量减少中损失的剩余，即需求曲线与供给曲线之差从 $Q_t$ 到 $Q_0$ 的定积分。\n$$DWL = \\int_{Q_t}^{Q_0} [P_D(Q) - P_S(Q)] dQ$$\n设被积函数为 $f(Q) = P_D(Q) - P_S(Q)$。\n$$f(Q) = \\left(\\frac{a}{b} - \\frac{1-m}{b}Q\\right) - (s_0 + s_1 Q) = \\left(\\frac{a}{b} - s_0\\right) - \\left(s_1 + \\frac{1-m}{b}\\right)Q$$\n这是 $Q$ 的一个线性函数。该积分代表一个梯形的面积。一个更稳健的方法是直接使用这个函数形式。设 $C_1 = s_1 + \\frac{1-m}{b}$ 为 $f(Q)$ 斜率的大小。积分变为：\n$$DWL = \\int_{Q_t}^{Q_0} f(Q) dQ = \\left[\\left(\\frac{a}{b} - s_0\\right)Q - \\frac{1}{2}\\left(s_1 + \\frac{1-m}{b}\\right)Q^2\\right]_{Q_t}^{Q_0}$$\n这个表达式可以被简化。注意到 $Q_0 - Q_t = \\frac{bt}{1 - m + bs_1} = \\frac{t}{C_1}$。梯形的面积也可以由 $\\frac{1}{2}(f(Q_t) + f(Q_0))(Q_0 - Q_t)$ 给出。\n如果 $Q_0 > 0$，则 $f(Q_0) = P_D(Q_0) - P_S(Q_0) = 0$。\n如果 $Q_t > 0$，则 $f(Q_t) = P_D(Q_t) - P_S(Q_t) = t$。在这个内部解的情况下，$DWL = \\frac{1}{2}(t+0)(Q_0 - Q_t)$。\n然而，如果税收高到禁止交易，使得 $Q_t=0$ 而 $Q_0>0$，这个简单的公式就不正确了。DWL 变成整个初始剩余。\n从线性函数的性质推导出一个普遍正确的公式：\n$$DWL = \\frac{1}{2} C_1 (Q_0 - Q_t)^2 = \\frac{1}{2} \\left(s_1 + \\frac{1-m}{b}\\right) (Q_0 - Q_t)^2$$\n这个公式正确地计算了所有情况下的剩余三角形/梯形的面积，包括内部解（$Q_t > 0$）、税收导致数量为零的角点解（$Q_t = 0$）以及无税情况（$t=0$，此时 $Q_t=Q_0$ 且 $DWL=0$）。\n\n计算算法如下：\n1. 对于每一组参数 $(a, b, m, s_0, s_1, t)$：\n2. 计算公共分母：$D = 1 - m + b s_1$。\n3. 计算无税均衡数量：$Q_0 = \\max(0, (a - b s_0) / D)$。\n4. 计算有税均衡数量：$Q_t = \\max(0, (a - b s_0 - b t) / D)$。\n5. 计算斜率系数：$C_1 = s_1 + (1 - m) / b$。\n6. 计算无谓损失：$DWL = 0.5 \\times C_1 \\times (Q_0 - Q_t)^2$。\n7. 将最终的 $DWL$ 四舍五入到六位小数。\n\n下面实现了这个过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the deadweight loss of a per-unit tax in a market with a\n    linear network externality.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each tuple is (a, b, m, s0, s1, t)\n    test_cases = [\n        (100.0, 2.0, 0.2, 10.0, 1.0, 5.0),    # Happy path\n        (80.0, 1.5, 0.5, 5.0, 0.5, 0.0),    # Zero-tax boundary\n        (60.0, 1.0, 0.3, 20.0, 0.8, 50.0),   # High-tax corner\n        (100.0, 3.0, 0.95, 5.0, 0.2, 2.0),   # Strong network effect\n        (90.0, 2.0, -0.3, 8.0, 0.4, 4.0),    # Negative network effect\n    ]\n\n    results = []\n    for params in test_cases:\n        a, b, m, s0, s1, t = params\n\n        # The model assumes b > 0, s1 > 0, m < 1.\n        # These are crucial for a well-defined equilibrium.\n        \n        # Denominator in the quantity expressions. It is always positive\n        # under the given parameter constraints.\n        denom = 1 - m + b * s1\n\n        # Calculate no-tax equilibrium quantity (Q_0)\n        # Q_0 = max(0, (a - b*s0) / denom)\n        q0_numerator = a - b * s0\n        q0 = 0.0\n        if q0_numerator > 0:\n            q0 = q0_numerator / denom\n\n        # Calculate with-tax equilibrium quantity (Q_t)\n        # Q_t = max(0, (a - b*s0 - b*t) / denom)\n        qt_numerator = a - b * s0 - b * t\n        qt = 0.0\n        if qt_numerator > 0:\n            qt = qt_numerator / denom\n            \n        # The deadweight loss is the area of a triangle/trapezoid representing\n        # the loss in total surplus. The robust formula for linear curves is:\n        # DWL = 0.5 * C1 * (Q0 - Qt)^2\n        # where C1 is the sum of the magnitudes of the slopes of the inverse\n        # supply and inverse demand curves.\n        # C1 = s1 + (1 - m) / b\n        c1 = s1 + (1 - m) / b\n        \n        # Calculate the quantity difference\n        quantity_diff = q0 - qt\n        \n        # Calculate the deadweight loss\n        dwl = 0.5 * c1 * (quantity_diff ** 2)\n        \n        # Format the result to six decimal places\n        results.append(f\"{dwl:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2429889"}]}