{"hands_on_practices": [{"introduction": "现实世界中的投资项目很少具有简单、统一的现金流。本练习模拟了一个农场向再生农业转型的真实场景，其中涉及初始成本、暂时性亏损和长期增长的收入。通过将这一复杂的现金流分解为可管理的部分——初始支出、短期流量、增长型永续年金和有限期年金——您将练习计算复杂投资项目净现值($\\text{NPV}$)的核心技能。这项实践练习([@problem_id:2413633])展示了 $\\text{NPV}$ 方法的强大之处，它能为一个具有漫长且多变财务生命周期的项目提供一个单一、综合的价值评估。", "problem": "一家多元化的谷物农场正在考虑从传统耕作方式永久性地转为再生农业。请仅使用以下数据，评估与继续传统经营相比，该转型的增量净现值（NPV）。所有现金流均以实际价值计算，单位为美元（USD），并在每年年末发生，除非另有说明。适用的经风险调整的恒定真实年贴现率为 $r=0.07$，采用离散复利。\n\n数据：\n- 在时间 $t=0$ 时，农场产生一笔即时转型支出 $\\$220{,}000$。\n- 在过渡期内，由于产量损失和再培训，增量净现金流（相对于继续传统经营）为负：\n  - 第 $t=1$ 年末：$-\\$90{,}000$，\n  - 第 $t=2$ 年末：$-\\$50{,}000$。\n- 从第 $t=3$ 年末开始，由于价格溢价和投入成本降低，农场实现永久性的增量净经营现金流。第 $t=3$ 年末的增量净现金流为 $\\$95{,}000$，并从此以每年 $g=0.025$ 的恒定实际增长率永久增长。\n- 此外，从第 $t=4$ 年末开始，一直到第 $t=13$ 年末（共计10笔支付），农场每年收到 $\\$12{,}000$ 的增量碳信用收入（以实际价值计算）。\n\n假设没有其他增量效应（例如，无残值，税收已包含在给定的净现金流中，且无额外营运资本需求）。计算在 $t=0$ 时该转型的增量净现值 (NPV)。请以美元（USD）表示最终答案，并四舍五入至四位有效数字。", "solution": "所给问题是资本预算中的一个标准练习，这是计算金融学中的一个主题。该问题提法明确，内部一致，并包含了得出唯一解所需的所有信息。我们将开始计算净现值（NPV）。\n\n一项投资的净现值（NPV）是其所有增量现金流以特定贴现率折算后现值的总和。对于离散的、期末发生的现金流，其计算公式为：\n$$\n\\text{NPV} = \\sum_{t=0}^{\\infty} \\frac{CF_t}{(1+r)^t}\n$$\n其中，$CF_t$ 代表第 $t$ 年末的净现金流，$r$ 是恒定的真实年贴现率，给定为 $r=0.07$。该分析在时间 $t=0$ 进行。\n\n该项目的增量现金流可以分为四个不同的部分进行分析：\n1.  $t=0$ 时的初始投资支出。\n2.  第 $t=1$ 年和第 $t=2$ 年的过渡期净现金流。\n3.  从第 $t=3$ 年开始的永续增长经营现金流。\n4.  从第 $t=4$ 年到第 $t=13$ 年的一笔有限期年金形式的碳信用收入。\n\n我们将分别计算每个部分的现值，然后将它们相加得到总NPV。\n\n第1部分：初始支出\n问题陈述了一笔即时转型支出 $220,000$。这是一笔在 $t=0$ 时的现金流出，因此 $CF_0 = -220,000$。其现值就是其本身：\n$$\nPV_0 = -220,000\n$$\n\n第2部分：过渡期现金流\n项目在头两年产生净现金流出：$CF_1 = -90,000$ 和 $CF_2 = -50,000$。这两笔现金流的现值通过将它们各自折现到 $t=0$ 来计算：\n$$\nPV_{trans} = \\frac{CF_1}{(1+r)^1} + \\frac{CF_2}{(1+r)^2} = \\frac{-90,000}{1+0.07} + \\frac{-50,000}{(1+0.07)^2}\n$$\n\n第3部分：永续增长的经营现金流\n从第 $t=3$ 年起，项目产生一笔永续的经营现金流。在 $t=3$ 时的第一笔现金流是 $CF_{op,3} = 95,000$，之后以每年 $g=0.025$ 的恒定速率增长。永续增长现金流的现值可以在第一笔现金流发生的前一期计算。因此，我们首先计算这笔现金流在 $t=2$ 时的价值：\n$$\nV_{op, t=2} = \\frac{CF_{op,3}}{r-g}\n$$\n该公式适用，因为贴现率 $r=0.07$ 大于增长率 $g=0.025$。\n为了求得在 $t=0$ 时的现值，我们必须将 $V_{op, t=2}$ 向后折现两年：\n$$\nPV_{op} = \\frac{V_{op, t=2}}{(1+r)^2} = \\frac{1}{(1+r)^2} \\left( \\frac{CF_{op,3}}{r-g} \\right) = \\frac{95,000}{(1+0.07)^2 (0.07 - 0.025)}\n$$\n\n第4部分：碳信用年金\n农场从第 $t=4$ 年末到第 $t=13$ 年末每年收到一笔年金 $A=12,000$。这构成了一系列共 $N=13-4+1=10$ 笔付款。普通年金的现值计算于其第一笔付款的前一期。因此，我们首先计算该年金在 $t=3$ 时的价值：\n$$\nV_{cc, t=3} = A \\left( \\frac{1 - (1+r)^{-N}}{r} \\right) = 12,000 \\left( \\frac{1 - (1+0.07)^{-10}}{0.07} \\right)\n$$\n然后将这个在 $t=3$ 时的价值折现回 $t=0$：\n$$\nPV_{cc} = \\frac{V_{cc, t=3}}{(1+r)^3} = \\frac{1}{(1+0.07)^3} \\left[ 12,000 \\left( \\frac{1 - (1+0.07)^{-10}}{0.07} \\right) \\right]\n$$\n\n总净现值\n总NPV是所有组成部分现值的代数和：\n$$\n\\text{NPV} = PV_0 + PV_{trans} + PV_{op} + PV_{cc}\n$$\n代入表达式：\n$$\n\\text{NPV} = -220,000 + \\left(\\frac{-90,000}{1.07} + \\frac{-50,000}{1.07^2}\\right) + \\frac{95,000}{(1.07)^2(0.045)} + \\frac{12,000}{(1.07)^3} \\left( \\frac{1 - (1.07)^{-10}}{0.07} \\right)\n$$\n我们现在计算每一项的数值：\n$$\nPV_0 = -220,000\n$$\n$$\nPV_{trans} = -84,112.1495... - 43,671.9364... = -127,784.086...\n$$\n$$\nPV_{op} = \\frac{95,000}{1.1449 \\times 0.045} = \\frac{95,000}{0.0515205} = 1,843,941.130...\n$$\n$$\nPV_{cc} = \\frac{12,000}{1.225043...} \\left( \\frac{1 - 0.508349...}{0.07} \\right) = 9795.59... \\times 7.02358... = 68,799.801...\n$$\n将这些值相加：\n$$\n\\text{NPV} = -220,000 - 127,784.086 + 1,843,941.130 + 68,799.801 = 1,564,956.845\n$$\n问题要求最终答案四舍五入至四位有效数字。计算值为 $1,564,956.845$。前四位有效数字是 $1, 5, 6, 4$。第五位数字是 $9$，所以我们将第四位数字 $4$ 向上取整为 $5$。得到的结果是 $1,565,000$。按要求以科学记数法表示，即为 $1.565 \\times 10^6$。", "answer": "$$\\boxed{1.565 \\times 10^{6}}$$", "id": "2413633"}, {"introduction": "虽然净现值($\\text{NPV}$)是财务分析的基石，但其他指标如内部收益率($\\text{IRR}$)也得到广泛应用。然而，它们总是可靠的吗？本问题通过一个非传统现金流模式的项目，揭示了 $\\text{IRR}$ 法则在特定情况下可能变得模棱两可甚至自相矛盾。通过完成这个实例([@problem_id:2413634])，您将理解 $\\text{IRR}$ 的理论局限性，并体会为何 $\\text{NPV}$ 法则被认为是做出投资决策时更稳健、更可靠的标准。", "problem": "一家公司的机会资本成本为 $r$，正在评估一个具有以下分期现金流（以货币单位计）的项目：在时间 $t=0$ 时为 $-100$；在时间 $t=1$ 时为 $+233$；在时间 $t=2$ 时为 $-135$。这是一个具有多次符号变化的非传统现金流模式。该公司的最低资本回报率为 $r=0.15$（即 $15\\%$）。仅使用现值、净现值 (NPV) 和内部收益率 (IRR) 的定义，并且不借助任何经验法则公式，确定哪个陈述最能描述 NPV 和 IRR 标准对此项目所暗示的决策。\n\nA. 当 $r=0.15$ 时，该项目的 $\\text{NPV}>0$（接受），而内部收益率 (IRR) 不唯一（有两个不同的 IRR），因此 IRR 规则无法得出唯一的接受/拒绝决策。\n\nB. 当 $r=0.15$ 时，该项目的 $\\text{NPV}<0$ 且 $\\text{IRR}<r$，因此两个标准都同意拒绝。\n\nC. 当 $r=0.15$ 时，该项目的 $\\text{NPV}<0$ 但有唯一的 $\\text{IRR}>r$，因此 IRR 表示接受，而 NPV 表示拒绝。\n\nD. 当 $r=0.15$ 时，该项目的 $\\text{NPV}>0$ 但有唯一的 $\\text{IRR}<r$，因此 IRR 表示拒绝，而 NPV 表示接受。", "solution": "提交问题陈述以供验证。\n\n**步骤 1：提取已知条件**\n-   时间 $t=0$ 时的现金流：$C_0 = -100$。\n-   时间 $t=1$ 时的现金流：$C_1 = +233$。\n-   时间 $t=2$ 时的现金流：$C_2 = -135$。\n-   机会资本成本（最低资本回报率）：$r = 0.15$。\n-   该问题涉及一个具有非传统现金流模式的项目（两次符号变化：$-, +, -$）。\n-   分析必须仅基于净现值 (NPV) 和内部收益率 (IRR) 的定义。\n\n**步骤 2：使用提取的已知条件进行验证**\n该问题具有科学依据，提法明确，且客观。它为金融经济学中的一个标准问题提供了一套完整且一致的数据。NPV 和 IRR 的概念是基础性的，所指定的现金流模式是一个众所周知的高级案例，它展示了 IRR 规则的潜在局限性。所述条件是现实的，并且不违反任何数学或经济学原理。\n\n**步骤 3：结论与行动**\n问题陈述有效。现在将推导一个严谨的解。\n\n项目的净现值 (NPV) 定义为其折现现金流的总和：\n$$ \\text{NPV} = \\sum_{t=0}^{n} \\frac{C_t}{(1+r)^t} $$\n对于给定的 $n=2$ 的项目，NPV 作为折现率 $r$ 的函数是：\n$$ \\text{NPV}(r) = C_0 + \\frac{C_1}{1+r} + \\frac{C_2}{(1+r)^2} $$\n代入给定的现金流：\n$$ \\text{NPV}(r) = -100 + \\frac{233}{1+r} - \\frac{135}{(1+r)^2} $$\nNPV 决策规则是，如果一个项目的 NPV（按公司的机会资本成本计算）为正，则接受该项目。我们给定的最低资本回报率为 $r = 0.15$。让我们计算此利率下的 NPV。\n$$ \\text{NPV}(0.15) = -100 + \\frac{233}{1+0.15} - \\frac{135}{(1+0.15)^2} $$\n$$ \\text{NPV}(0.15) = -100 + \\frac{233}{1.15} - \\frac{135}{(1.15)^2} $$\n$$ \\text{NPV}(0.15) = -100 + 202.60869... - \\frac{135}{1.3225} $$\n$$ \\text{NPV}(0.15) = -100 + 202.60869... - 102.07939... $$\n$$ \\text{NPV}(0.15) \\approx 0.5293 $$\n由于 $\\text{NPV}(0.15) > 0$，NPV 标准要求接受该项目。\n\n内部收益率 (IRR) 定义为使 NPV 恰好为零的折现率 $r_{\\text{IRR}}$。\n$$ \\text{NPV}(r_{\\text{IRR}}) = -100 + \\frac{233}{1+r_{\\text{IRR}}} - \\frac{135}{(1+r_{\\text{IRR}})^2} = 0 $$\n为了找到 IRR，我们必须解这个关于 $r_{\\text{IRR}}$ 的方程。我们定义一个变量 $x = 1+r_{\\text{IRR}}$。方程变为：\n$$ -100 + \\frac{233}{x} - \\frac{135}{x^2} = 0 $$\n为了消去分母，我们将整个方程乘以 $-x^2$（假设 $x \\neq 0$，这是必须的，因为 $r_{\\text{IRR}} \\neq -1$）：\n$$ 100x^2 - 233x + 135 = 0 $$\n这是一个形式为 $ax^2 + bx + c = 0$ 的标准二次方程，其中 $a=100$，$b=-233$，$c=135$。我们使用二次公式来求解 $x$ 的根：\n$$ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n$$ x = \\frac{233 \\pm \\sqrt{(-233)^2 - 4(100)(135)}}{2(100)} $$\n$$ x = \\frac{233 \\pm \\sqrt{54289 - 54000}}{200} $$\n$$ x = \\frac{233 \\pm \\sqrt{289}}{200} $$\n$289$ 的平方根是 $17$。\n$$ x = \\frac{233 \\pm 17}{200} $$\n这给出了 $x$ 的两个不同的实数根：\n$$ x_1 = \\frac{233 + 17}{200} = \\frac{250}{200} = 1.25 $$\n$$ x_2 = \\frac{233 - 17}{200} = \\frac{216}{200} = 1.08 $$\n由于 $r_{\\text{IRR}} = x - 1$，我们找到相应的 IRR 值：\n$$ r_{\\text{IRR},1} = x_1 - 1 = 1.25 - 1 = 0.25 \\quad (\\text{即 } 25\\%) $$\n$$ r_{\\text{IRR},2} = x_2 - 1 = 1.08 - 1 = 0.08 \\quad (\\text{即 } 8\\%) $$\n该项目有两个不同的 IRR。IRR 决策规则规定，如果项目的 IRR 大于最低资本回报率，则接受该项目，但在这种情况下，该规则是模棱两可的。一个 IRR ($25\\%$) 大于 $15\\%$ 的最低资本回报率，建议接受。另一个 IRR ($8\\%$) 小于最低资本回报率，建议拒绝。因此，IRR 规则没有提供一个单一、明确的决策。\n\n现在我们根据这些发现评估每个选项。\n\n**选项 A：** 当 $r=0.15$ 时，该项目的 $\\text{NPV}>0$（接受），而内部收益率 (IRR) 不唯一（有两个不同的 IRR），因此 IRR 规则无法得出唯一的接受/拒绝决策。\n-   我们的计算显示 $\\text{NPV}(0.15) \\approx 0.53 > 0$，所以根据 NPV 标准，该项目是可接受的。这一部分是正确的。\n-   我们的计算显示两个不同的 IRR，$r_{\\text{IRR},1} = 0.25$ 和 $r_{\\text{IRR},2}=0.08$。IRR 不唯一。这一部分是正确的。\n-   一个 IRR 高于最低资本回报率，一个低于，IRR 规则导致了矛盾的结论，因此“无法得出唯一的接受/拒绝决策”。这一部分也是正确的。\n结论：**正确**。\n\n**选项 B：** 当 $r=0.15$ 时，该项目的 $\\text{NPV}<0$ 且 $\\text{IRR}<r$，因此两个标准都同意拒绝。\n-   $\\text{NPV}<0$ 的陈述是错误的。我们发现 $\\text{NPV} > 0$。\n-   “$\\text{IRR}<r$”的陈述过于简化，并且是错误的。一个 IRR ($0.25$) 大于 $r=0.15$。\n结论：**不正确**。\n\n**选项 C：** 当 $r=0.15$ 时，该项目的 $\\text{NPV}<0$ 但有唯一的 $\\text{IRR}>r$，因此 IRR 表示接受，而 NPV 表示拒绝。\n-   $\\text{NPV}<0$ 的陈述是错误的。\n-   “唯一的 IRR”的陈述是错误的。有两个 IRR。\n结论：**不正确**。\n\n**选项 D：** 当 $r=0.15$ 时，该项目的 $\\text{NPV}>0$ 但有唯一的 $\\text{IRR}<r$，因此 IRR 表示拒绝，而 NPV 表示接受。\n-   $\\text{NPV}>0$ 的陈述是正确的。\n-   “唯一的 IRR”的陈述是错误的。\n结论：**不正确**。\n\n唯一根据对定义的严格应用而正确描述情况的陈述是选项 A。NPV 为正，表示接受。多个 IRR 的存在使得 IRR 规则在这种情况下变得模棱两可且不可靠，无法用于决策。这是一个经典的例子，说明了为什么 NPV 被认为是优于 IRR 的投资标准。", "answer": "$$\\boxed{A}$$", "id": "2413634"}, {"introduction": "评估单个项目是一项关键技能，但企业常面临的挑战是在有限预算下，从众多备选项目中挑选出最佳的投资组合。这项实践将净现值($\\text{NPV}$)概念从一个简单的估值工具提升为战略优化的输入。您将学习如何将这个资本预算问题构建为一个 0-1 整数规划模型([@problem_id:2413667])——这是一种强大的运筹学技术——从而系统地确定能为公司实现总价值最大化的项目组合。", "problem": "您将处理一个资本预算选择问题，该问题必须表示为基于净现值（NPV）的二元（0-1）整数规划模型。有 $n$ 个候选项目，索引为 $i \\in \\{1,2,\\ldots,n\\}$。项目 $i$ 有一个确定的现金流序列 $(c_{i,0},c_{i,1},\\ldots,c_{i,T_i})$，其中 $c_{i,0} < 0$ 代表在时间 $t=0$ 的初始投资，而对于 $t \\ge 1$ 的 $c_{i,t}$ 发生在第 $t$ 期期末。存在一个以小数形式表示的通用每期贴现率 $r \\ge 0$（例如，$0.05$），以及一个限制时间 $t=0$ 时初始投资总和的单一资本预算 $B \\ge 0$。定义决策变量 $x_i \\in \\{0,1\\}$，其中如果项目 $i$ 被采纳，则 $x_i=1$，否则 $x_i=0$。项目 $i$ 的净现值为\n$$\n\\text{NPV}_i(r) \\equiv \\sum_{t=0}^{T_i} \\frac{c_{i,t}}{(1+r)^t}.\n$$\n令 $I_i \\equiv -c_{i,0} > 0$ 表示项目 $i$ 的初始投资。构建以下 0-1 整数规划：\n$$\n\\max_{x_1,\\ldots,x_n} \\ \\sum_{i=1}^n \\text{NPV}_i(r)\\, x_i\n$$\n约束条件为\n$$\n\\sum_{i=1}^n I_i \\, x_i \\le B, \\quad x_i \\in \\{0,1\\} \\ \\text{for all } i.\n$$\n请编写一个程序，为下方的每个测试用例计算上述整数规划的最优目标值，即在所有可行项目组合中的最大总净现值。所有利率必须作为小数处理。要求的输出是实数。将每个最优总净现值四舍五入到小数点后 $4$ 位。\n\n测试套件：\n- 测试用例 1：\n  - 贴现率 $r = 0.08$。\n  - 预算 $B = 100$。\n  - 各项目的现金流 $(c_{i,0},c_{i,1},c_{i,2})$：\n    - 项目 1: $(-40, 20, 30)$。\n    - 项目 2: $(-50, 0, 60)$。\n    - 项目 3: $(-30, 15, 18)$。\n    - 项目 4: $(-20, 8, 15)$。\n- 测试用例 2：\n  - 贴现率 $r = 0.05$。\n  - 预算 $B = 0$。\n  - 各项目的现金流 $(c_{i,0},c_{i,1},c_{i,2})$：\n    - 项目 1: $(-10, 6, 6)$。\n    - 项目 2: $(-8, 4, 5)$。\n    - 项目 3: $(-5, 2, 3)$。\n- 测试用例 3：\n  - 贴现率 $r = 0.05$。\n  - 预算 $B = 30$。\n  - 各项目的现金流 $(c_{i,0},c_{i,1},c_{i,2})$：\n    - 项目 1: $(-10, 6, 6)$。\n    - 项目 2: $(-15, 9, 9)$。\n    - 项目 3: $(-5, 3, 3)$。\n- 测试用例 4：\n  - 贴现率 $r = 0.07$。\n  - 预算 $B = 22$。\n  - 各项目的现金流 $(c_{i,0},c_{i,1},c_{i,2})$：\n    - 项目 1: $(-10, 4, 4)$。\n    - 项目 2: $(-12, 5, 5)$。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如，$[a,b,c,d]$），列表中的每个条目是按上述顺序列出的相应测试用例的四舍五入后的最优总净现值。每个数字必须精确到小数点后 $4$ 位，并以小数形式书写（例如，$0.0000$）。", "solution": "首先将对问题的科学性和逻辑一致性进行验证。\n\n**问题验证**\n\n**步骤 1：提取已知条件**\n\n- **决策变量**：$x_i \\in \\{0,1\\}$，对于 $i \\in \\{1, 2, \\ldots, n\\}$，其中如果项目 $i$ 被选中，则 $x_i=1$，否则 $x_i=0$。\n- **项目数据**：对于每个项目 $i$，有一个确定的现金流序列 $(c_{i,0}, c_{i,1}, \\ldots, c_{i,T_i})$。\n- **初始投资**：$I_i \\equiv -c_{i,0} > 0$。\n- **贴现率**：一个通用的每期利率 $r \\ge 0$。\n- **预算约束**：一个单一的资本预算 $B \\ge 0$。\n- **净现值 (NPV)**：项目 $i$ 的 NPV 定义为 $\\text{NPV}_i(r) \\equiv \\sum_{t=0}^{T_i} \\frac{c_{i,t}}{(1+r)^t}$。\n- **目标函数**：最大化总净现值，$\\max_{x_1,\\ldots,x_n} \\sum_{i=1}^n \\text{NPV}_i(r)\\, x_i$。\n- **约束条件**：总初始投资不得超过预算，$\\sum_{i=1}^n I_i \\, x_i \\le B$。\n- **测试用例**：提供了四个具体的问题实例，每个实例都包含一个贴现率 $r$、一个预算 $B$ 和一组项目及其现金流。\n- **输出要求**：每个测试用例的最优目标值，四舍五入到小数点后 $4$ 位。\n\n**步骤 2：使用提取的已知条件进行验证**\n\n1.  **科学依据**：该问题是公司金融和运筹学中，在单一时期资本约束下进行资本预算的标准模型。净现值概念是金融学中用于评估跨期投资价值的基本原则。将其构建为二元整数规划是规范做法。该问题具有科学合理性。\n\n2.  **适定性**：该问题是 0/1 背包问题的一个实例，这是组合优化中的一个著名问题。对于每个测试用例中给定的参数（有限的项目集、明确的预算和确定的现金流），存在且可以确定一个唯一的最优解。该问题是适定的。\n\n3.  **客观性**：问题陈述由精确的数学定义和客观数据构成。没有主观、模糊或基于观点性的陈述。\n\n4.  **完整性**：为每个测试用例提供了所有必要信息（贴现率、预算、现金流）。该模型是自洽的，不需要外部信息。\n\n**步骤 3：结论与行动**\n\n问题有效。这是一个清晰、自洽且科学合理的计算金融问题。将提供解决方案。\n\n**解决方法**\n\n所提出的问题是一个经典的资本预算选择问题，可以建模为二元整数规划，具体来说是 0/1 背包问题。任务是选择一个项目组合，在满足预算约束的前提下，最大化总净现值（NPV）。\n\n对于每个项目 $i$，我们有一个“价值”，即其 $\\text{NPV}_i$，以及一个“重量”，即其初始投资 $I_i$。预算 $B$ 充当背包的“容量”。数学模型如下：\n$$\n\\max_{x} \\ \\sum_{i=1}^n \\text{NPV}_i(r)\\, x_i\n$$\n约束条件为\n$$\n\\sum_{i=1}^n I_i \\, x_i \\le B, \\quad x_i \\in \\{0,1\\} \\ \\text{for all } i \\in \\{1, \\ldots, n\\}.\n$$\n这类问题被归类为混合整数线性规划（MILP），因为决策变量被限制为整数值（本例中为二元）。虽然该问题通常是NP难的，但所提供的测试用例项目数量很少（$n \\le 4$），使其在计算上是易于处理的。通用目的的 MILP 求解器是完成此任务最稳健和最合适的工具。\n\n我们将使用 SciPy 库中的 `scipy.optimize.milp` 函数。该函数设计用于求解最小化问题。为了解决我们的最大化问题，我们将最小化目标函数的负值：\n$$\n\\min_{x} \\ \\sum_{i=1}^n (-\\text{NPV}_i(r))\\, x_i\n$$\n每个测试用例的处理流程如下：\n\n1.  **参数计算**：对于每个项目 $i$，使用以下公式计算其初始投资 $I_i = -c_{i,0}$ 和其净现值 $\\text{NPV}_i(r)$：\n    $$\n    \\text{NPV}_i(r) = \\sum_{t=0}^{T_i} \\frac{c_{i,t}}{(1+r)^t}\n    $$\n2.  **求解器配置**：配置 `scipy.optimize.milp` 的输入：\n    -   **目标系数 (`c`)**：一个向量，其第 $i$-个元素是 $-\\text{NPV}_i(r)$。\n    -   **约束条件**：一个单一的线性不等式约束，$\\sum_{i=1}^n I_i x_i \\le B$。这由一个约束矩阵 $A = [[I_1, I_2, \\ldots, I_n]]$ 和一个上界 $B$ 来表示。\n    -   **变量边界**：每个变量 $x_i$ 的界限在 $0$ 和 $1$ 之间。\n    -   **整数性**：所有变量 $x_i$ 都被指定为整数。\n3.  **执行与结果解读**：求解器将找到最优向量 $x^*$，它最小化总 NPV 的负值。求解器的结果 `res.fun` 是最小目标值。因此，我们原始问题的最大总 NPV 是 `-res.fun`。\n4.  **最终格式化**：按要求将每个测试用例计算出的最优总 NPV 四舍五入到小数点后 $4$ 位。在所有项目 NPV 均为负值，或预算为零且投资成本为正的情况下，最优操作是不选择任何项目，从而得到总 NPV 为 $0$。\n\n这种系统性的方法确保了计算优化的正确性并遵循了标准实践。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import milp, LinearConstraint, Bounds\n\ndef solve():\n    \"\"\"\n    Solves a series of capital budgeting problems formulated as 0/1 knapsack problems.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"r\": 0.08,\n            \"B\": 100,\n            \"projects\": [\n                (-40, 20, 30),\n                (-50, 0, 60),\n                (-30, 15, 18),\n                (-20, 8, 15),\n            ]\n        },\n        {\n            \"r\": 0.05,\n            \"B\": 0,\n            \"projects\": [\n                (-10, 6, 6),\n                (-8, 4, 5),\n                (-5, 2, 3),\n            ]\n        },\n        {\n            \"r\": 0.05,\n            \"B\": 30,\n            \"projects\": [\n                (-10, 6, 6),\n                (-15, 9, 9),\n                (-5, 3, 3),\n            ]\n        },\n        {\n            \"r\": 0.07,\n            \"B\": 22,\n            \"projects\": [\n                (-10, 4, 4),\n                (-12, 5, 5),\n            ]\n        },\n    ]\n\n    results = []\n\n    for case in test_cases:\n        r = case[\"r\"]\n        B = case[\"B\"]\n        projects_cash_flows = case[\"projects\"]\n        \n        n_projects = len(projects_cash_flows)\n        \n        if n_projects == 0:\n            results.append(0.0)\n            continue\n\n        npvs = []\n        investments = []\n\n        for cash_flows in projects_cash_flows:\n            # Calculate initial investment\n            investment = -cash_flows[0]\n            investments.append(investment)\n            \n            # Calculate NPV\n            current_npv = 0.0\n            for t, cash_flow in enumerate(cash_flows):\n                current_npv += cash_flow / ((1 + r)**t)\n            npvs.append(current_npv)\n\n        # The scipy.optimize.milp solver minimizes an objective function.\n        # To maximize sum(npv * x), we minimize sum(-npv * x).\n        c = -np.array(npvs)\n\n        # The constraint is sum(investment * x) = B.\n        A = np.array(investments).reshape(1, n_projects)\n        # The constraint is one-sided: = B. We set lower bound to -inf.\n        b_l = -np.inf \n        b_u = B\n        constraints = LinearConstraint(A, b_l, b_u)\n\n        # The variables x_i are binary (0 or 1).\n        integrality = np.ones(n_projects)\n        bounds = Bounds(lb=0, ub=1)\n\n        # Solve the mixed-integer linear program\n        res = milp(c=c, constraints=constraints, integrality=integrality, bounds=bounds)\n\n        optimal_total_npv = 0.0\n        if res.success:\n            # The result from the solver is the minimum of the negative NPVs.\n            # To get the maximum NPV, we negate the result.\n            optimal_total_npv = -res.fun\n\n        # A result of -0.0 can occur, ensuring it is formatted as 0.0000\n        if abs(optimal_total_npv)  1e-9:\n             optimal_total_npv = 0.0\n             \n        results.append(f\"{optimal_total_npv:.4f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2413667"}]}