{"hands_on_practices": [{"introduction": "大O表示法不仅仅是一种理论分类，它更是一个用于做出具体性能预测的强大工具。第一个练习将 $O(N^3)$ 这种抽象的复杂度概念，置于一个具体的硬件问题背景下。通过计算在相同时间内处理更大数据集所需的CPU速度增量，你将学会如何将算法的扩展性直接转化为对实际资源的需求。[@problem_id:2380750]", "problem": "一位投资组合经理通过对一个 $N \\times N$ 的协方差矩阵求逆来构建一个包含 $N$ 个资产的均值-方差最优投资组合，该求逆过程使用的是一个直接线性代数程序，其最坏情况下的运行时间复杂度为 $O(N^{3})$。假设运行时间模型中的比例常数不依赖于 $N$，并且你唯一可以改变的硬件特性是中央处理器（CPU）的速度，该速度以每秒浮点数运算次数（FLOPS）来衡量。\n\n如果资产数量从 $N$ 翻倍到 $2N$，而你要求完成投资组合构建的挂钟时间保持不变，那么CPU速度必须增加的最小乘法因子是多少？\n\n答案规格：\n- 以一个实数形式提供你的答案，该实数代表速度必须增加的因子（无单位）。\n- 无需四舍五入；提供精确值。", "solution": "首先对问题陈述进行验证。\n\n第1步：提取已知条件\n- 构建一个包含 $N$ 个资产的投资组合。\n- 构建过程涉及对一个 $N \\times N$ 的协方差矩阵求逆。\n- 矩阵求逆程序的最坏情况运行时间复杂度为 $O(N^3)$。\n- 运行时间模型中的比例常数不依赖于 $N$。\n- 唯一可以改变的硬件特性是CPU速度，以FLOPS为单位。\n- 资产数量从 $N$ 翻倍到 $2N$。\n- 完成构建的挂钟时间必须保持不变。\n- 目标是找到CPU速度必须增加的最小乘法因子。\n\n第2步：使用提取的已知条件进行验证\n根据验证标准对问题进行评估。\n- **科学依据**：该问题基于计算复杂性和线性代数，它们是计算金融学的基础。使用 $O(N^3)$ 的复杂度进行矩阵求逆，对应于像高斯消元法这样的标准算法。这是一个用于分析算法性能的有效且典型的模型。\n- **适定性**：该问题是适定的。它提供了问题规模（$N$）、计算复杂度（$O(N^3)$）和执行时间之间的明确关系，并要求一个具体、可计算的因子。存在唯一解。\n- **客观性**：该问题的陈述是精确、量化和客观的。\n\n该问题没有表现出任何指定的缺陷。它在科学上是合理的、可形式化的、完整的且结构良好。\n\n第3步：结论与行动\n该问题有效。将推导解答。\n\n执行一项计算所需的挂钟时间 $T$ 是浮点运算的总次数 $C$ 除以处理器的速度 $S$（以每秒浮点运算次数FLOPS为单位）。这种关系由下式给出：\n$$T = \\frac{C}{S}$$\n\n问题陈述指出，运行时间与操作次数成正比，其复杂度为 $O(N^3)$，其中 $N$ 是资产数量。我们可以将操作次数 $C$ 表示为 $N$ 的函数：\n$$C(N) = k N^3$$\n其中 $k$ 是一个比例常数，根据题意，它不依赖于 $N$。\n\n让我们定义两种情景。\n情景1：初始情况。\n- 资产数量：$N_1 = N$\n- 操作次数：$C_1 = C(N_1) = k N_1^3 = k N^3$\n- CPU速度：$S_1$\n这种情景下的挂钟时间为：\n$$T_1 = \\frac{C_1}{S_1} = \\frac{k N^3}{S_1}$$\n\n情景2：资产数量增加的情况。\n- 资产数量：$N_2 = 2N$\n- 操作次数：$C_2 = C(N_2) = k (2N)^3 = k (8 N^3) = 8 k N^3$\n- CPU速度：$S_2$\n这种情景下的挂钟时间为：\n$$T_2 = \\frac{C_2}{S_2} = \\frac{8 k N^3}{S_2}$$\n\n问题要求两种情景下的挂钟时间保持不变，即 $T_1 = T_2$。\n$$\\frac{k N^3}{S_1} = \\frac{8 k N^3}{S_2}$$\n\n我们被要求找到CPU速度必须增加的乘法因子，即比率 $\\frac{S_2}{S_1}$。为了求得这个比率，我们可以重新整理方程。假设 $k > 0$ 且 $N > 0$，我们可以将等式两边同时除以非零量 $k N^3$：\n$$\\frac{1}{S_1} = \\frac{8}{S_2}$$\n\n现在，我们求解比率 $\\frac{S_2}{S_1}$：\n$$S_2 = 8 S_1$$\n$$\\frac{S_2}{S_1} = 8$$\n\n因此，CPU速度必须增加一个8倍的乘法因子。", "answer": "$$\\boxed{8}$$", "id": "2380750"}, {"introduction": "现实世界中的金融计算任务通常是多阶段的工作流，而不是单一的算法。本练习模拟了这样一个场景：首先在各部门层面计算风险指标，然后进行汇总。你将练习如何组合分析顺序执行和重复执行过程的复杂度，这是识别复杂系统中计算开销最大部分（即“瓶颈”）的一项关键技能。[@problem_id:2380831]", "problem": "一家银行运营着 $D$ 个业务单元，每个单元持有一个包含 $N$ 个头寸的投资组合。为了进行监管报告，该银行会为每个单元计算部门风险指标，然后将这些部门指标汇总成一个公司级的总数。假设存在以下基于基本算法操作的成本模型：\n\n- 对于一个给定的部门，其本地风险计算会扫描所有无序头寸对以评估相互作用，然后执行常数次的额外线性时间遍数进行缩放和归一化。因此，一个部门的最坏情况操作计数上界为 $a N^{2} + b N + c$，其中 $a$、$b$ 和 $c$ 为正常数，所以其复杂度为 $\\mathcal{O}(N^{2})$。\n\n- 在所有 $D$ 个部门的指标计算完毕后，企业级聚合器通过读取每个部门的数值一次，应用一次常数时间转换，然后求和的方式，将它们以固定的权重进行线性组合。聚合成本的上界为 $k D$，其中 $k$ 为正常数，因此其复杂度为 $\\mathcal{O}(D)$。\n\n假设所有部门在单个计算线程上顺序处理，部门之间不存在记忆化或计算复用，且 $N \\ge 1$，$D \\ge 1$。请仅使用渐进上界（大O）的基本定义以及顺序组合成本相加的原则，推导出生成公司级风险总数的总体时间复杂度，表示为关于 $N$ 和 $D$ 的单个简化 $\\mathcal{O}(\\cdot)$ 表达式。你的最终答案必须是单个封闭形式的 $\\mathcal{O}(\\cdot)$ 表达式。无需四舍五入，也无需报告单位。", "solution": "首先将对问题陈述进行严格的验证过程。\n\n**步骤1：提取已知条件**\n- 业务单元数量：$D$\n- 每个单元的头寸数量：$N$\n- 单个部门风险计算的最坏情况操作计数的上界为 $a N^{2} + b N + c$。\n- 常数 $a$、$b$ 和 $c$ 为正。\n- 单个部门的复杂度为 $\\mathcal{O}(N^{2})$。\n- 企业级聚合的成本上界为 $k D$。\n- 常数 $k$ 为正。\n- 聚合的复杂度为 $\\mathcal{O}(D)$。\n- 处理模型：单线程顺序执行。\n- 部门间无记忆化或计算复用。\n- 约束条件：$N \\ge 1$ 和 $D \\ge 1$。\n- 目标：推导出关于 $N$ 和 $D$ 的、表示为单个简化的 $\\mathcal{O}(\\cdot)$ 表达式的总体时间复杂度。\n\n**步骤2：使用提取的已知条件进行验证**\n根据所需标准对问题进行评估。\n\n- **科学性**：该问题是计算复杂性理论（大O表示法）在金融风险计算的一个简化但合理的模型中的应用。用于成对相互作用和线性遍数的成本模型 $a N^{2} + b N + c$ 在算法分析中是标准的。它完全符合计算机科学的原理。\n- **良置性**：该问题是良置的。它提供了所有必要组成部分：子问题的成本函数、它们的组合方法（顺序相加）以及变量的约束条件。可以推导出唯一且有意义的解。\n- **客观性**：问题以精确、客观和定量的术语陈述。诸如“无序对”、“线性时间遍数”和“在单个计算线程上顺序处理”之类的术语是明确无歧义的。\n\n**步骤3：结论与行动**\n该问题是**有效的**。这是一个直接、定义明确的算法分析练习。我现在开始求解。\n\n设 $T_{dept}(N)$ 表示计算一个含有 $N$ 个头寸的单个部门的风险指标所需的时间。根据问题陈述，其上界为一个关于 $N$ 的多项式，即：\n$$T_{dept}(N) \\le a N^{2} + b N + c$$\n其中 $a > 0$，$b > 0$ 和 $c > 0$ 是常数。这对应于单个部门的时间复杂度为 $\\mathcal{O}(N^{2})$。\n\n银行有 $D$ 个这样的部门，它们被顺序处理。顺序组合原则规定，一个操作序列的总时间是每个独立操作时间的总和。由于部门之间没有计算复用，处理所有 $D$ 个部门所需的总时间，我们称之为 $T_{all\\_depts}(N, D)$，是 $D$ 个相同计算的成本之和。\n$$T_{all\\_depts}(N, D) = \\sum_{i=1}^{D} T_{dept}(N) = D \\cdot T_{dept}(N)$$\n因此，此计算阶段的上界为：\n$$D \\cdot (a N^{2} + b N + c)$$\n\n在部门计算之后，执行企业级聚合步骤。设此聚合的时间为 $T_{agg}(D)$。问题陈述其上界为一个关于 $D$ 的线性函数：\n$$T_{agg}(D) \\le k D$$\n其中 $k > 0$ 是一个常数。这对应于时间复杂度为 $\\mathcal{O}(D)$。\n\n整个过程包括所有部门的计算，然后是最终的聚合。再次应用顺序组合原则，公司级风险计算的总时间 $T_{total}(N, D)$ 是这两个阶段时间之和。总时间的上界为：\n$$T_{total}(N, D) \\le T_{all\\_depts}(N, D) + T_{agg}(D)$$\n$$T_{total}(N, D) \\le D(a N^{2} + b N + c) + k D$$\n展开此表达式可得：\n$$T_{total}(N, D) \\le a D N^{2} + b D N + c D + k D$$\n$$T_{total}(N, D) \\le a D N^{2} + b D N + (c+k)D$$\n\n为了确定总体渐进时间复杂度，我们必须在此多项式表达式中为大的 $N$ 和 $D$ 值确定主导项。这些项是 $a D N^{2}$、$b D N$ 和 $(c+k)D$。根据大O表示法的定义，我们需要找到常数 $C > 0$，$N_{0} \\ge 1$ 和 $D_{0} \\ge 1$，使得对于所有 $N \\ge N_{0}$ 和 $D \\ge D_{0}$，以下不等式成立：\n$$a D N^{2} + b D N + (c+k)D \\le C \\cdot g(N, D)$$\n其中 $g(N,D)$ 是表征增长率的最简函数。\n\n让我们选择 $g(N, D) = D N^{2}$。我们必须证明 $a D N^{2} + b D N + (c+k)D \\in \\mathcal{O}(D N^{2})$。\n在给定的问题约束下，$N \\ge 1$ 和 $D \\ge 1$。\n对于 $N \\ge 1$，我们有 $N \\le N^{2}$，因此 $b D N \\le b D N^{2}$。\n类似地，对于 $N \\ge 1$，我们有 $1 \\le N^{2}$，这意味着 $D \\le D N^{2}$，所以 $(c+k)D \\le (c+k)D N^{2}$。\n\n将这些不等式代回总时间的表达式中：\n$$a D N^{2} + b D N + (c+k)D \\le a D N^{2} + b D N^{2} + (c+k)D N^{2}$$\n$$a D N^{2} + b D N + (c+k)D \\le (a + b + c + k) D N^{2}$$\n设 $C = a + b + c + k$。由于 $a、b、c、k$ 都是正常数，所以 $C$ 也是一个正常数。该不等式对所有 $N \\ge 1$ 和 $D \\ge 1$ 均成立。\n因此，根据大O表示法的形式化定义，总时间复杂度的上界为 $C \\cdot D N^{2}$。\n\n总体时间复杂度为 $\\mathcal{O}(D N^{2})$。", "answer": "$$\\boxed{\\mathcal{O}(D N^{2})}$$", "id": "2380831"}, {"introduction": "高效的算法设计需要在多种约束之间取得平衡，其中内存使用（空间复杂度）与处理时间（时间复杂度）同等重要。这个问题探讨了一个经典权衡：是使用简单的、但内存密集的数据结构（密集矩阵），还是使用更复杂但内存效率高的格式（稀疏矩阵）。通过计算数据稀疏度的盈亏平衡点，你将深入理解数据结构的选择如何直接影响系统资源的消耗与可行性。[@problem_id:2380822]", "problem": "考虑一个由 $N = 5000$ 支股票构成的宇宙的样本协方差矩阵。该矩阵是实对称的。有两种存储方案可选，每种方案都利用对称性，只存储包括对角线在内的上三角部分。\n\n密集存储：\n- 将每个上三角元素（包括对角线）存储为 $64$ 位浮点数，每个存储的数字使用 $8$ 字节。\n\n稀疏存储：\n- 对上三角部分（包括对角线）使用压缩稀疏行（CSR）格式。对于每个存储的非零元素，使用 $8$ 字节存储其值，并使用一个 $32$ 位整数（$4$ 字节）存储其列索引。此外，还需存储一个长度为 $N+1$ 的行指针数组，其中每个条目是一个 $32$ 位整数（$4$ 字节）。\n\n设 $k$ 表示完整的 $N \\times N$ 协方差矩阵中每行的平均非零元素数，其中每个资产的对角线方差计为一个非零元素，并假设对称性，即非对角线非零元素是镜像的。假设两种表示法都只存储上三角元素（包括对角线），并且 $32$ 位索引足够使用。\n\n定义 $k^{\\ast}$ 为稀疏表示法所需的总字节数与密集表示法所需的总字节数相等时的 $k$ 值。确定当 $N=5000$ 时 $k^{\\ast}$ 的值。将你的答案四舍五入到四位有效数字。将答案表示为一个不带单位的纯数字。", "solution": "在尝试任何解答之前，需对所述问题进行验证。\n\n步骤1：提取已知条件。\n- 资产（股票）数量为 $N = 5000$。\n- 协方差矩阵是实对称的，大小为 $N \\times N$。\n- 存储方案利用对称性，只存储包括对角线在内的上三角部分。\n- 密集存储：每个元素是一个 $64$ 位浮点数，需要 $8$ 字节。\n- 稀疏存储（压缩稀疏行，CSR）：\n  - 对于每个存储的非零元素：其值需要 $8$ 字节，其列索引需要一个 $32$ 位整数（$4$ 字节）。\n  - 此外还存储一个长度为 $N+1$ 的行指针数组，其中每个条目是一个 $32$ 位整数（$4$ 字节）。\n- $k$ 定义为完整的 $N \\times N$ 矩阵中每行的平均非零元素数。\n- 对角线方差被计为非零。\n- $k^{\\ast}$ 是稀疏方案的总存储成本（以字节为单位）与密集方案相等时的特定 $k$ 值。\n- 任务是确定当 $N=5000$ 时 $k^{\\ast}$ 的值，并四舍五入到四位有效数字。\n\n步骤2：使用提取的已知条件进行验证。\n该问题具有科学依据，涉及矩阵存储的标准方法（密集与稀疏格式如CSR），这些方法在计算线性代数及其应用（包括计算金融）中是基础性的。该问题是适定的，提供了足够的信息来构建一个可解的代数方程。语言客观、精确。所有术语对于该领域的专业人士都有充分的定义。所提供的值对于大规模金融应用是现实的。“$32$-位索引足够”的条件与 $N=5000$ 一致，因为 $5000 < 2^{31}-1$。问题陈述没有违反任何基本原则，不基于错误的前提，不是比喻性的，是自洽的，并且是科学上可验证的。\n\n步骤3：结论与行动。\n该问题被认定为有效。现在将推导一个正式的解法。\n\n首先，我们确定密集存储表示法所需的总存储字节数，记为 $B_{\\text{dense}}$。一个 $N \\times N$ 矩阵的上三角部分（包括主对角线）的元素数量由总和 $1 + 2 + \\dots + N = \\frac{N(N+1)}{2}$ 给出。这些元素中的每一个都存储为 $8$ 字节的浮点数。因此，总存储成本为：\n$$B_{\\text{dense}} = 8 \\times \\frac{N(N+1)}{2} = 4N(N+1)$$\n\n接下来，我们确定稀疏CSR表示法所需的总存储字节数，$B_{\\text{sparse}}$。该成本取决于被存储的非零元素的数量，我们必须从参数 $k$ 推导出这个数量。参数 $k$ 代表完整的、对称的 $N \\times N$ 矩阵中每行的平均非零元素数。因此，完整矩阵中的非零元素总数为 $NNZ_{\\text{full}} = Nk$。\n这些非零元素由 $N$ 个对角线元素（假设为非零）和 $Nk - N$ 个非对角线元素组成。由于矩阵是对称的，非对角线非零元素成对存在。稀疏存储方案只考虑上三角部分（包括对角线）。这个上三角部分中的非零元素数量 $NNZ_{\\text{upper}}$ 是 $N$ 个对角线元素和一半非对角线元素的总和。\n$$NNZ_{\\text{upper}} = N + \\frac{Nk - N}{2} = \\frac{2N + Nk - N}{2} = \\frac{N(k+1)}{2}$$\n对于这 $NNZ_{\\text{upper}}$ 个元素中的每一个，我们存储它的值（$8$ 字节）和它的列索引（$4$ 字节），每个元素总共需要 $8+4=12$ 字节。这些元素的存储量为 $12 \\times NNZ_{\\text{upper}}$。\n此外，CSR格式需要一个长度为 $N+1$ 的行指针数组，其中每个条目是一个 $4$ 字节的整数。这个数组的存储量是 $4(N+1)$ 字节。\n稀疏方案的总存储量是这两个部分的总和：\n$$B_{\\text{sparse}} = 12 \\times NNZ_{\\text{upper}} + 4(N+1) = 12 \\left(\\frac{N(k+1)}{2}\\right) + 4(N+1) = 6N(k+1) + 4(N+1)$$\n\n问题将 $k^{\\ast}$ 定义为存储成本相等时的 $k$ 值：$B_{\\text{dense}} = B_{\\text{sparse}}$。我们使用 $k^{\\ast}$ 建立方程：\n$$4N(N+1) = 6N(k^{\\ast}+1) + 4(N+1)$$\n我们现在必须解这个关于 $k^{\\ast}$ 的方程。\n$$4N(N+1) = 6Nk^{\\ast} + 6N + 4N + 4$$\n$$4N(N+1) = 6Nk^{\\ast} + 10N + 4$$\n重新排列以分离含有 $k^{\\ast}$ 的项：\n$$6Nk^{\\ast} = 4N(N+1) - (10N + 4) = 4N^2 + 4N - 10N - 4$$\n$$6Nk^{\\ast} = 4N^2 - 6N - 4$$\n两边除以 $6N$ 来求解 $k^{\\ast}$：\n$$k^{\\ast} = \\frac{4N^2 - 6N - 4}{6N} = \\frac{4N^2}{6N} - \\frac{6N}{6N} - \\frac{4}{6N}$$\n$$k^{\\ast} = \\frac{2}{3}N - 1 - \\frac{2}{3N}$$\n现在，我们代入给定值 $N=5000$：\n$$k^{\\ast} = \\frac{2}{3}(5000) - 1 - \\frac{2}{3(5000)} = \\frac{10000}{3} - 1 - \\frac{2}{15000}$$\n计算各项：\n$$\\frac{10000}{3} \\approx 3333.3333...$$\n$$\\frac{2}{15000} \\approx 0.000133...$$\n将这些值代回 $k^{\\ast}$ 的表达式中：\n$$k^{\\ast} \\approx 3333.333333 - 1 - 0.000133 = 3332.3332$$\n问题要求答案四舍五入到四位有效数字。值 $3332.3332$ 的前四位有效数字是 $3$、$3$、$3$ 和 $2$。第五位有效数字是 $3$。由于 $3 < 5$，我们向下取整（截断）。\n因此 $k^{\\ast}$ 的结果值为 $3332$。", "answer": "$$\\boxed{3332}$$", "id": "2380822"}]}