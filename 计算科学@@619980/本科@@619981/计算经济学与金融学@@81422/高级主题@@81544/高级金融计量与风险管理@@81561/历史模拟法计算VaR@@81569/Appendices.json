{"hands_on_practices": [{"introduction": "第一个练习是历史模拟法的直接应用。你将使用给定的投资组合历史回报率数据，计算在险价值（$VaR$）和预期差（$ES$），从而巩固对这两种关键风险度量指标及其关系的理解。这个练习是后续所有更复杂风险建模任务的基石。[@problem_id:2400167]", "problem": "现给定三个新兴市场股票指数（标记为 EM1、EM2 和 EM3）的历史日简单收益率。假设资产 $i$ 在第 $t$ 天的收益率为 $r_{i,t}$，以小数形式表示（例如，$0.01$ 表示每日收益率为 $0.01$，而非百分比）。考虑一个只做多头的静态投资组合，其权重为 $w = (w_1,w_2,w_3)$，其中 $w_1 + w_2 + w_3 = 1$ 且每个 $w_i \\ge 0$。该投资组合在第 $t$ 天的日收益率为 $r_{p,t} = \\sum_{i=1}^{3} w_i r_{i,t}$，投资组合日损失为 $L_t = -r_{p,t}$。对于给定的置信水平 $\\alpha \\in (0,1)$ 和一个包含 $n$ 个损失的样本 $\\{L_t\\}_{t=1}^n$，将置信度为 $\\alpha$ 的历史模拟法 (HS) 风险价值 (VaR) 定义为顺序统计量分位数 $VaR_{\\alpha} = L_{(k)}$，其中 $L_{(1)} \\le L_{(2)} \\le \\dots \\le L_{(n)}$ 是按非递减顺序排序的损失，且 $k = \\lceil \\alpha n \\rceil$。将置信度为 $\\alpha$ 的历史模拟法 (HS) 期望亏损 (ES) 定义为处于或超过 VaR 阈值的尾部损失的算术平均值，即 $ES_{\\alpha} = \\frac{1}{n - k + 1} \\sum_{j=k}^{n} L_{(j)}$。所有结果必须以小数表示，并四舍五入到六位小数。\n\n数据：以下数组为每个资产提供了连续 $30$ 天的日收益率，其中第 $1$ 天为最早，第 $30$ 天为最近。所有收益率均为以小数表示的日简单收益率。\n- EM1 收益率：$[0.012, -0.007, 0.004, 0.009, -0.013, 0.006, 0.011, -0.008, 0.003, 0.010, -0.022, 0.015, 0.005, -0.004, 0.002, 0.018, -0.009, 0.007, 0.006, -0.003, 0.014, -0.017, 0.008, 0.001, -0.006, 0.009, -0.012, 0.004, 0.013, -0.025]$。\n- EM2 收益率：$[0.010, 0.005, -0.006, 0.012, -0.010, 0.007, -0.004, 0.009, -0.003, 0.011, -0.018, 0.013, 0.006, -0.005, 0.001, 0.016, -0.011, 0.008, 0.004, -0.002, 0.012, -0.014, 0.009, 0.002, -0.007, 0.010, -0.009, 0.003, 0.012, -0.020]$。\n- EM3 收益率：$[0.008, -0.009, 0.007, 0.011, -0.015, 0.005, 0.010, -0.006, 0.002, 0.009, -0.020, 0.012, 0.004, -0.003, 0.003, 0.015, -0.008, 0.006, 0.005, -0.001, 0.013, -0.016, 0.007, 0.000, -0.005, 0.008, -0.010, 0.002, 0.011, -0.022]$。\n\n通过从每个资产的收益率数组中选取最后 $m$ 个元素（按天对齐），使用最近 $m$ 天的数据来构建投资组合收益率和损失的样本。置信水平固定为 $\\alpha = 0.95$。\n\n测试套件：对于以下每个参数集，使用上述定义计算配对 $(VaR_{0.95}, ES_{0.95})$，其中结果为四舍五入到六位小数的小数。\n1. 权重 $w = (0.4, 0.35, 0.25)$，窗口长度 $m = 30$。\n2. 权重 $w = (0.7, 0.2, 0.1)$，窗口长度 $m = 30$。\n3. 权重 $w = \\left(\\frac{1}{3}, \\frac{1}{3}, \\frac{1}{3}\\right)$，窗口长度 $m = 10$。\n4. 权重 $w = (0.5, 0.3, 0.2)$，窗口长度 $m = 5$。\n\n最终输出格式：您的程序应生成单行输出，其中包含测试套件的结果，格式为一个配对列表，中间没有空格。每个配对是相应测试用例的两个浮点数 $[VaR_{0.95},ES_{0.95}]$，每个浮点数都四舍五入到六位小数。例如，格式必须类似于 $[[v_1,e_1],[v_2,e_2],[v_3,e_3],[v_4,e_4]]$，其中每个 $v_j$ 和 $e_j$ 都是小数，而不是百分比。", "solution": "该问题陈述已经过严格验证，被确定为自洽、科学上合理且适定的。它为计算历史模拟法风险价值（VaR）和期望亏损（ES）提供了清晰明确的定义和所有必要的数据，这些都是计算金融中的基本概念。因此，该问题被视为有效。\n\n核心任务是使用历史模拟法，为四个不同的参数集计算一个包含三种资产的投资组合的 VaR 和 ES。该方法依赖于使用资产收益率的历史窗口来构建一个假设的投资组合损失分布，并从中推导出风险度量。\n\n设历史观测数量（窗口长度）为 $m$。因此，我们分析的样本大小为 $n=m$。所选窗口内三种资产的日收益率由向量 $\\mathbf{r}_1, \\mathbf{r}_2, \\mathbf{r}_3$ 表示，每个向量的长度为 $m$。对于窗口中的每一天 $t$，其中 $t \\in \\{1, \\dots, m\\}$，投资组合的简单收益率 $r_{p,t}$ 计算为单个资产收益率的加权平均值：\n$$r_{p,t} = \\sum_{i=1}^{3} w_i r_{i,t} = \\mathbf{w}^T \\mathbf{r}_t$$\n其中 $\\mathbf{w} = (w_1, w_2, w_3)^T$ 是投资组合权重向量，$\\mathbf{r}_t = (r_{1,t}, r_{2,t}, r_{3,t})^T$ 是第 $t$ 天的资产收益率向量。\n\n第 $t$ 天对应的投资组合损失定义为投资组合收益率的负数：\n$$L_t = -r_{p,t}$$\n这个过程产生了一个包含 $m$ 个历史投资组合损失的样本 $\\{L_t\\}_{t=1}^m$。为计算风险度量，将这些损失按非递减顺序排序以获得顺序统计量：\n$$L_{(1)} \\le L_{(2)} \\le \\dots \\le L_{(m)}$$\n对于给定的置信水平 $\\alpha$，问题将 VaR 定义为第 $k$ 个顺序统计量，其中索引 $k$ 由下式给出：\n$$k = \\lceil \\alpha m \\rceil$$\n那么，1日 $\\alpha$-VaR 为：\n$$VaR_{\\alpha} = L_{(k)}$$\n期望亏损 (ES) 度量在损失超过 VaR 水平条件下的期望损失，其定义为从第 $k$ 个位置到最大损失的所有损失的算术平均值：\n$$ES_{\\alpha} = \\frac{1}{m - k + 1} \\sum_{j=k}^{m} L_{(j)}$$\n我们将此方法应用于所提供的四个测试用例，使用固定的置信水平 $\\alpha = 0.95$。\n\n用例 1：$w = (0.4, 0.35, 0.25)$ 且 $m = 30$。\n样本大小为 $n = 30$。我们使用所有 $30$ 个数据点。\nVaR 索引为 $k = \\lceil 0.95 \\times 30 \\rceil = \\lceil 28.5 \\rceil = 29$。\n首先，我们计算 30 个每日投资组合收益率 $r_{p,t}$ 及相应的损失 $L_t = -r_{p,t}$。将损失排序后，我们找到第 29 大和第 30 大的损失。\n得到排序后的损失向量 $L_{sorted}$。\n$VaR_{0.95} = L_{(29)}$。\n$ES_{0.95} = \\frac{1}{30 - 29 + 1} (L_{(29)} + L_{(30)}) = \\frac{L_{(29)} + L_{(30)}}{2}$。\n计算得出：\n$L_{(29)} = 0.01940$\n$L_{(30)} = 0.02265$\n$VaR_{0.95} = 0.01940$。\n$ES_{0.95} = \\frac{0.01940 + 0.02265}{2} = 0.021025$。\n四舍五入到六位小数，我们得到 $(VaR_{0.95}, ES_{0.95}) = (0.019400, 0.021025)$。\n\n用例 2：$w = (0.7, 0.2, 0.1)$ 且 $m = 30$。\n样本大小为 $n = 30$。\nVaR 索引同样为 $k = \\lceil 0.95 \\times 30 \\rceil = 29$。\n我们根据不同的权重计算新的投资组合损失并进行排序。\n$VaR_{0.95} = L_{(29)}$。\n$ES_{0.95} = \\frac{L_{(29)} + L_{(30)}}{2}$。\n计算得出：\n$L_{(29)} = 0.01920$\n$L_{(30)} = 0.02190$\n$VaR_{0.95} = 0.01920$。\n$ES_{0.95} = \\frac{0.01920 + 0.02190}{2} = 0.02055$。\n四舍五入到六位小数，我们得到 $(VaR_{0.95}, ES_{0.95}) = (0.019200, 0.020550)$。\n\n用例 3：$w = (\\frac{1}{3}, \\frac{1}{3}, \\frac{1}{3})$ 且 $m = 10$。\n样本大小为 $n = 10$。我们使用最近的 10 个数据点（第 21 天到第 30 天）。\nVaR 索引为 $k = \\lceil 0.95 \\times 10 \\rceil = \\lceil 9.5 \\rceil = 10$。\n我们为等权重投资组合在过去 10 天的损失进行计算并排序。\n$VaR_{0.95} = L_{(10)}$。\nES 是从第 10 个位置到第 10 个位置的损失的平均值：\n$ES_{0.95} = \\frac{1}{10 - 10 + 1} \\sum_{j=10}^{10} L_{(j)} = L_{(10)}$。\n因此，在这种情况下，$VaR_{0.95} = ES_{0.95}$。\n最大损失对应于第 30 天，即 $L_{30} = -(\\frac{-0.025 - 0.020 - 0.022}{3}) = \\frac{0.067}{3} \\approx 0.022333...$\n排序后的损失表明这确实是最大的损失。\n$L_{(10)} = 0.022333...$\n四舍五入到六位小数，我们得到 $(VaR_{0.95}, ES_{0.95}) = (0.022333, 0.022333)$。\n\n用例 4：$w = (0.5, 0.3, 0.2)$ 且 $m = 5$。\n样本大小为 $n = 5$。我们使用最近的 5 个数据点（第 26 天到第 30 天）。\nVaR 索引为 $k = \\lceil 0.95 \\times 5 \\rceil = \\lceil 4.75 \\rceil = 5$。\n与用例 3 类似，我们有 $VaR_{0.95} = L_{(5)}$ 和 $ES_{0.95} = L_{(5)}$。\n第 30 天的投资组合收益率为 $r_{p,30} = 0.5(-0.025) + 0.3(-0.020) + 0.2(-0.022) = -0.0125 - 0.0060 - 0.0044 = -0.0229$。\n损失为 $L_{30} = 0.0229$。\n对计算出的 5 个损失进行排序，结果显示 $L_{30}$ 是最大的损失。\n$L_{(5)} = 0.0229$。\n四舍五入到六位小数，我们得到 $(VaR_{0.95}, ES_{0.95}) = (0.022900, 0.022900)$。\n\n最终结果由这些单独的计算汇总而成。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the historical simulation VaR and ES problem for the given test suite.\n    \"\"\"\n    \n    # Data as specified in the problem statement\n    em1_returns = np.array([\n        0.012, -0.007, 0.004, 0.009, -0.013, 0.006, 0.011, -0.008, 0.003, 0.010,\n        -0.022, 0.015, 0.005, -0.004, 0.002, 0.018, -0.009, 0.007, 0.006, -0.003,\n        0.014, -0.017, 0.008, 0.001, -0.006, 0.009, -0.012, 0.004, 0.013, -0.025\n    ])\n    em2_returns = np.array([\n        0.010, 0.005, -0.006, 0.012, -0.010, 0.007, -0.004, 0.009, -0.003, 0.011,\n        -0.018, 0.013, 0.006, -0.005, 0.001, 0.016, -0.011, 0.008, 0.004, -0.002,\n        0.012, -0.014, 0.009, 0.002, -0.007, 0.010, -0.009, 0.003, 0.012, -0.020\n    ])\n    em3_returns = np.array([\n        0.008, -0.009, 0.007, 0.011, -0.015, 0.005, 0.010, -0.006, 0.002, 0.009,\n        -0.020, 0.012, 0.004, -0.003, 0.003, 0.015, -0.008, 0.006, 0.005, -0.001,\n        0.013, -0.016, 0.007, 0.000, -0.005, 0.008, -0.010, 0.002, 0.011, -0.022\n    ])\n\n    # Stack returns for easier matrix operations\n    all_returns = np.vstack([em1_returns, em2_returns, em3_returns])\n\n    # Test suite parameters\n    test_cases = [\n        {'w': (0.4, 0.35, 0.25), 'm': 30},\n        {'w': (0.7, 0.2, 0.1), 'm': 30},\n        {'w': (1/3, 1/3, 1/3), 'm': 10},\n        {'w': (0.5, 0.3, 0.2), 'm': 5}\n    ]\n\n    # Confidence level alpha\n    alpha = 0.95\n    \n    results = []\n    \n    for case in test_cases:\n        weights = np.array(case['w'])\n        m = case['m']\n        \n        # Use the most recent m days by slicing the last m columns\n        # The data is ordered chronologically, so the last m are the most recent.\n        if m > 0:\n            historical_window_returns = all_returns[:, -m:]\n        else: # Handle edge case of m=0\n             historical_window_returns = np.empty((3, 0))\n\n        # Calculate portfolio returns\n        # weights shape: (3,), historical_window_returns shape: (3, m)\n        # portfolio_returns shape: (m,)\n        portfolio_returns = weights @ historical_window_returns\n        \n        # Calculate portfolio losses\n        portfolio_losses = -portfolio_returns\n        \n        # Sort losses in non-decreasing order\n        sorted_losses = np.sort(portfolio_losses)\n        \n        n = m\n        if n == 0:\n            results.append([0.0, 0.0]) # Or handle as error/NaN\n            continue\n\n        # Calculate index k for VaR\n        # Note: k is 1-based index from the problem definition\n        k = int(np.ceil(alpha * n))\n        \n        # Calculate VaR. Index is k-1 for 0-indexed array.\n        var_alpha = sorted_losses[k - 1]\n        \n        # Calculate Expected Shortfall\n        # This is the mean of the tail losses, from index k-1 to the end.\n        es_alpha = np.mean(sorted_losses[k - 1:])\n        \n        # Round results to six decimal places\n        var_rounded = np.round(var_alpha, 6)\n        es_rounded = np.round(es_alpha, 6)\n        \n        results.append([var_rounded, es_rounded])\n\n    # Format the final output string as specified\n    # The str() of a list automatically includes brackets and a comma.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2400167"}, {"introduction": "现实世界的金融数据很少是“干净”的，常常包含由股票分割等公司行为产生的伪影。本练习要求你在应用历史模拟法之前，正确调整历史价格数据，这对任何风险分析师来说都是一项至关重要的技能。准确处理这类事件是避免风险估算失真的关键。[@problem_id:2400150]", "problem": "给定一个由少量股票组成的投资组合，这些股票在长度为$T$天的有限回溯窗口内的每日收盘价是已知的。其中一只股票在回溯期内的一个已知生效日期进行了$2$比$1$的股票拆分，这意味着在拆分日期$t_s$，记录的收盘价机械地减半，而持股数量翻倍。为了衡量风险，您必须使用以下基本定义和要求，为指定的投资组合计算置信水平为$0.95$的单日历史模拟法（HS）风险价值（VaR）。\n\n定义和要求：\n- 假设有$N$个资产。令$P^{(i)}_t$表示资产$i$在日期$t$的记录（未调整）收盘价，其中$t \\in \\{0,1,\\dots,T\\}$且$i \\in \\{1,\\dots,N\\}$。令$h_i$表示当前（日期$T$）持有的资产$i$的股数。\n- 资产$i$在日期$t_s$发生的$2$比$1$拆分定义如下：在$t_s$记录的价格反映了拆分，而在$t < t_s$的记录价格则没有。为了构建能够排除拆分机械效应、具有经济可比性的价格相对数，定义调整后价格$\\tilde{P}^{(i)}_t$为\n$$\n\\tilde{P}^{(i)}_t \\;=\\;\n\\begin{cases}\nP^{(i)}_t / s, & \\text{若 } t < t_s \\text{ 且资产 } i \\text{ 在 } t_s \\text{ 以因子 } s \\text{ 进行拆分}, \\\\\nP^{(i)}_t, & \\text{其他情况},\n\\end{cases}\n$$\n对于$2$比$1$的拆分，$s = 2$。如果一个资产没有拆分，则对于所有$t$，$\\tilde{P}^{(i)}_t = P^{(i)}_t$。\n- 对于每个日期$t \\in \\{1,\\dots,T\\}$，使用调整后价格定义资产$i$的第$t$天简单收益率：\n$$\nR^{(i)}_t \\;=\\; \\frac{\\tilde{P}^{(i)}_t}{\\tilde{P}^{(i)}_{t-1}} - 1.\n$$\n- 令日期$T$的当前调整后价格向量为$\\tilde{\\mathbf{P}}_T = (\\tilde{P}^{(1)}_T,\\dots,\\tilde{P}^{(N)}_T)$。在历史情景$t \\in \\{1,\\dots,T\\}$下，投资组合的单日盈亏（P&L）为\n$$\n\\Pi_t \\;=\\; \\sum_{i=1}^N h_i \\, \\tilde{P}^{(i)}_T \\, R^{(i)}_t.\n$$\n- 令$\\{\\Pi_t\\}_{t=1}^T$为单日盈亏情景的经验样本。置信水平$\\alpha = 0.95$下的单日HS VaR是正数\n$$\n\\mathrm{VaR}_{\\alpha} \\;=\\; - Q_p(\\{\\Pi_t\\}),\n$$\n其中$p = 1 - \\alpha = 0.05$，$Q_p$表示左连续经验分位数，定义为\n$$\nQ_p(\\{\\Pi_t\\}) \\;=\\; \\Pi_{(k)}, \\quad \\text{其中 } k = \\left\\lceil p \\, T \\right\\rceil,\n$$\n且$\\Pi_{(1)} \\le \\Pi_{(2)} \\le \\dots \\le \\Pi_{(T)}$是样本的顺序统计量。如果$\\left\\lceil p T \\right\\rceil < 1$，则取$k = 1$。\n- 所有VaR值必须以与输入价格相同的货币单位（例如，美元）表示，四舍五入到$2$位小数，并表示为小数（不带百分号）。\n\n测试套件：\n对于下方的每个测试用例，根据上述定义计算置信水平$\\alpha = 0.95$的单日HS VaR。\n\n- 测试用例 $1$：\n  - 资产数量 $N = 2$，回溯长度 $T = 7$。\n  - 资产$1$在$t = 0,\\dots,7$的记录价格$P^{(1)}_t$：$[98.0,\\,101.0,\\,99.0,\\,100.0,\\,50.0,\\,51.0,\\,50.5,\\,52.0]$。\n  - 资产$2$在$t = 0,\\dots,7$的记录价格$P^{(2)}_t$：$[50.0,\\,49.5,\\,50.5,\\,51.0,\\,50.8,\\,51.4,\\,51.2,\\,52.0]$。\n  - 资产$1$在日期$t_s = 4$（即$t=3$和$t=4$之间）发生$2$比$1$的拆分，因此资产$1$的$s = 2$，资产$2$没有拆分。\n  - 持股：$h_1 = 200$，$h_2 = 100$。\n  - 输出：一个浮点数，即以货币单位表示并四舍五入到$2$位小数的VaR。\n\n- 测试用例 $2$：\n  - 资产数量 $N = 1$，回溯长度 $T = 4$。\n  - 资产$1$在$t = 0,\\dots,4$的记录价格$P^{(1)}_t$：$[120.0,\\,60.0,\\,61.2,\\,60.0,\\,62.4]$。\n  - 资产$1$在日期$t_s = 1$发生$2$比$1$的拆分，因此资产$1$的$s = 2$。\n  - 持股：$h_1 = 80$。\n  - 输出：一个浮点数，即以货币单位表示并四舍五入到$2$位小数的VaR。\n\n- 测试用例 $3$：\n  - 资产数量 $N = 3$，回溯长度 $T = 5$。\n  - 资产$1$在$t = 0,\\dots,5$的记录价格$P^{(1)}_t$：$[40.0,\\,41.2,\\,40.8,\\,41.0,\\,41.5,\\,41.0]$。\n  - 资产$2$在$t = 0,\\dots,5$的记录价格$P^{(2)}_t$：$[200.0,\\,198.0,\\,199.0,\\,201.0,\\,202.0,\\,200.0]$。\n  - 资产$3$在$t = 0,\\dots,5$的记录价格$P^{(3)}_t$：$[10.0,\\,10.1,\\,10.2,\\,10.2,\\,10.1,\\,10.2]$。\n  - 在本案例中，任何资产都没有拆分。\n  - 持股：$h_1 = 100$，$h_2 = 10$，$h_3 = 0$。\n  - 输出：一个浮点数，即以货币单位表示并四舍五入到$2$位小数的VaR。\n\n- 测试用例 $4$：\n  - 资产数量 $N = 2$，回溯长度 $T = 5$。\n  - 资产$1$在$t = 0,\\dots,5$的记录价格$P^{(1)}_t$：$[100.0,\\,102.0,\\,101.0,\\,103.0,\\,104.0,\\,52.0]$。\n  - 资产$2$在$t = 0,\\dots,5$的记录价格$P^{(2)}_t$：$[30.0,\\,30.3,\\,29.7,\\,30.0,\\,30.6,\\,30.9]$。\n  - 资产$1$在日期$t_s = 5$发生$2$比$1$的拆分，因此资产$1$的$s = 2$，资产$2$没有拆分。\n  - 持股：$h_1 = 150$，$h_2 = 200$。\n  - 输出：一个浮点数，即以货币单位表示并四舍五入到$2$位小数的VaR。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个方括号括起来的逗号分隔列表，结果顺序与测试用例$1$到$4$的顺序相同，例如$[x_1,x_2,x_3,x_4]$，其中每个$x_j$是所要求的、四舍五入到$2$位小数的VaR。", "solution": "经分析，提交的问题陈述被确定为**有效的**。它在科学上基于金融风险管理的既定原则，特别是用于计算风险价值（VaR）的历史模拟（HS）方法。该问题是适定的，提供了一套完整且一致的定义、数据和约束，可以得出一个唯一且可验证的解。所有术语都以数学精度进行定义，数值示例在物理和经济上都是合理的。\n\n解答过程通过实施规定的算法来完成，这是一种标准的行业方法。历史模拟法的核心原则是通过将当前投资组合置于一组历史市场价格变动中，来估计投资组合的潜在单日盈亏（P&L）分布。然后，VaR被确定为该模拟P&L分布的特定低端分位数，代表一个在很高的置信度下预计不会被超过的潜在损失。\n\n该方法的一个关键先决条件是创建具有经济意义的资产收益历史。诸如股票拆分之类的公司行为会导致价格水平的机械性变动，这些变动不反映资产基础经济价值的任何变化。为防止这些扭曲污染历史收益率数据，价格调整是必要的。\n\n问题为每个资产$i$定义了一个调整后价格序列$\\tilde{P}^{(i)}_t$。对于一个在日期$t_s$经历$s$比$1$股票拆分的资产，拆分前记录的历史价格$P^{(i)}_t$（其中$t < t_s$）将除以拆分因子$s$。对于$2$比$1$的拆分，$s=2$。在拆分日期及之后的价格不作调整。用数学术语表示：\n$$\n\\tilde{P}^{(i)}_t =\n\\begin{cases}\nP^{(i)}_t / s, & \\text{若 } t < t_s \\text{ 且资产 } i \\text{ 在 } t_s \\text{ 以因子 } s \\text{ 进行拆分}, \\\\\nP^{(i)}_t, & \\text{其他情况}。\n\\end{cases}\n$$\n对于没有拆分的资产，对所有$t$而言，$\\tilde{P}^{(i)}_t = P^{(i)}_t$。\n\n根据这个一致的、调整后的价格序列，计算每个资产$i$在回溯窗口$t \\in \\{1, \\dots, T\\}$内的历史简单收益率：\n$$\nR^{(i)}_t = \\frac{\\tilde{P}^{(i)}_t}{\\tilde{P}^{(i)}_{t-1}} - 1.\n$$\n这些收益率代表了价值的真实历史百分比变化。\n\n下一步是生成P&L情景。历史情景$t$的P&L是通过将历史收益率$R^{(i)}_t$应用于每个持仓的当前市值来计算的。资产$i$持仓的当前价值是$V_i = h_i \\, P^{(i)}_T$，其中$h_i$是股份数，$P^{(i)}_T$是最后记录的价格。请注意，根据定义，时间$T$的调整后价格$\\tilde{P}^{(i)}_T$始终等于记录价格$P^{(i)}_T$，因为$T \\not< t_s$。情景$t$的投资组合P&L是所有$N$个资产的P&L贡献之和：\n$$\n\\Pi_t = \\sum_{i=1}^N V_i \\, R^{(i)}_t = \\sum_{i=1}^N h_i \\, P^{(i)}_T \\, R^{(i)}_t.\n$$\n对此计算在回溯期内的每个日期$t \\in \\{1, \\dots, T\\}$执行，从而产生一个包含$T$个潜在P&L值的经验样本$\\{\\Pi_t\\}_{t=1}^T$。\n\n最后，从这个P&L分布中提取风险价值。问题将置信水平$\\alpha = 0.95$的单日HS VaR定义为P&L样本的$p$-分位数的负值，其中$p = 1 - \\alpha = 0.05$。分位数$Q_p(\\{\\Pi_t\\})$通过首先按升序对P&L样本排序以获得顺序统计量$\\Pi_{(1)} \\le \\Pi_{(2)} \\le \\dots \\le \\Pi_{(T)}$来找到。然后，分位数是此排序样本中的第$k$个元素：\n$$\nQ_p(\\{\\Pi_t\\}) = \\Pi_{(k)}, \\quad \\text{其中 } k = \\lceil p T \\rceil.\n$$\n问题规定，如果$\\lceil p T \\rceil < 1$，则应取$k=1$。然后，VaR作为代表损失的正值报告：\n$$\n\\mathrm{VaR}_{\\alpha} = -Q_p(\\{\\Pi_t\\}).\n$$\n以下是测试用例1的详细计算，它说明了此方法的应用。其余案例通过相同的逻辑解决。\n\n**测试用例1详细计算：**\n- **给定：** $N=2$，$T=7$，$\\alpha=0.95$，$p=0.05$。资产1在$t_s=4$时有$2$比$1$的拆分（$s=2$）。\n- **持股：** $h_1 = 200$, $h_2 = 100$。\n- **价格：**\n  - $P^{(1)} = [98.0, 101.0, 99.0, 100.0, 50.0, 51.0, 50.5, 52.0]$，对于$t=0, \\dots, 7$。\n  - $P^{(2)} = [50.0, 49.5, 50.5, 51.0, 50.8, 51.4, 51.2, 52.0]$，对于$t=0, \\dots, 7$。\n\n1.  **价格调整：** 将资产1在$t \\in \\{0, 1, 2, 3\\}$的价格除以$s=2$。\n    - $\\tilde{P}^{(1)} = [98/2, 101/2, 99/2, 100/2, 50.0, 51.0, 50.5, 52.0] = [49.0, 50.5, 49.5, 50.0, 50.0, 51.0, 50.5, 52.0]$。\n    - 资产2没有拆分：$\\tilde{P}^{(2)} = P^{(2)}$。\n\n2.  **收益率计算 ($t=1, \\dots, 7$)：**\n    - $R^{(1)} \\approx [0.03061, -0.01980, 0.01010, 0.00000, 0.02000, -0.00980, 0.02970]$。\n    - $R^{(2)} \\approx [-0.01000, 0.02020, 0.00990, -0.00392, 0.01181, -0.00389, 0.01563]$。\n\n3.  **P&L计算：**\n    - 当前价值：$V_1 = h_1 P^{(1)}_7 = 200 \\times 52.0 = 10400$。$V_2 = h_2 P^{(2)}_7 = 100 \\times 52.0 = 5200$。\n    - $\\Pi_t = 10400 \\cdot R^{(1)}_t + 5200 \\cdot R^{(2)}_t$。\n    - $\\{\\Pi_t\\}_{t=1}^7 \\approx [266.37, -100.89, 156.54, -20.39, 269.42, -122.19, 390.16]$。\n\n4.  **VaR计算：**\n    - 排序后的P&L：$\\{\\Pi_{(t)}\\}_{t=1}^7 \\approx [-122.19, -100.89, -20.39, 156.54, 266.37, 269.42, 390.16]$。\n    - 指数计算：$k = \\lceil pT \\rceil = \\lceil 0.05 \\times 7 \\rceil = \\lceil 0.35 \\rceil = 1$。\n    - 分位数：$Q_{0.05}(\\{\\Pi_t\\}) = \\Pi_{(1)} \\approx -122.19$。\n    - VaR：$\\mathrm{VaR}_{0.95} = - (-122.19) = 122.19$。四舍五入到2位小数后，VaR为$122.19$。\n\n其他测试用例的计算遵循相同的程序，得出最终的合并结果。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef calculate_var(prices_unadjusted, holdings, splits, T, alpha):\n    \"\"\"\n    Computes the one-day Historical Simulation VaR for a given portfolio.\n\n    Args:\n        prices_unadjusted (list of list of floats): A list where each element is a list of\n            unadjusted closing prices for an asset, from t=0 to T.\n        holdings (list of floats): Number of shares held for each asset.\n        splits (dict): A dictionary mapping asset index (0-based) to a tuple\n            (split_date, split_factor).\n        T (int): The lookback period in days for calculating returns.\n        alpha (float): The confidence level for VaR.\n\n    Returns:\n        float: The calculated VaR, rounded to 2 decimal places.\n    \"\"\"\n    N = len(holdings)\n    p = 1.0 - alpha\n\n    # Step 1: Adjust prices for stock splits\n    prices_adjusted = []\n    for i in range(N):\n        p_asset = np.array(prices_unadjusted[i], dtype=float)\n        if i in splits:\n            t_s, s = splits[i]\n            # Prices before the split date are adjusted.\n            # a_s is 1-based index in problem, convert to 0-based\n            if t_s > 0:\n                p_asset[:t_s] /= s\n        prices_adjusted.append(p_asset)\n\n    prices_adjusted = np.array(prices_adjusted)\n\n    # Step 2: Calculate historical simple returns\n    # prices_adjusted is N x (T+1). Returns will be N x T.\n    # returns[:, t] corresponds to R_{t+1}\n    returns = prices_adjusted[:, 1:] / prices_adjusted[:, :-1] - 1\n\n    # Step 3: Calculate portfolio P&L scenarios\n    # Get current prices (at time T)\n    current_prices = prices_adjusted[:, -1]\n    \n    # Calculate current values of holdings\n    current_values = np.array(holdings) * current_prices\n    \n    # Calculate P&L for each historical day t = 1..T\n    # The shape of returns.T is T x N. The shape of current_values is N.\n    # The dot product for each row of returns.T gives the P&L for that day.\n    pnl_scenarios = returns.T.dot(current_values)\n\n    # Step 4: Calculate VaR from the P&L distribution\n    # Sort P&L scenarios in ascending order\n    sorted_pnl = np.sort(pnl_scenarios)\n\n    # Calculate the index k for the quantile\n    # Per problem: k = ceil(p*T). If < 1, take k=1.\n    k = int(np.ceil(p * T))\n    if k  1:\n        k = 1\n    \n    # Get the quantile. In a 0-indexed array, this is element k-1.\n    quantile = sorted_pnl[k - 1]\n\n    # VaR is the negative of the quantile, representing a loss\n    var = -quantile\n    \n    return var\n\ndef solve():\n    \"\"\"\n    Defines and runs the test cases from the problem statement.\n    \"\"\"\n    test_cases = [\n        {\n            \"prices\": [\n                [98.0, 101.0, 99.0, 100.0, 50.0, 51.0, 50.5, 52.0],\n                [50.0, 49.5, 50.5, 51.0, 50.8, 51.4, 51.2, 52.0]\n            ],\n            \"holdings\": [200, 100],\n            \"splits\": {0: (4, 2)},  # Asset 1 (index 0) splits at t=4\n            \"T\": 7,\n            \"alpha\": 0.95\n        },\n        {\n            \"prices\": [\n                [120.0, 60.0, 61.2, 60.0, 62.4]\n            ],\n            \"holdings\": [80],\n            \"splits\": {0: (1, 2)},  # Asset 1 (index 0) splits at t=1\n            \"T\": 4,\n            \"alpha\": 0.95\n        },\n        {\n            \"prices\": [\n                [40.0, 41.2, 40.8, 41.0, 41.5, 41.0],\n                [200.0, 198.0, 199.0, 201.0, 202.0, 200.0],\n                [10.0, 10.1, 10.2, 10.2, 10.1, 10.2]\n            ],\n            \"holdings\": [100, 10, 0],\n            \"splits\": {}, # No splits\n            \"T\": 5,\n            \"alpha\": 0.95\n        },\n        {\n            \"prices\": [\n                [100.0, 102.0, 101.0, 103.0, 104.0, 52.0],\n                [30.0, 30.3, 29.7, 30.0, 30.6, 30.9]\n            ],\n            \"holdings\": [150, 200],\n            \"splits\": {0: (5, 2)},  # Asset 1 (index 0) splits at t=5\n            \"T\": 5,\n            \"alpha\": 0.95\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = calculate_var(\n            case[\"prices\"],\n            case[\"holdings\"],\n            case[\"splits\"],\n            case[\"T\"],\n            case[\"alpha\"]\n        )\n        results.append(result)\n\n    # Format output to ensure two decimal places are always shown\n    formatted_results = [f'{r:.2f}' for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2400150"}, {"introduction": "简单历史模拟法的一个关键弱点是它假设回报率是独立同分布的，这忽略了现实中普遍存在的波动率聚集现象。这个高级练习将介绍“过滤历史模拟法”（Filtered Historical Simulation, FHS），这是一种结合了GARCH模型和历史模拟的强大技术，以克服这一限制。通过实现FHS，你将学会如何创建能适应不断变化市场状况的、更灵敏、更准确的风险预测。[@problem_id:2400188]", "problem": "给定几个每日对数回报率的有限序列以及一个阶数为 $(1,1)$ 的广义自回归条件异方差（GARCH）模型的参数值。对于每个序列和参数集，请为一个当前价值等于一个货币单位的投资组合，计算在指定尾部概率下，未来一日的滤波历史模拟风险价值（VaR）。将每个 VaR 报告为以货币单位计的非负实数。\n\n在尾部概率为 $\\alpha$ 时，单位价值投资组合的滤波历史模拟 VaR 定义如下。设观测到的对数回报率为 $\\{r_0,\\dots,r_{T-1}\\}$，其中 $T \\geq 1$。设条件方差根据 GARCH$(1,1)$ 递归式演变\n$$\n\\sigma_{i+1}^2 \\;=\\; \\omega \\;+\\; \\alpha \\, r_i^2 \\;+\\; \\beta \\, \\sigma_i^2 \\quad \\text{对于 } i=0,1,\\dots,T-1,\n$$\n初始方差为 $\\sigma_0^2 = s_0$，其中 $\\omega \\ge 0$，$\\alpha \\ge 0$，$\\beta \\ge 0$，且 $\\alpha + \\beta  1$。通过以下方式定义滤波（标准化）回报率\n$$\nz_i \\;=\\; \\frac{r_i}{\\sigma_i} \\quad \\text{对于 } i=0,1,\\dots,T-1,\n$$\n其中 $\\sigma_i = \\sqrt{\\sigma_i^2}$。未来一步的条件标准差为 $\\sigma_T = \\sqrt{\\sigma_T^2}$，其中 $\\sigma_T^2$ 可通过上述递归式获得。构建第二天回报率的缩放情景集为\n$$\n\\{\\tilde{r}_i\\}_{i=0}^{T-1}, \\quad \\text{其中 } \\tilde{r}_i = \\sigma_T \\, z_i.\n$$\n令 $N = T$ 表示情景数量。将这些情景按非递减顺序排列，得到 $\\tilde{r}_{(1)} \\le \\tilde{r}_{(2)} \\le \\dots \\le \\tilde{r}_{(N)}$。根据最近秩规则定义经验下$\\alpha$分位数\n$$\nk \\;=\\; \\max\\{1, \\lceil \\alpha N \\rceil\\}, \\qquad q_\\alpha \\;=\\; \\tilde{r}_{(k)}.\n$$\n在尾部概率为 $\\alpha$ 时，单位价值投资组合的滤波历史模拟 VaR 为\n$$\nV_\\alpha \\;=\\; -\\, q_\\alpha.\n$$\n报告以货币单位计的 $V_\\alpha$，表示为一个四舍五入到六位小数的实数。\n\n使用以上定义为以下每个测试用例计算 $V_\\alpha$。所有对数回报率均为无量纲（每日对数回报率），所有 VaR 输出必须以每单位投资组合价值的货币单位表示，并四舍五入到六位小数。尾部概率必须以小数形式表示。\n\n测试套件：\n\n- 测试用例 A（一般情况）：\n  - 回报率 $\\{r_i\\}_{i=0}^{39}$：\n    $0.0042$, $-0.0061$, $0.0015$, $0.0023$, $-0.0038$, $0.0095$, $-0.0123$, $0.0071$, $-0.0022$, $0.0009$, $-0.0047$, $0.0033$, $0.0028$, $-0.0019$, $0.0056$, $-0.0082$, $0.0104$, $-0.0067$, $0.0011$, $-0.0026$, $0.0039$, $-0.0041$, $0.0062$, $-0.0008$, $0.0017$, $-0.0059$, $0.0044$, $-0.0031$, $0.0021$, $-0.0075$, $0.0089$, $-0.0064$, $0.0005$, $0.0012$, $-0.0029$, $0.0031$, $-0.0045$, $0.0026$, $-0.0014$, $0.0020$。\n  - 参数：$\\omega = 0.000001$，$\\alpha = 0.07$，$\\beta = 0.92$，$s_0 = 0.0001$。\n  - 尾部概率：$\\alpha = 0.05$。\n\n- 测试用例 B（小样本，最近秩边界）：\n  - 回报率 $\\{r_i\\}_{i=0}^{11}$：\n    $-0.0020$, $0.0015$, $-0.0010$, $0.0007$, $-0.0035$, $0.0021$, $-0.0009$, $0.0012$, $-0.0048$, $0.0004$, $0.0009$, $-0.0022$。\n  - 参数：$\\omega = 0.000002$，$\\alpha = 0.10$，$\\beta = 0.85$，$s_0 = 0.00008$。\n  - 尾部概率：$\\alpha = 0.10$。\n\n- 测试用例 C（高波动率聚集，极端尾部）：\n  - 回报率 $\\{r_i\\}_{i=0}^{29}$：\n    $0.0150$, $-0.0220$, $0.0080$, $-0.0120$, $0.0060$, $-0.0180$, $0.0110$, $-0.0090$, $0.0050$, $-0.0130$, $0.0170$, $-0.0210$, $0.0090$, $-0.0140$, $0.0070$, $-0.0190$, $0.0120$, $-0.0110$, $0.0060$, $-0.0160$, $0.0180$, $-0.0240$, $0.0100$, $-0.0200$, $0.0080$, $-0.0150$, $0.0070$, $-0.0170$, $0.0130$, $-0.0180$。\n  - 参数：$\\omega = 0.000005$，$\\alpha = 0.08$，$\\beta = 0.91$，$s_0 = 0.0002$。\n  - 尾部概率：$\\alpha = 0.01$。\n\n- 测试用例 D（低波动率，平滑动态）：\n  - 回报率 $\\{r_i\\}_{i=0}^{19}$：\n    $0.0004$, $-0.0006$, $0.0003$, $-0.0002$, $0.0005$, $-0.0004$, $0.0006$, $-0.0003$, $0.0002$, $-0.0005$, $0.0004$, $-0.0001$, $0.0003$, $-0.0002$, $0.0001$, $-0.0004$, $0.0005$, $-0.0002$, $0.0003$, $-0.0003$。\n  - 参数：$\\omega = 0.0000005$，$\\alpha = 0.05$，$\\beta = 0.90$，$s_0 = 0.00003$。\n  - 尾部概率：$\\alpha = 0.05$。\n\n您的程序必须按 A、B、C、D 的顺序为每个测试用例计算 $V_\\alpha$，并生成一行输出，其中包含用方括号括起来的逗号分隔列表形式的结果，例如 `[v_A,v_B,v_C,v_D]`。每个值都必须四舍五入到六位小数。", "solution": "该问题被确定为有效。它在科学上是合理的，问题提法是适定的，并提供了计算所要求数量的所有必要信息。任务是使用 GARCH($1$,$1$) 波动率模型，为几个对数回报率时间序列计算未来一日的滤波历史模拟风险价值（VaR）。\n\n该方法遵循问题陈述中提供的精确定义。设 T 个观测到的对数回报率为 $\\{r_i\\}_{i=0}^{T-1}$。条件方差 $\\sigma_i^2$ 使用 GARCH($1$,$1$) 过程进行建模。为避免与 GARCH 参数 $\\alpha$ 混淆，用于 VaR 计算的尾部概率将表示为 $\\alpha_{\\text{tail}}$。条件方差的递归以初始值 $\\sigma_0^2 = s_0$ 开始，并按以下方式进行：\n$$\n\\sigma_{i+1}^2 \\;=\\; \\omega \\;+\\; \\alpha \\, r_i^2 \\;+\\; \\beta \\, \\sigma_i^2 \\quad \\text{对于 } i=0,1,\\dots,T-1\n$$\n参数 $\\omega$、$\\alpha$ 和 $\\beta$ 是给定的常数，满足 $\\omega \\ge 0$、$\\alpha \\ge 0$、$\\beta \\ge 0$ 和 $\\alpha + \\beta  1$，这确保了方差的非负性和过程的平稳性。\n\n在每一步 i，通过将观测到的对数回报率 $r_i$ 除以条件标准差 $\\sigma_i = \\sqrt{\\sigma_i^2}$来计算标准化（或滤波）回报率 $z_i$：\n$$\nz_i \\;=\\; \\frac{r_i}{\\sigma_i}\n$$\n对从 i=0 到 i=T-1 的所有 T 个回报率重复此过程，得到一系列标准化回报率 $\\{z_i\\}_{i=0}^{T-1}$ 和未来一步的条件方差预测值 $\\sigma_T^2$。相应的标准差是 $\\sigma_T = \\sqrt{\\sigma_T^2}$。\n\n滤波历史模拟方法的核心是通过将当前的波动率预测与标准化回报率的历史分布相结合，来构建第二天回报率的一组情景。通过使用未来一步的波动率预测值 $\\sigma_T$ 重新缩放历史滤波回报率 $\\{z_i\\}$，生成情景 $\\{\\tilde{r}_i\\}_{i=0}^{T-1}$：\n$$\n\\tilde{r}_i = \\sigma_T \\, z_i\n$$\n这将为潜在的第二天回报率创建 N=T 个情景。\n\n为找到 VaR，将这 N 个情景按非递减顺序排序，形成有序集合 $\\{\\tilde{r}_{(1)}, \\tilde{r}_{(2)}, \\dots, \\tilde{r}_{(N)}\\}$。使用最近秩方法找到该经验分布的下 $\\alpha_{\\text{tail}}$ 分位数 $q_{\\alpha_{\\text{tail}}}$。秩指数 k 的计算方式如下：\n$$\nk \\;=\\; \\max\\{1, \\lceil \\alpha_{\\text{tail}} N \\rceil\\}\n$$\n然后分位数是排序后情景中的第 k 个元素：\n$$\nq_\\alpha \\;=\\; \\tilde{r}_{(k)}\n$$\n最后，对于价值为 1 货币单位的投资组合，在 $\\alpha_{\\text{tail}}$ 置信水平下的单日风险价值是该分位数的负值：\n$$\nV_{\\alpha_{\\text{tail}}} \\;=\\; -\\, q_\\alpha\n$$\n结果以货币单位报告，为一个非负数，四舍五入到六位小数。该程序按规定应用于每个测试用例。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy import ...\n\ndef solve():\n    \"\"\"\n    Computes the one-day-ahead filtered historical simulation VaR for multiple test cases.\n    \"\"\"\n\n    def calculate_fhs_var(returns, omega, alpha_garch, beta, s0, alpha_tail):\n        \"\"\"\n        Calculates the Filtered Historical Simulation VaR using a GARCH(1,1) model.\n\n        Args:\n            returns (list): Sequence of daily log-returns.\n            omega (float): GARCH(1,1) omega parameter.\n            alpha_garch (float): GARCH(1,1) alpha parameter.\n            beta (float): GARCH(1,1) beta parameter.\n            s0 (float): Initial variance, sigma_0^2.\n            alpha_tail (float): Tail probability for VaR calculation.\n\n        Returns:\n            float: The calculated VaR, rounded to six decimal places.\n        \"\"\"\n        T = len(returns)\n        returns_arr = np.array(returns, dtype=float)\n\n        # Array to store conditional variances sigma_i^2\n        variances = np.zeros(T + 1)\n        variances[0] = s0\n\n        # Array to store standardized returns z_i\n        std_returns = np.zeros(T)\n\n        # GARCH filtering loop\n        for i in range(T):\n            sigma_i_sq = variances[i]\n            r_i = returns_arr[i]\n\n            # sigma_i is guaranteed to be positive due to omega = 0, alpha = 0, beta = 0 and s0  0.\n            sigma_i = np.sqrt(sigma_i_sq)\n            \n            std_returns[i] = r_i / sigma_i\n\n            variances[i+1] = omega + alpha_garch * (r_i**2) + beta * sigma_i_sq\n\n        # One-step-ahead volatility forecast\n        sigma_T_sq = variances[T]\n        sigma_T = np.sqrt(sigma_T_sq)\n\n        # Generate scaled scenarios\n        scaled_scenarios = sigma_T * std_returns\n\n        # Sort scenarios to find the quantile\n        scaled_scenarios.sort()\n\n        # Calculate quantile using the nearest-rank rule\n        N = T\n        # k is the 1-based rank\n        k = int(max(1, np.ceil(alpha_tail * N)))\n        # q_alpha is the k-th smallest scenario (using 0-based index k-1)\n        q_alpha = scaled_scenarios[k - 1]\n\n        # VaR is the negative of the quantile\n        var_alpha = -q_alpha\n\n        return var_alpha\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"returns\": [\n                0.0042, -0.0061, 0.0015, 0.0023, -0.0038, 0.0095, -0.0123, 0.0071, -0.0022, 0.0009, \n                -0.0047, 0.0033, 0.0028, -0.0019, 0.0056, -0.0082, 0.0104, -0.0067, 0.0011, -0.0026, \n                0.0039, -0.0041, 0.0062, -0.0008, 0.0017, -0.0059, 0.0044, -0.0031, 0.0021, -0.0075, \n                0.0089, -0.0064, 0.0005, 0.0012, -0.0029, 0.0031, -0.0045, 0.0026, -0.0014, 0.0020\n            ],\n            \"params\": {\"omega\": 0.000001, \"alpha_garch\": 0.07, \"beta\": 0.92, \"s0\": 0.0001},\n            \"alpha_tail\": 0.05\n        },\n        {\n            \"returns\": [\n                -0.0020, 0.0015, -0.0010, 0.0007, -0.0035, 0.0021, -0.0009, 0.0012, -0.0048, 0.0004, \n                0.0009, -0.0022\n            ],\n            \"params\": {\"omega\": 0.000002, \"alpha_garch\": 0.10, \"beta\": 0.85, \"s0\": 0.00008},\n            \"alpha_tail\": 0.10\n        },\n        {\n            \"returns\": [\n                0.0150, -0.0220, 0.0080, -0.0120, 0.0060, -0.0180, 0.0110, -0.0090, 0.0050, -0.0130, \n                0.0170, -0.0210, 0.0090, -0.0140, 0.0070, -0.0190, 0.0120, -0.0110, 0.0060, -0.0160, \n                0.0180, -0.0240, 0.0100, -0.0200, 0.0080, -0.0150, 0.0070, -0.0170, 0.0130, -0.0180\n            ],\n            \"params\": {\"omega\": 0.000005, \"alpha_garch\": 0.08, \"beta\": 0.91, \"s0\": 0.0002},\n            \"alpha_tail\": 0.01\n        },\n        {\n            \"returns\": [\n                0.0004, -0.0006, 0.0003, -0.0002, 0.0005, -0.0004, 0.0006, -0.0003, 0.0002, -0.0005, \n                0.0004, -0.0001, 0.0003, -0.0002, 0.0001, -0.0004, 0.0005, -0.0002, 0.0003, -0.0003\n            ],\n            \"params\": {\"omega\": 0.0000005, \"alpha_garch\": 0.05, \"beta\": 0.90, \"s0\": 0.00003},\n            \"alpha_tail\": 0.05\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        var_result = calculate_fhs_var(case[\"returns\"], **case[\"params\"], alpha_tail=case[\"alpha_tail\"])\n        # Format the result to exactly six decimal places\n        results.append(f\"{var_result:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2400188"}]}