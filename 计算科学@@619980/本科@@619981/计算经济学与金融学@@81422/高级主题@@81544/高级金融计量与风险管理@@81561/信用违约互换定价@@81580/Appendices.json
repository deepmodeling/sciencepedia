{"hands_on_practices": [{"introduction": "要真正理解信用违约互换（CDS）的定价，我们必须从最基本的无套利原理入手。这个练习 [@problem_id:2430981] 剥离了现实的复杂性，将您置于一个简单的单周期、双状态（违约或不违约）世界中。它旨在清晰地展示，一个公允的CDS保费是如何通过复制其支付流，利用市场上已有资产（如风险债券和无风险资产）的价格来精确推导的，这个过程也揭示了隐含的风险中性概率。", "problem": "考虑一个从时间$t=0$到时间$t=1$的无摩擦、无套利单期市场。在此期间，连续交易的无风险资产的总回报为$1+r$，其中$r=0.04$。一家参考公司有一张面值为$1$的单期零息债券，该债券在$t=1$时或者存续，或者违约。如果公司存续，债券在$t=1$时支付$1$；如果违约，债券支付的回收额等于面值的固定比例$\\delta$，其中$\\delta=0.35$。该风险债券在$t=0$的当前价格为$B_0=0.95$。\n\n一份针对该公司的名义本金为$1$的信用违约互换（CDS）的合约期与此相同。合同规定在$t=1$时：\n- 如果公司违约，保护卖方向保护买方支付违约损失，金额为$1-\\delta$，且在该状态下保护买方不支付任何费率。\n- 如果公司未违约，保护买方向保护卖方支付一笔费率$c$，且没有保护支付。\n\n假设无套利，并且在$t=1$时只有违约/不违约两种状态，确定使CDS在时间$t=0$的价值为零的公平费率$c$。以小数形式提供$c$。将您的答案四舍五入到四位有效数字。", "solution": "首先将对问题陈述的科学性、清晰度和完整性进行验证。\n\n**步骤 1：提取已知条件**\n- 市场类型：从时间$t=0$到$t=1$的无摩擦、无套利单期市场。\n- 无风险资产总回报：$1+r$。\n- 无风险利率：$r=0.04$。\n- 参考公司的零息债券：面值$1$，于$t=1$到期。\n- $t=1$时的状态：存续或违约。\n- $t=1$时债券的收益：存续时为$1$，违约时为$\\delta$。\n- 回收率：$\\delta = 0.35$。\n- $t=0$时债券的当前价格：$B_0 = 0.95$。\n- 信用违约互换（CDS）名义本金：$1$。\n- CDS在$t=1$时若违约的收益：保护卖方向买方支付$1-\\delta$；买方不支付费率。\n- CDS在$t=1$时若存续的收益：保护买方向卖方支付费率$c$；无保护支付。\n- 条件：公平费率$c$使CDS在时间$0$的价值为零。\n- 要求输出：$c$的值，以小数形式表示并四舍五入到四位有效数字。\n\n**步骤 2：使用提取的已知条件进行验证**\n- **科学依据：** 该问题基于量化金融的基本原理，特别是无套利定价理论和离散时间、两状态模型中信用衍生品的估值。这些是标准且已成熟的概念。\n- **适定性：** 该问题提供了确定唯一公平CDS费率$c$值所需的所有信息。市场被描述为完备的，有两个状态和两种交易资产（无风险资产和风险债券），这允许推导出唯一的风险中性概率测度。\n- **客观性：** 该问题以精确、客观、无歧义的数学和金融语言表述。\n\n**步骤 3：结论与行动**\n该问题是有效的。它具有科学依据，适定、客观，并包含足够的信息以得出唯一解。下面将推导求解过程。\n\n无套利定价的基本原则规定，任何资产在时间$t=0$的价格是其在未来时间$t=1$的折现预期收益，其中预期是基于风险中性概率测度计算的。设$q$表示风险中性违约概率，因此$1-q$是风险中性存续概率。无风险总回报为$R = 1+r = 1+0.04 = 1.04$。\n\n首先，我们使用风险债券的价格$B_0$来确定风险中性概率$q$。债券在$t=1$时的收益在违约状态下为$\\delta$，在存续状态下为$1$。定价方程为：\n$$B_0 = \\frac{1}{1+r} \\left[ q \\cdot \\delta + (1-q) \\cdot 1 \\right]$$\n代入给定值：\n$$0.95 = \\frac{1}{1.04} \\left[ q \\cdot 0.35 + (1-q) \\right]$$\n两边乘以$1.04$，我们得到：\n$$0.95 \\times 1.04 = 0.35q + 1 - q$$\n$$0.988 = 1 - 0.65q$$\n此方程将模型参数与未知的风险中性概率$q$联系起来。我们可以求解$q$，但更稳妥的做法是求解CDS定价公式中出现的包含$q$的表达式。从此方程中，我们可以分离出两个关键项：\n$$q(1-\\delta) = 0.65q = 1 - 0.988 = 0.012$$\n\n接下来，我们分析信用违约互换（CDS）。公平费率$c$的定义是使合约在时间$0$的价值$V_{CDS}(0)$为零。保护买方在$t=1$的收益为：\n- 在违约情况下（风险中性概率为$q$）：收到一笔$1-\\delta$的支付。\n- 在存续情况下（风险中性概率为$1-q$）：支付一笔费率$c$，因此收益为$-c$。\n\nCDS在时间$0$的价值是折现预期收益：\n$$V_{CDS}(0) = \\frac{1}{1+r} \\left[ q \\cdot (1-\\delta) + (1-q) \\cdot (-c) \\right]$$\n为求得公平费率，设$V_{CDS}(0) = 0$，并注意到$1+r \\neq 0$，我们有：\n$$q(1-\\delta) - (1-q)c = 0$$\n$$c = \\frac{q(1-\\delta)}{1-q}$$\n我们已经求得$q(1-\\delta) = q(1-0.35) = 0.65q = 0.012$。\n我们现在需要一个$1-q$的表达式。从债券定价方程$0.988 = 1 - 0.65q$，我们可以将$q$表示为：\n$$q = \\frac{0.012}{0.65}$$\n那么，$1-q$是：\n$$1-q = 1 - \\frac{0.012}{0.65} = \\frac{0.65 - 0.012}{0.65} = \\frac{0.638}{0.65}$$\n现在我们将$q(1-\\delta)$和$1-q$的表达式代入$c$的公式中：\n$$c = \\frac{q(1-\\delta)}{1-q} = \\frac{0.012}{\\frac{0.638}{0.65}}$$\n$$c = \\frac{0.012 \\times 0.65}{0.638} = \\frac{0.0078}{0.638}$$\n现在，我们计算数值：\n$$c \\approx 0.0122257053...$$\n问题要求答案四舍五入到四位有效数字。第一位有效数字是$1$，所以我们四舍五入到第五位小数。\n$$c \\approx 0.01223$$\n这就是CDS的公平费率。", "answer": "$$\\boxed{0.01223}$$", "id": "2430981"}, {"introduction": "从离散世界进入连续时间，本练习 [@problem_id:2385463] 介绍了一个基础的简约式模型，其中违约事件被建模为一个泊松过程。通过要求您为一种假设的“幂CDS”定价，此题挑战您将核心定价逻辑——即保费分支的现值必须等于保护分支的现值——应用到一个新颖的支付结构上。这能有效地检验您是否真正掌握了从第一性原理出发对信用衍生品进行定价的能力，而不是仅仅记忆标准公式。", "problem": "考虑一个关于单一参考实体的假设合约，“幂式信用违约互换 (Power-CDS)”。在风险中性测度下，假设设置如下。\n\n- 合约到期日为 $T = 5$ 年，单位名义本金为1。\n- 连续复利无风险利率为恒定值 $r = 0.02$ 每年。\n- 参考实体的违约时间 $\\tau$ 具有恒定的风险（强度）率 $\\lambda = 0.05$ 每年，因此生存概率为 $\\mathbb{Q}(\\tau > t) = \\exp(-\\lambda t)$ (对于 $t \\ge 0$)。\n- 在违约时间 $\\tau \\le T$ 发生时，合约立即支付每单位名义本金 $(1 - R)^{2}$ 的金额，其中 $R \\in [0,1]$ 是回收率。\n- 回收率 $R$ 与 $\\tau$ 独立，并服从参数为 $\\alpha = 4$ 和 $\\beta = 6$ 的贝塔分布。\n- 保费端以每年 $S$ 的恒定费率连续支付，直至违约或到期（以先发生者为准）。\n\n求使合约在初始时刻价值为零的平价年度保费率 $S$（每单位名义本金），即令保费端现值与保护端现值相等的费率 $S$。将您的最终答案表示为每年的小数值，并四舍五入到四位有效数字。", "solution": "对问题陈述进行验证。\n\n步骤1：提取已知条件\n- 合约类型：“幂式信用违约互换 (Power-CDS)”，针对单一参考实体。\n- 合约到期日：$T = 5$ 年。\n- 名义本金：$1$ 单位。\n- 无风险利率：$r = 0.02$ 每年，连续复利。\n- 违约时间：$\\tau$。\n- 违约强度（风险率）：$\\lambda = 0.05$ 每年，恒定。\n- 生存概率：$\\mathbb{Q}(\\tau > t) = \\exp(-\\lambda t)$ (对于 $t \\ge 0$)。\n- 在 $\\tau \\le T$ 发生违约时的支付金额：每单位名义本金 $(1 - R)^2$。\n- 回收率：$R \\in [0,1]$。\n- 独立性：$R$ 和 $\\tau$ 是独立的随机变量。\n- $R$ 的分布：参数为 $\\alpha = 4$ 和 $\\beta = 6$ 的贝塔分布。\n- 保费端：以每年 $S$ 的恒定费率连续支付，直至 $\\min(\\tau, T)$。\n- 目标：求使合约在初始时刻价值为零的平价年度保费率 $S$。\n- 输出格式：小数，四舍五入到四位有效数字。\n\n步骤2：使用提取的已知条件进行验证\n该问题设置在数理金融的标准风险中性定价框架内。所有组成部分都有明确的定义。\n- **科学依据**：该模型是一个具有恒定强度的简化式信用风险模型，是一个标准的教科书案例（例如，Jarrow-Turnbull 模型）。遵循贝塔分布的随机回收率是一个常见且合理的扩展。“Power-CDS”是一种非标准但数学上易于处理的衍生品。该问题在已建立的金融数学中有科学依据。\n- **良态问题**：计算所需的所有参数（$T$, $r$, $\\lambda$, $\\alpha$, $\\beta$）都已明确给出。目标明确：找到使两个现金流的现值相等的费率 $S$。存在唯一解且可推导。该问题是良态的。\n- **客观性**：问题以精确、客观的数学术语陈述，没有歧义或主观论断。\n\n步骤3：结论与行动\n问题有效。将推导解答过程。\n\n平价利差 $S$ 是使保费端现值 ($PV_{premium}$) 与保护端现值 ($PV_{protection}$) 相等的费率。估值在风险中性测度 $\\mathbb{Q}$ 下进行。\n条件是 $PV_{protection} = PV_{premium}$。\n\n首先，我们确定保护端的现值，$PV_{protection}$。这是贴现后支付金额的风险中性期望。如果在违约时间 $\\tau$ 发生违约且 $\\tau \\le T$，则支付 $(1-R)^2$ 的金额。\n$$\nPV_{protection} = \\mathbb{E}^{\\mathbb{Q}} \\left[ (1 - R)^2 e^{-r\\tau} \\mathbb{1}_{\\{\\tau \\le T\\}} \\right]\n$$\n鉴于回收率 $R$ 和违约时间 $\\tau$ 是独立的，期望可以分开计算：\n$$\nPV_{protection} = \\mathbb{E}^{\\mathbb{Q}} \\left[ (1 - R)^2 \\right] \\cdot \\mathbb{E}^{\\mathbb{Q}} \\left[ e^{-r\\tau} \\mathbb{1}_{\\{\\tau \\le T\\}} \\right]\n$$\n第一项 $\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2]$ 使用贝塔分布的性质计算。对于一个随机变量 $X \\sim \\text{Beta}(\\alpha, \\beta)$，其矩是已知的。\n$$\n\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2] = \\mathbb{E}^{\\mathbb{Q}}[1 - 2R + R^2] = 1 - 2\\mathbb{E}^{\\mathbb{Q}}[R] + \\mathbb{E}^{\\mathbb{Q}}[R^2]\n$$\n贝塔分布的一阶矩和二阶矩是：\n$$\n\\mathbb{E}^{\\mathbb{Q}}[R] = \\frac{\\alpha}{\\alpha + \\beta}\n$$\n$$\n\\mathbb{E}^{\\mathbb{Q}}[R^2] = \\frac{\\alpha(\\alpha+1)}{(\\alpha+\\beta)(\\alpha+\\beta+1)}\n$$\n代入给定的参数 $\\alpha = 4$ 和 $\\beta = 6$：\n$$\n\\mathbb{E}^{\\mathbb{Q}}[R] = \\frac{4}{4+6} = \\frac{4}{10} = \\frac{2}{5}\n$$\n$$\n\\mathbb{E}^{\\mathbb{Q}}[R^2] = \\frac{4(4+1)}{(4+6)(4+6+1)} = \\frac{4 \\cdot 5}{10 \\cdot 11} = \\frac{20}{110} = \\frac{2}{11}\n$$\n因此，给定违约的预期损失平方为：\n$$\n\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2] = 1 - 2\\left(\\frac{2}{5}\\right) + \\frac{2}{11} = 1 - \\frac{4}{5} + \\frac{2}{11} = \\frac{1}{5} + \\frac{2}{11} = \\frac{11 + 10}{55} = \\frac{21}{55}\n$$\n$PV_{protection}$ 表达式中的第二项 $\\mathbb{E}^{\\mathbb{Q}}[e^{-r\\tau} \\mathbb{1}_{\\{\\tau \\le T\\}}]$，通过对违约时间概率密度函数 $f(t) = \\lambda e^{-\\lambda t}$ (对于 $t \\ge 0$) 进行积分来计算。\n$$\n\\mathbb{E}^{\\mathbb{Q}}[e^{-r\\tau} \\mathbb{1}_{\\{\\tau \\le T\\}}] = \\int_0^T e^{-rt} f(t) \\,dt = \\int_0^T e^{-rt} \\lambda e^{-\\lambda t} \\,dt = \\lambda \\int_0^T e^{-(r+\\lambda)t} \\,dt\n$$\n$$\n\\lambda \\int_0^T e^{-(r+\\lambda)t} \\,dt = \\lambda \\left[ \\frac{e^{-(r+\\lambda)t}}{-(r+\\lambda)} \\right]_0^T = \\frac{\\lambda}{r+\\lambda} \\left( 1 - e^{-(r+\\lambda)T} \\right)\n$$\n结合各项，保护端的完整表达式为：\n$$\nPV_{protection} = \\frac{21}{55} \\cdot \\frac{\\lambda}{r+\\lambda} \\left( 1 - e^{-(r+\\lambda)T} \\right)\n$$\n\n接下来，我们确定保费端的现值，$PV_{premium}$。这是在违约时间 $\\tau$ 或到期日 $T$（以先发生者为准）之前，连续支付 $S$ 的现值。这等同于将贴现后的支付率对时间进行积分，并按截至该时间的生存概率加权。\n$$\nPV_{premium} = \\mathbb{E}^{\\mathbb{Q}} \\left[ \\int_0^{\\min(\\tau, T)} S e^{-rt} \\,dt \\right] = S \\int_0^T e^{-rt} \\mathbb{Q}(\\tau > t) \\,dt\n$$\n代入生存概率 $\\mathbb{Q}(\\tau > t) = e^{-\\lambda t}$：\n$$\nPV_{premium} = S \\int_0^T e^{-rt} e^{-\\lambda t} \\,dt = S \\int_0^T e^{-(r+\\lambda)t} \\,dt\n$$\n这个积分与之前的计算中的积分相同：\n$$\nPV_{premium} = S \\left( \\frac{1 - e^{-(r+\\lambda)T}}{r+\\lambda} \\right)\n$$\n这一项通常被称为“风险年金”。\n\n为求平价利差 $S$，我们令 $PV_{premium} = PV_{protection}$：\n$$\nS \\left( \\frac{1 - e^{-(r+\\lambda)T}}{r+\\lambda} \\right) = \\frac{21}{55} \\cdot \\frac{\\lambda}{r+\\lambda} \\left( 1 - e^{-(r+\\lambda)T} \\right)\n$$\n假设 $T > 0$，项 $\\frac{1 - e^{-(r+\\lambda)T}}{r+\\lambda}$ 非零，可以从等式两边消去。这样就得出了一个非常简单的利差表达式：\n$$\nS = \\lambda \\cdot \\mathbb{E}^{\\mathbb{Q}}[(1-R)^2]\n$$\n这个结果很直观：保费率必须等于预期损失率。预期损失率是违约到达率（$\\lambda$）与给定违约时的预期损失（在本合约中为 $\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2]$）的乘积。在这个具有即时支付的恒定强度模型中，利率 $r$ 和到期日 $T$ 不影响平价利差。\n\n现在，我们代入数值：\n$\\lambda = 0.05$\n$\\mathbb{E}^{\\mathbb{Q}}[(1-R)^2] = \\frac{21}{55}$\n$$\nS = 0.05 \\cdot \\frac{21}{55} = \\frac{5}{100} \\cdot \\frac{21}{55} = \\frac{1}{20} \\cdot \\frac{21}{55} = \\frac{21}{1100}\n$$\n为了将其表示为小数，我们进行除法运算：\n$$\nS = \\frac{21}{1100} \\approx 0.01909090...\n$$\n题目要求答案四舍五入到四位有效数字。第一位有效数字是 $1$。随后的数字是 $9$、$0$、$9$。第五位有效数字是 $0$，因此我们不向上舍入。\n$$\nS \\approx 0.01909\n$$\n这就是每单位名义本金的平价年度保费率。", "answer": "$$\n\\boxed{0.01909}\n$$", "id": "2385463"}, {"introduction": "这最后一个、也是最高阶的练习，旨在弥合理论模型与真实世界数据之间的鸿沟。在实践中，模型参数并非凭空而来，而是必须从市场价格中校准得出。该练习 [@problem_id:2425452] 将指导您完成将一个复杂的随机强度模型校准到一组市场报价的全过程，这正是量化分析师在日常工作中需要面对的核心任务之一，从而让您体验从理论到实践的完整闭环。", "problem": "您的任务是构建一个完整、可运行的程序，将一个仿射简化形式违约强度模型校准至合成的信用违约互换（CDS）数据。该模型具体规定如下。违约强度由 $\\lambda_t = Y_t + \\psi$ 给出，其中 $Y_t$ 在风险中性测度下遵循一个 Ornstein–Uhlenbeck (OU) 过程：\n$$\ndY_t = \\kappa \\left( \\theta - Y_t \\right) dt + \\sigma \\, dW_t,\n$$\n其中 $\\kappa > 0$，$\\sigma \\ge 0$，$\\theta \\in \\mathbb{R}$，且 $Y_0 \\in \\mathbb{R}$。仿射偏移量 $\\psi \\in \\mathbb{R}$ 是一个常数参数。CDS 在简化形式方法下进行定价，采用连续保费近似、恒定的无风险利率 $r \\ge 0$、介于 $(0,1]$ 之间的违约损失率（LGD）以及保护期到期日 $T > 0$。\n\n请从以下基础出发，不要使用任何未经证明的捷径：\n- Ornstein–Uhlenbeck 随机微分方程及其众所周知的高斯性。\n- 生存概率的定义 $S(t) = \\mathbb{E}\\left[ \\exp\\left( - \\int_0^t \\lambda_s \\, ds \\right) \\right]$。\n- 连续保费的公平 CDS 利差 $s^{\\star}(T)$ 解出了使违约分支的现值与保费分支的现值相等的方程，\n$$\ns^{\\star}(T) \\int_0^T e^{- r t} S(t) \\, dt = \\mathrm{LGD} \\int_0^T e^{- r t} \\left( - \\frac{dS(t)}{dt} \\right) dt.\n$$\n\n您的程序必须：\n- 根据给定的 $Y_0$、$\\kappa$、$\\theta$、$\\sigma$ 和 $\\psi$，推导并实现模型所蕴含的生存概率 $S(t)$。\n- 对于每个报价的到期日 $T$，使用 $S(t)$ 并根据给定的恒定 $r$ 和分数 LGD，通过上述积分方程计算连续保费的公平 CDS 平价利差 $s^{\\star}(T)$。如果需要，您可以使用数值积分。不应使用离散计息惯例；仅假设使用连续保费近似。\n- 通过最小化每个数据集中模型隐含的平价利差与所提供的跨到期日的合成报价之间的平方误差和，来校准未知参数 $\\psi$ 和 $\\theta$。使用最小二乘法准则，并为优化器施加简单、合理的边界条件以保证良定性。对于每个数据集，您应将 $(\\kappa,\\sigma,r,\\mathrm{LGD},Y_0)$ 视为已知输入。\n\n重要的单位和惯例：\n- 所有利率（包括 $\\kappa$、$\\theta$、$\\sigma$、$Y_0$、$\\psi$、$r$ 和 CDS 平价利差）必须以小数形式按“年”处理（例如，$0.02$ 表示“每年百分之二”）。\n- 此任务中没有角度或物理单位。\n- 以小数形式报告所有输出。\n\n需要在您的代码中实现和覆盖的测试套件（对于以下每种情况，首先使用“真实”参数计算指定到期日的模型隐含平价利差 $s^{\\star}(T)$ 来生成合成 CDS 报价，然后从这些报价中校准回 $\\psi$ 和 $\\theta$，同时将 $\\kappa$、$\\sigma$、$Y_0$、$r$ 和 $\\mathrm{LGD}$ 视为已知）：\n\n- 情况 A（理想路径，中等均值回归和波动率）：\n  - 已知输入：$\\kappa = 1.0$，$\\sigma = 0.1$，$Y_0 = 0.02$，$r = 0.02$，$\\mathrm{LGD} = 0.6$，到期日 $T \\in \\{ 1.0, 3.0, 5.0 \\}$ 年。\n  - 用于数据生成的真实参数：$\\theta_{\\text{true}} = 0.015$，$\\psi_{\\text{true}} = 0.01$。\n\n- 情况 B（边界条件，具有确定性强度分量，$\\sigma = 0$）：\n  - 已知输入：$\\kappa = 0.7$，$\\sigma = 0.0$，$Y_0 = 0.03$，$r = 0.01$，$\\mathrm{LGD} = 0.6$，到期日 $T \\in \\{ 1.0, 2.0, 4.0 \\}$ 年。\n  - 用于数据生成的真实参数：$\\theta_{\\text{true}} = 0.03$，$\\psi_{\\text{true}} = 0.005$。\n\n- 情况 C（快速均值回归，较高的偏移量）：\n  - 已知输入：$\\kappa = 3.0$，$\\sigma = 0.2$，$Y_0 = 0.01$，$r = 0.015$，$\\mathrm{LGD} = 0.6$，到期日 $T \\in \\{ 2.0, 5.0, 7.0 \\}$ 年。\n  - 用于数据生成的真实参数：$\\theta_{\\text{true}} = 0.012$，$\\psi_{\\text{true}} = 0.02$。\n\n算法要求：\n- 对于每种情况，首先使用真实参数计算合成报价。然后，仅使用这些报价，通过最小二乘法校准 $\\psi$ 和 $\\theta$，并遵循简单的边界条件，使 $\\psi$ 严格为正，$\\theta$ 处于一个宽泛且合理的区间内。对所有需要的积分使用稳健的数值积分方法。\n- 输出格式：您的程序应生成单行输出，其中包含一个扁平化的校准参数列表，顺序如下\n$$\n[\\psi_A, \\theta_A, \\psi_B, \\theta_B, \\psi_C, \\theta_C],\n$$\n其中下标表示情况。将每个值四舍五入到 $6$ 位小数。例如，一个可接受的格式是 $[0.010000,0.015000,0.005000,0.030000,0.020000,0.012000]$。\n\n您的实现必须是自包含的，不需要用户输入，并且不访问任何外部资源。最终打印的行必须与上述描述的格式完全匹配。所有量必须按年化小数计算。", "solution": "问题陈述已通过验证，并被认定为有效。它在科学上基于量化金融的原理，特别是仿射期限结构模型。该模型由一个 Ornstein-Uhlenbeck 过程驱动违约强度，是一个标准构造（属 Vasicek 型模型）。该问题是良定的，为通过数值校准获得唯一解提供了足够的信息，并且没有歧义或矛盾。它代表了计算金融中的一个标准练习。\n\n解决方案分三个主要阶段进行：首先，推导生存概率函数；其次，构建信用违约互换（CDS）利差的计算公式；第三，规定数值校准程序。\n\n### 1. 生存概率推导\n\n违约强度由仿射过程 $\\lambda_t = Y_t + \\psi$ 给出，其中 $Y_t$ 在风险中性测度 $\\mathbb{Q}$ 下遵循 Ornstein-Uhlenbeck (OU) 过程：\n$$\ndY_t = \\kappa (\\theta - Y_t) dt + \\sigma dW_t\n$$\n初始条件为 $Y_0$。参数 $\\kappa$、$\\theta$、$\\sigma$ 和 $\\psi$ 均为常数。\n\n到时间 $t$ 为止的生存概率 $S(t)$ 定义为与累积违约强度相关的贴现因子的风险中性期望：\n$$\nS(t) = \\mathbb{E}^{\\mathbb{Q}} \\left[ \\exp\\left( - \\int_0^t \\lambda_s ds \\right) \\bigg| \\mathcal{F}_0 \\right]\n$$\n代入 $\\lambda_s = Y_s + \\psi$ 并利用积分的线性性质，可得：\n$$\nS(t) = \\mathbb{E}^{\\mathbb{Q}} \\left[ \\exp\\left( - \\int_0^t (Y_s + \\psi) ds \\right) \\right] = \\exp(-\\psi t) \\mathbb{E}^{\\mathbb{Q}} \\left[ \\exp\\left( - \\int_0^t Y_s ds \\right) \\right]\n$$\n该期望项是仿射过程的一个标准结果。对于为 $Y_t$ 定义的 OU 过程，已知该期望在初始状态 $Y_0$ 中具有指数仿射形式：\n$$\n\\mathbb{E}^{\\mathbb{Q}} \\left[ \\exp\\left( - \\int_0^t Y_s ds \\right) \\right] = \\exp\\left( A(t) - B(t)Y_0 \\right)\n$$\n其中 $A(t)$ 和 $B(t)$ 是时间的确定性函数。这些函数解出了一个从 Feynman-Kac 定理推导出的常微分方程组。标准解为：\n$$\nB(t) = \\frac{1}{\\kappa} \\left( 1 - e^{-\\kappa t} \\right)\n$$\n和\n$$\nA(t) = \\left( \\theta - \\frac{\\sigma^2}{2\\kappa^2} \\right) [B(t) - t] - \\frac{\\sigma^2}{4\\kappa} B(t)^2\n$$\n这个关于 $A(t)$ 和 $B(t)$ 的公式是稳健的，即使在模型变为确定性的 $\\sigma=0$ 的情况下也成立。$\\kappa \\to 0$ 的情况代表一个不同的过程（布朗运动），在此不作讨论，因为问题指定 $\\kappa > 0$。\n\n结合这些结果，生存概率 $S(t)$ 由以下解析表达式给出：\n$$\nS(t) = \\exp \\left( -\\psi t + A(t) - B(t)Y_0 \\right)\n$$\n\n### 2. CDS 利差计算\n\n连续保费 CDS 的公平平价利差，记作 $s^{\\star}(T)$，由一个使保费分支的现值（PV）与违约分支的现值（PV）相等的方程定义：\n$$\ns^{\\star}(T) \\int_0^T e^{-rt} S(t) dt = \\mathrm{LGD} \\int_0^T e^{-rt} \\left( -\\frac{dS(t)}{dt} \\right) dt\n$$\n其中 $r$ 是恒定的无风险利率，$\\mathrm{LGD}$ 是分数形式的违约损失率。\n\n令保费分支的现值为 $PL(T) = \\int_0^T e^{-rt} S(t) dt$。右侧的积分代表经 LGD 缩放的违约概率密度的现值，可以通过分部积分法进行简化。令 $u = e^{-rt}$ 和 $dv = -S'(t)dt$。\n重新评估分部积分：\n令 $u = e^{-rt}$ 且 $dv = -S'(t)dt$。积分为 $\\int u \\, dv$。\n根据分部积分法：$\\int u \\, dv = uv - \\int v \\, du$。\n如果 $dv = -S'(t)dt$，则 $v = -S(t)$。\n$uv = e^{-rt}(-S(t))$。因此 $[uv]_0^T = -e^{-rT}S(T) - (-e^0 S(0)) = 1-e^{-rT}S(T)$，因为 $S(0)=1$。\n$\\int v \\, du = \\int_0^T (-S(t))(-re^{-rt})dt = r \\int_0^T e^{-rt}S(t)dt = r \\cdot PL(T)$。\n因此，违约分支积分的正确表达式是：\n$$\n\\int_0^T e^{-rt}(-S'(t))dt = 1 - e^{-rT}S(T) - r \\cdot PL(T)\n$$\n这个表达式在数值上更稳定，因为它避免了对 $S(t)$ 求导。\n\n然后通过求解该方程得到公平利差 $s^{\\star}(T)$：\n$$\ns^{\\star}(T) = \\mathrm{LGD} \\frac{1 - e^{-rT}S(T) - r \\cdot PL(T)}{PL(T)}\n$$\n$PL(T)$ 的积分没有闭式解，必须通过数值积分来计算。\n\n### 3. 校准程序\n\n目标是通过最小化模型隐含利差 $s^{\\star}_{\\text{model}}(T_i; \\mathbf{p})$ 与在一组到期日 $\\{T_i\\}_{i=1}^N$ 上综合生成的市场报价 $s^{\\text{quote}}_i$ 之间的平方差之和，来校准参数 $\\mathbf{p} = (\\psi, \\theta)$。\n\n要最小化的目标函数是：\n$$\nJ(\\psi, \\theta) = \\sum_{i=1}^N \\left( s^{\\star}_{\\text{model}}(T_i; \\psi, \\theta) - s^{\\text{quote}}_i \\right)^2\n$$\n每次校准的已知参数为 $(\\kappa, \\sigma, Y_0, r, \\mathrm{LGD})$。这是一个非线性最小二乘问题。将使用拟牛顿优化算法（特别是能够处理箱式约束的 L-BFGS-B）在参数边界条件下求解。按照规定，我们将施加 $\\psi > 0$ 并将 $\\theta$ 约束在一个宽泛、合理的区间内，以确保解的稳定性和金融合理性。\n\n每个测试案例的总体算法如下：\n1.  使用“真实”参数 $(\\psi_{\\text{true}}, \\theta_{\\text{true}})$ 和案例的其他已知信息，通过实现上述推导出的利差公式，为每个到期日 $T_i$ 计算合成 CDS 报价 $s^{\\text{quote}}_i$。\n2.  定义目标函数 $J(\\psi, \\theta)$，该函数接受候选参数，计算相应的模型利差，并返回与合成报价的平方误差和。\n3.  使用优化程序（`scipy.optimize.minimize`）及初始猜测值和预定义边界，找到最小化 $J$ 的参数向量 $(\\hat{\\psi}, \\hat{\\theta})$。\n4.  得到的参数对 $(\\hat{\\psi}, \\hat{\\theta})$ 即为该案例的校准参数。对所有指定的测试案例重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import quad\nfrom scipy.optimize import minimize\n\ndef B_func(t, kappa):\n    \"\"\"\n    Calculates the B(t) function for the affine model.\n    B(t) = (1/kappa) * (1 - exp(-kappa * t))\n    \"\"\"\n    if np.isclose(kappa, 0.0):\n        # Taylor expansion for small kappa: (1 - (1 - kt + (kt)^2/2)) / k = t - kt^2/2 -> t\n        return t\n    return (1.0 - np.exp(-kappa * t)) / kappa\n\ndef A_func(t, kappa, theta, sigma):\n    \"\"\"\n    Calculates the A(t) function for the affine model.\n    A(t) = (theta - sigma^2/(2*kappa^2)) * [B(t) - t] - (sigma^2 / (4*kappa)) * B(t)^2\n    \"\"\"\n    if np.isclose(kappa, 0.0):\n        # Limit for kappa -> 0 with dY_t = sigma * dW_t\n        # This case is not required by problem spec (kappa>0) but good for robustness.\n        # Direct derivation gives A(t) = sigma^2 * t^3 / 6\n        return sigma**2 * t**3 / 6.0\n        \n    b_val = B_func(t, kappa)\n    \n    # This calculation can be unstable if kappa is very small.\n    # Grouping terms to improve stability. theta * (B(t) - t) is one part.\n    # The sigma part: sigma^2 * [ - (B(t)-t)/(2k^2) - B(t)^2/(4k) ]\n    # = sigma^2 * [ (t-B(t))/(2k^2) - B(t)^2/(4k) ]\n    # = sigma^2/(4k^3) * [ 2k(t-B(t)) - k^2 B(t)^2 ]\n    # 2k(t-B(t)) = 2k(t - (1-e^-kt)/k) = 2kt - 2 + 2e^-kt\n    # k^2 B(t)^2 = (1-e^-kt)^2 = 1 - 2e^-kt + e^-2kt\n    # sum = 2kt - 3 + 4e^-kt - e^-2kt\n    # So A(t) = theta(B(t)-t) + sigma^2/(4k^3) * (2kt - 3 + 4e^-kt - e^-2kt)\n    # The standard form is generally stable enough for kappa values not extremely close to 0.\n    term1_factor = theta - (sigma**2) / (2.0 * kappa**2)\n    term1 = term1_factor * (b_val - t)\n    term2 = -(sigma**2) / (4.0 * kappa) * b_val**2\n    return term1 + term2\n\ndef survival_prob(t, Y0, kappa, theta, sigma, psi):\n    \"\"\"\n    Calculates the survival probability S(t) given model parameters.\n    S(t) = exp(-psi*t + A(t) - B(t)*Y0)\n    \"\"\"\n    if t  1e-9:  # Survival probability at t=0 is 1.\n        return 1.0\n\n    a_val = A_func(t, kappa, theta, sigma)\n    b_val = B_func(t, kappa)\n    \n    exponent = -psi * t + a_val - b_val * Y0\n    return np.exp(exponent)\n\ndef calculate_spread(T_maturity, Y0, kappa, theta, sigma, psi, r, LGD):\n    \"\"\"\n    Calculates the fair CDS par spread s*(T) for a given maturity.\n    \"\"\"\n    # Integrand for the premium leg PV\n    integrand_pl = lambda t: np.exp(-r * t) * survival_prob(t, Y0, kappa, theta, sigma, psi)\n    \n    # Calculate premium leg PV using numerical quadrature\n    pl_pv, quad_err = quad(integrand_pl, 0, T_maturity, epsabs=1e-9, epsrel=1e-9)\n    \n    if pl_pv  1e-12:\n        return np.inf  # Avoid division by zero\n        \n    s_T = survival_prob(T_maturity, Y0, kappa, theta, sigma, psi)\n    \n    # PV of default leg per unit of LGD, derived using integration by parts\n    dl_pv_per_lgd = 1.0 - np.exp(-r * T_maturity) * s_T - r * pl_pv\n    \n    spread = LGD * dl_pv_per_lgd / pl_pv\n    return spread\n\ndef solve():\n    \"\"\"\n    Main function to run test cases, calibrate parameters, and print results.\n    \"\"\"\n    test_cases = [\n        {\n            \"name\": \"Case A\",\n            \"knowns\": {\"kappa\": 1.0, \"sigma\": 0.1, \"Y0\": 0.02, \"r\": 0.02, \"LGD\": 0.6},\n            \"maturities\": [1.0, 3.0, 5.0],\n            \"true_params\": {\"theta\": 0.015, \"psi\": 0.01},\n        },\n        {\n            \"name\": \"Case B\",\n            \"knowns\": {\"kappa\": 0.7, \"sigma\": 0.0, \"Y0\": 0.03, \"r\": 0.01, \"LGD\": 0.6},\n            \"maturities\": [1.0, 2.0, 4.0],\n            \"true_params\": {\"theta\": 0.03, \"psi\": 0.005},\n        },\n        {\n            \"name\": \"Case C\",\n            \"knowns\": {\"kappa\": 3.0, \"sigma\": 0.2, \"Y0\": 0.01, \"r\": 0.015, \"LGD\": 0.6},\n            \"maturities\": [2.0, 5.0, 7.0],\n            \"true_params\": {\"theta\": 0.012, \"psi\": 0.02},\n        },\n    ]\n\n    all_results = []\n    \n    for case in test_cases:\n        knowns = case[\"knowns\"]\n        true_params = case[\"true_params\"]\n        maturities = case[\"maturities\"]\n\n        # Step 1: Generate synthetic CDS quotes using the true parameters\n        synthetic_quotes = [\n            calculate_spread(\n                T_maturity=T,\n                Y0=knowns[\"Y0\"],\n                kappa=knowns[\"kappa\"],\n                theta=true_params[\"theta\"],\n                sigma=knowns[\"sigma\"],\n                psi=true_params[\"psi\"],\n                r=knowns[\"r\"],\n                LGD=knowns[\"LGD\"],\n            ) for T in maturities\n        ]\n\n        # Step 2: Define the objective function for calibration\n        def objective_function(params):\n            psi_cal, theta_cal = params\n            \n            # Simple check for parameter validity\n            if psi_cal = 0:\n                return 1e9 # Return a large number if parameters are out of bounds\n\n            model_spreads = [\n                calculate_spread(\n                    T_maturity=T,\n                    Y0=knowns[\"Y0\"],\n                    kappa=knowns[\"kappa\"],\n                    theta=theta_cal,\n                    sigma=knowns[\"sigma\"],\n                    psi=psi_cal,\n                    r=knowns[\"r\"],\n                    LGD=knowns[\"LGD\"],\n                ) for T in maturities\n            ]\n            \n            error = np.sum((np.array(model_spreads) - np.array(synthetic_quotes))**2)\n            return error\n\n        # Step 3: Calibrate parameters using least squares minimization\n        initial_guess = [0.01, 0.01]  # Generic initial guess\n        bounds = [(1e-7, 0.5), (-0.1, 0.5)] # Bounds: psi  0, theta in a wide range\n\n        result = minimize(\n            objective_function,\n            initial_guess,\n            method='L-BFGS-B',\n            bounds=bounds,\n            options={'ftol': 1e-12, 'gtol': 1e-12}\n        )\n        \n        calibrated_psi, calibrated_theta = result.x\n        all_results.extend([calibrated_psi, calibrated_theta])\n\n    # Final print statement in the exact required format.\n    formatted_results = [f\"{val:.6f}\" for val in all_results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2425452"}]}