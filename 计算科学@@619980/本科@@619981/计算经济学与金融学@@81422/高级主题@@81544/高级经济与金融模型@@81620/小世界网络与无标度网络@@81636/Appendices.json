{"hands_on_practices": [{"introduction": "掌握了如何构建小世界网络之后，下一步是探究其在经济系统中的实际功用。小世界结构的一个关键影响是能极大地促进信息在网络中的传播效率。本练习将模拟一个由交易员组成的市场，其信息交流网络遵循经典的Watts-Strogatz小世界模型[@problem_id:2431703]。你的任务是通过编程，分析网络中“捷径”的数量（由重连概率 $p$ 控制）如何影响市场价格收敛到其基本价值的速度，从而直观地验证网络拓扑结构对市场效率的关键作用。", "id": "2431703", "problem": "考虑一个由 $N$ 个交易者组成的市场，其信息网络通过 Watts–Strogatz 小世界模型构建。该网络初始化为一个度为偶数 $k$ 的规则环形格（每个节点连接到其两侧最近的 $k/2$ 个邻居），然后每条右侧边以概率 $p$ 独立地重连接到一个均匀选择的非邻居节点，重连时排除自环和重复边，最终生成一个无向简单图。令 $A \\in \\{0,1\\}^{N \\times N}$ 表示所得图的邻接矩阵，令 $D \\in \\mathbb{R}^{N \\times N}$ 为节点度的对角矩阵。定义行随机的社会影响矩阵 $W = D^{-1} A$。\n\n在离散时间 $t \\in \\{0,1,2,\\dots\\}$，每个交易者 $i \\in \\{1,\\dots,N\\}$ 对资产的基本价值 $F \\in \\mathbb{R}$ 持有信念 $x_i(t)$。时间 $t$ 的市场价格是简单平均值 $P(t) = \\frac{1}{N} \\sum_{i=1}^N x_i(t)$。信念通过 DeGroot 锚定动态进行更新：\n$$\n\\mathbf{x}(t+1) = (1-\\alpha) W \\mathbf{x}(t) + \\alpha F \\mathbf{1},\n$$\n其中 $\\alpha \\in [0,1]$ 是公共信号锚定权重，$\\mathbf{1}$ 是 $N$ 维全一向量。初始信念是异质的，按如下方式抽取：\n$$\nx_i(0) = F + \\Delta + \\xi_i,\\quad \\xi_i \\sim \\mathcal{N}(0,\\sigma^2) \\text{ independently across } i,\n$$\n对于给定的 $\\Delta \\in \\mathbb{R}$ 和 $\\sigma > 0$。\n\n你的任务是编写一个完整、可运行的程序，该程序能够：\n- 根据上述描述，为给定的 $N$、$k$ 和 $p$ 构建 Watts–Strogatz 网络。\n- 根据更新方程，将信念向量 $\\mathbf{x}(t)$ 演化至多 $T_{\\max}$ 步。\n- 计算市场价格到基本价值的 $\\varepsilon$-收敛的首次到达时间，\n$$\n\\tau = \\min\\{t \\in \\{1,2,\\dots,T_{\\max}\\} : |P(t) - F| \\le \\varepsilon \\},\n$$\n并约定，如果在 $T_{\\max}$ 之前不存在这样的 $t$，则 $\\tau = T_{\\max}$。\n- 每个测试用例使用固定的伪随机数生成器种子以确保可复现性。该种子必须同时影响重连随机性和初始的 $\\xi_i$。\n\n在所有测试用例中，对非网络参数使用以下固定配置：基本价值 $F = 100.0$，初始偏移 $\\Delta = 5.0$，噪声标准差 $\\sigma = 1.0$。收敛容差 $\\varepsilon$ 按各用例指定。本问题不使用角度。所有量均为无量纲，因此不需要物理单位。所有时间索引均为整数。\n\n实现并评估以下参数值 $(N,k,p,\\alpha,\\varepsilon,T_{\\max},\\text{seed})$ 的测试套件：\n- 用例 1: $(150,\\,4,\\,0.0,\\,0.05,\\,10^{-3},\\,5000,\\,1)$\n- 用例 2: $(150,\\,4,\\,0.05,\\,0.05,\\,10^{-3},\\,5000,\\,1)$\n- 用例 3: $(150,\\,4,\\,0.2,\\,0.05,\\,10^{-3},\\,5000,\\,1)$\n- 用例 4: $(150,\\,4,\\,1.0,\\,0.05,\\,10^{-3},\\,5000,\\,1)$\n- 用例 5 (边界情况, 无锚定): $(150,\\,4,\\,0.2,\\,0.0,\\,10^{-3},\\,5000,\\,1)$\n- 用例 6 (更稀疏的基础格): $(150,\\,2,\\,0.5,\\,0.05,\\,10^{-3},\\,5000,\\,2)$\n\n你的程序应输出一行内容，其中包含六个最终到达时间 $\\tau$ 的列表，格式为方括号括起来的逗号分隔列表（例如，$\\,[\\tau_1,\\tau_2,\\dots,\\tau_6]\\,$）。最终输出必须是整数。不应打印其他任何文本。", "solution": "该问题陈述已经过严格验证，被认为是有效的。它在科学上基于网络科学和计算经济学中的既定模型，问题设定良好，目标明确，信息充分，并且以客观、明确的语言表述。任务是在Watts-Strogatz网络上模拟一个信念传播动态，并计算价格收敛的到达时间。我们着手进行解答。\n\n解答分为三个主要部分：1) Watts–Strogatz 网络的构建，2) DeGroot 信念动态的公式化与分析，以及 3) 计算到达时间 $\\tau$ 的数值模拟实现。\n\n**1. Watts–Strogatz 网络构建**\n\n$N$ 个交易者的网络是根据所描述的特定 Watts-Strogatz 过程构建的。\n\n首先，创建一个初始的规则环形格。节点集为 $V = \\{0, 1, \\dots, N-1\\}$。每个节点 $i \\in V$ 连接到其 $k$ 个最近的邻居，其中 $k$ 是一个偶数。具体来说，每个节点 $i$ 连接到节点 $(i \\pm j) \\pmod N$，其中 $j \\in \\{1, \\dots, k/2\\}$。这将创建一个每个节点度均为 $k$ 的无向图。这个初始格的邻接矩阵 $A^{(0)}$ 的元素 $A^{(0)}_{ij} = 1$（如果节点 $j$ 是 $i$ 的 $k$ 个最近邻居之一），否则 $A^{(0)}_{ij} = 0$。\n\n其次，应用重连过程。问题指明“每条右侧边被独立地重连”。我们将“右侧”边集定义为形如 $(i, (i+j) \\pmod N)$ 的边，其中 $i \\in \\{0, \\dots, N-1\\}$ 且 $j \\in \\{1, \\dots, k/2\\}$。存在 $N \\times (k/2)$ 个这样的有向对，对应于格中的 $N \\times (k/2)$ 条无向边。对于每条这样的边，比如 $(u, v)$，会做出一个随机决定。以概率 $p$，边 $(u, v)$ 被重连。重连包括移除边 $(u, v)$ 并添加一条新边 $(u, w)$，其中新目标节点 $w$ 是从所有非 $u$ 且尚未与 $u$ 连接的节点中均匀随机选择的。此过程确保不会创建自环 ($u=w$) 或 $u$ 和 $w$ 之间的多重边。所得图保持无向，因此如果我们添加边 $(u,w)$，我们也必须考虑边 $(w,u)$。\n\n最终的邻接矩阵 $A \\in \\{0,1\\}^{N \\times N}$ 表示所得简单无向图的连通性。使用指定种子的伪随机数生成器确保了网络结构的可复现性。\n\n**2. DeGroot 信念动态**\n\n交易者信念的演化由一个带有锚定项的 DeGroot 模型控制。令 $\\mathbf{x}(t) = [x_1(t), \\dots, x_N(t)]^T$ 为离散时间 $t$ 的信念向量。\n\n社会影响矩阵 $W$ 定义为 $W = D^{-1} A$，其中 $A$ 是网络构建得到的邻接矩阵，$D$ 是节点度的对角矩阵，$D_{ii} = \\text{deg}(i) = \\sum_{j=0}^{N-1} A_{ij}$。元素 $W_{ij} = A_{ij} / \\text{deg}(i)$ 代表交易者 $j$ 对交易者 $i$ 的影响。如果 $\\text{deg}(i) = 0$，$W$ 的第 $i$ 行为全零。$W$ 是一个行随机矩阵，意味着其行和为 $1$（除非度为 $0$）。\n\n信念更新方程由下式给出：\n$$\n\\mathbf{x}(t+1) = (1-\\alpha) W \\mathbf{x}(t) + \\alpha F \\mathbf{1}\n$$\n其中 $\\alpha \\in [0,1]$ 是对公共信号 $F \\in \\mathbb{R}$ 的锚定权重，$\\mathbf{1}$ 是 $N$ 维全一向量。该方程描述了作用于交易者信念的两种竞争力量：来自邻居的社会影响（由 $(1-\\alpha)$ 缩放）和朝向基本价值 $F$ 的锚定拉力（由 $\\alpha$ 缩放）。\n\n当 $\\alpha > 0$ 时，系统存在唯一的平衡点 $\\mathbf{x}^*$。在平衡状态下，$\\mathbf{x}^* = (1-\\alpha) W \\mathbf{x}^* + \\alpha F \\mathbf{1}$。对于连通图，$W$ 对应于特征值 $1$ 的唯一特征向量是 $\\mathbf{1}$。系统收敛至一个共识，因此 $\\mathbf{x}^* = c \\mathbf{1}$，其中 $c$ 为某个常数。将此代入平衡方程得到 $c \\mathbf{1} = (1-\\alpha) c W \\mathbf{1} + \\alpha F \\mathbf{1} = (1-\\alpha) c \\mathbf{1} + \\alpha F \\mathbf{1}$。化简得 $\\alpha c = \\alpha F$，在 $\\alpha > 0$ 的情况下，这意味着 $c=F$。因此，所有信念以及它们的平均值（市场价格 $P(t)$）都将收敛到基本价值 $F$。\n\n在 $\\alpha=0$ 的特殊情况下，方程变为 $\\mathbf{x}(t+1) = W \\mathbf{x}(t)$。系统仍然会收敛到一个共识 $c$，但 $c$ 的值由初始条件和网络结构决定。具体地，$c = \\sum_i \\pi_i x_i(0)$，其中 $\\pi$ 是图上随机游走的平稳分布，由 $\\pi_i = \\text{deg}(i) / \\sum_j \\text{deg}(j)$ 给出。给定初始信念 $x_i(0) = F + \\Delta + \\xi_i$，共识值将约等于 $F+\\Delta$，对于 $\\Delta \\neq 0$ 的情况，该值不等于 $F$。因此，预计不会满足收敛条件 $|P(t) - F| \\le \\varepsilon$。\n\n**3. 数值模拟与到达时间**\n\n任务是计算首次到达时间 $\\tau$，定义为：\n$$\n\\tau = \\min\\{t \\in \\{1, 2, \\dots, T_{\\max}\\} : |P(t) - F| \\le \\varepsilon \\}\n$$\n如果在 $t=T_{\\max}$ 之前条件未被满足，则 $\\tau = T_{\\max}$。\n\n每个测试用例的模拟算法如下：\n1. 为保证可复现性，设置伪随机数生成器的种子。\n2. 根据给定的参数 $N$、$k$ 和 $p$ 构建 Watts-Strogatz 网络的邻接矩阵 $A$。\n3. 计算度矩阵 $D$ 和影响矩阵 $W = D^{-1} A$。注意处理任何孤立节点（度为 $0$）的除零问题。\n4. 初始化信念向量 $\\mathbf{x}(0)$。对每个 $i$，$x_i(0) = F + \\Delta + \\xi_i$，其中 $\\xi_i$ 是从正态分布 $\\mathcal{N}(0, \\sigma^2)$ 中独立抽取的样本。固定的模型参数为 $F=100.0$、$\\Delta=5.0$ 和 $\\sigma=1.0$。\n5. 从时间步 $t=1$ 到 $T_{\\max}$ 迭代模拟：\n    a. 更新信念向量：$\\mathbf{x}(t) = (1-\\alpha) W \\mathbf{x}(t-1) + \\alpha F \\mathbf{1}$。\n    b. 计算市场价格：$P(t) = \\frac{1}{N} \\sum_{i=0}^{N-1} x_i(t)$。\n    c. 检查收敛性：如果 $|P(t) - F| \\le \\varepsilon$，则将当前时间步 $t$ 记录为 $\\tau$ 并终止此用例的模拟。\n6. 如果循环完成仍未满足收敛准则，则设置 $\\tau = T_{\\max}$。\n\n对每个指定的测试用例执行此过程，以生成所需的到达时间列表。", "answer": "```python\nimport numpy as np\n\ndef construct_watts_strogatz(N, k, p, rng):\n    \"\"\"\n    Constructs a Watts-Strogatz small-world network.\n\n    Args:\n        N (int): Number of nodes.\n        k (int): Even integer for the degree of each node in the initial lattice.\n        p (float): Rewiring probability.\n        rng (np.random.Generator): Random number generator for reproducibility.\n\n    Returns:\n        np.ndarray: The N x N adjacency matrix of the graph.\n    \"\"\"\n    if k % 2 != 0 or k >= N:\n        raise ValueError(\"k must be an even integer and less than N.\")\n\n    A = np.zeros((N, N), dtype=np.int8)\n    \n    # 1. Create the initial regular ring lattice\n    edges_to_rewire = []\n    for i in range(N):\n        for j in range(1, k // 2 + 1):\n            neighbor = (i + j) % N\n            A[i, neighbor] = 1\n            A[neighbor, i] = 1\n            # \"right-side\" edges are defined as (i, i+j)\n            edges_to_rewire.append((i, neighbor))\n\n    # 2. Rewire edges\n    for u, v in edges_to_rewire:\n        if rng.random() < p:\n            # Find a a suitable node 'w' to rewire to\n            # 'w' cannot be 'u' or an existing neighbor of 'u'\n            current_neighbors = np.where(A[u, :] == 1)[0]\n            possible_targets = np.setdiff1d(np.arange(N), np.append(current_neighbors, u))\n\n            if len(possible_targets) > 0:\n                w = rng.choice(possible_targets)\n                \n                # Remove old edge (u, v)\n                A[u, v] = 0\n                A[v, u] = 0\n                \n                # Add new edge (u, w)\n                A[u, w] = 1\n                A[w, u] = 1\n    \n    return A\n\ndef simulate_convergence(N, k, p, alpha, epsilon, T_max, seed):\n    \"\"\"\n    Simulates belief dynamics on a Watts-Strogatz network and finds the convergence time.\n\n    Args:\n        N (int): Number of traders.\n        k (int): Lattice degree.\n        p (float): Rewiring probability.\n        alpha (float): Anchoring weight.\n        epsilon (float): Convergence tolerance.\n        T_max (int): Maximum simulation steps.\n        seed (int): Seed for the random number generator.\n\n    Returns:\n        int: The hitting time tau.\n    \"\"\"\n    # Fixed parameters from the problem description\n    F = 100.0\n    DELTA = 5.0\n    SIGMA = 1.0\n    \n    # Initialize random number generator for reproducibility\n    rng = np.random.default_rng(seed)\n\n    # 1. Construct the network\n    A = construct_watts_strogatz(N, k, p, rng)\n\n    # 2. Set up the belief dynamics matrices\n    degrees = A.sum(axis=1)\n    # Handle isolated nodes (degree=0) by keeping their row as all zeros\n    W = np.divide(A, degrees[:, np.newaxis], out=np.zeros_like(A, dtype=float), where=degrees[:, np.newaxis] != 0)\n    \n    one_vector = np.ones(N)\n    \n    # 3. Initialize beliefs\n    xi = rng.normal(0, SIGMA, N)\n    x = F + DELTA + xi\n\n    # 4. Run simulation\n    for t in range(1, T_max + 1):\n        # Update beliefs\n        x = (1 - alpha) * (W @ x) + alpha * F * one_vector\n        \n        # Calculate market price\n        P_t = np.mean(x)\n        \n        # Check for convergence\n        if abs(P_t - F) <= epsilon:\n            return t\n            \n    # If convergence is not reached by T_max\n    return T_max\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    # Test cases: (N, k, p, alpha, epsilon, T_max, seed)\n    test_cases = [\n        (150, 4, 0.0, 0.05, 1e-3, 5000, 1),\n        (150, 4, 0.05, 0.05, 1e-3, 5000, 1),\n        (150, 4, 0.2, 0.05, 1e-3, 5000, 1),\n        (150, 4, 1.0, 0.05, 1e-3, 5000, 1),\n        (150, 4, 0.2, 0.0, 1e-3, 5000, 1),\n        (150, 2, 0.5, 0.05, 1e-3, 5000, 2),\n    ]\n\n    results = []\n    for case in test_cases:\n        tau = simulate_convergence(*case)\n        results.append(tau)\n\n    # Print output in the required format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}]}