{"hands_on_practices": [{"introduction": "将宏观经济理论模型转化为可用于实证分析的状态空间形式，是现代宏观经济学的一项基本功。这项练习将指导你把一个标准的真实商业周期 (RBC) 模型的线性化解表示为状态空间形式 [@problem_id:2433394]。通过这个过程，你不仅能加深对模型动态结构的理解，还能为后续使用卡尔曼滤波等工具进行估计和分析奠定基础。", "problem": "考虑一个标准的真实商业周期 (RBC) 模型，该模型具有单一外生技术过程。令 $z_t$ 表示技术对其稳态的对数偏差，该过程遵循一个平稳的一阶自回归过程。假设RBC模型的均衡条件已经在确定性稳态周围进行了对数线性化，并已求解出政策和度量关系，这些关系将下一期资本和当期产出与当期状态变量联系起来。具体而言，令技术的运动定律由下式给出\n$$\nz_{t+1} = \\rho\\, z_t + \\sigma\\, \\varepsilon_{t+1},\n$$\n其中 $\\varepsilon_{t}$ 是独立同分布的，且 $\\varepsilon_t \\sim \\mathcal{N}(0,1)$，并且线性化的政策和产出关系为\n$$\nk_{t+1} = \\phi_k\\, k_t + \\phi_z\\, z_t, \\quad y_t = \\psi_k\\, k_t + \\psi_z\\, z_t,\n$$\n其中 $k_t$ 是资本相对于稳态的对数偏差，$y_t$ 是产出相对于稳态的对数偏差。假设所有变量都是协方差平稳的，并且参数满足稳定性条件，以确保存在唯一的平稳解。\n\n1. 从这些定义出发，构建最小线性高斯状态空间模型，其状态向量为 $x_t = \\begin{pmatrix} k_t \\\\ z_t \\end{pmatrix}$，度量值为 $y_t$。请用参数 $\\phi_k$, $\\phi_z$, $\\rho$, $\\sigma$, $\\psi_k$ 和 $\\psi_z$ 明确写出状态转移矩阵、扰动载荷矩阵和度量矩阵。\n\n2. 使用状态空间表示法，通过求解关于 $x_t$ 的平稳状态协方差矩阵的离散时间李雅普诺夫方程，推导出 $y_t$ 的无条件方差的显式表达式（用模型参数表示）。\n\n3. 对于给定的参数值 $\\phi_k = 0.85$, $\\phi_z = 0.10$, $\\rho = 0.90$, $\\sigma = 0.02$, $\\psi_k = 0.30$ 和 $\\psi_z = 1.00$，数值计算 $y_t$ 的无条件方差。将答案四舍五入到四位有效数字。将最终答案表示为一个纯数字（无单位）。", "solution": "问题陈述已解析并验证。这是一个标准的、适定的计算宏观经济学问题，不存在科学或逻辑上的矛盾。所有必需的定义和参数都已给出。我们可以直接进行求解。\n\n该问题要求分三步解决：首先，构建线性状态空间模型；其次，推导度量变量的无条件方差；第三，对给定的一组参数，对该方差进行数值计算。\n\n第一部分：状态空间模型的构建\n\n线性高斯状态空间模型由一个状态转移方程和一个度量方程表示。\n状态转移方程的一般形式为 $x_{t+1} = A x_t + B w_{t+1}$，其中 $x_t$ 是状态向量，$A$ 是状态转移矩阵，$w_{t+1}$ 是一个均值为零、协方差矩阵为单位矩阵的独立同分布 (i.i.d.) 扰动向量，$B$ 是扰动载荷矩阵。\n度量方程的一般形式为 $y_t = C x_t + D w_t$，其中 $y_t$ 是观测变量向量，$C$ 是度量矩阵。在本题中，度量方程中没有同期扰动，因此 $D$ 是一个零矩阵。\n\n状态向量给定为 $x_t = \\begin{pmatrix} k_t \\\\ z_t \\end{pmatrix}$。扰动是一个标量，$w_{t+1} = \\varepsilon_{t+1}$，其中 $\\varepsilon_{t+1} \\sim \\mathcal{N}(0,1)$。\n\n我们通过组合给定的状态变量 $k_t$ 和 $z_t$ 的运动定律来构建状态转移方程：\n资本 $k_{t+1}$ 的运动定律为 $k_{t+1} = \\phi_k k_t + \\phi_z z_t$。\n技术 $z_{t+1}$ 的运动定律为 $z_{t+1} = \\rho z_t + \\sigma \\varepsilon_{t+1}$。\n\n我们可以将这两个方程写成矩阵形式：\n$$\n\\begin{pmatrix} k_{t+1} \\\\ z_{t+1} \\end{pmatrix} = \\begin{pmatrix} \\phi_k & \\phi_z \\\\ 0 & \\rho \\end{pmatrix} \\begin{pmatrix} k_t \\\\ z_t \\end{pmatrix} + \\begin{pmatrix} 0 \\\\ \\sigma \\end{pmatrix} \\varepsilon_{t+1}\n$$\n由此，我们确定状态转移矩阵 $A$ 和扰动载荷矩阵 $B$：\n$$\nA = \\begin{pmatrix} \\phi_k & \\phi_z \\\\ 0 & \\rho \\end{pmatrix}, \\quad B = \\begin{pmatrix} 0 \\\\ \\sigma \\end{pmatrix}\n$$\n度量方程由产出表达式 $y_t = \\psi_k k_t + \\psi_z z_t$ 给出。其矩阵形式为：\n$$\ny_t = \\begin{pmatrix} \\psi_k & \\psi_z \\end{pmatrix} \\begin{pmatrix} k_t \\\\ z_t \\end{pmatrix}\n$$\n由此，我们确定度量矩阵 $C$：\n$$\nC = \\begin{pmatrix} \\psi_k & \\psi_z \\end{pmatrix}\n$$\n至此，最小线性高斯状态空间模型的构建完成。\n\n第二部分：$y_t$ 的无条件方差的推导\n\n$y_t$ 的无条件方差可以从状态向量的无条件协方差矩阵 $\\Gamma_x = \\mathbb{E}[x_t x_t']$ 推导得出。由于这些变量是与稳态的对数偏差，它们的无条件均值为零，因此 $\\Gamma_x$ 就是协方差矩阵。模型被假定为平稳的，所以 $\\Gamma_x$ 不随时间变化。\n\n平稳状态协方差矩阵 $\\Gamma_x$ 是离散时间李雅普诺夫方程的解：\n$$\n\\Gamma_x = A \\Gamma_x A' + B Q B'\n$$\n其中 $Q = \\mathbb{E}[w_{t+1} w_{t+1}'] = \\mathbb{E}[\\varepsilon_{t+1}^2] = 1$。该方程简化为 $\\Gamma_x = A \\Gamma_x A' + B B'$。\n\n令 $\\Gamma_x = \\begin{pmatrix} \\gamma_{kk} & \\gamma_{kz} \\\\ \\gamma_{zk} & \\gamma_{zz} \\end{pmatrix}$，其中 $\\gamma_{ij} = \\text{Cov}(i_t, j_t)$。根据对称性，$\\gamma_{kz} = \\gamma_{zk}$。我们有：\n$$\nB B' = \\begin{pmatrix} 0 \\\\ \\sigma \\end{pmatrix} \\begin{pmatrix} 0 & \\sigma \\end{pmatrix} = \\begin{pmatrix} 0 & 0 \\\\ 0 & \\sigma^2 \\end{pmatrix}\n$$\n$$\nA \\Gamma_x A' = \\begin{pmatrix} \\phi_k & \\phi_z \\\\ 0 & \\rho \\end{pmatrix} \\begin{pmatrix} \\gamma_{kk} & \\gamma_{kz} \\\\ \\gamma_{kz} & \\gamma_{zz} \\end{pmatrix} \\begin{pmatrix} \\phi_k & 0 \\\\ \\phi_z & \\rho \\end{pmatrix} = \\begin{pmatrix} \\phi_k^2\\gamma_{kk} + 2\\phi_k\\phi_z\\gamma_{kz} + \\phi_z^2\\gamma_{zz} & \\rho(\\phi_k\\gamma_{kz} + \\phi_z\\gamma_{zz}) \\\\ \\rho(\\phi_k\\gamma_{kz} + \\phi_z\\gamma_{zz}) & \\rho^2\\gamma_{zz} \\end{pmatrix}\n$$\n将这些代入李雅普诺夫方程，得到一个包含 $\\Gamma_x$ 的三个未知元素的方程组：\n1.  从 (2,2) 元素可得：$\\gamma_{zz} = \\rho^2\\gamma_{zz} + \\sigma^2 \\implies \\gamma_{zz}(1-\\rho^2) = \\sigma^2$。由此得出：\n    $$\n    \\gamma_{zz} = \\frac{\\sigma^2}{1-\\rho^2}\n    $$\n    这是平稳AR(1)过程的著名方差公式。\n2.  从 (1,2) 元素可得：$\\gamma_{kz} = \\rho(\\phi_k\\gamma_{kz} + \\phi_z\\gamma_{zz}) \\implies \\gamma_{kz}(1-\\rho\\phi_k) = \\rho\\phi_z\\gamma_{zz}$。由此得出：\n    $$\n    \\gamma_{kz} = \\frac{\\rho\\phi_z}{1-\\rho\\phi_k}\\gamma_{zz} = \\frac{\\rho\\phi_z\\sigma^2}{(1-\\rho\\phi_k)(1-\\rho^2)}\n    $$\n3.  从 (1,1) 元素可得：$\\gamma_{kk} = \\phi_k^2\\gamma_{kk} + 2\\phi_k\\phi_z\\gamma_{kz} + \\phi_z^2\\gamma_{zz} \\implies \\gamma_{kk}(1-\\phi_k^2) = 2\\phi_k\\phi_z\\gamma_{kz} + \\phi_z^2\\gamma_{zz}$。由此得出：\n    $$\n    \\gamma_{kk} = \\frac{2\\phi_k\\phi_z\\gamma_{kz} + \\phi_z^2\\gamma_{zz}}{1-\\phi_k^2}\n    $$\n$y_t$ 的无条件方差由 $\\text{Var}(y_t) = \\mathbb{E}[y_t^2] = \\mathbb{E}[(C x_t)(C x_t)'] = C \\mathbb{E}[x_t x_t'] C' = C \\Gamma_x C'$ 给出。\n$$\n\\text{Var}(y_t) = \\begin{pmatrix} \\psi_k & \\psi_z \\end{pmatrix} \\begin{pmatrix} \\gamma_{kk} & \\gamma_{kz} \\\\ \\gamma_{kz} & \\gamma_{zz} \\end{pmatrix} \\begin{pmatrix} \\psi_k \\\\ \\psi_z \\end{pmatrix} = \\psi_k^2\\gamma_{kk} + 2\\psi_k\\psi_z\\gamma_{kz} + \\psi_z^2\\gamma_{zz}\n$$\n这是 $y_t$ 的无条件方差的显式表达式，它用模型参数和状态协方差矩阵的元素表示，而这些元素本身也已用基础模型参数表示。\n\n第三部分：数值计算\n\n我们给定的参数值为：$\\phi_k = 0.85$, $\\phi_z = 0.10$, $\\rho = 0.90$, $\\sigma = 0.02$, $\\psi_k = 0.30$ 和 $\\psi_z = 1.00$。我们接下来计算 $\\Gamma_x$ 的分量，然后计算 $\\text{Var}(y_t)$。\n\n1.  计算 $\\gamma_{zz}$：\n    $$\n    \\gamma_{zz} = \\frac{(0.02)^2}{1 - (0.90)^2} = \\frac{0.0004}{1 - 0.81} = \\frac{0.0004}{0.19} \\approx 0.00210526\n    $$\n2.  计算 $\\gamma_{kz}$：\n    $$\n    \\gamma_{kz} = \\frac{(0.90)(0.10)}{1 - (0.90)(0.85)} \\gamma_{zz} = \\frac{0.09}{1 - 0.765} \\gamma_{zz} = \\frac{0.09}{0.235} \\gamma_{zz} \\approx 0.3829787 \\times 0.00210526 \\approx 0.00080608\n    $$\n3.  计算 $\\gamma_{kk}$：\n    $$\n    \\gamma_{kk} = \\frac{2(0.85)(0.10)\\gamma_{kz} + (0.10)^2\\gamma_{zz}}{1 - (0.85)^2} = \\frac{0.17\\gamma_{kz} + 0.01\\gamma_{zz}}{1 - 0.7225} = \\frac{0.17\\gamma_{kz} + 0.01\\gamma_{zz}}{0.2775}\n    $$\n    代入中间值：\n    $$\n    \\gamma_{kk} \\approx \\frac{0.17(0.00080608) + 0.01(0.00210526)}{0.2775} = \\frac{0.00013703 + 0.00002105}{0.2775} = \\frac{0.00015808}{0.2775} \\approx 0.00056968\n    $$\n4.  计算 $\\text{Var}(y_t)$：\n    $$\n    \\text{Var}(y_t) = \\psi_k^2\\gamma_{kk} + 2\\psi_k\\psi_z\\gamma_{kz} + \\psi_z^2\\gamma_{zz}\n    $$\n    $$\n    = (0.30)^2\\gamma_{kk} + 2(0.30)(1.00)\\gamma_{kz} + (1.00)^2\\gamma_{zz}\n    $$\n    $$\n    = 0.09\\gamma_{kk} + 0.6\\gamma_{kz} + \\gamma_{zz}\n    $$\n    代入计算出的方差和协方差项：\n    $$\n    \\text{Var}(y_t) \\approx 0.09(0.00056968) + 0.6(0.00080608) + 0.00210526\n    $$\n    $$\n    \\approx 0.00005127 + 0.00048365 + 0.00210526 = 0.00264018\n    $$\n将最终结果四舍五入到四位有效数字，得到 $0.002640$。", "answer": "$$\n\\boxed{0.002640}\n$$", "id": "2433394"}, {"introduction": "状态空间框架的强大之处在于其统一性，它能够表示各种看似不同的时间序列模型，包括金融计量经济学中常见的协整模型。本练习将引导你将一个描述两支协整股票价格动态的向量误差修正模型 (VECM) 转换为状态空间形式 [@problem_id:2433369]。这个实践将帮助你掌握如何在一个统一的框架下，对具有长期均衡关系的金融时间序列进行建模和分析。", "problem": "考虑两个对数股票价格 $p_{1,t}$ 和 $p_{2,t}$，它们是一阶单整的，并且以协整向量 $\\beta = \\begin{pmatrix}1 \\\\ -1\\end{pmatrix}$ 协整。令 $p_{t} = \\begin{pmatrix}p_{1,t} \\\\ p_{2,t}\\end{pmatrix}$，并假设它们的联合动态遵循一个向量误差修正模型 (VECM)，具体为\n$$\n\\Delta p_{t} = \\alpha\\, \\beta^{\\prime} p_{t-1} + \\varepsilon_{t},\n$$\n其中 $\\alpha = \\begin{pmatrix} a \\\\ b \\end{pmatrix}$，$a \\in \\mathbb{R}$ 且 $b \\in \\mathbb{R}$，并且 $\\varepsilon_{t} = \\begin{pmatrix}\\varepsilon_{1,t} \\\\ \\varepsilon_{2,t}\\end{pmatrix}$ 是一个具有有限二阶矩的零均值、序列不相关的新息过程。定义协整关系为 $c_{t} = \\beta^{\\prime} p_{t} = p_{1,t} - p_{2,t}$。\n\n构造一个线性时不变状态空间表示，其状态向量为 $x_{t} = \\begin{pmatrix} p_{1,t} \\\\ p_{2,t} \\\\ c_{t} \\end{pmatrix}$，并带有一个返回价格向量且无测量噪声的观测方程。具体来说，写出状态转移矩阵 $F$、将 $\\varepsilon_{t}$ 映射到状态的输入（冲击载荷）矩阵 $G$ 以及观测矩阵 $H$，使得\n$$\nx_{t} = F x_{t-1} + G \\varepsilon_{t}, \\quad y_{t} = H x_{t}, \\quad y_{t} = p_{t}.\n$$\n\n然后，计算状态转移矩阵 $F$ 的行列式，作为 $a$ 和 $b$ 的函数。请以单一闭式解析表达式的形式提供最终答案。不要四舍五入。", "solution": "该问题要求为给定的向量误差修正模型 (VECM) 构造一个线性时不变状态空间表示，并随后计算状态转移矩阵的行列式。\n\n首先，我们必须验证问题陈述。\n已知条件：\n1.  对数股票价格 $p_{1,t}$ 和 $p_{2,t}$，构成向量 $p_{t} = \\begin{pmatrix}p_{1,t} \\\\ p_{2,t}\\end{pmatrix}$。\n2.  价格是一阶单整的，I($1$)，并且是协整的。\n3.  协整向量为 $\\beta = \\begin{pmatrix}1 \\\\ -1\\end{pmatrix}$。\n4.  动态由 VECM 描述：$\\Delta p_{t} = \\alpha\\, \\beta^{\\prime} p_{t-1} + \\varepsilon_{t}$，其中 $\\Delta p_t = p_t - p_{t-1}$。\n5.  调整向量为 $\\alpha = \\begin{pmatrix} a \\\\ b \\end{pmatrix}$，$a, b \\in \\mathbb{R}$。\n6.  $\\varepsilon_{t} = \\begin{pmatrix}\\varepsilon_{1,t} \\\\ \\varepsilon_{2,t}\\end{pmatrix}$ 是一个零均值、序列不相关的新息过程。\n7.  协整关系为 $c_{t} = \\beta^{\\prime} p_{t} = p_{1,t} - p_{2,t}$。\n8.  状态向量定义为 $x_{t} = \\begin{pmatrix} p_{1,t} \\\\ p_{2,t} \\\\ c_{t} \\end{pmatrix}$。\n9.  状态空间模型形式为 $x_{t} = F x_{t-1} + G \\varepsilon_{t}$ 和 $y_{t} = H x_{t}$。\n10. 输出为 $y_{t} = p_{t}$，无测量噪声。\n\n该问题有科学依据，是适定且客观的。它基于标准的计量经济模型 (VECM) 及其状态空间表示形式，提供了一个完整且一致的设定。状态向量的定义包含一个冗余状态（$c_t$ 是 $p_{1,t}$ 和 $p_{2,t}$ 的线性组合），但这是一个有效的建模选择，不会引入矛盾。因此，该问题是有效的，可以推导出解。\n\n任务是找到矩阵 $F$、$G$、$H$，然后计算 $\\det(F)$。\n\n我们首先用 $x_{t-1}$ 的分量和新息 $\\varepsilon_t$ 来表示状态向量 $x_t$ 的每个分量的动态。VECM 方程是起点：\n$$ p_t - p_{t-1} = \\alpha \\beta' p_{t-1} + \\varepsilon_t $$\n项 $\\beta' p_{t-1}$ 正是滞后的协整关系 $c_{t-1}$：\n$$ \\beta' p_{t-1} = \\begin{pmatrix} 1 & -1 \\end{pmatrix} \\begin{pmatrix} p_{1,t-1} \\\\ p_{2,t-1} \\end{pmatrix} = p_{1,t-1} - p_{2,t-1} = c_{t-1} $$\n将此代入 VECM 可得：\n$$ p_t - p_{t-1} = \\alpha c_{t-1} + \\varepsilon_t $$\n$$ p_t = p_{t-1} + \\alpha c_{t-1} + \\varepsilon_t $$\n让我们用单个价格分量来写出这个式子：\n$$ \\begin{pmatrix} p_{1,t} \\\\ p_{2,t} \\end{pmatrix} = \\begin{pmatrix} p_{1,t-1} \\\\ p_{2,t-1} \\end{pmatrix} + \\begin{pmatrix} a \\\\ b \\end{pmatrix} c_{t-1} + \\begin{pmatrix} \\varepsilon_{1,t} \\\\ \\varepsilon_{2,t} \\end{pmatrix} $$\n这为我们的状态空间模型提供了前两个标量方程：\n$$ p_{1,t} = p_{1,t-1} + a c_{t-1} + \\varepsilon_{1,t} $$\n$$ p_{2,t} = p_{2,t-1} + b c_{t-1} + \\varepsilon_{2,t} $$\n\n接下来，我们推导第三个状态变量 $c_t$ 的动态方程。根据定义，$c_t = p_{1,t} - p_{2,t}$。我们代入刚刚找到的 $p_{1,t}$ 和 $p_{2,t}$ 的表达式：\n$$ c_t = (p_{1,t-1} + a c_{t-1} + \\varepsilon_{1,t}) - (p_{2,t-1} + b c_{t-1} + \\varepsilon_{2,t}) $$\n按滞后变量和新息分组：\n$$ c_t = (p_{1,t-1} - p_{2,t-1}) + (a - b)c_{t-1} + (\\varepsilon_{1,t} - \\varepsilon_{2,t}) $$\n认识到 $p_{1,t-1} - p_{2,t-1} = c_{t-1}$，我们简化表达式：\n$$ c_t = c_{t-1} + (a-b)c_{t-1} + (\\varepsilon_{1,t} - \\varepsilon_{2,t}) $$\n$$ c_t = (1 + a - b)c_{t-1} + \\varepsilon_{1,t} - \\varepsilon_{2,t} $$\n\n现在我们有了所需的三个动态方程。我们可以将它们组合成状态转移方程 $x_t = F x_{t-1} + G \\varepsilon_t$：\n$$\n\\begin{pmatrix} p_{1,t} \\\\ p_{2,t} \\\\ c_t \\end{pmatrix}\n=\n\\begin{pmatrix}\n1 \\cdot p_{1,t-1} + 0 \\cdot p_{2,t-1} + a \\cdot c_{t-1} \\\\\n0 \\cdot p_{1,t-1} + 1 \\cdot p_{2,t-1} + b \\cdot c_{t-1} \\\\\n0 \\cdot p_{1,t-1} + 0 \\cdot p_{2,t-1} + (1+a-b) \\cdot c_{t-1}\n\\end{pmatrix}\n+\n\\begin{pmatrix}\n1 \\cdot \\varepsilon_{1,t} + 0 \\cdot \\varepsilon_{2,t} \\\\\n0 \\cdot \\varepsilon_{1,t} + 1 \\cdot \\varepsilon_{2,t} \\\\\n1 \\cdot \\varepsilon_{1,t} - 1 \\cdot \\varepsilon_{2,t}\n\\end{pmatrix}\n$$\n这可以写成矩阵形式：\n$$\n\\begin{pmatrix} p_{1,t} \\\\ p_{2,t} \\\\ c_t \\end{pmatrix} =\n\\begin{pmatrix} 1 & 0 & a \\\\ 0 & 1 & b \\\\ 0 & 0 & 1+a-b \\end{pmatrix}\n\\begin{pmatrix} p_{1,t-1} \\\\ p_{2,t-1} \\\\ c_{t-1} \\end{pmatrix} +\n\\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\\\ 1 & -1 \\end{pmatrix}\n\\begin{pmatrix} \\varepsilon_{1,t} \\\\ \\varepsilon_{2,t} \\end{pmatrix}\n$$\n由此，我们确定状态转移矩阵 $F$ 和输入矩阵 $G$：\n$$ F = \\begin{pmatrix} 1 & 0 & a \\\\ 0 & 1 & b \\\\ 0 & 0 & 1+a-b \\end{pmatrix}, \\quad G = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\\\ 1 & -1 \\end{pmatrix} $$\n对于观测方程 $y_t = H x_t$，我们有 $y_t = p_t = \\begin{pmatrix} p_{1,t} \\\\ p_{2,t} \\end{pmatrix}$。我们需要一个矩阵 $H$ 使得：\n$$ \\begin{pmatrix} p_{1,t} \\\\ p_{2,t} \\end{pmatrix} = H \\begin{pmatrix} p_{1,t} \\\\ p_{2,t} \\\\ c_t \\end{pmatrix} $$\n选择状态向量前两个分量的矩阵是：\n$$ H = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\end{pmatrix} $$\n问题要求计算状态转移矩阵 $F$ 的行列式。矩阵 $F$ 是一个上三角矩阵。任何三角矩阵的行列式是其对角元素的乘积。\n$$ \\det(F) = (1) \\cdot (1) \\cdot (1 + a - b) $$\n$$ \\det(F) = 1 + a - b $$\n这就是所要求的 $F$ 的行列式关于 $a$和$b$ 的函数的闭式解析表达式。", "answer": "$$\\boxed{1 + a - b}$$", "id": "2433369"}, {"introduction": "许多经济和金融数据（如信用评级或调查结果）本质上是离散或有序的，这超出了标准线性高斯模型的范畴。状态空间模型可以通过引入一个连续的潜在变量来灵活地处理这类数据。在这个高级练习中，你将为一个潜在的连续信用分数构建一个状态空间模型，而其观测值是离散的信用评级 [@problem_id:2433415]，这需要你应用处理非线性观测的滤波方法，是状态空间模型应用能力的一次重要提升。", "problem": "要求您为信用评级建立并实现一个状态空间模型，其中潜在状态是连续的潜在信用评分，观测是离散的字母等级。状态方程在一个离散时间索引 $t \\in \\{1,2,\\dots,T\\}$ 上由一个带有高斯新息的线性高斯自回归定义，而观测方程是一个含噪声的潜在分数的序数离散化。\n\n模型规格：\n- 状态动态：潜在信用评分 $x_t \\in \\mathbb{R}$ 根据以下公式演化\n$$\nx_t = \\phi \\, x_{t-1} + \\sigma_w \\, w_t,\n$$\n其中 $w_t \\sim \\mathcal{N}(0,1)$ 在时间 $t$ 上是独立同分布的，$\\phi \\in \\mathbb{R}$ 是已知的，$\\sigma_w \\in \\mathbb{R}_{+}$ 是已知的。\n- 观测：定义一个含噪声的潜在分数 $z_t = x_t + \\sigma_v \\, v_t$，其中 $v_t \\sim \\mathcal{N}(0,1)$ 在时间 $t$ 上是独立同分布的，且 $\\sigma_v \\in \\mathbb{R}_{+}$ 是已知的。您观测到一个离散评级 $y_t$，它指示了 $z_t$ 相对于一组固定阈值 $\\{\\tau_j\\}_{j=0}^{J}$ 所在的区间，其中 $\\tau_0 = -\\infty$ 且 $\\tau_J = +\\infty$。评级集合为 $\\{\\text{\"BB\"}, \\text{\"BBB\"}, \\text{\"A\"}, \\text{\"AA\"}, \\text{\"AAA\"}\\}$，其与区间的映射关系如下：\n    - 当且仅当 $\\tau_0 < z_t \\le \\tau_1$ 时，$y_t = \\text{\"BB\"}$，\n    - 当且仅当 $\\tau_1 < z_t \\le \\tau_2$ 时，$y_t = \\text{\"BBB\"}$，\n    - 当且仅当 $\\tau_2 < z_t \\le \\tau_3$ 时，$y_t = \\text{\"A\"}$，\n    - 当且仅当 $\\tau_3 < z_t \\le \\tau_4$ 时，$y_t = \\text{\"AA\"}$，\n    - 当且仅当 $\\tau_4 < z_t \\le \\tau_5$ 时，$y_t = \\text{\"AAA\"}$，\n  阈值为\n$$\n(\\tau_0,\\tau_1,\\tau_2,\\tau_3,\\tau_4,\\tau_5) = (-\\infty, -1, 0, 1, 2, +\\infty).\n$$\n- 初始条件：$x_0 \\sim \\mathcal{N}(m_0, P_0)$，其中已知的 $m_0 \\in \\mathbb{R}$ 和 $P_0 \\in \\mathbb{R}_{+}$。\n\n任务：\n对于下面给出的每个测试用例，您必须计算：\n1. 在该模型下，观测序列 $y_{1:T}$ 的对数似然，即\n$$\n\\log L = \\sum_{t=1}^{T} \\log \\Pr\\left(y_t \\mid y_{1:t-1}, \\phi, \\sigma_w, \\sigma_v, \\{\\tau_j\\}, m_0, P_0\\right),\n$$\n表示为一个实数。\n2. 在处理完所有 $T$ 个观测之后，滤波后验均值 $\\mathbb{E}[x_T \\mid y_{1:T}]$ 和滤波后验方差 $\\mathrm{Var}(x_T \\mid y_{1:T})$。\n\n所有概率和期望都是相对于指定的高斯状态空间模型而言的。不涉及任何角度或物理单位。所有数值答案必须表示为精确到 $6$ 位小数的十进制数。\n\n测试套件：\n对于每个用例，使用指定的参数和数据序列：\n- 用例 A:\n    - $\\phi = 0.95$，$\\sigma_w = 0.5$，$\\sigma_v = 0.3$，$m_0 = 0.0$，$P_0 = 1.0$，\n    - $y_{1:5} = [\\text{\"A\"}, \\text{\"AA\"}, \\text{\"A\"}, \\text{\"AAA\"}, \\text{\"AA\"}]$。\n- 用例 B:\n    - $\\phi = 1.0$，$\\sigma_w = 0.2$，$\\sigma_v = 0.05$，$m_0 = 1.5$，$P_0 = 0.2$，\n    - $y_{1:3} = [\\text{\"AAA\"}, \\text{\"AA\"}, \\text{\"AAA\"}]$。\n- 用例 C:\n    - $\\phi = 0.0$，$\\sigma_w = 1.5$，$\\sigma_v = 1.0$，$m_0 = -0.5$，$P_0 = 2.0$，\n    - $y_{1:4} = [\\text{\"BB\"}, \\text{\"BBB\"}, \\text{\"A\"}, \\text{\"AA\"}]$。\n\n要求的最终输出格式：\n您的程序应生成一行输出，其中包含一个用逗号分隔并包含在方括号中的列表。此外层列表的每个元素对应一个测试用例（按 A、B、C 的顺序排列），并且必须是一个包含三个精确到 $6$ 位小数的十进制数的列表，顺序为 $[\\log L, \\mathbb{E}[x_T \\mid y_{1:T}], \\mathrm{Var}(x_T \\mid y_{1:T})]$。例如，整体格式必须是\n$[[\\text{用例A三元组}],[\\text{用例B三元组}],[\\text{用例C三元组}]]$\n不含任何额外文本。", "solution": "该问题陈述在科学上是有效且适定的。它详细描述了一个用于序数时间序列的状态空间模型，这是计算经济学和统计学中的一个标准问题。该模型由一个线性高斯状态方程和一个源于对含噪声状态变量进行区间删失的非线性观测机制组成。任务是执行递推贝叶斯滤波，以计算观测序列的对数似然以及状态的最终滤波后验均值和方差。\n\n状态方程是一个一阶自回归过程：\n$$x_t = \\phi x_{t-1} + \\sigma_w w_t, \\quad w_t \\sim \\mathcal{N}(0, 1)$$\n观测值 $y_t$ 由含噪声的潜在分数 $z_t = x_t + \\sigma_v v_t$（其中 $v_t \\sim \\mathcal{N}(0, 1)$）落入哪个区间决定。这构成了一个非线性观测模型，使得标准的卡尔曼滤波器不适用，因为它要求状态和观测模型都是线性和高斯的。\n\n解决方案需要一个递推滤波算法，来传播在给定截至时间 $t$ 的观测值 $y_{1:t}$ 的条件下，状态 $x_t$ 的分布。由于观测的非线性特性，确切的后验分布 $p(x_t \\mid y_{1:t})$ 不是高斯的。为了保持计算上的易处理性，我们通过匹配真实后验的一阶矩和二阶矩，在每个时间步用一个高斯分布 $\\mathcal{N}(x_t; m_{t|t}, P_{t|t})$ 来近似后验分布。这是一种假定密度滤波器。\n\n每个时间步 $t=1, \\dots, T$ 的滤波过程分两个阶段进行：预测和更新。\n\n假设在时间 $t-1$ 的滤波后验分布近似为 $p(x_{t-1} \\mid y_{1:t-1}) \\approx \\mathcal{N}(x_{t-1}; m_{t-1|t-1}, P_{t-1|t-1})$。该过程从 $t=0$ 时的先验分布开始，$p(x_0) = \\mathcal{N}(x_0; m_0, P_0)$，因此 $m_{0|0} = m_0$ 且 $P_{0|0} = P_0$。\n\n1.  **预测步骤：**\n    给定观测值 $y_{1:t-1}$，状态 $x_t$ 的预测分布可使用状态方程得到。由于状态转移是线性的且先验是高斯的，预测分布也是高斯的，$p(x_t \\mid y_{1:t-1}) = \\mathcal{N}(x_t; m_{t|t-1}, P_{t|t-1})$。其矩为：\n    $$m_{t|t-1} = \\mathbb{E}[x_t \\mid y_{1:t-1}] = \\phi m_{t-1|t-1}$$\n    $$P_{t|t-1} = \\mathrm{Var}(x_t \\mid y_{1:t-1}) = \\phi^2 P_{t-1|t-1} + \\sigma_w^2$$\n\n2.  **更新步骤：**\n    观测值 $y_t$ 意味着 $z_t \\in (\\tau_{j-1}, \\tau_j]$（对于某个索引 $j$）。为了更新状态，我们首先建立在给定 $y_{1:t-1}$ 条件下，$(x_t, z_t)$ 的联合预测分布，这是一个二元高斯分布：\n    $$\n    \\begin{pmatrix} x_t \\\\ z_t \\end{pmatrix} \\mid y_{1:t-1} \\sim \\mathcal{N} \\left( \\begin{pmatrix} m_{t|t-1} \\\\ m_{t|t-1} \\end{pmatrix}, \\begin{pmatrix} P_{t|t-1} & P_{t|t-1} \\\\ P_{t|t-1} & P_{t|t-1} + \\sigma_v^2 \\end{pmatrix} \\right)\n    $$\n    因此，含噪声分数 $z_t$ 的预测分布为 $p(z_t \\mid y_{1:t-1}) = \\mathcal{N}(z_t; \\mu_z, \\sigma_z^2)$，其中 $\\mu_z = m_{t|t-1}$ 且 $\\sigma_z^2 = P_{t|t-1} + \\sigma_v^2$。\n\n    观测值 $y_t$ 的一步向前预测似然（计算总对数似然所需）是：\n    $$L_t = \\Pr(y_t \\mid y_{1:t-1}) = \\Pr(\\tau_{j-1} < z_t \\le \\tau_j \\mid y_{1:t-1}) = \\Phi\\left(\\frac{\\tau_j - \\mu_z}{\\sigma_z}\\right) - \\Phi\\left(\\frac{\\tau_{j-1} - \\mu_z}{\\sigma_z}\\right)$$\n    其中 $\\Phi(\\cdot)$ 表示标准正态累积分布函数（CDF）。总对数似然为 $\\log L = \\sum_{t=1}^T \\log L_t$。\n\n    滤波后验矩 $m_{t|t} = \\mathbb{E}[x_t \\mid y_{1:t}]$ 和 $P_{t|t} = \\mathrm{Var}(x_t \\mid y_{1:t})$ 是使用条件高斯分布的性质计算的。这些可以用截断到区间 $(\\tau_{j-1}, \\tau_j]$ 的 $z_t$ 预测分布的矩来表示。令 $M_z = \\mathbb{E}[z_t \\mid y_{1:t}]$ 和 $V_z = \\mathrm{Var}(z_t \\mid y_{1:t})$。对于一个在区间 $(a, b]$ 上截断的正态变量 $Y \\sim \\mathcal{N}(\\mu, \\sigma^2)$，其矩的公式为：\n    $$ \\mathbb{E}[Y \\mid a < Y \\le b] = \\mu + \\sigma \\frac{\\phi_{std}(\\alpha) - \\phi_{std}(\\beta)}{\\Phi_{std}(\\beta) - \\Phi_{std}(\\alpha)} $$\n    $$ \\mathrm{Var}(Y \\mid a < Y \\le b) = \\sigma^2 \\left[ 1 + \\frac{\\alpha\\phi_{std}(\\alpha) - \\beta\\phi_{std}(\\beta)}{\\Phi_{std}(\\beta) - \\Phi_{std}(\\alpha)} - \\left( \\frac{\\phi_{std}(\\alpha) - \\phi_{std}(\\beta)}{\\Phi_{std}(\\beta) - \\Phi_{std}(\\alpha)} \\right)^2 \\right] $$\n    其中 $\\alpha = (a-\\mu)/\\sigma$，$\\beta = (b-\\mu)/\\sigma$，而 $\\phi_{std}(\\cdot)$ 是标准正态概率密度函数（PDF）。将这些应用于 $z_t$ 就可以得到 $M_z$ 和 $V_z$。\n\n    然后，$x_t$ 的更新后矩为：\n    $$m_{t|t} = m_{t|t-1} + K_t (M_z - \\mu_z)$$\n    $$P_{t|t} = P_{t|t-1} - K_t^2 (\\sigma_z^2 - V_z)$$\n    其中，类似增益的项 $K_t$ 由 $K_t = \\mathrm{Cov}(x_t, z_t \\mid y_{1:t-1}) / \\mathrm{Var}(z_t \\mid y_{1:t-1}) = P_{t|t-1} / \\sigma_z^2$ 给出。\n\n对序列中的所有观测值重复此递推过程。每个测试用例的最终结果是总对数似然 $\\log L$、最终滤波均值 $m_{T|T}$ 和最终滤波方差 $P_{T|T}$。实现将遵循此算法。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import norm\n\ndef solve():\n    \"\"\"\n    Solves the credit rating state-space model filtering problem for a suite of test cases.\n    \"\"\"\n    \n    # Test case definitions\n    test_cases = [\n        # Case A\n        {'phi': 0.95, 'sigma_w': 0.5, 'sigma_v': 0.3, 'm0': 0.0, 'P0': 1.0, \n         'y_seq': [\"A\", \"AA\", \"A\", \"AAA\", \"AA\"]},\n        # Case B\n        {'phi': 1.0, 'sigma_w': 0.2, 'sigma_v': 0.05, 'm0': 1.5, 'P0': 0.2, \n         'y_seq': [\"AAA\", \"AA\", \"AAA\"]},\n        # Case C\n        {'phi': 0.0, 'sigma_w': 1.5, 'sigma_v': 1.0, 'm0': -0.5, 'P0': 2.0, \n         'y_seq': [\"BB\", \"BBB\", \"A\", \"AA\"]}\n    ]\n\n    # Mapping from discrete credit ratings to intervals on the latent score\n    rating_map = {\n        \"BB\": (-np.inf, -1.0),\n        \"BBB\": (-1.0, 0.0),\n        \"A\": (0.0, 1.0),\n        \"AA\": (1.0, 2.0),\n        \"AAA\": (2.0, np.inf)\n    }\n\n    final_results = []\n    \n    for case in test_cases:\n        # Unpack parameters for the current test case\n        phi = case['phi']\n        sigma_w = case['sigma_w']\n        sigma_v = case['sigma_v']\n        m_filt = case['m0']\n        P_filt = case['P0']\n        y_seq = case['y_seq']\n        \n        log_likelihood = 0.0\n\n        for y_t in y_seq:\n            # 1. Prediction step\n            m_pred = phi * m_filt\n            P_pred = phi**2 * P_filt + sigma_w**2\n\n            # 2. Update step\n            tau_lower, tau_upper = rating_map[y_t]\n\n            # Predictive distribution for the noisy latent score z_t\n            mu_z = m_pred\n            var_z = P_pred + sigma_v**2\n            sigma_z = np.sqrt(var_z)\n\n            # Standardized interval bounds for the truncated normal calculation\n            alpha = (tau_lower - mu_z) / sigma_z\n            beta = (tau_upper - mu_z) / sigma_z\n\n            # Predictive likelihood of the observation\n            cdf_beta = norm.cdf(beta)\n            cdf_alpha = norm.cdf(alpha)\n            likelihood_t = cdf_beta - cdf_alpha\n            \n            # Update total log-likelihood, with a check for numerical stability\n            if likelihood_t > 1e-300:\n                log_likelihood += np.log(likelihood_t)\n            else:\n                # If likelihood is effectively zero, the observation is considered impossible\n                # under the model. The log-likelihood approaches -infinity.\n                log_likelihood += -700.0\n\n            # Calculate moments of the truncated normal distribution for z_t\n            pdf_alpha = 0.0 if np.isneginf(alpha) else norm.pdf(alpha)\n            pdf_beta = 0.0 if np.isposinf(beta) else norm.pdf(beta)\n            pdf_diff = pdf_alpha - pdf_beta\n\n            M_z, var_z_trunc = 0.0, 0.0\n            if likelihood_t > 1e-300:\n                # Mean of truncated z_t\n                M_z = mu_z + sigma_z * pdf_diff / likelihood_t\n\n                # Variance of truncated z_t\n                alpha_pdf_alpha = 0.0 if np.isneginf(alpha) else alpha * pdf_alpha\n                beta_pdf_beta = 0.0 if np.isposinf(beta) else beta * pdf_beta\n                var_factor_num = alpha_pdf_alpha - beta_pdf_beta\n                \n                var_z_trunc = var_z * (1.0 + var_factor_num / likelihood_t - (pdf_diff / likelihood_t)**2)\n            else:\n                # If likelihood is zero, the update is ill-defined.\n                # We do not update the moments, effectively keeping the prediction.\n                # This scenario is not expected with the given test data.\n                M_z = mu_z\n                var_z_trunc = var_z\n            \n            # Update state mean and variance via moment matching\n            K = P_pred / var_z\n            \n            m_filt = m_pred + K * (M_z - mu_z)\n            P_filt = (1.0 - K) * P_pred + K**2 * var_z_trunc\n\n        # Store the final rounded results for this case\n        final_results.append([\n            f\"{m_filt:.6f}\",\n            f\"{P_filt:.6f}\",\n            f\"{log_likelihood:.6f}\"\n        ])\n\n    # Format the final output string to match the required specification exactly.\n    # The required order is [log L, E[x_T], Var(x_T)]. My list has [E, V, logL]. I'll reorder.\n    output_parts = [f\"[{res[2]},{res[0]},{res[1]}]\" for res in final_results]\n    print(f\"[{','.join(output_parts)}]\")\n\nsolve()\n```", "id": "2433415"}]}