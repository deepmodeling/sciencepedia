{"hands_on_practices": [{"introduction": "在深入研究复杂的浮点数问题之前，从一个更简单的系统——定点数入手会很有帮助。本练习将引导你将一个实数转换为二进制定点数表示，并在此过程中应用两种基本的舍入模式：截断和四舍五入到最近的偶数。这为你理解精度如何在数字表示中损失提供了一个具体的基础。[@problem_id:2199486]", "problem": "一个为远程环境监测站设计的嵌入式系统使用了一款专门的低功耗处理器。为节省功耗和芯片面积，该处理器避免使用浮点运算，而是使用一种有符号8位定点格式来表示所有传感器数据。该格式定义为 Q3.4，表示每个8位数包含1个符号位、3个整数位和4个小数位。\n\n一个新的气压传感器经过校准，输出一个归一化值，该值可正可负。来自该传感器的一个特定读数是 $-0.3$。在处理该值之前，必须将其转换为 Q3.4 二进制格式。处理器的指令集架构为此转换提供了两种不同的舍入模式：\n1.  **截断（向零舍入）：** 丢弃数字的小数部分。例如，$5.9$ 变为 $5$，$−5.9$ 变为 $−5$。\n2.  **向最近偶数舍入（收敛舍入）：** 将数字舍入到最接近的整数。如果数字恰好在两个整数中间（例如，小数部分恰好为 $0.5$），则舍入到最接近的偶数。例如，$5.5$ 舍入为 $6$，$4.5$ 舍入为 $4$。\n\n请确定在使用上述两种舍入模式转换后，代表传感器读数 $-0.3$ 的二进制模式所对应的两个8位有符号整数值。请将你的答案表示为一个整数对，格式为（截断结果，向最近偶数舍入结果）。", "solution": "在一个总位数为8位的有符号 Q3.4 定点格式中，有1个符号位、3个整数位和4个小数位。因此，量化步长为 $2^{-4}$。将实数 $x$ 转换为此格式的过程是通过缩放和舍入完成的：\n$$\nS = x \\cdot 2^{4}, \\quad I = R(S),\n$$\n其中 $R(\\cdot)$ 是舍入规则，存储的8位有符号整数是 $I$。所表示的实数值为 $I \\cdot 2^{-4}$。\n\n对于 $x=-0.3$，缩放后的值为\n$$\nS = -0.3 \\cdot 2^{4} = -0.3 \\cdot 16 = -4.8.\n$$\n\n在截断（向零舍入）规则下，丢弃小数部分，这对于负数相当于取上界（ceiling）：\n$$\nI_{\\text{trunc}} = -4.\n$$\n\n在向最近偶数舍入规则下，我们选择最接近 $-4.8$ 的整数。由于 $-5$ 比 $-4$ 更接近，并且没有平局（不是恰好在中间），因此结果是\n$$\nI_{\\text{rne}} = -5.\n$$\n\n$I_{\\text{trunc}}$ 和 $I_{\\text{rne}}$ 都在有效的8位有符号整数范围内，因此不需要饱和处理。因此，所要求的8位有符号整数对为 $\\left(-4,-5\\right)$，顺序为（截断，向最近偶数舍入）。", "answer": "$$\\boxed{\\begin{pmatrix}-4  -5\\end{pmatrix}}$$", "id": "2199486"}, {"introduction": "理解了基本的舍入操作后，我们来探讨其可能带来的严重后果。本练习将揭示一个被称为“灾难性相消”（catastrophic cancellation）的严重数值陷阱，即两个几乎相等的数相减会导致有效数字的急剧损失。通过比较一个直接计算式和一个代数上等价但数值上更稳定的公式，你将亲身体会到为何算法的选择与机器的精度同等重要。[@problem_id:2199459]", "problem": "一个用于金融分析的计算系统使用一种特定的十进制浮点算法。在该系统中，每个数字的存储以及每次运算（加法、减法、乘法、除法和平方根）的中间结果都会立即舍入到恰好5位十进制有效数字的精度。该系统采用“向最近偶数舍入”（round half to even）的舍入规则，即数值被舍入到最接近的值，而恰好在两个可表示数中间的值则舍入到末位为偶数的那个数。\n\n你的任务是对于输入值 $x = 8888$ 来计算函数 $f(x) = \\sqrt{x+1} - \\sqrt{x}$ 的值。\n\n首先，使用 $f(x)$ 的表达式直接计算函数值。设该结果为 $v_1$。\n\n其次，使用代数上等价的表达式 $g(x) = \\frac{1}{\\sqrt{x+1} + \\sqrt{x}}$ 计算函数值。设该结果为 $v_2$。\n\n假设从第二种方法得到的值 $v_2$ 是对真实值更精确的表示，计算第一种方法结果 $v_1$ 的相对误差。相对误差定义为 $\\frac{|v_2 - v_1|}{|v_2|}$。\n\n将相对误差的最终答案表示为小数，并四舍五入到三位有效数字。", "solution": "题目要求在一个特定的算术系统中，计算两种函数求值方法的相对误差。该系统使用十进制算术，精度为 $p=5$ 位有效数字，并对每个中间运算结果使用“向最近偶数舍入”规则进行舍入。输入值为 $x=8888$。\n\n首先，我们使用直接方法 $f(x) = \\sqrt{x+1} - \\sqrt{x}$ 计算其值。我们称计算结果为 $v_1$。\n\n1.  计算 $x+1$：\n    $x+1 = 8888 + 1 = 8889$。这是一个精确计算，有4位有效数字，小于系统的5位精度，因此无需舍入。\n\n2.  计算第一个平方根 $\\sqrt{x+1}$：\n    $\\sqrt{8889} \\approx 94.28149339...$。我们必须将这个中间结果舍入到5位有效数字。前5位数字是 $94.281$。第6位数字是4，小于5，所以我们向下舍入。我们将这个舍入后的值称为 $y_1 = 94.281$。\n\n3.  计算第二个平方根 $\\sqrt{x}$：\n    $\\sqrt{8888} \\approx 94.27618919...$。我们将其舍入到5位有效数字。前5位数字是 $94.276$。第6位数字是1，小于5，所以我们向下舍入。我们将这个舍入后的值称为 $y_2 = 94.276$。\n\n4.  执行减法：\n    $v_1 = y_1 - y_2 = 94.281 - 94.276 = 0.005$。这个结果只有一位有效数字。它可以在5位精度的系统内精确表示（如 $5.0000 \\times 10^{-3}$），因此不需要进一步舍入。\n    所以，$v_1 = 0.005$。\n\n接下来，我们使用另一种代数上等价的方法 $g(x) = \\frac{1}{\\sqrt{x+1} + \\sqrt{x}}$ 来计算其值。我们称计算结果为 $v_2$。\n\n1.  中间的平方根计算与之前相同。我们使用舍入后的值：\n    $y_1 = 94.281$\n    $y_2 = 94.276$\n\n2.  执行分母中的加法：\n    $y_1 + y_2 = 94.281 + 94.276 = 188.557$。这个中间结果有6位有效数字，必须舍入到5位。前5位数字是 $188.55$。第6位数字是7，大于5，所以我们必须将第5位数字向上舍入。\n    我们将这个舍入后的和称为 $S = 188.56$。\n\n3.  执行除法：\n    $v_2 = \\frac{1}{S} = \\frac{1}{188.56}$。未舍入的值约为 $0.00530335171...$。我们必须将其舍入到5位有效数字。前5位有效数字是 $5, 3, 0, 3, 3$。这个数是 $0.0053033$。下一位数字是5，其后还有非零数字（$171...$）。根据舍入规则，如果要丢弃的部分大于最后一位的半个单位（这里就是这种情况，因为 $0.5171... > 0.5$），我们向上舍入。\n    将 $0.00530335171...$ 在第5位有效数字处向上舍入，得到 $v_2 = 0.0053034$。\n\n最后，我们计算 $v_1$ 相对于 $v_2$ 的相对误差。公式为 $E_r = \\frac{|v_2 - v_1|}{|v_2|}$。\n\n1.  代入计算出的值：\n    $E_r = \\frac{|0.0053034 - 0.005|}{|0.0053034|} = \\frac{0.0003034}{0.0053034}$。\n\n2.  计算最终值：\n    $E_r \\approx 0.05720877...$\n\n3.  按要求将结果舍入到三位有效数字。前三位有效数字是 $5, 7, 2$。下一位数字是0，所以我们向下舍入。\n    最终答案是 $0.0572$。", "answer": "$$\\boxed{0.0572}$$", "id": "2199459"}, {"introduction": "最后，我们将从舍入的“后果”转向其“过程”本身。这个练习将带你进入一个自定义的简化浮点系统中，一步步地模拟浮点数减法操作。你将亲手处理数字的二进制表示、指数对齐、尾数相减、规格化，以及最终的舍入。这个详细的演练过程将揭开浮点运算单元（FPU）的“黑箱”，展示舍入误差是如何在每一步运算中累积的。[@problem_id:2199520]", "problem": "一款用于物联网（IoT）环境传感器的新型低功耗微处理器正在设计中。为了节省硬件资源，它使用一种我们称之为 LP8 的自定义8位浮点数格式。一个 LP8 数由一个符号位 $S$（1位）、一个指数 $E$（3位）和一个尾数 $M$（4位）定义。规格化数的数值 $V$ 由以下公式给出：\n\n$$V = (-1)^S \\times (1.M)_2 \\times 2^{E-B}$$\n\n其中 $(1.M)_2$ 表示由一个隐含的前导1后跟4位尾数构成的二进制数，$E$ 是指数位的无符号整数值，指数偏置为 $B=3$。所有算术运算都使用“舍入到最近，平局向偶”（round to nearest, ties to even）的舍入规则。在这种舍入模式下，一个恰好位于两个可表示数中间的值将被舍入到其尾数最低有效位为零的那个数。\n\n该处理器执行一个简单的算法。变量 `x` 被初始化为十进制值 $2.0$ 的 LP8 表示。常量 `c` 被定义为十进制值 $0.3$ 的 LP8 表示。然后处理器总共执行两次 `x := x - c` 操作。\n\n完成两次减法后，存储在变量 `x` 中的最终十进制值是多少？报告你的答案，并四舍五入到三位有效数字。", "solution": "问题要求我们使用自定义的8位浮点格式模拟一个减法循环的两个步骤。我们必须首先确定初始值和常量的机器表示，然后执行两次减法，在每一步都应用指定的舍入规则。\n\n**步骤1：确定初始值 `x`（即 $2.0$）的 LP8 表示。**\n值为 $2.0$。用二进制表示是 $10.0_2$。为了符合规格化格式 $(1.M)_2 \\times 2^{E-3}$，我们将其写为 $1.0_2 \\times 2^1$。\n- 该数为正，所以符号位 $S=0$。\n- 尾数位 $M$ 是 $1.0_2$ 的小数部分，所以 $M = 0000$。\n- 指数为 $1$。指数的计算公式是 $E-B = E-3 = 1$，得出 $E=4$。用3位二进制表示，即 $E=100$。\n因此，初始值 `x`（我们称之为 $x_0$）由 $S=0, E=100, M=0000$ 表示。存储的值恰好是 $2.0$。\n\n**步骤2：确定常量 `c`（即 $0.3$）的 LP8 表示。**\n首先，将十进制数 $0.3$ 转换为二进制。这是一个循环小数：$0.3_{10} = 0.0100110011..._2$。\n为了规格化，我们移动小数点以得到前导1：$1.00110011..._2 \\times 2^{-2}$。\n- 该数为正，所以 $S=0$。\n- 指数为 $-2$。由 $E-3=-2$ 得出 $E=1$。用3位二进制表示，即 $E=001$。\n- 尾数需要我们取 $1.00110011..._2$ 小数点后的前4位。完整的小数部分是 `.00110011...`。\n- 我们需要将其舍入到4位。前4位是 `0011`。下一位是 `0`（来自 `...0011...`）。因为这一位是 `0`，所以该值更接近 `0011` 而不是 `0100`，因此我们向下舍入（截断）。\n- 尾数位 $M$ 为 `0011`。\n因此，常量 `c` 由 $S=0, E=001, M=0011$ 表示。我们来计算 `c` 的精确十进制值：\n$c = (1.0011)_2 \\times 2^{-2} = (1 + \\frac{0}{2} + \\frac{0}{4} + \\frac{1}{8} + \\frac{1}{16}) \\times 2^{-2} = (1 + \\frac{3}{16}) \\times \\frac{1}{4} = \\frac{19}{16} \\times \\frac{1}{4} = \\frac{19}{64} = 0.296875$。\n\n**步骤3：执行第一次减法：$x_1 = x_0 - c$。**\n$x_0 = (1.0000)_2 \\times 2^1$\n$c = (1.0011)_2 \\times 2^{-2}$\n为了进行减法，我们必须通过使指数相等来对齐小数点。我们将指数较小的数进行反规格化，以匹配较大的指数（指数为1）。\n$c = (1.0011)_2 \\times 2^{-2} = (0.10011)_2 \\times 2^{-1} = (0.010011)_2 \\times 2^0 = (0.0010011)_2 \\times 2^1$。\n现在我们执行减法：\n$x_1 = ((1.0000000)_2 - (0.0010011)_2) \\times 2^1 = (0.1101101)_2 \\times 2^1$。\n要存储这个结果，必须对其进行规格化和舍入。\n规格化：$(0.1101101)_2 \\times 2^1 = (1.101101)_2 \\times 2^0$。\n- 新的指数是 $0$。$E-3=0 \\implies E=3$。\n- 新的尾数必须舍入到4位。值为 $1.101101$。前4个尾数位是 `1011`。其余位是 `01`。这比一半要小，所以我们向下舍入。\n- 存储的 $x_1$ 的尾数是 `1011`。\n存储的值 $x_1$ 是 $(1.1011)_2 \\times 2^0 = (1 + \\frac{1}{2} + \\frac{0}{4} + \\frac{1}{8} + \\frac{1}{16}) \\times 1 = 1 + \\frac{8+2+1}{16} = 1 + \\frac{11}{16} = \\frac{27}{16} = 1.6875$。\n\n**步骤4：执行第二次减法：$x_2 = x_1 - c$。**\n$x_1 = (1.1011)_2 \\times 2^0$\n$c = (1.0011)_2 \\times 2^{-2}$\n将指数对齐到较大的那个（指数为0）。\n$c = (0.010011)_2 \\times 2^0$。\n现在执行减法：\n$x_2 = ((1.101100)_2 - (0.010011)_2) \\times 2^0 = (1.011001)_2 \\times 2^0$。\n要存储这个结果，必须对其进行规格化（它已经是规格化的）和舍入。\n- 指数是 $0$，所以 $E=3$。\n- 尾数位必须从 $1.011001$ 舍入。前4位是 `0110`。后续位是 `01`，这比一半要小。我们向下舍入。\n- 存储的 $x_2$ 的尾数是 `0110`。\n最终存储的值 $x_2$ 是 $(1.0110)_2 \\times 2^0 = (1 + \\frac{0}{2} + \\frac{1}{4} + \\frac{1}{8} + \\frac{0}{16}) \\times 1 = 1 + \\frac{2+1}{8} = 1 + \\frac{3}{8} = \\frac{11}{8} = 1.375$。\n\n**步骤5：最终答案格式化。**\n最终的十进制值是 $1.375$。问题要求答案四舍五入到三位有效数字。前三位有效数字是 1、3 和 7。下一位数字是 5，所以我们向上舍入。\n$1.375 \\approx 1.38$。", "answer": "$$\\boxed{1.38}$$", "id": "2199520"}]}