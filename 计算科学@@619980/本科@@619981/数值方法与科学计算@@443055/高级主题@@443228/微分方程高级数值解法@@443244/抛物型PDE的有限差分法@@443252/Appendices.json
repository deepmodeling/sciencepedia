{"hands_on_practices": [{"introduction": "这个入门练习是求解抛物线型偏微分方程的基石。我们将使用“时间前向中心差分” (Forward-Time Central-Space, FTCS) 方法来模拟一根带冷却效应的热棒中的热传导。通过这个练习 [@problem_id:3229635]，你将巩固将偏微分方程离散化的基本功，执行冯·诺依曼稳定性分析以理解显式格式的局限性，并对照已知的解析解来验证代码的正确性。", "problem": "考虑一根长度为 $L$ 的一维细杆，其温度场 $u(x,t)$（单位：$\\mathrm{K}$）由包含向环境空气的分布散热的线性热方程控制，\n$$\nu_t = k\\,u_{xx} - h\\left(u - u_{\\mathrm{amb}}\\right), \\quad 0  x  L,\\ t>0,\n$$\n服从狄利克雷边界条件\n$$\nu(0,t) = u(L,t) = u_{\\mathrm{amb}},\n$$\n和初始条件\n$$\nu(x,0) = u_{\\mathrm{amb}} + A \\sin\\left(\\frac{n\\pi x}{L}\\right).\n$$\n此处，$k$ 是热扩散率（单位：$\\mathrm{m}^2/\\mathrm{s}$），$h$ 是有效线性冷却系数（单位：$\\mathrm{s}^{-1}$），$u_{\\mathrm{amb}}$ 是环境温度（单位：$\\mathrm{K}$），$A$ 是初始模态振幅（单位：$\\mathrm{K}$），$n$ 是一个正整数模态指数。\n\n您的任务是：\n\n1. 从偏微分方程以及时间上的前向差分和空间上的中心差分的定义出发，在间距为 $\\Delta x$、时间步长为 $\\Delta t$ 的均匀网格上，为变换后的变量 $v(x,t) = u(x,t) - u_{\\mathrm{amb}}$ 推导一个前向时间中心空间（FTCS）有限差分格式。请明确陈述内部网格点的更新规则，以及如何用 $v$ 来处理边界条件。\n\n2. 对 $v$ 的齐次问题使用冯·诺伊曼（Fourier）稳定性分析，为您在任务1中得到的显式FTCS格式推导出一个必要的稳定性条件。将该条件表示为一个关联 $\\Delta t$、$\\Delta x$、$k$ 和 $h$ 的约束。您的推导必须从一个傅里叶模态的离散放大因子开始，并强制执行稳定性所需的大小约束。\n\n3. 对于齐次狄利克雷边界 $v(0,t) = v(L,t) = 0$ 和特殊初始条件 $v(x,0) = A \\sin\\left(\\frac{n\\pi x}{L}\\right)$，推导连续问题的精确解 $v(x,t)$。然后，表示出 $u(x,t)$ 的精确解。\n\n4. 实现一个程序，该程序：\n   - 在 $[0,L]$ 上构建一个具有 $N$ 个子区间的均匀网格，使得网格点为 $x_j = j\\Delta x$，其中 $\\Delta x = L/N$，且 $j=0,1,\\dots,N$。\n   - 对 $j=0,\\dots,N$ 初始化 $u_j^0 = u_{\\mathrm{amb}} + A \\sin\\left(\\frac{n\\pi x_j}{L}\\right)$，并对所有时间步 $n$ 强制执行边界条件 $u_0^n=u_N^n=u_{\\mathrm{amb}}$。\n   - 对于预设的时间步数 $M$ 和步长 $\\Delta t$，使用您在任务1中为 $v=u-u_{\\mathrm{amb}}$ 推导的显式FTCS更新规则，随时间推进解。\n   - 在最终时间 $T = M\\Delta t$，计算离散 $L^2$ 误差（单位：$\\mathrm{K}$）\n     $$\n     E = \\left(\\Delta x \\sum_{j=0}^{N} \\left[u_j^M - u_{\\mathrm{exact}}(x_j,T)\\right]^2 \\right)^{1/2},\n     $$\n     其中 $u_{\\mathrm{exact}}(x,T)$ 是任务3中得到的精确解。\n   - 对于所选的 $\\Delta t$ 和 $\\Delta x$，独立地检查您在任务2中推导的理论稳定性条件，并返回一个布尔值，指示该条件是否成立。\n\n5. 使用以下测试套件。除非另有说明，取 $L=1\\,\\mathrm{m}$，$u_{\\mathrm{amb}}=300\\,\\mathrm{K}$，$A=2\\,\\mathrm{K}$，$n=1$，$N=50$。\n   - 测试1（理想路径）：$k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$，$h=0.1\\,\\mathrm{s}^{-1}$，$\\Delta t=0.25\\,\\mathrm{s}$，$M=4$。\n   - 测试2（接近稳定性边界）：$k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$，$h=0.1\\,\\mathrm{s}^{-1}$，令 $\\Delta t = 0.95 \\,\\Delta t_{\\max}$，$M=4$，其中 $\\Delta t_{\\max}$ 是您在任务2中得到的稳定性条件对给定的 $k$、$h$ 和 $\\Delta x$ 所允许的最大时间步长。\n   - 测试3（违反稳定性）：$k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$，$h=0.1\\,\\mathrm{s}^{-1}$，令 $\\Delta t = 1.05 \\,\\Delta t_{\\max}$，$M=4$。\n   - 测试4（纯扩散极限）：$k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$，$h=0\\,\\mathrm{s}^{-1}$，令 $\\Delta t = 0.49 \\,\\Delta t_{\\max}$，$M=10$。\n   - 测试5（纯反应极限）：$k=0\\,\\mathrm{m}^2/\\mathrm{s}$，$h=2.0\\,\\mathrm{s}^{-1}$，取 $\\Delta t = 1.9/h\\,\\mathrm{s}$，$M=6$。\n\n6. 单位与输出：\n   - 所有长度单位必须是 $\\mathrm{m}$，时间单位是 $\\mathrm{s}$，温度单位是 $\\mathrm{K}$。\n   - 以 $\\mathrm{K}$ 为单位报告每个离散 $L^2$ 误差 $E$，四舍五入到六位小数。\n   - 对每个测试，还要报告一个布尔值，指示您选择的 $\\Delta t$ 和 $\\Delta x$ 是否满足理论稳定性条件。\n   - 您的程序应生成单行输出，包含一个用方括号括起来的逗号分隔列表，顺序如下\n     $$\n     [E_1,\\ \\mathrm{stable}_1,\\ E_2,\\ \\mathrm{stable}_2,\\ E_3,\\ \\mathrm{stable}_3,\\ E_4,\\ \\mathrm{stable}_4,\\ E_5,\\ \\mathrm{stable}_5].\n     $$\n\n您的程序必须完全自包含，不接受外部输入，并直接实现上述测试。最终打印的输出必须是指定格式的单行文本。", "solution": "用户提供的问题将首先经过严格的验证过程。\n\n### 第一步：提取已知条件\n\n**偏微分方程 (PDE):**\n$u_t = k\\,u_{xx} - h\\left(u - u_{\\mathrm{amb}}\\right)$，对于 $0  x  L$, $t>0$。\n\n**边界条件 (BCs):**\n$u(0,t) = u(L,t) = u_{\\mathrm{amb}}$。\n\n**初始条件 (IC):**\n$u(x,0) = u_{\\mathrm{amb}} + A \\sin\\left(\\frac{n\\pi x}{L}\\right)$。\n\n**定义:**\n- $u(x,t)$: 温度场，单位 $\\mathrm{K}$。\n- $k$: 热扩散率，单位 $\\mathrm{m}^2/\\mathrm{s}$。\n- $h$: 有效线性冷却系数，单位 $\\mathrm{s}^{-1}$。\n- $u_{\\mathrm{amb}}$: 环境温度，单位 $\\mathrm{K}$。\n- $A$: 初始模态振幅，单位 $\\mathrm{K}$。\n- $n$: 正整数模态指数。\n- $L$: 杆的长度，单位 $\\mathrm{m}$。\n- 变换后的变量: $v(x,t) = u(x,t) - u_{\\mathrm{amb}}$。\n\n**网格参数:**\n- $N$: 子区间数量。\n- $\\Delta x = L/N$: 网格间距。\n- $x_j = j\\Delta x$ 对于 $j=0,1,\\dots,N$: 网格点。\n- $\\Delta t$: 时间步长。\n- $M$: 时间步数。\n- $T = M\\Delta t$: 最终时间。\n\n**任务:**\n1. 为 $v(x,t)$ 推导前向时间中心空间 (FTCS) 有限差分格式。\n2. 为该格式推导冯·诺伊曼稳定性条件。\n3. 推导精确解析解 $u_{\\mathrm{exact}}(x,t)$。\n4. 实现一个程序来数值求解该问题，计算离散 $L^2$ 误差，并检查稳定性。\n5. 对一套包含五个特定测试用例的套件执行该程序。\n\n**误差度量:**\n离散 $L^2$ 误差: $E = \\left(\\Delta x \\sum_{j=0}^{N} \\left[u_j^M - u_{\\mathrm{exact}}(x_j,T)\\right]^2 \\right)^{1/2}$。\n\n**测试套件通用参数:**\n$L=1\\,\\mathrm{m}$，$u_{\\mathrm{amb}}=300\\,\\mathrm{K}$，$A=2\\,\\mathrm{K}$，$n=1$，$N=50$。\n\n**测试用例特定参数:**\n- 测试 1: $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$，$h=0.1\\,\\mathrm{s}^{-1}$，$\\Delta t=0.25\\,\\mathrm{s}$，$M=4$。\n- 测试 2: $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$，$h=0.1\\,\\mathrm{s}^{-1}$，$\\Delta t = 0.95 \\,\\Delta t_{\\max}$，$M=4$。\n- 测试 3: $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$，$h=0.1\\,\\mathrm{s}^{-1}$，$\\Delta t = 1.05 \\,\\Delta t_{\\max}$，$M=4$。\n- 测试 4: $k=1\\times 10^{-4}\\,\\mathrm{m}^2/\\mathrm{s}$，$h=0\\,\\mathrm{s}^{-1}$，$\\Delta t = 0.49 \\,\\Delta t_{\\max}$，$M=10$。\n- 测试 5: $k=0\\,\\mathrm{m}^2/\\mathrm{s}$，$h=2.0\\,\\mathrm{s}^{-1}$，$\\Delta t = 1.9/h\\,\\mathrm{s}$，$M=6$。\n\n**输出格式:**\n单行文本: $[E_1, \\mathrm{stable}_1, E_2, \\mathrm{stable}_2, E_3, \\mathrm{stable}_3, E_4, \\mathrm{stable}_4, E_5, \\mathrm{stable}_5]$，误差四舍五入到六位小数。\n\n### 第二步：使用提取的已知条件进行验证\n\n- **科学依据:** 该问题基于带有一阶反应项（牛顿冷却定律）的线性热方程，这是物理学和工程学中一个基本且完善的模型。所有参数都具有物理意义。\n- **适定性:** 该问题是一个抛物型偏微分方程的标准初边值问题。初始条件和边界条件已指定且一致，确保连续问题存在唯一且稳定的解。\n- **客观性:** 该问题由精确的数学方程和参数定义。任务是客观的，需要进行形式推导和计算。\n- **完整性与一致性:** 每个测试用例的所有必要信息（$k$, $h$, $L$, $A$, $n$, $u_{\\mathrm{amb}}$, $N$, $M$, $\\Delta t$）都已直接提供或通过基于其他参数的公式提供。变量变换 $v=u-u_{\\mathrm{amb}}$ 是标准的，并一致地简化了偏微分方程和边界条件。\n- **可形式化与相关性:** 该问题与抛物型偏微分方程的有限差分方法主题直接相关。它是数值分析和科学计算教学中使用的经典范例。\n\n### 第三步：结论与行动\n该问题具有科学合理性、适定性和完整性。所有任务都明确规定且在数学上是可处理的。该问题被判定为**有效**。将提供完整解答。\n\n### 解答推导\n\n#### 任务 1：FTCS 格式的推导\n我们从变换后的变量 $v(x,t) = u(x,t) - u_{\\mathrm{amb}}$ 开始。求偏导数，我们得到 $v_t = u_t$ 和 $v_{xx} = u_{xx}$。将这些代入原始偏微分方程，得到关于 $v$ 的齐次方程：\n$$\nv_t = k v_{xx} - h v\n$$\n边界条件变为 $v(0,t) = u(0,t) - u_{\\mathrm{amb}} = u_{\\mathrm{amb}} - u_{\\mathrm{amb}} = 0$ 和 $v(L,t) = u(L,t) - u_{\\mathrm{amb}} = u_{\\mathrm{amb}} - u_{\\mathrm{amb}} = 0$。\n\n设离散网格由 $x_j = j\\Delta x$ 和 $t_m = m\\Delta t$ 定义，并令 $v_j^m \\approx v(x_j, t_m)$。我们使用有限差分来近似导数：\n- 时间上的前向差分（在 $t_m, x_j$ 处）：$v_t \\approx \\frac{v_j^{m+1} - v_j^m}{\\Delta t}$\n- 空间上的中心差分（在 $t_m, x_j$ 处）：$v_{xx} \\approx \\frac{v_{j+1}^m - 2v_j^m + v_{j-1}^m}{(\\Delta x)^2}$\n\n将这些近似代入关于 $v$ 的偏微分方程：\n$$\n\\frac{v_j^{m+1} - v_j^m}{\\Delta t} = k \\left( \\frac{v_{j+1}^m - 2v_j^m + v_{j-1}^m}{(\\Delta x)^2} \\right) - h v_j^m\n$$\n我们求解下一时间步的温度 $v_j^{m+1}$：\n$$\nv_j^{m+1} = v_j^m + \\frac{k\\Delta t}{(\\Delta x)^2} (v_{j+1}^m - 2v_j^m + v_{j-1}^m) - h\\Delta t v_j^m\n$$\n令 $\\mu = \\frac{k\\Delta t}{(\\Delta x)^2}$ 为数值扩散数。重新整理各项，我们得到内部网格点（$j=1, 2, \\dots, N-1$）的 FTCS 更新规则：\n$$\nv_j^{m+1} = \\mu v_{j-1}^m + (1 - 2\\mu - h\\Delta t)v_j^m + \\mu v_{j+1}^m\n$$\n通过固定所有时间步长 $m$ 上域边界的值来处理 $v$ 的边界条件：\n$$\nv_0^m = 0 \\quad \\text{和} \\quad v_N^m = 0\n$$\n\n#### 任务 2：冯·诺伊曼稳定性分析\n我们分析为 $v$ 推导的齐次格式的稳定性。我们假设一个形式为 $v_j^m = G^m e^{i\\kappa x_j}$ 的单个傅里叶模态解，其中 $G$ 是放大因子，$\\kappa$ 是波数。将此代入更新规则：\n$$\nG^{m+1} e^{i\\kappa j\\Delta x} = \\mu G^m e^{i\\kappa (j-1)\\Delta x} + (1 - 2\\mu - h\\Delta t)G^m e^{i\\kappa j\\Delta x} + \\mu G^m e^{i\\kappa (j+1)\\Delta x}\n$$\n两边除以 $G^m e^{i\\kappa j\\Delta x}$，得到 $G$ 的表达式：\n$$\nG = \\mu e^{-i\\kappa\\Delta x} + (1 - 2\\mu - h\\Delta t) + \\mu e^{i\\kappa\\Delta x}\n$$\n使用恒等式 $e^{i\\theta} + e^{-i\\theta} = 2\\cos(\\theta)$：\n$$\nG = 1 - 2\\mu - h\\Delta t + 2\\mu \\cos(\\kappa\\Delta x) = 1 - h\\Delta t - 2\\mu(1 - \\cos(\\kappa\\Delta x))\n$$\n使用半角恒等式 $1 - \\cos(\\theta) = 2\\sin^2(\\theta/2)$：\n$$\nG = 1 - h\\Delta t - 4\\mu \\sin^2\\left(\\frac{\\kappa\\Delta x}{2}\\right)\n$$\n为使格式稳定，放大因子的模对于所有可能的波数都必须小于或等于1，即 $|G| \\leq 1$。这等价于 $-1 \\leq G \\leq 1$。\n\n上界 $G \\leq 1$ 意味着 $1 - h\\Delta t - 4\\mu \\sin^2(\\frac{\\kappa\\Delta x}{2}) \\leq 1$，化简为 $-h\\Delta t - 4\\mu \\sin^2(\\frac{\\kappa\\Delta x}{2}) \\leq 0$。由于 $h \\ge 0$, $\\Delta t > 0$, $\\mu \\ge 0$ 且 $\\sin^2(\\cdot) \\ge 0$，此条件总是满足的。\n\n下界 $G \\geq -1$ 意味着：\n$$\n1 - h\\Delta t - 4\\mu \\sin^2\\left(\\frac{\\kappa\\Delta x}{2}\\right) \\ge -1\n$$\n$$\n2 \\ge h\\Delta t + 4\\mu \\sin^2\\left(\\frac{\\kappa\\Delta x}{2}\\right)\n$$\n这个不等式必须对所有 $\\kappa$ 成立。对于网格所支持的最高频率模态，$\\sin^2(\\frac{\\kappa\\Delta x}{2})$ 项最大化为 $1$。因此，我们要求：\n$$\n2 \\ge h\\Delta t + 4\\mu\n$$\n代入 $\\mu = \\frac{k\\Delta t}{(\\Delta x)^2}$：\n$$\n2 \\ge h\\Delta t + \\frac{4k\\Delta t}{(\\Delta x)^2} = \\Delta t \\left( h + \\frac{4k}{(\\Delta x)^2} \\right)\n$$\n因此，必要的稳定性条件是：\n$$\n\\Delta t \\le \\frac{2}{h + \\frac{4k}{(\\Delta x)^2}}\n$$\n\n#### 任务 3：精确解的推导\n我们求解偏微分方程 $v_t = k v_{xx} - h v$，其边界条件为 $v(0,t)=v(L,t)=0$，初始条件为 $v(x,0) = A \\sin(\\frac{n\\pi x}{L})$。我们使用分离变量法，假设解的形式为 $v(x,t) = X(x)T(t)$。代入偏微分方程得到：\n$$\nX(x)T'(t) = k X''(x)T(t) - h X(x)T(t)\n$$\n两边除以 $kX(x)T(t)$，我们可以分离变量：\n$$\n\\frac{T'(t)}{k T(t)} + \\frac{h}{k} = \\frac{X''(x)}{X(x)} = -\\sigma^2\n$$\n其中 $-\\sigma^2$ 是分离常数。这给出两个常微分方程：\n1. 空间部分：$X''(x) + \\sigma^2 X(x) = 0$，其中 $X(0)=0, X(L)=0$。\n2. 时间部分：$T'(t) + (h+k\\sigma^2)T(t) = 0$。\n\n空间问题是一个标准的 Sturm-Liouville 问题，其满足边界条件的特征函数是 $X_m(x) = \\sin(\\sigma_m x)$，其中 $\\sigma_m = \\frac{m\\pi}{L}$，对于整数 $m \\ge 1$。\n\n每个模态 $m$ 的时间方程是 $T_m'(t) + (h+k(\\frac{m\\pi}{L})^2)T_m(t) = 0$，其解为 $T_m(t) = C_m \\exp\\left(-\\left(h+k(\\frac{m\\pi}{L})^2\\right)t\\right)$。\n\n$v(x,t)$ 的通解是这些模态的叠加：\n$$\nv(x,t) = \\sum_{m=1}^{\\infty} C_m \\sin\\left(\\frac{m\\pi x}{L}\\right) \\exp\\left(-\\left(h + k\\left(\\frac{m\\pi}{L}\\right)^2\\right)t\\right)\n$$\n为了找到系数 $C_m$，我们在 $t=0$ 处应用初始条件：\n$$\nv(x,0) = \\sum_{m=1}^{\\infty} C_m \\sin\\left(\\frac{m\\pi x}{L}\\right) = A \\sin\\left(\\frac{n\\pi x}{L}\\right)\n$$\n通过将级数与初始条件进行比较（或利用正弦函数的正交性），我们发现除了 $C_n = A$ 外，所有系数都为零。这是因为初始条件本身已经是空间算子的单个特征函数。\n\n因此，$v(x,t)$ 的精确解是：\n$$\nv(x,t) = A \\sin\\left(\\frac{n\\pi x}{L}\\right) \\exp\\left(-\\left(h + k\\left(\\frac{n\\pi}{L}\\right)^2\\right)t\\right)\n$$\n变换回 $u(x,t) = v(x,t) + u_{\\mathrm{amb}}$，我们得到温度的精确解：\n$$\nu_{\\mathrm{exact}}(x,t) = u_{\\mathrm{amb}} + A \\sin\\left(\\frac{n\\pi x}{L}\\right) \\exp\\left(-\\left(h + k\\left(\\frac{n\\pi}{L}\\right)^2\\right)t\\right)\n$$", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the heat equation problem for a suite of test cases.\n    It implements the FTCS scheme, computes the L2 error against the\n    exact solution, and checks the theoretical stability condition.\n    \"\"\"\n\n    # --- Common parameters ---\n    L = 1.0  # m\n    u_amb = 300.0  # K\n    A = 2.0  # K\n    n_mode = 1  # integer mode index\n    N = 50  # number of subintervals\n    \n    dx = L / N\n    x = np.linspace(0, L, N + 1)\n    \n    # --- Test suite definition ---\n    test_cases = [\n        # (k, h, dt_spec, M) where dt_spec can be a value or a string\n        # 'max_stable' means dt = dt_max * factor\n        # Test 1\n        {'k': 1e-4, 'h': 0.1, 'dt_spec': ('val', 0.25), 'M': 4},\n        # Test 2\n        {'k': 1e-4, 'h': 0.1, 'dt_spec': ('max_stable', 0.95), 'M': 4},\n        # Test 3\n        {'k': 1e-4, 'h': 0.1, 'dt_spec': ('max_stable', 1.05), 'M': 4},\n        # Test 4\n        {'k': 1e-4, 'h': 0.0, 'dt_spec': ('max_stable', 0.49), 'M': 10},\n        # Test 5\n        {'k': 0.0, 'h': 2.0, 'dt_spec': ('h_rel', 1.9), 'M': 6},\n    ]\n\n    results = []\n\n    for case in test_cases:\n        k = case['k']\n        h = case['h']\n        M = case['M']\n        dt_spec_type, dt_spec_val = case['dt_spec']\n\n        # --- Calculate dt_max and dt for the current test case ---\n        # The stability limit denominator can be zero if k=0 and h=0, handle this.\n        stability_denom = h + (4 * k / (dx**2))\n        dt_max = 2.0 / stability_denom if stability_denom > 0 else np.inf\n\n        if dt_spec_type == 'val':\n            dt = dt_spec_val\n        elif dt_spec_type == 'max_stable':\n            dt = dt_spec_val * dt_max\n        elif dt_spec_type == 'h_rel':\n            dt = dt_spec_val / h\n        else:\n            raise ValueError(\"Invalid dt_spec type\")\n\n        # --- Stability Check ---\n        # Use a small tolerance for floating point comparison\n        is_stable = dt = dt_max + 1e-9\n        results.append(is_stable)\n\n        # --- Initialization ---\n        # Initialize v, as the scheme is for v = u - u_amb\n        v0 = A * np.sin(n_mode * np.pi * x / L)\n        v_current = v0.copy()\n\n        # --- Time Evolution (FTCS) ---\n        mu = k * dt / (dx**2)\n        \n        for _ in range(M):\n            v_next = np.zeros(N + 1) # Enforces v=0 at boundaries\n            for j in range(1, N):\n                v_next[j] = mu * v_current[j-1] \\\n                          + (1 - 2*mu - h*dt) * v_current[j] \\\n                          + mu * v_current[j+1]\n            v_current = v_next\n\n        # --- Error Calculation ---\n        T_final = M * dt\n        \n        # Numerical solution for u\n        u_numerical = v_current + u_amb\n\n        # Exact solution for u\n        decay_exponent = -(h + k * (n_mode * np.pi / L)**2) * T_final\n        v_exact = A * np.sin(n_mode * np.pi * x / L) * np.exp(decay_exponent)\n        u_exact = v_exact + u_amb\n        \n        # Discrete L2 error\n        if np.any(np.isinf(u_numerical)) or np.any(np.isnan(u_numerical)):\n            l2_error = np.inf\n        else:\n            error_sq_sum = np.sum((u_numerical - u_exact)**2)\n            l2_error = np.sqrt(dx * error_sq_sum)\n\n        # Insert error before the stability boolean in the results list\n        results.insert(-1, f\"{l2_error:.6f}\")\n        \n    # Python booleans need to be lowercase as per some conventions, but\n    # the problem doesn't specify. str(True) -> 'True', so we convert.\n    formatted_results = [str(r).lower() if isinstance(r, bool) else r for r in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "3229635"}, {"introduction": "真实的物理系统很少是均匀的。这个练习将我们的技能扩展到一个更贴近现实的场景：一根由两种不同材料组成的复合杆 [@problem_id:3229593]。我们将学习如何构建一个“守恒”的有限差分格式，该格式能正确地处理材料界面上的物理定律（温度和热通量的连续性），这是解决变系数问题的一项关键技术。", "problem": "考虑一根占据区间 $[0,L]$ 的一维复合杆，它由两种均匀材料组成，在界面位置 $x_0 \\in (0,L)$ 处连接。其热扩散率是分段常数，在 $[0,x_0]$ 上等于 $k_1$，在 $(x_0,L]$ 上等于 $k_2$。温度 $u(x,t)$ 的演化遵循带有狄利克雷边界条件的瞬态热方程（一个线性抛物线型偏微分方程）：\n$$\n\\frac{\\partial u}{\\partial t}(x,t) \\;=\\; \\frac{\\partial}{\\partial x}\\Big(k(x)\\,\\frac{\\partial u}{\\partial x}(x,t)\\Big), \\quad x \\in (0,L),\\; t0,\n$$\n$$\nu(0,t) \\;=\\; T_L,\\quad u(L,t) \\;=\\; T_R,\\quad t \\ge 0,\n$$\n$$\nu(x,0) \\;=\\; u_0(x), \\quad x \\in [0,L],\n$$\n其中分段常数的热扩散率为\n$$\nk(x) \\;=\\; \\begin{cases}\nk_1,  0 \\le x \\le x_0,\\\\\nk_2,  x_0  x \\le L.\n\\end{cases}\n$$\n利用能量守恒基本原理和傅里叶热传导定律，推导在 $x=x_0$ 处对所有 $t0$ 都必须成立的物理上正确的界面条件，然后构建一个在离散方程中强制执行这些条件的有限差分法。\n\n您的推导必须从以下基本依据开始：\n- 控制体积上的能量守恒，即内能的变化率等于流入该体积的净热通量。\n- 傅里叶定律 $q(x,t) = -\\,k(x)\\,\\dfrac{\\partial u}{\\partial x}(x,t)$。\n- 微分算子的散度形式 $\\dfrac{\\partial}{\\partial x}\\big(k(x)\\,\\dfrac{\\partial u}{\\partial x}\\big)$。\n\n用 $N$ 个子区间的均匀网格对空间域进行离散化，网格间距为 $h=L/N$，节点为 $x_i=i\\,h$，$i=0,1,\\dots,N$。通过选择 $N$ 使得 $x_0/h$ 为整数，来假设界面与一个网格节点对齐。使用时间步长为 $\\Delta t0$ 的后向欧拉时间离散化。对于空间离散化，在每个内部节点 $x_i$ 处使用保守的面通量平衡来近似散度形式的算子：\n$$\n\\big((k u_x)_x\\big)\\big|_{x_i} \\;\\approx\\; \\frac{1}{h}\\left[\\;k_{i+\\frac{1}{2}}\\;\\frac{u_{i+1}-u_i}{h}\\;-\\;k_{i-\\frac{1}{2}}\\;\\frac{u_i-u_{i-1}}{h}\\;\\right],\n$$\n其中 $k_{i+\\frac{1}{2}}$ 是与 $x_i$ 和 $x_{i+1}$ 之间的面相关的扩散率，其选择与占据该面的材料保持一致。在所有时间层 $t^n=n\\,\\Delta t$ 上强制执行 $u_0^n=T_L$ 和 $u_N^n=T_R$。\n\n您还必须：\n- 从所述原理推导在 $x=x_0$ 处的界面条件，并解释离散通量平衡如何在不引入界面节点处任何特定约束的情况下强制执行这些条件。\n- 通过分段积分并使用您推导的物理上正确的界面条件，推导求解 $\\dfrac{d}{dx}\\big(k(x)\\,\\dfrac{du}{dx}\\big)=0$（其中 $u(0)=T_L$ 和 $u(L)=T_R$）的稳态解析温度分布 $u_\\infty(x)$。用 $L$、$x_0$、$k_1$、$k_2$、$T_L$ 和 $T_R$ 表示 $x\\in[0,L]$ 上 $u_\\infty(x)$ 的闭合形式表达式。\n\n实现要求：\n- 实现应用于上述保守空间离散化的后向欧拉时间方法。从 $t=0$ 开始，使用初始条件 $u_0(x)\\equiv 0$ 进行时间推进，直到收敛到稳态。稳态收敛应通过条件 $\\|u^{n+1}-u^n\\|_\\infty  \\varepsilon$（对于给定的容差 $\\varepsilon$）来检测。\n- 如果面位于 $[0,x_0)$ 内，则使用基于面的扩散率 $k_{i+\\frac{1}{2}} = k_1$；如果面位于 $(x_0,L]$ 内，则使用 $k_{i+\\frac{1}{2}} = k_2$。由于 $x_0$ 与网格节点对齐，没有面会穿过界面。\n- 收敛后，计算所有网格节点上的最大范数误差 $E=\\|u^{n}-u_\\infty\\|_\\infty$。\n\n测试套件：\n为以下3组参数集提供结果，每组参数集旨在测试该方法的一个不同方面。在所有情况下，取 $L=1$ 和初始条件 $u_0(x)\\equiv 0$。\n- 情况A（一般非对称界面耦合）：$k_1=1$, $k_2=5$, $x_0=0.4$, $T_L=0$, $T_R=1$, $N=100$, $\\Delta t=0.2$, $\\varepsilon=10^{-12}$。\n- 情况B（均匀介质一致性检查）：$k_1=1$, $k_2=1$, $x_0=0.3$, $T_L=0$, $T_R=1$, $N=120$, $\\Delta t=0.2$, $\\varepsilon=10^{-12}$。\n- 情况C（恒定边界平衡）：$k_1=2$, $k_2=0.5$, $x_0=0.25$, $T_L=0.3$, $T_R=0.3$, $N=64$, $\\Delta t=0.2$, $\\varepsilon=10^{-12}$。\n\n答案规格：\n- 对于每种情况，以浮点数形式输出标量最大范数误差 $E$。\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔列表形式的结果，顺序为[情况A, 情况B, 情况C]。例如，格式必须与“[0.001,0.002,0.003]”完全相同。", "solution": "问题陈述具有科学依据，是适定的、客观且自洽的。它提出了一个计算传热学中的标准问题，基于复合介质的热方程。所提出的参数和方法与物理学和数值分析的既定原则相符。因此，该问题被认为是有效的。\n\n### 界面条件的推导\n\n控制偏微分方程以散度形式给出，\n$$\n\\frac{\\partial u}{\\partial t} \\;=\\; \\frac{\\partial}{\\partial x}\\left(k(x)\\,\\frac{\\partial u}{\\partial x}\\right).\n$$\n该形式源于能量守恒原理。让我们考虑一个以材料界面 $x_0$ 为中心的无穷小控制体积 $V = [x_0 - \\epsilon, x_0 + \\epsilon]$，其中 $\\epsilon  0$ 是一个小数。该体积内热能的变化率必须等于穿过其边界的净热通量。\n$$\n\\frac{d}{dt} \\int_{x_0-\\epsilon}^{x_0+\\epsilon} \\rho c_p u(x,t) \\, dx \\;=\\; q(x_0-\\epsilon, t) - q(x_0+\\epsilon, t)\n$$\n其中 $\\rho$ 是密度，$c_p$ 是比热容，$q(x,t)$ 是热通量。假设温度 $u(x,t)$ 和材料属性是有界的，当我们通过取极限 $\\epsilon \\to 0$ 使体积收缩时，左侧的积分消失。\n$$\n\\lim_{\\epsilon \\to 0} \\left( \\frac{d}{dt} \\int_{x_0-\\epsilon}^{x_0+\\epsilon} \\rho c_p u(x,t) \\, dx \\right) \\;=\\; 0\n$$\n这意味着进入这个极小体积的净通量必须为零：\n$$\n\\lim_{\\epsilon \\to 0} \\big( q(x_0-\\epsilon, t) - q(x_0+\\epsilon, t) \\big) \\;=\\; 0\n$$\n这导出了第一个界面条件：热通量必须在界面上是连续的。\n$$\nq(x_0^-, t) \\;=\\; q(x_0^+, t)\n$$\n其中 $q(x_0^-)$ 是从左侧接近的通量，$q(x_0^+)$ 是从右侧接近的通量。代入傅里叶热传导定律 $q(x,t) = -k(x)\\frac{\\partial u}{\\partial x}(x,t)$，并使用 $k(x)$ 的分段定义，我们得到通量连续性条件：\n$$\n-k_1 \\frac{\\partial u}{\\partial x}(x_0^-, t) \\;=\\; -k_2 \\frac{\\partial u}{\\partial x}(x_0^+, t) \\quad \\implies \\quad k_1 \\frac{\\partial u}{\\partial x}(x_0^-, t) \\;=\\; k_2 \\frac{\\partial u}{\\partial x}(x_0^+, t).\n$$\n第二个界面条件是温度的连续性。某一点上的温度不连续将意味着无穷大的温度梯度，根据傅里叶定律，这将导致不符合物理实际的无穷大热通量。因此，对于所有 $t0$：\n$$\nu(x_0^-, t) \\;=\\; u(x_0^+, t).\n$$\n\n### 稳态解析解\n\n在稳态下，温度分布 $u_\\infty(x)$ 与时间无关，因此 $\\frac{\\partial u}{\\partial t}=0$。控制方程简化为一个常微分方程：\n$$\n\\frac{d}{dx}\\left(k(x)\\,\\frac{du_\\infty}{dx}\\right) \\;=\\; 0.\n$$\n对 $x$ 积分一次表明，热通量在整个区域内是恒定的：\n$$\nk(x)\\,\\frac{du_\\infty}{dx} \\;=\\; -C_1,\n$$\n其中 $C_1$ 是一个代表通量的常数。这等同于陈述 $q(x) = C_1$。由于温度分布是分段线性的，我们可以写出：\n$$\nu_\\infty(x) \\;=\\; \\begin{cases} A_1 x + B_1,  0 \\le x \\le x_0 \\\\ A_2 x + B_2,  x_0  x \\le L \\end{cases}\n$$\n常数 $A_1, B_1, A_2, B_2$ 由边界条件和界面条件确定。\n$1$. 在 $x=0$ 处的边界条件：$u_\\infty(0) = T_L \\implies A_1(0) + B_1 = T_L \\implies B_1 = T_L$。\n$2$. 在 $x=L$ 处的边界条件：$u_\\infty(L) = T_R \\implies A_2 L + B_2 = T_R \\implies B_2 = T_R - A_2 L$。\n这使我们可以将第二段的解重写为 $u_\\infty(x) = A_2(x-L) + T_R$。\n$3$. 在 $x=x_0$ 处的温度连续性：$u_\\infty(x_0^-) = u_\\infty(x_0^+)$。\n$$\nA_1 x_0 + T_L \\;=\\; A_2(x_0-L) + T_R.\n$$\n$4$. 在 $x=x_0$ 处的通量连续性：$k_1 u'_\\infty(x_0^-) = k_2 u'_\\infty(x_0^+)$。根据线性形式，对于 $x", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_case(L, k1, k2, x0, TL, TR, N, dt, epsilon):\n    \"\"\"\n    Solves the 1D transient heat equation for a composite rod until steady state\n    and computes the error against the analytical solution.\n    \"\"\"\n    # 1. Grid and problem parameters\n    h = L / N\n    x = np.linspace(0, L, N + 1)\n    # The interface node index j is such that x_j = x0\n    j = int(round(x0 / h))\n\n    # 2. Analytical steady-state solution u_inf(x)\n    # The solution is piecewise linear: u(x) = A*x + B\n    # For segment 1 (x in [0, x0]): u1(x) = A1*x + TL\n    # For segment 2 (x in (x0, L]): u2(x) = A2*(x-L) + TR\n    den = k1 * (L - x0) + k2 * x0\n    if abs(den)  1e-15:\n        # This occurs only in trivial or unphysical cases, e.g., L=0.\n        # For k1=k2, den = k1*L. If L=0, it's 0.\n        # The main logic below correctly handles k1=k2 by having A1=A2.\n        # This is a safe guard.\n        if abs(TR-TL)  1e-15:\n            A1, A2 = 0, 0\n        else: # Unphysical, infinite flux case\n            # This branch should not be reached by the given test cases.\n            A1, A2 = np.inf, np.inf\n    else:\n        A1 = k2 * (TR - TL) / den\n        A2 = k1 * (TR - TL) / den\n    \n    u_inf = np.piecewise(x, [x = x0, x > x0],\n                         [lambda xi: A1 * xi + TL,\n                          lambda xi: A2 * (xi - L) + TR])\n\n    # 3. Numerical method setup\n    \n    # Face diffusivities k_{i+1/2}. k_face[i] corresponds to face between i and i+1.\n    k_face = np.zeros(N)\n    k_face[:j] = k1\n    k_face[j:] = k2\n\n    # Tridiagonal matrix A for the system Au_new = b for interior nodes\n    lam = dt / (h * h)\n    \n    # A is of size (N-1)x(N-1)\n    A = np.zeros((N - 1, N - 1))\n    \n    # Populate the diagonals of A. Row `i` (0-indexed) corresponds to spatial node `i+1`.\n    for i in range(N - 1):\n        phys_i = i + 1\n        # Main diagonal\n        A[i, i] = 1 + lam * (k_face[phys_i] + k_face[phys_i - 1])\n        # Lower diagonal\n        if i > 0:\n            A[i, i - 1] = -lam * k_face[phys_i - 1]\n        # Upper diagonal\n        if i  N - 2:\n            A[i, i + 1] = -lam * k_face[phys_i]\n\n    # 4. Time-stepping loop\n    u_old = np.zeros(N + 1)\n    # The problem specifies u_0(x) = 0 for x in [0,L], but also gives BCs for t>=0.\n    # The standard interpretation is that the initial state u(x,0) is zero in the\n    # interior (0,L), and the boundary values are set at t=0.\n    u_old[0], u_old[N] = TL, TR\n    u_new = u_old.copy()\n\n    # Safety break for the loop\n    max_iter = 50000\n    for _ in range(max_iter):\n        # Right-hand side vector b (size N-1)\n        b = u_old[1:N].copy()\n        \n        # Add boundary condition terms to the first and last elements of b\n        b[0] += lam * k_face[0] * TL\n        b[N - 2] += lam * k_face[N - 1] * TR\n        \n        # Solve the linear system Au_new = b for interior nodes\n        u_new[1:N] = np.linalg.solve(A, b)\n        \n        # Check for convergence using the infinity norm\n        if np.max(np.abs(u_new - u_old))  epsilon:\n            break\n            \n        u_old[:] = u_new[:]\n    \n    # 5. Compute max-norm error against analytical steady-state solution\n    error = np.max(np.abs(u_new - u_inf))\n    \n    return error\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print results.\n    \"\"\"\n    # Test cases: (L, k1, k2, x0, TL, TR, N, dt, epsilon)\n    test_cases = [\n        # Case A: General asymmetric interface coupling\n        (1.0, 1.0, 5.0, 0.4, 0.0, 1.0, 100, 0.2, 1e-12),\n        # Case B: Uniform medium consistency check\n        (1.0, 1.0, 1.0, 0.3, 0.0, 1.0, 120, 0.2, 1e-12),\n        # Case C: Constant boundary equilibrium\n        (1.0, 2.0, 0.5, 0.25, 0.3, 0.3, 64, 0.2, 1e-12),\n    ]\n\n    results = []\n    for params in test_cases:\n        error = solve_case(*params)\n        results.append(error)\n\n    # Format the output as a comma-separated list in brackets\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3229593"}, {"introduction": "Crank-Nicolson 格式因其无条件稳定和二阶精度而备受青睐，但它并非万能的。本练习 [@problem_id:2393571] 揭示了其一个关键的现实局限：当处理不连续初始条件等剧烈梯度时，该格式会产生非物理的振荡。这是一个至关重要的教训，教导我们除了理论稳定性之外，还要批判性地评估数值方法的物理保真度。", "problem": "考虑在区间 $[0,1]$ 上具有齐次 Dirichlet 边界条件的一维热（扩散）方程，\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}, \\quad x \\in (0,1), \\ t  0, \\quad u(0,t) = 0, \\ u(1,t) = 0,\n$$\n以及一个不连续的初始条件\n$$\nu(x,0) = \\begin{cases}\n1,  x \\in [0.45, 0.55],\\\\\n0,  \\text{otherwise}.\n\\end{cases}\n$$\n所有量均为无量纲。使用一个包含 $N=201$ 个等距点（包括边界）的均匀空间网格，因此 $\\Delta x = 1/(N-1)$。令 $\\alpha = 1$。\n\n令 $u_i^n$ 表示在内部网格点 $x_i = i \\, \\Delta x$（其中 $i=1,2,\\dots,N-2$）和时间层 $t_n = n \\, \\Delta t$ 处对 $u(x_i,t_n)$ 的数值近似。将从 $t_n$到 $t_{n+1}$ 推进一个时间步的 Crank–Nicolson 有限差分格式定义为下式的唯一解 $u^{n+1}$：\n$$\n\\left( I - \\frac{r}{2} L \\right) u^{n+1} = \\left( I + \\frac{r}{2} L \\right) u^{n}, \\quad r = \\frac{\\alpha \\, \\Delta t}{(\\Delta x)^2},\n$$\n其中 $I$ 是内部网格上的单位算子，$L$ 是作用于内部网格值的、带有齐次 Dirichlet 边界条件的标准二阶差分算子：\n$$\n(L u)_i = u_{i+1} - 2 u_i + u_{i-1}, \\quad i=1,2,\\dots,N-2,\n$$\n根据边界条件，我们有 $u_0 = 0$ 和 $u_{N-1} = 0$。\n\n对于给定的时间步 $\\Delta t$，将一个 Crank–Nicolson 时间步后的振荡幅度定义为\n$$\nA(\\Delta t) = \\max\\!\\left(0, \\ \\max_{1 \\le i \\le N-2} u_i^{1} - 1 \\right) \\;+\\; \\max\\!\\left(0, \\ 0 - \\min_{1 \\le i \\le N-2} u_i^{1} \\right).\n$$\n这个量是从 $t=0$ 处的指定不连续初始条件开始，经过单个时间步后，内部解超过物理上界 $1$ 的上冲量与低于物理下界 $0$ 的下冲量之和。\n\n测试套件：\n- 按规定使用 $N=201$ 和 $\\alpha = 1$。\n- 令 $\\Delta x = 1/(N-1)$。\n- 考虑以下四个时间步\n  1. $\\Delta t_1 = 0.2 \\, (\\Delta x)^2 / \\alpha$,\n  2. $\\Delta t_2 = 1.0 \\, (\\Delta x)^2 / \\alpha$,\n  3. $\\Delta t_3 = 5.0 \\, (\\Delta x)^2 / \\alpha$,\n  4. $\\Delta t_4 = 25.0 \\, (\\Delta x)^2 / \\alpha$。\n  \n对于每个 $\\Delta t_k$，计算如上定义的 $A(\\Delta t_k)$。您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，顺序为 $[A(\\Delta t_1), A(\\Delta t_2), A(\\Delta t_3), A(\\Delta t_4)]$，每个值都四舍五入到六位小数。输出是无量纲的，并且只包含浮点数。", "solution": "我们从区间 $[0,1]$ 上的热方程 $\\partial_t u = \\alpha \\partial_{xx} u$ 开始，该方程具有齐次 Dirichlet 边界条件和限制在 $[0.45,0.55]$ 内的不连续阶跃初始条件。连续问题的极值原理意味着，对于 $t0$，解保持在 $0$ 和 $1$ 之间。然而，某些时间离散化方法，虽然在某种范数下是稳定的，但却不是单调的，并且当初始数据存在尖锐不连续点时，会产生非物理振荡，如下冲（值低于 $0$）或上冲（值高于 $1$）。Crank–Nicolson 格式是一种在 $\\ell^2$ 意义下二阶精度、隐式、无条件稳定的方法，但它既不是总变差不增的，也不是保单调性的，因此对于足够大的时间步长，它会产生此类振荡。\n\n我们用 $N=201$ 个均匀分布的节点（包括边界）对空间域进行离散化，因此 $\\Delta x = 1/(N-1)$。我们用 $i=1,2,\\dots,N-2$ 来索引内部节点，并用 $u_i^n$ 表示在 $x_i=i\\Delta x$ 和时间 $t_n=n\\Delta t$ 处的数值近似。带有齐次 Dirichlet 边界条件的标准中心二阶差分算子在内部索引上定义为\n$$\n(Lu)_i = u_{i+1} - 2u_i + u_{i-1}, \\quad i=1,\\dots,N-2,\n$$\n其中强制施加了边界值 $u_0=0$ 和 $u_{N-1}=0$。\n\n对于半离散系统 $\\dot{u}=\\alpha \\Delta_x u$，Crank–Nicolson 时间步进格式为\n$$\n\\left( I - \\frac{r}{2} L \\right) u^{n+1} = \\left( I + \\frac{r}{2} L \\right) u^{n}, \\quad r = \\frac{\\alpha \\Delta t}{(\\Delta x)^2}.\n$$\n在一维均匀网格上，这对于内部索引的 $u^{n+1}$ 变成一个三对角线性系统。对 $i=1,\\dots,N-2$ 按分量写出，\n$$\n-\\frac{r}{2} \\, u_{i-1}^{n+1} + (1+r) \\, u_i^{n+1} - \\frac{r}{2} \\, u_{i+1}^{n+1}\n=\n\\frac{r}{2} \\, u_{i-1}^{n} + (1-r) \\, u_i^{n} + \\frac{r}{2} \\, u_{i+1}^{n},\n$$\n由于 $u_0^n=u_{N-1}^n=0$，边界项的贡献为零。\n\n初始数据由下式设定\n$$\nu_i^0 = \\begin{cases}\n1,  x_i \\in [0.45,0.55],\\\\\n0,  \\text{otherwise},\n\\end{cases}\n\\qquad x_i = i \\Delta x, \\quad i=1,\\dots,N-2.\n$$\n\n为了量化一个时间步后的非物理振荡，我们定义振荡幅度\n$$\nA(\\Delta t) = \\max\\!\\left(0, \\ \\max_{1 \\le i \\le N-2} u_i^{1} - 1 \\right) \\;+\\; \\max\\!\\left(0, \\ 0 - \\min_{1 \\le i \\le N-2} u_i^{1} \\right).\n$$\n第一项衡量超过物理界限 $1$ 的上冲量，第二项衡量低于 $0$ 的下冲量。对于具有非负有界初始数据的热方程，其精确解保持在 $[0,1]$ 区间内，因此任何正的 $A(\\Delta t)$ 都表示由离散格式引起的非物理振荡。\n\n现在我们讨论为什么大的 $r$ 会导致振荡。均匀网格上的离散拉普拉斯算子 $L$ 具有类似于离散正弦的特征模态。对于波数为 $\\theta$ 的傅里叶分量，离散拉普拉斯算子的特征值为 $\\lambda_d(\\theta) = -4\\sin^2(\\theta/2)$。该模态的 Crank–Nicolson 放大因子为\n$$\ng(\\theta; r) = \\frac{1 + \\frac{r}{2}\\lambda_d(\\theta)}{1 - \\frac{r}{2}\\lambda_d(\\theta)}\n= \\frac{1 - 2 r \\sin^2(\\theta/2)}{1 + 2 r \\sin^2(\\theta/2)}.\n$$\n对于任何 $r0$，我们都有 $|g(\\theta;r)|1$，这确保了在 $\\ell^2$ 范数下的无条件稳定性。然而，如果 $2 r \\sin^2(\\theta/2)  1$，则 $g(\\theta;r)  0$，这会在一个时间步内翻转这些傅里叶分量的符号，从而在存在高频成分的尖锐不连续点附近产生振荡。$\\sin^2(\\theta/2)$ 的最大值为 $1$，因此对于 $r  1/2$，最高频率的模态在一个时间步后符号会反转。因此，我们预计对于 $r=0.2$，振荡可以忽略不计；对于 $r=1$，振荡性的下冲/上冲会增加；而对于 $r=5$ 和 $r=25$，振荡会更加显著。\n\n从算法上讲，对于每个指定的 $\\Delta t_k$（等价于 $r_k$），我们执行以下步骤：\n1. 根据内部网格上的阶跃初始条件构造 $u^0$。\n2. 构造三对角系统，其下对角线元素为 $-r_k/2$，主对角线元素为 $1+r_k$，上对角线元素为 $-r_k/2$。\n3. 使用内部值和边界上的 $0$ 来组装右侧项 $(I + \\frac{r_k}{2} L) u^0$。\n4. 求解该三对角系统以获得 $u^1$。\n5. 根据 $u^1$ 的内部值计算如上定义的 $A(\\Delta t_k)$。\n6. 对测试套件中的四个 $\\Delta t_k$ 测试值重复以上步骤。\n\n最后，我们以单行、逗号分隔、方括号括起来的形式输出列表 $[A(\\Delta t_1), A(\\Delta t_2), A(\\Delta t_3), A(\\Delta t_4)]$，每个值都四舍五入到六位小数。这个过程直接反映了 Crank–Nicolson 方法的数学结构，并量化了在不连续初始数据和较大时间步长下可能出现的非物理振荡。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef thomas_tridiagonal(lower, diag, upper, rhs):\n    \"\"\"\n    Solve a tridiagonal system Ax = rhs with A having\n    lower (a), diagonal (b), and upper (c) diagonals.\n    All inputs are 1D numpy arrays:\n      lower: length n-1\n      diag:  length n\n      upper: length n-1\n      rhs:   length n\n    Returns x of length n.\n    \"\"\"\n    n = diag.size\n    # Copy to avoid modifying inputs\n    a = lower.astype(float).copy()\n    b = diag.astype(float).copy()\n    c = upper.astype(float).copy()\n    d = rhs.astype(float).copy()\n\n    # Forward elimination\n    for i in range(1, n):\n        w = a[i-1] / b[i-1]\n        b[i] = b[i] - w * c[i-1]\n        d[i] = d[i] - w * d[i-1]\n\n    # Back substitution\n    x = np.empty(n, dtype=float)\n    x[-1] = d[-1] / b[-1]\n    for i in range(n-2, -1, -1):\n        x[i] = (d[i] - c[i] * x[i+1]) / b[i]\n\n    return x\n\ndef crank_nicolson_first_step_amplitude(N, alpha, dt):\n    \"\"\"\n    Compute the oscillation amplitude A(dt) after one Crank-Nicolson step\n    for the 1D heat equation on [0,1] with homogeneous Dirichlet BCs and\n    discontinuous initial condition: u(x,0)=1 on [0.45,0.55], 0 otherwise.\n    \"\"\"\n    # Grid setup\n    L = 1.0\n    dx = L / (N - 1)\n    r = alpha * dt / (dx * dx)\n\n    # Interior indices: 1..N-2 (Python 0..M-1)\n    M = N - 2\n    x_interior = np.linspace(dx, L - dx, M)\n\n    # Initial condition on interior: 1 on [0.45,0.55], else 0\n    u0 = np.where((x_interior >= 0.45)  (x_interior = 0.55), 1.0, 0.0)\n\n    # Build Crank-Nicolson matrices (implicit LHS tridiagonal, RHS vector)\n    # LHS: (I - r/2 * L) => diag: 1 + r; off-diag: -r/2\n    lower = -0.5 * r * np.ones(M - 1)\n    diag = (1.0 + r) * np.ones(M)\n    upper = -0.5 * r * np.ones(M - 1)\n\n    # RHS: (I + r/2 * L) u0 => (1 - r) * u0 + (r/2) * (u0_{i-1} + u0_{i+1})\n    rhs = (1.0 - r) * u0.copy()\n    rhs[:-1] += 0.5 * r * u0[1:]     # contribution from u0_{i+1}\n    rhs[1:]  += 0.5 * r * u0[:-1]    # contribution from u0_{i-1}\n    # Boundary contributions are zero due to homogeneous Dirichlet BCs.\n\n    # Solve for u1\n    u1 = thomas_tridiagonal(lower, diag, upper, rhs)\n\n    # Compute amplitude A(dt) over interior values\n    max_val = float(np.max(u1))\n    min_val = float(np.min(u1))\n    overshoot = max(0.0, max_val - 1.0)\n    undershoot = max(0.0, -min_val)\n    A = overshoot + undershoot\n    return A\n\ndef solve():\n    # Parameters from the problem statement\n    N = 201\n    alpha = 1.0\n    L = 1.0\n    dx = L / (N - 1)\n\n    # Test suite time steps: dt_k = [0.2, 1.0, 5.0, 25.0] * dx^2 / alpha\n    r_values = [0.2, 1.0, 5.0, 25.0]\n    test_dts = [r * dx * dx / alpha for r in r_values]\n\n    results = []\n    for dt in test_dts:\n        A = crank_nicolson_first_step_amplitude(N, alpha, dt)\n        results.append(f\"{A:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2393571"}]}