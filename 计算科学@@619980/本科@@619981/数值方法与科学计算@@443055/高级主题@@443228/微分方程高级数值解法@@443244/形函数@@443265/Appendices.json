{"hands_on_practices": [{"introduction": "掌握形函数的第一步是亲手从其基本定义出发进行推导。本练习将引导你为常用的一维三节点杆单元构建二次拉格朗日形函数。通过确保节点插值属性和多项式完备性，你将深入理解这些基本函数是如何被构造出来，并验证它们必须满足的单位分解和多项式再生性质。[@problem_id:2635745]", "problem": "在有限元法 (FEM) 中，使用一维杆单元来近似轴向位移场。考虑一个母（等参）坐标 $\\xi \\in [-1,1]$，其上有三个节点，分别位于 $\\xi_1=-1$、$\\xi_2=0$ 和 $\\xi_3=1$。设近似位移使用三个二次拉格朗日形函数 $N_1(\\xi)$、$N_2(\\xi)$ 和 $N_3(\\xi)$ 进行插值，每个函数都是次数至多为2的多项式，且满足克罗内克-德尔塔插值条件 $N_i(\\xi_j)=\\delta_{ij}$，其中 $i,j\\in\\{1,2,3\\}$。\n\n从节点插值和多项式完备性的核心定义出发，通过施加节点条件和二次多项式要求，推导 $N_1(\\xi)$、$N_2(\\xi)$ 和 $N_3(\\xi)$ 的显式表达式。然后，验证此类插值应具备的两个基本性质：\n- 次数至多为2的多项式再生性：对于任意二次多项式位移场 $u(\\xi)=a_0+a_1\\,\\xi+a_2\\,\\xi^2$，证明其插值函数 $u^h(\\xi)=\\sum_{i=1}^3 N_i(\\xi)\\,u(\\xi_i)$ 与 $u(\\xi)$ 对所有 $\\xi\\in[-1,1]$ 恒等。\n- 单位分解性：证明对所有 $\\xi\\in[-1,1]$，$\\sum_{i=1}^3 N_i(\\xi)=1$。\n\n将您的最终答案以单行向量 $\\left[N_1(\\xi)\\;N_2(\\xi)\\;N_3(\\xi)\\right]$ 的形式给出，其中包含关于 $\\xi$ 的封闭形式解析表达式。不需要数值四舍五入。最终答案中不包含单位。", "solution": "所提出的问题是有限元法理论中的一个标准练习。它具有科学依据，提法明确，客观且完整，不包含任何矛盾或谬误。因此，我将着手解决它。\n\n任务是为一个一维三节点母单元推导二次拉格朗日形函数，并验证它们的两个基本性质。该单元定义在等参坐标域 $\\xi \\in [-1, 1]$ 上，节点位于 $\\xi_1 = -1$、$\\xi_2 = 0$ 和 $\\xi_3 = 1$。\n\n形函数记为 $N_i(\\xi)$（$i \\in \\{1, 2, 3\\}$），是次数至多为2的多项式。它们由节点位置上的克罗内克-德尔塔性质定义：\n$$ N_i(\\xi_j) = \\delta_{ij} = \\begin{cases} 1  \\text{if } i=j \\\\ 0  \\text{if } i \\neq j \\end{cases} $$\n我们将通过假设一个通用的二次形式 $N(\\xi) = a\\xi^2 + b\\xi + c$，并通过施加这些节点条件来求解系数 $a$、$b$ 和 $c$ 来推导每个函数。\n\n推导 $N_1(\\xi)$：\n$N_1(\\xi)$ 的条件是 $N_1(\\xi_1) = 1$、$N_1(\\xi_2) = 0$ 和 $N_1(\\xi_3) = 0$。\n设 $N_1(\\xi) = a_1\\xi^2 + b_1\\xi + c_1$。\n1.  在节点 $\\xi_2=0$ 处：$N_1(0) = a_1(0)^2 + b_1(0) + c_1 = c_1 = 0$。\n2.  在节点 $\\xi_3=1$ 处：$N_1(1) = a_1(1)^2 + b_1(1) + c_1 = a_1 + b_1 + 0 = 0$。这意味着 $b_1 = -a_1$。\n3.  在节点 $\\xi_1=-1$ 处：$N_1(-1) = a_1(-1)^2 + b_1(-1) + c_1 = a_1 - b_1 + 0 = 1$。\n将 $b_1 = -a_1$ 代入第三个方程，得到 $a_1 - (-a_1) = 2a_1 = 1$，得出 $a_1 = \\frac{1}{2}$。因此，$b_1 = -\\frac{1}{2}$。\n因此，$N_1(\\xi)$ 的表达式为：\n$$ N_1(\\xi) = \\frac{1}{2}\\xi^2 - \\frac{1}{2}\\xi = \\frac{1}{2}\\xi(\\xi-1) $$\n\n推导 $N_2(\\xi)$：\n$N_2(\\xi)$ 的条件是 $N_2(\\xi_1) = 0$、$N_2(\\xi_2) = 1$ 和 $N_2(\\xi_3) = 0$。\n设 $N_2(\\xi) = a_2\\xi^2 + b_2\\xi + c_2$。\n1.  在节点 $\\xi_2=0$ 处：$N_2(0) = a_2(0)^2 + b_2(0) + c_2 = c_2 = 1$。\n2.  在节点 $\\xi_3=1$ 处：$N_2(1) = a_2(1)^2 + b_2(1) + c_2 = a_2 + b_2 + 1 = 0$。\n3.  在节点 $\\xi_1=-1$ 处：$N_2(-1) = a_2(-1)^2 + b_2(-1) + c_2 = a_2 - b_2 + 1 = 0$。\n我们得到一个关于 $a_2$ 和 $b_2$ 的二元一次方程组：\n$$ a_2 + b_2 = -1 $$\n$$ a_2 - b_2 = -1 $$\n将这两个方程相加，得到 $2a_2 = -2$，所以 $a_2 = -1$。将此结果代入第一个方程，得到 $-1 + b_2 = -1$，所以 $b_2 = 0$。\n因此，$N_2(\\xi)$ 的表达式为：\n$$ N_2(\\xi) = (-1)\\xi^2 + (0)\\xi + 1 = 1 - \\xi^2 $$\n\n推导 $N_3(\\xi)$：\n$N_3(\\xi)$ 的条件是 $N_3(\\xi_1) = 0$、$N_3(\\xi_2) = 0$ 和 $N_3(\\xi_3) = 1$。\n设 $N_3(\\xi) = a_3\\xi^2 + b_3\\xi + c_3$。\n1.  在节点 $\\xi_2=0$ 处：$N_3(0) = a_3(0)^2 + b_3(0) + c_3 = c_3 = 0$。\n2.  在节点 $\\xi_1=-1$ 处：$N_3(-1) = a_3(-1)^2 + b_3(-1) + c_3 = a_3 - b_3 + 0 = 0$。这意味着 $b_3 = a_3$。\n3.  在节点 $\\xi_3=1$ 处：$N_3(1) = a_3(1)^2 + b_3(1) + c_3 = a_3 + b_3 + 0 = 1$。\n将 $b_3 = a_3$ 代入第三个方程，得到 $a_3 + a_3 = 2a_3 = 1$，得出 $a_3 = \\frac{1}{2}$。因此，$b_3 = \\frac{1}{2}$。\n因此，$N_3(\\xi)$ 的表达式为：\n$$ N_3(\\xi) = \\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi = \\frac{1}{2}\\xi(\\xi+1) $$\n\n现在，我们来验证所要求的两个性质。\n\n验证单位分解性：\n我们必须证明对于所有 $\\xi \\in [-1, 1]$，$\\sum_{i=1}^3 N_i(\\xi) = 1$。\n$$ \\sum_{i=1}^3 N_i(\\xi) = N_1(\\xi) + N_2(\\xi) + N_3(\\xi) $$\n$$ = \\left(\\frac{1}{2}\\xi^2 - \\frac{1}{2}\\xi\\right) + (1 - \\xi^2) + \\left(\\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi\\right) $$\n合并 $\\xi$ 的同次幂项：\n$$ = \\left(\\frac{1}{2} - 1 + \\frac{1}{2}\\right)\\xi^2 + \\left(-\\frac{1}{2} + \\frac{1}{2}\\right)\\xi + 1 $$\n$$ = (0)\\xi^2 + (0)\\xi + 1 = 1 $$\n单位分解性对于所有 $\\xi$ 恒成立。\n\n验证多项式再生性：\n我们必须证明对于任意二次多项式 $u(\\xi) = a_0 + a_1\\xi + a_2\\xi^2$，其插值函数 $u^h(\\xi) = \\sum_{i=1}^3 N_i(\\xi)u(\\xi_i)$ 与 $u(\\xi)$ 恒等。\n首先，计算 $u(\\xi)$ 的节点值：\n$u(\\xi_1) = u(-1) = a_0 - a_1 + a_2$\n$u(\\xi_2) = u(0) = a_0$\n$u(\\xi_3) = u(1) = a_0 + a_1 + a_2$\n现在，构建插值函数 $u^h(\\xi)$：\n$$ u^h(\\xi) = N_1(\\xi)(a_0 - a_1 + a_2) + N_2(\\xi)(a_0) + N_3(\\xi)(a_0 + a_1 + a_2) $$\n通过提取系数 $a_0$、$a_1$ 和 $a_2$ 来重新整理表达式：\n$$ u^h(\\xi) = a_0 [N_1(\\xi)+N_2(\\xi)+N_3(\\xi)] + a_1 [-N_1(\\xi)+N_3(\\xi)] + a_2 [N_1(\\xi)+N_3(\\xi)] $$\n让我们分析每个 $a_k$ 的系数：\n$a_0$ 的系数是 $\\sum_{i=1}^3 N_i(\\xi)$，我们已经证明了它等于 $1$。\n$a_1$ 的系数是 $-N_1(\\xi)+N_3(\\xi)$：\n$$ -N_1(\\xi)+N_3(\\xi) = -\\left(\\frac{1}{2}\\xi^2 - \\frac{1}{2}\\xi\\right) + \\left(\\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi\\right) = -\\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi + \\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi = \\xi $$\n$a_2$ 的系数是 $N_1(\\xi)+N_3(\\xi)$：\n$$ N_1(\\xi)+N_3(\\xi) = \\left(\\frac{1}{2}\\xi^2 - \\frac{1}{2}\\xi\\right) + \\left(\\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi\\right) = \\xi^2 $$\n将这些结果代回 $u^h(\\xi)$ 的表达式中：\n$$ u^h(\\xi) = a_0(1) + a_1(\\xi) + a_2(\\xi^2) = a_0 + a_1\\xi + a_2\\xi^2 $$\n这与 $u(\\xi)$ 恒等。再生任意二次多项式的能力得到了证实。这是基函数 $\\{N_i(\\xi)\\}$ 能够表示单项式 $\\{1, \\xi, \\xi^2\\}$ 的直接结果，而我们刚刚已经证明了这一点。\n\n推导和验证都已完成。最终答案是形函数的显式表达式集合。", "answer": "$$ \\boxed{ \\begin{pmatrix} \\frac{1}{2}\\xi(\\xi-1)  1-\\xi^2  \\frac{1}{2}\\xi(\\xi+1) \\end{pmatrix} } $$", "id": "2635745"}, {"introduction": "形函数的价值体现在它们如何将离散的节点位移与单元内的连续物理场（如应变）联系起来。在本练习中，你将从一维进入二维，计算经典“常应变三角形”单元的应变-位移矩阵（$B$ 矩阵）。这个过程将揭示形函数的梯度如何直接决定单元的力学行为，并从根本上解释为何线性单元无法模拟弯曲等复杂变形。[@problem_id:2635801]", "problem": "考虑一个用于小应变平面问题的二维线性三角形有限元（通常称为常应变三角形），该单元在有限元法 (FEM) 中使用。设三个节点的笛卡尔坐标分别为 $(x_{1},y_{1})=(0,0)$、$(x_{2},y_{2})=(3,0)$ 和 $(x_{3},y_{3})=(1,2)$。该单元具有通常的线性形函数 $N_{1}(x,y)$、$N_{2}(x,y)$ 和 $N_{3}(x,y)$，每个函数都是关于 $x$ 和 $y$ 的线性多项式，满足克罗内克-δ (Kronecker-delta) 节点插值性质 $N_{i}(x_{j},y_{j})=\\delta_{ij}$ 和单位分解性质 $\\sum_{i=1}^{3}N_{i}(x,y)=1$。位移场通过插值得到：$u(x,y)=\\sum_{i=1}^{3}N_{i}(x,y)\\,u_{i}$ 和 $v(x,y)=\\sum_{i=1}^{3}N_{i}(x,y)\\,v_{i}$，其中 $u_{i}$ 和 $v_{i}$ 分别是节点 $i$ 在 $x$ 和 $y$ 方向上的节点位移分量。小应变向量定义为 $\\boldsymbol{\\varepsilon}=\\begin{pmatrix}\\varepsilon_{x}  \\varepsilon_{y}  \\gamma_{xy}\\end{pmatrix}^{\\mathsf{T}}=\\begin{pmatrix}\\partial u/\\partial x  \\partial v/\\partial y  \\partial u/\\partial y + \\partial v/\\partial x\\end{pmatrix}^{\\mathsf{T}}$。根据单元应变-位移矩阵的定义，有 $\\boldsymbol{\\varepsilon}=\\mathbf{B}\\,\\mathbf{d}$，其中 $\\mathbf{d}=\\begin{pmatrix}u_{1}  v_{1}  u_{2}  v_{2}  u_{3}  v_{3}\\end{pmatrix}^{\\mathsf{T}}$。\n\n仅从上述形函数的基本性质和小应变的定义出发，执行以下操作：\n\n1) 构造与给定节点坐标一致的线性形函数 $N_{1}(x,y)$、$N_{2}(x,y)$ 和 $N_{3}(x,y)$，并计算它们的常梯度 $\\partial N_{i}/\\partial x$ 和 $\\partial N_{i}/\\partial y$。\n\n2) 组装单元应变-位移矩阵 $\\mathbf{B}$，使得 $\\boldsymbol{\\varepsilon}=\\mathbf{B}\\,\\mathbf{d}$，并按照标准排序 $\\boldsymbol{\\varepsilon}=\\begin{pmatrix}\\varepsilon_{x}  \\varepsilon_{y}  \\gamma_{xy}\\end{pmatrix}^{\\mathsf{T}}$ 和 $\\mathbf{d}=\\begin{pmatrix}u_{1}  v_{1}  u_{2}  v_{2}  u_{3}  v_{3}\\end{pmatrix}^{\\mathsf{T}}$ 书写。\n\n3) 仅使用第一性原理，解释为什么矩阵 $\\mathbf{B}$ 在整个单元域上是常数，并推导其后果：即该单元在任何节点位移向量下都会产生一个均匀（常数）应变场，因此不能表示需要空间变化的法向应变的纯弯曲状态。通过刻画该单元能产生的最一般的位移场并对其求导来阐述你的论证。\n\n提供最终的 $\\mathbf{B}$ 矩阵，其元素为精确的有理数。不要进行四舍五入。你最终在方框内的答案必须是单个矩阵 $\\mathbf{B}$，不带单位。", "solution": "问题陈述经核实具有科学依据、适定且客观。它代表了有限元法理论中的一个标准、基本的练习。所有提供的数据都是自洽和一致的。我们开始解题。\n\n该问题要求构造一个线性三角形单元的应变-位移矩阵 $\\mathbf{B}$，并对其性质进行第一性原理的解释。这将按要求分三部分进行。\n\n**第一部分：形函数及其梯度的构造**\n\n二维单元的线性形函数具有以下一般形式：\n$$N_{i}(x,y) = \\alpha_{i0} + \\alpha_{i1} x + \\alpha_{i2} y$$\n每个形函数的三个系数是通过在三个节点上强制执行克罗内克-δ (Kronecker-delta) 性质 $N_{i}(x_{j},y_{j})=\\delta_{ij}$ 来确定的。给定的节点坐标为 $(x_{1},y_{1})=(0,0)$、$(x_{2},y_{2})=(3,0)$ 和 $(x_{3},y_{3})=(1,2)$。\n\n对于形函数 $N_{1}(x,y)$：\n1. $N_{1}(x_{1},y_{1})=N_{1}(0,0) = \\alpha_{10} = 1$\n2. $N_{1}(x_{2},y_{2})=N_{1}(3,0) = \\alpha_{10} + 3\\alpha_{11} = 1 + 3\\alpha_{11} = 0 \\implies \\alpha_{11} = -1/3$\n3. $N_{1}(x_{3},y_{3})=N_{1}(1,2) = \\alpha_{10} + \\alpha_{11} + 2\\alpha_{12} = 1 - 1/3 + 2\\alpha_{12} = 0 \\implies 2/3 + 2\\alpha_{12} = 0 \\implies \\alpha_{12} = -1/3$\n因此，$N_{1}(x,y) = 1 - \\frac{1}{3}x - \\frac{1}{3}y$。\n\n对于形函数 $N_{2}(x,y)$：\n1. $N_{2}(x_{1},y_{1})=N_{2}(0,0) = \\alpha_{20} = 0$\n2. $N_{2}(x_{2},y_{2})=N_{2}(3,0) = \\alpha_{20} + 3\\alpha_{21} = 3\\alpha_{21} = 1 \\implies \\alpha_{21} = 1/3$\n3. $N_{2}(x_{3},y_{3})=N_{2}(1,2) = \\alpha_{20} + \\alpha_{21} + 2\\alpha_{22} = 1/3 + 2\\alpha_{22} = 0 \\implies \\alpha_{22} = -1/6$\n因此，$N_{2}(x,y) = \\frac{1}{3}x - \\frac{1}{6}y$。\n\n对于形函数 $N_{3}(x,y)$：\n1. $N_{3}(x_{1},y_{1})=N_{3}(0,0) = \\alpha_{30} = 0$\n2. $N_{3}(x_{2},y_{2})=N_{3}(3,0) = \\alpha_{30} + 3\\alpha_{31} = 3\\alpha_{31} = 0 \\implies \\alpha_{31} = 0$\n3. $N_{3}(x_{3},y_{3})=N_{3}(1,2) = \\alpha_{30} + \\alpha_{31} + 2\\alpha_{32} = 2\\alpha_{32} = 1 \\implies \\alpha_{32} = 1/2$\n因此，$N_{3}(x,y) = \\frac{1}{2}y$。\n\n单位分解条件 $\\sum_{i=1}^{3}N_{i}=1$ 得到满足：\n$$ \\left(1 - \\frac{1}{3}x - \\frac{1}{3}y\\right) + \\left(\\frac{1}{3}x - \\frac{1}{6}y\\right) + \\left(\\frac{1}{2}y\\right) = 1 + \\left(-\\frac{1}{3}+\\frac{1}{3}\\right)x + \\left(-\\frac{1}{3}-\\frac{1}{6}+\\frac{1}{2}\\right)y = 1 $$\n形函数的梯度通过直接微分计算。由于形函数是关于 $x$ 和 $y$ 的线性多项式，它们的梯度是常数。\n$$ \\frac{\\partial N_{1}}{\\partial x} = -\\frac{1}{3}, \\quad \\frac{\\partial N_{1}}{\\partial y} = -\\frac{1}{3} $$\n$$ \\frac{\\partial N_{2}}{\\partial x} = \\frac{1}{3}, \\quad \\frac{\\partial N_{2}}{\\partial y} = -\\frac{1}{6} $$\n$$ \\frac{\\partial N_{3}}{\\partial x} = 0, \\quad \\frac{\\partial N_{3}}{\\partial y} = \\frac{1}{2} $$\n\n**第二部分：应变-位移矩阵 $\\mathbf{B}$ 的组装**\n\n位移场 $(u, v)$ 是使用形函数从节点位移 $(u_i, v_i)$ 插值得到的：\n$$ u(x,y) = \\sum_{i=1}^{3} N_{i}(x,y) u_{i} = N_{1}u_{1} + N_{2}u_{2} + N_{3}u_{3} $$\n$$ v(x,y) = \\sum_{i=1}^{3} N_{i}(x,y) v_{i} = N_{1}v_{1} + N_{2}v_{2} + N_{3}v_{3} $$\n小应变分量定义为：\n$$ \\varepsilon_{x} = \\frac{\\partial u}{\\partial x}, \\quad \\varepsilon_{y} = \\frac{\\partial v}{\\partial y}, \\quad \\gamma_{xy} = \\frac{\\partial u}{\\partial y} + \\frac{\\partial v}{\\partial x} $$\n通过代入插值位移场，我们得到应变：\n$$ \\varepsilon_{x} = \\frac{\\partial}{\\partial x} \\left( \\sum_{i=1}^{3} N_{i} u_{i} \\right) = \\sum_{i=1}^{3} \\frac{\\partial N_{i}}{\\partial x} u_{i} = \\frac{\\partial N_{1}}{\\partial x}u_{1} + \\frac{\\partial N_{2}}{\\partial x}u_{2} + \\frac{\\partial N_{3}}{\\partial x}u_{3} $$\n$$ \\varepsilon_{y} = \\frac{\\partial}{\\partial y} \\left( \\sum_{i=1}^{3} N_{i} v_{i} \\right) = \\sum_{i=1}^{3} \\frac{\\partial N_{i}}{\\partial y} v_{i} = \\frac{\\partial N_{1}}{\\partial y}v_{1} + \\frac{\\partial N_{2}}{\\partial y}v_{2} + \\frac{\\partial N_{3}}{\\partial y}v_{3} $$\n$$ \\gamma_{xy} = \\frac{\\partial}{\\partial y} \\left( \\sum_{i=1}^{3} N_{i} u_{i} \\right) + \\frac{\\partial}{\\partial x} \\left( \\sum_{i=1}^{3} N_{i} v_{i} \\right) = \\sum_{i=1}^{3} \\left( \\frac{\\partial N_{i}}{\\partial y} u_{i} + \\frac{\\partial N_{i}}{\\partial x} v_{i} \\right) $$\n这些表达式可以写成矩阵形式 $\\boldsymbol{\\varepsilon} = \\mathbf{B} \\mathbf{d}$，其中 $\\mathbf{d} = \\begin{pmatrix} u_{1}  v_{1}  u_{2}  v_{2}  u_{3}  v_{3} \\end{pmatrix}^{\\mathsf{T}}$：\n$$\n\\begin{pmatrix} \\varepsilon_{x} \\\\ \\varepsilon_{y} \\\\ \\gamma_{xy} \\end{pmatrix} =\n\\begin{pmatrix}\n\\frac{\\partial N_{1}}{\\partial x}  0  \\frac{\\partial N_{2}}{\\partial x}  0  \\frac{\\partial N_{3}}{\\partial x}  0 \\\\\n0  \\frac{\\partial N_{1}}{\\partial y}  0  \\frac{\\partial N_{2}}{\\partial y}  0  \\frac{\\partial N_{3}}{\\partial y} \\\\\n\\frac{\\partial N_{1}}{\\partial y}  \\frac{\\partial N_{1}}{\\partial x}  \\frac{\\partial N_{2}}{\\partial y}  \\frac{\\partial N_{2}}{\\partial x}  \\frac{\\partial N_{3}}{\\partial y}  \\frac{\\partial N_{3}}{\\partial x}\n\\end{pmatrix}\n\\begin{pmatrix} u_{1} \\\\ v_{1} \\\\ u_{2} \\\\ v_{2} \\\\ u_{3} \\\\ v_{3} \\end{pmatrix}\n$$\n因此确定了矩阵 $\\mathbf{B}$。代入在第一部分中计算出的常梯度，得到该单元的最终结果：\n$$ \\mathbf{B} = \\begin{pmatrix}\n-\\frac{1}{3}  0  \\frac{1}{3}  0  0  0 \\\\\n0  -\\frac{1}{3}  0  -\\frac{1}{6}  0  \\frac{1}{2} \\\\\n-\\frac{1}{3}  -\\frac{1}{3}  -\\frac{1}{6}  \\frac{1}{3}  \\frac{1}{2}  0\n\\end{pmatrix} $$\n\n**第三部分：第一性原理的解释**\n\n线性三角形单元的常应变行为是其形函数线性的直接后果。\n\n1.  为什么 $\\mathbf{B}$ 是常数：矩阵 $\\mathbf{B}$ 完全由形函数的一阶偏导数 $\\frac{\\partial N_{i}}{\\partial x}$ 和 $\\frac{\\partial N_{i}}{\\partial y}$ 组成。根据定义，此类单元的形函数 $N_i(x, y)$ 是形式为 $\\alpha_{i0} + \\alpha_{i1} x + \\alpha_{i2} y$ 的线性多项式。这样一个函数对 $x$ 或 $y$ 的偏导数是一个常数（分别为 $\\alpha_{i1}$ 或 $\\alpha_{i2}$）。由于 $\\mathbf{B}$ 矩阵中的每个元素都是这些常梯度之一（或零），所以整个矩阵 $\\mathbf{B}$ 在单元域上是常数。其值仅取决于定义几何形状的节点坐标，而不取决于单元内的位置 $(x, y)$。\n\n2.  后果（常应变和无法模拟弯曲）：\n    位移场 $u(x,y)$ 和 $v(x,y)$ 是线性形函数的线性组合。线性多项式的线性组合结果是另一个线性多项式。因此，该单元能表示的最一般的位移场形式为：\n    $$ u(x,y) = c_{1} + c_{2}x + c_{3}y $$\n    $$ v(x,y) = c_{4} + c_{5}x + c_{6}y $$\n    其中系数 $c_{k}$ 是由节点位移决定的常数。\n    通过对该位移场求导获得应变：\n    $$ \\varepsilon_{x} = \\frac{\\partial u}{\\partial x} = c_{2} $$\n    $$ \\varepsilon_{y} = \\frac{\\partial v}{\\partial y} = c_{6} $$\n    $$ \\gamma_{xy} = \\frac{\\partial u}{\\partial y} + \\frac{\\partial v}{\\partial x} = c_{3} + c_{5} $$\n    应变分量在整个单元内是常数。这就是为什么该单元被称为常应变三角形 (CST)。\n\n    然而，纯弯曲的根本特征是线性变化的应变场。例如，在 $x-y$ 平面内弯曲的梁，其法向应变 $\\varepsilon_x$ 是 $y$ 的线性函数，如 $\\varepsilon_{x}(y) = \\kappa y$，其中 $\\kappa$ 是曲率。一个常数应变场要成为一个非常数的线性函数，只有当常数项和斜率都为零时才可能，这对应于无变形的平凡情况。CST单元根据其构造，在其域内只能为每个应变分量产生一个单一的、恒定的值。因此，它在构造上无法表示纯弯曲状态所必需的应变梯度。由这类单元组成的集合只能用分段常数的“阶梯状”应力来近似弯矩，这是一种很差的表示，并会导致剪切自锁等数值病态问题。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n-\\frac{1}{3}  0  \\frac{1}{3}  0  0  0 \\\\\n0  -\\frac{1}{3}  0  -\\frac{1}{6}  0  \\frac{1}{2} \\\\\n-\\frac{1}{3}  -\\frac{1}{3}  -\\frac{1}{6}  \\frac{1}{3}  \\frac{1}{2}  0\n\\end{pmatrix}\n}\n$$", "id": "2635801"}, {"introduction": "将理论付诸实践是工程与科学计算的核心。本练习旨在通过编程，让你体验形函数在真实有限元软件中的作用，特别是“等参元”的概念。你将为四节点四边形单元实现形函数及其雅可比行列式，并计算与单元变形相关的关键指标，从而直观地理解当单元节点在物理空间中被“拖动”时，其几何形状和场插值是如何变化的。[@problem_id:3272799]", "problem": "您的任务是基于有限元法 (FEM) 中的形函数，构建一个二维颜色映射工具的计算核心。其可视化构想如下：在父（参考）域上，通过选定的形函数 $N_i(\\xi,\\eta)$ 为一个四边形单元赋予标量“颜色强度”，而物理空间中的单元则随着其节点被“拖动”而改变形状。在本编程练习中，您不需要实现任何图形或交互功能；相反，您将从第一性原理推导相关公式，并计算样本网格上“颜色强度”场的定量指标。\n\n使用的基本原理：\n- 参考（父）域是坐标为 $(\\xi,\\eta)$ 的正方形 $[-1,1] \\times [-1,1]$。\n- 对于一个四节点双线性四边形单元，定义形函数 $N_1(\\xi,\\eta)$、$N_2(\\xi,\\eta)$、$N_3(\\xi,\\eta)$ 和 $N_4(\\xi,\\eta)$，使得以下插值特性成立：在四个角点 $(\\xi_j,\\eta_j) \\in \\{(-1,-1),(1,-1),(1,1),(-1,1)\\}$ 处，$N_i(\\xi_j,\\eta_j) = \\delta_{ij}$，其中 $\\delta_{ij}$ 是克罗内克 δ (Kronecker delta)；并且单位分解特性 $\\sum_{i=1}^4 N_i(\\xi,\\eta) = 1$ 对参考域中所有的 $(\\xi,\\eta)$ 均成立。\n- 等参映射将物理坐标 $(x,y)$ 定义为 $x(\\xi,\\eta) = \\sum_{i=1}^4 N_i(\\xi,\\eta) x_i$ 和 $y(\\xi,\\eta) = \\sum_{i=1}^4 N_i(\\xi,\\eta) y_i$，其中 $(x_i,y_i)$ 是单元节点的物理坐标，其排序与参考角点 $(\\xi_1,\\eta_1)=(-1,-1)$、$(\\xi_2,\\eta_2)=(1,-1)$、$(\\xi_3,\\eta_3)=(1,1)$、$(\\xi_4,\\eta_4)=(-1,1)$ 一致。\n- 该映射的雅可比矩阵为 $\\mathbf{J}(\\xi,\\eta) = \\begin{bmatrix} \\frac{\\partial x}{\\partial \\xi}  \\frac{\\partial x}{\\partial \\eta} \\\\ \\frac{\\partial y}{\\partial \\xi}  \\frac{\\partial y}{\\partial \\eta} \\end{bmatrix}$，其行列式为 $J(\\xi,\\eta) = \\det \\mathbf{J}(\\xi,\\eta)$。对于面积相关的加权，您应使用其绝对值 $\\lvert J(\\xi,\\eta) \\rvert$。\n\n您的目标：\n1. 根据参考域中的插值特性，推导四个双线性形函数 $N_i(\\xi,\\eta)$ 的显式公式。\n2. 推导偏导数 $\\frac{\\partial N_i}{\\partial \\xi}$ 和 $\\frac{\\partial N_i}{\\partial \\eta}$ 的表达式，并用它们计算任意给定单元节点位置下的雅可比行列式 $J(\\xi,\\eta)$。\n3. 实现一个程序，该程序：\n   - 在参考域 $[-1,1] \\times [-1,1]$ 上构建一个 $n \\times n$ 的均匀样本点网格（选择 $n=41$）。\n   - 对于选定的索引 $i \\in \\{1,2,3,4\\}$，将 $N_i(\\xi,\\eta)$ 视为 $(\\xi,\\eta)$ 处的颜色强度，并在网格上计算以下指标：\n     a) 物理面积加权平均颜色强度，定义为 $$\\overline{N_i} = \\frac{\\sum_{k=1}^{n^2} N_i(\\xi_k,\\eta_k) \\lvert J(\\xi_k,\\eta_k) \\rvert}{\\sum_{k=1}^{n^2} \\lvert J(\\xi_k,\\eta_k) \\rvert}.$$\n     b) 物理面积加权颜色强度标准差，定义为 $$\\sigma_{N_i} = \\sqrt{\\frac{\\sum_{k=1}^{n^2} \\lvert J(\\xi_k,\\eta_k) \\rvert \\left(N_i(\\xi_k,\\eta_k) - \\overline{N_i}\\right)^2}{\\sum_{k=1}^{n^2} \\lvert J(\\xi_k,\\eta_k) \\rvert}}.$$\n     c) 网格上 $\\lvert J(\\xi,\\eta) \\rvert$ 的最小值。\n     d) 网格上 $\\lvert J(\\xi,\\eta) \\rvert$ 的最大值。\n     e) 与单位分解的最大绝对偏差，定义为 $$\\max_{k=1,\\dots,n^2} \\left\\lvert \\sum_{j=1}^{4} N_j(\\xi_k,\\eta_k) - 1 \\right\\rvert.$$\n   - 注意：物理面积加权量通过 $\\lvert J(\\xi,\\eta) \\rvert$ 包含了节点拖动引起的几何畸变。这模拟了可视化如何强调物理空间中占据更大面积的区域。\n\n测试套件：\n使用以下四个测试用例，每个用例由单元节点坐标 $\\left[(x_1,y_1),(x_2,y_2),(x_3,y_3),(x_4,y_4)\\right]$ 和选定的形函数索引 $i$ 定义。\n- 用例1（正常路径，仿射矩形）：节点 $[(0,0),(2,0),(2,1),(0,1)]$，$i=1$。\n- 用例2（凸四边形，非仿射）：节点 $[(0,0),(2,0),(1.6,1.2),(0,1)]$，$i=2$。\n- 用例3（细长的近退化单元）：节点 $[(0,0),(1,0),(0.8,0.05),(0,0.05)]$，$i=4$。\n- 用例4（反转/畸变单元）：节点 $[(0,0),(1,0),(0.2,1.0),(-0.1,0.1)]$，$i=3$。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。对于每个测试用例，按顺序 $\\left[\\overline{N_i}, \\sigma_{N_i}, \\min \\lvert J \\rvert, \\max \\lvert J \\rvert, \\text{partition\\_of\\_unity\\_max\\_deviation}\\right]$ 输出五个浮点数指标，并将所有四个用例的结果顺序聚合到一个扁平列表中。例如，通用格式为\n$[\\text{case1\\_mean},\\text{case1\\_std},\\text{case1\\_minJ},\\text{case1\\_maxJ},\\text{case1\\_pu\\_dev},\\text{case2\\_mean},\\dots,\\text{case4\\_pu\\_dev}]$。\n所有值都应以浮点数形式报告。此问题不涉及物理单位或角度，因此无需指定单位。", "solution": "问题陈述经评估具有科学依据、形式适定、客观且完整。它描述了有限元法 (FEM) 框架内一项标准的、尽管详尽的计算任务。所有定义、变量和目标都已明确说明，所提供的测试用例也适合于验证实现。因此，该问题被视为**有效的**，下面提供了解决方案。\n\n解决方案根据问题陈述中概述的目标进行组织。首先，我们推导形函数和等参映射雅可比的必要解析公式。其次，我们描述计算所需指标的计算过程。\n\n**1. 双线性形函数的推导**\n\n四节点四边形单元使用双线性形函数 $N_i(\\xi, \\eta)$，这些函数在 $\\xi$ 和 $\\eta$ 两个方向上都是线性的。它们定义在父域上，即 $(\\xi, \\eta)$ 空间中 $\\xi \\in [-1, 1]$ 和 $\\eta \\in [-1, 1]$ 的一个正方形。构建这些函数的一种常用方法是通过对一维线性拉格朗日插值多项式取乘积。在区间 $\\zeta \\in [-1, 1]$ 上的一维基函数为：\n$$L_1(\\zeta) = \\frac{1}{2}(1-\\zeta)$$\n$$L_2(\\zeta) = \\frac{1}{2}(1+\\zeta)$$\n$L_1$ 在 $\\zeta=-1$ 处为 $1$，在 $\\zeta=1$ 处为 $0$；而 $L_2$ 在 $\\zeta=-1$ 处为 $0$，在 $\\zeta=1$ 处为 $1$。\n\n二维形函数是通过将这些用于 $\\xi$ 和 $\\eta$ 坐标的一维函数进行组合而形成的，对应于父单元的四个节点：节点1位于 $(-1, -1)$，节点2位于 $(1, -1)$，节点3位于 $(1, 1)$，节点4位于 $(-1, 1)$。\n\n- **节点1 $(-1, -1)$ 的形函数 $N_1(\\xi, \\eta)$：**\n  该函数在 $(\\xi, \\eta) = (-1, -1)$ 处必须为 $1$，在其他三个节点处为 $0$。这通过乘积 $L_1(\\xi)L_1(\\eta)$ 实现。\n  $$N_1(\\xi, \\eta) = \\frac{1}{2}(1-\\xi) \\frac{1}{2}(1-\\eta) = \\frac{1}{4}(1 - \\xi - \\eta + \\xi\\eta)$$\n\n- **节点2 $(1, -1)$ 的形函数 $N_2(\\xi, \\eta)$：**\n  该函数需要乘积 $L_2(\\xi)L_1(\\eta)$。\n  $$N_2(\\xi, \\eta) = \\frac{1}{2}(1+\\xi) \\frac{1}{2}(1-\\eta) = \\frac{1}{4}(1 + \\xi - \\eta - \\xi\\eta)$$\n\n- **节点3 $(1, 1)$ 的形函数 $N_3(\\xi, \\eta)$：**\n  该函数需要乘积 $L_2(\\xi)L_2(\\eta)$。\n  $$N_3(\\xi, \\eta) = \\frac{1}{2}(1+\\xi) \\frac{1}{2}(1+\\eta) = \\frac{1}{4}(1 + \\xi + \\eta + \\xi\\eta)$$\n\n- **节点4 $(-1, 1)$ 的形函数 $N_4(\\xi, \\eta)$：**\n  该函数需要乘积 $L_1(\\xi)L_2(\\eta)$。\n  $$N_4(\\xi, \\eta) = \\frac{1}{2}(1-\\xi) \\frac{1}{2}(1+\\eta) = \\frac{1}{4}(1 - \\xi + \\eta - \\xi\\eta)$$\n\n这些函数满足克罗内克 δ 特性 $N_i(\\xi_j, \\eta_j) = \\delta_{ij}$ 和单位分解特性 $\\sum_{i=1}^4 N_i(\\xi, \\eta) = 1$，后者可以通过直接求和来验证。单位分解特性是计算实现中一个重要的内部检查。\n\n**2. 雅可比行列式的推导**\n\n雅可比矩阵 $\\mathbf{J}$ 将物理空间 $(x, y)$ 中的导数与参考空间 $(\\xi, \\eta)$ 中的导数关联起来。其分量取决于形函数的偏导数。\n\n首先，我们求出每个形函数关于 $\\xi$ 和 $\\eta$ 的偏导数：\n$$ \\frac{\\partial N_1}{\\partial \\xi} = \\frac{1}{4}(-1 + \\eta), \\quad \\frac{\\partial N_1}{\\partial \\eta} = \\frac{1}{4}(-1 + \\xi) $$\n$$ \\frac{\\partial N_2}{\\partial \\xi} = \\frac{1}{4}(1 - \\eta), \\quad \\frac{\\partial N_2}{\\partial \\eta} = \\frac{1}{4}(-1 - \\xi) $$\n$$ \\frac{\\partial N_3}{\\partial \\xi} = \\frac{1}{4}(1 + \\eta), \\quad \\frac{\\partial N_3}{\\partial \\eta} = \\frac{1}{4}(1 + \\xi) $$\n$$ \\frac{\\partial N_4}{\\partial \\xi} = \\frac{1}{4}(-1 - \\eta), \\quad \\frac{\\partial N_4}{\\partial \\eta} = \\frac{1}{4}(1 - \\xi) $$\n\n从参考坐标到物理坐标的等参映射由下式给出：\n$$x(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) x_i$$\n$$y(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) y_i$$\n雅可比矩阵 $\\mathbf{J}$ 的分量是该映射的偏导数：\n$$ \\frac{\\partial x}{\\partial \\xi} = \\sum_{i=1}^4 \\frac{\\partial N_i}{\\partial \\xi} x_i, \\quad \\frac{\\partial x}{\\partial \\eta} = \\sum_{i=1}^4 \\frac{\\partial N_i}{\\partial \\eta} x_i $$\n$$ \\frac{\\partial y}{\\partial \\xi} = \\sum_{i=1}^4 \\frac{\\partial N_i}{\\partial \\xi} y_i, \\quad \\frac{\\partial y}{\\partial \\eta} = \\sum_{i=1}^4 \\frac{\\partial N_i}{\\partial \\eta} y_i $$\n因此，雅可比矩阵为：\n$$ \\mathbf{J}(\\xi, \\eta) = \\begin{bmatrix} \\sum_i \\frac{\\partial N_i}{\\partial \\xi} x_i  \\sum_i \\frac{\\partial N_i}{\\partial \\eta} x_i \\\\ \\sum_i \\frac{\\partial N_i}{\\partial \\xi} y_i  \\sum_i \\frac{\\partial N_i}{\\partial \\eta} y_i \\end{bmatrix} $$\n然后，雅可比行列式 $J(\\xi, \\eta) = \\det \\mathbf{J}(\\xi, \\eta)$ 计算如下：\n$$ J(\\xi, \\eta) = \\left( \\frac{\\partial x}{\\partial \\xi} \\right) \\left( \\frac{\\partial y}{\\partial \\eta} \\right) - \\left( \\frac{\\partial x}{\\partial \\eta} \\right) \\left( \\frac{\\partial y}{\\partial \\xi} \\right) $$\n在面积相关的计算中，使用行列式的绝对值 $\\lvert J(\\xi, \\eta) \\rvert$。该值表示微分面积比 $dA_{phys} / dA_{ref}$。对于一个非退化、非反转的单元，$J(\\xi, \\eta)  0$ 在整个域内恒成立。\n\n**3. 计算实现**\n\n程序实现了推导出的公式，以计算每个测试用例的指定指标。\n\n**网格生成**：在参考域 $[-1, 1] \\times [-1, 1]$ 上生成一个 $n \\times n$（其中 $n=41$）的均匀网格点。这是通过使用 `numpy.linspace` 为 $\\xi$ 和 $\\eta$ 创建坐标向量，并使用 `numpy.meshgrid` 生成表示每个网格点坐标的二维数组来实现的。\n\n**矢量化计算**：为了高效地在整个网格上执行计算，我们利用了 NumPy 的矢量化操作。程序实现了多个函数，可同时为所有 $(\\xi, \\eta)$ 网格点计算全部四个形函数 $N_i$ 的值及其偏导数 $\\frac{\\partial N_i}{\\partial \\xi}, \\frac{\\partial N_i}{\\partial \\eta}$。这将产生形状为 $(4, n, n)$ 的数组。\n\n**雅可比计算**：对于一组给定的节点坐标 $(x_i, y_i)$，雅可比矩阵的四个项通过节点坐标向量和形函数导数数组之间的张量缩并（具体为点积）来计算。例如，通过将 $\\frac{\\partial N_i}{\\partial \\xi}$ 数组与其对应的 $x_i$ 坐标相乘并求和，可以在整个网格上计算出 $\\frac{\\partial x}{\\partial \\xi}$ 数组。这可以通过使用 `numpy.einsum` 高效完成。然后，从这四个分量数组计算出雅可比行列式数组 $J$。\n\n**指标计算**：利用已有的选定形函数 $N_i(\\xi_k, \\eta_k)$ 的网格数组和雅可比行列式绝对值 $\\lvert J(\\xi_k, \\eta_k) \\rvert$ 的网格数组，按如下方式计算五个指标：\n- **平均颜色强度 ($\\overline{N_i}$):** $N_i$ 值的加权平均，以 $\\lvert J \\rvert$ 作为权重。计算公式为 $\\frac{\\sum(N_i \\cdot \\lvert J \\rvert)}{\\sum \\lvert J \\rvert}$。\n- **标准差 ($\\sigma_{N_i}$):** 加权方差的平方根。加权方差计算为与加权平均值的差的平方的加权平均值，即 $\\frac{\\sum(\\lvert J \\rvert \\cdot (N_i - \\overline{N_i})^2)}{\\sum \\lvert J \\rvert}$。\n- **$\\lvert J \\rvert$ 的最小值/最大值:** 找出 $\\lvert J \\rvert$ 数组中的最小值和最大值。\n- **单位分解偏差:** 将四个 $N_i$ 数组相加。计算该和与 $1.0$ 在整个网格上的最大绝对偏差。该指标可作为形函数实现的数值验证；其值应在机器浮点精度的数量级。\n\n程序遍历每个测试用例，执行这些计算，并将所得的五个指标聚合到一个扁平列表中作为最终输出。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the FEM color-mapping problem by deriving and implementing\n    formulas for bilinear shape functions and the isoparametric Jacobian.\n    It computes five specified metrics for four test cases.\n    \"\"\"\n\n    # Test cases: [(node_coords), shape_function_index_i]\n    # Node coords are ordered [(x1,y1), (x2,y2), (x3,y3), (x4,y4)]\n    test_cases = [\n        (np.array([[0, 0], [2, 0], [2, 1], [0, 1]]), 1),  # Case 1\n        (np.array([[0, 0], [2, 0], [1.6, 1.2], [0, 1]]), 2),  # Case 2\n        (np.array([[0, 0], [1, 0], [0.8, 0.05], [0, 0.05]]), 4),  # Case 3\n        (np.array([[0, 0], [1, 0], [0.2, 1.0], [-0.1, 0.1]]), 3), # Case 4\n    ]\n\n    all_results = []\n    \n    # Grid parameters\n    n = 41\n    xi_coords = np.linspace(-1.0, 1.0, n)\n    eta_coords = np.linspace(-1.0, 1.0, n)\n    xi_grid, eta_grid = np.meshgrid(xi_coords, eta_coords)\n\n    def get_shape_functions_and_derivatives(xi, eta):\n        \"\"\"\n        Calculates bilinear shape functions and their derivatives\n        on a grid of (xi, eta) points.\n        \n        Args:\n            xi (np.ndarray): 2D array of xi coordinates.\n            eta (np.ndarray): 2D array of eta coordinates.\n            \n        Returns:\n            tuple: (N, dN_dxi, dN_deta)\n                N: (4, n, n) array of shape function values.\n                dN_dxi: (4, n, n) array of xi-derivatives.\n                dN_deta: (4, n, n) array of eta-derivatives.\n        \"\"\"\n        # Shape functions N_i(xi, eta)\n        N1 = 0.25 * (1 - xi) * (1 - eta)\n        N2 = 0.25 * (1 + xi) * (1 - eta)\n        N3 = 0.25 * (1 + xi) * (1 + eta)\n        N4 = 0.25 * (1 - xi) * (1 + eta)\n        \n        N = np.array([N1, N2, N3, N4])\n\n        # Derivatives wrt xi\n        dN1_dxi = 0.25 * (-1) * (1 - eta)\n        dN2_dxi = 0.25 * (1)  * (1 - eta)\n        dN3_dxi = 0.25 * (1)  * (1 + eta)\n        dN4_dxi = 0.25 * (-1) * (1 + eta)\n        dN_dxi = np.array([dN1_dxi, dN2_dxi, dN3_dxi, dN4_dxi])\n\n        # Derivatives wrt eta\n        dN1_deta = 0.25 * (1 - xi) * (-1)\n        dN2_deta = 0.25 * (1 + xi) * (-1)\n        dN3_deta = 0.25 * (1 + xi) * (1)\n        dN4_deta = 0.25 * (1 - xi) * (1)\n        dN_deta = np.array([dN1_deta, dN2_deta, dN3_deta, dN4_deta])\n        \n        return N, dN_dxi, dN_deta\n\n    # Pre-calculate shape functions and derivatives on the grid\n    N_vals, dN_dxi_vals, dN_deta_vals = get_shape_functions_and_derivatives(xi_grid, eta_grid)\n\n    for case_nodes, i_selected in test_cases:\n        x_nodes = case_nodes[:, 0]\n        y_nodes = case_nodes[:, 1]\n        \n        # Calculate Jacobian matrix components using einsum for clean tensor contraction\n        # J_11 = dx/dxi, J_12 = dx/deta, J_21 = dy/dxi, J_22 = dy/deta\n        J_11 = np.einsum('i,ijk->jk', x_nodes, dN_dxi_vals)\n        J_12 = np.einsum('i,ijk->jk', x_nodes, dN_deta_vals)\n        J_21 = np.einsum('i,ijk->jk', y_nodes, dN_dxi_vals)\n        J_22 = np.einsum('i,ijk->jk', y_nodes, dN_deta_vals)\n\n        # Calculate Jacobian determinant\n        J_det = J_11 * J_22 - J_12 * J_21\n        abs_J_det = np.abs(J_det)\n        \n        # Select the color intensity field from the pre-calculated shape functions\n        # Note: i is 1-based, array is 0-based\n        N_i_vals = N_vals[i_selected - 1]\n        \n        # (a) Physically area-weighted mean color intensity\n        # np.average handles the weighted average calculation: sum(a*w) / sum(w)\n        mean_Ni = np.average(N_i_vals, weights=abs_J_det)\n        \n        # (b) Physically area-weighted standard deviation\n        # Use np.average again for the weighted variance\n        variance_Ni = np.average((N_i_vals - mean_Ni)**2, weights=abs_J_det)\n        std_dev_Ni = np.sqrt(variance_Ni)\n        \n        # (c) Minimum of |J| over the grid\n        min_J = np.min(abs_J_det)\n        \n        # (d) Maximum of |J| over the grid\n        max_J = np.max(abs_J_det)\n\n        # (e) Maximum absolute deviation from partition of unity\n        sum_N = np.sum(N_vals, axis=0) # Sum over the 4 shape functions\n        pu_deviation = np.max(np.abs(sum_N - 1.0))\n        \n        # Collect results for this case\n        case_results = [mean_Ni, std_dev_Ni, min_J, max_J, pu_deviation]\n        all_results.extend(case_results)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, all_results))}]\")\n\nsolve()\n```", "id": "3272799"}]}