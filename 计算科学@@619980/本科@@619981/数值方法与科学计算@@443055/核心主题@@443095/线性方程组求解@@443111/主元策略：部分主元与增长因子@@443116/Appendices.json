{"hands_on_practices": [{"introduction": "本练习旨在提供一个基于第一原理应用部分主元高斯消去法（GEPP）的基础实践。通过手动处理一个结构化的 $5 \\times 5$ 矩阵，你将掌握行交换和消元的具体操作，并学会如何追踪中间矩阵的元素以精确计算增长因子。这个动手过程对于建立算法如何运作的坚实直觉至关重要。[@problem_id:3262489]", "problem": "考虑一个方阵 $\\mathbf{A} \\in \\mathbb{R}^{5 \\times 5}$，其元素由 $a_{ij} = \\max(i,j)$ 定义，其中 $1 \\leq i,j \\leq 5$。从部分主元高斯消去法（GEPP）的核心定义出发，该方法在每一步中从未被消去的行中选择当前列绝对值最大的元素作为主元。计算排列矩阵 $\\mathbf{P}$、单位下三角矩阵 $\\mathbf{L}$ 和上三角矩阵 $\\mathbf{U}$，使得 $\\mathbf{P}\\mathbf{A} = \\mathbf{L}\\mathbf{U}$。然后，根据 GEPP 中增长因子的正式定义，即比率\n$$\\rho \\;=\\; \\frac{\\max_{i,j,k}\\left|a_{ij}^{(k)}\\right|}{\\max_{i,j}\\left|a_{ij}\\right|},$$\n其中 $a_{ij}^{(k)}$ 表示第 $k$ 步消去后的 $(i,j)$ 位置的元素，确定此分解的增长因子的精确值。\n\n将增长因子 $\\rho$ 的精确值作为您的最终答案。不包括单位。仅报告 $\\rho$ 的值作为最终答案。", "solution": "题目要求使用部分主元高斯消去法（GEPP）对一个特定的 $5 \\times 5$ 矩阵 $\\mathbf{A}$ 进行 $\\mathbf{PA} = \\mathbf{LU}$ 分解，然后确定增长因子 $\\rho$。\n\n首先，我们构造矩阵 $\\mathbf{A}$，其元素为 $a_{ij} = \\max(i, j)$。\n$$\n\\mathbf{A} = \\begin{pmatrix}\n1 & 2 & 3 & 4 & 5 \\\\\n2 & 2 & 3 & 4 & 5 \\\\\n3 & 3 & 3 & 4 & 5 \\\\\n4 & 4 & 4 & 4 & 5 \\\\\n5 & 5 & 5 & 5 & 5\n\\end{pmatrix}\n$$\n这个矩阵 $\\mathbf{A}$ 可以表示为 $\\mathbf{A}^{(0)}$。增长因子的分母是 $\\mathbf{A}$ 中元素的最大绝对值：\n$$\n\\max_{i,j} |a_{ij}| = \\max_{i,j} |a_{ij}^{(0)}| = 5\n$$\n\n我们现在逐步执行 GEPP，跟踪中间矩阵 $\\mathbf{A}^{(k)}$ 和排列矩阵 $\\mathbf{P}$。矩阵 $\\mathbf{L}$ 将存储乘数。设 $\\mathbf{P}$ 初始为单位矩阵 $\\mathbf{I}$。\n\n**第 1 步：`k=1` (消去第 1 列)**\n$\\mathbf{A}^{(0)}$ 的第一列是 $\\begin{pmatrix} 1 & 2 & 3 & 4 & 5 \\end{pmatrix}^T$。绝对值最大的元素是 $a_{51}^{(0)} = 5$。因此，我们必须交换第 $1$ 行和第 $5$ 行。\n这一步的排列矩阵是 $\\mathbf{P}_1$。总排列矩阵更新为：$\\mathbf{P} \\leftarrow \\mathbf{P}_1 \\mathbf{P}$。\n交换后矩阵的状态是 $\\mathbf{P}_1 \\mathbf{A}^{(0)}$：\n$$\n\\mathbf{P}_1 \\mathbf{A}^{(0)} = \\begin{pmatrix}\n5 & 5 & 5 & 5 & 5 \\\\\n2 & 2 & 3 & 4 & 5 \\\\\n3 & 3 & 3 & 4 & 5 \\\\\n4 & 4 & 4 & 4 & 5 \\\\\n1 & 2 & 3 & 4 & 5\n\\end{pmatrix}\n$$\n主元是 $5$。对于 $i > 1$，乘数 $l_{i1}$ 是：\n$l_{21} = 2/5$, $l_{31} = 3/5$, $l_{41} = 4/5$, $l_{51} = 1/5$。\n我们对 $i=2,3,4,5$ 执行行操作 $R_i \\leftarrow R_i - l_{i1} R_1$：\n$R_2 \\leftarrow R_2 - \\frac{2}{5}R_1 = [2, 2, 3, 4, 5] - [2, 2, 2, 2, 2] = [0, 0, 1, 2, 3]$\n$R_3 \\leftarrow R_3 - \\frac{3}{5}R_1 = [3, 3, 3, 4, 5] - [3, 3, 3, 3, 3] = [0, 0, 0, 1, 2]$\n$R_4 \\leftarrow R_4 - \\frac{4}{5}R_1 = [4, 4, 4, 4, 5] - [4, 4, 4, 4, 4] = [0, 0, 0, 0, 1]$\n$R_5 \\leftarrow R_5 - \\frac{1}{5}R_1 = [1, 2, 3, 4, 5] - [1, 1, 1, 1, 1] = [0, 1, 2, 3, 4]$\n\n第一步消去后的矩阵是 $\\mathbf{A}^{(1)}$：\n$$\n\\mathbf{A}^{(1)} = \\begin{pmatrix}\n5 & 5 & 5 & 5 & 5 \\\\\n0 & 0 & 1 & 2 & 3 \\\\\n0 & 0 & 0 & 1 & 2 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 1 & 2 & 3 & 4\n\\end{pmatrix}\n$$\n$\\mathbf{A}^{(1)}$ 中的最大绝对值是 $\\max_{i,j} |a_{ij}^{(1)}| = 5$。\n\n**第 2 步：`k=2` (消去第 2 列)**\n我们检查 $\\mathbf{A}^{(1)}$ 中从第 $2$ 行开始的第 $2$ 列：$\\begin{pmatrix} 0 & 0 & 0 & 1 \\end{pmatrix}^T$。最大绝对值是 $a_{52}^{(1)} = 1$。我们交换第 $2$ 行和第 $5$ 行。\n交换后矩阵的状态是：\n$$\n\\begin{pmatrix}\n5 & 5 & 5 & 5 & 5 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 0 & 0 & 1 & 2 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 0 & 1 & 2 & 3\n\\end{pmatrix}\n$$\n主元是 $a_{22} = 1$。对于 $i > 2$，$l_{i2}$ 乘数是：\n$l_{32} = a_{32}/a_{22} = 0/1 = 0$\n$l_{42} = a_{42}/a_{22} = 0/1 = 0$\n$l_{52} = a_{52}/a_{22} = 0/1 = 0$\n由于所有乘数都为 $0$，不执行行操作。第二步后的矩阵 $\\mathbf{A}^{(2)}$ 与交换后的矩阵相同。\n$$\n\\mathbf{A}^{(2)} = \\begin{pmatrix}\n5 & 5 & 5 & 5 & 5 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 0 & 0 & 1 & 2 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 0 & 1 & 2 & 3\n\\end{pmatrix}\n$$\n$\\mathbf{A}^{(2)}$ 中的最大绝对值是 $\\max_{i,j} |a_{ij}^{(2)}| = 5$。\n\n**第 3 步：`k=3` (消去第 3 列)**\n我们检查 $\\mathbf{A}^{(2)}$ 中从第 $3$ 行开始的第 $3$ 列：$\\begin{pmatrix} 0 & 0 & 1 \\end{pmatrix}^T$。最大绝对值是 $a_{53}^{(2)} = 1$。我们交换第 $3$ 行和第 $5$ 行。\n交换后矩阵的状态是：\n$$\n\\begin{pmatrix}\n5 & 5 & 5 & 5 & 5 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 0 & 1 & 2 & 3 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 0 & 0 & 1 & 2\n\\end{pmatrix}\n$$\n主元是 $a_{33}=1$。对于 $i > 3$，乘数 $l_{i3}$ 为 $l_{43} = 0/1=0$ 和 $l_{53} = 0/1=0$。不执行行操作。\n$$\n\\mathbf{A}^{(3)} = \\begin{pmatrix}\n5 & 5 & 5 & 5 & 5 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 0 & 1 & 2 & 3 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 0 & 0 & 1 & 2\n\\end{pmatrix}\n$$\n$\\mathbf{A}^{(3)}$ 中的最大绝对值是 $\\max_{i,j} |a_{ij}^{(3)}| = 5$。\n\n**第 4 步：`k=4` (消去第 4 列)**\n我们检查 $\\mathbf{A}^{(3)}$ 中从第 $4$ 行开始的第 $4$ 列：$\\begin{pmatrix} 0 & 1 \\end{pmatrix}^T$。最大绝对值是 $a_{54}^{(3)}=1$。我们交换第 $4$ 行和第 $5$ 行。\n交换后矩阵的状态是：\n$$\n\\begin{pmatrix}\n5 & 5 & 5 & 5 & 5 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 0 & 1 & 2 & 3 \\\\\n0 & 0 & 0 & 1 & 2 \\\\\n0 & 0 & 0 & 0 & 1\n\\end{pmatrix}\n$$\n主元是 $a_{44}=1$。乘数 $l_{54}=0/1=0$。不执行行操作。最终的上三角矩阵 $\\mathbf{U}$ 就是这个矩阵。\n$$\n\\mathbf{U} = \\mathbf{A}^{(4)} = \\begin{pmatrix}\n5 & 5 & 5 & 5 & 5 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 0 & 1 & 2 & 3 \\\\\n0 & 0 & 0 & 1 & 2 \\\\\n0 & 0 & 0 & 0 & 1\n\\end{pmatrix}\n$$\n$\\mathbf{A}^{(4)}$ 中的最大绝对值是 $\\max_{i,j} |a_{ij}^{(4)}| = 5$。\n\n总的排列矩阵 $\\mathbf{P}$ 是各个排列矩阵的乘积：$\\mathbf{P} = \\mathbf{P}_4 \\mathbf{P}_3 \\mathbf{P}_2 \\mathbf{P}_1$。这对应于将原始行 $(1,2,3,4,5)$ 映射到最终的行顺序 $(5,1,2,3,4)$。\n$$\n\\mathbf{P} = \\begin{pmatrix}\n0 & 0 & 0 & 0 & 1 \\\\\n1 & 0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 1 & 0\n\\end{pmatrix}\n$$\n矩阵 $\\mathbf{L}$ 包含根据最终排列安排的乘数 $l_{ij}$。\n$$\n\\mathbf{L} = \\begin{pmatrix}\n1 & 0 & 0 & 0 & 0 \\\\\n1/5 & 1 & 0 & 0 & 0 \\\\\n2/5 & 0 & 1 & 0 & 0 \\\\\n3/5 & 0 & 0 & 1 & 0 \\\\\n4/5 & 0 & 0 & 0 & 1\n\\end{pmatrix}\n$$\n\n现在我们计算增长因子 `\\rho`。其定义为：\n$$\n\\rho = \\frac{\\max_{i,j,k}\\left|a_{ij}^{(k)}\\right|}{\\max_{i,j}\\left|a_{ij}\\right|}\n$$\n分子是在所有中间矩阵 $\\mathbf{A}^{(k)}$（对于 `k=0,1,2,3,4`）的所有元素中找到的最大绝对值。\n$\\max |a_{ij}^{(0)}| = 5$\n$\\max |a_{ij}^{(1)}| = 5$\n$\\max |a_{ij}^{(2)}| = 5$\n$\\max |a_{ij}^{(3)}| = 5$\n$\\max |a_{ij}^{(4)}| = 5$\n因此，总的最大值是 $\\max_{i,j,k} |a_{ij}^{(k)}| = 5$。\n\n分母是 $\\max_{i,j} |a_{ij}| = 5$。\n因此，增长因子是：\n$$\n\\rho = \\frac{5}{5} = 1\n$$", "answer": "$$\n\\boxed{1}\n$$", "id": "3262489"}, {"introduction": "虽然部分主元法通常是有效的，但它并不能完全保证数值稳定性。本问题将挑战你分析一个经典的矩阵族示例，在该示例中，即使采用部分主元法，高斯消去过程仍会导致巨大的增长因子。推导出这一结果将加深你对增长因子为何是衡量数值稳定性的关键指标的理解。[@problem_id:3262594]", "problem": "令 $n \\geq 3$ 为一个整数。在带部分主元的高斯消去法中（其中每一步的主元选择为当前列剩余行中绝对值最大的元素，若有多个则选择行索引最小的那个），生长因子定义为在上三角因子中产生的最大绝对值元素与原始矩阵中最大绝对值元素之比。等价地，如果 $P A = L U$ 是由带部分主元的高斯消去法产生的分解（其中 $P$ 是一个置换矩阵，$L$ 是单位下三角矩阵，$U$ 是上三角矩阵），则生长因子为 $\\gamma(A) = \\max_{i,j} |u_{ij}| \\big/ \\max_{i,j} |a_{ij}|$.\n\n构造一个显式的 $n \\times n$ 矩阵 $A_n$，其在部分主元选择下的生长因子 $\\gamma(A_n)$ 随着 $n$ 的增加而变大，但同时精确满足 $\\det(A_n) = 1$。你的构造必须仅依赖于核心定义和已验证的事实，例如分块对角矩阵的行列式的乘法性质，以及将一行的倍数加到另一行上行列式不变的性质。\n\n考虑由以下方式定义的 $(n-1) \\times (n-1)$ 矩阵 $W_{n-1}$：\n- $w_{ii} = 1$ 对于 $1 \\leq i \\leq n-1$，\n- $w_{i+1,i} = -1$ 对于 $1 \\leq i \\leq n-2$，\n- $w_{i,\\,n-1} = 1$ 对于 $1 \\leq i \\leq n-1$，\n- 其他情况 $w_{ij} = 0$，\n并定义\n$$\nA_n \\;=\\; \\operatorname{diag}\\!\\Big(W_{n-1},\\, \\frac{1}{\\,n-1\\,}\\Big),\n$$\n即左上角块为 $W_{n-1}$、右下角块为 $1 \\times 1$ 矩阵 $\\big[\\tfrac{1}{n-1}\\big]$ 的分块对角矩阵。\n\n从给定的定义和事实出发，推导 $A_n$ 的行列式，分析对 $A_n$ 进行带部分主元的高斯消去法，并确定生长因子 $\\gamma(A_n)$ 作为 $n$ 的函数的精确闭式表达式。将你的最终答案以单个解析表达式的形式给出。无需四舍五入。", "solution": "该问题要求对 $n \\geq 3$ 的一个特定的 $n \\times n$ 矩阵 $A_n$ 进行分析。我们必须首先验证问题陈述。该问题在数值线性代数的标准框架内是良定义的。它为矩阵 $A_n$ 提供了显式构造，定义了所有术语（如部分主元和生长因子），并提出了一个明确的目标：推导该矩阵的行列式和生长因子。该问题在科学上是合理的、自洽的、客观的。这是一个有效的问题。\n\n我们继续解答，解答包含两个主要部分：计算 $A_n$ 的行列式，以及分析带部分主元的高斯消去过程以求出生长因子。\n\n矩阵 $A_n$ 被定义为一个分块对角矩阵：\n$$\nA_n = \\operatorname{diag}\\!\\Big(W_{n-1},\\, \\frac{1}{\\,n-1\\,}\\Big)\n$$\n其中 $W_{n-1}$ 是一个 $(n-1) \\times (n-1)$ 矩阵，其元素定义如下：\n$w_{ii} = 1$ 对于 $1 \\leq i \\leq n-1$\n$w_{i+1,i} = -1$ 对于 $1 \\leq i \\leq n-2$\n$w_{i,n-1} = 1$ 对于 $1 \\leq i \\leq n-1$\n其他情况 $w_{ij} = 0$。\n\n例如，对于 $n=4$，矩阵 $W_3$ 是：\n$$\nW_3 = \\begin{pmatrix} 1 & 0 & 1 \\\\ -1 & 1 & 1 \\\\ 0 & -1 & 1 \\end{pmatrix}\n$$\n而 $A_4$ 是：\n$$\nA_4 = \\begin{pmatrix} 1 & 0 & 1 & 0 \\\\ -1 & 1 & 1 & 0 \\\\ 0 & -1 & 1 & 0 \\\\ 0 & 0 & 0 & \\frac{1}{3} \\end{pmatrix}\n$$\n\n**1. $A_n$ 的行列式**\n\n由于 $A_n$ 是一个分块对角矩阵，其行列式是其对角块行列式的乘积。\n$$\n\\det(A_n) = \\det(W_{n-1}) \\cdot \\det\\left(\\left[\\frac{1}{n-1}\\right]\\right) = \\frac{1}{n-1} \\det(W_{n-1})\n$$\n为了计算 $\\det(W_{n-1})$，我们可以沿 $W_{n-1}$ 的第一列进行余子式展开。第一列中仅有的非零元素是 $w_{11}=1$ 和 $w_{21}=-1$。\n$$\n\\det(W_{n-1}) = 1 \\cdot \\det(M_{11}) - (-1) \\cdot \\det(M_{21}) = \\det(M_{11}) + \\det(M_{21})\n$$\n其中 $M_{ij}$ 是对应于元素 $w_{ij}$ 的子式。\n\n子式 $M_{11}$ 是通过移除 $W_{n-1}$ 的第一行和第一列得到的。得到的 $(n-2) \\times (n-2)$ 矩阵与 $W_{n-1}$ 具有相同的结构，但维数为 $n-2$。因此，$M_{11} = W_{n-2}$。令 $d_k = \\det(W_k)$。则 $\\det(M_{11}) = d_{n-2}$。\n\n子式 $M_{21}$ 是通过移除 $W_{n-1}$ 的第二行和第一列得到的。\n$$\nM_{21} = \\begin{pmatrix}\n0 & 0 & \\dots & 0 & 1 \\\\\n-1 & 1 & \\dots & 0 & 1 \\\\\n0 & -1 & \\ddots & \\vdots & 1 \\\\\n\\vdots & \\ddots & 1 & \\vdots \\\\\n0 & \\dots & 0 & -1 & 1\n\\end{pmatrix}_{(n-2) \\times (n-2)}\n$$\n我们可以通过沿 $M_{21}$ 的第一行进行余子式展开来计算其行列式。唯一的非零元素是最后一列（第 $n-2$ 列）的 $1$。\n$$\n\\det(M_{21}) = (-1)^{1+(n-2)} \\cdot 1 \\cdot \\det(M'_{1,n-2})\n$$\n其中 $M'_{1,n-2}$ 是通过移除 $M_{21}$ 的第一行和最后一列得到的子矩阵。这个子矩阵是一个大小为 $(n-3) \\times (n-3)$ 的下三角矩阵，其所有对角元素都等于 $-1$。\n$$\nM'_{1,n-2} = \\begin{pmatrix}\n-1 & 1 & 0 & \\dots \\\\\n0 & -1 & 1 & \\dots \\\\\n\\vdots & \\ddots & \\ddots & \\ddots \\\\\n0 & \\dots & 0 & -1\n\\end{pmatrix}\n$$\n三角矩阵的行列式是其对角元素的乘积，因此 $\\det(M'_{1,n-2}) = (-1)^{n-3}$。\n因此，$\\det(M_{21}) = (-1)^{n-1} \\cdot (-1)^{n-3} = (-1)^{2n-4} = 1$。\n\n我们已经建立了递推关系 $d_{n-1} = d_{n-2} + 1$。\n对于基本情况，我们考虑 $W_1 = [1]$，所以 $d_1 = 1$。该递推关系给出 $d_2 = d_1+1 = 2$。让我们直接验证：$W_2 = \\begin{pmatrix} 1 & 1 \\\\ -1 & 1 \\end{pmatrix}$，所以 $d_2 = 1 \\cdot 1 - 1 \\cdot (-1) = 2$。递推关系成立。\n展开递推关系，我们得到 $d_k = d_{k-1}+1 = d_{k-2}+2 = \\dots = d_1 + (k-1) = 1 + k - 1 = k$。\n因此，$\\det(W_{n-1}) = n-1$。\n\n最后，$A_n$ 的行列式是：\n$$\n\\det(A_n) = \\frac{1}{n-1} \\det(W_{n-1}) = \\frac{n-1}{n-1} = 1\n$$\n\n**2. $A_n$ 的生长因子**\n\n生长因子为 $\\gamma(A_n) = \\max_{i,j} |u_{ij}| / \\max_{i,j} |a_{ij}|$。\n首先，我们找到 $A_n$ 中绝对值最大的元素。$A_n$ 的元素来自集合 $\\{0, 1, -1, 1/(n-1)\\}$。由于 $n \\geq 3$，我们有 $0  1/(n-1) \\leq 1/2$。最大绝对值为 $\\max_{i,j} |a_{ij}| = 1$。\n\n接下来，我们对 $A_n$ 进行带部分主元的高斯消去法。由于其分块对角结构，前 $n-1$ 行和列的消去过程只涉及 $W_{n-1}$ 块。令 $A^{(k)}$ 表示消去法第 $k$ 步后的矩阵。我们从 $A^{(0)} = W_{n-1}$ 开始。\n\n第 $k$ 步（$1 \\le k \\le n-2$）：在第 $k$ 步开始时，矩阵是 $A^{(k-1)}$。主元列是第 $k$ 列。对于 $j \\geq k$，第 $j$ 列对角线下方的元素与原始矩阵 $W_{n-1}$ 中的相同。具体来说，对于当前的主元列 $k$，从第 $k$ 行向下的元素是 $(a_{kk}^{(k-1)}, a_{k+1,k}^{(k-1)}, \\dots)^T$。主元下方的唯一非零元素是 $a_{k+1,k}^{(k-1)} = -1$。主元元素本身是 $a_{kk}^{(k-1)} = 1$。主元列中（从第 $k$ 行向下）的最大绝对值是 $1$。因此，在每一步 $k$ 中，$a_{kk}^{(k-1)}$ 都被选为主元。没有发生行交换，因此置换矩阵 $P$ 是单位矩阵 $I$。乘子是 $m_{k+1,k} = a_{k+1,k}^{(k-1)}/a_{kk}^{(k-1)} = -1/1 = -1$。行操作是 $R_{k+1} \\leftarrow R_{k+1} - m_{k+1,k}R_k = R_{k+1} + R_k$。\n\n上三角矩阵 $U$ 的元素（对于 $A_n$ 而言是 $\\operatorname{diag}(U_W, 1/(n-1))$，其中 $U_W$ 是对 $W_{n-1}$ 进行消去的结果）是由这些行操作生成的。最大的元素出现在 $W_{n-1}$ 块的最后一列。令 $u_{i,j}$ 表示 $U_W$ 的元素。\n最初，$W_{n-1}$ 最后一列的所有元素都是 $1$。\n第 1 步之后（$R_2 \\leftarrow R_2+R_1$）：元素 $a_{2,n-1}^{(1)}$ 变为 $w_{2,n-1} + w_{1,n-1} = 1+1=2$。\n第 2 步之后（$R_3 \\leftarrow R_3+R_2$）：元素 $a_{3,n-1}^{(2)}$ 变为 $w_{3,n-1} + a_{2,n-1}^{(1)} = 1+2=3$。\n一般地，在第 $k-1$ 步，对当前矩阵执行操作 $R_{k} \\leftarrow R_{k}+R_{k-1}$。令 $a_{i,j}^{(k)}$ 为此操作后矩阵的元素。第 $k$ 行最后一列的元素变为：\n$$\na_{k,n-1}^{(k-1)} = a_{k,n-1}^{(k-2)} + a_{k-1,n-1}^{(k-2)}\n$$\n在此操作之前，$a_{k,n-1}^{(k-2)}$ 仍是原始值 $1$，而 $a_{k-1,n-1}^{(k-2)}$ 是上一步计算出的值。对于 $i \\le k-1$，元素 $a_{i, n-1}^{(k-2)}$ 是最终值，$u_{i,n-1} = a_{i,n-1}^{(i-1)}$。最后一列最终值的递推关系是 $u_{i,n-1} = 1 + u_{i-1, n-1}$（对于 $i \\ge 2$），且 $u_{1,n-1}=1$。这给出 $u_{i,n-1}=i$（对于 $i=1, \\dots, n-2$）。\n\n最终的矩阵 $U_W$ 是在 $n-2$ 步之后形成的。在第 $n-2$ 步，操作是 $R_{n-1} \\leftarrow R_{n-1}+R_{n-2}$。此时第 $n-2$ 行的所有元素都是最终值。对第 $n-1$ 行最后一个元素（即 $u_{n-1,n-1}$）的更新是：\n$$\nu_{n-1,n-1} = a_{n-1,n-1}^{(n-2)} + a_{n-2,n-1}^{(n-2)}\n$$\n这里，$a_{n-1,n-1}^{(n-2)}$ 是原始元素 $w_{n-1,n-1}=1$（它在之前的步骤中未被修改），而 $a_{n-2,n-1}^{(n-2)}$ 是最终值 $u_{n-2,n-1}=n-2$。\n因此，$u_{n-1,n-1} = 1 + (n-2) = n-1$。\n\n对 $A_n$ 进行消去法得到的上三角矩阵 $U$ 是：\n$$\nU = \\begin{pmatrix}\n1  0  \\dots  0  1  0 \\\\\n0  1  \\dots  0  2  0 \\\\\n\\vdots    \\ddots   \\vdots  \\vdots \\\\\n0  0  \\dots  1  n-2  0 \\\\\n0  0  \\dots  0  n-1  0 \\\\\n0  0  \\dots  0  0  \\frac{1}{n-1}\n\\end{pmatrix}\n$$\n$U$ 的元素为 $\\{0, 1, 2, \\dots, n-1\\}$ 和 $\\{1/(n-1)\\}$。由于 $n \\geq 3$，$n-1 \\geq 2$。$U$ 的所有元素中的最大绝对值为 $\\max_{i,j} |u_{ij}| = n-1$。\n\n因此，生长因子是：\n$$\n\\gamma(A_n) = \\frac{\\max_{i,j} |u_{ij}|}{\\max_{i,j} |a_{ij}|} = \\frac{n-1}{1} = n-1\n$$\n这表明对于给定的矩阵族 $A_n$，即使在部分主元选择下，生长因子也随矩阵大小线性增加。此外，这些矩阵的行列式精确为 $1$。", "answer": "$$\\boxed{n-1}$$", "id": "3262594"}, {"introduction": "最后的这个实践将理论带入计算领域。你将通过编程实现高斯消去算法，以实验方式验证即使主元数值不小，也可能发生显著的元素增长。通过比较使用和不使用主元策略的结果，你将获得关于数值算法行为和在测试中精心构造矩阵的重要性的实践洞察。[@problem_id:3262624]", "problem": "您需要设计并实现一个计算实验，从高斯消元法的基本原理出发，证明即使主元的大小不小，增长因子也可能很大。您的程序必须构建一个特定的矩阵族，并计算两种主元选择策略下的增长因子。\n\n定义与基础：\n- 令 $A \\in \\mathbb{R}^{n \\times n}$ 为输入矩阵。\n- 高斯消元法按列进行，在步骤 $k \\in \\{1, \\dots, n-1\\}$ 中，使用乘数 $m_{ik} = a_{ik}^{(k-1)} / a_{kk}^{(k-1)}$ 将主元 $a_{kk}^{(k-1)}$下方的元素清零，从而产生一系列矩阵 $A^{(0)}, A^{(1)}, \\dots, A^{(n-1)}$，其中 $A^{(0)} = A$ 且 $A^{(n-1)}$ 是一个上三角矩阵。\n- 高斯消元法（使用指定的主元选择策略）的增长因子 $\\gamma$ 定义为\n$$\n\\gamma = \\frac{\\max_{i,j,k} \\left| a_{ij}^{(k)} \\right|}{\\max_{i,j} \\left| a_{ij}^{(0)} \\right|}.\n$$\n- 部分主元法在每一步 $k$ 中，从行 $p \\in \\{k, k+1, \\dots, n\\}$ 中选择绝对值最大的主元 $a_{p k}^{(k-1)}$，并在消元前将第 $p$ 行与第 $k$ 行交换。无主元选择策略则直接使用 $a_{kk}^{(k-1)}$ 作为主元，不进行任何行交换。\n\n需要构建的矩阵族：\n- 对于每个大小 $n \\ge 2$，定义 $A_n \\in \\mathbb{R}^{n \\times n}$ 如下：\n  - 对所有 $i \\in \\{1, \\dots, n\\}$，$a_{ii} = 1$，\n  - 对所有 $i \\in \\{1, \\dots, n-1\\}$，$a_{i+1,i} = -1$，\n  - 对所有 $i \\in \\{1, \\dots, n\\}$，$a_{i,n} = 1$，\n  - 所有其他元素均为 $0$。\n- 这个 $A_n$ 是一个严格下双对角矩阵加上一个常数最后一列。请注意，初始最大绝对值元素为 $1$，并且在整个消元过程中主元 $a_{kk}^{(k-1)}$ 始终等于 $1$（因此主元的大小不小）。然而，消元过程中的填充可能会在最后一列产生较大的中间项。\n\n要求的计算：\n- 实现高斯消元法，同时追踪两种主元选择策略下的 $\\max_{i,j,k} \\left| a_{ij}^{(k)} \\right|$：\n  1. 无主元选择。\n  2. 部分主元法。\n- 对于每种策略，计算如上定义的增长因子 $\\gamma$。\n\n测试套件：\n- 使用大小 $n = 2$、$n = 6$ 和 $n = 25$。\n- 这些情况分别覆盖了一个边界情况（$n = 2$）、一个一般情况（$n = 6$）和一个较大规模的情况（$n = 25$）。\n- 对于每个 $n$，计算并返回一个包含无主元选择和部分主元法增长因子的对，顺序如此。\n\n最终输出格式：\n- 您的程序应生成一行输出，其中包含一个用方括号括起来的逗号分隔列表。列表中的每个元素对应一个测试用例，本身是一个双元素列表 $[\\gamma_{\\text{none}}, \\gamma_{\\text{partial}}]$。\n- 例如，输出应类似于 $[[\\gamma_{2,\\text{none}},\\gamma_{2,\\text{partial}}],[\\gamma_{6,\\text{none}},\\gamma_{6,\\text{partial}}],[\\gamma_{25,\\text{none}},\\gamma_{25,\\text{partial}}]]$。\n- $\\gamma$ 值必须报告为整数（精确值，无需四舍五入，因为对于这些情况，该构造会产生整数增长因子）。", "solution": "用户的请求是执行一个计算实验，以分析一个特定矩阵族在高斯消元法下，采用两种主元选择策略（无主元选择和部分主元法）时的增长因子。\n\n### 步骤1：问题验证\n\n第一步是验证问题陈述。\n\n#### 提取的已知条件\n- **矩阵序列**：高斯消元法通过一系列中间矩阵 $A^{(k)}$ 将矩阵 $A = A^{(0)}$ 转换为一个上三角矩阵 $A^{(n-1)}$。\n- **更新规则**：在步骤 $k \\in \\{1, \\dots, n-1\\}$ 中，使用乘数 $m_{ik} = a_{ik}^{(k-1)} / a_{kk}^{(k-1)}$ 将主元 $a_{kk}^{(k-1)}$ 下方的元素清零。\n- **增长因子定义**：增长因子 $\\gamma$ 定义为 $\\gamma = \\frac{\\max_{i,j,k} \\left| a_{ij}^{(k)} \\right|}{\\max_{i,j} \\left| a_{ij}^{(0)} \\right|}$。\n- **主元选择策略**：\n    1.  **无主元选择**：使用对角元素 $a_{kk}^{(k-1)}$ 作为主元。\n    2.  **部分主元法**：在步骤 $k$，找到行 $p \\ge k$ 使得 $|a_{pk}^{(k-1)}|$ 最大化，并在消元前交换第 $p$ 行与第 $k$ 行。\n- **矩阵族**：对于给定的大小 $n \\ge 2$，矩阵 $A_n \\in \\mathbb{R}^{n \\times n}$ 定义为：\n    - 对 $i \\in \\{1, \\dots, n\\}$，$a_{ii} = 1$\n    - 对 $i \\in \\{1, \\dots, n-1\\}$，$a_{i+1,i} = -1$\n    - 对 $i \\in \\{1, \\dots, n\\}$，$a_{i,n} = 1$\n    - 所有其他元素均为 $0$。\n- **要求的计算**：对于 $n \\in \\{2, 6, 25\\}$，计算无主元选择和部分主元法两种策略的增长因子 $\\gamma$。\n- **输出格式**：单行 `[[γ_2,none, γ_2,partial], [γ_6,none, γ_6,partial], [γ_25,none, γ_25,partial]]`，其中 $\\gamma$ 为整数值。\n\n#### 验证结论\n该问题是**有效的**。\n- 它在科学上**基于**数值线性代数的标准原理。\n- 它是**适定的**，所有定义、约束和目标都清晰明确地规定。\n- 它是**客观的**，没有主观性论断。\n- 该矩阵族是用于说明增长因子行为的一个标准例子。所有定义都是一致和完整的。\n\n### 步骤2：原理性解决方案\n\n问题是有效的，因此我们继续进行完整解决方案。任务的核心是实现高斯消元法，并在此过程中跟踪任何矩阵元素的最大绝对值。\n\n#### 矩阵与增长因子分析\n矩阵 $A_n$ 具有特定的结构。例如，对于 $n=4$：\n$$\nA_4 = A_4^{(0)} = \\begin{pmatrix}\n1  0  0  1 \\\\\n-1  1  0  1 \\\\\n0  -1  1  1 \\\\\n0  0  -1  1\n\\end{pmatrix}\n$$\n对于任何 $n \\ge 2$，初始矩阵的最大绝对值 $\\max_{i,j} |a_{ij}^{(0)}|$ 总是 $1$。因此，增长因子简化为：\n$$\n\\gamma = \\frac{\\max_{i,j,k} \\left| a_{ij}^{(k)} \\right|}{1} = \\max_{i,j,k} \\left| a_{ij}^{(k)} \\right|\n$$\n这意味着我们只需要找到在任何中间矩阵 $A^{(0)}, A^{(1)}, \\dots, A^{(n-1)}$ 中出现的最大幅值元素。\n\n#### 策略1：无主元选择\n我们执行高斯消元法，不进行任何行交换。让我们追踪这个过程。（注意：在此解释中，我们对矩阵元素使用基于1的索引，对算法步骤使用基于0的索引 $k=0, \\dots, n-2$。）\n\n在步骤 $k=1$（在第1列进行消元）：\n- 主元是 $a_{11}^{(0)} = 1$。\n- 主元下方唯一的非零元素是 $a_{21}^{(0)} = -1$。\n- 乘数是 $m_{21} = a_{21}^{(0)} / a_{11}^{(0)} = -1 / 1 = -1$。\n- 我们更新第2行：$R_2^{(1)} \\leftarrow R_2^{(0)} - m_{21} R_1^{(0)} = R_2^{(0)} + R_1^{(0)}$。\n- 原始的 $R_2^{(0)}$ 是 $[0, \\dots, 0, -1, 1, 0, \\dots, 1]$，其中 $-1$ 在第1列。更简单地说，$R_2^{(0)} = -\\mathbf{e}_1^T + \\mathbf{e}_2^T + \\mathbf{e}_n^T$。而 $R_1^{(0)} = \\mathbf{e}_1^T + \\mathbf{e}_n^T$。\n- 新的行是 $R_2^{(1)} = (\\mathbf{e}_2^T + \\mathbf{e}_n^T) + \\mathbf{e}_n^T = \\mathbf{e}_2^T + 2\\mathbf{e}_n^T$。所以 $a_{22}^{(1)}=1$ 且 $a_{2n}^{(1)}=2$。\n- 对于 $n=4$，矩阵 $A^{(1)}$ 变为：\n$$\nA_4^{(1)} = \\begin{pmatrix}\n1  0  0  1 \\\\\n0  1  0  2 \\\\\n0  -1  1  1 \\\\\n0  0  -1  1\n\\end{pmatrix}\n$$\n现在的最大元素幅值为 $|a_{24}^{(1)}| = 2$。\n\n在步骤 $k=2$（在第2列进行消元）：\n- 主元是 $a_{22}^{(1)} = 1$。\n- 要消去的元素是 $a_{32}^{(1)} = -1$。\n- 乘数是 $m_{32} = -1 / 1 = -1$。\n- 我们更新第3行：$R_3^{(2)} \\leftarrow R_3^{(1)} + R_2^{(1)}$。\n- $R_3^{(1)}$ 相对于 $R_3^{(0)}$ 未变，所以其最后一个元素 $a_{3n}^{(1)}=1$。$R_2^{(1)}$ 的最后一个元素是 $a_{2n}^{(1)}=2$。\n- 第3行新的最后一个元素是 $a_{3n}^{(2)} = a_{3n}^{(1)} + a_{2n}^{(1)} = 1 + 2 = 3$。\n- 更新后的行 $R_3^{(2)}$ 中所有其他非零元素都是 $1$（例如，$a_{33}^{(2)} = 1+0=1$）。现在的最大元素幅值为 $3$。\n\n推广来看，在步骤 $k$（对于 $1 \\le k  n-1$）生成的最大元素是 $a_{k+1,n}^{(k)} = k+1$。\n\n最后一步是 $k=n-1$。$A^{(n-2)}$ 的相关子矩阵涉及第 $n-1$ 和第 $n$ 行和列：\n$$\n\\begin{pmatrix} a_{n-1, n-1}^{(n-2)}  a_{n-1, n}^{(n-2)} \\\\ a_{n, n-1}^{(n-2)}  a_{n, n}^{(n-2)} \\end{pmatrix} = \\begin{pmatrix} 1  n-1 \\\\ -1  1 \\end{pmatrix}\n$$\n主元是 $a_{n-1,n-1}^{(n-2)} = 1$。乘数是 $m_{n,n-1} = -1/1 = -1$。\n我们更新第 $n$ 行：$R_n^{(n-1)} \\leftarrow R_n^{(n-2)} + R_{n-1}^{(n-2)}$。\n对最后一个元素 $a_{nn}$ 的更新是：\n$$\na_{nn}^{(n-1)} = a_{nn}^{(n-2)} + a_{n-1,n}^{(n-2)} = 1 + (n-1) = n.\n$$\n在整个过程中遇到的最大元素值是 $n$。\n因此，对于无主元选择，增长因子是 $\\gamma_{\\text{none}} = n$。\n\n#### 策略2：部分主元法\n我们现在考虑使用部分主元法。\n\n在步骤 $k=1$：\n- 我们检查第1列从第1行开始的元素：$a_{11}^{(0)}=1$，$a_{21}^{(0)}=-1$，其他为 $0$。\n- 最大绝对值为 $1$，同时出现在第1行和第2行。标准的平局打破规则是选择最上方的行，所以我们选择第1行作为主元行。\n- 不执行行交换。消元过程与无主元选择的情况完全相同。\n\n在步骤 $k=2$：\n- 矩阵是 $A^{(1)}$。我们检查第2列从第2行开始的元素。\n- 元素是 $a_{22}^{(1)}=1$，$a_{32}^{(1)}=-1$，其他为 $0$。\n- 同样，最大绝对值为 $1$。主元选在第2行，所以不需要交换。\n\n这个模式在所有步骤中都会持续。在步骤 $k$，活动子矩阵的对角线上是 $1$（$a_{kk}^{(k-1)}=1$），次对角线上是 $-1$（$a_{k+1,k}^{(k-1)}=-1$）。在第 $k$ 列的主元搜索总是找到最大幅值 $1$，而元素 $a_{kk}^{(k-1)}$ 已经是有效的主元。\n因此，对于这个特定的矩阵族，部分主元法不会导致任何行交换。生成的矩阵序列 $A^{(k)}$ 与无主元选择策略产生的序列完全相同。\n\n因此，部分主元法的增长因子也是相同的：$\\gamma_{\\text{partial}} = n$。\n\n#### 预期结果总结\n- 对于 $n=2$，$\\gamma_{\\text{none}} = 2$ 且 $\\gamma_{\\text{partial}} = 2$。\n- 对于 $n=6$，$\\gamma_{\\text{none}} = 6$ 且 $\\gamma_{\\text{partial}} = 6$。\n- 对于 $n=25$，$\\gamma_{\\text{none}} = 25$ 且 $\\gamma_{\\text{partial}} = 25$。\n\n这个结果表明，即使主元幅值为 $1$（这并不小）并且使用了部分主元法，也可能出现与矩阵维度 $n$ 呈线性关系的增长因子。虽然不如最坏情况下的指数增长严重，但对于大的 $n$，线性增长因子仍然可能成为问题。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Designs and implements a computational experiment to demonstrate that the\n    growth factor in Gaussian elimination can be large even when pivot\n    magnitudes are not small.\n    \"\"\"\n\n    def build_matrix(n: int) - np.ndarray:\n        \"\"\"\n        Constructs the specific matrix A_n of size n x n.\n\n        Args:\n            n: The dimension of the square matrix.\n\n        Returns:\n            The n x n matrix A_n.\n        \"\"\"\n        A = np.zeros((n, n), dtype=float)\n        # Set diagonal entries to 1\n        np.fill_diagonal(A, 1)\n        # Set subdiagonal entries to -1\n        if n  1:\n            np.fill_diagonal(A[1:], -1)\n        # Set the last column to 1\n        A[:, n - 1] = 1\n        return A\n\n    def compute_growth_factor(A: np.ndarray, use_partial_pivoting: bool) - int:\n        \"\"\"\n        Performs Gaussian elimination on a matrix and computes the growth factor.\n\n        Args:\n            A: The input matrix.\n            use_partial_pivoting: A boolean to select the pivoting strategy.\n\n        Returns:\n            The computed growth factor as an integer.\n        \"\"\"\n        n = A.shape[0]\n        A_work = A.copy()\n\n        # The denominator of the growth factor is the max abs value of the initial matrix.\n        max_initial = np.max(np.abs(A_work))\n        if max_initial == 0:\n            return 1  # Growth factor is 1 for a zero matrix.\n\n        # The numerator of the growth factor is the max abs value across all intermediate matrices.\n        max_overall = max_initial\n\n        for k in range(n - 1):\n            if use_partial_pivoting:\n                # Find the row index of the element with the largest absolute value in the current column,\n                # starting from the current row k.\n                pivot_row_index = k + np.argmax(np.abs(A_work[k:, k]))\n                \n                # Swap the current row with the pivot row if they are different.\n                if pivot_row_index != k:\n                    A_work[[k, pivot_row_index]] = A_work[[pivot_row_index, k]]\n                \n                # A row swap does not create new values, so no update to max_overall is needed here.\n                # It will be captured after the elimination step.\n\n            # Pivot element is at A_work[k, k].\n            pivot_val = A_work[k, k]\n            if pivot_val == 0:\n                # Encountered a zero pivot. This case will not happen with the problem's matrices\n                # and partial pivoting on a non-singular matrix.\n                # For a general-purpose solver, this would require special handling.\n                # We can assume it does not happen here.\n                continue\n\n            # Elimination step: update rows below the pivot.\n            for i in range(k + 1, n):\n                multiplier = A_work[i, k] / pivot_val\n                # Apply the row operation.\n                A_work[i, k:] -= multiplier * A_work[k, k:]\n            \n            # After step k, the matrix is A^(k). Update the max overall element value.\n            max_overall = max(max_overall, np.max(np.abs(A_work)))\n\n        growth_factor = max_overall / max_initial\n        # The problem guarantees integer results.\n        return int(round(growth_factor))\n\n    # The test suite consists of matrices of sizes n = 2, 6, 25.\n    test_cases = [2, 6, 25]\n    \n    results = []\n    for n in test_cases:\n        A = build_matrix(n)\n        \n        # Compute growth factor for no pivoting\n        gamma_none = compute_growth_factor(A, use_partial_pivoting=False)\n        \n        # Compute growth factor for partial pivoting\n        gamma_partial = compute_growth_factor(A, use_partial_pivoting=True)\n        \n        results.append([gamma_none, gamma_partial])\n\n    # Final print statement in the exact required format.\n    # e.g., [[2,2],[6,6],[25,25]]\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3262624"}]}