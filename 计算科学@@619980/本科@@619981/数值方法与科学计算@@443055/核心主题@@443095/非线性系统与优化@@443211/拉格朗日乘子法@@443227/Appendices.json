{"hands_on_practices": [{"introduction": "在深入研究复杂的优化求解之前，理解拉格朗日乘子本身的含义至关重要。本练习 [@problem_id:3251896] 提供了一个简洁直观的情景，用于探索在约束条件处于激活、非激活或冗余状态时乘子的具体行为。通过这个思想实验，你将深刻理解互补松弛性（complementary slackness）这一核心概念，即与非激活约束相关的乘子为何必须为零。", "problem": "考虑一个最小化欧几里得范数的约束优化问题，其服从于两个具有潜在冗余边界的标量不等式约束。设目标函数为 $f(x,y) = x^2 + y^2$，并考虑约束对 $x \\le \\alpha$ 和 $x \\le \\beta$，其中 $\\alpha  0$ 是一个固定常数，$\\beta \\in \\mathbb{R}$ 是一个参数。假设标准的正则性条件（例如，Slater条件）成立，因此一阶最优性条件适用。使用不等式约束的拉格朗日乘子法，也称为卡鲁什-库恩-塔克（Karush-Kuhn-Tucker, KKT）条件，分析当参数 $\\beta$ 变化时最优解及相关的拉格朗日乘子，并特别关注其中一个约束因比另一个约束更宽松而变得冗余的情况。\n\n设 $\\lambda_1 \\ge 0$ 和 $\\lambda_2 \\ge 0$ 分别表示与约束 $x \\le \\alpha$ 和 $x \\le \\beta$ 相关联的KKT乘子。下列哪个陈述是正确的？\n\nA. 如果 $\\beta > \\alpha$，那么约束 $x \\le \\beta$ 在最优点处是冗余的，且乘子满足 $\\lambda_2 = 0$ 和 $\\lambda_1 = -2\\alpha$。\n\nB. 如果 $\\beta  \\alpha$，那么约束 $x \\le \\alpha$ 在最优点处是冗余的，且乘子满足 $\\lambda_1 = 0$ 和 $\\lambda_2 = -2\\beta$。\n\nC. 如果 $\\beta = \\alpha$，那么乘子是唯一的，且满足 $\\lambda_1 = \\lambda_2 = -\\alpha$。\n\nD. 对于所有 $\\beta \\in \\mathbb{R}$，乘子之和满足 $\\lambda_1 + \\lambda_2 = -2\\min(\\alpha,\\beta)$，并且这个和连续地依赖于 $\\beta$。\n\nE. 对于某个 $\\beta \\neq \\alpha$，与冗余约束相关联的乘子是严格为正的。", "solution": "该优化问题旨在最小化目标函数 $f(x,y) = x^2 + y^2$，其约束条件为 $g_1(x) = x - \\alpha \\le 0$ 和 $g_2(x) = x - \\beta \\le 0$。可行域为满足 $x \\le \\min(\\alpha, \\beta)$ 的半平面。由于问题设定 $\\alpha  0$，因此 $\\min(\\alpha, \\beta)$ 总是负数。\n\n目标函数 $f(x,y)$ 代表点 $(x,y)$ 到原点距离的平方。要在半平面 $x \\le c$ (其中 $c  0$) 中找到离原点最近的点，该点必然位于边界 $x=c$ 上。由于 $y$ 不受约束，其最优值 $y^*$ 显然为 0。因此，唯一最优解为 $(x^*, y^*) = (\\min(\\alpha, \\beta), 0)$。\n\n我们应用卡鲁什-库恩-塔克 (KKT) 条件来分析拉格朗日乘子。拉格朗日函数为：\n$$ \\mathcal{L}(x, y, \\lambda_1, \\lambda_2) = x^2 + y^2 + \\lambda_1(x - \\alpha) + \\lambda_2(x - \\beta) $$\nKKT 条件包括：\n1.  **平稳性**: $\\nabla_{x,y} \\mathcal{L} = (0,0) \\implies 2x + \\lambda_1 + \\lambda_2 = 0$ 和 $2y = 0$。\n2.  **原始可行性**: $x \\le \\alpha$ 和 $x \\le \\beta$。\n3.  **对偶可行性**: $\\lambda_1 \\ge 0$ 和 $\\lambda_2 \\ge 0$。\n4.  **互补松弛性**: $\\lambda_1(x - \\alpha) = 0$ 和 $\\lambda_2(x - \\beta) = 0$。\n\n将最优解 $y^*=0$ 和 $x^*=\\min(\\alpha, \\beta)$ 代入平稳性条件，我们得到 $\\lambda_1 + \\lambda_2 = -2\\min(\\alpha, \\beta)$。\n\n现在，我们分析三种情况：\n\n**情况1：$\\beta > \\alpha$**\n-   最优解为 $x^* = \\min(\\alpha, \\beta) = \\alpha$。\n-   约束 $x \\le \\alpha$ 是激活的 ($x^* - \\alpha = 0$)。\n-   约束 $x \\le \\beta$ 是非激活的 ($x^* - \\beta = \\alpha - \\beta  0$)。\n-   根据互补松弛性，$\\lambda_2(x^* - \\beta) = 0 \\implies \\lambda_2 = 0$。\n-   从平稳性条件，$\\lambda_1 + 0 = -2\\alpha$。由于 $\\alpha  0$，我们有 $\\lambda_1 = -2\\alpha > 0$。\n-   所有KKT条件均满足。\n\n**情况2：$\\beta  \\alpha$**\n-   最优解为 $x^* = \\min(\\alpha, \\beta) = \\beta$。\n-   约束 $x \\le \\alpha$ 是非激活的 ($x^* - \\alpha = \\beta - \\alpha  0$)。\n-   约束 $x \\le \\beta$ 是激活的 ($x^* - \\beta = 0$)。\n-   根据互补松弛性，$\\lambda_1(x^* - \\alpha) = 0 \\implies \\lambda_1 = 0$。\n-   从平稳性条件，$0 + \\lambda_2 = -2\\beta$。由于 $\\beta  \\alpha  0$，我们有 $\\lambda_2 = -2\\beta > 0$。\n-   所有KKT条件均满足。\n\n**情况3：$\\beta = \\alpha$**\n-   最优解为 $x^* = \\alpha = \\beta$。两个约束都是激活的。\n-   互补松弛性条件不提供关于 $\\lambda_1, \\lambda_2$ 的额外信息。\n-   平稳性条件要求 $\\lambda_1 + \\lambda_2 = -2\\alpha$。\n-   任何满足 $\\lambda_1 + \\lambda_2 = -2\\alpha$ 且 $\\lambda_1, \\lambda_2 \\ge 0$ 的组合都是有效的乘子。例如，$(\\lambda_1, \\lambda_2) = (-2\\alpha, 0)$ 或 $(0, -2\\alpha)$ 或 $(-\\alpha, -\\alpha)$ 都是有效解。因此，乘子不唯一。\n\n### 选项评估\n-   **A**: 如果 $\\beta > \\alpha$，约束 $x \\le \\beta$ 是冗余且非激活的，其乘子 $\\lambda_2=0$。另一个乘子 $\\lambda_1 = -2\\alpha$。**此陈述正确。**\n-   **B**: 如果 $\\beta  \\alpha$，约束 $x \\le \\alpha$ 是冗余且非激活的，其乘子 $\\lambda_1=0$。另一个乘子 $\\lambda_2 = -2\\beta$。**此陈述正确。**\n-   **C**: 如果 $\\beta = \\alpha$，乘子不唯一。**此陈述错误。**\n-   **D**: 乘子之和 $\\lambda_1 + \\lambda_2 = -2\\min(\\alpha, \\beta)$ 总是成立。由于 $\\min(\\alpha, \\beta)$ 是 $\\beta$ 的连续函数，其和也是连续的。**此陈述正确。**\n-   **E**: 对于 $\\beta \\neq \\alpha$，与冗余约束（即非激活约束）关联的乘子总是0，而不是严格为正。**此陈述错误。**", "answer": "$$\\boxed{ABD}$$", "id": "3251896"}, {"introduction": "在建立了对乘子行为的直观理解后，我们将该方法应用于一个实际的几何优化问题。这个问题 [@problem_id:3251810] 涉及两个等式约束，其中一个还是非线性的，这展示了如何构建和求解由拉格朗日函数导出的更复杂的方程组。解决此类问题能够锻炼你将物理或几何场景转化为数学模型，并从多个候选解中系统地找出最优解的能力。", "problem": "一个封闭的直立圆柱体，其半径为 $r$，高为 $h$。其总表面积为 $S(r,h) = 2\\pi r h + 2\\pi r^{2}$，体积为 $V(r,h) = \\pi r^{2} h$。假设一项工程设计要求对纵横比 $x = h/r$ 施加一个非线性约束，形式为 $x + \\frac{1}{x} = \\kappa$，其中 $\\kappa$ 是一个给定的常数。假设 $V > 0$，$\\kappa > 2$，且 $r > 0$, $h > 0$，从而使得这些约束是可行且具有物理意义的。\n\n从 $S(r,h)$ 和 $V(r,h)$ 的基本几何公式以及用于等式约束优化的拉格朗日乘子法出发，确定在满足两个等式约束 $V(r,h) = V$ 和 $x + \\frac{1}{x} = \\kappa$ 的条件下，圆柱体可实现的最小总表面积 $S_{\\min}$。将您的最终答案表示为以 $V$ 和 $\\kappa$ 表示的封闭形式解析表达式。最终表达式中不要求进行数值四舍五入，也不应包含单位。", "solution": "该问题要求在给定体积 $V$ 和纵横比约束 $x=h/r$ 的条件下，最小化圆柱体的总表面积 $S$。\n\n1.  **目标函数和约束**\n    *   目标函数：$S(r,h) = 2\\pi r h + 2\\pi r^2$\n    *   约束1 (体积)：$\\pi r^2 h = V$\n    *   约束2 (纵横比)：$\\frac{h}{r} + \\frac{r}{h} = \\kappa$\n\n2.  **用纵横比 $x$ 简化问题**\n    我们可以将表面积 $S$ 表示为纵横比 $x=h/r$ 的函数。\n    从约束1， $h = V/(\\pi r^2)$。代入 $h=xr$ 可得 $xr = V/(\\pi r^2)$，整理后得到 $r^3 = V/(\\pi x)$，因此 $r = \\left(\\frac{V}{\\pi x}\\right)^{1/3}$。\n    现在将 $r$ 的表达式代入表面积公式：\n    $$ S = 2\\pi r^2 (1 + h/r) = 2\\pi r^2 (1+x) $$\n    $$ S(x) = 2\\pi \\left(\\left(\\frac{V}{\\pi x}\\right)^{1/3}\\right)^2 (1+x) = 2\\pi \\left(\\frac{V}{\\pi x}\\right)^{2/3} (1+x) = 2\\pi^{1/3}V^{2/3} \\frac{1+x}{x^{2/3}} $$\n\n3.  **确定 $x$ 的可能值**\n    约束2，$\\frac{h}{r} + \\frac{r}{h} = \\kappa$，可以写为 $x + \\frac{1}{x} = \\kappa$。整理后得到二次方程 $x^2 - \\kappa x + 1 = 0$。\n    由于问题设定 $\\kappa > 2$，该方程有两个不同的实数正根：\n    $$ x_1 = \\frac{\\kappa + \\sqrt{\\kappa^2-4}}{2} \\quad \\text{和} \\quad x_2 = \\frac{\\kappa - \\sqrt{\\kappa^2-4}}{2} $$\n    根据韦达定理，$x_1 x_2 = 1$。由于 $\\kappa > 2$，我们可以确定 $x_1 > 1$ 且 $0  x_2  1$。\n\n4.  **比较不同 $x$ 值对应的表面积**\n    为了找到最小表面积，我们需要比较 $S(x_1)$ 和 $S(x_2)$。由于 $2\\pi^{1/3}V^{2/3}$ 是一个正常数，这等价于比较函数 $f(x) = \\frac{1+x}{x^{2/3}}$ 在 $x_1$ 和 $x_2$ 处的值。\n    $$ f(x_1) = \\frac{1+x_1}{x_1^{2/3}} $$\n    $$ f(x_2) = f(1/x_1) = \\frac{1+1/x_1}{(1/x_1)^{2/3}} = \\frac{(x_1+1)/x_1}{x_1^{-2/3}} = \\frac{1+x_1}{x_1^{1/3}} $$\n    因为 $x_1 > 1$，我们有 $x_1^{2/3} > x_1^{1/3}$。由于这两项都在分母中，可以得出：\n    $$ \\frac{1}{x_1^{2/3}}  \\frac{1}{x_1^{1/3}} \\implies f(x_1)  f(x_2) $$\n    因此，当纵横比取两个根中较大的一个，即 $x_1 = \\frac{\\kappa + \\sqrt{\\kappa^2-4}}{2}$ 时，表面积达到最小值。\n\n5.  **最终表达式**\n    最小表面积 $S_{\\min}$ 的表达式为：\n    $$ S_{\\min} = S(x_1) = 2\\pi^{1/3}V^{2/3} \\frac{1+x_1}{x_1^{2/3}} $$\n    代入 $x_1$ 的表达式，我们得到最终答案。", "answer": "$$\\boxed{2\\pi^{1/3}V^{2/3} \\frac{1 + \\frac{\\kappa + \\sqrt{\\kappa^2-4}}{2}}{\\left(\\frac{\\kappa + \\sqrt{\\kappa^2-4}}{2}\\right)^{2/3}}}$$", "id": "3251810"}, {"introduction": "最后的练习旨在连接理论与计算实践。在科学计算中，理论条件必须通过能够处理浮点数和数值公差的代码来实现。这个编程任务 [@problem_id:3251733] 指导你实现一个算法，它不仅解决带不等式约束的二次规划问题，还对核心的KKT条件（如对偶可行性 $\\lambda \\ge 0$ 和互补松弛性 $\\lambda g(x^\\star) = 0$）进行数值验证。通过编写代码，你将对KKT条件在优化算法中如何作为决策框架运作获得更深刻的、操作层面的理解。", "problem": "考虑 $\\mathbb{R}^2$中的一个带单线性不等式约束的光滑、严格凸二次优化问题。设目标函数为 $f(x) = \\tfrac{1}{2} x^\\top Q x + c^\\top x$，约束为 $g(x) = a^\\top x - b \\le 0$，其中 $Q \\in \\mathbb{R}^{2 \\times 2}$ 是对称正定矩阵，$c \\in \\mathbb{R}^2$，$a \\in \\mathbb{R}^2$，$b \\in \\mathbb{R}$。对于一个带单乘子 $\\lambda^\\star$ 的极小值点 $x^\\star$，Karush-Kuhn-Tucker (KKT) 条件断言了原始可行性、对偶可行性、平稳性和互补松弛性。您的任务是数值验证其中的两个条件，即对偶可行性和互补松弛性，且不假设任何特殊情况的捷径。\n\n从光滑函数的无约束极小值点满足 $\\nabla f(x) = 0$ 的基本定义出发，并根据拉格朗日乘子法，一个激活的不等式约束会变为带拉格朗日乘子的等式，请设计一个程序，该程序：\n- 通过求解 $\\nabla f(x) = 0$ 计算无约束极小值点 $x_{\\mathrm{un}}$。\n- 如果 $g(x_{\\mathrm{un}}) \\le 0$，则声明约束为非激活状态，并设置 $\\lambda = 0$，$x^\\star = x_{\\mathrm{un}}$。\n- 如果 $g(x_{\\mathrm{un}}) > 0$，则强制约束为激活状态，并使用平稳性条件和激活约束方程联立求解 $x^\\star$ 和 $\\lambda$。\n\n在计算出 $(x^\\star, \\lambda)$ 后，数值检验：\n1. 对偶可行性：$\\lambda \\ge 0$。\n2. 互补松弛性：$\\lambda \\, g(x^\\star) = 0$。\n\n在比较时使用 $\\varepsilon = 10^{-9}$ 的数值容差。也就是说，如果一个实数 $r$ 满足 $r \\ge -\\varepsilon$，则视其为非负数；如果一个乘积 $p$ 满足 $|p| \\le \\varepsilon$，则视其为零。\n\n实现一个程序，将此验证应用于以下由五个案例组成的测试套件，每个案例由 $(Q, c, a, b)$ 指定：\n- 案例 A (激活约束，一般可行性)：\n  $$Q = \\begin{bmatrix}1  0\\\\ 0  1\\end{bmatrix}, \\quad c = \\begin{bmatrix}-2\\\\ -3\\end{bmatrix}, \\quad a = \\begin{bmatrix}1\\\\ 0\\end{bmatrix}, \\quad b = 1.$$\n- 案例 B (非激活约束，无约束最小值可行)：\n  $$Q = \\begin{bmatrix}1  0\\\\ 0  1\\end{bmatrix}, \\quad c = \\begin{bmatrix}-0.5\\\\ -0.5\\end{bmatrix}, \\quad a = \\begin{bmatrix}1\\\\ 0\\end{bmatrix}, \\quad b = 1.$$\n- 案例 C (激活约束，非单位 Hessian 矩阵)：\n  $$Q = \\begin{bmatrix}2  0\\\\ 0  1\\end{bmatrix}, \\quad c = \\begin{bmatrix}-1\\\\ 0\\end{bmatrix}, \\quad a = \\begin{bmatrix}1\\\\ 1\\end{bmatrix}, \\quad b = 0.2.$$\n- 案例 D (近边界，乘子非常小)：\n  $$Q = \\begin{bmatrix}1  0\\\\ 0  1\\end{bmatrix}, \\quad c = \\begin{bmatrix}-0.6\\\\ -0.6\\end{bmatrix}, \\quad a = \\begin{bmatrix}1\\\\ 1\\end{bmatrix}, \\quad b = 1.2 - 10^{-9}.$$\n- 案例 E (无约束最小值满足边界等式)：\n  $$Q = \\begin{bmatrix}1  0\\\\ 0  1\\end{bmatrix}, \\quad c = \\begin{bmatrix}-1\\\\ 0\\end{bmatrix}, \\quad a = \\begin{bmatrix}1\\\\ 0\\end{bmatrix}, \\quad b = 1.$$\n\n您的程序必须为每个案例输出一对布尔值 $[\\text{dual\\_feasible}, \\text{comp\\_slack}]$，其中如果在容差范围内 $\\lambda \\ge 0$，则 $\\text{dual\\_feasible}$ 为 true，如果在容差范围内 $\\lambda \\, g(x^\\star) = 0$，则 $\\text{comp\\_slack}$ 为 true。最终输出必须将所有案例的结果聚合为单行：一个用方括号括起来的逗号分隔列表，其中每个元素本身就是一个包含两个布尔值的列表。例如，输出格式必须如下所示\n$$[\\,[\\text{bool},\\text{bool}],\\,[\\text{bool},\\text{bool}],\\,\\dots\\,]$$\n且不含任何附加文本。\n\n角度或物理单位不适用。所有计算均为纯数学计算且无量纲。", "solution": "该问题要求编写一个程序，对一系列二次规划问题，从数值上验证其KKT条件的对偶可行性和互补松弛性。该算法遵循一个标准的分析流程。\n\n### 算法逻辑\n\n对于每个二次规划问题，其形式为：\n$$\n\\text{最小化} \\quad f(x) = \\frac{1}{2} x^\\top Q x + c^\\top x \\\\\n\\text{约束于} \\quad g(x) = a^\\top x - b \\le 0\n$$\n\n1.  **计算无约束最优解**\n    首先，忽略约束，计算目标函数 $f(x)$ 的全局最小值点。这可以通过令其梯度为零来找到：\n    $$ \\nabla f(x) = Qx + c = 0 $$\n    由于 $Q$ 是正定矩阵，其可逆。因此，无约束最小值点 $x_{\\mathrm{un}}$ 是唯一的：\n    $$ x_{\\mathrm{un}} = -Q^{-1}c $$\n\n2.  **检查可行性并确定约束状态**\n    接下来，检查 $x_{\\mathrm{un}}$ 是否满足约束 $g(x) \\le 0$。\n    *   **情况 1: 约束非激活 ($g(x_{\\mathrm{un}}) \\le 0$)**\n        如果无约束解位于可行域内或其边界上，那么它就是约束优化问题的最优解。因此，最优解 $x^\\star = x_{\\mathrm{un}}$，并且根据KKT条件，相关的拉格朗日乘子 $\\lambda = 0$。\n    *   **情况 2: 约束激活 ($g(x_{\\mathrm{un}}) > 0$)**\n        如果无约束解在可行域之外，那么最优解 $x^\\star$ 必须位于可行域的边界上，即 $g(x^\\star) = a^\\top x^\\star - b = 0$。在这种情况下，最优解 $(x^\\star, \\lambda)$ 必须满足KKT方程组：\n        \\begin{align*}\n        Qx^\\star + c + \\lambda a = 0 \\quad (\\text{平稳性}) \\\\\n        a^\\top x^\\star - b = 0 \\quad (\\text{激活约束})\n        \\end{align*}\n        从第一个方程，我们解出 $x^\\star = -Q^{-1}(c + \\lambda a)$。将其代入第二个方程，可以解出 $\\lambda$：\n        $$ \\lambda = \\frac{a^\\top(-Q^{-1}c) - b}{a^\\top Q^{-1} a} = \\frac{a^\\top x_{\\mathrm{un}} - b}{a^\\top Q^{-1} a} $$\n        得到 $\\lambda$ 后，即可计算出 $x^\\star$。\n\n3.  **数值验证**\n    在计算出 $(x^\\star, \\lambda)$ 对之后，使用数值容差 $\\varepsilon = 10^{-9}$ 检验两个KKT条件：\n    *   **对偶可行性**: 检验 $\\lambda \\ge 0$ (数值上为 $\\lambda \\ge -\\varepsilon$)。\n    *   **互补松弛性**: 检验 $\\lambda g(x^\\star) = 0$ (数值上为 $|\\lambda(a^\\top x^\\star - b)| \\le \\varepsilon$)。\n\n所提供的Python代码实现了这一逻辑，对给定的五个案例进行计算和验证，并按指定格式输出结果。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves a series of quadratic optimization problems with a single linear inequality constraint\n    and verifies the KKT conditions of dual feasibility and complementary slackness.\n    \"\"\"\n    epsilon = 1e-9\n\n    test_cases = [\n        # Case A: active constraint\n        {'Q': np.array([[1.0, 0.0], [0.0, 1.0]]), 'c': np.array([-2.0, -3.0]), 'a': np.array([1.0, 0.0]), 'b': 1.0},\n        # Case B: inactive constraint\n        {'Q': np.array([[1.0, 0.0], [0.0, 1.0]]), 'c': np.array([-0.5, -0.5]), 'a': np.array([1.0, 0.0]), 'b': 1.0},\n        # Case C: active constraint, non-identity Hessian\n        {'Q': np.array([[2.0, 0.0], [0.0, 1.0]]), 'c': np.array([-1.0, 0.0]), 'a': np.array([1.0, 1.0]), 'b': 0.2},\n        # Case D: near-boundary case\n        {'Q': np.array([[1.0, 0.0], [0.0, 1.0]]), 'c': np.array([-0.6, -0.6]), 'a': np.array([1.0, 1.0]), 'b': 1.2 - 1e-9},\n        # Case E: boundary equality satisfied by unconstrained minimum\n        {'Q': np.array([[1.0, 0.0], [0.0, 1.0]]), 'c': np.array([-1.0, 0.0]), 'a': np.array([1.0, 0.0]), 'b': 1.0},\n    ]\n\n    results = []\n\n    for case in test_cases:\n        Q, c, a, b = case['Q'], case['c'], case['a'], case['b']\n\n        # Step 1: Compute the unconstrained minimizer x_un by solving Qx + c = 0\n        Q_inv = np.linalg.inv(Q)\n        x_un = -Q_inv @ c\n\n        # Step 2: Evaluate the constraint at the unconstrained minimizer\n        g_x_un = a.T @ x_un - b\n\n        # Step 3: Determine if the constraint is active and find (x*, lambda)\n        # Check if g(x_un) = 0 using tolerance.\n        # If g(x_un) is a very small positive number (= epsilon), we treat it as 0,\n        # meaning the unconstrained minimum is on the boundary and thus feasible.\n        if g_x_un = epsilon:\n            # Case 1: Constraint is inactive (or on the boundary).\n            # The unconstrained minimizer is the solution.\n            x_star = x_un\n            lambda_val = 0.0\n        else:\n            # Case 2: Constraint is active.\n            # The solution lies on the constraint boundary g(x*) = 0.\n            # Solve for lambda from the KKT system.\n            lambda_numerator = g_x_un\n            lambda_denominator = a.T @ Q_inv @ a\n            lambda_val = lambda_numerator / lambda_denominator\n            \n            # Compute the optimal x* using lambda.\n            x_star = x_un - lambda_val * (Q_inv @ a)\n\n        # Step 4: Numerically verify dual feasibility and complementary slackness\n        \n        # 1. Dual feasibility: lambda >= 0\n        dual_feasible = lambda_val >= -epsilon\n\n        # 2. Complementary slackness: lambda * g(x*) = 0\n        g_x_star = a.T @ x_star - b\n        comp_slack_product = lambda_val * g_x_star\n        comp_slack = abs(comp_slack_product) = epsilon\n\n        results.append([dual_feasible, comp_slack])\n\n    # Format the final output string as a list of lists of booleans,\n    # e.g., [[true,true],[true,true],...]\n    str_results = []\n    for res_pair in results:\n        str_results.append(f\"[{str(res_pair[0]).lower()},{str(res_pair[1]).lower()}]\")\n    print(f\"[{','.join(str_results)}]\")\n\nsolve()\n```", "id": "3251733"}]}