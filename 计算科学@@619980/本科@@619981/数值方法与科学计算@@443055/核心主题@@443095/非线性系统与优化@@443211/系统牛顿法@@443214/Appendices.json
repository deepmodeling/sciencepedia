{"hands_on_practices": [{"introduction": "为了真正掌握系统牛顿法，没有什么比亲手完成一次迭代计算更有效了。这个练习将引导你完成这一核心过程，就像学习一个复杂舞步中的单个动作一样。我们将手动计算雅可比矩阵，求解线性方程组以获得更新步长，并找到下一个近似解，从而确保你对基本步骤有扎实的理解。[@problem_id:2190496]", "problem": "一个自主机器人被编程以导航至二维平面上的目标位置 $(x, y)$。该目标被定义为两条信号定义的路径的交点。这些路径的方程由以下非线性方程组给出：\n$$\n\\begin{cases}\n    x^2 - y + \\cos(y) - 3 = 0 \\\\\n    x + y + \\sin(x) - 2 = 0\n\\end{cases}\n$$\n机器人的当前位置为 $\\mathbf{x}_0 = (x_0, y_0) = (1.5, 0.5)$。坐标系统以米为单位进行测量。为找到目标，机器人的导航算法将使用针对非线性方程组的牛顿法。\n\n执行恰好一次牛顿法迭代，以找到机器人的下一个估计位置 $\\mathbf{x}_1 = (x_1, y_1)$。假设三角函数的所有参数均以弧度为单位。\n\n提供更新后的位置向量 $\\mathbf{x}_1$ 的分量。将每个分量的答案以米表示，并四舍五入到三位有效数字。", "solution": "我们将该方程组构建为 $\\mathbf{F}(x,y) = \\begin{pmatrix} f_{1}(x,y) \\\\ f_{2}(x,y) \\end{pmatrix}$，其中\n$$\nf_{1}(x,y) = x^{2} - y + \\cos(y) - 3,\\quad f_{2}(x,y) = x + y + \\sin(x) - 2.\n$$\n方程组的牛顿法更新公式为 $\\mathbf{x}_{1} = \\mathbf{x}_{0} - J(\\mathbf{x}_{0})^{-1}\\mathbf{F}(\\mathbf{x}_{0})$，等价地，求解 $J(\\mathbf{x}_{0})\\,\\mathbf{s} = -\\mathbf{F}(\\mathbf{x}_{0})$ 以得到 $\\mathbf{s}$，然后令 $\\mathbf{x}_{1} = \\mathbf{x}_{0} + \\mathbf{s}$。\n\n雅可比矩阵为\n$$\nJ(x,y) = \\begin{pmatrix}\n\\frac{\\partial f_{1}}{\\partial x} & \\frac{\\partial f_{1}}{\\partial y} \\\\\n\\frac{\\partial f_{2}}{\\partial x} & \\frac{\\partial f_{2}}{\\partial y}\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n2x & -1 - \\sin(y) \\\\\n1 + \\cos(x) & 1\n\\end{pmatrix}.\n$$\n在 $\\mathbf{x}_{0} = (x_{0},y_{0}) = (1.5, 0.5)$ 处（三角函数参数以弧度为单位），\n$$\n\\sin(0.5) \\approx 0.4794255386,\\quad \\cos(0.5) \\approx 0.8775825620,\\quad \\sin(1.5) \\approx 0.9974949866,\\quad \\cos(1.5) \\approx 0.0707372017.\n$$\n计算函数值：\n$$\n\\mathbf{F}(\\mathbf{x}_{0}) = \\begin{pmatrix}\n1.5^{2} - 0.5 + \\cos(0.5) - 3 \\\\\n1.5 + 0.5 + \\sin(1.5) - 2\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n-0.372417438 \\\\\n0.9974949866\n\\end{pmatrix}.\n$$\n计算雅可比矩阵：\n$$\nJ(\\mathbf{x}_{0}) = \\begin{pmatrix}\n3 & -1 - \\sin(0.5) \\\\\n1 + \\cos(1.5) & 1\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n3 & -1.4794255386 \\\\\n1.0707372017 & 1\n\\end{pmatrix}.\n$$\n建立并求解 $J(\\mathbf{x}_{0})\\,\\mathbf{s} = -\\mathbf{F}(\\mathbf{x}_{0})$：\n$$\n\\begin{pmatrix}\n3 & -1.4794255386 \\\\\n1.0707372017 & 1\n\\end{pmatrix}\n\\begin{pmatrix}\ns_{1} \\\\ s_{2}\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n0.372417438 \\\\\n-0.9974949866\n\\end{pmatrix}.\n$$\n由第二个方程可得 $s_{2} = -0.9974949866 - 1.0707372017\\,s_{1}$。代入第一个方程：\n$$\n(3 + 1.4794255386 \\cdot 1.0707372017)\\,s_{1} + 1.4794255386 \\cdot 0.9974949866 = 0.372417438,\n$$\n所以\n$$\ns_{1} = \\frac{0.372417438 - 1.4794255386 \\cdot 0.9974949866}{3 + 1.4794255386 \\cdot 1.0707372017} \\approx \\frac{-1.103302119}{4.5840759613} \\approx -0.240682.\n$$\n然后\n$$\ns_{2} = -0.9974949866 - 1.0707372017\\,(-0.240682) \\approx -0.739788.\n$$\n更新估计值：\n$$\nx_{1} = x_{0} + s_{1} \\approx 1.5 - 0.240682 = 1.259318,\\quad\ny_{1} = y_{0} + s_{2} \\approx 0.5 - 0.739788 = -0.239788.\n$$\n四舍五入到三位有效数字（米）：$x_{1} \\approx 1.26$，$y_{1} \\approx -0.240$。", "answer": "$$\\boxed{\\begin{pmatrix} 1.26 & -0.240 \\end{pmatrix}}$$", "id": "2190496"}, {"introduction": "掌握了基本步骤后，我们来探讨一个更深层次的问题：当牛顿法的核心假设——雅可比矩阵可逆——不成立时会发生什么？这个练习将深入分析牛顿法在雅可比矩阵奇异点附近的行为。理解这一点对于认识到为何稳健的数值求解器需要比基本公式更多的策略至关重要，并能帮助你建立对该方法局限性和失效模式的直观感受。[@problem_id:3255524]", "problem": "考虑一个二阶连续可微的映射 $F:\\mathbb{R}^2\\to\\mathbb{R}^2$以及求根任务 $F(x,y)=\\mathbf{0}$。设计一个满足以下两个性质的系统：\n- 它的解集包含位于 $(0,0)$ 的孤立根。\n- 它的雅可比行列式在直线 $y=x$ 上为零。\n\n这样一个系统是\n$$\nF(x,y)=\\begin{bmatrix}\n(y-x)^2 \\\\\nx+y\n\\end{bmatrix}.\n$$\n当初始猜测值位于奇异线 $y=x$ 上，特别是在点 $(a,a)$（其中 $a\\neq 0$）时，分析牛顿法用于求解该系统的初始行为。基于第一性原理（线性化和雅可比矩阵的定义），确定哪个陈述最能描述从这样一个初始猜测值出发的牛顿步长和紧随其后的下一个迭代点。\n\n选择唯一的最佳选项。\n\nA. 雅可比矩阵是奇异的，因此牛顿步长不是唯一确定的；任何需要在 $(a,a)$ 处对雅可比矩阵求逆的算法都会失败。然而，如果用线性化系统的最小范数解代替逆矩阵，得到的牛顿步长会使迭代点在一次迭代中达到 $(0,0)$。\n\nB. 在 $(a,a)$ 处的线性化牛顿系统有唯一解 $s=(-a,-a)$，因此牛顿步长是唯一确定的，并且在一次迭代中收敛。\n\nC. 对于所有 $a\\neq 0$，在 $(a,a)$ 处的线性化牛顿系统是不相容的，因此牛顿法无法从 $(a,a)$ 出发进行任何一步迭代。\n\nD. 从 $(a,a)$ 出发，线性化系统的任何解都会产生一个不同于 $(0,0)$ 的下一个迭代点，因此从直线 $y=x$ 上的点出发，单步收敛是不可能的。\n\nE. 尽管雅可比行列式在直线 $y=x$ 上为零，牛顿法仍然会从该直线上的任何初始猜测值开始二次收敛，因为第一个分量 $(y-x)^2$ 是非负的。", "solution": "用户要求分析牛顿法在一个特定非线性系统上的行为，该分析从雅可比矩阵为奇异的一条直线上的一个初始猜测值开始。\n\n### 步骤 1：问题验证\n\n我将首先根据指定协议验证问题陈述。\n\n**1. 提取已知条件：**\n- 一个二阶连续可微的映射 $F:\\mathbb{R}^2 \\to \\mathbb{R}^2$。\n- 求根问题为 $F(x,y)=\\mathbf{0}$。\n- 该系统具有两个性质：\n    1. 解集包含位于 $(0,0)$ 的孤立根。\n    2. 雅可比行列式在直线 $y=x$ 上为零。\n- 提供了一个具体系统：$F(x,y)=\\begin{bmatrix} (y-x)^2 \\\\ x+y \\end{bmatrix}$。\n- 牛顿法的初始猜测值为 $\\mathbf{x}_0 = (a,a)$，其中 $a \\neq 0$。\n- 任务是分析从这个初始猜测值出发的第一步牛顿迭代的行为。\n\n**2. 使用提取的已知条件进行验证：**\n- **科学依据和客观性**：该问题是数值分析领域中一个明确定义的数学练习。它涉及标准算法牛顿法的行为。语言精确且客观。该问题在科学上是合理的。\n- **所提供系统的一致性检查**：\n    - **位于 $(0,0)$ 的根**：我们计算 $F(0,0) = \\begin{bmatrix} (0-0)^2 \\\\ 0+0 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix} = \\mathbf{0}$。因此，$(0,0)$ 是一个根。\n    - **孤立根**：为了找到所有根，我们令 $F(x,y)=\\mathbf{0}$。这要求 $(y-x)^2=0$ 和 $x+y=0$。第一个方程意味着 $y=x$。将此代入第二个方程得到 $x+x=0$，简化为 $2x=0$，所以 $x=0$。如果 $x=0$，则 $y=0$。因此，$(0,0)$ 是唯一的根，从而也是孤立根。第一个性质得到满足。\n    - **在 $y=x$ 上的奇异雅可比矩阵**：我们必须计算雅可比矩阵 $J_F(x,y)$。\n      令 $F(x,y) = \\begin{bmatrix} f_1(x,y) \\\\ f_2(x,y) \\end{bmatrix} = \\begin{bmatrix} (y-x)^2 \\\\ x+y \\end{bmatrix}$。\n      偏导数是：\n      $\\frac{\\partial f_1}{\\partial x} = 2(y-x)(-1) = -2(y-x)$\n      $\\frac{\\partial f_1}{\\partial y} = 2(y-x)(1) = 2(y-x)$\n      $\\frac{\\partial f_2}{\\partial x} = 1$\n      $\\frac{\\partial f_2}{\\partial y} = 1$\n      雅可比矩阵是 $J_F(x,y) = \\begin{bmatrix} -2(y-x) & 2(y-x) \\\\ 1 & 1 \\end{bmatrix}$。\n      行列式为 $\\det(J_F(x,y)) = (-2(y-x))(1) - (2(y-x))(1) = -4(y-x)$。\n      在直线 $y=x$ 上，行列式为 $\\det(J_F(x,x)) = -4(x-x) = 0$。第二个性质得到满足。\n- **适定性**：该问题是适定的。它要求对一个给定的函数，从一个给定的起始点，分析一个标准数值方法的特定、明确定义的迭代。所有必要信息都已提供。\n\n**3. 结论与行动：**\n问题陈述是有效的、自洽的，并且在数学上是合理的。我将继续进行求解。\n\n### 步骤 2：求解推导\n\n牛顿法的核心是通过求解从 $F$ 在当前迭代点 $\\mathbf{x}_k$ 周围的一阶泰勒展开式导出的线性系统，来找到步长 $\\mathbf{s}_k = \\mathbf{x}_{k+1} - \\mathbf{x}_k$：\n$$J_F(\\mathbf{x}_k) \\mathbf{s}_k = -F(\\mathbf{x}_k)$$\n然后，下一个迭代点由 $\\mathbf{x}_{k+1} = \\mathbf{x}_k + \\mathbf{s}_k$ 给出。\n\n我们分析从初始猜测值 $\\mathbf{x}_0 = \\begin{bmatrix} a \\\\ a \\end{bmatrix}$（其中 $a \\neq 0$）开始的第一步（$k=0$）。\n\n**1. 计算 $F(\\mathbf{x}_0)$ 和 $J_F(\\mathbf{x}_0)$：**\n- **函数值：**\n  $F(\\mathbf{x}_0) = F(a,a) = \\begin{bmatrix} (a-a)^2 \\\\ a+a \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 2a \\end{bmatrix}$。\n- **雅可比矩阵：**\n  $J_F(\\mathbf{x}_0) = J_F(a,a) = \\begin{bmatrix} -2(a-a) & 2(a-a) \\\\ 1 & 1 \\end{bmatrix} = \\begin{bmatrix} 0 & 0 \\\\ 1 & 1 \\end{bmatrix}$。\n  如前所述，该矩阵是奇异的，因为其行列式为 0。\n\n**2. 建立并分析线性化牛顿系统：**\n用于求解牛顿步长 $\\mathbf{s}_0 = \\begin{bmatrix} s_x \\\\ s_y \\end{bmatrix}$ 的系统是 $J_F(\\mathbf{x}_0) \\mathbf{s}_0 = -F(\\mathbf{x}_0)$：\n$$\n\\begin{bmatrix} 0 & 0 \\\\ 1 & 1 \\end{bmatrix} \\begin{bmatrix} s_x \\\\ s_y \\end{bmatrix} = - \\begin{bmatrix} 0 \\\\ 2a \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ -2a \\end{bmatrix}\n$$\n该矩阵方程对应于以下标量方程组：\n1. $0 \\cdot s_x + 0 \\cdot s_y = 0$\n2. $1 \\cdot s_x + 1 \\cdot s_y = -2a$\n\n第一个方程 $0=0$ 是冗余的。该系统实际上简化为单个方程 $s_x + s_y = -2a$。\n如果 $\\mathbf{b}$ 在 $A$ 的列空间中，则线性系统 $A\\mathbf{x} = \\mathbf{b}$ 是相容的。这里，$J_F(a,a)$ 的列空间是 $\\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$ 的生成空间。向量 $-F(a,a) = \\begin{bmatrix} 0 \\\\ -2a \\end{bmatrix}$ 确实位于此列空间中（缩放因子为 $-2a$）。因此，该系统是**相容的**。\n\n由于雅可比矩阵是奇异的，解**不是唯一的**。所有可能的牛顿步长 $\\mathbf{s}_0$ 的集合是在 $(s_x, s_y)$ 平面中由 $s_x + s_y = -2a$ 定义的直线。\n\n**3. 分析对牛顿步长的影响：**\n因为 $\\mathbf{s}_0$ 的解不是唯一的，任何依赖于计算唯一矩阵逆 $J_F^{-1}$ 的算法都会失败。然而，稳健的线性求解器不会直接计算逆矩阵。对于一个相容但欠定的系统，它们会找到一个特解。一个标准的选择是唯一的**最小范数解**，即最小化欧几里得范数 $\\| \\mathbf{s}_0 \\|_2 = \\sqrt{s_x^2 + s_y^2}$ 的解 $\\mathbf{s}_0$。\n\n为了找到这个最小范数解，我们在约束条件 $s_x + s_y = -2a$ 下最小化 $s_x^2 + s_y^2$。将 $s_y = -2a - s_x$ 代入要最小化的表达式中：\n$g(s_x) = s_x^2 + (-2a - s_x)^2 = s_x^2 + 4a^2 + 4as_x + s_x^2 = 2s_x^2 + 4as_x + 4a^2$。\n为了找到最小值，我们将关于 $s_x$ 的导数设为零：\n$g'(s_x) = 4s_x + 4a = 0 \\implies s_x = -a$。\n根据约束条件，$s_y = -2a - s_x = -2a - (-a) = -a$。\n因此，牛顿步长的唯一最小范数解是 $\\mathbf{s}_{LN} = \\begin{bmatrix} -a \\\\ -a \\end{bmatrix}$。\n\n**4. 确定下一个迭代点：**\n如果采用这个特定的最小范数步长，下一个迭代点 $\\mathbf{x}_1$ 是：\n$$\\mathbf{x}_1 = \\mathbf{x}_0 + \\mathbf{s}_{LN} = \\begin{bmatrix} a \\\\ a \\end{bmatrix} + \\begin{bmatrix} -a \\\\ -a \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}$$\n这意味着如果算法选择了最小范数解，牛顿法将在一次迭代中收敛到根 $(0,0)$。\n\n### 步骤 3：逐项分析\n\n**A. 雅可比矩阵是奇异的，因此牛顿步长不是唯一确定的；任何需要在 $(a,a)$ 处对雅可比矩阵求逆的算法都会失败。然而，如果用线性化系统的最小范数解代替逆矩阵，得到的牛顿步长会使迭代点在一次迭代中达到 $(0,0)$。**\n- **结论：正确。**这个陈述准确地总结了我们的发现。在 $(a,a)$ 处的雅可比矩阵是奇异的。牛顿系统是相容的但有无穷多解，因此步长不是唯一的。一个试图计算 $J_F^{-1}$ 的简单实现会失败。特定的最小范数解是 $\\mathbf{s}_0 = (-a, -a)$，这使得下一个迭代点为 $\\mathbf{x}_1 = (0,0)$。\n\n**B. 在 $(a,a)$ 处的线性化牛顿系统有唯一解 $s=(-a,-a)$，因此牛顿步长是唯一确定的，并且在一次迭代中收敛。**\n- **结论：不正确。**关于系统有唯一解的核心论点是错误的。雅可比矩阵的奇异性意味着如果存在解，则必定有无穷多个解。\n\n**C. 对于所有 $a\\neq 0$，在 $(a,a)$ 处的线性化牛顿系统是不相容的，因此牛顿法无法从 $(a,a)$ 出发进行任何一步迭代。**\n- **结论：不正确。**我们明确地证明了该系统是相容的，因为右侧向量 $-F(a,a)$ 位于雅可比矩阵 $J_F(a,a)$ 的列空间中。可以进行迭代。\n\n**D. 从 $(a,a)$ 出发，线性化系统的任何解都会产生一个不同于 $(0,0)$ 的下一个迭代点，因此从直线 $y=x$ 上的点出发，单步收敛是不可能的。**\n- **结论：不正确。**量词“任何”使得这个陈述是错误的。虽然大多数解确实会导致下一个迭代点不同于 $(0,0)$，但我们找到了一个特解 $\\mathbf{s}_0 = (-a, -a)$，它导致了单步收敛。这一个反例就使该陈述无效。\n\n**E. 尽管雅可比行列式在直线 $y=x$ 上为零，牛顿法仍然会从该直线上的任何初始猜测值开始二次收敛，因为第一个分量 $(y-x)^2$ 是非负的。**\n- **结论：不正确。**这个陈述提出了两个有缺陷的主张。首先，二次收敛没有保证；实际上，根处的雅可比矩阵奇异通常导致线性收敛。我们对从 $(a,a)$ 出发的通用步长的分析会表明，如果未发生单步收敛，后续步骤会表现出线性而非二次收敛。其次，所给出的理由（“因为第一个分量...是非负的”）是一个不合逻辑的推论，并且在这种情况下与收敛速度无关。", "answer": "$$\\boxed{A}$$", "id": "3255524"}, {"introduction": "现在，我们将所有知识融会贯通。最后的这个练习将你从手动计算和理论分析带入构建一个完整、稳健的求解器的实践中。我们将应用牛顿法解决一个在科学与工程中极为常见的任务：寻找一个函数的驻点（即优化问题）。这项任务要求你实现全局化策略（如回溯线搜索）和正则化技术，以应对我们之前讨论过的收敛发散和矩阵奇异等问题，最终打造出一个强大的计算工具。[@problem_id:3255464]", "problem": "考虑二次连续可微的二元函数 $$f(x,y) = \\left(4 - 2.1x^2 + \\frac{x^4}{3}\\right)x^2 + xy + \\left(-4 + 4y^2\\right)y^2,$$ 该函数被称为六驼峰函数。该函数的一个驻点是任何满足梯度为零的点 $$(x^\\star,y^\\star)$$，即 $$\\nabla f(x^\\star,y^\\star) = \\mathbf{0}$$。您的任务是设计并实现一个程序，通过求解非线性系统 $$\\mathbf{F}(\\mathbf{z}) = \\mathbf{0}, \\quad \\text{其中 } \\mathbf{z} = \\begin{bmatrix} x \\\\ y \\end{bmatrix}, \\ \\mathbf{F}(\\mathbf{z}) = \\nabla f(x,y),$$ 来计算驻点，该程序使用系统牛顿法，并从指定的初始猜测值开始。\n\n使用从多元泰勒展开以及梯度和雅可比矩阵的定义开始的推导。通过将牛顿步与基于价值函数 $$\\phi(\\mathbf{z}) = \\frac{1}{2}\\left\\|\\mathbf{F}(\\mathbf{z})\\right\\|_2^2$$ 的回溯线搜索相结合，实现一种全局收敛策略。如果雅可比矩阵是奇异或病态的，则对其应用一个小的对角正则化 $$\\mu \\mathbf{I}$$（其中 $$\\mu > 0$$ 根据需要进行调整）以获得一个可解的线性系统。当无穷范数 $$\\|\\mathbf{F}(\\mathbf{z}_k)\\|_\\infty \\le 10^{-10}$$ 或步长无穷范数 $$\\|\\mathbf{s}_k\\|_\\infty \\le 10^{-12}$$，或迭代次数达到 $$100$$ 时，终止迭代。如果出现任何隐式角度度量，请使用弧度（本问题中不需要）。所有浮点数输出必须四舍五入到六位小数。\n\n您的程序必须处理以下初始猜测值的测试套件：\n- 测试用例1：$$\\mathbf{z}_0 = (0.1,-0.7)$$。\n- 测试用例2：$$\\mathbf{z}_0 = (-0.2,0.6)$$。\n- 测试用例3（边缘情况：已在驻点）：$$\\mathbf{z}_0 = (0.0,0.0)$$。\n- 测试用例4：$$\\mathbf{z}_0 = (-1.7,0.8)$$。\n- 测试用例5：$$\\mathbf{z}_0 = (1.7,-0.8)$$。\n\n对于每个测试用例，输出找到的驻点 $$(x^\\star,y^\\star)$$ 和对应的函数值 $$f(x^\\star,y^\\star)$$。最终输出必须是包含列表的列表的单行，格式严格如下\n$$[[x_1,y_1,f_1],[x_2,y_2,f_2],[x_3,y_3,f_3],[x_4,y_4,f_4],[x_5,y_5,f_5]],$$\n其中每个 $$x_i$$、$$y_i$$ 和 $$f_i$$ 是四舍五入到六位小数的浮点数，且输出字符串中没有空格。", "solution": "经评估，用户提供的问题是**有效的**。这是一个在数值分析领域内定义良好、有科学依据的问题，没有矛盾、歧义或伪科学主张。任务是使用标准的系统牛顿法，并辅以全局化和正则化技术，来寻找给定函数的驻点。所有必要的数据，包括目标函数、初始条件和终止准则，均已提供。\n\n### 基于原理的解决方案设计\n\n问题要求寻找一个二次连续可微函数 $f(x,y)$ 的驻点 $(x^\\star, y^\\star)$。驻点被定义为函数梯度为零向量的点，即 $\\nabla f(x^\\star, y^\\star) = \\mathbf{0}$。这个条件建立了一个必须求解的非线性方程组。\n\n**1. 非线性系统的构建**\n\n函数由下式给出：\n$$f(x,y) = \\left(4 - 2.1x^2 + \\frac{x^4}{3}\\right)x^2 + xy + \\left(-4 + 4y^2\\right)y^2$$\n展开此表达式可得：\n$$f(x,y) = 4x^2 - 2.1x^4 + \\frac{x^6}{3} + xy - 4y^2 + 4y^4$$\n状态变量向量为 $\\mathbf{z} = \\begin{bmatrix} x \\\\ y \\end{bmatrix}$。待求解的非线性方程组为 $\\mathbf{F}(\\mathbf{z}) = \\mathbf{0}$，其中 $\\mathbf{F}(\\mathbf{z})$ 是 $f(x,y)$ 的梯度：\n$$\\mathbf{F}(\\mathbf{z}) = \\nabla f(x,y) = \\begin{bmatrix} \\frac{\\partial f}{\\partial x} \\\\ \\frac{\\partial f}{\\partial y} \\end{bmatrix}$$\n偏导数如下：\n$$\\frac{\\partial f}{\\partial x} = 8x - 8.4x^3 + 2x^5 + y$$\n$$\\frac{\\partial f}{\\partial y} = x - 8y + 16y^3$$\n因此，该方程组为：\n$$\\mathbf{F}(\\mathbf{z}) = \\begin{bmatrix} F_1(x,y) \\\\ F_2(x,y) \\end{bmatrix} = \\begin{bmatrix} 2x^5 - 8.4x^3 + 8x + y \\\\ 16y^3 - 8y + x \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}$$\n\n**2. 系统牛顿法**\n\n牛顿法是用于寻找方程组根的迭代过程。从初始猜测 $\\mathbf{z}_0$ 开始，它生成一系列逼近根的迭代值 $\\mathbf{z}_k$。更新规则源于 $\\mathbf{F}$ 在当前迭代点 $\\mathbf{z}_k$ 附近的一阶多元泰勒展开：\n$$\\mathbf{F}(\\mathbf{z}_{k+1}) \\approx \\mathbf{F}(\\mathbf{z}_k) + J(\\mathbf{z}_k)(\\mathbf{z}_{k+1} - \\mathbf{z}_k)$$\n其中 $J(\\mathbf{z}_k)$ 是在 $\\mathbf{z}_k$ 处求值的 $\\mathbf{F}$ 的雅可比矩阵。\n我们寻求 $\\mathbf{z}_{k+1}$ 使得 $\\mathbf{F}(\\mathbf{z}_{k+1}) = \\mathbf{0}$。将左侧设为零，并定义牛顿步为 $\\mathbf{s}_k = \\mathbf{z}_{k+1} - \\mathbf{z}_k$，我们得到关于步长 $\\mathbf{s}_k$ 的以下线性系统：\n$$J(\\mathbf{z}_k)\\mathbf{s}_k = -\\mathbf{F}(\\mathbf{z}_k)$$\n下一个迭代点则通过 $\\mathbf{z}_{k+1} = \\mathbf{z}_k + \\mathbf{s}_k$ 找到。\n\n**3. 雅可比矩阵推导**\n\n系统 $\\mathbf{F}(\\mathbf{z})$ 的雅可比矩阵 $J(\\mathbf{z})$ 由下式给出：\n$$J(\\mathbf{z}) = \\begin{bmatrix} \\frac{\\partial F_1}{\\partial x} & \\frac{\\partial F_1}{\\partial y} \\\\ \\frac{\\partial F_2}{\\partial x} & \\frac{\\partial F_2}{\\partial y} \\end{bmatrix}$$\n由于 $\\mathbf{F} = \\nabla f$，雅可比矩阵 $J$ 即为 $f$ 的海森矩阵 $H_f$。对于像 $f$ 这样的 $C^2$ 函数，根据关于混合偏导数相等的 Clairaut 定理，其海森矩阵是对称的。各分量为：\n$$\\frac{\\partial F_1}{\\partial x} = \\frac{\\partial^2 f}{\\partial x^2} = 10x^4 - 25.2x^2 + 8$$\n$$\\frac{\\partial F_1}{\\partial y} = \\frac{\\partial^2 f}{\\partial y \\partial x} = 1$$\n$$\\frac{\\partial F_2}{\\partial x} = \\frac{\\partial^2 f}{\\partial x \\partial y} = 1$$\n$$\\frac{\\partial F_2}{\\partial y} = \\frac{\\partial^2 f}{\\partial y^2} = 48y^2 - 8$$\n因此，雅可比矩阵为：\n$$J(\\mathbf{z}) = \\begin{bmatrix} 10x^4 - 25.2x^2 + 8 & 1 \\\\ 1 & 48y^2 - 8 \\end{bmatrix}$$\n\n**4. 通过回溯线搜索实现全局化**\n\n完整的牛顿步 $\\mathbf{s}_k$ 不一定总能保证收敛，特别是当初始猜测远离根时。需要一种全局化策略。我们采用回溯线搜索来寻找一个合适的步长 $\\alpha_k \\in (0,1]$，以确保朝着解有足够的进展。更新规则变为：\n$$\\mathbf{z}_{k+1} = \\mathbf{z}_k + \\alpha_k \\mathbf{s}_k$$\n进展通过一个价值函数来衡量，对于求根问题，该函数通常是残差的L2范数平方：\n$$\\phi(\\mathbf{z}) = \\frac{1}{2}\\|\\mathbf{F}(\\mathbf{z})\\|_2^2 = \\frac{1}{2}\\mathbf{F}(\\mathbf{z})^T\\mathbf{F}(\\mathbf{z})$$\n选择步长 $\\alpha_k$ 以满足 Armijo 充分下降条件：\n$$\\phi(\\mathbf{z}_k + \\alpha_k \\mathbf{s}_k) \\le \\phi(\\mathbf{z}_k) + c \\alpha_k \\nabla \\phi(\\mathbf{z}_k)^T \\mathbf{s}_k$$\n其中 $c \\in (0, 1)$ 是一个小常数（例如，$c=10^{-4}$）。方向导数 $\\nabla \\phi(\\mathbf{z}_k)^T \\mathbf{s}_k$ 使用链式法则计算：$\\nabla \\phi(\\mathbf{z}) = J(\\mathbf{z})^T \\mathbf{F}(\\mathbf{z})$。\n$$\\nabla \\phi(\\mathbf{z}_k)^T \\mathbf{s}_k = \\left(J(\\mathbf{z}_k)^T \\mathbf{F}(\\mathbf{z}_k)\\right)^T \\mathbf{s}_k = \\mathbf{F}(\\mathbf{z}_k)^T J(\\mathbf{z}_k) \\mathbf{s}_k$$\n回溯算法从 $\\alpha=1$ 开始，并重复减小它（例如，$\\alpha \\leftarrow \\tau \\alpha$ 其中 $\\tau=0.5$），直到满足 Armijo 条件。对于标准牛顿步 $\\mathbf{s}_k = -J(\\mathbf{z}_k)^{-1}\\mathbf{F}(\\mathbf{z}_k)$，方向导数简化为 $-\\|\\mathbf{F}(\\mathbf{z}_k)\\|_2^2$，从而保证了 $\\phi$ 的下降方向。\n\n**5. 雅可比矩阵正则化**\n\n如果雅可比矩阵 $J(\\mathbf{z}_k)$ 变得奇异或数值病态，则用于求解 $\\mathbf{s}_k$ 的线性系统将无法可靠地求解。为处理此问题，添加一个对角正则化项 $\\mu\\mathbf{I}$，其中 $\\mu > 0$ 是一个小参数，$\\mathbf{I}$ 是单位矩阵。修改后的系统为：\n$$(J(\\mathbf{z}_k) + \\mu\\mathbf{I})\\mathbf{s}_k = -\\mathbf{F}(\\mathbf{z}_k)$$\n这种技术与 Levenberg-Marquardt 方法相关，可确保矩阵是可逆的。参数 $\\mu$ 是动态调整的：默认情况下设为零。如果在求解线性系统时检测到奇异性，$\\mu$ 将被初始化为一个小的正值（例如，$10^{-8}$），然后乘法性地增加（例如，乘以因子 $10$），直到系统可以被求解。\n\n**6. 终止准则**\n\n当满足以下条件之一时，迭代过程终止：\n1.  函数残差的无穷范数足够小：$\\|\\mathbf{F}(\\mathbf{z}_k)\\|_\\infty \\le 10^{-10}$。\n2.  所取完整步长的无穷范数足够小：$\\|\\alpha_k \\mathbf{s}_k\\|_\\infty \\le 10^{-12}$。\n3.  迭代次数 $k$ 达到最大限制 $100$。\n\n**7. 算法总结**\n\n对于每个初始猜测 $\\mathbf{z}_0$：\n1.  初始化 $k=0$ 和 $\\mathbf{z}=\\mathbf{z}_0$。\n2.  循环，直到 k < 100：\n    a. 计算 $\\mathbf{F}_k = \\mathbf{F}(\\mathbf{z})$ 并检查收敛性：如果 $\\|\\mathbf{F}_k\\|_\\infty \\le 10^{-10}$，则终止。\n    b. 计算雅可比矩阵 $J_k = J(\\mathbf{z})$。\n    c. 求解 $(J_k + \\mu\\mathbf{I})\\mathbf{s}_k = -\\mathbf{F}_k$ 以获得步长 $\\mathbf{s}_k$，自适应地选择 $\\mu \\ge 0$ 以确保系统可解。\n    d. 执行回溯线搜索以找到满足价值函数 $\\phi$ 的 Armijo 条件的步长 $\\alpha_k$。\n    e. 计算更新量：$\\Delta\\mathbf{z}_k = \\alpha_k \\mathbf{s}_k$。\n    f. 更新解：$\\mathbf{z} \\leftarrow \\mathbf{z} + \\Delta\\mathbf{z}_k$。\n    g. 检查收敛性：如果 $\\|\\Delta\\mathbf{z}_k\\|_\\infty \\le 10^{-12}$，则终止。\n3.  终止时，驻点为 $\\mathbf{z}^\\star = \\mathbf{z}$。计算函数值 $f(\\mathbf{z}^\\star)$。\n4.  存储并格式化结果 $(x^\\star, y^\\star, f(x^\\star, y^\\star))$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for the given test cases.\n    \"\"\"\n\n    def f_camel(z):\n        \"\"\"Computes the six-hump camel back function value.\"\"\"\n        x, y = z[0], z[1]\n        term1 = (4 - 2.1 * x**2 + (x**4) / 3) * x**2\n        term2 = x * y\n        term3 = (-4 + 4 * y**2) * y**2\n        return term1 + term2 + term3\n\n    def F_grad(z):\n        \"\"\"Computes the gradient of the six-hump camel back function.\"\"\"\n        x, y = z[0], z[1]\n        df_dx = 2 * x**5 - 8.4 * x**3 + 8 * x + y\n        df_dy = 16 * y**3 - 8 * y + x\n        return np.array([df_dx, df_dy])\n\n    def J_hess(z):\n        \"\"\"Computes the Jacobian of the gradient (Hessian of the function).\"\"\"\n        x, y = z[0], z[1]\n        d2f_dx2 = 10 * x**4 - 25.2 * x**2 + 8\n        d2f_dxdy = 1.0\n        d2f_dy2 = 48 * y**2 - 8\n        return np.array([[d2f_dx2, d2f_dxdy], [d2f_dxdy, d2f_dy2]])\n\n    def find_stationary_point(z0):\n        \"\"\"\n        Finds a stationary point using Newton's method with line search and regularization.\n        \"\"\"\n        z = np.array(z0, dtype=float)\n        \n        # Parameters\n        max_iter = 100\n        tol_F = 1e-10\n        tol_s = 1e-12\n        c1_armijo = 1e-4\n        tau_backtrack = 0.5\n        max_line_search_iter = 20\n\n        for _ in range(max_iter):\n            Fk = F_grad(z)\n\n            # Termination condition 1: residual norm\n            if np.linalg.norm(Fk, np.inf) <= tol_F:\n                break\n\n            Jk = J_hess(z)\n\n            # Solve for Newton step with adaptive regularization\n            mu = 0.0\n            sk = None\n            while True:\n                try:\n                    J_reg = Jk if mu == 0.0 else Jk + mu * np.identity(2)\n                    sk = np.linalg.solve(J_reg, -Fk)\n                    break\n                except np.linalg.LinAlgError:\n                    if mu == 0.0:\n                        mu = 1e-8\n                    else:\n                        mu *= 10\n                    # Failsafe to prevent extreme mu values\n                    if mu > 1e16:\n                        sk = np.zeros_like(z) # Force stop if regularization fails\n                        break\n\n            # Backtracking line search\n            alpha = 1.0\n            phi_k = 0.5 * (Fk @ Fk)\n            # The directional derivative of the merit function phi\n            dir_deriv = Fk @ Jk @ sk\n\n            # If dir_deriv is non-negative, the line search will fail naturally\n            # by shrinking alpha, leading to a small step and termination.\n            for _ in range(max_line_search_iter):\n                z_trial = z + alpha * sk\n                F_trial = F_grad(z_trial)\n                phi_trial = 0.5 * (F_trial @ F_trial)\n\n                if phi_trial <= phi_k + c1_armijo * alpha * dir_deriv:\n                    break\n                \n                alpha *= tau_backtrack\n            else:\n                # If the line search loop completes without a break,\n                # it means a suitable alpha was not found.\n                # In this case, the step size will be effectively zero.\n                alpha = 0.0\n\n            step = alpha * sk\n            z += step\n\n            # Termination condition 2: step norm\n            if np.linalg.norm(step, np.inf) <= tol_s:\n                break\n\n        return z\n\n    # Test cases defined in the problem\n    test_cases = [\n        (0.1, -0.7),\n        (-0.2, 0.6),\n        (0.0, 0.0),\n        (-1.7, 0.8),\n        (1.7, -0.8),\n    ]\n\n    results = []\n    for z0 in test_cases:\n        z_star = find_stationary_point(z0)\n        f_star = f_camel(z_star)\n        \n        # Round to six decimal places for output\n        x_out = round(z_star[0], 6)\n        y_out = round(z_star[1], 6)\n        f_out = round(f_star, 6)\n\n        results.append(f\"[{x_out:.6f},{y_out:.6f},{f_out:.6f}]\")\n\n    # Final print statement in the exact required format with no spaces\n    print(f\"[[{','.join(results)}]]\")\n\nsolve()\n```", "id": "3255464"}]}