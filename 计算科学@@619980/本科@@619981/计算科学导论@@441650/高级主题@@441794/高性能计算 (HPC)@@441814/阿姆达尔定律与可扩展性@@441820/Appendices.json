{"hands_on_practices": [{"introduction": "理论的价值在于其解释和预测现实世界现象的能力。本练习将阿姆达尔定律应用于一个实际场景：分析并行计算的性能数据。通过使用少数几个处理器核心数量下的运行时间测量值 [@problem_id:3097164]，您将学习如何揭示程序中固有的、限制其扩展能力的串行部分，并理解为什么增加处理器数量所带来的性能提升会逐渐减弱。这个过程不仅能加深您对理论的理解，还模拟了计算科学家在评估和优化代码时所做的基本性能分析工作。", "problem": "并行蒙特卡洛模拟通过聚合独立的随机试验来估计一个物理量。假设工作负载固定，在 $N$ 个相同处理核心上的总执行时间可以划分为一个与核心数无关的串行部分和一个理想并行部分，后者的执行时间与 $N$ 成反比。在同一集群上对相同输入大小进行的测量，分别得到了使用 $N=1$、$N=4$ 和 $N=16$ 个核心时的挂钟时间 $T_1$、$T_4$ 和 $T_{16}$：$T_1 = 80 \\text{ s}$，$T_4 = 26 \\text{ s}$，$T_{16} = 12.5 \\text{ s}$。假设在 $N=16$ 之前，缓存效应、输入/输出开销和竞争可以忽略不计，并且串行和并行部分的分解在不同的 $N$ 值下保持不变。仅使用基本定义，即工作负载时间的固定一部分是串行的，其余部分在理想条件下是完全可并行的，请根据这些测量数据推断出工作负载的串行分数 $1-p$。然后，基于这些定义，从第一性原理出发，解释为什么在相同工作负载下将核心数增加到 $N=64$ 时，观察到的执行时间 $T_{64}$ 不再有显著改善。\n\n将串行分数 $1-p$ 的最终答案表示为保留四位有效数字的小数。不要使用百分号。", "solution": "问题陈述已经过验证，被认为是科学合理的、定义明确且客观的。它提供了一组一致的数据，用于分析并行计算性能的标准模型。\n\n该问题要求我们对在 $N$ 个相同处理核心上运行固定工作负载的总执行时间 $T_N$ 进行建模。根据问题的第一性原理，该时间是一个与核心数无关的串行部分和一个完全可并行化部分的和。\n\n设 $T_s$ 为工作负载串行部分的执行时间。该时间是恒定的，与核心数 $N$ 无关。\n设 $T_{p,1}$ 为工作负载可并行化部分在单个核心（$N=1$）上的执行时间。\n因此，在单个核心上的总执行时间为 $T_1 = T_s + T_{p,1}$。\n\n对于 $N$ 个核心，串行部分仍然需要时间 $T_s$。可并行化部分由于“理想可并行”，其执行时间减少了 $N$ 倍。在 $N$ 个核心上，并行部分所需的时间为 $T_{p,N} = \\frac{T_{p,1}}{N}$。\n\n在 $N$ 个核心上的总执行时间 $T_N$ 由以下总和给出：\n$$T_N = T_s + T_{p,N} = T_s + \\frac{T_{p,1}}{N}$$\n\n问题要求的是“串行分数”，我们用 $s$ 表示。这是单核总执行时间中用于串行部分的时间比例。\n$$s = \\frac{T_s}{T_1}$$\n类似地，并行分数 $p$ 是在单个核心上用于并行部分的时间比例。\n$$p = \\frac{T_{p,1}}{T_1}$$\n由 $T_1 = T_s + T_{p,1}$ 可知，$s + p = 1$，或 $p = 1 - s$。问题要求的是 $1-p$ 的值，它等于 $s$。\n\n我们可以用 $T_1$ 和 $s$ 来表示 $T_s$ 和 $T_{p,1}$：\n$T_s = s \\cdot T_1$\n$T_{p,1} = (1-s) \\cdot T_1$\n\n将这些代入 $T_N$ 的方程，得到该系统的控制方程，通常称为 Amdahl 定律 (Amdahl's Law)：\n$$T_N = s \\cdot T_1 + \\frac{(1-s) \\cdot T_1}{N}$$\n\n我们有以下给定的数据：\n$T_1 = 80 \\text{ s}$\n$T_4 = 26 \\text{ s}$\n$T_{16} = 12.5 \\text{ s}$\n\n我们可以使用 $N=4$ 的数据来求解未知的串行分数 $s$。\n代入 $N=4$，$T_4 = 26$ 和 $T_1 = 80$：\n$$26 = s \\cdot 80 + \\frac{(1-s) \\cdot 80}{4}$$\n$$26 = 80s + 20(1-s)$$\n$$26 = 80s + 20 - 20s$$\n$$26 - 20 = 60s$$\n$$6 = 60s$$\n$$s = \\frac{6}{60} = 0.1$$\n\n为了验证模型和数据的一致性，我们可以使用 $N=16$ 的数据进行相同的计算：\n代入 $N=16$，$T_{16} = 12.5$ 和 $T_1 = 80$：\n$$12.5 = s \\cdot 80 + \\frac{(1-s) \\cdot 80}{16}$$\n$$12.5 = 80s + 5(1-s)$$\n$$12.5 = 80s + 5 - 5s$$\n$$12.5 - 5 = 75s$$\n$$7.5 = 75s$$\n$$s = \\frac{7.5}{75} = 0.1$$\n两次测量都得出了相同的串行分数 $s=0.1$，这证实了模型对于给定数据的有效性。串行分数 $1-p$ 即为 $s = 0.1$。问题要求将其表示为四位有效数字，即 $0.1000$。\n\n任务的第二部分是解释为什么当 $N=64$ 时，执行时间不再有显著改善。这是工作负载串行部分的直接结果。使用我们推导出的值 $s=0.1$ 和给定的 $T_1=80 \\text{ s}$，我们可以确定串行部分的绝对时间：\n$$T_s = s \\cdot T_1 = 0.1 \\cdot 80 \\text{ s} = 8 \\text{ s}$$\n控制方程为 $T_N = T_s + \\frac{T_{p,1}}{N}$。随着核心数 $N$ 的增加，并行项 $\\frac{T_{p,1}}{N}$ 减小并趋近于零。然而，总执行时间 $T_N$ 永远不会小于恒定的串行时间 $T_s$。\n$$\\lim_{N \\to \\infty} T_N = \\lim_{N \\to \\infty} \\left(T_s + \\frac{T_{p,1}}{N}\\right) = T_s + 0 = 8 \\text{ s}$$\n这意味着无论使用多少核心，执行时间都有一个 $8 \\text{ s}$ 的下限。这个下限是性能收益递减的根本原因。\n\n让我们通过计算 $N=64$ 的预测时间并比较时间缩减来量化这一点。首先，我们求 $T_{p,1}$：\n$$T_{p,1} = (1-s) \\cdot T_1 = (1 - 0.1) \\cdot 80 \\text{ s} = 0.9 \\cdot 80 \\text{ s} = 72 \\text{ s}$$\n因此，我们的特定模型是 $T_N = 8 + \\frac{72}{N}$。\n我们来预测 $T_{64}$：\n$$T_{64} = 8 + \\frac{72}{64} = 8 + \\frac{9}{8} = 8 + 1.125 = 9.125 \\text{ s}$$\n\n现在考虑通过连续四倍增加核心数所节省的时间：\n-   从 $N=1$ 到 $N=4$ 节省的时间：$T_1 - T_4 = 80 - 26 = 54 \\text{ s}$。\n-   从 $N=4$ 到 $N=16$ 节省的时间：$T_4 - T_{16} = 26 - 12.5 = 13.5 \\text{ s}$。\n-   从 $N=16$ 到 $N=64$ 节省的时间：$T_{16} - T_{64} = 12.5 - 9.125 = 3.375 \\text{ s}$。\n\n每次将计算资源增加四倍，执行时间的减少量都越来越小。在 $N=16$ 时，执行时间已经是 $12.5 \\text{ s}$，距离理论最小值 $8 \\text{ s}$ 仅有 $4.5 \\text{ s}$ 的差距。当增加到 $N=64$ 时，我们只是在并行化总时间中剩余的这一小部分，因此仅带来了 $3.375 \\text{ s}$ 的微小改善。由于总时间 $T_N$ 渐近地趋向于串行时间 $T_s$，增加更多核心的收益会迅速递减。这种性能饱和是具有非零串行分数问题的典型特征。", "answer": "$$\n\\boxed{0.1000}\n$$", "id": "3097164"}, {"introduction": "在高性能计算领域，关于“百倍加速”之类的性能声明屡见不鲜。然而，这些声明是否总是站得住脚？本练习 [@problem_id:3097177] 将训练您使用阿姆达尔定律作为一种“现实检验”工具。您需要从一个给定的性能提升目标出发，反向推导出要实现该目标所必需的并行化程度，并根据经验数据判断其合理性。这项技能对于培养科学批判精神和评估技术可行性至关重要。", "problem": "一个研究团队声称，一个数据处理内核在高性能计算 (HPC) 集群的 $N = 128$ 个相同处理器核心上运行时，实现了 $100$ 倍的加速比。请你运用阿姆达尔定律背后的逻辑来评估这一说法，且不使用任何预先推导出的简化公式。\n\n从以下基本定义出发：\n- 设单核执行时间为 $T_{1}$，它分解为一个严格串行（不可并行）的部分 $T_{\\mathrm{s}}$ 和一个可并行的部分 $T_{\\mathrm{p}}$，因此 $T_{1} = T_{\\mathrm{s}} + T_{\\mathrm{p}}$。\n- 在 $N$ 个相同核心上，于理想化并行执行（无开销且完美负载均衡）的情况下，只有可并行的部分被加速，得到 $N$ 核执行时间 $T_{N} = T_{\\mathrm{s}} + \\frac{T_{\\mathrm{p}}}{N}$。\n- 加速比定义为 $S(N) = \\frac{T_{1}}{T_{N}}$。\n- 定义并行比例 $p$ 为 $p = \\frac{T_{\\mathrm{p}}}{T_{1}}$，串行比例 $s$ 为 $s = \\frac{T_{\\mathrm{s}}}{T_{1}}$，其中 $s = 1 - p$。\n\n仅使用这些定义以及 $S(128) = 100$ 的说法，推导出在上述理想化模型下要使该说法成立所需的并行比例 $p$ 的值。然后，根据先前对可比较内核的测量结果（这些结果一致地报告串行比例在 $s \\in [0.01, 0.03]$ 的范围内），讨论所声称的加速比的合理性。\n\n将 $p$ 的最终值表示为最简分数。不要四舍五入。$p$ 无需单位。", "solution": "该问题被评估为有效。它在科学上基于阿姆达尔定律的原理，问题陈述清晰，信息充分，可以推导出唯一解，并且使用客观、正式的语言进行阐述。该问题是应用计算科学原理的一个标准练习。\n\n任务是确定实现所声称的加速比所需的并行比例 $p$，然后评估该说法的合理性。推导必须从提供的基本定义开始。\n\n给定的定义是：\n- 单核执行时间：$T_{1} = T_{\\mathrm{s}} + T_{\\mathrm{p}}$\n- $N$ 核执行时间：$T_{N} = T_{\\mathrm{s}} + \\frac{T_{\\mathrm{p}}}{N}$\n- 加速比：$S(N) = \\frac{T_{1}}{T_{N}}$\n- 串行比例：$s = \\frac{T_{\\mathrm{s}}}{T_{1}}$\n- 并行比例：$p = \\frac{T_{\\mathrm{p}}}{T_{1}}$，其中 $p + s = 1$。\n\n我们首先用并行比例 $p$ 和核心数 $N$ 来表示加速比 $S(N)$。首先，我们处理 $N$ 核执行时间 $T_N$ 的表达式：\n$$T_{N} = T_{\\mathrm{s}} + \\frac{T_{\\mathrm{p}}}{N}$$\n使用定义 $T_{\\mathrm{s}} = s T_1$ 和 $T_{\\mathrm{p}} = p T_1$，我们将它们代入 $T_N$ 的方程中：\n$$T_{N} = s T_1 + \\frac{p T_1}{N} = T_1 \\left(s + \\frac{p}{N}\\right)$$\n现在，将这个 $T_N$ 的表达式代入加速比 $S(N)$ 的定义中：\n$$S(N) = \\frac{T_{1}}{T_{N}} = \\frac{T_{1}}{T_1 \\left(s + \\frac{p}{N}\\right)} = \\frac{1}{s + \\frac{p}{N}}$$\n使用关系式 $s = 1 - p$，我们得到标准形式的阿姆达尔定律，完全用 $p$ 和 $N$ 表示：\n$$S(N) = \\frac{1}{(1-p) + \\frac{p}{N}}$$\n问题指出，在使用 $N = 128$ 个核心时，实现了 $S(N) = 100$ 的加速比。我们将这些值代入推导出的方程中，以求解所需的并行比例 $p$：\n$$100 = \\frac{1}{(1-p) + \\frac{p}{128}}$$\n为了解出 $p$，我们对两边取倒数：\n$$(1-p) + \\frac{p}{128} = \\frac{1}{100} = 0.01$$\n现在，我们重新排列各项以分离出 $p$：\n$$1 - p + \\frac{p}{128} = 0.01$$\n$$1 - 0.01 = p - \\frac{p}{128}$$\n$$0.99 = p \\left(1 - \\frac{1}{128}\\right)$$\n$$0.99 = p \\left(\\frac{128}{128} - \\frac{1}{128}\\right)$$\n$$0.99 = p \\left(\\frac{127}{128}\\right)$$\n解出 $p$：\n$$p = 0.99 \\times \\frac{128}{127} = \\frac{99}{100} \\times \\frac{128}{127} = \\frac{99 \\times 128}{100 \\times 127}$$\n我们计算分子和分母中的乘积：\n$$p = \\frac{12672}{12700}$$\n为了将其表示为最简分数，我们找到最大公约数。两个数都可以被 $4$ 整除：\n$$12672 \\div 4 = 3168$$\n$$12700 \\div 4 = 3175$$\n所以，分数变为：\n$$p = \\frac{3168}{3175}$$\n分母的质因数分解是 $3175 = 5^2 \\times 127$。分子 $3168$ 不能被 $5$ 或 $127$ 整除。因此，该分数已是最简形式。这便是在理想化模型下要验证该说法成立所需的并行比例的值。\n\n接下来，我们评估这个结果的合理性。问题指出，对于可比较的内核，测得的串行比例 $s$ 一致地在 $s \\in [0.01, 0.03]$ 的范围内。我们必须计算与我们推导出的并行比例 $p$ 相对应的串行比例 $s$：\n$$s = 1 - p = 1 - \\frac{3168}{3175} = \\frac{3175 - 3168}{3175} = \\frac{7}{3175}$$\n为了将此值与给定范围进行比较，我们将其转换为小数：\n$$s = \\frac{7}{3175} \\approx 0.0022047...$$\n计算得出的所需串行比例为 $s \\approx 0.0022$。这个值远小于经验观察范围的下限 $0.01$。所需的串行比例不到最乐观的典型测量值（$0.0022$ 对比 $0.01$）的四分之一。\n\n因此，关于在 128 个核心上实现 100 倍加速比的说法是极不可信的。要实现如此高的加速比，该数据处理内核需要几乎完全可并行化，其串行部分要远小于在可比较应用中通常发现的水平。该分析基于一个忽略了现实世界开销（如处理器间通信、内存争用和线程管理）的理想化模型，已经表明这一说法是值得怀疑的。在真实系统中，这些开销会进一步降低可实现的加速比，使得该说法更加不可能成真。", "answer": "$$\\boxed{\\frac{3168}{3175}}$$", "id": "3097177"}, {"introduction": "当资源有限时，我们应将优化工作的重点放在哪里？是减少那部分无法并行的串行代码，还是改进那部分可以被多个处理器分担的并行代码？本练习 [@problem_id:3097220] 探讨了这一核心的软件工程决策。通过分析两种不同的优化策略，您将发现最佳选择并非一成不变，而是取决于您所拥有的处理器数量 $N$。理解这种权衡关系是利用阿姆达尔定律进行战略性性能规划的关键。", "problem": "一个科学计算应用程序由一个严格串行部分和一个完全可并行化部分组成。在单个处理器上，将总运行时间归一化为 $1$，并设可并行化工作的比例为 $p$，严格串行部分的比例为 $1-p$。假设负载均衡理想且无开销，因此在 $N$ 个相同的处理器上，只有可并行化的工作可以在 $N$ 个处理器之间平均分配，而串行工作无法加速。\n\n一位算法设计者提出了两种不同的算法改进，每种改进都改变了工作量，但没有改变硬件：\n- 串行优化变体：严格串行工作量减少了因子 $k$（使其速度提高 $k$ 倍），而可并行化工作量没有变化。\n- 并行优化变体：可并行化工作量减少了因子 $r$（使其速度提高 $r$ 倍），而串行工作量没有变化。\n\n设 $p = 0.88$，$k = 2.5$，$r = 1.6$。\n\n任务：\n1. 从加速比 $S(N)$ 定义为单处理器运行时间与 $N$ 处理器运行时间之比，以及工作分解为串行和可并行化部分出发，推导基准运行时间 $T_{0}(N)$ 和加速比 $S_{0}(N)$、串行优化运行时间 $T_{S}(N)$ 和加速比 $S_{S}(N)$，以及并行优化运行时间 $T_{P}(N)$ 和加速比 $S_{P}(N)$ 的表达式，所有表达式都应是关于 $N$、$p$、$k$ 和 $r$ 的函数。\n2. 数值计算 $S_{0}(8)$、$S_{S}(8)$ 和 $S_{P}(8)$，并说明在 $N=8$ 时，两种算法改进（串行优化或并行优化）中哪一种产生了更大的加速比。将这三个加速比四舍五入到四位有效数字后报告。\n3. 确定处理器数量 $N^{*}$（不一定是整数），在该数量下，两种改进变体实现相同的加速比，即 $S_{S}(N^{*}) = S_{P}(N^{*})$。提供四舍五入到四位有效数字的 $N^{*}$。将 $N^{*}$ 作为你的最终答案。", "solution": "首先验证问题，以确保其科学基础扎实、问题定义明确且客观。\n\n### 第1步：提取已知条件\n- 单处理器总运行时间归一化为 $1$。\n- $p$：可并行化工作的比例。\n- $1-p$：严格串行工作的比例。\n- $N$：相同处理器的数量。\n- 可并行化工作在 $N$ 个处理器之间平均分配。\n- 串行工作不因多处理器而加速。\n- 串行优化变体：串行工作量减少因子 $k$。\n- 并行优化变体：可并行化工作量减少因子 $r$。\n- $p = 0.88$\n- $k = 2.5$\n- $r = 1.6$\n\n### 第2步：使用提取的已知条件进行验证\n- **科学基础扎实：** 该问题是阿姆达尔定律（Amdahl's law）的直接应用，这是并行计算中分析可扩展性的一个基本概念。模型假设（理想的负载均衡、无开销）是入门分析中的标准简化。\n- **问题定义明确：** 所有必要的变量（$p$、$k$、$r$）都已定义并赋值。任务规定清晰，可以导出一个唯一、稳定且有意义的解。\n- **客观性：** 问题使用精确的量化语言陈述，没有歧义或主观论断。\n\n### 第3步：结论与行动\n该问题是有效的。将提供完整的解决方案。\n\n### 解题推导\n\n解题过程将依次解决问题陈述中列出的三个任务。\n\n**任务1：推导运行时间和加速比的表达式。**\n\n基准应用程序的总单处理器运行时间归一化为 $1$。该运行时间由持续时间为 $1-p$ 的串行部分和持续时间为 $p$ 的可并行化部分组成。因此，单处理器运行时间为 $T(1) = (1-p) + p = 1$。\n\n当使用 $N$ 个处理器时，串行部分的持续时间保持不变，而可并行化部分的持续时间减少为原来的 $1/N$。加速比 $S(N)$ 定义为原始单处理器运行时间 $T_{0}(1)=1$ 与在 $N$ 个处理器上的运行时间 $T(N)$ 之比。这个定义为比较不同变体提供了一个一致的基础，因为它衡量的是相对于原始、未优化的单处理器执行的总改进。\n\n**基准变体（下标为0）：**\n在 $N$ 个处理器上的运行时间 $T_{0}(N)$ 是串行时间与缩放后的并行时间之和：\n$$T_{0}(N) = (1-p) + \\frac{p}{N}$$\n加速比 $S_{0}(N)$ 是原始单处理器时间 $T_{0}(1)=1$ 与这个新运行时间之比：\n$$S_{0}(N) = \\frac{T_{0}(1)}{T_{0}(N)} = \\frac{1}{(1-p) + \\frac{p}{N}}$$\n\n**串行优化变体（下标为S）：**\n在此变体中，原始为 $1-p$ 的串行工作量减少了因子 $k$。串行部分的新持续时间为 $\\frac{1-p}{k}$。可并行化工作量 $p$ 保持不变。\n在 $N$ 个处理器上的运行时间 $T_{S}(N)$ 是新的串行时间与缩放后的并行时间之和：\n$$T_{S}(N) = \\frac{1-p}{k} + \\frac{p}{N}$$\n相应的加速比 $S_{S}(N)$ 是相对于原始单处理器时间来衡量的：\n$$S_{S}(N) = \\frac{T_{0}(1)}{T_{S}(N)} = \\frac{1}{\\frac{1-p}{k} + \\frac{p}{N}}$$\n\n**并行优化变体（下标为P）：**\n在此变体中，原始为 $p$ 的可并行化工作量减少了因子 $r$。新的可并行化工作量为 $\\frac{p}{r}$。串行工作量 $1-p$ 保持不变。\n在 $N$ 个处理器上的运行时间 $T_{P}(N)$ 是串行时间与新的、缩放后的并行时间之和：\n$$T_{P}(N) = (1-p) + \\frac{p/r}{N} = (1-p) + \\frac{p}{rN}$$\n相应的加速比 $S_{P}(N)$ 是相对于原始单处理器时间来衡量的：\n$$S_{P}(N) = \\frac{T_{0}(1)}{T_{P}(N)} = \\frac{1}{(1-p) + \\frac{p}{rN}}$$\n\n**任务2：计算 $N=8$ 时的加速比。**\n\n给定 $p = 0.88$，$k = 2.5$，$r = 1.6$，我们计算 $N=8$ 时的加速比。串行部分比例为 $1-p = 1 - 0.88 = 0.12$。\n\n基准加速比 $S_{0}(8)$：\n$$S_{0}(8) = \\frac{1}{(1-0.88) + \\frac{0.88}{8}} = \\frac{1}{0.12 + 0.11} = \\frac{1}{0.23} \\approx 4.347826...$$\n四舍五入到四位有效数字，$S_{0}(8) \\approx 4.348$。\n\n串行优化加速比 $S_{S}(8)$：\n$$S_{S}(8) = \\frac{1}{\\frac{1-0.88}{2.5} + \\frac{0.88}{8}} = \\frac{1}{\\frac{0.12}{2.5} + 0.11} = \\frac{1}{0.048 + 0.11} = \\frac{1}{0.158} \\approx 6.329113...$$\n四舍五入到四位有效数字，$S_{S}(8) \\approx 6.329$。\n\n并行优化加速比 $S_{P}(8)$：\n$$S_{P}(8) = \\frac{1}{(1-0.88) + \\frac{0.88}{1.6 \\times 8}} = \\frac{1}{0.12 + \\frac{0.88}{12.8}} = \\frac{1}{0.12 + 0.06875} = \\frac{1}{0.18875} \\approx 5.298013...$$\n四舍五入到四位有效数字，$S_{P}(8) \\approx 5.298$。\n\n在 $N=8$ 时比较两种改进：\n$S_{S}(8) \\approx 6.329$ 且 $S_{P}(8) \\approx 5.298$。\n因为 $6.329 > 5.298$，所以在 $N=8$ 时，串行优化变体产生了更大的加速比。\n\n**任务3：确定使加速比相等的处理器数量 $N^{*}$。**\n\n我们需要找到使 $S_{S}(N^{*}) = S_{P}(N^{*})$ 成立的 $N = N^{*}$ 值。\n$$\\frac{1}{\\frac{1-p}{k} + \\frac{p}{N^{*}}} = \\frac{1}{(1-p) + \\frac{p}{rN^{*}}}$$\n要使表达式相等，它们的分母必须相等：\n$$\\frac{1-p}{k} + \\frac{p}{N^{*}} = (1-p) + \\frac{p}{rN^{*}}$$\n为了解出 $N^{*}$，我们首先将包含 $N^{*}$ 的项移到一边，常数项移到另一边。\n$$\\frac{p}{N^{*}} - \\frac{p}{rN^{*}} = (1-p) - \\frac{1-p}{k}$$\n在等式两边提取公因式：\n$$\\frac{p}{N^{*}}\\left(1 - \\frac{1}{r}\\right) = (1-p)\\left(1 - \\frac{1}{k}\\right)$$\n简化括号中的项：\n$$\\frac{p}{N^{*}}\\left(\\frac{r-1}{r}\\right) = (1-p)\\left(\\frac{k-1}{k}\\right)$$\n现在，我们可以分离出 $N^{*}$：\n$$N^{*} = \\frac{p}{1-p} \\cdot \\frac{\\left(\\frac{r-1}{r}\\right)}{\\left(\\frac{k-1}{k}\\right)} = \\frac{p}{1-p} \\cdot \\frac{k(r-1)}{r(k-1)}$$\n代入给定值 $p=0.88$，$k=2.5$ 和 $r=1.6$：\n$$N^{*} = \\frac{0.88}{1-0.88} \\cdot \\frac{2.5(1.6-1)}{1.6(2.5-1)}$$\n$$N^{*} = \\frac{0.88}{0.12} \\cdot \\frac{2.5(0.6)}{1.6(1.5)}$$\n$$N^{*} = \\frac{0.88}{0.12} \\cdot \\frac{1.5}{2.4}$$\n$$N^{*} = \\frac{0.88 \\times 1.5}{0.12 \\times 2.4} = \\frac{1.32}{0.288}$$\n$$N^{*} = 4.58333...$$\n四舍五入到四位有效数字，我们得到 $N^{*} \\approx 4.583$。这是两种优化策略产生相同总加速比时的处理器数量。当 $N  N^{*}$ 时，并行优化变体更优；当 $N > N^{*}$ 时，串行优化变体更优。我们从任务2得到的结果（当 $N=8  4.583$ 时，$S_S(8)S_P(8)$）与此发现一致。", "answer": "$$\\boxed{4.583}$$", "id": "3097220"}]}