{"hands_on_practices": [{"introduction": "掌握任何数据结构的第一步都是学会如何读取它。本练习将重点解码压缩稀疏行（CSR）格式——最常见的稀疏矩阵表示之一。通过从CSR的三个核心数组（值、列索引和行指针）手动重建原始的稠密矩阵，你将对这种高效的存储方式如何协同工作建立起一个具体而直观的理解[@problem_id:2204554]。", "problem": "在许多科学和工程应用中，矩阵通常是“稀疏”的，这意味着其大多数元素为零。存储所有这些零元素的效率很低。压缩稀疏行（CSR）格式是一种常用的存储稀疏矩阵的方法，它使用三个一维数组。\n\n考虑一个大小为 $4 \\times 4$ 的稀疏矩阵 $A$。在 CSR 格式中（使用 0-基索引），该矩阵由以下三个数组表示：\n1.  一个数组 `V`，包含 $A$ 的非零元素，按从左到右、逐行读取的顺序排列。\n2.  一个数组 `C`，包含 `V` 中每个对应元素的列索引。\n3.  一个数组 `R`（行指针），大小为 $m+1$（其中 $m$ 是行数），其第 $i$ 个元素指示了第 $i$ 行数据在 `V` 和 `C` 中的起始索引。`R` 的最后一个元素是非零元素的总数。\n\n对于我们的 $4 \\times 4$ 矩阵 $A$，这三个数组如下：\n- `V = [5.1, -1.2, 2.0, -3.5, 4.0, 9.8]`\n- `C = [1, 3, 0, 2, 3, 0]`\n- `R = [0, 2, 3, 5, 6]`\n\n重建原始的稠密 $4 \\times 4$ 矩阵 $A$。请将您的答案表示为一个 $4 \\times 4$ 的矩阵。", "solution": "我们使用 0-基索引的 CSR 定义。对于每个行索引 $i \\in \\{0,1,2,3\\}$，第 $i$ 行的非零元素存储在 `V` 和 `C` 数组中索引从 $R[i]$ 到 $R[i+1]-1$ 的片段中，其中列索引为 $C[j]$，值为 $V[j]$。最后一个元素 $R[4]=6$ 等于非零元素的总数，这与 $\\lvert V \\rvert=6$ 相匹配。\n\n第 $0$ 行：索引 $j=R[0]\\ldots R[1]-1=0\\ldots 1$。\n- $j=0$：$C[0]=1$，$V[0]=5.1$ 得到 $A_{0,1}=5.1$。\n- $j=1$：$C[1]=3$，$V[1]=-1.2$ 得到 $A_{0,3}=-1.2$。\n因此第 $0$ 行为 $[0,\\,5.1,\\,0,\\,-1.2]$。\n\n第 $1$ 行：索引 $j=R[1]\\ldots R[2]-1=2\\ldots 2$。\n- $j=2$：$C[2]=0$，$V[2]=2.0$ 得到 $A_{1,0}=2.0$。\n因此第 $1$ 行为 $[2.0,\\,0,\\,0,\\,0]$。\n\n第 $2$ 行：索引 $j=R[2]\\ldots R[3]-1=3\\ldots 4$。\n- $j=3$：$C[3]=2$，$V[3]=-3.5$ 得到 $A_{2,2}=-3.5$。\n- $j=4$：$C[4]=3$，$V[4]=4.0$ 得到 $A_{2,3}=4.0$。\n因此第 $2$ 行为 $[0,\\,0,\\,-3.5,\\,4.0]$。\n\n第 $3$ 行：索引 $j=R[3]\\ldots R[4]-1=5\\ldots 5$。\n- $j=5$：$C[5]=0$，$V[5]=9.8$ 得到 $A_{3,0}=9.8$。\n因此第 $3$ 行为 $[9.8,\\,0,\\,0,\\,0]$。\n\n因此，重建的稠密矩阵 $A$ 为\n$$\n\\begin{pmatrix}\n0  & 5.1 & 0 & -1.2 \\\\\n2.0 & 0 & 0 & 0 \\\\\n0 & 0 & -3.5 & 4.0 \\\\\n9.8 & 0 & 0 & 0\n\\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}0  & 5.1 & 0 & -1.2 \\\\ 2.0 & 0 & 0 & 0 \\\\ 0 & 0 & -3.5 & 4.0 \\\\ 9.8 & 0 & 0 & 0\\end{pmatrix}}$$", "id": "2204554"}, {"introduction": "在学会了如何读取CSR格式后，下一步自然是理解它是如何被构建的。本练习将引导你完成一个基本任务：将简单直观的坐标（COO）格式转换为结构更优化的CSR格式。在实际应用中，非零元素往往以无序列表的形式生成，因此掌握这种转换是处理稀疏数据的关键一步[@problem_id:2204580]。", "problem": "在科学计算中，稀疏矩阵（主要由零填充的矩阵）通常以专门的格式存储，以节省内存和计算时间。其中一种格式是坐标（Coordinate, COO）格式，它使用三个数组来表示一个矩阵：`values`（包含非零元素）、`row_indices`（每个非零元素的行索引）和 `col_indices`（每个非零元素的列索引）。\n\n另一种常见且对于矩阵运算更高效的格式是压缩稀疏行（Compressed Sparse Row, CSR）格式。它也使用三个数组：\n1.  `values`：一个包含非零值的数组，按行排序，然后在每行内按列排序。\n2.  `col_indices`：一个包含与 `values` 数组中元素相对应的列索引的数组。\n3.  `row_ptr`：一个大小为 `(行数 + 1)` 的数组。值 `row_ptr[i]` 表示第 `i` 行的元素在 `values` 数组中开始的索引。`row_ptr` 的最后一个元素是非零元素的总数。\n\n考虑一个代表小型网络的 5x5 稀疏矩阵，初始以 COO 格式给出。非零元素以任意顺序列出：\n\n`values = [3, 8, 1, 5, 9, 2, 7]`\n`row_indices = [1, 0, 4, 0, 2, 2, 4]`\n`col_indices = [2, 1, 3, 4, 3, 0, 1]`\n\n将此矩阵表示从 COO 格式转换为 CSR 格式。以下哪个选项正确表示了转换后的 `values`、`col_indices` 和 `row_ptr` 数组？\n\nA.\n`values = [8, 5, 3, 2, 9, 7, 1]`\n`col_indices = [1, 4, 2, 0, 3, 1, 3]`\n`row_ptr = [0, 2, 1, 2, 0, 2]`\n\nB.\n`values = [3, 8, 1, 5, 9, 2, 7]`\n`col_indices = [2, 1, 3, 4, 3, 0, 1]`\n`row_ptr = [0, 2, 3, 5, 5, 7]`\n\nC.\n`values = [8, 5, 3, 2, 9, 7, 1]`\n`col_indices = [1, 4, 2, 0, 3, 1, 3]`\n`row_ptr = [1, 3, 4, 6, 6, 8]`\n\nD.\n`values = [8, 5, 3, 2, 9, 7, 1]`\n`col_indices = [1, 4, 2, 0, 3, 1, 3]`\n`row_ptr = [0, 2, 3, 5, 5, 7]`", "solution": "我们通过三个数组得到了一个 COO 格式的稀疏矩阵。将每个非零项的 COO 三元组定义为 $(r_{k}, c_{k}, v_{k})$。根据数据：\n$$\n\\begin{aligned}\n\\text{values} &= [3,8,1,5,9,2,7],\\\\\n\\text{row\\_indices} &= [1,0,4,0,2,2,4],\\\\\n\\text{col\\_indices} &= [2,1,3,4,3,0,1].\n\\end{aligned}\n$$\n这产生了一个无序的三元组列表：\n$$\n(1,2;3),\\ (0,1;8),\\ (4,3;1),\\ (0,4;5),\\ (2,3;9),\\ (2,0;2),\\ (4,1;7).\n$$\n\n要转换为 CSR 格式，我们首先按行索引对三元组进行分组，然后在每组内按列索引进行升序排序：\n- 第 $0$ 行：条目 $(0,1;8)$ 和 $(0,4;5)$。按列索引升序排列后为 $(0,1;8), (0,4;5)$。\n- 第 $1$ 行：条目 $(1,2;3)$。\n- 第 $2$ 行：条目 $(2,3;9)$ 和 $(2,0;2)$。按列索引升序排列后为 $(2,0;2), (2,3;9)$。\n- 第 $3$ 行：没有条目。\n- 第 $4$ 行：条目 $(4,3;1)$ 和 $(4,1;7)$。按列索引升序排列后为 $(4,1;7), (4,3;1)$。\n\n将这些按行排序后的条目连接起来，得到 CSR 格式的 `values` 和 `col_indices` 数组：\n$$\n\\text{values} = [8,\\,5,\\,3,\\,2,\\,9,\\,7,\\,1],\n$$\n$$\n\\text{col\\_indices} = [1,\\,4,\\,2,\\,0,\\,3,\\,1,\\,3].\n$$\n\n接下来，计算长度为 $5+1=6$ 的行指针数组 $\\text{row\\_ptr}$。首先计算每行的非零元素数量：\n- 第 $0$ 行：$2$ 个\n- 第 $1$ 行：$1$ 个\n- 第 $2$ 行：$2$ 个\n- 第 $3$ 行：$0$ 个\n- 第 $4$ 行：$2$ 个\n\n然后从 $0$ 开始计算这些数量的累积和，以获得行指针：\n$$\n\\text{row\\_ptr} = [0,\\,0+2,\\,2+1,\\,3+2,\\,5+0,\\,5+2] = [0,\\,2,\\,3,\\,5,\\,5,\\,7].\n$$\n\n与选项比较，这与选项 D 完全匹配。", "answer": "$$\\boxed{D}$$", "id": "2204580"}, {"introduction": "扎实掌握了CSR格式后，我们现在可以进入更高级的分析层面：为特定任务选择合适的存储格式。这个问题挑战你为一个特定结构的“箭头”矩阵，比较CSR与另一种对角线（DIA）格式的内存效率。这个练习旨在阐明一个核心思想：没有万能的“最佳”格式，最优选择永远取决于矩阵自身的稀疏模式[@problem_id:2204576]。", "problem": "在科学计算中，稀疏矩阵（即主要由零填充的矩阵）通常以特殊格式存储以节省内存。考虑一个 $N \\times N$ 的“箭头”矩阵，该矩阵定义为非零元素仅位于主对角线、第一行和第一列的矩阵。\n\n我们想要比较该矩阵的两种常用存储格式的内存效率：压缩稀疏行 (CSR) 和对角线 (DIA)。\n\n假设非零值存储为双精度浮点数（每个8字节），并且所有行/列索引和指针都存储为整数（每个4字节）。\n\n每种格式的内存需求定义如下：\n\n1.  **压缩稀疏行 (CSR)**：此格式使用三个数组：\n    *   `values`：一个大小为 `nnz` 的数组，用于存储非零值，其中 `nnz` 是非零元素的总数。\n    *   `col_indices`：一个大小为 `nnz` 的数组，用于存储每个非零元素的列索引。\n    *   `row_pointers`：一个大小为 $N+1$ 的数组，用于存储 `values` 数组中标记每行开始位置的索引。\n\n2.  **对角线 (DIA)**：此格式针对非零元素沿少数几条对角线分布的矩阵进行了优化。它使用两个数组：\n    *   `offsets`：一个大小为 `d` 的数组，用于存储每条对角线相对于主对角线的偏移量，其中 `d` 是非零对角线的数量。\n    *   `values`：一个稠密的 $N \\times d$ 数组。该数组的每一列存储一条非零对角线的元素。如果某条对角线的元素少于 $N$ 个，则 `values` 数组中相应的列将用零填充。\n\n确定最小的整数维度 $N \\ge 2$，使得对于存储箭头矩阵，CSR格式所需的总内存严格小于DIA格式所需的总内存。", "solution": "一个 $N \\times N$ 的箭头矩阵在主对角线、第一行和第一列上有非零项。计算唯一的非零元素数量：\n- 主对角线贡献 $N$ 个元素。\n- 第一行贡献 $N-1$ 个额外元素（不包括重叠的 $(0,0)$ 元素）。\n- 第一列贡献 $N-1$ 个额外元素（不包括重叠的 $(0,0)$ 元素）。\n因此，非零元素的总数为\n$$\n\\text{nnz} = N + (N - 1) + (N - 1) = 3N - 2.\n$$\n\n对于CSR格式：\n- `values` 数组存储 $\\text{nnz}$ 个双精度浮点数：$8(3N - 2)$ 字节。\n- `col_indices` 数组存储 $\\text{nnz}$ 个整数：$4(3N - 2)$ 字节。\n- `row_pointers` 数组存储 $N+1$ 个整数：$4(N+1)$ 字节。\n因此，CSR格式的总内存为\n$$\nM_{\\text{CSR}} = 8(3N - 2) + 4(3N - 2) + 4(N+1) = 12(3N - 2) + 4(N+1) = 40N - 20.\n$$\n\n对于DIA格式：\n- 非零对角线的数量 $d$ 等于第一行、第一列和主对角线中所有非零位置的唯一对角线偏移量（`col - row`）的数量。这些偏移量是 $\\{-(N-1), \\dots, -1, 0, 1, \\dots, N-1\\}$。因此，\n$$\nd = 2N - 1.\n$$\n- `offsets` 数组存储 $d$ 个整数：$4(2N - 1)$ 字节。\n- `values` 数组是稠密的 $N \\times d$ 双精度浮点数数组：$8N(2N - 1)$ 字节。\n因此，DIA格式的总内存为\n$$\nM_{\\text{DIA}} = 4(2N - 1) + 8N(2N - 1) = (8N + 4)(2N - 1) = 16N^{2} - 4.\n$$\n\n我们寻找最小的整数 $N \\geq 2$ 使得 $M_{\\text{CSR}}  M_{\\text{DIA}}$：\n$$\n40N - 20  16N^{2} - 4\n$$\n$$\n\\Longleftrightarrow\\; 16N^{2} - 40N + 16 > 0\n$$\n$$\n\\Longleftrightarrow\\; 2N^2 - 5N + 2 > 0\n$$\n$$\n\\Longleftrightarrow\\; (2N - 1)(N - 2) > 0.\n$$\n该不等式对于 $N > 2$ 成立。当 $N = 2$ 时，不等式变为 $0 > 0$，这是不成立的（两种格式使用相同的内存）。因此，使得CSR格式使用的内存严格小于DIA格式的最小整数 $N$ 是 $N = 3$。", "answer": "$$\\boxed{3}$$", "id": "2204576"}]}