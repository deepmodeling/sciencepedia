{"hands_on_practices": [{"introduction": "Lax-Wendroff 格式虽然具有二阶精度，但这种高精度是以引入数值色散为代价的。本练习将让你直接观察并量化这些在急剧梯度附近出现的非物理振荡（吉布斯现象），从而深入理解高阶线性格式的固有局限性。通过计算过冲、下冲和总变差，你将获得评估数值格式性能的实践经验。", "problem": "考虑一维线性平流方程 $u_t + a\\,u_x = 0$，其定义在周期性域 $x \\in [0,1)$ 上，具有恒定的平流速度 $a > 0$。设 $a = 1$。初始条件为不连续的阶跃函数\n$$\nu(x,0) = \\begin{cases}\n1,  x \\ge 0.5,\\\\\n0,  x  0.5.\n\\end{cases}\n$$\n使用 $N$ 个均匀的单元中心点 $x_j = (j + 0.5)\\,\\Delta x$ 对空间进行离散化，其中 $j \\in \\{0,1,\\dots,N-1\\}$，$\\Delta x = 1/N$，并施加周期性。使用由以下更新公式定义的 Lax–Wendroff 有限差分格式来演化离散解\n$$\nu_j^{n+1} = u_j^n - \\tfrac{1}{2}\\sigma\\left(u_{j+1}^n - u_{j-1}^n\\right) + \\tfrac{1}{2}\\sigma^2\\left(u_{j+1}^n - 2u_j^n + u_{j-1}^n\\right),\n$$\n其中索引采用周期性处理，Courant–Friedrichs–Lewy (CFL) 数 $\\sigma$ 为 $\\sigma = a\\,\\Delta t / \\Delta x$，$\\Delta t$ 是时间步长。对于下述每种情况，使用指定的 $N$、$\\sigma$ 和终止时间 $t_{\\mathrm{end}}$ 来构造 $\\Delta t = \\sigma\\,\\Delta x/a$，并进行演化，步数 $n$ 为满足 $t_n = n\\,\\Delta t \\le t_{\\mathrm{end}}$ 的最大整数。将此演化时间记为 $t_n$。\n\n为了量化平流输运的间断附近的类吉布斯振荡，将时间 $t_n$ 的理论间断位置定义为 $x_d(t_n) = \\mathrm{mod}(0.5 + a\\,t_n,\\,1)$。在 $x_d(t_n)$ 的中心位置提取一个半宽为 $w_x = 0.1$ 的对称空间窗口，即包含所有与 $x_d(t_n)$ 的最短周期距离不超过 $w_x$ 的网格点 $x_j$。在此窗口内，计算时间 $t_n$ 时离散解的以下三个量：\n- 过冲幅值 $O = \\max\\{0,\\,\\max_{\\text{window}} u - 1\\}$。\n- 下冲幅值 $U = \\max\\{0,\\,0 - \\min_{\\text{window}} u\\}$。\n- 全变分比 $R = \\mathrm{TV}(u(\\cdot,t_n)) / \\mathrm{TV}(u(\\cdot,0))$，其中离散全变分定义为 $\\mathrm{TV}(v) = \\sum_{j=0}^{N-1} |v_{j+1} - v_j|$，索引采用周期性处理。\n\n您的程序必须对以下五个测试案例中的每一个评估 $(O,U,R)$：\n1. $N=200$, $\\sigma=0.5$, $t_{\\mathrm{end}}=0.2$。\n2. $N=200$, $\\sigma=0.9$, $t_{\\mathrm{end}}=0.2$。\n3. $N=50$, $\\sigma=0.5$, $t_{\\mathrm{end}}=0.2$。\n4. $N=200$, $\\sigma=0.2$, $t_{\\mathrm{end}}=0.2$。\n5. $N=800$, $\\sigma=0.5$, $t_{\\mathrm{end}}=0.2$。\n\n所有量都是无量纲的。您的程序应生成单行输出，其中包含一个以逗号分隔的列表之列表形式的结果，第 $k$ 个内部列表为测试案例 $k$ 的 $[O_k,U_k,R_k]$，每个浮点数都四舍五入到恰好六位小数。例如，要求的格式是\n$$\n[\\,[O_1,U_1,R_1],\\,[O_2,U_2,R_2],\\,\\dots,\\,[O_5,U_5,R_5]\\,].\n$$", "solution": "该问题要求使用 Lax-Wendroff 有限差分格式对一维线性平流方程进行数值求解。主要目标是量化将这种二阶、非单调的格式应用于不连续初始剖面时所产生的数值伪影，特别是类吉布斯振荡。\n\n控制偏微分方程是线性平流方程：\n$$\n\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0\n$$\n其中 $u(x, t)$ 是守恒量，$x \\in [0, 1)$是具有周期性边界条件的空间坐标，$t$ 是时间，$a$ 是恒定的平流速度，给定为 $a=1$。该方程的解析解是初始剖面的简单平移，$u(x,t) = u_0(x-at)$，其中 $u_0(x) = u(x,0)$。对于给定的阶跃函数初始条件：\n$$\nu(x,0) = \\begin{cases}\n1,  x \\ge 0.5 \\\\\n0,  x  0.5\n\\end{cases}\n$$\n最初位于 $x=0.5$ 的间断点以速度 $a=1$ 平流，其在时间 $t$ 的理论位置是 $x_d(t) = \\mathrm{mod}(0.5 + at, 1)$。\n\n计算域被离散为 $N$ 个均匀的单元中心网格点 $x_j = (j + 0.5)\\Delta x$，其中 $j \\in \\{0, 1, \\dots, N-1\\}$，空间步长为 $\\Delta x = 1/N$。周期性意味着索引按模 $N$ 处理，因此 $x_{j+N} = x_j$。\n\n时间演化由显式的 Lax-Wendroff 格式控制，该格式在空间和时间上都具有二阶精度。解 $u_j^n \\approx u(x_j, t_n)$ 的离散更新公式如下：\n$$\nu_j^{n+1} = u_j^n - \\frac{1}{2}\\sigma(u_{j+1}^n - u_{j-1}^n) + \\frac{1}{2}\\sigma^2(u_{j+1}^n - 2u_j^n + u_{j-1}^n)\n$$\n此处，$\\sigma = a\\Delta t / \\Delta x$ 是 Courant-Friedrichs-Lewy (CFL) 数，它关联了时间步长 $\\Delta t$、空间步长 $\\Delta x$ 和平流速度 $a$。该格式在 $|\\sigma| \\le 1$ 时是稳定的。问题指定 $\\Delta t = \\sigma \\Delta x / a$。模拟运行的步数 $n_{\\text{steps}}$ 是使得总演化时间 $t_n = n_{\\text{steps}} \\Delta t$ 不超过给定终止时间 $t_{\\mathrm{end}}$ 的最大整数。\n\nLax-Wendroff 格式通过引入一个与空间二阶导数成正比的项来实现二阶精度，该项抵消了一阶迎风格式的数值扩散。然而，这也引入了数值色散，在陡峭梯度或间断附近引起非物理振荡（过冲和下冲），这是一种与吉布斯效应相关的现象。\n\n为了量化这些振荡，我们分析最终时间 $t_n$ 的数值解 $u_j^{n}$。在平流输运的间断的理论位置 $x_d(t_n)$ 周围定义一个半宽为 $w_x = 0.1$ 的空间窗口。该窗口包含所有满足与 $x_d(t_n)$ 的最短周期距离（由 $\\min(|x_j - x_d(t_n)|, 1 - |x_j - x_d(t_n)|)$ 给出）不大于 $w_x$ 的网格点 $x_j$。在此窗口内，我们计算：\n1.  过冲幅值 $O = \\max\\{0, \\max_{\\text{window}} u - 1\\}$。这衡量了窗口内解超过初始最大值 $1$ 的最大值。\n2.  下冲幅值 $U = \\max\\{0, 0 - \\min_{\\text{window}} u\\}$。这衡量了窗口内解低于初始最小值 $0$ 的最大值。\n\n此外，我们通过计算时间 $t_n$ 的全变分 (TV) 与初始全变分之比来评估振荡的增长。网格函数 $v$ 的离散全变分定义为 $\\mathrm{TV}(v) = \\sum_{j=0}^{N-1} |v_{j+1} - v_j|$，其中索引是周期性的，$v_N = v_0$。初始条件是周期域上的一个阶跃函数，它有两个跳跃（从 $0$ 到 $1$ 和从 $1$ 回到 $0$），因此其理论全变分为 $\\mathrm{TV}(u(\\cdot,0)) = 2$。该比率为 $R = \\mathrm{TV}(u(\\cdot,t_n)) / \\mathrm{TV}(u(\\cdot,0))$。对于像 Lax-Wendroff 这样非全变分递减 (TVD) 的格式，该比率预计将大于 $1$，表明产生了新的极值，即振荡。\n\n每个测试用例的算法流程如下：\n1.  初始化参数：$N, \\sigma, t_{\\mathrm{end}}$，其中 $a=1$，$w_x=0.1$。\n2.  计算模拟参数：$\\Delta x = 1/N$，$\\Delta t = \\sigma \\Delta x / a$，以及 $n_{\\text{steps}} = \\lfloor t_{\\mathrm{end}} / \\Delta t \\rfloor$。最终时间为 $t_n = n_{\\text{steps}} \\Delta t$。\n3.  设置网格 $x_j$ 和初始条件 $u^0$，其中如果 $x_j \\ge 0.5$ 则 $u_j^0 = 1$，否则 $u_j^0 = 0$。\n4.  计算初始全变分 $\\mathrm{TV}(u^0)$。\n5.  迭代应用 Lax-Wendroff 更新公式 $n_{\\text{steps}}$ 次，以获得最终的数值解 $u^{n_{\\text{steps}}}$。为提高效率，使用向量化的数组操作，并采用循环移位来处理周期性边界条件。\n6.  确定理论间断位置 $x_d(t_n) = (0.5 + a t_n) \\pmod 1$。\n7.  识别出位于 $x_d(t_n)$ 周围半宽为 $w_x$ 的分析窗口内的网格点。\n8.  计算此窗口内解的最大值和最小值，以求得过冲 $O$ 和下冲 $U$。\n9.  计算最终解的全变分 $\\mathrm{TV}(u^{n_{\\text{steps}}})$ 和比率 $R$。\n10. 存储该案例计算出的三元组 $(O, U, R)$。\n对所有五个指定的测试案例重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D linear advection equation using the Lax-Wendroff scheme for\n    multiple test cases and quantifies numerical oscillations.\n    \"\"\"\n    test_cases = [\n        (200, 0.5, 0.2),\n        (200, 0.9, 0.2),\n        (50, 0.5, 0.2),\n        (200, 0.2, 0.2),\n        (800, 0.5, 0.2),\n    ]\n\n    results = []\n    a = 1.0  # Advection speed\n    w_x = 0.1  # Window half-width for analysis\n\n    for N, sigma, t_end in test_cases:\n        # 1. Setup simulation parameters\n        dx = 1.0 / N\n        dt = sigma * dx / a\n        if dt == 0:\n            num_steps = 0\n        else:\n            num_steps = int(t_end // dt)\n        t_n = num_steps * dt\n\n        # 2. Initialize grid and solution\n        x = (np.arange(N) + 0.5) * dx\n        u = np.where(x >= 0.5, 1.0, 0.0)\n\n        # 3. Calculate initial total variation\n        # TV(v) = sum(|v_{j+1} - v_j|) with periodic indexing\n        # np.roll(u, -1) gives u_{j+1} at index j\n        tv_initial = np.sum(np.abs(np.roll(u, -1) - u))\n        if tv_initial == 0: tv_initial = 1.0 # Avoid division by zero, though not expected here.\n\n        # 4. Time evolution loop (Lax-Wendroff)\n        for _ in range(num_steps):\n            u_jp1 = np.roll(u, -1)  # u_{j+1}\n            u_jm1 = np.roll(u, 1)   # u_{j-1}\n            \n            # Central difference term (first derivative)\n            term1 = -0.5 * sigma * (u_jp1 - u_jm1)\n            \n            # Central difference term (second derivative)\n            term2 = 0.5 * sigma**2 * (u_jp1 - 2.0 * u + u_jm1)\n            \n            u = u + term1 + term2\n        \n        u_final = u\n\n        # 5. Analyze the final solution\n        # Theoretical discontinuity location\n        x_d = (0.5 + a * t_n) % 1.0\n\n        # Identify the analysis window\n        dist = np.abs(x - x_d)\n        periodic_dist = np.minimum(dist, 1.0 - dist)\n        window_mask = periodic_dist = w_x\n        \n        u_window = u_final[window_mask]\n\n        # Handle case where window might be empty, though unlikely with given params\n        if u_window.size > 0:\n            max_u_window = np.max(u_window)\n            min_u_window = np.min(u_window)\n        else:\n            max_u_window = 1.0\n            min_u_window = 0.0\n\n        # Calculate overshoot and undershoot\n        overshoot = max(0.0, max_u_window - 1.0)\n        undershoot = max(0.0, 0.0 - min_u_window)\n\n        # Calculate total variation ratio\n        tv_final = np.sum(np.abs(np.roll(u_final, -1) - u_final))\n        tv_ratio = tv_final / tv_initial\n        \n        results.append([overshoot, undershoot, tv_ratio])\n\n    # 6. Format and print the final output\n    formatted_results = []\n    for O, U, R in results:\n        formatted_results.append(f\"[{O:.6f},{U:.6f},{R:.6f}]\")\n    \n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2393549"}, {"introduction": "上一个练习 [@problem_id:2393549] 中观察到的数值振荡不仅仅是计算上的瑕疵，它可能导致严重的非物理结果。本练习将探讨一个关键问题：Lax-Wendroff 格式能否保证一个初始为正的物理量（如粒子密度）在计算过程中始终为正。通过这个实践，你将理解为何“保正性”是许多物理仿真中的一个至关重要的性质。", "problem": "考虑一个非负标量数密度 $n(x,t)$ 在长度为 $L$ 的周期性域上的一维线性平流，其速度为恒定的 $a>0$，由以下守恒律控制：\n$$\n\\partial_t n(x,t) + a\\,\\partial_x n(x,t) = 0,\\quad x\\in[0,L],\\ t\\ge 0,\n$$\n该问题具有周期性边界条件和均匀的空间离散化。精确解保持非负性：若对所有 $x$ 都有 $n(x,0)\\ge 0$，则对所有 $t\\ge 0$ 都有 $n(x,t)\\ge 0$。您需要在一个均匀网格上，使用在时间和空间上均为显式、二阶精度的方法，在周期性网格上计算一个全离散数值解。该网格包含 $N$ 个网格点，间距为 $\\Delta x = L/N$，节点为 $x_j = j\\,\\Delta x$，其中 $j=0,1,\\dots,N-1$。使用由 Courant–Friedrichs–Lewy (CFL) 数 $c = a\\,\\Delta t/\\Delta x$ 定义的均匀时间步长 $\\Delta t$，其中 $c\\in(0,1]$，并将解推进至不超过目标时间 $T$ 的尽可能多的整数时间步 $K=\\lfloor T/\\Delta t\\rfloor$。\n\n您的程序必须为每个指定的测试用例，从给定的非负初始数据开始演化离散解，并检测在演化到时间 $T$ 的过程中，数值解是否在任何网格点上达到了小于一个微小负阈值的值。为避免浮点舍入误差导致的假阳性，当且仅当在某个时间步 $m\\in\\{0,1,\\dots,K\\}$ 时 $\\min_j n_j^m  -\\varepsilon$ 发生时，才声明出现了非物理的负值，其中容差 $\\varepsilon = 10^{-12}$，$n_j^m$ 表示在网格节点 $x_j$ 和时间层 $t^m=m\\,\\Delta t$ 的离散解。\n\n使用无量纲单位（不需要物理单位）。不涉及角度。以下所有参数值均为无量纲。在每个测试中，域在 $[0,L]$ 上都是周期性的。\n\n测试套件（每项列出 $(L,a,N,c,T,\\text{初始剖面})$）：\n- 情况 A（光滑剖面，“理想路径”）：$(L,a,N,c,T) = (1.0,\\,1.0,\\,400,\\,0.5,\\,1.0)$。初始条件：$n(x,0) = \\exp\\!\\left(-\\left(\\dfrac{x-0.3}{0.05}\\right)^2\\right)$，对于 $x\\in[0,L)$。\n- 情况 B（单不连续对，接近 Courant 边界）：$(L,a,N,c,T) = (1.0,\\,1.0,\\,400,\\,0.9,\\,0.2)$。初始条件：$n(x,0) = 1$，对于 $x\\in[0.25,0.55]$，在 $[0,L)$ 上其他地方 $n(x,0)=0$。\n- 情况 C（多重不连续，较粗网格）：$(L,a,N,c,T) = (1.0,\\,1.0,\\,200,\\,0.5,\\,0.2)$。初始条件：$n(x,0) = 1$，在并集 $[0.10,0.20]\\cup[0.60,0.80]$ 上，在 $[0,L)$ 上其他地方 $n(x,0)=0$。\n\n您的程序必须为每种情况计算一个布尔指示符，指明在从 $t=0$ 到 $t=K\\,\\Delta t$ 的时间步进过程中，是否在任何网格点上观察到了任何非物理的负值（由阈值 $\\varepsilon$ 定义）。最终输出必须是一行，按顺序包含情况 A、B 和 C 的三个结果，格式为方括号内由逗号分隔的整数列表，如果该情况检测到非物理负值，则对应条目为 1，否则为 0。例如，要求的输出格式为 $[x_1,x_2,x_3]$，其中 $x_i\\in\\{0,1\\}$。", "solution": "所提出的问题是计算物理学中一个适定的练习。它要求实现一类特定的数值方法来求解一维线性平流方程，并测试数值解的一个基本性质：非负性的保持。\n\n控制方程是标量密度 $n(x,t)$ 在具有恒定正波速 $a$ 下的线性平流方程：\n$$\n\\partial_t n + a\\,\\partial_x n = 0\n$$\n该问题要求一个在时间和空间上均为显式且二阶精度的数值格式。对于此方程，满足这些性质的典型方法是 Lax-Wendroff 格式。我们将推导此格式并用它来解决问题。\n\n我们从解 $n(x, t+\\Delta t)$ 在时间上围绕 $t$ 的泰勒级数展开开始：\n$$\nn(x, t+\\Delta t) = n(x,t) + \\Delta t \\frac{\\partial n}{\\partial t} + \\frac{(\\Delta t)^2}{2} \\frac{\\partial^2 n}{\\partial t^2} + O((\\Delta t)^3)\n$$\n为了在时间上达到二阶精度，我们必须使用控制偏微分方程来近似时间导数。一阶时间导数由偏微分方程直接给出：\n$$\n\\frac{\\partial n}{\\partial t} = -a \\frac{\\partial n}{\\partial x}\n$$\n二阶时间导数通过对偏微分方程关于时间求导并代回得到：\n$$\n\\frac{\\partial^2 n}{\\partial t^2} = \\frac{\\partial}{\\partial t}\\left(-a \\frac{\\partial n}{\\partial x}\\right) = -a \\frac{\\partial}{\\partial x}\\left(\\frac{\\partial n}{\\partial t}\\right) = -a \\frac{\\partial}{\\partial x}\\left(-a \\frac{\\partial n}{\\partial x}\\right) = a^2 \\frac{\\partial^2 n}{\\partial x^2}\n$$\n将这些表达式代回泰勒展开，得到一个半离散方程，其在 $\\Delta t$ 上具有二阶精度：\n$$\nn(x, t+\\Delta t) = n(x,t) - a \\Delta t \\frac{\\partial n}{\\partial x} + \\frac{(a \\Delta t)^2}{2} \\frac{\\partial^2 n}{\\partial x^2} + O((\\Delta t)^3)\n$$\n为了创建一个全离散格式，我们将空间域离散化为网格点 $x_j = j\\Delta x$，并用 $n_j^m \\approx n(x_j, t^m)$ 来近似在这些点上于时间 $t^m=m\\Delta t$ 的解。我们用二阶精度的中心有限差分替换空间导数：\n$$\n\\left.\\frac{\\partial n}{\\partial x}\\right|_{x_j} \\approx \\frac{n_{j+1}^m - n_{j-1}^m}{2\\Delta x}\n$$\n$$\n\\left.\\frac{\\partial^2 n}{\\partial x^2}\\right|_{x_j} \\approx \\frac{n_{j+1}^m - 2n_j^m + n_{j-1}^m}{(\\Delta x)^2}\n$$\n将这些有限差分代入半离散方程，得到 $n_j^{m+1}$ 的显式更新规则：\n$$\nn_j^{m+1} = n_j^m - a \\Delta t \\left( \\frac{n_{j+1}^m - n_{j-1}^m}{2\\Delta x} \\right) + \\frac{(a \\Delta t)^2}{2} \\left( \\frac{n_{j+1}^m - 2n_j^m + n_{j-1}^m}{(\\Delta x)^2} \\right)\n$$\n引入无量纲的 Courant–Friedrichs–Lewy (CFL) 数 $c = a\\Delta t/\\Delta x$，我们可以简化表达式：\n$$\nn_j^{m+1} = n_j^m - \\frac{c}{2} (n_{j+1}^m - n_{j-1}^m) + \\frac{c^2}{2} (n_{j+1}^m - 2n_j^m + n_{j-1}^m)\n$$\n按当前时间层 $m$ 的空间索引对各项进行分组：\n$$\nn_j^{m+1} = \\left( \\frac{c^2}{2} - \\frac{c}{2} \\right) n_{j+1}^m + (1 - c^2) n_j^m + \\left( \\frac{c^2}{2} + \\frac{c}{2} \\right) n_{j-1}^m\n$$\n这就是 Lax-Wendroff 格式。为了使该格式具有保正性（即，如果所有 $n_k^m \\ge 0$，则保证 $n_j^{m+1} \\ge 0$），模板中的所有系数都必须是非负的。我们分析在稳定范围 $c \\in (0,1]$ 内的系数：\n- $n_{j-1}^m$ 的系数：$\\frac{c(c+1)}{2}$。对于 $c \\ge 0$，这是非负的。\n- $n_j^m$ 的系数：$1 - c^2$。对于 $c \\le 1$，这是非负的。\n- $n_{j+1}^m$ 的系数：$\\frac{c(c-1)}{2}$。对于 $c \\in [0,1]$，这是非正的。\n\n对于任何 $c \\in (0,1)$，$n_{j+1}^m$ 的系数都是负的。这意味着 Lax-Wendroff 格式通常不具有保正性。它是一个非单调格式，会在解的陡峭梯度或不连续性周围引入伪振荡（下冲和过冲）。这是 Godunov 定理的一种表现，该定理指出，对于守恒律，任何精度高于一阶的线性数值格式都不能保持单调性。因此，我们预计当初始条件包含不连续性时（如情况 B 和 C），会观察到负值。对于像情况 A 中的高斯分布这样的光滑初始条件，任何振荡都应该小得多，并且可能不会低于指定的负阈值 $\\varepsilon = 10^{-12}$。\n\n解决该问题的算法如下：\n1. 对每个测试用例，定义参数 $L, a, N, c, T$。\n2. 计算网格间距 $\\Delta x = L/N$、时间步长 $\\Delta t = c \\Delta x / a$ 以及总时间步数 $K = \\lfloor T/\\Delta t \\rfloor$。\n3. 创建一个均匀空间网格 $x_j = j\\Delta x$，其中 $j=0, \\dots, N-1$。\n4. 根据该情况指定的初始条件初始化离散解数组 $n^0$。\n5. 设置一个标志 `negative_detected = 0`。\n6. 从时间步 $m=0$ 迭代到 $K-1$：\n   a. 使用 Lax-Wendroff 公式计算下一个时间步的解 $n^{m+1}$。通过循环处理网格索引（例如，$n_{-1}^m \\equiv n_{N-1}^m$ 和 $n_N^m \\equiv n_0^m$）来实施周期性边界条件。\n   b. 计算出新数组 $n^{m+1}$ 后，找到其最小值 $\\min_j n_j^{m+1}$。\n   c. 如果此最小值小于 $-\\varepsilon = -10^{-12}$，则设置 `negative_detected = 1` 并终止该情况的时间步进。\n   d. 为下一次迭代更新解数组。\n7. 记录该情况的 `negative_detected` 的最终值。\n8. 处理完所有情况后，将结果报告为这些标志的列表。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D linear advection equation using the Lax-Wendroff scheme\n    and detects the occurrence of unphysical negative values.\n    \"\"\"\n\n    # Define the tolerance for detecting negative values.\n    epsilon = 1.0e-12\n\n    def run_simulation(L, a, N, c, T, initial_profile_func):\n        \"\"\"\n        Runs a single simulation case.\n\n        Returns:\n            int: 1 if a negative value below the threshold is detected, 0 otherwise.\n        \"\"\"\n        # Grid and time step parameters\n        if a == 0:\n            dt = float('inf')\n        else:\n            dx = L / N\n            dt = c * dx / a\n        \n        if dt == 0 or np.isinf(dt):\n             num_steps = 0\n        else:\n            num_steps = int(T // dt)\n\n        # Spatial grid (uniform and periodic)\n        # x corresponds to nodes x_j = j*dx for j=0, ..., N-1\n        x = np.linspace(0, L, N, endpoint=False)\n\n        # Initialize the solution array n from the initial condition\n        n = initial_profile_func(x)\n\n        # Lax-Wendroff coefficients\n        # n_j^{m+1} = c_j-1 * n_{j-1}^m + c_j * n_j^m + c_j+1 * n_{j+1}^m\n        # Note: np.roll(n, 1) corresponds to n_{j-1}\n        #       np.roll(n, -1) corresponds to n_{j+1}\n        c_j_minus_1 = c * (c + 1.0) / 2.0\n        c_j = 1.0 - c**2\n        c_j_plus_1 = c * (c - 1.0) / 2.0\n        \n        # Check initial state (t=0)\n        if np.min(n)  -epsilon:\n            return 1\n\n        # Time-stepping loop\n        for _ in range(num_steps):\n            # Apply the Lax-Wendroff update rule\n            # np.roll handles periodic boundary conditions efficiently\n            n_new = (c_j_plus_1 * np.roll(n, -1) +\n                     c_j * n +\n                     c_j_minus_1 * np.roll(n, 1))\n            \n            n = n_new\n            \n            # Check for unphysical negative values\n            if np.min(n)  -epsilon:\n                return 1\n\n        return 0\n\n    # Define test cases based on the problem statement\n    test_cases = [\n        # Case A: Smooth Gaussian profile\n        {\n            \"L\": 1.0, \"a\": 1.0, \"N\": 400, \"c\": 0.5, \"T\": 1.0,\n            \"initial_profile_func\": lambda x: np.exp(-((x - 0.3) / 0.05)**2)\n        },\n        # Case B: Single discontinuity pair (square pulse)\n        {\n            \"L\": 1.0, \"a\": 1.0, \"N\": 400, \"c\": 0.9, \"T\": 0.2,\n            \"initial_profile_func\": lambda x: np.where((x >= 0.25)  (x = 0.55), 1.0, 0.0)\n        },\n        # Case C: Multiple discontinuities, coarser grid\n        {\n            \"L\": 1.0, \"a\": 1.0, \"N\": 200, \"c\": 0.5, \"T\": 0.2,\n            \"initial_profile_func\": lambda x: np.where(\n                ((x >= 0.10)  (x = 0.20)) | ((x >= 0.60)  (x = 0.80)), 1.0, 0.0\n            )\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = run_simulation(\n            case[\"L\"], case[\"a\"], case[\"N\"], case[\"c\"], case[\"T\"], case[\"initial_profile_func\"]\n        )\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2407736"}, {"introduction": "既然我们已经认识到 Lax-Wendroff 格式的振荡问题及其物理后果 [@problem_id:2393549] [@problem_id:2407736]，一个自然而然的想法就是如何去修复它。本练习将指导你构建一个混合格式，它结合了 Lax-Wendroff 在光滑区域的高精度和一阶迎风格式在间断附近的稳定性。你将学习如何使用“激波探测器”来动态切换两种格式，这是现代计算方法中一种非常实用且强大的技术。", "problem": "你需要设计并实现一个混合有限体积求解器，用于求解标量线性平流方程。该求解器在光滑区域使用 Lax-Wendroff 格式，并在由局部梯度传感器检测到的激波（或强梯度）附近切换到一阶迎风格式。你的实现必须是一个完整的、可运行的程序，能够为下述测试套件生成指定的输出。\n\n数学模型为一维标量线性平流方程\n$$\n\\frac{\\partial u}{\\partial t} + a \\frac{\\partial u}{\\partial x} = 0,\n$$\n该方程定义在周期性域 $$[0,1)$$ 上，具有恒定的平流速度 $$a \\in \\mathbb{R}$$。守恒量为 $$u(x,t)$$。问题在于推导、实现并测试一个混合守恒更新法则，该法则能够在光滑区域达到二阶精度，并在间断附近保持鲁棒性。\n\n你的推导必须从以下基本点出发：\n- 守恒律形式 $$\\frac{d}{dt}\\int_{x_{j-1/2}}^{x_{j+1/2}} u(x,t)\\,dx = -\\left(F_{j+1/2}(t)-F_{j-1/2}(t)\\right),$$ 其中 $$F$$ 是一个相容的数值通量。\n- 一个均匀网格，其单元中心为 $$x_j = j\\,\\Delta x$$（其中 $$j \\in \\{0,1,\\dots,N-1\\}$$），采用周期性索引，时间步长为 $$t^n = n\\,\\Delta t$$（其中 $$n \\in \\mathbb{N}$$）。\n- 一个库朗-弗里德里希-路维（CFL）数 $$C = a\\,\\Delta t/\\Delta x$$，在此设置下，为保证 Lax-Wendroff 格式的稳定性，需满足 $$|C| \\le 1$$。\n\n你必须从第一性原理出发，不使用任何预先给定的目标公式，推导出线性平流方程的守恒 Lax-Wendroff 数值通量和与 $$a$$ 的符号相容的一阶迎风数值通量。你还必须基于局部梯度传感器，在每个单元界面上定义一个布尔切换规则。该传感器必须是无量纲、平移不变的量\n$$\nS_j = \\frac{\\left|u_{j+1} - 2u_j + u_{j-1}\\right|}{\\left|u_{j+1}\\right| + 2\\left|u_j\\right| + \\left|u_{j-1}\\right| + \\varepsilon},\n$$\n其中 $$\\varepsilon = 10^{-12}$$ 仅用于避免除以零。如果任一相邻单元满足 $$S_j > \\tau$$ 或 $$S_{j+1} > \\tau$$（其中 $$\\tau > 0$$ 为指定阈值），则界面 $$x_{j+1/2}$$ 被标记为非光滑。在光滑区域（未被标记的界面），你必须使用你推导的 Lax-Wendroff 通量；在非光滑区域，你必须使用你推导的一阶迎风通量。更新必须采用守恒形式\n$$\nu_j^{n+1} = u_j^n - \\frac{\\Delta t}{\\Delta x}\\left(F_{j+1/2}^n - F_{j-1/2}^n\\right),\n$$\n并采用周期性边界条件。\n\n为进行验证，定义以下精确解（在 $$[0,1)$$ 上进行周期性环绕）：\n- 中心为 $$x_0$$、宽度为 $$\\sigma$$ 的光滑高斯函数：\n$$\nu(x,0) = \\exp\\!\\left(-\\left(\\frac{x-x_0}{\\sigma}\\right)^2\\right), \\quad u(x,t) = u\\big((x - a t)\\ \\mathrm{mod}\\ 1, 0\\big).\n$$\n- 左边界为 $$x_\\ell$$、右边界为 $$x_r$$ 的不连续方波脉冲（帽形函数），高度为 $$1$$，其他地方为 $$0$$：\n$$\nu(x,0) = \n\\begin{cases}\n1,  x \\in [x_\\ell,x_r) \\ (\\mathrm{mod}\\ 1),\\\\\n0,  \\text{otherwise},\n\\end{cases}\n\\quad u(x,t) = u\\big((x - a t)\\ \\mathrm{mod}\\ 1, 0\\big).\n$$\n- 波数为 $$k$$ 的光滑正弦函数：\n$$\nu(x,0) = \\sin(2\\pi k x), \\quad u(x,t) = \\sin\\!\\big(2\\pi k \\big((x - a t)\\ \\mathrm{mod}\\ 1\\big)\\big).\n$$\n\n你的程序必须：\n- 按照所述实现混合格式，采用周期性边界条件，并根据目标 CFL 数 $$C_{\\mathrm{target}}$$ 选择时间步长，具体方法是设置 $$\\Delta t = T/n_{\\mathrm{steps}}$$，其中 $$n_{\\mathrm{steps}} = \\lceil T / (C_{\\mathrm{target}}\\,\\Delta x/|a|) \\rceil$$，从而得到实际 CFL 数 $$C = |a|\\,\\Delta t/\\Delta x \\le C_{\\mathrm{target}}$$。\n- 对于光滑情况，报告由下式定义的离散均方根误差：\n$$\nE_2 = \\sqrt{\\frac{1}{N}\\sum_{j=0}^{N-1} \\left(u_j^{\\mathrm{num}} - u_j^{\\mathrm{exact}}\\right)^2 }.\n$$\n- 对于不连续的方波脉冲，报告超出物理上允许的区间 $$[0,1]$$ 的过冲幅度：\n$$\nE_{\\mathrm{over}} = \\max\\left(\\max_j(u_j^{\\mathrm{num}} - 1), \\max_j(-u_j^{\\mathrm{num}}), 0\\right).\n$$\n\n测试套件。使用以下参数集，旨在测试光滑输运、间断附近的行为以及接近 CFL 稳定性极限的边界条件：\n- 情况 A（光滑高斯函数，理想路径）：$$N = 400$$, $$a = 1$$, $$C_{\\mathrm{target}} = 0.8$$, $$T = 0.5$$, $$\\tau = 0.05$$, $$x_0 = 0.3$$, $$\\sigma = 0.05$$。输出 $$E_2$$，格式为浮点数。\n- 情况 B（不连续方波脉冲，激波传感器的有效性）：$$N = 400$$, $$a = 1$$, $$C_{\\mathrm{target}} = 0.8$$, $$T = 0.5$$, $$\\tau = 0.05$$, $$x_\\ell = 0.2$$, $$x_r = 0.4$$。输出 $$E_{\\mathrm{over}}$$，格式为浮点数。\n- 情况 C（光滑正弦函数，接近 CFL 边界）：$$N = 200$$, $$a = 1$$, $$C_{\\mathrm{target}} = 0.99$$, $$T = 1.0$$, $$\\tau = 0.05$$, $$k = 1$$。输出 $$E_2$$，格式为浮点数。\n\n最终输出格式。你的程序应生成单行输出，其中包含按情况 A、B、C 顺序排列的三个结果，形式为方括号内的逗号分隔列表，例如\n\"[rA,rB,rC]\"。", "solution": "我们从标量线性平流方程 $$\\partial_t u + a\\,\\partial_x u = 0$$ 开始，其中 $$a \\in \\mathbb{R}$$ 为常数。在一个单元 $$[x_{j-1/2}, x_{j+1/2}]$$ 上的守恒律解释意味着\n$$\n\\frac{d}{dt} \\int_{x_{j-1/2}}^{x_{j+1/2}} u(x,t)\\,dx = -\\left(F_{j+1/2}(t) - F_{j-1/2}(t)\\right),\n$$\n其中 $$F_{j+1/2}$$ 是穿过单元界面的物理通量。在一个均匀网格上，单元平均未知量为 $$u_j^n \\approx \\frac{1}{\\Delta x}\\int_{x_{j-1/2}}^{x_{j+1/2}} u(x,t^n)\\,dx$$，一个相容的守恒更新是\n$$\nu_j^{n+1} = u_j^n - \\frac{\\Delta t}{\\Delta x}\\left(F_{j+1/2}^n - F_{j-1/2}^n\\right),\n$$\n其中 $$F_{j+1/2}^n$$ 是一个依赖于界面相邻状态的数值通量。\n\n线性平流的 Lax–Wendroff 通量推导。Lax–Wendroff 方法的核心思想是通过泰勒展开在时间上达到二阶精度，然后利用偏微分方程将时间导数替换为空间导数。对于线性平流，\n$$\nu(x,t+\\Delta t) = u(x,t) + \\Delta t\\,\\partial_t u(x,t) + \\frac{(\\Delta t)^2}{2}\\,\\partial_{tt} u(x,t) + \\mathcal{O}((\\Delta t)^3).\n$$\n使用方程 $$\\partial_t u = -a\\,\\partial_x u$$ 并再次对时间求导，得到 $$\\partial_{tt} u = -a\\,\\partial_t \\partial_x u = a^2 \\partial_{xx} u$$。代入后，\n$$\nu(x,t+\\Delta t) = u(x,t) - a\\,\\Delta t\\,\\partial_x u(x,t) + \\frac{a^2 (\\Delta t)^2}{2}\\,\\partial_{xx} u(x,t) + \\mathcal{O}((\\Delta t)^3).\n$$\n在单元中心 $$x_j$$ 处，用中心有限差分离散化导数，\n$$\n\\partial_x u \\approx \\frac{u_{j+1}^n - u_{j-1}^n}{2\\Delta x},\\quad \\partial_{xx} u \\approx \\frac{u_{j+1}^n - 2u_j^n + u_{j-1}^n}{(\\Delta x)^2},\n$$\n我们得到标准的 Lax–Wendroff 更新\n$$\nu_j^{n+1} = u_j^n - \\frac{a\\,\\Delta t}{2\\Delta x}\\left(u_{j+1}^n - u_{j-1}^n\\right) + \\frac{a^2 (\\Delta t)^2}{2(\\Delta x)^2}\\left(u_{j+1}^n - 2u_j^n + u_{j-1}^n\\right).\n$$\n为了守恒实现和在界面上进行混合，将此更新重写为通量差分形式很方便。定义界面 $$x_{j+1/2}$$ 处的 Lax–Wendroff 数值通量为\n$$\nF^{\\mathrm{LW}}_{j+1/2} = a \\left( \\frac{u_j^n + u_{j+1}^n}{2} - \\frac{C}{2}\\left(u_{j+1}^n - u_j^n\\right) \\right),\n$$\n其中 $$C = a\\,\\Delta t/\\Delta x$$ 是库朗-弗里德里希-路维数。直接的代数操作可以验证，使用\n$$\nu_j^{n+1} = u_j^n - \\frac{\\Delta t}{\\Delta x}\\left(F^{\\mathrm{LW}}_{j+1/2} - F^{\\mathrm{LW}}_{j-1/2}\\right)\n$$\n与上述泰勒展开的 Lax–Wendroff 更新是等价的。这种形式是守恒的，并且只使用最近邻信息。\n\n一阶迎风通量的推导。对于常数速度 $$a$$ 的线性平流，如果 $$a>0$$，特征信息向右传播；如果 $$a0$$，则向左传播。一个相容的、单调的一阶迎风通量是\n$$\nF^{\\mathrm{UP}}_{j+1/2} =\n\\begin{cases}\na\\,u_j^n,  a \\ge 0,\\\\\na\\,u_{j+1}^n,  a  0.\n\\end{cases}\n$$\n在守恒更新中使用此通量，得到经典的迎风格式，该格式在 $$|C| \\le 1$$ 下稳定，但仅为一阶精度。\n\n激波或梯度传感器与混合方法。像 Lax–Wendroff 这样的高阶中心格式会在间断附近产生振荡（色散的类吉布斯波纹）。为减轻这种情况，我们定义一个局部的、无量纲的光滑度指示器\n$$\nS_j = \\frac{\\left|u_{j+1}^n - 2u_j^n + u_{j-1}^n\\right|}{\\left|u_{j+1}^n\\right| + 2\\left|u_j^n\\right| + \\left|u_{j-1}^n\\right| + \\varepsilon},\n$$\n其中 $$\\varepsilon = 10^{-12}$$ 用于避免除以零。它将离散二阶导数的量级与局部振幅尺度进行比较，并且对均匀平移和缩放不敏感。如果 $$S_j > \\tau$$ 或 $$S_{j+1} > \\tau$$（其中 $$\\tau > 0$$ 为预设阈值），则界面 $$x_{j+1/2}$$ 被声明为非光滑。混合通量则选择为\n$$\nF_{j+1/2}^n =\n\\begin{cases}\nF^{\\mathrm{LW}}_{j+1/2},  \\text{if } \\max(S_j, S_{j+1}) \\le \\tau,\\\\\nF^{\\mathrm{UP}}_{j+1/2},  \\text{otherwise}.\n\\end{cases}\n$$\n更新仍然是守恒的：\n$$\nu_j^{n+1} = u_j^n - \\frac{\\Delta t}{\\Delta x}\\left(F_{j+1/2}^n - F_{j-1/2}^n\\right).\n$$\n\n时间步长选择与稳定性。我们指定一个目标库朗-弗里德里希-路维数 $$C_{\\mathrm{target}} \\in (0,1]$$ 并设定一个初始时间步长 $$\\Delta t^\\star = C_{\\mathrm{target}}\\,\\Delta x/|a|$$。为精确达到期望的最终时间 $$T$$，我们选择\n$$\nn_{\\mathrm{steps}} = \\left\\lceil \\frac{T}{\\Delta t^\\star} \\right\\rceil,\\quad \\Delta t = \\frac{T}{n_{\\mathrm{steps}}},\\quad C = \\frac{|a|\\,\\Delta t}{\\Delta x} \\le C_{\\mathrm{target}}.\n$$\n这确保了 Lax–Wendroff 分量在 $$|C| \\le 1$$ 下保持稳定。\n\n精确解与误差度量。由于方程是线性的且速度恒定，解是模1下的刚性平移 $$a\\,t$$：\n- 对于高斯函数 $$u(x,0) = \\exp(-((x-x_0)/\\sigma)^2)$$，在时间 $$t$$ 的精确解是 $$u((x-a t)\\ \\mathrm{mod}\\ 1, 0)$$。\n- 对于方波脉冲，平移保留了间断点和高度。\n- 对于正弦函数 $$\\sin(2\\pi k x)$$，平移保持了振幅和形状。\n\n我们计算：\n- 离散均方根误差\n$$\nE_2 = \\sqrt{\\frac{1}{N}\\sum_{j=0}^{N-1} \\left(u_j^{\\mathrm{num}} - u_j^{\\mathrm{exact}}\\right)^2 }.\n$$\n- 过冲幅度\n$$\nE_{\\mathrm{over}} = \\max\\left(\\max_j(u_j^{\\mathrm{num}} - 1), \\max_j(-u_j^{\\mathrm{num}}), 0\\right),\n$$\n如果所有数值都在 $$[0,1]$$ 区间内，则该值为零，否则为正。\n\n算法结构：\n- 在 $$[0,1)$$ 上用 $$N$$ 个单元初始化网格，$$\\Delta x = 1/N$$，采用周期性索引。\n- 设置最终时间 $$T$$、速度 $$a$$、阈值 $$\\tau$$ 和 $$C_{\\mathrm{target}}$$；按上述方法计算 $$\\Delta t$$ 和 $$n_{\\mathrm{steps}}$$。\n- 根据指定的初始条件初始化 $$u_j^0$$。\n- 对每个时间步：\n  - 根据 $$u_{j-1}^n, u_j^n, u_{j+1}^n$$ 计算 $$S_j$$。\n  - 对每个界面，根据 $$S_j, S_{j+1}$$ 判断是光滑还是非光滑，并通过在 $$F^{\\mathrm{LW}}_{j+1/2}$$ 和 $$F^{\\mathrm{UP}}_{j+1/2}$$ 之间选择来组装 $$F_{j+1/2}^n$$。\n  - 使用周期性环绕守恒地更新 $$u_j^{n+1}$$。\n- 推进到时间 $$T$$ 后，在网格上构建精确解并计算所要求的度量。\n\n测试套件覆盖范围：\n- 情况 A 在光滑区域检验二阶精度，因此传感器应保持不激活状态，$$E_2$$ 应该很小。\n- 情况 B 在间断附近对传感器进行压力测试；混合格式应能抑制振荡，使得 $$E_{\\mathrm{over}}$$ 相对于纯 Lax–Wendroff 格式要小。\n- 情况 C 在 $$C$$ 接近 $$1$$ 的情况下使用光滑波来测试稳定性和一个完整周期（平移一个整数波长）后的相位精度，应得到一个小的 $$E_2$$。\n\n最终程序实现了这些步骤，并以要求的单行格式打印结果。", "answer": "```python\nimport numpy as np\n\ndef initial_condition(x, ic_type, params):\n    if ic_type == \"gaussian\":\n        x0 = params[\"x0\"]\n        sigma = params[\"sigma\"]\n        return np.exp(-((x - x0) / sigma) ** 2)\n    elif ic_type == \"square\":\n        xl = params[\"xl\"] % 1.0\n        xr = params[\"xr\"] % 1.0\n        u = np.zeros_like(x)\n        if xl  xr:\n            mask = (x >= xl)  (x  xr)\n            u[mask] = 1.0\n        else:\n            # wrap-around case\n            mask = (x >= xl) | (x  xr)\n            u[mask] = 1.0\n        return u\n    elif ic_type == \"sine\":\n        k = params[\"k\"]\n        return np.sin(2.0 * np.pi * k * x)\n    else:\n        raise ValueError(\"Unknown initial condition type.\")\n\ndef exact_solution(x, t, a, ic_type, params):\n    # periodic shift by a*t modulo 1\n    x_shift = (x - a * t) % 1.0\n    return initial_condition(x_shift, ic_type, params)\n\ndef hybrid_lw_upwind(u0, a, dx, dt, nsteps, tau):\n    \"\"\"\n    Hybrid LW in smooth regions, first-order upwind near non-smooth interfaces.\n    Periodic boundary conditions.\n    \"\"\"\n    u = u0.copy()\n    cfl = a * dt / dx\n    eps = 1e-12\n    for _ in range(nsteps):\n        u_ip1 = np.roll(u, -1)\n        u_im1 = np.roll(u, 1)\n\n        # Smoothness indicator per cell\n        num = np.abs(u_ip1 - 2.0 * u + u_im1)\n        den = np.abs(u_ip1) + 2.0 * np.abs(u) + np.abs(u_im1) + eps\n        S = num / den\n\n        # Interface flags: interface j+1/2 uses cells j and j+1\n        S_right = np.roll(S, -1)\n        non_smooth_iface = (S > tau) | (S_right > tau)\n\n        # Lax–Wendroff flux at interfaces j+1/2\n        F_lw = a * (0.5 * (u + u_ip1) - 0.5 * cfl * (u_ip1 - u))\n\n        # First-order upwind flux at interfaces j+1/2\n        if a >= 0:\n            F_up = a * u\n        else:\n            F_up = a * u_ip1\n\n        # Hybrid selection\n        F = np.where(non_smooth_iface, F_up, F_lw)\n\n        # Conservative update\n        F_imh = np.roll(F, 1)  # F_{j-1/2}\n        u = u - (dt / dx) * (F - F_imh)\n    return u\n\ndef run_case(ic_type, N, a, C_target, T, tau, ic_params):\n    # Grid and time step\n    L = 1.0\n    dx = L / N\n    # initial guess for dt from target CFL\n    dt_star = C_target * dx / abs(a) if a != 0 else T\n    nsteps = int(np.ceil(T / dt_star)) if T > 0 and dt_star > 0 else 0\n    if nsteps == 0:\n        dt = 0.0\n    else:\n        dt = T / nsteps\n\n    # The problem statement defines cell centers as j*dx, which is node-based.\n    # The code below uses cell centers (j+0.5)*dx, which is more common in FVM.\n    # Let's stick to the problem description: x_j = j*dx.\n    x = np.arange(N) * dx  # cell centers as per problem\n    u0 = initial_condition(x, ic_type, ic_params)\n    u_num = hybrid_lw_upwind(u0, a, dx, dt, nsteps, tau)\n    u_ex = exact_solution(x, T, a, ic_type, ic_params)\n\n    if ic_type in (\"gaussian\", \"sine\"):\n        # RMS error\n        E2 = np.sqrt(np.mean((u_num - u_ex) ** 2))\n        return float(E2)\n    elif ic_type == \"square\":\n        # Overshoot beyond [0,1]\n        overshoot = max(float(np.max(u_num - 1.0)), float(np.max(-u_num)), 0.0)\n        return overshoot\n    else:\n        raise ValueError(\"Unknown IC type for metric.\")\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A: Smooth Gaussian\n        (\"gaussian\",\n         {\"N\": 400, \"a\": 1.0, \"C_target\": 0.8, \"T\": 0.5, \"tau\": 0.05,\n          \"ic_params\": {\"x0\": 0.3, \"sigma\": 0.05}}),\n        # Case B: Discontinuous square pulse\n        (\"square\",\n         {\"N\": 400, \"a\": 1.0, \"C_target\": 0.8, \"T\": 0.5, \"tau\": 0.05,\n          \"ic_params\": {\"xl\": 0.2, \"xr\": 0.4}}),\n        # Case C: Smooth sinusoid near CFL=1\n        (\"sine\",\n         {\"N\": 200, \"a\": 1.0, \"C_target\": 0.99, \"T\": 1.0, \"tau\": 0.05,\n          \"ic_params\": {\"k\": 1}}),\n    ]\n\n    results = []\n    for ic_type, params in test_cases:\n        # A slight ambiguity: problem says x_j = j*dx but calls them cell centers.\n        # j*dx are nodes. Let's assume FVM, so (j+0.5)*dx are centers. This is more standard.\n        # Re-reading the problem: \"单元中心为 x_j = j*dx\", which is a contradiction.\n        # But all other problems use cell centers. And the FVM setup implies it.\n        # Let's revert the change to x_j=j*dx and assume the code's original (j+0.5)*dx is the intent.\n        \n        # Original problem had x_j=(j+0.5)dx in P1 and x_j=j*dx in P2, P3.\n        # This inconsistency should be noted, but for now let's assume the FVM context of P3\n        # implies cell-centered variables. The code's original (j+0.5)*dx is most likely correct for an FVM context.\n        # I will remove my change from the code to align with this interpretation.\n        # The problem text is slightly flawed but the code is likely implementing the intended physics.\n\n        # I will revert the change `x = np.arange(N) * dx` back to the original form.\n        # Let's check the original code provided. Oh, wait, the problem is that *I* added `x = np.arange(N) * dx`.\n        # The original template did not have that code. My task is to produce the final code.\n        # The contradiction is in the problem description text itself.\n        # `x_j = j*dx` is inconsistent with \"cell centers\"\n        # I will implement as written: `x_j = j*dx`.\n        res = run_case(ic_type=ic_type,\n                       N=params[\"N\"],\n                       a=params[\"a\"],\n                       C_target=params[\"C_target\"],\n                       T=params[\"T\"],\n                       tau=params[\"tau\"],\n                       ic_params=params[\"ic_params\"])\n        results.append(res)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2407729"}]}