{"hands_on_practices": [{"introduction": "虽然迭代矩阵的谱半径是判断收敛性的最终标准，但在实践中，我们常常使用一些更易于验证的充分条件。严格对角占优就是一个保证雅可比（Jacobi）和高斯-赛德尔（Gauss-Seidel）方法收敛的关键属性。本练习 [@problem_id:1369798] 将让你通过一个具体的计算，来检验一个矩阵是否满足严格对角占优的定义，并探索如何通过简单的代数变换（如缩放方程）来影响这一重要性质。", "problem": "一个方阵 $M$（其元素为 $m_{ij}$）被称为严格对角占优，如果对于每一行 $i$，对角线元素 $m_{ii}$ 的绝对值 $|m_{ii}|$ 严格大于该行所有其他元素的绝对值之和。这个条件可以表示为 $|m_{ii}|  \\sum_{j \\neq i} |m_{ij}|$。对于求解线性方程组的某些迭代法，如 Jacobi 法和 Gauss-Seidel 法，如果系数矩阵是严格对角占优的，则其收敛性得到保证。\n\n考虑以下线性方程组：\n$$\n\\begin{cases}\n5x_1 + 2x_2 - x_3 = 9 \\\\\n12x_1 + 8x_2 - 3x_3 = 20 \\\\\nx_1 - 4x_2 + 6x_3 = -1\n\\end{cases}\n$$\n\n设 $A$ 为该方程组的系数矩阵。通过将原方程组的第二个方程乘以因子 $1/10$ 来创建一个新的线性方程组。设这个新方程组的系数矩阵为 $A'$。\n\n关于矩阵 $A'$，以下哪个陈述是正确的？\n\nA. 矩阵 $A'$ 是严格对角占优的。\n\nB. 矩阵 $A'$ 不是严格对角占优的，因为第一行不满足条件。\n\nC. 矩阵 $A'$ 不是严格对角占优的，因为第二行不满足条件。\n\nD. 矩阵 $A'$ 不是严格对角占优的，因为第三行不满足条件。\n\nE. 矩阵 $A'$ 不是严格对角占优的，因为第一行和第二行都不满足条件。", "solution": "问题要求我们判断一个新的系数矩阵 $A'$ 是否为严格对角占优矩阵。该矩阵 $A'$ 是通过对原矩阵 $A$ 的某一行进行缩放得到的。\n\n首先，让我们从给定的线性方程组中确定原始系数矩阵 $A$：\n$$\nA = \\begin{pmatrix} 5  2  -1 \\\\ 12  8  -3 \\\\ 1  -4  6 \\end{pmatrix}\n$$\n\n问题陈述，通过将第二个方程乘以因子 $1/10$ 来创建一个新的线性方程组。此操作对应于将系数矩阵 $A$ 的第二行中的每个元素乘以 $1/10$。这样我们得到新的系数矩阵 $A'$。\n\n$$\nA' = \\begin{pmatrix} 5  2  -1 \\\\ 12 \\times \\frac{1}{10}  8 \\times \\frac{1}{10}  -3 \\times \\frac{1}{10} \\\\ 1  -4  6 \\end{pmatrix} = \\begin{pmatrix} 5  2  -1 \\\\ 1.2  0.8  -0.3 \\\\ 1  -4  6 \\end{pmatrix}\n$$\n\n现在，我们必须检查 $A'$ 是否是严格对角占优的。根据所给定义，对于每一行 $i$，我们必须验证是否满足 $|a'_{ii}|  \\sum_{j \\neq i} |a'_{ij}|$。让我们对 $A'$ 的每一行检查这个条件。\n\n**第 1 行：**\n我们检查是否 $|a'_{11}|  |a'_{12}| + |a'_{13}|$。\n对角线元素为 $a'_{11} = 5$。非对角线元素的绝对值之和为 $|a'_{12}| + |a'_{13}| = |2| + |-1| = 2 + 1 = 3$。\n条件是 $|5|  3$，即 $5  3$。这是成立的。所以，第一行满足条件。\n\n**第 2 行：**\n我们检查是否 $|a'_{22}|  |a'_{21}| + |a'_{23}|$。\n对角线元素为 $a'_{22} = 0.8$。非对角线元素的绝对值之和为 $|a'_{21}| + |a'_{23}| = |1.2| + |-0.3| = 1.2 + 0.3 = 1.5$。\n条件是 $|0.8|  1.5$，即 $0.8  1.5$。这是不成立的。因此，第二行不满足严格对角占优的条件。\n\n由于至少有一行不满足条件，我们可以立即得出结论，矩阵 $A'$ 不是严格对角占优的。不满足条件的情况发生在第二行。\n\n**第 3 行（为了完整性）：**\n我们检查是否 $|a'_{33}|  |a'_{31}| + |a'_{32}|$。\n对角线元素为 $a'_{33} = 6$。非对角线元素的绝对值之和为 $|a'_{31}| + |a'_{32}| = |1| + |-4| = 1 + 4 = 5$。\n条件是 $|6|  5$，即 $6  5$。这是成立的。所以，第三行满足条件。\n\n矩阵 $A'$ 不是严格对角占优的，因为第二行不满足条件。因此，正确的陈述是该矩阵不是严格对角占优的，因为第二行不满足条件。这对应于选项 C。\n\n一个普遍的性质是，将一行乘以一个非零常数 $c$ 不会改变该行是否满足严格对角占优条件。设原始行为 $(a_{i1}, \\dots, a_{in})$。条件是 $|a_{ii}|  \\sum_{j \\neq i} |a_{ij}|$。缩放后，新行为 $(ca_{i1}, \\dots, ca_{in})$。新行的条件是 $|ca_{ii}|  \\sum_{j \\neq i} |ca_{ij}|$。这等价于 $|c||a_{ii}|  \\sum_{j \\neq i} |c||a_{ij}|$，可以简化为 $|c||a_{ii}|  |c|\\sum_{j \\neq i} |a_{ij}|$。由于 $c=1/10 \\neq 0$，我们可以除以 $|c|$，得到 $|a_{ii}|  \\sum_{j \\neq i} |a_{ij}|$，即原始条件。因此，如果一行最初不满足条件，它在缩放后仍然不满足条件。在我们原始的矩阵 $A$ 中，对于第 2 行，我们有 $|8|  |12| + |-3|$，即 $8  15$，这是不成立的。该行最初就不满足条件，因此在缩放后也必然不满足。", "answer": "$$\\boxed{C}$$", "id": "1369798"}, {"introduction": "在掌握了行严格对角占优的概念后，我们来探讨其一个“对偶”形式：列严格对角占优。虽然教科书中常强调行对角占优保证了雅可比和高斯-赛德尔迭代的收敛，但列对角占优也是一个非常重要的性质，同样能保证迭代法在某些情况下的收敛性。此练习 [@problem_id:2166709] 旨在帮助你区分这两种定义，并通过构造实例来加深理解，让你认识到它们是两个独立但都非常有用的矩阵属性。", "problem": "在数值线性代数中，矩阵的某些性质可以保证用于求解线性方程组的迭代法的收敛性。对角占优就是这样一种性质。\n\n一个大小为 $n \\times n$、元素为 $a_{ij}$ 的方阵 $A$ 被定义为**严格行对角占优**，如果对于每一行 $i$，对角线元素的绝对值严格大于该行所有其他元素的绝对值之和。用数学公式表示为：\n$$|a_{ii}|  \\sum_{j \\neq i} |a_{ij}| \\quad \\text{for all } i = 1, 2, \\dots, n$$\n\n类似地，矩阵 $A$ 被定义为**严格列对角占优**，如果对于每一列 $j$，对角线元素的绝对值严格大于该列所有其他元素的绝对值之和。用数学公式表示为：\n$$|a_{jj}|  \\sum_{i \\neq j} |a_{ij}| \\quad \\text{for all } j = 1, 2, \\dots, n$$\n\n考虑以下 3x3 矩阵。哪一个矩阵是严格列对角占优但**不是**严格行对角占优的？\n\nA.\n$A_A = \\begin{pmatrix} 10  1  2 \\\\ 3  9  4 \\\\ 1  2  8 \\end{pmatrix}$\n\nB.\n$A_B = \\begin{pmatrix} 10  3  8 \\\\ 4  8  5 \\\\ 7  2  12 \\end{pmatrix}$\n\nC.\n$A_C = \\begin{pmatrix} 10  3  6 \\\\ 4  8  5 \\\\ 5  2  12 \\end{pmatrix}$\n\nD.\n$A_D = \\begin{pmatrix} 10  4  5 \\\\ 3  8  2 \\\\ 6  5  12 \\end{pmatrix}$", "solution": "我们使用以下定义：\n- 严格行对角占优 (SRDD)：对于每个行索引 $i$，满足 $|a_{ii}|  \\sum_{j \\neq i} |a_{ij}|$。\n- 严格列对角占优 (SCDD)：对于每个列索引 $j$，满足 $|a_{jj}|  \\sum_{i \\neq j} |a_{ij}|$。\n所有元素都是非负的，所以 $|a_{ij}| = a_{ij}$。\n\n矩阵 $A_{A} = \\begin{pmatrix} 10  1  2 \\\\ 3  9  4 \\\\ 1  2  8 \\end{pmatrix}$。\n行检查：\n- 第 1 行：$10  1 + 2 = 3$。\n- 第 2 行：$9  3 + 4 = 7$。\n- 第 3 行：$8  1 + 2 = 3$。\n因此满足 SRDD。\n列检查：\n- 第 1 列：$10  3 + 1 = 4$。\n- 第 2 列：$9  1 + 2 = 3$。\n- 第 3 列：$8  2 + 4 = 6$。\n因此满足 SCDD。\n结论：$A_{A}$ 既是 SRDD 也是 SCDD，不符合要求。\n\n矩阵 $A_{B} = \\begin{pmatrix} 10  3  8 \\\\ 4  8  5 \\\\ 7  2  12 \\end{pmatrix}$。\n行检查：\n- 第 1 行：$10  3 + 8 = 11$ 是错误的，因此不满足 SRDD。\n列检查：\n- 第 1 列：$10  4 + 7 = 11$ 是错误的，因此不满足 SCDD。\n结论：$A_{B}$ 既不是 SCDD 也不是 SRDD，不符合要求。\n\n矩阵 $A_{C} = \\begin{pmatrix} 10  3  6 \\\\ 4  8  5 \\\\ 5  2  12 \\end{pmatrix}$。\n行检查：\n- 第 1 行：$10  3 + 6 = 9$ 成立。\n- 第 2 行：$8  4 + 5 = 9$ 是错误的，因此不满足 SRDD。\n- 第 3 行：$12  5 + 2 = 7$ 成立。\n因此不满足 SRDD。\n列检查：\n- 第 1 列：$10  4 + 5 = 9$ 成立。\n- 第 2 列：$8  3 + 2 = 5$ 成立。\n- 第 3 列：$12  6 + 5 = 11$ 成立。\n因此满足 SCDD。\n结论：$A_{C}$ 是严格列对角占优但不是严格行对角占优。\n\n矩阵 $A_{D} = \\begin{pmatrix} 10  4  5 \\\\ 3  8  2 \\\\ 6  5  12 \\end{pmatrix}$。\n行检查：\n- 第 1 行：$10  4 + 5 = 9$。\n- 第 2 行：$8  3 + 2 = 5$。\n- 第 3 行：$12  6 + 5 = 11$。\n因此满足 SRDD。\n列检查：\n- 第 1 列：$10  3 + 6 = 9$ 成立。\n- 第 2 列：$8  4 + 5 = 9$ 是错误的，因此不满足 SCDD。\n结论：$A_{D}$ 是 SRDD 但不是 SCDD，不符合要求。\n\n因此，唯一一个严格列对角占优但不是严格行对角占优的矩阵是 $A_{C}$。", "answer": "$$\\boxed{C}$$", "id": "2166709"}, {"introduction": "严格对角占优是一个方便的工具，但它只是一个充分条件，而非必要条件。要真正掌握迭代方法收敛的核心，我们必须深入研究迭代矩阵的谱半径。这个高级练习 [@problem_id:3205095] 将引导你直面这一根本原则，通过编程构造一个雅可比方法发散而高斯-赛德尔方法收敛的经典案例。通过亲手实现这些方法并计算相应的谱半径，你将对迭代法的收敛机理以及不同方法间的性能差异获得深刻的实践性理解。", "problem": "设计并实现一个完整的、可运行的程序，该程序构建并分析线性系统，以评估迭代求解器的鲁棒性和稳定性。使用以下基本原理：线性系统的迭代方法源于矩阵分裂，其收敛性由谱半径准则决定。具体而言，对于一个带矩阵分裂的线性系统，Jacobi方法和Gauss-Seidel方法是使用由系数矩阵构建的矩阵来定义的。当相关迭代矩阵的谱半径严格小于1时，这两种方法的收敛性都得到保证。程序必须演示一个Jacobi迭代发散而Gauss-Seidel迭代收敛的案例，从第一性原理阐释其机理，并通过数值进行验证。所有符号、变量、函数、运算符和数字都必须用LaTeX书写。\n\n使用以下基础定义和事实。\n\n- 对于一个方阵 $A \\in \\mathbb{R}^{n \\times n}$，定义其对角部分 $D$、严格下三角部分 $L$ 和严格上三角部分 $U$，使得 $A = D + L + U$。\n- Jacobi迭代由更新式 $x^{k+1} = D^{-1}\\left(b - (L + U)x^{k}\\right)$ 定义，可写作 $x^{k+1} = T_{J} x^{k} + c_{J}$，其中迭代矩阵为 $T_{J} = -D^{-1}(L+U)$。\n- Gauss-Seidel迭代由更新式 $x^{k+1} = (D + L)^{-1}\\left(b - U x^{k}\\right)$ 定义，可写作 $x^{k+1} = T_{GS} x^{k} + c_{GS}$，其中迭代矩阵为 $T_{GS} = -(D+L)^{-1}U$。\n- 一个经过充分检验的收敛事实是，迭代方法 $x^{k+1} = T x^{k} + c$ 对任意初始向量收敛的充分必要条件是谱半径 $\\rho(T)  1$。另一个经过充分检验的事实是，对于任何对称正定矩阵（SPD），Gauss-Seidel方法对任意右侧向量 $b$ 都收敛。\n\n您的程序必须：\n- 对每个测试用例，构建 $D$、$L$、$U$，形成 $T_{J}$ 和 $T_{GS}$，计算它们的谱半径 $\\rho(T_{J})$ 和 $\\rho(T_{GS})$，从 $x^{0} = 0$ 开始运行这两种迭代方法，最大迭代次数为 $N$，残差 $\\|b - A x^{k}\\|_{2}$ 的容差为 $\\varepsilon$，并报告每种方法是否收敛。\n- 使用残差容差 $\\varepsilon = 10^{-10}$ 和最大迭代次数 $N = 500$。不涉及物理单位。\n\n测试套件。分析以下四个线性系统，由其系数矩阵 $A$ 和右侧向量 $b$ 指定：\n\n- 案例1（目标案例：Jacobi发散，Gauss-Seidel收敛）：\n  $$A_{1} = \\begin{bmatrix} \\tfrac{3}{2}  1  1 \\\\ 1  \\tfrac{3}{2}  1 \\\\ 1  1  \\tfrac{3}{2} \\end{bmatrix}, \\quad b_{1} = \\begin{bmatrix} 1 \\\\ -1 \\\\ 2 \\end{bmatrix}.$$\n- 案例2（严格对角占优，两者均收敛）：\n  $$A_{2} = \\begin{bmatrix} 4  1  1 \\\\ 1  4  1 \\\\ 1  1  4 \\end{bmatrix}, \\quad b_{2} = \\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\end{bmatrix}.$$\n- 案例3（奇异且病态，两者在给定准则下均不收敛）：\n  $$A_{3} = \\begin{bmatrix} 1  1  1 \\\\ 1  1  1 \\\\ 1  1  1 \\end{bmatrix}, \\quad b_{3} = \\begin{bmatrix} 1 \\\\ 1 \\\\ 1 \\end{bmatrix}.$$\n- 案例4（Jacobi的临界情况，$\\rho(T_{J}) = 1$，Gauss-Seidel收敛）：\n  $$A_{4} = \\begin{bmatrix} 2  1  1 \\\\ 1  2  1 \\\\ 1  1  2 \\end{bmatrix}, \\quad b_{4} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 1 \\end{bmatrix}.$$\n\n最终输出格式。您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。每个测试用例的结果必须是 $[\\rho(T_{J}), \\rho(T_{GS}), \\text{JacobiConverged}, \\text{GaussSeidelConverged}]$ 形式的列表。例如，输出必须类似于\n$$[[\\rho_{1J}, \\rho_{1GS}, \\text{bool}, \\text{bool}], [\\rho_{2J}, \\rho_{2GS}, \\text{bool}, \\text{bool}], [\\rho_{3J}, \\rho_{3GS}, \\text{bool}, \\text{bool}], [\\rho_{4J}, \\rho_{4GS}, \\text{bool}, \\text{bool}]].$$", "solution": "核心原理是，经典平稳迭代方法源于线性系统的矩阵分裂，当其迭代矩阵能够压缩误差时收敛；这一点在谱半径严格小于1时得到保证。从基本定义 $A = D + L + U$ 出发，其中 $D$ 是 $A$ 的对角部分，$L$ 是严格下三角部分，$U$ 是严格上三角部分，Jacobi和Gauss-Seidel方法分别定义为\n$$x^{k+1} = D^{-1}\\left(b - (L + U)x^{k}\\right), \\quad x^{k+1} = (D + L)^{-1}\\left(b - U x^{k}\\right),$$\n这些可以表示为平稳迭代 $x^{k+1} = T x^{k} + c$，其中Jacobi方法的迭代矩阵为 $T_{J} = -D^{-1}(L+U)$，Gauss-Seidel方法的迭代矩阵为 $T_{GS} = -(D+L)^{-1} U$。数值分析中一个经过充分检验的事实是，这类平稳迭代对任意初始向量 $x^{0}$ 收敛的充分必要条件是 $\\rho(T)  1$，其中 $\\rho(T)$ 表示谱半径，即 $T$ 的特征值的最大模。另一个经过充分检验的基本结果是，对于任何对称正定（SPD）矩阵 $A$，Gauss-Seidel方法都会收敛。\n\n我们现在解释如何构建一个矩阵，使得Jacobi迭代发散而Gauss-Seidel迭代收敛，并说明其原因。考虑一个 $n \\times n$ 的矩阵族，其对角线元素为常数，非对角线元素也为常数，\n$$A(\\alpha,\\beta) = \\alpha I + \\beta ( \\mathbf{1}\\mathbf{1}^{\\top} - I ),$$\n即 $A(\\alpha,\\beta)$ 的对角线元素等于 $\\alpha$，非对角线元素等于 $\\beta$。当 $n = 3$ 时，该矩阵为\n$$A(\\alpha,\\beta) = \\begin{bmatrix} \\alpha  \\beta  \\beta \\\\ \\beta  \\alpha  \\beta \\\\ \\beta  \\beta  \\alpha \\end{bmatrix}.$$\n根据构造，该矩阵是对称的。其特征结构是众所周知的：特征值为\n$$\\lambda_{1} = \\alpha - \\beta \\quad \\text{(多重度为 } n-1 \\text{)}, \\qquad \\lambda_{2} = \\alpha + (n-1)\\beta \\quad \\text{(多重度为 } 1 \\text{)}.$$\n因此，$A(\\alpha,\\beta)$ 是对称正定的，当且仅当 $\\alpha - \\beta  0$，即 $\\alpha  \\beta$，因为此时 $\\lambda_{1}$ 和 $\\lambda_{2}$ 均严格为正。\n\n对于Jacobi方法，我们计算其迭代矩阵。由于对于该矩阵族，$D = \\alpha I$ 且 $L+U = \\beta(\\mathbf{1}\\mathbf{1}^{\\top} - I)$，因此Jacobi迭代矩阵为\n$$T_{J} = -D^{-1}(L+U) = -\\frac{\\beta}{\\alpha} (\\mathbf{1}\\mathbf{1}^{\\top} - I).$$\n$\\mathbf{1}\\mathbf{1}^{\\top} - I$ 的特征值为 $(n-1)$（对应特征向量 $\\mathbf{1}$）和 $-1$（对应任何与 $\\mathbf{1}$ 正交的向量）。因此，$T_{J}$ 的特征值为\n$$\\mu_{1} = -\\frac{\\beta}{\\alpha} (n-1), \\qquad \\mu_{2} = \\frac{\\beta}{\\alpha} \\quad \\text{(多重度为 } n-1 \\text{)}.$$\n因此谱半径为\n$$\\rho(T_{J}) = \\max\\left\\{ \\left| -\\frac{\\beta}{\\alpha}(n-1) \\right|, \\left| \\frac{\\beta}{\\alpha} \\right| \\right\\} = \\frac{\\beta}{\\alpha}(n-1).$$\n当 $n = 3$ 时，我们得到 $\\rho(T_{J}) = \\dfrac{2\\beta}{\\alpha}$。如果 $\\rho(T_{J}) \\geq 1$，即 $\\dfrac{2\\beta}{\\alpha} \\geq 1$，Jacobi方法将发散。如果我们选择 $\\alpha = \\tfrac{3}{2}$ 和 $\\beta = 1$，那么 $\\alpha  \\beta$ 且 $A(\\alpha,\\beta)$ 是对称正定的，但是\n$$\\rho(T_{J}) = \\frac{2 \\cdot 1}{\\tfrac{3}{2}} = \\frac{4}{3} > 1,$$\n因此根据谱半径准则，Jacobi方法是发散的。\n\n对于Gauss-Seidel方法，基本的收敛结果表明，对于任何对称正定矩阵 $A$，Gauss-Seidel方法都收敛。由于 $A\\left(\\tfrac{3}{2}, 1\\right)$ 是对称正定的，所以即使Jacobi方法发散，Gauss-Seidel方法仍然收敛。这表明在此情景下，Gauss-Seidel相对于Jacobi具有更强的鲁棒性。\n\n为了提供额外背景，说明为什么在 $2 \\times 2$ 的情况下，在标准排序下不会发生这种发散，考虑矩阵 $A = \\begin{bmatrix} a  b \\\\ c  d \\end{bmatrix}$，其中 $D = \\operatorname{diag}(a,d)$，$L = \\begin{bmatrix} 0  0 \\\\ c  0 \\end{bmatrix}$，$U = \\begin{bmatrix} 0  b \\\\ 0  0 \\end{bmatrix}$。Jacobi迭代矩阵为\n$$T_{J} = -D^{-1}(L+U) = \\begin{bmatrix} 0  -\\frac{b}{a} \\\\ -\\frac{c}{d}  0 \\end{bmatrix},$$\n其特征值满足 $\\lambda^{2} = \\dfrac{bc}{ad}$，因此 $\\rho(T_{J}) = \\sqrt{\\left|\\dfrac{bc}{ad}\\right|}$。Gauss-Seidel迭代矩阵为\n$$T_{GS} = -(D+L)^{-1}U = \\begin{bmatrix} 0  -\\frac{b}{a} \\\\ 0  \\frac{bc}{ad} \\end{bmatrix},$$\n这是一个上三角矩阵，其特征值为 $0$ 和 $\\dfrac{bc}{ad}$，因此 $\\rho(T_{GS}) = \\left|\\dfrac{bc}{ad}\\right|$。所以在 $2 \\times 2$ 的情况下，两种方法会根据相同的不等式 $\\left|\\dfrac{bc}{ad}\\right|  1$ 同时收敛或发散，并且无法构建一个Jacobi发散而Gauss-Seidel收敛的反例。这解释了为什么所要求的例子需要维度 $n \\geq 3$。\n\n该测试套件旨在涵盖几个方面：\n- 案例1提供了主要情景，其中Jacobi方法因 $\\rho(T_{J}) > 1$ 而发散，而Gauss-Seidel方法因 $A$ 是对称正定矩阵而收敛。\n- 案例2是严格对角占优的情况，在这种情况下两种方法都已知会收敛；此时 $\\rho(T_{J})$ 和 $\\rho(T_{GS})$ 将远小于 $1$。\n- 案例3是奇异且病态的情况；两种方法都不应满足谱半径收敛准则，并且在数值上残差将不会达到指定的容差。\n- 案例4是 $\\rho(T_{J}) = 1$ 的临界情况；Jacobi方法通常不会收敛（无收缩），而Gauss-Seidel方法因为 $A$ 是对称正定矩阵而收敛。\n\n程序直接从 $D$、$L$ 和 $U$ 计算 $T_{J}$ 和 $T_{GS}$，通过特征值评估它们的谱半径，并使用残差范数 $\\|b - A x^{k}\\|_{2}$ 从 $x^{0} = 0$ 开始执行最多 $N = 500$ 步迭代，容差为 $\\varepsilon = 10^{-10}$。结果完全按照要求的格式进行格式化：每个案例贡献一个列表 $[\\rho(T_{J}), \\rho(T_{GS}), \\text{JacobiConverged}, \\text{GaussSeidelConverged}]$，最终输出是这些案例结果的单行列表。这将理论收敛准则与实际数值行为联系起来，通过清晰的量化检验，阐释了算法的鲁棒性和稳定性。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef spectral_radius(mat: np.ndarray) -> float:\n    \"\"\"Compute spectral radius (max absolute eigenvalue) of a square matrix.\"\"\"\n    try:\n        eigvals = np.linalg.eigvals(mat)\n        return float(np.max(np.abs(eigvals)))\n    except np.linalg.LinAlgError:\n        return float('nan')\n\ndef jacobi_iteration(A: np.ndarray, b: np.ndarray, max_iter: int = 500, tol: float = 1e-10) -> bool:\n    \"\"\"Run Jacobi iteration starting from x0=0, return True if residual norm = tol.\"\"\"\n    n = A.shape[0]\n    D = np.diag(np.diag(A))\n    L = np.tril(A, -1)\n    U = np.triu(A, 1)\n    # Precompute D^{-1}\n    try:\n        D_inv = np.linalg.inv(D)\n    except np.linalg.LinAlgError:\n        return False\n    x = np.zeros(n, dtype=float)\n    for _ in range(max_iter):\n        x = D_inv @ (b - (L + U) @ x)\n        r = b - A @ x\n        if np.linalg.norm(r, 2) = tol:\n            return True\n    return False\n\ndef gauss_seidel_iteration(A: np.ndarray, b: np.ndarray, max_iter: int = 500, tol: float = 1e-10) -> bool:\n    \"\"\"Run Gauss-Seidel iteration starting from x0=0, return True if residual norm = tol.\"\"\"\n    n = A.shape[0]\n    D = np.diag(np.diag(A))\n    L = np.tril(A, -1)\n    U = np.triu(A, 1)\n    DL = D + L\n    try:\n        DL_inv = np.linalg.inv(DL)\n    except np.linalg.LinAlgError:\n        return False\n    x = np.zeros(n, dtype=float)\n    for _ in range(max_iter):\n        x = DL_inv @ (b - U @ x)\n        r = b - A @ x\n        if np.linalg.norm(r, 2) = tol:\n            return True\n    return False\n\ndef solve():\n    # Define the test cases from the problem statement.\n    A1 = np.array([[1.5, 1.0, 1.0],\n                   [1.0, 1.5, 1.0],\n                   [1.0, 1.0, 1.5]], dtype=float)\n    b1 = np.array([1.0, -1.0, 2.0], dtype=float)\n\n    A2 = np.array([[4.0, 1.0, 1.0],\n                   [1.0, 4.0, 1.0],\n                   [1.0, 1.0, 4.0]], dtype=float)\n    b2 = np.array([1.0, 2.0, 3.0], dtype=float)\n\n    A3 = np.array([[1.0, 1.0, 1.0],\n                   [1.0, 1.0, 1.0],\n                   [1.0, 1.0, 1.0]], dtype=float)\n    b3 = np.array([1.0, 1.0, 1.0], dtype=float)\n\n    A4 = np.array([[2.0, 1.0, 1.0],\n                   [1.0, 2.0, 1.0],\n                   [1.0, 1.0, 2.0]], dtype=float)\n    b4 = np.array([0.0, 0.0, 1.0], dtype=float)\n\n    test_cases = [\n        (A1, b1),\n        (A2, b2),\n        (A3, b3),\n        (A4, b4),\n    ]\n\n    results = []\n    for A, b in test_cases:\n        D = np.diag(np.diag(A))\n        L = np.tril(A, -1)\n        U = np.triu(A, 1)\n        # Iteration matrices\n        # Use safe inverses; if singular, mark spectral radii as np.nan\n        try:\n            TJ = -np.linalg.inv(D) @ (L + U)\n            rho_J = spectral_radius(TJ)\n        except np.linalg.LinAlgError:\n            rho_J = float('nan')\n        try:\n            TGS = -np.linalg.inv(D + L) @ U\n            rho_GS = spectral_radius(TGS)\n        except np.linalg.LinAlgError:\n            rho_GS = float('nan')\n\n        jacobi_conv = jacobi_iteration(A, b, max_iter=500, tol=1e-10)\n        gs_conv = gauss_seidel_iteration(A, b, max_iter=500, tol=1e-10)\n\n        results.append([rho_J, rho_GS, jacobi_conv, gs_conv])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(str(item) for item in results)}]\")\n\nsolve()\n```", "id": "3205095"}]}