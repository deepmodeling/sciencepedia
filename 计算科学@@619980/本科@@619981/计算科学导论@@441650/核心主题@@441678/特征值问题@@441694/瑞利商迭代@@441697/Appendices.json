{"hands_on_practices": [{"introduction": "我们从基础开始。第一个练习将引导你完成瑞利商迭代法 (RQI) 的一次完整迭代。亲手完成这个计算是巩固你对三个核心步骤理解的最佳方式：计算瑞利商、求解移位线性系统以及归一化新向量。", "problem": "瑞利商迭代法是一种强大的数值方法，用于求解矩阵的特征值及其对应的特征向量。对于给定的对称矩阵 $A$ 和一个初始非零向量近似 $x_k$（在第 $k$ 次迭代），计算下一个近似值 $x_{k+1}$ 的一次完整迭代过程如下：\n\n1.  计算瑞利商 $\\mu_k$，它是特征值的估计值：\n    $$ \\mu_k = \\frac{x_k^T A x_k}{x_k^T x_k} $$\n2.  求解线性系统以获得中间向量 $w$：\n    $$ (A - \\mu_k I)w = x_k $$\n    其中 $I$ 是单位矩阵。\n3.  将向量 $w$ 归一化，以找到新的特征向量近似：\n    $$ x_{k+1} = \\frac{w}{||w||_2} $$\n    其中 $||w||_2$ 表示 $w$ 的欧几里得范数。\n\n给定对称矩阵 $A = \\begin{pmatrix} 5 & 2 \\\\ 2 & 2 \\end{pmatrix}$ 和初始向量 $x_0 = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$。\n\n执行一次完整的瑞利商迭代法，以找到下一个特征向量近似 $x_1$。将您的答案表示为一个行矩阵，其中包含 $x_1$ 的两个分量的精确解析形式。", "solution": "给定 $A=\\begin{pmatrix}5 & 2 \\\\ 2 & 2\\end{pmatrix}$ 和 $x_{0}=\\begin{pmatrix}1 \\\\ 0\\end{pmatrix}$。\n\n首先计算瑞利商：\n$$\n\\mu_{0}=\\frac{x_{0}^{T}Ax_{0}}{x_{0}^{T}x_{0}}=\\frac{\\begin{pmatrix}1 & 0\\end{pmatrix}\\begin{pmatrix}5 & 2 \\\\ 2 & 2\\end{pmatrix}\\begin{pmatrix}1 \\\\ 0\\end{pmatrix}}{\\begin{pmatrix}1 & 0\\end{pmatrix}\\begin{pmatrix}1 \\\\ 0\\end{pmatrix}}=\\frac{\\begin{pmatrix}1 & 0\\end{pmatrix}\\begin{pmatrix}5 \\\\ 2\\end{pmatrix}}{1}=\\frac{5}{1}=5.\n$$\n\n接下来求解 $(A-\\mu_{0}I)w=x_{0}$：\n$$\n\\left(\\begin{pmatrix}5 & 2 \\\\ 2 & 2\\end{pmatrix}-5\\begin{pmatrix}1 & 0 \\\\ 0 & 1\\end{pmatrix}\\right)\\begin{pmatrix}w_{1} \\\\ w_{2}\\end{pmatrix}=\\begin{pmatrix}1 \\\\ 0\\end{pmatrix}\\;\\;\\Longrightarrow\\;\\;\\begin{pmatrix}0 & 2 \\\\ 2 & -3\\end{pmatrix}\\begin{pmatrix}w_{1} \\\\ w_{2}\\end{pmatrix}=\\begin{pmatrix}1 \\\\ 0\\end{pmatrix}.\n$$\n这给出了方程组\n$$\n2w_{2}=1,\\qquad 2w_{1}-3w_{2}=0.\n$$\n从第一个方程得到 $w_{2}=\\frac{1}{2}$，代入第二个方程得到 $2w_{1}-\\frac{3}{2}=0$，因此 $w_{1}=\\frac{3}{4}$。所以\n$$\nw=\\begin{pmatrix}\\frac{3}{4} \\\\ \\frac{1}{2}\\end{pmatrix}.\n$$\n\n将 $w$ 归一化以得到 $x_{1}$：\n$$\n\\|w\\|_{2}=\\sqrt{\\left(\\frac{3}{4}\\right)^{2}+\\left(\\frac{1}{2}\\right)^{2}}=\\sqrt{\\frac{9}{16}+\\frac{4}{16}}=\\sqrt{\\frac{13}{16}}=\\frac{\\sqrt{13}}{4},\n$$\n$$\nx_{1}=\\frac{w}{\\|w\\|_{2}}=\\frac{4}{\\sqrt{13}}\\begin{pmatrix}\\frac{3}{4} \\\\ \\frac{1}{2}\\end{pmatrix}=\\begin{pmatrix}\\frac{3}{\\sqrt{13}} \\\\ \\frac{2}{\\sqrt{13}}\\end{pmatrix}.\n$$\n\n表示为行矩阵，这两个分量是 $\\begin{pmatrix}\\frac{3}{\\sqrt{13}} & \\frac{2}{\\sqrt{13}}\\end{pmatrix}$。", "answer": "$$\\boxed{\\begin{pmatrix}\\frac{3}{\\sqrt{13}} & \\frac{2}{\\sqrt{13}}\\end{pmatrix}}$$", "id": "2196909"}, {"introduction": "现在你已经熟悉了基本步骤，让我们来探索算法行为中一个更微妙的方面。本练习构建了一个特殊场景，其中初始瑞利商恰好位于两个特征值的正中间。通过完成迭代，你将揭示算法在这种对称情况下的行为，从而更深入地理解其收敛特性。", "problem": "设 $A \\in \\mathbb{R}^{2 \\times 2}$ 是一个实对称矩阵\n$$\nA = \\begin{pmatrix} 1 & 0 \\\\ 0 & 3 \\end{pmatrix},\n$$\n并设初始向量为\n$$\nv_{0} = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}.\n$$\n对于非零向量 $v \\in \\mathbb{R}^{2}$，定义瑞利商 $\\mu(v)$ 为\n$$\n\\mu(v) = \\frac{v^{\\mathsf{T}} A v}{v^{\\mathsf{T}} v}.\n$$\n你将研究瑞利商迭代 (Rayleigh Quotient Iteration, RQI) 的行为，该迭代在迭代索引 $k$ 处由以下步骤定义：\n- 给定单位向量 $v_{k}$ 及其瑞利商 $\\mu_{k} = \\mu(v_{k})$，求解移位的线性系统\n$$\n\\left(A - \\mu_{k} I\\right) w_{k} = v_{k}.\n$$\n- 将 $w_{k}$ 标准化以获得下一个迭代向量 $v_{k+1} = \\dfrac{w_{k}}{\\|w_{k}\\|_{2}}$。\n- 更新瑞利商 $\\mu_{k+1} = \\mu\\!\\left(v_{k+1}\\right)$。\n\n任务：\n1. 从实对称矩阵的特征值和特征向量的基本定义以及瑞利商的定义出发，验证初始瑞利商 $\\mu_{0} = \\mu(v_{0})$ 正好是矩阵 $A$ 两个特征值的中点，因此与它们等距。\n2. 仅使用上面提供的定义和 RQI 的迭代步骤，进行两次完整的符号迭代，以产生 $v_{1}$、$\\mu_{1}$，然后是 $v_{2}$、$\\mu_{2}$，并明确显示每个代数步骤。\n3. 确定 $\\mu_{2}$ 的精确值。\n\n你的最终答案必须是一个实数。不需要四舍五入。", "solution": "我们将按顺序完成这三个任务。\n\n### 任务1：验证初始瑞利商 $\\mu_0$\n\n首先，我们确定矩阵 $A$ 的特征值。由于 $A$ 是一个对角矩阵，其特征值是其对角线元素：$\\lambda_1 = 1$ 和 $\\lambda_2 = 3$。这两个特征值的中点是 $\\frac{1 + 3}{2} = 2$。\n\n接下来，我们计算初始向量 $v_0 = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}$ 的瑞利商 $\\mu_0 = \\mu(v_0)$。由于 $v_0$ 是一个单位向量（$\\|v_0\\|_2^2 = 1$），瑞利商简化为 $\\mu_0 = v_0^{\\mathsf{T}} A v_0$。\n$$\n\\mu_0 = \\left( \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & 1 \\end{pmatrix} \\right) \\begin{pmatrix} 1 & 0 \\\\ 0 & 3 \\end{pmatrix} \\left( \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} \\right) = \\frac{1}{2} \\begin{pmatrix} 1 & 1 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 3 \\end{pmatrix} = \\frac{1}{2} (1 + 3) = 2\n$$\n因此，$\\mu_0 = 2$，这确实是两个特征值的中点。\n\n### 任务2：RQI 的两次完整迭代\n\n**第一次迭代 ($k=0$):**\n我们从 $v_0 = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}$ 和 $\\mu_0 = 2$ 开始。\n1.  求解线性系统 $(A - \\mu_0 I) w_0 = v_0$：\n    $$\n    \\left(\\begin{pmatrix} 1 & 0 \\\\ 0 & 3 \\end{pmatrix} - 2I\\right) w_0 = \\begin{pmatrix} -1 & 0 \\\\ 0 & 1 \\end{pmatrix} w_0 = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\n    $$\n    解得 $w_0 = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}$。\n2.  标准化 $w_0$ 以获得 $v_1$。$\\|w_0\\|_2 = \\sqrt{\\frac{1}{2}(-1)^2 + \\frac{1}{2}(1)^2} = 1$。因此，$v_1 = w_0 = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}$。\n3.  计算新的瑞利商 $\\mu_1 = \\mu(v_1) = v_1^{\\mathsf{T}} A v_1 = 2$（计算过程与 $\\mu_0$ 类似）。\n\n**第二次迭代 ($k=1$):**\n我们从 $v_1 = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}$ 和 $\\mu_1 = 2$ 开始。\n1.  求解线性系统 $(A - \\mu_1 I) w_1 = v_1$：\n    $$\n    \\begin{pmatrix} -1 & 0 \\\\ 0 & 1 \\end{pmatrix} w_1 = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}\n    $$\n    解得 $w_1 = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}$，这等于 $v_0$。\n2.  标准化 $w_1$ 以获得 $v_2$。$\\|w_1\\|_2 = 1$。因此，$v_2 = w_1 = v_0$。\n3.  计算新的瑞利商 $\\mu_2 = \\mu(v_2)$。由于 $v_2 = v_0$，我们得到 $\\mu_2 = \\mu_0 = 2$。\n\n### 任务3：$\\mu_2$ 的精确值\n\n根据第二次迭代的计算，$\\mu_2$ 的精确值为 2。在这种特殊情况下，算法在向量上进入了一个周期为 2 的循环（$v_0 \\to v_1 \\to v_0 \\dots$），而瑞利商则固定在两个特征值的中点。", "answer": "$$\\boxed{2}$$", "id": "3265660"}, {"introduction": "从手动计算到编程实现，最后的这个练习要求你用代码实现瑞利商迭代。你将用一组精心设计的矩阵来测试你的程序，这些矩阵旨在揭示算法在不同情况下的特点，包括处理非厄米矩阵和亏损矩阵时的行为。这个练习将理论知识与实际应用联系起来，突出了瑞利商迭代的优势及其潜在的失效模式。", "problem": "实现一个完整的程序，仅使用第一性原理研究瑞利商迭代在指定的非厄米矩阵和厄米矩阵上的表现。从核心定义开始：对于给定的方阵 $A\\in \\mathbb{C}^{n\\times n}$，一个特征对是指一个对 $\\left(\\lambda,\\boldsymbol{x}\\right)$，其中 $\\boldsymbol{x}\\neq \\boldsymbol{0}$ 且满足 $A\\boldsymbol{x}=\\lambda \\boldsymbol{x}$。对于非零向量 $\\boldsymbol{v}\\in \\mathbb{C}^{n}$，其相对于矩阵 $A$ 的瑞利商为 $R\\left(\\boldsymbol{v}\\right)=\\dfrac{\\boldsymbol{v}^{\\ast}A\\boldsymbol{v}}{\\boldsymbol{v}^{\\ast}\\boldsymbol{v}}$，其中 $\\left(\\cdot\\right)^{\\ast}$ 表示共轭转置。一个对 $\\left(\\mu,\\boldsymbol{v}\\right)$ 的残差为 $\\boldsymbol{r}\\left(\\mu,\\boldsymbol{v}\\right)=A\\boldsymbol{v}-\\mu \\boldsymbol{v}$。瑞利商迭代通过重复计算当前向量的瑞利商，然后求解一个位移线性系统，并将结果重新归一化为单位欧几里得范数，来构造一个序列 $\\left(\\mu_{k},\\boldsymbol{v}_{k}\\right)$。您必须仅使用这些基本定义和线性代数运算来实现此过程。\n\n您的程序必须为所提供的测试套件执行以下操作。\n\n定义和算法要求：\n- 在瑞利商中使用共轭转置，即 $R\\left(\\boldsymbol{v}\\right)=\\dfrac{\\boldsymbol{v}^{\\ast}A\\boldsymbol{v}}{\\boldsymbol{v}^{\\ast}\\boldsymbol{v}}$。\n- 第 $k$ 次迭代的更新使用位移 $\\mu_{k}=R\\left(\\boldsymbol{v}_{k}\\right)$，并通过求解 $\\left(A-\\mu_{k}I\\right)\\boldsymbol{w}_{k}=\\boldsymbol{v}_{k}$ 来形成 $\\boldsymbol{w}_{k}$。然后设置 $\\boldsymbol{v}_{k+1}=\\dfrac{\\boldsymbol{w}_{k}}{\\left\\lVert \\boldsymbol{w}_{k}\\right\\rVert_{2}}$。\n- 全程使用 2-范数。当 $\\left\\lVert A\\boldsymbol{v}_{k}-\\mu_{k}\\boldsymbol{v}_{k}\\right\\rVert_{2}\\leq \\text{tol}\\cdot \\left\\lVert A\\right\\rVert_{2}\\cdot \\left\\lVert \\boldsymbol{v}_{k}\\right\\rVert_{2}$ 或当 $k\\geq 1$ 时 $\\left\\lvert \\mu_{k}-\\mu_{k-1}\\right\\rvert\\leq \\text{tol}$，则检测到收敛。\n- 如果位移系统是奇异或数值奇异的，则检测到崩溃。具体来说，如果 $\\left(A-\\mu_{k}I\\right)$ 是奇异的（线性求解失败）或者其在 2-范数下的条件数超过 $10^{16}$，则报告崩溃并停止该情况下的迭代。\n- 对于任何计算出的 $\\mu_{k}$，如果 $\\left\\lvert \\operatorname{Im}\\left(\\mu_{k}\\right)\\right\\rvert > 10^{-12}$，则将位移计为复数。\n\n测试套件：\n- 情况 A（复位移演示）：$A_{A}=\\begin{bmatrix}1 & \\mathrm{i} \\\\ 0 & 2\\end{bmatrix}$，初始向量为 $\\boldsymbol{v}_{A,0}=\\begin{bmatrix}1 \\\\ 1\\end{bmatrix}$。计算 $\\mu_{0}=R\\left(\\boldsymbol{v}_{A,0}\\right)$ 并返回一个布尔值，指示在上述阈值下 $\\operatorname{Im}\\left(\\mu_{0}\\right)\\neq 0$ 是否成立。\n- 情况 B（非厄米矩阵，未能收敛到主特征对）：$A_{B}=\\begin{bmatrix}1 & 10 \\\\ 0 & 5\\end{bmatrix}$，初始向量为 $\\boldsymbol{v}_{B,0}=\\begin{bmatrix}1 \\\\ 10^{-6}\\end{bmatrix}$。运行瑞利商迭代，其中 $\\text{tol}=10^{-12}$ 且 $\\text{maxit}=20$。令 $\\hat{\\mu}$ 为最后一个可用的位移（在终止前计算的最后一个 $\\mu_{k}$，无论是否收敛）。令 $\\left\\{\\lambda_{j}\\right\\}$ 为 $A_{B}$ 的特征值，并令 $\\lambda_{\\mathrm{dom}}$ 为模最大的特征值。返回一个布尔值，指示对于所有其他特征值 $\\lambda$，$\\left\\lvert \\hat{\\mu}-\\lambda_{\\mathrm{dom}}\\right\\rvert$ 是否严格小于 $\\left\\lvert \\hat{\\mu}-\\lambda\\right\\rvert$。因此，如果此布尔值为假，则表示该迭代是否收敛于（或最接近）主特征对；您将通过此展示一个反例。\n- 情况 C（在亏损矩阵上崩溃）：$A_{C}=\\begin{bmatrix}1 & 1 \\\\ 0 & 1\\end{bmatrix}$，初始向量为 $\\boldsymbol{v}_{C,0}=\\begin{bmatrix}1 \\\\ 0\\end{bmatrix}$。使用上述规则，以 $\\text{tol}=10^{-12}$ 和 $\\text{maxit}=20$ 运行单步瑞利商迭代。返回一个布尔值，指示是否检测到崩溃。\n- 情况 D（厄米矩阵的理想情况）：$A_{D}=\\begin{bmatrix}2 & 1 \\\\ 1 & 3\\end{bmatrix}$，初始向量为 $\\boldsymbol{v}_{D,0}=\\begin{bmatrix}1 \\\\ 0.2\\end{bmatrix}$。运行瑞利商迭代，其中 $\\text{tol}=10^{-12}$ 且 $\\text{maxit}=20$。返回一个布尔值，指示是否检测到收敛。\n\n角度单位不相关。不涉及物理单位。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个逗号分隔的列表，用方括号括起来，顺序为 $\\left[\\text{情况 A 结果},\\text{情况 B 结果},\\text{情况 C 结果},\\text{情况 D 结果}\\right]$。", "solution": "该问题要求实现瑞利商迭代（RQI）算法，并在一系列测试用例上进行检验，这些用例旨在揭示该算法在不同条件下的行为。下面是对每个情况的分析，解释了预期的布尔结果。\n\n**情况 A：复位移演示**\n对于非厄米矩阵，即使输入向量是实数，瑞利商也可能是复数。对于 $A_A = \\begin{bmatrix}1 & \\mathrm{i} \\\\ 0 & 2\\end{bmatrix}$ 和 $\\boldsymbol{v}_{A,0} = \\begin{bmatrix}1 \\\\ 1\\end{bmatrix}$，初始瑞利商 $\\mu_0$ 的计算如下：\n$$ \\mu_0 = R(\\boldsymbol{v}_{A,0}) = \\frac{\\boldsymbol{v}_{A,0}^{\\ast} A_A \\boldsymbol{v}_{A,0}}{\\boldsymbol{v}_{A,0}^{\\ast} \\boldsymbol{v}_{A,0}} = \\frac{\\begin{bmatrix}1 & 1\\end{bmatrix} \\begin{bmatrix}1 & \\mathrm{i} \\\\ 0 & 2\\end{bmatrix} \\begin{bmatrix}1 \\\\ 1\\end{bmatrix}}{\\begin{bmatrix}1 & 1\\end{bmatrix}\\begin{bmatrix}1 \\\\ 1\\end{bmatrix}} = \\frac{3+\\mathrm{i}}{2} = 1.5 + 0.5\\mathrm{i} $$\n其虚部 $\\operatorname{Im}(\\mu_0) = 0.5$，远大于 $10^{-12}$ 的阈值。因此，结果为 **True**。\n\n**情况 B：收敛到非主导特征对**\nRQI 收敛到其特征值最接近初始瑞利商的特征对，而非模最大的特征对。对于 $A_B = \\begin{bmatrix}1 & 10 \\\\ 0 & 5\\end{bmatrix}$，特征值为 $\\lambda_1 = 1$ 和 $\\lambda_2 = 5$（主导特征值）。初始向量 $\\boldsymbol{v}_{B,0} = \\begin{bmatrix}1 \\\\ 10^{-6}\\end{bmatrix}$ 非常接近于对应于 $\\lambda_1=1$ 的特征向量 $\\begin{bmatrix}1 \\\\ 0\\end{bmatrix}$。因此，初始瑞利商 $\\mu_0$ 将非常接近 1。算法将收敛到 $\\hat{\\mu} \\approx 1$。\n需要判断的不等式为 $|\\hat{\\mu} - 5| < |\\hat{\\mu} - 1|$。代入 $\\hat{\\mu} \\approx 1$，得到 $4 < 0$，这是错误的。因此，结果为 **False**。\n\n**情况 C：在亏损矩阵上崩溃**\n亏损矩阵（如此处的若尔当块 $A_C = \\begin{bmatrix}1 & 1 \\\\ 0 & 1\\end{bmatrix}$）可能会导致 RQI 失败。初始向量 $\\boldsymbol{v}_{C,0} = \\begin{bmatrix}1 \\\\ 0\\end{bmatrix}$ 正是对应于特征值 $\\lambda=1$ 的特征向量。\n因此，初始瑞利商 $\\mu_0 = R(\\boldsymbol{v}_{C,0}) = 1$。\n迭代的下一步需要求解 $(A_C - \\mu_0 I)\\boldsymbol{w}_0 = \\boldsymbol{v}_{C,0}$，即 $(A_C - I)\\boldsymbol{w}_0 = \\boldsymbol{v}_{C,0}$。\n$$ \\begin{bmatrix}0 & 1 \\\\ 0 & 0\\end{bmatrix} \\boldsymbol{w}_0 = \\begin{bmatrix}1 \\\\ 0\\end{bmatrix} $$\n该线性系统是奇异的且无解。这满足了问题中定义的“崩溃”条件。因此，结果为 **True**。\n\n**情况 D：厄米矩阵的理想情况**\n对于厄米矩阵（如此处的实对称矩阵 $A_D = \\begin{bmatrix}2 & 1 \\\\ 1 & 3\\end{bmatrix}$），RQI 表现出极快的（三次）收敛速度。只要初始向量不是某个特征向量的正交向量，算法就应能快速收敛。给定的初始向量 $\\boldsymbol{v}_{D,0}$ 是一个通用向量，预计算法将在少数几次迭代内满足收敛准则。因此，结果为 **True**。\n\n这些分析得出的预期结果序列为 `[True, False, True, True]`。所提供的 Python 代码正确地实现了这些测试并生成此输出。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef rayleigh_quotient_iteration(A, v0, tol, maxit):\n    \"\"\"\n    Performs Rayleigh Quotient Iteration to find an eigenpair of a matrix A.\n\n    Args:\n        A (np.ndarray): The square matrix.\n        v0 (np.ndarray): The initial vector.\n        tol (float): The tolerance for convergence.\n        maxit (int): The maximum number of iterations.\n\n    Returns:\n        tuple: A tuple containing:\n            - status (str): 'converged', 'breakdown', or 'max_iter_reached'.\n            - mu (complex): The last computed Rayleigh quotient.\n            - v (np.ndarray): The last computed vector.\n            - k (int): The number of iterations performed.\n    \"\"\"\n    v = v0.astype(np.complex128)\n    A = A.astype(np.complex128)\n    \n    mu_prev = np.inf\n    A_norm = np.linalg.norm(A, 2)\n    mu = 0.0 + 0.0j\n\n    for k in range(maxit):\n        # 1. Compute Rayleigh Quotient\n        v_norm_sq = (v.conj().T @ v).item()\n        if v_norm_sq == 0:\n            return 'breakdown', mu, v, k\n        \n        mu = (v.conj().T @ A @ v).item() / v_norm_sq\n\n        # 2. Check for convergence\n        v_norm = np.sqrt(v_norm_sq)\n        residual_norm = np.linalg.norm(A @ v - mu * v)\n        if residual_norm = tol * A_norm * v_norm:\n            return 'converged', mu, v, k\n        \n        if k > 0 and abs(mu - mu_prev) = tol:\n            return 'converged', mu, v, k\n        \n        # 3. Form shifted system and check for breakdown prior to solve\n        M = A - mu * np.identity(A.shape[0], dtype=np.complex128)\n        \n        # Condition number check\n        if np.linalg.cond(M) > 1e16:\n            return 'breakdown', mu, v, k\n\n        # 4. Solve the linear system\n        try:\n            w = np.linalg.solve(M, v)\n        except np.linalg.LinAlgError:\n            return 'breakdown', mu, v, k\n\n        # 5. Normalize for the next iteration\n        w_norm = np.linalg.norm(w)\n        if w_norm == 0:\n            return 'breakdown', mu, v, k\n            \n        v = w / w_norm\n        mu_prev = mu\n    \n    # If the loop completes without converging, it's max_iter_reached.\n    # The last computed mu is from the start of the last iteration.\n    return 'max_iter_reached', mu, v, k + 1\n\n\ndef solve():\n    \"\"\"\n    Executes the four test cases for Rayleigh Quotient Iteration as specified.\n    \"\"\"\n    results = []\n\n    # Case A: Complex shift demonstration\n    A_A = np.array([[1, 1j], [0, 2]], dtype=np.complex128)\n    v_A_0 = np.array([1, 1], dtype=np.complex128)\n    \n    mu_A_0_num = v_A_0.conj().T @ A_A @ v_A_0\n    mu_A_0_den = v_A_0.conj().T @ v_A_0\n    mu_A_0 = mu_A_0_num / mu_A_0_den\n    \n    # Check if the imaginary part is non-negligible\n    result_A = abs(mu_A_0.imag) > 1e-12\n    results.append(result_A)\n\n    # Common parameters for B, C, D\n    tol = 1e-12\n    maxit = 20\n\n    # Case B: Non-Hermitian, failure to converge to dominant eigenpair\n    A_B = np.array([[1, 10], [0, 5]], dtype=np.complex128)\n    v_B_0 = np.array([1, 1e-6], dtype=np.complex128)\n    \n    status_B, mu_hat_B, _, _ = rayleigh_quotient_iteration(A_B, v_B_0, tol, maxit)\n    \n    # Eigenvalues are 1 and 5. Dominant is 5.\n    lambda_dom_B = 5.0\n    lambda_other_B = 1.0\n    \n    result_B = abs(mu_hat_B - lambda_dom_B)  abs(mu_hat_B - lambda_other_B)\n    results.append(result_B)\n    \n    # Case C: Breakdown on a defective matrix\n    A_C = np.array([[1, 1], [0, 1]], dtype=np.complex128)\n    v_C_0 = np.array([1, 0], dtype=np.complex128)\n    \n    status_C, _, _, _ = rayleigh_quotient_iteration(A_C, v_C_0, tol, maxit)\n    \n    result_C = (status_C == 'breakdown')\n    results.append(result_C)\n\n    # Case D: Hermitian happy path\n    A_D = np.array([[2, 1], [1, 3]], dtype=np.complex128)\n    v_D_0 = np.array([1, 0.2], dtype=np.complex128)\n\n    status_D, _, _, _ = rayleigh_quotient_iteration(A_D, v_D_0, tol, maxit)\n    \n    result_D = (status_D == 'converged')\n    results.append(result_D)\n\n    # Final print statement\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "3265609"}]}