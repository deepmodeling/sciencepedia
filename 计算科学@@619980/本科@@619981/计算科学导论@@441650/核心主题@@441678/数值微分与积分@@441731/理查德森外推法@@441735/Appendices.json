{"hands_on_practices": [{"introduction": "在许多科学与工程计算中，我们经常使用数值方法来近似求解。这些方法的精度通常依赖于一个参数，如步长 $h$。本练习提供了一个典型情景：我们拥有一个一阶精度方法 ($O(h)$) 在不同步长下得到的两个近似值，任务是运用理查德森外推法将它们组合，以消除主导的线性误差项，从而获得一个更高阶的、更精确的估计值。[@problem_id:2197905]", "problem": "一个航空航天工程师团队正在模拟一个新型太空探测器的大气层进入过程。他们特别感兴趣的是估算探测器所经历的最大减速度，这是结构设计的一个关键参数。他们用于求解运动方程的数值算法具有一阶全局截断误差，这意味着估算值的误差为 $O(h)$ 阶，其中 $h$ 是模拟中使用的时间步长。\n\n设 $D(h)$ 为当模拟以时间步长 $h$ 运行时估算出的最大减速度。\n该团队进行了两次模拟：\n1.  使用 $h_1 = 0.4$ 秒的时间步长，他们发现最大减速度为 $D(0.4) = 58.6$ m/s$^2$。\n2.  使用减小的时间步长 $h_2 = 0.2$ 秒，他们发现最大减速度为 $D(0.2) = 59.3$ m/s$^2$。\n\n为了在不进行另一次使用更小时间步长的冗长模拟的情况下获得更准确的结果，工程师们决定对这两个估算值应用理查德森外推法。计算改进后的最大减速度估算值。答案以 m/s$^2$ 为单位，保留三位有效数字。", "solution": "因为数值方法具有一阶全局截断误差，所以估算量满足渐近误差模型\n$$\nD(h) = D^{\\ast} + C h + O(h^{2}),\n$$\n其中 $D^{\\ast}$ 是真实的最大减速度，$C$ 是一个与 $h$ 无关的常数。\n\n设 $h_{1} = 0.4$，$h_{2} = 0.2$，并定义加密比 $r = \\frac{h_{1}}{h_{2}} = 2$。则\n$$\nD(h_{1}) = D^{\\ast} + C h_{1} + O(h_{1}^{2}), \\quad D(h_{2}) = D^{\\ast} + C \\frac{h_{1}}{r} + O\\!\\left(\\frac{h_{1}^{2}}{r^{2}}\\right).\n$$\n通过理查德森外推法消除 $O(h)$ 项可得\n$$\nD_{\\text{RE}} = \\frac{r D(h_{2}) - D(h_{1})}{r - 1} = D(h_{2}) + \\frac{D(h_{2}) - D(h_{1})}{r - 1} = D^{\\ast} + O(h_{1}^{2}).\n$$\n代入 $r=2$，$D(0.4)=58.6$ 和 $D(0.2)=59.3$，\n$$\nD_{\\text{RE}} = \\frac{2 \\cdot 59.3 - 58.6}{2 - 1} = 118.6 - 58.6 = 60.0.\n$$\n保留三位有效数字，改进后的估算值为 $60.0$ m/s$^{2}$。", "answer": "$$\\boxed{60.0}$$", "id": "2197905"}, {"introduction": "仅仅会套用公式不足以称得上真正掌握。为了深入理解理查德森外推法的精髓，即误差抵消机制，本练习将引导你亲自推导外推公式。你将处理一个二阶精度方法 ($O(h^{2})$) 和一个非标准的步长缩减（$h/3$），这能更好地揭示该技术背后普适的代数原理。[@problem_id:2197931]", "problem": "一个数值模拟被用来估计一个物理量，其真实值用 $V$ 表示。该模拟产生的近似值，记为 $A(h)$，依赖于一个离散化参数 $h  0$。已知该近似的误差遵循以下关系：\n$$A(h) = V + C h^{2} + O(h^{4})$$\n其中 $C$ 是一个与 $h$ 无关的常数，而 $O(h^{4})$ 代表对于小的 $h$ 可以忽略的高阶项。\n\n一位分析师进行了两次模拟。第一次模拟使用步长 $h$，得到结果 $A(h)$。第二次模拟使用更精细的步长 $h/3$，得到结果 $A(h/3)$。为了改进对 $V$ 的估计，该分析师希望组合这两个结果以消去 $h^{2}$ 阶的主误差项。\n\n通过找到 $A(h)$ 和 $A(h/3)$ 的特定线性组合来消除 $O(h^2)$ 误差项，从而确定这个改进的 $V$ 的估计公式。", "solution": "我们已知渐近展开式\n$$A(h) = V + C h^{2} + O(h^{4}),$$\n并且，通过代入 $h \\mapsto h/3$ 并利用 $O\\!\\left((h/3)^{4}\\right)=O(h^{4})$，我们得到\n$$A(h/3) = V + C \\left(\\frac{h}{3}\\right)^{2} + O(h^{4}) = V + \\frac{C}{9} h^{2} + O(h^{4}).$$\n寻求一个线性组合 $\\alpha A(h/3) + \\beta A(h)$，它能消除 $O(h^{2})$ 项，同时保持主项等于 $V$：\n$$\\alpha A(h/3) + \\beta A(h) = (\\alpha + \\beta) V + C h^{2} \\left(\\frac{\\alpha}{9} + \\beta\\right) + O(h^{4}).$$\n施加两个条件\n$$(i)\\ \\ \\alpha + \\beta = 1,\\qquad (ii)\\ \\ \\frac{\\alpha}{9} + \\beta = 0,$$\n以确保 $V$ 的系数为 $1$ 并且 $h^{2}$ 项消失。求解，\n从 $(ii)$ 我们得到 $\\beta = -\\frac{\\alpha}{9}$；代入 $(i)$ 得到\n$$\\alpha - \\frac{\\alpha}{9} = 1 \\;\\Rightarrow\\; \\frac{8}{9}\\alpha = 1 \\;\\Rightarrow\\; \\alpha = \\frac{9}{8},\\quad \\beta = -\\frac{1}{8}.$$\n因此，消除了 $O(h^{2})$ 误差的改进估计是\n$$\\frac{9}{8} A(h/3) - \\frac{1}{8} A(h) = \\frac{9 A(h/3) - A(h)}{8},$$\n其截断误差为 $O(h^{4})$。", "answer": "$$\\boxed{\\frac{9 A(h/3) - A(h)}{8}}$$", "id": "2197931"}, {"introduction": "理论的价值最终体现在实践中。本练习将理查德森外推法置于一个真实的计算科学应用场景：求解常微分方程。你将实现基础的前向欧拉法，然后运用理查德森外推技术来提升其解的精度，亲身体验如何将一个一阶方法升级为二阶精度结果。[@problem_id:3226253] 这个编程实践将具体展示该技术在不修改核心算法的情况下，作为一种强大的“后处理”工具增强数值结果的可靠性。", "problem": "考虑一个由 $y'(t) = f(t, y(t))$ 给出的常微分方程 (ODE) 的初值问题 (IVP)，其初始条件为 $y(t_0) = y_0$。前向欧拉法源于导数作为有限差分极限的基本定义以及一阶泰勒展开的使用。在实践中，前向欧拉法从 $t_0$ 开始，以大小为 $h$ 的步长推进解，直到指定的最终时间 $T$，从而更新对精确解 $y(t_n)$ 的近似值 $y_n$，并在 $T$ 处得到一个我们记为 $y_h(T)$ 的近似值。已知在前向欧拉法中，在对 $f$ 和 $y(t)$ 的标准正则性假设下，全局离散化误差与步长 $h$ 呈线性关系。\n\n您的任务是：\n1. 实现一个函数，对于任意给定的函数 $f(t,y)$、初始条件 $y_0$、初始时间 $t_0$、最终时间 $T$ 和均匀步长 $h$，使用前向欧拉法计算 $y_h(T)$。假设 $T - t_0$ 是 $h$ 的整数倍。\n2. 假设欧拉法在 $T$ 处的近似值具有 $y_h(T) = y(T) + C h + D h^2 + \\mathcal{O}(h^3)$ 形式的渐近误差展开，其中常数 $C$ 和 $D$ 依赖于 $f$ 和解，但不依赖于 $h$。利用输出 $y_h(T)$ 和 $y_{h/2}(T)$，推导这两个近似值的线性组合，其常数权重与 $h$ 无关，该组合可以消去首项 $\\mathcal{O}(h)$ 误差项，并产生一个对 $y(T)$ 的 $\\mathcal{O}(h^2)$ 精度估计。然后在代码中实现这个理查德森外推估计量。\n3. 对于下方的每个测试用例，计算绝对误差 $\\lvert y_{\\text{extrap}}(T) - y(T) \\rvert$，其中 $y_{\\text{extrap}}(T)$ 是您的外推估计值，$y(T)$ 是在时间 $T$ 的精确解。\n\n使用以下测试套件。在所有情况下，取 $t_0 = 0$ 并使用所提供的 $h$ 以使 $(T - t_0)/h$ 为整数：\n\n- 测试 1 (正常路径，线性齐次 ODE)：$f(t,y) = y$，$y_0 = 1$，$T = 1$，$h = 0.2$。精确解为在 $t = T$ 处求值的 $y(t) = e^{t}$。\n- 测试 2 (线性非齐次 ODE)：$f(t,y) = y + t$，$y_0 = 0$，$T = 2$，$h = 0.4$。精确解为在 $t = T$ 处求值的 $y(t) = e^{t} - t - 1$。\n- 测试 3 (非线性逻辑斯谛增长)：$f(t,y) = r y \\left(1 - \\frac{y}{K}\\right)$，参数为 $r = 1$ 和 $K = 10$，$y_0 = 1$，$T = 3$，$h = 0.5$。精确解为在 $t = T$ 处求值的 $y(t) = \\frac{K}{1 + A e^{-r t}}$，其中 $A = \\frac{K - y_0}{y_0}$。\n- 测试 4 (边界情况，零导数)：$f(t,y) = 0$，$y_0 = 3$，$T = 1$，$h = 0.5$。精确解为在 $t = T$ 处求值的常数函数 $y(t) = 3$。\n\n您的程序应：\n- 实现前向欧拉法，为每个测试用例计算 $y_h(T)$ 和 $y_{h/2}(T)$。\n- 使用两个近似值 $y_h(T)$ 和 $y_{h/2}(T)$ 实现推导出的理查德森外推估计量，以获得在 $T$ 处的 $\\mathcal{O}(h^2)$ 估计。\n- 计算并记录每个测试用例的绝对误差，四舍五入到十位小数。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如，“[0.0123456789,0.0000001234,0.0012340000,0.0000000000]”），列表中的条目是测试 1 到测试 4 的绝对误差，每个都四舍五入到十位小数。", "solution": "该问题被评估为有效。\n\n### 步骤 1：提取已知信息\n- **问题类型**：常微分方程 (ODE) 的初值问题 (IVP)。\n- **ODE 形式**：$y'(t) = f(t, y(t))$。\n- **初始条件**：$y(t_0) = y_0$。\n- **数值方法**：前向欧拉法，其中 $y_{n+1} = y_n + h f(t_n, y_n)$。\n- **最终时间 $T$ 处的近似值**：$y_h(T)$。\n- **渐近误差展开**：$y_h(T) = y(T) + C h + D h^2 + \\mathcal{O}(h^3)$。\n- **约束条件**：$T - t_0$ 是步长 $h$ 的整数倍。\n- **任务 1**：实现一个用于前向欧拉法的函数来计算 $y_h(T)$。\n- **任务 2**：推导并实现一个对 $y(T)$ 的理查德森外推估计量，其精度为 $\\mathcal{O}(h^2)$，使用 $y_h(T)$ 和 $y_{h/2}(T)$。\n- **任务 3**：为四个测试用例计算绝对误差 $\\lvert y_{\\text{extrap}}(T) - y(T) \\rvert$。\n- **所有用例的初始时间**：$t_0 = 0$。\n\n- **测试用例 1**：\n  - $f(t,y) = y$\n  - $y_0 = 1$\n  - $T = 1$\n  - $h = 0.2$\n  - 精确解：$y(t) = e^{t}$\n\n- **测试用例 2**：\n  - $f(t,y) = y + t$\n  - $y_0 = 0$\n  - $T = 2$\n  - $h = 0.4$\n  - 精确解：$y(t) = e^{t} - t - 1$\n\n- **测试用例 3**：\n  - $f(t,y) = r y \\left(1 - \\frac{y}{K}\\right)$，其中 $r = 1, K = 10$\n  - $y_0 = 1$\n  - $T = 3$\n  - $h = 0.5$\n  - 精确解：$y(t) = \\frac{K}{1 + A e^{-r t}}$，其中 $A = \\frac{K - y_0}{y_0}$\n\n- **测试用例 4**：\n  - $f(t,y) = 0$\n  - $y_0 = 3$\n  - $T = 1$\n  - $h = 0.5$\n  - 精确解：$y(t) = 3$\n\n### 步骤 2：使用提取的已知信息进行验证\n该问题具有科学依据、适定且客观。\n1.  **科学性或事实性**：该问题建立在常微分方程数值分析的基本概念之上。前向欧拉法、其误差分析以及理查德森外推法都是标准的、在数学上合理的技巧。所提供的常微分方程是教学和研究中使用的经典示例。该问题没有任何科学或事实错误。\n2.  **适定性**：该问题是适定的。对于每个测试用例，函数 $f(t,y)$ 都足够光滑（在 $y$ 上满足李普希茨连续），这保证了初值问题解的存在性和唯一性。任务定义清晰，并提供了所有必要的数据（初始条件、参数、时间区间）。\n3.  **客观性**：语言精确且无偏见。任务是定量的，需要进行特定的计算，没有主观解释的余地。\n4.  **完整性**：该问题是自包含的。它明确了常微分方程、初始条件、步长、最终时间以及用于误差比较的精确解。约束条件 $(T - t_0)/h$ 是一个整数简化了实现并避免了歧义。\n\n### 步骤 3：结论与行动\n该问题**有效**。将提供完整解答。\n\n### 基于原理的解答\n该解答分三个阶段进行：首先，实现前向欧拉法；其次，推导理查德森外推公式；第三，将这些方法应用于指定的测试用例以计算所需的误差。\n\n**1. 前向欧拉法**\n前向欧拉法是求解形如 $y'(t) = f(t, y(t))$ 且 $y(t_0) = y_0$ 的初值问题的一阶数值方法。它在离散时间点 $t_n = t_0 + n h$ 处近似连续解 $y(t)$，其中 $h$ 是步长。该方法由 $y(t_{n+1})$ 在 $t_n$ 附近的一阶泰勒展开推导而来：\n$y(t_{n+1}) = y(t_n) + h y'(t_n) + \\mathcal{O}(h^2) = y(t_n) + h f(t_n, y(t_n)) + \\mathcal{O}(h^2)$。\n通过忽略 $\\mathcal{O}(h^2)$ 项，我们得到近似值 $y_n \\approx y(t_n)$ 的迭代公式：\n$$y_{n+1} = y_n + h f(t_n, y_n)$$\n从初始条件 $y_0$ 开始，我们可以对 $n = 0, 1, 2, \\dots, N-1$（其中 $N = (T-t_0)/h$）迭代应用此公式，以找到近似值 $y_N \\approx y(T)$。这就定义了函数 $y_h(T)$。\n\n**2. 理查德森外推法**\n理查德森外推法是一种提高数值近似精度的通用技术。我们已知，通过前向欧拉法得到的近似值 $y_h(T)$ 具有渐近误差展开：\n$$y_h(T) = y(T) + C h + D h^2 + \\mathcal{O}(h^3)$$\n这里，$y(T)$ 是精确解，而 $C$ 和 $D$ 是依赖于函数 $f$ 及其导数但不依赖于步长 $h$ 的常数。\n\n如果我们用减半的步长 $h/2$ 再次计算近似值，公式变为：\n$$y_{h/2}(T) = y(T) + C \\left(\\frac{h}{2}\\right) + D \\left(\\frac{h}{2}\\right)^2 + \\mathcal{O}(h^3)$$\n$$y_{h/2}(T) = y(T) + \\frac{1}{2} C h + \\frac{1}{4} D h^2 + \\mathcal{O}(h^3)$$\n我们的目标是找到 $y_h(T)$ 和 $y_{h/2}(T)$ 的一个线性组合，我们将其记为 $y_{\\text{extrap}}(T)$，它能为 $y(T)$ 提供一个更精确的估计。设 $y_{\\text{extrap}}(T) = \\alpha y_h(T) + \\beta y_{h/2}(T)$。代入误差展开式：\n$$y_{\\text{extrap}}(T) = \\alpha \\left(y(T) + C h + D h^2\\right) + \\beta \\left(y(T) + \\frac{1}{2} C h + \\frac{1}{4} D h^2\\right) + \\mathcal{O}(h^3)$$\n$$y_{\\text{extrap}}(T) = (\\alpha + \\beta) y(T) + \\left(\\alpha + \\frac{\\beta}{2}\\right) C h + \\left(\\alpha + \\frac{\\beta}{4}\\right) D h^2 + \\mathcal{O}(h^3)$$\n为了获得对 $y(T)$ 的一个 $\\mathcal{O}(h^2)$ 精度估计，我们需要 $y(T)$ 的系数为 $1$，并且首项误差项 $Ch$ 的系数为 $0$。这给出了一个关于 $\\alpha$ 和 $\\beta$ 的两个线性方程组：\n1. $\\alpha + \\beta = 1$\n2. $\\alpha + \\frac{\\beta}{2} = 0$\n由方程 (2)，我们得到 $\\alpha = -\\beta/2$。将其代入方程 (1) 得到 $-\\beta/2 + \\beta = 1$，化简为 $\\beta/2 = 1$，所以 $\\beta = 2$。因此，$\\alpha = -1$。\n因此，外推估计量为：\n$$y_{\\text{extrap}}(T) = 2 y_{h/2}(T) - y_h(T)$$\n我们来验证这个新估计的误差：\n$$y_{\\text{extrap}}(T) - y(T) = (2 y_{h/2}(T) - y_h(T)) - y(T)$$\n$$= \\left(2\\left(y(T) + \\frac{1}{2}Ch + \\frac{1}{4}Dh^2\\right) - \\left(y(T) + Ch + Dh^2\\right)\\right) - y(T) + \\mathcal{O}(h^3)$$\n$$= (2y(T) + Ch + \\frac{1}{2}Dh^2) - y(T) - Ch - Dh^2 - y(T) + \\mathcal{O}(h^3)$$\n$$= (2-1-1)y(T) + (1-1)Ch + (\\frac{1}{2}-1)Dh^2 + \\mathcal{O}(h^3) = -\\frac{1}{2} D h^2 + \\mathcal{O}(h^3)$$\n误差确实是 $h^2$ 阶的，因此该方法成功消除了首项误差项。\n\n**3. 计算流程**\n对于四个测试用例中的每一个，应用以下算法：\n1.  定义函数 $f(t,y)$、初始条件 $y_0, t_0$、最终时间 $T$ 和步长 $h$。\n2.  实现一个函数 `forward_euler(f, y0, t0, T, h)`，该函数执行迭代的欧拉更新并返回在时间 $T$ 的最终近似值。步数 $N$ 计算为整数 `(T - t0) / h`。\n3.  使用给定的步长 $h$ 计算近似值：$A_h = \\text{forward_euler}(f, y_0, t_0, T, h)$。\n4.  使用减半的步长 $h/2$ 计算近似值：$A_{h/2} = \\text{forward_euler}(f, y_0, t_0, T, h/2)$。\n5.  计算理查德森外推值：$y_{\\text{extrap}}(T) = 2 A_{h/2} - A_h$。\n6.  使用为特定测试用例提供的公式计算精确解 $y(T)$。\n7.  计算绝对误差：$E = \\lvert y_{\\text{extrap}}(T) - y(T) \\rvert$。\n8.  该测试用例的最终结果就是这个误差，四舍五入到十位小数。对所有测试用例重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes absolute errors for Richardson-extrapolated Euler method solutions\n    for a suite of ODE test cases.\n    \"\"\"\n\n    def forward_euler(f, y0, t0, T, h):\n        \"\"\"\n        Computes the solution of an IVP y'(t) = f(t, y) with y(t0) = y0 at time T\n        using the forward Euler method with step size h.\n        \"\"\"\n        t = t0\n        y = y0\n        \n        # The problem statement guarantees (T - t0) / h is an integer.\n        # Using int() directly is safe, but rounding is more robust for floats.\n        num_steps = int(round((T - t0) / h))\n\n        for _ in range(num_steps):\n            y = y + h * f(t, y)\n            t = t + h\n        \n        return y\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"f\": lambda t, y: y,\n            \"y0\": 1.0,\n            \"t0\": 0.0,\n            \"T\": 1.0,\n            \"h\": 0.2,\n            \"exact_sol\": lambda t: np.exp(t)\n        },\n        {\n            \"f\": lambda t, y: y + t,\n            \"y0\": 0.0,\n            \"t0\": 0.0,\n            \"T\": 2.0,\n            \"h\": 0.4,\n            \"exact_sol\": lambda t: np.exp(t) - t - 1.0\n        },\n        {\n            \"f\": lambda t, y: 1.0 * y * (1.0 - y / 10.0), # r=1, K=10\n            \"y0\": 1.0,\n            \"t0\": 0.0,\n            \"T\": 3.0,\n            \"h\": 0.5,\n            \"exact_sol\": lambda t: 10.0 / (1.0 + ((10.0 - 1.0) / 1.0) * np.exp(-1.0 * t))\n        },\n        {\n            \"f\": lambda t, y: 0.0,\n            \"y0\": 3.0,\n            \"t0\": 0.0,\n            \"T\": 1.0,\n            \"h\": 0.5,\n            \"exact_sol\": lambda t: 3.0\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        f = case[\"f\"]\n        y0 = case[\"y0\"]\n        t0 = case[\"t0\"]\n        T = case[\"T\"]\n        h = case[\"h\"]\n        exact_sol_func = case[\"exact_sol\"]\n\n        # 1. Compute approximations with step sizes h and h/2\n        y_h = forward_euler(f, y0, t0, T, h)\n        y_h_half = forward_euler(f, y0, t0, T, h / 2.0)\n\n        # 2. Apply Richardson extrapolation\n        y_extrap = 2.0 * y_h_half - y_h\n\n        # 3. Compute the exact solution\n        y_exact = exact_sol_func(T)\n        \n        # 4. Compute the absolute error\n        abs_error = abs(y_extrap - y_exact)\n        \n        results.append(abs_error)\n\n    # Format the results as strings rounded to 10 decimal places\n    # The f-string formatting ensures trailing zeros as in the example.\n    # The rounding prior to formatting correctly handles cases near the rounding boundary.\n    results_str = [f\"{round(res, 10):.10f}\" for res in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results_str)}]\")\n\nsolve()\n```", "id": "3226253"}]}