{"hands_on_practices": [{"introduction": "第一个实践练习是一个基础的手算训练。通过对一个稳态的对流-扩散方程进行离散化，你将直接应用迎风格式来处理对流项，并观察它如何与处理扩散项的中心差分格式相结合。求解由此产生的线性方程组将巩固你对这些数值方法如何在网格层面构建的理解。[@problem_id:1127421]", "problem": "考虑定义域 $x \\in [0, L]$ 上的一维稳态平流-扩散方程：\n$$\nu \\frac{d\\phi}{dx} - \\Gamma \\frac{d^2\\phi}{dx^2} = S_0\n$$\n其中，$u > 0$ 是恒定速度，$\\Gamma > 0$ 是恒定扩散系数，$S_0$ 是恒定源项。边界条件由 $\\phi(0) = \\phi_A$ 和 $\\phi(L) = \\phi_B$ 给出。\n\n该定义域使用包含 $N=4$ 个区间的均匀网格进行离散化，得到网格点 $x_i = i\\Delta x$，其中 $i=0, 1, 2, 3, 4$，$\\Delta x = L/N$。令 $\\phi_i$ 表示 $\\phi(x_i)$ 的数值近似值。\n\n使用有限差分法求解内部节点（$i=1, 2, 3$）处的 $\\phi_i$ 值。扩散项使用二阶中心差分格式进行近似。由于该问题具有平流主导的特性，平流项使用一阶迎风格式（或“迎风差分格式”，UDS）进行近似。给定 $u>0$，流动方向为从左到右。\n\n使用此数值格式，确定在定义域中点 $\\phi_2 = \\phi(x_2 = L/2)$ 处的解的值。请用给定的参数 $u, \\Gamma, S_0, L, \\phi_A$ 和 $\\phi_B$ 将您的答案表示为单个符号表达式。", "solution": "问题要求解给定平流-扩散方程在网格点 $x_2=L/2$ 处的数值解 $\\phi_2$。定义域被离散化为 $N=4$ 个区间，因此网格间距为 $\\Delta x = L/4$。网格点为 $x_0=0, x_1=L/4, x_2=L/2, x_3=3L/4, x_4=L$。未知数是内部节点的值：$\\phi_1, \\phi_2, \\phi_3$。边界值已知：$\\phi_0 = \\phi_A$ 和 $\\phi_4 = \\phi_B$。\n\n稳态平流-扩散方程为：\n$$u \\frac{d\\phi}{dx} - \\Gamma \\frac{d^2\\phi}{dx^2} = S_0$$\n\n我们在一个内部网格点 $x_i$ 处对该方程进行离散化。\n扩散项使用二阶中心差分格式进行离散化：\n$$ \\left.\\frac{d^2\\phi}{dx^2}\\right|_{x_i} \\approx \\frac{\\phi_{i+1} - 2\\phi_i + \\phi_{i-1}}{(\\Delta x)^2} $$\n平流项使用一阶迎风格式进行离散化。由于 $u > 0$，流动方向为从左到右，因此我们使用“迎风”方向（即左侧）的值：\n$$ \\left.\\frac{d\\phi}{dx}\\right|_{x_i} \\approx \\frac{\\phi_i - \\phi_{i-1}}{\\Delta x} $$\n\n将这些近似代入偏微分方程（PDE），我们得到内部节点 $i$ 的离散方程：\n$$ u \\left(\\frac{\\phi_i - \\phi_{i-1}}{\\Delta x}\\right) - \\Gamma \\left(\\frac{\\phi_{i+1} - 2\\phi_i + \\phi_{i-1}}{(\\Delta x)^2}\\right) = S_0 $$\n该方程对 $i=1, 2, 3$ 成立。\n\n为简化起见，我们将整个方程乘以 $(\\Delta x)^2$：\n$$ u \\Delta x (\\phi_i - \\phi_{i-1}) - \\Gamma (\\phi_{i+1} - 2\\phi_i + \\phi_{i-1}) = S_0 (\\Delta x)^2 $$\n现在，我们按 $\\phi_{i-1}$、$\\phi_i$ 和 $\\phi_{i+1}$ 对各项进行分组：\n$$ (-u \\Delta x - \\Gamma) \\phi_{i-1} + (u \\Delta x + 2\\Gamma) \\phi_i - \\Gamma \\phi_{i+1} = S_0 (\\Delta x)^2 $$\n这个方程可以写成一个三对角系统。我们为每个内部节点（$i=1, 2, 3$）写出它：\n\n对于 $i=1$：\n$$ (-u \\Delta x - \\Gamma) \\phi_0 + (u \\Delta x + 2\\Gamma) \\phi_1 - \\Gamma \\phi_2 = S_0 (\\Delta x)^2 $$\n由于 $\\phi_0 = \\phi_A$，我们有：\n$$ (u \\Delta x + 2\\Gamma) \\phi_1 - \\Gamma \\phi_2 = S_0 (\\Delta x)^2 + (u \\Delta x + \\Gamma) \\phi_A \\quad (1) $$\n\n对于 $i=2$：\n$$ (-u \\Delta x - \\Gamma) \\phi_1 + (u \\Delta x + 2\\Gamma) \\phi_2 - \\Gamma \\phi_3 = S_0 (\\Delta x)^2 \\quad (2) $$\n\n对于 $i=3$：\n$$ (-u \\Delta x - \\Gamma) \\phi_2 + (u \\Delta x + 2\\Gamma) \\phi_3 - \\Gamma \\phi_4 = S_0 (\\Delta x)^2 $$\n由于 $\\phi_4 = \\phi_B$，我们有：\n$$ (-u \\Delta x - \\Gamma) \\phi_2 + (u \\Delta x + 2\\Gamma) \\phi_3 = S_0 (\\Delta x)^2 + \\Gamma \\phi_B \\quad (3) $$\n\n我们得到了一个关于三个未知数 $\\phi_1, \\phi_2, \\phi_3$ 的三元线性方程组。我们需要求解 $\\phi_2$。使用代入法很方便。我们从(1)中分离出 $\\phi_1$，从(3)中分离出 $\\phi_3$：\n\n从 (1) 式得：\n$$ \\phi_1 = \\frac{S_0 (\\Delta x)^2 + (u \\Delta x + \\Gamma) \\phi_A + \\Gamma \\phi_2}{u \\Delta x + 2\\Gamma} $$\n\n从 (3) 式得：\n$$ \\phi_3 = \\frac{S_0 (\\Delta x)^2 + \\Gamma \\phi_B + (u \\Delta x + \\Gamma) \\phi_2}{u \\Delta x + 2\\Gamma} $$\n\n现在，将 $\\phi_1$ 和 $\\phi_3$ 的这些表达式代入方程 (2)：\n$$ -(u \\Delta x + \\Gamma) \\left( \\frac{S_0 (\\Delta x)^2 + (u \\Delta x + \\Gamma) \\phi_A + \\Gamma \\phi_2}{u \\Delta x + 2\\Gamma} \\right) + (u \\Delta x + 2\\Gamma) \\phi_2 - \\Gamma \\left( \\frac{S_0 (\\Delta x)^2 + \\Gamma \\phi_B + (u \\Delta x + \\Gamma) \\phi_2}{u \\Delta x + 2\\Gamma} \\right) = S_0 (\\Delta x)^2 $$\n\n将整个方程乘以 $(u \\Delta x + 2\\Gamma)$ 以消去分母：\n$$ -(u \\Delta x + \\Gamma) \\left[ S_0 (\\Delta x)^2 + (u \\Delta x + \\Gamma) \\phi_A + \\Gamma \\phi_2 \\right] + (u \\Delta x + 2\\Gamma)^2 \\phi_2 - \\Gamma \\left[ S_0 (\\Delta x)^2 + \\Gamma \\phi_B + (u \\Delta x + \\Gamma) \\phi_2 \\right] = S_0 (\\Delta x)^2 (u \\Delta x + 2\\Gamma) $$\n\n现在，将所有含 $\\phi_2$ 的项收集到左侧，所有其他项收集到右侧：\n$$ \\phi_2 \\left[ -(u \\Delta x + \\Gamma)\\Gamma + (u \\Delta x + 2\\Gamma)^2 - \\Gamma(u \\Delta x + \\Gamma) \\right] = S_0 (\\Delta x)^2 (u \\Delta x + 2\\Gamma) + (u \\Delta x + \\Gamma)(S_0 (\\Delta x)^2 + (u \\Delta x + \\Gamma)\\phi_A) + \\Gamma(S_0 (\\Delta x)^2 + \\Gamma\\phi_B) $$\n\n简化 $\\phi_2$ 的系数：\n$$ \\text{Coeff}(\\phi_2) = (u \\Delta x + 2\\Gamma)^2 - 2\\Gamma(u \\Delta x + \\Gamma) $$\n$$ = (u^2(\\Delta x)^2 + 4u\\Delta x\\Gamma + 4\\Gamma^2) - (2u\\Delta x\\Gamma + 2\\Gamma^2) $$\n$$ = u^2(\\Delta x)^2 + 2u\\Delta x\\Gamma + 2\\Gamma^2 $$\n\n简化右侧（RHS）：\n$$ \\text{RHS} = S_0 (\\Delta x)^2 (u \\Delta x + 2\\Gamma) + S_0 (\\Delta x)^2(u \\Delta x + \\Gamma) + (u \\Delta x + \\Gamma)^2 \\phi_A + S_0 (\\Delta x)^2 \\Gamma + \\Gamma^2 \\phi_B $$\n$$ = S_0 (\\Delta x)^2 (u \\Delta x + 2\\Gamma + u \\Delta x + \\Gamma + \\Gamma) + (u \\Delta x + \\Gamma)^2 \\phi_A + \\Gamma^2 \\phi_B $$\n$$ = S_0 (\\Delta x)^2 (2u \\Delta x + 4\\Gamma) + (u \\Delta x + \\Gamma)^2 \\phi_A + \\Gamma^2 \\phi_B $$\n$$ = 2S_0 (\\Delta x)^2 (u \\Delta x + 2\\Gamma) + (u \\Delta x + \\Gamma)^2 \\phi_A + \\Gamma^2 \\phi_B $$\n\n现在，求解 $\\phi_2$：\n$$ \\phi_2 = \\frac{2S_0 (\\Delta x)^2 (u \\Delta x + 2\\Gamma) + (u \\Delta x + \\Gamma)^2 \\phi_A + \\Gamma^2 \\phi_B}{u^2(\\Delta x)^2 + 2u\\Delta x\\Gamma + 2\\Gamma^2} $$\n\n最后，我们代入 $\\Delta x = L/4$：\n$u \\Delta x = uL/4$ 和 $(\\Delta x)^2 = L^2/16$。\n\n分子：\n$$ \\text{Num} = 2S_0 \\frac{L^2}{16} \\left(\\frac{uL}{4} + 2\\Gamma\\right) + \\left(\\frac{uL}{4} + \\Gamma\\right)^2 \\phi_A + \\Gamma^2 \\phi_B $$\n$$ = \\frac{S_0 L^2}{8} \\left(\\frac{uL+8\\Gamma}{4}\\right) + \\left(\\frac{uL+4\\Gamma}{4}\\right)^2 \\phi_A + \\Gamma^2 \\phi_B $$\n$$ = \\frac{S_0 L^2(uL+8\\Gamma)}{32} + \\frac{(uL+4\\Gamma)^2}{16} \\phi_A + \\Gamma^2 \\phi_B $$\n为了合并各项，使用公分母 32：\n$$ = \\frac{1}{32} \\left[ S_0 L^2(uL+8\\Gamma) + 2(uL+4\\Gamma)^2 \\phi_A + 32\\Gamma^2 \\phi_B \\right] $$\n\n分母：\n$$ \\text{Denom} = u^2 \\left(\\frac{L^2}{16}\\right) + 2u\\left(\\frac{L}{4}\\right)\\Gamma + 2\\Gamma^2 $$\n$$ = \\frac{u^2 L^2}{16} + \\frac{uL\\Gamma}{2} + 2\\Gamma^2 $$\n使用公分母 16：\n$$ = \\frac{1}{16} \\left[ u^2 L^2 + 8uL\\Gamma + 32\\Gamma^2 \\right] $$\n\n现在，计算分数 $\\phi_2 = \\text{分子}/\\text{分母}$：\n$$ \\phi_2 = \\frac{\\frac{1}{32} \\left[ S_0 L^2(uL+8\\Gamma) + 2(uL+4\\Gamma)^2 \\phi_A + 32\\Gamma^2 \\phi_B \\right]}{\\frac{1}{16} \\left[ u^2 L^2 + 8uL\\Gamma + 32\\Gamma^2 \\right]} $$\n$$ \\phi_2 = \\frac{16}{32} \\frac{S_0 L^2(uL+8\\Gamma) + 2(uL+4\\Gamma)^2 \\phi_A + 32\\Gamma^2 \\phi_B}{u^2 L^2 + 8uL\\Gamma + 32\\Gamma^2} $$\n$$ \\phi_2 = \\frac{S_0 L^2(uL+8\\Gamma) + 2(uL+4\\Gamma)^2 \\phi_A + 32\\Gamma^2 \\phi_B}{2(u^2 L^2 + 8uL\\Gamma + 32\\Gamma^2)} $$\n这就是 $\\phi_2$ 的最终表达式。", "answer": "$$ \\boxed{\\frac{S_0 L^2(uL+8\\Gamma) + 2(uL+4\\Gamma)^2 \\phi_A + 32\\Gamma^2 \\phi_B}{2(u^2 L^2 + 8uL\\Gamma + 32\\Gamma^2)}} $$", "id": "1127421"}, {"introduction": "在应用了迎风格式之后，我们现在来探究一个关键问题：为什么在处理对流问题时，它通常比看起来更精确的中心差分格式更受青睐？这个问题将引导你使用修正方程进行概念分析，揭示这些格式隐藏的数值特性。你将学会区分数值耗散和数值色散，为迎风格式在对流主导流动中的稳定性提供理论依据。[@problem_id:3201516]", "problem": "考虑一维线性平流方程 $u_t + a\\,u_x = 0$，其平流速度 $a0$ 为常数，定义在空间区间 $0 \\le x \\le L$ 上。该方程满足入流边界条件 $u(0,t) = u_{\\mathrm{in}}(t)$ (对所有 $t \\ge 0$) 和给定的初始条件 $u(x,0) = u_0(x)$。在实践中，有两种空间离散化方法在均匀网格 $x_i = i\\,\\Delta x$ ($\\Delta x0$) 上被广泛使用：$u_x$ 的二阶中心差分近似和与特征方向一致的一阶迎风差分。时间积分采用稳定的显式方法，时间步长为 $\\Delta t0$，库朗-弗里德里希-列维 (CFL) 数定义为 $\\nu = a\\,\\Delta t/\\Delta x$。\n\n在 $a0$ 且入流位于 $x=0$ 的数值实验中，从业者们经常报告在使用中心差分时，在 $x=0$ 附近会出现一个小的伪边界层，而在 $0  \\nu  1$ 的条件下使用迎风差分时则不会出现可见的边界层。从控制方程 $u_t + a\\,u_x = 0$ 出发，使用关于 $(x,t)$ 的第一性原理泰勒展开，通过修正方程分析每种格式的主阶行为，确定哪个陈述最好地解释了这些观测结果及其对 $x=0$ 处入流边界的依赖性。\n\n选择最佳选项：\n\nA. 对于 $a0$ 且入流在 $x=0$ 的情况，$u_x$ 的中心差分格式在其修正方程中产生一个形式为 $\\propto u_{xxx}$ 的主阶色散项，且没有起稳定作用的 $u_{xx}$ 项，这使得该格式是非耗散的；这种非耗散的对称模板与入流边界处的单边物理特性不符，并会产生振荡的边界层伪影。相比之下，与 $a0$ 一致的迎风格式有一个主导的人工耗散项 $\\propto u_{xx}$，当 $0  \\nu  1$ 时其系数为正，这会阻尼边界振荡并消除伪边界层。\n\nB. 对于 $a0$ 和 $0  \\nu  1$ 的情况，迎风格式在 $x=0$ 附近引入了负人工耗散（反耗散），这会放大边界振荡，而中心差分格式贡献了一个正的 $u_{xx}$ 项来平滑解；因此，中心差分消除了伪边界层，而迎风格式产生了伪边界层。\n\nC. 因为对于 $a0$，特征线在 $x=L$ 处出射，所以由中心差分引起的任何伪数值边界层必须在 $x=L$（出流边界）处形成，而不是在 $x=0$（入流边界）处形成，并且迎风格式对边界层没有任何影响。\n\nD. 迎风格式的修正方程是纯色散的，其主导项是 $u_{xxx}$ 项而没有 $u_{xx}$ 耗散项，因此振荡持续存在；相比之下，中心差分格式增加了一个主导的 $u_{xx}$ 耗散项，它选择性地阻尼 $x=0$ 附近的边界振荡，从而消除了边界层。", "solution": "问题陈述具有科学依据、是适定的且客观的。它描述了计算流体动力学中的一个标准场景，并要求基于一种经典分析技术（修正方程）给出解释。该问题是有效的。\n\n核心任务是分析两种用于一维线性平流方程 $u_t + a\\,u_x = 0$（其中平流速度 $a  0$）的数值格式的主阶行为。这个分析是通过推导修正偏微分方程来完成的，每个有限差分格式都比原始 PDE 更精确地对应于其修正方程。修正方程包含了主阶截断误差项，这些项揭示了格式的人工耗散和色散特性。我们假设一个均匀网格，网格间距为 $\\Delta x$，时间步长为 $\\Delta t$，并定义库朗-弗里德里希-列维 (CFL) 数为 $\\nu = a\\,\\Delta t/\\Delta x$。\n\n**1. 中心差分格式**\n\n问题提到了一种用于时间积分的“稳定的显式方法”。最简单的组合，即时间向前中心差分（FTCS）格式，对于平流方程是无条件不稳定的。一种使用中心差分的常见稳定格式是时间上的二阶蛙跳格式，结合空间上的二阶中心差分：\n$$ \\frac{u_i^{n+1} - u_i^{n-1}}{2\\Delta t} + a \\frac{u_{i+1}^n - u_{i-1}^n}{2\\Delta x} = 0 $$\n为了找到修正方程，我们对每一项在点 $(x_i, t_n)$ 附近进行泰勒级数展开。\n\\begin{align*} u_i^{n\\pm 1} = u \\pm u_t \\Delta t + \\frac{1}{2}u_{tt}\\Delta t^2 \\pm \\frac{1}{6}u_{ttt}\\Delta t^3 + \\mathcal{O}(\\Delta t^4) \\\\ u_{i\\pm 1}^n = u \\pm u_x \\Delta x + \\frac{1}{2}u_{xx}\\Delta x^2 \\pm \\frac{1}{6}u_{xxx}\\Delta x^3 + \\mathcal{O}(\\Delta x^4) \\end{align*}\n将这些展开式代入差分方程并简化得到：\n$$ (u_t + \\frac{1}{6}u_{ttt}\\Delta t^2 + \\dots) + a(u_x + \\frac{1}{6}u_{xxx}\\Delta x^2 + \\dots) = 0 $$\n这给出了截断误差。为了得到修正方程，我们将时间导数用空间导数表示。从原始 PDE 可知，主阶上 $u_t = -a u_x$。这意味着 $u_{ttt} \\approx -a^3 u_{xxx}$。将此代入上述方程：\n$$ u_t + a u_x + \\frac{1}{6}(-a^3 u_{xxx})\\Delta t^2 + \\frac{a}{6}u_{xxx}\\Delta x^2 + \\dots = 0 $$\n$$ u_t + a u_x = -\\frac{a}{6}(\\Delta x^2 - a^2\\Delta t^2)u_{xxx} + \\dots $$\n用 CFL 数 $\\nu$ 重写：\n$$ u_t + a u_x = -\\frac{a\\Delta x^2}{6}(1 - \\nu^2)u_{xxx} + \\dots $$\n主阶误差项与 $u_{xxx}$ 成正比。这是一个色散项，而不是耗散项（耗散项将与偶数阶导数如 $u_{xx}$ 成正比）。该格式是非耗散的。对于 $a0$，信息从左向右传播。第一个内部节点 $x_1$ 处的中心差分模板考虑了节点 $x_0$ 和 $x_2$。它向“下游”的 $x_2$ 寻求信息，这与纯平流（特征方向）的物理特性不一致。在入流边界处的这种不一致性，加上格式的非耗散性质，会产生未被阻尼的伪高频振荡，从而导致观测到的边界层伪影。\n\n**2. 一阶迎风格式**\n\n对于 $a0$，“迎风”方向来自左侧。$u_x$ 的一阶迎风近似是一阶后向差分，$u_x \\approx (u_i - u_{i-1})/\\Delta x$。使用时间上的一阶向前差分（前向欧拉法），该格式为：\n$$ \\frac{u_i^{n+1} - u_i^n}{\\Delta t} + a \\frac{u_i^n - u_{i-1}^n}{\\Delta x} = 0 $$\n对各项在 $(x_i, t_n)$ 附近进行泰勒展开：\n\\begin{align*} u_i^{n+1} = u + u_t \\Delta t + \\frac{1}{2}u_{tt}\\Delta t^2 + \\mathcal{O}(\\Delta t^3) \\\\ u_{i-1}^n = u - u_x \\Delta x + \\frac{1}{2}u_{xx}\\Delta x^2 - \\frac{1}{6}u_{xxx}\\Delta x^3 + \\mathcal{O}(\\Delta x^4) \\end{align*}\n代入差分方程：\n$$ (u_t + \\frac{1}{2}u_{tt}\\Delta t + \\dots) + a(u_x - \\frac{1}{2}u_{xx}\\Delta x + \\dots) = 0 $$\n再次，我们使用 $u_t \\approx -a u_x$ 从而 $u_{tt} \\approx a^2 u_{xx}$ 来替换误差项中的时间导数：\n$$ u_t + a u_x + \\frac{1}{2}(a^2 u_{xx})\\Delta t - \\frac{a}{2}u_{xx}\\Delta x + \\dots = 0 $$\n$$ u_t + a u_x = \\left(\\frac{a\\Delta x}{2} - \\frac{a^2\\Delta t}{2}\\right)u_{xx} + \\dots $$\n提出公因子并使用 $\\nu = a\\Delta t/\\Delta x$：\n$$ u_t + a u_x = \\frac{a\\Delta x}{2}(1 - \\frac{a\\Delta t}{\\Delta x})u_{xx} + \\dots = \\frac{a\\Delta x}{2}(1 - \\nu)u_{xx} + \\dots $$\n主阶误差项与 $u_{xx}$ 成正比。这是一个耗散项，类似于物理扩散。这个“人工耗散”的系数是 $D = \\frac{a\\Delta x}{2}(1-\\nu)$。问题陈述 $a0$，$\\Delta x0$，以及 $0  \\nu  1$。在这些条件下，系数 $D$ 严格为正。一个正的耗散项具有平滑或阻尼效应，特别是对高频振荡。在节点 $x_i$ 处的迎风模板使用来自节点 $x_i$ 和 $x_{i-1}$ 的信息，这与 $a0$ 时的物理特征方向一致。这种一致性，加上格式固有的数值耗散，有效地阻尼了可能在入流边界处产生的任何伪振荡，从而防止了可见边界层的形成。\n\n**选项评估**\n\n*   **A. 对于 $a0$ 且入流在 $x=0$ 的情况，$u_x$ 的中心差分格式在其修正方程中产生一个形式为 $\\propto u_{xxx}$ 的主阶色散项，且没有起稳定作用的 $u_{xx}$ 项，这使得该格式是非耗散的；这种非耗散的对称模板与入流边界处的单边物理特性不符，并会产生振荡的边界层伪影。相比之下，与 $a0$ 一致的迎风格式有一个主导的人工耗散项 $\\propto u_{xx}$，当 $0  \\nu  1$ 时其系数为正，这会阻尼边界振荡并消除伪边界层。**\n    此陈述准确地反映了我们的推导。中心差分格式是非耗散的，其主阶误差是色散的（$\\propto u_{xxx}$），导致边界振荡。迎风格式是耗散的，其主导的人工耗散项（$\\propto u_{xx}$）在 $0  \\nu  1$ 时系数为正，从而阻尼振荡。这是一个全面且正确的解释。**正确**。\n\n*   **B. 对于 $a0$ 和 $0  \\nu  1$ 的情况，迎风格式在 $x=0$ 附近引入了负人工耗散（反耗散），这会放大边界振荡，而中心差分格式贡献了一个正的 $u_{xx}$ 项来平滑解；因此，中心差分消除了伪边界层，而迎风格式产生了伪边界层。**\n    这是不正确的。对于 $0  \\nu  1$，迎风格式的人工耗散是正的，而不是负的。负耗散会导致不稳定。稳定的中心差分格式的主阶误差是色散的（$u_{xxx}$），而不是耗散的（$u_{xx}$）。其结论与观测到的事实相反。**不正确**。\n\n*   **C. 因为对于 $a0$，特征线在 $x=L$ 处出射，所以由中心差分引起的任何伪数值边界层必须在 $x=L$（出流边界）处形成，而不是在 $x=0$（入流边界）处形成，并且迎风格式对边界层没有任何影响。**\n    这是不正确的。虽然特征线确实在 $x=L$ 处出射，但中心差分格式的伪边界层通常在入流边界（$x=0$）处最为明显。这是因为对称模板与在此处施加单边物理边界条件不一致。此外，声称迎风格式“没有影响”是错误的；正是其数值耗散阻止了边界层的形成。**不正确**。\n\n*   **D. 迎风格式的修正方程是纯色散的，其主导项是 $u_{xxx}$ 项而没有 $u_{xx}$ 耗散项，因此振荡持续存在；相比之下，中心差分格式增加了一个主导的 $u_{xx}$ 耗散项，它选择性地阻尼 $x=0$ 附近的边界振荡，从而消除了边界层。**\n    这是不正确的。它颠倒了两种格式的特性。迎风格式主要是耗散的（$u_{xx}$ 项），而中心差分格式主要是色散的（$u_{xxx}$ 项）。**不正确**。", "answer": "$$\\boxed{A}$$", "id": "3201516"}, {"introduction": "最后的练习将理论与实践联系起来，要求你实现迎风格式，更重要的是，通过一系列单元测试来验证其正确性。每个测试都旨在确认该格式的一个基本数学属性，例如守恒性和有界性，这些对于构建稳健的科学计算软件至关重要。这个实践强调了这样一个理念：编写代码只是成功的一半，确保其行为与理论预测一致在计算科学中是至关重要的。[@problem_id:3201531]", "problem": "您需要实现并验证用于周期性域上一维线性平流方程的一阶迎风有限差分法。其控制偏微分方程为 $u_t + a\\,u_x = 0$，其中 $a$ 是恒定的平流速度，$u(x,t)$ 是平流场。离散化应在长度为 $L$ 的周期性区间上的一个包含 $N$ 个点的均匀网格上进行，网格点为 $x_i = i\\,\\Delta x$，$i \\in \\{0,1,\\dots,N-1\\}$，且 $\\Delta x = L/N$。假设 $a > 0$ 并强制施加周期性边界条件，使得索引 $0$ 的左邻点是索引 $N-1$。时间积分必须使用与一阶迎风差分相一致的单步显式方法；等效地，使用时间步长 $\\Delta t$ 的 Courant-Friedrichs-Lewy (CFL) 数 $C = a\\,\\Delta t/\\Delta x$ 并实现典范的正速度迎风更新。您不能假设任何特定的解析解；相反，您需要验证离散化本身的属性。\n\n您的任务是编写一个完整的程序，该程序：\n1. 在周期性网格上为 $a0$ 和给定的 CFL 数 $C$ 实现一阶迎风格式。\n2. 执行以下四个单元测试，每个测试返回一个表示通过或失败的布尔值，并使用下面指定的确切参数值。所有涉及浮点运算的比较都必须使用 $\\varepsilon = 10^{-12}$ 的容差。\n\n测试 A (在常数平移下的不变性)：\n- 参数：$N = 200$, $L = 1$, $a = 1$, $C = 0.3$, 时间步数 $K = 100$。\n- 网格：$x_i = i\\,\\Delta x$，其中 $\\Delta x = L/N$。\n- 初始条件 $u_i^0 = \\sin(2\\pi x_i) + 0.2\\cos(4\\pi x_i)$。\n- 常数平移 $\\kappa = 0.7$。\n- 对 $u^0$ 和 $u^0 + \\kappa$ 运行该格式 $K$ 步。令 $u^{K}$ 和 $\\tilde{u}^{K}$ 表示两个最终状态。如果 $\\max_i | (\\tilde{u}_i^K - u_i^K) - \\kappa | \\le \\varepsilon$，则测试通过。\n\n测试 B (周期性边界下的守恒性)：\n- 参数：$N = 256$, $L = 2$, $a = 0.8$, $C = 0.6$, 时间步数 $K = 150$。\n- 网格：$x_i = i\\,\\Delta x$，其中 $\\Delta x = L/N$。\n- 初始条件 $u_i^0 = 0.5 + 0.25\\sin(2\\pi x_i/L) + 0.1\\cos(6\\pi x_i/L)$。\n- 运行该格式 $K$ 步以获得 $u^{K}$。如果 $\\left| \\sum_{i=0}^{N-1} u_i^K - \\sum_{i=0}^{N-1} u_i^0 \\right| \\le \\varepsilon$，则测试通过。\n\n测试 C (当 $0 \\le C \\le 1$ 时的保界性)：\n- 参数：$N = 300$, $L = 1$, $a = 1$, $C = 0.95$, 时间步数 $K = 400$。\n- 网格：$x_i = i\\,\\Delta x$，其中 $\\Delta x = L/N$。\n- 初始条件 $u_i^0 = 0.3 + 0.4\\sin^2(2\\pi x_i)$，因此 $\\min_i u_i^0 = 0.3$ 且 $\\max_i u_i^0 = 0.7$。\n- 运行该格式 $K$ 步，在每一步 $n$ 后检查 $\\min_i u_i^n \\ge 0.3 - \\varepsilon$ 和 $\\max_i u_i^n \\le 0.7 + \\varepsilon$ 是否成立。如果对于所有步数 $n \\in \\{1,2,\\dots,K\\}$，两个不等式都成立，则测试通过。\n\n测试 D ($C=1$ 时阶梯平移的精确性)：\n- 参数：$N = 128$, $L = 1$, $a = 1$, $C = 1$, 时间步数 $K = 37$。\n- 通过选择 $m_0 = 40$ 并在网格索引上定义一个阶梯初始条件：如果 $i  m_0$，则 $u_i^0 = 1$，否则 $u_i^0 = 0$。\n- 运行该格式 $K$ 步以获得 $u^{K}$。对于 $C = 1$ 和 $a  0$，迎风更新变为每步一个网格单元的纯循环平移。如果对所有 $i$ 都有 $u_i^K = u^0_{(i-K)\\pmod N}$（在容差 $\\varepsilon$ 范围内），则测试通过；等效地，如果 $\\max_i |u_i^K - u^0_{(i-K)\\pmod N}| \\le \\varepsilon$。\n\n实现要求：\n- 仅使用均匀周期性网格和适用于 $a0$ 的一阶迎风差分。\n- 完全按照上面给出的方式使用指定的参数值。\n- 对所有浮点比较使用 $\\varepsilon = 10^{-12}$ 的容差。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含测试 A、B、C 和 D 的四个布尔结果，按此顺序排列，形式为用方括号括起来的逗号分隔列表（例如，“[True,False,True,True]”）。程序必须是自包含的，并且不得读取任何输入。\n\n注意：本问题不需要物理单位。三角函数中出现的所有角度均以弧度为单位。所需的输出值严格为布尔值。", "solution": "该问题是有效的，因为它提出了一个来自计算科学领域的适定的、科学上合理的任务：实现并验证用于线性平流方程的一阶迎风法。所有参数和条件都得到了充分的规定并且是一致的。\n\n解决方案首先推导数值格式，然后实现指定的四个测试，每个测试都旨在验证离散化的一个基本属性。\n\n控制偏微分方程 (PDE) 是一维线性平流方程：\n$$\nu_t + a\\,u_x = 0\n$$\n其中 $u(x,t)$ 是被平流的标量场，$t$ 是时间，$x$ 是空间坐标，$a$ 是恒定的平流速度，给定为正值 ($a > 0$)。该方程在长度为 $L$ 的周期性域上求解。\n\n该域被离散化为一个包含 $N$ 个点的均匀网格，由 $i \\in \\{0, 1, \\dots, N-1\\}$ 索引。网格点位于 $x_i = i\\,\\Delta x$，其中网格间距为 $\\Delta x = L/N$。在时间 $t_n = n\\,\\Delta t$ 时该网格上的解用向量 $u^n$ 表示，其分量为 $u_i^n \\approx u(x_i, t_n)$。\n\n为了推导数值更新规则，我们逐项离散化 PDE。对于时间导数 $u_t$，我们使用一阶向前欧拉格式：\n$$\nu_t \\approx \\frac{u_i^{n+1} - u_i^n}{\\Delta t}\n$$\n对于空间导数 $u_x$，我们使用一阶迎风法。由于平流速度 $a$ 为正，“风”或信息从左向右流动（从较小的 $x$ 到较大的 $x$）。因此，网格点 $x_i$ 处的空间导数应使用 $x_i$ 及其“迎风”邻点 $x_{i-1}$ 的值来近似。这对应于一阶向后差分：\n$$\nu_x \\approx \\frac{u_i^n - u_{i-1}^n}{\\Delta x}\n$$\n将这些离散近似代入 PDE，得到完全离散化的方程：\n$$\n\\frac{u_i^{n+1} - u_i^n}{\\Delta t} + a \\left( \\frac{u_i^n - u_{i-1}^n}{\\Delta x} \\right) = 0\n$$\n重新整理以求解下一时间步的解 $u_i^{n+1}$，得到：\n$$\nu_i^{n+1} = u_i^n - a \\frac{\\Delta t}{\\Delta x} (u_i^n - u_{i-1}^n)\n$$\n我们将 Courant-Friedrichs-Lewy (CFL) 数定义为无量纲量 $C = a\\,\\Delta t/\\Delta x$。将 $C$ 代入方程，得到最终的更新规则：\n$$\nu_i^{n+1} = u_i^n - C (u_i^n - u_{i-1}^n)\n$$\n这可以重写为：\n$$\nu_i^{n+1} = (1 - C)u_i^n + C u_{i-1}^n\n$$\n这种形式特别富有洞察力。问题指定了周期性边界条件，这意味着域是环绕的。对于网格点 $i=0$，其左邻点 $i-1$ 是网格上的最后一个点，即 $i=N-1$。这可以通过对索引进行模运算，或更高效地，通过对解向量进行循环移位操作来实现。\n\n这四个测试验证了该数值格式的关键属性。\n\n测试 A (在常数平移下的不变性)：该格式是一个作用于解向量 $u^n$ 的线性算子。设单时间步的算子为 $S_C$，则 $u^{n+1} = S_C(u^n)$。$K$ 步的算子为 $S_C^K$。线性性质意味着 $S_C^K(u^0 + \\kappa \\mathbf{1}) = S_C^K(u^0) + S_C^K(\\kappa \\mathbf{1})$，其中 $\\mathbf{1}$ 是全为 1 的向量，$\\kappa$ 是一个常数。对于一个常数场 $u_i^n = \\kappa$（对所有 $i$），更新规则给出 $u_i^{n+1} = (1-C)\\kappa + C\\kappa = \\kappa$。因此，常数场是一个稳态，且 $S_C^K(\\kappa \\mathbf{1}) = \\kappa \\mathbf{1}$。所以，一个初始平移场的最终状态应该是原始场最终状态的平移：$\\tilde{u}^K = u^K + \\kappa$。该测试通过检查 $\\max_i |(\\tilde{u}_i^K - u_i^K) - \\kappa|$ 是否接近于零来验证此属性。\n\n测试 B (守恒性)：该格式在周期性域上守恒一个量的总“质量”或总和。将更新规则对所有网格点 $i$ 从 $0$ 到 $N-1$ 求和：\n$$\n\\sum_{i=0}^{N-1} u_i^{n+1} = \\sum_{i=0}^{N-1} \\left( (1-C)u_i^n + C u_{i-1}^n \\right) = (1-C)\\sum_{i=0}^{N-1} u_i^n + C \\sum_{i=0}^{N-1} u_{i-1}^n\n$$\n由于周期性，数值集合 $\\{u_{i-1}^n\\}_{i=0}^{N-1}$ 只是 $\\{u_i^n\\}_{i=0}^{N-1}$ 的一个循环置换，因此它们的和是相同的：$\\sum_{i=0}^{N-1} u_{i-1}^n = \\sum_{i=0}^{N-1} u_i^n$。因此方程变为：\n$$\n\\sum_{i=0}^{N-1} u_i^{n+1} = (1-C)\\sum_{i=0}^{N-1} u_i^n + C \\sum_{i=0}^{N-1} u_i^n = \\sum_{i=0}^{N-1} u_i^n\n$$\n总和在每个时间步都是守恒的。该测试通过比较初始状态的总和 $\\sum u_i^0$ 与最终状态的总和 $\\sum u_i^K$ 来验证这一点。\n\n测试 C (保界性)：已知一阶迎风格式在满足 CFL 条件 $0 \\le C \\le 1$ 时是保正的并且是单调的。在这种情况下，更新规则 $u_i^{n+1} = (1-C)u_i^n + C u_{i-1}^n$ 中的两个系数 $(1-C)$ 和 $C$ 都是非负的。新值 $u_i^{n+1}$ 是前一时间步两个值 $u_i^n$ 和 $u_{i-1}^n$ 的凸组合。这意味着新值不可能小于时间 $n$ 时所有值的最小值，也不可能大于最大值。设 $m^n = \\min_i u_i^n$ 且 $M^n = \\max_i u_i^n$。那么对所有 $i$ 都有 $m^n \\le u_i^{n+1} \\le M^n$。因此，$m^{n+1} \\ge m^n$ 且 $M^{n+1} \\le M^n$，意味着解的值域不会随时间扩展。该测试使用 $C=0.95$，满足该条件。它正确地验证了在所有时间步中，解都保持在初始条件设定的界限内。\n\n测试 D ($C=1$ 时的精确性)：当 CFL 数恰好为 $C=1$ 时，更新规则急剧简化：\n$$\nu_i^{n+1} = (1-1)u_i^n + (1)u_{i-1}^n = u_{i-1}^n\n$$\n这意味着每个网格点 $i$ 的值被其左邻点 $i-1$ 的值所取代。这对应于在每个时间步将整个解剖面精确地向右平移一个网格单元，而形状没有任何改变（即没有数值耗散）。经过 $K$ 个时间步后，初始剖面 $u^0$ 将被精确地向右平移 $K$ 个网格单元。该测试通过将数值解 $u^K$ 与循环平移了 $K$ 个位置的初始解 $u^0_{(i-K)\\pmod N}$ 进行比较来验证此属性。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements and verifies the first-order upwind finite difference method\n    for the 1D linear advection equation by running four unit tests.\n    \"\"\"\n    EPSILON = 1e-12\n\n    def upwind_step(u, C):\n        \"\"\"\n        Performs one step of the first-order upwind scheme for a  0.\n        The update rule is u_i^{n+1} = (1-C)u_i^n + C u_{i-1}^n.\n        This uses u_{i-1}, which means data is flowing from the left (smaller index).\n        np.roll(u, 1) shifts the array to the right, so the new element at index `i`\n        is the old element from index `i-1` (with periodic wrap-around at the boundary).\n        \"\"\"\n        u_prev = np.roll(u, 1)\n        return (1.0 - C) * u + C * u_prev\n\n    def run_simulation(u0, C, K, check_bounds_params=None):\n        \"\"\"\n        Runs the advection simulation for K steps.\n        If check_bounds_params is provided, it performs a check at every step.\n        \"\"\"\n        u = u0.copy()\n        if check_bounds_params:\n            initial_min, initial_max = check_bounds_params\n            for _ in range(K):\n                u = upwind_step(u, C)\n                if np.min(u)  initial_min - EPSILON or np.max(u)  initial_max + EPSILON:\n                    return False  # Indicate bound violation\n            return True  # Indicate all bounds were respected\n        else:\n            for _ in range(K):\n                u = upwind_step(u, C)\n            return u\n\n    def test_a():\n        \"\"\"Test A: Invariance under constant shift.\"\"\"\n        N, L, a, C, K = 200, 1.0, 1.0, 0.3, 100\n        kappa = 0.7\n        x = L * np.arange(N) / N\n        \n        u0 = np.sin(2 * np.pi * x) + 0.2 * np.cos(4 * np.pi * x)\n        u0_shifted = u0 + kappa\n        \n        uK = run_simulation(u0, C, K)\n        uK_tilde = run_simulation(u0_shifted, C, K)\n        \n        max_error = np.max(np.abs((uK_tilde - uK) - kappa))\n        return max_error = EPSILON\n\n    def test_b():\n        \"\"\"Test B: Conservation under periodic boundaries.\"\"\"\n        N, L, a, C, K = 256, 2.0, 0.8, 0.6, 150\n        x = L * np.arange(N) / N\n        \n        u0 = 0.5 + 0.25 * np.sin(2 * np.pi * x / L) + 0.1 * np.cos(6 * np.pi * x / L)\n        \n        uK = run_simulation(u0, C, K)\n        \n        sum_initial = np.sum(u0)\n        sum_final = np.sum(uK)\n        \n        error = np.abs(sum_final - sum_initial)\n        return error = EPSILON\n\n    def test_c():\n        \"\"\"Test C: Bound preservation for 0 = C = 1.\"\"\"\n        N, L, a, C, K = 300, 1.0, 1.0, 0.95, 400\n        x = L * np.arange(N) / N\n        \n        u0 = 0.3 + 0.4 * np.sin(2 * np.pi * x)**2\n        initial_min = 0.3\n        initial_max = 0.7\n        \n        return run_simulation(u0, C, K, check_bounds_params=(initial_min, initial_max))\n\n    def test_d():\n        \"\"\"Test D: Exactness at C=1 for step translation.\"\"\"\n        N, L, a, C, K = 128, 1.0, 1.0, 1.0, 37\n        m0 = 40\n        \n        u0 = np.zeros(N)\n        u0[:m0] = 1.0\n        \n        uK = run_simulation(u0, C, K)\n        \n        # For C=1, the update is u_i^{n+1} = u_{i-1}^n, a pure shift.\n        # After K steps, the solution should be shifted by K grid points to the right.\n        uK_expected = np.roll(u0, K)\n        \n        max_error = np.max(np.abs(uK - uK_expected))\n        return max_error = EPSILON\n\n    results = [\n        test_a(),\n        test_b(),\n        test_c(),\n        test_d(),\n    ]\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3201531"}]}