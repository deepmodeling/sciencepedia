{"hands_on_practices": [{"introduction": "伽辽金方法的核心思想是在一个给定的函数空间中寻找微分方程的“最佳”近似解。这个练习将通过最简单的形式展示这一原理，即使用单个基函数来近似求解一个稳态热传导方程。通过这个过程，你将体会到如何将一个无限维的问题投影到一个有限维空间上，从而找到一个可计算的近似解。[@problem_id:2149969]", "problem": "考虑一维稳态热传导方程 $-u'' = \\cos(x)$，该方程描述了在区间 $x \\in [-\\pi/2, \\pi/2]$ 上的杆内的温度分布 $u(x)$。杆受到一个空间变化的内部热源作用，由 $\\cos(x)$ 表示。杆的两端保持固定的零温度，从而得到边界条件 $u(-\\pi/2) = u(\\pi/2) = 0$。\n\n使用伽辽金方法，确定此边值问题的近似解。您需要使用形式为 $u_a(x) = c \\phi(x)$ 的单个对称试函数，其中基函数是多项式 $\\phi(x) = \\frac{\\pi^2}{4} - x^2$，而 $c$ 是一个待确定的常数系数。问题中所有的三角函数都以弧度定义。\n\n请将近似解 $u_a(x)$ 的最终答案表示为 $x$ 和常数 $\\pi$ 的函数。", "solution": "给定边值问题为 $-u''(x)=\\cos(x)$，定义在 $x\\in[-\\pi/2,\\pi/2]$ 上，且满足 $u(-\\pi/2)=u(\\pi/2)=0$。对于带有齐次狄利克雷边界条件的 $-u''=f$，其伽辽金弱形式为\n$$\n\\int_{-\\pi/2}^{\\pi/2} u'(x)\\,v'(x)\\,dx=\\int_{-\\pi/2}^{\\pi/2} f(x)\\,v(x)\\,dx\n$$\n对于所有可接受的测试函数 $v$。使用由 $\\phi(x)=\\frac{\\pi^{2}}{4}-x^{2}$ 张成的一维试探空间，我们设 $u_{a}(x)=c\\,\\phi(x)$ 并选择 $v=\\phi$。这得到\n$$\nc\\int_{-\\pi/2}^{\\pi/2} \\left(\\phi'(x)\\right)^{2} dx=\\int_{-\\pi/2}^{\\pi/2} \\cos(x)\\,\\phi(x)\\,dx.\n$$\n计算 $\\phi'(x)=-2x$，因此 $\\left(\\phi'(x)\\right)^{2}=4x^{2}$。分母变为\n$$\n\\int_{-\\pi/2}^{\\pi/2}4x^{2}dx=4\\cdot 2\\int_{0}^{\\pi/2}x^{2}dx=8\\cdot \\frac{(\\pi/2)^{3}}{3}=\\frac{\\pi^{3}}{3}.\n$$\n对于分子，\n$$\n\\int_{-\\pi/2}^{\\pi/2}\\cos(x)\\left(\\frac{\\pi^{2}}{4}-x^{2}\\right)dx\n=\\frac{\\pi^{2}}{4}\\int_{-\\pi/2}^{\\pi/2}\\cos(x)dx-\\int_{-\\pi/2}^{\\pi/2}x^{2}\\cos(x)dx.\n$$\n计算第一项：\n$$\n\\frac{\\pi^{2}}{4}\\int_{-\\pi/2}^{\\pi/2}\\cos(x)dx=\\frac{\\pi^{2}}{4}\\left[\\sin(x)\\right]_{-\\pi/2}^{\\pi/2}=\\frac{\\pi^{2}}{4}\\cdot 2=\\frac{\\pi^{2}}{2}.\n$$\n对于第二项，使用偶函数性质和分部积分：\n$$\n\\int_{-\\pi/2}^{\\pi/2}x^{2}\\cos(x)dx=2\\int_{0}^{\\pi/2}x^{2}\\cos(x)dx,\n$$\n以及\n$$\n\\int x^{2}\\cos(x)\\,dx=x^{2}\\sin(x)+2x\\cos(x)-2\\sin(x)+C.\n$$\n因此，\n$$\n\\int_{0}^{\\pi/2}x^{2}\\cos(x)\\,dx=\\left[x^{2}\\sin(x)+2x\\cos(x)-2\\sin(x)\\right]_{0}^{\\pi/2}=\\frac{\\pi^{2}}{4}-2,\n$$\n所以\n$$\n\\int_{-\\pi/2}^{\\pi/2}x^{2}\\cos(x)dx=2\\left(\\frac{\\pi^{2}}{4}-2\\right)=\\frac{\\pi^{2}}{2}-4.\n$$\n因此分子是\n$$\n\\frac{\\pi^{2}}{2}-\\left(\\frac{\\pi^{2}}{2}-4\\right)=4.\n$$\n所以，\n$$\nc=\\frac{\\int_{-\\pi/2}^{\\pi/2}\\cos(x)\\,\\phi(x)\\,dx}{\\int_{-\\pi/2}^{\\pi/2}\\left(\\phi'(x)\\right)^{2}dx}\n=\\frac{4}{\\pi^{3}/3}=\\frac{12}{\\pi^{3}}.\n$$\n伽辽金近似解为\n$$\nu_{a}(x)=c\\,\\phi(x)=\\frac{12}{\\pi^{3}}\\left(\\frac{\\pi^{2}}{4}-x^{2}\\right).\n$$\n根据构造，此解满足 $u_{a}(\\pm \\pi/2)=0$。", "answer": "$$\\boxed{\\frac{12}{\\pi^{3}}\\left(\\frac{\\pi^{2}}{4}-x^{2}\\right)}$$", "id": "2149969"}, {"introduction": "在掌握了稳态问题的求解后，我们自然会问：当问题随时间演化时该怎么办？伽辽金方法同样能有效处理偏微分方程，其关键技巧是仅对空间变量进行离散化，从而将一个复杂的偏微分方程（PDE）转化为一个关于时间的一阶常微分方程组（ODEs）。这个练习将引导你应用此方法于一维瞬态热传导问题，并推导出在有限元分析中至关重要的质量矩阵 $M$ 与刚度矩阵 $K$ 的概念。[@problem_id:2445292]", "problem": "考虑一根长度为 $L>0$ 的均匀杆内的一维瞬态热传导，其质量密度 $\\rho>0$、比热 $c>0$ 和热导率 $k>0$ 均为常数。温度场 $u(x,t)$ 满足偏微分方程 (PDE) \n$$\\rho c\\,\\frac{\\partial u}{\\partial t}(x,t)-k\\,\\frac{\\partial^{2}u}{\\partial x^{2}}(x,t)=Q(x),\\quad x\\in(0,L),\\ t>0,$$\n边界条件为齐次狄利克雷边界条件\n$$u(0,t)=0,\\quad u(L,t)=0,\\quad t>0.$$\n将空间域划分为两个相等的子区间，节点位于 $x=0$、$x=L/2$ 和 $x=L$。使用加权余量法，并采用Galerkin方法选择权重（测试）函数（仅应用于空间变量），以与 $x=L/2$ 相关的唯一内部帽函数 $N_{2}(x)$ 作为试探函数和测试函数，通过单个自由度来近似 $u(x,t)$。不要使用任何质量集中。推导半离散常微分方程 (ODE)\n$$M\\,\\dot{c}(t)+K\\,c(t)=f,$$\n其中 $c(t)$ 是近似式 $u(x,t)\\approx c(t)N_{2}(x)$ 中随时间变化的系数。然后，在零体积热源 $Q(x)=0$ 的情况下，确定衰减率\n$$\\lambda=\\frac{K}{M}$$\n的精确符号表达式，用 $k$、$\\rho$、$c$ 和 $L$ 表示。\n以 $k$、$\\rho$、$c$ 和 $L$ 的单个闭式解析表达式形式提供您的最终答案。不要进行数值计算。", "solution": "半离散格式是通过加权余量法得到的。PDE的余量 $R(x,t)$ 定义为将近似解 $\\tilde{u}(x,t) = c(t)N_{2}(x)$ 代入控制方程：\n$$R(x,t) = \\rho c\\,\\frac{\\partial \\tilde{u}}{\\partial t}-k\\,\\frac{\\partial^{2}\\tilde{u}}{\\partial x^{2}}-Q(x)$$\n$$R(x,t) = \\rho c\\,\\dot{c}(t)N_{2}(x) - k\\,c(t)N_{2}''(x) - Q(x)$$\n在Galerkin方法中，权重函数即为基函数 $N_2(x)$。加权余量陈述要求余量在整个域上与权重函数正交：\n$$\\int_{0}^{L} R(x,t) N_{2}(x) \\,dx = 0$$\n代入余量的表达式得到：\n$$\\int_{0}^{L} \\left( \\rho c\\,\\dot{c}(t)N_{2}(x) - k\\,c(t)N_{2}''(x) - Q(x) \\right) N_{2}(x) \\,dx = 0$$\n这可以被分成各项：\n$$\\dot{c}(t) \\left( \\int_{0}^{L} \\rho c\\, N_{2}(x)N_{2}(x) \\,dx \\right) - c(t) \\left( \\int_{0}^{L} k\\, N_{2}''(x)N_{2}(x) \\,dx \\right) - \\int_{0}^{L} Q(x)N_{2}(x) \\,dx = 0$$\n为了降低第二项的微分阶数，我们采用分部积分：\n$$\\int_{0}^{L} N_{2}''(x)N_{2}(x) \\,dx = \\left[ N_{2}'(x)N_{2}(x) \\right]_{0}^{L} - \\int_{0}^{L} N_{2}'(x)N_{2}'(x) \\,dx$$\n基函数 $N_2(x)$ 被构造成在边界节点 $x=0$ 和 $x=L$ 处为零。因此，$N_2(0)=0$ 且 $N_2(L)=0$，边界项 $\\left[ N_{2}'(x)N_{2}(x) \\right]_{0}^{L}$ 为零。积分变为：\n$$\\int_{0}^{L} N_{2}''(x)N_{2}(x) \\,dx = - \\int_{0}^{L} (N_{2}'(x))^2 \\,dx$$\n将此结果代回加权余量方程，我们得到弱形式：\n$$\\dot{c}(t) \\left( \\rho c \\int_{0}^{L} (N_{2}(x))^{2} \\,dx \\right) + c(t) \\left( k \\int_{0}^{L} (N_{2}'(x))^{2} \\,dx \\right) = \\int_{0}^{L} Q(x)N_{2}(x) \\,dx$$\n该方程的形式为 $M\\,\\dot{c}(t)+K\\,c(t)=f$，其中：\n$$M = \\rho c \\int_{0}^{L} (N_{2}(x))^{2} \\,dx$$\n$$K = k \\int_{0}^{L} (N_{2}'(x))^{2} \\,dx$$\n$$f = \\int_{0}^{L} Q(x)N_{2}(x) \\,dx$$\n接下来，我们必须计算 $M$ 和 $K$ 的积分。对于节点位于 $0$、$L/2$ 和 $L$ 处的内部帽函数 $N_{2}(x)$，其分段定义如下：\n$$N_{2}(x) = \\begin{cases} \\frac{x}{L/2} = \\frac{2x}{L}  & \\text{if } 0 \\le x \\le L/2 \\\\ \\frac{L-x}{L-L/2} = \\frac{2(L-x)}{L}  & \\text{if } L/2 \\le x \\le L \\end{cases}$$\n导数 $N_{2}'(x)$ 也是分段常数：\n$$N_{2}'(x) = \\begin{cases} \\frac{2}{L}  & \\text{if } 0  x  L/2 \\\\ -\\frac{2}{L}   \\text{if } L/2  x  L \\end{cases}$$\n现在我们计算 $M$ 的积分：\n$$\\int_{0}^{L} (N_{2}(x))^{2} \\,dx = \\int_{0}^{L/2} \\left(\\frac{2x}{L}\\right)^{2} \\,dx + \\int_{L/2}^{L} \\left(\\frac{2(L-x)}{L}\\right)^{2} \\,dx$$\n根据对称性，这两个积分相等。我们计算第一个：\n$$\\int_{0}^{L/2} \\frac{4x^2}{L^2} \\,dx = \\frac{4}{L^2} \\left[ \\frac{x^3}{3} \\right]_{0}^{L/2} = \\frac{4}{L^2} \\frac{(L/2)^3}{3} = \\frac{4}{L^2} \\frac{L^3}{24} = \\frac{L}{6}$$\n因此，总积分为 $\\frac{L}{6} + \\frac{L}{6} = \\frac{L}{3}$。\n系数 $M$ 为：\n$$M = \\rho c \\frac{L}{3}$$\n接下来，我们计算 $K$ 的积分：\n$$\\int_{0}^{L} (N_{2}'(x))^{2} \\,dx = \\int_{0}^{L/2} \\left(\\frac{2}{L}\\right)^{2} \\,dx + \\int_{L/2}^{L} \\left(-\\frac{2}{L}\\right)^{2} \\,dx$$\n$$\\int_{0}^{L} (N_{2}'(x))^{2} \\,dx = \\frac{4}{L^2} \\int_{0}^{L/2} \\,dx + \\frac{4}{L^2} \\int_{L/2}^{L} \\,dx = \\frac{4}{L^2} \\left( \\frac{L}{2} \\right) + \\frac{4}{L^2} \\left( L - \\frac{L}{2} \\right) = \\frac{2}{L} + \\frac{2}{L} = \\frac{4}{L}$$\n系数 $K$ 为：\n$$K = k \\frac{4}{L}$$\n题目要求在 $Q(x)=0$ 的情况下的衰减率 $\\lambda = K/M$。在这种情况下，ODE为 $M\\dot{c}(t) + Kc(t) = 0$，或 $\\dot{c}(t) + (K/M)c(t)=0$。其解为 $c(t) = c(0) \\exp(-(K/M)t)$，这证实了 $\\lambda = K/M$ 就是衰减率。\n我们使用 $M$ 和 $K$ 的表达式来计算这个比率：\n$$\\lambda = \\frac{K}{M} = \\frac{4k/L}{\\rho c L/3} = \\frac{4k}{L} \\cdot \\frac{3}{\\rho c L} = \\frac{12k}{\\rho c L^2}$$\n这就是衰减率的最终符号表达式。", "answer": "$$\\boxed{\\frac{12k}{\\rho c L^2}}$$", "id": "2445292"}, {"introduction": "从单个基函数到完整的有限元方法（FEM），最后一步是系统的推广。这个综合性练习将指导你使用线性样条函数作为基函数，从零开始实现一个完整的一维有限元求解器。通过亲手构建刚度矩阵和载荷向量，你将深刻理解抽象的伽辽金原理如何转化为一个功能强大且应用广泛的计算算法，真正打通从理论到代码的“最后一公里”。[@problem_id:3155303]", "problem": "考虑在区间 $[0,1]$ 上定义的常微分方程 $-u''(x)=f(x)$，其具有齐次狄利克雷边界条件 $u(0)=0$ 和 $u(1)=0$。从乘以一个在边界上为零的容许测试函数 $v$ 并进行分部积分的基本步骤开始，推导适用于 Sobolev 空间 $H^1_0([0,1])$ 中函数的弱（变分）形式。使用此弱形式，实现一个伽辽金方法，其中试验空间和测试空间被视为由均匀网格上的线性样条（分段线性）基函数所张成的相同子空间。该网格将 $[0,1]$ 划分为 $N$ 个相等的子区间，节点为 $x_i=i/N$，其中 $i=0,1,\\ldots,N$。线性样条基应由与内部节点 $x_i$（其中 $i=1,\\ldots,N-1$）相关联的标准帽子函数组成，使得每个基函数都支撑在两个相邻的子区间上，并且在每个子区间上都是线性的。\n\n您的任务是：\n- 从弱形式和基函数的定义出发，明确推导组装与使用线性样条的伽辽金方法相对应的线性系统所需的表达式。将与左侧相关的双线性形式和与右侧相关的线性泛函表示为单元积分。\n- 通过在每个单元上计算所需的一维积分，实现全局刚度矩阵和载荷向量的组装。对于光滑的 $f$，您必须通过精确计算或足够精确的数值积分（例如，在每个单元上使用 $q=5$ 个点的高斯-勒让德积分是一种可靠的方法）来以完全机器精度计算这些积分。\n- 求解得到的线性系统以获得线性样条逼近的系数，并构建近似解在包括边界节点在内的网格上的节点值，强制执行齐次狄利克雷边界条件。\n- 对于每个测试用例，计算最大节点误差，其定义为 $\\max_{0\\leq i\\leq N}\\left|u_h(x_i)-u_{\\mathrm{exact}}(x_i)\\right|$，其中 $u_h$ 是伽辽金解，$u_{\\mathrm{exact}}$ 是针对所选 $f$ 的已知精确解。\n\n在您的解答叙述中，解释这种使用线性样条的伽辽金构造如何以及为何正是一维空间中使用分段线性单元的有限元方法。明确地将弱形式、基的选择以及单元组装与标准的有限元解释联系起来。\n\n使用以下测试套件，其中指定了 $N$ 的值、力函数 $f(x)$ 和相应的精确解 $u_{\\mathrm{exact}}(x)$：\n- 测试 1：$N=2$，$f(x)=1$，$u_{\\mathrm{exact}}(x)=\\dfrac{x(1-x)}{2}$。\n- 测试 2：$N=4$，$f(x)=\\sin(\\pi x)$，$u_{\\mathrm{exact}}(x)=\\dfrac{\\sin(\\pi x)}{\\pi^2}$。\n- 测试 3：$N=10$，$f(x)=2$，$u_{\\mathrm{exact}}(x)=x(1-x)$。\n- 测试 4：$N=3$，$f(x)=0$，$u_{\\mathrm{exact}}(x)=0$。\n- 测试 5：$N=8$，$f(x)=\\begin{cases} 1,  0 \\le x  1/2 \\\\ 0,  1/2 \\le x \\le 1 \\end{cases}$，$u_{\\mathrm{exact}}(x)=\\begin{cases} -\\frac{x^2}{2}+\\frac{3}{8}x,  0 \\le x  1/2 \\\\ -\\frac{x}{8}+\\frac{1}{8},  1/2 \\le x \\le 1 \\end{cases}$\n\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，每个条目是对应测试用例的最大节点误差，四舍五入到八位小数（例如，$[0.00000000,0.12345678,0.00000001,0.00000000,0.01234567]$）。此问题不涉及物理单位，也不使用角度。最终输出必须将所有提供的测试用例的结果汇总到指定的单行格式中。", "solution": "用户希望使用带有线性样条的有限元法（FEM）求解一维边值问题。该过程涉及推导弱形式，使用伽辽金方法进行离散化，组装并求解得到的线性系统，并根据已知的精确解计算误差。\n\n### 步骤 1：推导弱（变分）形式\n\n问题的强形式微分方程定义为：\n$$ -u''(x) = f(x) \\quad \\text{for } x \\in (0, 1) $$\n并带有齐次狄利克雷边界条件：\n$$ u(0) = 0, \\quad u(1) = 0 $$\n\n为推导弱形式，我们将方程乘以一个容许的测试函数 $v(x)$，并在定义域 $[0,1]$ 上积分。测试函数必须属于一个满足边界条件的空间。合适的空间是 Sobolev 空间 $H^1_0([0,1])$，它由 $H^1([0,1])$ 中在边界 $x=0$ 和 $x=1$ 处为零的函数组成。\n\n乘以 $v \\in H^1_0([0,1])$ 并积分得到：\n$$ -\\int_0^1 u''(x) v(x) \\,dx = \\int_0^1 f(x) v(x) \\,dx $$\n\n我们对左侧的项 $\\int_0^1 u''(x) v(x) \\,dx$ 应用分部积分：\n$$ \\int_0^1 u''(x) v(x) \\,dx = \\Big[ u'(x) v(x) \\Big]_0^1 - \\int_0^1 u'(x) v'(x) \\,dx $$\n\n边界项 $\\Big[ u'(x) v(x) \\Big]_0^1 = u'(1)v(1) - u'(0)v(0)$ 为零，因为测试函数 $v(x)$ 在边界处为零，即 $v(0) = v(1) = 0$。将其代回，我们得到：\n$$ - \\left( 0 - \\int_0^1 u'(x) v'(x) \\,dx \\right) = \\int_0^1 f(x) v(x) \\,dx $$\n$$ \\int_0^1 u'(x) v'(x) \\,dx = \\int_0^1 f(x) v(x) \\,dx $$\n\n问题的弱形式是寻找一个解 $u \\in H^1_0([0,1])$，使得对于所有测试函数 $v \\in H^1_0([0,1])$，上述方程都成立。这可以抽象地表述为：寻找 $u \\in H^1_0([0,1])$，使得对所有 $v \\in H^1_0([0,1])$，都有 $a(u,v) = L(v)$，其中：\n-   双线性形式为 $a(u,v) = \\int_0^1 u'(x)v'(x) \\,dx$。\n-   线性泛函为 $L(v) = \\int_0^1 f(x)v(x) \\,dx$。\n\n### 步骤 2：使用线性样条进行伽辽金离散化\n\n伽辽金方法从有限维子空间 $V_h \\subset H^1_0([0,1])$ 中寻找一个近似解 $u_h(x)$。问题指定 $V_h$ 是均匀网格上的线性样条（连续分段线性函数）空间。\n\n网格由 $N+1$ 个节点 $x_i = i/N = ih$ 组成，其中 $i=0, 1, \\dots, N$，$h = 1/N$ 是 $N$ 个子区间（单元）中每个子区间的尺寸。\n\n为确保 $V_h$ 中的任何函数都满足齐次边界条件，我们用以内部节点 $x_i$（$i=1, \\dots, N-1$）为中心的“帽子”函数 $\\phi_i(x)$ 基底来构造 $V_h$。每个基函数 $\\phi_i(x)$ 定义为：\n$$\n\\phi_i(x) =\n\\begin{cases}\n    \\frac{x - x_{i-1}}{h},   x \\in [x_{i-1}, x_i] \\\\\n    \\frac{x_{i+1} - x}{h},   x \\in [x_i, x_{i+1}] \\\\\n    0,   \\text{otherwise}\n\\end{cases}\n$$\n近似解 $u_h(x)$ 是这些基函数的线性组合：\n$$ u_h(x) = \\sum_{j=1}^{N-1} c_j \\phi_j(x) $$\n系数 $c_j$ 代表解在内部节点处的未知值，即 $c_j = u_h(x_j)$。\n\n伽辽金问题是寻找 $u_h \\in V_h$ 使得对所有 $v_h \\in V_h$ 都有 $a(u_h, v_h) = L(v_h)$。由于集合 $\\{\\phi_i\\}_{i=1}^{N-1}$ 构成了 $V_h$ 的一个基，所以只需对每个基函数 $\\phi_i$ 进行测试即可：\n$$ a\\left(\\sum_{j=1}^{N-1} c_j \\phi_j, \\phi_i\\right) = L(\\phi_i) \\quad \\text{for } i=1, \\dots, N-1 $$\n根据双线性形式 $a(\\cdot, \\cdot)$ 的线性性质，这变成了一个线性方程组：\n$$ \\sum_{j=1}^{N-1} c_j \\, a(\\phi_j, \\phi_i) = L(\\phi_i) $$\n这是一个矩阵系统 $K\\mathbf{c} = \\mathbf{F}$，其中 $\\mathbf{c} = [c_1, \\dots, c_{N-1}]^T$ 是未知系数向量，刚度矩阵 $K$ 和载荷向量 $\\mathbf{F}$ 的条目为：\n$$ K_{ij} = a(\\phi_i, \\phi_j) = \\int_0^1 \\phi_i'(x) \\phi_j'(x) \\,dx \\quad (\\text{注意：由于对称性，求和中的 } a(\\phi_j, \\phi_i) \\text{ 导致 } K_{ij}=a(\\phi_i,\\phi_j)) $$\n$$ F_i = L(\\phi_i) = \\int_0^1 f(x) \\phi_i(x) \\,dx $$\n这里，矩阵和向量的索引从 $1$ 到 $N-1$。\n\n### 步骤 3：组装刚度矩阵和载荷向量\n\n**刚度矩阵 $K$：**\n帽子函数 $\\phi_i(x)$ 的导数是一个分段常数函数：\n$$\n\\phi_i'(x) =\n\\begin{cases}\n    1/h,   x \\in (x_{i-1}, x_i) \\\\\n    -1/h,  x \\in (x_i, x_{i+1}) \\\\\n    0,   \\text{otherwise}\n\\end{cases}\n$$\n-   **对角线元素 ($i=j$)：** $\\phi_i'$ 和 $\\phi_i'$ 的支撑集在 $[x_{i-1}, x_{i+1}]$ 上重叠。\n    $$ K_{ii} = \\int_{x_{i-1}}^{x_i} \\left(\\frac{1}{h}\\right)^2 dx + \\int_{x_i}^{x_{i+1}} \\left(-\\frac{1}{h}\\right)^2 dx = \\frac{1}{h^2}(h) + \\frac{1}{h^2}(h) = \\frac{2}{h} $$\n-   **非对角线元素 ($j=i\\pm1$)：** $\\phi_i'$ 和 $\\phi_{i+1}'$ 的支撑集仅在 $[x_i, x_{i+1}]$ 上重叠。\n    $$ K_{i,i+1} = \\int_{x_i}^{x_{i+1}} \\left(-\\frac{1}{h}\\right)\\left(\\frac{1}{h}\\right) dx = -\\frac{1}{h^2}(h) = -\\frac{1}{h} $$\n    根据对称性，$K_{i,i-1} = -1/h$。\n-   **其他元素 ($|i-j|1$)：** 支撑集不重叠，因此被积函数为零。$K_{ij}=0$。\n\n得到的 $(N-1) \\times (N-1)$ 刚度矩阵是对称三对角矩阵：\n$$ K = \\frac{1}{h} \\begin{pmatrix} 2   -1  0  \\cdots  0 \\\\ -1  2  -1  \\cdots  0 \\\\ 0  \\ddots  \\ddots  \\ddots  0 \\\\ \\vdots    -1  2  -1 \\\\ 0  \\cdots  0  -1  2 \\end{pmatrix} $$\n\n**载荷向量 $\\mathbf{F}$：**\n元素 $F_i$ 由依赖于力函数 $f(x)$ 的积分给出：\n$$ F_i = \\int_0^1 f(x) \\phi_i(x) \\,dx = \\int_{x_{i-1}}^{x_i} f(x) \\frac{x-x_{i-1}}{h} \\,dx + \\int_{x_i}^{x_{i+1}} f(x) \\frac{x_{i+1}-x}{h} \\,dx $$\n对于一般的 $f(x)$，这些积分需要数值计算。问题建议在每个子区间 $[x_{i-1}, x_i]$ 和 $[x_i, x_{i+1}]$ 上使用 $q=5$ 点的高斯-勒让德积分法则以确保高精度。对于积分 $\\int_a^b g(t)dt$，积分法则是：\n$$ \\int_a^b g(t)dt \\approx \\frac{b-a}{2} \\sum_{k=1}^q w_k \\, g\\left( \\frac{b-a}{2}\\xi_k + \\frac{a+b}{2} \\right) $$\n其中 $(\\xi_k, w_k)$ 是 $[-1, 1]$ 上的标准高斯-勒让德点和权重。\n\n### 步骤 4：与有限元法（FEM）的联系\n\n这整个过程正是一维空间中使用分段线性（P1）单元的有限元方法。\n1.  **区域离散化**：将区间 $[0,1]$ 划分为 $N$ 个子区间 $[x_i, x_{i+1}]$。这些就是“有限元”。\n2.  **基的选择**：近似空间 $V_h$ 由在每个单元上形式简单（线性）的函数构成。线性样条或“帽子函数”$\\phi_i$ 是 P1 单元的标准基函数。它们的关键特性是“局部支撑”（$\\phi_i$ 仅在两个相邻单元上非零），这导致了稀疏的刚度矩阵，这是有限元法的一个决定性特征和关键优势。\n3.  **单元组装**：全局刚度矩阵 $K$ 和载荷向量 $\\mathbf{F}$ 是通过对每个单元的贡献求和来构建的。例如，积分 $a(u,v)$ 是对每个单元上的积分求和：$a(u,v)=\\sum_e \\int_e u'v' dx$。通过在基函数非零的小块区域上积分来计算 $K_{ij}$ 和 $F_i$ 是有限元法中标准的“组装”过程。这将一个大的全局问题分解为每个单元上更小、更易于管理的计算。\n\n总之，伽辽金方法提供了理论框架（将无限维问题投影到有限维空间），而“有限元”部分则指基于区域划分和使用局域支撑的分段多项式基函数的具体实践实现。\n\n### 步骤 5：求解和误差计算\n\n在组装了 $K$ 和 $\\mathbf{F}$ 之后，求解线性系统 $K\\mathbf{c} = \\mathbf{F}$ 以获得系数向量 $\\mathbf{c}$。这给出了近似解 $u_h$ 在内部节点 $\\{x_i\\}_{i=1}^{N-1}$ 处的值。通过包含边界条件来构建完整的节点解向量 $u_h(x_i)$：\n$$ u_h(x_0)=0, \\quad u_h(x_i)=c_i \\text{ for } i=1,\\dots,N-1, \\quad u_h(x_N)=0 $$\n最后，通过比较所有节点上的近似解与精确解来计算最大节点误差：\n$$ \\text{Error} = \\max_{0 \\le i \\le N} |u_h(x_i) - u_{\\text{exact}}(x_i)| $$\n\n对于某些简单情况，例如当 $f(x)$ 是常数时，已知节点值 $u_h(x_i)$ 是精确的，从而产生零节点误差。这是一维泊松方程和所选离散化方法的特定属性所致。对于更复杂的 $f(x)$，预计会出现非零误差。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D Poisson equation -u''(x) = f(x) on [0,1] with u(0)=u(1)=0\n    using the Finite Element Method with linear splines.\n    \"\"\"\n\n    # Define test cases: N, f(x), u_exact(x)\n    test_cases = [\n        (2,\n         lambda x: 1.0,\n         lambda x: x * (1 - x) / 2.0\n        ),\n        (4,\n         lambda x: np.sin(np.pi * x),\n         lambda x: np.sin(np.pi * x) / (np.pi**2)\n        ),\n        (10,\n         lambda x: 2.0,\n         lambda x: x * (1 - x)\n        ),\n        (3,\n         lambda x: 0.0,\n         lambda x: 0.0\n        ),\n        (8,\n         lambda x: np.piecewise(x, [x  0.5], [1.0, 0.0]),\n         lambda x: np.piecewise(x, [x  0.5, x >= 0.5],\n                                [lambda y: -y**2 / 2.0 + 3.0 / 8.0 * y,\n                                 lambda y: -y / 8.0 + 1.0 / 8.0])\n        )\n    ]\n\n    results = []\n\n    # Get Gauss-Legendre quadrature points and weights\n    q = 5\n    xi_k, w_k = np.polynomial.legendre.leggauss(q)\n\n    for case_num, (N, f, u_exact) in enumerate(test_cases):\n        h = 1.0 / N\n        nodes = np.linspace(0, 1, N + 1)\n        dim = N - 1  # Dimension of the linear system for interior nodes\n\n        if dim == 0:\n            u_h_nodes = np.zeros(N + 1)\n            u_exact_nodes = u_exact(nodes)\n            error = np.max(np.abs(u_h_nodes - u_exact_nodes))\n            results.append(error)\n            continue\n\n        # Assemble stiffness matrix K\n        K = np.zeros((dim, dim))\n        main_diag = 2.0 / h\n        off_diag = -1.0 / h\n        \n        np.fill_diagonal(K, main_diag)\n        np.fill_diagonal(K[1:], off_diag)\n        np.fill_diagonal(K[:, 1:], off_diag)\n\n        # Assemble load vector F\n        F = np.zeros(dim)\n        for i in range(1, N): # Iterate over interior nodes\n            # Contribution from element [x_{i-1}, x_i]\n            # On this element, phi_i(x) = (x - x_{i-1})/h\n            a, b = nodes[i-1], nodes[i]\n            x_q = 0.5 * (b - a) * xi_k + 0.5 * (a + b)\n            phi_vals = (x_q - a) / h\n            f_vals = f(x_q)\n            integral1 = 0.5 * (b - a) * np.sum(w_k * f_vals * phi_vals)\n\n            # Contribution from element [x_i, x_{i+1}]\n            # On this element, phi_i(x) = (x_{i+1} - x)/h\n            a, b = nodes[i], nodes[i+1]\n            x_q = 0.5 * (b - a) * xi_k + 0.5 * (a + b)\n            phi_vals = (b - x_q) / h\n            f_vals = f(x_q)\n            integral2 = 0.5 * (b - a) * np.sum(w_k * f_vals * phi_vals)\n            \n            F[i-1] = integral1 + integral2\n\n        # Solve the linear system Kc = F\n        coeffs = np.linalg.solve(K, F)\n\n        # Construct the full solution at all nodes\n        u_h_nodes = np.zeros(N + 1)\n        u_h_nodes[1:N] = coeffs\n        \n        # Calculate exact solution at nodes\n        u_exact_nodes = u_exact(nodes)\n\n        # Compute the maximum nodal error\n        error = np.max(np.abs(u_h_nodes - u_exact_nodes))\n        results.append(error)\n\n    # Format output\n    formatted_results = [f\"{r:.8f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "3155303"}]}