{"hands_on_practices": [{"introduction": "掌握稀疏矩阵格式的第一步是能够将其解码并观想其所代表的完整矩阵。本练习旨在提供“压缩稀疏行”（Compressed Sparse Row, CSR）格式的直接实践，这是稀疏矩阵计算中的一种基石。通过将给定的CSR数据 [@problem_id:2204554] 转换回传统的稠密矩阵形式，你将加深对值数组（$V$）、列索引数组（$C$）和行指针数组（$R$）如何协同工作的理解。", "problem": "在许多科学和工程应用中，矩阵通常是“稀疏”的，意味着它们的大部分元素都为零。存储所有这些零是低效的。压缩稀疏行（CSR）格式是一种常用的存储稀疏矩阵的方法，它使用三个一维数组。\n\n考虑一个大小为 $4 \\times 4$ 的稀疏矩阵 $A$。在CSR格式（使用0基索引）中，该矩阵由以下三个数组表示：\n1.  一个数组 `V`，包含 $A$ 的非零元素，按行从左到右读取。\n2.  一个数组 `C`，包含 `V` 中每个对应元素的列索引。\n3.  一个数组 `R`（行指针），大小为 $m+1$（其中 $m$ 是行数），其第 $i$ 个元素指示了第 $i$ 行数据在 `V` 和 `C` 中开始的索引。`R` 的最后一个元素是非零元素的总数。\n\n用于我们的 $4 \\times 4$ 矩阵 $A$ 的三个数组如下所示：\n- `V = [5.1, -1.2, 2.0, -3.5, 4.0, 9.8]`\n- `C = [1, 3, 0, 2, 3, 0]`\n- `R = [0, 2, 3, 5, 6]`\n\n重构原始的稠密 $4 \\times 4$ 矩阵 $A$。将你的答案以一个 $4 \\times 4$ 矩阵的形式呈现。", "solution": "我们使用0基索引的CSR定义。对于每个行索引 $i \\in \\{0,1,2,3\\}$，第 $i$ 行的非零条目存储在 `V` 和 `C` 中索引 $j$ 从 $R[i]$ 到 $R[i+1]-1$ 的部分，其中列索引为 $C[j]$，值为 $V[j]$。最后一个元素 $R[4]=6$ 等于非零元素的总数，这与 $\\lvert V \\rvert=6$ 相匹配。\n\n第 $0$ 行：索引 $j=R[0]\\ldots R[1]-1=0\\ldots 1$。\n- $j=0$：$C[0]=1$，$V[0]=5.1$，得到 $A_{0,1}=5.1$。\n- $j=1$：$C[1]=3$，$V[1]=-1.2$，得到 $A_{0,3}=-1.2$。\n因此，第 $0$ 行为 $[0,\\,5.1,\\,0,\\,-1.2]$。\n\n第 $1$ 行：索引 $j=R[1]\\ldots R[2]-1=2\\ldots 2$。\n- $j=2$：$C[2]=0$，$V[2]=2.0$，得到 $A_{1,0}=2.0$。\n因此，第 $1$ 行为 $[2.0,\\,0,\\,0,\\,0]$。\n\n第 $2$ 行：索引 $j=R[2]\\ldots R[3]-1=3\\ldots 4$。\n- $j=3$：$C[3]=2$，$V[3]=-3.5$，得到 $A_{2,2}=-3.5$。\n- $j=4$：$C[4]=3$，$V[4]=4.0$，得到 $A_{2,3}=4.0$。\n因此，第 $2$ 行为 $[0,\\,0,\\,-3.5,\\,4.0]$。\n\n第 $3$ 行：索引 $j=R[3]\\ldots R[4]-1=5\\ldots 5$。\n- $j=5$：$C[5]=0$，$V[5]=9.8$，得到 $A_{3,0}=9.8$。\n因此，第 $3$ 行为 $[9.8,\\,0,\\,0,\\,0]$。\n\n因此，重构后的稠密矩阵 $A$ 是\n$$\n\\begin{pmatrix}\n0 & 5.1 & 0 & -1.2 \\\\\n2.0 & 0 & 0 & 0 \\\\\n0 & 0 & -3.5 & 4.0 \\\\\n9.8 & 0 & 0 & 0\n\\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}0 & 5.1 & 0 & -1.2 \\\\ 2.0 & 0 & 0 & 0 \\\\ 0 & 0 & -3.5 & 4.0 \\\\ 9.8 & 0 & 0 & 0\\end{pmatrix}}$$", "id": "2204554"}, {"introduction": "在实际应用中，数据常以不同格式存在，而格式之间的转换是常见的操作，这取决于后续计算的需求。本练习将引导你完成一项核心的算法任务：将直观的“坐标”（Coordinate, COO）格式转换为在行操作上更为高效的CSR格式 [@problem_id:2204580]。完成这个练习有助于培养处理数据结构时的算法思维，并理解为何以及如何根据任务需求选择和转换数据表示方法。", "problem": "在科学计算中，稀疏矩阵（即主要由零填充的矩阵）通常以专门的格式存储，以节省内存和计算时间。其中一种格式是坐标（COO）格式，它使用三个数组来表示矩阵：`values`（包含非零元素）、`row_indices`（每个非零元素的行索引）和 `col_indices`（每个非零元素的列索引）。\n\n另一种常见且对于矩阵运算更高效的格式是压缩稀疏行（CSR）格式。它也使用三个数组：\n1.  `values`：一个包含非零值的数组，这些值首先按行排序，然后在每行内按列排序。\n2.  `col_indices`：一个列索引数组，与 `values` 数组中的元素相对应。\n3.  `row_ptr`：一个大小为 `（行数 + 1）` 的数组。`row_ptr[i]` 的值指示了第 `i` 行的元素在 `values` 数组中的起始索引。`row_ptr` 的最后一个元素是非零元素的总数。\n\n考虑一个代表小型网络的 5x5 稀疏矩阵，初始以 COO 格式给出。其非零元素以任意顺序列出如下：\n\n`values = [3, 8, 1, 5, 9, 2, 7]`\n`row_indices = [1, 0, 4, 0, 2, 2, 4]`\n`col_indices = [2, 1, 3, 4, 3, 0, 1]`\n\n将此矩阵表示从 COO 格式转换为 CSR 格式。以下哪个选项正确表示了转换得到的 `values`、`col_indices` 和 `row_ptr` 数组？\n\nA.\n`values = [8, 5, 3, 2, 9, 7, 1]`\n`col_indices = [1, 4, 2, 0, 3, 1, 3]`\n`row_ptr = [0, 2, 1, 2, 0, 2]`\n\nB.\n`values = [3, 8, 1, 5, 9, 2, 7]`\n`col_indices = [2, 1, 3, 4, 3, 0, 1]`\n`row_ptr = [0, 2, 3, 5, 5, 7]`\n\nC.\n`values = [8, 5, 3, 2, 9, 7, 1]`\n`col_indices = [1, 4, 2, 0, 3, 1, 3]`\n`row_ptr = [1, 3, 4, 6, 6, 8]`\n\nD.\n`values = [8, 5, 3, 2, 9, 7, 1]`\n`col_indices = [1, 4, 2, 0, 3, 1, 3]`\n`row_ptr = [0, 2, 3, 5, 5, 7]`", "solution": "我们通过三个数组得到了一个 COO 格式的稀疏矩阵。将每个非零条目定义为 COO 三元组 $(r_{k}, c_{k}, v_{k})$。根据所给数据：\n$$\n\\begin{aligned}\n&v = [3,8,1,5,9,2,7],\\\\\n&r = [1,0,4,0,2,2,4],\\\\\n&c = [2,1,3,4,3,0,1].\n\\end{aligned}\n$$\n这产生了一个无序的三元组列表：\n$$\n(1,2;3),\\ (0,1;8),\\ (4,3;1),\\ (0,4;5),\\ (2,3;9),\\ (2,0;2),\\ (4,1;7).\n$$\n\n要转换为 CSR 格式，我们需先按行索引升序对条目进行排序，然后在每行内部再按列索引升序排序。按行分组并在每行内部排序的结果如下：\n- 行 $0$：条目 $(0,1;8)$ 和 $(0,4;5)$，已按列 $1<4$ 排序。\n- 行 $1$：条目 $(1,2;3)$。\n- 行 $2$：条目 $(2,0;2)$ 和 $(2,3;9)$，按列 $0<3$ 排序。\n- 行 $3$：无条目。\n- 行 $4$：条目 $(4,1;7)$ 和 $(4,3;1)$，按列 $1<3$ 排序。\n\n按行连接，得到 CSR 排序的数组：\n$$\n\\text{values} = [8,\\,5,\\,3,\\,2,\\,9,\\,7,\\,1],\n$$\n$$\n\\text{col\\_indices} = [1,\\,4,\\,2,\\,0,\\,3,\\,1,\\,3].\n$$\n\n接下来，计算长度为 $5+1=6$ 的行指针数组 $\\text{row\\_ptr}$。计算每行的非零元素个数：\n- 行 $0$：$2$ 个，\n- 行 $1$：$1$ 个，\n- 行 $2$：$2$ 个，\n- 行 $3$：$0$ 个，\n- 行 $4$：$2$ 个。\n\n从 $0$ 开始计算累积和：\n$$\n\\text{row\\_ptr} = [0,\\ 0+2,\\ 2+1,\\ 3+2,\\ 5+0,\\ 5+2] = [0,\\,2,\\,3,\\,5,\\,5,\\,7].\n$$\n\n与选项比较，这与选项 D 完全匹配。", "answer": "$$\\boxed{D}$$", "id": "2204580"}, {"introduction": "精通稀疏矩阵不仅在于理解如何使用不同格式，更在于能够明智地选择最适合的格式。本练习 [@problem_id:2204576] 挑战你像计算科学家一样思考，通过定量分析来比较CSR和“对角线”（Diagonal, DIA）两种格式在存储特定“箭头形”矩阵时的内存效率。这个实践强调了数据结构的选择并非无关紧要，而是依赖于问题内在结构的关键决策，直接影响计算性能。", "problem": "在科学计算中，稀疏矩阵（即主要由零填充的矩阵）通常以特殊格式存储以节省内存。考虑一个 $N \\times N$ 的“箭头”矩阵，该矩阵的非零元素仅位于主对角线、第一行和第一列。\n\n我们希望比较两种常见的存储格式——压缩稀疏行 (CSR) 和对角线 (DIA)——存储此矩阵的内存效率。\n\n假设非零值存储为双精度浮点数（每个8字节），所有行/列索引和指针存储为整数（每个4字节）。\n\n每种格式的内存需求定义如下：\n\n1.  **压缩稀疏行 (CSR)**：此格式使用三个数组：\n    *   `values`：一个大小为 `nnz` 的数组，用于存储非零值，其中 `nnz` 是非零元素的总数。\n    *   `col_indices`：一个大小为 `nnz` 的数组，用于存储每个非零元素的列索引。\n    *   `row_pointers`：一个大小为 $N+1$ 的数组，用于存储 `values` 数组中的索引，该索引标记每行的开始位置。\n\n2.  **对角线 (DIA)**：此格式针对非零元素沿少数几条对角线分布的矩阵进行了优化。它使用两个数组：\n    *   `offsets`：一个大小为 `d` 的数组，用于存储每条对角线相对于主对角线的偏移量，其中 `d` 是非零对角线的数量。\n    *   `values`：一个密集的 $N \\times d$ 数组。该数组的每一列存储一条非零对角线的元素。如果某条对角线的元素少于 $N$ 个，则 `values` 数组中相应的列将用零填充。\n\n确定最小的整数维度 $N \\ge 2$，使得 CSR 格式存储箭头矩阵所需的总内存严格小于 DIA 格式所需的总内存。", "solution": "一个 $N \\times N$ 的箭头矩阵在主对角线、第一行和第一列有非零项。计算唯一的非零元素数量：\n- 主对角线贡献 $N$ 个项。\n- 第一行贡献 $N-1$ 个额外的项（不包括 $(1,1)$ 位置的重叠项）。\n- 第一列贡献 $N-1$ 个额外的项（不包括 $(1,1)$ 位置的重叠项）。\n因此，非零元素的总数是\n$$\n\\text{nnz} = N + (N - 1) + (N - 1) = 3N - 2.\n$$\n\n对于 CSR 格式：\n- `values` 数组存储 $\\text{nnz}$ 个双精度浮点数：$8(3N - 2)$ 字节。\n- `col_indices` 数组存储 $\\text{nnz}$ 个整数：$4(3N - 2)$ 字节。\n- `row_pointers` 数组存储 $N+1$ 个整数：$4(N+1)$ 字节。\n因此，CSR 格式的总内存为\n$$\nM_{\\text{CSR}} = 8(3N - 2) + 4(3N - 2) + 4(N+1) = 12(3N - 2) + 4(N+1) = 40N - 20.\n$$\n\n对于 DIA 格式：\n- 非零对角线的数量等于主对角线、第一行和第一列中存在的不同偏移量的数量。第一行的偏移量为 $\\{0,1,2,\\ldots,N-1\\}$，第一列的偏移量为 $\\{0,-1,-2,\\ldots,-(N-1)\\}$，因此它们的并集是 $\\{-(N-1),\\ldots,0,\\ldots,(N-1)\\}$，得出\n$$\nd = 2N - 1.\n$$\n- `offsets` 数组存储 $d$ 个整数：$4(2N - 1)$ 字节。\n- `values` 数组是一个密集的 $N \\times d$ 双精度浮点数数组：$8N(2N - 1)$ 字节。\n因此，DIA 格式的总内存为\n$$\nM_{\\text{DIA}} = 4(2N - 1) + 8N(2N - 1) = (8N + 4)(2N - 1) = 16N^{2} - 4.\n$$\n\n我们寻求满足 $M_{\\text{CSR}} < M_{\\text{DIA}}$ 的最小整数 $N \\geq 2$：\n$$\n40N - 20 < 16N^{2} - 4\n\\;\\;\\Longleftrightarrow\\;\\;\n16N^{2} - 40N + 16 > 0\n\\;\\;\\Longleftrightarrow\\;\\;\n16(N - 2)\\left(N - \\frac{1}{2}\\right) > 0.\n$$\n这个不等式对于 $N > 2$ 成立。当 $N = 2$ 时，两种格式使用相同的内存。因此，使得 CSR 格式使用内存严格少于 DIA 格式的最小整数 $N \\geq 2$ 是 $N = 3$。", "answer": "$$\\boxed{3}$$", "id": "2204576"}]}