{"hands_on_practices": [{"introduction": "牛顿法以其快速收敛性而闻名，但这并非必然。该方法的成功高度依赖于初始猜测点的位置。这个练习将引导你分析一个看似简单的情形：即便对于一个良好性质的凸函数，一个不佳的起始点也会导致算法的迭代结果不仅不收敛，反而离最小值越来越远。通过这个实践，你将亲身体会到选择合适初始点的重要性，并理解牛顿法发散的风险。[@problem_id:2167231]", "problem": "在一个计算光学设计工具中，一个算法试图找到传感器上的位置 $x$，以最小化一个与光学像差相关的成本函数。该成本的一个简化模型由函数 $f(x) = \\sqrt{L^2 + x^2}$ 给出，其中 $L$ 是该光学系统的一个固定的正特征长度。\n\n该算法使用牛顿优化法来寻找 $f(x)$ 的最小值。该方法从一个初始猜测值 $x_0$ 开始，并使用以下迭代公式生成一个估计值序列：\n$$x_{n+1} = x_n - \\frac{f'(x_n)}{f''(x_n)}$$\n其中 $f'(x)$ 和 $f''(x)$ 分别是 $f(x)$ 关于 $x$ 的一阶和二阶导数。\n\n使用初始猜测值 $x_0 = \\sqrt{2}L$ 进行一次测试。计算该算法生成的第四个估计值 $x_4$。答案请用 $L$ 表示。", "solution": "给定函数 $f(x) = \\sqrt{L^{2} + x^{2}}$（其中 $L>0$）以及牛顿优化法\n$$\nx_{n+1} = x_{n} - \\frac{f'(x_{n})}{f''(x_{n})}.\n$$\n首先计算导数：\n$$\nf'(x) = \\frac{x}{\\sqrt{L^{2} + x^{2}}},\n$$\n$$\nf''(x) = \\frac{d}{dx}\\left(x\\left(L^{2}+x^{2}\\right)^{-\\frac{1}{2}}\\right) = \\left(L^{2}+x^{2}\\right)^{-\\frac{1}{2}} - x^{2}\\left(L^{2}+x^{2}\\right)^{-\\frac{3}{2}} = \\frac{L^{2}}{\\left(L^{2}+x^{2}\\right)^{\\frac{3}{2}}}.\n$$\n因此\n$$\n\\frac{f'(x)}{f''(x)} = \\frac{\\frac{x}{\\sqrt{L^{2}+x^{2}}}}{\\frac{L^{2}}{(L^{2}+x^{2})^{\\frac{3}{2}}}} = x\\cdot\\frac{L^{2}+x^{2}}{L^{2}}.\n$$\n因此，牛顿法更新步骤简化为\n$$\nx_{n+1} = x_{n} - x_{n}\\frac{L^{2}+x_{n}^{2}}{L^{2}} = -\\frac{x_{n}^{3}}{L^{2}}.\n$$\n从 $x_{0} = \\sqrt{2}\\,L$ 开始，迭代计算：\n$$\nx_{1} = -\\frac{x_{0}^{3}}{L^{2}} = -\\frac{\\left(\\sqrt{2}\\,L\\right)^{3}}{L^{2}} = -2^{\\frac{3}{2}}L,\n$$\n$$\nx_{2} = -\\frac{x_{1}^{3}}{L^{2}} = -\\frac{\\left(-2^{\\frac{3}{2}}L\\right)^{3}}{L^{2}} = 2^{\\frac{9}{2}}L,\n$$\n$$\nx_{3} = -\\frac{x_{2}^{3}}{L^{2}} = -\\frac{\\left(2^{\\frac{9}{2}}L\\right)^{3}}{L^{2}} = -2^{\\frac{27}{2}}L,\n$$\n$$\nx_{4} = -\\frac{x_{3}^{3}}{L^{2}} = -\\frac{\\left(-2^{\\frac{27}{2}}L\\right)^{3}}{L^{2}} = 2^{\\frac{81}{2}}L.\n$$\n因此，第四个估计值是 $x_{4} = 2^{\\frac{81}{2}}L$。", "answer": "$$\\boxed{2^{\\frac{81}{2}}L}$$", "id": "2167231"}, {"introduction": "牛顿法的一个主要吸引力是其在解附近的二次收敛速度，这意味着算法能极快地逼近最优解。然而，这一理想特性是有条件的。本练习将探讨当一个关键条件——即在最小值点处的二阶导数 $f''(x^*)$ 不为零——被违反时会发生什么。你将通过计算发现，此时收敛速度会从二次退化为线性，从而揭示了牛顿法并非总是拥有其标志性的高速性能。[@problem_id:2167211]", "problem": "一个优化算法用于寻找能使函数 $f(x) = \\alpha x^4$ 最小化的 $x$ 值，其中 $\\alpha$ 为一个正常数。该算法使用牛顿优化法，从一个初始猜测值 $x_0$ 开始，生成一个估计值序列 $\\{x_k\\}$，其中 $k=0, 1, 2, \\dots$。迭代更新规则由下式给出：\n$$x_{k+1} = x_k - \\frac{f'(x_k)}{f''(x_k)}$$\n其中 $f'(x)$ 和 $f''(x)$ 分别是 $f(x)$ 关于 $x$ 的一阶和二阶导数。\n\n假设初始猜测值 $x_0$ 不等于零。已知该算法收敛于 $x=0$ 处的最小值。为了表征这种收敛的速度，请确定以下极限的精确值：\n$$L = \\lim_{k \\to \\infty} \\frac{|x_{k+1}|}{|x_k|}$$\n你的最终答案应以一个精确分数的形式给出。", "solution": "给定函数 $f(x) = \\alpha x^{4}$，其中 $\\alpha > 0$。其一阶和二阶导数可使用标准求导法则计算得出：\n$$f'(x) = 4\\alpha x^{3}, \\quad f''(x) = 12\\alpha x^{2}.$$\n牛顿优化法通过下式更新 $x_{k}$：\n$$x_{k+1} = x_{k} - \\frac{f'(x_{k})}{f''(x_{k})}.$$\n将导数代入更新规则，对于 $x_{k} \\neq 0$，可得：\n$$x_{k+1} = x_{k} - \\frac{4\\alpha x_{k}^{3}}{12\\alpha x_{k}^{2}} = x_{k} - \\frac{1}{3}x_{k} = \\frac{2}{3}x_{k}.$$\n因此，在每次迭代中，\n$$\\frac{|x_{k+1}|}{|x_{k}|} = \\left|\\frac{2}{3}\\right| = \\frac{2}{3}.$$\n只要 $x_{k} \\neq 0$，该值对于所有 $k$ 都是一个常数，并且序列以 $\\frac{2}{3}$ 的速率线性收敛到 $x=0$。因此，极限为\n$$L = \\lim_{k \\to \\infty} \\frac{|x_{k+1}|}{|x_{k}|} = \\frac{2}{3}.$$", "answer": "$$\\boxed{\\frac{2}{3}}$$", "id": "2167211"}, {"introduction": "理论上的完美与计算实践之间时常存在鸿沟。即使在理论上牛顿法能够一步到位的最理想情况（如二次函数优化），计算机的有限精度算术也可能带来意想不到的挑战。这个练习模拟了在一个假想的计算机上执行牛顿法的情形，展示了由于数值表示的限制，算法可能会在接近真实最小值的一个小区间内“停滞不前”，无法精确达到最优点。这揭示了数值不稳定性是评估算法性能时一个不可忽视的实际问题。[@problem_id:2167170]", "problem": "理论上，用于优化的牛顿法对于二次函数非常高效。对于一个通用的一维二次函数 $f(x) = \\frac{1}{2}ax^2 + bx + c$（其中 $a>0$），该方法无论从哪个初始点开始，都能在单次迭代中收敛到精确的最小值点。\n\n然而，在实践中，计算机算术的有限精度会引入一些意外结果，导致算法无法按预期执行。考虑使用一台假想的计算机来最小化函数 $g(x) = \\frac{1}{2}x^2 - (\\ln 10) x$。该函数的真正最小值点在 $x^* = \\ln 10$ 处。\n\n这台计算机有以下规格：它使用一个保持5位有效数字的十进制浮点系统来表示所有数字并执行所有算术运算。为了处理需要超过5位有效数字的数，该计算机使用“截断”法（即，它会直接截去第五位有效数字之后的所有数字）。对于本问题，使用近似值 $\\ln 10 \\approx 2.30258509...$。\n\n这个优化程序是牛顿法的一个实现，其设计是在机器计算出的梯度值 $g'(x)$ 精确为零时停止。由于截断行为，存在一个连续的实数区间 $I = [x_{\\text{low}}, x_{\\text{high}})$，对于此区间中的任何点 $x \\in I$，$x$ 的浮点表示与真实最小值点 $x^*$ 的浮点表示完全相同。这导致对于该区间中的任何 $x$，机器计算出的梯度都为零，从而使算法过早地停滞。\n\n计算这个“停滞区间”的宽度，定义为 $x_{\\text{high}} - x_{\\text{low}}$。请以单个数值形式给出你的答案。", "solution": "我们考虑函数 $g(x) = \\frac{1}{2}x^{2} - (\\ln 10)\\,x$，其导数为 $g'(x) = x - \\ln 10$。在这台给定的计算机上，所有数字都使用截断法以 $t=5$ 位有效数字的十进制浮点数表示。设 $\\operatorname{fl}(\\cdot)$ 表示通过截断到 $t=5$ 位有效数字的浮点映射。\n\n当机器计算出的梯度精确为零时，优化程序停止。在浮点运算中，$g'(x)$ 被计算为 $\\operatorname{fl}\\big(\\operatorname{fl}(x) - \\operatorname{fl}(\\ln 10)\\big)$。在没有指数限制并使用截断法的十进制浮点系统中，该表达式精确等于零的唯一情况是减法的两个操作数在浮点表示上完全相等，即\n$$\n\\operatorname{fl}(x) = \\operatorname{fl}(\\ln 10).\n$$\n\n因此，停滞区间 $I$ 正是单个浮点数 $\\operatorname{fl}(\\ln 10)$ 在映射 $\\operatorname{fl}$ 下的原像。对于一个以十进制表示、具有 $t$ 位有效数字的正规格化浮点数 $y$，记作 $y = m \\times 10^{e}$ 且 $1 \\leq m < 10$，所有截断后得到 $y$ 的实数集合是半开区间\n$$\n[y,\\, y + \\operatorname{ulp}(y)),\n$$\n其中到下一个可表示数的间距是\n$$\n\\operatorname{ulp}(y) = 10^{\\,e - (t-1)}.\n$$\n这是因为将 $m$ 的最后一位（第 $t$ 位）有效数字增加 1，会使 $y$ 的值改变 $10^{e-(t-1)}$。\n\n我们使用 $t=5$ 位和截断法来计算 $\\operatorname{fl}(\\ln 10)$。由于 $\\ln 10 \\approx 2.30258509\\ldots$，截断到5位有效数字得到\n$$\n\\operatorname{fl}(\\ln 10) = 2.3025 \\times 10^{0},\n$$\n我们有 $e=0$。因此，\n$$\n\\operatorname{ulp}\\big(\\operatorname{fl}(\\ln 10)\\big) = 10^{\\,0 - (5-1)} = 10^{-4}.\n$$\n所以，\n$$\nI = \\big[2.3025,\\, 2.3025 + 10^{-4}\\big)\n= [2.3025,\\, 2.3026),\n$$\n并且停滞区间的宽度为\n$$\nx_{\\text{high}} - x_{\\text{low}} = 10^{-4}.\n$$", "answer": "$$\\boxed{1 \\times 10^{-4}}$$", "id": "2167170"}]}