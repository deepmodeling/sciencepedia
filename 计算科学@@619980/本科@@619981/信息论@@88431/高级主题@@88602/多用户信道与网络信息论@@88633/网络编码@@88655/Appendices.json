{"hands_on_practices": [{"introduction": "网络编码的核心思想是在网络中的中间节点对信息进行线性组合。为了真正理解这一过程，我们需要从头开始，追踪单个数据包在网络中的旅程。本练习将引导你通过一个简单的网络拓扑，手动计算出源数据包 $X_1$ 和 $X_2$ 在经过一系列本地线性运算后，最终在接收端形成的全局编码向量 $\\mathbf{g}$ [@problem_id:1642598]。这个实践是掌握网络编码代数表示法的基础。", "problem": "在信息论领域，线性网络编码是一种用于提升网络吞吐量、效率和可扩展性的技术。考虑一个由四个节点组成的简化通信网络：一个源节点 S，两个中间中继节点 R1 和 R2，以及一个汇聚节点 T。\n\n源节点 S 生成两个不同的数据包 $X_1$ 和 $X_2$。这些数据包是向量空间的元素，且所有运算都是线性的。数据根据以下协议在网络中流动：\n\n1.  源节点 S 将数据包 $X_1$ 传输到中继节点 R1。\n2.  源节点 S 将数据包 $X_2$ 传输到中继节点 R2。\n3.  中继节点 R1 在接收到其数据包后，将其原封不动地转发到中继节点 R2。\n4.  中继节点 R2 通过对其接收到的两个数据包进行线性组合，为汇聚节点 T 创建一个输出数据包。来自源节点 S 的数据包（即 $X_2$）被乘以因子 $\\alpha$，来自中继节点 R1 的数据包（即 $X_1$）被乘以因子 $\\beta$。然后将这两个经过缩放的数据包相加，形成从 R2 传输到 T 的单个数据包。\n5.  汇聚节点 T 仅接收来自 R2 的这一个数据包。\n\n汇聚节点 T 接收到的最终数据包，记为 $Y_T$，可以写成原始源数据包的唯一线性组合，形式为 $Y_T = g_1 X_1 + g_2 X_2$。向量 $\\mathbf{g} = [g_1, g_2]$ 被定义为数据包 $Y_T$ 的全局编码向量。\n\n请用系数 $\\alpha$ 和 $\\beta$ 来确定全局编码向量 $\\mathbf{g}$。", "solution": "我们将每个传输的数据包建模为源数据包 $X_{1}$ 和 $X_{2}$ 的线性组合，并使用相应的全局编码向量来表示。设与 $X_{1}$ 和 $X_{2}$ 相关联的标准基向量为\n$$\n\\mathbf{e}_{1} = \\begin{pmatrix}1 & 0\\end{pmatrix}, \\quad \\mathbf{e}_{2} = \\begin{pmatrix}0 & 1\\end{pmatrix}.\n$$\n根据协议：\n- 从 S 到 R1 的传输承载了未经改变的 $X_{1}$，因此其全局编码向量是 $\\mathbf{e}_{1}$。\n- 从 S 到 R2 的传输承载了未经改变的 $X_{2}$，因此其全局编码向量是 $\\mathbf{e}_{2}$。\n- R1 将其数据包原封不动地转发到 R2，因此从 R1 到 R2 的数据包的全局编码向量仍然是 $\\mathbf{e}_{1}$。\n\n在 R2 节点，去往 T 的出向数据包是其接收到的两个数据包的线性组合，其中来自 R1 的数据包（对应于 $X_{1}$）的局部系数为 $\\beta$，来自 S 的数据包（对应于 $X_{2}$）的局部系数为 $\\alpha$。因此，该出向数据包的全局编码向量是其接收数据包的全局编码向量的线性组合：\n$$\n\\mathbf{g} \\;=\\; \\beta\\,\\mathbf{e}_{1} \\;+\\; \\alpha\\,\\mathbf{e}_{2}\n\\;=\\; \\begin{pmatrix}\\beta & \\alpha\\end{pmatrix}.\n$$\n等价地，在 T 处接收到的符号为\n$$\nY_{T} \\;=\\; \\beta X_{1} \\;+\\; \\alpha X_{2},\n$$\n所以 $g_{1} = \\beta$ 且 $g_{2} = \\alpha$，这与定义 $Y_{T} = g_{1}X_{1} + g_{2}X_{2}$ 相符。", "answer": "$$\\boxed{\\begin{pmatrix}\\beta & \\alpha\\end{pmatrix}}$$", "id": "1642598"}, {"introduction": "理解了信息如何被编码混合后，下一个关键步骤自然就是解码——如何从混合后的数据中恢复出原始信息。本练习将让你扮演接收端的角色，利用已知的全局编码向量和接收到的混合数据包，来解开原始数据包 $X_1$ 和 $X_2$ [@problem_id:1642628]。这个过程会让你亲身体验在有限域上求解线性方程组，这是网络编码解码过程的核心数学工具。", "problem": "在一个分布式环境监测系统中，两个远程传感器提供读数，表示为数据包 $X_1$ 和 $X_2$。这些读数是被称为伽罗瓦域 $GF(3)$ 的有限数学系统的元素，该系统由整数 $\\{0, 1, 2\\}$ 构成，所有算术运算都在模3下进行。\n\n传感器数据通过一个使用线性网络编码的网络进行传输。一个中央数据汇聚中心接收到两个编码数据包 $Y_1$ 和 $Y_2$，它们是原始传感器数据包的线性组合。该中心已接收到值为 $Y_1 = 0$ 和 $Y_2 = 1$ 的数据包。\n\n通过通信协议，该中心知道接收到的数据包 $Y_1$ 是使用全局编码向量 $g_1 = [1, 1]$ 生成的，而数据包 $Y_2$ 是使用全局编码向量 $g_2 = [1, 2]$ 生成的。这意味着接收到的数据包与源数据包之间存在以下方程关系：\n$Y_1 = 1 \\cdot X_1 + 1 \\cdot X_2$\n$Y_2 = 1 \\cdot X_1 + 2 \\cdot X_2$\n\n你的任务是作为该中心的解码器，确定原始传感器读数 $X_1$ 和 $X_2$。将你的答案以行向量 $[X_1, X_2]$ 的形式呈现。", "solution": "问题要求我们从接收到的编码数据包 $Y_1$ 和 $Y_2$ 中恢复出原始数据包 $X_1$ 和 $X_2$。我们已知它们之间的线性关系，并且所有计算都在伽罗瓦域 $GF(3)$ 中进行。\n\n首先，让我们写下给定的线性方程组：\n$$\n\\begin{cases}\nY_1 = 1 \\cdot X_1 + 1 \\cdot X_2 \\\\\nY_2 = 1 \\cdot X_1 + 2 \\cdot X_2\n\\end{cases}\n$$\n\n所有算术运算都在模3下进行。我们已知接收到的数据包的值为 $Y_1 = 0$ 和 $Y_2 = 1$。将这些值代入我们的方程组，得到：\n$$\n\\begin{cases}\n0 = X_1 + X_2 \\pmod 3 \\\\\n1 = X_1 + 2X_2 \\pmod 3\n\\end{cases}\n$$\n\n这个方程组可以用矩阵形式表示为 $Y = GX$，其中 $Y$ 是接收数据包的向量，$G$ 是编码向量组成的矩阵，$X$ 是源数据包的向量。\n$$\n\\begin{pmatrix} Y_1 \\\\ Y_2 \\end{pmatrix} = \\begin{pmatrix} 1 & 1 \\\\ 1 & 2 \\end{pmatrix} \\begin{pmatrix} X_1 \\\\ X_2 \\end{pmatrix}\n$$\n代入 $Y_1$ 和 $Y_2$ 的值：\n$$\n\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} 1 & 1 \\\\ 1 & 2 \\end{pmatrix} \\begin{pmatrix} X_1 \\\\ X_2 \\end{pmatrix}\n$$\n\n为了求解源向量 $X = \\begin{pmatrix} X_1 \\\\ X_2 \\end{pmatrix}$，我们需要在 $GF(3)$ 中求编码矩阵 $G = \\begin{pmatrix} 1 & 1 \\\\ 1 & 2 \\end{pmatrix}$ 的逆矩阵。如果逆矩阵 $G^{-1}$ 存在，我们就可以通过 $X = G^{-1}Y$ 计算出 $X$。\n\n一个 2x2 矩阵 $\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}$ 的逆矩阵由公式 $\\frac{1}{ad-bc} \\begin{pmatrix} d & -b \\\\ -c & a \\end{pmatrix}$ 给出。\n\n首先，我们计算 G 的行列式，$\\det(G) = ad - bc$：\n$$\n\\det(G) = (1)(2) - (1)(1) = 2 - 1 = 1\n$$\n由于所有运算都在 $GF(3)$ 中进行，行列式的值为 $1 \\pmod 3$。行列式不为零意味着该矩阵是可逆的。\n\n接下来，我们求行列式的逆元。在 $GF(3)$ 中，1的乘法逆元是1，因为 $1 \\cdot 1 = 1 \\equiv 1 \\pmod 3$。所以，$(\\det(G))^{-1} = 1$。\n\n现在，我们求 G 的伴随矩阵，即 $\\begin{pmatrix} d & -b \\\\ -c & a \\end{pmatrix}$：\n$$\n\\text{adj}(G) = \\begin{pmatrix} 2 & -1 \\\\ -1 & 1 \\end{pmatrix}\n$$\n我们需要用 $GF(3)=\\{0, 1, 2\\}$ 中的元素来表示负值。在模3算术中，$-1 \\equiv 2 \\pmod 3$。所以，伴随矩阵变为：\n$$\n\\text{adj}(G) = \\begin{pmatrix} 2 & 2 \\\\ 2 & 1 \\end{pmatrix}\n$$\n\n现在我们可以求出逆矩阵 $G^{-1} = (\\det(G))^{-1} \\cdot \\text{adj}(G)$：\n$$\nG^{-1} = 1 \\cdot \\begin{pmatrix} 2 & 2 \\\\ 2 & 1 \\end{pmatrix} = \\begin{pmatrix} 2 & 2 \\\\ 2 & 1 \\end{pmatrix}\n$$\n\n最后，我们可以通过将 $G^{-1}$ 与接收到的数据包向量 $Y$ 相乘来求得原始数据包 $X_1$ 和 $X_2$：\n$$\n\\begin{pmatrix} X_1 \\\\ X_2 \\end{pmatrix} = G^{-1} \\begin{pmatrix} Y_1 \\\\ Y_2 \\end{pmatrix} = \\begin{pmatrix} 2 & 2 \\\\ 2 & 1 \\end{pmatrix} \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\n$$\n\n执行矩阵-向量乘法：\n$$\nX_1 = (2 \\cdot 0) + (2 \\cdot 1) = 0 + 2 = 2\n$$\n$$\nX_2 = (2 \\cdot 0) + (1 \\cdot 1) = 0 + 1 = 1\n$$\n所有的计算都隐含在模3下进行。结果 $X_1=2$ 和 $X_2=1$ 已经在 $GF(3)$ 中。\n\n所以，原始的传感器读数是 $X_1 = 2$ 和 $X_2 = 1$。\n我们可以检验我们的答案：\n$Y_1 = 1 \\cdot X_1 + 1 \\cdot X_2 = 1 \\cdot 2 + 1 \\cdot 1 = 2 + 1 = 3 \\equiv 0 \\pmod 3$。正确。\n$Y_2 = 1 \\cdot X_1 + 2 \\cdot X_2 = 1 \\cdot 2 + 2 \\cdot 1 = 2 + 2 = 4 \\equiv 1 \\pmod 3$。正确。\n\n结果为行向量 $[X_1, X_2] = [2, 1]$。", "answer": "$$\\boxed{\\begin{pmatrix} 2 & 1 \\end{pmatrix}}$$", "id": "1642628"}, {"introduction": "我们已经学习了网络编码的编码和解码机制，但它的真正威力体现在何处？本练习将带你探究网络编码与网络容量之间的深刻联系。通过应用著名的最大流-最小割定理，你将为一个多播场景计算出网络能够支持的最大数据传输速率 [@problem_id:1642590]。这个实践清晰地展示了网络编码如何帮助我们达到网络的理论传输极限，从而证明了其在提升网络效率方面的巨大价值。", "problem": "考虑一个研究设施内的小型数据分发网络，该网络旨在将实验数据从一个中央源服务器流式传输到各个工作站。该网络由五个节点组成：一个源服务器 S、两个中间路由节点 N1 和 N2，以及两个终端工作站 T1 和 T2。数据可以沿着以下有向通信链路传输，其最大容量以任意单位/秒给出：\n\n- 从 S 到 N1：4 单位/秒\n- 从 S 到 N2：5 单位/秒\n- 从 N1 到 T1：3 单位/秒\n- 从 N1 到 T2：2 单位/秒\n- 从 N2 到 T1：2 单位/秒\n- 从 N2 到 T2：4 单位/秒\n\n假设网络可以使用理想网络编码。源 S 需要将相同的数据流同时发送到终端 T1 和终端 T2。这是一次多播传输。确定此次多播传输的最大可能速率。\n\n答案以单位/秒表示。", "solution": "我们将网络建模为一个有向容量图，其中源为 $S$，汇为 $T_{1},T_{2}$。在理想线性网络编码下，从 $S$ 到所有汇点的多播容量 $R$ 等于从 $S$ 到每个汇点的单汇最小割容量中的最小值。这就是多播最大流/最小割定理：\n$$\nR=\\min\\{C(S\\to T_{1}),\\,C(S\\to T_{2})\\},\n$$\n其中 $C(S\\to T_{i})$ 是最大流的值（等价于最小 $S$–$T_{i}$ 割的容量）。\n\n计算 $C(S\\to T_{1})$。任意一个 $S$–$T_{1}$ 割都必须切断从 $\\{N_{1},N_{2}\\}$ 到 $T_{1}$ 的总容量，该容量等于\n$$\nc_{N_{1}\\to T_{1}}+c_{N_{2}\\to T_{1}}=3+2=5,\n$$\n这给出了一个上界 $C(S\\to T_{1})\\leq 5$。这个界是紧的，因为 $S$ 可以在输入容量 $c_{S\\to N_{1}}=4$ 和 $c_{S\\to N_{2}}=5$ 的范围内，分别向 $N_{1}$ 发送 $3$ 个单位，向 $N_{2}$ 发送 $2$ 个单位，然后将它们转发到 $T_{1}$。因此，\n$$\nC(S\\to T_{1})=5.\n$$\n\n计算 $C(S\\to T_{2})$。任意一个 $S$–$T_{2}$ 割都必须切断从 $\\{N_{1},N_{2}\\}$ 到 $T_{2}$ 的总容量，该容量等于\n$$\nc_{N_{1}\\to T_{2}}+c_{N_{2}\\to T_{2}}=2+4=6,\n$$\n得到 $C(S\\to T_{2})\\leq 6$。这个值是可达到的，因为 $S$ 可以向 $N_{1}$ 注入最多 $4$ 个单位，向 $N_{2}$ 注入最多 $5$ 个单位，这足以支持到 $T_{2}$ 的各条出向链路上分别为 $2$ 和 $4$ 个单位的流量。因此，\n$$\nC(S\\to T_{2})=6.\n$$\n\n根据多播定理，\n$$\nR=\\min\\{5,6\\}=5.\n$$\n因此，将同一数据流同时传送到 $T_{1}$ 和 $T_{2}$ 的最大可达多播速率是 $5$ 单位/秒。", "answer": "$$\\boxed{5}$$", "id": "1642590"}]}