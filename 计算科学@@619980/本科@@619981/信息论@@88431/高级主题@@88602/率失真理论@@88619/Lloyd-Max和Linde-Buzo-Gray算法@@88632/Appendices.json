{"hands_on_practices": [{"introduction": "理论学习之后，最好的巩固方式就是亲身实践。这个练习将引导你完成 Lloyd-Max 算法的一次完整迭代。通过这个简单的离散数据源示例，你将亲手执行算法的两个核心步骤：首先，根据当前的重构水平（码字）对数据点进行分区；然后，计算新分区的数据中心（质心）来更新重构水平。这个练习是理解迭代量化器优化过程的基础。[@problem_id:1637671]", "problem": "一个数据采集系统被设计用于测量一个物理量。该物理量经过采样和一些初步处理后，会从一个离散的电平集合中产生数值。可能的输出电平集合由字母表 $\\mathcal{X} = \\{1, 3, 4, 8\\}$ 给出。由于底层物理过程的性质，这四个电平中的每一个被观测到的概率都相等。\n\n为了压缩这些数据以便传输，将实现一个简单的1比特标量量化器。这意味着所有源值都将被映射到两个重建电平中的一个。选择 Lloyd-Max 算法来优化这两个重建电平的位置，以最小化均方量化误差。\n\n优化过程从对两个重建电平的初始猜测开始：$y_1^{(0)} = 2.5$ 和 $y_2^{(0)} = 7.0$。\n\n您的任务是执行一次 Lloyd-Max 算法的完整迭代。一次完整的迭代包括两个步骤：首先，根据最近的重建电平对源字母表进行划分；其次，更新重建电平，使其成为新划分区域的质心。\n\n计算新的一对重建电平 $(y_1^{(1)}, y_2^{(1)})$。将您的答案表示为一个行矩阵，其中包含按升序排列的两个值，必要时使用精确分数。", "solution": "源字母表为 $\\mathcal{X}=\\{1,3,4,8\\}$，对于每个 $x \\in \\mathcal{X}$，其概率相等，为 $p(x)=\\frac{1}{4}$。对于均方误差，两个重建电平之间的 Lloyd-Max 划分边界是当前电平的中点。当 $y_{1}^{(0)}=\\frac{5}{2}$ 和 $y_{2}^{(0)}=7$ 时，决策边界为\n$$\nb=\\frac{y_{1}^{(0)}+y_{2}^{(0)}}{2}=\\frac{\\frac{5}{2}+7}{2}=\\frac{\\frac{5}{2}+\\frac{14}{2}}{2}=\\frac{\\frac{19}{2}}{2}=\\frac{19}{4}.\n$$\n因此，由最近邻分配导出的划分为 $S_{1}=\\{1,3,4\\}$ 和 $S_{2}=\\{8\\}$。\n\n对于离散的等概率点，质心更新公式为\n$$\ny_{k}^{(1)}=\\frac{\\sum_{x \\in S_{k}} x\\,p(x)}{\\sum_{x \\in S_{k}} p(x)}.\n$$\n对于 $S_{1}$，\n$$\ny_{1}^{(1)}=\\frac{(1+3+4)\\cdot \\frac{1}{4}}{3 \\cdot \\frac{1}{4}}=\\frac{8}{3},\n$$\n对于 $S_{2}$，\n$$\ny_{2}^{(1)}=\\frac{8 \\cdot \\frac{1}{4}}{1 \\cdot \\frac{1}{4}}=8.\n$$\n按升序排列，更新后的重建电平为 $\\frac{8}{3}$ 和 $8$。", "answer": "$$\\boxed{\\begin{pmatrix} \\frac{8}{3} & 8 \\end{pmatrix}}$$", "id": "1637671"}, {"introduction": "Lloyd-Max 算法的一个重要特性是，每次迭代后，总的量化失真（如均方误差）是不会增加的。但这是否意味着每个单独分区的失真也不会增加呢？这个练习通过一个精心设计的场景，揭示了一个有趣且不那么直观的现象。你将计算并比较一次迭代前后某个特定分区的失真变化，从而更深入地理解算法的动态收敛过程。[@problem_id:1637650]", "problem": "用于一维标量量化的 Lloyd-Max 算法是一种迭代过程，旨在为给定的数据集找到一组最佳量化水平（质心）。本问题探讨在一次完整迭代过程中，每个簇的失真度的演变。\n\n考虑一个由四个点组成的一维数据集，$X = \\{0, 2, 3, 12\\}$。量化过程从包含两个质心的初始集合开始，$C^{(0)} = \\{c_1^{(0)}, c_2^{(0)}\\} = \\{0.5, 1.5\\}$。为便于组织，我们总是将簇标记为簇1的质心小于簇2的质心（即 $c_1 < c_2$）。\n\n包含数据点 $\\{x_j\\}$ 并被分配了质心 $c$ 的簇的失真度，由平方误差和来衡量：$D = \\sum_j (x_j - c)^2$。\n\n算法的一次完整迭代，将系统从状态 $k$ 转移到状态 $k+1$，包括以下两个连续步骤：\n1.  **质心更新：** 对于前一个状态的每个决策区域 $R_i^{(k)}$，通过计算 $R_i^{(k)}$ 内所有数据点的算术平均值，来得到新的质心 $c_i^{(k+1)}$。\n2.  **区域更新（重新划分）：** 使用新的质心集合 $\\{c_i^{(k+1)}\\}$，将整个数据集 $X$ 中的每个数据点重新分配给对应于最近的新质心（以欧几里得距离衡量）的簇。这样就定义了新的决策区域 $R_i^{(k+1)}$。\n\n首先，确定初始状态（状态 0）。这需要通过基于给定的初始质心 $C^{(0)}$ 划分数据集 $X$ 来找到初始决策区域 $R_1^{(0)}$ 和 $R_2^{(0)}$。然后，第一个簇的初始失真度 $D_1^{(0)}$ 是区域 $R_1^{(0)}$ 中的点相对于质心 $c_1^{(0)}$ 的平方误差和。\n\n接下来，执行恰好一次完整的算法迭代（一个质心更新步骤，然后是一个区域更新步骤），以确定新的质心 $C^{(1)} = \\{c_1^{(1)}, c_2^{(1)}\\}$ 和新的区域 $R_1^{(1)}, R_2^{(1)}$。这次迭代结束时第一个簇的失真度 $D_1^{(1)}$ 是新区域 $R_1^{(1)}$ 中的点相对于新质心 $c_1^{(1)}$ 的平方误差和。\n\n计算比率 $\\frac{D_1^{(1)}}{D_1^{(0)}}$。", "solution": "问题要求计算 Lloyd-Max 算法执行一次完整迭代后第一个簇的失真度与其初始失真度的比率。我们已知数据集 $X = \\{0, 2, 3, 12\\}$ 和初始质心 $C^{(0)} = \\{c_1^{(0)}, c_2^{(0)}\\} = \\{0.5, 1.5\\}$。\n\n**步骤 1：确定初始状态（状态 0）**\n\n首先，我们必须根据初始质心 $C^{(0)}$ 对数据集 $X$ 进行划分。两个簇之间的决策边界是质心的中点：\n$$b^{(0)} = \\frac{c_1^{(0)} + c_2^{(0)}}{2} = \\frac{0.5 + 1.5}{2} = 1.0$$\n小于 $b^{(0)}$ 的数据点被分配到簇1，大于或等于 $b^{(0)}$ 的数据点被分配到簇2。\n-   对于 $x=0$：$0 < 1.0$，所以它属于簇1。\n-   对于 $x=2$：$2 > 1.0$，所以它属于簇2。\n-   对于 $x=3$：$3 > 1.0$，所以它属于簇2。\n-   对于 $x=12$：$12 > 1.0$，所以它属于簇2。\n\n这样我们得到了初始决策区域：\n$R_1^{(0)} = \\{0\\}$\n$R_2^{(0)} = \\{2, 3, 12\\}$\n\n接下来，我们使用 $R_1^{(0)}$ 中的点和质心 $c_1^{(0)}=0.5$ 来计算第一个簇的初始失真度 $D_1^{(0)}$。\n$$D_1^{(0)} = \\sum_{x \\in R_1^{(0)}} (x - c_1^{(0)})^2 = (0 - 0.5)^2 = (-0.5)^2 = 0.25$$\n\n**步骤 2：执行一次完整迭代以找到状态 1**\n\n一次完整迭代包括一个质心更新步骤和一个区域更新步骤。\n\n**2a. 质心更新**\n我们通过计算当前区域 $R_1^{(0)}$ 和 $R_2^{(0)}$ 中点的算术平均值来计算新的质心 $c_1^{(1)}$ 和 $c_2^{(1)}$。\n$$c_1^{(1)} = \\text{mean}(R_1^{(0)}) = \\frac{0}{1} = 0$$\n$$c_2^{(1)} = \\text{mean}(R_2^{(0)}) = \\frac{2 + 3 + 12}{3} = \\frac{17}{3}$$\n新的质心集合是 $C^{(1)} = \\{0, 17/3\\}$。请注意，$c_1^{(1)} < c_2^{(1)}$ 这一关系得以保持。\n\n**2b. 区域更新（重新划分）**\n现在我们使用新的质心 $C^{(1)}$ 重新划分整个数据集 $X$。新的决策边界是：\n$$b^{(1)} = \\frac{c_1^{(1)} + c_2^{(1)}}{2} = \\frac{0 + 17/3}{2} = \\frac{17}{6} \\approx 2.833$$\n我们重新分配来自原始数据集 $X$ 的每个点：\n-   对于 $x=0$：$0 < 17/6$，所以它属于簇1。\n-   对于 $x=2$：$2 < 17/6$（因为 $2 = 12/6$），所以它属于簇1。\n-   对于 $x=3$：$3 > 17/6$（因为 $3 = 18/6$），所以它属于簇2。\n-   对于 $x=12$：$12 > 17/6$，所以它属于簇2。\n\n这就得到了状态1的新决策区域：\n$R_1^{(1)} = \\{0, 2\\}$\n$R_2^{(1)} = \\{3, 12\\}$\n\n**步骤 3：计算最终失真度和比率**\n\n我们使用新区域 $R_1^{(1)}$ 中的点和新质心 $c_1^{(1)} = 0$ 来计算状态1时第一个簇的失真度 $D_1^{(1)}$。\n$$D_1^{(1)} = \\sum_{x \\in R_1^{(1)}} (x - c_1^{(1)})^2 = (0 - 0)^2 + (2 - 0)^2 = 0^2 + 2^2 = 4$$\n\n最后，我们计算所要求的比率 $\\frac{D_1^{(1)}}{D_1^{(0)}}$。\n$$\\frac{D_1^{(1)}}{D_1^{(0)}} = \\frac{4}{0.25} = 16$$\n这个结果表明，虽然 Lloyd-Max 算法中的总失真度在每次迭代中保证非递增，但单个特定簇内的失真度确实可能会增加。", "answer": "$$\\boxed{16}$$", "id": "1637650"}, {"introduction": "Lloyd-Max 算法的思想可以从一维的标量数据自然地推广到多维的矢量数据，这就引出了 Linde-Buzo-Gray (LBG) 算法。本练习将带你从标量量化迈向矢量量化，并处理一个在实际应用中非常常见的挑战——“空单元问题”。你将看到，在迭代过程中，某些初始选择的代表点（码字）可能无法吸引任何数据点，从而成为“空单元”。通过解决这个问题，你将学会如何处理这种情况，并了解 LBG 算法的稳健性。[@problem_id:1637697]", "problem": "信号处理和数据压缩中的一个关键算法是用于矢量量化的Linde-Buzo-Gray（LBG）算法。该算法通过迭代地优化一组称为码本的代表点，以最佳匹配给定的训练数据集。\n\nLBG算法的单次迭代包含两个关键步骤：\n1.  **划分：**给定一个码本 $C = \\{c_1, c_2, ..., c_M\\}$，训练数据空间被划分为 $M$ 个单元，$\\{R_1, R_2, ..., R_M\\}$。数据集中的每个训练矢量 $x$ 被分配到单元 $R_i$，如果码字 $c_i$ 是与 $x$ 最接近的码字。接近程度由标准的欧几里得距离平方确定。如果距离出现相等的情况，则将该矢量分配给具有最小索引 $i$ 的码字所对应的单元。\n2.  **更新：**通过计算每个单元中训练矢量的质心（分量上的算术平均值）来形成新的码本。如果一个单元 $R_i$ 不包含任何训练矢量（即它是一个空单元），则相应的码字 $c_i$ 将被丢弃，并且不属于新码本的一部分。\n\n考虑一个位于二维平面上的训练数据集 $X$，它由以下四个矢量组成：\n$x_1 = (a, b)$, $x_2 = (a, -b)$, $x_3 = (-a, b)$, 和 $x_4 = (-a, -b)$。\n\n用于LBG算法的初始码本为 $C_0 = \\{c_1, c_2, c_3\\}$，定义如下：\n$c_1 = (-L, 0)$, $c_2 = (0, 0)$, 和 $c_3 = (L, 0)$。\n\n对于本问题，使用具体的参数值 $a=5$，$b=2$ 和 $L=4$。\n\n计算经过LBG算法一次完整迭代后，新码本 $C_1$ 中码字的全集。设新码字为 $c'_1, c'_2, ..., c'_{K}$。按字典序（先按x分量排序，再按y分量排序）对这些码字进行排序。将最终答案表示为一个包含这些有序码字分量的单行矩阵，格式为 $\\begin{pmatrix} x'_{1} & y'_{1} & x'_{2} & y'_{2} & \\dots \\end{pmatrix}$。", "solution": "我们应用一次Linde-Buzo-Gray算法迭代，该迭代包括一个划分步骤和一个更新步骤。数据矢量 $x=(x_{1},x_{2})$ 与码字 $c=(c_{1},c_{2})$ 之间的欧几里得距离平方为\n$$\nd^{2}(x,c)=\\|x-c\\|^{2}=(x_{1}-c_{1})^{2}+(x_{2}-c_{2})^{2}.\n$$\n当 $a=5$，$b=2$ 和 $L=4$ 时，训练集为\n$$\nx_{1}=(5,2),\\quad x_{2}=(5,-2),\\quad x_{3}=(-5,2),\\quad x_{4}=(-5,-2),\n$$\n初始码本为\n$$\nc_{1}=(-4,0),\\quad c_{2}=(0,0),\\quad c_{3}=(4,0).\n$$\n\n划分步骤。计算每个 $x_{j}$ 到每个 $c_{i}$ 的距离：\n- 对于 $x_{1}=(5,2)$:\n$$\nd^{2}(x_{1},c_{1})=(5-(-4))^{2}+(2-0)^{2}=9^{2}+2^{2}=81+4=85,\n$$\n$$\nd^{2}(x_{1},c_{2})=(5-0)^{2}+(2-0)^{2}=5^{2}+2^{2}=25+4=29,\n$$\n$$\nd^{2}(x_{1},c_{3})=(5-4)^{2}+(2-0)^{2}=1^{2}+2^{2}=1+4=5.\n$$\n因此 $x_{1}$ 被分配到 $R_{3}$。\n\n- 对于 $x_{2}=(5,-2)$:\n$$\nd^{2}(x_{2},c_{1})=(5-(-4))^{2}+(-2-0)^{2}=9^{2}+(-2)^{2}=81+4=85,\n$$\n$$\nd^{2}(x_{2},c_{2})=(5-0)^{2}+(-2-0)^{2}=5^{2}+(-2)^{2}=25+4=29,\n$$\n$$\nd^{2}(x_{2},c_{3})=(5-4)^{2}+(-2-0)^{2}=1^{2}+(-2)^{2}=1+4=5.\n$$\n因此 $x_{2}$ 被分配到 $R_{3}$。\n\n- 对于 $x_{3}=(-5,2)$:\n$$\nd^{2}(x_{3},c_{1})=(-5-(-4))^{2}+(2-0)^{2}=(-1)^{2}+2^{2}=1+4=5,\n$$\n$$\nd^{2}(x_{3},c_{2})=(-5-0)^{2}+(2-0)^{2}=(-5)^{2}+2^{2}=25+4=29,\n$$\n$$\nd^{2}(x_{3},c_{3})=(-5-4)^{2}+(2-0)^{2}=(-9)^{2}+2^{2}=81+4=85.\n$$\n因此 $x_{3}$ 被分配到 $R_{1}$。\n\n- 对于 $x_{4}=(-5,-2)$:\n$$\nd^{2}(x_{4},c_{1})=(-5-(-4))^{2}+(-2-0)^{2}=(-1)^{2}+(-2)^{2}=1+4=5,\n$$\n$$\nd^{2}(x_{4},c_{2})=(-5-0)^{2}+(-2-0)^{2}=(-5)^{2}+(-2)^{2}=25+4=29,\n$$\n$$\nd^{2}(x_{4},c_{3})=(-5-4)^{2}+(-2-0)^{2}=(-9)^{2}+(-2)^{2}=81+4=85.\n$$\n因此 $x_{4}$ 被分配到 $R_{1}$。\n\n因此，非空单元为 $R_{1}=\\{x_{3},x_{4}\\}$ 和 $R_{3}=\\{x_{1},x_{2}\\}$，而 $R_{2}=\\varnothing$。\n\n更新步骤。对于每个非空单元 $R_{i}$，计算其质心（分量均值）以形成更新后的码字 $c_{i}'$；丢弃空单元 $R_{2}$：\n- 对于 $R_{1}$:\n$$\nc_{1}'=\\frac{1}{2}\\bigl((-5,2)+(-5,-2)\\bigr)=\\left(\\frac{-5+(-5)}{2},\\,\\frac{2+(-2)}{2}\\right)=(-5,0).\n$$\n- 对于 $R_{3}$:\n$$\nc_{3}'=\\frac{1}{2}\\bigl((5,2)+(5,-2)\\bigr)=\\left(\\frac{5+5}{2},\\,\\frac{2+(-2)}{2}\\right)=(5,0).\n$$\n\n因此，新码本 $C_{1}$ 包含两个码字 $(-5,0)$ 和 $(5,0)$。按x分量然后按y分量的字典序排序，得到 $(-5,0)$, $(5,0)$。所要求的行矩阵为\n$$\n\\begin{pmatrix}\n-5 & 0 & 5 & 0\n\\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}-5 & 0 & 5 & 0\\end{pmatrix}}$$", "id": "1637697"}]}