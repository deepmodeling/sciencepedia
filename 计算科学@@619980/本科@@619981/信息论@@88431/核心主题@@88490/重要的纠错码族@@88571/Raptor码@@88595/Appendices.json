{"hands_on_practices": [{"introduction": "猛禽码（Raptor codes）采用两阶段编码过程，本练习将聚焦于第一阶段：预编码。预编码步骤使用一个生成矩阵，从原始源符号创建中间符号，此举旨在引入初始的冗余和结构。本练习提供了一个在二元有限域 $GF(2)$ 上进行具体计算的机会，帮助您掌握预编码阶段的基本机理。[@problem_id:1651887]", "problem": "在现代通信系统中，Raptor码是一种喷泉码，用于在可能丢失数据包的信道上进行可靠的数据传输。系统Raptor码构建中的一个关键步骤是“预编码”阶段，该阶段从原始源符号生成一组中间符号。这些中间符号增加了冗余和结构，有助于解码过程。\n\n考虑一个简化的场景，我们有 $k=4$ 个源符号，由行向量 $d = \\begin{pmatrix} 1 & 0 & 1 & 0 \\end{pmatrix}$ 表示。对这些源符号应用线性预编码，以生成 $h=2$ 个中间符号，由向量 $c = \\begin{pmatrix} c_1 & c_2 \\end{pmatrix}$ 表示。此变换由一个 $2 \\times 4$ 的生成矩阵 $G$ 定义。所有算术运算都在二元域 $\\mathrm{GF}(2)$ 上进行，其中加法等同于逻辑异或（XOR）运算。\n\n预编码的生成矩阵如下所示：\n$$\nG = \\begin{pmatrix} 1 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 1 \\end{pmatrix}\n$$\n中间符号通过矩阵向量乘积 $c^T = G d^T$ 生成，其中 $d^T$ 和 $c^T$ 分别是源符号和中间符号的列向量表示。\n\n计算中间符号 $c_1$ 和 $c_2$。将您的最终答案表示为单个行矩阵 $\\begin{pmatrix} c_1 & c_2 \\end{pmatrix}$。", "solution": "我们已知 $d = \\begin{pmatrix} 1 & 0 & 1 & 0 \\end{pmatrix}$ 和生成矩阵\n$$\nG = \\begin{pmatrix} 1 & 1 & 0 & 1 \\\\ 1 & 0 & 1 & 1 \\end{pmatrix},\n$$\n运算在 $\\mathrm{GF}(2)$ 上进行，其中加法是模 $2$ 加法。中间符号满足 $c^{T} = G d^{T}$，因此每个分量是 $G$ 的相应行与 $d$ 的模 $2$ 点积。\n\n使用 $G$ 的第一行计算 $c_{1}$：\n$$\nc_{1} = 1\\cdot 1 + 1\\cdot 0 + 0\\cdot 1 + 1\\cdot 0 \\pmod{2} = 1 + 0 + 0 + 0 \\pmod{2} = 1.\n$$\n\n使用 $G$ 的第二行计算 $c_{2}$：\n$$\nc_{2} = 1\\cdot 1 + 0\\cdot 0 + 1\\cdot 1 + 1\\cdot 0 \\pmod{2} = 1 + 0 + 1 + 0 \\pmod{2} = 0,\n$$\n因为 $1 + 1 \\equiv 0 \\pmod{2}$。\n\n因此，中间符号作为行向量为 $\\begin{pmatrix} 1 & 0 \\end{pmatrix}$。", "answer": "$$\\boxed{\\begin{pmatrix} 1 & 0 \\end{pmatrix}}$$", "id": "1651887"}, {"introduction": "在预编码之后，第二阶段涉及到一个LT码（Luby变换码）。理解这种编码的结构对解码至关重要，而Tanner图正是一种强大的工具，它通过一个二分图来可视化源符号（变量节点）和编码包（校验节点）之间的关系。本练习将帮助您把LT码的数学定义转化为其图形表示，这项技能对于理解后续的剥离解码算法至关重要。[@problem_id:1651913]", "problem": "在一个采用Luby变换（LT）码的数字通信系统中，一组4个源符号，记为 $s_1, s_2, s_3,$ 和 $s_4$，被编码成5个传输包，记为 $p_1, p_2, p_3, p_4,$ 和 $p_5$。每个包是通过对源符号的一个子集进行按位异或（XOR，用 $\\oplus$ 表示）运算生成的。\n\n这五个接收到的包的构成如下：\n- $p_1 = s_1 \\oplus s_3$\n- $p_2 = s_2 \\oplus s_3 \\oplus s_4$\n- $p_3 = s_1 \\oplus s_4$\n- $p_4 = s_2 \\oplus s_4$\n- $p_5 = s_1 \\oplus s_2 \\oplus s_3$\n\n这种编码方案可以用一个Tanner图来表示，它是一种二分图。其中一组节点称为变量节点，代表源符号（$s_i$）；另一组节点称为校验节点，代表编码后的包（$p_j$）。当且仅当源符号$s_i$是包$p_j$的一个组成部分时，变量节点$s_i$和校验节点$p_j$之间存在一条边。节点的度是连接到该节点的边的数量。\n\n根据给定的包的构成，下列哪个陈述正确地描述了相应的Tanner图中节点的度？\n\nA. 所有变量节点的度都为3，所有校验节点的度都为2。\n\nB. 所有变量节点的度都为3，校验节点（$p_1, p_2, p_3, p_4, p_5$）的度分别为(2, 3, 2, 2, 3)。\n\nC. 变量节点（$s_1, s_2, s_3, s_4$）的度分别为(3, 3, 3, 3)，校验节点（$p_1, p_2, p_3, p_4, p_5$）的度分别为(3, 2, 3, 2, 3)。\n\nD. 所有校验节点的度都为3，所有变量节点的度都为3。\n\nE. 变量节点（$s_1, s_2, s_3, s_4$）的度分别为(2, 3, 3, 2)，校验节点（$p_1, p_2, p_3, p_4, p_5$）的度分别为(2, 3, 2, 2, 3)。", "solution": "这个LT码的Tanner图有变量节点$s_{1},s_{2},s_{3},s_{4}$和校验节点$p_{1},p_{2},p_{3},p_{4},p_{5}$。当且仅当$s_{i}$出现在$p_{j}$中时，一条边连接$s_{i}$和$p_{j}$。因此，变量节点$s_{i}$的度等于包含$s_{i}$的包的数量，而校验节点$p_{j}$的度等于为构成$p_{j}$而进行异或运算的源符号的数量。\n\n根据给定的构成：\n- $p_{1}=s_{1}\\oplus s_{3}$ 意味着 $\\deg(p_{1})=2$ 且有边连接到 $s_{1},s_{3}$。\n- $p_{2}=s_{2}\\oplus s_{3}\\oplus s_{4}$ 意味着 $\\deg(p_{2})=3$ 且有边连接到 $s_{2},s_{3},s_{4}$。\n- $p_{3}=s_{1}\\oplus s_{4}$ 意味着 $\\deg(p_{3})=2$ 且有边连接到 $s_{1},s_{4}$。\n- $p_{4}=s_{2}\\oplus s_{4}$ 意味着 $\\deg(p_{4})=2$ 且有边连接到 $s_{2},s_{4}$。\n- $p_{5}=s_{1}\\oplus s_{2}\\oplus s_{3}$ 意味着 $\\deg(p_{5})=3$ 且有边连接到 $s_{1},s_{2},s_{3}$。\n\n计算变量节点的度：\n- $s_{1}$出现在$p_{1},p_{3},p_{5}$中，所以$\\deg(s_{1})=3$。\n- $s_{2}$出现在$p_{2},p_{4},p_{5}$中，所以$\\deg(s_{2})=3$。\n- $s_{3}$出现在$p_{1},p_{2},p_{5}$中，所以$\\deg(s_{3})=3$。\n- $s_{4}$出现在$p_{2},p_{3},p_{4}$中，所以$\\deg(s_{4})=3$。\n\n因此，变量节点 $(s_{1},s_{2},s_{3},s_{4})$ 的度为 $(3,3,3,3)$，校验节点 $(p_{1},p_{2},p_{3},p_{4},p_{5})$ 的度为 $(2,3,2,2,3)$。这与选项B相符。", "answer": "$$\\boxed{B}$$", "id": "1651913"}, {"introduction": "LT码的优雅之处在于其简单高效的剥离解码器，然而，这种解码器并非万无一失。剥离解码器通过利用度为 $1$ 的校验节点来迭代地解析符号，但如果图中包含某些特定结构（例如，环），解码过程可能会停滞。通过在一个特定图上模拟解码器，这个问题让您能亲身体验解码过程、其动态变化以及一个关键的失败模式，从而揭示了预编码阶段对于保证解码成功的重要性。[@problem_id:1651898]", "problem": "在现代纠错码的研究中，Luby变换（LT）码是一类以其简单的编码和解码机制而闻名的喷泉码。LT码通过对一组随机选择的源符号进行异或（XOR，表示为 $\\oplus$）求和来生成编码符号。\n\n这个过程可以用一个二分Tanner图来可视化，其中一组节点代表源符号（变量节点），另一组节点代表编码符号（校验节点）。如果某个源符号被包含在某个编码符号的异或求和中，那么就有一条边连接相应的变量节点和校验节点。\n\nLT码的标准解码算法是一种称为剥离解码器的贪心迭代过程。该过程如下：\n1.  识别一个“波纹”，即一个度为一的校验节点（也就是说，它只连接到一个变量节点）。\n2.  如果找到了一个波纹，与之相连的变量节点的值就立即被恢复（它等于该校验节点的值）。\n3.  然后，将这个已恢复变量的值与它所连接的所有其他校验节点进行异或操作。从图中移除已恢复的变量节点、该波纹校验节点以及它们所有的关联边。\n4.  从步骤1开始重复此过程。\n如果在任何时候，图中已没有度为一的校验节点，但仍有未恢复的变量节点，则称解码器“停滞”。\n\n考虑一个场景，其中四个源符号 $\\{s_1, s_2, s_3, s_4\\}$ 根据以下关系被编码成四个编码符号 $\\{c_1, c_2, c_3, c_4\\}$：\n- $c_1 = s_3$\n- $c_2 = s_1 \\oplus s_2 \\oplus s_3$\n- $c_3 = s_1 \\oplus s_4$\n- $c_4 = s_2 \\oplus s_4$\n\n假设这四个编码符号被无错误地接收，那么对该系统应用剥离解码器的结果是什么？\n\nA. 解码器成功恢复所有四个源符号 $\\{s_1, s_2, s_3, s_4\\}$。\n\nB. 解码器立即停滞，因为初始图中没有度为一的校验节点。\n\nC. 解码器恢复了部分符号，但在恢复所有符号之前停滞。一个最小不可恢复符号集是 $\\{s_1, s_2, s_4\\}$。\n\nD. 解码器恢复了部分符号，但在恢复所有符号之前停滞。一个最小不可恢复符号集是 $\\{s_1, s_4\\}$。\n\nE. 解码器可以恢复所有符号，但前提是它首先通过求解一个线性方程组来同时解码 $s_1$ 和 $s_2$。", "solution": "我们将此系统表示为一个二分图，其变量节点为 $\\{s_{1},s_{2},s_{3},s_{4}\\}$，校验节点为 $\\{c_{1},c_{2},c_{3},c_{4}\\}$，边代表符号包含在异或运算中。方程如下\n$$\nc_{1}=s_{3},\\quad c_{2}=s_{1}\\oplus s_{2}\\oplus s_{3},\\quad c_{3}=s_{1}\\oplus s_{4},\\quad c_{4}=s_{2}\\oplus s_{4}.\n$$\n根据剥离解码器的规则，波纹是任何度为一的校验节点。初始时，$c_{1}$ 的度为一，因为它只连接到 $s_{3}$。因此，我们立即恢复\n$$\ns_{3}=c_{1}.\n$$\n然后，我们将这个已恢复变量的值与所有相邻的校验节点进行异或操作，并从图中移除 $s_{3}$ 和 $c_{1}$ 及其关联边。唯一的相邻校验节点是 $c_{2}$，它更新为\n$$\nc_{2}'=c_{2}\\oplus s_{3}=(s_{1}\\oplus s_{2}\\oplus s_{3})\\oplus s_{3}=s_{1}\\oplus s_{2}.\n$$\n剩余系统为\n$$\nc_{2}'=s_{1}\\oplus s_{2},\\quad c_{3}=s_{1}\\oplus s_{4},\\quad c_{4}=s_{2}\\oplus s_{4}.\n$$\n每个剩余的校验节点度都为二，因此没有度为一的校验节点（没有波纹），剥离解码器在此时停滞。\n\n为了说明通过剥离无法恢复更多变量，我们观察剩余方程之间的线性相关性：\n$$\n(s_{1}\\oplus s_{4})\\oplus(s_{2}\\oplus s_{4})=s_{1}\\oplus s_{2},\n$$\n所以 $c_{2}'=c_{3}\\oplus c_{4}$。因此，对于三个未知数 $\\{s_{1},s_{2},s_{4}\\}$，剩余系统的秩为二，留下一个自由度，这使得通过剥离无法唯一恢复。未恢复的变量形成一个停止集 $S=\\{s_{1},s_{2},s_{4}\\}$：每个相邻的校验节点（$c_{2}',c_{3},c_{4}$）相对于 $S$ 的度都至少为二，而 $S$ 的任何真子集都会导出一个度为一的校验节点，因此 $S$ 是最小的。\n\n因此，解码器恢复 $s_{3}$ 后停滞，最小不可恢复集为 $\\{s_{1},s_{2},s_{4}\\}$，与选项C相符。", "answer": "$$\\boxed{C}$$", "id": "1651898"}]}