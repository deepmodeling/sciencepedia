{"hands_on_practices": [{"introduction": "麦克米伦定理为我们提供了一个强大的工具，用于在设计编码方案的初期阶段进行可行性分析。这个练习将带你应用该定理的核心不等式，来判断一组给定的码长是否可能构成一个唯一可解码的码，而无需知道具体的码字是什么。通过这个实践，你将学会如何快速验证编码设计的基本有效性 [@problem_id:1640967]。", "problem": "一个机器人工程师团队正在为一台简单的自主漫游车设计通信协议。该漫游车需要处理一组由五个不同命令组成的集合：`MOVE_FORWARD`、`TURN_LEFT`、`TURN_RIGHT`、`STOP` 和 `REPORT_STATUS`。为了优化数据传输，他们决定使用可变长度二进制码，这意味着每个命令将由一个可能不同长度的0和1序列表示。提议的设计为这五个命令分配了码字长度，具体如下：两个命令被分配长度为2的码字，其余三个命令被分配长度为3的码字。\n\n任何此类编码的基本要求是它必须是唯一可解码的；也就是说，任何连接起来的码字序列必须只对应一个唯一的命令序列。基于提议的码字长度集合 $\\{2, 2, 3, 3, 3\\}$ 和一个二进制码字母表（大小为2），理论上是否可能构建这样一个唯一可解码的码？\n\nA. 是的，可以构建一个具有这些码字长度的唯一可解码码。\n\nB. 不，不可能构建一个具有这些码字长度的唯一可解码码。\n\nC. 仅当该编码同时也是一个即时（前缀）码时，这才可能。\n\nD. 信息不足；必须知道码字的具体二进制序列。", "solution": "设二进制码字母表的大小为 $D=2$，码字长度为 $l_{1}=2$、$l_{2}=2$、$l_{3}=3$、$l_{4}=3$、$l_{5}=3$。根据 Kraft–McMillan 定理，对于一个在 $D$ 元字母表上的任何唯一可解码码，其码字长度必须满足\n$$\n\\sum_{i=1}^{5} D^{-l_{i}} \\leq 1.\n$$\n反之，如果一组长度满足这个不等式，那么就存在一个具有这些确切长度的前缀（即时）码，而每个前缀码都是唯一可解码的。\n\n计算当 $D=2$ 时的 Kraft 和：\n$$\n2^{-2}+2^{-2}+2^{-3}+2^{-3}+2^{-3}=\\frac{1}{4}+\\frac{1}{4}+\\frac{1}{8}+\\frac{1}{8}+\\frac{1}{8}=\\frac{7}{8}\\leq 1.\n$$\n由于不等式成立，因此存在一个长度为 $\\{2,2,3,3,3\\}$ 的前缀码；因此，存在一个具有这些长度的唯一可解码码。所以，这在理论上是可能的，并且实际上可以构建一个前缀码，因此不需要关于具体码字的额外信息。\n\n因此，正确选项是 A。", "answer": "$$\\boxed{A}$$", "id": "1640967"}, {"introduction": "在掌握了如何验证编码的可行性之后，下一个自然的问题是如何衡量其效率。一个“完备”的码本意味着它的编码空间被充分利用，无法再添加任何新的码字而不破坏其唯一可解码性。本练习将引导你运用麦克米伦定理的等式形式，即当克拉夫特和为1时，精确计算如何扩展一个现有码本使其达到完备状态，这在设计高效的数据压缩方案时至关重要 [@problem_id:1640977]。", "problem": "一位工程师正在为机械臂设计一种二进制通信协议。每条命令都是一个唯一的比特序列（0或1）。为了使系统高效，所有命令码字的集合必须是无前缀的，这意味着没有码字是另一个码字的前缀。此属性允许即时解码。\n\n当前的设计包含一个高优先级命令，它被分配了一个长度为1的码字。为了处理一组新的标准操作，工程师计划添加几个新的码字，所有这些码字的固定长度都为3比特。\n\n目标是创建一个*完备*的码本。一个完备码本是一个无前缀的码字集合，任何新的码字（任何长度）都不能在不违反无前缀属性的情况下被添加到该集合中。为了得到这个完备码本，必须添加的3比特码字的确切数量是多少？", "solution": "对于一个二进制无前缀码，Kraft-McMillan不等式指出，一组码字长度 $\\{l_{i}\\}$ 是无前缀的当且仅当\n$$\n\\sum_{i} 2^{-l_{i}} \\leq 1,\n$$\n并且该码是完备的当且仅当等式成立：\n$$\n\\sum_{i} 2^{-l_{i}} = 1.\n$$\n在此问题中，有一个长度为 $1$ 的码字和 $n$ 个长度为 $3$ 的附加码字。因此，Kraft和为\n$$\n2^{-1} + n \\cdot 2^{-3}.\n$$\n完备性要求\n$$\n2^{-1} + n \\cdot 2^{-3} = 1.\n$$\n两边同乘以 $2^{3}$ 得到\n$$\n2^{2} + n = 2^{3},\n$$\n所以\n$$\nn = 2^{3} - 2^{2} = 8 - 4 = 4.\n$$\n可行性是有保证的：一个长度为1的码字占据了二叉树的一个根分支，另一个分支恰好包含 $2^{3-1} = 4$ 个可用的长度为3的叶节点，选择所有这些叶节点可以得到一个Kraft和为1的无前缀集，因此是一个完备码本。", "answer": "$$\\boxed{4}$$", "id": "1640977"}, {"introduction": "虽然所有前缀码都是唯一可解码的，但反过来是否成立呢？这个练习将挑战你深入探索唯一可解码码和前缀码之间的细微差别。你需要构造一个满足麦克米伦条件的码，它能够被无歧义地解码，但却不具备“无前缀”这一特性。这项任务将加深你对不同编码类型及其性质的理解，并揭示麦克米伦定理更深层次的内涵 [@problem_id:1641032]。", "problem": "一个研究小组正在为一个简化的粒子探测器模型设计一种自定义数据压缩方案。该探测器报告三种可能的事件之一，我们将其标记为`Alpha`、`Beta`和`Gamma`。基于对事件频率的分析，这些事件的最佳二进制码字长度已确定分别为1、2和2。\n\n您的任务是为这三个事件设计一种二进制码，该码是**唯一可解码**的，但**不是前缀码**。\n\n- 一个码是**唯一可解码**的，如果任何连接起来的码字序列都能以唯一的方式解析回原始的源符号序列。\n- 一个码是**前缀码**（或即时码），如果没有任何码字是其他码字的前缀。\n\n将长度为1的码字分配给'Alpha'事件，将两个长度为2的码字分配给'Beta'和'Gamma'事件。提供一组完整的有效二进制码字 $\\{c(\\text{Alpha}), c(\\text{Beta}), c(\\text{Gamma})\\}$。按该特定顺序，以三个二进制字符串列表的形式给出您的答案。", "solution": "给定三个事件的目标码字长度为 $1,2,2$，我们必须构造一个唯一可解码但不是前缀码的二进制码，其中长度为$1$的码字分配给Alpha，两个长度为$2$的码字分配给Beta和Gamma。\n\n选择码字如下：\n- 分配 $c(\\text{Alpha})=0$ (长度为$1$)。\n- 分配 $c(\\text{Beta})=01$ (长度为$2$)。\n- 分配 $c(\\text{Gamma})=11$ (长度为$2$)。\n\n验证该码不是前缀码：根据定义，如果没有任何码字是其他码字的前缀，则该码是无前缀的。这里 $c(\\text{Alpha})=0$ 是 $c(\\text{Beta})=01$ 的前缀。因此，该码不是前缀码。\n\n验证该码是唯一可解码的：使用Sardinas–Patterson检验。令 $C=\\{0,01,11\\}$。定义\n$$\nS_{1}=\\{u:\\exists x,y\\in C,\\ x\\neq y,\\ x=y\\,u\\},\n$$\n并递归地定义\n$$\nS_{k+1}=\\{u:\\exists u'\\in S_{k},\\ \\exists x\\in C\\ \\text{such that}\\ (u'=x\\,u)\\ \\text{or}\\ (x=u'\\,u)\\}.\n$$\n一个码是唯一可解码的，当且仅当空字符串从未出现在任何 $S_{k}$ 中。\n\n计算 $S_{1}$：码字之间唯一的非平凡前缀关系是 $01=0\\,1$，这产生非空后缀 $u=1$。因此 $S_{1}=\\{1\\}$。\n\n从 $u'=1$ 计算 $S_{2}$。对于条件 $u'=x\\,u$，我们需要一个码字 $x$ 是 $1$ 的前缀。$0,01,11$ 中没有一个是 $1$ 的前缀，所以这不产生任何元素。对于条件 $x=u'\\,u$，我们需要以 $1$ 开头的码字。唯一这样的码字是 $11$，这给出 $11=1\\,1$，因此 $u=1$。所以 $S_{2}=\\{1\\}$。\n\n重复此递归过程对所有 $k\\geq 1$ 都得到 $S_{k}=\\{1\\}$，且空字符串从未出现。因此，根据Sardinas–Patterson准则，该码是唯一可解码的。\n\n因此，集合 $\\{0,01,11\\}$ 满足所有要求：按规定顺序长度为 $1,2,2$，该码不是无前缀的，并且是唯一可解码的。\n\n因此，一个有效的分配是\n$$\n\\big(c(\\text{Alpha}),\\,c(\\text{Beta}),\\,c(\\text{Gamma})\\big)=(0,01,11).\n$$", "answer": "$$\\boxed{\\begin{pmatrix}0 & 01 & 11\\end{pmatrix}}$$", "id": "1641032"}]}