{"hands_on_practices": [{"introduction": "任何即时码的核心都遵循“前缀无冲突”规则，即任何码字都不能是另一个码字的前缀。这个练习将帮助您熟练掌握这一基本原则，通过一个实际的编码扩展场景来检验一个给定的编码集，并找出添加新码字的最有效方式。这是设计和评估任何编码方案时都必须具备的基础技能 [@problem_id:1632833]。", "problem": "一个工程师团队正在为新一代低功耗环境传感器设计一种自定义二进制编码方案。为了确保传感器数据流能够被快速且无歧义地解码，这组二进制码字必须用作即时码。如果码字集中的任何码字都不是任何其他码字的前缀，则该码被定义为即时码（也称为前缀码）。\n\n为最常见的传感器读数设计的初始码字集由集合 $C = \\{01, 10, 110, 1110\\}$ 给出。\n\n现在，该团队需要向此集合中添加一个新码字，以表示“系统诊断”命令。为了优化传输效率，这个新码字应尽可能短。为了使扩充后的集合仍然是即时码，可以添加到集合 $C$ 中的最短可能二进制码字的长度是多少？\n\nA. 1\n\nB. 2\n\nC. 3\n\nD. 4\n\nE. 不可能添加任何新的码字。", "solution": "问题要求在保持即时码性质的同时，可以添加到现有集合 $C = \\{01, 10, 110, 1110\\}$ 中的最短二进制码字的长度。即时码（或前缀码）是一组码字，其中没有一个成员是另一个成员的前缀。\n\n设我们希望添加的新码字为 $w$。要使新集合 $C \\cup \\{w\\}$ 成为即时码，必须满足两个条件：\n1.  新码字 $w$ 不能是 $C$ 中任何现有码字的前缀。\n2.  $C$ 中的任何现有码字都不能是新码字 $w$ 的前缀。\n\n我们正在寻找这样的码字 $w$ 的最短可能长度。我们可以从 $L=1$ 开始，按递增顺序测试可能的长度。\n\n**步骤 1：测试长度 $L=1$。**\n长度为 1 的可能二进制码字是 `0` 和 `1`。\n- 考虑 $w = `0`$。我们检查 `0` 是否是 $C = \\{01, 10, 110, 1110\\}$ 中任何码字的前缀。码字 `01` 以 `0` 开头。因此，`0` 是 `01` 的前缀。这违反了条件 1。所以，`0` 不能被添加。\n- 考虑 $w = `1`$。我们检查 `1` 是否是 $C$ 中任何码字的前缀。码字 `10`、`110` 和 `1110` 都以 `1` 开头。因此，`1` 是这三个码字的前缀。这也违反了条件 1。所以，`1` 不能被添加。\n我们得出结论，没有长度为 1 的码字可以添加到集合 $C$ 中。\n\n**步骤 2：测试长度 $L=2$。**\n长度为 2 的可能二进制码字是 `00`、`01`、`10` 和 `11`。\n- 码字 `01` 和 `10` 已经存在于集合 $C$ 中，所以它们不能作为“新”码字添加。\n- 考虑 $w = `00`$。\n    1. `00` 是 $C = \\{01, 10, 110, 1110\\}$ 中任何码字的前缀吗？不，没有一个现有码字以 `00` 开头。\n    2. $C$ 中的任何现有码字是 `00` 的前缀吗？不，现有码字的长度分别为 2、2、3 和 4，所以它们不能是长度为 2 的码字的前缀，除非它们与该码字完全相同（但事实并非如此）。\n    由于两个条件都满足，`00` 是一个可以添加到集合中的有效码字。\n- 既然我们已经找到了一个长度为 2 的有效码字，并且已经证明了不可能有长度为 1 的码字，那么新码字的最短可能长度就是 2。\n\n为了完整起见，我们来检查一下最后一种长度为 2 的可能性。\n- 考虑 $w = `11`$。`11` 是 $C$ 中任何码字的前缀吗？是的，`11` 是 `110` 和 `1110` 的前缀。这违反了条件 1，所以 `11` 不能被添加。\n\n因此，唯一可以添加的长度为 2 的码字是 `00`。最小长度是 2。\n\n这个结果也可以用 Kraft 不等式来证实，该不等式指出，一个具有码字长度 $l_1, l_2, \\ldots, l_N$ 的即时码存在的充要条件是 $\\sum_{i=1}^{N} 2^{-l_i} \\le 1$。\n对于原始码 $C$，长度分别为 2、2、3 和 4。总和为：\n$$ S = 2^{-2} + 2^{-2} + 2^{-3} + 2^{-4} = \\frac{1}{4} + \\frac{1}{4} + \\frac{1}{8} + \\frac{1}{16} = \\frac{4}{16} + \\frac{4}{16} + \\frac{2}{16} + \\frac{1}{16} = \\frac{11}{16} $$\n由于 $S < 1$，该码不是完备的，可以添加新的码字。如果我们添加一个长度为 $L$ 的新码字，新的总和仍必须小于或等于 1：\n$$ \\frac{11}{16} + 2^{-L} \\le 1 $$\n$$ 2^{-L} \\le 1 - \\frac{11}{16} $$\n$$ 2^{-L} \\le \\frac{5}{16} $$\n我们需要找到满足此不等式的最小整数 $L$。\n- 对于 $L=1$，$2^{-1} = \\frac{1}{2} = \\frac{8}{16}$。因为 $\\frac{8}{16} > \\frac{5}{16}$，所以不满足条件。\n- 对于 $L=2$，$2^{-2} = \\frac{1}{4} = \\frac{4}{16}$。因为 $\\frac{4}{16} \\le \\frac{5}{16}$，所以满足条件。\n因此，额外码字的最小可能长度是 2。这证实了我们直接进行前缀检查的方法。\n\n正确选项是 B。", "answer": "$$\\boxed{B}$$", "id": "1632833"}, {"introduction": "在掌握了检验编码有效性的方法后，下一步便是亲手构建编码。本练习要求您在给定一组特定码字长度的条件下，系统地构建出所有可能的即时码。这不仅能加深您对克拉夫特不等式（Kraft's inequality）如何约束码字长度的理解，还能让您直观地看到编码树结构与码字组合之间的内在联系 [@problem_id:1632866]。", "problem": "一个数据压缩系统正在为一条专用信道设计，该信道传输由四个不同符号组成的字母表 $\\Sigma = \\{S_1, S_2, S_3, S_4\\}$ 构成的消息。为了优化传输，工程团队确定分配给这些符号的二进制码字的理想长度应为 $l_1 = 1$，$l_2 = 2$，$l_3 = 3$和$l_4 = 3$，分别对应符号$S_1, S_2, S_3$和$S_4$。\n\n该编码方案必须是即时码，这意味着没有一个码字可以是任何其他码字的前缀。一个码是通过为字母表中的每个符号指定一个特定的二进制字符串（码字）来定义的。如果至少有一个符号被分配了不同的码字，那么这两个码就被认为是不同的。\n\n计算可以构建的，满足这些长度要求的不相同的二进制即时码的总数。", "solution": "我们需要一个具有指定码字长度 $l_{1}=1$，$l_{2}=2$，$l_{3}=3$，$l_{4}=3$ 的二进制即时（无前缀）码。对于一个二进制即时码，Kraft 等式必须成立：\n$$\n\\sum_{i=1}^{4}2^{-l_{i}}=2^{-1}+2^{-2}+2^{-3}+2^{-3}=\\frac{1}{2}+\\frac{1}{4}+\\frac{1}{8}+\\frac{1}{8}=1.\n$$\n由于和等于 $1$，可以构建一个恰好用尽所有容量的完整二进制前缀树，且码的结构在每个阶段都受到唯一约束。\n\n我们将码表示为一个二叉树，其根节点在深度 $0$ 处，叶子节点在等于码字长度的深度处。长度为 $1$ 的码字必须是根节点的两个子节点之一：有 $2$ 种选择，即 $0$ 或 $1$。一旦选择了一个长度为 $1$ 的叶子节点（假设是 $b \\in \\{0,1\\}$），任何其他码字都不能以 $b$ 开头，因此所有剩余的码字都必须位于另一个根子节点（记为 $\\bar{b}$）下的子树中。\n\n在 $\\bar{b}$ 下的子树中，我们必须放置一个长度为 $2$ 的码字和两个长度为 $3$ 的码字。从根开始以 $\\bar{b}$ 开头的唯一可能的长度为 $2$ 的码字是该子树中深度为 $2$ 的两个节点，即 $\\bar{b}0$ 和 $\\bar{b}1$。我们必须从中恰好选择一个作为长度为 $2$ 的码字：有 $2$ 种选择。一旦做出此选择，所选深度为 $2$ 的节点下的子树会因无前缀约束而被阻塞，因此两个长度为 $3$ 的码字必须恰好是另一个深度为 $2$ 的节点下的两个深度为 $3$ 的叶子节点。因此，对于长度为 $1$ 的码字和长度为 $2$ 的码字的每一种选择，长度为 $3$ 的码字都是被唯一确定的。\n\n因此，对于长度多重集 $\\{1,2,3,3\\}$，不同的码字集的数量为 $2 \\times 2=4$。\n\n最后，符号被赋予了固定的长度：$S_{1}$ 必须采用唯一的长度为 $1$ 的码字，$S_{2}$ 必须采用所选集合中唯一的长度为 $2$ 的码字，而 $S_{3},S_{4}$ 必须采用两个不同的长度为 $3$ 的码字。由于 $S_{3}$ 和 $S_{4}$ 可以通过 $2! = 2$ 种方式分配给这两个不同的长度为 $3$ 的码字，因此每个码字集在符号分配下会产生 $2$ 个不同的码。\n\n因此，满足给定长度要求的不同二进制即时码的总数为\n$$\n4 \\times 2 = 8.\n$$", "answer": "$$\\boxed{8}$$", "id": "1632866"}, {"introduction": "在实际应用中，我们的优化目标往往超越了简单地最小化平均长度。这个练习引入了一个更具挑战性的场景：当二进制符号‘0’和‘1’的传输成本不同时，如何设计一个能最小化平均传输成本的即时码。解决这个问题需要您回归编码设计的第一性原理，通过优化编码树的结构来同时匹配信源符号的概率和传输成本，从而达到最优 [@problem_id:1632839]。", "problem": "一个离散无记忆信源从字母表 $\\mathcal{A} = \\{A, B, C\\}$ 中发出符号，其概率分别为 $P(A) = \\frac{1}{2}$，$P(B) = \\frac{1}{3}$ 和 $P(C) = \\frac{1}{6}$。这些符号将使用即时码编码为二进制数字 $\\{0, 1\\}$ 序列。传输这些二进制数字会产生代价：发送一个 '0' 的代价为 1 个单位，而发送一个 '1' 的代价为 2 个单位。编码一个信源符号的代价是其对应码字中二进制数字代价的总和。您的任务是设计一个最优的即时二进制码，以最小化每个信源符号的期望代价。每个信源符号的最小可能期望代价是多少？", "solution": "设发送一个二进制数字的代价为 $c(0)=1$ 和 $c(1)=2$。一个码字的代价是其各位数字代价的总和。一个即时二进制码对应于一个二叉前缀树，其中每个内部节点恰好有两个子节点；否则，如果一个内部节点只有一个子节点，删除那条边将在不影响无前缀性的情况下严格降低其下所有叶节点的代价，这与最优性相矛盾。\n\n对于三个信源符号，任何完备二叉前缀树都必须恰好有三个叶节点和两个内部节点。因此，唯一可能的树形是：\n- 根节点的 $1$-边通向一个叶节点（代价为 $2$），而根节点的 $0$-边通向一个内部节点，其两个子节点是标记为 $00$ 和 $01$ 的叶节点，代价分别为 $1+1=2$ 和 $1+2=3$。可用码字代价的多重集为 $\\{2,2,3\\}$。\n- 根节点的 $0$-边通向一个叶节点（代价为 $1$），而根节点的 $1$-边通向一个内部节点，其两个子节点是标记为 $10$ 和 $11$ 的叶节点，代价分别为 $2+1=3$ 和 $2+2=4$。可用码字代价的多重集为 $\\{1,3,4\\}$。\n\n为了最小化期望代价 $\\sum_{i} p_{i} \\cdot \\text{cost}_{i}$，应将最大的概率分配给最小的代价。\n\n情况1（代价为 $\\{2,2,3\\}$）：将概率 $\\frac{1}{2}$ 和 $\\frac{1}{3}$ 分配给代价 $2$，将概率 $\\frac{1}{6}$ 分配给代价 $3$。那么\n$$\nL_{1} \\;=\\; 2\\left(\\frac{1}{2}+\\frac{1}{3}\\right) \\;+\\; 3\\cdot\\frac{1}{6}\n\\;=\\; 2\\cdot\\frac{5}{6} \\;+\\; \\frac{1}{2}\n\\;=\\; \\frac{10}{6} \\;+\\; \\frac{3}{6}\n\\;=\\; \\frac{13}{6}.\n$$\n\n情况2（代价为 $\\{1,3,4\\}$）：将概率 $\\frac{1}{2}$ 分配给代价 $1$，将概率 $\\frac{1}{3}$ 分配给代价 $3$，将概率 $\\frac{1}{6}$ 分配给代价 $4$。那么\n$$\nL_{2} \\;=\\; 1\\cdot\\frac{1}{2} \\;+\\; 3\\cdot\\frac{1}{3} \\;+\\; 4\\cdot\\frac{1}{6}\n\\;=\\; \\frac{1}{2} \\;+\\; 1 \\;+\\; \\frac{2}{3}\n\\;=\\; \\frac{3}{6} \\;+\\; \\frac{6}{6} \\;+\\; \\frac{4}{6}\n\\;=\\; \\frac{13}{6}.\n$$\n\n由于这些是具有三个叶节点的仅有的两种可能的完备二叉前缀树结构，并且在每种结构中我们都已最优地分配了概率，因此，每个信源符号可实现的最小期望代价是 $\\frac{13}{6}$。", "answer": "$$\\boxed{\\frac{13}{6}}$$", "id": "1632839"}]}