{"hands_on_practices": [{"introduction": "Kraft不等式是一个强大的工具，它能让我们在无需实际构建编码的情况下，快速判断一组给定的码长是否可以构成一个前缀码。第一个练习是一个基础检验，旨在巩固您对该核心概念的理解。您将对两种不同的码长方案应用该不等式，以判断哪一种或哪几种方案可以用于创建二进制前缀码。[@problem_id:1636182]", "problem": "一位工程师正在为一个简化的控制系统设计一种二进制编码方案。该系统有四个需要表示为二进制码字的独立指令。要使编码能够即时解码，它必须是一种前缀码，即没有任何码字是其他码字的前缀。这位工程师正在评估用于这四个指令的两种可能的码字长度（以比特为单位）集合：\n\n方案 A：一组长度为 $\\{1, 3, 3, 3\\}$。\n\n方案 B：一组长度为 $\\{2, 2, 2, 3\\}$。\n\n关于用这些长度集构建二进制前缀码的可行性，以下哪个陈述是正确的？\n\nA. 只有方案 A 可用于构建有效的前缀码。\n\nB. 只有方案 B 可用于构建有效的前缀码。\n\nC. 方案 A 和方案 B 都可用于构建有效的前缀码。\n\nD. 方案 A 和方案 B 都不能用于构建有效的前缀码。", "solution": "要确定一组给定的二进制码字长度的多重集是否能构成一个即时（前缀）码，可使用二进制码的克拉夫特-麦克米兰不等式：对于长度为 $\\{l_{i}\\}_{i=1}^{n}$ 的码字，存在一个二进制前缀码的充要条件是\n$$\n\\sum_{i=1}^{n}2^{-l_{i}} \\leq 1.\n$$\n\n评估方案 A，其长度为 $\\{1,3,3,3\\}$：\n$$\n\\sum 2^{-l_{i}} = 2^{-1} + 2^{-3} + 2^{-3} + 2^{-3} = \\frac{1}{2} + 3 \\cdot \\frac{1}{8} = \\frac{4}{8} + \\frac{3}{8} = \\frac{7}{8} \\leq 1.\n$$\n根据克拉夫特-麦克米兰不等式，方案 A 存在一个二进制前缀码。\n\n评估方案 B，其长度为 $\\{2,2,2,3\\}$：\n$$\n\\sum 2^{-l_{i}} = 3 \\cdot 2^{-2} + 2^{-3} = 3 \\cdot \\frac{1}{4} + \\frac{1}{8} = \\frac{3}{4} + \\frac{1}{8} = \\frac{6}{8} + \\frac{1}{8} = \\frac{7}{8} \\leq 1.\n$$\n根据相同的准则，方案 B 也存在一个二进制前缀码。\n\n由于克拉夫特-麦克米兰不等式是具有给定长度的二进制前缀码存在的充分必要条件，因此两种方案都是可行的。", "answer": "$$\\boxed{C}$$", "id": "1636182"}, {"introduction": "Kraft不等式不仅能判断一个*给定*的码长集合是否有效，还能用于指导编码设计与优化。本问题将您置于一个实际的设计场景中：您有一组候选的码长，但它们的总量超出了限制，您必须从中挑选出数量最多的有效子集。这个练习鼓励您运用算法思维，将不等式视为一种“预算”约束，并找出最有效地“花费”预算以最大化码书大小的方法。[@problem_id:1636248]", "problem": "一位信息理论学家正在为一组符号设计一个二进制前缀码。由于与符号语义相关的特定约束，提出了一个期望的码字长度列表。然而，不能保证可以构建一个具有这组确切长度的前缀码。\n\n对于任何具有 $N$ 个码字，长度分别为 $l_1, l_2, \\ldots, l_N$ 的二进制前缀码，必须满足 Kraft-McMillan 不等式：\n$$ \\sum_{i=1}^{N} 2^{-l_i} \\le 1 $$\n反之，如果一组整数长度满足此不等式，则保证存在具有这些长度的二进制前缀码。\n\n提议的码字长度多重集由以下计数给出：\n- 一个长度为 2 的码字\n- 两个长度为 3 的码字\n- 六个长度为 4 的码字\n- 六个长度为 5 的码字\n\n你的任务是确定这些提议的码字中，可以构成一个有效二进制前缀码的最大子集的大小。换句话说，从给定的多重集中可以选择的、其长度满足 Kraft-McMillan 不等式的最大码字数量是多少？", "solution": "问题要求我们从给定的长度多重集中选出一个码字子集，使其包含的码字数量最多，并且所选长度 $\\{l_i\\}$ 满足二进制字母表的 Kraft-McMillan 不等式 $\\sum_i 2^{-l_i} \\le 1$。\n\n设给定的长度多重集为 $L$。我们需要找到一个子集 $S \\subseteq L$，在满足 $\\sum_{l \\in S} 2^{-l} \\le 1$ 的同时，最大化子集的大小 $|S|$。\n\n这是一个优化问题。我们希望最大化集合 $S$ 中元素的数量，其中每个元素 $l \\in L$ 的“成本”为 $2^{-l}$，并对总数贡献 1。总“成本”不能超过预算 1。为了在这个预算内放入尽可能多的元素，我们应该优先包含成本最低的元素。\n\n包含一个长度为 $l$ 的码字的成本是 $2^{-l}$。这个成本是 $l$ 的递减函数。因此，在我们的和中，包含较长的码字比包含较短的码字“更便宜”。这提示了一种贪心算法：我们应该按从长到短的顺序遍历可用的码字长度，在每一步中尽可能多地添加码字，而不超过 Kraft 和的上限 1。\n\n可用的码字长度由计数给出：\n- 长度 5：6 个码字\n- 长度 4：6 个码字\n- 长度 3：2 个码字\n- 长度 2：1 个码字\n\n让我们应用贪心策略。我们初始化 Kraft 和 $K=0$，以及所选码字的数量 $N=0$。\n\n第 1 步：考虑最长的可用长度 $l=5$。\n有 6 个长度为 5 的码字。包含所有这些码字的成本是 $6 \\times 2^{-5} = 6 \\times \\frac{1}{32} = \\frac{6}{32} = \\frac{3}{16}$。\n我们当前的总和是 $K = \\frac{3}{16}$。由于 $\\frac{3}{16} \\le 1$，我们可以包含所有这 6 个码字。\n我们当前的计数是 $N=6$。\n\n第 2 步：考虑次长的长度 $l=4$。\n有 6 个长度为 4 的码字。包含所有这些码字的成本是 $6 \\times 2^{-4} = 6 \\times \\frac{1}{16} = \\frac{6}{16} = \\frac{3}{8}$。\n如果我们加上这些，新的 Kraft 和将是 $K = \\frac{3}{16} + \\frac{3}{8} = \\frac{3}{16} + \\frac{6}{16} = \\frac{9}{16}$。\n由于 $\\frac{9}{16} \\le 1$，我们可以包含所有这 6 个码字。\n我们当前的计数变为 $N = 6 + 6 = 12$。我们当前的总和是 $K = \\frac{9}{16}$。\n\n第 3 步：考虑次长的长度 $l=3$。\n有 2 个长度为 3 的码字。包含这两个码字的成本是 $2 \\times 2^{-3} = 2 \\times \\frac{1}{8} = \\frac{2}{8} = \\frac{1}{4}$。\n如果我们加上这些，新的 Kraft 和将是 $K = \\frac{9}{16} + \\frac{1}{4} = \\frac{9}{16} + \\frac{4}{16} = \\frac{13}{16}$。\n由于 $\\frac{13}{16} \\le 1$，我们可以包含这两个码字。\n我们当前的计数变为 $N = 12 + 2 = 14$。我们当前的总和是 $K = \\frac{13}{16}$。\n\n第 4 步：考虑最短的长度 $l=2$。\n有 1 个长度为 2 的码字。包含它的成本是 $1 \\times 2^{-2} = \\frac{1}{4}$。\n如果我们加上这个，新的 Kraft 和将是 $K = \\frac{13}{16} + \\frac{1}{4} = \\frac{13}{16} + \\frac{4}{16} = \\frac{17}{16}$。\n由于 $\\frac{17}{16} > 1$，我们不能包含这个码字。预算 1 将被超出。\n\n贪心过程到此结束。我们选择了所有 6 个长度为 5 的码字，所有 6 个长度为 4 的码字，以及两个长度为 3 的码字。长度为 2 的码字被拒绝了。\n\n所选码字的总数是 $N = 6 + 6 + 2 = 14$。这是从提议的集合中可以选择的、用于构成有效二进制前缀码的最大码字数量。所选长度 $\\{5,5,5,5,5,5, 4,4,4,4,4,4, 3,3\\}$ 满足 Kraft-McMillan 不等式，因为它们的和为 $\\frac{13}{16} \\le 1$。", "answer": "$$\\boxed{14}$$", "id": "1636248"}, {"introduction": "除了基础的有效性检验和优化问题，Kraft-McMillan不等式还揭示了编码理论中可能性的深刻结构性限制。最后一个练习是一个思想实验，旨在探索这些极限。通过探究一个完备码是否能完全由奇数长度的码字构成，您将超越简单的计算，深入到公式背后的数学结构中，从而对其内涵获得更深刻的洞察。[@problem_id:1636241]", "problem": "一位工程师的任务是为一个产生四种不同符号 $\\{s_1, s_2, s_3, s_4\\}$ 的信源设计一种数据压缩方案。该设计要求创建一个二进制前缀码，其中没有任何码字是其他码字的前缀。此外，该码必须是“完备”的，这意味着不可能在不违反前缀条件的情况下向码本中添加任何长度的另一个码字。一个已知定理指出，一个二进制前缀码是完备的当且仅当其码字长度 $l_1, l_2, l_3, l_4$ 满足等式 $\\sum_{i=1}^{4} 2^{-l_i} = 1$。\n\n由于传输硬件存在一个特殊约束，分配给各符号的每个码字的长度都必须是正奇数。\n\n能否构建这样一个具有四个奇数长度码字的完备二进制前缀码？\n\nA. 是的，可以用长度 {3, 5, 5, 5} 构建一个完备码。\n\nB. 是的，可以构建一个完备码，但前提是至少对一个码字放宽硬件约束。\n\nC. 不，这是不可能的，因为四个奇数长度码字的和将始终导致一个与二叉树结构不兼容的总长度。\n\nD. 不，这是不可能的，因为如果所有的 $l_i$ 都是奇数，那么和 $\\sum_{i=1}^{4} 2^{-l_i}$ 永远不可能等于 1。\n\nE. 可能性取决于信源符号的具体概率分布。", "solution": "我们需要为四个符号设计一个完备的二进制前缀码，其所有码字长度 $l_{1},l_{2},l_{3},l_{4}$ 均为正奇数。根据 Kraft-McMillan 定理，一个二进制前缀码是完备的当且仅当其长度满足\n$$\n\\sum_{i=1}^{4}2^{-l_{i}}=1.\n$$\n施加每个 $l_{i}$ 都是正奇数的约束。那么，存在非负整数 $k_{i}$ 使得\n$$\nl_{i}=2k_{i}+1 \\quad \\text{for } i=1,2,3,4.\n$$\n代入 Kraft 等式：\n$$\n\\sum_{i=1}^{4}2^{-l_{i}}=\\sum_{i=1}^{4}2^{-(2k_{i}+1)}=\\sum_{i=1}^{4}\\frac{1}{2}\\cdot 4^{-k_{i}}=\\frac{1}{2}\\sum_{i=1}^{4}4^{-k_{i}}=1.\n$$\n因此，该等式等价于\n$$\n\\sum_{i=1}^{4}4^{-k_{i}}=2.\n$$\n每一项都满足 $4^{-k_{i}}\\in\\{1, \\tfrac{1}{4}, \\tfrac{1}{16},\\dots\\}$ 并且是严格为正的。我们考虑所有可能性，看其和是否能等于 $2$：\n- 如果所有的 $k_{i}\\geq 1$，则对每个 $i$ 都有 $4^{-k_{i}}\\leq \\tfrac{1}{4}$，因此\n$$\n\\sum_{i=1}^{4}4^{-k_{i}}\\leq 4\\cdot \\tfrac{1}{4}=1<2,\n$$\n这是不可能的。\n- 如果恰好有一个 $k_{i}=0$ 且另外三个满足 $k_{j}\\geq 1$，那么\n$$\n\\sum_{i=1}^{4}4^{-k_{i}}\\leq 1+3\\cdot \\tfrac{1}{4}=\\tfrac{7}{4}<2,\n$$\n这是不可能的。\n- 如果恰好有两个 $k_{i}=0$ 且另外两个满足 $k_{j}\\geq 1$，那么\n$$\n\\sum_{i=1}^{4}4^{-k_{i}}\\geq 1+1+2\\cdot \\tfrac{1}{4}=2+\\tfrac{1}{2}>2,\n$$\n这就超出了 2。\n- 如果至少有三个 $k_{i}=0$，那么和至少为 $3>2$，这也超出了 2。\n\n在所有情况下，和都不可能恰好为 $2$。因此，不存在满足 Kraft 等式的四个正奇数 $l_{i}$。因此，不存在所有码字长度均为奇数的、包含四个码字的完备二进制前缀码。\n\n选项 A 提出了长度 $\\{3,5,5,5\\}$；它们的 Kraft 和为\n$$\n2^{-3}+3\\cdot 2^{-5}=\\tfrac{1}{8}+3\\cdot \\tfrac{1}{32}=\\tfrac{7}{32}\\neq 1,\n$$\n所以它不是完备的。选项 B 谈到放宽硬件约束；虽然允许偶数长度可以使完备码成为可能，但这不满足所述的约束条件。选项 C 不是一个正确的原因。选项 E 是无关的，因为具有给定长度的完备前缀码的存在性取决于 Kraft 等式，而不取决于符号概率。\n\n因此，正确的选项是 D，即这是不可能的，因为如果所有 $l_i$ 都是奇数，和 $\\sum_{i=1}^{4}2^{-l_{i}}$ 永远不可能等于 1。", "answer": "$$\\boxed{D}$$", "id": "1636241"}]}