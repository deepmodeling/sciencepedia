{"hands_on_practices": [{"introduction": "我们从一个基础练习开始，探索建议字符串最直接的应用。对于一类特殊的语言，其成员资格仅取决于输入的长度，这类问题被称为一元语言问题。这个练习 [@problem_id:1411393] 将引导你思考，一个简单的建议字符串如何能帮助图灵机对这类语言进行判定，从而揭示非一致性计算模型的基本思想：即使是每种输入长度只有一个比特的外部信息，也足以解决某些计算问题。", "problem": "在计算复杂性理论中，“建议”(advice) 的概念被用来为那些接收额外信息的算法建模，这些额外信息仅取决于输入的长度。考虑一个假设的数据验证系统，该系统旨在处理来自集合 $\\{0,1\\}^*$ 的二进制串。该系统必须判定字符串是否属于语言 $L_{SQ}$，其定义如下：\n$$L_{SQ} = \\{w \\in \\{0,1\\}^* \\mid |w| = k^2 \\text{ for some integer } k \\ge 0\\}$$\n对于每个整数 $n \\ge 0$，该验证算法都会获得一个预先计算好的建议位 (advice bit)，记作 $a_n \\in \\{0,1\\}$。对于每个长度为 $n$ 的输入串，算法都会收到这同一个建议位 $a_n$。该算法是一个图灵机的实例，它必须使用这个建议位来判定一个长度为 $n$ 的输入串 $x$ 是否属于 $L_{SQ}$，并且必须在关于 $n$ 的多项式时间内完成这个判定。\n\n下列哪个陈述最准确地解释了这样一个系统是否能够正确判定语言 $L_{SQ}$？\n\nA. 不能，因为判定一个任意整数 $n$ 是否为完全平方数在计算上并非易事，并且不能对所有可能的 $n$ 都封装在一个建议位中。算法必须自己执行这个检查。\n\nB. 能，因为对于任何给定的长度 $n$，所有长度为 $n$ 的字符串要么都在 $L_{SQ}$ 中，要么都不在。对于一个固定的长度，这种“全有或全无”的成员资格属性允许用单个建议位来表示对该长度所有字符串的正确判定。\n\nC. 能，因为语言 $L_{SQ}$ 是一个正则语言，而任何正则语言都可以由一个有限自动机判定，这对任何输入长度最多只需要常数数量的建议。\n\nD. 不能，因为要使系统对任何长度 $n$ 都有效，建议必须有效地编码所有小于或等于 $n$ 的完全平方数的列表。这需要的信息量随 $n$ 增长，而不能是单个比特。\n\nE. 能，但这只对较小的输入长度可能。随着长度 $n$ 变得非常大，连续完全平方数之间的间隔也变大，单个建议位不足以区分它们。", "solution": "我们分析 $L_{SQ}$ 的结构以及每个输入长度一位建议的作用。\n\n1. 根据定义，$L_{SQ}=\\{w\\in\\{0,1\\}^{*}\\mid |w|=k^{2}\\text{ for some integer }k\\ge 0\\}$。因此，一个输入 $x$ 的成员资格仅取决于其长度 $|x|$，而与它的内容无关。\n\n2. 固定任意整数 $n\\ge 0$。对于所有字符串 $x\\in\\{0,1\\}^{n}$，要么当且仅当 $n$ 是一个完全平方数时 $x\\in L_{SQ}$，要么当且仅当 $n$ 不是一个完全平方数时 $x\\notin L_{SQ}$。形式上，对于所有 $x,y\\in\\{0,1\\}^{n}$，\n$$\n\\big(x\\in L_{SQ}\\big)\\iff\\big(y\\in L_{SQ}\\big)\\iff\\big(n=k^{2}\\text{ for some }k\\in\\mathbb{N}\\big).\n$$\n这是对固定长度字符串集合的一种“全有或全无”的属性。\n\n3. 使用建议，我们通过为每个 $n\\ge 0$ 设置如下方式来定义建议函数：\n$$\na_{n}=\n\\begin{cases}\n1 & \\text{if } n=k^{2}\\text{ for some }k\\in\\mathbb{N},\\\\\n0 & \\text{otherwise.}\n\\end{cases}\n$$\n\n4. 算法：对于长度为 $n$ 的输入 $x$，读取单个建议位 $a_{n}$ 并输出 $a_{n}$。这个过程在 $O(1)$ 时间内运行，这对于 $n$ 是多项式时间。\n\n5. 正确性：如果 $n$ 是一个完全平方数，那么每个 $x\\in\\{0,1\\}^{n}$ 都应该被接受；算法输出 $a_{n}=1$，因此它接受所有这样的 $x$。如果 $n$ 不是一个完全平方数，那么没有 $x\\in\\{0,1\\}^{n}$ 应该被接受；算法输出 $a_{n}=0$，因此它拒绝所有这样的 $x$。所以，对于每个输入，判定都是正确的。\n\n6. 这直接与陈述 B 相符。其他选项不正确的原因如下：\n- A 是错误的，因为每个长度一个比特就足够了；算法本身不需要计算平方性。\n- C 是错误的，因为 $L_{SQ}$ 不是正则语言；平方数长度的集合不是最终周期的。\n- D 是错误的，因为每个长度只需要一个比特，而不需要编码所有小于等于 $n$ 的平方数。\n- E 是错误的，因为该方法对所有 $n$ 都统一有效，使用建议位可以在常数时间内做出判定。\n\n因此，准确的陈述是 B。", "answer": "$$\\boxed{B}$$", "id": "1411393"}, {"introduction": "在掌握了基础概念之后，让我们来看一个更进一步的场景。在这个练习中 [@problem_id:1454162]，语言的判定条件不仅与输入的长度有关，还与输入字符串本身的内容有关。这要求我们设计的图灵机必须能够主动地结合建议字符串来解释输入数据，这种互动是 $P/\\text{poly}$ 类中更典型的工作方式，也更能体现建议字符串在引导实际计算过程中的价值。", "problem": "在计算复杂性理论中，P/poly类（非一致多项式时间）提供了一种计算模型，该模型允许对每个输入长度使用一段不同的“建议”。如果存在一个多项式 $p(n)$ 和一个多项式时间图灵机 $M$，使得对于每个自然数 $n$，都有一个长度为 $|a_n| \\le p(n)$ 的建议字符串 $a_n$，那么语言 $L \\subseteq \\{0,1\\}^*$ 就属于 P/poly。对于任何长度为 $|x|=n$ 的输入字符串 $x$，机器 $M$ 在输入 $(x, a_n)$ 时必须正确判断 $x$ 是否在 $L$ 中。注意，建议字符串 $a_n$ 只依赖于输入的长度 $n$，而不是输入字符串 $x$ 本身。\n\n考虑字母表 $\\Sigma = \\{0,1\\}$ 上的语言 $L$，其定义如下：当二进制字符串 $x$ 的长度 $|x|$ 是一个素数时，如果其第一位 $x_1$ 为 '1'，则 $x$ 属于 $L$；当其长度不是素数时，如果其第一位为 '0'，则 $x$ 属于 $L$。就本题而言，数字 0 和 1 不被认为是素数。\n\n下列哪个陈述正确地评估了语言 $L$ 是否属于复杂性类 P/poly？\n\nA. 是的，该语言属于 P/poly。一个长度为 1 的建议字符串 $a_n$ 可以用来告知一个多项式时间机器输入长度 $n$ 是否为素数。然后，该机器将输入的第一位与建议所指示的要求进行比较。\nB. 不，该语言不属于 P/poly。尽管已知素性测试属于 P，但一个一致的多项式时间算法必须在没有针对每个 $n$ 的特殊信息的情况下判断所有输入长度 $n$ 的语言。该语言的定义内在性地违反了这种一致性。\nC. 不，该语言不属于 P/poly。对于长度为 $n$ 的输入的建议字符串需要编码直到 $n$ 的每个数的素性，这需要非多项式数量的信息。\nD. 不，该语言不属于 P/poly。建议字符串序列本身不需要是可计算的，但在这种情况下，生成建议需要对所有整数进行素性测试，这在计算上过于昂贵，是不允许的。", "solution": "我们回顾定义：如果存在一个多项式时间图灵机 $M$ 和一个建议字符串族 $\\{a_{n}\\}_{n \\ge 0}$，其中对于某个多项式 $p$，有 $|a_{n}| \\le p(n)$，使得对于每个长度为 $|x|=n$ 的输入 $x$，$M(x,a_{n})$ 都能正确地判断 $x$ 是否属于 $L$，则 $L \\subseteq \\{0,1\\}^{*}$ 属于 P/poly。\n\n语言 $L$ 由以下性质定义：对于 $n=|x|$，如果 $n$ 是素数，那么 $x \\in L$ 当且仅当 $x_{1}=1$；如果 $n$ 不是素数，那么 $x \\in L$ 当且仅当 $x_{1}=0$。对于 $n=0$，没有字符串有第一位，因此没有长度为 0 的字符串满足该条件，所以空字符串不在 $L$ 中；这不影响下面的构造。\n\n按如下方式构造建议和机器。\n1. 对于每个 $n \\ge 0$，定义建议位 $a_{n} \\in \\{0,1\\}$ 为\n$$\na_{n} =\n\\begin{cases}\n1 & \\text{if $n$ is prime},\\\\\n0 & \\text{if $n$ is not prime}.\n\\end{cases}\n$$\n那么 $|a_{n}|=1$，所以我们可以取 $p(n)=1$。\n\n2. 定义 $M$ 在 $n=|x|$ 的多项式时间内运行并执行以下操作：\n- 通过扫描输入来计算 $n=|x|$。\n- 如果 $n=0$，则拒绝（如上所述，这与 $L$ 的定义相匹配）。\n- 否则，读取第一位 $x_{1}$。当且仅当 $x_{1}=a_{n}$ 时接受。\n\n这个 $M$ 在 $O(n)$ 时间内运行，并且只使用单位比特的建议 $a_{n}$。对于每个长度为 $n \\ge 1$ 的 $x$，$M$ 恰好接受那些第一位等于 $a_{n}$ 的 $x$，根据构造，这正是 $L$ 的成员资格条件。因此 $L \\in \\text{P/poly}$。\n\n此外，$L$ 也属于 P：一个一致的多项式时间机器可以计算 $n=|x|$，在 $\\log n$ 的多项式时间内测试 $n$ 的素性（在 $n$ 的多项式时间内计算出 $n$ 的二进制表示之后），并与 $x_{1}$ 进行比较。因此，$L$ 属于 P 已经意味着 $L \\in \\text{P/poly}$。\n\n评估选项：\n- A 是正确的：一个表示 $n$ 的素性的单位比特建议 $a_{n}$ 就足够了，并且 $M$ 在多项式时间内将 $x_{1}$ 与 $a_{n}$ 进行比较。\n- B 是不正确的：P/poly 中并不违反一致性，事实上，$L$ 有一个一致的多项式时间判定器，所以该语言属于 P，因此也属于 P/poly。\n- C 是不正确的：长度为 $n$ 的建议只需要编码关于该长度 $n$ 的信息（一个比特），而不需要编码所有直到 $n$ 的长度的信息。\n- D 是不正确的：P/poly 不要求建议序列是可计算的；此外，即使坚持可计算性，判断素性也属于 P，所以生成 $a_{n}$ 在计算上并非昂贵到无法接受。\n\n因此，正确的选项是 A。", "answer": "$$\\boxed{A}$$", "id": "1454162"}, {"introduction": "最后一个练习将引导我们思考一个根本性问题：建议字符串的力量源泉是什么？通过定义一个变体复杂性类 $P_{\\text{COMP-ADV}}$，其中建议字符串本身必须能在多项式时间内生成，这个练习 [@problem_id:1411412] 旨在阐明一致性计算（$P$）与非一致性计算（$P/\\text{poly}$）之间的核心区别。通过证明 $P_{\\text{COMP-ADV}}$ 等同于 $P$，你将深刻理解 $P/\\text{poly}$ 的真正威力在于“存在”一个有效的建议字符串，而并不要求这个字符串本身是易于计算的。", "problem": "在计算复杂性理论中，我们研究解决计算问题所需的资源。一个语言（language）是字母表上的字符串集合，通常字母表为 $\\{0, 1\\}$。图灵机（Turing Machine, TM）是一种计算的数学模型。\n\n复杂性类 $P$ 是所有可以由一个确定性图灵机在输入长度的多项式时间内判定的语言的集合。\n\n一个更强大的、“非一致”（non-uniform）的类是 $P/\\text{poly}$。如果存在一个多项式时间的图灵机 $M$ 和一个“建议字符串”序列 $\\{a_n\\}_{n \\in \\mathbb{N}}$（其中 $|a_n|$ 的大小以 $n$ 的一个多项式为界），使得对于任何长度为 $n$ 的输入字符串 $x$：\n$$x \\in L \\iff M(\\langle x, a_n \\rangle) \\text{ accepts}$$\n在 $P/\\text{poly}$ 的标准定义中，对于建议序列 $\\{a_n\\}$ 是如何生成的没有限制；它甚至可以是不可计算的。\n\n考虑该类的一个变体，我们称之为 $P_{\\text{COMP-ADV}}$，其中建议序列必须在多项式时间内生成。具体来说，一个语言 $L$ 属于 $P_{\\text{COMP-ADV}}$，如果存在两个多项式时间的确定性图灵机，一个“主”机器 $M$ 和一个“建议生成器” $A$，使得对于每个自然数 $n \\ge 0$，以下条件成立：\n1. 对于长度为 $n$ 的输入的建议是 $a_n = A(1^n)$，其中 $1^n$ 是由 $n$ 个 1 组成的字符串。\n2. 对于任何长度为 $n$ 的输入字符串 $x$，$x \\in L$ 当且仅当 $M(\\langle x, a_n \\rangle)$ 接受。\n\n下列哪个著名的复杂性类与 $P_{\\text{COMP-ADV}}$ 等价？\n\nA. $P$\nB. $L$，即可在对数空间内判定的语言类。\nC. $P/\\text{poly}$\nD. $E = \\bigcup_{c>0} \\text{DTIME}(2^{cn})$\nE. $EXP = \\bigcup_{c>0} \\text{DTIME}(2^{n^c})$", "solution": "我们通过证明 $P \\subseteq P_{\\text{COMP-ADV}}$ 和 $P_{\\text{COMP-ADV}} \\subseteq P$ 这两个包含关系，来比较 $P_{\\text{COMP-ADV}}$ 与 $P$。\n\n首先，证明 $P \\subseteq P_{\\text{COMP-ADV}}$：设 $L \\in P$。那么存在一个确定性图灵机 $T$ 和一个多项式 $p$，使得在输入 $x$ 上，$T$ 在至多 $p(|x|)$ 步内判定 $x$ 是否属于 $L$。定义一个多项式时间的建议生成器 $A$，对于所有的 $n$，$A(1^{n}) = \\epsilon$（其中 $\\epsilon$ 是空字符串），并定义 $M$ 来模拟 $T$ 在 $x$ 上的运行，同时忽略建议。那么对于每个 $x$，$x \\in L \\iff M(\\langle x, A(1^{|x|}) \\rangle)$ 接受。由于 $A$ 和 $M$ 都在多项式时间内运行，所以 $L \\in P_{\\text{COMP-ADV}}$。\n\n其次，证明 $P_{\\text{COMP-ADV}} \\subseteq P$：设 $L \\in P_{\\text{COMP-ADV}}$。那么存在确定性图灵机 $A$ 和 $M$ 以及多项式 $p_{A}$ 和 $p_{M}$，使得：\n- 对于每个 $n \\ge 0$，$A(1^{n})$ 在至多 $p_{A}(n)$ 步内停机并输出 $a_{n}$。\n- 对于每个输入对 $\\langle x, a \\rangle$，$M(\\langle x, a \\rangle)$ 在至多 $p_{M}(|\\langle x, a \\rangle|)$ 步内停机，并且对语言 $L$ 的判定满足 $x \\in L \\iff M(\\langle x, a_{|x|} \\rangle)$ 接受。\n\n因为每个输出位至少需要一个计算步骤，所以输出长度受运行时间所限制。因此，对所有的 $n$，有\n$$\n|a_{n}| \\le p_{A}(n).\n$$\n对于一个满足 $|x| = n$ 的输入 $x$，考虑一个确定性图灵机 $T$。在输入 $x$ 上，这个图灵机先计算 $a_{n} := A(1^{n})$，然后运行 $M(\\langle x, a_{n} \\rangle)$。$T$ 在长度为 $n$ 的输入上的总运行时间至多为\n$$\np_{A}(n) + p_{M}(|\\langle x, a_{n} \\rangle|).\n$$\n由于对于某个常数 $c$，有 $|\\langle x, a_{n} \\rangle| \\le |x| + |a_{n}| + c \\le n + p_{A}(n) + c$，因此存在一个多项式 $q$ 使得\n$$\np_{M}(|\\langle x, a_{n} \\rangle|) \\le q(n).\n$$\n因此总时间 $p_{A}(n) + q(n)$ 是 $n$ 的多项式，所以 $T$ 在多项式时间内判定 $L$。因此 $L \\in P$。\n\n结合两个包含关系，我们得到 $P_{\\text{COMP-ADV}} = P$。在给出的选项中，这就是选项 A。", "answer": "$$\\boxed{A}$$", "id": "1411412"}]}