{"hands_on_practices": [{"introduction": "我们探索的第一个例子将直接展示一个不可判定语言如何存在于 P/poly 中。通过构建一个简单的“计数语言”（tally language），其中每个字符串的存在与否取决于一个不可判定的停机问题，你将亲身体会到“非一致建议”（non-uniform advice）是如何将不可计算的信息注入到多项式时间的计算模型中的。这个练习是理解 P/poly 类强大能力的基础。[@problem_id:1423583]", "problem": "在计算复杂性理论中，我们分析语言的性质以理解计算的极限。本题涉及一个基于图灵机行为构建的特定语言。\n\n假设所有确定性图灵机（TM）有一个标准的、可计算的枚举，记为 $M_1, M_2, M_3, \\dots$。考虑字母表 $\\{0,1\\}$ 上的语言 $L$ 定义如下：\n$$L = \\{1^n \\mid n \\ge 1 \\text{ 且第 } n \\text{ 个图灵机 } M_n \\text{ 在空输入上停机} \\}$$\n注意，字符串 $1^n$ 是 $n$ 个连续的 '1' 组成的序列。\n\n为提供背景知识，我们给出以下标准定义：\n- **可判定语言**（Decidable Language）：如果存在一个图灵机，它总是停机，并且对于任何给定的输入字符串，都能正确判断其是否属于该语言，那么这个语言就是可判定的。一个众所周知的事实是，停机问题是不可判定的。\n- **稀疏语言**（Sparse Language）：如果存在一个多项式 $p(n)$，使得对于所有 $n \\ge 1$，语言 $S$ 中长度为 $n$ 的字符串数量最多为 $p(n)$，那么语言 $S$ 就是稀疏的。这被表示为 $|S \\cap \\{0,1\\}^n| \\le p(n)$。\n- **类 P/poly**（The Class P/poly）：如果存在一个布尔电路序列 $\\{C_n\\}_{n \\ge 1}$ 和一个多项式 $q(n)$，使得对于每个 $n \\ge 1$：(1) 电路 $C_n$ 的大小（门电路数量）最多为 $q(n)$，并且 (2) 对于任何长度为 $n$ 的输入字符串 $x$，电路 $C_n$ 输出 1 当且仅当 $x \\in A$，那么语言 $A$ 属于复杂性类 P/poly。\n\n基于这些定义，以下关于语言 $L$ 的陈述中，哪一个是完整且正确的描述？\n\nA. $L$ 是可判定的、稀疏的，并且属于 P/poly。\n\nB. $L$ 是不可判定的、稀疏的，并且属于 P/poly。\n\nC. $L$ 是不可判定的、稀疏的，但不属于 P/poly。\n\nD. $L$ 是不可判定的、非稀疏的，并且属于 P/poly。\n\nE. $L$ 是可判定的、非稀疏的，并且不属于 P/poly。", "solution": "我们从可判定性、稀疏性和是否属于 P/poly 这几个方面来分析 $L=\\{1^{n}\\mid n\\ge 1\\text{ 且 }M_{n}\\text{ 在空输入上停机}\\}$。\n\n不可判定性：令 $K=\\{\\langle M,w\\rangle\\mid M \\text{ 在 } w \\text{ 上停机}\\}$ 为停机问题，它是不可判定的。因为枚举 $\\{M_{n}\\}_{n\\ge 1}$ 是可计算的，所以存在一个从 $K$ 到 $L$ 的底层索引集的可计算映射归约：给定 $\\langle M,w\\rangle$，可以有效地构造一个索引 $n$，使得图灵机 $M_{n}$ 在空输入上模拟 $M$ 在 $w$ 上的行为，并且当且仅当 $M$ 在 $w$ 上停机时 $M_n$ 才停机。于是，$\\langle M,w\\rangle\\in K$ 当且仅当 $1^{n}\\in L$。如果 $L$ 是可判定的，那么 $K$ 也将是可判定的，这与事实矛盾。因此，$L$ 是不可判定的。\n\n稀疏性：对于每个长度 $n$，在 $\\{0,1\\}^{n}$ 的字符串中，语言 $L$ 要么包含 $1^n$，要么什么都不包含。因此，对于所有 $n \\ge 1$，有 $\\lvert L\\cap\\{0,1\\}^{n}\\rvert\\le 1$。取 $p(n)=1$ 即可证明 $L$ 是稀疏的。\n\nP/poly 成员资格：对于每个 $n\\ge 1$，如果 $1^{n}\\in L$，则定义比特 $b_{n}=1$；否则 $b_{n}=0$。构造一个作用于 $n$ 个输入 $x_{1},\\dots,x_{n}$ 的布尔电路 $C_{n}$，它计算\n$$\nE_{n}(x)=\\bigwedge_{i=1}^{n} x_{i},\n$$\n该电路当且仅当输入恰好是 $1^{n}$ 时输出 $1$。定义\n$$\nC_{n}(x)=b_{n}\\wedge E_{n}(x).\n$$\n那么对于任何 $x\\in\\{0,1\\}^{n}$，$C_{n}(x)=1$ 当且仅当 $x=1^{n}$ 且 $b_{n}=1$，也即当且仅当 $x\\in L$。$C_n$ 的大小是 $O(n)$，所以存在一个多项式 $q(n)$ 作为所有 $n$ 的 $C_n$ 大小的上界。因此，$L\\in\\text{P/poly}$。\n\n综合这三个事实，$L$ 是不可判定的、稀疏的，并且属于 P/poly。因此，正确选项是 B。", "answer": "$$\\boxed{B}$$", "id": "1423583"}, {"introduction": "在掌握了基础构造后，我们将把视野拓宽。这个练习不再局限于特定的停机问题，而是利用计算理论中强大的莱斯定理（Rice's Theorem）。你将看到，任何非平凡的语义属性都可以用来定义一个属于 P/poly 的不可判定语言，这深刻揭示了这种现象的普遍性。[@problem_id:1423599]", "problem": "在计算复杂度理论中，P/poly 类包含的语言可以由多项式时间算法判定，这些算法会获得一个多项式大小的“建议字符串”，该字符串仅取决于输入的长度。虽然大多数常见的可判定问题都属于此类，但 P/poly 类的范围足够大，甚至可以包含不可判定的语言。\n\n请考虑以下定义：\n- **一元语言** (tally language) 是一种所有字符串都仅由符号 '1' 组成的语言。也就是说，它是一个 $\\{1\\}^*$ 的子集。\n- 图灵机 (TM) 的一个性质是**语义的** (semantic)，若该性质仅取决于机器所接受的语言，而与机器的具体实现无关。\n- **莱斯定理 (Rice's Theorem)** 指出，递归可枚举语言的任何非平凡语义性质都是不可判定的。一个性质是非平凡的，如果至少存在一台图灵机，其语言具有该性质，且至少存在一台图灵机，其语言不具有该性质。\n\n让我们定义一个特定的语言。考虑图灵机语言为有限集这一性质 $P_{\\text{FIN}}$。这是一个非平凡的语义性质。对于任何正整数 $n$，令 $M_n$ 为在所有可能图灵机编码的标准固定枚举下，与整数 $n$ 对应的图灵机。\n\n我们将一元语言 $L$ 定义为：\n$$L = \\{ 1^n \\mid n \\in \\mathbb{Z}^+ \\text{ 且 } L(M_n) \\text{ 是一个有限语言} \\}$$\n\n下列哪个陈述准确地描述了语言 $L$？\n\nA. $L$ 是可判定的，并且可以由一台没有建议的标准图灵机识别。\n\nB. $L$ 是不可判定的，并且它不属于复杂度类 P/poly。\n\nC. $L$ 是不可判定的，并且它属于复杂度类 P/poly。\n\nD. $L$ 是一个正则语言。\n\nE. $L$ 的可判定性是计算机科学中的一个开放问题。", "solution": "我们首先分析可判定性。图灵机识别的语言是有限的这一性质 $P_{\\text{FIN}}$ 是一个语义性质（它只取决于所接受的语言，而非特定的机器），并且它是非平凡的（一些图灵机接受有限语言，一些接受无限语言）。根据莱斯定理，给定一个图灵机 $M$ 的编码，判定 $L(M)$ 是否有限是不可判定的。\n\n在 $L$ 的定义中，输入是一元字符串 $1^{n}$，其成员资格条件是 $1^{n} \\in L$ 当且仅当 $L(M_{n})$ 是有限的，其中 $M_n$ 是在一个固定的标准有效枚举中的第 $n$ 个图灵机。假设，为了引出矛盾，$L$ 是可判定的。给定任意一个图灵机 $M$（由其编码指定），我们可以有效地计算出它在固定枚举中的索引 $n$，因为这个枚举是标准的和有效的。然后，我们可以通过判定 $1^{n} \\in L$ 是否成立来判定 $M$ 的 $P_{\\text{FIN}}$ 性质。这将能判定一个非平凡的语义性质，与莱斯定理相矛盾。因此，$L$ 是不可判定的。因此，$L$ 不可能是正则语言，因为所有正则语言都是可判定的。\n\n接下来我们分析其在 $\\text{P/poly}$ 中的成员资格。根据定义，$\\text{P/poly}$ 包含的语言可以由配备了建议字符串 $a_{n}$ 的多项式时间图灵机判定，该建议字符串仅取决于输入长度 $n$ 并且其长度是 $n$ 的多项式。对于一元语言，每个长度 $n$ 只有一个字符串，即 $1^{n}$。定义建议函数，使得对于每个长度 $n$，建议 $a_{n}$ 是一个比特 $b_{n}$，其中如果 $1^{n} \\in L$ 则 $b_{n} = 1$，否则 $b_{n} = 0$。判定器在处理长度为 $n$ 的输入 $x$ 时，首先在多项式时间内检查 $x$ 是否为 $1^{n}$ 的形式；如果不是，则拒绝。如果是，它就输出来自建议的比特 $b_{n}$。建议的长度为 1，这是 $n$ 的多项式，且运行时间也是多项式。因此，$L \\in \\text{P/poly}$。\n\n综合这两个结论，$L$ 是不可判定的且 $L \\in \\text{P/poly}$。在这些选项中，这对应于陈述 C。陈述 A 和 D 是错误的，因为 $L$ 是不可判定的；陈述 B 是错误的，因为 $L$ 在 $\\text{P/poly}$ 中。陈述 E 是错误的，因为其状态并非未解决；它已由莱斯定理和 $\\text{P/poly}$ 中一元语言的标准特性所确定。", "answer": "$$\\boxed{C}$$", "id": "1423599"}, {"introduction": "现在，让我们从“是否属于 P/poly”的定性问题，转向“需要多少建议”的定量分析。这个更具挑战性的练习要求你比较两种不同的不可判定语言，它们的结构决定了所需建议信息的数量。通过分析，你将发现一个语言仅需恒定的建议，而另一个则需要对数增长的建议，从而对建议的复杂性有更深入的理解。[@problem_id:1423621]", "problem": "在计算复杂性理论中，P/poly 类包含的语言可以由一个多项式时间算法判定，该算法会接受一个被称为“建议”的“少量”额外信息，而该建议仅依赖于输入的长度。这个框架使我们能够研究甚至不可判定问题的复杂性。\n\n如果存在一个多项式时间的图灵机 (TM) $M$，使得对于任何输入串 $x \\in \\Sigma^*$，$M$ 在输入为 $\\langle x, a(|x|) \\rangle$ 时能正确判定 $x$ 是否属于 $L$，那么我们就说语言 $L \\subseteq \\Sigma^*$ 可以通过建议函数 $a: \\mathbb{N} \\to \\Gamma^*$ 在多项式时间内被判定。对于大小为 $n$ 的输入，建议的长度是 $|a(n)|$。我们将对于大小为 $n$ 的输入，在多项式时间内判定语言 $L$ 所需的最小可能建议长度记为 $f_L(n)$。\n\n设 $\\{M_i\\}_{i \\in \\mathbb{N}}$ 是所有图灵机的一个标准枚举，其中每个整数 $i$ 是一个机器 $M_i$ 的唯一描述。令 $K$ 为非负整数 $i$ 的集合，其中图灵机 $M_i$ 在以其自身描述 $i$ 为输入时会停机。集合 $K$ 是不可判定的。\n\n考虑以下两种语言：\n1.  一个单元语言 $L_1 \\subseteq \\{1\\}^*$，定义为 $L_1 = \\{1^n \\mid n \\in K\\}$。\n2.  一个语言 $L_2 \\subseteq \\{0,1\\}^*$。令 $\\chi_K$ 为 $K$ 的无限特征序列，其中第 $i$ 位（从0开始索引）在 $i \\in K$ 时为 1，否则为 0。令 $\\chi_K[0..m-1]$ 表示 $\\chi_K$ 的长度为 $m$ 的前缀。语言 $L_2$ 定义为 $L_2 = \\{w \\in \\{0,1\\}^* \\mid |w|=n, n \\ge 2, \\text{ 且 } w \\text{ 的长为 } \\lfloor \\log_2 n \\rfloor \\text{ 的前缀为 } \\chi_K[0..\\lfloor \\log_2 n \\rfloor-1] \\}$。我们认为对于任何长度 $n<2$ 的字符串，$L_2$ 都是空的。\n\n令 $f_1(n)$ 和 $f_2(n)$ 分别为在多项式时间内判定 $L_1$ 和 $L_2$ 所需的、作为输入长度 $n$ 的函数的最小建议长度。以下哪个选项正确描述了这些函数的渐进行为？\n\nA. $f_1(n) = \\Theta(1)$ 且 $f_2(n) = \\Theta(1)$\n\nB. $f_1(n) = \\Theta(1)$ 且 $f_2(n) = \\Theta(\\log n)$\n\nC. $f_1(n) = \\Theta(\\log n)$ 且 $f_2(n) = \\Theta(\\log n)$\n\nD. $f_1(n) = \\Theta(1)$ 且 $f_2(n) = \\Theta(n)$\n\nE. $L_1$ 和 $L_2$ 是不可判定的，因此即使有建议也无法在多项式时间内被判定。", "solution": "我们回顾一下，建议函数 $a:\\mathbb{N}\\to\\Gamma^{*}$ 为每个输入长度 $n$ 赋予一个字符串 $a(n)$，而一个多项式时间图灵机 $M$ 在给定 $\\langle x,a(n)\\rangle$ 时，必须对每个长度为 $n$ 的输入 $x$ 正确地判定 $L$。函数 $f_{L}(n)$ 是对于长度为 $n$ 的输入，在所有能判定 $L$ 的对 $(M,a)$ 中可实现的最小 $|a(n)|$。\n\n语言 $L_{1}$ (单元语言): $L_{1}=\\{1^{n}\\mid n\\in K\\}$。\n上界：对于任何 $n$，定义建议位 $a(n)=\\chi_{K}[n]$（$K$ 的特征序列的第 $n$ 位）。那么 $|a(n)|=1$，一个多项式时间的 $M$ 在输入为 $1^{n}$ 和建议为 $a(n)$ 时，当且仅当 $a(n)=1$ 时接受。因此 $f_{1}(n)\\leq 1$，所以 $f_{1}(n)=O(1)$。\n\n下界：为寻求矛盾，假设存在一个正确的对 $(M,a)$ 和一个 $N\\in\\mathbb{N}$，使得对于所有 $n\\geq N$，$|a(n)|=0$。那么，$M$ 在没有建议的情况下，对所有长度至少为 $N$ 的输入都能正确判定 $L_{1}$。将长度小于 $N$ 的（有限个）正确答案硬编码到一台（仍然是多项式时间的）机器 $M'$ 的代码中，我们就得到了一个无需建议即可判定 $L_{1}$ 的判定器。这与 $L_{1}$（等价于 $K$）的不可判定性相矛盾。因此，对于无穷多个大的 $n$，需要长度至少为 1 的建议，而上界 1 始终是足够的。由此可得 $f_{1}(n)=\\Theta(1)$。\n\n语言 $L_{2}$ (二进制语言)：对于 $n\\geq 2$，令 $m=\\lfloor\\log_{2}(n)\\rfloor$ 并定义 $L_2$ 使得一个长度为 $n$ 的字符串 $w$ 属于 $L_2$ 当且仅当 $w$ 的长度为 $m$ 的前缀等于 $\\chi_{K}[0..m-1]$。\n\n上界：对于每个 $n$，取建议 $a(n)=\\chi_{K}[0..m-1]$，所以 $|a(n)|=m=\\lfloor\\log_{2}(n)\\rfloor$。一个多项式时间的 $M$ 会检查 $|w|=n$，计算 $m$，将 $w$ 的前 $m$ 位与 $a(n)$ 进行比较，并且当且仅当它们相等时接受。因此 $f_{2}(n)\\leq m=\\Theta(\\log n)$，得出 $f_{2}(n)=O(\\log n)$。\n\n下界：固定任何一个能正确判定 $L_{2}$ 的对 $(M,a)$。令 $m=\\lfloor\\log_{2}(n)\\rfloor$，并记 $s_{m}=\\chi_{K}[0..m-1]$。考虑相对于一台固定的通用机的条件 Kolmogorov 复杂度；记作 $C(\\cdot\\mid\\cdot)$。一个标准的事实是，停机集的特征序列具有任意高复杂度的前缀，即，存在一个常数 $c$（与 $m$ 无关），使得对于无穷多个 $m$，\n$$\nC\\bigl(s_{m}\\mid m\\bigr)\\geq m-c.\n$$\n由于 $M$ 是固定的，以 $M$ 为条件只会使右侧增加一个加法常数，因此对于无穷多个 $m$，\n$$\nC\\bigl(s_{m}\\mid m,M\\bigr)\\geq m-c'.\n$$\n对于这样的 $m$，如果 $|a(n)|<m-c'$，那么从 $(m,M,a(n))$ 可以用少于 $m-c'$ 个比特来描述 $s_{m}$，这与上述不等式相矛盾。因此，对于无穷多个 $n$，\n$$\n|a(n)|\\geq m-c'=\\Theta(\\log n),\n$$\n这意味着 $f_{2}(n)=\\Omega(\\log n)$。结合 $O(\\log n)$ 的上界，我们得到 $f_{2}(n)=\\Theta(\\log n)$。\n\n因此，$f_{1}(n)=\\Theta(1)$ 且 $f_{2}(n)=\\Theta(\\log n)$，这对应于选项 B。", "answer": "$$\\boxed{B}$$", "id": "1423621"}]}