{"hands_on_practices": [{"introduction": "为了理解 $AC^0$ 电路的局限性，我们首先需要一种新的方式来描述它们。这个练习介绍了一种强大的技术：将布尔函数表示为有限域 $F_2$ 上的多项式。掌握这种转换是第一步，它使我们能够通过代数视角分析电路复杂性，这也是证明奇偶校验函数（PARITY）不属于 $AC^0$ 的关键方法 [@problem_id:1434577]。", "problem": "在计算复杂性理论中，将布尔函数表示为有限域上的多元多项式通常很有用。这种代数视角为分析这些函数的性质提供了强大的工具。\n\n考虑布尔变量 $x_i$ 其取值于 $\\{0, 1\\}$，其中 $0$ 对应 FALSE（假），$1$ 对应 TRUE（真）。这些变量可以被看作是具有两个元素的有限域的元素，记作 $F_2$。在这个域中，加法等价于异或（XOR）运算，乘法等价于与（$\\land$）运算。任何布尔函数 $f: \\{0,1\\}^n \\to \\{0,1\\}$ 都可以被唯一地表示为 $F_2$ 上的一个多线性多项式 $P(x_1, \\dots, x_n)$。\n\n你的任务是为一个特定的函数找到这种多项式表示。确定在域 $F_2$ 上表示布尔函数 $f(x_1, x_2, x_3) = (\\neg x_1 \\lor x_2) \\land (x_1 \\lor \\neg x_3)$ 的唯一多线性多项式 $P(x_1, x_2, x_3)$。", "solution": "我们在域 $F_{2}$ 上进行运算，其中布尔变量取值于 $\\{0,1\\}$ 并满足 $x_{i}^{2}=x_{i}$。在 $F_{2}$ 中，加法对应异或（XOR），乘法对应与（AND），非运算为 $\\neg x = 1 + x$。析取（OR）满足 $a \\lor b = a + b + ab$。\n\n翻译每个子句。对于第一个子句，\n$$(\\neg x_{1} \\lor x_{2}) = (1 + x_{1}) \\lor x_{2} = (1 + x_{1}) + x_{2} + (1 + x_{1})x_{2}$$\n计算 $(1 + x_{1})x_{2} = x_{2} + x_{1}x_{2}$，所以\n$$(\\neg x_{1} \\lor x_{2}) = (1 + x_{1}) + x_{2} + x_{2} + x_{1}x_{2} = 1 + x_{1} + x_{1}x_{2}$$\n对于第二个子句，\n$$(x_{1} \\lor \\neg x_{3}) = x_{1} \\lor (1 + x_{3}) = x_{1} + (1 + x_{3}) + x_{1}(1 + x_{3})$$\n计算 $x_{1}(1 + x_{3}) = x_{1} + x_{1}x_{3}$，所以\n$$(x_{1} \\lor \\neg x_{3}) = x_{1} + 1 + x_{3} + x_{1} + x_{1}x_{3} = 1 + x_{3} + x_{1}x_{3}$$\n\n该函数是这些子句的合取（AND），在 $F_{2}$ 中即为乘法：\n$$f(x_{1},x_{2},x_{3}) = (1 + x_{1} + x_{1}x_{2})(1 + x_{3} + x_{1}x_{3})$$\n使用 $x_{i}^{2} = x_{i}$ 和 $F_{2}$ 中的对消律展开并化简：\n\\begin{align*}\n&\\quad (1 + x_{1} + x_{1}x_{2})(1 + x_{3} + x_{1}x_{3}) \\\\\n&= (1 + x_{1} + x_{1}x_{2}) + (1 + x_{1} + x_{1}x_{2})x_{3} + (1 + x_{1} + x_{1}x_{2})x_{1}x_{3} \\\\\n&= (1 + x_{1} + x_{1}x_{2}) + (x_{3} + x_{1}x_{3} + x_{1}x_{2}x_{3}) + (x_{1}x_{3} + x_{1}^{2}x_{3} + x_{1}^{2}x_{2}x_{3}) \\\\\n&= (1 + x_{1} + x_{1}x_{2}) + (x_{3} + x_{1}x_{3} + x_{1}x_{2}x_{3}) + (x_{1}x_{3} + x_{1}x_{3} + x_{1}x_{2}x_{3}) \\\\\n&= 1 + x_1 + x_1x_2 + x_3 + (x_1x_3 + x_1x_3 + x_1x_3) + (x_1x_2x_3 + x_1x_2x_3) \\\\\n&= 1 + x_1 + x_3 + x_1x_2 + x_1x_3\n\\end{align*}\n由于在 $F_{2}$ 中 $a+a=0$，相同的项成对出现时会抵消。因此，表示 $f$ 的唯一多线性多项式（代数范式）是\n$$P(x_{1},x_{2},x_{3}) = 1 + x_{1} + x_{3} + x_{1}x_{2} + x_{1}x_{3}.$$", "answer": "$$\\boxed{1 + x_{1} + x_{3} + x_{1}x_{2} + x_{1}x_{3}}$$", "id": "1434577"}, {"introduction": "在学会将布尔函数转换为多项式之后，我们现在来研究一个关键属性：多项式的次数。这个练习要求你找出构成 $AC^0$ 电路的基本构建模块——AND（与）门和 OR（或）门——所对应的多项式的次数 [@problem_id:1434571]。理解这些基本组件的次数，对于领会为何浅层电路在计算某些函数时能力受限至关重要。", "problem": "在计算复杂性理论的研究中，通常将布尔函数表示为具有两个元素的有限域 $F_2 = \\{0, 1\\}$ 上的多元多项式。布尔函数将来自 $\\{0, 1\\}^n$ 的输入映射到 $\\{0, 1\\}$ 中的一个输出。在该域中，加法定义为异或 (XOR) 运算，乘法定义为逻辑与 (AND) 运算。具体来说，对于任何 $a, b \\in F_2$，有 $a+b = a \\oplus b$ 和 $a \\cdot b = a \\land b$。\n\n任何布尔函数 $f: \\{0, 1\\}^n \\to \\{0, 1\\}$ 都有一个唯一的多项式表示 $p(x_1, \\dots, x_n)$，使得对于所有输入比特串 $(b_1, \\dots, b_n) \\in \\{0, 1\\}^n$ 都有 $f(b_1, \\dots, b_n) = p(b_1, \\dots, b_n)$。该多项式的次数定义为其所有单项式中的最大次数。单项式的次数是其变量指数的总和。请注意，在 $F_2$ 中，任何变量 $x_i$ 对任意整数 $k \\ge 1$ 都满足 $x_i^k = x_i$，因此我们只需要考虑每个变量的指数最多为1的多项式（即无平方项多项式）。\n\n考虑两个基本的 $n$ 变量布尔函数（其中 $n \\ge 2$）：\n1. 与函数 (AND function): $f_{\\text{AND}}(x_1, \\dots, x_n) = x_1 \\land x_2 \\land \\dots \\land x_n$\n2. 或函数 (OR function): $f_{\\text{OR}}(x_1, \\dots, x_n) = x_1 \\lor x_2 \\lor \\dots \\lor x_n$\n\n令 $d_{\\text{AND}}$ 为在 $F_2$ 上表示 $f_{\\text{AND}}$ 的唯一多项式的次数，令 $d_{\\text{OR}}$ 为在 $F_2$ 上表示 $f_{\\text{OR}}$ 的唯一多项式的次数。\n\n以下哪个陈述正确地指出了这些次数？\n\nA. $d_{\\text{AND}} = 1, d_{\\text{OR}} = 1$\n\nB. $d_{\\text{AND}} = n, d_{\\text{OR}} = 1$\n\nC. $d_{\\text{AND}} = 1, d_{\\text{OR}} = n$\n\nD. $d_{\\text{AND}} = n, d_{\\text{OR}} = n$\n\nE. $d_{\\text{AND}} = n, d_{\\text{OR}} = n-1$", "solution": "要解决这个问题，我们必须找到与函数 (AND) 和或函数 (OR) 在域 $F_2$ 上的多项式表示，然后确定它们的次数。$F_2$ 中的运算是加法（异或, $\\oplus$）和乘法（与, $\\land$）。\n\n首先，我们来求 $n$ 变量与函数 $f_{\\text{AND}}(x_1, \\dots, x_n) = x_1 \\land x_2 \\land \\dots \\land x_n$ 的多项式。\n逻辑与运算直接对应于 $F_2$ 中的乘法。因此，多项式表示 $p_{\\text{AND}}$ 就是变量的乘积：\n$$p_{\\text{AND}}(x_1, \\dots, x_n) = x_1 \\cdot x_2 \\cdot \\dots \\cdot x_n$$\n该多项式由单个单项式 $x_1x_2\\dots x_n$ 构成。单项式的次数是其变量指数的总和。在这种情况下，每个变量 $x_i$ 的隐式指数为1。所以，这个单项式的次数是 $n$ 个1的和：\n$$\\text{degree}(x_1x_2\\dots x_n) = 1 + 1 + \\dots + 1 = n$$\n由于这是多项式中唯一的单项式，整个多项式 $p_{\\text{AND}}$ 的次数是 $n$。因此，$d_{\\text{AND}} = n$。\n\n接下来，我们来求 $n$ 变量或函数 $f_{\\text{OR}}(x_1, \\dots, x_n) = x_1 \\lor x_2 \\lor \\dots \\lor x_n$ 的多项式。\n在 $F_2$ 中没有单一的算术运算直接对应于逻辑或。我们必须使用可用的运算来构造多项式。一个有用的恒等式是 De Morgan 定律，它指出或表达式可以用与 (AND) 和非 (NOT) 来表示：\n$$A_1 \\lor A_2 \\lor \\dots \\lor A_n = \\neg(\\neg A_1 \\land \\neg A_2 \\land \\dots \\land \\neg A_n)$$\n在域 $F_2 = \\{0, 1\\}$ 中，非运算 $\\neg A$ 等价于加1。我们来验证一下：如果 $A=0$，则 $\\neg A = 1$，且 $A+1 = 0+1=1$。如果 $A=1$，则 $\\neg A=0$，且 $A+1=1+1=0$（因为加法是异或）。所以，在 $F_2$ 中 $\\neg A = 1+A$。\n现在我们可以将或运算的 De Morgan 表达式转换成 $F_2$ 的代数形式：\n\\begin{align*} f_{\\text{OR}}(x_1, \\dots, x_n) &= \\neg(\\neg x_1 \\land \\neg x_2 \\land \\dots \\land \\neg x_n) \\\\ &= 1 + ( (1+x_1) \\land (1+x_2) \\land \\dots \\land (1+x_n) ) \\end{align*}\n将逻辑与替换为 $F_2$ 中的乘法，我们得到多项式 $p_{\\text{OR}}$：\n$$p_{\\text{OR}}(x_1, \\dots, x_n) = 1 + (1+x_1)(1+x_2)\\dots(1+x_n)$$\n为了求出这个多项式的次数，我们必须展开乘积项。让我们展开 $\\prod_{i=1}^n (1+x_i)$：\n$$\\prod_{i=1}^n (1+x_i) = 1 + \\sum_{1 \\le i \\le n} x_i + \\sum_{1 \\le i < j \\le n} x_i x_j + \\dots + x_1 x_2 \\dots x_n$$\n这个展开式包含了所有变量非空子集的项。\n现在，将这个展开式代入 $p_{\\text{OR}}$ 的表达式中：\n$$p_{\\text{OR}}(x_1, \\dots, x_n) = 1 + \\left(1 + \\sum_{i} x_i + \\sum_{i<j} x_i x_j + \\dots + x_1 x_2 \\dots x_n \\right)$$\n因为我们在 $F_2$ 中，加法是异或，且 $1+1=0$。开头的 `1+` 与展开式中的 `1` 相抵消：\n$$p_{\\text{OR}}(x_1, \\dots, x_n) = (1+1) + \\sum_{i} x_i + \\sum_{i<j} x_i x_j + \\dots + x_1 x_2 \\dots x_n$$\n$$p_{\\text{OR}}(x_1, \\dots, x_n) = \\sum_{i} x_i + \\sum_{i<j} x_i x_j + \\dots + x_1 x_2 \\dots x_n$$\n该多项式的次数是其最高次单项式的次数。这个和式中的单项式次数从1到$n$不等。最高次的单项式是 $x_1 x_2 \\dots x_n$ 这一项，其次数为 $n$。\n因此，多项式 $p_{\\text{OR}}$ 的次数是 $n$。所以，$d_{\\text{OR}} = n$。\n\n我们已经求得 $d_{\\text{AND}} = n$ 且 $d_{\\text{OR}} = n$。这对应于选项 D。", "answer": "$$\\boxed{D}$$", "id": "1434571"}, {"introduction": "现在，我们将直面该定理的核心：将奇偶校验函数（PARITY）与 $AC^0$ 类区分开的数学证明。该证明为任何试图计算 PARITY 的恒定深度电路的规模提供了一个具体的下界。本次动手实践邀请你直接处理来自该证明的一个公式，运用微积分工具来确定最紧密的下界，从而亲手推导出这个超多项式（super-polynomial）增长的规模，具体地理解为何 PARITY 不在 $AC^0$ 中 [@problem_id:1434555]。", "problem": "**背景：** PARITY函数是否能被常数深度电路有效计算的问题，是计算复杂性理论的基石之一。由常数深度、多项式大小、以及无界扇入的与门、或门和非门构成的电路类被称为 AC$^0$。已有证明指出，对于任意常数深度$d$，任何计算$n$变量PARITY函数的电路都需要一个大小，其随$n$呈超多项式增长。因此，PARITY不属于 AC$^0$。\n\n这一事实的证明涉及表明，任何由小型、常数深度电路计算的函数，都可由一个低次多项式良好近似，或者，在随机固定其部分输入后可被大幅简化。PARITY函数，定义为 $f(x_1, \\dots, x_n) = x_1 \\oplus \\dots \\oplus x_n$（其中$\\oplus$是模2加法），以其对此类简化的抵抗性而著称。\n\n**问题情景：** 证明的核心部分涉及一个权衡。为了简化一个作用于$n$个变量的深度为$d$的电路，我们选择一个参数$t$，它代表了一个中间简化步骤的目标“复杂度”。分析得出了一个关于电路大小$S$的下界，该下界依赖于$n$、$d$以及这个参数$t$。我们将这个下界称为$S_{bound}(t)$，其表达式为：\n$$S_{bound}(t) = \\left( \\frac{n}{t^{d-1}} \\right)^{\\frac{t}{d-1}}$$\n为了使整个证明尽可能强，必须选择参数$t$来使该下界最大化。你的任务是找到这个最紧可能下界。\n\n**你的任务：**\n将$t$视为一个正实数变量，找到使$S_{bound}(t)$最大化的$t$值。将这个最优$t$值代回$S_{bound}(t)$的表达式中，以求得最佳可能的大小下界$S(n, d)$。请将你的最终答案$S(n, d)$表示为$n$和$d$的函数。", "solution": "对于固定的深度$d$和输入大小$n$，我们得到下界是关于一个正实数参数$t$的函数：\n$$\nS_{bound}(t)=\\left(\\frac{n}{t^{d-1}}\\right)^{\\frac{t}{d-1}},\n$$\n我们的目标是在$t>0$的范围内将其最大化。我们假设$d>1$（这是我们所关注的常数深度设定）。\n\n为了最大化$S_{bound}(t)$，我们考虑其自然对数（此操作不改变最大值点）：\n$$\nh(t)=\\ln S_{bound}(t)=\\frac{t}{d-1}\\left(\\ln n-(d-1)\\ln t\\right)=\\frac{t}{d-1}\\ln n - t\\ln t.\n$$\n对$t$求导：\n$$\nh'(t)=\\frac{1}{d-1}\\ln n - \\left(\\ln t + 1\\right).\n$$\n令$h'(t)=0$以找到临界点：\n$$\n\\frac{1}{d-1}\\ln n - \\ln t - 1=0 \\quad \\Longrightarrow \\quad \\ln t=\\frac{1}{d-1}\\ln n - 1.\n$$\n取指数运算得到唯一的临界点\n$$\nt^{\\ast}=\\exp\\!\\left(\\frac{1}{d-1}\\ln n - 1\\right)=\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)}.\n$$\n其二阶导数为\n$$\nh''(t)=-\\frac{1}{t}<0 \\quad \\text{for all } t>0,\n$$\n因此$t^{\\ast}$是全局最大值点。\n\n将$t^{\\ast}$代回$S_{bound}(t)$：\n首先计算\n$$\n\\left(t^{\\ast}\\right)^{d-1}=\\left(\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)}\\right)^{d-1}=\\frac{n}{\\exp(d-1)},\n$$\n因此\n$$\n\\frac{n}{\\left(t^{\\ast}\\right)^{d-1}}=\\exp(d-1).\n$$\n同时，\n$$\n\\frac{t^{\\ast}}{d-1}=\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)(d-1)}.\n$$\n所以，\n$$\nS(n,d)=S_{bound}\\!\\left(t^{\\ast}\\right)=\\left(\\exp(d-1)\\right)^{\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)(d-1)}}=\\exp\\!\\left(\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)}\\right).\n$$\n这就得到了作为$n$和$d$函数的最优下界。", "answer": "$$\\boxed{\\exp\\!\\left(\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)}\\right)}$$", "id": "1434555"}]}