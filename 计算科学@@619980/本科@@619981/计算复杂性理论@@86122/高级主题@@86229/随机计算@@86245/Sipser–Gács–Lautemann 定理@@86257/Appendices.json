{"hands_on_practices": [{"introduction": "要真正理解Sipser–Gács–Lautemann定理，我们必须首先学习如何构建其核心的逻辑公式。本练习将引导你完成构建多项式时间谓词 $V$ 的过程，这个谓词是该定理针对BPP语言的 $\\Sigma_2^p$ 表述的核心。通过这个实践，你将把抽象的量词 $\\exists s_1, \\dots, s_q \\forall r$ 转化为一个具体的计算性检验，从而将理论付诸实践 [@problem_id:1462919]。", "problem": "设 $L$ 是一个属于复杂性类 $\\mathsf{BPP}$ (有界错误概率多项式时间，Bounded-error Probabilistic Polynomial time) 的语言。根据定义，存在一个确定性多项式时间图灵机 $M(x, r)$，它接受一个长度为 $n=|x|$ 的输入字符串 $x$ 和一个随机字符串 $r$。对于本问题，假设随机字符串 $r$ 的长度由多项式 $p(n) = n^3$ 给出。该图灵机 $M$ 遵循以下概率保证：\n- 如果 $x \\in L$，那么 $M(x, r)$ 输出 1 的概率至少为 $3/4$：$\\Pr_{r \\in \\{0,1\\}^{n^3}}[M(x, r) = 1] \\ge \\frac{3}{4}$。\n- 如果 $x \\notin L$，那么 $M(x, r)$ 输出 1 的概率至多为 $1/4$：$\\Pr_{r \\in \\{0,1\\}^{n^3}}[M(x, r) = 1] \\le \\frac{1}{4}$。\n\nSipser–Gács–Lautemann 定理指出 $\\mathsf{BPP} \\subseteq \\Sigma_2^p$。该证明依赖于为 $L$ 中的语言成员性构造一个 $\\Sigma_2^p$ 表达式。此构造始于一个**放大 (amplification)** 步骤，以创建一个新的概率性机器 $M'$，其错误概率要小得多。我们定义 $M'$ 的操作方式为：对 $k=6n$ 个独立的试验运行 $M(x, \\cdot)$，如果大多数试验接受，则 $M'$ 接受。用于 $M'$ 的总随机字符串（记为 $R$）是这 $k$ 个独立试验中所用随机字符串的拼接。\n\n在放大之后，使用一个**覆盖论证 (covering argument)** 来将 $L$ 的判定问题形式化为所需的 $\\Sigma_2^p$ 形式：\n$$x \\in L \\iff \\exists s_1, \\dots, s_q \\in \\{0,1\\}^m \\ \\forall r \\in \\{0,1\\}^m : V(x, s_1, \\dots, s_q, r)$$\n在这里，$m$ 是放大后的机器 $M'$ 的随机字符串 $R$ 的总长度，$q$ 是所选“移位”字符串的数量。为了本问题的目的，$q$ 被定义为严格大于 $m/n$ 的最小整数。谓词 $V$ 必须在关于 $n$ 的多项式时间内可计算。\n\n你的任务是推导并写出多项式时间谓词 $V(x, s_1, \\dots, s_q, r)$ 的显式逻辑公式。你必须首先确定参数 $m$ 和 $q$ 作为 $n$ 的函数。$V$ 的最终表达式应使用基本机器 $M$、输入 $x$、移位字符串 $s_1, \\dots, s_q$ 以及全称量化的字符串 $r$ 来表示。为了使你的答案清晰，令 $(S)_j$ 表示字符串 $S$ 的第 $j$ 个长度为 $n^3$ 的子字符串。", "solution": "我们从给定的基本机器 $M(x,r)$ 开始，它使用 $p(n)=n^{3}$ 个随机比特。放大后的机器 $M'$ 运行 $k=6n$ 次独立试验，并以多数票决方式接受。每次试验使用一个新的长度为 $n^{3}$ 的块，因此如果我们将 $k$ 个随机块拼接成一个单一的字符串 $R$，那么 $M'$ 使用的总随机长度为\n$$\nm \\;=\\; k \\cdot n^{3} \\;=\\; 6n \\cdot n^{3} \\;=\\; 6n^{4}.\n$$\n\n根据问题的定义，移位字符串的数量 $q$ 是严格大于 $m/n$ 的最小整数。由于 $m/n = 6n^{4}/n = 6n^{3}$ 是一个整数，我们得到\n$$\nq \\;=\\; 6n^{3} + 1.\n$$\n\n定义 $M'(x,R)$ 的操作为：在 $R$ 的 $k=6n$ 个块上独立运行 $M$，每个块的长度为 $n^3$，如果严格多数接受，则 $M'$ 接受。使用所提供的块表示法，这可以表示为\n$$\nM'(x,R)=1 \\;\\;\\iff\\;\\; \\sum_{j=1}^{6n} M\\bigl(x,(R)_{j}\\bigr) \\;>\\; 3n.\n$$\n\nSipser–Gács–Lautemann 覆盖步骤断言，存在 $q$ 个移位 $s_{1},\\dots,s_{q}\\in\\{0,1\\}^{m}$，使得对于所有 $r\\in\\{0,1\\}^{m}$，当 $x\\in L$ 时，至少有一个移位后的随机性 $(r\\oplus s_{i})$ 会使 $M'$ 接受；而当 $x\\notin L$ 时，鉴于放大后接受概率很小，不存在这样的移位族能够起作用。这就得到了 $\\Sigma_{2}^{p}$ 形式\n$$\nx\\in L \\iff \\exists s_{1},\\dots,s_{q}\\in\\{0,1\\}^{m}\\;\\forall r\\in\\{0,1\\}^{m}:\\;V(x,s_{1},\\dots,s_{q},r),\n$$\n其中，多项式时间谓词 $V$ 正是关于 $q$ 个移位的析取，表示 $M'$ 对移位后的随机性接受。将 $M'$ 用 $M$ 展开，并使用块表示法 $(S)_{j}$ 表示长度为 $n^3$ 的第 $j$ 个子字符串，我们得到显式公式\n$$\nV(x,s_{1},\\dots,s_{q},r)\n\\;\\equiv\\;\n\\bigvee_{i=1}^{q}\\left[\\;\\sum_{j=1}^{6n} M\\bigl(x,\\,(r\\oplus s_{i})_{j}\\bigr) \\;>\\; 3n\\;\\right].\n$$\n该谓词在关于 $n$ 的多项式时间内是可计算的，因为它执行了 $q\\cdot(6n)=\\Theta(n^{4})$ 次 $M$ 的求值（每次都是多项式时间的），外加多项式时间的按位$\\oplus$和计数操作，并且我们有 $m=6n^{4}$ 和 $q=6n^{3}+1$，符合要求。", "answer": "$$\\boxed{\\begin{pmatrix}\n6 n^{4} & 6 n^{3} + 1 & \\displaystyle \\bigvee_{i=1}^{6 n^{3}+1}\\left[\\;\\sum_{j=1}^{6 n} M\\bigl(x,\\,(r \\oplus s_{i})_{j}\\bigr) > 3 n\\;\\right]\n\\end{pmatrix}}$$", "id": "1462919"}, {"introduction": "上一个练习展示了*如何*构建SGL谓词，但前提是给定了一定数量的“移位串”。接下来的这个练习将探索一个优美的概率论证，它告诉我们*为什么*可以保证存在这样一个规模足够小的移位串集合。你将推导期望的错误概率与覆盖论证所需的移位串数量之间的关系，从而深刻体会到概率方法在计算复杂性理论中的强大威力 [@problem_id:1462936]。", "problem": "考虑一个语言 $L$ ，它由一个已放大的概率多项式时间（PPT）算法判定。该算法由一个确定性图灵机 $M$ 实现，它接受两个输入：一个长度为 $n$ 的主输入串 $x$ ，以及一个长度为 $m(n)$ 的随机比特串 $r$ ，其中 $m(n)$ 是 $n$ 的一个多项式。\n\n如果对于任何输入 $x$ ，在均匀选择的随机串 $r$ 上，$M(x, r)$ 对 $x$ 是否属于 $L$ 给出错误答案的概率不超过 $\\epsilon$ ，那么称该算法的错误概率至多为 $\\epsilon$ （其中 $\\epsilon < 1/2$ ）。\n\n对于一个输入 $x \\in L$ ，令 $A_x$ 为“接受”随机串的集合，即 $A_x = \\{r \\in \\{0,1\\}^{m(n)} \\mid M(x, r) = 1\\}$。正确判定隶属关系的条件意味着该集合的大小为 $|A_x| \\ge (1-\\epsilon)2^{m(n)}$。\n\nSipser–Gács–Lautemann 定理证明中的一个关键步骤是证明存在一个小的“移位串”集合，可用于测试 $L$ 中的隶属关系。具体来说，对于一个输入 $x \\in L$ ，存在一个包含 $t$ 个字符串的集合 $S = \\{s_1, s_2, \\ldots, s_t\\}$ ，其中每个 $s_i \\in \\{0,1\\}^{m(n)}$ ，使得整个随机串空间 $\\{0,1\\}^{m(n)}$ 被接受集合 $A_x$ 的移位版本所覆盖。该覆盖条件表示为：\n$$\n\\bigcup_{i=1}^{t} (A_x \\oplus s_i) = \\{0,1\\}^{m(n)}\n$$\n其中 $A_x \\oplus s_i = \\{ r \\oplus s_i \\mid r \\in A_x \\}$ 且 $\\oplus$ 表示按位异或运算。\n\n确定能够证明存在这样一个覆盖集 $S$ 的最小整数 $t$ 值。将答案表示为关于 $m(n)$ 和 $\\epsilon$ 的闭式解析表达式。", "solution": "令 $m = m(n)$ 并固定 $x \\in L$。定义 $A_{x} \\subseteq \\{0,1\\}^{m}$ ，其大小满足 $|A_{x}| \\ge (1-\\epsilon)2^{m}$。对于任意固定的 $y \\in \\{0,1\\}^{m}$ 和一个均匀随机的移位 $s \\in \\{0,1\\}^{m}$ ，我们有\n$$\ny \\in A_{x} \\oplus s \\iff s \\in y \\oplus A_{x},\n$$\n且 $|y \\oplus A_{x}| = |A_{x}|$。因此\n$$\n\\Pr_{s}\\big[y \\in A_{x} \\oplus s\\big] = \\frac{|A_{x}|}{2^{m}} \\ge 1 - \\epsilon,\n$$\n所以\n$$\n\\Pr_{s}\\big[y \\notin A_{x} \\oplus s\\big] \\le \\epsilon.\n$$\n现在取 $t$ 个独立的、均匀随机的移位 $s_{1},\\dots,s_{t}$。根据独立性，\n$$\n\\Pr\\big[y \\notin \\bigcup_{i=1}^{t} (A_{x} \\oplus s_{i})\\big] \\le \\epsilon^{t}.\n$$\n对所有的 $y \\in \\{0,1\\}^{m}$ 应用联合界，\n$$\n\\Pr\\Big[\\exists\\, y \\in \\{0,1\\}^{m} \\text{ not covered}\\Big] \\le 2^{m}\\epsilon^{t}.\n$$\n因此，如果\n$$\n2^{m}\\epsilon^{t} < 1,\n$$\n则存在一个移位集合 $S = \\{s_{1},\\dots,s_{t}\\}$ 的选择，使得\n$$\n\\bigcup_{i=1}^{t} (A_{x} \\oplus s_{i}) = \\{0,1\\}^{m}.\n$$\n求解 $2^{m}\\epsilon^{t} < 1$ 可得\n$$\n\\epsilon^{t} < 2^{-m}\n\\iff t \\ln \\epsilon < - m \\ln 2\n\\iff t > \\frac{m \\ln 2}{\\ln(1/\\epsilon)}\n\\iff t > \\frac{m}{\\log_{2}(1/\\epsilon)}.\n$$\n因此，通过该论证保证存在性的最小整数 $t$ 是\n$$\nt^{*} = \\left\\lfloor \\frac{m(n)}{\\log_{2}(1/\\epsilon)} \\right\\rfloor + 1.\n$$\n这就得出了所要求的覆盖集大小，表示为关于 $m(n)$ 和 $\\epsilon$ 的闭式表达式。", "answer": "$$\\boxed{\\left\\lfloor \\frac{m(n)}{\\log_{2}(1/\\epsilon)} \\right\\rfloor + 1}$$", "id": "1462936"}, {"introduction": "SGL定理将BPP置于 $\\Sigma_2^p$ 类中，该类由一个以存在量词开头、后跟全称量词 $(\\exists \\forall)$ 的公式定义。这最后一个练习是一个思想实验，旨在巩固你对多项式层级结构的理解。通过思考当我们颠倒量词顺序时会发生什么，你将加深对SGL证明的特定结构为何导出 $\\Sigma_2^p$ 的认识，并理解其对偶结构 $(\\forall \\exists)$ 代表了什么 [@problem_id:1462940]。", "problem": "在计算复杂性理论中，多项式层级为复杂性类提供了一种分层的分类。如果存在一个多项式时间谓词 $P$ 和一个多项式 $q$，使得对于任何输入 $x$，语言 $L$ 中的成员资格由以下逻辑公式的真值决定，则称该语言 $L$ 属于类 $\\Sigma_k^p$：\n$$ \\exists y_1 \\forall y_2 \\exists y_3 \\dots Q_k y_k \\ P(x, y_1, y_2, \\dots, y_k) $$\n在这里，$Q_k$ 是交替序列中的第 $k$ 个量词，每个字符串 $y_i$ 的长度受 $q(|x|)$ 的限制，且第一个量词总是存在量词 ($\\exists$)。\n\n同样地，如果一个语言的成员资格是由一个具有相同结构但以全称量词 ($\\forall$) 开头的公式决定的，则该语言属于 $\\Pi_k^p$：\n$$ \\forall y_1 \\exists y_2 \\forall y_3 \\dots Q'_k y_k \\ P(x, y_1, y_2, \\dots, y_k) $$\n\nSipser–Gács–Lautemann (SGL) 定理建立了一个深刻的结果，将随机计算与此层级联系起来。其证明的核心部分表明，任何属于有界错误概率多项式时间 ($\\mathrm{BPP}$) 类的语言，都可以用一种特定类型的逻辑公式来描述。对于一个输入 $x$，此公式的形式如下：\n$$ \\exists Y \\forall z \\ \\phi(x, Y, z) $$\n其中 $Y$ 代表一组多项式大小的字符串，$z$ 是一个单一的多项式大小的字符串，而 $\\phi$ 是一个可以在多项式时间内求值的谓词。\n\n现在，想像一个我们称之为 $\\mathcal{C}$ 的新的假设复杂性类。如果一个语言对于输入 $x$ 的成员资格，可以由一个与 SGL 定理证明中的公式具有相同组成部分、但量词顺序颠倒的公式来决定，则该语言属于 $\\mathcal{C}$：\n$$ \\forall Y \\exists z \\ \\psi(x, Y, z) $$\n其中 $Y$、$z$ 和谓词 $\\psi$ 具有与之前相同的属性。\n\n下列哪个标准复杂性类与这个假设的类 $\\mathcal{C}$ 等价？\n\nA. $\\Sigma_2^p$\n\nB. $\\Pi_2^p$\n\nC. $\\mathrm{P}$\n\nD. $\\mathrm{NP}$\n\nE. $\\mathrm{coNP}$\n\nF. $\\mathrm{BPP}$", "solution": "问题要求我们识别出与具有特定量词结构的逻辑公式相对应的标准复杂性类。为此，我们将分析给定公式的结构，并将其与多项式层级中各类的定义进行比较。\n\n首先，让我们回顾问题陈述中提供的类 $\\Sigma_k^p$ 和 $\\Pi_k^p$ 的定义。\n如果对于每个输入 $x$，条件 $x \\in L$ 等价于陈述 $\\exists y_1 \\forall y_2 \\dots Q_k y_k P(x, y_1, \\dots, y_k)$，其中该公式具有 $k$ 个以存在量词 ($\\exists$) 开头的交替量词块，则语言 $L$ 属于 $\\Sigma_k^p$。\n如果对于每个输入 $x$，条件 $x \\in L$ 等价于陈述 $\\forall y_1 \\exists y_2 \\dots Q'_k y_k P(x, y_1, \\dots, y_k)$，其中该公式具有 $k$ 个以全称量词 ($\\forall$) 开头的交替量词块，则语言 $L$ 属于 $\\Pi_k^p$。\n在这两种情况下，变量 $y_i$ 是长度受 $|x|$ 的多项式限制的字符串，而 $P$ 是一个多项式时间谓词。\n\n问题首先提到了 Sipser–Gács–Lautemann 定理证明中使用的逻辑形式：\n$$ \\exists Y \\forall z \\ \\phi(x, Y, z) $$\n在这里，$Y$ 代表一组字符串，可以被看作一个单一的、更长的字符串。此公式以一个存在量词 ($\\exists Y$) 开始，后接一个全称量词 ($\\forall z$)，然后是一个多项式时间谓词 $\\phi$。这个结构由两个交替的量词块组成：($\\exists$) 后接 ($\\forall$)。根据定义，由一个具有 $k=2$ 次交替且以 $\\exists$ 开头的公式所定义的类是 $\\Sigma_2^p$。因此，SGL 证明中的原始公式刻画了类 $\\Sigma_2^p$。\n\n接下来，我们需要刻画假设的类 $\\mathcal{C}$，它是由交换量词顺序定义的：\n$$ \\forall Y \\exists z \\ \\psi(x, Y, z) $$\n让我们分析这个新结构。该公式以一个全称量词 ($\\forall Y$) 开始，后接一个存在量词 ($\\exists z$)，然后是一个多项式时间谓词 $\\psi$。这个结构构成了两个交替的量词块：($\\forall$) 后接 ($\\exists$)。\n\n我们将这个结构与 $\\Pi_k^p$ 的定义进行比较。$\\Pi_k^p$ 的定义是一个以全称量词开始并具有 $k$ 个交替量词块的公式。对于我们的公式，$k=2$。量词的顺序是 $\\forall \\dots \\exists \\dots$。这完全符合 $\\Pi_2^p$ 的定义。\n\n因此，假设的复杂性类 $\\mathcal{C}$ 等价于类 $\\Pi_2^p$。\n\n让我们简要回顾一下给定的选项：\nA. $\\Sigma_2^p$：这对应于原始的、未交换的公式 $(\\exists \\forall)$。不正确。\nB. $\\Pi_2^p$：这对应于交换后的公式 $(\\forall \\exists)$。正确。\nC. $\\mathrm{P}$：此类包含可在多项式时间内解决的问题，对应于没有对多项式长度字符串进行量化的公式。不正确。\nD. $\\mathrm{NP}$：这是 $\\Sigma_1^p$，对应于只有一个存在量词块的公式，$\\exists Y P(x, Y)$。不正确。\nE. $\\mathrm{coNP}$：这是 $\\Pi_1^p$，对应于只有一个全称量词块的公式，$\\forall Y P(x, Y)$。不正确。\nF. $\\mathrm{BPP}$：SGL 定理表明 $\\mathrm{BPP} \\subseteq \\Sigma_2^p \\cap \\Pi_2^p$。类 $\\mathcal{C}$ 是 $\\Pi_2^p$，它是 $\\mathrm{BPP}$ 的超集，但目前还不知道是否与它相等。不正确。\n\n类 $\\mathcal{C}$ 正是 $\\Pi_2^p$。", "answer": "$$\\boxed{B}$$", "id": "1462940"}]}