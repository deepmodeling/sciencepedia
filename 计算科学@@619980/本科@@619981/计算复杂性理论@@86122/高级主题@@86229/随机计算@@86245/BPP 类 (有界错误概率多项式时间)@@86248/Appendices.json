{"hands_on_practices": [{"introduction": "BPP 中“有界错误”的特性可以说是其最关键的特征。这不仅仅意味着错误率低于 $1/2$，更意味着我们可以通过重复执行（一个称为“放大”的过程）将错误率降低到任意小的值。这个练习 [@problem_id:1450962] 将这个抽象概念具体化，它要求你计算需要多少次重复，才能使一个算法的失败概率低于一个罕见的物理事件——例如宇宙射线导致的硬件错误。这为我们理解概率算法的稳健性提供了一个强有力的、可触摸的视角。", "problem": "一个复杂度类 BPP (Bounded-error Probabilistic Polynomial time，有界错误概率多项式时间) 中的算法被设计用来解决一个判定问题。对于任何给定的输入，它都有双边错误概率，这意味着它可能返回错误的答案（即当正确答案应为“否”时返回“是”，或反之），其概率至多为 $p=1/3$。\n\n为了提高该算法的可靠性，我们采用一种标准的放大技术：将该算法在同一个输入上运行 $k$ 次，并对结果进行汇总。对于本问题，我们定义，如果单次运行出错的次数至少是总运行次数 $k$ 的一半，则整个过程失败。\n\n你的任务是确定这种放大技术需要有多鲁棒，才能使其表现优于其运行硬件的物理限制。计算所需的最小整数重复次数 $k$，以确保算法的总体失败概率严格小于由随机高能粒子引起的硬件错误概率。假设在单次计算中发生此类硬件错误（例如，由宇宙射线引起的比特翻转）的概率为 $P_{\\text{cosmic}} = 2.5 \\times 10^{-15}$。\n\n为了方便您计算，我们提供以下形式的 Chernoff 界。设 $X_1, \\dots, X_k$ 为独立的指示随机变量，其中 $P(X_i=1)=p$。令 $X = \\sum_{i=1}^k X_i$ 为这些变量的和，$\\mu = E[X] = kp$ 为该和的期望值。对于任意 $\\delta  0$，$X$ 的值偏离其期望的概率由下式给出上界：\n$$P(X \\ge (1+\\delta)\\mu) \\le \\exp\\left(-\\frac{\\delta^2 \\mu}{3}\\right)$$\n\n请给出满足条件的最小整数 $k$ 作为您的答案。您可以使用以下数值近似值：$\\ln(10) \\approx 2.3026$ 和 $\\ln(2.5) \\approx 0.9163$。", "solution": "我们考虑对 BPP 算法进行 $k$ 次独立重复运行。设 $X_{i}$ 是第 $i$ 次运行出现不正确结果的指示变量，其中 $P(X_{i}=1)=p=\\frac{1}{3}$，并定义 $X=\\sum_{i=1}^{k}X_{i}$。那么，$X \\sim \\text{Binomial}(k,p)$ 且 $\\mu=E[X]=kp=\\frac{k}{3}$。根据定义，如果至少有一半的运行结果不正确，即发生事件 $\\{X \\ge \\frac{k}{2}\\}$，则整个过程失败。\n\n我们应用给定的 Chernoff 界。选择 $\\delta0$ 使得 $(1+\\delta)\\mu=\\frac{k}{2}$。代入 $\\mu=\\frac{k}{3}$ 可得\n$$\n(1+\\delta)\\frac{k}{3}=\\frac{k}{2}\\quad\\Rightarrow\\quad 1+\\delta=\\frac{3}{2}\\quad\\Rightarrow\\quad \\delta=\\frac{1}{2}.\n$$\nChernoff 界表明\n$$\nP\\!\\left(X \\ge (1+\\delta)\\mu\\right) \\le \\exp\\!\\left(-\\frac{\\delta^{2}\\mu}{3}\\right).\n$$\n将 $\\delta=\\frac{1}{2}$ 和 $\\mu=\\frac{k}{3}$ 代入，我们得到\n$$\nP\\!\\left(X \\ge \\frac{k}{2}\\right) \\le \\exp\\!\\left(-\\frac{\\left(\\frac{1}{2}\\right)^{2}\\cdot \\frac{k}{3}}{3}\\right)=\\exp\\!\\left(-\\frac{k}{36}\\right).\n$$\n\n我们要求算法的总体失败概率严格小于硬件错误概率 $P_{\\text{cosmic}}=2.5 \\times 10^{-15}$：\n$$\n\\exp\\!\\left(-\\frac{k}{36}\\right)  2.5 \\times 10^{-15}.\n$$\n对不等式两边取自然对数，然后解出 $k$，\n$$\n-\\frac{k}{36}  \\ln(2.5) + \\ln\\!\\left(10^{-15}\\right)=\\ln(2.5) - 15\\ln(10),\n$$\n$$\n\\frac{k}{36}  15\\ln(10) - \\ln(2.5),\n$$\n$$\nk  36\\bigl(15\\ln(10) - \\ln(2.5)\\bigr).\n$$\n使用提供的近似值 $\\ln(10)\\approx 2.3026$ 和 $\\ln(2.5)\\approx 0.9163$，\n$$\n15\\ln(10) - \\ln(2.5) \\approx 15\\cdot 2.3026 - 0.9163 = 34.539 - 0.9163 = 33.6227,\n$$\n$$\n36 \\cdot 33.6227 \\approx 1210.4172.\n$$\n由于不等式是严格的，满足条件的最小整数 $k$ 是\n$$\nk=1211.\n$$", "answer": "$$\\boxed{1211}$$", "id": "1450962"}, {"introduction": "当我们理解了单个 BPP 算法的工作原理后，一个自然而然的问题是：我们如何组合它们来解决更复杂的问题？这个实践 [@problem_id:1450946] 探讨了这个问题，它要求你研究如何判定两个都属于 BPP 的语言 $L_1$ 和 $L_2$ 的交集。通过这个练习，你不仅将看到 BPP 在交集运算下的封闭性——这是复杂度类的一个基本结构特性——还将发现管理组合后错误概率的精妙之处。", "problem": "在计算复杂性理论中，BPP类（代表“有界错误概率多项式时间”，Bounded-error Probabilistic Polynomial time）表示所有可以在多项式时间内由一台概率图灵机（PTM）解决，且错误概率最多为1/3的判定问题的集合。\n\n设 $L_1$ 和 $L_2$ 是两个语言，且它们都在BPP中。这意味着存在两台在多项式时间内运行的PTM，$M_1$ 和 $M_2$，对于任意给定的输入串 $x$ 满足以下条件：\n\n- 对于判定语言 $L_1$ 的机器 $M_1$：\n    - 如果 $x \\in L_1$，则 $M_1$ 接受的概率为 $\\Pr[M_1(x) = 1] \\ge 2/3$。\n    - 如果 $x \\notin L_1$，则 $M_1$ 接受的概率为 $\\Pr[M_1(x) = 1] \\le 1/3$。\n\n- 对于判定语言 $L_2$ 的机器 $M_2$：\n    - 如果 $x \\in L_2$，则 $M_2$ 接受的概率为 $\\Pr[M_2(x) = 1] \\ge 2/3$。\n    - 如果 $x \\notin L_2$，则 $M_2$ 接受的概率为 $\\Pr[M_2(x) = 1] \\le 1/3$。\n\n构造一台新的PTM，记为 $M_{int}$，用于判定交集语言 $L_{int} = L_1 \\cap L_2$。$M_{int}$ 对输入 $x$ 的处理过程如下：\n1. 运行 $M_1(x)$。\n2. 如果 $M_1(x)$ 输出 1 (接受)，则接着运行 $M_2(x)$ 并输出其结果。\n3. 如果 $M_1(x)$ 输出 0 (拒绝)，则立即输出 0。\n\n假设 $M_1$ 和 $M_2$ 做出的随机选择是统计独立的。对于任何输入 $x$，$M_{int}$ 的错误概率保证小于或等于 $\\epsilon$ 的最小 $\\epsilon$ 值是多少？\n\nA. 1/3\n\nB. 4/9\n\nC. 5/9\n\nD. 2/3\n\nE. 8/9", "solution": "设 $p_{1}=\\Pr[M_{1}(x)=1]$ 且 $p_{2}=\\Pr[M_{2}(x)=1]$。根据构造，$M_{\\text{int}}$ 接受 $x$ 当且仅当 $M_{1}$ 接受且随后 $M_{2}$ 也接受。在 $M_{1}$ 和 $M_{2}$ 的随机选择是独立的条件下，$M_{\\text{int}}$ 的接受概率为\n$$\n\\Pr[M_{\\text{int}}(x)=1]=\\Pr[M_{1}(x)=1]\\Pr[M_{2}(x)=1]=p_{1}p_{2}.\n$$\n因此，拒绝概率为 $1-p_{1}p_{2}$。\n\n首先考虑情况 $x\\in L_{1}\\cap L_{2}$。此时 $p_{1}\\ge \\frac{2}{3}$ 且 $p_{2}\\ge \\frac{2}{3}$。$M_{\\text{int}}$ 在此类 $x$ 上的错误是它输出 $0$ 的概率，即 $1-p_{1}p_{2}$。使用下界，\n$$\n\\Pr[\\text{error}\\mid x\\in L_{1}\\cap L_{2}]=1-p_{1}p_{2}\\le 1-\\left(\\frac{2}{3}\\right)\\left(\\frac{2}{3}\\right)=1-\\frac{4}{9}=\\frac{5}{9}.\n$$\n\n现在考虑 $x\\notin L_{1}\\cap L_{2}$。那么以下情况至少有一种成立。\n\n- 如果 $x\\notin L_{1}$，那么 $p_{1}\\le \\frac{1}{3}$，而 $p_{2}$ 受其是否属于 $L_{2}$ 的制约：如果 $x\\in L_{2}$，则 $p_{2}\\ge \\frac{2}{3}$（并且可以大至 $1$）；如果 $x\\notin L_{2}$，则 $p_{2}\\le \\frac{1}{3}$。在任何一种子情况下，\n$$\n\\Pr[\\text{error}]=\\Pr[M_{\\text{int}}(x)=1]=p_{1}p_{2}\\le \\max\\left\\{\\left(\\frac{1}{3}\\right)\\cdot 1,\\left(\\frac{1}{3}\\right)\\left(\\frac{1}{3}\\right)\\right\\}=\\frac{1}{3}.\n$$\n\n- 如果 $x\\in L_{1}$ 但 $x\\notin L_{2}$，那么 $p_{1}\\ge \\frac{2}{3}$ (可达 $1$) 且 $p_{2}\\le \\frac{1}{3}$，所以\n$$\n\\Pr[\\text{error}]=p_{1}p_{2}\\le 1\\cdot \\frac{1}{3}=\\frac{1}{3}.\n$$\n\n因此，对于所有 $x\\notin L_{1}\\cap L_{2}$，错误概率最多为 $\\frac{1}{3}$。\n\n综合所有输入的最坏情况，$M_{\\text{int}}$ 的错误概率由以下公式界定\n$$\n\\epsilon=\\max\\left\\{\\frac{5}{9},\\frac{1}{3}\\right\\}=\\frac{5}{9}.\n$$\n因此，对所有输入都保证成立的最小 $\\epsilon$ 是 $\\frac{5}{9}$，对应于选项 C。", "answer": "$$\\boxed{C}$$", "id": "1450946"}, {"introduction": "随机性似乎是一个强大的工具，但它总是必需的吗？这个问题 [@problem_id:1450965] 探讨了一个引人入胜的边界情况：如果一个概率算法只能使用非常有限的随机性，会发生什么？你将发现，如果一个算法只使用对数数量级的随机比特，即 $O(\\log n)$，我们就能设计出一个等价的确定性多项式时间算法来解决同样的问题。这种被称为“枚举去随机化“的强大技术，揭示了 P 和 BPP 这两个复杂度类之间的深刻联系。", "problem": "一家科技初创公司为他们称之为 `DYNAMIC-PATH-VALIDITY` 的判定问题开发了一种名为 `PathCheck` 的新颖概率算法。该问题旨在确定网络中的一条指定路径，在一组复杂的动态变化约束条件下，是否仍然有效。这些约束的确切性质是专有的，但 `PathCheck` 算法的性能特征是已知的。\n\n对于任何大小为 $n$ 的给定输入实例（编码了网络和路径），`PathCheck` 算法具有以下性质：\n1.  它总是在一个由多项式 $p(n) = n^4 + 100n^2$ 界定的时间内停止。\n2.  它精确使用 $k(n) = 10 \\log_2(n)$ 个随机比特来做出其判定。\n3.  该算法的双边错误概率最多为 $\\epsilon = 1/4$。也就是说，对于任何输入，`PathCheck` 返回错误答案的概率最多为 $1/4$。\n\n回顾以下复杂性类的定义：\n- **P (多项式时间)**：可由一个确定性算法在步骤数是输入大小 $n$ 的多项式函数的时间内解决的判定问题类。\n- **BPP (有界错误概率多项式时间)**：可由一个概率算法在多项式时间内解决的判定问题类，其中对于任何输入，该算法给出正确答案的概率至少为 $2/3$。常数 $2/3$ 可以被任何大于 $1/2$ 的常数替换，而不会改变该类。\n\n*仅*根据 `PathCheck` 算法的已知性质，关于 `DYNAMIC-PATH-VALIDITY` 问题的复杂性类，能得出的最强的确定性结论是什么？\n\nA. `DYNAMIC-PATH-VALIDITY` 属于 P。\n\nB. `DYNAMIC-PATH-VALIDITY` 属于 BPP，但没有足够的信息断定它属于 P。\n\nC. `DYNAMIC-PATH-VALIDITY` 属于 NP，但没有足够的信息断定它属于 BPP。\n\nD. `DYNAMIC-PATH-VALIDITY` 不属于 BPP，因为其错误概率 $1/4$ 不小于或等于 $1/3$。\n\nE. `PathCheck` 的性质不足以将 `DYNAMIC-PATH-VALIDITY` 归入任何比 EXP (指数时间) 更小的复杂性类中。", "solution": "给定一个针对输入大小为 $n$ 的概率算法 PathCheck，它具有以下性质：\n- 运行时间由多项式 $p(n) = n^{4} + 100 n^{2}$ 界定。\n- 精确使用 $k(n) = 10 \\log_{2}(n)$ 个随机比特。\n- 在任何输入上，双边错误概率最多为 $\\epsilon = \\frac{1}{4}$。\n\n首先，注意到 PathCheck 在大小为 $n$ 的输入上使用的随机比特串（种子）总数为\n$$\nS(n) = 2^{k(n)} = 2^{10 \\log_{2}(n)} = \\left(2^{\\log_{2}(n)}\\right)^{10} = n^{10}.\n$$\n对于任何固定的输入 $x$，错误概率界限意味着导致错误答案的种子数量（记作 $B(x)$）满足\n$$\n|B(x)| \\le \\epsilon \\cdot S(n) = \\frac{1}{4} n^{10}.\n$$\n因此，产生正确答案的种子数量（记作 $G(x)$）满足\n$$\n|G(x)| = S(n) - |B(x)| \\ge n^{10} - \\frac{1}{4} n^{10} = \\frac{3}{4} n^{10}  \\frac{1}{2} n^{10}.\n$$\n因此，对于任何输入 $x$，严格超过一半的种子会产生正确的答案。\n\n按如下方式为该判定问题构造一个确定性算法：枚举所有 $S(n) = n^{10}$ 个种子 $r \\in \\{0,1\\}^{k(n)}$，将随机性固定为 $r$ 并在输入 $x$ 上运行 PathCheck，然后取多数输出。这是可行的，因为大多数种子会产生正确的答案，所以多数票决的结果就是对 $x$ 的正确判定。\n\n这个确定性模拟的运行时间最多为\n$$\nT(n) \\le S(n) \\cdot p(n) = n^{10} \\left(n^{4} + 100 n^{2}\\right) = n^{14} + 100 n^{12},\n$$\n这是一个关于 $n$ 的多项式。因此，该问题存在一个确定性的多项式时间算法，这意味着该语言属于 P。\n\n虽然给定的性质也证明了它属于 BPP（因为正确率 $\\frac{3}{4} \\ge \\frac{2}{3}$ 并且运行时间是多项式的），但从仅使用 $O(\\log n)$ 个随机比特这一额外事实得出的最强确定性结论是，该问题属于 P，因为可以在多项式时间内穷举所有种子。因此，正确选项是 A。", "answer": "$$\\boxed{A}$$", "id": "1450965"}]}