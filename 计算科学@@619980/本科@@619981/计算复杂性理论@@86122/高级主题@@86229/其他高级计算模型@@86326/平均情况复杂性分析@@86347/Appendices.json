{"hands_on_practices": [{"introduction": "我们的第一个练习将为平均情况分析提供一个坚实的起点。我们将分析一个直接的网格搜索算法，以理解在所有可能结果等概率出现时如何计算期望成本。这个练习旨在通过一个简单、可视化的算法，巩固基本概率概念的应用 [@problem_id:1413197]。", "problem": "一个简单的图像处理算法被设计用于在方形数字图像中定位一个特定的“标记”像素。图像表示为一个 $n \\times n$ 的像素网格。该算法通过逐个扫描像素来搜索标记，从左上角（第1行，第1列）开始，沿着每一行从左到右进行，然后移动到下一行。一旦找到标记像素，搜索立即终止。\n\n假设对于任何给定的搜索操作，标记像素保证存在于图像中。此外，这个标记像素的位置在所有 $n^2$ 个可能的像素位置上是均匀分布的。\n\n搜索的成本定义为算法检查的像素总数。例如，如果标记位于第 $i$ 行和第 $j$ 列（其中索引从1开始），算法会检查前 $i-1$ 行中的所有像素，以及第 $i$ 行中的前 $j$ 个像素。\n\n确定该搜索算法的平均情况成本（即检查的像素数的期望值），并将其表示为图像维度 $n$ 的函数。", "solution": "设图像为一个 $n \\times n$ 的网格，且标记在所有 $n^{2}$ 个像素位置上均匀分布。行和列的索引从 $1$ 到 $n$。如果标记位于第 $i$ 行和第 $j$ 列，算法会检查前 $i-1$ 行的所有像素，然后检查第 $i$ 行的前 $j$ 个像素。因此，这种情况下的成本为\n$$\nC(i,j)=n(i-1)+j.\n$$\n由于每个位置 $(i,j)$ 出现的概率均为 $\\frac{1}{n^{2}}$，因此期望成本为\n$$\n\\mathbb{E}[C]=\\sum_{i=1}^{n}\\sum_{j=1}^{n}\\frac{1}{n^{2}}\\left(n(i-1)+j\\right).\n$$\n计算关于 $j$ 的内层求和：\n$$\n\\sum_{j=1}^{n}\\left(n(i-1)+j\\right)=n\\cdot n(i-1)+\\sum_{j=1}^{n}j=n^{2}(i-1)+\\frac{n(n+1)}{2}.\n$$\n现在对 $i$ 求和：\n$$\n\\sum_{i=1}^{n}\\left[n^{2}(i-1)+\\frac{n(n+1)}{2}\\right]\n= n^{2}\\sum_{i=1}^{n}(i-1)+n\\cdot\\frac{n(n+1)}{2}\n= n^{2}\\cdot\\frac{n(n-1)}{2}+\\frac{n^{2}(n+1)}{2}.\n$$\n因此，\n$$\n\\mathbb{E}[C]=\\frac{1}{n^{2}}\\left[\\frac{n^{3}(n-1)}{2}+\\frac{n^{2}(n+1)}{2}\\right]\n=\\frac{1}{2n^{2}}\\left(n^{4}+n^{2}\\right)=\\frac{n^{2}+1}{2}.\n$$\n这个结果等于从 $1$ 到 $n^{2}$ 的整数的平均值，这与将扫描视为在 $n^{2}$ 个等可能位置上进行线性搜索的观点是一致的。", "answer": "$$\\boxed{\\frac{n^{2}+1}{2}}$$", "id": "1413197"}, {"introduction": "在超越均匀分布之后，这个问题探讨了一个过程在每一步继续的概率都发生变化的场景。通过分析两个随机字符串的比较，我们将练习使用一种强大的工具——期望的线性性质。这个练习教授了一种通用的分析技巧，能够处理不依赖于均匀分布的复杂概率计算 [@problem_id:1413198]。", "problem": "一种简化的数据完整性校验算法用于比较接收到的二进制字符串$A$与本地存储的主字符串$B$。两个字符串的长度均为$n$。该算法通过从第一个位置（$i=1$）开始，顺序比较字符串的比特位，直到最后一个位置（$i=n$）。如果发现不匹配（即，在第一个索引$i$处，$A_i \\neq B_i$），过程立即终止。如果整个比较完成而没有任何不匹配，意味着字符串完全相同，则该过程也在第$n$次比较后终止。\n\n假设两个字符串都是随机生成的，其中每个字符串中的每个比特位都以$\\frac{1}{2}$的等概率独立地选择为'0'或'1'。\n\n确定该算法执行的比特位比较的平均次数。用一个关于$n$的闭式解析表达式来表示你的答案。", "solution": "设$C$为执行的比较次数。为$i \\in \\{1,\\dots,n\\}$定义指示变量$I_{i}$，$I_{i}=1$表示第$i$次比较被执行，$I_{i}=0$则表示未被执行。那么\n$$\nC=\\sum_{i=1}^{n} I_{i}.\n$$\n根据期望的线性性质，\n$$\n\\mathbb{E}[C]=\\sum_{i=1}^{n} \\mathbb{E}[I_{i}]=\\sum_{i=1}^{n} \\mathbb{P}(I_{i}=1).\n$$\n第$i$次比较被执行，当且仅当在前$i-1$个位置中没有不匹配。对于每个位置，这对比特位匹配的概率为$\\frac{1}{2}$，且各位置之间相互独立。因此\n$$\n\\mathbb{P}(I_{i}=1)=\\left(\\frac{1}{2}\\right)^{i-1}.\n$$\n所以，\n$$\n\\mathbb{E}[C]=\\sum_{i=1}^{n}\\left(\\frac{1}{2}\\right)^{i-1}=\\frac{1-\\left(\\frac{1}{2}\\right)^{n}}{1-\\frac{1}{2}}=2\\left(1-2^{-n}\\right)=2-2^{1-n}.\n$$\n这就是所求的关于$n$的闭式表达式。", "answer": "$$\\boxed{2-2^{1-n}}$$", "id": "1413198"}, {"introduction": "我们最后的实践问题将在计算背景下解决著名的“生日问题”，探讨随机序列中需要多久才会出现碰撞。这个练习介绍了另一种计算期望值的巧妙方法，尤其适用于分析随机停止时间的过程。它不仅展示了一种强大的期望计算技术，还将其与密码学等领域的实际问题联系起来 [@problem_id:1413201]。", "problem": "一个用于生成一批唯一加密随机数（nonce）的简化系统工作原理如下。该系统有一个包含 $n$ 个可能的随机数值的池，由整数集合 $\\{1, 2, \\dots, n\\}$ 表示。它通过从该集合中逐一抽取数值来生成一个随机数序列，每次抽取都是独立且均匀随机的（即有放回抽样）。\n\n该系统被设计为一旦生成一个在当前序列中已经出现过的随机数时就停止。这一事件被称为“碰撞”。\n\n令 $E_n$ 为在一个序列中生成的随机数的期望数量，*包括*导致碰撞的最后一个随机数。请确定 $E_n$ 作为 $n$ 的函数的解析表达式。", "solution": "令 $T$ 表示直到并包括第一次碰撞时所生成的随机数的数量。由于抽样是在 $\\{1,2,\\dots,n\\}$ 上的独立同分布均匀抽样（有放回），该过程在抽取的数值第一次与之前的值重复时停止。\n\n对于 $k \\in \\{0,1,\\dots,n\\}$，事件 $\\{T>k\\}$ 意味着前 $k$ 次抽取的值都各不相同。前 $k$ 次抽取的值都各不相同的概率可以通过乘以条件概率得到：\n$$\n\\mathbb{P}(T>k)=\\prod_{j=0}^{k-1}\\frac{n-j}{n}=\\frac{n(n-1)\\cdots(n-k+1)}{n^{k}}=\\frac{n^{\\underline{k}}}{n^{k}}=\\frac{n!}{(n-k)!\\,n^{k}}.\n$$\n对于 $k=n+1$，$\\mathbb{P}(T>k)=0$，因为不可能从一个大小为 $n$ 的集合中进行 $n+1$ 次不重复的抽取。\n\n使用正整数值随机变量的尾和公式，\n$$\nE_{n}=\\mathbb{E}[T]=\\sum_{k=0}^{\\infty}\\mathbb{P}(T>k)=\\sum_{k=0}^{n}\\mathbb{P}(T>k)=\\sum_{k=0}^{n}\\frac{n!}{(n-k)!\\,n^{k}}.\n$$\n这等于所求的生成随机数的期望数量，包括最后一个导致碰撞的随机数。", "answer": "$$\\boxed{\\sum_{k=0}^{n}\\frac{n!}{(n-k)!\\,n^{k}}}$$", "id": "1413201"}]}