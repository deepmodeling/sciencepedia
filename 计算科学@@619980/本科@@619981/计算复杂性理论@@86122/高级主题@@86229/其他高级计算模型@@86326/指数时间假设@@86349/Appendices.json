{"hands_on_practices": [{"introduction": "为了有效地运用指数时间假说（ETH），我们首先必须精确掌握其数学定义。本练习通过一个假想的3-SAT算法来检验你的理解。通过分析其运行时间 $O(2^{n/\\log n})$，你将直接面对 $2^{o(n)}$ 这个核心界限，并判断这一假想的突破是否会推翻ETH，这是掌握该假说的关键第一步。", "problem": "在计算复杂性理论中，可满足性问题（SAT）是理解高效计算极限的基石。\n\n3-可满足性问题（3-SAT）是一个特定版本，其要求判断一个给定的布尔公式——该公式为合取范式，且每个子句恰好有三个文字——是否可以通过对其变量进行某种真值赋值而变为真。\n\n关于解决SAT问题最坏情况复杂度的两个重要猜想是：\n1.  **指数时间假设（ETH）**：该假设断言，不存在能在 $O(2^{o(n)})$ 时间内解决具有 $n$ 个变量的3-SAT公式的算法。如果一个算法的时间复杂度 $T(n)$ 对于某个常数 $C$ 和某个函数 $f(n)$（其中 $\\lim_{n \\to \\infty} \\frac{f(n)}{n} = 0$）有上界 $C \\cdot 2^{f(n)}$，那么该算法就在 $O(2^{o(n)})$ 时间内运行。本质上，ETH假定存在某个基本常数 $\\delta > 0$，使得任何解决3-SAT的算法在最坏情况下都需要 $\\Omega(2^{\\delta n})$ 的时间。\n2.  **强指数时间假设（SETH）**：这是一个更强的假设，它蕴含了ETH。其关键推论之一是，对于任何常数 $\\epsilon > 0$，通用的布尔可满足性问题（CNF-SAT）无法在 $O(2^{(1-\\epsilon)n})$ 时间内解决。\n\n现在，假设一位理论计算机科学的研究者宣布了一项突破：一种新颖的算法，它可以在最坏情况下以 $O(2^{n/\\log_{2} n})$ 的时间正确解决任何具有 $n$ 个变量的3-SAT实例。\n\n假设这位研究者的声明在数学上是可靠且已获验证的，那么下列哪个陈述代表了最直接和确定的推论？\n\nA. 该声明意味着 $P = NP$。\n\nB. 该声明驳斥了指数时间假设。\n\nC. 该声明驳斥了强指数时间假设，但与指数时间假设相容。\n\nD. 该声明与指数时间假设和强指数时间假设都相容。\n\nE. 该声明证明了停机问题是可判定的。", "solution": "设所声称的解决具有 $n$ 个变量的3-SAT实例的最坏情况运行时间为\n$$\nT(n)=O\\!\\left(2^{\\,n/\\log_{2} n}\\right).\n$$\n定义 $f(n)=\\frac{n}{\\log_{2} n}$。那么\n$$\n\\frac{f(n)}{n}=\\frac{1}{\\log_{2} n}\\to 0 \\quad \\text{当 } n\\to \\infty \\text{ 时},\n$$\n所以 $f(n)=o(n)$。因此\n$$\nT(n)=O\\!\\left(2^{\\,o(n)}\\right).\n$$\n根据指数时间假设（ETH），不存在在 $O\\!\\left(2^{\\,o(n)}\\right)$ 时间内解决3-SAT的算法。因此，所声称的算法的存在直接与ETH相矛盾，所以ETH被驳斥了。\n\n由于强指数时间假设（SETH）蕴含ETH，如果ETH是错误的，那么SETH也不可能为真。因此，该声明也驳斥了SETH。在所提供的选项中，最直接和确定的陈述推论是ETH被驳斥。\n\n它并不意味着 $P=NP$，因为 $2^{n/\\log_{2} n}$ 是超多项式时间，并且它与停机问题的可判定性没有关系。", "answer": "$$\\boxed{B}$$", "id": "1456514"}, {"introduction": "在理解了ETH的基本定义后，一个常见的困惑点是：ETH的指数界限究竟依赖于哪个参数？本练习 [@problem_id:1456534] 提出了一个算法，其运行时间指数级地依赖于*子句*数量 $m$ 而非*变量*数量 $n$。你的任务是分析这是否与ETH相矛盾，从而迫使你区分不同的复杂度参数，并巩固对ETH特定关注变量数量这一事实的理解。", "problem": "3-可满足性 (3-SAT) 问题旨在判断一个给定的、以 3-合取范式 (3-CNF) 表达的布尔公式，对其变量是否存在一个可满足的真值赋值。一个公式是 3-CNF 形式的，如果它是一些子句的合取 (AND)，其中每个子句是恰好三个文字（一个变量或其否定）的析取 (OR)。\n\n指数时间假设 (ETH) 是计算复杂性理论中的一个猜想，它对解决 3-SAT 问题所需的最坏情况运行时间做出了陈述。具体来说，ETH 指出，存在一个常数 $\\delta > 0$，使得没有算法可以在 $O(2^{\\delta n})$ 时间内解决 3-SAT 问题，其中 $n$ 是公式中的变量数量。这通常被表述为：不存在一个解决 3-SAT 问题的算法，其运行时间为 $2^{o(n)} \\cdot \\text{poly}(L)$，其中 $n$ 是变量的数量，$L$ 是输入公式的长度。\n\n假设一位计算机科学家为 3-SAT 问题开发了一种新算法。他们证明，对于任何具有 $n$ 个变量和 $m$ 个子句的 3-SAT 实例，其算法都能在 $O(n^5 \\cdot 2^m)$ 的时间复杂度内正确确定可满足性。\n\n下列哪个陈述正确地分析了这种新算法与指数时间假设之间的关系？\n\nA. 该算法与 ETH 矛盾，因为任何用于 3-SAT 的算法，若其运行时间复杂度中含有指数项，便支持该假设。\n\nB. 该算法与 ETH 矛盾，因为对于某些实例，子句数 $m$ 可以是变量数 $n$ 的多项式，导致总运行时间是关于 $n$ 的指数级。\n\nC. 该算法不与 ETH 矛盾，因为在指数时间复杂度的背景下，多项式因子 $n^5$ 被认为是小的。\n\nD. 该算法不与 ETH 矛盾，因为指数时间假设是关于运行时间对变量数量的依赖性的陈述，而该算法的指数部分依赖于子句的数量。\n\nE. 该算法不与 ETH 矛盾，因为 ETH 仅适用于运行时间严格为 $O(c^n)$ 形式（其中 $c$ 为某个常数）的算法，而不考虑任何多项式因子或对其他参数的依赖。", "solution": "我们精确地重述相关的 ETH 表述：ETH 断言，不存在能在 $2^{o(n)} \\cdot \\text{poly}(L)$ 时间内解决具有 $n$ 个变量的 3-SAT 实例的算法，其中 $L$ 是输入长度。等价地（如问题中所述），ETH 通常被表述为存在一个常数 $\\delta>0$，使得没有算法能在所有实例上以 $O(2^{\\delta n})$ 的时间运行。\n\n所提出的算法的运行时间为\n$$\nT(n,m)=O\\!\\left(n^{5}\\cdot 2^{m}\\right),\n$$\n其中 $n$ 是变量数，$m$ 是子句数。对于一个 3-CNF 实例，输入长度 $L$ 满足 $L=\\Theta(n+m)$（取决于编码方式，可能相差对数因子）；在任何情况下都有 $m\\leq L$，因此当 $m=\\Theta(n)$ 时，$2^{m}$ 是输入规模的指数函数，并且至少与 $n$ 的某个指数函数一样大。\n\n要检查这是否与 ETH 矛盾，我们必须问该算法是否在所有实例上都能达到一个关于 $n$ 的次指数级（subexponential）的运行时间上界，即是否存在一个函数 $f(n)=o(n)$，使得对于所有具有 $n$ 个变量的实例，都有\n$$\nT(n,m) \\leq 2^{f(n)}\\cdot \\text{poly}(L).\n$$\n这是不成立的，因为对于许多自然的 3-CNF 公式族（例如，有界密度实例），我们有 $m=\\Theta(n)$。在这样的公式族上，\n$$\nT(n,m)=O\\!\\left(n^{5}\\cdot 2^{\\Theta(n)}\\right)=2^{\\Theta(n)}\\cdot \\text{poly}(n),\n$$\n这不是 $2^{o(n)}\\cdot \\text{poly}(L)$。因此，在最坏情况下，该算法不是关于 $n$ 的次指数级的，故不与 ETH 矛盾。此外，指数依赖关系是关于 $m$ 而非 $n$，这恰恰是它不与 ETH 冲突的原因；多项式因子 $n^{5}$ 与此结论无关。\n\n现在我们来评估各个选项：\n\n- A 是不正确的：存在指数项并不与 ETH 矛盾；ETH 排除的是过快（关于 $n$ 是次指数级）的算法，而不是指数级算法。\n- B 是不正确的：关于 $n$ 是指数级的并不与 ETH 矛盾；ETH 禁止的是 $2^{o(n)}$，而不是 $2^{\\Theta(n)}$。\n- C 的推理是不正确的：虽然结论是正确的，但其理由关注的是多项式因子 $n^{5}$，而这并非 ETH 的关键问题。\n- D 是正确的：ETH 关注的是对 $n$ 的依赖关系，而这里指数项依赖于 $m$；特别地，当 $m=\\Theta(n)$ 时，算法的运行时间为 $2^{\\Theta(n)}\\cdot \\text{poly}(n)$，这与 ETH 一致。\n- E 是不正确的：ETH 明确允许存在多项式因子，并且通常表述为排除 $2^{o(n)}\\cdot \\text{poly}(L)$ 算法。\n\n因此，正确选项是 D。", "answer": "$$\\boxed{D}$$", "id": "1456534"}, {"introduction": "ETH的真正威力在于它能够通过归约，为众多其他问题建立条件性下界。本练习 [@problem_id:1456504] 精确地模拟了这一过程，它涉及一个从3-SAT到一个新问题的假想归约。通过仔细分析两个问题输入规模之间的关系，你将练习一项基本技能：将基于ETH的3-SAT下界转换为对一个新问题的有意义的下界。", "problem": "两名计算复杂性理论家 Alice 和 Bob 正在研究一个名为“Stellar Alignment”的问题。一个 Stellar Alignment 实例的复杂度由一个单一的正整数参数 $N$ 来衡量。他们的讨论围绕指数时间假设（ETH），该假设断言存在一个普适常数 $\\delta > 0$，使得对于一个包含 $n$ 个变量的公式的 3-可满足性（3-SAT）问题，无法在最坏情况时间 $O(2^{\\delta n})$ 内解决。\n\nBob 声称取得了重大突破。他设计了一个多项式时间归约，可以将任何具有 $n$ 个变量的 3-SAT 实例转换为一个大小为 $N$ 的 Stellar Alignment 实例，其大小由关系式 $N = k \\cdot n^2 \\ln(n)$ 给出。此处，$k$ 是一个固定的正常数，$\\ln$ 表示自然对数。基于这个归约，Bob 断言，假设 ETH 为真，解决 Stellar Alignment 问题必须需要 $2^{\\Omega(\\sqrt{N})}$ 的时间。\n\nAlice 对他的结论表示怀疑，并决定重新评估该归约所带来的推论。以下哪个陈述对 Bob 的主张提供了正确的分析？\n\nA. Bob 是正确的。该归约足以证明 Stellar Alignment 的时间下界为 $2^{\\Omega(\\sqrt{N})}$。\n\nB. Bob 是错误的。他的归约只证明了 Stellar Alignment 是 NP-难的，这并不意味着任何特定的指数时间下界。\n\nC. Bob 是错误的。他的归约所隐含的时间下界是 $2^{\\Omega(\\sqrt{N \\ln N})}$。\n\nD. Bob 是错误的。他的归约所隐含的时间下界是 $2^{\\Omega(\\sqrt{N / \\ln N})}$。\n\nE. Bob 是错误的。他的归约所隐含的时间下界是 $2^{\\Omega(N^{1/3})}$。", "solution": "给定一个从具有 $n$ 个变量的 3-SAT 问题到 Stellar Alignment 问题的多项式时间归约，其大小为\n$$\nN = k n^{2} \\ln n,\n$$\n其中 $k > 0$ 是一个固定常数。在 ETH 假设下，存在一个常数 $\\delta > 0$，使得没有任何算法能在 $O\\!\\left(2^{\\delta n}\\right)$ 时间内解决 3-SAT。ETH 的一个标准逆否命题用法是：如果我们可以在从 3-SAT 归约后，以显著快于 $2^{\\Theta(n)}$ 的时间解决 Stellar Alignment，那么我们就会得到一个用于 3-SAT 的 $2^{o(n)}$ 时间算法，这将与 ETH 相矛盾。\n\n为了将 ETH 的时间下界从以 $n$ 为变量的函数转换为以 $N$ 为变量的函数，我们需要建立 $n$ 和 $N$ 之间的关系。对 $N = k n^{2} \\ln n$ 两边取对数，得到\n$$\n\\ln N = \\ln k + 2 \\ln n + \\ln \\ln n.\n$$\n由于 $\\ln \\ln n = o(\\ln n)$，因此有 $\\ln N = \\Theta(\\ln n)$，所以 $\\ln n = \\Theta(\\ln N)$。从 $N = k n^{2} \\ln n$ 我们得到\n$$\nn^{2} = \\frac{N}{k \\ln n} = \\Theta\\!\\left(\\frac{N}{\\ln N}\\right),\n$$\n因而\n$$\nn = \\Theta\\!\\left(\\sqrt{\\frac{N}{\\ln N}}\\right).\n$$\n\n现在，为了导出矛盾，假设 Stellar Alignment 可以在 $2^{o\\!\\left(\\sqrt{N / \\ln N}\\right)}$ 时间内解决。\n结合该归约，一个具有 $n$ 个变量的 3-SAT 实例（映射到大小为 $N = k n^{2} \\ln n$ 的实例）则可以在 $2^{o\\!\\left(\\sqrt{N / \\ln N}\\right)} = 2^{o(n)}$ 的时间内被解决，这里我们使用了 $n = \\Theta\\!\\left(\\sqrt{N / \\ln N}\\right)$。任何 $2^{o(n)}$ 时间的算法都与 ETH 相矛盾。因此，在 ETH 假设下，解决 Stellar Alignment 需要至少 $2^{\\Omega\\!\\left(\\sqrt{N / \\ln N}\\right)}$ 的时间。\n\n与选项比较，该归约的正确推论是选项 D。", "answer": "$$\\boxed{D}$$", "id": "1456504"}]}