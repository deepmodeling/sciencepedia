{"hands_on_practices": [{"introduction": "细粒度复杂性的一个核心实践是将一个新问题规约到一个已知的困难问题上。正交向量（Orthogonal Vectors, OV）问题是这种情况下的一个基石假设。本练习将指导你将一个来自生物信息学的实际场景——寻找不相交的基因集——建模为正交向量问题，从而让你亲身体验如何将集合操作语言转化为向量代数的语言。[@problem_id:1424387]", "problem": "在生物信息学领域，一项常见的任务是分析不同生物样本（例如，细胞类型、组织样本）之间的关系。一位研究人员正在研究一个由 $n$ 个不同样本组成的集合。对于每个样本，他们从一个包含 $d$ 个可能基因的大全集 $U = \\{g_1, g_2, \\dots, g_d\\}$ 中，确定了“活性”基因的集合。设样本 $i$ 的活性基因集合为 $S_i \\subseteq U$。研究人员假设每个样本至少有一个活性基因，即对于所有的 $i=1, \\dots, n$，$S_i$ 都是非空的。\n\n研究人员感兴趣的是，是否存在一对“遗传不相容”的样本 $(i, j)$（其中 $i \\neq j$），这意味着它们的活性基因集合不相交 ($S_i \\cap S_j = \\emptyset$)。为了高效地解决这个问题，他们决定将其建模为一个正交向量 (Orthogonal Vectors, OV) 问题的实例。正交向量问题是一个著名的计算问题，存在专门的算法来解决它。\n\n正交向量 (OV) 问题的定义如下：给定两个向量集合 $A = \\{a_1, \\dots, a_m\\}$ 和 $B = \\{b_1, \\dots, b_p\\}$，其中每个向量都在 $\\{0, 1\\}^d$ 中，判断是否存在索引 $i$ 和 $j$ 使得点积 $a_i \\cdot b_j = 0$。这里的点积是整数上的点积，即 $a_i \\cdot b_j = \\sum_{k=1}^d a_{ik} b_{jk}$。\n\n以下哪个方案描述了一个将寻找遗传不相容样本对问题正确且完备地归约到正交向量问题的方案？\n\nA. 对于每个集合 $S_i$，构造一个向量 $v_i \\in \\{0, 1\\}^d$，如果基因 $g_k \\in S_i$，则其第 $k$ 个分量为 1，否则为 0。将 OV 问题的两个输入集合都设为这个向量集合，即 $A=B=\\{v_1, \\dots, v_n\\}$。OV 问题的一个“是”答案意味着存在一对遗传不相容的样本。\n\nB. 对于每个集合 $S_i$，构造一个向量 $v_i \\in \\{0, 1\\}^d$，如果基因 $g_k \\in S_i$，则其第 $k$ 个分量为 0，否则为 1。将 OV 问题的两个输入集合都设为这个集合，即 $A=B=\\{v_1, \\dots, v_n\\}$。\n\nC. 假设 $n$ 是偶数。将样本分成两组：$G_1 = \\{S_1, \\dots, S_{n/2}\\}$ 和 $G_2 = \\{S_{n/2+1}, \\dots, S_n\\}$。对于每个集合 $S_i$，构造其特征向量 $v_i$（如果 $g_k \\in S_i$，则第 $k$ 个分量为 1，否则为 0）。将 OV 问题的输入设为 $A=\\{v_1, \\dots, v_{n/2}\\}$ 和 $B=\\{v_{n/2+1}, \\dots, v_n\\}$。\n\nD. 对于 $U$ 中的每个基因 $g_k$，构造一个向量 $u_k \\in \\{0, 1\\}^n$，如果基因 $g_k$ 在集合 $S_i$ 中，则其第 $i$ 个分量为 1，否则为 0。这将创建 $d$ 个维度为 $n$ 的向量。将 OV 问题的两个输入集合都设为这个集合，即 $A=B=\\{u_1, \\dots, u_d\\}$。", "solution": "给定 $n$ 个非空集合 $S_{1},\\dots,S_{n} \\subseteq U=\\{g_{1},\\dots,g_{d}\\}$，我们希望确定是否存在 $i \\neq j$ 使得 $S_{i} \\cap S_{j} = \\emptyset$。正交向量 (OV) 问题接收两个集合 $A,B \\subseteq \\{0,1\\}^{d}$，并询问是否存在 $a \\in A$ 和 $b \\in B$ 使得 $a \\cdot b = 0$，其中 $a \\cdot b = \\sum_{k=1}^{d} a_{k} b_{k}$。\n\n为了将集合不相交查询归约到 OV 问题，我们考虑特征向量映射：对于每个 $S_{i}$，定义 $v_{i} \\in \\{0,1\\}^{d}$，如果 $g_{k} \\in S_{i}$ 则 $v_{i,k} = 1$，否则 $v_{i,k} = 0$。那么对于任意的 $i,j$，\n$$\nv_{i} \\cdot v_{j} \\;=\\; \\sum_{k=1}^{d} \\mathbf{1}[g_{k} \\in S_{i}] \\,\\mathbf{1}[g_{k} \\in S_{j}] \\;=\\; |S_{i} \\cap S_{j}|.\n$$\n因此，\n$$\nS_{i} \\cap S_{j} = \\emptyset \\quad \\Longleftrightarrow \\quad v_{i} \\cdot v_{j} = 0.\n$$\n如果我们设置 $A=B=\\{v_{1},\\dots,v_{n}\\}$，任何 OV 问题的“是”实例都会展示存在 $i,j$ 使得 $v_{i} \\cdot v_{j} = 0$，根据等价关系，这得出 $S_{i} \\cap S_{j} = \\emptyset$。$i=j$ 的可能性不会导致假阳性，因为 $S_{i} \\neq \\emptyset$ 意味着 $v_{i} \\cdot v_{i} = |S_{i}| \\geq 1$，因此 $v_{i} \\cdot v_{i} \\neq 0$。反过来，如果存在 $i \\neq j$ 使得 $S_{i} \\cap S_{j} = \\emptyset$，那么 $v_{i} \\cdot v_{j} = 0$，并且在 $A=B$ 上的 OV 实例会回答“是”。这证实了方案 A 的可靠性 (soundness) 和完备性 (completeness)。\n\n现在评估其他选项：\n\n对于 B，该构造使用了补集指示符：如果 $g_{k} \\in S_{i}$ 则 $v_{i,k}=0$，否则 $v_{i,k}=1$。那么\n$$\nv_{i} \\cdot v_{j} \\;=\\; \\sum_{k=1}^{d} \\mathbf{1}[g_{k} \\notin S_{i}] \\,\\mathbf{1}[g_{k} \\notin S_{j}] \\;=\\; |U \\setminus (S_{i} \\cup S_{j})|.\n$$\n因此 $v_{i} \\cdot v_{j} = 0$ 当且仅当 $S_{i} \\cup S_{j} = U$，这与 $S_{i} \\cap S_{j} = \\emptyset$ 不等价。因此 B 是不正确的。\n\n对于 C，将样本任意分成两半，并将 $A$ 设为前半部分，$B$ 设为后半部分，这只能检测到跨组的不相交对。如果不相交对完全位于某一半内部，它将被错过。因此 C 是不完备的。\n\n对于 D，构造由基因索引的向量 $u_{k} \\in \\{0,1\\}^{n}$，其点积 $u_{k} \\cdot u_{\\ell}$ 等于基因 $g_{k}$ 和 $g_{\\ell}$ 同时处于活性状态的样本数量。那么，正交性就关系到在任何样本中都从未共同激活的基因对，这并不能回答是否存在两个具有不相交活性基因集的样本。因此 D 没有归约到预期的问题。\n\n因此，只有方案 A 正确且完备地将遗传不相容对问题归约到了 OV 问题。", "answer": "$$\\boxed{A}$$", "id": "1424387"}, {"introduction": "3SUM 假说断言，在一个集合中寻找和为零的三个数需要近乎二次的时间（$O(n^2)$），这一假说为许多几何和数据结构问题提供了条件时间下界。许多看起来与 3SUM 无关的问题，实际上也受到这个假说的约束。本练习将引导你通过一个巧妙的规约，证明寻找等差数列问题（Arithmetic Progression-3, AP3）至少和 3SUM 问题一样难，从而为 AP3 建立一个二次时间复杂度的条件性下界。[@problem_id:1424351]", "problem": "在计算复杂性理论中，3SUM 问题是计算几何及更广泛领域中一类问题的一个基础性困难问题。细粒度复杂性旨在理解此类问题的精确多项式时间复杂度。\n\n**3SUM 问题**的定义如下：给定一个包含 $n$ 个整数的集合 $S$，判断是否存在三个元素 $x, y, z \\in S$ 使得 $x+y+z=0$。广为接受的 **3SUM 猜想**指出，任何解决 3SUM 问题的算法在最坏情况下都需要 $\\Omega(n^2)$ 的时间。该猜想通常被扩展到 **3-list 3SUM 变体**：给定三个大小均为 $n$ 的整数集合 $X, Y, Z$，判断是否存在元素 $x \\in X, y \\in Y, z \\in Z$ 使得 $x+y+z=0$。这个变体也被猜测需要 $\\Omega(n^2)$ 的时间。\n\n考虑一个相关问题，我们称之为 **等差数列-3 (AP3) 问题**：给定一个包含 $m$ 个整数的集合 $A$，判断是否存在三个*不同*的元素 $a, b, c \\in A$ 构成一个等差数列。三个数构成等差数列的条件是，排序后，中间的项是另外两项的平均值。这等价于检查是否存在这三个不同元素 $(a,b,c)$ 的一个排列 $(p,q,r)$ 使得 $p+r=2q$。\n\n假设 3-list 3SUM 猜想为真，那么解决大小为 $m$ 的集合上的 AP3 问题的最紧可能最坏情况时间复杂度下界是多少？\n\nA. $\\Omega(m \\log m)$\nB. $\\Omega(m^{1.5})$\nC. $\\Omega(m^2)$\nD. $\\Omega(m^2 \\log m)$\nE. 该问题可在多项式时间内解决，但 3SUM 猜想并不意味着一个二次方下界。", "solution": "我们将 3-list 3SUM 问题归约到 AP3 问题，其输入大小仅有线性增长，开销为常数因子，这在 3-list 3SUM 猜想下意味着所声称的下界成立。\n\n从 3-list 3SUM 的一个任意实例开始：三个大小均为 $n$ 的整数集合 $X, Y, Z$，问题是是否存在 $x \\in X, y \\in Y, z \\in Z$ 使得\n$$\nx + y + z = 0.\n$$\n\n我们在线性时间内构造一个关于大小为 $m = \\Theta(n)$ 的单个集合 $A$ 的 AP3 实例，使得 $A$ 包含一个 3 项等差数列当且仅当原始的 3-list 3SUM 实例是一个 YES-实例。引入一个符号参数 $T$，其绝对值大于任何固定的输入值的有限线性组合（因为输入是有限的，所以这样的选择存在）。定义三个不相交的“层”\n$$\nB_{0} := \\{\\, 2x : x \\in X \\,\\}, \\quad B_{1} := \\{\\, 2T - y : y \\in Y \\,\\}, \\quad B_{2} := \\{\\, 4T + 2z : z \\in Z \\,\\},\n$$\n并设\n$$\nA := B_{0} \\cup B_{1} \\cup B_{2}.\n$$\n这个构造是线性时间的，且 $|A| = |B_{0}| + |B_{1}| + |B_{2}| = 3n = \\Theta(n)$，因此 $m = \\Theta(n)$。\n\n完备性：如果存在一个解 $(x,y,z)$ 满足 $x + y + z = 0$，选取 $a = 2x \\in B_{0}$，$b = 2T - y \\in B_{1}$，$c = 4T + 2z \\in B_{2}$。那么\n$$\na + c = 2x + (4T + 2z) = 4T + 2(x + z) = 4T - 2y = 2(2T - y) = 2b,\n$$\n所以 $(a,b,c)$ 在 $A$ 中构成一个 3 项等差数列。\n\n可靠性与分层隔离：由于 $B_{0}$ 中元素的量级为 $\\Theta(1)$，$B_{1}$ 中的元素以 $2T$ 为中心，$B_{2}$ 中的元素以 $4T$ 为中心，并且 $T$ 的选择使其远大于任何固定的输入值的线性组合，因此任何混合了不同层元素的 3 项等差数列，其最小的元素必然来自 $B_{0}$，中间的元素来自 $B_{1}$，最大的元素来自 $B_{2}$。此外，对于这样一个三元组 $(a,b,c) \\in B_{0} \\times B_{1} \\times B_{2}$，等差数列的条件迫使\n$$\na + c = 2b \\;\\;\\Longleftrightarrow\\;\\; 2x + (4T + 2z) = 2(2T - y) \\;\\;\\Longleftrightarrow\\;\\; x + y + z = 0.\n$$\n因此，$A$ 包含一个跨层的 3 项等差数列，当且仅当原始的 3-list 3SUM 实例是一个 YES-实例。\n\n这个归约是线性时间和线性大小的。因此，如果对 $m$ 个数的 AP3 问题能以 $o(m^2)$ 时间解决，那么我们就能以 $o(n^2)$ 时间解决 $n = \\Theta(m)$ 个输入的 3-list 3SUM 问题，这与 3-list 3SUM 猜想相矛盾。由于该猜想断言了一个二次方的下界（没有任何超线性的对数因子），由此得出的最紧下界是\n$$\n\\Omega(m^{2}).\n$$\n\n在给定的选项中，这对应于选项 C。", "answer": "$$\\boxed{C}$$", "id": "1424351"}, {"introduction": "理解一个困难性假说的适用边界和其本身同样重要。全局最短路径（All-Pairs Shortest Path, APSP）假说猜想，在带权图中计算所有点对之间的最短路径需要近乎立方（$O(n^3)$）的时间。然而，这个“立方时间魔咒”在某些特殊情况下可以被打破。本练习将探讨为什么在无权图上的 APSP 问题不受该假说的限制，并存在真正意义上的亚立方时间算法，这揭示了问题本身的结构对算法复杂度的深刻影响。[@problem_id:1424347]", "problem": "在计算复杂性理论中，所有点对最短路径（APSP）问题要求计算一个给定图中每对顶点之间的最短路径距离。在精细化复杂性领域，一个主要的开放问题是，用于解决APSP的标准立方时间算法（例如 Floyd-Warshall 算法）是否是最优的。APSP 假说推测，对于一个具有 $n$ 个顶点和任意实数值边权重的有向图，任何解决 APSP 问题的算法都需要 $\\Omega(n^{3-\\delta})$ 的时间（对于任意 $\\delta > 0$），这意味着不存在真正意义上的亚立方时间算法（例如 $O(n^{2.99})$）。\n\n然而，这个条件性下界并不适用于*无权*有向图的特殊情况。对于这种特殊情况，存在着可被证明在真正意义上的亚立方时间内运行的算法。下列哪个陈述为这一事实提供了最准确和最根本的原因？\n\nA. 该问题可以通过从每个顶点运行广度优先搜索（BFS）来解决。由于 BFS 是一种线性时间算法，总时间远小于立方级。\nB. 在无权图中寻找最短路径的问题可以规约到一系列矩阵乘法，而矩阵乘法可以使用高级算法在真正意义上的亚立方时间内解决。\nC. 对于无权图，APSP 问题等价于寻找连通分量，而后者可以在近线性时间内解决。\nD. APSP 假说仅适用于包含负权环的图，而这一条件在无权图中是不可能出现的。\nE. 所有的无权有向图也都是有向无环图（DAGs），而在 DAG 上可以更高效地解决 APSP 问题。", "solution": "这个问题的核心在于理解在带权图与无权图上解决所有点对最短路径（APSP）问题时的算法差异。标准的 APSP 假说提出了一个近立方时间下界，它建立在处理任意实数值权重的困难性之上。我们需要找到无权图的哪种特殊性质使得这个立方时间壁垒得以被打破。\n\n让我们来分析一个有 $n$ 个顶点的无权有向图。两个顶点（比如 $u$ 和 $v$）之间的最短路径，就是从 $u$ 到 $v$ 的路径上包含的最少边数。\n\n关键的洞见在于通过线性代数的视角来看待图的可达性问题。设 $A$ 为图的邻接矩阵，其中如果从顶点 $i$ 到顶点 $j$ 有一条边，则 $A_{ij} = 1$，否则 $A_{ij} = 0$。为了求解最短路径，我们同时设定对所有 $i$ 都有 $A_{ii} = 1$，表示从一个顶点到其自身存在一条长度为 0 的路径。\n\n现在，考虑使用标准矩阵乘法计算的矩阵乘积 $A^2 = A \\times A$。一个元素 $(A^2)_{ij}$ 由 $\\sum_{k=1}^n A_{ik} A_{kj}$ 给出。这个和大于零当且仅当存在至少一个顶点 $k$，使得从 $i$ 到 $k$ 有边，且从 $k$ 到 $j$ 有边。这对应于一条从 $i$ 到 $j$ 的长度为 2 的路径。更一般地，矩阵 $A^k$ 中的元素 $(A^k)_{ij}$ 非零，当且仅当从顶点 $i$ 到顶点 $j$ 存在一条长度至多为 $k$ 的路径。（如果我们使用布尔矩阵乘法，这个结论成立；如果使用标准整数乘法，它计算的是这类路径的数量）。\n\n因此，从 $i$ 到 $j$ 的最短路径距离，记为 $d(i, j)$，就是使得 $(A^k)_{ij} > 0$ 的最小整数 $k$。由于图中任何简单路径的长度最多为 $n-1$，我们只需要检查 $A$ 的幂直到 $A^{n-1}$。\n\n一种朴素的方法是通过重复乘以 $A$ 来计算 $A^2, A^3, \\dots, A^{n-1}$。这大约需要 $n-2$ 次矩阵乘法。然而，使用重复平方的技术，我们可以大大提高效率。我们可以计算矩阵序列 $A^2, A^4, A^8, \\dots, A^{2^{\\lceil \\log_2 n \\rceil}}$。这仅需要 $O(\\log n)$ 次矩阵乘法。通过组合这些矩阵的幂，我们可以确定最短路径距离。例如，长度至多为 $k$ 的路径矩阵可以通过组合 $A$ 的那些指数在二进制表示下加和为 $k$ 的适当的幂来构成。一种更复杂的方法（Zwick 算法）就使用这些矩阵乘法的思想来解决 APSP。\n\n关键点在于矩阵乘法的复杂度。虽然标准的中学算法乘以两个 $n \\times n$ 矩阵需要 $O(n^3)$ 的时间，但存在更快的先进算法。第一个此类算法是 Strassen 算法，其复杂度约为 $O(n^{2.81})$。目前矩阵乘法指数（记为 $\\omega$）的记录约为 $\\omega \\approx 2.37286$。\n\n因此，在无权图上解决 APSP 问题可以在 $O(n^\\omega \\log n)$ 时间内完成。由于 $\\omega  3$，这个复杂度是真正意义上的亚立方级。例如，使用 Strassen 算法，运行时间为 $O(n^{2.81} \\log n)$，这比 $O(n^3)$ 要快。这打破了立方时间壁垒，并解释了为什么为一般带权图制定的 APSP 假说不适用于无权图的情况。\n\n现在我们来评估给出的选项：\n\nA. 从每个顶点运行 BFS 是一种有效的算法。单次 BFS 需要 $O(V+E) = O(n+m)$ 的时间，其中 $m$ 是边的数量。对所有 $n$ 个顶点重复此过程，总复杂度为 $O(n(n+m))$。对于稠密图，其中 $m = O(n^2)$，复杂度变为 $O(n^3)$，这并非真正意义上的亚立方算法。对于稀疏图，它可能更好（例如，如果 $m=O(n)$，则为 $O(n^2)$），但它并未对所有无权图（特别是稠密图）提供亚立方算法。所以，这不是对通用亚立方级突破的最佳解释。\n\nB. 这个陈述正确地指出了，将问题规约到快速矩阵乘法是存在真正亚立方算法的根本原因。如上所述，这种方法得出的时间复杂度为 $O(n^\\omega \\log n)$，这个复杂度对于稠密图也是亚立方级的。\n\nC. 这是不正确的。APSP 是要找出所有点对之间的距离，而不仅仅是确定它们是否在同一个连通分量中。寻找连通分量是一个简单得多的问题。\n\nD. 这是不正确的。APSP 假说通常是针对任意实数值权重陈述的，并且不要求存在负权环。主要的挑战来自于处理路径权重的加法结构，而用于无权图的矩阵乘法技巧绕过了这个问题。在一般情况下，即使是仅包含非负权重的图上的问题，仍被认为需要近立方时间。\n\nE. 这是不正确的。一个无权有向图可以包含环。一条从 $i$ 到 $j$ 的有向边和另一条从 $j$ 到 $i$ 的有向边就形成了一个长度为 2 的环。只有当图是 DAG 时，我们才能使用拓扑排序在 $O(n(n+m))$ 时间内解决 APSP，但仅凭无权这一性质并不能保证图是 DAG。\n\n因此，最准确和最根本的原因是规约到快速矩阵乘法。", "answer": "$$\\boxed{B}$$", "id": "1424347"}]}