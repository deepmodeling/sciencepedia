{"hands_on_practices": [{"introduction": "理解NP-完备性通常需要掌握问题之间的归约。这个练习提供了一个具体、分步的实践，将著名的布尔可满足性问题（3-SAT）归约到团问题（CLIQUE），这是计算复杂性理论的基石。通过亲手构建图，你将直观地理解一个逻辑公式的可满足赋值如何对应于图中的一个大团。", "problem": "在计算复杂性理论中，许多问题通过将它们转换为其他问题来进行研究。考虑一个从布尔可满足性问题到图问题的标准转换。一个布尔公式如果是一系列子句的合取（AND，表示为 $\\land$），其中每个子句是恰好三个文字的析取（OR，表示为 $\\lor$），则称该公式为 3-合取范式 (3-CNF)。一个文字可以是一个变量（例如，$x_i$）或其否定（例如，$\\neg x_i$）。\n\n给定以下包含三个变量（$x_1, x_2, x_3$）和三个子句的 3-CNF 公式 $\\phi$：\n$$ \\phi = (x_1 \\lor \\neg x_2 \\lor x_3) \\land (\\neg x_1 \\lor x_2 \\lor \\neg x_3) \\land (x_1 \\lor x_2 \\lor \\neg x_3) $$\n\n根据以下规则从公式 $\\phi$ 构造一个图 $G=(V, E)$：\n1.  顶点集 $V$ 是通过为每个子句中的每个文字创建一个顶点而形成的。一个顶点由一个对 $(l, i)$ 表示，其中 $l$ 是文字，$i \\in \\{1, 2, 3\\}$ 是包含它的子句的索引。例如，第一个子句中的文字 $\\neg x_2$ 对应于顶点 $(\\neg x_2, 1)$。\n2.  当且仅当同时满足以下两个条件时，在两个顶点 $(l, i)$ 和 $(l', j)$ 之间连接一条边，由此形成边集 $E$：\n    a. 顶点来自不同的子句（即，$i \\neq j$）。\n    b. 文字不相互矛盾（即，$l$ 不是 $l'$ 的否定）。\n\n在图中，一个 $k$-团 (k-clique) 是一个包含 $k$ 个顶点的集合，其中集合内的任意两个不同顶点都是相邻的（由一条边连接）。在根据公式 $\\phi$ 构造的图 $G$ 中，以下哪个顶点集合构成一个 3-团？\n\nA. $\\{(x_1, 1), (\\neg x_1, 2), (x_2, 3)\\}$\n\nB. $\\{(x_1, 1), (x_2, 2), (\\neg x_3, 3)\\}$\n\nC. $\\{(x_1, 1), (\\neg x_2, 1), (x_2, 3)\\}$\n\nD. $\\{(\\neg x_2, 1), (x_2, 2), (\\neg x_3, 2)\\}$\n\nE. $\\{(x_3, 1), (\\neg x_3, 2), (x_1, 3)\\}", "solution": "问题要求我们确定，在由特定 3-CNF 公式 $\\phi$ 构造的图中，给定的三顶点集合中哪一个构成 3-团。\n\n公式为 $\\phi = (x_1 \\lor \\neg x_2 \\lor x_3) \\land (\\neg x_1 \\lor x_2 \\lor \\neg x_3) \\land (x_1 \\lor x_2 \\lor \\neg x_3)$。\n子句 1: $(x_1 \\lor \\neg x_2 \\lor x_3)$\n子句 2: $(\\neg x_1 \\lor x_2 \\lor \\neg x_3)$\n子句 3: $(x_1 \\lor x_2 \\lor \\neg x_3)$\n\n图的顶点对应于这些子句中的文字。一个顶点表示为 $(l, i)$，其中 $l$ 是文字，$i$ 是子句编号。\n顶点如下：\n来自子句 1: $(x_1, 1), (\\neg x_2, 1), (x_3, 1)$\n来自子句 2: $(\\neg x_1, 2), (x_2, 2), (\\neg x_3, 2)$\n来自子句 3: $(x_1, 3), (x_2, 3), (\\neg x_3, 3)$\n\n两个顶点 $(l, i)$ 和 $(l', j)$ 之间存在一条边，当且仅当：\n1.  它们位于不同的子句中：$i \\neq j$。\n2.  它们不相互矛盾：$l$ 不是 $l'$ 的否定。\n\n一个包含三个顶点 $\\{v_1, v_2, v_3\\}$ 的集合构成一个 3-团，如果 $v_1$ 和 $v_2$ 之间、$v_1$ 和 $v_3$ 之间以及 $v_2$ 和 $v_3$ 之间都存在边。我们现在逐一检查每个选项。\n\n**A. $\\{(x_1, 1), (\\neg x_1, 2), (x_2, 3)\\}$**\n让我们检查顶点对 $(x_1, 1)$ 和 $(\\neg x_1, 2)$。\n1.  它们是否在不同的子句中？是的，$1 \\neq 2$。\n2.  它们是否相互矛盾？文字 $x_1$ 和文字 $\\neg x_1$ 互为否定。所以，是的，它们是相互矛盾的。\n由于不满足边的第二个条件，顶点 $(x_1, 1)$ 和 $(\\neg x_1, 2)$ 之间没有边。因此，这个顶点集合不构成 3-团。\n\n**B. $\\{(x_1, 1), (x_2, 2), (\\neg x_3, 3)\\}$**\n我们必须检查所有三对顶点。\n1.  顶点对： $(x_1, 1)$ 和 $(x_2, 2)$\n    a. 不同子句？是的，$1 \\neq 2$。\n    b. 相互矛盾？$x_1$ 和 $x_2$ 不互为否定。不矛盾。\n    $(x_1, 1)$ 和 $(x_2, 2)$ 之间存在一条边。\n2.  顶点对： $(x_1, 1)$ 和 $(\\neg x_3, 3)$\n    a. 不同子句？是的，$1 \\neq 3$。\n    b. 相互矛盾？$x_1$ 和 $\\neg x_3$ 不互为否定。不矛盾。\n    $(x_1, 1)$ 和 $(\\neg x_3, 3)$ 之间存在一条边。\n3.  顶点对： $(x_2, 2)$ 和 $(\\neg x_3, 3)$\n    a. 不同子句？是的，$2 \\neq 3$。\n    b. 相互矛盾？$x_2$ 和 $\\neg x_3$ 不互为否定。不矛盾。\n    $(x_2, 2)$ 和 $(\\neg x_3, 3)$ 之间存在一条边。\n由于该集合中每对顶点之间都存在边，因此该集合构成一个 3-团。\n\n**C. $\\{(x_1, 1), (\\neg x_2, 1), (x_2, 3)\\}$**\n让我们检查顶点对 $(x_1, 1)$ 和 $(\\neg x_2, 1)$。\n1.  它们是否在不同的子句中？不，它们都在子句 1 中（$1 = 1$）。\n由于不满足边的第一个条件，顶点 $(x_1, 1)$ 和 $(\\neg x_2, 1)$ 之间没有边。因此，这个顶点集合不构成 3-团。\n\n**D. $\\{(\\neg x_2, 1), (x_2, 2), (\\neg x_3, 2)\\}$**\n让我们检查顶点对 $(x_2, 2)$ 和 $(\\neg x_3, 2)$。\n1.  它们是否在不同的子句中？不，它们都在子句 2 中（$2 = 2$）。\n由于不满足边的第一个条件，顶点 $(x_2, 2)$ 和 $(\\neg x_3, 2)$ 之间没有边。因此，这个顶点集合不构成 3-团。\n\n**E. $\\{(x_3, 1), (\\neg x_3, 2), (x_1, 3)\\}$**\n让我们检查顶点对 $(x_3, 1)$ 和 $(\\neg x_3, 2)$。\n1.  它们是否在不同的子句中？是的，$1 \\neq 2$。\n2.  它们是否相互矛盾？文字 $x_3$ 和文字 $\\neg x_3$ 互为否定。所以，是的，它们是相互矛盾的。\n由于不满足边的第二个条件，顶点 $(x_3, 1)$ 和 $(\\neg x_3, 2)$ 之间没有边。因此，这个顶点集合不构成 3-团。\n\n根据以上分析，只有选项 B 中的顶点集合满足 3-团的条件。", "answer": "$$\\boxed{B}$$", "id": "1427960"}, {"introduction": "在确定了找到最大团是困难的之后，一个自然的问题是为什么简单的贪心算法会失败。本练习通过区分“极大团”（maximal clique）和“最大团”（maximum clique）来探讨一个根本原因。你将构建一个图族，其中很容易找到一个非常小的极大团，尽管最大团要大得多，这突显了近似算法面临的一个关键挑战。", "problem": "在图论中，**团**（clique）是无向图中的一个顶点子集，其中该子集内的任意两个不同顶点都由一条边相连。如果一个团不能通过从图中添加任何其他顶点来扩展，则称其为**极大团**（maximal）；也就是说，在团之外不存在与团中每个顶点都相连的顶点。**最大团**（maximum clique）是图中可能的最大尺寸的团。\n\n考虑一个图族，对于每个整数 $k \\ge 3$，记为 $G_k$。每个图 $G_k$ 是由两个更简单的图的不交并构成的：\n1. 一个具有 $k$ 个顶点的完全图 $K_k$。\n2. 一个具有 3 个顶点的路径图 $P_3$。\n\n不交并意味着两个分支（$K_k$ 和 $P_3$）共存于 $G_k$ 中，但它们之间没有边相连。因此，$G_k$ 中的总顶点数为 $n = k+3$。\n\n这种构造展示了寻找最大团的一个关键挑战。虽然 $G_k$ 中最大团的大小随总顶点数 $n$ 线性增长，但有可能找到非常小的极大团。\n\n对于这个图族中的任何图 $G_k$（其中 $k \\ge 3$），最小的可能极大团的大小是多少？", "solution": "我们分析在 $k\\ge 3$ 的不交并 $G_{k}=K_{k}\\sqcup P_{3}$ 中的极大团。\n\n首先，在不交并中，任何包含来自两个分支的顶点的子集，如果其大小至少为 $2$，就不可能是一个团，因为来自不同分支的顶点是不相邻的。因此，任何大小至少为 $2$ 的团必须完全包含在单个分支内。单个顶点组成的集合（单点集）总是一个团，但只有当该顶点没有邻点时，它才是极大的。\n\n在 $G_{k}$ 中，每个顶点都至少有一个邻点：$K_{k}$ 中的顶点度为 $k-1\\ge 2$，$P_{3}$ 中的顶点度为 $1$ 或 $2$。因此，任何单点集构成的团都可以通过添加一个邻点来扩展，所以没有单点集是极大团。\n\n因此，$G_{k}$ 的极大团恰好是其各个分支内的极大团：\n- 在 $K_{k}$ 中，由于 $K_{k}$是完全图，任何顶点的真子集都可以被扩展；因此，唯一的极大团是整个 $K_{k}$，其大小为 $k$。\n- 在 $P_{3}$（一条路径 $v_{1}-v_{2}-v_{3}$）中，团是单点集和两条边 $\\{v_{1},v_{2}\\}$ 与 $\\{v_{2},v_{3}\\}$。这两条边是极大团，因为添加第三个顶点会形成一个没有边的点对；而单点集不是极大团，因为它们可以扩展为一条包含该点的边。因此，$P_{3}$ 中的极大团大小为 $2$。\n\n因此，$G_{k}$ 中的极大团的大小为 $k$（来自 $K_{k}$）和 $2$（来自 $P_{3}$）。所以，对于每个 $k\\ge 3$，$G_{k}$ 中最小的可能极大团的大小为 $2$。", "answer": "$$\\boxed{2}$$", "id": "1427989"}, {"introduction": "这个练习深入探讨了不可近似性的核心，探索我们如何能从计算困难的问题中提取有用的信息。你将使用一个假设的“间隙检测器”预言机，它能区分拥有非常大团的图和只有很小团的图。你的任务是设计一个算法，利用这个预言机不仅去检测，而且实际地“构造”出一个可证明的大团，这展示了在近似问题中判定问题和搜索问题之间强大的相互作用。", "problem": "你的任务是分析一个大型通信网络，该网络可以建模为一个简单无向图 $G=(V, E)$。该网络中的一个关键功能单元是“处理核心”，它对应于图中的一个团。团是一个顶点子集，其中任意两个不同的顶点都由一条边相连。最大的此类核心的大小称为图的团数，记作 $\\omega(G)$。\n\n为了辅助你的分析，你可以使用一个特殊的子程序 `CoreDetector(H, k)`，它作用于一个图 $H$ 和一个整数 $k$。`CoreDetector` 基于一种间隙检测原理构建；只有当其输入 $(H, k)$ 满足一个“间隙承诺”时，才能保证其正确工作。该承诺指的是，输入图的团数 $\\omega(H)$ 要么很大，要么很小，但不能介于两者之间。具体来说，对于一个给定的松弛参数 $s>1$，该承诺是要么 $\\omega(H) \\ge k$，要么 $\\omega(H) < k/s$。\n\n你所拥有的 `CoreDetector` 使用的松弛参数为 $s=2$。其行为如下：\n- 如果输入 $(H, k)$ 满足承诺 $\\omega(H) \\ge k$，检测器保证返回 `YES`。\n- 如果输入 $(H, k)$ 满足承诺 $\\omega(H) < k/2$，检测器保证返回 `NO`。\n- 如果输入不满足承诺，即 $k/2 \\le \\omega(H) < k$，检测器的行为是未定义的，其输出是不可靠的。\n\n你正在使用以下算法分析一个特定的大图 $G$，以寻找一个相当大的团：\n\n**算法：Find-Approx-Core**\n\n**阶段 1：估计核心大小**\n1.  找到最大的、2的幂次的整数 $k_{est}$（即，对于某个整数 $j \\ge 0$，$k_{est} = 2^j$），使得 `CoreDetector(G, k_{est})` 返回 `YES`。如果不存在这样的值，算法返回一个空集。\n\n**阶段 2：重构核心**\n1.  初始化一个空顶点集 $C = \\emptyset$。\n2.  初始化一个候选顶点集 $V_{cand} = V$。\n3.  按照一个固定的、任意的顺序遍历图的顶点 $v_1, v_2, \\dots, v_n$。\n4.  对于每个顶点 $v_i$：\n    a. 如果 $v_i$ 在当前的候选集 $V_{cand}$ 中：\n        i. 构建一个新的临时候选集 $V'_{cand} = V_{cand} \\cap N(v_i)$，其中 $N(v_i)$ 是原始图 $G$ 中顶点 $v_i$ 的邻居集合。\n        ii. 构建一个测试图 $H_{test}$，它是图 $G$ 由 $V'_{cand}$ 中的顶点诱导的子图。\n        iii. 调用检测器：`verdict = CoreDetector(H_{test}, k_{est})`。\n        iv. 如果 `verdict` 为 `YES`：\n            - 将顶点 $v_i$ 添加到团中：$C \\leftarrow C \\cup \\{v_i\\}$。\n            - 更新主候选集：$V_{cand} \\leftarrow V'_{cand}$。\n\n遍历所有顶点后，该算法返回集合 $C$。设 $\\omega(G)$ 是图 $G$ 中最大团的真实大小。假设 $\\omega(G)$ 很大，所描述的算法保证能找到一个达到某个最小大小的团 $C$。这个有保证的 $C$ 的最小大小相对于 $\\omega(G)$ 是多少？\n\nA. $\\frac{\\omega(G)}{2}$\nB. $\\frac{\\omega(G)}{4}$\nC. $\\frac{\\omega(G)}{8}$\nD. $\\frac{\\omega(G)}{16}$", "solution": "设 $\\omega(G)=t$。松弛参数 $s=2$ 的检测器有以下保证：\n- 如果 $\\omega(H)\\ge k$，那么 CoreDetector$(H,k)$ 返回 YES。\n- 如果 $\\omega(H)<k/2$，那么 CoreDetector$(H,k)$ 返回 NO。\n\n在阶段 1，算法选取了最大的、2的幂次的 $k_{\\text{est}}$，使得 CoreDetector$(G,k_{\\text{est}})$ 返回 YES。\n从 CoreDetector$(G,k_{\\text{est}})$ 返回 YES，我们可以推断 $\\omega(G) \\not k_{\\text{est}}/2$，因此 $t \\ge k_{\\text{est}}/2$。\n从 $k_{\\text{est}}$ 的最大性可知，对 $2k_{\\text{est}}$ 的调用会返回 NO（或者因为太大而未被调用）。一个 NO 的结果意味着 $\\omega(G) \\not\\ge 2k_{\\text{est}}$，因此 $t  2k_{\\text{est}}$。\n综合起来，我们得到了关于 $t$ 的界限：$k_{\\text{est}}/2 \\le t  2k_{\\text{est}}$。这等价于 $t/2  k_{\\text{est}} \\le 2t$。\n\n现在考虑阶段 2。该算法通过迭代向一个初始为空的集合 $C$ 添加顶点来构造一个团。一个关键的（尽管不明显的）结论是，该算法最终返回的团 $C$ 的大小至少为 $k_{\\text{est}}/2$。这个结论源于一个矛盾论证：如果算法返回一个大小小于 $k_{\\text{est}}/2$ 的团，那么利用原图中存在一个大小为 $t \\ge k_{\\text{est}}/2$ 的团这一事实，可以证明在算法的某个步骤中，一个本应被添加到 $C$ 的顶点被错误地拒绝了。这是一个标准的“自归约”或“自校正”论证，尽管其完整证明相当复杂。\n\n接受 $|C| \\ge k_{\\text{est}}/2$ 这一结论，我们可以推导出 $C$ 相对于 $t$ 的大小下界。我们使用我们导出的界限中对 $k_{\\text{est}}$ 的下界，即 $k_{\\text{est}} > t/2$。\n因此：\n$$ |C| \\ge \\frac{k_{\\text{est}}}{2} > \\frac{t/2}{2} = \\frac{t}{4} $$\n\n因此，$C$ 相对于 $\\omega(G)$ 的最小保证大小是 $\\omega(G)/4$，对应于选项 B。", "answer": "$$\\boxed{B}$$", "id": "1427944"}]}