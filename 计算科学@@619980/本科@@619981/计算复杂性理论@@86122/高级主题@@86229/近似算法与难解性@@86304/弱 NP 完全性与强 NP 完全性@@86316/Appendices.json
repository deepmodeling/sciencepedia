{"hands_on_practices": [{"introduction": "许多现实世界中的优化问题，例如任务调度，可以被建模为判定问题。这个练习将挑战你分析一个看似复杂的、涉及不同速度处理器的调度场景。通过将物理约束转化为数学方程，你将发现它与一个经典的 NP 完全问题之间深厚的联系，并学会识别弱 NP 完全性的典型特征。[@problem_id:1469291]", "problem": "考虑一个名为 `ASYMMETRIC-2-SCHEDULING` 的计算问题。给定一个包含 $n$ 个不可分割任务的集合，$T = \\{T_1, T_2, \\ldots, T_n\\}$。每个任务 $T_i$ 都有一个相关的正整数工作负载 $w_i$。这些任务需要在一个拥有两个处理器 $P_1$ 和 $P_2$ 的系统上进行调度。这两个处理器是异构的：处理器 $P_1$ 的处理速度为 $v$，而处理器 $P_2$ 的速度是其两倍，为 $2v$。在一个速度为 $s$ 的处理器上执行工作负载为 $w$ 的任务所需的时间是 $w/s$。\n\n`ASYMMETRIC-2-SCHEDULING` 问题是确定是否可能将任务集合 $T$ 分割为两个不相交的子集 $T_1$ 和 $T_2$（其中 $T_1$ 分配给 $P_1$，$T_2$ 分配给 $P_2$），使得两个处理器在完全相同的时刻完成它们的工作。设 $S = \\sum_{i=1}^n w_i$ 为总工作负载。\n\n根据计算复杂性理论的原理，以下哪个陈述最准确地描述了 `ASYMMETRIC-2-SCHEDULING` 问题？\n\nA. 该问题可在多项式时间内求解，因为任务可以按工作负载排序，并使用贪心算法分配给将较早完成的处理器。\n\nB. 该问题是强 NP-完全的，因为它是 3-PARTITION 问题的变体。\n\nC. 该问题是弱 NP-完全的，因为它可以通过一个时间复杂度在 $n$ 和 $S$ 上是多项式的，但在输入大小上不一定是多项式的算法来求解。\n\nD. 该问题是不可判定的，因为对于任意整数工作负载，可能无法确定是否存在完美划分。\n\nE. 该问题可在多项式时间内求解，因为它可以转化为检查总工作负载 $S$ 是否能被 3 整除。", "solution": "设 $T=\\{T_{1},\\ldots,T_{n}\\}$ 为具有正整数工作负载 $w_{i}>0$ 的任务，以及两个速度分别为 $v$ 和 $2v$ 的处理器 $P_{1}$ 和 $P_{2}$。如果将子集 $T_{1}$ 分配给 $P_{1}$，其补集 $T_{2}$ 分配给 $P_{2}$，则完成时间为\n$$\n\\text{time}(P_{1})=\\frac{\\sum_{T_{i}\\in T_{1}}w_{i}}{v},\\qquad \\text{time}(P_{2})=\\frac{\\sum_{T_{i}\\in T_{2}}w_{i}}{2v}.\n$$\n要求完成时间相等，可得\n$$\n\\frac{\\sum_{T_{i}\\in T_{1}}w_{i}}{v}=\\frac{\\sum_{T_{i}\\in T_{2}}w_{i}}{2v}.\n$$\n设 $X=\\sum_{T_{i}\\in T_{1}}w_{i}$ 且 $Y=\\sum_{T_{i}\\in T_{2}}w_{i}$，其中 $X+Y=S=\\sum_{i=1}^{n}w_{i}$。那么\n$$\n\\frac{X}{v}=\\frac{Y}{2v}\\iff 2X=Y,\\quad X+Y=S.\n$$\n解此线性方程组，\n$$\n2X=S-X\\implies 3X=S\\implies X=\\frac{S}{3},\\quad Y=\\frac{2S}{3}.\n$$\n因此，该调度问题等价于：是否存在一个工作负载子集，其和为 $S/3$？这是目标值为 $S/3$ 的 SUBSET-SUM 问题的一个特例。\n\nNP 成员资格：一个证书是和为 $S/3$ 的子集，可以在 $n$ 和输入长度的多项式时间内验证。\n\n伪多项式算法：用于 SUBSET-SUM 的标准动态规划算法可以在 $O(nS)$ 时间内计算出所有可达到的、最高为 $S$ 的和。由于这个时间在 $n$ 和 $S$ 上是多项式的（但不是在输入的位长 $O(n\\log S)$ 上是多项式的），该问题可在伪多项式时间内求解。\n\nNP-困难性（弱）：我们将 PARTITION 问题归约到目标值为 $S/3$ 的 SUBSET-SUM 问题。设 $A=\\{a_{1},\\ldots,a_{n}\\}$ 是一个 PARTITION 实例，其总和为 $S_{A}=\\sum_{i=1}^{n}a_{i}$。首先，如有必要，将每个 $a_{i}$ 替换为 $2a_{i}$，以使 $S_{A}$ 为偶数；这保留了等价性，并且最多将位长增加一个常数因子。定义两个额外的项\n$$\np=S_{A}+1,\\qquad q=2p+\\frac{S_{A}}{2}.\n$$\n构成集合 $B=A\\cup\\{p,q\\}$，其总和为 $S' = S_{A}+p+q$。那么\n$$\n\\frac{S'}{3}=\\frac{S_{A}+p+q}{3}=\\frac{S_{A}+(S_{A}+1)+\\left(2(S_{A}+1)+\\frac{S_{A}}{2}\\right)}{3}=\\frac{3S_{A}}{2}+1,\n$$\n因为 $S_{A}$ 是偶数，所以这是一个整数。我们建立两个关键性质：\n1) $q>\\frac{S'}{3}$，因为\n$$\nq-\\frac{S'}{3}=\\left(\\frac{5S_{A}}{2}+2\\right)-\\left(\\frac{3S_{A}}{2}+1\\right)=S_{A}+1>0,\n$$\n所以 $q$ 不能被包含在任何和为 $\\frac{S'}{3}$ 的子集中。\n2) $\\frac{S'}{3}>S_{A}$，因为\n$$\n\\frac{S'}{3}-S_{A}=\\frac{3S_{A}}{2}+1-S_{A}=\\frac{S_{A}}{2}+1>0,\n$$\n所以单凭 $A$ 的任何子集都无法达到和 $\\frac{S'}{3}$；因此，任何有效的子集都必须包含 $p$。\n\n因此，任何和为 $\\frac{S'}{3}$ 的 $B$ 的子集都必须包含 $p$ 且不包含 $q$，并且其来自 $A$ 的剩余部分的和必须恰好是\n$$\n\\frac{S'}{3}-p=\\left(\\frac{3S_{A}}{2}+1\\right)-(S_{A}+1)=\\frac{S_{A}}{2}.\n$$\n因此，$B$ 有一个和为 $\\frac{S'}{3}$ 的子集，当且仅当 $A$ 有一个和为 $\\frac{S_{A}}{2}$ 的子集，即当且仅当 PARTITION 实例是一个“是”实例。这是一个多项式时间多一归约，且 $p$ 和 $q$ 的大小为 $O(S_{A})$，其二进制长度为 $O(\\log S_{A})$，在输入大小上是多项式的。\n\n因此，判断是否存在一个和为 $S/3$ 的子集（也就是给定的调度问题）是 NP-完全的，但只是弱 NP-完全，因为存在伪多项式动态规划算法。因此，在这些选项中，正确的分类是该问题为弱 NP-完全。\n\n选项分析：\n- A 是错误的：贪心列表调度无法判定完成时间的精确相等。\n- B 是错误的：强 NP-完全性会排除伪多项式算法的存在，但伪多项式算法是存在的。\n- C 是正确的：该问题是弱 NP-完全的；它可以在 $n$ 和 $S$ 的多项式时间内求解。\n- D 是错误的：该问题是可判定的，并且属于 NP 类。\n- E 是错误的：$S$ 能被 3 整除是必要条件，但远非充分条件。\n\n因此，正确选项是 C。", "answer": "$$\\boxed{C}$$", "id": "1469291"}, {"introduction": "子集和问题（SUBSET SUM）是弱 NP 完全性的经典范例。本实践将探讨其乘法形式的“兄弟”问题——子集乘积问题（SUBSET PRODUCT）。你的任务是判断是否可以采用类似于子集和问题的动态规划方法，在伪多项式时间内解决此问题，从而将其在 NP 完全性谱系中进行分类。[@problem_id:1469327]", "problem": "在一门计算复杂性理论课程中，一名学生需要对一个名为 SUBSET PRODUCT 的判定问题进行分类。该问题的定义如下：\n\n**实例：** 一个正整数的有限集 $S = \\{a_1, a_2, \\ldots, a_n\\}$ 和一个目标正整数 $K$。\n**问题：** 是否存在一个非空子集 $S' \\subseteq S$，使得 $S'$ 中元素的乘积恰好等于 $K$？\n\n该学生已经确定 SUBSET PRODUCT 是 NP 完全的。下一步是确定它是弱 NP 完全还是强 NP 完全。为了帮助进行此分类，我们回顾一下复杂性理论中的以下标准定义：\n\n- 如果一个算法的运行时间是输入数值上的多项式，但不一定是输入长度（即表示输入所需的比特数）的多项式，则该算法的运行时间是**伪多项式**的。对于 SUBSET PRODUCT 的一个实例，数值包括集合 $S$ 中的整数和目标值 $K$，而输入长度与 $n$ 以及这些数字的对数相关。\n- 如果一个非确定性多项式时间 (NP) 完全问题可以被一个伪多项式时间算法解决，那么它是**弱 NP 完全**的。\n- 如果一个 NP 完全问题不能被伪多项式时间算法解决（除非 P=NP），那么它是**强 NP 完全**的。证明这一点的一个常用方法是，证明即使当其所有数值参数都被输入规模 $n$ 的一个多项式所限制时，该问题仍然是 NP 完全的。\n\n基于对 SUBSET PRODUCT 问题的分析，以下哪个陈述是最准确的分类？\n\nA. SUBSET PRODUCT 是弱 NP 完全的。这是因为存在一个时间复杂度对于整数数量 $n$ 和目标值 $K$ 是多项式的算法（例如，基于动态规划的算法）。\n\nB. SUBSET PRODUCT 是强 NP 完全的。这是因为即使所有输入数字（包括目标值 $K$）都被限制在 $n$ 的多项式范围内，该问题仍然是 NP 完全的。\n\nC. SUBSET PRODUCT 是强 NP 完全的。这是因为它可以从 3-SAT 归约而来，而 3-SAT 是一个强 NP 完全问题。\n\nD. SUBSET PRODUCT 可以在多项式时间内解决。这可以通过对每个数字和目标值 $K$ 进行质因数分解，然后求解生成的关于指数的线性方程组来实现。", "solution": "给定 SUBSET PRODUCT 问题：对于一个正整数的有限集 $S=\\{a_{1},\\ldots,a_{n}\\}$ 和一个目标正整数 $K$，判断是否存在一个非空子集 $S' \\subseteq S$ 其乘积等于 $K$。该问题已知是 NP 完全的。为了将其分类为弱 NP 完全或强 NP 完全，我们使用标准定义：\n\n- 伪多项式时间算法是指其运行时间是输入数值（这里指 $a_{i}$ 和 $K$ 的大小）的多项式，但不一定是输入长度（其数量级为 $n$ 和这些数值的 $\\ln$）的多项式。\n- 如果一个 NP 完全问题接受一个伪多项式时间算法，则它是弱 NP 完全的。\n- 如果一个 NP 完全问题在所有数值参数都被 $n$ 的一个多项式所限制时仍然是 NP 完全的，那么它就是强 NP 完全的；等价地，除非 P=NP，否则它不接受伪多项式时间算法。\n\n要确定 SUBSET PRODUCT 是弱 NP 完全还是强 NP 完全，只需证明是否存在一个伪多项式时间算法。\n\n我们提出一个动态规划算法，其时间复杂度对于 $n$ 和 $K$ 是多项式的：\n\n1. 观察：任何满足 $a_{i} > K$ 的 $a_{i}$ 都可以立即丢弃，因为包含 $a_{i}$ 的正整数乘积不可能等于 $K$。这个预处理步骤的时间复杂度是关于 $n$ 的线性时间。\n\n2. 对于 $i=0,1,\\ldots,n$，定义一个可达乘积集合序列 $R_{i} \\subseteq \\{1,2,\\ldots,K\\}$，其中 $R_{i}$ 包含了使用前 $i$ 个整数的某个子集（可能为空）可以形成的所有乘积。为了清晰地强制执行非空子集的要求，我们可以：\n   - 单独跟踪空集情况，或者\n   - 初始化时不包含空集乘积，然后显式地添加单元素集。我们采用后一种方法。\n\n   我们设置 $R_{0}=\\varnothing$ （使用零个项目无法构成非空子集）。对于每个 $i \\in \\{1,\\ldots,n\\}$，定义递推关系如下：\n   $$\n   R_{i} \\;=\\; R_{i-1} \\;\\cup\\; \\{\\,a_{i} \\mid a_{i} \\leq K\\,\\} \\;\\cup\\; \\{\\,t \\cdot a_{i} \\mid t \\in R_{i-1},\\; t \\cdot a_{i} \\leq K\\,\\}.\n   $$\n   这个递推关系确保每个 $a_{i}$ 最多使用一次，因为最后一个集合中的每个乘积都是由 $R_{i-1}$ 中的一个元素与一个 $a_{i}$ 相乘得到的。\n\n3. 通过布尔数组实现：维护一个以 $t \\in \\{1,\\ldots,K\\}$ 为索引的布尔数组 $B$，其中 $B[t]$ 表示 $t \\in R_{i}$。对于每个 $i$，按如下方式从 $B$ 计算一个新的数组 $B'$：\n   - 初始化 $B'=B$。\n   - 如果 $a_{i} \\leq K$，则设置 $B'[a_{i}]=\\text{true}$。\n   - 对于每个满足 $B[t]=\\text{true}$ 的 $t \\in \\{1,\\ldots,K\\}$，如果 $t \\cdot a_{i} \\leq K$，则设置 $B'[t \\cdot a_{i}]=\\text{true}$。\n   - 设置 $B \\leftarrow B'$ 并处理下一个 $i$。\n   最后，当且仅当 $B[K]=\\text{true}$ 时，回答“是”。\n\n4. 正确性：根据构造，处理完 $i$ 个项目后的数组 $B$ 精确地编码了集合 $R_{i}$，因为 $B'$ 精确地添加了可行的单元素集 $\\{a_{i}\\}$ 以及所有由先前可达的乘积与 $a_{i}$ 相乘一次（以 $K$ 为上限）形成的新乘积。由于在同一次迭代中我们从不使用 $B'$ 的值来生成更多值，因此没有项目被重复使用。\n\n5. 复杂度：对于每个 $i$，更新过程会扫描一次 $t=1$ 到 $K$，并对每个 $t$ 执行常数时间的检查和赋值。单元素集的步骤是常数时间的。因此，处理每个项目的时间是 $O(K)$，总时间是 $O(nK)$。空间使用量为 $O(K)$。这个运行时间是关于 $n$ 和数值 $K$ 的多项式，但不是关于输入长度（其取决于 $\\ln K$）的多项式。因此，它是伪多项式的。\n\n对分类的影响：\n- 由于 SUBSET PRODUCT 有一个伪多项式时间算法，所以它是弱 NP 完全的。\n- 它不是强 NP 完全的（除非 P=NP），因为如果所有输入数字，包括 $K$，都被 $n$ 的一个多项式所限制，那么上述算法的运行时间将是 $n$ 的多项式时间（具体为 $O(n \\cdot \\mathrm{poly}(n))$），这将使该受限问题属于 P 类，从而与强 NP 完全性相矛盾。\n- 关于所提供的选项：\n  - A 是正确的：存在一个时间复杂度对于 $n$ 和 $K$ 是多项式的动态规划算法，这确立了其弱 NP 完全性。\n  - B 是不正确的：当所有数字都被多项式限制时，该问题不再是 NP 完全的；此时，它可以通过上述的动态规划算法在多项式时间内解决。\n  - C 是不正确的：从 3-SAT 的可归约性并不意味着强 NP 完全性，并且 3-SAT 不是一个在限制数值参数意义上用来证明强 NP 完全性的数值问题。\n  - D 是不正确的：计算质因数分解尚不确定是多项式时间的；此外，即使给定了因数分解，我们也会得到一个关于指数向量的 0-1 整数线性可行性问题，这在一般情况下仍然是 NP 难的。\n\n因此，在这些选项中，最准确的分类是 SUBSET PRODUCT 是弱 NP 完全的。", "answer": "$$\\boxed{A}$$", "id": "1469327"}, {"introduction": "理解弱 NP 完全性与强 NP 完全性之间区别的最有效方法是进行直接比较。这个极具启发性的练习并列提出了两个问题，一个基于子集和问题，另一个基于 3-划分问题，并将它们置于一个所有数值输入都被多项式函数界定的特殊条件下。通过分析它们在这种受限情景下的复杂度，你将揭示区分弱 NP 完全问题与强 NP 完全问题的根本属性。[@problem_id:1469353]", "problem": "考虑两个与在一元整系数多项式子集中寻找特定性质相关的判定问题。对于这两个问题，输入都包含一个由 $N$ 个多项式组成的集合 $S = \\{p_1(x), \\dots, p_N(x)\\}$ 和一个整数 $r$。\n\n**问题1：多项式零子集和 (POLYNOMIAL-ZERO-SUBSET-SUM, PZSS)**\n是否存在一个非空子集 $S' \\subseteq S$，使得 $S'$ 中多项式之和，记为 $P_{S'}(x) = \\sum_{p_i \\in S'} p_i(x)$，满足条件 $P_{S'}(r) = 0$？\n\n**问题2：多项式三分区 (POLYNOMIAL-3-PARTITION, P3P)**\n假设多项式的数量为 $N=3n$，其中 $n$ 为某个整数。对于集合 $S$ 中的每个多项式 $p_i(x)$，我们定义整数值 $v_i = p_i(r)$。此外，令 $T = \\frac{1}{n} \\sum_{i=1}^{3n} v_i$。假设 $T$ 是一个整数，集合 $S$ 能否被划分为 $n$ 个不相交的子集 $S_1, \\dots, S_n$，其中每个子集恰好包含3个多项式，使得对于每个子集 $S_j$，其多项式在 $r$ 处求值的和等于 $T$？也就是说，对于每个 $j \\in \\{1, \\dots, n\\}$，等式 $\\left( \\sum_{p_i \\in S_j} p_i(x) \\right)\\bigg|_{x=r} = T$ 是否成立？\n\n现在，考虑这两个问题的一个特殊情形，我们称之为“多项式有界量级”（PBM）情形。如果一个问题的实例满足以下条件，则称其属于 PBM 情形：每个多项式的次数都由一个固定的常数限定，并且输入中给出的所有数值（即所有多项式的所有系数，以及整数 $r$）的绝对值都由 $N$（多项式总数）的某个多项式函数限定。\n\n下列哪个陈述正确地描述了这两个问题的 PBM 版本的计算复杂性？你可以假设 P $\\ne$ NP。\n\nA. 在 PBM 情形下，PZSS 和 P3P 都能在多项式时间内解决。\n\nB. 在 PBM 情形下，PZSS 可以在多项式时间内解决，但 P3P 仍然是 NP-完全的。\n\nC. 在 PBM 情形下，P3P 可以在多项式时间内解决，但 PZSS 仍然是 NP-完全的。\n\nD. 在 PBM 情形下，PZSS 和 P3P 仍然是 NP-完全的。", "solution": "我们通过首先将多项式输入归约为整数值，然后利用关于多项式界限下子集和类型和三分区类型问题的已知复杂性事实来分析这两个 PBM 问题。\n\n对于每个次数至多为固定常数 $d$ 的多项式 $p_i(x)$，可写作 $p_i(x) = \\sum_{k=0}^{d} a_{ik} x^{k}$，其中所有系数 $a_{ik} \\in \\mathbb{Z}$。在 PBM 情形下，存在一个多项式 $q$，使得对所有的 $i,k$ 都有 $|a_{ik}| \\leq q(N)$，并且 $|r| \\leq q(N)$，且 $d$ 是一个与 $N$ 无关的常数。定义 $v_i = p_i(r)$。那么\n$$\n|v_i| = \\left| \\sum_{k=0}^{d} a_{ik} r^{k} \\right| \\leq \\sum_{k=0}^{d} |a_{ik}|\\, |r|^{k} \\leq \\sum_{k=0}^{d} q(N)\\, q(N)^{k} = \\sum_{k=0}^{d} q(N)^{k+1}.\n$$\n因为 $d$ 是一个固定常数，所以上界 $\\sum_{k=0}^{d} q(N)^{k+1}$ 被一个关于 $N$ 的多项式所限定。因此，存在一个多项式 $Q$ 使得对所有 $i$ 都有 $|v_i| \\leq Q(N)$。\n\n问题1 (PZSS)：通过标准求值方法（例如，Horner法则）在与输入大小成多项式的时间内计算出 $v_i = p_i(r)$ 后，问题变为：是否存在一个非空子集 $I \\subseteq \\{1,\\dots,N\\}$ 使得 $\\sum_{i \\in I} v_i = 0$？这是 SUBSET SUM 问题的一个特例，其目标为零，输入为可能为正或负的整数。令 $W = \\sum_{i=1}^{N} |v_i|$。由 $|v_i| \\leq Q(N)$ 可得 $W \\leq N Q(N)$，这是关于 $N$ 的多项式。在整数区间 $[-W, W]$ 上对所有可达到的和进行标准动态规划，可以判断零是否可达到。为排除空子集，可以在初始化动态规划时不将空集和设为可行，或者等价地，跟踪是否至少使用了一个元素。该动态规划有 $O(N)$ 个阶段和 $O(W)$ 个状态，每个状态的转移时间为 $O(1)$，因此它在 $O(N W)$ 时间内运行，在 PBM 条件下，这是关于 $N$ 的多项式时间。因此，在 PBM 情形下，PZSS 可在多项式时间内解决。\n\n问题2 (P3P)：在计算出 $v_i = p_i(r)$ 和 $T = \\frac{1}{n} \\sum_{i=1}^{3n} v_i$（假设为整数）后，问题是多重集 $\\{v_1,\\dots,v_{3n}\\}$ 是否可以被划分为 $n$ 个三元组，每个三元组的和都为 $T$。这正是 3-PARTITION 问题的结构：划分为 $n$ 个和相等的三元组。经典的 3-PARTITION 问题是强 NP-完全的，这意味着即使所有整数都由项数的某个多项式限定，它仍然是 NP-完全的。要将一个在多项式有界范围内的强 NP-完全的 3-PARTITION 实例归约为 PBM 条件下的 P3P，可将每个整数 $a_i$ 映射为一个常数多项式 $p_i(x) = a_i$ 并设置 $r = 0$。那么 $v_i = p_i(0) = a_i$，并且 $T = \\frac{1}{n} \\sum_{i=1}^{3n} a_i$ 等于来自 3-PARTITION 实例的每个三元组的目标和。所有 PBM 条件都成立：次数为零，系数为 $a_i$（多项式有界），且 $r=0$。当且仅当原始的 3-PARTITION 实例是“是”实例时，该 P3P 实例才是“是”实例。因此，在 PBM 条件下，P3P 仍然是 NP-难的。P3P 属于 NP，因为一个划分证书可以在多项式时间内通过对每个三元组求和并检查其是否等于 $T$ 来验证。因此，在 PBM 情形下，P3P 仍然是 NP-完全的。\n\n结合两个结果，在 PBM 情形下，PZSS 属于 P，而 P3P 仍然是 NP-完全的。因此，正确选项是 B。", "answer": "$$\\boxed{B}$$", "id": "1469353"}]}