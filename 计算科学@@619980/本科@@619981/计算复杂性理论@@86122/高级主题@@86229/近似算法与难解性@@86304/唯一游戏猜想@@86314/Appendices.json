{"hands_on_practices": [{"introduction": "理解一个新概念的最好方法往往是从构建一个最简单的实例开始。本练习将引导你运用唯一游戏的基本定义——包括变量集 $V$、标签字母表 $[k]$ 以及关键的置换约束 $\\pi_e$。通过判断并构建一个具有两个变量且完全可满足的游戏实例，你将亲手验证这些核心组件是如何协同工作的，为后续更复杂的挑战打下坚实的基础。[@problem_id:1465393]", "problem": "在计算复杂性理论中，唯一游戏猜想（UGC）是一个关于近似算法困难性的核心开放问题。该猜想基于一种称为唯一游戏的特定类型的约束满足问题。\n\n一个**唯一游戏**由一个元组 $(V, E, [k], \\{\\pi_e\\}_{e \\in E})$ 定义，其中：\n1.  $V$ 是一个顶点（变量）集合。\n2.  $E$ 是 $V$ 上的一个边集，表示变量对之间的约束。\n3.  $[k] = \\{0, 1, \\dots, k-1\\}$ 是一个标签集合（字母表）。\n4.  对于每条边 $e = \\{u, v\\} \\in E$，$\\pi_e: [k] \\to [k]$ 是一个约束，它必须是一个**排列**（双射）。\n\n游戏的**标记**是一个函数 $L: V \\to [k]$，它为每个顶点分配一个来自字母表的标签。如果 $L(v) = \\pi_e(L(u))$，则称边约束 $e = \\{u, v\\}$ 被标记 $L$ **满足**。如果存在至少一个同时满足所有约束的标记，则称该游戏是**完全可满足的**。\n\n考虑一个顶点集为 $V = \\{v_1, v_2\\}$ 且字母表为 $[2] = \\{0, 1\\}$ 的系统。下列哪个选项描述了一个构成完全可满足的唯一游戏的系统，该系统具有此顶点集和字母表？\n\nA. 边 $\\{v_1, v_2\\}$ 上的单个约束，由排列 $\\pi(x) = 1-x$ 给出。\n\nB. 边 $\\{v_1, v_2\\}$ 上的单个约束，由函数 $\\phi(x) = 0$ 给出。\n\nC. 自环边 $\\{v_1, v_1\\}$ 上的单个约束，由排列 $\\pi(x) = 1-x$ 给出。\n\nD. 边 $\\{v_1, v_2\\}$ 上基于字母表 $\\{0, 1, 2\\}$ 的单个约束，由排列 $\\pi(x) = (x+1) \\pmod 3$ 给出。", "solution": "根据定义，一个唯一游戏实例 $(V,E,[k],\\{\\pi_{e}\\}_{e \\in E})$ 必须使每个边约束 $\\pi_{e}:[k]\\to[k]$ 都是一个排列（双射）。一个标记是一个函数 $L:V\\to[k]$。如果 $L(v)=\\pi_{e}(L(u))$，则边 $e=\\{u,v\\}$ 被满足。如果存在一个标记 $L$ 满足每个边约束，则该实例是完全可满足的。\n\n我们针对 $V=\\{v_{1},v_{2}\\}$ 和 $[2]=\\{0,1\\}$ 的情况，根据这些要求来检验每个选项。\n\nA. 边 $e=\\{v_{1},v_{2}\\}$ 上的约束是 $\\pi(x)=1-x$。在 $[2]$ 上，$\\pi(0)=1$ 且 $\\pi(1)=0$，所以 $\\pi$ 是一个双射，因此是一个有效的排列。为了检验完全可满足性，我们可以通过任选一个 $a\\in[2]$ 并设置 $L(v_{1})=a$ 和 $L(v_{2})=\\pi(a)$ 来定义一个标记 $L$。这样，根据构造，满足条件 $L(v_{2})=\\pi(L(v_{1}))$ 成立。因此，这是一个有效的唯一游戏实例，并且是完全可满足的。\n\nB. 边 $e=\\{v_{1},v_{2}\\}$ 上的约束是 $\\phi(x)=0$。在 $[2]$ 上，$\\phi(0)=0$ 且 $\\phi(1)=0$，这不是单射的，因此不是双射。因此，$\\phi$ 不是一个排列，所以这没有定义一个唯一游戏，不符合条件。\n\nC. 约束位于自环边 $e=\\{v_{1},v_{1}\\}$ 上，其排列为 $\\pi(x)=1-x$。即使我们考虑这样一条边，满足条件也要求 $L(v_{1})=\\pi(L(v_{1}))$，即 $L(v_{1})=1-L(v_{1})$。对于 $L(v_{1})\\in\\{0,1\\}$，这将意味着 $2L(v_{1})=1$，这在 $[2]$ 中没有解。因此，没有标记能满足这个约束，所以它不是完全可满足的。\n\nD. 约束使用字母表 $\\{0,1,2\\}$，其排列为 $\\pi(x)=(x+1)\\bmod 3$。虽然这是一个在3元素集合上的排列，但它与系统指定的字母表 $[2]=\\{0,1\\}$ 不匹配。因此，它不满足给定的实例要求。\n\n因此，只有选项A描述的系统既是一个有效的唯一游戏（在给定字母表上的排列约束），又是完全可满足的（存在满足约束的标记）。", "answer": "$$\\boxed{A}$$", "id": "1465393"}, {"introduction": "在许多现实世界的优化问题中，我们无法同时满足所有约束条件。本练习将把你从理想化的“完全可满足”场景带入这种更普遍的“受挫”系统。通过分析一个简单的三角图上的唯一游戏，你会发现约束之间如何产生矛盾，并学习如何计算该游戏的“值”——即在所有可能的标签分配中，能够满足的最大约束比例。[@problem_id:1465354]", "problem": "在计算复杂性理论中，唯一游戏（Unique Game）是一类标号问题，用于研究近似算法的极限。一个唯一游戏实例由一个元组 $(G, \\Sigma, \\{\\pi_e\\})$ 定义，其中：\n1.  $G = (V, E)$ 是一个有向图，其中 $V$ 是顶点集，$E$ 是边集。对于每条有向边 $(u,v) \\in E$，其反向边 $(v,u)$ 也在 $E$ 中。\n2.  $\\Sigma$ 是一个有限的标号集合，称为字母表。\n3.  对于每条边 $e = (u,v) \\in E$，$\\pi_e: \\Sigma \\to \\Sigma$ 是一个置换（一个双射函数）。这些约束是成对的，即如果 $e'=(v,u)$ 是 $e=(u,v)$ 的反向边，那么 $\\pi_{e'} = \\pi_e^{-1}$。\n\n一个标号是一个函数 $L: V \\to \\Sigma$，它为每个顶点分配一个来自字母表的标号。对于一条边 $e = (u,v)$ 的一个约束，如果 $\\pi_e(L(u)) = L(v)$，则称该约束被标号 $L$ 满足。一个唯一游戏实例的*值*是指在所有可能的标号中，能够被满足的约束的最大比例。\n\n考虑一个构建在无向三角形图上的简单唯一游戏实例，为了表示约束，我们可以用有向边来表示这个图。设顶点为 $V = \\{v_1, v_2, v_3\\}$，字母表为 $\\Sigma = \\{0, 1\\}$。为有向边 $(v_1, v_2)$、$(v_2, v_3)$ 和 $(v_3, v_1)$ 定义的约束如下：\n-   对于边 $(v_1, v_2)$，约束是恒等置换，$\\pi_{(v_1,v_2)}(x) = x$。\n-   对于边 $(v_2, v_3)$，约束也是恒等置换，$\\pi_{(v_2,v_3)}(x) = x$。\n-   对于边 $(v_3, v_1)$，约束是否定置换，$\\pi_{(v_3,v_1)}(x) = 1 - x$。\n\n计算这个唯一游戏实例的值。请将您的答案表示为最简分数。", "solution": "设 $L(v_{1})=x_{1}$，$L(v_{2})=x_{2}$，以及 $L(v_{3})=x_{3}$，其中 $x_{i}\\in\\{0,1\\}$。这三个给定的约束可转换为：\n- 对于 $(v_{1},v_{2})$ 的恒等约束：$x_{2}=x_{1}$。\n- 对于 $(v_{2},v_{3})$ 的恒等约束：$x_{3}=x_{2}$。\n- 对于 $(v_{3},v_{1})$ 的否定约束：$x_{1}=1-x_{3}$。\n\n由前两个约束可知，$x_{3}=x_{2}=x_{1}$，所以 $x_{1}=x_{3}$。将此结果代入第三个约束得到 $x_{1}=1-x_{1}$，该方程在 $\\{0,1\\}$ 中无解，这表明三个约束不能同时被满足。\n\n因此，在这三个约束中，最多只能满足两个。这个上界是可以达到的，例如，通过赋值 $x_{1}=0$，$x_{2}=0$，$x_{3}=0$。该标号满足前两个约束，但违反了第三个。因此，被满足的约束的最大数量是3个中的2个，所以该实例的值是\n$$\n\\frac{2}{3}.\n$$", "answer": "$$\\boxed{\\frac{2}{3}}$$", "id": "1465354"}, {"introduction": "唯一游戏猜想的深刻影响在于它揭示了许多实际优化问题的计算极限。这个练习将抽象的理论置于一个具体的工程背景中：为一个分布式计算网络设计同步协议。你的任务是在一个给定的网络拓扑和预设节点状态的条件下，找到最大化“同步”连接数的方案，这让你能够体验如何在现实约束下进行优化权衡。[@problem_id:1465349]", "problem": "一个工程师团队正在为一个分布式计算网络设计一种同步协议。该网络由一组 $N$ 个处理节点组成。每个节点必须配置为 $K$ 种可能的操作状态之一。这些状态用从 $1$ 到 $K$ 的整数标记。\n\n该网络的通信拓扑由一个无向图 $G=(V, E)$ 表示，其中 $V$ 是节点集合，$E$ 是节点对之间的双向通信链路集合。为了使系统正常工作，当且仅当节点 $u$ 和节点 $v$ 被分配了相同的状态时，一条通信链路 $(u, v) \\in E$ 被认为是“同步的”。该团队的目标是找到一种为所有节点分配状态的方案，以最大化同步链路的总数。\n\n考虑一个具有以下特征的特定小规模部署：\n- 节点数为 $N=8$，节点集合为 $V = \\{1, 2, 3, 4, 5, 6, 7, 8\\}$。\n- 可用状态数为 $K=3$，状态为 $\\{1, 2, 3\\}$。\n- 通信链路集合为 $E = \\{(1,2), (1,3), (2,3), (2,5), (3,4), (4,5), (5,6), (6,7), (6,8), (7,8)\\}$。\n- 由于特殊的硬件要求，其中两个节点的状态是预先确定且固定的：节点 1 必须处于状态 1，节点 8 必须处于状态 2。\n\n在这些条件下，网络中可以实现的最大可能同步链路数是多少？", "solution": "设每个节点 $i$ 被分配一个状态 $s_{i} \\in \\{1,2,3\\}$，并满足约束条件 $s_{1}=1$ 和 $s_{8}=2$。对于一个状态分配方案 $s$，同步链路的数量为\n$$\nS(s)=\\sum_{(u,v)\\in E}\\mathbf{1}\\{s_{u}=s_{v}\\}.\n$$\n边集可以拆分为\n$$\nE_{\\text{left}}=\\{(1,2),(1,3),(2,3),(2,5),(3,4),(4,5)\\},\\quad E_{\\text{right}}=\\{(6,7),(6,8),(7,8)\\},\n$$\n以及桥接边 $(5,6)$。因此，对于固定的 $s_{5}$ 和 $s_{6}$，\n$$\n\\max S=\\max_{s_{5},s_{6}}\\Big(L(s_{5})+R(s_{6})+\\mathbf{1}\\{s_{5}=s_{6}\\}\\Big),\n$$\n其中 $L(s_{5})$ 是在给定 $s_{1}=1$ 和 $s_{5}$ 固定的情况下，$E_{\\text{left}}$ 中同步边的最大数量；而 $R(s_{6})$ 是在给定 $s_{8}=2$ 和 $s_{6}$ 固定的情况下，$E_{\\text{right}}$ 中的最大数量。\n\n右子图计算。对于节点 $\\{6,7,8\\}$，在 $s_{8}=2$ 且 $s_{6}$ 固定的情况下：\n- 如果 $s_{6}=2$，选择 $s_{7}=2$ 使三者状态全部相同，得到 $R(2)=3$。\n- 如果 $s_{6}\\neq 2$，最佳选择是 $s_{7}=s_{6}$ 或 $s_{7}=2$，这恰好产生一条同步边，因此当 $s_{6}\\neq 2$ 时 $R(s_{6})=1$。\n\n因此\n$$\nR(s_{6})=\\begin{cases}3,& s_{6}=2,\n\\\\\n[4pt]1,& s_{6}\\neq 2.\\end{cases}\n$$\n\n左子图计算。对于节点 $\\{1,2,3,4,5\\}$，在 $s_{1}=1$ 且 $s_{5}$ 固定的情况下，对 $s_{2},s_{3},s_{4}$ 进行最大化。左边的边包括 $\\{1,2,3\\}$ 上的三角形，加上路径 $(3,4),(4,5)$ 和边 $(2,5)$。\n\n- 情况 $s_{5}=1$。选择 $s_{2}=s_{3}=s_{4}=1$。这样 $E_{\\text{left}}$ 中的每一条边都同步了，所以\n$$\nL(1)=6.\n$$\n\n- 情况 $s_{5}=2$。将总数写为以下各项之和\n$$\nT_{1}(s_{2},s_{3})=\\mathbf{1}\\{s_{2}=1\\}+\\mathbf{1}\\{s_{3}=1\\}+\\mathbf{1}\\{s_{2}=s_{3}\\}\n$$\n来自三角形 $(1,2,3)$ 的贡献，加上来自 $(2,5)$ 的 $\\mathbf{1}\\{s_{2}=2\\}$，再加上来自 $(3,4)$ 和 $(4,5)$ 的最优贡献，当 $s_{3}$ 和 $s_{5}=2$ 固定时，该贡献等于\n$$\nF(s_{3})=\\max_{s_{4}}\\big(\\mathbf{1}\\{s_{3}=s_{4}\\}+\\mathbf{1}\\{s_{4}=2\\}\\big)=\\begin{cases}2,& s_{3}=2,\n\\\\\n[4pt]1,& s_{3}\\neq 2.\\end{cases}\n$$\n枚举 $s_{3}$ 和 $s_{2}$ 的情况：\n- 如果 $s_{3}=1$，则 $T_{1}=1+2\\mathbf{1}\\{s_{2}=1\\}$，对于 $s_{2}=1$ 总贡献为 $4$，对于 $s_{2}=2$ 总贡献为 $3$，对于 $s_{2}=3$ 总贡献为 $2$。\n- 如果 $s_{3}=2$，则 $T_{1}=\\mathbf{1}\\{s_{2}=1\\}+\\mathbf{1}\\{s_{2}=2\\}$ 且 $F=2$，对于 $s_{2}=1$ 总贡献为 $3$，对于 $s_{2}=2$ 总贡献为 $4$，对于 $s_{2}=3$ 总贡献为 $2$。\n- 如果 $s_{3}=3$，则 $T_{1}=\\mathbf{1}\\{s_{2}=1\\}+\\mathbf{1}\\{s_{2}=3\\}$ 且 $F=1$，对于任何 $s_{2}$ 总贡献均为 $2$。\n因此\n$$\nL(2)=4.\n$$\n\n- 情况 $s_{5}=3$。根据上述计算的对称性（在连接节点 5 的边中，将状态 2 和 3 的角色互换），类似的评估得出\n$$\nL(3)=4.\n$$\n\n综合起来，我们有\n$$\nL(1)=6,\\quad L(2)=4,\\quad L(3)=4,\\qquad R(2)=3,\\quad R(1)=R(3)=1.\n$$\n\n对 $s_{5},s_{6}$ 进行优化：\n- 如果 $s_{5}=1$，那么最佳选择是 $s_{6}=2$，得到 $L(1)+R(2)+\\mathbf{1}\\{1=2\\}=6+3+0=9$。\n- 如果 $s_{5}=2$，那么最佳选择是 $s_{6}=2$，得到 $4+3+1=8$。\n- 如果 $s_{5}=3$，那么最佳选择是 $s_{6}=2$，得到 $4+3+0=7$。\n\n因此，可能的最大同步链路数为 $9$。一种最优分配方案是 $s_{1}=s_{2}=s_{3}=s_{4}=s_{5}=1$ 和 $s_{6}=s_{7}=s_{8}=2$，该方案同步了 $E_{\\text{left}}$ 中的所有边（6 条）和 $E_{\\text{right}}$ 中的所有边（3 条），只有桥接边 $(5,6)$ 未同步。不可能达到 $10$ 条，因为同步桥接边需要 $s_{5}=s_{6}=1$（这使得右侧最多有 $R(1)=1$ 条同步边）或 $s_{5}=s_{6}=2$（这使得左侧最多有 $L(2)=4$ 条同步边），两种情况得到的总数最多都为 $8$。", "answer": "$$\\boxed{9}$$", "id": "1465349"}]}