{"hands_on_practices": [{"introduction": "在处理 NP-难问题时，我们常常依赖近似算法，而这些算法都带有效率保证。这个练习将探讨这些保证的一个最基本属性：当我们有多个解决同一问题的算法时，会发生什么？通过这个练习，你将深入思考近似比 $\\rho$ 的定义，并学习如何在一个简单而实际的场景中运用它，这是检验你是否理解核心概念的基础。[@problem_id:1412176]", "problem": "在计算优化中，许多问题非常困难，以至于找到绝对最优解被认为是计算上不可行的。对于这类问题，计算机科学家们开发了近似算法。对于一个最小化问题，如果对于任何输入实例，一个算法产生的解的代价 $C_{alg}$ 保证不超过真实最优解代价 $C_{opt}$ 的 $\\rho$ 倍，那么该算法被称为 $\\rho$-近似算法。也就是说，$C_{alg} \\leq \\rho \\cdot C_{opt}$。值 $\\rho \\geq 1$ 被称为近似比。\n\n一家软件公司正在研究一个复杂的网络路由最小化问题。他们开发了两种不同的启发式算法：\n1.  算法 `Alpha`，这是一个 $2$-近似算法。\n2.  算法 `Beta`，这是一个 $3$-近似算法。\n\n一位工程师提出了一种新的混合策略：对于任何给定的路由问题，独立运行 `Alpha` 和 `Beta` 两种算法，然后选择代价更低的那个解。我们将这个新算法称为 `Hybrid`。\n\n对于所有可能的问题实例，可以为 `Hybrid` 算法保证的最紧（最小）的近似比是多少？\n\nA. $1.5$\n\nB. $2$\n\nC. $2.5$\n\nD. $3$\n\nE. $5$", "solution": "设 $C_{\\text{opt}}$ 表示一个实例的最优代价。设 $C_{\\alpha}$ 和 $C_{\\beta}$ 分别是算法 Alpha 和 Beta 返回的代价。根据它们的保证，\n$$\nC_{\\alpha} \\leq 2\\,C_{\\text{opt}}, \\qquad C_{\\beta} \\leq 3\\,C_{\\text{opt}}.\n$$\nHybrid 算法返回\n$$\nC_{\\text{H}}=\\min\\{C_{\\alpha},C_{\\beta}\\}.\n$$\n使用这些界，\n$$\nC_{\\text{H}} \\leq \\min\\{2\\,C_{\\text{opt}},3\\,C_{\\text{opt}}\\}=2\\,C_{\\text{opt}}.\n$$\n因此，Hybrid 是一个 $2$-近似算法，所以它的近似比至多是 $2$。\n\n为了证明该界的紧致性，假设存在一个实例，在该实例上 Alpha 达到了其最坏情况的界，即 $C_{\\alpha}=2\\,C_{\\text{opt}}$，并且 Beta 在该实例上的表现不比它更好，即 $C_{\\beta} \\geq 2\\,C_{\\text{opt}}$。那么\n$$\nC_{\\text{H}}=\\min\\{C_{\\alpha},C_{\\beta}\\}=2\\,C_{\\text{opt}}.\n$$\n因此，对于所有实例，不存在一个严格优于 $2$ 的保证。从而，可以为 Hybrid 保证的最紧近似比是 $2$。", "answer": "$$\\boxed{B}$$", "id": "1412176"}, {"introduction": "许多近似算法都基于直观的“贪心”策略。本练习将深入探讨经典的集合覆盖问题，你将把一个标准的贪心启发式算法应用到一个具体的场景中。通过将贪心解与最优解进行比较，你将计算出该算法在这个特定实例上的近似比，从而深刻理解为什么贪心选择并不总是能带来全局最优解。[@problem_id:1412212]", "problem": "一个城市正计划安装一个新的公共 Wi-Fi 网络，并希望确保其 7 个关键地标都得到覆盖。几家科技公司提交了提案。每个提案都覆盖了地标的一个特定子集，并且所有提案的成本均被视为相等。该城市希望接受最少数量的提案来实现全面覆盖。这是集合覆盖问题的一个实例。\n\n待覆盖的地标全集为 $U = \\{L_1, L_2, L_3, L_4, L_5, L_6, L_7\\}$。\n\n现有来自 Alpha、Beta、Gamma、Delta 和 Epsilon 公司的五个提案。每个提案覆盖的地标集合如下：\n- 提案 Alpha ($P_A$)：$\\{L_1, L_2, L_3, L_4\\}$\n- 提案 Beta ($P_B$)：$\\{L_5, L_6\\}$\n- 提案 Gamma ($P_G$)：$\\{L_7\\}$\n- 提案 Delta ($P_D$)：$\\{L_1, L_2, L_5, L_7\\}$\n- 提案 Epsilon ($P_E$)：$\\{L_3, L_4, L_6\\}$\n\n该城市决定使用标准的集合覆盖贪心算法。在每一步中，该算法选择能够覆盖最多尚未被覆盖地标的提案。如果在新增覆盖地标的数量上出现平局，算法将选择按字母顺序（Alpha、Beta、Gamma、Delta、Epsilon）最先出现的提案。\n\n您的任务是分析此贪心方法在该特定实例上的性能。计算近似比，其定义为贪心算法选择的提案数量与最优解（真正的最小值）中的提案数量之比。请用一个实数表示您的答案。", "solution": "我们将贪心集合覆盖过程形式化，并计算近似比，该近似比定义为贪心算法选择的提案数量除以最优解中的数量。\n\n设提案为：\n$$P_{A}=\\{L_{1},L_{2},L_{3},L_{4}\\},\\quad P_{B}=\\{L_{5},L_{6}\\},\\quad P_{G}=\\{L_{7}\\},\\quad P_{D}=\\{L_{1},L_{2},L_{5},L_{7}\\},\\quad P_{E}=\\{L_{3},L_{4},L_{6}\\}.$$\n全集为 $U=\\{L_{1},L_{2},L_{3},L_{4},L_{5},L_{6},L_{7}\\}$。\n\n贪心算法执行过程：\n1) 初始时，未覆盖集合 $U_{0}=U$。计算新增覆盖数量：\n$$|P_{A}\\cap U_{0}|=4,\\quad |P_{B}\\cap U_{0}|=2,\\quad |P_{G}\\cap U_{0}|=1,\\quad |P_{D}\\cap U_{0}|=4,\\quad |P_{E}\\cap U_{0}|=3.$$\n$P_{A}$ 和 $P_{D}$ 之间出现平局，数量均为 $4$；根据字母顺序的平局打破规则，选择 $P_{A}$。已覆盖集合变为 $\\{L_{1},L_{2},L_{3},L_{4}\\}$，未覆盖集合变为 $U_{1}=\\{L_{5},L_{6},L_{7}\\}$。\n\n2) 针对 $U_{1}$ 计算新增覆盖数量：\n$$|P_{B}\\cap U_{1}|=2,\\quad |P_{G}\\cap U_{1}|=1,\\quad |P_{D}\\cap U_{1}|=2\\ (\\text{因为 }P_{D}\\cap U_{1}=\\{L_{5},L_{7}\\}),\\quad |P_{E}\\cap U_{1}|=1.$$\n$P_{B}$ 和 $P_{D}$ 之间出现平局，数量均为 $2$；根据字母顺序的平局打破规则，选择 $P_{B}$。现在未覆盖集合变为 $U_{2}=\\{L_{7}\\}$。\n\n3) 对于 $U_{2}=\\{L_{7}\\}$，计算：\n$$|P_{G}\\cap U_{2}|=1,\\quad |P_{D}\\cap U_{2}|=1,\\quad |P_{E}\\cap U_{2}|=0.$$\n$P_{G}$ 和 $P_{D}$ 之间出现平局；根据字母顺序的平局打破规则，选择 $P_{G}$。现在所有元素均已被覆盖。\n\n因此，贪心算法选择了 $P_{A},P_{B},P_{G}$，总共 $3$ 个提案。\n\n最优解的大小：\n没有单个提案能覆盖所有 $7$ 个地标，因为 $\\max|P|=4<7$。我们可以给出一个大小为 $2$ 的覆盖：\n$$P_{D}\\cup P_{E}=\\{L_{1},L_{2},L_{5},L_{7}\\}\\cup\\{L_{3},L_{4},L_{6}\\}=U.$$\n因此，最优提案数量为 $2$。\n\n近似比：\n$$\\rho=\\frac{\\text{贪心算法选择的数量}}{\\text{最优解中的数量}}=\\frac{3}{2}=1.5.$$", "answer": "$$\\boxed{1.5}$$", "id": "1412212"}, {"introduction": "近似算法的真正威力在于其最坏情况下的保证——一个对任何可能的输入都成立的承诺。这个练习将挑战你分析一个针对设施选址问题的简单算法，并确定其最坏情况下的近似比。这项任务不仅要求你证明比率的上限，还需要你构建一个“紧凑”的例子来证明你的界限无法被进一步优化，这是算法分析中的一项关键技能。[@problem_id:1412150]", "problem": "一家大型科技公司正在为其新的内容分发网络（CDN）设计部署策略。目标是在各个城市放置缓存服务器，以最低的总成本为用户提供服务。该问题被建模为无容量设施选址问题的一个实例。\n\n现有 $n$ 个不同的城市，索引从 $1$ 到 $n$。公司可以选择在任何一个城市建立一个服务器（一个“设施”）。CDN的用户也位于这 $n$ 个城市内（“客户”）。\n\n成本结构如下：\n- 在任何城市 $i$ 建立和运营一个服务器的成本是一个固定的、统一的金额 $S > 0$。\n- 将城市 $j$ 的用户连接到城市 $i$ 的服务器的成本由连接成本 $d_{ij} \\ge 0$ 给出。这些连接成本代表网络延迟，并且是对称的（$d_{ij} = d_{ji}$）。它们还满足三角不等式：对于任意三个城市 $i, j, k$，不等式 $d_{ik} \\le d_{ij} + d_{jk}$ 成立。请注意，一个城市到其自身的连接成本为 $d_{ii} = 0$。\n\n总成本是所有服务器开设成本与所有 $n$ 个城市的连接成本之和。每个城市必须由且仅由一个服务器提供服务，并且它总是被分配到最近的开放服务器以最小化其连接成本。\n\n一位初级工程师提出了一个非常简单的策略，称为“完全去中心化”方法：在所有 $n$ 个城市中都建立一个服务器。\n\n您的任务是确定这种“完全去中心化”策略的最紧的最坏情况近似比。近似比定义为在所有可能的有效问题实例（即，满足问题约束的所有有效连接成本 $d_{ij}$ 的选择）中，比率 $\\frac{\\text{Cost of Full Decentralization}}{\\text{Cost of Optimal Solution}}$ 的最大可能值。\n\n请用城市数量 $n$ 的函数表示您的答案。", "solution": "设 $n$ 为城市数量，$S>0$ 为统一的设施开设成本。设 $d_{ij}\\ge 0$ 是对称的，满足三角不等式，并且 $d_{ii}=0$。\n\n1) 完全去中心化（FD）策略的成本：\n- 该策略在每个城市都开设一个设施，因此开设成本为 $nS$。\n- 每个城市 $j$ 连接到其位于城市 $j$ 的本地设施，产生的连接成本为 $d_{jj}=0$。\n因此，\n$$\n\\text{Cost}_{\\text{FD}}=nS+0=nS.\n$$\n\n2) 最优成本的下界：\n设 $F^{\\star}$ 为最优解所开设的设施集合。由于每个城市都必须分配给一个开放的设施，因此必须有 $|F^{\\star}|\\ge 1$。连接成本是非负的，因此总连接成本至少为 $0$。因此\n$$\n\\text{OPT} \\ge |F^{\\star}|S \\ge S.\n$$\n\n3) 近似比的上界：\n由上可得，\n$$\n\\frac{\\text{Cost}_{\\text{FD}}}{\\text{OPT}}=\\frac{nS}{\\text{OPT}} \\le \\frac{nS}{S}=n.\n$$\n\n4) 通过一个具体实例证明其紧确性：\n考虑一个度量，其中对于所有 $i,j$ 都有 $d_{ij}=0$。这是对称的，满足 $d_{ii}=0$，并且由于 $0 \\le 0+0$，三角不等式也成立。在此实例中，开设一个设施就可以为所有城市提供服务，连接成本为零，因此\n$$\n\\text{OPT}=S.\n$$\n同时，FD 策略的成本仍为 $nS$。因此，\n$$\n\\frac{\\text{Cost}_{\\text{FD}}}{\\text{OPT}}=\\frac{nS}{S}=n.\n$$\n\n结合上界和这个紧确的例子，完全去中心化策略的最坏情况近似比恰好是 $n$。", "answer": "$$\\boxed{n}$$", "id": "1412150"}]}