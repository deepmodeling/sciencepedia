{"hands_on_practices": [{"introduction": "理解一个近似算法的第一步是解读其性能保证。本练习将 FPTAS 的核心承诺——对于最大化问题，其解的价值不低于 $(1-\\epsilon) \\cdot V_{OPT}$ ——置于一个具体的应用场景中。通过为一个假设的场景计算由给定误差参数 $\\epsilon$ 所确定的解质量下限，你将直接实践 FPTAS 最根本的价值主张。[@problem_id:1424984]", "problem": "一家云基础设施公司需要从待处理的高性能计算任务中选择一个子集，在下一个24小时周期内，在一台处理能力有限的超级计算机上运行。每个任务都有特定的计算成本，并能产生一定的收益。所选任务的总计算成本不能超过超级计算机的容量。这个资源分配任务等同于0/1背包问题，该问题是已知的NP难问题。\n\n为了在实际可行的时间内找到一个近似最优解，该公司采用了一种完全多项式时间近似方案（Fully Polynomial-Time Approximation Scheme, FPTAS）。一位外部顾问使用一种精确但缓慢的指数时间算法，确定了某一天待处理任务集可能产生的最大收益（最优解值，$V_{opt}$）恰好为$\\$1,254,300$。该公司的FPTAS实现配置了误差参数 $\\epsilon = 0.085$。\n\n根据FPTAS框架为最大化问题提供的性能保证，该公司通过此近似算法选择的任务所能保证产生的最低收益是多少？请以美元作答，并四舍五入到三位有效数字。", "solution": "该问题要求计算通过完全多项式时间近似方案（FPTAS）选择任务所能保证的最低收益。我们已知最优解的值和FPTAS的误差参数。\n\n首先，我们回顾一下针对最大化问题的FPTAS的定义。如果一个算法对于问题的任何实例和任何误差参数 $\\epsilon > 0$，都能产生一个解，其值 $V_{approx}$ 被保证在最优解值 $V_{opt}$ 的某个因子范围内，那么这个算法就是一个FPTAS。对于最大化问题，具体的保证由以下不等式给出：\n$$V_{approx} \\geq (1 - \\epsilon)V_{opt}$$\n此外，该算法的运行时间必须在输入大小和$1/\\epsilon$上都是多项式的。\n\n在这个问题中，我们需要求的是保证的最低收益。这对应于FPTAS保证所定义的 $V_{approx}$ 的下限。我们已知以下数值：\n最优解值，$V_{opt} = \\$1,254,300$。\n误差参数，$\\epsilon = 0.085$。\n\n我们需要计算保证的最小值，我们称之为 $V_{min\\_guaranteed}$。\n$$V_{min\\_guaranteed} = (1 - \\epsilon)V_{opt}$$\n\n现在，我们将给定的数值代入这个公式。\n$$V_{min\\_guaranteed} = (1 - 0.085) \\times 1,254,300$$\n\n首先，计算括号中的项：\n$$1 - 0.085 = 0.915$$\n\n接下来，将这个因子乘以最优值：\n$$V_{min\\_guaranteed} = 0.915 \\times 1,254,300$$\n$$V_{min\\_guaranteed} = 1,148,184.5$$\n\n题目要求答案四舍五入到三位有效数字。计算出的值为 $1,148,184.5$。\n前三位有效数字是1、1和4。第四位有效数字是8。由于8大于或等于5，我们必须将第三位有效数字向上取整。因此，'4' 变成 '5'。第三位有效数字之后的数字被替换为零，以保持数值的量级。\n四舍五入后的值为 $1,150,000$。\n\n为了用三位有效数字明确地表示这个值，我们使用科学记数法。\n$$1,150,000 = 1.15 \\times 10^6$$\n\n因此，该公司保证能够产生的最低收益是 $\\$1,150,000$。", "answer": "$$\\boxed{1.15 \\times 10^{6}}$$", "id": "1424984"}, {"introduction": "掌握了 FPTAS 的性能保证后，我们接下来探讨实现这一保证所需付出的代价。“全多项式时间”意味着运行时间关于输入规模 $n$ 和 $1/\\epsilon$ 都是多项式的。这个练习关注后者，揭示了求解精度与计算时间之间的关键权衡，让你亲身体验提高解的质量保证是如何显著影响算法的运行效率的。[@problem_id:1425231]", "problem": "一家科技公司开发了一种算法，用于优化数据中心中 $n$ 个计算任务的调度，以最大化已完成工作的总价值。由于找到完全最优的调度是一个NP难问题，该公司采用了一种近似算法。他们的算法是一种全多项式时间近似方案（FPTAS）。\n\n对于一个最大化问题，FPTAS是一种算法，对于任何给定的大小为 $n$ 的输入和任何误差参数 $\\epsilon > 0$，其运行时间在 $n$ 和 $1/\\epsilon$ 上都是多项式的。该算法保证产生一个解，其值至少是最优解值的 $(1-\\epsilon)$ 倍。\n\n该公司开发的具体FPTAS的时间复杂度为 $T(n, \\epsilon) = O\\left(\\frac{n^2 \\log n}{\\epsilon^3}\\right)$。\n\n目前，运营团队在运行该算法时使用的参数设置保证解的值至少为最优值的95%。为了满足一项关键年终分析的需求，管理层要求了更高的质量保证，即解的值至少为最优值的99.5%。\n\n假设两次运行中任务数 $n$ 保持不变，计算为了满足这一新的、更严格的质量要求，算法的运行时间将增加的倍数。", "solution": "我们给定一个用于最大化问题的FPTAS，其运行时间复杂度为\n$$\nT(n,\\epsilon)=O\\left(\\frac{n^{2}\\log n}{\\epsilon^{3}}\\right).\n$$\n对于一个最大化FPTAS，保证解的值至少为最优值的比例 $q$ 对应于选择 $\\epsilon=1-q$。\n\n当前的运行保证解的值至少为最优值的 $0.95$，因此\n$$\n\\epsilon_{1}=1-0.95=0.05.\n$$\n期望的运行保证解的值至少为最优值的 $0.995$，因此\n$$\n\\epsilon_{2}=1-0.995=0.005.\n$$\n\n对于固定的 $n$，运行时间与 $T(n,\\epsilon)\\propto \\epsilon^{-3}$ 成比例。因此，从 $\\epsilon_{1}$ 变为 $\\epsilon_{2}$ 时，运行时间的增加倍数为\n$$\n\\frac{T(n,\\epsilon_{2})}{T(n,\\epsilon_{1})}=\\left(\\frac{\\epsilon_{1}}{\\epsilon_{2}}\\right)^{3}=\\left(\\frac{0.05}{0.005}\\right)^{3}=10^{3}=1000.\n$$\n因此，运行时间增加了 $1000$ 倍。", "answer": "$$\\boxed{1000}$$", "id": "1425231"}, {"introduction": "在理解了 FPTAS “承诺什么”以及“代价是什么”之后，我们将深入其内部一探究竟。这个问题探讨了背包问题 FPTAS 的一种经典构造方法的核心机制：缩放与取整 (scaling and rounding)。通过推导所有可行解中，缩放后总价值的一个上界，你将揭示误差参数 $\\epsilon$ 是如何直接控制问题实例的数值范围，进而影响算法复杂度，并最终使得一个 NP-hard 问题变得易于处理的。[@problem_id:1425257]", "problem": "一位计算机科学家正在为资源选择问题设计一个算法，该问题可以建模为 0/1 背包问题的一个变种。目标是从 $n$ 个可用物品的集合中选择一个子集。对于每个物品 $i \\in \\{1, \\dots, n\\}$，都有一个相关的整数价值 $p_i > 0$ 和一个整数成本 $c_i > 0$。目标是选择一个物品子集，使得总价值 $\\sum p_i$ 最大化，同时满足总成本 $\\sum c_i$ 不超过预算 $C$ 的约束。\n\n由于此问题是 NP-难的，这位科学家实现了一个完全多项式时间近似方案 (FPTAS)。该方案保证其解的价值至少为最优值的 $(1-\\epsilon)$ 倍，其中 $\\epsilon \\in (0, 1)$ 是用户指定的误差容忍度。FPTAS 的运作方式如下：\n\n1.  首先运行一个 2-近似算法来找到一个近似解的价值，记为 $P_{approx}$。该值保证满足 $OPT/2 \\le P_{approx} \\le OPT$，其中 $OPT$ 是真实最优解的价值。\n2.  使用公式 $K = \\frac{\\epsilon P_{approx}}{n}$ 计算一个缩放因子 $K$。\n3.  对于每个物品 $i$，其价值 $p_i$ 被转换为一个新的缩放后的整数价值 $p'_i = \\left\\lfloor \\frac{p_i}{K} \\right\\rfloor$。\n4.  然后使用这些新的缩放价值 $p'_i$ 和原始成本 $c_i$ 来精确求解该问题。这是通过一个动态规划算法完成的，该算法找到在满足预算 $C$ 的前提下，使总缩放价值 $\\sum p'_i$ 最大化的物品子集。\n5.  动态规划阶段的空间复杂度主要由可实现的缩放价值的范围决定。具体来说，该算法存储了从每个可能的总缩放价值到实现该价值的最小成本的映射。\n\n你的任务是确定对于任何满足成本约束 $C$ 的物品子集，其可能的最大总缩放价值 $\\sum p'_i$ 的一个上界。请用一个关于 $n$ 和 $\\epsilon$ 的解析表达式来表示你的答案。", "solution": "设 $S$ 为总成本至多为 $C$ 的任意物品子集。定义未缩放的价值为 $V(S)=\\sum_{i\\in S}p_{i}$，缩放后的价值为 $V'(S)=\\sum_{i\\in S}p'_{i}$。\n\n根据缩放的定义，对于每个物品 $i$：\n$$\np'_{i}=\\left\\lfloor \\frac{p_{i}}{K}\\right\\rfloor \\le \\frac{p_{i}}{K}。\n$$\n对任意可行子集 $S$ 求和，\n$$\nV'(S)=\\sum_{i\\in S}p'_{i}\\le \\sum_{i\\in S}\\frac{p_{i}}{K}=\\frac{V(S)}{K}。\n$$\n设 $OPT$ 表示所有可行子集的最优未缩放价值。那么对于任意可行子集 $S$，都有 $V(S)\\le OPT$，因此\n$$\nV'(S)\\le \\frac{OPT}{K}。\n$$\n使用所选的缩放因子 $K=\\frac{\\epsilon P_{approx}}{n}$，\n$$\n\\frac{OPT}{K}=\\frac{OPT}{\\epsilon P_{approx}/n}=\\frac{n}{\\epsilon}\\cdot\\frac{OPT}{P_{approx}}。\n$$\n根据 2-近似保证 $OPT/2\\le P_{approx}\\le OPT$，我们得到\n$$\n\\frac{OPT}{P_{approx}}\\le 2。\n$$\n因此，对于任意可行子集 $S$，\n$$\nV'(S)\\le \\frac{n}{\\epsilon}\\cdot\\frac{OPT}{P_{approx}}\\le \\frac{2n}{\\epsilon}。\n$$\n因此，所有可行子集的最大可能总缩放价值的上界为 $\\frac{2n}{\\epsilon}$。", "answer": "$$\\boxed{\\frac{2n}{\\epsilon}}$$", "id": "1425257"}]}