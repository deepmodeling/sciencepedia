{"hands_on_practices": [{"introduction": "让我们通过一个与经典的子集和问题及背包问题密切相关的练习来开启我们的实践之旅。这个练习要求你在一个给定的约束条件下，从一组物品中选择一个子集以最大化其总价值。通过解决这个具体的例子 [@problem_id:1438908]，你将亲身体验组合优化的核心挑战，并为理解为何需要像动态规划这样的伪多项式时间算法来有效解决更大规模的此类问题奠定基础。", "problem": "一位网络工程师正在为一台核心路由器配置流量整形策略。该路由器有一个暂存缓冲区，用于在转发前容纳一批数据包。为防止缓冲区膨胀并确保低延迟，实施了一条规则：任何单批数据包的总大小必须严格小于缓冲区的总容量。该缓冲区的总容量为 $W = 50$ 千字节（KB）。\n\n在某一时刻，有一组五个传入的数据包，其大小（单位：KB）如下：$\\{10, 15, 22, 27, 34\\}$。工程师需要从这些数据包中选择一个子集，组成一个批次以立即转发。目标是最大化所选批次中数据包的总大小，但需满足该总大小严格小于缓冲区容量 $W$ 的约束。每个数据包要么被完整地包含在批次中，要么完全不被包含；它不能被分片。\n\n根据给定的集合和指定的约束，可以创建的数据包批次的最大总大小是多少？请用千字节（KB）表示你的答案。", "solution": "我们必须在严格的容量约束下，最大化所选数据包大小子集的总大小。形式上，给定数据包大小 $\\{10,15,22,27,34\\}$ 和容量 $W=50$，选择一个子集 $S$ 来最大化 $\\sum_{s \\in S} s$，约束条件为 $\\sum_{s \\in S} s < 50$。每个数据包要么被包含，要么被排除。\n\n由于集合很小，我们可以枚举所有可能的和，并保留那些严格小于 $50$ 的和，然后取其中的最大值。\n\n单个数据包：\n$10, 15, 22, 27, 34$；最大的单个数据包大小为 $34$。\n\n两个数据包的组合：\n$10+15=25$，\n$10+22=32$，\n$10+27=37$，\n$10+34=44$，\n$15+22=37$，\n$15+27=42$，\n$15+34=49$，\n$22+27=49$，\n$22+34=56$（舍弃，因为它不小于 $50$），\n$27+34=61$（舍弃）。\n在满足约束条件的两个数据包组合中，最大的和是 $49$。\n\n三个数据包的组合：\n$10+15+22=47$，\n$10+15+27=52$（舍弃），\n$10+15+34=59$（舍弃），\n$10+22+27=59$（舍弃），\n$10+22+34=66$（舍弃），\n$10+27+34=71$（舍弃），\n$15+22+27=64$（舍弃），\n$15+22+34=71$（舍弃），\n$15+27+34=76$（舍弃），\n$22+27+34=83$（舍弃）。\n唯一有效的三数据包组合的和是 $47$。\n\n四个数据包的组合：\n$10+15+22+27=74$（舍弃），\n$10+15+22+34=81$（舍弃），\n$10+15+27+34=86$（舍弃），\n$10+22+27+34=93$（舍弃），\n$15+22+27+34=98$（舍弃）。\n所有组合的和都超过 $50$。\n\n五个数据包的组合：\n$10+15+22+27+34=108$（舍弃）。\n\n严格小于 $50$ 的最大有效总和可以通过组合 $15+34=49$ 或 $22+27=49$ 得到，因此最优的总大小为 $49$。", "answer": "$$\\boxed{49}$$", "id": "1438908"}, {"introduction": "在算法设计中，一个强大的技巧是将一个新问题转化为一个我们已经知道如何解决的熟悉问题。这个练习 [@problem_id:1438913] 完美地阐释了这一思想，它引导你将一个子集乘积问题，通过对数变换，巧妙地转换成一个子集和问题。这个过程不仅展示了数学工具（例如对数将乘法变为加法，即 $\\ln(a \\times b) = \\ln(a) + \\ln(b)$）在计算机科学中的应用，还引入了近似算法的概念，让你在实践中体会到问题简化的艺术。", "problem": "一位密码学家正在分析一个密码协议中使用的一组公共数值参数 $S$。该协议的安全性依赖于寻找 $S$ 的一个子集，该子集中元素的乘积等于一个秘密目标值 $P$ 的难度。为了分析潜在的漏洞，这位密码学家设计了一种基于动态规划的近似算法。\n\n该算法将子集乘积问题转化为整数子集和问题。步骤如下：\n1. 对集合 $S$ 中的每个参数 $s_k$，计算其转换后的权重 $w_k = \\text{round}(M \\cdot \\ln(s_k))$，其中 $M$ 是一个预定义的缩放因子，$\\ln$ 是自然对数。\n2. 计算转换后的目标权重 $W = \\text{round}(M \\cdot \\ln(P))$。\n3. 使用整数权重集合 $\\{w_1, w_2, \\ldots, w_n\\}$，找到一个权重子集，其和是满足 $W_{\\text{max}} \\le W$ 的最大可能值，我们称之为 $W_{\\text{max}}$。\n4. 最终结果是 $S$ 中与上一步所选权重对应的原始参数的乘积。\n\n你的任务是针对以下输入执行此算法，并找出最终的乘积。\n- 参数集合为 $S = \\{2, 3, 5, 7, 11\\}$。\n- 目标乘积为 $P = 100$。\n- 缩放因子为 $M = 100$。\n- `round()` 函数将实数四舍五入到最接近的整数。小数部分恰好为 0.5 的数字向上取整（例如，`round(2.5)` 是 3，而 `round(2.49)` 是 2）。\n\n计算通过此方法确定的原始参数的乘积。", "solution": "给定 $S=\\{2,3,5,7,11\\}$, $P=100$, $M=100$, 以及所描述的取整规则。该算法定义了整数权重 $w_{k}=\\operatorname{round}(M\\ln(s_{k}))$ 和目标 $W=\\operatorname{round}(M\\ln(P))$，然后找到 $w_{k}$ 的一个子集，其和在不超过 $W$ 的前提下最大化，最后返回相应原始 $s_{k}$ 的乘积。\n\n首先使用 $w_{k}=\\operatorname{round}(100\\ln(s_{k}))$ 计算转换后的权重：\n$$\n100\\ln(2)=69.31471805599453\\ \\Rightarrow\\ w_{2}=\\operatorname{round}(69.31471805599453)=69,\n$$\n$$\n100\\ln(3)=109.86122886681098\\ \\Rightarrow\\ w_{3}=\\operatorname{round}(109.86122886681098)=110,\n$$\n$$\n100\\ln(5)=160.94379124341003\\ \\Rightarrow\\ w_{5}=\\operatorname{round}(160.94379124341003)=161,\n$$\n$$\n100\\ln(7)=194.59101490553132\\ \\Rightarrow\\ w_{7}=\\operatorname{round}(194.59101490553132)=195,\n$$\n$$\n100\\ln(11)=239.78952727983707\\ \\Rightarrow\\ w_{11}=\\operatorname{round}(239.78952727983707)=240.\n$$\n计算转换后的目标：\n$$\nW=\\operatorname{round}(100\\ln(100))=\\operatorname{round}(460.5170185988092)=461.\n$$\n\n我们必须从 $\\{69,110,161,195,240\\}$ 中选择一个子集，其和最大但不能超过 $461$。通过考虑组合来评估可行的和：\n- 包含 $240$ 的情况：$240+195=435$ (可行)，$240+161=401$ (可行)，$240+110=350$ (可行)，$240+69=309$ (可行)；任何包含 $240$ 的三个数的和都超过 $461$，除了 $240+110+69=419$ (可行)。\n- 不包含 $240$ 的情况：$195+161=356$ (可行)，$195+110=305$ (可行)，$195+69=264$ (可行)，$161+110=271$ (可行)，$161+69=230$ (可行)，$110+69=179$ (可行)。在三数组合中，$195+161+110=466$ (过大)，$195+161+69=425$ (可行)，$195+110+69=374$ (可行)，$161+110+69=340$ (可行)。\n\n在这些和中，不超过 $461$ 的最大值是 $435=240+195$。因此，所选的权重对应于 $s=11$ 和 $s=7$。根据步骤4，最终的乘积是\n$$\n11\\times 7=77.\n$$", "answer": "$$\\boxed{77}$$", "id": "1438913"}, {"introduction": "现在，让我们将子集和问题背后的动态规划思想推广到一个更复杂的场景：在带有多重约束的图中寻找可行路径。在这个挑战性的练习 [@problem_id:1438964] 中，你需要在满足时间限制和能量消耗限制的双重条件下，规划一条从起点到终点的路径。此问题将促使你将搜索的状态从简单的“当前总和”扩展到包含（位置，已用时间，剩余能量）等多个维度的元组，从而展示了动态规划思想在解决复杂多维状态空间问题时的强大通用性。", "problem": "在遥远的未来，一位名叫 Spark 的信使必须使用一个连接着各个恒星系统的星门网络在一个深空区域中穿行。这些恒星系统被表示为一个有向图中的节点。任务是从起始系统（节点 `S`）前往目标系统（节点 `T`）。\n\n每次星门跳跃（由从节点 `U` 到节点 `V` 的一条有向边表示）都有两个相关的整数属性：\n1.  一个非负的时间 `cost(U, V)`（单位：小时）。\n2.  一个能量 `gain(U, V)`，它可以是正数（产生能量）、负数（消耗能量）或零。\n\nSpark 的飞船从节点 `S` 出发，初始能量储备为 $P_0$。飞船上配备了一个敏感的反应堆，如果能量储备变为负数，反应堆就会发生故障。能量水平在抵达每个节点时都会被检查。具体来说，对于任何路径 $v_0, v_1, \\dots, v_k$（其中 $v_0=S$），抵达节点 $v_j$ 时的能量水平由 $P_j = P_0 + \\sum_{i=0}^{j-1} \\text{gain}(v_i, v_{i+1})$ 给出。任务的约束条件是，对于所有的 $j=1, \\dots, k$，都有 $P_j \\ge 0$。\n\n整个任务必须在总计 $C$ 小时内完成。也就是说，路径中所有跳跃的成本之和不得超过 $C$。\n\n考虑以下具体任务参数：\n- 网络由四个节点组成：`S`（起点）、`A`、`B` 和 `T`（终点）。\n- 飞船的初始能量为 $P_0 = 5$ 单位。\n- 任务允许的最大时间为 $C = 10$ 小时。\n- 可用的星门跳跃有：\n    - `S` 到 `A`：`cost = 3`，`gain = -2`\n    - `A` 到 `B`：`cost = 0`，`gain = +3`\n    - `B` 到 `A`：`cost = 0`，`gain = -1`\n    - `B` 到 `T`：`cost = 5`，`gain = -10`\n\nSpark 是否有可能找到一条从 `S` 到 `T` 的路径，使其既满足时间限制，又满足在每个访问过的节点上的非负能量约束？\n\n从以下选项中选择正确的陈述。\n\nA. 是的，存在一条从 `S` 到 `T` 的有效路径。\n\nB. 不，不存在任何从 `S` 到 `T` 的路径。\n\nC. 不，存在从 `S` 到 `T` 且在时间限制内的路径，但没有一条能满足能量约束。\n\nD. 这个问题是病态的，因为某些路径允许任意大的能量水平，这使得能量约束变得无关紧要。", "solution": "我们将路径的可行性条件形式化。对于任何路径 $v_{0},v_{1},\\dots,v_{k}$，其中 $v_{0}=S$，抵达 $v_{j}$ 时的能量为\n$$\nP_{j}=P_{0}+\\sum_{i=0}^{j-1}\\text{gain}(v_{i},v_{i+1}),\n$$\n我们要求对于所有的 $j=1,\\dots,k$ 都有 $P_{j}\\ge 0$。总时间为\n$$\n\\sum_{i=0}^{k-1}\\text{cost}(v_{i},v_{i+1})\\le C.\n$$\n已知 $P_{0}=5$ 和 $C=10$，各条边为：\n- $S\\to A$：耗时 $3$，增益 $-2$。\n- $A\\to B$：耗时 $0$，增益 $+3$。\n- $B\\to A$：耗时 $0$，增益 $-1$。\n- $B\\to T$：耗时 $5$，增益 $-10$。\n\n首先，考虑直接路线 $S\\to A\\to B\\to T$：\n- 抵达 $A$：$P_{A}=5+(-2)=3\\ge 0$，到目前为止的时间为 $3$。\n- 抵达 $B$：$P_{B}=3+3=6\\ge 0$，到目前为止的时间为 $3$。\n- 抵达 $T$：$P_{T}=6+(-10)=-4<0$，总时间 $3+0+5=8\\le 10$。\n这条路径在 $T$ 点违反了能量约束。\n\n接下来，观察到环路 $A\\to B\\to A$ 的总耗时为 $0+0=0$，净能量增益为 $3+(-1)=2$。因此，每完成一次完整的 $A\\to B\\to A$ 环路，能量会增加 2，而时间不增加。设 $k\\in\\mathbb{Z}_{\\ge 0}$ 为在首次到达 $A$ 之后、前往 $T$ 之前所执行的这种环路的次数。\n\n逐步计算能量和时间：\n1. $S\\to A$：抵达时能量为\n$$\nP_{A}^{(0)}=5-2=3\\ge 0,\n$$\n时间为 $3$。\n2. 经过 $k$ 次 $A\\to B\\to A$ 环路后，再次抵达 $A$ 时的能量为\n$$\nP_{A}^{(k)}=P_{A}^{(0)}+2k=3+2k\\ge 0,\n$$\n总时间仍为 $3$，因为每次环路的耗时为 $0$。\n3. 继续 $A\\to B$ 前往 $T$ 的方向：抵达 $B$ 时的能量为\n$$\nP_{B}^{\\text{final}}=P_{A}^{(k)}+3=(3+2k)+3=6+2k\\ge 0,\n$$\n时间仍为 $3$。\n4. 最后 $B\\to T$：抵达 $T$ 时的能量为\n$$\nP_{T}=P_{B}^{\\text{final}}-10=(6+2k)-10=-4+2k.\n$$\n为了满足 $P_{T}\\ge 0$，我们需要\n$$\n-4+2k\\ge 0\\quad\\Longleftrightarrow\\quad k\\ge 2.\n$$\n选择最小的整数 $k=2$。那么所有中间过程的抵达能量都是非负的：\n- 从 $S\\to A$ 后：$3$。\n- 在每次环路中：对于 $m=0,1$，抵达 $B$ 时的能量为 $P_{A}^{(m)}+3=6+2m\\ge 6$，返回 $A$ 时的能量为 $5+2m\\ge 5$。\n- 在最后的 $A\\to B$ 之后：$10$。\n- 在 $B\\to T$ 之后：$0$。\n总时间为\n$$\n3\\ (\\text{用于 }S\\to A)+0\\ (\\text{环路})+0\\ (\\text{最后的 }A\\to B)+5\\ (\\text{用于 }B\\to T)=8\\le 10.\n$$\n因此，存在一条有效的路径。选项 B 和 C 是错误的。尽管存在一个零时间、正增益的环路，允许获得任意大的能量，但问题是关于在给定约束下是否存在满足条件的路径，这是一个适定问题；因此 D 不是此问题的正确选项。正确的陈述是 A。", "answer": "$$\\boxed{A}$$", "id": "1438964"}]}