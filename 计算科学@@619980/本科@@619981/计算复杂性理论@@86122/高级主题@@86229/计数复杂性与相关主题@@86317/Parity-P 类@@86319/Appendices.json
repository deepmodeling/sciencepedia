{"hands_on_practices": [{"introduction": "要真正理解一个计算复杂性类，最好的方法就是从一个具体而微观的例子入手。这个练习引入了一个名为“模约束系统”的假设场景，旨在帮助你建立对“奇偶性”在计算问题中的核心作用的直观认识。通过确定哪一个系统具有所谓的“奇偶完整性”，你实际上是在实践 ⊕P 类的基本思想：计算满足特定条件的解的数量是奇数还是偶数。[@problem_id:1454442]", "problem": "一个“模块化约束系统”（MCS）由一组 $n$ 个二元变量 $x_1, x_2, \\ldots, x_n$ 定义，其中每个 $x_i \\in \\{0, 1\\}$。对这些变量的一组特定赋值构成一个配置 $(x_1, x_2, \\ldots, x_n)$。如果一个配置满足一个给定的主导布尔逻辑公式，则该配置被认为是“稳定”的。\n\n该系统有一个诊断测试，用于检查一个称为“奇偶完整性”的全局属性。测试过程如下：一个初始化为 $0$ 的特殊奇偶校验位 $P$，每存在一个稳定配置，该位就翻转一次。如果比特 $P$ 的最终值为 $1$，则称该 MCS 具有“奇偶完整性”。\n\n考虑一个基础系统 $S_0$，它有 $n=3$ 个变量（$x_1, x_2, x_3$），其稳定配置是那些满足以下公式的配置：\n$$ \\phi_0 = (x_1 \\lor x_2) \\land (\\neg x_1 \\lor \\neg x_3) $$\n\n现在，考虑四个修改后的系统 $S_A, S_B, S_C, S_D$，每个系统都是通过向基础系统 $S_0$ 添加恰好一个新约束而创建的。这些修改后的系统中，哪一个具有奇偶完整性？\n\nA. 系统 $S_A$：将约束 $x_2 \\lor x_3$ 添加到 $S_0$。\n\nB. 系统 $S_B$：将约束 $x_2 \\leftrightarrow x_3$ 添加到 $S_0$。符号 $\\leftrightarrow$ 代表逻辑双条件（XNOR）。\n\nC. 系统 $S_C$：将约束 $x_1 \\oplus x_2 \\oplus x_3 = 1$ 添加到 $S_0$。符号 $\\oplus$ 代表异或（XOR）运算。\n\nD. 系统 $S_D$：将约束 $\\neg x_2 \\lor x_3$ 添加到 $S_0$。", "solution": "如果一个配置满足 $\\phi_{0}=(x_{1}\\lor x_{2})\\land(\\neg x_{1}\\lor \\neg x_{3})$，那么它就是稳定的。奇偶完整性测试为每个稳定配置翻转一次比特 $P$；因此，当且仅当稳定配置的数量为奇数时，系统具有奇偶完整性。\n\n首先，根据 $x_{1}$ 的不同情况，枚举满足 $\\phi_{0}$ 的配置。\n\n1) 如果 $x_{1}=0$，那么 $(x_{1}\\lor x_{2})$ 简化为 $x_{2}$，所以 $x_{2}=1$。子句 $(\\neg x_{1}\\lor \\neg x_{3})$ 变为 $(1\\lor \\neg x_{3})=1$，这对 $x_{3}$ 没有施加任何条件。因此，当 $x_{1}=0$ 时，满足条件的赋值为 $(0,1,0)$ 和 $(0,1,1)$。\n\n2) 如果 $x_{1}=1$，那么 $(x_{1}\\lor x_{2})$ 为 $1$，这对 $x_{2}$ 没有施加任何条件，而 $(\\neg x_{1}\\lor \\neg x_{3})$ 变为 $\\neg x_{3}$，所以 $x_{3}=0$。因此，当 $x_{1}=1$ 时，满足条件的赋值为 $(1,0,0)$ 和 $(1,1,0)$。\n\n因此，$\\phi_{0}$ 的稳定配置恰好是\n$$(0,1,0),\\quad (0,1,1),\\quad (1,0,0),\\quad (1,1,0)。$$\n\n现在施加每个附加约束，并计算剩余配置的数量。\n\nA. 添加 $x_{2}\\lor x_{3}$。对四个配置进行评估：\n- $(0,1,0)$: $1\\lor 0=1$ (保留)。\n- $(0,1,1)$: $1\\lor 1=1$ (保留)。\n- $(1,0,0)$: $0\\lor 0=0$ (舍弃)。\n- $(1,1,0)$: $1\\lor 0=1$ (保留)。\n数量 $=3$ (奇数) $\\Rightarrow$ 具有奇偶完整性。\n\nB. 添加 $x_{2}\\leftrightarrow x_{3}$，即 $x_{2}=x_{3}$。评估：\n- $(0,1,0)$: $1\\neq 0$ (舍弃)。\n- $(0,1,1)$: $1=1$ (保留)。\n- $(1,0,0)$: $0=0$ (保留)。\n- $(1,1,0)$: $1\\neq 0$ (舍弃)。\n数量 $=2$ (偶数) $\\Rightarrow$ 不具有奇偶完整性。\n\nC. 添加 $x_{1}\\oplus x_{2}\\oplus x_{3}=1$，即 1 的数量为奇数。评估：\n- $(0,1,0)$: 一个 $1$ (保留)。\n- $(0,1,1)$: 两个 $1$ (舍弃)。\n- $(1,0,0)$: 一个 $1$ (保留)。\n- $(1,1,0)$: 两个 $1$ (舍弃)。\n数量 $=2$ (偶数) $\\Rightarrow$ 不具有奇偶完整性。\n\nD. 添加 $\\neg x_{2}\\lor x_{3}$，即 $x_{2}\\Rightarrow x_{3}$。评估：\n- $(0,1,0)$: $\\neg 1\\lor 0=0\\lor 0=0$ (舍弃)。\n- $(0,1,1)$: $\\neg 1\\lor 1=0\\lor 1=1$ (保留)。\n- $(1,0,0)$: $\\neg 0\\lor 0=1\\lor 0=1$ (保留)。\n- $(1,1,0)$: $\\neg 1\\lor 0=0\\lor 0=0$ (舍弃)。\n数量 $=2$ (偶数) $\\Rightarrow$ 不具有奇偶完整性。\n\n只有系统 $S_{A}$ 产生奇数个稳定配置，因此只有 $S_{A}$ 具有奇偶完整性。", "answer": "$$\\boxed{A}$$", "id": "1454442"}, {"introduction": "在掌握了基本直觉后，下一步是将其与 ⊕P 类的形式化定义联系起来。本练习要求你考虑一个经典的图论问题——顶点覆盖，但关注的是其解数量的奇偶性。通过构建一个非确定性图灵机来判定该问题，你将学会如何将一个具体的组合问题映射到 ⊕P 的计算模型上，这是对问题进行复杂性分类的关键一步。[@problem_id:1454450]", "problem": "在图论中，一个无向图 $G=(V, E)$ 的**顶点覆盖** (vertex cover) 是一个顶点子集 $S \\subseteq V$，使得对于图中的每一条边 $(u, v) \\in E$，$u$ 或 $v$ 中至少有一个顶点在 $S$ 中。顶点覆盖的大小是集合 $S$ 中的顶点数量。\n\n在计算复杂性理论中，复杂性类 ⊕P（读作“Parity P”，奇偶P）被定义为所有语言 $A$ 的集合，对于其中的每个语言 $A$，都存在一个多项式时间的非确定性图灵机（NTM）$M$，使得对于任意输入串 $x$，$x$ 属于 $A$ 当且仅当 $M$ 在输入 $x$ 上的接受计算路径的数量为奇数。\n\n考虑以下语言，我们称之为 PARITY-VC：\n$$L = \\{ \\langle G, k \\rangle \\mid G \\text{ 是一个无向图，它恰好有奇数个大小为 } k \\text{ 的不同顶点覆盖} \\}$$\n此处，$\\langle G, k \\rangle$ 表示图 $G$ 和整数 $k$ 的一个合适的编码。\n\n以下哪个陈述最准确地描述了语言 $L$ 的复杂性？\n\nA. $L$ 属于 P（可在多项式时间内解决的问题类）。\n\nB. $L$ 是 NP完全的。\n\nC. $L$ 属于 ⊕P。\n\nD. 判定 $L$ 中的成员资格是不可判定的。", "solution": "我们需要刻画以下语言的复杂性\n$$L=\\{\\langle G,k\\rangle \\mid G \\text{ 恰好有奇数个大小为 k 的不同顶点覆盖}\\}.$$\n根据 ⊕P 的定义，一个语言 $A$ 属于 ⊕P，如果存在一个多项式时间的非确定性图灵机 $M$，使得对于每个输入 $x$，$x\\in A$ 当且仅当 $M$ 在输入 $x$ 上的接受计算路径的数量为奇数。\n\n为了证明 $L \\in \\oplus\\text{P}$，我们构造一个这样的 $M$，它在输入 $\\langle G=(V,E),k\\rangle$ 上，在多项式时间内执行以下操作：\n\n1. 设 $V=\\{v_{1},\\dots,v_{n}\\}$。非确定性地猜测一个二进制串 $b_{1}\\dots b_{n}$，我们将其解释为子集 $S\\subseteq V$ 的特征向量，其中 $v_{i}\\in S$ 当且仅当 $b_{i}=1$。\n\n2. 确定性地计算 $s=\\sum_{i=1}^{n} b_{i}$。如果 $s\\neq k$，则在这条路径上拒绝。\n\n3. 如果 $s=k$，则构造 $S=\\{v_{i}:b_{i}=1\\}$ 并确定性地验证 $S$ 是一个顶点覆盖，即，对于每条边 $(u,v)\\in E$，检查是否有 $u\\in S$ 或 $v\\in S$。如果这个条件成立，则接受；否则，拒绝。\n\n所有检查的时间复杂度都是关于 $|V|+|E|$ 的多项式。子集 $S\\subseteq V$ 和二进制串 $b_{1}\\dots b_{n}$ 之间存在一一对应关系，因此每个大小恰好为 $k$ 的子集 $S$ 都恰好产生一条在 $s=k$ 时到达步骤3的计算路径。因此，$M$ 在输入 $\\langle G,k\\rangle$ 上的接受路径数量恰好是图 $G$ 中大小为 $k$ 的顶点覆盖的数量。因此，\n$$\\langle G,k\\rangle\\in L \\iff \\text{$M$ 在 $\\langle G,k\\rangle$ 上的接受路径数量是奇数},$$\n根据定义，这意味着 $L \\in \\oplus\\text{P}$。\n\n因此，在给定的选项中，最准确的陈述是 $L$ 属于 ⊕P。\n\n为完整起见，我们讨论其他选项：目前不知道也不认为 $L$ 属于 P 类；它不是一个 NP-完全语言，因为它不是一个标准的 NP 判定问题（它关心的是奇偶性而非存在性）；并且它显然是可判定的，因此不是不可判定的。正确的选项是 C。", "answer": "$$\\boxed{C}$$", "id": "1454450"}, {"introduction": "复杂性理论不仅在于对问题进行分类，还在于理解不同问题之间的相互关系。这个练习通过比较两个紧密相关的问题 ODD-SAT 和 EVEN-SAT，引导你探索归约（reduction）这一强大工具。你将学习如何利用一个问题的“预言机”（oracle）来解决另一个问题，这不仅加深了你对 ⊕P 完备问题的理解，也展示了复杂性理论中精妙的逻辑推理。[@problem_id:1454447]", "problem": "在计算复杂性理论中，我们通常根据解决问题所需的资源来对问题进行分类。除了判定问题，我们还可以考虑计数问题。对于一个给定的布尔公式 $\\phi$，令 $\\#\\text{SAT}(\\phi)$ 表示 $\\phi$ 的不同可满足赋值的数量。函数复杂性类 $\\#\\text{P}$ 由这样一类函数组成：它们计数一个在多项式时间内运行的非确定性图灵机的接受路径的数量。计算 $\\#\\text{SAT}$ 是一个典范的 #P-完全问题。\n\n从计数类中，我们可以定义新的判定类。其中一个这样的类是 Parity-P (⊕P)，它包含所有可由一个多项式时间非确定性图灵机解决的判定问题，该图灵机当且仅当其接受计算路径的数量为奇数时接受输入。⊕P 的典范完全问题是 $\\text{ODD-SAT}$，即所有具有奇数个可满足赋值的布尔公式构成的语言。\n\n考虑一个相关的语言 $\\text{EVEN-SAT}$，它被定义为所有具有正偶数个可满足赋值的布尔公式的集合。形式化地：\n$$ \\text{EVEN-SAT} = \\{\\phi \\mid \\#\\text{SAT}(\\phi) > 0 \\text{ and } \\#\\text{SAT}(\\phi) \\equiv 0 \\pmod 2 \\} $$\n\n根据以上定义，下列关于 $\\text{EVEN-SAT}$ 复杂性的陈述中，哪一个是正确的？\n\nA. $\\text{EVEN-SAT}$ 属于 NP 类。\n\nB. $\\text{EVEN-SAT}$ 属于 co-NP 类。\n\nC. $\\text{EVEN-SAT}$ 是 $\\text{ODD-SAT}$ 的补集。\n\nD. $\\text{ODD-SAT}$ 可以由一台可以访问 $\\text{EVEN-SAT}$ 预言机的确定性图灵机在多项式时间内解决。", "solution": "问题要求我们确定关于语言 $\\text{EVEN-SAT}$ 复杂性的正确陈述。我们将逐一分析每个选项。\n\n设 $\\phi$ 是一个有 $n$ 个变量的布尔公式。\n语言 $\\text{ODD-SAT}$ 定义为 $\\{\\phi \\mid \\#\\text{SAT}(\\phi) \\equiv 1 \\pmod 2\\}$。\n语言 $\\text{EVEN-SAT}$ 定义为 $\\{\\phi \\mid \\#\\text{SAT}(\\phi) > 0 \\text{ and } \\#\\text{SAT}(\\phi) \\equiv 0 \\pmod 2\\}$。\n\n**选项 A 分析：$\\text{EVEN-SAT}$ 属于 NP。**\n一个语言 $L$ 属于 NP，如果对于每个实例 $x \\in L$，都存在一个多项式长度的证书，该证书可以在多项式时间内被验证。对于 $\\phi \\in \\text{EVEN-SAT}$，一个可能的证书是它的一个可满足赋值。验证机当然可以在多项式时间内检查一个给定的赋值是否满足 $\\phi$。然而，这只证明了 $\\#\\text{SAT}(\\phi) > 0$。它没有提供关于可满足赋值总数是否为偶数的信息。要知道总数是偶数，似乎需要将它们全部数出来，而这是一个 $\\#\\text{P}$-难问题。对于“偶数性”这一性质，目前没有已知的可在多项式时间验证的多项式长度证书。因此，目前尚不知道 $\\text{EVEN-SAT}$ 是否属于 NP。\n\n**选项 B 分析：$\\text{EVEN-SAT}$ 属于 co-NP。**\n如果一个语言 $L$ 的补集 $\\bar{L}$ 属于 NP，那么该语言 $L$ 属于 co-NP。$\\text{EVEN-SAT}$ 的补集是不在 $\\text{EVEN-SAT}$ 中的所有公式的集合。\n$$ \\overline{\\text{EVEN-SAT}} = \\{\\phi \\mid \\neg(\\#\\text{SAT}(\\phi) > 0 \\text{ and } \\#\\text{SAT}(\\phi) \\text{ is even})\\} $$\n$$ \\overline{\\text{EVEN-SAT}} = \\{\\phi \\mid \\#\\text{SAT}(\\phi) = 0 \\text{ or } \\#\\text{SAT}(\\phi) \\text{ is odd}\\} $$\n这是语言 $\\text{UNSAT}$ (无解的公式) 和 $\\text{ODD-SAT}$ 的并集。为了证明 $\\overline{\\text{EVEN-SAT}}$ 属于 NP，我们需要为任何不可满足或具有奇数个解的公式 $\\phi$ 提供一个证书。如果 $\\phi$ 有奇数个解，单个可满足赋值可以作为证书，但验证机将面临与选项A中相同的问题：它无法确认解的总数是奇数。如果 $\\phi$ 是不可满足的，则没有已知的短证书（这就是 $\\text{UNSAT}$ 是 co-NP-完全问题的本质）。由于没有已知的能适用于 $\\overline{\\text{EVEN-SAT}}$ 中所有情况的统一证书，因此目前尚不知道它是否属于 NP。因此，目前尚不知道 $\\text{EVEN-SAT}$ 是否属于 co-NP。\n\n**选项 C 分析：$\\text{EVEN-SAT}$ 是 $\\text{ODD-SAT}$ 的补集。**\n语言 $\\text{ODD-SAT}$ 是 $\\{\\phi \\mid \\#\\text{SAT}(\\phi) \\text{ is odd}\\}$。\n它的补集 $\\overline{\\text{ODD-SAT}}$ 是所有不具有奇数个可满足赋值的公式的集合。\n$$ \\overline{\\text{ODD-SAT}} = \\{\\phi \\mid \\#\\text{SAT}(\\phi) \\text{ is even}\\} $$\n这包括那些 $\\#\\text{SAT}(\\phi) = 0$ 的公式。\n语言 $\\text{EVEN-SAT}$ 是 $\\{\\phi \\mid \\#\\text{SAT}(\\phi) > 0 \\text{ and } \\#\\text{SAT}(\\phi) \\text{ is even}\\}$。\n这两个集合是不同的。例如，一个不可满足的公式 $\\phi$ (例如 $x \\land \\neg x$) 有 $\\#\\text{SAT}(\\phi)=0$，这是一个偶数。所以，$\\phi \\in \\overline{\\text{ODD-SAT}}$，但 $\\phi \\notin \\text{EVEN-SAT}$，因为解的数量不是正数。因此，$\\text{EVEN-SAT}$ 不是 $\\text{ODD-SAT}$ 的补集。\n\n**选项 D 分析：$\\text{ODD-SAT}$ 可以由一台可以访问 $\\text{EVEN-SAT}$ 预言机的确定性图灵机在多项式时间内解决。**\n该陈述声称存在一个从 $\\text{ODD-SAT}$ 到 $\\text{EVEN-SAT}$ 的多项式时间归约。让我们尝试为 $\\text{ODD-SAT}$ 构建一个使用 $\\text{EVEN-SAT}$ 预言机的算法。设预言机为 `isEvenSat(formula)`。\n\n一个判断给定公式 $\\phi$ 是否在 $\\text{ODD-SAT}$ 中的算法如下：\n1. 调用预言机 `isEvenSat`($\\phi$)。\n2. 如果 `isEvenSat`($\\phi$) 返回 TRUE，这意味着 $\\#\\text{SAT}(\\phi)$ 是正偶数。因此，$\\#\\text{SAT}(\\phi)$ 不是奇数。算法返回 FALSE。\n3. 如果 `isEvenSat`($\\phi$) 返回 FALSE，根据 `EVEN-SAT` 的定义，这意味着 $\\#\\text{SAT}(\\phi) = 0$ 或 $\\#\\text{SAT}(\\phi)$ 是奇数。我们必须区分这两种情况。\n4. 为了区分它们，我们构造一个新公式 $\\phi'$。设 $\\phi$ 有 $n$ 个变量 $x_1, \\dots, x_n$。我们创建一个带有额外新变量 $y$ 的 $\\phi'$：\n   $$ \\phi' = \\phi \\lor y $$\n   $\\phi'$ 的变量是 $(x_1, \\dots, x_n, y)$。我们来计算 $\\phi'$ 的可满足赋值的数量。\n   如果一个赋值满足 $\\phi$ 或者满足 $y$，那么它就满足 $\\phi'$。这些赋值可以根据 $y$ 的值分为两组：\n   - 如果 $y=1$：公式 $\\phi'$ 变为 $\\phi \\lor 1$，它恒为 TRUE。任何对 $x_1, \\dots, x_n$ 的赋值都将满足 $\\phi'$。这样的赋值有 $2^n$ 个。\n   - 如果 $y=0$：公式 $\\phi'$ 变为 $\\phi \\lor 0$，这等价于 $\\phi$。对 $x_1, \\dots, x_n$ 的可满足赋值数量为 $\\#\\text{SAT}(\\phi)$。\n   $\\phi'$ 的可满足赋值总数是这两个不相交情况的和：\n   $$ \\#\\text{SAT}(\\phi') = \\#\\text{SAT}(\\phi) + 2^n $$\n   让我们假设变量数 $n \\ge 1$，因此 $2^n$ 是一个正偶整数。\n   \n5. 现在，我们根据步骤3中 $\\#\\text{SAT}(\\phi)$ 的两种可能性来分析 $\\#\\text{SAT}(\\phi')$：\n   - 情况 3a：如果 $\\#\\text{SAT}(\\phi) = 0$，那么 $\\#\\text{SAT}(\\phi') = 0 + 2^n = 2^n$。由于 $n \\ge 1$，$\\#\\text{SAT}(\\phi')$ 是一个正偶数。因此，在这种情况下，$\\phi' \\in \\text{EVEN-SAT}$。\n   - 情况 3b：如果 $\\#\\text{SAT}(\\phi)$ 是奇数，那么 $\\#\\text{SAT}(\\phi') = \\text{奇数} + \\text{偶数} = \\text{奇数}$。奇数不可能是0。所以 $\\#\\text{SAT}(\\phi')$ 是一个正奇数。因此，在这种情况下，$\\phi' \\notin \\text{EVEN-SAT}$。\n   \n6. 现在我们可以使用我们的预言机对 $\\phi'$ 进行查询来区分这两种情况。\n   调用 `isEvenSat`($\\phi'$)。\n   - 如果 `isEvenSat`($\\phi'$) 返回 TRUE，我们处于情况 3a，意味着 $\\#\\text{SAT}(\\phi) = 0$。这不是奇数。算法返回 FALSE。\n   - 如果 `isEvenSat`($\\phi'$) 返回 FALSE，我们处于情况 3b，意味着 $\\#\\text{SAT}(\\phi)$ 是奇数。算法返回 TRUE。\n\n这个完整的算法在多项式时间内判定了 $\\text{ODD-SAT}$。它对 `EVEN-SAT` 进行了两次预言机调用，并涉及一个多项式时间的 $\\phi'$ 构造过程。因此，选项 D 中的陈述是正确的。\n\n最终结论：选项 A、B 和 C 是不正确的。选项 D 是正确的。", "answer": "$$\\boxed{D}$$", "id": "1454447"}]}