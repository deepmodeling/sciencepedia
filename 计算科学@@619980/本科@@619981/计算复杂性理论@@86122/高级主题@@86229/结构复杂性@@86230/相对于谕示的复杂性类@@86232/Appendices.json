{"hands_on_practices": [{"introduction": "我们的第一个动手实践旨在建立对预言机（oracle）能力的一个基础直觉。我们从一个看似反直觉的问题开始：如果这个“神奇”的黑盒子只能解决一个我们已经能够高效解决的问题，会发生什么？通过分析一个本身就在 $P$ 类中的预言机语言，这个练习揭示了预言机增强计算能力的一个基本条件，并帮助我们理解 $P^A = P$ 这一重要结论的底层逻辑。[@problem_id:1417408]", "problem": "在计算理论中，神谕图灵机（oracle Turing machine, OTM）是一种用于研究判定问题的抽象机器。它是在标准图灵机的基础上增加了一个黑盒组件，称为神谕（oracle）。在其计算的任何时刻，OTM 都可以将一个查询字符串 $w$ 写入一条特殊的神谕带，并进入一个查询状态。在一个计算步骤中，神谕会提供一个“是”或“否”的答案，以表明查询字符串 $w$ 是否属于一个固定的语言 $A$，该语言被称为神谕语言。\n\n复杂度类 $P^A$ 被定义为所有能由带神谕 $A$ 的确定性 OTM 在多项式步数（该多项式以输入字符串的长度为变量）内判定的语言的集合。标准复杂度类 $P$ 是所有能由标准确定性图灵机（无神谕）在多项式时间内判定的语言的集合。\n\n设字母表为 $\\Sigma = \\{0, 1\\}$。考虑一个特定的神谕语言 $A$，它由所有长度为奇数的二进制字符串组成。即，$A = \\{w \\in \\{0, 1\\}^* \\mid |w| \\text{ is odd}\\}$。\n\n下列哪个陈述正确描述了复杂度类 $P^A$（使用此特定神谕 $A$）与标准复杂度类 $P$ 之间的关系？\n\nA. $P^A = P$\n\nB. $P \\subset P^A$ （意为 $P$ 是 $P^A$ 的真子集）\n\nC. $P^A \\subset P$ （意为 $P^A$ 是 $P$ 的真子集）\n\nD. $P^A$ 与 $P$ 不可比较（意为没有一个类是另一个类的子集）\n\nE. 在不知道 $P = NP$ 是否成立的情况下，无法确定该关系。", "solution": "问题要求我们确定复杂度类 $P$ 和 $P^A$ 之间的关系，其中神谕 $A$ 是所有长度为奇数的二进制字符串的语言。要确定这种关系，我们必须检查两个方向的子集包含关系：即 $P \\subseteq P^A$ 是否成立，以及 $P^A \\subseteq P$ 是否成立。\n\n首先，我们证明 $P \\subseteq P^A$。\n设 $L$ 是 $P$ 中的任意语言。根据 $P$ 的定义，存在一个标准的确定性图灵机 $M$，它能在多项式时间内判定 $L$。假设 $M$ 在长度为 $n$ 的输入上的运行时间以一个多项式 $p(n)$ 为界。我们可以构造一个神谕图灵机 $M^A$ 来判定 $L$。这台机器 $M^A$ 只是简单地模拟标准机器 $M$ 对其输入的计算步骤，并完全忽略神谕。由于 $M$ 从不进行神谕查询，因此 $M^A$ 也从不需要使用其神谕。$M^A$ 的运行时间与 $M$ 的运行时间相同，即 $p(n)$。因此，$M^A$ 是一个在多项式时间内判定 $L$ 的神谕图灵机。这意味着 $L \\in P^A$。由于我们选择的 $L \\in P$ 是任意的，我们可以得出结论 $P \\subseteq P^A$。请注意，对于任何神谕语言 $A$，这个包含关系都成立。\n\n接下来，我们证明 $P^A \\subseteq P$。\n设 $L'$ 是 $P^A$ 中的任意语言。根据 $P^A$ 的定义，存在一个确定性神谕图灵机 $M^A$，它能在多项式时间内判定 $L'$。假设 $M^A$ 在长度为 $n$ 的输入上的运行时间以一个多项式 $q(n)$ 为界。\n\n关键在于分析神谕 $A$。神谕语言是 $A = \\{w \\in \\{0, 1\\}^* \\mid |w| \\text{ is odd}\\}$。对这个神谕进行关于给定字符串 $w$ 的查询，就是请求确定 $w \\in A$ 是否成立。这等价于询问字符串 $w$ 的长度是否为奇数。\n这个检查可以通过一个标准算法来执行。一台标准的（非神谕）图灵机可以将字符串 $w$ 作为输入，从头到尾读取它以计算其长度 $|w|$，然后确定数字 $|w|$ 是否为奇数。计算 $w$ 长度所需的时间与 $|w|$ 成正比，即 $O(|w|)$。检查得到的整数是否为奇数在计算上是微不足道的。因此，对字符串 $w$ 的神谕查询可以由一台标准图灵机在以查询字符串 $w$ 的长度为变量的多项式时间内模拟。具体来说，语言 $A$ 属于 $P$（实际上，它属于线性时间，即 $DTIME(O(n))$）。\n\n现在，我们可以构造一台不带神谕的标准确定性图灵机 $M'$ 来判定语言 $L'$。$M'$ 将模拟 $M^A$ 的执行过程。\n$M'$ 的操作如下：\n1. 它模拟 $M^A$ 的每个计算步骤。\n2. 当模拟进行到 $M^A$ 将要对字符串 $w$ 进行神谕查询时，$M'$ 会暂停主模拟。\n3. 然后，它运行一个子程序来判定 $w \\in A$ 是否成立。如上所述，该子程序计算 $w$ 的长度并检查其是否为奇数。\n4. 根据该子程序返回的“是”或“否”的结果，$M'$ 从相应的状态（“是”状态或“否”状态）恢复对 $M^A$ 的模拟，就像 $M^A$ 在从其神谕接收到答案后所做的那样。\n\n最后，我们来分析 $M'$ 的运行时间。神谕机 $M^A$ 在长度为 $n$ 的输入上运行时间为 $q(n)$。在任何单个步骤中，$M^A$ 最多只能在其神谕带上写入一个符号。因此，$M^A$ 产生的任何查询字符串 $w$ 的长度都必须满足 $|w| \\le q(n)$。\n$M'$ 模拟单个关于字符串 $w$ 的神谕查询所需的时间是关于 $|w|$ 的多项式，比如说 $O(|w|)$。由于 $|w| \\le q(n)$，模拟一次查询的时间就以关于 $n$ 的多项式为界，例如 $O(q(n))$。\n在最坏的情况下，$M^A$ 可能在其计算的每一步都进行一次神谕查询。总步数最多为 $q(n)$。因此，$M'$ 的总时间是模拟 $M^A$ 的非查询步骤的时间加上模拟所有查询的总时间之和。\n$M'$ 的总运行时间 $\\approx$ (非查询步骤数) + (查询次数) $\\times$ (每次查询模拟的时间)。\n其上界为 $q(n) + q(n) \\times O(q(n)) = O(q(n)^2)$。\n由于 $q(n)$ 是关于 $n$ 的多项式，因此 $q(n)^2$ 也是关于 $n$ 的多项式。因此，$M'$ 是一个在多项式时间内判定语言 $L'$ 的标准确定性图灵机。\n这意味着 $L' \\in P$。由于我们选择的 $L' \\in P^A$ 是任意的，我们可以得出结论 $P^A \\subseteq P$。\n\n既然我们已经证明了 $P \\subseteq P^A$ 和 $P^A \\subseteq P$，那么这两个类必然相等：$P^A = P$。这对应于选项 A。\n一般而言，复杂度理论中有一个有用的定理指出，对于任何语言 $A$，如果 $A \\in P$，那么 $P^A = P$。我们这个特定的神谕 $A$ 可在线性时间内判定，因此 $A \\in P$，该定理直接导出了这个结果。", "answer": "$$\\boxed{A}$$", "id": "1417408"}, {"introduction": "在理解了“简单”预言机不会带来额外计算能力之后，我们自然会问：一个“困难”的预言机能做什么？这个练习将我们的多项式时间图灵机与一个极为强大的预言机配对，该预言机可以解决 PSPACE-完全问题 TQBF。通过这个实践，你将证明一个多项式时间机器如何能利用这样的预言机，将其计算能力提升到整个 PSPACE 级别，从而深刻理解 $P^{\\text{C-complete}} = C$ 这一普适性原则。[@problem_id:1417452]", "problem": "一个理论计算机科学的研究小组正在探索“黑箱”计算的能力。他们正在研究一个模型，其中一个标准的多项式时间计算机可以访问一个特殊的硬件加速器，即一个“谕示机”（oracle），该谕示机可以瞬时解决真量化布尔公式（True Quantified Boolean Formula, TQBF）问题的任何实例。众所周知，TQBF问题是 PSPACE-完备的。\n\n让我们将其形式化。一个谕示图灵机（oracle Turing machine）是一种带有特殊“谕示带”（oracle tape）和“查询状态”（query state）的图灵机。当机器进入查询状态时，如果写在谕示带上的字符串属于谕示机的语言，那么它将在一个计算步骤内被替换为“1”，否则被替换为“0”。\n\n对于一个复杂性类 $\\mathcal{C}$ 和一个语言 $A$，类 $\\mathcal{C}^A$ 被定义为可由一个谕示图灵机判定的语言集合，该谕示图灵机在 $\\mathcal{C}$ 的资源限制内运行，并使用一个针对语言 $A$ 的谕示机。\n\n已知 TQBF 是 PSPACE-完备的，下列哪个陈述正确描述了类 $P^{\\text{TQBF}}$（可在多项式时间内用 TQBF 谕示机判定的语言）与类 PSPACE（可在多项式空间内判定的语言）之间的关系？\n\nA. $P^{\\text{TQBF}} = \\text{NP}$\n\nB. $P^{\\text{TQBF}} = \\text{PSPACE}$\n\nC. $P^{\\text{TQBF}} = \\text{EXPTIME}$\n\nD. $P^{\\text{TQBF}} = \\text{P}$\n\nE. 从给定的信息中无法确定此关系。", "solution": "我们使用谕示图灵机的定义以及 TQBF 的 PSPACE-完备性。\n\n首先，回想一下 TQBF 在多项式时间多对一归约下是 PSPACE-完备的。也就是说，对于每个语言 $L \\in \\text{PSPACE}$，存在一个多项式时间可计算的函数 $f$，使得对于所有输入 $x$，\n$$\nx \\in L \\quad \\Longleftrightarrow \\quad f(x) \\in \\text{TQBF}.\n$$\n这直接给出了包含关系 $\\text{PSPACE} \\subseteq \\text{P}^{\\text{TQBF}}$：一个带有 $\\text{TQBF}$ 谕示机的确定性多项式时间谕示机可以通过在多项式时间内计算 $f(x)$ 并对 $\\text{TQBF}$ 进行单次谕示查询来判定 $L$。形式上，\n$$\n\\text{PSPACE} \\subseteq \\text{P}^{\\text{TQBF}}.\n$$\n\n对于反向的包含关系，注意到 $\\text{TQBF} \\in \\text{PSPACE}$。设 $M$ 是一个任意带有 $\\text{TQBF}$ 谕示机的确定性多项式时间谕示图灵机。我们用一个只使用多项式空间的确定性图灵机 $S$ 来模拟 $M$。模拟器 $S$ 维护 $M$ 的工作带，并且每当 $M$ 对一个字符串 $y$ 进行谕示查询时，$S$ 就使用一个针对 $\\text{TQBF}$ 的多项式空间算法来判定 $y \\in \\text{TQBF}$ 是否成立，将相应的位作为谕示答案写回，然后继续模拟 $M$。因为：\n- $M$ 在多项式时间内运行，所以它最多进行多项式次查询，并且每个查询字符串的长度都是输入规模的多项式。\n- 判定每次谕示查询使用关于 $|y|$ 的多项式空间，因此是关于原始输入规模的多项式空间。\n- 空间可以在不同查询之间重用。\n\n所以 $S$ 所使用的总空间是输入规模的多项式。因此，$\\text{P}^{\\text{TQBF}}$ 中的每个语言都在 $\\text{PSPACE}$ 中，即，\n$$\n\\text{P}^{\\text{TQBF}} \\subseteq \\text{PSPACE}.\n$$\n\n结合这两个包含关系可得\n$$\n\\text{P}^{\\text{TQBF}} = \\text{PSPACE}.\n$$\n\n在这些选项中，这对应于选项 B。", "answer": "$$\\boxed{B}$$", "id": "1417452"}, {"introduction": "最后的这个实践将我们的思维从“我们能获得多大的能力？”转向“我们如何巧妙地使用有限的预言机调用？”。这个练习介绍了一种更具策略性的预言机使用方法——有界查询。你将探索如何通过对一个 NP-完全预言机（如 SAT）进行对数级次数的查询，来解决一些看似比 NP 更难的复杂问题，例如精确找到图中的最大团大小。这个练习不仅展示了预言机作为解决优化问题算法模型的实用价值，还引出了计算复杂性理论中重要的“多项式时间谱系”（polynomial hierarchy）的预备概念。[@problem_id:1417455]", "problem": "令 $SAT$ 为所有可满足布尔公式的语言。预言图灵机 (oracle Turing machine) 是一种带有一条特殊的“预言”带和一个查询状态的图灵机。为查询预言机，该机器在其预言带上写入一个字符串 $q$，并进入查询状态。在单个计算步骤中，如果 $q \\in SAT$，预言机机制会将预言带的内容替换为‘1’；如果 $q \\notin SAT$，则替换为‘0’。\n\n考虑一个复杂性类，我们将其记作 $\\mathcal{C}_{\\log}$，它包含所有语言 $L$。对于每个这样的语言 $L$，存在一台确定性多项式时间预言图灵机 $M$ 能判定 $L$，且满足以下条件：对于任意长度为 $n = |x|$ 的输入 $x$，机器 $M$ 对 $SAT$ 预言机进行的查询次数最多为 $c \\cdot \\log(n)$，其中 $c > 0$ 是某个常数。\n\n以下哪些语言属于类 $\\mathcal{C}_{\\log}$？选择所有适用的选项。\n\nA. `MAX-CLIQUE-SIZE-IS-EVEN`：所有编码了一个无向图 $G = (V, E)$ 的字符串的语言，其中 $G$ 中最大团的大小是一个偶数。对于此问题，输入大小 $n$ 取为顶点数 $|V|$。\n\nB. `UNIQUE-SAT`：所有编码了一个布尔公式 $\\phi$ 的字符串的语言，该公式恰好有一个满足的赋值。对于此问题，输入大小 $n$ 是公式编码的长度 $|\\phi|$。\n\nC. `SAT-UNSAT`：所有编码了一对布尔公式 $(\\phi_1, \\phi_2)$ 的字符串的语言，使得 $\\phi_1$ 是可满足的，而 $\\phi_2$ 是不可满足的。对于此问题，输入大小 $n$ 是这对公式编码的长度 $|(\\phi_1, \\phi_2)|$。\n\nD. `MAJORITY-SAT`：所有编码了一个含有 $k$ 个变量的布尔公式 $\\phi$ 的字符串的语言，使得 $\\phi$ 有严格多于 $2^{k-1}$ 个满足的赋值。对于此问题，输入大小 $n$ 是公式编码的长度 $|\\phi|$。", "solution": "我们回顾一下定义：一个语言 $L$ 属于 $\\mathcal{C}_{\\log}$，如果存在一台确定性多项式时间预言图灵机 $M$ 和一个常数 $c>0$，使得对于每个长度为 $n=|x|$ 的输入 $x$，$M$ 在对 $SAT$ 预言机进行最多 $c\\cdot \\log(n)$ 次查询的同时，判定 $x\\in L$ 是否成立。对数可以取任何固定的底，因为乘法常数可以被吸收到 $c$ 中。\n\n我们通过显式地构造一个使用最多 $O(\\log n)$ 次对 $SAT$ 的预言机查询来判定该语言的多项式时间过程，来分析每个选项。\n\nA. MAX-CLIQUE-SIZE-IS-EVEN。\n设输入编码了一个图 $G=(V,E)$，并令 $n=|V|$。定义单调谓词\n$$\nP(k)\\ \\equiv\\ \\text{“$G$ 包含一个大小至少为 $k$ 的团”}。\n$$\n对于每个整数 $k$（$0\\leq k\\leq n$），存在一个到 $SAT$ 的多项式时间多一归约，它产生一个布尔公式 $\\Phi_{G,k}$，使得\n$$\n\\Phi_{G,k}\\in SAT\\ \\Longleftrightarrow\\ P(k).\n$$\n函数 $P(k)$ 是关于 $k$ 单调递减的：如果 $P(k)$ 成立，那么对于所有 $k'\\leq k$，$P(k')$ 也成立；如果 $P(k)$ 不成立，那么对于所有 $k'\\geq k$，$P(k')$ 也不成立。因此，存在一个唯一的阈值 $k^{\\star}\\in\\{0,1,\\dots,n\\}$，使得 $P(k)$ 恰好在 $k\\leq k^{\\star}$ 时成立，并且 $k^{\\star}$ 是最大团的大小。\n\n我们可以通过查询 $\\Phi_{G,k}$ 来使用 $P(k)$ 的预言机，在区间 $[0,n]$ 上进行二分搜索，从而精确地求出 $k^{\\star}$。具体来说：\n- 初始化 $\\ell\\leftarrow 0$, $r\\leftarrow n$。\n- 当 $\\ell<r$ 时, 设置 $m\\leftarrow \\left\\lfloor \\frac{\\ell+r+1}{2}\\right\\rfloor$，对 $\\Phi_{G,m}$ 查询预言机。\n- 如果预言机回答 1（意味着 $P(m)$ 成立），设置 $\\ell\\leftarrow m$；否则设置 $r\\leftarrow m-1$。\n- 终止时，$\\ell=r=k^{\\star}$。\n\n这个循环最多进行 $\\lceil \\log_{2}(n+1)\\rceil$ 次预言机查询。在得到 $k^{\\star}$ 后，我们在确定性多项式时间内计算 $k^{\\star}\\bmod 2$，当且仅当结果为 0 时接受。因此，该语言可以在多项式时间内通过 $O(\\log n)$ 次 SAT 查询来判定，所以它属于 $\\mathcal{C}_{\\log}$。\n\nB. UNIQUE-SAT。\n给定一个变量为 $x=(x_{1},\\dots,x_{k})$ 的布尔公式 $\\phi$，我们使用最多两次 $SAT$ 查询来判定它是否恰好只有一个满足的赋值：\n- 首先，对 $\\phi$ 本身查询预言机。如果预言机回答 0，那么 $\\phi$ 是不可满足的，因此不属于 `UNIQUE-SAT`；拒绝。\n- 否则，在多项式时间内构造一个关于两组不相交的变量副本 $x$ 和 $y$ 的公式，定义为\n$$\n\\psi(x,y)\\ :=\\ \\phi(x)\\ \\wedge\\ \\phi(y)\\ \\wedge\\ \\left(\\bigvee_{i=1}^{k} (x_{i}\\oplus y_{i})\\right),\n$$\n其中 $x_{i}\\oplus y_{i}$ 表示异或约束，它可以通过多项式时间转换编码为合取范式。公式 $\\psi$ 是可满足的，当且仅当 $\\phi$ 至少有两个不同的满足赋值。对 $\\psi$ 查询预言机。\n- 如果预言机回答 0，则 $\\phi$ 恰好只有一个满足的赋值；接受。如果回答 1，则 $\\phi$ 至少有两个满足的赋值；拒绝。\n\n该算法最多使用 2 次 SAT 查询，对于一个合适的常数 $c$ 来说，这在 $c\\cdot \\log(n)$ 的范围内（并且对于小的 $n$，机器可以硬编码一个无需查询的判定）。因此 `UNIQUE-SAT` 属于 $\\mathcal{C}_{\\log}$。\n\nC. SAT-UNSAT。\n给定一对公式 $(\\phi_{1},\\phi_{2})$，通过两次 SAT 查询来判定 $\\phi_{1}$ 是否可满足以及 $\\phi_{2}$ 是否不可满足：\n- 对 $\\phi_{1}$ 查询预言机；如果回答为 0，则拒绝。\n- 对 $\\phi_{2}$ 查询预言机；如果回答为 1，则拒绝；否则接受。\n\n这显然是一个最多使用 2 次 SAT 查询的确定性多项式时间过程，因此该语言属于 $\\mathcal{C}_{\\log}$。\n\nD. MAJORITY-SAT。\n该语言询问一个含有 $k$ 个变量的公式 $\\phi$ 是否有严格多于 $2^{k-1}$ 个满足的赋值。这是经典的 MAJSAT 问题，它在多项式时间多一归约下是 PP-完全的。另一方面，$\\mathcal{C}_{\\log}$ 中的任何语言都位于 $P^{NP[O(\\log n)]}$ 中，而 $P^{NP[O(\\log n)]}$ 被包含在多项式谱系的第二层（具体在 $\\Delta_{2}^{P}$ 内，通常记作 $\\Theta_{2}^{P}$）。目前没有已知的、使用 $O(\\log n)$ 次对 $SAT$ 的查询来判定 MAJSAT 的确定性多项式时间算法，并且，相对于预言机，PP 不被包含在多项式谱系中，而 $\\mathcal{C}_{\\log}\\subseteq PH$ 这个关系是相对化的。因此，尽管我们可以为 A、B 和 C 给出显式的 $O(\\log n)$ 查询算法，但对于 D，尚无已知的此类算法，并且标准的复杂性假设排除了它属于 $\\mathcal{C}_{\\log}$ 的可能性。\n\n结论：A、B 和 C 属于 $\\mathcal{C}_{\\log}$；D 尚不知道是否属于，且在标准假设下它不属于。", "answer": "$$\\boxed{ABC}$$", "id": "1417455"}]}