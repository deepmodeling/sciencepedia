{"hands_on_practices": [{"introduction": "在我们能够应用马哈尼定理之前，我们必须能够识别其关键前提：一个稀疏语言。这个练习提供了一个动手机会，将稀疏性的形式化定义应用于一个我们熟悉的数论问题——合数语言 $\\text{COMPOSITES}$，并判断它是否符合稀疏的条件。通过这个实践，你将学会区分那些在数学上规模庞大但计算上是“稠密”的集合，与那些真正的“稀疏”集合。[@problem_id:1431120]", "problem": "在计算复杂性理论中，如果存在一个多项式 $p(n)$，使得对于所有正整数 $n$，语言 $L \\subseteq \\{0,1\\}^*$ 中长度为 $n$ 的字符串数量至多为 $p(n)$，那么该语言 $L$ 被定义为**稀疏**（sparse）语言。也就是说， $|L \\cap \\{0,1\\}^n| \\le p(n)$。\n\n**Mahaney 定理**指出，如果任何稀疏语言是 NP完全的，那么 P = NP。\n\n现在，考虑语言 $\\text{COMPOSITES}$，它被定义为所有表示合数的二进制字符串的集合。例如，字符串 \"110\"（表示整数 6）在 $\\text{COMPOSITES}$ 中，而字符串 \"101\"（表示整数 5）则不在。\n\n假设一位计算机科学家证明了 $\\text{COMPOSITES}$ 语言是 NP完全的。基于这个假设的证明，下列哪个陈述正确地解释了为什么 Mahaney 定理**不能**被用来立即得出 P = NP 的结论？\n\nA. 语言 $\\text{COMPOSITES}$ 不是一个稀疏语言。\n\nB. 已知语言 $\\text{COMPOSITES}$ 不在 NP 类中。\n\nC. Mahaney 定理仅适用于已知在 P 类中的语言。\n\nD. 素数的数量是有限的，这意味着 $\\text{COMPOSITES}$ 不是稀疏的。\n\nE. Mahaney 定理不能应用于数论问题。", "solution": "根据定义，如果存在一个多项式 $p(n)$，使得对于所有正整数 $n$，都有 $|L \\cap \\{0,1\\}^{n}| \\leq p(n)$，那么语言 $L \\subseteq \\{0,1\\}^{*}$ 是稀疏的。\n\nMahaney 定理指出：如果存在一个（在多项式时间多一归约下）NP完全的稀疏语言，则 $\\mathrm{P}=\\mathrm{NP}$。因此，要将 Mahaney 定理应用于任何特定的 NP完全语言 $L$，该语言 $L$ 必须是稀疏的。\n\n考虑 $L=\\text{COMPOSITES}$。对于每个整数 $n \\geq 3$，我们考察 $\\{0,1\\}^{n}$ 的一个子集，该子集由最高有效位为 $1$、最低有效位为 $0$ 的字符串组成。这样的字符串恰好有 $2^{n-2}$ 个，因为第一位固定为 $1$，最后一位固定为 $0$，剩下的 $n-2$ 位是任意的。每个这样的字符串都编码了区间 $[2^{n-1},\\,2^{n}-2]$ 内的一个偶数。这个区间内的每个偶数都大于 $2$，因此是合数。所以，\n$$\n|\\text{COMPOSITES} \\cap \\{0,1\\}^{n}| \\;\\geq\\; 2^{n-2} \\quad \\text{for all } n \\geq 3.\n$$\n由于 $2^{n-2}$ 随 $n$ 指数级增长，对于任何多项式 $p(n)$，都存在一个 $n$ 使得 $2^{n-2} > p(n)$。因此，不存在一个多项式 $p(n)$ 能作为所有 $n$ 的 $|\\text{COMPOSITES} \\cap \\{0,1\\}^{n}|$ 的上界，所以 $\\text{COMPOSITES}$ 不是稀疏的。\n\n因此，即使在 $\\text{COMPOSITES}$ 是 NP完全的假设下，Mahaney 定理也不能被援引来得出 $\\mathrm{P}=\\mathrm{NP}$ 的结论，因为它的先决条件（即该 NP完全语言是稀疏的）不成立。在这些选项中，这正是陈述 A。陈述 B、C、D 和 E 都是不正确的：COMPOSITES 属于 NP 类；Mahaney 定理不要求语言在 P 类中；素数的集合是无限的；并且该定理并未被限制不适用于数论相关的语言。", "answer": "$$\\boxed{A}$$", "id": "1431120"}, {"introduction": "数学定理是精确的逻辑陈述，术语上的微小差异可能导致巨大的结论差异。这个练习旨在解决一个常见的混淆点：NP-难 (NP-hard) 与 NP-完全 (NP-complete) 之间的区别。通过分析一个有缺陷的论证，你将巩固对马哈尼定理在 $P \\neq NP$ 假设下真正蕴含了什么，以及它*并未*蕴含什么的理解。[@problem_id:1431081]", "problem": "在计算复杂性理论中，我们分析解决计算问题所需的资源。该分析依赖于几个关键定义：\n\n- **语言 (language)** 是有限字母表上的一组字符串。我们可以将语言看作是代表一个判定问题，其中语言中的字符串是“是”实例。\n- 如果存在一个多项式 $p(n)$，使得语言 $S$ 中长度至多为 $n$ 的字符串数量受 $p(n)$ 的限制，则该语言 $S$ 被称为**稀疏的 (sparse)**。通俗地说，对于给定的输入大小，稀疏语言的“是”实例数量是多项式有界的。\n- 如果非确定性多项式时间 (NP) 问题类中的每个问题都可以在多项式时间内归约到语言 $L$，则语言 $L$ 是 **NP-难 (NP-hard)** 的。NP-难问题至少与 NP 中最难的问题一样难。\n- 如果一个语言 $L$ 既是 NP-难的，又本身属于 NP 类，则它是 **NP-完备 (NP-complete)** 的。\n- **Mahaney 定理** 指出：如果一个稀疏语言是 NP-完备的，则 P = NP。\n\n一名在计算复杂性理论入门课程中的学生基于这些定义提出了以下论证：\n\n“研究人员的压倒性共识是 P $\\neq$ NP。让我们接受这个作为工作假设继续进行。Mahaney 定理的逆否命题是：如果 P $\\neq$ NP，则没有稀疏语言可以是 NP-完备的。这是一个直接的逻辑推论。由此，我们可以得出结论，假设 P $\\neq$ NP，则没有稀疏语言可以是 NP-难的。”\n\n该学生的最终结论在逻辑上是有缺陷的。以下哪个陈述最准确地指出了学生推理中的错误？\n\nA. 该学生正确地陈述了 Mahaney 定理的逆否命题，但得出了一个不正确的最终结论。一个不是 NP-完备的语言不一定不是 NP-难的；它可能是 NP-难的，但不属于 NP。\n\nB. 该学生的论证是无效的，因为 P $\\neq$ NP 假设未经证实，因此不能在有效的逻辑论证中用作前提。\n\nC. 稀疏集的概念与 NP-难性不兼容。根据定义，一个 NP-难问题必须有一个稠密的实例集，以便允许所有 NP 问题的归约，因此稀疏的 NP-难语言是一个自相矛盾的术语。\n\nD. 该学生错误地表述了 Mahaney 定理的逆否命题。正确的逆否命题是：“如果 P = NP，则至少存在一个不是 NP-完备的稀疏语言。”", "solution": "我们从 Mahaney 定理开始：“如果一个稀疏语言是 NP-完备的，则 $P=NP$。”逻辑上等价的逆否命题是：“如果 $P \\neq NP$，则没有稀疏语言是 NP-完备的。”学生对逆否命题的陈述是正确的。\n\n接下来，回顾定义：一个语言是 NP-完备的，当且仅当它既是 NP-难的又属于 $NP$。因此，\n- “不是 NP-完备”意味着“或者不是 NP-难的，或者不属于 $NP$（或两者兼有）。”\n- 因此，从“没有稀疏语言是 NP-完备的”不能得出“没有稀疏语言是 NP-难的”这一结论，因为逻辑上可能存在一个稀疏语言是 NP-难的但不属于 $NP$。\n\n因此，学生的错误在于从“没有稀疏语言是 NP-完备的”到“没有稀疏语言是 NP-难的”这个无效的推断。正确的识别是，“不是 NP-完备”并不意味着“不是 NP-难的”，因为一个语言可以是 NP-难的而不属于 $NP$。\n\n评估各个选项：\n- A 正确地指出了这个逻辑错误：一个语言可能因为它不属于 $NP$ 而不是 NP-完备的，但它仍然可以是 NP-难的。\n- B 是不正确的：在条件论证中使用 $P \\neq NP$ 作为工作假设在逻辑上是没问题的。\n- C 是错误的：稀疏性和 NP-难性在定义上并非不兼容。\n- D 给出了一个不正确的逆否命题；学生的逆否命题已经是正确的了。\n\n因此，最准确地指出错误的是 A。", "answer": "$$\\boxed{A}$$", "id": "1431081"}, {"introduction": "马哈尼定理不仅仅是一个关于复杂性类坍缩的陈述，其证明过程本身包含了一种强大的构造性方法。这个最后的实践挑战你像一个计算复杂性理论家一样思考，将证明的核心思想——在多项式时间内枚举一个稀疏集——转化为一个实际的算法。你将设计一个方法来找到一个 $\\text{SAT}$ 公式的首个字典序满足赋值，这展示了理论结果如何能为解决具体问题提供蓝图。[@problem_id:1431119]", "problem": "在计算复杂性理论中，不同复杂性类之间的关系是一个核心研究对象。Mahaney 定理揭示了 NP (非确定性多项式时间) 类与稀疏集之间的一个深刻联系。如果存在一个多项式 $p(n)$，使得对于所有长度 $n$，集合 $S$ 中长度为 $n$ 的字符串数量（即 $|S \\cap \\{0,1\\}^n|$）受 $p(n)$ 的限制，则称集合 $S$ 是稀疏的。\n\nMahaney 定理指出，如果任何 NP-完全问题都存在到某个稀疏集的多项式时间多一归约，则 P = NP。该证明中使用的一个关键技术是，在此假设下，可以首先在多项式时间内（使用一个 SAT 预言机）计算普查函数，然后同样在多项式时间内枚举出稀疏集 $S$ 中直到给定长度的所有成员。\n\n考虑布尔可满足性 (SAT) 问题。假设 SAT 通过一个可计算的归约函数 $f$ 可多项式时间多一归约到一个稀疏集 $S$。设 $\\phi$ 是一个给定的、含有 $n$ 个变量 $\\{x_1, \\ldots, x_n\\}$ 的可满足布尔公式。你的任务是找出 $\\phi$ 的字典序最小的满足赋值。如果一个赋值 $(v_1, \\ldots, v_n) \\in \\{0, 1\\}^n$ 在与另一个赋值 $(v'_1, \\ldots, v'_n)$ 第一个不同的索引 $i$ 处满足 $v_i < v'_i$（视 0 小于 1），则称其字典序更小。\n\n下列哪个选项最好地描述了一个正确的、在多项式时间内运行的高效算法，该算法通过改编 Mahaney 定理证明中的技术来找到 $\\phi$ 的字典序最小的满足赋值？\n\nA. 对可能的赋值空间进行二分搜索。在每一步中，构造一个新公式，断言赋值在某个特定的字典序范围内。使用归约 $f$ 和一个稀疏集 $S$ 的预言机来检查这个新公式的可满足性。\n\nB. 应用标准的 SAT 自归约算法。对从 $1$ 到 $n$ 的每个变量 $x_i$，创建临时公式 $\\phi' = \\phi[x_i=0]$。为了判断 $\\phi'$ 是否可满足，计算其归约 $f(\\phi')$ 并查询稀疏集 $S$ 的预言机。如果查询返回“是”，则固定 $x_i=0$；否则，固定 $x_i=1$。\n\nC. 首先，使用带 SAT 查询的二分搜索，为所有相关长度 $m$ 计算普查函数 $C_S(m)$。然后，对于给定的公式 $\\phi$，使用归约 $f$ 和普查信息来确认其可满足性。如果是，则输出一个预先计算的、对所有可满足公式都有效的通用满足赋值。\n\nD. 首先，使用一个涉及二分搜索和 SAT 预言机（即“普查函数计算技术”）的多项式时间过程，找到并列出稀疏集 $S$ 中所有长度不超过 $f(\\psi)$ 最大可能长度的字符串，其中 $\\psi$ 是从 $\\phi$ 派生的任何子问题。存储这些字符串。然后，对 $\\phi$ 执行标准的自归约搜索，其中对每个子问题的可满足性检查都是通过计算其归约并在预先计算的 $S$ 字符串列表中检查其是否存在来实现的。", "solution": "我们给定一个从 SAT 到一个稀疏集 $S \\subseteq \\{0,1\\}^{*}$ 的多一归约 $f$，这意味着对于任何布尔公式 $\\psi$，$\\psi$ 可满足当且仅当 $f(\\psi) \\in S$。集合 $S$ 是稀疏的，因此存在一个多项式 $p$，使得对于所有 $n$ 都有 $|S \\cap \\{0,1\\}^n| \\le p(n)$。\n\n我们必须通过改编 Mahaney 定理证明中使用的技术，为给定的、含有变量 $\\{x_{1},\\ldots,x_{n}\\}$ 的可满足公式 $\\phi$ 找到其字典序最小的满足赋值。关键技术是：\n1) 使用 SAT 预言机为所有相关长度 $m$ 计算普查函数，以及\n2) 使用该普查函数在多项式时间内枚举出 $S$ 中所有长度不超过这些长度的成员。\n\n首先，确定一个多项式 $q$ 作为归约 $f$ 输出长度的上界。由于 $f$ 是在多项式时间内可计算的，因此存在一个多项式 $q$，使得对于任何长度为 $|\\psi|$ 的输入 $\\psi$，我们都有 $|f(\\psi)| \\le q(|\\psi|)$。在对 $\\phi$ 进行标准的 SAT 自归约过程中，我们仅通过固定 $\\phi$ 中变量的前缀来创建子公式 $\\psi$，因此对于某个常数 $c$，每个这样的 $\\psi$ 的大小最多为 $c|\\phi|$。定义\n$$\nL = q(c|\\phi|).\n$$\n那么对于自归约过程中派生的每个子公式 $\\psi$，都有 $|f(\\psi)| \\le L$。\n\n使用 Mahaney 定理证明中的普查函数计算技术和一个 SAT 预言机，我们在多项式时间内计算出所有 $m \\le L$ 的普查函数值。然后，再次使用相同的技术，我们枚举集合\n$$\nT = \\{ y \\in S : |y| \\le L \\}.\n$$\n这个枚举过程在多项式时间内是可行的，因为 $|T|$ 由 $L$ 的多项式限定，并且如证明中所示，枚举的每一步都可以通过在字典序区间上进行二分搜索并结合 SAT 预言机查询来引导。我们存储 $T$ 以便进行成员资格查找。\n\n现在执行标准的自归约过程来找到字典序最小的满足赋值。对于从 $1$ 到 $n$ 的 $i$：\n- 设 $\\psi$ 是通过将 $x_{1},\\ldots,x_{i-1}$ 固定为已选定的值，并将 $x_{i}$ 设置为 $0$ 而得到的公式。\n- 在多项式时间内计算 $y = f(\\psi)$。\n- 由于 $|y| \\le L$，我们有 $\\psi$ 可满足当且仅当 $y \\in S$，这等价于 $y \\in T$，因为 $T = S \\cap \\{0,1\\}^{\\le L}$。如果 $y \\in T$，则设置 $x_{i}=0$；否则，设置 $x_{i}=1$。\n\n正确性：在每一步中，我们尽可能选择 $x_{i}=0$，从而确保最终得到的赋值在所有满足赋值中是字典序最小的。等价关系 $\\psi \\in \\text{SAT} \\Leftrightarrow f(\\psi) \\in S$ 保证了检查 $y \\in T$ 能够精确地判定每个子问题 $\\psi$ 的可满足性。\n\n复杂性：计算 $L$ 和 $f(\\psi)$ 的时间是关于 $|\\phi|$ 的多项式时间。借助于带有 SAT 预言机的普查函数计算技术，计算普查函数和枚举 $T$（对于 $m \\le L$）是多项式时间的，并且 $|T|$ 是多项式有界的。自归约过程执行 $n$ 次成员资格检查 $y \\in T$，每次检查都可以通过查表在多项式时间内完成。因此，整个过程在多项式时间内运行。\n\n在这些选项中，这与选项 D 的描述完全一致：首先使用普查函数计算技术枚举出 $S$ 直到所需的最大输出长度，然后运行标准的自归约，同时通过检查归约后的像是否在预计算的列表中来回答每个可满足性查询。选项 B 假定可以直接访问 $S$-预言机，而不是通过枚举来模拟它；选项 A 没有改编普查枚举，并且不是典型的 Mahaney 风格的方法；选项 C 是不正确的，因为不存在通用的满足赋值。", "answer": "$$\\boxed{D}$$", "id": "1431119"}]}