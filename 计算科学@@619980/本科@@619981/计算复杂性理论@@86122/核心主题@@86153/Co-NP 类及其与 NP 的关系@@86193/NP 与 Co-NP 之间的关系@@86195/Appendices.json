{"hands_on_practices": [{"introduction": "本练习是一个经典的思维实验，旨在揭示 NP 完全问题与 co-NP 完全问题之间深刻的对偶关系。通过设想我们拥有一个能瞬间解决布尔可满足性问题 (SAT) 的“预言机”，我们将探索如何利用它来解决其互补问题——重言式问题 (TAUTOLOGY)。这个过程不仅展示了如何将一个 co-NP 问题转化为一个 NP 问题，也具体化了 NP 和 co-NP 类在定义上的对称性 [@problem_id:1444878]。", "problem": "在计算复杂性理论领域，一种被称为预言机的假设机器可以在单个计算步骤内解决一个特定的判定问题。假设您可以使用一个能解决布尔可满足性问题 (SAT) 的预言机。该预言机接收任何布尔公式作为输入，并立即返回两种输出之一：如果存在至少一种对变量的真值指派能够使公式为真，则返回“SATISFIABLE”；否则返回“UNSATISFIABLE”。\n\n您的任务是使用这个 SAT 预言机来解决一个重言式 (TAUTOLOGY) 问题的实例。一个布尔公式是重言式，如果它对于其变量的*所有*可能的真值指派都求值为真。\n\n给定一个包含变量集 $\\{x_1, x_2, \\ldots, x_n\\}$ 的任意布尔公式 $\\psi$，以下哪个过程能正确判断 $\\psi$ 是否为重言式？\n\nA. 构造公式 $\\phi = \\psi$。将 $\\phi$ 输入到 SAT 预言机。当且仅当预言机报告“SATISFIABLE”时，得出结论 $\\psi$ 是一个重言式。\n\nB. 构造公式 $\\phi = \\psi$。将 $\\phi$ 输入到 SAT 预言机。当且仅当预言机报告“UNSATISFIABLE”时，得出结论 $\\psi$ 是一个重言式。\n\nC. 构造公式 $\\phi = \\neg\\psi$。将 $\\phi$ 输入到 SAT 预言机。当且仅当预言机报告“SATISFIABLE”时，得出结论 $\\psi$ 是一个重言式。\n\nD. 构造公式 $\\phi = \\neg\\psi$。将 $\\phi$ 输入到 SAT 预言机。当且仅当预言机报告“UNSATISFIABLE”时，得出结论 $\\psi$ 是一个重言式。\n\nE. 重言式问题无法使用 SAT 预言机解决，因为重言式问题是 co-NP完全问题，而 SAT 是 NP完全问题。", "solution": "目标是使用一个能解决布尔可满足性问题 (SAT) 的预言机来判断给定的布尔公式 $\\psi$ 是否为重言式。\n\n根据定义，一个公式 $\\psi$ 是重言式，如果它对于其变量的*所有*可能的真值指派都为真。\n\n让我们考虑这个陈述的否定形式。公式 $\\psi$ *不是*重言式，如果存在*至少一个*真值指派使得 $\\psi$ 为假。\n\n如果存在一个真值指派使得 $\\psi$ 为假，那么根据逻辑非的定义，同样的真值指派必定会使公式 $\\neg\\psi$ 为真。\n\n反过来，如果存在一个真值指派使得 $\\neg\\psi$ 为真，那么同样的指派必定会使 $\\psi$ 为假。这意味着 $\\psi$ 并非对所有指派都为真，因此它不是一个重言式。\n\n因此，我们建立了一个关键的逻辑等价关系：\n公式 $\\psi$ *不是*重言式 $\\iff$ 存在至少一个指派使得 $\\neg\\psi$ 为真。\n\n“存在至少一个指派使得 $\\neg\\psi$ 为真”这个陈述，正是公式 $\\neg\\psi$ 可满足的定义。SAT 预言机就是用来回答这个确切问题的。如果我们将公式 $\\neg\\psi$ 提供给 SAT 预言机，当存在这样的指派时，它将返回“SATISFIABLE”。\n\n因此，我们可以更新我们的等价关系：\n公式 $\\psi$ *不是*重言式 $\\iff$ 公式 $\\neg\\psi$ 是可满足的。\n\n然而，问题要求的是 $\\psi$ *是*重言式的条件。我们可以通过对上述等价关系的两边取非来找到这个条件。“$\\psi$ 不是重言式”的否定是“$\\psi$ 是重言式”。“$\\neg\\psi$ 是可满足的”的否定是“$\\neg\\psi$ 是不可满足的”（或者说“$\\neg\\psi$ is unsatisfiable”）。\n\n这就给了我们最终的、决定性的等价关系：\n公式 $\\psi$ *是*重言式 $\\iff$ 公式 $\\neg\\psi$ 是不可满足的。\n\n因此，正确的步骤是：\n1.  取输入公式 $\\psi$。\n2.  构造一个新公式 $\\phi$，它是输入公式的否定，即 $\\phi = \\neg\\psi$。\n3.  将这个新公式 $\\phi$ 输入到 SAT 预言机。\n4.  如果预言机返回“UNSATISFIABLE”，我们可以得出结论 $\\psi$ 是一个重言式。如果它返回“SATISFIABLE”，我们得出结论 $\\psi$ 不是一个重言式。\n\n这个过程与选项 D 相符。\n\n让我们分析一下为什么其他选项是错误的：\n- 选项 A：测试 $\\psi$ 是否可满足，只能告诉我们 $\\psi$ 不是一个矛盾式。一个公式可以是可满足的，但不是重言式（例如，$\\psi = x_1$）。\n- 选项 B：测试 $\\psi$ 是否不可满足，是在测试 $\\psi$ 是否是一个矛盾式（即对所有指派都为假），这与重言式正好相反。\n- 选项 C：这个选项颠倒了结论。如果 $\\neg\\psi$ 是可满足的，这意味着 $\\psi$ *不是*一个重言式。\n- 选项 E：这是一个常见的误解。存在一个像 SAT 这样的 NP完全问题的预言机，可以高效地解决复杂性类 NP 中的所有问题，以及 co-NP 类中的所有问题。由于重言式问题 (TAUTOLOGY) 是典型的 co-NP完全问题，它确实可以使用 SAT 预言机来解决。所描述的过程是在给定预言机的情况下，将一个 co-NP 问题多项式时间归约到一个 NP 问题的一个例子。", "answer": "$$\\boxed{D}$$", "id": "1444878"}, {"introduction": "这个思想实验将引导我们探讨一个假设性的重大发现可能带来的理论冲击。TAUTOLOGY 是一个经典的 co-NP 完全问题，这意味着它的“是”实例难以找到简短证明。如果我们假设 TAUTOLOGY 同样也属于 NP，即它的“是”实例存在一个可在多项式时间内验证的证明，这将对整个计算复杂性理论产生深远影响。本练习将帮助你推导这一发现如何直接导致 $NP = \\text{co-NP}$ 这一重大结论 [@problem_id:1444859]。", "problem": "在计算复杂性理论中，决策问题根据解决它们所需的资源被划分为不同的类。两个基本的类是 NP 和 co-NP。\n\n- **NP 类（非确定性多项式时间）**包含所有决策问题，对于这些问题，一个“是”实例的解可以在给定一个合适的证书或证明的情况下，由一个确定性图灵机在多项式时间内验证。\n- **co-NP 类**包含所有其补问题在 NP 类中的决策问题。等价地，如果一个问题的“否”实例有一个可以在多项式时间内验证的证书，那么该问题就属于 co-NP。\n\n考虑 **TAUTOLOGY**（重言式）问题：给定一个布尔逻辑公式，该公式对于其变量的所有可能真值赋值是否都为真？例如，公式 `A or (not A)` 是一个重言式。\n\nTAUTOLOGY 属于 co-NP 是一个公认的结论。现在，考虑一个假设情景：一位计算机科学家证明了 TAUTOLOGY 也属于 NP。对于这些复杂性类之间的关系，以下哪项是最直接且最重要的推论？\n\nA. P = NP\n\nB. NP = co-NP\n\nC. SAT（布尔可满足性问题）将被证明属于 P。\n\nD. 复杂性类 PSPACE 将坍缩到 NP。\n\nE. P ≠ NP", "solution": "我们回顾一下标准的定义和归约。$\\mathrm{coNP}$ 类是 $\\mathrm{NP}$ 中语言的补集所构成的集合，且补运算满足 $A \\in \\mathrm{NP} \\iff A^{c} \\in \\mathrm{coNP}$ 以及 $A \\in \\mathrm{coNP} \\iff A^{c} \\in \\mathrm{NP}$。语言 $\\mathrm{TAUT}$（重言式布尔公式的集合）是一个在多项式时间多一归约下的著名 $\\mathrm{coNP}$-完全问题。形式上，对于每一个 $L \\in \\mathrm{coNP}$，存在一个多项式时间可计算的函数 $f$，使得\n$$\nx \\in L \\iff f(x) \\in \\mathrm{TAUT}.\n$$\n假设 $\\mathrm{TAUT} \\in \\mathrm{NP}$。那么对于任何 $L \\in \\mathrm{coNP}$ 且 $L \\leq_{m}^{p} \\mathrm{TAUT}$，由于 $\\mathrm{NP}$ 在多项式时间多一归约下是封闭的，我们得到\n$$\nL \\in \\mathrm{NP}.\n$$\n因此，\n$$\n\\mathrm{coNP} \\subseteq \\mathrm{NP}.\n$$\n接下来，使用补集。因为 $\\mathrm{TAUT} \\in \\mathrm{NP}$，我们有 $\\mathrm{TAUT}^{c} \\in \\mathrm{coNP}$。此外，因为 $\\mathrm{TAUT}$ 是 $\\mathrm{coNP}$-完全的，它的补集 $\\mathrm{TAUT}^{c}$ 是 $\\mathrm{NP}$-完全的。确实，对于任何 $L \\in \\mathrm{NP}$，我们有 $L^{c} \\in \\mathrm{coNP}$，因此存在一个多项式时间归约 $f$ 满足\n$$\nx \\in L^{c} \\iff f(x) \\in \\mathrm{TAUT} \\quad \\Longrightarrow \\quad x \\in L \\iff f(x) \\in \\mathrm{TAUT}^{c},\n$$\n所以 $L \\leq_{m}^{p} \\mathrm{TAUT}^{c}$。由于 $\\mathrm{TAUT}^{c} \\in \\mathrm{coNP}$ 并且 $\\mathrm{coNP}$ 在多项式时间多一归约下是封闭的，因此对于任何 $L \\in \\mathrm{NP}$，\n$$\nL \\in \\mathrm{coNP}.\n$$\n所以，\n$$\n\\mathrm{NP} \\subseteq \\mathrm{coNP}.\n$$\n结合这两个包含关系可得\n$$\n\\mathrm{NP} = \\mathrm{coNP}.\n$$\n这是最直接且最重要的推论。仅凭此假设，并不能推导出其他列出的任何坍缩（例如 $\\mathrm{P}=\\mathrm{NP}$ 或 $\\mathrm{PSPACE}$ 坍缩到 $\\mathrm{NP}$）。因此，正确选项是 B。", "answer": "$$\\boxed{B}$$", "id": "1444859"}, {"introduction": "本练习探讨了一个连接 $P$、$NP$ 和 $co-NP$ 三大核心复杂性类的终极场景。一个问题如果同时是 NP-hard 和 co-NP-hard，它就位于计算难度的“十字路口”。如果这样一个关键问题被证明存在多项式时间解法（即属于 $P$ 类），它将像推倒第一块多米诺骨牌一样，引发整个复杂性层级的剧烈坍塌。通过解决这个问题，你将亲手推导出 $P = NP = co-NP$ 这一惊人但逻辑严谨的结论 [@problem_id:1444869]。", "problem": "在计算复杂性理论中，我们根据解决判定问题所需的资源对它们进行分类。我们来定义几个关键的复杂性类：\n- **P (多项式时间):** 可被一个算法在步数是输入规模的多项式函数内解决的判定问题类。\n- **NP (非确定性多项式时间):** 对于一个“是”的答案，若给定一个合适的证据，便可以在多项式时间内验证的判定问题类。\n- **co-NP:** 其补问题在 NP 类中的判定问题类。等价地，这些问题的一个“否”的答案可以在多项式时间内被验证。\n\n如果存在一个多项式时间的算法，能将问题 $L_1$ 的任何实例转换为问题 $L_2$ 的一个实例，且答案（“是”或“否”）保持不变，那么我们称问题 $L_1$ 可多项式时间归约到问题 $L_2$。如果 NP 类中的每个问题都可以多项式时间归约到某个问题，那么该问题是 **NP-难**的。类似地，如果 co-NP 类中的每个问题都可以多项式时间归约到某个问题，那么该问题是 **co-NP-难**的。\n\n假设经过多年研究，一个特定问题（我们称之为 $X$）被证明既是 NP-难的，也是 co-NP-难的。然而，一个出人意料的转折是，一位计算机科学家发现了一个可以解决问题 $X$ 的多项式时间算法。\n\n假设所有这些发现都正确，那么对于复杂性类 P、NP 和 co-NP 之间的关系，会产生什么确定性的结论？\n\nA. P = NP，但 NP ≠ co-NP。\n\nB. NP = co-NP，但 P 仍然是 NP 的真子集。\n\nC. P = NP = co-NP。\n\nD. P 是 NP 和 co-NP 交集的真子集，即 P ⊂ (NP ∩ co-NP)。\n\nE. 所描述的情况是一个逻辑矛盾，这意味着关于问题 $X$ 的初始证明中，至少有一个必然是错误的。", "solution": "根据题设，$X$ 在多项式时间多一归约下是 NP-难和 co-NP-难的，并且存在一个多项式时间算法判定 $X$，即 $X \\in \\mathrm{P}$。\n\nNP-难的定义是：对于任意语言 $L \\in \\mathrm{NP}$，存在一个多项式时间可计算函数 $f$，使得对所有输入 $x$，$x \\in L$ 当且仅当 $f(x) \\in X$。设 $A_{X}$ 是 $X$ 的一个多项式时间判定器。那么，通过将 $x$ 映射到 $y = f(x)$ 并运行 $A_{X}(y)$，我们就可以为任意 $L \\in \\mathrm{NP}$ 得到一个多项式时间的判定器。总时间是多项式的，因为它是两个多项式时间过程的复合。因此，$L \\in \\mathrm{P}$。由于这对任意的 $L \\in \\mathrm{NP}$ 都成立，我们有 $\\mathrm{NP} \\subseteq \\mathrm{P}$。而 $\\mathrm{P} \\subseteq \\mathrm{NP}$ 总是成立的，所以 $\\mathrm{P} = \\mathrm{NP}$。\n\n同理，co-NP-难的定义是：对于任意语言 $L \\in \\mathrm{coNP}$，存在一个多项式时间可计算归约 $g$，使得 $x \\in L$ 当且仅当 $g(x) \\in X$。使用与 $X$ 的多项式时间判定器相同的复合论证，我们可以断定对所有 $L \\in \\mathrm{coNP}$ 都有 $L \\in \\mathrm{P}$，因此 $\\mathrm{coNP} \\subseteq \\mathrm{P}$。由于 $\\mathrm{P} \\subseteq \\mathrm{coNP}$ 总是成立，我们得到 $\\mathrm{P} = \\mathrm{coNP}$。\n\n结合这两个等式，得出 $\\mathrm{P} = \\mathrm{NP} = \\mathrm{coNP}$。在给出的选项中，这恰好是选项 C。", "answer": "$$\\boxed{C}$$", "id": "1444869"}]}