{"hands_on_practices": [{"introduction": "空间层级定理不仅仅是一个抽象的数学结论，它更是我们绘制计算复杂性版图的实用工具。本练习将引导您应用该定理，探索空间层级的底层结构，特别是围绕对数空间复杂性类 $\\text{L}$ 的部分。通过这个实践，您将验证像 $\\log n$ 这样增长缓慢的函数也足以作为构建层级的基石，并证明确实存在可以用 $O(\\log n)$ 空间解决，但无法用 $o(\\log n)$ 空间解决的问题。[@problem_id:1463176]", "problem": "在计算复杂性理论中，确定性空间层级定理（deterministic Space Hierarchy Theorem）提供了一种方法，可用于证明基于图灵机允许使用的内存（空间）量，存在一个严格的复杂度类层级。该定理的一个版本可陈述如下：\n\n**定理（空间层级）：**对于任何满足 $f(n) \\ge \\log_2 n$ 的空间可构造函数（space-constructible function）$f(n)$，我们有 $\\text{DSPACE}(o(f(n))) \\subsetneq \\text{DSPACE}(O(f(n)))$。这意味着存在可以用 $O(f(n))$ 空间解决但无法用 $o(f(n))$ 空间解决的问题。\n\n如果存在一个确定性图灵机，在给定长度为 n 的输入时，在其工作带上恰好使用 $O(f(n))$ 的空间来计算并输出 $f(n)$ 的值，那么函数 $f: \\mathbb{N} \\to \\mathbb{N}$ 就被称为**空间可构造的**。\n\n让我们考虑对数空间复杂度类 $\\text{L}$，其形式化定义为 $\\text{L} = \\text{DSPACE}(O(\\log n))$。现在，考虑函数 $s(n) = \\lceil \\log_2 n \\rceil$。\n\n使用函数 $s(n)$ 并应用空间层级定理，可以得出下列哪个陈述是最准确的结论？\n\nA. 函数 $s(n)$ 是空间可构造的，并且满足 $s(n) \\ge \\log_2 n$。该定理意味着对于任何满足 $g(n) = o(\\log n)$ 的函数 $g(n)$，复杂度类 $\\text{DSPACE}(g(n))$ 是 $\\text{L}$ 的一个严格子集。\n\nB. 函数 $s(n)$ 不是空间可构造的，因为计算对数是一个复杂的数学运算，需要超过对数空间。因此，空间层级定理无法应用于 $s(n)$。\n\nC. 该定理可以应用，并且它表明对于任何满足 $0 \\le c < 1$ 的常数 $c$，复杂度类 $\\text{DSPACE}(c \\cdot \\log n)$ 是 $\\text{L}$ 的一个严格子集。\n\nD. 该定理无法应用，因为对于所有是 2 的整数次方的 n 值，函数 $s(n)$ 违反了条件 $s(n) \\ge \\log_2 n$。\n\nE. 该定理可以应用，并且它证明了 $\\text{L}$ 是 $\\text{P}$（即可在多项式时间内解决的问题类）的一个严格子集。", "solution": "我们已知确定性空间层级定理：对于任意满足 $f(n) \\ge \\log_{2} n$ 的空间可构造函数 $f(n)$，我们有\n$$\n\\text{DSPACE}(o(f(n))) \\subsetneq \\text{DSPACE}(O(f(n))).\n$$\n我们考虑函数 $s(n) = \\lceil \\log_{2} n \\rceil$ 和复杂度类 $\\text{L} = \\text{DSPACE}(O(\\log n))$。\n\n步骤1：验证 $s(n)$ 是空间可构造的，并且满足下界条件。\n- 根据定义，$s(n) = \\lceil \\log_{2} n \\rceil$ 满足\n$$\ns(n) = \\lceil \\log_{2} n \\rceil \\ge \\log_{2} n\n$$\n对所有 $n \\in \\mathbb{N}$ 成立。\n- 为了证明 $s(n)$ 是空间可构造的，我们描述如何在长度为 n 的输入上，在 $O(\\log n)$ 空间内计算 $s(n)$：\n  1. 通过扫描输入并维护一个二进制计数器来计算 n 的二进制表示。这使用 $O(\\log n)$ 个单元。\n  2. 设 $L$ 为 n 的二进制比特长度；对于 $n \\ge 1$，这等于 $L = \\lfloor \\log_{2} n \\rfloor + 1$。我们可以在增加计数器的同时跟踪最高有效位的位置，从而使用 $O(\\log n)$ 空间计算出 $L$。\n  3. 通过检查二进制表示中是否只有一个 1 比特来测试 n 是否是 2 的幂；计算 1 比特的数量使用 $O(\\log n)$ 空间。\n  4. 按如下方式输出 $s(n)$：\n     - 如果 n 是 2 的幂，则 $s(n) = \\lceil \\log_{2} n \\rceil = \\log_{2} n = L - 1$。\n     - 否则，$s(n) = \\lceil \\log_{2} n \\rceil = L$。\n  所有步骤都使用 $O(\\log n)$ 空间，因此 $s(n)$ 是空间可构造的。\n\n步骤2：应用空间层级定理，其中 $f(n) = s(n)$。\n- 该定理给出\n$$\n\\text{DSPACE}(o(s(n))) \\subsetneq \\text{DSPACE}(O(s(n))).\n$$\n- 由于 $s(n) = \\Theta(\\log_{2} n)$，我们有 $O(s(n)) = O(\\log_{2} n)$ 以及 $o(s(n)) = o(\\log_{2} n)$。\n- 因此，\n$$\n\\text{DSPACE}(o(\\log_{2} n)) \\subsetneq \\text{DSPACE}(O(\\log_{2} n)) = \\text{L}.\n$$\n- 具体来说，对于任何满足 $g(n) = o(\\log_{2} n)$ 的函数 $g(n)$，我们有\n$$\n\\text{DSPACE}(g(n)) \\subseteq \\text{DSPACE}(o(\\log_{2} n)) \\subsetneq \\text{L}.\n$$\n\n步骤3：评估选项。\n- A 陈述的正是对于所有 $g(n) = o(\\log n)$，存在严格包含关系 $\\text{DSPACE}(g(n)) \\subsetneq \\text{L}$，这可以从上面的推导中得出。因此 A 是正确的。\n- B 是错误的，因为如上所示，$s(n)$ 是空间可构造的。\n- C 并非由该定理所蕴含：对于任何满足 $0 \\le c < 1$ 的固定常数 $c$，我们有 $c \\log n = \\Theta(\\log n)$，所以 $\\text{DSPACE}(c \\cdot \\log n) = \\text{DSPACE}(O(\\log n)) = \\text{L}$；该定理区分的是 $o(\\log n)$ 和 $O(\\log n)$，而不是 $\\Theta(\\log n)$ 内部的常数因子。\n- D 是错误的，因为当 n 是 2 的幂时，$s(n) = \\lceil \\log_{2} n \\rceil \\ge \\log_{2} n$ 的等号成立。\n- E 是错误的，因为该定理并不意味着 $\\text{L} \\subsetneq \\text{P}$；事实上，$\\text{L} \\subsetneq \\text{P}$ 是否成立仍是未知的。\n\n因此最准确的结论是 A。", "answer": "$$\\boxed{A}$$", "id": "1463176"}, {"introduction": "在确认了层级存在之后，一个关键问题随之而来：到底多大的空间才算是“更多”？本练习旨在探讨空间层级定理的适用边界，通过考察两个在渐近意义上非常接近的空间上限。您将会发现，该定理要求函数之间存在显著的渐近增长差距，仅仅增加一个低阶项通常不足以创造出一个更强大的复杂性类。[@problem_id:1463147]", "problem": "空间层次定理是计算复杂性理论中的一个基本结果，它确立了空间复杂度类的层次结构。该定理陈述如下：\n对于任意空间可构造函数 $s_2(n)$，如果 $s_1(n)$ 是另一个满足 $s_1(n) \\in o(s_2(n))$ 的空间可构造函数，则 $\\text{SPACE}(s_1(n)) \\subsetneq \\text{SPACE}(s_2(n))$。\n小o符号 $s_1(n) \\in o(s_2(n))$ 意味着函数 $s_1(n)$ 渐进地小于 $s_2(n)$，其形式化定义为 $\\lim_{n \\to \\infty} \\frac{s_1(n)}{s_2(n)} = 0$。一个函数 $f(n)$ 是空间可构造的，如果一台图灵机可以在长度为 $n$ 的输入上，在 $O(f(n))$ 的空间内计算出 $f(n)$。你可以假设下面出现的所有函数都是空间可构造的。\n\n考虑复杂度类 $C_1 = \\text{SPACE}(n^k)$ 和 $C_2 = \\text{SPACE}(n^k + n^{k-1}\\log(n))$，其中 $k \\ge 1$ 为一固定整数。一名学生声称，因为项 $n^{k-1}\\log(n)$ 的增长慢于 $n^k$，所以空间层次定理不能被用来证明 $C_1$ 是 $C_2$ 的真子集。\n\n这名学生的说法正确吗？\n\nA. 是的，因为 $\\lim_{n \\to \\infty} \\frac{n^k}{n^k + n^{k-1}\\log(n)} = 1$。\n\nB. 不是，因为 $\\lim_{n \\to \\infty} \\frac{n^k}{n^k + n^{k-1}\\log(n)} = 0$。\n\nC. 是的，因为 $n^k$ 和 $n^k + n^{k-1}\\log(n)$ 不是空间可构造的。\n\nD. 不是，因为只要函数不完全相同，空间层次定理就适用。", "solution": "我们应用空间层次定理，该定理要求 $s_{1}(n) \\in o(s_{2}(n))$，即\n$$\n\\lim_{n\\to\\infty}\\frac{s_{1}(n)}{s_{2}(n)}=0.\n$$\n令 $s_{1}(n)=n^{k}$ 和 $s_{2}(n)=n^{k}+n^{k-1}\\log(n)$。计算\n$$\n\\lim_{n\\to\\infty}\\frac{n^{k}}{n^{k}+n^{k-1}\\log(n)}=\\lim_{n\\to\\infty}\\frac{1}{1+\\frac{\\log(n)}{n}}=1,\n$$\n因为 $\\lim_{n\\to\\infty}\\frac{\\log(n)}{n}=0$。因此 $n^{k}\\notin o\\!\\left(n^{k}+n^{k-1}\\log(n)\\right)$，所以空间层次定理的假设不成立，该定理不能被用来得出 $\\text{SPACE}(n^{k})\\subsetneq \\text{SPACE}(n^{k}+n^{k-1}\\log(n))$ 的结论。\n\n此外，因为当 $n$ 足够大时，我们有 $\\log(n)\\leq n$，可得\n$$\nn^{k}\\leq n^{k}+n^{k-1}\\log(n)\\leq n^{k}+n^{k}=2n^{k},\n$$\n所以 $O\\!\\left(n^{k}+n^{k-1}\\log(n)\\right)=O\\!\\left(n^{k}\\right)$ 并且因此 $\\text{SPACE}(n^{k})=\\text{SPACE}(n^{k}+n^{k-1}\\log(n))$。这进一步证实了空间层次定理在此处不适用。\n\n因此，学生关于该定理不能用于证明真子集关系的说法是正确的，原因在于两个函数的比值极限是 $1$，而不是 $0$。正确选项是 A。", "answer": "$$\\boxed{A}$$", "id": "1463147"}, {"introduction": "要真正掌握空间层级定理，我们必须超越其定理陈述本身，去理解其背后强大的证明技术——对角论证法。这个进阶练习将带您跳出具体函数的计算，思考该定理在一个拥有任意预言机 $A$ 的“相对化”世界中是否依然成立。通过分析其核心的模拟论证过程，您将领会到为何空间层级具有普遍性，其结构不依赖于任何特定的外部计算能力。[@problem_id:1463166]", "problem": "在计算复杂性理论中，预言图灵机（Oracle Turing Machine, OTM）是一种标准的图灵机，它增添了一条特殊的只读预言带和一个询问状态。当 OTM 进入询问状态时，其预言带上当前的字符串会被发送到一个黑盒“预言机”。在单个计算步骤中，如果询问字符串在预言机的语言中，预言机会将带上内容替换为“1”，否则替换为“0”。复杂性类 $\\text{TIME}^A(t(n))$ 和 $\\text{SPACE}^A(s(n))$ 的定义与其非预言机对应物类似，分别表示可由一个能访问语言 $A$ 的预言机的 OTM 在时间 $t(n)$ 和空间 $s(n)$ 内判定的语言集合。\n\n考虑两个函数 $f(n)$ 和 $g(n)$，它们都是“空间可构造的”，意味着一个图灵机可以在输入 $1^n$ 时，使用与函数输出成比例的空间来计算该函数的值。这两个函数满足以下条件：\n1. $f(n) = \\Omega(\\log n)$。\n2. $g(n) = \\omega(f(n))$，其形式化定义为 $\\lim_{n \\to \\infty} \\frac{f(n)}{g(n)} = 0$。\n\n现在，我们定义一个特定的确定性 OTM，称之为 $D$，它使用一个针对任意语言 $A$ 的预言机进行操作。$D$ 在输入字符串 $w$ 上的行为如下：\n- 在输入 $w$ 时，机器 $D^A$ 首先检查 $w$ 是否为一个确定性 OTM 的有效编码，我们将其记作 $M_w$。如果 $w$ 不是一个有效编码，$D^A$ 立即拒绝。\n- 如果 $w$ 是一个有效编码，$D^A$ 继续在输入 $w$ 本身上模拟带预言机 $A$ 的机器 $M_w$（即，它模拟 $M_w^A(w)$）。这整个过程被设计为在 $O(g(|w|))$ 空间内运行。\n- 模拟过程被精心管理：$D^A$ 在其工作带上标记出一个大小为 $f(|w|)$ 的区域。它还维护一个步数计数器。如果被模拟的机器 $M_w^A$ 试图使用超过这个 $f(|w|)$ 区域的空间，或者其运行步数超过了该空间内可能配置的总数（从而检测到循环），模拟将被中止，然后 $D^A$ 停机并接受。\n- 如果 $M_w^A(w)$ 的模拟在*没有*被中止的情况下完成（即，它在规定的空间和步数限制内停机），$D^A$ 会检查其结果并执行相反的操作：如果 $M_w^A(w)$ 接受，$D^A$ 就拒绝；如果 $M_w^A(w)$ 拒绝，$D^A$ 就接受。\n\n鉴于对于*任何*任意预言语言 $A$，这台机器 $D^A$ 的存在性和明确定义的行为，复杂性类 $\\text{SPACE}^A(f(n))$ 和 $\\text{SPACE}^A(g(n))$ 之间必须满足何种基本关系？\n\nA. 对所有预言机 $A$，$SPACE^A(f(n)) = SPACE^A(g(n))$。\n\nB. 对所有预言机 $A$，$SPACE^A(f(n)) \\subsetneq SPACE^A(g(n))$。\n\nC. 对所有预言机 $A$，$SPACE^A(g(n)) \\subsetneq SPACE^A(f(n))$。\n\nD. 关系不可比较；对任何预言机 $A$，都存在 $\\text{SPACE}^A(f(n))$ 中但不在 $\\text{SPACE}^A(g(n))$ 中的语言，反之亦然。\n\nE. 关系取决于预言机 $A$；对某些预言机 $A_1$，这两个类相等，而对另一些预言机 $A_2$，存在严格包含关系。", "solution": "我们给定空间可构造函数 $f$ 和 $g$，满足 $f(n)=\\Omega(\\log n)$ 和 $g(n)=\\omega(f(n))$，以及如上所述构造的确定性预言图灵机 $D^{A}$。定义由 $D^{A}$ 判定的语言 $L^{A}$：\n$$\nL^{A}=\\{\\,w \\mid D^{A}(w)\\ \\text{accepts}\\,\\}.\n$$\n\n首先，我们证明 $L^{A} \\in \\text{SPACE}^{A}(g(n))$。根据构造，在输入 $w$ 时，机器 $D^{A}$：\n- 验证 $w$ 是否编码了一个预言图灵机，因为 $f(n)=\\Omega(\\log n)$，这可以在 $O(\\log |w|)\\subseteq O(f(|w|))$ 空间内完成，\n- 预留恰好 $f(|w|)$ 个单元来模拟 $M_{w}^{A}(w)$，\n- 维护一个步数计数器，其上限为一个确定性 OTM 在长度为 $|w|$ 的输入上使用至多 $f(|w|)$ 工作带空间时可能配置的总数。\n\n令 $C(n)$ 表示这样一台机器在长度为 $n$ 的输入上配置数量的一个上界。一个标准的界是\n$$\nC(n) \\leq c \\cdot n^{k} \\cdot \\alpha^{f(n)},\n$$\n对于常数 $c,k,\\alpha \\geq 2$，因为一个配置是由有限控制状态、读写头的位置（包括在 $O(n)$ 个单元格上移动的输入头）以及在有限字母表上 $f(n)$ 单元工作区域的内容决定的。因此\n$$\n\\log_{2} C(n) = O(\\log n) + O(f(n)) = O(f(n)),\n$$\n因为 $f(n)=\\Omega(\\log n)$。因此，步数计数器需要 $O(f(n))$ 比特。模拟本身使用 $O(f(n))$ 空间，而 $D^{A}$ 使用的总空间是 $O(f(n))$。由于 $g(n)=\\omega(f(n))$ 并且两个函数都是空间可构造的，$D^{A}$ 可以被实现为使用 $O(g(n))$ 空间。因此，\n$$\nL^{A} \\in \\text{SPACE}^{A}(g(n)).\n$$\n\n其次，我们通过对角化论证来证明 $L^{A} \\notin \\text{SPACE}^{A}(f(n))$。考虑任何一个确定性 OTM $M^{A}$，它在每个长度为 $n$ 的输入上最多使用 $f(n)$ 的工作带空间。设 $w$ 是 $M^{A}$ 的一个有效编码，因此 $M_{w}$ 表示 $M$。\n\n在输入 $w$ 上运行 $D^{A}$。鉴于 $M^{A}$ 上的 $f(|w|)$ 空间限制，对于被模拟的计算 $M_{w}^{A}(w)$，存在两种穷尽的情况：\n- 如果 $M_{w}^{A}(w)$ 曾超过 $f(|w|)$ 的空间，这与 $M^{A}$ 是 $f$-空间有界的假设相矛盾。因此这种情况对于这样的 $M^{A}$ 不会发生。\n- 否则，$M_{w}^{A}(w)$ 保持在 $f(|w|)$ 的空间内。那么要么：\n  1. $M_{w}^{A}(w)$ 在该空间内停机。在这种子情况下，$D^{A}$ 在其预算内完成模拟并输出相反的判定结果。因此 $D^{A}(w) \\neq M_{w}^{A}(w)$。\n  2. $M_{w}^{A}(w)$ 不停机。由于它被限制在至多 $C(|w|)$ 个配置内，根据鸽巢原理，它在至多 $C(|w|)+1$ 步后会重复一个配置。因为 $D^{A}$ 维护一个上限为 $C(|w|)$ 的计数器，并在超过此阈值时中止，模拟将被中止，且 $D^{A}$ 接受。特别地，$M_{w}^{A}(w)$ 不接受，而 $D^{A}(w)$ 接受，所以再次有 $D^{A}(w) \\neq M_{w}^{A}(w)$。\n\n因此，对于每个 $f$-空间有界的 $M^{A}$，都存在一个输入（即它自己的编码 $w$），在该输入上 $L^{A}$ 与 $L(M^{A})$ 的判定结果不同。因此\n$$\nL^{A} \\notin \\text{SPACE}^{A}(f(n)).\n$$\n\n结合这两个部分，我们对于每个预言机 $A$，都构造了一个语言 $L^{A}$，使得\n$$\nL^{A} \\in \\text{SPACE}^{A}(g(n)) \\setminus \\text{SPACE}^{A}(f(n)),\n$$\n这意味着对于所有预言机 $A$，严格包含关系\n$$\n\\text{SPACE}^{A}(f(n)) \\subsetneq \\text{SPACE}^{A}(g(n))\n$$\n成立。这正是相对化的空间层次定理，该定理在给定的关于 $f$ 和 $g$ 的条件下成立，并且是相对化的，因为对角化过程模拟的是带有相同预言机的机器，并且只使用不受预言机回答影响的空间计算。", "answer": "$$\\boxed{B}$$", "id": "1463166"}]}