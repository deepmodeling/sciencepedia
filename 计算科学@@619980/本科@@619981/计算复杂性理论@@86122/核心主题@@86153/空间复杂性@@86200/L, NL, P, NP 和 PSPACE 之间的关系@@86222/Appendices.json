{"hands_on_practices": [{"introduction": "掌握了计算复杂性理论中的核心概念后，下一步就是将这些定义应用于实际情境中。这项练习旨在巩固您对基本复杂性类的理解，特别是 $\\text{L}$ 和 $\\text{P}$。通过分析一个具有特定时间和空间复杂度的确定性算法，您将练习如何将其解决的问题精确地归入我们已知复杂性层级中最具体（或最“小”）的类别中。[@problem_id:1445945]", "problem": "在计算复杂性理论中，我们根据解决问题所需的计算资源（主要是时间和空间）对问题进行分类。让我们考虑以下针对输入大小为 $n$ 的决策问题的标准复杂性类：\n\n- **L (对数空间):** 可由确定性算法使用对数于输入大小的内存量（即 $O(\\log n)$）解决的问题类别。\n- **NL (非确定性对数空间):** 可由非确定性算法使用 $O(\\log n)$ 内存解决的问题类别。\n- **P (多项式时间):** 可由确定性算法在多项式于输入大小的步数内（即对于某个常数 $k$ 为 $O(n^k)$）解决的问题类别。\n- **NP (非确定性多项式时间):** 其提议的解可由确定性算法在多项式时间内验证的问题类别。\n- **PSPACE (多项式空间):** 可由确定性算法使用多项式于输入大小的内存量解决的问题类别。\n\n假设一位计算机科学家发现了一种新的确定性算法，该算法解决了一个特定的决策问题。该算法的性能经过分析，发现其时间复杂度为 $O(n^2)$，空间复杂度为 $O(\\log n)$。\n\n严格根据这些信息，我们可以确定该问题属于以下列表中哪个最小（最具体）的复杂性类？\n\nA. PSPACE\nB. NP\nC. P\nD. NL\nE. L", "solution": "我们给定一个解决决策问题的确定性算法，其时间复杂度为 $T(n)=O(n^{2})$，空间复杂度为 $S(n)=O(\\log n)$。\n\n1) 根据 P 类的定义，如果存在一个确定性算法能在多项式时间内解决一个问题，那么该问题就在 P 类中。由于 $T(n)=O(n^{2})$ 是多项式时间，所以该问题在 P 类中。\n\n2) 根据 L 类的定义，如果存在一个确定性算法能使用对数空间解决一个问题，那么该问题就在 L 类中。由于 $S(n)=O(\\log n)$ 且该算法是确定性的，所以该问题在 L 类中。\n\n3) 使用所列类别之间的标准包含关系，\n$$\n\\mathrm{L} \\subseteq \\mathrm{NL} \\subseteq \\mathrm{P} \\subseteq \\mathrm{NP} \\subseteq \\mathrm{PSPACE}.\n$$\n因为该问题在 L 类中，所以它也在每个超类中，但根据给定的选项，我们可以确定它所属的最小（最具体）的类别是 $\\mathrm{L}$。\n\n因此，正确选项是 E。", "answer": "$$\\boxed{E}$$", "id": "1445945"}, {"introduction": "在非确定性与确定性计算模型之间建立联系是复杂性理论的一个核心主题。萨维奇定理（Savitch's Theorem）是连接非确定性空间（$\\text{NSPACE}$）和确定性空间（$\\text{DSPACE}$）的基石。这个练习将指导您应用萨维奇定理，将一个用非确定性图灵机解决的问题所需的空间复杂度，转换为一个等价的确定性算法所需的空间上限。[@problem_id:1445880]", "problem": "在计算复杂性理论中，我们根据解决问题所需的资源来对问题进行分类。令 $\\text{DSPACE}(s(n))$ 表示这样一类判定问题：它们可以由一台确定性图灵机在工作带上使用数量级为 $s(n)$ 的空间来解决，其中 $n$ 是输入的大小。类似地，令 $\\text{NSPACE}(s(n))$ 表示可以由非确定性图灵机使用 $O(s(n))$ 空间解决的一类问题。\n\n连接这两种空间复杂性的一个基本结果是 Savitch 定理，该定理指出，对于任何空间可构造且满足 $s(n) \\ge \\log n$ 的函数 $s(n)$，以下关系成立：$\\text{NSPACE}(s(n))$ 是 $\\text{DSPACE}(s(n)^2)$ 的一个子集。\n\n假设一位计算机科学家为某个特定的判定问题开发了一种算法。该算法为非确定性图灵机设计，并且被证明对于大小为 $n$ 的输入，其使用的工作带空间量与 $(\\log n)^2$ 成正比。\n\n根据这些信息和 Savitch 定理，关于在*确定性*图灵机上解决该问题的空间复杂性，可以得出的最紧凑的结论是什么？\n\nA. 该问题可以使用 $O(\\log n)$ 的确定性空间解决。\nB. 该问题可以使用 $O((\\log n)^2)$ 的确定性空间解决。\nC. 该问题可以使用 $O((\\log n)^3)$ 的确定性空间解决。\nD. 该问题可以使用 $O((\\log n)^4)$ 的确定性空间解决。\nE. 该问题需要多项式空间，但根据给定信息无法确定更具体的多对数界。", "solution": "问题陈述指出，一个新算法在非确定性图灵机上解决一个判定问题时，使用的工作带空间与 $(\\log n)^2$ 成正比。用复杂性类的语言来说，这意味着该问题属于 $\\text{NSPACE}((\\log n)^2)$ 类。\n\n我们已知 Savitch 定理，该定理提供了非确定性空间复杂性与确定性空间复杂性之间的关系。该定理指出，对于一个空间可构造函数 $s(n)$ 且 $s(n) \\ge \\log n$，我们有 $\\text{NSPACE}(s(n)) \\subseteq \\text{DSPACE}(s(n)^2)$。\n\n为了应用该定理，我们必须确定我们的空间函数 $s(n)$，并验证它是否满足定理的前提条件。在本例中，非确定性空间使用量为 $O((\\log n)^2)$，因此我们设定空间函数 $s(n) = (\\log n)^2$。\n\n首先，我们检查条件 $s(n) \\ge \\log n$。对于我们的函数，这意味着我们必须检查是否 $(\\log n)^2 \\ge \\log n$。对于 $n>1$（此时 $\\log n > 0$），两边同除以 $\\log n$，得到 $\\log n \\ge 1$。这个不等式对所有 $n \\ge e$ 成立，其中 $e$ 是欧拉数（约 2.718）。因此，对于所有非平凡大小的输入，该条件都得到满足。函数 $s(n) = (\\log n)^2$ 也是一个标准的空间可构造函数。因此，Savitch 定理适用。\n\n现在，我们通过将 $s(n) = (\\log n)^2$ 代入包含关系 $\\text{NSPACE}(s(n)) \\subseteq \\text{DSPACE}(s(n)^2)$ 来应用该定理。\n这得到：\n$\\text{NSPACE}((\\log n)^2) \\subseteq \\text{DSPACE}(((\\log n)^2)^2)$\n\n接下来，我们简化右侧的表达式。确定性类的空间界是 $(s(n))^2$，在本例中即为 $((\\log n)^2)^2$。根据指数法则 $(x^a)^b = x^{ab}$，我们有：\n$((\\log n)^2)^2 = (\\log n)^{2 \\times 2} = (\\log n)^4$。\n\n所以，包含关系变为：\n$\\text{NSPACE}((\\log n)^2) \\subseteq \\text{DSPACE}((\\log n)^4)$\n\n这个结果告诉我们，任何 $\\text{NSPACE}((\\log n)^2)$ 中的问题也都在 $\\text{DSPACE}((\\log n)^4)$ 中。换句话说，必定存在一个确定性算法，可以使用数量级为 $O((\\log n)^4)$ 的空间来解决该问题。这是可以直接从 Savitch 定理得出的最紧的上界。\n\n将此结果与给定选项进行比较：\nA. $O(\\log n)$ 是不正确的。\nB. $O((\\log n)^2)$ 是不正确的；这将意味着对于此函数 $\\text{NSPACE}$ 等于 $\\text{DSPACE}$，而这一定理并不能保证。\nC. $O((\\log n)^3)$ 是不正确的；这是由于在对空间函数进行平方运算时出现了算术错误。\nD. $O((\\log n)^4)$ 与我们推导出的上界相符。\nE. 这是不正确的，因为我们能够确定一个具体的多对数界。\n\n因此，正确的结论是该问题可以使用 $O((\\log n)^4)$ 的确定性空间解决。", "answer": "$$\\boxed{D}$$", "id": "1445880"}, {"introduction": "在复杂性理论中，准确理解术语的含义至关重要，特别是像“$\\text{NP}$-难”这样的概念。一个问题是 $\\text{NP}$-难的，意味着任何 $\\text{NP}$ 中的问题都可以通过多项式时间归约到它，但这一定义本身也存在局限。这个思想实验旨在挑战您对 $\\text{NP}$-难度的深刻理解，探讨仅凭这一性质我们能够和不能够对一个问题（例如它是否在 $\\text{PSPACE}$ 中）做出何种结论。[@problem_id:1445881]", "problem": "一位计算机科学家正在研究一个名为“网络拥塞临界点”（Network Congestion Tipping-Point, NCTP）的判定问题。她成功地证明了一个非凡的结果：对于复杂性类 NP（非确定性多项式时间）中的任何问题 $A$，存在一个从 $A$ 到 NCTP 的多项式时间多一归约。然而，目前尚不清楚 NCTP 问题本身是否能被任何算法解决（也就是说，它可能是不可判定的），更不用说它是否属于 NP 类了。\n\n回顾以下标准复杂性类：\n- **P (多项式时间):** 可由确定性图灵机在多项式时间内解决的判定问题类。\n- **NP (非确定性多项式时间):** 对于其“是”实例存在一个可由确定性图灵机在多项式时间内验证的证明的判定问题类。\n- **PSPACE (多项式空间):** 可由确定性图灵机使用多项式大小的内存解决的判定问题类。\n\n*仅*根据所提供的信息，以下哪个陈述正确地描述了关于 NCTP 问题可以得出的逻辑结论？\n\nA. NCTP 在 NP 中，因此它也在 PSPACE 中。\nB. NCTP 是 NP-难的，但这些信息不足以确定 NCTP 是否包含在 PSPACE 中。\nC. NCTP 必须是 PSPACE-完全的，因为任何比所有 NP 问题都难的问题也必定比所有 PSPACE 问题都难。\nD. 如果 NCTP 被证明是一个可判定问题，那么它必须包含在 PSPACE 中。", "solution": "根据假设，对于每个问题 $A \\in \\mathrm{NP}$，存在一个从 $A$ 到 $\\mathrm{NCTP}$ 的多项式时间多一归约。根据定义，一个语言 $L$ 是 $\\mathrm{NP}$-难的，如果对于所有 $A \\in \\mathrm{NP}$，都有 $A \\leq_{m}^{p} L$。因此，给定的假设意味着 $\\mathrm{NCTP}$ 是 $\\mathrm{NP}$-难的。\n\n仅凭这一事实，我们不能断定 $\\mathrm{NCTP}$ 在 $\\mathrm{NP}$ 中，因为 $\\mathrm{NP}$-难问题不一定在 $\\mathrm{NP}$ 内；实际上，一些 $\\mathrm{NP}$-难问题是不可判定的。由于问题陈述明确允许 $\\mathrm{NCTP}$ 可能是不可判定的，我们也无法断定它位于 $\\mathrm{PSPACE}$ 或任何可判定类中。\n\n评估各个选项：\n- A 声称 $\\mathrm{NCTP} \\in \\mathrm{NP}$；这个结论无法从假设中得出，所以 A 是错误的。\n- B 陈述 $\\mathrm{NCTP}$ 是 $\\mathrm{NP}$-难的，并且这些信息不足以确定它是否在 $\\mathrm{PSPACE}$ 中。这与逻辑推论相符：仅有 $\\mathrm{NP}$-难性本身并不能提供关于是否属于 $\\mathrm{PSPACE}$ 的信息，特别是当其可判定性本身未知时。因此 B 是正确的。\n- C 断言其为 $\\mathrm{PSPACE}$-完全的。要成为 $\\mathrm{PSPACE}$-完全问题，一个问题必须在 $\\mathrm{PSPACE}$ 中并且是 $\\mathrm{PSPACE}$-难的。$\\mathrm{NP}$-难性并不能推导出这两点中的任何一点；此外，比所有 $\\mathrm{NP}$ 问题都难并不意味着比所有 $\\mathrm{PSPACE}$ 问题都难。因此 C 是错误的。\n- D 声称如果 $\\mathrm{NCTP}$ 是可判定的，那么它必须在 $\\mathrm{PSPACE}$ 中。可判定性并不意味着多项式空间可解性；存在 $\\mathrm{PSPACE}$ 之外的可判定问题（例如，$\\mathrm{EXPSPACE}$-完全问题）。因此 D 是错误的。\n\n因此，只有陈述 B 得到所提供信息的逻辑支持。", "answer": "$$\\boxed{B}$$", "id": "1445881"}]}