{"hands_on_practices": [{"introduction": "确定性计算最根本的特性是其可预测性——在任何给定时刻，下一步都是唯一确定的。这个练习将这个抽象概念转化为其配置图的一个具体、可验证的属性。通过分析图中一个顶点的出度，你将加深对确定性如何塑造计算路径的理解。[@problem_id:1418038]", "problem": "在计算复杂性理论的研究中，我们常通过检查抽象机的配置图来分析其行为。考虑一台确定性图灵机（DTM），它被设计用于在一条只读输入带和一条读写工作带上运行。该机器由一个状态集 $Q$、一个输入字母表 $\\Sigma$ 和一个工作带字母表 $\\Gamma$ 所定义。对于一个长度为 $n$ 的输入字符串，该机器在工作带上最多只能使用 $O(\\log n)$ 的空间。\n\nDTM 的一个*配置*是其在某一时间点的状态的完整快照。它包括机器在 $Q$ 中的当前状态、其在输入带上的磁头位置、工作带的全部内容，以及其在工作带上的磁头位置。\n\n对于一个特定的 DTM $M$，其*配置图* $G_M$ 是一个有向图，其中每个顶点代表一个唯一的配置。从代表配置 $C_1$ 的顶点到代表配置 $C_2$ 的顶点存在一条有向边，当且仅当机器 $M$ 在一个计算步骤内从 $C_1$ 转移到 $C_2$。\n\n假设机器从一个不会立即停机的配置开始，那么在配置图 $G_M$ 中，任何顶点的最大可能出度是多少？你的答案应该是一个整数。", "solution": "设 $M$ 为一台具有只读输入带和单条读写工作带的确定性图灵机。确定性意味着其转移函数是单值的。形式上，存在一个函数\n$$\n\\delta : Q \\times \\Sigma \\times \\Gamma \\to Q \\times \\Gamma \\times D_{i} \\times D_{w},\n$$\n其中 $D_{i}$ 和 $D_{w}$ 分别是输入带和工作带上允许的磁头移动的有限集合（例如，$D_{i} = D_{w} = \\{L,S,R\\}$）。对于任何非停机配置 $C$——它由 $Q$ 中的当前状态、输入磁头位置、完整的工作带内容和工作磁头位置组成——$\\delta$ 规定了唯一一个可应用的转移。这唯一地确定了下一个配置 $C'$，即通过更新状态、写入指定的工作带符号以及按规定移动输入和工作磁头所获得的配置。\n\n在配置图 $G_{M}$ 中，顶点是配置，从 $C$ 到 $C'$ 存在有向边当且仅当 $C'$ 是由 $M$ 从 $C$ 经过一步计算得到的。因为 $\\delta$ 是一个函数，所以每个非停机配置都恰好有一个后继配置，因此恰好有一条出边。停机配置没有出边。因此，任何顶点的出度最多为 $1$，而对于非停机配置，其出度恰好为 $1$。\n\n机器 $M$ 最多使用 $O(\\log n)$ 工作带空间的约束只限制了不同配置的总数，而不会影响转移的确定性。因此，$G_{M}$ 中所有顶点的最大可能出度是 $1$。", "answer": "$$\\boxed{1}$$", "id": "1418038"}, {"introduction": "在理解了配置图中局部的“步进”结构之后，我们现在将视角转向全局。对数空间复杂性理论的一个基石是：尽管一个对数空间图灵机可能的状态总数非常庞大，但它相对于输入大小 $n$ 仍然是多项式级别的。这个练习将通过让你直接计算和比较不同空间限制下配置图的顶点数量，使这一重要概念变得具体可感。[@problem_id:1418082]", "problem": "一位计算理论家正在分析两种专为处理大型数据集而设计的特殊图灵机模型。这些机器具有一条只读输入带和一条独立的读写工作带。\n\n这样一台机器的完整配置由其当前内部状态、其在只读输入带上的磁头位置、其工作带的全部内容以及其在工作带上的磁头位置的组合唯一确定。机器配置图的顶点与这些唯一的配置一一对应。\n\n这些机器具有以下共同特征：\n- 只读输入带上的输入大小为 $n$。输入带磁头可以位于从 $1$ 到 $n$ 的任何整数位置。\n- 内部状态集合为 $Q$，共有 $q = |Q|$ 个状态。\n- 工作带字母表为 $\\Gamma$，其大小为 $k = |\\Gamma|$，其中 $k \\ge 2$。\n\n这两种模型仅在工作带的大小上有所不同，工作带的大小取决于一个正的设计常数 $c$。\n- **模型 M1**：使用大小为 $S_1 = c \\log_{2}(n)$ 的工作带。工作带磁头可以位于从 $1$ 到 $S_1$ 的任何整数位置。\n- **模型 M2**：一个升级版本，使用大小为 $S_2 = c (\\log_{2}(n))^2$ 的工作带。工作带磁头可以位于从 $1$ 到 $S_2$ 的任何整数位置。\n\n计算模型 M2 的配置图中的顶点总数与模型 M1 的比率。请用 $n$、$k$ 和 $c$ 的符号表达式来表示你的答案。", "solution": "一个配置由四个部分唯一确定：内部状态、输入磁头位置、整个工作带内容以及工作带磁头位置。对于一个字母表为 $\\Gamma$ 且 $|\\Gamma|=k$、长度为 $S$ 的工作带，其可能的内容数量为 $k^{S}$，工作带磁头的位置数量为 $S$。输入磁头有 $n$ 个位置，并且有 $q$ 个内部状态。因此，配置的总数为\n$$\nV(S) = q \\cdot n \\cdot k^{S} \\cdot S.\n$$\n对于模型 M1，$S_{1} = c \\log_{2}(n)$，所以\n$$\nV_{1} = q \\cdot n \\cdot k^{c \\log_{2}(n)} \\cdot c \\log_{2}(n).\n$$\n对于模型 M2，$S_{2} = c (\\log_{2}(n))^{2}$，所以\n$$\nV_{2} = q \\cdot n \\cdot k^{c (\\log_{2}(n))^{2}} \\cdot c (\\log_{2}(n))^{2}.\n$$\n顶点数的比率为\n$$\n\\frac{V_{2}}{V_{1}} = \\frac{q \\cdot n \\cdot k^{S_{2}} \\cdot S_{2}}{q \\cdot n \\cdot k^{S_{1}} \\cdot S_{1}} = k^{S_{2} - S_{1}} \\cdot \\frac{S_{2}}{S_{1}}.\n$$\n代入 $S_{2} - S_{1} = c (\\log_{2}(n))^{2} - c \\log_{2}(n) = c \\log_{2}(n) (\\log_{2}(n) - 1)$ 和 $\\frac{S_{2}}{S_{1}} = \\frac{c (\\log_{2}(n))^{2}}{c \\log_{2}(n)} = \\log_{2}(n)$ 可得\n$$\n\\frac{V_{2}}{V_{1}} = k^{c \\log_{2}(n) (\\log_{2}(n) - 1)} \\cdot \\log_{2}(n).\n$$\n这就是所要求的用 $n$、$k$ 和 $c$ 表示的符号比率。", "answer": "$$\\boxed{\\log_{2}(n)\\,k^{c\\,\\log_{2}(n)\\,(\\log_{2}(n)-1)}}$$", "id": "1418082"}, {"introduction": "最后的这个练习展示了配置图模型的真正威力：它允许我们将一台机器在特定输入上的整个潜在计算过程，视为一个静态的图对象并进行分析。这个挑战要求你设计一个对数空间算法，来检测这个多项式大小的图中是否存在一个特定的结构特征（一个长度为3的环）。这个过程完美地诠释了我们如何能高效地解决关于“计算”本身的“元问题”(meta-problems)。[@problem_id:1418024]", "problem": "在计算复杂性的研究中，图灵机计算的结构可以用配置图来表示。本问题研究在这类机器的配置图中识别一个特定小尺度特征的复杂性。\n\n考虑一台确定性图灵机 $M$，它配备一条只读输入带和一条读写工作带。该机器对一个长度为 $n = |w|$ 的输入字符串 $w$ 进行操作。如果存在一个常数 $c > 0$（该常数依赖于 $M$ 但不依赖于 $w$），使得对于任何输入 $w$，$M$ 在其工作带上使用的单元格数量从不超过 $c \\log_2 n$，则我们称该机器为“对数空间图灵机”。\n\n这样一台机器的配置由一个元组 $C = (q, i, \\gamma, j)$ 完全描述，其中：\n- $q$ 是 $M$ 有限控制器的当前状态。\n- $i$ 是输入带上读写头的位置（$1 \\le i \\le n$）。\n- $\\gamma$ 是工作带已使用部分的全部内容，表示为一个字符串。$\\gamma$ 的长度最多为 $c \\log_2 n$。\n- $j$ 是工作带上读写头的位置（$1 \\le j \\le |\\gamma|$）。\n\n配置图 $G(M, w)$ 是一个有向图，其中每个顶点代表 $M$ 在输入 $w$ 上的一个唯一配置。当且仅当 $M$ 能在一个计算步骤内从配置 $C_a$ 转移到 $C_b$ 时，存在一条从 $C_a$ 到 $C_b$ 的有向边。\n\n一个长度为3的有向环（或3-环）是指三个不同配置 $C_1, C_2, C_3$ 的序列，使得在 $G(M, w)$ 中存在边 $(C_1, C_2)$、$(C_2, C_3)$ 和 $(C_3, C_1)$。\n\n我们定义判定问题 `D3CYCLE` 如下：给定一台确定性对数空间图灵机 $M$ 的描述和一个输入字符串 $w$，其配置图 $G(M, w)$ 是否包含一个长度为3的有向环？\n\n以下哪个复杂性类最能刻画 `D3CYCLE` 问题？\n\nA. L (确定性对数空间)\n\nB. NL (非确定性对数空间)\n\nC. P (多项式时间)\n\nD. NP (非确定性多项式时间)\n\nE. PSPACE (多项式空间)", "solution": "设 $n = |w|$，设 $Q$ 是 $M$ 的有限状态集，其大小为 $|Q| = s$，并设 $\\Gamma$ 是有限工作带字母表，其大小为 $|\\Gamma| = g$。对数空间限制断言，存在一个常数 $c > 0$，使得在输入 $w$ 上，工作带使用的单元格数量最多为 $c \\log_{2} n$。\n\n一个配置是一个元组 $C = (q, i, \\gamma, j)$，其中 $q \\in Q$，$1 \\leq i \\leq n$，$\\gamma \\in \\Gamma^{\\leq c \\log_{2} n}$，以及 $1 \\leq j \\leq |\\gamma|$。可能的 $\\gamma$ 的总数为\n$$\n\\sum_{k=1}^{\\lfloor c \\log_{2} n \\rfloor} g^{k} \\leq \\frac{g^{\\lfloor c \\log_{2} n \\rfloor + 1} - g}{g - 1} = O\\!\\left(g^{c \\log_{2} n}\\right).\n$$\n使用 $a^{\\log_{b} n} = n^{\\log_{b} a}$，我们得到\n$$\ng^{c \\log_{2} n} = n^{c \\log_{2} g}.\n$$\n因此，配置的总数至多为\n$$\n|Q| \\cdot n \\cdot \\left(\\sum_{k=1}^{\\lfloor c \\log_{2} n \\rfloor} g^{k}\\right) \\cdot \\lfloor c \\log_{2} n \\rfloor = O\\!\\left(n \\cdot n^{c \\log_{2} g} \\cdot \\log n\\right) = \\text{poly}(n).\n$$\n因为 $M$ 是确定性的，所以配置图 $G(M,w)$ 中每个顶点的出度最多为1。设 $f$ 为（部分）后继函数，它将一个配置映射到其唯一的下一个配置（如果存在）。当且仅当存在一个配置 $C$，使得 $f$ 在 $C$、$f(C)$ 和 $f^{2}(C)$ 上有定义，这三个配置 $C$、$f(C)$、$f^{2}(C)$ 两两不同，并且\n$$\nf^{3}(C) = C.\n$$\n时，存在一个有向3-环。\n\n我们设计一个确定性对数空间算法来判定是否存在这样的 $C$。\n\n1.  使用嵌套计数器，按字典序列举所有配置 $C = (q,i,\\gamma,j)$：\n    -   $q \\in Q$，\n    -   $i \\in \\{1,\\dots,n\\}$，\n    -   长度 $\\ell \\in \\{1,\\dots,\\lfloor c \\log_{2} n \\rfloor\\}$，\n    -   $\\gamma \\in \\Gamma^{\\ell}$，\n    -   $j \\in \\{1,\\dots,\\ell\\}$。\n    因为索引空间是 $n$ 的多项式，所以每个计数器总共最多需要 $O(\\log n)$ 位。由于 $|\\gamma| = O(\\log n)$，从其索引重构 $\\gamma$ 使用 $O(\\log n)$ 空间。\n\n2.  对于每个枚举的 $C$，计算其在 $f$ 下的最多三步后继：\n    -   通过查阅 $M$ 的转移函数（从输入中读取）、输入 $w$ 中位置 $i$ 的符号（从输入中读取）以及 $\\gamma$ 中位置 $j$ 的符号（本地存储）来计算 $C_{1} = f(C)$（如果已定义）。如果 $C_{1}$ 未定义，则继续处理下一个 $C$。\n    -   类似地计算 $C_{2} = f(C_{1})$；如果未定义，则继续。\n    -   类似地计算 $C_{3} = f(C_{2})$；如果未定义，则继续。\n\n3.  检查3-环的条件：\n    -   通过元组的逐分量比较来验证 $C_{3} = C$。\n    -   验证 $C \\neq C_{1}$ 和 $C \\neq C_{2}$（在一个函数图中，当 $f^{3}(C) = C$ 且 $C \\neq C_{1}$ 时，这也意味着 $C_{1} \\neq C_{2}$）。\n\n空间分析：\n- 存储一个配置元组 $(q,i,\\gamma,j)$ 使用 $O(\\log n)$ 空间，因为 $i$ 和 $j$ 分别最多为 $n$ 和 $c \\log_{2} n$，而 $\\gamma$ 的长度为 $O(\\log n)$，且字母表大小为常数。\n- 在多项式范围内维护枚举计数器使用 $O(\\log n)$ 位。\n- 后继计算仅使用当前配置和只读输入 $(M,w)$，因此除了 $O(\\log n)$ 之外，不需要额外的渐进空间。\n- 为了将 $C_{3}$ 与 $C$ 进行比较，我们在计算后继时，在另一个 $O(\\log n)$ 的缓冲区中保留一份 $C$ 的副本；总空间仍为 $O(\\log n)$。\n\n因此，整个判定过程在确定性 $O(\\log n)$ 空间内运行。因此，该问题属于复杂性类 L。由于 L 被包含在所有列出的更大类中，所以选项中最紧密的刻画是 L。\n\n因此，正确选项是 A。", "answer": "$$\\boxed{A}$$", "id": "1418024"}]}