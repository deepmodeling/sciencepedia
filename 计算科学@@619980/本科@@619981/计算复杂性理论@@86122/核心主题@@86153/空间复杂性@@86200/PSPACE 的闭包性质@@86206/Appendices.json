{"hands_on_practices": [{"introduction": "理解一个复杂性类的闭包性质，不仅要知道哪些运算是封闭的，还要明白这些性质之间如何相互关联。本练习旨在展示如何利用已知的闭包性质（如并置和克莱尼星号）来推导出新的闭包性质——在此即正闭包。这个过程强调用逻辑演绎来扩展我们对 PSPACE 能力的认识，而不是为每个新运算都从头构建图灵机。[@problem_id:1415961]", "problem": "在计算复杂性理论中，我们研究可以用图灵机在一定的计算资源下解决的判定问题。复杂度类 PSPACE 包含了所有可以由一台确定性图灵机使用与输入字符串长度呈多项式关系的空间量来判定的判定问题。\n\n设 $L$、$L_1$ 和 $L_2$ 是形式语言。我们定义以下关于语言的标准运算：\n- **连接 ($L_1 L_2$):** 由一个来自 $L_1$ 的字符串与一个来自 $L_2$ 的字符串连接而成的字符串集合。形式上，$L_1 L_2 = \\{ w_1 w_2 \\mid w_1 \\in L_1, w_2 \\in L_2 \\}$。\n- **克林星号 ($L^*$):** 由零个或多个来自 $L$ 的字符串连接而成的所有字符串的集合。形式上，$L^* = \\bigcup_{i \\ge 0} L^i$，其中 $L^0 = \\{\\epsilon\\}$（只包含空字符串的语言）且当 $i \\ge 1$ 时，$L^i = L L^{i-1}$。\n- **正闭包 ($L^+$):** 由一个或多个来自 $L$ 的字符串连接而成的所有字符串的集合。形式上，$L^+ = \\bigcup_{i \\ge 1} L^i$。\n\n一个已知的定理是，PSPACE 类在连接运算和克林星号运算下是封闭的。这意味着如果语言 $L_1$ 和 $L_2$ 属于 PSPACE，那么语言 $L_1 L_2$ 也属于 PSPACE。类似地，如果一个语言 $L$ 属于 PSPACE，那么它的克林星号 $L^*$ 也属于 PSPACE。\n\n一个关联这些运算的重要恒等式是 $L^+ = L L^*$。给定 $L$ 是 PSPACE 中的一个任意语言，以下哪个陈述为 PSPACE 也必须在正闭包运算下封闭提供了最直接和正确的理由？\n\nA. 为了判定一个字符串 $w$ 是否在 $L^+$ 中，一个非确定性图灵机可以猜测 $w$ 中的一个分割点，形成两个子字符串 $u$ 和 $v$，使得 $w = uv$。然后该图灵机验证 $u \\in L$ 且 $v \\in L^*$ 是否成立。因为非确定性可以在多项式空间内被模拟，并且两个子问题都属于 PSPACE，所以整个过程在多项式空间内运行。\n\nB. 正闭包 $L^+$ 是克林星号 $L^*$ 的一个子集（具体来说，$L^* = L^+ \\cup \\{\\epsilon\\}$）。既然我们已知 $L^*$ 属于 PSPACE，而 $L^+$ 是 $L^*$ 的一个子集，那么它也必须属于 PSPACE。\n\nC. 正闭包可以写成一个无限并集 $L^+ = L \\cup L^2 \\cup L^3 \\cup \\dots$。虽然每一项 $L^i$ 都属于 PSPACE（通过重复应用连接运算的封闭性），但 PSPACE 在无限并集下不封闭。因此，这个构造是无效的，我们不能得出 PSPACE 在正闭包下封闭的结论。\n\nD. 我们已知两个事实：(1) 如果一个语言 $L$ 属于 PSPACE，那么 $L^*$ 也属于 PSPACE；(2) 如果语言 $L_1$ 和 $L_2$ 属于 PSPACE，那么它们的连接 $L_1 L_2$ 也属于 PSPACE。通过将第一个事实应用于我们的语言 $L$，我们知道 $L^*$ 属于 PSPACE。现在我们有两个都属于 PSPACE 的语言，$L$ 和 $L^*$。使用第二个事实，它们的连接 $L L^*$ 也必须属于 PSPACE。由于 $L^+ = L L^*$，这表明 $L^+$ 属于 PSPACE。", "solution": "我们已知 PSPACE 在连接运算和克林星号运算下是封闭的，并且对于任何语言 $L$，恒等式 $L^{+} = L L^{*}$ 成立。\n\n从一个任意语言 $L \\in \\text{PSPACE}$ 开始。\n\n根据 PSPACE 在克林星号运算下的封闭性，将其应用于 $L$ 得出\n$$\nL^{*} \\in \\text{PSPACE}.\n$$\n现在我们有两个都在 PSPACE 中的语言，$L$ 和 $L^{*}$。根据 PSPACE 在连接运算下的封闭性，我们得出结论\n$$\nL L^{*} \\in \\text{PSPACE}.\n$$\n使用关联正闭包与星号和连接运算的恒等式，\n$$\nL^{+} = L L^{*},\n$$\n我们得到\n$$\nL^{+} \\in \\text{PSPACE}.\n$$\n因此，PSPACE 在正闭包运算下是封闭的，而最直接的理由正是先应用星号运算的封闭性得到 $L^{*}$，然后应用连接运算的封闭性得到 $L L^{*}$，最后使用 $L^{+} = L L^{*}$。\n\n选项评估：\n- 选项 A 援引了非确定性以及在多项式空间内的模拟。虽然由于 $\\text{PSPACE} = \\text{NPSPACE}$，这个论证可以成立，但这并不是对给定的封闭性质和恒等式的最直接应用。\n- 选项 B 不正确，因为一个语言是 PSPACE 语言的子集，通常并不意味着对该子集的成员资格测试也在 PSPACE 中。\n- 选项 C 不是一个有效的理由：尽管 PSPACE 在无限并集下不封闭，但这并不妨碍 $L^{+}$ 通过其他方式属于 PSPACE；此外，我们已经有了一个通过 $L L^{*}$ 的直接构造。\n- 选项 D 精确地应用了给定的封闭性质和恒等式 $L^{+} = L L^{*}$，提供了最直接和正确的理由。\n\n因此，正确选项是 D。", "answer": "$$\\boxed{D}$$", "id": "1415961"}, {"introduction": "在证明闭包性质时，一个核心技巧是构造一个决断器（decider）。本练习将指导你为两个 PSPACE 语言的对称差($L_1 \\Delta L_2$)设计一个高层次的算法。关键在于理解如何通过顺序执行已有的多项式空间图灵机，并重用其工作空间，来解决一个新问题，同时确保总空间消耗仍在多项式范围内。[@problem_id:1415970]", "problem": "在计算复杂性理论中，一个复杂度类（complexity class）是一组具有相关资源复杂度的计算问题集合。PSPACE 是一个复杂度类，它包含所有可以由确定性图灵机（TM）在使用的存储空间是输入字符串长度的多项式函数的情况下解决的判定问题。一个语言（language）是一个字符串的集合，而判定一个语言的图灵机是指一台在每个输入上都会停机，要么接受它（如果字符串在语言中）要么拒绝它（如果不在语言中）的图灵机。\n\n复杂度类的一个基本性质是它在某些运算下的封闭性。如果一个类中的任何语言经过某个运算后，得到的结果语言仍然在该类中，则称该类在此运算下是封闭的。众所周知，PSPACE在并集（$L_1 \\cup L_2$）、交集（$L_1 \\cap L_2$）和补集（$\\bar{L}$）运算下是封闭的。\n\n假设给定两个语言 $L_1$ 和 $L_2$，它们都在 PSPACE 中。这意味着存在多项式空间的判定图灵机，我们分别称之为 $M_1$ 和 $M_2$，用于判定 $L_1$ 和 $L_2$。你的任务是为这两个语言的对称差设计一个新的多项式空间判定器 $M_\\Delta$，对称差定义为 $L_\\Delta = L_1 \\Delta L_2$。对称差包含所有恰好属于两个语言之一的字符串，即，属于 $L_1$ 或 $L_2$，但不同时属于两者。\n\n下列哪项描述了图灵机 $M_\\Delta$ 判断输入字符串 $w$ 是否在 $L_\\Delta$ 中的正确高层算法？\n\nA. 在输入 $w$ 上，运行 $M_1$ 处理 $w$。如果 $M_1$ 接受，则 $M_\\Delta$ 接受。否则，运行 $M_2$ 处理 $w$。如果 $M_2$ 接受，则 $M_\\Delta$ 接受。否则，$M_\\Delta$ 拒绝。\n\nB. 在输入 $w$ 上，运行 $M_1$ 处理 $w$ 并运行 $M_2$ 处理 $w$。如果 $M_1$ 和 $M_2$ 都接受，则 $M_\\Delta$ 接受。否则，$M_\\Delta$ 拒绝。\n\nC. 在输入 $w$ 上，运行 $M_1$ 处理 $w$ 并运行 $M_2$ 处理 $w$。如果两台机器中恰好有一台接受，则 $M_\\Delta$ 接受。否则，$M_\\Delta$ 拒绝。\n\nD. 在输入 $w$ 上，运行 $M_1$ 处理 $w$。如果 $M_1$ 拒绝，则 $M_\\Delta$ 接受。否则，运行 $M_2$ 处理 $w$。如果 $M_2$ 接受，则 $M_\\Delta$ 拒绝。否则，$M_\\Delta$ 接受。\n\nE. 在输入 $w$ 上，运行 $M_1$ 处理 $w$ 并运行 $M_2$ 处理 $w$。如果两台机器中至少有一台拒绝，则 $M_\\Delta$ 接受。否则，$M_\\Delta$ 拒绝。", "solution": "设 $L_{1},L_{2} \\subseteq \\Sigma^{*}$ 属于 PSPACE，其判定图灵机 $M_{1},M_{2}$ 在每个输入上都停机，并且对于某些多项式 $p_{1},p_{2}$，分别至多使用 $p_{1}(|w|)$ 和 $p_{2}(|w|)$ 的空间。对称差是\n$$\nL_{\\Delta} \\;=\\; L_{1} \\Delta L_{2} \\;=\\; (L_{1}\\setminus L_{2}) \\cup (L_{2}\\setminus L_{1})\n\\;=\\; \\{\\, w \\mid (w\\in L_{1}) \\oplus (w\\in L_{2}) \\,\\},\n$$\n即，成员关系是两个成员关系位的异或（XOR）。\n\n一个正确的判定器 $M_{\\Delta}$ 在输入 $w$ 上的执行过程如下：在 $w$ 上模拟 $M_{1}$ 直至完成，记录一个比特 $b_{1}\\in\\{0,1\\}$ 表示接受或拒绝，清空其工作带，然后在 $w$ 上模拟 $M_{2}$ 直至完成并记录 $b_{2}$。最后，在有限控制器中计算 $b_{1}\\oplus b_{2}$，当且仅当 $b_{1}\\oplus b_{2}=1$ 时接受，否则拒绝。因为 $M_{1}$ 和 $M_{2}$ 是判定器，所以 $M_{\\Delta}$ 在所有输入上都会停机。其空间使用量至多为\n$$\n\\max\\{\\,p_{1}(|w|),\\,p_{2}(|w|)\\,\\} + c,\n$$\n其中 $c$ 是一个用于存储 $(b_{1},b_{2})$ 和控制信息的常数，这是 $|w|$ 的多项式。因此 $M_{\\Delta}$ 是一个多项式空间判定器。\n\n将选项映射到集合运算：\n- A 接受当且仅当 $(w\\in L_{1}) \\lor (w\\in L_{2})$，即 $L_{1}\\cup L_{2}$。\n- B 接受当且仅当 $(w\\in L_{1}) \\land (w\\in L_{2})$，即 $L_{1}\\cap L_{2}$。\n- C 接受当且仅当 $M_{1},M_{2}$ 中恰好有一个接受，即异或（XOR），也就是 $L_{1}\\Delta L_{2}$。\n- D 接受，除非两者都接受，即 $\\overline{L_{1}\\cap L_{2}}$。\n- E 接受，如果至少有一个拒绝，也即 $\\overline{L_{1}\\cap L_{2}}$。\n\n因此，$M_{\\Delta}$ 的正确高层算法由选项 C 给出。", "answer": "$$\\boxed{C}$$", "id": "1415970"}, {"introduction": "现在，让我们挑战一个更复杂的构造，即 $\\text{MIN}(L)$ 运算，它要求我们识别一个语言中没有其任何真前缀属于该语言的字符串。这个问题看似复杂，因为它涉及对一个字符串所有前缀的检查。这个练习完美地展示了 PSPACE 的强大之处：通过迭代检查每个前缀，并为每次检查重用多项式大小的空间，我们可以高效地解决这类问题，从而深化对空间重用这一核心计算思想的理解。[@problem_id:1415944]", "problem": "在计算复杂性理论中，我们经常研究复杂度类在各种语言运算下的闭包性质。给定一个在有限字母表 $\\Sigma$ 上的语言 $L$，我们可以定义一个新语言 $\\text{MIN}(L)$。该语言包含 $L$ 中所有“最小”的字符串，即它们的任何真前缀都不在 $L$ 中。如果字符串 $w$ 可以写成 $w = vu$ 的形式，其中 $u$ 是某个非空字符串，那么字符串 $v$ 就被定义为 $w$ 的一个真前缀。\n\n形式上，语言 $\\text{MIN}(L)$ 定义如下：\n$$ \\text{MIN}(L) = \\{ w \\in L \\mid \\text{for all proper prefixes } v \\text{ of } w, v \\notin L \\} $$\n\n假设已知一个语言 $L$ 属于复杂度类 PSPACE。PSPACE (多项式空间) 类是所有可由确定性图灵机在多项式于输入字符串长度的内存空间内判定的判定问题的集合。\n\n给定 $L \\in \\text{PSPACE}$，以下哪个复杂度类**必然**包含语言 $\\text{MIN}(L)$？选择所有适用项。\n\nA. P (可在多项式时间内判定的语言类)\n\nB. NP (可由非确定性图灵机在多项式时间内判定的语言类)\n\nC. co-NP (其补集在 NP 中的语言类)\n\nD. PSPACE (可在多项式空间内判定的语言类)\n\nE. EXPTIME (可在指数时间内判定的语言类)", "solution": "设 $L \\subseteq \\Sigma^{*}$ 属于 PSPACE。那么存在一个确定性图灵机 $M_{L}$ 和一个多项式 $s(n)$，使得对于任何长度为 $|x|=n$ 的输入 $x$，$M_{L}$ 最多使用 $s(n)$ 个工作带单元来判定 $x \\in L$ 是否成立。\n\n根据定义，\n$$\n\\text{MIN}(L)=\\{w \\in L \\mid \\forall v \\text{ proper prefix of } w,\\, v \\notin L\\}.\n$$\n固定一个输入 $w$，其长度为 $|w|=n$。那么，$w \\in \\text{MIN}(L)$ 当且仅当以下两个条件成立：\n1) $w \\in L$。\n2) 对于每一个 $i \\in \\{0,1,\\ldots,n-1\\}$，令 $v_{i}$ 为 $w$ 的长度为 $i$ 的前缀，我们有 $v_{i} \\notin L$。\n\n我们给出一个用于判定 $\\text{MIN}(L)$ 的多项式空间判定器：\n- 首先在 $w$ 上运行 $M_{L}$。如果它拒绝，则拒绝（因为 $w \\notin L$）。\n- 否则，对于从 $0$ 到 $n-1$ 的每个 $i$，通过复制 $w$ 的前 $i$ 个符号在工作带上构造 $v_{i}$（这使用 $O(n)$ 空间），然后在 $v_{i}$ 上运行 $M_{L}$。如果有任何一次运行接受，则拒绝（因为有一个真前缀在 $L$ 中）。如果所有运行都拒绝，则接受。\n\n空间分析：每次在输入 $v_{i}$ 上运行 $M_{L}$ 最多使用 $s(i) \\leq s(n)$ 的空间。构造 $v_{i}$ 需要 $O(n)$ 的空间。在迭代中重用工作带，总空间永远不会超过 $O(s(n)+n)$，这是关于 $n$ 的多项式。因此，$\\text{MIN}(L) \\in \\text{PSPACE}$。\n\n因为 PSPACE 包含于 EXPTIME 中，所以我们也有 $\\text{MIN}(L) \\in \\text{EXPTIME}$。具体来说，任何使用最多 $s(n)$ 空间的确定性机器最多有 $\\exp(O(s(n)))$ 个不同的格局（configuration），因此它会在 $\\exp(O(s(n)))$ 步内停机，从而得出 $DSPACE(s(n)) \\subseteq DTIME(\\exp(O(s(n))))$, 因此 $\\text{PSPACE} \\subseteq \\text{EXPTIME}$。\n\n对于任意的 $L \\in \\text{PSPACE}$，$\\{\\text{P}, \\text{NP}, \\text{co-NP}\\}$ 中没有更小的类能保证包含 $\\text{MIN}(L)$，因为那将意味着无条件的包含关系 $\\text{PSPACE} \\subseteq \\text{P}$、$\\text{PSPACE} \\subseteq \\text{NP}$ 或 $\\text{PSPACE} \\subseteq \\text{co-NP}$，而这些关系尚未被证实，并且被广泛认为是错误的。\n\n因此，保证包含 $\\text{MIN}(L)$ 的类是 PSPACE 和 EXPTIME。", "answer": "$$\\boxed{DE}$$", "id": "1415944"}]}