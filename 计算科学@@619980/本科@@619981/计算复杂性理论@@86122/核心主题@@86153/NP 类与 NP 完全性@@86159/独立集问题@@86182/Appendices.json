{"hands_on_practices": [{"introduction": "这个首个练习旨在热身，帮助您就独立集问题建立基础直觉。我们将分析最简单的非平凡图结构之一：路径图。通过确定长度为 $n$ 的路径图上的最大独立集的大小，您将练习一项基本技能——从结构特性中推导出精确的封闭形式公式，这是算法分析中的一项常见任务 [@problem_id:1458499]。", "problem": "在计算图论中，一个图的*独立集*是指图中的一个顶点子集，其中任意两个顶点都不相邻。*最大独立集*问题是找到一个可能的最大规模的独立集。\n\n考虑一种特殊类型的图，称为*路径图*，记作 $P_n$。它由 $n$ 个标记为 $v_1, v_2, \\ldots, v_n$ 的顶点以及对于所有 $1 \\le i < n$ 连接 $v_i$ 和 $v_{i+1}$ 的边组成。这种结构可以模拟各种现实世界中的场景，例如线性装配线上的工位或简单链条中的通信节点。\n\n你的任务是确定路径图 $P_n$ 的最大独立集的大小关于顶点数 $n$ 的一个闭式表达式。你的表达式应该使用标准的数学函数，并且不应是递归公式。对于此问题，你可以使用天花板函数，记作 $\\lceil x \\rceil$，它给出大于或等于 $x$ 的最小整数。", "solution": "设路径图为 $P_n$，其顶点集为 $V = \\{v_1, v_2, \\ldots, v_n\\}$，边集为 $E = \\{(v_i, v_{i+1}) \\mid 1 \\le i < n\\}$。我们要寻找最大独立集的大小，记为 $\\alpha(P_n)$。为求此值，我们将为 $\\alpha(P_n)$ 建立一个下界和一个上界，并证明它们相等。\n\n首先，为了建立下界，我们可以构造一个有效的独立集并计算其大小。最大独立集的大小必须至少与任何特定独立集的大小相等。考虑具有奇数索引的顶点集：$S_{odd} = \\{v_1, v_3, v_5, \\ldots\\}$。在 $P_n$ 中，一条边只连接索引连续的顶点。因为 $S_{odd}$ 中的任意两个顶点 $v_i, v_j$ 的索引之差至少为2，所以 $S_{odd}$ 中没有两个顶点是相邻的。因此，$S_{odd}$ 是一个独立集。\n\n现在，我们来确定 $S_{odd}$ 的大小。\n- 如果 $n$ 是奇数，我们可以写成 $n = 2k-1$，其中 $k \\ge 1$ 是某个整数。奇数索引为 $1, 3, \\ldots, 2k-1$。恰好有 $k$ 个这样的索引。我们可以用 $n$ 来表示 $k$ 为 $k = \\frac{n+1}{2}$。\n- 如果 $n$ 是偶数，我们可以写成 $n = 2k$，其中 $k \\ge 1$ 是某个整数。奇数索引为 $1, 3, \\ldots, 2k-1$。恰好有 $k$ 个这样的索引。我们可以用 $n$ 来表示 $k$ 为 $k = \\frac{n}{2}$。\n\n我们可以用天花板函数来统一这两种情况。\n- 如果 $n=2k-1$ (奇数)，则 $\\lceil n/2 \\rceil = \\lceil (2k-1)/2 \\rceil = \\lceil k - 1/2 \\rceil = k$。\n- 如果 $n=2k$ (偶数)，则 $\\lceil n/2 \\rceil = \\lceil (2k)/2 \\rceil = \\lceil k \\rceil = k$。\n在这两种情况下，我们构造的独立集 $S_{odd}$ 的大小为 $|S_{odd}| = \\lceil n/2 \\rceil$。由于我们找到了一个大小为此值的独立集，最大独立集的大小必须至少这么大。因此，我们得到了下界：$\\alpha(P_n) \\ge \\lceil n/2 \\rceil$。\n\n接下来，为了建立上界，我们将证明没有独立集可以大于 $\\lceil n/2 \\rceil$。我们可以将路径图的顶点划分为若干个相邻顶点组。考虑由 $\\lfloor n/2 \\rfloor$ 条不相交的边（相邻顶点对）组成的集合：$\\{(v_1, v_2), (v_3, v_4), \\ldots, (v_{2\\lfloor n/2 \\rfloor-1}, v_{2\\lfloor n/2 \\rfloor})\\}$。\n根据定义，一个独立集从任何一个相邻顶点对中最多只能包含一个顶点。\n\n- 情况1：$n$ 是偶数。设 $n = 2k$。顶点集可以完美地划分为 $k$ 对相邻顶点：$\\{v_1, v_2\\}, \\{v_3, v_4\\}, \\ldots, \\{v_{2k-1}, v_{2k}\\}$。一个独立集从这 $k$ 对中的每一对最多只能选择一个顶点。因此，一个独立集的最大可能大小是 $k$。由于 $n=2k$，这个大小就是 $n/2$。对于偶数 $n$，$n/2 = \\lceil n/2 \\rceil$。所以，当 $n$ 为偶数时，$\\alpha(P_n) \\le n/2 = \\lceil n/2 \\rceil$。\n\n- 情况2：$n$ 是奇数。设 $n = 2k+1$。我们可以形成 $k$ 对相邻顶点 $\\{v_1, v_2\\}, \\{v_3, v_4\\}, \\ldots, \\{v_{2k-1}, v_{2k}\\}$，这会留下一个未配对的顶点 $v_{2k+1}$。一个独立集从这 $k$ 对中的每一对最多可以取一个顶点，并且还可以包括剩下的单个顶点 $v_{2k+1}$。因此，一个独立集的最大可能大小是 $k+1$。对于 $n=2k+1$，我们有 $k+1 = (n-1)/2 + 1 = (n+1)/2$。对于奇数 $n$，$(n+1)/2 = \\lceil n/2 \\rceil$。所以，当 $n$ 为奇数时，$\\alpha(P_n) \\le (n+1)/2 = \\lceil n/2 \\rceil$。\n\n在两种情况下，我们都证明了 $\\alpha(P_n) \\le \\lceil n/2 \\rceil$。\n\n综合我们的结果，我们已经建立了 $\\alpha(P_n) \\ge \\lceil n/2 \\rceil$（下界）和 $\\alpha(P_n) \\le \\lceil n/2 \\rceil$（上界）。要使这两个不等式同时成立，唯一的可能是最大独立集的大小恰好等于这个值。\n\n因此，路径图 $P_n$ 的最大独立集大小的闭式表达式是 $\\lceil n/2 \\rceil$。", "answer": "$$\\boxed{\\lceil \\frac{n}{2} \\rceil}$$", "id": "1458499"}, {"introduction": "在基本结构的基础上，这个问题探讨了两个基本图概念之间深刻而优美的关系。通过一个实际场景，您将发现独立集和顶点覆盖之间的对偶性。理解这种被称为 Gallai 恒等式的联系至关重要，因为它揭示了这两个看似不同的优化问题实际上是同一枚硬币的两面 [@problem_id:1458479]。", "problem": "在计算社会科学中，一个个体网络可以被建模为一个图 $G=(V, E)$，其中顶点集 $V$ 代表个体，边集 $E$ 代表个体对之间的直接关系（例如，友谊或合作）。\n\n考虑一个拥有 $n$ 个个体的社交网络。在这个网络中，我们想要识别一个“监控组”。监控组是一个个体子集，其选择方式要保证网络中的每条直接关系都至少涉及该组中的一个个体。为提高操作效率，目标是找到一个规模尽可能小的监控组。经过对网络结构的深入分析，确定了这样一个组的最小规模为 $k$。\n\n另外，我们想要组建一个“焦点小组”。焦点小组是一个个体子集，其中任意两名成员之间都没有直接关系。为了最大化多样化、独立的意见，目标是组建一个规模尽可能大的焦点小组。\n\n根据以上信息，确定焦点小组的最大可能规模。请用一个关于 $n$ 和 $k$ 的符号表达式来表示你的答案。", "solution": "将社交网络解释为一个有限、简单、无向图 $G=(V,E)$，其中 $|V|=n$。一个监控组是一个顶点覆盖：一个集合 $C \\subseteq V$，使得 $E$ 中的每条边都至少有一个端点在 $C$ 中。题目说明这种集合的最小规模是 $k$，所以顶点覆盖数是 $\\tau(G)=k$。\n\n一个焦点小组是一个独立集：一个集合 $I \\subseteq V$，使得 $I$ 中没有两个顶点是相邻的。其最大可能规模是独立数 $\\alpha(G)$，我们需要用 $n$ 和 $k$ 来表示它。\n\n首先，我们观察到任何顶点覆盖的补集都是一个独立集。确实，设 $C \\subseteq V$ 是一个顶点覆盖。如果存在一条两个端点都在 $V \\setminus C$ 中的边，那么这条边就没有端点在 $C$ 中，这与顶点覆盖的定义相矛盾。因此 $V \\setminus C$ 是一个独立集。取 $C$ 为一个最小顶点覆盖，其大小为 $|C|=\\tau(G)=k$，我们得到一个大小为 $|V \\setminus C|=n-k$ 的独立集，所以\n$$\n\\alpha(G) \\geq n - \\tau(G) = n - k.\n$$\n\n反过来，任何独立集的补集都是一个顶点覆盖。设 $I \\subseteq V$ 是一个独立集。对于任意一条边，它的两个端点不可能都在 $I$ 中，所以至少有一个端点位于 $V \\setminus I$ 中，这意味着 $V \\setminus I$ 覆盖了所有的边。因此，对于每一个独立集 $I$，都有 $|V \\setminus I| \\geq \\tau(G)$，特别是对于一个大小为 $\\alpha(G)$ 的最大独立集，\n$$\n\\tau(G) \\leq n - \\alpha(G) \\quad \\Longrightarrow \\quad \\alpha(G) \\leq n - \\tau(G) = n - k.\n$$\n\n结合这两个不等式得到\n$$\n\\alpha(G) = n - \\tau(G) = n - k.\n$$\n因此，焦点小组的最大可能规模是 $n - k$。", "answer": "$$\\boxed{n-k}$$", "id": "1458479"}, {"introduction": "现在，我们将从理论特性转向实用、高效的算法。虽然寻找最大独立集通常是一个计算上的难题，但本练习将展示我们如何能为树这种重要的图类别高效地解决该问题。您将应用动态规划，这是一种强大的技术，对于解决树状数据结构上的许多优化问题至关重要 [@problem_id:1458498]。", "problem": "一家科技公司有 12 名员工，编号从 0 到 11，公司采用严格的层级汇报结构。员工 0 是首席执行官 (CEO)。其他每位员工的直属经理由以下列表指定，其中索引 `i` 处的元素表示员工 `i+1` 的经理：`[0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 5]`。例如，员工 1 的经理是员工 0。\n\n公司正在组建一个特别任务小组。为确保观点多样性并避免利益冲突，选拔过程有一条硬性规定：任何员工都不能与其直属经理同时加入任务小组。你的任务是，在遵守此规则的前提下，确定可以选入该任务小组的最大员工数量。", "solution": "这个问题要求计算一个最大的员工集合，使得集合中任意两名员工之间不存在直接的经理-下属关系。这等同于在树中寻找最大独立集的大小。公司的层级结构形成了一棵树，其中员工是节点，直接汇报关系是边。\n\n我们可以使用树形动态规划来高效地解决这个问题。我们从叶节点向上处理到根节点（即后序遍历）。对于每个员工（节点）`u`，我们将计算两个值：\n1.  $S_{in}(u)$: 在以 `u` 为根的子树（即由 `u` 管理的员工，包括 `u` 自己）中，*假设 `u` 被选中*加入任务小组时，可能的最大有效任务小组的规模。\n2.  $S_{out}(u)$: 在以 `u` 为根的子树中，*假设 `u` 未被选中*加入任务小组时，可能的最大有效任务小组的规模。\n\n这些值的递推关系如下：\n\n如果员工 `u` 被选中加入任务小组，那么他/她的所有直属下属都不能被选中。因此，为了最大化规模，我们必须从每个直属下属的子树中，在下属*未被选中*的条件下，选择最大的任务小组。\n$$S_{in}(u) = 1 + \\sum_{v \\in \\text{children}(u)} S_{out}(v)$$\n`1` 代表被选中的员工 `u`。\n\n如果员工 `u` 未被选中，那么对于他/她的每个直属下属 `v`，我们可以自由选择是否选中 `v`。为了最大化总规模，我们应该为每个子节点的子树独立地选择最优方案。对于 `v` 的子树，我们能得到的最好结果是 $\\max(S_{in}(v), S_{out}(v))$。\n$$S_{out}(u) = \\sum_{v \\in \\text{children}(u)} \\max(S_{in}(v), S_{out}(v))$$\n\n这个递归的基准情况是叶节点（没有直属下属的员工）。对于任何叶节点员工 `l`：\n- $S_{in}(l) = 1$（任务小组仅包含 `l`）。\n- $S_{out}(l) = 0$（来自此子树的任务小组为空）。\n\n在为所有员工计算出这些值直到根节点（CEO，员工 0）后，最终答案是整个公司的两种可能性中的最大值：$\\max(S_{in}(0), S_{out}(0))$。\n\n首先，我们把公司结构表示为每个经理的下属列表：\n- 0 的下属：{1, 2}\n- 1 的下属：{3, 4}\n- 2 的下属：{5, 6}\n- 3 的下属：{7, 8}\n- 4 的下属：{9}\n- 5 的下属：{10, 11}\n- 员工 6, 7, 8, 9, 10, 11 是叶节点（没有下属）。\n\n现在，我们以后序遍历的方式（从叶节点到根节点）计算这些值。我们将员工 `u` 的值对表示为 $[S_{out}(u), S_{in}(u)]$。\n\n1.  **叶节点员工 (6, 7, 8, 9, 10, 11):**\n    对于任何叶节点 `l`，$[S_{out}(l), S_{in}(l)] = [0, 1]$。\n\n2.  **员工 9 (叶节点):** 值为 $[0, 1]$。\n\n3.  **员工 4 (9 的经理):**\n    $S_{in}(4) = 1 + S_{out}(9) = 1 + 0 = 1$。\n    $S_{out}(4) = \\max(S_{in}(9), S_{out}(9)) = \\max(1, 0) = 1$。\n    4 的值为：$[1, 1]$。\n\n4.  **员工 7, 8 (叶节点):** 值为 $[0, 1]$。\n\n5.  **员工 3 (7, 8 的经理):**\n    $S_{in}(3) = 1 + S_{out}(7) + S_{out}(8) = 1 + 0 + 0 = 1$。\n    $S_{out}(3) = \\max(S_{in}(7), S_{out}(7)) + \\max(S_{in}(8), S_{out}(8)) = 1 + 1 = 2$。\n    3 的值为：$[2, 1]$。\n\n6.  **员工 1 (3, 4 的经理):**\n    $S_{in}(1) = 1 + S_{out}(3) + S_{out}(4) = 1 + 2 + 1 = 4$。\n    $S_{out}(1) = \\max(S_{in}(3), S_{out}(3)) + \\max(S_{in}(4), S_{out}(4)) = \\max(1, 2) + \\max(1, 1) = 2 + 1 = 3$。\n    1 的值为：$[3, 4]$。\n\n7.  **员工 10, 11 (叶节点):** 值为 $[0, 1]$。\n\n8.  **员工 5 (10, 11 的经理):**\n    $S_{in}(5) = 1 + S_{out}(10) + S_{out}(11) = 1 + 0 + 0 = 1$。\n    $S_{out}(5) = \\max(S_{in}(10), S_{out}(10)) + \\max(S_{in}(11), S_{out}(11)) = 1 + 1 = 2$。\n    5 的值为：$[2, 1]$。\n\n9.  **员工 6 (叶节点):** 值为 $[0, 1]$。\n\n10. **员工 2 (5, 6 的经理):**\n    $S_{in}(2) = 1 + S_{out}(5) + S_{out}(6) = 1 + 2 + 0 = 3$。\n    $S_{out}(2) = \\max(S_{in}(5), S_{out}(5)) + \\max(S_{in}(6), S_{out}(6)) = \\max(1, 2) + \\max(1, 0) = 2 + 1 = 3$。\n    2 的值为：$[3, 3]$。\n\n11. **员工 0 (CEO, 1, 2 的经理):**\n    $S_{in}(0) = 1 + S_{out}(1) + S_{out}(2) = 1 + 3 + 3 = 7$。\n    $S_{out}(0) = \\max(S_{in}(1), S_{out}(1)) + \\max(S_{in}(2), S_{out}(2)) = \\max(4, 3) + \\max(3, 3) = 4 + 3 = 7$。\n    0 的值为：$[7, 7]$。\n\n最后，任务小组的最大规模是我们从 CEO 开始能得到的最好结果，即 $\\max(S_{in}(0), S_{out}(0)) = \\max(7, 7) = 7$。", "answer": "$$\\boxed{7}$$", "id": "1458498"}]}