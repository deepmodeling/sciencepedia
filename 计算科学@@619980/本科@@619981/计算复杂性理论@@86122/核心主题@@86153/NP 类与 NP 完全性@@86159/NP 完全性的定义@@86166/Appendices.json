{"hands_on_practices": [{"introduction": "在证明一个问题是 NP-hard 时，最常见也最关键的错误之一就是弄反归约的方向。这个练习旨在阐明这一基本逻辑：为了证明你的新问题 $L$ 至少和已知的 NP-hard 问题一样“难”，你必须展示如何用 $L$ 的“解法器”来解决那个已知的难题，而不是反过来。理解这一点是掌握 NP-completeness 证明的基石。[@problem_id:1419806]", "problem": "一个计算复杂性课程的学生试图证明一个她称之为 $L$ 的新判定问题是 NP-难的。她知道布尔可满足性问题对于3-合取范式公式（3-SAT）是一个著名的 NP-完全问题。\n\n她提出的证明策略如下：\n1.  取问题 $L$ 的一个任意实例 $i_L$。\n2.  构建一个相对于 $i_L$ 的规模在多项式时间内运行的算法。\n3.  这个算法将实例 $i_L$ 转换为一个 3-SAT 的实例，我们称之为 $i_{3SAT}$。\n4.  该转换被设计成：$i_L$ 是 $L$ 的一个“是”实例，当且仅当 $i_{3SAT}$ 是一个可满足的公式（一个 3-SAT 的“是”实例）。\n\n她声称，既然她能将自己的问题在多项式时间内转换为一个已知的 NP-完全问题，那么她的问题 $L$ 必定至少同样难，因此是 NP-难的。\n\n下列哪个陈述正确地指出了她证明 $L$ 是 NP-难的推理中的根本逻辑缺陷？\n\nA. 她的策略不完整。为了证明 NP-难度，归约必须是可逆的，即她还必须展示一个从 3-SAT 到她的问题 $L$ 的多项式时间归约。\n\nB. 这个归约是无效的，因为 3-SAT 属于 NP 类（非确定性多项式时间）。一个问题不能通过将其归约到一个已知属于 NP 的问题来证明其 NP-难度。\n\nC. 归约的方向是错误的。为了证明 $L$ 是 NP-难的，她必须证明一个已知的 NP-难问题（如 3-SAT）可以在多项式时间内归约*到*她的问题 $L$，而不是反过来。\n\nD. 这种方法只有在能够将得到的 3-SAT 实例的一个满足赋值在多项式时间内转换回原始 $L$ 实例的一个有效解时才有效。她的证明没有提到这一步。\n\nE. 对于一个新问题，任何到 3-SAT 的归约都是不充分的。要从第一性原理确定 NP-难度，必须证明一个问题对于 NP 中的*所有*问题都是难的，这需要从一个更一般的问题（如非确定性图灵机的接受问题）进行归约。", "solution": "我们将从语言 $A$ 到语言 $B$ 的多项式时间多一归约（polynomial-time many-one reduction）定义为一个函数 $f$，该函数可在关于 $|x|$ 的多项式时间内计算，并且对于所有输入 $x$ 满足：\n$$x \\in A \\iff f(x) \\in B.$$\n我们将其表示为 $A \\leq_{p} B$。直观上，$A \\leq_{p} B$ 意味着相对于多项式时间可解性，$A$ 不比 $B$ 更难，因为一个用于 $B$ 的多项式时间判定过程，可以通过计算 $f(x)$ 并运行该用于 $B$ 的过程，来得到一个用于 $A$ 的多项式时间判定过程。\n\n一个语言 $L$ 是 NP-难的，如果对于每一个语言 $X \\in \\mathrm{NP}$，都有\n$$X \\leq_{p} L.$$\n在实践中，要证明 $L$ 是 NP-难的，只需证明对于某个已知的 NP-难语言 $H$（例如，$3\\text{-SAT}$），有 $H \\leq_{p} L$ 即可，因为 NP-难度在 $\\leq_{p}$ 关系下是向上封闭的。\n\n该学生的构造产生了一个归约\n$$L \\leq_{p} 3\\text{-SAT},$$\n也就是说，她从一个实例 $i_{L}$ 出发，在多项式时间内计算出一个实例 $i_{3SAT}$，该实例具有以下性质：\n$$i_{L} \\in L \\iff i_{3SAT} \\in 3\\text{-SAT}.$$\n这只表明 $L$ 不比 $3\\text{-SAT}$ 更难。特别是，如果 $3\\text{-SAT}$ 属于 $\\mathrm{P}$，那么通过与该归约的复合，$L$ 也将属于 $\\mathrm{P}$；这并不意味着 $L$ 是 NP-难的。要证明 $L$ 的 NP-难度，所需的方向是\n$$3\\text{-SAT} \\leq_{p} L,$$\n这样，一个用于 $L$ 的多项式时间算法就能导出一个用于 $3\\text{-SAT}$ 的算法。\n\n现在来评估各个选项：\n- A 是不正确的：并不需要可逆性；只需要一个从已知 NP-难问题到 $L$ 的单一归约。\n- B 是不正确的：并没有禁止使用 $\\mathrm{NP}$ 中的问题；问题在于归约的方向，而不是其是否属于 $\\mathrm{NP}$。\n- C 是正确的：归约方向反了；她必须证明 $3\\text{-SAT} \\leq_{p} L$。\n- D 是不正确的，对于 Karp（多一）归约而言，只需要保持“是/否”实例对应的实例映射，而不需要解的映射。\n- E 是不正确的：将一个已知的 NP-难问题（如 $3\\text{-SAT}$）归约到 $L$ 就足够了。\n\n因此，根本缺陷在于归约方向错误，如 C 所述。", "answer": "$$\\boxed{C}$$", "id": "1419806"}, {"introduction": "成功地将一个已知的 NP-hard 问题归约到一个新问题，我们能得出什么结论？这个练习将帮助你精确理解 NP-hard 和 NP-complete 之间的区别。请记住，一个有效的归约只能证明“NP-hard”这一性质；要证明“NP-complete”，还需要额外满足一个条件。[@problem_id:1419795]", "problem": "在计算复杂性理论中，判定问题通常被分为不同的类别。P 类包含可在多项式时间内解决的问题。NP 类（非确定性多项式时间）包含这样一些问题：如果提供一个有效的解（一个“证书”），其“是”的答案可以在多项式时间内得到验证。如果一个问题至少与 NP 中的任何问题一样难，那么它就被称为 NP-难（NP-hard）。如果一个问题既属于 NP 又属于 NP-难，那么它就是 NP-完全（NP-complete）的。\n\n最著名的 NP-完全问题之一是 `CLIQUE` 问题。`CLIQUE` 判定问题的定义如下：给定一个无向图 $G$ 和一个正整数 $k$，$G$ 是否包含一个大小为 $k$ 的团？（团是一个顶点子集，其中每两个不同的顶点都相邻）。\n\n现在，考虑一个名为 `SOCIAL_NETWORK_CLUSTERING`（SNC）的新问题。SNC 的目标是在一个表示为图的社交网络中，识别出给定大小的某种“连接良好”的子群。一位计算机科学家刚刚证明，存在一个从 `CLIQUE` 问题到 `SNC` 问题的多项式时间归约。*仅*根据这些信息，关于 `SNC` 问题的计算难度，你能得出的最强的正确结论是什么？\n\nA. `SNC` 属于 NP 类。\n\nB. `SNC` 是 NP-难的。\n\nC. `SNC` 是 NP-完全的。\n\nD. `SNC` 可以在多项式时间内解决（即属于 P 类）。\n\nE. `SNC` 不属于 NP 类。\n\nF. 根据所给信息，无法得出关于 `SNC` 难度的任何结论。", "solution": "我们使用多项式时间多一归约的标准概念。设 $X$ 表示 CLIQUE 判定问题，设 $Y$ 表示 SNC 问题。\n\n1) 根据 CLIQUE 的 $NP$-完全性的定义，我们有：\n$$\nX \\in NP \\quad \\text{and} \\quad \\forall L \\in NP:\\; L \\leq_{p} X.\n$$\n\n2) 我们已知存在一个从 CLIQUE 到 SNC 的多项式时间归约，即：\n$$\nX \\leq_{p} Y.\n$$\n\n3) 多项式时间多一归约是可传递的：如果 $L \\leq_{p} X$ 且 $X \\leq_{p} Y$，那么 $L \\leq_{p} Y$。结合第 1 步和第 2 步可得：\n$$\n\\forall L \\in NP:\\; L \\leq_{p} Y.\n$$\n\n4) 根据定义，如果对于每个 $L \\in NP$ 都有 $L \\leq_{p} Y$，则问题 $Y$ 是 $NP$-难的。因此，$Y$（即 SNC）是 $NP$-难的。\n\n5) 根据所给信息，我们不能断定 $Y \\in NP$，因此我们不能断定其是 $NP$-完全的。我们同样也不能断定 $Y \\in P$ 或 $Y \\notin NP$。\n\n因此，最强的正确结论是 SNC 是 $NP$-难的。", "answer": "$$\\boxed{B}$$", "id": "1419795"}, {"introduction": "理论概念需要通过具体例子来巩固。这个练习将引导你动手实践一个经典的归约：从顶点覆盖（VERTEX-COVER）问题到集合覆盖（SET-COVER）问题。通过思考如何将图的顶点和边映射到集合论中的元素和子集，你将对多项式时间归约的“构造”过程有更深刻的理解。[@problem_id:1419768]", "problem": "在计算复杂性理论领域，问题之间通常通过多项式时间归约相互关联。这种归约将一个问题的实例转换为另一个问题的等价实例，从而证明第二个问题至少与第一个问题一样难。\n\n考虑以下两个著名的NP完全决策问题：\n\n1.  **VERTEX-COVER (VC):** 给定一个无向图 $G=(V, E)$ 和一个正整数 $k$，是否存在一个顶点子集 $V' \\subseteq V$，使得 $|V'| \\le k$ 并且对于每一条边 $(u, v) \\in E$，u或v中至少有一个顶点在 $V'$ 中？\n2.  **SET-COVER (SC):** 给定一个有限的元素全集 $U$，一个由 $U$ 的子集组成的集合 $\\mathcal{S}$，以及一个正整数 $k'$，是否存在一个子集合 $\\mathcal{S}' \\subseteq \\mathcal{S}$，使得 $|\\mathcal{S}'| \\le k'$ 并且 $\\mathcal{S}'$ 中集合的并集等于 $U$？\n\n一位软件工程师正在开发一个实用函数，该函数实现了从VERTEX-COVER到SET-COVER的标准多项式时间归约。该函数接受一个由图 $G$（其顶点集为 $V$，边集为 $E$）和一个整数 $k$ 指定的VERTEX-COVER实例。然后，它输出一个等价的SET-COVER实例，由一个全集 $U$、一个子集集合 $\\mathcal{S}$ 和一个整数 $k'$ 指定。\n\n假设输入的VERTEX-COVER实例由一个有 $n$ 个顶点和 $m$ 条边的图 $G$ 描述。为了评估生成输出的复杂性，该工程师想要计算集合 $\\mathcal{S}$ 中所有单个子集的基数之和。这个总和用 $n$ 和/或 $m$ 的解析表达式表示是什么？", "solution": "我们回顾从VERTEX-COVER到SET-COVER的标准多项式时间归约：\n- 给定一个无向图 $G=(V,E)$，其中 $|V|=n$ 且 $|E|=m$，以及一个整数 $k$，按如下方式构造一个SET-COVER实例，其全集为 $U$，子集集合为 $\\mathcal{S}$。\n- 令全集为 $U=E$。\n- 对于每个顶点 $v \\in V$，创建一个子集 $S_{v} \\subseteq U$，定义为 $S_{v}=\\{e \\in E : e \\text{ 与 } v \\text{ 相关联}\\}$。\n- 设置 $k'=k$。\n\n在这个构造中，集合 $\\mathcal{S}$ 由 $n$ 个子集 $\\{S_{v} : v \\in V\\}$ 组成。每个子集的基数是 $G$ 中对应顶点的度，即 $|S_{v}|=\\deg_{G}(v)$。\n\n因此，$\\mathcal{S}$ 中所有子集的基数总和为\n$$\n\\sum_{v \\in V} |S_{v}|=\\sum_{v \\in V} \\deg_{G}(v).\n$$\n根据无向图的握手引理，我们有\n$$\n\\sum_{v \\in V} \\deg_{G}(v)=2|E|.\n$$\n由于 $|E|=m$，总和为\n$$\n2m.\n$$\n因此，在构造的 $\\mathcal{S}$ 中所有子集的基数之和等于 $2m$。", "answer": "$$\\boxed{2m}$$", "id": "1419768"}]}