{"hands_on_practices": [{"introduction": "在深入探讨 3-SAT 问题的复杂性之前，我们必须首先牢固掌握其基本定义。这个练习将直接检验你对布尔可满足性问题核心概念的理解。通过为一个给定的 3-CNF 公式和一组具体的真值指派，你将亲手计算出被满足的子句数量，这是后续所有关于 3-SAT 推理和问题归约的基础。[@problem_id:1410968]", "problem": "在计算复杂性理论中，布尔可满足性问题（SAT）是一个基础性问题。一个常见的变体是3-可满足性问题（3-SAT）。如果一个布尔公式是子句的合取，其中每个子句是恰好三个文字的析取，那么该公式就处于3-合取范式（3-CNF）中。一个文字是一个布尔变量或其否定。我们使用符号 $\\land$ 表示逻辑与（合取），$\\lor$ 表示逻辑或（析取），以及 $\\neg$ 表示逻辑非（否定）。\n\n考虑一个定义在四个布尔变量集合 $\\{x_1, x_2, x_3, x_4\\}$ 上的3-CNF公式 $\\phi$。该公式 $\\phi$ 由以下五个子句的合取给出：\n$C_1 = (\\neg x_1 \\lor x_2 \\lor \\neg x_3)$\n$C_2 = (\\neg x_1 \\lor x_2 \\lor x_4)$\n$C_3 = (x_1 \\lor x_2 \\lor x_3)$\n$C_4 = (\\neg x_2 \\lor \\neg x_3 \\lor x_4)$\n$C_5 = (x_3 \\lor \\neg x_4 \\lor x_2)$\n\n所以，完整的公式是 $\\phi = C_1 \\land C_2 \\land C_3 \\land C_4 \\land C_5$。\n\n如果一个子句中至少有一个文字在该赋值下求值为“真”，那么这个子句就被该真值赋值所满足。整个公式 $\\phi$ 只有在其所有子句都被满足时才被满足。\n\n给定以下真值赋值 $A$：\n$x_1 = \\text{True}$\n$x_2 = \\text{False}$\n$x_3 = \\text{True}$\n$x_4 = \\text{False}$\n\n确定公式 $\\phi$ 中被真值赋值 $A$ 满足的子句总数。", "solution": "一个3-CNF公式中的子句如果其至少一个文字的求值为 $\\text{True}$，则该子句被满足。如果至少一个操作数为 $\\text{True}$，逻辑析取 $\\lor$ 的求值为 $\\text{True}$，而逻辑非满足 $\\neg \\text{True}=\\text{False}$ 和 $\\neg \\text{False}=\\text{True}$。在赋值 $A$ 下，其中 $x_{1}=\\text{True}$，$x_{2}=\\text{False}$，$x_{3}=\\text{True}$，$x_{4}=\\text{False}$，我们首先计算所需的否定：$\\neg x_{1}=\\text{False}$，$\\neg x_{2}=\\text{True}$，$\\neg x_{3}=\\text{False}$，$\\neg x_{4}=\\text{True}$。\n\n计算每个子句的值：\n$$C_{1}=(\\neg x_{1}\\lor x_{2}\\lor \\neg x_{3})=(\\text{False}\\lor \\text{False}\\lor \\text{False})=\\text{False},$$\n$$C_{2}=(\\neg x_{1}\\lor x_{2}\\lor x_{4})=(\\text{False}\\lor \\text{False}\\lor \\text{False})=\\text{False},$$\n$$C_{3}=(x_{1}\\lor x_{2}\\lor x_{3})=(\\text{True}\\lor \\text{False}\\lor \\text{True})=\\text{True},$$\n$$C_{4}=(\\neg x_{2}\\lor \\neg x_{3}\\lor x_{4})=(\\text{True}\\lor \\text{False}\\lor \\text{False})=\\text{True},$$\n$$C_{5}=(x_{3}\\lor \\neg x_{4}\\lor x_{2})=(\\text{True}\\lor \\text{True}\\lor \\text{False})=\\text{True}.$$\n\n因此，恰好有三个子句 $C_{3}$、$C_{4}$ 和 $C_{5}$ 被 $A$ 满足。", "answer": "$$\\boxed{3}$$", "id": "1410968"}, {"introduction": "掌握了如何评估一个布尔公式后，下一步是学习如何构建它。这个练习将引导你从分析转向综合，将一个常见的现实世界约束——确保多个操作模式中只有一个被激活——转化为严格的 3-CNF 范式。通过解决这个“三者取一”的经典建模问题，你将体会到 3-SAT 作为一种形式化语言的表达能力，这在电路设计和算法约束编程中至关重要。[@problem_id:1410932]", "problem": "在一个工业机器人的安全关键控制系统设计中，存在三种互斥的操作模式，由布尔变量表示：焊接 ($x_1$)、喷漆 ($x_2$) 和钻孔 ($x_3$)。如果模式 $i$ 处于活动状态，则变量 $x_i$ 被赋值为 `true`，否则为 `false`。为使系统安全运行，控制逻辑必须确保在任何给定时间 **只有一个** 模式是活动的。\n\n该控制逻辑实现为一个布尔公式，当且仅当活动模式的配置有效时，其计算结果为 `true`。为了与硬件兼容，该公式必须以 3-合取范式 (3-CNF) 表示。如果一个公式是一个或多个子句的合取（逻辑与，用 $\\land$ 表示），其中每个子句是恰好三个文字的析取（逻辑或，用 $\\lor$ 表示），则该公式为 3-CNF。一个文字是一个变量或其否定（例如，$x_1$ 或 $\\neg x_1$）。\n\n下列哪个 3-CNF 公式正确表示了变量 $x_1, x_2, x_3$ 中恰好有一个为 `true` 的约束？\n\nA. $(x_1 \\lor x_2 \\lor x_3) \\land (\\neg x_1 \\lor \\neg x_2 \\lor \\neg x_3) \\land (x_1 \\lor \\neg x_2 \\lor \\neg x_3) \\land (\\neg x_1 \\lor x_2 \\lor \\neg x_3) \\land (\\neg x_1 \\lor \\neg x_2 \\lor x_3)$\n\nB. $(\\neg x_1 \\lor \\neg x_2 \\lor \\neg x_3) \\land (x_1 \\lor \\neg x_2 \\lor \\neg x_3) \\land (\\neg x_1 \\lor x_2 \\lor \\neg x_3) \\land (\\neg x_1 \\lor \\neg x_2 \\lor x_3)$\n\nC. $(x_1 \\lor x_2 \\lor x_3) \\land (\\neg x_1 \\lor \\neg x_2) \\land (\\neg x_1 \\lor \\neg x_3) \\land (\\neg x_2 \\lor \\neg x_3)$\n\nD. $(x_1 \\lor x_2 \\lor x_3) \\land (x_1 \\lor x_2 \\lor \\neg x_3) \\land (x_1 \\lor \\neg x_2 \\lor x_3) \\land (\\neg x_1 \\lor x_2 \\lor x_3)$", "solution": "我们必须将“$x_{1},x_{2},x_{3}$ 中恰好有一个为真”这一约束编码为 3-CNF，即一个子句的合取，每个子句是恰好三个文字的析取。\n\n从逻辑上讲，“恰好一个”等价于“至少一个”和“至多一个”的合取。“至少一个”部分由单个子句表示\n$$\n(x_{1} \\lor x_{2} \\lor x_{3}).\n$$\n“至多一个”部分要求没有任意一对变量同时为真，其 CNF 形式为\n$$\n(\\neg x_{1} \\lor \\neg x_{2}) \\land (\\neg x_{1} \\lor \\neg x_{3}) \\land (\\neg x_{2} \\lor \\neg x_{3}).\n$$\n然而，这三个子句每个都只有两个文字，而问题要求每个子句必须有恰好三个文字。因此，在提供的选项中，我们必须找到一个由 3-文字子句组成的合取，它等价于“恰好一个”。\n\n评估每个选项：\n\n1. 选项 C 包括了正确的“至少一个”和成对“至多一个”的逻辑结构，但三个成对的子句只有两个文字，因此它不符合 3-CNF 的定义（每个子句恰好有三个文字）。因此，根据给定的形式要求，C 是无效的。\n\n2. 选项 D 由以下子句组成：\n$$\n(x_{1} \\lor x_{2} \\lor x_{3}) \\land (x_{1} \\lor x_{2} \\lor \\neg x_{3}) \\land (x_{1} \\lor \\neg x_{2} \\lor x_{3}) \\land (\\neg x_{1} \\lor x_{2} \\lor x_{3}).\n$$\n赋值 $x_{1}=x_{2}=x_{3}=\\text{true}$ 满足所有四个子句，所以 D 允许多个真值，因此没有强制执行“恰好一个”。因此 D 是不正确的。\n\n3. 选项 B 由四个子句组成，包括 $(\\neg x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3})$ 和三个“一个肯定，两个否定”的子句。赋值 $x_{1}=x_{2}=x_{3}=\\text{false}$ 满足所有子句，所以 B 允许零个真值，因此没有强制执行“恰好一个”。因此 B 是不正确的。\n\n4. 选项 A 由以下子句组成：\n$$\n(x_{1} \\lor x_{2} \\lor x_{3}) \\land (\\neg x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3}) \\land (x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3}) \\land (\\neg x_{1} \\lor x_{2} \\lor \\neg x_{3}) \\land (\\neg x_{1} \\lor \\neg x_{2} \\lor x_{3}).\n$$\n我们通过穷举逻辑蕴含来验证其与“恰好一个”的等价性：\n- 如果恰好一个变量为真，例如 $x_{1}=\\text{true}$ 且 $x_{2}=x_{3}=\\text{false}$，那么第一个子句 $(x_{1} \\lor x_{2} \\lor x_{3})$ 为真；第二个子句 $(\\neg x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3})$ 为真，因为至少有一个变量为假；其他三个子句中每个都至少有一个真文字（实际上，它们都被满足），所以合取式为真。根据对称性，当 $x_{2}$ 或 $x_{3}$ 中恰好有一个为真时，情况同样成立。\n- 如果零个变量为真，那么 $(x_{1} \\lor x_{2} \\lor x_{3})$ 为假，所以合取式为假。因此排除了零个真值的情况。\n- 如果两个变量为真，例如 $x_{1}=x_{2}=\\text{true}$ 且 $x_{3}=\\text{false}$，那么子句 $(\\neg x_{1} \\lor \\neg x_{2} \\lor x_{3})$ 的计算结果为 $(\\text{false} \\lor \\text{false} \\lor \\text{false})$，因此合取式为假。根据对称性，任何有两个真值的赋值都会违反最后三个子句之一。\n- 如果所有三个变量都为真，那么 $(\\neg x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3})$ 为假，所以合取式为假。因此排除了三个真值的情况。\n\n因此，选项 A 当且仅当 $x_{1},x_{2},x_{3}$ 中恰好有一个为真时才被满足，并且每个子句都有恰好三个文字，所以它是满足要求的有效 3-CNF。\n\n因此，正确选项是 A。", "answer": "$$\\boxed{A}$$", "id": "1410932"}, {"introduction": "3-SAT 之所以成为一个“典范”的 NP-完全问题，关键在于任何 NP 问题都可以归约到它。在这些归约过程中，一个核心步骤是将任意布尔公式转换为等价的 3-CNF 形式。本练习将让你亲身体验这一标准转换技术，学习如何通过引入“辅助变量”来扩展少于三个文字的子句，同时保持其可满足性不变。理解这个过程是掌握 Cook-Levin 定理精髓并认识 3-SAT 核心地位的关键。[@problem_id:1410956]", "problem": "在数字电路设计领域，工程师通常使用布尔公式来表示系统约束。一种常见的范式是合取范式 (CNF)，它是子句的合取（AND，用 $\\land$ 表示），其中每个子句是文字（一个变量或其否定）的析取（OR，用 $\\lor$ 表示）。如果存在一种对其变量的真/假值赋值，使得整个公式的计算结果为真，那么该公式是*可满足的*。\n\n一位工程师正在使用一种只能处理 3-CNF 公式的遗留硬件描述语言，这意味着公式中的每个子句必须恰好包含三个文字。该工程师的初始设计约束由以下涉及两个变量 $x_1$ 和 $x_2$ 的布尔公式 $\\phi$ 捕获：\n$$ \\phi = (x_1 \\lor x_2) \\land (\\neg x_1) \\land (\\neg x_2) $$\n为了将此公式转换为等效的 3-CNF 公式 $\\psi$，该工程师使用了一个保持可满足性的标准展开过程。该过程为每个需要展开的原始子句引入新的、唯一的“虚拟”变量。规则如下：\n\n1.  对于像 $(l_1 \\lor l_2)$ 这样具有两个文字的子句，它将被替换为两个新的 3-文字子句的合取：$(l_1 \\lor l_2 \\lor d_i) \\land (l_1 \\lor l_2 \\lor \\neg d_i)$，其中 $d_i$ 是一个新的虚拟变量。\n2.  对于像 $(l_1)$ 这样具有一个文字的子句，它将被替换为四个新的 3-文字子句的合取：$(l_1 \\lor d_j \\lor d_k) \\land (l_1 \\lor d_j \\lor \\neg d_k) \\land (l_1 \\lor \\neg d_j \\lor d_k) \\land (l_1 \\lor \\neg d_j \\lor \\neg d_k)$，其中 $d_j$ 和 $d_k$是两个新的不同虚拟变量。\n\n设 $\\phi$ 的子句按顺序索引为：$C_1 = (x_1 \\lor x_2)$、$C_2 = (\\neg x_1)$ 和 $C_3 = (\\neg x_2)$。对于转换，为子句 $C_1$ 使用一个虚拟变量 $d_1$，为子句 $C_2$ 使用虚拟变量 $d_2$ 和 $d_3$，为子句 $C_3$ 使用虚拟变量 $d_4$ 和 $d_5$。得到的 3-CNF 公式 $\\psi$ 是所有新生成的子句的合取。\n\n以下哪个陈述正确描述了最终的公式 $\\psi$ 及其可满足性？\n\nA. $\\psi = [(x_1 \\lor x_2 \\lor d_1) \\land (x_1 \\lor x_2 \\lor \\neg d_1)] \\land [(\\neg x_1 \\lor d_2 \\lor d_3) \\land (\\neg x_1 \\lor d_2 \\lor \\neg d_3)] \\land [(\\neg x_2 \\lor d_4 \\lor d_5) \\land (\\neg x_2 \\lor d_4 \\lor \\neg d_5)]$，且 $\\psi$ 是不可满足的。\nB. $\\psi = [(x_1 \\lor x_2 \\lor d_1) \\land (x_1 \\lor x_2 \\lor \\neg d_1)] \\land [(\\neg x_1 \\lor d_2 \\lor d_3) \\land (\\neg x_1 \\lor d_2 \\lor \\neg d_3) \\land (\\neg x_1 \\lor \\neg d_2 \\lor d_3) \\land (\\neg x_1 \\lor \\neg d_2 \\lor \\neg d_3)] \\land [(\\neg x_2 \\lor d_4 \\lor d_5) \\land (\\neg x_2 \\lor d_4 \\lor \\neg d_5) \\land (\\neg x_2 \\lor \\neg d_4 \\lor d_5) \\land (\\neg x_2 \\lor \\neg d_4 \\lor \\neg d_5)]$，且 $\\psi$ 是可满足的。\nC. $\\psi = [(x_1 \\lor x_2 \\lor d_1)] \\land [(\\neg x_1 \\lor d_2 \\lor d_3)] \\land [(\\neg x_2 \\lor d_4 \\lor d_5)]$，且 $\\psi$ 是可满足的。\nD. $\\psi = [(x_1 \\lor x_2 \\lor d_1) \\land (x_1 \\lor x_2 \\lor \\neg d_1)] \\land [(\\neg x_1 \\lor d_2 \\lor d_3) \\land (\\neg x_1 \\lor d_2 \\lor \\neg d_3) \\land (\\neg x_1 \\lor \\neg d_2 \\lor d_3) \\land (\\neg x_1 \\lor \\neg d_2 \\lor \\neg d_3)] \\land [(\\neg x_2 \\lor d_4 \\lor d_5) \\land (\\neg x_2 \\lor d_4 \\lor \\neg d_5) \\land (\\neg x_2 \\lor \\neg d_4 \\lor d_5) \\land (\\neg x_2 \\lor \\neg d_4 \\lor \\neg d_5)]$，且 $\\psi$ 是不可满足的。", "solution": "我们从给定的 CNF 布尔公式 $\\phi$ 开始：\n$$\n\\phi = (x_{1} \\lor x_{2}) \\land (\\neg x_{1}) \\land (\\neg x_{2}).\n$$\n根据指令，我们需要使用给定的保持可满足性的展开规则，为每个需要展开的子句引入新的虚拟变量，将 $\\phi$ 转换为一个 3-CNF 公式 $\\psi$。\n\n识别子句：$C_{1} = (x_{1} \\lor x_{2})$，$C_{2} = (\\neg x_{1})$，$C_{3} = (\\neg x_{2})$。根据问题描述，为 $C_{1}$ 使用 $d_{1}$，为 $C_{2}$ 使用 $d_{2}, d_{3}$，为 $C_{3}$ 使用 $d_{4}, d_{5}$。\n\n逐个子句应用展开规则：\n1. 对于 2-文字子句 $C_{1} = (x_{1} \\lor x_{2})$，规则 1 得出\n$$\n(x_{1} \\lor x_{2} \\lor d_{1}) \\land (x_{1} \\lor x_{2} \\lor \\neg d_{1}).\n$$\n2. 对于单元子句 $C_{2} = (\\neg x_{1})$，规则 2 得出\n$$\n(\\neg x_{1} \\lor d_{2} \\lor d_{3}) \\land (\\neg x_{1} \\lor d_{2} \\lor \\neg d_{3}) \\land (\\neg x_{1} \\lor \\neg d_{2} \\lor d_{3}) \\land (\\neg x_{1} \\lor \\neg d_{2} \\lor \\neg d_{3}).\n$$\n3. 对于单元子句 $C_{3} = (\\neg x_{2})$，规则 2 得出\n$$\n(\\neg x_{2} \\lor d_{4} \\lor d_{5}) \\land (\\neg x_{2} \\lor d_{4} \\lor \\neg d_{5}) \\land (\\neg x_{2} \\lor \\neg d_{4} \\lor d_{5}) \\land (\\neg x_{2} \\lor \\neg d_{4} \\lor \\neg d_{5}).\n$$\n\n因此，得到的 $3$-CNF 公式 $\\psi$ 是所有这些子句的合取：\n$$\n\\psi = [(x_{1} \\lor x_{2} \\lor d_{1}) \\land (x_{1} \\lor x_{2} \\lor \\neg d_{1})] \\land [(\\neg x_{1} \\lor d_{2} \\lor d_{3}) \\land (\\neg x_{1} \\lor d_{2} \\lor \\neg d_{3}) \\land (\\neg x_{1} \\lor \\neg d_{2} \\lor d_{3}) \\land (\\neg x_{1} \\lor \\neg d_{2} \\lor \\neg d_{3})] \\land [(\\neg x_{2} \\lor d_{4} \\lor d_{5}) \\land (\\neg x_{2} \\lor d_{4} \\lor \\neg d_{5}) \\land (\\neg x_{2} \\lor \\neg d_{4} \\lor d_{5}) \\land (\\neg x_{2} \\lor \\neg d_{4} \\lor \\neg d_{5})].\n$$\n\n接下来，我们分析可满足性。原始公式 $\\phi$ 是不可满足的，因为 $(\\neg x_{1}) \\land (\\neg x_{2})$ 强制 $x_{1} = \\text{False}$ 和 $x_{2} = \\text{False}$，这使得 $(x_{1} \\lor x_{2})$ 的计算结果为假，所以没有赋值能满足 $\\phi$ 的所有子句。\n\n所使用的转换结构按以下方式保持可满足性：\n- 对于一个 2-文字子句 $(l_{1} \\lor l_{2})$ 被替换为 $(l_{1} \\lor l_{2} \\lor d) \\land (l_{1} \\lor l_{2} \\lor \\neg d)$，如果 $l_{1} \\lor l_{2}$ 为真，那么对于 $d$ 的任何值，两个子句都满足；如果 $l_{1} \\lor l_{2}$ 为假，则合取变为 $d \\land \\neg d$，这是不可满足的。\n- 对于一个单元子句 $(l)$ 被替换为带有两个虚拟变量的四个子句，如果 $l$ 为真，所有四个子句都满足；如果 $l$ 为假，则合取简化为\n$$\n(d_{a} \\lor d_{b}) \\land (d_{a} \\lor \\neg d_{b}) \\land (\\neg d_{a} \\lor d_{b}) \\land (\\neg d_{a} \\lor \\neg d_{b}),\n$$\n这是不可满足的，因为对 $d_{a}, d_{b}$ 的任何赋值都不能同时满足所有四个子句。\n\n将此应用于我们的案例，用于 $(\\neg x_{1})$ 和 $(\\neg x_{2})$ 的单元子句转换结构在 $\\psi$ 的任何可满足赋值中强制 $x_{1} = \\text{False}$ 和 $x_{2} = \\text{False}$。在 $x_{1} = \\text{False}$ 和 $x_{2} = \\text{False}$ 的条件下，用于 $(x_{1} \\lor x_{2})$ 的转换结构变为 $d_{1} \\land \\neg d_{1}$，这是不可满足的。因此，$\\psi$ 是不可满足的。\n\n与选项比较：结构上正确的展开式 $\\psi$ 是为 $C_{1}$ 使用两个子句、为 $C_{2}$ 和 $C_{3}$ 各使用四个子句的那个，并且它是不可满足的。这与选项 D 相符。", "answer": "$$\\boxed{D}$$", "id": "1410956"}]}