{"hands_on_practices": [{"introduction": "本练习介绍了一种寻找小规模团契（例如 $3$-团契）最直接的方法。通过系统地检查所有可能的顶点三元组，你将建立对问题计算复杂性的基本理解，并为后续更高效的算法学习奠定基础。[@problem_id:1455658]", "problem": "在计算图论中，社交网络可以被建模为一个无向图 $G = (V, E)$，其中 $V$ 是代表个体的顶点集合，而 $E$ 是代表相互认识关系的边集合。在这种图中，一个 $k$-团契是一个由 $k$ 个顶点组成的子集，其中该子集内每对不同的顶点都通过一条边相连。在社交网络的背景下，一个 3-团契代表一个由三个互相都认识的个体组成的小组。\n\n你的任务是分析找到这样一个小组的计算成本。考虑一个拥有 $V$ 个顶点的图 $G$。该图的结构以邻接矩阵 $A$ 的形式提供给你，其中条目 $A[i][j]$ 的值为 1 表示顶点 $i$ 和顶点 $j$ 之间存在一条边，否则为 0。\n\n请设计一个算法来解决 3-团契问题（3-CLIQUE problem），即判断图 $G$ 是否包含至少一个 3-团契。根据你设计的算法，确定其最坏情况时间复杂度，该复杂度是顶点数 $V$ 的函数。请使用大O表示法（Big O notation）来表达你的答案。", "solution": "设输入为一个由其邻接矩阵 $A \\in \\{0,1\\}^{V \\times V}$ 给出的无向图，其中当且仅当顶点 $i$ 和 $j$ 之间存在一条边时，$A[i][j]=1$。我们设计一个简单的算法，该算法检查所有由不同顶点构成的三元组。\n\n算法（高层次描述）：\n- 对每个 $i$ 从 $1$ 到 $V-2$：\n  - 对每个 $j$ 从 $i+1$ 到 $V-1$：\n    - 对每个 $k$ 从 $j+1$ 到 $V$：\n      - 如果 $A[i][j]=1$，$A[i][k]=1$，并且 $A[j][k]=1$，则返回 YES（存在一个 3-团契）。\n- 如果没有找到这样的三元组，则返回 NO。\n\n正确性是显而易见的：一个由顶点 $\\{i,j,k\\}$ 构成的 3-团契存在的充要条件是三条边 $(i,j)$、$(i,k)$ 和 $(j,k)$ 都存在，这正是该算法所检查的内容。\n\n最坏情况时间复杂度分析：\n- 该算法遍历所有由不同顶点组成的无序三元组。这种三元组的数量为\n$$\n\\binom{V}{3}=\\frac{V(V-1)(V-2)}{6}.\n$$\n- 对于每个三元组，算法执行常数次邻接矩阵查找和比较，每次操作的时间为 $O(1)$。\n- 因此，总的最坏情况时间为\n$$\nT(V)=\\Theta\\!\\left(\\binom{V}{3}\\right)=\\Theta\\!\\left(\\frac{V(V-1)(V-2)}{6}\\right)=\\Theta(V^{3}),\n$$\n这表明\n$$\nT(V)\\in O(V^{3}).\n$$\n\n因此，作为 $V$ 的函数，其最坏情况时间复杂度为 $O(V^{3})$。", "answer": "$$\\boxed{O(V^{3})}$$", "id": "1455658"}, {"introduction": "寻找图中的最大团契是一个计算上的难题，但在许多实际应用中，快速找到一个“足够大”的团契就已足够。本练习将指导你应用一种常见的启发式方法——贪心算法，根据顶点的度数来构建一个团契。通过这个过程，你将理解在算法设计中，最优性与效率之间存在的经典权衡。[@problem_id:1455645]", "problem": "在图论中，团契（clique）是无向图的一个顶点子集，该子集中的任意两个不同顶点都是相邻的（即，有一条边连接它们）。寻找最大团契（图中可能的最大团契）的问题是公认的计算难题。然而，启发式算法可以快速找到一个规模较大的团契，尽管不一定是最大规模的。\n\n考虑一个无向图 $G = (V, E)$，其顶点集为 $V = \\{A, B, C, D, E, F, G, H\\}$，边集 $E$ 包含以下16条边：\n$E = \\{\\{A,B\\}, \\{A,E\\}, \\{A,F\\}, \\{A,H\\}, \\{B,D\\}, \\{B,E\\}, \\{B,F\\}, \\{B,H\\}, \\{C,G\\}, \\{C,H\\}, \\{D,E\\}, \\{D,F\\}, \\{D,H\\}, \\{E,G\\}, \\{E,H\\}, \\{G,H\\}\\}$.\n\n你需要通过应用以下贪心算法来找到该图中的一个团契：\n\n1.  通过按顶点的度进行降序排序，构建一个包含所有顶点的有序列表 $L$。顶点的度是与其相连的边的数量。度数相同时，按字母升序打破平局（例如，A排在B之前）。\n2.  初始化一个空集 $K$，它将代表正在构建的团契。\n3.  遍历有序列表 $L$ 中的顶点。对于 $L$ 中的每个顶点 $v$，如果 $v$ 与集合 $K$ 中已有的每个顶点都通过边相连，则将 $v$ 添加到 $K$ 中。\n\n下列哪个集合是该算法产生的最终的团契 $K$？\n\nA. $\\{A, B, E, H\\}$\n\nB. $\\{B, D, E, H\\}$\n\nC. $\\{A, D, F\\}$\n\nD. $\\{A, B, D, E\\}$\n\nE. $\\{C, G, H\\}$", "solution": "给定无向图 $G=(V,E)$，其中 $V=\\{A,B,C,D,E,F,G,H\\}$ 且\n$$\nE=\\{\\{A,B\\},\\{A,E\\},\\{A,F\\},\\{A,H\\},\\{B,D\\},\\{B,E\\},\\{B,F\\},\\{B,H\\},\\{C,G\\},\\{C,H\\},\\{D,E\\},\\{D,F\\},\\{D,H\\},\\{E,G\\},\\{E,H\\},\\{G,H\\}\\}.\n$$\n步骤1要求按顶点的度降序排序，度数相同时按字母顺序打破平局。计算各个顶点的度：\n$$\n\\deg(A)=4 \\text{ (邻接点为 } B,E,F,H),\\quad \\deg(B)=5 \\text{ (邻接点为 } A,D,E,F,H),\n$$\n$$\n\\deg(C)=2 \\text{ (邻接点为 } G,H),\\quad \\deg(D)=4 \\text{ (邻接点为 } B,E,F,H),\n$$\n$$\n\\deg(E)=5 \\text{ (邻接点为 } A,B,D,G,H),\\quad \\deg(F)=3 \\text{ (邻接点为 } A,B,D),\n$$\n$$\n\\deg(G)=3 \\text{ (邻接点为 } C,E,H),\\quad \\deg(H)=6 \\text{ (邻接点为 } A,B,C,D,E,G).\n$$\n因此，按度降序排列并按字母顺序打破平局后，有序列表为\n$$\nL=[H,B,E,A,D,F,G,C].\n$$\n\n初始化 $K=\\varnothing$。\n\n遍历 $L$ 并加入一个顶点，条件是它与 $K$ 中已有的所有顶点都相邻：\n- 取 $H$：由于 $K=\\varnothing$， $H$ 平凡地与 $K$ 中所有顶点都相邻，所以 $K=\\{H\\}$。\n- 取 $B$：检查 $\\{B,H\\}\\in E$，所以加入 $B$；现在 $K=\\{H,B\\}$。\n- 取 $E$：检查 $\\{E,H\\}\\in E$ 和 $\\{E,B\\}\\in E$，所以加入 $E$；现在 $K=\\{H,B,E\\}$。\n- 取 $A$：检查 $\\{A,H\\}\\in E$、$\\{A,B\\}\\in E$ 和 $\\{A,E\\}\\in E$，所以加入 $A$；现在 $K=\\{H,B,E,A\\}$。\n- 取 $D$：必须与 $H,B,E,A$ 中的所有顶点都相邻。虽然 $\\{D,H\\},\\{D,B\\},\\{D,E\\}\\in E$，但我们有 $\\{D,A\\}\\notin E$，所以不加入 $D$。\n- 取 $F$：必须与 $H,B,E,A$ 相邻。由于 $\\{F,H\\}\\notin E$，所以不加入 $F$。\n- 取 $G$：必须与 $H,B,E,A$ 相邻。尽管 $\\{G,H\\}\\in E$ 和 $\\{G,E\\}\\in E$，但我们有 $\\{G,B\\}\\notin E$，所以不加入 $G$。\n- 取 $C$：必须与 $H,B,E,A$ 相邻。尽管 $\\{C,H\\}\\in E$，但我们有 $\\{C,B\\}\\notin E$，所以不加入 $C$。\n\n因此，由贪心算法产生的最终的团契是\n$$\nK=\\{A,B,E,H\\},\n$$\n这与选项A相符。为完整起见，验证它是一个团契：$\\{A,B,E,H\\}$ 中的所有顶点对都是边，即 $\\{A,B\\},\\{A,E\\},\\{A,H\\},\\{B,E\\},\\{B,H\\},\\{E,H\\}\\subset E$。", "answer": "$$\\boxed{A}$$", "id": "1455645"}, {"introduction": "尽管最大团契问题在一般图上是 NP-难的，但对于某些特殊类型的图，它却可以被高效地解决。本练习将探讨一类被称为“弦图”的特殊图，并利用其“完美消除排序”的性质来快速找到最大团契。这个例子深刻地揭示了，利用问题的内在结构是设计高效算法的关键策略。[@problem_id:1455663]", "problem": "将在一个由 $n=12$ 个专用数据处理单元 (DPU) 组成的分布式系统上进行一项大规模数据分析，这些单元被标记为 $P_1, P_2, \\ldots, P_{12}$。由于数据依赖性和通信模式，一些 DPU 对可以并发处理它们分配的数据块，而另一些则不能。这种可能的并发关系可以建模为一个图 $G$，其顶点为 DPU，如果两个对应的 DPU 可以并发操作，则在它们的顶点之间存在一条边。已知该图是一个弦图。\n\n一位系统分析员已经确定了 DPU 的一个特定排序 $P_1, P_2, \\ldots, P_{12}$，该排序构成了图 $G$ 的一个完美消除排序 (PEO)。对于每个 DPU $P_i$（其中 $i$ 的范围从 1 到 12），能够与 $P_i$ 并发操作且索引值更高 ($j > i$) 的其他 DPU $P_j$ 的数量已被记录。设这个数量为 $c_i$。这些计数的序列如下所示：\n$c_1=6, c_2=6, c_3=5, c_4=5, c_5=4, c_6=3, c_7=3, c_8=3, c_9=2, c_{10}=1, c_{11}=1, c_{12}=0$。\n\n一组可以相互并发操作的 DPU 对应于图 $G$ 中的一个团契。您的任务是确定此系统中可以并发操作的 DPU 的最大数量。", "solution": "我们将该系统建模为一个弦图 $G$，它有一个给定的完美消除排序 (PEO) $P_{1},P_{2},\\ldots,P_{12}$。对于每个 $i$，令 $N^{+}(P_{i})=\\{P_{j}: j>i \\text{ and } P_{i}P_{j} \\text{ is an edge}\\}$ 表示 $P_{i}$ 在 PEO 中索引值更高的邻居集合。根据弦图中 PEO 的定义性质，对于每一个 $i$，集合 $N^{+}(P_{i})$ 都是一个团契。\n\n因此，对于每个 $i$，集合 $\\{P_{i}\\} \\cup N^{+}(P_{i})$ 构成一个大小为 $1+c_{i}$ 的团契，其中 $c_{i}=|N^{+}(P_{i})|$ 是已知值。这得出了团契数 $\\omega(G)$ 的一个下界：\n$$\n\\omega(G) \\geq \\max_{1 \\leq i \\leq 12} (1+c_{i})=1+\\max_{1 \\leq i \\leq 12} c_{i}.\n$$\n反之，在具有 PEO 的弦图中，任意一个团契 $K$ 都有一个唯一的“最早”顶点 $P_{i}$（即 $K$ 中索引最小的顶点），并且根据 PEO 的性质， $K$ 的所有其他顶点都必须位于 $N^{+}(P_{i})$ 中。因此 $|K| \\leq 1 + |N^{+}(P_{i})| = 1 + c_{i}$。对所有团契取最大值可以证明反向不等式，因此我们得到精确公式：\n$$\n\\omega(G)=1+\\max_{1 \\leq i \\leq 12} c_{i}.\n$$\n根据数据 $c_{1}=6, c_{2}=6, c_{3}=5, c_{4}=5, c_{5}=4, c_{6}=3, c_{7}=3, c_{8}=3, c_{9}=2, c_{10}=1, c_{11}=1, c_{12}=0$，最大值为 $\\max_{i} c_{i}=6$。因此，\n$$\n\\omega(G)=1+6=7.\n$$\n可以并发操作的 DPU 的最大数量等于最大团契的大小，即为 $7$。", "answer": "$$\\boxed{7}$$", "id": "1455663"}]}