{"hands_on_practices": [{"introduction": "在我们尝试解决任何集合覆盖问题之前，一个最基本的问题是：解是否存在？这个练习将帮助你巩固一个核心概念，即一个集合覆盖实例有解的必要条件。通过分析一个假设情景，你将学会如何快速判断一个问题是否无解，这在实际问题建模中是至关重要的第一步 [@problem_id:1462631]。", "problem": "在集合覆盖（SET-COVER）问题中，我们给定一个元素全集 $U$ 和一个 $U$ 的子集集合，记为 $S=\\{S_{1}, S_{2}, \\dots, S_{m}\\}$。一个解，称为一个集合覆盖，是 $S$ 的一个子集，我们称之为 $C \\subseteq S$，其并集等于全集 $U$。也就是说，必须满足条件 $\\bigcup_{S_i \\in C} S_i = U$。如果不存在这样的子集 $C$，则称该问题实例无解。\n\n考虑一个集合覆盖问题的具体实例，其中全集为 $U = \\{1, 2, 3, 4, 5, 6\\}$，初始子集集合为 $S = \\{S_{1}, S_{2}, S_{3}, S_{4}\\}$。这些子集定义如下：\n- $S_{1} = \\{1, 2, 3\\}$\n- $S_{2} = \\{3, 4, 5\\}$\n- $S_{3} = \\{1, 5\\}$\n- $S_{4} = \\{2, 4, 6\\}$\n\n假设我们创建四个新的问题实例。在每个新实例中，可用子集的集合（我们称之为 $S'$）是通过从原始集合 $S$ 中移除恰好一个子集而形成的。\n\n下列哪种情况会导致集合覆盖实例 $(U, S')$ 无解？\n\nA) 实例中 $S' = S \\setminus \\{S_{1}\\}$\nB) 实例中 $S' = S \\setminus \\{S_{2}\\}$\nC) 实例中 $S' = S \\setminus \\{S_{3}\\}$\nD) 实例中 $S' = S \\setminus \\{S_{4}\\}$", "solution": "一个集合覆盖实例有解，当且仅当 $U$ 中的每个元素都出现在可用集合中的至少一个子集中。计算原始子集对每个元素的覆盖情况：\n- $1 \\in S_{1}, S_{3}$\n- $2 \\in S_{1}, S_{4}$\n- $3 \\in S_{1}, S_{2}$\n- $4 \\in S_{2}, S_{4}$\n- $5 \\in S_{2}, S_{3}$\n- $6 \\in S_{4}$\n\n元素 $6$ 只出现在 $S_{4}$ 中，因此 $S_{4}$ 在任何覆盖中都是必需的。因此，如果移除了 $S_{4}$，就没有子集集合能够覆盖元素 $6$，问题也就无解了。这对应于选项D。\n\n通过检查剩余集合的并集是否等于 $U$ 来验证移除其他子集后仍然有解：\n- A: $S'=\\{S_{2},S_{3},S_{4}\\}$ 且\n$$S_{2}\\cup S_{3}\\cup S_{4}=\\{3,4,5\\}\\cup\\{1,5\\}\\cup\\{2,4,6\\}=\\{1,2,3,4,5,6\\}=U.$$\n- B: $S'=\\{S_{1},S_{3},S_{4}\\}$ 且\n$$S_{1}\\cup S_{3}\\cup S_{4}=\\{1,2,3\\}\\cup\\{1,5\\}\\cup\\{2,4,6\\}=\\{1,2,3,4,5,6\\}=U.$$\n- C: $S'=\\{S_{1},S_{2},S_{4}\\}$ 且\n$$S_{1}\\cup S_{2}\\cup S_{4}=\\{1,2,3\\}\\cup\\{3,4,5\\}\\cup\\{2,4,6\\}=\\{1,2,3,4,5,6\\}=U.$$\n\n因此，只有移除 $S_{4}$ 会导致实例无解。", "answer": "$$\\boxed{D}$$", "id": "1462631"}, {"introduction": "一旦确定存在解，我们如何找到一个“好”的解，尤其是在每个集合都有不同成本的情况下？此练习向你介绍解决集合覆盖问题的经典方法——贪心算法。你将通过计算每个集合的“性价比”，即每单位成本能覆盖的新元素数量，来模拟贪心算法的第一步决策过程，从而深入理解其工作原理 [@problem_id:1412438]。", "problem": "考虑寻找一个最小成本集合覆盖的问题。给定一个全集 $U = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\\}$ 和一个包含五个可用子集的集合，分别标记为 A、B、C、D 和 E。每个子集都有一个相关成本。\n\n具体信息如下：\n- **集合 A**：覆盖元素 $\\{1, 2, 3, 4, 5\\}$，成本为 4。\n- **集合 B**：覆盖元素 $\\{6, 7, 8, 9, 10, 11, 12\\}$，成本为 5。\n- **集合 C**：覆盖元素 $\\{1, 3, 5, 7, 9, 11\\}$，成本为 5。\n- **集合 D**：覆盖元素 $\\{2, 4, 6, 8, 10, 12\\}$，成本为 4。\n- **集合 E**：覆盖元素 $\\{1, 6, 12\\}$，成本为 2。\n\n使用一个标准的贪心算法来解决这个问题。该算法迭代地构建覆盖。在每一步中，它选择*新覆盖元素*数量与集合成本之比值最大的集合。如果该最大比值出现平局，算法将选择按字母顺序排在最前面的集合（即 A 在 B 之前，B 在 C 之前，依此类推）。\n\n这个贪心算法首先选择哪个集合？\n\nA. 集合 A\nB. 集合 B\nC. 集合 C\nD. 集合 D\nE. 集合 E", "solution": "我们应用贪心集合覆盖规则：在每一步中，选择使新覆盖元素数量与其成本之比最大化的集合。在第一步，还没有任何元素被覆盖，因此一个集合新覆盖的元素数量就是该集合的大小。对于一个成本为 $c_{X}$ 的集合 $X$，其比值为\n$$\nr_{X}=\\frac{|X|}{c_{X}}.\n$$\n计算所有集合的这些比值：\n- 对于 $A$：$|A|=5$, $c_{A}=4$, 所以 $r_{A}=\\frac{5}{4}$。\n- 对于 $B$：$|B|=7$, $c_{B}=5$, 所以 $r_{B}=\\frac{7}{5}$。\n- 对于 $C$：$|C|=6$, $c_{C}=5$, 所以 $r_{C}=\\frac{6}{5}$。\n- 对于 $D$：$|D|=6$, $c_{D}=4$, 所以 $r_{D}=\\frac{6}{4}=\\frac{3}{2}$。\n- 对于 $E$：$|E|=3$, $c_{E}=2$, 所以 $r_{E}=\\frac{3}{2}$。\n\n最大比值为 $\\frac{3}{2}$，由 $D$ 和 $E$ 共同达到。根据指定的字母顺序平局决胜规则，算法首先选择 $D$。", "answer": "$$\\boxed{D}$$", "id": "1412438"}, {"introduction": "贪心算法虽然直观且高效，但它能保证找到最优解吗？这个问题通过一个精心设计的实例，揭示了贪心策略的局限性，即局部最优选择未必导向全局最优解。通过亲手计算贪心算法找到的解的大小并与最优解进行比较，你将具体地理解近似算法中“近似比”的概念，这是衡量算法性能的关键指标 [@problem_id:1462610]。", "problem": "一个内容分发网络（CDN）需要决定部署哪几种服务器配置，以托管一个由 12 个热门文件（标记为 F1 至 F12）组成的集合。其目标是选择最少数量的服务器配置，以确保所有 12 个文件在网络中均可用。现有五种可用的服务器配置，C1 至 C5，每种都能存储这些文件的一个特定子集：\n\n- $C_{1}$: $\\{F_{1}, F_{2}, F_{3}, F_{4}, F_{5}, F_{6}\\}$\n- $C_{2}$: $\\{F_{7}, F_{8}, F_{9}\\}$\n- $C_{3}$: $\\{F_{10}, F_{11}, F_{12}\\}$\n- $C_{4}$: $\\{F_{1}, F_{2}, F_{3}, F_{7}, F_{8}, F_{9}\\}$\n- $C_{5}$: $\\{F_{4}, F_{5}, F_{6}, F_{10}, F_{11}, F_{12}\\}$\n\n该公司的部署策略基于一个贪心算法。该算法按步骤执行：在每一步中，它选择能够覆盖最多尚未被已选配置覆盖的文件的服务器配置。若所覆盖的新文件数量出现平局，则算法选择索引最小的配置（例如，选择 C1 而非 C2）。此过程重复进行，直至所有 12 个文件均被覆盖。\n\n一个最优部署是指使用覆盖所有 12 个文件所需的绝对最少数量的服务器配置。\n\n计算由贪心算法部署的配置数量与最优部署中的配置数量之比。请将最终答案表示为小数值，并四舍五入至四位有效数字。", "solution": "设文件全集为 $\\mathcal{U}=\\{F_{1},F_{2},\\dots,F_{12}\\}$。各个配置如下：\n$$\nC_{1}=\\{F_{1},F_{2},F_{3},F_{4},F_{5},F_{6}\\},\\quad\nC_{2}=\\{F_{7},F_{8},F_{9}\\},\\quad\nC_{3}=\\{F_{10},F_{11},F_{12}\\},\n$$\n$$\nC_{4}=\\{F_{1},F_{2},F_{3},F_{7},F_{8},F_{9}\\},\\quad\nC_{5}=\\{F_{4},F_{5},F_{6},F_{10},F_{11},F_{12}\\}.\n$$\n\n贪心选择的流程如下：在每一步，选择能够覆盖最多未被覆盖的文件的配置；若出现平局，则选择索引最小的配置。\n\n第 1 步（初始）：各个配置的大小为 $|C_{1}|=6$、$|C_{4}|=6$、$|C_{5}|=6$、$|C_{2}|=3$、$|C_{3}|=3$。$C_{1},C_{4},C_{5}$ 三者出现平局；根据平局规则，选择 $C_{1}$。此时，已覆盖集合为 $S_{1}=C_{1}=\\{F_{1},\\dots,F_{6}\\}$，未覆盖集合为 $\\mathcal{U}\\setminus S_{1}=\\{F_{7},F_{8},F_{9},F_{10},F_{11},F_{12}\\}$。\n\n第 2 步：各配置新覆盖的文件数量为\n$$\n|C_{2}\\setminus S_{1}|=3,\\quad |C_{3}\\setminus S_{1}|=3,\\quad |C_{4}\\setminus S_{1}|=3,\\quad |C_{5}\\setminus S_{1}|=3.\n$$\n出现平局；根据平局规则，选择 $C_{2}$。已覆盖集合变为 $S_{2}=S_{1}\\cup C_{2}=\\{F_{1},\\dots,F_{9}\\}$，未覆盖集合为 $\\{F_{10},F_{11},F_{12}\\}$。\n\n第 3 步：各配置新覆盖的文件数量为\n$$\n|C_{3}\\setminus S_{2}|=3,\\quad |C_{5}\\setminus S_{2}|=3,\\quad |C_{1}\\setminus S_{2}|=0,\\quad |C_{2}\\setminus S_{2}|=0,\\quad |C_{4}\\setminus S_{2}|=0.\n$$\n$C_{3}$ 与 $C_{5}$ 之间出现平局；根据平局规则，选择 $C_{3}$。则 $S_{3}=S_{2}\\cup C_{3}=\\mathcal{U}$。因此，贪心算法共选择了 3 个配置。\n\n为寻找最优部署，可以观察到，没有任何单个配置能覆盖全部 12 个文件，因为 $\\max_{i}|C_{i}|=6<12$。然而，\n$$\nC_{4}\\cup C_{5}=\\{F_{1},F_{2},F_{3},F_{7},F_{8},F_{9}\\}\\cup \\{F_{4},F_{5},F_{6},F_{10},F_{11},F_{12}\\}=\\mathcal{U},\n$$\n可见 2 个配置已足够。因此，最优配置数量为 2。\n\n所求的比率为\n$$\nr=\\frac{\\text{greedy configurations}}{\\text{optimal configurations}}=\\frac{3}{2}=1.5.\n$$\n四舍五入到四位有效数字，此值为 $1.500$。", "answer": "$$\\boxed{1.500}$$", "id": "1462610"}]}