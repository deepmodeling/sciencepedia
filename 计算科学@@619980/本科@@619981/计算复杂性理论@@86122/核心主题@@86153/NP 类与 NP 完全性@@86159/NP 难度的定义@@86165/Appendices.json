{"hands_on_practices": [{"introduction": "在计算复杂性理论中，我们通常不会从头证明一个问题是NP难的。相反，我们利用已知的NP难问题作为跳板，通过多项式时间规约（polynomial-time reduction）来传递“难度”。本练习将引导你运用规约的传递性——这是证明新问题NP难度的核心工具，它阐明了如果一个已知难问题可以“转化”为一个新问题，那么这个新问题至少和那个已知问题一样难。[@problem_id:1420019]", "problem": "在计算复杂性理论领域，计算机科学家根据问题的内在难度对问题进行分类。此分类中的两个关键概念是 NP-难度 (NP-hardness) 和多项式时间归约 (polynomial-time reductions)。\n\n我们来正式定义这些术语：\n- 如果存在一个算法，可以在多项式时间内将问题 $A$ 的任何实例转换为问题 $B$ 的一个实例，使得 $B$ 实例的解能让我们确定原始 $A$ 实例的解，那么我们称问题 $A$ 可多项式时间归约到问题 $B$，记为 $A \\le_p B$。\n- 如果 NP 类（非确定性多项式时间）中的每个问题 $L$ 都可以多项式时间归约到问题 $H$（即，对于所有 $L \\in \\text{NP}$, $L \\le_p H$），那么问题 $H$ 就被定义为 NP-难的。直观地说，这意味着一个 NP-难问题至少和 NP 中的任何问题一样难。\n\n假设有两个研究团队。Alpha 团队正在研究“广义数独谜题”（Generalized Sudoku Puzzle, GSP）问题。在计算机科学中，GSP 是一个 NP-难问题，这是一个公认的事实。Beta 团队正在研究另一个名为“整数线性可行性”（Integer Linear Feasibility, ILF）的问题。Beta 团队中的一位杰出研究人员发现了一种巧妙的算法，该算法可以将任何规模为 $n$ 的 GSP 实例转换为 ILF 问题的实例。这个转换算法的运行时间与 $n^3$ 成正比。由此产生的 ILF 实例的解可以直接告诉他们原始的 GSP 实例是否有解。\n\n仅根据这些信息，关于 ILF 问题的计算复杂性，你能得出的最强的正确结论是什么？\n\nA. ILF 问题属于 NP 类。\n\nB. ILF 问题可以在多项式时间内求解。\n\nC. ILF 问题是 NP-完全的。\n\nD. ILF 问题是 NP-难的。\n\nE. 从所提供的信息中，无法得出关于 ILF 问题复杂性的任何有意义的结论。", "solution": "我们已知两个正式事实。首先，“广义数独谜题”（GSP）是 NP-难的，这意味着对于每个语言 $L \\in \\text{NP}$，都存在一个从 $L$ 到 GSP 的多项式时间归约。形式上，\n$$\n\\forall L \\in \\text{NP},\\quad L \\le_{p} \\text{GSP}.\n$$\n其次，存在一个从 GSP 到“整数线性可行性”（ILF）问题的多项式时间归约，其运行时间与 $n^{3}$ 成正比，这是输入规模的多项式时间，因此用归约符号表示为，\n$$\n\\text{GSP} \\le_{p} \\text{ILF}.\n$$\n多项式时间归约的一个基本性质是传递性：如果 $A \\le_{p} B$ 且 $B \\le_{p} C$，那么 $A \\le_{p} C$，因为两个多项式时间可计算转换的复合仍然是多项式时间的。将此性质应用于上述两个事实，对于任何 $L \\in \\text{NP}$，我们有\n$$\nL \\le_{p} \\text{GSP} \\le_{p} \\text{ILF} \\quad \\Longrightarrow \\quad L \\le_{p} \\text{ILF}.\n$$\n根据 NP-难度的定义，这意味着 ILF 是 NP-难的。\n\n根据所给信息，无法得出更强的结论。特别地，我们并未被告知 $\\text{ILF} \\in \\text{NP}$，因此我们不能断定其为 NP-完全的，也没有依据断定其可在多项式时间内求解。", "answer": "$$\\boxed{D}$$", "id": "1420019"}, {"introduction": "在掌握了如何正确使用规约之后，理解一个常见的逻辑谬误至关重要：搞错规约的方向。本练习呈现了一个看似合理但存在根本性缺陷的证明，旨在让你识别其中的错误。通过这个过程，你将深刻理解为何要证明一个新问题 $Y$ 是NP难的，我们必须将一个已知的NP难问题规约“到” $Y$ (即 $A \\le_p Y$，其中 $A$ 是已知的NP难问题)，而不是反过来。[@problem_id:1420029]", "problem": "在计算复杂性理论中，如果存在一个算法，该算法能通过多项式数量的步骤外加对一个能解决问题 $B$ 的预言机（黑盒）的多项式数量的调用来解决问题 $A$，则称判定问题 $A$ 可多项式时间归约到判定问题 $B$，记作 $A \\le_p B$。对于标准的Karp归约，这意味着存在一个多项式时间函数 $f$，它将问题 $A$ 的任何实例 $x$ 转换为问题 $B$ 的一个实例 $f(x)$，使得 $x$ 是 $A$ 的“是”实例当且仅当 $f(x)$ 是 $B$ 的“是”实例。\n\n一名学生受命确定一个名为INTEGER-FACTOR-BOUND（IFB）的新判定问题的复杂度。IFB的一个实例是一对正整数 $(N, k)$，问题在于 $N$ 是否有一个小于或等于 $k$ 的非平凡因子。\n\n该学生知道3-可满足性问题（3-SAT）是NP完全的。为了证明IFB是NP难的，该学生构造了一个有效的多项式时间算法，该算法将IFB的任意给定实例 $(N, k)$ 转换为一个特定的3-SAT公式 $\\phi$，使得 $\\phi$ 是可满足的当且仅当 $N$ 有一个小于或等于 $k$ 的非平凡因子。换言之，该学生成功地证明了 IFB $\\le_p$ 3-SAT。基于这个结果，该学生得出结论：IFB问题是NP难的。\n\n下列哪个陈述正确地指出了该学生逻辑中的根本性缺陷？\n\nA. 学生的证明不完整；在得出任何结论之前，他们还必须证明IFB属于复杂度类NP（非确定性多项式时间）。\n\nB. 归约的方向是错误的。要证明IFB是NP难的，必须将一个已知的NP难问题归约*到*IFB，而不是反过来。\n\nC. 结论是有缺陷的，因为3-SAT是一个逻辑问题，不能用来证明像IFB这样的数论问题的难度。归约应该来自另一个数论问题，例如SUBSET-SUM。\n\nD. 这种归约本身是不可能的。一个众所周知的事实是，IFB可以在多项式时间内解决，而3-SAT不能（除非P=NP），所以从IFB到3-SAT的归约不可能存在。\n\nE. 学生实际上已经证明了IFB在P中，因为他们找到了一个到另一个问题的多项式时间转换。", "solution": "定义一个多项式时间多一归约如下：对于判定问题 $A$ 和 $B$，$A \\le_{p} B$ 意味着存在一个多项式时间可计算函数 $f$，使得对于所有输入 $x$，$x \\in A$ 当且仅当 $f(x) \\in B$。\n\n如果对于每个语言 $L \\in \\mathrm{NP}$，都有 $L \\le_{p} H$，那么问题 $H$ 就是NP难的。证明 $H$ 的NP难度的一种标准方法是，将一个已知的NP完全问题 $C$ 归约到 $H$，即证明 $C \\le_{p} H$；由于 $C$ 至少和 $\\mathrm{NP}$ 中的每个问题一样难，这意味着 $H$ 至少和 $\\mathrm{NP}$ 中的每个问题一样难。\n\n该学生通过构造一个从IFB实例到3-SAT实例并保持了是/否答案一致性的多项式时间转换，从而建立了 $\\mathrm{IFB} \\le_{p} \\text{3-SAT}$。这表明3-SAT至少和IFB一样难（等价地，IFB不比3-SAT更难）。然而，要得出IFB是NP难的结论，必须证明IFB至少和 $\\mathrm{NP}$ 中的每个问题一样难。一个充分的步骤是将一个已知的NP难（实际上是NP完全）问题（如3-SAT）归约到IFB，即证明 $\\text{3-SAT} \\le_{p} \\mathrm{IFB}$，而不是反过来。因此，根本性的缺陷在于归约的方向。\n\n评估各个选项：\n- A是错误的，因为NP难度的证明不要求问题属于 $\\mathrm{NP}$；要得出NP完全的结论才需要这一步，而不是NP难。\n- B是正确的：对于证明IFB的NP难度，这个归约的方向是错误的。\n- C是错误的：跨领域归约（从逻辑问题到数论问题）是标准且有效的。\n- D是错误的：在标准的输入规模度量下，目前没有已知的通用多项式时间算法来解决IFB，并且从任意问题到3-SAT的归约很常见；所声称的不可能性不成立。\n- E是错误的：从IFB到某个NP问题的多项式时间归约并不意味着IFB在 $\\mathrm{P}$ 中。\n\n因此，缺陷在于归约方向错误。", "answer": "$$\\boxed{B}$$", "id": "1420029"}, {"introduction": "将一个问题标记为NP难不仅仅是学术上的分类，它具有深远的实际意义。这个练习是一个思想实验，探讨了为任何一个NP难问题找到多项式时间算法所带来的颠覆性后果。通过思考这个问题，你将把NP难度的定义与计算机科学中最著名的未解之谜——$P$ 与 $NP$ 问题——直接联系起来，从而体会到这一概念的核心重要性。[@problem_id:1420041]", "problem": "一位独立的计算机科学家提出了一个突破性的主张：她开发了一种新算法，该算法可以在相对于输入大小的最坏情况下，在多项式时间内解决一个已知的 NP-hard 问题。她提供了该算法的伪代码和其多项式时间复杂度的严格证明，科学界已验证其正确性。假设她的主张为真，以下哪个陈述描述了这对计算复杂性理论最重要且最直接的影响？\n\n要回答此问题，您必须理解以下复杂性类别和概念的定义：\n- **P (多项式时间):** 可由确定性图灵机在多项式时间内解决的判定问题类别。\n- **NP (非确定性多项式时间):** 对于这类判定问题，一个提出的解可以由确定性图灵机在多项式时间内验证其正确性。\n- **NP-hard:** 如果对于 NP 类中的每个问题 L，都存在一个从 L 到 H 的多项式时间归约，那么问题 H 就是 NP-hard 的。多项式时间归约是一种算法，它在多项式时间内将问题 L 的一个实例转换为问题 H 的一个实例，使得新实例的答案是“是”当且仅当原始实例的答案是“是”。\n\n从下面的列表中选择最佳选项。\n\nA. 复杂性类别 P 被证明等于复杂性类别 NP。\n\nB. 所有 NP 中的问题现在都可以在对数时间内验证。\n\nC. 她解决的那个特定的 NP-hard 问题现在被证明是 NP-complete 的。\n\nD. 这一发现证明了旅行商问题可以在线性时间内解决。\n\nE. 这对复杂性理论没有重大影响，因为该发现仅涉及单个问题。", "solution": "设 $H$ 是一个在多项式时间归约下已知的 NP-hard 问题。根据 NP-hardness 的定义，对于每个语言 $L \\in \\mathrm{NP}$，存在一个多项式时间可计算的归约 $f_{L}$，使得对于所有输入 $x$：\n$$\nx \\in L \\iff f_{L}(x) \\in H.\n$$\n假设存在一个确定性算法 $\\mathcal{A}_{H}$，它能在最坏情况下以多项式时间判定 $H$。也就是说，存在一个多项式 $p_{H}$，使得对于所有输入 $y$：\n$$\n\\text{time}(\\mathcal{A}_{H}(y)) \\leq p_{H}(|y|).\n$$\n令 $q_{L}$ 为一个界定计算 $f_{L}$ 时间的多项式，并令 $r_{L}$ 为一个多项式，使得对所有 $x$ 都有 $|f_{L}(x)| \\leq r_{L}(|x|)$（两者都存在，因为 $f_{L}$ 是在多项式时间内可计算的）。\n\n构造一个用于 $L$ 的确定性算法如下：对于输入 $x$，在至多 $q_{L}(|x|)$ 的时间内计算 $y = f_{L}(x)$，然后在至多 $p_{H}(|y|) \\leq p_{H}(r_{L}(|x|))$ 的时间内运行 $\\mathcal{A}_{H}(y)$。因此，总运行时间由多项式\n$$\nq_{L}(|x|) + p_{H}(r_{L}(|x|)),\n$$\n所界定，这个表达式是关于 $|x|$ 的多项式。因此，$L \\in \\mathrm{P}$。由于 $L$ 是 $\\mathrm{NP}$ 中的任意一个语言，我们有\n$$\n\\mathrm{NP} \\subseteq \\mathrm{P}.\n$$\n一个标准的包含关系是 $\\mathrm{P} \\subseteq \\mathrm{NP}$，因此\n$$\n\\mathrm{P} = \\mathrm{NP}.\n$$\n评估各个选项：\n- A 恰好陈述了 $\\mathrm{P} = \\mathrm{NP}$，如上所示，这是可以推导出来的。\n- B 是错误的；这里没有任何信息能推导出对数时间的验证。\n- C 不一定成立，因为 NP-completeness 额外要求 $H \\in \\mathrm{NP}$（一个判定问题）；而 NP-hard 问题不一定在 $\\mathrm{NP}$ 中。\n- D 是错误的；存在多项式时间算法并不意味着旅行商问题存在线性时间算法。\n- E 是错误的；$\\mathrm{P} = \\mathrm{NP}$ 的推论是一个重大的基础性结果。\n\n因此，A 是最重要且最直接的推论。", "answer": "$$\\boxed{A}$$", "id": "1420041"}]}