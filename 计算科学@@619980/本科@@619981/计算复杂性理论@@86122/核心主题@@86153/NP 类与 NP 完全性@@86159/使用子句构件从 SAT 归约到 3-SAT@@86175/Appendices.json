{"hands_on_practices": [{"introduction": "将 SAT 归约到 3-SAT 的基础是处理包含超过三个文字的子句。本练习将通过一个具体的例子，带你实践标准的“链式”小工具（gadget）方法。你将学习如何引入辅助变量来连接原始子句的各个部分，从而将其转化为等价可满足的 3-CNF 范式，这是掌握 NP 完全性证明的关键一步 [@problem_id:1443587]。", "problem": "在计算复杂性理论中，从一般布尔可满足性问题（SAT）到 3-可满足性问题（3-SAT）的归约是证明 NP-完全性的基石。此归约的一个关键部分涉及将合取范式（CNF）中包含三个以上文字的子句转换为一个子句集合，其中每个子句恰好有三个文字。\n\n考虑一个包含 $k > 3$ 个文字的子句 $C = (l_1 \\lor l_2 \\lor \\dots \\lor l_k)$。将其转换为可满足性等价的 3-CNF 公式的标准方法是引入 $k-3$ 个新的“辅助”变量，我们可以将其标记为 $z_1, z_2, \\dots, z_{k-3}$。然后，单个子句 $C$ 被替换为 $k-2$ 个新子句的合取，构造如下：\n$$\n(l_1 \\lor l_2 \\lor z_1) \\land (\\neg z_1 \\lor l_3 \\lor z_2) \\land (\\neg z_2 \\lor l_4 \\lor z_3) \\land \\dots \\land (\\neg z_{k-3} \\lor l_{k-1} \\lor l_k)\n$$\n这种构造将辅助变量串联起来，确保当且仅当原始子句 $C$ 可满足时，整个新子句集合也可满足。\n\n将此标准归约过程应用于以下 4-文字子句：\n$$\nC = (x_1 \\lor x_2 \\lor x_3 \\lor x_4)\n$$\n下列哪个 3-CNF 子句集合是此转换的正确结果？假设引入的新辅助变量名为 $z_1$。\n\nA. $\\{ (x_1 \\lor x_2 \\lor z_1), (\\neg z_1 \\lor x_3 \\lor x_4) \\}$\n\nB. $\\{ (x_1 \\lor x_2 \\lor \\neg z_1), (z_1 \\lor x_3 \\lor x_4) \\}$\n\nC. $\\{ (x_1 \\lor x_2 \\lor x_3), (\\neg x_3 \\lor x_4 \\lor z_1) \\}$\n\nD. $\\{ (x_1 \\lor x_2 \\lor z_1), (z_1 \\lor x_3 \\lor x_4) \\}$\n\nE. $\\{ (x_1 \\lor z_1), (\\neg z_1 \\lor x_2 \\lor z_2), (\\neg z_2 \\lor x_3 \\lor x_4) \\}$", "solution": "我们从一个包含 $k>3$ 个文字的子句的标准归约开始。给定一个子句 $C=(l_{1}\\lor l_{2}\\lor \\dots \\lor l_{k})$，引入 $k-3$ 个新变量 $z_{1},\\dots,z_{k-3}$ 并将 $C$ 替换为 $k-2$ 个子句的合取：\n$$\n(l_{1}\\lor l_{2}\\lor z_{1})\\land(\\neg z_{1}\\lor l_{3}\\lor z_{2})\\land \\dots \\land (\\neg z_{k-3}\\lor l_{k-1}\\lor l_{k}).\n$$\n对于 $k=4$ 的情况，我们恰好有一个新变量 $z_{1}$ 和两个子句。将此构造应用于 $C=(x_{1}\\lor x_{2}\\lor x_{3}\\lor x_{4})$ 得到\n$$\n(x_{1}\\lor x_{2}\\lor z_{1})\\land(\\neg z_{1}\\lor x_{3}\\lor x_{4}).\n$$\n为了验证可满足性等价：\n- 如果 $(x_{1}\\lor x_{2}\\lor x_{3}\\lor x_{4})$ 是可满足的，那么或者 $x_{1}\\lor x_{2}$ 为真，此时可设置 $z_{1}=\\text{false}$，因此 $(x_{1}\\lor x_{2}\\lor z_{1})$ 为真，且 $(\\neg z_{1}\\lor x_{3}\\lor x_{4})$ 因 $\\neg z_{1}$ 也为真；或者 $x_{1}$ 和 $x_{2}$ 均为假但 $x_{3}\\lor x_{4}$ 为真，此时可设置 $z_{1}=\\text{true}$，因此第一个子句因 $z_{1}$ 为真，而第二个子句因 $x_{3}\\lor x_{4}$ 为真。\n- 反之，任何满足 $(x_{1}\\lor x_{2}\\lor z_{1})\\land(\\neg z_{1}\\lor x_{3}\\lor x_{4})$ 的赋值都必须使 $x_{1},x_{2},x_{3},x_{4}$ 中至少一个为真：如果 $x_{1}$ 和 $x_{2}$ 均为假，那么第一个子句强制 $z_{1}=\\text{true}$，因此第二个子句强制 $x_{3}\\lor x_{4}$ 为真。\n\n因此，正确的 3-CNF 集合是 $\\{(x_{1}\\lor x_{2}\\lor z_{1}),(\\neg z_{1}\\lor x_{3}\\lor x_{4})\\}$，这对应于选项 A。其他选项或者在第一个子句中否定了 $z_{1}$，或者在第二个子句中未否定 $z_{1}$，或者引入了不必要的额外变量，或者不遵循串联模式，因此没有实现标准归约。", "answer": "$$\\boxed{A}$$", "id": "1443587"}, {"introduction": "一个完整的归约算法必须能够稳健地处理所有情况，包括长度小于三个文字的子句。在实践中，我们经常遇到这种“短”子句。本练习聚焦于处理这类特殊情况，你将学习如何巧妙地使用“哑”变量来“填充”短子句，使其符合 3-CNF 的格式要求，同时保持其原始的逻辑可满足性不变 [@problem_id:1443617]。", "problem": "在计算复杂性理论的研究中，布尔可满足性问题（SAT）是一个经典的NP完全问题。一种常见的变体是3-SAT，其中布尔公式中的每个子句都必须恰好有三个文字。证明3-SAT的NP完全性的标准技术是提供一个从SAT到3-SAT的多项式时间归约。\n\n这个归约过程涉及将任意SAT实例的每个子句转换为一组每个子句都恰好有三个文字的子句集合。考虑一个来自原始SAT公式的恰好包含两个文字的子句，例如，$C = (x_1 \\lor x_2)$，其中 $x_1$ 和 $x_2$ 是文字（一个变量或其否定）。为了将此子句转换为一组包含3个文字的子句，我们必须引入一个新的“辅助”变量，我们称之为 $y$，它不出现在公式的其他任何地方。\n\n如果新的子句集合是可满足的，当且仅当原始子句 $(x_1 \\lor x_2)$ 被其变量的某个赋值所满足，那么该转换被认为是有效的。以下哪个选项代表了将子句 $(x_1 \\lor x_2)$ 转换为3-合取范式（3-CNF）中一组子句的有效转换？\n\nA. $(x_1 \\lor x_2 \\lor y)$\n\nB. $(x_1 \\lor x_2 \\lor y) \\land (x_1 \\lor x_2 \\lor \\neg y)$\n\nC. $(x_1 \\lor y) \\land (x_2 \\lor \\neg y)$\n\nD. $(x_1 \\lor x_2 \\lor y) \\land (\\neg x_1 \\lor \\neg x_2 \\lor \\neg y)$", "solution": "归约的目标是用一个包含新辅助变量 $y$ 的新公式片段 $\\phi'_{C}$ 来替换子句 $C = (x_1 \\lor x_2)$。一个有效归约的关键属性是它保持了可满足性。这意味着对于原始变量 $x_1$ 和 $x_2$ 的任何真值赋值，原始子句 $C$ 为真，当且仅当存在一个对新变量 $y$ 的真值赋值，使得新的公式片段 $\\phi'_{C}$ 为真。\n\n让我们基于这个标准来分析每个选项。\n\n**对选项A的分析：**\n提议的转换为 $\\phi'_{C} = (x_1 \\lor x_2 \\lor y)$。\n让我们检查可满足性条件。\n- 如果 $(x_1 \\lor x_2)$ 为真：无论 $y$ 的真值是什么，子句 $(x_1 \\lor x_2 \\lor y)$ 也将为真。因此，如果原始子句被满足，新子句也是可满足的。这个方向成立。\n- 如果 $(x_1 \\lor x_2)$ 为假：这发生在 $x_1$ 和 $x_2$ 都为假时。原始子句不被满足。新子句变为 $(F \\lor F \\lor y)$，可简化为 $y$。通过将 $y$ 设为真，该子句可以被满足。\n这是归约的失败。一个使原始子句为假的赋值，导致新公式可以被满足。对于一个完整的公式 $\\phi$，如果一个子句 $C$ 使得 $\\phi$ 不可满足，这个转换可能会使新公式 $\\phi'$ 变为可满足的，从而破坏了“当且仅当”的条件。因此，A是错误的。\n\n**对选项B的分析：**\n提议的转换为 $\\phi'_{C} = (x_1 \\lor x_2 \\lor y) \\land (x_1 \\lor x_2 \\lor \\neg y)$。\n这个公式是反向应用消解原理，或者更简单地说，是命题逻辑定律 $(P \\land Q) \\lor (P \\land \\neg Q) \\equiv P$ 的应用。令 $P = (x_1 \\lor x_2)$ 且 $Q = y$。该表达式为 $(P \\lor y) \\land (P \\lor \\neg y)$，它逻辑等价于 $P$，即 $x_1 \\lor x_2$。\n由于 $\\phi'_{C}$ 与原始子句 $C$ 逻辑等价，因此它被满足当且仅当 $C$ 被满足。此外，该转换产生了两个子句，$(x_1 \\lor x_2 \\lor y)$ 和 $(x_1 \\lor x_2 \\lor \\neg y)$，它们都恰好有三个文字。因此，这是一个有效的转换。所以，B是正确的。\n\n**对选项C的分析：**\n提议的转换为 $\\phi'_{C} = (x_1 \\lor y) \\land (x_2 \\lor \\neg y)$。\n问题指明，转换必须产生一组子句，其中每个子句都*恰好有三个文字*。这个选项产生的子句，$(x_1 \\lor y)$ 和 $(x_2 \\lor \\neg y)$，每个都只有两个文字。因此，无论它是否保持可满足性，这个选项都未能满足题干中给出的3-SAT问题定义的结构要求。所以，C是错误的。\n\n**对选项D的分析：**\n提议的转换为 $\\phi'_{C} = (x_1 \\lor x_2 \\lor y) \\land (\\neg x_1 \\lor \\neg x_2 \\lor \\neg y)$。\n让我们检查可满足性条件。\n- 如果 $(x_1 \\lor x_2)$ 为真：必须存在一个对 $y$ 的赋值可以满足 $\\phi'_{C}$。第一个子句 $(x_1 \\lor x_2 \\lor y)$ 总是为真。我们需要检查是否可以满足第二个子句 $(\\neg x_1 \\lor \\neg x_2 \\lor \\neg y)$。\n  - 情况1：$x_1$ 为真，$x_2$ 为假。第二个子句变为 $(F \\lor T \\lor \\neg y)$，其值为真。\n  - 情况2：$x_1$ 为假，$x_2$ 为真。第二个子句变为 $(T \\lor F \\lor \\neg y)$，其值为真。\n  - 情况3：$x_1$ 为真，$x_2$ 为真。第二个子句变为 $(F \\lor F \\lor \\neg y)$，可简化为 $\\neg y$。我们可以通过将 $y$ 设为假来满足它。\n  所以，如果原始子句被满足，新公式是可满足的。\n- 如果 $(x_1 \\lor x_2)$ 为假：这发生在 $x_1$ 和 $x_2$ 都为假时。原始子句不被满足。新公式变为 $(F \\lor F \\lor y) \\land (T \\lor T \\lor \\neg y)$，可简化为 $y \\land T$，也就是 $y$。通过将 $y$ 设为真，这可以被满足。\n与选项A类似，一个使原始子句为假的赋值可以导致新公式是可满足的。这违反了“当且仅当”的条件。所以，D是错误的。\n\n根据分析，只有选项B提供了一个有效的转换，它能产生正确大小的子句并保持可满足性。", "answer": "$$\\boxed{B}$$", "id": "1443617"}, {"introduction": "掌握了标准方法后，让我们挑战一个更深层次的设计问题。标准的线性链式小工具并非唯一的解决方案，本练习将引导你设计一个基于平衡二叉树结构的全新子句小工具。这个过程将迫使你不再仅仅是应用一个已知的算法，而是去理解构造这些小工具的核心原理：如何用 CNF 子句来强制实现逻辑等价关系 $p \\iff (c_1 \\lor c_2)$ [@problem_id:1443590]。", "problem": "在计算复杂性理论中，将一个通用的布尔可满足性问题（SAT）归约为其3文字版本（3-SAT）是一种经典的证明技巧。此归约的一个关键组成部分是创建一个“子句构件”（clause gadget），它能将一个含有 $k > 3$ 个文字的子句转换成一个等可满足的、每个子句最多包含3个文字的子句合取。\n\n考虑一个包含8个文字的子句 $C = (x_1 \\lor x_2 \\lor x_3 \\lor x_4 \\lor x_5 \\lor x_6 \\lor x_7 \\lor x_8)$。你的任务是为子句 $C$ 设计一个子句构件，该构件使用一种替代标准线性链方法的方案，且必须基于一个完全且平衡的二叉树结构。\n\n$C$ 的8个文字构成了这棵树的叶子节点。7个内部节点中的每一个都对应一个新的、唯一的辅助变量。该树在叶子节点之上有3层内部节点。设任意一个内部节点由变量 $p$ 表示，其在树中的两个子节点为 $c_1$ 和 $c_2$。子节点 $c_1$ 和 $c_2$ 可以是来自 $C$ 的原始文字（如果 $p$ 位于内部节点的最底层），也可以是其他辅助变量。树根处的辅助变量记为 $a_{root}$。\n\n变量 $p$ 的作用是，当且仅当其子节点的析取 $(c_1 \\lor c_2)$ 为真时，$p$ 才为真。这个属性应该向上传播到树的顶端，使得 $a_{root}$ 为真当且仅当原始子句 $C$ 为真。最终的3合取范式（3-CNF）公式 $\\phi_C$ 是通过对为7个内部节点中的每一个生成的子句进行合取，再加上一个最终的单位子句 $(a_{root})$ 来断言整个原始子句必须被满足而构造的。\n\n*每个* 具有子节点 $c_1$ 和 $c_2$ 的内部节点 $p$ 必须生成下列哪一组子句，才能确保 $\\phi_C$ 可满足当且仅当 $C$ 可满足？\n\nA. $\\{(\\neg p \\lor c_1 \\lor c_2), (\\neg c_1 \\lor p), (\\neg c_2 \\lor p)\\}$\n\nB. $\\{(\\neg p \\lor c_1 \\lor c_2)\\}$\n\nC. $\\{(\\neg c_1 \\lor p), (\\neg c_2 \\lor p)\\}$\n\nD. $\\{(\\neg p \\lor c_1), (\\neg p \\lor c_2), (p \\lor \\neg c_1 \\lor \\neg c_2)\\}$\n\nE. $\\{(\\neg p \\lor c_1), (p \\lor \\neg c_1 \\lor c_2)\\}$", "solution": "该构件的核心要求是创建一个新公式 $\\phi_C$，这个公式是可满足的，当且仅当原始子句 $C$ 是可满足的。在所提出的二叉树结构中，每个对应于内部节点的辅助变量 $p$ 旨在表示其子节点 $c_1$ 和 $c_2$ 的析取的真值。这意味着我们需要为每个内部节点强制施加逻辑等价关系 $p \\iff (c_1 \\lor c_2)$。\n\n让我们将逻辑等价关系 $p \\iff (c_1 \\lor c_2)$ 转换为合取范式（CNF）。一个等价关系 $A \\iff B$ 可以分解为两个蕴涵关系：$(A \\implies B)$ 和 $(B \\implies A)$。CNF公式将是这两部分CNF表示的合取。\n\n步骤1：将 $(p \\implies (c_1 \\lor c_2))$ 转换为CNF。\n使用蕴涵的定义 $(A \\implies B \\equiv \\neg A \\lor B)$，我们得到：\n$$p \\implies (c_1 \\lor c_2) \\equiv \\neg p \\lor (c_1 \\lor c_2) \\equiv (\\neg p \\lor c_1 \\lor c_2)$$\n这是一个包含3个文字的单子句。\n\n步骤2：将 $((c_1 \\lor c_2) \\implies p)$ 转换为CNF。\n再次使用蕴涵的定义：\n$$(c_1 \\lor c_2) \\implies p \\equiv \\neg (c_1 \\lor c_2) \\lor p$$\n现在，我们对项 $\\neg (c_1 \\lor c_2)$ 应用德摩根定律：\n$$\\neg (c_1 \\lor c_2) \\equiv (\\neg c_1 \\land \\neg c_2)$$\n将其代回，我们得到：\n$$(\\neg c_1 \\land \\neg c_2) \\lor p$$\n最后，我们使用分配律 $(A \\land B) \\lor C \\equiv (A \\lor C) \\land (B \\lor C)$ 将其转换为CNF：\n$$(\\neg c_1 \\lor p) \\land (\\neg c_2 \\lor p)$$\n这给了我们两个子句，每个子句包含2个文字。\n\n步骤3：合并子句。\n为了强制实现完全等价关系 $p \\iff (c_1 \\lor c_2)$，我们需要包含步骤1和步骤2中推导出的所有子句。因此，对于每个具有子节点 $c_1, c_2$ 的内部节点 $p$，其子句集为：\n$$\\{(\\neg p \\lor c_1 \\lor c_2), (\\neg c_1 \\lor p), (\\neg c_2 \\lor p)\\}$$\n这与选项A相匹配。请注意，包含2个文字的子句在3-CNF公式中是完全有效的，因为3-CNF要求子句*最多*包含三个文字。\n\n让我们验证一下为什么这个构造是有效的。\n假设原始子句 $C$ 是可满足的。这意味着至少有一个文字（比如说 $x_1$）为真。节点 $p=a_{1,1}$ 的子节点是 $c_1=x_1$ 和 $c_2=x_2$。它生成的一个子句是 $(\\neg x_1 \\lor a_{1,1})$。由于 $x_1$ 为真，$\\neg x_1$ 为假，因此 $a_{1,1}$ 必须为真才能满足该子句。这个“真”信号会向上传播到树的顶端。$a_{1,1}$ 的父节点将被强制为真，以此类推，直到根节点 $a_{root}$ 被强制为真。这满足了最终的单位子句 $(a_{root})$，并且可以构造出一个完整的可满足赋值。\n\n假设原始子句 $C$ 不可满足。那么所有文字 $x_1, \\dots, x_8$ 都为假。对于子节点为 $x_1, x_2$ 的节点 $p=a_{1,1}$，它生成的一个子句是 $(\\neg a_{1,1} \\lor x_1 \\lor x_2)$。由于 $x_1$ 和 $x_2$ 都为假，该子句简化为 $(\\neg a_{1,1})$，这意味着 $a_{1,1}$ 必须为假。这适用于最底层的所有辅助变量。这个“假”状态会向上传播到树的顶端。例如，对于子节点为 $c_1=a_{1,1}, c_2=a_{1,2}$ 的节点 $p=a_{2,1}$，子句 $(\\neg a_{2,1} \\lor a_{1,1} \\lor a_{1,2})$ 变为 $(\\neg a_{2,1} \\lor F \\lor F)$，从而强制 $a_{2,1}$ 为假。最终，这将强制根节点 $a_{root}$ 为假。然而，构件公式 $\\phi_C$ 包含子句 $(a_{root})$。这导致了一个矛盾（$a_{root}$ 必须同时为假和为真），因此 $\\phi_C$ 是不可满足的。\n\n因此，该组子句正确地强制了所期望的等可满足性。\n\n对其他选项的分析：\n*   B. $\\{(\\neg p \\lor c_1 \\lor c_2)\\}$：这仅强制了 $p \\implies (c_1 \\lor c_2)$。它没有强制反向的蕴涵关系。如果 $x_1$ 为真，这并不会强制其父辅助变量为真，因此“真”信号（T-signal）不会向上传播到根节点。\n*   C. $\\{(\\neg c_1 \\lor p), (\\neg c_2 \\lor p)\\}$：这仅强制了 $(c_1 \\lor c_2) \\implies p$。它没有强制 $p \\implies (c_1 \\lor c_2)$。如果所有原始文字 $x_i$ 都为假，这组子句仍然可以被满足。例如，将所有辅助变量都设置为真，将会满足所有这种形式的子句以及最终的 $(a_{root})$ 子句，从而错误地使构件可满足。\n*   D. $\\{(\\neg p \\lor c_1), (\\neg p \\lor c_2), (p \\lor \\neg c_1 \\lor \\neg c_2)\\}$：这是 $p \\iff (c_1 \\land c_2)$ 的CNF表示。这将模拟逻辑与（AND），而非逻辑或（OR），这与析取子句的要求相反。\n*   E. $\\{(\\neg p \\lor c_1), (p \\lor \\neg c_1 \\lor c_2)\\}$：这组子句不对应于像等价关系那样的标准、清晰的逻辑关系。它不能正确地强制实现所要求的行为。\n\n因此，选项 A 是对每个节点处构件的唯一正确且完整的表述。", "answer": "$$\\boxed{A}$$", "id": "1443590"}]}