{"hands_on_practices": [{"introduction": "理论学习之后，最好的巩固方式莫过于亲手实践。这个练习将电路可满足性（CIRCUIT-SAT）这一抽象概念置于一个具体的工程场景中：一个由NAND门构成的警报系统。通过手动分析或简化这个电路，你将确定是否存在一组输入能使警报不被触发，这本质上就是求解一个电路满足问题。这个过程不仅能让你直观地理解CIRCUIT-SAT的含义，还能锻炼你分析布尔逻辑和简化电路的核心技能。[@problem_id:1415026]", "problem": "一个高安保设施使用一个基于数字逻辑电路的简单报警系统。该系统有三个传感器输入，分别记为 $x_1$、$x_2$ 和 $x_3$。每个输入可以处于两种状态之一：非激活（用 0 表示）或激活（用 1 表示）。如果电路的最终输出 $F$ 为 1，则报警器触发。\n\n该电路由双输入与非门完全构成。一个与非门当且仅当其两个输入均为 1 时输出 0；否则，它输出 1。连接方式如下：\n- 门 G1 接受输入 $x_1$ 和 $x_2$。\n- 门 G2 接受输入 $x_2$ 和 $x_3$。\n- 门 G3 接受输入 $x_1$ 和 $x_3$。\n- 门 G4 接受 G1 和 G2 的输出作为其输入。\n- 门 G5 接受 G2 和 G3 的输出作为其输入。\n- 最终输出门 F，接受 G4 和 G5 的输出作为其输入。\n\n你的任务是确定是否存在任何传感器输入的组合*不会*触发报警器。以下哪个陈述是正确的？\n\nA. 不，对于任何传感器输入组合，报警器都保证会触发。\n\nB. 是，一个不触发的组合是 $(x_1, x_2, x_3) = (1, 0, 1)$。\n\nC. 是，一个不触发的组合是 $(x_1, x_2, x_3) = (0, 1, 1)$。\n\nD. 是，一个不触发的组合是 $(x_1, x_2, x_3) = (1, 1, 0)$。\n\nE. 是，一个不触发的组合是 $(x_1, x_2, x_3) = (0, 0, 0)$。", "solution": "设与非运算定义为 $a \\uparrow b = \\lnot(a \\land b)$。将各个门的输出记为如下：\n- $y_{1} = \\lnot(x_{1} \\land x_{2})$\n- $y_{2} = \\lnot(x_{2} \\land x_{3})$\n- $y_{3} = \\lnot(x_{1} \\land x_{3})$\n- $y_{4} = \\lnot(y_{1} \\land y_{2})$\n- $y_{5} = \\lnot(y_{2} \\land y_{3})$\n- $F = \\lnot(y_{4} \\land y_{5})$\n\n使用 De Morgan 定律逐步简化。\n\n首先，计算 $y_{4}$ 和 $y_{5}$：\n$$\ny_{4} = \\lnot(y_{1} \\land y_{2}) = \\lnot y_{1} \\lor \\lnot y_{2}.\n$$\n因为 $y_{1} = \\lnot(x_{1} \\land x_{2})$，我们得到 $\\lnot y_{1} = x_{1} \\land x_{2}$。同理，$\\lnot y_{2} = x_{2} \\land x_{3}$。因此\n$$\ny_{4} = (x_{1} \\land x_{2}) \\lor (x_{2} \\land x_{3}) = x_{2} \\land (x_{1} \\lor x_{3}).\n$$\n类似地，\n$$\ny_{5} = \\lnot(y_{2} \\land y_{3}) = \\lnot y_{2} \\lor \\lnot y_{3} = (x_{2} \\land x_{3}) \\lor (x_{1} \\land x_{3}) = x_{3} \\land (x_{1} \\lor x_{2}).\n$$\n\n接下来，计算 $y_{4} \\land y_{5}$：\n$$\ny_{4} \\land y_{5} = \\bigl[x_{2} \\land (x_{1} \\lor x_{3})\\bigr] \\land \\bigl[x_{3} \\land (x_{1} \\lor x_{2})\\bigr] = x_{2} \\land x_{3} \\land \\bigl[(x_{1} \\lor x_{3})(x_{1} \\lor x_{2})\\bigr].\n$$\n使用分配律 $(a \\lor b)(a \\lor c) = a \\lor (b \\land c)$，令 $a=x_{1}$、$b=x_{3}$、$c=x_{2}$，得到\n$$\n(x_{1} \\lor x_{3})(x_{1} \\lor x_{2}) = x_{1} \\lor (x_{3} \\land x_{2}) = x_{1} \\lor (x_{2} \\land x_{3}).\n$$\n因此，\n$$\ny_{4} \\land y_{5} = x_{2} \\land x_{3} \\land \\bigl[x_{1} \\lor (x_{2} \\land x_{3})\\bigr].\n$$\n应用吸收律 $p \\land (q \\lor p) = p$，令 $p = x_{2} \\land x_{3}$ 且 $q = x_{1}$：\n$$\ny_{4} \\land y_{5} = x_{2} \\land x_{3}.\n$$\n因此最终输出为\n$$\nF = \\lnot(y_{4} \\land y_{5}) = \\lnot(x_{2} \\land x_{3}).\n$$\n\n因此，$F=0$（报警器不触发）当且仅当 $x_{2}=1$ 且 $x_{3}=1$，这与 $x_{1}$ 无关。在给定的选项中，组合 $(x_{1},x_{2},x_{3})=(0,1,1)$ 满足此条件。因此，正确的陈述是选项 C。", "answer": "$$\\boxed{C}$$", "id": "1415026"}, {"introduction": "电路可满足性问题不仅本身重要，更强大之处在于它能作为一种“通用语言”来描述和解决其他领域的难题。此练习将带你探索CIRCUIT-SAT在博弈论中的应用。我们将一个双人博弈的胜负条件用一个布尔电路来表示，并探讨当一方玩家做出固定决策后，如何判断另一方是否存在制胜策略。解决这个问题的关键在于学习如何通过“硬编码”部分输入，将一个更复杂的问题巧妙地归约为一个标准的CIRCUIT-SAT实例。[@problem_id:1415023]", "problem": "在计算复杂性理论中，许多问题可以被建模为博弈。考虑一个由已知布尔电路 $C$ 定义的双人完美信息博弈。玩家1提供一个 $n$ 比特的输入串 $x = (x_1, x_2, \\dots, x_n)$，玩家2提供一个 $m$ 比特的输入串 $y = (y_1, y_2, \\dots, y_m)$。电路 $C$ 以这 $n+m$ 个比特作为输入。博弈的结果由电路的单个比特输出决定：如果 $C(x, y) = 1$，玩家2获胜；如果 $C(x, y) = 0$，玩家1获胜。\n\n假设玩家1做出一个公开已知的、固定的开局走法 $x_0$。我们想要确定玩家2是否存在一个获胜的应对，即是否存在至少一个走法 $y$ 使得 $C(x_0, y) = 1$。这个判定可以通过解决一个电路可满足性（CIRCUIT-SAT）问题的实例来完成。CIRCUIT-SAT问题询问对于一个给定的布尔电路，是否存在一个输入赋值使其输出为1。\n\n你的任务是从原始电路 $C$ 和固定走法 $x_0$ 中，找出一个新电路 $C'$ 的正确构造方法，使得 $C'$ 是可满足的当且仅当玩家2对 $x_0$ 有获胜的应对。电路 $C'$ 的输入应该是我们正在搜索可满足赋值的那些变量。以下哪项描述了 $C'$ 的正确构造方法？\n\nA. 构造一个有 $n+m$ 个输入（对应于 $x$ 和 $y$）的电路 $C'$。创建 $n$ 个新的子电路，其中第 $i$ 个子电路计算输入比特 $x_i$ 和常数比特 $x_{0,i}$ 的逻辑异或。这 $n$ 个子电路的输出被送入一个大的或非门。$C'$ 的最终输出是原始电路输出 $C(x, y)$ 与此或非门输出的逻辑与。\n\nB. 构造一个有 $n$ 个输入（对应于 $x$）的电路 $C'$。该电路通过取原始电路 $C$ 并将 $y$ 的 $m$ 条输入线永久设置为一个固定的、任意的字符串（例如，全零）来形成。然后在其 $n$ 个输入上确定 $C'$ 的可满足性。\n\nC. 构造一个有 $m$ 个输入（对应于 $y$）的电路 $C'$。该电路通过取原始电路 $C$，将其输出连接到一个非门，并使用非门的输出作为 $C'$ 的输出来形成。原始电路 $C$ 的前 $n$ 个输入（用于 $x$）被硬连线到 $x_0$ 的常数比特值。\n\nD. 构造一个有 $m$ 个输入（对应于 $y$）的电路 $C'$。该电路就是原始电路 $C$，但其前 $n$ 条输入线（用于 $x$）不是可变输入，而是被硬连线到走法 $x_0$ 的常数比特值。具体来说，对于每个 $i \\in \\{1, \\dots, n\\}$，如果 $x_{0,i}=1$，则第 $i$ 条输入线连接到一个常数 `TRUE` 源；如果 $x_{0,i}=0$，则连接到一个常数 `FALSE` 源。\n\nE. 构造一个有 $m$ 个输入（对应于 $y$）的电路 $C'$。该电路通过取 $C$ 的 $n$ 个副本来构建。对于第 $i$ 个副本，如果 $x_{0,i}=1$，则输入 $x_i$ 连接到 `TRUE` 源；如果 $x_{0,i}=0$，则连接到 `FALSE` 源，而所有其他 $x_j$ (对于 $j \\neq i$) 和所有 $y_k$ 保持为输入。所有 $n$ 个副本的输出随后被送入一个大的或门，产生 $C'$ 的最终输出。", "solution": "我们按如下方式形式化目标判定问题。该博弈指定了一个固定的开局走法 $x_{0} \\in \\{0,1\\}^{n}$。问题“玩家2是否有获胜的应对？”恰好是谓词\n$$\n\\exists\\, y \\in \\{0,1\\}^{m}:\\; C(x_{0},y)=1.\n$$\n一个CIRCUIT-SAT实例包含一个电路 $C'$（其输入变量集为 $Z$）并询问是否\n$$\n\\exists\\, z \\in \\{0,1\\}^{|Z|}:\\; C'(z)=1.\n$$\n该问题额外要求 $C'$ 的输入恰好是我们在其上搜索可满足赋值的那些变量。由于 $x$ 被固定为 $x_{0}$，我们唯一必须量化的变量是 $y$ 的 $m$ 个比特。因此，$C'$ 必须恰好有 $m$ 个对应于 $y$ 的输入，而 $x$ 的输入被硬连线到编码 $x_{0}$ 的常数上。\n\n评估每个选项：\n\n- 选项D：构造一个有 $m$ 个输入 $y$ 的电路 $C'$，并将 $C$ 的前 $n$ 个输入硬连线到 $x_{0}$。那么对于任意 $y$，\n$C'(y)=C(x_{0},y)$,\n所以\n$\\exists\\, y:\\; C'(y)=1 \\iff \\exists\\, y:\\; C(x_{0},y)=1$,\n这恰好是所要求的条件，并且$C'$的输入恰好是我们正在搜索的变量。这满足了所述的要求。\n\n- 选项A：定义\n$C'(x,y)=C(x,y)\\wedge \\bigwedge_{i=1}^{n}\\neg(x_{i}\\oplus x_{0,i})$,\n所以 $C'(x,y)=1$ 当且仅当 $x=x_{0}$ 且 $C(x,y)=1$。那么\n$\\exists\\, x,y:\\; C'(x,y)=1 \\iff \\exists\\, y:\\; C(x_{0},y)=1$.\n尽管这在逻辑上等价于目标谓词，但 $C'$ 将 $x$ 作为输入暴露出来，因此也对 $x$ 进行了量化。这违反了输入必须恰好是我们正在搜索的变量（仅 $y$）的要求。\n\n- 选项B：让 $C'$ 以 $x$ 为输入，并将 $y$ 固定为任意常数 $s$，可满足性检查的是\n$\\exists\\, x:\\; C(x,s)=1$,\n这通常与 $\\exists\\, y:\\; C(x_{0},y)=1$ 无关。不正确。\n\n- 选项C：将 $x$ 硬连线到 $x_{0}$，但输出被取反，\n$C'(y)=\\neg C(x_{0},y)$,\n所以\n$\\exists\\, y:\\; C'(y)=1 \\iff \\exists\\, y:\\; C(x_{0},y)=0$,\n这与期望的谓词相反。不正确。\n\n- 选项E：构建 $C$ 的 $n$ 个副本，每个副本中只固定一个 $x_{i}$，并将它们的输出进行或运算。这会得到\n$\\exists\\, y,\\; \\text{and for some } i,\\; \\exists\\, (x_{j})_{j\\neq i}:\\; C(x,y)=1 \\text{ with } x_{i}=x_{0,i}$,\n这并不能强制 $x=x_{0}$，也不等价于 $\\exists\\, y:\\; C(x_{0},y)=1$。不正确。\n\n因此，既能保持目标谓词又能遵守对输入变量要求的正确构造方法是选项D。", "answer": "$$\\boxed{D}$$", "id": "1415023"}, {"introduction": "在计算理论中，我们常常使用“神谕机”（Oracle）这一思想实验工具来探索问题的内在联系和复杂度。这个练习假设你拥有一个可以瞬间解决任何电路可满足性问题的“神谕机”。你的任务是利用这个强大的工具，来回答一个比“是否存在解”更深入的问题：“是否存在唯一的解？”。这个问题引导我们思考如何将一个NP完全问题的求解器作为子程序，来解决更复杂的计算任务，这是图灵归约思想的精髓。[@problem_id:1415013]", "problem": "一位名叫 Alice 的电气工程师，其任务是验证复杂数字逻辑电路的行为。一个给定的电路（我们可表示为 $C$）具有 $n$ 个二进制输入（由向量 $\\mathbf{x} = (x_1, x_2, \\dots, x_n)$ 表示）和一个单一的二进制输出。电路 $C$ 的一个“可满足赋值”是指一个输入向量 $\\mathbf{a}$，它使得电路的输出为 1，即 $C(\\mathbf{a}) = 1$。\n\nAlice 可以使用一个称为“电路可满足性预言机”（Oracle for Circuit Satisfiability, OCS）的强大测试设备。OCS 是一个解决电路可满足性问题的黑盒设备：给定任何布尔电路，如果存在至少一个可满足赋值，OCS 会立即返回 TRUE，否则返回 FALSE。\n\nAlice 的具体任务是确定电路 $C$ 是否*有且仅有一个*可满足赋值。她希望使用 OCS 来完成这个任务。她意识到可以基于 $C$ 构建新电路，并使用 OCS 对其进行测试。她的计划是最多调用 OCS 两次。在她的设计中，她使用了两组不同的含 $n$ 个输入变量的集合，即 $\\mathbf{x} = (x_1, \\dots, x_n)$ 和 $\\mathbf{y} = (y_1, \\dots, y_n)$。令 $C(\\mathbf{x})$ 表示以 $\\mathbf{x}$ 为输入的原始电路，$C(\\mathbf{y})$ 表示以 $\\mathbf{y}$ 为输入的该电路的一个相同副本。表达式 $(\\mathbf{x} \\neq \\mathbf{y})$ 表示一个子电路，当且仅当输入向量 $\\mathbf{x}$ 和 $\\mathbf{y}$ 不相同时，其输出为 1；它等价于逻辑表达式 $\\bigvee_{i=1}^n (x_i \\oplus y_i)$，其中 $\\oplus$ 是异或（XOR）运算。\n\nAlice 设计了几个潜在的策略。以下哪个程序能够使用最多两次 OCS 调用，正确地确定电路 $C$ 是否有且仅有一个可满足赋值？\n\nA. 首先，对电路 $C_1 = C(\\mathbf{x})$ 调用 OCS。如果结果为 FALSE，则 $C$ 不是唯一可满足的。如果结果为 TRUE，则构建一个以 $(\\mathbf{x}, \\mathbf{y})$ 为输入的第二个电路 $C_2$，该电路计算 $C(\\mathbf{x}) \\lor C(\\mathbf{y})$。对 $C_2$ 调用 OCS。当且仅当 OCS 对 $C_2$ 返回 TRUE 时，$C$ 有且仅有一个可满足赋值。\n\nB. 首先，对电路 $C_1 = C(\\mathbf{x})$ 调用 OCS。如果结果为 FALSE，则 $C$ 不是唯一可满足的。如果结果为 TRUE，则构建一个以 $(\\mathbf{x}, \\mathbf{y})$ 为输入的第二个电路 $C_2$，该电路计算 $C(\\mathbf{x}) \\land C(\\mathbf{y}) \\land (\\mathbf{x} \\neq \\mathbf{y})$。对 $C_2$ 调用 OCS。当且仅当 OCS 对 $C_2$ 返回 TRUE 时，$C$ 有且仅有一个可满足赋值。\n\nC. 首先，对电路 $C_1 = C(\\mathbf{x})$ 调用 OCS。如果结果为 FALSE，则 $C$ 不是唯一可满足的。如果结果为 TRUE，则构建一个以 $(\\mathbf{x}, \\mathbf{y})$ 为输入的第二个电路 $C_2$，该电路计算 $C(\\mathbf{x}) \\land C(\\mathbf{y}) \\land (\\mathbf{x} \\neq \\mathbf{y})$。对 $C_2$ 调用 OCS。当且仅当 OCS 对 $C_2$ 返回 FALSE 时，$C$ 有且仅有一个可满足赋值。\n\nD. 首先，对电路 $C_1 = C(\\mathbf{x})$ 调用 OCS。如果结果为 FALSE，则 $C$ 不是唯一可满足的。如果结果为 TRUE，则构建一个以 $(\\mathbf{x}, \\mathbf{y})$ 为输入的第二个电路 $C_2$，该电路计算 $C(\\mathbf{x}) \\land \\neg C(\\mathbf{y})$。对 $C_2$ 调用 OCS。当且仅当 OCS 对 $C_2$ 返回 TRUE 时，$C$ 有且仅有一个可满足赋值。\n\nE. 仅用两次对 OCS 的调用，不可能确定一个电路是否有唯一的可满足赋值。这需要一种根本不同类型的预言机。", "solution": "将电路 $C$ 的可满足集定义为\n$$S \\equiv \\{\\mathbf{a} \\in \\{0,1\\}^{n} : C(\\mathbf{a}) = 1\\}.$$\n当且仅当 $|S| = 1$ 时，电路 $C$ 是唯一可满足的。\n\n电路可满足性预言机（OCS）对一个输入电路返回 TRUE，当且仅当该电路至少有一个可满足赋值。我们根据 $|S|$ 的大小来分析每个提议的程序。\n\n共同的第一次调用（在选项 A–D 中）：对 $C(\\mathbf{x})$ 调用 OCS。当且仅当 $|S| \\geq 1$ 时，此调用返回 TRUE。如果返回 FALSE，则 $|S| = 0$ 且 $C$ 不是唯一可满足的。因此，仅需对第一次调用返回 TRUE（即 $|S| \\geq 1$）的分支进行进一步分析。\n\n选项 A：\n- 第二个电路：$C_{2}(\\mathbf{x}, \\mathbf{y}) \\equiv C(\\mathbf{x}) \\lor C(\\mathbf{y})$。\n- 该电路可满足，当且仅当存在 $\\mathbf{x}, \\mathbf{y}$ 使得 $C(\\mathbf{x}) = 1$ 或 $C(\\mathbf{y}) = 1$。\n- 如果 $|S| \\geq 1$，任取 $\\mathbf{x} \\in S$；则无论 $\\mathbf{y}$ 为何值，$C_{2}$ 均可满足。因此，对于所有 $|S| \\geq 1$ 的情况，对 $C_{2}$ 的 OCS 调用都将返回 TRUE。\n- 该程序声称，当且仅当对 $C_{2}$ 的 OCS调用返回 TRUE 时，电路具有唯一性，但只要 $|S| \\geq 1$，该调用就总是返回 TRUE，因此它无法区分 $|S| = 1$ 与 $|S| \\geq 2$。故选项 A 错误。\n\n选项 B：\n- 第二个电路：$C_{2}(\\mathbf{x}, \\mathbf{y}) \\equiv C(\\mathbf{x}) \\land C(\\mathbf{y}) \\land (\\mathbf{x} \\neq \\mathbf{y})$。\n- 该电路可满足，当且仅当存在不同的 $\\mathbf{x}, \\mathbf{y} \\in S$，即当且仅当 $|S| \\geq 2$。\n- 该程序声称，当且仅当对 $C_{2}$ 的 OCS 调用返回 TRUE 时，电路具有唯一性，这相当于将 $|S| = 1$ 的情况等同于 $|S| \\geq 2$ 的情况，这是颠倒的。故选项 B 错误。\n\n选项 C：\n- 第二个电路与 B 中相同：$C_{2}(\\mathbf{x}, \\mathbf{y}) \\equiv C(\\mathbf{x}) \\land C(\\mathbf{y}) \\land (\\mathbf{x} \\neq \\mathbf{y})$。\n- 如上所述，对 $C_2$ 的 OCS 调用返回 TRUE 当且仅当 $|S| \\geq 2$，而返回 FALSE 当且仅当 $|S| \\leq 1$。\n- 结合第一次调用（确保了 $|S| \\geq 1$）的结果，我们有：\n  - 第一次调用返回 TRUE 且第二次调用返回 FALSE，当且仅当 $|S| = 1$。\n- 因此，该程序能用最多两次调用正确地确定唯一性。故选项 C 正确。\n\n选项 D：\n- 第二个电路：$C_{2}(\\mathbf{x}, \\mathbf{y}) \\equiv C(\\mathbf{x}) \\land \\neg C(\\mathbf{y})$。\n- 该电路可满足，当且仅当存在 $\\mathbf{x} \\in S$ 和 $\\mathbf{y} \\notin S$, 即当且仅当 $1 \\leq |S| \\leq 2^{n} - 1$。\n- 对于任何可满足的非重言式 $C$（即 $1 \\leq |S| \\leq 2^{n} - 1$），对 $C_2$ 的 OCS 调用均返回 TRUE，无论 $|S| = 1$ 还是 $|S| \\geq 2$。如果 $C$ 是一个重言式（$|S| = 2^{n}$），对 $C_2$ 的 OCS 调用会返回 FALSE，但在这种情况下 $C$ 并非唯一可满足的。因此，此测试无法表征 $|S| = 1$ 的情况。故选项 D 错误。\n\n选项 E：\n- 由于选项 C 提供了一个有效的、通过两次调用来判断 $|S| = 1$ 是否成立的程序，因此这并非不可能。故选项 E 错误。\n\n因此，唯一正确的程序是 C。", "answer": "$$\\boxed{C}$$", "id": "1415013"}]}