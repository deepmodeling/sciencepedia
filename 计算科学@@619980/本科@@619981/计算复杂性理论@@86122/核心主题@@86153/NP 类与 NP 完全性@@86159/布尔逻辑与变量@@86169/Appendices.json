{"hands_on_practices": [{"introduction": "布尔函数可以用不同的视角来理解。除了真值表和逻辑门，代数视角也提供了强大的洞察力，这在密码学和电路复杂性等领域至关重要。本练习将引导您将布尔函数表示为有限域 $GF(2)$ 上的多项式，通过将熟悉的“多数”函数 $\\text{MAJ}_3$ 转换为这种代数范式（即代数范式，ANF），您将实践一项基本技能，并对其结构有更深入的理解 [@problem_id:1413987]。", "problem": "在计算复杂性研究中，通常将布尔函数表示为二元有限域 $GF(2)=\\{0, 1\\}$ 上的多项式进行分析。在此代数结构中，加法对应逻辑异或(XOR)运算，乘法对应逻辑与(AND)运算。所有算术运算均在模 2 下进行。因此，对于任意变量 $v \\in \\{0, 1\\}$，我们有 $v+v = 0$ 和 $v^2 = v$。这些性质意味着任何布尔函数 $f(x_1, \\dots, x_n)$ 在 $GF(2)$ 上都存在唯一的多线性多项式表示，也称为其代数范式。\n\n我们考虑三变量多数函数，记作 $\\text{MAJ}_3(x, y, z)$。该函数接收三个布尔输入 $x, y, z \\in \\{0, 1\\}$，当输入中至少有两个为 1 时，函数值为 1，否则为 0。\n\n确定 $\\text{MAJ}_3(x, y, z)$ 在 $GF(2)$ 上的唯一多线性多项式表示，并求出该多项式的次数。多项式的次数定义为其任意项中相乘变量的最大数量。\n\n请以一个双元素行矩阵的形式给出你的答案，其中第一个元素是多项式表达式，第二个元素是其整数次数。在你的多项式表达式中，请使用变量名 $x$、$y$ 和 $z$，用 `+` 表示加法 (XOR)，用并列表示乘法 (AND)。", "solution": "我们在 $GF(2)$ 上进行运算，其中加法为异或(XOR)，乘法为与(AND)，所有算术均在模 2 下进行。任何三变量布尔函数都有一个唯一的多线性多项式（代数范式，ANF）：\n$$\nf(x,y,z)=c_{0}+c_{1}x+c_{2}y+c_{3}z+c_{4}xy+c_{5}xz+c_{6}yz+c_{7}xyz,\n$$\n其系数 $c_{i}\\in\\{0,1\\}$ 由函数值通过布尔立方体上的莫比乌斯变换确定。对于 $\\text{MAJ}_{3}(x,y,z)$，我们使用其真值：\n- $\\text{MAJ}_{3}(0,0,0)=0$,\n- $\\text{MAJ}_{3}(1,0,0)=\\text{MAJ}_{3}(0,1,0)=\\text{MAJ}_{3}(0,0,1)=0$,\n- $\\text{MAJ}_{3}(1,1,0)=\\text{MAJ}_{3}(1,0,1)=\\text{MAJ}_{3}(0,1,1)=1$,\n- $\\text{MAJ}_{3}(1,1,1)=1$.\n\n系数计算如下（所有和都在 $GF(2)$ 上计算，因此减法等于加法）：\n$$\nc_{0}=\\text{MAJ}_{3}(0,0,0)=0.\n$$\n$$\nc_{1}=\\text{MAJ}_{3}(1,0,0)+c_{0}=0,\\quad\nc_{2}=\\text{MAJ}_{3}(0,1,0)+c_{0}=0,\\quad\nc_{3}=\\text{MAJ}_{3}(0,0,1)+c_{0}=0.\n$$\n$$\nc_{4}=\\text{MAJ}_{3}(1,1,0)+c_{1}+c_{2}+c_{0}=1,\\quad\nc_{5}=\\text{MAJ}_{3}(1,0,1)+c_{1}+c_{3}+c_{0}=1,\\quad\nc_{6}=\\text{MAJ}_{3}(0,1,1)+c_{2}+c_{3}+c_{0}=1.\n$$\n$$\nc_{7}=\\text{MAJ}_{3}(1,1,1)+c_{1}+c_{2}+c_{3}+c_{4}+c_{5}+c_{6}+c_{0}=1+0+0+0+1+1+1+0=0.\n$$\n因此，\n$$\n\\text{MAJ}_{3}(x,y,z)=xy+xz+yz,\n$$\n其次数为 2，因为最高阶的单项式是成对变量的乘积。", "answer": "$$\\boxed{\\begin{pmatrix} xy + xz + yz  2 \\end{pmatrix}}$$", "id": "1413987"}, {"introduction": "从函数表示转向实际应用，布尔逻辑是为许多系统（从软件验证到硬件设计）指定约束的核心。这个实践问题使用 Horn 子句（一种特殊的合取范式）来模拟分布式系统稳定性规则的真实场景。您将研究这些范式的一个关键特性——其解集在逻辑“与”运算下的闭包性，从而揭示为何这类约束在计算上通常是易于处理的 [@problem_id:1413994]。", "problem": "一个分布式计算系统由五个服务组成，由布尔变量 $v_1, v_2, v_3, v_4, v_5$ 表示。如果相应的服务处于活动状态，则变量 $v_i$ 为真，否则为假。系统配置是对这五个变量的真值赋值。为了使系统稳定，配置必须满足一组规则，这些规则表示为合取范式（CNF）的单个布尔公式，即子句的逻辑与，其中每个子句是变量或其否定的逻辑或。规则如下：\n1.  服务 $v_1$ 必须处于活动状态。\n2.  如果服务 $v_1$ 和 $v_2$ 都处于活动状态，则服务 $v_3$ 也必须处于活动状态。\n3.  如果服务 $v_1$ 和 $v_4$ 都处于活动状态，则服务 $v_5$ 也必须处于活动状态。\n\n令系统配置由真值向量 $(v_1, v_2, v_3, v_4, v_5)$ 表示，其中1代表真，0代表假。假设我们有两个不同的稳定配置，配置 A = $(1, 1, 1, 0, 0)$ 和配置 B = $(1, 0, 0, 1, 1)$。我们通过对A和B进行逐分量逻辑与运算来定义一个新的配置，即配置 C。也就是说，如果 A = $(a_1, a_2, a_3, a_4, a_5)$ 且 B = $(b_1, b_2, b_3, b_4, b_5)$，则 C = $(a_1 \\land b_1, a_2 \\land b_2, a_3 \\land b_3, a_4 \\land b_4, a_5 \\land b_5)$。\n\n关于配置 C，以下哪个陈述是正确的？\n\nA. 配置 C 与配置 A 相同。\n\nB. 配置 C 与配置 B 相同。\n\nC. 配置 C 是一个稳定的配置，但它与 A 和 B都不同。\n\nD. 配置 C 不是一个稳定的配置。\n\nE. 没有足够的信息来确定配置C是否稳定。", "solution": "我们有布尔变量 $v_{1},v_{2},v_{3},v_{4},v_{5}$ 以及与规则相对应的、表示为CNF子句的约束：\n1. 服务 $v_{1}$ 必须处于活动状态，即单元子句 $v_{1}$。\n2. 如果 $v_{1}$ 和 $v_{2}$ 都处于活动状态，则 $v_{3}$ 必须处于活动状态，其逻辑表达式为 $(v_{1} \\land v_{2}) \\Rightarrow v_{3}$，等价于 $\\lnot(v_{1} \\land v_{2}) \\lor v_{3}$，即 $\\lnot v_{1} \\lor \\lnot v_{2} \\lor v_{3}$。\n3. 如果 $v_{1}$ 和 $v_{4}$ 都处于活动状态，则 $v_{5}$ 必须处于活动状态，其逻辑表达式为 $(v_{1} \\land v_{4}) \\Rightarrow v_{5}$，等价于 $\\lnot v_{1} \\lor \\lnot v_{4} \\lor v_{5}$。\n\n给定的稳定配置是 $A=(1,1,1,0,0)$ 和 $B=(1,0,0,1,1)$。通过 $c_{i}=a_{i} \\land b_{i}$（其中 $i \\in \\{1,2,3,4,5\\}$）逐分量定义 $C$。计算每个分量：\n- $c_{1}=1 \\land 1=1$，\n- $c_{2}=1 \\land 0=0$，\n- $c_{3}=1 \\land 0=0$，\n- $c_{4}=0 \\land 1=0$，\n- $c_{5}=0 \\land 1=0$。\n因此 $C=(1,0,0,0,0)$。\n\n检查 $C$ 是否等于 $A$ 或 $B$：\n- $C \\neq A$ 因为 $c_{2}=0 \\neq a_{2}=1$。\n- $C \\neq B$ 因为 $c_{4}=0 \\neq b_{4}=1$。\n因此，$C$ 与 $A$ 和 $B$ 都不同。\n\n验证 $C$ 满足所有CNF子句：\n- 子句 $v_{1}$ 的值为 $1$，因为在 $C$ 中 $v_{1}=1$。\n- 子句 $\\lnot v_{1} \\lor \\lnot v_{2} \\lor v_{3}$ 的值为 $\\lnot 1 \\lor \\lnot 0 \\lor 0 = 0 \\lor 1 \\lor 0 = 1$。\n- 子句 $\\lnot v_{1} \\lor \\lnot v_{4} \\lor v_{5}$ 的值为 $\\lnot 1 \\lor \\lnot 0 \\lor 0 = 0 \\lor 1 \\lor 0 = 1$。\n所有子句都为真，所以 $C$ 是一个稳定的配置。\n\n由于 $C$ 是稳定的并且与 $A$ 和 $B$ 都不同，所以正确选项是 C。", "answer": "$$\\boxed{C}$$", "id": "1413994"}, {"introduction": "在理解了“函数是什么”之后，我们自然会问“计算它有多难？”。在许多实际情况中，获取信息是有成本的，因此用最少的信息查询来确定结果至关重要。本练习介绍了决策树复杂性的概念，它衡量了在最坏情况下确定函数输出所需查询的最小输入数量。通过分析一个基于传感器的安全系统，您将学习如何进行算法性思考，并运用“对手论证”这一经典方法来确定一个函数固有的计算难度 [@problem_id:1413978]。", "problem": "一个先进制造过程的故障安全机制依赖于5个独立的传感器，分别标记为 $X_1, X_2, X_3, X_4, X_5$。每个传感器输出一个二进制值：$0$ 代表“正常”状态，$1$ 代表“警报”状态。当且仅当五个传感器中至少有两个输出警报状态时，系统将触发全面停机（由最终输出 $1$ 表示）。否则，系统保持运行（由最终输出 $0$ 表示）。\n\n你的任务是创建一个高效的诊断算法来确定系统的最终状态。查询一个传感器以读取其值的成本很高。你的目标是通过查询尽可能少的传感器来确定系统的最终状态。\n\n在最坏情况下，为了确定系统的最终状态，必须查询的传感器的绝对最小数量是多少？", "solution": "设 $X_{1},\\dots,X_{5}\\in\\{0,1\\}$ 为传感器的输出，并设 $S=\\sum_{i=1}^{5}X_{i}$。当且仅当 $S\\ge 2$ 时，系统的最终输出为 $1$，否则为 $0$。\n\n按顺序查询时，经过一定数量的查询后，设 $k$ 为观测到的 $1$ 的数量，$z$ 为观测到的 $0$ 的数量，$r=5-(k+z)$ 为未查询的传感器数量。最终状态由以下停止条件确定：\n- 如果 $k\\ge 2$，那么 $S\\ge 2$，最终输出为 $1$。\n- 如果 $k\\le 1$，并且即使所有剩余的 $r$ 个传感器都为 $1$，总数也仍然小于 $2$，那么最终输出为 $0$。这个条件是 $k+r\\le 1$。具体来说，对于 $k=0$，这个条件是 $r\\le 1$（等价于 $z\\ge 4$），对于 $k=1$，这个条件是 $r=0$。\n\n下界（对手论证）：考虑任何最多进行 $4$ 次查询的策略。一个对手可以这样回应这 $4$ 次查询：使得其中恰好一个是 $1$，三个是 $0$，即四次查询后 $k=1$, $z=3$ 且 $r=1$。在这种情况下，两个停止条件都未满足：$k2$ 且 $k+r=2$，因此结果取决于最后一个未查询的位。确实，存在两种与观测到的回答一致的完成情况：\n- 如果最后一个未查询的传感器为 $0$，那么 $S=1$，最终输出为 $0$。\n- 如果最后一个未查询的传感器为 $1$，那么 $S=2$，最终输出为 $1$。\n因此，在这种最坏情况下，没有算法能在仅进行四次查询后确定最终状态。因此，在最坏情况下至少需要 $5$ 次查询。\n\n上界（构造性策略）：逐个查询传感器，一旦看到两个 $1$（宣布输出为 $1$）或看到四个 $0$（宣布输出为 $0$）就停止。在最坏情况下，经过四次查询后，会得到恰好一个 $1$ 和三个 $0$，这种情况不会触发任何一个停止规则，从而必须进行第五次查询。因此，该策略在最坏情况下最多使用 $5$ 次查询。\n\n综合下界和上界，在最坏情况下必须查询的传感器的绝对最小数量是 $5$。", "answer": "$$\\boxed{5}$$", "id": "1413978"}]}