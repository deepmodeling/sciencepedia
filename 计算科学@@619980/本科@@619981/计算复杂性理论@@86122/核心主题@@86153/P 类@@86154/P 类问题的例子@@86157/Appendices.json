{"hands_on_practices": [{"introduction": "我们从一个数据处理中的基本问题开始：在列表中查找重复的条目。分析一个直接的、暴力的解决方法是理解计算复杂性的经典第一步。这个练习要求你精确地计算这种算法所执行的比较次数，从而提供一种量化其效率并确认其多项式时间性质的直接方法。[@problem_id:1423352]", "problem": "一个数据完整性程序旨在测试数据集中是否存在重复条目。该数据集以一个包含 $N$ 个不同元素的列表形式提供。该程序实现了一个蛮力比较算法来确定是否存在任何重复项。\n\n该算法的操作如下：\n1. 它选择列表的第一个元素，并将其与之后的每个元素（即第二个、第三个... 直到第 $N$ 个元素）进行比较。\n2. 然后它选择第二个元素，并将其与之后的所有元素（即第三个、第四个... 直到第 $N$ 个元素）进行比较。\n3. 这个过程会重复。对于任何给定的第 $i$ 个元素（其中 $i$ 的范围从 1 到 $N-1$），它会与从第 $(i+1)$ 个位置到第 $N$ 个位置的所有元素进行比较。\n4. 最后一次操作是比较第 $(N-1)$ 个元素和第 $N$ 个元素。\n\n该程序在一个包含 $N$ 个元素的列表上将执行的比较总次数确切是多少？请用一个关于 $N$ 的函数来表示你的答案。", "solution": "令 $C(N)$ 表示所述算法在包含 $N$ 个元素的列表上执行的比较总次数。对于每个索引 $i$（其中 $1 \\leq i \\leq N-1$），第 $i$ 个元素会与从位置 $i+1$ 到 $N$ 的每个元素进行比较，在第 $i$ 步产生 $N - i$ 次比较。因此，\n$$\nC(N) = \\sum_{i=1}^{N-1} (N - i).\n$$\n这个求和可以通过分离各项来简化：\n$$\nC(N) = \\sum_{i=1}^{N-1} N - \\sum_{i=1}^{N-1} i = N(N-1) - \\frac{(N-1)N}{2}.\n$$\n合并同类项得到\n$$\nC(N) = \\frac{N(N-1)}{2}.\n$$\n等价地，这是从 $\\{1,2,\\ldots,N\\}$ 中选取不同索引的无序对的数量，即 $\\binom{N}{2}$，其计算结果与表达式 $\\frac{N(N-1)}{2}$ 相同。", "answer": "$$\\boxed{\\frac{N(N-1)}{2}}$$", "id": "1423352"}, {"introduction": "接下来，我们探讨具有更明确结构的问题，例如验证字符串中括号的正确嵌套。这项任务在许多现实世界的应用中至关重要，从解析编程代码到解释数据格式。这个思想实验使用一种虚构的“手性对称描述语言”（CSDL）来说明一个高效的线性时间算法如何解决这个问题，展示了P类中的问题可以被非常快速地解决。[@problem_id:1423326]", "problem": "在理论粒子物理学中，一种称为手性对称描述语言 (CSDL) 的简化表示法被用来表示特定量子场相互作用的拓扑结构。CSDL 中的表达式是由三种符号对组成的字符串：圆括号 `()`、方括号 `[]` 和花括号 `{}`。\n\n一个表达式如果满足以下标准，则被认为是“格式正确的”：\n1.  每个开符号（`(`、`[` 或 `{`）都有一个相同类型的对应闭符号（`)`、`]` 或 `}`）。\n2.  符号对被正确嵌套。这意味着对于任意两对符号，其中一对必须完全在另一对的内部，或者它们必须完全分离。例如，`[()]` 是格式正确的，而 `[(])` 不是。\n\n当一个格式正确的表达式被求值时，每个正确匹配的符号对都会“解析”并对表达式的总“对称完整性分数”做出贡献。分数贡献取决于符号类型：\n- 一对解析的 `()` 贡献 2 分。\n- 一对解析的 `[]` 贡献 3 分。\n- 一对解析的 `{}` 贡献 5 分。\n\n一个表达式的总对称完整性分数是其内部所有解析对的分数之和。如果一个表达式不是格式正确的，其结构被认为是不稳定的，其对称完整性分数定义为 0。\n\n计算以下 CSDL 表达式的总对称完整性分数：\n`S = \"{[()([{}])]({[]})}\"`", "solution": "一个格式正确的表达式可以通过将每个闭符号与最近的未匹配的同类型开符号进行匹配来验证（栈原理）。从左到右追踪字符串 $S$ 中的匹配，得到以下匹配的索引对：\n- 圆括号：$\\{(3,4),(5,10),(12,17)\\}$，因此 $n_{p}=3$。\n- 方括号：$\\{(6,9),(2,11),(14,15)\\}$，因此 $n_{s}=3$。\n- 花括号：$\\{(7,8),(13,16),(1,18)\\}$，因此 $n_{c}=3$。\n由于每个符号都已匹配且正确嵌套，该表达式是格式正确的。总对称完整性分数是所有解析对分数的总和，其中 $()$ 的权重为 $2$，$[]$ 的权重为 $3$，$\\{\\}$ 的权重为 $5$：\n$$T=2n_{p}+3n_{s}+5n_{c}=2\\cdot 3+3\\cdot 3+5\\cdot 3=6+9+15=30.$$", "answer": "$$\\boxed{30}$$", "id": "1423326"}, {"introduction": "最后，让我们来解决一个来自意想不到领域的问题：组合博弈论。确定像尼姆（Nim）这样的游戏中的必胜策略似乎需要复杂的推理，但事实并非总是如此。这个练习揭示了一个巧妙的数学洞察——特别是位异或（XOR）运算的使用——如何带来一个优雅且高效的多项式时间解法，展示了属于P类的问题的惊人广度。[@problem_id:1422800]", "problem": "在一个策略模拟中，两个自主智能体被编程来玩一种名为尼姆 (Nim) 的公平博弈。该游戏由几堆石子组成。在每个回合，玩家必须选择一堆石子并从中移除至少一颗石子。移除的石子数量可以是从一颗到该堆的全部石子。拿走最后一堆中最后一颗石子的智能体赢得游戏。这被称为正常游戏约定。\n\n在尼姆博弈中，“必败态”是指从该状态出发的任何可能走法都会导致对方玩家进入“必胜态”。反之，“必胜态”是指从该状态出发，至少存在一种走法可以导致对方进入“必败态”。拥有最优策略的智能体在可能的情况下，总是会移动到必败态。\n\n考虑一个有四堆石子的游戏状态。各堆石子的数量分别为 25、20、12 和 5。当前轮到一个智能体移动。为了确保获胜，该智能体必须采取一种走法，使另一个智能体处于必败态。当前智能体有多少种不同的走法可以达到这个目的？\n\nA. 0\n\nB. 1\n\nC. 2\n\nD. 3\n\nE. 4", "solution": "在正常游戏约定的公平尼姆博弈中，一个局面是必败态当且仅当所有石子堆数量的尼姆和（按位异或）为零。一个走法是致胜的，如果它能使局面的尼姆和变为零。\n\n设各堆石子的数量为 $a_{1}=25$, $a_{2}=20$, $a_{3}=12$, $a_{4}=5$。计算尼姆和\n$$\nS \\equiv a_{1} \\oplus a_{2} \\oplus a_{3} \\oplus a_{4}.\n$$\n使用二进制表示，\n$$\n25=11001,\\quad 20=10100,\\quad 12=01100,\\quad 5=00101,\n$$\n所以\n$$\nS=11001 \\oplus 10100 \\oplus 01100 \\oplus 00101=00100=4.\n$$\n由于 $S \\neq 0$，当前局面是必胜态，致胜的走法就是将某个 $a_{i}$ 变为\n$$\na_{i}'=a_{i} \\oplus S\n$$\n且满足 $a_{i}'<a_{i}$。这保证了新的尼姆和为零，因为\n$$\nS' = S \\oplus a_{i} \\oplus a_{i}' = S \\oplus a_{i} \\oplus (a_{i} \\oplus S) = 0.\n$$\n条件 $a_{i}'<a_{i}$ 成立，当且仅当石子堆数量 $a_i$ 的二进制表示中，与 $S$ 的最高有效位相对应的位为1。此处 $S=4$，其最高有效位是权值为4的位。因此，我们统计那些其数量的二进制表示中权值为4的位也为1的石子堆：\n- $25=11001$ 权值为4的位为0，所以无法从这堆石子中走出致胜步。\n- $20=10100$ 权值为4的位为1；致胜走法是 $20 \\to 20 \\oplus 4 = 16$。\n- $12=01100$ 权值为4的位为1；致胜走法是 $12 \\to 12 \\oplus 4 = 8$。\n- $5=00101$ 权值为4的位为1；致胜走法是 $5 \\to 5 \\oplus 4 = 1$。\n\n因此，总共有3种不同的致胜走法。\n\n所以，正确选项是 D。", "answer": "$$\\boxed{D}$$", "id": "1422800"}]}