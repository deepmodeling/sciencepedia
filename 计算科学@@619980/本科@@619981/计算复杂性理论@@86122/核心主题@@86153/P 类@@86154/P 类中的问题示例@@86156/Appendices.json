{"hands_on_practices": [{"introduction": "在计算理论中，许多看似需要检查所有组合的“暴力”搜索问题，实际上可以利用数据的内在结构来大大加快求解速度。本练习将通过一个经典的“双指针”技术，向你展示如何高效地在有序数据中寻找特定目标。这个例子完美地诠释了如何设计一个巧妙的多项式时间算法，从而将一个问题稳固地归入复杂性类别 $P$ 中。 [@problem_id:1423318]", "problem": "一个用于分布式数据库系统的监控服务旨在检查数据损坏。该服务定期从各个数据节点接收一批校验和。对于一项特定的完整性检查，该服务需要判断给定批次中是否存在任意两个不同的校验和，其和等于一个特定的主密钥。这些校验和总是不同的正整数，并以升序排序的列表形式提供。\n\n一位工程师实现了一个高效的算法来执行此项检查。该算法描述如下：\n1. 初始化两个指针：一个 `start` 指针位于列表的开头（索引 0），一个 `end` 指针位于列表的末尾。\n2. 当 `start` 指针位于 `end` 指针之前时，计算 `start` 和 `end` 位置上数字的和。\n3. 如果这个和等于主密钥，则说明找到了一个数对，算法终止。\n4. 如果和小于主密钥，则将 `start` 指针向右移动一位（增加其索引）。\n5. 如果和大于主密钥，则将 `end` 指针向左移动一位（减少其索引）。\n6. 如果 `start` 指针和 `end` 指针相交或相遇，则算法终止，因为没有找到数对。\n\n考虑以下具体场景：\n- 校验和的排序列表为 `L = [3, 8, 11, 14, 19, 21, 26, 30, 33, 39]`。\n- 主密钥为 `K = 44`。\n\n对于这个特定的输入，所述算法在终止前会执行多少次求和计算？\n\nA. 3\n\nB. 4\n\nC. 5\n\nD. 9\n\nE. 10\n\nF. 45", "solution": "我们给定一个排序列表 $L=[3,8,11,14,19,21,26,30,33,39]$ 和一个目标和（主密钥） $K=44$。该算法在列表的两端初始化两个指针，并在每次迭代中精确地计算一次和 $s=L_{\\text{start}}+L_{\\text{end}}$，然后根据 $s$ 是小于还是大于 $K$ 来移动一个指针，或者在 $s=K$ 时终止。令 $c$ 表示执行的求和计算次数。\n\n初始化 $\\text{start}=0$，$\\text{end}=9$，以及 $c=0$。\n迭代 1：计算 $s=L_{0}+L_{9}=3+39=42$。将 $c$ 增加 1，即 $c \\leftarrow c+1$，所以 $c=1$。因为 $42<44$，所以增加 $\\text{start} \\leftarrow 1$。\n迭代 2：计算 $s=L_{1}+L_{9}=8+39=47$。将 $c$ 增加 1，即 $c \\leftarrow c+1$，所以 $c=2$。因为 $47>44$，所以减少 $\\text{end} \\leftarrow 8$。\n迭代 3：计算 $s=L_{1}+L_{8}=8+33=41$。将 $c$ 增加 1，即 $c \\leftarrow c+1$，所以 $c=3$。因为 $41<44$，所以增加 $\\text{start} \\leftarrow 2$。\n迭代 4：计算 $s=L_{2}+L_{8}=11+33=44$。将 $c$ 增加 1，即 $c \\leftarrow c+1$，所以 $c=4$。因为 $44=K$，算法终止。\n\n因此，该算法在终止前精确地执行了 $c=4$ 次求和计算。", "answer": "$$\\boxed{B}$$", "id": "1423318"}, {"introduction": "图是计算机科学中用于建模各种网络（从社交关系到基础设施）的基础结构。这个动手实践将带你探索在图中寻找“三角形”的问题——这是网络分析中一个基础且重要的模式。通过解决这个问题，你将理解如何系统性地在多项式时间内识别图中的特定子结构，这是 $P$ 类问题在图论中的一个典型应用。 [@problem_id:1423320]", "problem": "一家名为“SocioGraph Inc.”的社交网络分析公司，使用一个无向图来模拟社交互动，其中每个人是一个顶点，相互的友谊关系是一条边。该公司正在开发一项功能，用于识别“闭合三人群组”，即三位彼此都是朋友的个体组成的群体。在图论中，这种结构被称为三角形或3-圈。\n\n现给定一个由六个个体组成的小型网络的数据，他们用整数1到6进行标记。顶点集合为 $V = \\{1, 2, 3, 4, 5, 6\\}$。代表图中边的友谊关系，由以下无序对集合给出：\n$E = \\{\\{1, 2\\}, \\{1, 3\\}, \\{1, 4\\}, \\{2, 3\\}, \\{2, 5\\}, \\{3, 4\\}, \\{3, 5\\}, \\{4, 6\\}, \\{5, 6\\}\\}$。\n\n您的任务是确定该网络中存在的不同闭合三人群组（三角形）的总数。一个不同的三人群组由一组独特的三个个体定义。", "solution": "一个闭合三人群组（三角形）是一个3顶点集合 $\\{a,b,c\\}\\subset V$，使得所有三条边 $\\{a,b\\}$、$\\{a,c\\}$ 和 $\\{b,c\\}$ 都属于 $E$。我们可以系统地检查所有可能的3顶点组合，或者更高效地，对每个顶点 $v$，检查其邻居之间是否存在边。\n\n我们可以遍历每条边 $\\{u, v\\} \\in E$，然后检查它们的邻居集合 $N(u)$ 和 $N(v)$ 的交集。每个在交集中的顶点 $w$ 都会形成一个三角形 $\\{u, v, w\\}$。\n\n让我们直接列举所有可能的三角形：\n- 顶点1的邻居是 {2, 3, 4}。在这些邻居中，{2, 3}是一条边，{3, 4}是一条边。这形成了两个三角形：{1, 2, 3} 和 {1, 3, 4}。\n- 顶点2的邻居是 {1, 3, 5}。在这些邻居中，{1, 3}是一条边，{3, 5}是一条边。这形成了两个三角形：{2, 1, 3} 和 {2, 3, 5}。\n- 顶点3的邻居是 {1, 2, 4, 5}。在这些邻居中，{1, 2}、{1, 4}、{2, 5}是边。这形成了三个三角形：{3, 1, 2}、{3, 1, 4}、{3, 2, 5}。\n- 顶点4的邻居是 {1, 3, 6}。在这些邻居中，{1, 3}是一条边。这形成了一个三角形：{4, 1, 3}。\n- 顶点5的邻居是 {2, 3, 6}。在这些邻居中，{2, 3}是一条边。这形成了一个三角形：{5, 2, 3}。\n- 顶点6的邻居是 {4, 5}。它们之间没有边。\n\n将所有找到的三角形集合起来并去除重复项：\n- {1, 2, 3}\n- {1, 3, 4}\n- {2, 3, 5}\n\n总共有3个不同的闭合三人群组（三角形）。", "answer": "$$\\boxed{3}$$", "id": "1423320"}, {"introduction": "复杂性类别 $P$ 不仅包含判定问题，还涵盖了许多关键的优化问题，例如寻找资源分配的最佳配对方案。本练习以量子计算中的一个实际场景为例，介绍了组合优化领域的基石问题——“最大匹配”问题。它突显了即使是复杂的资源分配任务，也可能存在高效的多项式时间解法，展示了 $P$ 类算法的强大能力和广泛适用性。 [@problem_id:1423309]", "problem": "在开发新一代量子计算架构中，一个芯片被设计为包含10个称为量子比特的基本处理单元，标记为 $Q_1, Q_2, \\ldots, Q_{10}$。一项关键操作是双量子比特纠缠门，但由于物理布局和串扰抑制，此类门只能在某些“兼容”的量子比特对之间实现。工程团队提供了以下兼容对的完整列表，其中一对 $(i, j)$ 表示可以在量子比特 $Q_i$ 和量子比特 $Q_j$ 之间形成一个门：\n\n(1, 2), (1, 5), (1, 6), (2, 3), (3, 4), (3, 7), (4, 5), (5, 8), (6, 9), (7, 10) 和 (9, 10)。\n\n为了优化量子算法的执行，希望在单个时钟周期内并行执行尽可能多的双量子比特门。这需要选择一组兼容对，其中每个量子比特至多参与一个配对。在该芯片上可以执行的同时、不相交的双量子比特门的绝对最大数量是多少？", "solution": "将量子比特建模为无向图的顶点，其顶点集为 $V=\\{Q_{1},Q_{2},\\ldots,Q_{10}\\}$，并将给定的兼容对作为边。一组同时不相交的双量子比特门对应于该图中的一个匹配。匹配是图中一组没有共同顶点的边。我们的目标是找到最大匹配的大小。\n\n图中有10个顶点。一个匹配中的每条边都使用两个顶点，因此任何匹配的大小 $m$ 都受到 $2m \\le 10$ 的限制，这意味着 $m \\le 5$。因此，可能的最大门数最多是5。如果我们可以找到一个包含5条边的匹配（一个完美匹配），那么这个数量就是最大值。\n\n让我们尝试找到一个大小为5的匹配。我们需要选择5条边，使得它们不共享任何顶点，即覆盖所有10个顶点。\n我们可以通过试验来构建这样一个匹配：\n1. 选择边 (1, 2)。使用的顶点：{1, 2}。\n2. 剩下的顶点：{3, 4, 5, 6, 7, 8, 9, 10}。选择边 (3, 4)。使用的顶点：{1, 2, 3, 4}。\n3. 剩下的顶点：{5, 6, 7, 8, 9, 10}。选择边 (5, 8)。使用的顶点：{1, 2, 3, 4, 5, 8}。\n4. 剩下的顶点：{6, 7, 9, 10}。选择边 (6, 9)。使用的顶点：{1, 2, 3, 4, 5, 8, 6, 9}。\n5. 剩下的顶点：{7, 10}。选择边 (7, 10)。使用的顶点：{1, 2, 3, 4, 5, 8, 6, 9, 7, 10}。\n\n我们找到了一个匹配 $M = \\{(1, 2), (3, 4), (5, 8), (6, 9), (7, 10)\\}$。这个集合包含5条边，它们都来自兼容对列表，并且它们两两之间没有共同的顶点。\n\n由于我们找到了一个大小为5的匹配，并且我们已经证明了最大可能的大小是5，因此这个匹配就是最大匹配。\n\n因此，可以同时执行的双量子比特门的最大数量是5。", "answer": "$$\\boxed{5}$$", "id": "1423309"}]}