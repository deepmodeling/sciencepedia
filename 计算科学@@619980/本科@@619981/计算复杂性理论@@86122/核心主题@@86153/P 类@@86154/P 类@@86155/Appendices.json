{"hands_on_practices": [{"introduction": "许多现实世界的问题，例如任务调度或资源分配，都可以通过将项目分为两个不同的组来简化。这个练习挑战你应用图着色的概念，来判断是否存在一种无冲突的两组划分方案。掌握这项技能可以帮助你识别和解决二分图问题，这是计算机科学中一类常见且可被高效解决的问题。[@problem_id:1453873]", "problem": "一家科技公司正在为其一个新项目组建项目团队。对于每个项目，某些团队成员对之间存在既有的时间冲突，不能被安排在同一个会议时段。项目经理需要确定是否可以将一个团队的所有成员安排在“上午”和“下午”这两个不同的会议时段，而不产生任何冲突。\n\n如果每个团队成员都可以被安排在上午或下午时段，并且对于每一对有冲突的成员，一个在上午时段，另一个在下午时段，那么这种安排就称为‘可排程的’。\n\n您将获得四个不同项目团队的规格说明。对于每个项目，团队成员用数字表示，冲突以成员对的形式给出。\n\n- **项目 A**:\n  - 成员: $\\{1, 2, 3, 4, 5\\}$\n  - 冲突: $\\{(1,4), (1,5), (2,4), (3,5)\\}$\n\n- **项目 B**:\n  - 成员: $\\{1, 2, 3, 4, 5, 6\\}$\n  - 冲突: $\\{(1,2), (1,4), (1,6), (2,3), (3,4), (5,6)\\}$\n\n- **项目 C**:\n  - 成员: $\\{1, 2, 3, 4\\}$\n  - 冲突: $\\{(1,2), (2,3), (3,1)\\}$\n\n- **项目 D**:\n  - 成员: $\\{1, 2, 3, 4, 5\\}$\n  - 冲突: $\\{(1,2), (2,3), (3,4), (4,5), (5,1)\\}$\n\n下列哪个陈述正确地指出了所有可排程的安排？\n\nA. 只有项目 A 的安排是可排程的。\n\nB. 只有项目 B 的安排是可排程的。\n\nC. 项目 A 和 C 的安排是可排程的。\n\nD. 项目 A 和 B 的安排是可排程的。\n\nE. 项目 C 和 D 的安排是可排程的。\n\nF. 所有四种安排都是可排程的。", "solution": "将每个项目看作一个图，其顶点是团队成员，边是冲突对。当且仅当该图是二分图时，安排才是可排程的，即图允许进行 2-着色（上午 vs. 下午），使得每条边的端点颜色都不同。等价地，一个图是二分图当且仅当它不包含奇数环。\n\n项目 A：成员为 $\\{1,2,3,4,5\\}$，边为 $(1,4)$、$(1,5)$、$(2,4)$、$(3,5)$。将 $1$ 分配到上午。则由于 $(1,4)$ 和 $(1,5)$， $4$ 和 $5$ 必须在下午。根据 $(2,4)$，由于 $4$ 在下午， $2$ 必须在上午。根据 $(3,5)$，由于 $5$ 在下午， $3$ 必须在上午。上午集合为 $\\{1,2,3\\}$，下午集合为 $\\{4,5\\}$，没有所列的边位于同一个集合内。因此，项目 A 是二分图，是可排程的。\n\n项目 B：成员为 $\\{1,2,3,4,5,6\\}$，边为 $(1,2)$、$(1,4)$、$(1,6)$、$(2,3)$、$(3,4)$、$(5,6)$。将 $1$ 分配到上午。则由于 $(1,2)$、$(1,4)$、$(1,6)$， $2,4,6$ 必须在下午。根据 $(2,3)$，由于 $2$ 在下午， $3$ 必须在上午。根据 $(3,4)$，由于 $4$ 在下午，$3$ 仍然在上午，这不矛盾。根据 $(5,6)$，由于 $6$ 在下午， $5$ 必须在上午。上午集合为 $\\{1,3,5\\}$，下午集合为 $\\{2,4,6\\}$，没有所列的边位于同一个集合内。因此，项目 B 是二分图，是可排程的。\n\n项目 C：成员为 $\\{1,2,3,4\\}$，边为 $(1,2)$、$(2,3)$、$(3,1)$。在 $\\{1,2,3\\}$ 上的子图是一个 $3$-环，这是一个奇数环，因此不是二分图。具体来说，将 $1$ 分配到上午，则 $(1,2)$ 迫使 $2$ 在下午，然后 $(2,3)$ 迫使 $3$ 在上午，但 $(3,1)$ 又迫使 $3$ 在下午，产生矛盾。因此，项目 C 不是可排程的。\n\n项目 D：成员为 $\\{1,2,3,4,5\\}$，边为 $(1,2)$、$(2,3)$、$(3,4)$、$(4,5)$、$(5,1)$，这些边构成一个 $5$-环，是一个奇数环。因此该图不是二分图。具体来说，将 $1$ 分配到上午，则通过传播可得 $2$ 在下午，$3$ 在上午，$4$ 在下午，$5$ 在上午，但边 $(5,1)$ 要求 $5$ 和 $1$ 在不同的时段，产生矛盾。因此，项目 D 不是可排程的。\n\n因此，只有项目 A 和项目 B 是可排程的。", "answer": "$$\\boxed{D}$$", "id": "1453873"}, {"introduction": "在设计网络时，无论是计算机网络、交通网络还是公共设施网络，一个主要目标都是以最低成本连接所有节点。本问题将向你介绍最小生成树（$MST$），这是解决此类优化任务的一个基本概念。通过这个练习，你将运用经典算法来寻找构建网络的最经济方案，并探讨确保最优解唯一的条件。[@problem_id:1453878]", "problem": "考虑一个无向图 $G = (V, E)$，其顶点集为 $V = \\{A, B, C, D, E\\}$，带权边集 $E$ 由以下元组 $(u, v, w)$ 列表给出，其中 $u$ 和 $v$ 是顶点，$w$ 是连接它们的边的整数权重：\n$E = \\{(A, B, 1), (A, C, 3), (B, C, 2), (B, D, 4), (C, D, 4), (C, E, 5), (D, E, 6)\\}$.\n\n该图的最小生成树（MST）是边的一个子集，该子集连接了所有顶点，不形成任何环路，并且具有最小的可能总边权。对于给定的图 $G$，请判断其最小生成树是否唯一。以下哪个陈述是正确的？\n\nA. 最小生成树是唯一的，其总权重为 12。\n\nB. 最小生成树不是唯一的，并且恰好有两个可能的最小生成树。\n\nC. 最小生成树是唯一的，因为所有边的权重都不同。\n\nD. 最小生成树不是唯一的，并且存在两个以上的最小生成树。\n\nE. 最小生成树是唯一的，其总权重为 11。", "solution": "要确定最小生成树（MST）及其唯一性，我们可以使用 Kruskal 算法。该算法通过迭代添加权重最低且不会与已选边形成环路的边来构建最小生成树。一个关键的见解是，一个最小生成树是唯一的，当且仅当对于图的任意切分，都存在唯一的最小权重边穿过该切分。使用 Kruskal 算法来检验这一点的一个更简单的方法是，查看我们是否曾在可以选择多条相同权重的边（这些边加入树中都不会形成环路）的情况。\n\n首先，我们将图的边按权重非递减顺序排序：\n1.  $(A, B), w=1$\n2.  $(B, C), w=2$\n3.  $(A, C), w=3$\n4.  $(B, D), w=4$\n5.  $(C, D), w=4$\n6.  $(C, E), w=5$\n7.  $(D, E), w=6$\n\n我们从一个空的 MST 边集和五个不相交的顶点集开始，每个顶点一个集合：$\\{A\\}, \\{B\\}, \\{C\\}, \\{D\\}, \\{E\\}$。\n\n步骤1：添加权重最小的边，即权重为1的 $(A, B)$。\nMST 边集为 $\\{(A, B)\\}$。\n顶点集合并为：$\\{A, B\\}, \\{C\\}, \\{D\\}, \\{E\\}$。\n\n步骤2：添加下一条权重最小的边，即权重为2的 $(B, C)$。这不会形成环路。\nMST 边集为 $\\{(A, B), (B, C)\\}$。\n顶点集合并为：$\\{A, B, C\\}, \\{D\\}, \\{E\\}$。\n\n步骤3：考虑下一条边，权重为3的 $(A, C)$。顶点 A 和 C 都已在同一个连通分量 $\\{A, B, C\\}$ 中。添加这条边会形成环路 A-B-C-A。因此，我们拒绝这条边。\n\n步骤4：排序列表中的下一批边是 $(B, D)$ 和 $(C, D)$，它们的权重都是4。这是一个关键点。Kruskal 算法在此有一个选择。为了检查唯一性，我们必须探究这种权重相同情况带来的后果。\n\n情况1：我们选择添加边 $(B, D)$。\n- 边 $(B, D)$ 连接了连通分量 $\\{A, B, C\\}$ 和 $\\{D\\}$。它不会形成环路。\n- 到目前为止的 MST 边集为：$\\{(A, B), (B, C), (B, D)\\}$。\n- 顶点集合并为：$\\{A, B, C, D\\}, \\{E\\}$。\n- 现在，考虑另一条相同权重的边 $(C, D)$。顶点 C 和 D 现在都在同一个连通分量 $\\{A, B, C, D\\}$ 中。添加这条边会形成一个环路 B-C-D-B。所以，我们必须拒绝它。\n- 下一条边是权重为5的 $(C, E)$。它连接了连通分量 $\\{A, B, C, D\\}$ 和 $\\{E\\}$。它不会形成环路。\n- 我们添加 $(C, E)$。现在的 MST 边集是 $\\{(A, B), (B, C), (B, D), (C, E)\\}$。\n- 我们有 $V-1 = 5-1=4$ 条边，因此我们已经构成了一棵生成树。这是我们的第一棵最小生成树。\n- 这棵最小生成树的总权重是 $1 + 2 + 4 + 5 = 12$。\n\n情况2：我们回到步骤4的选择点，转而选择添加边 $(C, D)$。\n- 边 $(C, D)$ 连接了连通分量 $\\{A, B, C\\}$ 和 $\\{D\\}$。它不会形成环路。\n- 到目前为止的 MST 边集为：$\\{(A, B), (B, C), (C, D)\\}$。\n- 顶点集合并为：$\\{A, B, C, D\\}, \\{E\\}$。\n- 现在，考虑另一条相同权重的边 $(B, D)$。顶点 B 和 D 现在都在同一个连通分量 $\\{A, B, C, D\\}$ 中。添加这条边会形成一个环路 B-C-D-B。所以，我们必须拒绝它。\n- 下一条边是权重为5的 $(C, E)$。它连接了连通分量 $\\{A, B, C, D\\}$ 和 $\\{E\\}$。它不会形成环路。\n- 我们添加 $(C, E)$。现在的 MST 边集是 $\\{(A, B), (B, C), (C, D), (C, E)\\}$。\n- 我们有 $V-1 = 4$ 条边，构成了一棵生成树。这是我们的第二棵最小生成树。\n- 这棵最小生成树的总权重是 $1 + 2 + 4 + 5 = 12$。\n\n我们找到了两个不同的边集，它们都构成了总权重为12的最小生成树。\n最小生成树 1: $\\{(A, B), (B, C), (B, D), (C, E)\\}$\n最小生成树 2: $\\{(A, B), (B, C), (C, D), (C, E)\\}$\n\n由于存在不止一个边集可以构成最小生成树，所以最小生成树不是唯一的。我们恰好找到了两个这样的集合。\n让我们分析这些选项：\nA. 最小生成树是唯一的，其总权重为 12。（不正确，不唯一）\nB. 最小生成树不是唯一的，并且恰好有两个可能的最小生成树。（正确）\nC. 最小生成树是唯一的，因为所有边的权重都不同。（不正确，权重不都相同，且最小生成树不唯一）\nD. 最小生成树不是唯一的，并且存在两个以上的最小生成树。（不正确，我们恰好找到了两个）\nE. 最小生成树是唯一的，其总权重为 11。（不正确，不唯一且权重错误）\n\n因此，正确的陈述是B。", "answer": "$$\\boxed{B}$$", "id": "1453878"}, {"introduction": "有些问题乍一看似乎具有组合爆炸的特性，暗示着必须采用低效的蛮力方法求解。本练习提出了一个这样的谜题——排列多米诺骨牌，并引导你洞察其底层结构。通过运用正确的图论抽象来为问题建模，你将看到它如何转化为一个可以在多项式时间内解决的著名问题，这展示了一种强大的计算思维技巧。[@problem_id:1453847]", "problem": "考虑 `DOMINO-CHAIN` 决策问题。您会得到一个包含 `n` 个多米诺骨牌的集合。每个多米诺骨牌是一个有两端的瓦片，每一端都涂有特定的颜色。为了解决这个问题，颜色可以用正整数表示。因此，一个多米诺骨牌由其两端的颜色对指定，例如 `{c_1, c_2}`。\n\n`DOMINO-CHAIN` 问题所询问的是：是否可以将所有 `n` 个多米诺骨牌排成一条连续的线，使得线上任意两个相邻的多米诺骨牌，它们接触的两端颜色相同？注意，任何多米诺骨牌都可以翻转。例如，一个颜色为 `{c_a, c_b}` 的多米诺骨牌可以放置在线上，使其 `c_a` 端或 `c_b` 端与相邻的多米诺骨牌匹配。\n\n关于 `DOMINO-CHAIN` 问题的计算复杂性，以下哪个陈述是正确的？\n\nA. `DOMINO-CHAIN` 属于 P，这可以通过将问题归约为在一个特殊构造的图上的哈密顿路径（Hamiltonian Path）问题来有效确定。\n\nB. `DOMINO-CHAIN` 属于 P，这可以通过将问题建模为一个图并检查是否存在欧拉路径（Eulerian path）来有效确定。\n\nC. `DOMINO-CHAIN` 是 NP-完备的，因为它是旅行商问题（Traveling Salesperson Problem）的一个变种，其中城市是颜色。\n\nD. `DOMINO-CHAIN` 很可能不属于 P，因为任何算法在最坏情况下都必须检查指数数量级的可能的多米诺骨牌排列，其数量级为 `n! \\times 2^n`。\n\nE. `DOMINO-CHAIN` 是一个不可判定问题。", "solution": "`DOMINO-CHAIN` 问题是一个决策问题，它询问是否可以为任何输入的多米诺骨牌集合给出一个“是”或“否”的答案。为了确定其计算复杂性，我们需要找到解决该问题的最高效算法并分析其运行时间。关键是使用图论来对这个问题进行建模。\n\n让我们构建一个多重图 `G = (V, E)`。\n顶点集合 `V` 是多米诺骨牌上出现的所有唯一颜色的集合。\n边集合 `E` 代表了 `n` 个多米诺骨牌的集合。对于每个颜色为 `{c_a, c_b}` 的多米诺骨牌，我们在图中的顶点 `c_a` 和顶点 `c_b` 之间添加一条边。由于多个多米诺骨牌可以连接同一对颜色，这是一个多重图。\n\n将所有多米诺骨牌排成一条线，使得相邻两端颜色匹配的问题，等价于在图中找到一个包含所有边的序列 `e_1, e_2, ..., e_n`，该序列形成一条单一的连续路径。这样一条恰好遍历图中每条边一次的路径，被称为欧拉路径（Eulerian path）。\n\n因此，`DOMINO-CHAIN` 问题等价于问：“由多米诺骨牌构建的多重图 `G` 是否存在欧拉路径？”\n\n图论中一个著名的定理陈述了无向多重图中存在欧拉路径的条件：\n1. 仅考虑度大于零的顶点，图必须是连通的。也就是说，所有涉及的颜色必须属于图的单个连通分量。\n2. 度为奇数的顶点数量必须为零或二。\n    - 如果有零个度为奇数的顶点，则图存在一个欧拉回路（一个起点和终点相同的路径）。这对应于一个可以形成环的多米诺骨牌链。\n    - 如果有两个度为奇数的顶点，则图存在一条欧拉路径，它从一个奇数度顶点开始，到另一个奇数度顶点结束。这对应于一个具有两个不同末端颜色的多米诺骨牌链。\n\n我们可以设计一个多项式时间算法来检查这两个条件：\n1.  **构建图并计算度：** 我们可以遍历 `n` 个多米诺骨牌。我们使用哈希表或数组来存储每种颜色（顶点）的度。对于每个多米诺骨牌 `{c_a, c_b}`，我们增加 `c_a` 和 `c_b` 的度计数器。此步骤所需时间与 `n` 成正比，即 `O(n)`。设 `k` 为唯一颜色的数量；`k` 最多为 `2n`。\n\n2.  **检查奇数度条件：** 计算完所有度后，我们遍历 `k` 个顶点，并计算有多少个顶点的度为奇数。这需要 `O(k)` 或 `O(n)` 的时间。如果计数不为 0 或 2，则答案为“否”。\n\n3.  **检查连通性条件：** 我们可以使用像广度优先搜索（Breadth-First Search, BFS）或深度优先搜索（Depth-First Search, DFS）这样的图遍历算法来验证所有非孤立顶点的连通性。我们从任何度大于零的顶点开始遍历。遍历结束后，我们检查所有其他度不为零的顶点是否都已被访问。在我们的图上进行 BFS 或 DFS 需要 `O(k + n)` 的时间，也就是 `O(n)`。如果此条件不满足，则答案为“否”。\n\n由于所有步骤都可以在输入大小 `n` 的多项式时间内完成（实际上是线性时间 `O(n)`），因此存在一个多项式时间算法来解决 `DOMINO-CHAIN` 问题。因此，`DOMINO-CHAIN` 属于复杂性类别 P。\n\n现在我们来评估给出的选项：\n-   **A：** 不正确。哈密顿路径（Hamiltonian Path）问题是 NP-完备的。将一个未知问题*归约到*一个 NP-完备问题并不能证明它属于 P。此外，该问题与欧拉路径（遍历边）有关，而与哈密顿路径（访问顶点）无关。\n-   **B：** 正确。如上所示，该问题可以建模为在一个图中寻找欧拉路径，而欧拉路径的存在条件可以在多项式时间内检查。这使得该问题属于 P。\n-   **C：** 不正确。旅行商问题（Traveling Salesperson Problem, TSP）及像哈密顿路径这样的相关问题，涉及每个*顶点*访问一次。我们的问题要求使用每个*边*（多米诺骨牌）一次，这在根本上是不同的，并且计算上更容易。\n-   **D：** 不正确。这个陈述描述的是一个朴素的暴力算法的复杂性。一个问题的复杂性类别是由*可能的最有效*算法决定的，而不是由一个低效的算法决定的。存在多项式时间算法证明了该问题属于 P，无论是否存在指数时间的暴力解法。\n-   **E：** 不正确。该问题显然是可判定的，因为我们刚刚概述了一个总是能终止并给出正确答案的确定性算法。\n\n因此，唯一正确的陈述是 B。", "answer": "$$\\boxed{B}$$", "id": "1453847"}]}