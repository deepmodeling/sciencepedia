{"hands_on_practices": [{"introduction": "掌握渐近符号的第一步是熟练运用其形式化定义。这个练习将带你分析一个包含取整函数 $f(n) = n + \\lfloor n/2 \\rfloor$ 的简单函数，通过严格的证明来确定其与 $g(n)=n$ 相比的紧渐近界。这有助于你理解为何在分析中，即便存在一些额外的操作，函数的整体增长率也可能保持在同一个量级。[@problem_id:1412901]", "problem": "在算法分析中，我们通常比较描述其运行时间的函数的增长率。考虑两个计算任务，任务 A 和任务 B，它们都对大小为 $n$ 的输入进行操作，其中 $n$ 是一个正整数。\n\n任务 A 的基本操作数由函数 $f(n) = n + \\lfloor \\frac{n}{2} \\rfloor$ 给出，其中 $\\lfloor x \\rfloor$ 是向下取整函数，它给出小于或等于 $x$ 的最大整数。\n任务 B 的基本操作数由函数 $g(n) = n$ 给出。\n\n请从以下选项中确定 $f(n)$ 和 $g(n)$ 之间最精确的渐近关系。符号 $O$ (大O)、$\\Omega$ (大Omega)、$\\Theta$ (大Theta)、$o$ (小o) 和 $\\omega$ (小omega) 具有它们在复杂度理论中的标准定义。\n\n选择唯一一个正确描述该关系的选项。\n\nA. $f(n) = O(g(n))$ 且 $f(n) \\neq \\Omega(g(n))$\n\nB. $f(n) = \\Omega(g(n))$ 且 $f(n) \\neq O(g(n))$\n\nC. $f(n) = \\Theta(g(n))$\n\nD. $f(n) = o(g(n))$\n\nE. $f(n) = \\omega(g(n))$", "solution": "我们已知 $f(n)=n+\\lfloor n/2 \\rfloor$ 和 $g(n)=n$，其中 $n$ 是一个正整数。使用标准的向下取整边界：对于任意实数 $x$，有 $\\lfloor x \\rfloor \\le x$ 和 $\\lfloor x \\rfloor \\ge x-1$。将 $x=n/2$ 应用于这些边界，我们得到\n$$\n\\lfloor n/2 \\rfloor \\le \\frac{n}{2}, \\qquad \\lfloor n/2 \\rfloor \\ge \\frac{n}{2}-1=\\frac{n-2}{2}.\n$$\n对于整数 $n$，一个更紧的下界是\n$$\n\\lfloor n/2 \\rfloor \\ge \\frac{n-1}{2}.\n$$\n因此\n$$\nn+\\frac{n-1}{2} \\le f(n) \\le n+\\frac{n}{2},\n$$\n即，\n$$\n\\frac{3}{2}n-\\frac{1}{2} \\le f(n) \\le \\frac{3}{2}n.\n$$\n上界 (大O)：对于所有 $n \\ge 1$，\n$$\nf(n) \\le \\frac{3}{2}n = \\left(\\frac{3}{2}\\right) g(n),\n$$\n因此存在常数 $c=\\frac{3}{2}$ 和 $n_{0}=1$，使得对于所有 $n \\ge n_{0}$，都有 $f(n) \\le c\\,g(n)$。因此 $f(n)=O(g(n))$。\n\n下界 (大Omega)：对于所有 $n \\ge 1$，\n$$\nf(n) \\ge \\frac{3}{2}n-\\frac{1}{2} = n + \\left(\\frac{1}{2}n - \\frac{1}{2}\\right) \\ge n,\n$$\n因此存在常数 $c' = 1$ 和 $n_{0}=1$，使得对于所有 $n \\ge n_{0}$，都有 $f(n) \\ge c'\\,g(n)$。因此 $f(n)=\\Omega(g(n))$。\n\n由于 $f(n)=O(g(n))$ 和 $f(n)=\\Omega(g(n))$ 都成立，因此可以得出 $f(n)=\\Theta(g(n))$。\n\n等价地，将双边不等式两边同时除以 $n$ 可得\n$$\n\\frac{3}{2}-\\frac{1}{2n} \\le \\frac{f(n)}{g(n)} \\le \\frac{3}{2},\n$$\n所以 $\\lim_{n \\to \\infty} f(n)/g(n) = \\frac{3}{2} \\in (0,\\infty)$，这也意味着 $f(n)=\\Theta(g(n))$。\n\n因此，最精确的选项是 $f(n)=\\Theta(g(n))$。", "answer": "$$\\boxed{C}$$", "id": "1412901"}, {"introduction": "在算法分析中，我们经常需要比较不同类型的函数，例如对数线性函数和多项式函数，以判断哪种算法在处理大规模输入时更优。这个练习展示了一种强大的技术——使用极限来确定函数增长率之间的精确关系。通过这个实践，你将学会如何判断一个函数的增长是否“严格慢于”另一个函数，即小o符号 ($o$) 的概念。[@problem_id:1412866]", "problem": "考虑两个为正整数 $n$ 定义的函数 $f(n)$ 和 $g(n)$，如下所示：\n$$f(n) = 20n \\log_{2}(n) + 500n$$\n$$g(n) = 0.1 n^2 - 1000n$$\n\n当 $n$ 趋近于无穷大时，以下哪项是 $f(n)$ 和 $g(n)$ 之间最精确的渐近关系描述？\n\nA. $f(n) = \\Theta(g(n))$\n\nB. $f(n) = \\omega(g(n))$\n\nC. $f(n) = o(g(n))$\n\nD. $f(n) = O(g(n))$ 且 $f(n) \\neq o(g(n))$\n\nE. $f(n) = \\Omega(g(n))$ 且 $f(n) \\neq \\Theta(g(n))$", "solution": "为了确定 $f(n)$ 和 $g(n)$ 之间的渐近关系，我们可以计算当 $n$ 趋近于无穷大时这两个函数比值的极限。我们来计算以下极限：\n$$ L = \\lim_{n \\to \\infty} \\frac{f(n)}{g(n)} $$\n这个极限的值将告诉我们渐近关系的性质：\n- 如果 $L = 0$，则 $f(n) = o(g(n))$（f 的增长严格慢于 g）。\n- 如果 $L = \\infty$，则 $f(n) = \\omega(g(n))$（f 的增长严格快于 g）。\n- 如果 $L$ 是一个有限的非零常数，则 $f(n) = \\Theta(g(n))$（f 和 g 的增长率相同）。\n\n将给定的函数代入极限表达式：\n$$ L = \\lim_{n \\to \\infty} \\frac{20n \\log_{2}(n) + 500n}{0.1 n^2 - 1000n} $$\n为了简化表达式，我们可以将分子和分母同时除以分母中 $n$ 的最高次幂，即 $n^2$：\n$$ L = \\lim_{n \\to \\infty} \\frac{\\frac{20n \\log_{2}(n)}{n^2} + \\frac{500n}{n^2}}{\\frac{0.1 n^2}{n^2} - \\frac{1000n}{n^2}} $$\n简化后得到：\n$$ L = \\lim_{n \\to \\infty} \\frac{20 \\frac{\\log_{2}(n)}{n} + \\frac{500}{n}}{0.1 - \\frac{1000}{n}} $$\n现在，我们计算当 $n \\to \\infty$ 时各项的极限：\n- $\\lim_{n \\to \\infty} \\frac{500}{n} = 0$\n- $\\lim_{n \\to \\infty} \\frac{1000}{n} = 0$\n- 我们还需要计算 $\\lim_{n \\to \\infty} \\frac{\\log_{2}(n)}{n}$。这是一个标准的极限，可以证明其值为零。对于任何常数 $k>0$ 和 $a>1$，对数函数 $\\log_a(n)$ 的增长速度比任何多项式函数 $n^k$ 都要慢。因此，$\\lim_{n \\to \\infty} \\frac{\\log_{2}(n)}{n} = 0$。或者，由于该极限是 $\\frac{\\infty}{\\infty}$ 的不定形式，可以使用洛必达法则：\n$$ \\lim_{n \\to \\infty} \\frac{\\log_{2}(n)}{n} = \\lim_{n \\to \\infty} \\frac{\\frac{d}{dn}(\\log_{2}(n))}{\\frac{d}{dn}(n)} = \\lim_{n \\to \\infty} \\frac{\\frac{1}{n \\ln(2)}}{1} = \\lim_{n \\to \\infty} \\frac{1}{n \\ln(2)} = 0 $$\n将这些结果代回我们的主极限表达式中：\n$$ L = \\frac{20 \\cdot 0 + 0}{0.1 - 0} = \\frac{0}{0.1} = 0 $$\n由于极限 $L = 0$，所以渐近关系是 $f(n) = o(g(n))$。\n\n现在我们来检查给定的选项：\nA. $f(n) = \\Theta(g(n))$：这要求极限为一个有限的非零常数。这是错误的。\nB. $f(n) = \\omega(g(n))$：这要求极限为无穷大。这是错误的。\nC. $f(n) = o(g(n))$：这要求极限为零。这是正确的。\nD. $f(n) = O(g(n))$ 且 $f(n) \\neq o(g(n))$：关系 $f(n) = o(g(n))$ 意味着 $f(n) = O(g(n))$。因此，条件 $f(n) \\neq o(g(n))$ 使得这个陈述是错误的。\nE. $f(n) = \\Omega(g(n))$ 且 $f(n) \\neq \\Theta(g(n))$：关系 $f(n) = o(g(n))$ 意味着 $f(n)$ 不是 $\\Omega(g(n))$。所以这是错误的。\n\n最精确的正确关系是 $f(n) = o(g(n))$，对应于选项 C。", "answer": "$$\\boxed{C}$$", "id": "1412866"}, {"introduction": "理论与现实之间常常存在差距，在复杂的算法分析中，我们有时只能得到一个性能的上界（$O$）和下界（$\\Omega$），而非一个确切的紧界（$\\Theta$）。这个思想实验模拟了这一常见情景，挑战你基于已知的边界进行严谨的逻辑推理。它将加深你对这些符号真正含义的理解，并帮你理清关于性能界限的常见误区。[@problem_id:1412894]", "problem": "两名计算机科学专业的学生，Alice和Bob，正在分析一个特定算法关于其输入大小 $n$ 的最坏情况时间复杂度 $T(n)$。由于该算法的结构复杂，他们只能确定其性能的界限。\n\nAlice分析了该算法的递归调用并给出了其操作数的上界，得出结论：运行时间的增长速度不快于一个二次函数。她的正式结论是：\n$T(n) = O(n^2)$\n\nBob分析了一个特定的输入族，该输入族迫使算法执行大量工作。他证明了其性能的一个下界，得出结论：运行时间的增长速度至少与一个线性函数一样快。他的正式结论是：\n$T(n) = \\Omega(n)$\n\n基于他们两人无可争议的综合发现，他们和他们的朋友对该算法的真实时间复杂度可以推断出什么做出了几个陈述。\n\n- **陈述 I：** 该算法的时间复杂度必然是 $\\Theta(n^2)$。\n- **陈述 II：** 该算法的时间复杂度有可能是 $\\Theta(n)$。\n- **陈述 III：** 该算法的时间复杂度不可能是 $\\Theta(n^3)$。\n\n从Alice和Bob的综合发现中，可以逻辑上正确地推导出哪些陈述？\n\nA. 仅I\n\nB. 仅II和III\n\nC. 仅III\n\nD. 仅I和II\n\nE. 所有陈述都正确。", "solution": "我们得到了关于运行时间 $T(n)$ 的两个渐近界：\n1) Alice：$T(n)=O(n^{2})$。根据定义，存在常数 $c>0$ 和 $n_{0}\\in\\mathbb{N}$，使得对于所有 $n\\ge n_{0}$，\n$$\nT(n)\\le c\\,n^{2}.\n$$\n2) Bob：$T(n)=\\Omega(n)$。根据定义，存在常数 $c'>0$ 和 $n_{1}\\in\\mathbb{N}$，使得对于所有 $n\\ge n_{1}$，\n$$\nT(n)\\ge c'\\,n.\n$$\n结合起来，存在正常数 $c,c'$ 和 $N=\\max\\{n_{0},n_{1}\\}$，使得对于所有 $n\\ge N$，\n$$\nc'\\,n\\le T(n)\\le c\\,n^{2}.\n$$\n\n评估陈述 I：“该算法的时间复杂度必然是 $\\Theta(n^{2})$。” 这两个综合界限并不强制要求一个紧的二次界。一个与两个给定界限都一致的反例是 $T(n)=n^{3/2}$，对于该函数，对所有 $n\\ge 1$ 都有：\n$$\nn\\le n^{3/2}\\le n^{2},\n$$\n因此 $T(n)=\\Omega(n)$ 和 $T(n)=O(n^{2})$ 都成立，但 $T(n)\\neq\\Theta(n^{2})$ 且 $T(n)\\neq\\Theta(n)$。因此陈述 I 是错误的。\n\n评估陈述 II：“该算法的时间复杂度有可能是 $\\Theta(n)$。” 这个问题问的是可能性，而不是必然性。取 $T(n)=n$。那么 $T(n)=\\Theta(n)$，并且由于对所有 $n\\ge 1$ 都有 $n\\le n^{2}$，我们有 $T(n)=O(n^{2})$，并且显然有 $T(n)=\\Omega(n)$。因此给定的界限与 $\\Theta(n)$ 是相容的，所以陈述 II 是正确的。\n\n评估陈述 III：“该算法的时间复杂度不可能是 $\\Theta(n^{3})$。” 假设 $T(n)=\\Theta(n^{3})$ 以导出矛盾。那么存在 $a,b>0$ 和 $n_{2}\\in\\mathbb{N}$，使得对于所有 $n\\ge n_{2}$，\n$$\na\\,n^{3}\\le T(n)\\le b\\,n^{3}.\n$$\n如果同时 $T(n)=O(n^{2})$，则存在 $c>0$ 和 $n_{0}$，使得对于所有 $n\\ge n_{0}$，有 $T(n)\\le c\\,n^{2}$。对于 $n\\ge \\max\\{n_{0},n_{2}\\}$，我们会有\n$$\na\\,n^{3}\\le T(n)\\le c\\,n^{2}\\quad\\Rightarrow\\quad a\\,n\\le c,\n$$\n这对于无界的 $n$ 是不可能的。因此 $T(n)=\\Theta(n^{3})$ 与 $T(n)=O(n^{2})$ 相矛盾，所以是不可能的。陈述 III 是正确的。\n\n因此，正确的推论仅为陈述 II 和 III。", "answer": "$$\\boxed{B}$$", "id": "1412894"}]}