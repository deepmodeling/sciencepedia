{"hands_on_practices": [{"introduction": "这个练习是对角化论证的经典展示。我们从一个假设性的、包含了所有全体可计算函数的列表开始。我们的目标是利用这个列表本身，构造一个新的、同样也是全体可计算的函数，而这个新函数根据其定义，必然与列表中的任何一个函数都不同。这个实践以其最纯粹的形式，让你亲手操作对角化方法的核心技巧，即自我参照与矛盾构造。[@problem_id:1456293]", "problem": "设 $\\mathbb{N} = \\{1, 2, 3, \\ldots\\}$ 是自然数集。考虑一个有效枚举 $f_1, f_2, f_3, \\ldots$，该枚举是一个列表，包含所有从 $\\mathbb{N}$ 映射到 $\\mathbb{N}$ 的全可计算函数。一个函数是“全”函数 (total)，如果它对其定义域中的每个输入都有定义。一个函数是“可计算”的 (computable)，如果存在一个算法，对于任意给定的输入，该算法都能计算出其输出并保证停机。枚举是“有效”的 (effective)，意味着对于任意索引 $i$，我们都可以获取对应于函数 $f_i$ 的算法。\n\n我们的目标是构造一个新函数 $g: \\mathbb{N} \\to \\mathbb{N}$，该函数也必须是全函数和可计算的，但保证*不*在列表 $f_1, f_2, f_3, \\ldots$ 中。\n\n以下哪项关于 $g(i)$ 的提议定义成功构造了一个满足所有三个所需性质的函数：是全函数、是可计算的，并且与给定枚举中的每个函数 $f_j$ 都不同？请选择所有有效选项。\n\nA. $g(i) = f_i(i) + 1$\n\nB. $g(i) = f_i(i+1)$\n\nC. $g(i) = (f_i(i))^2 + 1$\n\nD. $g(i) = f_{i+1}(i)$\n\nE. $g(i) = \\begin{cases} 1 & \\text{若 } f_i(i) = 1 \\\\ f_i(i) - 1 & \\text{若 } f_i(i) > 1 \\end{cases}$", "solution": "我们给定了一个全可计算函数 $f_{i} : \\mathbb{N} \\to \\mathbb{N}$ 的有效枚举 $f_{1}, f_{2}, f_{3}, \\ldots$，其中对于每个 $i$，我们都可以获取并运行一个计算 $f_i$ 的程序。对于每个提议的 $g(i)$ 的定义，我们必须检查三个性质：\n- 全性 (Totality)：对于每个 $i \\in \\mathbb{N}$，$g(i)$ 都有定义且计算会停机。\n- 可计算性 (Computability)：存在一个算法可以为每个 $i$ 计算 $g(i)$。\n- 差异性 (Distinctness)：对于每个 $j \\in \\mathbb{N}$，作为函数 $g \\neq f_{j}$。保证这一点的标准方法是强制对于每个 $i$ 都有 $g(i) \\neq f_{i}(i)$，根据对角化论证，这意味着对于所有 $j$ 都有 $g \\neq f_{j}$。\n\n因为每个 $f_{i}$ 都是全可计算的，所以对于任何 $i$ 和在 $g(i)$ 内部使用的任何输入（如 $i$ 或 $i+1$），$f_{i}$ 都会停机并产生一个在 $\\mathbb{N}$ 中的值。因此，任何对这些值进行固定算术或有界情况转换得到的 $g$ 都是全函数和可计算的。这些选项之间的关键区别在于是否能保证 $g$ 与每个 $f_{j}$ 都不同。\n\n逐一分析每个选项：\n\nA. $g(i) = f_{i}(i) + 1$。\n- 全性：对于每个 $i$，$f_{i}(i)$ 停机并且结果在 $\\mathbb{N}$ 中，所以 $g(i)$ 有定义。\n- 可计算性：给定 $i$，计算 $f_{i}(i)$ 并加 $1$。\n- 差异性：对于每个 $i$，$g(i) \\neq f_{i}(i)$ 因为 $f_{i}(i) + 1 \\neq f_{i}(i)$。因此对于每个 $i$ 都有 $g \\neq f_{i}$，所以 $g$ 不等于列表中的任何函数。这是标准的对角化方法。\n\n因此选项A成功。\n\nB. $g(i) = f_{i}(i+1)$。\n- 全性：对于每个 $i$，$f_{i}(i+1)$ 会停机，因为 $f_i$ 是全函数。\n- 可计算性：给定 $i$，计算 $f_{i}(i+1)$。\n- 差异性：没有保证的索引使得 $g$ 必须与给定的 $f_{j}$ 不同。特别是对于 $j=i$，有可能 $f_{i}(i+1) = f_{i}(i)$（例如，如果 $f_i$ 是常数函数），所以我们没有强制 $g(i) \\neq f_{i}(i)$。更一般地，由于 $g$ 是一个全可计算函数，而列表包含了所有全可计算函数，所以 $g = f_{k}$ 对于某个 $k$ 是可能的。因此，这个定义不能保证 $g$ 与每个 $f_j$ 都不同。\n\n因此选项B未能保证差异性。\n\nC. $g(i) = (f_{i}(i))^{2} + 1$。\n- 全性：对于每个 $i$，$f_{i}(i)$ 停机且结果在 $\\mathbb{N}$ 中，所以 $(f_{i}(i))^{2} + 1$ 在 $\\mathbb{N}$ 中有定义。\n- 可计算性：给定 $i$，计算 $f_{i}(i)$，将其平方，然后加 $1$。\n- 差异性：对于任意整数 $n$，方程 $n^{2} + 1 = n$ 无解（因为 $n^{2} - n + 1 = 0$ 的判别式为负），所以对于所有 $i$ 都有 $g(i) \\neq f_{i}(i)$。因此对于每个 $i$ 都有 $g \\neq f_{i}$，保证了 $g$ 不在列表中。\n\n因此选项C成功。\n\nD. $g(i) = f_{i+1}(i)$。\n- 全性：对于每个 $i$，$f_{i+1}(i)$ 会停机，因为 $f_{i+1}$ 是全函数。\n- 可计算性：给定 $i$，计算 $f_{i+1}(i)$。\n- 差异性：对于 $j = i+1$，我们有 $g(i) = f_{i+1}(i)$，所以在特定输入 $i$ 处，$g$ 和 $f_{i+1}$ 的输出是相等的。在任何固定坐标上，都没有与任何固定的 $f_j$ 强制产生差异，因此没有得到对角线矛盾。因此，不能保证 $g$ 与每个 $f_j$ 都不同。\n\n因此选项D未能保证差异性。\n\nE.\n$$\ng(i) = \n\\begin{cases}\n1 & \\text{若 } f_{i}(i) = 1 \\\\\nf_{i}(i) - 1 & \\text{若 } f_{i}(i) > 1\n\\end{cases}\n$$\n- 全性：对于每个 $i$，$f_{i}(i)$ 停机且结果在 $\\mathbb{N} = \\{1,2,3,\\ldots\\}$ 中，所以要么 $f_{i}(i)=1$ 要么 $f_{i}(i)>1$，并且 $g(i)$ 在 $\\mathbb{N}$ 中有定义。\n- 可计算性：给定 $i$，计算 $f_{i}(i)$ 并应用分情况规则。\n- 差异性：如果 $f_{i}(i) = 1$，那么 $g(i) = 1 = f_{i}(i)$，所以我们没有在索引 $i$ 处强制 $g(i) \\neq f_{i}(i)$。因此，没有保证的对角线差异，也不能确保 $g$ 与每个 $f_j$ 都不同。\n\n因此选项E未能保证差异性。\n\n结论：保证所有三个性质（全函数、可计算且可证明不等于任何 $f_j$）的定义是A和C。", "answer": "$$\\boxed{AC}$$", "id": "1456293"}, {"introduction": "对角化论证的力量并不仅限于图灵机。这个练习将展示其通用性，将相同的逻辑应用于一个更简单的计算模型：确定性有限自动机（DFAs）。通过定义一个基于“一个DFA的编码字符串是否被其自身所接受”的特殊“对角”语言，你将证明这个语言不可能是正则的。这突出表明，自我参照的矛盾法是计算理论中的一个基本证明原则。[@problem_id:1456281]", "problem": "在计算理论中，我们经常使用编码方案将自动机等计算模型表示为字符串。这使我们能够探究这些模型自身的属性。\n\n设字母表为 $\\Sigma = \\{0, 1\\}$。考虑一个固定的、合理的编码方案，其中任何确定性有限自动机 (DFA)——一种接受或拒绝给定符号串的有限状态机——都可以表示为一个唯一的字符串 $\\langle D \\rangle \\in \\Sigma^*$。令 $\\mathcal{D}$ 为所有此类有效编码的集合。对于任何字符串 $w \\in \\mathcal{D}$，令 $D_w$ 为 $w$ 所编码的 DFA，令 $L(D_w)$ 为 DFA $D_w$ 所接受的语言。\n\n现在，考虑如下定义的特殊“对角”语言 $L_{DIAG}$：\n$$L_{DIAG} = \\{ w \\in \\mathcal{D} \\mid w \\notin L(D_w) \\}$$\n该语言由所有不被其自身编码的 DFA 所接受的有效 DFA 编码组成。\n\n以下哪个陈述精确地描述了语言 $L_{DIAG}$？\n\nA. $L_{DIAG}$ 是一个正则语言。\n\nB. $L_{DIAG}$ 不是一个正则语言。\n\nC. $L_{DIAG}$ 的正则性是不可判定的。\n\nD. $L_{DIAG}$ 是一个空语言，因为不存在这样的字符串 $w$。\n\nE. $L_{DIAG}$ 是否是正则的取决于用于 DFA 的具体编码方案。", "solution": "我们将有效的 DFA 编码集合定义为 $\\mathcal{D} \\subseteq \\Sigma^{*}$，其中存在一个唯一的对应关系 $w \\mapsto D_{w}$，并将对角语言定义为\n$$\nL_{DIAG}=\\{w \\in \\mathcal{D} \\mid w \\notin L(D_{w})\\}.\n$$\n我们用反证法证明 $L_{DIAG}$ 不是正则的。\n\n假设 $L_{DIAG}$ 是正则的。那么存在一个 DFA，称之为 $D^{*}$，使得\n$$\nL(D^{*})=L_{DIAG}.\n$$\n令 $w^{*}$ 为 $D^{*}$ 的唯一编码，因此根据编码方案的定义，有 $D_{w^{*}}=D^{*}$。考虑 $w^{*}$ 的隶属关系。\n\n根据 $L_{DIAG}$ 的定义，\n$$\nw^{*} \\in L_{DIAG} \\iff w^{*} \\notin L(D_{w^{*}}).\n$$\n由于 $D_{w^{*}}=D^{*}$，这可以重写为\n$$\nw^{*} \\in L_{DIAG} \\iff w^{*} \\notin L(D^{*}).\n$$\n但我们又有 $L(D^{*})=L_{DIAG}$，因此\n$$\nw^{*} \\in L(D^{*}) \\iff w^{*} \\in L_{DIAG}.\n$$\n结合这两个等价关系可得出\n$$\nw^{*} \\in L(D^{*}) \\iff w^{*} \\notin L(D^{*}),\n$$\n一个矛盾。因此，没有 DFA 能够识别 $L_{DIAG}$，故 $L_{DIAG}$ 不是正则的。\n\n为了排除其他选项：$L_{DIAG}$ 不是空集，因为如果 $D_{\\text{rej}}$ 是一个拒绝所有输入的 DFA，而 $w_{\\text{rej}}$ 是其编码，那么 $w_{\\text{rej}} \\notin L(D_{w_{\\text{rej}}})$，所以 $w_{\\text{rej}} \\in L_{DIAG}$。这个论证与具体的、合理的、唯一的编码方案无关，因为它只用到了 $D^{*}$ 的自我编码 $w^{*}$ 的存在性。因此，正确的描述是 $L_{DIAG}$ 不是一个正则语言。", "answer": "$$\\boxed{B}$$", "id": "1456281"}, {"introduction": "对角化是建立复杂性等级制度的关键工具。最后的这个实践将我们从可计算性理论带入复杂性理论，要求你构造一个语言，它属于一个复杂性类 $DTIME(n^2)$，但不属于另一个更小的类 $\\mathcal{C}_{linear}$。这是时间层次定理的一个简化版本，它展示了对角化如何被用来证明“拥有更多计算时间确实能解决更多问题”这一基本结论。[@problem_id:1456284]", "problem": "在计算复杂性理论的研究中，对角论证法是一种用于分离复杂性类的强大证明技巧。本问题要求您应用对角论证法的核心逻辑来识别一个具有特定属性的语言。\n\n您需要使用以下标准假设：\n1.  对于确定性图灵机 (TM)，存在一个固定的、合理的二进制编码方案。一个图灵机 $M$ 的二进制字符串编码表示为 $\\langle M \\rangle$。我们假设可以在多项式时间内测试任何二进制字符串，以确定它是否为图灵机的有效编码。\n2.  存在一台通用图灵机 (UTM)，能够模拟任何给定的图灵机 $M$ 在任何给定输入 $w$ 上的运行。这种模拟的开销是，在 UTM 上模拟 $M$ 的 $T$ 步至多需要 $k \\cdot T \\log T$ 步，其中 $k$ 是一个通用常数。\n3.  对于一个函数 $f: \\mathbb{N} \\to \\mathbb{N}$，$DTIME(f(n))$ 是所有可由确定性图灵机在至多 $c \\cdot f(|w|)$ 步内判定的语言的集合，其中 $c$ 是某个正常数，$w$ 是任意输入。\n4.  令 $\\mathcal{C}_{linear}$ 为对应于线性时间的复杂性类，定义为 $\\mathcal{C}_{linear} = \\bigcup_{d \\in \\mathbb{N}, d>0} DTIME(d \\cdot n)$。\n\n您的任务是确定下列哪个语言定义描述了一个语言 $L$，该语言**同时**满足以下两个条件：\n1.  $L \\in DTIME(n^2)$\n2.  $L \\notin \\mathcal{C}_{linear}$\n\n假设如果一个字符串 $w$ 不是某个图灵机 $M$ 的有效编码 $\\langle M \\rangle$，那么 $w$ 不属于下面定义的任何语言。\n\n下列哪一项定义了这样一个语言 $L$？\n\nA. $L = \\{w \\mid w = \\langle M \\rangle \\text{，且图灵机 } M \\text{ 在 } |w| \\text{ 步内接受输入 } w \\text{。}\\}$\n\nB. $L = \\{w \\mid w = \\langle M \\rangle \\text{，且图灵机 } M \\text{ 不在 } |w| \\text{ 步内接受输入 } w \\text{。}\\}$\n\nC. $L = \\{w \\mid w = \\langle M \\rangle \\text{，且图灵机 } M \\text{ 不在 } |w|^{1.5} \\text{ 步内接受输入 } w \\text{。}\\}$\n\nD. $L = \\{w \\mid w = \\langle M \\rangle \\text{，且图灵机 } M \\text{ 不接受输入 } w \\text{（没有时间限制）。}\\}$\n\nE. $L = \\{w \\mid w = \\langle M \\rangle \\text{，且图灵机 } M \\text{ 不在 } |w|^3 \\text{ 步内接受输入 } w \\text{。}\\}$", "solution": "我们分析每个候选选项，并用对角论证法找出一个可在二次时间内判定但不能在线性时间内判定的语言。在整个分析过程中，设输入长度为 $n = |w|$，并设 $k>0$ 为来自 UTM 模拟开销的通用常数：模拟一个图灵机的 $T$ 步至多需要 $k T \\log T$ 步。\n\n关键的对角论证模板。对于一个阈值函数 $t(n)$，考虑\n$$\nL_{t} \\;=\\; \\{\\, \\langle M \\rangle \\mid \\text{图灵机 } M \\text{ 不在 } t(n) \\text{ 步内接受 } \\langle M \\rangle \\,\\}。\n$$\n该模板有两个有用的属性：\n- 可判定性，其时间大致为模拟 $t(n)$ 步所需的时间：一个判定机可以模拟 $M$ 在输入 $\\langle M \\rangle$ 上运行至多 $t(n)$ 步，并且当且仅当在此界限内没有发生接受时接受。在给定的 UTM 上，这至多花费 $k\\,t(n)\\,\\log t(n)$ 步。对于亚二次的 $t(n)$，这属于 $DTIME(n^{2})$，因为存在一个常数 $c$ 使得对于所有 $n$ 都有 $k\\,t(n)\\,\\log t(n) \\leq c\\,n^{2}$（可调整 $c$ 以覆盖有限个较小的 $n$）。\n- 与线性时间的分离：如果 $t(n)$ 最终支配（dominate）每个线性函数 $d n$（即，对于所有 $d>0$，存在一个 $N$，使得对于所有 $n \\geq N$ 都有 $d n \\leq t(n)$），那么 $L_{t} \\notin \\mathcal{C}_{linear}$。实际上，假设存在某个 $d>0$，通过一个判定机 $N$ 使得 $L_{t} \\in DTIME(d n)$。对于足够大的 $n$ 和输入 $w=\\langle N \\rangle$（其中 $|w|=n$），我们有 $d n \\leq t(n)$，因此 $N$ 在输入 $w$ 上会在 $t(n)$ 步内停机。根据 $L_{t}$ 的定义，$w \\in L_{t}$ 当且仅当 $N$ 不在 $t(n)$ 步内接受 $w$，这等价于 $N$ 根本不接受 $w$。因此 $N(w)=1$ 当且仅当 $N(w)=0$，这是一个矛盾。故对于每个 $d>0$ 都有 $L_{t} \\notin DTIME(d n)$，所以 $L_{t} \\notin \\mathcal{C}_{linear}$。\n\n现在来评估各个选项：\n\nA. 阈值 $t(n)=n$ 且使用接受条件而非对角线否定。直接的判定机模拟 $n$ 步并在发生接受时接受，至多花费 $k n \\log n$ 步，所以 $L \\in DTIME(n \\log n) \\subseteq DTIME(n^{2})$。然而，上面排除所有线性时间的对角论证法要求使用否定和一个对所有 $d$ 都严格支配 $d n$ 的阈值，而 $t(n)=n$ 不满足此条件。因此选项 A 不能保证分离 $L \\notin \\mathcal{C}_{linear}$。\n\nB. 阈值 $t(n)=n$ 且使用对角线否定。通过模拟 $n$ 步来判定 $L$ 至多花费 $k n \\log n$ 步，所以 $L \\in DTIME(n \\log n) \\subseteq DTIME(n^{2})$。但是对于任意常数 $d>0$，$t(n)=n$ 并不最终支配 $d n$。因此，针对所有线性时间界限的标准对角线矛盾论证并不成立，我们在给定的设定下不能断定 $L \\notin \\mathcal{C}_{linear}$。\n\nC. 阈值 $t(n)=n^{1.5}$ 且使用对角线否定。定义\n$$\nL_{C} \\;=\\; \\{\\; \\langle M \\rangle \\mid \\text{图灵机 } M \\text{ 不在 } n^{1.5} \\text{ 步内接受 } \\langle M \\rangle \\;\\}.\n$$\n$DTIME(n^{2})$ 的成员资格：通过模拟 $M$ 在输入 $\\langle M \\rangle$ 上运行至多 $n^{1.5}$ 步，并在该界限内未发生接受时接受，来判定 $L_{C}$。UTM 的开销产生了一个至多为\n$$\nk\\,n^{1.5}\\,\\log(n^{1.5}) = \\frac{3}{2}k\\,n^{1.5}\\,\\log n \\leq c\\,n^{2}\n$$\n的运行时间。对于一个合适的常数 $c>0$，此不等式成立，因为当 $n \\to \\infty$ 时，$\\frac{n^{1.5}\\log n}{n^{2}}=\\frac{\\log n}{n^{0.5}} \\to 0$，所以在调整 $c$ 以覆盖有限多个较小的输入后，存在一个全局界。因此 $L_{C} \\in DTIME(n^{2})$。\n\n不在线性时间内：假设 $L_{C} \\in DTIME(d n)$，其中 $d>0$，判定机为 $N$，以此推导矛盾。对于足够大的 $n$，$d n \\leq n^{1.5}$。令 $w=\\langle N \\rangle$ 且 $|w|=n$。那么 $N$ 在输入 $w$ 上会在 $n^{1.5}$ 步内停机，所以根据 $L_{C}$ 的定义，\n$$\nw \\in L_{C} \\;\\;\\Longleftrightarrow\\;\\; N \\text{ 不在 } n^{1.5} \\text{ 步内接受 } w\n\\;\\;\\Longleftrightarrow\\;\\; N \\text{ 不接受 } w.\n$$\n但 $N$ 判定 $L_{C}$，所以 $N(w)=1$ 当且仅当 $w \\in L_{C}$，而这又当且仅当 $N(w)=0$，这是一个矛盾。因此 $L_{C} \\notin \\mathcal{C}_{linear}$。\n\n因此，选项 C 满足两个所需条件。\n\nD. 没有时间界限（“不接受（没有时间限制）”）是自接受问题的补集，通过标准的对角论证法可知是不可判定的，所以它不属于 $DTIME(n^{2})$。\n\nE. 阈值 $t(n)=n^{3}$ 且使用对角线否定。基于直接模拟的判定机需要的时间至多为 $k n^{3} \\log n$，这是超二次的，所以这里没有证明 $L \\in DTIME(n^{2})$；因此 E 不满足所述的条件 1。\n\n结论：只有选项 C 定义了一个通过带有超线性时间截断的标准对角论证法可证明其属于 $DTIME(n^{2})$ 且不属于 $\\mathcal{C}_{linear}$ 的语言。", "answer": "$$\\boxed{C}$$", "id": "1456284"}]}