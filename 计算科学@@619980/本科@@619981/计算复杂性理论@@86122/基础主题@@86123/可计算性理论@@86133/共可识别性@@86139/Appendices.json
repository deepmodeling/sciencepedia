{"hands_on_practices": [{"introduction": "让我们从一个关于图灵机（TM）物理行为的直观问题开始。这个练习 [@problem_id:1416140] 要求我们判断一个语言的计算特性，该语言由所有在空输入上运行时其读写头从不向左越过起点的图灵机组成。这个实践旨在帮助你理解，一个描述“永不”发生某种特定行为的属性（一个全局性的约束）通常如何与共-可识别性 (co-recognizability) 相关联。", "problem": "在计算理论中，我们经常分析与图灵机 (TM) 行为相关的语言的性质。令 $\\langle M \\rangle$ 表示图灵机 $M$ 的字符串编码。图灵机的纸带在两个方向上都是无限的，但计算从一个特定的指定起始单元格开始。\n\n我们定义语言 $L_{NML}$ 为所有满足特定条件的图灵机编码 $\\langle M \\rangle$ 的集合：当图灵机 $M$ 以空字符串 $\\epsilon$ 作为输入运行时，它从不将其读写头移动到其起始单元格左侧的单元格。\n\n回顾一下可计算性理论中的以下标准定义：\n- 如果存在一台图灵机，对所有输入都停机，接受语言中的字符串并拒绝不在语言中的字符串，则该语言是**可判定的**。\n- 如果存在一台图灵机，对语言中的所有字符串都停机并接受，但对于不在语言中的字符串，它可能停机并拒绝，也可能无限循环，则该语言是**可识别的**（或图灵可识别的）。\n- 如果一个语言的补集是可识别的，则该语言是**共-可识别的**。\n\n根据这些定义，以下哪个陈述正确地分类了语言 $L_{NML}$？\n\nA. $L_{NML}$ 是可判定的。\n\nB. $L_{NML}$ 是可识别的但不是共-可识别的。\n\nC. $L_{NML}$ 是共-可识别的但不是可判定的。\n\nD. $L_{NML}$ 既不是可识别的也不是共-可识别的。", "solution": "假设起始纸带单元格的索引为 $0$，其右侧的单元格用正整数索引，其左侧的单元格用负整数索引。定义\n$$\nL_{NML}=\\{\\langle M\\rangle:\\text{ 在 }\\epsilon\\text{ 上运行时，}M\\text{ 的读写头从不访问索引 }<0\\text{ 的任何单元格}\\}。\n$$\n\n首先，证明 $\\overline{L_{NML}}$ 是可识别的。构造一台图灵机 $R$，其在输入为 $\\langle M\\rangle$ 时，逐步模拟 $M$ 在 $\\epsilon$ 上的运行，同时维护一个整数计数器 $p$ 来记录模拟的读写头相对于起始单元格的位置，并初始化为 $p=0$。每次模拟的右移使 $p\\leftarrow p+1$，每次模拟的左移使 $p\\leftarrow p-1$。如果在任何步骤中 $p=-1$，$R$ 就接受。如果模拟运行在从未使得 $p=-1$ 的情况下停机，$R$ 就拒绝；如果模拟运行永不停机且从未使得 $p=-1$，那么 $R$ 将永远运行。因此 $R$ 识别 $\\overline{L_{NML}}$，所以 $L_{NML}$ 是共-可识别的。\n\n其次，通过从停机问题进行映射归约来证明 $L_{NML}$ 是不可判定的。令\n$$\nH=\\{\\langle M,w\\rangle: M\\text{ 在输入 }w\\text{ 上停机}\\}。\n$$\n给定 $\\langle M,w\\rangle$，有效地构造一台图灵机 $M'$（无输入），其操作如下：\n- $M'$ 将 $w$ 硬编码在其有限控制器中，并将 $w$ 写到起始单元格右侧的纸带上（在此设置过程中从不向索引 $0$ 的左侧移动）。\n- 然后 $M'$ 仅使用索引 $\\geq 0$ 的单元格来模拟 $M$ 在输入 $w$ 上的运行，这样在模拟期间 $M'$ 的物理读写头从不移动到索引 $0$ 的左侧。\n- 如果 $M$ 在 $w$ 上的模拟停机，$M'$ 会将其读写头移动到索引 $0$（它已经保持在 $\\geq 0$ 的位置），然后执行一次向左移动到索引 $-1$ 的操作并停机。\n\n根据构造，如果 $\\langle M,w\\rangle\\in H$，那么 $M'$ 最终会移动到起始单元格的左侧，因此 $\\langle M'\\rangle\\in\\overline{L_{NML}}$。如果 $\\langle M,w\\rangle\\notin H$，那么 $M'$ 永远不会移动到起始单元格的左侧，因此 $\\langle M'\\rangle\\in L_{NML}$。因此，我们有一个可计算函数 $f$，满足\n$$\n\\langle M,w\\rangle\\in H\\iff f(\\langle M,w\\rangle)=\\langle M'\\rangle\\in\\overline{L_{NML}},\n$$\n也就是说，$H\\leq_{m}\\overline{L_{NML}}$。因为 $H$ 是不可判定的，所以 $\\overline{L_{NML}}$ 是不可判定的，因此 $L_{NML}$ 也是不可判定的。\n\n最后，因为 $\\overline{L_{NML}}$ 是可识别的且 $L_{NML}$ 是不可判定的，所以 $L_{NML}$ 不可能是可识别的。如果它是可识别的，那么 $L_{NML}$ 和 $\\overline{L_{NML}}$ 将都是可识别的，这意味着 $L_{NML}$ 是可判定的，这与之前的结论矛盾。\n\n因此，$L_{NML}$ 是共-可识别的但不是可判定的。", "answer": "$$\\boxed{C}$$", "id": "1416140"}, {"introduction": "在理解了图灵机的直接行为后，我们现在将注意力转向一个更抽象的层面：图灵机所接受的语言的性质。这个练习 [@problem_id:1416122] 要求我们分析那些其接受的 *每个* 字符串都包含特定子串'101'的图灵机所构成的语言。通过这个例子，你将学会如何处理关于语言 $L(M)$ 的全称量化性质，并看到其否命题——存在一个反例——是如何通过识别器来验证的，这构成了证明其共-可识别性的关键。", "problem": "在计算理论中，图灵机 (Turing Machine, TM) 是一种定义了抽象机的计算数学模型。我们可以将任意一台图灵机 $M$ 表示为一个唯一的字符串，我们将其记为 $\\langle M \\rangle$。图灵机 $M$ 所接受的所有字符串的集合称为 $M$ 的语言，记为 $L(M)$。\n\n考虑一个在图灵机编码的字母表上定义的语言 $L_{SUB}$。$L_{SUB}$ 是所有满足特定属性的图灵机编码 $\\langle M \\rangle$ 的集合：对于 $M$ 接受的每一个字符串 $w$（即，对于每一个 $w \\in L(M)$），字符串 '101' 都必须是 $w$ 的一个子串。\n\n如果存在一台图灵机，它会对语言中的任何字符串停机并接受，而对不在此语言中的任何字符串拒绝或循环，那么该语言被称为*图灵可识别的* (Turing-recognizable)。如果一个语言的补集是图灵可识别的，那么该语言被称为*共-图灵可识别的* (co-Turing-recognizable)。如果一个语言既是图灵可识别的又是共-图灵可识别的，那么它被称为*可判定的* (decidable)。\n\n下列哪个陈述正确描述了语言 $L_{SUB}$ 的性质？\n\nA. $L_{SUB}$ 是可判定的。\n\nB. $L_{SUB}$ 是图灵可识别的，但不是可判定的。\n\nC. $L_{SUB}$ 是共-图灵可识别的，但不是可判定的。\n\nD. $L_{SUB}$ 既不是图灵可识别的，也不是共-图灵可识别的。", "solution": "令 $\\Sigma$ 表示图灵机的输入字母表，令 $S \\subseteq \\Sigma^{*}$ 是包含子串 101 的所有字符串构成的正则语言。定义 $R = \\Sigma^{*} \\setminus S$，即不含 101 作为子串的所有字符串构成的正则语言。根据定义，\n$$\n\\langle M \\rangle \\in L_{SUB} \\iff L(M) \\subseteq S \\iff L(M) \\cap R = \\varnothing.\n$$\n\n首先，证明 $L_{SUB}$ 是共-图灵可识别的。它的补集是\n$$\n\\overline{L_{SUB}} = \\{ \\langle M \\rangle \\mid \\exists w \\in R \\text{ such that } M \\text{ accepts } w \\}.\n$$\n为了识别 $\\overline{L_{SUB}}$，我们构造一台图灵机 $N$，它在输入为 $\\langle M \\rangle$ 时，枚举所有 $w \\in R$（这是可能的，因为 $R$ 是正则的且可判定的），并对所有这些 $w$ 进行 $M$ 的交叉模拟（dovetailing）。如果任何一个模拟接受，则 $N$ 接受。因此 $\\overline{L_{SUB}}$ 是图灵可识别的，所以 $L_{SUB}$ 是共-图灵可识别的。\n\n接下来，证明 $L_{SUB}$ 是不可判定的。通过一个多一归约，将经典的不可判定语言\n$$\nE_{TM} = \\{ \\langle M \\rangle \\mid L(M) = \\varnothing \\}\n$$\n归约到 $L_{SUB}$。由于 $R$ 是一个无限的正则语言（因此是可判定的），存在一个可计算双射 $b : \\Sigma^{*} \\to R$ 及其可计算的逆 $b^{-1} : R \\to \\Sigma^{*}$（例如，通过有效地枚举 $R$ 并将其与 $\\Sigma^{*}$ 的标准枚举配对）。\n\n定义一个可计算变换 $f$，它将 $\\langle M \\rangle$ 映射到一台图灵机 $M'$ 的编码 $\\langle M' \\rangle$。$M'$ 对输入 $x$ 的操作如下：\n1) 判断是否有 $x \\in R$。如果 $x \\notin R$，则拒绝。\n2) 如果 $x \\in R$，计算 $y = b^{-1}(x)$ 并在输入 $y$ 上模拟 $M$。如果 $M$ 接受 $y$，则接受 $x$；否则，执行 $M$ 在 $y$ 上的操作。\n\n根据构造，\n$$\nL(M') \\cap R = \\{ x \\in R \\mid M \\text{ accepts } b^{-1}(x) \\} = b(L(M)).\n$$\n因此，$L(M') \\cap R = \\varnothing$ 当且仅当 $L(M) = \\varnothing$。使用早先的等价关系 $L(M') \\subseteq S \\iff L(M') \\cap R = \\varnothing$，我们得到\n$$\n\\langle M \\rangle \\in E_{TM} \\iff \\langle M' \\rangle \\in L_{SUB}.\n$$\n因此 $E_{TM} \\leq_{m} L_{SUB}$，所以 $L_{SUB}$ 是不可判定的。\n\n最后，$L_{SUB}$ 不是图灵可识别的。如果它是图灵可识别的，那么由于我们已经证明了它是共-图灵可识别的，它就将是可判定的，这与不可判定性相矛盾。因此，$L_{SUB}$ 是共-图灵可识别的，但不是可判定的，也不是图灵可识别的。\n\n正确选项是 C。", "answer": "$$\\boxed{C}$$", "id": "1416122"}, {"introduction": "掌握了具体语言的分类后，我们来探讨一个更宏观的问题：共-可识别语言这个类别本身的结构特性是什么？这个练习 [@problem_id:1416181] 探索了共-可识别语言类在与正则语言进行连接（concatenation）运算下的封闭性。解决这个问题不仅能加深你对共-可识别性的理解，还能让你练习构建更复杂的非确定性模拟算法，例如在分解输入字符串并交错执行计算时所用的“配搭法”（dovetailing）技巧。", "problem": "在计算理论中，我们研究不同类别的语言及其性质。我们先建立一些基本定义。字母表 $\\Sigma$ 是一个非空的符号有限集。$\\Sigma$ 上的字符串是来自 $\\Sigma$ 的符号的有限序列，而语言是字符串的集合。$\\Sigma$ 上所有可能字符串的集合表示为 $\\Sigma^*$。\n\n如果存在一台图灵机（TM），对于任何输入字符串 $w \\in L$，该图灵机都会停机并进入接受状态，那么语言 $L$ 就被称为是**可识别的**（recognizable）。对于任何字符串 $w \\notin L$，该图灵机要么停机并拒绝，要么永远运行。\n\n如果一个语言 $L$ 的补集 $\\overline{L} = \\Sigma^* \\setminus L$ 是可识别的，那么该语言 $L$ 就是**共-可识别的**（co-recognizable）。\n\n如果一个语言 $R$ 可以被确定性有限自动机（DFA）接受，那么它就是**正则的**（regular）。\n\n两个语言 $L_1$ 和 $L_2$ 的**连接**（concatenation）定义为语言 $L_1 L_2 = \\{ w_1 w_2 \\mid w_1 \\in L_1, w_2 \\in L_2 \\}$。如果将某个运算应用于某一语言类中的任何语言，其结果仍然是该类中的一个语言，我们就说该语言类在此运算下是封闭的。当考虑与特定类别的语言（如正则语言）进行连接时，我们区分左连接（$RL$）和右连接（$LR$）。\n\n考虑以下关于共-可识别语言类的封闭性的陈述。\n\n以下哪个陈述是正确的？\n\nA. 共-可识别语言类在连接运算下是封闭的。\n\nB. 共-可识别语言类在与正则语言的左连接下是封闭的，但在与正则语言的右连接下不是封闭的。\n\nC. 共-可识别语言类在与正则语言的右连接下是封闭的，但在与正则语言的左连接下不是封闭的。\n\nD. 共-可识别语言类在与正则语言的左连接和右连接下都是封闭的。\n\nE. 共-可识别语言类在与正则语言的左连接和右连接下都不是封闭的。", "solution": "我们回顾一下定义。一个语言 $L$ 是可识别的，如果存在一台图灵机 $M$，使得对于所有 $w \\in L$，$M$ 停机并接受；对于所有 $w \\notin L$，$M$ 要么停机并拒绝，要么永远运行。一个语言是共-可识别的，如果它的补集是可识别的。一个语言 $R$ 是正则的，如果一个 DFA 接受它。连接定义为 $L_{1}L_{2}=\\{w_{1}w_{2} \\mid w_{1}\\in L_{1}, w_{2}\\in L_{2}\\}$。\n\n我们分析共-可识别语言类对于与正则语言进行左连接和右连接的封闭性。\n\n固定一个共-可识别语言 $L$，因此 $\\overline{L}$ 是可识别的，并固定一个由 DFA $A_{R}$ 给出的正则语言 $R$。我们证明：\n1) $RL$ 是共-可识别的。我们只需为 $\\overline{RL}$ 构建一个识别器。对于输入 $w$，计算所有分割位置 $i$ 的有限集 $S$，使得前缀 $w[0:i]$ 属于 $R$。这是可行的，因为我们可以在 $w$ 的所有前缀上运行 $A_{R}$，并收集那些使 $A_{R}$ 处于接受状态的 $i$。对于每个 $i \\in S$，令 $y_{i}$ 为后缀 $w[i:|w|]$。由于 $\\overline{L}$ 是可识别的，设 $M_{\\overline{L}}$ 是 $\\overline{L}$ 的一个识别器。现在对所有 $i \\in S$ 对应的有限多个 $y_{i}$，交叉模拟（即，交错执行）$M_{\\overline{L}}$ 的运行，并且当且仅当每个模拟都停机并接受时，才接受 $w$。正确性证明：\n- 如果 $w \\notin RL$，那么对于每一个前缀在 $R$ 中的分割，其对应的后缀都不在 $L$ 中，即对于所有 $i \\in S$ 都有 $y_{i} \\in \\overline{L}$。因此，$M_{\\overline{L}}$ 的每次运行都会接受，并且由于 $S$ 是有限的，我们的机器在有限步后会接受 $w$。因此 $w \\in \\overline{RL}$ 意味着被接受。\n- 如果 $w \\in RL$，那么存在一个分割 $i^{*} \\in S$，其后缀 $y_{i^{*}} \\in L$。对于那个 $y_{i^{*}}$，$M_{\\overline{L}}$ 不会接受（它要么拒绝，要么永远运行）。因此，我们的机器永远不会达到所有模拟都已接受的状态，所以它永远不会接受 $w$。因此 $w \\notin \\overline{RL}$ 意味着不被接受。这证明了 $\\overline{RL}$ 是可识别的，因此 $RL$ 是共-可识别的。\n\n2) $LR$ 是共-可识别的。同样，我们只需为 $\\overline{LR}$ 构建一个识别器。对于输入 $w$，计算所有分割位置 $j$ 的有限集 $T$，使得后缀 $w[j:|w|]$ 属于 $R$。这可以通过在 $w$ 的每个后缀上运行 $A_{R}$ 来完成（等价地，通过在 $w$ 的逆串上运行 $R$ 的逆语言的 DFA 来找到可接受的分割点；无论哪种方式，由于 $w$ 是有限的，我们可以对每个 $j$ 决定 $w[j:|w|] \\in R$ 是否成立）。对于每个 $j \\in T$，令 $x_{j}$ 为前缀 $w[0:j]$。以交叉模拟的方式在所有 $j \\in T$ 对应的有限多个 $x_{j}$ 上运行 $\\overline{L}$ 的识别器 $M_{\\overline{L}}$，并且当且仅当每个这样的运行都停机并接受时，才接受 $w$。正确性证明：\n- 如果 $w \\notin LR$，那么对于每一个后缀在 $R$ 中的分割，其前缀都不在 $L$ 中，即对于所有 $j \\in T$ 都有 $x_{j} \\in \\overline{L}$。因此，$M_{\\overline{L}}$ 的每次模拟都会接受，并且机器会接受 $w$。因此 $w \\in \\overline{LR}$ 意味着被接受。\n- 如果 $w \\in LR$，那么存在一个 $j^{*} \\in T$，其前缀 $x_{j^{*}} \\in L$。对于那个前缀，$M_{\\overline{L}}$ 不会接受，所以我们的机器永远不会接受 $w$。因此 $w \\notin \\overline{LR}$ 意味着不被接受。因此 $\\overline{LR}$ 是可识别的，且 $LR$ 是共-可识别的。\n\n结论：\n- 从以上两个构造可以看出，共-可识别语言类在与正则语言的左连接和右连接下都是封闭的。\n- 相比之下，共-可识别语言类在任意连接下是不封闭的（这是一个标准的非封闭性质；存在共-可识别语言 $L_{1}, L_{2}$ 使得 $L_{1}L_{2}$ 不是共-可识别的），因此，笼统地说连接运算是封闭的是错误的。\n\n因此，在给定的选项中，正确的陈述是共-可识别语言类在与正则语言的左连接和右连接下都是封闭的。", "answer": "$$\\boxed{D}$$", "id": "1416181"}]}