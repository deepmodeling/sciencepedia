{"hands_on_practices": [{"introduction": "RNA速度的核心在于一个描述RNA生命周期的动力学方程。为了深入理解这个方程的各个组成部分，我们从一个思想实验开始。在这个练习中，你将模拟一种药物抑制剪接过程的效果，从而直接观察剪接产生项（$\\beta u$）和降解项（$\\gamma s$）如何共同决定了RNA速度的最终方向和大小，让你能对基本方程 $v(t) = ds/dt = \\beta u(t) - \\gamma s(t)$ 建立起直观的认识。[@problem_id:2427354]", "problem": "考虑一个用于核糖核酸 (RNA) 转录、剪接和降解的双室动力学模型。令 $u(t)$ 表示在时间 $t$ 未剪接的RNA数量， $s(t)$ 表示已剪接的RNA数量。该系统由以下常微分方程 (ODEs) 建模：\n$$\\frac{du}{dt} = \\alpha - \\beta \\, u(t), \\quad \\frac{ds}{dt} = \\beta \\, u(t) - \\gamma \\, s(t).$$\n此处，$\\alpha$ 是转录速率（单位：分子/小时），$\\beta$ 是剪接速率（单位：每小时），$\\gamma$ 是已剪接RNA的降解速率（单位：每小时）。引入一种特异性抑制剪接体的药物，该药物完全阻断了 $u(t)$ 到 $s(t)$ 的转化；在这种药物条件下，由 $\\beta$ 控制的转化项被移除（而转录和已剪接RNA的降解保持不变）。将瞬时RNA速率定义为当前时刻的 $v(t) = \\frac{ds}{dt}$。\n\n给定参数值 $\\alpha$、$\\beta$、$\\gamma$（单位如上所述）以及在同一时刻 $t$ 观测到的数量 $u$ 和 $s$（单位：分子），计算：\n- 基线瞬时RNA速率 $v_{\\mathrm{normal}} = \\left.\\frac{ds}{dt}\\right|_{\\text{normal}}$，\n- 药物条件下的瞬时RNA速率 $v_{\\mathrm{inhib}} = \\left.\\frac{ds}{dt}\\right|_{\\text{drug}}$，\n- 变化量 $\\Delta v = v_{\\mathrm{inhib}} - v_{\\mathrm{normal}}$。\n\n将每个速率表示为以分子/小时为单位的小数。输出时，将每个值四舍五入到一位小数。\n\n使用以下由五个案例组成的测试套件，每个案例指定为 $(\\alpha,\\beta,\\gamma,u,s)$，所有参数使用上述单位，$u,s$ 的单位为分子：\n- 案例 A：$(\\alpha,\\beta,\\gamma,u,s) = (\\,50,\\,0.2,\\,0.05,\\,120,\\,800\\,)$。\n- 案例 B：$(\\alpha,\\beta,\\gamma,u,s) = (\\,10,\\,0.5,\\,0.1,\\,100,\\,0\\,)$。\n- 案例 C：$(\\alpha,\\beta,\\gamma,u,s) = (\\,10,\\,0.5,\\,0.1,\\,0,\\,1000\\,)$。\n- 案例 D：$(\\alpha,\\beta,\\gamma,u,s) = (\\,100,\\,1.0,\\,0.5,\\,100,\\,200\\,)$。\n- 案例 E：$(\\alpha,\\beta,\\gamma,u,s) = (\\,200,\\,0.05,\\,0.2,\\,4000,\\,500\\,)$。\n\n对于每个案例，您的程序必须计算三元组 $[\\,v_{\\mathrm{normal}}, v_{\\mathrm{inhib}}, \\Delta v\\,]$，其值为四舍五入到一位小数的浮点数，单位均为分子/小时。\n\n最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的、以逗号分隔的结果列表，列表中的每个元素本身是对应一个测试案例的、用方括号括起来的三元组，不含任何空格。例如：“[[x1,y1,z1],[x2,y2,z2],...]”，其中每个 $x_i,y_i,z_i$ 是案例 $i$ 经四舍五入后的小数值，单位为分子/小时。", "solution": "在尝试进行任何解答之前，将首先对问题进行严格的验证。\n\n### 第1步：提取已知信息\n问题提供了以下信息：\n- 一个RNA的双室动力学模型。\n- 变量：未剪接的RNA数量 $u(t)$ 和已剪接的RNA数量 $s(t)$。\n- 正常条件下的控制性常微分方程：\n$$\n\\frac{du}{dt} = \\alpha - \\beta \\, u(t)\n$$\n$$\n\\frac{ds}{dt} = \\beta \\, u(t) - \\gamma \\, s(t)\n$$\n- 参数：$\\alpha$ (转录速率，分子/小时)，$\\beta$ (剪接速率，1/小时)，$\\gamma$ (降解速率，1/小时)。\n- 药物条件：由 $\\beta$ 控制的项被移除。\n- 瞬时RNA速率的定义：$v(t) = \\frac{ds}{dt}$。\n-\n给定 $(\\alpha, \\beta, \\gamma, u, s)$ 需要计算的量：\n    1.  $v_{\\mathrm{normal}} = \\left.\\frac{ds}{dt}\\right|_{\\text{normal}}$\n    2.  $v_{\\mathrm{inhib}} = \\left.\\frac{ds}{dt}\\right|_{\\text{drug}}$\n    3.  $\\Delta v = v_{\\mathrm{inhib}} - v_{\\mathrm{normal}}$\n- 测试案例：\n    - 案例 A：$(\\alpha,\\beta,\\gamma,u,s) = (50, 0.2, 0.05, 120, 800)$\n    - 案例 B：$(\\alpha,\\beta,\\gamma,u,s) = (10, 0.5, 0.1, 100, 0)$\n    - 案例 C：$(\\alpha,\\beta,\\gamma,u,s) = (10, 0.5, 0.1, 0, 1000)$\n    - 案例 D：$(\\alpha,\\beta,\\gamma,u,s) = (100, 1.0, 0.5, 100, 200)$\n    - 案例 E：$(\\alpha,\\beta,\\gamma,u,s) = (200, 0.05, 0.2, 4000, 500)$\n\n### 第2步：使用提取的已知信息进行验证\n根据所需标准对问题进行评估。\n- **科学依据充分**：该动力学模型是计算生物学中用于RNA动力学研究的一个标准且广泛使用的简化模型，构成了RNA速率估计的基础。它在科学上是合理的。\n- **适定性**：计算所需的所有必要方程、参数和初始状态值 ($u$, $s$) 均已提供。目标定义明确，且每个测试案例都存在唯一、稳定的解。\n- **客观性**：问题使用了精确的数学形式和客观的语言进行陈述。没有主观或基于观点的论断。\n- **缺陷分析**：\n    1.  科学/事实不健全：无。\n    2.  无法形式化/不相关：无。问题是形式化的，并与计算生物学直接相关。\n    3.  不完整/矛盾的设置：无。所有必需信息都已提供且自洽。在数列中使用美元符号，例如 `$\\$50\\$`，是一种非常规的格式选择，但其作为数值的意图是明确的，不构成实质性缺陷。\n    4.  不切实际/不可行：无。参数和数量值均在物理和生物学上合理的范围内。\n    5.  不适定/结构不良：无。问题结构清晰，要求直接应用已定义的公式。\n    6.  超出科学可验证性范围：无。计算过程完全可验证。\n\n### 第3步：结论与行动\n问题**有效**。将推导解答。\n\n### 解答推导\n\n问题要求基于一个常微分方程组，计算两种条件下的RNA速率。\n\n**1. 基线RNA速率 ($v_{\\mathrm{normal}}$)**\n\n瞬时RNA速率定义为 $v(t) = \\frac{ds}{dt}$。在正常生理条件下，已剪接RNA $s(t)$ 的变化率由第二个微分方程给出：\n$$\nv_{\\mathrm{normal}} = \\left.\\frac{ds}{dt}\\right|_{\\text{normal}} = \\beta \\, u(t) - \\gamma \\, s(t)\n$$\n此计算使用所提供的瞬时数量 $u$ 和 $s$（在某个时间 $t$），以及参数 $\\beta$ 和 $\\gamma$。由于状态 $(u, s)$ 是已知的，因此计算瞬时速率不需要转录速率 $\\alpha$。\n\n**2. 药物条件下的RNA速率 ($v_{\\mathrm{inhib}}$)**\n\n在药物条件下，剪接体抑制剂阻断了未剪接RNA $u(t)$ 向已剪接RNA $s(t)$ 的转化。问题指出，这会移除“由 $\\beta$ 控制”的项。这意味着代表剪接速率的项 $\\beta u(t)$ 在系统中变为零。修改后关于 $s(t)$ 的常微分方程为：\n$$\n\\left.\\frac{ds}{dt}\\right|_{\\text{drug}} = 0 - \\gamma \\, s(t) = -\\gamma \\, s(t)\n$$\n因此，在存在抑制剂的情况下的瞬时速率为：\n$$\nv_{\\mathrm{inhib}} = -\\gamma \\, s(t)\n$$\n此计算仅依赖于降解速率 $\\gamma$ 和已剪接RNA的瞬时数量 $s$。\n\n**3. RNA速率的变化 ($\\Delta v$)**\n\n速率的变化定义为抑制后速率与正常速率之差：\n$$\n\\Delta v = v_{\\mathrm{inhib}} - v_{\\mathrm{normal}}\n$$\n代入上面推导出的表达式：\n$$\n\\Delta v = (-\\gamma \\, s(t)) - (\\beta \\, u(t) - \\gamma \\, s(t))\n$$\n简化表达式可得：\n$$\n\\Delta v = -\\gamma \\, s(t) - \\beta \\, u(t) + \\gamma \\, s(t)\n$$\n$$\n\\Delta v = -\\beta \\, u(t)\n$$\n这个结果是合乎逻辑的：已剪接RNA生成速率的变化量，恰好就是被药物抑制的剪接速率。\n\n**4. 测试案例计算**\n\n现在将推导出的公式应用于每个测试案例。所有结果的单位均为分子/小时，并将四舍五入到一位小数。\n\n**案例 A：** $(\\alpha, \\beta, \\gamma, u, s) = (50, 0.2, 0.05, 120, 800)$\n- $v_{\\mathrm{normal}} = (0.2)(120) - (0.05)(800) = 24.0 - 40.0 = -16.0$\n- $v_{\\mathrm{inhib}} = -(0.05)(800) = -40.0$\n- $\\Delta v = -40.0 - (-16.0) = -24.0$\n- 结果：$[-16.0, -40.0, -24.0]$\n\n**案例 B：** $(\\alpha, \\beta, \\gamma, u, s) = (10, 0.5, 0.1, 100, 0)$\n- $v_{\\mathrm{normal}} = (0.5)(100) - (0.1)(0) = 50.0 - 0.0 = 50.0$\n- $v_{\\mathrm{inhib}} = -(0.1)(0) = 0.0$\n- $\\Delta v = 0.0 - 50.0 = -50.0$\n- 结果：$[50.0, 0.0, -50.0]$\n\n**案例 C：** $(\\alpha, \\beta, \\gamma, u, s) = (10, 0.5, 0.1, 0, 1000)$\n- $v_{\\mathrm{normal}} = (0.5)(0) - (0.1)(1000) = 0.0 - 100.0 = -100.0$\n- $v_{\\mathrm{inhib}} = -(0.1)(1000) = -100.0$\n- $\\Delta v = -100.0 - (-100.0) = 0.0$\n- 结果：$[-100.0, -100.0, 0.0]$\n\n**案例 D：** $(\\alpha, \\beta, \\gamma, u, s) = (100, 1.0, 0.5, 100, 200)$\n- $v_{\\mathrm{normal}} = (1.0)(100) - (0.5)(200) = 100.0 - 100.0 = 0.0$\n- $v_{\\mathrm{inhib}} = -(0.5)(200) = -100.0$\n- $\\Delta v = -100.0 - 0.0 = -100.0$\n- 结果：$[0.0, -100.0, -100.0]$\n\n**案例 E：** $(\\alpha, \\beta, \\gamma, u, s) = (200, 0.05, 0.2, 4000, 500)$\n- $v_{\\mathrm{normal}} = (0.05)(4000) - (0.2)(500) = 200.0 - 100.0 = 100.0$\n- $v_{\\mathrm{inhib}} = -(0.2)(500) = -100.0$\n- $\\Delta v = -100.0 - 100.0 = -200.0$\n- 结果：$[100.0, -100.0, -200.0]$", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes RNA velocities for a series of test cases based on a two-compartment kinetic model.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (alpha, beta, gamma, u, s)\n    test_cases = [\n        (50, 0.2, 0.05, 120, 800),    # Case A\n        (10, 0.5, 0.1, 100, 0),        # Case B\n        (10, 0.5, 0.1, 0, 1000),      # Case C\n        (100, 1.0, 0.5, 100, 200),    # Case D\n        (200, 0.05, 0.2, 4000, 500),  # Case E\n    ]\n\n    all_results = []\n    for case in test_cases:\n        _alpha, beta, gamma, u, s = case\n\n        # 1. Calculate the baseline instantaneous RNA velocity (v_normal).\n        # v_normal = ds/dt = beta * u - gamma * s\n        v_normal = beta * u - gamma * s\n\n        # 2. Calculate the drug-condition instantaneous RNA velocity (v_inhib).\n        # The splicing term (beta * u) is removed.\n        # v_inhib = ds/dt = -gamma * s\n        v_inhib = -gamma * s\n\n        # 3. Calculate the change in velocity (delta_v).\n        # delta_v = v_inhib - v_normal\n        # This simplifies to -beta * u.\n        delta_v = v_inhib - v_normal\n\n        # Round each calculated value to one decimal place.\n        v_normal_r = round(v_normal, 1)\n        v_inhib_r = round(v_inhib, 1)\n        delta_v_r = round(delta_v, 1)\n\n        # Store the triplet of results for the current case.\n        all_results.append([v_normal_r, v_inhib_r, delta_v_r])\n\n    # Format the final output string according to the specified format.\n    # Example: [[x1,y1,z1],[x2,y2,z2],...]\n    # No spaces are allowed in the final output string.\n    result_strings = [f\"[{v},{i},{d}]\" for v, i, d in all_results]\n    final_output_string = f\"[{','.join(result_strings)}]\"\n    \n    # Print the final result to standard output.\n    print(final_output_string)\n\nsolve()\n```", "id": "2427354"}, {"introduction": "掌握了单个基因的动力学后，我们来看看RNA速度在真实生物学问题中的强大威力，即整合数千个基因在成百上千个细胞中的信息。这个练习模拟了一个真实的生物信息学分析流程，你将利用多个基因的速度值，结合一个简单的线性模型，来推断细胞分化的整体方向。这个过程将帮助你理解如何从微观的分子动力学数据中，提炼出关于细胞命运转变的宏观生物学洞见。[@problem_id:2941032]", "problem": "给定您一个简化的、基于原理的动力学框架，用于在一个包含混合祖细胞和早期分化细胞的小型合成单细胞数据集中，推断核糖核酸（RNA）速度以及分化的净方向。该模型源自于分子生物学中心法则以及转录剪接和降解的标准一级反应动力学。对于每个基因 $g$ 和细胞 $i$，令 $u_{ig}$ 表示未剪接的RNA计数，$s_{ig}$ 表示已剪接的RNA计数。动力学假设如下：\n- 转录以速率 $\\alpha_g$ 产生未剪接的RNA。\n- 剪接以速率 $\\beta_g$ 将未剪接的RNA转化为已剪接的RNA（对 $u_{ig}$ 是一级反应）。\n- 已剪接的RNA以速率 $\\gamma_g$ 降解（对 $s_{ig}$ 是一级反应）。\n\n在这些经过充分检验的假设下，细胞 $i$ 中基因 $g$ 的已剪接RNA的瞬时时间导数为\n$$\n\\frac{ds_{ig}}{dt} \\;=\\; \\beta_g\\,u_{ig} \\;-\\; \\gamma_g\\,s_{ig}.\n$$\n将基因层面的RNA速度定义为 $v_{ig} \\equiv \\beta_g\\,u_{ig} - \\gamma_g\\,s_{ig}$。为了沿一维嵌入（例如，伪时间）$t_i$（对于细胞 $i$）推断分化的净方向，将 $t$ 局部近似为已剪接表达的一阶线性函数，\n$$\nt_i \\;\\approx\\; a \\;+\\; \\sum_{g} w_g\\,s_{ig},\n$$\n其中 $a$ 是截距，$w_g$ 是回归系数。根据链式法则，\n$$\n\\frac{dt_i}{dt} \\;=\\; \\sum_{g} \\frac{\\partial t_i}{\\partial s_{ig}} \\,\\frac{ds_{ig}}{dt}\n\\;\\approx\\; \\sum_{g} w_g\\,v_{ig}.\n$$\n将单位细胞的预测时间速率定义为 $r_i \\equiv \\sum_g w_g\\,v_{ig}$，数据集平均值为\n$$\n\\bar{r} \\;\\equiv\\; \\frac{1}{N}\\sum_{i=1}^{N} r_i,\n$$\n其中 $N$ 是细胞数量。使用一个小的容差 $\\varepsilon$ 来决定净方向：如果 $\\bar{r} > \\varepsilon$ 则返回 $+1$，如果 $\\bar{r} < -\\varepsilon$ 则返回 $-1$，否则返回 $0$。\n\n实现一个程序，对每个提供的测试用例执行以下操作：\n1. 使用提供的已剪接矩阵 $S$ 和伪时间向量 $t$，通过最小二乘法拟合线性模型 $t \\approx a + \\sum_g w_g s_g$ 来估计 $a$ 和 $w_g$。\n2. 使用提供的未剪接矩阵 $U$ 和每个基因的速率常数 $\\beta_g$ 和 $\\gamma_g$，计算速度矩阵 $V$，其条目为 $v_{ig} = \\beta_g u_{ig} - \\gamma_g s_{ig}$。\n3. 计算 $r_i = \\sum_g w_g v_{ig}$ 和 $\\bar{r}$，然后根据上述规则和容差 $\\varepsilon$ 输出整数 $\\{-1,0,+1\\}$。\n\n以下所有数值均为无量纲的计数或速率。使用固定的容差 $\\varepsilon = 0.05$。\n\n测试套件规范：\n- 基因按 $g \\in \\{A,B,C\\}$ 排序，速率常数为\n$$\n\\beta \\;=\\; [\\,1.0,\\;0.9,\\;1.1\\,], \\qquad \\gamma \\;=\\; [\\,0.3,\\;0.5,\\;0.4\\,].\n$$\n- 所有测试用例共享相同的伪时间向量（祖细胞接近较小的 $t$，早期分化细胞接近较大的 $t$）：\n$$\nt \\;=\\; \\begin{bmatrix} 0.10 \\\\ 0.15 \\\\ 0.20 \\\\ 0.60 \\\\ 0.70 \\\\ 0.80 \\end{bmatrix}.\n$$\n\n测试用例 $1$（混合的祖细胞和早期分化细胞；预期为正向净流）：\n- 已剪接矩阵 $S^{(1)}$（行是细胞 $i=1,\\dots,6$，列是基因 $A,B,C$）：\n$$\nS^{(1)} \\;=\\;\n\\begin{bmatrix}\n2.0 & 1.0 & 3.0 \\\\\n2.5 & 1.2 & 3.5 \\\\\n3.0 & 1.5 & 4.0 \\\\\n5.5 & 3.5 & 6.0 \\\\\n6.5 & 4.2 & 7.2 \\\\\n7.0 & 5.0 & 8.0\n\\end{bmatrix}.\n$$\n- 未剪接矩阵 $U^{(1)}$：\n$$\nU^{(1)} \\;=\\;\n\\begin{bmatrix}\n6.0 & 4.5 & 5.5 \\\\\n5.8 & 4.0 & 5.0 \\\\\n5.5 & 3.8 & 4.6 \\\\\n3.5 & 2.7 & 3.2 \\\\\n2.5 & 2.2 & 2.5 \\\\\n2.0 & 1.8 & 2.1\n\\end{bmatrix}.\n$$\n\n测试用例 $2$（接近稳态，净流向不明确）：$S^{(1)}$ 和 $t$ 相同，但选择 $U^{(2)}$ 使得对于所有 $i,g$，通过 $u_{ig} = (\\gamma_g/\\beta_g)\\,s_{ig}$ 满足 $v_{ig} \\approx 0$。数值上，\n$$\nU^{(2)} \\;=\\;\n\\begin{bmatrix}\n0.6 & 0.5555556 & 1.0909091 \\\\\n0.75 & 0.6666667 & 1.2727273 \\\\\n0.9 & 0.8333333 & 1.4545455 \\\\\n1.65 & 1.9444444 & 2.1818182 \\\\\n1.95 & 2.3333334 & 2.6181818 \\\\\n2.1 & 2.7777778 & 2.9090909\n\\end{bmatrix}.\n$$\n\n测试用例 $3$（净负向流，与去分化或强烈的下调一致）：$S^{(1)}$ 和 $t$ 相同，但 $U^{(3)} = 0.1\\,U^{(1)}$，\n$$\nU^{(3)} \\;=\\;\n\\begin{bmatrix}\n0.6 & 0.45 & 0.55 \\\\\n0.58 & 0.40 & 0.50 \\\\\n0.55 & 0.38 & 0.46 \\\\\n0.35 & 0.27 & 0.32 \\\\\n0.25 & 0.22 & 0.25 \\\\\n0.20 & 0.18 & 0.21\n\\end{bmatrix}.\n$$\n\n您的程序必须为三个测试用例中的每一个实现上述过程，并输出一行包含结果的、用方括号括起来的逗号分隔列表，按测试用例的顺序排列。输出值必须是 $\\{-1,0,+1\\}$ 中的整数。例如，一个有效的输出格式是\n$$\n[\\,1,0,-1\\,].\n$$", "solution": "所提供的问题陈述经过了严格的验证。\n\n**第1步：提取已知条件**\n\n该问题定义了 RNA 动力学的动力学模型和一种推断分化方向的方法。\n\n- **模型方程：**\n  - 细胞 $i$ 中基因 $g$ 的已剪接RNA的瞬时变化由下式给出：\n    $$\n    \\frac{ds_{ig}}{dt} = \\beta_g u_{ig} - \\gamma_g s_{ig}\n    $$\n  - 基因层面的RNA速度定义为：\n    $$\n    v_{ig} \\equiv \\beta_g u_{ig} - \\gamma_g s_{ig}\n    $$\n  - 伪时间被近似为已剪接表达的线性函数：\n    $$\n    t_i \\approx a + \\sum_{g} w_g s_{ig}\n    $$\n  - 单位细胞的预测伪时间变化速率为：\n    $$\n    r_i \\equiv \\sum_{g} w_g v_{ig}\n    $$\n  - 数据集平均时间速率为：\n    $$\n    \\bar{r} \\equiv \\frac{1}{N} \\sum_{i=1}^{N} r_i\n    $$\n\n- **决策规则：**\n  - 令 $\\varepsilon$ 为一个小容差。\n  - 如果 $\\bar{r} > \\varepsilon$，输出为 $+1$。\n  - 如果 $\\bar{r} < -\\varepsilon$，输出为 $-1$。\n  - 否则，输出为 $0$。\n\n- **常数和数据：**\n  - 容差: $\\varepsilon = 0.05$。\n  - 细胞数 $N=6$。基因数 $G=3$。基因为 $\\{A, B, C\\}$。\n  - 剪接速率常数: $\\beta = [1.0, 0.9, 1.1]$。\n  - 降解速率常数: $\\gamma = [0.3, 0.5, 0.4]$。\n  - 伪时间向量 $t$：\n    $$\n    t = \\begin{bmatrix} 0.10 \\\\ 0.15 \\\\ 0.20 \\\\ 0.60 \\\\ 0.70 \\\\ 0.80 \\end{bmatrix}\n    $$\n  - 已剪接矩阵 $S^{(1)}$（用于所有测试用例）：\n    $$\n    S^{(1)} =\n    \\begin{bmatrix}\n    2.0 & 1.0 & 3.0 \\\\\n    2.5 & 1.2 & 3.5 \\\\\n    3.0 & 1.5 & 4.0 \\\\\n    5.5 & 3.5 & 6.0 \\\\\n    6.5 & 4.2 & 7.2 \\\\\n    7.0 & 5.0 & 8.0\n    \\end{bmatrix}\n    $$\n  - 测试用例 $1$ 的未剪接矩阵 $U^{(1)}$：\n    $$\n    U^{(1)} =\n    \\begin{bmatrix}\n    6.0 & 4.5 & 5.5 \\\\\n    5.8 & 4.0 & 5.0 \\\\\n    5.5 & 3.8 & 4.6 \\\\\n    3.5 & 2.7 & 3.2 \\\\\n    2.5 & 2.2 & 2.5 \\\\\n    2.0 & 1.8 & 2.1\n    \\end{bmatrix}\n    $$\n  - 测试用例 $2$ 的未剪接矩阵 $U^{(2)}$：\n    $$\n    U^{(2)} =\n    \\begin{bmatrix}\n    0.6 & 0.5555556 & 1.0909091 \\\\\n    0.75 & 0.6666667 & 1.2727273 \\\\\n    0.9 & 0.8333333 & 1.4545455 \\\\\n    1.65 & 1.9444444 & 2.1818182 \\\\\n    1.95 & 2.3333334 & 2.6181818 \\\\\n    2.1 & 2.7777778 & 2.9090909\n    \\end{bmatrix}\n    $$\n  - 测试用例 $3$ 的未剪接矩阵 $U^{(3)}$：\n    $$\n    U^{(3)} =\n    \\begin{bmatrix}\n    0.6 & 0.45 & 0.55 \\\\\n    0.58 & 0.40 & 0.50 \\\\\n    0.55 & 0.38 & 0.46 \\\\\n    0.35 & 0.27 & 0.32 \\\\\n    0.25 & 0.22 & 0.25 \\\\\n    0.20 & 0.18 & 0.21\n    \\end{bmatrix}\n    $$\n\n**第2步：使用提取的已知条件进行验证**\n\n根据所需标准对问题进行评估。\n1.  **科学基础：** 问题基于已广泛建立的 RNA 速度模型，该模型使用一级动力学来描述转录、剪接和降解。此框架是计算和系统生物学中的标准工具。其前提在科学上是合理的。\n2.  **适定性：** 问题需要一系列明确定义的操作：线性回归、逐元素矩阵计算、矩阵-向量乘积、平均步骤，以及一个简单的基于阈值的决策。如果设计矩阵是满秩的，则线性回归问题是可解的。给定的矩阵 $S^{(1)}$ 的列是线性无关的，确保了唯一的最小二乘解。该问题是适定的。\n3.  **客观性：** 问题使用精确的数学语言和定量数据陈述。没有歧义、主观性或观点。\n4.  **完整性：** 所有必要的数据，包括矩阵、向量和常数，都已提供。问题是自包含的。\n5.  **一致性：** 提供的数据和模型是内部一致的。设置中没有矛盾。\n\n**第3步：结论与行动**\n\n该问题被判定为 **有效**。它是一个清晰、自包含且科学上合理的计算任务。将按规定构建解决方案。\n\n**解题步骤**\n\n解决方案需要为三个测试用例中的每一个实现问题中描述的三个步骤。令 $N$ 为细胞数（$N=6$），$G$ 为基因数（$G=3$）。\n\n**第1部分：线性回归以确定权重**\n\n第一步是从线性模型 $t_i \\approx a + \\sum_{g=1}^{G} w_g s_{ig}$ 中求解截距 $a$ 和权重 $w_g$。这是一个标准的普通最小二乘（OLS）问题。我们可以将其写成矩阵形式：\n$$\nt \\approx X\\theta\n$$\n其中 $t$ 是 $N \\times 1$ 的伪时间向量，$X$ 是 $N \\times (G+1)$ 的设计矩阵，$\\theta$ 是 $(G+1) \\times 1$ 的系数向量。设计矩阵 $X$ 是通过在已剪接数据矩阵 $S^{(1)}$ 前面添加一列全为1的列而形成的。系数向量是 $\\theta = [a, w_A, w_B, w_C]^T$。\n\nOLS 解 $\\hat{\\theta}$ 最小化残差平方和，由下式给出：\n$$\n\\hat{\\theta} = (X^T X)^{-1} X^T t\n$$\n由于矩阵 $S^{(1)}$ 和向量 $t$ 对所有测试用例都是通用的，因此系数 $a$ 和 $w_g$ 只需要计算一次。在数值上，使用伪逆或专用的线性最小二乘求解器比直接计算矩阵的逆更稳定。从计算出的向量 $\\hat{\\theta}$ 中，我们提取权重 $w = [w_A, w_B, w_C]^T$。\n\n**第2部分：RNA速度的计算**\n\n对于每个测试用例 $k \\in \\{1, 2, 3\\}$，计算大小为 $N \\times G$ 的 RNA 速度矩阵 $V^{(k)}$。元素 $v_{ig}^{(k)}$ 由公式给出：\n$$\nv_{ig}^{(k)} = \\beta_g u_{ig}^{(k)} - \\gamma_g s_{ig}\n$$\n在矩阵表示法中，这是通过逐元素操作执行的。令 $U^{(k)}$ 为测试用例 $k$ 的未剪接矩阵，$S=S^{(1)}$ 为已剪接矩阵。令 $B$ 和 $\\Gamma$ 是通过将基因特异性速率向量 $\\beta = [\\beta_A, \\beta_B, \\beta_C]$ 和 $\\gamma = [\\gamma_A, \\gamma_B, \\gamma_C]$ 沿 $N$ 行广播而形成的 $N \\times G$ 矩阵。那么，速度矩阵是：\n$$\nV^{(k)} = U^{(k)} \\odot B - S \\odot \\Gamma\n$$\n其中 $\\odot$ 表示哈达玛（逐元素）积。对三个未剪接矩阵 $U^{(1)}$、$U^{(2)}$ 和 $U^{(3)}$ 中的每一个都执行此计算。\n\n**第3部分：净分化流的计算和决策**\n\n对于每个测试用例 $k$，我们计算单位细胞的预测时间速率向量 $r^{(k)}$，大小为 $N \\times 1$。每个元素 $r_i^{(k)}$ 是第 $i$ 个细胞的速度向量（$V^{(k)}$ 的第 $i$ 行）和权重向量 $w$ 的点积：\n$$\nr_i^{(k)} = \\sum_{g=1}^{G} w_g v_{ig}^{(k)}\n$$\n在矩阵形式中，这是速度矩阵和权重向量的乘积：\n$$\nr^{(k)} = V^{(k)} w\n$$\n然后，数据集平均速率 $\\bar{r}^{(k)}$ 是 $r^{(k)}$ 中元素的平均值：\n$$\n\\bar{r}^{(k)} = \\frac{1}{N} \\sum_{i=1}^{N} r_i^{(k)}\n$$\n最后，应用容差为 $\\varepsilon = 0.05$ 的决策规则。对于每个测试用例 $k$：\n- 如果 $\\bar{r}^{(k)} > 0.05$，结果为 $1$。\n- 如果 $\\bar{r}^{(k)} < -0.05$，结果为 $-1$。\n- 如果 $-0.05 \\le \\bar{r}^{(k)} \\le 0.05$，结果为 $0$。\n\n最终输出是一个按顺序包含三个测试用例的整数结果的列表。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements the RNA velocity inference procedure for three test cases.\n    \"\"\"\n\n    # --- Step 0: Define constants and shared data ---\n\n    # Tolerance for decision rule\n    epsilon = 0.05\n\n    # Rate constants for genes {A, B, C}\n    beta = np.array([1.0, 0.9, 1.1])\n    gamma = np.array([0.3, 0.5, 0.4])\n\n    # Pseudotime vector (shared across all cases)\n    t = np.array([0.10, 0.15, 0.20, 0.60, 0.70, 0.80])\n\n    # Spliced data matrix (shared across all cases)\n    S_matrix = np.array([\n        [2.0, 1.0, 3.0],\n        [2.5, 1.2, 3.5],\n        [3.0, 1.5, 4.0],\n        [5.5, 3.5, 6.0],\n        [6.5, 4.2, 7.2],\n        [7.0, 5.0, 8.0]\n    ])\n\n    # Define the unspliced matrices for the three test cases\n    test_cases_U = [\n        # Test case 1\n        np.array([\n            [6.0, 4.5, 5.5],\n            [5.8, 4.0, 5.0],\n            [5.5, 3.8, 4.6],\n            [3.5, 2.7, 3.2],\n            [2.5, 2.2, 2.5],\n            [2.0, 1.8, 2.1]\n        ]),\n        # Test case 2\n        np.array([\n            [0.6, 0.5555556, 1.0909091],\n            [0.75, 0.6666667, 1.2727273],\n            [0.9, 0.8333333, 1.4545455],\n            [1.65, 1.9444444, 2.1818182],\n            [1.95, 2.3333334, 2.6181818],\n            [2.1, 2.7777778, 2.9090909]\n        ]),\n        # Test case 3\n        np.array([\n            [0.6, 0.45, 0.55],\n            [0.58, 0.40, 0.50],\n            [0.55, 0.38, 0.46],\n            [0.35, 0.27, 0.32],\n            [0.25, 0.22, 0.25],\n            [0.20, 0.18, 0.21]\n        ])\n    ]\n\n    results = []\n\n    # --- Step 1: Linear Regression to find weights (common for all cases) ---\n    \n    # Create the design matrix X by adding a column of ones for the intercept\n    # X has shape (num_cells, num_genes + 1)\n    num_cells = S_matrix.shape[0]\n    X_design = np.hstack([np.ones((num_cells, 1)), S_matrix])\n\n    # Solve the linear least squares problem t ~ X * theta\n    # theta = [intercept, w_A, w_B, w_C]\n    theta, _, _, _ = np.linalg.lstsq(X_design, t, rcond=None)\n    \n    # Extract the weights w_g for the genes\n    weights = theta[1:]\n\n    # --- Loop through each test case ---\n    for U_matrix in test_cases_U:\n        \n        # --- Step 2: Compute the RNA velocity matrix V ---\n        # v_ig = beta_g * u_ig - gamma_g * s_ig\n        # This is V = U * B - S * G in an element-wise fashion\n        # numpy's broadcasting handles this automatically:\n        # U_matrix (6,3) * beta (3,) -> element-wise product along rows\n        velocity_matrix = U_matrix * beta - S_matrix * gamma\n\n        # --- Step 3: Compute predicted time rates and the average ---\n        # r_i = sum_g(w_g * v_ig)\n        # In matrix form: r = V * w\n        # r is a (num_cells, 1) vector\n        r_per_cell = np.dot(velocity_matrix, weights)\n\n        # Compute the dataset-average rate r_bar\n        r_bar = np.mean(r_per_cell)\n\n        # --- Step 4: Apply the decision rule ---\n        if r_bar > epsilon:\n            decision = 1\n        elif r_bar  -epsilon:\n            decision = -1\n        else:\n            decision = 0\n        \n        results.append(decision)\n\n    # --- Final Output Formatting ---\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2941032"}, {"introduction": "任何科学模型都是对现实的简化，因此批判性地审视其假设至关重要。标准的RNA速度模型假设剪接速率与未剪接RNA的浓度成线性关系，但在生物体内，催化剪接的分子机器（剪接体）可能会达到饱和。这个练习将引导你探索这一模型的局限性，并将简单的线性动力学替换为一个更真实的米氏动力学模型（Michaelis-Menten kinetics），从而学会如何改进和扩展基本模型，使其更好地反映复杂的生物学现实。[@problem_id:2427330]", "problem": "您的任务是扩展一个标准的核糖核酸（RNA）速率模型，以考虑在高转录活性下剪接机制的饱和效应。在单细胞RNA测序（scRNA-seq）的前体信使RNA动态学标准双室模型描述中，未剪接和已剪接的转录本丰度分别用 $u$ 和 $s$ 表示。请假设以下原则作为您的出发点：(i) 分子群体的质量平衡；(ii) 中心法则，即转录产生未剪接RNA，剪接将未剪接RNA转化为已剪接RNA，降解则移除这两种RNA；(iii) 剪接步骤中的酶饱和现象，由米氏动力学描述；以及 (iv) 由常微分方程（ODE）模型描述的确定性、充分混合极限。\n\n请从以下基本陈述开始：\n- 剪接步骤由一个有限的剪接体复合物库催化，作用于未剪接RNA $u$。其净转换通量由以 $u$ 为底物的米氏动力学控制，最大速率为 $V_{\\max}$，米氏常数为 $K_M$。\n- 已剪接RNA $s$ 以一级速率常数 $\\gamma_s$ 降解。\n\n任务A（推导）：利用质量平衡以及作为 $u$ 函数的剪接转换通量的米氏动力学描述，从第一性原理出发，推导出已剪接RNA的瞬时速率，即时间导数 $\\dfrac{ds}{dt}$，并用 $u$、$s$、$V_{\\max}$、$K_M$ 和 $\\gamma_s$ 表示。您的推导必须从上述文字性原则开始，不能假设任何预先写好的目标公式，并且必须清晰地指出决定 $\\dfrac{ds}{dt}$ 的具有物理解释的流入项和流出项。\n\n任务B（实现）：编写一个完整的、可运行的程序，对以下参数集测试套件计算推导出的已剪接RNA瞬时速率 $\\dfrac{ds}{dt}$，其中每个案例提供 $(V_{\\max}, K_M, \\gamma_s, u, s)$：\n- 案例1：$(12.0, 25.0, 0.10, 20.0, 50.0)$\n- 案例2：$(8.0, 10.0, 0.25, 0.0, 40.0)$\n- 案例3：$(15.0, 5.0, 0.20, 500.0, 60.0)$\n- 案例4：$(9.0, 30.0, 0.50, 30.0, 25.0)$\n- 案例5：$(7.5, 1.0, 0.05, 2.0, 20.0)$\n- 案例6：$(0.0, 10.0, 0.10, 100.0, 10.0)$\n\n将 $u$ 和 $s$ 解释为任意的类浓度单位，将时间解释为任意的时间单位。报告的瞬时速率 $\\dfrac{ds}{dt}$ 应使用相同的类浓度单位/时间单位。您的程序必须：\n- 为每个案例计算一个浮点值。\n- 将每个结果四舍五入到 $6$ 位小数。\n- 生成单行输出，其中包含用逗号分隔并用方括号括起来的结果列表，其顺序与测试案例相同（例如，$[x_1,x_2,\\dots]$）。\n\n程序不应从用户或文件中读取任何输入。程序必须是自包含的，并且可以直接运行。", "solution": "问题陈述已经过验证，被认为是可靠的。它在科学上基于化学动力学和分子生物学原理，问题定义明确，并为推导和评估指定模型提供了完整且一致的信息。我们现在将进行推导和后续的实现。\n\n任务是基于质量平衡原理和酶促过程的米氏动力学，推导出已剪接RNA的瞬时速率，记为 $\\dfrac{ds}{dt}$。该系统包含两个物种：未剪接RNA，$u$，和已剪接RNA，$s$。\n\n在一个充分混合的系统中，控制任何化学物种动态学的基本原理是质量平衡定律。该定律指出，一个物种浓度的净变化率等于所有流入速率（生成）之和减去所有流出速率（消耗或降解）之和。对于已剪接RNA物种 $s$，这可以写成以下常微分方程：\n$$\n\\frac{ds}{dt} = \\sum (\\text{Influx to } s) - \\sum (\\text{Efflux from } s)\n$$\n\n我们现在必须根据问题描述，确定 $s$ 的具体流入项和流出项。\n\n1.  **已剪接RNA, $s$ 的流入项**：\n    问题陈述指出，已剪接RNA, $s$，是通过未剪接RNA, $u$ 的转化生成的。这个转化过程，即剪接，由剪接体机制催化。问题明确指出，该过程遵循米氏动力学，其中未剪接RNA, $u$，充当底物。由米氏动力学描述的酶促反应速率由以下表达式给出：\n    $$\n    \\text{Reaction Rate} = \\frac{V_{\\max} [\\text{Substrate}]}{K_M + [\\text{Substrate}]}\n    $$\n    此处，$V_{\\max}$ 是当酶被底物饱和时的最大反应速率，而 $K_M$（米氏常数）是反应速率为 $V_{\\max}$ 一半时的底物浓度。\n    在我们的情境中，底物是 $u$。因此，构成 $s$ 群体的唯一流入的剪接速率由下式给出：\n    $$\n    \\text{Influx to } s = \\text{Splicing Rate} = \\frac{V_{\\max} u}{K_M + u}\n    $$\n    此项代表已剪接RNA分子的生成速率。\n\n2.  **已剪接RNA, $s$ 的流出项**：\n    问题陈述指出，已剪接RNA, $s$，通过一级降解过程从系统中移除。该过程的速率常数是 $\\gamma_s$。在一级过程中，降解速率与被降解物种的浓度成正比。\n    因此，从 $s$ 群体流出的通量为：\n    $$\n    \\text{Efflux from } s = \\text{Degradation Rate} = \\gamma_s s\n    $$\n    此项代表已剪接RNA分子的移除速率。\n\n3.  **$\\dfrac{ds}{dt}$ 的完整方程**：\n    通过将推导出的流入项和流出项代入质量平衡方程，我们得到了已剪接RNA瞬时速率的完整表达式：\n    $$\n    \\frac{ds}{dt} = \\left( \\frac{V_{\\max} u}{K_M + u} \\right) - (\\gamma_s s)\n    $$\n    该方程描述了已剪接RNA丰度的净变化率。第一项 $\\dfrac{V_{\\max} u}{K_M + u}$ 是由剪接引起的生成速率，它是前体 $u$ 的一个饱和函数。第二项 $\\gamma_s s$ 是降解速率，它是物种 $s$ 本身的线性函数。当生成速率超过降解速率时，“速率” $\\dfrac{ds}{dt}$ 为正，而当降解速率超过生成速率时为负。这个推导出的公式现在可以用于实现了。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the instantaneous spliced RNA velocity ds/dt for a suite of test cases\n    based on a Michaelis-Menten model of splicing saturation.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (V_max, K_M, gamma_s, u, s)\n    test_cases = [\n        (12.0, 25.0, 0.10, 20.0, 50.0),  # Case 1\n        (8.0, 10.0, 0.25, 0.0, 40.0),   # Case 2\n        (15.0, 5.0, 0.20, 500.0, 60.0),  # Case 3\n        (9.0, 30.0, 0.50, 30.0, 25.0),   # Case 4\n        (7.5, 1.0, 0.05, 2.0, 20.0),    # Case 5\n        (0.0, 10.0, 0.10, 100.0, 10.0)   # Case 6\n    ]\n\n    results = []\n    for case in test_cases:\n        # Unpack parameters for clarity\n        V_max, K_M, gamma_s, u, s = case\n\n        # Calculate the splicing influx term based on Michaelis-Menten kinetics.\n        # This represents the production rate of spliced RNA.\n        splicing_influx = (V_max * u) / (K_M + u)\n\n        # Calculate the degradation efflux term based on first-order kinetics.\n        # This represents the removal rate of spliced RNA.\n        degradation_efflux = gamma_s * s\n\n        # The instantaneous velocity of spliced RNA (ds/dt) is the influx minus the efflux.\n        ds_dt = splicing_influx - degradation_efflux\n        \n        # Round the result to 6 decimal places and append to the list.\n        # Using format specifier to ensure consistent output format with trailing zeros.\n        results.append(f\"{ds_dt:.6f}\")\n\n    # Final print statement in the exact required format: [res1,res2,...,resN]\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2427330"}]}