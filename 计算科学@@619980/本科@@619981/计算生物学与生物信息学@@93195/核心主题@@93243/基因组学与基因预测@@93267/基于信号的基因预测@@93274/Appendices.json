{"hands_on_practices": [{"introduction": "位置权重矩阵（Position Weight Matrix, PWM）是模拟DNA信号的核心工具。本练习旨在深化你对PWM模型的理解，探讨理论上得分最高的“共识序列”为何在生物体中并不常见。通过这个思想实验，你将更好地把握统计模型与复杂生物现实之间的差距。[@problem_id:2429059]", "problem": "一个长度为 $L$ 的启动子或剪接位点信号的基序模型由一个位置权重矩阵（PWM）表示，该矩阵源自一组经整理的真实位点集合。设位置特异性核苷酸频率为 $p_i(b)$，其中位置 $i \\in \\{1,\\dots,L\\}$，碱基 $b \\in \\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$，且对于每个 $i$ 都有 $\\sum_{b} p_i(b) = 1$。设基因组背景分布为 $q(b)$，且 $\\sum_{b} q(b) = 1$。PWM使用对数优势权重 $w_i(b) = \\log \\frac{p_i(b)}{q(b)}$，一个序列 $x = x_1 x_2 \\dots x_L$ 的得分为 $S(x) = \\sum_{i=1}^{L} w_i(x_i) = \\sum_{i=1}^{L} \\log \\frac{p_i(x_i)}{q(x_i)}$。考虑“一致性”序列 $c$，其定义为在每个位置 $i$，$c_i \\in \\arg\\max_{b} p_i(b)$，其中平局情况任意解决。哪个选项正确地陈述了 $c$ 的PWM得分，并给出了一个有效的原因，解释为什么在真实的启动子或剪接位点实例中，这种完全由一致性碱基组成的序列在生物学上不太可能被观察到？\n\nA. $S(c) = \\sum_{i=1}^{L} \\log \\frac{\\max_{b} p_i(b)}{q(c_i)}$。这是可能的最大PWM得分。它在生物学上不太可能出现，因为即使在PWM的独立性模型下，一个真实位点在每个位置都匹配最常见碱基的概率是 $\\prod_{i=1}^{L} \\max_{b} p_i(b)$，对于中等或较大的 $L$ 而言，这个值通常非常小；此外，真实的基序表现出位置间的依赖性，这进一步降低了所有位置上最大频率碱基同时出现的可能性。\n\nB. $S(c) = 0$，因为在每个位置 $\\sum_{b} p_i(b) = 1$ 会迫使对数优势总和为零。它在生物学上不太可能出现，因为调控系统会避免完美匹配，以防止过强的结合。\n\nC. $S(c) = \\sum_{i=1}^{L} \\sum_{b} p_i(b) \\log \\frac{p_i(b)}{q(b)}$（总信息内容）。它在生物学上不太可能出现，因为结合能在高亲和力时会饱和，使得完美匹配变得不必要。\n\nD. $S(c) = \\sum_{i=1}^{L} \\log \\big(\\max_{b} p_i(b)\\big)$（忽略了背景）。它在生物学上不太可能出现，因为由于脱氧核糖核酸（DNA）螺旋上的空间位阻，最常见的核苷酸不可能全部同时出现在一个位点。\n\nE. $S(c) = L \\cdot \\max_{i,b} \\log \\frac{p_i(b)}{q(b)}$。它在生物学上不太可能出现，因为非均匀的基因组背景 $q(b)$ 不利于长的完美匹配。", "solution": "首先将验证问题陈述的科学性和逻辑完整性。\n\n### 步骤1：提取已知条件\n- 一个启动子或剪接位点信号的基序模型长度为 $L$。\n- 该模型是一个位置权重矩阵（PWM）。\n- 位置特异性核苷酸频率为 $p_i(b)$，其中位置 $i \\in \\{1,\\dots,L\\}$，碱基 $b \\in \\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$。\n- 频率的归一化条件：对于每个 $i$，$\\sum_{b} p_i(b) = 1$。\n- 基因组背景分布为 $q(b)$。\n- 背景的归一化条件：$\\sum_{b} q(b) = 1$。\n- PWM对数优势权重为 $w_i(b) = \\log \\frac{p_i(b)}{q(b)}$。\n- 序列 $x = x_1 x_2 \\dots x_L$ 的得分为 $S(x) = \\sum_{i=1}^{L} w_i(x_i) = \\sum_{i=1}^{L} \\log \\frac{p_i(x_i)}{q(x_i)}$。\n- “一致性”序列 $c$ 定义为在每个位置 $i$，$c_i \\in \\arg\\max_{b} p_i(b)$。\n\n### 步骤2：使用提取的已知条件进行验证\n- **科学依据**：问题陈述描述了位置权重矩阵（PWM）的标准数学公式，这是计算生物学中用于建模DNA或蛋白质基序的基本工具。所有定义（$p_i(b)$、$q(b)$、$w_i(b)$、$S(x)$、一致性序列）都是标准且正确的。没有科学上的不合理之处。\n- **适定性**：该问题是适定的。它提供了计算一致性序列得分和评估相关生物学推理所需的所有必要定义。可以得出一个唯一的、有意义的答案。\n- **客观性**：语言精确、专业，且没有主观性。\n\n### 步骤3：结论与行动\n问题陈述是有效的。这是一个生物信息学中的标准问题。我将继续推导解决方案并评估各个选项。\n\n### 解答推导\n\n任意序列 $x = x_1 x_2 \\dots x_L$ 的得分由每个位置的对数优势得分之和给出：\n$$S(x) = \\sum_{i=1}^{L} w_i(x_i) = \\sum_{i=1}^{L} \\log \\frac{p_i(x_i)}{q(x_i)}$$\n\n一致性序列，记为 $c = c_1 c_2 \\dots c_L$，是通过在每个位置 $i$ 选择在真实位点的统计模型中具有最高频率的核苷酸来构建的。数学上，对于每个位置 $i \\in \\{1, \\dots, L\\}$，碱基 $c_i$ 定义为：\n$$c_i \\in \\arg\\max_{b \\in \\{\\text{A,C,G,T}\\}} p_i(b)$$\n这意味着 $p_i(c_i) = \\max_{b} p_i(b)$。\n\n为了找到一致性序列的得分 $S(c)$，我们将 $x_i = c_i$ 代入通用得分公式：\n$$S(c) = \\sum_{i=1}^{L} w_i(c_i) = \\sum_{i=1}^{L} \\log \\frac{p_i(c_i)}{q(c_i)}$$\n使用 $c_i$ 的定义，我们可以将 $p_i(c_i)$ 替换为 $\\max_{b} p_i(b)$：\n$$S(c) = \\sum_{i=1}^{L} \\log \\frac{\\max_{b} p_i(b)}{q(c_i)}$$\n这是该一致性序列得分的正确数学表达式。\n\n现在，我们评估其生物学上的可能性。PWM模型做了一个关键的简化假设：任何位置 $i$ 的核苷酸选择都独立于所有其他位置 $j \\neq i$ 的核苷酸。在此模型下，在一组真实位点中观察到一致性序列 $c$ 的概率是：\n$$P(c | \\text{model}) = \\prod_{i=1}^{L} p_i(c_i) = \\prod_{i=1}^{L} \\max_{b} p_i(b)$$\n由于对于任何有变异的位置，$\\max_{b} p_i(b) < 1$，因此对于典型的基序长度（$L \\approx 6-20$），该乘积会变得非常小，使得完全由一致性碱基组成的序列即使在理想化的模型中在统计上也极为罕见。\n\n此外，独立性假设本身是一种简化。在生物学现实中，由于DNA-蛋白质复合物的三维结构，核苷酸位置之间通常存在依赖性。一个位置上的特定碱基可能会影响另一位置上碱基的结构或化学偏好。因此，所有单个最常见碱基的组合可能不会产生一个能量上最优或功能上被选择的结合位点。\n\n### 逐项分析选项\n\n**A. $S(c) = \\sum_{i=1}^{L} \\log \\frac{\\max_{b} p_i(b)}{q(c_i)}$。这是可能的最大PWM得分。它在生物学上不太可能出现，因为即使在PWM的独立性模型下，一个真实位点在每个位置都匹配最常见碱基的概率是 $\\prod_{i=1}^{L} \\max_{b} p_i(b)$，对于中等或较大的 $L$ 而言，这个值通常非常小；此外，真实的基序表现出位置间的依赖性，这进一步降低了所有位置上最大频率碱基同时出现的可能性。**\n$S(c)$的公式是正确的，如上所述。声称这是可能的最大PWM得分，一般而言是错误的。最大得分是由序列 $x^*$ 实现的，其中 $x^*_i = \\arg\\max_b \\frac{p_i(b)}{q(b)}$。如果背景 $q(b)$ 不均匀，这不一定与一致性碱基 $c_i = \\arg\\max_b p_i(b)$ 相同。然而，尽管有这个不精确的子句，其后的推理却非常有力且正确。它正确地指出了在模型的独立性假设下一致性序列的统计稀有性，并正确地指出该假设是一种生物学上的简化，因为位置间的依赖性是显著的。在给定的选项中，此选项提供了正确的得分表达式和最准确、最全面的推理。与其他选项中的根本性错误相比，中间子句的瑕疵是次要的。\n**结论：正确**\n\n**B. $S(c) = 0$，因为在每个位置 $\\sum_{b} p_i(b) = 1$ 会迫使对数优势总和为零。它在生物学上不太可能出现，因为调控系统会避免完美匹配，以防止过强的结合。**\n得分公式 $S(c) = 0$ 是不正确的。没有任何数学原理能迫使一致性碱基的对数优势总和为零。条件 $\\sum_{b} p_i(b) = 1$ 是一个概率归一化，并不会以这种方式限制得分。例如，如果对于所有一致性碱基 $c_i$ 都有 $p_i(b) > q(b)$，那么 $S(c)$ 的求和中的每一项都将是正的，并且 $S(c)$ 将严格为正。\n**结论：不正确**\n\n**C. $S(c) = \\sum_{i=1}^{L} \\sum_{b} p_i(b) \\log \\frac{p_i(b)}{q(b)}$（总信息内容）。它在生物学上不太可能出现，因为结合能在高亲和力时会饱和，使得完美匹配变得不必要。**\n提供的公式是基序模型相对于背景的总信息内容（或Kullback-Leibler散度）。这代表了从基序概率分布中抽取的所有可能序列的*期望*得分，而不是单个特定的一致性序列 $c$ 的得分。这是对所涉及量的误解。\n**结论：不正确**\n\n**D. $S(c) = \\sum_{i=1}^{L} \\log \\big(\\max_{b} p_i(b)\\big)$（忽略了背景）。它在生物学上不太可能出现，因为由于脱氧核糖核酸（DNA）螺旋上的空间位阻，最常见的核苷酸不可能全部同时出现在一个位点。**\n得分公式不正确，因为它在对数优势比率的分母中省略了背景分布项 $q(c_i)$。得分明确定义为对数优势，必须包含背景。此公式对应于一个简单的对数似然得分，而不是问题中指定的对数优势得分。\n**结论：不正确**\n\n**E. $S(c) = L \\cdot \\max_{i,b} \\log \\frac{p_i(b)}{q(b)}$。它在生物学上不太可能出现，因为非均匀的基因组背景 $q(b)$ 不利于长的完美匹配。**\n得分公式完全错误。得分 $S(c)$ 是位置特异性得分的总和，即 $\\sum_i w_i(c_i)$。这个提议的公式错误地将这个总和替换为基序长度 $L$ 与整个PWM中找到的单个最大对数优势值的乘积。这表明了对PWM得分如何计算的根本性误解。\n**结论：不正确**", "answer": "$$\\boxed{A}$$", "id": "2429059"}, {"introduction": "建立信号模型后，下一步便是应用它进行预测。本练习是一个动手编程任务，要求你实施一次“虚拟突变扫描”，以系统性地量化单个核苷酸变化对剪接位点分数的影响。通过这个计算，你将掌握一种识别功能性DNA序列中关键核苷酸的常用生物信息学方法。[@problem_id:2429077]", "problem": "给定一个有限字母表 $\\Sigma=\\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$ 和一个围绕假定剪接位点的长度为 $L$ 的窗口化序列模型。对于字母表 $\\Sigma$ 上一个长度为 $L$ 的序列 $s$，其在位置权重矩阵 (PWM) 模型下的得分 $S(s)$ 定义为\n$$\nS(s) \\;=\\; \\sum_{i=1}^{L} \\ln\\!\\left(\\frac{P_{i,b_i}}{Q_{b_i}}\\right),\n$$\n其中 $b_i \\in \\Sigma$ 是序列 $s$ 中位置 $i$ 的碱基，$P_{i,\\cdot}$ 是位置 $i$ 上关于 $\\Sigma$ 的位置特异性多项分布，$Q_{\\cdot}$ 是关于 $\\Sigma$ 的背景多项分布，而 $\\ln(\\cdot)$ 表示自然对数。在任何向量中，核苷酸的顺序固定为 $[\\text{A},\\text{C},\\text{G},\\text{T}]$。\n\n对于每个位置 $i \\in \\{1,\\dots,L\\}$ 以及每种将参考碱基 $r_i$ 替换为不同碱基 $b \\in \\Sigma \\setminus \\{r_i\\}$ 的可能点突变，定义单点突变引起的得分变化为\n$$\n\\Delta S(i,b) \\;=\\; S\\big(s^{(i \\rightarrow b)}\\big) \\;-\\; S(s),\n$$\n其中 $s^{(i \\rightarrow b)}$ 是一个与 $s$ 相同的序列，仅在位置 $i$ 处为碱基 $b$ 而非 $r_i$。对于每个位置 $i$，将位置敏感度定义为最有害的单点突变变化\n$$\n\\Delta S_{\\min}(i) \\;=\\; \\min_{b \\in \\Sigma \\setminus \\{r_i\\}} \\Delta S(i,b).\n$$\n\n你的任务是计算下面每个测试用例中所有位置 $i$ 的 $\\Delta S_{\\min}(i)$，并将每个值四舍五入到 $6$ 位小数。\n\n测试套件 (所有概率均按 $[\\text{A},\\text{C},\\text{G},\\text{T}]$ 的顺序给出)：\n\n- 测试用例 1 (在剪接点附近位置具有强 $\\text{G}\\text{T}$ 的供体样 PWM)：\n  - 长度 $L = 9$。\n  - 背景分布 $Q = [\\,0.30,\\,0.20,\\,0.20,\\,0.30\\,]$。\n  - 参考序列 $s = \\text{\"CAGGTAAGT\"}$。\n  - PWM 概率 $P$（以行 $P_{i,\\cdot}$ 表示，其中 $i=1,\\dots,9$）：\n    - $i=1$： $[\\,0.35,\\,0.25,\\,0.25,\\,0.15\\,]$\n    - $i=2$： $[\\,0.40,\\,0.20,\\,0.25,\\,0.15\\,]$\n    - $i=3$： $[\\,0.45,\\,0.15,\\,0.25,\\,0.15\\,]$\n    - $i=4$： $[\\,0.07,\\,0.07,\\,0.80,\\,0.06\\,]$\n    - $i=5$： $[\\,0.06,\\,0.07,\\,0.07,\\,0.80\\,]$\n    - $i=6$： $[\\,0.30,\\,0.25,\\,0.25,\\,0.20\\,]$\n    - $i=7$： $[\\,0.60,\\,0.15,\\,0.15,\\,0.10\\,]$\n    - $i=8$： $[\\,0.20,\\,0.20,\\,0.50,\\,0.10\\,]$\n    - $i=9$： $[\\,0.20,\\,0.20,\\,0.10,\\,0.50\\,]$\n\n- 测试用例 2 (PWM 和背景与测试用例 1 相同，但参考序列不同)：\n  - 长度 $L = 9$。\n  - 背景分布 $Q = [\\,0.30,\\,0.20,\\,0.20,\\,0.30\\,]$。\n  - 参考序列 $s = \\text{\"TAGGTGAGT\"}$。\n  - PWM 概率 $P$ 与测试用例 1 中的完全相同。\n\n- 测试用例 3 (无信息的 PWM，与背景相等，属边界情况)：\n  - 长度 $L = 6$。\n  - 背景分布 $Q = [\\,0.25,\\,0.25,\\,0.25,\\,0.25\\,]$。\n  - 参考序列 $s = \\text{\"ACGTAC\"}$。\n  - PWM 概率 $P$ 的每一行均等于 $[\\,0.25,\\,0.25,\\,0.25,\\,0.25\\,]$。\n\n最终输出格式：\n\n你的程序应产生单行输出，其中包含一个用方括号括起来的、逗号分隔的嵌套列表。每个内部列表对应一个测试用例，并按位置顺序 $i=1$ 到 $i=L$ 包含 $L$ 个 $\\Delta S_{\\min}(i)$ 的浮点数值。例如，包含三个测试用例的输出必须类似于 $[[x_{1,1},\\dots,x_{1,L_1}],[x_{2,1},\\dots,x_{2,L_2}],[x_{3,1},\\dots,x_{3,L_3}]]$, 其中每个 $x_{t,i}$ 都四舍五入到 $6$ 位小数。不涉及任何单位，也不应打印任何附加文本。", "solution": "问题陈述已经过严格验证，并被确定为是健全的。它在科学上基于生物信息学和统计序列分析的原理，所有必要信息均已提供，问题表述清晰，并且使用了精确的数学定义进行客观阐述。未发现任何缺陷。我们可以着手求解。\n\n该问题要求计算给定核苷酸序列 $s$ 中每个位置 $i$ 的位置敏感度 $\\Delta S_{\\min}(i)$。此敏感度定义为在该位置发生单点突变所导致的序列得分 $S(s)$ 的最有害变化。得分本身基于位置权重矩阵 (PWM) 模型，这是一种表示序列基序的常用方法。\n\n序列 $s = b_1 b_2 \\dots b_L$ 的得分 $S(s)$ 是一个对数似然比，由下式给出：\n$$\nS(s) = \\sum_{i=1}^{L} \\ln\\left(\\frac{P_{i,b_i}}{Q_{b_i}}\\right)\n$$\n在此，$P_{i,b_i}$ 是根据基序模型在位置 $i$ 观测到碱基 $b_i$ 的概率，而 $Q_{b_i}$ 是根据背景模型观测到碱基 $b_i$ 的概率。该得分量化了序列 $s$ 在基序模型下出现的可能性相对于背景模型的增加程度。\n\n我们被要求计算当单个位置 $i$ 的参考碱基 $r_i$ 突变为新碱基 $b \\in \\Sigma \\setminus \\{r_i\\}$ 时得分的变化 $\\Delta S(i,b)$。原始序列为 $s$，突变序列为 $s^{(i \\rightarrow b)}$。得分的变化为：\n$$\n\\Delta S(i,b) = S\\big(s^{(i \\rightarrow b)}\\big) - S(s)\n$$\n\n让我们展开这个表达式。原始序列 $s$（在每个位置 $j$ 具有参考碱基 $r_j$）的得分为：\n$$\nS(s) = \\sum_{j=1}^{L} \\ln\\left(\\frac{P_{j,r_j}}{Q_{r_j}}\\right) = \\ln\\left(\\frac{P_{i,r_i}}{Q_{r_i}}\\right) + \\sum_{j \\neq i} \\ln\\left(\\frac{P_{j,r_j}}{Q_{j,r_j}}\\right)\n$$\n突变序列 $s^{(i \\rightarrow b)}$（仅在位置 $i$ 处不同）的得分为：\n$$\nS\\big(s^{(i \\rightarrow b)}\\big) = \\ln\\left(\\frac{P_{i,b}}{Q_b}\\right) + \\sum_{j \\neq i} \\ln\\left(\\frac{P_{j,r_j}}{Q_{r_j}}\\right)\n$$\n当我们计算差值 $\\Delta S(i,b)$ 时，代表所有未改变位置贡献的求和项会完全抵消。这极大地简化了计算：\n$$\n\\Delta S(i,b) = \\left( \\ln\\left(\\frac{P_{i,b}}{Q_b}\\right) + \\sum_{j \\neq i} \\ln\\left(\\frac{P_{j,r_j}}{Q_{r_j}}\\right) \\right) - \\left( \\ln\\left(\\frac{P_{i,r_i}}{Q_{r_i}}\\right) + \\sum_{j \\neq i} \\ln\\left(\\frac{P_{j,r_j}}{Q_{r_j}}\\right) \\right)\n$$\n$$\n\\Delta S(i,b) = \\ln\\left(\\frac{P_{i,b}}{Q_b}\\right) - \\ln\\left(\\frac{P_{i,r_i}}{Q_{r_i}}\\right)\n$$\n这表明，由位置 $i$ 的突变引起的总得分变化仅取决于为该特定位置定义的概率。让我们将位置 $i$ 处碱基 $x$ 的对数奇比分定义为 $L_i(x) = \\ln(P_{i,x}/Q_x)$。那么，$\\Delta S(i,b) = L_i(b) - L_i(r_i)$。\n\n位置敏感度 $\\Delta S_{\\min}(i)$ 是在位置 $i$ 上所有可能突变中此类变化的最小值。\n$$\n\\Delta S_{\\min}(i) = \\min_{b \\in \\Sigma \\setminus \\{r_i\\}} \\Delta S(i,b)\n$$\n将我们对 $\\Delta S(i,b)$ 的简化表达式代入：\n$$\n\\Delta S_{\\min}(i) = \\min_{b \\in \\Sigma \\setminus \\{r_i\\}} \\left( \\ln\\left(\\frac{P_{i,b}}{Q_b}\\right) - \\ln\\left(\\frac{P_{i,r_i}}{Q_{r_i}}\\right) \\right)\n$$\n由于项 $\\ln(P_{i,r_i}/Q_{r_i})$ 相对于最小化变量 $b$ 是一个常数，我们可以写成：\n$$\n\\Delta S_{\\min}(i) = \\left( \\min_{b \\in \\Sigma \\setminus \\{r_i\\}} \\ln\\left(\\frac{P_{i,b}}{Q_b}\\right) \\right) - \\ln\\left(\\frac{P_{i,r_i}}{Q_{r_i}}\\right)\n$$\n\n对每个位置 $i=1, \\dots, L$ 计算 $\\Delta S_{\\min}(i)$ 的算法如下：\n1.  对于参考序列 $s$ 中的每个位置 $i$，确定参考碱基 $r_i$。\n2.  使用提供的 PWM $P$ 和背景分布 $Q$，计算参考碱基的对数奇比分：$L_i(r_i) = \\ln(P_{i,r_i}/Q_{r_i})$。\n3.  对于三种可能的突变碱基 $b \\in \\Sigma \\setminus \\{r_i\\}$ 中的每一种，计算其对应的对数奇比分：$L_i(b) = \\ln(P_{i,b}/Q_b)$。\n4.  在这三个突变碱基的对数奇比分中找到最小值：$L_{i, \\text{min\\_mut}} = \\min_{b \\in \\Sigma \\setminus \\{r_i\\}} L_i(b)$。\n5.  位置敏感度是最小突变得分与参考得分之间的差值：$\\Delta S_{\\min}(i) = L_{i, \\text{min\\_mut}} - L_i(r_i)$。\n6.  对每个测试用例的所有位置 $i=1, \\dots, L$ 重复此过程。结果四舍五入到 $6$ 位小数。\n\n对于 PWM 无信息且等于背景分布的特殊情况（即，对所有 $i, b$ 都有 $P_{i,b} = Q_b$），任何位置上任何碱基的对数奇比分均为 $\\ln(1) = 0$。因此，对于所有突变，$\\Delta S(i,b) = 0 - 0 = 0$，所以对于所有位置，$\\Delta S_{\\min}(i) = 0$。这一点由测试用例 3 的计算得到证实。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the positional sensitivity problem for the given test suite.\n    \"\"\"\n    \n    # Define a mapping from nucleotide characters to array indices.\n    base_to_idx = {'A': 0, 'C': 1, 'G': 2, 'T': 3}\n    idx_to_base = ['A', 'C', 'G', 'T']\n    \n    # Define the test cases from the problem statement.\n    p_matrix_tc1 = np.array([\n        [0.35, 0.25, 0.25, 0.15],\n        [0.40, 0.20, 0.25, 0.15],\n        [0.45, 0.15, 0.25, 0.15],\n        [0.07, 0.07, 0.80, 0.06],\n        [0.06, 0.07, 0.07, 0.80],\n        [0.30, 0.25, 0.25, 0.20],\n        [0.60, 0.15, 0.15, 0.10],\n        [0.20, 0.20, 0.50, 0.10],\n        [0.20, 0.20, 0.10, 0.50]\n    ])\n    \n    p_matrix_tc3 = np.array([\n        [0.25, 0.25, 0.25, 0.25],\n        [0.25, 0.25, 0.25, 0.25],\n        [0.25, 0.25, 0.25, 0.25],\n        [0.25, 0.25, 0.25, 0.25],\n        [0.25, 0.25, 0.25, 0.25],\n        [0.25, 0.25, 0.25, 0.25],\n    ])\n\n    test_cases = [\n        {\n            \"L\": 9,\n            \"Q\": np.array([0.30, 0.20, 0.20, 0.30]),\n            \"s\": \"CAGGTAAGT\",\n            \"P\": p_matrix_tc1\n        },\n        {\n            \"L\": 9,\n            \"Q\": np.array([0.30, 0.20, 0.20, 0.30]),\n            \"s\": \"TAGGTGAGT\",\n            \"P\": p_matrix_tc1\n        },\n        {\n            \"L\": 6,\n            \"Q\": np.array([0.25, 0.25, 0.25, 0.25]),\n            \"s\": \"ACGTAC\",\n            \"P\": p_matrix_tc3\n        }\n    ]\n\n    all_results = []\n    \n    for case in test_cases:\n        L = case[\"L\"]\n        Q = case[\"Q\"]\n        s = case[\"s\"]\n        P = case[\"P\"]\n        \n        positional_sensitivities = []\n        for i in range(L):\n            # Identify reference base and its index\n            ref_base = s[i]\n            ref_idx = base_to_idx[ref_base]\n            \n            # Get the PWM probabilities for the current position\n            p_row = P[i]\n            \n            # Calculate log-odds score for the reference base\n            ref_log_odds = np.log(p_row[ref_idx] / Q[ref_idx])\n\n            # Calculate log-odds scores for all possible mutations\n            mutant_log_odds = []\n            for b_idx in range(4): # 4 bases in the alphabet\n                if b_idx != ref_idx:\n                    log_odds = np.log(p_row[b_idx] / Q[b_idx])\n                    mutant_log_odds.append(log_odds)\n            \n            # Find the minimum (most deleterious) mutant score\n            min_mutant_log_odds = min(mutant_log_odds)\n\n            # Calculate positional sensitivity delta_S_min(i)\n            delta_s_min = min_mutant_log_odds - ref_log_odds\n            \n            # Round to 6 decimal places and append\n            positional_sensitivities.append(round(delta_s_min, 6))\n            \n        all_results.append(positional_sensitivities)\n\n    # Format the final output string as a nested list string.\n    # The str() representation of a Python list is exactly the format required.\n    # Whitespace must be removed for exact match.\n    output_str = f\"[{','.join(str(res).replace(' ', '') for res in all_results)}]\"\n    \n    # Final print statement in the exact required format.\n    print(output_str)\n\nsolve()\n```", "id": "2429077"}]}