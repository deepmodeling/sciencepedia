{"hands_on_practices": [{"introduction": "BLAST 算法的效率在很大程度上归功于其“种子”启发式策略，该策略能快速定位数据库中的潜在匹配区域。然而，一个种子（即短的精确匹配）可能纯粹是偶然出现的。本练习将引导你通过一个简化的概率模型，计算在一个大型随机数据库中发现一个特定种子的概率，这对于理解 BLAST 结果的统计显著性至关重要 [@problem_id:2434603]。", "problem": "在基础局部比对搜索工具（BLAST）的种子阶段，一个种子是一个固定长度的连续词。考虑一个定义在大小为 $|\\Sigma|$ 的有限字母表 $\\Sigma$ 上，长度为 $w$ 的固定种子。假设一个数据库被建模为长度为 $D$ 的单个序列，其中每个位置的字符都是从字母表 $\\Sigma$ 上的均匀分布中独立同分布地抽取的。定义一次命中为种子与数据库中一个长度为 $w$ 的连续子串的精确匹配。将长度为 $w$ 的子串的 $D - w + 1$ 个可能的起始位置视为独立的试验。在此模型下，数据库中包含至少一次该种子的命中的概率的闭式表达式是什么？请用 $D$、$w$ 和 $|\\Sigma|$ 来表示你的答案。请勿近似或四舍五入；请提供精确表达式。", "solution": "在尝试给出任何解答之前，将首先对问题陈述进行严格的验证过程。\n\n### 步骤 1：提取已知条件\n- **领域**：基础局部比对搜索工具（BLAST），种子阶段。\n- **种子**：一个长度为 $w$ 的固定连续词。\n- **字母表**：一个大小为 $|\\Sigma|$ 的有限集合 $\\Sigma$。\n- **数据库**：一个长度为 $D$ 的单个序列。\n- **概率模型**：数据库中的每个位置都是从字母表 $\\Sigma$ 上的均匀分布中独立同分布（i.i.d.）地随机抽取的。\n- **命中定义**：种子与数据库中一个长度为 $w$ 的连续子串的精确匹配。\n- **明确假设**：数据库中长度为 $w$ 的子串的 $D - w + 1$ 个可能的起始位置被视为独立的试验。\n- **目标**：推导数据库中包含至少一次命中的概率的闭式表达式。该表达式必须用 $D$、$w$ 和 $|\\Sigma|$ 表示。\n\n### 步骤 2：使用提取的已知条件进行验证\n根据有效性标准对问题进行评估。\n\n1.  **科学依据**：该问题描述了一个用于分析序列比对统计的简化但标准的概率模型。BLAST 算法及其基于种子的启发式方法是计算生物学中的基本概念。将序列建模为独立同分布的随机变量是该领域中常见的一阶近似。该问题具有科学依据。\n2.  **适定性**：该问题是适定的。它要求在一个完全指定的模型下计算一个特定的概率。所有必要的参数（$D$、$w$、 $|\\Sigma|$）都以符号形式给出。目标是明确的。明确指示假设试验独立，虽然这是对重叠子串真实世界情景的简化，但它消除了歧义，使问题具有唯一解。这个假设是要分析的模型的一个特征，而不是问题陈述中的缺陷。\n3.  **客观性**：问题以精确、客观和数学化的语言陈述。它不包含主观或基于意见的内容。\n\n### 步骤 3：结论与行动\n该问题被判定为**有效**。这是一个基于生物信息学中标准简化模型的自洽、一致且适定的问题。开始求解。\n\n目标是找到在长度为 $D$ 的数据库序列中，观察到至少一次与长度为 $w$ 的固定种子的精确匹配的概率。\n\n设 $A$ 为数据库中包含至少一次命中的事件。在计算上，首先计算其补事件 $A^c$ 的概率会更直接，该事件为数据库中不包含任何命中。然后，所求概率由关系式 $P(A) = 1 - P(A^c)$ 给出。\n\n数据库序列的长度为 $D$。长度为 $w$ 的连续子串可以从位置 $1$ 到 $D - w + 1$ 的任何位置开始。我们假设 $D \\geq w$，否则长度为 $w$ 的子串不存在，命中的概率显然为 $0$。我们将长度为 $w$ 的子串的可能起始位置总数视为试验次数，即 $N = D - w + 1$。\n\n我们首先确定单次试验中发生命中的概率。一次试验包括将固定种子与数据库中一个特定的长度为 $w$ 的子串进行比较。设种子为 $s_1 s_2 \\dots s_w$，数据库子串为 $d_1 d_2 \\dots d_w$。如果对于所有 $i \\in \\{1, 2, \\dots, w\\}$ 都有 $s_i = d_i$，则发生一次命中。\n\n根据模型，数据库中的每个字符 $d_i$ 都是从大小为 $|\\Sigma|$ 的字母表 $\\Sigma$ 中独立且均匀地抽取的。单个字符 $d_i$ 与固定种子相应字符 $s_i$ 匹配的概率是 $\\frac{1}{|\\Sigma|}$。\n\n由于数据库子串内的字符是独立抽取的，因此子串的所有 $w$ 个字符都与种子匹配的概率是单个字符匹配概率的乘积。设 $p$ 为单次试验中发生命中的概率。\n$$p = \\left(\\frac{1}{|\\Sigma|}\\right) \\times \\left(\\frac{1}{|\\Sigma|}\\right) \\times \\dots \\times \\left(\\frac{1}{|\\Sigma|}\\right) \\quad (w \\text{ 次})$$\n$$p = \\left(\\frac{1}{|\\Sigma|}\\right)^{w} = \\frac{1}{|\\Sigma|^w}$$\n\n事件 $A^c$ 是在所有 $N$ 个可能的起始位置上都没有发生命中的事件。问题明确指出这 $N$ 次试验应被视为独立的。设 $E_i$ 为在第 $i$ 个起始位置发生命中的事件。我们要求解的是 $P(\\bigcap_{i=1}^{N} E_i^c)$。\n由于试验的独立性：\n$$P(A^c) = P(\\text{试验 1 未命中 且 试验 2 未命中 } \\dots \\text{ 且 试验 } N \\text{ 未命中})$$\n$$P(A^c) = \\prod_{i=1}^{N} P(E_i^c)$$\n\n在任何单次试验中不发生命中的概率是 $P(E_i^c) = 1 - P(E_i) = 1 - p$。\n$$P(E_i^c) = 1 - \\frac{1}{|\\Sigma|^w}$$\n由于对于所有起始位置，概率模型都是相同的，所以 $P(E_i^c)$ 对所有 $i$ 都相同。因此，在 $N$ 次试验中均未发生命中的概率是：\n$$P(A^c) = (1 - p)^N = \\left(1 - \\frac{1}{|\\Sigma|^w}\\right)^{N}$$\n代入 $N = D - w + 1$：\n$$P(A^c) = \\left(1 - \\frac{1}{|\\Sigma|^w}\\right)^{D-w+1}$$\n\n最后，至少发生一次命中的概率 $P(A)$ 是：\n$$P(A) = 1 - P(A^c) = 1 - \\left(1 - \\frac{1}{|\\Sigma|^w}\\right)^{D-w+1}$$\n这就是在指定模型及其独立性简化假设下，数据库包含至少一次命中的概率的闭式表达式。此表达式在 $D \\ge w$ 时有效。如果 $D < w$，则 $D-w+1 \\le 0$，这意味着试验次数为 0 次。在 0 次试验中发生事件的概率为 0。当 $D-w+1=0$ 时，我们的公式正确地给出 $1 - (\\dots)^0 = 1 - 1 = 0$。", "answer": "$$\\boxed{1 - \\left(1 - \\frac{1}{|\\Sigma|^{w}}\\right)^{D-w+1}}$$", "id": "2434603"}, {"introduction": "虽然 BLAST 因其速度而广受欢迎，但这种速度是通过采用“种子-延伸”的启发式方法实现的，这是一种权衡：它牺牲了寻找最优比对的保证。与之相比，Smith-Waterman 算法通过动态规划确保找到得分最高的局部比对，但速度要慢得多。这个练习旨在通过一个具体的例子，让你亲手构建一个被 Smith-Waterman 算法找到但会被 BLAST 的种子策略错过的序列对，从而深刻理解这一核心的算法设计权衡 [@problem_id:2434642]。", "problem": "您正在比较两种局部序列比对方法：Smith–Waterman (SW) 动态规划算法和基本局部比对搜索工具 (BLAST)。考虑核苷酸 BLAST (BLASTN)，其在种子、延伸和评估阶段配置了以下固定的架构和参数：种子阶段要求在正链上至少存在一个长度为 $k=11$ 的精确词匹配（单次命中种子法；无邻近词）；延伸阶段仅从此类种子开始；如果从未出现种子，则评估阶段无关紧要。低复杂度过滤已禁用。SW 算法通过动态规划计算最优局部比对分数，不使用任何种子启发式方法。使用仿射空位罚分模型：匹配得分 $+1$，错配罚分 $-1$，空位开放罚分 $-2$，空位延伸罚分 $-1$。\n\n您的任务是找出一个候选对，该候选对由一个查询序列和一个数据库序列组成。这对序列满足以下条件：Smith–Waterman 算法能以正的局部分数对其进行比对，但 BLAST 会因为其种子启发式方法在两个序列之间找不到共享的精确 $11$-mer 而错过它。\n\n假设：\n- 所有比较仅在正链上进行（不考虑反向互补链）。\n- BLAST 精确使用上述固定的单次命中精确词种子法，词大小为 $k=11$。\n\n只选择一个选项。\n\nA. \n- 查询序列 $Q_A$: 5'- ACGTACGTACGTACG -3' \n- 数据库序列 $D_A$: 5'- ACGTACGAACGTACG -3'\n\nB.\n- 查询序列 $Q_B$: 5'- TTGATTACAGATTCC -3'\n- 数据库序列 $D_B$: 5'- AAGATTACAGATTGG -3'\n\nC.\n- 查询序列 $Q_C$: 5'- CGTACGTAGCTAGGTT -3'\n- 数据库序列 $D_C$: 5'- CGTACGTAGCTAAATT -3'\n\nD.\n- 查询序列 $Q_D$: 5'- GCAAATTTCCCGGG -3'\n- 数据库序列 $D_D$: 5'- GCAAATTTCCCAGG -3'\n\n哪个选项满足 Smith–Waterman 能以正的局部分数比对该序列对，但 BLAST 会因种子启发式方法而错过它的要求？", "solution": "任务是找出一对序列，一个查询序列 $Q$ 和一个数据库序列 $D$，它们同时满足两个不同的条件：\n$1$. 由 Smith–Waterman (SW) 算法计算出的最优局部比对分数为正。\n$2$. 配置了词大小为 $k=11$ 的基本局部比对搜索工具 (BLAST) 无法找到比对，因为没有长度为 $k=11$ 的精确共享子串作为种子。\n\n给定的仿射空位罚分模型是：匹配得分 $+1$，错配罚分 $-1$，空位开放罚分 $-2$，空位延伸罚分 $-1$。我们将根据这两个条件分析每个提供的选项。\n\n**选项 A：**\n查询序列 $Q_A$: 5'-ACGTACGTACGTACG-3'\n数据库序列 $D_A$: 5'-ACGTACGAACGTACG-3'\n\n**条件 2 (BLAST 种子)：**\n两个序列的长度均为 $15$ 个核苷酸。我们比较 $Q_A$ 和 $D_A$ 以找到最长公共子串。\n$Q_A$: `ACGTACG` `T` `ACGTACG`\n$D_A$: `ACGTACG` `A` `ACGTACG`\n这两个序列仅在位置 $8$ 上不同。任何包含位置 $8$ 的子串都不可能是两个序列之间的精确匹配。最长可能的共享子串是不跨越这个错配的子串。错配前的最长共享子串是 `ACGTACG`，其长度为 $7$。错配后的最长共享子串也是 `ACGTACG`，其长度为 $7$。\n因此，对于序列对 $(Q_A, D_A)$，最长公共子串的长度为 $7$。由于要求的种子长度是 $k=11$，而 $7 < 11$，因此不存在长度为 $11$ 的精确词匹配。因此，BLAST 种子启发式方法将失败，BLAST 会错过这个比对。该选项满足第二个条件。\n\n**条件 1 (Smith–Waterman 分数)：**\n现在我们必须验证最优局部比对分数是否为正。Smith–Waterman 算法寻找得分最高的局部比对。只需证明*任何*具有正分数的局部比对即可，因为最优分数必须大于或等于该值。考虑在整个序列长度上的简单无空位比对：\n5'-ACGTACGTACGTACG-3'\n5'-ACGTACGAACGTACG-3'\n该比对包含 $14$ 个匹配对和 $1$ 个错配。使用给定的评分方案（匹配 $= +1$，错配 $= -1$），此比对的分数为 $(14 \\times (+1)) + (1 \\times (-1)) = 14 - 1 = 13$。\n由于我们找到了一个分数为 $13$ 的局部比对，且 $13 > 0$，因此 Smith–Waterman 找到的最优局部比对分数必须至少为 $13$，所以是正数。该选项满足第一个条件。\n\n**A 的结论：** 该选项满足两个条件。**正确**。\n\n**选项 B：**\n查询序列 $Q_B$: 5'-TTGATTACAGATTCC-3'\n数据库序列 $D_B$: 5'-AAGATTACAGATTGG-3'\n\n**条件 2 (BLAST 种子)：**\n我们搜索长度为 $k=11$ 的公共子串。\n$Q_B$: `TT` `GATTACAGATT` `CC`\n$D_B$: `AA` `GATTACAGATT` `GG`\n子串 `GATTACAGATT` 在两个序列中都存在。其长度为 $11$。这个精确匹配可以作为 BLAST 的有效种子。因此，BLAST 不会错过这个比对。\n\n**B 的结论：** 该选项不满足第二个条件。**不正确**。\n\n**选项 C：**\n查询序列 $Q_C$: 5'-CGTACGTAGCTAGGTT-3'\n数据库序列 $D_C$: 5'-CGTACGTAGCTAAATT-3'\n\n**条件 2 (BLAST 种子)：**\n我们搜索长度为 $k=11$ 的公共子串。\n$Q_C$: `CGTACGTAGCTA` `GGTT`\n$D_C$: `CGTACGTAGCTA` `AATT`\n子串 `CGTACGTAGCTA` 在两个序列中都存在，其长度为 $12$。由于 $12 \\ge k=11$，因此至少存在一个长度为 $11$ 的共享词（例如，前缀 `CGTACGTAGCT`）。BLAST 会找到这个种子并继续进行比对。\n\n**C 的结论：** 该选项不满足第二个条件。**不正确**。\n\n**选项 D：**\n查询序列 $Q_D$: 5'-GCAAATTTCCCGGG-3'\n数据库序列 $D_D$: 5'-GCAAATTTCCCAGG-3'\n\n**条件 2 (BLAST 种子)：**\n我们搜索长度为 $k=11$ 的公共子串。\n$Q_D$: `GCAAATTTCCC` `GGG`\n$D_D$: `GCAAATTTCCC` `AGG`\n子串 `GCAAATTTCCC` 在两个序列中都存在，其长度恰好为 $11$。这是一个有效的种子词。BLAST 会从这个种子开始比对。\n\n**D 的结论：** 该选项不满足第二个条件。**不正确**。\n\n根据分析，只有选项 A 中的序列对会被 Smith–Waterman 赋予正分，但由于其种子启发式方法的失败，会被指定的 BLAST 配置错过。", "answer": "$$\\boxed{A}$$", "id": "2434642"}, {"introduction": "从理论转向实践，一个强大的生物信息学工具必须适应生物数据的真实复杂性。对于核酸序列而言，一个关键特征是其双链结构，这意味着有意义的匹配可能存在于查询序列与数据库序列的反向互补链之间。本练习将挑战你像算法设计者一样思考，评估不同的策略，以修改 BLAST 的种子生成机制来可靠地发现这些反向互补匹配，这是 BLASTN 等工具不可或缺的功能 [@problem_id:2434613]。", "problem": "您正在为基本局部比对搜索工具 (BLAST) 的播种阶段设计一项修改，该修改针对核苷酸查询序列，旨在确保能够发现与核苷酸数据库中反向互补区域的高分比对，同时保持扩展和评估阶段不变。假设使用标准的BLAST架构，包含三个阶段：播种、扩展和评估；播种阶段使用长度为 $k$ 的精确匹配（即 $k$-mers）或间隔种子来触发扩展，而扩展和评估只对播种阶段提供的候选位置进行操作。该数据库包含基因组序列的单链表示，这些序列可能含有与查询序列的反向互补序列同源的区域。您必须仅修改播种机制，以保证对反向互补匹配的灵敏度，同时避免假阳性的增加超过对称链覆盖所隐含的水平。以下哪项播种修改方案满足此要求？\n\nA. 根据原始查询序列及其反向互补序列构建种子索引；像往常一样搜索数据库，将任一组查询种子都视为扩展的有效触发条件。\n\nB. 在索引期间反转每个数据库序列（不进行核苷酸互补），并且只使用原始查询种子；接受在原始数据库或反转数据库中的种子命中。\n\nC. 使用对称的间隔种子模式（在位置上是回文的），以便在不生成反向互补种子或索引反向互补数据库链的情况下，隐式捕获反向互补命中。\n\nD. 增加字长 $k$，使得随机的反向互补匹配变得更稀少，从而更具区分度，以便在不改变播种逻辑的情况下实现有效检测。\n\nE. 通过六框翻译将查询序列和数据库都翻译成氨基酸，并在翻译后的序列上运行蛋白质-蛋白质BLAST播种阶段，以间接捕获反向互补关系。\n\nF. 对每个数据库序列，将其反向互补序列作为一个额外的目标链用于播种；仅从原始查询序列构建种子，并允许在原始数据库链或反向互补数据库链上进行播种，扩展和评估阶段保持不变。\n\n选择所有适用的选项。", "solution": "问题要求评估针对核苷酸序列的基本局部比对搜索工具 (BLAST) 播种阶段的修改方案。目标是能够发现与数据库序列反向互补序列的比对，其约束条件是只改变播种机制，扩展和评估阶段保持不变，并且假阳性不会被不当增加。\n\n首先，我们来确定基本原理。一个核苷酸查询序列（我们表示为 $Q$）可以与数据库序列 $S$ 以两种方式进行比对。第一种是直接比对，或称正向链比对。第二种是反向互补比对，它对应于查询序列 $Q$ 与数据库序列的反向互补序列（表示为 $S^{RC}$）的比对。\n\n两个序列之间的比对是一种对称关系。具体来说，序列 $A$ 和序列 $B$ 之间的比对等效于序列 $B$ 和序列 $A$ 之间的比对。将此原理应用于反向互补情况， $Q$ 和 $S^{RC}$ 之间的比对在计算上和生物学上等效于查询序列的反向互补序列 $Q^{RC}$ 与原始数据库序列 $S$ 之间的比对。\n\nBLAST算法通过播种阶段启动比对发现。该阶段识别出高度相似的短区域（种子），然后将其传递给扩展阶段。为了让算法能够发现 $Q$ 和 $S^{RC}$ 之间的比对，播种阶段必须能够在这两个序列之间产生一个种子命中。鉴于上述对称性，这可以通过以下两种等效的、经典策略之一来实现：\n\n1.  **扩充数据库：** 从查询序列 $Q$ 生成种子，并在一个包含原始数据库序列 $\\{S_i\\}$ 及其反向互补序列 $\\{S_i^{RC}\\}$ 的扩充搜索空间中进行搜索。$Q$ 和 $S_i^{RC}$ 之间的种子命中将触发针对这对序列的扩展阶段。\n2.  **扩充查询序列：** 从原始查询序列 $Q$ 及其反向互补序列 $Q^{RC}$ 两者生成种子。在原始数据库 $\\{S_i\\}$ 中搜索这组合并的种子。$Q^{RC}$ 和 $S_i$ 之间的种子命中将指示一个潜在的反向互补比对。然后扩展阶段将继续进行，将 $Q^{RC}$ 与 $S_i$ 进行比对（或者等效地，将 $Q$ 与 $S_i^{RC}$ 进行比对）。\n\n这两种策略都有效地将种子的搜索空间扩大了一倍，相应地，随机种子命中的期望数量也增加了一倍。这种增加是实现“对称链覆盖”所固有且不可避免的代价，因此满足了问题中关于不当增加假阳性的约束。关于扩展和评估阶段“保持不变”的约束，应解释为这些算法的核心逻辑没有被修改，但它们可以根据播种阶段确定的适当序列对（例如，$Q$ 和 $S^{RC}$）被调用。\n\n现在，我们将根据这些原理评估每个提议的修改方案。\n\n**选项A：根据原始查询序列及其反向互补序列构建种子索引；像往常一样搜索数据库，将任一组查询种子都视为扩展的有效触发条件。**\n\n这个提议是上述第二种经典策略（扩充查询序列）的直接实现。它正确地修改了种子集合，使其包含来自 $Q^{RC}$ 的种子，从而能够检测到与正向数据库链 $S$ 的命中。“保持不变”的扩展阶段将由来自 $Q^{RC}$ 的种子命中 $S$ 所触发，这正确地识别了一个反向互补比对的位点。这个方法是合理的，并且是标准实践。\n\n**结论：正确。**\n\n**选项B：在索引期间反转每个数据库序列（不进行核苷酸互补），并且只使用原始查询种子；接受在原始数据库或反转数据库中的种子命中。**\n\n这个提议根本上是错误的。它建议在 $S$ 的反向序列（表示为 $S_{rev}$）中搜索来自 $Q$ 的种子。反向序列与反向互补序列 $S^{RC}$ 不同。在序列同源性的背景下，$Q$ 和 $S_{rev}$ 之间的匹配没有标准的生物学解释。反向互补的过程涉及两个操作：反转序列顺序和互补核苷酸（A↔T, G↔C）。此选项省略了关键的互补步骤，因此将无法找到合法的反向互补同源性。\n\n**结论：错误。**\n\n**选项C：使用对称的间隔种子模式（在位置上是回文的），以便在不生成反向互补种子或索引反向互补数据库链的情况下，隐式捕获反向互补命中。**\n\n这一说法严重夸大，并且对于任意的回文模式通常是错误的。间隔种子由“匹配”和“不关心”位置的模式定义。回文模式意味着该模式正向和反向读取都相同。虽然可以设计复杂的间隔种子模式集（通常称为链对称或互补对称种子）来提高对反向互补匹配的灵敏度，但简单地使用单个回文模式并不能“隐式捕获”它们。一个来自查询序列 $Q$ 且匹配回文模式的种子，通常不是一个来自 $Q^{RC}$ 且匹配相同模式的种子的反向互补序列。这个提议的机制不是一个通用的解决方案，也不能保证有效。\n\n**结论：错误。**\n\n**选项D：增加字长 $k$，使得随机的反向互补匹配变得更稀少，从而更具区分度，以便在不改变播种逻辑的情况下实现有效检测。**\n\n这个选项混淆了特异性和灵敏度。增加种子字长 $k$ 会降低随机匹配的概率，从而提高所找到种子的特异性。这对于减少噪音是有益的。然而，核心问题在于灵敏度：原始的播种逻辑（在 $S$ 中搜索来自 $Q$ 的种子）根本无法检测到反向互补匹配。仅仅增加 $k$ 并不能改变这一逻辑。无论反向互补匹配可能多么具有区分度，都不会被找到。此修改未能解决实现检测这一基本要求。\n\n**结论：错误。**\n\n**选项E：通过六框翻译将查询序列和数据库都翻译成氨基酸，并在翻译后的序列上运行蛋白质-蛋白质BLAST播种阶段，以间接捕获反向互补关系。**\n\n这描述的是TBLASTX算法，而不是对核苷酸BLAST的修改。六框翻译会从正向链和反向互补链生成蛋白质序列。在这些翻译后的集合之间进行蛋白质-蛋白质BLAST确实可以找到反向互补同源性。然而，这违反了“扩展和评估阶段[保持]不变”的严格约束。扩展和评估现在将作用于氨基酸序列，使用蛋白质评分矩阵（例如，BLOSUM$62$）和不同的空位罚分，这与问题中指定的基于核苷酸的比对系统相比，是一个根本性的改变。\n\n**结论：错误。**\n\n**选项F：对每个数据库序列，将其反向互补序列作为一个额外的目标链用于播种；仅从原始查询序列构建种子，并允许在原始数据库链或反向互补数据库链上进行播种，扩展和评估阶段保持不变。**\n\n这个提议是上述第一种经典策略（扩充数据库）的直接实现。它将搜索空间扩展到包括数据库中每个 $S$ 的 $S^{RC}$，同时仅使用来自原始查询序列 $Q$ 的种子。来自 $Q$ 的种子与 $S^{RC}$ 上的某个位置的命中，正确地识别了一个反向互补比对的候选位置，然后可以由“保持不变”的扩展算法来处理。这个方法在算法上是合理的，并且在结果上与选项A等效。\n\n**结论：正确。**", "answer": "$$\\boxed{AF}$$", "id": "2434613"}]}