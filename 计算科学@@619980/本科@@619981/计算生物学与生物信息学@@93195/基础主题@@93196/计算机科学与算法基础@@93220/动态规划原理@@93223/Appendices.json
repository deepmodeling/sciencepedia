{"hands_on_practices": [{"introduction": "为何动态规划在序列比对中至关重要？我们能否用更简单的“贪心”策略来逐步构建最佳比对？本练习将通过一个具体的反例，让您直观地感受到局部最优选择并不总能导向全局最优解。通过亲手计算和比较贪心策略与Needleman-Wunsch算法所得的分数，您将深刻理解动态规划在保证全局最优性方面的核心价值 [@problem_id:2387141]。", "problem": "在计算生物学和生物信息学中，动态规划原理的一个重要应用是全局序列比对。考虑脱氧核糖核酸字母表 $\\Sigma=\\{\\texttt{A},\\texttt{C},\\texttt{G},\\texttt{T}\\}$，并定义一个替换评分函数 $s:\\Sigma\\times\\Sigma\\to\\mathbb{R}$ 为：如果 $x=y$，则 $s(x,y)=+2$；如果 $x\\neq y$，则 $s(x,y)=-1$。对任何字母与一个空位的比对，使用线性空位罚分 $g=-2$。\n\n设两个序列为 $X=\\texttt{ACG}$ 和 $Y=\\texttt{AG}$。您将比较两种策略：\n\n1. 使用全局比对的动态规划原理（Needleman–Wunsch 算法）计算出的全局最优比对，该方法依赖于前缀的最优子结构特性。\n2. 定义如下的贪婪比对策略：在每一步，给定下一个未比对的字母 $x_i$ 和 $y_j$，从以下三种可能性中选择具有最高即时分数的行为：将 $x_i$ 与 $y_j$ 比对，得分为 $s(x_i,y_j)$；将 $x_i$ 与一个空位比对，得分为 $g$；或将 $y_j$ 与一个空位比对，得分为 $g$。如果出现平分，优先选择比对 $x_i$ 与 $y_j$；如果仍然平分，优先选择将 $x_i$ 与空位比对，而不是将 $y_j$ 与空位比对。继续此过程，直到两个序列都完全比对。\n\n仅使用动态规划原理和上述定义（不使用任何未提供的公式），计算：\n- 在 $s$ 和 $g$ 规则下比对 $X$ 和 $Y$ 的最优全局比对分数 $F$，\n- 通过上述贪婪规则产生的贪婪比对分数 $G$，\n- 以及最后的差值 $\\Delta=F-G$。\n\n最终答案只报告 $\\Delta$ 的值。无需四舍五入，也无需单位。", "solution": "任务要求基于提供的评分方案——匹配得分为 $s(x,y)=+2$，错配得分为 $s(x,y)=-1$，线性空位罚分为 $g=-2$——计算序列 $X=\\texttt{ACG}$ 和 $Y=\\texttt{AG}$ 的两种比对分数。\n\n首先，我们使用动态规划原理计算最优全局比对分数 $F$。设 $m$ 为序列 $X$ 的长度，$n$ 为序列 $Y$ 的长度。这里，$m=3$，$n=2$。我们定义一个矩阵 $F(i,j)$，表示前缀 $X[1..i]$ 和 $Y[1..j]$ 最优比对的分数。$F(i,j)$ 的值源于最优子结构特性，该特性规定前缀的最优比对必须由更小前缀的最优比对构建而来。\n\n递推关系为：\n$$F(i,j) = \\max\\left\\{ F(i-1, j-1) + s(X[i], Y[j]),\\; F(i-1, j) + g,\\; F(i, j-1) + g \\right\\}$$\n基本条件是前缀与空字符串的比对：\n$F(0,0) = 0$\n$F(i,0) = i \\times g$ (对于 $i > 0$)\n$F(0,j) = j \\times g$ (对于 $j > 0$)\n\n我们构建一个 $(m+1) \\times (n+1)$ 即 $4 \\times 3$ 的矩阵。\n初始化：\n$F(0,0) = 0$\n$F(1,0) = 1 \\times (-2) = -2$\n$F(2,0) = 2 \\times (-2) = -4$\n$F(3,0) = 3 \\times (-2) = -6$\n$F(0,1) = 1 \\times (-2) = -2$\n$F(0,2) = 2 \\times (-2) = -4$\n\n填充矩阵，其中 $i \\in \\{1,2,3\\}$ 且 $j \\in \\{1,2\\}$：\n$F(1,1) = \\max\\{F(0,0)+s(\\texttt{A},\\texttt{A}), F(0,1)+g, F(1,0)+g\\} = \\max\\{0+2, -2-2, -2-2\\} = 2$。\n\n$F(2,1) = \\max\\{F(1,0)+s(\\texttt{C},\\texttt{A}), F(1,1)+g, F(2,0)+g\\} = \\max\\{-2+(-1), 2+(-2), -4+(-2)\\} = \\max\\{-3, 0, -6\\} = 0$。\n\n$F(3,1) = \\max\\{F(2,0)+s(\\texttt{G},\\texttt{A}), F(2,1)+g, F(3,0)+g\\} = \\max\\{-4+(-1), 0+(-2), -6+(-2)\\} = \\max\\{-5, -2, -8\\} = -2$。\n\n$F(1,2) = \\max\\{F(0,1)+s(\\texttt{A},\\texttt{G}), F(0,2)+g, F(1,1)+g\\} = \\max\\{-2+(-1), -4+(-2), 2+(-2)\\} = \\max\\{-3, -6, 0\\} = 0$。\n\n$F(2,2) = \\max\\{F(1,1)+s(\\texttt{C},\\texttt{G}), F(1,2)+g, F(2,1)+g\\} = \\max\\{2+(-1), 0+(-2), 0+(-2)\\} = \\max\\{1, -2, -2\\} = 1$。\n\n$F(3,2) = \\max\\{F(2,1)+s(\\texttt{G},\\texttt{G}), F(2,2)+g, F(3,1)+g\\} = \\max\\{0+2, 1+(-2), -2+(-2)\\} = \\max\\{2, -1, -4\\} = 2$。\n\n完整的DP矩阵如下：\n$$\n\\begin{array}{c|ccc}\n & \\text{ } & \\texttt{A} & \\texttt{G} \\\\\n\\hline\n\\text{ } & 0 & -2 & -4 \\\\\n\\texttt{A} & -2 & 2 & 0 \\\\\n\\texttt{C} & -4 & 0 & 1 \\\\\n\\texttt{G} & -6 & -2 & 2\n\\end{array}\n$$\n最优全局比对分数是右下角单元格的值，$F = F(3,2) = 2$。\n\n接下来，我们计算贪婪比对分数 $G$。贪婪策略考虑下一个未比对的字母，并选择具有最大即时分数的行为。设 $i$ 和 $j$ 是指向 $X$ 和 $Y$ 中当前字符的指针，从 $i=1, j=1$ 开始。总分 $G$ 初始化为 $0$。\n\n第 1 步：$i=1, j=1$。当前字母是 $X_1=\\texttt{A}, Y_1=\\texttt{A}$。\n- 行为 1 (比对 $X_1$ 和 $Y_1$)：分数 $s(\\texttt{A},\\texttt{A}) = +2$。\n- 行为 2 (比对 $X_1$ 和空位)：分数 $g = -2$。\n- 行为 3 (比对 $Y_1$ 和空位)：分数 $g = -2$。\n最大分数是 $2$。我们比对 $\\texttt{A}$ 和 $\\texttt{A}$。\n$G$ 变为 $0+2=2$。我们将两个指针都前移到 $i=2, j=2$。比对结果为 $\\texttt{A}$ -- $\\texttt{A}$。\n\n第 2 步：$i=2, j=2$。当前字母是 $X_2=\\texttt{C}, Y_2=\\texttt{G}$。\n- 行为 1 (比对 $X_2$ 和 $Y_2$)：分数 $s(\\texttt{C},\\texttt{G}) = -1$。\n- 行为 2 (比对 $X_2$ 和空位)：分数 $g = -2$。\n- 行为 3 (比对 $Y_2$ 和空位)：分数 $g = -2$。\n最大分数是 $-1$。我们比对 $\\texttt{C}$ 和 $\\texttt{G}$。\n$G$ 变为 $2+(-1)=1$。我们将两个指针都前移到 $i=3, j=3$。比对结果为 $\\texttt{AC}$ -- $\\texttt{AG}$。\n\n第 3 步：$i=3, j=3$。由于 $j > n=2$，序列 $Y$ 已用尽。\n唯一剩下的操作是将序列 $X$ 的剩余部分与空位比对。剩下的字符是 $X_3=\\texttt{G}$。\n我们将 $\\texttt{G}$ 与一个空位比对，得分为 $g=-2$。\n$G$ 变为 $1+(-2)=-1$。我们将 $i$ 前移到 $4$。比对结果为 $\\texttt{ACG}$ -- $\\texttt{AG-}$。\n\n现在两个序列都已完全比对。最终的贪婪比对分数为 $G=-1$。\n\n最后，我们计算差值 $\\Delta=F-G$。\n$F = 2$\n$G = -1$\n$\\Delta = F - G = 2 - (-1) = 3$。\n\n通过动态规划得到的最优分数与通过指定贪婪策略得到的分数之差为 $3$。", "answer": "$$\n\\boxed{3}\n$$", "id": "2387141"}, {"introduction": "动态规划不仅限于直接的序列比对，它更是一种强大的问题解决范式。这个练习要求您在一个DNA序列中找出最长的回文子序列——一个与其逆序相同的子序列。解决此问题的巧妙之处在于，您可以将它转化为一个我们熟悉的最长公共子序列（LCS）问题，即比较原始序列与其自身的逆序序列。这项实践将锻炼您识别问题本质、并将其转化为可用标准算法求解的能力，这是计算思维中的一项关键技能 [@problem_id:2387070]。", "problem": "一个脱氧核糖核酸 (DNA) 片段被建模为字母表 $\\{\\text{A}, \\text{C}, \\text{G}, \\text{T}\\}$ 上的一个有限字符串 $S$。$S$ 的一个子序列是通过删除 $S$ 中的零个或多个字符而不改变其余字符的顺序得到的。回文串是指一个与其反向字符串完全相同的字符串。考虑长度为 10 的 DNA 字符串 $S = \\text{ACGTCAGCAT}$。\n\n仅使用上述定义和动态规划原理，确定 $S$ 的最长回文子序列（不一定是连续的）的长度。将长度报告为单个整数，不带单位。无需四舍五入。", "solution": "该问题是求给定字符串 $S$ 的最长回文子序列 (LPS) 的长度。算法理论中的一个基本结果指出，字符串 $S$ 的最长回文子序列 (LPS) 的长度等价于 $S$ 与其反向字符串 $S_{rev}$ 的最长公共子序列 (LCS) 的长度。我们将使用动态规划来解决这个等价的 LCS 问题。\n\n设给定字符串为 $S = \\text{ACGTCAGCAT}$。其长度为 $n=10$。\n$S$ 的反向字符串是 $S_{rev} = \\text{TACGACGTCA}$。\n\n令 $L(i, j)$ 表示 $S$ 的长度为 $i$ 的前缀（即 $S[1..i]$）与 $S_{rev}$ 的长度为 $j$ 的前缀（即 $S_{rev}[1..j]$）的最长公共子序列的长度。我们的目标是计算 $L(n, n) = L(10, 10)$。\n\n对于 $i, j \\in \\{1, \\dots, n\\}$，$L(i, j)$ 的动态规划递推关系如下：\n$$\nL(i, j) =\n\\begin{cases}\n    L(i-1, j-1) + 1 & \\text{if } S[i] = S_{rev}[j] \\\\\n    \\max(L(i-1, j), L(i, j-1)) & \\text{if } S[i] \\neq S_{rev}[j]\n\\end{cases}\n$$\n边界条件为对所有 $i \\in \\{0, \\dots, n\\}$ 有 $L(i, 0) = 0$，以及对所有 $j \\in \\{0, \\dots, n\\}$ 有 $L(0, j) = 0$。\n\n我们构建一个 $(n+1) \\times (n+1)$ 的表格来存储 $L(i, j)$ 的值。表格的行由 $S$ 的字符索引（从 $i=1$到 $10$），列由 $S_{rev}$ 的字符索引（从 $j=1$ 到 $10$）。第 0 行和第 0 列被初始化为 0。\n\n令 $S_i$ 为 $S$ 的第 $i$ 个字符，$(S_{rev})_j$ 为 $S_{rev}$ 的第 $j$ 个字符。\n$S = \\text{A}_1 \\text{C}_2 \\text{G}_3 \\text{T}_4 \\text{C}_5 \\text{A}_6 \\text{G}_7 \\text{C}_8 \\text{A}_9 \\text{T}_{10}$\n$S_{rev} = \\text{T}_1 \\text{A}_2 \\text{C}_3 \\text{G}_4 \\text{A}_5 \\text{C}_6 \\text{G}_7 \\text{T}_8 \\text{C}_9 \\text{A}_{10}$\n\n该表格填充如下：\n$$\n\\begin{array}{c|ccccccccccc}\nL(i,j) & \\text{} & \\text{T}_1 & \\text{A}_2 & \\text{C}_3 & \\text{G}_4 & \\text{A}_5 & \\text{C}_6 & \\text{G}_7 & \\text{T}_8 & \\text{C}_9 & \\text{A}_{10} \\\\\n\\hline\n\\text{} & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\\text{A}_1 & 0 & 0 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\\\\n\\text{C}_2 & 0 & 0 & 1 & 2 & 2 & 2 & 2 & 2 & 2 & 2 & 2 \\\\\n\\text{G}_3 & 0 & 0 & 1 & 2 & 3 & 3 & 3 & 3 & 3 & 3 & 3 \\\\\n\\text{T}_4 & 0 & 1 & 1 & 2 & 3 & 3 & 3 & 3 & 4 & 4 & 4 \\\\\n\\text{C}_5 & 0 & 1 & 1 & 2 & 3 & 3 & 4 & 4 & 4 & 5 & 5 \\\\\n\\text{A}_6 & 0 & 1 & 2 & 2 & 3 & 4 & 4 & 4 & 4 & 5 & 6 \\\\\n\\text{G}_7 & 0 & 1 & 2 & 2 & 3 & 4 & 4 & 5 & 5 & 5 & 6 \\\\\n\\text{C}_8 & 0 & 1 & 2 & 3 & 3 & 4 & 5 & 5 & 5 & 6 & 6 \\\\\n\\text{A}_9 & 0 & 1 & 2 & 3 & 3 & 4 & 5 & 5 & 5 & 6 & 7 \\\\\n\\text{T}_{10} & 0 & 1 & 2 & 3 & 3 & 4 & 5 & 5 & 6 & 6 & 7 \\\\\n\\end{array}\n$$\n让我们验证几个关键条目以确保正确性。\n-   $L(6, 10)$：$S[6] = \\text{'A'}$ 且 $S_{rev}[10] = \\text{'A'}$。因此，$L(6, 10) = L(5, 9) + 1 = 5 + 1 = 6$。\n-   $L(8, 9)$：$S[8] = \\text{'C'}$ 且 $S_{rev}[9] = \\text{'C'}$。因此，$L(8, 9) = L(7, 8) + 1 = 5 + 1 = 6$。\n-   $L(9, 10)$：$S[9] = \\text{'A'}$ 且 $S_{rev}[10] = \\text{'A'}$。因此，$L(9, 10) = L(8, 9) + 1 = 6 + 1 = 7$。\n-   $L(10, 10)$：$S[10] = \\text{'T'}$ 且 $S_{rev}[10] = \\text{'A'}$。它们不相等。因此，$L(10, 10) = \\max(L(9, 10), L(10, 9)) = \\max(7, 6) = 7$。\n\n表格中的最后一个条目 $L(10, 10)$，给出了 $S$ 和 $S_{rev}$ 的最长公共子序列 (LCS) 的长度，也就是 $S$ 的最长回文子序列 (LPS) 的长度。\n从表中可知，$L(10, 10)$ 的值为 7。\n一个可能的最长回文子序列是 $\\text{ACGAGCA}$。这可以通过回溯表格中的路径来构建。\n\n最长回文子序列的长度是 7。", "answer": "$$\\boxed{7}$$", "id": "2387070"}, {"introduction": "在生物学研究中，我们常常需要比较两个以上的序列。这个练习将挑战您将双序列比对的动态规划原理扩展到三维空间，以同时处理三个序列。您将看到，三维矩阵中任意一点的最优解都依赖于其“邻居”子问题的解，这直观地展示了动态规划思想的普适性。通过解决这个问题，您不仅能体会到动态规划的强大，也能初步认识到随着维度增加而带来的计算复杂性，这为理解更高级的多序列比对（MSA）算法奠定了概念基础 [@problem_id:2387093]。", "problem": "考虑三个基于字母表 $\\mathcal{A}=\\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$ 的脱氧核糖核酸 (DNA) 序列：$X=(\\text{A},\\text{G},\\text{C})$，$Y=(\\text{A},\\text{C})$ 和 $Z=(\\text{A},\\text{G})$。一个比对是一个列的序列，其中每一列都是 $(\\mathcal{A}\\cup\\{-\\})^{3}$ 中的一个元素，并且每列的三个条目不全是 $-$。同时，从每个序列中提取的非空位字符的总数等于其序列长度。一个比对的分数是其所有列的自定义三元组计分函数 $S$ 的得分之和，该函数取决于列中的三个条目，并且不能简化为两两得分之和。函数 $S$ 对任何三元组 $(u,v,w)\\in(\\mathcal{A}\\cup\\{-\\})^{3}$ 定义如下：\n- 如果没有空位，即 $u,v,w\\in\\mathcal{A}$，则\n  - 如果 $u=v=w$，$S(u,v,w)=\\alpha$；\n  - 如果 $u,v,w$ 中恰好有两个相等，$S(u,v,w)=\\beta$；\n  - 如果 $u$，$v$ 和 $w$ 都不同，$S(u,v,w)=\\gamma$。\n- 如果恰好有一个空位，对于字母 $a,b\\in\\mathcal{A}$，\n  - 如果 $a=b$，$S(a,b,-)=S(a,-,b)=S(-,a,b)=\\delta$，\n  - 如果 $a\\neq b$，$S(a,b,-)=S(a,-,b)=S(-,a,b)=\\epsilon$。\n- 如果恰好有两个空位，对于任何 $a\\in\\mathcal{A}$，\n  - $S(a,-,-)=S(-,a,-)=S(-,-,a)=\\zeta$。\n\n使用参数值 $\\alpha=5$，$\\beta=2$，$\\gamma=-1$，$\\delta=1$，$\\epsilon=-2$ 和 $\\zeta=-3$。在此方案下，计算 $X$，$Y$ 和 $Z$ 的最优全局三序列比对分数，其中比对分数是其所有列的 $S$ 得分之和。给出精确的整数值（不要四舍五入）。答案中不要包含单位。", "solution": "这个问题要求计算三个序列全局比对的最优分数。这是动态规划原理的经典应用。我们定义一个三维矩阵 $F$，其中 $F(i, j, k)$ 表示前缀 $X[1..i]$，$Y[1..j]$ 和 $Z[1..k]$ 比对的最大分数。序列为 $X=(\\text{A}, \\text{G}, \\text{C})$，$Y=(\\text{A}, \\text{C})$ 和 $Z=(\\text{A}, \\text{G})$，其长度分别为 $n_x=3$，$n_y=2$ 和 $n_z=2$。我们的目标是计算 $F(3, 2, 2)$。\n\n计分参数为 $\\alpha=5$，$\\beta=2$，$\\gamma=-1$，$\\delta=1$，$\\epsilon=-2$ 和 $\\zeta=-3$。\n\n$F(i, j, k)$ 的值由7种可能的先前状态中的最大值确定，这7种状态对应于7种非空的比对列类型：\n$$\nF(i, j, k) = \\max \\begin{cases}\nF(i-1, j-1, k-1) + S(x_i, y_j, z_k) & \\text{(比对 } x_i, y_j, z_k \\text{)} \\\\\nF(i-1, j-1, k) + S(x_i, y_j, -) & \\text{(比对 } x_i, y_j \\text{ 与空位)} \\\\\nF(i-1, j, k-1) + S(x_i, -, z_k) & \\text{(比对 } x_i, z_k \\text{ 与空位)} \\\\\nF(i, j-1, k-1) + S(-, y_j, z_k) & \\text{(比对 } y_j, z_k \\text{ 与空位)} \\\\\nF(i-1, j, k) + S(x_i, -, -) & \\text{(比对 } x_i \\text{ 与两个空位)} \\\\\nF(i, j-1, k) + S(-, y_j, -) & \\text{(比对 } y_j \\text{ 与两个空位)} \\\\\nF(i, j, k-1) + S(-, -, z_k) & \\text{(比对 } z_k \\text{ 与两个空位)}\n\\end{cases}\n$$\n\n**初始化**:\n与空序列比对的分数为 $0$，所以 $F(0, 0, 0) = 0$。将一个序列的前缀与两个空序列进行比对，只涉及引入空位。\n$F(i, 0, 0) = i \\times \\zeta$ for $i \\in \\{1, 2, 3\\}$。\n$F(0, j, 0) = j \\times \\zeta$ for $j \\in \\{1, 2\\}$。\n$F(0, 0, k) = k \\times \\zeta$ for $k \\in \\{1, 2\\}$。\n\n将两个序列的前缀与一个空序列进行比对，是一个标准的双序列比对问题，其中一个空位对应分数为 $\\zeta$，而一个匹配/错配对应分数为 $S(a,b,-)$。\n$F(i, j, 0) = \\max(F(i-1, j, 0) + \\zeta, F(i, j-1, 0) + \\zeta, F(i-1, j-1, 0) + S(x_i, y_j, -))$。\n类似的关系也适用于 $F(i, 0, k)$ 和 $F(0, j, k)$。\n\n我们填充 $4 \\times 3 \\times 3$ 的动态规划表 $F(i,j,k)$，其中 $i \\in [0,3], j \\in [0,2], k \\in [0,2]$。\n\n由于手动完整填充表格非常繁琐，我们将展示几个关键计算步骤并直接计算最终值。\n$F(1,1,1)$ 对应于比对 $(\\text{A})$, $(\\text{A})$, $(\\text{A})$。最优比对显然是将三者对齐，列为 $(\\text{A},\\text{A},\\text{A})$。\n$F(1,1,1) = F(0,0,0) + S(\\text{A},\\text{A},\\text{A}) = 0 + \\alpha = 5$。\n\n$F(2,1,2)$ 对应于比对 $(\\text{A},\\text{G})$, $(\\text{A})$, $(\\text{A},\\text{G})$。一个可能的高分比对是将 Gs 对齐，并将 Y 中的 A 与 X 和 Z 中的 A 对齐，但在不同的列中，这会导致空位。一个更优的策略可能是：\n$\\begin{pmatrix} \\text{A} & \\text{G} \\\\ \\text{A} & - \\\\ \\text{A} & \\text{G} \\end{pmatrix}$\n分数是 $S(\\text{A},\\text{A},\\text{A}) + S(\\text{G},-, \\text{G}) = \\alpha + \\delta = 5 + 1 = 6$。\n这对应于 $F(2,1,2) = F(1,1,1) + S(\\text{G},-, \\text{G}) = 5 + 1 = 6$。\n\n$F(3,2,2)$ 对应于比对 $(\\text{A},\\text{G},\\text{C})$, $(\\text{A},\\text{C})$, $(\\text{A},\\text{G})$。\n我们基于已知的 $F(2,1,2)=6$ 来探索最后一个单元格的计算。\n为了得到 $F(3,2,2)$，我们需要考虑所有7个前置单元格。其中一个可能性是从 $F(2,1,2)$ 转移而来。\n- 从 $F(2,1,2)$ 转移，对应添加一列，比对 $x_3=\\text{C}, y_2=\\text{C}, z_2=\\text{G}$。\n  - 添加列 $(\\text{C},\\text{C},\\text{G})$：$F(3,2,2) = F(2,1,1) + S(\\text{C},\\text{C},\\text{G})$。这需要 $F(2,1,1)$ 的值。\n  - 添加列 $(\\text{C},\\text{C},-)$：$F(3,2,2)$ 可能来自 $F(2,1,2) + S(\\text{C},\\text{C},-)$。\n    - $F(2,1,2)=6$。$S(\\text{C},\\text{C},-)$ 有一个空位且两个字母相同，得分为 $\\delta=1$。\n    - 这一步的分数为 $6 + 1 = 7$。\n\n我们来检验这个值为7的路径是否最优。\n该路径对应于比对：\n$$\n\\begin{pmatrix} \\text{A} & \\text{G} & \\text{C} \\\\ \\text{A} & - & \\text{C} \\\\ \\text{A} & \\text{G} & - \\end{pmatrix}\n$$\n这个比对的分数是：\n$S(\\text{A},\\text{A},\\text{A}) + S(\\text{G},-, \\text{G}) + S(\\text{C},\\text{C},-) = \\alpha + \\delta + \\delta = 5 + 1 + 1 = 7$。\n\n我们检查其他几个主要可能性来确认 $7$ 可能是最大值：\n- 从 $F(2,2,2)$ 转移：比对 $(\\text{C},-,-)$。$F(3,2,2) = F(2,2,2) + \\zeta$。$F(2,2,2)$ 是比对 $(\\text{A},\\text{G})$, $(\\text{A},\\text{C})$, $(\\text{A},\\text{G})$。一个可能的最优比对是：\n$$ \\begin{pmatrix} \\text{A} & \\text{G} & - \\\\ \\text{A} & - & \\text{C} \\\\ \\text{A} & \\text{G} & - \\end{pmatrix} $$\n分数是 $S(\\text{A},\\text{A},\\text{A}) + S(\\text{G},\\text{G},-) + S(-,-,\\text{C}) = \\alpha+\\delta+\\zeta = 5+1-3=3$。这不是最优的。\n另一个比对：\n$$ \\begin{pmatrix} \\text{A} & \\text{G} \\\\ \\text{A} & \\text{C} \\\\ \\text{A} & \\text{G} \\end{pmatrix} $$\n分数是 $S(\\text{A},\\text{A},\\text{A}) + S(\\text{G},\\text{C},\\text{G}) = \\alpha+\\beta = 5+2=7$。所以 $F(2,2,2) = 7$。\n那么，从 $F(2,2,2)$ 转移的得分为 $F(2,2,2) + \\zeta = 7 - 3 = 4$。这小于7。\n\n- 从 $F(3,1,2)$ 转移：比对 $(-, \\text{C}, -)$。$F(3,2,2) = F(3,1,2) + \\zeta$。这需要 $F(3,1,2)$ 的值。\n  - 比对 $(\\text{A},\\text{G},\\text{C})$, $(\\text{A})$, $(\\text{A},\\text{G})$。一个比对是：\n  $$ \\begin{pmatrix} \\text{A} & \\text{G} & \\text{C} \\\\ \\text{A} & - & - \\\\ \\text{A} & \\text{G} & - \\end{pmatrix} $$\n  分数是 $S(\\text{A},\\text{A},\\text{A}) + S(\\text{G},-, \\text{G}) + S(\\text{C},-,-) = \\alpha + \\delta + \\zeta = 5 + 1 - 3 = 3$。所以 $F(3,1,2)=3$。\n  从这个路径得到的 $F(3,2,2)$ 为 $3+\\zeta = 3-3 = 0$。\n\n- 从 $F(3,2,1)$ 转移：比对 $(-,-,\\text{G})$。$F(3,2,2) = F(3,2,1) + \\zeta$。\n  - 比对 $(\\text{A},\\text{G},\\text{C})$, $(\\text{A},\\text{C})$, $(\\text{A})$。一个比对是：\n  $$ \\begin{pmatrix} \\text{A} & \\text{G} & \\text{C} \\\\ \\text{A} & - & \\text{C} \\\\ \\text{A} & - & - \\end{pmatrix} $$\n  分数是 $S(\\text{A},\\text{A},\\text{A}) + S(\\text{G},-,-) + S(\\text{C},\\text{C},-) = \\alpha + \\zeta + \\delta = 5 - 3 + 1 = 3$。所以 $F(3,2,1)=3$。\n  从这个路径得到的 $F(3,2,2)$ 为 $3+\\zeta=3-3=0$。\n\n经过对几个主要路径的检查，分数7似乎是最高的。\n最后，我们计算 $F(3,2,2)$，完整比对的最优分数：\n$$\nF(3,2,2) = \\max \\begin{cases}\nF(2,1,1) + S(\\text{C},\\text{C},\\text{G}) = 2 + \\beta = 4 \\\\\nF(2,1,2) + S(\\text{C},\\text{C},-) = 6 + \\delta = 7 \\\\\nF(2,2,1) + S(\\text{C},-,\\text{G}) = 3 + \\epsilon = 1 \\\\\nF(3,1,1) + S(-,\\text{C},\\text{G}) = -1 + \\epsilon = -3 \\\\\nF(2,2,2) + S(\\text{C}, -, -) = 7 + \\zeta = 4 \\\\\nF(3,1,2) + S(-,\\text{C},-) = 3 + \\zeta = 0 \\\\\nF(3,2,1) + S(-, -,\\text{G}) = 3 + \\zeta = 0\n\\end{cases}\n$$\n这些值的最大值是 $7$。\n最优比对分数为 $F(3,2,2)=7$。这个最优分数是通过路径 $F(0,0,0) \\to F(1,1,1) \\to F(2,1,2) \\to F(3,2,2)$ 实现的，它对应于上面验证过的比对，其总分为7。", "answer": "$$\\boxed{7}$$", "id": "2387093"}]}