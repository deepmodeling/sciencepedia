{"hands_on_practices": [{"introduction": "在生物学中，许多过程可以被抽象为在有限资源下做出最优选择的问题。这个练习 [@problem_id:2396137] 以一个受限制性酶切启发的“找零问题”为例，这是一个经典的算法思想实验。通过这个练习，你将亲手计算并比较一个贪心策略和一个最优策略的成本，从而直观地理解为什么局部最优选择（例如，每次都选择最大的可用片段）并不总能导向全局最优解。", "problem": "在一项关于脱氧核糖核酸（DNA）工作流程中限制性酶切设计的计算机模拟规划练习中，请考虑以下抽象的零钱兑换模型。您有一个合成骨架，其中包含标准化的、串联重复的大小模块。每个模块对应一个可被特定限制性内切酶切除的片段。使用任何一种酶都会切除一个固定大小的模块，并产生 $1$ 个单位的货币成本。酶可以被使用任意次数，且模块可以按任意顺序被切除。目标是切除模块，使其总长度等于目标长度 $L$，从而留下所需的剩余构建体。可用的模块大小（以千碱基对（kbp）为单位）如下：\n- $1$ kbp,\n- $3$ kbp,\n- $4$ kbp.\n\n设目标长度为 $L = 6$ kbp。在此情景下，一种常用的贪心策略是在每一步选择不超过待切除剩余长度的那个最大的可用模块。\n\n根据上述定义，确定此贪心策略产生的总成本，以及此实例中所有有效切除序列的最小可能总成本。以单个数字报告差值（贪心总成本） $-$ （最优最小总成本）。将最终答案表示为一个不带单位的整数。", "solution": "首先检验问题陈述的科学性和逻辑合理性。\n\n**1. 提取已知条件：**\n- 问题类型：一个源于生物信息学背景（限制性酶切）的抽象零钱兑换模型。\n- 可用模块大小（面额）：$\\{1, 3, 4\\}$ 千碱基对（kbp）。\n- 成本：每次切除（模块选择）的成本为 $1$ 个单位。\n- 目标长度 ($L$)：$L = 6$ kbp。\n- 贪心策略定义：在每一步，选择不超过待切除剩余长度的那个最大的可用模块。\n- 目标：计算贪心策略产生的总成本与最小可能总成本（最优解）之间的差值。\n\n**2. 验证：**\n- 科学依据：该问题是对限制性酶切图谱的计算抽象，这是分子生物学中的一个有效概念。它在数学上等同于经典的零钱兑换问题，这是计算机科学和算法领域的一个基本主题。该问题在科学和数学上都是合理的。\n- 良定性和客观性：该问题是良定的，所有必要参数（$L$、模块大小、成本函数和贪心算法定义）都已明确说明。术语精确且客观。存在唯一的贪心解和至少一个最优解。\n- 结论：该问题是有效的。这是算法分析中的一个标准练习。\n\n**解题过程：**\n该问题要求计算两个量：特定贪心算法的成本，以及使用一组给定的面额为目标值 $L$ 凑出零钱的最优解的成本。成本定义为所用物品（模块）的数量。\n\n设可用模块大小的集合为 $S = \\{1, 3, 4\\}$。目标长度为 $L = 6$。\n\n**第一部分：计算贪心策略的成本**\n贪心策略规定，在每一步中，我们必须从 $S$ 中选择小于或等于剩余长度的那个最大模块。\n\n设 $L_{rem}$ 为待切除的剩余长度。初始时，$L_{rem} = 6$。\n\n- **步骤 1：** 当前剩余长度为 $L_{rem} = 6$。可用模块大小为 $\\{1, 3, 4\\}$。小于或等于 $6$ 的最大模块大小为 $4$。\n  - 我们切除一个大小为 $4$ kbp 的模块。\n  - 新的剩余长度为 $L_{rem} = 6 - 4 = 2$。\n  - 到目前为止产生的成本是 $1$。\n\n- **步骤 2：** 当前剩余长度为 $L_{rem} = 2$。可用模块大小为 $\\{1, 3, 4\\}$。小于或等于 $2$ 的最大模块大小为 $1$。\n  - 我们切除一个大小为 $1$ kbp 的模块。\n  - 新的剩余长度为 $L_{rem} = 2 - 1 = 1$。\n  - 总成本现在是 $1 + 1 = 2$。\n\n- **步骤 3：** 当前剩余长度为 $L_{rem} = 1$。可用模块大小为 $\\{1, 3, 4\\}$。小于或等于 $1$ 的最大模块大小为 $1$。\n  - 我们切除一个大小为 $1$ kbp 的模块。\n  - 新的剩余长度为 $L_{rem} = 1 - 1 = 0$。\n  - 总成本现在是 $2 + 1 = 3$。\n\n由于剩余长度为 $0$，过程终止。根据贪心策略，切除的模块序列为 $(4, 1, 1)$。总成本，即切除的模块数量，为 $3$。设此为 $C_{greedy}$。\n$$C_{greedy} = 3$$\n\n**第二部分：计算最优（最小）成本**\n最优解对应于找到和为 $L$ 的模块大小的线性组合，同时最小化项数。我们在寻找非负整数 $n_1, n_3, n_4$，使得：\n$$1 \\cdot n_1 + 3 \\cdot n_3 + 4 \\cdot n_4 = 6$$\n并且总成本 $C = n_1 + n_3 + n_4$ 最小化。\n\n我们可以通过系统地检查和为 $6$ 的可用模块大小的各种组合来找到最优解。\n- **组合 1：** 使用两个大小为 $3$ kbp 的模块。\n  - 总长度: $3 + 3 = 6$。\n  - 总成本（模块数量）：$2$。这是一个有效解。\n- **组合 2：** 使用一个大小为 $4$ kbp 的模块。\n  - 需要覆盖的剩余长度：$6 - 4 = 2$。\n  - 组成长度为 $2$ 的唯一方法是使用两个大小为 $1$ kbp 的模块。\n  - 完整组合是 $(4, 1, 1)$。\n  - 总长度: $4 + 1 + 1 = 6$。\n  - 总成本：$3$。这就是之前找到的贪心解。\n- **组合 3：** 只使用大小为 $1$ kbp 的模块。\n  - 组合是 $(1, 1, 1, 1, 1, 1)$。\n  - 总成本：$6$。\n- **组合 4：** 使用一个大小为 $3$ kbp 的模块。\n  - 剩余长度：$6 - 3 = 3$。\n  - 这可以由一个大小为 $3$ kbp 的模块（即组合 1）或三个大小为 $1$ kbp 的模块来填充。\n  - 后一种组合是 $(3, 1, 1, 1)$。\n  - 总成本：$4$。\n\n通过比较所有有效组合的成本，我们得到：\n- $(3, 3)$ 的成本是 $2$。\n- $(4, 1, 1)$ 的成本是 $3$。\n- $(1, 1, 1, 1, 1, 1)$ 的成本是 $6$。\n- $(3, 1, 1, 1)$ 的成本是 $4$。\n\n最小成本为 $2$。设此为 $C_{optimal}$。\n$$C_{optimal} = 2$$\n这证明了对于一般的零钱兑换问题，贪心算法并非总是最优解这一众所周知的性质。\n\n**第三部分：最终计算**\n问题要求计算贪心成本与最优成本之间的差值。\n$$\\text{Difference} = C_{greedy} - C_{optimal} = 3 - 2 = 1$$\n差值为 $1$。", "answer": "$$\\boxed{1}$$", "id": "2396137"}, {"introduction": "神经系统的发育是一个惊人的精确过程，其中轴突生长锥必须导航到正确的目标。这个过程部分依赖于对化学信号的局部“贪心”响应。这个练习 [@problem_id:2396175] 将此生物过程建模为一个在图上的贪心行走问题，你的任务是分析一个精心设计的“化学景观”。通过追踪轴突的路径，你将揭示贪心算法的一个关键弱点：它如何可能陷入“局部最优”的陷阱（一个错误的目标），从而错过了全局最优解（正确的靶点）。", "problem": "在神经发育的轴突导向过程中，生长锥会对细胞外的化学信号做出反应，倾向于沿着净化学吸引梯度移动。考虑一个简化的离散模型，其中轴突生长锥被建模为在图上的一个贪心行走。设环境为一个网格图 $G=(V,E)$，其顶点为 $V=\\{p_{x,y}\\mid x,y\\in\\{0,1,2\\}\\}$，其中 $p_{x,y}$ 表示在整数坐标 $x$ 和 $y$ 处的格点。当且仅当 $|x-x'|+|y-y'|=1$ 时，存在一条无向边 $\\{p_{x,y},p_{x',y'}\\}\\in E$（四邻域连接）。一个标量场 $U:V\\to\\mathbb{R}$ 表示净导向势（$U$ 值越高吸引力越强），这可以解释为在生长锥处经过受体加权后，多种吸引剂和排斥剂的综合效应。\n\n贪心行走规则如下：从 $S=p_{0,1}$ 开始，在每个节点 $x\\in V$ 的每一步，从其邻居 $N(x)=\\{v\\in V\\mid \\{x,v\\}\\in E\\}$ 中，选择一个节点 $v^\\star\\in N(x)$，该节点在满足约束 $U(v)>U(x)$ 的前提下，使得增量 $\\Delta U=U(v)-U(x)$ 最大化；然后移动到 $v^\\star$。如果没有邻居满足 $U(v)>U(x)$，则停止（生长锥在 $U$ 的一个局部最大值处停止）。\n\n有两个特殊节点：正确目标 $C=p_{2,2}$ 和错误目标 $W=p_{2,0}$。您的任务是分析四个候选梯度图（$U$ 值的分配方案），并确定哪一个会导致从 $S$ 开始的贪心轴突终止于错误目标 $W$ 而非正确目标 $C$，尽管 $C$ 是 $U$ 在 $V$ 上的唯一全局最大值点。\n\n只选择一个选项。\n\nA. 图 $\\mathcal{M}_A$：\n- $U(p_{0,1})=0$ (起点 $S$)，$U(p_{1,1})=1$，$U(p_{0,0})=3$，$U(p_{0,2})=2$。\n- $U(p_{1,0})=5$，$U(p_{2,0})=8$ (错误目标 $W$)，$U(p_{2,1})=7$。\n- $U(p_{1,2})=6$，$U(p_{2,2})=10$ (正确目标 $C$)。\n\nB. 图 $\\mathcal{M}_B$：\n- $U(p_{0,1})=0$ (起点 $S$)，$U(p_{1,1})=3$，$U(p_{0,0})=1$，$U(p_{0,2})=4$。\n- $U(p_{1,0})=2$，$U(p_{2,0})=6$ (错误目标 $W$)，$U(p_{2,1})=8$。\n- $U(p_{1,2})=7$，$U(p_{2,2})=10$ (正确目标 $C$)。\n\nC. 图 $\\mathcal{M}_C$：\n- $U(p_{0,1})=0$ (起点 $S$)，$U(p_{1,1})=1$，$U(p_{0,0})=3$，$U(p_{0,2})=2$。\n- $U(p_{1,0})=5$，$U(p_{2,0})=12$ (错误目标 $W$)，$U(p_{2,1})=7$。\n- $U(p_{1,2})=6$，$U(p_{2,2})=10$ (正确目标 $C$)。\n\nD. 图 $\\mathcal{M}_D$：\n- $U(p_{0,1})=0$ (起点 $S$)，$U(p_{1,1})=4$，$U(p_{0,0})=2$，$U(p_{0,2})=3$。\n- $U(p_{1,0})=1$，$U(p_{2,0})=8$ (错误目标 $W$)，$U(p_{2,1})=5$。\n- $U(p_{1,2})=2$，$U(p_{2,2})=10$ (正确目标 $C$)。\n\n哪个图满足所述条件？", "solution": "在尝试解答之前，先对问题陈述进行验证。\n\n首先，我们逐字提取给定的信息：\n- 图是一个网格图 $G=(V,E)$，其顶点为 $V=\\{p_{x,y}\\mid x,y\\in\\{0,1,2\\}\\}$。\n- 当且仅当 $|x-x'|+|y-y'|=1$ 时，存在一条边 $\\{p_{x,y},p_{x',y'}\\}\\in E$。\n- 在顶点上定义了一个标量势场 $U:V\\to\\mathbb{R}$。\n- 起始节点是 $S=p_{0,1}$。\n- 贪心行走规则：从一个节点 $x$ 出发，移动到一个邻居 $v^\\star$，该邻居在满足约束 $U(v)>U(x)$ 的前提下，使增量 $\\Delta U=U(v)-U(x)$ 最大化。如果没有这样的邻居，行走就停止。\n- 正确目标是 $C=p_{2,2}$。\n- 错误目标是 $W=p_{2,0}$。\n- 任务是找出四个指定的势图中，哪一个会导致贪心行走终止于 $W$，同时 $C$ 是 $U$ 的唯一全局最大值点。\n\n接下来，我们根据既定标准验证问题陈述。\n- **科学依据**：该问题提出了一个高度简化但在概念上合理的轴突导向模型。使用离散图、势场和贪心算法来为趋化性建模是计算生物学中的一种标准方法，也是一种可接受的抽象。它并非基于伪科学。\n- **良定性**：图的结构、起点和贪心行走规则都得到了明确的定义。该规则是确定性的，保证了对于任何给定的势图，都存在唯一的路径和终止点。问题是精确的，并允许一个单一的可验证答案。\n- **客观性**：该问题以形式化的数学语言陈述，不含主观或模糊的术语。\n- **完备性**：为进行分析提供了所有必要的数据（每个图的势值）。该问题是自洽的。\n\n问题陈述被认为是有效的。这是一个图论和算法中的良定问题，与计算生物学相关。我们可以开始求解。\n\n该问题要求我们确定哪个势图 $\\mathcal{M}$ 同时满足两个条件：\n1. 从 $S=p_{0,1}$ 开始的贪心行走终止于错误目标 $W=p_{2,0}$。\n2. 正确目标 $C=p_{2,2}$ 是势 $U$ 在顶点集 $V$ 上的唯一全局最大值点。\n\n我们将逐一分析这四个候选图。顶点集为 $V = \\{p_{0,0}, p_{0,1}, p_{0,2}, p_{1,0}, p_{1,1}, p_{1,2}, p_{2,0}, p_{2,1}, p_{2,2}\\}$。\n\n**图 $\\mathcal{M}_A$ 的分析**\n势值为：\n$U(p_{0,1})=0$, $U(p_{1,1})=1$, $U(p_{0,0})=3$, $U(p_{0,2})=2$。\n$U(p_{1,0})=5$, $U(p_{2,0})=8$, $U(p_{2,1})=7$。\n$U(p_{1,2})=6$, $U(p_{2,2})=10$。\n\n首先，我们检查全局最大值条件。最大势值为 $U(p_{2,2})=10$。这个值在所有顶点中是唯一的。因此，$C=p_{2,2}$ 是唯一的全局最大值点。该条件得到满足。\n\n接下来，我们追踪贪心行走的路径：\n- **第1步**：从 $S=p_{0,1}$ 开始，此处 $U(p_{0,1})=0$。邻居是 $p_{0,0}$、$p_{1,1}$ 和 $p_{0,2}$。\n  - $U(p_{0,0})=3$，所以 $\\Delta U = 3-0=3$。\n  - $U(p_{1,1})=1$，所以 $\\Delta U = 1-0=1$。\n  - $U(p_{0,2})=2$，所以 $\\Delta U = 2-0=2$。\n  最大增量是 $\\Delta U = 3$，对应移动到 $p_{0,0}$。路径开始于：$p_{0,1} \\to p_{0,0}$。\n\n- **第2步**：当前节点是 $p_{0,0}$，其 $U(p_{0,0})=3$。邻居是 $p_{0,1}$ 和 $p_{1,0}$。\n  - $U(p_{0,1})=0$，小于 $U(p_{0,0})=3$。此移动不被允许。\n  - $U(p_{1,0})=5$，所以 $\\Delta U = 5-3=2$。\n  唯一有效的移动是到 $p_{1,0}$。路径现在是：$p_{0,1} \\to p_{0,0} \\to p_{1,0}$。\n\n- **第3步**：当前节点是 $p_{1,0}$，其 $U(p_{1,0})=5$。邻居是 $p_{0,0}$、$p_{1,1}$ 和 $p_{2,0}$。\n  - $U(p_{0,0})=3  5$。\n  - $U(p_{1,1})=1  5$。\n  - $U(p_{2,0})=8$，所以 $\\Delta U = 8-5=3$。\n  唯一有效的移动是到 $p_{2,0}$。路径是：$p_{0,1} \\to p_{0,0} \\to p_{1,0} \\to p_{2,0}$。\n\n- **第4步**：当前节点是 $p_{2,0}=W$，其 $U(p_{2,0})=8$。邻居是 $p_{1,0}$ 和 $p_{2,1}$。\n  - $U(p_{1,0})=5  8$。\n  - $U(p_{2,1})=7  8$。\n  没有邻居 $v$ 满足 $U(v)>U(p_{2,0})$。行走在 $p_{2,0}$ 处停止。\n\n行走终止于 $W=p_{2,0}$。图 $\\mathcal{M}_A$ 满足这两个条件。\n选项A的结论：**正确**。\n\n**图 $\\mathcal{M}_B$ 的分析**\n势值为：\n$U(p_{0,1})=0$, $U(p_{1,1})=3$, $U(p_{0,0})=1$, $U(p_{0,2})=4$。\n$U(p_{1,0})=2$, $U(p_{2,0})=6$, $U(p_{2,1})=8$。\n$U(p_{1,2})=7$, $U(p_{2,2})=10$。\n\n最大势值为 $U(p_{2,2})=10$，是唯一的。全局最大值条件得到满足。\n\n我们追踪贪心行走的路径：\n- **第1步**：从 $S=p_{0,1}$ 开始，此处 $U(p_{0,1})=0$。邻居是 $p_{0,0}$、$p_{1,1}$、$p_{0,2}$。\n  - $U(p_{0,0})=1$，$\\Delta U=1$。\n  - $U(p_{1,1})=3$，$\\Delta U=3$。\n  - $U(p_{0,2})=4$，$\\Delta U=4$。\n  最大增量是 $\\Delta U = 4$，移动到 $p_{0,2}$。路径：$p_{0,1} \\to p_{0,2}$。\n\n- **第2步**：当前节点是 $p_{0,2}$，$U(p_{0,2})=4$。邻居是 $p_{0,1}$ 和 $p_{1,2}$。\n  - $U(p_{0,1})=0  4$。\n  - $U(p_{1,2})=7$，所以 $\\Delta U = 7-4=3$。\n  移动到 $p_{1,2}$。路径：$p_{0,1} \\to p_{0,2} \\to p_{1,2}$。\n\n- **第3步**：当前节点是 $p_{1,2}$，$U(p_{1,2})=7$。邻居是 $p_{0,2}$、$p_{1,1}$、$p_{2,2}$。\n  - $U(p_{0,2})=4  7$。\n  - $U(p_{1,1})=3  7$。\n  - $U(p_{2,2})=10$，所以 $\\Delta U = 10-7=3$。\n  移动到 $p_{2,2}$。路径：$p_{0,1} \\to p_{0,2} \\to p_{1,2} \\to p_{2,2}$。\n\n- **第4步**：当前节点是 $p_{2,2}=C$，$U(p_{2,2})=10$。这是全局最大值，所以没有邻居有更高的势。行走停止。\n\n行走终止于 $C=p_{2,2}$，而不是 $W$。\n选项B的结论：**错误**。\n\n**图 $\\mathcal{M}_C$ 的分析**\n势值为：\n$U(p_{0,1})=0$, $U(p_{1,1})=1$, $U(p_{0,0})=3$, $U(p_{0,2})=2$。\n$U(p_{1,0})=5$, $U(p_{2,0})=12$, $U(p_{2,1})=7$。\n$U(p_{1,2})=6$, $U(p_{2,2})=10$。\n\n我们检查全局最大值条件。势值为 $\\{0, 1, 2, 3, 5, 6, 7, 10, 12\\}$。最大值是 $U(p_{2,0})=12$。问题要求 $C=p_{2,2}$ 是唯一的全局最大值点，但这里 $U(p_{2,2})=10$ 并不是最大值。全局最大值点实际上是 $W=p_{2,0}$。这个图违反了问题的一个基本前提。因此，这个选项不可能是正确答案。\n选项C的结论：**错误**。\n\n**图 $\\mathcal{M}_D$ 的分析**\n势值为：\n$U(p_{0,1})=0$, $U(p_{1,1})=4$, $U(p_{0,0})=2$, $U(p_{0,2})=3$。\n$U(p_{1,0})=1$, $U(p_{2,0})=8$, $U(p_{2,1})=5$。\n$U(p_{1,2})=2$, $U(p_{2,2})=10$。\n\n最大势值为 $U(p_{2,2})=10$，是唯一的。全局最大值条件得到满足。\n\n我们追踪贪心行走的路径：\n- **第1步**：从 $S=p_{0,1}$ 开始，此处 $U(p_{0,1})=0$。邻居是 $p_{0,0}$、$p_{1,1}$、$p_{0,2}$。\n  - $U(p_{0,0})=2$，$\\Delta U=2$。\n  - $U(p_{1,1})=4$，$\\Delta U=4$。\n  - $U(p_{0,2})=3$，$\\Delta U=3$。\n  最大增量是 $\\Delta U = 4$，移动到 $p_{1,1}$。路径：$p_{0,1} \\to p_{1,1}$。\n\n- **第2步**：当前节点是 $p_{1,1}$，$U(p_{1,1})=4$。邻居是 $p_{0,1}, p_{1,0}, p_{2,1}, p_{1,2}$。\n  - $U(p_{0,1})=0  4$。\n  - $U(p_{1,0})=1  4$。\n  - $U(p_{2,1})=5$，所以 $\\Delta U = 5-4=1$。\n  - $U(p_{1,2})=2  4$。\n  唯一有效的移动是到 $p_{2,1}$。路径：$p_{0,1} \\to p_{1,1} \\to p_{2,1}$。\n\n- **第3步**：当前节点是 $p_{2,1}$，$U(p_{2,1})=5$。邻居是 $p_{1,1}, p_{2,0}, p_{2,2}$。\n  - $U(p_{1,1})=4  5$。\n  - $U(p_{2,0})=8$，所以 $\\Delta U = 8-5=3$。\n  - $U(p_{2,2})=10$，所以 $\\Delta U = 10-5=5$。\n  最大增量是 $\\Delta U = 5$，移动到 $p_{2,2}$。路径：$p_{0,1} \\to p_{1,1} \\to p_{2,1} \\to p_{2,2}$。\n\n- **第4步**：当前节点是 $p_{2,2}=C$，$U(p_{2,2})=10$。这是全局最大值，所以行走停止。\n\n行走终止于 $C=p_{2,2}$，而不是 $W$。\n选项D的结论：**错误**。\n\n结论：只有图 $\\mathcal{M}_A$ 在满足正确目标 $C$ 是唯一全局最大值点的条件下，将贪心行走引导至错误目标 $W$。在 $W$ 处存在的局部最大值困住了贪心算法。", "answer": "$$\\boxed{A}$$", "id": "2396175"}, {"introduction": "贪心策略不仅在静态问题中存在局限，在动态演化系统中，其后果可能更加深远。本练习 [@problem_id:2396125] 模拟了一场农夫与害虫之间的“军备竞赛”，其中农民反复使用贪心策略来选择当前最有效的农药。与前述练习不同，这里的每一个决策都会改变环境，通过选择性压力促进抗药性的演化。通过编程实现这个动态模型，你将观察到短视的局部优化如何可能导致长期的、非预期的不良后果。", "problem": "给定一个离散时间模型，用于描述一个异质性害虫种群在固定数量的季节内，暴露于一系列农药施用下的动态。该种群由基因型（索引为 $g \\in \\{0,1,\\dots,G-1\\}$）构成，农药索引为 $p \\in \\{0,1,\\dots,P-1\\}$。季节索引为 $t \\in \\{1,2,\\dots,T\\}$。在季节 $t$ 开始时，基因型 $g$ 的种群数量为 $N_g^{(t)} \\ge 0$，农药 $p$ 的效力（对完全易感害虫的最大杀伤比例）为 $b_p \\in [0,1]$，基因型 $g$ 对农药 $p$ 的抗性水平为 $R_{g,p}^{(t)} \\in [0,1]$。每个基因型 $g$ 都有一个季节性繁殖增长因子 $r_g > 0$，该因子在季节内农药效应之后应用。每种农药 $p$ 都有一个适应率 $a_p \\ge 0$，该率决定了使用该农药后其抗性增长的速度。\n\n季节内决策规则：对于每种农药 $p$，定义其在季节 $t$ 的即时预期杀伤量为\n$$\nK_p^{(t)} \\;=\\; \\sum_{g=0}^{G-1} N_g^{(t)} \\, b_p \\, \\bigl(1 - R_{g,p}^{(t)}\\bigr).\n$$\n在季节 $t$ 内，选择施用的农药 $\\hat p^{(t)}$ 以最大化 $K_p^{(t)}$。如果多种农药达到相同的最大值，则选择索引最小的农药。\n\n季节内动态变化：给定所选农药 $\\hat p^{(t)}$，处理后基因型 $g$ 的存活个体数量为\n$$\nS_g^{(t)} \\;=\\; N_g^{(t)} \\,\\Bigl(1 - b_{\\hat p^{(t)}} \\bigl(1 - R_{g,\\hat p^{(t)}}^{(t)}\\bigr)\\Bigr),\n$$\n总存活个体数量为 $S^{(t)} = \\sum_{g=0}^{G-1} S_g^{(t)}$。对所施用农药的抗性根据存活个体的构成进行更新：\n$$\nR_{g,\\hat p^{(t)}}^{(t+1)} \\;=\\;\n\\begin{cases}\n\\min\\Bigl\\{1,\\; R_{g,\\hat p^{(t)}}^{(t)} + a_{\\hat p^{(t)}} \\,\\dfrac{S_g^{(t)}}{S^{(t)}} \\Bigr\\},  \\text{若 } S^{(t)} > 0 \\\\[8pt]\nR_{g,\\hat p^{(t)}}^{(t)},  \\text{若 } S^{(t)} = 0\n\\end{cases}\n$$\n而对所有未施用农药的抗性在本季节内保持不变，即对于所有 $p \\ne \\hat p^{(t)}$ 都有 $R_{g,p}^{(t+1)} = R_{g,p}^{(t)}$。随后，种群进行繁殖：\n$$\nN_g^{(t+1)} \\;=\\; S_g^{(t)} \\, r_g.\n$$\n初始条件 $N_g^{(1)}$ 和 $R_{g,p}^{(1)}$ 是给定的。经过 $T$ 个季节后，报告最终的总种群数量\n$$\nN_{\\text{total}}^{(T+1)} \\;=\\; \\sum_{g=0}^{G-1} N_g^{(T+1)}.\n$$\n\n索引：农药索引和基因型索引均从零开始，即最小索引为 $0$。\n\n任务：实现一个程序，该程序能精确执行上述动态过程，并为下面每个独立的测试用例返回最终的总种群数量 $N_{\\text{total}}^{(T+1)}$。将每个报告值四舍五入到 $6$ 位小数。不涉及物理单位。\n\n测试套件（每个测试用例都明确列出了 $G$、$P$、$T$、初始种群数量向量 $N^{(1)}$、增长因子 $r$、效力向量 $b$、形状为 $G \\times P$ 的初始抗性矩阵 $R^{(1)}$ 以及适应率 $a$）：\n\n- 测试用例 1（一般情况）：\n  - $G = 3$， $P = 2$， $T = 8$。\n  - $N^{(1)} = [\\,500.0,\\;300.0,\\;200.0\\,]$。\n  - $r = [\\,1.2,\\;1.1,\\;1.05\\,]$。\n  - $b = [\\,0.6,\\;0.4\\,]$。\n  - $R^{(1)} = \\begin{bmatrix} 0.1  0.2 \\\\ 0.0  0.5 \\\\ 0.3  0.1 \\end{bmatrix}$。\n  - $a = [\\,0.2,\\;0.15\\,]$。\n\n- 测试用例 2（平局打破和无适应性变化）：\n  - $G = 2$， $P = 2$， $T = 3$。\n  - $N^{(1)} = [\\,100.0,\\;100.0\\,]$。\n  - $r = [\\,1.0,\\;1.0\\,]$。\n  - $b = [\\,0.5,\\;0.5\\,]$。\n  - $R^{(1)} = \\begin{bmatrix} 0.0  0.0 \\\\ 0.0  0.0 \\end{bmatrix}$。\n  - $a = [\\,0.0,\\;0.0\\,]$。\n\n- 测试用例 3（对更强农药的初始高抗性）：\n  - $G = 2$， $P = 2$， $T = 5$。\n  - $N^{(1)} = [\\,1000.0,\\;10.0\\,]$。\n  - $r = [\\,1.05,\\;0.9\\,]$。\n  - $b = [\\,0.7,\\;0.3\\,]$。\n  - $R^{(1)} = \\begin{bmatrix} 0.9  0.0 \\\\ 0.9  0.0 \\end{bmatrix}$。\n  - $a = [\\,0.1,\\;0.05\\,]$。\n\n- 测试用例 4（负增长和近乎无效的农药）：\n  - $G = 1$， $P = 3$， $T = 4$。\n  - $N^{(1)} = [\\,50.0\\,]$。\n  - $r = [\\,0.8\\,]$。\n  - $b = [\\,0.9,\\;0.2,\\;0.0\\,]$。\n  - $R^{(1)} = \\begin{bmatrix} 0.0  0.5  0.0 \\end{bmatrix}$。\n  - $a = [\\,0.3,\\;0.0,\\;0.0\\,]$。\n\n最终输出格式：您的程序应生成单行输出，其中包含按顺序排列的四个结果，四舍五入到 $6$ 位小数，格式为方括号内由逗号分隔的列表；例如，形如 $[x_1,x_2,x_3,x_4]$ 的输出，其中每个 $x_i$ 是一个四舍五入到 $6$ 位小数的实数。", "solution": "对问题陈述进行验证。\n\n步骤 1：提取已知信息\n该问题描述了一个在农药压力下的害虫种群的离散时间模型。\n- 季节 $t$ 开始时的状态变量：\n  - $N_g^{(t)}$: 基因型 $g$ 的种群数量。\n  - $R_{g,p}^{(t)}$: 基因型 $g$ 对农药 $p$ 的抗性水平。\n- 索引：\n  - 基因型: $g \\in \\{0, 1, \\dots, G-1\\}$。\n  - 农药: $p \\in \\{0, 1, \\dots, P-1\\}$。\n  - 季节: $t \\in \\{1, 2, \\dots, T\\}$。\n- 参数：\n  - $r_g$: 基因型 $g$ 的繁殖增长因子。\n  - $b_p$: 农药 $p$ 的效力。\n  - $a_p$: 农药 $p$ 的适应率。\n- 初始条件: 给定 $N_g^{(1)}$ 和 $R_{g,p}^{(1)}$。\n- 季节 $t$ 中农药选择的决策规则：\n  - 所选农药 $\\hat p^{(t)}$ 是最大化即时预期杀伤量 $K_p^{(t)}$ 的那一个。\n  - $K_p^{(t)} = \\sum_{g=0}^{G-1} N_g^{(t)} \\, b_p \\, (1 - R_{g,p}^{(t)})$。\n  - 平局打破：若多个农药产生相同的最大 $K_p^{(t)}$ 值，则选择索引 $p$ 最小的那个。\n- 季节 $t$ 内的动态：\n  - 基因型 $g$ 的存活个体：$S_g^{(t)} = N_g^{(t)} \\,(1 - b_{\\hat p^{(t)}} (1 - R_{g,\\hat p^{(t)}}^{(t)}))$。\n  - 总存活个体：$S^{(t)} = \\sum_{g=0}^{G-1} S_g^{(t)}$。\n- 季节 $t+1$ 的更新规则：\n  - 对所施用农药 $\\hat p^{(t)}$ 的抗性更新：\n    $$\n    R_{g,\\hat p^{(t)}}^{(t+1)} =\n    \\begin{cases}\n    \\min\\left\\{1, R_{g,\\hat p^{(t)}}^{(t)} + a_{\\hat p^{(t)}} \\frac{S_g^{(t)}}{S^{(t)}}\\right\\},  \\text{若 } S^{(t)} > 0 \\\\\n    R_{g,\\hat p^{(t)}}^{(t)},  \\text{若 } S^{(t)} = 0\n    \\end{cases}\n    $$\n  - 对未施用农药 $p \\ne \\hat p^{(t)}$ 的抗性不变：$R_{g,p}^{(t+1)} = R_{g,p}^{(t)}$。\n  - 种群更新：$N_g^{(t+1)} = S_g^{(t)} \\cdot r_g$。\n- 最终输出：\n  - 计算 $T$ 个季节后的总种群数量：$N_{\\text{total}}^{(T+1)} = \\sum_{g=0}^{G-1} N_g^{(T+1)}$。\n  - 报告此值，并四舍五入到 $6$ 位小数。\n- 测试用例：提供了四组特定参数（$G, P, T, N^{(1)}, r, b, R^{(1)}, a$）。\n\n步骤 2：使用提取的已知信息进行验证\n根据既定标准对问题进行评估：\n- **科学严谨性**：该模型是一个标准但简化的离散时间种群动态模型。指数增长、剂量-反应关系（通过效力 $b_p$ 和抗性 $R_{g,p}^{(t)}$ 体现）以及选择驱动的抗性演化等概念是种群遗传学和生态学的基本原理。该模型是科学合理的。\n- **适定性**：该问题为系统演化提供了一整套初始条件和确定性规则。农药选择规则也是确定性的，包括明确的平局打破条件。这确保了对于给定的输入，存在唯一解。对于总存活个体为零（$S^{(t)} = 0$）会导致除以零的特殊情况，问题也给出了明确且正确的处理方式。该问题是适定的。\n- **客观性**：问题以精确的数学语言陈述，没有模糊性、主观性或基于观点的论断。所有术语都有明确定义。\n- **缺陷分析**：\n  1. 不存在科学或事实上的不合理之处。\n  2. 问题是可形式化的。最大化即时杀伤量的农药选择规则是贪心算法的直接应用。因此，该问题与*计算生物学*背景下的*贪心算法范式*直接相关。\n  3. 设置是完整的且内部一致。为每个测试用例提供了所有必要的数据。\n  4. 模型参数在物理上合理的范围内（例如，$b_p, R_{g,p} \\in [0,1]$）。没有不切实际或不可行的要求。\n  5. 问题不是病态的或结构不良的。\n  6. 结果是可通过计算验证的。\n\n步骤 3：结论与行动\n问题有效。将通过实现所述动态过程的模拟来提供解决方案。\n\n解决方案涉及模拟 $T$ 个离散时间步（季节）内的种群和抗性动态。在任何季节 $t$ 开始时，系统的状态由基因型种群数量向量 $N^{(t)}$ 和基因型-农药抗性矩阵 $R^{(t)}$ 定义。模拟过程如下，对从 $1$ 到 $T$ 的每个季节 $t$ 进行迭代：\n\n1.  **贪心农药选择**：对于每种可用农药 $p \\in \\{0, \\dots, P-1\\}$，计算其总即时杀伤量 $K_p^{(t)}$。这个量代表了如果在季节 $t$ 施用农药 $p$，预计将被消灭的个体数量。\n    $$K_p^{(t)} = \\sum_{g=0}^{G-1} N_g^{(t)} \\, b_p \\, (1 - R_{g,p}^{(t)})$$\n    选择使该值最大化的农药 $\\hat p^{(t)}$。这是一个“贪心”选择，因为它只优化即时结果，而不考虑未来的后果，例如抗性的演化。如果出现平局，则选择索引最小的农药。\n\n2.  **种群动态**：施用所选农药 $\\hat p^{(t)}$。每个基因型 $g$ 的存活个体数量（记为 $S_g^{(t)}$）根据农药效力 $b_{\\hat p^{(t)}}$ 和基因型的特定抗性 $R_{g,\\hat p^{(t)}}^{(t)}$ 计算得出。\n    $$S_g^{(t)} = N_g^{(t)} \\, \\left(1 - b_{\\hat p^{(t)}} \\left(1 - R_{g,\\hat p^{(t)}}^{(t)}\\right)\\right)$$\n\n3.  **状态更新**：更新状态变量以反映下一季节 $t+1$ 开始时的条件。\n    - 存活的种群进行繁殖。通过将存活个体数量乘以特定于基因型的增长因子 $r_g$，得到每个基因型的新种群数量。\n      $$N_g^{(t+1)} = S_g^{(t)} \\cdot r_g$$\n    - 对所施用农药 $\\hat p^{(t)}$ 的抗性发生演化。抗性的变化与适应率 $a_{\\hat p^{(t)}}$ 以及该基因型在存活个体中的相对频率 $S_g^{(t)}/S^{(t)}$ 成正比，其中 $S^{(t)} = \\sum S_g^{(t)}$。新的抗性值上限为 $1$。对所有其他农药的抗性保持不变。\n      $$R_{g,\\hat p^{(t)}}^{(t+1)} = \\min\\left\\{1, R_{g,\\hat p^{(t)}}^{(t)} + a_{\\hat p^{(t)}} \\frac{S_g^{(t)}}{S^{(t)}}\\right\\} \\quad (\\text{对于 } S^{(t)} > 0)$$\n      $$R_{g,p}^{(t+1)} = R_{g,p}^{(t)} \\quad (\\text{对于 } p \\ne \\hat p^{(t)})$$\n\n此迭代过程重复 $T$ 个季节。在季节 $T$ 的动态过程完成后，得到种群的最终状态 $N^{(T+1)}$。要求的输出是最终总种群数量 $\\sum_{g=0}^{G-1} N_g^{(T+1)}$。该实现将利用数值计算库来高效地执行这些向量和矩阵运算。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Executes the pest population dynamics simulation for a suite of test cases.\n    \"\"\"\n\n    test_cases = [\n        # Test case 1 (general case)\n        {\n            \"G\": 3, \"P\": 2, \"T\": 8,\n            \"N1\": np.array([500.0, 300.0, 200.0]),\n            \"r\": np.array([1.2, 1.1, 1.05]),\n            \"b\": np.array([0.6, 0.4]),\n            \"R1\": np.array([[0.1, 0.2], [0.0, 0.5], [0.3, 0.1]]),\n            \"a\": np.array([0.2, 0.15])\n        },\n        # Test case 2 (tie-breaking and no adaptation)\n        {\n            \"G\": 2, \"P\": 2, \"T\": 3,\n            \"N1\": np.array([100.0, 100.0]),\n            \"r\": np.array([1.0, 1.0]),\n            \"b\": np.array([0.5, 0.5]),\n            \"R1\": np.array([[0.0, 0.0], [0.0, 0.0]]),\n            \"a\": np.array([0.0, 0.0])\n        },\n        # Test case 3 (initial high resistance to the stronger pesticide)\n        {\n            \"G\": 2, \"P\": 2, \"T\": 5,\n            \"N1\": np.array([1000.0, 10.0]),\n            \"r\": np.array([1.05, 0.9]),\n            \"b\": np.array([0.7, 0.3]),\n            \"R1\": np.array([[0.9, 0.0], [0.9, 0.0]]),\n            \"a\": np.array([0.1, 0.05])\n        },\n        # Test case 4 (declining growth and a nearly useless pesticide)\n        {\n            \"G\": 1, \"P\": 3, \"T\": 4,\n            \"N1\": np.array([50.0]),\n            \"r\": np.array([0.8]),\n            \"b\": np.array([0.9, 0.2, 0.0]),\n            \"R1\": np.array([[0.0, 0.5, 0.0]]),\n            \"a\": np.array([0.3, 0.0, 0.0])\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        G, P, T = case[\"G\"], case[\"P\"], case[\"T\"]\n        N = case[\"N1\"].copy()\n        r = case[\"r\"]\n        b = case[\"b\"]\n        R = case[\"R1\"].copy()\n        a = case[\"a\"]\n\n        for t in range(T):\n            # Step 1: Greedy Pesticide Selection\n            kill_k = np.zeros(P)\n            for p in range(P):\n                # K_p = sum(N_g * b_p * (1 - R_{g,p}))\n                kill_k[p] = np.sum(N * b[p] * (1 - R[:, p]))\n            \n            p_hat = np.argmax(kill_k)\n\n            # Step 2: Population Dynamics (Calculate Survivors)\n            # S_g = N_g * (1 - b_{p_hat} * (1 - R_{g, p_hat}))\n            survivor_proportions = 1.0 - b[p_hat] * (1.0 - R[:, p_hat])\n            S = N * survivor_proportions\n            S_total = np.sum(S)\n\n            # Step 3: State Update for Next Season\n            # Update population\n            N_next = S * r\n            \n            # Update resistance\n            R_next = R.copy()\n            if S_total > 0:\n                resistance_increase = a[p_hat] * S / S_total\n                R_next[:, p_hat] = np.minimum(1.0, R[:, p_hat] + resistance_increase)\n\n            # Assign new state for the next iteration\n            N = N_next\n            R = R_next\n            \n        final_total_abundance = np.sum(N)\n        results.append(final_total_abundance)\n\n    # Format output as a list of strings rounded to 6 decimal places\n    formatted_results = [f'{res:.6f}' for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2396125"}]}