{"hands_on_practices": [{"introduction": "生物序列通常遵循严格的结构模式。一个典型的例子是mRNA的翻译，它以三个核苷酸为一组（称为密码子）进行。本练习旨在通过设计一个确定性有限自动机（DFA）来模拟这一基本生物学规则，该自动机能够识别仅由完整密码子组成的序列，从而有效地充当一个序列长度模3的计数器 [@problem_id:2390456]。掌握此练习有助于建立关于如何利用自动机对生物数据施加结构性约束的直觉。", "problem": "在计算基因组学中，信使核糖核酸 (mRNA) 以称为密码子的核苷酸三联体形式进行翻译。考虑脱氧核糖核酸 (DNA) 字母表 $\\Sigma = \\{\\text{A, C, G, T}\\}$。令 $L$ 为 $\\Sigma$ 上所有长度为 $3$ 的倍数的字符串构成的语言，这些字符串代表可以被划分为完整的密码子而末尾没有部分密码子的序列。\n\n设计一个识别 $L$ 且状态数最小的确定性有限自动机 (DFA)。然后，令 $a_n$ 表示 $L$ 中长度为 $n$ 的字符串数量，并定义普通生成函数 $G(z)$ 如下：\n$$\nG(z) = \\sum_{n=0}^{\\infty} a_n z^n.\n$$\n请给出 $G(z)$ 的单个封闭形式解析表达式。您的最终答案必须只有这个表达式。不需要进行四舍五入。", "solution": "首先必须对问题陈述进行严格的验证。\n\n步骤\n1：提取已知条件\n已知条件如下：\n- 字母表：$\\Sigma = \\{\\text{A, C, G, T}\\}$。\n- 语言：$L$ 是 $\\Sigma$ 上所有长度为 $3$ 的倍数的字符串的集合。\n- 序列：$a_n$ 是 $L$ 中长度为 $n$ 的字符串数量。\n- 生成函数：$G(z) = \\sum_{n=0}^{\\infty} a_n z^n$。\n- 目标：为 $L$ 设计一个最小确定性有限自动机 (DFA)，并给出 $G(z)$ 的封闭形式表达式。\n\n步骤\n2：使用提取的已知条件进行验证\n根据所需标准对问题进行评估。\n- **科学依据**：该问题基于计算生物学（DNA 字母表，密码子）、形式语言理论（正则语言，DFA）和组合数学（生成函数）的既定原则。遗传信息以三联体（密码子）形式读取的前提是分子生物学的一个基本事实，为这个形式化问题提供了坚实的科学背景。该问题是自动机理论中的一个标准练习。\n- **良构性**：语言 $L$ 的定义明确无歧义。构建最小 DFA 和寻找相应生成函数的任务是定义明确且具有唯一解的数学问题。\n- **客观性**：问题陈述是精确、定量的，并且没有任何主观或模棱两可的语言。\n\n该问题没有表现出任何导致其无效的缺陷。它是科学合理的、良构的且客观的。\n\n步骤\n3：结论与行动\n该问题有效。现在将提供完整的解决方案。\n\n第一个任务是构建一个识别语言 $L$ 的最小 DFA。语言 $L$ 由字母表 $\\Sigma = \\{\\text{A, C, G, T}\\}$ 上的所有字符串 $w$ 组成，使得字符串的长度 $|w|$ 是 $3$ 的倍数。这可以表示为 $|w| \\equiv 0 \\pmod 3$。\n\n该性质启发我们使用一个 DFA，其状态用于跟踪输入字符串长度模 $3$ 的余数。我们定义一个具有三个状态的 DFA $M = (Q, \\Sigma, \\delta, q_0, F)$：\n- $Q = \\{q_0, q_1, q_2\\}$，其中如果到目前为止读取的字符串长度与 $i \\pmod 3$ 同余，则自动机处于状态 $q_i$。\n- $\\Sigma = \\{\\text{A, C, G, T}\\}$ 是输入字母表。字母表的大小为 $|\\Sigma| = 4$。\n- $q_0$ 是起始状态。这是合适的，因为空字符串 $\\epsilon$ 的长度为 $0$，且 $0 \\equiv 0 \\pmod 3$。\n- $F = \\{q_0\\}$ 是接受状态集，因为该语言由长度为 $3$ 的倍数的字符串组成。\n- 转移函数 $\\delta: Q \\times \\Sigma \\to Q$ 定义如下。对于任何符号 $s \\in \\Sigma$：\n  - $\\delta(q_0, s) = q_1$，因为如果一个字符串的长度为 $n \\equiv 0 \\pmod 3$，追加一个符号会得到一个长度为 $n+1 \\equiv 1 \\pmod 3$ 的字符串。\n  - $\\delta(q_1, s) = q_2$，因为如果一个字符串的长度为 $n \\equiv 1 \\pmod 3$，追加一个符号会得到一个长度为 $n+1 \\equiv 2 \\pmod 3$ 的字符串。\n  - $\\delta(q_2, s) = q_0$，因为如果一个字符串的长度为 $n \\equiv 2 \\pmod 3$，追加一个符号会得到一个长度为 $n+1 \\equiv 3 \\equiv 0 \\pmod 3$ 的字符串。\n\n为了证明这个 $3$ 状态 DFA 是最小的，我们必须证明所有状态对都是可区分的。\n- 状态对 $(q_0, q_1)$ 是可区分的，因为 $q_0 \\in F$ 而 $q_1 \\notin F$。类似地，$(q_0, q_2)$ 也是可区分的。\n- 为了区分 $q_1$ 和 $q_2$，我们必须找到一个字符串 $w$，使得 $\\delta(q_1, w)$ 和 $\\delta(q_2, w)$ 中一个在 $F$ 中而另一个不在。我们选择一个长度为\n1 的字符串，例如 $w = A$。\n  - 从状态 $q_1$ 开始，读取 'A' 会进入状态 $\\delta(q_1, A) = q_2$，这不是一个最终状态。\n  - 从状态 $q_2$ 开始，读取 'A' 会进入状态 $\\delta(q_2, A) = q_0$，这是一个最终状态。\n由于结果不同（一个接受，一个不接受），状态 $q_1$ 和 $q_2$ 是可区分的。因为所有状态对 $(q_0, q_1)$、$(q_0, q_2)$ 和 $(q_1, q_2)$ 都是可区分的，所以该 DFA 是最小的。\n\n第二个任务是找到普通生成函数 $G(z) = \\sum_{n=0}^{\\infty} a_n z^n$，其中 $a_n$ 是 $L$ 中长度为 $n$ 的字符串数量。\n一个字符串在 $L$ 中，当且仅当其长度 $n$ 是一个非负的 $3$ 的倍数。\n对于给定的长度 $n$，在大小为 $4$ 的字母表 $\\Sigma$ 上的可能字符串数量为 $4^n$。\n因此，序列 $a_n$ 被描述为：\n- 如果 $n$ 是 $3$ 的倍数（即，对于某个整数 $k \\ge 0$，$n = 3k$），则 $a_n = 4^n$。\n- 如果 $n$ 不是 $3$ 的倍数，则 $a_n = 0$。\n\n现在我们可以通过代入 $a_n$ 的这个定义来写出生成函数 $G(z)$：\n$$\nG(z) = \\sum_{n=0}^{\\infty} a_n z^n = a_0 z^0 + a_3 z^3 + a_6 z^6 + \\dots\n$$\n当 $n$ 不能被 $3$ 整除时，项为零。我们剩下的项是 $n=3k$ 的情况，其中 $k = 0, 1, 2, \\dots$：\n$$\nG(z) = \\sum_{k=0}^{\\infty} a_{3k} z^{3k}\n$$\n代入 $a_{3k} = 4^{3k}$：\n$$\nG(z) = \\sum_{k=0}^{\\infty} 4^{3k} z^{3k} = \\sum_{k=0}^{\\infty} (4^3 z^3)^k = \\sum_{k=0}^{\\infty} (64 z^3)^k\n$$\n这是一个形式为 $\\sum_{k=0}^{\\infty} r^k$ 的标准几何级数，其公比为 $r = 64 z^3$。当 $|r| < 1$ 时，该级数的和由公式 $\\frac{1}{1-r}$ 给出。\n因此，该生成函数的封闭形式表达式是：\n$$\nG(z) = \\frac{1}{1 - 64z^3}\n$$\n这个结果可以用派生出的 DFA 上的转移矩阵法进行验证。令 $G_i(z)$ 为将自动机从起始状态 $q_0$ 带到状态 $q_i$ 的字符串的生成函数。我们得到以下线性方程组，其中 $G_0(z)$ 方程中的项 $1$ 代表空字符串：\n\\begin{align*}\nG_0(z) &= 1 + 4z G_2(z) \\\\\nG_1(z) &= 4z G_0(z) \\\\\nG_2(z) &= 4z G_1(z)\n\\end{align*}\n该语言的生成函数是 $G(z) = G_0(z)$，因为 $q_0$ 是唯一的接受状态。将第二个方程代入第三个方程得到 $G_2(z) = 4z (4z G_0(z)) = 16z^2 G_0(z)$。将此结果代入第一个方程：\n$$\nG_0(z) = 1 + 4z (16z^2 G_0(z)) = 1 + 64z^3 G_0(z)\n$$\n求解 $G_0(z)$：\n$$\nG_0(z) (1 - 64z^3) = 1 \\implies G_0(z) = \\frac{1}{1 - 64z^3}\n$$\n这证实了通过直接组合计数得到的结果。", "answer": "$$\n\\boxed{\\frac{1}{1 - 64z^3}}\n$$", "id": "2390456"}, {"introduction": "除了通用的结构规则外，生物信息学还常常需要在海量数据中搜索特定的短信号序列。本实践专注于识别三个标志着翻译结束的关键“终止密码子” [@problem_id:2390505]。通过为这个任务构建一个*最小*自动机，你将探索如何高效地表示一组相关的模式，通过合并共同的前缀来创建一个紧凑且计算上最优的识别器。", "problem": "在计算生物学中，脱氧核糖核酸 (DNA) 序列使用字母表 $\\Sigma=\\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$ 进行建模。三个 DNA 终止密码子是长度为3的字符串 $\\text{TAA}$、$\\text{TAG}$ 和 $\\text{TGA}$。令语言 $L \\subseteq \\Sigma^{*}$ 恰好是由这三个密码子组成的集合 $L=\\{\\text{TAA},\\text{TAG},\\text{TGA}\\}$，它们被视为字母表 $\\Sigma$ 上的单词。\n\n在所有基于字母表 $\\Sigma$、恰好接受 $L$ 中的字符串并拒绝 $\\Sigma^{*}$ 中所有其他字符串的确定性有限自动机 (DFA) 中，确定此类 DFA 可能的最小状态数。请以整数形式提供您的答案。", "solution": "问题陈述已经过分析，并被确定为有效。它具有科学依据、是适定的、客观的，并包含推导唯一解所需的所有必要信息。DNA 字母表、特定终止密码子和语言的定义都是标准且无歧义的。该问题是自动机理论中的一个形式化练习。\n\n该问题要求找到一个接受语言 $L = \\{\\text{TAA}, \\text{TAG}, \\text{TGA}\\}$（基于字母表 $\\Sigma=\\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$）的确定性有限自动机 (DFA) 的最小状态数。\n\n根据 Myhill-Nerode 定理，一个正则语言 $L$ 的最小 DFA 中的状态数量等于 Nerode 等价关系（记作 $\\equiv_L$）的等价类的数量。两个字符串 $x, y \\in \\Sigma^{*}$ 被定义为等价，写作 $x \\equiv_L y$，当且仅当对于任意字符串 $z \\in \\Sigma^{*}$，条件 $xz \\in L \\iff yz \\in L$ 成立。每个等价类对应于最小 DFA 中的一个唯一状态。我们将系统地识别这些等价类。\n\n令 $\\epsilon$ 表示空字符串。\n\n1.  空字符串的等价类 $[\\epsilon]$。字符串 $\\epsilon$ 不在 $L$ 中。但它可以被扩展成 $L$ 中的一个字符串。例如，在 $\\epsilon$ 后附加 $\\text{TAA}$ 得到 $\\text{TAA} \\in L$。这个等价类对应于 DFA 的起始状态。\n\n2.  不是 $L$ 中任何单词前缀的字符串的等价类。我们考虑字符串 $x \\in \\{\\text{A}, \\text{C}, \\text{G}\\}$。对于任何这样的 $x$ 和任何扩展 $z \\in \\Sigma^{*}$，字符串 $xz$ 都不会以字符 $\\text{T}$ 开头。由于 $L$ 中的所有单词都以 $\\text{T}$ 开头，所以 $xz \\notin L$。类似地，考虑像 $\\text{TT}$ 或 $\\text{TC}$ 这样的字符串。$L$ 中没有字符串以这些前缀开头，因此对于任何 $z \\in \\Sigma^{*}$，$\\text{TT}z \\notin L$ 且 $\\text{TC}z \\notin L$。任何长度大于3的字符串也不可能是 $L$ 中单词的前缀。所有这类不存在扩展 $z$ 使得 $uz \\in L$ 的字符串 $u$ 都是等价的。它们形成一个单一的“死亡”或“陷阱”等价类，记为 $[u]_{dead}$。这个类与 $[\\epsilon]$ 不同，因为对于 $z=\\text{TAA}$，有 $\\epsilon z \\in L$，但对于死亡类中的任何 $u$，都有 $uz \\notin L$。\n\n3.  包含字符串 $\\text{T}$ 的等价类，即 $[\\text{T}]$。这个字符串不在死亡类中，因为它可以被扩展成 $L$ 中的单词（例如，通过附加 $\\text{AA}$）。它不等价于 $\\epsilon$，因为对于 $z = \\text{AA}$，我们有 $\\text{T}z = \\text{TAA} \\in L$，而 $\\epsilon z = \\text{AA} \\notin L$。因此，$[\\text{T}]$ 是一个不同的等价类。\n\n4.  包含字符串 $\\text{TA}$ 的等价类，即 $[\\text{TA}]$。这个字符串可以被扩展成 $L$ 中的单词（例如，用 $\\text{A}$ 或 $\\text{G}$）。它不等价于 $[\\text{T}]$，因为对于 $z = \\text{A}$，我们有 $\\text{TA}z = \\text{TAA} \\in L$，但 $\\text{T}z = \\text{TA} \\notin L$。它也与 $[\\epsilon]$ 和死亡类不同。\n\n5.  包含字符串 $\\text{TG}$ 的等价类，即 $[\\text{TG}]$。它可以被扩展成 $L$ 中的单词（用 $\\text{A}$）。它必须与 $[\\text{TA}]$ 区分开来。为了证明这一点，选择 $z = \\text{G}$。那么 $\\text{TA}z = \\text{TAG} \\in L$，但 $\\text{TG}z = \\text{TGG} \\notin L$。因此，$\\text{TA} \\not\\equiv_L \\text{TG}$，并且 $[\\text{TG}]$ 是一个新的、不同的等价类。\n\n6.  $L$ 中单词的等价类。我们考虑字符串 $x \\in \\{\\text{TAA}, \\text{TAG}, \\text{TGA}\\}$。这些字符串都在 $L$ 中。对于任何非空字符串 $z \\in \\Sigma^{*}$，字符串 $xz$ 的长度将大于3，所以 $xz \\notin L$。对于空字符串 $z=\\epsilon$，我们有 $xz = x \\in L$。因此，对于任意两个字符串 $u, v \\in \\{\\text{TAA}, \\text{TAG}, \\text{TGA}\\}$ 和任意 $z \\in \\Sigma^{*}$，都有 $uz \\in L \\iff vz \\in L$。这意味着 $\\text{TAA} \\equiv_L \\text{TAG} \\equiv_L \\text{TGA}$。这三个字符串形成一个单一的等价类。这个类与之前所有的类都不同，因为对于它的成员 $x$，取 $z=\\epsilon$ 会得到 $x \\in L$，这是其他任何类的成员都不满足的条件。\n\n总而言之，我们已经识别出以下 $6$ 个不同的等价类：\n- $C_0 = [\\epsilon]$\n- $C_1 = [\\text{T}]$\n- $C_2 = [\\text{TA}]$\n- $C_3 = [\\text{TG}]$\n- $C_4 = [\\text{TAA}] = [\\text{TAG}] = [\\text{TGA}]$\n- $C_5 = [u]_{dead}$ (所有其他字符串的陷阱状态，例如 $[\\text{A}]$、$[\\text{TT}]$、$[\\text{TAT}]$、长度大于3的字符串等。)\n\n由于在 Nerode 关系下恰好有 $6$ 个等价类，因此识别语言 $L$ 的最小 DFA 必须恰好有 $6$ 个状态。这些状态对应于：\n1.  一个起始状态（$q_0$，来自 $C_0$）。\n2.  一个在看到 $\\text{T}$ 后到达的状态（$q_1$，来自 $C_1$）。\n3.  一个在看到 $\\text{TA}$ 后到达的状态（$q_2$，来自 $C_2$）。\n4.  一个在看到 $\\text{TG}$ 后到达的状态（$q_3$，来自 $C_3$）。\n5.  一个接受状态（$q_F$，来自 $C_4$）。\n6.  一个非接受的陷阱状态（$q_D$，来自 $C_5$）。\n\n因此，最小状态数为 $6$。", "answer": "$$\\boxed{6}$$", "id": "2390505"}, {"introduction": "从自动机的理论设计，我们现在转向一个更实用且广泛应用的工具：正则表达式。本练习模拟了生物信息学文本挖掘中的一项常见任务：在临床报告中识别特定基因名称的提及，同时处理现实世界中的变体，如大小写不一致 [@problem_id:2390535]。此外，通过计算匹配的期望数量，你将在模式匹配和概率分析之间架起桥梁，这是定量生物学中的一项关键技能。", "problem": "在临床基因组学文本挖掘中，常常需要从自由文本中检测特定基因符号的提及。考虑人类基因命名委员会 (Human Gene Nomenclature Committee, HGNC) 的基因符号集：TP53、BRCA1、EGFR 和 MSH2。您将使用正则表达式和一个简单的文本生成模型来建模检测过程以及匹配的统计行为。\n\n给定以下设置。\n\n- 字母表：临床报告是一个由大写拉丁字母、小写拉丁字母、十进制数字和其他字符组成的字符串。为了建模，假设字符是独立同分布 (i.i.d.) 生成的，具体如下：生成一个大写字母的总概率为 $p_{U}$，并且在生成的是大写字母的条件下，26个大写字母中的每一个都是等可能的；生成一个小写字母的总概率为 $p_{L}$，并且在生成的是小写字母的条件下，26个小写字母中的每一个都是等可能的；生成一个数字的总概率为 $p_{D}$，并且在生成的是数字的条件下，10个数字中的每一个都是等可能的；以剩余的概率生成任何其他字符（您不需要其确切分布）。假设 $p_{U} + p_{L} + p_{D} \\leq 1$。\n- 提及：在本问题中，基因符号的“提及”被定义为其精确字符序列作为连续子串的出现，其中字母不区分大小写，而数字需要精确匹配。例如，“tp53”、“Tp53” 和 “TP53” 都算作 TP53 的提及，“BrCa1” 算作 BRCA1 的提及。\n\n任务：\n\n1) 从正则表达式的形式化定义（并集、串联和字符类）出发，编写一个在给定字母表上的不区分大小写的正则表达式，该表达式能够作为连续子串精确匹配 TP53、BRCA1、EGFR 和 MSH2 这四个基因符号，允许字母的任意大小写形式，但要求数字精确匹配。\n\n2) 使用上述独立同分布的字符模型，考虑一份长度为 $N$（$N \\geq 5$）的临床报告。定义一个随机变量，用于计算报告中任意位置出现这四个基因符号中任意一个的（可能重叠的）提及总数。请从第一性原理（指示变量和期望的线性性）出发，推导该计数的期望值的闭式表达式，该表达式是关于 $N$、$p_U$、$p_L$ 和 $p_D$ 的函数。请用 $N$、$p_U$、$p_L$ 和 $p_D$ 以最简解析形式表达您的最终答案。不要提供数值近似。", "solution": "首先对提出的问题进行严格验证。\n\n**步骤 1：提取已知条件**\n- **基因符号：** TP53, BRCA1, EGFR, MSH2。\n- **字母表与模型：** 字符从一个由大写字母、小写字母、数字和其他字符组成的字母表中独立同分布 (i.i.d.) 地抽取。\n- **概率：**\n    - 生成一个大写字母的总概率：$p_{U}$。26个大写字母中的每一个都是等可能的。\n    - 生成一个小写字母的总概率：$p_{L}$。26个小写字母中的每一个都是等可能的。\n    - 生成一个数字的总概率：$p_{D}$。10个数字中的每一个都是等可能的。\n    - **约束条件：** $p_{U} + p_{L} + p_{D} \\leq 1$。\n- **提及的定义：** 匹配基因符号序列的连续子串。字母匹配不区分大小写，数字精确匹配。\n- **报告长度：** $N$，其中 $N \\geq 5$。\n- **任务：**\n    1.  为四个基因符号构建一个不区分大小写的正则表达式。\n    2.  推导长度为 $N$ 的报告中提及的总数的期望值。\n\n**步骤 2：使用提取的已知条件进行验证**\n根据验证标准对问题进行评估。\n- **科学上成立：** 问题使用了计算生物学（基因符号检测）、计算机科学（正则表达式）和概率论（i.i.d. 模型、期望的线性性）中的标准概念。虽然 i.i.d. 字符模型是对自然语言的简化，但对于此类理论问题而言，这是一个常见且有效的假设。\n- **定义明确：** 所有必要信息都已提供。基因提及的定义和概率模型是精确的。任务陈述清晰，可以推导出唯一的解。条件 $N \\geq 5$ 确保了最长的基因符号（BRCA1，长度为5）可以出现在文本中。\n- **客观的：** 问题以形式化、客观的语言陈述，没有歧义或主观论断。\n\n**步骤 3：结论与行动**\n问题在科学上是合理的、定义明确且客观的。它不包含任何矛盾或缺失的信息。因此，该问题被认定为 **有效**，并将推导其形式化解。\n\n**第 1 部分：正则表达式构建**\n\n任务是构建一个单一的正则表达式，用以匹配四个指定的基因符号：`TP53`、`BRCA1`、`EGFR`和`MSH2`中的任意一个。匹配必须对字母不区分大小写，对数字精确匹配。构建将基于形式化运算：并集（用 `|` 表示）和串联（通过邻接隐式表示）。\n\n对于单个字母字符，比如`T`，不区分大小写的匹配要求它能匹配`T`或`t`。这表示为并集 `(T|t)`。对于一个数字，比如`5`，匹配是精确的，所以表达式就是`5`。\n\n我们通过串联其构成字符的表达式来为每个基因符号构建表达式：\n- 对于 `TP53`：两个字母后跟两个数字。正则表达式为 `(T|t)(P|p)53`。\n- 对于 `BRCA1`：四个字母后跟一个数字。正则表达式为 `(B|b)(R|r)(C|c)(A|a)1`。\n- 对于 `EGFR`：四个字母。正则表达式为 `(E|e)(G|g)(F|f)(R|r)`。\n- 对于 `MSH2`：三个字母后跟一个数字。正则表达式为 `(M|m)(S|s)(H|h)2`。\n\n为了匹配这四个基因符号中的任意一个，我们对它们各自的正则表达式取并集。这就得到了最终的复合正则表达式：\n((T|t)(P|p)53)|((B|b)(R|r)(C|c)(A|a)1)|((E|e)(G|g)(F|f)(R|r))|((M|m)(S|s)(H|h)2)\n该表达式正确地建模了所指定的匹配标准。\n\n**第 2 部分：提及期望数的推导**\n\n设 $X$ 为一个随机变量，表示在长度为 $N$ 的文本中，四个基因符号中任意一个的（可能重叠的）提及总数。我们需要求 $X$ 的期望值，记为 $E[X]$。我们从第一性原理出发，使用指示变量和期望的线性性进行推导。\n\n设 $\\mathcal{S} = \\{\\text{TP53, BRCA1, EGFR, MSH2}\\}$ 为基因符号的集合。对于每个符号 $S \\in \\mathcal{S}$，设 $L_S$ 为其长度。\n- $L_{\\text{TP53}} = 4$\n- $L_{\\text{BRCA1}} = 5$\n- $L_{\\text{EGFR}} = 4$\n- $L_{\\text{MSH2}} = 4$\n\n对于每个符号 $S \\in \\mathcal{S}$ 和文本中每个可能的起始位置 $i$（其中 $1 \\leq i \\leq N - L_S + 1$），我们定义一个指示随机变量 $X_{i,S}$：\n$$ X_{i,S} = \\begin{cases} 1 & \\text{如果符号 } S \\text{ 的一次提及起始于位置 } i \\\\ 0 & \\text{其他情况} \\end{cases} $$\n总计数 $X$ 是这些指示变量在所有符号和所有有效起始位置上的总和：\n$$ X = \\sum_{S \\in \\mathcal{S}} \\sum_{i=1}^{N - L_S + 1} X_{i,S} $$\n根据期望的线性性，$X$的期望值为：\n$$ E[X] = E\\left[\\sum_{S \\in \\mathcal{S}} \\sum_{i=1}^{N - L_S + 1} X_{i,S}\\right] = \\sum_{S \\in \\mathcal{S}} \\sum_{i=1}^{N - L_S + 1} E[X_{i,S}] $$\n指示变量的期望是它所指示事件的概率。因此，$E[X_{i,S}] = P(X_{i,S} = 1)$。\n设 $P_S = P(X_{i,S} = 1)$ 为符号 $S$ 的一次提及在任意位置 $i$ 开始的概率。由于字符是独立同分布的，这个概率与位置 $i$ 无关。\n\n下一步是为每个 $S \\in \\mathcal{S}$ 计算 $P_S$。我们首先确定匹配单个字符的概率。\n- 抽取一个特定大写字母的概率是 $\\frac{p_U}{26}$。\n- 抽取一个特定小写字母的概率是 $\\frac{p_L}{26}$。\n- 对于一个字母（比如 `C`）的不区分大小写的匹配，我们需要匹配大写的 `C` 或小写的 `c`。此事件的概率为 $\\frac{p_U}{26} + \\frac{p_L}{26} = \\frac{p_U + p_L}{26}$。我们用 $P_{char}$ 表示这个概率。\n- 抽取一个特定数字的概率是 $\\frac{p_D}{10}$。我们用 $P_{digit}$ 表示这个概率。\n\n根据 i.i.d. 假设，匹配一个基因符号字符串的概率 $P_S$ 是匹配该字符串中每个字符的概率的乘积。\n- 对于 $S = \\text{TP53}$（2个字母，2个数字）：\n$$ P_{\\text{TP53}} = (P_{char})^2 (P_{digit})^2 = \\left(\\frac{p_U + p_L}{26}\\right)^2 \\left(\\frac{p_D}{10}\\right)^2 $$\n- 对于 $S = \\text{BRCA1}$（4个字母，1个数字）：\n$$ P_{\\text{BRCA1}} = (P_{char})^4 (P_{digit})^1 = \\left(\\frac{p_U + p_L}{26}\\right)^4 \\left(\\frac{p_D}{10}\\right) $$\n- 对于 $S = \\text{EGFR}$（4个字母，0个数字）：\n$$ P_{\\text{EGFR}} = (P_{char})^4 = \\left(\\frac{p_U + p_L}{26}\\right)^4 $$\n- 对于 $S = \\text{MSH2}$（3个字母，1个数字）：\n$$ P_{\\text{MSH2}} = (P_{char})^3 (P_{digit})^1 = \\left(\\frac{p_U + p_L}{26}\\right)^3 \\left(\\frac{p_D}{10}\\right) $$\n\n现在，我们可以将这些概率代回到 $E[X]$ 的表达式中。\n$$ E[X] = \\sum_{S \\in \\mathcal{S}} \\sum_{i=1}^{N - L_S + 1} P_S = \\sum_{S \\in \\mathcal{S}} (N - L_S + 1) P_S $$\n将这个和式对四个基因符号展开：\n$$ E[X] = (N - L_{\\text{TP53}} + 1)P_{\\text{TP53}} + (N - L_{\\text{BRCA1}} + 1)P_{\\text{BRCA1}} + (N - L_{\\text{EGFR}} + 1)P_{\\text{EGFR}} + (N - L_{\\text{MSH2}} + 1)P_{\\text{MSH2}} $$\n代入长度 $L_S$：\n$$ E[X] = (N - 4 + 1)P_{\\text{TP53}} + (N - 5 + 1)P_{\\text{BRCA1}} + (N - 4 + 1)P_{\\text{EGFR}} + (N - 4 + 1)P_{\\text{MSH2}} $$\n$$ E[X] = (N - 3)P_{\\text{TP53}} + (N - 4)P_{\\text{BRCA1}} + (N - 3)P_{\\text{EGFR}} + (N - 3)P_{\\text{MSH2}} $$\n我们可以将具有相同系数的项组合在一起：\n$$ E[X] = (N - 3)(P_{\\text{TP53}} + P_{\\text{EGFR}} + P_{\\text{MSH2}}) + (N - 4)P_{\\text{BRCA1}} $$\n最后，我们代入概率表达式，得到以 $N$、$p_U$、$p_L$ 和 $p_D$ 表示的期望计数的最终闭式表达式：\n$$ E[X] = (N - 3)\\left[ \\left(\\frac{p_U + p_L}{26}\\right)^2 \\left(\\frac{p_D}{10}\\right)^2 + \\left(\\frac{p_U + p_L}{26}\\right)^4 + \\left(\\frac{p_U + p_L}{26}\\right)^3 \\left(\\frac{p_D}{10}\\right) \\right] + (N - 4)\\left(\\frac{p_U + p_L}{26}\\right)^4 \\left(\\frac{p_D}{10}\\right) $$\n该表达式代表了从给定原理推导出的最终解析解。", "answer": "$$\\boxed{(N - 3)\\left[ \\left(\\frac{p_U + p_L}{26}\\right)^{2} \\left(\\frac{p_D}{10}\\right)^{2} + \\left(\\frac{p_U + p_L}{26}\\right)^{4} + \\left(\\frac{p_U + p_L}{26}\\right)^{3} \\left(\\frac{p_D}{10}\\right) \\right] + (N - 4)\\left(\\frac{p_U + p_L}{26}\\right)^{4} \\left(\\frac{p_D}{10}\\right)}$$", "id": "2390535"}]}