{"hands_on_practices": [{"introduction": "在许多理论研究中，求解量子系统的基态是至关重要的第一步。本练习将介绍一种强大的数值方法——虚时演化法 [@problem_id:2460933]。通过将时间变量虚数化 ($t \\to -i\\tau$)，薛定谔方程会转变为一个类似于扩散的方程，这使得任意初始波函数都能自然地“弛豫”到能量最低的本征态。这个实践为你提供了一种确定基态波函数及其能量的稳健方法。", "problem": "考虑一个一维非相对论性量子粒子，其演化遵循虚时间中的含时薛定谔方程 (TDSE)。令 $\\hbar$ 表示约化普朗克常数，$m$ 表示粒子质量。在无量纲单位制下进行计算，其中 $\\hbar=1$ 且 $m=1$。哈密顿量为 $\\hat{H}=\\hat{T}+\\hat{V}$，其中动能算符为 $\\hat{T}=-\\tfrac{1}{2}\\tfrac{\\partial^{2}}{\\partial x^{2}}$，势能为 $V(x)=a\\,(x^{2}-b^{2})^{2}$，$a>0$ 和 $b>0$ 是实数参数。令 $\\psi(x,\\tau)$ 表示虚时间 $\\tau$（通过 $t\\mapsto -i\\,\\tau$ 定义）下的波函数，其演化遵循以下方程：\n$$\n\\frac{\\partial \\psi(x,\\tau)}{\\partial \\tau}=-\\hat{H}\\,\\psi(x,\\tau).\n$$\n在一个有限区间 $x\\in[-L/2,L/2)$ 上，该区间被离散化为一个包含 $N_x$ 个点的均匀网格，格点间距为 $\\Delta x=L/N_x$。考虑如下归一化初始条件：\n$$\n\\psi(x,0)=\\frac{1}{\\mathcal{N}}\\exp\\!\\left(-\\frac{x^{2}}{2\\sigma^{2}}\\right),\n$$\n其中 $\\sigma>0$ 是给定的宽度，$\\mathcal{N}$ 是归一化因子，其取值需满足 $\\int |\\psi(x,0)|^{2}\\,dx=1$。令 $\\Delta \\tau > 0$ 表示一个固定的虚时间步长。定义在虚时间 $\\tau$ 的瞬时能量为期望值：\n$$\nE(\\tau)=\\int \\psi^{\\ast}(x,\\tau)\\,\\hat{H}\\,\\psi(x,\\tau)\\,dx,\n$$\n需要明确的是，数值实现必须在网格上对该积分进行一致的近似。\n\n通过在上述虚时间动力学下演化 $\\psi(x,\\tau)$ 并同时保持其归一化，可以近似求解给定势能参数下的唯一归一化基态 $\\psi_{0}(x)$ 及其基态能量 $E_{0}$。就本问题而言，当连续监测点之间的能量绝对差满足以下条件时，定义为收敛：\n$$\n|E_{n+1}-E_{n}|  \\varepsilon,\n$$\n其中 $\\varepsilon > 0$ 为预设容差，$E_{n}$是在第 $n$ 次监测事件后计算出的能量。如果在指定的最大传播步数 $N_{\\text{max}}$ 内未达到收敛标准，则停止计算并报告最后一次计算的能量。\n\n使用以下参数集 $(a,b,L,N_x,\\Delta \\tau,\\varepsilon,N_{\\text{max}},\\sigma)$ 测试套件，每个测试集都应基于上述相同的数值方案和初始条件定义进行独立处理。所有量均为无量纲。\n\n- 测试 $1$：$(a,b,L,N_x,\\Delta \\tau,\\varepsilon,N_{\\text{max}},\\sigma)=\\left(1.0,\\,1.0,\\,12.0,\\,512,\\,1.0\\times 10^{-3},\\,1.0\\times 10^{-10},\\,20000,\\,1.0\\right)$。\n- 测试 $2$：$(a,b,L,N_x,\\Delta \\tau,\\varepsilon,N_{\\text{max}},\\sigma)=\\left(5.0,\\,1.5,\\,20.0,\\,512,\\,5.0\\times 10^{-4},\\,1.0\\times 10^{-10},\\,20000,\\,1.5\\right)$。\n- 测试 $3$：$(a,b,L,N_x,\\Delta \\tau,\\varepsilon,N_{\\text{max}},\\sigma)=\\left(0.5,\\,0.5,\\,10.0,\\,512,\\,1.0\\times 10^{-3},\\,1.0\\times 10^{-10},\\,20000,\\,0.5\\right)$。\n\n针对每个测试，输出数值收敛的基态能量 $E_{0}$，结果为实数并四舍五入到六位小数。你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，结果按上述测试顺序列出，例如 [$e_{1}$,$e_{2}$,$e_{3}$]，其中 $e_{j}$ 表示测试 $j$ 的四舍五入后的基态能量。\n\n所有计算都必须在所述的无量纲系统中执行。本问题不涉及角度。最终答案是无物理单位的纯数字，并且必须报告为四舍五入到六位小数的结果。", "solution": "所述问题是有效的。这是一个计算量子力学中的适定问题，其基础是薛定谔方程的既定原理及其通过虚时间传播的数值解法。所有参数均已提供，目标也已明确定义。我们将着手进行求解。\n\n该问题要求求解由哈密顿量 $\\hat{H}=\\hat{T}+\\hat{V}$ 描述的一维量子系统的基态能量 $E_0$。其中动能算符为 $\\hat{T}=-\\tfrac{1}{2}\\tfrac{\\partial^{2}}{\\partial x^{2}}$，势能为 $V(x)=a\\,(x^{2}-b^{2})^{2}$，计算在无量纲单位制（$\\hbar=1$ 和 $m=1$）下进行。所用方法为虚时间传播法。\n\n波函数 $\\psi(x,\\tau)$ 在虚时间 $\\tau$ 中的演化由虚时间薛定谔方程决定：\n$$\n\\frac{\\partial \\psi(x,\\tau)}{\\partial \\tau}=-\\hat{H}\\,\\psi(x,\\tau)\n$$\n在一个微小时间步长 $\\Delta \\tau$ 内，此方程的形式解由下式给出：\n$$\n\\psi(x, \\tau+\\Delta\\tau) = e^{-\\hat{H}\\Delta\\tau} \\psi(x, \\tau)\n$$\n将 $\\psi(x, \\tau)$ 在哈密顿量 $\\hat{H}$ 的一组完备能量本征态 $\\phi_n(x)$（其本征值为 $E_n$）基上展开，即 $\\psi(x, \\tau)=\\sum_n c_n(\\tau) \\phi_n(x)$，则系数的演化为 $c_n(\\tau) = c_n(0)e^{-E_n\\tau}$。当 $\\tau \\to \\infty$ 时，只要初始态与基态有非零交叠（即 $c_0(0) \\neq 0$），对应于最低能量 $E_0$ 的项将占据主导地位。因此，$\\psi(x,\\tau)$ 将收敛到基态波函数 $\\psi_0(x)$。\n\n数值任务的核心是实现传播子 $e^{-\\hat{H}\\Delta\\tau}$。由于动能算符 $\\hat{T}$ 和势能算符 $\\hat{V}$ 不对易，我们不能简单地写成 $e^{-(\\hat{T}+\\hat{V})\\Delta\\tau} = e^{-\\hat{T}\\Delta\\tau}e^{-\\hat{V}\\Delta\\tau}$。作为替代，我们使用二阶 Trotter-Suzuki 分解，也称为分裂算符法或 Strang 分裂法：\n$$\ne^{-(\\hat{T}+\\hat{V})\\Delta\\tau} \\approx e^{-\\hat{V}\\Delta\\tau/2} e^{-\\hat{T}\\Delta\\tau} e^{-\\hat{V}\\Delta\\tau/2}\n$$\n对于单步计算，该近似的精度为 $\\mathcal{O}(\\Delta\\tau^3)$ 阶，从而得到一个全局二阶精度的算法。\n\n该算法在离散化的空间网格上实现。定义域 $x\\in[-L/2,L/2)$ 被离散化为 $N_x$ 个点 $x_j = -L/2 + j\\Delta x$（其中 $j=0, 1, \\dots, N_x-1$），格点间距为 $\\Delta x=L/N_x$。波函数 $\\psi(x, \\tau)$ 由其在这些格点上的值构成的向量表示，即 $\\psi_j(\\tau) = \\psi(x_j, \\tau)$。\n\n分裂算符传播步骤执行如下：\n$1$. 势能传播子 $e^{-\\hat{V}\\Delta\\tau/2}$ 是位置空间中的局域算符。其作用是简单的逐点相乘：$\\psi'_j = e^{-V(x_j)\\Delta\\tau/2} \\psi_j$。\n$2$. 动能传播子 $e^{-\\hat{T}\\Delta\\tau}$ 在动量空间中是对角的。我们使用快速傅里叶变换 (FFT) 切换到动量表象。在离散动量网格 $k_m = 2\\pi f_m$ 上（其中 $f_m$ 是来自 `fftfreq` 的离散频率），动能算符为 $\\hat{T}(k_m) = k_m^2/2$。因此，在动量空间中的传播步骤是逐点相乘：\n$$\n\\tilde{\\psi}''_m = e^{-T(k_m)\\Delta\\tau} \\tilde{\\psi}'_m\n$$\n其中 $\\tilde{\\psi}' = \\mathcal{F}[\\psi']$ 是 $\\psi'$ 的正向快速傅里叶变换。然后使用逆向快速傅里叶变换将结果变换回位置空间：$\\psi'' = \\mathcal{F}^{-1}[\\tilde{\\psi}'']$。\n$3$. 应用第二个势能半步：$\\psi_{unnorm, j}(\\tau+\\Delta\\tau) = e^{-V(x_j)\\Delta\\tau/2} \\psi''_j$。\n\n虚时间演化导致波函数的模衰减。为获得基态本征函数，必须在每个传播步骤后将波函数重新归一化为1。模通过求和来近似：$\\mathcal{M} = \\left( \\sum_{j=0}^{N_x-1} |\\psi_{unnorm}(x_j)|^2 \\Delta x \\right)^{1/2}$。那么，下一步的归一化波函数为 $\\psi_j(\\tau+\\Delta\\tau) = \\psi_{unnorm, j}(\\tau+\\Delta\\tau) / \\mathcal{M}$。\n\n初始态是归一化的高斯函数 $\\psi(x,0)=\\frac{1}{\\mathcal{N}}\\exp\\!\\left(-\\frac{x^{2}}{2\\sigma^{2}}\\right)$。归一化常数 $\\mathcal{N}$ 在离散网格上计算，以确保 $\\sum_{j=0}^{N_x-1} |\\psi(x_j,0)|^2 \\Delta x = 1$。所选的高斯函数是一个偶函数，它与对称双势阱的基态有非零交叠，从而确保收敛到正确的状态。\n\n在时间步 $n$ 的瞬时能量计算为期望值 $E_n = \\langle\\psi_n|\\hat{H}|\\psi_n\\rangle$。这被分为动能和势能两部分贡献。\n势能为 $E_V = \\int \\psi^*(x) V(x) \\psi(x) dx \\approx \\Delta x \\sum_{j} |\\psi_j|^2 V(x_j)$。\n动能为 $E_T = \\int \\psi^*(x) (\\hat{T}\\psi(x)) dx$。动能算符的作用 $\\hat{T}\\psi$ 在傅里叶空间中计算：$\\hat{T}\\psi = \\mathcal{F}^{-1}[ (k^2/2) \\mathcal{F}[\\psi] ]$。然后该积分通过在网格上求和来计算：$E_T \\approx \\Delta x \\sum_j \\psi_j^* (\\hat{T}\\psi)_j$。总能量为 $E_n = E_T + E_V$。\n\n传播过程迭代进行，最多达 $N_{\\text{max}}$ 步。在每一步 $n$，计算能量 $E_n$ 并与上一步的能量 $E_{n-1}$ 进行比较。当 $|E_n - E_{n-1}|  \\varepsilon$ 时，认为模拟已收敛并终止。如果在 $N_{\\text{max}}$ 步内未满足此条件，则计算停止并报告最终计算的能量 $E_{N_{\\text{max}}}$。对于每个测试用例，最终能量四舍五入到六位小数。", "answer": "```python\nimport numpy as np\nfrom numpy.fft import fft, ifft, fftfreq\n\ndef find_ground_state_energy(a, b, L, Nx, dtau, epsilon, N_max, sigma):\n    \"\"\"\n    Calculates the ground state energy of a 1D quantum particle in a double-well potential\n    using the imaginary time propagation method with a split-operator Fourier scheme.\n\n    Args:\n        a (float): Potential parameter for the quartic term.\n        b (float): Potential parameter defining the well minima location.\n        L (float): Length of the 1D simulation box.\n        Nx (int): Number of grid points.\n        dtau (float): Imaginary time step.\n        epsilon (float): Convergence tolerance for the energy.\n        N_max (int): Maximum number of propagation steps.\n        sigma (float): Width of the initial Gaussian wave packet.\n\n    Returns:\n        float: The calculated ground-state energy.\n    \"\"\"\n    # 1. Setup spatial and momentum grids\n    x = np.linspace(-L / 2, L / 2, Nx, endpoint=False)\n    dx = L / Nx\n    k = 2 * np.pi * fftfreq(Nx, d=dx)\n\n    # 2. Define potential and kinetic energy operators\n    V_x = a * (x**2 - b**2)**2\n    T_k = 0.5 * k**2  # In dimensionless units, hbar=1, m=1\n\n    # 3. Initialize the wavefunction as a normalized Gaussian\n    psi = np.exp(-x**2 / (2 * sigma**2))\n    # Wavefunction is purely real, so np.abs is for generality\n    norm_factor = np.sqrt(np.sum(np.abs(psi)**2) * dx)\n    psi = psi / norm_factor\n\n    # 4. Define the time propagation operators for the split-operator method\n    prop_V_half = np.exp(-V_x * dtau / 2.0)\n    prop_T = np.exp(-T_k * dtau)\n\n    # 5. Main propagation loop\n    E_current = 0.0\n    for step in range(N_max):\n        E_previous = E_current\n\n        # Apply split-operator propagation for one time step\n        # V/2 step\n        psi = prop_V_half * psi\n        # T step\n        psi_k = fft(psi)\n        psi_k = prop_T * psi_k\n        psi = ifft(psi_k)\n        # V/2 step\n        psi = prop_V_half * psi\n\n        # Renormalize the wavefunction\n        norm = np.sqrt(np.sum(np.abs(psi)**2) * dx)\n        psi = psi / norm\n\n        # Calculate the energy expectation value\n        # Kinetic energy\n        T_psi = ifft(T_k * fft(psi))\n        E_T = dx * np.real(np.vdot(psi, T_psi))\n        \n        # Potential energy\n        E_V = dx * np.sum(np.abs(psi)**2 * V_x)\n        \n        E_current = E_T + E_V\n\n        # Check for convergence after the first step\n        if step  0:\n            if np.abs(E_current - E_previous)  epsilon:\n                break\n    \n    return E_current\n\ndef solve():\n    \"\"\"\n    Runs the simulation for the specified test cases and prints the results.\n    \"\"\"\n    test_cases = [\n        # (a, b, L, Nx, dtau, epsilon, N_max, sigma)\n        (1.0, 1.0, 12.0, 512, 1.0e-3, 1.0e-10, 20000, 1.0),\n        (5.0, 1.5, 20.0, 512, 5.0e-4, 1.0e-10, 20000, 1.5),\n        (0.5, 0.5, 10.0, 512, 1.0e-3, 1.0e-10, 20000, 0.5),\n    ]\n\n    results = []\n    for case_params in test_cases:\n        ground_energy = find_ground_state_energy(*case_params)\n        results.append(ground_energy)\n\n    # Format the output as specified: a list of numbers rounded to six decimal places.\n    print(f\"[{','.join(f'{e:.6f}' for e in results)}]\")\n\nsolve()\n```", "id": "2460933"}, {"introduction": "量子隧穿是一种违背经典直觉的典型量子现象，它允许粒子穿过经典情况下无法逾越的能量壁垒。这项实践 [@problem_id:2460912] 将引导你通过实时传播一个高斯波包来直接模拟这一效应。你将实现一个完整的数值求解器，以计算波包穿过势垒的透射概率，这是从电子器件到化学反应动力学等多个领域中的一个基本物理量。", "problem": "一个一维量子粒子在原子单位（其中 $\\hbar = 1$ 且 $m = 1$）下，根据含时薛定谔方程演化。一个初始时位于位置 $x_0$、空间宽度为 $\\sigma$、平均波数为 $k_0$ 的归一化高斯波包，从左侧入射到一个高度为 $V_0$、宽度为 $a$、中心位于 $x_B = 0$ 的矩形势垒上。穿过势垒的隧穿（透射）概率可以定义为，根据概率守恒，在所有时间内对穿过位于势垒右侧的固定探测位置 $x_\\text{probe}$ 的总概率流进行积分。请实现一个数值求解器来传播该波包，计算在探测器处的瞬时概率流密度，并对透射流通量进行积分，以获得每个测试案例的透射概率。\n\n使用的基本原理和定义：\n- 含时薛定谔方程为\n$$\n\\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right]\\psi(x,t).\n$$\n- 概率密度为 $\\rho(x,t) = |\\psi(x,t)|^2$。连续性方程为\n$$\n\\frac{\\partial \\rho(x,t)}{\\partial t} + \\frac{\\partial J(x,t)}{\\partial x} = 0,\n$$\n其中概率流密度为\n$$\nJ(x,t) \\;=\\; \\Im\\!\\left(\\psi^*(x,t)\\,\\frac{\\partial \\psi(x,t)}{\\partial x}\\right).\n$$\n- 矩形势垒为\n$$\nV(x) \\;=\\; \\begin{cases}\nV_0,  |x - x_B| \\le \\dfrac{a}{2},\\\\\n0,  \\text{其他情况}.\n\\end{cases}\n$$\n- 初始高斯波包为\n$$\n\\psi(x,0) \\;=\\; \\left(\\frac{1}{2\\pi \\sigma^2}\\right)^{1/4}\\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\sigma^2}\\right)\\exp(\\mathrm{i}k_0 x),\n$$\n该波包必须在所选网格上进行数值归一化，以确保 $\\int |\\psi(x,0)|^2 \\,\\mathrm{d}x = 1$。\n\n数值要求：\n- 使用一种与含时薛定谔方程一致的稳定算法，在有限空间域中传播 $\\psi(x,t)$；例如，基于快速傅里叶变换（FFT）的时间分裂谱方法是可接受的，但任何遵循上述方程且能达到相当精度的算法都是允许的。\n- 为防止来自模拟边界的非物理反射，请使用通过复吸收层实现的吸收边界。一种便捷的选择是在左、右边缘附近向势场添加一个纯虚数贡献 $-\\,\\mathrm{i}\\,W(x)$，其中 $W(x) \\ge 0$ 是平滑的，并在内部区域消失。\n- 在每个时间步，计算固定探测位置 $x_\\text{probe}$ 处的瞬时概率流密度。为近似 $\\partial \\psi/\\partial x$，您可以使用空间步长为 $\\Delta x$ 的中心差分。\n- 将探测器处的透射流定义为正向贡献 $J_+(x_\\text{probe},t) = \\max(J(x_\\text{probe},t),0)$，并通过时间积分来近似透射概率\n$$\nT \\;\\approx\\; \\int_{0}^{T_\\text{end}} J_+(x_\\text{probe},t)\\,\\mathrm{d}t,\n$$\n其中 $T_\\text{end}$ 足够大，以确保透射波包已通过探测器，且残余贡献可以忽略不计。\n\n所有测试案例通用的仿真参数：\n- 空间域 $[x_\\text{min},x_\\text{max}] = [-100,100]$。\n- 网格点数 $N = 2048$（均匀间距）。\n- 时间步长 $\\Delta t = 0.05$。\n- 总传播时间 $T_\\text{end} = 160$。\n- 在两个域边缘附近的吸收层宽度 $x_\\text{cap} = 20$，强度参数 $\\eta = 0.02$，使用二次剖面 $W(x)$；即，在吸收区域内 $W(x) = \\eta\\,s(x)^2$，其中 $s(x)$ 在 $x_\\text{cap}$ 的宽度上从 $0$ 增加到 $1$。\n- 势垒中心 $x_B = 0$，探测器位置 $x_\\text{probe} = a/2 + 10$（相对于势垒宽度固定），初始波包中心 $x_0 = -60$，波包宽度 $\\sigma = 1.5$。\n\n测试套件：\n- 案例 1：$k_0 = 1.5$, $V_0 = 2.0$, $a = 4.0$。\n- 案例 2：$k_0 = 0.8$, $V_0 = 2.5$, $a = 6.0$。\n- 案例 3：$k_0 = 2.5$, $V_0 = 1.0$, $a = 4.0$。\n\n答案规格：\n- 对每个案例，使用上述通量积分方法计算透射概率 $T$。每个 $T$ 都是无单位的，并且在数值误差范围内必须位于 $[0,1]$ 区间。报告每个结果时，四舍五入到六位小数。\n- 您的程序必须生成单行输出，其中包含三个结果，形式为用方括号括起来的逗号分隔列表，例如 `[0.123456,0.000789,0.876543]`。\n- 不需要外部输入，所有量均采用原子单位。确保报告的值按要求四舍五入到六位小数。", "solution": "问题陈述已经过验证，被认为是科学上可靠、提法恰当且完整的。它描述了计算量子动力学中的一个标准练习，基于量子力学的基本原理。数值求解所需的所有参数均已提供，且定义一致。我们可以开始求解。\n\n问题的核心是针对给定的初始状态和势，求解一维含时薛定谔方程（TDSE）。在原子单位（$\\hbar=1$, $m=1$）下，TDSE为：\n$$ \\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) \\;=\\; \\hat{H}\\psi(x,t) \\;=\\; \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V_{\\text{eff}}(x)\\right]\\psi(x,t) $$\n$t=0$ 时的初始状态是一个归一化的高斯波包。有效势 $V_{\\text{eff}}(x)$ 包括实矩形势垒 $V(x)$ 和一个位于网格边界的虚数复吸收势（CAP）$- \\mathrm{i}W(x)$，以防止非物理反射。\n\n为了在时间上传播波函数 $\\psi(x,t)$，我们采用时间分裂谱方法。该方法非常适合此问题，因为它准确、稳定且计算效率高。在一个小时间步长 $\\Delta t$ 内，形式解涉及到时间演化算符 $\\hat{U}(\\Delta t) = \\exp(-\\mathrm{i}\\hat{H}\\Delta t)$。由于动能算符 $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$ 和势能算符 $\\hat{V}_{\\text{eff}} = V_{\\text{eff}}(x)$ 不对易，我们使用二阶Strang分裂分解来近似演化算符：\n$$ \\hat{U}(\\Delta t) \\approx e^{-\\mathrm{i}\\hat{V}_{\\text{eff}}\\Delta t/2} e^{-\\mathrm{i}\\hat{T}\\Delta t} e^{-\\mathrm{i}\\hat{V}_{\\text{eff}}\\Delta t/2} $$\n此近似的误差阶数为 $\\mathcal{O}(\\Delta t^3)$，对于指定的参数足以提供足够的精度。从时间 $t$ 到 $t+\\Delta t$ 的传播分三步执行：\n$1$. 在势 $\\hat{V}_{\\text{eff}}$ 下演化半步。在位置表象中，这是一个简单的乘法：$\\psi'(x) = e^{-\\mathrm{i}V_{\\text{eff}}(x)\\Delta t/2} \\psi(x,t)$。\n$2$. 在动能算符 $\\hat{T}$ 下演化一整步。此操作在位置空间中计算复杂，但在动量空间中则很简单，因为在动量空间中 $\\hat{T}$ 是一个简单的乘法算符，$\\hat{T}_k = k^2/2$。我们使用快速傅里叶变换（FFT）在不同表象间切换。波函数被变换到动量空间（$\\tilde{\\psi}'(k) = \\mathcal{F}[\\psi'(x)]$），乘以动能演化因子（$e^{-\\mathrm{i}k^2\\Delta t/2}$），然后变换回位置空间（$\\psi''(x) = \\mathcal{F}^{-1}[e^{-\\mathrm{i}k^2\\Delta t/2}\\tilde{\\psi}'(k)]$）。\n$3$. 在势下进行第二个半步演化：$\\psi(x, t+\\Delta t) = e^{-\\mathrm{i}V_{\\text{eff}}(x)\\Delta t/2} \\psi''(x)$。\n\n从 $t=0$ 到 $t=T_{\\text{end}}$，这个三步循环将被重复执行。\n\n仿真域在区间 $[x_{\\text{min}}, x_{\\text{max}}] = [-100, 100]$ 上被离散化为一个包含 $N=2048$ 个点的均匀空间网格，间距为 $\\Delta x = (x_{\\text{max}}-x_{\\text{min}})/N$。相应的动量空间（波数）网格 $k$ 使用与FFT算法一致的 `fftfreq` 实用程序构建。\n\n初始波包由下式给出：\n$$ \\psi(x,0) \\;=\\; C \\exp\\!\\left(-\\frac{(x-x_0)^2}{4\\sigma^2}\\right)\\exp(\\mathrm{i}k_0 x) $$\n其中 $C = (2\\pi \\sigma^2)^{-1/4}$。关键是，对于离散网格上的数值工作，该函数必须重新归一化，以确保总概率 $\\int |\\psi(x,0)|^2 dx$（由求和 $\\sum_j |\\psi(x_j,0)|^2 \\Delta x$ 近似）恰好为 $1$。\n\n总有效势为 $V_{\\text{eff}}(x) = V(x) - \\mathrm{i}W(x)$。\n矩形势垒为：\n$$ V(x) \\;=\\; \\begin{cases} V_0,  |x| \\le a/2 \\\\ 0,  \\text{其他情况} \\end{cases} $$\n复吸收势 $W(x)$ 被构造成仅在边界附近、宽度为 $x_{\\text{cap}}=20$ 的区域内非零。按规定，$W(x) = \\eta s(x)^2$，其中 $\\eta=0.02$，$s(x)$ 是一个在吸收区域起点处从 $0$ 线性增加到网格边界处为 $1$ 的函数。例如，在右边界 $x \\in [x_{\\text{max}}-x_{\\text{cap}}, x_{\\text{max}}]$ 上，$s(x) = \\frac{x-(x_{\\text{max}}-x_{\\text{cap}})}{x_{\\text{cap}}}$。这个虚势平滑地吸收出射的波函数，防止虚假反射。\n\n透射概率 $T$ 是通过对流过探测器的概率流密度的通量进行积分来确定的。概率流密度为：\n$$ J(x,t) \\;=\\; \\Im\\!\\left(\\psi^*(x,t)\\,\\frac{\\partial \\psi(x,t)}{\\partial x}\\right) $$\n在数值上，探测位置 $x_{\\text{probe}}$ 处的空间导数使用网格上的中心差分来近似：\n$$ \\frac{\\partial \\psi(x_j,t)}{\\partial x} \\approx \\frac{\\psi(x_{j+1},t) - \\psi(x_{j-1},t)}{2\\Delta x} $$\n其中 $x_j$ 是最接近 $x_{\\text{probe}}$ 的网格点。透射概率 $T$ 是在探测位置 $x_{\\text{probe}} = a/2 + 10$ 处正向流的时间积分：\n$$ T \\;\\approx\\; \\sum_{n=0}^{N_t-1} \\max(J(x_{\\text{probe}}, t_n), 0) \\cdot \\Delta t $$\n其中 $t_n = n\\Delta t$ 且 $N_t = T_{\\text{end}}/\\Delta t$。该求和在整个仿真时间内进行。\n\n算法的流程是先初始化网格、势和归一化的波包。然后，时间演化循环将波函数向前传播。在每一步，计算探测器处的流密度，并将其正向贡献累加到积分的透射概率中。对三个指定的测试案例中的每一个都重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom numpy.fft import fft, ifft, fftfreq\n\ndef run_simulation(k0, V0, a):\n    \"\"\"\n    Runs a single quantum wave packet simulation for a given set of parameters.\n\n    Args:\n        k0 (float): Initial mean wavenumber of the wave packet.\n        V0 (float): Height of the potential barrier.\n        a (float): Width of the potential barrier.\n\n    Returns:\n        float: The computed transmission probability.\n    \"\"\"\n    # 1. Simulation parameters common to all cases\n    x_min, x_max = -100.0, 100.0\n    N = 2048\n    dt = 0.05\n    t_end = 160.0\n    num_steps = int(t_end / dt)\n    x_cap = 20.0\n    eta = 0.02\n    x0 = -60.0\n    sigma = 1.5\n    \n    # 2. Setup spatial and momentum grids\n    x = np.linspace(x_min, x_max, N, endpoint=False)\n    dx = x[1] - x[0]\n    \n    k_freq = fftfreq(N, d=dx)\n    k = 2 * np.pi * k_freq\n    \n    # 3. Initial wave packet\n    psi0_unnorm = (1 / (2 * np.pi * sigma**2))**(1/4) * \\\n                  np.exp(-(x - x0)**2 / (4 * sigma**2)) * \\\n                  np.exp(1j * k0 * x)\n    \n    # Numerical normalization on the discrete grid\n    norm_const = np.sqrt(np.sum(np.abs(psi0_unnorm)**2) * dx)\n    psi = psi0_unnorm / norm_const\n    \n    # 4. Define the potential\n    # Real part: Rectangular barrier\n    x_B = 0.0\n    V_real = np.zeros_like(x)\n    V_real[np.abs(x - x_B) = a / 2] = V0\n    \n    # Imaginary part: Complex Absorbing Potential (CAP)\n    W = np.zeros_like(x)\n    \n    # Right boundary absorber\n    mask_right = x = (x_max - x_cap)\n    if np.any(mask_right):\n        s_right = (x[mask_right] - (x_max - x_cap)) / x_cap\n        W[mask_right] = eta * s_right**2\n        \n    # Left boundary absorber\n    mask_left = x = (x_min + x_cap)\n    if np.any(mask_left):\n        s_left = ((x_min + x_cap) - x[mask_left]) / x_cap\n        W[mask_left] = eta * s_left**2\n    \n    V_eff = V_real - 1j * W\n    \n    # 5. Define time-evolution operators for split-step method\n    exp_V = np.exp(-0.5j * V_eff * dt)\n    exp_T = np.exp(-0.5j * k**2 * dt)\n    \n    # 6. Setup probe for transmission calculation\n    x_probe = a / 2 + 10.0\n    probe_idx = np.argmin(np.abs(x - x_probe))\n    \n    total_transmission = 0.0\n    \n    # 7. Time-evolution loop\n    for _ in range(num_steps):\n        # Strang splitting propagation step\n        psi = exp_V * psi\n        psi_k = fft(psi)\n        psi_k = exp_T * psi_k\n        psi = ifft(psi_k)\n        psi = exp_V * psi\n        \n        # Calculate probability current density at the probe location\n        # Using a centered finite difference for the derivative\n        dpsi_dx_probe = (psi[probe_idx + 1] - psi[probe_idx - 1]) / (2 * dx)\n        current_density_probe = np.imag(np.conj(psi[probe_idx]) * dpsi_dx_probe)\n        \n        # Integrate the positive-directed flux over time\n        total_transmission += max(0, current_density_probe) * dt\n        \n    return total_transmission\n\ndef solve():\n    \"\"\"\n    Main solver function that orchestrates the simulation for all test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (1.5, 2.0, 4.0),  # Case 1\n        (0.8, 2.5, 6.0),  # Case 2\n        (2.5, 1.0, 4.0),  # Case 3\n    ]\n\n    results = []\n    for case in test_cases:\n        k0, V0, a = case\n        transmission = run_simulation(k0=k0, V0=V0, a=a)\n        results.append(f\"{transmission:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2460912"}, {"introduction": "观测如何影响一个量子系统？本练习旨在探究反直觉的量子芝诺效应，即频繁的测量可以有效地“冻结”系统的演化。通过模拟一个处于双阱势中的粒子，并反复将其状态投影回初始势阱 [@problem_id:2460919]，你将亲眼见证“观测行为”如何阻止粒子隧穿。这项实践为理解测量在量子动力学中的深刻作用提供了一个绝佳的动手体验。", "problem": "通过求解原子单位制下的含时薛定谔方程，模拟对称双势阱中粒子的一维量子芝诺效应，其中重复的理想投影测量将粒子限制在初始（左侧）势阱中。整个计算过程完全在原子单位制下进行，其中约化普朗克常数 $\\hbar = 1$，粒子质量 $m = 1$，长度单位为玻尔，能量单位为哈特里，时间单位为原子时间单位。\n\n一个质量为 $m=1$ 的粒子在一维势场中运动\n$$\nV(x) = V_0 \\left(x^2 - b^2\\right)^2,\n$$\n其中 $V_0 = 0.2$ 且 $b = 1.0$。在时间 $t=0$ 时的初始波函数是一个归一化的高斯波包，中心位于左侧势阱，\n$$\n\\psi(x,0) = \\left(\\pi \\sigma^2\\right)^{-1/4} \\exp\\!\\left(-\\frac{(x - x_0)^2}{2 \\sigma^2}\\right),\n$$\n其中 $x_0 = -b$ 且 $\\sigma = 0.5$。其时间演化由含时薛定谔方程决定\n$$\n\\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) = \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right]\\psi(x,t).\n$$\n\n定义到左侧区域（初始势阱）的投影算符 $P_L$ 为\n$$\n(P_L \\psi)(x) = \\begin{cases}\n\\psi(x),  x  0,\\\\\n0,  x \\ge 0.\n\\end{cases}\n$$\n考虑在时间 $t_k = k\\,\\tau$（对于整数 $k \\ge 1$）进行的理想瞬时测量，其中 $\\tau$ 是测量时间间隔。在每次测量前的瞬间 $t_k^{-}$，计算粒子在左侧势阱的概率\n$$\np_k = \\langle \\psi(t_k^-)|P_L|\\psi(t_k^-)\\rangle = \\int_{-\\infty}^{0} |\\psi(x,t_k^-)|^2 \\,\\mathrm{d}x.\n$$\n在时间 $t_k^{+}$ 测量之后，波函数被投影并重新归一化到左侧势阱中：\n$$\n\\psi(x,t_k^+) = \\frac{(P_L \\psi)(x,t_k^-)}{\\sqrt{p_k}},\n$$\n前提是 $p_k > 0$。在给定测量间隔 $\\tau$ 的情况下，总时间 $T$ 内的量子芝诺存活概率定义为\n$$\nS(\\tau,T) = \\prod_{k=1}^{\\left\\lfloor T/\\tau \\right\\rfloor} p_k.\n$$\n\n作为基准比较，将在最终时间 $T$ 时没有进行任何测量的左阱概率（即没有任何投影的演化）定义为\n$$\nP_{\\text{left}}(T) = \\int_{-\\infty}^{0} |\\psi(x,T)|^2 \\,\\mathrm{d}x.\n$$\n\n所有测试用例使用的空间和时间离散化参数：\n- 空间域：$x \\in [-L, L]$，其中 $L = 8.0$。\n- 空间格点数：$N = 1024$（均匀网格）。\n- 时间步长：$\\Delta t = 0.005$。\n- 总模拟时间：$T = 12.0$。\n\n测试套件规范（所有量均以原子单位制给出）：\n- 情况1（频繁测量）：$\\tau = 0.05$。\n- 情况2（中等频率测量）：$\\tau = 0.20$。\n- 情况3（稀疏测量）：$\\tau = 1.00$。\n- 情况4（基准，无测量）：演化至时间 $T$ 且不进行任何投影，并报告 $P_{\\text{left}}(T)$。\n\n你的程序必须：\n- 在给定的哈密顿量和离散化条件下，将 $\\psi(x,t)$ 从 $t=0$ 数值传播到 $t=T$。\n- 对于情况1-3，按定义应用理想测量序列，计算并报告 $S(\\tau,T)$。\n- 对于情况4，不应用任何测量，并报告 $P_{\\text{left}}(T)$。\n\n所有答案都是无量纲的概率。你的程序应该生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，顺序为 [情况1, 情况2, 情况3, 情况4]。每个数字表示为四舍五入到六位小数的形式，例如，“[0.999000,0.990000,0.800000,0.650000]”。", "solution": "所提出的问题是计算量子力学中一个明确定义的练习，专门用于演示量子芝诺效应。它在科学上基于量子动力学原理，在数学上是一致的，并且其参数的指定具有足够的精度，可以得到唯一的数值解。因此，该问题被认为是有效的，我们将着手解决它。\n\n核心任务是求解双势阱中粒子的一维含时薛定谔方程（TDSE），该过程伴随一系列投影测量。在原子单位制（$\\hbar=1$, $m=1$）下，TDSE 由下式给出：\n$$\n\\mathrm{i}\\,\\frac{\\partial}{\\partial t}\\,\\psi(x,t) = \\hat{H}\\psi(x,t) = \\left[-\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2} + V(x)\\right]\\psi(x,t)\n$$\n在一个小的时间间隔 $\\Delta t$ 内，其形式解为 $\\psi(x, t+\\Delta t) = \\exp(-\\mathrm{i}\\hat{H}\\Delta t)\\psi(x,t)$。我们将采用分裂算符傅里叶变换方法来近似时间演化算符 $\\hat{U}(\\Delta t) = \\exp(-\\mathrm{i}\\hat{H}\\Delta t)$。哈密顿量 $\\hat{H}$ 由动能算符 $\\hat{T} = -\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}$ 和势能算符 $\\hat{V} = V(x) = V_0(x^2 - b^2)^2$ 组成。由于 $\\hat{T}$ 和 $\\hat{V}$ 不对易，我们使用二阶对称的 Suzuki-Trotter（或 Strang）分裂：\n$$\n\\hat{U}(\\Delta t) = \\exp(-\\mathrm{i}(\\hat{T}+\\hat{V})\\Delta t) \\approx \\exp(-\\mathrm{i}\\hat{V}\\frac{\\Delta t}{2}) \\exp(-\\mathrm{i}\\hat{T}\\Delta t) \\exp(-\\mathrm{i}\\hat{V}\\frac{\\Delta t}{2})\n$$\n该方案是幺正的，并且精度达到 $(\\Delta t)^3$ 阶。传播过程按以下步骤执行：\n1.  在势能算符 $\\hat{V}$ 下演化半步。这在位置空间中很简单，因为 $\\hat{V}$ 是一个乘法算符：$\\psi(x) \\rightarrow \\exp(-\\mathrm{i}V(x)\\frac{\\Delta t}{2})\\psi(x)$。\n2.  在动能算符 $\\hat{T}$ 下演化一整步。动能算符在动量（或 $k$）空间中是对角的。我们使用快速傅里叶变换（FFT）从位置基矢切换到动量基矢。令 $\\mathcal{F}$ 表示 FFT。在动量空间中，算符 $\\frac{\\partial^2}{\\partial x^2}$ 对应于乘以 $-k^2$，其中 $k$ 是波数。动能算符变为乘以 $T(k) = \\frac{k^2}{2}$。演化过程即为 $\\tilde{\\psi}(k) \\rightarrow \\exp(-\\mathrm{i}T(k)\\Delta t)\\tilde{\\psi}(k)$，其中 $\\tilde{\\psi}(k) = \\mathcal{F}[\\psi(x)]$。此步骤之后，我们使用逆 FFT（$\\mathcal{F}^{-1}$）变换回位置空间。\n3.  在势能算符 $\\hat{V}$ 下进行最后半步的演化。\n\n这个三步序列将波函数传播一个时间步长 $\\Delta t$。\n\n数值模拟设置在空间网格 $x \\in [-L, L]$ 上，有 $N=1024$ 个点，且 $L=8.0$。网格间距为 $\\Delta x = 2L/N$。用于 FFT 的相应动量网格也据此构建。初始状态是一个归一化的高斯波包，中心位于左侧势阱（$x_0 = -b = -1.0$）。\n\n对于芝诺效应的情况（情况1-3），时间演化中穿插着以 $\\tau$ 为间隔的测量。对于一个测量间隔 $\\tau$，模拟过程如下：\n1.  初始化波函数 $\\psi(x,t=0)$ 和存活概率 $S=1.0$。\n2.  对 $k=1, 2, ..., \\lfloor T/\\tau \\rfloor$ 进行迭代。在每次迭代中：\n    a. 使用分裂算符算法的 $M = \\tau/\\Delta t$ 个步骤，将波函数传播一段时长 $\\tau$。这得到 $\\psi(x, t_k^-)$。\n    b. 计算在左侧势阱（$x0$）中找到粒子的概率：\n       $$\n       p_k = \\int_{-\\infty}^{0} |\\psi(x,t_k^-)|^2 \\,\\mathrm{d}x\n       $$\n       该积分通过对所有格点 $x_i  0$ 上的 $|\\psi(x_i)|^2 \\Delta x$ 求和来进行数值计算。\n    c. 更新总存活概率：$S \\leftarrow S \\times p_k$。\n    d. 将波函数投影到左侧势阱。这通过将所有 $x_i \\ge 0$ 处的 $\\psi(x_i, t_k^-)$ 设为 0 来实现。\n    e. 重新归一化新状态：$\\psi(x,t_k^+) = \\frac{(P_L \\psi)(x,t_k^-)}{\\sqrt{p_k}}$。该状态作为下一个演化周期的初始条件。\n\n对于基准情况（情况4），不执行任何测量。波函数从 $t=0$ 连续演化到 $t=T=12.0$。然后计算最终的左阱概率 $P_{\\text{left}}(T) = \\int_{-\\infty}^{0} |\\psi(x,T)|^2 \\,\\mathrm{d}x$。\n\n该算法针对四个指定的情况分别实现，并报告所得概率。预期的结果是，更频繁的测量（更小的 $\\tau$）将抑制从左势阱到右势阱的隧穿，从而导致更高的存活概率 $S$，这是量子芝诺效应的一种体现。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the time-dependent Schrödinger equation for a particle in a double-well\n    potential to model the quantum Zeno effect, as per the problem statement.\n    \"\"\"\n    # Define physical and numerical parameters in atomic units\n    V0 = 0.2\n    b = 1.0\n    x0 = -b\n    sigma = 0.5\n    L = 8.0\n    N = 1024\n    dt = 0.005\n    T_total = 12.0\n\n    # Test cases from the problem statement\n    # A tau of 0.0 means the no-measurement case in this implementation.\n    test_cases_tau = [0.05, 0.20, 1.00, 0.0]\n\n    # --- Grid and Operator Setup ---\n    # Spatial grid (endpoint=False is better for FFT)\n    x = np.linspace(-L, L, N, endpoint=False)\n    dx = x[1] - x[0]\n\n    # Momentum grid. np.fft.fftfreq gives frequencies for which p = 2*pi*hbar*k_freq.\n    # With hbar=1, p = 2*pi*k_freq.\n    k_freq = np.fft.fftfreq(N, d=dx)\n    # Kinetic energy operator diagonal term T_k = p^2/(2m). With m=1, T_k = (2*pi*k_freq)^2/2.\n    T_op_diag = 2.0 * (np.pi**2) * (k_freq**2)\n\n    # Potential energy operator V(x)\n    V_op = V0 * (x**2 - b**2)**2\n\n    # --- Propagators for Split-Operator Method ---\n    # Propagator for a half time-step in potential\n    V_propagator_half = np.exp(-0.5j * V_op * dt)\n    # Propagator for a full time-step in kinetic energy\n    T_propagator_full = np.exp(-1.0j * T_op_diag * dt)\n\n    # --- Projector onto the left well (x  0) ---\n    # For our grid x=np.linspace(-L, L, N, endpoint=False), the first N//2 points are  0.\n    proj_mask = np.zeros(N, dtype=float)\n    proj_mask[:N//2] = 1.0\n\n    # --- Main Loop over Test Cases ---\n    results = []\n    for tau in test_cases_tau:\n        # --- Initial State ---\n        # Unnormalized Gaussian wave packet\n        psi_0 = (np.pi * sigma**2)**(-0.25) * np.exp(-(x - x0)**2 / (2.0 * sigma**2))\n        psi_0 = psi_0.astype(np.complex128)\n        # Numerical normalization on the grid\n        norm = np.sqrt(np.sum(np.abs(psi_0)**2) * dx)\n        psi = psi_0 / norm\n\n        is_zeno_case = (tau  0.0)\n\n        if is_zeno_case:\n            survival_prob = 1.0\n            num_measurements = int(np.floor(T_total / tau))\n            steps_per_measurement = int(round(tau / dt))\n\n            for _ in range(num_measurements):\n                # Evolve for time tau\n                for _ in range(steps_per_measurement):\n                    # Split-operator step\n                    psi = V_propagator_half * psi         # Half potential step\n                    psi_k = np.fft.fft(psi)               # To momentum space\n                    psi_k = T_propagator_full * psi_k     # Full kinetic step\n                    psi = np.fft.ifft(psi_k)              # Back to position space\n                    psi = V_propagator_half * psi         # Final half potential step\n                \n                # --- Measurement and Projection ---\n                # Probability density in the left well\n                prob_density_left = np.abs(psi[proj_mask == 1.0])**2\n                p_k = np.sum(prob_density_left) * dx\n\n                # If probability is numerically zero, survival is impossible\n                if p_k  1e-15:\n                    survival_prob = 0.0\n                    break\n                \n                survival_prob *= p_k\n                \n                # Project and renormalize\n                psi = proj_mask * psi\n                psi /= np.sqrt(p_k)\n            \n            results.append(survival_prob)\n\n        else: # Baseline case (no measurements)\n            num_total_steps = int(round(T_total / dt))\n            for _ in range(num_total_steps):\n                # Split-operator step\n                psi = V_propagator_half * psi\n                psi_k = np.fft.fft(psi)\n                psi_k = T_propagator_full * psi_k\n                psi = np.fft.ifft(psi_k)\n                psi = V_propagator_half * psi\n            \n            # Calculate final left-well probability\n            prob_density_left = np.abs(psi[proj_mask == 1.0])**2\n            p_final = np.sum(prob_density_left) * dx\n            results.append(p_final)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join([f'{r:.6f}' for r in results])}]\")\n\nsolve()\n```", "id": "2460919"}]}