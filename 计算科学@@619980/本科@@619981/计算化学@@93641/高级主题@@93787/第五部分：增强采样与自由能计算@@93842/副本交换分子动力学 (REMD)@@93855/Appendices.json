{"hands_on_practices": [{"introduction": "副本交换分子动力学（REMD）的效率在很大程度上取决于温度阶梯的选择。这个练习将解决设置模拟时的一个核心问题：如何确定合适的温度间隔 $ΔT$ 以达到理想的交换接受率。通过将系统的宏观热容 $C_V$ 与微观交换动力学联系起来，你将练习一项设计高效模拟的基本技能。", "problem": "为一个系统构建一个副本交换分子动力学 (REMD) 温度阶梯，该系统在参考温度 $T = 300\\ \\mathrm{K}$ 附近的定容热容为 $C_V = 1000\\,k_{\\mathrm{B}}$。在具有恒定热容的正则系综能量涨落的高斯模型下，相邻温度 $T$ 和 $T+\\Delta T$ 之间的期望交换接受概率可以通过对两个副本的联合正则能量分布上的 Metropolis 接受准则进行平均，从第一性原理得到。请仅使用正则系综的基本关系、Metropolis 准则以及由大热容证明合理的高斯近似，推导接受概率作为温度比的函数，并用它来估算对于该系统，在 $T=300\\ \\mathrm{K}$ 时实现 $0.3$ 的期望接受率所需的温度增量 $\\Delta T$。\n\n请用 $\\mathrm{K}$ 单位表示你对 $\\Delta T$ 的最终答案，并将结果四舍五入到四位有效数字。", "solution": "所述问题在科学上是合理的、自洽的且是良态的。它要求在一组特定的标准近似下推导副本交换分子动力学 (REMD) 的接受概率，并进行后续的数值计算。我们将着手解决。\n\n副本交换的基本原理是在系统副本的扩展系综上执行蒙特卡洛移动，该移动包括交换两个副本的温度。我们考虑两个副本，1 和 2，它们具有固定的构型，势能分别为 $E_1$ 和 $E_2$。副本 1 处于温度 $T_1$（逆温度 $\\beta_1 = 1/(k_B T_1)$），副本 2 处于温度 $T_2$（逆温度 $\\beta_2 = 1/(k_B T_2)$）。此状态在扩展正则系综中的总概率正比于 $\\exp(-\\beta_1 E_1 - \\beta_2 E_2)$。\n\n我们提议一个交换，即副本 1 被赋予温度 $T_2$，副本 2 被赋予温度 $T_1$。构型的能量保持为 $E_1$ 和 $E_2$。新状态的概率正比于 $\\exp(-\\beta_2 E_1 - \\beta_1 E_2)$。此交换的接受概率由 Metropolis 准则给出：\n$$\np_{\\text{swap}}(E_1, E_2) = \\min\\left(1, \\frac{\\exp(-\\beta_2 E_1 - \\beta_1 E_2)}{\\exp(-\\beta_1 E_1 - \\beta_2 E_2)}\\right)\n$$\n简化该比率可得：\n$$\n\\frac{\\exp(-\\beta_2 E_1 - \\beta_1 E_2)}{\\exp(-\\beta_1 E_1 - \\beta_2 E_2)} = \\exp\\left((\\beta_1 - \\beta_2)E_1 - (\\beta_1 - \\beta_2)E_2\\right) = \\exp\\left((\\beta_1 - \\beta_2)(E_1 - E_2)\\right)\n$$\n令 $\\Delta\\beta = \\beta_1 - \\beta_2$ 且 $\\Delta E = E_1 - E_2$。于是接受概率为：\n$$\np_{\\text{swap}}(\\Delta E) = \\min(1, \\exp(\\Delta\\beta \\cdot \\Delta E))\n$$\n在模拟中，能量 $E_1$ 和 $E_2$ 不是固定的，而是从各自温度下的正则概率分布 $P(E_1; T_1)$ 和 $P(E_2; T_2)$ 中抽取的随机变量。题目指出，由于热容很大，这些分布可以近似为高斯分布。根据统计力学，正则系综中能量涨落的方差与热容 $C_V$ 的关系为 $\\sigma_E^2 = \\langle E^2 \\rangle - \\langle E \\rangle^2 = k_B T^2 C_V$。\n因此，两个副本的能量分布为：\n$$\nE_1 \\sim \\mathcal{N}(\\langle E_1 \\rangle, \\sigma_{E_1}^2) \\quad \\text{其中} \\quad \\sigma_{E_1}^2 = k_B T_1^2 C_V\n$$\n$$\nE_2 \\sim \\mathcal{N}(\\langle E_2 \\rangle, \\sigma_{E_2}^2) \\quad \\text{其中} \\quad \\sigma_{E_2}^2 = k_B T_2^2 C_V\n$$\n题目指明 $C_V$ 是恒定的。平均能量的变化与 $C_V$ 的关系为 $d\\langle E \\rangle = C_V dT$。将其从 $T_1$ 积分到 $T_2$ 可得 $\\langle E_2 \\rangle - \\langle E_1 \\rangle = C_V (T_2-T_1)$。\n\n由于两个副本是独立的，能量差 $\\Delta E = E_1 - E_2$ 也是一个高斯随机变量。其均值和方差为：\n$$\n\\langle \\Delta E \\rangle = \\langle E_1 \\rangle - \\langle E_2 \\rangle = -C_V(T_2-T_1)\n$$\n$$\n\\sigma_{\\Delta E}^2 = \\text{Var}(E_1) + \\text{Var}(E_2) = k_B T_1^2 C_V + k_B T_2^2 C_V = k_B C_V (T_1^2 + T_2^2)\n$$\n期望接受概率 $\\langle p \\rangle$ 是通过将 $p_{\\text{swap}}(\\Delta E)$ 对 $\\Delta E$ 的概率分布进行平均得到的。令 $X = \\Delta\\beta \\cdot \\Delta E$。由于 $X$ 是高斯变量 $\\Delta E$ 的线性变换，所以 $X$ 也是高斯的。其均值 $\\langle X \\rangle$ 和方差 $\\sigma_X^2$ 是：\n$$\n\\langle X \\rangle = \\Delta\\beta \\langle \\Delta E \\rangle = \\left(\\frac{1}{k_B T_1} - \\frac{1}{k_B T_2}\\right) (-C_V(T_2-T_1)) = -\\frac{C_V}{k_B} \\frac{T_2-T_1}{T_1 T_2} (T_2-T_1) = -\\frac{C_V}{k_B} \\frac{(T_2-T_1)^2}{T_1 T_2}\n$$\n$$\n\\sigma_X^2 = (\\Delta\\beta)^2 \\sigma_{\\Delta E}^2 = \\left(\\frac{T_2-T_1}{k_B T_1 T_2}\\right)^2 k_B C_V (T_1^2 + T_2^2) = \\frac{C_V}{k_B} \\frac{(T_2-T_1)^2 (T_1^2+T_2^2)}{(T_1 T_2)^2}\n$$\n期望接受概率为 $\\langle p \\rangle = \\int_{-\\infty}^\\infty \\min(1, \\exp(x)) P(x) dx$，其中 $P(x)$ 是 $X$ 的高斯分布。该积分的计算结果为 $\\langle p \\rangle = 2\\Phi(\\langle X \\rangle / \\sigma_X)$，其中 $\\Phi(z)$ 是标准正态分布 $\\mathcal{N}(0, 1)$ 的累积分布函数 (CDF)。\n\n我们来计算比值 $\\langle X \\rangle / \\sigma_X$：\n$$\n\\frac{\\langle X \\rangle}{\\sigma_X} = \\frac{-\\frac{C_V}{k_B} \\frac{(T_2-T_1)^2}{T_1 T_2}}{\\sqrt{\\frac{C_V}{k_B} \\frac{(T_2-T_1)^2 (T_1^2+T_2^2)}{(T_1 T_2)^2}}} = \\frac{-\\sqrt{\\frac{C_V}{k_B}} (T_2-T_1)}{\\sqrt{T_1^2+T_2^2}}\n$$\n令 $T_1 = T$ 且 $T_2 = T+\\Delta T$。期望接受概率为：\n$$\n\\langle p \\rangle = 2\\Phi\\left(-\\sqrt{\\frac{C_V}{k_B}} \\frac{\\Delta T}{\\sqrt{T^2+(T+\\Delta T)^2}}\\right)\n$$\n为了将其表示为温度比 $r = T_2/T_1 = (T+\\Delta T)/T$ 的函数，我们注意到 $\\Delta T = T(r-1)$。代入可得：\n$$\n\\frac{\\Delta T}{\\sqrt{T^2+(T+\\Delta T)^2}} = \\frac{T(r-1)}{\\sqrt{T^2 + (rT)^2}} = \\frac{T(r-1)}{T\\sqrt{1+r^2}} = \\frac{r-1}{\\sqrt{1+r^2}}\n$$\n因此，接受概率作为温度比的函数是：\n$$\n\\langle p(r) \\rangle = 2\\Phi\\left(-\\sqrt{\\frac{C_V}{k_B}} \\frac{r-1}{\\sqrt{1+r^2}}\\right)\n$$\n这完成了问题的第一部分。现在，我们必须为给定的参数估算 $\\Delta T$：$\\langle p \\rangle = 0.3$， $C_V = 1000\\,k_B$ (所以 $C_V/k_B = 1000$)，以及 $T = 300\\ \\mathrm{K}$。\n需要求解的方程是：\n$$\n0.3 = 2\\Phi\\left(-\\sqrt{1000} \\frac{\\Delta T}{\\sqrt{300^2+(300+\\Delta T)^2}}\\right)\n$$\n首先，我们找到 $\\Phi$ 的自变量。设 $z$ 为此自变量。\n$$\n\\Phi(z) = \\frac{0.3}{2} = 0.15\n$$\n使用标准正态分布的逆累积分布函数，我们找到 $z$ 的值：\n$$\nz = \\Phi^{-1}(0.15) \\approx -1.036433\n$$\n因此，我们得到方程：\n$$\n-1.036433 = -\\sqrt{1000} \\frac{\\Delta T}{\\sqrt{300^2+(300+\\Delta T)^2}}\n$$\n令 $\\zeta = 1.036433$。方程简化为：\n$$\n\\zeta = \\sqrt{1000} \\frac{\\Delta T}{\\sqrt{300^2+(300+\\Delta T)^2}}\n$$\n两边平方得：\n$$\n\\zeta^2 = 1000 \\frac{(\\Delta T)^2}{300^2+(300+\\Delta T)^2} \\implies \\frac{\\zeta^2}{1000} = \\frac{(\\Delta T)^2}{90000 + 90000 + 600\\Delta T + (\\Delta T)^2}\n$$\n令 $A = \\zeta^2/1000 \\approx (1.036433)^2/1000 \\approx 0.00107419$。\n$$\nA \\left(180000 + 600\\Delta T + (\\Delta T)^2\\right) = (\\Delta T)^2\n$$\n将此重新排列成标准二次型 $a(\\Delta T)^2 + b(\\Delta T) + c = 0$：\n$$\n(1-A)(\\Delta T)^2 - (600A)\\Delta T - 180000A = 0\n$$\n代入 $A$ 的值：\n$$\n(1 - 0.00107419)(\\Delta T)^2 - (600 \\times 0.00107419)\\Delta T - (180000 \\times 0.00107419) = 0\n$$\n$$\n0.9989258 (\\Delta T)^2 - 0.644514 \\Delta T - 193.3542 = 0\n$$\n我们使用二次公式求解 $\\Delta T$，取正根，因为 $\\Delta T$ 必须为正：\n$$\n\\Delta T = \\frac{-b + \\sqrt{b^2-4ac}}{2a} = \\frac{0.644514 + \\sqrt{(-0.644514)^2 - 4(0.9989258)(-193.3542)}}{2(0.9989258)}\n$$\n$$\n\\Delta T = \\frac{0.644514 + \\sqrt{0.415398 + 772.633}}{1.9978516} = \\frac{0.644514 + \\sqrt{773.0484}}{1.9978516}\n$$\n$$\n\\Delta T = \\frac{0.644514 + 27.803748}{1.9978516} = \\frac{28.448262}{1.9978516} \\approx 14.2394\\ \\mathrm{K}\n$$\n将结果四舍五入到四位有效数字，得到 $\\Delta T = 14.24\\ \\mathrm{K}$。", "answer": "$$\\boxed{14.24}$$", "id": "2666613"}, {"introduction": "虽然均匀的温度间隔是一个简单的起点，但真实系统的热容通常随温度变化，需要更精细的方法。这个练习挑战你超越简单的估算，为一个具有不同激活区域的系统，通过算法设计一个非均匀的温度阶梯。通过这个编程练习，你将模拟在现实世界中优化计算资源的任务，即在最需要的地方——高热容区域——放置更多的副本。", "problem": "一个分子系统的正则系综模型在 $310\\,\\mathrm{K}$ 和 $450\\,\\mathrm{K}$ 处表现出两个明显的激活区。目标是为副本交换分子动力学 (REMD) 设计一个最优的非均匀温度阶梯，该阶梯需跨越一个指定的温度区间，并确保最近邻副本间的交换满足预设的期望接受准则。\n\n本问题使用的建模假设和定义如下：\n- 在玻尔兹曼常数满足 $k_{\\mathrm{B}} = 1$ 的约化单位下进行计算。所有温度均以 $\\mathrm{K}$ 为单位报告。\n- 定容热容作为温度的函数由下式给出：\n$$\nC_{v}(T) = c_{0} + A_{1}\\exp\\!\\left(-\\tfrac{1}{2}\\left(\\tfrac{T - 310}{w_{1}}\\right)^{2}\\right) + A_{2}\\exp\\!\\left(-\\tfrac{1}{2}\\left(\\tfrac{T - 450}{w_{2}}\\right)^{2}\\right),\n$$\n其中常数为 $c_{0} = 100$，$A_{1} = 200$，$w_{1} = 8$，$A_{2} = 150$，$w_{2} = 10$。在这些约化单位中，$C_{v}(T)$ 是无量纲的。\n- 对于温度为 $T$ 的副本，其正则能量涨落被建模为方差如下的高斯分布：\n$$\n\\sigma^{2}(T) = k_{\\mathrm{B}}\\,C_{v}(T)\\,T^{2} = C_{v}(T)\\,T^{2}.\n$$\n- 对于温度分别为 $T_{i}$ 和 $T_{i+1}$ 的两个相邻副本，定义逆温度 $\\beta_{i} = 1/T_{i}$ 和 $\\beta_{i+1} = 1/T_{i+1}$。在以中点温度 $T_{m} = \\tfrac{T_{i} + T_{i+1}}{2}$ 评估的局部等方差高斯近似下，这两个副本之间的期望 Metropolis 交换接受率被建模为：\n$$\nA(T_{i}, T_{i+1}) = \\operatorname{erfc}\\!\\left(\\frac{|\\beta_{i+1} - \\beta_{i}|\\,\\sigma(T_{m})}{\\sqrt{2}}\\right),\n$$\n其中 $\\operatorname{erfc}(\\cdot)$ 是互补误差函数。\n\n定义一个递增的温度序列 $\\{T_{0}, T_{1}, \\dots, T_{N}\\}$（其中 $T_{0} = T_{\\min}$ 且 $T_{N} = T_{\\max}$）为可行序列，如果它满足最近邻接受约束：\n$$\nA(T_{i}, T_{i+1}) \\ge a_{\\mathrm{target}} \\quad \\text{for all } i \\in \\{0,1,\\dots,N-1\\}.\n$$\n在所有针对相同 $(T_{\\min}, T_{\\max}, a_{\\mathrm{target}})$ 的可行序列中，称长度为 $N+1$ 且最小的序列为最优序列。\n\n您的任务是为以下测试集中的每种情况计算一个最优温度阶梯。对于每种情况，输出完整的序列 $\\{T_{0}, T_{1}, \\dots, T_{N}\\}$（单位为 $\\mathrm{K}$），并四舍五入到一位小数。\n\n测试集：\n1. $T_{\\min} = 280\\,\\mathrm{K}$，$T_{\\max} = 500\\,\\mathrm{K}$，$a_{\\mathrm{target}} = 0.3$。\n2. $T_{\\min} = 295\\,\\mathrm{K}$，$T_{\\max} = 330\\,\\mathrm{K}$，$a_{\\mathrm{target}} = 0.3$。\n3. $T_{\\min} = 280\\,\\mathrm{K}$，$T_{\\max} = 500\\,\\mathrm{K}$，$a_{\\mathrm{target}} = 0.4$。\n4. $T_{\\min} = 430\\,\\mathrm{K}$，$T_{\\max} = 470\\,\\mathrm{K}$，$a_{\\mathrm{target}} = 0.3$。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表。列表中的每个元素本身都是一个由方括号括起来的、对应测试用例的逗号分隔的温度（单位为 $\\mathrm{K}$）列表。例如：\"[[T0_case1,T1_case1,...],[T0_case2,T1_case2,...],...]\"。", "solution": "该问题要求为副本交换分子动力学（REMD）构建一个最优温度阶梯 $\\{T_{0}, T_{1}, \\dots, T_{N}\\}$。该阶梯必须跨越给定的温度范围 $[T_{\\min}, T_{\\max}]$，并满足相邻副本交换的最低期望接受概率 $a_{\\mathrm{target}}$。最优阶梯被定义为具有最小可能温度数 $N+1$ 的阶梯。\n\n根据最优性原理，应采用贪心方法。为了最小化副本总数，在从 $T_0 = T_{\\min}$ 开始构建阶梯的每一步 $i$ 中，我们必须最大化温差 $T_{i+1} - T_{i}$。允许的最大步长是将期望接受概率降至其允许的最小值 $a_{\\mathrm{target}}$ 的步长。因此，在每一步中，我们必须通过求解以下方程来确定下一个温度 $T_{i+1}$：\n$$\nA(T_{i}, T_{i+1}) = a_{\\mathrm{target}}\n$$\n其中 $A(T_i, T_{i+1})$ 是温度为 $T_i$ 和 $T_{i+1}$ 的副本之间的期望接受概率。\n\n问题为此接受概率提供了一个模型：\n$$\nA(T_{i}, T_{i+1}) = \\operatorname{erfc}\\!\\left(\\frac{|\\beta_{i+1} - \\beta_{i}|\\,\\sigma(T_{m})}{\\sqrt{2}}\\right)\n$$\n此处，$\\beta_{i} = 1/T_{i}$ 是逆温度，$T_{m} = (T_{i} + T_{i+1})/2$ 是中点温度，而 $\\sigma(T_{m})$ 代表在 $T_m$ 处的能量涨落。由于温度序列是严格递增的（$T_{i+1} > T_i$），我们有 $\\beta_{i+1} < \\beta_{i}$，所以 $|\\beta_{i+1} - \\beta_{i}| = \\beta_{i} - \\beta_{i+1}$。\n\n将此代入我们的等式并重新整理，得到我们算法的核心方程。令 $k = \\operatorname{erfcinv}(a_{\\mathrm{target}})$，其中 $\\operatorname{erfcinv}$ 是逆互补误差函数。在给定 $T_i$ 的情况下，需要为 $T_{i+1}$ 求解的方程是：\n$$\n(\\beta_{i} - \\beta_{i+1})\\,\\sigma(T_{m}) = k\\sqrt{2}\n$$\n代入 $\\beta$ 和 $T_m$ 的定义，我们得到下一个温度（我们将其表示为 $T_{\\text{next}}$）的隐式方程：\n$$\n\\left(\\frac{1}{T_{i}} - \\frac{1}{T_{\\text{next}}}\\right) \\sigma\\left(\\frac{T_{i} + T_{\\text{next}}}{2}\\right) - k\\sqrt{2} = 0\n$$\n能量涨落项 $\\sigma(T)$ 由 $\\sigma(T) = T\\sqrt{C_v(T)}$ 给出，其中热容 $C_v(T)$ 定义为：\n$$\nC_{v}(T) = c_{0} + A_{1}\\exp\\!\\left(-\\tfrac{1}{2}\\left(\\tfrac{T - 310}{w_{1}}\\right)^{2}\\right) + A_{2}\\exp\\!\\left(-\\tfrac{1}{2}\\left(\\tfrac{T - 450}{w_{2}}\\right)^{2}\\right)\n$$\n参数为 $c_{0} = 100$，$A_{1} = 200$，$w_{1} = 8$，$A_{2} = 150$ 和 $w_{2} = 10$。由此产生的函数 $\\sigma(T)$ 是非平凡的，因此，用于求解 $T_{\\text{next}}$ 的方程可能没有唯一解或不单调。为满足最优性条件，我们必须选择能够解该方程的、大于 $T_i$ 的最大可能 $T_{\\text{next}}$ 值。\n\n算法流程如下：\n1. 用起始温度初始化温度列表：$\\mathcal{T} = \\{T_{\\min}\\}$。设当前温度为 $T_{\\text{current}} = T_{\\min}$。\n2. 当 $T_{\\text{current}} < T_{\\max}$ 时：\n    a. 为求根过程定义函数 $g(x)$：\n       $$\n       g(x) = \\left(\\frac{1}{T_{\\text{current}}} - \\frac{1}{x}\\right) \\sigma\\left(\\frac{T_{\\text{current}} + x}{2}\\right) - k\\sqrt{2}\n       $$\n    b. 在区间 $(T_{\\text{current}}, T_{\\max}]$ 内找到方程 $g(x)=0$ 的最大根 $T_{\\text{next}}$。\n    c. 如果存在这样的根且 $T_{\\text{next}} < T_{\\max}$，则将 $T_{\\text{next}}$ 追加到列表 $\\mathcal{T}$ 中，并更新 $T_{\\text{current}} = T_{\\text{next}}$。\n    d. 如果在 $(T_{\\text{current}}, T_{\\max}]$ 内不存在根（当 $g(T_{\\max}) \\le 0$ 时发生），或者找到的根 $T_{\\text{next}} \\ge T_{\\max}$，则过程终止。我们将 $T_{\\max}$ 追加到 $\\mathcal{T}$ 以完成该阶梯。\n3. 最终列表 $\\mathcal{T}$ 代表最优温度阶梯。\n\n为确保找到最大根，仅在固定区间上使用简单的数值求解器是不够的。需要一种稳健的策略。我们实现了一种反向搜索来寻找包含根的区间。从 $b=T_{\\max}$ 开始，我们以小增量向后步进，以找到一个区间 $[a, b]$，使得 $g(a) \\le 0$ 且 $g(b) > 0$。这确保了该区间包含 $(T_{\\text{current}}, T_{\\max}]$ 中的最大根。然后在此区间上应用稳定的求根算法，如 Brent-Dekker 方法。这保证了我们在每一步都采用尽可能大的温度跳跃，从而生成具有最少副本数的阶梯。最终温度按要求四舍五入到一位小数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import erfcinv\nfrom scipy.optimize import brentq\n\ndef solve():\n    \"\"\"\n    Computes optimal temperature ladders for REMD based on a given bi-modal heat capacity model.\n    \"\"\"\n    # Define the constants for the heat capacity model from the problem statement.\n    c0 = 100.0\n    A1 = 200.0\n    w1 = 8.0\n    T1_peak = 310.0\n    A2 = 150.0\n    w2 = 10.0\n    T2_peak = 450.0\n\n    def Cv(T):\n        \"\"\"\n        Calculates the constant-volume heat capacity Cv(T) as per the given model.\n        \"\"\"\n        term1 = A1 * np.exp(-0.5 * ((T - T1_peak) / w1)**2)\n        term2 = A2 * np.exp(-0.5 * ((T - T2_peak) / w2)**2)\n        return c0 + term1 + term2\n\n    def sigma(T):\n        \"\"\"\n        Calculates the energy fluctuation sigma(T), where sigma^2 = Cv(T) * T^2.\n        \"\"\"\n        return T * np.sqrt(Cv(T))\n\n    def find_next_temp(T_i, T_max, C):\n        \"\"\"\n        Finds the next temperature T_next in the ladder that satisfies the acceptance criterion.\n        This function identifies the largest possible root to ensure an optimal (shortest) ladder.\n\n        Args:\n            T_i (float): The current temperature.\n            T_max (float): The maximum temperature of the ladder.\n            C (float): The constant part of the equation, derived from a_target. \n                       C = erfcinv(a_target) * sqrt(2).\n        Returns:\n            float: The next optimal temperature.\n        \"\"\"\n        def g(T_next):\n            \"\"\"The function whose root is sought: g(T_next) = 0.\"\"\"\n            if T_next <= T_i:\n                # This region is not of interest. Return a large positive value to guide the solver.\n                return np.inf\n            Tm = (T_i + T_next) / 2.0\n            beta_diff = (1.0 / T_i) - (1.0 / T_next)\n            return beta_diff * sigma(Tm) - C\n\n        # If the step to T_max has an acceptance rate >= a_target, the ladder is complete.\n        if g(T_max) <= 0:\n            return T_max\n\n        # To find the largest root, we search backwards from T_max to find a bracket [a, b]\n        # such that g(a) <= 0 and g(b) > 0.\n        step = 1.0  # Search step in Kelvin.\n        b = T_max\n        a = b - step\n        while a > T_i:\n            if g(a) <= 0:\n                # Bracket [a, b] contains the largest root. We can now solve for it.\n                return brentq(g, a, b)\n            b = a\n            a -= step\n        \n        # If the loop finishes, the root must be in the first interval from T_i.\n        return brentq(g, T_i + 1e-9, b)\n\n    def generate_ladder(T_min, T_max, a_target):\n        \"\"\"\n        Generates the optimal temperature ladder for a given set of parameters.\n        \"\"\"\n        # Pre-calculate the constant C from the target acceptance rate.\n        C = erfcinv(a_target) * np.sqrt(2)\n        \n        temps = [T_min]\n        T_current = T_min\n        \n        # Set a practical limit on the number of replicas to prevent infinite loops.\n        max_replicas = 2000\n        while T_current < T_max and len(temps) < max_replicas:\n            T_next = find_next_temp(T_current, T_max, C)\n            temps.append(T_next)\n            T_current = T_next\n            \n        if len(temps) >= max_replicas:\n            raise RuntimeError(\"Exceeded maximum number of replicas, check parameters.\")\n\n        # Round all temperatures in the final list to one decimal place.\n        return [round(t, 1) for t in temps]\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (280.0, 500.0, 0.3),\n        (295.0, 330.0, 0.3),\n        (280.0, 500.0, 0.4),\n        (430.0, 470.0, 0.3),\n    ]\n\n    results = []\n    for T_min, T_max, a_target in test_cases:\n        ladder = generate_ladder(T_min, T_max, a_target)\n        results.append(ladder)\n\n    # Format the final output string as specified in the problem statement.\n    # The format is a list of lists, e.g., [[...],[...]].\n    # str(list) automatically creates the required format for each inner list.\n    formatted_results = ','.join(map(str, results))\n    print(f\"[{formatted_results}]\")\n\nsolve()\n```", "id": "2461552"}, {"introduction": "正确地实现算法与优秀的设计同样重要。这最后一个练习提出了一个在REMD中常见但微妙的实现错误，并要求你推断其长期后果。通过分析在温度交换后未重新调整粒子速度会发生什么，你将深化对细致平衡、恒温器功能，以及模拟的形式正确性与其实际采样效率之间关键区别的理解。", "problem": "在副本交换分子动力学 (REMD) 中，同一系统的一组副本在不同温度下进行模拟，每个副本使用独立的恒温器。当单独使用时，这些恒温器会在其指定温度下采样正则分布（粒子数、体积和温度恒定）。考虑两个逆温度分别为 $\\,\\beta_i\\,$ 和 $\\,\\beta_j\\,$ 的副本，它们根据标准的 REMD 交换规则成功进行了一次温度交换。交换后，一位研究人员忘记了重新初始化或重新缩放粒子速度以使其与新温度一致；也就是说，每个副本继续以交换前的速度演化，但现在受另一个温度的恒温器控制。假设每个副本内的后续时间演化由一个恒温器执行，该恒温器具有以其指定温度下的正则分布作为不变测度，并且交换是间歇性地尝试的，采用在副本之间交换温度的常规 REMD 提议。\n\n对于稳态系综和采样效率而言，以下哪个陈述最能描述这个错误的长期后果？\n\nA. 每个温度的稳态构型分布保持正确，因为正则测度是可分解的，且恒温器会恢复动量分布；然而，交换后的短期动能不匹配会导致额外的弛豫，从而降低跨温度的混合效率，尽管长期来看交换接受率不受影响。\n\nB. 构型的细致平衡被破坏，因此每个温度下势能的稳态分布会永久性地偏离正则分布。\n\nC. 每个副本中的平均动能无限期地保持在交换前的值，因此温度交换不再提供任何好处，副本实际上保持在固定温度。\n\nD. 在稳态下，只有动能直方图有偏差，而构型采样和在温度空间中的扩散在短期和长期内均不受影响。", "solution": "问题陈述描述了副本交换分子动力学 (REMD) 中的一个常见情景，即出现了一个程序性错误。在进行解答之前，我们必须验证问题陈述的有效性。\n\n### 问题验证\n\n**步骤 1：提取已知条件**\n-   **方法**：副本交换分子动力学 (REMD)。\n-   **系统**：同一系统的一组副本在不同温度下进行模拟。\n-   **恒温器**：每个副本使用独立的恒温器。当单独使用时，恒温器会在其指定温度下采样正则 (NVT) 分布。\n-   **交换事件**：具有逆温度 $\\beta_i$ 和 $\\beta_j$ 的两个副本根据标准 REMD 规则成功进行了一次温度交换。\n-   **程序性错误**：交换后，粒子速度未被重新缩放。每个副本的坐标和速度 $(q, p)$ 继续演化，但现在受*另一个*温度的恒温器控制。\n-   **假设 1**：用于副本内动力学的恒温器具有以其指定温度下的正则分布作为不变测度。\n-   **假设 2**：交换是间歇性地使用标准 REMD 提议尝试的。\n-   **问题**：这个错误对稳态系综和采样效率的长期后果是什么？\n\n**步骤 2：使用提取的已知条件进行验证**\n-   **科学依据**：该问题在统计力学和计算化学的原理上有充分的依据。REMD、恒温器、正则系综和速度重缩放都是标准概念。所描述的错误是一个可能发生的实现错误。\n-   **良态性**：问题是具体的，并要求分析其对明确定义的量（稳态分布、采样效率）的后果。可以从第一性原理推导出唯一答案。\n-   **客观性**：语言技术性强且精确。\n-   **完整性**：问题提供了必要的信息：算法的性质 (REMD)、其组件的属性（恒温器）以及错误的具体性质。\n\n**步骤 3：结论与行动**\n问题陈述是有效的。它在科学上是合理的、良态的，并包含足够的信息来得出逻辑结论。我们可以继续进行解答。\n\n### 正确答案的推导\n\nREMD 中扩展系综的状态由副本坐标集 $\\{q_k\\}$ 和副本间的温度排列 $\\{\\beta_k\\}$ 描述。构型和温度的目标稳态分布由下式给出：\n$$\n\\mathcal{P}(\\{q_k\\}, \\{\\beta_k\\}) \\propto \\exp\\left(-\\sum_{k=1}^{N} \\beta_k U(q_k)\\right)\n$$\n其中 $N$ 是副本数， $U(q_k)$ 是副本 $k$ 的构型的势能，$\\beta_k$ 是分配给该副本的逆温度。请注意，动量并未出现在此构型系综的表达式中。\n\nREMD 算法包括两个主要步骤：\n1.  **副本内动力学**：每个副本在其当前指定的温度下演化一定数量的步数。\n2.  **副本间交换**：尝试交换两个副本（例如 $i$ 和 $j$）的温度。\n\n让我们分析这个程序性错误对稳态分布和效率的影响。\n\n**1. 稳态分布**\n\n稳态分布的正确性取决于动力学过程是否满足关于目标分布 $\\mathcal{P}$ 的细致平衡条件。\n\n-   **交换步骤**：交换副本 $i$ 和 $j$ 的温度（这等效于交换它们的构型）的标准 REMD 交换规则使用 Metropolis-Hastings 接受概率：\n    $$\n    P_{\\text{accept}} = \\min\\left(1, \\exp\\left[-(\\beta_j - \\beta_i)(U(q_j) - U(q_i))\\right]\\right) = \\min\\left(1, \\exp\\left[(\\beta_i - \\beta_j)(U(q_i) - U(q_j))\\right]\\right)\n    $$\n    该接受概率**仅**取决于被交换构型的势能 $U(q_i)$ 和 $U(q_j)$ 以及它们各自的逆温度 $\\beta_i$ 和 $\\beta_j$。它不依赖于粒子的动能或动量。由于在所描述的情景中此规则得以保留，交换移动本身继续满足*扩展系综构型部分*的细致平衡。\n\n-   **副本内动力学步骤**：在交换之间，每个副本在恒温器下演化。问题陈述指出，该恒温器“具有以其指定温度下的正则分布作为不变测度”。这是一个关键陈述。这意味着，对于给定的温度 $T_k$，由恒温器生成的动力学过程，在足够长的时间内，将根据正则分布 $\\rho(q, p) \\propto \\exp(-\\beta_k [K(p) + U(q)])$ 产生构型 $q$ 和动量 $p$，其中 $K(p)$ 是动能。通过对动量进行积分，可以得出这些动力学过程也将正确地对边际构型分布 $P(q) \\propto \\exp(-\\beta_k U(q))$ 进行采样。\n\n-   **关于稳态分布的结论**：算法的两个组成部分（交换和副本内动力学）都被构建为最终能采样正确的构型分布。交换机制确保构型在不同温度间正确分布，而副本内动力学确保在给定温度下的构型空间被正确探索。有关速度的错误不会改变目标稳态分布的形式正确性，因为交换准则与速度无关。因此，构型的长期稳态分布，以及由此产生的势能分布，保持正确。同样，恒温器的功能保证了每个温度下长期的、时间平均的动能分布也将是正确的。\n\n**2. 采样效率**\n\n虽然稳态分布在形式上是正确的，但对该分布进行采样的*速率*会受到影响。\n\n-   **动能不匹配**：一次成功的交换后，一个副本的状态是 $(q_k, p_k)$，但它现在耦合到一个新的温度 $T'_k$。动量 $p_k$ 是从对应于旧温度 $T_k$ 的分布中抽取的。因此，动能 $K(p_k)$ 与新温度 $T'_k$ 的期望值不匹配。系统在动能上处于非平衡状态。\n\n-   **恒温器弛豫**：恒温器现在必须工作，以将动能恢复到其在温度 $T'_k$ 下的正确平衡值。这个热弛豫过程不是瞬时的，需要一段有限的时间，这取决于恒温器的耦合强度。\n\n-   **效率降低**：在这个弛豫期间，系统的动力学不能代表在温度 $T'_k$ 下的真正正则采样。例如，如果一个副本从高温移动到低温，其“热”的速度将导致它以一种不符合低温特征的方式运动，直到恒温器将其冷却下来。这段用于动能平衡的时间没有用于高效的构象采样。这种在每次成功交换后产生的额外开销，降低了 REMD 模拟的整体效率。它减慢了副本在温度空间中的扩散，而这正是 REMD 增强采样能力的核心所在。\n\n-   **交换接受率**：长期平均接受率取决于势能分布 $P(U|T_i)$ 和 $P(U|T_j)$ 之间的重叠。由于稳态势能分布最终是正确的，长期平均接受率将不受速度重缩放错误的影响。\n\n### 逐项分析\n\n**A. 每个温度的稳态构型分布保持正确，因为正则测度是可分解的，且恒温器会恢复动量分布；然而，交换后的短期动能不匹配会导致额外的弛豫，从而降低跨温度的混合效率，尽管长期来看交换接受率不受影响。**\n-   `稳态构型分布保持正确`：**正确**。如上所述，交换规则与动量无关。\n-   `因为正则测度是可分解的，且恒温器会恢复动量分布`：这给出了正确的物理原因。哈密顿量中动能和势能的分离是关键，而恒温器处理动能部分。\n-   `交换后的短期动能不匹配...导致额外的弛豫`：**正确**。这是不重缩放速度的直接后果。\n-   `降低跨温度的混合效率`：**正确**。弛豫时间阻碍了在温度空间中的随机行走。\n-   `长期来看交换接受率不受影响`：**正确**。这取决于稳态势能直方图，而这些直方图保持正确。\n此选项准确而完整地描述了所有后果。\n**结论：正确。**\n\n**B. 构型的细致平衡被破坏，因此每个温度下势能的稳态分布会永久性地偏离正则分布。**\n-   `构型的细致平衡被破坏`：**不正确**。用于交换的 Metropolis 规则仅依赖于势能，并且此规则通过构造满足构型系综的细致平衡。错误发生在接受/拒绝步骤之后，并不会改变规则本身。\n-   `稳态分布...会永久性地偏离`：**不正确**。这是一个错误前提导致的错误结论。\n**结论：不正确。**\n\n**C. 每个副本中的平均动能无限期地保持在交换前的值，因此温度交换不再提供任何好处，副本实际上保持在固定温度。**\n-   `平均动能...无限期地保持在交换前的值`：**不正确**。这与恒温器的既定功能相矛盾，恒温器的功能是通过调节动能来强制执行目标温度。\n-   `温度交换不再提供任何好处`：**不正确**。好处（增强采样）的效率降低了，但没有被消除。交换仍然会发生。\n**结论：不正确。**\n\n**D. 在稳态下，只有动能直方图有偏差，而构型采样和在温度空间中的扩散在短期和长期内均不受影响。**\n-   `在稳态下，只有动能直方图有偏差`：**不正确**。在稳态（长期平均）下，恒温器确保动能分布是正确的。存在瞬时偏差，但没有永久性偏差。\n-   `在温度空间中的扩散不受影响`：**不正确**。由于每次交换后的弛豫开销，扩散（混合效率）明显降低了。\n**结论：不正确。**", "answer": "$$\\boxed{A}$$", "id": "2461603"}]}