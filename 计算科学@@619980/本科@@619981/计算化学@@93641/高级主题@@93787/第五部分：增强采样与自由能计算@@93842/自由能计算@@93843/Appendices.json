{"hands_on_practices": [{"introduction": "计算溶剂化自由能是理解生物分子过程的关键第一步。本练习 [@problem_id:2455813] 将指导您使用一个经典且直观的连续介质溶剂模型，来估算一个氨基酸侧链从丙氨酸（Alanine）突变为缬氨酸（Valine）时水合自由能的变化。通过将自由能分解为基于Born模型的极性部分和基于溶剂可及表面积（SASA）的非极性部分，您将亲手实践自由能计算中的一个核心思想：“分而治之”。", "problem": "要求您使用一个基于物理的连续介质溶剂模型，计算单个氨基酸侧链从 Alanine 突变为 Valine 的水合自由能变化。您的程序必须实现以下建模假设，这些假设需要从统计力学和经典静电学的基础定义中推导得出：\n\n- 水合自由能是将溶质从真空转移到连续介质溶剂中的可逆功。突变引起的变化定义为 Valine 侧链的水合自由能减去 Alanine 侧链的水合自由能。您必须假设一个可加和的分解，该分解包含一个极性静电项和一个基于溶剂可及表面积 (Solvent Accessible Surface Area, SASA) 的非极性项。\n\n- 对于极性项，请使用经典充电理论，该理论适用于一个净电荷为 $q$、半径为 $R$ 的球形位点，该位点嵌入在相对介电常数为 $\\varepsilon_s$ 的介电连续体中。可逆充电功必须与 Born 模型一致，您应在推理中推导出该模型并加以实现。使用库仑转换常数 $k_e = 332.06371$，单位为 $\\mathrm{kcal \\cdot \\AA/(mol \\cdot e^2)}$，元电荷 $e$，以及埃（Ångström） $\\AA$。溶剂介电常数 $\\varepsilon_s$ 是无量纲的。\n\n- 对于非极性项，将空腔形成和色散的自由能近似为与 SASA 成正比：$G_{\\mathrm{np}} = \\gamma A + \\beta$，其中对于单个球形位点，$A = 4 \\pi R^2$，$\\gamma$ 是一个常数，单位为 $\\mathrm{kcal/(mol \\cdot \\AA^2)}$，$\\beta$ 是一个偏移量，单位为 $\\mathrm{kcal/mol}$。对于 $\\beta$ 在不同状态间保持不变的突变，偏移量 $\\beta$ 会相互抵消。\n\n给定一个定义了溶剂以及 Alanine 和 Valine 侧链球体参数的参数集，计算水合自由能变化\n$$\n\\Delta \\Delta G_{\\mathrm{hyd}} = \\left[G_{\\mathrm{polar}}^{\\mathrm{Val}} + G_{\\mathrm{np}}^{\\mathrm{Val}}\\right] - \\left[G_{\\mathrm{polar}}^{\\mathrm{Ala}} + G_{\\mathrm{np}}^{\\mathrm{Ala}}\\right]\n$$\n单位为 $\\mathrm{kcal/mol}$。\n\n您的程序必须实现上述从第一性原理描述的模型，并为以下测试套件生成数值结果。每种情况都指定了溶剂介电常数 $\\varepsilon_s$、非极性系数 $\\gamma$、非极性偏移量 $\\beta$ 以及 Alanine 和 Valine 的球形位点参数：电荷 $q$（单位为 $e$）和半径 $R$（单位为 $\\AA$）。每种情况下的所有量都必须按照明确说明的单位进行解释。\n\n- 情况 1 (理想情况，类水溶剂，中性基团)：$\\varepsilon_s = 78.37$，$\\gamma = 0.005$，$\\beta = 0.0$，Alanine: $q_{\\mathrm{Ala}} = 0.0$, $R_{\\mathrm{Ala}} = 2.0$；Valine: $q_{\\mathrm{Val}} = 0.0$, $R_{\\mathrm{Val}} = 2.5$。\n- 情况 2 (边界情况，无突变)：$\\varepsilon_s = 78.37$，$\\gamma = 0.005$，$\\beta = 0.0$，Alanine: $q_{\\mathrm{Ala}} = 0.0$, $R_{\\mathrm{Ala}} = 2.0$; Valine: $q_{\\mathrm{Val}} = 0.0$, $R_{\\mathrm{Val}} = 2.0$。\n- 情况 3 (非极性项中的参数敏感性)：$\\varepsilon_s = 78.37$，$\\gamma = 0.0072$，$\\beta = 0.0$，Alanine: $q_{\\mathrm{Ala}} = 0.0$, $R_{\\mathrm{Ala}} = 2.0$；Valine: $q_{\\mathrm{Val}} = 0.0$, $R_{\\mathrm{Val}} = 2.5$。\n- 情况 4 (不同溶剂介电常数，中性基团)：$\\varepsilon_s = 32.60$，$\\gamma = 0.005$，$\\beta = 0.0$，Alanine: $q_{\\mathrm{Ala}} = 0.0$, $R_{\\mathrm{Ala}} = 2.0$；Valine: $q_{\\mathrm{Val}} = 0.0$, $R_{\\mathrm{Val}} = 2.5$。\n\n对您的程序的要求：\n- 使用上述物理常数和定义，推导并实现与介电连续体中充电功一致的极性贡献。\n- 使用 $A = 4 \\pi R^2$ 作为球体的 SASA，并计算非极性能 $G_{\\mathrm{np}} = \\gamma A + \\beta$。\n- 为每种情况计算 $\\Delta \\Delta G_{\\mathrm{hyd}}$（单位 $\\mathrm{kcal/mol}$），并将每个结果精确四舍五入到 6 位小数。\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表的结果，例如 $[x_1,x_2,x_3,x_4]$，其中每个 $x_i$ 是情况 $i$ 的浮点数结果，四舍五入到 6 位小数。\n\n所有最终数值答案均以 $\\mathrm{kcal/mol}$ 表示。不涉及角度。此问题中不出现百分比。", "solution": "该问题是有效的，因为它在科学上基于经典静电学和统计力学的原理，提法明确且提供了所有必要的参数，并以客观、正式的语言表述。我们现在将着手求解。\n\n目标是计算 Alanine ($\\mathrm{Ala}$) 侧链突变为 Valine ($\\mathrm{Val}$) 侧链的水合自由能变化 $\\Delta \\Delta G_{\\mathrm{hyd}}$。总水合自由能 $\\Delta G_{\\mathrm{hyd}}$ 定义为将溶质从真空转移到溶剂中的可逆功。突变的变化由以下公式给出：\n$$ \\Delta \\Delta G_{\\mathrm{hyd}} = \\Delta G_{\\mathrm{hyd}}(\\mathrm{Val}) - \\Delta G_{\\mathrm{hyd}}(\\mathrm{Ala}) $$\n指定的模型将水合自由能分解为一个静电极性项 $G_{\\mathrm{polar}}$ 和一个与表面积相关的非极性项 $G_{\\mathrm{np}}$。因此，对于给定的物种 $i$（$\\mathrm{Ala}$ 或 $\\mathrm{Val}$）：\n$$ \\Delta G_{\\mathrm{hyd}}^{i} = G_{\\mathrm{polar}}^{i} + G_{\\mathrm{np}}^{i} $$\n突变的总变化为：\n$$ \\Delta \\Delta G_{\\mathrm{hyd}} = (G_{\\mathrm{polar}}^{\\mathrm{Val}} + G_{\\mathrm{np}}^{\\mathrm{Val}}) - (G_{\\mathrm{polar}}^{\\mathrm{Ala}} + G_{\\mathrm{np}}^{\\mathrm{Ala}}) = (G_{\\mathrm{polar}}^{\\mathrm{Val}} - G_{\\mathrm{polar}}^{\\mathrm{Ala}}) + (G_{\\mathrm{np}}^{\\mathrm{Val}} - G_{\\mathrm{np}}^{\\mathrm{Ala}}) $$\n\n我们将根据规定的基本原理推导每一项。\n\n首先，我们使用 Born 模型处理极性贡献 $G_{\\mathrm{polar}}$。该项表示将一个带电球体从真空（相对介电常数 $\\varepsilon_{vac} = 1$）转移到相对介电常数为 $\\varepsilon_s$ 的溶剂中的静电功。此功等同于离子静电自能的变化。一个半径为 $R$ 的导电球体的自能，是将其从净电荷为 $0$ 充电至最终电荷 $Q$ 所需的功。\n\n在介电常数均匀为 $\\varepsilon$ 的介质中，一个半径为 $R$、携带电荷 $q'$ 的球体表面的静电势 $\\phi$ 为 $\\phi(q') = k_c \\frac{q'}{\\varepsilon R}$，其中 $k_c = (4\\pi\\varepsilon_0)^{-1}$ 是国际单位制（SI）中的库仑常数。将一个额外的无穷小电荷 $dq'$ 带到球体表面所需的增量功 $dW$ 为 $dW = \\phi(q') dq'$。\n总自能 $W_{\\mathrm{self}}$ 是将球体从 0 充电到 $Q$ 时此功的积分：\n$$ W_{\\mathrm{self}} = \\int_0^Q \\phi(q') dq' = \\int_0^Q k_c \\frac{q'}{\\varepsilon R} dq' = \\frac{k_c Q^2}{2\\varepsilon R} $$\n问题提供了一个预先分解好的库仑转换常数 $k_e$，单位为 $\\mathrm{kcal \\cdot \\AA/(mol \\cdot e^2)}$。该常数设计用于与以纯数形式（单位为元电荷 $e$）表示的电荷 $q$ 和以埃（$\\AA$）表示的半径 $R$ 一起使用，以得到单位为 $\\mathrm{kcal/mol}$ 的能量。在这些单位下，自能的公式变为：\n$$ W_{\\mathrm{self}} = \\frac{k_e q^2}{2\\varepsilon R} $$\n对水合自由能的极性贡献 $G_{\\mathrm{polar}}$ 是在溶剂中（$\\varepsilon = \\varepsilon_s$）与在真空中（$\\varepsilon = 1$）的自能之差：\n$$ G_{\\mathrm{polar}} = W_{\\mathrm{self}}(\\text{solvent}) - W_{\\mathrm{self}}(\\text{vacuum}) = \\frac{k_e q^2}{2\\varepsilon_s R} - \\frac{k_e q^2}{2R} $$\n提出公因子，我们得到 Born 方程：\n$$ G_{\\mathrm{polar}} = \\frac{k_e q^2}{2R} \\left(\\frac{1}{\\varepsilon_s} - 1\\right) $$\n\n其次，我们构建非极性贡献 $G_{\\mathrm{np}}$。问题指出该项是溶剂可及表面积 (SASA) $A$ 的线性函数：\n$$ G_{\\mathrm{np}} = \\gamma A + \\beta $$\n此处，$\\gamma$ 是表面张力系数，单位为 $\\mathrm{kcal/(mol \\cdot \\AA^2)}$，$\\beta$ 是一个恒定偏移量，单位为 $\\mathrm{kcal/mol}$。侧链被建模为半径为 $R$ 的球体。球体的表面积为：\n$$ A = 4\\pi R^2 $$\n将此代入 $G_{\\mathrm{np}}$ 的表达式，得到：\n$$ G_{\\mathrm{np}} = \\gamma (4\\pi R^2) + \\beta $$\n\n现在，我们组合这些分量，以求出突变的总自由能变化 $\\Delta \\Delta G_{\\mathrm{hyd}}$。\n极性项的变化为：\n$$ \\Delta G_{\\mathrm{polar}} = G_{\\mathrm{polar}}^{\\mathrm{Val}} - G_{\\mathrm{polar}}^{\\mathrm{Ala}} = \\frac{k_e}{2} \\left(\\frac{1}{\\varepsilon_s} - 1\\right) \\left( \\frac{q_{\\mathrm{Val}}^2}{R_{\\mathrm{Val}}} - \\frac{q_{\\mathrm{Ala}}^2}{R_{\\mathrm{Ala}}} \\right) $$\n非极性项的变化为：\n$$ \\Delta G_{\\mathrm{np}} = G_{\\mathrm{np}}^{\\mathrm{Val}} - G_{\\mathrm{np}}^{\\mathrm{Ala}} = \\left(\\gamma (4\\pi R_{\\mathrm{Val}}^2) + \\beta\\right) - \\left(\\gamma (4\\pi R_{\\mathrm{Ala}}^2) + \\beta\\right) $$\n如问题所述，偏移量 $\\beta$ 假定在两种状态下相同，因此会相互抵消：\n$$ \\Delta G_{\\mathrm{np}} = 4\\pi\\gamma (R_{\\mathrm{Val}}^2 - R_{\\mathrm{Ala}}^2) $$\n水合自由能的总变化是这两个贡献的总和：\n$$ \\Delta \\Delta G_{\\mathrm{hyd}} = \\frac{k_e}{2} \\left(\\frac{1}{\\varepsilon_s} - 1\\right) \\left( \\frac{q_{\\mathrm{Val}}^2}{R_{\\mathrm{Val}}} - \\frac{q_{\\mathrm{Ala}}^2}{R_{\\mathrm{Ala}}} \\right) + 4\\pi\\gamma (R_{\\mathrm{Val}}^2 - R_{\\mathrm{Ala}}^2) $$\n此最终方程被实现用于计算每个测试用例的数值结果。对于所有给定的情况，电荷 $q_{\\mathrm{Ala}}$ 和 $q_{\\mathrm{Val}}$ 均为 $0.0$，这使得极性贡献 $\\Delta G_{\\mathrm{polar}}$ 等于零，从而简化了计算。因此，计算简化为只剩下非极性项。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the change in hydration free energy for mutating Alanine to Valine\n    using a continuum solvent model.\n    \"\"\"\n\n    # Define physical constants from the problem statement.\n    # Coulomb conversion constant in kcal.A/(mol.e^2).\n    k_e = 332.06371\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (epsilon_s, gamma, q_Ala, R_Ala, q_Val, R_Val)\n    # beta is 0.0 in all cases and cancels out, so it is omitted.\n    test_cases = [\n        # Case 1: happy path, water-like solvent, neutral groups\n        (78.37, 0.005, 0.0, 2.0, 0.0, 2.5),\n        # Case 2: boundary, no mutation\n        (78.37, 0.005, 0.0, 2.0, 0.0, 2.0),\n        # Case 3: parameter sensitivity in the nonpolar term\n        (78.37, 0.0072, 0.0, 2.0, 0.0, 2.5),\n        # Case 4: different solvent permittivity with neutral groups\n        (32.60, 0.005, 0.0, 2.0, 0.0, 2.5),\n    ]\n\n    results = []\n    for case in test_cases:\n        epsilon_s, gamma, q_ala, r_ala, q_val, r_val = case\n\n        # Calculate the change in the polar (electrostatic) free energy.\n        # This term is zero for all test cases since all charges are 0.\n        # However, it is implemented for generality.\n        polar_factor = (k_e / 2.0) * (1.0 / epsilon_s - 1.0)\n        \n        # Handle division by zero if radius is zero (not in test cases, but good practice).\n        term_val = q_val**2 / r_val if r_val != 0 else 0\n        term_ala = q_ala**2 / r_ala if r_ala != 0 else 0\n        \n        delta_g_polar = polar_factor * (term_val - term_ala)\n\n        # Calculate the change in the nonpolar free energy (SASA-based).\n        # The offset beta cancels out.\n        # A = 4 * pi * R^2\n        delta_g_nonpolar = 4.0 * np.pi * gamma * (r_val**2 - r_ala**2)\n        \n        # Total change in hydration free energy\n        delta_delta_g_hyd = delta_g_polar + delta_g_nonpolar\n\n        # Round the result to 6 decimal places as required.\n        results.append(round(delta_delta_g_hyd, 6))\n\n    # Format the final output as a comma-separated list in brackets.\n    # The map(str, ...) ensures float representation is standard.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2455813"}, {"introduction": "分子间的相互作用不仅取决于它们的直接作用力，还深刻地受到溶剂环境的影响。在本练习 [@problem_id:2455815] 中，您将计算两个甲烷分子在水中靠近时的平均力势（Potential of Mean Force, PMF），即自由能随距离 $r$ 变化的曲线。通过结合直接的Lennard-Jones相互作用和与疏水效应相关的溶剂化项，您将建立一个简化的模型来量化推动非极性分子聚集的关键驱动力。", "problem": "要求您计算液态水中两个甲烷分子的缔合自由能，作为其中心间距的函数。将每个甲烷分子建模为其中心处的一个 Lennard-Jones (LJ) 位点，并为其溶剂暴露建模为一个硬球。假设为环境条件，并使用以下定义和参数。\n\n定义和物理模型：\n- 在间距为 $r$ 时的平均力势 (PMF)，记作 $\\Delta G(r)$，被建模为直接对相互作用与溶剂项之和，其中溶剂项源于溶剂可及表面积 (SASA) 相对于无限远分离时的变化：\n  - 直接对相互作用：$12$–$6$ Lennard-Jones 势 $U_{\\mathrm{LJ}}(r)$，其参数如下文所述。\n  - 溶剂项：自由能贡献与两个溶剂可及球体并集的 SASA 减去在无限远分离时的 SASA 成正比。设溶剂可及半径为 $R_{\\mathrm{SASA}} = a + r_{\\mathrm{p}}$，其中 $a$ 是甲烷硬球半径，$r_{\\mathrm{p}}$ 是溶剂探针半径。SASA 取为几何表面积（无曲率校正）。对于 $r \\ge 2 R_{\\mathrm{SASA}}$，球体不重叠，其并集的 SASA 等于两个独立球体 SASA 之和。\n- 使用水的表面张力将 SASA 的变化转换成自由能。将表面张力 $\\gamma$ 视为单位面积的能量。\n\n使用的参数和常数：\n- 甲烷硬球半径：$a = 2.0\\ \\mathrm{\\AA}$。\n- 溶剂探针半径：$r_{\\mathrm{p}} = 1.4\\ \\mathrm{\\AA}$。\n- Lennard–Jones 尺寸参数：$\\sigma = 3.73\\ \\mathrm{\\AA}$。\n- Lennard–Jones 势阱深度以温度形式给出：$\\epsilon / k_{\\mathrm{B}} = 148\\ \\mathrm{K}$。使用摩尔气体常数 $R = 8.314462618 \\times 10^{-3}\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$ 将 $\\epsilon$ 转换为单位为 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ 的值。\n- 水的表面张力：$\\gamma_{\\mathrm{water}} = 0.072\\ \\mathrm{J}\\,\\mathrm{m}^{-2}$。使用 Avogadro 常数 $N_{\\mathrm{A}} = 6.02214076 \\times 10^{23}\\ \\mathrm{mol}^{-1}$ 和 $1\\ \\mathrm{m}^{2} = 10^{20}\\ \\mathrm{\\AA}^{2}$ 将其转换为单位为 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{\\AA}^{-2}$ 的值。\n\n需要实现的数学要求：\n- 使用标准的 $12$–$6$ Lennard-Jones 势 $U_{\\mathrm{LJ}}(r) = 4 \\epsilon \\left[\\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^{6}\\right]$。\n- 设 $A_{\\mathrm{union}}(r)$ 为两个半径为 $R_{\\mathrm{SASA}}$、中心间距为 $r$ 的球体并集的表面积。计算溶剂自由能贡献为 $\\Delta G_{\\mathrm{solv}}(r) = \\gamma_{\\mathrm{water}}^{(\\mathrm{kJ/mol/\\AA^{2}})} \\left(A_{\\mathrm{union}}(r) - 2 \\times 4\\pi R_{\\mathrm{SASA}}^{2}\\right)$，当 $r \\ge 2 R_{\\mathrm{SASA}}$ 时该值为零，当球体交叠时为负值。则 PMF 为 $\\Delta G(r) = U_{\\mathrm{LJ}}(r) + \\Delta G_{\\mathrm{solv}}(r)$。\n- 所有能量必须以 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ 表示。所有距离均以 $\\mathrm{\\AA}$ 为单位。\n\n测试组：\n使用上述参数值，按此确切顺序计算以下间距（均以 $\\mathrm{\\AA}$ 为单位）的 $\\Delta G(r)$：\n- $r_{1} = 12.0$\n- $r_{2} = 6.8$\n- $r_{3} = 5.0$\n- $r_{4} = 4.186$\n- $r_{5} = 3.5$\n\n答案规格：\n- 对于每个测试距离，输出一个等于 $\\Delta G(r)$ 的浮点数值，单位为 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$，并四舍五入到六位小数。\n- 您的程序应生成单行输出，其中包含一个用逗号分隔并用方括号括起来的结果列表（例如，$\\left[ \\text{result}_{1}, \\text{result}_{2}, \\ldots \\right]$，但没有空格）。", "solution": "问题陈述已经过分析并被确定为有效。它具有科学依据、问题设定良好、客观，并包含推导唯一解所需的所有必要信息。所提供的模型是计算化学中用于估算隐式溶剂中缔合自由能的一种简化但标准的方法。我们现在将进行正式的求解。\n\n该问题要求计算水中两个甲烷分子缔合的平均力势 (PMF) $\\Delta G(r)$，作为其间距 $r$ 的函数。PMF 被建模为两个贡献项的总和：两个分子间的直接相互作用势 $U_{\\mathrm{LJ}}(r)$，以及与溶剂重排相关的自由能变化 $\\Delta G_{\\mathrm{solv}}(r)$。\n$$\n\\Delta G(r) = U_{\\mathrm{LJ}}(r) + \\Delta G_{\\mathrm{solv}}(r)\n$$\n所有能量的单位必须为 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$，距离单位为 $\\mathrm{\\AA}$。\n\n首先，我们必须建立一套单位一致的参数和常数。\nLennard-Jones 势阱深度 $\\epsilon$ 以温度形式给出，$\\epsilon / k_{\\mathrm{B}} = 148\\ \\mathrm{K}$。我们使用摩尔气体常数 $R = N_{\\mathrm{A}} k_{\\mathrm{B}} = 8.314462618 \\times 10^{-3}\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$，将 $\\epsilon$ 转换为摩尔能量：\n$$\n\\epsilon = \\left(\\frac{\\epsilon}{k_{\\mathrm{B}}}\\right) \\times R = 148\\ \\mathrm{K} \\times 8.314462618 \\times 10^{-3}\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1} \\approx 1.230538\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\n$$\nLennard-Jones 尺寸参数给定为 $\\sigma = 3.73\\ \\mathrm{\\AA}$。\n\n与溶剂相关的项取决于水的表面张力，$\\gamma_{\\mathrm{water}} = 0.072\\ \\mathrm{J}\\,\\mathrm{m}^{-2}$。我们必须使用 Avogadro 常数 $N_{\\mathrm{A}} = 6.02214076 \\times 10^{23}\\ \\mathrm{mol}^{-1}$ 以及换算关系 $1\\ \\mathrm{kJ} = 1000\\ \\mathrm{J}$ 和 $1\\ \\mathrm{m} = 10^{10}\\ \\mathrm{\\AA}$，将其单位转换为 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{\\AA}^{-2}$：\n$$\n\\gamma = 0.072\\ \\frac{\\mathrm{J}}{\\mathrm{m}^2} \\times \\frac{10^{-3}\\ \\mathrm{kJ}}{1\\ \\mathrm{J}} \\times \\left(\\frac{1\\ \\mathrm{m}}{10^{10}\\ \\mathrm{\\AA}}\\right)^2 \\times N_{\\mathrm{A}}\\ \\mathrm{mol}^{-1}\n$$\n$$\n\\gamma = 0.072 \\times 10^{-3} \\times 10^{-20} \\times 6.02214076 \\times 10^{23}\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{\\AA}^{-2} \\approx 0.433594\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{\\AA}^{-2}\n$$\n溶剂可及半径 $R_{\\mathrm{SASA}}$ 是甲烷硬球半径 $a = 2.0\\ \\mathrm{\\AA}$ 和溶剂探针半径 $r_{\\mathrm{p}} = 1.4\\ \\mathrm{\\AA}$ 的和：\n$$\nR_{\\mathrm{SASA}} = a + r_{\\mathrm{p}} = 2.0\\ \\mathrm{\\AA} + 1.4\\ \\mathrm{\\AA} = 3.4\\ \\mathrm{\\AA}\n$$\n直接相互作用由 $12$-$6$ Lennard-Jones 势给出：\n$$\nU_{\\mathrm{LJ}}(r) = 4\\epsilon \\left[ \\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^{6} \\right]\n$$\n溶剂化自由能 $\\Delta G_{\\mathrm{solv}}(r)$ 与相比于无限远分离时的溶剂可及表面积 (SASA) 变化量成正比。对于两个半径为 $R = R_{\\mathrm{SASA}}$ 的球体，从无限远处移动到间距为 $r$ 时，SASA 的变化量 $\\Delta A(r)$ 仅在它们重叠时（即 $r  2R$）非零。对于 $r \\geq 2R$，球体不重叠，$\\Delta A(r) = 0$。\n对于 $r  2R$，两个球体并集的表面积小于它们各自面积之和。这个面积的变化量 $\\Delta A(r)$ 是负值，其大小等于被埋藏的表面积（Buried Surface Area, BSA）。对于两个半径为 $R$ 的相同球体，BSA 由 $BSA(r) = 2\\pi R(2R-r)$ 给出。因此，SASA 的变化量为 $\\Delta A(r) = -BSA(r) = -2\\pi R(2R-r) = 2\\pi R(r-2R)$。这个变化是负值，代表了在复合过程中被“埋藏”的面积。\n溶剂化自由能则为：\n$$\n\\Delta G_{\\mathrm{solv}}(r) = \\gamma \\times \\Delta A(r) = \\begin{cases} \\gamma \\left[ 2\\pi R_{\\mathrm{SASA}} (r - 2R_{\\mathrm{SASA}}) \\right]  \\text{if } r  2R_{\\mathrm{SASA}} \\\\ 0  \\text{if } r \\ge 2R_{\\mathrm{SASA}} \\end{cases}\n$$\n此处，$2R_{\\mathrm{SASA}} = 2 \\times 3.4\\ \\mathrm{\\AA} = 6.8\\ \\mathrm{\\AA}$。\n\n结合这些项，PMF 的完整表达式为：\n$$\n\\Delta G(r) = 4\\epsilon \\left[ \\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^{6} \\right] + \\begin{cases} \\gamma \\left[ 2\\pi R_{\\mathrm{SASA}} (r - 2R_{\\mathrm{SASA}}) \\right]  \\text{if } r  6.8\\ \\mathrm{\\AA} \\\\ 0  \\text{if } r \\ge 6.8\\ \\mathrm{\\AA} \\end{cases}\n$$\n我们现在将实现这些公式，以计算指定距离 $r \\in \\{12.0, 6.8, 5.0, 4.186, 3.5\\}\\ \\mathrm{\\AA}$ 处的 $\\Delta G(r)$。计算过程将通过编程实现，使用高精度的派生常数。\n例如，对于 $r=5.0\\ \\mathrm{\\AA}$：\n由于 $r=5.0  6.8$，两项都有贡献。\n$U_{\\mathrm{LJ}}(5.0) = 4(1.230538) \\left[ \\left(\\frac{3.73}{5.0}\\right)^{12} - \\left(\\frac{3.73}{5.0}\\right)^{6} \\right] \\approx -0.700624\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n$\\Delta G_{\\mathrm{solv}}(5.0) = (0.433594) \\left[ 2\\pi (3.4) (5.0 - 6.8) \\right] \\approx -16.674458\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n$\\Delta G(5.0) = -0.700624 - 16.674458 = -17.375082\\ \\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n最终代码将把此逻辑应用于所有测试用例，并按规定格式化输出。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the free energy of association for two methane molecules\n    in liquid water as a function of their separation distance.\n    \"\"\"\n\n    # Define parameters and constants\n    A_RADIUS = 2.0  # Methane hard-sphere radius, Angstrom\n    R_PROBE = 1.4  # Solvent probe radius, Angstrom\n    SIGMA = 3.73  # Lennard-Jones size parameter, Angstrom\n    EPSILON_OVER_KB = 148.0  # Lennard-Jones well depth, K\n    R_GAS_CONSTANT = 8.314462618e-3  # Molar gas constant, kJ mol^-1 K^-1\n    GAMMA_WATER = 0.072  # Water surface tension, J m^-2\n    NA_AVOGADRO = 6.02214076e23  # Avogadro's constant, mol^-1\n    M2_TO_A2 = 1e20  # Conversion from m^2 to Angstrom^2\n\n    # Calculate derived parameters in consistent units (kJ, mol, Angstrom)\n    # Solvent-accessible radius\n    r_sasa = A_RADIUS + R_PROBE  # Angstrom\n\n    # Lennard-Jones well depth in kJ/mol\n    epsilon = EPSILON_OVER_KB * R_GAS_CONSTANT  # kJ/mol\n\n    # Surface tension in kJ mol^-1 Angstrom^-2\n    # gamma [J/m^2] * (1e-3 kJ/J) * (1/1e20 m^2/A^2) * N_A [mol^-1]\n    gamma = GAMMA_WATER * 1e-3 / M2_TO_A2 * NA_AVOGADRO\n\n    # Test cases for separation distance r in Angstrom\n    test_cases = [12.0, 6.8, 5.0, 4.186, 3.5]\n\n    results = []\n    \n    # The critical distance for solvent sphere overlap is 2 * r_sasa\n    overlap_distance = 2.0 * r_sasa\n\n    def calculate_pmf(r, epsilon_val, sigma_val, gamma_val, r_sasa_val, overlap_dist_val):\n        \"\"\"Calculates the Potential of Mean Force (PMF) delta_G(r).\"\"\"\n        \n        # 1. Direct pair interaction: Lennard-Jones potential\n        sr6 = (sigma_val / r) ** 6\n        sr12 = sr6 ** 2\n        u_lj = 4.0 * epsilon_val * (sr12 - sr6)\n\n        # 2. Solvent term: Free energy from SASA change\n        delta_g_solv = 0.0\n        if r  overlap_dist_val:\n            # Change in surface area for two overlapping spheres\n            delta_area = 2.0 * np.pi * r_sasa_val * (r - overlap_dist_val)\n            delta_g_solv = gamma_val * delta_area\n        \n        # 3. Total PMF\n        delta_g_total = u_lj + delta_g_solv\n        return delta_g_total\n\n    for r_dist in test_cases:\n        pmf_value = calculate_pmf(r_dist, epsilon, SIGMA, gamma, r_sasa, overlap_distance)\n        results.append(pmf_value)\n\n    # Format the results to six decimal places for the final output\n    formatted_results = [f\"{res:.6f}\" for res in results]\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2455815"}, {"introduction": "在药物设计和蛋白质工程中，准确预测突变如何影响蛋白质-配体结合亲和力是至关重要的。本练习 [@problem_id:2448843] 模拟了一个真实世界的研究场景，您将利用一个炼金术热力学循环来计算相对结合自由能 $\\Delta\\Delta G_{\\mathrm{bind}}$。您需要应用强大的Bennett接受率（BAR）方法来处理给定的（模拟）仿真数据，从微观的能量差样本中提取出宏观的自由能变化，这正是连接计算模拟与实验可观测量的桥梁。", "problem": "给定一个热力学循环，用于评估受体蛋白发生单点突变时结合自由能的变化。该循环采用野生型状态（状态 $A$）和突变体状态（状态 $B$）这两种分子状态之间的相对炼金术循环。由突变引起的结合自由能变化定义为：在结合（受体-配体复合物）环境中的突变自由能与在未结合（体相溶剂）环境中的突变自由能之差。将结合环境和未结合环境中的突变自由能分别记为 $\\Delta G_{\\mathrm{bound}}$ 和 $\\Delta G_{\\mathrm{unbound}}$。需要报告的结合自由能变化为 $\\Delta\\Delta G_{\\mathrm{bind}} = \\Delta G_{\\mathrm{bound}} - \\Delta G_{\\mathrm{unbound}}$。\n\n对于每种环境，我们为您提供了在炼金术转换的每个端点状态的构象上评估得到的势能差的有限样本。具体来说，对于环境 $s \\in \\{\\mathrm{bound},\\mathrm{unbound}\\}$：\n- 一组“正向系综”样本 $\\{\\Delta u^{(f)}_{i}\\}$，其中 $\\Delta u^{(f)}_{i} = u_B(x_i)-u_A(x_i)$，而 $\\{x_i\\}$ 是从状态 $A$ 的正则系综中抽取的构象。\n- 一组“反向系综”样本 $\\{\\Delta u^{(r)}_{j}\\}$，其中 $\\Delta u^{(r)}_{j} = u_A(y_j)-u_B(y_j)$，而 $\\{y_j\\}$ 是从状态 $B$ 的正则系综中抽取的构象。\n\n所有势能均以 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ 为单位。温度为 $T = 300\\,\\mathrm{K}$，玻尔兹曼常数为 $k_{\\mathrm{B}} = 0.00831446261815324\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$。请仅使用这些单位生成最终答案，并将报告的每个自由能变化以 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ 为单位表示。\n\n您的任务是使用给定的样本和在温度 $T$ 下的正则统计力学定义，为每个测试用例计算 $\\Delta G_{\\mathrm{bound}}$ 和 $\\Delta G_{\\mathrm{unbound}}$，然后报告该用例的 $\\Delta\\Delta G_{\\mathrm{bind}}$。将报告的每个 $\\Delta\\Delta G_{\\mathrm{bind}}$ 值四舍五入到恰好三位小数，并以 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ 为单位表示。\n\n测试套件：\n- 用例 1（典型的良好采样场景）：\n  - 结合态，正向系综 $\\{\\Delta u^{(f)}_{i}\\}$: [ $-2.2$, $-1.8$, $-2.0$, $-2.1$, $-1.9$ ]\n  - 结合态，反向系综 $\\{\\Delta u^{(r)}_{j}\\}$: [ $2.2$, $1.8$, $2.0$, $2.1$, $1.9$ ]\n  - 未结合态，正向系综 $\\{\\Delta u^{(f)}_{i}\\}$: [ $0.8$, $1.2$, $1.0$, $1.1$, $0.9$ ]\n  - 未结合态，反向系综 $\\{\\Delta u^{(r)}_{j}\\}$: [ $-1.2$, $-0.8$, $-1.0$, $-1.1$, $-0.9$ ]\n- 用例 2（平衡转换，突变自由能和结合自由能变化均接近零）：\n  - 结合态，正向系综 $\\{\\Delta u^{(f)}_{i}\\}$: [ $-0.1$, $0.0$, $0.1$ ]\n  - 结合态，反向系综 $\\{\\Delta u^{(r)}_{j}\\}$: [ $0.1$, $0.0$, $-0.1$ ]\n  - 未结合态，正向系综 $\\{\\Delta u^{(f)}_{i}\\}$: [ $-0.1$, $0.0$, $0.1$ ]\n  - 未结合态，反向系综 $\\{\\Delta u^{(r)}_{j}\\}$: [ $0.1$, $0.0$, $-0.1$ ]\n- 用例 3（强稳定性的结合态转换与稳定性稍弱的非结合态转换）：\n  - 结合态，正向系综 $\\{\\Delta u^{(f)}_{i}\\}$: [ $-5.5$, $-4.5$, $-5.0$ ]\n  - 结合态，反向系综 $\\{\\Delta u^{(r)}_{j}\\}$: [ $4.5$, $5.5$, $5.0$ ]\n  - 未结合态，正向系综 $\\{\\Delta u^{(f)}_{i}\\}$: [ $-4.9$, $-4.7$, $-4.8$ ]\n  - 未结合态，反向系综 $\\{\\Delta u^{(r)}_{j}\\}$: [ $4.7$, $4.9$, $4.8$ ]\n\n您的程序必须为每个用例计算 $\\Delta\\Delta G_{\\mathrm{bind}}$，并将三个结果作为单行输出，格式化为用方括号括起来的逗号分隔列表，例如 $[a,b,c]$，其中 $a$、$b$ 和 $c$ 均为以 $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ 为单位、四舍五入到恰好三位小数的浮点数。不应打印任何额外的文本或行。", "solution": "问题陈述已经过严格审查，并被确定为 **有效**。这是一个计算统计力学中的适定性问题，它基于基本原理，没有任何科学或逻辑上的不一致之处。所提供的数据是完整的，并且足以得出唯一解。\n\n任务是计算蛋白质突变的结合自由能变化 $\\Delta\\Delta G_{\\mathrm{bind}}$。该量定义为 $\\Delta\\Delta G_{\\mathrm{bind}} = \\Delta G_{\\mathrm{bound}} - \\Delta G_{\\mathrm{unbound}}$，其中 $\\Delta G_{\\mathrm{bound}}$ 和 $\\Delta G_{\\mathrm{unbound}}$ 分别是突变在结合态和未结合态下的自由能变化。对于每种状态，我们都获得了从初始（野生型，$A$）和最终（突变型，$B$）状态的分子动力学模拟中得到的势能差样本。\n\n使用来自两个系综的样本计算自由能差 $\\Delta G = G_B - G_A$ 时，统计上最稳健的方法是 Bennett 接受比（BAR）方法。该方法提供了 $\\Delta G$ 的最小方差估计，被认为是黄金标准。我们将采用 BAR 方法来计算 $\\Delta G_{\\mathrm{bound}}$ 和 $\\Delta G_{\\mathrm{unbound}}$。\n\n两个状态 $A$ 和 $B$ 之间的亥姆霍兹自由能差由 $\\Delta G = -k_{\\mathrm{B}}T \\ln(Z_B/Z_A)$ 给出，其中 $Z$ 是正则配分函数，$k_{\\mathrm{B}}$ 是玻尔兹曼常数，$T$ 是温度。BAR 方法为 $\\Delta G$ 提供了一个隐式方程：\n$$\n\\left\\langle \\frac{1}{1 + e^{\\beta(\\Delta U - \\Delta G)}} \\right\\rangle_B = \\left\\langle \\frac{1}{1 + e^{-\\beta(\\Delta U - \\Delta G)}} \\right\\rangle_A\n$$\n在此，$\\beta = 1/(k_{\\mathrm{B}}T)$，$\\Delta U = U_B - U_A$ 是势能差，而 $\\langle \\cdot \\rangle_A$ 和 $\\langle \\cdot \\rangle_B$ 分别表示在状态 $A$ 和状态 $B$ 上的正则系综平均。\n\n问题提供了有限样本来估计这些平均值：\n- 来自状态 $A$ 的正向样本：$\\{\\Delta u^{(f)}_{i}\\}_{i=1}^{N_f}$，其中 $\\Delta u^{(f)}_{i} = U_B(x_i) - U_A(x_i)$。\n- 来自状态 $B$ 的反向样本：$\\{\\Delta u^{(r)}_{j}\\}_{j=1}^{N_r}$，其中 $\\Delta u^{(r)}_{j} = U_A(y_j) - U_B(y_j)$。注意，这意味着 $\\Delta U(y_j) = -\\Delta u^{(r)}_{j}$。\n\n将样本平均值代入 BAR 方程，我们得到需求解的 $\\Delta G$ 方程：\n$$\n\\frac{1}{N_f} \\sum_{i=1}^{N_f} \\frac{1}{1 + e^{-\\beta(\\Delta u^{(f)}_{i} - \\Delta G)}} = \\frac{1}{N_r} \\sum_{j=1}^{N_r} \\frac{1}{1 + e^{\\beta(-\\Delta u^{(r)}_{j} - \\Delta G)}}\n$$\n由于在所有测试用例中，正向样本数 $N_f$ 等于反向样本数 $N_r$，因此可以通过约掉前置因子 $1/N_f$ 和 $1/N_r$ 来对方程进行轻微简化。我们必须找到函数 $F(\\Delta G)$ 的根：\n$$\nF(\\Delta G) = \\sum_{i=1}^{N_f} \\frac{1}{1 + e^{-\\beta(\\Delta u^{(f)}_{i} - \\Delta G)}} - \\sum_{j=1}^{N_r} \\frac{1}{1 + e^{\\beta(-\\Delta u^{(r)}_{j} - \\Delta G)}} = 0\n$$\n这是一个可以进行数值求解的非线性方程。函数 $F(\\Delta G)$ 是单调的，保证了根的唯一性。我们将使用 `SciPy` 库提供的数值求根算法，特别是因其稳健性而选择的 Brent-Dekker 方法 (`brentq`)。\n\n每个测试用例的步骤如下：\n1. 定义物理常数：$T = 300\\,\\mathrm{K}$ 和 $k_{\\mathrm{B}} = 0.00831446261815324\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$。根据这些常数，计算热能项 $\\beta = 1/(k_{\\mathrm{B}}T)$。\n2. 对于 `bound` 环境，使用提供的正向和反向样本 $\\{\\Delta u^{(f, \\mathrm{bound})}_{i}\\}$ 和 $\\{\\Delta u^{(r, \\mathrm{bound})}_{j}\\}$ 来建立并求解 BAR 方程，以获得 $\\Delta G_{\\mathrm{bound}}$。\n3. 对于 `unbound` 环境，使用提供的样本 $\\{\\Delta u^{(f, \\mathrm{unbound})}_{i}\\}$ 和 $\\{\\Delta u^{(r, \\mathrm{unbound})}_{j}\\}$ 来建立并求解 BAR 方程，以获得 $\\Delta G_{\\mathrm{unbound}}$。\n4. 计算最终量 $\\Delta\\Delta G_{\\mathrm{bind}} = \\Delta G_{\\mathrm{bound}} - \\Delta G_{\\mathrm{unbound}}$。\n5. 按要求将结果值四舍五入到三位小数。\n\n$k_{\\mathrm{B}}T$ 的计算如下：\n$k_{\\mathrm{B}}T = (0.00831446261815324\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}) \\times (300\\,\\mathrm{K}) \\approx 2.494338785\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n\n在提供的测试数据中有一个有趣的观察，即对称性：对于每个用例，正向样本集合 $\\{\\Delta u_i^{(f)}\\}$ 与取负的反向样本集合 $\\{-\\Delta u_j^{(r)}\\}$ 相同。此外，这些集合中的每一个都关于其算术平均值呈数值对称。在这些特定条件下，BAR 方程的解就是能量样本的算术平均值，即 $\\Delta G = \\overline{\\Delta u^{(f)}}$。虽然这提供了一个方便的解析检验方法，但实现中将使用通用的数值求解器，以展示 BAR 方法的严格应用。\n\n- 对于用例 1：\n  - $\\Delta G_{\\mathrm{bound}} = \\text{mean}([-2.2, -1.8, -2.0, -2.1, -1.9]) = -2.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n  - $\\Delta G_{\\mathrm{unbound}} = \\text{mean}([0.8, 1.2, 1.0, 1.1, 0.9]) = 1.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n  - $\\Delta\\Delta G_{\\mathrm{bind}} = -2.0 - 1.0 = -3.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n- 对于用例 2：\n  - $\\Delta G_{\\mathrm{bound}} = \\text{mean}([-0.1, 0.0, 0.1]) = 0.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n  - $\\Delta G_{\\mathrm{unbound}} = \\text{mean}([-0.1, 0.0, 0.1]) = 0.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n  - $\\Delta\\Delta G_{\\mathrm{bind}} = 0.0 - 0.0 = 0.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n- 对于用例 3：\n  - $\\Delta G_{\\mathrm{bound}} = \\text{mean}([-5.5, -4.5, -5.0]) = -5.0\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n  - $\\Delta G_{\\mathrm{unbound}} = \\text{mean}([-4.9, -4.7, -4.8]) = -4.8\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n  - $\\Delta\\Delta G_{\\mathrm{bind}} = -5.0 - (-4.8) = -0.2\\,\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$。\n\n数值实现将在格式化最终输出之前确认这些值。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import root_scalar\n\ndef solve_bar(u_fwd: np.ndarray, u_rev: np.ndarray, beta: float) - float:\n    \"\"\"\n    Calculates the free energy difference using the Bennett Acceptance Ratio (BAR) method.\n\n    Args:\n        u_fwd: Array of forward potential energy differences (U_B - U_A) from state A.\n        u_rev: Array of reverse potential energy differences (U_A - U_B) from state B.\n        beta: The inverse temperature, 1/(k_B * T).\n\n    Returns:\n        The estimated free energy difference, dG.\n    \"\"\"\n    n_fwd = len(u_fwd)\n    n_rev = len(u_rev)\n\n    def bar_equation(dG: float) - float:\n        \"\"\"The BAR equation G(dG) = 0 that we need to solve for dG.\"\"\"\n        # Arguments for the exponential function, computed with care to avoid overflow\n        # although with typical dG values it's not an issue.\n        # Note: log-sum-exp trick is not directly applicable here as it is a sum of sigmoids.\n        # The equation to solve is:\n        # (1/N_f) * sum(sigmoid(beta*(dG - u_f))) = (1/N_r) * sum(sigmoid(-beta*(dG + u_r)))\n        # which is equivalent to:\n        # (1/N_f) * sum(1/(1+exp(-beta(dG-u_f)))) = (1/N_r) * sum(1/(1+exp(beta(dG+u_r))))\n        # And also equivalent to the form used here:\n        # (1/N_f) * sum(1/(1+exp(beta*(u_f-dG)))) = (1/N_r) * sum(1/(1+exp(-beta*(-u_r-dG))))\n        \n        arg_fwd = beta * (u_fwd - dG)\n        sum_fwd = np.sum(1.0 / (1.0 + np.exp(arg_fwd)))\n\n        arg_rev = -beta * (-u_rev - dG)\n        sum_rev = np.sum(1.0 / (1.0 + np.exp(arg_rev)))\n\n        return (sum_fwd / n_fwd) - (sum_rev / n_rev)\n\n    # Provide a generous bracket for the root-finding algorithm.\n    # The root should be close to the mean of the energy differences.\n    all_u = np.concatenate([u_fwd, -u_rev])\n    min_u, max_u = np.min(all_u), np.max(all_u)\n    # A wide bracket ensures robustness.\n    bracket = [min_u - 50.0, max_u + 50.0]\n\n    try:\n        sol = root_scalar(bar_equation, bracket=bracket, method='brentq')\n        return sol.root\n    except ValueError:\n        # This fallback can be useful if the bracket is not valid,\n        # which is unlikely here but good practice.\n        # A simple average is a reasonable initial guess.\n        initial_guess = np.mean(all_u)\n        sol = root_scalar(bar_equation, x0=initial_guess, method='brentq', bracket=bracket)\n        return sol.root\n\ndef solve():\n    \"\"\"\n    Main function to run the free energy calculations for all test cases.\n    \"\"\"\n    # Define constants\n    T = 300.0  # Temperature in Kelvin\n    k_B = 0.00831446261815324  # Boltzmann constant in kJ/(mol*K)\n    beta = 1.0 / (k_B * T)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1\n        (\n            [-2.2, -1.8, -2.0, -2.1, -1.9],  # Bound, forward\n            [2.2, 1.8, 2.0, 2.1, 1.9],       # Bound, reverse\n            [0.8, 1.2, 1.0, 1.1, 0.9],       # Unbound, forward\n            [-1.2, -0.8, -1.0, -1.1, -0.9]   # Unbound, reverse\n        ),\n        # Case 2\n        (\n            [-0.1, 0.0, 0.1],                # Bound, forward\n            [0.1, 0.0, -0.1],                # Bound, reverse\n            [-0.1, 0.0, 0.1],                # Unbound, forward\n            [0.1, 0.0, -0.1]                 # Unbound, reverse\n        ),\n        # Case 3\n        (\n            [-5.5, -4.5, -5.0],              # Bound, forward\n            [4.5, 5.5, 5.0],                 # Bound, reverse\n            [-4.9, -4.7, -4.8],              # Unbound, forward\n            [4.7, 4.9, 4.8]                  # Unbound, reverse\n        ),\n    ]\n\n    results = []\n    for case in test_cases:\n        # Unpack data for the current case\n        bound_fwd, bound_rev, unbound_fwd, unbound_rev = case\n\n        # Convert lists to numpy arrays for efficient computation\n        bound_fwd_np = np.array(bound_fwd)\n        bound_rev_np = np.array(bound_rev)\n        unbound_fwd_np = np.array(unbound_fwd)\n        unbound_rev_np = np.array(unbound_rev)\n\n        # Calculate free energy change for the bound state\n        dG_bound = solve_bar(bound_fwd_np, bound_rev_np, beta)\n\n        # Calculate free energy change for the unbound state\n        dG_unbound = solve_bar(unbound_fwd_np, unbound_rev_np, beta)\n\n        # Calculate the final binding free energy shift\n        ddG_bind = dG_bound - dG_unbound\n        \n        # Append the result formatted to three decimal places\n        results.append(f\"{ddG_bind:.3f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n\n```", "id": "2448843"}]}