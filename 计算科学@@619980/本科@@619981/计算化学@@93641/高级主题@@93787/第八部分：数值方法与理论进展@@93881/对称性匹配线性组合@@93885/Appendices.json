{"hands_on_practices": [{"introduction": "理论学习之后，最好的巩固方式莫过于亲手实践。这个练习将引导您完成一个基础但至关重要的任务：在一个简单的 $C_{2v}$ 对称性分子中，直接应用投影算符公式来构建一个对称性匹配线性组合（SALC）。通过这个练习，您将熟悉投影算符的基本操作机制，这是利用对称性简化量子化学计算的第一步。[@problem_id:2917493]", "problem": "考虑一个点群为 $C_{2v}$ 的弯曲三原子分子，它含有两个等价的氢 $1s$ 轨道，标记为 $\\chi_{1s}(\\mathrm{H}_1)$ 和 $\\chi_{1s}(\\mathrm{H}_2)$。在氢轨道系数基 $\\{ \\chi_{1s}(\\mathrm{H}_1), \\chi_{1s}(\\mathrm{H}_2) \\}$ 中进行计算，线性组合由一个系数矢量 $(c_1, c_2)$ 表示。$C_{2v}$ 操作作用于氢的标号，或者使每个氢保持不变，或者交换 $1 \\leftrightarrow 2$，具体如下：恒等操作 $E$ 使两者保持不变；$C_2$ 旋转交换 $\\mathrm{H}_1$ 和 $\\mathrm{H}_2$；分子平面内的镜面 $\\sigma_v$ 使两者保持不变；垂直于分子平面的镜面 $\\sigma_v'$ 交换 $\\mathrm{H}_1$ 和 $\\mathrm{H}_2$。令 $R(g)$ 表示操作 $g$ 在此基下的 $2\\times 2$ 矩阵表示。\n\n使用 $C_{2v}$ 的全对称不可约表示 $A_1$ 的投影算符定义（其维数为 $1$，对所有群元的特征标均为 $+1$），将\n$$\nP^{(A_1)} \\;=\\; \\frac{1}{4} \\sum_{g \\in C_{2v}} R(g)\n$$\n应用于系数矢量 $(1,1)$，以构建 $A_1$ 对称性匹配线性组合（SALC）。然后，相对于标准欧几里得内积对所得矢量进行归一化。将最终的归一化系数矢量表示为单个行矢量。无需四舍五入，也无需单位。", "solution": "问题陈述需进行验证。\n\n**步骤 1：提取已知条件**\n- **体系：** 一个点群为 $C_{2v}$ 的弯曲三原子分子。\n- **基函数：** 两个等价的氢 $1s$ 轨道，$\\chi_{1} \\equiv \\chi_{1s}(\\mathrm{H}_1)$ 和 $\\chi_{2} \\equiv \\chi_{1s}(\\mathrm{H}_2)$。\n- **矢量表示：** 线性组合 $c_1 \\chi_1 + c_2 \\chi_2$ 由系数矢量 $(c_1, c_2)$ 表示。\n- **对基函数作用的群操作：**\n    - $E$：恒等操作，使 $\\mathrm{H}_1, \\mathrm{H}_2$ 保持不变。\n    - $C_2$：旋转操作，交换 $\\mathrm{H}_1 \\leftrightarrow \\mathrm{H}_2$。\n    - $\\sigma_v$：包含分子的镜面，使 $\\mathrm{H}_1, \\mathrm{H}_2$ 保持不变。\n    - $\\sigma_v'$：垂直于分子的镜面，交换 $\\mathrm{H}_1 \\leftrightarrow \\mathrm{H}_2$。\n- **矩阵表示：** $R(g)$ 表示操作 $g$ 在基 $\\{\\chi_1, \\chi_2\\}$ 下的 $2 \\times 2$ 矩阵。\n- **投影算符：** 对于 $A_1$ 不可约表示，算符为 $P^{(A_1)} = \\frac{1}{4} \\sum_{g \\in C_{2v}} R(g)$。\n- **任务：** 将 $P^{(A_1)}$ 应用于矢量 $(1,1)$，然后对所得矢量进行归一化。\n\n**步骤 2：使用提取的已知条件进行验证**\n该问题被评估为**有效**。这是一个在量子化学中应用群论的标准的、有科学依据的问题。关于 $C_{2v}$ 点群及其对一对等价原子轨道作用的描述是正确的。所提供的用于全对称不可约表示的投影算符公式是正确的。该问题提法恰当、无歧义，并包含了得到唯一解所需的所有必要信息。\n\n**步骤 3：结论与行动**\n问题有效。将构建解答。\n\n解答过程遵循一系列逻辑步骤。首先，我们必须构建 $C_{2v}$ 点群中四个对称操作 $g$ 中的每一个的矩阵表示 $R(g)$，这些操作作用于与 $\\chi_1$ 和 $\\chi_2$ 对应的基矢量。在基 $\\{\\chi_1, \\chi_2\\}$ 中，基矢量表示为 $\\chi_1 \\rightarrow \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$ 和 $\\chi_2 \\rightarrow \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}$。\n\n1.  **恒等操作, $E$：** 此操作使两个轨道都保持不变：$E\\chi_1 = \\chi_1$ 和 $E\\chi_2 = \\chi_2$。\n    其矩阵表示是单位矩阵：\n    $$R(E) = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}$$\n\n2.  **$C_2$ 旋转：** 此操作交换两个轨道：$C_2\\chi_1 = \\chi_2$ 和 $C_2\\chi_2 = \\chi_1$。\n    其矩阵表示是一个置换矩阵：\n    $$R(C_2) = \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}$$\n\n3.  **$\\sigma_v$ 镜面（在分子平面内）：** 此操作使两个轨道都保持不变：$\\sigma_v\\chi_1 = \\chi_1$ 和 $\\sigma_v\\chi_2 = \\chi_2$。\n    其矩阵表示与 $E$ 的相同：\n    $$R(\\sigma_v) = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}$$\n\n4.  **$\\sigma_v'$ 镜面（垂直于分子平面）：** 此操作交换两个轨道：$\\sigma_v'\\chi_1 = \\chi_2$ 和 $\\sigma_v'\\chi_2 = \\chi_1$。\n    其矩阵表示与 $C_2$ 的相同：\n    $$R(\\sigma_v') = \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}$$\n\n接下来，我们使用给定的公式构建投影算符 $P^{(A_1)}$，这需要对这些矩阵求和。$C_{2v}$ 群的阶为 $h=4$。\n$$P^{(A_1)} = \\frac{1}{4} \\sum_{g \\in C_{2v}} R(g) = \\frac{1}{4} \\left[ R(E) + R(C_2) + R(\\sigma_v) + R(\\sigma_v') \\right]$$\n代入矩阵：\n$$P^{(A_1)} = \\frac{1}{4} \\left[ \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} + \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix} + \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} + \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix} \\right]$$\n对括号内的矩阵求和：\n$$P^{(A_1)} = \\frac{1}{4} \\begin{pmatrix} 1+0+1+0 & 0+1+0+1 \\\\ 0+1+0+1 & 1+0+1+0 \\end{pmatrix} = \\frac{1}{4} \\begin{pmatrix} 2 & 2 \\\\ 2 & 2 \\end{pmatrix}$$\n化简算符的表达式：\n$$P^{(A_1)} = \\begin{pmatrix} \\frac{1}{2} & \\frac{1}{2} \\\\ \\frac{1}{2} & \\frac{1}{2} \\end{pmatrix}$$\n\n现在，我们将此算符应用于给定的系数矢量 $\\mathbf{v} = (1,1)$，为进行矩阵乘法，将其写为列矢量：\n$$\\mathbf{v} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}$$\n投影后的矢量，我们记为 $\\mathbf{v}'$，是：\n$$\\mathbf{v}' = P^{(A_1)} \\mathbf{v} = \\begin{pmatrix} \\frac{1}{2} & \\frac{1}{2} \\\\ \\frac{1}{2} & \\frac{1}{2} \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} \\frac{1}{2}(1) + \\frac{1}{2}(1) \\\\ \\frac{1}{2}(1) + \\frac{1}{2}(1) \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}$$\n得到的系数矢量是 $(1,1)$。这个结果是预料之中的，因为起始矢量对应于组合 $\\chi_1 + \\chi_2$，该组合已经是完全对称的，因此属于 $A_1$ 表示。\n\n最后一步是相对于标准欧几里得内积对所得矢量 $\\mathbf{v}' = (1,1)$ 进行归一化。其模 $\\|\\mathbf{v}'\\|$ 计算如下：\n$$\\|\\mathbf{v}'\\| = \\sqrt{1^2 + 1^2} = \\sqrt{2}$$\n归一化常数是模的倒数，$N = \\frac{1}{\\|\\mathbf{v}'\\|} = \\frac{1}{\\sqrt{2}}$。\n归一化矢量 $\\mathbf{v}_{\\text{norm}}$ 通过将 $\\mathbf{v}'$ 乘以归一化常数 $N$ 得到：\n$$\\mathbf{v}_{\\text{norm}} = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} \\frac{1}{\\sqrt{2}} \\\\ \\frac{1}{\\sqrt{2}} \\end{pmatrix}$$\n问题要求将最终的归一化系数矢量表示为单个行矢量。", "answer": "$$\n\\boxed{\\begin{pmatrix} \\frac{1}{\\sqrt{2}} & \\frac{1}{\\sqrt{2}} \\end{pmatrix}}\n$$", "id": "2917493"}, {"introduction": "在掌握了投影算符的基本应用后，让我们来挑战一个更接近真实研究场景的复杂问题。这个练习将我们带到一个具有更高对称性（$D_{3h}$ 点群）的分子，并要求我们处理两种不同类型的配体轨道：$\\sigma$ 轨道和 $\\pi$ 轨道。它引入了在构建 SALC 之前必须完成的关键一步——确定给定原子轨道基组所生成的简约表示，并最终对得到的 SALC 进行归一化，从而让您全面掌握使用群论分析分子轨道的工作流程。[@problem_id:2463214]", "problem": "考虑平面三角形分子 $BCl_3$，其中硼原子位于原点，三个氯原子位于以原点为中心的 $xy$ 平面内的一个等边三角形的顶点上。该分子的点群为 $D_{3h}$，群阶 $h=12$，其类为 $\\{E,\\,2C_3,\\,3C_2',\\,\\sigma_h,\\,2S_3,\\,3\\sigma_v\\}$。$D_{3h}$ 点群的不可约表示及其特征标如下：\n- $A_1'$: $(1,\\,1,\\,1,\\,1,\\,1,\\,1)$\n- $A_2'$: $(1,\\,1,\\,-1,\\,1,\\,1,\\,-1)$\n- $E'$: $(2,\\,-1,\\,0,\\,2,\\,-1,\\,0)$\n- $A_1''$: $(1,\\,1,\\,1,\\,-1,\\,-1,\\,-1)$\n- $A_2''$: $(1,\\,1,\\,-1,\\,-1,\\,-1,\\,1)$\n- $E''$: $(2,\\,-1,\\,0,\\,-2,\\,1,\\,0)$\n\n定义两组各包含三个以配体为中心、相互正交归一的函数：\n- $\\{\\sigma_1,\\,\\sigma_2,\\,\\sigma_3\\}$，其中每个 $\\sigma_i$ 定域在一个氯原子上，并沿着 B–Cl 键方向，用于描述向硼的 $\\sigma$ 成键贡献。\n- $\\{p_{z,1},\\,p_{z,2},\\,p_{z,3}\\}$，其中每个 $p_{z,i}$ 是氯原子上垂直于分子平面的离面 p 型轨道（$z$ 轴垂直于 $xy$ 平面）。\n\n通过确定每组基函数生成的可约表示，并将其约化为不可约表示，来构建由每组基函数所张成的对称性匹配线性组合（Symmetry-Adapted Linear Combinations, SALCs）。对于每组基函数，在其宇称类中找出全对称的 SALC（即，对于面内 $\\sigma$ 集合，找出变换行为符合 $A_1'$ 的 SALC；对于离面 $\\pi$ 型集合，找出变换行为符合 $A_2''$ 的 SALC）。将这两个 SALC 分别写成归一化形式 $c \\sum_{i=1}^{3} \\phi_i$，并给出明确的归一化常数 $c$。\n\n最后，计算这两个归一化常数的乘积。以单个精确数值的形式给出最终答案，不要包含单位。", "solution": "首先通过检查题目的各组成部分来验证其有效性。\n\n**步骤 1：提取已知条件**\n- 分子：平面三角形 $BCl_3$。\n- 几何构型：硼原子位于原点，三个氯原子位于以原点为中心的 $xy$ 平面内的一个等边三角形的顶点上。\n- 分子点群：$D_{3h}$。\n- 群阶：$h=12$。\n- 类：$\\{E,\\,2C_3,\\,3C_2',\\,\\sigma_h,\\,2S_3,\\,3\\sigma_v\\}$。\n- $D_{3h}$ 的不可约表示（Irreps）和特征标：\n    - $A_1'$: $(1,\\,1,\\,1,\\,1,\\,1,\\,1)$\n    - $A_2'$: $(1,\\,1,\\,-1,\\,1,\\,1,\\,-1)$\n    - $E'$: $(2,\\,-1,\\,0,\\,2,\\,-1,\\,0)$\n    - $A_1''$: $(1,\\,1,\\,1,\\,-1,\\,-1,\\,-1)$\n    - $A_2''$: $(1,\\,1,\\,-1,\\,-1,\\,-1,\\,1)$\n    - $E''$: $(2,\\,-1,\\,0,\\,-2,\\,1,\\,0)$\n- 基组：\n    - $\\{\\sigma_1,\\,\\sigma_2,\\,\\sigma_3\\}$：配体 $\\sigma$ 成键轨道的正交归一基组。\n    - $\\{p_{z,1},\\,p_{z,2},\\,p_{z,3}\\}$：离面配体 $p_z$ 轨道的正交归一基组。\n- 任务：为每个基组构建指定的 SALC，确定它们的归一化常数，并计算这些常数的乘积。\n\n**步骤 2：使用提取的已知条件进行验证**\n该问题具有科学依据、提法恰当且客观。这是群论在分子轨道理论中的一个标准应用，特别是用于构建对称性匹配线性组合（SALCs）。分子 $\\text{BCl}_3$、其 $D_{3h}$ 点群、所给的特征标表以及所选的基组对于此类分析都是标准且正确的。该问题内容自洽，提供了推导唯一、可验证解所需的所有信息。不存在违反科学原理、逻辑不一致或含糊不清之处。\n\n**结论：** 问题有效。\n\n**解答**\n\n该任务要求我们求出两个特定 SALC 的归一化常数，一个由平面三角形 $\\text{BCl}_3$ 分子（点群 $D_{3h}$）中氯配体的一组面内 $\\sigma$ 轨道导出，另一个由一组离面 $p_z$ 轨道导出。\n\n**第一部分：由 $\\sigma$ 轨道导出的 SALC**\n\n首先，我们考虑由三个正交归一的 $\\sigma$ 轨道组成的基组 $\\{\\sigma_1, \\sigma_2, \\sigma_3\\}$，每个轨道都沿着一个 $\\text{B}-\\text{Cl}$ 键的方向。我们必须确定由该基组生成的可约表示 $\\Gamma_{\\sigma}$。对于一个对称操作 $R$，其特征标 $\\chi_{\\sigma}(R)$ 是通过计算在该操作下保持不变的基函数数量得到的。\n\n- $\\hat{E}$：恒等操作使所有 3 个轨道保持不动。$\\chi_{\\sigma}(E) = 3$。\n- $\\hat{C}_3$：绕 $z$ 轴旋转 $120^{\\circ}$ 会使所有三个轨道互换位置，因此没有轨道留在原位。$\\chi_{\\sigma}(C_3) = 0$。\n- $\\hat{C}_2'$：绕通过 $\\text{B}$ 原子和一个 $\\text{Cl}$ 原子（例如 $\\text{Cl}_1$）的轴旋转 $180^{\\circ}$。这会使 $\\sigma_1$ 保持不变，而 $\\sigma_2$ 和 $\\sigma_3$ 互换位置。因此，有 1 个轨道不动。$\\chi_{\\sigma}(C_2') = 1$。\n- $\\hat{\\sigma}_h$：通过分子平面（$xy$ 平面）的反映。所有三个 $\\sigma$ 轨道都在此平面内，因此保持不动。$\\chi_{\\sigma}(\\sigma_h) = 3$。\n- $\\hat{S}_3$：一个瑕旋转，$\\hat{S}_3 = \\hat{\\sigma}_h \\hat{C}_3$。由于 $\\hat{C}_3$ 移动了所有轨道，没有轨道留在原位等待反映操作。$\\chi_{\\sigma}(S_3) = 0$。\n- $\\hat{\\sigma}_v$：通过一个包含 $\\text{B}-\\text{Cl}$ 键的竖直平面的反映。该平面与一个 $C_2'$ 轴重合。它使 1 个轨道保持不变，并使另外 2 个轨道互换位置。$\\chi_{\\sigma}(\\sigma_v) = 1$。\n\n因此，可约表示 $\\Gamma_{\\sigma}$ 的特征标向量为 $\\chi_{\\sigma} = (3, 0, 1, 3, 0, 1)$。\n\n接下来，我们使用约化公式将 $\\Gamma_{\\sigma}$ 约化为其组成的不可约表示：\n$$n_{\\Gamma} = \\frac{1}{h} \\sum_{R} N_R \\, \\chi_{\\Gamma}(R) \\, \\chi_{\\text{irrep}}(R)$$\n其中 $h=12$ 是群的阶，$N_R$ 是每个类中操作的数量。\n对于 $A_1'$：\n$$n_{A_1'} = \\frac{1}{12} [1(3)(1) + 2(0)(1) + 3(1)(1) + 1(3)(1) + 2(0)(1) + 3(1)(1)] = \\frac{1}{12} [3+3+3+3] = \\frac{12}{12} = 1$$\n对于 $E'$：\n$$n_{E'} = \\frac{1}{12} [1(3)(2) + 2(0)(-1) + 3(1)(0) + 1(3)(2) + 2(0)(-1) + 3(1)(0)] = \\frac{1}{12} [6+6] = \\frac{12}{12} = 1$$\n由于 $\\sigma_h$ 的特征标为正，所以不可能存在双撇号（例如 $A_1''$、$A_2''$、$E''$）的不可约表示。\n因此，约化结果为 $\\Gamma_{\\sigma} = A_1' \\oplus E'$。\n\n题目要求我们构建变换行为符合 $A_1'$ 的全对称 SALC。我们对一个基函数（例如 $\\sigma_1$）使用投影算符 $\\hat{P}^{(A_1')} \\propto \\sum_{R} \\chi_{A_1'}(R) \\hat{R}$。由于 $A_1'$ 的所有特征标都为 1，该投影算符将对 $\\sigma_1$ 应用所有群操作的结果求和。任何操作要么使 $\\sigma_1$ 保持不变，要么将其转换为 $\\sigma_2$ 或 $\\sigma_3$。最终的组合将是所有基函数的和。因此，未归一化的 SALC 为：\n$$\\Psi_{A_1'} = \\sigma_1 + \\sigma_2 + \\sigma_3$$\n为了归一化此 SALC，设 $\\Phi_1 = c_1(\\sigma_1 + \\sigma_2 + \\sigma_3)$。归一化条件为 $\\langle \\Phi_1 | \\Phi_1 \\rangle = 1$。鉴于基是正交归一的，即 $\\langle \\sigma_i | \\sigma_j \\rangle = \\delta_{ij}$：\n$$c_1^2 \\langle \\sigma_1 + \\sigma_2 + \\sigma_3 | \\sigma_1 + \\sigma_2 + \\sigma_3 \\rangle = 1$$\n$$c_1^2 (\\langle \\sigma_1|\\sigma_1\\rangle + \\langle \\sigma_2|\\sigma_2\\rangle + \\langle \\sigma_3|\\sigma_3\\rangle) = 1$$\n$$c_1^2 (1 + 1 + 1) = 1 \\implies 3c_1^2 = 1 \\implies c_1 = \\frac{1}{\\sqrt{3}}$$\n\n**第二部分：由 $p_z$ 轨道导出的 SALC**\n\n接下来，我们考虑由三个正交归一的离面轨道组成的基组 $\\{p_{z,1}, p_{z,2}, p_{z,3}\\}$。特征标 $\\chi_{p_z}(R)$ 是基函数在操作 $R$ 下的变换矩阵的迹。一个未移动但反号的轨道贡献 -1。\n\n- $\\hat{E}$：所有 3 个轨道都保持不变。$\\chi_{p_z}(E) = 3$。\n- $\\hat{C}_3$：所有 3 个轨道都发生互换。$\\chi_{p_z}(C_3) = 0$。\n- $\\hat{C}_2'$：一个轨道（$p_{z,1}$）未移动但反号（绕 $xy$ 平面内的轴旋转 $180^{\\circ}$ 使 $z \\to -z$）。它贡献 -1。另外两个轨道互换位置。$\\chi_{p_z}(C_2') = -1$。\n- $\\hat{\\sigma}_h$：通过 $xy$ 平面的反映使所有 3 个轨道反号（$z \\to -z$）。所有轨道都未移动。$\\chi_{p_z}(\\sigma_h) = 3 \\times (-1) = -3$。\n- $\\hat{S}_3$：所有 3 个轨道都发生互换。$\\chi_{p_z}(S_3) = 0$。\n- $\\hat{\\sigma}_v$：一个轨道（$p_{z,1}$）位于反映平面内且保持不变（该平面包含 $z$ 轴）。它贡献 +1。另外两个轨道互换位置。$\\chi_{p_z}(\\sigma_v) = 1$。\n\n$\\Gamma_{p_z}$ 的特征标向量是 $\\chi_{p_z} = (3, 0, -1, -3, 0, 1)$。$\\sigma_h$ 的负特征标表示该表示仅由双撇号的不可约表示构成。\n\n我们约化 $\\Gamma_{p_z}$：\n对于 $A_2''$：\n$$n_{A_2''} = \\frac{1}{12} [1(3)(1) + 2(0)(1) + 3(-1)(-1) + 1(-3)(-1) + 2(0)(-1) + 3(1)(1)]$$\n$$n_{A_2''} = \\frac{1}{12} [3 + 3 + 3 + 3] = \\frac{12}{12} = 1$$\n对于 $E''$：\n$$n_{E''} = \\frac{1}{12} [1(3)(2) + 2(0)(-1) + 3(-1)(0) + 1(-3)(-2) + 2(0)(1) + 3(1)(0)]$$\n$$n_{E''} = \\frac{1}{12} [6 + 6] = \\frac{12}{12} = 1$$\n约化结果为 $\\Gamma_{p_z} = A_2'' \\oplus E''$。\n\n题目要求我们找出对应于 $A_2''$ 不可约表示的 SALC。对 $p_{z,1}$ 应用投影算符 $\\hat{P}^{(A_2'')}$，得到一个和式，其中每个变换后的函数都由来自 $\\chi_{A_2''}=(1, 1, -1, -1, -1, 1)$ 的相应特征标加权。通过投影算符的详细应用可以表明，最终得到的是所有基函数的和。未归一化的 SALC 是：\n$$\\Psi_{A_2''} = p_{z,1} + p_{z,2} + p_{z,3}$$\n为了归一化此 SALC，设 $\\Phi_2 = c_2(p_{z,1} + p_{z,2} + p_{z,3})$。基组是正交归一的，所以 $\\langle p_{z,i} | p_{z,j} \\rangle = \\delta_{ij}$。\n$$c_2^2 \\langle p_{z,1} + p_{z,2} + p_{z,3} | p_{z,1} + p_{z,2} + p_{z,3} \\rangle = 1$$\n$$c_2^2 (\\langle p_{z,1}|p_{z,1}\\rangle + \\langle p_{z,2}|p_{z,2}\\rangle + \\langle p_{z,3}|p_{z,3}\\rangle) = 1$$\n$$c_2^2 (1 + 1 + 1) = 1 \\implies 3c_2^2 = 1 \\implies c_2 = \\frac{1}{\\sqrt{3}}$$\n\n**最终计算**\n\n问题要求计算两个归一化常数 $c_1$ 和 $c_2$ 的乘积。\n$$c_1 = \\frac{1}{\\sqrt{3}}$$\n$$c_2 = \\frac{1}{\\sqrt{3}}$$\n乘积为：\n$$c_1 \\times c_2 = \\frac{1}{\\sqrt{3}} \\times \\frac{1}{\\sqrt{3}} = \\frac{1}{3}$$\n这就是最终答案。", "answer": "$$\\boxed{\\frac{1}{3}}$$", "id": "2463214"}, {"introduction": "手动计算对于建立直观理解至关重要，但在现代化学研究中，这些方法的真正威力来自于计算实现。这项终极练习旨在搭建理论与实践之间的桥梁，要求您将构建 SALC 的抽象数学框架转化为一个具体、可执行的计算机程序。通过编写代码来自动化整个流程，您将从算法层面深刻地理解群论在计算化学中的核心作用，并获得解决更复杂问题的实用技能。[@problem_id:2463215]", "problem": "编写一个完整的程序。该程序需根据一个给定的有限群及其特征标表，以及其通过各对称操作的原子索引映射在有限原子基上指定的作用，为所有不可约表示构建投影算符。对于每个测试用例，程序需报告给定置换表示中每个不可约表示的重数。程序必须使用以下数学定义。\n\n设群为 $G$，其阶为 $h = |G|$。设原子基有 $n$ 个函数，索引为 $\\{0,1,\\dots,n-1\\}$。对于每个对称操作 $g \\in G$，给定一个映射 $\\sigma_g : \\{0,1,\\dots,n-1\\} \\to \\{0,1,\\dots,n-1\\}$ 来描述基索引的置换。通过作用 $D(g)\\,\\mathbf{e}_i = \\mathbf{e}_{\\sigma_g(i)}$ 在该基上定义表示矩阵 $D(g)$，其中 $\\mathbf{e}_i$ 是 $\\mathbb{R}^n$ 中的第 $i$ 个标准基列向量。对于每个维数为 $l_{\\Gamma}$、特征标为 $\\chi_{\\Gamma}(g)$ 的不可约表示 $\\Gamma$，定义投影算符\n$$\nP^{(\\Gamma)} \\;=\\; \\frac{l_{\\Gamma}}{h} \\sum_{g\\in G} \\chi_{\\Gamma}(g)^{\\ast}\\, D(g).\n$$\n对于每个 $\\Gamma$，其在给定表示中的重数 $m_{\\Gamma}$ 是整数\n$$\nm_{\\Gamma} \\;=\\; \\frac{1}{l_{\\Gamma}}\\,\\mathrm{tr}\\!\\left(P^{(\\Gamma)}\\right).\n$$\n\n对于下方的每个测试用例，您的程序必须构建所有的 $D(g)$ 和所有的 $P^{(\\Gamma)}$，然后计算并报告该测试用例中按指定不可约表示顺序排列的重数列表 $[m_{\\Gamma_1}, m_{\\Gamma_2}, \\dots]$。不涉及物理单位。本任务不要求处理角度（如果有）。\n\n测试套件。对于每个测试用例，操作均按固定顺序列出，所有特征标列表必须按相同顺序解释。所有索引映射都是从零开始的。\n\n- 测试用例 1 (点群 $C_{2v}$，阶 $h = 4$)：\n  - 操作顺序：$\\left[E,\\, C_2,\\, \\sigma_v(xz),\\, \\sigma_v'(yz)\\right]$。\n  - 基函数数量：$n = 3$，索引为 $\\{0,1,2\\}$。\n  - 每个操作的原子映射：\n    - $E$: $(0,1,2)$，\n    - $C_2$: $(0,1,2)$，\n    - $\\sigma_v(xz)$: $(0,2,1)$，\n    - $\\sigma_v'(yz)$: $(0,2,1)$。\n  - 不可约表示和特征标：\n    - $\\Gamma_1 = A_1$：$l_{A_1} = 1$，特征标 $[1,\\,1,\\,1,\\,1]$，\n    - $\\Gamma_2 = A_2$：$l_{A_2} = 1$，特征标 $[1,\\,1,\\,-1,\\,-1]$，\n    - $\\Gamma_3 = B_1$：$l_{B_1} = 1$，特征标 $[1,\\,-1,\\,1,\\,-1]$，\n    - $\\Gamma_4 = B_2$：$l_{B_2} = 1$，特征标 $[1,\\,-1,\\,-1,\\,1]$。\n  - 此用例的所需输出：列表 $\\left[m_{A_1}, m_{A_2}, m_{B_1}, m_{B_2}\\right]$。\n\n- 测试用例 2 (点群 $C_{3v}$，阶 $h = 6$)：\n  - 操作顺序：$\\left[E,\\, C_3,\\, C_3^2,\\, \\sigma_v^{(1)},\\, \\sigma_v^{(2)},\\, \\sigma_v^{(3)}\\right]$。\n  - 基函数数量：$n = 3$，索引为 $\\{0,1,2\\}$。\n  - 每个操作的原子映射：\n    - $E$: $(0,1,2)$，\n    - $C_3$: $(1,2,0)$，\n    - $C_3^2$: $(2,0,1)$，\n    - $\\sigma_v^{(1)}$: $(0,2,1)$，\n    - $\\sigma_v^{(2)}$: $(2,1,0)$，\n    - $\\sigma_v^{(3)}$: $(1,0,2)$。\n  - 不可约表示和特征标：\n    - $\\Gamma_1 = A_1$：$l_{A_1} = 1$，特征标 $[1,\\,1,\\,1,\\,1,\\,1,\\,1]$，\n    - $\\Gamma_2 = A_2$：$l_{A_2} = 1$，特征标 $[1,\\,1,\\,1,\\,-1,\\,-1,\\,-1]$，\n    - $\\Gamma_3 = E$：$l_{E} = 2$，特征标 $[2,\\,-1,\\,-1,\\,0,\\,0,\\,0]$。\n  - 此用例的所需输出：列表 $\\left[m_{A_1}, m_{A_2}, m_{E}\\right]$。\n\n- 测试用例 3 (点群 $C_{1}$，阶 $h = 1$)：\n  - 操作顺序：$\\left[E\\right]$。\n  - 基函数数量：$n = 4$，索引为 $\\{0,1,2,3\\}$。\n  - 每个操作的原子映射：\n    - $E$: $(0,1,2,3)$。\n  - 不可约表示和特征标：\n    - $\\Gamma_1 = A$：$l_{A} = 1$，特征标 $[1]$。\n  - 此用例的所需输出：列表 $\\left[m_{A}\\right]$。\n\n最终输出格式。您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。列表中的每个元素对应上方给出的一个测试用例，且元素本身也是一个表示不可约表示重数的方括号括起的逗号分隔整数列表，顺序与该测试用例指定的一致。例如，一个包含三个测试用例的有效输出格式形如“[ [a,b,c], [d,e], [f] ]”，但不含空格，即“[[a,b,c],[d,e],[f]]”。", "solution": "该问题已经过严格验证，被认定为有效。这是一个计算群论中定义明确的问题，为获得唯一、可验证的解提供了所有必需的数据和定义。其基本原理是表示论在化学体系中应用的标准方法。在给定测试用例的数据中，任何感知到的物理不一致性，例如测试用例1中 $C_2$ 操作的映射，都是无关紧要的。该问题由所提供的代数结构（即映射和特征标表）定义，而非由任何特定的几何实现定义。操作的标签仅用于将映射与特征标关联起来。我们现在开始求解。\n\n任务是计算有限群 $G$ 的给定置换表示中，每个不可约表示（irrep） $\\Gamma$ 的重数 $m_{\\Gamma}$。该过程由一系列精确的数学步骤定义。\n\n首先，对于一个由 $n$ 个函数构成的基，我们为每个群操作 $g \\in G$ 构建矩阵表示 $D$。$g$ 在基索引上的作用由一个置换 $\\sigma_g: \\{0, 1, \\dots, n-1\\} \\to \\{0, 1, \\dots, n-1\\}$ 给出。矩阵 $D(g)$ 由其对标准基列向量 $\\mathbf{e}_i \\in \\mathbb{R}^n$ 的作用定义为 $D(g)\\,\\mathbf{e}_i = \\mathbf{e}_{\\sigma_g(i)}$。这意味着 $n \\times n$ 矩阵 $D(g)$ 的第 $i$ 列是向量 $\\mathbf{e}_{\\sigma_g(i)}$。因此，矩阵元素为 $(D(g))_{ji} = \\delta_{j, \\sigma_g(i)}$，其中 $\\delta$ 是克罗内克δ函数。\n\n其次，对于每个不可约表示 $\\Gamma$，我们构建投影算符 $P^{(\\Gamma)}$。所提供的定义是：\n$$\nP^{(\\Gamma)} \\;=\\; \\frac{l_{\\Gamma}}{h} \\sum_{g\\in G} \\chi_{\\Gamma}(g)^{\\ast}\\, D(g)\n$$\n其中，$h = |G|$ 是群的阶，$l_{\\Gamma}$ 是不可约表示 $\\Gamma$ 的维数，$\\chi_{\\Gamma}(g)$ 是操作 $g$ 在该不可约表示中的特征标。由于所提供的特征标均为实数，复共轭 $\\chi_{\\Gamma}(g)^{\\ast}$ 就是 $\\chi_{\\Gamma}(g)$ 本身。这是表示矩阵 $D(g)$ 的一个线性组合，权重为其各自的特征标。\n\n第三，我们计算重数 $m_{\\Gamma}$。重数是不可约表示 $\\Gamma$ 包含在（可约的）置换表示中的次数。它由投影算符的迹计算得出：\n$$\nm_{\\Gamma} \\;=\\; \\frac{1}{l_{\\Gamma}}\\,\\mathrm{tr}\\!\\left(P^{(\\Gamma)}\\right)\n$$\n将 $P^{(\\Gamma)}$ 的定义代入，可将其简化为著名的约化公式，该公式可用于验证：\n$$\nm_{\\Gamma} = \\frac{1}{l_{\\Gamma}}\\,\\mathrm{tr}\\!\\left(\\frac{l_{\\Gamma}}{h} \\sum_{g\\in G} \\chi_{\\Gamma}(g)^{\\ast}\\, D(g)\\right) = \\frac{1}{h} \\sum_{g\\in G} \\chi_{\\Gamma}(g)^{\\ast}\\, \\mathrm{tr}(D(g))\n$$\n置换矩阵的迹 $\\mathrm{tr}(D(g))$ 是置换 $\\sigma_g$ 的不动点数量。然而，问题陈述要求在计算其迹之前，必须显式地构建 $P^{(\\Gamma)}$。我们将遵循这一规定流程。$m_{\\Gamma}$ 的结果必须是整数。\n\n我们现在将此流程应用于每个测试用例。\n\n**测试用例 1：点群 $C_{2v}$**\n- 群阶 $h = 4$。\n- 基函数数量 $n = 3$。\n- 操作：$\\left[E,\\, C_2,\\, \\sigma_v(xz),\\, \\sigma_v'(yz)\\right]$。\n- 原子映射：$E \\to (0,1,2)$， $C_2 \\to (0,1,2)$， $\\sigma_v(xz) \\to (0,2,1)$， $\\sigma_v'(yz) \\to (0,2,1)$。\n- 相应的 $3 \\times 3$ 表示矩阵为：\n$$\nD(E) = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix}, \\quad D(C_2) = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix}\n$$\n$$\nD(\\sigma_v(xz)) = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 0 & 1 \\\\ 0 & 1 & 0 \\end{pmatrix}, \\quad D(\\sigma_v'(yz)) = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 0 & 1 \\\\ 0 & 1 & 0 \\end{pmatrix}\n$$\n- 对于不可约表示 $\\Gamma_1 = A_1$，$l_{A_1} = 1$，特征标为 $[1, 1, 1, 1]$：\n$$\nP^{(A_1)} = \\frac{1}{4} \\left[ 1 \\cdot D(E) + 1 \\cdot D(C_2) + 1 \\cdot D(\\sigma_v(xz)) + 1 \\cdot D(\\sigma_v'(yz)) \\right]\n$$\n$$\nP^{(A_1)} = \\frac{1}{4} \\left( \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} + \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} + \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 0 & 1 \\\\ 0 & 1 & 0 \\end{pmatrix} + \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 0 & 1 \\\\ 0 & 1 & 0 \\end{pmatrix} \\right) = \\frac{1}{4} \\begin{pmatrix} 4 & 0 & 0 \\\\ 0 & 2 & 2 \\\\ 0 & 2 & 2 \\end{pmatrix} = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 0.5 & 0.5 \\\\ 0 & 0.5 & 0.5 \\end{pmatrix}\n$$\n于是，$\\mathrm{tr}(P^{(A_1)}) = 1 + 0.5 + 0.5 = 2$。\n重数为 $m_{A_1} = \\frac{1}{l_{A_1}} \\mathrm{tr}(P^{(A_1)}) = \\frac{1}{1}(2) = 2$。\n\n- 对其他不可约表示遵循此流程：\n    - 对于 $\\Gamma_2 = A_2$ ($l_{A_2}=1$, 特征标 $[1,1,-1,-1]$)：$\\mathrm{tr}(P^{(A_2)}) = 1$，因此 $m_{A_2} = 1$。\n    - 对于 $\\Gamma_3 = B_1$ ($l_{B_1}=1$, 特征标 $[1,-1,1,-1]$)：$\\mathrm{tr}(P^{(B_1)}) = 0$，因此 $m_{B_1} = 0$。\n    - 对于 $\\Gamma_4 = B_2$ ($l_{B_2}=1$, 特征标 $[1,-1,-1,1]$)：$\\mathrm{tr}(P^{(B_2)}) = 0$，因此 $m_{B_2} = 0$。\n重数列表为 $[2, 1, 0, 0]$。\n\n**测试用例 2：点群 $C_{3v}$**\n- 群阶 $h = 6$。\n- 基函数数量 $n = 3$。\n- 原子映射对应于 $3$ 个顶点的置换。\n- 不可约表示为 $A_1$, $A_2$ 和 $E$。\n- 应用相同的方法：\n    - 对于 $\\Gamma_1 = A_1$ ($l_{A_1}=1$)：$\\mathrm{tr}(P^{(A_1)}) = 1$，因此 $m_{A_1} = 1$。\n    - 对于 $\\Gamma_2 = A_2$ ($l_{A_2}=1$)：$\\mathrm{tr}(P^{(A_2)}) = 0$，因此 $m_{A_2} = 0$。\n    - 对于 $\\Gamma_3 = E$ ($l_E=2$)：$\\mathrm{tr}(P^{(E)}) = 2$，因此 $m_E = \\frac{1}{2}(2) = 1$。\n重数列表为 $[1, 0, 1]$。\n\n**测试用例 3：点群 $C_1$**\n- 群阶 $h = 1$。\n- 基函数数量 $n = 4$。\n- 单个操作是单位操作 $E$，它将所有 $4$ 个索引映射到自身。\n- 单个不可约表示为 $A$。对于 $\\Gamma_1 = A$ ($l_A=1$, 特征标 $[1]$)：\n$$\nP^{(A)} = \\frac{1}{1} [1 \\cdot D(E)] = D(E) = I_4\n$$\n其中 $I_4$ 是 $4 \\times 4$ 单位矩阵。\n于是，$\\mathrm{tr}(P^{(A)}) = \\mathrm{tr}(I_4) = 4$。\n重数为 $m_A = \\frac{1}{l_A} \\mathrm{tr}(P^{(A)}) = \\frac{1}{1}(4) = 4$。\n重数列表为 $[4]$。\n\n这些计算将在提供的 Python 环境中实现。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the multiplicities of irreducible representations for given test cases\n    based on group representation theory.\n    \"\"\"\n    test_cases = [\n        {\n            \"name\": \"C2v\",\n            \"h\": 4,\n            \"n\": 3,\n            \"op_mappings\": [\n                (0, 1, 2),  # E\n                (0, 1, 2),  # C2\n                (0, 2, 1),  # sigma_v(xz)\n                (0, 2, 1),  # sigma_v'(yz)\n            ],\n            \"irreps\": [\n                {\"name\": \"A1\", \"dim\": 1, \"chars\": [1, 1, 1, 1]},\n                {\"name\": \"A2\", \"dim\": 1, \"chars\": [1, 1, -1, -1]},\n                {\"name\": \"B1\", \"dim\": 1, \"chars\": [1, -1, 1, -1]},\n                {\"name\": \"B2\", \"dim\": 1, \"chars\": [1, -1, -1, 1]},\n            ],\n        },\n        {\n            \"name\": \"C3v\",\n            \"h\": 6,\n            \"n\": 3,\n            \"op_mappings\": [\n                (0, 1, 2),  # E\n                (1, 2, 0),  # C3\n                (2, 0, 1),  # C3^2\n                (0, 2, 1),  # sigma_v(1)\n                (2, 1, 0),  # sigma_v(2)\n                (1, 0, 2),  # sigma_v(3)\n            ],\n            \"irreps\": [\n                {\"name\": \"A1\", \"dim\": 1, \"chars\": [1, 1, 1, 1, 1, 1]},\n                {\"name\": \"A2\", \"dim\": 1, \"chars\": [1, 1, 1, -1, -1, -1]},\n                {\"name\": \"E\", \"dim\": 2, \"chars\": [2, -1, -1, 0, 0, 0]},\n            ],\n        },\n        {\n            \"name\": \"C1\",\n            \"h\": 1,\n            \"n\": 4,\n            \"op_mappings\": [\n                (0, 1, 2, 3), # E\n            ],\n            \"irreps\": [\n                {\"name\": \"A\", \"dim\": 1, \"chars\": [1]},\n            ],\n        },\n    ]\n\n    all_results = []\n    for case in test_cases:\n        h = case[\"h\"]\n        n = case[\"n\"]\n        op_mappings = case[\"op_mappings\"]\n        irreps = case[\"irreps\"]\n        \n        # 1. Construct representation matrices D(g) for all g in G\n        D_matrices = []\n        for sigma_g in op_mappings:\n            D_g = np.zeros((n, n), dtype=float)\n            for i in range(n):\n                # The action D(g)e_i = e_{sigma_g(i)} means the i-th column\n                # of D(g) is the basis vector e_{sigma_g(i)}.\n                D_g[sigma_g[i], i] = 1.0\n            D_matrices.append(D_g)\n        \n        case_multiplicities = []\n        for irrep in irreps:\n            l_gamma = irrep[\"dim\"]\n            chi_gamma = irrep[\"chars\"]\n            \n            # 2. Construct the projection operator P^(Gamma)\n            # P^(Gamma) = (l_Gamma / h) * sum_{g in G} chi_Gamma(g)* D(g)\n            P_gamma = np.zeros((n, n), dtype=float)\n            for i in range(h):\n                chi_g = chi_gamma[i]\n                D_g = D_matrices[i]\n                P_gamma += chi_g * D_g\n            \n            P_gamma *= l_gamma / h\n            \n            # 3. Compute the multiplicity m_Gamma\n            # m_Gamma = (1 / l_Gamma) * tr(P^(Gamma))\n            trace_P_gamma = np.trace(P_gamma)\n            \n            # Multiplicity must be an integer; round to handle potential float inaccuracies\n            m_gamma = int(round(trace_P_gamma / l_gamma))\n            case_multiplicities.append(m_gamma)\n            \n        # Format the result for this test case\n        all_results.append(repr(case_multiplicities).replace(\" \", \"\"))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(all_results)}]\")\n\nsolve()\n```", "id": "2463215"}]}