{"hands_on_practices": [{"introduction": "本练习是理解内禀反应坐标 (IRC) 的基础。通过在一个简单的一维双势阱上解析地求解 IRC 路径，我们可以将 IRC 的抽象定义——即质量加权坐标中的最陡下降路径——与具体的数学表达式直接联系起来。这个实践有助于阐明路径长度 $s$ 和我们熟悉的笛卡尔坐标 $x$ 之间的关系。[@problem_id:2899955]", "problem": "考虑一个由函数 $V(x) = (x^{2}-1)^{2}/4$ 定义的一维模型势能面，其原子质量参数为 $m=1$。驻点 $x=0$ 是过渡态，极小值点位于 $x=\\pm 1$。在内禀反应坐标 (IRC) 的形式体系中，路径被定义为在质量加权坐标下势能面上的最陡下降曲线。令 $q=\\sqrt{m}\\,x$ 表示质量加权坐标，令 $s$ 表示由线元 $\\mathrm{d}s^{2}=\\mathrm{d}q^{2}$ 定义的弧长参数，使得切向量满足 $|\\mathrm{d}q/\\mathrm{d}s|=1$，且路径方向处处与 $V$ 在 $q$ 坐标系下的负梯度对齐。\n\n仅从这些定义和给定的 $V(x)$ 出发，推导出一维情况下控制 IRC 的微分方程，并使用初始条件 $x(0)=0$ 对其进行积分，以获得连接过渡态与两个极小值点 $x=\\pm 1$ 的两个分支的显式表达式 $x(s)$。然后，将路径长度 $s$ 表示为笛卡尔坐标 $x$ 的函数，证明当 $m=1$ 时，它与 $x$ 的绝对值在一个常数因子内是重合的，并确定该常数。\n\n以对两个分支均有效的单一闭式表达式 $s(x)$ 的形式给出最终答案。无需单位。请勿四舍五入。", "solution": "首先对问题进行验证，以确保其科学基础扎实、适定且客观。所给问题陈述描述了理论化学中一个关于内禀反应坐标 (IRC) 的标准练习。它提供了一个一维势能面 $V(x) = (x^{2}-1)^{2}/4$、原子质量参数 $m=1$，以及对质量加权坐标 $q=\\sqrt{m}\\,x$ 和路径弧长 $s$ 的清晰定义。将 IRC 定义为质量加权坐标下的最陡下降路径是标准做法。所有提供的信息都是自洽且一致的。未发现科学或逻辑上的缺陷。因此，该问题被认定为**有效**，并将推导出其解法。\n\n内禀反应坐标 (IRC) 定义为在势能面上、以质量加权坐标追踪的最陡下降路径。此路径的切向量为 $\\mathrm{d}\\mathbf{q}/\\mathrm{d}s$，其中 $\\mathbf{q}$ 是质量加权坐标的矢量， $s$ 是弧长，该切向量与势能梯度的负值 $-\\nabla_q V$ 对齐。弧长 $s$ 的定义使得切向量为单位向量，即 $|\\mathrm{d}\\mathbf{q}/\\mathrm{d}s|=1$。这导出了 IRC 的基本方程：\n$$\n\\frac{\\mathrm{d}\\mathbf{q}}{\\mathrm{d}s} = -\\frac{\\nabla_q V}{|\\nabla_q V|}\n$$\n对于一维系统，矢量变为标量，梯度 $\\nabla_q$ 变为导数 $\\mathrm{d}/\\mathrm{d}q$。方程简化为：\n$$\n\\frac{\\mathrm{d}q}{\\mathrm{d}s} = -\\frac{\\mathrm{d}V/\\mathrm{d}q}{|\\mathrm{d}V/\\mathrm{d}q|} = -\\mathrm{sgn}\\left(\\frac{\\mathrm{d}V}{\\mathrm{d}q}\\right)\n$$\n其中 $\\mathrm{sgn}(\\cdot)$ 是符号函数。\n\n质量加权坐标 $q$ 通过 $q = \\sqrt{m}x$ 与笛卡尔坐标 $x$ 相关联。势能 $V$ 必须表示为 $q$ 的函数。将 $x=q/\\sqrt{m}$ 代入 $V(x)$ 的表达式中：\n$$\nV(q) = \\frac{1}{4} \\left( \\left(\\frac{q}{\\sqrt{m}}\\right)^{2} - 1 \\right)^{2} = \\frac{1}{4} \\left( \\frac{q^{2}}{m} - 1 \\right)^{2}\n$$\n接下来，我们计算 $V$ 对 $q$ 的导数：\n$$\n\\frac{\\mathrm{d}V}{\\mathrm{d}q} = \\frac{1}{4} \\cdot 2 \\left( \\frac{q^{2}}{m} - 1 \\right) \\cdot \\frac{2q}{m} = \\frac{q}{m} \\left( \\frac{q^{2}}{m} - 1 \\right) = \\frac{q(q^{2}-m)}{m^{2}}\n$$\n$\\mathrm{d}V/\\mathrm{d}q$ 的符号由项 $q(q^{2}-m)$ 决定，因为 $m^{2}$ 恒为正。用笛卡尔坐标 $x$ 表示，此项为 $\\sqrt{m}x(m x^{2} - m) = m^{3/2}x(x^{2}-1)$。由于 $m>0$，$\\mathrm{d}V/\\mathrm{d}q$ 的符号与 $x(x^{2}-1)$ 的符号相同。\n因此，该特定问题中 IRC 的微分方程为：\n$$\n\\frac{\\mathrm{d}q}{\\mathrm{d}s} = -\\mathrm{sgn}(x(x^{2}-1))\n$$\n将 $q=\\sqrt{m}x$ 代入左侧，得到 $\\mathrm{d}(\\sqrt{m}x)/\\mathrm{d}s = \\sqrt{m}(\\mathrm{d}x/\\mathrm{d}s)$。方程变为：\n$$\n\\sqrt{m}\\frac{\\mathrm{d}x}{\\mathrm{d}s} = -\\mathrm{sgn}(x(x^{2}-1))\n$$\n我们现在必须求解这个方程，以获得从过渡态 $x=0$ 出发的两个分支，按照惯例，我们在该点设置弧长 $s=0$。\n\n分支 1：从过渡态 ($x=0$) 到极小值点 $x=1$ 的路径。沿着此路径，坐标 $x$ 位于区间 $0 < x < 1$。在此区间内，$x>0$ 且 $x^{2}-1<0$，因此乘积 $x(x^{2}-1)$ 为负。\n$$\n\\mathrm{sgn}(x(x^{2}-1)) = -1\n$$\n该分支的微分方程为：\n$$\n\\sqrt{m}\\frac{\\mathrm{d}x}{\\mathrm{d}s} = -(-1) = 1\n$$\n这是一个可分离变量的微分方程：$\\sqrt{m}\\,\\mathrm{d}x = \\mathrm{d}s$。我们从初始条件 $(x,s) = (0,0)$ 积分到路径上的某一点 $(x,s)$：\n$$\n\\int_{0}^{x} \\sqrt{m} \\, \\mathrm{d}x' = \\int_{0}^{s} \\mathrm{d}s' \\implies \\sqrt{m}x = s\n$$\n路径的显式表达式为 $x(s) = s/\\sqrt{m}$，路径长度作为坐标的函数为 $s(x) = \\sqrt{m}x$。\n\n分支 2：从过渡态 ($x=0$) 到极小值点 $x=-1$ 的路径。沿着此路径，坐标 $x$ 位于区间 $-1 < x < 0$。在此区间内，$x<0$ 且 $x^{2}-1<0$，因此乘积 $x(x^{2}-1)$ 为正。\n$$\n\\mathrm{sgn}(x(x^{2}-1)) = +1\n$$\n该分支的微分方程为：\n$$\n\\sqrt{m}\\frac{\\mathrm{d}x}{\\mathrm{d}s} = -(+1) = -1\n$$\n分离变量得到 $\\sqrt{m}\\,\\mathrm{d}x = -\\mathrm{d}s$。从初始条件 $(x,s) = (0,0)$ 积分：\n$$\n\\int_{0}^{x} \\sqrt{m} \\, \\mathrm{d}x' = \\int_{0}^{s} (-1) \\, \\mathrm{d}s' \\implies \\sqrt{m}x = -s\n$$\n路径的显式表达式为 $x(s) = -s/\\sqrt{m}$，路径长度作为坐标的函数为 $s(x) = -\\sqrt{m}x$。\n\n结合两个分支的结果，我们可以将路径长度 $s$ 表示为坐标 $x$ 的单一函数：\n当 $x \\ge 0$ 时，$s(x) = \\sqrt{m}x$。\n当 $x < 0$ 时，$s(x) = -\\sqrt{m}x$。\n这等价于紧凑的表达式：\n$$\ns(x) = \\sqrt{m}|x|\n$$\n此结果表明，路径长度 $s$ 与笛卡尔坐标的绝对值 $|x|$ 在一个常数因子 $\\sqrt{m}$ 内是重合的。\n\n问题明确指出质量参数为 $m=1$。将此值代入我们推导出的 $s(x)$ 表达式中：\n$$\ns(x) = \\sqrt{1} |x| = |x|\n$$\n因此，对于指定的质量 $m=1$，该常数因子为 $1$。最终答案是对于 $m=1$ 且在两个分支上都有效的 $s(x)$ 的闭式表达式。", "answer": "$$\n\\boxed{|x|}\n$$", "id": "2899955"}, {"introduction": "在基本定义的基础上，下一个练习将使用数值方法来探索 IRC 在二维势能面上的行为。我们将通过一个思想实验：故意使路径追踪的起始点偏离真实的过渡态振动矢量，来研究一个关键概念——分隔不同产物势阱的“分水岭”。这个练习将帮助我们直观地理解反应路径的稳定性以及决定其走向的势能面拓扑结构。[@problem_id:2456634]", "problem": "考虑一个定义在坐标 $x$ 和 $y$ 上的二维模型势能面，其势能为\n$$\nV(x,y) \\;=\\; \\tfrac{1}{4}x^{4} \\;-\\; \\tfrac{1}{2}x^{2} \\;+\\; \\tfrac{1}{2}y^{2} \\;+\\; d\\,x^{2}y^{2},\n$$\n其中 $d$ 是一个固定的正参数。点 $(x,y)=(0,0)$ 是一个一阶鞍点（过渡态），两个对称相关的极小值点位于 $x$ 轴上 $x$ 不为零的位置。假设所有坐标的质量均为单位质量。内禀反应坐标 (IRC) 定义为质量加权坐标中的曲线 $\\mathbf{R}(s)=(x(s),y(s))$，它从过渡态出发，沿着 Hessian 矩阵的负曲率特征向量方向，遵循势能的最速下降路径。在单位质量下，最速下降流遵循以下常微分方程\n$$\n\\frac{d\\mathbf{R}}{ds} \\;=\\; -\\,\\nabla V\\big(\\mathbf{R}(s)\\big),\n$$\n其中 $s$ 是一个标量路径参数。梯度流的性质意味着\n$$\n\\frac{d}{ds}V\\big(\\mathbf{R}(s)\\big)\\;=\\; \\nabla V\\cdot\\frac{d\\mathbf{R}}{ds} \\;=\\; -\\,\\|\\nabla V\\|^{2}\\,\\le\\,0.\n$$\n过渡态的 Hessian 矩阵是在 $(0,0)$ 点计算的 $V(x,y)$ 的二阶导数矩阵。真实过渡向量是与该 Hessian 矩阵的唯一负特征值相关联的特征向量。在此模型中，这个真实过渡向量指向 $x$ 轴方向（$+x$ 或 $-x$）。\n\n您的任务是编写一个完整的程序，该程序从偏离过渡态的一个微小位移开始，沿着一个与真实过渡向量成给定角度的初始单位向量，对最速下降方程进行积分，然后确定轨迹的终点。请使用以下精确的规范。\n\n1) 势及其导数：使用 $d=0.5$。势能为\n$$\nV(x,y) \\;=\\; \\tfrac{1}{4}x^{4} \\;-\\; \\tfrac{1}{2}x^{2} \\;+\\; \\tfrac{1}{2}y^{2} \\;+\\; 0.5\\,x^{2}y^{2}.\n$$\n其梯度分量为\n$$\n\\frac{\\partial V}{\\partial x} \\;=\\; x^{3} - x + x\\,y^{2},\\qquad\n\\frac{\\partial V}{\\partial y} \\;=\\; y + x^{2}y,\n$$\n其 Hessian 分量为\n$$\n\\frac{\\partial^{2} V}{\\partial x^{2}} \\;=\\; 3x^{2} - 1 + y^{2},\\quad\n\\frac{\\partial^{2} V}{\\partial y^{2}} \\;=\\; 1 + x^{2},\\quad\n\\frac{\\partial^{2} V}{\\partial x\\,\\partial y} \\;=\\; 2xy.\n$$\n2) 初始条件构建：设过渡态位于 $(x,y)=(0,0)$，真实过渡向量沿着 $+x$ 方向。对于给定的角度 $\\theta$（单位为度），定义单位方向 $\\mathbf{u}(\\theta) = (\\cos\\theta,\\,\\sin\\theta)$，其中角度是相对于 $+x$ 方向按通常的逆时针方向计算的。轨迹从以下位置开始：\n$$\n\\mathbf{R}(0) \\;=\\; \\delta\\,\\mathbf{u}(\\theta),\n$$\n其中固定的小位移大小为 $\\delta = 10^{-3}$。\n\n3) 作为梯度流的 IRC 追踪：积分\n$$\n\\frac{d\\mathbf{R}}{ds} \\;=\\; -\\,\\nabla V(\\mathbf{R}),\n$$\n从 $s=0$ 开始，直到收敛（定义为 $\\|\\nabla V(\\mathbf{R})\\|\\le \\varepsilon_{\\text{grad}}$，其中 $\\varepsilon_{\\text{grad}} = 10^{-8}$），或直到超过最大路径参数 $s_{\\max}$（其中 $s_{\\max}=200$）。\n\n4) 终点分类：当根据梯度范数判据达到收敛时，通过计算终点 $(x_{\\text{end}},y_{\\text{end}})$ 处的 Hessian 特征值来对终点进行分类。如果所有 Hessian 特征值均严格为正（在数值容差范围内），则将终点分类为极小值点；如果 $x_{\\text{end}}>0$ 返回整数标签 $2$，如果 $x_{\\text{end}}<0$ 返回 $1$。如果至少有一个 Hessian 特征值为负（在数值容差范围内）且梯度范数很小，则将其分类为过渡态附近的一阶鞍点，并返回整数标签 $0$。如果积分在 $s_{\\max}$ 内未达到梯度范数收敛标准，您仍必须返回一个整数；在这种情况下，如果终点的 Hessian 矩阵有负特征值，则返回 $0$；否则，如果 $x_{\\text{end}}<0$ 返回 $1$，或如果 $x_{\\text{end}}>0$ 返回 $2$。所有数值比较都应使用与上述尺度一致的合理容差。\n\n5) 角度单位：下面提供的所有角度 $\\theta$ 的单位都是度。本问题不涉及物理单位。\n\n6) 测试套件：使用固定的位移大小 $\\delta = 10^{-3}$ 和上述指定的参数，为以下五个测试角度运行程序：\n- $\\theta = 0$,\n- $\\theta = 180$,\n- $\\theta = 90$,\n- $\\theta = 80$,\n- $\\theta = 100$.\n\n7) 要求的最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的、以逗号分隔的整数列表形式的结果，其顺序与上面的测试角度相同。例如，一个可接受的格式是\n$$\n[\\ell_{1},\\ell_{2},\\ell_{3},\\ell_{4},\\ell_{5}],\n$$\n其中每个 $\\ell_{k}$ 是由终点分类规则定义的整数 $0$、$1$ 或 $2$ 之一。\n\n您的实现必须对指定的最速下降方程进行数值积分，并应用所述的分类逻辑。目标是通过算法回答：如果在过渡态处，初始方向从真实过渡向量旋转了 $90$ 度，轨迹会走向何方，以及这与其他旋转角度相比有何不同？", "solution": "该问题要求数值确定二维势能面上从过渡态附近开始的最速下降路径的终点。这是计算化学中一个与内禀反应坐标 (IRC) 概念相关的经典问题。IRC 在形式上连接了过渡态与其相邻的极小值点。\n\n势能面 (PES) 由函数给出：\n$$ V(x,y) = \\tfrac{1}{4}x^{4} - \\tfrac{1}{2}x^{2} + \\tfrac{1}{2}y^{2} + d\\,x^{2}y^{2} $$\n其中参数 $d = 0.5$。该势能面的驻点，即梯度 $\\nabla V = (\\partial V / \\partial x, \\partial V / \\partial y)$ 为零的点，位于 $(0,0)$、$(1,0)$ 和 $(-1,0)$。通过分析二阶导数的 Hessian 矩阵\n$$ \\mathbf{H} = \\begin{pmatrix} \\partial^2 V / \\partial x^2 & \\partial^2 V / \\partial x \\partial y \\\\ \\partial^2 V / \\partial y \\partial x & \\partial^2 V / \\partial y^2 \\end{pmatrix}, $$\n可以揭示它们的性质。点 $(0,0)$ 是一个一阶鞍点（过渡态），有一个负特征值和一个正特征值。点 $(1,0)$ 和 $(-1,0)$ 是极小值点，其 Hessian 特征值均为正。这些点代表了由反应路径连接的稳定反应物和产物态。\n\nIRC 路径通过最速下降轨迹 $\\mathbf{R}(s) = (x(s), y(s))$ 来近似，该轨迹沿着势能梯度的负方向。这由以下常微分方程 (ODEs) 系统描述：\n$$ \\frac{d\\mathbf{R}}{ds} = -\\nabla V(\\mathbf{R}(s)) $$\n其中 $s$ 是路径参数。我们已知梯度分量的解析表达式：\n$$ \\nabla V(x,y) = \\begin{pmatrix} x^{3} - x + x y^{2} \\\\ y + x^{2}y \\end{pmatrix} $$\n\n积分并非从过渡态本身（一个不稳定的平衡点）开始，而是从距其一个微小位移 $\\delta = 10^{-3}$ 处开始。初始方向由单位向量 $\\mathbf{u}(\\theta) = (\\cos\\theta, \\sin\\theta)$ 指定，其中 $\\theta$ 是相对于 $+x$ 轴的角度（单位为度），$+x$ 轴对应于鞍点不稳定模式（过渡向量）的方向。因此，初始条件为：\n$$ \\mathbf{R}(0) = \\delta\\,\\mathbf{u}(\\theta) $$\n\n数值解是通过使用稳健的算法（例如 `scipy.integrate.solve_ivp` 中实现的算法）对该常微分方程系统进行积分得到的。积分持续进行，直到满足以下两个条件之一：\n1. 路径收敛到一个驻点，这是通过检测到梯度范数降至阈值以下来确定的：$\\|\\nabla V\\| \\le \\varepsilon_{\\text{grad}} = 10^{-8}$。\n2. 路径参数 $s$ 达到允许的最大值 $s_{\\max} = 200$。\n\n终止时，必须对轨迹的终点进行分类。这是通过分析终点 $\\mathbf{R}_{\\text{end}} = (x_{\\text{end}}, y_{\\text{end}})$ 的性质来实现的。计算 Hessian 矩阵 $\\mathbf{H}(\\mathbf{R}_{\\text{end}})$ 的特征值。\n- 如果任何一个特征值为负（在数值容差内，取为 $-10^{-8}$），则终点被分类为位于鞍点区域，得到标签 $0$。对于返回到过渡态附近的轨迹，预期会得到此结果，例如精确沿着稳定 $y$ 方向（$\\theta = 90^\\circ$）开始的路径。\n- 如果所有特征值均为非负，则终点位于对应于极小值点的势阱中。然后通过 $x$ 坐标的符号来区分终点：\n  - 如果 $x_{\\text{end}} < 0$，则分配标签 $1$，对应于 $(-1,0)$ 处的极小值点。\n  - 如果 $x_{\\text{end}} > 0$，则分配标签 $2$，对应于 $(1,0)$ 处的极小值点。\n\n无论收敛是通过梯度范数判据还是通过达到最大路径长度实现的，都应用此分类逻辑。系统的行为预计会表现出分岔现象；对于在 $0^\\circ$ 附近范围内的初始角度 $\\theta$，轨迹将导向 $(1,0)$ 处的极小值点，而对于在 $180^\\circ$ 附近的角度，它将导向 $(-1,0)$ 处的极小值点。临界角度 $\\theta = 90^\\circ$ 位于两个吸引盆之间的分割面（“分水岭”）上，从该处开始的轨迹预计会回落到过渡态。$\\theta=80^\\circ$ 和 $\\theta=100^\\circ$ 的测试用例旨在探究这种分岔行为。\n\n程序实现了这整个过程。它定义了用于计算势能梯度和 Hessian 矩阵的函数，为每个测试角度设置初始条件，使用事件处理器执行数值积分以检测收敛，并对每条轨迹的终点应用指定的分类规则。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\n# --- Problem-specific constants ---\nD_PARAM = 0.5  # Parameter d in the potential\nDELTA = 1e-3  # Initial displacement magnitude\nEPS_GRAD = 1e-8  # Gradient norm for convergence\nS_MAX = 200.0  # Maximum integration path parameter\nNEG_EIG_TOL = -1e-8 # Tolerance for checking for negative Hessian eigenvalues\n\ndef get_gradient(R):\n    \"\"\"\n    Computes the gradient of the potential V(x,y).\n    R is a 2-element array [x, y].\n    \"\"\"\n    x, y = R\n    x2 = x * x\n    y2 = y * y\n    grad_x = x**3 - x + x * y2\n    grad_y = y + x2 * y\n    return np.array([grad_x, grad_y])\n\ndef get_hessian(R):\n    \"\"\"\n    Computes the Hessian matrix of the potential V(x,y).\n    R is a 2-element array [x, y].\n    \"\"\"\n    x, y = R\n    x2 = x * x\n    y2 = y * y\n    \n    # Hessian components from problem statement corrected for d=0.5\n    h_xx = 3.0 * x2 - 1.0 + D_PARAM * 2.0 * y2\n    h_yy = 1.0 + D_PARAM * 2.0 * x2\n    h_xy = D_PARAM * 2.0 * 2.0 * x * y\n    \n    # Let's re-derive from V(x,y) = 0.25*x^4 - 0.5*x^2 + 0.5*y^2 + 0.5*x^2*y^2\n    # dV/dx = x^3 - x + x*y^2\n    # dV/dy = y + x^2*y\n    # d2V/dx2 = 3x^2 - 1 + y^2\n    # d2V/dy2 = 1 + x^2\n    # d2V/dxdy = 2xy\n    # The provided Hessian formulas were for a general d=0.5x^2y^2, not d*x^2*y^2.\n    # The derivation above matches the problem statement's direct formulas.\n    \n    h_xx_correct = 3.0 * x2 - 1.0 + y2\n    h_yy_correct = 1.0 + x2\n    h_xy_correct = 2.0 * x * y\n    \n    return np.array([[h_xx_correct, h_xy_correct], [h_xy_correct, h_yy_correct]])\n\n\ndef classify_trajectory_destination(theta_deg):\n    \"\"\"\n    Integrates a trajectory for a given initial angle and classifies the endpoint.\n    \"\"\"\n    # 1. Set up the initial condition\n    theta_rad = np.deg2rad(theta_deg)\n    R0 = np.array([DELTA * np.cos(theta_rad), DELTA * np.sin(theta_rad)])\n\n    # 2. Define the ODE system for the integrator (dR/ds = -grad(V))\n    def ode_func(s, R):\n        # The potential V is defined implicitly by its gradient.\n        # dV/dx = x^3 - x + (2*d)*x*y^2, dV/dy = y + (2*d)*x^2*y with V = .. + d*x^2*y^2\n        # For d=0.5, dV/dx=x^3-x+x*y^2 and dV/dy=y+x^2*y per problem statement.\n        grad = get_gradient(R)\n        return -grad\n\n    # 3. Define the convergence event\n    def convergence_event(s, R):\n        grad_norm = np.linalg.norm(get_gradient(R))\n        return grad_norm - EPS_GRAD\n    convergence_event.terminal = True\n    convergence_event.direction = -1 # Event triggers when value goes from positive to negative\n\n    # 4. Perform the numerical integration\n    sol = solve_ivp(\n        ode_func,\n        t_span=(0, S_MAX),\n        y0=R0,\n        method='DOP853',\n        events=convergence_event,\n        dense_output=True,\n        atol=1e-10,\n        rtol=1e-10\n    )\n\n    # 5. Determine the final point of the trajectory\n    # If the integration was terminated by the event, use the state at the event time.\n    if sol.status == 1 and sol.y_events[0].size > 0:\n        R_end = sol.y_events[0][0, :]\n    else: # Otherwise, use the last point of the integration.\n        R_end = sol.y[:, -1]\n\n    # 6. Classify the destination\n    x_end = R_end[0]\n    hessian_end = get_hessian(R_end)\n    eigenvalues = np.linalg.eigvalsh(hessian_end)\n\n    # If any eigenvalue is negative, it's a saddle-like point (label 0).\n    if np.any(eigenvalues  NEG_EIG_TOL):\n        return 0\n    else: # Otherwise, it's a minimum. Classify by the sign of x.\n        if x_end > 0:\n            return 2\n        else: # (x_end = 0)\n            return 1\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print the results.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        0,   # theta = 0 degrees\n        180, # theta = 180 degrees\n        90,  # theta = 90 degrees\n        80,  # theta = 80 degrees\n        100, # theta = 100 degrees\n    ]\n\n    results = []\n    for theta in test_cases:\n        label = classify_trajectory_destination(theta)\n        results.append(label)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2456634"}]}