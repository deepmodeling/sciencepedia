{"hands_on_practices": [{"introduction": "在计算粒子穿过整个势垒的概率之前，我们必须首先理解其波函数如何渗入经典禁区。通过计算质子的特征穿透深度——即波函数幅度衰减为 $1/e$ 的距离——你将对量子效应起主导作用的长度尺度有一个具体的感受 [@problem_id:2113730]。", "problem": "在一个简化的原子核相互作用的一维模型中，一个质子射向一个重的、静止的原子核。质子与原子核之间的静电排斥作用可以被建模为一个高度为 $V_0$ 的恒定矩形势垒。质子的总能量 $E$ 小于势垒高度 $V_0$。\n\n根据量子力学，质子的波函数在这个经典禁区的边缘不会变为零。相反，它会穿透势垒，其振幅随距离指数衰减。\n\n给定以下参数：\n- 质子的总能量为 $E = 5.0 \\text{ MeV}$。\n- 势垒的高度为 $V_0 = 10.0 \\text{ MeV}$（兆电子伏特）。\n- 质子的静止质量能为 $m_p c^2 = 938.3 \\text{ MeV}$。\n- 物理常量 $\\hbar c$ 的值为 $197.3 \\text{ MeV-fm}$，其中 fm 表示飞米（$10^{-15} \\text{ m}$）。\n\n计算质子波函数的振幅在势垒中衰减为 $1/e$ 倍时的特征距离。最终答案以飞米（fm）为单位表示。最终答案保留三位有效数字。", "solution": "对于一个高度为 $V_{0}$ 的一维矩形势垒，以及一个质量为 $m$、能量为 $E<V_{0}$ 的粒子，其在势垒区域内的不含时薛定谔方程为\n$$\n-\\frac{\\hbar^{2}}{2m}\\frac{d^{2}\\psi}{dx^{2}}+V_{0}\\psi=E\\psi.\n$$\n整理可得\n$$\n\\frac{d^{2}\\psi}{dx^{2}}=\\frac{2m\\left(V_{0}-E\\right)}{\\hbar^{2}}\\psi.\n$$\n定义\n$$\n\\kappa=\\sqrt{\\frac{2m\\left(V_{0}-E\\right)}{\\hbar^{2}}},\n$$\n势垒内部物理上可接受的解呈如下衰减形式\n$$\n\\psi(x)\\propto \\exp\\left(-\\kappa x\\right).\n$$\n振幅衰减为 $1/e$ 倍所对应的特征距离 $L$ 满足 $\\exp(-\\kappa L)=\\exp(-1)$，因此\n$$\nL=\\frac{1}{\\kappa}.\n$$\n用给定的相对论能量单位常量表示 $\\kappa$，\n$$\n\\kappa=\\frac{1}{\\hbar c}\\sqrt{2\\left(m c^{2}\\right)\\left(V_{0}-E\\right)}.\n$$\n使用 $m c^{2}=m_{p} c^{2}=938.3\\ \\text{MeV}$，$V_{0}-E=10.0\\ \\text{MeV}-5.0\\ \\text{MeV}=5.0\\ \\text{MeV}$，以及 $\\hbar c=197.3\\ \\text{MeV-fm}$，\n$$\n\\kappa=\\frac{\\sqrt{2\\cdot 938.3\\cdot 5.0}}{197.3}\\ \\text{fm}^{-1}=\\frac{\\sqrt{9383.0}}{197.3}\\ \\text{fm}^{-1}\\approx \\frac{96.866}{197.3}\\ \\text{fm}^{-1}\\approx 0.49096\\ \\text{fm}^{-1}.\n$$\n因此，\n$$\nL=\\frac{1}{\\kappa}\\approx \\frac{1}{0.49096}\\ \\text{fm}\\approx 2.0368\\ \\text{fm}.\n$$\n保留三位有效数字，特征距离为 $2.04$ fm。", "answer": "$$\\boxed{2.04}$$", "id": "2113730"}, {"introduction": "量子隧穿的概率对系统参数，尤其是粒子质量，极为敏感。本练习通过比较电子和质量大得多的μ子穿过相同势垒的概率，生动地展示了这一原理。通过这个对比计算，你将亲眼看到粒子质量如何以指数方式抑制其隧穿能力，这也是量子隧穿对于电子效应显著，而对于宏观物体则可忽略不计的关键原因 [@problem_id:2113724]。", "problem": "在下一代计算硬件的设计中，理解量子隧穿绝缘势垒的现象至关重要。考虑一个简化模型：一个电子和一个μ子分别以相同的入射动能 $E$ 射向一个高度为 $V_0$、宽度为 $L$ 的矩形势垒。粒子的动能小于势垒的高度。由于它们的波动性，两种粒子都有非零的概率隧穿通过这个经典力学上禁止进入的区域。\n\n你的任务是比较它们的隧穿概率。假设隧穿概率主要由波函数在势垒内的指数衰减决定，这意味着任何指前因子都可以被忽略，或者对于两种粒子是相同的。\n\n计算μ子的隧穿概率与电子的隧穿概率之比 $R = T_{\\mu} / T_{e}$ 的数值。\n\n在你的计算中使用以下参数：\n- 势垒宽度: $L = 0.80 \\text{ nm}$\n- 势垒高度: $V_0 = 10.0 \\text{ eV}$\n- 入射动能: $E = 6.0 \\text{ eV}$\n- 电子质量: $m_e = 9.11 \\times 10^{-31} \\text{ kg}$\n- μ子的质量 $m_{\\mu}$ 是电子质量的207倍。\n- 约化普朗克常数: $\\hbar = 1.05 \\times 10^{-34} \\text{ J} \\cdot \\text{s}$\n- 元电荷: $e = 1.60 \\times 10^{-19} \\text{ C}$\n\n将你的最终答案四舍五入到三位有效数字。", "solution": "对于一个 $E<V_{0}$ 的矩形势垒，势垒内部的衰减波数为 $\\kappa = \\sqrt{2 m (V_{0} - E)}/\\hbar$，而隧穿概率主要由指数因子 $T \\propto \\exp(-2 \\kappa L)$ 决定。忽略相同的指前因子，隧穿概率之比为\n$$\nR \\equiv \\frac{T_{\\mu}}{T_{e}} = \\exp\\!\\big[-2L(\\kappa_{\\mu} - \\kappa_{e})\\big].\n$$\n由于两种粒子的势垒参数相同，$\\kappa$ 对质量的依赖关系为 $\\kappa \\propto \\sqrt{m}$。使用 $m_{\\mu} = 207\\,m_{e}$，我们得到\n$$\n\\kappa_{\\mu} = \\sqrt{207}\\,\\kappa_{e},\n$$\n所以\n$$\nR = \\exp\\!\\left[-2L\\,\\kappa_{e}\\left(\\sqrt{207}-1\\right)\\right].\n$$\n由下式计算 $\\kappa_{e}$\n$$\n\\kappa_{e} = \\frac{\\sqrt{2 m_{e} \\Delta E}}{\\hbar}, \\quad \\Delta E = (V_{0} - E)\\,e.\n$$\n数值上，使用给定的值：\n$$\n\\Delta E = 4.0 \\times (1.60 \\times 10^{-19}) = 6.40 \\times 10^{-19} \\text{ J},\n$$\n$$\n\\frac{2 m_{e} \\Delta E}{\\hbar^{2}} = \\frac{2 \\times (9.11 \\times 10^{-31}) \\times (6.40 \\times 10^{-19})}{(1.05 \\times 10^{-34})^{2}} \\approx 1.05767 \\times 10^{20} \\text{ m}^{-2},\n$$\n$$\n\\kappa_{e} = \\sqrt{1.05767 \\times 10^{20}} \\approx 1.02842 \\times 10^{10} \\text{ m}^{-1}.\n$$\n那么\n$$\n2 L \\kappa_{e} \\approx 2 \\times (0.80 \\times 10^{-9}) \\times (1.02842 \\times 10^{10}) \\approx 16.4547,\n$$\n并且由于 $\\sqrt{207} \\approx 14.3875$，\n$$\n2 L \\kappa_{e} \\left(\\sqrt{207} - 1\\right) \\approx 16.4547 \\times 13.3875 \\approx 220.287.\n$$\n因此，\n$$\nR = \\exp(-220.287) \\approx 2.14 \\times 10^{-96}.\n$$\n四舍五入到三位有效数字，该比率为 $2.14 \\times 10^{-96}$。", "answer": "$$\\boxed{2.14 \\times 10^{-96}}$$", "id": "2113724"}, {"introduction": "尽管对于矩形等简单势垒存在解析的隧穿公式，但真实世界的化学系统通常具有复杂、任意形状的能量势垒。这个高级实践将挑战你，通过从第一性原理出发实现一个数值求解器，来连接理论与计算。通过编写程序来计算任意一维势垒的透射系数，你将掌握强大的传输矩阵方法，并获得在计算化学中模拟真实隧穿现象的实用能力 [@problem_id:2461151]。", "problem": "您的任务是实现一个完整、可运行的程序。该程序通过对任意势垒进行阶梯常数近似，并数值求解不含时薛定谔方程，来计算一维稳态散射态的量子隧穿透射系数。科学基础必须从第一性原理出发。使用一维不含时薛定谔方程 (TISE)，\n$$\n\\frac{d^2 \\psi(x)}{dx^2} + \\frac{2 m}{\\hbar^2} \\left(E - V(x)\\right)\\psi(x) = 0,\n$$\n结合波函数及其一阶导数在材料界面处的连续性条件，以及稳态的概率流定义，将透射系数定义为通量之比。请勿使用任何预先给定的透射公式；相反，您需要在自己的算法步骤中，基于这些基本原理推导出所要实现的内容。\n\n您必须在原子单位 (a.u.) 下工作，其中电子质量 $m = 1$，$\\hbar = 1$。因此，能量单位是哈特里 (Hartree)，长度单位是玻尔 (Bohr)。透射系数是无量纲的。\n\n您的实现要求如下：\n- 将有限区间 $[x_L,x_R]$ 离散化为 $N$ 个宽度为 $\\Delta x = (x_R - x_L)/N$ 的均匀切片。\n- 用一个分段常数函数来近似 $V(x)$，在切片 $j$ 上，其值 $V_j$ 取该切片中点处的势能值。\n- 在每个切片内部，求解局域形式的 TISE，并利用连续性条件关联跨越每个切片和每个界面的波幅。\n- 利用这些关系从左侧导线传播到右侧导线，并计算透射系数 $T$。该系数为透射概率流与入射概率流之比，表示为一个在 $[0,1]$ 区间内的实数。\n\n测试套件：\n实现四个测试用例，以检验不同的物理情景。在所有情况下，使用 $x_L = -10$ (Bohr)，$x_R = 10$ (Bohr)，以及 $N = 4000$。\n\n- 情况 A (单个有限方形势垒，亚势垒能量)：\n  - 势：当 $|x| \\le a/2$ 时，$V(x) = V_0$，其他情况下 $V(x) = 0$。\n  - 参数：$V_0 = 0.5$ (Hartree)，$a = 2.0$ (Bohr)，$E = 0.2$ (Hartree)。\n  - 预期的定性行为：由于隧穿效应，$T$ 很小但不为零。\n\n- 情况 B (单个有限方形势垒，高能量)：\n  - 势和几何形状与情况 A 相同。\n  - 参数：$V_0 = 0.5$ (Hartree)，$a = 2.0$ (Bohr)，$E = 2.0$ (Hartree)。\n  - 预期的定性行为：$T$ 接近 $1$。\n\n- 情况 C (无势垒，自由传播)：\n  - 势：对于所有 $x$，$V(x) = 0$。\n  - 参数：$E = 0.3$ (Hartree)。\n  - 预期的定性行为：$T = 1$。\n\n- 情况 D (带共振阱的双势垒)：\n  - 势：两个相同的高为 $V_0$、宽为 $b$ 的方形势垒，由一个宽度为 $L_w$ 的势阱隔开。具体来说，当 $x$ 处于 $[-L_w/2 - b, -L_w/2] \\cup [L_w/2, L_w/2 + b]$ 区间时，$V(x) = V_0$，其他区域 $V(x) = 0$。\n  - 参数：$V_0 = 0.6$ (Hartree)，$b = 0.5$ (Bohr)，$L_w = 4.0$ (Bohr)，$E = 0.31$ (Hartree)。\n  - 预期的定性行为：$T$ 表现出共振增强，在共振点附近可以接近 $1$。\n\n角度单位不适用。透射系数是无量纲的。您的程序必须生成单行输出，其中包含一个 Python 风格的列表，内含对应 A、B、C、D 四种情况的四个数值透射系数值，顺序必须是 A、B、C、D，每个值四舍五入到 $6$ 位小数。确切的输出格式要求如下：\n\"[t_A,t_B,t_C,t_D]\"\n不含空格。\n\n您的程序不得读取任何输入。它必须计算这四个值并打印所要求的单行内容。最终答案必须是浮点数。推导和算法必须仅基于 TISE、界面处的连续性条件以及概率流定义。请在您的选择和计算中确保数值稳定性和科学合理性。", "solution": "该问题是有效的。它在科学上基于量子力学原理，问题定义清晰，客观，并包含了获得唯一解所需的所有必要信息。我们将进行完整的推导和实现。\n\n此问题的基础是一维不含时薛定谔方程 (TISE)。在原子单位中，电子质量 $m=1$，约化普朗克常数 $\\hbar=1$，对于能量为 $E$ 的粒子在势 $V(x)$ 中的 TISE 为：\n$$\n\\frac{d^2 \\psi(x)}{dx^2} + 2 \\left(E - V(x)\\right)\\psi(x) = 0\n$$\n我们的任务是求解该方程的散射态，即一个粒子从左侧入射到一个势垒上。势 $V(x)$ 被近似为一个分段常数函数。感兴趣的区域 $[x_L, x_R]$ 被离散化为 $N$ 个均匀切片，每个切片的宽度为 $\\Delta x = (x_R - x_L)/N$。在每个跨越区间 $[x_{j-1}, x_j]$（其中 $x_j = x_L + j\\Delta x$）的切片 $j$ 内，势被保持为一个常数 $V_j = V(x_{j-1} + \\Delta x/2)$。\n\n在切片 $j$ 中，TISE 的形式为一个简谐振子方程：\n$$\n\\frac{d^2 \\psi_j(x)}{dx^2} + k_j^2 \\psi_j(x) = 0\n$$\n其中 $k_j^2 = 2(E - V_j)$ 是局域波数的平方。解的性质取决于 $k_j^2$ 的符号：\n1.  如果 $E > V_j$，$k_j = \\sqrt{2(E - V_j)}$ 是实数。解是振荡的，代表传播波：$\\psi_j(x) = A_j e^{i k_j x} + B_j e^{-i k_j x}$。\n2.  如果 $E < V_j$，$k_j = i\\sqrt{2(V_j - E)} \\equiv i\\kappa_j$ 是纯虚数，其中 $\\kappa_j$ 是实数。解是指数形式的，代表倏逝波（非传播波）：$\\psi_j(x) = A_j e^{-\\kappa_j x} + B_j e^{\\kappa_j x}$。\n\n为了求解整个区域内的系统，我们采用传输矩阵法。我们不追踪可能导致数值不稳定的系数 $(A_j, B_j)$，而是传播状态向量 $\\mathbf{S}(x) = \\begin{pmatrix} \\psi(x) \\\\ \\psi'(x) \\end{pmatrix}$，其中 $\\psi'(x) = d\\psi/dx$。通过这种方法，$\\psi(x)$ 和 $\\psi'(x)$ 在切片间界面处的连续性得以自然保持。\n\n在切片 $j$ 内，我们需要一个矩阵 $\\mathbf{P}_j$，它将切片末端的状态 $\\mathbf{S}(x_j)$ 与切片起始处的状态 $\\mathbf{S}(x_{j-1})$ 联系起来：$\\mathbf{S}(x_j) = \\mathbf{P}_j \\mathbf{S}(x_{j-1})$。\n切片 $j$ 内的通解可以写为 $\\psi(x) = C \\cos(k_j(x-x_{j-1})) + D \\sin(k_j(x-x_{j-1}))$。在 $x=x_{j-1}$ 处，我们有 $\\psi(x_{j-1}) = C$ 和 $\\psi'(x_{j-1}) = D k_j$，这使我们能够用初始状态向量来表示 $C$ 和 $D$。在 $x=x_j=x_{j-1}+\\Delta x$ 处计算 $\\psi(x)$ 和 $\\psi'(x)$，即可得到传播矩阵 $\\mathbf{P}_j$。\n\n情况 1：$E > V_j$（$k_j$ 为非零实数）\n解是振荡的。传播矩阵为：\n$$\n\\mathbf{P}_j = \\begin{pmatrix} \\cos(k_j \\Delta x) & \\frac{1}{k_j}\\sin(k_j \\Delta x) \\\\ -k_j \\sin(k_j \\Delta x) & \\cos(k_j \\Delta x) \\end{pmatrix}\n$$\n情况 2：$E < V_j$（$\\kappa_j$ 为非零实数）\n解是指数形式的。利用 $\\cos(iy) = \\cosh(y)$ 和 $\\sin(iy) = i\\sinh(y)$，传播矩阵变为：\n$$\n\\mathbf{P}_j = \\begin{pmatrix} \\cosh(\\kappa_j \\Delta x) & \\frac{1}{\\kappa_j}\\sinh(\\kappa_j \\Delta x) \\\\ \\kappa_j \\sinh(\\kappa_j \\Delta x) & \\cosh(\\kappa_j \\Delta x) \\end{pmatrix}\n$$\n情况 3：$E = V_j$（$k_j=0$）\nTISE 简化为 $\\psi''(x)=0$，其解为 $\\psi(x) = Ax+B$。传播矩阵是情况 1 在 $k_j \\to 0$ 时的极限：\n$$\n\\mathbf{P}_j = \\begin{pmatrix} 1 & \\Delta x \\\\ 0 & 1 \\end{pmatrix}\n$$\n右边界 $x_R=x_N$ 处的状态与左边界 $x_L=x_0$ 处的状态通过所有切片传播矩阵的乘积相关联：\n$$\n\\mathbf{S}(x_R) = (\\mathbf{P}_N \\mathbf{P}_{N-1} \\cdots \\mathbf{P}_1) \\mathbf{S}(x_L) \\equiv \\mathbf{P}_{total} \\mathbf{S}(x_L)\n$$\n问题指定了散射边界条件。我们假设在区域 $[x_L, x_R]$ 之外势为零。\n-   在左侧导线 ($x \\leq x_L$) 中，波函数是单位振幅的入射波和反射波的叠加：$\\psi_L(x) = e^{ik_0 x} + r e^{-ik_0 x}$，其中 $k_0 = \\sqrt{2E}$。\n-   在右侧导线 ($x \\geq x_R$) 中，只有透射波：$\\psi_R(x) = t e^{ik_0 x}$。\n\n根据这些形式，我们确定边界上的状态向量：\n$$\n\\mathbf{S}(x_L) = \\begin{pmatrix} e^{ik_0 x_L} + r e^{-ik_0 x_L} \\\\ ik_0(e^{ik_0 x_L} - r e^{-ik_0 x_L}) \\end{pmatrix} \\quad , \\quad \\mathbf{S}(x_R) = t \\begin{pmatrix} e^{ik_0 x_R} \\\\ ik_0 e^{ik_0 x_R} \\end{pmatrix}\n$$\n将这些代入关系式 $\\mathbf{S}(x_R) = \\mathbf{P}_{total} \\mathbf{S}(x_L)$，可以得到一个关于未知复振幅 $r$ 和 $t$ 的二元线性方程组。设 $\\mathbf{P}_{total} = \\begin{pmatrix} P_{11} & P_{12} \\\\ P_{21} & P_{22} \\end{pmatrix}$。求解该方程组得到透射振幅 $t$：\n$$\nt = \\frac{-2ik_0 e^{-ik_0(x_R-x_L)}}{ (P_{21} - k_0^2 P_{12}) - i k_0 (P_{11} + P_{22}) }\n$$\n透射系数 $T$ 定义为透射概率流与入射概率流之比。稳态的概率流为 $j(x) = \\frac{1}{2i}(\\psi^* \\psi' - \\psi \\psi'^*)$。\n-   入射流：$j_{inc} = k_0$（对于入射波 $e^{ik_0 x}$）。\n-   透射流：$j_{trans} = |t|^2 k_0$（对于透射波 $t e^{ik_0 x}$）。\n因此，透射系数为 $T = j_{trans}/j_{inc} = |t|^2$。\n使用 $t$ 的表达式，并注意到传播矩阵 $\\mathbf{P}_j$ 是实数矩阵，我们得到：\n$$\nT = |t|^2 = \\frac{4k_0^2}{|(P_{21} - k_0^2 P_{12}) - i k_0 (P_{11} + P_{22})|^2} = \\frac{4k_0^2}{(P_{21} - k_0^2 P_{12})^2 + k_0^2(P_{11} + P_{22})^2}\n$$\n这个公式可以直接计算透射系数。\n\n算法如下：\n1.  对每个测试用例，定义能量 $E$ 和势函数 $V(x)$。\n2.  建立空间网格，并为 $N$ 个切片中的每一个计算恒定势 $V_j$。\n3.  计算自由空间波数 $k_0 = \\sqrt{2E}$。\n4.  将总传播矩阵 $\\mathbf{P}_{total}$ 初始化为 $2 \\times 2$ 的单位矩阵。\n5.  遍历每个切片 $j=1, \\ldots, N$。在每次迭代中，根据 $2(E-V_j)$ 的符号计算切片矩阵 $\\mathbf{P}_j$，并通过左乘来更新总矩阵：$\\mathbf{P}_{total} \\leftarrow \\mathbf{P}_j \\, \\mathbf{P}_{total}$。\n6.  遍历完所有切片后，提取最终 $\\mathbf{P}_{total}$ 矩阵的四个元素。\n7.  使用推导出的 $T$ 的公式计算透射系数。\n此过程将对所有四个测试用例实施。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the four test cases for quantum tunneling.\n    \"\"\"\n\n    def calculate_transmission(params):\n        \"\"\"\n        Calculates the transmission coefficient for a single set of parameters.\n        The method uses the transfer matrix approach for the state vector (psi, psi').\n        \"\"\"\n        x_L, x_R, N, E, V_func = params\n        dx = (x_R - x_L) / N\n\n        if E <= 0:\n            return 0.0\n        \n        k0 = np.sqrt(2 * E)\n\n        # Initialize the total propagation matrix\n        P_total = np.identity(2, dtype=np.float64)\n\n        # Define grid midpoints for potential evaluation\n        x_mids = x_L + dx / 2.0 + np.arange(N) * dx\n        \n        # Create an array of potential values for each slice\n        V_slices = V_func(x_mids)\n\n        # The total propagation matrix is P_N * P_{N-1} * ... * P_1\n        # Loop computes P_1, then P_2*P_1, then P_3*P_2*P_1, etc.\n        for i in range(N):\n            V = V_slices[i]\n            k_squared = 2 * (E - V)\n            \n            # This is the matrix for the i-th slice (P_{i+1} in formula)\n            P_slice = np.empty((2, 2), dtype=np.float64)\n\n            # E > V: Propagating region\n            if k_squared > 0:\n                k = np.sqrt(k_squared)\n                # Handle k -> 0 case for numerical stability\n                if np.abs(k * dx) < 1e-9:\n                    P_slice[0, 0] = 1.0\n                    P_slice[0, 1] = dx\n                    P_slice[1, 0] = 0.0\n                    P_slice[1, 1] = 1.0\n                else:\n                    c = np.cos(k * dx)\n                    s = np.sin(k * dx)\n                    P_slice[0, 0] = c\n                    P_slice[0, 1] = s / k\n                    P_slice[1, 0] = -k * s\n                    P_slice[1, 1] = c\n            # E < V: Evanescent region\n            else:\n                kappa = np.sqrt(-k_squared)\n                # Handle kappa -> 0 case (same as k -> 0)\n                if np.abs(kappa * dx) < 1e-9:\n                    P_slice[0, 0] = 1.0\n                    P_slice[0, 1] = dx\n                    P_slice[1, 0] = 0.0\n                    P_slice[1, 1] = 1.0\n                else:\n                    ch = np.cosh(kappa * dx)\n                    sh = np.sinh(kappa * dx)\n                    P_slice[0, 0] = ch\n                    P_slice[0, 1] = sh / kappa\n                    P_slice[1, 0] = kappa * sh\n                    P_slice[1, 1] = ch\n            \n            # Left-multiply to build P_i * P_{i-1} * ...\n            P_total = P_slice @ P_total\n\n        # Extract elements of the total propagation matrix\n        P11, P12, P21, P22 = P_total.flatten()\n        \n        # Calculate transmission coefficient T using the derived formula\n        denominator = (P21 - k0**2 * P12)**2 + (k0 * (P11 + P22))**2\n        \n        if denominator == 0:\n            # Should not happen for k0 > 0, but as a safeguard\n            return 1.0  # Physical limit for resonance\n\n        T = 4 * k0**2 / denominator\n        return T\n\n    # Common parameters for all test cases\n    x_L = -10.0\n    x_R = 10.0\n    N = 4000\n\n    # Test Case A: Single rectangular barrier, sub-barrier energy\n    V0_A = 0.5\n    a_A = 2.0\n    E_A = 0.2\n    V_func_A = lambda x: np.where(np.abs(x) <= a_A / 2.0, V0_A, 0.0)\n    case_A = (x_L, x_R, N, E_A, V_func_A)\n\n    # Test Case B: Single rectangular barrier, high energy\n    V0_B = 0.5\n    a_B = 2.0\n    E_B = 2.0\n    V_func_B = lambda x: np.where(np.abs(x) <= a_B / 2.0, V0_B, 0.0)\n    case_B = (x_L, x_R, N, E_B, V_func_B)\n\n    # Test Case C: No barrier, free propagation\n    E_C = 0.3\n    V_func_C = lambda x: np.zeros_like(x)\n    case_C = (x_L, x_R, N, E_C, V_func_C)\n\n    # Test Case D: Double barrier with a resonant well\n    V0_D = 0.6\n    b_D = 0.5\n    Lw_D = 4.0\n    E_D = 0.31\n    def V_func_D(x):\n        abs_x = np.abs(x)\n        return np.where((abs_x >= Lw_D / 2.0) & (abs_x <= Lw_D / 2.0 + b_D), V0_D, 0.0)\n    case_D = (x_L, x_R, N, E_D, V_func_D)\n\n    test_cases = [case_A, case_B, case_C, case_D]\n\n    results = []\n    for case in test_cases:\n        result = calculate_transmission(case)\n        results.append(result)\n\n    # Format the final output string as required\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2461151"}]}