{"hands_on_practices": [{"introduction": "静电相互作用是驱动分子识别和结合的关键力量，因此它是分子对接打分函数中的核心组成部分。然而，精确计算该能量项具有挑战性，其结果高度依赖于如何为配体和蛋白质原子分配部分电荷。本练习将引导你通过一个具体的计算，比较两种常用的电荷模型（Gasteiger电荷和AM1-BCC电荷）对静电打分的影响，从而让你亲身体会不同物理假设如何导致可量化的能量差异。[@problem_id:2458208]", "problem": "一个蛋白质-配体复合物通过一个对接打分函数进行评估，该函数的静电项由一个具有均匀有效相对介电常数的库仑表达式建模。具体来说，静电贡献为\n$$\nE_{\\mathrm{elec}} \\;=\\; k_e \\sum_{i \\in \\text{protein}} \\sum_{j \\in \\text{ligand}} \\frac{q_i q_j}{\\varepsilon_r r_{ij}} \\,,\n$$\n其中 $k_e = 332.06371\\ \\mathrm{kcal\\ mol^{-1}\\ \\AA\\ e^{-2}}$，$\\varepsilon_r$ 是相对介电常数，$q_i$ 和 $q_j$ 是以元电荷 $e$ 为单位的部分电荷，$r_{ij}$ 是以 $\\mathrm{\\AA}$ 为单位的原子间距。假设 $\\varepsilon_r = 4$，并且只考虑以下三个蛋白质-配体原子对及其固定几何构型：\n\n- 原子对 $1$：蛋白质赖氨酸末端氮 $\\mathrm{N\\zeta}$，电荷 $q_{\\mathrm{N\\zeta}} = +0.40$，与配体羰基氧的距离为 $r_1 = 3.0\\ \\mathrm{\\AA}$。\n- 原子对 $2$：蛋白质天冬氨酸羧基氧 $\\mathrm{O\\delta1}$，电荷 $q_{\\mathrm{O\\delta1}} = -0.50$，与配体酰胺氢的距离为 $r_2 = 2.0\\ \\mathrm{\\AA}$。\n- 原子对 $3$：蛋白质主链羰基氧，电荷 $q_{\\mathrm{O_{bb}}} = -0.42$，与配体羰基碳的距离为 $r_3 = 3.4\\ \\mathrm{\\AA}$。\n\n比较了两种配体电荷模型，同时保持蛋白质电荷固定和几何构型不变：\n\n- 配体上的 Gasteiger 电荷：\n  - 配体羰基氧：$q_{\\mathrm{O_{lig}}} = -0.35$，\n  - 配体酰胺氢：$q_{\\mathrm{H_{lig}}} = +0.10$，\n  - 配体羰基碳：$q_{\\mathrm{C_{lig}}} = +0.30$。\n- 配体上的 Austin Model $1$ 键电荷校正 (AM1-BCC) 电荷：\n  - 配体羰基氧：$q_{\\mathrm{O_{lig}}} = -0.55$，\n  - 配体酰胺氢：$q_{\\mathrm{H_{lig}}} = +0.20$，\n  - 配体羰基碳：$q_{\\mathrm{C_{lig}}} = +0.50$。\n\n根据这些数据，考虑以下关于在对接分数的静电分量中使用 Gasteiger 电荷与 AM1-BCC 电荷对配体的影响的陈述。选择所有正确的陈述。\n\nA. 在给定条件下，对于此复合物，使用 AM1-BCC 配体电荷时的静电能比使用 Gasteiger 电荷时更有利（更负）。\n\nB. 在给定条件下，对于此复合物，使用 Gasteiger 配体电荷时的静电能比使用 AM1-BCC 电荷时更有利（更负）。\n\nC. 如果在相同的设置下使用更大的相对介电常数（例如，将 $\\varepsilon_r$ 从 $4$ 增加到 $20$）进行评估，AM1-BCC 和 Gasteiger 之间的静电能差异的量值将会减小。\n\nD. 对于任何固定的蛋白质电荷集和几何构型，静电项对配体的排序与所使用的配体电荷模型无关，因此 Gasteiger 和 AM1-BCC 将始终产生相同的排序。", "solution": "该问题陈述具有科学依据、提法明确、客观且自洽。它描述了计算化学中用于估算蛋白质-配体复合物中静电相互作用的一种标准（尽管简化了）计算方法。所有必要的物理常数、参数以及几何/电荷数据均已提供。不存在矛盾或模糊之处。因此，我将开始推导解答。\n\n对于指定的原子对，对接到分数的静电贡献由以下公式给出：\n$$\nE_{\\mathrm{elec}} \\;=\\; k_e \\sum_{k=1}^{3} \\frac{q_{\\text{prot},k} q_{\\text{lig},k}}{\\varepsilon_r r_{k}}\n$$\n其中 $k$ 为三个原子对的索引。这可以重写为：\n$$\nE_{\\mathrm{elec}} \\;=\\; \\frac{k_e}{\\varepsilon_r} \\left( \\frac{q_{\\mathrm{N\\zeta}} q_{\\mathrm{O_{lig}}}}{r_1} + \\frac{q_{\\mathrm{O\\delta1}} q_{\\mathrm{H_{lig}}}}{r_2} + \\frac{q_{\\mathrm{O_{bb}}} q_{\\mathrm{C_{lig}}}}{r_3} \\right)\n$$\n给定的常数为 $k_e = 332.06371\\ \\mathrm{kcal\\ mol^{-1}\\ \\AA\\ e^{-2}}$ 和 $\\varepsilon_r = 4$。常数前置因子为：\n$$\nC = \\frac{k_e}{\\varepsilon_r} = \\frac{332.06371}{4} = 83.0159275 \\ \\mathrm{kcal\\ mol^{-1}\\ \\AA\\ e^{-2}}\n$$\n蛋白质电荷和距离是固定的：\n- 原子对 1： $q_{\\mathrm{N\\zeta}} = +0.40$, $r_1 = 3.0\\ \\mathrm{\\AA}$\n- 原子对 2： $q_{\\mathrm{O\\delta1}} = -0.50$, $r_2 = 2.0\\ \\mathrm{\\AA}$\n- 原子对 3： $q_{\\mathrm{O_{bb}}} = -0.42$, $r_3 = 3.4\\ \\mathrm{\\AA}$\n\n我们必须计算两种给定配体电荷模型的总静电能。设 $S$ 表示括号内电荷乘积除以距离各项的总和。\n\n**Gasteiger 电荷的计算**\n配体原子的 Gasteiger 电荷为：$q_{\\mathrm{O_{lig, Gast}}} = -0.35$，$q_{\\mathrm{H_{lig, Gast}}} = +0.10$ 和 $q_{\\mathrm{C_{lig, Gast}}} = +0.30$。\n$$\nS_{\\mathrm{Gast}} = \\frac{(+0.40)(-0.35)}{3.0} + \\frac{(-0.50)(+0.10)}{2.0} + \\frac{(-0.42)(+0.30)}{3.4}\n$$\n$$\nS_{\\mathrm{Gast}} = \\frac{-0.14}{3.0} + \\frac{-0.05}{2.0} + \\frac{-0.126}{3.4}\n$$\n$$\nS_{\\mathrm{Gast}} = -0.04666\\dots - 0.025 - 0.03705\\dots \\approx -0.108726\\ e^2 \\mathrm{\\AA}^{-1}\n$$\n相应的静电能为：\n$$\nE_{\\mathrm{elec, Gast}} = C \\cdot S_{\\mathrm{Gast}} \\approx 83.0159275 \\times (-0.108726) \\approx -9.026 \\ \\mathrm{kcal\\ mol^{-1}}\n$$\n\n**AM1-BCC 电荷的计算**\n配体原子的 AM1-BCC 电荷为：$q_{\\mathrm{O_{lig, AM1}}} = -0.55$，$q_{\\mathrm{H_{lig, AM1}}} = +0.20$ 和 $q_{\\mathrm{C_{lig, AM1}}} = +0.50$。\n$$\nS_{\\mathrm{AM1}} = \\frac{(+0.40)(-0.55)}{3.0} + \\frac{(-0.50)(+0.20)}{2.0} + \\frac{(-0.42)(+0.50)}{3.4}\n$$\n$$\nS_{\\mathrm{AM1}} = \\frac{-0.22}{3.0} + \\frac{-0.10}{2.0} + \\frac{-0.21}{3.4}\n$$\n$$\nS_{\\mathrm{AM1}} = -0.07333\\dots - 0.05 - 0.06176\\dots \\approx -0.185098\\ e^2 \\mathrm{\\AA}^{-1}\n$$\n相应的静电能为：\n$$\nE_{\\mathrm{elec, AM1}} = C \\cdot S_{\\mathrm{AM1}} \\approx 83.0159275 \\times (-0.185098) \\approx -15.366 \\ \\mathrm{kcal\\ mol^{-1}}\n$$\n\n现在，我们来评估每个陈述。\n\n**A. 在给定条件下，对于此复合物，使用 AM1-BCC 配体电荷时的静电能比使用 Gasteiger 电荷时更有利（更负）。**\n我们的计算得出 $E_{\\mathrm{elec, AM1}} \\approx -15.37 \\ \\mathrm{kcal\\ mol^{-1}}$ 和 $E_{\\mathrm{elec, Gast}} \\approx -9.03 \\ \\mathrm{kcal\\ mol^{-1}}$。由于 $-15.37 < -9.03$，用 AM1-BCC 电荷计算的能量确实更负，表明静电相互作用更有利。这是因为 AM1-BCC 模型为所涉及的配体基团产生了更极化的电荷，增强了有利的相互作用（蛋白质正电荷与配体负电荷，以及蛋白质负电荷与配体正电荷），并使不利的相互作用（蛋白质负电荷与配体正电荷）更不利，但对于这种特定的几何构型，总体效果是总能量更负。\n结论：**正确**。\n\n**B. 在给定条件下，对于此复合物，使用 Gasteiger 配体电荷时的静电能比使用 AM1-BCC 电荷时更有利（更负）。**\n这个陈述与陈述 A 完全相反。我们的计算显示 $E_{\\mathrm{elec, Gast}} > E_{\\mathrm{elec, AM1}}$。使用 Gasteiger 电荷的能量更不负，因此更不利。\n结论：**不正确**。\n\n**C. 如果在相同的设置下使用更大的相对介电常数（例如，将 $\\varepsilon_r$ 从 $4$ 增加到 $20$）进行评估，AM1-BCC 和 Gasteiger 之间的静电能差异的量值将会减小。**\n让我们定义静电能的差异 $\\Delta E_{\\mathrm{elec}}$。\n$$\n\\Delta E_{\\mathrm{elec}} = E_{\\mathrm{elec, AM1}} - E_{\\mathrm{elec, Gast}} = \\frac{k_e}{\\varepsilon_r} (S_{\\mathrm{AM1}} - S_{\\mathrm{Gast}})\n$$\n这个差异的量值为：\n$$\n|\\Delta E_{\\mathrm{elec}}| = \\left| \\frac{k_e}{\\varepsilon_r} (S_{\\mathrm{AM1}} - S_{\\mathrm{Gast}}) \\right| = \\frac{k_e |S_{\\mathrm{AM1}} - S_{\\mathrm{Gast}}|}{\\varepsilon_r}\n$$\n由于对于给定的系统，$k_e$、$S_{\\mathrm{AM1}}$ 和 $S_{\\mathrm{Gast}}$ 都是常数，所以能量差异的量值 $|\\Delta E_{\\mathrm{elec}}|$ 与相对介电常数 $\\varepsilon_r$ 成反比。因此，增加 $\\varepsilon_r$（例如，从 $4$ 增加到 $20$）将导致差异的量值减小。\n当 $\\varepsilon_r = 4$ 时， $|\\Delta E_{\\mathrm{elec}}| \\approx |-15.366 - (-9.026)| = 6.34 \\ \\mathrm{kcal\\ mol^{-1}}$。\n当 $\\varepsilon_r = 20$ 时， $|\\Delta E_{\\mathrm{elec}}| = \\frac{4}{20} \\times 6.34 = 0.2 \\times 6.34 = 1.268 \\ \\mathrm{kcal\\ mol^{-1}}$。\n量值从 $6.34$ 减小到 $1.268 \\ \\mathrm{kcal\\ mol^{-1}}$。\n结论：**正确**。\n\n**D. 对于任何固定的蛋白质电荷集和几何构型，静电项对配体的排序与所使用的配体电荷模型无关，因此 Gasteiger 和 AM1-BCC 将始终产生相同的排序。**\n这是一个关于普适不变性的陈述，但实际上是错误的。Gasteiger 和 AM1-BCC 是两种在根本上不同的分配部分电荷的方法。Gasteiger 是一种基于电负性均衡的经验方法，而 AM1-BCC 则是通过半经验量子力学计算（AM1）导出电荷，然后应用校正（BCC）以更好地重现高水平的从头算静电势。所得到的电荷分布可能存在显著差异，不仅在量值上，也在整个分子的模式上。静电分数实际上是代表蛋白质静电场的向量与配体部分电荷向量之间的点积。没有任何物理定律或数学必然性规定，对于一组不同的配体，从不同模型导出的电荷向量在投影到任意蛋白质的场向量上时会保持其相对排序。可以构建一个简单的有效反例，包含两个配体和一个蛋白质，其中使用 Gasteiger 电荷时配体的排序为 A &gt; B，而使用 AM1-BCC 电荷时则变为 B &gt; A。因此，该排序不是不变的。\n结论：**不正确**。", "answer": "$$\\boxed{AC}$$", "id": "2458208"}, {"introduction": "一个完整的打分函数需要综合考虑多种物理化学效应来评估配体的结合亲和力。本练习将挑战你从零开始构建一个包含范德华力 ($E_{\\mathrm{vdW}}$)、氢键 ($E_{\\mathrm{HB}}$)、扭转能 ($E_{\\mathrm{tors}}$) 和形状约束 ($E_{\\mathrm{shape}}$) 等多种能量项的简化打分函数。通过在一个预定义的构象空间中进行伪随机采样，你还将探索搜索算法的“遍历性” (exhaustiveness) 参数如何影响找到最低能量（即最佳结合模式）的能力。[@problem_id:2458158]", "problem": "给定一个用于描述柔性配体在受限口袋中对接的打分函数的数学定义代理模型。该配体有两个由扭转角 $\\theta_1$ 和 $\\theta_2$（单位为弧度）描述的可旋转键，以及一个沿口袋轴线的一维平移自由度 $d$（距离单位为埃）。总能量 $E(d,\\theta_1,\\theta_2)$（单位为千卡/摩尔，kcal/mol）定义为以下四项之和：\n$$\nE(d,\\theta_1,\\theta_2) \\;=\\; E_{\\mathrm{vdW}}(d) \\;+\\; E_{\\mathrm{HB}}(d,\\theta_1) \\;+\\; E_{\\mathrm{tors}}(\\theta_1,\\theta_2) \\;+\\; E_{\\mathrm{shape}}(d,\\theta_2).\n$$\n所有距离单位均为埃，所有角度单位均为弧度，所有能量单位均为千卡/摩尔。这四项由以下公式给出：\n1. 以受体位点 $d_{\\mathrm{site}}$ 为中心的 Lennard–Jones（范德华）相互作用：\n$$\nE_{\\mathrm{vdW}}(d) \\;=\\; 4\\varepsilon \\left[\\left(\\frac{\\sigma}{r_{\\mathrm{core}} + |d - d_{\\mathrm{site}}|}\\right)^{12} - \\left(\\frac{\\sigma}{r_{\\mathrm{core}} + |d - d_{\\mathrm{site}}|}\\right)^{6}\\right],\n$$\n参数为 $\\varepsilon = 0.8$、$\\sigma = 1.5$ 和 $r_{\\mathrm{core}} = 0.3$。\n2. 一个方向性类氢键项：\n$$\nE_{\\mathrm{HB}}(d,\\theta_1) \\;=\\; -A \\,\\cos^2(\\theta_1 - \\phi)\\, \\exp\\!\\left(-\\frac{\\left(|d - d_{\\mathrm{site}}| - r_h\\right)^2}{2 s^2}\\right),\n$$\n参数为 $A = 2.0$、$r_h = 2.0$、$s = 0.5$, 以及一个取向偏好 $\\phi$。\n3. 每个可旋转键的扭转偏好：\n$$\nE_{\\mathrm{tors}}(\\theta_1,\\theta_2) \\;=\\; \\frac{k_1}{2}\\left(1 - \\cos(3\\theta_1)\\right) \\;+\\; \\frac{k_2}{2}\\left(1 - \\cos(3\\theta_2)\\right),\n$$\n其中 $k_1 = 1.2$，$k_2 = 0.6$。\n4. 一个形状约束，用于惩罚那些不适合半径为 $R$ 的球形口袋的构象：\n$$\nE_{\\mathrm{shape}}(d,\\theta_2) \\;=\\; B \\,\\max\\!\\left(0,\\, |d| + q\\,(1 + \\cos\\theta_2) - R\\right)^2,\n$$\n其中 $B = 5.0$，$q = 0.6$。\n\n变量的定义域为 $d \\in [-R, R]$、$\\theta_1 \\in [-\\pi,\\pi]$ 和 $\\theta_2 \\in [-\\pi,\\pi]$。\n\n为了将搜索的“穷尽性”参数这一概念形式化，请考虑以下伪随机序列。设 $m = 2147483647$，$a = 48271$，$c = 0$，种子 $u_0 = 12345$。定义线性同余生成器 (LCG) 如下：\n$$\nu_{k+1} = (a\\,u_k + c) \\bmod m, \\quad \\text{以及} \\quad x_k = \\frac{u_k}{m},\n$$\n使得对所有 $k \\ge 1$ 都有 $x_k \\in (0,1)$。对于给定的正整数 $n$，定义集合 $S_n$ 为搜索空间中的前 $n$ 个点，这些点是通过将连续的伪随机变量三元组按如下方式映射到自由度上得到的。对于第 $i$ 个样本，取 $(x_{3i-2}, x_{3i-1}, x_{3i})$ 并定义：\n$$\nd_i = -R + 2R\\,x_{3i-2}, \\quad \\theta_{1,i} = -\\pi + 2\\pi\\,x_{3i-1}, \\quad \\theta_{2,i} = -\\pi + 2\\pi\\,x_{3i}.\n$$\n将在穷尽性为 $n$ 时找到的最佳能量定义为：\n$$\nE_{\\min}(n; R, d_{\\mathrm{site}}, \\phi) \\;=\\; \\min_{1 \\le i \\le n} \\; E(d_i,\\theta_{1,i},\\theta_{2,i}).\n$$\n\n你的任务是为以下测试套件中的每一组参数计算 $E_{\\min}(n; R, d_{\\mathrm{site}}, \\phi)$。对于每个测试用例，都应使用相同的种子 $u_0 = 12345$ 独立地重新初始化伪随机序列，并从上面定义的 $x_1$ 开始。对于测试套件中未列出的所有项和参数，请使用上文提供的常数。要求的角度单位是弧度，要求的能量单位是千卡/摩尔。将每个结果报告为以千卡/摩尔为单位、四舍五入到6位小数的浮点数。\n\n测试套件（每个元组为 $(R, d_{\\mathrm{site}}, \\phi, n)$）：\n- $\\left(2.5, \\; 0.0, \\; 0, \\; 1\\right)$\n- $\\left(2.5, \\; 0.0, \\; 0, \\; 64\\right)$\n- $\\left(2.5, \\; 0.0, \\; 0, \\; 512\\right)$\n- $\\left(1.2, \\; 0.4, \\; \\frac{\\pi}{3}, \\; 64\\right)$\n- $\\left(1.2, \\; 0.4, \\; \\frac{\\pi}{3}, \\; 512\\right)$\n- $\\left(1.0, \\; 0.4, \\; \\frac{\\pi}{3}, \\; 512\\right)$\n\n最终输出格式：你的程序应生成单行输出，其中包含与上述测试套件顺序对应的结果，形式为一个用方括号括起来的逗号分隔列表。例如，可接受的格式是形如“[r1,r2,r3,r4,r5,r6]”的字符串，其中每个 $r_j$ 是第 $j$ 个测试用例的浮点数结果，以千卡/摩尔为单位，四舍五入到6位小数，且无额外文本。角度必须如指定的那样以弧度为单位，能量必须以千卡/摩尔为单位报告。", "solution": "所呈现的问题是计算化学领域中一个定义明确的计算任务，具体涉及一个简化的分子对接打分函数的评估。该问题有科学依据，在数学上是完备的，在算法上是明确的。因此，它被认为是有效的，并将为其构建一个解决方案。\n\n目标是找到总能量函数 $E(d,\\theta_1,\\theta_2)$ 的最小值，该函数模拟了柔性配体在受体口袋内的结合。配体的构象由三个自由度描述：一个平移坐标 $d$（单位为埃）和两个扭转角 $\\theta_1$ 和 $\\theta_2$（单位为弧度）。总能量是四个不同项的总和：\n$$\nE(d,\\theta_1,\\theta_2) = E_{\\mathrm{vdW}}(d) + E_{\\mathrm{HB}}(d,\\theta_1) + E_{\\mathrm{tors}}(\\theta_1,\\theta_2) + E_{\\mathrm{shape}}(d,\\theta_2)\n$$\n每一项代表一种特定的物理相互作用或约束：\n\n1.  **范德华相互作用 ($E_{\\mathrm{vdW}}$)**: 该项由 Lennard-Jones $12-6$ 势建模，描述了配体与受体中位置为 $d_{\\mathrm{site}}$ 的特定位点之间的非键相互作用。其函数形式为：\n    $$\n    E_{\\mathrm{vdW}}(d) = 4\\varepsilon \\left[\\left(\\frac{\\sigma}{r_{\\mathrm{core}} + |d - d_{\\mathrm{site}}|}\\right)^{12} - \\left(\\frac{\\sigma}{r_{\\mathrm{core}} + |d - d_{\\mathrm{site}}|}\\right)^{6}\\right]\n    $$\n    参数指定为 $\\varepsilon = 0.8 \\, \\text{kcal/mol}$、$\\sigma = 1.5 \\, \\text{Å}$ 和 $r_{\\mathrm{core}} = 0.3 \\, \\text{Å}$。\n\n2.  **氢键相互作用 ($E_{\\mathrm{HB}}$)**: 该项模拟了一个具有方向性和距离依赖性的氢键。当角度 $\\theta_1$ 与偏好取向 $\\phi$ 对齐，且配体距离位点 $d_{\\mathrm{site}}$ 为特定距离 $r_h$ 时，其能量较低。其函数为：\n    $$\n    E_{\\mathrm{HB}}(d,\\theta_1) = -A \\,\\cos^2(\\theta_1 - \\phi)\\, \\exp\\!\\left(-\\frac{\\left(|d - d_{\\mathrm{site}}| - r_h\\right)^2}{2 s^2}\\right)\n    $$\n    参数给出为 $A = 2.0 \\, \\text{kcal/mol}$、$r_h = 2.0 \\, \\text{Å}$ 和 $s = 0.5 \\, \\text{Å}$。\n\n3.  **扭转能 ($E_{\\mathrm{tors}}$)**: 该项表示由角度 $\\theta_1$ 和 $\\theta_2$ 描述的两个可旋转键的内在能量偏好。使用了一个简单的周期势：\n    $$\n    E_{\\mathrm{tors}}(\\theta_1,\\theta_2) = \\frac{k_1}{2}\\left(1 - \\cos(3\\theta_1)\\right) + \\frac{k_2}{2}\\left(1 - \\cos(3\\theta_2)\\right)\n    $$\n    扭转力常数为 $k_1 = 1.2 \\, \\text{kcal/mol}$ 和 $k_2 = 0.6 \\, \\text{kcal/mol}$。\n\n4.  **形状约束 ($E_{\\mathrm{shape}}$)**: 如果配体构象超出了半径为 $R$ 的球形口袋的范围，该项会施加一个严厉的能量惩罚。它是一个二次惩罚函数：\n    $$\n    E_{\\mathrm{shape}}(d,\\theta_2) = B \\,\\max\\!\\left(0,\\, |d| + q\\,(1 + \\cos\\theta_2) - R\\right)^2\n    $$\n    参数为 $B = 5.0 \\, \\text{kcal/mol/Å}^2$ 和 $q = 0.6 \\, \\text{Å}$。\n\n对最小能量 $E_{\\min}$ 的搜索不是在整个连续定义域上进行，而是在一个包含 $n$ 个样本的离散点集 $S_n$ 上进行。这些样本是使用一个确定性伪随机过程生成的。一个线性同余生成器 (LCG) 由 $u_{k+1} = (a\\,u_k + c) \\pmod m$ 定义，其参数为 $m = 2147483647$、$a = 48271$、$c = 0$，种子为 $u_0 = 12345$。整数序列 $u_k$ 被映射到区间 $(0,1)$ 内的实数序列 $x_k = u_k/m$。\n\n对于每个由元组 $(R, d_{\\mathrm{site}}, \\phi, n)$ 定义的测试用例，LCG 都必须重新初始化。然后，对于从 $1$ 到 $n$ 的每个 $i$，生成一个伪随机数三元组 $(x_{3i-2}, x_{3i-1}, x_{3i})$，并按如下方式映射到配体的自由度 $(d_i, \\theta_{1,i}, \\theta_{2,i})$：\n$$\nd_i = -R + 2R\\,x_{3i-2}\n$$\n$$\n\\theta_{1,i} = -\\pi + 2\\pi\\,x_{3i-1}\n$$\n$$\n\\theta_{2,i} = -\\pi + 2\\pi\\,x_{3i}\n$$\n为 $n$ 个采样构象中的每一个计算总能量 $E(d_i, \\theta_{1,i}, \\theta_{2,i})$。在这 $n$ 个样本中找到的最小能量 $E_{\\min}(n; R, d_{\\mathrm{site}}, \\phi)$，即为该测试用例的期望结果。\n\n该解决方案被实现为一个计算流程。对于测试套件中提供的每一组参数 $(R, d_{\\mathrm{site}}, \\phi, n)$：\n1. 使用一个实现指定 LCG 的函数来生成一个包含 $3n$ 个伪随机数的序列。\n2. 一个循环迭代 $n$ 次。在每次迭代 $i$ 中，从序列中取用三个连续的数字。\n3. 这三个数字使用给定的映射方程被转换为坐标 $(d_i, \\theta_{1,i}, \\theta_{2,i})$。\n4. 通过对四个能量分量求和来计算总能量 $E_i$，每个分量都使用采样的坐标和该测试用例的特定参数进行评估。\n5. 如果当前能量 $E_i$ 低于迄今为止找到的最小值，则更新一个用于追踪最小能量的变量。初始最小值设为正无穷大。\n6. $n$ 次迭代后，存储最终的最小能量。对所有测试用例重复此过程。\n7. 收集到的结果被格式化为6位小数，并以要求的逗号分隔列表格式呈现。", "answer": "```python\nimport numpy as np\n\n# Global constants for energy terms\nEPSILON = 0.8\nSIGMA = 1.5\nR_CORE = 0.3\nA_HB = 2.0\nR_H = 2.0\nS_HB = 0.5\nK1 = 1.2\nK2 = 0.6\nB_SHAPE = 5.0\nQ_SHAPE = 0.6\n\n# Global constants for LCG\nM = 2147483647\nA_LCG = 48271\nC_LCG = 0\nU0 = 12345\n\ndef lcg_generator(n_vals):\n    \"\"\"\n    Generator for pseudorandom numbers using the specified LCG parameters.\n    Yields n_vals numbers in the interval (0, 1).\n    \"\"\"\n    u = U0\n    for _ in range(n_vals):\n        u = (A_LCG * u + C_LCG) % M\n        # u will be in [1, m-1] since m is prime, c=0, and u0 != 0\n        yield u / M\n\ndef calculate_energy(d, theta1, theta2, R, d_site, phi):\n    \"\"\"\n    Calculates the total energy E(d, theta1, theta2) for a given conformation\n    and a set of environmental parameters (R, d_site, phi).\n    \"\"\"\n    # E_vdW: van der Waals interaction\n    dist_from_site = abs(d - d_site)\n    vdw_term = SIGMA / (R_CORE + dist_from_site)\n    e_vdw = 4.0 * EPSILON * (vdw_term**12 - vdw_term**6)\n\n    # E_HB: Hydrogen bond interaction\n    exp_arg = -((dist_from_site - R_H)**2) / (2.0 * S_HB**2)\n    e_hb = -A_HB * (np.cos(theta1 - phi)**2) * np.exp(exp_arg)\n\n    # E_tors: Torsional energy\n    e_tors = (K1 / 2.0) * (1.0 - np.cos(3.0 * theta1)) + \\\n             (K2 / 2.0) * (1.0 - np.cos(3.0 * theta2))\n\n    # E_shape: Shape constraint penalty\n    penalty_base = abs(d) + Q_SHAPE * (1.0 + np.cos(theta2)) - R\n    e_shape = B_SHAPE * (max(0.0, penalty_base)**2)\n\n    return e_vdw + e_hb + e_tors + e_shape\n\ndef find_min_energy(R, d_site, phi, n):\n    \"\"\"\n    Performs a pseudorandom search to find the minimum energy for a given\n    set of parameters and exhaustiveness n.\n    \"\"\"\n    min_energy = float('inf')\n    \n    # Each call requires a fresh, independent sequence of random numbers.\n    rand_gen = lcg_generator(3 * n)\n    \n    for _ in range(n):\n        # Generate three pseudorandom numbers for one sample\n        x_d = next(rand_gen)\n        x_th1 = next(rand_gen)\n        x_th2 = next(rand_gen)\n        \n        # Map random numbers to the search space coordinates\n        d = -R + 2.0 * R * x_d\n        theta1 = -np.pi + 2.0 * np.pi * x_th1\n        theta2 = -np.pi + 2.0 * np.pi * x_th2\n        \n        # Calculate the energy for the sampled conformation\n        energy = calculate_energy(d, theta1, theta2, R, d_site, phi)\n        \n        # Update the minimum energy found\n        if energy < min_energy:\n            min_energy = energy\n            \n    return min_energy\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the results in the\n    specified format.\n    \"\"\"\n    test_cases = [\n        # (R, d_site, phi, n)\n        (2.5, 0.0, 0.0, 1),\n        (2.5, 0.0, 0.0, 64),\n        (2.5, 0.0, 0.0, 512),\n        (1.2, 0.4, np.pi / 3.0, 64),\n        (1.2, 0.4, np.pi / 3.0, 512),\n        (1.0, 0.4, np.pi / 3.0, 512),\n    ]\n    \n    results = []\n    for R, d_site, phi, n in test_cases:\n        min_e = find_min_energy(R, d_site, phi, n)\n        results.append(f\"{min_e:.6f}\")\n        \n    print(f\"[{','.join(results)}]\")\n\n# Execute the solver\nsolve()\n```", "id": "2458158"}, {"introduction": "在药物设计中，我们常常面临计算速度与准确性之间的权衡。快速的经验打分函数适用于大规模虚拟筛选，而更精确但耗时的量子化学（QM）方法则适用于对少数有希望的候选物进行“重新打分” (rescoring)。本练习模拟了这一重要工作流程，要求你实现一个经验打分函数 ($S_{\\mathrm{emp}}$) 和一个包含极化效应 ($E_{\\mathrm{pol}}$) 的类QM打分函数 ($E_{\\mathrm{qm}}$)，并使用统计学方法（Spearman等级相关系数 $\\rho$）来量化比较这两种模型对同一组对接姿态的排序能力。[@problem_id:2458163]", "problem": "给定一个包含 $10$ 个已对接配体构象的集合，用于一个固定的受体口袋和单个配体。您的任务是为每个构象计算两个打分函数：一个经验对接分数和一个基于物理动机项的类量子力学（QM-like）重打分，然后使用 Spearman 等级相关系数比较它们的排序。所有量均为无量纲，并在约化单位中表示，其中静电前因子设为 $k_e = 1$，所有距离、能量和电荷都与此选择一致。\n\n定义和参数：\n- 有 $M$ 个受体相互作用位点，索引为 $j \\in \\{0,1,\\dots,M-1\\}$，以及 $N$ 个配体原子，索引为 $i \\in \\{0,1,\\dots,N-1\\}$。\n- 每个受体位点 $j$ 具有位置 $\\mathbf{R}_j \\in \\mathbb{R}^3$、电荷 $Q_j$、Lennard-Jones 参数 $\\sigma_j$ 和 $\\varepsilon_j$、各向同性极化率 $\\alpha_j$ 以及疏水性标志 $H_j \\in \\{0,1\\}$。\n- 每个配体原子 $i$ 具有参数：内在电荷 $q_i$、Lennard-Jones 参数 $\\sigma_i$ 和 $\\varepsilon_i$、各向同性极化率 $\\alpha_i$ 以及疏水性标志 $h_i \\in \\{0,1\\}$。对于每个构象 $p \\in \\{0,1,\\dots,9\\}$，该原子有一个位置 $\\mathbf{r}_{i}^{(p)} \\in \\mathbb{R}^3$。\n- 对于任意原子对 $(i,j)$ 和构象 $p$，令 $r_{ij}^{(p)} = \\|\\mathbf{r}_{i}^{(p)} - \\mathbf{R}_j\\|$ 并定义 Lennard-Jones 组合规则 $\\sigma_{ij} = \\dfrac{\\sigma_i + \\sigma_j}{2}$ 和 $\\varepsilon_{ij} = \\sqrt{\\varepsilon_i \\varepsilon_j}$。\n\n构象 $p$ 的经验对接分数：\n- 设屏蔽静电作用使用一个距离依赖的介电常数 $\\epsilon(r) = d \\, r$，其中 $d = 4$。\n- 定义对 Lennard-Jones 相互作用为\n$$\nU_{ij}^{\\mathrm{LJ}}(r) = 4 \\, \\varepsilon_{ij} \\left[ \\left(\\dfrac{\\sigma_{ij}}{r}\\right)^{12} - \\left(\\dfrac{\\sigma_{ij}}{r}\\right)^{6} \\right].\n$$\n- 定义屏蔽库仑相互作用为\n$$\nU_{ij}^{\\mathrm{el,emp}}(r) = \\dfrac{q_i Q_j}{\\epsilon(r) \\, r} = \\dfrac{q_i Q_j}{d \\, r^2}.\n$$\n- 定义一个疏水接触数 $C^{(p)}$，其值为 $h_i = 1$、$H_j = 1$ 且 $r_{ij}^{(p)} \\le r_c$ 的原子对 $(i,j)$ 的数量，截断距离 $r_c = 1.2$。疏水贡献为 $- \\gamma \\, C^{(p)}$，其中 $\\gamma = 0.05$。\n- 经验对接分数为\n$$\nS_{\\mathrm{emp}}^{(p)} = \\sum_{i=0}^{N-1} \\sum_{j=0}^{M-1} \\left[ U_{ij}^{\\mathrm{LJ}}\\!\\left(r_{ij}^{(p)}\\right) + U_{ij}^{\\mathrm{el,emp}}\\!\\left(r_{ij}^{(p)}\\right) \\right] - \\gamma \\, C^{(p)}.\n$$\n\n构象 $p$ 的类 QM 重打分：\n- 使用未屏蔽库仑相互作用\n$$\nU_{ij}^{\\mathrm{el,qm}}(r) = \\dfrac{q_i Q_j}{r}.\n$$\n- 定义由受体永久电荷在配体原子 $i$ 处产生的电场为\n$$\n\\mathbf{E}_i^{(p)} = \\sum_{j=0}^{M-1} Q_j \\, \\dfrac{\\mathbf{r}_{i}^{(p)} - \\mathbf{R}_j}{\\left(r_{ij}^{(p)}\\right)^3}.\n$$\n- 定义由配体永久电荷在受体位点 $j$ 处产生的电场为\n$$\n\\mathbf{E}_j^{(p)} = \\sum_{i=0}^{N-1} q_i \\, \\dfrac{\\mathbf{R}_j - \\mathbf{r}_{i}^{(p)}}{\\left(r_{ij}^{(p)}\\right)^3}.\n$$\n- 极化能使用一阶诱导偶极近似：\n$$\nE_{\\mathrm{pol}}^{(p)} = -\\dfrac{1}{2}\\left( \\sum_{i=0}^{N-1} \\alpha_i \\, \\left\\|\\mathbf{E}_i^{(p)}\\right\\|^2 + \\sum_{j=0}^{M-1} \\alpha_j \\, \\left\\|\\mathbf{E}_j^{(p)}\\right\\|^2 \\right).\n$$\n- 类 QM 重打分能量为\n$$\nE_{\\mathrm{qm}}^{(p)} = \\sum_{i=0}^{N-1} \\sum_{j=0}^{M-1} \\left[ U_{ij}^{\\mathrm{LJ}}\\!\\left(r_{ij}^{(p)}\\right) + U_{ij}^{\\mathrm{el,qm}}\\!\\left(r_{ij}^{(p)}\\right) \\right] + E_{\\mathrm{pol}}^{(p)}.\n$$\n\n排序与相关性：\n- 对于每个打分函数，数值越小越好。按分数递增的顺序对 $10$ 个构象进行排序。如果两个分数的差值在容差 $\\tau = 10^{-12}$ 以内，则通过较小的构象索引来打破平局。\n- 使用以下公式计算两个排序之间的 Spearman 等级相关系数 $\\rho$：\n$$\n\\rho = 1 - \\dfrac{6 \\sum_{p=0}^{9} d_p^2}{n(n^2 - 1)},\n$$\n其中 $n = 10$，$d_p$ 是在两个打分函数下分配给构象 $p$ 的等级位置（最优为 $0$）之间的差异。\n\n数据集（测试套件）：\n- 受体有 $M = 4$ 个位点，参数如下：\n  - $j = 0$: $\\mathbf{R}_0 = (0.00, 0.00, 0.00)$, $Q_0 = -0.5$, $\\sigma_0 = 1.00$, $\\varepsilon_0 = 0.20$, $\\alpha_0 = 0.10$, $H_0 = 0$。\n  - $j = 1$: $\\mathbf{R}_1 = (1.50, 0.00, 0.20)$, $Q_1 = +0.4$, $\\sigma_1 = 1.00$, $\\varepsilon_1 = 0.20$, $\\alpha_1 = 0.08$, $H_1 = 0$。\n  - $j = 2$: $\\mathbf{R}_2 = (0.00, 1.80, -0.30)$, $Q_2 = 0.0$, $\\sigma_2 = 1.20$, $\\varepsilon_2 = 0.25$, $\\alpha_2 = 0.12$, $H_2 = 1$。\n  - $j = 3$: $\\mathbf{R}_3 = (-1.40, -0.50, 0.40)$, $Q_3 = -0.2$, $\\sigma_3 = 1.10$, $\\varepsilon_3 = 0.22$, $\\alpha_3 = 0.09$, $H_3 = 1$。\n- 配体有 $N = 3$ 个原子，参数如下：\n  - $i = 0$: $q_0 = +0.3$, $\\sigma_0 = 1.00$, $\\varepsilon_0 = 0.18$, $\\alpha_0 = 0.12$, $h_0 = 0$。\n  - $i = 1$: $q_1 = -0.2$, $\\sigma_1 = 0.90$, $\\varepsilon_1 = 0.15$, $\\alpha_1 = 0.10$, $h_1 = 1$。\n  - $i = 2$: $q_2 = -0.1$, $\\sigma_2 = 0.85$, $\\varepsilon_2 = 0.14$, $\\alpha_2 = 0.09$, $h_2 = 1$。\n- $10$ 个构象 $p \\in \\{0,1,\\dots,9\\}$ 提供了 $\\mathbf{r}_i^{(p)}$：\n  - $p = 0$: $\\mathbf{r}_0^{(0)} = (0.2, 0.4, 0.1)$, $\\mathbf{r}_1^{(0)} = (0.9, 0.4, 0.1)$, $\\mathbf{r}_2^{(0)} = (0.2, 1.1, 0.1)$。\n  - $p = 1$: $\\mathbf{r}_0^{(1)} = (0.8, 0.1, 0.2)$, $\\mathbf{r}_1^{(1)} = (1.4, 0.1, 0.2)$, $\\mathbf{r}_2^{(1)} = (0.8, 0.7, 0.2)$。\n  - $p = 2$: $\\mathbf{r}_0^{(2)} = (-0.8, -0.2, 0.3)$, $\\mathbf{r}_1^{(2)} = (-0.1, -0.2, 0.3)$, $\\mathbf{r}_2^{(2)} = (-0.8, 0.5, 0.3)$。\n  - $p = 3$: $\\mathbf{r}_0^{(3)} = (0.1, 1.2, -0.1)$, $\\mathbf{r}_1^{(3)} = (0.8, 1.2, -0.1)$, $\\mathbf{r}_2^{(3)} = (0.1, 1.9, -0.1)$。\n  - $p = 4$: $\\mathbf{r}_0^{(4)} = (0.3, 0.1, 0.0)$, $\\mathbf{r}_1^{(4)} = (0.9, 0.1, 0.0)$, $\\mathbf{r}_2^{(4)} = (0.3, 0.7, 0.0)$。\n  - $p = 5$: $\\mathbf{r}_0^{(5)} = (2.5, 2.5, 0.0)$, $\\mathbf{r}_1^{(5)} = (3.2, 2.5, 0.0)$, $\\mathbf{r}_2^{(5)} = (2.5, 3.2, 0.0)$。\n  - $p = 6$: $\\mathbf{r}_0^{(6)} = (1.2, -0.1, 0.2)$, $\\mathbf{r}_1^{(6)} = (1.8, -0.1, 0.2)$, $\\mathbf{r}_2^{(6)} = (1.2, 0.6, 0.2)$。\n  - $p = 7$: $\\mathbf{r}_0^{(7)} = (-1.0, -0.6, 0.4)$, $\\mathbf{r}_1^{(7)} = (-0.3, -0.6, 0.4)$, $\\mathbf{r}_2^{(7)} = (-1.0, 0.1, 0.4)$。\n  - $p = 8$: $\\mathbf{r}_0^{(8)} = (0.1, 0.2, 0.9)$, $\\mathbf{r}_1^{(8)} = (0.8, 0.2, 0.9)$, $\\mathbf{r}_2^{(8)} = (0.1, 0.9, 0.9)$。\n  - $p = 9$: $\\mathbf{r}_0^{(9)} = (5.0, 5.0, 5.0)$, $\\mathbf{r}_1^{(9)} = (5.7, 5.0, 5.0)$, $\\mathbf{r}_2^{(9)} = (5.0, 5.7, 5.0)$。\n\n要求：\n- 使用上述定义为每个 $p \\in \\{0,\\dots,9\\}$ 计算 $S_{\\mathrm{emp}}^{(p)}$ 和 $E_{\\mathrm{qm}}^{(p)}$。\n- 分别按照 $S_{\\mathrm{emp}}^{(p)}$ 和 $E_{\\mathrm{qm}}^{(p)}$ 的递增顺序对构象进行排序，当分数在 $\\tau = 10^{-12}$ 内相等时，通过较小的 $p$ 来打破平局，从而生成两个排序列表。\n- 使用所提供的公式计算两个排序之间的 Spearman 等级相关系数 $\\rho$。\n- 最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，即 $[\\text{empirical\\_ranking},\\text{qm\\_ranking},\\rho]$，其中每个 ranking 是按分数递增顺序排列的 $10$ 个构象索引的列表，$\\rho$ 是一个打印到小数点后六位的小数。例如，结构必须像 $[[a_0,a_1,\\dots,a_9],[b_0,b_1,\\dots,b_9],0.123456]$。", "solution": "所提出的问题是计算化学领域中一个明确定义的练习，特别是在分子对接与打分领域。它要求对受体口袋内的一组配体构象，实现并比较两种不同的打分函数。第一个函数 $S_{\\mathrm{emp}}$ 是一个经验分数，为提高计算效率而设计。第二个函数 $E_{\\mathrm{qm}}$ 是一个物理上更精细的模型，包含了极化效应，旨在获得更高的准确性。我们的目标是为十个给定的构象计算这些分数，根据每个分数对构象进行排序，并使用 Spearman 等级相关系数 $\\rho$ 来量化这两个排序之间的一致性。\n\n整个计算在一个约化的无量纲单位体系中进行，其中静电前因子 $k_e$ 为单位一。所有提供的参数和坐标都与该体系一致。\n\n计算过程执行如下：\n首先，将所有提供的关于受体、配体和十个构象的数据存储在适当的数据结构中。我们有 $M=4$ 个受体位点和 $N=3$ 个配体原子。构象的索引为 $p \\in \\{0, 1, \\dots, 9\\}$。\n\n对于每个构象 $p$，我们计算两个分数 $S_{\\mathrm{emp}}^{(p)}$ 和 $E_{\\mathrm{qm}}^{(p)}$。这涉及到遍历所有 $N \\times M$ 对配体原子 $(i)$ 和受体位点 $(j)$。\n\n对于每对 $(i, j)$，我们首先计算距离 $r_{ij}^{(p)} = \\|\\mathbf{r}_{i}^{(p)} - \\mathbf{R}_j\\|$，其中 $\\mathbf{r}_{i}^{(p)}$ 是构象 $p$ 中配体原子 $i$ 的位置，$\\mathbf{R}_j$ 是受体位点 $j$ 的位置。我们还使用提供的混合规则确定组合的 Lennard-Jones 参数：$\\sigma_{ij} = (\\sigma_i + \\sigma_j)/2$ 和 $\\varepsilon_{ij} = \\sqrt{\\varepsilon_i \\varepsilon_j}$。\n\nLennard-Jones 势是范德华相互作用的标准模型，为每对原子计算：\n$$\nU_{ij}^{\\mathrm{LJ}}(r_{ij}^{(p)}) = 4 \\, \\varepsilon_{ij} \\left[ \\left(\\dfrac{\\sigma_{ij}}{r_{ij}^{(p)}}\\right)^{12} - \\left(\\dfrac{\\sigma_{ij}}{r_{ij}^{(p)}}\\right)^{6} \\right]\n$$\n该项对两个打分函数都有贡献，代表短程排斥和中程吸引。\n\n两种打分函数主要在处理静电相互作用方面有所不同。\n\n经验分数 $S_{\\mathrm{emp}}^{(p)}$ 为了计算速度采用了一个简化的模型。它使用一个距离依赖的介电常数 $\\epsilon(r) = d \\cdot r$（其中 $d=4$）来模拟溶剂屏蔽效应。静电相互作用为：\n$$\nU_{ij}^{\\mathrm{el,emp}}(r_{ij}^{(p)}) = \\dfrac{q_i Q_j}{d \\, (r_{ij}^{(p)})^2}\n$$\n此外，$S_{\\mathrm{emp}}^{(p)}$ 包括一个经验疏水项。我们计算疏水接触数 $C^{(p)}$，当一对 $(i,j)$ 的疏水标志为 $h_i=1$ 和 $H_j=1$ 且距离 $r_{ij}^{(p)} \\le r_c = 1.2$ 时，定义为一次接触。该项对分数的贡献为 $-\\gamma \\, C^{(p)}$，其中 $\\gamma = 0.05$。\n一个构象的总经验分数是所有原子对的能量和加上疏水奖励：\n$$\nS_{\\mathrm{emp}}^{(p)} = \\sum_{i=0}^{N-1} \\sum_{j=0}^{M-1} \\left[ U_{ij}^{\\mathrm{LJ}}\\!\\left(r_{ij}^{(p)}\\right) + U_{ij}^{\\mathrm{el,emp}}\\!\\left(r_{ij}^{(p)}\\right) \\right] - \\gamma \\, C^{(p)}\n$$\n\n类 QM 分数 $E_{\\mathrm{qm}}^{(p)}$ 旨在实现更高的物理真实性。它使用基本的未屏蔽库仑定律来计算直接的静电相互作用：\n$$\nU_{ij}^{\\mathrm{el,qm}}(r_{ij}^{(p)}) = \\dfrac{q_i Q_j}{r_{ij}^{(p)}}\n$$\n至关重要的是，该模型还考虑了电子极化，这是一种诱导效应，其中每个分子的电荷分布因另一个分子的电场而扭曲。这是使用一阶近似计算的。首先，计算受体的永久电荷在每个配体原子 $i$ 上施加的电场：\n$$\n\\mathbf{E}_i^{(p)} = \\sum_{j=0}^{M-1} Q_j \\, \\dfrac{\\mathbf{r}_{i}^{(p)} - \\mathbf{R}_j}{\\left(r_{ij}^{(p)}\\right)^3}\n$$\n类似地，来自配体电荷的每个受体位点 $j$ 处的电场为：\n$$\n\\mathbf{E}_j^{(p)} = \\sum_{i=0}^{N-1} q_i \\, \\dfrac{\\mathbf{R}_j - \\mathbf{r}_{i}^{(p)}}{\\left(r_{ij}^{(p)}\\right)^3}\n$$\n然后，极化能是产生这些诱导偶极所做的功：\n$$\nE_{\\mathrm{pol}}^{(p)} = -\\dfrac{1}{2}\\left( \\sum_{i=0}^{N-1} \\alpha_i \\, \\left\\|\\mathbf{E}_i^{(p)}\\right\\|^2 + \\sum_{j=0}^{M-1} \\alpha_j \\, \\left\\|\\mathbf{E}_j^{(p)}\\right\\|^2 \\right)\n$$\n其中 $\\alpha_i$ 和 $\\alpha_j$ 是各向同性极化率。总的类 QM 分数是 Lennard-Jones、未屏蔽库仑和极化能的总和：\n$$\nE_{\\mathrm{qm}}^{(p)} = \\sum_{i=0}^{N-1} \\sum_{j=0}^{M-1} \\left[ U_{ij}^{\\mathrm{LJ}}\\!\\left(r_{ij}^{(p)}\\right) + U_{ij}^{\\mathrm{el,qm}}\\!\\left(r_{ij}^{(p)}\\right) \\right] + E_{\\mathrm{pol}}^{(p)}\n$$\n\n在计算出 $S_{\\mathrm{emp}}^{(p)}$ 和 $E_{\\mathrm{qm}}^{(p)}$ 的 10 个值后，我们对构象进行排序。对于每个打分函数，构象按其分数的升序排序（分数越低越好）。使用一个自定义的排序比较来处理平局：如果两个分数的差值在容差 $\\tau = 10^{-12}$ 以内，则原始索引 $p$ 较小的构象排名更高。这将产生两个构象索引的排序列表。\n\n最后，我们使用 Spearman 等级相关系数 $\\rho$ 来评估这两个排序之间的相关性。对于每个构象 $p$，我们找到它在经验列表中的等级（从 $0$ 到 $9$）$\\text{rank}_{\\mathrm{emp}}(p)$，以及它在类 QM 列表中的等级 $\\text{rank}_{\\mathrm{qm}}(p)$。计算每个构象的等级差的平方 $d_p^2 = (\\text{rank}_{\\mathrm{emp}}(p) - \\text{rank}_{\\mathrm{qm}}(p))^2$。然后，系数由下式给出：\n$$\n\\rho = 1 - \\dfrac{6 \\sum_{p=0}^{9} d_p^2}{n(n^2 - 1)}\n$$\n其中构象数量为 $n=10$。$\\rho$ 的值范围从 $+1$（完全相关）到 $-1$（完全负相关），$0$ 表示不相关。\n\n最终输出将包含两个排序后的构象索引列表和计算出的 $\\rho$ 值，四舍五入到六位小数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom functools import cmp_to_key\n\ndef solve():\n    \"\"\"\n    Computes and compares empirical and QM-like scoring functions for 10 ligand poses.\n    \"\"\"\n    \n    # --- Data Definition ---\n    # Receptor parameters (M=4 sites)\n    receptor_params = {\n        'R': np.array([\n            [0.00, 0.00, 0.00], [1.50, 0.00, 0.20], [0.00, 1.80, -0.30], [-1.40, -0.50, 0.40]\n        ]),\n        'Q': np.array([-0.5, 0.4, 0.0, -0.2]),\n        'sigma': np.array([1.00, 1.00, 1.20, 1.10]),\n        'epsilon': np.array([0.20, 0.20, 0.25, 0.22]),\n        'alpha': np.array([0.10, 0.08, 0.12, 0.09]),\n        'H': np.array([0, 0, 1, 1], dtype=int)\n    }\n    M = 4\n\n    # Ligand parameters (N=3 atoms)\n    ligand_params = {\n        'q': np.array([0.3, -0.2, -0.1]),\n        'sigma': np.array([1.00, 0.90, 0.85]),\n        'epsilon': np.array([0.18, 0.15, 0.14]),\n        'alpha': np.array([0.12, 0.10, 0.09]),\n        'h': np.array([0, 1, 1], dtype=int)\n    }\n    N = 3\n\n    # Ligand poses (10 poses, p=0..9)\n    poses = np.array([\n        [[0.2, 0.4, 0.1], [0.9, 0.4, 0.1], [0.2, 1.1, 0.1]],         # p=0\n        [[0.8, 0.1, 0.2], [1.4, 0.1, 0.2], [0.8, 0.7, 0.2]],         # p=1\n        [[-0.8, -0.2, 0.3], [-0.1, -0.2, 0.3], [-0.8, 0.5, 0.3]],    # p=2\n        [[0.1, 1.2, -0.1], [0.8, 1.2, -0.1], [0.1, 1.9, -0.1]],      # p=3\n        [[0.3, 0.1, 0.0], [0.9, 0.1, 0.0], [0.3, 0.7, 0.0]],         # p=4\n        [[2.5, 2.5, 0.0], [3.2, 2.5, 0.0], [2.5, 3.2, 0.0]],         # p=5\n        [[1.2, -0.1, 0.2], [1.8, -0.1, 0.2], [1.2, 0.6, 0.2]],       # p=6\n        [[-1.0, -0.6, 0.4], [-0.3, -0.6, 0.4], [-1.0, 0.1, 0.4]],    # p=7\n        [[0.1, 0.2, 0.9], [0.8, 0.2, 0.9], [0.1, 0.9, 0.9]],         # p=8\n        [[5.0, 5.0, 5.0], [5.7, 5.0, 5.0], [5.0, 5.7, 5.0]],         # p=9\n    ])\n    num_poses = 10\n\n    # Constants\n    d_diel = 4.0\n    gamma_hydrophobic = 0.05\n    rc_hydrophobic = 1.2\n    tau_tiebreak = 1e-12\n    \n    emp_scores = np.zeros(num_poses)\n    qm_scores = np.zeros(num_poses)\n\n    for p in range(num_poses):\n        S_emp_p = 0.0\n        E_qm_p = 0.0\n        hydrophobic_contacts = 0\n        ligand_E_fields = np.zeros((N, 3))\n        receptor_E_fields = np.zeros((M, 3))\n\n        for i in range(N):\n            for j in range(M):\n                r_vec = poses[p, i, :] - receptor_params['R'][j, :]\n                r_dist = np.linalg.norm(r_vec)\n\n                # Avoid division by zero, though not expected with this data\n                if r_dist < 1e-9:\n                    S_emp_p = float('inf')\n                    E_qm_p = float('inf')\n                    continue\n\n                # Lennard-Jones parameters and energy\n                sigma_ij = (ligand_params['sigma'][i] + receptor_params['sigma'][j]) / 2.0\n                epsilon_ij = np.sqrt(ligand_params['epsilon'][i] * receptor_params['epsilon'][j])\n                ratio = sigma_ij / r_dist\n                U_lj = 4.0 * epsilon_ij * (ratio**12 - ratio**6)\n                \n                # Empirical score terms\n                U_el_emp = (ligand_params['q'][i] * receptor_params['Q'][j]) / (d_diel * r_dist**2)\n                S_emp_p += U_lj + U_el_emp\n                \n                # QM-like score terms\n                U_el_qm = (ligand_params['q'][i] * receptor_params['Q'][j]) / r_dist\n                E_qm_p += U_lj + U_el_qm\n                \n                # Hydrophobic contact\n                if ligand_params['h'][i] == 1 and receptor_params['H'][j] == 1 and r_dist <= rc_hydrophobic:\n                    hydrophobic_contacts += 1\n                \n                # Electric field contributions\n                r_vec_over_r_cubed = r_vec / r_dist**3\n                ligand_E_fields[i, :] += receptor_params['Q'][j] * r_vec_over_r_cubed\n                receptor_E_fields[j, :] -= ligand_params['q'][i] * r_vec_over_r_cubed\n\n\n        # Finalize empirical score\n        S_emp_p -= gamma_hydrophobic * hydrophobic_contacts\n        emp_scores[p] = S_emp_p\n\n        # Finalize QM-like score\n        E_pol = 0.0\n        # Ligand polarization\n        E_i_norm_sq = np.sum(ligand_E_fields**2, axis=1)\n        E_pol -= 0.5 * np.sum(ligand_params['alpha'] * E_i_norm_sq)\n        # Receptor polarization\n        E_j_norm_sq = np.sum(receptor_E_fields**2, axis=1)\n        E_pol -= 0.5 * np.sum(receptor_params['alpha'] * E_j_norm_sq)\n        \n        E_qm_p += E_pol\n        qm_scores[p] = E_qm_p\n\n    # --- Ranking ---\n    def compare_scores(item1, item2):\n        score1, idx1 = item1\n        score2, idx2 = item2\n        if abs(score1 - score2) <= tau_tiebreak:\n            return idx1 - idx2\n        return -1 if score1 < score2 else 1\n\n    emp_scores_with_indices = [(score, i) for i, score in enumerate(emp_scores)]\n    qm_scores_with_indices = [(score, i) for i, score in enumerate(qm_scores)]\n    \n    sorted_emp = sorted(emp_scores_with_indices, key=cmp_to_key(compare_scores))\n    emp_ranking = [item[1] for item in sorted_emp]\n    \n    sorted_qm = sorted(qm_scores_with_indices, key=cmp_to_key(compare_scores))\n    qm_ranking = [item[1] for item in sorted_qm]\n\n    # --- Spearman Correlation ---\n    n = num_poses\n    emp_ranks = {pose_idx: rank for rank, pose_idx in enumerate(emp_ranking)}\n    qm_ranks = {pose_idx: rank for rank, pose_idx in enumerate(qm_ranking)}\n    \n    sum_d_sq = 0.0\n    for p in range(n):\n        d = emp_ranks[p] - qm_ranks[p]\n        sum_d_sq += d**2\n        \n    rho = 1.0 - (6.0 * sum_d_sq) / (n * (n**2 - 1))\n\n    # --- Final Output ---\n    emp_ranking_str = f\"[{','.join(map(str, emp_ranking))}]\"\n    qm_ranking_str = f\"[{','.join(map(str, qm_ranking))}]\"\n    rho_str = f\"{rho:.6f}\"\n    \n    print(f\"[{emp_ranking_str},{qm_ranking_str},{rho_str}]\")\n\n\nsolve()\n```", "id": "2458163"}]}