{"hands_on_practices": [{"introduction": "列纳德-琼斯势是一个简洁而强大的模型，但其特征参数 $ \\epsilon $ 和 $ \\sigma $ 从何而来？在实际应用中，这些参数通常通过拟合更高精度的数据来确定，例如实验测量值或高水平的量子力学计算结果。本节的第一个动手实践将引导您完成这一基本过程，要求您通过最小二乘法拟合，从给定的势能曲线上确定氦二聚体的最优 $ \\epsilon $ 和 $ \\sigma $ 参数 [@problem_id:2466700]。这项练习将让您直接了解经验力场是如何被开发和参数化的。", "problem": "您的任务是编写一个完整的程序，根据提供的势能样本数据，通过非线性最小二乘拟合来估计氦二聚体的伦纳德-琼斯（LJ）参数。模型为标准的伦纳德-琼斯势，其势能作为分离距离的函数由下式给出：\n$$\nV_{\\mathrm{LJ}}(r;\\,\\epsilon,\\sigma) = 4\\,\\epsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^6\\right].\n$$\n此处，$r$ 是原子间距，$\\epsilon$ 是势阱深度（能量尺度），$\\sigma$ 是粒子间势为零时的有限距离（长度尺度）。在本问题中，所有距离 $r$ 均以埃（ångström，记作 $\\mathrm{\\AA}$）为单位，所有能量 $V$ 均以开尔文（Kelvin）为单位（即，以 $k_{\\mathrm{B}}T$ 为单位，其中 $k_{\\mathrm{B}}$ 表示玻尔兹曼常数）。您必须以开尔文报告拟合的 $\\epsilon$，以 $\\mathrm{\\AA}$ 报告拟合的 $\\sigma$。您的拟合必须使用普通最小二乘法，通过最小化 $V_{\\mathrm{LJ}}(r;\\,\\epsilon,\\sigma)$ 与所提供能量值之间的残差平方和来实现。\n\n从以下基本原则出发：\n- 伦纳德-琼斯势是一种广泛用于描述范德华相互作用的经验性驱动模型。\n- 最小二乘拟合通过最小化残差平方和来从数据中估计模型参数。\n\n对于下面的每个数据集，通过求解非线性最小二乘问题来估计 $\\epsilon$ 和 $\\sigma$：\n$$\n\\min_{\\epsilon>0,\\ \\sigma>0}\\ S(\\epsilon,\\sigma) \\equiv \\sum_{i=1}^{N} \\left[V_{\\mathrm{LJ}}(r_i;\\,\\epsilon,\\sigma) - V_i\\right]^2,\n$$\n同时满足具有物理动机的边界条件 $\\epsilon>0$ 和 $\\sigma>0$。按原样使用所提供的数据集（无需额外的缩放或单位转换）。选择合理的算法设置以确保收敛。\n\n数据集（每个数据集包含 $N=10$ 个数据对 $\\{(r_i,V_i)\\}$；距离单位为 $\\mathrm{\\AA}$，能量单位为开尔文）：\n\n- 测试用例A（与标准类氦LJ形状一致的无噪声合成样本）：\n  - $r$: $[\\,2.4,\\ 2.6,\\ 2.8,\\ 3.0,\\ 3.2,\\ 3.6,\\ 4.0,\\ 5.0,\\ 6.0,\\ 8.0\\,]$\n  - $V$: $[\\,27.389,\\ -3.572,\\ -9.999,\\ -9.657,\\ -7.869,\\ -4.568,\\ -2.588,\\ -0.719,\\ -0.242,\\ -0.0435\\,]$\n\n- 测试用例B（具有略微不同的类氦LJ形状的无噪声合成样本）：\n  - $r$: $[\\,2.4,\\ 2.6,\\ 2.8,\\ 3.0,\\ 3.2,\\ 3.6,\\ 4.0,\\ 5.0,\\ 6.0,\\ 8.0\\,]$\n  - $V$: $[\\,37.863,\\ 0.0,\\ -8.740,\\ -9.310,\\ -7.795,\\ -4.640,\\ -2.653,\\ -0.7376,\\ -0.2506,\\ -0.04484\\,]$\n\n- 测试用例C（带有小的、固定的微扰以模拟微小的从头算偏差的合成样本）：\n  - $r$: $[\\,2.4,\\ 2.6,\\ 2.8,\\ 3.0,\\ 3.2,\\ 3.6,\\ 4.0,\\ 5.0,\\ 6.0,\\ 8.0\\,]$\n  - $V$: $[\\,27.539,\\ -3.692,\\ -9.949,\\ -9.577,\\ -7.959,\\ -4.548,\\ -2.618,\\ -0.709,\\ -0.257,\\ -0.0435\\,]$\n\n您的程序必须：\n- 使用有界非线性最小二乘法（边界为 $\\epsilon>0$ 和 $\\sigma>0$）独立地拟合每个数据集。\n- 使用仅从所提供数据中推导出的初始猜测值（例如，使用吸引力最强的点来估计初始势阱深度，并使用相应的距离来初始化长度尺度）。\n- 为 $\\epsilon$（单位：开尔文）和 $\\sigma$（单位：$\\mathrm{\\AA}$）生成保留三位小数的结果。\n\n输出规格：\n- 最终输出必须是单行，包含一个含三个元素的列表，每个元素本身是一个双元素列表 $[\\epsilon,\\sigma]$，按A、B、C的顺序对应于相应的测试用例。\n- 最后一行必须严格按照逗号分隔列表的形式打印，不含空格，数值四舍五入到三位小数，例如：\n  - $[[\\epsilon_A,\\sigma_A],[\\epsilon_B,\\sigma_B],[\\epsilon_C,\\sigma_C]]$\n- 单位：报告的 $\\epsilon$ 以开尔文为单位，$\\sigma$ 以 $\\mathrm{\\AA}$ 为单位，各自四舍五入到三位小数。\n\n您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔列表形式的结果（例如，`[[\\epsilon_A,\\sigma_A],[\\epsilon_B,\\sigma_B],[\\epsilon_C,\\sigma_C]]`），每个数值条目四舍五入到三位小数，且不打印任何额外文本。", "solution": "所述问题在科学上是合理的、适定的，并包含获得唯一解所需的所有信息。这是非线性回归在计算化学领域的标准应用。其目标是确定伦纳德-琼斯势模型的最佳参数 $(\\epsilon, \\sigma)$，\n$$\nV_{\\mathrm{LJ}}(r;\\,\\epsilon,\\sigma) = 4\\,\\epsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{12} - \\left(\\frac{\\sigma}{r}\\right)^6\\right]\n$$\n针对3个不同的数据集。最优性准则是最小化残差平方和 $S(\\epsilon, \\sigma)$，其定义如下：\n$$\nS(\\epsilon,\\sigma) = \\sum_{i=1}^{N} \\left[V_{\\mathrm{LJ}}(r_i;\\,\\epsilon,\\sigma) - V_i\\right]^2\n$$\n其中 $\\{(r_i, V_i)\\}$ 是每种情况下提供的数据点，共有 $N=10$ 个。参数的搜索受制于物理上必需的约束条件 $\\epsilon > 0$ 和 $\\sigma > 0$。\n\n该解决方案通过采用一种用于有界非线性最小二乘优化的数值算法来实现。`scipy.optimize` 库中的 `curve_fit` 函数非常适合此任务，因为它就是为将函数拟合到数据而设计的。对每个数据集的处理流程如下：\n\n1. **模型函数实现**：将伦纳德-琼斯势 $V_{\\mathrm{LJ}}(r, \\epsilon, \\sigma)$ 定义为一个 Python 函数，该函数接受自变量 $r$（作为 NumPy 数组）以及待拟合的参数 $\\epsilon$ 和 $\\sigma$。\n\n2. **初始参数估计**：根据规定，从所提供的数据中推导出用于迭代优化过程的稳健初始猜测值 $(\\epsilon_0, \\sigma_0)$。\n    -   伦纳德-琼斯势的最小值位于 $r_m = 2^{1/6}\\sigma$ 处，其值为 $V_{\\mathrm{LJ}}(r_m) = -\\epsilon$。因此，我们可以通过在数据集中找到最小势能值 $V_{\\text{min}}$ 来近似势阱深度 $\\epsilon$。$\\epsilon$ 的初始猜测值设为 $\\epsilon_0 = -V_{\\text{min}}$。\n    -   该最小值所对应的原子间距 $r_{\\text{min}}$ 用于估计 $\\sigma$。根据关系式 $r_m = 2^{1/6}\\sigma$，$\\sigma$ 的初始猜测值设为 $\\sigma_0 = r_{\\text{min}} / 2^{1/6}$。这种数据驱动的方法提供了一个物理上相关且接近预期解的起点，从而促进数值求解器的稳健收敛。\n\n3. **有界优化**：调用 `curve_fit` 函数，并传入模型函数、实验数据 $(r_i, V_i)$、初始猜测值 $(\\epsilon_0, \\sigma_0)$ 以及所需的参数边界。$\\epsilon$ 和 $\\sigma$ 的下界均设为 $0$ 以强制执行约束条件 $\\epsilon > 0$ 和 $\\sigma > 0$。上界设为 $\\infty$。然后，该函数使用适用于有界问题的信赖域反射算法（Trust Region Reflective algorithm），通过迭代调整 $(\\epsilon, \\sigma)$ 来最小化残差平方和 $S(\\epsilon, \\sigma)$。\n\n4. **结果汇总**：收集优化过程为3个测试用例分别返回的最优参数 $[\\epsilon, \\sigma]$。这些值分别代表以开尔文为单位的势阱深度和以埃为单位的长度尺度，在格式化为最终输出之前，按照问题陈述中的要求四舍五入到3位小数。\n\n这个系统性的流程确保所确定的参数在最小二乘准则下代表了伦纳德-琼斯模型对给定数据的最佳拟合，同时遵守了模型的物理约束。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Fits Lennard-Jones parameters to potential energy data for three test cases\n    and prints the results in the specified format.\n    \"\"\"\n    \n    # Define the Lennard-Jones potential function.\n    # r: interatomic distance\n    # epsilon: well depth\n    # sigma: finite-distance at which potential is zero\n    def lennard_jones_potential(r, epsilon, sigma):\n        # The term (sigma/r) is pre-calculated for efficiency.\n        sig_r = sigma / r\n        sig_r6 = sig_r**6\n        sig_r12 = sig_r6**2\n        return 4 * epsilon * (sig_r12 - sig_r6)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"name\": \"A\",\n            \"r\": np.array([2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0, 8.0]),\n            \"V\": np.array([27.389, -3.572, -9.999, -9.657, -7.869, -4.568, -2.588, -0.719, -0.242, -0.0435]),\n        },\n        {\n            \"name\": \"B\",\n            \"r\": np.array([2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0, 8.0]),\n            \"V\": np.array([37.863, 0.0, -8.740, -9.310, -7.795, -4.640, -2.653, -0.7376, -0.2506, -0.04484]),\n        },\n        {\n            \"name\": \"C\",\n            \"r\": np.array([2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0, 8.0]),\n            \"V\": np.array([27.539, -3.692, -9.949, -9.577, -7.959, -4.548, -2.618, -0.709, -0.257, -0.0435]),\n        }\n    ]\n\n    results = []\n    \n    # Process each test case.\n    for case in test_cases:\n        r_data = case[\"r\"]\n        v_data = case[\"V\"]\n\n        # Derive initial guesses from the data as required.\n        # Find the minimum potential energy and its corresponding distance.\n        min_v_idx = np.argmin(v_data)\n        v_min = v_data[min_v_idx]\n        r_at_v_min = r_data[min_v_idx]\n\n        # Initial guess for epsilon: epsilon_0 = -V_min.\n        epsilon_0 = -v_min\n        # Initial guess for sigma: from r_m = 2^(1/6) * sigma.\n        sigma_0 = r_at_v_min / (2**(1/6))\n        \n        initial_guess = [epsilon_0, sigma_0]\n\n        # Define bounds for the parameters: epsilon > 0, sigma > 0.\n        bounds = ([0, 0], [np.inf, np.inf])\n\n        # Perform the nonlinear least-squares fit.\n        popt, _ = curve_fit(\n            lennard_jones_potential,\n            r_data,\n            v_data,\n            p0=initial_guess,\n            bounds=bounds,\n        )\n        \n        # The result popt contains the fitted [epsilon, sigma].\n        results.append(popt)\n\n    # Format the results into the required string format with 3 decimal places.\n    # e.g., [[epsilon_A,sigma_A],[epsilon_B,sigma_B],[epsilon_C,sigma_C]]\n    formatted_pairs = [f\"[{p[0]:.3f},{p[1]:.3f}]\" for p in results]\n    final_output_string = f\"[{','.join(formatted_pairs)}]\"\n    \n    # Final print statement in the exact required format.\n    print(final_output_string)\n\nsolve()\n```", "id": "2466700"}, {"introduction": "除了静态结构，列纳德-琼斯势还允许我们计算动态和热力学性质。一个关键的例子是压力，它可以通过维里定理进行计算，从而直接与粒子间的力联系起来。这项实践要求您探究如何通过改变势能排斥部分的“硬度”（从 $r^{-12}$ 改为 $r^{-9}$）来影响体系的压力，从而让您对势能的不同组成部分如何贡献于宏观性质有一个切实的理解 [@problem_id:2466657]。", "problem": "给定一个稠密经典流体，其处于一个体积为 $V$ 的立方周期性盒子中，包含 $N$ 个通过对中心势相互作用的相同粒子。该系统的机械压力 $P$ 可通过组态维里恒等式表示为\n$$\nP \\;=\\; \\rho\\,k_{\\mathrm{B}}T \\;+\\; \\frac{1}{3V}\\sum_{i&lt;j}\\,\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij},\n$$\n其中 $\\rho = N/V$ 是数密度，$k_{\\mathrm{B}}$ 是玻尔兹曼常数，$T$ 是绝对温度，$\\mathbf{r}_{ij}$ 是在周期性边界条件下从粒子 $i$ 到 $j$ 的最小镜像位移矢量，$\\mathbf{F}_{ij}$ 是粒子 $j$ 施加于粒子 $i$ 的力。对于一个各向同性对势 $u(r)$，其对力为 $\\mathbf{F}_{ij} = -\\dfrac{\\mathrm{d}u(r)}{\\mathrm{d}r}\\,\\hat{\\mathbf{r}}_{ij}$，其中粒子间距为 $r=\\lVert \\mathbf{r}_{ij}\\rVert$，单位矢量为 $\\hat{\\mathbf{r}}_{ij}=\\mathbf{r}_{ij}/r$。使用约化的 Lennard-Jones 单位，其中 $k_{\\mathrm{B}}=1$、$\\varepsilon=1$ 和 $\\sigma=1$，并在有限的截断半径 $r_c$ 处截断对相互作用，使得当 $r\\ge r_c$ 时，$\\mathbf{F}_{ij}=\\mathbf{0}$ 且 $u(r)=0$；不要应用任何势或力的移位或解析性尾部校正。\n\n考虑两种 Lennard-Jones 类型的对势，\n$$\nu_{12\\text{-}6}(r)=4\\varepsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{12}-\\left(\\frac{\\sigma}{r}\\right)^{6}\\right],\n\\qquad\nu_{9\\text{-}6}(r)=4\\varepsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{9}-\\left(\\frac{\\sigma}{r}\\right)^{6}\\right].\n$$\n对于给定的状态点和粒子构型，定义 $\\Delta P = P_{12\\text{-}6}-P_{9\\text{-}6}$，即在相同构型下，使用 $u_{12\\text{-}6}$ 和 $u_{9\\text{-}6}$ 计算出的瞬时机械压力之差。\n\n粒子构型构建：对于每个测试用例，给定整数 $n\\ge 2$，设 $N=n^3$。设立方盒子边长为 $L = (N/\\rho)^{1/3}$，因此 $V=L^3$。将粒子放置在 $n\\times n\\times n$ 点的简单立方晶格上，其位置为\n$$\n\\mathbf{r}_{ijk}=\\big((i+\\tfrac{1}{2})a,\\,(j+\\tfrac{1}{2})a,\\,(k+\\tfrac{1}{2})a\\big),\n$$\n其中整数 $i,j,k\\in\\{0,1,\\dots,n-1\\}$，晶格间距为 $a=L/n$。对于维里和中的所有对间距，请使用周期性边界条件下的最小镜像约定。本问题不涉及角度。所有量均采用约化的 Lennard-Jones 单位，您的程序必须以 $\\varepsilon/\\sigma^3$ 为单位报告压力。\n\n任务：对于下面的每个测试用例，按规定构建构型，在给定的 $(\\rho,T,r_c)$ 下计算 $P_{12\\text{-}6}$ 和 $P_{9\\text{-}6}$，并报告四舍五入到六位小数的 $\\Delta P$。\n\n测试套件（每个用例为 $(n,\\rho,T,r_c)$）：\n- 用例 A: $(n=\\;4,\\;\\rho=\\;0.85,\\;T=\\;1.0,\\;r_c=\\;2.5)$\n- 用例 B: $(n=\\;3,\\;\\rho=\\;1.10,\\;T=\\;1.0,\\;r_c=\\;2.5)$\n- 用例 C: $(n=\\;4,\\;\\rho=\\;0.30,\\;T=\\;3.0,\\;r_c=\\;2.5)$\n- 用例 D: $(n=\\;3,\\;\\rho=\\;0.85,\\;T=\\;0.10,\\;r_c=\\;2.5)$\n\n最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，顺序为 [用例 A, 用例 B, 用例 C, 用例 D]，例如，“[0.123456,-0.234567,0.000000,1.234568]”。将每个条目表示为四舍五入到小数点后六位的小数。", "solution": "该问题要求计算 $\\Delta P = P_{12\\text{-}6} - P_{9\\text{-}6}$，这是两个由不同 Lennard-Jones 类型势描述的系统之间的瞬时机械压力差，但评估是在相同状态点的完全相同的粒子构型上进行的。\n\n机械压力 $P$ 由维里表达式给出：\n$$\nP = \\rho k_{\\mathrm{B}}T + \\frac{1}{3V}\\sum_{i<j}\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij}\n$$\n此处，$\\rho = N/V$ 是数密度，$k_{\\mathrm{B}}$ 是玻尔兹曼常数，$T$ 是温度，$V$ 是体积，$\\mathbf{r}_{ij}$ 是粒子 $i$ 和 $j$ 之间的最小镜像位移矢量，$\\mathbf{F}_{ij}$ 是粒子 $j$ 施加于粒子 $i$ 的力。该问题使用约化的 Lennard-Jones 单位，其中 $k_{\\mathrm{B}}=1$、$\\varepsilon=1$ 和 $\\sigma=1$。\n\n压力差 $\\Delta P$ 为：\n$$\n\\Delta P = P_{12\\text{-}6} - P_{9\\text{-}6} = \\left(\\rho T + W_{12\\text{-}6}\\right) - \\left(\\rho T + W_{9\\text{-}6}\\right)\n$$\n其中 $W$ 是对压力的维里贡献，$W = \\frac{1}{3V}\\sum_{i<j}\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij}$。由于两次计算的密度 $\\rho$、温度 $T$ 和体积 $V$ 均相同，理想气体项 $\\rho T$ 相互抵消。因此，压力差仅取决于维里项的差值：\n$$\n\\Delta P = W_{12\\text{-}6} - W_{9\\text{-}6} = \\frac{1}{3V}\\sum_{i<j} \\left( \\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij, 12\\text{-}6} - \\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij, 9\\text{-}6} \\right)\n$$\n点积 $\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij}$ 被称为粒子对维里。对于一个中心、各向同性对势 $u(r)$，力为 $\\mathbf{F}_{ij} = -\\frac{\\mathrm{d}u(r)}{\\mathrm{d}r}\\hat{\\mathbf{r}}_{ij}$，其中 $r = \\lVert \\mathbf{r}_{ij}\\rVert$ 且 $\\hat{\\mathbf{r}}_{ij} = \\mathbf{r}_{ij}/r$。粒子对维里变为：\n$$\n\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij} = \\mathbf{r}_{ij} \\cdot \\left(-\\frac{\\mathrm{d}u(r_{ij})}{\\mathrm{d}r} \\frac{\\mathbf{r}_{ij}}{r_{ij}}\\right) = -r_{ij} \\frac{\\mathrm{d}u(r_{ij})}{\\mathrm{d}r} \\equiv w(r_{ij})\n$$\n现在我们必须在约化单位（$\\varepsilon=1, \\sigma=1$）下为每种势推导粒子对维里 $w(r)$。\n\n对于标准 Lennard-Jones 势，$u_{12\\text{-}6}(r) = 4(r^{-12} - r^{-6})$：\n$$\n\\frac{\\mathrm{d}u_{12\\text{-}6}}{\\mathrm{d}r} = 4(-12r^{-13} + 6r^{-7}) = 24(-2r^{-13} + r^{-7})\n$$\n$$\nw_{12\\text{-}6}(r) = -r \\frac{\\mathrm{d}u_{12\\text{-}6}}{\\mathrm{d}r} = -r \\cdot 24(-2r^{-13} + r^{-7}) = 48r^{-12} - 24r^{-6}\n$$\n对于另一种 Lennard-Jones 类型势，$u_{9\\text{-}6}(r) = 4(r^{-9} - r^{-6})$：\n$$\n\\frac{\\mathrm{d}u_{9\\text{-}6}}{\\mathrm{d}r} = 4(-9r^{-10} + 6r^{-7})\n$$\n$$\nw_{9\\text{-}6}(r) = -r \\frac{\\mathrm{d}u_{9\\text{-}6}}{\\mathrm{d}r} = -r \\cdot 4(-9r^{-10} + 6r^{-7}) = 36r^{-9} - 24r^{-6}\n$$\n粒子对维里之差 $\\Delta w(r) = w_{12\\text{-}6}(r) - w_{9\\text{-}6}(r)$ 为：\n$$\n\\Delta w(r) = (48r^{-12} - 24r^{-6}) - (36r^{-9} - 24r^{-6}) = 48r^{-12} - 36r^{-9}\n$$\n那么，总压力差就是对所有在截断半径 $r_c$ 内的唯一粒子对，将其粒子对级别差异求和，然后除以 $3V$：\n$$\n\\Delta P = \\frac{1}{3V} \\sum_{i<j, \\, r_{ij} < r_c} \\left( 48r_{ij}^{-12} - 36r_{ij}^{-9} \\right)\n$$\n计算步骤如下：\n1.  对于由 $(n, \\rho, T, r_c)$ 给出的每个测试用例，计算系统参数：粒子数 $N = n^3$，体积 $V = N/\\rho$，以及盒子边长 $L = V^{1/3}$。晶格间距为 $a=L/n$。请注意，在固定构型上计算 $\\Delta P$ 时不需要温度 $T$。\n2.  按照规定在简单立方晶格上生成 $N$ 个粒子的坐标：$\\mathbf{r}_{ijk}=\\big((i+\\tfrac{1}{2})a,\\,(j+\\tfrac{1}{2})a,\\,(k+\\tfrac{1}{2})a\\big)$，其中 $i,j,k \\in \\{0, 1, \\dots, n-1\\}$。\n3.  初始化一个变量用于总维里差和，$\\Delta W_{\\text{sum}} = 0$。\n4.  遍历所有唯一的粒子对 $(i, j)$（其中 $i < j$）。对于每一对：\n    a. 计算位移矢量 $\\Delta\\mathbf{r} = \\mathbf{r}_j - \\mathbf{r}_i$。\n    b. 对 $\\Delta\\mathbf{r}$ 的每个分量应用最小镜像约定，以找到连接周期性盒子中粒子的最短矢量 $\\mathbf{r}_{ij}$。一个分量 $\\Delta r_k$ 映射为 $\\Delta r_k - L \\cdot \\text{round}(\\Delta r_k / L)$。\n    c. 计算距离的平方 $r_{ij}^2 = \\lVert \\mathbf{r}_{ij} \\rVert^2$。\n    d. 如果 $r_{ij}^2 < r_c^2$，则计算粒子对间距 $r_{ij} = \\sqrt{r_{ij}^2}$，计算维里差 $\\Delta w(r_{ij}) = 48r_{ij}^{-12} - 36r_{ij}^{-9}$，并将其加到 $\\Delta W_{\\text{sum}}$ 上。\n5.  遍历所有粒子对后，计算最终压力差 $\\Delta P = \\Delta W_{\\text{sum}} / (3V)$。\n6.  每个用例的结果都四舍五入到六位小数。\n该算法直接实现了针对给定静态晶体构型推导出的物理公式。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the difference in instantaneous mechanical pressure between\n    two Lennard-Jones-type potentials for several test cases on a\n    static lattice configuration.\n    \"\"\"\n    # Test suite (each case is (n, rho, T, r_c))\n    test_cases = [\n        (4, 0.85, 1.0, 2.5),  # Case A\n        (3, 1.10, 1.0, 2.5),  # Case B\n        (4, 0.30, 3.0, 2.5),  # Case C\n        (3, 0.85, 0.10, 2.5),  # Case D\n    ]\n\n    results = []\n    for case in test_cases:\n        n, rho, T, r_c = case\n\n        # System parameters are derived from the given inputs.\n        # The temperature T is not needed for the calculation on a static configuration.\n        N = n**3\n        V = N / rho\n        L = V**(1.0/3.0)\n        a = L / n\n\n        # Particle configuration is constructed on a simple cubic lattice.\n        coords = np.zeros((N, 3), dtype=np.float64)\n        p_idx = 0\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    coords[p_idx] = np.array([\n                        (i + 0.5) * a, \n                        (j + 0.5) * a, \n                        (k + 0.5) * a\n                    ], dtype=np.float64)\n                    p_idx += 1\n\n        # The calculation of the virial sum difference is performed.\n        total_delta_virial_sum = 0.0\n        r_c_sq = r_c**2\n        \n        # A double loop iterates over all unique pairs of particles (i, j) with i < j.\n        for i in range(N):\n            for j in range(i + 1, N):\n                # The displacement vector is calculated.\n                rij_vec = coords[j] - coords[i]\n\n                # The minimum image convention is applied to the displacement vector.\n                # np.rint rounds to the nearest integer, with .5 cases rounding to the nearest even integer.\n                rij_vec = rij_vec - L * np.rint(rij_vec / L)\n                \n                # The squared distance of the minimum image vector is computed.\n                r_sq = np.sum(rij_vec**2)\n\n                # The pair's contribution is included only if it is within the cutoff radius.\n                if r_sq < r_c_sq:\n                    # The pair virial difference term is calculated and added to the sum.\n                    # Delta_w(r) = 48*r^(-12) - 36*r^(-9)\n                    r = np.sqrt(r_sq)\n                    delta_w = 48.0 * pow(r, -12) - 36.0 * pow(r, -9)\n                    total_delta_virial_sum += delta_w\n        \n        # The final pressure difference is calculated from the total virial sum.\n        # Delta_P = total_delta_virial_sum / (3 * V)\n        delta_P = total_delta_virial_sum / (3.0 * V)\n\n        # The result is formatted to six decimal places.\n        results.append(f\"{delta_P:.6f}\")\n\n    # The final output is printed in the specified format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2466632"}, {"introduction": "除了静态结构，列纳德-琼斯势还允许我们计算动态和热力学性质。一个关键的例子是压力，它可以通过维里定理进行计算，从而直接与粒子间的力联系起来。这项实践要求您探究如何通过改变势能排斥部分的“硬度”（从 $r^{-12}$ 改为 $r^{-9}$）来影响体系的压力，从而让您对势能的不同组成部分如何贡献于宏观性质有一个切实的理解 [@problem_id:2466657]。", "problem": "给定一个稠密经典流体，其处于一个体积为 $V$ 的立方周期性盒子中，包含 $N$ 个通过对中心势相互作用的相同粒子。该系统的机械压力 $P$ 可通过组态维里恒等式表示为\n$$\nP \\;=\\; \\rho\\,k_{\\mathrm{B}}T \\;+\\; \\frac{1}{3V}\\sum_{i<j}\\,\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij},\n$$\n其中 $\\rho = N/V$ 是数密度，$k_{\\mathrm{B}}$ 是玻尔兹曼常数，$T$ 是绝对温度，$\\mathbf{r}_{ij}$ 是在周期性边界条件下从粒子 $i$ 到 $j$ 的最小镜像位移矢量，$\\mathbf{F}_{ij}$ 是粒子 $j$ 施加于粒子 $i$ 的力。对于一个各向同性对势 $u(r)$，其对力为 $\\mathbf{F}_{ij} = -\\dfrac{\\mathrm{d}u(r)}{\\mathrm{d}r}\\,\\hat{\\mathbf{r}}_{ij}$，其中粒子间距为 $r=\\lVert \\mathbf{r}_{ij}\\rVert$，单位矢量为 $\\hat{\\mathbf{r}}_{ij}=\\mathbf{r}_{ij}/r$。使用约化的 Lennard-Jones 单位，其中 $k_{\\mathrm{B}}=1$、$\\varepsilon=1$ 和 $\\sigma=1$，并在有限的截断半径 $r_c$ 处截断对相互作用，使得当 $r\\ge r_c$ 时，$\\mathbf{F}_{ij}=\\mathbf{0}$ 且 $u(r)=0$；不要应用任何势或力的移位或解析性尾部校正。\n\n考虑两种 Lennard-Jones 类型的对势，\n$$\nu_{12\\text{-}6}(r)=4\\varepsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{12}-\\left(\\frac{\\sigma}{r}\\right)^{6}\\right],\n\\qquad\nu_{9\\text{-}6}(r)=4\\varepsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{9}-\\left(\\frac{\\sigma}{r}\\right)^{6}\\right].\n$$\n对于给定的状态点和粒子构型，定义 $\\Delta P = P_{12\\text{-}6}-P_{9\\text{-}6}$，即在相同构型下，使用 $u_{12\\text{-}6}$ 和 $u_{9\\text{-}6}$ 计算出的瞬时机械压力之差。\n\n粒子构型构建：对于每个测试用例，给定整数 $n\\ge 2$，设 $N=n^3$。设立方盒子边长为 $L = (N/\\rho)^{1/3}$，因此 $V=L^3$。将粒子放置在 $n\\times n\\times n$ 点的简单立方晶格上，其位置为\n$$\n\\mathbf{r}_{ijk}=\\big((i+\\tfrac{1}{2})a,\\,(j+\\tfrac{1}{2})a,\\,(k+\\tfrac{1}{2})a\\big),\n$$\n其中整数 $i,j,k\\in\\{0,1,\\dots,n-1\\}$，晶格间距为 $a=L/n$。对于维里和中的所有对间距，请使用周期性边界条件下的最小镜像约定。本问题不涉及角度。所有量均采用约化的 Lennard-Jones 单位，您的程序必须以 $\\varepsilon/\\sigma^3$ 为单位报告压力。\n\n任务：对于下面的每个测试用例，按规定构建构型，在给定的 $(\\rho,T,r_c)$ 下计算 $P_{12\\text{-}6}$ 和 $P_{9\\text{-}6}$，并报告四舍五入到六位小数的 $\\Delta P$。\n\n测试套件（每个用例为 $(n,\\rho,T,r_c)$）：\n- 用例 A: $(n=\\;4,\\;\\rho=\\;0.85,\\;T=\\;1.0,\\;r_c=\\;2.5)$\n- 用例 B: $(n=\\;3,\\;\\rho=\\;1.10,\\;T=\\;1.0,\\;r_c=\\;2.5)$\n- 用例 C: $(n=\\;4,\\;\\rho=\\;0.30,\\;T=\\;3.0,\\;r_c=\\;2.5)$\n- 用例 D: $(n=\\;3,\\;\\rho=\\;0.85,\\;T=\\;0.10,\\;r_c=\\;2.5)$\n\n最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，顺序为 [用例 A, 用例 B, 用例 C, 用例 D]，例如，“[0.123456,-0.234567,0.000000,1.234568]”。将每个条目表示为四舍五入到小数点后六位的小数。", "solution": "该问题要求计算 $\\Delta P = P_{12\\text{-}6} - P_{9\\text{-}6}$，这是两个由不同 Lennard-Jones 类型势描述的系统之间的瞬时机械压力差，但评估是在相同状态点的完全相同的粒子构型上进行的。\n\n机械压力 $P$ 由维里表达式给出：\n$$\nP = \\rho k_{\\mathrm{B}}T + \\frac{1}{3V}\\sum_{i<j}\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij}\n$$\n此处，$\\rho = N/V$ 是数密度，$k_{\\mathrm{B}}$ 是玻尔兹曼常数，$T$ 是温度，$V$ 是体积，$\\mathbf{r}_{ij}$ 是粒子 $i$ 和 $j$ 之间的最小镜像位移矢量，$\\mathbf{F}_{ij}$ 是粒子 $j$ 施加于粒子 $i$ 的力。该问题使用约化的 Lennard-Jones 单位，其中 $k_{\\mathrm{B}}=1$、$\\varepsilon=1$ 和 $\\sigma=1$。\n\n压力差 $\\Delta P$ 为：\n$$\n\\Delta P = P_{12\\text{-}6} - P_{9\\text{-}6} = \\left(\\rho T + W_{12\\text{-}6}\\right) - \\left(\\rho T + W_{9\\text{-}6}\\right)\n$$\n其中 $W$ 是对压力的维里贡献，$W = \\frac{1}{3V}\\sum_{i<j}\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij}$。由于两次计算的密度 $\\rho$、温度 $T$ 和体积 $V$ 均相同，理想气体项 $\\rho T$ 相互抵消。因此，压力差仅取决于维里项的差值：\n$$\n\\Delta P = W_{12\\text{-}6} - W_{9\\text{-}6} = \\frac{1}{3V}\\sum_{i<j} \\left( \\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij, 12\\text{-}6} - \\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij, 9\\text{-}6} \\right)\n$$\n点积 $\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij}$ 被称为粒子对维里。对于一个中心、各向同性对势 $u(r)$，力为 $\\mathbf{F}_{ij} = -\\frac{\\mathrm{d}u(r)}{\\mathrm{d}r}\\hat{\\mathbf{r}}_{ij}$，其中 $r = \\lVert \\mathbf{r}_{ij}\\rVert$ 且 $\\hat{\\mathbf{r}}_{ij} = \\mathbfr_{ij}/r$。粒子对维里变为：\n$$\n\\mathbf{r}_{ij}\\cdot\\mathbf{F}_{ij} = \\mathbf{r}_{ij} \\cdot \\left(-\\frac{\\mathrm{d}u(r_{ij})}{\\mathrm{d}r} \\frac{\\mathbf{r}_{ij}}{r_{ij}}\\right) = -r_{ij} \\frac{\\mathrm{d}u(r_{ij})}{\\mathrm{d}r} \\equiv w(r_{ij})\n$$\n现在我们必须在约化单位（$\\varepsilon=1, \\sigma=1$）下为每种势推导粒子对维里 $w(r)$。\n\n对于标准 Lennard-Jones 势，$u_{12\\text{-}6}(r) = 4(r^{-12} - r^{-6})$：\n$$\n\\frac{\\mathrm{d}u_{12\\text{-}6}}{\\mathrm{d}r} = 4(-12r^{-13} + 6r^{-7}) = 24(-2r^{-13} + r^{-7})\n$$\n$$\nw_{12\\text{-}6}(r) = -r \\frac{\\mathrm{d}u_{12\\text{-}6}}{\\mathrm{d}r} = -r \\cdot 24(-2r^{-13} + r^{-7}) = 48r^{-12} - 24r^{-6}\n$$\n对于另一种 Lennard-Jones 类型势，$u_{9\\text{-}6}(r) = 4(r^{-9} - r^{-6})$：\n$$\n\\frac{\\mathrm{d}u_{9\\text{-}6}}{\\mathrm{d}r} = 4(-9r^{-10} + 6r^{-7})\n$$\n$$\nw_{9\\text{-}6}(r) = -r \\frac{\\mathrm{d}u_{9\\text{-}6}}{\\mathrm{d}r} = -r \\cdot 4(-9r^{-10} + 6r^{-7}) = 36r^{-9} - 24r^{-6}\n$$\n粒子对维里之差 $\\Delta w(r) = w_{12\\text{-}6}(r) - w_{9\\text{-}6}(r)$ 为：\n$$\n\\Delta w(r) = (48r^{-12} - 24r^{-6}) - (36r^{-9} - 24r^{-6}) = 48r^{-12} - 36r^{-9}\n$$\n那么，总压力差就是对所有在截断半径 $r_c$ 内的唯一粒子对，将其粒子对级别差异求和，然后除以 $3V$：\n$$\n\\Delta P = \\frac{1}{3V} \\sum_{i<j, \\, r_{ij} < r_c} \\left( 48r_{ij}^{-12} - 36r_{ij}^{-9} \\right)\n$$\n计算步骤如下：\n1.  对于由 $(n, \\rho, T, r_c)$ 给出的每个测试用例，计算系统参数：粒子数 $N = n^3$，体积 $V = N/\\rho$，以及盒子边长 $L = V^{1/3}$。晶格间距为 $a=L/n$。请注意，在固定构型上计算 $\\Delta P$ 时不需要温度 $T$。\n2.  按照规定在简单立方晶格上生成 $N$ 个粒子的坐标：$\\mathbf{r}_{ijk}=\\big((i+\\tfrac{1}{2})a,\\,(j+\\tfrac{1}{2})a,\\,(k+\\tfrac{1}{2})a\\big)$，其中 $i,j,k \\in \\{0, 1, \\dots, n-1\\}$。\n3.  初始化一个变量用于总维里差和，$\\Delta W_{\\text{sum}} = 0$。\n4.  遍历所有唯一的粒子对 $(i, j)$（其中 $i < j$）。对于每一对：\n    a. 计算位移矢量 $\\Delta\\mathbf{r} = \\mathbf{r}_j - \\mathbf{r}_i$。\n    b. 对 $\\Delta\\mathbf{r}$ 的每个分量应用最小镜像约定，以找到连接周期性盒子中粒子的最短矢量 $\\mathbf{r}_{ij}$。一个分量 $\\Delta r_k$ 映射为 $\\Delta r_k - L \\cdot \\text{round}(\\Delta r_k / L)$。\n    c. 计算距离的平方 $r_{ij}^2 = \\lVert \\mathbf{r}_{ij} \\rVert^2$。\n    d. 如果 $r_{ij}^2 < r_c^2$，则计算粒子对间距 $r_{ij} = \\sqrt{r_{ij}^2}$，计算维里差 $\\Delta w(r_{ij}) = 48r_{ij}^{-12} - 36r_{ij}^{-9}$，并将其加到 $\\Delta W_{\\text{sum}}$ 上。\n5.  遍历所有粒子对后，计算最终压力差 $\\Delta P = \\Delta W_{\\text{sum}} / (3V)$。\n6.  每个用例的结果都四舍五入到六位小数。\n该算法直接实现了针对给定静态晶体构型推导出的物理公式。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the difference in instantaneous mechanical pressure between\n    two Lennard-Jones-type potentials for several test cases on a\n    static lattice configuration.\n    \"\"\"\n    # Test suite (each case is (n, rho, T, r_c))\n    test_cases = [\n        (4, 0.85, 1.0, 2.5),  # Case A\n        (3, 1.10, 1.0, 2.5),  # Case B\n        (4, 0.30, 3.0, 2.5),  # Case C\n        (3, 0.85, 0.10, 2.5),  # Case D\n    ]\n\n    results = []\n    for case in test_cases:\n        n, rho, T, r_c = case\n\n        # System parameters are derived from the given inputs.\n        # The temperature T is not needed for the calculation on a static configuration.\n        N = n**3\n        V = N / rho\n        L = V**(1.0/3.0)\n        a = L / n\n\n        # Particle configuration is constructed on a simple cubic lattice.\n        coords = np.zeros((N, 3), dtype=np.float64)\n        p_idx = 0\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    coords[p_idx] = np.array([\n                        (i + 0.5) * a, \n                        (j + 0.5) * a, \n                        (k + 0.5) * a\n                    ], dtype=np.float64)\n                    p_idx += 1\n\n        # The calculation of the virial sum difference is performed.\n        total_delta_virial_sum = 0.0\n        r_c_sq = r_c**2\n        \n        # A double loop iterates over all unique pairs of particles (i, j) with i < j.\n        for i in range(N):\n            for j in range(i + 1, N):\n                # The displacement vector is calculated.\n                rij_vec = coords[j] - coords[i]\n\n                # The minimum image convention is applied to the displacement vector.\n                # np.rint rounds to the nearest integer, with .5 cases rounding to the nearest even integer.\n                rij_vec = rij_vec - L * np.rint(rij_vec / L)\n                \n                # The squared distance of the minimum image vector is computed.\n                r_sq = np.sum(rij_vec**2)\n\n                # The pair's contribution is included only if it is within the cutoff radius.\n                if r_sq < r_c_sq:\n                    # The pair virial difference term is calculated and added to the sum.\n                    # Delta_w(r) = 48*r^(-12) - 36*r^(-9)\n                    r = np.sqrt(r_sq)\n                    delta_w = 48.0 * pow(r, -12) - 36.0 * pow(r, -9)\n                    total_delta_virial_sum += delta_w\n        \n        # The final pressure difference is calculated from the total virial sum.\n        # Delta_P = total_delta_virial_sum / (3 * V)\n        delta_P = total_delta_virial_sum / (3.0 * V)\n\n        # The result is formatted to six decimal places.\n        results.append(f\"{delta_P:.6f}\")\n\n    # The final output is printed in the specified format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2466657"}]}