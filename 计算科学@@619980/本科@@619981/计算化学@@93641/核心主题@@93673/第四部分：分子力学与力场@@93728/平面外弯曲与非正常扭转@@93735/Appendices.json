{"hands_on_practices": [{"introduction": "理论只有通过实践才能真正掌握。我们首先将简谐势模型付诸实践，计算由离平面弯曲产生的恢复力。这个练习将帮助你把势能函数 $V(\\chi)$ 与其在原子上产生的实际作用力联系起来，这是理解力场如何在分子模拟中维持几何构型的关键第一步。[@problem_id:2459853]", "problem": "您将编写一个完整的程序，用于计算一个经历离面弯曲位移的中心原子所受到的沿平面法线方向的恢复力。该位移被建模为一种非正常扭转。考虑一个三角平面分子中心（例如，硼烷中的硼原子），其离面坐标由一个非正常角表示。离面弯曲势通过谐振子模型建模为\n$$\nV(\\chi) = \\tfrac{1}{2}\\,k\\,(\\chi - \\chi_0)^2,\n$$\n其中平衡离面角 $\\chi_0 = 0$，力常数 $k$ 的单位为 $\\mathrm{kJ\\,mol^{-1}\\,rad^{-2}}$，$\\chi$ 的单位为弧度。假设几何构型对称，具有三个相同的键，并用平均键长 $r_{\\mathrm{avg}}$ 来近似有效杠杆臂。使用谐振子模型，中心原子沿取代基平面单位法向量方向的恢复力被定义为由上述势能和杠杆臂近似所隐含的线性响应。测试套件中提供的所有角度均以度为单位，使用前必须转换为弧度。最终答案必须以每个分子的力（单位为牛顿）表示，并使用具有六位有效数字的科学记数法。\n\n请在您的程序中采用以下物理常数和单位换算：\n- 阿伏伽德罗常数 $N_{\\mathrm{A}} = 6.02214076\\times 10^{23}\\,\\mathrm{mol^{-1}}$。\n- 焦耳换算 $1\\,\\mathrm{kJ} = 10^{3}\\,\\mathrm{J}$。\n- 埃米换算 $1\\,\\text{\\AA} = 10^{-10}\\,\\mathrm{m}$。\n\n测试套件。对于每种情况，计算中心原子沿平面法线方向的带符号恢复力（对于正的离面角，力为正；对于抵抗位移的恢复响应，力为负），并以每个分子的力（单位为 $\\mathrm{N}$）报告该值。使用参数 $(k,\\chi_\\text{deg}, r_{\\mathrm{avg}})$，其中 $k$ 的单位为 $\\mathrm{kJ\\,mol^{-1}\\,rad^{-2}}$，离面角 $\\chi_\\text{deg}$ 的单位为度，$r_{\\mathrm{avg}}$ 的单位为 \\AA：\n1. 硼烷基线小位移：$(40.0,\\; 1.0,\\; 1.19)$。\n2. 零位移边界：$(40.0,\\; 0.0,\\; 1.19)$。\n3. 较大的小角度位移，相同硼烷几何构型：$(40.0,\\; 10.0,\\; 1.19)$。\n4. 不同的刚度和杠杆臂：$(60.0,\\; 5.0,\\; 1.00)$。\n5. 负位移符号检查：$(40.0,\\; -1.0,\\; 1.19)$。\n\n最终输出格式。您的程序应生成单行输出，其中包含案例 $1$ 到 $5$ 的结果，按顺序排列，形式为用方括号括起来的逗号分隔列表，例如\n$$\n[\\text{result}_1,\\text{result}_2,\\text{result}_3,\\text{result}_4,\\text{result}_5],\n$$\n其中每个 $\\text{result}_i$ 是一个浮点数，采用科学记数法，精确到六位有效数字，单位为每个分子的 $\\mathrm{N}$。", "solution": "问题陈述已经过严格验证，被认为是有效的。它以分子力学原理为科学基础，提法恰当，并提供了客观的定量数据。它描述了一种使用谐势能模拟离面弯曲振动的标准方法，这是计算化学中针对小原子位移的常见近似。所有必需的参数和物理常数均已提供，且不存在内部矛盾。我们可以着手求解。\n\n问题要求计算中心原子因离面位移而受到的力，该位移通过基于非正常扭转角 $\\chi$ 的谐势能进行建模。势能 $V$ 由下式给出：\n$$\nV(\\chi) = \\frac{1}{2}k(\\chi - \\chi_0)^2\n$$\n平衡角被指定为 $\\chi_0 = 0$，从而将势能简化为：\n$$\nV(\\chi) = \\frac{1}{2}k\\chi^2\n$$\n这里，$k$ 是力常数，$\\chi$ 是以弧度为单位的离面角。\n\n沿取代基平面法线方向（我们称之为 $z$ 轴）的力 $F_z$ 是势能相对于该轴上​​位移 $z$ 的负梯度：\n$$\nF_z = -\\frac{dV}{dz}\n$$\n势能是作为角度 $\\chi$ 的函数提供的，而不是笛卡尔位移 $z$。我们必须在这两个坐标之间建立关系。对于中心原子偏离三个取代基平面的小位移 $z$，离面角 $\\chi$ 可以与 $z$ 和作为杠杆臂的平均键长 $r_{\\mathrm{avg}}$ 相关联。从几何上看，对于小角度，我们有近似 $\\sin(\\chi) \\approx \\chi$。位移 $z$ 由 $z = r_{\\mathrm{avg}} \\sin(\\chi)$ 给出，可以简化为：\n$$\nz \\approx r_{\\mathrm{avg}} \\chi \\quad \\implies \\quad \\chi \\approx \\frac{z}{r_{\\mathrm{avg}}}\n$$\n现在我们可以将势能表示为笛卡尔位移 $z$ 的函数：\n$$\nV(z) = \\frac{1}{2}k\\left(\\frac{z}{r_{\\mathrm{avg}}}\\right)^2 = \\frac{k}{2r_{\\mathrm{avg}}^2}z^2\n$$\n这是一个标准的一维谐振子势 $V(z) = \\frac{1}{2}k_{\\text{eff}}z^2$，其有效力常数为 $k_{\\text{eff}} = \\frac{k}{r_{\\mathrm{avg}}^2}$。\n\n恢复力通过对 $V(z)$ 关于 $z$ 求导得出：\n$$\nF_z = -\\frac{dV}{dz} = -\\frac{d}{dz}\\left(\\frac{k}{2r_{\\mathrm{avg}}^2}z^2\\right) = -\\frac{k}{r_{\\mathrm{avg}}^2}z\n$$\n为了用角度 $\\chi$ 表示力，我们代入 $z = r_{\\mathrm{avg}}\\chi$：\n$$\nF_z = -\\frac{k}{r_{\\mathrm{avg}}^2}(r_{\\mathrm{avg}}\\chi) = -\\frac{k\\chi}{r_{\\mathrm{avg}}}\n$$\n负号表示该力是恢复力，作用方向与位移方向相反。然而，问题指定了一个非标准的符号约定：“计算带符号的恢复力...（对于正的离面角，力为正；对于抵抗位移的恢复响应，力为负）”。这种措辞是矛盾的。恢复响应*根据定义*就是与位移方向相反。我们将遵循指令的第一部分，这是一个明确的指令：力的符号应与角度 $\\chi$ 的符号匹配。因此，我们必须实现的公式是：\n$$\nF_z = \\frac{k\\chi}{r_{\\mathrm{avg}}}\n$$\n为了以牛顿（$N$）为单位获得力，所有输入参数都必须转换为国际单位制（SI）基本单位。力的单位牛顿等效于焦耳每米（$N = J \\cdot m^{-1}$）。\n\n换算过程如下：\n1.  力常数 $k$ 的单位为 $\\mathrm{kJ\\,mol^{-1}\\,rad^{-2}}$。它必须被转换为 $\\mathrm{J\\,molecule^{-1}}$。单位 $\\mathrm{rad}^{-2}$ 是一种约定，表示势能与以弧度测量的角度呈二次关系；在量纲分析中，弧度被视为无量纲单位。\n    $$\n    k'\\,[\\mathrm{J}] = k\\,\\left[\\frac{\\mathrm{kJ}}{\\mathrm{mol}}\\right] \\times \\frac{1000\\,\\mathrm{J}}{1\\,\\mathrm{kJ}} \\times \\frac{1\\,\\mathrm{mol}}{N_A\\,\\mathrm{molecules}}\n    $$\n    其中 $N_A = 6.02214076 \\times 10^{23}\\,\\mathrm{mol^{-1}}$。\n2.  离面角 $\\chi_{\\text{deg}}$ 以度为单位给出，必须转换为弧度。\n    $$\n    \\chi_{\\text{rad}} = \\chi_{\\text{deg}} \\times \\frac{\\pi}{180}\n    $$\n3.  平均键长 $r_{\\mathrm{avg}}$ 以埃（$\\text{\\AA}$）为单位给出，必须转换为米（$m$）。\n    $$\n    r'_{\\mathrm{avg}}\\,[\\mathrm{m}] = r_{\\mathrm{avg}}\\,[\\text{\\AA}] \\times 10^{-10} \\frac{\\mathrm{m}}{\\text{\\AA}}\n    $$\n以牛顿为单位的最终力计算公式为：\n$$\nF_z\\,[\\mathrm{N}] = \\frac{k'\\,[\\mathrm{J}] \\times \\chi_{\\text{rad}}}{r'_{\\mathrm{avg}}\\,[\\mathrm{m}]}\n$$\n程序将遍历所提供的测试套件，将此公式应用于每组参数。最终结果将格式化为具有六位有效数字的科学记数法。这对应于 Python 格式说明符 `\"{:.5e}\"`，它提供小数点前一位和小数点后五位数字。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the restoring force on a central atom for out-of-plane bending.\n    \"\"\"\n\n    # Physical constants and conversion factors\n    N_A = 6.02214076e23  # Avogadro constant (mol^-1)\n    KJ_TO_J = 1000.0       # Conversion from kJ to J\n    ANGSTROM_TO_METER = 1e-10 # Conversion from Angstrom to meters\n\n    # Test suite: (k [kJ mol^-1 rad^-2], chi [degrees], r_avg [Angstrom])\n    test_cases = [\n        (40.0, 1.0, 1.19),   # 1. Borane baseline small displacement\n        (40.0, 0.0, 1.19),   # 2. Zero displacement boundary\n        (40.0, 10.0, 1.19),  # 3. Larger small-angle displacement\n        (60.0, 5.0, 1.00),   # 4. Different stiffness and lever arm\n        (40.0, -1.0, 1.19),  # 5. Negative displacement sign check\n    ]\n\n    results = []\n    for k_in, chi_deg, r_avg_in in test_cases:\n\n        # Step 1: Convert units to SI\n        # Convert force constant k from kJ mol^-1 rad^-2 to J molecule^-1\n        # The 'rad' unit is dimensionless for dimensional analysis.\n        k_si = (k_in * KJ_TO_J) / N_A  # J / molecule\n\n        # Convert angle chi from degrees to radians\n        chi_rad = np.deg2rad(chi_deg)\n\n        # Convert average bond length r_avg from Angstroms to meters\n        r_avg_si = r_avg_in * ANGSTROM_TO_METER  # meters\n\n        # Step 2: Calculate the force\n        # The formula derived is F_z = (k * chi) / r_avg.\n        # The sign is positive for positive chi as per problem instruction.\n        # A division by zero check is necessary for r_avg_si, though not an\n        # issue with the given test cases.\n        if r_avg_si == 0:\n            if k_si * chi_rad == 0:\n                # 0/0 is indeterminate, but in this physical context means no force\n                force_n = 0.0\n            else:\n                # Non-zero torque with zero lever arm implies infinite force,\n                # which is unphysical.\n                force_n = np.inf\n        else:\n            force_n = (k_si * chi_rad) / r_avg_si  # Newtons (J/m)\n\n        # Step 3: Format and store the result\n        # The format must be scientific notation with exactly six significant figures.\n        # The format specifier {:.5e} provides 1 digit before the decimal and 5 after.\n        results.append(f\"{force_n:.5e}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2459853"}, {"introduction": "掌握了如何用力场参数进行计算后，一个更深层次的问题是：这些参数本身意味着什么？力常数 $k$ 的大小直接反映了维持分子平面性的“刚度”，而这与分子的电子结构密切相关。本练习通过比较芳香性的苯与一个假想的非芳香性环己三烯，让你从化学本质出发，理解芳香稳定化能是如何决定离平面振动势垒的，从而深刻体会力场参数的物理化学意义。[@problem_id:2459803]", "problem": "分子力学（MM; Molecular Mechanics）力场使用一个反常扭转（离面）项来模拟三角平面碳中心对锥形化的抗拒。对于一个给定的中心原子，离面角用 $\\chi$ 表示，其势能在平衡值 $\\chi_{0}=0$（对于一个平面的 $sp^{2}$ 中心）附近满足简谐势 $V(\\chi)=\\tfrac{1}{2}k(\\chi-\\chi_{0})^{2}$。根据定义，力常数 $k$ 是势能对 $\\chi$ 在 $\\chi=0$ 处的二阶导数，即 $k=\\left.\\dfrac{\\mathrm{d}^{2}V}{\\mathrm{d}\\chi^{2}}\\right|_{\\chi=0}$。考虑一个六元碳氢环的两种模型：芳香性的苯和一个假想的非芳香性 1,3,5-环己三烯，其中 $\\pi$ 键是完全定域的，没有环状离域。假设要对每个分子中的一个环碳原子进行 $k$ 值的拟合，以再现由量子力学（QM; Quantum Mechanics）预测的小振幅离面振动行为。哪个选项最能合理解释苯与 1,3,5-环己三烯中 $k$ 值的预期相对大小？\n\nA. 苯中的 $k$ 值应更大，因为环状 $\\pi$ 离域耦合了环上相邻的 $p$ 轨道；一个碳原子的离面位移会破坏与两个相邻原子的芳香共轭，相对于定域的三烯，这增加了 $V(\\chi)$ 的曲率。\n\nB. 1,3,5-环己三烯中的 $k$ 值应更大，因为没有共振使得单个的双键本质上更“硬”，所以它比苯更能抵抗锥形化。\n\nC. 两种分子中的 $k$ 值应大致相等，因为两种情况下局域杂化都是 $sp^{2}$，且每个碳原子周围的局域几何构型相似。\n\nD. 苯中的 $k$ 值应更小，因为离域允许电荷在发生离面弯曲时重新分布，相对于定域的三烯，这软化了离面振动模式。\n\nE. $k$ 值应完全相同，因为两种分子都有六元环，而环的大小主导了离面刚度，与电子结构无关。", "solution": "首先必须验证问题陈述的科学合理性和一致性。\n\n**步骤 1：提取已知条件**\n- 系统是六元碳氢环中的一个三角平面碳中心。\n- 离面弯曲由一个反常扭转角 $\\chi$ 建模。\n- 该运动的势能函数在平衡点附近是简谐的：$V(\\chi)=\\tfrac{1}{2}k(\\chi-\\chi_{0})^{2}$。\n- 平面 $sp^{2}$ 中心的平衡角为 $\\chi_{0}=0$。\n- 力常数 $k$ 是势能函数在平衡点处的二阶导数：$k=\\left.\\dfrac{\\mathrm{d}^{2}V}{\\mathrm{d}\\chi^{2}}\\right|_{\\chi=0}$。\n- 需要比较两种分子模型：\n    1. 芳香性的苯。\n    2. 一个假想的非芳香性 1,3,5-环己三烯，其 $\\pi$ 键完全定域，没有环状离域。\n- 问题要求为苯与 1,3,5-环己三烯中环碳原子的力常数 $k$ 的预期相对大小提供合理解释。\n\n**步骤 2：使用提取的已知条件进行验证**\n- **科学依据**：该问题很好地基于计算化学（分子力学力场）、物理有机化学（芳香性、电子结构）和物理学（简谐振子模型）的原理。反常扭转、离面弯曲、力常数、苯以及作为参考态的假想的定域 1,3,5-环己三烯等概念都是该领域的标准内容。\n- **问题的适定性**：这个问题提得很好。它要求对两个明确定义的化学体系之间一个明确定义的物理参数（$k$）进行定性比较。可以从基本化学原理中推导出唯一且有意义的答案。\n- **客观性**：问题以客观、科学的语言陈述，没有歧义或主观论断。\n- **完整性和一致性**：问题提供了所有必要信息。势能 $V(\\chi)$ 和力常数 $k$ 的定义是明确的。两种分子（芳香性 vs. 定域非芳香性）的性质已清楚说明。没有自相矛盾之处。使用假想分子作为参考是理论化学中一种标准且有效的方法。\n\n**步骤 3：结论与行动**\n问题陈述有效。它在科学上是合理的、适定性良好且内部一致。我们可以继续进行解答。\n\n**解答的推导过程**\n力常数 $k$ 定义为 $k=\\left.\\dfrac{\\mathrm{d}^{2}V}{\\mathrm{d}\\chi^{2}}\\right|_{\\chi=0}$。这个量衡量了势能阱在平衡平面构型（$\\chi=0$）处的曲率。较大的 $k$ 值表示一个“更硬”的势，意味着要使原子偏离平面一个给定的微小角度 $\\chi$ 需要更多的能量。换句话说，较大的 $k$ 对应于维持平面性的更强的恢复力。\n\n环中碳原子的离面运动涉及该原子的锥形化。这种几何畸变导致该碳原子上负责 $\\pi$ 键合的 $p_{z}$ 轨道发生倾斜，不再与相邻碳原子上的 $p_{z}$ 轨道保持平行。这种错位减少了轨道重叠，进而削弱了 $\\pi$ 键合。因此，这种畸变的能量代价 $V(\\chi)$ 与 $\\pi$ 电子体系的稳定性直接相关。\n\n1.  **苯**：苯是一个芳香性分子。六个 $\\pi$ 电子在整个六元环上离域，形成一个连续的共轭循环。这种环状离域带来了显著的芳香稳定化能，使得苯的平面结构异常稳定。当单个碳原子移出平面时（$\\chi$ 非零），其 $p_{z}$ 轨道与*两个*相邻原子的 $p_{z}$ 轨道的重叠都会减小。这一个局部的扰动会破坏整个共轭循环，导致芳香稳定化能的大量损失。因为芳香体系非常稳定，抵抗这种破坏需要大量的能量。因此，对于苯来说，势能 $V(\\chi)$ 随着 $\\chi$ 偏离 0 而急剧上升。这对应于最小值点处的大曲率，因此力常数 $k$ 很大。\n\n2.  **假想的 1,3,5-环己三烯**：该分子被定义为具有三个孤立的碳-碳双键和三个碳-碳单键，没有环状离域（没有共振）。在任何给定的碳原子上，它是一个双键和一个单键的一部分。当这个碳原子移出平面时，它主要破坏的是其所属的单个双键内的 $\\pi$ 重叠。在这个定域模型中，对相邻单键的影响可以忽略不计。虽然破坏一个定域的 $\\pi$ 键肯定有能量代价，但这种代价不会像芳香性那样因失去一个集体的、遍及全环的稳定化效应而被放大。单个孤立 $\\pi$ 键的稳定性远小于苯中离域芳香体系的总稳定性。因此，对于相同的离面位移 $\\chi$，1,3,5-环己三烯的能量惩罚比苯小。其势能阱 $V(\\chi)$ 较浅，曲率较小，因此力常数 $k$ 也较小。\n\n综上所述，$k_{\\text{benzene}}  k_{1,3,5-\\text{cyclohexatriene}}$，因为破坏苯中高度稳定的芳香体系在能量上比破坏非芳香类似物中的定域 $\\pi$ 键代价更高。\n\n**评估选项**\n\n**A. 苯中的 $k$ 值应更大，因为环状 $\\pi$ 离域耦合了环上相邻的 $p$ 轨道；一个碳原子的离面位移会破坏与两个相邻原子的芳香共轭，相对于定域的三烯，这增加了 $V(\\chi)$ 的曲率。**\n该选项正确地指出苯中的 $k$ 更大。其提供的理由完全正确。离面位移破坏了环状芳香共轭，而这是一种高度稳定的特性。破坏这种稳定性的能量代价很高，导致了大的势能曲率（$k$）。\n**结论：正确。**\n\n**B. 1,3,5-环己三烯中的 $k$ 值应更大，因为没有共振使得单个的双键本质上更“硬”，所以它比苯更能抵抗锥形化。**\n该选项错误地声称 1,3,5-环己三烯中的 $k$ 更大。其推理不恰当地将键*拉伸*的刚度与离面*弯曲*的刚度混为一谈。一个定域的 C=C 双键在拉伸方面的确比苯中的键更硬。然而，对离面弯曲的抗拒能力取决于平面 $\\pi$ 体系的稳定性，而芳香性的苯在这方面要稳定得多。\n**结论：错误。**\n\n**C. 两种分子中的 $k$ 值应大致相等，因为两种情况下局域杂化都是 $sp^{2}$，且每个碳原子周围的局域几何构型相似。**\n该选项错误地声称力常数大致相等。它依赖于对局域几何构型和杂化的表面分析。它完全忽略了两个体系之间主要的能量差异：芳香稳定化能的存在与否，这是一个决定对非平面畸变抗拒能力的全局电子效应。\n**结论：错误。**\n\n**D. 苯中的 $k$ 值应更小，因为离域允许电荷在发生离面弯曲时重新分布，相对于定域的三烯，这软化了离面振动模式。**\n该选项错误地声称苯中的 $k$ 更小。其推理存在缺陷，呈现了与正确物理图像相反的观点。离域创造了一个异常稳定的平面体系。这种稳定性不会“软化”分子以适应离面畸变；相反，它使分子在此类畸变方面变得更“硬”，因为这些畸变在能量上非常不利。\n**结论：错误。**\n\n**E. $k$ 值应完全相同，因为两种分子都有六元环，而环的大小主导了离面刚度，与电子结构无关。**\n该选项错误地声称力常数相同。其推理认为环的大小是主导因素而电子结构无关，这是根本性错误的。离面势几乎完全是 $\\pi$ 体系电子结构的结果，而这正是两种分子之间的主要区别点。\n**结论：错误。**", "answer": "$$\\boxed{A}$$", "id": "2459803"}, {"introduction": "本章的最终实践将回答一个根本性问题：力场参数从何而来？这个高级练习将让你扮演计算化学家的角色，执行一项核心任务——力场参数化。你将使用模拟的量子力学计算数据，通过非线性拟合来确定谐波势模型的关键参数（$k$ 和 $\\chi_0$）。通过处理两种截然不同的化学环境——芳香环中平面构型的氮（吡咯）和饱和环中锥形构型的氮（吡咯烷）——你将获得力场开发流程中最具价值的实践经验。[@problem_id:2459809]", "problem": "要求您构建一个程序，用于参数化一个氮中心平面外弯曲的谐波非正常扭转势，针对两种化学上不同的情况：吡咯 (pyrrole) 中的平面芳香性氮和吡咯烷 (pyrrolidine) 中的锥形饱和氮。该非正常扭转势被建模为一个一维谐波函数，其变量为带符号的非正常二面角，该二面角为一个中心原子和三个取代基所定义。该模型为\n$$\nE(\\chi) = \\tfrac{1}{2} k \\left(\\chi - \\chi_0\\right)^2,\n$$\n其中 $E(\\chi)$ 是能量，单位为千焦/摩尔；$\\chi$ 是非正常二面角，单位为弧度；$k$ 是力常数，单位为千焦/摩尔/平方弧度；$\\chi_0$ 是平衡非正常角，单位为弧度。给定每种情况下的一组采样角度 $\\{\\chi_i\\}$ 及其对应的能量 $\\{E_i\\}$，确定参数 $k$ 和 $\\chi_0$ 以最小化残差平方和 $\\sum_i \\left[E_i - \\tfrac{1}{2} k(\\chi_i - \\chi_0)^2\\right]^2$。然后，对于每个拟合模型，计算平面构象下的能垒 $E(0) = \\tfrac{1}{2}k\\chi_0^2$，单位为千焦/摩尔。\n\n所有角度必须以弧度处理，所有能量必须以千焦/摩尔处理。最终的数值答案必须以浮点数形式返回。\n\n使用以下测试用例集，每个用例包含一个角度列表 $\\{\\chi_i\\}$（单位为弧度）和相应的能量列表 $\\{E_i\\}$（单位为千焦/摩尔）：\n\n- 用例1（类似吡咯的平面构象，关于 $0$ 对称）：角度 $\\{-0.35,-0.20,0.00,0.20,0.35\\}$，能量 $\\{18.375,6.000,0.000,6.000,18.375\\}$。\n- 用例2（类似吡咯烷的锥形构象，最小值在 $0.60$ 附近）：角度 $\\{0.00,0.20,0.60,1.00,1.20\\}$，能量 $\\{18.000,8.000,0.000,8.000,18.000\\}$。\n- 用例3（最少三点集，弱锥形构象）：角度 $\\{-0.10,0.20,0.50\\}$，能量 $\\{1.000,0.250,4.000\\}$。\n\n您的程序必须为每个用例计算元组 $\\left[k,\\chi_0,E(0)\\right]$，其中 $k$ 的单位为千焦/摩尔/平方弧度，$\\chi_0$ 的单位为弧度， $E(0)$ 的单位为千焦/摩尔。程序必须生成单行输出，包含一个由列表组成的列表，格式为逗号分隔。每个内部列表的顺序为 $\\left[k,\\chi_0,E(0)\\right]$，所有数字四舍五入到六位小数，例如：\n\"[[k1,chi01,E0_1],[k2,chi02,E0_2],[k3,chi03,E0_3]]\"。", "solution": "对问题陈述进行验证。\n\n**第1步：提取已知信息**\n- **势能模型：** $E(\\chi) = \\tfrac{1}{2} k \\left(\\chi - \\chi_0\\right)^2$，其中 $E$ 是能量，单位为 kJ/mol，$ \\chi $ 是非正常二面角，单位为弧度。\n- **待定参数：** 力常数 $k$（单位为 kJ/mol/rad$^2$）和平衡角 $\\chi_0$（单位为弧度）。\n- **目标函数：** 最小化残差平方和 $SSR = \\sum_i \\left[E_i - \\tfrac{1}{2} k(\\chi_i - \\chi_0)^2\\right]^2$，其中 $(\\chi_i, E_i)$ 是给定的离散数据点。\n- **派生量：** 计算平面构象下的能垒 $E(0) = \\tfrac{1}{2}k\\chi_0^2$。\n- **数据集：**\n    - **用例1：** 角度 $\\{-0.35, -0.20, 0.00, 0.20, 0.35\\}$ 弧度；能量 $\\{18.375, 6.000, 0.000, 6.000, 18.375\\}$ kJ/mol。\n    - **用例2：** 角度 $\\{0.00, 0.20, 0.60, 1.00, 1.20\\}$ 弧度；能量 $\\{18.000, 8.000, 0.000, 8.000, 18.000\\}$ kJ/mol。\n    - **用例3：** 角度 $\\{-0.10, 0.20, 0.50\\}$ 弧度；能量 $\\{1.000, 0.250, 4.000\\}$ kJ/mol。\n\n**第2步：使用提取的已知信息进行验证**\n根据所需标准对问题进行评估。\n- **科学依据：** 问题有效。谐波势是物理学和化学中的一个基本模型，用于描述围绕平衡点的振荡，例如平面外弯曲振动。使用非正常扭转来描述原子中心的平面性是分子力学中的一种标准技术。\n- **适定性：** 问题有效。这是一个定义明确的参数估计问题（非线性回归）。对于每个用例，数据点的数量（分别为$5$、$5$和$3$）大于或等于要拟合的参数数量（$2$），因此系统不是欠定的。\n- **客观性：** 问题有效。该问题使用精确的数学定义和客观的数值数据进行阐述，没有任何主观或模棱两可的语言。\n\n所有其他验证检查均已通过。该问题没有科学缺陷、矛盾或未说明的假设。\n\n**第3步：结论与行动**\n问题**有效**。将构建一个解决方案。\n\n**基于原则的解决方案设计**\n任务是通过将模型与提供的能量-角度数据进行拟合，来确定谐波势能模型 $E(\\chi) = \\tfrac{1}{2} k \\left(\\chi - \\chi_0\\right)^2$ 的参数 $k$ 和 $\\chi_0$。这是一个经典的非线性最小二乘问题。目标是找到使模型预测与给定能量值之间的残差平方和（$SSR$）最小化的参数值：\n$$\n\\min_{k, \\chi_0} SSR(k, \\chi_0) = \\sum_i \\left( E_i - \\frac{1}{2} k (\\chi_i - \\chi_0)^2 \\right)^2\n$$\n解决此类问题的一个稳健方法是 Levenberg-Marquardt 算法，该算法可在 `scipy.optimize.least_squares` 库函数中找到。此函数通过迭代找到非线性函数平方和的最小值。它需要一个函数作为输入，该函数为给定的参数集返回一个残差向量 $r_i$。第 $i$ 个数据点的残差为：\n$$\nr_i(k, \\chi_0) = E_i - \\frac{1}{2} k (\\chi_i - \\chi_0)^2\n$$\n非线性优化的成功通常对参数的初始猜测值很敏感。一个具有物理动机的初始猜测值可以提高找到全局最小值的可能性。我们可以为此设计一个策略：\n$1$. 平衡角 $\\chi_0$ 对应于势能曲线的最小值。一个合理的 $\\chi_0$ 初始猜测值是数据集中对应最低能量的角度值，$\\chi_{\\text{guess},0} = \\chi_j$，其中 $E_j = \\min(\\{E_i\\})$。\n$2$. 有了 $\\chi_0$ 的估计值，就可以使用另一个数据点从模型方程中估算力常数 $k$。为确保估计稳定，最好使用远离最小值的点。我们选择数据点 $(\\chi_f, E_f)$，其中 $\\chi_f$ 是离 $\\chi_{\\text{guess},0}$ 最远的角度。然后， $k$ 的初始猜测值计算如下：\n$$\nk_{\\text{guess}} = \\frac{2 E_f}{(\\chi_f - \\chi_{\\text{guess},0})^2}\n$$\n必须对力常数 $k$ 施加约束，因为它必须为正（$k  0$），势才能描述一个稳定的最小值。\n\n对于每个测试用例，算法如下：\n$1$. 将角度和能量数据准备为数值数组。\n$2$. 使用上述策略生成 $(k, \\chi_0)$ 的智能初始猜测值。\n$3$. 调用 `scipy.optimize.least_squares`，提供残差函数、初始猜测值、数据以及强制 $k \\ge 0$ 的边界。\n$4$. 从求解器的结果中提取优化后的参数 $k$ 和 $\\chi_0$。\n$5$. 计算最终所需的量，即平面能垒高度 $E(0) = \\frac{1}{2}k\\chi_0^2$。\n\n值得注意的是，所有三个用例提供的数据都是“理想的”，因为它们完美地拟合了具有特定参数集的谐波模型，从而导致最小 $SSR$ 为 $0$。虽然数值求解器是一种通用方法，但对于这些特定情况，也存在解析解。我们稳健的数值策略将正确识别这些精确解。\n\n最终的程序将系统地将此过程应用于每个测试用例，收集结果 $\\left[k, \\chi_0, E(0)\\right]$，并将其格式化为指定的输出字符串。所有数字将按要求四舍五入到六位小数。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import least_squares\nimport sys\n\n# Set a higher recursion limit for optimization algorithms if needed, though not expected for this problem.\nsys.setrecursionlimit(2000)\n\ndef solve():\n    \"\"\"\n    Solves for the parameters of a harmonic improper torsion potential for three test cases.\n    \"\"\"\n\n    test_cases = [\n        {\n            \"name\": \"Case 1 (planar pyrrole-like)\",\n            \"angles\": np.array([-0.35, -0.20, 0.00, 0.20, 0.35]),\n            \"energies\": np.array([18.375, 6.000, 0.000, 6.000, 18.375]),\n        },\n        {\n            \"name\": \"Case 2 (pyramidal pyrrolidine-like)\",\n            \"angles\": np.array([0.00, 0.20, 0.60, 1.00, 1.20]),\n            \"energies\": np.array([18.000, 8.000, 0.000, 8.000, 18.000]),\n        },\n        {\n            \"name\": \"Case 3 (minimal three-point set, weakly pyramidal)\",\n            \"angles\": np.array([-0.10, 0.20, 0.50]),\n            \"energies\": np.array([1.000, 0.250, 4.000]),\n        },\n    ]\n\n    def residuals_function(params, angles, energies):\n        \"\"\"\n        Calculates the residuals for the harmonic potential model.\n        params: A list or tuple [k, chi0].\n        angles: Numpy array of angles (chi).\n        energies: Numpy array of corresponding energies (E).\n        Returns a numpy array of residuals (E_data - E_model).\n        \"\"\"\n        k, chi0 = params\n        model_energies = 0.5 * k * (angles - chi0)**2\n        return energies - model_energies\n\n    results = []\n    for case in test_cases:\n        angles = case[\"angles\"]\n        energies = case[\"energies\"]\n\n        # 1. Generate an intelligent initial guess.\n        # Guess chi0 is the angle corresponding to the minimum energy.\n        min_energy_idx = np.argmin(energies)\n        chi0_guess = angles[min_energy_idx]\n\n        # Guess k using the point furthest from chi0_guess for stability.\n        furthest_point_idx = np.argmax(np.abs(angles - chi0_guess))\n        chi_furthest = angles[furthest_point_idx]\n        energy_furthest = energies[furthest_point_idx]\n        \n        # Avoid division by zero if the furthest point happens to be the minimum.\n        # This is unlikely with typical potential scan data.\n        denominator = (chi_furthest - chi0_guess)**2\n        if np.isclose(denominator, 0):\n            # Fallback k_guess if denominator is zero\n            k_guess = 1.0 \n        else:\n            k_guess = 2 * energy_furthest / denominator\n\n        initial_guess = [k_guess, chi0_guess]\n\n        # 2. Perform the non-linear least squares optimization.\n        # Bounds: k must be non-negative. chi0 is unconstrained.\n        bounds = ([0, -np.inf], [np.inf, np.inf])\n        \n        # Levenberg-Marquardt is the default method and is suitable here.\n        opt_result = least_squares(\n            residuals_function,\n            initial_guess,\n            args=(angles, energies),\n            bounds=bounds\n        )\n\n        # 3. Extract results and calculate E(0).\n        k_fit, chi0_fit = opt_result.x\n        e0_fit = 0.5 * k_fit * chi0_fit**2\n\n        results.append([k_fit, chi0_fit, e0_fit])\n\n    # 4. Format the output as specified.\n    formatted_results = []\n    for res in results:\n        # Format each number to six decimal places.\n        formatted_res_str = f\"[{res[0]:.6f},{res[1]:.6f},{res[2]:.6f}]\"\n        formatted_results.append(formatted_res_str)\n\n    print(f\"[{','.join(formatted_results)}]\")\n\n\nif __name__ == '__main__':\n    solve()\n\n```", "id": "2459809"}]}