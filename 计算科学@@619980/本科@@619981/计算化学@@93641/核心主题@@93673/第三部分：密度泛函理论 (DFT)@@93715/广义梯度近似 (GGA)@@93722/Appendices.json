{"hands_on_practices": [{"introduction": "将梯度的信息加入到局域密度近似（LDA）中，似乎是改进泛函的一种自然而然的方式。然而，最简单的梯度展开近似（GEA）并非总能带来更好的结果。这项练习将通过一个经典的例子——氢原子——来展示二阶梯度展开（GEA2）如何反而会使交换能的计算结果比LDA更差，从而突显出现代GGA中更精巧设计的必要性 [@problem_id:2464549]。", "problem": "请在 Kohn–Sham 密度泛函理论的框架下，考虑氢原子的仅交换能，并使用 Hartree 原子单位（设 $\\hbar = m_{e} = e^{2}/(4\\pi \\varepsilon_{0}) = a_{0} = 1$，因此能量以 Hartree 为单位，长度以 Bohr 为单位）。基态氢原子 $1s$ 电子密度是球对称的，由 $n(r) = \\frac{1}{\\pi}\\exp(-2 r)$ 给出，其自旋密度为 $n_{\\uparrow}(r) = n(r)$ 和 $n_{\\downarrow}(r) = 0$。\n\n采用局域自旋密度近似 (LSDA) 来处理交换能，\n$$\nE_{x}^{\\mathrm{LSDA}}[n_{\\uparrow}, n_{\\downarrow}] \\;=\\; -C_{x}\\int \\Big(n_{\\uparrow}(\\mathbf{r})^{4/3} + n_{\\downarrow}(\\mathbf{r})^{4/3}\\Big)\\,d^{3}r,\n$$\n其中 $C_{x} = \\frac{3}{4}\\left(\\frac{3}{\\pi}\\right)^{1/3}$。\n\n对于非极化电子气的交换能的二阶梯度展开近似 (GEA2)，使用\n$$\nE_{x}^{\\mathrm{GEA2,unpol}}[n] \\;=\\; -C_{x}\\,2^{-1/3}\\int n(\\mathbf{r})^{4/3}\\Big(1 + \\mu\\, s(\\mathbf{r})^{2}\\Big)\\,d^{3}r,\n$$\n其中约化梯度 $s(\\mathbf{r}) = \\dfrac{|\\nabla n(\\mathbf{r})|}{2\\,k_{F}(\\mathbf{r})\\,n(\\mathbf{r})}$，局域费米波矢 $k_{F}(\\mathbf{r}) = \\big(3\\pi^{2}n(\\mathbf{r})\\big)^{1/3}$，以及精确的二阶系数 $\\mu = \\dfrac{10}{81}$。使用交换能的精确自旋标度关系，\n$$\nE_{x}[n_{\\uparrow}, n_{\\downarrow}] \\;=\\; \\frac{1}{2}\\,E_{x}^{\\mathrm{GEA2,unpol}}[2n_{\\uparrow}] \\;+\\; \\frac{1}{2}\\,E_{x}^{\\mathrm{GEA2,unpol}}[2n_{\\downarrow}].\n$$\n\n计算交换能之差\n$$\n\\Delta E_{x} \\;=\\; E_{x}^{\\mathrm{GEA2}} - E_{x}^{\\mathrm{LSDA}}\n$$\n对于上述指定的氢原子 $1s$ 密度，并以 Hartree 为单位，用单个闭式解析表达式给出您的结果。不要对您的答案进行四舍五入。", "solution": "该问题要求计算氢原子 $1s$ 的二阶梯度展开近似 (GEA2) 交换能与局域自旋密度近似 (LSDA) 交换能之差。该问题在科学上是合理的、良定的，并且所有必要的组成部分都已提供。我们将继续进行推导。\n\n待计算的量为 $\\Delta E_{x} = E_{x}^{\\mathrm{GEA2}} - E_{x}^{\\mathrm{LSDA}}$。\n\n首先，我们建立给定体系的 LSDA 交换能表达式。自旋密度为 $n_{\\uparrow}(\\mathbf{r}) = n(r) = \\frac{1}{\\pi}\\exp(-2r)$ 和 $n_{\\downarrow}(\\mathbf{r}) = 0$。使用所提供的 $E_{x}^{\\mathrm{LSDA}}$ 定义：\n$$\nE_{x}^{\\mathrm{LSDA}} = -C_{x}\\int \\Big(n_{\\uparrow}(\\mathbf{r})^{4/3} + n_{\\downarrow}(\\mathbf{r})^{4/3}\\Big)\\,d^{3}r = -C_{x}\\int n(r)^{4/3}\\,d^{3}r\n$$\n这代表了一个完全自旋极化体系的 LSDA 能量。\n\n接下来，我们建立 GEA2 交换能的表达式。问题提供了一个自旋标度关系，用以从非极化泛函 $E_{x}^{\\mathrm{GEA2,unpol}}[n]$ 构建依赖于自旋的 GEA2 能量：\n$$\nE_{x}^{\\mathrm{GEA2}} = \\frac{1}{2}\\,E_{x}^{\\mathrm{GEA2,unpol}}[2n_{\\uparrow}] + \\frac{1}{2}\\,E_{x}^{\\mathrm{GEA2,unpol}}[2n_{\\downarrow}]\n$$\n由于 $n_{\\downarrow}=0$，第二项为零。令 $n'(\\mathbf{r}) = 2n_{\\uparrow}(\\mathbf{r}) = 2n(r)$。GEA2 能量为：\n$$\nE_{x}^{\\mathrm{GEA2}} = \\frac{1}{2}\\,E_{x}^{\\mathrm{GEA2,unpol}}[2n] = \\frac{1}{2} \\left[ -C_{x}\\,2^{-1/3}\\int (2n)^{4/3}\\Big(1 + \\mu\\, s'^{2}\\Big)\\,d^{3}r \\right]\n$$\n其中 $s'$ 是密度 $n' = 2n$ 的约化梯度。我们必须将 $s'$ 与密度 $n$ 的约化梯度 $s$ 联系起来。对于一个通用密度 $\\rho$，其约化梯度为 $s_{\\rho} = \\frac{|\\nabla \\rho|}{2 k_{F,\\rho} \\rho}$，其中 $k_{F,\\rho} = (3\\pi^2\\rho)^{1/3}$。\n对于 $\\rho=n' = 2n$，我们有 $\\nabla n' = 2\\nabla n$ 和 $k_{F,n'} = (3\\pi^2(2n))^{1/3} = 2^{1/3}k_{F,n}$。\n因此，约化梯度 $s'$ 为：\n$$\ns' = \\frac{|\\nabla(2n)|}{2 k_{F,2n} (2n)} = \\frac{2|\\nabla n|}{2 (2^{1/3}k_{F,n}) (2n)} = \\frac{|\\nabla n|}{2 \\cdot 2^{1/3} k_{F,n} n} = 2^{-1/3} s\n$$\n其中 $s$ 是密度 $n$ 的约化梯度。将此代入 GEA2 表达式中：\n$$\nE_{x}^{\\mathrm{GEA2}} = \\frac{1}{2} \\left[ -C_{x}\\,2^{-1/3}\\int 2^{4/3}n^{4/3}\\Big(1 + \\mu\\, (2^{-1/3}s)^{2}\\Big)\\,d^{3}r \\right]\n$$\n$$\nE_{x}^{\\mathrm{GEA2}} = \\frac{1}{2} \\left[ -C_{x}\\,2^{1} \\int n^{4/3}\\Big(1 + \\mu\\, 2^{-2/3}s^{2}\\Big)\\,d^{3}r \\right]\n$$\n$$\nE_{x}^{\\mathrm{GEA2}} = -C_{x} \\int n^{4/3}\\,d^{3}r - C_{x}\\mu\\,2^{-2/3} \\int n^{4/3}s^{2}\\,d^{3}r\n$$\n第一项恰好是 $E_{x}^{\\mathrm{LSDA}}$。因此，差值 $\\Delta E_x$ 大大简化了：\n$$\n\\Delta E_{x} = E_{x}^{\\mathrm{GEA2}} - E_{x}^{\\mathrm{LSDA}} = - C_{x}\\,\\mu\\,2^{-2/3} \\int n(r)^{4/3}s(r)^{2}\\,d^{3}r\n$$\n我们的任务简化为计算该积分。首先，我们求出氢原子 $1s$ 密度 $n(r) = \\frac{1}{\\pi}\\exp(-2r)$ 的约化梯度 $s(r)$。对于球对称密度，其梯度为 $\\nabla n(r) = \\frac{dn}{dr}\\hat{r}$。\n$$\n|\\nabla n(r)| = \\left| \\frac{d}{dr} \\left( \\frac{1}{\\pi}\\exp(-2r) \\right) \\right| = \\left| \\frac{-2}{\\pi}\\exp(-2r) \\right| = 2n(r)\n$$\n约化梯度 $s(r)$ 是：\n$$\ns(r) = \\frac{|\\nabla n(r)|}{2 k_{F}(r) n(r)} = \\frac{2n(r)}{2 (3\\pi^2 n(r))^{1/3} n(r)} = (3\\pi^2 n(r))^{-1/3}\n$$\n所以，$s(r)^2 = (3\\pi^2 n(r))^{-2/3} = (3\\pi^2)^{-2/3} n(r)^{-2/3}$。\n现在我们计算积分：\n$$\n\\int n(r)^{4/3}s(r)^{2}\\,d^{3}r = \\int n(r)^{4/3} (3\\pi^2)^{-2/3} n(r)^{-2/3}\\,d^{3}r = (3\\pi^2)^{-2/3} \\int n(r)^{2/3}\\,d^{3}r\n$$\n体积元为 $d^3r = 4\\pi r^2 dr$。\n$$\n\\int n(r)^{2/3}\\,d^{3}r = \\int_{0}^{\\infty} \\left(\\frac{1}{\\pi}\\exp(-2r)\\right)^{2/3} 4\\pi r^2\\,dr = 4\\pi^{1/3} \\int_{0}^{\\infty} r^2 \\exp\\left(-\\frac{4}{3}r\\right)\\,dr\n$$\n这是一个形式为 $\\int_0^\\infty x^k \\exp(-ax) dx = \\frac{k!}{a^{k+1}}$ 的标准积分。其中 $k=2$ 且 $a=4/3$：\n$$\n\\int_{0}^{\\infty} r^2 \\exp\\left(-\\frac{4}{3}r\\right)\\,dr = \\frac{2!}{(4/3)^{3}} = \\frac{2}{64/27} = \\frac{54}{64} = \\frac{27}{32}\n$$\n所以，关于密度的积分为：\n$$\n\\int n(r)^{2/3}\\,d^{3}r = 4\\pi^{1/3} \\left(\\frac{27}{32}\\right) = \\frac{27}{8}\\pi^{1/3}\n$$\n将此结果代回：\n$$\n\\int n(r)^{4/3}s(r)^{2}\\,d^{3}r = (3\\pi^2)^{-2/3} \\left(\\frac{27}{8}\\pi^{1/3}\\right) = \\frac{1}{3^{2/3}\\pi^{4/3}} \\frac{3^3}{8}\\pi^{1/3} = \\frac{3^{7/3}}{8\\pi}\n$$\n最后，我们通过代入常数和积分的值来计算 $\\Delta E_x$：\n$$\n\\Delta E_{x} = - C_{x}\\,\\mu\\,2^{-2/3} \\left( \\frac{3^{7/3}}{8\\pi} \\right)\n$$\n使用给定的常数 $C_{x} = \\frac{3}{4}\\left(\\frac{3}{\\pi}\\right)^{1/3} = \\frac{3^{4/3}}{4\\pi^{1/3}}$ 和 $\\mu = \\frac{10}{81} = \\frac{10}{3^4}$：\n$$\n\\Delta E_{x} = - \\left( \\frac{3^{4/3}}{4\\pi^{1/3}} \\right) \\left( \\frac{10}{3^4} \\right) 2^{-2/3} \\left( \\frac{3^{7/3}}{8\\pi} \\right)\n$$\n我们按因子对各项进行分组：\n数值常数：$-\\frac{10}{4 \\cdot 8} = -\\frac{10}{32} = -\\frac{5}{16}$。\n$2$ 的幂次：$2^{-2/3}$。\n$3$ 的幂次：$3^{4/3} \\cdot 3^{-4} \\cdot 3^{7/3} = 3^{4/3 - 12/3 + 7/3} = 3^{-1/3}$。\n$\\pi$ 的幂次：$\\pi^{-1/3} \\cdot \\pi^{-1} = \\pi^{-4/3}$。\n将这些合并得到：\n$$\n\\Delta E_{x} = -\\frac{5}{16} \\cdot 2^{-2/3} \\cdot 3^{-1/3} \\cdot \\pi^{-4/3}\n$$\n为清晰起见，此表达式可重排为：\n$$\n\\Delta E_{x} = -\\frac{5}{16} (2^2 \\cdot 3)^{-1/3} \\pi^{-4/3} = -\\frac{5}{16} (12)^{-1/3} \\pi^{-4/3} = -\\frac{5}{16} (12\\pi^4)^{-1/3}\n$$\n这构成了关于能量差的最终的闭式解析表达式。", "answer": "$$\n\\boxed{-\\frac{5}{16}\\left(12\\pi^{4}\\right)^{-1/3}}\n$$", "id": "2464549"}, {"introduction": "泛函积分项的数学形式对其整体行为至关重要。本实践将采用一个看似复杂的模型GGA，来演示一种强大的分析技巧：分部积分法。通过这个练习，你将发现这个特定泛函形式的一个令人惊讶的、不那么显而易见的性质，从而加深对泛函设计的理解 [@problem_id:2464502]。", "problem": "考虑一个圆环上的一维电子密度，圆环周长为 $L = 2\\pi$（以玻尔为单位），由坐标 $x \\in [0, 2\\pi]$ 参数化，并具有周期性边界条件。使用原子单位制，因此能量以哈特里（Hartree）表示，长度以玻尔（Bohr）表示。设局域密度近似（LDA）的交换相关能为 $E_{\\text{LDA}}[n]$，并定义一个模型广义梯度近似（GGA）能量为\n$$\nE_{\\text{GGA}}[n] \\;=\\; E_{\\text{LDA}}[n] \\;+\\; \\Delta E[n],\n$$\n其半局域修正是\n$$\n\\Delta E[n] \\;=\\; \\int_{0}^{2\\pi} \\Big( n(x)^{-4/3}\\,\\big(\\tfrac{dn}{dx}(x)\\big)^{2} \\;-\\; 3\\,n(x)^{-1/3}\\,\\tfrac{d^{2}n}{dx^{2}}(x) \\Big)\\,dx.\n$$\n所有考虑的密度 $n(x)$ 必须在 $[0, 2\\pi]$ 上是非负且周期性的。\n\n任务：找出一个特定的、非均匀的周期性密度分布 $n(x)$，使得 GGA 修正项 $\\Delta E[n]$ 恰好为零，从而尽管 $n(x)$ 是非均匀的，仍有 $E_{\\text{GGA}}[n] = E_{\\text{LDA}}[n]$。然后，编写一个程序，对一组余弦形式的参数化测试密度计算 $\\Delta E[n]$（以哈特里为单位）：\n$$\nn(x) \\;=\\; n_{0}\\,\\big(1 + a \\cos(kx)\\big),\n$$\n其中 $n_{0} > 0$ 是一个恒定的参考密度（单位为 玻尔$^{-3}$），振幅满足 $0 \\le a < 1$ 以确保 $n(x) \\ge 0$，且 $k$ 是一个正整数。使用由 $n(x)$ 定义所蕴含的解析导数 $\\tfrac{dn}{dx}(x)$ 和 $\\tfrac{d^{2}n}{dx^{2}}(x)$。\n\n物理和数值单位要求：将每个计算出的 $\\Delta E[n]$ 以哈特里（Hartree）为单位，作为浮点数报告。$kx$ 中使用的角度以弧度为单位。所有最终数值答案均表示为四舍五入到 $12$ 位小数的浮点数。\n\n测试组：除非另有说明，对于 $n_{0} = 0.12$（单位为 玻尔$^{-3}$），评估以下参数三元组 $(n_{0}, a, k)$ 的 $\\Delta E[n]$：\n- $(0.12, 0.40, 1)$\n- $(0.12, 0.00, 3)$\n- $(0.12, 0.95, 5)$\n- $(0.20, 0.70, 8)$\n\n最终输出格式：你的程序应生成单行输出，其中包含按顺序排列的四个结果，格式为一个逗号分隔的浮点数列表，用方括号括起来，中间没有空格，每个浮点数四舍五入到 $12$ 位小数（例如，$[x_{1},x_{2},x_{3},x_{4}]$，但用实际的数值浮点数代替 $x_{i}$）。", "solution": "我们首先对问题陈述进行严格验证。\n\n第一步：提取已知条件\n- 系统：圆环上的一维电子密度 $n(x)$。\n- 周长：$L = 2\\pi$ 玻尔。\n- 坐标：$x \\in [0, 2\\pi]$。\n- 边界条件：周期性。\n- 单位：原子单位制（能量单位为哈特里，长度单位为玻尔）。\n- GGA 能量泛函：$E_{\\text{GGA}}[n] = E_{\\text{LDA}}[n] + \\Delta E[n]$。\n- GGA 修正泛函：$\\Delta E[n] = \\int_{0}^{2\\pi} \\Big( n(x)^{-4/3}\\,\\big(\\frac{dn}{dx}(x)\\big)^{2} - 3\\,n(x)^{-1/3}\\,\\frac{d^{2}n}{dx^{2}}(x) \\Big)\\,dx$。\n- 密度约束：$n(x) \\ge 0$ 且在 $[0, 2\\pi]$ 上是周期性的。\n- 任务 1：找出一个特定的、非均匀的周期性密度 $n(x)$，使得 $\\Delta E[n] = 0$。\n- 任务 2：实现一个程序，为 $n(x) = n_{0}(1 + a \\cos(kx))$ 形式的测试密度计算 $\\Delta E[n]$。\n- 测试密度参数：$n_{0} > 0$，$0 \\le a < 1$，$k$ 是一个正整数。\n- 导数：使用解析导数。\n- 数值要求：以哈特里为单位报告 $\\Delta E[n]$，四舍五入到 $12$ 位小数。角度以弧度为单位。\n- 测试组：$(n_{0}, a, k)$ 元组为 $(0.12, 0.40, 1)$、$(0.12, 0.00, 3)$、$(0.12, 0.95, 5)$、$(0.20, 0.70, 8)$。\n- 最终输出格式：一个单行的、用方括号括起来的逗号分隔浮点数列表，例如 `[x1,x2,x3,x4]`。\n\n第二步：使用提取的已知条件进行验证\n- **科学性**：该问题在密度泛函理论这一成熟的框架内提出。GGA 修正项 $\\Delta E[n]$ 的泛函形式，虽然是一个模型，但是由密度及其梯度在数学上构造而成，这是半局域泛函的特征。该问题是一道有效的数理物理练习题。\n- **适定性**：问题陈述清晰。它首先要求进行解析推导，其次是数值计算。所有必要的函数、参数、积分限和约束条件（$n(x) \\ge 0$，周期性）都已提供。约束 $a < 1$ 确保了 $n(x) > 0$，避免了被积函数出现奇点。每个测试用例都存在唯一的数值结果。\n- **客观性**：问题使用精确的数学语言表述，没有主观或含糊不清的陈述。\n\n第三步：结论与行动\n该问题是自洽的、有科学依据的、并且在数学上是适定的。它没有不一致、模糊之处或事实错误。该问题被判定为 **有效**。我们继续进行求解。\n\n问题包括两部分。首先，我们必须找到一个非均匀密度，使其修正项 $\\Delta E[n]$ 为零。其次，我们必须实现一个数值程序，为指定的密度族计算 $\\Delta E[n]$。\n\n第一部分：解析推导\nGGA 修正由以下泛函给出：\n$$\n\\Delta E[n] = \\int_{0}^{2\\pi} \\left[ n(x)^{-4/3} \\left(\\frac{dn}{dx}\\right)^2 - 3 n(x)^{-1/3} \\frac{d^2n}{dx^2} \\right] dx\n$$\n我们使用分部积分法 $\\int u \\, dv = uv - \\int v \\, du$ 来分析被积函数的第二项。设 $u = -3n(x)^{-1/3}$ 且 $dv = \\frac{d^2n}{dx^2} dx$。因此，$du = -3 \\left(-\\frac{1}{3}\\right) n(x)^{-4/3} \\frac{dn}{dx} dx = n(x)^{-4/3} \\frac{dn}{dx} dx$，且 $v = \\frac{dn}{dx}$。\n\n在周期性定义域 $[0, 2\\pi]$ 上应用分部积分公式：\n$$\n\\int_{0}^{2\\pi} -3 n(x)^{-1/3} \\frac{d^2n}{dx^2} dx = \\left[ -3 n(x)^{-1/3} \\frac{dn}{dx} \\right]_{0}^{2\\pi} - \\int_{0}^{2\\pi} \\left(\\frac{dn}{dx}\\right) \\left(n(x)^{-4/3} \\frac{dn}{dx}\\right) dx\n$$\n边界项 $\\left[ -3 n(x)^{-1/3} \\frac{dn}{dx} \\right]_{0}^{2\\pi}$ 的值为零，因为密度 $n(x)$ 及其导数 $\\frac{dn}{dx}(x)$ 在区间 $[0, 2\\pi]$ 上是周期性的，这意味着它们在 $x=0$ 和 $x=2\\pi$ 处的值相同。因此，分部积分简化为：\n$$\n\\int_{0}^{2\\pi} -3 n(x)^{-1/3} \\frac{d^2n}{dx^2} dx = - \\int_{0}^{2\\pi} n(x)^{-4/3} \\left(\\frac{dn}{dx}\\right)^2 dx\n$$\n这假设了 $n(x)$ 是二次可微且严格为正的，这在 $a<1$ 的测试用例中得到了保证。\n\n将此结果代回到 $\\Delta E[n]$ 的表达式中：\n$$\n\\Delta E[n] = \\int_{0}^{2\\pi} n(x)^{-4/3} \\left(\\frac{dn}{dx}\\right)^2 dx - \\int_{0}^{2\\pi} n(x)^{-4/3} \\left(\\frac{dn}{dx}\\right)^2 dx = 0\n$$\n这个证明表明，对于*任何*足够光滑、周期性且不为零的密度 $n(x)$，$\\Delta E[n]$ 恒等于零。因此，要回答问题的第一部分，任何满足这些条件的非均匀密度都是一个有效的解。例如，我们可以从提供的测试组中选择任何 $a \\ne 0$ 的参数，比如 $(n_0, a, k) = (0.12, 0.40, 1)$。这给出了一个特定的非均匀分布：\n$$\nn(x) = 0.12(1 + 0.40 \\cos(x))\n$$\n对于此密度，$\\Delta E[n] = 0$。\n\n第二部分：数值实现\n第二个任务是编写一个程序来为给定的测试用例评估 $\\Delta E[n]$。根据我们的解析推导，所有测试用例的结果，包括 $a=0$ 的均匀情况（这使得被积函数显然为零），都应为 $0$。数值计算将作为此解析结果的验证。\n\n我们考虑密度族 $n(x) = n_{0}(1 + a \\cos(kx))$。所需的导数是：\n$$\n\\frac{dn}{dx}(x) = -n_{0} a k \\sin(kx)\n$$\n$$\n\\frac{d^2n}{dx^2}(x) = -n_{0} a k^2 \\cos(kx)\n$$\n将这些代入 $\\Delta E[n]$ 的被积函数，得到需要积分的函数：\n$$\nI(x; n_0, a, k) = \\left[n_{0}(1 + a \\cos(kx))\\right]^{-4/3} \\left(-n_{0} a k \\sin(kx)\\right)^2 - 3 \\left[n_{0}(1 + a \\cos(kx))\\right]^{-1/3} \\left(-n_{0} a k^2 \\cos(kx)\\right)\n$$\n$$\nI(x; n_0, a, k) = n_0^{2/3} a^2 k^2 \\frac{\\sin^2(kx)}{(1+a\\cos(kx))^{4/3}} + 3 n_0^{2/3} a k^2 \\frac{\\cos(kx)}{(1+a\\cos(kx))^{1/3}}\n$$\n我们将实现一个程序，对测试组中的每一组参数 $(n_0, a, k)$ 进行数值计算定积分 $\\Delta E[n] = \\int_0^{2\\pi} I(x; n_0, a, k) \\, dx$。一个高精度的数值求积程序，例如 `scipy.integrate.quad`，适合此任务。最终结果预计在机器精度范围内为零，并将按要求格式化为 $12$ 位小数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import quad\n\ndef solve():\n    \"\"\"\n    Solves the problem of calculating the GGA correction Delta E[n]\n    for a given set of parameterized electron densities.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (n0, a, k)\n        (0.12, 0.40, 1),\n        (0.12, 0.00, 3),\n        (0.12, 0.95, 5),\n        (0.20, 0.70, 8),\n    ]\n\n    results = []\n    for case in test_cases:\n        n0, a, k = case\n\n        # For a uniform density (a=0), the derivatives are zero,\n        # so the integrand is identically zero.\n        if a == 0.0:\n            results.append(0.0)\n            continue\n\n        # Define the integrand for the GGA correction.\n        # The analytical derivation shows the integral is always zero for\n        # periodic boundary conditions. This numerical calculation serves as\n        # a verification.\n        # Integrand: n(x)^(-4/3)*(dn/dx)^2 - 3*n(x)^(-1/3)*(d^2n/dx^2)\n        def integrand(x, n0_val, a_val, k_val):\n            \"\"\"\n            Calculates the value of the integrand at a point x.\n            \"\"\"\n            # Define density n(x) and its derivatives\n            cos_kx = np.cos(k_val * x)\n            sin_kx = np.sin(k_val * x)\n\n            n_x = n0_val * (1.0 + a_val * cos_kx)\n            # dn/dx = -n0*a*k*sin(kx)\n            dn_dx = -n0_val * a_val * k_val * sin_kx\n            # d^2n/dx^2 = -n0*a*k^2*cos(kx)\n            d2n_dx2 = -n0_val * a_val * k_val**2 * cos_kx\n\n            # The condition 0 <= a < 1 ensures n_x > 0, so no division by zero.\n            term1 = (n_x**(-4.0/3.0)) * (dn_dx**2)\n            term2 = -3.0 * (n_x**(-1.0/3.0)) * d2n_dx2\n            \n            return term1 + term2\n\n        # Perform numerical integration over the domain [0, 2*pi].\n        # The quad function returns the integral and an error estimate.\n        # We only need the integral value.\n        integral_val, _ = quad(integrand, 0, 2 * np.pi, args=(n0, a, k))\n        \n        results.append(integral_val)\n\n    # Format the final output as a comma-separated list of floats,\n    # each rounded to 12 decimal places, enclosed in square brackets.\n    # String formatting is used to ensure the correct number of decimal places.\n    formatted_results = [f\"{r:.12f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2464502"}, {"introduction": "许多流行的GGA泛函，如PBE，其成功并不仅仅在于分别改进交换或关联部分。这项动手编程练习将引导你通过数值计算，探究PBE成功的关键秘诀之一：其交换和关联项中存在的系统性误差对消。你将量化这种对消效应，并观察它在不同电子密度下的表现 [@problem_id:2464514]。", "problem": "考虑在 Kohn–Sham 密度泛函理论 (DFT) 中使用的广义梯度近似 (GGA)，特别是 Perdew–Burke–Ernzerhof (PBE) 泛函。任务是通过将 PBE 与一个基于梯度展开的参考系进行比较，来研究一族球对称、单参数电子密度的交换和关联之间的误差抵消。在原子单位制下进行计算，其中能量单位为哈特里 (Hartree)，长度单位为玻尔 (Bohr)。\n\n您将研究一族由电子数 $N$ (整数) 和一个弥散参数 $a$ (单位为玻尔的倒数的正实数) 参数化的模型、自旋非极化、球对称电子密度：\n$$\nn(r) \\;=\\; N \\,\\frac{a^3}{\\pi}\\, e^{-2 a r}, \\quad r \\ge 0.\n$$\n这些密度是归一化的，因此对于所有正数 $a$，都有 $\\int n(\\mathbf{r}) \\, d^3 r = N$。对于每一种密度，您将使用以下两种方法计算总交换能和关联能：\n- 一种 PBE 类型的 GGA，其在自旋非极化情况下满足标准的 PBE 约束条件，以及\n- 一种“二阶梯度展开”(GE2) 参考，它使用已知的交换和关联的小梯度系数。\n\n请将您的推导和实现基于以下基本定义和约束：\n- 局域密度近似 (LDA) 的单位体积交换能密度由均匀电子气表达式构建。使用标准的均匀电子气费米波矢定义 $k_F(n) = (3 \\pi^2 n)^{1/3}$，以及出现在 GGA 设计中的约化梯度：\n  - 对于此 $n(r)$，密度梯度的模为 $|\\nabla n| = \\left|\\frac{dn}{dr}\\right|$，\n  - 用于交换的约化梯度为 $s = \\dfrac{|\\nabla n|}{2 k_F n}$，\n  - 用于关联的屏蔽波矢为 $k_s = \\sqrt{\\dfrac{4 k_F}{\\pi}}$，用于关联的约化梯度为 $t = \\dfrac{|\\nabla n|}{2 k_s n}$。\n- PBE 交换增强因子必须满足交换的精确小梯度极限，并在大梯度下饱和到一个有限值。小梯度极限恢复了系数为 $\\mu_{\\mathrm{GE}} = \\dfrac{10}{81}$ 的精确二阶梯度展开。用于交换的正则 PBE 常数是 $\\mu$ 和 $\\kappa$ (均为无量纲)，其中 $\\mu$ 大于 $\\mu_{\\mathrm{GE}}$，$\\kappa$ 设定了饱和值。\n- PBE 关联必须在小梯度极限下恢复系数为 $\\beta_{\\mathrm{GE}}$ 的精确二阶梯度展开，并且必须遵守由常数 $\\gamma$ 表征的精确高密度对数约束；它通常通过一个解析内插来实现，该内插依赖于一个取决于 $t$ 的对数和一个为恢复 LDA 极限而选择的密度依赖因子。\n- 每个粒子的 LDA 关联能 $\\varepsilon_c^{\\mathrm{LDA}}(n)$ 应取自一个著名的、对非极化情况下的均匀电子气数据进行的分段解析拟合。\n\n为给定的 $(N,a)$ 构建以下两种泛函：\n1) 一种 PBE 类型的 GGA 总交换关联能，\n$$\nE_{xc}^{\\mathrm{PBE}}[n] \\;=\\; \\int \\left(e_x^{\\mathrm{LDA}}(n)\\,F_x^{\\mathrm{PBE}}(s) + n\\,\\big(\\varepsilon_c^{\\mathrm{LDA}}(n) + H^{\\mathrm{PBE}}(n,t)\\big)\\right)\\, d^3 r,\n$$\n它在自旋非极化情况下满足上述针对交换和关联的 PBE 约束。\n2) 一种基于 GE2 的参考总交换关联能，\n$$\nE_{xc}^{\\mathrm{GE2}}[n] \\;=\\; \\int \\left(e_x^{\\mathrm{LDA}}(n)\\,\\big(1 + \\mu_{\\mathrm{GE}} s^2\\big) + n\\,\\varepsilon_c^{\\mathrm{LDA}}(n) + n\\,\\beta_{\\mathrm{GE}} t^2\\right)\\, d^3 r,\n$$\n它对交换使用精确的二阶梯度系数 $\\mu_{\\mathrm{GE}}$，对关联使用 $\\beta_{\\mathrm{GE}}$。\n\n将 PBE 相对于 GE2 参考的交换误差和关联误差定义为\n$$\n\\Delta E_x \\;=\\; E_x^{\\mathrm{PBE}} - E_x^{\\mathrm{GE2}}, \\qquad\n\\Delta E_c \\;=\\; E_c^{\\mathrm{PBE}} - E_c^{\\mathrm{GE2}}.\n$$\n为量化抵消程度，对每种情况报告无量纲的抵消比\n$$\nR \\;=\\; \\frac{\\big|\\Delta E_x + \\Delta E_c\\big|}{\\big|\\Delta E_x\\big| + \\big|\\Delta E_c\\big|}.\n$$\n$R \\ll 1$ 的值表示交换和关联误差之间存在强烈的抵消。所有能量单位均为哈特里 (原子单位)，$R$ 是无量纲的。\n\n利用球对称性，数值计算三维空间中的径向积分，即，\n$$\n\\int f(\\mathbf{r}) \\, d^3 r \\;=\\; 4\\pi \\int_0^\\infty f(r)\\, r^2 \\, dr.\n$$\n选择一个足够长且足够密的径向格点，以使每个 $(N,a)$ 的能量收敛到至少三位小数。您不得使用任何用户输入；所有参数均在下方指定。\n\n对于自旋非极化情况，使用正则 PBE 常数，并为 LDA 关联拟合使用广泛应用的均匀电子气参数。实现您的程序，为以下每个测试用例（“测试套件”）计算 $R$：\n- 用例 1 (正常情况，中等弥散): $(N,a) = (2, 0.50)$,\n- 用例 2 (更弥散，预期为强梯度区域): $(N,a) = (2, 0.25)$,\n- 用例 3 (紧致密度，预期为弱梯度区域): $(N,a) = (2, 2.00)$,\n- 用例 4 (更高密度幅值，中等梯度): $(N,a) = (10, 1.00)$.\n\n您的程序应生成单行输出，其中包含四个用例的抵消比，每个比值四舍五入到三位小数，以逗号分隔的列表形式包含在方括号内（例如，$\\texttt{[0.137,0.021,0.402,0.189]}$）。不应打印任何其他文本。输出是无量纲的，因此无单位。目标是确定所提供的哪个系统产生的 $R$ 最接近 $0$，这表明相对于 GE2 参考，PBE 的交换和关联误差虽然各自很大，但几乎完美地相互抵消。", "solution": "我们从 Kohn–Sham 密度泛函理论 (DFT) 的能量划分入手，重点关注交换关联贡献。在广义梯度近似 (GGA) 中，交换和关联的能量密度通过约化梯度依赖于局域密度 $n(\\mathbf{r})$ 及其梯度。我们全程使用原子单位制。\n\n对于一个自旋非极化系统，均匀电子气的费米波矢为 $k_F(n) = (3 \\pi^2 n)^{1/3}$。所考虑的球形模型密度为\n$$\nn(r) \\;=\\; N \\,\\frac{a^3}{\\pi}\\, e^{-2 a r}, \\quad r \\ge 0,\n$$\n其中 $N$ 为整数，$a$ 为正实数。对于这些密度，球对称性意味着 $|\\nabla n| = \\left|\\frac{dn}{dr}\\right| = 2 a n(r)$。进入交换项的约化梯度是\n$$\ns(r) \\;=\\; \\frac{|\\nabla n|}{2 k_F n} \\;=\\; \\frac{a}{k_F(r)} \\;=\\; \\frac{a}{(3 \\pi^2 n(r))^{1/3}},\n$$\n而用于关联的屏蔽波矢是 $k_s(r) = \\sqrt{\\tfrac{4 k_F(r)}{\\pi}}$，从而得出关联的约化梯度\n$$\nt(r) \\;=\\; \\frac{|\\nabla n|}{2 k_s n} \\;=\\; \\frac{a}{k_s(r)} \\;=\\; \\frac{a}{\\sqrt{4 (3 \\pi^2 n(r))^{1/3} / \\pi}}.\n$$\n\n局域密度近似 (LDA) 的单位体积交换能密度具有标准的均匀电子气形式\n$$\ne_x^{\\mathrm{LDA}}(n) \\;=\\; - C_x\\, n^{4/3}, \\quad C_x \\;=\\; \\frac{3}{4}\\left(\\frac{3}{\\pi}\\right)^{1/3}.\n$$\n\n对于 PBE 类型的交换，我们需要一个增强因子 $F_x^{\\mathrm{PBE}}(s)$，它 (i) 在 $s \\to 0$ 时再现系数为 $\\mu_{\\mathrm{GE}} = \\tfrac{10}{81}$ 的精确二阶梯度展开，并且 (ii) 饱和到一个有限的上界，以间接遵守 Lieb-Oxford 界。满足这些约束的正则解析形式是\n$$\nF_x^{\\mathrm{PBE}}(s) \\;=\\; 1 + \\kappa - \\frac{\\kappa}{1 + \\frac{\\mu}{\\kappa} s^2},\n$$\n其中 $\\mu$ 和 $\\kappa$ 取自原始的 Perdew–Burke–Ernzerhof 构造。正则 PBE 常数是\n$$\n\\mu \\;=\\; 0.21951, \\qquad \\kappa \\;=\\; 0.804,\n$$\n而精确的小梯度参考系数仍为 $\\mu_{\\mathrm{GE}} = \\tfrac{10}{81}$。\n\n对于关联，将总关联能写作\n$$\nE_c[n] \\;=\\; \\int n(r)\\,\\varepsilon_c(n(r)) \\, d^3 r,\n$$\n其中 $\\varepsilon_c(n)$ 是每个粒子的关联能。LDA 关联能 $\\varepsilon_c^{\\mathrm{LDA}}(n)$ 由一个广泛使用的、对自旋非极化情况下的均匀电子气进行的分段解析拟合提供。一个标准的选择是拟合了 Ceperley–Alder 数据的 Perdew–Zunger 1981 (PZ81) 参数化方案。根据 Wigner–Seitz 半径 $r_s(n) = \\left(\\tfrac{3}{4\\pi n}\\right)^{1/3}$，其非极化分支为\n$$\n\\varepsilon_c^{\\mathrm{LDA}}(r_s) \\;=\\;\n\\begin{cases}\nA \\ln r_s + B + C\\, r_s \\ln r_s + D\\, r_s, & r_s \\ge 1,\\\\\n\\gamma_0 + \\beta_1\\, r_s \\ln r_s + \\beta_2\\, r_s, & r_s < 1,\n\\end{cases}\n$$\n其常数为\n$$\nA = 0.0310907, \\quad B = -0.048, \\quad C = 0.0020, \\quad D = -0.0116,\\\\\n\\gamma_0 = -0.1423, \\quad \\beta_1 = 1.0529, \\quad \\beta_2 = 0.3334.\n$$\n\nPBE 关联在 LDA 基础上增加了一个梯度修正 $H^{\\mathrm{PBE}}(n,t)$，选择该修正的目的是 (i) 在小梯度极限下再现系数为精确值 $\\beta_{\\mathrm{GE}}$ 的关联二阶梯度展开，(ii) 强制满足精确的高密度对数行为（系数为 $\\gamma$），以及 (iii) 避免在大梯度下出现非物理的发散。满足这些约束的正则 PBE 解析形式是\n$$\n\\varepsilon_c^{\\mathrm{PBE}}(n,t) \\;=\\; \\varepsilon_c^{\\mathrm{LDA}}(n) + H^{\\mathrm{PBE}}(n,t),\n$$\n其中\n$$\nH^{\\mathrm{PBE}}(n,t) \\;=\\; \\gamma \\,\\ln\\!\\left( 1 + \\frac{\\beta\\, t^2 / \\gamma}{1 + A(n)\\, t^2} \\right),\n$$\n而密度依赖因子 $A(n)$ 通过在均匀情况下恢复 LDA 极限和精确的二阶梯度展开来固定，\n$$\nA(n) \\;=\\; \\frac{\\beta/\\gamma}{\\exp\\!\\left(-\\varepsilon_c^{\\mathrm{LDA}}(n)/\\gamma\\right) - 1}.\n$$\n正则常数为\n$$\n\\beta_{\\mathrm{GE}} = \\beta = 0.066725, \\qquad \\gamma = 0.0310907.\n$$\n在小梯度极限 $t \\to 0$ 下，此构造确保 $H^{\\mathrm{PBE}}(n,t) \\sim \\beta\\, t^2$，从而再现了关联的二阶梯度展开的精确系数 $\\beta_{\\mathrm{GE}}$。\n\n有了这些要素，我们可以为给定的 $(N,a)$ 写出 PBE 类型的 GGA 能量和 GE2 参考能量：\n- PBE 类型的 GGA\n$$\nE_x^{\\mathrm{PBE}}[n] \\;=\\; \\int e_x^{\\mathrm{LDA}}(n)\\, F_x^{\\mathrm{PBE}}(s)\\, d^3 r, \\qquad\nE_c^{\\mathrm{PBE}}[n] \\;=\\; \\int n \\left(\\varepsilon_c^{\\mathrm{LDA}}(n) + H^{\\mathrm{PBE}}(n,t)\\right) d^3 r.\n$$\n- GE2 参考\n$$\nE_x^{\\mathrm{GE2}}[n] \\;=\\; \\int e_x^{\\mathrm{LDA}}(n)\\, \\big(1 + \\mu_{\\mathrm{GE}} s^2\\big)\\, d^3 r, \\qquad\nE_c^{\\mathrm{GE2}}[n] \\;=\\; \\int \\left(n\\, \\varepsilon_c^{\\mathrm{LDA}}(n) + n\\, \\beta_{\\mathrm{GE}}\\, t^2\\right) d^3 r.\n$$\n\n数值计算利用球对称性将三维积分降为一维，\n$$\n\\int f(\\mathbf{r})\\, d^3 r \\;=\\; 4 \\pi \\int_0^\\infty f(r)\\, r^2\\, dr,\n$$\n我们使用足够密的径向网格 $r \\in [0, r_{\\max}]$ 来近似该积分，其中 $r_{\\max}$ 选择得足够大（对于指数型密度，一个实用的法则是 $r_{\\max} \\approx \\tfrac{40}{a}$ 以确保 $n(r_{\\max})$ 可忽略不计）。采用等间距的复合辛普森法则，将每个能量收敛到至少三位小数。\n\n对于每个测试用例，计算相对于 GE2 的交换和关联误差，\n$$\n\\Delta E_x \\;=\\; E_x^{\\mathrm{PBE}} - E_x^{\\mathrm{GE2}}, \\qquad\n\\Delta E_c \\;=\\; E_c^{\\mathrm{PBE}} - E_c^{\\mathrm{GE2}},\n$$\n并报告抵消比\n$$\nR \\;=\\; \\frac{\\left|\\Delta E_x + \\Delta E_c\\right|}{\\left|\\Delta E_x\\right| + \\left|\\Delta E_c\\right|}.\n$$\n根据设计，在约化梯度小的区域，两种方法通过构造在二阶上是一致的；在约化梯度大的区域，PBE 交换增强因子饱和（以满足精确约束），而 GE2 交换继续随 $s$ 二次方增长，使得 $E_x^{\\mathrm{PBE}}$ 的负值小于 $E_x^{\\mathrm{GE2}}$，因此 $\\Delta E_x$ 通常为正。相反，PBE 关联采用对数内插，导致其相对于二次方的 GE2 关联修正增长得更慢，使得 $E_c^{\\mathrm{PBE}}$ 的负值大于 $E_c^{\\mathrm{GE2}}$，因此 $\\Delta E_c$ 通常为负。对于足够弥散的密度（在广阔空间区域内有大的 $r_s$、大的 $s$ 和 $t$），这两个大的、但符号相反的误差可以几乎抵消，从而得到 $R \\ll 1$。\n\n我们将此方法应用于指定的测试套件：\n- 用例 1: $(N,a) = (2, 0.50)$,\n- 用例 2: $(N,a) = (2, 0.25)$,\n- 用例 3: $(N,a) = (2, 2.00)$,\n- 用例 4: $(N,a) = (10, 1.00)$.\n\n每个用例的算法纲要：\n1) 构建一个径向网格 $r \\in [0, r_{\\max}]$，其中 $r_{\\max} = \\tfrac{40}{a}$，并使用大量点来收敛积分。\n2) 计算 $n(r)$、 $|\\nabla n(r)|$、 $k_F(r)$、 $k_s(r)$、 $s(r)$ 和 $t(r)$。\n3) 计算 $e_x^{\\mathrm{LDA}}(n)$、 $F_x^{\\mathrm{PBE}}(s)$，并构建 $e_x^{\\mathrm{PBE}}$ 和 $e_x^{\\mathrm{GE2}}$。\n4) 根据 PZ81 拟合计算 $\\varepsilon_c^{\\mathrm{LDA}}(n)$，使用正则 PBE 公式构建 $H^{\\mathrm{PBE}}(n,t)$，并构建 PBE 和 GE2 的关联能密度。\n5) 使用 $4\\pi r^2$ 雅可比行列式进行径向积分，以获得 $E_x^{\\mathrm{PBE}}$、 $E_x^{\\mathrm{GE2}}$、 $E_c^{\\mathrm{PBE}}$ 和 $E_c^{\\mathrm{GE2}}$。\n6) 计算 $\\Delta E_x$、 $\\Delta E_c$ 和 $R$，并将 $R$ 四舍五入到三位小数。\n\n最后，按上面列出的用例顺序，生成一行包含四个 $R$ 值的输出，格式为方括号内的逗号分隔列表。由于 $R$ 是无量纲的，输出无单位。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\n# Constants for atomic units and functionals\nPI = np.pi\n\n# LDA exchange constant C_x\nC_x = 0.75 * (3.0 / PI) ** (1.0 / 3.0)  # (3/4)*(3/pi)^(1/3)\n\n# PBE exchange constants\nMU_PBE = 0.21951\nKAPPA_PBE = 0.804\n\n# Exact second-order gradient expansion coefficient for exchange\nMU_GE = 10.0 / 81.0\n\n# PBE correlation constants (and GE2 correlation coefficient)\nBETA_GE = 0.066725  # equals beta in PBE\nGAMMA = 0.0310907   # high-density limit constant\n\n# PZ81 (Perdew-Zunger 1981) LDA correlation constants (unpolarized)\nA_c = 0.0310907\nB_c = -0.048\nC_c = 0.0020\nD_c = -0.0116\ngamma0 = -0.1423\nbeta1 = 1.0529\nbeta2 = 0.3334\n\ndef lda_corr_eps_pz81(rs: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Perdew-Zunger 1981 LDA correlation per particle (unpolarized), piecewise in rs.\n    rs is the Wigner-Seitz radius array.\n    \"\"\"\n    rs = np.asarray(rs)\n    eps = np.empty_like(rs, dtype=float)\n    # Branch rs < 1\n    mask_small = rs < 1.0\n    rs_small = rs[mask_small]\n    # Avoid log(0) though rs_small > 0 in practice\n    eps[mask_small] = gamma0 + beta1 * rs_small * np.log(rs_small) + beta2 * rs_small\n\n    # Branch rs >= 1\n    mask_large = ~mask_small\n    rs_large = rs[mask_large]\n    eps[mask_large] = A_c * np.log(rs_large) + B_c + C_c * rs_large * np.log(rs_large) + D_c * rs_large\n    return eps\n\ndef pbe_corr_H(n: np.ndarray, t: np.ndarray) -> np.ndarray:\n    \"\"\"\n    PBE correlation gradient correction H(n, t) per particle, spin unpolarized.\n    Uses canonical PBE formula with density-dependent A(n).\n    \"\"\"\n    # Compute LDA correlation per particle\n    rs = (3.0 / (4.0 * PI * np.maximum(n, 1e-300))) ** (1.0 / 3.0)\n    eps_c_lda = lda_corr_eps_pz81(rs)  # per particle\n\n    # A(n) factor with numerically stable handling near exp(x)-1 ~ 0\n    x = -eps_c_lda / GAMMA\n    # Use expm1 for numerical stability: exp(x) - 1\n    denom = np.expm1(x)\n    # Where denom is extremely small, fall back to series 1/(x + x^2/2)\n    small = np.abs(denom) < 1e-12\n    A = np.empty_like(denom)\n    A[~small] = (BETA_GE / GAMMA) / denom[~small]\n    # Series expansion for small x: exp(x)-1 ~ x + x^2/2\n    xs = x[small]\n    series = xs + 0.5 * xs * xs\n    # avoid zero\n    series = np.where(np.abs(series) < 1e-20, np.sign(series) * 1e-20, series)\n    A[small] = (BETA_GE / GAMMA) / series\n\n    # H per particle\n    num = (BETA_GE * t * t) / GAMMA\n    den = 1.0 + A * t * t\n    arg = 1.0 + num / den\n    # Ensure positivity of log argument\n    arg = np.maximum(arg, 1e-300)\n    H = GAMMA * np.log(arg)\n    return H\n\ndef pbe_exchange_enhancement(s: np.ndarray) -> np.ndarray:\n    \"\"\"\n    PBE exchange enhancement factor F_x(s) = 1 + kappa - kappa / (1 + mu s^2 / kappa)\n    \"\"\"\n    return 1.0 + KAPPA_PBE - KAPPA_PBE / (1.0 + (MU_PBE / KAPPA_PBE) * s * s)\n\ndef radial_grid(a: float, num_points: int = 40000) -> np.ndarray:\n    \"\"\"\n    Build a uniform radial grid [0, rmax] with rmax = 40/a.\n    \"\"\"\n    rmax = 40.0 / a\n    return np.linspace(0.0, rmax, num_points)\n\ndef simpson_integrate(y: np.ndarray, x: np.ndarray) -> float:\n    \"\"\"\n    Composite Simpson's rule for uniform grid.\n    Requires odd number of points; if even, drop last point to make it odd.\n    \"\"\"\n    n = y.size\n    if n % 2 == 0:\n        # drop last point\n        y = y[:-1]\n        x = x[:-1]\n        n -= 1\n    h = (x[-1] - x[0]) / (n - 1)\n    S = y[0] + y[-1] + 4.0 * np.sum(y[1:-1:2]) + 2.0 * np.sum(y[2:-2:2])\n    return S * h / 3.0\n\ndef compute_R_for_case(N: int, a: float, grid_points: int = 40001) -> float:\n    \"\"\"\n    Compute the cancellation ratio R for a given (N, a).\n    \"\"\"\n    # Radial grid\n    r = radial_grid(a, grid_points)\n    # Density and gradient\n    n = N * (a ** 3) / PI * np.exp(-2.0 * a * r)\n    dn_dr = -2.0 * a * n\n    abs_grad_n = np.abs(dn_dr)  # = 2 a n\n\n    # Fermi wave vector, screening wave vector\n    kF = (3.0 * PI ** 2 * np.maximum(n, 1e-300)) ** (1.0 / 3.0)\n    ks = np.sqrt(4.0 * kF / PI)\n\n    # Reduced gradients\n    s = abs_grad_n / (2.0 * kF * np.maximum(n, 1e-300))\n    t = abs_grad_n / (2.0 * ks * np.maximum(n, 1e-300))\n\n    # LDA exchange energy density per volume\n    e_x_lda = -C_x * n ** (4.0 / 3.0)\n\n    # PBE exchange energy density per volume\n    Fx_pbe = pbe_exchange_enhancement(s)\n    e_x_pbe = e_x_lda * Fx_pbe\n\n    # GE2 exchange energy density per volume\n    Fx_ge2 = 1.0 + MU_GE * s * s\n    e_x_ge2 = e_x_lda * Fx_ge2\n\n    # LDA correlation per particle and per volume\n    rs = (3.0 / (4.0 * PI * np.maximum(n, 1e-300))) ** (1.0 / 3.0)\n    eps_c_lda = lda_corr_eps_pz81(rs)\n    e_c_lda = n * eps_c_lda\n\n    # PBE correlation per volume: n * (eps_c_lda + H)\n    H_pbe = pbe_corr_H(n, t)\n    e_c_pbe = n * (eps_c_lda + H_pbe)\n\n    # GE2 correlation per volume: n*eps_c_lda + n*beta*t^2\n    e_c_ge2 = e_c_lda + n * (BETA_GE * t * t)\n\n    # Radial integration with spherical Jacobian\n    jac = 4.0 * PI * r * r\n    Ex_pbe = simpson_integrate(e_x_pbe * jac, r)\n    Ex_ge2 = simpson_integrate(e_x_ge2 * jac, r)\n    Ec_pbe = simpson_integrate(e_c_pbe * jac, r)\n    Ec_ge2 = simpson_integrate(e_c_ge2 * jac, r)\n\n    dEx = Ex_pbe - Ex_ge2\n    dEc = Ec_pbe - Ec_ge2\n    denom = abs(dEx) + abs(dEc)\n    if denom == 0.0:\n        R = 0.0\n    else:\n        R = abs(dEx + dEc) / denom\n    return R\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each test case is a tuple (N, a)\n    test_cases = [\n        (2, 0.50),  # Case 1\n        (2, 0.25),  # Case 2\n        (2, 2.00),  # Case 3\n        (10, 1.00), # Case 4\n    ]\n\n    results = []\n    for (N, a) in test_cases:\n        R = compute_R_for_case(N, a, grid_points=40001)  # odd grid size for Simpson\n        # Round to three decimals\n        results.append(f\"{R:.3f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2464514"}]}