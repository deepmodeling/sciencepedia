{"hands_on_practices": [{"introduction": "我们的约束优化之旅始于一个药物设计中的概念性练习。此问题将开发新药的复杂过程简化为一个可解析求解的模型，我们的目标是最小化分子的内能 $E(x)$，同时确保其性质，如亲脂性（LogP），保持在“类药”范围内。通过解决这个例子 [@problem_id:2453478]，你将对约束如何为解定义一个“可行域”以及约束在决定最优结果时变为“激活”状态意味着什么，建立起基本的直觉。", "problem": "在一个简化的、有物理基础的药物设计场景中，考虑一个由单一描述符 $x$ 参数化的连续类似物系列，该描述符 $x$ 用于量化固定骨架上疏水性取代基的程度。假设辛醇/水分配系数 (LogP) 遵循经验线性自由能关系\n$$\n\\mathrm{LogP}(x) = \\ell_{0} + \\ell_{1} x,\n$$\n其中 $\\ell_{0} = 4.2$ 且 $\\ell_{1} = 1.0$。在一个参考类似物附近，分子在一个分子力学替代模型下的分子内势能通过谐波展开进行建模\n$$\nE(x) = E_{\\mathrm{ref}} + \\kappa \\left(x - x^{\\star}\\right)^{2},\n$$\n其中 $E_{\\mathrm{ref}} = 10$ kJ/mol，$\\kappa = 50$ kJ/mol，且 $x^{\\star} = 1.3$。设计一个候选分子，使其在满足 LogP 值必须满足 $\\mathrm{LogP}(x) \\leq 5$ 的类药性约束条件下，最小化 $E(x)$。\n\n在此约束下，最小化的能量值是多少？将您的答案四舍五入到 $4$ 位有效数字。以 kJ/mol 为单位表示最终能量。在最终的方框答案中不要包含单位。", "solution": "所述问题构成了一个有效的、适定的约束优化练习，其基础是简化但标准的计算化学原理。我们已获得进行严谨求解所需的所有信息。\n\n任务是找到势能函数 $E(x)$ 的最小值，同时要满足对亲脂性描述符 $\\mathrm{LogP}(x)$ 的约束。\n\n目标函数是势能，由谐波模型给出：\n$$ E(x) = E_{\\mathrm{ref}} + \\kappa \\left(x - x^{\\star}\\right)^{2} $$\n代入给定的常数，$E_{\\mathrm{ref}} = 10$ kJ/mol，$\\kappa = 50$ kJ/mol，以及 $x^{\\star} = 1.3$，我们得到：\n$$ E(x) = 10 + 50 \\left(x - 1.3\\right)^{2} $$\n这是一个关于描述符 $x$ 的二次函数。二次项的系数为正（$\\kappa = 50 > 0$），因此抛物线开口向上，该函数有唯一的全局最小值。为了找到无约束最小值，我们将 $E(x)$ 对 $x$ 求导，并令导数等于零：\n$$ \\frac{dE}{dx} = 2\\kappa(x - x^{\\star}) = 2(50)(x - 1.3) = 100(x - 1.3) $$\n令 $\\frac{dE}{dx} = 0$ 可得 $100(x - 1.3) = 0$，解得无约束最小化子 $x_{\\text{unconstrained}} = 1.3$。在此点上，无约束最小能量为 $E(1.3) = 10 + 50(1.3 - 1.3)^{2} = 10$ kJ/mol。\n\n接下来，我们必须分析系统的约束条件。类药性约束为 $\\mathrm{LogP}(x) \\leq 5$。函数 $\\mathrm{LogP}(x)$ 由以下线性关系定义：\n$$ \\mathrm{LogP}(x) = \\ell_{0} + \\ell_{1} x $$\n使用给定的参数 $\\ell_{0} = 4.2$ 和 $\\ell_{1} = 1.0$，约束条件变为：\n$$ 4.2 + 1.0x \\leq 5 $$\n对此不等式求解 $x$，可以定义描述符的可行域：\n$$ x \\leq 5 - 4.2 $$\n$$ x \\leq 0.8 $$\n可行域是区间 $(-\\infty, 0.8]$ 中的所有 $x$ 的集合。\n\n优化问题是在此可行域内最小化 $E(x)$。我们现在必须将无约束最小值点 $x_{\\text{unconstrained}} = 1.3$ 与可行域进行比较。由于 $1.3 > 0.8$，无约束最小值点位于可行域之外。\n\n函数 $E(x)$ 是一个顶点（最小值点）在 $x = 1.3$ 的抛物线。对于所有 $x < 1.3$，函数 $E(x)$ 是单调递减的。可行域 $x \\leq 0.8$ 完全处于该单调区间内。要在可行域内找到 $E(x)$ 的最小值，我们必须选择可行域中最接近无约束最小化子 $x = 1.3$ 的点。这个点是可行域的边界，$x_{\\text{opt}} = 0.8$。在此点，称之为约束“激活”。\n\n最后，我们通过计算能量函数在 $x_{\\text{opt}} = 0.8$ 点的值来得到约束最小能量 $E_{\\text{min}}$：\n$$ E_{\\text{min}} = E(0.8) = 10 + 50(0.8 - 1.3)^{2} $$\n$$ E_{\\text{min}} = 10 + 50(-0.5)^{2} $$\n$$ E_{\\text{min}} = 10 + 50(0.25) $$\n$$ E_{\\text{min}} = 10 + 12.5 $$\n$$ E_{\\text{min}} = 22.5 \\, \\text{kJ/mol} $$\n题目要求答案四舍五入到 $4$ 位有效数字。为满足此要求，数值 $22.5$ 写作 $22.50$。", "answer": "$$\\boxed{22.50}$$", "id": "2453478"}, {"introduction": "从解析模型转向实际计算，此练习要求你使用数值求解器来优化分子的三维结构。你将实现一个简化的分子力学能量函数，并根据基本的化学原理施加几何约束——防止非键合原子彼此靠得太近。这项实践 [@problem_id:2453470] 对于培养将化学体系转化为计算机可以解决的、定义明确的数学问题的核心技能至关重要，这是现代计算化学的基石。", "problem": "你的任务是根据基本原理，构建并求解一个带约束的分子构象优化问题。目标是在与未成键氢原子相关的几何约束下，最小化一个经典分子力学能量。所有距离必须以埃（用 $\\mathrm{\\AA}$ 表示）为单位处理，所有能量必须以千焦每摩尔（用 $\\mathrm{kJ\\ mol^{-1}}$ 表示）为单位处理。作为参数提供的角度以度为单位指定；所有三角函数计算必须以弧度进行。\n\n对于一个原子位置为 $\\{\\mathbf{r}_i\\}_{i=1}^{N}$（其中 $\\mathbf{r}_i \\in \\mathbb{R}^3$）的构象，其总势能定义为谐振子键长项和谐振子键角项的总和：\n$$\nE(\\{\\mathbf{r}_i\\}) \\;=\\; \\sum_{(i,j)\\in \\mathcal{B}} \\frac{1}{2} k_{b,ij}\\left(\\lVert \\mathbf{r}_i - \\mathbf{r}_j \\rVert - r_{0,ij}\\right)^2 \\;+\\; \\sum_{(i,j,k)\\in \\mathcal{A}} \\frac{1}{2} k_{\\theta,ijk}\\left(\\theta_{ijk} - \\theta_{0,ijk}\\right)^2,\n$$\n其中 $\\mathcal{B}$ 是成键原子对的集合，$\\mathcal{A}$ 是已定义键角的集合，$k_{b,ij}$ 是单位为 $\\mathrm{kJ\\ mol^{-1}\\ \\AA^{-2}}$ 的键力常数，$r_{0,ij}$ 是单位为 $\\mathrm{\\AA}$ 的平衡键长，$k_{\\theta,ijk}$ 是单位为 $\\mathrm{kJ\\ mol^{-1}\\ rad^{-2}}$ 的角力常数，而 $\\theta_{ijk}$ 是由向量 $(\\mathbf{r}_i-\\mathbf{r}_j)$ 和 $(\\mathbf{r}_k-\\mathbf{r}_j)$ 在原子 $j$ 处形成的夹角，以弧度为单位。对于任何点积计算，使用\n$$\n\\theta_{ijk} \\;=\\; \\arccos \\!\\left( \\frac{(\\mathbf{r}_i-\\mathbf{r}_j)\\cdot(\\mathbf{r}_k-\\mathbf{r}_j)}{\\lVert \\mathbf{r}_i-\\mathbf{r}_j \\rVert \\,\\lVert \\mathbf{r}_k-\\mathbf{r}_j \\rVert} \\right),\n$$\n其中 $\\arccos$ 的参数在数值上被裁剪到区间 $[-1,1]$ 内。\n\n几何约束为：对于每一对未直接成键的氢原子，它们的间距必须满足\n$$\n\\lVert \\mathbf{r}_p - \\mathbf{r}_q \\rVert \\;\\ge\\; 2.0,\n$$\n距离单位为 $\\mathrm{\\AA}$。此处，“未成键氢原子对”指的是两个原子均为氢元素，且该原子对不属于集合 $\\mathcal{B}$。\n\n你的程序必须针对以下每个测试用例，求解在这些不等式约束下的 $E(\\{\\mathbf{r}_i\\})$ 最小化问题。程序不能有用户输入。输出必须为单行，包含一个浮点数列表，每个数字对应一个测试用例，表示最小化的总能量（单位为 $\\mathrm{kJ\\ mol^{-1}}$），并精确到三位小数。\n\n测试套件（所有坐标单位为 $\\mathrm{\\AA}$；所有角度参数 $\\theta_0$ 单位为度；所有三角函数计算必须使用弧度）：\n\n- 测试用例 1 (氢分子, $ \\mathrm{H_2} $):\n  - 原子 (索引: 元素): $0:\\ \\mathrm{H}$，$1:\\ \\mathrm{H}$。\n  - 键 $\\mathcal{B}$: $(0,1)$，其中 $k_b = 450.0$，$r_0 = 0.74$。\n  - 键角 $\\mathcal{A}$: 无。\n  - 初始坐标 $\\mathbf{r}_0$: $\\mathbf{r}_0(0)=(0.0,\\,0.0,\\,0.0)$，$\\mathbf{r}_0(1)=(1.0,\\,0.0,\\,0.0)$。\n\n- 测试用例 2 (水, $ \\mathrm{H_2O} $):\n  - 原子: $0:\\ \\mathrm{O}$，$1:\\ \\mathrm{H}$，$2:\\ \\mathrm{H}$。\n  - 键 $\\mathcal{B}$: $(0,1)$，其中 $k_b = 450.0$，$r_0 = 0.96$；$(0,2)$，其中 $k_b = 450.0$，$r_0 = 0.96$。\n  - 键角 $\\mathcal{A}$: $(1,0,2)$，其中 $k_{\\theta} = 55.0$，$\\theta_0 = 104.5$。\n  - 初始坐标:\n    - 令 $r = 0.96$，$\\theta_0 = 104.5$ 度。\n    - $\\mathbf{r}_0(0)=(0.0,\\,0.0,\\,0.0)$，\n      $\\mathbf{r}_0(1)=(r,\\,0.0,\\,0.0)$，\n      $\\mathbf{r}_0(2)=(r\\cos\\theta_0,\\,r\\sin\\theta_0,\\,0.0)$，其中 $\\theta_0$ 在计算三角函数时需转换为弧度。\n  - 约束应用于未成键的氢原子对 $(1,2)$：它们的距离必须至少为 $2.0$。\n\n- 测试用例 3 (线性 $\\mathrm{H{-}C{-}C{-}H}$):\n  - 原子: $0:\\ \\mathrm{H}$，$1:\\ \\mathrm{C}$，$2:\\ \\mathrm{C}$，$3:\\ \\mathrm{H}$。\n  - 键 $\\mathcal{B}$: $(0,1)$，其中 $k_b = 300.0$，$r_0 = 1.09$；$(1,2)$，其中 $k_b = 300.0$，$r_0 = 1.54$；$(2,3)$，其中 $k_b = 300.0$，$r_0 = 1.09$。\n  - 键角 $\\mathcal{A}$: $(0,1,2)$，其中 $k_{\\theta} = 20.0$，$\\theta_0 = 180.0$；$(1,2,3)$，其中 $k_{\\theta} = 20.0$，$\\theta_0 = 180.0$。\n  - 初始坐标（沿 $x$ 轴共线）：\n    - $\\mathbf{r}_0(0)=(0.0,\\,0.0,\\,0.0)$，\n      $\\mathbf{r}_0(1)=(1.09,\\,0.0,\\,0.0)$，\n      $\\mathbf{r}_0(2)=(1.09+1.54,\\,0.0,\\,0.0)$，\n      $\\mathbf{r}_0(3)=(1.09+1.54+1.09,\\,0.0,\\,0.0)$。\n  - 约束应用于未成键的氢原子对 $(0,3)$：它们的距离必须至少为 $2.0$。\n\n你的程序应生成一行输出，其中包含三个测试用例的最小化能量，格式为方括号括起来的逗号分隔列表，例如“[e1,e2,e3]”。每个条目必须是相应测试用例的最小化总能量（单位为 $\\mathrm{kJ\\ mol^{-1}}$），并精确到三位小数。不应打印任何其他文本。", "solution": "所呈现的问题是一个源自计算化学领域的带约束非线性优化任务。其目标是在特定的原子间距离几何约束下，确定几个小分子的最小势能构象。\n\n在继续之前，需要对问题陈述进行验证。\n\n**步骤 1：提取的已知条件**\n\n1.  **目标函数（势能）**：\n    $$\n    E(\\{\\mathbf{r}_i\\}) \\;=\\; \\sum_{(i,j)\\in \\mathcal{B}} \\frac{1}{2} k_{b,ij}\\left(\\lVert \\mathbf{r}_i - \\mathbf{r}_j \\rVert - r_{0,ij}\\right)^2 \\;+\\; \\sum_{(i,j,k)\\in \\mathcal{A}} \\frac{1}{2} k_{\\theta,ijk}\\left(\\theta_{ijk} - \\theta_{0,ijk}\\right)^2\n    $$\n    其中：\n    - $\\{\\mathbf{r}_i\\}$ 是原子 i 的三维坐标。\n    - $\\mathcal{B}$ 是成键原子对的集合。\n    - $\\mathcal{A}$ 是定义键角的原子三元组的集合。\n    - $k_{b,ij}$ 是单位为 $\\mathrm{kJ\\ mol^{-1}\\ \\AA^{-2}}$ 的键力常数。\n    - $r_{0,ij}$ 是单位为 $\\mathrm{\\AA}$ 的平衡键长。\n    - $k_{\\theta,ijk}$ 是单位为 $\\mathrm{kJ\\ mol^{-1}\\ rad^{-2}}$ 的角力常数。\n    - $\\theta_{0,ijk}$ 是平衡角，单位为弧度（由参数中提供的度数转换而来）。\n    - $\\theta_{ijk} = \\arccos \\!\\left( \\frac{(\\mathbf{r}_i-\\mathbf{r}_j)\\cdot(\\mathbf{r}_k-\\mathbf{r}_j)}{\\lVert \\mathbf{r}_i-\\mathbf{r}_j \\rVert \\,\\lVert \\mathbf{r}_k-\\mathbf{r}_j \\rVert} \\right)$，其参数被裁剪到 [-1, 1] 区间内。\n\n2.  **约束条件**：对于任意一对不在键集合 $\\mathcal{B}$ 中的氢原子 $(p, q)$，其距离必须满足：\n    $$\n    \\lVert \\mathbf{r}_p - \\mathbf{r}_q \\rVert \\;\\ge\\; 2.0\\ \\mathrm{\\AA}\n    $$\n\n3.  **测试用例**：提供了三个特定的分子体系，每个体系都定义了原子、元素、成键拓扑、力场参数（$k_b, r_0, k_\\theta, \\theta_0$）和初始坐标。\n\n4.  **输出格式**：一个单行列表，包含每个测试用例的最小化能量（单位 $\\mathrm{kJ\\ mol^{-1}}$），四舍五入到三位小数。\n\n**步骤 2：验证**\n\n根据所需标准对问题进行分析：\n- **科学依据**：势能函数是一个简化的经典分子力学力场，由谐振子键伸缩项和键角弯曲项组成。这是分子模拟中一个标准且成熟的模型。对未成键氢原子距离的约束代表了空间位阻排斥（泡利不相容原理排斥）的一个基本模型，这在物理上是合理的。所有提供的参数都在指定分子的实际范围内。\n- **适定性**：该问题是一个标准的非线性规划 (NLP) 问题：在一个不等式约束集合下，最小化一个连续可微的函数（除了在坐标重合点——这由势能的排斥性所阻止，以及在 `arccos` 定义域的边界——这通过数值裁剪来处理）。预期解是存在的。\n- **客观与完整性**：问题陈述使用了精确的数学定义和客观的语言。每个测试用例所需的所有数据（原子构成、参数、初始几何构型）均已提供。\n\n**步骤 3：结论**\n\n问题被判定为**有效**。这是一个定义明确、有科学依据且在计算上可解的约束优化问题。\n\n**求解方法**\n\n该问题将使用数值优化方法求解。对于一个包含 $N$ 个原子的体系，所有原子坐标构成的向量 $\\mathbf{x} \\in \\mathbb{R}^{3N}$ 将作为优化的变量。目标函数是势能 $E(\\mathbf{x})$。约束的形式为 $g_p(\\mathbf{x}) \\le 0$，对于每个受约束的原子对 $(p,q)$，我们可以写成 $d_{\\mathrm{min}} - \\lVert \\mathbf{r}_p - \\mathbf{r}_q \\rVert \\le 0$，其中 $d_{\\mathrm{min}} = 2.0\\ \\mathrm{\\AA}$。\n\n我们将采用序列最小二乘规划 (Sequential Least Squares Programming, SLSQP) 算法，该算法在 `scipy.optimize.minimize` 函数中实现。此方法适用于带不等式约束的非线性优化问题。\n\n实现需要一个 Python 函数来计算总能量 $E(\\mathbf{x})$，以及一组表示约束条件的函数。\n\n**测试用例分析**\n\n1.  **测试用例 1 (氢分子, $\\mathrm{H}_2$)**: 该体系由两个通过化学键连接的氢原子 $(0,1)$ 组成。其势能仅包含一个键伸缩项：$E = \\frac{1}{2} k_{b,01} (\\lVert \\mathbf{r}_0 - \\mathbf{r}_1 \\rVert - r_{0,01})^2$。当键长等于平衡键长 $\\lVert \\mathbf{r}_0 - \\mathbf{r}_1 \\rVert = r_{0,01} = 0.74\\ \\mathrm{\\AA}$ 时，该函数达到最小值，此时能量为 $E=0$。约束规则适用于未成键的氢原子对。由于唯一的氢原子对是成键的，因此不存在约束。优化是无约束的，预期的最小能量恰好为 $0.0\\ \\mathrm{kJ\\ mol^{-1}}$。\n\n2.  **测试用例 2 (水, $\\mathrm{H_2O}$)**: 该体系由一个氧原子 ($0$) 和两个氢原子 ($1, 2$) 组成。无约束的最小能量构象将具有键长 $d_{O-H} = 0.96\\ \\mathrm{\\AA}$ 和键角 $\\theta_{H-O-H} = 104.5^\\circ$。在这种几何结构中，两个氢原子之间的距离使用余弦定理计算为 $d_{H-H} = \\sqrt{2 \\cdot (0.96)^2 \\cdot (1 - \\cos(104.5^\\circ))} \\approx 1.518\\ \\mathrm{\\AA}$。这个距离违反了 $d_{H-H} \\ge 2.0\\ \\mathrm{\\AA}$ 的约束。因此，该约束是激活的。优化器必须找到一个满足 $d_{H-H} \\ge 2.0\\ \\mathrm{\\AA}$ 的新几何构型，同时最小化键和角中产生的应变能。最终能量将大于零。\n\n3.  **测试用例 3 (线性 $\\mathrm{H-C-C-H}$)**: 该体系被配置为线性，平衡角为 $180^\\circ$。在无约束能量最小值处，所有键长都处于其平衡值（$1.09\\ \\mathrm{\\AA}$，$1.54\\ \\mathrm{\\AA}$，$1.09\\ \\mathrm{\\AA}$），分子是完全线性的。两个未成键的氢原子 ($0, 3$) 之间的距离是平衡键长之和：$d_{H-H} = 1.09 + 1.54 + 1.09 = 3.72\\ \\mathrm{\\AA}$。这个距离大于要求的最小值 $2.0\\ \\mathrm{\\AA}$。因此，该约束是未激活的，因为它在全局无约束最小值处已经被满足。优化器将收敛到此构型，其能量为 $0.0\\ \\mathrm{kJ\\ mol^{-1}}$。提供的初始坐标已经代表了这个最小能量状态。\n\n以下 Python 代码实现了此策略，以求解每个测试用例的最小能量。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef solve():\n    \"\"\"\n    Formulates and solves the constrained molecular optimization problem for three test cases.\n    \"\"\"\n\n    # --- Test Case Data ---\n\n    # Initial coordinates for Water (Test Case 2)\n    r_oh_h2o = 0.96\n    theta_hoh_deg = 104.5\n    theta_hoh_rad = np.deg2rad(theta_hoh_deg)\n    h2o_initial_coords = np.array([\n        [0.0, 0.0, 0.0],\n        [r_oh_h2o, 0.0, 0.0],\n        [r_oh_h2o * np.cos(theta_hoh_rad), r_oh_h2o * np.sin(theta_hoh_rad), 0.0]\n    ])\n\n    # Initial coordinates for Linear H-C-C-H (Test Case 3)\n    hcch_initial_coords = np.array([\n        [0.0, 0.0, 0.0],\n        [1.09, 0.0, 0.0],\n        [1.09 + 1.54, 0.0, 0.0],\n        [1.09 + 1.54 + 1.09, 0.0, 0.0]\n    ])\n\n    test_cases = [\n        {\n            \"name\": \"Diatomic Hydrogen\",\n            \"atoms\": {\"H\": [0, 1]},\n            \"bonds\": [(0, 1, 450.0, 0.74)],\n            \"angles\": [],\n            \"initial_coords\": np.array([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0]]),\n        },\n        {\n            \"name\": \"Water\",\n            \"atoms\": {\"O\": [0], \"H\": [1, 2]},\n            \"bonds\": [(0, 1, 450.0, 0.96), (0, 2, 450.0, 0.96)],\n            \"angles\": [(1, 0, 2, 55.0, 104.5)],\n            \"initial_coords\": h2o_initial_coords,\n        },\n        {\n            \"name\": \"Linear H-C-C-H\",\n            \"atoms\": {\"H\": [0, 3], \"C\": [1, 2]},\n            \"bonds\": [\n                (0, 1, 300.0, 1.09),\n                (1, 2, 300.0, 1.54),\n                (2, 3, 300.0, 1.09),\n            ],\n            \"angles\": [\n                (0, 1, 2, 20.0, 180.0),\n                (1, 2, 3, 20.0, 180.0)\n            ],\n            \"initial_coords\": hcch_initial_coords,\n        }\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        # --- Objective Function ---\n        def objective_function(x, bonds, angles):\n            coords = x.reshape(-1, 3)\n            energy = 0.0\n\n            # Bond energy calculation\n            for i, j, k_b, r_0 in bonds:\n                dist = np.linalg.norm(coords[i] - coords[j])\n                energy += 0.5 * k_b * (dist - r_0)**2\n\n            # Angle energy calculation\n            for i, j, k, k_theta, theta_0_deg in angles:\n                v_ji = coords[i] - coords[j]\n                v_jk = coords[k] - coords[j]\n                norm_ji = np.linalg.norm(v_ji)\n                norm_jk = np.linalg.norm(v_jk)\n                \n                if norm_ji == 0 or norm_jk == 0:\n                    return np.inf # Penalize collapsed atoms with infinite energy\n\n                cos_theta = np.dot(v_ji, v_jk) / (norm_ji * norm_jk)\n                cos_theta_clipped = np.clip(cos_theta, -1.0, 1.0)\n                theta_rad = np.arccos(cos_theta_clipped)\n                theta_0_rad = np.deg2rad(theta_0_deg)\n                energy += 0.5 * k_theta * (theta_rad - theta_0_rad)**2\n            \n            return energy\n\n        # --- Constraints ---\n        constraints = []\n        if 'H' in case['atoms']:\n            h_indices = case['atoms']['H']\n            bonded_h_pairs = set()\n            for i, j, _, _ in case['bonds']:\n                if i in h_indices and j in h_indices:\n                    bonded_h_pairs.add(tuple(sorted((i, j))))\n\n            for i in range(len(h_indices)):\n                for j in range(i + 1, len(h_indices)):\n                    p, q = h_indices[i], h_indices[j]\n                    if tuple(sorted((p, q))) not in bonded_h_pairs:\n                        # Constraint is dist >= 2.0, which scipy expects as dist - 2.0 >= 0\n                        def constr_func(x, p=p, q=q):\n                            coords = x.reshape(-1, 3)\n                            dist = np.linalg.norm(coords[p] - coords[q])\n                            return dist - 2.0\n                        \n                        constraints.append({'type': 'ineq', 'fun': constr_func})\n\n        # --- Optimization ---\n        x0 = case['initial_coords'].flatten()\n        bonds = case['bonds']\n        angles = case['angles']\n        \n        opt_result = minimize(\n            objective_function, \n            x0, \n            args=(bonds, angles), \n            method='SLSQP', \n            constraints=constraints\n        )\n\n        results.append(opt_result.fun)\n    \n    # Final print statement in the exact required format.\n    formatted_results = \",\".join([f\"{r:.3f}\" for r in results])\n    print(f\"[{formatted_results}]\")\n\nsolve()\n```", "id": "2453470"}, {"introduction": "最后的这项实践将我们的技能提升到模拟一个动态化学过程的水平：氮气分子在金属表面的解离。你将构建一个更复杂的非凸势能面，并通过系统地改变一个关键参数（作为反应坐标）来探索它。这个高级问题 [@problem_id:2453413] 反映了真实研究中的挑战，它要求对全局能量最小值 $E^\\star(h)$ 进行稳健的搜索，并最终得到一个对于理解反应机理和动力学至关重要的势能曲线。", "problem": "要求您构建并最小化一个物理驱动的二维势能模型，该模型用于描述氮分子在铁表面上的解离过程。此问题将以约束优化问题的形式进行阐述。考虑一个双原子分子，其氮原子分别标记为 $\\mathrm{N}_1$ 和 $\\mathrm{N}_2$，位于由笛卡尔坐标 $(x,z)$ 定义的平面内。其中，$z$ 是原子到位于 $z=0$ 的平坦、无结构铁表面的垂直距离。两个原子的 $y$ 坐标均被约束为恒等于零。原子 $\\mathrm{N}_1$ 被固定在位置 $(x_1,z_1)=(0,h)$，其中 $h>0$ 是给定的高度参数。原子 $\\mathrm{N}_2$ 可以在位置 $(x_2,z_2)$ 自由移动，但受限于下文指定的边界约束。\n\n总势能 $E_{\\mathrm{tot}}$ 是 $\\mathrm{N}_1$ 和 $\\mathrm{N}_2$ 之间的分子内键能、每个氮原子与表面的相互作用能以及一个弱的横向周期性表面波纹项的总和。所有能量必须以电子伏特 (eV) 表示，所有距离必须以埃 (Å) 表示。定义以下分量：\n\n- 分子内氮-氮相互作用由 Morse 势来建模：\n$$\nV_{\\mathrm{NN}}(r) \\;=\\; D_e \\left(1 - e^{-a_m\\,(r - r_e)}\\right)^2 \\;-\\; D_e,\n$$\n其中 $r = \\sqrt{(x_2 - x_1)^2 + (z_2 - z_1)^2}$ 是平面内的核间距，参数为 $D_e = 9.76\\,\\mathrm{eV}$，$r_e = 1.10\\,\\mathrm{\\AA}$ 和 $a_m = 1.8\\,\\mathrm{\\AA}^{-1}$。\n\n- 单个氮原子在高度 $z$ 处与表面的相互作用由 $(9\\!-\\!3)$ 型势来建模：\n$$\nV_s(z) \\;=\\; \\frac{A}{z^9} \\;-\\; \\frac{B}{z^3},\n$$\n其中 $A = 394.6\\,\\mathrm{eV}\\,\\mathrm{\\AA}^9$ 和 $B = 4.735\\,\\mathrm{eV}\\,\\mathrm{\\AA}^3$。\n\n- 位于 $(x,z)$ 的氮原子所感受到的表面势的横向波纹由以下公式建模：\n$$\nV_c(x,z) \\;=\\; C \\, e^{-\\alpha z}\\,\\cos\\!\\left(\\frac{2\\pi x}{a}\\right),\n$$\n其中 $C = 0.05\\,\\mathrm{eV}$，$\\alpha = 1.0\\,\\mathrm{\\AA}^{-1}$ 和 $a = 2.5\\,\\mathrm{\\AA}$。\n\n因此，对于给定的 $h$，总能量为：\n$$\nE_{\\mathrm{tot}}(x_2,z_2; h) \\;=\\; V_{\\mathrm{NN}}\\!\\left(\\sqrt{(x_2 - 0)^2 + (z_2 - h)^2}\\right) \\;+\\; V_s(h) \\;+\\; V_s(z_2) \\;+\\; V_c(0,h) \\;+\\; V_c(x_2,z_2).\n$$\n\n优化变量为 $(x_2,z_2)$。约束是简单的边界条件：\n$$\nx_{\\min} \\le x_2 \\le x_{\\max}, \\quad z_{\\min} \\le z_2 \\le z_{\\max},\n$$\n其中 $x_{\\min} = -10.0\\,\\mathrm{\\AA}$，$x_{\\max} = 10.0\\,\\mathrm{\\AA}$，$z_{\\min} = 0.80\\,\\mathrm{\\AA}$ 和 $z_{\\max} = 8.00\\,\\mathrm{\\AA}$。固定原子位于 $(0,h)$，没有横向位移。\n\n对于每个指定的 $h$ 值，定义约束下的最小能量：\n$$\nE^\\star(h) \\;=\\; \\min_{(x_2,z_2)} \\; E_{\\mathrm{tot}}(x_2,z_2; h) \\quad \\text{subject to the bounds on } x_2 \\text{ and } z_2.\n$$\n\n测试集。请计算以下六个 $h$ 值对应的 $E^\\star(h)$ (单位为电子伏特)：\n- $h = 1.20\\,\\mathrm{\\AA}$,\n- $h = 2.50\\,\\mathrm{\\AA}$,\n- $h = 3.00\\,\\mathrm{\\AA}$,\n- $h = 4.00\\,\\mathrm{\\AA}$,\n- $h = 6.00\\,\\mathrm{\\AA}$,\n- $h = 8.00\\,\\mathrm{\\AA}$。\n\n您的程序必须为测试集中的每个 $h$ 计算 $E^\\star(h)$，并生成单行输出，其中包含用方括号括起来的、以逗号分隔的六个结果。每个数字必须四舍五入到小数点后六位，单位为 eV，例如 `[-9.123456,-9.234567,...]`。", "solution": "所提出的问题是计算化学领域中一个有效且适定的约束优化练习。该问题要求找出在固体表面附近的双原子分子的物理驱动势能面 (PES) 的最小值。这是在界面化学反应（如解离）建模中的一个常见任务。\n\n问题在于，对于一个由氮分子 ($\\mathrm{N}_2$) 与铁表面相互作用组成的系统，需要找到总势能 $E_{\\mathrm{tot}}$ 的最小值。一个氮原子 $\\mathrm{N}_1$ 的位置被固定在 $(x_1, z_1) = (0, h)$，其中 $h$ 是给定参数。第二个氮原子 $\\mathrm{N}_2$ 的位置 $(x_2, z_2)$ 则在指定的边界内进行优化。\n\n需要最小化的目标函数是总势能 $E_{\\mathrm{tot}}(x_2, z_2; h)$，它是优化变量 $x_2$ 和 $z_2$ 的函数，并由 $h$ 参数化。该函数定义为几个能量贡献项的总和：\n$$\nE_{\\mathrm{tot}}(x_2,z_2; h) \\;=\\; V_{\\mathrm{NN}}(r) \\;+\\; V_s(h) \\;+\\; V_s(z_2) \\;+\\; V_c(0,h) \\;+\\; V_c(x_2,z_2)\n$$\n其中：\n1.  $V_{\\mathrm{NN}}(r)$ 是 $\\mathrm{N}_1$ 和 $\\mathrm{N}_2$ 之间的分子内 Morse 势。它是核间距 $r = \\sqrt{x_2^2 + (z_2 - h)^2}$ 的函数。Morse 势为键能（包括其解离极限）提供了真实的描述。\n    $$\n    V_{\\mathrm{NN}}(r) \\;=\\; D_e \\left(1 - e^{-a_m\\,(r - r_e)}\\right)^2 \\;-\\; D_e\n    $$\n2.  $V_s(z)$ 是描述单个氮原子与铁表面相互作用的势，用 $(9-3)$ 势建模。它同时考虑了短程排斥和长程吸引。该项出现两次：一次是用于高度为 $h$ 的固定原子 $\\mathrm{N}_1$，$V_s(h)$；另一次是用于高度为 $z_2$ 的移动原子 $\\mathrm{N}_2$，$V_s(z_2)$。\n    $$\n    V_s(z) \\;=\\; \\frac{A}{z^9} \\;-\\; \\frac{B}{z^3}\n    $$\n3.  $V_c(x,z)$ 是一个表示表面横向波纹的弱周期势。该项考虑了原子尺度上表面并非完全光滑，从而导致存在优先吸附位点。它也出现两次，分别用于位于 $(0,h)$ 的 $\\mathrm{N}_1$ 和位于 $(x_2,z_2)$ 的 $\\mathrm{N}_2$。\n    $$\n    V_c(x,z) \\;=\\; C \\, e^{-\\alpha z}\\,\\cos\\!\\left(\\frac{2\\pi x}{a}\\right)\n    $$\n\n优化受限于以下箱式约束：\n$$\n-10.0\\,\\mathrm{\\AA} \\le x_2 \\le 10.0\\,\\mathrm{\\AA} \\quad \\text{and} \\quad 0.80\\,\\mathrm{\\AA} \\le z_2 \\le 8.00\\,\\mathrm{\\AA}\n$$\n\n对于测试集中的每个参数 $h$ 值，我们必须求解以下约束优化问题，以找到最小能量 $E^\\star(h)$：\n$$\nE^\\star(h) \\;=\\; \\min_{x_2, z_2} \\; E_{\\mathrm{tot}}(x_2, z_2; h)\n$$\n\n总能量函数 $E_{\\mathrm{tot}}$ 是其变量 $(x_2, z_2)$ 的非凸函数。这意味着它在搜索域内可能存在多个局部最小值。标准的基于梯度的优化算法仅能保证找到一个局部最小值，而这个最小值可能依赖于 $(x_2, z_2)$ 的初始猜测值。为了找到全局最小值，需要一个更稳健的策略。\n\n所选方法是多起点优化。该策略涉及从分布在可行域内的大量不同起始点运行局部优化算法。然后，将所有找到的局部最小值中的最小值作为全局最小值。这显著增加了找到非凸势能面真实全局最小值的概率。\n\n对于每个指定的 $h$ 值，算法按以下步骤进行：\n1.  以适用于数值求解器的形式定义代表 $E_{\\mathrm{tot}}(x_2, z_2; h)$ 的目标函数。\n2.  定义 $x_2$ 和 $z_2$ 的箱式约束。\n3.  创建一个覆盖整个有界搜索域的初始猜测点网格 $(x_{2,0}, z_{2,0})$。一个足够密集的网格可以确保所有重要局部最小值的吸引盆地都被采样到。\n4.  对于每个初始猜测点，使用准牛顿法（例如 `L-BFGS-B`）进行局部最小化，该方法非常适合处理带箱式约束的问题。`scipy.optimize.minimize` 函数提供了此算法的实现。\n5.  在所有独立优化运行中找到的最低能量值被视为全局最小能量 $E^\\star(h)$ 的最佳近似值。\n\n对测试集中给出的每个 $h$ 值重复此过程。最终结果被收集并按规定格式化。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef solve():\n    \"\"\"\n    Constructs and minimizes a potential energy model for N2 dissociation on an Fe surface.\n    \"\"\"\n\n    # Define physical parameters from the problem statement.\n    params = {\n        'De': 9.76,      # eV\n        're': 1.10,      # Å\n        'am': 1.8,       # Å^-1\n        'A': 394.6,      # eV·Å^9\n        'B': 4.735,      # eV·Å^3\n        'C': 0.05,       # eV\n        'alpha': 1.0,    # Å^-1\n        'a': 2.5,        # Å\n    }\n\n    # Define the components of the potential energy.\n    def v_nn(r, De, am, re):\n        \"\"\"Morse potential for N-N interaction.\"\"\"\n        return De * (1 - np.exp(-am * (r - re)))**2 - De\n\n    def v_s(z, A, B):\n        \"\"\"(9-3) potential for atom-surface interaction.\"\"\"\n        return A / z**9 - B / z**3\n\n    def v_c(x, z, C, alpha, a):\n        \"\"\"Lateral corrugation potential.\"\"\"\n        return C * np.exp(-alpha * z) * np.cos(2 * np.pi * x / a)\n\n    # Define the total potential energy function to be minimized.\n    def total_energy(coords, h, p):\n        \"\"\"\n        Calculates the total potential energy of the system.\n        coords: A list or tuple [x2, z2] of the mobile atom N2.\n        h: The fixed height of atom N1.\n        p: A dictionary of physical parameters.\n        \"\"\"\n        x2, z2 = coords\n        x1, z1 = 0.0, h\n\n        # Internuclear distance\n        r = np.sqrt((x2 - x1)**2 + (z2 - z1)**2)\n\n        # Calculate energy components\n        E_nn = v_nn(r, p['De'], p['am'], p['re'])\n        \n        # Interactions of N1 with the surface (constant for a given h)\n        E_s1 = v_s(z1, p['A'], p['B'])\n        E_c1 = v_c(x1, z1, p['C'], p['alpha'], p['a'])\n\n        # Interactions of N2 with the surface\n        E_s2 = v_s(z2, p['A'], p['B'])\n        E_c2 = v_c(x2, z2, p['C'], p['alpha'], p['a'])\n\n        return E_nn + E_s1 + E_s2 + E_c1 + E_c2\n\n    # Test suite values for h\n    h_values = [1.20, 2.50, 3.00, 4.00, 6.00, 8.00]\n\n    # Constraints for the optimization variables (x2, z2)\n    bounds = ((-10.0, 10.0), (0.80, 8.00))\n\n    # Multi-start grid parameters\n    # A grid of starting points is used to increase the chance of finding the global minimum.\n    num_x_starts = 21  # Number of starting points for x2\n    num_z_starts = 16  # Number of starting points for z2\n    x_starts = np.linspace(bounds[0][0], bounds[0][1], num_x_starts)\n    z_starts = np.linspace(bounds[1][0], bounds[1][1], num_z_starts)\n    \n    results = []\n    \n    for h in h_values:\n        min_energy_for_h = float('inf')\n        \n        # Multi-start optimization loop\n        for x0 in x_starts:\n            for z0 in z_starts:\n                initial_guess = [x0, z0]\n                \n                # Perform the local minimization\n                res = minimize(\n                    fun=total_energy,\n                    x0=initial_guess,\n                    args=(h, params),\n                    method='L-BFGS-B',\n                    bounds=bounds\n                )\n                \n                # Update the minimum energy found for the current h\n                if res.success and res.fun  min_energy_for_h:\n                    min_energy_for_h = res.fun\n        \n        results.append(min_energy_for_h)\n\n    # Format the final output according to problem specification.\n    # Each value must be rounded to exactly six decimal places.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2453413"}]}