{"hands_on_practices": [{"introduction": "这个实践练习将计算建模与基础有机化学概念联系起来。你将使用一个简化的扭转能函数，来计算著名的环己烷椅式、船式和扭船式构象的相对稳定性。通过这个练习，你将亲身体验空间和扭转应力如何决定分子的形状和能量，并理解即使是简单的模型也能重现和解释既有的化学原理。[@problem_id:2451314]", "problem": "您将使用一个受第一性原理启发的最小扭转能模型来评估环己烷的构象稳定性。将环建模为沿碳-碳单键的六个扭转角序列 $\\{\\varphi_i\\}_{i=1}^{6}$，并定义扭转能函数\n$$\nE(\\{\\varphi_i\\}) \\;=\\; \\sum_{i=1}^{6} \\frac{V_3}{2}\\,\\bigl(1 + \\cos\\bigl(3\\,\\varphi_i\\bigr)\\bigr),\n$$\n其中 $\\cos(\\cdot)$ 是余弦函数（参数以弧度为单位），$V_3$ 是三重扭转振幅，$\\varphi_i$ 是以度为单位的二面角。对所有扭转，使用 $V_3 = 3.000$ 千卡/摩尔。在应用余弦函数之前，必须将以度为单位提供的角度转换为弧度。所有能量均以千卡/摩尔为单位表示，并四舍五入到三位小数。\n\n请对以下三种环己烷构象计算 $E$ 值，每种构象均由其六元环二面角序列（以度为单位）指定：\n- 椅式 (索引 $0$)：$\\bigl(60^{\\circ}, -60^{\\circ}, 60^{\\circ}, -60^{\\circ}, 60^{\\circ}, -60^{\\circ}\\bigr)$\n- 船式 (索引 $1$)：$\\bigl(60^{\\circ}, 0^{\\circ}, -60^{\\circ}, 60^{\\circ}, 0^{\\circ}, -60^{\\circ}\\bigr)$\n- 扭船式 (索引 $2$)：$\\bigl(40^{\\circ}, -40^{\\circ}, 40^{\\circ}, -40^{\\circ}, 40^{\\circ}, -40^{\\circ}\\bigr)$\n\n任务：\n1. 使用上述公式计算每种构象的总扭转能 $E$。使用 $\\varphi_{\\mathrm{rad}} = \\varphi_{\\mathrm{deg}} \\times \\pi/180$ 将角度从度转换为弧度，其中 $\\pi$ 是数学常数pi。以千卡/摩尔为单位报告每种能量，四舍五入到三位小数。\n2. 通过从每个总能量中减去三个总能量中的最小值来计算相对能量。以千卡/摩尔为单位报告每个相对能量，四舍五入到三位小数。\n3. 通过增加总能量来确定稳定性排序，并将其报告为与能量升序排列的构象相对应的索引列表，使用映射关系椅式 $\\rightarrow 0$，船式 $\\rightarrow 1$，扭船式 $\\rightarrow 2$。\n\n测试套件和最终输出规范：\n- 使用上面提供的三组参数作为完整的测试套件。\n- 您的程序应生成单行输出，其中包含一个逗号分隔的列表，用方括号括起来，顺序如下：\n  $\\bigl[E_0,E_1,E_2,\\Delta E_0,\\Delta E_1,\\Delta E_2,r_0,r_1,r_2\\bigr]$\n  其中 $E_i$ 是索引 $i \\in \\{0,1,2\\}$ 的总能量（四舍五入到三位小数），$\\Delta E_i$ 是相对能量（四舍五入到三位小数），$\\{r_0,r_1,r_2\\}$ 是按总能量升序排列的索引序列。能量单位必须是千卡/摩尔。", "solution": "对问题陈述进行验证。\n\n**步骤 1：提取已知条件**\n- **能量函数：** 一组六个二面角 $\\{\\varphi_i\\}_{i=1}^{6}$ 的扭转能 $E$ 由以下公式给出：\n$$E(\\{\\varphi_i\\}) \\;=\\; \\sum_{i=1}^{6} \\frac{V_3}{2}\\,\\bigl(1 + \\cos\\bigl(3\\,\\varphi_i\\bigr)\\bigr)$$\n- **扭转振幅：** 常数 $V_3$ 被指定为 $3.000$ 千卡/摩尔。\n- **角度单位：** 输入的二面角 $\\varphi_i$ 以度为单位提供，但余弦函数要求使用弧度。\n- **转换因子：** 从度到弧度的转换由 $\\varphi_{\\mathrm{rad}} = \\varphi_{\\mathrm{deg}} \\times \\pi/180$ 给出。\n- **构象与二面角（以度为单位）：**\n  - 椅式 (索引 $0$)：$\\bigl(60^{\\circ}, -60^{\\circ}, 60^{\\circ}, -60^{\\circ}, 60^{\\circ}, -60^{\\circ}\\bigr)$\n  - 船式 (索引 $1$)：$\\bigl(60^{\\circ}, 0^{\\circ}, -60^{\\circ}, 60^{\\circ}, 0^{\\circ}, -60^{\\circ}\\bigr)$\n  - 扭船式 (索引 $2$)：$\\bigl(40^{\\circ}, -40^{\\circ}, 40^{\\circ}, -40^{\\circ}, 40^{\\circ}, -40^{\\circ}\\bigr)$\n- **所需计算：**\n  1. 三种构象中每一种的总能量 $E$。\n  2. 每种构象的相对能量 $\\Delta E_i = E_i - E_{\\text{min}}$。\n  3. 按总能量升序排序的索引列表作为稳定性排序。\n- **输出精度：** 所有能量值必须四舍五入到三位小数。\n\n**步骤 2：使用提取的已知条件进行验证**\n该问题具有科学依据。它采用了计算化学和分子力学中用于描述键旋转的扭转势能的标准简化函数形式（一个傅里叶级数项）。所提供的构象——椅式、船式和扭船式——是公认的环己烷主要构象异构体。扭转势垒 $V_3$ 的值对于碳-碳单键是物理上合理的。该问题定义明确，所有必要的参数、常数和数据都已明确提供。术语精确客观。该问题自成体系，没有矛盾、歧义或事实错误。\n\n**步骤 3：结论与操作**\n该问题被判定为有效。将提供完整解答。\n\n**求解推导**\n分析过程是将给定的扭转能函数应用于环己烷的三种指定构象。\n\n控制方程为：\n$$E = \\sum_{i=1}^{6} E_i^{\\text{torsion}} = \\sum_{i=1}^{6} \\frac{V_3}{2}\\,\\bigl(1 + \\cos\\bigl(3\\,\\varphi_i\\bigr)\\bigr)$$\n其中 $V_3 = 3.000 \\text{ kcal/mol}$。输入的角度 $\\varphi_i$ 以度为单位，必须转换为弧度以用于三角函数 $\\cos(\\cdot)$。\n\n**1. 总能量计算 ($E_i$)**\n\n**a. 椅式构象（索引 $0$）**\n二面角为 $\\varphi_i \\in \\{60^{\\circ}, -60^{\\circ}\\}$。\n以弧度计，$\\pm 60^{\\circ}$ 对应于 $\\pm \\frac{\\pi}{3}$ 弧度。\n对于序列中的每个角度 $\\varphi_i$，余弦函数的参数为 $3\\varphi_i = 3 \\times (\\pm\\frac{\\pi}{3}) = \\pm\\pi$。\n该值的余弦为 $\\cos(\\pm\\pi) = -1$。\n六个扭转中每一个的能量贡献是相同的：\n$$E_i^{\\text{torsion}} = \\frac{3.000}{2} \\bigl(1 + \\cos(\\pm\\pi)\\bigr) = \\frac{3.000}{2} (1 - 1) = 0.000 \\text{ kcal/mol}$$\n总能量 $E_0$ 是六个扭转能量的总和：\n$$E_0 = \\sum_{i=1}^{6} 0.000 = 0.000 \\text{ kcal/mol}$$\n\n**b. 船式构象（索引 $1$）**\n二面角为 $\\bigl(60^{\\circ}, 0^{\\circ}, -60^{\\circ}, 60^{\\circ}, 0^{\\circ}, -60^{\\circ}\\bigr)$。\n该集合包含四个大小为 $60^{\\circ}$ 的角和两个 $0^{\\circ}$ 的角。\n- 对于 $|\\varphi_i| = 60^{\\circ}$ 的四个角，能量贡献为 $0.000 \\text{ kcal/mol}$，如椅式构象计算所示。\n- 对于 $\\varphi_i = 0^{\\circ}$（或 $0$ 弧度）的两个角，余弦的参数为 $3\\varphi_i = 3 \\times 0 = 0$。\n该值的余弦为 $\\cos(0) = 1$。\n这两个扭转中每一个的能量贡献是：\n$$E_i^{\\text{torsion}} = \\frac{3.000}{2} \\bigl(1 + \\cos(0)\\bigr) = \\frac{3.000}{2} (1 + 1) = 3.000 \\text{ kcal/mol}$$\n总能量 $E_1$ 是这些贡献的总和：\n$$E_1 = (4 \\times 0.000) + (2 \\times 3.000) = 6.000 \\text{ kcal/mol}$$\n\n**c. 扭船式构象（索引 $2$）**\n二面角为 $\\varphi_i \\in \\{40^{\\circ}, -40^{\\circ}\\}$。\n以弧度计，$\\pm 40^{\\circ}$ 对应于 $\\pm 40 \\times \\frac{\\pi}{180} = \\pm \\frac{2\\pi}{9}$ 弧度。\n余弦的参数为 $3\\varphi_i = 3 \\times (\\pm\\frac{2\\pi}{9}) = \\pm\\frac{2\\pi}{3}$。\n该值的余弦为 $\\cos(\\pm\\frac{2\\pi}{3}) = -0.5$。\n六个扭转中每一个的能量贡献是相同的：\n$$E_i^{\\text{torsion}} = \\frac{3.000}{2} \\bigl(1 + \\cos(\\pm\\frac{2\\pi}{3})\\bigr) = \\frac{3.000}{2} (1 - 0.5) = 1.5 \\times 0.5 = 0.750 \\text{ kcal/mol}$$\n总能量 $E_2$ 是六个扭转能量的总和：\n$$E_2 = \\sum_{i=1}^{6} 0.750 = 6 \\times 0.750 = 4.500 \\text{ kcal/mol}$$\n\n总能量总结：\n- $E_0 = 0.000 \\text{ kcal/mol}$\n- $E_1 = 6.000 \\text{ kcal/mol}$\n- $E_2 = 4.500 \\text{ kcal/mol}$\n\n**2. 相对能量计算 ($\\Delta E_i$)**\n\n相对能量 $\\Delta E_i$ 是相对于最低能量构象 $E_{\\text{min}}$ 计算的。\n首先，找到最低能量：\n$$E_{\\text{min}} = \\min(E_0, E_1, E_2) = \\min(0.000, 6.000, 4.500) = 0.000 \\text{ kcal/mol}$$\n这对应于椅式构象 ($E_0$)。\n现在，计算相对能量：\n- $\\Delta E_0 = E_0 - E_{\\text{min}} = 0.000 - 0.000 = 0.000 \\text{ kcal/mol}$\n- $\\Delta E_1 = E_1 - E_{\\text{min}} = 6.000 - 0.000 = 6.000 \\text{ kcal/mol}$\n- $\\Delta E_2 = E_2 - E_{\\text{min}} = 4.500 - 0.000 = 4.500 \\text{ kcal/mol}$\n\n**3. 稳定性排序**\n\n稳定性与能量成反比。稳定性排序是通过按总能量升序对构象进行排序来确定的。\n能量为 $E_0 = 0.000$，$E_1 = 6.000$ 和 $E_2 = 4.500$。\n能量的排序顺序是 $E_0 < E_2 < E_1$。\n因此，相应的索引列表 $\\{r_0, r_1, r_2\\}$ 是 $[0, 2, 1]$。\n\n**最终结果总结**\n- 总能量：$[E_0, E_1, E_2] = [0.000, 6.000, 4.500]$\n- 相对能量：$[\\Delta E_0, \\Delta E_1, \\Delta E_2] = [0.000, 6.000, 4.500]$\n- 稳定性排序：$[r_0, r_1, r_2] = [0, 2, 1]$\n合并后的输出列表是 $[0.000, 6.000, 4.500, 0.000, 6.000, 4.500, 0, 2, 1]$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes torsional and relative energies, and stability ranking for\n    cyclohexane conformations based on a simplified potential energy model.\n    \"\"\"\n    # Define the torsional amplitude constant in kcal/mol.\n    V3 = 3.000\n\n    # Define the test cases: conformations of cyclohexane specified by their\n    # six-ring dihedral angles in degrees. The dictionary keys are the\n    # standard indices for Chair (0), Boat (1), and Twist-boat (2).\n    test_cases = {\n        0: [60., -60., 60., -60., 60., -60.],  # Chair\n        1: [60., 0., -60., 60., 0., -60.],    # Boat\n        2: [40., -40., 40., -40., 40., -40.]   # Twist-boat\n    }\n    \n    # Ensure a consistent processing order [0, 1, 2].\n    indices = sorted(test_cases.keys())\n\n    total_energies = []\n    for i in indices:\n        # Retrieve the list of angles for the current conformation.\n        angles_deg = np.array(test_cases[i])\n        \n        # Convert angles from degrees to radians for trigonometric functions.\n        angles_rad = np.deg2rad(angles_deg)\n        \n        # Calculate the energy contribution for each torsion using the given formula:\n        # E_i = (V3/2) * (1 + cos(3 * phi_i))\n        energy_terms = (V3 / 2.0) * (1.0 + np.cos(3.0 * angles_rad))\n        \n        # The total torsional energy is the sum of individual contributions.\n        total_energy = np.sum(energy_terms)\n        \n        total_energies.append(total_energy)\n\n    # Find the minimum energy among all conformations.\n    min_energy = min(total_energies)\n\n    # Calculate relative energies by subtracting the minimum energy.\n    relative_energies = [e - min_energy for e in total_energies]\n\n    # Determine stability ranking by sorting the indices based on total energy.\n    # np.argsort returns the indices that would sort the array in ascending order.\n    stability_ranking = np.argsort(total_energies).tolist()\n\n    # Round all energy results to three decimal places as required.\n    rounded_total_energies = [round(e, 3) for e in total_energies]\n    rounded_relative_energies = [round(e, 3) for e in relative_energies]\n\n    # Combine all results into a single list in the specified order:\n    # [E_0, E_1, E_2, dE_0, dE_1, dE_2, r_0, r_1, r_2]\n    final_results = rounded_total_energies + rounded_relative_energies + stability_ranking\n    \n    # Format the output string for printing. Floats are formatted to always\n    # show three decimal places (e.g., 0.000). Integers are converted to strings.\n    output_parts = []\n    for item in final_results:\n        if isinstance(item, float):\n            output_parts.append(f\"{item:.3f}\")\n        else:\n            output_parts.append(str(item))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(output_parts)}]\")\n\nsolve()\n```", "id": "2451314"}, {"introduction": "现在让我们从分子结构转向电子性质。这个练习将带你使用强大而直观的紧束缚模型来探索共轭聚合物的电子结构。通过为不同长度的聚乙炔链构建并对角化哈密顿矩阵，你将直接观察到关键的最高占据分子轨道（HOMO）与最低未占据分子轨道（LUMO）之间的能隙如何演变，从而深入理解材料中电子能带结构的形成。[@problem_id:2451347]", "problem": "本题要求您计算，在共轭 $\\pi$ 体系的单电子最近邻紧束缚哈密顿量模型下，有限长反式聚乙炔链的最高占据分子轨道 (HOMO) 和最低未占分子轨道 (LUMO) 之间的能隙如何随链长变化。考虑一个具有 $2n$ 个碳位点（每个碳有一个 $p_z$ 轨道）的有限开链，其中 $n$ 是重复单元 $\\text{-CH=CH-}$ 的数量。每个位点的在位能为 $0$ 电子伏特 (eV)，且仅存在具有键交替（二聚化）的最近邻耦合。最近邻跃迁积分沿链以 $t_1$ 和 $t_2$ 的形式交替，其中 $t_1 = t_0(1+\\delta)$ 且 $t_2 = t_0(1-\\delta)$。使用以下常数：$t_0 = 2.50$ eV 和 $\\delta = 0.15$（无量纲）。哈密顿矩阵 $H \\in \\mathbb{R}^{2n \\times 2n}$ 定义为：对所有位点 $i$，$H_{i,i} = 0$ eV；且对于 $i=1,\\dots,2n-1$：\n- 如果位点 $i$ 和 $i+1$ 之间的键是 $t_1$ 类型，则 $H_{i,i+1} = H_{i+1,i} = t_1$；\n- 如果位点 $i$ 和 $i+1$ 之间的键是 $t_2$ 类型，则 $H_{i,i+1} = H_{i+1,i} = t_2$；\n采用开放边界条件。跃迁积分的交替从位点 1 和 2 之间的 $t_1$ 开始，然后是位点 2 和 3 之间的 $t_2$，依此类推，贯穿整个链。\n\n假设链是电中性的，每个碳原子提供一个 $\\pi$ 电子，并具有内隐的自旋简并（即每个分子轨道可以容纳两个自旋相反的电子）。设排序后的单电子能量本征值为 $E_1 \\le E_2 \\le \\dots \\le E_{2n}$（单位为 eV）。在半满填充情况下，HOMO能量为 $E_n$，LUMO能量为 $E_{n+1}$。HOMO-LUMO能隙为 $\\Delta = E_{n+1} - E_n$（单位为 eV）。\n\n测试套件：\n- 使用四种链长 $n \\in \\{2,4,6,8\\}$。\n- 对所有测试用例，均使用上述指定的 $t_0$ 和 $\\delta$。\n\n您的任务是编写一个完整的、可运行的程序，该程序对测试套件中的每个元素，构建哈密顿矩阵 $H$，求其本征值，确定所定义的 HOMO-LUMO 能隙 $\\Delta$，并返回这些能隙。每个能隙以电子伏特 (eV) 为单位表示，并四舍五入到 $6$ 位小数。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。列表中的结果应按测试套件中 $n$ 值从小到大的顺序排列。例如，输出格式必须类似于 [$x_1$,$x_2$,$x_3$,$x_4$]，其中每个 $x_k$ 是对应 $n$ 值的能隙（单位为 eV，四舍五入到 $6$ 位小数）。", "solution": "该问题陈述有效。其科学基础是用于描述共轭聚合物电子结构的成熟的紧束缚模型，问题定义明确，所有必要的参数和条件均已给出，并且问题客观、无歧义。我们将着手求解。\n\n该问题要求计算有限长反式聚乙炔链的最高占据分子轨道 (HOMO) 与最低未占分子轨道 (LUMO) 之间的能隙 $\\Delta$。所采用的模型是针对 $\\pi$ 电子体系的单电子最近邻紧束缚哈密顿量。该链由 $2n$ 个碳原子组成，其中 $n$ 是 $\\text{-CH=CH-}$ 单元的数量。\n\n哈密顿矩阵 $H$ 是一个维度为 $2n \\times 2n$ 的实对称矩阵。代表矩阵对角元的在位能被设置为零：对所有位点 $i=1, \\dots, 2n$，$H_{i,i} = 0$。非对角元 $H_{i,j}$ 代表位点 $i$ 和 $j$ 之间的跃迁积分。在此模型中，这些积分仅在最近邻之间非零。化学键表现出交替（二聚化）现象，具有两个不同的跃迁积分 $t_1$ 和 $t_2$。交替从位点 1 和 2 之间的 $t_1$ 型键开始，接着是位点 2 和 3 之间的 $t_2$ 型键，以此类推。此模式定义了三对角哈密顿矩阵的结构：\n$$\nH_{i,i+1} = H_{i+1,i} = \\begin{cases} t_1 & \\text{若 } i \\text{ 为奇数} \\\\ t_2 & \\text{若 } i \\text{ 为偶数} \\end{cases}\n$$\n对于 $i = 1, \\dots, 2n-1$。所有其他非对角元均为零。该链是有限的，意味着采用开放边界条件，即位点 1 和位点 $2n$ 之间没有跃迁积分。\n\n跃迁积分的值由参数 $t_0 = 2.50$ eV 和 $\\delta = 0.15$ 决定。\n“强”键的跃迁积分是 $t_1 = t_0(1+\\delta) = 2.50(1+0.15) = 2.875$ eV。\n“弱”键的跃迁积分是 $t_2 = t_0(1-\\delta) = 2.50(1-0.15) = 2.125$ eV。\n\n$\\pi$ 体系的单粒子能级是哈密顿矩阵 $H$ 的本征值。我们必须求解本征值方程 $H\\mathbf{c}_k = E_k \\mathbf{c}_k$，其中 $E_k$ 是能量本征值，$\\mathbf{c}_k$ 是对应的本征向量（分子轨道）。对于一个 $2n \\times 2n$ 矩阵，将有 $2n$ 个本征值，我们将其排序为 $E_1 \\le E_2 \\le \\dots \\le E_{2n}$。\n\n该体系是一个电中性链，每个碳原子提供一个 $\\pi$ 电子，总共有 $2n$ 个电子。根据泡利不相容原理，每个分子轨道（能级）可以容纳两个自旋相反的电子。因此，这 $2n$ 个电子将占据能量最低的 $n$ 个轨道。被占据的轨道集合对应的能量为 $\\{E_1, E_2, \\dots, E_n\\}$。\n\n最高占据分子轨道 (HOMO) 是被占据的能量最高的轨道，即能量为 $E_n$ 的第 $n$ 个轨道。最低未占分子轨道 (LUMO) 是未被占据的能量最低的轨道，即能量为 $E_{n+1}$ 的第 $(n+1)$ 个轨道。HOMO-LUMO 能隙定义为它们之间的能量差：\n$$\n\\Delta = E_{LUMO} - E_{HOMO} = E_{n+1} - E_n\n$$\n对于测试套件 $\\{2, 4, 6, 8\\}$ 中的每个 $n$ 值，计算步骤如下：\n$1$. 根据上述规则构建 $2n \\times 2n$ 的哈密顿矩阵 $H$。当 $n=2$ 时矩阵大小为 $4 \\times 4$，$n=4$ 时为 $8 \\times 8$，$n=6$ 时为 $12 \\times 12$，$n=8$ 时为 $16 \\times 16$。\n$2$. 对矩阵 $H$ 进行数值对角化，以获得其 $2n$ 个本征值。我们将使用一个标准的数值线性代数库函数，该函数会返回按非降序排列的本征值。\n$3$. 识别 HOMO 能量 $E_n$ 和 LUMO 能量 $E_{n+1}$。在一个长度为 $2n$、从零开始索引的已排序本征值数组中，它们分别对应于索引为 $n-1$ 和 $n$ 的元素。\n$4$. 计算能隙 $\\Delta = E_{n+1} - E_n$。\n对测试套件中的每个 $n$ 重复此过程，并收集所得的能隙值。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the HOMO-LUMO gap for finite trans-polyacetylene chains\n    using a nearest-neighbor tight-binding model.\n    \"\"\"\n    # Define constants from the problem statement.\n    t0_ev = 2.50  # Base hopping integral in eV\n    delta = 0.15      # Dimerization parameter, dimensionless\n\n    # Calculate the alternating hopping integrals t1 and t2.\n    # t1 corresponds to the stronger bond (e.g., double bond character)\n    # t2 corresponds to the weaker bond (e.g., single bond character)\n    t1 = t0_ev * (1 + delta)\n    t2 = t0_ev * (1 - delta)\n\n    # Define the test cases from the problem statement.\n    # n is the number of repeating -CH=CH- units.\n    # The total number of carbon sites is 2n.\n    test_cases = [2, 4, 6, 8]\n\n    # List to store the calculated gaps for each test case.\n    results = []\n\n    # Iterate through each value of n in the test suite.\n    for n in test_cases:\n        # The size of the Hamiltonian matrix is N x N, where N = 2n.\n        N = 2 * n\n\n        # Initialize an N x N zero matrix for the Hamiltonian.\n        hamiltonian_matrix = np.zeros((N, N))\n\n        # Populate the off-diagonal elements of the Hamiltonian matrix.\n        # The matrix is tridiagonal with alternating hopping integrals t1 and t2.\n        # H_i,i+1 = H_i+1,i\n        # The bond between sites 1 and 2 (indices 0 and 1) is t1.\n        # The bond between sites 2 and 3 (indices 1 and 2) is t2.\n        # The pattern is t1, t2, t1, t2, ...\n        for i in range(N - 1):\n            if i % 2 == 0:  # Odd-numbered bond (1-2, 3-4, ...) -> even index i\n                hop_integral = t1\n            else:  # Even-numbered bond (2-3, 4-5, ...) -> odd index i\n                hop_integral = t2\n            \n            hamiltonian_matrix[i, i + 1] = hop_integral\n            hamiltonian_matrix[i + 1, i] = hop_integral\n\n        # The eigenvalues of the Hamiltonian are the one-electron energy levels.\n        # np.linalg.eigh is used for Hermitian (real symmetric) matrices and\n        # returns eigenvalues sorted in ascending order.\n        # We only need the eigenvalues, not the eigenvectors.\n        eigenvalues = np.linalg.eigh(hamiltonian_matrix)[0]\n\n        # In a neutral system with 2n electrons, the first n orbitals are filled.\n        # The HOMO is the n-th orbital, and the LUMO is the (n+1)-th orbital.\n        # In a 0-indexed array, these correspond to indices n-1 and n.\n        e_homo = eigenvalues[n - 1]\n        e_lumo = eigenvalues[n]\n\n        # Calculate the HOMO-LUMO gap.\n        gap = e_lumo - e_homo\n\n        # Append the calculated gap to the results list.\n        results.append(gap)\n\n    # Format the final output as a comma-separated list of strings,\n    # with each gap rounded to 6 decimal places, enclosed in brackets.\n    formatted_results = [f\"{res:.6f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\n# Execute the main function.\nsolve()\n```", "id": "2451347"}, {"introduction": "精确计算分子间相互作用在化学中至关重要，但也伴随着一些微妙的挑战。本练习将解决其中一个挑战：基组重叠误差（BSSE）。你将使用预先计算好的水二聚体的能量数据，应用标准的“平衡校正法”（counterpoise correction）来修正这一误差，并亲眼看到这个计算假象如何人为地夸大结合能，从而学会一项在研究非共价相互作用时获得可靠结果的关键技术。[@problem_id:2451348]", "problem": "给定一个固定几何构型的水二聚体及其在相同几何构型下计算的组分单体的总电子能量，单位为哈特里 (hartree)。对于每个测试用例，提供了五个量：在二聚体基组中计算的二聚体能量，记为 $E_{AB}$；在各自单体基组中计算的孤立单体能量，记为 $E_{A}$ 和 $E_{B}$；以及在伴侣分子的基函数（不含电子或原子核，即“鬼”基组）存在下计算的单体能量，记为 $E_{A}^{\\ast}$ 和 $E_{B}^{\\ast}$。未经抗衡校正的结合能定义为差值 $\\,\\Delta E_{\\mathrm{bind}} = E_{AB} - \\left(E_{A} + E_{B}\\right)\\,$，而针对基组重叠误差（BSSE）进行抗衡校正后的结合能定义为 $\\,\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}} = E_{AB} - \\left(E_{A}^{\\ast} + E_{B}^{\\ast}\\right)\\,$。使用换算关系 $\\,1\\,\\text{hartree} = 2625.49962\\,\\text{kJ}\\cdot\\text{mol}^{-1}\\,$，将两种结合能都转换为千焦每摩尔（$\\text{kJ}\\cdot\\text{mol}^{-1}$）。所有最终能量均以 $\\text{kJ}\\cdot\\text{mol}^{-1}$ 为单位表示，并四舍五入到三位小数。\n\n请使用以下测试套件，其中每个括号组按顺序 $\\left(E_{AB}, E_{A}, E_{B}, E_{A}^{\\ast}, E_{B}^{\\ast}\\right)$ 列出了以哈特里为单位的能量值：\n- 用例 A: $\\left(-152.058500,\\,-76.025000,\\,-76.025000,\\,-76.025950,\\,-76.025950\\right)$。\n- 用例 B: $\\left(-152.052300,\\,-76.026000,\\,-76.026000,\\,-76.026000,\\,-76.026000\\right)$。\n- 用例 C: $\\left(-152.042300,\\,-76.020000,\\,-76.022000,\\,-76.020200,\\,-76.022300\\right)$。\n- 用例 D: $\\left(-152.010000,\\,-76.000000,\\,-76.000000,\\,-76.003000,\\,-76.003000\\right)$。\n\n你的程序必须为每个用例计算一个包含两个元素的列表，其中包括未经抗衡校正的结合能和经过抗衡校正的结合能，两者均以 $\\text{kJ}\\cdot\\text{mol}^{-1}$ 为单位，并四舍五入到三位小数。将所有用例的结果按以上顺序汇总到一个列表中。你的程序应生成单行输出，该行包含用方括号括起来的、以逗号分隔的结果列表，其中每个元素本身也是一个包含两个元素的列表，例如 $[\\,[x_{1},y_{1}],\\,[x_{2},y_{2}],\\,[x_{3},y_{3}],\\,[x_{4},y_{4}]\\,]$，其中所有的 $x_{i}$ 和 $y_{i}$ 均是以 $\\text{kJ}\\cdot\\text{mol}^{-1}$ 为单位、四舍五入到三位小数的浮点数。", "solution": "问题陈述已经过严格验证，并被认定为有效。它具有科学依据，提法恰当且客观。该问题呈现了一个标准的计算化学问题，涉及在考虑和不考虑基组重叠误差（BSSE）校正的情况下计算相互作用能。所有必要的数据、公式和常数均已提供，且不存在内部矛盾或含糊不清之处。\n\n该任务是根据几组预先计算好的电子能量，计算水二聚体的结合能 $\\Delta E$。计算将以两种方式进行：首先是简单的（未经校正的）结合能；其次是使用 Boyes 和 Bernardi 的抗衡（CP）方法校正基组重叠误差（BSSE）后的结合能。最初以哈特里原子单位计算的结果，必须转换为千焦每摩尔（$\\text{kJ}\\cdot\\text{mol}^{-1}$），并四舍五入到三位小数。\n\n未经校正的结合能 $\\Delta E_{\\mathrm{bind}}$ 定义为二聚体复合物的总能量 $E_{AB}$ 与孤立单体能量之和 $(E_{A} + E_{B})$ 之间的差值。\n$$\n\\Delta E_{\\mathrm{bind}} = E_{AB} - (E_{A} + E_{B})\n$$\n\n然而，在使用有限的、以原子为中心的基组时，此定义存在缺陷。在二聚体的计算中，每个单体都可以从其伴侣分子“借用”基函数，而这种效应在孤立单体的计算中是不存在的。这种额外的灵活性——一个纯粹的数学赝象——使得对单体电子密度的描述更佳，从而人为地降低了复合物的能量 $E_{AB}$。这导致了对结合吸引力的过高估计。这种赝象被称为基组重叠误差。\n\n为了校正这一点，抗衡校正法引入了“鬼”轨道。在伴侣分子的基函数存在但其原子核或电子不存在的情况下，对每个单体的能量进行重新计算。这些能量记为 $E_{A}^{\\ast}$ 和 $E_{B}^{\\ast}$。根据变分原理，$E_{A}^{\\ast} \\leq E_{A}$ 且 $E_{B}^{\\ast} \\leq E_{B}$，因为额外基函数的存在只会降低或保持计算出的能量。\n\n于是，经过抗衡校正的结合能 $\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}}$ 定义为：\n$$\n\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}} = E_{AB} - (E_{A}^{\\ast} + E_{B}^{\\ast})\n$$\n该表达式将二聚体的能量与在等效扩展基组中计算得到的单体能量进行比较，从而提供了一个更具物理意义的相互作用能。\n\n从哈特里到 $\\text{kJ}\\cdot\\text{mol}^{-1}$ 的转换使用给定的常数 $k = 2625.49962\\,\\text{kJ}\\cdot\\text{mol}^{-1}\\cdot\\text{hartree}^{-1}$ 进行。每个测试用例的步骤如下：\n1.  计算以哈特里为单位的 $\\Delta E_{\\mathrm{bind}}$。\n2.  计算以哈特里为单位的 $\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}}$。\n3.  将两个结果都乘以转换因子 $k$。\n4.  将最终值四舍五入到三位小数。\n\n我们以用例 A 为例进行演示：\n给定的能量（单位为哈特里）是：$E_{AB} = -152.058500$, $E_{A} = -76.025000$, $E_{B} = -76.025000$, $E_{A}^{\\ast} = -76.025950$, 以及 $E_{B}^{\\ast} = -76.025950$。\n\n1.  计算 $\\Delta E_{\\mathrm{bind}}$：\n    $$\n    \\Delta E_{\\mathrm{bind}} = -152.058500 - (-76.025000 + -76.025000) = -152.058500 - (-152.050000) = -0.008500\\,\\text{hartree}\n    $$\n2.  计算 $\\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}}$：\n    $$\n    \\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}} = -152.058500 - (-76.025950 + -76.025950) = -152.058500 - (-152.051900) = -0.006600\\,\\text{hartree}\n    $$\n3.  转换为 $\\text{kJ}\\cdot\\text{mol}^{-1}$：\n    $$\n    \\Delta E_{\\mathrm{bind}} (\\text{kJ}\\cdot\\text{mol}^{-1}) = -0.008500 \\times 2625.49962 \\approx -22.31675\\,\\text{kJ}\\cdot\\text{mol}^{-1}\n    $$\n    $$\n    \\Delta E_{\\mathrm{bind}}^{\\mathrm{CP}} (\\text{kJ}\\cdot\\text{mol}^{-1}) = -0.006600 \\times 2625.49962 \\approx -17.32830\\,\\text{kJ}\\cdot\\text{mol}^{-1}\n    $$\n4.  四舍五入到三位小数：\n    用例 A 的结果对为 $[-22.317, -17.328]$。\n\n同样系统性的步骤将应用于所有给定的测试用例。程序的实现将精确地遵循此逻辑。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates uncorrected and counterpoise-corrected binding energies for\n    a water dimer based on provided electronic energy values.\n    \"\"\"\n\n    # The conversion factor from hartree to kJ/mol.\n    # 1 hartree = 2625.49962 kJ/mol\n    HARTREE_TO_KJ_MOL = 2625.49962\n\n    # Define the test cases from the problem statement.\n    # Each tuple contains (E_AB, E_A, E_B, E_A_star, E_B_star) in hartree.\n    test_cases = [\n        (-152.058500, -76.025000, -76.025000, -76.025950, -76.025950), # Case A\n        (-152.052300, -76.026000, -76.026000, -76.026000, -76.026000), # Case B\n        (-152.042300, -76.020000, -76.022000, -76.020200, -76.022300), # Case C\n        (-152.010000, -76.000000, -76.000000, -76.003000, -76.003000), # Case D\n    ]\n\n    all_results = []\n    for case in test_cases:\n        E_AB, E_A, E_B, E_A_star, E_B_star = case\n\n        # Calculate binding energy without counterpoise correction (in hartree)\n        # delta_E_bind = E_AB - (E_A + E_B)\n        delta_e_bind_hartree = E_AB - (E_A + E_B)\n\n        # Calculate binding energy with counterpoise correction (in hartree)\n        # delta_E_bind_CP = E_AB - (E_A* + E_B*)\n        delta_e_bind_cp_hartree = E_AB - (E_A_star + E_B_star)\n\n        # Convert both binding energies to kJ/mol\n        delta_e_bind_kj_mol = delta_e_bind_hartree * HARTREE_TO_KJ_MOL\n        delta_e_bind_cp_kj_mol = delta_e_bind_cp_hartree * HARTREE_TO_KJ_MOL\n\n        # Round the results to three decimal places\n        rounded_bind = round(delta_e_bind_kj_mol, 3)\n        rounded_bind_cp = round(delta_e_bind_cp_kj_mol, 3)\n\n        # Append the pair of results for the current case\n        all_results.append([rounded_bind, rounded_bind_cp])\n\n    # Format the final output string to match the required format:\n    # [[x1,y1],[x2,y2],[x3,y3],[x4,y4]]\n    # This is done by creating a string representation for each inner list\n    # and then joining them with commas.\n    inner_strings = [f\"[{res[0]},{res[1]}]\" for res in all_results]\n    final_output_string = f\"[{','.join(inner_strings)}]\"\n\n    # Final print statement in the exact required format.\n    print(final_output_string)\n\nsolve()\n```", "id": "2451348"}]}