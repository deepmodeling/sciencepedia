{"hands_on_practices": [{"introduction": "泊松-玻尔兹曼 (Poisson-Boltzmann, PB) 方程是理解溶剂化效应的基石，但其偏微分方程的形式常常令人望而生畏。本练习将带你亲手揭开这一“黑箱”，在一个简单的二维网格上通过有限差分法构建一个PB求解器。通过这个实践，你将直观地理解如何将一个抽象的数学方程转化为具体的计算机程序，为掌握更复杂的溶剂化模型打下坚实的基础。[@problem_id:2456114]", "problem": "你需要构建一个完全指定、自洽的计算模型，该模型用于演示在一个二维方格晶格上，使用有限差分法离散化求解线性化 Poisson–Boltzmann (PB) 方程的过程。该模型必须计算静电简约势，即由热能和基本电荷进行缩放后的静电势。因此，该势是无量纲的。数学问题描述如下。\n\n设 $\\phi(x,y)$ 为满足二维线性化 Poisson–Boltzmann 方程的静电简约势\n$$\n\\frac{\\partial^2 \\phi}{\\partial x^2} + \\frac{\\partial^2 \\phi}{\\partial y^2} - \\kappa^2 \\phi = -\\sigma(x,y),\n$$\n该方程定义在一个方形区域上，该区域被离散化为一个均匀网格，晶格间距为 $h$，节点数为 $N \\times N$，并在边界节点上施加均匀 Dirichlet 边界条件 $\\phi=0$。其中，$\\kappa \\ge 0$ 是反屏蔽长度（单位为长度的倒数），$\\sigma(x,y)$ 是给定的无量纲源密度。网格节点由整数索引 $(i,j)$ 标记，其中 $0 \\le i,j \\le N-1$，其物理坐标为 $(x_i,y_j) = (i h, j h)$。离散源 $\\sigma_{i,j}$ 的定义方式如下：一个集中在节点 $(i_0,j_0)$、积分强度为 $A$ 的点源，表示为 $\\sigma_{i_0,j_0} = A / h^2$，而在其他位置 $\\sigma_{i,j} = 0$。这确保了离散积分源等于 $A$。\n\n对于下述每个指定的测试用例，计算满足上述方程（附带所述边界条件）所对应的离散有限差分方程的稳态解 $\\phi_{i,j}$。然后，为每个测试用例报告指定探针节点处的势值，结果为一个浮点数。所有报告的值都是无量纲的，没有物理单位。此问题不涉及角度。\n\n测试套件（每一项都是一组完整的参数）：\n\n- 测试用例 1（无屏蔽，单源）：\n  - 网格大小：$N=21$。\n  - 晶格间距：$h=1$。\n  - 反屏蔽长度：$\\kappa=0$。\n  - 源：一个源，积分强度 $A=1$，位于节点 $(i_0,j_0)=(10,10)$。\n  - 边界条件：所有边界节点上的 $\\phi=0$。\n  - 此用例所需输出：节点 $(10,10)$ 处的 $\\phi$ 值。\n\n- 测试用例 2（有屏蔽，单源）：\n  - 网格大小：$N=21$。\n  - 晶格间距：$h=1$。\n  - 反屏蔽长度：$\\kappa=0.5$。\n  - 源：一个源，积分强度 $A=1$，位于节点 $(i_0,j_0)=(10,10)$。\n  - 边界条件：所有边界节点上的 $\\phi=0$。\n  - 此用例所需输出：节点 $(10,10)$ 处的 $\\phi$ 值。\n\n- 测试用例 3（有屏蔽，类偶极子对）：\n  - 网格大小：$N=21$。\n  - 晶格间距：$h=1$。\n  - 反屏蔽长度：$\\kappa=0.5$。\n  - 源：两个源，积分强度 $A=+1$ 位于 $(i_1,j_1)=(8,10)$，积分强度 $A=-1$ 位于 $(i_2,j_2)=(12,10)$。\n  - 边界条件：所有边界节点上的 $\\phi=0$。\n  - 此用例所需输出：节点 $(10,10)$ 处的 $\\phi$ 值。\n\n最终输出格式要求：你的程序必须生成一行包含三个结果的文本，按测试用例 1、2、3 的顺序排列，形式为用方括号括起来的逗号分隔列表。每个数字必须四舍五入到 6 位小数。例如，输出格式必须严格符合 $[r_1,r_2,r_3]$ 的形式，其中 $r_1$、$r_2$ 和 $r_3$ 是四舍五入到 6 位小数的三个浮点数结果。所有输出均为无量纲，无单位。", "solution": "所提问题要求在均匀方格上数值求解二维线性化 Poisson-Boltzmann 方程。控制无量纲静电势 $\\phi(x,y)$ 的偏微分方程 (PDE) 如下：\n$$\n\\frac{\\partial^2 \\phi}{\\partial x^2} + \\frac{\\partial^2 \\phi}{\\partial y^2} - \\kappa^2 \\phi = -\\sigma(x,y)\n$$\n其中 $\\kappa$ 是 Debye 屏蔽长度的倒数，$\\sigma(x,y)$ 是代表电荷分布的源密度函数。求解域是一个 $N \\times N$ 节点的方形晶格，间距为 $h$，并在网格的边界上施加均匀 Dirichlet 边界条件 ($\\phi=0$)。\n\n将使用有限差分法获得解，该方法将连续的偏微分方程转换为一个线性代数方程组。我们使用二阶中心差分近似在每个内部网格节点 $(i,j)$ 对拉普拉斯算子 $\\nabla^2 = \\frac{\\partial^2}{\\partial x^2} + \\frac{\\partial^2}{\\partial y^2}$ 进行离散化。节点 $(i,j)$ 的坐标为 $(x_i, y_j) = (ih, jh)$，其中 $i,j \\in \\{0, 1, \\dots, N-1\\}$。此节点的离散势记为 $\\phi_{i,j}$。二阶偏导数的近似为：\n$$\n\\frac{\\partial^2 \\phi}{\\partial x^2}\\bigg|_{(i,j)} \\approx \\frac{\\phi_{i+1,j} - 2\\phi_{i,j} + \\phi_{i-1,j}}{h^2}\n$$\n$$\n\\frac{\\partial^2 \\phi}{\\partial y^2}\\bigg|_{(i,j)} \\approx \\frac{\\phi_{i,j+1} - 2\\phi_{i,j} + \\phi_{i,j-1}}{h^2}\n$$\n将这些表达式代入原始偏微分方程，得到每个内部节点（其中 $i,j \\in \\{1, \\dots, N-2\\}$）的离散方程：\n$$\n\\frac{\\phi_{i+1,j} - 2\\phi_{i,j} + \\phi_{i-1,j}}{h^2} + \\frac{\\phi_{i,j+1} - 2\\phi_{i,j} + \\phi_{i,j-1}}{h^2} - \\kappa^2 \\phi_{i,j} = -\\sigma_{i,j}\n$$\n其中 $\\sigma_{i,j}$ 是节点 $(i,j)$ 处的离散源密度。两边乘以 $h^2$ 并重新整理各项，将未知数 $\\phi_{i,j}$ 归到左侧，我们得到五点差分格式：\n$$\n(4 + h^2 \\kappa^2) \\phi_{i,j} - \\phi_{i-1,j} - \\phi_{i+1,j} - \\phi_{i,j-1} - \\phi_{i,j+1} = h^2 \\sigma_{i,j}\n$$\n边界条件规定，如果 $i=0$、$i=N-1$、$j=0$ 或 $j=N-1$，则 $\\phi_{i,j}=0$。这些值是已知的，不构成方程组中的未知数。所有 $(N-2) \\times (N-2)$ 个内部节点的方程集合构成了一个 $M \\mathbf{\\Phi} = \\mathbf{b}$ 形式的线性方程组。\n\n为了构建此方程组，必须将未知势 $\\phi_{i,j}$（其中 $i,j \\in \\{1, \\dots, N-2\\}$）的二维网格映射到一个一维向量 $\\mathbf{\\Phi}$。我们采用行主序索引方案，其中二维索引对 $(i,j)$ 映射到一维索引 $k = (i-1)(N-2) + (j-1)$。该方程组的维度为 $D = (N-2)^2$。\n\n矩阵 $M$ 是一个 $D \\times D$ 的方阵。对于对应于节点 $(i,j)$（矩阵中的第 $k$ 行）的方程，其系数为：\n-   对角线元素，对应于 $\\phi_{i,j}$ 本身，为 $M_{k,k} = 4 + h^2 \\kappa^2$。\n-   非对角线元素，对应于四个相邻节点，均为 $-1$。对于位于 $(i',j')$ 的邻居，其对应的列索引为 $k' = (i'-1)(N-2) + (j'-1)$。具体来说：\n    -   对于 $\\phi_{i-1,j}$，列索引为 $k - (N-2)$。\n    -   对于 $\\phi_{i+1,j}$，列索引为 $k + (N-2)$。\n    -   对于 $\\phi_{i,j-1}$，列索引为 $k - 1$。\n    -   对于 $\\phi_{i,j+1}$，列索引为 $k + 1$。\n$M$ 的所有其他元素均为零。所得矩阵是稀疏、对称且正定的，这保证了其解是唯一的。\n\n右端向量 $\\mathbf{b}$ 的元素为 $b_k = h^2 \\sigma_{i,j}$。根据问题陈述，一个位于节点 $(i_0, j_0)$、积分强度为 $A$ 的点源，其离散源密度表示为 $\\sigma_{i_0,j_0} = A/h^2$。因此，向量 $\\mathbf{b}$ 中的相应条目为 $b_k = h^2 (A/h^2) = A$。对于没有源的节点，$\\mathbf{b}$ 中的相应条目为 $0$。\n\n计算步骤如下：\n1.  对每个测试用例，定义参数 $N$、$h$、$\\kappa$，以及源的集合（包括其强度 $A$ 和位置 $(i,j)$）。\n2.  构建 $D \\times D$ 矩阵 $M$，其中 $D=(N-2)^2$。对角线元素为 $4 + h^2 \\kappa^2$，相邻节点的非对角线元素为 $-1$。\n3.  构建大小为 $D$ 的向量 $\\mathbf{b}$。对于每个位于内部节点 $(i_s, j_s)$、强度为 $A_s$ 的源，将元素 $b_k = A_s$ 设置到对应于 $(i_s, j_s)$ 的一维索引 $k$ 上。\n4.  使用标准线性求解器求解线性方程组 $M \\mathbf{\\Phi} = \\mathbf{b}$，得到势向量 $\\mathbf{\\Phi}$。\n5.  找到指定探针节点 $(i_p, j_p)$ 对应的一维索引 $k_p$，并检索值 $\\mathbf{\\Phi}[k_p]$，从而提取该节点的势。\n此过程将应用于所提供的三个测试用例中的每一个。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all given test cases.\n    \"\"\"\n    test_cases = [\n        # Test case 1\n        {\n            \"N\": 21, \"h\": 1.0, \"kappa\": 0.0,\n            \"sources\": [(1.0, 10, 10)],\n            \"probe_node\": (10, 10)\n        },\n        # Test case 2\n        {\n            \"N\": 21, \"h\": 1.0, \"kappa\": 0.5,\n            \"sources\": [(1.0, 10, 10)],\n            \"probe_node\": (10, 10)\n        },\n        # Test case 3\n        {\n            \"N\": 21, \"h\": 1.0, \"kappa\": 0.5,\n            \"sources\": [(1.0, 8, 10), (-1.0, 12, 10)],\n            \"probe_node\": (10, 10)\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = _solve_pb_case(\n            case[\"N\"],\n            case[\"h\"],\n            case[\"kappa\"],\n            case[\"sources\"],\n            case[\"probe_node\"]\n        )\n        results.append(f\"{result:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\ndef _solve_pb_case(N, h, kappa, sources, probe_node):\n    \"\"\"\n    Solves the linearized Poisson-Boltzmann equation for a single test case.\n\n    Args:\n        N (int): Grid size (N x N nodes).\n        h (float): Lattice spacing.\n        kappa (float): Inverse screening length.\n        sources (list): A list of tuples, where each tuple is (strength A, i, j).\n        probe_node (tuple): The (i, j) coordinates of the node to report potential.\n\n    Returns:\n        float: The calculated potential at the probe node.\n    \"\"\"\n    # Number of interior nodes along one dimension\n    num_interior = N - 2\n    # Total number of unknowns (dimension of the linear system)\n    dim = num_interior * num_interior\n\n    # The matrix M of the linear system M * Phi = b\n    M = np.zeros((dim, dim))\n    # The right-hand side vector b\n    b = np.zeros(dim)\n\n    # The value for the diagonal elements of M\n    diag_val = 4.0 + (h * kappa)**2\n\n    # Construct the matrix M\n    for i in range(1, N - 1):\n        for j in range(1, N - 1):\n            # Map 2D grid indices (i, j) to 1D vector index k (row-major)\n            k = (i - 1) * num_interior + (j - 1)\n\n            # Diagonal element\n            M[k, k] = diag_val\n\n            # Off-diagonal elements for neighbors\n            # West neighbor (i, j-1)\n            if j > 1:\n                M[k, k - 1] = -1.0\n            # East neighbor (i, j+1)\n            if j < N - 2:\n                M[k, k + 1] = -1.0\n            # North neighbor (i-1, j)\n            if i > 1:\n                M[k, k - num_interior] = -1.0\n            # South neighbor (i+1, j)\n            if i < N - 2:\n                M[k, k + num_interior] = -1.0\n\n    # Construct the source vector b\n    for strength_A, i_src, j_src in sources:\n        # Check if the source is an interior node\n        if 1 <= i_src < N - 1 and 1 <= j_src < N - 1:\n            k_src = (i_src - 1) * num_interior + (j_src - 1)\n            # As derived, b_k = h^2 * sigma = h^2 * (A / h^2) = A\n            b[k_src] += strength_A\n\n    # Solve the linear system M * Phi = b for the potentials Phi\n    try:\n        phi_vector = np.linalg.solve(M, b)\n    except np.linalg.LinAlgError:\n        # This should not happen for this problem as M is non-singular\n        return float('nan')\n\n    # Extract the potential at the probe node\n    i_probe, j_probe = probe_node\n    if 1 <= i_probe < N - 1 and 1 <= j_probe < N - 1:\n        k_probe = (i_probe - 1) * num_interior + (j_probe - 1)\n        potential = phi_vector[k_probe]\n    else:\n        # Probe is on the boundary, where potential is 0 by definition\n        potential = 0.0\n\n    return potential\n\nsolve()\n```", "id": "2456114"}, {"introduction": "相比于计算成本高昂的网格法，广义玻恩 (Generalized Born, GB) 模型提供了一种高效的解析近似方案，极大地推动了分子模拟的发展。本练习将带你回到问题的本源，探索GB模型与作为其理论基石的玻恩 (Born) 模型之间的关系。通过计算一个理想带电球体的溶剂化能，你将比较离散电荷的GB近似解与精确的玻恩解析解，从而深刻理解GB模型作为一种近似方法的准确性与物理内涵。[@problem_id:2456130]", "problem": "要求您使用广义 Born (GB) 模型和 Born 解析方程，计算并比较一个球形类富勒烯溶质的连续介质静电溶剂化自由能。将溶质视为一个半径为 $R$ 的完美球体，浸入均匀的电介质中，并假设总电荷 $q_{\\mathrm{tot}}$ 分布在 $N$ 个位点上。计算过程中，所有量必须使用国际单位制 (SI) 处理，所有最终能量必须以千焦耳/摩尔 (kJ/mol) 为单位报告。角度（如需要）必须以弧度为单位。\n\n使用的定义和物理常数：\n- 真空介电常数 $\\varepsilon_0 = 8.8541878128\\times 10^{-12}\\ \\mathrm{F/m}$。\n- 库仑常数 $k_e = \\dfrac{1}{4\\pi \\varepsilon_0}$。\n- 元电荷 $e = 1.602176634\\times 10^{-19}\\ \\mathrm{C}$。\n- 阿伏伽德罗常数 $N_A = 6.02214076\\times 10^{23}\\ \\mathrm{mol^{-1}}$。\n- 单位换算 $1\\ \\mathrm{\\AA} = 1.0\\times 10^{-10}\\ \\mathrm{m}$。\n\n广义 Born 模型：设溶质内部介电常数为 $\\varepsilon_{\\mathrm{in}}$，溶剂介电常数为 $\\varepsilon_{\\mathrm{out}}$。考虑位于半径为 $R$ 的球面上的 $N$ 个点电荷，每个点电荷携带等量电荷 $q_i = q_{\\mathrm{tot}}/N$。为每个位点分配一个有效 Born 半径 $\\alpha_i = R$。GB 极化自由能定义为\n$$\n\\Delta G_{\\mathrm{GB}} = -\\dfrac{1}{2}\\,k_e\\left(\\dfrac{1}{\\varepsilon_{\\mathrm{in}}}-\\dfrac{1}{\\varepsilon_{\\mathrm{out}}}\\right)\\sum_{i=1}^{N}\\sum_{j=1}^{N}\\dfrac{q_i\\,q_j}{f_{\\mathrm{GB}}(r_{ij},\\alpha_i,\\alpha_j)}\\ ,\n$$\n其中 Still 广义 Born 有效距离为\n$$\nf_{\\mathrm{GB}}(r_{ij},\\alpha_i,\\alpha_j)=\\sqrt{r_{ij}^2+\\alpha_i\\alpha_j\\exp\\!\\left(-\\dfrac{r_{ij}^2}{4\\alpha_i\\alpha_j}\\right)}\\ ,\n$$\n其中 $r_{ij}$ 是位点 $i$ 和 $j$ 之间的欧几里得距离。\n\nBorn 解析模型：对于一个总电荷为 $q_{\\mathrm{tot}}$、半径为 $R$ 的单一有效球形溶质，处于内部和外部介电常数分别为 $\\varepsilon_{\\mathrm{in}}$ 和 $\\varepsilon_{\\mathrm{out}}$ 的介质中，其 Born 极化自由能为\n$$\n\\Delta G_{\\mathrm{Born}} = -\\dfrac{1}{2}\\,k_e\\left(\\dfrac{1}{\\varepsilon_{\\mathrm{in}}}-\\dfrac{1}{\\varepsilon_{\\mathrm{out}}}\\right)\\dfrac{q_{\\mathrm{tot}}^2}{R}\\ .\n$$\n\n球形溶质上 $N$ 个电荷位点的几何规格：使用球面斐波那契格点将点准均匀地放置在半径为 $R$ 的球面上。对于 $k\\in\\{0,1,2,\\dots,N-1\\}$，定义黄金角 $\\varphi_g=\\pi(3-\\sqrt{5})$（以弧度为单位）、$z$ 坐标 $z_k=1-2\\,(k+0.5)/N$、平面内半径 $r_k=\\sqrt{1-z_k^2}$、方位角 $\\theta_k=k\\,\\varphi_g$ 和笛卡尔坐标\n$$\n\\mathbf{r}_k = R\\left(r_k\\cos\\theta_k,\\ r_k\\sin\\theta_k,\\ z_k\\right)\\ .\n$$\n对于 $N=1$ 的情况，将单位点放置在原点 $\\mathbf{r}_0=(0,0,0)$，并设置 $\\alpha_0=R$。能量公式中使用的所有距离都必须以米为单位。\n\n任务：\n1. 对于下方的每个测试用例，计算 $\\Delta G_{\\mathrm{GB}}$ 和 $\\Delta G_{\\mathrm{Born}}$（单位为 $\\mathrm{kJ/mol}$），然后计算绝对差 $\\lvert \\Delta G_{\\mathrm{GB}}-\\Delta G_{\\mathrm{Born}}\\rvert$（单位为 $\\mathrm{kJ/mol}$）以及定义为 $\\lvert \\Delta G_{\\mathrm{GB}}-\\Delta G_{\\mathrm{Born}}\\rvert / \\lvert \\Delta G_{\\mathrm{Born}}\\rvert$ 的相对差（以无量纲小数表示）。\n2. 使用上述常数和定义，不得修改。\n3. 在计算前，将所有以埃（angstrom）为单位的输入半径转换为米。\n4. 角度必须以弧度为单位。\n\n测试套件（每个用例是一个元组 $(N,\\ q_{\\mathrm{tot}}/e,\\ R/\\mathrm{\\AA},\\ \\varepsilon_{\\mathrm{in}},\\ \\varepsilon_{\\mathrm{out}})$）：\n- 用例 1: $(60,\\ -1,\\ 3.55,\\ 1.0,\\ 78.37)$。\n- 用例 2: $(60,\\ -1,\\ 1.0,\\ 1.0,\\ 78.37)$。\n- 用例 3: $(60,\\ -1,\\ 3.55,\\ 1.0,\\ 2.0)$。\n- 用例 4 (控制，点电荷极限): $(1,\\ -1,\\ 3.55,\\ 1.0,\\ 78.37)$。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个含四个项目（每个测试用例一项）的列表，每个项目本身是包含四个浮点数 $[\\Delta G_{\\mathrm{GB}},\\ \\Delta G_{\\mathrm{Born}},\\ \\text{abs\\_diff},\\ \\text{rel\\_diff}]$ 的列表，顺序如上定义。\n- 所有能量单位必须是 $\\mathrm{kJ/mol}$，所有相对差必须是小数（无量纲）。\n- 每个浮点数必须四舍五入到小数点后恰好六位。\n- 整体输出必须是一个不含空白字符的、由方括号列表组成的单个方括号列表，例如 $[[v_{11},v_{12},v_{13},v_{14}],[v_{21},v_{22},v_{23},v_{24}],[v_{31},v_{32},v_{33},v_{34}],[v_{41},v_{42},v_{43},v_{44}]]$, 其中 $v_{ij}$ 是用例 $i$ 和物理量 $j$ 所需的舍入值。\n\n所有计算结果请按要求以 $\\mathrm{kJ/mol}$ 和弧度为单位作答，并严格遵守输出格式。", "solution": "所提出的问题是连续介质静电学领域一个定义明确的计算练习，该领域是理论与计算化学的一个基础领域。它要求使用两种标准模型来计算和比较溶剂化自由能：用于简单球体的 Born 解析模型，以及用于具有分布式电荷的球体的更复杂的广义 Born (GB) 模型。该问题在科学上是合理的，所有参数和方程均已提供，且目标明确。因此，我们着手进行求解。\n\n问题的核心是评估静电极化自由能 $\\Delta G$ 的两种不同表达式，该能量表示将带电溶质从低介电常数介质（此处为 $\\varepsilon_{\\mathrm{in}}$）转移到高介电常数介质（溶剂，$\\varepsilon_{\\mathrm{out}}$）时相关的能量变化。\n\n首先，我们根据所有中间计算的要求，定义国际单位制 (SI) 中的基本常数和转换因子。\n- 真空介电常数: $\\varepsilon_0 = 8.8541878128\\times 10^{-12}\\ \\mathrm{F/m}$\n- 库仑常数: $k_e = \\dfrac{1}{4\\pi \\varepsilon_0}$\n- 元电荷: $e = 1.602176634\\times 10^{-19}\\ \\mathrm{C}$\n- 阿伏伽德罗常数: $N_A = 6.02214076\\times 10^{23}\\ \\mathrm{mol^{-1}}$\n- 埃到米的转换: $1\\ \\mathrm{\\AA} = 1.0\\times 10^{-10}\\ \\mathrm{m}$\n\n所有输入参数，如球体半径 $R$ 和总电荷 $q_{\\mathrm{tot}}$，在用于能量方程之前，必须转换为这些 SI 基本单位。\n\n对于提供的每个测试用例，计算过程沿着两条并行的路径进行。\n\n**1. Born 模型计算**\n\nBorn 模型为完美的、不可分割的球形离子提供了精确的解析解。极化自由能 $\\Delta G_{\\mathrm{Born}}$ 由下式给出：\n$$\n\\Delta G_{\\mathrm{Born}} = -\\dfrac{1}{2}\\,k_e\\left(\\dfrac{1}{\\varepsilon_{\\mathrm{in}}}-\\dfrac{1}{\\varepsilon_{\\mathrm{out}}}\\right)\\dfrac{q_{\\mathrm{tot}}^2}{R}\n$$\n其实现是直接的：\n- 首先根据给定的元电荷 $e$ 的倍数，计算出以库仑为单位的总电荷 $q_{\\mathrm{tot}}$。\n- 将半径 $R$ 从埃（$\\mathrm{\\AA}$）转换为米（$\\mathrm{m}$）。\n- 对方程求值，得到每个溶质粒子的能量，单位为焦耳 ($J$)。\n- 为获得以千焦耳/摩尔 ($\\mathrm{kJ/mol}$) 为单位的最终摩尔能量，将结果乘以阿伏伽德罗常数 $N_A$ 并除以 1000。\n$$\n\\Delta G_{\\mathrm{Born}} \\ [\\mathrm{kJ/mol}] = \\Delta G_{\\mathrm{Born}} \\ [\\mathrm{J}] \\times \\dfrac{N_A}{1000}\n$$\n\n**2. 广义 Born (GB) 模型计算**\n\nGB 模型近似了具有更复杂电荷分布的分子的静电行为，此处模拟为 $N$ 个离散的点电荷。能量表达式是对所有电荷位点的成对求和：\n$$\n\\Delta G_{\\mathrm{GB}} = -\\dfrac{1}{2}\\,k_e\\left(\\dfrac{1}{\\varepsilon_{\\mathrm{in}}}-\\dfrac{1}{\\varepsilon_{\\mathrm{out}}}\\right)\\sum_{i=1}^{N}\\sum_{j=1}^{N}\\dfrac{q_i\\,q_j}{f_{\\mathrm{GB}}(r_{ij},\\alpha_i,\\alpha_j)}\n$$\n其中每个位点携带等量电荷 $q_i = q_{\\mathrm{tot}}/N$，且每个位点的有效 Born 半径设置为球体半径 $\\alpha_i = R$。有效距离函数 $f_{\\mathrm{GB}}$ 来自 Still 的公式：\n$$\nf_{\\mathrm{GB}}(r_{ij},\\alpha_i,\\alpha_j)=\\sqrt{r_{ij}^2+\\alpha_i\\alpha_j\\exp\\!\\left(-\\dfrac{r_{ij}^2}{4\\alpha_i\\alpha_j}\\right)}\n$$\n计算通过以下几个步骤进行：\n\n- **电荷位点坐标的生成：** 必须确定 $N$ 个位点的位置 $\\mathbf{r}_k$。对于 $N>1$ 的情况，采用球面斐波那契格点算法。对于每个索引 $k \\in \\{0, 1, \\dots, N-1\\}$，坐标在单位球面坐标系中计算，然后按半径 $R$进行缩放：\n  - 黄金角：$\\varphi_g=\\pi(3-\\sqrt{5})$\n  - $z$ 轴位置（归一化）：$z'_k=1-2\\,(k+0.5)/N$\n  - 平面内半径（归一化）：$r'_k=\\sqrt{1-(z'_k)^2}$\n  - 方位角：$\\theta_k=k\\,\\varphi_g$\n  - 笛卡尔坐标：$\\mathbf{r}_k = (R \\cdot r'_k\\cos\\theta_k, R \\cdot r'_k\\sin\\theta_k, R \\cdot z'_k)$\n对于 $N=1$ 的特殊情况，问题明确指示我们将单个电荷置于原点 $\\mathbf{r}_0=(0,0,0)$。\n\n- **GB 和的计算：** 坐标确定后，构建成对相互作用矩阵。\n  - 计算所有位点对 $(i, j)$ 的欧几里得距离 $r_{ij} = \\lVert \\mathbf{r}_i - \\mathbf{r}_j \\rVert$。\n  - 对每一对，计算有效距离 $f_{\\mathrm{GB}}(r_{ij}, R, R)$。注意，对于对角线项 $i=j$，我们有 $r_{ii}=0$，这正确地得出 $f_{\\mathrm{GB}}(0, R, R) = \\sqrt{0^2+R^2\\exp(0)} = R$。\n  - 计算总和 $\\sum_{i,j} \\frac{q_i q_j}{f_{\\mathrm{GB}}}$。由于所有电荷 $q_i$ 都相同，这等价于 $(q_{\\mathrm{tot}}/N)^2 \\sum_{i,j} \\frac{1}{f_{\\mathrm{GB}}}$。\n- **最终能量计算：** 计算出的总和乘以与 Born 模型中相同的预因子 $-\\frac{1}{2} k_e (\\frac{1}{\\varepsilon_{\\mathrm{in}}} - \\frac{1}{\\varepsilon_{\\mathrm{out}}})$。结果从焦耳转换为 $\\mathrm{kJ/mol}$。\n\n观察 $N=1$ 这个控制案例的行为至关重要。在此情况下，位点在原点，因此 $r_{00}=0$ 是唯一的距离。GB 和简化为单项：\n$$\n\\sum_{i=1}^{1}\\sum_{j=1}^{1}\\dfrac{q_i\\,q_j}{f_{\\mathrm{GB}}} = \\dfrac{q_{0}^2}{f_{\\mathrm{GB}}(0,R,R)} = \\dfrac{q_{\\mathrm{tot}}^2}{R}\n$$\n这使得 GB 能量表达式与 Born 能量表达式完全相同。因此，对于 $N=1$，我们期望 $\\Delta G_{\\mathrm{GB}} = \\Delta G_{\\mathrm{Born}}$，任何差异都将归因于浮点数精度限制。这是一个对实现至关重要的内部一致性检查。\n\n**3. 比较与输出格式化**\n对于每个测试用例，在计算出 $\\Delta G_{\\mathrm{GB}}$ 和 $\\Delta G_{\\mathrm{Born}}$（单位 $\\mathrm{kJ/mol}$）后，计算绝对差 $\\lvert \\Delta G_{\\mathrm{GB}}-\\Delta G_{\\mathrm{Born}}\\rvert$ 和无量纲的相对差 $\\lvert \\Delta G_{\\mathrm{GB}}-\\Delta G_{\\mathrm{Born}}\\rvert / \\lvert \\Delta G_{\\mathrm{Born}}\\rvert$。由于对于所有指定的测试用例，$\\Delta G_{\\mathrm{Born}}$ 均不为零，因此相对差有明确定义。\n\n最后，将每个测试用例计算出的四个值集合起来，格式化为六位小数，并按要求组装成精确的、不含空白字符的列表之列表格式字符串 `[[...],[...],...]`。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes and compares continuum electrostatic solvation free energies using\n    the Generalized Born (GB) and analytical Born models for a spherical solute.\n    \"\"\"\n    \n    # Define physical constants in SI units\n    EPS_0 = 8.8541878128e-12  # F/m\n    K_E = 1 / (4 * np.pi * EPS_0)  # m/F or N*m^2/C^2\n    E_CHARGE = 1.602176634e-19  # C\n    N_A = 6.02214076e23  # mol^-1\n    ANGSTROM_TO_M = 1.0e-10  # m/Angstrom\n    \n    # Test suite: (N, q_tot/e, R/Angstrom, eps_in, eps_out)\n    test_cases = [\n        (60, -1, 3.55, 1.0, 78.37),\n        (60, -1, 1.0, 1.0, 78.37),\n        (60, -1, 3.55, 1.0, 2.0),\n        (1, -1, 3.55, 1.0, 78.37),\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        N, q_tot_e, R_angstrom, eps_in, eps_out = case\n\n        # --- Unit Conversions and Preliminary Calculations ---\n        R_m = R_angstrom * ANGSTROM_TO_M\n        q_tot = q_tot_e * E_CHARGE\n        q_i = q_tot / N\n        \n        # Energy prefactor common to both models, in SI units (J*m/C^2)\n        energy_prefactor = -0.5 * K_E * (1.0 / eps_in - 1.0 / eps_out)\n\n        # --- Born Model Calculation ---\n        # Energy in Joules for a single solute\n        delta_g_born_joules = energy_prefactor * (q_tot**2 / R_m)\n        # Convert to kJ/mol\n        delta_g_born_kj_mol = delta_g_born_joules * N_A / 1000.0\n\n        # --- Generalized Born Model Calculation ---\n        # Generate charge site coordinates\n        if N == 1:\n            # Special case as per problem description\n            coords = np.array([[0.0, 0.0, 0.0]])\n        else:\n            coords = np.zeros((N, 3))\n            phi_g = np.pi * (3.0 - np.sqrt(5.0))  # Golden angle in radians\n            for k in range(N):\n                z_k_norm = 1.0 - 2.0 * (k + 0.5) / N\n                r_k_norm = np.sqrt(1.0 - z_k_norm**2)\n                theta_k = k * phi_g\n                \n                coords[k, 0] = R_m * r_k_norm * np.cos(theta_k)\n                coords[k, 1] = R_m * r_k_norm * np.sin(theta_k)\n                coords[k, 2] = R_m * z_k_norm\n\n        # Calculate GB sum using vectorized operations for efficiency\n        # Pairwise distance matrix r_ij\n        diffs = coords[:, np.newaxis, :] - coords\n        r_ij_matrix = np.linalg.norm(diffs, axis=2)\n        \n        # Still effective distance f_GB\n        alpha_prod = R_m**2 # alpha_i * alpha_j = R * R always\n        \n        # The argument to exp is -r_ij^2 / (4*R^2).\n        # This is safe from division by zero, as R > 0.\n        exp_term = np.exp(-(r_ij_matrix**2) / (4.0 * alpha_prod))\n        f_gb_matrix = np.sqrt(r_ij_matrix**2 + alpha_prod * exp_term)\n        \n        # Sum term: sum_{i,j} (q_i * q_j / f_GB). Since all q_i are equal,\n        # this is (q_tot/N)^2 * sum_{i,j} (1/f_GB).\n        q_ij_prod = q_i**2\n        \n        # f_gb_matrix is guaranteed to be non-zero\n        gb_sum = q_ij_prod * np.sum(1.0 / f_gb_matrix)\n\n        # GB energy in Joules for a single solute\n        delta_g_gb_joules = energy_prefactor * gb_sum\n        # Convert to kJ/mol\n        delta_g_gb_kj_mol = delta_g_gb_joules * N_A / 1000.0\n\n        # --- Calculate Differences ---\n        abs_diff = np.abs(delta_g_gb_kj_mol - delta_g_born_kj_mol)\n        \n        # Relative difference. delta_g_born_kj_mol is non-zero for test cases.\n        rel_diff = abs_diff / np.abs(delta_g_born_kj_mol)\n\n        case_results = [\n            delta_g_gb_kj_mol,\n            delta_g_born_kj_mol,\n            abs_diff,\n            rel_diff,\n        ]\n        all_results.append(case_results)\n\n    # --- Format Final Output ---\n    output_parts = []\n    for res_list in all_results:\n        formatted_list = [f\"{val:.6f}\" for val in res_list]\n        output_parts.append(f\"[{','.join(formatted_list)}]\")\n    \n    final_output_str = f\"[{','.join(output_parts)}]\"\n    print(final_output_str)\n\nsolve()\n```", "id": "2456130"}, {"introduction": "在实际应用中，一个完整的溶剂化模型必须同时考虑溶质与溶剂间静电相互作用（极性贡献）和形成溶剂空穴及范德华相互作用的代价（非极性贡献）。本练习将让你扮演计算化学家的角色，对一个同系列的烷烃分子进行溶剂化自由能的计算。你将亲手实现一个结合了广义玻恩（GB）模型和溶剂可及表面积（SASA）模型的混合方法，并在此过程中探索模型中的简化假设（如分子的几何形状）对最终结论可能产生的重要影响。[@problem_id:2456148]", "problem": "您需要实现一个完整、可运行的程序，该程序使用一种基于连续介质静电学、具有物理动机但经过简化的方法，为从乙烷 $\\mathrm{C}_2\\mathrm{H}_6$ 到癸烷 $\\mathrm{C}_{10}\\mathrm{H}_{22}$ 的线性烷烃同系物进行溶剂化建模。目标是计算与广义 Born (GB) 框架一致的溶剂化能，并评估非极性组分相对于溶剂可及表面积的线性关系。\n\n您必须从以下基本依据出发：\n- 介电介质中的静电学 Poisson 方程：$\\nabla \\cdot \\left( \\varepsilon \\nabla \\phi \\right) = - 4 \\pi \\rho$。该方程是 Poisson–Boltzmann (PB) 连续介质模型的基础。\n- 离子溶剂化的 Born 模型。在该模型中，电荷为 $q$ 的单个离子在介电常数为 $\\varepsilon$ 的连续介质中的静电溶剂化自由能与 $- q^2$ 成正比，与一个有效半径成反比。广义 Born (GB) 方法将此模型扩展到多个固定的部分电荷，使用有效 Born 半径来近似 Poisson–Boltzmann 理论。\n\n基于这些原理，推导出一个计算上易于处理的极性溶剂化能公式，该公式应适合编程实现，且无需求解完整的 Poisson–Boltzmann 方程。使用带有有效 Born 半径和平滑类库仑相互作用的成对 GB 拟设，并确保在适当情况下，所得的极性溶剂化能在单电荷极限下可以简化为经典的 Born 表达式。\n\n需使用的几何结构与模型参数：\n- 将每个烷烃 $\\mathrm{C}_n\\mathrm{H}_{2n+2}$（其中 $n \\in \\{2,3,\\dots,10\\}$）表示为沿 $x$ 轴共线排列的 $n$ 个联合原子碳位点组成的直链，其笛卡尔坐标为 $\\left(x_i, y_i, z_i\\right) = \\left( (i-1)b, 0, 0 \\right)$，其中 $i = 1, \\dots, n$，$b = 1.54\\,\\text{\\AA}$ 是碳-碳键长。氢原子被并入联合原子表示法中。\n- 分配部分电荷以在链上产生一个小的偶极，同时保持整体电中性：设置 $q_1 = +0.01\\,e$，$q_n = -0.01\\,e$，对于 $i = 2, \\dots, n-1$，设置 $q_i = 0\\,e$。这里 $e$ 是基本电荷单位；如果如下文指定使用一致的静电学预因子，则在程序中无需对 $e$ 进行单位转换。\n- 对所有碳位点使用统一的有效 Born 半径 $\\alpha_i = 2.0\\,\\text{\\AA}$。使用溶质介电常数 $\\varepsilon_{\\mathrm{in}} = 1.0$ 和溶剂介电常数 $\\varepsilon_{\\mathrm{out}} = 78.5$（环境条件下的液态水）。当距离单位为埃（angstrom），电荷单位为基本电荷单位时，能量单位为千卡/摩尔，使用静电转换常数 $k = 332.06371\\,\\text{kcal}\\,\\text{mol}^{-1}\\,\\text{\\AA}\\,e^{-2}$。\n- 将非极性自由能建模为溶剂可及表面积和溶剂排斥体积的线性组合：\n$$\n\\Delta G_{\\mathrm{np}} = \\gamma\\, S + \\kappa\\, V,\n$$\n其中 $S$ 是溶剂可及表面积，$V$ 是溶剂排斥体积。将烷烃近似为一个直的球顶圆柱体。使用以下公式计算 $S$ 和 $V$：\n$$\nS = 2 \\pi R_{\\mathrm{sa}} L + 4 \\pi R_{\\mathrm{sa}}^2,\\quad V = \\pi R_{\\mathrm{se}}^2 L + \\frac{4}{3}\\pi R_{\\mathrm{se}}^3,\n$$\n其中圆柱长度 $L = (n-1)b$，溶剂可及半径 $R_{\\mathrm{sa}} = r_{\\mathrm{C}} + r_{\\mathrm{p}}$，溶剂排斥半径 $R_{\\mathrm{se}} = r_{\\mathrm{C}}$，碳的 van der Waals 半径 $r_{\\mathrm{C}} = 1.70\\,\\text{\\AA}$，以及探针半径 $r_{\\mathrm{p}} = 1.40\\,\\text{\\AA}$。$\\Delta G_{\\mathrm{np}}$ 以 $\\text{kcal}\\,\\text{mol}^{-1}$ 为单位表示。\n\n总溶剂化自由能计算如下：\n$$\n\\Delta G_{\\mathrm{solv}} = \\Delta G_{\\mathrm{polar}} + \\Delta G_{\\mathrm{np}},\n$$\n其中 $\\Delta G_{\\mathrm{polar}}$ 由您基于上述基本原理推导出的 GB 表达式给出。所有能量必须以 $\\text{kcal}\\,\\text{mol}^{-1}$ 为单位报告。\n\n测试套件与输出：\n- 对于每个 $\\mathrm{C}_n\\mathrm{H}_{2n+2}$（其中 $n \\in \\{2,3,\\dots,10\\}$），计算 $S$、$V$、$\\Delta G_{\\mathrm{np}}$ 和 $\\Delta G_{\\mathrm{polar}}$。\n- 通过计算向量 $\\{\\Delta G_{\\mathrm{np}}(n)\\}_{n=2}^{10}$ 和 $\\{S(n)\\}_{n=2}^{10}$ 之间的 Pearson 相关系数 $r$，在三组不同的非极性参数集下评估该同系物中 $\\Delta G_{\\mathrm{np}}$ 相对于 $S$ 的线性关系（$\\gamma$ 的单位为 $\\text{kcal}\\,\\text{mol}^{-1}\\,\\text{\\AA}^{-2}$，$\\kappa$ 的单位为 $\\text{kcal}\\,\\text{mol}^{-1}\\,\\text{\\AA}^{-3}$）：\n  - 情况 A：$\\gamma = 0.005$，$\\kappa = 0.000$。\n  - 情况 B：$\\gamma = 0.005$，$\\kappa = 0.001$。\n  - 情况 C：$\\gamma = 0.005$，$\\kappa = 0.003$。\n- 您的程序应生成单行输出，其中包含情况 A、B 和 C 的三个相关系数 $r$（按此顺序），形式为用方括号括起来的逗号分隔列表，例如 $\\left[\\text{rA},\\text{rB},\\text{rC}\\right]$。不要打印任何其他文本。\n\n角度单位不适用。所有距离必须以 $\\text{\\AA}$ 为单位，所有能量必须以 $\\text{kcal}\\,\\text{mol}^{-1}$ 为单位，并表示为十进制数。最终输出必须是指定列表格式的单行文本。该测试套件旨在探究：一个完全线性的情况（A）、一个中度扰动的情况（B）和一个强度扰动的情况（C），以评估非极性组分与表面积成线性比例关系的假设。", "solution": "所给出的问题是计算化学领域一个有效的练习，要求为一个线性烷烃同系物实现一个简化的连续介质溶剂化模型。该问题具有科学依据，定义明确，并且所有必要的参数都已提供。我们将进行严谨的、分步的推导和计算实现。\n\n总溶剂化自由能 $\\Delta G_{\\mathrm{solv}}$ 是极性组分 $\\Delta G_{\\mathrm{polar}}$ 和非极性组分 $\\Delta G_{\\mathrm{np}}$ 的和：\n$$ \\Delta G_{\\mathrm{solv}} = \\Delta G_{\\mathrm{polar}} + \\Delta G_{\\mathrm{np}} $$\n\n首先，我们处理极性组分 $\\Delta G_{\\mathrm{polar}}$。该项的理论基础是 Poisson 方程 $\\nabla \\cdot (\\varepsilon \\nabla \\phi) = -4\\pi\\rho$，它描述了在具有位置相关介电常数 $\\varepsilon$ 和电荷密度 $\\rho$ 的介质中的静电势 $\\phi$。将一个分子从真空（或低介电常数内部，$\\varepsilon_{\\mathrm{in}}$）转移到高介电常数溶剂（$\\varepsilon_{\\mathrm{out}}$）中时，静电自由能的变化等于每个部分电荷 $q_i$ 与其所在位置的反应势 $\\phi_{\\mathrm{RF}}$ 乘积之和的一半：\n$$ \\Delta G_{\\mathrm{polar}} = \\frac{1}{2} \\sum_{i=1}^{N} q_i \\phi_{\\mathrm{RF}}(\\mathbf{r}_i) $$\n求解 Poisson 方程的计算成本高昂。广义 Born (GB) 模型提供了一种强大的近似方法。它是 Born 模型的扩展，Born 模型用于电荷为 $q$、半径为 $\\alpha$ 的单个球形离子，其精确解得到的溶剂化能为：\n$$ \\Delta G_{\\mathrm{Born}} = -\\frac{k}{2} \\left(\\frac{1}{\\varepsilon_{\\mathrm{in}}} - \\frac{1}{\\varepsilon_{\\mathrm{out}}}\\right) \\frac{q^2}{\\alpha} $$\n其中 $k$ 是静电转换常数。对于此问题，$\\varepsilon_{\\mathrm{in}} = 1.0$。\n\nGB 模型将一个多原子分子的 $\\Delta G_{\\mathrm{polar}}$ 近似为一个成对求和：\n$$ \\Delta G_{\\mathrm{polar}} = -\\frac{k}{2} \\left(\\frac{1}{\\varepsilon_{\\mathrm{in}}} - \\frac{1}{\\varepsilon_{\\mathrm{out}}}\\right) \\sum_{i=1}^{n} \\sum_{j=1}^{n} \\frac{q_i q_j}{f_{ij}} $$\n这里，$f_{ij}$ 是一个有效距离函数，它在粒子间距离 $r_{ij} = |\\mathbf{r}_i - \\mathbf{r}_j|$ 和有效 Born 半径 $\\alpha_i$、$\\alpha_j$ 之间平滑地插值。一个标准的“成对 GB 拟设”$f_{ij}$ 的形式是：\n$$ f_{ij} = \\sqrt{r_{ij}^2 + \\alpha_i \\alpha_j \\exp\\left(-\\frac{r_{ij}^2}{D \\alpha_i \\alpha_j}\\right)} $$\n其中 $D$ 是一个缩放参数，通常设为 4。对于对角项（$i = j$），$r_{ii} = 0$，表达式正确地简化为 $f_{ii} = \\sqrt{\\alpha_i^2} = \\alpha_i$，从而恢复每个原子的 Born 自能项。\n\n对于指定的烷烃 $\\mathrm{C}_n\\mathrm{H}_{2n+2}$（$n \\in \\{2, \\dots, 10\\}$），联合原子位点位于 $\\mathbf{r}_i = ((i-1)b, 0, 0)$，其中 $b = 1.54\\,\\text{\\AA}$。电荷仅在两端非零：$q_1 = +0.01\\,e$ 和 $q_n = -0.01\\,e$。对于 $i \\in \\{2, \\dots, n-1\\}$，所有其他电荷 $q_i$ 均为零。有效 Born 半径是统一的，即所有 $i$ 的 $\\alpha_i = \\alpha = 2.0\\,\\text{\\AA}$。$\\Delta G_{\\mathrm{polar}}$ 的双重求和显著简化，因为只有涉及 $q_1$ 和 $q_n$ 的项非零：\n$$ \\sum_{i=1}^{n} \\sum_{j=1}^{n} \\frac{q_i q_j}{f_{ij}} = \\frac{q_1^2}{f_{11}} + \\frac{q_n^2}{f_{nn}} + \\frac{2 q_1 q_n}{f_{1n}} $$\n由于 $f_{11} = \\alpha_1 = \\alpha$，$f_{nn} = \\alpha_n = \\alpha$，$q_1 = -q_n = q_{\\mathrm{end}}$，该和变为：\n$$ \\frac{q_{\\mathrm{end}}^2}{\\alpha} + \\frac{(-q_{\\mathrm{end}})^2}{\\alpha} + \\frac{2 q_{\\mathrm{end}}(-q_{\\mathrm{end}})}{f_{1n}} = 2q_{\\mathrm{end}}^2 \\left(\\frac{1}{\\alpha} - \\frac{1}{f_{1n}}\\right) $$\n末端原子之间的距离 $r_{1n}$ 为 $(n-1)b$。由于半径统一为 $\\alpha_i = \\alpha$，$f_{1n}$ 变为：\n$$ f_{1n} = \\sqrt{((n-1)b)^2 + \\alpha^2 \\exp\\left(-\\frac{((n-1)b)^2}{4\\alpha^2}\\right)} $$\n代入所有数值（$\\varepsilon_{\\mathrm{in}}=1.0$，$\\varepsilon_{\\mathrm{out}}=78.5$，$k=332.06371\\,\\text{kcal}\\,\\text{mol}^{-1}\\,\\text{\\AA}\\,e^{-2}$，$q_{\\mathrm{end}}=0.01\\,e$，$\\alpha=2.0\\,\\text{\\AA}$），极性溶剂化能的最终表达式为：\n$$ \\Delta G_{\\mathrm{polar}}(n) = -k \\left(1 - \\frac{1}{\\varepsilon_{\\mathrm{out}}}\\right) q_{\\mathrm{end}}^2 \\left(\\frac{1}{\\alpha} - \\frac{1}{f_{1n}}\\right) $$\n\n接下来，我们构建非极性组分 $\\Delta G_{\\mathrm{np}}$，它解释了在溶剂中形成空腔的代价以及溶质与溶剂之间的 van der Waals 相互作用。问题指定了一个在溶剂可及表面积（$S$）和溶剂排斥体积（$V$）上线性的模型：\n$$ \\Delta G_{\\mathrm{np}} = \\gamma S + \\kappa V $$\n烷烃分子被近似为长度为 $L = (n-1)b$ 的球顶圆柱体。用于计算表面积和体积的半径基于碳的 van der Waals 半径 $r_{\\mathrm{C}} = 1.70\\,\\text{\\AA}$ 和溶剂探针半径 $r_{\\mathrm{p}} = 1.40\\,\\text{\\AA}$ 定义：\n- 溶剂可及半径：$R_{\\mathrm{sa}} = r_{\\mathrm{C}} + r_{\\mathrm{p}} = 3.10\\,\\text{\\AA}$。\n- 溶剂排斥半径（原子的 van der Waals 半径）：$R_{\\mathrm{se}} = r_{\\mathrm{C}} = 1.70\\,\\text{\\AA}$。\n\n球顶圆柱体的面积 $S$ 和体积 $V$ 由以下公式给出：\n$$ S(n) = 2 \\pi R_{\\mathrm{sa}} L + 4 \\pi R_{\\mathrm{sa}}^2 = 2 \\pi R_{\\mathrm{sa}} (n-1)b + 4 \\pi R_{\\mathrm{sa}}^2 $$\n$$ V(n) = \\pi R_{\\mathrm{se}}^2 L + \\frac{4}{3}\\pi R_{\\mathrm{se}}^3 = \\pi R_{\\mathrm{se}}^2 (n-1)b + \\frac{4}{3}\\pi R_{\\mathrm{se}}^3 $$\n$S(n)$ 和 $V(n)$ 都是链长参数 $(n-1)$ 的线性函数。\n\n最后的任务是计算非极性能量序列 $\\{\\Delta G_{\\mathrm{np}}(n)\\}_{n=2}^{10}$ 和表面积序列 $\\{S(n)\\}_{n=2}^{10}$ 之间的 Pearson 相关系数 $r$，这需要对三组参数 $(\\gamma, \\kappa)$ 进行计算。由于 $S(n)$ 和 $V(n)$ 都是 $(n-1)$ 的线性函数，所以它们彼此之间也是线性函数。因此，对于任意选择的常数 $\\gamma$ 和 $\\kappa$，$\\Delta G_{\\mathrm{np}}(n) = \\gamma S(n) + \\kappa V(n)$ 是 $S(n)$ 的完全线性函数。\n设 $S(n) = a_S(n-1) + b_S$ 和 $V(n) = a_V(n-1) + b_V$。则 $\\Delta G_{\\mathrm{np}}(n) = (\\gamma a_S + \\kappa a_V)(n-1) + (\\gamma b_S + \\kappa b_V)$，这也是 $(n-1)$ 的一个线性函数。这意味着 $\\Delta G_{\\mathrm{np}}(n)$ 与 $S(n)$ 存在完全线性关系。对于给定的参数（$\\gamma > 0$，$\\kappa \\geq 0$），该关系的斜率为正。因此，对于所有三种情况（A、B 和 C），Pearson 相关系数必须精确为 $1.0$。问题中关于“中度扰动”和“强度扰动”情况的措辞阐明了一个关键点：在简化的球顶圆柱体模型中，体积项不会在 $\\Delta G_{\\mathrm{np}}$ 和 $S$ 之间的关系中引入任何非线性。一个更真实的、原子级别的 $S$ 和 $V$ 计算确实会显示出对完美线性的偏离。然而，我们的计算必须严格遵守指定的模型。\n\n算法如下：\n1. 对从 2 到 10 的每个整数 $n$，使用球顶圆柱体公式计算 $S(n)$ 和 $V(n)$。\n2. 对于由其 $(\\gamma, \\kappa)$ 对定义的每种情况（A、B、C），计算 $\\Delta G_{\\mathrm{np}}(n)$ 值序列。\n3. 对于每种情况，计算 $\\{\\Delta G_{\\mathrm{np}}(n)\\}$ 和 $\\{S(n)\\}$ 序列之间的 Pearson 相关系数。\n4. 报告这三个相关系数。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes solvation energies for a homologous series of linear alkanes\n    and evaluates the correlation between nonpolar energy and surface area.\n    \"\"\"\n\n    # --- Model Parameters ---\n    # Geometry and Electrostatics\n    BOND_LENGTH = 1.54  # b, in Angstrom\n    BORN_RADIUS = 2.0  # alpha, in Angstrom\n    CHARGE_END = 0.01  # q_1 and |q_n|, in elementary charge units\n    \n    # Dielectric and Energy Conversion\n    EPSILON_IN = 1.0\n    EPSILON_OUT = 78.5\n    ELEC_CONST = 332.06371  # k, in kcal/mol*A/e^2\n\n    # Nonpolar Model\n    VDW_RADIUS_C = 1.70  # r_C, in Angstrom\n    PROBE_RADIUS = 1.40  # r_p, in Angstrom\n    \n    # Test cases for nonpolar parameters (gamma, kappa)\n    # gamma in kcal/mol/A^2, kappa in kcal/mol/A^3\n    cases = [\n        (0.005, 0.000),  # Case A: Purely surface area dependent\n        (0.005, 0.001),  # Case B: Moderately volume dependent\n        (0.005, 0.003)   # Case C: Strongly volume dependent\n    ]\n\n    # --- Calculations ---\n    n_values = np.arange(2, 11)  # For alkanes from C2 to C10\n    \n    # Spherocylinder radii\n    r_sa = VDW_RADIUS_C + PROBE_RADIUS  # Solvent-accessible radius\n    r_se = VDW_RADIUS_C                # Solvent-excluded radius\n\n    s_values = []\n    v_values = []\n    # g_polar_values = [] # Not required for the final correlation calculation\n\n    for n in n_values:\n        # Cylinder length L\n        L = (n - 1) * BOND_LENGTH\n\n        # Polar energy calculation (for completeness, not used in final correlation)\n        # r_1n = L\n        # f_1n = np.sqrt(r_1n**2 + BORN_RADIUS**2 * np.exp(-r_1n**2 / (4 * BORN_RADIUS**2)))\n        # diel_prefactor = -ELEC_CONST * (1/EPSILON_IN - 1/EPSILON_OUT)\n        # delta_g_polar = 0.5 * diel_prefactor * (2 * CHARGE_END**2 * (1/BORN_RADIUS - 1/f_1n))\n        # g_polar_values.append(delta_g_polar)\n\n        # Nonpolar surface area and volume calculation\n        S = 2 * np.pi * r_sa * L + 4 * np.pi * r_sa**2\n        V = np.pi * r_se**2 * L + (4 / 3) * np.pi * r_se**3\n        s_values.append(S)\n        v_values.append(V)\n\n    s_array = np.array(s_values)\n    v_array = np.array(v_values)\n\n    results = []\n    for gamma, kappa in cases:\n        # Calculate nonpolar energy for the series\n        g_np_array = gamma * s_array + kappa * v_array\n\n        # Calculate Pearson correlation coefficient between G_np and S\n        # np.corrcoef returns a 2x2 matrix: [[corr(x,x), corr(x,y)], [corr(y,x), corr(y,y)]]\n        corr_matrix = np.corrcoef(g_np_array, s_array)\n        r = corr_matrix[0, 1]\n        results.append(r)\n\n    # --- Final Output ---\n    # Format the results as a comma-separated list in brackets\n    output_str = f\"[{','.join(map(str, results))}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2456148"}]}