{"hands_on_practices": [{"introduction": "优化建模的第一步是学习如何将实际问题转化为数学语言。经典的“饮食问题” [@problem_id:2394744] 是一个完美的起点，它教我们如何定义决策变量，构建线性目标函数和一系列线性约束，从而在满足营养需求的同时最小化成本。通过这个练习，你将掌握构建线性规划模型的核心要素和基本流程。", "problem": "您的任务是为简化的饮食规划场景构建并求解一个线性优化问题。目标是在满足能量（卡路里）、蛋白质和维生素的每日最低需求的同时，最小化每日成本。该问题的构建必须从线性优化的核心定义开始：代表消耗量的决策变量、一个用于最小化总成本的线性目标函数，以及用于强制执行最低营养需求和消耗量界限的线性不等式约束。\n\n设决策变量为 $x_1$、$x_2$ 和 $x_3$，分别代表三种可选食物的份数（非负实数）：食物1（燕麦）、食物2（鸡肉）和食物3（菠菜）。所有约束和数据都是线性的，并且所有单位都必须遵守。\n\n每份的营养和成本数据：\n- 食物1（燕麦）：能量 $200$ 千卡/份，蛋白质 $5$ 克/份，维生素 $1$ 单位/份，成本 $\\$0.50$/份，上限 $20$ 份。\n- 食物2（鸡肉）：能量 $250$ 千卡/份，蛋白质 $30$ 克/份，维生素 $0$ 单位/份，成本 $\\$2.00$/份，上限 $10$ 份。\n- 食物3（菠菜）：能量 $50$ 千卡/份，蛋白质 $4$ 克/份，维生素 $8$ 单位/份，成本 $\\$0.80$/份，上限 $10$ 份。\n\n为线性规划定义向量和矩阵：\n- 决策向量 $\\mathbf{x} = [x_1, x_2, x_3]^\\top$。\n- 成本向量 $\\mathbf{c} = [0.5, 2.0, 0.8]^\\top$（美元/份）。\n- 营养成分贡献矩阵\n$$\nA =\n\\begin{bmatrix}\n200  250  50 \\\\\n5  30  4 \\\\\n1  0  8\n\\end{bmatrix},\n$$\n其中第1行是能量（单位：千卡），第2行是蛋白质（单位：克），第3行是维生素（单位：单位）。\n- 下界 $0 \\le x_i$ 对每个 $i \\in \\{1,2,3\\}$。\n- 上界 $\\mathbf{u} = [20, 10, 10]^\\top$ 使得 $x_1 \\le 20$，$x_2 \\le 10$，$x_3 \\le 10$。\n\n对于每个测试用例，给定每日最低需求 $c_{\\min}$（能量，单位千卡）、$p_{\\min}$（蛋白质，单位克）和 $v_{\\min}$（维生素单位）。必须强制执行以下约束：\n$$\n\\begin{aligned}\n200 x_1 + 250 x_2 + 50 x_3 \\ge c_{\\min}, \\\\\n5 x_1 + 30 x_2 + 4 x_3 \\ge p_{\\min}, \\\\\nx_1 + 8 x_3 \\ge v_{\\min}, \\\\\n0 \\le x_1 \\le 20,\\quad 0 \\le x_2 \\le 10,\\quad 0 \\le x_3 \\le 10.\n\\end{aligned}\n$$\n目标是最小化每日总成本\n$$\n\\min_{\\mathbf{x} \\in \\mathbb{R}^3} \\ \\mathbf{c}^\\top \\mathbf{x} = 0.5 x_1 + 2.0 x_2 + 0.8 x_3.\n$$\n\n计算以下四个测试用例中每个用例的最优最小成本（以美元计）。将每个最小成本以美元表示，并四舍五入到小数点后两位。\n\n测试套件：\n- 情况1：$c_{\\min} = 2000$，$p_{\\min} = 70$，$v_{\\min} = 32$。\n- 情况2：$c_{\\min} = 2200$，$p_{\\min} = 90$，$v_{\\min} = 80$。\n- 情况3：$c_{\\min} = 1200$，$p_{\\min} = 25$，$v_{\\min} = 5$。\n- 情况4：$c_{\\min} = 0$，$p_{\\min} = 0$，$v_{\\min} = 0$。\n\n您的程序必须：\n- 为每种情况构建并求解线性规划。\n- 为每种情况返回以美元计的最小成本（浮点数），并四舍五入到两位小数。\n\n角度单位不适用于此问题。货币单位必须是美元，能量单位必须是千卡。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表的结果，例如 $[r_1,r_2,r_3,r_4]$，其中 $r_i$ 是情况 $i$ 的四舍五入后的最小成本。不应打印任何其他文本。对于上述测试套件，您的程序必须严格按照此格式输出一行。", "solution": "用户提供了一个需要构建并求解线性优化问题的问题陈述。我将首先验证该问题。\n\n### 第1步：提取已知条件\n- **决策变量**：$\\mathbf{x} = [x_1, x_2, x_3]^\\top$，代表食物1、食物2和食物3的份数。\n- **目标函数**：最小化总成本，$Z = 0.5 x_1 + 2.0 x_2 + 0.8 x_3$。\n- **成本向量**：$\\mathbf{c} = [0.5, 2.0, 0.8]^\\top$。\n- **营养数据矩阵**：$A = \\begin{bmatrix} 200  250  50 \\\\ 5  30  4 \\\\ 1  0  8 \\end{bmatrix}$。第1行是能量（千卡），第2行是蛋白质（克），第3行是维生素（单位）。\n- **营养约束**：\n    - $200 x_1 + 250 x_2 + 50 x_3 \\ge c_{\\min}$\n    - $5 x_1 + 30 x_2 + 4 x_3 \\ge p_{\\min}$\n    - $x_1 + 8 x_3 \\ge v_{\\min}$\n- **决策变量的界限**：\n    - $0 \\le x_1 \\le 20$\n    - $0 \\le x_2 \\le 10$\n    - $0 \\le x_3 \\le 10$\n- **测试用例**（最低需求 $[c_{\\min}, p_{\\min}, v_{\\min}]$）：\n    - 情况1：$[2000, 70, 32]$\n    - 情况2：$[2200, 90, 80]$\n    - 情况3：$[1200, 25, 5]$\n    - 情况4：$[0, 0, 0]$\n- **要求输出**：对于每种情况，以美元计的最小成本，四舍五入到两位小数，并采用特定的列表格式。\n\n### 第2步：使用提取的已知条件进行验证\n1.  **科学依据**：该问题是经典的“饮食问题”，是线性规划的教科书级应用。其公式和数据是对现实的简化，但在科学上并非不合理或基于伪科学。对于指定的食物，其营养价值和成本在合理范围内。根据此标准，该问题有效。\n2.  **适定性**：该问题被表述为一个线性规划，具有明确定义的数学结构。它由一个线性目标函数和一组线性不等式约束组成。由这些约束和非负性定义的可行域是一个凸多胞体。决策变量上附加的上限确保了该可行域是有界的。在一个非空、有界的凸多胞体上进行优化的线性函数保证存在最小值。该问题是适定的。\n3.  **客观性**：该问题以精确、客观和量化的术语指定。所有变量、常数和关系都经过了数学定义。没有主观或含糊不清的语言。根据此标准，该问题有效。\n\n### 第3步：结论与行动\n问题有效。这是一个适定的、有科学依据的、客观的线性优化问题，属于计算工程领域。我将继续进行求解。\n\n### 求解方案构建\n任务是为四组不同的约束条件求解一个线性规划（LP）问题。线性规划问题是在满足线性等式和不等式约束的条件下，优化一个线性目标函数。许多数值求解器所期望的最小化LP问题的标准形式是：\n$$\n\\begin{aligned}\n\\text{minimize} \\quad  \\mathbf{c}^\\top \\mathbf{x} \\\\\n\\text{subject to} \\quad  \\mathbf{A}_{ub} \\mathbf{x} \\le \\mathbf{b}_{ub}, \\\\\n\\quad  \\mathbf{A}_{eq} \\mathbf{x} = \\mathbf{b}_{eq}, \\\\\n\\text{and} \\quad  \\mathbf{l} \\le \\mathbf{x} \\le \\mathbf{u}\n\\end{aligned}\n$$\n这里，$\\mathbf{x}$ 是决策变量向量，$\\mathbf{c}$ 是成本向量，$\\mathbf{A}_{ub}$ 和 $\\mathbf{A}_{eq}$ 是约束矩阵，$\\mathbf{b}_{ub}$ 和 $\\mathbf{b}_{eq}$ 是约束向量，$\\mathbf{l}$ 和 $\\mathbf{u}$ 分别是 $\\mathbf{x}$ 的下界和上界。\n\n在这个具体问题中，各组成部分如下：\n1.  **决策变量**：$\\mathbf{x} = [x_1, x_2, x_3]^\\top$。\n2.  **目标函数**：目标是最小化总成本 $Z = 0.5 x_1 + 2.0 x_2 + 0.8 x_3$。这可以写成 $\\mathbf{c}^\\top \\mathbf{x}$，其中成本向量为 $\\mathbf{c} = [0.5, 2.0, 0.8]^\\top$。\n3.  **约束**：营养需求以“大于等于”不等式的形式给出：\n    $$\n    \\mathbf{A} \\mathbf{x} \\ge \\mathbf{b}_{req}\n    $$\n    其中 $\\mathbf{A} = \\begin{bmatrix} 200  250  50 \\\\ 5  30  4 \\\\ 1  0  8 \\end{bmatrix}$ 且 $\\mathbf{b}_{req} = [c_{\\min}, p_{\\min}, v_{\\min}]^\\top$。\n    为了将这些转换为标准的“小于等于”形式（$\\mathbf{A}_{ub} \\mathbf{x} \\le \\mathbf{b}_{ub}$），我们将不等式两边乘以 $-1$：\n    $$\n    -\\mathbf{A} \\mathbf{x} \\le -\\mathbf{b}_{req}\n    $$\n    因此，用于求解器的矩阵 $\\mathbf{A}_{ub}$ 和向量 $\\mathbf{b}_{ub}$ 为：\n    $$\n    \\mathbf{A}_{ub} = -\\mathbf{A} = \\begin{bmatrix} -200  -250  -50 \\\\ -5  -30  -4 \\\\ -1  0  -8 \\end{bmatrix}, \\quad \\mathbf{b}_{ub} = -\\mathbf{b}_{req} = \\begin{bmatrix} -c_{\\min} \\\\ -p_{\\min} \\\\ -v_{\\min} \\end{bmatrix}\n    $$\n    没有等式约束，因此 $\\mathbf{A}_{eq}$ 和 $\\mathbf{b}_{eq}$ 为空。\n4.  **界限**：决策变量是有界的。下界为 $l_1=l_2=l_3=0$。上界为 $u_1=20$、$u_2=10$ 和 $u_3=10$。这可以表示为每个变量的一组界限：$0 \\le x_1 \\le 20$，$0 \\le x_2 \\le 10$，$0 \\le x_3 \\le 10$。\n\n对于四个测试用例中的每一个，我们使用给定的 $c_{\\min}$、$p_{\\min}$ 和 $v_{\\min}$ 值构建向量 $\\mathbf{b}_{ub}$。然后，我们使用一个数值LP求解器，例如 `scipy.optimize.linprog` 中可用的 `'highs'` 方法，来找到最优解向量 $\\mathbf{x}^*$。最小成本随后计算为 $\\mathbf{c}^\\top \\mathbf{x}^*$。对所有四个用例重复此过程。最终结果按要求四舍五入到两位小数。\n\n对于琐碎情况，即案例4，其中所有最低需求均为零，约束条件为 $200x_1 + 250x_2 + 50x_3 \\ge 0$ 等。由于所有 $x_i$ 都必须为非负数，并且营养矩阵 $\\mathbf{A}$ 中的所有系数也为非负数，因此任何非负的 $\\mathbf{x}$ 都能满足这些约束。为了最小化成本函数 $0.5x_1 + 2.0x_2 + 0.8x_3$，其中所有成本均为正数，最优解是将所有变量设置为其可能的最低值，即 $x_1=0$、$x_2=0$、$x_3=0$。因此，最小成本为 $0$。这可作为对该方法论的逻辑检验。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Formulates and solves a series of diet optimization linear programs.\n\n    The problem is to minimize the cost of a diet subject to nutritional\n    and consumption constraints. The problem is cast into the standard\n    form for a linear program and solved using scipy.optimize.linprog.\n    \"\"\"\n\n    # Define the fixed parameters of the linear program.\n    # Cost vector c for the objective function c^T * x.\n    # x = [x1, x2, x3] represents servings of Oats, Chicken, Spinach.\n    c_vec = np.array([0.5, 2.0, 0.8])\n\n    # Nutrient matrix A. Rows: energy, protein, vitamins.\n    # The constraints are A @ x >= b_req.\n    # linprog expects A_ub @ x = b_ub, so we use A_ub = -A.\n    A_mat = np.array([\n        [200, 250, 50],   # Energy (kcal)\n        [5, 30, 4],     # Protein (g)\n        [1, 0, 8]       # Vitamins (units)\n    ])\n    A_ub_mat = -A_mat\n\n    # Bounds for each decision variable x_i.\n    # 0 = x1 = 20 (Oats)\n    # 0 = x2 = 10 (Chicken)\n    # 0 = x3 = 10 (Spinach)\n    bounds_list = [(0, 20), (0, 10), (0, 10)]\n\n    # Test suite: each case is a tuple of (c_min, p_min, v_min).\n    test_cases = [\n        (2000, 70, 32),\n        (2200, 90, 80),\n        (1200, 25, 5),\n        (0, 0, 0)\n    ]\n\n    results = []\n    for case in test_cases:\n        c_min, p_min, v_min = case\n\n        # b_req vector for the nutritional requirements.\n        b_req_vec = np.array([c_min, p_min, v_min])\n        # Convert to b_ub for the solver, b_ub = -b_req.\n        b_ub_vec = -b_req_vec\n\n        # Solve the linear program.\n        # The 'highs' method is robust and is the default in recent SciPy.\n        res = linprog(c=c_vec,\n                      A_ub=A_ub_mat,\n                      b_ub=b_ub_vec,\n                      bounds=bounds_list,\n                      method='highs')\n\n        # The minimal cost is the optimal value of the objective function.\n        if res.success:\n            minimal_cost = res.fun\n        else:\n            # In a real scenario, one must handle infeasible or unbounded cases.\n            # For this problem, solutions are guaranteed to exist.\n            minimal_cost = np.nan\n\n        # Round the result to two decimal places as required.\n        rounded_cost = round(minimal_cost, 2)\n        results.append(rounded_cost)\n\n    # Print the results in the specified single-line format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2394744"}, {"introduction": "现实世界中的许多问题，如生产调度或资源分配，都涉及“非此即彼”的决策。本练习 [@problem_id:3130557] 将带你进入混合整数线性规划（MILP）的世界，学习如何使用二元变量和“大M法”来处理排他性约束。你将为一个排课问题建模，目标是最小化总延迟时间，这是一个在运筹学中具有广泛应用的典型问题。", "problem": "一个部门需要在一个早上的规划期内，将 $3$ 场研讨会安排到一间报告厅。每场研讨会 $i \\in \\{1,2,3\\}$ 都需要不间断地使用报告厅，其已知的持续时间为 $p_i$ （分钟）。每场研讨会 $i$ 还有一个期望的完成时间（截止日期）$d_i$ （从规划期开始计算，单位为分钟）。如果研讨会 $i$ 在时间 $C_i$ 完成，其延迟时间定义为 $T_i = \\max\\{0, C_i - d_i\\}$。在任何时候，报告厅只能由一场研讨会占用。\n\n数据：\n- 研讨会 $1$：持续时间 $p_1 = 50$，截止日期 $d_1 = 70$。\n- 研讨会 $2$：持续时间 $p_2 = 60$，截止日期 $d_2 = 120$。\n- 研讨会 $3$：持续时间 $p_3 = 40$，截止日期 $d_3 = 100$。\n\n假设最早开始时间为 $0$，并且存在一个足够大的有限规划期，可以按顺序安排所有研讨会。不允许抢占。\n\n任务：\n- 将此问题构建为一个混合整数线性规划 (MILP) 模型，通过选择研讨会的开始时间和顺序来最小化总延迟时间 $\\sum_{i=1}^{3} T_i$。使用大M方法或时间索引二进制变量，通过线性化来为非重叠（析取）约束建模。仔细定义所有决策变量、约束和目标，如果使用大M方法，请指定一个有效的有限时间范围和一个有效的大M值。\n- 然后，根据给定数据确定可实现的最小总延迟时间值。\n\n将最终的总延迟时间以分钟为单位表示为一个精确整数（不要四舍五入）。在最终的方框答案中不要包含任何单位。", "solution": "首先对问题陈述进行验证过程。\n\n**步骤 1：提取已知信息**\n- 研讨会数量，$N = 3$。\n- 研讨会持续时间：$p_1 = 50$ 分钟，$p_2 = 60$ 分钟，$p_3 = 40$ 分钟。\n- 研讨会截止日期：$d_1 = 70$ 分钟，$d_2 = 120$ 分钟，$d_3 = 100$ 分钟。\n- 规划从时间 $t=0$ 开始。\n- 研讨会是不可抢占的。\n- 一次只能安排一场研讨会。\n- 研讨会 $i$ 的延迟时间：$T_i = \\max\\{0, C_i - d_i\\}$，其中 $C_i$ 是完成时间。\n- 目标：最小化总延迟时间，$\\sum_{i=1}^{3} T_i$。\n- 任务：构建一个混合整数线性规划 (MILP) 模型，并确定可实现的最小总延迟时间。\n\n**步骤 2：使用提取的已知信息进行验证**\n该问题是一个经典的单机调度问题，在标准三字段表示法中记为 $1||\\sum T_i$。这是运筹学中一个成熟的问题。\n- **科学依据：** 该问题坚实地基于整数规划和调度理论的原理。它是一个标准的、科学上合理的问题。\n- **适定性：** 所有必要的数据（$p_i, d_i$）都已提供。目标函数和约束条件定义清晰。保证存在一个唯一的最优目标函数值。\n- **客观性：** 问题以精确、明确、客观的语言陈述。\n\n该问题没有任何无效性缺陷。它在科学上是合理的、适定的、完全指定的，并且其解决方案是可验证的。\n\n**步骤 3：结论与行动**\n问题有效。将制定解决方案。\n\n按照要求，问题分两部分解决：首先，构建混合整数线性规划 (MILP) 模型；其次，根据给定数据确定最优调度和最小总延迟时间。\n\n**第 1 部分：MILP 模型构建**\n\n设 $I = \\{1, 2, 3\\}$ 为研讨会集合。\n\n**决策变量：**\n- $S_i$：一个连续的非负变量，表示研讨会 $i \\in I$ 的开始时间。\n- $C_i$：一个连续的非负变量，表示研讨会 $i \\in I$ 的完成时间。\n- $T_i$：一个连续的非负变量，表示研讨会 $i \\in I$ 的延迟时间。\n- $x_{ij}$：对于每对 $(i, j) \\in I \\times I$ 且 $i  j$，这是一个二进制变量。如果研讨会 $i$ 在研讨会 $j$ 开始前完成，则 $x_{ij}=1$；如果研讨会 $j$ 在研讨会 $i$ 开始前完成，则 $x_{ij}=0$。\n\n**目标函数：**\n目标是最小化所有研讨会的延迟时间之和。\n$$ \\min \\sum_{i \\in I} T_i $$\n\n**约束条件：**\n1.  **完成时间：** 研讨会的完成时间是其开始时间加上其持续时间。不允许抢占。\n    $$ C_i = S_i + p_i \\quad \\forall i \\in I $$\n\n2.  **延迟时间定义：** 延迟时间 $T_i$ 定义为 $\\max\\{0, C_i - d_i\\}$。在一个最小化问题中，这个非线性函数可以通过以下两个不等式进行线性化。目标函数将驱动 $T_i$ 达到其可能的最小值，即 $\\max\\{0, C_i - d_i\\}$。\n    $$ T_i \\ge C_i - d_i \\quad \\forall i \\in I $$\n    $$ T_i \\ge 0 \\quad \\forall i \\in I $$\n\n3.  **析取（非重叠）约束：** 对于任意两个不同的研讨会 $i$ 和 $j$，其中一个必须在另一个开始之前完成。这表示为一个析取式：$(C_i \\le S_j) \\lor (C_j \\le S_i)$。使用二进制变量 $x_{ij}$ 和大M方法，对于每对 $i  j$ 的 $(i, j)$，这可以被构建为一对线性不等式。\n    $$ C_i \\le S_j + M(1-x_{ij}) \\quad \\forall (i, j) \\in I \\times I, i  j $$\n    $$ C_j \\le S_i + M x_{ij} \\quad \\forall (i, j) \\in I \\times I, i  j $$\n    这里，$M$ 是一个足够大的正常数。一个有效的 $M$ 值是大于任何可能的完成时间与开始时间之差的值。所有研讨会的总持续时间为任何单个完成时间提供了一个安全的上界。设 $H = \\sum_{k \\in I} p_k = 50 + 60 + 40 = 150$。一个有效的选择是 $M = H = 150$。\n\n4.  **变量定义域：**\n    $$ S_i \\ge 0, C_i \\ge 0, T_i \\ge 0 \\quad \\forall i \\in I $$\n    $$ x_{ij} \\in \\{0, 1\\} \\quad \\forall (i, j) \\in I \\times I, i  j $$\n\n**第 2 部分：确定最小总延迟时间**\n对于少量研讨会（$N=3$），该问题可以通过枚举所有可能的序列来解决。共有 $3! = 6$ 种可能的排列。\n由于目标是最小化延迟时间，因此在研讨会之间插入空闲时间没有好处。因此，一个序列中的所有研讨会都从时间 $t=0$ 开始，一个接一个地安排。\n\n数据为：$p_1 = 50, d_1 = 70$；$p_2 = 60, d_2 = 120$；$p_3 = 40, d_3 = 100$。\n\n评估六种可能的序列：\n\n1.  **序列 (1, 2, 3)：**\n    - 研讨会 1：$S_1 = 0$, $C_1 = 0 + 50 = 50$。$T_1 = \\max\\{0, 50 - 70\\} = 0$。\n    - 研讨会 2：$S_2 = 50$, $C_2 = 50 + 60 = 110$。$T_2 = \\max\\{0, 110 - 120\\} = 0$。\n    - 研讨会 3：$S_3 = 110$, $C_3 = 110 + 40 = 150$。$T_3 = \\max\\{0, 150 - 100\\} = 50$。\n    - 总延迟时间 $\\sum T_i = 0 + 0 + 50 = 50$。\n\n2.  **序列 (1, 3, 2)：**\n    - 研讨会 1: $S_1 = 0$, $C_1 = 0 + 50 = 50$。$T_1 = \\max\\{0, 50 - 70\\} = 0$。\n    - 研讨会 3: $S_3 = 50$, $C_3 = 50 + 40 = 90$。$T_3 = \\max\\{0, 90 - 100\\} = 0$。\n    - 研讨会 2: $S_2 = 90$, $C_2 = 90 + 60 = 150$。$T_2 = \\max\\{0, 150 - 120\\} = 30$。\n    - 总延迟时间 $\\sum T_i = 0 + 0 + 30 = 30$。\n\n3.  **序列 (2, 1, 3)：**\n    - 研讨会 2: $S_2 = 0$, $C_2 = 0 + 60 = 60$。$T_2 = \\max\\{0, 60 - 120\\} = 0$。\n    - 研讨会 1: $S_1 = 60$, $C_1 = 60 + 50 = 110$。$T_1 = \\max\\{0, 110 - 70\\} = 40$。\n    - 研讨会 3: $S_3 = 110$, $C_3 = 110 + 40 = 150$。$T_3 = \\max\\{0, 150 - 100\\} = 50$。\n    - 总延迟时间 $\\sum T_i = 0 + 40 + 50 = 90$。\n\n4.  **序列 (2, 3, 1)：**\n    - 研讨会 2: $S_2 = 0$, $C_2 = 0 + 60 = 60$。$T_2 = \\max\\{0, 60 - 120\\} = 0$。\n    - 研讨会 3: $S_3 = 60$, $C_3 = 60 + 40 = 100$。$T_3 = \\max\\{0, 100 - 100\\} = 0$。\n    - 研讨会 1: $S_1 = 100$, $C_1 = 100 + 50 = 150$。$T_1 = \\max\\{0, 150 - 70\\} = 80$。\n    - 总延迟时间 $\\sum T_i = 0 + 0 + 80 = 80$。\n\n5.  **序列 (3, 1, 2)：**\n    - 研讨会 3: $S_3 = 0$, $C_3 = 0 + 40 = 40$。$T_3 = \\max\\{0, 40 - 100\\} = 0$。\n    - 研讨会 1: $S_1 = 40$, $C_1 = 40 + 50 = 90$。$T_1 = \\max\\{0, 90 - 70\\} = 20$。\n    - 研讨会 2: $S_2 = 90$, $C_2 = 90 + 60 = 150$。$T_2 = \\max\\{0, 150 - 120\\} = 30$。\n    - 总延迟时间 $\\sum T_i = 0 + 20 + 30 = 50$。\n\n6.  **序列 (3, 2, 1)：**\n    - 研讨会 3: $S_3 = 0$, $C_3 = 0 + 40 = 40$。$T_3 = \\max\\{0, 40 - 100\\} = 0$。\n    - 研讨会 2: $S_2 = 40$, $C_2 = 40 + 60 = 100$。$T_2 = \\max\\{0, 100 - 120\\} = 0$。\n    - 研讨会 1: $S_1 = 100$, $C_1 = 100 + 50 = 150$。$T_1 = \\max\\{0, 150 - 70\\} = 80$。\n    - 总延迟时间 $\\sum T_i = 0 + 0 + 80 = 80$。\n\n通过比较所有可能序列的总延迟时间：\n- 序列 (1, 2, 3)：总延迟时间 = $50$\n- 序列 (1, 3, 2)：总延迟时间 = $30$\n- 序列 (2, 1, 3)：总延迟时间 = $90$\n- 序列 (2, 3, 1)：总延迟时间 = $80$\n- 序列 (3, 1, 2)：总延迟时间 = $50$\n- 序列 (3, 2, 1)：总延迟时间 = $80$\n\n最小值为 $30$，通过序列 (1, 3, 2) 实现。", "answer": "$$\n\\boxed{30}\n$$", "id": "3130557"}, {"introduction": "除了逻辑约束，优化建模还经常需要处理非线性的成本结构，例如随数量变化的阶梯式定价。这个货运选择问题 [@problem_id:2394810] 演示了如何利用整数变量，将这种不连续的成本函数巧妙地转化为标准的混合整数线性规划形式。掌握这种建模技巧将使你能够解决更广泛、更贴近商业实践的优化问题。", "problem": "一位计算工程师必须选择一家承运商来运输一个已知质量的易碎部件。该物品的重量为 $w_0 = 2.35$ 公斤。现有三家承运商可供选择，每家都有基础费用和按每公斤（不足一公斤按一公斤计算）计费的收费，这在重量阈值处产生了不连续的成本。成本函数如下：\n- 承运商 $A$：$C_A(w) = 10 + 5 \\max\\{0, \\lceil w - 1 \\rceil\\}$，\n- 承运商 $B$：$C_B(w) = 7 + 6 \\lceil w \\rceil$，\n- 承运商 $C$：$C_C(w) = 14 + 4 \\max\\{0, \\lceil w - 2 \\rceil\\}$，\n其中 $\\lceil \\cdot \\rceil$ 表示向上取整函数，参数 $w$ 的单位是公斤。\n\n必须选择且仅选择一家承运商，以最小化运输给定重量 $w_0$ 物品的成本。以下哪项是对此选择问题的正确混合整数线性规划（MILP）建模，能够捕捉在给定重量 $w_0$ 下所述阈值处的不连续收费？\n\nA. 引入二进制变量 $y_A, y_B, y_C \\in \\{0,1\\}$ 且 $y_A + y_B + y_C = 1$ 表示选择的承运商，以及整数变量 $z_A, z_B, z_C \\in \\mathbb{Z}_+$ 表示超出承运商特定阈值的计费公斤数。令 $M = \\lceil w_0 \\rceil$。求解\n$$\n\\min\\; 10\\,y_A + 5\\,z_A \\;+\\; 7\\,y_B + 6\\,z_B \\;+\\; 14\\,y_C + 4\\,z_C\n$$\n约束条件为\n$$\ny_A + y_B + y_C = 1,\n$$\n$$\nz_A \\ge w_0 - 1 - M(1 - y_A),\\quad 0 \\le z_A \\le M y_A,\n$$\n$$\nz_B \\ge w_0 - 0 - M(1 - y_B),\\quad 0 \\le z_B \\le M y_B,\n$$\n$$\nz_C \\ge w_0 - 2 - M(1 - y_C),\\quad 0 \\le z_C \\le M y_C,\n$$\n$$\ny_A,y_B,y_C \\in \\{0,1\\},\\quad z_A,z_B,z_C \\in \\mathbb{Z}_+.\n$$\n\nB. 引入二进制变量 $y_A, y_B, y_C \\in \\{0,1\\}$ 且 $y_A + y_B + y_C = 1$ 和整数变量 $z_A, z_B, z_C \\in \\mathbb{Z}_+$。求解\n$$\n\\min\\; 10\\,y_A + 5\\,z_A \\;+\\; 7\\,y_B + 6\\,z_B \\;+\\; 14\\,y_C + 4\\,z_C\n$$\n约束条件为\n$$\ny_A + y_B + y_C = 1,\n$$\n$$\nz_A \\ge w_0 - 1,\\quad z_B \\ge w_0,\\quad z_C \\ge w_0 - 2,\n$$\n$$\nz_A,z_B,z_C \\in \\mathbb{Z}_+,\\quad y_A,y_B,y_C \\in \\{0,1\\}.\n$$\n\nC. 引入一个单一整数变量 $z \\in \\mathbb{Z}_+$ 代表计费公斤数和二进制变量 $y_A, y_B, y_C \\in \\{0,1\\}$ 且 $y_A + y_B + y_C = 1$。求解\n$$\n\\min\\; 10\\,y_A + 7\\,y_B + 14\\,y_C \\;+\\; 5\\,z\n$$\n约束条件为\n$$\nz \\ge w_0 - 1\\,y_A,\\quad z \\ge w_0 - 0\\,y_B,\\quad z \\ge w_0 - 2\\,y_C,\n$$\n$$\ny_A + y_B + y_C = 1,\\quad z \\in \\mathbb{Z}_+,\\quad y_A,y_B,y_C \\in \\{0,1\\}.\n$$\n\nD. 引入二进制变量 $y_A, y_B, y_C \\in \\{0,1\\}$ 且 $y_A + y_B + y_C = 1$ 和连续变量 $z_A, z_B, z_C \\ge 0$。求解\n$$\n\\min\\; 10\\,y_A + 5\\,y_A z_A \\;+\\; 7\\,y_B + 6\\,y_B z_B \\;+\\; 14\\,y_C + 4\\,y_C z_C\n$$\n约束条件为\n$$\ny_A + y_B + y_C = 1,\\quad z_A \\ge w_0 - 1,\\quad z_B \\ge w_0,\\quad z_C \\ge w_0 - 2,\n$$\n$$\ny_A,y_B,y_C \\in \\{0,1\\},\\quad z_A,z_B,z_C \\ge 0.\n$$", "solution": "对问题陈述进行验证。\n\n**步骤1：提取给定信息**\n- 部件重量：$w_0 = 2.35$ 公斤。\n- 承运商数量：$3$。\n- 承运商A的成本函数：$C_A(w) = 10 + 5 \\max\\{0, \\lceil w - 1 \\rceil\\}$。\n- 承运商B的成本函数：$C_B(w) = 7 + 6 \\lceil w \\rceil$。\n- 承运商C的成本函数：$C_C(w) = 14 + 4 \\max\\{0, \\lceil w - 2 \\rceil\\}$。\n- 符号说明：$\\lceil \\cdot \\rceil$ 是向上取整函数。\n- 目标：选择且仅选择一家承运商，以最小化重量为 $w_0$ 的运输成本。\n- 任务：确定正确的混合整数线性规划（MILP）建模。\n\n**步骤2：使用提取的信息进行验证**\n- **科学依据**：该问题是计算工程和运筹学中的一个标准优化问题。成本函数使用了已有的数学函数（$\\max$，向上取整函数）。该问题在科学上是合理的。\n- **适定性**：该问题定义了一个明确的目标（最小化成本），并受限于明确定义的约束（选择一家承运商，给定的成本函数）。存在唯一的最小成本。任务是找到一个正确的建模，这是优化中的一个标准问题。\n- **客观性**：该问题使用精确的数学语言陈述，没有歧义或主观内容。\n- **结论**：问题陈述是自洽、一致且逻辑合理的。它不违反任何有效性标准。\n\n**判决**\n该问题有效。我们可以继续进行求解。\n\n**正确建模的推导**\n目标是建立一个混合整数线性规划（MILP）来从三个选项中选择一个，其中每个选项相关的成本是包含向上取整算子的不连续函数。\n\n设 $y_A, y_B, y_C$ 为二进制变量，如果选择了承运商 $i$，则 $y_i=1$，否则 $y_i=0$。由于必须且仅选择一家承运商，我们有以下约束：\n$$y_A + y_B + y_C = 1, \\quad y_A, y_B, y_C \\in \\{0, 1\\}$$\n\n目标是最小化总成本，即每个承运商的成本之和，由二进制选择变量加权。一个朴素的目标函数将是 $y_A C_A(w_0) + y_B C_B(w_0) + y_C C_C(w_0)$。由于变量的乘积和非线性成本函数，这是非线性的。我们必须将其线性化。\n\n总成本可以表示为基础费用和可变的、与重量相关的部分之和。目标函数是：\n$$\\min \\left( 10y_A + 7y_B + 14y_C \\right) + \\text{可变成本}$$\n\n可变成本取决于向上取整函数 $\\lceil x \\rceil$。在最小化问题中，值 $z = \\lceil x \\rceil$ 可以通过引入一个整数变量 $z$ 和约束 $z \\ge x$ 来建模。由于目标函数会向下推动 $z$，它将取满足约束的最小整数值，这恰好是 $\\lceil x \\rceil$。\n\n让我们定义整数变量 $z_A, z_B, z_C \\in \\mathbb{Z}_+$ 来表示成本的不连续部分。\n- **对于承运商 A**：可变成本是 $5 \\max\\{0, \\lceil w_0 - 1 \\rceil\\}$。我们引入一个整数变量 $z_A \\in \\mathbb{Z}_+$。对于最小化问题，表达式 $\\max\\{0, \\lceil w_0-1 \\rceil\\}$ 可以通过约束 $z_A \\ge w_0 - 1$ 和 $z_A \\ge 0$ 正确地建模。由于 $z_A$ 被定义为非负整数（$\\mathbb{Z}_+$），第二个约束是隐式的。因此，我们需要 $z_A \\ge w_0 - 1$。\n- **对于承运商 B**：可变成本是 $6 \\lceil w_0 \\rceil$。我们引入一个整数变量 $z_B \\in \\mathbb{Z}_+$ 和约束 $z_B \\ge w_0$。\n- **对于承运商 C**：可变成本是 $4 \\max\\{0, \\lceil w_0 - 2 \\rceil\\}$。我们引入一个整数变量 $z_C \\in \\mathbb{Z}_+$ 和约束 $z_C \\ge w_0 - 2$。\n\n关键是这些成本只应在选择相应承运商时才适用。如果 $y_i = 0$，相应的可变成本必须为零。这需要将整数变量 $z_i$ 与二进制变量 $y_i$ 联系起来。\n\n让我们定义新的变量来表示成本贡献。目标函数变为：\n$$\\min 10y_A + 5z_A^* + 7y_B + 6z_B^* + 14y_C + 4z_C^*$$\n其中 $z_i^*$ 是承运商 $i$ 的有效整数乘数。如果 $y_i=1$，则 $z_i^*$ 必须等于我们之前定义的 $z_i$；如果 $y_i=0$，则 $z_i^*$ 必须为 $0$。这等效于建模 $z_i^* = z_i y_i$。这个乘积可以使用大M方法进行线性化。\n\n让我们直接对 $z_A, z_B, z_C$ 的条件进行建模：\n1. 如果 $y_i = 0$，则 $z_i = 0$。\n2. 如果 $y_i = 1$，则 $z_i$ 必须满足其下界约束（$z_A \\ge w_0-1$ 等）。\n\n这两个条件可以使用大M约束来组合。\n- 为了在 $y_i=0$ 时强制 $z_i=0$，我们添加约束 $z_i \\le M y_i$，其中 $M$ 是一个足够大的常数。如果 $y_i=0$，这将强制 $z_i \\le 0$，并且由于 $z_i \\in \\mathbb{Z}_+$，我们必须有 $z_i=0$。如果 $y_i=1$，我们得到 $z_i \\le M$，它作为一个上界。\n- 为了仅在 $y_i=1$ 时强制执行下界，我们写为 $z_i \\ge (\\text{表达式}) - M(1 - y_i)$。如果 $y_i=1$，这变成 $z_i \\ge (\\text{表达式})$。如果 $y_i=0$，这变成 $z_i \\ge (\\text{表达式}) - M$，这必须是一个非约束性约束（即，小于或等于 $0$，因为 $z_i$ 将为 $0$）。\n\n让我们将此应用于我们的问题，其中 $w_0 = 2.35$。\n需要一个关于 $z_i$ 值的有效上界 $M$。\n$z_A^{\\text{实际值}} = \\max\\{0, \\lceil 2.35-1 \\rceil\\} = \\lceil 1.35 \\rceil = 2$。\n$z_B^{\\text{实际值}} = \\lceil 2.35 \\rceil = 3$。\n$z_C^{\\text{实际值}} = \\max\\{0, \\lceil 2.35-2 \\rceil\\} = \\lceil 0.35 \\rceil = 1$。\n这些值的最大值为3。所以，$M = \\lceil w_0 \\rceil = 3$ 是一个有效（且紧凑）的上界。\n\n每个承运商的约束是：\n- **承运商 A**：\n  $z_A \\ge w_0 - 1 - M(1-y_A)$\n  $z_A \\le M y_A$\n- **承运商 B**：\n  $z_B \\ge w_0 - M(1-y_B)$\n  $z_B \\le M y_B$\n- **承运商 C**：\n  $z_C \\ge w_0 - 2 - M(1-y_C)$\n  $z_C \\le M y_C$\n\n综合所有内容，完整的MILP建模是：\n$$\n\\min\\; 10\\,y_A + 5\\,z_A \\;+\\; 7\\,y_B + 6\\,z_B \\;+\\; 14\\,y_C + 4\\,z_C\n$$\n约束条件为：\n$$\ny_A + y_B + y_C = 1,\n$$\n$$\nz_A \\ge w_0 - 1 - M(1 - y_A),\\quad 0 \\le z_A \\le M y_A,\n$$\n$$\nz_B \\ge w_0 - M(1 - y_B),\\quad 0 \\le z_B \\le M y_B,\n$$\n$$\nz_C \\ge w_0 - 2 - M(1 - y_C),\\quad 0 \\le z_C \\le M y_C,\n$$\n$$\ny_A,y_B,y_C \\in \\{0,1\\},\\quad z_A,z_B,z_C \\in \\mathbb{Z}_+.\n$$\n这里，$w_0=2.35$ 且一个有效的 $M$ 是 $3$。\n\n**逐个选项分析**\n\n**A.** 给定的建模是：\n$$\n\\min\\; 10\\,y_A + 5\\,z_A \\;+\\; 7\\,y_B + 6\\,z_B \\;+\\; 14\\,y_C + 4\\,z_C\n$$\n约束条件为\n$$\ny_A + y_B + y_C = 1,\n$$\n$$\nz_A \\ge w_0 - 1 - M(1 - y_A),\\quad 0 \\le z_A \\le M y_A,\n$$\n$$\nz_B \\ge w_0 - 0 - M(1 - y_B),\\quad 0 \\le z_B \\le M y_B,\n$$\n$$\nz_C \\ge w_0 - 2 - M(1 - y_C),\\quad 0 \\le z_C \\le M y_C,\n$$\n$$\ny_A,y_B,y_C \\in \\{0,1\\},\\quad z_A,z_B,z_C \\in \\mathbb{Z}_+.\n$$\n其中 $M = \\lceil w_0 \\rceil = 3$。这与我们推导出的建模完全匹配。它正确地使用二进制变量进行选择，使用整数变量表示向上取整函数的值，并使用大M方法创建指示性约束，根据选择激活/停用成本。$z_B$ 的下界写为 $w_0-0$，这显然就是 $w_0$。\n判决：**正确**。\n\n**B.** 这个建模是：\n$$\n\\min\\; 10\\,y_A + 5\\,z_A \\;+\\; 7\\,y_B + 6\\,z_B \\;+\\; 14\\,y_C + 4\\,z_C\n$$\n约束条件为\n$$\ny_A + y_B + y_C = 1,\n$$\n$$\nz_A \\ge w_0 - 1,\\quad z_B \\ge w_0,\\quad z_C \\ge w_0 - 2,\n$$\n$$\nz_A,z_B,z_C \\in \\mathbb{Z}_+,\\quad y_A,y_B,y_C \\in \\{0,1\\}.\n$$\n在这个建模中，整数变量 $z_A, z_B, z_C$ 没有与二进制选择变量 $y_A, y_B, y_C$ 关联。对 $z_i$ 的约束总是激活的，无论选择哪个承运商。优化过程将找到最小整数值 $z_A=2, z_B=3, z_C=1$ 并将它们相关的成本（$5z_A+6z_B+4z_C$）加到总目标函数中，此外还有所选承运商的基础费用。这是不正确的，因为未选择的承运商的成本不应被包括在内。\n判决：**不正确**。\n\n**C.** 这个建模引入了一个单一的整数变量 $z$：\n$$\n\\min\\; 10\\,y_A + 7\\,y_B + 14\\,y_C \\;+\\; 5\\,z\n$$\n约束条件为\n$$\nz \\ge w_0 - 1\\,y_A,\\quad z \\ge w_0 - 0\\,y_B,\\quad z \\ge w_0 - 2\\,y_C,\n$$\n这个建模在多个方面存在根本性缺陷。首先，它假设只有一个值为5的可变成本乘数，这只对应承运商A。承运商B和C的乘数分别是6和4。其次，一个单一的整数变量 $z$ 不能同时表示三个不同的量 $(\\max\\{0, \\lceil w_0-1 \\rceil\\}, \\lceil w_0 \\rceil, \\max\\{0, \\lceil w_0-2 \\rceil\\})$。第三，形如 $z \\ge w_0 - k \\cdot y_i$ 的约束是无意义的，并没有正确地为指示性约束建模。例如，如果 $y_B=1$，约束变为 $z \\ge w_0$, $z \\ge w_0$, $z \\ge w_0$，强制 $z=3$。成本将是 $7+5(3)=22$，而正确的成本是 $7+6(3)=25$。\n判决：**不正确**。\n\n**D.** 这个建模在目标函数中使用了非线性项：\n$$\n\\min\\; 10\\,y_A + 5\\,y_A z_A \\;+\\; 7\\,y_B + 6\\,y_B z_B \\;+\\; 14\\,y_C + 4\\,y_C z_C\n$$\n问题明确要求一个混合整数*线性*规划（MILP）建模。一个带有变量乘积（例如，$y_A z_A$）的目标函数是非线性的（特别是，二次的）。因此，这不是一个MILP建模。此外，它将 $z_A, z_B, z_C$ 定义为连续变量，这不能为向上取整函数建模。对一个连续变量 $z_i \\ge x$ 进行最小化将得到 $z_i=x$，而不是 $z_i=\\lceil x \\rceil$。\n判决：**不正确**。", "answer": "$$\\boxed{A}$$", "id": "2394810"}]}