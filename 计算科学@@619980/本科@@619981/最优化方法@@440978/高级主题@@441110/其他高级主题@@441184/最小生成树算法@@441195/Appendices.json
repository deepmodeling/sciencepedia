{"hands_on_practices": [{"introduction": "理论学习之后，最好的巩固方式莫过于实践。本节将通过三个难度递进的练习，帮助你深化对最小生成树算法的理解。第一个练习旨在辨析两种核心算法的本质区别。虽然 Kruskal 算法和 Prim 算法都能保证找到最小生成树，但它们的“思考”方式截然不同。通过这个思想实验[@problem_id:3151259]，你将直观地感受到 Kruskal 算法的“全局最优”策略与 Prim 算法的“局部增长”策略之间的根本差异。", "problem": "考虑一个具有 $n=5$ 个横档的梯形图，其构造如下。顶轨上有顶点 $\\{t_1,t_2,t_3,t_4,t_5\\}$，底轨上有顶点 $\\{b_1,b_2,b_3,b_4,b_5\\}$。对于每个 $i \\in \\{1,2,3,4\\}$，有轨道边 $(t_i,t_{i+1})$ 和 $(b_i,b_{i+1})$；对于每个 $i \\in \\{1,2,3,4,5\\}$，有横档边 $(t_i,b_i)$。边的权重分配如下：\n- 每条轨道边的权重为 $3$。\n- 如果 $i$ 是奇数，横档边 $(t_i,b_i)$ 的权重为 $1$；如果 $i$ 是偶数，权重为 $10$。\n\n假设所有边都是无向的，并且权重严格按照给定值。你将在此图上运行 Kruskal 算法和 Prim 算法。对于 Prim 算法，起始顶点是 $t_1$。当出现权重相等的边时，平局被任意打破，但没有两个不同权重值会相等。\n\n仅使用最小生成树的基本性质，选择所有关于这些算法最早选择的边必须为真的陈述。\n\nA. 在 Kruskal 算法下，最先接受的边恰好是第 $1$、$3$ 和 $5$ 列的三条轻横档（即 $(t_1,b_1)$, $(t_3,b_3)$, $(t_5,b_5)$），顺序不限，并且这些边都在任何轨道边之前被选择。\n\nB. 在从 $t_1$ 开始的 Prim 算法下，选择的第一条边是轻横档 $(t_1,b_1)$，第二条边必须是权重为 $3$ 的轨道边（而不是任何横档）。\n\nC. 在从 $t_1$ 开始的 Prim 算法下，第二条边可以是轻横档 $(t_3,b_3)$，因为它的权重比轨道边小。\n\nD. 尽管两种算法都生成最小生成树，但 Prim 算法和 Kruskal 算法的早期选择可能不同：Kruskal 算法的全局排序选择会首先选取所有轻横档，而 Prim 算法的选择受限于当前的切割，并可能根据起点交错选择轨道边和横档。", "solution": "用户提供了一个关于在特定加权图上执行 Kruskal 算法和 Prim 算法的问题。\n\n### 问题验证\n\n**步骤 1：提取已知条件**\n\n*   **图类型**：一个具有 $n=5$ 个横档的梯形图。\n*   **顶点集**：$V = \\{t_1, t_2, t_3, t_4, t_5\\} \\cup \\{b_1, b_2, b_3, b_4, b_5\\}$。顶点总数为 $|V|=10$。\n*   **边集和权重**：\n    *   顶轨边：对于 $i \\in \\{1,2,3,4\\}$，$(t_i, t_{i+1})$ 的权重为 $3$。\n    *   底轨边：对于 $i \\in \\{1,2,3,4\\}$，$(b_i, b_{i+1})$ 的权重为 $3$。\n    *   横档边：对于 $i \\in \\{1,2,3,4,5\\}$，$(t_i, b_i)$。\n        *   如果 $i$ 是奇数（$i \\in \\{1,3,5\\}$），$(t_i, b_i)$ 的权重为 $1$。\n        *   如果 $i$ 是偶数（$i \\in \\{2,4\\}$），$(t_i, b_i)$ 的权重为 $10$。\n*   **边属性**：所有边都是无向的。\n*   **算法**：Kruskal 算法和 Prim 算法。\n*   **Prim 算法起始顶点**：$t_1$。\n*   **平局打破规则**：权重相等的边之间的平局任意打破。陈述“没有两个不同权重值会相等”是同义反复；不同的权重值集合为 $\\{1, 3, 10\\}$。\n\n**步骤 2：使用提取的已知条件进行验证**\n\n1.  **科学或事实不健全**：该问题基于标准的图论和算法（Kruskal, Prim）。它在数学上是健全的。\n2.  **非形式化或不相关**：该问题是最小生成树（MST）算法应用的一个标准、可形式化的练习，与优化方法直接相关。\n3.  **不完整或矛盾的设置**：图的结构、顶点标签、边的定义和权重都得到了明确且一致的定义。设置是完整的。\n4.  **不切实际或不可行**：该问题是抽象的，不涉及物理现实，因此从这个意义上说，此标准不适用。该图是明确定义的。\n5.  **不适定或结构不良**：该问题是适定的。通过询问什么*必须*为真，它正确地将问题框定为独立于任意的平局打破规则。在连通、加权、无向图上，MST 算法的性质保证了解的存在性。\n6.  **伪深刻、琐碎或同义反复**：该问题需要仔细、逐步地应用和比较两种不同的算法，这是一个不平凡的推理任务。\n7.  **超出科学可验证范围**：通过按描述执行算法，可以严格证明或反驳这些主张。\n\n**步骤 3：结论和行动**\n\n问题陈述是有效的。我将继续进行解题推导。\n\n### 推导与选项评估\n\n首先，让我们按权重对边进行分类：\n*   **权重 1**：$(t_1, b_1)$, $(t_3, b_3)$, $(t_5, b_5)$。（3条边，轻横档）\n*   **权重 3**：$(t_1, t_2), (t_2, t_3), (t_3, t_4), (t_4, t_5)$ 和 $(b_1, b_2), (b_2, b_3), (b_3, b_4), (b_4, b_5)$。（8条边，轨道边）\n*   **权重 10**：$(t_2, b_2), (t_4, b_4)$。（2条边，重横档）\n\n在一个有 $V$ 个顶点的图上，最小生成树（MST）将有 $V-1$ 条边。这里 $|V|=10$，所以 MST 将有 $10-1 = 9$ 条边。\n\n**Kruskal 算法分析**\n\nKruskal 算法的工作原理是按权重非递减顺序对所有边进行排序，如果一条边与先前添加的边不形成环，则将其添加到不断增长的森林中。\n\n1.  算法首先考虑所有权重为 $1$ 的边。它们是 $(t_1, b_1)$、$(t_3, b_3)$ 和 $(t_5, b_5)$。\n    *   边 $(t_1, b_1)$ 连接顶点 $t_1$ 和 $b_1$。\n    *   边 $(t_3, b_3)$ 连接顶点 $t_3$ 和 $b_3$。\n    *   边 $(t_5, b_5)$ 连接顶点 $t_5$ 和 $b_5$。\n    这三条边连接了三对不相交的顶点。因此，以任何顺序添加这三条边都不会产生环。由于它们是整个图中权重最低的边，Kruskal 算法*必须*接受所有这三条边。\n\n2.  在接受所有权重为 $1$ 的边之后，接下来要考虑的是八条权重为 $3$ 的轨道边。\n\n**Prim 算法分析**\n\nPrim 算法从单个顶点开始，通过迭代添加连接 MST 中顶点与 MST 外顶点的最便宜的边来生长 MST。起始顶点给定为 $t_1$。\n\n1.  **步骤 1**：初始树为 $T_0 = \\{t_1\\}$。树中的顶点集合为 $S = \\{t_1\\}$。算法考虑所有与 $t_1$ 相邻的边。这些边是：\n    *   $(t_1, b_1)$，权重为 $1$。\n    *   $(t_1, t_2)$，权重为 $3$。\n    权重最小的边是 $(t_1, b_1)$。必须选择这条边。\n    新的树变为 $T_1 = \\{(t_1, b_1)\\}$，顶点集合为 $S = \\{t_1, b_1\\}$。\n\n2.  **步骤 2**：算法现在考虑所有跨越 $S = \\{t_1, b_1\\}$ 和 $V \\setminus S$ 之间切割的边。这些边的一个端点在 $\\{t_1, b_1\\}$ 中，另一个端点在该集合之外。\n    *   从 $t_1$ 出发：$(t_1, t_2)$，权重为 $3$。\n    *   从 $b_1$ 出发：$(b_1, b_2)$，权重为 $3$。\n    其他边，例如权重为 $1$ 的横档边 $(t_3, b_3)$，不在当前的切割中，因为它的两个端点（$t_3$ 和 $b_3$）都在 $S$ 之外。算法只能从切割中的边进行选择。\n    切割中边的最小权重是 $3$。具有此权重的两条边是 $(t_1, t_2)$ 和 $(b_1, b_2)$。算法将选择这两条边中的一条。由于它们都是轨道边，Prim 算法选择的第二条边*必须*是权重为 $3$ 的轨道边。\n\n现在，我们来评估每个选项。\n\n**A. 在 Kruskal 算法下，最先接受的边恰好是第 $1$、$3$ 和 $5$ 列的三条轻横档（即 $(t_1,b_1)$, $(t_3,b_3)$, $(t_5,b_5)$），顺序不限，并且这些边都在任何轨道边之前被选择。**\n\n根据我们对 Kruskal 算法的分析，这三条权重为 $1$ 的边是图中绝对最轻的。它们连接不相交的顶点对，因此它们之间不可能形成环。因此，在考虑任何更高权重的边（例如权重为 $3$ 的轨道边）之前，它们都将被接受。这个陈述是 Kruskal 算法机制的直接结果。\n**结论：正确。**\n\n**B. 在从 $t_1$ 开始的 Prim 算法下，选择的第一条边是轻横档 $(t_1,b_1)$，第二条边必须是权重为 $3$ 的轨道边（而不是任何横档）。**\n\n我们对 Prim 算法的分析表明，从起始顶点 $t_1$ 开始，最便宜的邻接边是权重为 $1$ 的 $(t_1, b_1)$。这是强制的第一选择。此后，树中的顶点为 $\\{t_1, b_1\\}$。离开这个集合的最便宜的边是 $(t_1, t_2)$ 和 $(b_1, b_2)$，它们都是权重为 $3$ 的轨道边。没有其他横档与集合 $\\{t_1, b_1\\}$ 相邻。因此，Prim 算法选择的第二条边必须是这两条轨道边中的一条。该陈述是准确的。\n**结论：正确。**\n\n**C. 在从 $t_1$ 开始的 Prim 算法下，第二条边可以是轻横档 $(t_3,b_3)$，因为它的权重比轨道边小。**\n\n这个陈述反映了对 Prim 算法的一个常见误解。虽然边 $(t_3, b_3)$ 的权重为 $1$，小于轨道边的权重（$3$），但它不能被选为第二条边。在第一步之后，树包含顶点 $\\{t_1, b_1\\}$。Prim 算法只能从连接 $\\{t_1, b_1\\}$ 中顶点与该集合外顶点的边中进行选择。边 $(t_3, b_3)$ 连接 $t_3$ 和 $b_3$，在此阶段这两个顶点都不在树中。因此，$(t_3, b_3)$ 不在切割中，不是选择的候选对象。该陈述在事实上是不正确的。\n**结论：不正确。**\n\n**D. 尽管两种算法都生成最小生成树，但 Prim 算法和 Kruskal 算法的早期选择可能不同：Kruskal 算法的全局排序选择会首先选取所有轻横档，而 Prim 算法的选择受限于当前的切割，并可能根据起点交错选择轨道边和横档。**\n\n这个陈述是对这两种算法在此特定问题背景下性质的总结。\n*   “Kruskal 算法的全局排序选择会首先选取所有轻横档”：正如对选项 A 的分析所确立的，这是正确的。Kruskal 算法选择的前三条边是权重为 $1$ 的横档。\n*   “Prim 算法的选择受限于当前的切割”：这是 Prim 算法的定义。\n*   “早期选择可能不同”：Kruskal 算法的前三条边权重为 $(1, 1, 1)$。Prim 算法的前两条边权重为 $(1, 3)$。从第二步开始，这两个序列显然是不同的。\n*   “Prim 算法可能交错选择轨道边和横档”：我们的分析显示 Prim 算法先选择一个横档，然后选择一个轨道边。这是这种交错的一个例子。\n该陈述正确地对比了 Kruskal 算法的全局视角（总是选取整个图中次轻的边）与 Prim 算法的局部或“生长”视角（选取连接到当前树片段的最轻的边）。这种差异是根本性的，并被此问题很好地说明了。\n**结论：正确。**", "answer": "$$\\boxed{ABD}$$", "id": "3151259"}, {"introduction": "掌握了基本算法后，让我们来处理一个更贴近现实世界的挑战。在网络设计等实际应用中，我们不仅要考虑成本最低，还可能需要满足额外的约束，如节点的连接数不能超过某个上限。这个问题[@problem_id:3151268]引入了“度数约束”，并要求你评估一个基于 Kruskal 算法的启发式策略。完成这个练习将让你深刻理解，对于复杂的约束优化问题，贪心策略虽然简单高效，但并不总能得到全局最优解。", "problem": "考虑度数限制最小生成树问题：给定一个连通的、无向的、边带权的图和一个整数度数限制 $k$，找到一个最大顶点度数至多为 $k$ 且总权重最小的生成树。一个常见的启发式算法是运行 Kruskal 算法，但跳过任何会使某个顶点的度数增加到超过 $k$ 的边。Kruskal 算法按权重的非递减顺序扫描边，并且当且仅当插入一条边能保持无环性时才插入该边；在该启发式变体中，如果一条边会导致其任一端点的度数大于 $k$，则会额外拒绝该边。生成树是在所有顶点上的连通无环子图，其总权重是其边权重之和。\n\n请构造一个明确的反例，以证明该启发式算法可能是次优的，并按如下方式量化它在该实例上与最优解的差距。设 $G=(V,E,w)$ 是一个无向图，其顶点集为 $V=\\{A,B,C,D,E\\}$，并具有以下不同的正边权重 $w$（未列出的边不存在）：\n- $w(AB)=1$, $w(BC)=2$, $w(CD)=3$, $w(BE)=4$, $w(CE)=5$,\n- $w(DE)=19$, $w(AE)=20$, $w(AC)=30$, $w(AD)=30$, $w(BD)=30$。\n\n取度数限制 $k=2$。\n\n任务：\n1) 将上述的度数限制 Kruskal 启发式算法应用于 $G$（$k=2$），并确定其输出的生成树的总权重。\n2) 确定在 $G$ 的所有最大度数至多为 $2$ 的生成树中，可能的最小总权重。\n3) 计算启发式算法得到的总权重与真实最小总权重之间的绝对差。\n\n给出你的最终答案，形式为一个精确的实数（无单位，不四舍五入）。", "solution": "我们从核心定义开始。一个包含 $n$ 个顶点的图的生成树恰好有 $n-1$ 条边，是连通且无环的。Kruskal 算法按权重的非递减顺序处理边，如果一条边不会产生环，则将其加入。度数限制启发式算法对此进行了修改，它会额外拒绝任何会使其任一端点的度数超过限制 $k$ 的边。对于 $k=2$，任何可行的生成树的最大度数必须至多为 $2$。在 $n$ 个顶点上，任何最大度数至多为 $2$ 的树都是一条包含所有 $n$ 个顶点的简单路径，因为所有度数 $\\le 2$ 的树最多有两个度数为 $1$ 的顶点，其余顶点的度数为 $2$，这恰好是路径的结构。\n\n步骤 1：在图 $G$ 上以 $k=2$ 运行度数限制的 Kruskal 启发式算法。\n\n按权重的非递减顺序列出边：\n- 边 $AB$，权重为 $1$，\n- 边 $BC$，权重为 $2$，\n- 边 $CD$，权重为 $3$，\n- 边 $BE$，权重为 $4$，\n- 边 $CE$，权重为 $5$，\n- 边 $DE$，权重为 $19$，\n- 边 $AE$，权重为 $20$，\n- 边 $AC$，权重为 $30$，\n- 边 $AD$，权重为 $30$，\n- 边 $BD$，权重为 $30$。\n\n按此顺序处理，同时保持无环性和度数限制 $k=2$：\n- 考虑 $AB$ ($1$)：无环，度数变为 $\\deg(A)=1, \\deg(B)=1$。接受。\n- 考虑 $BC$ ($2$)：无环，度数变为 $\\deg(B)=2, \\deg(C)=1$。接受。\n- 考虑 $CD$ ($3$)：无环，度数变为 $\\deg(C)=2, \\deg(D)=1$。接受。当前的森林是路径 $A$–$B$–$C$–$D$。\n- 考虑 $BE$ ($4$)：加入此边会使 $\\deg(B)=3$，违反 $k=2$ 的限制。拒绝。\n- 考虑 $CE$ ($5$)：加入此边会使 $\\deg(C)=3$，违反 $k=2$ 的限制。拒绝。\n- 考虑 $DE$ ($19$)：不会形成环，度数变为 $\\deg(D)=2, \\deg(E)=1$。接受。现在所有 $5$ 个顶点都用 $4$ 条边连接起来了，因此我们得到了一个生成树。\n\n该启发式算法的生成树边集为 $\\{AB,BC,CD,DE\\}$，总权重为\n$$\nw_{\\text{heur}}=w(AB)+w(BC)+w(CD)+w(DE)=1+2+3+19=25.\n$$\n\n步骤 2：找到 $k=2$ 时最优的度数限制生成树。\n\n如前所述，任何可行的树都必须是一条包含所有 $5$ 个顶点的路径，即由 $4$ 条边构成，其中每个内部顶点的度数为 $2$，两个端点的度数为 $1$。我们寻求在可用边中找到总权重最小的此类路径。\n\n考虑权重较小的边集：$AB$ ($1$)、$BC$ ($2$)、$CD$ ($3$)、$BE$ ($4$)、$CE$ ($5$)。一个包含 $5$ 个顶点的树有 $4$ 条边，所以我们尝试使用最便宜的四条边，前提是满足度数 $\\le 2$ 和连通性。\n\n- 权重最小的四条边 $\\{AB,BC,CD,BE\\}$ 违反了度数限制，因为 $\\deg(B)$ 将为 $3$（边 $AB, BC, BE$）。\n- 边集 $\\{AB,BC,CD,CE\\}$ 同样违反了度数限制，因为 $\\deg(C)$ 将为 $3$（边 $BC, CD, CE$）。\n\n尝试边集 $\\{AB,CD,BE,CE\\}$，总权重为 $1+3+4+5=13$。各顶点度数为 $\\deg(A)=1$（来自 $AB$），$\\deg(B)=2$（来自 $AB, BE$），$\\deg(E)=2$（来自 $BE, CE$），$\\deg(C)=2$（来自 $CE, CD$），$\\deg(D)=1$（来自 $CD$）。这构成了一个包含所有顶点的连通无环图，即路径 $A$–$B$–$E$–$C$–$D$。因此，它是一个可行的解，最大度数为 $2$，总权重为 $13$。\n\n任何使用权重超过 $5$ 的边的其他可行路径，都会用权重至少为 $19$ 的边替换掉权重为 $1,3,4,5$ 的边中的一条，从而使总权重增加到至少 $1+3+4+19=27$。仅使用权重至多为 $5$ 的边的唯一其他方式是同时包含 $BC$ ($2$) 以及 $BE$ 和 $CE$，但这会强制 $\\deg(B)=3$ 或 $\\deg(C)=3$，违反了度数限制，如上所查。因此，在所有可行的度数为 $2$ 的生成树中，最小总权重为\n$$\nw_{\\text{opt}}=13.\n$$\n\n步骤 3：计算绝对差。\n\n所要求的差值为\n$$\n|w_{\\text{heur}}-w_{\\text{opt}}|=|25-13|=12.\n$$", "answer": "$$\\boxed{12}$$", "id": "3151268"}, {"introduction": "最后，我们来挑战一个更具动态和分析性的问题。在许多真实场景中，网络中的成本（如运输费用、链路延迟）并非一成不变，它们可能会随时间或其它外部因素而变化。这个问题[@problem_id:3151302]将边权重定义为参数 $\\lambda$ 的线性函数，要求你分析最小生成树的结构如何随 $\\lambda$ 的变化而演变。解决这个问题需要你灵活运用证明 MST 算法正确性的核心理论——环切性质和割性质，是检验你是否已深入掌握该主题的绝佳试金石。", "problem": "考虑一个无向连通加权图 $G=(V,E)$，其顶点集为 $V=\\{A,B,C,D\\}$，边集为 $E=\\{AB,AC,AD,BC,BD,CD\\}$。每条边 $e \\in E$ 的权重都依赖于一个实数参数 $\\lambda$，呈线性关系，由 $w_{e}(\\lambda)=a_{e}\\lambda+b_{e}$ 给出，其中 $a_{e},b_{e \\in \\mathbb{R}}$。具体的边权重函数如下：\n- $w_{AB}(\\lambda)=\\lambda+1$\n- $w_{AC}(\\lambda)=\\lambda+2$\n- $w_{AD}(\\lambda)=\\lambda+3$\n- $w_{BC}(\\lambda)=-\\lambda+5$\n- $w_{BD}(\\lambda)=2$\n- $w_{CD}(\\lambda)=-\\lambda+4$\n\n仅使用生成树的基本定义以及作为生成树贪心方法基础的正确性性质（例如，证明 Kruskal 算法和 Prim 算法正确性的切割性质和圈性质），确定所有使得最小生成树 (MST) 发生变化的 $\\lambda$ 的断点值。所谓变化，是指在断点的两侧，MST 中的边集不同。对于由这些断点确定的每个 $\\lambda$ 的开区间以及断点值本身，请确定 MST 的边集。\n\n最后，令 $S$ 为所有导致 MST 变化的、不同的 $\\lambda$ 断点值的总和。计算 $S$。请以单个实数的形式提供你的最终答案，无需四舍五入。", "solution": "用户希望我解决一个关于图中最小生成树 (MST) 的问题，其中边的权重是参数 $\\lambda$ 的线性函数。\n\n### 步骤 1：问题验证\n\n**1.1. 提取已知条件：**\n*   图 $G=(V, E)$ 是一个无向连通加权图。\n*   顶点集 $V=\\{A,B,C,D\\}$。这是 4 个顶点的完全图 $K_4$。\n*   边集 $E=\\{AB,AC,AD,BC,BD,CD\\}$。\n*   边权重 $w_{e}(\\lambda)=a_{e}\\lambda+b_{e}$ 是 $\\lambda \\in \\mathbb{R}$ 的线性函数。\n*   具体的权重函数：\n    *   $w_{AB}(\\lambda)=\\lambda+1$\n    *   $w_{AC}(\\lambda)=\\lambda+2$\n    *   $w_{AD}(\\lambda)=\\lambda+3$\n    *   $w_{BC}(\\lambda)=-\\lambda+5$\n    *   $w_{BD}(\\lambda)=2$\n    *   $w_{CD}(\\lambda)=-\\lambda+4$\n*   任务：\n    *   找出所有使得 MST 发生变化的 $\\lambda$ 的断点值。\n    *   对于每个区间和断点，确定 MST 边集。\n    *   计算 $S$，即所有不同断点值的总和。\n\n**1.2. 使用提取的已知条件进行验证：**\n*   **科学性：** 是。该问题是参数最小生成树中的一个标准练习，这是图论和优化领域的一个主题。所要求的基本原理，即切割性质和圈性质，是 Kruskal 算法和 Prim 算法等 MST 算法的形式化依据。\n*   **适定性：** 是。图、顶点、边和权重函数都已明确定义。目标清晰，可以得出一组唯一的断点和一个唯一的总和数值答案。由于图是连通的，对于任何实数 $\\lambda$，生成树都存在。\n*   **客观性：** 是。问题以精确的数学语言陈述，没有任何主观或模糊的术语。\n\n**1.3. 结论与行动：**\n问题有效。我将继续进行完整解答。\n\n### 步骤 2：解决问题\n该问题要求找出参数 $\\lambda$ 的值，在这些值上，给定图 $G$ 的最小生成树 (MST) 中的边集会发生变化。\n\nMST 的结构由边权重的相对顺序决定。像 Kruskal 算法这样由圈性质证明其正确性的算法，通过迭代地添加不形成圈的下一条最便宜的边来构建 MST。这个贪心过程所选择的边集只可能在边权重的排序顺序发生变化时才会改变。这发生在两个边权重相等的 $\\lambda$ 值处。我们称这些值为“潜在断点”。\n\n我们来找出所有满足 $w_{e_1}(\\lambda) = w_{e_2}(\\lambda)$ 的 $\\lambda$ 值，其中 $e_1, e_2 \\in E$ 是任意两条不同的边。\n边权重函数如下：\n$w_{AB}(\\lambda)=\\lambda+1$\n$w_{AC}(\\lambda)=\\lambda+2$\n$w_{AD}(\\lambda)=\\lambda+3$\n$w_{BC}(\\lambda)=-\\lambda+5$\n$w_{BD}(\\lambda)=2$\n$w_{CD}(\\lambda)=-\\lambda+4$\n\n令成对的权重相等：\n\\begin{itemize}\n    \\item $w_{AB}(\\lambda) = w_{BC}(\\lambda) \\Rightarrow \\lambda+1 = -\\lambda+5 \\Rightarrow 2\\lambda=4 \\Rightarrow \\lambda=2$\n    \\item $w_{AB}(\\lambda) = w_{BD}(\\lambda) \\Rightarrow \\lambda+1 = 2 \\Rightarrow \\lambda=1$\n    \\item $w_{AB}(\\lambda) = w_{CD}(\\lambda) \\Rightarrow \\lambda+1 = -\\lambda+4 \\Rightarrow 2\\lambda=3 \\Rightarrow \\lambda=3/2$\n    \\item $w_{AC}(\\lambda) = w_{BC}(\\lambda) \\Rightarrow \\lambda+2 = -\\lambda+5 \\Rightarrow 2\\lambda=3 \\Rightarrow \\lambda=3/2$\n    \\item $w_{AC}(\\lambda) = w_{BD}(\\lambda) \\Rightarrow \\lambda+2 = 2 \\Rightarrow \\lambda=0$\n    \\item $w_{AC}(\\lambda) = w_{CD}(\\lambda) \\Rightarrow \\lambda+2 = -\\lambda+4 \\Rightarrow 2\\lambda=2 \\Rightarrow \\lambda=1$\n    \\item $w_{AD}(\\lambda) = w_{BC}(\\lambda) \\Rightarrow \\lambda+3 = -\\lambda+5 \\Rightarrow 2\\lambda=2 \\Rightarrow \\lambda=1$\n    \\item $w_{AD}(\\lambda) = w_{BD}(\\lambda) \\Rightarrow \\lambda+3 = 2 \\Rightarrow \\lambda=-1$\n    \\item $w_{AD}(\\lambda) = w_{CD}(\\lambda) \\Rightarrow \\lambda+3 = -\\lambda+4 \\Rightarrow 2\\lambda=1 \\Rightarrow \\lambda=1/2$\n    \\item $w_{BC}(\\lambda) = w_{BD}(\\lambda) \\Rightarrow -\\lambda+5 = 2 \\Rightarrow \\lambda=3$\n    \\item $w_{CD}(\\lambda) = w_{BD}(\\lambda) \\Rightarrow -\\lambda+4 = 2 \\Rightarrow \\lambda=2$\n\\end{itemize}\n权重函数平行的边对（例如，$w_{AB}(\\lambda)$ 和 $w_{AC}(\\lambda)$）的权重永远不会相等，因此这些情况没有解。\n\n潜在断点的集合，按升序排列为 $\\{-1, 0, 1/2, 1, 3/2, 2, 3\\}$。我们将在由这些值定义的开区间中分析 MST 的结构。一个包含 $|V|=4$ 个顶点的生成树有 $|V|-1=3$ 条边。\n\n**区间 1：$\\lambda \\in (-\\infty, -1)$**\n我们选取一个测试值，例如 $\\lambda=-2$。各边权重为：\n$w_{AB}(-2)=-1$, $w_{AC}(-2)=0$, $w_{AD}(-2)=1$, $w_{BC}(-2)=7$, $w_{BD}(-2)=2$, $w_{CD}(-2)=6$。\n按权重排序的边顺序是 $AB, AC, AD, BD, CD, BC$。\nKruskal 算法的执行过程如下：\n1. 添加边 $AB$ (权重 -1)。\n2. 添加边 $AC$ (权重 0)。\n3. 添加边 $AD$ (权重 1)。\n边集 $\\{AB, AC, AD\\}$ 构成一个生成树（一个以 $A$ 为中心的星形图）。\nMST 为 $T_1 = \\{AB, AC, AD\\}$。\n\n**断点 $\\lambda = -1$**\n当 $\\lambda=-1$ 时，$w_{AD}(-1) = 2$ 且 $w_{BD}(-1) = 2$。\n各边权重为：$w_{AB}=0$, $w_{AC}=1$, $w_{AD}=2$, $w_{BD}=2$, $w_{CD}=5$, $w_{BC}=6$。\n对于 $\\lambda  -1$，$w_{AD}(\\lambda) = \\lambda+3  2 = w_{BD}(\\lambda)$。\n对于 $\\lambda > -1$，$w_{AD}(\\lambda) = \\lambda+3 > 2 = w_{BD}(\\lambda)$。\n$AD$ 和 $BD$ 的相对顺序交换。\n我们来检查 Kruskal 算法中受此影响的步骤。我们首先添加 $AB$ 和 $AC$。下一条最便宜的边将决定 MST 的第三条边。\n对于 $\\lambda  -1$，我们在 $BD$ 之前选择 $AD$。MST 为 $T_1 = \\{AB, AC, AD\\}$。\n对于 $\\lambda > -1$ (但接近 -1)，我们在 $AD$ 之前选择 $BD$。将 $BD$ 添加到 $\\{AB, AC\\}$ 中构成一棵树。\nMST 为 $T_2 = \\{AB, AC, BD\\}$。\n由于 MST 边集在 $\\lambda=-1$ 两側发生了变化，所以这是一个断点。在 $\\lambda=-1$ 时，$T_1$ 和 $T_2$ 都是有效的 MST，且总权重相同。\n\n**区间 2：$\\lambda \\in (-1, 1)$**\nMST 为 $T_2 = \\{AB, AC, BD\\}$。我们来验证一下。在 $\\lambda=0$ 时，权重为 $w_{AB}=1$, $w_{AC}=2$, $w_{BD}=2$, $w_{AD}=3$, $w_{CD}=4$, $w_{BC}=5$。权重 $w_{AC}$ 和 $w_{BD}$ 的顺序在 $\\lambda=0$ 时交换。\n对于 $\\lambda \\in (-1, 0)$，Kruskal 算法的选择序列是 $AB, AC, BD$。\n对于 $\\lambda \\in (0, 1)$，Kruskal 算法的序列是 $AB, BD, AC$。\n在这两种情况下，最终得到的边集都是 $\\{AB, AC, BD\\}$。因此，MST 在 $\\lambda=0$ 时没有改变，所以它不是一个断点。\n类似地，在 $\\lambda=1/2$ 时，$w_{AD}=w_{CD}=3.5$。在 $\\lambda=1/2$ 附近的区间内，边 $AD$ 和 $CD$ 比构成 $T_2$ 的边更昂贵，因此它们的相对顺序不影响 MST 的构建。因此，$\\lambda=1/2$ 不是一个断点。\n在整个区间 $\\lambda \\in (-1, 1)$ 内，MST 为 $T_2 = \\{AB, AC, BD\\}$。\n\n**断点 $\\lambda = 1$**\n当 $\\lambda=1$ 时，我们有 $w_{AC}(1)=3$ 和 $w_{CD}(1)=3$。$AC$ 和 $CD$ 的相对顺序发生变化。\n对于 $\\lambda  1$，$w_{AC}(\\lambda)  w_{CD}(\\lambda)$。对于 $\\lambda>1$，$w_{AC}(\\lambda) > w_{CD}(\\lambda)$。\n我们来追踪 Kruskal 算法。对于接近 $1$ 的 $\\lambda$，两条最便宜的边是 $AB$ 和 $BD$ (或者 $BD$ 和 $AB$，它们的顺序在 $\\lambda=1$ 时翻转，但两者都会在 MST 中)。添加 $\\{AB, BD\\}$ 后，我们得到连通分量 $\\{\\{A,B,D\\}, \\{C\\}\\}$。下一条边必须连接顶点 $C$到这个分量。候选边是 $AC, BC, CD$。\n对于 $\\lambda  1$ (接近 1)，$w_{AC}(\\lambda) \\approx 3$, $w_{CD}(\\lambda) \\approx 3$，且 $w_{AC}  w_{CD}$。同时 $w_{BC}(\\lambda) \\approx 4$。最便宜的选择是 $AC$。\nMST 为 $\\{AB, BD, AC\\}$，即 $T_2$。\n对于 $\\lambda > 1$ (接近 1)，$w_{AC}(\\lambda) \\approx 3$, $w_{CD}(\\lambda) \\approx 3$，且 $w_{AC} > w_{CD}$。最便宜的选择是 $CD$。\nMST 为 $T_3 = \\{AB, BD, CD\\}$。\n由于 MST 边集发生了变化，$\\lambda=1$ 是一个断点。在 $\\lambda=1$ 时，$T_2$ 和 $T_3$ 都是有效的 MST。\n\n**区间 3：$\\lambda \\in (1, 3)$**\nMST 为 $T_3 = \\{AB, BD, CD\\}$。\n在 $\\lambda=3/2$ 时，$w_{AB}=w_{CD}$ 且 $w_{AC}=w_{BC}$。\n在 $\\lambda=2$ 时，$w_{AB}=w_{BC}$ 且 $w_{BD}=w_{CD}$。\n我们来检查这些潜在断点是否是真正的断点。\n对于 $\\lambda \\in (1, 3)$，我们来分析 Kruskal 算法。边权重的排序顺序会改变，但最终的树会改变吗？\n我们来分析 $\\lambda=2$ 两側的运行情况。\n对于 $\\lambda \\in (1,2)$，顺序是 $BD, CD, AB, \\dots$ -> 添加 $BD$，添加 $CD$，添加 $AB$。MST 是 $T_3$。\n对于 $\\lambda \\in (2,3)$，顺序是 $CD, BD, BC, AB, \\dots$ -> 添加 $CD$，添加 $BD$，跳过 $BC$ (形成圈 $BCD$)，添加 $AB$。MST 是 $T_3$。\nMST 在 $\\lambda=2$ 时没有改变。类似的分析表明在 $\\lambda=3/2$ 时也没有改变。\n在整个区间 $\\lambda \\in (1, 3)$ 内，MST 为 $T_3 = \\{AB, BD, CD\\}$。\n\n**断点 $\\lambda = 3$**\n当 $\\lambda=3$ 时，$w_{BC}(3)=2$ 且 $w_{BD}(3)=2$。$BC$ 和 $BD$ 的相对顺序发生变化。\n对于 $\\lambda3$，$w_{BC}(\\lambda) > w_{BD}(\\lambda)$。对于 $\\lambda>3$，$w_{BC}(\\lambda)  w_{BD}(\\lambda)$。\n我们来使用圈性质。考虑圈 $B-C-D-B$。其中的边是 $BC, CD, BD$。\n对于 $\\lambda  3$，$w_{BC} = -\\lambda+5 > 2 = w_{BD}$。$w_{BC}$ 是这个圈上最重的边 (因为 $w_{CD} = -\\lambda+4  w_{BC}$)。因此，$BC$ 不可能在任何 MST 中。这与 $T_3=\\{AB, BD, CD\\}$ 是 MST 的结论一致。\n对于 $\\lambda > 3$，$w_{BC} = -\\lambda+5  2 = w_{BD}$。现在 $BD$ 是这个圈上最重的边。因此，$BD$ 不可能在任何 MST 中。这意味着 $T_3$ 不再是 MST。必须发生一次交换。\n新的 MST, $T_4$, 是通过将 $BD$ 替换为 $BC$ 形成的，得到 $T_4=\\{AB, BC, CD\\}$。\n由于 MST 边集发生了变化，$\\lambda=3$ 是一个断点。在 $\\lambda=3$ 时，$T_3$ 和 $T_4$ 都是 MST。\n\n**区间 4：$\\lambda \\in (3, \\infty)$**\nMST 为 $T_4=\\{AB, BC, CD\\}$。\n对于 $\\lambda=4$，权重为：$w_{CD}=0$, $w_{BC}=1$, $w_{BD}=2$, $w_{AB}=5$, $w_{AC}=6$, $w_{AD}=7$。\nKruskal 算法：添加 $CD$，添加 $BC$。连通分量为 $\\{\\{B,C,D\\}, \\{A\\}\\}$。跳过 $BD$ (成圈)。添加 $AB$。\nMST 确实是 $\\{CD, BC, AB\\} = T_4$。\n\n**分析总结**\n最小生成树中的边集仅在以下 $\\lambda$ 值处发生变化：\n\\begin{itemize}\n    \\item $\\lambda = -1$: MST 从 $T_1=\\{AB, AC, AD\\}$ 变为 $T_2=\\{AB, AC, BD\\}$。\n    \\item $\\lambda = 1$: MST 从 $T_2=\\{AB, AC, BD\\}$ 变为 $T_3=\\{AB, BD, CD\\}$。\n    \\item $\\lambda = 3$: MST 从 $T_3=\\{AB, BD, CD\\}$ 变为 $T_4=\\{AB, BC, CD\\}$。\n\\end{itemize}\n其他的潜在断点（$\\lambda=0, 1/2, 3/2, 2$）不会导致 MST 边集的改变。\n\n不同的断点值为 $-1$, $1$, 和 $3$。\n\n最后一步是计算这些值的总和 $S$。\n$S = (-1) + 1 + 3 = 3$。\n\nMST 边集如下：\n\\begin{itemize}\n    \\item 对于 $\\lambda \\in (-\\infty, -1)$: $\\{AB, AC, AD\\}$\n    \\item 对于 $\\lambda = -1$: $\\{AB, AC, AD\\}$ 和 $\\{AB, AC, BD\\}$\n    \\item 对于 $\\lambda \\in (-1, 1)$: $\\{AB, AC, BD\\}$\n    \\item 对于 $\\lambda = 1$: $\\{AB, AC, BD\\}$ 和 $\\{AB, BD, CD\\}$\n    \\item 对于 $\\lambda \\in (1, 3)$: $\\{AB, BD, CD\\}$\n    \\item 对于 $\\lambda = 3$: $\\{AB, BD, CD\\}$ 和 $\\{AB, BC, CD\\}$\n    \\item 对于 $\\lambda \\in (3, \\infty)$: $\\{AB, BC, CD\\}$\n\\end{itemize}\n\n断点值的总和是 $S=3$。", "answer": "$$\\boxed{3}$$", "id": "3151302"}]}