{"hands_on_practices": [{"introduction": "理论知识需要通过实践来巩固。本练习将引导你手动执行 Dijkstra 算法，应用于一个模拟数据中心网络的场景。通过逐步计算从源路由器到各服务器的最短延迟，你将亲身体验该算法的贪心策略和松弛操作，从而将抽象的算法步骤转化为具体的解题技能。[@problem_id:1532819]", "problem": "一个小型数据中心的网络由一个标记为 `R` 的中央路由器和五个标记为 `S1`、`S2`、`S3`、`S4` 和 `S5` 的服务器组成。数据包可以在某些设备对之间传输，每条连接都有一个相关的延迟，单位为毫秒 (ms)。网络拓扑和延迟如下：\n\n- `R` 与 `S1` 连接，延迟为 10 ms。\n- `R` 与 `S2` 连接，延迟为 3 ms。\n- `R` 与 `S3` 连接，延迟为 8 ms。\n- `S1` 与 `S2` 连接，延迟为 4 ms。\n- `S1` 与 `S4` 连接，延迟为 2 ms。\n- `S2` 与 `S3` 连接，延迟为 2 ms。\n- `S2` 与 `S4` 连接，延迟为 9 ms。\n- `S3` 与 `S5` 连接，延迟为 5 ms。\n- `S4` 与 `S5` 连接，延迟为 1 ms。\n\n所有连接都是双向的，意味着两个方向的延迟相同。确定数据包从中央路由器 `R` 传输到五个服务器中每一个的最小可能延迟。\n\n请按 `S1`、`S2`、`S3`、`S4` 和 `S5` 的特定顺序提供最终延迟。最终答案应该是一组以 ms 为单位的数字。", "solution": "题目要求我们找到在一个无向加权网络中，从源节点 $R$ 到目标节点 $S_{1},S_{2},S_{3},S_{4},S_{5}$ 的最小延迟路径。所有延迟都是非负的，因此可以使用 Dijkstra 算法。设 $d(X)$ 表示从 $R$ 到节点 $X$ 的当前已知最优延迟。初始化 $d(R)=0$ 且对所有 $i$ 有 $d(S_{i})=\\infty$，然后在每一步中从具有最小临时距离的已确定节点出发，沿着边进行松弛操作。\n\n使用从 $R$ 出发的边进行初始化：\n- 从 $R$ 到 $S_{1}$：$d(S_{1})=\\min(\\infty,10)=10$。\n- 从 $R$ 到 $S_{2}$：$d(S_{2})=\\min(\\infty,3)=3$。\n- 从 $R$ 到 $S_{3}$：$d(S_{3})=\\min(\\infty,8)=8$。\n- $R$ 到 $S_{4}$ 或 $S_{5}$ 没有直接边：$d(S_{4})=\\infty$，$d(S_{5})=\\infty$。\n\n确定具有最小临时距离的节点 $S_{2}$，其 $d(S_{2})=3$，并松弛其邻居：\n- 边 $S_{2}$–$S_{1}$，权重为 $4$：$d(S_{1})=\\min(10,3+4)=7$。\n- 边 $S_{2}$–$S_{3}$，权重为 $2$：$d(S_{3})=\\min(8,3+2)=5$。\n- 边 $S_{2}$–$S_{4}$，权重为 $9$：$d(S_{4})=\\min(\\infty,3+9)=12$。\n\n现在临时距离为 $d(S_{1})=7$，$d(S_{3})=5$，$d(S_{4})=12$，$d(S_{5})=\\infty$。确定节点 $S_{3}$，其 $d(S_{3})=5$，并松弛其邻居：\n- 边 $S_{3}$–$S_{5}$，权重为 $5$：$d(S_{5})=\\min(\\infty,5+5)=10$。\n- 边 $S_{3}$–$S_{2}$ 提供的路径距离为 $5+2=7$，这没有改善 $d(S_{2})=3$。\n\n现在临时距离为 $d(S_{1})=7$，$d(S_{4})=12$，$d(S_{5})=10$。确定节点 $S_{1}$，其 $d(S_{1})=7$，并松弛其邻居：\n- 边 $S_{1}$–$S_{4}$，权重为 $2$：$d(S_{4})=\\min(12,7+2)=9$。\n- 边 $S_{1}$–$S_{2}$ 提供的路径距离为 $7+4=11$，这没有改善 $d(S_{2})=3$。\n\n现在临时距离为 $d(S_{4})=9$，$d(S_{5})=10$。确定节点 $S_{4}$，其 $d(S_{4})=9$，并松弛其邻居：\n- 边 $S_{4}$–$S_{5}$，权重为 $1$：$d(S_{5})=\\min(10,9+1)=10$ (无变化)。\n\n最后，确定节点 $S_{5}$，其 $d(S_{5})=10$。所有节点都已确定，得出最小延迟如下：\n- $d(S_{1})=7$\n- $d(S_{2})=3$\n- $d(S_{3})=5$\n- $d(S_{4})=9$\n- $d(S_{5})=10$\n\n这些值以毫秒为单位，符合题目要求；最终答案按指定顺序列出了数值。", "answer": "$$\\boxed{\\begin{pmatrix}7  3  5  9  10\\end{pmatrix}}$$", "id": "1532819"}, {"introduction": "理解一个算法的局限性与掌握其应用同样重要。Dijkstra 算法虽然高效，但它并非万能，特别是在图中存在负权重边时。这个练习要求你分析几种图的结构，并找出会导致 Dijkstra 算法失效的特例，即算法虽然能终止但无法给出正确的最短路径距离。通过这个思想实验，你将深刻理解 Dijkstra 算法的贪心选择为何会在特定条件下失效，并认识到为问题选择正确算法的重要性。[@problem_id:1532814]", "problem": "Dijkstra 算法是一种用于在加权图中寻找节点间最短路径的基础算法。然而，其贪心策略存在局限性。考虑一个有向图，其顶点集为 $V = \\{S, A, B, C\\}$，其中 $S$ 是指定的源顶点。\n\n您的任务是确定以下哪一种图的配置（由其带权有向边描述）会导致 Dijkstra 算法失败。失败的定义是：算法终止，但计算出的从源顶点 $S$ 到图中至少一个其他顶点的最短路径距离是错误的。\n\n对于每个选项，边都以（起始顶点，结束顶点，权重）的格式给出。所有从 $S$ 无法到达的顶点都被认为具有无限路径距离。\n\nA. 一个带权有向图，其边为： (S, A, 3); (S, B, 6); (B, A, -4); (S, C, 8)。\n\nB. 一个带权有向图，其边为： (S, A, 4); (S, B, 2); (B, A, -1); (B, C, 3)。\n\nC. 一个带权有向图，其边为： (S, A, 5); (A, B, -2); (S, C, 1)。\n\nD. 一个带权有向图，其边为： (S, A, 2); (S, B, 3); (A, C, 4); (B, C, 1)。", "solution": "Dijkstra 算法在所有边权重为非负时是正确的，因为一旦一个顶点 $u$ 以最小的暂定距离 $d(u)$ 被取出，就不可能通过任何其他未处理的顶点找到通往 $u$ 的更短路径。当存在从 $S$ 可达的负权重边时，稍后可能会出现一条通往已确定顶点的更短路径，这违反了该不变量，从而导致算法失败。\n\n我通过首先确定从 $S$ 出发的真实最短路径距离，然后模拟 Dijkstra 算法的步骤来评估每个选项，看它是否会产生错误的结果。\n\n选项 A：边为 $(S,A,3)$, $(S,B,6)$, $(B,A,-4)$, $(S,C,8)$。\n- 真实最短路径距离：\n  - $d^{*}(A) = \\min\\{3,\\,6+(-4)\\} = 2$，路径为 $S \\to B \\to A$。\n  - $d^{*}(B) = 6$，路径为 $S \\to B$。\n  - $d^{*}(C) = 8$，路径为 $S \\to C$。\n- Dijkstra 算法模拟：\n  - 初始化 $d(S)=0$, $d(A)=3$, $d(B)=6$, $d(C)=8$。\n  - 首先取出 $A$（最小值为 3），最终确定 $A$ 的距离为 3；从 $A$ 出发没有松弛操作。\n  - 取出 $B$（距离为 6），对边 $(B,A)$ 进行松弛，得到一个候选距离 $d(A)=6+(-4)=2$，但 $A$ 已经被确定，不会被更新。\n  - 算法终止时得到 $d(A)=3$，这是不正确的，因为 $d^{*}(A)=2$。\n因此 Dijkstra 算法在选项 A 上失败。\n\n选项 B：边为 $(S,A,4)$, $(S,B,2)$, $(B,A,-1)$, $(B,C,3)$。\n- 真实最短路径距离：\n  - $d^{*}(B)=2$，路径为 $S \\to B$。\n  - $d^{*}(A)=2+(-1)=1$，路径为 $S \\to B \\to A$，比 4 更优。\n  - $d^{*}(C)=2+3=5$，路径为 $S \\to B \\to C$。\n- Dijkstra 算法模拟：\n  - 初始化 $d(S)=0$, $d(B)=2$, $d(A)=4$, $d(C)=\\infty$。\n  - 取出 $B$（距离为 2），松弛后得到 $d(A)=1$, $d(C)=5$。\n  - 取出 $A$（距离为 1），然后取出 $C$（距离为 5）。最终距离与 $d^{*}$ 相符。没有失败。\n\n选项 C：边为 $(S,A,5)$, $(A,B,-2)$, $(S,C,1)$。\n- 真实最短路径距离：\n  - $d^{*}(C)=1$，路径为 $S \\to C$。\n  - $d^{*}(A)=5$，路径为 $S \\to A$。\n  - $d^{*}(B)=5+(-2)=3$，路径为 $S \\to A \\to B$。\n- Dijkstra 算法模拟：\n  - 初始化 $d(S)=0$, $d(C)=1$, $d(A)=5$, $d(B)=\\infty$。\n  - 取出 $C$（距离为 1）（无松弛操作）。\n  - 取出 $A$（距离为 5），松弛后得到 $d(B)=3$。\n  - 取出 $B$（距离为 3）。最终距离与 $d^{*}$ 相符。没有失败。\n\n选项 D：边为 $(S,A,2)$, $(S,B,3)$, $(A,C,4)$, $(B,C,1)$。\n- 所有权重都是非负的，所以 Dijkstra 算法保证是正确的。\n- 真实最短路径距离：$d^{*}(A)=2$, $d^{*}(B)=3$, $d^{*}(C)=\\min\\{2+4,\\,3+1\\}=4$。Dijkstra 算法会计算出这些值。\n\n因此，只有选项 A 会导致 Dijkstra 算法终止时得到错误的最短路径距离。", "answer": "$$\\boxed{A}$$", "id": "1532814"}, {"introduction": "现实世界中的优化问题往往带有额外的约束。本练习模拟了一个无人机配送网络，其中不仅包含负成本（收益）路径，还限制了路径的最大边数。这个问题超越了标准的最短路径求解，要求你思考如何在特定约束下寻找最优解。这个场景本质上反映了 Bellman-Ford 算法的核心思想——通过迭代增加路径长度来逐步构建最短路径，是学习如何将图算法应用于复杂约束优化问题的绝佳实践。[@problem_id:1532799]", "problem": "一家公司正在为其城市中的自动驾驶无人机机队设计一个新的配送网络。该网络被建模为一个有向图，其中节点代表关键位置（枢纽、充电站、客户地址），而边则代表可能的飞行路径。由于利用顺风、下降时进行再生制动、或享受特定路线的政府补贴等多种因素的综合影响，遍历一条路径的“成本”可以是正数（代表能量消耗），也可以是负数（代表能量返还或金钱收益）。\n\n无人机的飞行控制器有一个软件限制：对于从源点到目的地的任何给定配送任务，飞行计划必须由最多 $K$ 条飞行路径（边）组成。\n\n考虑以下一个小型网络，它有5个标记为A、B、C、D和E的地点。可用的飞行路径及其相关成本如下：\n- A到B，成本：4\n- A到C，成本：5\n- B到D，成本：7\n- C到B，成本：-3\n- C到E，成本：8\n- D到C，成本：2\n- D到E，成本：-5\n\n你的任务是确定一架无人机从位于A点的主枢纽行驶到位于E点的目的地，使用一条最多由 $K=3$ 条边组成的路径时的最低可能成本。如果不存在这样的路径，你的答案应为“无穷大”。", "solution": "我们将配送网络建模为一个有向图，其节点为 $\\{A,B,C,D,E\\}$，边的成本如题所述。一条路径的成本是其包含的所有边的成本之和。任务是找出从 $A$ 到 $E$ 使用最多 $K=3$ 条边的最小总成本。由于边成本可能为负，我们不能假定贪心算法（如 Dijkstra 算法）所需的最优子结构存在；我们转而显式地枚举所有从 $A$到 $E$ 且最多包含3条边的路径，并计算它们的成本。\n\n首先，考虑从 $A$ 到 $E$ 长度为1（一条边）的路径。没有直接从 $A \\to E$ 的边，所以不存在长度为1的有效路径。\n\n接下来，考虑从 $A$ 到 $E$ 长度为2（两条边）的路径。唯一可能的路径是 $A \\to C \\to E$，因为从 $A$ 出发的可用边是 $A \\to B$ 和 $A \\to C$，而在一步可达的节点中，只有 $C$ 有一条指向 $E$ 的出边。其成本为\n$$\n\\text{cost}(A \\to C \\to E) = 5 + 8 = 13.\n$$\n\n现在考虑从 $A$ 到 $E$ 长度为3（三条边）的路径。我们根据从 $A$ 出发的第一步进行分类讨论：\n- 从 $A \\to B$ 出发：从 $B$ 出发的唯一一条边是 $B \\to D$。从 $D$ 出发，要在第三条边内到达 $E$，我们必须使用 $D \\to E$。这就得到了路径 $A \\to B \\to D \\to E$，其成本为\n$$\n\\text{cost}(A \\to B \\to D \\to E) = 4 + 7 + (-5) = 6.\n$$\n另一条路径 $D \\to C$ 将在三条边后结束于 $C$，无法在3条边内到达 $E$。\n- 从 $A \\to C$ 出发：从 $C$ 出发的边是 $C \\to B$ 和 $C \\to E$。选择 $C \\to E$ 只会得到一条已计算过的2边路径。选择 $C \\to B$ 将需要一条后续的 $B \\to E$ 边才能在三条边内到达 $E$，但并不存在 $B \\to E$ 这条边。从 $B$ 出发的唯一一条边是 $B \\to D$，这将需要第四条边才能到达 $E$，从而违反了 $K=3$ 的约束。\n\n因此，最多包含3条边的有效 $A \\to E$ 路径只有：\n- $A \\to C \\to E$，成本为 $13$，\n- $A \\to B \\to D \\to E$，成本为 $6$。\n\n取所有有效路径的最小值，\n$$\n\\min\\{13,\\,6\\} = 6.\n$$\n\n因此，从 $A$ 到 $E$ 使用最多3条边的最小可能成本是 $6$。", "answer": "$$\\boxed{6}$$", "id": "1532799"}]}