{"hands_on_practices": [{"introduction": "此练习是网络优化中的一个基石问题。它处理一个标准的最小成本流问题，但增加了流量的下界和上界，这在现实世界的物流和基础设施规划中非常常见。通过这个练习，你将掌握问题转换、寻找可行流以及使用对偶理论验证最优性的系统性过程，为解决更复杂的网络问题打下坚实的基础。", "problem": "考虑一个有向网络，其节点为 $\\{1,2,3,4\\}$，弧为 $(1,2)$, $(1,3)$, $(2,3)$, $(2,4)$ 和 $(3,4)$。每条弧 $(i,j)$ 都有一个下界 $l_{ij}$、一个上界 $u_{ij}$ 和一个单位成本 $c_{ij}$。数据如下：\n- $(1,2)$: $l_{12}=1$, $u_{12}=6$, $c_{12}=2$。\n- $(1,3)$: $l_{13}=0$, $u_{13}=4$, $c_{13}=1$。\n- $(2,3)$: $l_{23}=0$, $u_{23}=2$, $c_{23}=-1$。\n- $(2,4)$: $l_{24}=0$, $u_{24}=3$, $c_{24}=2$。\n- $(3,4)$: $l_{34}=2$, $u_{34}=7$, $c_{34}=0$。\n\n节点的供给/需求（净流出量等于供给）如下：\n- 节点 $1$：$b_{1}=5$。\n- 节点 $2$：$b_{2}=0$。\n- 节点 $3$：$b_{3}=0$。\n- 节点 $4$：$b_{4}=-5$。\n\n最小成本流（MCF）定义为一个在每条弧上都满足 $l_{ij}\\le f_{ij}\\le u_{ij}$ 的可行流 $f_{ij}$，并在每个节点 $i$ 处满足流量守恒条件 $\\sum_{j} f_{ij}-\\sum_{k} f_{ki}=b_{i}$，且该流使得总成本 $\\sum_{(i,j)} c_{ij} f_{ij}$ 最小。\n\n从这些定义出发，并且不使用任何快捷公式，计算一个可行流的最小总成本。你的推理过程应包括：\n- 将带有下界的问题通过基于守恒定律的适当需求调整，转换为一个下界为零的标准形式问题。\n- 通过将调整后的收支解释为带需求的循环流来分析可行性。\n- 使用满足与最小成本流线性规划形式相关的互补松弛条件的节点势函数 $\\pi_{i}$，推导并报告所得流的对偶最优性证书。\n\n将最终的最小总成本表示为一个不带单位的实数。无需四舍五入。", "solution": "该问题是一个有向网络上的最小成本流（MCF）问题。求解过程需要将问题转换为标准形式，找到一个可行流，并使用对偶证书证明其最优性。\n\n### 步骤1：问题验证\n\n**1. 提取已知条件：**\n- 节点：$V = \\{1, 2, 3, 4\\}$。\n- 弧及其（下界 $l_{ij}$，上界 $u_{ij}$，成本 $c_{ij}$）：\n  - $(1,2)$: $(1, 6, 2)$\n  - $(1,3)$: $(0, 4, 1)$\n  - $(2,3)$: $(0, 2, -1)$\n  - $(2,4)$: $(0, 3, 2)$\n  - $(3,4)$: $(2, 7, 0)$\n- 节点供给/需求（净流出量）$b_i$：\n  - $b_1 = 5$\n  - $b_2 = 0$\n  - $b_3 = 0$\n  - $b_4 = -5$\n- 总供给等于总需求：$\\sum_{i \\in V} b_i = 5 + 0 + 0 - 5 = 0$。\n\n**2. 使用提取的已知条件进行验证：**\n- **科学依据：** 该问题是一个标准的最小成本流问题，是网络优化和线性规划领域的一个基本课题。所有定义和目标都已明确建立。\n- **适定性：** 该问题是一个线性规划问题，其可行域非空（如下文所示）且有界，目标函数是线性的。条件 $\\sum b_i = 0$ 是可行性的一个必要条件，此条件已满足。因此，保证存在最优解。\n- **客观性：** 问题陈述使用了精确的数学定义和数值数据，没有主观或模糊的语言。\n- **完整性：** 所有必要的数据（网络拓扑、弧容量、成本、节点收支）都已提供。没有矛盾之处。\n\n**3. 结论与行动：**\n问题有效。我们继续求解。\n\n### 步骤2：转换为标准形式\n\n该问题具有非零下界 $l_{ij}$。我们将其转换为一个下界为零的等价问题。设 $f_{ij}$ 为原始问题中弧 $(i,j)$ 上的流量。我们定义一个新的流量变量 $f'_{ij} = f_{ij} - l_{ij}$。\n\n新的容量约束为 $0 \\le f'_{ij} \\le u'_{ij}$，其中新的上界为 $u'_{ij} = u_{ij} - l_{ij}$。\n- $u'_{12} = u_{12} - l_{12} = 6 - 1 = 5$\n- $u'_{13} = u_{13} - l_{13} = 4 - 0 = 4$\n- $u'_{23} = u_{23} - l_{23} = 2 - 0 = 2$\n- $u'_{24} = u_{24} - l_{24} = 3 - 0 = 3$\n- $u'_{34} = u_{34} - l_{34} = 7 - 2 = 5$\n\n每个节点 $i$ 处的流量守恒约束 $\\sum_{j} f_{ij} - \\sum_{k} f_{ki} = b_i$ 通过代入 $f_{ij} = f'_{ij} + l_{ij}$ 进行转换：\n$$ \\sum_{j} (f'_{ij} + l_{ij}) - \\sum_{k} (f'_{ki} + l_{ki}) = b_i $$\n$$ \\sum_{j} f'_{ij} - \\sum_{k} f'_{ki} = b_i - \\left(\\sum_{j} l_{ij} - \\sum_{k} l_{ki}\\right) $$\n设节点 $i$ 处新的供给/需求为 $b'_i = b_i - (\\sum_{j} l_{ij} - \\sum_{k} l_{ki})$。\n- $b'_1 = b_1 - (l_{12} + l_{13}) = 5 - (1 + 0) = 4$\n- $b'_2 = b_2 - (l_{23} + l_{24} - l_{12}) = 0 - (0 + 0 - 1) = 1$\n- $b'_3 = b_3 - (l_{34} - (l_{13} + l_{23})) = 0 - (2 - (0 + 0)) = -2$\n- $b'_4 = b_4 - (0 - (l_{24} + l_{34})) = -5 - (0 - (0 + 2)) = -3$\n新的收支总和为 $\\sum_i b'_i = 4 + 1 - 2 - 3 = 0$，符合要求。\n\n总成本为 $C = \\sum_{(i,j)} c_{ij} f_{ij} = \\sum_{(i,j)} c_{ij} (f'_{ij} + l_{ij}) = \\sum_{(i,j)} c_{ij} f'_{ij} + \\sum_{(i,j)} c_{ij} l_{ij}$。\n项 $C_{\\text{fixed}} = \\sum_{(i,j)} c_{ij} l_{ij}$ 是一个常数。我们必须最小化成本的可变部分 $C' = \\sum_{(i,j)} c_{ij} f'_{ij}$，然后将 $C_{\\text{fixed}}$ 加到结果中。\n$C_{\\text{fixed}} = c_{12} l_{12} + c_{13} l_{13} + c_{23} l_{23} + c_{24} l_{24} + c_{34} l_{34} = (2)(1) + (1)(0) + (-1)(0) + (2)(0) + (0)(2) = 2$。\n\n### 步骤3：寻找最优流\n\n我们现在需要解决转换后的问题：找到一个满足 $0 \\le f'_{ij} \\le u'_{ij}$ 和新收支 $b'_i$ 的流 $f'_{ij}$，该流能最小化 $C' = \\sum c_{ij} f'_{ij}$。\n供给节点是 $1$（$b'_1 = 4$）和 $2$（$b'_2 = 1$）。需求节点是 $3$（$b'_3 = -2$）和 $4$（$b'_4 = -3$）。\n\n弧 $(2,3)$ 的成本为负值 $c_{23} = -1$，使其成为流量的高度优先选择。我们尝试让尽可能多的流量通过它，直至其容量上限 $u'_{23}=2$。让我们尝试设置 $f'_{23} = 2$。\n为满足节点 $2$ 的收支平衡，$f'_{23} + f'_{24} - f'_{12} = b'_2 = 1$，我们有 $2 + f'_{24} - f'_{12} = 1$。一个简单的选择是设置 $f'_{24}=0$，并让流入节点 $2$ 的流量为 $f'_{12}=1$。这在容量 $u'_{12}=5$ 的范围内。\n现在考虑节点 $1$。其收支平衡为 $f'_{12} + f'_{13} = b'_1 = 4$。若 $f'_{12}=1$，则必须有 $f'_{13}=3$。这在容量 $u'_{13}=4$ 的范围内。\n接着是节点 $3$。其收支平衡为 $f'_{34} - (f'_{13} + f'_{23}) = b'_3 = -2$。代入我们找到的流量：$f'_{34} - (3 + 2) = -2$，得出 $f'_{34} = 3$。这在容量 $u'_{34}=5$ 的范围内。\n最后，我们检查节点 $4$ 的收支平衡：$-(f'_{24} + f'_{34}) = -(0 + 3) = -3$。这与 $b'_4 = -3$ 相符。\n\n我们为转换后的问题找到了一个可行流：\n- $f'_{12} = 1$\n- $f'_{13} = 3$\n- $f'_{23} = 2$（达到上界 $u'_{23}$）\n- $f'_{24} = 0$（达到下界 $0$）\n- $f'_{34} = 3$\n\n此流的成本为 $C' = (2)(1) + (1)(3) + (-1)(2) + (2)(0) + (0)(3) = 2 + 3 - 2 = 3$。\n\n### 步骤4：对偶最优性证书\n\n为证明此流是最优的，我们需找到一组满足互补松弛条件的节点势 $\\pi_i$。设弧的简约成本为 $c^{\\pi}_{ij} = c_{ij} - \\pi_i + \\pi_j$。转换后问题的最优性条件是：\n1. 如果 $0 < f'_{ij} < u'_{ij}$，则 $c^{\\pi}_{ij} = 0$。\n2. 如果 $f'_{ij} = 0$，则 $c^{\\pi}_{ij} \\ge 0$。\n3. 如果 $f'_{ij} = u'_{ij}$，则 $c^{\\pi}_{ij} \\le 0$。\n\n我们可以任意设定一个势，例如 $\\pi_4 = 0$。\n根据流量严格介于其界限之间的弧：\n- $0 < f'_{12} = 1 < 5 \\implies c^{\\pi}_{12} = c_{12} - \\pi_1 + \\pi_2 = 0 \\implies 2 - \\pi_1 + \\pi_2 = 0$。\n- $0 < f'_{13} = 3 < 4 \\implies c^{\\pi}_{13} = c_{13} - \\pi_1 + \\pi_3 = 0 \\implies 1 - \\pi_1 + \\pi_3 = 0$。\n- $0 < f'_{34} = 3 < 5 \\implies c^{\\pi}_{34} = c_{34} - \\pi_3 + \\pi_4 = 0 \\implies 0 - \\pi_3 + 0 = 0 \\implies \\pi_3 = 0$。\n\n解此方程组：\n- 从第三个方程得到，$\\pi_3 = 0$。\n- 代入第二个方程：$1 - \\pi_1 + 0 = 0 \\implies \\pi_1 = 1$。\n- 代入第一个方程：$2 - 1 + \\pi_2 = 0 \\implies \\pi_2 = -1$。\n\n我们的候选势为 $\\pi_1 = 1, \\pi_2 = -1, \\pi_3 = 0, \\pi_4 = 0$。现在我们检查其他弧的条件：\n- 弧 $(2,3)$：$f'_{23} = 2 = u'_{23}$。条件是 $c^{\\pi}_{23} \\le 0$。\n  $c^{\\pi}_{23} = c_{23} - \\pi_2 + \\pi_3 = -1 - (-1) + 0 = 0$。条件 $0 \\le 0$ 满足。\n- 弧 $(2,4)$：$f'_{24} = 0$。条件是 $c^{\\pi}_{24} \\ge 0$。\n  $c^{\\pi}_{24} = c_{24} - \\pi_2 + \\pi_4 = 2 - (-1) + 0 = 3$。条件 $3 \\ge 0$ 满足。\n\n由于所有最优性条件都得到满足，流 $f'$ 对转换后的问题是最优的，其成本为 $C' = 3$。\n\n### 步骤5：最终成本计算\n\n原始问题的最小总成本是转换后问题的最优成本与由下界产生的固定成本之和。\n$$ C_{\\text{min}} = C' + C_{\\text{fixed}} = 3 + 2 = 5 $$\n\n原始问题中的最优流为 $f_{ij} = f'_{ij} + l_{ij}$：\n- $f_{12} = 1 + 1 = 2$\n- $f_{13} = 3 + 0 = 3$\n- $f_{23} = 2 + 0 = 2$\n- $f_{24} = 0 + 0 = 0$\n- $f_{34} = 3 + 2 = 5$\n此流的总成本为 $(2)(2) + (1)(3) + (-1)(2) + (2)(0) + (0)(5) = 4 + 3 - 2 = 5$。这验证了结果。", "answer": "$$\\boxed{5}$$", "id": "3155953"}, {"introduction": "此练习引导我们超越基础模型，思考当运输的货物（如生鲜产品或放射性同位素）会随时间损耗时该如何处理。这个问题 [@problem_id:3155859] 演示了如何修改核心的流量守恒原理以融入此类现实世界的复杂性。它旨在锻炼你的数学建模能力，并展示如何通过对成本的巧妙分析来解决看似复杂的问题。", "problem": "考虑一个有向网络，其节点集为 $\\{A,B,C,D,E\\}$，其中节点 $A$ 是供给已知的单一源点，节点 $D$ 和 $E$ 是需求已知的汇点，节点 $B$ 和 $C$ 是中转节点。货物是易腐的：如果一个非负流量 $f_e$ 进入弧 $e$，只有该流量的一部分 $\\delta_e \\in (0,1]$ 会到达该弧的头节点。每条弧上的成本与送入该弧的货物量成线性关系。\n\n弧、衰减因子和成本（每单位送入弧的货物）如下：\n- 弧 $(A,B)$，其 $\\delta_{AB}=\\frac{4}{5}$ 且 $c_{AB}=2$，\n- 弧 $(A,C)$，其 $\\delta_{AC}=\\frac{9}{10}$ 且 $c_{AC}=3$，\n- 弧 $(B,D)$，其 $\\delta_{BD}=\\frac{9}{10}$ 且 $c_{BD}=1$，\n- 弧 $(C,D)$，其 $\\delta_{CD}=\\frac{7}{10}$ 且 $c_{CD}=1$，\n- 弧 $(B,E)$，其 $\\delta_{BE}=\\frac{3}{5}$ 且 $c_{BE}=2$，\n- 弧 $(C,E)$，其 $\\delta_{CE}=1$ 且 $c_{CE}=2$。\n\n假设弧上没有容量限制。源点 $A$ 的供给为 $S=\\frac{35}{3}$。汇点需求为节点 $D$ 处 $d_D=6$ 和节点 $E$ 处 $d_E=3$。所有其他节点的净供给或需求为零。所有流量都是非负且连续的。\n\n任务：\n1) 仅从有向网络上的流量守恒和线性运输成本的基本定义出发，通过写出正确的节点平衡等式来引入衰减。具体来说，推导在汇点处交付的流量必须满足的有效交付约束，并用入弧流量 $f_e$ 和衰减因子 $\\delta_e$ 表示节点 $A$、$B$、$C$、$D$ 和 $E$ 的节点平衡等式。\n\n2) 解释如何通过一种仅使用单位守恒弧的表示法，将此易腐货物流量模型转换为扩展网络上的标准最小费用流 (MCF) 模型。你的解释必须是构造性的：从每个衰减因子 $\\delta_e$ 都是有理数的想法出发，描述如何将每个原始弧扩展为一个“小构件”，该构件在将损耗路由到单独的废弃汇点的同时，保持线性和单位守恒性，从而使最终问题变为规范的MCF形式。\n\n3) 使用第 (1) 和 (2) 部分的原理，确定在源点 $A$ 的给定供给下，满足汇点 $D$ 和 $E$ 需求的最小总运输成本。将最终总成本表示为单个精确的有理数。无需四舍五入，成本不带单位。你的最终答案必须是单个精确形式的实数。", "solution": "问题要求对一个易腐货物最小费用网络流问题进行建模和求解，其中每条弧上的流量都会衰减。\n\n### 第1部分：包含流量衰减的问题建模\n\n设 $f_{uv}$ 是从节点 $u$ 送入弧 $(u,v)$ 的非负连续货物流量。此次运输的成本为 $c_{uv}f_{uv}$。由于易腐性，只有该流量的一部分 $\\delta_{uv}$，即 $\\delta_{uv}f_{uv}$，会到达节点 $v$。\n\n目标是最小化总运输成本，即所有弧上成本的总和。\n成本函数 $Z$ 为：\n$$Z = c_{AB}f_{AB} + c_{AC}f_{AC} + c_{BD}f_{BD} + c_{CD}f_{CD} + c_{BE}f_{BE} + c_{CE}f_{CE}$$\n\n约束条件由每个节点的流量守恒得出。对于一个给定的节点，所有到达它的流量之和必须等于所有从它出发的流量之和，并根据该节点的任何外部供给或需求进行调整。\n\n- **节点 A (源点):** 从节点 $A$ *运出* 的总流量是进入始于 $A$ 的弧的流量之和。这个总流出量不能超过可用供给 $S$。\n$$f_{AB} + f_{AC} \\le S$$\n在本问题中，$S = \\frac{35}{3}$。因此，约束为 $f_{AB} + f_{AC} \\le \\frac{35}{3}$。\n\n- **节点 B (中转节点):** 从弧 $(A,B)$ 到达 $B$ 的流量为 $\\delta_{AB}f_{AB}$。这必须等于从 $B$ 运出到弧 $(B,D)$ 和 $(B,E)$ 的流量之和。\n$$\\delta_{AB}f_{AB} = f_{BD} + f_{BE}$$\n代入给定值 $\\delta_{AB} = \\frac{4}{5}$，我们得到 $\\frac{4}{5}f_{AB} - f_{BD} - f_{BE} = 0$。\n\n- **节点 C (中转节点):** 类似地，从弧 $(A,C)$ 到达 $C$ 的流量为 $\\delta_{AC}f_{AC}$。这必须等于从 $C$ 运出到弧 $(C,D)$ 和 $(C,E)$ 的流量之和。\n$$\\delta_{AC}f_{AC} = f_{CD} + f_{CE}$$\n代入给定值 $\\delta_{AC} = \\frac{9}{10}$，我们得到 $\\frac{9}{10}f_{AC} - f_{CD} - f_{CE} = 0$。\n\n- **节点 D (汇点):** 从弧 $(B,D)$ 和 $(C,D)$ 到达汇点 $D$ 的流量之和必须满足需求 $d_D$。对于最小费用解，我们假设此约束以等式成立，因为任何多余的流量都会产生没有收益的成本。\n$$\\delta_{BD}f_{BD} + \\delta_{CD}f_{CD} = d_D$$\n代入给定值，我们得到 $\\frac{9}{10}f_{BD} + \\frac{7}{10}f_{CD} = 6$。\n\n- **节点 E (汇点):** 类似地，从弧 $(B,E)$ 和 $(C,E)$ 到达汇点 $E$ 的流量之和必须等于需求 $d_E$。\n$$\\delta_{BE}f_{BE} + \\delta_{CE}f_{CE} = d_E$$\n代入给定值，我们得到 $\\frac{3}{5}f_{BE} + 1 \\cdot f_{CE} = 3$。\n\n- **非负性：** 所有流量必须为非负。\n$$f_{uv} \\ge 0 \\text{ for all arcs } (u,v)$$\n\n这就完成了将问题建模为线性规划的过程。\n\n### 第2部分：转换为标准最小费用流 (MCF) 模型\n\n一个标准的MCF问题涉及一个带有单位守恒弧（即所有弧的 $\\delta_e=1$）的网络，以及形式为 $\\sum (\\text{流出量}) - \\sum (\\text{流入量}) = \\text{供给/需求}$ 的节点平衡约束。由于存在衰减因子 $\\delta_e \\ne 1$，给定的问题是一个“广义”网络流问题。\n\n为了将其转换为一个标准的MCF问题，我们可以改变流量变量和弧成本。让我们定义一组新的流量变量 $g_{uv}$，表示通过弧 $(u,v)$ *到达* 节点 $v$ 的流量。原始流量 $f_{uv}$（运出量）和新流量 $g_{uv}$（到达量）之间的关系是：\n$$g_{uv} = \\delta_{uv} f_{uv} \\quad \\implies \\quad f_{uv} = \\frac{g_{uv}}{\\delta_{uv}}$$\n由于 $\\delta_{uv} \\in (0,1]$，这个变换是良定义的。\n\n我们可以用新变量 $g_{uv}$ 重写整个问题：\n目标函数变为：\n$$Z = \\sum_{(u,v)} c_{uv}f_{uv} = \\sum_{(u,v)} c_{uv} \\frac{g_{uv}}{\\delta_{uv}} = \\sum_{(u,v)} \\left(\\frac{c_{uv}}{\\delta_{uv}}\\right) g_{uv}$$\n让我们为每条弧定义一个新的有效成本 $c'_{uv} = c_{uv}/\\delta_{uv}$。这个有效成本表示每单位*到达*弧的目的节点的流量所对应的成本。\n\n中转节点的流量守恒约束现在呈现标准的MCF形式。对于节点B：\n$f_{BD} + f_{BE} = \\delta_{AB}f_{AB} \\implies \\frac{g_{BD}}{\\delta_{BD}} + \\frac{g_{BE}}{\\delta_{BE}} = g_{AB}$。\n由于存在 $\\delta$ 分母，这个变换似乎并没有产生标准的MCF形式。但是，我们必须小心节点平衡的定义。平衡应该是在*离开*一个节点的量与*到达*它的量之间。\n在节点B：到达B的流量：$g_{AB}$。离开B的流量：$f_{BD} + f_{BE}$。模型要求 $\\delta_{AB} f_{AB} = f_{BD} + f_{BE}$，即 $g_{AB} = f_{BD} + f_{BE}$。到达中转节点的流量不再等于以相同变量类型表示的离开它们的流量。\n\n一个更好的方法是考虑将一单位流量送到目的地的成本。问题陈述中关于涉及有理因子、小构件和废弃汇点的构造性方法的提示，指向了一套用于转换广义网络的特定（尽管复杂）技术。一个简化的概念性解释如下：弧 $(u,v)$ 上的衰减意味着从 $u$ 每运出一单位流量，只有 $\\delta_{uv}$ 到达 $v$。剩余的 $1-\\delta_{uv}$ 被损耗掉了。这种损耗可以概念化为被路由到一个“废弃汇点” $W$。原始网络中的弧 $(u,v)$ 可以被看作是一个将 $u$ 连接到 $v$ 和 $W$ 的小构件。为了使之成为一个单位守恒系统，我们可以将流量单位定义为到达的量。从 $u$ 向 $v$ 输送一单位流量的成本必须计入为补偿损耗而需要的初始超额发货量。因此，输送一单位的有效成本是 $c'_{uv}=c_{uv}/\\delta_{uv}$。这对应于一个新网络，其中弧成本为 $c'_{uv}$，流量为到达量 $g_{uv}$，且所有弧都是守恒的。\n在中转节点 $v$ 的节点平衡方程变为 $\\sum_{(u,v)_in} g_{uv} = \\sum_{(v,w)_out} f_{vw}$。这仍然混合了不同类型的变量。\n\n解决这个问题的最直接方法是使用原始模型，这是一个广义网络流问题。当前问题的结构（单一源点，无弧容量限制）允许使用一种更简单的贪心求解方法，从而避免了进行完全转换或使用通用LP求解器的需要。\n\n### 第3部分：最小总运输成本\n\n由于弧上没有容量约束，最小费用解可以通过使用从源点 $A$ 到汇点 $D$ 和 $E$ 的最便宜的端到端路径来满足需求而找到。我们需要计算沿着每条可能的路径从 $A$ 向每个汇点输送一单位货物的总成本。\n\n成本是基于*运出*的量计算的，所以我们必须从汇点向后追溯所需的运输量。\n要通过路径 $A \\to v_1 \\to \\dots \\to v_n \\to k$ 向汇点 $k$ 输送 $1$ 单位货物：\n- 要使 $1$ 单位货物从 $v_n$ 到达 $k$，我们必须从 $v_n$ 运出 $1/\\delta_{v_n,k}$ 单位。产生的成本：$c_{v_n,k} \\cdot (1/\\delta_{v_n,k})$。\n- 这需要 $1/\\delta_{v_n,k}$ 单位货物从 $v_{n-1}$ 到达 $v_n$。这需要从 $v_{n-1}$ 运出 $(1/\\delta_{v_n,k}) / \\delta_{v_{n-1},v_n}$。产生的成本：$c_{v_{n-1},v_n} \\cdot (1/(\\delta_{v_{n-1},v_n}\\delta_{v_n,k}))$。\n- 如此回溯至源点 $A$。该路径的总成本是这些成本的总和。\n\n**输送至 D 的单位成本：**\n1.  **路径 A-B-D:**\n    - 从 B 到 D 的成本：$c_{BD}/\\delta_{BD} = 1 / (\\frac{9}{10}) = \\frac{10}{9}$。\n    - 从 A 到 B 的运输需要向 B 输送 $1/\\delta_{BD}$ 单位。从 A 需要的运输量是 $(1/\\delta_{BD}) / \\delta_{AB} = 1 / (\\delta_{AB}\\delta_{BD})$。\n    - 从 A 到 B 的成本：$c_{AB} \\cdot (1/(\\delta_{AB}\\delta_{BD})) = 2 / (\\frac{4}{5} \\cdot \\frac{9}{10}) = 2 / (\\frac{36}{50}) = \\frac{100}{36} = \\frac{25}{9}$。\n    - 通过 A-B-D 输送至 D 的单位总成本：$\\frac{25}{9} + \\frac{10}{9} = \\frac{35}{9}$。\n2.  **路径 A-C-D:**\n    - 从 C 到 D 的成本：$c_{CD}/\\delta_{CD} = 1 / (\\frac{7}{10}) = \\frac{10}{7}$。\n    - 从 A 到 C 的成本：$c_{AC} \\cdot (1/(\\delta_{AC}\\delta_{CD})) = 3 / (\\frac{9}{10} \\cdot \\frac{7}{10}) = 3 / (\\frac{63}{100}) = \\frac{300}{63} = \\frac{100}{21}$。\n    - 通过 A-C-D 输送至 D 的单位总成本：$\\frac{100}{21} + \\frac{10}{7} = \\frac{100}{21} + \\frac{30}{21} = \\frac{130}{21}$。\n比较到 D 的成本：$\\frac{35}{9} \\approx 3.89$ 和 $\\frac{130}{21} \\approx 6.19$。更便宜的路径是 A-B-D。\n\n**输送至 E 的单位成本：**\n1.  **路径 A-B-E:**\n    - 从 B 到 E 的成本：$c_{BE}/\\delta_{BE} = 2/(\\frac{3}{5}) = \\frac{10}{3}$。\n    - 从 A 到 B 的成本：$c_{AB} \\cdot (1/(\\delta_{AB}\\delta_{BE})) = 2 / (\\frac{4}{5} \\cdot \\frac{3}{5}) = 2 / (\\frac{12}{25}) = \\frac{50}{12} = \\frac{25}{6}$。\n    - 通过 A-B-E 输送至 E 的单位总成本：$\\frac{25}{6} + \\frac{10}{3} = \\frac{25}{6} + \\frac{20}{6} = \\frac{45}{6} = \\frac{15}{2}$。\n2.  **路径 A-C-E:**\n    - 从 C 到 E 的成本：$c_{CE}/\\delta_{CE} = 2/1 = 2$。\n    - 从 A 到 C 的成本：$c_{AC} \\cdot (1/(\\delta_{AC}\\delta_{CE})) = 3 / (\\frac{9}{10} \\cdot 1) = \\frac{30}{9} = \\frac{10}{3}$。\n    - 通过 A-C-E 输送至 E 的单位总成本：$\\frac{10}{3} + 2 = \\frac{10}{3} + \\frac{6}{3} = \\frac{16}{3}$。\n比较到 E 的成本：$\\frac{15}{2} = 7.5$ 和 $\\frac{16}{3} \\approx 5.33$。更便宜的路径是 A-C-E。\n\n**最优流量分配和总成本：**\n- 为满足需求 $d_D=6$，我们使用最便宜的路径 A-B-D。D 的总成本：$6 \\times \\frac{35}{9} = \\frac{210}{9} = \\frac{70}{3}$。\n- 为满足需求 $d_E=3$，我们使用最便宜的路径 A-C-E。E 的总成本：$3 \\times \\frac{16}{3} = 16$。\n- 最小总成本：$\\frac{70}{3} + 16 = \\frac{70}{3} + \\frac{48}{3} = \\frac{118}{3}$。\n\n**供给约束验证：**\n我们必须检查此流量方案对于供给 $S=\\frac{35}{3}$ 是否可行。\n- 为满足 D 的需求从 A 发货：为通过 A-B-D 向 D 输送 $6$ 单位，从 A 运出的流量 $f_{AB}$ 必须是 $6 / (\\delta_{AB}\\delta_{BD}) = 6 / (\\frac{4}{5} \\cdot \\frac{9}{10}) = 6 / (\\frac{36}{50}) = \\frac{300}{36} = \\frac{25}{3}$。\n- 为满足 E 的需求从 A 发货：为通过 A-C-E 向 E 输送 $3$ 单位，从 A 运出的流量 $f_{AC}$ 必须是 $3 / (\\delta_{AC}\\delta_{CE}) = 3 / (\\frac{9}{10} \\cdot 1) = \\frac{30}{9} = \\frac{10}{3}$。\n- 从 A 运出的总流量：$f_{AB} + f_{AC} = \\frac{25}{3} + \\frac{10}{3} = \\frac{35}{3}$。\n这正好等于可用供给 $S=\\frac{35}{3}$。由于需求是通过最便宜的路径满足的，并且所需的总供给没有超过可用供给，因此该解是可行且最优的。\n\n总成本为 $\\frac{118}{3}$。", "answer": "$$\\boxed{\\frac{118}{3}}$$", "id": "3155859"}, {"introduction": "这个问题位于网络优化与现代分布式系统的交叉点。在点对点网络和云计算中，最大化资源分配的公平性是一个关键目标。这个动手编程练习 [@problem_id:3155862] 将指导你实现一种强大的对偶分解算法，该算法巧妙地利用“价格”作为信号来协调分布式个体的决策，从而实现全局最优。", "problem": "考虑一个点对点网络，其中有一组上传者和接收者，它们通过有向边连接，这些边表示可行的上传关系。设上传者集合由 $j \\in \\{1,\\dots,J\\}$ 索引，接收者集合由 $i \\in \\{1,\\dots,I\\}$ 索引。每个上传者 $j$ 具有非负的上传容量 $U_j$，每个接收者 $i$ 可由一个表示为 $N(i) \\subseteq \\{1,\\dots,J\\}$ 的上传者子集提供服务。定义决策变量 $x_{ji} \\ge 0$ 为从上传者 $j$ 分配给接收者 $i$ 的上传速率。容量约束要求对所有 $j$ 都有 $\\sum_{i=1}^{I} x_{ji} \\le U_j$，接收者 $i$ 的接收速率为 $r_i = \\sum_{j \\in N(i)} x_{ji}$。网络效用最大化问题是选择分配方案以最大化公平性，即最大化接收速率的对数之和：\n$$\n\\text{maximize } \\sum_{i=1}^{I} \\log(r_i)\n$$\n约束条件为\n$$\nx_{ji} \\ge 0 \\text{ for all } j,i, \\quad \\sum_{i=1}^{I} x_{ji} \\le U_j \\text{ for all } j, \\quad r_i = \\sum_{j \\in N(i)} x_{ji} \\text{ for all } i.\n$$\n从凸优化和拉格朗日对偶的核心定义出发，推导一种对偶分解方法，其中与上传者容量约束相关的影子价格（对偶变量）充当拥塞信号。实现一个算法，该算法基于这些信号迭代更新影子价格并计算主分配，使用递减的步长和非负投影。为影子价格使用一个微小的正数下限，以避免退化解。\n\n您的程序必须为以下网络配置测试套件计算近似最优接收速率向量 $r = (r_1,\\dots,r_I)$，并以指定格式生成最终结果。对于此问题，所有速率都是无量纲和无单位的。\n\n测试套件：\n- 测试用例 $1$（均衡，全连接）：\n  - 上传者：$J = 3$，容量 $U = [3, 3, 3]$。\n  - 接收者：$I = 3$。\n  - 连通性：$N(1) = \\{1,2,3\\}$, $N(2) = \\{1,2,3\\}$, $N(3) = \\{1,2,3\\}$。\n- 测试用例 $2$（异构容量，全连接）：\n  - 上传者：$J = 3$，容量 $U = [2, 5, 1]$。\n  - 接收者：$I = 3$。\n  - 连通性：$N(1) = \\{1,2,3\\}$, $N(2) = \\{1,2,3\\}$, $N(3) = \\{1,2,3\\}$。\n- 测试用例 $3$（稀疏连接，混合容量）：\n  - 上传者：$J = 4$，容量 $U = [1, 2, 2, 1]$。\n  - 接收者：$I = 3$。\n  - 连通性：$N(1) = \\{1,2\\}$, $N(2) = \\{2,3,4\\}$, $N(3) = \\{4\\}$。\n\n在您的程序中使用的算法实现细节：\n- 将所有影子价格初始化为一个正常数，例如对所有 $j$ 都有 $\\lambda_j^{(0)} = 0.5$。\n- 使用递减步长 $\\alpha_k = \\alpha_0 / (1 + k)$，其中 $\\alpha_0 = 0.1$，迭代索引 $k = 0,1,2,\\dots,K-1$。\n- 每次更新后，将影子价格投影到一个带有微小正数下限 $\\varepsilon = 10^{-6}$ 的非负集上，以保持数值稳定性。\n- 使用最大迭代次数 $K = 5000$。\n- 在每个接收者 $i$ 的主更新中，给定当前影子价格 $(\\lambda_j)$，选择 $N(i)$ 中最便宜的上传者（即达到最低价格的上传者），将 $r_i$ 设置为该最低价格的倒数，并将 $r_i$ 在最便宜的上传者之间平均分配。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含所有测试用例的速率向量列表（列表的列表），每个速率四舍五入到 $6$ 位小数，例如：\n$$\n\\text{\"[[r_{1,1},r_{1,2},\\dots],[r_{2,1},\\dots],[r_{3,1},\\dots]]\"}\n$$\n其中 $r_{t,i}$ 表示测试用例 $t$ 中接收者 $i$ 的速率。打印的行必须只包含此列表的列表字符串，不含其他任何内容。", "solution": "用户希望使用对偶分解方法解决一个网络效用最大化问题。\n\n### 1. 问题验证\n\n该问题是一个标准的网络效用最大化问题，其目标函数为比例公平函数 $\\sum_{i=1}^{I} \\log(r_i)$。这是一个众所周知的凸优化问题。所有定义、变量（$x_{ji}$, $r_i$）、参数（$J$, $I$, $U_j$, $N(i)$）和约束都清晰且正确地陈述。对偶分解方法的算法参数（初始化、步长规则、投影、迭代次数）已完全指定。测试用例定义明确，涵盖了不同的网络拓扑和容量分布。该问题在科学上植根于凸优化和网络理论，是适定的（速率 $r_i$ 的唯一解存在），并且是完整的。因此，该问题被认为是**有效的**。\n\n### 2. 对偶分解算法的理论推导\n\n主问题是：\n$$\n\\text{maximize} \\quad \\sum_{i=1}^{I} \\log\\left(\\sum_{j \\in N(i)} x_{ji}\\right)\n$$\n约束条件为：\n$$\n\\begin{align*}\n\\sum_{i=1}^{I} x_{ji} \\le U_j \\quad \\forall j \\in \\{1, \\dots, J\\} \\\\\nx_{ji} \\ge 0 \\quad \\forall i, j\n\\end{align*}\n$$\n这是一个凸优化问题。约束 $\\sum_{i=1}^{I} x_{ji} \\le U_j$ 是跨越不同接收者的耦合约束。我们可以使用拉格朗日对偶来分解该问题。我们为每个容量约束引入拉格朗日乘子（影子价格）$\\lambda_j \\ge 0$。\n\n拉格朗日函数 $L(x, \\lambda)$ 是：\n$$\nL(x, \\lambda) = \\sum_{i=1}^{I} \\log\\left(\\sum_{j \\in N(i)} x_{ji}\\right) - \\sum_{j=1}^{J} \\lambda_j \\left( \\sum_{i=1}^{I} x_{ji} - U_j \\right)\n$$\n重新整理各项，我们得到：\n$$\nL(x, \\lambda) = \\sum_{i=1}^{I} \\left( \\log\\left(\\sum_{j \\in N(i)} x_{ji}\\right) - \\sum_{j \\in N(i)} \\lambda_j x_{ji} \\right) + \\sum_{j=1}^{J} \\lambda_j U_j\n$$\n对偶函数 $g(\\lambda)$ 是拉格朗日函数在主变量 $x_{ji} \\ge 0$ 上的上确界：\n$$\ng(\\lambda) = \\sup_{x \\ge 0} L(x, \\lambda)\n$$\n该问题可以完美地分解为 $I$ 个独立的子问题，每个接收者 $i$ 对应一个：\n$$\ng(\\lambda) = \\sum_{i=1}^{I} \\sup_{x_{ji} \\ge 0, j \\in N(i)} \\left( \\log\\left(\\sum_{j \\in N(i)} x_{ji}\\right) - \\sum_{j \\in N(i)} \\lambda_j x_{ji} \\right) + \\sum_{j=1}^{J} \\lambda_j U_j\n$$\n\n**接收者子问题（主更新）：**\n对于每个接收者 $i$，我们求解：\n$$\n\\text{maximize}_{x_{ji} \\ge 0, j \\in N(i)} \\quad \\log(r_i) - \\sum_{j \\in N(i)} \\lambda_j x_{ji} \\quad \\text{where } r_i = \\sum_{j \\in N(i)} x_{ji}\n$$\n对于一个固定的总速率 $r_i$，通过将全部速率 $r_i$ 分配给 $N(i)$ 中价格 $\\lambda_j$ 最低的上传者，可以最小化 $\\sum_{j \\in N(i)} \\lambda_j x_{ji}$ 这一项。令 $\\lambda_i^* = \\min_{j \\in N(i)} \\lambda_j$。成本项变为 $\\lambda_i^* r_i$。接收者 $i$ 的子问题简化为：\n$$\n\\text{maximize}_{r_i > 0} \\quad \\log(r_i) - \\lambda_i^* r_i\n$$\n对 $r_i$ 求导并令其为零，可得：\n$$\n\\frac{1}{r_i} - \\lambda_i^* = 0 \\quad \\implies \\quad r_i^* = \\frac{1}{\\lambda_i^*}\n$$\n这是在给定当前价格 $\\lambda$ 的情况下，接收者 $i$ 的最优速率。根据问题陈述，此速率随后在可用于接收者 $i$ 的最便宜的上传者之间平均分配。\n\n**对偶问题（主问题）：**\n对偶问题是找到使对偶函数 $g(\\lambda)$ 最小化的价格 $\\lambda$：\n$$\n\\text{minimize}_{\\lambda \\ge 0} \\quad g(\\lambda)\n$$\n我们使用次梯度法来解决这个问题。$g(\\lambda)$ 关于 $\\lambda_j$ 的次梯度由下式给出：\n$$\n\\nabla_{\\lambda_j} g(\\lambda) = U_j - \\sum_{i=1}^{I} x_{ji}^*(\\lambda)\n$$\n其中 $x_{ji}^*(\\lambda)$ 是来自接收者子问题的最优分配。对偶变量的更新规则是一个梯度下降步骤：\n$$\n\\lambda_j^{(k+1)} = \\lambda_j^{(k)} - \\alpha_k \\left( U_j - \\sum_{i=1}^{I} x_{ji}^*(\\lambda^{(k)}) \\right) = \\lambda_j^{(k)} + \\alpha_k \\left( \\sum_{i=1}^{I} x_{ji}^*(\\lambda^{(k)}) - U_j \\right)\n$$\n项 $\\sum_i x_{ji}^*$ 是施加在上传者 $j$ 上的总需求。如果需求超过容量 ($U_j$)，更新规则会提高价格 $\\lambda_j$，否则会降低价格，从而提供一个拥塞信号。最后，价格被投影到至少为 $\\varepsilon > 0$，以防止它们变为零或负数，这会导致数值不稳定性 ($r_i \\to \\infty$)。\n\n### 3. 算法总结\n\n1.  **初始化**：设置影子价格 $\\lambda_j^{(0)}$（例如，设为 $0.5$），迭代次数 $k=0$。\n2.  **对 $k = 0, 1, \\dots, K-1$ 进行迭代**：\n    a.  **主更新（对每个接收者 $i$）：**\n        i.  从可用上传者中找到最低价格：$\\lambda_i^* = \\min_{j \\in N(i)} \\lambda_j^{(k)}$。\n        ii. 确定最便宜的上传者集合 $J_i^* = \\{ j \\in N(i) \\mid \\lambda_j^{(k)} = \\lambda_i^* \\}$。\n        iii. 计算最优速率：$r_i = 1 / \\lambda_i^*$。\n        iv. 确定流量分配 $x_{ji}$。对于每个 $j \\in J_i^*$，设置 $x_{ji} = r_i / |J_i^*|$。对于所有其他 $j$，设置 $x_{ji}=0$。\n    b.  **对偶更新（对每个上传者 $j$）：**\n        i.  计算上传者 $j$ 上的总需求：$d_j = \\sum_{i=1}^{I} x_{ji}$。\n        ii. 计算递减步长：$\\alpha_k = \\alpha_0 / (1+k)$。\n        iii. 更新价格：$\\lambda_j^{\\text{new}} = \\lambda_j^{(k)} + \\alpha_k (d_j - U_j)$。\n        iv. 投影价格：$\\lambda_j^{(k+1)} = \\max(\\varepsilon, \\lambda_j^{\\text{new}})$。\n3.  **结果**：最终计算出的速率是最后一次迭代得到的向量 $r=(r_1, r_2, \\dots, r_I)$。\n\n该算法针对提供的三个测试用例中的每一个进行实现。", "answer": "```python\nimport numpy as np\n\ndef run_simulation(J, I, U, N_map, K, alpha0, lambda0_val, epsilon):\n    \"\"\"\n    Solves the network utility maximization problem using dual decomposition.\n\n    Args:\n        J (int): Number of uploaders.\n        I (int): Number of receivers.\n        U (list or np.ndarray): Capacities of uploaders.\n        N_map (list of lists): Connectivity map, N_map[i] are uploaders for receiver i.\n        K (int): Number of iterations.\n        alpha0 (float): Initial step-size parameter.\n        lambda0_val (float): Initial value for shadow prices.\n        epsilon (float): Small positive floor for shadow prices.\n\n    Returns:\n        np.ndarray: The computed rate vector for the receivers.\n    \"\"\"\n    lambdas = np.full(J, float(lambda0_val))\n    U = np.array(U, dtype=float)\n    rates = np.zeros(I, dtype=float)\n\n    for k in range(K):\n        # Primal update phase (receivers solve their subproblems)\n        allocations = np.zeros((J, I), dtype=float)\n        \n        for i in range(I):\n            available_uploaders = N_map[i]\n            \n            # Find the minimum price among available uploaders for receiver i\n            min_lambda = float('inf')\n            if not available_uploaders:\n                continue\n            \n            # More robust way to find minimum from a subset of an array\n            min_lambda = np.min(lambdas[available_uploaders])\n            \n            # Identify all uploaders offering this minimum price\n            cheapest_uploaders = [j for j in available_uploaders if lambdas[j] == min_lambda]\n            \n            # Calculate receiver's optimal rate based on the cheapest price\n            # The epsilon floor on lambdas prevents division by zero\n            rate_i = 1.0 / min_lambda\n            rates[i] = rate_i\n            \n            # Allocate the rate equally among the cheapest uploaders\n            if cheapest_uploaders:\n                alloc_per_uploader = rate_i / len(cheapest_uploaders)\n                for j in cheapest_uploaders:\n                    allocations[j, i] = alloc_per_uploader\n        \n        # Dual update phase (uploaders update their prices)\n        # Calculate total demand d_j for each uploader j\n        demands = np.sum(allocations, axis=1)\n        \n        # Calculate step size\n        step_size = alpha0 / (1.0 + k)\n        \n        # Calculate subgradients\n        subgradients = demands - U\n        \n        # Update lambda values\n        lambdas += step_size * subgradients\n        \n        # Project lambdas onto [epsilon, +inf)\n        lambdas = np.maximum(epsilon, lambdas)\n        \n    return rates\n\ndef solve():\n    \"\"\"\n    Defines test cases, runs the simulation for each, and prints the results.\n    \"\"\"\n    # Algorithm parameters from the problem statement\n    K = 5000\n    alpha0 = 0.1\n    lambda0_val = 0.5\n    epsilon = 1e-6\n\n    test_cases = [\n        {\n            \"J\": 3, \"I\": 3, \"U\": [3, 3, 3],\n            \"N_map\": [[0, 1, 2], [0, 1, 2], [0, 1, 2]]\n        },\n        {\n            \"J\": 3, \"I\": 3, \"U\": [2, 5, 1],\n            \"N_map\": [[0, 1, 2], [0, 1, 2], [0, 1, 2]]\n        },\n        {\n            \"J\": 4, \"I\": 3, \"U\": [1, 2, 2, 1],\n            # Connectivity N(i) from problem statement is 1-indexed.\n            # Convert to 0-indexed for Python.\n            # N(1)={1,2}, N(2)={2,3,4}, N(3)={4}\n            \"N_map\": [[0, 1], [1, 2, 3], [3]]\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        rates = run_simulation(\n            case[\"J\"], case[\"I\"], case[\"U\"], case[\"N_map\"],\n            K, alpha0, lambda0_val, epsilon\n        )\n        # Round the final rates to 6 decimal places as required\n        rounded_rates = np.round(rates, 6).tolist()\n        results.append(rounded_rates)\n\n    # Format the output string exactly as specified: [[r11,r12,...],[r21,...],...]\n    # Using str() on the list of lists produces the required format without extra spaces.\n    final_output_str = str(results).replace(\" \", \"\")\n    print(final_output_str)\n\nsolve()\n```", "id": "3155862"}]}