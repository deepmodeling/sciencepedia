{"hands_on_practices": [{"introduction": "学习算法的核心在于亲手实践其每一个步骤。本练习将带领你完整地走一遍匈牙利算法的流程，从初始的矩阵规约到寻找最优指派，最终确定最小成本。通过这个练习，你将掌握该算法的关键操作，并理解它如何系统性地找到最优解，这对于在更复杂的问题中应用该算法至关重要。[@problem_id:1542864]", "problem": "一家名为“Aether-Logistics”的机器人公司，在一次工业事故后，部署了一组由四架特种无人机（D1, D2, D3, D4）组成的团队，以勘测四个不同的危险区域（Z1, Z2, Z3, Z4）。由于无人机能力和区域特性的不同，每项无人机-区域分配任务的预计运营成本也各不相同。该公司编制了一个成本矩阵，其中第 $i$ 行第 $j$ 列的条目代表将无人机 $D_i$ 分配给区域 $Z_j$ 的成本。较低的成本值表明分配方案更高效、更安全。\n\n成本矩阵如下：\n$$\n\\text{成本} = \\begin{pmatrix}\n\\text{} & Z1 & Z2 & Z3 & Z4 \\\\\nD1 & 90 & 75 & 75 & 80 \\\\\nD2 & 35 & 85 & 55 & 65 \\\\\nD3 & 125 & 95 & 90 & 105 \\\\\nD4 & 45 & 110 & 95 & 115\n\\end{pmatrix}\n$$\n\n目标是为每个区域精确分配一架无人机，以使总运营成本最小化。计算此次完整分配的最低可能总成本。请将答案表示为单个整数。", "solution": "我们将此分配问题建模为选择一个 $\\{1,2,3,4\\}$ 的排列 $\\sigma$，以最小化总成本 $T(\\sigma) = \\sum_{i=1}^{4} C_{i,\\sigma(i)}$，其中\n$$\nC=\\begin{pmatrix}\n90 & 75 & 75 & 80 \\\\\n35 & 85 & 55 & 65 \\\\\n125 & 95 & 90 & 105 \\\\\n45 & 110 & 95 & 115\n\\end{pmatrix}.\n$$\n应用匈牙利算法。首先通过减去各行的最小值 $r_1=75$，$r_2=35$，$r_3=90$，$r_4=45$ 来进行行归约：\n$$\n\\begin{pmatrix}\n15 & 0 & 0 & 5 \\\\\n0 & 50 & 20 & 30 \\\\\n35 & 5 & 0 & 15 \\\\\n0 & 65 & 50 & 70\n\\end{pmatrix}.\n$$\n接下来进行列归约。第1、2、3列的最小值均为$0$，第4列的最小值为$5$。从第4列减去$5$得到：\n$$\n\\begin{pmatrix}\n15 & 0 & 0 & 0 \\\\\n0 & 50 & 20 & 25 \\\\\n35 & 5 & 0 & 10 \\\\\n0 & 65 & 50 & 65\n\\end{pmatrix}.\n$$\n用最少数目的直线覆盖所有的零；一种选择是画线覆盖第1行、第1列和第3列，总共3条线，少于4。未被覆盖的最小元素是 $\\alpha=5$。从未被覆盖的所有元素中减去 $\\alpha$，并在覆盖线的交叉处加上 $\\alpha$。这得到：\n$$\n\\begin{pmatrix}\n20 & 0 & 5 & 0 \\\\\n0 & 45 & 20 & 20 \\\\\n35 & 0 & 0 & 5 \\\\\n0 & 60 & 50 & 60\n\\end{pmatrix}.\n$$\n再次用最少数目的直线覆盖所有的零；一种选择是画线覆盖第1行、第3行和第1列，仍然是3条线。未被覆盖的最小元素是 $\\beta=20$。从未被覆盖的所有元素中减去 $\\beta$，并在交叉处加上 $\\beta$，得到：\n$$\n\\begin{pmatrix}\n40 & 0 & 5 & 0 \\\\\n0 & 25 & 0 & 0 \\\\\n55 & 0 & 0 & 5 \\\\\n0 & 40 & 30 & 40\n\\end{pmatrix}.\n$$\n现在选择独立的零以形成一个完整的分配。一个有效的选择是 $D_{4}\\to Z_{1}$，$D_{3}\\to Z_{2}$，$D_{1}\\to Z_{4}$，$D_{2}\\to Z_{3}$。在原始矩阵中，相应的总成本是\n$$\nT = C_{4,1} + C_{3,2} + C_{1,4} + C_{2,3} = 45 + 95 + 80 + 55 = 275.\n$$\n根据匈牙利算法的最优性保证，这是可能的最低总成本。", "answer": "$$\\boxed{275}$$", "id": "1542864"}, {"introduction": "成功执行匈牙利算法后，正确解读最终矩阵是得出正确答案的关键一步。本练习旨在让你专注于如何从最终的规约成本矩阵中的零元素来识别最优指派方案，并强调必须返回*原始*成本矩阵来计算最终的最小总成本。这个实践能帮助你避免一个常见的误区，即混淆规约矩阵与原始成本的意义，从而加深对算法工作原理的理解。[@problem_id:1542854]", "problem": "一家小型科技初创公司的项目经理负责将四名工程师——Alex、Ben、Chloe和David——分配到四个不同的软件开发任务：Authentication、Billing、Caching和Discovery。为确保项目尽快完成，经理需要找到一个能使总预估时间最小化的分配方案。每位工程师必须且只能被分配一项任务。\n\n初始成本矩阵 $C$ 表示每位工程师完成各项任务的预估时间（以小时为单位）。\n\n$$\nC =\n\\begin{pmatrix}\n & \\text{Auth} & \\text{Billing} & \\text{Caching} & \\text{Discovery} \\\\\n\\text{Alex} & 25 & 15 & 20 & 30 \\\\\n\\text{Ben} & 10 & 18 & 22 & 28 \\\\\n\\text{Chloe} & 24 & 20 & 18 & 12 \\\\\n\\text{David} & 16 & 21 & 13 & 17\n\\end{pmatrix}\n$$\n\n经理使用匈牙利算法来确定最优分配方案。运行该算法（其中涉及行和列的归约，以及可能的其他步骤）后，生成了修改后的成本矩阵 $C'$。最优分配可以从这个最终矩阵中零值条目的位置确定。\n\n$$\nC' =\n\\begin{pmatrix}\n & \\text{Auth} & \\text{Billing} & \\text{Caching} & \\text{Discovery} \\\\\n\\text{Alex} & 10 & 0 & 5 & 15 \\\\\n\\text{Ben} & 0 & 8 & 12 & 18 \\\\\n\\text{Chloe} & 12 & 8 & 6 & 0 \\\\\n\\text{David} & 3 & 8 & 0 & 4\n\\end{pmatrix}\n$$\n\n使用最终修改后的成本矩阵 $C'$ 来确定工程师与任务的最优配对，计算完成所有四项任务所需的总最少时间。请用小时表示您的答案。", "solution": "匈牙利算法保证，在最终的归约成本矩阵中，选择一组零值条目（每行和每列各有一个）即可得到一个使总原始成本最小化的最优分配。\n\n从给定的最终矩阵 $C'$ 中，为每行确定一个位于不同列的零值条目：\n- Alex 行只有一个零，位于 Billing 列，因此选择 $(\\text{Alex}, \\text{Billing})$。\n- Ben 行只有一个零，位于 Auth 列，因此选择 $(\\text{Ben}, \\text{Auth})$。\n- Chloe 行只有一个零，位于 Discovery 列，因此选择 $(\\text{Chloe}, \\text{Discovery})$。\n- David 行只有一个零，位于 Caching 列，因此选择 $(\\text{David}, \\text{Caching})$。\n\n这些列都各不相同，因此这是一个有效的完美匹配，并且根据该算法，这是最优解。\n\n使用原始成本矩阵 $C$ 计算总时间：\n$$\nT \\;=\\; C_{\\text{Alex,Billing}} \\;+\\; C_{\\text{Ben,Auth}} \\;+\\; C_{\\text{Chloe,Discovery}} \\;+\\; C_{\\text{David,Caching}}.\n$$\n代入 $C$ 中的相应数值：\n$$\nT \\;=\\; 15 \\;+\\; 10 \\;+\\; 12 \\;+\\; 13 \\;=\\; 50.\n$$\n因此，最少总时间为 $50$ 小时。", "answer": "$$\\boxed{50}$$", "id": "1542854"}, {"introduction": "现实世界中的指派问题常常伴随着各种特殊限制，例如某些任务不能分配给特定的人员。本练习将探讨如何调整匈牙利算法以处理“禁止指派”这类约束条件。通过学习如何在成本矩阵中巧妙地为这类约束建模，你将能够把匈牙利算法的应用范围扩展到更广泛、更切合实际的优化问题中。[@problem_id:1542881]", "problem": "一家小型IT咨询公司“ByteBridge Solutions”有四位可用的顾问：Alice、Bob、Charles和Diana。公司需要将他们每人分配到四个不同的项目之一：数据库迁移（DM）、云安全审计（CSA）、网络改造（NO）和前端重新设计（FR）。每位顾问的技能组合不同，导致完成每个项目的预估工时（代表成本）也不同。目标是为每个项目分配一名顾问，使得所有四个项目的总工时最小化。\n\n下面的成本矩阵显示了每个顾问-项目组合的预估工时：\n\n| | DM | CSA | NO | FR |\n| :---: | :--: | :--: | :--: | :--: |\n| **Alice** | 25 | 18 | 22 | 19 |\n| **Bob** | 21 | 24 | 28 | 23 |\n| **Charles**| 20 | 17 | 21 | 24 |\n| **Diana**| 27 | 20 | 19 | 22 |\n\n然而，存在一个关键约束：由于先前业务存在利益冲突，Charles不能被分配到网络改造（NO）项目。\n\n为了使用标准的最小化算法（如匈牙利法）解决这个指派问题，必须首先构建一个考虑了所有约束条件的适当的初始成本矩阵。以下哪个矩阵正确地表示了该问题的初始设置？设 $M$ 表示一个非常大的正数，远大于矩阵中的任何其他成本。\n\nA.\n$$\n\\begin{pmatrix}\n25 & 18 & 22 & 19 \\\\\n21 & 24 & 28 & 23 \\\\\n20 & 17 & 0 & 24 \\\\\n27 & 20 & 19 & 22\n\\end{pmatrix}\n$$\n\nB.\n$$\n\\begin{pmatrix}\n25 & 18 & 22 & 19 \\\\\n21 & 24 & 28 & 23 \\\\\n20 & 17 & M & 24 \\\\\n27 & 20 & 19 & 22\n\\end{pmatrix}\n$$\n\nC.\n$$\n\\begin{pmatrix}\n25 & 18 & 22 & 19 \\\\\n21 & 24 & 28 & 23 \\\\\n20 & 17 & 21 & 24 \\\\\n27 & 20 & 19 & 22\n\\end{pmatrix}\n$$\n\nD.\n$$\n\\begin{pmatrix}\n25 & 18 & 22 & 19 \\\\\n21 & 24 & 28 & 23 \\\\\n20 & 17 & -1 & 24 \\\\\n27 & 20 & 19 & 22\n\\end{pmatrix}\n$$\n\nE.\n$$\n\\begin{pmatrix}\n25 & 18 & 19 \\\\\n21 & 24 & 23 \\\\\n20 & 17 & 24 \\\\\n27 & 20 & 22\n\\end{pmatrix}\n$$", "solution": "我们将此指派问题建模为标准的线性指派问题。设成本矩阵为 $C$，其行由顾问 $i \\in \\{\\text{Alice}, \\text{Bob}, \\text{Charles}, \\text{Diana}\\}$ 索引，列由项目 $j \\in \\{\\text{DM}, \\text{CSA}, \\text{NO}, \\text{FR}\\}$ 索引。设 $x_{ij} \\in \\{0,1\\}$ 表示顾问 $i$ 是否被分配到项目 $j$。目标是最小化总成本：\n$$\n\\min \\sum_{i}\\sum_{j} C_{ij} x_{ij}\n$$\n受限于以下指派约束：\n$$\n\\sum_{j} x_{ij} = 1 \\quad \\text{for each consultant } i, \\quad \\sum_{i} x_{ij} = 1 \\quad \\text{for each project } j,\n$$\n以及题目陈述中的约束条件：\n$$\nx_{\\text{Charles},\\text{NO}} = 0.\n$$\n为了在成本矩阵上使用匈牙利法同时强制执行禁止的指派，标准做法是通过为相应条目赋一个非常大的惩罚值 $M$ 来编码这种不可能性，从而在最小化问题中，任何使用该指派的解都会被支配。具体来说，将 $C_{\\text{Charles},\\text{NO}}$ 替换为 $M$，其中 $M$ 是一个非常大的正数，远大于 $C$ 中的任何其他条目。这确保了任何可行的最优指派都会避免选择 $x_{\\text{Charles},\\text{NO}}=1$。\n\n评估各个选项：\n- 在 A 中， $C_{\\text{Charles},\\text{NO}}$ 被设为 $0$，这将使被禁止的指派人为地变得有吸引力，从而违反了约束条件。\n- 在 B 中， $C_{\\text{Charles},\\text{NO}}$ 被设为 $M$，通过一个大的惩罚值正确地编码了禁止条件。\n- 在 C 中， $C_{\\text{Charles},\\text{NO}}$ 仍为 $21$，未能编码该约束条件。\n- 在 D 中， $C_{\\text{Charles},\\text{NO}}$ 被设为 $-1$，这同样会使被禁止的指派更具吸引力，从而违反了约束条件。\n- 在 E 中，矩阵省略了一列，产生了一个只有三个项目的非方阵，这不代表原始问题，并且在此背景下不是匈牙利法的有效初始矩阵。\n\n因此，正确的初始成本矩阵是将禁止的条目替换为 $M$ 的那个矩阵，即选项 B。", "answer": "$$\\boxed{B}$$", "id": "1542881"}]}