{"hands_on_practices": [{"introduction": "要真正掌握交并比（$IoU$），最好的方法就是从头开始推导它。本练习将引导你仅使用轴对齐矩形的面积和重叠的基本定义，来构建 $IoU$ 的数学表达式。通过这个过程，你不仅能牢固掌握 $IoU$ 的计算方法，还能深入理解为何中心点位置误差和尺寸误差在优化 $IoU$ 时是相互耦合的，这是设计有效回归损失函数的关键洞察 [@problem_id:3160509]。", "problem": "考虑用于目标检测的两个轴对齐的矩形边界框，每个边界框由其中心坐标、宽度和高度表示。设真实框的中心为 $(x, y)$，宽度为 $w$，高度为 $h$；预测框的中心为 $(\\hat{x}, \\hat{y})$，宽度为 $\\hat{w}$，高度为 $\\hat{h}$。交并比（Intersection over Union, IoU）定义为两个框的交集面积与并集面积之比。你将仅从轴对齐矩形之间面积重叠的核心定义以及集合并集的定义出发，推导和分析 IoU。\n\n(a) 仅使用以下定义：两个区间在某一轴上的重叠是这两个区间交集的长度，以及轴对齐矩形的交集面积等于它们在两个轴上重叠范围的乘积。请在此基础上，推导当两个框共享同一中心，即 $(\\hat{x}, \\hat{y}) = (x, y)$ 时的特殊情况下 $\\mathrm{IoU}$ 的表达式。然后，从第一性原理出发，论证为什么在这种特殊情况下，最大化 $\\mathrm{IoU}$ 等同于最小化绝对差 $|w - \\hat{w}|$ 和 $|h - \\hat{h}|$。\n\n(b) 将你的推导扩展到中心不重合的情况 $(\\hat{x}, \\hat{y}) \\neq (x, y)$，其中水平和垂直偏移分别为 $\\Delta x = \\hat{x} - x$ 和 $\\Delta y = \\hat{y} - y$。用 $w$, $\\hat{w}$, $h$, $\\hat{h}$, $|\\Delta x|$ 和 $|\\Delta y|$ 表示水平和垂直轴上的重叠范围，并给出相应的 $\\mathrm{IoU}$ 表达式。基于此表达式，讨论为了最大化 $\\mathrm{IoU}$，中心位置的误差和尺寸的误差是否可以解耦。\n\n(c) 对于一个具体配置，设真实框的中心为 $(0, 0)$，宽 $w = 6$，高 $h = 4$；预测框的中心为 $(1, -0.5)$，宽 $\\hat{w} = 5$，高 $\\hat{h} = 3$。计算所得的 $\\mathrm{IoU}$。将你的最终答案四舍五入到四位有效数字。最终答案必须是一个无单位的实数。", "solution": "问题要求推导和分析两个轴对齐矩形框的交并比（IoU）指标。我们将系统地解决每个部分。真实框由其中心 $(x, y)$、宽度 $w$ 和高度 $h$ 定义。预测框由其中心 $(\\hat{x}, \\hat{y})$、宽度 $\\hat{w}$ 和高度 $\\hat{h}$ 定义。\n\n(a) 特殊情况：中心重合的框\n\n首先，我们考虑两个框共享同一中心的特殊情况，即 $(\\hat{x}, \\hat{y}) = (x, y)$。\n\n一个轴对齐的矩形可以由水平轴和垂直轴上两个闭区间的笛卡尔积来描述。\n真实框对应于水平区间 $[x - w/2, x + w/2]$ 和垂直区间 $[y - h/2, y + h/2]$。\n共享同一中心的预测框对应于水平区间 $[x - \\hat{w}/2, x + \\hat{w}/2]$ 和垂直区间 $[y - \\hat{h}/2, y + \\hat{h}/2]$。\n\n两个轴对齐矩形的交集面积是它们相应一维区间交集长度的乘积。\n两个水平区间 $[x - w/2, x + w/2]$ 和 $[x - \\hat{w}/2, x + \\hat{w}/2]$ 的交集是另一个以 $x$ 为中心的区间。其半宽是两个半宽中的较小者，即 $\\min(w/2, \\hat{w}/2)$。此交集的长度为 $2 \\cdot \\min(w/2, \\hat{w}/2) = \\min(w, \\hat{w})$。\n类似地，两个垂直区间交集的长度为 $\\min(h, \\hat{h})$。\n\n因此，交集面积 $A_I$ 为：\n$$A_I = \\min(w, \\hat{w}) \\cdot \\min(h, \\hat{h})$$\n\n两个集合的并集面积由容斥原理给出：$A_U = A_{GT} + A_P - A_I$，其中 $A_{GT} = wh$ 是真实框的面积，$A_P = \\hat{w}\\hat{h}$ 是预测框的面积。\n$$A_U = wh + \\hat{w}\\hat{h} - \\min(w, \\hat{w}) \\min(h, \\hat{h})$$\n\n交并比 $\\mathrm{IoU}$ 是这两个面积的比值：\n$$\\mathrm{IoU} = \\frac{A_I}{A_U} = \\frac{\\min(w, \\hat{w}) \\min(h, \\hat{h})}{wh + \\hat{w}\\hat{h} - \\min(w, \\hat{w}) \\min(h, \\hat{h})}$$\n\n为论证为何最大化 $\\mathrm{IoU}$ 等同于最小化绝对差 $|w - \\hat{w}|$ 和 $|h - \\hat{h}|$，我们分析 $\\mathrm{IoU}$ 的表达式。最大化该分式等价于最小化其倒数：\n$$\\frac{1}{\\mathrm{IoU}} = \\frac{wh + \\hat{w}\\hat{h}}{\\min(w, \\hat{w}) \\min(h, \\hat{h})} - 1 = \\frac{w}{\\min(w, \\hat{w})} \\frac{h}{\\min(h, \\hat{h})} + \\frac{\\hat{w}}{\\min(w, \\hat{w})} \\frac{\\hat{h}}{\\min(h, \\hat{h})} - 1$$\n让我们分析这些比率。项 $\\frac{w}{\\min(w, \\hat{w})}$ 在 $w \\le \\hat{w}$ 时等于 $1$，在 $w > \\hat{w}$ 时等于 $w/\\hat{w}$。这可以紧凑地写为 $\\max(1, w/\\hat{w})$。类似地，$\\frac{\\hat{w}}{\\min(w, \\hat{w})} = \\max(1, \\hat{w}/w)$。将这些代入表达式中，得到：\n$$\\frac{1}{\\mathrm{IoU}} = \\max\\left(1, \\frac{w}{\\hat{w}}\\right) \\max\\left(1, \\frac{h}{\\hat{h}}\\right) + \\max\\left(1, \\frac{\\hat{w}}{w}\\right) \\max\\left(1, \\frac{\\hat{h}}{h}\\right) - 1$$\n像 $\\max(1, w/\\hat{w})$ 这样的每个比率项总是大于或等于 $1$。当所有比率都恰好为 $1$ 时，该表达式达到最小值。这当且仅当 $w = \\hat{w}$ 且 $h = \\hat{h}$ 时发生。在这种情况下，$1/\\mathrm{IoU} = 1 \\cdot 1 + 1 \\cdot 1 - 1 = 1$，这意味着 $\\mathrm{IoU}=1$，即可能的最大值。\n$\\hat{w}$ 与 $w$ 的任何偏差（即 $|w - \\hat{w}| > 0$）或 $\\hat{h}$ 与 $h$ 的任何偏差（即 $|h - \\hat{h}| > 0$）都会使至少一个比率严格大于 $1$。例如，如果 $\\hat{w} \\neq w$，则 $w/\\hat{w} \\neq 1$ 或 $\\hat{w}/w \\neq 1$，使得 $\\max(1, w/\\hat{w})>1$ 或 $\\max(1, \\hat{w}/w)>1$。这会增加 $1/\\mathrm{IoU}$ 的值，从而减小 $\\mathrm{IoU}$。因此，在这种中心重合的情况下最大化 $\\mathrm{IoU}$ 等价于使 $\\hat{w} \\to w$ 和 $\\hat{h} \\to h$，这与最小化 $|w - \\hat{w}|$ 和 $|h - \\hat{h}|$ 是相同的。\n\n(b) 一般情况：中心不重合的框\n\n现在我们将推导扩展到具有中心偏移 $\\Delta x = \\hat{x} - x$ 和 $\\Delta y = \\hat{y} - y$ 的一般情况。真实框的水平区间为 $[x_1, x_2] = [x - w/2, x + w/2]$，垂直区间为 $[y_1, y_2] = [y - h/2, y + h/2]$。预测框的水平区间为 $[\\hat{x}_1, \\hat{x}_2] = [\\hat{x} - \\hat{w}/2, \\hat{x} + \\hat{w}/2]$，垂直区间为 $[\\hat{y}_1, \\hat{y}_2] = [\\hat{y} - \\hat{h}/2, \\hat{y} + \\hat{h}/2]$。\n\n两个区间 $[a,b]$ 和 $[c,d]$ 交集的长度由 $\\max(0, \\min(b, d) - \\max(a, c))$ 给出。\n重叠的水平范围 $W_{int}$ 是：\n$$W_{int} = \\max(0, \\min(x_2, \\hat{x}_2) - \\max(x_1, \\hat{x}_1)) = \\max\\left(0, \\min\\left(x + \\frac{w}{2}, \\hat{x} + \\frac{\\hat{w}}{2}\\right) - \\max\\left(x - \\frac{w}{2}, \\hat{x} - \\frac{\\hat{w}}{2}\\right)\\right)$$\n类似地，重叠的垂直范围 $H_{int}$ 是：\n$$H_{int} = \\max(0, \\min(y_2, \\hat{y}_2) - \\max(y_1, \\hat{y}_1)) = \\max\\left(0, \\min\\left(y + \\frac{h}{2}, \\hat{y} + \\frac{\\hat{h}}{2}\\right) - \\max\\left(y - \\frac{h}{2}, \\hat{y} - \\frac{\\hat{h}}{2}\\right)\\right)$$\n这些表达式是通用的，并且是两个框的中心和尺寸的函数。尽管交集的长度对于偏移量的符号是对称的（例如，取决于 $|\\Delta x|$），但由于相对尺寸和位置之间复杂的相互作用，不使用 min/max 函数或进行情况分析，就无法仅用 $w$、$\\hat{w}$ 和 $|\\Delta x|$ 来表示 $W_{int}$。\n\n交集面积为 $A_I = W_{int} \\cdot H_{int}$。并集面积为 $A_U = wh + \\hat{w}\\hat{h} - A_I$。一般的 $\\mathrm{IoU}$ 表达式为：\n$$\\mathrm{IoU} = \\frac{W_{int} \\cdot H_{int}}{wh + \\hat{w}\\hat{h} - W_{int} \\cdot H_{int}}$$\n\n现在，我们讨论为了最大化 $\\mathrm{IoU}$，中心位置的误差 $(\\Delta x, \\Delta y)$ 和尺寸的误差 $(\\hat{w}, \\hat{h})$ 是否可以解耦。这些参数是耦合的。$W_{int}$ 的表达式同时取决于中心坐标 $(x, \\hat{x})$ 和宽度 $(w, \\hat{w})$。同样，$H_{int}$ 取决于 $(y, \\hat{y})$ 和 $(h, \\hat{h})$。$\\mathrm{IoU}$ 是这些交集范围的非线性函数。\n$$\\mathrm{IoU}(\\Delta x, \\Delta y, \\hat{w}, \\hat{h}) = \\frac{W_{int}(\\Delta x, \\hat{w}) \\cdot H_{int}(\\Delta y, \\hat{h})}{wh + \\hat{w}\\hat{h} - W_{int}(\\Delta x, \\hat{w}) \\cdot H_{int}(\\Delta y, \\hat{h})}$$\n在此函数中，变量是不可分的。例如，$\\mathrm{IoU}$ 关于 $\\hat{w}$ 的梯度取决于 $\\Delta x, \\Delta y,$ 和 $\\hat{h}$。宽度的变化 $\\Delta \\hat{w}$ 对 $\\mathrm{IoU}$ 的影响受到当前偏移 $\\Delta x$ 的调节。如果 $|\\Delta x|$ 很大，以至于两个框在水平方向上相距很远（$W_{int}=0$），那么 $\\hat{w}$ 的微小变化对 $A_I$ 没有影响，因此对 $\\mathrm{IoU}$ 几乎没有影响。然而，如果两个框在水平方向上完全居中（$\\Delta x = 0$），那么同样的 $\\hat{w}$ 变化可能对 $W_{int}$ 产生显著影响，从而对 $\\mathrm{IoU}$ 产生显著影响，如 (a) 部分所示。因为 $\\mathrm{IoU}$ 对一个参数（例如 $\\hat{w}$）误差的敏感性取决于另一个参数（例如 $\\Delta x$）的值，所以这些误差不能被认为是解耦的。因此，为了最大化 $\\mathrm{IoU}$，必须同时优化所有四个预测参数：$\\hat{x}, \\hat{y}, \\hat{w}, \\hat{h}$。\n\n(c) 数值计算\n\n给定以下配置：\n真实框：中心 $(x, y)=(0, 0)$，宽度 $w=6$，高度 $h=4$。\n预测框：中心 $(\\hat{x}, \\hat{y})=(1, -0.5)$，宽度 $\\hat{w}=5$，高度 $\\hat{h}=3$。\n\n首先，我们确定框边界的坐标。\n对于真实框：\n$x_1 = x - w/2 = 0 - 6/2 = -3$\n$x_2 = x + w/2 = 0 + 6/2 = 3$\n$y_1 = y - h/2 = 0 - 4/2 = -2$\n$y_2 = y + h/2 = 0 + 4/2 = 2$\n\n对于预测框：\n$\\hat{x}_1 = \\hat{x} - \\hat{w}/2 = 1 - 5/2 = -1.5$\n$\\hat{x}_2 = \\hat{x} + \\hat{w}/2 = 1 + 5/2 = 3.5$\n$\\hat{y}_1 = \\hat{y} - \\hat{h}/2 = -0.5 - 3/2 = -2$\n$\\hat{y}_2 = \\hat{y} + \\hat{h}/2 = -0.5 + 3/2 = 1$\n\n接下来，我们使用 (b) 部分的公式计算重叠范围。\n$W_{int} = \\max(0, \\min(x_2, \\hat{x}_2) - \\max(x_1, \\hat{x}_1)) = \\max(0, \\min(3, 3.5) - \\max(-3, -1.5)) = \\min(3, 3.5) - \\max(-3, -1.5) = 3 - (-1.5) = 4.5$。\n$H_{int} = \\max(0, \\min(y_2, \\hat{y}_2) - \\max(y_1, \\hat{y}_1)) = \\max(0, \\min(2, 1) - \\max(-2, -2)) = \\min(2, 1) - \\max(-2, -2) = 1 - (-2) = 3$。\n\n交集面积为：\n$A_I = W_{int} \\cdot H_{int} = 4.5 \\times 3 = 13.5$。\n\n单个框的面积为：\n$A_{GT} = w \\cdot h = 6 \\times 4 = 24$。\n$A_P = \\hat{w} \\cdot \\hat{h} = 5 \\times 3 = 15$。\n\n并集面积为：\n$A_U = A_{GT} + A_P - A_I = 24 + 15 - 13.5 = 39 - 13.5 = 25.5$。\n\n最后，我们计算 $\\mathrm{IoU}$：\n$$\\mathrm{IoU} = \\frac{A_I}{A_U} = \\frac{13.5}{25.5} = \\frac{135}{255} = \\frac{27}{51} = \\frac{9}{17}$$\n换算成小数，即 $9/17 \\approx 0.52941176...$。\n四舍五入到四位有效数字，得到 $0.5294$。", "answer": "$$\\boxed{0.5294}$$", "id": "3160509"}, {"introduction": "在推导出 $IoU$ 的公式后，理解它为何成为目标检测中衡量定位精度的首选指标至关重要。本练习通过两个对比鲜明的场景，展示了像中心点欧氏距离这类更简单的度量标准的局限性。通过计算和分析这些案例 [@problem_id:3160438]，你将体会到 $IoU$ 如何能够全面地评估预测框与真实框在位置、尺度和形状上的匹配程度，而这正是实现精确目标定位的核心。", "problem": "考虑二维图像平面中的轴对齐矩形边界框。一个边界框由其中心坐标 $(x,y)$、宽度 $w$ 和高度 $h$ 参数化。对于两个框，将交并比 (Intersection-over-Union, IoU) 定义为它们的交集面积与并集面积之比，将中心距离度量定义为它们中心之间的欧几里得距离（单位为像素）。交并比 (IoU) 和欧几里得中心距离被广泛用于评估目标检测定位。在本题中，您将比较这两种度量在给出相反判断的两个场景中的表现。\n\n场景对 $1$：真实框 $G_1$ 的中心为 $(50,50)$，宽度为 $40$，高度为 $20$。预测框 $P_1$ 的中心为 $(51,49)$，宽度为 $6$，高度为 $6$。\n\n场景对 $2$：真实框 $G_2$ 的中心为 $(200,200)$，宽度为 $300$，高度为 $300$。预测框 $P_2$ 的中心为 $(280,200)$，宽度为 $300$，高度为 $300$。\n\n选择所有正确的陈述：\n\nA. 在场景对 $1$ 中，中心距离小于 $2$ 像素，但由于长宽比和尺寸不匹配，交并比低于 $0.05$。\n\nB. 在场景对 $2$ 中，中心距离超过 $75$ 像素，但由于框很大且重叠度高，交并比至少为 $0.55$。\n\nC. 对于所有轴对齐矩形，中心距离和交并比是等价的度量，它们对预测的排序完全相同。\n\nD. 这两对场景所突显的不匹配表明，仅最小化中心距离可能导致较差的 IoU，反之亦然。因此，一个包含重叠概念的损失函数（例如，广义交并比 GIoU）对于鲁棒的定位是必要的。", "solution": "对问题陈述的有效性进行评估。\n\n**步骤 1：提取给定条件**\n- 一个边界框由其中心坐标 $(x,y)$、宽度 $w$ 和高度 $h$ 参数化。\n- 交并比 (IoU) 定义为两个框交集面积与并集面积之比。\n- 中心距离定义为两个框中心之间的欧几里得距离。\n- 场景对 $1$：\n  - 真实框 $G_1$：中心 $(50,50)$，宽度 $w_1=40$，高度 $h_1=20$。\n  - 预测框 $P_1$：中心 $(51,49)$，宽度 $w'_1=6$，高度 $h'_1=6$。\n- 场景对 $2$：\n  - 真实框 $G_2$：中心 $(200,200)$，宽度 $w_2=300$，高度 $h_2=300$。\n  - 预测框 $P_2$：中心 $(280,200)$，宽度 $w'_2=300$，高度 $h'_2=300$。\n\n**步骤 2：使用提取的给定条件进行验证**\n- **科学依据：** 边界框、交并比和欧几里得距离的概念是计算机视觉领域（特别是目标检测）中的基本和标准度量。该问题牢固地建立在公认的定义之上。\n- **定义明确：** 边界框的所有参数都以精确的数值给出。度量的定义清晰。这使得可以对两种场景唯一地计算 IoU 和中心距离。\n- **客观性：** 问题使用精确的、定量的语言描述。没有主观或模糊的术语。\n\n**步骤 3：结论与行动**\n该问题在科学上是合理的、定义明确且客观的。这是一个有效的问题。我们开始进行解答。\n\n解答需要计算每个场景对的中心距离和 IoU。\n\n一个中心为 $(c_x, c_y)$、宽度为 $w$、高度为 $h$ 的边界框，其角点坐标由以下公式给出：\n$x_{min} = c_x - w/2$\n$y_{min} = c_y - h/2$\n$x_{max} = c_x + w/2$\n$y_{max} = c_y + h/2$\n这样一个框的面积是 $A = w \\times h$。\n\n两个框 $B_a$ 和 $B_b$ 的交集是一个矩形，其角点坐标为：\n$x_{int,min} = \\max(x_{a,min}, x_{b,min})$\n$y_{int,min} = \\max(y_{a,min}, y_{b,min})$\n$x_{int,max} = \\min(x_{a,max}, x_{b,max})$\n$y_{int,max} = \\min(y_{a,max}, y_{b,max})$\n交集面积为 $A_{int} = \\max(0, x_{int,max} - x_{int,min}) \\times \\max(0, y_{int,max} - y_{int,min})$。\n\n并集面积由 $A_{union} = A_a + A_b - A_{int}$ 给出。\n交并比为 $IoU = A_{int} / A_{union}$。\n\n**场景对 $1$ 分析**\n- 真实框 $G_1$：中心 $(50,50)$，$w_1=40$，$h_1=20$。\n  - $A_1 = 40 \\times 20 = 800$。\n  - $x_{1,min}=50-20=30$, $y_{1,min}=50-10=40$。\n  - $x_{1,max}=50+20=70$, $y_{1,max}=50+10=60$。\n- 预测框 $P_1$：中心 $(51,49)$，$w'_1=6$，$h'_1=6$。\n  - $A'_1 = 6 \\times 6 = 36$。\n  - $x'_{1,min}=51-3=48$, $y'_{1,min}=49-3=46$。\n  - $x'_{1,max}=51+3=54$, $y'_{1,max}=49+3=52$。\n\n- **场景对 $1$ 的中心距离**：\n中心点 $(50,50)$ 和 $(51,49)$ 之间的距离 $d_1$ 为：\n$$d_1 = \\sqrt{(51-50)^2 + (49-50)^2} = \\sqrt{1^2 + (-1)^2} = \\sqrt{2} \\approx 1.414 \\text{ 像素}$$\n\n- **场景对 $1$ 的 IoU**：\n  - 交集坐标：\n    - $x_{int,min} = \\max(30, 48) = 48$\n    - $y_{int,min} = \\max(40, 46) = 46$\n    - $x_{int,max} = \\min(70, 54) = 54$\n    - $y_{int,max} = \\min(60, 52) = 52$\n  - 交集面积：\n    - $A_{int,1} = (54-48) \\times (52-46) = 6 \\times 6 = 36$。\n  - 并集面积：\n    - $A_{union,1} = A_1 + A'_1 - A_{int,1} = 800 + 36 - 36 = 800$。\n  - IoU：\n    - $IoU_1 = \\frac{A_{int,1}}{A_{union,1}} = \\frac{36}{800} = \\frac{9}{200} = 0.045$。\n\n**场景对 $2$ 分析**\n- 真实框 $G_2$：中心 $(200,200)$，$w_2=300$，$h_2=300$。\n  - $A_2 = 300 \\times 300 = 90000$。\n  - $x_{2,min}=200-150=50$, $y_{2,min}=200-150=50$。\n  - $x_{2,max}=200+150=350$, $y_{2,max}=200+150=350$。\n- 预测框 $P_2$：中心 $(280,200)$，$w'_2=300$，$h'_2=300$。\n  - $A'_2 = 300 \\times 300 = 90000$。\n  - $x'_{2,min}=280-150=130$, $y'_{2,min}=200-150=50$。\n  - $x'_{2,max}=280+150=430$, $y'_{2,max}=200+150=350$。\n\n- **场景对 $2$ 的中心距离**：\n中心点 $(200,200)$ 和 $(280,200)$ 之间的距离 $d_2$ 为：\n$$d_2 = \\sqrt{(280-200)^2 + (200-200)^2} = \\sqrt{80^2 + 0^2} = 80 \\text{ 像素}$$\n\n- **场景对 $2$ 的 IoU**：\n  - 交集坐标：\n    - $x_{int,min} = \\max(50, 130) = 130$\n    - $y_{int,min} = \\max(50, 50) = 50$\n    - $x_{int,max} = \\min(350, 430) = 350$\n    - $y_{int,max} = \\min(350, 350) = 350$\n  - 交集面积：\n    - $A_{int,2} = (350-130) \\times (350-50) = 220 \\times 300 = 66000$。\n  - 并集面积：\n    - $A_{union,2} = A_2 + A'_2 - A_{int,2} = 90000 + 90000 - 66000 = 114000$。\n  - IoU：\n    - $IoU_2 = \\frac{A_{int,2}}{A_{union,2}} = \\frac{66000}{114000} = \\frac{66}{114} = \\frac{11}{19} \\approx 0.5789$。\n\n**选项评估**\n\nA. 在场景对 $1$ 中，中心距离小于 $2$ 像素，但由于长宽比和尺寸不匹配，交并比低于 $0.05$。\n- 我们的计算显示中心距离为 $d_1 = \\sqrt{2} \\approx 1.414$，小于 $2$。\n- 我们的计算显示 IoU 为 $IoU_1 = 0.045$，低于 $0.05$。\n- 给出的理由“长宽比和尺寸不匹配”是准确的。真实框 $G_1$ 的面积为 $800$，长宽比为 $40/20=2$，而预测框 $P_1$ 的面积为 $36$，长宽比为 $6/6=1$。尽管中心很近，但这种尺度和形状上的巨大不匹配导致了很差的重叠。\n- **结论：正确**\n\nB. 在场景对 $2$ 中，中心距离超过 $75$ 像素，但由于框很大且重叠度高，交并比至少为 $0.55$。\n- 我们的计算显示中心距离为 $d_2 = 80$，超过了 $75$。\n- 我们的计算显示 IoU 为 $IoU_2 = 11/19 \\approx 0.579$，至少为 $0.55$。\n- 给出的理由也是准确的。$80$ 像素的中心距离相对于 $300$ 像素的框宽来说是比较小的。这导致了大的重叠面积，从而获得了高的 IoU。\n- **结论：正确**\n\nC. 对于所有轴对齐矩形，中心距离和交并比是等价的度量，它们对预测的排序完全相同。\n- 这个陈述声称，如果一个预测按某个度量标准优于另一个预测，那么按另一个度量标准也必须如此。这两个场景就是一个直接的反例。\n- 比较这两个场景中预测的质量：\n  - 按中心距离：预测 $P_1$ 优于 $P_2$，因为 $d_1 \\approx 1.414 \\ll d_2 = 80$。\n  - 按 IoU：预测 $P_2$ 优于 $P_1$，因为 $IoU_2 \\approx 0.579 \\gg IoU_1 = 0.045$。\n- 在这两对场景中，两种度量对定位质量的排名产生了相反的结果。因此，它们不是等价的度量。\n- **结论：不正确**\n\nD. 这两对场景所突显的不匹配表明，仅最小化中心距离可能导致较差的 IoU，反之亦然。因此，一个包含重叠概念的损失函数（例如，广义交并比 GIoU）对于鲁棒的定位是必要的。\n- 陈述的第一部分是我们分析的直接结论。场景对 $1$ 表明，非常小的中心距离并不能保证好的 IoU。场景对 $2$ 表明，如果框很大，即使中心距离很大也可以实现高 IoU。这说明了优化一个度量并不一定能优化另一个度量。\n- 陈述的第二部分是现代目标检测中一个公认的原则。框坐标上的简单 L_n 范数损失（与中心距离和尺寸相关）的局限性以及 IoU 损失的局限性（例如，对于不重叠的框梯度为零）导致了改进损失函数的开发，如 Generalized IoU (GIoU)、Distance IoU (DIoU) 和 Complete IoU (CIoU)。这些损失结合了重叠度、中心距离和长宽比的概念，为边界框回归提供了更稳定和鲁棒的训练。该陈述正确地将 GIoU 识别为此类函数的一个例子，并正确地阐述了其目的。\n- **结论：正确**", "answer": "$$\\boxed{ABD}$$", "id": "3160438"}, {"introduction": "尽管 $IoU$ 是一个强大的度量，但它并非没有缺点，尤其是在作为损失函数时。这个进阶练习将探讨一个病态案例，其中 $IoU$ 无法区分两种几何上截然不同的预测错误。通过设计并实现一个基于角点距离的辅助惩罚项来打破这种模糊性 [@problem_id:3160496]，你将深入了解现代高级损失函数（如 GIoU、DIoU）背后的设计思想，这些函数旨在为模型训练提供更稳定和信息更丰富的梯度。", "problem": "您的任务是设计并评估一种用于目标检测边界框回归的打破僵局辅助损失函数，该函数用于解决交并比（IoU）无法区分两种未对齐预测的情况。\n\n请严格使用轴对齐边界框，其参数化形式为 $\\left[x_{1},y_{1},x_{2},y_{2}\\right]$，其中 $\\left(x_{1},y_{1}\\right)$ 是左上角坐标，$\\left(x_{2},y_{2}\\right)$ 是右下角坐标，坐标系为标准的笛卡尔平面，其中 $x$ 轴向右递增，$y$ 轴向下递增。假设所有框的面积均为正，即 $x_{2} \\gt x_{1}$ 且 $y_{2} \\gt y_{1}$。\n\n从以下基本定义开始：\n- 交并比（IoU）定义为两个集合的交集面积与并集面积之比：对于轴对齐的矩形，如果重叠部分的宽度为 $w_{\\mathrm{int}}$，高度为 $h_{\\mathrm{int}}$，那么交集面积为 $A_{\\mathrm{int}} = w_{\\mathrm{int}} \\cdot h_{\\mathrm{int}}$，预测框和真实框（ground-truth）的面积分别为 $A_{\\mathrm{p}}$ 和 $A_{\\mathrm{g}}$，则\n$$\n\\mathrm{IoU} = \\frac{A_{\\mathrm{int}}}{A_{\\mathrm{p}} + A_{\\mathrm{g}} - A_{\\mathrm{int}}}.\n$$\n- 轴对齐矩形的重叠宽度和高度为\n$$\nw_{\\mathrm{int}} = \\max\\left(0, \\min\\left(x_{2}^{\\mathrm{p}}, x_{2}^{\\mathrm{g}}\\right) - \\max\\left(x_{1}^{\\mathrm{p}}, x_{1}^{\\mathrm{g}}\\right)\\right),\n$$\n$$\nh_{\\mathrm{int}} = \\max\\left(0, \\min\\left(y_{2}^{\\mathrm{p}}, y_{2}^{\\mathrm{g}}\\right) - \\max\\left(y_{1}^{\\mathrm{p}}, y_{1}^{\\mathrm{g}}\\right)\\right).\n$$\n\n设计一种辅助性的角点距离惩罚项，当两个不同预测的 IoU 相同时，该惩罚项可与 IoU 结合以打破僵局。该惩罚项定义如下。设预测框和真实框的四个对应角点分别为\n$\\left(x_{1}^{\\mathrm{p}}, y_{1}^{\\mathrm{p}}\\right)$, $\\left(x_{2}^{\\mathrm{p}}, y_{1}^{\\mathrm{p}}\\right)$, $\\left(x_{1}^{\\mathrm{p}}, y_{2}^{\\mathrm{p}}\\right)$, $\\left(x_{2}^{\\mathrm{p}}, y_{2}^{\\mathrm{p}}\\right)$ 和 $\\left(x_{1}^{\\mathrm{g}}, y_{1}^{\\mathrm{g}}\\right)$, $\\left(x_{2}^{\\mathrm{g}}, y_{1}^{\\mathrm{g}}\\right)$, $\\left(x_{1}^{\\mathrm{g}}, y_{2}^{\\mathrm{g}}\\right)$, $\\left(x_{2}^{\\mathrm{g}}, y_{2}^{\\mathrm{g}}\\right)$。取对应角点之间欧几里得距离的平均值，并用真实框的对角线长度进行归一化：\n$$\nD_{\\mathrm{corner}} = \\frac{1}{4} \\sum_{k=1}^{4} \\frac{\\sqrt{\\left(\\Delta x_{k}\\right)^{2} + \\left(\\Delta y_{k}\\right)^{2}}}{\\sqrt{\\left(x_{2}^{\\mathrm{g}} - x_{1}^{\\mathrm{g}}\\right)^{2} + \\left(y_{2}^{\\mathrm{g}} - y_{1}^{\\mathrm{g}}\\right)^{2}}},\n$$\n其中 $\\Delta x_{k}$ 和 $\\Delta y_{k}$ 是第 $k$ 个对应角点的坐标差。这样可以得到一个无量纲、尺度归一化的惩罚项。\n\n将 IoU 和角点惩罚项组合成一个单一的打破僵局分数\n$$\nS = \\mathrm{IoU} - \\alpha \\, D_{\\mathrm{corner}},\n$$\n其中固定权重 $\\alpha = 0.5$。$S$ 的值越高越好。\n\n构建并评估一个病态案例，其中两个未对齐的预测相对于同一个真实框具有相同的 IoU，并证明辅助惩罚项能够打破僵局，偏向于角点更接近真实框角点的预测。\n\n实现一个程序，为以下测试套件计算 $\\mathrm{IoU}$、$D_{\\mathrm{corner}}$ 和 $S$。在断言浮点值相等时，使用容差 $\\varepsilon = 10^{-9}$。\n\n测试套件：\n- 测试用例1（具有不同未对齐模式的病态平局）：\n  - 真实框 $G_{1} = \\left[0,0,2,2\\right]$。\n  - 预测框 $A_{1} = \\left[1,0,3,2\\right]$。\n  - 预测框 $B_{1} = \\left[\\tfrac{1}{2}, \\tfrac{2}{3}, \\tfrac{5}{2}, \\tfrac{8}{3}\\right]$。\n  - $A_{1}$ 和 $B_{1}$ 与 $G_{1}$ 的 $\\mathrm{IoU}$ 相同，但 $D_{\\mathrm{corner}}$ 不同。如果 $\\left|\\mathrm{IoU}\\left(A_{1},G_{1}\\right) - \\mathrm{IoU}\\left(B_{1},G_{1}\\right)\\right| \\le \\varepsilon$ 且 $S\\left(B_{1},G_{1}\\right) \\gt S\\left(A_{1},G_{1}\\right)$，则此测试的结果为一个布尔值 true。\n\n- 测试用例2（两个预测的重叠都为零的边界条件）：\n  - 真实框 $G_{2} = \\left[0,0,1,1\\right]$。\n  - 预测框 $A_{2} = \\left[2,0,3,1\\right]$。\n  - 预测框 $B_{2} = \\left[10,0,11,1\\right]$。\n  - 两个 $\\mathrm{IoU}$ 值都为 $0$，但 $A_{2}$ 的角点距离更近。如果 $\\left|\\mathrm{IoU}\\left(A_{2},G_{2}\\right) - \\mathrm{IoU}\\left(B_{2},G_{2}\\right)\\right| \\le \\varepsilon$ 且 $S\\left(A_{2},G_{2}\\right) \\gt S\\left(B_{2},G_{2}\\right)$，则结果为一个布尔值 true。\n\n- 测试用例3（正常路径，其中 $\\mathrm{IoU}$ 排名应由辅助损失保持）：\n  - 真实框 $G_{3} = \\left[0,0,2,2\\right]$。\n  - 预测框 $A_{3} = \\left[0.3,0.1,2.3,2.1\\right]$。\n  - 预测框 $B_{3} = \\left[0.6,0.2,2.6,2.2\\right]$。\n  - 如果 $\\mathrm{IoU}\\left(A_{3},G_{3}\\right) \\gt \\mathrm{IoU}\\left(B_{3},G_{3}\\right)$ 且 $S\\left(A_{3},G_{3}\\right) \\gt S\\left(B_{3},G_{3}\\right)$，则结果为一个布尔值 true。\n\n- 测试用例4（完美预测的边缘情况）：\n  - 真实框 $G_{4} = \\left[0,0,2,2\\right]$。\n  - 预测框 $P_{4} = \\left[0,0,2,2\\right]$。\n  - 结果是 $S\\left(P_{4},G_{4}\\right)$ 的标量值，作为一个浮点数四舍五入到 $6$ 位小数。\n\n最终输出格式：\n- 您的程序应生成一行输出，其中包含用方括号括起来的逗号分隔列表形式的结果，例如，“[r1,r2,r3,r4]”。这里 $r1$、$r2$ 和 $r3$ 是如上定义的布尔值，$r4$ 是 $S\\left(P_{4},G_{4}\\right)$ 的浮点值，四舍五入到6位小数。\n- 程序没有输入；它必须使用硬编码的测试套件运行。", "solution": "该问题要求为目标检测中的边界框回归设计并评估一个打破僵局的评分函数 $S$。该分数将标准的交并比（$\\mathrm{IoU}$）指标与一个新的辅助惩罚项 $D_{\\mathrm{corner}}$ 相结合，旨在解决仅靠 $\\mathrm{IoU}$ 无法区分的模糊情况。分析将首先定义分数的组成部分，然后在一系列指定的测试用例中系统地评估其行为。所有边界框都是轴对齐的，并由其左上角 $(x_1, y_1)$ 和右下角 $(x_2, y_2)$ 坐标定义。\n\n首先，我们定义预测框 $P$ 和真实框 $G$ 之间的交并比（$\\mathrm{IoU}$）。$\\mathrm{IoU}$ 是它们交集面积与并集面积之比。\n设预测框为 $P = [x_{1}^{\\mathrm{p}}, y_{1}^{\\mathrm{p}}, x_{2}^{\\mathrm{p}}, y_{2}^{\\mathrm{p}}]$，真实框为 $G = [x_{1}^{\\mathrm{g}}, y_{1}^{\\mathrm{g}}, x_{2}^{\\mathrm{g}}, y_{2}^{\\mathrm{g}}]$。\n预测框的面积为 $A_{\\mathrm{p}} = (x_{2}^{\\mathrm{p}} - x_{1}^{\\mathrm{p}})(y_{2}^{\\mathrm{p}} - y_{1}^{\\mathrm{p}})$，真实框的面积为 $A_{\\mathrm{g}} = (x_{2}^{\\mathrm{g}} - x_{1}^{\\mathrm{g}})(y_{2}^{\\mathrm{g}} - y_{1}^{\\mathrm{g}})$。\n交集面积 $A_{\\mathrm{int}}$ 由重叠宽度 $w_{\\mathrm{int}}$ 和高度 $h_{\\mathrm{int}}$ 计算得出：\n$$\nw_{\\mathrm{int}} = \\max(0, \\min(x_{2}^{\\mathrm{p}}, x_{2}^{\\mathrm{g}}) - \\max(x_{1}^{\\mathrm{p}}, x_{1}^{\\mathrm{g}}))\n$$\n$$\nh_{\\mathrm{int}} = \\max(0, \\min(y_{2}^{\\mathrm{p}}, y_{2}^{\\mathrm{g}}) - \\max(y_{1}^{\\mathrm{p}}, y_{1}^{\\mathrm{g}}))\n$$\n$$\nA_{\\mathrm{int}} = w_{\\mathrm{int}} \\cdot h_{\\mathrm{int}}\n$$\n并集面积为 $A_{\\mathrm{union}} = A_{\\mathrm{p}} + A_{\\mathrm{g}} - A_{\\mathrm{int}}$。则 $\\mathrm{IoU}$ 为：\n$$\n\\mathrm{IoU}(P,G) = \\frac{A_{\\mathrm{int}}}{A_{\\mathrm{union}}}\n$$\n虽然 $\\mathrm{IoU}$ 是一个强大的指标，但对于几何上截然不同的未对齐情况，它可能会产生相同的值，从而产生无法区分哪个预测更好的病态案例。\n\n为了解决这种平局问题，引入了一个辅助性的角点距离惩罚项 $D_{\\mathrm{corner}}$。该惩罚项衡量预测框和真实框四个对应角点之间的平均归一化欧几里得距离。一个边界框 $[x_1, y_1, x_2, y_2]$ 的四个角点是 $(x_1, y_1)$、$(x_2, y_1)$、$(x_1, y_2)$ 和 $(x_2, y_2)$。该惩罚项定义为：\n$$\nD_{\\mathrm{corner}} = \\frac{1}{4} \\sum_{k=1}^{4} \\frac{\\sqrt{(\\Delta x_{k})^{2} + (\\Delta y_{k})^{2}}}{d_{\\mathrm{g}}}\n$$\n其中 $(\\Delta x_k, \\Delta y_k)$ 是预测框和真实框第 $k$ 个对应角点之间的向量，$d_{\\mathrm{g}}$ 是真实框的对角线长度，$d_{\\mathrm{g}} = \\sqrt{(x_{2}^{\\mathrm{g}} - x_{1}^{\\mathrm{g}})^2 + (y_{2}^{\\mathrm{g}} - y_{1}^{\\mathrm{g}})^2}$。通过 $d_{\\mathrm{g}}$ 进行归一化，确保该惩罚项是一个无量纲、尺度不变的量。较小的 $D_{\\mathrm{corner}}$ 值表示角点的几何对齐更好。\n\n最终的打破僵局分数 $S$ 结合了 $\\mathrm{IoU}$ 和 $D_{\\mathrm{corner}}$：\n$$\nS(P,G) = \\mathrm{IoU}(P,G) - \\alpha \\, D_{\\mathrm{corner}}(P,G)\n$$\n权重 $\\alpha$ 给定为 $0.5$。该分数优先考虑最大化 $\\mathrm{IoU}$，同时使用角点距离作为惩罚项。更高的分数 $S$ 表示更好的预测。\n\n我们现在在提供的测试套件上评估 $S$。\n\n**测试用例1：病态平局**\n- 真实框 $G_1 = [0, 0, 2, 2]$\n- 预测框 $A_1 = [1, 0, 3, 2]$\n- 预测框 $B_1 = [1/2, 2/3, 5/2, 8/3]$\n对于 $(A_1, G_1)$：$A_{\\mathrm{g}} = 4$，$A_{\\mathrm{p}} = 4$。交集为 $[1, 0, 2, 2]$，因此 $A_{\\mathrm{int}} = 2$。$\\mathrm{IoU}(A_1, G_1) = \\frac{2}{4+4-2} = \\frac{2}{6} = \\frac{1}{3}$。\n对于 $(B_1, G_1)$：$A_{\\mathrm{g}} = 4$，$A_{\\mathrm{p}} = (5/2 - 1/2)(8/3 - 2/3) = 2 \\cdot 2 = 4$。交集为 $[1/2, 2/3, 2, 2]$，因此 $A_{\\mathrm{int}} = (2 - 1/2)(2 - 2/3) = (3/2)(4/3) = 2$。$\\mathrm{IoU}(B_1, G_1) = \\frac{2}{4+4-2} = \\frac{1}{3}$。\n条件 $|\\mathrm{IoU}(A_1, G_1) - \\mathrm{IoU}(B_1, G_1)| \\le \\varepsilon$ 满足，因为差值恰好为 $0$。\n现在我们计算两者的 $D_{\\mathrm{corner}}$。$G_1$ 的对角线为 $d_{\\mathrm{g}} = \\sqrt{(2-0)^2 + (2-0)^2} = \\sqrt{8} = 2\\sqrt{2}$。\n对于 $A_1$，所有四个角点的位移为 $(\\Delta x, \\Delta y) = (1, 0)$，所以距离为 $1$。因此，$D_{\\mathrm{corner}}(A_1, G_1) = \\frac{1}{4} \\frac{1+1+1+1}{2\\sqrt{2}} = \\frac{4}{8\\sqrt{2}} = \\frac{\\sqrt{2}}{4}$。\n对于 $B_1$，角点位移为 $(\\pm 1/2, \\pm 2/3)$，导致每个角点的距离为 $\\sqrt{(1/2)^2 + (2/3)^2} = \\sqrt{1/4 + 4/9} = \\sqrt{25/36} = 5/6$。因此，$D_{\\mathrm{corner}}(B_1, G_1) = \\frac{1}{4} \\frac{4 \\cdot (5/6)}{2\\sqrt{2}} = \\frac{5/6}{2\\sqrt{2}} = \\frac{5}{12\\sqrt{2}} = \\frac{5\\sqrt{2}}{24}$。\n比较惩罚项：$\\frac{\\sqrt{2}}{4} = \\frac{6\\sqrt{2}}{24} > \\frac{5\\sqrt{2}}{24}$。所以 $D_{\\mathrm{corner}}(A_1, G_1) > D_{\\mathrm{corner}}(B_1, G_1)$。\n这意味着 $S(A_1, G_1) < S(B_1, G_1)$。条件 $S(B_1, G_1) > S(A_1, G_1)$ 成立。此测试用例的最终结果为 true。\n\n**测试用例2：零重叠**\n- 真实框 $G_2 = [0, 0, 1, 1]$\n- 预测框 $A_2 = [2, 0, 3, 1]$\n- 预测框 $B_2 = [10, 0, 11, 1]$\n对于 $(A_2, G_2)$ 和 $(B_2, G_2)$，边界框都不相交，所以 $A_{\\mathrm{int}} = 0$。$\\mathrm{IoU}(A_2, G_2) = 0$ 且 $\\mathrm{IoU}(B_2, G_2) = 0$。第一个条件 $|\\mathrm{IoU}(A_2, G_2) - \\mathrm{IoU}(B_2, G_2)| \\le \\varepsilon$ 满足。\n$G_2$ 的对角线为 $d_{\\mathrm{g}} = \\sqrt{(1-0)^2 + (1-0)^2} = \\sqrt{2}$。\n对于 $A_2$，角点位移均为 $(\\Delta x, \\Delta y) = (2, 0)$，所以距离为 $2$。$D_{\\mathrm{corner}}(A_2, G_2) = \\frac{1}{4} \\frac{4 \\cdot 2}{\\sqrt{2}} = \\frac{2}{\\sqrt{2}} = \\sqrt{2}$。\n对于 $B_2$，角点位移均为 $(\\Delta x, \\Delta y) = (10, 0)$，所以距离为 $10$。$D_{\\mathrm{corner}}(B_2, G_2) = \\frac{1}{4} \\frac{4 \\cdot 10}{\\sqrt{2}} = \\frac{10}{\\sqrt{2}} = 5\\sqrt{2}$。\n由于两者的 $\\mathrm{IoU}$ 都为 $0$，所以 $S(P,G) = -\\alpha D_{\\mathrm{corner}}(P,G)$。因为 $D_{\\mathrm{corner}}(A_2, G_2) < D_{\\mathrm{corner}}(B_2, G_2)$，所以 $S(A_2, G_2) > S(B_2, G_2)$。该条件成立。最终结果为 true。\n\n**测试用例3：保持IoU排名**\n- 真实框 $G_3 = [0, 0, 2, 2]$\n- 预测框 $A_3 = [0.3, 0.1, 2.3, 2.1]$\n- 预测框 $B_3 = [0.6, 0.2, 2.6, 2.2]$\n对于 $(A_3, G_3)$：$A_{\\mathrm{g}} = 4$，$A_{\\mathrm{p}}=4$。交集为 $[0.3, 0.1, 2, 2]$，因此 $A_{\\mathrm{int}} = (2-0.3)(2-0.1) = 1.7 \\cdot 1.9 = 3.23$。$\\mathrm{IoU}(A_3, G_3) = \\frac{3.23}{4+4-3.23} = \\frac{3.23}{4.77} \\approx 0.67715$。\n对于 $(B_3, G_3)$：$A_{\\mathrm{g}} = 4$，$A_{\\mathrm{p}}=4$。交集为 $[0.6, 0.2, 2, 2]$，因此 $A_{\\mathrm{int}} = (2-0.6)(2-0.2) = 1.4 \\cdot 1.8 = 2.52$。$\\mathrm{IoU}(B_3, G_3) = \\frac{2.52}{4+4-2.52} = \\frac{2.52}{5.48} \\approx 0.45985$。\n显然 $\\mathrm{IoU}(A_3, G_3) > \\mathrm{IoU}(B_3, G_3)$。条件的第一个部分成立。\n$G_3$ 的对角线为 $d_{\\mathrm{g}} = 2\\sqrt{2}$。\n对于 $A_3$，角点位移为 $(\\Delta x, \\Delta y) = (0.3, 0.1)$。距离为 $\\sqrt{0.3^2+0.1^2} = \\sqrt{0.1}$。$D_{\\mathrm{corner}}(A_3, G_3) = \\frac{1}{4} \\frac{4\\sqrt{0.1}}{2\\sqrt{2}} = \\frac{\\sqrt{0.1}}{2\\sqrt{2}} \\approx 0.1118$。\n对于 $B_3$，角点位移为 $(\\Delta x, \\Delta y) = (0.6, 0.2)$。距离为 $\\sqrt{0.4}$。$D_{\\mathrm{corner}}(B_3, G_3) = \\frac{1}{4} \\frac{4\\sqrt{0.4}}{2\\sqrt{2}} = \\frac{\\sqrt{0.4}}{2\\sqrt{2}} \\approx 0.2236$。\n现在我们计算分数：\n$S(A_3, G_3) \\approx 0.67715 - 0.5 \\cdot 0.1118 \\approx 0.62125$。\n$S(B_3, G_3) \\approx 0.45985 - 0.5 \\cdot 0.2236 \\approx 0.34805$。\n$S(A_3, G_3) > S(B_3, G_3)$，所以条件的第二部分也成立。最终结果为 true。\n\n**测试用例4：完美预测**\n- 真实框 $G_4 = [0, 0, 2, 2]$\n- 预测框 $P_4 = [0, 0, 2, 2]$\n预测与真实框完全相同。\n$\\mathrm{IoU}(P_4, G_4) = 1$，因为 $A_{\\mathrm{int}} = A_{\\mathrm{p}} = A_{\\mathrm{g}} = 4$。\n$D_{\\mathrm{corner}}(P_4, G_4) = 0$，因为所有角点位移 $(\\Delta x_k, \\Delta y_k)$ 均为 $(0, 0)$。\n分数为 $S(P_4, G_4) = 1 - 0.5 \\cdot 0 = 1$。四舍五入到 $6$ 位小数，为 $1.000000$。\n\n分析证实，所设计的分数 $S$ 成功地解决了 $\\mathrm{IoU}$ 在病态测试用例中的局限性，同时在标准场景下表现出一致的行为。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem by implementing and evaluating a tie-breaking\n    score for bounding box regression.\n    \"\"\"\n\n    def calculate_metrics(p_box, g_box, alpha):\n        \"\"\"\n        Calculates IoU, D_corner, and the combined score S.\n\n        Args:\n            p_box (np.ndarray): Predicted box [x1, y1, x2, y2].\n            g_box (np.ndarray): Ground-truth box [x1, y1, x2, y2].\n            alpha (float): Weight for the corner penalty.\n\n        Returns:\n            tuple: A tuple containing (iou, d_corner, s_score).\n        \"\"\"\n        x1p, y1p, x2p, y2p = p_box\n        x1g, y1g, x2g, y2g = g_box\n\n        # Calculate IoU\n        x1_int = max(x1p, x1g)\n        y1_int = max(y1p, y1g)\n        x2_int = min(x2p, x2g)\n        y2_int = min(y2p, y2g)\n\n        w_int = max(0, x2_int - x1_int)\n        h_int = max(0, y2_int - y1_int)\n        A_int = w_int * h_int\n\n        A_p = (x2p - x1p) * (y2p - y1p)\n        A_g = (x2g - x1g) * (y2g - y1g)\n\n        A_union = A_p + A_g - A_int\n        iou = A_int / A_union if A_union > 1e-9 else 0.0\n\n        # Calculate D_corner\n        p_corners = np.array([\n            [x1p, y1p], [x2p, y1p], [x1p, y2p], [x2p, y2p]\n        ])\n        g_corners = np.array([\n            [x1g, y1g], [x2g, y1g], [x1g, y2g], [x2g, y2g]\n        ])\n\n        w_g = x2g - x1g\n        h_g = y2g - y1g\n        diag_g = np.sqrt(w_g**2 + h_g**2)\n\n        if diag_g < 1e-9:\n            d_corner = 0.0\n        else:\n            corner_dists = np.sqrt(np.sum((p_corners - g_corners)**2, axis=1))\n            total_dist = np.sum(corner_dists)\n            d_corner = (1/4) * (total_dist / diag_g)\n\n        # Calculate S\n        s_score = iou - alpha * d_corner\n\n        return iou, d_corner, s_score\n\n    # Define test parameters\n    alpha = 0.5\n    epsilon = 1e-9\n    results = []\n    \n    # Test case 1\n    G1 = np.array([0., 0., 2., 2.])\n    A1 = np.array([1., 0., 3., 2.])\n    B1 = np.array([1/2, 2/3, 5/2, 8/3])\n    iou_a1, _, s_a1 = calculate_metrics(A1, G1, alpha)\n    iou_b1, _, s_b1 = calculate_metrics(B1, G1, alpha)\n    result1 = abs(iou_a1 - iou_b1) <= epsilon and s_b1 > s_a1\n    results.append(result1)\n\n    # Test case 2\n    G2 = np.array([0., 0., 1., 1.])\n    A2 = np.array([2., 0., 3., 1.])\n    B2 = np.array([10., 0., 11., 1.])\n    iou_a2, _, s_a2 = calculate_metrics(A2, G2, alpha)\n    iou_b2, _, s_b2 = calculate_metrics(B2, G2, alpha)\n    result2 = abs(iou_a2 - iou_b2) <= epsilon and s_a2 > s_b2\n    results.append(result2)\n\n    # Test case 3\n    G3 = np.array([0., 0., 2., 2.])\n    A3 = np.array([0.3, 0.1, 2.3, 2.1])\n    B3 = np.array([0.6, 0.2, 2.6, 2.2])\n    iou_a3, _, s_a3 = calculate_metrics(A3, G3, alpha)\n    iou_b3, _, s_b3 = calculate_metrics(B3, G3, alpha)\n    result3 = iou_a3 > iou_b3 and s_a3 > s_b3\n    results.append(result3)\n    \n    # Test case 4\n    G4 = np.array([0., 0., 2., 2.])\n    P4 = np.array([0., 0., 2., 2.])\n    _, _, s_p4 = calculate_metrics(P4, G4, alpha)\n    result4 = f\"{s_p4:.6f}\"\n    results.append(result4)\n\n    # Final print statement\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3160496"}]}