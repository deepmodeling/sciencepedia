{"hands_on_practices": [{"introduction": "We begin our practical exploration by addressing a foundational question: how do the discrete energy levels of isolated atoms evolve into continuous energy bands within a crystalline solid? This exercise [@problem_id:2971106] guides you through the tight-binding approximation, a chemically intuitive and powerful method for constructing a band structure from first principles. By setting up the Hamiltonian in real space and applying a discrete Fourier transform, you will gain hands-on experience with the essential mathematical techniques used to describe electrons in a periodic potential and derive the energy dispersion $E(\\mathbf{k})$ for a simple cubic lattice.", "problem": "Consider a monatomic simple cubic lattice of lattice constant $a$ with a single orthonormal localized orbital $\\{|\\mathbf{R}\\rangle\\}$ per Bravais lattice site at position $\\mathbf{R}$. Assume the following physically motivated inputs of the tight-binding approximation based on the linear combination of atomic orbitals: (i) an on-site matrix element $\\langle \\mathbf{R}| \\hat{H} |\\mathbf{R}\\rangle = \\epsilon_{0}$, (ii) a nearest-neighbor hopping matrix element $\\langle \\mathbf{R}|\\hat{H}|\\mathbf{R}+\\boldsymbol{\\delta}\\rangle = -t$ with $t>0$ for each of the $6$ nearest-neighbor vectors $\\boldsymbol{\\delta} \\in \\{\\pm a\\,\\hat{\\mathbf{x}}, \\pm a\\,\\hat{\\mathbf{y}}, \\pm a\\,\\hat{\\mathbf{z}}\\}$, and (iii) all other overlaps are negligible. Work in second quantization with fermionic operators $\\{c_{\\mathbf{R}}, c_{\\mathbf{R}}^{\\dagger}\\}$ that create and annihilate an electron in $|\\mathbf{R}\\rangle$, assume periodic boundary conditions on a crystal with $N$ sites, and ignore spin for simplicity.\n\nStarting only from these inputs and the translational invariance of the Hamiltonian, do the following:\n- Construct the real-space many-body tight-binding Hamiltonian $\\hat{H}$ using $c_{\\mathbf{R}}$ and $c_{\\mathbf{R}}^{\\dagger}$.\n- Use the discrete Fourier transform $c_{\\mathbf{k}} = \\frac{1}{\\sqrt{N}} \\sum_{\\mathbf{R}} \\exp(-i\\,\\mathbf{k}\\cdot \\mathbf{R})\\, c_{\\mathbf{R}}$ and its inverse to transform $\\hat{H}$ into momentum space, and deduce the single-particle band dispersion $E(\\mathbf{k})$ by diagonalizing $\\hat{H}$ in the plane-wave basis.\n- Your final answer must be a single closed-form analytic expression $E(\\mathbf{k})$ in terms of $\\epsilon_{0}$, $t$, $a$, and the Cartesian components $k_{x}$, $k_{y}$, $k_{z}$ of $\\mathbf{k}$. Express the final answer as a single expression without an equality sign. No numerical evaluation is required.", "solution": "The problem is valid. It is a standard, well-posed problem in introductory condensed matter physics that is scientifically grounded, self-contained, and objective. There are no contradictions, ambiguities, or unsound premises.\n\nThe solution proceeds in three main steps: (1) constructing the real-space tight-binding Hamiltonian, (2) transforming it into momentum space via a discrete Fourier transform, and (3) identifying the resulting single-particle band dispersion.\n\nStep 1: Construct the Real-Space Hamiltonian\nThe general form of a single-particle Hamiltonian in the second quantization formalism, using the provided localized orbital basis $\\{|\\mathbf{R}\\rangle\\}$, is:\n$$ \\hat{H} = \\sum_{\\mathbf{R}, \\mathbf{R}'} \\langle \\mathbf{R}' | \\hat{H} | \\mathbf{R} \\rangle c_{\\mathbf{R}'}^{\\dagger} c_{\\mathbf{R}} $$\nwhere $c_{\\mathbf{R}}^{\\dagger}$ and $c_{\\mathbf{R}}$ are the fermionic creation and annihilation operators for an electron at site $\\mathbf{R}$. The matrix elements $\\langle \\mathbf{R}' | \\hat{H} | \\mathbf{R} \\rangle$ are given by the problem statement.\n\nWe can split the sum into two cases: on-site terms where $\\mathbf{R}' = \\mathbf{R}$, and hopping terms where $\\mathbf{R}' \\neq \\mathbf{R}$.\n\n(i) On-site term: The matrix element is given as $\\langle \\mathbf{R} | \\hat{H} | \\mathbf{R} \\rangle = \\epsilon_0$. This contributes a term to the Hamiltonian for each site:\n$$ \\hat{H}_{\\text{on-site}} = \\sum_{\\mathbf{R}} \\langle \\mathbf{R} | \\hat{H} | \\mathbf{R} \\rangle c_{\\mathbf{R}}^{\\dagger} c_{\\mathbf{R}} = \\epsilon_0 \\sum_{\\mathbf{R}} c_{\\mathbf{R}}^{\\dagger} c_{\\mathbf{R}} $$\n\n(ii) Hopping term: The matrix element is non-zero only for nearest neighbors. The problem states $\\langle \\mathbf{R} | \\hat{H} | \\mathbf{R} + \\boldsymbol{\\delta} \\rangle = -t$, where $\\boldsymbol{\\delta}$ is a nearest-neighbor vector. Since the Hamiltonian $\\hat{H}$ must be Hermitian, we have $\\langle \\mathbf{R} + \\boldsymbol{\\delta} | \\hat{H} | \\mathbf{R} \\rangle = \\langle \\mathbf{R} | \\hat{H} | \\mathbf{R} + \\boldsymbol{\\delta} \\rangle^*$. As $-t$ is a real constant, this implies $\\langle \\mathbf{R} + \\boldsymbol{\\delta} | \\hat{H} | \\mathbf{R} \\rangle = -t$. The hopping part of the Hamiltonian sums over all pairs of nearest-neighbor sites. A standard way to write this is:\n$$ \\hat{H}_{\\text{hopping}} = \\sum_{\\mathbf{R}} \\sum_{\\boldsymbol{\\delta}} \\langle \\mathbf{R} + \\boldsymbol{\\delta} | \\hat{H} | \\mathbf{R} \\rangle c_{\\mathbf{R} + \\boldsymbol{\\delta}}^{\\dagger} c_{\\mathbf{R}} = -t \\sum_{\\mathbf{R}, \\boldsymbol{\\delta}} c_{\\mathbf{R} + \\boldsymbol{\\delta}}^{\\dagger} c_{\\mathbf{R}} $$\nwhere the sum over $\\boldsymbol{\\delta}$ runs over all $6$ nearest-neighbor vectors for the simple cubic lattice.\n\nCombining the on-site and hopping terms, the total real-space Hamiltonian is:\n$$ \\hat{H} = \\epsilon_0 \\sum_{\\mathbf{R}} c_{\\mathbf{R}}^{\\dagger} c_{\\mathbf{R}} - t \\sum_{\\mathbf{R}, \\boldsymbol{\\delta}} c_{\\mathbf{R} + \\boldsymbol{\\delta}}^{\\dagger} c_{\\mathbf{R}} $$\n\nStep 2: Transform to Momentum Space\nTo diagonalize the Hamiltonian, we transform the real-space operators $c_{\\mathbf{R}}$ and $c_{\\mathbf{R}}^\\dagger$ to momentum-space operators $c_{\\mathbf{k}}$ and $c_{\\mathbf{k}}^\\dagger$ using the discrete Fourier transform provided:\n$$ c_{\\mathbf{k}} = \\frac{1}{\\sqrt{N}} \\sum_{\\mathbf{R}} \\exp(-i\\mathbf{k}\\cdot\\mathbf{R}) c_{\\mathbf{R}} $$\nThe corresponding inverse transform for the annihilation operator is:\n$$ c_{\\mathbf{R}} = \\frac{1}{\\sqrt{N}} \\sum_{\\mathbf{k}} \\exp(i\\mathbf{k}\\cdot\\mathbf{R}) c_{\\mathbf{k}} $$\nand for the creation operator:\n$$ c_{\\mathbf{R}}^{\\dagger} = \\frac{1}{\\sqrt{N}} \\sum_{\\mathbf{k}'} \\exp(-i\\mathbf{k}'\\cdot\\mathbf{R}) c_{\\mathbf{k}'}^{\\dagger} $$\nNote the use of a different dummy wavevector $\\mathbf{k}'$ for the creation operator.\n\nWe now substitute these expressions into the two parts of $\\hat{H}$.\n\n(i) On-site term:\n$$ \\sum_{\\mathbf{R}} c_{\\mathbf{R}}^{\\dagger} c_{\\mathbf{R}} = \\sum_{\\mathbf{R}} \\left( \\frac{1}{\\sqrt{N}} \\sum_{\\mathbf{k}'} \\exp(-i\\mathbf{k}'\\cdot\\mathbf{R}) c_{\\mathbf{k}'}^{\\dagger} \\right) \\left( \\frac{1}{\\sqrt{N}} \\sum_{\\mathbf{k}} \\exp(i\\mathbf{k}\\cdot\\mathbf{R}) c_{\\mathbf{k}} \\right) $$\n$$ = \\frac{1}{N} \\sum_{\\mathbf{k}, \\mathbf{k}'} c_{\\mathbf{k}'}^{\\dagger} c_{\\mathbf{k}} \\sum_{\\mathbf{R}} \\exp(i(\\mathbf{k} - \\mathbf{k}')\\cdot\\mathbf{R}) $$\nUsing the identity for the sum over lattice vectors, $\\sum_{\\mathbf{R}} \\exp(i\\mathbf{q}\\cdot\\mathbf{R}) = N \\delta_{\\mathbf{q}, 0}$ (for $\\mathbf{q}$ in the first Brillouin zone), the sum over $\\mathbf{R}$ becomes $N\\delta_{\\mathbf{k}, \\mathbf{k}'}$.\n$$ \\sum_{\\mathbf{R}} c_{\\mathbf{R}}^{\\dagger} c_{\\mathbf{R}} = \\frac{1}{N} \\sum_{\\mathbf{k}, \\mathbf{k}'} c_{\\mathbf{k}'}^{\\dagger} c_{\\mathbf{k}} (N \\delta_{\\mathbf{k}, \\mathbf{k}'}) = \\sum_{\\mathbf{k}} c_{\\mathbf{k}}^{\\dagger} c_{\\mathbf{k}} $$\n\n(ii) Hopping term:\n$$ \\sum_{\\mathbf{R}, \\boldsymbol{\\delta}} c_{\\mathbf{R}+\\boldsymbol{\\delta}}^{\\dagger} c_{\\mathbf{R}} = \\sum_{\\mathbf{R}, \\boldsymbol{\\delta}} \\left( \\frac{1}{\\sqrt{N}} \\sum_{\\mathbf{k}'} \\exp(-i\\mathbf{k}'\\cdot(\\mathbf{R}+\\boldsymbol{\\delta})) c_{\\mathbf{k}'}^{\\dagger} \\right) \\left( \\frac{1}{\\sqrt{N}} \\sum_{\\mathbf{k}} \\exp(i\\mathbf{k}\\cdot\\mathbf{R}) c_{\\mathbf{k}} \\right) $$\n$$ = \\frac{1}{N} \\sum_{\\mathbf{k}, \\mathbf{k}'} \\sum_{\\boldsymbol{\\delta}} c_{\\mathbf{k}'}^{\\dagger} c_{\\mathbf{k}} \\exp(-i\\mathbf{k}'\\cdot\\boldsymbol{\\delta}) \\sum_{\\mathbf{R}} \\exp(i(\\mathbf{k} - \\mathbf{k}')\\cdot\\mathbf{R}) $$\nAgain, applying the lattice sum identity $\\sum_{\\mathbf{R}} \\dots = N\\delta_{\\mathbf{k}, \\mathbf{k}'}$:\n$$ = \\frac{1}{N} \\sum_{\\mathbf{k}, \\mathbf{k}'} \\sum_{\\boldsymbol{\\delta}} c_{\\mathbf{k}'}^{\\dagger} c_{\\mathbf{k}} \\exp(-i\\mathbf{k}'\\cdot\\boldsymbol{\\delta}) (N \\delta_{\\mathbf{k}, \\mathbf{k}'}) $$\n$$ = \\sum_{\\mathbf{k}} \\left( \\sum_{\\boldsymbol{\\delta}} \\exp(-i\\mathbf{k}\\cdot\\boldsymbol{\\delta}) \\right) c_{\\mathbf{k}}^{\\dagger} c_{\\mathbf{k}} $$\n\nCombining the transformed terms, the Hamiltonian in momentum space is:\n$$ \\hat{H} = \\epsilon_0 \\sum_{\\mathbf{k}} c_{\\mathbf{k}}^{\\dagger} c_{\\mathbf{k}} - t \\sum_{\\mathbf{k}} \\left( \\sum_{\\boldsymbol{\\delta}} \\exp(-i\\mathbf{k}\\cdot\\boldsymbol{\\delta}) \\right) c_{\\mathbf{k}}^{\\dagger} c_{\\mathbf{k}} $$\n$$ \\hat{H} = \\sum_{\\mathbf{k}} \\left[ \\epsilon_0 - t \\sum_{\\boldsymbol{\\delta}} \\exp(-i\\mathbf{k}\\cdot\\boldsymbol{\\delta}) \\right] c_{\\mathbf{k}}^{\\dagger} c_{\\mathbf{k}} $$\n\nStep 3: Deduce the Band Dispersion\nThe Hamiltonian is now diagonal in the momentum basis. It is of the form $\\hat{H} = \\sum_{\\mathbf{k}} E(\\mathbf{k}) \\hat{n}_{\\mathbf{k}}$, where $\\hat{n}_{\\mathbf{k}} = c_{\\mathbf{k}}^{\\dagger} c_{\\mathbf{k}}$ is the number operator for electrons with wavevector $\\mathbf{k}$. The coefficient $E(\\mathbf{k})$ is the single-particle energy for the state $|\\mathbf{k}\\rangle$, which is the band dispersion.\n$$ E(\\mathbf{k}) = \\epsilon_0 - t \\sum_{\\boldsymbol{\\delta}} \\exp(-i\\mathbf{k}\\cdot\\boldsymbol{\\delta}) $$\nTo find the final form, we must evaluate the sum over the nearest-neighbor vectors $\\boldsymbol{\\delta}$ for the simple cubic lattice. These vectors are given as $\\boldsymbol{\\delta} \\in \\{\\pm a\\,\\hat{\\mathbf{x}}, \\pm a\\,\\hat{\\mathbf{y}}, \\pm a\\,\\hat{\\mathbf{z}}\\}$. Let the wavevector be $\\mathbf{k} = k_x\\hat{\\mathbf{x}} + k_y\\hat{\\mathbf{y}} + k_z\\hat{\\mathbf{z}}$. The sum becomes:\n$$ \\sum_{\\boldsymbol{\\delta}} \\exp(-i\\mathbf{k}\\cdot\\boldsymbol{\\delta}) = \\exp(-ik_x a) + \\exp(ik_x a) + \\exp(-ik_y a) + \\exp(ik_y a) + \\exp(-ik_z a) + \\exp(ik_z a) $$\nUsing the Euler identity $2\\cos\\theta = e^{i\\theta} + e^{-i\\theta}$, we simplify the sum:\n$$ \\sum_{\\boldsymbol{\\delta}} \\exp(-i\\mathbf{k}\\cdot\\boldsymbol{\\delta}) = 2\\cos(k_x a) + 2\\cos(k_y a) + 2\\cos(k_z a) $$\nSubstituting this back into the expression for $E(\\mathbf{k})$ gives the final result for the band dispersion:\n$$ E(\\mathbf{k}) = \\epsilon_0 - 2t(\\cos(k_x a) + \\cos(k_y a) + \\cos(k_z a)) $$\nThis expression gives the energy of an electron as a function of its crystal momentum $\\mathbf{k}$ within the tight-binding model for a simple cubic lattice.", "answer": "$$\\boxed{\\epsilon_{0} - 2t(\\cos(k_{x}a) + \\cos(k_{y}a) + \\cos(k_{z}a))}$$", "id": "2971106"}, {"introduction": "While a full band dispersion provides a complete map of electron energies, the most critical phenomena in semiconductors often occur near a band extremum. This practice [@problem_id:2971098] introduces the powerful $\\mathbf{k} \\cdot \\mathbf{p}$ perturbation method, which allows us to \"zoom in\" on these important regions of $\\mathbf{k}$-space. Starting from known band symmetries and energy gaps, you will derive the effective mass and nonparabolicity of the conduction band, linking the abstract band curvature to measurable parameters that govern transport and optical properties in materials like GaAs.", "problem": "Consider an electron in a periodic crystal potential described by the time-independent Schrödinger equation with single-particle Hamiltonian $H = \\frac{\\mathbf{p}^{2}}{2 m_{0}} + V(\\mathbf{r})$, where $m_{0}$ is the free-electron mass, $\\mathbf{p} = - i \\hbar \\nabla$, and $V(\\mathbf{r})$ has the translational symmetry of a zinc-blende lattice. Using Bloch’s theorem, the eigenstates are labeled by crystal momentum $\\mathbf{k}$, and near a band extremum at $\\mathbf{k}_{0} = \\mathbf{0}$ one can employ the wave vector times momentum ($k \\cdot p$) perturbation method. In this method, the crystal Hamiltonian at small $\\mathbf{k}$ is written as $H(\\mathbf{k}) = H(0) + \\frac{\\hbar}{m_{0}} \\mathbf{k} \\cdot \\mathbf{p} + \\frac{\\hbar^{2} k^{2}}{2 m_{0}}$ and interband couplings are treated to second order in $\\mathbf{k}$.\n\nFocus on the conduction-band minimum of gallium arsenide (GaAs) at the Brillouin-zone center $\\Gamma$. Take as the basis at $\\mathbf{k} = \\mathbf{0}$ the $s$-like conduction state $\\Gamma_{6c}$ and the three $p$-like valence states: the heavy-hole and light-hole doublet $\\Gamma_{8v}$ and the spin-orbit split-off band $\\Gamma_{7v}$. Define the Kane momentum matrix element $P$ by $P = \\frac{\\hbar}{m_{0}} \\langle S | p_{x} | X \\rangle$ (with the cubic symmetry ensuring isotropy), and the Kane energy $E_{p} = \\frac{2 m_{0} P^{2}}{\\hbar^{2}}$. Let the fundamental band gap be $E_{g}$, and the spin-orbit (SO) splitting be $\\Delta$.\n\nStarting from the above fundamental framework, use second-order $k \\cdot p$ perturbation theory about $\\mathbf{k}_{0} = \\mathbf{0}$, retaining only the couplings between $\\Gamma_{6c}$ and the valence states $\\Gamma_{8v}$ and $\\Gamma_{7v}$, and neglecting all other remote bands. Derive the isotropic, nonparabolic conduction-band dispersion near $\\Gamma$ in the form $E (1 + \\alpha E) = \\frac{\\hbar^{2} k^{2}}{2 m^{*}}$, and express both the effective mass ratio $m^{*} / m_{0}$ and the nonparabolicity parameter $\\alpha$ in terms of $E_{g}$, $\\Delta$, and $E_{p}$ only. Then, using the following material parameters for GaAs at room temperature:\n- $E_{g} = 1.42 \\,\\text{eV}$,\n- $\\Delta = 0.34 \\,\\text{eV}$,\n- $E_{p} = 28.8 \\,\\text{eV}$,\n\ncompute the numerical values of $m^{*} / m_{0}$ and $\\alpha$. Round your answers to four significant figures. Express the nonparabolicity parameter $\\alpha$ in $\\text{eV}^{-1}$. Present your final answer as a two-entry row matrix $\\begin{pmatrix} m^{*} / m_{0} & \\alpha \\end{pmatrix}$.", "solution": "The problem requires the derivation of the conduction-band dispersion relation for a direct-gap semiconductor with a zinc-blende structure, specifically Gallium Arsenide (GaAs), using the $\\mathbf{k} \\cdot \\mathbf{p}$ perturbation method. The goal is to find expressions for the effective mass $m^*$ and the nonparabolicity parameter $\\alpha$ in the dispersion relation $E (1 + \\alpha E) = \\frac{\\hbar^{2} k^{2}}{2 m^{*}}$, and then to compute their numerical values.\n\nThe analysis is performed near the Brillouin-zone center ($\\Gamma$-point, $\\mathbf{k}=\\mathbf{0}$). The basis states considered are the $s$-like conduction band state $|\\Gamma_{6c}\\rangle$ and the $p$-like valence band states $|\\Gamma_{8v}\\rangle$ (heavy and light hole) and $|\\Gamma_{7v}\\rangle$ (spin-orbit split-off). Let us define the unperturbed energies of these states at $\\mathbf{k}=\\mathbf{0}$. We set the energy of the top of the valence band ($|\\Gamma_{8v}\\rangle$ states) as the reference, $E_v = 0$.\nThe conduction band minimum ($|\\Gamma_{6c}\\rangle$ state) is at $E_c = E_g$.\nThe spin-orbit split-off band ($|\\Gamma_{7v}\\rangle$ state) is at $E_{so} = -\\Delta$.\nThe energy $E$ in the desired dispersion relation represents the electron energy measured from the conduction-band minimum, $E_c$.\n\nThe starting point is the Schrödinger equation for an electron in the crystal, $H(\\mathbf{k})|\\psi_{\\mathbf{k}}\\rangle = E(\\mathbf{k})|\\psi_{\\mathbf{k}}\\rangle$. The Hamiltonian at a small wavevector $\\mathbf{k}$ is given as:\n$$H(\\mathbf{k}) = H(0) + \\frac{\\hbar}{m_{0}} \\mathbf{k} \\cdot \\mathbf{p} + \\frac{\\hbar^{2} k^{2}}{2 m_{0}}$$\nwhere $H(0)$ is the Hamiltonian at $\\mathbf{k}=\\mathbf{0}$ with eigenstates $|n, \\mathbf{k}=\\mathbf{0}\\rangle$ and eigenenergies $E_{n}^{(0)}$. The terms involving $\\mathbf{k}$ are treated as a perturbation. To find the conduction band energy $E_c(\\mathbf{k})$, we use perturbation theory. A more accurate result for non-parabolicity is obtained by retaining the energy eigenvalue $E_c(\\mathbf{k})$ in the energy denominators, which is equivalent to solving the secular equation for the interacting bands.\n\nLet the eigenstate be $|c, \\mathbf{k}\\rangle$ and its energy be $E_c(\\mathbf{k})$. The equation for the amplitude of the $|c, \\mathbf{0}\\rangle$ component is:\n$$(E_{c}^{(0)} - E_c(\\mathbf{k})) \\langle c, \\mathbf{0} | c, \\mathbf{k}\\rangle + \\sum_{n \\neq c} \\langle c, \\mathbf{0}| H' |n, \\mathbf{0}\\rangle \\langle n, \\mathbf{0}|c, \\mathbf{k}\\rangle = 0$$\nwhere $H' = \\frac{\\hbar}{m_{0}} \\mathbf{k} \\cdot \\mathbf{p} + \\frac{\\hbar^{2} k^{2}}{2 m_{0}}$.\nFor any other state $|n, \\mathbf{0}\\rangle$, we have:\n$$(E_{n}^{(0)} - E_c(\\mathbf{k})) \\langle n, \\mathbf{0} | c, \\mathbf{k}\\rangle + \\langle n, \\mathbf{0}| H' |c, \\mathbf{0}\\rangle \\langle c, \\mathbf{0}|c, \\mathbf{k}\\rangle = 0$$\nWe neglect couplings between valence bands, which is an approximation made in the problem statement. From the second equation, we find:\n$$\\langle n, \\mathbf{0}|c, \\mathbf{k}\\rangle = \\frac{\\langle n, \\mathbf{0}| H' |c, \\mathbf{0}\\rangle}{E_c(\\mathbf{k}) - E_{n}^{(0)}} \\langle c, \\mathbf{0}|c, \\mathbf{k}\\rangle$$\nSubstituting this back into the first equation and dividing by $\\langle c, \\mathbf{0}|c, \\mathbf{k}\\rangle$:\n$$E_c(\\mathbf{k}) = E_{c}^{(0)} + \\langle c, \\mathbf{0}| H' |c, \\mathbf{0}\\rangle + \\sum_{n \\neq c} \\frac{|\\langle c, \\mathbf{0}| H' |n, \\mathbf{0}\\rangle|^2}{E_c(\\mathbf{k}) - E_{n}^{(0)}}$$\nThe first-order term is $\\langle c, \\mathbf{0}|H'|c, \\mathbf{0}\\rangle = \\langle c, \\mathbf{0}| \\frac{\\hbar}{m_0}\\mathbf{k}\\cdot\\mathbf{p} |c, \\mathbf{0}\\rangle + \\frac{\\hbar^2k^2}{2m_0}$. The matrix element $\\langle c, \\mathbf{0}|\\mathbf{p}|c, \\mathbf{0}\\rangle$ is zero for states of definite parity at $\\mathbf{k}=\\mathbf{0}$. The $\\mathbf{k}\\cdot\\mathbf{p}$ term in the second-order sum couples states of opposite parity, like the $s$-like conduction band and $p$-like valence bands. The $k^2$ term is diagonal and its off-diagonal elements are neglected. So:\n$$E_c(\\mathbf{k}) = E_g + \\frac{\\hbar^2 k^2}{2 m_0} + \\sum_{n \\in \\text{VB}} \\frac{|\\langle c, \\mathbf{0}| \\frac{\\hbar}{m_0}\\mathbf{k}\\cdot\\mathbf{p} |n, \\mathbf{0}\\rangle|^2}{E_c(\\mathbf{k}) - E_{n}^{(0)}}$$\nThe sum runs over the valence band states ($\\Gamma_{8v}$ and $\\Gamma_{7v}$). The total coupling strength to the $p$-like valence manifold is $\\sum_{n \\in \\text{VB}} |\\langle c, \\mathbf{0}| \\frac{\\hbar}{m_0}\\mathbf{k}\\cdot\\mathbf{p} |n, \\mathbf{0}\\rangle|^2 = k^2 P^2$, where $P = \\frac{\\hbar}{m_{0}} \\langle S | p_{x} | X \\rangle$ is the Kane matrix element. This strength is partitioned between the $\\Gamma_{8v}$ and $\\Gamma_{7v}$ states. Due to degeneracies, $2/3$ of the strength couples to the four $\\Gamma_{8v}$ states and $1/3$ to the two $\\Gamma_{7v}$ states.\nLet $E$ be the energy measured from the conduction band edge, $E = E_c(\\mathbf{k}) - E_g$. Then $E_c(\\mathbf{k}) = E + E_g$.\n$$E + E_g = E_g + \\frac{\\hbar^2 k^2}{2 m_0} + \\frac{\\frac{2}{3} k^2 P^2}{(E+E_g) - 0} + \\frac{\\frac{1}{3} k^2 P^2}{(E+E_g) - (-\\Delta)}$$\n$$E = \\frac{\\hbar^2 k^2}{2 m_0} + k^2 P^2 \\left[ \\frac{2}{3(E+E_g)} + \\frac{1}{3(E+E_g+\\Delta)} \\right]$$\nThis is an implicit equation for $E(k)$. For small $k$, $E$ is also small. We expand the denominators for small $E$:\n$$ \\frac{1}{E+E_g} = \\frac{1}{E_g(1+E/E_g)} \\approx \\frac{1}{E_g}\\left(1 - \\frac{E}{E_g}\\right) $$\n$$ \\frac{1}{E+E_g+\\Delta} = \\frac{1}{(E_g+\\Delta)(1+E/(E_g+\\Delta))} \\approx \\frac{1}{E_g+\\Delta}\\left(1 - \\frac{E}{E_g+\\Delta}\\right) $$\nSubstituting these into the equation for $E$:\n$$ E \\approx k^2 \\left\\{ \\frac{\\hbar^2}{2m_0} + P^2 \\left[ \\frac{2}{3E_g}\\left(1-\\frac{E}{E_g}\\right) + \\frac{1}{3(E_g+\\Delta)}\\left(1-\\frac{E}{E_g+\\Delta}\\right) \\right] \\right\\} $$\n$$ E \\approx k^2 \\left[ \\frac{\\hbar^2}{2m_0} + \\frac{P^2}{3}\\left(\\frac{2}{E_g} + \\frac{1}{E_g+\\Delta}\\right) \\right] - E k^2 \\frac{P^2}{3}\\left(\\frac{2}{E_g^2} + \\frac{1}{(E_g+\\Delta)^2}\\right) $$\nAt the band edge ($k \\to 0$), the dispersion is parabolic, $E = \\frac{\\hbar^2 k^2}{2m^*}$. By comparing coefficients of $k^2$, we identify the inverse effective mass $m^*$:\n$$ \\frac{\\hbar^2}{2m^*} = \\frac{\\hbar^2}{2m_0} + \\frac{P^2}{3}\\left(\\frac{2}{E_g} + \\frac{1}{E_g+\\Delta}\\right) $$\nUsing the Kane energy $E_p = \\frac{2m_0 P^2}{\\hbar^2}$, we rewrite $P^2 = \\frac{\\hbar^2 E_p}{2m_0}$.\n$$ \\frac{\\hbar^2}{2m^*} = \\frac{\\hbar^2}{2m_0} + \\frac{\\hbar^2 E_p}{6m_0}\\left(\\frac{2}{E_g} + \\frac{1}{E_g+\\Delta}\\right) $$\n$$ \\frac{m_0}{m^*} = 1 + \\frac{E_p}{3}\\left(\\frac{2}{E_g} + \\frac{1}{E_g+\\Delta}\\right) $$\nThis gives the expression for the effective mass ratio:\n$$ \\frac{m^*}{m_0} = \\left[ 1 + \\frac{E_p}{3}\\left(\\frac{2}{E_g} + \\frac{1}{E_g+\\Delta}\\right) \\right]^{-1} $$\nNow we find the nonparabolicity parameter $\\alpha$.\nLet's rearrange the expanded energy equation:\n$$ E \\left[ 1 + k^2 \\frac{P^2}{3}\\left(\\frac{2}{E_g^2} + \\frac{1}{(E_g+\\Delta)^2}\\right) \\right] \\approx k^2 \\frac{\\hbar^2}{2m^*} $$\nIn the correction term in the bracket (which is small), we can approximate $k^2$ using the parabolic relation: $k^2 \\approx \\frac{2m^*E}{\\hbar^2}$.\n$$ E \\left[ 1 + \\frac{2m^*E}{\\hbar^2} \\frac{P^2}{3}\\left(\\frac{2}{E_g^2} + \\frac{1}{(E_g+\\Delta)^2}\\right) \\right] \\approx \\frac{\\hbar^2 k^2}{2m^*} $$\nThis is in the desired form $E(1+\\alpha E) = \\frac{\\hbar^2 k^2}{2m^*}$, with $\\alpha$ identified as:\n$$ \\alpha = \\frac{2m^* P^2}{3\\hbar^2}\\left(\\frac{2}{E_g^2} + \\frac{1}{(E_g+\\Delta)^2}\\right) $$\nSubstituting $P^2$ again:\n$$ \\alpha = \\frac{2m^*}{3\\hbar^2} \\frac{\\hbar^2 E_p}{2m_0} \\left(\\frac{2}{E_g^2} + \\frac{1}{(E_g+\\Delta)^2}\\right) = \\frac{m^*}{m_0} \\frac{E_p}{3} \\left(\\frac{2}{E_g^2} + \\frac{1}{(E_g+\\Delta)^2}\\right) $$\nThis expression depends on $E_g$, $\\Delta$, and $E_p$, as required (since $m^*/m_0$ itself depends on these parameters).\n\nNow, we compute the numerical values for GaAs using the given parameters:\n$E_{g} = 1.42 \\,\\text{eV}$, $\\Delta = 0.34 \\,\\text{eV}$, $E_{p} = 28.8 \\,\\text{eV}$.\n\nFirst, we calculate the effective mass ratio $m^*/m_0$:\n$$ \\frac{m_0}{m^*} = 1 + \\frac{28.8}{3} \\left(\\frac{2}{1.42} + \\frac{1}{1.42 + 0.34}\\right) = 1 + 9.6 \\left(\\frac{2}{1.42} + \\frac{1}{1.76}\\right) $$\n$$ \\frac{m_0}{m^*} \\approx 1 + 9.6 \\left(1.4084507 + 0.5681818\\right) = 1 + 9.6 \\left(1.9766325\\right) \\approx 1 + 18.975672 \\approx 19.975672 $$\n$$ \\frac{m^*}{m_0} = \\frac{1}{19.975672} \\approx 0.05006089 $$\nRounding to four significant figures, $m^*/m_0 \\approx 0.05006$.\n\nNext, we calculate the nonparabolicity parameter $\\alpha$:\n$$ \\alpha = (0.05006089) \\frac{28.8}{3} \\left(\\frac{2}{(1.42)^2} + \\frac{1}{(1.42+0.34)^2}\\right) $$\n$$ \\alpha = (0.05006089) \\times 9.6 \\times \\left(\\frac{2}{2.0164} + \\frac{1}{(1.76)^2}\\right) = 0.4805845 \\times \\left(\\frac{2}{2.0164} + \\frac{1}{3.0976}\\right) $$\n$$ \\alpha \\approx 0.4805845 \\times (0.9918667 + 0.3228306) = 0.4805845 \\times 1.3146973 $$\n$$ \\alpha \\approx 0.631841 \\text{ eV}^{-1} $$\nRounding to four significant figures, $\\alpha \\approx 0.6318 \\text{ eV}^{-1}$.", "answer": "$$ \\boxed{ \\begin{pmatrix} 0.05006 & 0.6318 \\end{pmatrix} } $$", "id": "2971098"}, {"introduction": "Modern materials science relies heavily on computational methods that produce complex, numerical band structures. This final practice [@problem_id:2971110] bridges the gap between analytical theory and computational data analysis by focusing on a central concept for metals: the Fermi surface. You will develop a program to process a given two-dimensional band structure, identify the closed contours that form the Fermi surface, and classify the resulting \"pockets\" as electron-like or hole-like by numerically evaluating the band's curvature. This exercise provides essential skills for interpreting the results of modern *ab initio* calculations and understanding the nature of charge carriers in a material.", "problem": "You are given a two-dimensional discretized representation of a single-particle energy band structure $E_n(\\mathbf{k})$ over a uniform $\\mathbf{k}$-space grid, where $\\mathbf{k} = (k_x,k_y)$ with $k_x$ and $k_y$ expressed in inverse ångström ($\\mathrm{\\AA^{-1}}$), and energies $E_n$ expressed in electronvolts ($\\mathrm{eV}$). The Fermi energy $E_F$ is a fixed scalar in $\\mathrm{eV}$. The Fermi surface for band $n$ is defined by the set of $\\mathbf{k}$ such that $E_n(\\mathbf{k}) = E_F$. In two dimensions, Fermi surface \"sheets\" are closed isoenergy contours (closed curves) of $E_n(\\mathbf{k})$ at $E_F$. A pocket is classified as electron-like if $E_n(\\mathbf{k})$ has a local minimum in the region enclosed by the closed contour, and hole-like if $E_n(\\mathbf{k})$ has a local maximum in that region. Mathematically, the local curvature is captured by the Hessian matrix of second derivatives with respect to $\\mathbf{k}$, $H_{ij} = \\partial^2 E_n / \\partial k_i \\partial k_j$, and the definiteness of $H$ at the extremum determines the classification: positive definite implies an electron pocket, negative definite implies a hole pocket.\n\nStarting from the following fundamental bases:\n\n- The Fermi surface is defined by the equation $E_n(\\mathbf{k}) = E_F$.\n- In the effective mass approximation, the inverse effective mass tensor is given by $(m^{*})^{-1}_{ij} = \\hbar^{-2} \\, \\partial^2 E_n / \\partial k_i \\partial k_j$, so the sign pattern of $\\partial^2 E_n / \\partial k_i \\partial k_j$ (the Hessian) characterizes minima versus maxima.\n\nYour task is to write a program that, for each test case specified below, performs the following steps entirely within the program:\n\n1. Construct a uniform rectangular $\\mathbf{k}$-space grid over the specified domain using at least $N_x = 251$ and $N_y = 251$ points in the $k_x$ and $k_y$ directions, respectively. Let the grid spacings be $\\Delta k_x$ and $\\Delta k_y$.\n2. For each band function $E_n(k_x,k_y)$ specified in the test case, compute $D_n(k_x,k_y) = E_n(k_x,k_y) - E_F$ over the grid.\n3. Identify closed Fermi surface sheets by detecting connected components of the sublevel set $D_n(k_x,k_y) < 0$ (which corresponds to $E_n < E_F$) and the superlevel set $D_n(k_x,k_y) > 0$ (which corresponds to $E_n > E_F$). Treat a connected component as a Fermi surface sheet if and only if the component does not touch the boundary of the grid domain. Use four-neighbor connectivity in $(k_x,k_y)$ for component detection. Components that touch the domain boundary represent open Fermi contours and must not be counted as sheets.\n4. For each closed component, choose a representative interior grid point for curvature classification:\n   - For a component from $D_n < 0$, select the interior point that minimizes $E_n(k_x,k_y)$ over that component.\n   - For a component from $D_n > 0$, select the interior point that maximizes $E_n(k_x,k_y)$ over that component.\n5. At the selected interior point $(k_x^{*},k_y^{*})$, compute the Hessian matrix $H$ using second-order central finite differences:\n   $$E_{xx} \\approx \\frac{E(i+1,j) - 2E(i,j) + E(i-1,j)}{(\\Delta k_x)^2},\\quad\n   E_{yy} \\approx \\frac{E(i,j+1) - 2E(i,j) + E(i,j-1)}{(\\Delta k_y)^2},$$\n   $$E_{xy} \\approx \\frac{E(i+1,j+1) - E(i+1,j-1) - E(i-1,j+1) + E(i-1,j-1)}{4\\,\\Delta k_x\\,\\Delta k_y}.$$\n   Here, $(i,j)$ indexes $(k_x^{*},k_y^{*})$ on the grid, and $E(\\cdot,\\cdot)$ denotes the band energy samples. If $(i,j)$ is within one grid point of the boundary such that central differences cannot be computed, move to the nearest interior point within the component where the differences can be computed; if none exist, skip classification for that component.\n6. Classify the pocket by the definiteness of $H$ at the chosen interior point:\n   - Electron pocket: both eigenvalues of $H$ are positive (positive definite).\n   - Hole pocket: both eigenvalues of $H$ are negative (negative definite).\n   - Indefinite or numerically degenerate cases should not occur for the provided test suite; if encountered, treat classification by the sign of the component ($D_n<0$ implies electron, $D_n>0$ implies hole).\n7. Aggregate the counts per test case as a triple of integers $[N_{\\text{sheets}}, N_{\\text{electron}}, N_{\\text{hole}}]$, where $N_{\\text{sheets}}$ is the total number of closed Fermi surface sheets across all bands in the case, and $N_{\\text{electron}}$ and $N_{\\text{hole}}$ are the numbers of electron-like and hole-like pockets, respectively.\n\nTest suite (energies in $\\mathrm{eV}$, wavevectors in $\\mathrm{\\AA^{-1}}$):\n\n- Case 1 (single electron pocket):\n  - Domain: $k_x, k_y \\in [-1.5, 1.5]$.\n  - Bands: one band $E_1(k_x,k_y) = E_0 + \\alpha \\left((k_x-0)^2 + (k_y-0)^2\\right)$ with $E_0 = 0.1$ and $\\alpha = 0.5$.\n  - Fermi energy: $E_F = 0.4$.\n\n- Case 2 (single hole pocket):\n  - Domain: $k_x, k_y \\in [-1.5, 1.5]$.\n  - Bands: one band $E_1(k_x,k_y) = E_0 - \\alpha \\left((k_x-0)^2 + (k_y-0)^2\\right)$ with $E_0 = 0.6$ and $\\alpha = 0.4$.\n  - Fermi energy: $E_F = 0.2$.\n\n- Case 3 (one electron pocket at $\\Gamma$ and one hole pocket shifted to $(1.2,1.2)$):\n  - Domain: $k_x, k_y \\in [-2.0, 2.0]$.\n  - Bands:\n    - $E_1(k_x,k_y) = E_{0,e} + \\alpha_e \\left(k_x^2 + k_y^2\\right)$ with $E_{0,e} = 0.2$ and $\\alpha_e = 0.3$.\n    - $E_2(k_x,k_y) = E_{0,h} - \\alpha_h \\left((k_x-1.2)^2 + (k_y-1.2)^2\\right)$ with $E_{0,h} = 0.7$ and $\\alpha_h = 0.25$.\n  - Fermi energy: $E_F = 0.5$.\n\n- Case 4 (no closed pockets: one degenerate parabolic band at $E_F$ and one open cosine band):\n  - Domain: $k_x, k_y \\in [-\\pi, \\pi]$.\n  - Bands:\n    - $E_1(k_x,k_y) = E_0 + \\alpha \\left(k_x^2 + k_y^2\\right)$ with $E_0 = 0.3$ and $\\alpha = 0.4$.\n    - $E_2(k_x,k_y) = C + A \\cos(k_x)$ with $C = 0.3$ and $A = 0.7$.\n  - Fermi energy: $E_F = 0.3$.\n\nAnswer specification and output format:\n\n- For each test case, compute the integer triple $[N_{\\text{sheets}}, N_{\\text{electron}}, N_{\\text{hole}}]$.\n- Your program should produce a single line of output containing the results for the four cases as a comma-separated list of these triples enclosed in square brackets, for example, `[ […], […], […], […] ]`. The numbers themselves are unitless counts, so no physical units are required in the output.", "solution": "The user has provided a well-defined computational problem in condensed matter physics. The task is to identify and classify Fermi surface sheets for several given two-dimensional band structures.\n\n### **Problem Validation**\n\n**Step 1: Extracted Givens**\n- **Physical Model**: The problem concerns the analysis of a 2D single-particle energy band structure, $E_n(\\mathbf{k})$, where $\\mathbf{k} = (k_x, k_y)$. The Fermi surface is the locus of points where $E_n(\\mathbf{k}) = E_F$, with $E_F$ being the Fermi energy.\n- **Pocket Definition**: Closed Fermi surface contours enclose regions of $\\mathbf{k}$-space called \"pockets\". An electron pocket corresponds to a region where $E_n(\\mathbf{k})$ has a local minimum, and a hole pocket to a local maximum.\n- **Classification Criterion**: The type of pocket is determined by the definiteness of the Hessian matrix $H_{ij} = \\partial^2 E_n / \\partial k_i \\partial k_j$ at the extremum inside the pocket. Positive definite $H$ implies an electron pocket; negative definite $H$ implies a hole pocket.\n- **Computational Steps**: A detailed algorithm is specified:\n    1.  Construct a uniform $\\mathbf{k}$-space grid with $N_x, N_y \\ge 251$.\n    2.  Compute $D_n(k_x,k_y) = E_n(k_x,k_y) - E_F$.\n    3.  Identify closed sheets by finding connected components of the sets where $D_n < 0$ and $D_n > 0$. Components touching the grid boundary are excluded. Four-neighbor connectivity is specified.\n    4.  Select a representative point for each closed component: the point of minimum energy for a $D_n < 0$ component, and maximum energy for a $D_n > 0$ component.\n    5.  Compute the Hessian matrix at the representative point using the provided second-order central finite difference formulas. A procedure is specified for handling points near the grid boundary.\n    6.  Classify the pocket based on the signs of the Hessian's eigenvalues. A fallback rule is given for indefinite or degenerate cases.\n    7.  Aggregate the total counts of sheets, electron pockets, and hole pockets as a triple $[N_{\\text{sheets}}, N_{\\text{electron}}, N_{\\text{hole}}]$.\n- **Test Suite**: Four specific test cases are provided with defined domains, analytical band structure functions $E_n(k_x,k_y)$, and Fermi energies $E_F$.\n\n**Step 2: Validation Using Extracted Givens**\n- **Scientific Grounding**: The problem is rooted in fundamental and standard concepts of solid-state physics, namely band theory, Fermi surfaces, and the effective mass approximation. The relationship between band curvature and the nature of charge carriers (electron-like vs. hole-like) is a cornerstone of the field. The provided band structures are simplified but valid models used in theoretical analysis.\n- **Well-Posedness**: The problem is explicitly defined with a clear objective, a complete set of inputs (test cases), and an unambiguous, step-by-step procedure for arriving at the solution. The discretization parameters, numerical methods (finite differences, connectivity), and classification rules are all specified, ensuring a unique solution can be algorithmically determined. A preliminary analysis of the test cases confirms they are structured to test the specified rules, including the identification of both closed and open contours.\n- **Objectivity**: The problem is stated in precise, objective mathematical language, free from ambiguity or subjective interpretation.\n\n**Step 3: Verdict and Action**\nThe problem is scientifically sound, well-posed, objective, and complete. It passes all validation criteria. Therefore, the problem is deemed **valid**, and a solution will be developed.\n\n### **Principle-Based Solution Design**\n\nThe solution requires translating the physical concepts of Fermi surface analysis into a numerical algorithm. The core idea is to use a discrete grid representation of the continuous $\\mathbf{k}$-space and replace continuous properties (like derivatives and connectivity) with their discrete numerical counterparts.\n\n1.  **Grid Representation**: The continuous band structure $E_n(\\mathbf{k})$ is sampled on a discrete, uniform rectangular grid in $\\mathbf{k}$-space. The grid spans the specified domain with $N_x \\times N_y$ points, resulting in grid spacings $\\Delta k_x$ and $\\Delta k_y$. This discretization allows for the use of array-based numerical methods. We will use $N_x=N_y=251$ as the minimum required resolution.\n\n2.  **Fermi Surface Sheet Identification**: A Fermi surface sheet is a closed contour defined by $E_n(\\mathbf{k}) = E_F$. Such a contour encloses a region where the energy is either entirely above $E_F$ or entirely below $E_F$. We can identify these regions by thresholding the energy difference array $D_n = E_n - E_F$.\n    - The set of grid points where $D_n < 0$ forms regions corresponding to potential electron pockets.\n    - The set of grid points where $D_n > 0$ forms regions corresponding to potential hole pockets.\n    To distinguish individual pockets and separate them from open, non-physical contours, we perform a connected-component analysis on the binary masks derived from these inequalities. The `scipy.ndimage.label` function is ideally suited for this task, using a $4$-neighbor connectivity structure as specified. A component is identified as a \"closed sheet\" only if it does not contain any grid points on the boundary of the computational domain. Components touching the boundary are classified as \"open contours\" and discarded.\n\n3.  **Pocket Classification by Local Curvature**: The physical character of a pocket is determined by its behavior as an energy extremum. An electron pocket is an energy minimum (positive curvature), while a hole pocket is an energy maximum (negative curvature). The curvature is mathematically described by the Hessian matrix, $H_{ij} = \\frac{\\partial^2 E_n}{\\partial k_i \\partial k_j}$.\n    - **Representative Point**: To evaluate the curvature, we select a point that best represents the extremum within each identified closed component. For a component where $E_n < E_F$, the extremum is a minimum, so we choose the grid point within that component where $E_n$ is minimized. Conversely, for a component where $E_n > E_F$, we choose the point of maximum energy.\n    - **Numerical Hessian**: The partial derivatives in the Hessian are approximated using the specified second-order central finite difference formulas on the discrete energy grid $E$. For a point indexed by $(j, i)$ corresponding to $(k_y, k_x)$:\n      $$E_{xx} \\approx \\frac{E(j,i+1) - 2E(j,i) + E(j,i-1)}{(\\Delta k_x)^2}$$\n      $$E_{yy} \\approx \\frac{E(j+1,i) - 2E(j,i) + E(j,i-1)}{(\\Delta k_y)^2}$$\n      $$E_{xy} \\approx \\frac{E(j+1,i+1) - E(j+1,i-1) - E(j-1,i+1) + E(j-1,i-1)}{4\\,\\Delta k_x\\,\\Delta k_y}$$\n    - **Eigenvalue Analysis**: The definiteness of the computed Hessian matrix $H$ is determined by the signs of its eigenvalues. If both eigenvalues are positive, $H$ is positive definite, indicating a local minimum (electron pocket). If both are negative, $H$ is negative definite, indicating a local maximum (hole pocket). The problem provides a fallback rule for any other case (e.g., indefinite Hessian, numerical degeneracy), where the classification defaults to electron for $E_n < E_F$ regions and hole for $E_n > E_F$ regions.\n\nThis systematic procedure, implemented using `numpy` for array operations and `scipy` for connected-component labeling, allows for a robust and accurate analysis of the given band structures, yielding the required counts $[N_{\\text{sheets}}, N_{\\text{electron}}, N_{\\text{hole}}]$ for each test case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.ndimage import label\n\ndef solve():\n    \"\"\"\n    Analyzes 2D band structures to identify and classify Fermi surface pockets.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"domain\": [-1.5, 1.5],\n            \"bands\": [lambda kx, ky: 0.1 + 0.5 * (kx**2 + ky**2)],\n            \"Ef\": 0.4,\n        },\n        {\n            \"domain\": [-1.5, 1.5],\n            \"bands\": [lambda kx, ky: 0.6 - 0.4 * (kx**2 + ky**2)],\n            \"Ef\": 0.2,\n        },\n        {\n            \"domain\": [-2.0, 2.0],\n            \"bands\": [\n                lambda kx, ky: 0.2 + 0.3 * (kx**2 + ky**2),\n                lambda kx, ky: 0.7 - 0.25 * ((kx - 1.2)**2 + (ky - 1.2)**2),\n            ],\n            \"Ef\": 0.5,\n        },\n        {\n            \"domain\": [-np.pi, np.pi],\n            \"bands\": [\n                lambda kx, ky: 0.3 + 0.4 * (kx**2 + ky**2),\n                lambda kx, ky: 0.3 + 0.7 * np.cos(kx),\n            ],\n            \"Ef\": 0.3,\n        },\n    ]\n\n    all_results = []\n    \n    # 4-neighbor connectivity structure for scipy.ndimage.label\n    connectivity_structure = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])\n    \n    for case in test_cases:\n        domain = case[\"domain\"]\n        bands = case[\"bands\"]\n        Ef = case[\"Ef\"]\n        Nx = 251\n        Ny = 251\n\n        n_sheets = 0\n        n_electron = 0\n        n_hole = 0\n\n        kx_vals = np.linspace(domain[0], domain[1], Nx)\n        ky_vals = np.linspace(domain[0], domain[1], Ny)\n        dkx = kx_vals[1] - kx_vals[0]\n        dky = ky_vals[1] - ky_vals[0]\n        \n        # Use 'xy' indexing: kx_grid[j, i] = kx_vals[i], ky_grid[j, i] = ky_vals[j]\n        # This aligns with matrix (row, col) indexing where row=j (y-dir) and col=i (x-dir)\n        kx_grid, ky_grid = np.meshgrid(kx_vals, ky_vals, indexing='xy')\n\n        for band_func in bands:\n            E = band_func(kx_grid, ky_grid)\n            D = E - Ef\n\n            # --- Process sublevel set (E < Ef --> potential electron pockets) ---\n            mask_lt = D < 0\n            labeled_lt, num_features_lt = label(mask_lt, structure=connectivity_structure)\n            \n            if num_features_lt > 0:\n                border_labels = set(labeled_lt[0, :]) | set(labeled_lt[-1, :]) \\\n                              | set(labeled_lt[:, 0]) | set(labeled_lt[:, -1])\n                border_labels.discard(0)\n                \n                for i in range(1, num_features_lt + 1):\n                    if i in border_labels: continue\n                    \n                    n_sheets += 1\n                    \n                    component_coords = np.argwhere(labeled_lt == i)\n                    energies_in_component = E[component_coords[:, 0], component_coords[:, 1]]\n                    min_idx_in_component = np.argmin(energies_in_component)\n                    rep_coord = component_coords[min_idx_in_component]\n                    \n                    j, i_idx = rep_coord[0], rep_coord[1]\n                    \n                    if not (0 < j < Ny - 1 and 0 < i_idx < Nx - 1):\n                        safe_coords = [c for c in component_coords if 0 < c[0] < Ny - 1 and 0 < c[1] < Nx - 1]\n                        if not safe_coords: continue\n                        safe_coords = np.array(safe_coords)\n                        distances = np.sum((safe_coords - rep_coord)**2, axis=1)\n                        j, i_idx = safe_coords[np.argmin(distances)]\n\n                    Exx = (E[j, i_idx+1] - 2*E[j, i_idx] + E[j, i_idx-1]) / (dkx**2)\n                    Eyy = (E[j+1, i_idx] - 2*E[j, i_idx] + E[j-1, i_idx]) / (dky**2)\n                    Exy = (E[j+1, i_idx+1] - E[j+1, i_idx-1] - E[j-1, i_idx+1] + E[j-1, i_idx-1]) / (4 * dkx * dky)\n                    \n                    H = np.array([[Exx, Exy], [Exy, Eyy]])\n                    eigvals = np.linalg.eigvalsh(H)\n                    \n                    if np.all(eigvals > 0):\n                        n_electron += 1\n                    else: n_electron += 1 # Fallback rule\n                        \n            # --- Process superlevel set (E > Ef --> potential hole pockets) ---\n            mask_gt = D > 0\n            labeled_gt, num_features_gt = label(mask_gt, structure=connectivity_structure)\n            \n            if num_features_gt > 0:\n                border_labels = set(labeled_gt[0, :]) | set(labeled_gt[-1, :]) \\\n                              | set(labeled_gt[:, 0]) | set(labeled_gt[:, -1])\n                border_labels.discard(0)\n                \n                for i in range(1, num_features_gt + 1):\n                    if i in border_labels: continue\n                    \n                    n_sheets += 1\n                    \n                    component_coords = np.argwhere(labeled_gt == i)\n                    energies_in_component = E[component_coords[:, 0], component_coords[:, 1]]\n                    max_idx_in_component = np.argmax(energies_in_component)\n                    rep_coord = component_coords[max_idx_in_component]\n                    \n                    j, i_idx = rep_coord[0], rep_coord[1]\n                    \n                    if not (0 < j < Ny - 1 and 0 < i_idx < Nx - 1):\n                        safe_coords = [c for c in component_coords if 0 < c[0] < Ny - 1 and 0 < c[1] < Nx - 1]\n                        if not safe_coords: continue\n                        safe_coords = np.array(safe_coords)\n                        distances = np.sum((safe_coords - rep_coord)**2, axis=1)\n                        j, i_idx = safe_coords[np.argmin(distances)]\n\n                    Exx = (E[j, i_idx+1] - 2*E[j, i_idx] + E[j, i_idx-1]) / (dkx**2)\n                    Eyy = (E[j+1, i_idx] - 2*E[j, i_idx] + E[j-1, i_idx]) / (dky**2)\n                    Exy = (E[j+1, i_idx+1] - E[j+1, i_idx-1] - E[j-1, i_idx+1] + E[j-1, i_idx-1]) / (4 * dkx * dky)\n                    \n                    H = np.array([[Exx, Exy], [Exy, Eyy]])\n                    eigvals = np.linalg.eigvalsh(H)\n                    \n                    if np.all(eigvals < 0):\n                        n_hole += 1\n                    else: n_hole += 1 # Fallback rule\n\n        all_results.append([n_sheets, n_electron, n_hole])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, all_results))}]\")\n\nsolve()\n```", "id": "2971110"}]}