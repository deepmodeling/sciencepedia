{"hands_on_practices": [{"introduction": "A firm grasp of the ferromagnetic ground state is the essential foundation for understanding spin-wave excitations. This exercise guides you through a first-principles analysis of the quantum Heisenberg model, using the fundamental properties of SU(2) symmetry to characterize the ground-state manifold [@problem_id:3017163]. By introducing a Zeeman term, you will see precisely how an external magnetic field lifts this degeneracy to select a unique, fully polarized ground state.", "problem": "Consider a quantum Heisenberg ferromagnet on a connected lattice of $N$ sites with periodic boundary conditions. Each site hosts a spin of magnitude $S \\in \\{\\tfrac{1}{2}, 1, \\tfrac{3}{2}, \\dots\\}$. The Hamiltonian is\n$$\nH \\;=\\; H_{\\text{ex}} \\;+\\; H_{Z}, \\qquad H_{\\text{ex}} \\;=\\; -J \\sum_{\\langle i j\\rangle} \\mathbf{S}_{i}\\cdot \\mathbf{S}_{j}, \\qquad H_{Z} \\;=\\; -\\, g\\,\\mu_{B}\\, B \\sum_{i=1}^{N} S_{i}^{z},\n$$\nwith $J>0$ (ferromagnetic exchange), $g>0$ the Landé factor, $\\mu_{B}$ the Bohr magneton, and $B \\in \\mathbb{R}$ a uniform magnetic field along the $z$-axis. Assume zero temperature ($T=0$), no magnetic anisotropy beyond the isotropic exchange shown, and that the lattice is such that a fully aligned spin configuration exists (which is true for any connected lattice).\n\nStarting from first principles of rotational invariance and the algebra of angular momentum, determine the exact ground-state total magnetization as a function of $B$ at $T=0$. Specifically, derive the function $M_{\\text{tot}}(B) \\equiv g\\,\\mu_{B}\\,\\langle S_{\\text{tot}}^{z}\\rangle$ of the ground state, where $S_{\\text{tot}}^{z} \\equiv \\sum_{i=1}^{N} S_{i}^{z}$, and show how the Zeeman term selects a unique member of the ground-state multiplet for $B\\neq 0$.\n\nExpress your final answer as a single closed-form analytic expression for the total magnetization divided by $g\\,\\mu_{B}$, namely $M_{\\text{tot}}(B)/(g\\,\\mu_{B})$, as a function of $B$. If you need to assign a value at $B=0$, use the convention that the sign function satisfies $\\mathrm{sgn}(0)=0$. Do not round your answer.", "solution": "The problem requires the determination of the ground-state total magnetization of a quantum Heisenberg ferromagnet as a function of an external magnetic field $B$ at zero temperature ($T=0$). The analysis will be based on the symmetries of the Hamiltonian and the principles of quantum angular momentum.\n\nThe Hamiltonian of the system is given by $H = H_{\\text{ex}} + H_{Z}$, where:\n$$\nH_{\\text{ex}} = -J \\sum_{\\langle i j\\rangle} \\mathbf{S}_{i}\\cdot \\mathbf{S}_{j} \\quad (J>0)\n$$\n$$\nH_{Z} = -g\\mu_{B} B \\sum_{i=1}^{N} S_{i}^{z}\n$$\nHere, $\\mathbf{S}_i$ is the spin operator at site $i$, $J$ is the ferromagnetic exchange coupling, $\\langle ij \\rangle$ denotes a sum over nearest-neighbor pairs, $g$ is the Landé g-factor, $\\mu_B$ is the Bohr magneton, $B$ is the external magnetic field along the $z$-axis, and $N$ is the total number of sites.\n\nFirst, we analyze the symmetries of the exchange Hamiltonian, $H_{\\text{ex}}$. Let $\\mathbf{S}_{\\text{tot}} = \\sum_{i=1}^{N} \\mathbf{S}_i$ be the total spin operator of the system. The components of the total spin, $S_{\\text{tot}}^x$, $S_{\\text{tot}}^y$, and $S_{\\text{tot}}^z$, obey the standard SU($2$) commutation relations, e.g., $[S_{\\text{tot}}^x, S_{\\text{tot}}^y] = i S_{\\text{tot}}^z$ (in units where $\\hbar=1$). The operator $\\mathbf{S}_i \\cdot \\mathbf{S}_j$ is a scalar product and is invariant under a simultaneous rotation of both spins $\\mathbf{S}_i$ and $\\mathbf{S}_j$. Since $H_{\\text{ex}}$ is a sum of such scalar products, it is invariant under a global rotation applied to all spins simultaneously. This means that $H_{\\text{ex}}$ commutes with all components of the total spin operator:\n$$\n[H_{\\text{ex}}, \\mathbf{S}_{\\text{tot}}] = 0\n$$\nThis rotational invariance implies that the eigenstates of $H_{\\text{ex}}$ can be simultaneously diagonalized with $\\mathbf{S}_{\\text{tot}}^2$ and one component, say $S_{\\text{tot}}^z$. The eigenstates may be labeled by the total spin quantum number $S_{\\text{tot}}$ and the total magnetic quantum number $m_{\\text{tot}}$. Due to the symmetry, the energy eigenvalues of $H_{\\text{ex}}$ depend only on $S_{\\text{tot}}$ and are degenerate with respect to $m_{\\text{tot}}$, which can take any integer value from $-S_{\\text{tot}}$ to $S_{\\text{tot}}$. The degeneracy of a level with total spin $S_{\\text{tot}}$ is $(2S_{\\text{tot}}+1)$.\n\nTo find the ground state of $H_{\\text{ex}}$, we seek to minimize its energy. Since $J > 0$, the energy $E_{\\text{ex}} = -J \\sum_{\\langle ij \\rangle} \\langle \\mathbf{S}_i \\cdot \\mathbf{S}_j \\rangle$ is minimized when the expectation value of $\\mathbf{S}_i \\cdot \\mathbf{S}_j$ is maximized for all pairs $\\langle ij \\rangle$. This occurs when the spins are maximally aligned, i.e., they are all parallel. Such a state has the maximum possible total spin quantum number, which is $S_{\\text{tot}} = NS$, where $S$ is the spin magnitude at each site. The ground state of the exchange Hamiltonian is therefore the multiplet of states characterized by $S_{\\text{tot}} = NS$. This ground-state manifold is $(2(NS)+1)$-fold degenerate, consisting of states $|S_{\\text{tot}}=NS, m_{\\text{tot}}\\rangle$ for $m_{\\text{tot}} = -NS, -NS+1, \\dots, NS$. All these states share the same ground-state energy, $E_{0, \\text{ex}}$.\n\nNext, we consider the full Hamiltonian $H = H_{\\text{ex}} + H_Z$. The Zeeman term can be written as $H_Z = -g\\mu_B B S_{\\text{tot}}^z$. The presence of the magnetic field $B$ along the $z$-axis breaks the full SU($2$) rotational symmetry. While $H$ still commutes with $S_{\\text{tot}}^z$ (since both $H_{\\text{ex}}$ and $S_{\\text{tot}}^z$ commute with $S_{\\text{tot}}^z$), it no longer commutes with $S_{\\text{tot}}^x$ or $S_{\\text{tot}}^y$ for $B \\neq 0$. Specifically, $[H, S_{\\text{tot}}^x] = [H_Z, S_{\\text{tot}}^x] = -g\\mu_B B [S_{\\text{tot}}^z, S_{\\text{tot}}^x] = -i g\\mu_B B S_{\\text{tot}}^y \\neq 0$.\n\nThe states $|NS, m_{\\text{tot}}\\rangle$ forming the ground-state multiplet of $H_{\\text{ex}}$ are also eigenstates of $S_{\\text{tot}}^z$. Therefore, they are eigenstates of the full Hamiltonian $H$:\n$$\nH |NS, m_{\\text{tot}}\\rangle = (H_{\\text{ex}} + H_Z) |NS, m_{\\text{tot}}\\rangle = H_{\\text{ex}}|NS, m_{\\text{tot}}\\rangle - g\\mu_B B S_{\\text{tot}}^z |NS, m_{\\text{tot}}\\rangle\n$$\nThe energy eigenvalue $E(m_{\\text{tot}})$ for each state in the multiplet is:\n$$\nE(m_{\\text{tot}}) = E_{0, \\text{ex}} - g\\mu_B B m_{\\text{tot}}\n$$\nThe Zeeman term lifts the degeneracy of the ground-state multiplet. At zero temperature ($T=0$), the system will reside in the state with the absolute minimum energy. To find this state, we must minimize $E(m_{\\text{tot}})$ with respect to $m_{\\text{tot}}$, over its allowed range $\\{-NS, \\dots, NS\\}$.\n\nThe minimization of $E(m_{\\text{tot}})$ depends on the sign of the magnetic field $B$, as both $g$ and $\\mu_B$ are positive constants.\n\nCase 1: $B>0$. To minimize $E(m_{\\text{tot}})$, we must maximize the term $m_{\\text{tot}}$. The maximum possible value for $m_{\\text{tot}}$ is $NS$. Thus, for $B>0$, the unique ground state is $|GS\\rangle = |NS, m_{\\text{tot}}=NS\\rangle$. The expectation value of the total spin projection in this state is $\\langle S_{\\text{tot}}^z \\rangle = NS$.\n\nCase 2: $B<0$. To minimize $E(m_{\\text{tot}})$, we must minimize the term $m_{\\text{tot}}$ (since $B$ is negative). The minimum possible value for $m_{\\text{tot}}$ is $-NS$. Thus, for $B<0$, the unique ground state is $|GS\\rangle = |NS, m_{\\text{tot}}=-NS\\rangle$. The expectation value of the total spin projection in this state is $\\langle S_{\\text{tot}}^z \\rangle = -NS$.\n\nCase 3: $B=0$. The Hamiltonian reduces to $H=H_{\\text{ex}}$, and the Zeeman term vanishes. The ground state is the $(2NS+1)$-fold degenerate multiplet $|NS, m_{\\text{tot}}\\rangle$. In this situation, the expectation value of an operator that is not a rotational invariant (like $S_{\\text{tot}}^z$) is typically taken as an average over the degenerate ground-state ensemble, which physically corresponds to the absence of a preferred direction for spontaneous magnetization. The ensemble average is:\n$$\n\\langle S_{\\text{tot}}^z \\rangle_{B=0} = \\frac{\\sum_{m_{\\text{tot}}=-NS}^{NS} \\langle NS, m_{\\text{tot}}| S_{\\text{tot}}^z |NS, m_{\\text{tot}}\\rangle}{\\sum_{m_{\\text{tot}}=-NS}^{NS} 1} = \\frac{1}{2NS+1} \\sum_{m_{\\text{tot}}=-NS}^{NS} m_{\\text{tot}}\n$$\nThis sum is over a symmetric range about zero, so the sum is exactly zero. Thus, for $B=0$, we have $\\langle S_{\\text{tot}}^z \\rangle = 0$.\n\nCombining these three cases, we can express the ground-state expectation value $\\langle S_{\\text{tot}}^z \\rangle$ as a function of $B$:\n$$\n\\langle S_{\\text{tot}}^z \\rangle (B) = \\begin{cases} NS & \\text{if } B > 0 \\\\ 0 & \\text{if } B = 0 \\\\ -NS & \\text{if } B < 0 \\end{cases}\n$$\nThis piecewise function can be written compactly using the sign function, $\\mathrm{sgn}(B)$, with the specified convention that $\\mathrm{sgn}(0)=0$:\n$$\n\\langle S_{\\text{tot}}^z \\rangle (B) = NS \\, \\mathrm{sgn}(B)\n$$\nThe problem asks for the quantity $M_{\\text{tot}}(B)/(g\\mu_B)$. The total magnetization is defined as $M_{\\text{tot}}(B) = g\\mu_B \\langle S_{\\text{tot}}^z \\rangle$. Therefore,\n$$\n\\frac{M_{\\text{tot}}(B)}{g\\mu_B} = \\langle S_{\\text{tot}}^z \\rangle (B) = NS \\, \\mathrm{sgn}(B)\n$$\nThis expression represents the total spin projection of the ground state in units of $\\hbar$, which becomes fully saturated (positively or negatively) for any non-zero field and vanishes at zero field due to the restoration of full rotational symmetry in the ground-state manifold.", "answer": "$$\n\\boxed{NS \\, \\mathrm{sgn}(B)}\n$$", "id": "3017163"}, {"introduction": "Thermal fluctuations can dramatically alter the collective behavior of a spin system, with effects that are highly sensitive to dimensionality. This practice explores the stability of long-range ferromagnetic order in two dimensions, providing a direct encounter with the physics of the Mermin-Wagner theorem [@problem_id:3017157]. You will first demonstrate why thermal magnons destroy order in a purely isotropic system and then discover how a small anisotropy stabilizes it by opening an energy gap in the spin-wave spectrum.", "problem": "Consider a two-dimensional isotropic Heisenberg ferromagnet in the long-wavelength, low-temperature regime where the spin dynamics are well described by noninteracting magnons (linear spin-wave theory). Let the magnon dispersion be given by either the gapless form $\\epsilon_{\\mathbf{k}}=D k^{2}$ (isotropic case) or the gapped form $\\epsilon_{\\mathbf{k}}=\\Delta + D k^{2}$ (easy-axis anisotropy), where $D$ is the spin-wave stiffness and $\\Delta>0$ is the anisotropy gap. The reduction of the magnetization density due to thermal magnons is\n$$\n\\delta M(T)= (g\\,\\mu_{B}) \\int \\frac{d^{2}k}{(2\\pi)^{2}}\\, n_{B}(\\epsilon_{\\mathbf{k}}),\n$$\nwhere $g$ is the Landé factor, $\\mu_{B}$ is the Bohr magneton, and $n_{B}(x)=\\left[\\exp(x/T)-1\\right]^{-1}$ is the Bose–Einstein (BE) distribution. Work in units where the Boltzmann constant $k_{B}=1$ so that temperature $T$ has units of energy.\n\n(a) Using only the long-wavelength form of $\\epsilon_{\\mathbf{k}}$, analyze the infrared behavior of the integral for the gapless case $\\epsilon_{\\mathbf{k}}=Dk^{2}$ and determine whether $\\delta M(T)$ is finite or divergent for any fixed $T>0$.\n\n(b) For the gapped case $\\epsilon_{\\mathbf{k}}=\\Delta + D k^{2}$, derive the leading-order asymptotic form of $\\delta M(T)$ in the low-temperature limit $T\\ll \\Delta$. Your derivation must start from the expression above and proceed from first principles of the BE distribution and continuum $\\mathbf{k}$-space integration, without invoking any pre-tabulated asymptotic result.\n\nProvide your final answer as a single closed-form analytic expression for the leading-order low-temperature asymptotic form of $\\delta M(T)$ per unit area for the gapped case, expressed in terms of $g$, $\\mu_{B}$, $D$, $\\Delta$, and $T$. Express the answer in units of magnetic moment per area by leaving $g\\,\\mu_{B}$ explicit. No numerical evaluation is required.", "solution": "**(a) Analysis of the Gapless Case ($\\epsilon_{\\mathbf{k}}=Dk^{2}$)**\n\nFor the gapless case, the reduction in magnetization density is given by:\n$$ \\delta M(T) = (g\\,\\mu_{B}) \\int \\frac{d^{2}k}{(2\\pi)^{2}}\\, n_{B}(Dk^{2}) = (g\\,\\mu_{B}) \\int \\frac{d^{2}k}{(2\\pi)^{2}}\\, \\frac{1}{\\exp(Dk^{2}/T) - 1} $$\nWe are asked to analyze the infrared behavior, which corresponds to the behavior of the integral for small wavevectors, i.e., as $k \\to 0$. For any fixed temperature $T>0$, as $k \\to 0$, the argument of the exponential $Dk^{2}/T \\to 0$. In this limit, we can use the Taylor expansion of the exponential function, $\\exp(x) \\approx 1 + x$ for small $x$.\nApplying this to the Bose-Einstein distribution:\n$$ n_{B}(Dk^{2}) = \\frac{1}{\\exp(Dk^{2}/T) - 1} \\approx \\frac{1}{(1 + Dk^{2}/T) - 1} = \\frac{T}{Dk^{2}} \\quad \\text{for } k \\to 0 $$\nThe integral for $\\delta M(T)$ is over the two-dimensional $\\mathbf{k}$-space. It is convenient to switch to polar coordinates, where the differential area element is $d^{2}k = 2\\pi k \\, dk$. The integral becomes:\n$$ \\delta M(T) = \\frac{g\\,\\mu_{B}}{(2\\pi)^2} \\int_{0}^{k_{c}} 2\\pi k \\, dk \\, n_{B}(Dk^{2}) = \\frac{g\\,\\mu_{B}}{2\\pi} \\int_{0}^{k_{c}} k \\, dk \\, \\frac{1}{\\exp(Dk^{2}/T) - 1} $$\nwhere $k_{c}$ is an upper cutoff wavevector, defining the boundary of the long-wavelength regime. The convergence of the integral is determined by its behavior near the lower limit $k=0$. Substituting the small-$k$ approximation for the integrand:\n$$ \\int_{0}^{k_{c}} k \\left(\\frac{T}{Dk^{2}}\\right) dk = \\frac{T}{D} \\int_{0}^{k_{c}} \\frac{1}{k} \\, dk $$\nThis integral is of the form $\\int (1/k) \\, dk = \\ln(k)$. Evaluating it from a small, non-zero lower limit $\\epsilon \\to 0$:\n$$ \\lim_{\\epsilon \\to 0} \\left[ \\ln(k) \\right]_{\\epsilon}^{k_{c}} = \\ln(k_{c}) - \\lim_{\\epsilon \\to 0} \\ln(\\epsilon) $$\nAs $\\epsilon \\to 0$, $\\ln(\\epsilon) \\to -\\infty$. Therefore, the integral diverges logarithmically at the lower limit. This is known as an infrared divergence.\nConsequently, for any finite temperature $T > 0$, the calculated reduction in magnetization $\\delta M(T)$ is infinite. This implies that thermal fluctuations completely destroy the long-range ferromagnetic order, a result consistent with the Mermin-Wagner theorem for two-dimensional systems with continuous symmetries and short-range interactions.\n\n**Conclusion for (a):** $\\delta M(T)$ is divergent for any $T>0$.\n\n**(b) Asymptotic Form for the Gapped Case ($\\epsilon_{\\mathbf{k}}=\\Delta + D k^{2}$)**\n\nFor the gapped case, the magnetization reduction is:\n$$ \\delta M(T) = (g\\,\\mu_{B}) \\int \\frac{d^{2}k}{(2\\pi)^{2}}\\, \\frac{1}{\\exp((\\Delta + D k^{2})/T) - 1} $$\nWe are interested in the low-temperature limit, where $T \\ll \\Delta$. This implies that the ratio $\\Delta/T \\gg 1$.\nThe argument of the Bose-Einstein distribution is $(\\Delta + Dk^2)/T$. Since $\\Delta > 0$, $D > 0$, and $k^2 \\ge 0$, this argument is always greater than or equal to $\\Delta/T$. Given $T \\ll \\Delta$, the argument is always large.\nFor a large argument $x \\gg 1$, the Bose-Einstein distribution can be approximated by neglecting the $-1$ in the denominator compared to the large $\\exp(x)$ term:\n$$ n_{B}(x) = \\frac{1}{\\exp(x) - 1} \\approx \\frac{1}{\\exp(x)} = \\exp(-x) $$\nApplying this approximation to our integral:\n$$ \\delta M(T) \\approx (g\\,\\mu_{B}) \\int \\frac{d^{2}k}{(2\\pi)^{2}}\\, \\exp\\left(-\\frac{\\Delta + D k^{2}}{T}\\right) $$\nWe convert the integral over $\\mathbf{k}$-space to polar coordinates, with $k = |\\mathbf{k}|$ and $d^{2}k = 2\\pi k \\, dk$. The integration range for $k$ is from $0$ to $\\infty$. The contribution from large $k$ is exponentially suppressed, so extending the upper limit to infinity from a finite cutoff $k_c$ does not affect the leading-order asymptotic behavior.\n$$ \\delta M(T) \\approx \\frac{g\\,\\mu_{B}}{(2\\pi)^2} \\int_0^\\infty (2\\pi k \\, dk) \\, \\exp\\left(-\\frac{\\Delta}{T}\\right) \\exp\\left(-\\frac{D k^{2}}{T}\\right) $$\nSimplifying and factoring out the term independent of $k$:\n$$ \\delta M(T) \\approx \\frac{g\\,\\mu_{B}}{2\\pi} \\exp\\left(-\\frac{\\Delta}{T}\\right) \\int_0^\\infty k \\exp\\left(-\\frac{D}{T} k^{2}\\right) dk $$\nThe remaining integral is a standard Gaussian integral. Let us evaluate it. We perform a change of variables. Let $u = \\frac{D}{T} k^{2}$. Then $du = \\frac{2D}{T} k \\, dk$, which gives $k \\, dk = \\frac{T}{2D} du$. The limits of integration for $u$ are from $u(k=0)=0$ to $u(k=\\infty)=\\infty$.\n$$ \\int_0^\\infty k \\exp\\left(-\\frac{D}{T} k^{2}\\right) dk = \\int_0^\\infty \\exp(-u) \\left(\\frac{T}{2D} du\\right) = \\frac{T}{2D} \\int_0^\\infty \\exp(-u) du $$\nThe definite integral $\\int_0^\\infty \\exp(-u) du = [-\\exp(-u)]_0^\\infty = (0) - (-1) = 1$.\nSo, the value of the integral is $\\frac{T}{2D}$.\nSubstituting this result back into the expression for $\\delta M(T)$:\n$$ \\delta M(T) \\approx \\frac{g\\,\\mu_{B}}{2\\pi} \\exp\\left(-\\frac{\\Delta}{T}\\right) \\left(\\frac{T}{2D}\\right) $$\nCombining the terms gives the leading-order asymptotic form for the magnetization reduction in the low-temperature limit:\n$$ \\delta M(T) \\approx \\frac{g\\,\\mu_{B} T}{4\\pi D} \\exp\\left(-\\frac{\\Delta}{T}\\right) $$\nThis expression shows that the magnetization reduction is exponentially suppressed at low temperatures due to the presence of the energy gap $\\Delta$.", "answer": "$$\n\\boxed{\\frac{g \\mu_{B} T}{4 \\pi D} \\exp\\left(-\\frac{\\Delta}{T}\\right)}\n$$", "id": "3017157"}, {"introduction": "The ultimate test of a theoretical model is its ability to describe experimental measurements. This computational practice bridges the gap between the theory of spin waves and the data obtained from inelastic neutron scattering (INS), the primary experimental probe for magnetic excitations [@problem_id:3017112]. By building a principled estimator to extract microscopic parameters like exchange couplings from simulated INS data, you will develop a critical understanding of how theory and experiment are quantitatively linked in modern condensed matter physics.", "problem": "You are tasked with building a complete, principled estimator to extract exchange constants from synthetic inelastic neutron scattering data for magnons in ferromagnets, using a first-principles baseline and accounting for instrumental resolution. Your estimator must be implemented as a program that (i) synthesizes measurement data from known ground-truth parameters, (ii) fits model parameters to the synthesized data using a physically grounded weighting derived from instrumental resolution, and (iii) reports uncertainties estimated from the Fisher information. All results must be reported in millielectronvolts (meV), and all trigonometric arguments must be evaluated in radians. The final program must print a single line containing a list of lists of floats as specified under Final Output Format.\n\nThe base of the problem is the quantum Heisenberg ferromagnet with spin $S$ on a Bravais lattice and weak uniaxial anisotropy. The Hamiltonian is\n$$\n\\hat{H} \\;=\\; -\\sum_{\\langle i,j \\rangle} J_{ij}\\,\\hat{\\mathbf{S}}_i\\cdot \\hat{\\mathbf{S}}_j \\;-\\; K\\sum_i \\left(\\hat{S}_i^z\\right)^2,\n$$\nwith exchange constants $J_{ij} \\ge 0$ favoring ferromagnetic alignment and anisotropy $K \\ge 0$. In the linear spin-wave approximation about the ferromagnetic ground state, there is a single-magnon branch with energy $\\epsilon_{\\mathbf{q}}$ and a delta-like dynamical structure factor $S(\\mathbf{q},\\omega)$ concentrated at $\\omega = \\epsilon_{\\mathbf{q}}/\\hbar$. Instrumental resolution of an inelastic neutron spectrometer can be modeled by a Gaussian broadening in both momentum and energy. When scanning in energy $\\omega$ at a fixed nominal wavevector $\\mathbf{q}$, an effective energy width arises from both the intrinsic energy resolution and the dispersion slope via error propagation.\n\nYou must design and implement a procedure that:\n- Constructs the magnon dispersion $\\epsilon_{\\mathbf{q}}$ for a ferromagnet in one spatial dimension (with up to next-nearest-neighbor exchange) and for a two-dimensional square lattice along the $\\Gamma$–$X$ direction (nearest neighbor only), starting from the linear spin-wave framework. The anisotropy introduces a gap $\\Delta$ at $\\mathbf{q}=0$.\n- Synthesizes “measured” peak energies $\\{\\epsilon_i\\}$ at discrete momenta $\\{\\mathbf{q}_i\\}$ and the corresponding dynamical structure factor $S(\\mathbf{q}_i,\\omega)$ as a Gaussian in energy centered at $\\epsilon_i$ with an effective width obtained by propagating instrumental resolutions. For the purposes of this task, you should treat the measured peak positions as the true dispersion values at the sampled momenta, while using the effective widths to define the statistical weights in the parameter estimation.\n- Estimates the unknown exchange constants and anisotropy gap by weighted nonlinear least squares, using the instrumental-resolution-limited effective variance for each point. Use the Fisher information (equivalently, the curvature of the weighted least-squares objective) to estimate one-standard-deviation uncertainties for the fitted parameters.\n- Produces results for each test case as specified and aggregates them into a single-line output.\n\nYour estimator must adhere to the following physical and mathematical specifications:\n\n- Start from the linear spin-wave result that the single-magnon peak in $S(\\mathbf{q},\\omega)$ is centered at the magnon dispersion $\\epsilon_{\\mathbf{q}}$ and that the dispersion is determined by the Fourier transform of exchange couplings in the ferromagnetic phase together with an anisotropy-induced gap $\\Delta$.\n- For a one-dimensional chain with nearest-neighbor spacing $a$ and exchange constants $J_1$ (nearest neighbor) and $J_2$ (next-nearest neighbor), and spin $S$, you must work out the dispersion $\\epsilon_q$ as a function of wavevector $q$ and the momentum derivative $\\partial \\epsilon_q/\\partial q$ needed for uncertainty propagation. The gap $\\Delta$ enters additively in energy units. For the two-dimensional square lattice with only nearest-neighbor exchange $J_1$ along the $\\Gamma$–$X$ path with $q_y = 0$, you must derive the analogous dispersion and slope along this cut.\n- Model the measured dynamical structure factor at each nominal momentum as\n$$\nS(\\mathbf{q}_i,\\omega) \\;=\\; A_i \\exp\\!\\left[-\\frac{\\left(\\omega - \\epsilon_{\\mathbf{q}_i}\\right)^2}{2\\,\\sigma_{\\mathrm{eff}}(\\mathbf{q}_i)^2}\\right],\n$$\nwith a constant amplitude $A_i$ that may be taken as unity, and an effective energy width\n$$\n\\sigma_{\\mathrm{eff}}(\\mathbf{q}_i) \\;=\\; \\sqrt{ \\sigma_\\omega^2 \\;+\\; \\left(\\frac{\\partial \\epsilon_{\\mathbf{q}}}{\\partial q}\\bigg|_{\\mathbf{q}_i}\\right)^2 \\sigma_q^2 }.\n$$\nHere $\\sigma_\\omega$ is the instrument’s energy resolution (in meV), $\\sigma_q$ is the momentum resolution (in inverse ångström), and $\\partial \\epsilon_{\\mathbf{q}}/\\partial q$ is the dispersion slope projected along the scan direction for the one-dimensional cut. Treat $q a$ in radians.\n- Use the effective variances $\\sigma_{\\mathrm{eff}}(\\mathbf{q}_i)^2$ as weights in a weighted nonlinear least-squares fit of model parameters $\\boldsymbol{\\theta}$ to the measured peak energies $\\{\\epsilon_i\\}$. That is, minimize the sum of squared residuals\n$$\n\\chi^2(\\boldsymbol{\\theta}) \\;=\\; \\sum_i \\frac{\\left[ \\epsilon_i - \\epsilon_{\\mathrm{model}}(\\mathbf{q}_i;\\boldsymbol{\\theta}) \\right]^2}{\\sigma_{\\mathrm{eff}}(\\mathbf{q}_i;\\boldsymbol{\\theta})^2},\n$$\ntreating the effective variances as known. You may recompute $\\sigma_{\\mathrm{eff}}$ iteratively using the current parameter estimates during optimization.\n- Estimate parameter uncertainties from the Fisher information matrix\n$$\n\\mathcal{I}(\\boldsymbol{\\theta}^\\star) \\;=\\; \\mathbf{J}(\\boldsymbol{\\theta}^\\star)^\\top \\mathbf{W}(\\boldsymbol{\\theta}^\\star) \\mathbf{J}(\\boldsymbol{\\theta}^\\star),\n$$\nwhere $\\mathbf{J}$ is the Jacobian of the unweighted model $\\epsilon_{\\mathrm{model}}(\\mathbf{q}_i;\\boldsymbol{\\theta})$ with respect to the parameters, evaluated at the best-fit parameters $\\boldsymbol{\\theta}^\\star$, and $\\mathbf{W}$ is the diagonal weight matrix with entries $1/\\sigma_{\\mathrm{eff}}^2$. Report one-standard-deviation uncertainties as the square roots of the diagonal elements of $\\mathcal{I}^{-1}$.\n\nTest Suite. Implement and solve the following three test cases. For each case, synthesize data using the provided ground-truth parameters and then estimate the parameters via your procedure.\n\n- Case 1 (One-dimensional chain, nearest neighbor only):\n  - Spin $S = 1$.\n  - Lattice spacing $a = 2.7$ ångström.\n  - Ground truth: $J_1 = 3.2$ meV, $\\Delta = 0.35$ meV.\n  - Instrumental resolutions: $\\sigma_q = 0.03$ ångström$^{-1}$, $\\sigma_\\omega = 0.12$ meV.\n  - Sampling: wavevectors $q$ uniformly in $[0.0, 1.0]$ ångström$^{-1}$ with step $0.05$ ångström$^{-1}$.\n  - Unknowns to fit and report: $J_1$ and $\\Delta$.\n- Case 2 (One-dimensional chain with next-nearest neighbor):\n  - Spin $S = 1$.\n  - Lattice spacing $a = 3.0$ ångström.\n  - Ground truth: $J_1 = 2.8$ meV, $J_2 = 0.6$ meV, $\\Delta = 0.20$ meV.\n  - Instrumental resolutions: $\\sigma_q = 0.02$ ångström$^{-1}$, $\\sigma_\\omega = 0.08$ meV.\n  - Sampling: wavevectors $q$ uniformly in $[0.0, 0.9]$ ångström$^{-1}$ with step $0.03$ ångström$^{-1}$.\n  - Unknowns to fit and report: $J_1$, $J_2$, and $\\Delta$.\n- Case 3 (Two-dimensional square lattice along $\\Gamma$–$X$, nearest neighbor only):\n  - Spin $S = 1$.\n  - Lattice spacing $a = 3.1$ ångström.\n  - Ground truth: $J_1 = 5.0$ meV, $\\Delta = 0.40$ meV.\n  - Instrumental resolutions: $\\sigma_q = 0.04$ ångström$^{-1}$, $\\sigma_\\omega = 0.15$ meV.\n  - Sampling: wavevectors along the $\\Gamma$–$X$ path with $q_x$ uniformly in $[0.0, 0.8]$ ångström$^{-1}$ with step $0.04$ ångström$^{-1}$ and $q_y = 0$.\n  - Unknowns to fit and report: $J_1$ and $\\Delta$.\n\nAngle convention and units:\n- Always evaluate trigonometric functions using $q a$ in radians.\n- All exchange constants $J_1$, $J_2$ and the gap $\\Delta$ are in meV.\n- Momentum $q$ is in ångström$^{-1}$.\n- Instrument resolutions $\\sigma_q$ and $\\sigma_\\omega$ are in ångström$^{-1}$ and meV, respectively.\n\nFinal Output Format:\n- For Case 1, output the list $[J_1,\\Delta,\\sigma_{J_1},\\sigma_{\\Delta}]$.\n- For Case 2, output the list $[J_1,J_2,\\Delta,\\sigma_{J_1},\\sigma_{J_2},\\sigma_{\\Delta}]$.\n- For Case 3, output the list $[J_1,\\Delta,\\sigma_{J_1},\\sigma_{\\Delta}]$.\n- Your program should produce a single line of output containing a list of the three case-specific lists, with all numbers rounded to three decimal places, as a comma-separated list enclosed in square brackets. For example:\n  - \"[[case1_vals],[case2_vals],[case3_vals]]\"\n- No additional text should be printed.\n\nYour implementation must be deterministic and must not use any external inputs. Do not add random noise to the synthetic data; only incorporate instrumental resolution through the effective widths as specified. Use radians for all trigonometric arguments and report all energies in meV rounded to three decimals.", "solution": "### Part 1: Theoretical Model Derivation\n\nThe analysis begins with the Heisenberg Hamiltonian including a uniaxial anisotropy term:\n$$\n\\hat{H} = -\\sum_{\\langle i,j \\rangle} J_{ij}\\,\\hat{\\mathbf{S}}_i\\cdot \\hat{\\mathbf{S}}_j - K\\sum_i \\left(\\hat{S}_i^z\\right)^2\n$$\nWithin the linear spin-wave approximation, the magnon dispersion relation $\\epsilon_{\\mathbf{q}}$ for a Bravais lattice can be derived. The standard result, obtained via the Holstein-Primakoff transformation and retaining terms quadratic in the boson operators, is:\n$$\n\\epsilon_{\\mathbf{q}} = \\Delta + 2S \\left[ J(\\mathbf{0}) - J(\\mathbf{q}) \\right]\n$$\nHere, $J(\\mathbf{q}) = \\sum_{\\mathbf{R}} J_{\\mathbf{R}} e^{i\\mathbf{q}\\cdot\\mathbf{R}}$ is the Fourier transform of the exchange interactions $J_{ij} = J(\\mathbf{R}_i - \\mathbf{R}_j)$. The term $\\Delta$ is an energy gap at $\\mathbf{q}=\\mathbf{0}$, which originates from the symmetry-breaking anisotropy term. Per the problem statement, we treat $\\Delta$ as a phenomenological additive parameter. The summation $\\sum_{\\mathbf{R}}$ is over all lattice vectors $\\mathbf{R}$ connecting interacting spins. For a model with interactions out to a certain range, and accounting for pairs being counted once in the Hamiltonian sum $\\sum_{\\langle i,j \\rangle}$, the expression becomes:\n$$\n\\epsilon_{\\mathbf{q}} = \\Delta + \\sum_{\\mathbf{R} > 0} 2 z_{\\mathbf{R}} J_{\\mathbf{R}} S \\left(1 - \\cos(\\mathbf{q}\\cdot\\mathbf{R})\\right)\n$$\nwhere $z_{\\mathbf{R}}$ is the number of neighbors at vector $\\mathbf{R}$. A more direct form from the Fourier transform is:\n$J(\\mathbf{q}) = \\sum_{R>0} 2 J_R \\cos(qR)$ for a 1D chain, and $J(\\mathbf{0}) = \\sum_{R>0} 2 J_R$.\nSo, $\\epsilon_q = \\Delta + 2S [J(0) - J(q)] = \\Delta + 2S \\sum_{R>0} 2 J_R (1-\\cos(qR)) = \\Delta + 4S \\sum_{R>0} J_R(1-\\cos(qR))$.\n\nWith these principles, we derive the specific dispersion relations and their slopes required for the test cases.\n\n**Case 1 & 3: 1D Chain and 2D Square Lattice ($\\Gamma-X$) with Nearest-Neighbor (NN) Interaction**\nFor a 1D chain with lattice spacing $a$ and NN exchange $J_1$, the vector to the neighbor is $R=a$.\nFor a 2D square lattice along the $\\Gamma-X$ path ($q_y=0, q_x=q$), the general dispersion $\\epsilon_{\\mathbf{q}} = \\Delta + 4SJ_1(2 - \\cos(q_x a) - \\cos(q_y a))$ simplifies to $\\epsilon_q = \\Delta + 4SJ_1(2 - \\cos(qa) - \\cos(0)) = \\Delta + 4SJ_1(1-\\cos(qa))$.\nInterestingly, both systems have the same functional form for the dispersion along the specified path for NN interactions.\nGiven spin $S=1$, the model is:\n$$\n\\epsilon(q; J_1, \\Delta) = \\Delta + 4 J_1 (1 - \\cos(qa))\n$$\nThe derivative with respect to the wavevector $q$, required for the effective resolution calculation, is:\n$$\n\\frac{\\partial\\epsilon}{\\partial q} = 4 J_1 a \\sin(qa)\n$$\n\n**Case 2: 1D Chain with Next-Nearest-Neighbor (NNN) Interaction**\nThe model includes both NN exchange $J_1$ (at distance $a$) and NNN exchange $J_2$ (at distance $2a$). With $S=1$:\n$$\n\\epsilon(q; J_1, J_2, \\Delta) = \\Delta + 4 J_1 (1 - \\cos(qa)) + 4 J_2 (1 - \\cos(2qa))\n$$\nThe corresponding dispersion slope is:\n$$\n\\frac{\\partial\\epsilon}{\\partial q} = 4 J_1 a \\sin(qa) + 8 J_2 a \\sin(2qa)\n$$\n\n### Part 2: Parameter Estimation and Uncertainty Quantification\n\nThe estimation procedure is based on weighted non-linear least squares. We aim to find the parameters $\\boldsymbol{\\theta}$ that minimize the chi-squared function:\n$$\n\\chi^2(\\boldsymbol{\\theta}) = \\sum_i \\frac{\\left[ \\epsilon_i - \\epsilon_{\\mathrm{model}}(\\mathbf{q}_i;\\boldsymbol{\\theta}) \\right]^2}{\\sigma_{\\mathrm{eff}}(\\mathbf{q}_i;\\boldsymbol{\\theta})^2}\n$$\nThe data points $\\{\\epsilon_i\\}$ are synthesized using the ground-truth parameters without added noise: $\\epsilon_i = \\epsilon_{\\mathrm{model}}(\\mathbf{q}_i; \\boldsymbol{\\theta}_{\\text{true}})$. The statistical weights are derived from the effective energy variance $\\sigma_{\\mathrm{eff}}^2$.\n\nSince the weights $w_i = 1/\\sigma_{\\mathrm{eff}}^2$ depend on the model parameters $\\boldsymbol{\\theta}$ through the dispersion slope $\\partial\\epsilon/\\partial q$, an Iteratively Reweighted Least Squares (IRLS) procedure is employed.\n\n1.  **Initialization**: Start with an initial guess for the parameters, $\\boldsymbol{\\theta}_0$.\n2.  **Iteration**: For step $k=0, 1, 2, \\dots$:\n    a.  Calculate the dispersion slope $\\frac{\\partial\\epsilon}{\\partial q}(\\mathbf{q}_i; \\boldsymbol{\\theta}_k)$ for each momentum point.\n    b.  Compute the effective standard deviation $\\sigma_{\\mathrm{eff}}(\\mathbf{q}_i; \\boldsymbol{\\theta}_k) = \\sqrt{\\sigma_\\omega^2 + \\left(\\frac{\\partial\\epsilon}{\\partial q}\\right)^2 \\sigma_q^2}$.\n    c.  Solve the weighted least-squares problem for $\\boldsymbol{\\theta}_{k+1}$ using the weights $w_i = 1/\\sigma_{\\mathrm{eff}}^2(\\mathbf{q}_i; \\boldsymbol{\\theta}_k)$. This is achieved using `scipy.optimize.curve_fit`.\n3.  **Convergence**: The loop terminates when the parameter estimates converge, i.e., $\\|\\boldsymbol{\\theta}_{k+1} - \\boldsymbol{\\theta}_k\\|$ is below a small tolerance.\n\nUpon convergence to the best-fit parameters $\\boldsymbol{\\theta}^\\star$, the parameter uncertainties are estimated. The `curve_fit` function, when used with `absolute_sigma=True`, returns the covariance matrix $\\mathbf{C} = \\mathcal{I}^{-1}$, where $\\mathcal{I}$ is the Fisher information matrix:\n$$\n\\mathcal{I}_{jk} = \\sum_i \\frac{1}{\\sigma_{\\mathrm{eff}}(\\mathbf{q}_i; \\boldsymbol{\\theta}^\\star)^2} \\frac{\\partial\\epsilon_{\\mathrm{model}}(\\mathbf{q}_i)}{\\partial\\theta_j} \\frac{\\partial\\epsilon_{\\mathrm{model}}(\\mathbf{q}_i)}{\\partial\\theta_k}\n$$\nThe one-standard-deviation uncertainty for parameter $\\theta_j$ is given by $\\sigma_j = \\sqrt{C_{jj}} = \\sqrt{(\\mathcal{I}^{-1})_{jj}}$.\n\n### Part 3: Implementation for Test Cases\n\nA Python program is constructed to implement this entire workflow for each of the three specified test cases.\n\n-   A generic solver function encapsulates the IRLS procedure and uncertainty calculation.\n-   The specific physical models and their derivatives are defined as separate functions.\n-   For each case, the appropriate model, ground-truth parameters, and instrumental/sampling parameters are supplied to the solver.\n-   The initial guess for all parameters in the fitting procedure is set to $1.0$. Since the synthetic data is noise-free, the fit is expected to converge precisely to the ground-truth values. The non-trivial part of the calculation lies in the determination of the uncertainties.\n-   The final results for each case are collected, formatted to three decimal places, and printed as a single-line list of lists, strictly adhering to the specified output format.\n\nThe code is designed to be deterministic and self-contained, using `numpy` for numerical operations and `scipy.optimize.curve_fit` for the core fitting algorithm.", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom functools import partial\n\n# --- Part 1: Physical Models and Derivatives ---\n\n# For cases 1 and 3 (NN model on 1D chain or Gamma-X in 2D)\ndef model_nn(q, J1, Delta, S, a):\n    \"\"\"Magnon dispersion for NN model.\"\"\"\n    return Delta + 4 * S * J1 * (1 - np.cos(q * a))\n\ndef slope_nn(q, J1, Delta, S, a):\n    \"\"\"Dispersion slope for NN model. Delta is a dummy arg for signature matching.\"\"\"\n    return 4 * S * J1 * a * np.sin(q * a)\n\n# For case 2 (NNN model on 1D chain)\ndef model_nnn(q, J1, J2, Delta, S, a):\n    \"\"\"Magnon dispersion for NNN model.\"\"\"\n    return Delta + 4 * S * J1 * (1 - np.cos(q * a)) + 4 * S * J2 * (1 - np.cos(2 * q * a))\n\ndef slope_nnn(q, J1, J2, Delta, S, a):\n    \"\"\"Dispersion slope for NNN model. Delta is a dummy arg for signature matching.\"\"\"\n    return 4 * S * J1 * a * np.sin(q * a) + 8 * S * J2 * a * np.sin(2 * q * a)\n\n# --- Part 2: Parameter Estimation ---\n\ndef estimate_parameters(q_data, model_func, slope_func, true_params, sigma_q, sigma_omega, p0):\n    \"\"\"\n    Synthesizes data and fits parameters using Iteratively Reweighted Least Squares.\n    \n    Args:\n        q_data (np.array): Array of wavevectors.\n        model_func (callable): The dispersion model function f(q, *params).\n        slope_func (callable): The dispersion slope function df/dq(q, *params).\n        true_params (list): Ground-truth parameters for data synthesis.\n        sigma_q (float): Momentum resolution.\n        sigma_omega (float): Energy resolution.\n        p0 (list): Initial guess for parameters.\n\n    Returns:\n        tuple: (best_fit_params, uncertainties)\n    \"\"\"\n    # Synthesize \"measured\" data using ground-truth parameters (no noise)\n    epsilon_data = model_func(q_data, *true_params)\n    \n    p_k = np.array(p0, dtype=float)\n    \n    # Iteratively Reweighted Least Squares (IRLS) loop\n    for _ in range(15):  # 15 iterations is more than sufficient for convergence\n        p_prev = p_k.copy()\n        \n        # Calculate weights based on current parameter estimates\n        slope_k = slope_func(q_data, *p_k)\n        sigma_eff_k = np.sqrt(sigma_omega**2 + (slope_k**2) * sigma_q**2)\n        # Prevent division by zero if sigma_eff is ever zero.\n        sigma_eff_k[sigma_eff_k < 1e-12] = 1e-12\n        \n        # Perform weighted non-linear least squares fit\n        try:\n            popt, _ = curve_fit(model_func, q_data, epsilon_data, p0=p_k, sigma=sigma_eff_k, absolute_sigma=True)\n            p_k = popt\n        except RuntimeError:\n            # Fit failed, break with last good parameters\n            p_k = p_prev  # Revert to previous\n            break\n\n        # Check for convergence\n        if np.allclose(p_k, p_prev, rtol=1e-9, atol=1e-9):\n            break\n            \n    # Final fit at converged parameters to get the covariance matrix\n    p_final = p_k\n    slope_final = slope_func(q_data, *p_final)\n    sigma_eff_final = np.sqrt(sigma_omega**2 + (slope_final**2) * sigma_q**2)\n    sigma_eff_final[sigma_eff_final < 1e-12] = 1e-12\n\n    popt, pcov = curve_fit(model_func, q_data, epsilon_data, p0=p_final, sigma=sigma_eff_final, absolute_sigma=True)\n    \n    # Uncertainties are the sqrt of the diagonal of the covariance matrix\n    perr = np.sqrt(np.diag(pcov))\n    \n    return popt, perr\n\ndef solve():\n    \"\"\"\n    Main function to solve the specified test cases and print the results.\n    \"\"\"\n    # --- Part 3: Test Suite ---\n    \n    # Case 1: 1D chain, NN\n    case1 = {\n        'S': 1.0, 'a': 2.7,\n        'true_params': [3.2, 0.35],  # [J1, Delta]\n        'p0': [1.0, 1.0],\n        'sigma_q': 0.03, 'sigma_omega': 0.12,\n        'q_range': (0.0, 1.0, 21), # start, stop, num_points\n        'model': model_nn, 'slope': slope_nn,\n        'num_params': 2\n    }\n\n    # Case 2: 1D chain, NNN\n    case2 = {\n        'S': 1.0, 'a': 3.0,\n        'true_params': [2.8, 0.6, 0.20],  # [J1, J2, Delta]\n        'p0': [1.0, 1.0, 1.0],\n        'sigma_q': 0.02, 'sigma_omega': 0.08,\n        'q_range': (0.0, 0.9, 31),\n        'model': model_nnn, 'slope': slope_nnn,\n        'num_params': 3\n    }\n    \n    # Case 3: 2D square lattice, NN, Gamma-X\n    case3 = {\n        'S': 1.0, 'a': 3.1,\n        'true_params': [5.0, 0.40], # [J1, Delta]\n        'p0': [1.0, 1.0],\n        'sigma_q': 0.04, 'sigma_omega': 0.15,\n        'q_range': (0.0, 0.8, 21),\n        'model': model_nn, 'slope': slope_nn,\n        'num_params': 2\n    }\n\n    test_cases = [case1, case2, case3]\n    all_results = []\n\n    for case in test_cases:\n        # Generate q-vector\n        q_start, q_stop, q_num_steps = case['q_range']\n        q_data = np.linspace(q_start, q_stop, int((q_stop - q_start) / (q_stop / (q_num_steps-1)) +1) if q_start==0 else int((q_stop - q_start) / (q_stop / (q_num_steps-1))))\n\n        if case is case1: q_data = np.arange(0.0, 1.0+0.05, 0.05)\n        if case is case2: q_data = np.arange(0.0, 0.9+0.03, 0.03)\n        if case is case3: q_data = np.arange(0.0, 0.8+0.04, 0.04)\n\n\n        # Create model and slope functions with fixed S and a\n        model = partial(case['model'], S=case['S'], a=case['a'])\n        slope = partial(case['slope'], S=case['S'], a=case['a'])\n        \n        # Estimate parameters and uncertainties\n        popt, perr = estimate_parameters(\n            q_data, model, slope,\n            case['true_params'], case['sigma_q'], case['sigma_omega'], case['p0']\n        )\n        \n        # Format results as [param1, param2, ..., err1, err2, ...]\n        result_list = list(popt) + list(perr)\n        all_results.append(result_list)\n\n    # Final printing in the exact required format\n    formatted_case_results = []\n    for i, res_list in enumerate(all_results):\n        if i == 0: # Case 1: [J1, Delta, err_J1, err_Delta]\n            formatted_vals = [f\"{res_list[0]:.3f}\", f\"{res_list[1]:.3f}\", f\"{res_list[2]:.3f}\", f\"{res_list[3]:.3f}\"]\n        elif i == 1: # Case 2: [J1, J2, Delta, err_J1, err_J2, err_Delta]\n             formatted_vals = [f\"{res_list[0]:.3f}\", f\"{res_list[1]:.3f}\", f\"{res_list[2]:.3f}\", f\"{res_list[3]:.3f}\", f\"{res_list[4]:.3f}\", f\"{res_list[5]:.3f}\"]\n        else: # Case 3: [J1, Delta, err_J1, err_Delta]\n            formatted_vals = [f\"{res_list[0]:.3f}\", f\"{res_list[1]:.3f}\", f\"{res_list[2]:.3f}\", f\"{res_list[3]:.3f}\"]\n        \n        formatted_case_results.append(f\"[{','.join(formatted_vals)}]\")\n    \n    # Manually reorder for Case 2 as required by output spec [J1, J2, D, sJ1, sJ2, sD]\n    # curve_fit returns params and errors in order [J1, J2, Delta]\n    # My result_list is [J1, J2, Delta, sJ1, sJ2, sD].\n    # The required format is [J1,J2,Delta,sigma_J1,sigma_J2,sigma_Delta]. The code already does this.\n    case2_res = all_results[1]\n    case2_formatted_vals = [f\"{case2_res[0]:.3f}\", f\"{case2_res[1]:.3f}\", f\"{case2_res[2]:.3f}\", f\"{case2_res[3]:.3f}\", f\"{case2_res[4]:.3f}\", f\"{case2_res[5]:.3f}\"]\n    formatted_case_results[1] = f\"[{','.join(case2_formatted_vals)}]\"\n    \n    print(f\"[{','.join(formatted_case_results)}]\")\n\nif __name__ == '__main__':\n    solve()\n```", "id": "3017112"}]}