{"hands_on_practices": [{"introduction": "The concept of an emergent quasiparticle can feel abstract, so our first practice grounds it in a concrete calculation. You will determine the energy required to create the most basic excitation in a spin ice system—a monopole-antimonopole pair. Starting from the nearest-neighbor spin Hamiltonian, you will see precisely how a single spin flip violates the local \"ice rule\" and gives rise to a pair of defects with a distinct creation energy, providing a quantitative value for the system's elementary excitation gap.", "problem": "A simplified model for a classical spin ice material is described by a pyrochlore lattice, which is a network of corner-sharing tetrahedra. At each vertex $i$ of the tetrahedra, a classical Ising spin $\\sigma_i$ is located, which can take values $\\sigma_i = \\pm 1$. The interaction between nearest-neighbor spins $\\langle i, j \\rangle$ is governed by the effective Hamiltonian:\n$$\nH = J \\sum_{\\langle i, j \\rangle} \\sigma_i \\sigma_j\n$$\nwhere $J > 0$ is a positive coupling constant.\n\nThe ground state configuration of this system is highly degenerate. Any configuration where every tetrahedron on the lattice satisfies the \"ice rule\" — two spins having the value $+1$ and two spins having the value $-1$ — is a ground state.\n\nAn elementary excitation above this ground state can be created by flipping a single spin, $\\sigma_k \\to -\\sigma_k$. Since each spin is a vertex shared by two adjacent tetrahedra, this single spin flip violates the ice rule in both of these tetrahedra simultaneously. For instance, a (2+, 2-) tetrahedron becomes a (3+, 1-) or (1+, 3-) tetrahedron. This pair of adjacent, rule-violating tetrahedra is known as an emergent magnetic monopole-antimonopole pair.\n\nAssuming the system is initially in a valid ice-rule ground state, derive the standard enthalpy of formation at 0 K ($\\Delta H^\\circ_f$) for creating one such monopole-antimonopole pair. At zero temperature and constant pressure, the formation enthalpy is equal to the creation energy, $\\Delta E$. Express your answer as a closed-form analytic expression in terms of the coupling constant $J$.", "solution": "We start from the Hamiltonian  \n$$\nH \\;=\\; J\\sum_{\\langle i,j\\rangle}\\sigma_i\\,\\sigma_j\\,. \n$$  \nA single spin flip at site $k$ changes $\\sigma_k\\to-\\sigma_k$ and only affects the six bonds between $k$ and its nearest neighbors. Hence the energy change is  \n$$\n\\Delta E\n=J\\sum_{j\\,\\in\\,\\mathrm{nn}(k)}\\bigl[\\sigma_k'\\sigma_j-\\sigma_k\\sigma_j\\bigr]\n=J\\sum_{j}\\bigl[-\\sigma_k\\sigma_j-\\sigma_k\\sigma_j\\bigr]\n=-2J\\,\\sigma_k\\sum_{j}\\sigma_j\\,.\n$$  \nIn the initial ice‐rule ground state each tetrahedron containing $k$ has two $+1$ and two $-1$ spins, so for each tetrahedron  \n$$\n\\sum_{\\text{its 4 spins}}=0\\quad\\Longrightarrow\\quad \n\\sum_{\\substack{\\text{3 spins}\\\\\\neq k}}=-\\sigma_k.\n$$  \nSince $k$ belongs to two tetrahedra with disjoint neighbor sets,  \n$$\n\\sum_{j\\in\\mathrm{nn}(k)}\\sigma_j\n=(-\\sigma_k)+(-\\sigma_k)\n=-2\\sigma_k.\n$$  \nTherefore  \n$$\n\\Delta E=-2J\\,\\sigma_k\\bigl(-2\\sigma_k\\bigr)\n=4J.\n$$  \nEquivalently, each ground‐state tetrahedron has energy  \n$$\nE_g=J\\,(2\\,\\times1+4\\times(-1))=-2J,\n$$  \nwhile a $3+\\!1-$ tetrahedron has  \n$$\nE_e=J\\,(3\\times1+3\\times(-1))=0,\n$$  \nso each of the two excited tetrahedra costs $2J$, giving total $4J$.  \nThus the formation enthalpy at $0$ K is  \n$$\n\\Delta H^\\circ_f=4J.\n$$", "answer": "$$\\boxed{4J}$$", "id": "328162"}, {"introduction": "Once a monopole-antimonopole pair is created [@problem_id:328162], the next crucial question is how these quasiparticles interact with each other. This practice guides you through constructing a simple yet powerful phenomenological model for their interaction potential. You will combine the familiar inverse-distance Coulomb-like potential with a linear term representing the confining tension of the \"Dirac string,\" a trail of flipped spins connecting the pair, offering insight into the forces that govern their behavior.", "problem": "In certain condensed matter systems, such as spin ices, the elementary excitations can behave like magnetic monopoles. These are not fundamental particles, but emergent quasiparticles. A monopole-antimonopole pair is characterized by magnetic charges $+g$ and $-g$, respectively.\n\nConsider such a pair created in a simple cubic lattice with lattice constant $a$. The interaction potential between the pair has two main contributions:\n1.  A magnetic Coulomb-like interaction, analogous to the electric Coulomb potential, which depends on the magnetic permeability of free space, $\\mu_0$.\n2.  An effective potential due to a \"Dirac string\" that connects the monopole and antimonopole. This string is a trail of disturbed microscopic degrees of freedom (e.g., flipped spins) and possesses a constant tension, $\\sigma$, which is the energy per unit length.\n\nA monopole and an antimonopole are separated by a distance corresponding to $N$ lattice sites along the $[100]$ crystallographic direction. Assuming the string follows the straight line path between them, calculate the total potential energy $U$ of this configuration. Express your answer in terms of $g$, $\\sigma$, $a$, $N$, and $\\mu_0$.", "solution": "The total potential energy $U$ of the monopole-antimonopole system is the sum of the magnetic Coulomb potential energy $U_C$ and the Dirac string potential energy $U_S$.\n\n$$\nU = U_C + U_S\n$$\n\nFirst, we determine the separation distance $r$ between the monopole and the antimonopole. They are located on a simple cubic lattice with lattice constant $a$ and separated by $N$ lattice sites along the $[100]$ direction. The distance between adjacent lattice sites along this direction is simply $a$. Therefore, the total separation distance is:\n\n$$\nr = N \\cdot a\n$$\n\nNext, we calculate the magnetic Coulomb potential energy, $U_C$. The formula for the potential energy between two magnetic charges $g_1$ and $g_2$ separated by a distance $r$ is:\n\n$$\nU_C = \\frac{\\mu_0}{4\\pi} \\frac{g_1 g_2}{r}\n$$\n\nIn our case, we have a monopole with charge $g_1 = +g$ and an antimonopole with charge $g_2 = -g$. Substituting these values and the expression for $r$:\n\n$$\nU_C = \\frac{\\mu_0}{4\\pi} \\frac{(+g)(-g)}{Na} = -\\frac{\\mu_0 g^2}{4\\pi Na}\n$$\n\nNext, we calculate the potential energy of the Dirac string, $U_S$. The string has a constant tension $\\sigma$ (energy per unit length) and connects the monopole-antimonopole pair. The length of the string, $L$, is equal to the separation distance $r$.\n\n$$\nL = r = Na\n$$\n\nThe potential energy stored in the string is the tension multiplied by its length:\n\n$$\nU_S = \\sigma \\cdot L = \\sigma (Na)\n$$\n\nFinally, we find the total potential energy $U$ by summing the two contributions:\n\n$$\nU = U_C + U_S = -\\frac{\\mu_0 g^2}{4\\pi Na} + \\sigma Na\n$$\n\nThis expression gives the total potential energy of the monopole-antimonopole pair separated along the specified axis. It captures the short-range attractive Coulomb-like interaction and the long-range confining linear potential from the string tension. We can write the final expression as:\n\n$$\nU = \\sigma Na - \\frac{\\mu_0 g^2}{4\\pi Na}\n$$", "answer": "$$ \\boxed{\\sigma Na - \\frac{\\mu_0 g^2}{4\\pi Na}} $$", "id": "1171235"}, {"introduction": "While simple models like the one in [@problem_id:1171235] offer great physical intuition, rigorous quantitative predictions often require advanced computational techniques. This practice challenges you to implement the Ewald summation method, a cornerstone for calculating long-range forces in periodic simulations, to find the precise interaction energy of a monopole pair. By accounting for all periodic images and macroscopic boundary effects, you will gain hands-on experience with a critical tool in modern computational condensed matter physics.", "problem": "Consider emergent magnetic monopoles in spin ice, which behave as effective point magnetic charges interacting through a magnetostatic Coulomb law in the low-energy regime. The interaction under periodic boundary conditions is conditionally convergent and requires an Ewald-type decomposition for mathematical well-posedness. Your task is to implement a program that computes the interaction energy of a neutral pair of emergent magnetic monopoles in a cubic box with periodic boundary conditions using a full three-dimensional Ewald summation, including the shape-dependent surface term governed by demagnetization factors.\n\nStart from the following fundamental bases:\n- Magnetostatics for emergent magnetic charges: the pairwise interaction energy between two effective magnetic charges is determined by Coulomb-type magnetostatic interaction, with potential scaling prefactor given by vacuum permeability.\n- Periodic boundary conditions on a cubic lattice, and the necessity of splitting conditionally convergent lattice sums into rapidly decaying real-space and reciprocal-space parts by introducing a Gaussian screening characterized by a splitting parameter.\n- The existence of shape effects for conditionally convergent long-range sums, represented by a tensorial demagnetization factor for ellipsoidal shapes, which modifies the energy via a macroscopic boundary contribution when using vacuum boundary conditions rather than a conducting (tin-foil) boundary.\n\nUse the following definitions and constraints without providing any shortcut formulas for the final energy:\n- Let the cubic box have side length $L$ and volume $V = L^3$.\n- Place two emergent magnetic monopoles with charges $q_1 = +Q$ and $q_2 = -Q$ at positions $\\mathbf{r}_1$ and $\\mathbf{r}_2$ inside the box. The origin for the dipole moment calculation must be the geometric center of the box.\n- The Ewald splitting parameter is $\\alpha$, with $\\alpha$ having units of inverse length and controlling the convergence of both the real and reciprocal sums.\n- The real-space sum is truncated by an integer image cutoff $n_{\\max}$, meaning you sum over $\\mathbf{n} = (n_x, n_y, n_z)$ with each component $n_i \\in \\{-n_{\\max}, \\ldots, n_{\\max}\\}$, and exclude self-interactions at zero separation.\n- The reciprocal-space sum is truncated by an integer mode cutoff $k_{\\max}$, meaning you sum over reciprocal lattice vectors $\\mathbf{k} = \\frac{2\\pi}{L} \\mathbf{m}$ with $\\mathbf{m} = (m_x, m_y, m_z)$ and each component $m_i \\in \\{-k_{\\max}, \\ldots, k_{\\max}\\}$, excluding the $\\mathbf{k} = \\mathbf{0}$ term.\n- The surface term is governed by the demagnetization tensor $\\mathbf{D} = \\mathrm{diag}(N_x, N_y, N_z)$, where $(N_x, N_y, N_z)$ are the demagnetization factors along the principal axes for an ellipsoid, and $N_x + N_y + N_z = 1$. For a conducting (tin-foil) boundary condition, the surface term vanishes, which is equivalent to choosing $N_x = N_y = N_z = 0$.\n\nPhysical constants and quantities:\n- Use vacuum permeability $\\mu_0 = 4\\pi \\times 10^{-7}\\,\\mathrm{N}\\,\\mathrm{A}^{-2}$.\n- Use magnetic charge magnitude $Q = 5.0\\times 10^{-13}\\,\\mathrm{A}\\,\\mathrm{m}$.\n- Use box length $L = 1.0\\times 10^{-7}\\,\\mathrm{m}$.\n- Place charges at $\\mathbf{r}_1 = (L/8,\\,0,\\,0)$ and $\\mathbf{r}_2 = (-L/8,\\,0,\\,0)$.\n\nThe program must compute the total interaction energy using the full Ewald summation with the above ingredients. Express the final energy in Joules, and do not include any angles, so there is no angle unit involved. The program must implement the following test suite (each test case is a tuple of parameters $(L,\\,\\alpha,\\,n_{\\max},\\,k_{\\max},\\,Q,\\,\\mathbf{r}_1,\\,\\mathbf{r}_2,\\,N_x,\\,N_y,\\,N_z)$):\n\n- Case A (happy path, tin-foil boundary): $(1.0\\times 10^{-7},\\,4/L,\\,5,\\,6,\\,5.0\\times 10^{-13},\\,(L/8,\\,0,\\,0),\\,(-L/8,\\,0,\\,0),\\,0,\\,0,\\,0)$\n- Case B (spherical shape, vacuum boundary): $(1.0\\times 10^{-7},\\,4/L,\\,5,\\,6,\\,5.0\\times 10^{-13},\\,(L/8,\\,0,\\,0),\\,(-L/8,\\,0,\\,0),\\,1/3,\\,1/3,\\,1/3)$\n- Case C (prolate needle along $z$, vacuum boundary): $(1.0\\times 10^{-7},\\,4/L,\\,5,\\,6,\\,5.0\\times 10^{-13},\\,(L/8,\\,0,\\,0),\\,(-L/8,\\,0,\\,0),\\,1/2,\\,1/2,\\,0)$\n- Case D (oblate disk normal to $z$, vacuum boundary): $(1.0\\times 10^{-7},\\,4/L,\\,5,\\,6,\\,5.0\\times 10^{-13},\\,(L/8,\\,0,\\,0),\\,(-L/8,\\,0,\\,0),\\,0,\\,0,\\,1)$\n- Case E (parameter invariance test with tighter cutoffs): $(1.0\\times 10^{-7},\\,6/L,\\,7,\\,8,\\,5.0\\times 10^{-13},\\,(L/8,\\,0,\\,0),\\,(-L/8,\\,0,\\,0),\\,1/3,\\,1/3,\\,1/3)$\n\nYour program should produce a single line of output containing the results for the above cases as a comma-separated list enclosed in square brackets, in the same order as the cases, with each entry being a floating-point number in Joules (e.g., $[E_A,E_B,E_C,E_D,E_E]$). The output must be exactly one line and must not include any other text.", "solution": "The problem requires the calculation of the interaction energy of a neutral pair of emergent magnetic monopoles in a cubic periodic box. The interaction is long-ranged, analogous to the Coulomb interaction, and the sum over periodic images is conditionally convergent. The standard method for computing such lattice sums is the Ewald summation technique, which splits the sum into a rapidly converging real-space part, a rapidly converging reciprocal-space part, and correction terms. The total energy $E$ includes a real-space contribution $E_{\\text{real}}$, a reciprocal-space contribution $E_{\\text{recip}}$, a self-energy correction $E_{\\text{self}}$, and a shape-dependent surface term $E_{\\text{surface}}$ that arises from the $\\mathbf{k}\\to\\mathbf{0}$ limit of the reciprocal sum.\n\nLet the system consist of $N$ magnetic point charges $q_i$ at positions $\\mathbf{r}_i$ within a cubic box of side length $L$ and volume $V=L^3$. The pairwise interaction potential is magnetostatic, with the energy expression scaled by the vacuum permeability $\\mu_0$ instead of $1/\\epsilon_0$. The total energy of the periodically repeated system is given by:\n$$ E = \\frac{1}{2} \\sum_{i,j=1}^{N} \\sum_{\\mathbf{n}}' \\frac{\\mu_0 q_i q_j}{4\\pi |\\mathbf{r}_{ij} + \\mathbf{n}L|} $$\nwhere $\\mathbf{r}_{ij} = \\mathbf{r}_i - \\mathbf{r}_j$, $\\mathbf{n}=(n_x, n_y, n_z)$ is a vector of integers defining the lattice cell, and the prime on the sum indicates that the term for $i=j$ is excluded when $\\mathbf{n}=\\mathbf{0}$. This sum is conditionally convergent. The Ewald decomposition gives $E = E_{\\text{real}} + E_{\\text{recip}} + E_{\\text{self}} + E_{\\text{surface}}$. Let us define each term for the specific system of two charges, $q_1 = +Q$ at $\\mathbf{r}_1$ and $q_2 = -Q$ at $\\mathbf{r}_2$.\n\n**1. Real-Space Energy ($E_{\\text{real}}$)**\nThe real-space term is a sum over short-ranged, screened interactions. The screening is achieved by adding and subtracting a Gaussian charge distribution of width $1/\\alpha$ around each charge, where $\\alpha$ is the Ewald splitting parameter.\nThe general formula is:\n$$ E_{\\text{real}} = \\frac{1}{2} \\frac{\\mu_0}{4\\pi} \\sum_{i,j=1}^{N} \\sum_{\\mathbf{n}}' q_i q_j \\frac{\\text{erfc}(\\alpha |\\mathbf{r}_{ij} + \\mathbf{n}L|)}{|\\mathbf{r}_{ij} + \\mathbf{n}L|} $$\nFor our two-charge system ($q_1=+Q, q_2=-Q$), we expand the sum over $i$ and $j$. The terms with $i=j$ correspond to interactions of a charge with its own images ($q_1^2=Q^2, q_2^2=Q^2$, for $\\mathbf{n}\\ne\\mathbf{0}$), and terms with $i\\ne j$ correspond to interactions between the two distinct charges and their respective images ($q_1q_2=-Q^2, q_2q_1=-Q^2$, for all $\\mathbf{n}$). This simplifies to:\n$$ E_{\\text{real}} = \\frac{\\mu_0 Q^2}{4\\pi} \\left[ \\sum_{\\mathbf{n} \\ne \\mathbf{0}} \\frac{\\text{erfc}(\\alpha |\\mathbf{n}L|)}{|\\mathbf{n}L|} - \\sum_{\\mathbf{n}} \\frac{\\text{erfc}(\\alpha |\\mathbf{r}_{12}+\\mathbf{n}L|)}{|\\mathbf{r}_{12}+\\mathbf{n}L|} \\right] $$\nThe numerical implementation involves summing over a cubic grid of integer vectors $\\mathbf{n}$ truncated by a cutoff $n_{\\max}$ for each component.\n\n**2. Reciprocal-Space Energy ($E_{\\text{recip}}$)**\nThe reciprocal-space term accounts for the long-range part of the interaction. It is derived from the Fourier transform of the compensating Gaussian charge distributions.\n$$ E_{\\text{recip}} = \\frac{1}{2} \\frac{\\mu_0}{4\\pi} \\frac{4\\pi}{V} \\sum_{\\mathbf{k} \\ne \\mathbf{0}} \\frac{e^{-k^2/4\\alpha^2}}{k^2} |S(\\mathbf{k})|^2 $$\nwhere $\\mathbf{k} = \\frac{2\\pi}{L}\\mathbf{m}$ are the reciprocal lattice vectors for integer vectors $\\mathbf{m}=(m_x, m_y, m_z)$, and $S(\\mathbf{k})$ is the structure factor, defined as $S(\\mathbf{k}) = \\sum_{j=1}^{N} q_j e^{i\\mathbf{k}\\cdot\\mathbf{r}_j}$. For our system:\n$$ S(\\mathbf{k}) = Q e^{i\\mathbf{k}\\cdot\\mathbf{r}_1} - Q e^{i\\mathbf{k}\\cdot\\mathbf{r}_2} $$\nThe squared magnitude becomes:\n$$ |S(\\mathbf{k})|^2 = Q^2 |e^{i\\mathbf{k}\\cdot\\mathbf{r}_1} - e^{i\\mathbf{k}\\cdot\\mathbf{r}_2}|^2 = Q^2 (2 - 2\\cos(\\mathbf{k}\\cdot\\mathbf{r}_{12})) = 4Q^2 \\sin^2\\left(\\frac{\\mathbf{k}\\cdot\\mathbf{r}_{12}}{2}\\right) $$\nSubstituting this into the expression for $E_{\\text{recip}}$:\n$$ E_{\\text{recip}} = \\frac{2 \\mu_0 Q^2}{V} \\sum_{\\mathbf{k} \\ne \\mathbf{0}} \\frac{e^{-k^2/4\\alpha^2}}{k^2} \\sin^2\\left(\\frac{\\mathbf{k}\\cdot\\mathbf{r}_{12}}{2}\\right) $$\nThe particle positions are $\\mathbf{r}_1 = (L/8, 0, 0)$ and $\\mathbf{r}_2 = (-L/8, 0, 0)$, so $\\mathbf{r}_{12} = (L/4, 0, 0)$. The dot product in the argument of the sine function is $\\mathbf{k}\\cdot\\mathbf{r}_{12} = (\\frac{2\\pi}{L}m_x)(L/4) = \\frac{\\pi m_x}{2}$. The sum over $\\mathbf{k}$ is performed as a sum over integer vectors $\\mathbf{m}$ up to a cutoff $k_{\\max}$.\n\n**3. Self-Energy ($E_{\\text{self}}$)**\nThis term corrects for the interaction of the screening Gaussian charge distribution of each particle with the potential of the particle itself, which was included in the real-space sum.\n$$ E_{\\text{self}} = - \\frac{\\mu_0}{4\\pi} \\frac{\\alpha}{\\sqrt{\\pi}} \\sum_{i=1}^{N} q_i^2 $$\nFor the two charges $+Q$ and $-Q$, the sum is $\\sum q_i^2 = Q^2 + (-Q)^2 = 2Q^2$.\n$$ E_{\\text{self}} = - \\frac{\\mu_0 Q^2 \\alpha}{2\\pi\\sqrt{\\pi}} $$\nThis term is independent of particle positions.\n\n**4. Surface Energy ($E_{\\text{surface}}$)**\nThe conditional convergence of the lattice sum means the result depends on the order of summation, which physically corresponds to the shape of the macroscopic sample and its surrounding medium. For a system with a net dipole moment, this manifests as a shape-dependent surface term. The total magnetic dipole moment of the simulation cell, relative to its geometric center, is $\\mathbf{P} = \\sum_i q_i \\mathbf{r}_i$.\n$$ \\mathbf{P} = (+Q)\\mathbf{r}_1 + (-Q)\\mathbf{r}_2 = Q(\\mathbf{r}_1 - \\mathbf{r}_2) = Q \\mathbf{r}_{12} = Q(L/4, 0, 0) $$\nThe surface energy for a macroscopic ellipsoidal sample in vacuum is given by:\n$$ E_{\\text{surface}} = \\frac{\\mu_0}{2V} \\mathbf{P} \\cdot \\mathbf{D} \\cdot \\mathbf{P} = \\frac{\\mu_0}{2V} (N_x P_x^2 + N_y P_y^2 + N_z P_z^2) $$\nwhere $\\mathbf{D} = \\mathrm{diag}(N_x, N_y, N_z)$ is the demagnetization tensor. Given $\\mathbf{P}=(QL/4, 0, 0)$, this simplifies to:\n$$ E_{\\text{surface}} = \\frac{\\mu_0}{2L^3} N_x (QL/4)^2 = \\frac{\\mu_0 Q^2 N_x}{32L} $$\nFor conducting (tin-foil) boundary conditions, this term is zero, which is equivalent to setting $N_x=N_y=N_z=0$.\n\nThe total energy is the sum of these four components. The provided program implements these formulas to compute the energy for the specified test cases. Vectorized numerical summation over grids of $\\mathbf{n}$ and $\\mathbf{m}$ vectors is used for efficiency.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import erfc\nfrom scipy.constants import mu_0, pi\n\ndef calculate_ewald_energy(L, alpha, n_max, k_max, Q, r1, r2, Nx, Ny, Nz):\n    \"\"\"\n    Computes the interaction energy of a magnetic dipole in a periodic cubic box\n    using the Ewald summation method.\n    \"\"\"\n    V = L**3\n    r12 = r1 - r2\n\n    # 1. Real-space energy\n    sum1_real = 0.0\n    sum2_real = 0.0\n\n    n_range = np.arange(-n_max, n_max + 1)\n    nx, ny, nz = np.meshgrid(n_range, n_range, n_range, indexing='ij')\n    n_vecs = np.stack([nx.ravel(), ny.ravel(), nz.ravel()], axis=1)\n\n    # Sum over charge self-images (i=j, n!=0)\n    # Using a boolean mask to exclude n=(0,0,0)\n    is_zero_n = np.all(n_vecs == 0, axis=1)\n    n_vecs_nonzero = n_vecs[~is_zero_n]\n    \n    nL_vecs = n_vecs_nonzero * L\n    dist_n = np.linalg.norm(nL_vecs, axis=1)\n    sum1_real = np.sum(erfc(alpha * dist_n) / dist_n)\n\n    # Sum over cross-charge images (i!=j, all n)\n    r12_plus_nL_vecs = r12 + n_vecs * L\n    dist_r12_n = np.linalg.norm(r12_plus_nL_vecs, axis=1)\n    # Exclude division by zero, though not expected for this problem's geometry\n    dist_r12_n_nonzero = dist_r12_n[dist_r12_n > 1e-12]\n    sum2_real = np.sum(erfc(alpha * dist_r12_n_nonzero) / dist_r12_n_nonzero)\n    \n    E_real = (mu_0 * Q**2 / (4 * pi)) * (sum1_real - sum2_real)\n\n    # 2. Reciprocal-space energy\n    m_range = np.arange(-k_max, k_max + 1)\n    mx, my, mz = np.meshgrid(m_range, m_range, m_range, indexing='ij')\n    m_vecs = np.stack([mx.ravel(), my.ravel(), mz.ravel()], axis=1)\n\n    is_zero_m = np.all(m_vecs == 0, axis=1)\n    m_vecs_nonzero = m_vecs[~is_zero_m]\n    \n    mx_nonzero = m_vecs_nonzero[:, 0]\n    \n    k_sq = ((2 * pi / L)**2) * np.sum(m_vecs_nonzero**2, axis=1)\n    \n    exp_term = np.exp(-k_sq / (4 * alpha**2))\n    sin_term = np.sin(pi * mx_nonzero / 4)**2\n    \n    recip_sum = np.sum(exp_term * sin_term / k_sq)\n    \n    E_recip = (2 * mu_0 * Q**2 / V) * recip_sum\n\n    # 3. Self-energy\n    E_self = -(mu_0 * Q**2 * alpha) / (2 * pi * np.sqrt(pi))\n\n    # 4. Surface energy\n    E_surface = (mu_0 * Q**2 * Nx) / (32 * L)\n\n    # Total energy\n    total_energy = E_real + E_recip + E_self + E_surface\n    return total_energy\n\ndef solve():\n    \"\"\"\n    Main function to run the test cases and print results.\n    \"\"\"\n    # Each test case is a tuple of parameters:\n    # (L, alpha_factor, n_max, k_max, Q, r1_factors, r2_factors, Nx, Ny, Nz)\n    # r_factors are multiplied by L to get the actual positions.\n    test_cases = [\n        (1.0e-7, 4.0, 5, 6, 5.0e-13, (1./8., 0., 0.), (-1./8., 0., 0.), 0., 0., 0.),\n        (1.0e-7, 4.0, 5, 6, 5.0e-13, (1./8., 0., 0.), (-1./8., 0., 0.), 1./3., 1./3., 1./3.),\n        (1.0e-7, 4.0, 5, 6, 5.0e-13, (1./8., 0., 0.), (-1./8., 0., 0.), 1./2., 1./2., 0.),\n        (1.0e-7, 4.0, 5, 6, 5.0e-13, (1./8., 0., 0.), (-1./8., 0., 0.), 0., 0., 1.),\n        (1.0e-7, 6.0, 7, 8, 5.0e-13, (1./8., 0., 0.), (-1./8., 0., 0.), 1./3., 1./3., 1./3.),\n    ]\n\n    results = []\n    for case in test_cases:\n        L_val, alpha_factor, n_max_val, k_max_val, Q_val, r1_factors, r2_factors, Nx_val, Ny_val, Nz_val = case\n        \n        alpha_val = alpha_factor / L_val\n        r1_val = np.array(r1_factors) * L_val\n        r2_val = np.array(r2_factors) * L_val\n        \n        energy = calculate_ewald_energy(\n            L=L_val,\n            alpha=alpha_val,\n            n_max=n_max_val,\n            k_max=k_max_val,\n            Q=Q_val,\n            r1=r1_val,\n            r2=r2_val,\n            Nx=Nx_val,\n            Ny=Ny_val,\n            Nz=Nz_val\n        )\n        results.append(energy)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3016930"}]}