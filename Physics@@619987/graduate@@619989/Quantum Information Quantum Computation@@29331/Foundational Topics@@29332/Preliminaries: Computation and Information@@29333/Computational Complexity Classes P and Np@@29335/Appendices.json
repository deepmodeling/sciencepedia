{"hands_on_practices": [{"introduction": "The 3-Satisfiability (3-SAT) problem is a cornerstone of computational complexity theory, serving as a canonical example of an NP-complete problem. This exercise provides a direct, hands-on feel for navigating the vast search space of potential solutions. By systematically determining the lexicographically last satisfying assignment, you will engage with the structured, greedy search process that underpins many algorithms for tackling such computationally hard problems [@problem_id:61604].", "problem": "In computational complexity theory, the Boolean Satisfiability Problem (SAT) is a cornerstone of NP-completeness. A common variant is 3-SAT, where the boolean formula is given in 3-Conjunctive Normal Form (3-CNF).\n\nA boolean formula is in 3-CNF if it is a conjunction (AND, $\\land$) of clauses, where each clause is a disjunction (OR, $\\lor$) of exactly three literals. A literal is either a boolean variable $x_i$ or its negation $\\neg x_i$.\n\nAn assignment of boolean values (True=1, False=0) to the variables $x_1, \\dots, x_n$ is called a satisfying assignment if it makes the entire formula evaluate to True. An assignment can be represented as a binary string $A = (a_1, a_2, \\dots, a_n)$, where $a_i$ is the value assigned to $x_i$.\n\nThe set of all possible assignments $\\{0, 1\\}^n$ can be ordered lexicographically. An assignment $A=(a_1, \\dots, a_n)$ is lexicographically greater than $B=(b_1, \\dots, b_n)$ if at the first index $i$ from the left where they differ, $a_i > b_i$. The lexicographically last satisfying assignment is the satisfying assignment that is largest in this ordering.\n\nThe Hamming weight of a binary string is the number of 1s in the string.\n\nConsider the following 3-CNF formula $\\Phi$ with $n=6$ variables, $\\{x_1, x_2, x_3, x_4, x_5, x_6\\}$, and $m=8$ clauses:\n$\\Phi = C_1 \\land C_2 \\land C_3 \\land C_4 \\land C_5 \\land C_6 \\land C_7 \\land C_8$, where\n$C_1 = (x_1 \\lor x_2 \\lor x_3)$\n$C_2 = (\\neg x_1 \\lor \\neg x_2 \\lor x_4)$\n$C_3 = (x_2 \\lor \\neg x_3 \\lor x_5)$\n$C_4 = (\\neg x_4 \\lor \\neg x_5 \\lor x_6)$\n$C_5 = (x_1 \\lor \\neg x_3 \\lor \\neg x_6)$\n$C_6 = (\\neg x_2 \\lor x_4 \\lor \\neg x_5)$\n$C_7 = (x_3 \\lor x_5 \\lor x_6)$\n$C_8 = (\\neg x_3 \\lor \\neg x_5 \\lor \\neg x_6)$\n\nDetermine the Hamming weight of the lexicographically last satisfying assignment for the formula $\\Phi$.", "solution": "We proceed by the standard greedy procedure to build the lexicographically last satisfying assignment $A=(x_1,\\dots,x_6)$, testing each bit in turn and keeping it $1$ if and only if some completion remains satisfying.\n\n1.  Try $x_1=1$.  One can find a full assignment (e.g.\\ $111101$ below) that satisfies $\\Phi$, so we set\n$$x_1=1.$$\n\n2.  With $x_1=1$, try $x_2=1$.  Again there is a completion (e.g.\\ $111101$) satisfying all clauses, so\n$$x_2=1.$$\n\n3.  With $(x_1,x_2)=(1,1)$, try $x_3=1$.  A completion exists, so\n$$x_3=1.$$\n\n4.  With $(x_1,x_2,x_3)=(1,1,1)$, try $x_4=1$.  A completion exists, so\n$$x_4=1.$$\n\n5.  With $(x_1,x_2,x_3,x_4)=(1,1,1,1)$, try $x_5=1$.  We show no completion is possible:\n   For any $x_6\\in\\{0,1\\}$,\n   $$C_4=(\\neg x_4\\lor\\neg x_5\\lor x_6)=(0\\lor0\\lor x_6)=x_6,$$\n   $$C_8=(\\neg x_3\\lor\\neg x_5\\lor\\neg x_6)=(0\\lor0\\lor\\neg x_6)=\\neg x_6.$$\n   Hence $C_4$ and $C_8$ force $x_6=1$ and $x_6=0$ simultaneously, a contradiction.  So\n$$x_5=0.$$\n\n6.  Finally, with $(x_1,\\dots,x_5)=(1,1,1,1,0)$, try $x_6=1$.  One checks by direct substitution that\n$$A=(1,1,1,1,0,1)$$\nsatisfies all eight clauses $C_1,\\dots,C_8$, so\n$$x_6=1.$$\n\nHence the lexicographically last satisfying assignment is\n$$A=(1,1,1,1,0,1),$$\nwhose Hamming weight is\n$$\\sum_{i=1}^6 x_i = 1+1+1+1+0+1 = 5.$$", "answer": "$$\\boxed{5}$$", "id": "61604"}, {"introduction": "In contrast to the difficulty of 3-SAT, seemingly minor structural changes can render a problem efficiently solvable. The 2-Satisfiability (2-SAT) problem is a prime example, residing in the complexity class P. This practice explores the elegant algorithm for 2-SAT based on constructing an implication graph, where logical clauses are translated into directed edges. By identifying contradictory paths within this graph, you can determine satisfiability in polynomial time, illustrating a powerful method for solving an important subclass of satisfiability problems [@problem_id:61693].", "problem": "In the study of computational complexity, the Boolean satisfiability problem (SAT) plays a central role. While the general SAT problem is NP-complete, a notable special case, 2-Satisfiability (2-SAT), is solvable in polynomial time. An elegant algorithm for 2-SAT involves constructing an *implication graph* from the given 2-CNF formula.\n\nA 2-CNF formula is a conjunction (AND) of clauses, where each clause is a disjunction (OR) of two literals. A literal is a Boolean variable or its negation. For a formula with variables $\\{x_1, \\dots, x_n\\}$, the set of literals is $\\{x_1, \\neg x_1, \\dots, x_n, \\neg x_n\\}$.\n\nThe implication graph $G=(V, E)$ for a 2-CNF formula is a directed graph where the vertices $V$ are the set of all literals. For each clause of the form $(a \\lor b)$ in the formula, we add two directed edges to $E$: $\\neg a \\to b$ and $\\neg b \\to a$. These represent the logical implications that if $a$ is false, $b$ must be true, and if $b$ is false, $a$ must be true.\n\nA 2-CNF formula is unsatisfiable if and only if there exists a variable $x_i$ such that $x_i$ and its negation $\\neg x_i$ are in the same *strongly connected component* (SCC) of the implication graph. An SCC is a maximal subgraph where for any two vertices $u, v$ in the component, there is a directed path from $u$ to $v$ and a directed path from $v$ to $u$.\n\nWe define a **contradictory strongly connected component** as an SCC that contains at least one pair of literals $\\{x_i, \\neg x_i\\}$ for some variable $x_i$.\n\nConsider the following 2-CNF formula $\\Phi$ over the set of variables $\\{x_1, x_2, x_3, x_4, x_5, x_6, x_7\\}$.\n$$\n\\Phi = (\\neg x_1 \\lor x_2) \\land (\\neg x_2 \\lor \\neg x_1) \\land (x_1 \\lor \\neg x_2) \\land (x_1 \\lor x_2)\n\\land (\\neg x_3 \\lor x_4) \\land (\\neg x_4 \\lor \\neg x_3) \\land (x_3 \\lor \\neg x_4) \\land (x_3 \\lor x_4)\n\\land (\\neg x_5 \\lor x_6) \\land (\\neg x_6 \\lor x_5) \\land (x_1 \\lor x_7)\n$$\n\nYour task is to determine the total number of contradictory strongly connected components in the implication graph of the formula $\\Phi$.", "solution": "1. Implication-graph construction.  For each clause $(a\\lor b)$ we add edges $(\\neg a\\to b)$ and $(\\neg b\\to a)$.\n\n   Clauses on $x_1,x_2$:\n   $$\n   \\begin{aligned}\n   (\\neg x_1\\lor x_2)&:\\;x_1\\to x_2,\\;\\neg x_2\\to\\neg x_1,\\\\\n   (\\neg x_2\\lor\\neg x_1)&:\\;x_2\\to\\neg x_1,\\;x_1\\to\\neg x_2,\\\\\n   (x_1\\lor\\neg x_2)&:\\;\\neg x_1\\to\\neg x_2,\\;x_2\\to x_1,\\\\\n   (x_1\\lor x_2)&:\\;\\neg x_1\\to x_2,\\;\\neg x_2\\to x_1.\n   \\end{aligned}\n   $$\n   Thus the subgraph on $\\{x_1,x_2,\\neg x_1,\\neg x_2\\}$ has edges\n   $$\n   x_1 \\leftrightarrow x_2,\\quad \\neg x_1 \\leftrightarrow \\neg x_2,\n   $$\n   and cross-edges $x_1\\to\\neg x_1$, $x_2\\to\\neg x_2$, $\\neg x_1\\to x_2$, $\\neg x_2\\to x_1$.  Hence\n   $$\\{x_1,x_2,\\neg x_1,\\neg x_2\\}$$\n   is one strongly connected component (SCC), containing both $x_1,\\neg x_1$.\n\n2. Clauses on $x_3,x_4$ are identical in form, giving an SCC\n   $$\\{x_3,x_4,\\neg x_3,\\neg x_4\\},$$\n   also containing $x_3,\\neg x_3$.\n\n3. Clauses on $x_5,x_6$:\n   $$\n   (\\neg x_5\\lor x_6):\\;x_5\\to x_6,\\;\\neg x_6\\to\\neg x_5,\\quad\n   (\\neg x_6\\lor x_5):\\;x_6\\to x_5,\\;\\neg x_5\\to\\neg x_6.\n   $$\n   This yields two disjoint SCCs\n   $$\\{x_5,x_6\\},\\quad \\{\\neg x_5,\\neg x_6\\},$$\n   neither contains a variable and its negation.\n\n4. Clause $(x_1\\lor x_7)$ adds edges\n   $$\\neg x_1\\to x_7,\\quad \\neg x_7\\to x_1.$$\n   These do not merge $x_7$ or $\\neg x_7$ into any existing SCC cyclically, so\n   $$\\{x_7\\},\\;\\{\\neg x_7\\}$$\n   remain singleton SCCs.\n\n5. Count contradictory SCCs: those containing $\\{x_i,\\neg x_i\\}$ for some $i$.\n   We have exactly two:\n   $$\\{x_1,x_2,\\neg x_1,\\neg x_2\\},\\quad \\{x_3,x_4,\\neg x_3,\\neg x_4\\}.$$\n   Hence the total number is $2$.", "answer": "$$\\boxed{2}$$", "id": "61693"}, {"introduction": "While SAT is NP-complete in the worst case, modern solvers can handle instances with millions of variables, thanks to sophisticated heuristics like Conflict-Driven Clause Learning (CDCL). This exercise demystifies the \"learning\" process at the heart of CDCL solvers. By analyzing a specific conflict within a solver's implication graph, you will learn to identify the First Unique Implication Point (1-UIP) and derive a new \"learned\" clause, a key technique that enables solvers to prune the search space and efficiently find solutions in practice [@problem_id:61735].", "problem": "This problem explores the conflict analysis mechanism within a modern Conflict-Driven Clause Learning (CDCL) SAT solver. Specifically, your task is to derive the learned clause by identifying the First Unique Implication Point (1-UIP) from a given conflict scenario.\n\n#### Background\n\n**1. Boolean Satisfiability (SAT)**\nA Boolean formula is in Conjunctive Normal Form (CNF) if it is a conjunction (AND) of clauses, where each clause is a disjunction (OR) of literals. A literal is a Boolean variable (e.g., $x_i$) or its negation (e.g., $\\neg x_i$). The SAT problem asks if there is an assignment of truth values to the variables that makes the entire formula true.\n\n**2. CDCL Solvers**\nCDCL solvers explore the search space of variable assignments. They make a sequence of *decisions*, assigning a truth value to a variable at a certain *decision level*. After each decision, they perform *unit propagation* (or Boolean Constraint Propagation), which identifies clauses that have become *unit clauses* (all literals but one are false under the current partial assignment) and forces the remaining literal to be true.\n\n**3. Conflict and Implication Graph**\nA *conflict* occurs when a clause is falsified by the current partial assignment (i.e., all its literals are false). The chain of implications leading to the conflict can be represented by an *implication graph*, which is a directed acyclic graph (DAG).\n- **Nodes**: The nodes are the literals assigned at the current decision level, plus a special conflict node $\\kappa$. Nodes can also represent literals assigned at previous levels that contribute to implications at the current level.\n- **Edges**: An edge exists from a set of literals $\\{l_1, \\dots, l_k\\}$ to a literal $l$ if the assignment of true to $l_1, \\dots, l_k$ makes a clause $C = (\\neg l_1 \\lor \\dots \\lor \\neg l_k \\lor l)$ a unit clause, thus implying $l$. The clause $C$ is called the *antecedent* of $l$. The conflict node $\\kappa$ has incoming edges from the literals that falsify the *conflict clause*.\n\n**4. Conflict Analysis and 1-UIP**\nWhen a conflict occurs, the solver analyzes the implication graph to learn a new clause that can prevent the same conflict in the future. The 1-UIP scheme is a common and efficient analysis method.\n- A **Unique Implication Point (UIP)** is a node (literal) in the implication graph at the current decision level such that every path from the decision literal of the current level to the conflict node $\\kappa$ passes through it.\n- The **First UIP (1-UIP)** is the UIP that is closest to the conflict node $\\kappa$ in the graph.\n- The learned clause is derived by a sequence of resolution steps, starting from the conflict clause. The process continues until the resulting clause contains exactly one literal assigned at the current decision level. This literal is guaranteed to be the negation of the 1-UIP.\n\n#### Problem Statement\n\nA CDCL solver is working on a CNF formula. It has reached a state of conflict at decision level $d$. The state is described as follows:\n\n- **Assignment from previous levels ($<d$):** The literals $\\{\\neg x_1, \\neg x_6, \\neg x_7\\}$ are true.\n- **Decision at level $d$:** The solver decides $x_5 = \\text{True}$.\n- **Unit Propagation at level $d$:** The decision $x_5@d$ triggers the following sequence of implications:\n    1. $x_2@d$ is implied, with antecedent clause $C_1 = (x_1 \\lor \\neg x_5 \\lor x_2)$.\n    2. $x_3@d$ is implied, with antecedent clause $C_2 = (\\neg x_5 \\lor x_3)$.\n    3. $x_4@d$ is implied, with antecedent clause $C_3 = (\\neg x_2 \\lor \\neg x_3 \\lor x_4)$.\n    4. $x_8@d$ is implied, with antecedent clause $C_4 = (\\neg x_4 \\lor x_8)$.\n    5. $x_9@d$ is implied, with antecedent clause $C_5 = (x_6 \\lor \\neg x_4 \\lor x_9)$.\n- **Conflict:** A conflict occurs in clause $C_6 = (x_7 \\lor \\neg x_8 \\lor \\neg x_9)$, as literals $x_7$, $\\neg x_8$, and $\\neg x_9$ are all false under the current assignment.\n\nYour task is to determine the learned clause using the 1-UIP learning scheme. Represent the learned clause as a set of integers, where the literal $x_i$ is represented by the integer $i$, and $\\neg x_i$ is represented by $-i$.\n\n**What to solve for:** Calculate the sum of the absolute values of the integers representing the literals in the final learned clause.", "solution": "1. Conflict clause:  \n$$C_6 = (x_7 \\lor \\neg x_8 \\lor \\neg x_9)\\,. $$  \nAssigned at level $d$: $x_5,x_2,x_3,x_4,x_8,x_9$.  \n   \n2. Initialize learned clause $L := C_6$.  Literals in $L$ at level $d$: $\\{\\neg x_8,\\neg x_9\\}$.  \n   \n3. Pick the most recent propagated literal at $d$, $\\neg x_9$, with antecedent  \n$$C_5 = (x_6 \\lor \\neg x_4 \\lor x_9)\\,. $$  \nResolve $L$ and $C_5$ on $x_9/\\neg x_9$:  \n$$L \\;\\longleftarrow\\; \\text{resolve}\\bigl((x_7\\lor\\neg x_8\\lor\\neg x_9),\\;(x_6\\lor\\neg x_4\\lor x_9)\\bigr) \n= (x_7\\lor\\neg x_8\\lor x_6\\lor\\neg x_4)\\,. $$  \nNow $L$ has level-$d$ literals $\\{\\neg x_8,\\neg x_4\\}$.  \n   \n4. Next resolve away $\\neg x_8$ using its antecedent  \n$$C_4 = (\\neg x_4 \\lor x_8)\\,. $$  \nResolve on $x_8/\\neg x_8$:  \n$$L \\;\\longleftarrow\\; \\text{resolve}\\bigl((x_7\\lor\\neg x_8\\lor x_6\\lor\\neg x_4),\\;(\\neg x_4\\lor x_8)\\bigr) \n= (x_7\\lor x_6\\lor\\neg x_4)\\,. $$  \nNow $L$ contains exactly one literal at level $d$, namely $\\neg x_4$, which is the negation of the 1-UIP $x_4$.  \n   \n5. The learned clause is  \n$$L = (x_7 \\lor x_6 \\lor \\neg x_4)\\,, $$  \nrepresented as the integer set $\\{7,6,-4\\}$.", "answer": "$$\\boxed{17}$$", "id": "61735"}]}