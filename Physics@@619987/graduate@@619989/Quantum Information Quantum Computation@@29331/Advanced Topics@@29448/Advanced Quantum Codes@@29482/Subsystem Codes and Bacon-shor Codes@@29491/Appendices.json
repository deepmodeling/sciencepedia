{"hands_on_practices": [{"introduction": "The Bacon-Shor code is a canonical example of a subsystem code, where the properties are defined by its underlying geometry. This first exercise provides practice in calculating its fundamental parameters: the number of physical qubits $n$, logical qubits $k$, stabilizer generators $s$, and gauge qubits $g$. By working through a concrete lattice, you will develop a practical understanding of how the code's structure is determined by the qubit layout, which is a foundational skill for analyzing such codes [@problem_id:64213].", "problem": "A quantum subsystem code is a type of quantum error-correcting code that utilizes a larger Hilbert space than required for just the logical qubits and stabilizer states. This extra space corresponds to 'gauge' degrees of freedom. The relationship between the number of physical qubits ($n$), logical qubits ($k$), stabilizer generators ($s$), and gauge qubits ($g$) is given by the equation:\n$$n = k + s + g$$\n\nThe Bacon-Shor code is a well-known example of a subsystem code that can be defined on a 2D lattice of qubits. Consider an $L \\times W$ rectangular lattice with open boundary conditions, where a qubit is located at each site $(i,j)$ for $i \\in \\{1, \\dots, L\\}$ and $j \\in \\{1, \\dots, W\\}$.\n\nThe code is defined by a gauge group $G$, which is generated by a set of weight-two Pauli operators:\n1.  **X-type gauge generators:** These act on adjacent qubits in the same column.\n    $$G_{i,j}^{(X)} = X_{i,j} X_{i+1,j} \\quad \\text{for } i \\in \\{1, \\dots, L-1\\}, j \\in \\{1, \\dots, W\\}$$\n2.  **Z-type gauge generators:** These act on adjacent qubits in the same row.\n    $$G_{i,j}^{(Z)} = Z_{i,j} Z_{i,j+1} \\quad \\text{for } i \\in \\{1, \\dots, L\\}, j \\in \\{1, \\dots, W-1\\}$$\n\nThe stabilizer group $S$ is the center of the gauge group, $S=Z(G)$. An operator is in the center of $G$ if it commutes with all generators of $G$. The number of independent generators of $S$ is denoted by $s$.\n\nFor any $L \\times W$ lattice with open boundaries, the Bacon-Shor code encodes $k=1$ logical qubit.\n\nYour task is to calculate the number of gauge qubits, $g$, for a Bacon-Shor code defined on a lattice of size $L=3$ and $W=5$.", "solution": "We are asked to find the number of gauge qubits, which we denote as $g$ in this problem (often denoted $r$), for a Bacon-Shor code on a $3 \\times 5$ lattice.\n\n1.  **Identify Known Parameters:**\n    -   The lattice size is $L=3$ and $W=5$. The total number of physical qubits is $n = L \\times W = 3 \\times 5 = 15$.\n    -   The problem states that the code encodes $k=1$ logical qubit.\n\n2.  **Determine the Number of Stabilizer Generators ($s$):**\n    The stabilizer group $S$ is the center of the gauge group $G$, meaning $S = Z(G) = \\{op \\in G \\mid [op, h]=0, \\forall h \\in G\\}$. We need to find operators that are products of the given weight-2 generators and that commute with all other generators.\n    -   For an operator made of X-type generators to commute with all Z-type generators ($Z_{i,j}Z_{i,j+1}$), it must have an even number of $X$ operators on every row.\n    -   For an operator made of Z-type generators to commute with all X-type generators ($X_{i,j}X_{i+1,j}$), it must have an even number of $Z$ operators on every column.\n    \n    For a lattice with open boundary conditions, it is not possible to construct a non-trivial operator from the gauge generators that satisfies these commutation requirements. For example, any non-trivial product of X-generators (which are pairs of $X$'s in columns) will have operators in an odd number of rows, and will thus fail to commute with some Z-generator. Therefore, the center of the gauge group $G$ is trivial (it contains only the identity operator).\n    \n    This means the number of independent stabilizer generators is $s=0$.\n\n3.  **Calculate the Number of Gauge Qubits ($g$):**\n    The parameters of a subsystem code are related by the formula provided:\n    $$n = k + s + g$$\n    We can rearrange this to solve for $g$:\n    $$g = n - k - s$$\n    Substituting the values we have determined:\n    $$g = 15 - 1 - 0$$\n    $$g = 14$$\n\nThus, the code has 14 gauge qubits. The large number of gauge degrees of freedom is a characteristic feature of this version of the Bacon-Shor code with open boundaries.", "answer": "$$\\boxed{14}$$", "id": "64213"}, {"introduction": "After understanding the basic parameters of the code, a crucial next step is to quantify its error-correcting power. This is captured by the code distance, $d$, which corresponds to the weight of the smallest non-trivial logical operator. This practice guides you in determining the distance of the Bacon-Shor code by identifying its minimal-weight logical operators [@problem_id:178632]. Mastering this concept is essential for appreciating how the code's topological nature protects quantum information from local noise.", "problem": "The Bacon-Shor code is a well-known example of a quantum subsystem code. Consider a version of this code defined on an\n$L \\times L$ square lattice of qubits. The qubits are located at the vertices of the grid, indexed by a pair of integers $(i,j)$ where $i, j \\in \\{1, 2, \\dots, L\\}$. Pauli operators on a specific qubit are denoted by $P_{i,j}$, where $P \\in \\{X, Y, Z\\}$.\n\nThe code is defined by a set of gauge generators, which form a gauge group $G$. The logical information is protected from errors that can be detected by these generators. The generators for this code are:\n1.  **Row-like generators:** $A_{i,j} = X_{i,j} \\otimes X_{i,j+1}$ for all $i \\in \\{1, \\dots, L\\}$ and $j \\in \\{1, \\dots, L-1\\}$.\n2.  **Column-like generators:** $B_{i,j} = Z_{i,j} \\otimes Z_{i+1,j}$ for all $i \\in \\{1, \\dots, L-1\\}$ and $j \\in \\{1, \\dots, L\\}$.\n\nA Pauli operator $L$ is considered a logical operator if it commutes with all gauge generators, i.e., $[L, A_{i,j}] = 0$ for all valid $(i,j)$ and $[L, B_{i,j}] = 0$ for all valid $(i,j)$. A logical operator is said to be *non-trivial* if it is not an element of the gauge group $G$ (i.e., it cannot be written as a product of the gauge generators).\n\nThe **code distance**, denoted by $d$, is the minimum weight of a non-trivial logical operator. The weight of a Pauli operator is the number of qubits on which it acts non-trivially (i.e., as $X$, $Y$, or $Z$).\n\nFor a given integer $L \\ge 2$, find the code distance $d$ of the $L \\times L$ Bacon-Shor subsystem code. Express your answer in terms of $L$.", "solution": "1. The code distance $d$ is the minimum weight of a non-trivial logical operator $L$. A logical operator must commute with all gauge generators. We consider X-type and Z-type logical operators separately.\n\n2.  **Minimal Z-type logical operator:**\n    Let's find a pure Z-type operator $L_Z = \\prod_{(i,j)\\in S_Z} Z_{i,j}$ that commutes with all gauge generators.\n    -   $[L_Z, B_{i,j}] = 0$ is always true since they are both Z-type operators.\n    -   For $L_Z$ to commute with an X-type generator $A_{k,l} = X_{k,l} X_{k,l+1}$, the support of $L_Z$ must intersect the support of $A_{k,l}$ on an even number of sites. This means for any row $k$ and adjacent columns $l, l+1$, an even number of the qubits $(k,l)$ and $(k,l+1)$ must be in the support of $L_Z$. This implies that for any given row, either all qubits in that row are in the support, or none are.\n    -   A product of Z operators over a full row, $L_Z' = \\prod_{j=1}^L Z_{k,j}$, satisfies this condition. However, such an operator can be formed by a product of gauge generators: $\\prod_{j=1}^{L-1} A_{k,j} = X_{k,1}X_{k,L}$. This is not correct.\n    -   Let's re-examine commutation. $L_Z = \\prod_{(i,j)} Z_{i,j}^{c_{ij}}$ must commute with $A_{k,l}=X_{k,l}X_{k,l+1}$. This requires $c_{k,l} + c_{k,l+1} \\equiv 0 \\pmod 2$. This implies that for any row $k$, the value of $c_{k,j}$ is constant for all $j$. So, $L_Z$ must act on entire columns.\n    -   The minimal weight non-trivial operator of this form is a single full column of $Z$s: $L_Z = \\prod_{i=1}^L Z_{i,j_0}$ for some column $j_0$. This operator cannot be written as a product of gauge generators, so it is a non-trivial logical operator. Its weight is $L$.\n\n3.  **Minimal X-type logical operator:**\n    Similarly, let's find a pure X-type operator $L_X = \\prod_{(i,j)\\in S_X} X_{i,j}$ that commutes with all gauge generators.\n    -   $[L_X, A_{i,j}] = 0$ is always true.\n    -   For $L_X$ to commute with $B_{k,l} = Z_{k,l} Z_{k+1,l}$, it must have an even number of $X$ operators on any pair of adjacent qubits in a column. This implies that for any given column, either all qubits in that column are in the support, or none are. Wait, this reasoning is reversed from the Z-case.\n    -   Correctly, $[L_X, B_{k,l}]=0$ means for any column $l$ and adjacent rows $k, k+1$, an even number of the qubits $(k,l)$ and $(k+1,l)$ must be in the support of $L_X$. This implies $L_X$ must act on entire rows.\n    -   The minimal weight non-trivial operator of this form is a single full row of $X$s: $L_X = \\prod_{j=1}^L X_{i_0,j}$ for some row $i_0$. Its weight is $L$.\n\n4.  **Code Distance:**\n    The minimum weight of a non-trivial logical operator is the minimum of the weights of the minimal $L_X$ and $L_Z$ we found. Both have weight $L$. Therefore, the code distance is $d=L$.", "answer": "$$\\boxed{L}$$", "id": "178632"}, {"introduction": "Subsystem codes provide a more nuanced approach to error correction than standard stabilizer codes through the distinction between the stabilizer group $S$ and the larger gauge group $G$. This exercise explores a scenario where an error is \"invisible\" to stabilizer measurements but can be detected by measuring a gauge operator. Working through this problem illuminates the primary advantage of the subsystem formalism: the ability to detect a broader class of errors by leveraging the gauge degrees of freedom [@problem_id:138773].", "problem": "Consider a system of 9 qubits arranged on a $3 \\times 3$ square lattice. The qubits are indexed by a pair of integers $(i,j)$ where $i, j \\in \\{1, 2, 3\\}$ represent the row and column number, respectively. This system is used to implement a subsystem code, known as a Bacon-Shor code variant.\n\nThe code is defined by its gauge group $G$, which is generated by a set of local Pauli operators. For this particular variant, we impose periodic boundary conditions along the columns and open boundary conditions along the rows. The generators of the gauge group $G$ are:\n1.  **X-type generators:** $A_{i,j} = X_{i,j} X_{i+1, j}$ for $i \\in \\{1, 2\\}$ and $j \\in \\{1, 2, 3\\}$.\n2.  **Z-type generators:** $B_{i,j} = Z_{i,j} Z_{i, j \\oplus_3 1}$ for $i \\in \\{1, 2, 3\\}$ and $j \\in \\{1, 2, 3\\}$. The sum $j \\oplus_3 1$ is defined as $(j \\pmod 3) + 1$.\n\nThe stabilizer group $S$ is the center of the gauge group, $S = Z(G) = \\{ g \\in G \\mid [g, h] = 0 \\text{ for all } h \\in G \\}$. An operator in $G$ that is not in $S$ is called a non-trivial gauge operator.\n\nAn error $E$ (a Pauli operator) is undetectable by stabilizer measurements if it commutes with every element of the stabilizer group $S$. However, such an error might still be correctable if it can be detected by measuring a gauge operator. This happens if the error anticommutes with a gauge operator.\n\nYour task is to find the lowest weight of a Pauli error $E$ that commutes with all stabilizers of this code (i.e., $[E,s]=0$ for all $s \\in S$) but anticommutes with at least one non-trivial gauge operator (i.e., there exists some $g \\in G \\setminus S$ such that $\\{E,g\\} = E g + g E = 0$). The weight of a Pauli operator is the number of qubits on which it acts non-trivially.", "solution": "1.  **Identify the Stabilizer Group $S$:**\n    The stabilizer group $S$ is the center of the gauge group $G$, denoted $S=Z(G)$. We need to find which operators that can be built from the generators commute with all generators.\n    -   **X-type stabilizers:** An operator made of X-type generators ($A_{i,j}=X_{i,j}X_{i+1,j}$) must commute with all Z-type generators ($B_{i,j}=Z_{i,j}Z_{i,j \\oplus_3 1}$). Due to the open boundary conditions along the rows, it's not possible to form a non-trivial product of X-type generators that commutes with all Z-type generators.\n    -   **Z-type stabilizers:** An operator made of Z-type generators must commute with all X-type generators. Due to the periodic boundary conditions along the columns, the product of the Z-type generators along any given row is a closed loop: $\\prod_{j=1}^3 B_{i,j} = \\prod_{j=1}^3 (Z_{i,j} Z_{i, j \\oplus_3 1}) = (Z_{i,1}Z_{i,2})(Z_{i,2}Z_{i,3})(Z_{i,3}Z_{i,1}) = I$. This means these generators are not independent, but it does not directly yield a stabilizer.\n    -   Let's re-examine the definition $S=Z(G)$. For this code with mixed boundary conditions, a careful analysis shows that the center of the gauge group $G$ is trivial. Any non-trivial product of generators will fail to commute with at least one other generator. Thus, the stabilizer group $S$ only contains the identity operator, and the number of stabilizer generators is $s=0$.\n\n2.  **Analyze the Error Conditions:**\n    The problem asks for the lowest weight Pauli error $E$ that satisfies two conditions:\n    -   $[E, s] = 0$ for all $s \\in S$. Since $S$ is trivial, this condition is satisfied by any error $E$.\n    -   $\\{E, g\\} = 0$ for at least one non-trivial gauge operator $g \\in G \\setminus S$. Since $S=\\{I\\}$, this just means $E$ must anticommute with at least one gauge generator.\n\n3.  **Find the Lowest Weight Error:**\n    We need to find the lowest weight Pauli operator $E$ that anticommutes with at least one gauge generator. The lowest possible weight for a non-trivial Pauli operator is 1.\n    -   Let's test a weight-1 error, for example, $E = X_{1,1}$.\n    -   We need to check if it anticommutes with any generator in $G$. Let's test it against a Z-type generator that acts on the same qubit, such as $g = B_{1,1} = Z_{1,1} Z_{1,2}$.\n    -   The commutator is $\\{E, g\\} = \\{X_{1,1}, Z_{1,1}Z_{1,2}\\} = X_{1,1}(Z_{1,1}Z_{1,2}) + (Z_{1,1}Z_{1,2})X_{1,1}$. Since $X_{1,1}$ anticommutes with $Z_{1,1}$ but commutes with $Z_{1,2}$, the overall result is an anticommutation: $\\{E, g\\} = 0$.\n    -   Similarly, a weight-1 error $E = Z_{1,1}$ would anticommute with the X-type generator $g = A_{1,1} = X_{1,1}X_{2,1}$.\n\nSince a weight-1 error satisfies all the conditions, and no error can have a lower non-trivial weight, the lowest weight is 1.", "answer": "$$\\boxed{1}$$", "id": "138773"}]}