{"hands_on_practices": [{"introduction": "To begin our exploration of the Madelung constant, we'll start with the most straightforward model imaginable: a one-dimensional, infinite chain of alternating charges. While the full sum is infinite, this exercise provides a tangible starting point by approximating the Madelung constant using only the most significant contributions from the nearest neighbors. This practice will build your foundational understanding of how these geometric sums are constructed piece by piece [@problem_id:1818815].", "problem": "Consider a hypothetical one-dimensional (1D) ionic crystal, modeled as an infinitely long chain of alternating positive and negative point charges. The magnitude of each charge is $q$, and the ions are equally spaced with a separation distance $R$ between any two adjacent ions.\n\nThe electrostatic potential energy, $U_i$, of a single reference ion due to the electric field of all other ions in the chain is given by the sum of pairwise potential energies: $U_i = \\sum_{j \\neq i} \\frac{k_e q_i q_j}{r_{ij}}$. Here, $k_e$ is Coulomb's constant, $q_i$ and $q_j$ are the charges of ions $i$ and $j$, and $r_{ij}$ is the distance between them. For such a periodic structure, this energy can be conveniently expressed in terms of a dimensionless quantity called the Madelung constant, $\\alpha$, through the relation $U_i = -\\frac{k_e q^2}{R} \\alpha$.\n\nCalculate an approximate value for this Madelung constant by considering only the electrostatic interactions between a single reference ion and its first, second, and third nearest-neighbor pairs. Express your answer as an exact fraction in its simplest form.", "solution": "We consider an infinite one-dimensional alternating chain of point charges of magnitude $q$ and separation $R$. Choose the reference ion to have charge $+q$ at the origin. By Coulombâ€™s law, the pairwise potential energy between the reference ion and an ion at distance $r_{ij}$ with charge $q_j$ is $U_{ij} = k_{e} q_i q_j / r_{ij}$.\n\nIn this alternating chain, the ions at positions $\\pm nR$ (with $n \\in \\mathbb{N}$) carry charge $(-1)^{n} q$. Therefore, the interaction energy with the two ions at distance $nR$ is\n$$\nU_{n} = 2 \\cdot \\frac{k_{e} \\left(+q\\right)\\left[(-1)^{n} q\\right]}{nR} = \\frac{2 k_{e} q^{2}}{R} \\frac{(-1)^{n}}{n}.\n$$\nKeeping only the first, second, and third nearest-neighbor pairs corresponds to $n=1,2,3$. Thus the truncated potential energy of the reference ion is\n$$\nU_{i}^{(3)} = \\sum_{n=1}^{3} U_{n} = \\frac{2 k_{e} q^{2}}{R} \\left[ -1 + \\frac{1}{2} - \\frac{1}{3} \\right] = \\frac{2 k_{e} q^{2}}{R} \\left( -\\frac{5}{6} \\right) = -\\frac{5}{3} \\frac{k_{e} q^{2}}{R}.\n$$\nBy the definition of the Madelung constant $\\alpha$, the energy is written as $U_{i} = - \\frac{k_{e} q^{2}}{R} \\alpha$. Equating this to the truncated result gives\n$$\n-\\frac{k_{e} q^{2}}{R} \\alpha^{(3)} = -\\frac{5}{3} \\frac{k_{e} q^{2}}{R} \\quad \\Longrightarrow \\quad \\alpha^{(3)} = \\frac{5}{3}.\n$$\nThis is an exact fraction in simplest form.", "answer": "$$\\boxed{\\frac{5}{3}}$$", "id": "1818815"}, {"introduction": "Moving from one dimension to two introduces a richer geometric structure. In this practice, we'll examine a hypothetical 2D square lattice, which requires a more systematic approach to identify 'shells' of nearest neighbors at different distances. This exercise reinforces the core idea that the Madelung constant is purely a consequence of the crystal's geometry and develops skills in visualizing and analyzing more complex lattice structures [@problem_id:1818844].", "problem": "Consider a simplified model of a two-dimensional (2D) ionic crystal. The crystal consists of a monolayer of ions with alternating charges $+q$ and $-q$, arranged on the vertices of an infinitely large square grid. The distance between any two adjacent ions (the lattice constant) is denoted by $a$.\n\nThe electrostatic potential energy, $U_{ref}$, of a single reference ion due to all other ions in the lattice can be expressed in terms of a dimensionless quantity called the Madelung constant, $\\alpha$. The relationship is given by:\n$$U_{ref} = -\\alpha \\frac{1}{4\\pi\\epsilon_0} \\frac{q^{2}}{a}$$\nwhere $\\epsilon_0$ is the permittivity of free space. The Madelung constant itself is defined by the geometric arrangement of the lattice and is given by the sum:\n$$\\alpha = \\sum_{j \\neq \\ref} \\frac{s_j}{d_j}$$\nHere, the sum is over all other ions $j$ in the lattice. For each ion $j$, $d_j = r_j / a$ is its distance from the reference ion normalized by the lattice constant $a$, and $s_j$ is a sign factor which is $+1$ if ion $j$ has a charge opposite to the reference ion, and $-1$ if it has the same charge.\n\nCalculate an approximate value for the Madelung constant, $\\alpha_{approx}$, for this 2D square lattice by performing the summation over the first and second nearest-neighbor shells only. Provide your answer as a numerical value, rounded to four significant figures.", "solution": "We choose the reference ion at the origin with charge $+q$. For a checkerboard arrangement on a square lattice, ions at lattice sites $(m,n)$ have charge $q(-1)^{m+n}$. The Madelung constant is defined as $\\alpha=\\sum_{j\\neq \\text{ref}} \\frac{s_{j}}{d_{j}}$, where $d_{j}=r_{j}/a$ and $s_{j}=+1$ for opposite charge, $-1$ for same charge relative to the reference ion.\n\nFor the first nearest-neighbor shell:\n- Positions: $(\\pm 1,0)$ and $(0,\\pm 1)$, total of $4$ ions.\n- Distances: $r=a$, hence $d=1$.\n- Charges: $(-1)^{m+n}=-1$ (opposite), so $s=+1$.\n- Contribution: $4\\times \\frac{+1}{1}=4$.\n\nFor the second nearest-neighbor shell:\n- Positions: $(\\pm 1,\\pm 1)$, total of $4$ ions.\n- Distances: $r=\\sqrt{2}\\,a$, hence $d=\\sqrt{2}$.\n- Charges: $(-1)^{m+n}=+1$ (same), so $s=-1$.\n- Contribution: $4\\times \\frac{-1}{\\sqrt{2}}=-\\frac{4}{\\sqrt{2}}=-2\\sqrt{2}$.\n\nSumming the first two shells gives the approximation\n$$\n\\alpha_{\\text{approx}}=4-2\\sqrt{2}.\n$$\nNumerically,\n$$\n\\alpha_{\\text{approx}}=4-2\\sqrt{2}\\approx 4-2.828427124\\approx 1.171572876,\n$$\nwhich rounds to four significant figures as $1.172$.", "answer": "$$\\boxed{1.172}$$", "id": "1818844"}, {"introduction": "Direct summation, while intuitive for simple models, converges too slowly to be practical for realistic three-dimensional crystals. This challenge is overcome by the powerful Ewald summation method, a cornerstone of computational physics. This advanced practice guides you through the logic of this technique, which splits the calculation into two rapidly converging parts in real and reciprocal space, bridging the gap between a theoretical concept and the a practical tool for calculating properties of materials like NaCl [@problem_id:2424435].", "problem": "You are asked to implement a numerically stable Ewald summation to compute the dimensionless Madelung constant for two three-dimensional ionic crystals under periodic boundary conditions: sodium chloride (NaCl, rock-salt structure) and cesium chloride (CsCl, body-centered cubic structure). Your task is to start from the Coulomb energy of a periodic, charge-neutral unit cell, perform the Ewald decomposition using a Gaussian screening of width controlled by the Ewald splitting parameter $\\alpha$, and then design a program that evaluates the resulting real-space and reciprocal-space sums with controllable cutoffs.\n\nFundamental base and goals:\n- Begin with the definition of the Coulomb interaction energy of a periodic, neutral set of point charges under minimum image conventions. The total electrostatic energy per cell is the sum over all images of the lattice of the pairwise Coulomb interactions, excluding self-interactions.\n- Introduce the Gaussian screening to split the $1/r$ kernel into a short-range part handled in real space and a smooth long-range part handled in reciprocal space. Use the Fourier representation of the smooth part to obtain a rapidly convergent reciprocal-space sum.\n- Implement the self-interaction removal that arises due to adding and subtracting the Gaussian distributions. If the total cell charge is zero, the neutralizing background term vanishes.\n- For a binary ionic crystal with charges $\\pm 1$, the Madelung constant $\\mathcal{M}$ is defined from the energy per ion $U/N$ (with Coulomb constant set to $1$ so that the pair potential is $1/r$) by $\\mathcal{M} = - (U/N) r_0$, where $r_0$ is the nearest-neighbor distance. This $\\mathcal{M}$ is unitless and characterizes the geometry of the lattice.\n\nCrystals to model:\n- Sodium chloride (NaCl, rock-salt): Use a conventional cubic cell of edge length $a = 1$ containing $8$ ions, with fractional coordinates in $[0,1)$:\n  - Negative sublattice at $(0,0,0)$, $(0,\\tfrac{1}{2},\\tfrac{1}{2})$, $(\\tfrac{1}{2},0,\\tfrac{1}{2})$, $(\\tfrac{1}{2},\\tfrac{1}{2},0)$, each with charge $-1$.\n  - Positive sublattice at $(\\tfrac{1}{2},0,0)$, $(\\tfrac{1}{2},\\tfrac{1}{2},\\tfrac{1}{2})$, $(0,0,\\tfrac{1}{2})$, $(0,\\tfrac{1}{2},0)$, each with charge $+1$.\n  - The nearest-neighbor distance is $r_0 = a/2 = 0.5$.\n- Cesium chloride (CsCl, body-centered cubic): Use a conventional cubic cell of edge length $a = 1$ with two charges:\n  - Positions $(0,0,0)$ with charge $+1$ and $(\\tfrac{1}{2},\\tfrac{1}{2},\\tfrac{1}{2})$ with charge $-1$.\n  - The nearest-neighbor distance is $r_0 = \\sqrt{3} a/2 = \\sqrt{3}/2$.\n\nAlgorithmic specifications to implement:\n- Real-space sum: sum over lattice vectors $\\mathbf{R} = a (n_x, n_y, n_z)$ with integer $n_x, n_y, n_z$ and $|\\mathbf{R}| \\le R_{\\mathrm{cut}}$, and over all basis pairs $(i,j)$, $i$ and $j$ indexing charges within the unit cell. Exclude the $i=j$, $\\mathbf{R}=\\mathbf{0}$ self term. The short-range pair potential to sum is $\\operatorname{erfc}(\\alpha r)/r$, where $r = |\\mathbf{r}_j - \\mathbf{r}_i + \\mathbf{R}|$, and $\\operatorname{erfc}$ is the complementary error function. Include the factor $\\tfrac{1}{2}$ to avoid double counting of pairs.\n- Reciprocal-space sum: sum over reciprocal lattice vectors $\\mathbf{k} = 2\\pi (h_x, h_y, h_z)/a$ with integer $h_x, h_y, h_z$, excluding $\\mathbf{k}=\\mathbf{0}$, and with $|\\mathbf{k}| \\le K_{\\mathrm{max}}$. Define the structure factor $S(\\mathbf{k}) = \\sum_j q_j e^{i \\mathbf{k}\\cdot\\mathbf{r}_j}$. The contribution to the energy per cell is\n  $$ \\frac{1}{2 V} \\sum_{\\mathbf{k}\\ne \\mathbf{0}} \\frac{4\\pi}{k^2} e^{-k^2/(4\\alpha^2)} \\lvert S(\\mathbf{k})\\rvert^2,$$\n  where $V = a^3$ is the cell volume.\n- Self-interaction correction: subtract $\\alpha/\\sqrt{\\pi} \\sum_i q_i^2$.\n- Neutralizing background: include $-\\pi \\, Q^2 /(2 \\alpha^2 V)$ with $Q = \\sum_i q_i$. For the specified test crystals, $Q=0$, so this term is exactly zero.\n\nTarget quantity:\n- Compute the total energy per cell $U$, then the energy per ion $U/N$, and finally the Madelung constant $\\mathcal{M} = - (U/N) r_0$. The Madelung constant is unitless. Report all numerical results as floating-point numbers rounded to six decimal places.\n\nTest suite and required output:\n- Use $a = 1$.\n- Use real-space cutoff $R_{\\mathrm{cut}} = 6.0$ and reciprocal-space cutoff $K_{\\mathrm{max}} = 25.0$.\n- Evaluate three values of the Ewald splitting parameter $\\alpha \\in \\{1.6, 2.4, 3.2\\}$ for each structure.\n- There are six base test cases:\n  1. $(\\text{NaCl}, \\alpha = 1.6)$\n  2. $(\\text{NaCl}, \\alpha = 2.4)$\n  3. $(\\text{NaCl}, \\alpha = 3.2)$\n  4. $(\\text{CsCl}, \\alpha = 1.6)$\n  5. $(\\text{CsCl}, \\alpha = 2.4)$\n  6. $(\\text{CsCl}, \\alpha = 3.2)$\n- Convergence investigation with respect to $\\alpha$: For each structure, compute the maximum absolute deviation from the mean across the three $\\alpha$ values, that is, for structure $X$ define\n  $$\\Delta_X = \\max_{\\alpha \\in \\{1.6,2.4,3.2\\}} \\left| \\mathcal{M}_X(\\alpha) - \\overline{\\mathcal{M}_X} \\right|,$$\n  where $\\overline{\\mathcal{M}_X}$ is the arithmetic mean of the three values.\n- Final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The order must be\n  $$[\\mathcal{M}_{\\mathrm{NaCl}}(1.6),\\ \\mathcal{M}_{\\mathrm{NaCl}}(2.4),\\ \\mathcal{M}_{\\mathrm{NaCl}}(3.2),\\ \\Delta_{\\mathrm{NaCl}},\\ \\mathcal{M}_{\\mathrm{CsCl}}(1.6),\\ \\mathcal{M}_{\\mathrm{CsCl}}(2.4),\\ \\mathcal{M}_{\\mathrm{CsCl}}(3.2),\\ \\Delta_{\\mathrm{CsCl}}],$$\n  with each floating-point number rounded to six decimal places. The Madelung constants are unitless and must be reported without units.", "solution": "The problem as stated is valid. It is scientifically grounded, well-posed, objective, and provides all necessary information for a unique and verifiable solution. It is a standard problem in computational condensed matter physics, asking for the implementation of the Ewald summation method to calculate the Madelung constant for two iconic crystal structures, NaCl and CsCl. I will proceed with a full solution.\n\nThe fundamental task is to compute the electrostatic energy per unit cell, $U$, for an infinite, periodic crystal lattice. For a charge-neutral unit cell containing $N$ point charges $q_i$ at fractional positions $\\mathbf{f}_i$ within a lattice defined by vectors $\\mathbf{a}_1, \\mathbf{a}_2, \\mathbf{a}_3$, the total energy per cell is given by the sum over all interacting pairs, including periodic images. With the Coulomb constant set to unity, this is:\n$$\nU = \\frac{1}{2} \\sum_{i=1}^{N} \\sum_{j=1}^{N} \\sum_{\\mathbf{R}}' \\frac{q_i q_j}{|\\mathbf{r}_j - \\mathbf{r}_i + \\mathbf{R}|}\n$$\nHere, $\\mathbf{r}_i = a \\mathbf{f}_i$ are the absolute coordinates within the reference cell (for a cubic cell of side length $a$), $\\mathbf{R} = n_x \\mathbf{a}_1 + n_y \\mathbf{a}_2 + n_z \\mathbf{a}_3$ are the lattice vectors for all integer triplets $(n_x, n_y, n_z)$, and the prime on the summation indicates that the term for $i=j$ is excluded when $\\mathbf{R}=\\mathbf{0}$ to avoid the infinite self-energy of a point charge. This sum is notoriously slowly and conditionally convergent.\n\nThe Ewald summation method provides an elegant solution by splitting the $1/r$ potential into a short-range and a long-range component using the identity $1 = \\operatorname{erf}(\\alpha r) + \\operatorname{erfc}(\\alpha r)$, where $\\operatorname{erf}$ is the error function and $\\operatorname{erfc}$ is the complementary error function. The parameter $\\alpha$ controls the width of the split.\n$$\n\\frac{1}{r} = \\frac{\\operatorname{erfc}(\\alpha r)}{r} + \\frac{\\operatorname{erf}(\\alpha r)}{r}\n$$\nThe first term, $\\operatorname{erfc}(\\alpha r)/r$, decays rapidly with $r$, making it suitable for a direct, truncated sum in real space. The second term, $\\operatorname{erf}(\\alpha r)/r$, is a smooth, long-range function whose Fourier transform converges rapidly. This part is evaluated in reciprocal space.\n\nThis decomposition is achieved by surrounding each point charge $q_j$ with a neutralizing Gaussian charge distribution of opposite sign, $-\\rho_j(\\mathbf{r}) = -q_j (\\alpha/\\sqrt{\\pi})^3 e^{-\\alpha^2 r^2}$, and then adding back the same distribution, but with the original sign, $\\rho_j(\\mathbf{r}) = q_j (\\alpha/\\sqrt{\\pi})^3 e^{-\\alpha^2 r^2}$. The first step screens the point charges, leading to the short-range real-space sum. The second step corrects for this screening and is handled in reciprocal space.\n\nThe total energy $U$ is thus decomposed into three parts: $U = U_{\\text{real}} + U_{\\text{recip}} + U_{\\text{self}}$.\n\n1.  **Real-Space Energy ($U_{\\text{real}}$)**: This is the interaction energy of the point charges screened by the neutralizing Gaussian clouds. The sum is taken over pairs of ions within the simulation box and their periodic images, up to a cutoff distance $R_{\\mathrm{cut}}$.\n    $$\n    U_{\\text{real}} = \\frac{1}{2} \\sum_{i=1}^{N} \\sum_{j=1}^{N} q_i q_j \\sum_{\\mathbf{R}, |\\mathbf{r}_{ij}+\\mathbf{R}| \\le R_{\\mathrm{cut}}}' \\frac{\\operatorname{erfc}(\\alpha |\\mathbf{r}_j - \\mathbf{r}_i + \\mathbf{R}|)}{|\\mathbf{r}_j - \\mathbf{r}_i + \\mathbf{R}|}\n    $$\n    where $\\mathbf{r}_{ij} = \\mathbf{r}_j - \\mathbf{r}_i$. The prime again indicates omission of the singular $i=j$, $\\mathbf{R}=\\mathbf{0}$ term. For sufficiently large $\\alpha$, this sum converges rapidly.\n\n2.  **Reciprocal-Space Energy ($U_{\\text{recip}}$)**: This term cancels the effect of the screening clouds. The smooth nature of the Gaussian distributions allows for an efficient evaluation of their interaction energy via a Fourier series over the reciprocal lattice vectors $\\mathbf{k}$.\n    $$\n    U_{\\text{recip}} = \\frac{1}{2V} \\sum_{\\mathbf{k} \\ne \\mathbf{0}, |\\mathbf{k}| \\le K_{\\mathrm{max}}} \\frac{4\\pi}{k^2} e^{-k^2 / (4\\alpha^2)} |S(\\mathbf{k})|^2\n    $$\n    Here, $V=a^3$ is the volume of the cubic unit cell, and the sum is over reciprocal lattice vectors $\\mathbf{k} = (2\\pi/a)(h_x, h_y, h_z)$ for integer triplets $(h_x, h_y, h_z)$, up to a cutoff $K_{\\mathrm{max}}$. The $\\mathbf{k}=\\mathbf{0}$ term is excluded. $S(\\mathbf{k})$ is the structure factor, defined as:\n    $$\n    S(\\mathbf{k}) = \\sum_{j=1}^{N} q_j e^{i \\mathbf{k} \\cdot \\mathbf{r}_j}\n    $$\n    For charge-neutral systems ($Q = \\sum_j q_j = 0$), the term corresponding to a uniform neutralizing background, $-\\pi Q^2 / (2 \\alpha^2 V)$, is zero, as is the case for the specified crystals.\n\n3.  **Self-Interaction Correction ($U_{\\text{self}}$)**: The introduction of the screening Gaussian for each charge results in an unphysical interaction of a charge with its own screening cloud. This must be subtracted. The correction term is:\n    $$\n    U_{\\text{self}} = - \\frac{\\alpha}{\\sqrt{\\pi}} \\sum_{i=1}^{N} q_i^2\n    $$\n\nThe Madelung constant, $\\mathcal{M}$, is a dimensionless quantity that characterizes the electrostatic energy of an ion in a crystal. For a binary ionic crystal with charges $\\pm 1$, it is defined via the energy per ion pair, or more generally, energy per ion $U/N$. With the Coulomb constant set to $1$, the definition is:\n$$\n\\mathcal{M} = - \\frac{U/N}{1/r_0} = - \\frac{U \\cdot r_0}{N}\n$$\nwhere $r_0$ is the nearest-neighbor distance.\n\nFor the computation, we use the specified parameters: lattice constant $a=1$, real-space cutoff $R_{\\mathrm{cut}}=6.0$, and reciprocal-space cutoff $K_{\\mathrm{max}}=25.0$. We evaluate for $\\alpha \\in \\{1.6, 2.4, 3.2\\}$.\n\n**For NaCl (rock-salt structure):**\nThe unit cell contains $N=8$ ions. The fractional coordinates are given for negative ions ($q=-1$) and positive ions ($q=+1$). The nearest-neighbor distance is $r_0 = a/2 = 0.5$.\n\n**For CsCl (body-centered cubic structure):**\nThe unit cell contains $N=2$ ions, $q=+1$ at $(0,0,0)$ and $q=-1$ at $(\\frac{1}{2},\\frac{1}{2},\\frac{1}{2})$. The nearest-neighbor distance is $r_0 = a\\sqrt{3}/2 = \\sqrt{3}/2$.\n\nThe numerical implementation proceeds by constructing loops over the real-space lattice vectors and reciprocal-space vectors up to the specified cutoffs, calculating the three energy components, summing them to find the total energy $U$, and finally computing the Madelung constant $\\mathcal{M}$. The stability of the calculation with respect to $\\alpha$ is assessed by computing the maximum absolute deviation $\\Delta_X$ from the mean value for each crystal structure.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import erfc\n\ndef calculate_madelung(structure_name, alpha):\n    \"\"\"\n    Computes the Madelung constant for a given crystal structure using Ewald summation.\n    \"\"\"\n    if structure_name == \"NaCl\":\n        a = 1.0\n        r_neg = np.array([[0.0, 0.0, 0.0], [0.0, 0.5, 0.5], [0.5, 0.0, 0.5], [0.5, 0.5, 0.0]])\n        r_pos = np.array([[0.5, 0.0, 0.0], [0.5, 0.5, 0.5], [0.0, 0.0, 0.5], [0.0, 0.5, 0.0]])\n        positions = a * np.vstack((r_neg, r_pos))\n        charges = np.array([-1.0] * 4 + [1.0] * 4)\n        N = 8\n        r0 = a / 2.0\n    elif structure_name == \"CsCl\":\n        a = 1.0\n        positions = a * np.array([[0.0, 0.0, 0.0], [0.5, 0.5, 0.5]])\n        charges = np.array([1.0, -1.0])\n        N = 2\n        r0 = a * np.sqrt(3.0) / 2.0\n    else:\n        raise ValueError(\"Unknown structure\")\n\n    R_cut = 6.0\n    K_max = 25.0\n    V = a**3\n\n    # Real-space sum\n    U_real = 0.0\n    R_max_int = int(np.floor(R_cut / a))\n    for nx in range(-R_max_int, R_max_int + 1):\n        for ny in range(-R_max_int, R_max_int + 1):\n            for nz in range(-R_max_int, R_max_int + 1):\n                R_vec = a * np.array([nx, ny, nz])\n                if np.linalg.norm(R_vec) > R_cut:\n                    continue\n                \n                for i in range(N):\n                    for j in range(N):\n                        if i == j and nx == 0 and ny == 0 and nz == 0:\n                            continue\n                        \n                        r_ij_vec = positions[j] - positions[i] + R_vec\n                        r_mag = np.linalg.norm(r_ij_vec)\n                        \n                        if r_mag > 0:\n                            U_real += charges[i] * charges[j] * erfc(alpha * r_mag) / r_mag\n    U_real *= 0.5\n\n    # Reciprocal-space sum\n    U_recip = 0.0\n    h_max_int = int(np.floor(a * K_max / (2 * np.pi)))\n    for hx in range(-h_max_int, h_max_int + 1):\n        for hy in range(-h_max_int, h_max_int + 1):\n            for hz in range(-h_max_int, h_max_int + 1):\n                if hx == 0 and hy == 0 and hz == 0:\n                    continue\n                \n                k_vec = (2 * np.pi / a) * np.array([hx, hy, hz])\n                k_sq = np.dot(k_vec, k_vec)\n                \n                if k_sq > K_max**2:\n                    continue\n                \n                # Structure factor S(k)\n                k_dot_r = np.dot(positions, k_vec)\n                S_k = np.sum(charges * np.exp(1j * k_dot_r))\n                S_k_sq = np.abs(S_k)**2\n                \n                U_recip += (4 * np.pi / k_sq) * np.exp(-k_sq / (4 * alpha**2)) * S_k_sq\n    U_recip *= 1.0 / (2.0 * V)\n\n    # Self-interaction correction\n    sum_q_sq = np.sum(charges**2)\n    U_self = -(alpha / np.sqrt(np.pi)) * sum_q_sq\n\n    # Total energy\n    U_total = U_real + U_recip + U_self\n\n    # Madelung constant\n    madelung = - (U_total / N) * r0\n    \n    return madelung\n\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and produce the final output.\n    \"\"\"\n    alphas = [1.6, 2.4, 3.2]\n    \n    # Run test cases for NaCl\n    m_nacl_results = []\n    for alpha in alphas:\n        m_nacl = calculate_madelung(\"NaCl\", alpha)\n        m_nacl_results.append(m_nacl)\n    \n    mean_m_nacl = np.mean(m_nacl_results)\n    delta_nacl = np.max(np.abs(np.array(m_nacl_results) - mean_m_nacl))\n    \n    # Run test cases for CsCl\n    m_cscl_results = []\n    for alpha in alphas:\n        m_cscl = calculate_madelung(\"CsCl\", alpha)\n        m_cscl_results.append(m_cscl)\n        \n    mean_m_cscl = np.mean(m_cscl_results)\n    delta_cscl = np.max(np.abs(np.array(m_cscl_results) - mean_m_cscl))\n    \n    # Combine all results for final output\n    final_results = m_nacl_results + [delta_nacl] + m_cscl_results + [delta_cscl]\n    \n    # Format and print the final output\n    output_str = \",\".join([f\"{x:.6f}\" for x in final_results])\n    print(f\"[{output_str}]\")\n\nsolve()\n\n```", "id": "2424435"}]}