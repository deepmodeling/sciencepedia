{"hands_on_practices": [{"introduction": "A cornerstone of the BCS theory is its prediction of a universal relationship between the superconducting energy gap at absolute zero, $\\Delta(0)$, and the critical temperature, $T_c$. This practice allows you to directly apply this powerful connection, which links a fundamental microscopic property—the binding energy of a Cooper pair—to a readily measurable macroscopic quantity. By performing this calculation for a real-world material, you will gain a tangible understanding of one of the theory's most important and experimentally verified results [@problem_id:1809317].", "problem": "In the Bardeen-Cooper-Schrieffer (BCS) theory of superconductivity, electrons near the Fermi surface can form bound pairs called Cooper pairs. The binding energy of a Cooper pair is the minimum energy required to break it apart into two unpaired quasiparticles. At absolute zero ($T=0$ K), this binding energy is equal to $2\\Delta(0)$, where $\\Delta(0)$ is the superconducting energy gap. The BCS theory predicts a universal relationship between the energy gap at absolute zero and the critical temperature $T_c$ of the superconductor, given by $2\\Delta(0) \\approx 3.53 k_B T_c$.\n\nConsider the element Niobium (Nb), a Type-II superconductor widely used in applications such as superconducting magnets for Magnetic Resonance Imaging (MRI) and particle accelerators. Niobium has a critical temperature of $T_c = 9.25$ K.\n\nUsing the BCS prediction, calculate the binding energy of a Cooper pair in Niobium at absolute zero.\n\nProvide your answer in units of millielectron-volts (meV). You will need the Boltzmann constant, $k_B = 8.617 \\times 10^{-5}$ eV/K. Round your final answer to three significant figures.", "solution": "The binding energy of a Cooper pair at absolute zero is equal to $2\\Delta(0)$. In BCS theory, the universal relation at $T=0$ K is\n$$\n2\\Delta(0) \\approx 3.53\\,k_{B}T_{c}.\n$$\nTherefore, for Niobium with $T_{c}=9.25\\,\\text{K}$, the binding energy is\n$$\nE_{\\text{bind}} = 3.53\\,k_{B}T_{c}.\n$$\nSubstituting $k_{B} = 8.617 \\times 10^{-5}\\,\\text{eV/K}$ and $T_{c}=9.25\\,\\text{K}$,\n$$\nE_{\\text{bind}} = 3.53 \\times \\left(8.617 \\times 10^{-5}\\,\\text{eV/K}\\right) \\times 9.25\\,\\text{K}.\n$$\nThe kelvin units cancel, giving energy in electron-volts:\n$$\nE_{\\text{bind}} = 3.53 \\times 8.617 \\times 9.25 \\times 10^{-5}\\,\\text{eV}.\n$$\nCompute the product:\n$$\n8.617 \\times 9.25 = 79.70725,\\quad 79.70725 \\times 3.53 = 281.3665925,\n$$\nso\n$$\nE_{\\text{bind}} = 281.3665925 \\times 10^{-5}\\,\\text{eV} = 2.813665925 \\times 10^{-3}\\,\\text{eV}.\n$$\nConvert to millielectron-volts using $1\\,\\text{eV} = 10^{3}\\,\\text{meV}$:\n$$\nE_{\\text{bind}} = 2.813665925\\,\\text{meV}.\n$$\nRounding to three significant figures gives\n$$\nE_{\\text{bind}} \\approx 2.81\\,\\text{meV}.\n$$", "answer": "$$\\boxed{2.81}$$", "id": "1809317"}, {"introduction": "Having established the energy gap, a natural question arises: which electrons in the metal actually participate in forming the Cooper pairs? This exercise explores this question using a simplified model to reveal a profound and counter-intuitive aspect of superconductivity. You will estimate the fraction of electrons involved in pairing, demonstrating that this collective quantum phenomenon is driven by only a tiny sliver of electrons near the Fermi energy [@problem_id:1809299].", "problem": "Consider a hypothetical metal whose conduction electrons behave as a three-dimensional free electron gas. For such a system, the density of states at the Fermi energy, $E_F$, can be expressed as $g(E_F) = \\frac{3N}{2E_F}$, where $N$ is the total number of conduction electrons. This metal becomes a superconductor below a critical temperature, $T_c$.\n\nBased on a simplified model for the onset of superconductivity, it is posited that only the electrons occupying an energy shell of width $\\Delta E = k_B T_c$ just below the Fermi level are responsible for the superconducting properties. Given that this metal has a critical temperature of $T_c = 7.20$ K and a Fermi energy of $E_F = 9.47$ eV, determine the fraction of the total conduction electrons that are involved in the superconducting state according to this model.\n\nYou may assume that the density of states is approximately constant over the narrow energy shell in question. Use the value of the Boltzmann constant $k_B = 8.617 \\times 10^{-5}$ eV/K.\n\nExpress your answer as a decimal, rounded to three significant figures.", "solution": "The problem asks for the fraction of conduction electrons that participate in superconductivity. Let $N$ be the total number of conduction electrons and $\\Delta N$ be the number of electrons participating in superconductivity. The desired fraction is $f = \\frac{\\Delta N}{N}$.\n\nAccording to the model described in the problem, the electrons that participate in superconductivity are those located in an energy shell of width $\\Delta E = k_B T_c$ just below the Fermi energy $E_F$. This means the electrons are in the energy range $[E_F - \\Delta E, E_F]$.\n\nThe number of electrons, $\\Delta N$, in a given energy range can be found by integrating the density of states, $g(E)$, over that range.\n$$ \\Delta N = \\int_{E_F - \\Delta E}^{E_F} g(E) \\,dE $$\nThe problem statement allows us to assume that the density of states $g(E)$ is constant over this narrow energy shell and equal to its value at the Fermi energy, $g(E_F)$. With this approximation, the integral simplifies to:\n$$ \\Delta N \\approx g(E_F) \\times \\left(E_F - (E_F - \\Delta E)\\right) = g(E_F) \\times \\Delta E $$\nThe problem provides the expression for the density of states at the Fermi energy for a 3D free electron gas:\n$$ g(E_F) = \\frac{3N}{2E_F} $$\nAnd the width of the energy shell is given as:\n$$ \\Delta E = k_B T_c $$\nSubstituting these expressions into the equation for $\\Delta N$:\n$$ \\Delta N \\approx \\left(\\frac{3N}{2E_F}\\right) (k_B T_c) $$\nNow, we can find the fraction $f$ by dividing $\\Delta N$ by the total number of electrons $N$:\n$$ f = \\frac{\\Delta N}{N} \\approx \\frac{\\left(\\frac{3N}{2E_F}\\right) (k_B T_c)}{N} $$\nThe total number of electrons, $N$, cancels out:\n$$ f \\approx \\frac{3}{2} \\frac{k_B T_c}{E_F} $$\nThis expression gives the estimated fraction of electrons involved. Now we substitute the given numerical values:\n$T_c = 7.20$ K\n$E_F = 9.47$ eV\n$k_B = 8.617 \\times 10^{-5}$ eV/K\n\nFirst, calculate the characteristic thermal energy $k_B T_c$:\n$$ k_B T_c = (8.617 \\times 10^{-5} \\text{ eV/K}) \\times (7.20 \\text{ K}) = 6.20424 \\times 10^{-4} \\text{ eV} $$\nNow, substitute this value into the expression for the fraction $f$:\n$$ f \\approx \\frac{3}{2} \\frac{6.20424 \\times 10^{-4} \\text{ eV}}{9.47 \\text{ eV}} $$\n$$ f \\approx 1.5 \\times (6.551467 \\times 10^{-5}) $$\n$$ f \\approx 9.8272 \\times 10^{-5} $$\nThe problem asks for the answer to be rounded to three significant figures.\n$$ f \\approx 9.83 \\times 10^{-5} $$\nAs a decimal, this is $0.0000983$.", "answer": "$$\\boxed{9.83 \\times 10^{-5}}$$", "id": "1809299"}, {"introduction": "The previous practices utilized the energy gap, $\\Delta$, as a given parameter. This final, more advanced exercise takes you to the heart of the BCS theory by tasking you with calculating $\\Delta$ from its fundamental origin: the self-consistency equation. By developing a numerical fixed-point iteration to solve this equation, you will engage directly with the mathematical machinery that gives the theory its predictive power and gain a deeper appreciation for how the superconducting state emerges from microscopic interactions [@problem_id:2394919].", "problem": "You are given the zero-temperature energy-gap self-consistency equation from Bardeen–Cooper–Schrieffer (BCS) theory of superconductivity, written in the standard form\n$$\n\\frac{1}{N(0)V} \\;=\\; \\int_{0}^{\\hbar\\omega_c} \\frac{d\\epsilon}{\\sqrt{\\epsilon^2 + \\Delta^2}},\n$$\nwhere $N(0)$ is the density of states at the Fermi level, $V$ is the (effective) attractive interaction, $\\hbar\\omega_c$ is the energy cutoff, and $\\Delta$ is the superconducting energy gap. Define the dimensionless coupling as $\\lambda = N(0)V$ and denote $W = \\hbar\\omega_c$.\n\nYour task is to design and implement a fixed-point iteration to compute the positive solution $\\Delta>0$ of the nonlinear equation\n$$\n\\frac{1}{\\lambda} \\;=\\; \\int_{0}^{W} \\frac{d\\epsilon}{\\sqrt{\\epsilon^2 + \\Delta^2}},\n$$\nstarting from first principles. The derivation must begin only from core definitions of fixed-point iteration and basic calculus properties of integrals and must not rely on any shortcut formulas not derived by you. You must:\n\n- Derive a fixed-point mapping $g(\\Delta)$ such that solving the equation is equivalent to finding $\\Delta$ with $\\Delta = g(\\Delta)$.\n- Justify a sufficient condition on the parameters for which your mapping is a contraction in a neighborhood of the solution and hence convergent by the contraction mapping theorem.\n- Specify a numerically robust stopping criterion grounded in a clear error measure.\n\nImplementation requirements:\n\n- The program must compute $\\Delta$ for several test cases using only a fixed-point iteration (no root-bracketing or Newton methods). Any auxiliary acceleration technique must preserve the fixed-point character of the iteration.\n- Angles do not appear; therefore, no angle unit is required. Energies must be reported in electronvolts (eV).\n- Results must be returned as floating-point numbers rounded to $10$ significant digits, expressed in eV. Scientific notation is allowed when appropriate.\n\nTest suite:\n\nCompute $\\Delta$ (in eV) for the following $(\\lambda, W)$ pairs:\n- Case $1$: $\\lambda = 0.3$, $W = 0.02\\ \\mathrm{eV}$.\n- Case $2$: $\\lambda = 0.9$, $W = 0.005\\ \\mathrm{eV}$.\n- Case $3$: $\\lambda = 1.5$, $W = 0.02\\ \\mathrm{eV}$.\n- Case $4$: $\\lambda = 0.1$, $W = 0.02\\ \\mathrm{eV}$.\n\nFinal output format:\n\nYour program should produce a single line of output containing the four results corresponding to the four cases, as a comma-separated list enclosed in square brackets. For example:\n\"[x1,x2,x3,x4]\"\nwhere each $x_k$ is the computed $\\Delta$ for case $k$, in eV, rounded to $10$ significant digits as specified above.", "solution": "**1. Derivation of the Fixed-Point Mapping**\n\nThe objective is to solve the BCS gap equation by finding a fixed point of an iterative mapping. The governing equation is:\n$$\n\\frac{1}{\\lambda} = \\int_{0}^{W} \\frac{d\\epsilon}{\\sqrt{\\epsilon^2 + \\Delta^2}}\n$$\nFirst, we evaluate the integral on the right-hand side. This is a standard integral:\n$$\n\\int \\frac{dx}{\\sqrt{x^2 + a^2}} = \\operatorname{arsinh}\\left(\\frac{x}{a}\\right) + C\n$$\nApplying this to our equation gives:\n$$\n\\int_{0}^{W} \\frac{d\\epsilon}{\\sqrt{\\epsilon^2 + \\Delta^2}} = \\left[ \\operatorname{arsinh}\\left(\\frac{\\epsilon}{\\Delta}\\right) \\right]_{0}^{W} = \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) - \\operatorname{arsinh}(0) = \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right)\n$$\nThe original equation thus simplifies to a transcendental equation for the gap $\\Delta$:\n$$\n\\frac{1}{\\lambda} = \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right)\n$$\nTo construct a fixed-point iteration of the form $\\Delta = g(\\Delta)$, we rearrange this equation. An effective mapping is created by multiplying both sides by $\\lambda \\Delta$:\n$$\n\\Delta = \\lambda \\Delta \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right)\n$$\nThis gives us our fixed-point mapping function $g(\\Delta)$ and the corresponding iterative sequence:\n$$\n\\Delta_{k+1} = g(\\Delta_k) = \\lambda \\Delta_k \\operatorname{arsinh}\\left(\\frac{W}{\\Delta_k}\\right)\n$$\n\n**2. Convergence Analysis**\n\nFor the iteration to converge to a unique solution $\\Delta^*$, the function $g(\\Delta)$ must be a contraction in the neighborhood of the solution. A sufficient condition for this is that the absolute value of its derivative, $|g'(\\Delta^*)|$, is less than 1.\n\nWe compute the derivative of $g(\\Delta)$ using the product rule and chain rule:\n$$\ng'(\\Delta) = \\frac{d}{d\\Delta} \\left[ \\lambda \\Delta \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) \\right] = \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) + \\lambda \\Delta \\left( \\frac{1}{\\sqrt{1 + (W/\\Delta)^2}} \\cdot \\left(-\\frac{W}{\\Delta^2}\\right) \\right)\n$$\nSimplifying this expression yields:\n$$\ng'(\\Delta) = \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) - \\frac{\\lambda W}{\\sqrt{\\Delta^2 + W^2}}\n$$\nAt the fixed point $\\Delta^*$, we know from our simplified equation that $\\operatorname{arsinh}(W/\\Delta^*) = 1/\\lambda$. Substituting this into the derivative:\n$$\ng'(\\Delta^*) = \\lambda \\left(\\frac{1}{\\lambda}\\right) - \\frac{\\lambda W}{\\sqrt{(\\Delta^*)^2 + W^2}} = 1 - \\frac{\\lambda W}{\\sqrt{(\\Delta^*)^2 + W^2}}\n$$\nSince $\\lambda$, $W$, and $\\Delta^*$ are all positive, the term $\\frac{\\lambda W}{\\sqrt{(\\Delta^*)^2 + W^2}}$ is also positive and can be shown to be less than or equal to 1. Therefore, $0 \\le g'(\\Delta^*)  1$. This satisfies the contraction condition $|g'(\\Delta^*)|  1$, ensuring that the iteration will converge if started with a reasonable initial guess.\n\n**3. Numerical Algorithm and Stopping Criterion**\n\nThe iterative algorithm is implemented as follows:\n1.  Initialize with a starting guess, e.g., $\\Delta_0 = W$.\n2.  For $k = 0, 1, 2, \\dots$, compute the next iterate: $\\Delta_{k+1} = g(\\Delta_k)$.\n3.  Stop the iteration when a convergence criterion is met. A robust choice is to check if the relative error is below a small tolerance $\\tau$:\n    $$\n    \\frac{|\\Delta_{k+1} - \\Delta_k|}{|\\Delta_{k+1}|}  \\tau\n    $$\n    A tolerance of $\\tau=10^{-15}$ ensures high precision.\n4.  The final value of $\\Delta_{k+1}$ is the computed energy gap.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the BCS superconducting gap Delta for multiple test cases\n    using a fixed-point iteration method.\n    \"\"\"\n\n    def compute_delta(lambda_val: float, W_val: float, tol: float = 1e-15, max_iter: int = 1000) - float:\n        \"\"\"\n        Computes the superconducting gap Delta using a derived fixed-point iteration.\n\n        The iteration is given by Delta_{k+1} = g(Delta_k), where\n        g(Delta) = Delta * lambda * arsinh(W / Delta).\n\n        Args:\n            lambda_val: The dimensionless coupling constant.\n            W_val: The energy cutoff in eV.\n            tol: The tolerance for the stopping criterion.\n            max_iter: The maximum number of iterations.\n\n        Returns:\n            The computed energy gap Delta in eV.\n            \n        Raises:\n            RuntimeError: If the iteration fails to converge within max_iter.\n        \"\"\"\n        # A robust initial guess, as established in the derivation.\n        # Starting too close to zero can cause divergence.\n        delta_k = W_val\n\n        for _ in range(max_iter):\n            # Handle potential division by zero, although g(delta)  0 for delta  0.\n            if delta_k == 0.0:\n                # For lambda  0, the only solution is trivial if W=0,\n                # but physically W  0. The non-trivial solution has Delta  0.\n                return 0.0\n\n            # Apply the fixed-point mapping function g(Delta).\n            delta_kplus1 = delta_k * lambda_val * np.arcsinh(W_val / delta_k)\n\n            # Use a relative error criterion for convergence.\n            # This is robust for values of different orders of magnitude.\n            if np.abs(delta_kplus1 - delta_k)  tol * np.abs(delta_kplus1):\n                return delta_kplus1\n\n            delta_k = delta_kplus1\n\n        # If the loop completes without convergence, raise an error.\n        raise RuntimeError(\n            f\"Fixed-point iteration did not converge for lambda={lambda_val}, W={W_val}\"\n        )\n\n    # Define the test cases from the problem statement.\n    # Each tuple is (lambda, W in eV).\n    test_cases = [\n        (0.3, 0.02),\n        (0.9, 0.005),\n        (1.5, 0.02),\n        (0.1, 0.02),\n    ]\n\n    results = []\n    for case in test_cases:\n        lambda_val, W_val = case\n        result = compute_delta(lambda_val, W_val)\n        \n        # Format the result to 10 significant digits.\n        # The 'g' format specifier is appropriate as it automatically\n        # chooses between fixed-point and scientific notation.\n        results.append(f\"{result:.10g}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2394919"}]}