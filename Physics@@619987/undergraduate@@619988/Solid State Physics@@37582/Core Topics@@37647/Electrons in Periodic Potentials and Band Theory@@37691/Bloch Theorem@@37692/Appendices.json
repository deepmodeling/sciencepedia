{"hands_on_practices": [{"introduction": "Bloch's theorem is the cornerstone of understanding electron behavior in periodic solids. It states that the wavefunction in a crystal is not simply periodic, but instead acquires a phase factor upon translation by a lattice vector. This exercise invites you to test this fundamental principle directly on a simple sinusoidal waveform, helping to clarify the precise mathematical conditions a function must meet to be a valid Bloch state.", "problem": "In the study of electron states in a one-dimensional crystal, a wavefunction must satisfy Bloch's theorem. Consider a hypothetical one-dimensional crystal with a lattice constant $a$. An electron in this crystal is proposed to have a wavefunction of the form $\\psi(x) = A \\sin(k_0 x)$, where $A$ is a normalization constant and $k_0$ is a positive real number representing a wavevector.\n\nUnder what conditions, if any, can this wavefunction be considered a valid Bloch function for this crystal?\n\nA. Yes, provided that $k_0 a = n \\pi$ for some integer $n$.\n\nB. Yes, provided that $k_0 a = 2n \\pi$ for some integer $n$.\n\nC. No, because a valid Bloch function must be a complex exponential, not a real-valued sinusoidal function.\n\nD. No, because the function $\\psi(x) = A \\sin(k_0 x)$ is not periodic with the lattice period $a$ for an arbitrary $k_0$.\n\nE. Yes, this is always a valid Bloch function for any value of $k_0$.", "solution": "According to Bloch's theorem, a function $\\psi(x)$ is a valid Bloch function for a one-dimensional lattice with lattice constant $a$ if it satisfies the condition:\n$$ \\psi(x+a) = C \\psi(x) $$\nfor all $x$, where $C$ is a complex constant with unit modulus, typically written as $C = \\exp(ika)$ for some real wavevector $k$. This wavevector $k$ is known as the crystal momentum.\n\nLet's test the given wavefunction, $\\psi(x) = A \\sin(k_0 x)$, against this condition.\nFirst, we evaluate the wavefunction at $x+a$:\n$$ \\psi(x+a) = A \\sin(k_0(x+a)) = A \\sin(k_0 x + k_0 a) $$\nUsing the trigonometric identity for the sine of a sum, $\\sin(\\alpha + \\beta) = \\sin(\\alpha)\\cos(\\beta) + \\cos(\\alpha)\\sin(\\beta)$, we can expand this expression:\n$$ \\psi(x+a) = A (\\sin(k_0 x) \\cos(k_0 a) + \\cos(k_0 x) \\sin(k_0 a)) $$\nNow, we substitute this into the Bloch condition:\n$$ A (\\sin(k_0 x) \\cos(k_0 a) + \\cos(k_0 x) \\sin(k_0 a)) = C (A \\sin(k_0 x)) $$\nThe normalization constant $A$ is non-zero, so it can be canceled from both sides:\n$$ \\sin(k_0 x) \\cos(k_0 a) + \\cos(k_0 x) \\sin(k_0 a) = C \\sin(k_0 x) $$\nTo make the analysis clearer, let's rearrange the equation by moving all terms to one side:\n$$ \\sin(k_0 x) (\\cos(k_0 a) - C) + \\cos(k_0 x) \\sin(k_0 a) = 0 $$\nThis equation must hold for all values of $x$. The functions $\\sin(k_0 x)$ and $\\cos(k_0 x)$ are linearly independent for $k_0 \\neq 0$. For a linear combination of linearly independent functions to be zero for all values of the variable, the coefficients of each function must be zero.\nThis gives us two simultaneous conditions:\n1. The coefficient of $\\sin(k_0 x)$ must be zero: $\\cos(k_0 a) - C = 0 \\implies C = \\cos(k_0 a)$.\n2. The coefficient of $\\cos(k_0 x)$ must be zero: $\\sin(k_0 a) = 0$.\n\nLet's analyze the second condition first. For $\\sin(k_0 a) = 0$, the argument $k_0 a$ must be an integer multiple of $\\pi$. That is:\n$$ k_0 a = n \\pi \\quad \\text{for some integer } n $$\nIf this condition is not met, the equation cannot be satisfied for all $x$, and $\\psi(x)$ is not a Bloch function.\n\nNow, let's assume this condition is met. We can then check the first condition. Substituting $k_0 a = n\\pi$ into the expression for $C$:\n$$ C = \\cos(n \\pi) $$\nFor any integer $n$, $\\cos(n \\pi)$ is either $+1$ (for even $n$) or $-1$ (for odd $n$). In both cases, the constant $C$ is a real number. We must also verify that its modulus is 1, i.e., $|C|=1$. Since $C = \\pm 1$, we have $|C|=1$, which is consistent with the requirements for a Bloch function.\nIf $n$ is even, $k_0 a = 2m\\pi$, $C=1$, so the crystal momentum $k$ satisfies $\\exp(ika)=1$, meaning $k=2p\\pi/a$ (a reciprocal lattice vector, including $k=0$).\nIf $n$ is odd, $k_0 a = (2m+1)\\pi$, $C=-1$, so the crystal momentum $k$ satisfies $\\exp(ika)=-1$, meaning $k=(2p+1)\\pi/a$ (the Brillouin zone boundary).\n\nTherefore, the function $\\psi(x) = A \\sin(k_0 x)$ is a valid Bloch function if and only if $k_0 a = n\\pi$ for some integer $n$.\n\nLet's review the options:\nA. The condition is $k_0 a = n \\pi$ for some integer $n$. This matches our derivation.\nB. This is too restrictive, as it only covers the cases where $C=+1$ and excludes the cases where $C=-1$ (odd $n$).\nC. This is incorrect. A Bloch function can be real. For instance, a superposition of Bloch states $\\psi_k(x)$ and $\\psi_{-k}(x)$ can be real. Our function is a standing wave, which can arise in a periodic potential.\nD. This is a common misunderstanding of Bloch's theorem. The theorem does not require the wavefunction $\\psi(x)$ itself to be periodic with period $a$. It requires that it can be written as $\\psi(x) = u_k(x) \\exp(ikx)$ where the envelope function $u_k(x)$ is periodic with period $a$.\nE. This is incorrect, as we have shown that a specific condition must be met.\n\nThus, the only correct statement is A.", "answer": "$$\\boxed{A}$$", "id": "1762586"}, {"introduction": "Having established the properties of a Bloch function, we can now apply it to solve the Schrödinger equation in a periodic potential. This practice guides you through the derivation of the energy dispersion relation for a one-dimensional crystal using the tight-binding model. Mastering this fundamental calculation reveals how interactions between atoms cause discrete energy levels to broaden into the continuous energy bands that govern the electronic properties of materials.", "problem": "Consider an infinite, one-dimensional monoatomic crystal with lattice constant $a$ and one orthonormal localized orbital $\\{|n\\rangle\\}$ per lattice site, where $n \\in \\mathbb{Z}$ labels the sites at positions $R_{n} = n a$. Assume a tight-binding description in which the only nonzero Hamiltonian matrix elements in this basis are the on-site energy $\\langle n|\\hat{H}|n\\rangle = \\epsilon$ and nearest-neighbor couplings $\\langle n|\\hat{H}|n \\pm 1\\rangle = -t$, with all other matrix elements vanishing. The time-independent Schrödinger equation is $\\hat{H}|\\psi\\rangle = E|\\psi\\rangle$. The crystal is perfectly periodic, so the Hamiltonian commutes with the lattice translation operator and the eigenstates can be chosen to have a definite crystal momentum $k$ in the first Brillouin zone.\n\nStarting from these principles and definitions only (translational invariance, the stated Hamiltonian matrix elements, and the time-independent Schrödinger equation), derive the dispersion relation $E(k)$ for Bloch states on this lattice. Express your final answer as a single, closed-form analytic expression in terms of $k$, $a$, $\\epsilon$, and $t$. Do not introduce any additional approximations beyond those stated. The final answer is an energy expression; no numerical evaluation or unit conversion is required.", "solution": "The objective is to find the dispersion relation $E(k)$ for an electron in a one-dimensional periodic potential, described by the tight-binding Hamiltonian. The system's eigenstates, known as Bloch states, are also eigenstates of the lattice translation operator due to the periodicity of the crystal.\n\nLet $|\\psi_k\\rangle$ be a Bloch state corresponding to a crystal momentum $k$. This state can be expanded in the basis of orthonormal localized orbitals $\\{|n\\rangle\\}$, where $n \\in \\mathbb{Z}$ indexes the lattice sites at positions $R_n = na$:\n$$ |\\psi_k\\rangle = \\sum_{n=-\\infty}^{\\infty} c_n(k) |n\\rangle $$\nThe orthonormality of the basis is given by $\\langle m|n\\rangle = \\delta_{mn}$.\n\nBloch's theorem dictates the form of the coefficients $c_n(k)$ for an eigenstate of the translation operator. The action of the translation operator $\\hat{T}_a$, which shifts the lattice by one constant $a$, on a Bloch state is $\\hat{T}_a |\\psi_k\\rangle = e^{ika} |\\psi_k\\rangle$. Applying this to the expansion of $|\\psi_k\\rangle$:\n$$ \\hat{T}_a |\\psi_k\\rangle = \\sum_{n=-\\infty}^{\\infty} c_n(k) \\hat{T}_a|n\\rangle = \\sum_{n=-\\infty}^{\\infty} c_n(k) |n+1\\rangle = \\sum_{m=-\\infty}^{\\infty} c_{m-1}(k) |m\\rangle $$\nComparing this with the eigenvalue equation, $e^{ika} |\\psi_k\\rangle = \\sum_{m=-\\infty}^{\\infty} e^{ika} c_m(k) |m\\rangle$, we establish the relation between coefficients: $c_{m-1}(k) = e^{ika} c_m(k)$, or equivalently, $c_m(k) = e^{ikma} c_0(k)$. The constant $c_0(k)$ is part of the overall normalization. Thus, the Bloch state takes the form:\n$$ |\\psi_k\\rangle = \\mathcal{N} \\sum_{n=-\\infty}^{\\infty} e^{ikna} |n\\rangle $$\nwhere $\\mathcal{N}$ is a normalization constant that will not affect the energy eigenvalue calculation.\n\nWe now insert this ansatz into the time-independent Schrödinger equation, $\\hat{H}|\\psi_k\\rangle = E(k)|\\psi_k\\rangle$:\n$$ \\hat{H} \\left( \\sum_{n=-\\infty}^{\\infty} e^{ikna} |n\\rangle \\right) = E(k) \\left( \\sum_{n=-\\infty}^{\\infty} e^{ikna} |n\\rangle \\right) $$\nBy the linearity of the Hamiltonian $\\hat{H}$, this becomes:\n$$ \\sum_{n=-\\infty}^{\\infty} e^{ikna} \\hat{H} |n\\rangle = E(k) \\sum_{n=-\\infty}^{\\infty} e^{ikna} |n\\rangle $$\nTo solve for the energy eigenvalue $E(k)$, we project this equation onto an arbitrary basis ket $\\langle m|$:\n$$ \\sum_{n=-\\infty}^{\\infty} e^{ikna} \\langle m | \\hat{H} | n \\rangle = E(k) \\sum_{n=-\\infty}^{\\infty} e^{ikna} \\langle m | n \\rangle $$\nWe evaluate the right-hand side using the orthonormality condition $\\langle m|n\\rangle = \\delta_{mn}$:\n$$ E(k) \\sum_{n=-\\infty}^{\\infty} e^{ikna} \\delta_{mn} = E(k) e^{ikma} $$\nFor the left-hand side, we use the provided Hamiltonian matrix elements: $\\langle n|\\hat{H}|n\\rangle = \\epsilon$ and $\\langle n|\\hat{H}|n \\pm 1\\rangle = -t$. All other matrix elements $\\langle m|\\hat{H}|n\\rangle$ for $|m-n|>1$ are zero. Consequently, the sum over $n$ has only three non-vanishing terms, for $n=m$, $n=m-1$, and $n=m+1$:\n$$ \\sum_{n=-\\infty}^{\\infty} e^{ikna} \\langle m | \\hat{H} | n \\rangle = e^{ik(m-1)a} \\langle m|\\hat{H}|m-1\\rangle + e^{ikma} \\langle m|\\hat{H}|m\\rangle + e^{ik(m+1)a} \\langle m|\\hat{H}|m+1\\rangle $$\nSubstituting the given values for the matrix elements:\n$$ = e^{ik(m-1)a}(-t) + e^{ikma}(\\epsilon) + e^{ik(m+1)a}(-t) $$\n$$ = \\epsilon e^{ikma} - t \\left( e^{ik(m-1)a} + e^{ik(m+1)a} \\right) $$\nEquating the left-hand side and right-hand side expressions yields:\n$$ \\epsilon e^{ikma} - t \\left( e^{ik(m-1)a} + e^{ik(m+1)a} \\right) = E(k) e^{ikma} $$\nWe divide the entire equation by the non-zero factor $e^{ikma}$:\n$$ \\epsilon - t \\left( e^{-ika} + e^{ika} \\right) = E(k) $$\nThe expression is independent of the site index $m$, as required by translational symmetry. Using the Euler identity $e^{ix} + e^{-ix} = 2\\cos(x)$, we simplify the term in the parenthesis:\n$$ e^{ika} + e^{-ika} = 2\\cos(ka) $$\nSubstituting this back into the equation for energy, we obtain the final dispersion relation:\n$$ E(k) = \\epsilon - 2t\\cos(ka) $$\nThis result represents the energy band of the electron in the crystal as a function of its wavevector $k$. It is the required closed-form analytical expression derived strictly from the given principles.", "answer": "$$\n\\boxed{E(k) = \\epsilon - 2t\\cos(ka)}\n$$", "id": "2802941"}, {"introduction": "Our analytical derivation assumed an infinite crystal, a useful but idealized model. This computational practice bridges the gap between this abstract concept and the finite reality of materials by modeling a chain of a finite number of atoms. By numerically calculating the energy levels for increasing chain lengths, you will directly observe how discrete molecular orbitals coalesce into the continuous energy band predicted by Bloch's theorem, providing powerful intuition for the transition from molecular to solid-state systems.", "problem": "Consider a one-dimensional linear chain of identical hydrogen atoms modeled within the Linear Combination of Atomic Orbitals (LCAO) tight-binding approximation. Use a single normalized hydrogen $1s$ orbital per site, neglect all overlaps except the nearest-neighbor Hamiltonian coupling. Let the on-site energy be $\\varepsilon$ (in electronvolts) and the nearest-neighbor hopping parameter be $t$ (in electronvolts). The atoms are equally spaced with lattice constant $a$ (in length units). Impose open boundary conditions so that the system is a finite chain of $N$ atoms.\n\nDefine the Hamiltonian matrix $H \\in \\mathbb{R}^{N \\times N}$ by\n$$\nH_{ij} \\;=\\; \\varepsilon\\,\\delta_{ij} \\;+\\; t\\left(\\delta_{i,j+1} + \\delta_{i+1,j}\\right),\n$$\nfor $i,j \\in \\{1,2,\\ldots,N\\}$. The discrete molecular orbital energies are the eigenvalues of $H$, denoted in nondecreasing order by\n$$\nE_1(N) \\le E_2(N) \\le \\cdots \\le E_N(N).\n$$\n\nFor an infinite periodic chain with the same parameters, Bloch's theorem states that eigenstates can be labeled by a crystal wave vector $k$ and the dispersion relation is\n$$\nE(k) \\;=\\; \\varepsilon \\;+\\; 2t \\cos(ka),\n$$\nwith $k$ in the first Brillouin zone and $ka$ measured in radians. The band edges of the infinite chain are\n$$\nE_{\\min}^{(\\infty)} \\;=\\; \\varepsilon - 2|t|, \n\\qquad \nE_{\\max}^{(\\infty)} \\;=\\; \\varepsilon + 2|t|.\n$$\n\nYour task is to compute, for each specified chain length $N$, the following six quantities derived from the finite-chain eigenvalue spectrum:\n1. The lowest energy $E_{\\min}(N) \\equiv E_1(N)$ (in electronvolts).\n2. The highest energy $E_{\\max}(N) \\equiv E_N(N)$ (in electronvolts).\n3. The bandwidth $W(N) \\equiv E_{\\max}(N) - E_{\\min}(N)$ (in electronvolts).\n4. The upper-edge deviation $D_{\\text{upper}}(N) \\equiv \\left|E_{\\max}(N) - E_{\\max}^{(\\infty)}\\right|$ (in electronvolts).\n5. The lower-edge deviation $D_{\\text{lower}}(N) \\equiv \\left|E_{\\min}(N) - E_{\\min}^{(\\infty)}\\right|$ (in electronvolts).\n6. The maximum deviation from the exact open-chain formula,\n$$\nD_{\\text{open}}(N) \\;\\equiv\\; \\max_{m \\in \\{1,\\ldots,N\\}} \\left| E_m(N) \\;-\\; \\left[\\varepsilon + 2t \\cos\\!\\left(\\frac{m\\pi}{N+1}\\right)\\right] \\right|,\n$$\nin electronvolts, where all angles are in radians.\n\nUse the following parameter values for all test cases: $\\varepsilon = 0$ eV, $t = -1$ eV, and $a = 1$ (so that $ka$ is dimensionless and measured in radians). Energies and deviations must be expressed in electronvolts, rounded to six decimal places.\n\nTest suite (four cases): $N \\in \\{2,4,8,16\\}$, evaluated in this order.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. For each $N$ in the order $[2,4,8,16]$, output a sublist\n$$\n\\left[E_{\\min}(N),\\; E_{\\max}(N),\\; W(N),\\; D_{\\text{upper}}(N),\\; D_{\\text{lower}(N),\\; D_{\\text{open}}(N)\\right],\n$$\nwith each float rounded to six decimal places. The final printed line must therefore look like\n$$\n\\big[ [\\cdots], [\\cdots], [\\cdots], [\\cdots] \\big],\n$$\ncontaining exactly four sublists in the stated order and no additional text.", "solution": "The core of the problem is to determine the eigenvalues of the Hamiltonian matrix for a finite chain of $N$ atoms. The Hamiltonian $H$, under the nearest-neighbor LCAO tight-binding approximation, is an $N \\times N$ matrix whose elements are defined as:\n$$\nH_{ij} \\;=\\; \\varepsilon\\,\\delta_{ij} \\;+\\; t\\left(\\delta_{i,j+1} + \\delta_{i+1,j}\\right)\n$$\nwhere $i,j \\in \\{1, 2, \\ldots, N\\}$, $\\varepsilon$ is the on-site energy, and $t$ is the nearest-neighbor hopping parameter. For this analysis, the parameters are specified as $\\varepsilon = 0 \\, \\text{eV}$ and $t = -1 \\, \\text{eV}$. Consequently, the Hamiltonian simplifies to a real, symmetric, tridiagonal matrix with zeros on the main diagonal and values of $-1$ on the first super-diagonal and sub-diagonal. Such a matrix is a specific type of Toeplitz matrix.\n\nThe molecular orbital energies of the finite chain, $E_m(N)$, are the eigenvalues of this matrix $H$. The algorithmic procedure to find these energies and the derived quantities is as follows:\n\n1.  **Hamiltonian Construction**: For each specified chain length $N$ from the set $\\{2, 4, 8, 16\\}$, we construct the corresponding $N \\times N$ matrix $H$.\n\n2.  **Numerical Diagonalization**: We compute the eigenvalues of $H$. Since $H$ is a real symmetric (and therefore Hermitian) matrix, all its eigenvalues are real. We employ a numerically stable algorithm, such as the one implemented in `numpy.linalg.eigvalsh`, which is specifically designed for such matrices and returns the eigenvalues sorted in non-decreasing order. This yields the ordered energy spectrum $E_1(N) \\le E_2(N) \\le \\cdots \\le E_N(N)$.\n\n3.  **Calculation of Derived Quantities**: With the numerically determined eigenvalues, we calculate the six specified quantities for each $N$.\n\n    a.  **Lowest and Highest Energies**: The lowest energy is the first eigenvalue, $E_{\\min}(N) = E_1(N)$, and the highest energy is the last, $E_{\\max}(N) = E_N(N)$.\n\n    b.  **Bandwidth**: The bandwidth of the finite chain is the difference between the highest and lowest energies, $W(N) = E_{\\max}(N) - E_{\\min}(N)$.\n\n    c.  **Deviations from Infinite Chain Edges**: For the corresponding infinite periodic chain, the energy dispersion relation is $E(k) = \\varepsilon + 2t \\cos(ka)$. With $\\varepsilon = 0$ and $t = -1$, this is $E(k) = -2\\cos(ka)$. The band of allowed energies spans from $E_{\\min}^{(\\infty)}$ to $E_{\\max}^{(\\infty)}$.\n        - The maximum energy is $E_{\\max}^{(\\infty)} = \\varepsilon + 2|t| = 0 + 2|-1| = 2 \\, \\text{eV}$.\n        - The minimum energy is $E_{\\min}^{(\\infty)} = \\varepsilon - 2|t| = 0 - 2|-1| = -2 \\, \\text{eV}$.\n        The deviations of the finite-chain band edges from these infinite-chain limits are then:\n        - $D_{\\text{upper}}(N) = |E_{\\max}(N) - E_{\\max}^{(\\infty)}| = |E_{\\max}(N) - 2|$.\n        - $D_{\\text{lower}}(N) = |E_{\\min}(N) - E_{\\min}^{(\\infty)}| = |E_{\\min}(N) - (-2)| = |E_{\\min}(N) + 2|$.\n\n    d.  **Deviation from Exact Open-Chain Formula**: The eigenvalues of this specific tridiagonal Hamiltonian are known analytically:\n        $$\n        E_m(N) = \\varepsilon + 2t \\cos\\left(\\frac{m\\pi}{N+1}\\right)\n        $$\n        For our parameters, this becomes $E_m^{\\text{analytic}}(N) = -2 \\cos\\left(\\frac{m\\pi}{N+1}\\right)$ for $m=1, \\dots, N$. This quantity, $D_{\\text{open}}(N)$, serves as a verification of the numerical accuracy of the eigenvalue computation. We calculate the maximum absolute difference between our numerically computed eigenvalues and these exact analytical values:\n        $$\n        D_{\\text{open}}(N) = \\max_{m \\in \\{1,\\ldots,N\\}} \\left| E_m(N) - E_m^{\\text{analytic}}(N) \\right|\n        $$\n        The analytical eigenvalues are already sorted in increasing order for $m=1, \\dots, N$, matching the order of the eigenvalues returned by the numerical solver. This allows for a direct element-wise comparison. This deviation is expected to be on the order of machine precision.\n\nThis complete procedure is implemented for each value of $N$ in the test suite. The final results are then formatted to six decimal places as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the tight-binding model for a 1D chain of N atoms with open boundary conditions.\n\n    The function iterates through a set of chain lengths N, constructs the\n    Hamiltonian matrix, computes its eigenvalues, and then calculates six\n    derived quantities based on these eigenvalues.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [2, 4, 8, 16]\n\n    # Global parameters for the model\n    epsilon = 0.0  # On-site energy in eV\n    t = -1.0       # Hopping parameter in eV\n\n    # Store results for all test cases\n    all_results = []\n\n    for N in test_cases:\n        # Step 1: Construct the Hamiltonian matrix H\n        # H is a tridiagonal matrix with epsilon on the diagonal and t on the\n        # first off-diagonals. Here, epsilon is 0.\n        diag_elements = np.full(N, epsilon)\n        off_diag_elements = np.full(N - 1, t)\n        # Using np.diag for construction\n        H = np.diag(diag_elements) + np.diag(off_diag_elements, k=1) + np.diag(off_diag_elements, k=-1)\n        \n        # Step 2: Compute eigenvalues (energies E_m(N))\n        # numpy.linalg.eigvalsh is used for Hermitian matrices and returns\n        # sorted real eigenvalues, which is what we need.\n        eigvals = np.linalg.eigvalsh(H)\n\n        # Step 3: Calculate the six required quantities for the current N\n        # 1. Lowest energy E_min(N)\n        E_min_N = eigvals[0]\n        \n        # 2. Highest energy E_max(N)\n        E_max_N = eigvals[-1]\n        \n        # 3. Bandwidth W(N)\n        W_N = E_max_N - E_min_N\n        \n        # Band edges for the infinite chain\n        E_min_inf = epsilon - 2 * abs(t)\n        E_max_inf = epsilon + 2 * abs(t)\n        \n        # 4. Upper-edge deviation D_upper(N)\n        D_upper_N = abs(E_max_N - E_max_inf)\n        \n        # 5. Lower-edge deviation D_lower(N)\n        D_lower_N = abs(E_min_N - E_min_inf)\n        \n        # 6. Maximum deviation from the exact open-chain formula D_open(N)\n        m_values = np.arange(1, N + 1)\n        analytic_eigvals = epsilon + 2 * t * np.cos(m_values * np.pi / (N + 1))\n        \n        # Since t  0 and cos is decreasing on (0, pi), the analytic eigenvalues\n        # are already sorted in increasing order, matching the output of eigvalsh.\n        D_open_N = np.max(np.abs(eigvals - analytic_eigvals))\n\n        # Store the results for this N in a list\n        result_for_N = [E_min_N, E_max_N, W_N, D_upper_N, D_lower_N, D_open_N]\n        all_results.append(result_for_N)\n\n    # Final print statement in the exact required format.\n    # The format is a list of lists, with each number as a string\n    # rounded to six decimal places.\n    sublist_strs = []\n    for sublist in all_results:\n        # Format each number to 6 decimal places\n        formatted_nums = [f\"{x:.6f}\" for x in sublist]\n        # Join numbers with a comma and space, enclose in brackets\n        sublist_strs.append(f\"[{', '.join(formatted_nums)}]\")\n    \n    # Join the sublist strings with a comma and space, enclose in brackets\n    final_output_str = f\"[{', '.join(sublist_strs)}]\"\n    \n    print(final_output_str)\n\nsolve()\n```", "id": "2450997"}]}