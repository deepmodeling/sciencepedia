{"hands_on_practices": [{"introduction": "The study of inhomogeneous equations often begins with tangible, physical systems like mechanical structures. This problem explores the deflection of a supportive beam, a classic scenario governed by the Euler-Bernoulli equation, $E I y^{(4)}(x) = q(x)$. Here, the forcing function $q(x)$ represents the external load, making the equation inhomogeneous. By comparing the beam's response to its own distributed weight versus a concentrated point force, you will develop a concrete understanding of how different forcing terms shape the particular solution for a system. [@problem_id:1905539]", "problem": "A uniform horizontal beam of length $L$ is simply supported at both ends, meaning it rests on pivots at $x=0$ and $x=L$ and is free to rotate at these points. The beam has a constant Young's modulus $E$ and area moment of inertia $I$. An engineer analyzes the vertical deflection of this beam under two different loading conditions.\n\nIn the first scenario (Scenario A), the beam sags under its own weight, which is described by a uniform downward force per unit length, $w_0$. The magnitude of the maximum vertical deflection in this case is denoted by $d_A$.\n\nIn the second scenario (Scenario B), the beam's own weight is considered negligible. Instead, a single concentrated downward force $F$ is applied at the exact midpoint of the beam. The magnitude of the maximum vertical deflection in this case is denoted by $d_B$.\n\nThe total weight of the beam from Scenario A is equal to the magnitude of the concentrated force in Scenario B, i.e., $w_0 L = F$.\n\nCalculate the dimensionless ratio $\\frac{d_A}{d_B}$.", "solution": "Let $y(x)$ be the vertical deflection (downward positive). The governing equation is the Euler-Bernoulli equation, $E I\\, y^{(4)}(x)=q(x)$. For a simply supported beam at $x=0$ and $x=L$, the boundary conditions are zero deflection and zero bending moment at the supports: $y(0)=0$, $y(L)=0$, $y''(0)=0$, and $y''(L)=0$. By symmetry, the maximum deflection occurs at $x=L/2$ in both scenarios. We will find the magnitudes $d_{A}=y(L/2)$ and $d_{B}=y(L/2)$.\n\nScenario A (uniform load $q(x)=w_{0}$):\nWe solve $E I\\, y^{(4)}(x)=w_{0}$ by integrating four times.\n$$\nE I\\, y'''(x)=w_{0}x+C_{1} \\quad \\text{and} \\quad E I\\, y''(x)=\\frac{w_{0}}{2}x^{2}+C_{1}x+C_{2}\n$$\nFrom $y''(0)=0$, we get $C_{2}=0$. From $y''(L)=0$, we get $0=\\frac{w_{0}}{2}L^{2}+C_{1}L$, which gives $C_{1}=-\\frac{w_{0}L}{2}$.\nIntegrating twice more:\n$$\nE I\\, y'(x)=\\frac{w_{0}}{6}x^{3}-\\frac{w_{0}L}{4}x^{2}+C_{3} \\quad \\text{and} \\quad E I\\, y(x)=\\frac{w_{0}}{24}x^{4}-\\frac{w_{0}L}{12}x^{3}+C_{3}x+C_{4}\n$$\nFrom $y(0)=0$, we get $C_{4}=0$. From $y(L)=0$, we find $0=\\frac{w_{0}L^4}{24}-\\frac{w_{0}L^4}{12}+C_{3}L$, which gives $C_{3}=\\frac{w_{0}L^3}{24}$. The deflection is:\n$$\ny(x)=\\frac{w_{0}}{24EI}\\left(x^{4}-2Lx^{3}+L^{3}x\\right)\n$$\nAt $x=L/2$, the maximum deflection is:\n$$\nd_{A}=y\\left(\\frac{L}{2}\\right)=\\frac{w_{0}}{24EI}\\left(\\frac{L^{4}}{16}-2L\\frac{L^3}{8}+L^3\\frac{L}{2}\\right)=\\frac{w_{0}L^4}{24EI}\\left(\\frac{1-4+8}{16}\\right)=\\frac{5 w_{0} L^{4}}{384 E I}\n$$\n\nScenario B (central point load $F$ at $x=L/2$):\nDue to symmetry, we can solve on the half-domain $0 \\le x \\le L/2$. The governing equation is $EI y''(x) = M(x)$, where the bending moment from statics is $M(x) = \\frac{F}{2}x$.\n$$\nEI y''(x) = \\frac{F}{2}x\n$$\nIntegrating gives $EI y'(x) = \\frac{F}{4}x^2 + C_1$. By symmetry, the slope at the beam's center is zero, $y'(L/2) = 0$, so $0 = \\frac{F}{4}(\\frac{L}{2})^2 + C_1$, which gives $C_1 = -\\frac{FL^2}{16}$.\nIntegrating again gives $EI y(x) = \\frac{F}{12}x^3 - \\frac{FL^2}{16}x + C_2$. The deflection at the support is zero, $y(0)=0$, giving $C_2=0$. The midspan deflection is:\n$$\ny\\left(\\frac{L}{2}\\right) = \\frac{1}{EI} \\left( \\frac{F}{12}\\left(\\frac{L}{2}\\right)^3 - \\frac{FL^2}{16}\\left(\\frac{L}{2}\\right) \\right) = \\frac{FL^3}{EI} \\left( \\frac{1}{96} - \\frac{1}{32} \\right) = -\\frac{2FL^3}{96EI} = -\\frac{FL^3}{48EI}\n$$\nThe magnitude of the maximum deflection is $d_{B}=\\frac{F L^{3}}{48 E I}$. (The negative sign is a product of sign conventions for moment and can be disregarded when finding the magnitude of deflection).\n\nForm the ratio using $F=w_{0}L$:\n$$\n\\frac{d_{A}}{d_{B}}=\\frac{\\dfrac{5 w_{0} L^{4}}{384 E I}}{\\dfrac{F L^{3}}{48 E I}}=\\frac{5 w_0 L^4}{384} \\cdot \\frac{48}{F L^3} = \\frac{5 \\cdot 48}{384} \\frac{w_0 L}{F} = \\frac{240}{384} \\cdot 1 = \\frac{5}{8}.\n$$", "answer": "$$\\boxed{\\frac{5}{8}}$$", "id": "1905539"}, {"introduction": "We now extend our analysis from one-dimensional mechanical systems to two-dimensional thermal systems. The steady-state temperature in a conductive material with an internal heat source $Q(x,y)$ is described by the inhomogeneous Poisson equation, $\\nabla^2 T = -Q/k$. This contrasts with the homogeneous Laplace equation, $\\nabla^2 T = 0$, which applies when there are no heat sources. This exercise challenges you to find the temperature distribution on a heated plate, providing valuable practice in solving inhomogeneous partial differential equations and appreciating the role of source terms in establishing thermal equilibrium. [@problem_id:1905491]", "problem": "A thin, square conductive plate with side length $L$ and uniform thermal conductivity $k$ is situated in the $xy$-plane, occupying the region defined by $0 \\le x \\le L$ and $0 \\le y \\le L$. The four edges of the plate are maintained at a constant temperature of $T=0$. The plate is subjected to a non-uniform internal heat source, which generates heat at a rate per unit area given by $Q(x,y) = Q_0 \\sin\\left(\\frac{\\pi x}{L}\\right) \\sin\\left(\\frac{\\pi y}{L}\\right)$, where $Q_0$ is a positive constant representing the peak heat generation rate. Under steady-state conditions, the temperature distribution $T(x,y)$ within the plate is governed by the two-dimensional Poisson equation. Determine the steady-state temperature at the exact center of the plate, $T(L/2, L/2)$. Express your answer as a symbolic expression in terms of $L$, $k$, and $Q_0$.", "solution": "Under steady-state 2D in-plane conduction with an areal heat source, the temperature field satisfies the Poisson equation\n$$\nk \\nabla^{2} T(x,y) = - Q(x,y),\n$$\nwith homogeneous Dirichlet boundary conditions $T(0,y)=T(L,y)=T(x,0)=T(x,L)=0$. The given source is\n$$\nQ(x,y) = Q_{0} \\sin\\!\\left(\\frac{\\pi x}{L}\\right)\\sin\\!\\left(\\frac{\\pi y}{L}\\right).\n$$\nThe eigenfunctions of the Laplacian on $[0,L]\\times[0,L]$ with these boundary conditions are $\\sin\\!\\left(\\frac{m\\pi x}{L}\\right)\\sin\\!\\left(\\frac{n\\pi y}{L}\\right)$ with eigenvalues $-\\frac{(m^{2}+n^{2})\\pi^{2}}{L^{2}}$. Because the source is exactly the $(m,n)=(1,1)$ eigenfunction, we seek a solution of the form\n$$\nT(x,y) = A \\sin\\!\\left(\\frac{\\pi x}{L}\\right)\\sin\\!\\left(\\frac{\\pi y}{L}\\right).\n$$\nCompute the Laplacian:\n$$\n\\nabla^{2} T = \\frac{\\partial^{2} T}{\\partial x^{2}} + \\frac{\\partial^{2} T}{\\partial y^{2}}\n= -\\left(\\frac{\\pi^{2}}{L^{2}}+\\frac{\\pi^{2}}{L^{2}}\\right) A \\sin\\!\\left(\\frac{\\pi x}{L}\\right)\\sin\\!\\left(\\frac{\\pi y}{L}\\right)\n= -\\frac{2\\pi^{2}}{L^{2}} A \\sin\\!\\left(\\frac{\\pi x}{L}\\right)\\sin\\!\\left(\\frac{\\pi y}{L}\\right).\n$$\nSubstitute into the Poisson equation $k \\nabla^{2} T = - Q$:\n$$\nk\\left(-\\frac{2\\pi^{2}}{L^{2}} A \\sin\\!\\left(\\frac{\\pi x}{L}\\right)\\sin\\!\\left(\\frac{\\pi y}{L}\\right)\\right)\n= - Q_{0} \\sin\\!\\left(\\frac{\\pi x}{L}\\right)\\sin\\!\\left(\\frac{\\pi y}{L}\\right).\n$$\nCancel the common sine factor and solve for $A$:\n$$\n- k \\frac{2\\pi^{2}}{L^{2}} A = - Q_{0}\n\\quad\\Longrightarrow\\quad\nA = \\frac{Q_{0} L^{2}}{2 k \\pi^{2}}.\n$$\nTherefore,\n$$\nT(x,y) = \\frac{Q_{0} L^{2}}{2 k \\pi^{2}} \\sin\\!\\left(\\frac{\\pi x}{L}\\right)\\sin\\!\\left(\\frac{\\pi y}{L}\\right).\n$$\nAt the center $(x,y)=\\left(\\frac{L}{2},\\frac{L}{2}\\right)$,\n$$\nT\\!\\left(\\frac{L}{2},\\frac{L}{2}\\right) = \\frac{Q_{0} L^{2}}{2 k \\pi^{2}} \\sin\\!\\left(\\frac{\\pi}{2}\\right)\\sin\\!\\left(\\frac{\\pi}{2}\\right)\n= \\frac{Q_{0} L^{2}}{2 k \\pi^{2}}.\n$$", "answer": "$$\\boxed{\\frac{Q_{0} L^{2}}{2 k \\pi^{2}}}$$", "id": "1905491"}, {"introduction": "This final practice brings the concept of inhomogeneous equations into the modern computational realm by modeling a dynamic system: the wave equation with a moving source, $u_{tt} - c^2 u_{xx} = S(x,t)$. While the homogeneous equation describes freely propagating waves, the source term $S(x,t)$ continuously generates disturbances. This hands-on coding problem allows you to simulate what happens when the source's speed $v_s$ is less than, equal to, or greater than the wave speed $c$, revealing fascinating physical phenomena like the formation of shock waves. It is a powerful demonstration of how inhomogeneous terms drive the dynamic behavior of complex systems. [@problem_id:2407740]", "problem": "Consider the one-dimensional, nondimensionalized scalar wave equation with a moving localized source,\n$$u_{tt}(x,t) - c^2 u_{xx}(x,t) = S(x,t),$$\non a periodic spatial domain of length $L$. The initial conditions are\n$$u(x,0)=0,\\quad u_t(x,0)=0,$$\nand the boundary condition is periodic with period $L$. The source term is specified as a smooth, localized profile that moves at a constant speed:\n$$S(x,t) = A \\exp\\!\\left(-\\frac{d(x,t)^2}{2\\sigma^2}\\right),\\quad d(x,t) = \\left((x - x_s(t) + \\tfrac{L}{2}) \\bmod L\\right) - \\tfrac{L}{2},$$\nwith\n$$x_s(t) = x_0 + v_s t,$$\nwhere $d(x,t)$ is the shortest periodic distance on the ring of length $L$ between the grid point $x$ and the instantaneous source position $x_s(t)$.\n\nYour task is to write a complete, runnable program that numerically solves the above initial-boundary value problem and computes, for each prescribed source speed $v_s$, a scalar diagnostic at a specified final time. The diagnostic for a given case is the spatial root-mean-square (RMS) amplitude of the field at the final time,\n$$\\mathrm{RMS}(T) = \\sqrt{\\frac{1}{N}\\sum_{j=0}^{N-1} u(x_j,T)^2},$$\nwhere the spatial grid is uniform with $N$ points and $x_j = j\\,\\Delta x$, $\\Delta x = L/N$.\n\nUse the following parameter values for all test cases:\n- Wave speed: $c=1.0$.\n- Domain length: $L=10.0$.\n- Number of spatial grid points: $N=1000$.\n- Time step: $\\Delta t = 0.009$.\n- Number of time steps: $n_{\\mathrm{steps}} = 555$ (so the final time is $T = n_{\\mathrm{steps}}\\,\\Delta t = 4.995$).\n- Source amplitude and width: $A=1.0$, $\\sigma = 0.1$.\n- Initial source position: $x_0 = 1.0$.\n\nTest suite (four independent runs differing only by $v_s$):\n1. Subsonic case: $v_s = 0.5\\,c$ (that is, $v_s = 0.5$).\n2. Sonic (boundary) case: $v_s = 1.0\\,c$ (that is, $v_s = 1.0$).\n3. Supersonic case: $v_s = 1.5\\,c$ (that is, $v_s = 1.5$).\n4. Static source edge case: $v_s = 0.0$.\n\nFor each of the four cases, compute the spatial RMS amplitude at $t=T$ as defined above. Your program must produce a single line of output containing these four results as a comma-separated list enclosed in square brackets, in the order listed above, with each value rounded to exactly six decimal places and no additional whitespace. For example, the output format must be\n$$[\\mathrm{rms}_1,\\mathrm{rms}_2,\\mathrm{rms}_3,\\mathrm{rms}_4],$$\nwhere each $\\mathrm{rms}_k$ is a float with exactly six digits after the decimal point.\n\nAll quantities are nondimensional; no physical units are required in the output.", "solution": "The problem is solved by numerically discretizing the wave equation using a second-order accurate finite-difference scheme in both space and time.\n\nThe one-dimensional wave equation is:\n$$ \\frac{\\partial^2 u}{\\partial t^2} - c^2 \\frac{\\partial^2 u}{\\partial x^2} = S(x,t) $$\nWe define a uniform grid with spatial spacing $\\Delta x = L/N$ and temporal spacing $\\Delta t$. Let $u_j^n$ be the numerical approximation of $u(x_j, t_n)$ at grid point $x_j = j\\Delta x$ and time step $t_n = n\\Delta t$. The partial derivatives are approximated using second-order central differences:\n$$ \\frac{\\partial^2 u}{\\partial t^2} \\bigg|_{j,n} \\approx \\frac{u_j^{n+1} - 2u_j^n + u_j^{n-1}}{(\\Delta t)^2} $$\n$$ \\frac{\\partial^2 u}{\\partial x^2} \\bigg|_{j,n} \\approx \\frac{u_{j+1}^n - 2u_j^n + u_{j-1}^n}{(\\Delta x)^2} $$\nSubstituting these approximations into the wave equation and rearranging to solve for the field at the next time step, $u_j^{n+1}$, gives the explicit \"leapfrog\" update rule:\n$$ u_j^{n+1} = 2u_j^n - u_j^{n-1} + \\lambda^2 (u_{j+1}^n - 2u_j^n + u_{j-1}^n) + (\\Delta t)^2 S_j^n $$\nwhere $\\lambda = c \\Delta t / \\Delta x$ is the Courant number. The stability of this scheme requires $\\lambda \\le 1$. The problem's parameters give $\\lambda=0.9$, so the simulation is stable.\n\nThis is a three-level time-stepping scheme, so we need values at two initial time levels, $n=0$ and $n=1$, to begin. The initial condition $u(x,0) = 0$ gives $u_j^0 = 0$ for all $j$. To find $u_j^1$, we use the second initial condition, $u_t(x,0) = 0$, approximated with a central difference at $t=0$:\n$$ \\frac{\\partial u}{\\partial t} \\bigg|_{j,0} \\approx \\frac{u_j^1 - u_j^{-1}}{2\\Delta t} = 0 \\implies u_j^{-1} = u_j^1 $$\nApplying the general update rule at the first time step ($n=0$) and substituting $u_j^0=0$ and $u_j^{-1}=u_j^1$:\n$$ u_j^1 = 2(0) - u_j^1 + \\lambda^2 (0 - 0 + 0) + (\\Delta t)^2 S_j^0 \\implies 2u_j^1 = (\\Delta t)^2 S_j^0 $$\nThis gives the field at the first time step:\n$$ u_j^1 = \\frac{1}{2}(\\Delta t)^2 S(x_j, 0) $$\nThe simulation proceeds by:\n1. Initializing $u_j^0=0$ and calculating $u_j^1$ from the source at $t=0$.\n2. Iterating the main leapfrog update rule from $n=1$ up to $n_{\\mathrm{steps}}-1$. At each step, the source term $S(x_j, t_n)$ is calculated at the current time. The periodic boundary conditions are handled by using modulo arithmetic or array-shifting operations for the indices $j-1$ and $j+1$.\n3. After the final step, the root-mean-square amplitude of the field $u_j^{n_{\\mathrm{steps}}}$ is computed.\nThis process is repeated for each of the four specified source speeds $v_s$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D wave equation with a moving source using a finite difference method.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases_vs = [0.5, 1.0, 1.5, 0.0]\n\n    # Parameter values from the problem statement\n    c = 1.0\n    L = 10.0\n    N = 1000\n    dt = 0.009\n    n_steps = 555\n    A = 1.0\n    sigma = 0.1\n    x0 = 1.0\n\n    # Derived parameters\n    dx = L / N\n    x = np.arange(N) * dx\n    cfl_sq = (c * dt / dx)**2\n\n    results = []\n    \n    for vs in test_cases_vs:\n        # Field initialization\n        # u_past corresponds to u at time t_n-1\n        # u_present corresponds to u at time t_n\n        u_past = np.zeros(N) # u(x, 0)\n\n        # Calculate S(x, 0) to find u(x, dt)\n        t0 = 0.0\n        xs0 = x0 + vs * t0\n        # Periodic distance calculation\n        d0 = np.mod(x - xs0 + L/2.0, L) - L/2.0\n        S0 = A * np.exp(-d0**2 / (2.0 * sigma**2))\n\n        # Calculate u(x, dt) using the special formula for the first step\n        u_present = 0.5 * dt**2 * S0\n\n        # Time-stepping loop\n        # The loop runs from k=1 to n_steps-1 to find u at t_k+1\n        # The final field will be at time t_{n_steps} = n_steps * dt\n        for k in range(1, n_steps):\n            t_k = k * dt\n            xs_k = x0 + vs * t_k\n\n            # Calculate source term S(x, t_k)\n            d_k = np.mod(x - xs_k + L/2.0, L) - L/2.0\n            S_k = A * np.exp(-d_k**2 / (2.0 * sigma**2))\n\n            # Calculate discrete Laplacian of u_present with periodic boundaries\n            # np.roll(u, -1) shifts to the left (u_{j+1})\n            # np.roll(u, 1) shifts to the right (u_{j-1})\n            laplacian_u = np.roll(u_present, -1) - 2 * u_present + np.roll(u_present, 1)\n\n            # Apply the finite difference update rule\n            u_future = (2.0 * u_present - u_past +\n                        cfl_sq * laplacian_u +\n                        dt**2 * S_k)\n            \n            # Update fields for the next iteration\n            u_past, u_present = u_present, u_future\n\n        # After the loop, u_present holds the solution at the final time T\n        # Calculate the root-mean-square amplitude\n        rms = np.sqrt(np.mean(u_present**2))\n        results.append(f\"{rms:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2407740"}]}