{"hands_on_practices": [{"introduction": "In a vacuum, the motion of a projectile under gravity is perfectly symmetric; the time to ascend to its peak is the same as the time to descend. However, the introduction of air resistance fundamentally changes this picture. This first exercise challenges you to use physical reasoning and force analysis, rather than complex mathematics, to explore the asymmetry in vertical motion. By considering how the net force on an object changes throughout its upward journey, you will build a strong, intuitive understanding of how drag affects flight times. [@problem_id:1923869]", "problem": "An object of mass $m$ is launched vertically upwards from the ground ($y=0$) with some initial velocity. The object is subject to a constant downward gravitational force of magnitude $mg$ and an air resistance (drag) force. The drag force is always directed opposite to the object's velocity and its magnitude is given by $F_d = bv^2$, where $b$ is a positive constant and $v$ is the instantaneous speed of the object.\n\nThe object reaches a maximum height $H$ before it starts to fall back down. Let $t_{bottom}$ be the time it takes for the object to travel from the ground to a height of $H/2$. Let $t_{top}$ be the time it takes for the object to travel from the height $H/2$ to its maximum height $H$.\n\nWhich of the following statements correctly describes the relationship between $t_{top}$ and $t_{bottom}$?\n\nA. $t_{top} > t_{bottom}$\n\nB. $t_{top} < t_{bottom}$\n\nC. $t_{top} = t_{bottom}$\n\nD. The relationship depends on the mass $m$ of the object.\n\nE. The relationship cannot be determined without knowing the specific values of $b$ and the initial velocity.", "solution": "Let's analyze the forces acting on the object during its upward motion. Two forces are present: the gravitational force, $F_g = mg$, acting downwards, and the air resistance (drag) force, $F_d = bv^2$, also acting downwards since the object is moving upwards.\n\nThe net force on the object during its ascent is the sum of these two forces:\n$$F_{net, up} = F_g + F_d = mg + bv^2$$\nThis net force is directed downwards, causing the object to decelerate. According to Newton's second law, $F_{net} = ma$, the magnitude of the object's acceleration (or deceleration) during its upward journey is:\n$$a_{up} = \\frac{F_{net, up}}{m} = \\frac{mg + bv^2}{m} = g + \\frac{b}{m}v^2$$\n\nNow, let's consider the two segments of the upward travel:\n1.  **The bottom half:** The object travels from height $y=0$ to $y=H/2$.\n2.  **The top half:** The object travels from height $y=H/2$ to $y=H$.\n\nDuring the entire upward journey, the object's speed $v$ is continuously decreasing. It is fastest at the beginning of its motion and its speed becomes zero at the peak height $H$. This means that the speed of the object at any point in the bottom half of its trajectory is greater than its speed at any point in the top half of its trajectory.\n\nLet $\\bar{v}_{bottom}$ be the average speed of the object while it travels through the bottom half (from $y=0$ to $y=H/2$).\nLet $\\bar{v}_{top}$ be the average speed of the object while it travels through the top half (from $y=H/2$ to $y=H$).\n\nSince the speed is always decreasing on the way up, it must be that the average speed in the first half of the distance is greater than the average speed in the second half of the distance.\n$$\\bar{v}_{bottom} > \\bar{v}_{top}$$\n\nBoth segments of the trajectory cover the same distance, $\\Delta y = H/2$. The time taken to cover a certain distance is related to the average speed over that distance by the approximate relation $t = \\frac{\\text{distance}}{\\text{average speed}}$.\nTherefore, we can compare the times $t_{bottom}$ and $t_{top}$:\n$$t_{bottom} = \\frac{H/2}{\\bar{v}_{bottom}}$$\n$$t_{top} = \\frac{H/2}{\\bar{v}_{top}}$$\n\nSince $\\bar{v}_{bottom} > \\bar{v}_{top}$, the denominator for $t_{bottom}$ is larger than the denominator for $t_{top}$. This implies:\n$$t_{bottom} < t_{top}$$\nor equivalently,\n$$t_{top} > t_{bottom}$$\n\nThe object travels more slowly through the top half of its ascent, so it takes more time to cover that distance compared to the bottom half, where it is traveling faster. This conclusion holds for any positive values of $m$, $b$, and any initial velocity sufficient to reach height $H$. Thus, options D and E are incorrect. Option C would only be true in the absence of air resistance ($b=0$), where the acceleration is constant ($a=g$), leading to a symmetric change in velocity with position.\n\nThe correct relationship is $t_{top} > t_{bottom}$.", "answer": "$$\\boxed{A}$$", "id": "1923869"}, {"introduction": "Having built a qualitative understanding, our next step is to apply rigorous mathematical analysis. This practice focuses on one of the most fundamental concepts in motion with drag: terminal velocity. By solving the differential equation for an object falling from rest under quadratic drag, you will derive an exact analytical expression for the time it takes to reach a fraction of this terminal speed. This exercise sharpens your skills in solving first-order ODEs and provides a concrete quantitative result that is characteristic of this physical regime. [@problem_id:1923884]", "problem": "A small, spherical steel bearing is dropped from rest from a great height into a large tank of a viscous fluid. The bearing experiences a drag force that is proportional to the square of its speed, a regime known as quadratic drag. After a sufficiently long time, the bearing's speed approaches a constant value called the terminal velocity, denoted by $v_t$. Let $g$ be the magnitude of the effective acceleration due to gravity, which accounts for both the gravitational pull and the constant buoyant force from the fluid. Determine the time $t_{1/2}$ it takes for the bearing to reach exactly 50% of its terminal velocity. Express your answer as a closed-form analytic expression in terms of $v_t$ and $g$.", "solution": "Let downward be positive. With quadratic drag opposing motion, the net force on the bearing is\n$$\nm \\frac{dv}{dt} = m g - k v^{2},\n$$\nwhere $k>0$ is a drag coefficient and $g$ is the effective gravitational acceleration (including buoyancy). At terminal velocity $v_{t}$, the acceleration vanishes, so\n$$\n0 = m g - k v_{t}^{2} \\quad \\Rightarrow \\quad \\frac{k}{m} = \\frac{g}{v_{t}^{2}}.\n$$\nSubstituting into the equation of motion gives\n$$\n\\frac{dv}{dt} = g \\left(1 - \\frac{v^{2}}{v_{t}^{2}}\\right).\n$$\nSeparate variables and integrate from $v(0)=0$:\n$$\n\\int_{0}^{v} \\frac{dv'}{1 - \\frac{{v'}^{2}}{v_{t}^{2}}} = \\int_{0}^{t} g \\, dt'.\n$$\nLet $u = v'/v_{t}$, so $dv' = v_{t} \\, du$; then\n$$\nv_{t} \\int_{0}^{v/v_{t}} \\frac{du}{1 - u^{2}} = g t.\n$$\nUsing $\\int \\frac{du}{1 - u^{2}} = \\operatorname{arctanh}(u)$,\n$$\nv_{t} \\, \\operatorname{arctanh}\\!\\left(\\frac{v}{v_{t}}\\right) = g t.\n$$\nThus\n$$\n\\frac{v}{v_{t}} = \\tanh\\!\\left(\\frac{g t}{v_{t}}\\right).\n$$\nTo reach half the terminal velocity, set $v = \\frac{v_{t}}{2}$:\n$$\n\\tanh\\!\\left(\\frac{g t_{1/2}}{v_{t}}\\right) = \\frac{1}{2}\n\\quad \\Rightarrow \\quad\n\\frac{g t_{1/2}}{v_{t}} = \\operatorname{arctanh}\\!\\left(\\frac{1}{2}\\right).\n$$\nUsing $\\operatorname{arctanh}(x) = \\frac{1}{2} \\ln\\!\\left(\\frac{1+x}{1-x}\\right)$, we obtain\n$$\n\\operatorname{arctanh}\\!\\left(\\frac{1}{2}\\right) = \\frac{1}{2} \\ln(3),\n$$\nwhich yields\n$$\nt_{1/2} = \\frac{v_{t}}{2 g} \\ln(3).\n$$", "answer": "$$\\boxed{\\frac{v_{t}}{2 g}\\ln(3)}$$", "id": "1923884"}, {"introduction": "While analytical solutions are powerful, they are often limited to simplified one-dimensional cases. Most realistic projectile problems, especially in two dimensions, require computational methods. This final practice guides you through the process of building a numerical simulation from first principles—Newton's second law—to solve a practical engineering problem. By modeling the trajectory of a cannonball, you will learn how to use numerical integration to tackle complex dynamics that defy simple formulas, a cornerstone of modern computational physics. [@problem_id:2430459]", "problem": "A cannonball of mass $m$ is launched from ground level at initial speed $v_0$ and launch angle $\\theta$ above the horizontal. The motion occurs in a uniform gravitational field of magnitude $g$, with quadratic aerodynamic drag proportional to the square of the speed. The air has density $\\rho$, and the cannonball is modeled as a rigid sphere of radius $r$ with drag coefficient $C_d$ and cross-sectional area $A = \\pi r^2$. The drag force always opposes the instantaneous velocity. A vertical castle wall of height $H$ is located at horizontal distance $D$ from the launch point. The task is to determine, by first principles and numerical simulation, whether the cannonball clears the wall, defined as the projectile height at horizontal position $x = D$ being greater than or equal to $H$ before the projectile impacts the ground.\n\nYour program must:\n- Start from fundamental physical laws (Newton's second law and kinematics definitions) to formulate the equations of motion for the cannonball with quadratic air resistance under uniform gravity.\n- Implement a time-marching numerical integrator to evolve the system state $(x(t), y(t), v_x(t), v_y(t))$ from $t = 0$ until one of the following conditions occurs:\n    1. The horizontal position reaches or exceeds the wall location ($x \\ge D$).\n    2. The projectile hits the ground ($y < 0$).\n    3. A predefined maximum simulation time is exceeded (declare failure to reach the wall).\n- When condition $x \\ge D$ is met, compute the vertical position at $x = D$ by linearly interpolating between the last two time steps that bracket $D$ and compare it to $H$ to decide if the wall is cleared.\n- If the projectile hits the ground before reaching $x = D$, or if the maximum simulation time is reached without attaining $x \\ge D$, declare that the wall is not cleared.\n\nAll quantities must be expressed in International System of Units (SI): lengths in $\\mathrm{m}$, mass in $\\mathrm{kg}$, time in $\\mathrm{s}$, and gravitational acceleration in $\\mathrm{m/s^2}$. Use $g = 9.81\\,\\mathrm{m/s^2}$. Angles $\\theta$ are specified in degrees.\n\nTest suite:\nUse the following five test cases. For each, output a boolean indicating whether the cannonball clears the wall (True if it clears, False otherwise). The parameters for all cases use the same air density $\\rho$ and gravitational acceleration $g$, but other parameters may vary per case.\n\nCommon parameters:\n- $\\rho = 1.225\\,\\mathrm{kg/m^3}$,\n- $g = 9.81\\,\\mathrm{m/s^2}$.\n\nPer-case parameters:\n1. Case 1 (happy path, clears easily):\n   - $m = 5.0\\,\\mathrm{kg}$, $r = 0.06\\,\\mathrm{m}$, $C_d = 0.47$, $v_0 = 200.0\\,\\mathrm{m/s}$, $\\theta = 45.0^\\circ$, $D = 100.0\\,\\mathrm{m}$, $H = 10.0\\,\\mathrm{m}$.\n2. Case 2 (boundary: purely vertical launch, never reaches the wall):\n   - $m = 5.0\\,\\mathrm{kg}$, $r = 0.06\\,\\mathrm{m}$, $C_d = 0.47$, $v_0 = 100.0\\,\\mathrm{m/s}$, $\\theta = 90.0^\\circ$, $D = 50.0\\,\\mathrm{m}$, $H = 5.0\\,\\mathrm{m}$.\n3. Case 3 (boundary: wall at the launch point):\n   - $m = 5.0\\,\\mathrm{kg}$, $r = 0.06\\,\\mathrm{m}$, $C_d = 0.47$, $v_0 = 100.0\\,\\mathrm{m/s}$, $\\theta = 45.0^\\circ$, $D = 0.0\\,\\mathrm{m}$, $H = 1.0\\,\\mathrm{m}$.\n4. Case 4 (low speed, vacuum limit to test ground impact before wall):\n   - $m = 5.0\\,\\mathrm{kg}$, $r = 0.06\\,\\mathrm{m}$, $C_d = 0.0$, $v_0 = 20.0\\,\\mathrm{m/s}$, $\\theta = 10.0^\\circ$, $D = 30.0\\,\\mathrm{m}$, $H = 0.1\\,\\mathrm{m}$.\n5. Case 5 (plausible medieval high-performance shot, clears at range):\n   - $m = 5.0\\,\\mathrm{kg}$, $r = 0.06\\,\\mathrm{m}$, $C_d = 0.47$, $v_0 = 250.0\\,\\mathrm{m/s}$, $\\theta = 45.0^\\circ$, $D = 300.0\\,\\mathrm{m}$, $H = 30.0\\,\\mathrm{m}$.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list of booleans enclosed in square brackets. For example, a valid output with five results is of the form \"[True,False,True,False,True]\". No other text should be printed.\n\nAngle unit requirement:\nAngles $\\theta$ are provided in degrees and must be converted to radians internally for any trigonometric computations.\n\nUnit requirement:\nExpress all internal computations in SI units; comparisons are unitless booleans. The wall clearance decision compares the interpolated height $y(D)$ in $\\mathrm{m}$ to the wall height $H$ in $\\mathrm{m}$.\n\nYour program must be a complete, runnable program that hardcodes the above test suite and prints the single required output line.", "solution": "We begin from Newton's second law and kinematics. Let $(x(t), y(t))$ denote the projectile position, and $(v_x(t), v_y(t))$ its velocity components, with speed $v(t) = \\sqrt{v_x(t)^2 + v_y(t)^2}$. The mass is $m$, gravity has magnitude $g$ directed downward. The drag force for a sphere in a steady flow at moderate Reynolds number is modeled as quadratic in speed, with magnitude $\\frac{1}{2}\\rho C_d A v(t)^2$ and direction opposite the instantaneous velocity. Here $\\rho$ is the air density, $C_d$ is the drag coefficient, and $A = \\pi r^2$ is the cross-sectional area.\n\nBy Newton's second law,\n$$\nm \\frac{d\\mathbf{v}}{dt} = \\mathbf{F}_g + \\mathbf{F}_d,\n$$\nwhere $\\mathbf{F}_g = (0, - m g)$ and $\\mathbf{F}_d = - \\frac{1}{2} \\rho C_d A \\, v \\, \\mathbf{v}$, because $v \\, \\mathbf{v}$ equals $v^2$ in the direction of $\\mathbf{v}$ and the negative sign enforces opposition to motion. In components,\n$$\n\\frac{dv_x}{dt} = - \\frac{\\frac{1}{2} \\rho C_d A}{m} \\, v \\, v_x, \\quad\n\\frac{dv_y}{dt} = - g - \\frac{\\frac{1}{2} \\rho C_d A}{m} \\, v \\, v_y.\n$$\nKinematics provides\n$$\n\\frac{dx}{dt} = v_x, \\quad \\frac{dy}{dt} = v_y.\n$$\n\nInitial conditions at launch ($t=0$) from ground level ($x(0)=0$, $y(0)=0$) are determined by the initial speed $v_0$ and angle $\\theta$ (in degrees, converted to radians $\\theta_\\mathrm{rad}$):\n$$\nv_x(0) = v_0 \\cos(\\theta_\\mathrm{rad}), \\quad v_y(0) = v_0 \\sin(\\theta_\\mathrm{rad}).\n$$\n\nThese coupled, nonlinear, first-order ordinary differential equations have no closed-form solution in general under quadratic drag, so we proceed numerically. A robust choice is the classical fourth-order Runge–Kutta (RK4) method. For a state vector $\\mathbf{s} = (x, y, v_x, v_y)$ and time step $\\Delta t$, define the right-hand side $\\mathbf{f}(\\mathbf{s}) = (v_x, v_y, a_x, a_y)$, where\n$$\na_x = - \\frac{1}{2} \\frac{\\rho C_d A}{m} v v_x, \\quad a_y = - g - \\frac{1}{2} \\frac{\\rho C_d A}{m} v v_y, \\quad v = \\sqrt{v_x^2 + v_y^2}.\n$$\nGiven $\\mathbf{s}_n$ at time $t_n$, RK4 advances to $\\mathbf{s}_{n+1}$ at $t_{n+1} = t_n + \\Delta t$ via\n$$\n\\begin{aligned}\n\\mathbf{k}_1 &= \\mathbf{f}(\\mathbf{s}_n), \\\\\n\\mathbf{k}_2 &= \\mathbf{f}\\left(\\mathbf{s}_n + \\tfrac{1}{2}\\Delta t \\, \\mathbf{k}_1 \\right), \\\\\n\\mathbf{k}_3 &= \\mathbf{f}\\left(\\mathbf{s}_n + \\tfrac{1}{2}\\Delta t \\, \\mathbf{k}_2 \\right), \\\\\n\\mathbf{k}_4 &= \\mathbf{f}\\left(\\mathbf{s}_n + \\Delta t \\, \\mathbf{k}_3 \\right), \\\\\n\\mathbf{s}_{n+1} &= \\mathbf{s}_n + \\frac{\\Delta t}{6} \\left( \\mathbf{k}_1 + 2\\mathbf{k}_2 + 2\\mathbf{k}_3 + \\mathbf{k}_4 \\right).\n\\end{aligned}\n$$\n\nTermination and event handling:\n- We integrate forward in time until one of three conditions is met: (i) the wall is reached or exceeded horizontally ($x \\ge D$), (ii) the projectile impacts the ground ($y < 0$), or (iii) a maximum simulation time $t_{\\max}$ is reached to avoid infinite loops in degenerate cases (e.g., zero horizontal velocity).\n- To evaluate the vertical position at exactly the wall location $x = D$, we perform linear interpolation between the last two integration states that satisfy $x_\\text{prev} < D \\le x_\\text{next}$. Denoting the two bracketing states as $(x_\\text{prev}, y_\\text{prev})$ and $(x_\\text{next}, y_\\text{next})$, with $x_\\text{next} \\ne x_\\text{prev}$, the interpolated wall height is\n$$\ny(D) \\approx y_\\text{prev} + \\frac{D - x_\\text{prev}}{x_\\text{next} - x_\\text{prev}} \\left( y_\\text{next} - y_\\text{prev} \\right).\n$$\n- The wall is cleared if and only if $y(D) \\ge H$ and the projectile has not impacted the ground before reaching $x = D$.\n\nNumerical parameters:\n- We use $g = 9.81\\,\\mathrm{m/s^2}$, $\\rho = 1.225\\,\\mathrm{kg/m^3}$ as specified.\n- A fixed time step $\\Delta t$ such as $\\Delta t = 10^{-3}\\,\\mathrm{s}$ provides a balance between accuracy and computational cost for the distances and speeds in the test suite.\n- The maximum simulation time $t_{\\max}$ can be set to a sufficiently large value (e.g., $t_{\\max} = 200\\,\\mathrm{s}$) to ensure termination.\n\nCorrectness considerations:\n- The RK4 scheme is fourth-order accurate in $\\Delta t$ for smooth right-hand sides. The drag and gravity forces are smooth functions of the state, so the method is appropriate.\n- Linear interpolation in $x$ is justified for small $\\Delta t$ because the state varies smoothly, and the distance between $x_\\text{prev}$ and $x_\\text{next}$ is small.\n\nApplication to the test suite:\nWe now reason qualitatively about each case; the program performs the exact numerical evaluation and comparison.\n\n1. Case $1$: $m = 5.0\\,\\mathrm{kg}$, $r = 0.06\\,\\mathrm{m}$, $C_d = 0.47$, $v_0 = 200.0\\,\\mathrm{m/s}$, $\\theta = 45.0^\\circ$, $D = 100.0\\,\\mathrm{m}$, $H = 10.0\\,\\mathrm{m}$. Even without drag, the height at $x = D$ is approximately large (on the order of $10^2\\,\\mathrm{m}$), so including drag still leaves $y(D) \\gg H$. The program yields True.\n2. Case $2$: $\\theta = 90.0^\\circ$ implies $v_x(0) = 0$. The projectile moves vertically and never reaches $x = D = 50.0\\,\\mathrm{m}$, so it cannot clear the wall. The program yields False.\n3. Case $3$: $D = 0.0\\,\\mathrm{m}$ means we compare the initial height $y(0) = 0$ to $H = 1.0\\,\\mathrm{m}$. Since $0 < 1.0$, the wall is not cleared. The program yields False.\n4. Case $4$: $v_0 = 20.0\\,\\mathrm{m/s}$ and $\\theta = 10.0^\\circ$ in vacuum ($C_d = 0.0$) produce a low, rapidly descending trajectory that impacts the ground before $x$ reaches $D = 30.0\\,\\mathrm{m}$ (as can be verified analytically in the no-drag limit), so the wall is not cleared. The program yields False.\n5. Case $5$: $v_0 = 250.0\\,\\mathrm{m/s}$, $\\theta = 45.0^\\circ$, $D = 300.0\\,\\mathrm{m}$, $H = 30.0\\,\\mathrm{m}$. The projectile reaches $x = 300.0\\,\\mathrm{m}$ in approximately a couple of seconds and remains at a substantial altitude despite drag; thus $y(D) \\ge H$. The program yields True.\n\nTherefore, the expected output list of booleans for the five test cases, in order, is:\n[True, False, False, False, True].\n\nThe accompanying program implements the RK4 integrator, event detection, interpolation at $x = D$, and prints exactly the required output format.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef simulate_clearance(m, r, Cd, rho, v0, theta_deg, D, H, g=9.81, dt=1e-3, t_max=200.0):\n    \"\"\"\n    Simulate a projectile with quadratic drag and determine if it clears a wall.\n\n    Parameters:\n        m (float): mass [kg]\n        r (float): radius [m]\n        Cd (float): drag coefficient [-]\n        rho (float): air density [kg/m^3]\n        v0 (float): initial speed [m/s]\n        theta_deg (float): launch angle [deg]\n        D (float): wall horizontal distance [m]\n        H (float): wall height [m]\n        g (float): gravitational acceleration [m/s^2]\n        dt (float): time step [s]\n        t_max (float): maximum simulation time [s]\n\n    Returns:\n        bool: True if clears (y(D) >= H before ground impact), else False.\n    \"\"\"\n    # Handle trivial D == 0 without integrating\n    if D == 0.0:\n        # Launched from y=0, so cannot clear any positive H\n        return 0.0 >= H\n\n    # Cross-sectional area of sphere\n    A = np.pi * r * r\n\n    # Initial state\n    theta = np.deg2rad(theta_deg)\n    vx = v0 * np.cos(theta)\n    vy = v0 * np.sin(theta)\n    x = 0.0\n    y = 0.0\n    t = 0.0\n\n    # Precompute drag factor\n    drag_coeff_factor = 0.5 * rho * Cd * A / m\n\n    # Keep previous state for interpolation\n    prev_x, prev_y = x, y\n\n    # Integration loop using RK4\n    while t < t_max:\n        if x >= D:\n            break\n        if y < 0.0:\n            # Impacted ground before reaching the wall\n            return False\n\n        # Store current for interpolation after step\n        prev_x, prev_y = x, y\n\n        # Define RHS function\n        def rhs(state):\n            sx, sy, svx, svy = state\n            v = np.hypot(svx, svy)\n            ax = -drag_coeff_factor * v * svx\n            ay = -g - drag_coeff_factor * v * svy\n            return np.array([svx, svy, ax, ay], dtype=float)\n\n        state = np.array([x, y, vx, vy], dtype=float)\n\n        k1 = rhs(state)\n        k2 = rhs(state + 0.5 * dt * k1)\n        k3 = rhs(state + 0.5 * dt * k2)\n        k4 = rhs(state + dt * k3)\n\n        state_next = state + (dt / 6.0) * (k1 + 2*k2 + 2*k3 + k4)\n\n        x, y, vx, vy = state_next\n        t += dt\n\n        # Check if we have crossed or reached the wall this step\n        if x >= D:\n            dx = x - prev_x\n            if dx == 0.0:\n                # No horizontal progress; cannot interpolate meaningfully\n                # Let the loop continue (will hit t_max or ground)\n                continue\n            # Linear interpolation to find y at x = D\n            frac = (D - prev_x) / dx\n            y_at_D = prev_y + frac * (y - prev_y)\n            return y_at_D >= H\n\n    # If loop exits due to time max or other reasons without reaching D, or check at end\n    if x >= D:\n        # If exactly at or beyond D at final step, compute y_at_D by interpolation\n        dx = x - prev_x\n        if dx == 0.0:\n            # Degenerate; treat as not cleared unless y itself is defined at D (unlikely)\n            return y >= H\n        frac = (D - prev_x) / dx\n        y_at_D = prev_y + frac * (y - prev_y)\n        return y_at_D >= H\n\n    # Did not reach the wall\n    return False\n\ndef solve():\n    # Common parameters\n    rho = 1.225  # kg/m^3\n    g = 9.81     # m/s^2\n\n    # Test cases as tuples: (m, r, Cd, rho, v0, theta_deg, D, H)\n    test_cases = [\n        # Case 1: happy path, clears easily\n        (5.0, 0.06, 0.47, rho, 200.0, 45.0, 100.0, 10.0),\n        # Case 2: vertical launch; never reaches the wall\n        (5.0, 0.06, 0.47, rho, 100.0, 90.0, 50.0, 5.0),\n        # Case 3: wall at launch point\n        (5.0, 0.06, 0.47, rho, 100.0, 45.0, 0.0, 1.0),\n        # Case 4: low speed, vacuum; hits ground before reaching D\n        (5.0, 0.06, 0.0,  rho, 20.0,  10.0, 30.0, 0.1),\n        # Case 5: plausible medieval high-performance shot\n        (5.0, 0.06, 0.47, rho, 250.0, 45.0, 300.0, 30.0),\n    ]\n\n    results = []\n    for (m, r, Cd, rho_i, v0, theta_deg, D, H) in test_cases:\n        clears = simulate_clearance(\n            m=m, r=r, Cd=Cd, rho=rho_i, v0=v0,\n            theta_deg=theta_deg, D=D, H=H, g=g, dt=1e-3, t_max=200.0\n        )\n        results.append(clears)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2430459"}]}