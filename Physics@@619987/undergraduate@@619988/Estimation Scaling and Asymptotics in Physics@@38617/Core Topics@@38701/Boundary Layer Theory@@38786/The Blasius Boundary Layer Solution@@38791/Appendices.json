{"hands_on_practices": [{"introduction": "The power of the Blasius solution lies in the similarity variable $\\eta$, which collapses the velocity profile at all points along the plate onto a single, universal curve. This practice provides a concrete exercise in transforming physical coordinates $(x,y)$ into the dimensionless coordinate $\\eta$ [@problem_id:1737452]. By doing so, you will learn to use the universal Blasius function to determine the local fluid velocity at any point within the boundary layer.", "problem": "A smooth, thin, flat plate is placed parallel to a steady, uniform stream of air. The flow creates a laminar boundary layer along the plate's surface. The free-stream velocity of the air, far from the plate, is $U = 2.00 \\, \\text{m/s}$. The kinematic viscosity of the air is $\\nu = 1.50 \\times 10^{-5} \\, \\text{m}^2/\\text{s}$.\n\nThe velocity profile within this boundary layer can be described using the Blasius similarity solution, which relates the dimensionless vertical coordinate $\\eta$ to a dimensionless horizontal velocity component $f'(\\eta) = u/U$, where $u$ is the local horizontal velocity. The similarity variable $\\eta$ is a function of the distance from the leading edge, $x$, and the perpendicular distance from the plate, $y$.\n\nThe relationship between $\\eta$ and $f'(\\eta)$ is given by the Blasius function. For this problem, use the following values derived from the Blasius solution:\n- At $\\eta_1 = 2.00$, the dimensionless velocity is $f'(\\eta_1) = 0.6298$.\n- At $\\eta_2 = 2.20$, the dimensionless velocity is $f'(\\eta_2) = 0.6863$.\n\nAssuming the relationship between $f'(\\eta)$ and $\\eta$ is linear between these two points, calculate the horizontal component of air velocity, $u$, at the physical point $(x, y)$ where $x = 0.400 \\, \\text{m}$ and $y = 3.64 \\, \\text{mm}$.\n\nExpress your final answer for the velocity $u$ in units of m/s, rounded to three significant figures.", "solution": "For a steady laminar boundary layer over a flat plate with free-stream speed $U$ and kinematic viscosity $\\nu$, the Blasius similarity solution gives the relation\n$$\\frac{u}{U} = f'(\\eta),$$\nwith the similarity variable\n$$\\eta = y \\sqrt{\\frac{U}{\\nu x}}.$$\nWe are given $U = 2.00 \\, \\text{m/s}$, $\\nu = 1.50 \\times 10^{-5} \\, \\text{m}^{2}/\\text{s}$, $x = 0.400 \\, \\text{m}$, and $y = 3.64 \\, \\text{mm} = 3.64 \\times 10^{-3} \\, \\text{m}$. First compute $\\eta$:\n$$\\eta = y \\sqrt{\\frac{U}{\\nu x}} = \\left(3.64 \\times 10^{-3}\\right) \\sqrt{\\frac{2.00}{\\left(1.50 \\times 10^{-5}\\right)\\left(0.400\\right)}}.$$\nEvaluate the factor under the square root:\n$$(1.50 \\times 10^{-5})(0.400) = 6.00 \\times 10^{-6}, \\quad \\frac{2.00}{6.00 \\times 10^{-6}} = 3.333333\\ldots \\times 10^{5},$$\nso\n$$\\sqrt{\\frac{U}{\\nu x}} \\approx \\sqrt{3.333333 \\times 10^{5}} \\approx 5.77350269 \\times 10^{2},$$\nand therefore\n$$\\eta \\approx \\left(3.64 \\times 10^{-3}\\right)\\left(5.77350269 \\times 10^{2}\\right) \\approx 2.10155498.$$\nBetween the tabulated values $(\\eta_{1}, f'_{1}) = (2.00, 0.6298)$ and $(\\eta_{2}, f'_{2}) = (2.20, 0.6863)$, assume linear variation:\n$$f'(\\eta) \\approx f'_{1} + \\frac{f'_{2} - f'_{1}}{\\eta_{2} - \\eta_{1}} \\left(\\eta - \\eta_{1}\\right).$$\nCompute the slope and evaluate at $\\eta \\approx 2.10155498$:\n$$\\frac{f'_{2} - f'_{1}}{\\eta_{2} - \\eta_{1}} = \\frac{0.6863 - 0.6298}{2.20 - 2.00} = \\frac{0.0565}{0.20} = 0.2825,$$\n$$f'(\\eta) \\approx 0.6298 + 0.2825 \\left(2.10155498 - 2.00\\right) \\approx 0.6298 + 0.02868928 \\approx 0.65848928.$$\nFinally, the local velocity is\n$$u = U \\, f'(\\eta) \\approx 2.00 \\times 0.65848928 = 1.31697856 \\, \\text{m/s}.$$\nRounded to three significant figures, the velocity is $1.32 \\, \\text{m/s}$.", "answer": "$$\\boxed{1.32}$$", "id": "1737452"}, {"introduction": "The momentum thickness, $\\theta$, is a vital concept that quantifies the deficit in momentum flux within the boundary layer compared to the free stream. This exercise will guide you through expressing this integral measure in terms of the similarity solution, revealing its characteristic scaling with $\\sqrt{\\nu x / U_{\\infty}}$ [@problem_id:1937882]. This practice deepens your understanding of how the presence of a surface affects the overall flow momentum.", "problem": "In the study of fluid dynamics, the Blasius boundary layer solution describes the steady, two-dimensional, laminar flow of an incompressible fluid over a thin, flat plate held parallel to a uniform free-stream velocity $U_\\infty$. A key parameter characterizing the boundary layer is the momentum thickness, $\\theta$, defined by the integral:\n$$ \\theta = \\int_0^\\infty \\frac{u}{U_\\infty} \\left(1 - \\frac{u}{U_\\infty}\\right) dy $$\nwhere $u$ is the fluid velocity component parallel to the plate at a distance $y$ from the plate surface.\n\nThe Blasius solution utilizes a similarity transformation where the velocity profile is expressed in terms of a single dimensionless function $f(\\eta)$ as $\\frac{u(x,y)}{U_\\infty} = f'(\\eta)$. The dimensionless similarity variable $\\eta$ is defined as $\\eta = y \\sqrt{\\frac{U_\\infty}{\\nu x}}$, where $x$ is the distance from the leading edge of the plate and $\\nu$ is the kinematic viscosity of the fluid. The function $f(\\eta)$ is the solution to the Blasius ordinary differential equation with appropriate boundary conditions.\n\nFirst, by performing a change of variables on the defining integral for $\\theta$, show that the momentum thickness can be expressed in the form $\\theta(x) = C \\sqrt{\\frac{\\nu x}{U_\\infty}}$, and determine an expression for the dimensionless constant $C$ as a definite integral involving the Blasius function and its derivatives.\n\nSecond, using this result, calculate the numerical value of the momentum thickness $\\theta$ at a distance of $x = 0.750 \\, \\text{m}$ from the leading edge of the plate. The plate is subjected to a uniform airflow with a free-stream velocity of $U_\\infty = 4.00 \\, \\text{m/s}$. For this problem, use the kinematic viscosity of air as $\\nu = 1.50 \\times 10^{-5} \\, \\text{m}^2/\\text{s}$. A separate analysis using the momentum integral equation shows that the dimensionless constant $C$ is exactly equal to $2f''(0)$, where $f''(0)$ is the value of the second derivative of the Blasius function at the plate surface. A numerical solution of the Blasius equation provides the value $f''(0) \\approx 0.4696$.\n\nExpress your final answer for the momentum thickness in millimeters (mm), rounded to three significant figures.", "solution": "The momentum thickness is defined by\n$$\n\\theta(x)=\\int_{0}^{\\infty}\\frac{u(x,y)}{U_{\\infty}}\\left(1-\\frac{u(x,y)}{U_{\\infty}}\\right)\\,dy.\n$$\nFor the Blasius similarity solution, the streamwise velocity is $\\frac{u(x,y)}{U_{\\infty}}=f'(\\eta)$ with the similarity variable $\\eta=y\\sqrt{\\frac{U_{\\infty}}{\\nu x}}$. Differentiating $\\eta$ with respect to $y$ gives\n$$\n\\frac{d\\eta}{dy}=\\sqrt{\\frac{U_{\\infty}}{\\nu x}}\\quad\\Longrightarrow\\quad dy=\\sqrt{\\frac{\\nu x}{U_{\\infty}}}\\,d\\eta.\n$$\nSubstituting $u/U_{\\infty}=f'(\\eta)$ and the expression for $dy$ into the definition of $\\theta$ yields\n$$\n\\theta(x)=\\int_{0}^{\\infty}f'(\\eta)\\left(1-f'(\\eta)\\right)\\,dy=\\sqrt{\\frac{\\nu x}{U_{\\infty}}}\\int_{0}^{\\infty}f'(\\eta)\\left(1-f'(\\eta)\\right)\\,d\\eta.\n$$\nThus the momentum thickness has the form\n$$\n\\theta(x)=C\\,\\sqrt{\\frac{\\nu x}{U_{\\infty}}},\\qquad C=\\int_{0}^{\\infty}f'(\\eta)\\left(1-f'(\\eta)\\right)\\,d\\eta.\n$$\nUsing the momentum integral equation for a zero-pressure-gradient boundary layer, $d\\theta/dx=C_{f}/2$, together with the Blasius result $C_{f}=2f''(0)/\\sqrt{\\operatorname{Re}_{x}}=2f''(0)\\sqrt{\\frac{\\nu}{U_{\\infty}x}}$, we obtain\n$$\n\\frac{d\\theta}{dx}=\\frac{C}{2}\\sqrt{\\frac{\\nu}{U_{\\infty}x}}=\\frac{C_{f}}{2}=f''(0)\\sqrt{\\frac{\\nu}{U_{\\infty}x}}\n\\;\\;\\Longrightarrow\\;\\; C=2f''(0).\n$$\nFor the numerical evaluation, use $f''(0) \\approx 0.4696$, $x=0.750\\,\\text{m}$, $U_{\\infty}=4.00\\,\\text{m/s}$, and $\\nu=1.50\\times 10^{-5}\\,\\text{m}^{2}/\\text{s}$. Then\n$$\nC=2f''(0) \\approx 2 \\times 0.4696 = 0.9392,\n$$\n$$\n\\frac{\\nu x}{U_{\\infty}}=\\frac{1.50\\times 10^{-5}\\times 0.750}{4.00}=2.8125\\times 10^{-6}\\,\\text{m}^{2},\n$$\n$$\n\\sqrt{\\frac{\\nu x}{U_{\\infty}}}=\\sqrt{2.8125}\\times 10^{-3}\\,\\text{m}\\approx 1.677050983\\times 10^{-3}\\,\\text{m},\n$$\n$$\n\\theta=C\\sqrt{\\frac{\\nu x}{U_{\\infty}}}\\approx 0.9392\\left(1.677050983\\times 10^{-3}\\right)\\,\\text{m} \\approx 1.5750\\times 10^{-3}\\,\\text{m}=1.5750\\,\\text{mm}.\n$$\nRounding to three significant figures gives $\\theta=1.58\\,\\text{mm}$.", "answer": "$$\\boxed{1.58}$$", "id": "1937882"}, {"introduction": "The Blasius equation is a cornerstone of boundary layer theory, but it lacks a simple analytical solution. This advanced computational exercise takes you behind the scenes to demonstrate how the solution is actually found using numerical techniques [@problem_id:2422708]. By implementing a shooting method, you will solve the Blasius boundary value problem and determine the crucial wall-shear parameter $f''(0)$, bridging the gap between analytical theory and modern computational fluid dynamics.", "problem": "Consider the nondimensional ordinary differential equation (ODE) describing the laminar boundary layer over a flat plate (the Blasius equation)\n$$\nf^{\\prime\\prime\\prime}(\\eta) + \\tfrac{1}{2}\\,f(\\eta)\\,f^{\\prime\\prime}(\\eta) = 0,\n$$\nwith boundary conditions\n$$\nf(0)=0,\\quad f^{\\prime}(0)=0,\\quad \\lim_{\\eta\\to\\infty} f^{\\prime}(\\eta)=1.\n$$\nIntroduce the parameter $a=f^{\\prime\\prime}(0)$. For any fixed truncation bound $\\eta_{\\max}>0$, define $f(\\eta;a)$ to be the solution of the initial value problem (IVP)\n$$\nf(0)=0,\\quad f^{\\prime}(0)=0,\\quad f^{\\prime\\prime}(0)=a,\n$$\nand define the far-field boundary mismatch functional\n$$\nR(a;\\eta_{\\max}) = f^{\\prime}(\\eta_{\\max};a) - 1.\n$$\nFor each case in the test suite below, determine a value $a^\\star$ such that the far-field boundary condition is met on the truncated domain within a prescribed tolerance, that is,\n$$\n\\lvert R(a^\\star;\\eta_{\\max}) \\rvert \\le \\varepsilon_{\\mathrm{BC}},\n$$\nwhile numerically solving the IVP to within specified relative and absolute error tolerances.\n\nAll variables are nondimensional; no physical units are required in the answer.\n\nTest suite (each case is specified by $(\\eta_{\\max}, \\varepsilon_{\\mathrm{BC}}, \\varepsilon_{\\mathrm{rel}}, \\varepsilon_{\\mathrm{abs}})$, where $\\varepsilon_{\\mathrm{rel}}$ and $\\varepsilon_{\\mathrm{abs}}$ are the relative and absolute tolerances used by the ODE solver):\n\n- Case A: $(10, 10^{-10}, 10^{-10}, 10^{-12})$\n- Case B: $(4, 10^{-8}, 10^{-10}, 10^{-12})$\n- Case C: $(20, 10^{-10}, 10^{-10}, 10^{-12})$\n\nRequired output: Your program should produce a single line of output containing the three values $a^\\star$ for the cases A, B, and C, respectively, rounded to $6$ decimal places, as a comma-separated list enclosed in square brackets, for example, $\"[0.123456,0.234567,0.345678]\"$.", "solution": "The Blasius boundary layer model is a third-order nonlinear ordinary differential equation (ODE) for the streamfunction similarity variable $f(\\eta)$. The boundary conditions specify $f(0)=0$ (no slip), $f^{\\prime}(0)=0$ (no penetration), and $f^{\\prime}(\\eta)\\to 1$ as $\\eta\\to\\infty$ (free-stream matching). The far-field condition introduces a nonlocal constraint that is not directly prescribed at the initial point $\\eta=0$.\n\nTo pose the problem as an initial value problem (IVP) parameterized by a single unknown, introduce $a=f^{\\prime\\prime}(0)$ and consider the IVP\n$$\nf(0)=0,\\quad f^{\\prime}(0)=0,\\quad f^{\\prime\\prime}(0)=a.\n$$\nFor any given $a$, the IVP can be solved numerically on a finite interval $[0,\\eta_{\\max}]$. The far-field boundary condition at infinity is enforced approximately by demanding that $f^{\\prime}(\\eta_{\\max};a)$ be sufficiently close to $1$, which defines the residual (or mismatch) function\n$$\nR(a;\\eta_{\\max}) = f^{\\prime}(\\eta_{\\max};a) - 1.\n$$\nThe target is to find $a^\\star$ such that $\\lvert R(a^\\star;\\eta_{\\max})\\rvert \\le \\varepsilon_{\\mathrm{BC}}$.\n\nTo integrate the third-order ODE, rewrite it as a first-order system for the vector $y(\\eta) = \\bigl(f(\\eta),\\, f^{\\prime}(\\eta),\\, f^{\\prime\\prime}(\\eta)\\bigr)$:\n$$\n\\begin{aligned}\ny_1^{\\prime}(\\eta) &= y_2(\\eta),\\\\\ny_2^{\\prime}(\\eta) &= y_3(\\eta),\\\\\ny_3^{\\prime}(\\eta) &= -\\tfrac{1}{2}\\,y_1(\\eta)\\,y_3(\\eta).\n\\end{aligned}\n$$\nThe initial conditions at $\\eta=0$ are $y_1(0)=0$, $y_2(0)=0$, and $y_3(0)=a$. A standard adaptive-step integrator such as a Runge–Kutta method can solve this IVP to within specified relative and absolute tolerances, denoted $\\varepsilon_{\\mathrm{rel}}$ and $\\varepsilon_{\\mathrm{abs}}$.\n\nDefine the residual evaluation procedure as follows: for any trial $a$, solve the IVP on $[0,\\eta_{\\max}]$ with the given tolerances $(\\varepsilon_{\\mathrm{rel}},\\varepsilon_{\\mathrm{abs}})$ and compute $R(a;\\eta_{\\max})=y_2(\\eta_{\\max})-1$. The function $R(a;\\eta_{\\max})$ is continuous in $a$ due to the continuous dependence of ODE solutions on initial data. The desired $a^\\star$ is a root of $R(a;\\eta_{\\max})$ on the real line.\n\nTo locate $a^\\star$, use an open root-finding method that does not require bracketing, such as the secant method. Starting from two distinct initial guesses $a_0$ and $a_1$, iterate\n$$\na_{k+1} = a_k - R(a_k;\\eta_{\\max})\\,\\frac{a_k-a_{k-1}}{R(a_k;\\eta_{\\max})-R(a_{k-1};\\eta_{\\max})},\n$$\nuntil either $\\lvert R(a_k;\\eta_{\\max})\\rvert \\le \\varepsilon_{\\mathrm{BC}}$ or the change $\\lvert a_k-a_{k-1}\\rvert$ is sufficiently small. Each evaluation of $R$ requires one IVP solve. Reasonable starting values are $a_0=0.3$ and $a_1=0.6$, which straddle the classical value. The procedure is repeated for each test case with its specified $\\eta_{\\max}$ and tolerances.\n\nAs $\\eta_{\\max}$ increases and the ODE solver tolerances are tightened, the computed $a^\\star$ approaches the classical Blasius similarity value $f''(0) \\approx 0.469600$. For the test suite:\n- For $\\eta_{\\max}=10$, $\\lvert R \\rvert \\le 10^{-10}$, and tight IVP tolerances, $a^\\star$ is expected to be very close to $0.469600$.\n- For $\\eta_{\\max}=4$, the finite truncation leads to a systematic bias because $f'(\\eta)$ has not fully relaxed to $1$ by $\\eta=4$, so the computed $a^\\star$ differs more noticeably from the classical value while still satisfying $\\lvert R \\rvert \\le 10^{-8}$ at $\\eta_{\\max}$.\n- For $\\eta_{\\max}=20$, the truncation error is very small and the result agrees with the classical value to more digits.\n\nThe program implements the residual evaluation via the first-order system and applies the secant method with safeguards and stopping conditions conforming to the specified tolerances. It reports the three values $a^\\star$ rounded to $6$ decimal places in the required single-line list format.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef blasius_system(eta, y):\n    \"\"\"\n    First-order system for the Blasius ODE:\n        y[0] = f\n        y[1] = f'\n        y[2] = f''\n    Equations:\n        f'   = y[1]\n        f''  = y[2]\n        f''' = -0.5 * f * f''\n    \"\"\"\n    f, fp, fpp = y\n    return np.array([fp, fpp, -0.5 * f * fpp])\n\ndef residual(a, eta_max, rtol, atol):\n    \"\"\"\n    Compute the boundary mismatch residual R(a; eta_max) = f'(eta_max; a) - 1\n    by integrating the Blasius IVP with initial conditions:\n        f(0)=0, f'(0)=0, f''(0)=a\n    \"\"\"\n    y0 = np.array([0.0, 0.0, float(a)])\n    # Integrate to eta_max; request value at endpoint\n    sol = solve_ivp(\n        blasius_system,\n        t_span=(0.0, float(eta_max)),\n        y0=y0,\n        method=\"RK45\",\n        t_eval=[float(eta_max)],\n        rtol=float(rtol),\n        atol=float(atol),\n        vectorized=False,\n        dense_output=False,\n        max_step=np.inf\n    )\n    if not sol.success:\n        # If integration fails, raise an exception to signal the caller\n        raise RuntimeError(f\"IVP solver failed: {sol.message}\")\n    fp_eta_max = sol.y[1, -1]\n    return fp_eta_max - 1.0\n\ndef secant(find_residual, a0, a1, bc_tol, max_iter, eta_max, rtol, atol):\n    \"\"\"\n    Secant method to solve find_residual(a) = 0 with open iterations.\n    Stops when |R(a)| <= bc_tol or when updates become sufficiently small.\n    \"\"\"\n    # Evaluate initial residuals\n    r0 = find_residual(a0, eta_max, rtol, atol)\n    r1 = find_residual(a1, eta_max, rtol, atol)\n\n    # If either initial guess already satisfies the boundary condition\n    if abs(r0) <= bc_tol:\n        return a0\n    if abs(r1) <= bc_tol:\n        return a1\n\n    # Machine epsilon scaled threshold for tiny denominator\n    eps = np.finfo(float).eps\n    for _ in range(max_iter):\n        denom = (r1 - r0)\n        # Guard against near-division by zero\n        if abs(denom) < 10.0 * eps * max(1.0, abs(r1), abs(r0)):\n            # Fallback: small perturbation to a1\n            a1 = a1 + (1e-6 if a1 == 0 else 1e-6 * abs(a1))\n            r1 = find_residual(a1, eta_max, rtol, atol)\n            denom = (r1 - r0)\n            if abs(denom) < 10.0 * eps * max(1.0, abs(r1), abs(r0)):\n                # As a last resort, return the better of the two guesses\n                return a1 if abs(r1) < abs(r0) else a0\n\n        # Secant update\n        a2 = a1 - r1 * (a1 - a0) / denom\n\n        # Evaluate residual at new iterate\n        r2 = find_residual(a2, eta_max, rtol, atol)\n\n        # Check convergence by residual\n        if abs(r2) <= bc_tol:\n            return a2\n\n        # Check convergence by parameter change\n        if abs(a2 - a1) <= 10.0 * eps * max(1.0, abs(a2), abs(a1)):\n            return a2\n\n        # Prepare next iteration\n        a0, r0 = a1, r1\n        a1, r1 = a2, r2\n\n    # If max_iter reached, return the latest estimate\n    return a1\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each tuple: (eta_max, bc_tol, rtol, atol)\n    test_cases = [\n        (10.0, 1e-10, 1e-10, 1e-12),  # Case A\n        (4.0, 1e-8, 1e-10, 1e-12),    # Case B\n        (20.0, 1e-10, 1e-10, 1e-12),  # Case C\n    ]\n\n    # Secant initial guesses (chosen to straddle the classical value ~0.4696)\n    a_init0 = 0.3\n    a_init1 = 0.6\n    max_iter = 50\n\n    results = []\n    for eta_max, bc_tol, rtol, atol in test_cases:\n        try:\n            a_star = secant(\n                find_residual=residual,\n                a0=a_init0,\n                a1=a_init1,\n                bc_tol=bc_tol,\n                max_iter=max_iter,\n                eta_max=eta_max,\n                rtol=rtol,\n                atol=atol\n            )\n        except RuntimeError:\n            # In the unlikely event of solver failure, append NaN\n            a_star = float(\"nan\")\n\n        # Round to 6 decimal places for output\n        results.append(f\"{a_star:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2422708"}]}