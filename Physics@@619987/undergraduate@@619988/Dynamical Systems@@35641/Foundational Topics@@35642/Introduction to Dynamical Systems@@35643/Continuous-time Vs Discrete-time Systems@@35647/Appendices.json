{"hands_on_practices": [{"introduction": "Many real-world phenomena, like population growth, are naturally described by continuous-time differential equations. However, to simulate these systems on a computer, we must translate them into a language of discrete steps. This first practice [@problem_id:1669660] introduces the most fundamental technique for this translation: the forward Euler method. By working through this problem, you will learn how to convert a simple continuous model into a discrete-time difference equation, a foundational skill for all computational modeling.", "problem": "A computer scientist is developing a simple Artificial Life (A-Life) simulation. In this simulation, the population of a self-replicating digital organism, represented by $P(t)$ at a continuous time $t$, is governed by the differential equation $\\frac{dP}{dt} = rP$, where $r$ is a constant positive parameter representing the net growth rate.\n\nThe simulation's engine cannot model the system continuously. Instead, it updates the world in discrete time steps of a fixed duration $h$. The population at time step $n$ is denoted by $P_n$. To calculate the population at the next time step, $P_{n+1}$, the engine uses a simple approximation: it assumes that the rate of population change over the entire interval from time $t_n$ to $t_{n+1} = t_n + h$ is constant and equal to the rate calculated at the beginning of the interval, $t_n$.\n\nBased on this discrete update rule, derive an expression for the population $P_{n+1}$ in terms of $P_n$, the growth rate $r$, and the step size $h$.", "solution": "We are given the continuous model $\\frac{dP}{dt}=rP$ with constant $r>0$, and the engine updates in discrete steps of size $h$, with $t_{n+1}=t_{n}+h$ and the approximation that the rate of change is constant over the interval $\\left[t_{n},t_{n+1}\\right]$ and equal to its value at $t_{n}$. This means we approximate\n$$\n\\frac{dP}{dt}\\bigg|_{t\\in[t_{n},t_{n+1}]} \\approx \\frac{dP}{dt}\\bigg|_{t=t_{n}}=rP(t_{n})=rP_{n}.\n$$\nUsing the fundamental theorem of calculus,\n$$\nP_{n+1}-P_{n}=\\int_{t_{n}}^{t_{n+1}}\\frac{dP}{dt}\\,dt \\approx \\int_{t_{n}}^{t_{n+1}} rP_{n}\\,dt = rP_{n}\\,(t_{n+1}-t_{n})=rP_{n}\\,h.\n$$\nRearranging gives the discrete update rule\n$$\nP_{n+1}=P_{n}+hrP_{n}=(1+rh)P_{n}.\n$$\nThis is the forward Euler update derived from the stated constant-slope approximation.", "answer": "$$\\boxed{P_{n+1}=(1+rh)P_{n}}$$", "id": "1669660"}, {"introduction": "While discretization allows us to simulate continuous systems, it comes with important caveats. An approximation is only useful if it preserves the essential qualitative behavior of the original system, such as stability. This exercise [@problem_id:1669632] explores the crucial concept of numerical stability. Using the inherently stable process of radioactive decay, you will discover that the choice of the discrete time step $h$ is not arbitrary and can determine whether your simulation accurately reflects reality or produces non-physical, explosive results.", "problem": "The decay of a population of radioactive nuclei is modeled by the first-order linear differential equation:\n$$ \\frac{dN}{dt} = -\\lambda N(t) $$\nwhere $N(t)$ represents the number of undecayed nuclei at time $t$, and $\\lambda$ is the positive decay constant. This continuous-time system is inherently stable, as the population $N(t)$ exponentially decays to zero.\n\nA numerical simulation of this process can be implemented using a discrete-time approximation. Applying the forward Euler method with a uniform time step $h > 0$, the continuous differential equation is transformed into a discrete-time update rule of the form $N_{k+1} = G N_k$, where $N_k$ approximates $N(kh)$ and $G$ is a factor that depends on $\\lambda$ and $h$.\n\nFor the numerical simulation to be stable (i.e., for the simulated population $N_k$ to decay towards zero and not grow unboundedly), the time step $h$ must be chosen appropriately. If $h$ is too large, the simulation becomes unstable.\n\nDetermine the maximum value of the time step, $h_{max}$, for which this forward Euler simulation of radioactive decay remains stable. Express your answer as a symbolic expression in terms of the decay constant $\\lambda$.", "solution": "Start with the linear ODE $ \\frac{dN}{dt} = -\\lambda N(t)$, with $\\lambda > 0$. Applying the forward Euler method with step size $h>0$ gives the discrete update\n$$\nN_{k+1} = N_{k} + h\\left(-\\lambda N_{k}\\right) = \\left(1 - \\lambda h\\right) N_{k}.\n$$\nThus the amplification factor is $G = 1 - \\lambda h$, and the recurrence is $N_{k+1} = G N_{k}$. The general solution is $N_{k} = G^{k} N_{0}$. For the numerical simulation to be stable in the sense that $N_{k} \\to 0$ as $k \\to \\infty$, it is necessary and sufficient that\n$$\n|G| < 1.\n$$\nSubstituting $G = 1 - \\lambda h$ yields\n$$\n|1 - \\lambda h| < 1.\n$$\nThis double inequality is equivalent to\n$$\n-1 < 1 - \\lambda h < 1.\n$$\nSubtracting $1$ from all parts gives\n$$\n-2 < -\\lambda h < 0.\n$$\nSince $\\lambda > 0$, dividing by $-\\lambda$ reverses the inequalities, yielding\n$$\n0 < h < \\frac{2}{\\lambda}.\n$$\nTherefore, the largest admissible time step for which the forward Euler method remains stable is\n$$\nh_{\\text{max}} = \\frac{2}{\\lambda},\n$$\nnoting that equality would give $|G|=1$ and no decay, so the stability condition requires $h<\\frac{2}{\\lambda}$, with $\\frac{2}{\\lambda}$ as the supremum.", "answer": "$$\\boxed{\\frac{2}{\\lambda}}$$", "id": "1669632"}, {"introduction": "The principles of discretization extend readily to more complex and realistic scenarios, many of which are described by second-order differential equations like Newton's second law. The standard approach involves first converting the single second-order equation into an equivalent system of two first-order equations. This problem [@problem_id:1669637] guides you through this essential workflow, applying it to the classic physical model of a damped, non-linear pendulum to prepare it for computer simulation.", "problem": "A computational physicist is developing a simulation for a damped, non-linear pendulum. The pendulum's motion is described by the continuous-time differential equation:\n$$\n\\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + k \\sin(\\theta) = 0\n$$\nwhere $\\theta(t)$ is the angle of the pendulum from the vertical at time $t$, $b$ is a positive damping coefficient, and $k$ is a positive constant related to gravity and the pendulum's length.\n\nTo implement this model numerically, the physicist needs to convert the continuous equation into a set of discrete-time update rules. The state of the system at a discrete time step $n$ is represented by the pair $(\\theta_n, \\omega_n)$, where $\\theta_n$ is the angle and $\\omega_n$ is the angular velocity. The simulation advances in fixed time increments of duration $\\Delta t$.\n\nUsing the first-order forward difference approximation for the time derivatives, where a derivative $\\frac{dy}{dt}$ at time step $n$ is approximated as $\\frac{y_{n+1} - y_n}{\\Delta t}$, derive the update rules for the system. Find the expressions for the angle $\\theta_{n+1}$ and angular velocity $\\omega_{n+1}$ at time step $n+1$. The expressions should be in terms of the state variables at step $n$ (i.e., $\\theta_n$ and $\\omega_n$), the time step $\\Delta t$, and the system parameters $b$ and $k$.\n\nProvide the resulting pair of expressions $(\\theta_{n+1}, \\omega_{n+1})$ as your final answer.", "solution": "We start from the continuous-time second-order equation\n$$\n\\frac{d^{2}\\theta}{dt^{2}} + b \\frac{d\\theta}{dt} + k \\sin(\\theta) = 0.\n$$\nIntroduce the angular velocity $\\omega(t)$ defined by\n$$\n\\omega(t) = \\frac{d\\theta}{dt}.\n$$\nThis converts the second-order equation into the first-order system\n$$\n\\frac{d\\theta}{dt} = \\omega, \\qquad \\frac{d\\omega}{dt} = -b\\,\\omega - k \\sin(\\theta).\n$$\nUsing the first-order forward difference approximation at time step $n$,\n$$\n\\left.\\frac{dy}{dt}\\right|_{t_{n}} \\approx \\frac{y_{n+1} - y_{n}}{\\Delta t},\n$$\nwe discretize each equation as follows.\n\nFor the angle update, apply the forward difference to $\\frac{d\\theta}{dt} = \\omega$:\n$$\n\\frac{\\theta_{n+1} - \\theta_{n}}{\\Delta t} = \\omega_{n}\n\\;\\;\\Rightarrow\\;\\;\n\\theta_{n+1} = \\theta_{n} + \\Delta t\\,\\omega_{n}.\n$$\n\nFor the angular velocity update, apply the forward difference to $\\frac{d\\omega}{dt} = -b\\,\\omega - k \\sin(\\theta)$:\n$$\n\\frac{\\omega_{n+1} - \\omega_{n}}{\\Delta t} = -b\\,\\omega_{n} - k \\sin(\\theta_{n})\n\\;\\;\\Rightarrow\\;\\;\n\\omega_{n+1} = \\omega_{n} - \\Delta t\\left(b\\,\\omega_{n} + k \\sin(\\theta_{n})\\right).\n$$\n\nThus, the explicit forward-Euler update rules advancing $(\\theta_{n},\\omega_{n})$ to $(\\theta_{n+1},\\omega_{n+1})$ in a time step $\\Delta t$ are\n$$\n\\theta_{n+1} = \\theta_{n} + \\Delta t\\,\\omega_{n}, \\qquad\n\\omega_{n+1} = \\omega_{n} - \\Delta t\\left(b\\,\\omega_{n} + k \\sin(\\theta_{n})\\right).\n$$", "answer": "$$\\boxed{\\begin{pmatrix}\\theta_{n+1} = \\theta_{n} + \\Delta t\\,\\omega_{n} & \\omega_{n+1} = \\omega_{n} - \\Delta t\\left(b\\,\\omega_{n} + k \\sin(\\theta_{n})\\right)\\end{pmatrix}}$$", "id": "1669637"}]}