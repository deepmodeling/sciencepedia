{"hands_on_practices": [{"introduction": "Before we can explore the complex patterns cellular automata can create, we must first understand their fundamental building blocks. This exercise grounds us in the very definition of a \"rule\" in a cellular automaton. By calculating the total number of possible rules for a simple one-dimensional system, you will develop a concrete grasp of the combinatorial nature of the CA rule space and appreciate the vast number of potential dynamics available for study. [@problem_id:1421600]", "problem": "A systems biologist is modeling the propagation of a signal along a one-dimensional chain of biological cells. The system is simplified as a one-dimensional Cellular Automaton (CA), where each cell in a linear array can exist in one of two discrete states: 'active' or 'quiescent'. The state of any given cell at the next time step, $t+1$, is determined by a deterministic rule that depends on its own current state and the current states of its immediate left and right neighbors at time $t$. A \"rule\" for this system is defined as a complete lookup table that specifies the next state of the central cell for every single possible configuration of its three-cell neighborhood (left neighbor, central cell, right neighbor).\n\nCalculate the total number of unique, complete, and deterministic rules that can possibly be defined for this system.", "solution": "Each cell has two possible states, so the alphabet of states is the set $S=\\{0,1\\}$. The neighborhood of the central cell consists of the left neighbor, the central cell, and the right neighbor, which is an ordered triple in $S^{3}$. The number of distinct neighborhood configurations is therefore\n$$\n|S^{3}|=|S|^{3}=2^{3}.\n$$\nA complete deterministic rule assigns to each neighborhood configuration a unique next state in $S$. Thus a rule is a function\n$$\nf: S^{3}\\to S.\n$$\nThe number of such functions equals the number of ways to choose an output in $S$ for each of the $2^{3}$ inputs, which is\n$$\n|S|^{|S^{3}|}=2^{2^{3}}=2^{8}.\n$$\nEvaluating the exponent gives\n$$\n2^{8}=256.\n$$\nTherefore, the total number of unique, complete, deterministic rules is $256$.", "answer": "$$\\boxed{256}$$", "id": "1421600"}, {"introduction": "Cellular automata are not just objects of mathematical curiosity; they are computational tools that can be designed to perform specific tasks. This practice shifts our perspective from analyzing existing rules to engineering a new one based on a desired behavior. You will learn how to translate a functional requirement—in this case, a simple noise filter—into the precise logic of a CA lookup table and express it using the standard Wolfram code notation, a key skill for practical CA modeling. [@problem_id:1666390]", "problem": "An elementary Cellular Automaton (CA) is a simple computational model consisting of a one-dimensional grid of cells. Each cell can be in one of two states: 0 (off) or 1 (on). The system evolves in discrete time steps. The state of a cell at the next time step, $t+1$, is determined by its own state and the states of its immediate left and right neighbors at the current time step, $t$. This group of three cells is called the neighborhood.\n\nA rule for an elementary CA is defined by specifying the output state (0 or 1) for each of the $2^3 = 8$ possible neighborhood configurations. By convention (known as the Wolfram code), these 8 neighborhoods are ordered from left to right as `111`, `110`, `101`, `100`, `011`, `010`, `001`, `000`. The sequence of 8 output states corresponding to this ordering forms an 8-bit binary number. The decimal value of this binary number is the rule's designation.\n\nYou are tasked with designing a special elementary CA that acts as a simple noise filter. The filter's behavior is defined as follows: A cell that is in state '1' at time $t$ but is surrounded by neighbors that are both in state '0' at time $t$ should be changed to state '0' at time $t+1$. For all other conditions, the central cell's state at time $t+1$ should be the same as its state at time $t$.\n\nWhat is the Wolfram code number for this noise-filtering rule?", "solution": "Let the neighborhood at time $t$ be $(x_{i-1}(t), x_i(t), x_{i+1}(t)) \\in \\{0,1\\}^3$. The rule described is:\n- If the center is $1$ and both neighbors are $0$, set the next state to $0$: $f(0,1,0)=0$.\n- Otherwise, leave the center unchanged: $f(l,c,r)=c$ for all other $(l,c,r)$.\n\nEvaluate $f$ on the eight neighborhoods in Wolfram order `111`, `110`, `101`, `100`, `011`, `010`, `001`, `000`:\n- $111$: center $1$, neighbors not both $0$ $\\Rightarrow f=1$.\n- $110$: center $1$, neighbors not both $0$ $\\Rightarrow f=1$.\n- $101$: center $0$ $\\Rightarrow f=0$.\n- $100$: center $0$ $\\Rightarrow f=0$.\n- $011$: center $1$, neighbors not both $0$ $\\Rightarrow f=1$.\n- $010$: center $1$, neighbors both $0$ $\\Rightarrow f=0$.\n- $001$: center $0$ $\\Rightarrow f=0$.\n- $000$: center $0$ $\\Rightarrow f=0$.\n\nThus the output bit string in Wolfram order is $b_7\\ldots b_0 = 11001000$, where $b_7$ corresponds to $111$ and $b_0$ to $000$. The Wolfram code number $R$ is the decimal value\n$$\n\\begin{aligned}\nR &= \\sum_{k=0}^{7} b_k 2^k \\\\\n&= b_7 2^7 + b_6 2^6 + b_5 2^5 + b_4 2^4 + b_3 2^3 + b_2 2^2 + b_1 2^1 + b_0 2^0 \\\\\n&= 1\\cdot 2^7 + 1\\cdot 2^6 + 0\\cdot 2^5 + 0\\cdot 2^4 + 1\\cdot 2^3 + 0\\cdot 2^2 + 0\\cdot 2^1 + 0\\cdot 2^0.\n\\end{aligned}\n$$\nTherefore,\n$$\nR=128+64+8=200.\n$$\nThe Wolfram code for the described rule is $200$.", "answer": "$$\\boxed{200}$$", "id": "1666390"}, {"introduction": "One of the most fascinating aspects of cellular automata is their ability to generate profound complexity from extremely simple local interactions. This exercise invites you to witness this phenomenon firsthand by exploring the evolution of the famous Rule 90. Starting from a single active cell, you will simulate the growth of a pattern that reveals a deep connection to number theory and fractals, a classic example of emergent behavior that highlights why CAs are powerful models for complex systems. [@problem_id:1421609]", "problem": "In a simplified model of pattern formation in a linear chain of biological cells, each cell can be in one of two states: 'active' (represented by 1) or 'inactive' (represented by 0). The state of the cells evolves in discrete time steps (generations). The state of a cell at position $i$ and time $t+1$, denoted $c_i(t+1)$, is determined by the states of its immediate left and right neighbors at time $t$. The update rule is given by the exclusive OR (XOR) operation:\n$$c_i(t+1) = c_{i-1}(t) \\oplus c_{i+1}(t)$$\nwhere $a \\oplus b$ represents $(a+b) \\pmod 2$. This means a cell becomes active if and only if exactly one of its two neighbors was active in the previous generation.\n\nConsider a system that starts at generation $t=0$ with a single active cell at position $i=0$ on an infinitely long chain of otherwise inactive cells. All cells for $i \\neq 0$ are inactive at $t=0$.\n\nCalculate the cumulative total number of active cells from generation $t=0$ to $t=7$, inclusive. This is the sum of the number of active cells in each generation from $t=0$ through $t=7$.", "solution": "We work over the field $\\mathbb{F}_{2}$ so that XOR is addition modulo $2$. The update rule is linear:\n$$\nc_{i}(t+1)=c_{i-1}(t)+c_{i+1}(t)\\quad\\text{in }\\mathbb{F}_{2}.\n$$\nWith the initial condition $c_{0}(0)=1$ and $c_{i}(0)=0$ for $i\\neq 0$, one can prove by induction on $t$ that\n$$\nc_{i}(t)=\\sum_{k=0}^{t}\\binom{t}{k}\\,c_{i+t-2k}(0)\\quad\\text{in }\\mathbb{F}_{2}.\n$$\nThe base case $t=0$ is immediate. For the induction step,\n$$\n\\begin{aligned}\nc_{i}(t+1)&=c_{i-1}(t)+c_{i+1}(t)\\\\\n&=\\sum_{k=0}^{t}\\binom{t}{k}\\,c_{i-1+t-2k}(0)+\\sum_{k=0}^{t}\\binom{t}{k}\\,c_{i+1+t-2k}(0)\\\\\n&=\\sum_{k=0}^{t+1}\\left(\\binom{t}{k}+\\binom{t}{k-1}\\right)c_{i+(t+1)-2k}(0)\\\\\n&=\\sum_{k=0}^{t+1}\\binom{t+1}{k}\\,c_{i+(t+1)-2k}(0),\n\\end{aligned}\n$$\nusing the convention that $\\binom{t}{k}=0$ for $k<0$ or $k>t$, and Pascal’s identity. Since only $c_{0}(0)=1$ is nonzero, this reduces to\n$$\nc_{i}(t)\\equiv\\begin{cases}\n\\binom{t}{m}\\pmod 2,&\\text{if }m=\\frac{t+i}{2}\\in\\mathbb{Z},\\\\\n0,&\\text{otherwise}.\n\\end{cases}\n$$\nThus the number of active cells at time $t$ equals the number of odd binomial coefficients in row $t$ of Pascal’s triangle. By Lucas’s theorem, if $t=\\sum_{j\\ge 0}t_{j}2^{j}$ with $t_{j}\\in\\{0,1\\}$, then the number of $k$ such that $\\binom{t}{k}$ is odd is\n$$\n\\prod_{j}(t_{j}+1)=2^{\\sum_{j}t_{j}}=2^{s_{2}(t)},\n$$\nwhere $s_{2}(t)$ is the number of $1$’s in the binary expansion of $t$.\n\nTherefore, letting $N(t)$ denote the number of active cells at time $t$, we have $N(t)=2^{s_{2}(t)}$. For $t=0$ to $7$,\n$$\n\\begin{aligned}\n&t=0:\\ s_{2}(0)=0\\Rightarrow N(0)=2^{0}=1,\\\\\n&t=1:\\ s_{2}(1)=1\\Rightarrow N(1)=2^{1}=2,\\\\\n&t=2:\\ s_{2}(2)=1\\Rightarrow N(2)=2^{1}=2,\\\\\n&t=3:\\ s_{2}(3)=2\\Rightarrow N(3)=2^{2}=4,\\\\\n&t=4:\\ s_{2}(4)=1\\Rightarrow N(4)=2^{1}=2,\\\\\n&t=5:\\ s_{2}(5)=2\\Rightarrow N(5)=2^{2}=4,\\\\\n&t=6:\\ s_{2}(6)=2\\Rightarrow N(6)=2^{2}=4,\\\\\n&t=7:\\ s_{2}(7)=3\\Rightarrow N(7)=2^{3}=8.\n\\end{aligned}\n$$\nThe cumulative total from $t=0$ to $t=7$ is\n$$\n\\sum_{t=0}^{7}N(t)=1+2+2+4+2+4+4+8=27.\n$$", "answer": "$$\\boxed{27}$$", "id": "1421609"}]}