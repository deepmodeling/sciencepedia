{"hands_on_practices": [{"introduction": "The rotation number, denoted as $\\rho$, is the central quantity used to characterize the long-term dynamics of a circle map. This exercise explores the fundamental relationship between the driving parameter $\\Omega$ and the resulting rotation number $\\rho$. By working through a specific case where $\\Omega$ is an integer, you will uncover a crucial additive property that governs the overall structure of the plot of $\\rho$ versus $\\Omega$, providing a key insight into how the Devil's Staircase is constructed [@problem_id:1672670].", "problem": "The standard circle map is a fundamental model in the study of nonlinear dynamics, often used to describe phenomena like the phase-locking of a periodically forced oscillator. The state of the system at discrete time steps $n=0, 1, 2, \\dots$ is described by an angle $\\theta_n \\in [0, 1)$. The evolution of this angle is given by the iterative map:\n$$ \\theta_{n+1} = \\left( \\theta_n + \\Omega - \\frac{K}{2\\pi} \\sin(2\\pi \\theta_n) \\right) \\pmod 1 $$\nHere, $\\Omega$ is a parameter related to the natural frequency of the oscillator, and $K \\ge 0$ is the strength of the nonlinear coupling to the periodic driving force.\n\nTo analyze the long-term behavior, one introduces a \"lift\" of the map, which is a variable $X_n$ on the real line that is not subject to the modulo operation. The lift evolves according to:\n$$ X_{n+1} = X_n + \\Omega - \\frac{K}{2\\pi} \\sin(2\\pi X_n) $$\nThe angle $\\theta_n$ is recovered as $\\theta_n = X_n \\pmod 1$. The average rate of rotation is captured by the rotation number $\\rho$, defined as the limit:\n$$ \\rho = \\lim_{n \\to \\infty} \\frac{X_n}{n} $$\nThis limit, when it exists, is independent of the initial condition $X_0$.\n\nConsider a specific instance of this system where the parameters are set to $\\Omega = 5$ and $K = 0.8$. Calculate the numerical value of the rotation number $\\rho$ for this system.", "solution": "We consider the lift of the standard circle map,\n$$\nf_{\\Omega,K}(x) = x + \\Omega - \\frac{K}{2\\pi}\\sin(2\\pi x),\n$$\nso that $X_{n+1} = f_{\\Omega,K}(X_n)$ and the rotation number is $\\rho(\\Omega,K) = \\lim_{n\\to\\infty} \\frac{X_n}{n}$, when the limit exists. For $K<1$, the derivative of the lift is\n$$\nf_{\\Omega,K}'(x) = 1 - K \\cos(2\\pi x) \\ge 1 - K > 0,\n$$\nso $f_{\\Omega,K}$ induces an orientation-preserving circle diffeomorphism, and the rotation number exists and is independent of $X_0$ (Poincaré’s rotation number).\n\nKey additivity under integer shifts of $\\Omega$: For any integer $m$, define $f_{\\Omega+m,K}(x) = x + \\Omega + m - \\frac{K}{2\\pi}\\sin(2\\pi x)$. Let $X_n^{(\\Omega)}$ and $X_n^{(\\Omega+m)}$ be orbits under $f_{\\Omega,K}$ and $f_{\\Omega+m,K}$, respectively, with the same initial condition $X_0^{(\\Omega)} = X_0^{(\\Omega+m)}$. Define $Y_n = X_n^{(\\Omega)} + m n$. Then using the periodicity $\\sin(2\\pi(Y_n)) = \\sin(2\\pi X_n^{(\\Omega)} + 2\\pi m n) = \\sin(2\\pi X_n^{(\\Omega)})$, we compute\n$$\nY_{n+1} = X_{n+1}^{(\\Omega)} + m(n+1) = \\left(X_n^{(\\Omega)} + \\Omega - \\frac{K}{2\\pi}\\sin(2\\pi X_n^{(\\Omega)})\\right) + m + m n\n= Y_n + \\Omega + m - \\frac{K}{2\\pi}\\sin(2\\pi Y_n).\n$$\nThus $Y_n$ satisfies the same recursion as $X_n^{(\\Omega+m)}$ with the same initial condition, hence $X_n^{(\\Omega+m)} = Y_n = X_n^{(\\Omega)} + m n$. Dividing by $n$ and taking $n \\to \\infty$ yields\n$$\n\\rho(\\Omega + m, K) = \\rho(\\Omega, K) + m.\n$$\n\nTherefore, for $\\Omega = 5$,\n$$\n\\rho(5, K) = \\rho(0, K) + 5.\n$$\n\nWe now evaluate $\\rho(0, K)$ for $K = 0.8$. With $\\Omega = 0$, the map is\n$$\nf_{0,K}(x) = x - \\frac{K}{2\\pi}\\sin(2\\pi x).\n$$\nFixed points satisfy $f_{0,K}(x^{\\ast}) = x^{\\ast}$, i.e.,\n$$\n\\sin(2\\pi x^{\\ast}) = 0 \\quad \\Longrightarrow \\quad x^{\\ast} \\in \\frac{1}{2}\\mathbb{Z}.\n$$\nStarting at any such fixed point gives a constant orbit $X_n \\equiv x^{\\ast}$, hence\n$$\n\\lim_{n\\to\\infty} \\frac{X_n}{n} = 0.\n$$\nSince for $K<1$ the rotation number exists and is independent of the initial condition, it follows that\n$$\n\\rho(0, 0.8) = 0.\n$$\n\nCombining, we obtain\n$$\n\\rho(5, 0.8) = \\rho(0, 0.8) + 5 = 5.\n$$", "answer": "$$\\boxed{5}$$", "id": "1672670"}, {"introduction": "The characteristic steps of the Devil's Staircase are regions of mode-locking, also known as Arnold tongues, where the system's frequency locks onto a rational value. This practice utilizes a simplified, hypothetical model for the width of these tongues to explore how their size scales with the complexity of the rational number, represented by its denominator $Q$. This calculation will provide a quantitative understanding of the staircase's fractal nature and explain why tongues associated with simpler fractions are significantly more pronounced [@problem_id:1672710].", "problem": "In the study of dynamical systems, the circle map provides a simple model for phenomena like the synchronization of driven oscillators. A standard form of the circle map is given by the iteration:\n$$ \\theta_{n+1} = \\left( \\theta_n + \\Omega - \\frac{K}{2\\pi}\\sin(2\\pi\\theta_n) \\right) \\pmod 1 $$\nHere, $\\theta_n$ represents the state of the system on a circle of unit circumference at step $n$, $\\Omega$ is a driving parameter (the \"bare\" winding number), and $K \\ge 0$ is a non-linearity constant.\n\nFor a given set of parameters, the long-term average rotation rate is described by the winding number, $\\rho$, defined via the unwrapped phase (lift) $X_n$ as $\\rho = \\lim_{n \\to \\infty} \\frac{X_n - X_0}{n}$. When $K > 0$, for certain ranges of the parameter $\\Omega$, the winding number $\\rho$ locks onto a rational value $P/Q$. These regions of $\\Omega$ are known as mode-locking intervals or Arnold tongues. A plot of $\\rho$ versus $\\Omega$ for a fixed $K>0$ forms a complex, self-similar structure known as a \"Devil's Staircase,\" which consists of an infinite number of flat steps at every rational height.\n\nConsider a simplified theoretical model for this system where the nonlinearity $K$ is small and positive. In this model, the width $\\Delta\\Omega(P/Q)$ of the mode-locking interval corresponding to a winding number $\\rho = P/Q$ is given by the formula:\n$$ \\Delta\\Omega(P/Q) = C \\frac{K^{Q-1}}{Q^4} $$\nwhere $P/Q$ is an irreducible fraction, $C$ is a positive constant, and $K$ is the nonlinearity parameter. This formula applies to winding numbers in the open interval $\\rho \\in (0, 1)$, so we consider $0 < P < Q$.\n\nUsing this model, calculate the ratio of the total width of all mode-locked steps corresponding to winding numbers with a denominator of $Q=3$ to the total width of all mode-locked steps corresponding to winding numbers with a denominator of $Q=2$. Express your answer as a symbolic expression in terms of $K$.", "solution": "We are given the width formula for a mode-locking interval at winding number $\\rho = P/Q$ as\n$$\n\\Delta\\Omega\\left(\\frac{P}{Q}\\right) = C \\frac{K^{Q-1}}{Q^{4}},\n$$\nwith $0<P<Q$ and $\\gcd(P,Q)=1$. For a fixed denominator $Q$, the total width of all such steps is obtained by summing over all admissible numerators $P$. The number of such $P$ is $\\varphi(Q)$, Euler’s totient function, since it counts integers $P$ with $1 \\le P \\le Q-1$ and $\\gcd(P,Q)=1$. Because $\\Delta\\Omega(P/Q)$ depends only on $Q$ (and not on $P$), the total width for denominator $Q$ is\n$$\nW_{Q} = \\varphi(Q)\\, C \\frac{K^{Q-1}}{Q^{4}}.\n$$\n\nFor $Q=2$, we have $\\varphi(2)=1$, so\n$$\nW_{2} = 1 \\cdot C \\frac{K^{1}}{2^{4}} = C \\frac{K}{16}.\n$$\n\nFor $Q=3$, we have $\\varphi(3)=2$, so\n$$\nW_{3} = 2 \\cdot C \\frac{K^{2}}{3^{4}} = 2 C \\frac{K^{2}}{81}.\n$$\n\nThe requested ratio of the total width for $Q=3$ to that for $Q=2$ is\n$$\n\\frac{W_{3}}{W_{2}} = \\frac{2 C K^{2} / 81}{C K / 16} = \\frac{2 K^{2}}{81} \\cdot \\frac{16}{K} = \\frac{32}{81} K.\n$$\nThe constant $C$ cancels, and the result is linear in $K$.", "answer": "$$\\boxed{\\frac{32}{81}K}$$", "id": "1672710"}, {"introduction": "While analytical exercises reveal key properties of circle maps, numerically constructing the Devil's Staircase provides a uniquely powerful and intuitive understanding. This hands-on computational problem guides you through the process of generating the staircase by directly implementing the definition of the rotation number $\\rho(K,\\Omega)$ and detecting the mode-locked plateaus. This capstone practice allows you to build the entire structure from first principles, visually confirming the theoretical concepts of frequency locking and the fractal nature of the parameter space [@problem_id:2731669].", "problem": "Consider the discrete-time circle map defined by the lifted dynamics\n$$\nx_{k+1} = x_k + \\Omega - \\frac{K}{2\\pi}\\sin(2\\pi x_k)\n$$\nwhere $x_k \\in \\mathbb{R}$, $K \\ge 0$ is the nonlinearity parameter, and $\\Omega \\in [0,1]$ is a normalized forcing frequency. The physical phase on the circle is $\\theta_k = x_k \\bmod 1$. The rotation number is defined by the limit\n$$\n\\rho(K,\\Omega) = \\lim_{n\\to\\infty} \\frac{x_n - x_0}{n}\n$$\nwhich exists for this system under broad conditions and is independent of $x_0$ for ergodic regimes. As a function of $\\Omega$ (for fixed $K$), the map $\\Omega \\mapsto \\rho(K,\\Omega)$ is known to form a nondecreasing staircase whose plateaus indicate frequency locking (also called mode locking), where $\\rho$ takes rational values $p/q$ over nonzero intervals of $\\Omega$. This fractal monotone function is often called the Devil’s staircase.\n\nYour task is to numerically approximate $\\rho(K,\\Omega)$ over a grid of $\\Omega$ values for several fixed $K$ values, detect frequency-locked plateaus where $\\rho$ is rational with small denominator, and measure plateau widths. Use only the definition of the rotation number via the lifted dynamics and basic numerical iteration.\n\nUse the following numerical procedure and detection criteria.\n\n- For each pair $(K,\\Omega)$ on a specified grid, approximate the rotation number by iterating the lifted map starting from $x_0=0$:\n  1. Run a transient of $N_{\\mathrm{tr}}$ steps to reduce sensitivity to initial conditions.\n  2. Then run $N_{\\mathrm{avg}}$ steps and compute\n     $$\n     \\widehat{\\rho}(K,\\Omega) = \\frac{x_{N_{\\mathrm{tr}}+N_{\\mathrm{avg}}} - x_{N_{\\mathrm{tr}}}}{N_{\\mathrm{avg}}}\n     $$\n- To identify frequency locking at a given $(K,\\Omega)$, approximate $\\widehat{\\rho}$ by a rational $p/q$ with $1 \\le q \\le q_{\\max}$ using best rational approximation (for example, continued fractions). Declare the point locked if\n  $$\n  \\left| \\widehat{\\rho}(K,\\Omega) - \\frac{p}{q} \\right| \\le \\varepsilon_{\\mathrm{lock}}\n  $$\n  and record the label $(p,q)$.\n- To identify a plateau for a given $K$ and a sweep of $\\Omega$ values, find contiguous runs of $\\Omega$ where all points are locked with the same $(p,q)$. The plateau width is the difference between the largest and smallest $\\Omega$ in the run. Accept a plateau if it contains at least $m_{\\min}$ grid points and has width at least $w_{\\min}$.\n\nAdopt the following fixed numerical settings for all computations in this problem:\n- Use $N_{\\mathrm{tr}} = 1500$, $N_{\\mathrm{avg}} = 3000$.\n- Use a uniform grid of $\\Omega$ in $[0,1]$ with $N_{\\Omega} = 401$ points (including endpoints), that is, step size $1/400$.\n- Use $q_{\\max} = 8$, locking tolerance $\\varepsilon_{\\mathrm{lock}} = 5\\times 10^{-4}$, minimum plateau width $w_{\\min} = 0.01$, and minimum plateau points $m_{\\min} = 3$.\n- Use $x_0 = 0$ for all runs.\n\nTest Suite.\nYou must evaluate the following four test cases, each defined by $(K,\\Omega_{\\min},\\Omega_{\\max},N_{\\Omega},q_{\\max},w_{\\min})$:\n1. $K = 0.0$, $\\Omega_{\\min} = 0.0$, $\\Omega_{\\max} = 1.0$, $N_{\\Omega} = 401$, $q_{\\max} = 8$, $w_{\\min} = 0.01$.\n2. $K = 0.5$, $\\Omega_{\\min} = 0.0$, $\\Omega_{\\max} = 1.0$, $N_{\\Omega} = 401$, $q_{\\max} = 8$, $w_{\\min} = 0.01$.\n3. $K = 1.0$, $\\Omega_{\\min} = 0.0$, $\\Omega_{\\max} = 1.0$, $N_{\\Omega} = 401$, $q_{\\max} = 8$, $w_{\\min} = 0.01$.\n4. $K = 1.2$, $\\Omega_{\\min} = 0.0$, $\\Omega_{\\max} = 1.0$, $N_{\\Omega} = 401$, $q_{\\max} = 8$, $w_{\\min} = 0.01$.\n\nFor each test case, your program must:\n- Compute the list of accepted plateaus for the given $K$ over the grid of $\\Omega$.\n- Return three outputs per test case:\n  1. The integer total number of accepted plateaus.\n  2. A boolean indicating whether the $1:2$ locked plateau (that is, $\\rho = 1/2$) is present among the accepted plateaus.\n  3. The width of the widest accepted plateau as a real number rounded to $4$ decimal places.\n\nFinal Output Format.\nYour program should produce a single line of output containing the results for the four test cases as a comma-separated list of lists enclosed in square brackets. Each inner list corresponds to one test case in the order above and must have the form $[\\text{count},\\text{bool},\\text{width}]$, for example:\n$[[3,True,0.1250],[\\dots],[\\dots],[\\dots]]$.\nNo units are involved in this problem. Angles inside the sine function are in radians by definition of the map. All floating-point outputs must be rounded to $4$ decimal places as specified above before printing.", "solution": "The problem requires a numerical investigation of the standard circle map, a fundamental model in the study of nonlinear dynamical systems and frequency-locking phenomena. The objective is to approximate the rotation number $\\rho(K,\\Omega)$ across a grid of forcing frequencies $\\Omega$ for several values of the nonlinearity parameter $K$, and to identify and characterize the frequency-locked plateaus, known as Arnold tongues.\n\nThe solution is constructed by directly implementing the procedures specified in the problem statement. The methodology follows a hierarchical structure based on first principles.\n\nAt the core of the analysis is the rotation number, defined as $\\rho = \\lim_{n\\to\\infty} (x_n - x_0)/n$. This quantity measures the average asymptotic rate of change of the system's phase. We are instructed to compute a numerical approximation, $\\widehat{\\rho}$, by iterating the lifted map:\n$$\nx_{k+1} = x_k + \\Omega - \\frac{K}{2\\pi}\\sin(2\\pi x_k)\n$$\nThe calculation for each pair $(K, \\Omega)$ begins with $x_0 = 0$. The first $N_{\\mathrm{tr}} = 1500$ iterations are discarded as a transient phase to ensure the system has settled onto its attractor. The subsequent $N_{\\mathrm{avg}} = 3000$ iterations are used to compute the average frequency:\n$$\n\\widehat{\\rho}(K,\\Omega) = \\frac{x_{N_{\\mathrm{tr}}+N_{\\mathrm{avg}}} - x_{N_{\\mathrm{tr}}}}{N_{\\mathrm{avg}}}\n$$\nThis procedure is systematically applied to every point on a uniform grid of $N_{\\Omega} = 401$ values of $\\Omega$ in the interval $[0,1]$ for each specified test case $K$.\n\nOnce $\\widehat{\\rho}$ is computed for a given $\\Omega$, the next step is to test for frequency locking. This is a classification task. A point is deemed locked if its numerically computed rotation number is sufficiently close to a simple rational number. This is implemented via a two-step process:\n1.  **Best Rational Approximation**: For each $\\widehat{\\rho}$, we find the best rational approximation $p/q$ where the denominator $q$ does not exceed a maximum value, $q_{\\max} = 8$. This is accomplished algorithmically using the method of continued fractions, which is efficiently implemented in standard libraries.\n2.  **Locking Condition**: The point $(\\Omega, \\widehat{\\rho})$ is classified as locked with rational number $p/q$ if the absolute difference between the computed rotation number and its rational approximation is within a specified tolerance:\n    $$\n    \\left| \\widehat{\\rho}(K,\\Omega) - \\frac{p}{q} \\right| \\le \\varepsilon_{\\mathrm{lock}}\n    $$\n    where $\\varepsilon_{\\mathrm{lock}} = 5 \\times 10^{-4}$. If this condition is met, the state is labeled with the pair $(p,q)$; otherwise, it is considered unlocked.\n\nAfter all points on the $\\Omega$-grid for a given $K$ have been classified, the resulting sequence of labels is scanned to identify plateaus. A plateau is defined as a contiguous sub-sequence of grid points that are all locked to the identical rational number $(p,q)$.\n\nEach identified potential plateau is then subjected to validation criteria to filter out spurious or insignificant results. A segment is accepted as a valid plateau only if it satisfies both of the following conditions:\n- It must comprise at least $m_{\\min} = 3$ consecutive grid points.\n- The span of the $\\Omega$ values in the segment, defined as $\\Omega_{\\max} - \\Omega_{\\min}$ for that segment, must be at least $w_{\\min} = 0.01$.\n\nFinally, for each value of $K$, the set of accepted plateaus is analyzed to extract the required summary metrics:\n1.  The total count of accepted plateaus.\n2.  A Boolean flag indicating whether a plateau corresponding to the $1:2$ frequency lock ($\\rho = 1/2$) is present in the accepted set.\n3.  The width of the widest plateau found, rounded to four decimal places. For the case of no accepted plateaus, this width is reported as $0$.\n\nThis entire computational procedure is encapsulated in a program that iterates through the four specified values of $K$, performs the analysis for each, and formats the final results into a single line of output as required. The case $K=0$ serves as a baseline, where the map is linear ($x_{k+1} = x_k + \\Omega$) and thus $\\rho=\\Omega$. In this linear case, true plateaus cannot form, and the specified validation criteria correctly filter out any artifacts from the rational approximation process, as expected. For $K>0$, the nonlinearity induces true frequency-locking, and the algorithm is designed to detect and measure the resulting plateaus.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom fractions import Fraction\n\ndef solve():\n    \"\"\"\n    Solves the circle map problem by numerically approximating rotation numbers,\n    detecting frequency-locked plateaus, and reporting statistics for several\n    nonlinearity parameters K.\n    \"\"\"\n    # Define the fixed numerical settings from the problem statement.\n    N_TR = 1500\n    N_AVG = 3000\n    EPS_LOCK = 5e-4\n    M_MIN = 3\n    X0 = 0.0\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (K, Omega_min, Omega_max, N_Omega, q_max, w_min)\n        (0.0, 0.0, 1.0, 401, 8, 0.01),\n        (0.5, 0.0, 1.0, 401, 8, 0.01),\n        (1.0, 0.0, 1.0, 401, 8, 0.01),\n        (1.2, 0.0, 1.0, 401, 8, 0.01),\n    ]\n\n    all_case_results = []\n    for K, omega_min, omega_max, n_omega, q_max, w_min in test_cases:\n        # Create the grid of Omega values.\n        omega_grid = np.linspace(omega_min, omega_max, n_omega)\n        locked_states = []\n\n        # Pre-compute the K-dependent term for efficiency.\n        k_term = K / (2 * np.pi)\n\n        # Iterate over each Omega to compute rho_hat and determine its locked state.\n        for omega in omega_grid:\n            x = X0\n            \n            # 1. Iterate the map to compute rho_hat.\n            # Transient steps.\n            for _ in range(N_TR):\n                x = x + omega - k_term * np.sin(2 * np.pi * x)\n            \n            x_transient = x\n            \n            # Averaging steps.\n            for _ in range(N_AVG):\n                x = x + omega - k_term * np.sin(2 * np.pi * x)\n            \n            x_final = x\n            \n            rho_hat = (x_final - x_transient) / N_AVG\n            \n            # 2. Find best rational approximation p/q.\n            frac = Fraction(rho_hat).limit_denominator(q_max)\n            p, q = frac.numerator, frac.denominator\n            \n            # 3. Check for frequency locking.\n            if abs(rho_hat - p / q) <= EPS_LOCK and q >= 1:\n                locked_states.append((p, q))\n            else:\n                locked_states.append(None)\n        \n        # 4. Identify and validate plateaus from contiguous locked states.\n        accepted_plateaus = []\n        i = 0\n        while i < n_omega:\n            current_state = locked_states[i]\n            if current_state is None:\n                i += 1\n                continue\n            \n            # A potential plateau starts at index i.\n            start_index = i\n            j = i + 1\n            while j < n_omega and locked_states[j] == current_state:\n                j += 1\n            end_index = j - 1\n            \n            # Apply validation criteria for the identified segment.\n            num_points = end_index - start_index + 1\n            if num_points >= M_MIN:\n                width = omega_grid[end_index] - omega_grid[start_index]\n                if width >= w_min:\n                    p_val, q_val = current_state\n                    plateau_info = {'p': p_val, 'q': q_val, 'width': width}\n                    accepted_plateaus.append(plateau_info)\n            \n            i = j  # Continue search from the end of the current segment.\n        \n        # 5. Compute the required output metrics for the current test case.\n        count = len(accepted_plateaus)\n        has_1_2 = any(p['p'] == 1 and p['q'] == 2 for p in accepted_plateaus)\n        \n        max_width = 0.0\n        if accepted_plateaus:\n            max_width = max(p['width'] for p in accepted_plateaus)\n            \n        all_case_results.append([count, has_1_2, max_width])\n    \n    # Final print statement in the exact required format.\n    result_strings = []\n    for count, has_bool, width in all_case_results:\n        bool_str = 'True' if has_bool else 'False'\n        width_str = f\"{round(width, 4):.4f}\" # Round then format\n        result_strings.append(f\"[{count},{bool_str},{width_str}]\")\n        \n    final_output = f\"[{','.join(result_strings)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2731669"}]}