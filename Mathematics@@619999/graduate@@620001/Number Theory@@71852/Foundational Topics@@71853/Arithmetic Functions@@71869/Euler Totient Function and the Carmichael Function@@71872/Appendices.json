{"hands_on_practices": [{"introduction": "This first practice grounds our understanding of the Carmichael function by building it from first principles. You will begin with the abstract definition of a group's exponent and, by applying the Chinese Remainder Theorem to the structure of $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$, derive the practical formula for computing $\\lambda(n)$ from its prime factorization. This exercise bridges the gap between abstract group theory and concrete number-theoretic calculation, a foundational skill in modern number theory [@problem_id:3020154].", "problem": "Let $n$ be a positive integer and let $\\lambda(n)$ denote the exponent of the multiplicative group of units $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$, defined as the least positive integer $m$ such that $a^{m} \\equiv 1 \\pmod{n}$ for all $a \\in (\\mathbb{Z}/n\\mathbb{Z})^{\\times}$. Starting from the fundamental definition of $\\lambda(n)$ as a group exponent and using only well-established structural facts about $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$ and the Chinese Remainder Theorem (CRT), justify why the exponent of a finite direct product of groups is the least common multiple of the exponents of its factors. Then, using the known structure of $(\\mathbb{Z}/p^{k}\\mathbb{Z})^{\\times}$ for prime powers $p^{k}$—including the existence of primitive roots for odd prime powers and the exceptional $2$-power cases—compute $\\lambda(72)$ where $72 = 2^3 \\cdot 3^2$. Provide the final numerical value for $\\lambda(72)$. No rounding is required.", "solution": "The problem asks for a justification of a property of the Carmichael function $\\lambda(n)$ and its application to compute $\\lambda(72)$. The validation process confirms that the problem is well-posed, scientifically grounded, and contains all necessary information. We proceed with a complete solution.\n\nThe function $\\lambda(n)$ is defined as the exponent of the multiplicative group of units $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$. This is the smallest positive integer $m$ such that $a^m \\equiv 1 \\pmod{n}$ for all integers $a$ coprime to $n$.\n\nFirst, we justify the formula for the exponent of a finite direct product of groups. Let $G = G_1 \\times G_2 \\times \\dots \\times G_k$ be a direct product of finite groups. Let $\\lambda(G)$ be the exponent of $G$, and let $\\lambda(G_i)$ be the exponent of $G_i$ for each $i \\in \\{1, 2, \\dots, k\\}$.\nBy definition, $\\lambda(G)$ is the least positive integer $m$ such that $g^m = e_G$ for all $g \\in G$, where $e_G$ is the identity element of $G$. An arbitrary element $g \\in G$ is a tuple $(g_1, g_2, \\dots, g_k)$ where each $g_i \\in G_i$. The identity element is $e_G = (e_1, e_2, \\dots, e_k)$, where $e_i$ is the identity of $G_i$. The group operation is component-wise.\nThe condition $g^m = e_G$ is equivalent to $(g_1^m, g_2^m, \\dots, g_k^m) = (e_1, e_2, \\dots, e_k)$. This equality holds if and only if $g_i^m = e_i$ for all $i \\in \\{1, 2, \\dots, k\\}$.\n\nFor $m = \\lambda(G)$ to be the exponent of $G$, this must be true for all elements $g \\in G$. This implies that for any given $i$, the relation $g_i^m = e_i$ must hold for every $g_i \\in G_i$. By the definition of the exponent $\\lambda(G_i)$, this means that $m$ must be a multiple of $\\lambda(G_i)$. Since this must be true for all $i=1, \\dots, k$, $m$ must be a common multiple of all the exponents $\\lambda(G_1), \\lambda(G_2), \\dots, \\lambda(G_k)$.\n\nLet $L = \\operatorname{lcm}(\\lambda(G_1), \\lambda(G_2), \\dots, \\lambda(G_k))$. Since $\\lambda(G)$ must be a common multiple of all $\\lambda(G_i)$, it must be that $\\lambda(G) \\ge L$.\n\nNow, let's consider the integer $L$. By its definition, $L$ is a multiple of each $\\lambda(G_i)$. So, for any $i$ and any $g_i \\in G_i$, we have $g_i^{\\lambda(G_i)} = e_i$. Since $L$ is a multiple of $\\lambda(G_i)$, we can write $L = c_i \\lambda(G_i)$ for some integer $c_i$. Then $g_i^L = g_i^{c_i \\lambda(G_i)} = (g_i^{\\lambda(G_i)})^{c_i} = (e_i)^{c_i} = e_i$. This holds for all $i=1, \\dots, k$.\nThus, for any element $g = (g_1, g_2, \\dots, g_k) \\in G$, we have $g^L = (g_1^L, g_2^L, \\dots, g_k^L) = (e_1, e_2, \\dots, e_k) = e_G$.\nThis shows that $L$ has the property that it annihilates all elements of $G$. Since $\\lambda(G)$ is the *least* positive integer with this property, we must have $\\lambda(G) \\le L$.\n\nCombining the two inequalities, $\\lambda(G) \\ge L$ and $\\lambda(G) \\le L$, we conclude that $\\lambda(G) = L$. That is, the exponent of a finite direct product of groups is the least common multiple of the exponents of the factor groups.\n\nNext, we apply this result to $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$. Let the prime factorization of $n$ be $n = p_1^{k_1} p_2^{k_2} \\dots p_r^{k_r}$. By the Chinese Remainder Theorem, there is a group isomorphism:\n$$ (\\mathbb{Z}/n\\mathbb{Z})^{\\times} \\cong (\\mathbb{Z}/p_1^{k_1}\\mathbb{Z})^{\\times} \\times (\\mathbb{Z}/p_2^{k_2}\\mathbb{Z})^{\\times} \\times \\dots \\times (\\mathbb{Z}/p_r^{k_r}\\mathbb{Z})^{\\times} $$\nFrom our previous derivation, the exponent $\\lambda(n)$ of the group $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$ is the least common multiple of the exponents of the factor groups, $\\lambda(p_i^{k_i})$.\n$$ \\lambda(n) = \\operatorname{lcm}(\\lambda(p_1^{k_1}), \\lambda(p_2^{k_2}), \\dots, \\lambda(p_r^{k_r})) $$\n\nTo compute $\\lambda(72)$, we use its prime factorization $72 = 2^3 \\cdot 3^2$.\nUsing the formula above:\n$$ \\lambda(72) = \\operatorname{lcm}(\\lambda(2^3), \\lambda(3^2)) $$\nWe now compute the values for the prime power factors, using the known structure of these unit groups.\n\n1.  For $\\lambda(3^2)$: The prime is $p=3$, which is an odd prime. For any odd prime $p$, the group $(\\mathbb{Z}/p^k\\mathbb{Z})^{\\times}$ is cyclic for any integer $k \\ge 1$. A cyclic group's exponent is equal to its order. The order of $(\\mathbb{Z}/p^k\\mathbb{Z})^{\\times}$ is given by Euler's totient function, $\\phi(p^k) = p^k - p^{k-1} = p^{k-1}(p-1)$.\n    Therefore, $\\lambda(3^2) = \\phi(3^2) = 3^{2-1}(3-1) = 3^1 \\cdot 2 = 6$.\n\n2.  For $\\lambda(2^3)$: The prime is $p=2$. The structure of $(\\mathbb{Z}/2^k\\mathbb{Z})^{\\times}$ depends on $k$.\n    - $\\lambda(2) = 1$\n    - $\\lambda(4) = 2$\n    - For $k \\ge 3$, the group $(\\mathbb{Z}/2^k\\mathbb{Z})^{\\times}$ is not cyclic. It is isomorphic to the direct product of a cyclic group of order $2$ and a cyclic group of order $2^{k-2}$, i.e., $(\\mathbb{Z}/2\\mathbb{Z}) \\times (\\mathbb{Z}/2^{k-2}\\mathbb{Z})$. The exponent is $\\operatorname{lcm}(2, 2^{k-2})$. Since $k \\ge 3$, we have $k-2 \\ge 1$, which means $2^{k-2} \\ge 2$. Thus, $\\operatorname{lcm}(2, 2^{k-2}) = 2^{k-2}$.\n    In our case, $k=3$, which satisfies $k \\ge 3$. So we use the formula $\\lambda(2^k) = 2^{k-2}$.\n    $\\lambda(2^3) = 2^{3-2} = 2^1 = 2$.\n\nFinally, we combine these results:\n$$ \\lambda(72) = \\operatorname{lcm}(\\lambda(2^3), \\lambda(3^2)) = \\operatorname{lcm}(2, 6) $$\nThe multiples of $2$ are $2, 4, 6, 8, \\dots$. The multiples of $6$ are $6, 12, 18, \\dots$. The least common multiple is $6$.\nTherefore, $\\lambda(72) = 6$.", "answer": "$$\n\\boxed{6}\n$$", "id": "3020154"}, {"introduction": "Now that we can compute $\\lambda(n)$, we will explore its deeper structural implications for the group of units. This exercise investigates the connection between the Carmichael function and the existence of primitive roots—elements that generate the entire group $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$. By analyzing cases where $\\lambda(n) \\lt \\phi(n)$, you will prove why this group cannot be cyclic for a large and important class of integers, thus gaining a more profound insight into its structure [@problem_id:3020151].", "problem": "Let $n$ be a positive integer and let $\\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^{\\times}$ denote the multiplicative group of units modulo $n$. An element $a \\in \\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^{\\times}$ has multiplicative order modulo $n$ defined as the least positive integer $k$ such that $a^{k} \\equiv 1 \\pmod{n}$. A primitive root modulo $n$ is an element of $\\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^{\\times}$ whose multiplicative order equals the group order $|\\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^{\\times}|$, so that $\\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^{\\times}$ is cyclic.\n\nUsing only fundamental definitions and well-tested facts, argue from first principles that if $n$ has at least two distinct odd prime factors, then $\\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^{\\times}$ is not cyclic. Your reasoning must proceed by:\n- Applying the Chinese Remainder Theorem (CRT) to identify $\\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^{\\times}$ with a direct product of unit groups modulo prime powers.\n- Explaining why the direct product in this situation cannot be cyclic, using only core group-theoretic properties of orders in direct products.\n\nDetermine the smallest composite integer $n$ with at least two distinct odd prime factors for which primitive roots modulo $n$ do not exist, and provide this integer as your final answer. No rounding is needed, and the final answer must be a single integer written with no units.", "solution": "The problem statement is evaluated to be valid as it is mathematically sound, self-contained, and well-posed within the domain of number theory. We proceed with the solution.\n\nThe problem asks for two parts: first, a proof that if a positive integer $n$ has at least two distinct odd prime factors, then the multiplicative group of units modulo $n$, denoted $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$, is not cyclic. Second, the determination of the smallest such integer $n$.\n\nLet $n$ be a positive integer. Assume $n$ has at least two distinct odd prime factors. Let the prime factorization of $n$ be $n = p_1^{k_1} p_2^{k_2} \\cdots p_m^{k_m}$, where $p_i$ are distinct primes and $k_i \\ge 1$ are integers. By the stated assumption, at least two of these prime factors, say $p_1$ and $p_2$, are odd.\n\nThe first step is to apply the Chinese Remainder Theorem (CRT). The CRT establishes a ring isomorphism between $\\mathbb{Z}/n\\mathbb{Z}$ and the direct product of rings $\\mathbb{Z}/p_i^{k_i}\\mathbb{Z}$:\n$$\n\\mathbb{Z}/n\\mathbb{Z} \\cong \\mathbb{Z}/p_1^{k_1}\\mathbb{Z} \\times \\mathbb{Z}/p_2^{k_2}\\mathbb{Z} \\times \\cdots \\times \\mathbb{Z}/p_m^{k_m}\\mathbb{Z}\n$$\nThis isomorphism restricts to their respective groups of units, yielding a group isomorphism:\n$$\n(\\mathbb{Z}/n\\mathbb{Z})^{\\times} \\cong (\\mathbb{Z}/p_1^{k_1}\\mathbb{Z})^{\\times} \\times (\\mathbb{Z}/p_2^{k_2}\\mathbb{Z})^{\\times} \\times \\cdots \\times (\\mathbb{Z}/p_m^{k_m}\\mathbb{Z})^{\\times}\n$$\nFor $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$ to be cyclic, it must contain an element whose order is equal to the order of the group, $|\\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^{\\times}|$. The order of this group is given by Euler's totient function, $\\phi(n)$. Due to the multiplicative property of $\\phi$ for coprime arguments, we have:\n$$\n|\\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^{\\times}| = \\phi(n) = \\phi(p_1^{k_1}) \\phi(p_2^{k_2}) \\cdots \\phi(p_m^{k_m})\n$$\nThe order of the $i$-th group in the direct product is $|\\left(\\mathbb{Z}/p_i^{k_i}\\mathbb{Z}\\right)^{\\times}| = \\phi(p_i^{k_i}) = p_i^{k_i-1}(p_i-1)$.\n\nConsider an arbitrary element $a \\in (\\mathbb{Z}/n\\mathbb{Z})^{\\times}$. Under the CRT isomorphism, this element corresponds to a tuple $(a_1, a_2, \\dots, a_m)$, where $a_i \\equiv a \\pmod{p_i^{k_i}}$. The multiplicative order of $a$ modulo $n$, denoted $\\operatorname{ord}_n(a)$, is given by the least common multiple of the orders of its components in the direct product:\n$$\n\\operatorname{ord}_n(a) = \\operatorname{lcm}(\\operatorname{ord}_{p_1^{k_1}}(a_1), \\operatorname{ord}_{p_2^{k_2}}(a_2), \\dots, \\operatorname{ord}_{p_m^{k_m}}(a_m))\n$$\nBy Lagrange's theorem, the order of any element in a finite group must divide the order of the group. Therefore, for each component $a_i$, its order must divide the order of the corresponding group:\n$$\n\\operatorname{ord}_{p_i^{k_i}}(a_i) \\mid \\phi(p_i^{k_i})\n$$\nThis implies that the order of any element $a \\in (\\mathbb{Z}/n\\mathbb{Z})^{\\times}$ must divide the least common multiple of the orders of the component groups:\n$$\n\\operatorname{ord}_n(a) \\mid \\operatorname{lcm}(\\phi(p_1^{k_1}), \\phi(p_2^{k_2}), \\dots, \\phi(p_m^{k_m}))\n$$\nThis maximal possible order for an element in $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$ is known as the Carmichael function, $\\lambda(n)$.\n\nNow, we use the core assumption that $n$ has at least two distinct odd prime factors, say $p_1$ and $p_2$.\nFor any odd prime $p$, the integer $p-1$ is even. Consequently, the order of the group $(\\mathbb{Z}/p^k\\mathbb{Z})^{\\times}$, which is $\\phi(p^k) = p^{k-1}(p-1)$, is an even number for any $k \\ge 1$.\nThus, both $\\phi(p_1^{k_1})$ and $\\phi(p_2^{k_2})$ are even integers. Let $\\phi(p_1^{k_1}) = 2u$ and $\\phi(p_2^{k_2}) = 2v$ for some integers $u$ and $v$.\n\nThe maximum possible order of any element in $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$ is $\\lambda(n) = \\operatorname{lcm}(\\phi(p_1^{k_1}), \\dots, \\phi(p_m^{k_m}))$.\nSince at least two of the arguments of the $\\operatorname{lcm}$ function, namely $\\phi(p_1^{k_1})$ and $\\phi(p_2^{k_2})$, are even, their least common multiple must be strictly smaller than their product. Specifically, for any two positive even numbers $x$ and $y$, $\\operatorname{lcm}(x, y) = \\frac{xy}{\\gcd(x, y)}$. Since $\\gcd(x, y) \\ge 2$, we have $\\operatorname{lcm}(x, y) \\le \\frac{xy}{2}$.\nThis property extends to the full list of arguments for $\\lambda(n)$:\n$$\n\\lambda(n) = \\operatorname{lcm}(\\phi(p_1^{k_1}), \\phi(p_2^{k_2}), \\dots, \\phi(p_m^{k_m})) \\le \\frac{\\phi(p_1^{k_1})\\phi(p_2^{k_2})\\cdots\\phi(p_m^{k_m})}{2}\n$$\nThe inequality is strict if there are at least two even numbers in the set, which is our case.\nThe order of the group $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$ is $\\phi(n) = \\phi(p_1^{k_1})\\phi(p_2^{k_2})\\cdots\\phi(p_m^{k_m})$.\nTherefore, we have established that the maximum possible order of any element in the group is\n$$\n\\lambda(n) \\le \\frac{1}{2}\\phi(n) < \\phi(n)\n$$\nSince the order of any element in $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$ is at most $\\lambda(n)$, and $\\lambda(n)$ is strictly less than the order of the group $\\phi(n)$, no element can have an order equal to the order of the group. By definition, this means that $(\\mathbb{Z}/n\\mathbb{Z})^{\\times}$ cannot be cyclic, and thus possesses no primitive roots. This completes the proof.\n\nFor the second part of the problem, we must find the smallest composite integer $n$ with at least two distinct odd prime factors. To construct the smallest such integer, we should use the smallest possible distinct odd prime factors and their lowest possible powers. The odd primes, in increasing order, are $3, 5, 7, 11, \\dots$. The smallest two distinct odd primes are $3$ and $5$. The smallest integer $n$ formed by at least two distinct odd prime factors is the product of the two smallest ones, each raised to the power of $1$.\nThus, the integer is:\n$$\nn = 3 \\times 5 = 15\n$$\nThis number $n=15$ is composite. Its prime factors are $3$ and $5$, which are distinct and odd. Any other integer with two distinct odd prime factors, such as $3 \\times 7 = 21$ or $5 \\times 7 = 35$, would be larger. Any integer with more than two distinct odd prime factors (e.g., $3 \\times 5 \\times 7 = 105$) or with higher powers of these primes (e.g., $3^2 \\times 5 = 45$) would also be larger than $15$.\nTherefore, the smallest such integer is $15$.\nAs a check, we examine $(\\mathbb{Z}/15\\mathbb{Z})^{\\times}$. The order is $\\phi(15) = \\phi(3)\\phi(5) = (3-1)(5-1) = 2 \\times 4 = 8$.\nThe group is isomorphic to $(\\mathbb{Z}/3\\mathbb{Z})^{\\times} \\times (\\mathbb{Z}/5\\mathbb{Z})^{\\times}$. The orders of these component groups are $\\phi(3)=2$ and $\\phi(5)=4$. Both are even. The maximum order of an element is $\\lambda(15) = \\operatorname{lcm}(\\phi(3), \\phi(5)) = \\operatorname{lcm}(2, 4) = 4$. Since $\\lambda(15)=4 < \\phi(15)=8$, the group is not cyclic, confirming our proof.", "answer": "$$\\boxed{15}$$", "id": "3020151"}, {"introduction": "Our final practice applies this knowledge to a classic and important topic: the identification of Carmichael numbers. These composite integers masquerade as primes by satisfying the congruence in Fermat's Little Theorem, posing a challenge for primality tests. You will discover that the key to unmasking these \"pseudoprimes\" lies in Korselt's criterion, which is an elegant restatement of the condition $\\lambda(n) | (n-1)$. This exercise challenges you to translate this deep theoretical insight into a practical algorithm, solidifying your understanding by building a tool to solve a real number-theoretic problem [@problem_id:3013818].", "problem": "Given an integer $n$, the goal is to determine whether $n$ is a Carmichael number by designing and implementing an algorithm grounded in first principles and well-tested number-theoretic facts. The algorithm must be based on factoring $n$ and invoking Korselt’s criterion, and it must also compute the Carmichael function $\\lambda(n)$. You must justify the algorithm’s correctness and analyze its computational complexity in terms of bit-length. The problem requires that the algorithm be derived from the following base: the definition of Euler’s totient function $\\phi(n)$, the definition of the Carmichael function $\\lambda(n)$ as the exponent of the multiplicative group of units modulo $n$, the structure of the multiplicative group $(\\mathbb{Z}/n\\mathbb{Z})^\\times$ via the Chinese Remainder Theorem (CRT), and Korselt’s criterion as a well-tested characterization of Carmichael numbers. You must not use any shortcut formulas in the problem statement; instead, derive and justify the algorithmic steps from these bases in your solution.\n\nDesign requirements:\n- Define and implement a function that decides whether a given integer $n$ is Carmichael using Korselt’s criterion and prime factorization of $n$.\n- Define and implement a function to compute the Carmichael function $\\lambda(n)$ for general $n$ using its prime power factorization.\n- Justify the correctness of both functions from first principles, starting from the definitions of $\\phi(n)$, $\\lambda(n)$, and the structure of $(\\mathbb{Z}/n\\mathbb{Z})^\\times$ via CRT, and the statement of Korselt’s criterion.\n- Analyze the computational complexity of your approach, measured in terms of the bit-length $b = \\lceil \\log_2 n \\rceil$, including:\n  - The complexity of primality testing used in factorization.\n  - The complexity of factorization itself using a standard algorithm.\n  - The complexity of computing $\\lambda(n)$ from the factorization and checking the divisibility conditions from Korselt’s criterion.\n\nAlgorithmic constraints:\n- Your program must be fully self-contained and perform no input/output beyond the required final output line.\n- For edge-case handling, your functions must correctly address $n = 1$, prime $n$, composite non-squarefree $n$, and composite squarefree $n$.\n\nTest suite:\n- Apply your implementation to the following list of integers:\n  - $n \\in \\{1, 2, 15, 512, 561, 1105, 1729, 2465, 6601, 8911, 41041, 294409\\}$.\n- The set contains a general case, small primes, a unit case, composite non-squarefree values, and several known Carmichael numbers to test coverage.\n\nFinal output format:\n- For each test case $n$ in the specified order, produce a result of the form $[\\text{is\\_carmichael}, \\lambda(n)]$ where $\\text{is\\_carmichael}$ is a boolean and $\\lambda(n)$ is an integer.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example: [[true, 80], [false, 1], ...].\n- No additional text or characters may appear in the output besides this single line.", "solution": "The objective is to formulate and implement an algorithm to determine if a positive integer $n$ is a Carmichael number and to compute the Carmichael function $\\lambda(n)$. The derivation must be founded on first principles of number theory, specifically the definitions of Euler's totient function $\\phi(n)$, the Carmichael function $\\lambda(n)$, the structure of the multiplicative group of integers modulo $n$, $(\\mathbb{Z}/n\\mathbb{Z})^\\times$, and Korselt's criterion.\n\n### Fundamental Principles\n\nLet $n$ be a positive integer. The set of integers relatively prime to $n$ in $\\{1, 2, \\dots, n\\}$ forms a group under multiplication modulo $n$, denoted $(\\mathbb{Z}/n\\mathbb{Z})^\\times$.\n\n1.  **Euler's Totient Function, $\\phi(n)$**: This function counts the number of positive integers up to $n$ that are relatively prime to $n$. It is defined as $\\phi(n) = |\\{k \\in \\{1, \\dots, n\\} : \\gcd(k, n) = 1\\}|$. Fundamentally, $\\phi(n)$ is the order of the group $(\\mathbb{Z}/n\\mathbb{Z})^\\times$.\n\n2.  **Carmichael Function, $\\lambda(n)$**: This function is defined as the smallest positive integer $m$ such that $a^m \\equiv 1 \\pmod{n}$ for all integers $a$ that are relatively prime to $n$. In group-theoretic terms, $\\lambda(n)$ is the exponent of the group $(\\mathbb{Z}/n\\mathbb{Z})^\\times$, which is the least common multiple of the orders of all elements in the group. By Lagrange's theorem, the order of any element must divide the order of the group, so $\\lambda(n)$ must divide $\\phi(n)$. For $n=1$, we define $\\lambda(1) = 1$.\n\n3.  **Chinese Remainder Theorem (CRT)**: If $n$ has a prime factorization $n = p_1^{k_1} p_2^{k_2} \\cdots p_r^{k_r}$, the CRT implies a group isomorphism:\n    $$ (\\mathbb{Z}/n\\mathbb{Z})^\\times \\cong (\\mathbb{Z}/p_1^{k_1}\\mathbb{Z})^\\times \\times (\\mathbb{Z}/p_2^{k_2}\\mathbb{Z})^\\times \\times \\cdots \\times (\\mathbb{Z}/p_r^{k_r}\\mathbb{Z})^\\times $$\n    The exponent of a direct product of groups is the least common multiple (lcm) of the exponents of the individual groups. Therefore,\n    $$ \\lambda(n) = \\operatorname{lcm}(\\lambda(p_1^{k_1}), \\lambda(p_2^{k_2}), \\ldots, \\lambda(p_r^{k_r})) $$\n\n4.  **Carmichael Numbers**: A composite integer $n$ is a Carmichael number if it satisfies the congruence $a^{n-1} \\equiv 1 \\pmod{n}$ for all integers $a$ with $\\gcd(a, n) = 1$. This condition is equivalent to stating that $\\lambda(n)$ divides $n-1$.\n\n5.  **Korselt's Criterion (1899)**: A composite integer $n > 1$ is a Carmichael number if and only if (i) $n$ is square-free, and (ii) for every prime factor $p$ of $n$, the quantity $p-1$ divides $n-1$.\n\n### Algorithm for Computing $\\lambda(n)$\n\nTo create an algorithm for $\\lambda(n)$, we first need explicit formulas for $\\lambda(p^k)$. These are derived from the structure of the groups $(\\mathbb{Z}/p^k\\mathbb{Z})^\\times$.\n-   For an odd prime $p$, the group $(\\mathbb{Z}/p^k\\mathbb{Z})^\\times$ is cyclic of order $\\phi(p^k) = p^k - p^{k-1} = p^{k-1}(p-1)$. The exponent of a cyclic group is its order, so $\\lambda(p^k) = p^{k-1}(p-1)$.\n-   For $p=2$, the group structure varies:\n    -   For $k=1$, $(\\mathbb{Z}/2\\mathbb{Z})^\\times$ is the trivial group, so $\\lambda(2) = 1$.\n    -   For $k=2$, $(\\mathbb{Z}/4\\mathbb{Z})^\\times \\cong C_2$, so $\\lambda(4) = 2$.\n    -   For $k \\ge 3$, $(\\mathbb{Z}/2^k\\mathbb{Z})^\\times \\cong C_2 \\times C_{2^{k-2}}$. The exponent is $\\operatorname{lcm}(2, 2^{k-2}) = 2^{k-2}$.\n\nThis yields the following algorithm for $\\lambda(n)$:\n\n1.  Handle the base case: If $n=1$, return $1$.\n2.  Find the prime power factorization of $n$: $n = p_1^{k_1} p_2^{k_2} \\cdots p_r^{k_r}$.\n3.  For each factor $p_i^{k_i}$, compute $\\lambda(p_i^{k_i})$:\n    -   If $p_i$ is an odd prime, the value is $p_i^{k_i-1}(p_i-1)$.\n    -   If $p_i=2$ and $k_i=1$, the value is $1$.\n    -   If $p_i=2$ and $k_i=2$, the value is $2$.\n    -   If $p_i=2$ and $k_i \\ge 3$, the value is $2^{k_i-2}$.\n4.  Compute the least common multiple of all values obtained in the previous step. This is $\\lambda(n)$.\n\n### Algorithm for Carmichael Number Identification\n\nThis algorithm is a direct implementation of Korselt's criterion, justified by the properties of $\\lambda(n)$.\n\n**Justification of Korselt's Criterion:**\nA composite number $n$ is Carmichael if and only if $\\lambda(n)$ divides $n-1$.\n\nFirst, we show that a Carmichael number must be square-free. Suppose $n$ is not square-free, so $p^k | n$ for some prime $p$ and exponent $k \\ge 2$.\n-   Case 1: $p$ is an odd prime. Then $\\lambda(n)$ must be a multiple of $\\lambda(p^k) = p^{k-1}(p-1)$. If $\\lambda(n) | n-1$, then $p^{k-1}(p-1) | n-1$. Since $p$ divides $p^{k-1}$, it must be that $p | n-1$. However, since $p | n$, we have $n-1 \\equiv -1 \\pmod{p}$, so $p$ cannot divide $n-1$. This is a contradiction.\n-   Case 2: $p=2$ and $k \\ge 2$. Then $4 | n$.\n    -   If $k=2$, $n=4m$. $\\lambda(n)$ is a multiple of $\\lambda(4)=2$. $n-1=4m-1$ is odd, so $\\lambda(n)$ cannot divide $n-1$.\n    -   If $k \\ge 3$, $\\lambda(n)$ is a multiple of $\\lambda(2^k)=2^{k-2}$. A similar contradiction arises.\nThus, $n$ must be square-free, i.e., $n = p_1 p_2 \\cdots p_r$ for distinct primes $p_i$.\n\nFor a square-free $n$, the factorization is $n = p_1 \\cdots p_r$. The formula for $\\lambda(n)$ simplifies to:\n$$ \\lambda(n) = \\operatorname{lcm}(\\lambda(p_1), \\dots, \\lambda(p_r)) = \\operatorname{lcm}(p_1-1, \\dots, p_r-1) $$\nThe condition $\\lambda(n) | n-1$ becomes $\\operatorname{lcm}(p_1-1, \\dots, p_r-1) | n-1$. This is true if and only if $(p_i-1) | (n-1)$ for all $i=1, \\dots, r$. This completes the justification.\n\nThe algorithm is as follows:\n\n1.  By definition, Carmichael numbers are composite. If $n \\le 1$ or $n$ is prime, it is not a Carmichael number.\n2.  Find the prime factorization of $n$. Store factors and their powers, e.g., in a dictionary $\\{p_i: k_i\\}$.\n3.  Check if $n$ is square-free: Iterate through the powers $k_i$. If any $k_i > 1$, $n$ is not square-free. Return `False`. (Note: a composite number must have at least two distinct prime factors or a squared prime factor. The primality test in step 1 and this check cover all non-composite cases or non-square-free composite cases).\n4.  Check the divisibility condition: For each distinct prime factor $p_i$, verify that $(p_i - 1)$ divides $(n-1)$. If this condition fails for any $p_i$, return `False`.\n5.  If $n$ is composite, square-free, and passes all divisibility checks, it is a Carmichael number. Return `True`.\n\n### Computational Complexity Analysis\n\nLet the bit-length of $n$ be $b = \\lceil \\log_2 n \\rceil$.\n\n1.  **Primality Testing**: For the initial check on $n$, a Miller-Rabin test is efficient. For an input of bit-length $b$, it takes $O(k \\cdot b^3)$ time for $k$ rounds of testing. Deterministic variants exist that are polynomial in $b$.\n\n2.  **Integer Factorization**: This is the computational bottleneck. A naive trial division algorithm takes $O(\\sqrt{n}) = O(2^{b/2})$ time. More advanced algorithms like Pollard's rho have a heuristic complexity of $O(n^{1/4}) = O(2^{b/4})$ polylog($n$). State-of-the-art algorithms like the General Number Field Sieve (GNFS) are sub-exponential, with complexity around $\\exp(c \\cdot b^{1/3} (\\log b)^{2/3})$. Let's denote the complexity of factorization as $T_{\\text{factor}}(b)$.\n\n3.  **Post-Factorization Steps**: Once the factorization $n = p_1^{k_1} \\cdots p_r^{k_r}$ is known, the remaining computations are efficient. The number of distinct prime factors, $r$, is bounded by $O(b / \\log b)$.\n    -   **Computing $\\lambda(n)$**: We compute $r$ values of $\\lambda(p_i^{k_i})$ and then find their LCM. Each `lcm` operation involves a `gcd` computation, which, using the Euclidean algorithm, takes $O(b^2)$ time. The total time for computing the LCM of $r$ numbers is $O(r \\cdot b^2) = O(b^3 / \\log b)$.\n    -   **Checking Korselt's Criterion**: Checking if $n$ is square-free takes $O(r)$ time. Checking the $r$ divisibility conditions $(p_i-1) | (n-1)$ involves $r$ modular divisions, each taking $O(b^2)$ time. The total time is $O(r \\cdot b^2) = O(b^3 / \\log b)$.\n\nThe overall complexity is dominated by the factorization step: $O(\\text{Total}) \\approx T_{\\text{factor}}(b)$. For the numbers in the test suite, a combination of trial division and a basic Miller-Rabin primality test is sufficient.", "answer": "```python\nimport math\n\ndef solve():\n    \"\"\"\n    Main function to process test cases for Carmichael numbers and lambda function.\n    \"\"\"\n\n    def power(base, exp, mod):\n        \"\"\"\n        Computes (base^exp) % mod using modular exponentiation.\n        \"\"\"\n        res = 1\n        base %= mod\n        while exp > 0:\n            if exp % 2 == 1:\n                res = (res * base) % mod\n            base = (base * base) % mod\n            exp //= 2\n        return res\n\n    def is_prime(n):\n        \"\"\"\n        Miller-Rabin primality test. It is deterministic for the range of numbers\n        in the test suite.\n        \"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        \n        # Based on deterministic Miller-Rabin bases, for n < 1,373,653,\n        # it is sufficient to test a = {2, 3}. All test cases are below this.\n        # The largest test case is 294409.\n        d = n - 1\n        s = 0\n        while d % 2 == 0:\n            d //= 2\n            s += 1\n        \n        # Test with bases sufficient for the test suite range\n        for a in [2, 3, 5, 7, 11, 13, 17]:\n            if a >= n:\n                break\n            x = power(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(s - 1):\n                x = power(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n        return True\n\n    def get_prime_factorization(n):\n        \"\"\"\n        Computes the prime factorization of n as a dictionary {p: k}.\n        Uses trial division, sufficient for the test case sizes.\n        \"\"\"\n        if n <= 1:\n            return {}\n        \n        factors = {}\n        # Handle factors of 2\n        while n % 2 == 0:\n            factors[2] = factors.get(2, 0) + 1\n            n //= 2\n        \n        # Handle odd factors\n        d = 3\n        while d * d <= n:\n            while n % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                n //= d\n            d += 2\n            \n        if n > 1:\n            factors[n] = factors.get(n, 0) + 1\n            \n        return factors\n\n    def compute_lambda(n, factors):\n        \"\"\"\n        Computes the Carmichael function lambda(n) using its prime factorization.\n        \"\"\"\n        if n == 1:\n            return 1\n\n        if not factors:\n             # This case handles n > 1 with no computed factors, implying n is prime.\n             # Re-checking primality is redundant if factors is always computed first.\n             # If `n` is prime, `factors` will be `{n: 1}`.\n             # This branch is for theoretical completeness.\n             return n - 1\n\n        lambda_vals = []\n        for p, k in factors.items():\n            if p == 2:\n                if k == 1:\n                    lambda_vals.append(1)\n                elif k == 2:\n                    lambda_vals.append(2)\n                else: # k >= 3\n                    lambda_vals.append(2**(k - 2))\n            else: # p is an odd prime\n                lambda_vals.append((p - 1) * (p**(k - 1)))\n        \n        if not lambda_vals:\n            return 1 # Should only happen for n=1\n            \n        res = lambda_vals[0]\n        for i in range(1, len(lambda_vals)):\n            # lcm(a, b) = (|a*b|) // gcd(a, b)\n            res = (res * lambda_vals[i]) // math.gcd(res, lambda_vals[i])\n        \n        return res\n\n    def is_carmichael(n, factors):\n        \"\"\"\n        Determines if n is a Carmichael number using Korselt's criterion.\n        \"\"\"\n        # A Carmichael number must be composite.\n        if n <= 1 or is_prime(n):\n            return False\n\n        # Condition 1: n must be square-free.\n        for k in factors.values():\n            if k > 1:\n                return False\n\n        # Condition 2: For every prime factor p of n, (p-1) must divide (n-1).\n        for p in factors.keys():\n            if (n - 1) % (p - 1) != 0:\n                return False\n        \n        # Passed all conditions for a composite number.\n        return True\n\n    test_cases = [1, 2, 15, 512, 561, 1105, 1729, 2465, 6601, 8911, 41041, 294409]\n    results = []\n\n    for n in test_cases:\n        factors = get_prime_factorization(n)\n        is_c = is_carmichael(n, factors)\n        # Handle lambda for primes correctly if factorization is empty for prime `n`\n        # In this implementation, get_prime_factorization handles prime `n` correctly.\n        lambda_n = compute_lambda(n, factors)\n\n        # Python's bool `True`/`False` needs to be lowercase `true`/`false` in JSON-like output\n        results.append(f\"[{str(is_c).lower()},{lambda_n}]\")\n\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "3013818"}]}