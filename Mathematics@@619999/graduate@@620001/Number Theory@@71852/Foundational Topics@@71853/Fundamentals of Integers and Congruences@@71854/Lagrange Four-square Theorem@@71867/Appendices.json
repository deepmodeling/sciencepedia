{"hands_on_practices": [{"introduction": "One of the most beautiful proofs of Lagrange's four-square theorem comes from the geometry of numbers, using Hermann Minkowski's celebrated convex body theorem. This powerful, non-constructive approach connects the discrete properties of integers to the continuous world of geometric volumes. This exercise [@problem_id:3016909] invites you to derive the quantitative heart of this proof, revealing how geometry compels number theory to yield a solution. By establishing the minimum size for a 4-dimensional sphere that guarantees it must contain a specific lattice point, you will gain a deep appreciation for this elegant interplay between fields.", "problem": "Let $m \\in \\mathbb{N}$ and let $\\Lambda \\subset \\mathbb{R}^{4}$ be a full-rank lattice with covolume (determinant) $\\det(\\Lambda) = d > 0$. Consider the origin-centered Euclidean ball $B(R) = \\{ x \\in \\mathbb{R}^{4} : \\|x\\|_{2} \\le R \\}$, which is a centrally symmetric convex body. In the geometry-of-numbers approach to proving Lagrange's four-square theorem, one constructs a lattice in $\\mathbb{R}^{4}$ whose covolume depends on $m$ and invokes a volumetric threshold to guarantee a nonzero lattice point inside a suitably scaled ball, ultimately producing a representation of $m$ as a sum of four squares.\n\nStarting only from fundamental definitions (the definition of a lattice and its covolume in $\\mathbb{R}^{4}$), well-tested facts about convex bodies (the volume of a ball in $\\mathbb{R}^{4}$), and the statement of the Minkowski convex body theorem, determine the minimal radius $R_{\\min}(d)$, as a closed-form analytic expression in $d$, such that $B(R)$ must contain a nonzero point of $\\Lambda$ whenever $R \\ge R_{\\min}(d)$.\n\nYour final answer must be this exact analytic expression for $R_{\\min}(d)$ with no rounding. In your reasoning, explain how this threshold interfaces with the lattice constructions used in the geometry-of-numbers proof of Lagrange's four-square theorem, but do not provide any shortcut formulas beyond the stated foundational facts.", "solution": "The problem is valid. It is a well-posed mathematical question grounded in the established principles of the geometry of numbers.\n\nThe problem asks for the minimal radius $R_{\\min}(d)$ of a $4$-dimensional Euclidean ball $B(R)$ that is guaranteed to contain a nonzero point of any given full-rank lattice $\\Lambda \\subset \\mathbb{R}^{4}$ with covolume $d$. This determination is to be made using Minkowski's convex body theorem.\n\nLet us begin by stating the necessary foundational principles.\n\n1.  **Minkowski's Convex Body Theorem**: Let $\\Lambda$ be a full-rank lattice in $\\mathbb{R}^{n}$ with covolume $\\det(\\Lambda)$. Let $S$ be a compact, convex, centrally symmetric subset of $\\mathbb{R}^{n}$. If the volume of $S$, denoted $\\text{vol}(S)$, satisfies the inequality\n    $$\n    \\text{vol}(S) \\ge 2^n \\det(\\Lambda),\n    $$\n    then $S$ contains at least one lattice point other than the origin.\n\n2.  **Volume of an n-dimensional Ball**: The volume of an $n$-dimensional Euclidean ball of radius $R$ is given by the formula\n    $$\n    V_n(R) = \\frac{\\pi^{n/2}}{\\Gamma(\\frac{n}{2} + 1)} R^n,\n    $$\n    where $\\Gamma$ is the Gamma function.\n\nIn the context of the given problem, the space is $\\mathbb{R}^{4}$, so $n=4$. The lattice is $\\Lambda$ with covolume $\\det(\\Lambda) = d$. The convex body is the origin-centered ball $B(R) = \\{ x \\in \\mathbb{R}^{4} : \\|x\\|_{2} \\le R \\}$. This body is compact, convex, and centrally symmetric ($x \\in B(R) \\implies -x \\in B(R)$), so Minkowski's theorem is applicable.\n\nFirst, we calculate the volume of the $4$-dimensional ball $B(R)$. Using the general formula with $n=4$:\n$$\n\\text{vol}(B(R)) = V_4(R) = \\frac{\\pi^{4/2}}{\\Gamma(\\frac{4}{2} + 1)} R^4 = \\frac{\\pi^2}{\\Gamma(3)} R^4.\n$$\nThe Gamma function for integer arguments $k > 0$ satisfies $\\Gamma(k) = (k-1)!$. Thus, $\\Gamma(3) = (3-1)! = 2! = 2$.\nThe volume of the $4$-ball is therefore:\n$$\n\\text{vol}(B(R)) = \\frac{\\pi^2}{2} R^4.\n$$\nNow, we apply Minkowski's theorem. The condition for $B(R)$ to contain a nonzero point of $\\Lambda$ is:\n$$\n\\text{vol}(B(R)) \\ge 2^4 \\det(\\Lambda).\n$$\nSubstituting the expressions for the volume and the covolume $d$:\n$$\n\\frac{\\pi^2}{2} R^4 \\ge 16d.\n$$\nTo find the radius $R$ that satisfies this condition, we solve the inequality for $R$:\n$$\n\\pi^2 R^4 \\ge 32d\n$$\n$$\nR^4 \\ge \\frac{32d}{\\pi^2}\n$$\n$$\nR \\ge \\left(\\frac{32d}{\\pi^2}\\right)^{1/4}.\n$$\nThe problem asks for the minimal radius $R_{\\min}(d)$ such that for any $R \\ge R_{\\min}(d)$, the ball $B(R)$ is guaranteed to contain a nonzero lattice point. From the inequality above, this minimal radius is precisely the lower bound of the valid range for $R$.\n$$\nR_{\\min}(d) = \\left(\\frac{32d}{\\pi^2}\\right)^{1/4}.\n$$\nThis expression can be written as $R_{\\min}(d) = \\frac{2(2d)^{1/4}}{\\pi^{1/2}}$.\n\nThe problem also requires an explanation of how this threshold interfaces with the proof of Lagrange's four-square theorem. The geometry-of-numbers proof of this theorem proceeds as follows:\n\nLet $m \\in \\mathbb{N}$ be the integer we wish to represent as a sum of four squares. For simplicity (following the classical proof), let's assume $m=p$ is an odd prime. The proof can be extended to all integers using Euler's four-square identity.\n\n1.  **Lattice Construction**: One first proves that there exist integers $a, b$ such that $a^2 + b^2 + 1 \\equiv 0 \\pmod p$. Then, one constructs a specific lattice $\\Lambda_p \\subset \\mathbb{Z}^4$ defined by\n    $$\n    \\Lambda_p = \\{ (x_1, x_2, x_3, x_4) \\in \\mathbb{Z}^4 \\,|\\, x_1 \\equiv ax_3 + bx_4 \\pmod p, \\, x_2 \\equiv bx_3 - ax_4 \\pmod p \\}.\n    $$\n    This is a full-rank sublattice of the integer lattice $\\mathbb{Z}^4$. For each pair of choices for $x_3, x_4 \\pmod p$, the values of $x_1, x_2 \\pmod p$ are uniquely determined. Thus, there are $p^2$ distinct residue classes modulo $p$ in the quotient group $\\mathbb{Z}^4 / \\Lambda_p$. The covolume of this lattice is the index of $\\Lambda_p$ in $\\mathbb{Z}^4$ multiplied by the covolume of $\\mathbb{Z}^4$ (which is $1$), so $\\det(\\Lambda_p) = d = p^2$.\n\n2.  **Lattice Point Property**: A crucial property of this lattice is that for any point $x = (x_1, x_2, x_3, x_4) \\in \\Lambda_p$, its squared Euclidean norm $\\|x\\|_2^2 = x_1^2+x_2^2+x_3^2+x_4^2$ is an integer multiple of $p$. This can be shown by considering the norm modulo $p$:\n    \\begin{align*}\n    \\|x\\|_2^2 &\\equiv (ax_3+bx_4)^2 + (bx_3-ax_4)^2 + x_3^2 + x_4^2 \\pmod p \\\\\n    &\\equiv (a^2x_3^2+2abx_3x_4+b^2x_4^2) + (b^2x_3^2-2abx_3x_4+a^2x_4^2) + x_3^2 + x_4^2 \\pmod p \\\\\n    &\\equiv (a^2+b^2)(x_3^2+x_4^2) + (x_3^2+x_4^2) \\pmod p \\\\\n    &\\equiv (a^2+b^2+1)(x_3^2+x_4^2) \\pmod p.\n    \\end{align*}\n    By construction, $a^2+b^2+1 \\equiv 0 \\pmod p$, so $\\|x\\|_2^2 \\equiv 0 \\pmod p$.\n\n3.  **Application of the Minkowski Bound**: We now apply our derived result for the minimal radius. For the lattice $\\Lambda_p$, the covolume is $d = p^2$. Minkowski's theorem guarantees the existence of a *nonzero* point $x \\in \\Lambda_p$ inside the ball $B(R)$ as long as $R \\ge R_{\\min}(p^2)$. Specifically, there exists a nonzero $x \\in \\Lambda_p$ such that $\\|x\\|_2 \\le R_{\\min}(p^2)$. The squared norm of this point must satisfy:\n    $$\n    \\|x\\|_2^2 \\le (R_{\\min}(p^2))^2 = \\left( \\left(\\frac{32p^2}{\\pi^2}\\right)^{1/4} \\right)^2 = \\left(\\frac{32p^2}{\\pi^2}\\right)^{1/2} = \\frac{\\sqrt{32}p}{\\pi} = \\frac{4\\sqrt{2}}{\\pi}p.\n    $$\n\n4.  **Conclusion**: We have found a nonzero integer vector $x = (x_1, x_2, x_3, x_4)$ for which two conditions hold:\n    (a) $\\|x\\|_2^2$ is a positive integer multiple of $p$.\n    (b) $\\|x\\|_2^2 \\le \\frac{4\\sqrt{2}}{\\pi}p$.\n    Numerically, $\\frac{4\\sqrt{2}}{\\pi} \\approx \\frac{4 \\times 1.4142}{3.1416} \\approx 1.799 < 2$. So we have $0 < \\|x\\|_2^2 < 2p$.\n    The only positive integer multiple of $p$ that is strictly less than $2p$ is $p$ itself. Therefore, we must have:\n    $$\n    \\|x\\|_2^2 = x_1^2 + x_2^2 + x_3^2 + x_4^2 = p.\n    $$\n    This demonstrates that $p$ can be written as a sum of four integer squares, which is the essence of the theorem. The threshold $R_{\\min}(d)$ is thus the critical component that provides the upper bound on the norm, allowing us to \"trap\" its value to be exactly $p$.", "answer": "$$\n\\boxed{\\left(\\frac{32d}{\\pi^2}\\right)^{1/4}}\n$$", "id": "3016909"}, {"introduction": "While existence proofs are profound, they often do not provide a method for finding the object they guarantee. This practice [@problem_id:3016910] transitions from the abstract to the concrete, challenging you to devise a constructive algorithm that finds a four-square representation for any given integer. The key insight lies in decomposing the problem: a sum of four squares, $n = a^2 + b^2 + c^2 + d^2$, can be viewed as the sum of two numbers, $(a^2+b^2)$ and $(c^2+d^2)$, each of which is a sum of two squares. This exercise will sharpen your algorithmic thinking and programming skills, transforming an abstract theorem into a tangible computational tool.", "problem": "Design and implement a complete, runnable program that, for each integer input in a fixed test suite, constructs a canonical representation of that integer as a sum of four squares, justified from first principles. The program must not rely on external input and must compute and output the representations directly. The target concept is grounded in number theory and should be approached algorithmically, starting from fundamental definitions and well-tested facts about integer squares.\n\nBegin from the following foundational base:\n- The set of integers $\\mathbb{Z}$ with standard addition and multiplication, and the definition of a square $k^2$ for any integer $k$ as $k \\cdot k$.\n- Basic properties of modular arithmetic, especially the residues of squares modulo $8$, namely that any square is congruent to $0$, $1$, or $4$ modulo $8$.\n- The structure of integer lattices $\\mathbb{Z}^d$ and the Euclidean norm on $\\mathbb{Z}^d$, defined for a vector $(x_1,\\dots,x_d)$ by $\\| (x_1,\\dots,x_d) \\|^2 = \\sum_{i=1}^{d} x_i^2$, which is always an integer.\n\nYour objective is to construct, for each integer $n$ in the test suite, a quadruple of nonnegative integers $(a,b,c,d)$ in nondecreasing order such that\n$$\na^2 + b^2 + c^2 + d^2 = n.\n$$\nThe algorithmic design must follow a principled approach: derive a method to reduce the problem to operations on the set of all sums of two squares up to an appropriate bound, and justify why combining two such sums suffices to produce four-square representations for all inputs in the test suite. You must ensure the construction is canonical by deterministically selecting and ordering the quadruple to guarantee reproducibility.\n\nYour program must implement and utilize the following ideas without resorting to unproven shortcuts:\n- Define the set $\\mathcal{S}_N = \\{ x^2 + y^2 \\mid x,y \\in \\mathbb{Z}_{\\ge 0}, \\, x^2 + y^2 \\le N \\}$ for a suitable bound $N$ derived from the largest test case.\n- Show that any representation $n = a^2 + b^2 + c^2 + d^2$ can be grouped as $(a^2 + b^2) + (c^2 + d^2)$, and thus corresponds to a decomposition $n = s + t$ with $s,t \\in \\mathcal{S}_N$.\n- Design a deterministic search strategy over $\\mathcal{S}_N$ to find such a decomposition $n = s + t$, and retrieve the corresponding $(a,b,c,d)$.\n\nTest suite:\n- The test cases are the integers $n \\in \\{\\,0,\\,1,\\,7,\\,15,\\,23,\\,310,\\,999,\\,1024,\\,12345,\\,65535\\,\\}$.\n- This suite includes boundary values such as $n = 0$, perfect squares such as $n = 1024$, integers of the form $4^a(8b+7)$ such as $n = 7$ and $n = 65535$ which are not representable as sums of three squares, and heterogeneous composite and prime values.\n\nAnswer specification:\n- For each $n$ in the test suite, produce a list $[a,b,c,d]$ of nonnegative integers with $a \\le b \\le c \\le d$ and $a^2 + b^2 + c^2 + d^2 = n$.\n- The final output must be a single line containing the results aggregated in order of the test suite, as a comma-separated list enclosed in square brackets, with each entry itself being a list of four integers. For example, the output format must be\n$$\n[\\,[a_1,b_1,c_1,d_1],\\,[a_2,b_2,c_2,d_2],\\,\\dots\\,]\n$$\nwhere each $[a_i,b_i,c_i,d_i]$ corresponds to the representation for the $i$-th test case.\n\nNo physical units, angle units, or percentage formatting are required; all outputs are integer lists encoding the four-square representations.", "solution": "We describe and justify an explicit algorithmic construction of four-square representations for integers, based on first principles about integer squares and lattice norms, and then refine it into a deterministic, efficient program suitable for the given test suite.\n\nFoundational setup. For any integer $n \\ge 0$, the integer lattice $\\mathbb{Z}^4$ contains vectors $(a,b,c,d)$ whose squared Euclidean norm is\n$$\n\\| (a,b,c,d) \\|^2 = a^2 + b^2 + c^2 + d^2.\n$$\nWe seek nonnegative integers $(a,b,c,d)$ such that $\\| (a,b,c,d) \\|^2 = n$. A direct observation is that any such quadruple induces a decomposition\n$$\nn = (a^2 + b^2) + (c^2 + d^2),\n$$\nthat is, a sum of two elements from the set of sums of two squares. This motivates reducing the search space from $\\mathbb{Z}_{\\ge 0}^4$ to combinations of $\\mathbb{Z}_{\\ge 0}^2$.\n\nDefine, for a bound $N \\in \\mathbb{Z}_{\\ge 0}$,\n$$\n\\mathcal{S}_N = \\{ x^2 + y^2 \\mid x,y \\in \\mathbb{Z}_{\\ge 0}, \\, x^2 + y^2 \\le N \\}.\n$$\nThe key principle is that if $n \\le N$ and there exists $(a,b,c,d)$ with $a^2 + b^2 + c^2 + d^2 = n$, then $a^2 + b^2 \\in \\mathcal{S}_N$ and $c^2 + d^2 \\in \\mathcal{S}_N$, so $n$ decomposes as a sum $s + t$ with $s,t \\in \\mathcal{S}_N$. Conversely, any such decomposition $n = s + t$ with $s = x^2 + y^2$, $t = u^2 + v^2$ immediately yields a four-square representation\n$$\nn = x^2 + y^2 + u^2 + v^2.\n$$\nThus, existence of a four-square representation implies existence of a decomposition into two sums of two squares within the bounded set $\\mathcal{S}_N$. This reduction is purely combinatorial and uses only the definitions of squares and lattice norms.\n\nDeterministic construction. To construct a canonical representation, we proceed as follows for a fixed upper bound $N$ (chosen as the largest integer in the test suite):\n- Enumerate all pairs $(x,y)$ with $x,y \\in \\{0,1,2,\\dots,\\lfloor \\sqrt{N} \\rfloor\\}$, compute $s = x^2 + y^2$, and record for each $s \\le N$ one canonical pair $(x,y)$ that realizes $s$. This builds a dictionary representing $\\mathcal{S}_N$:\n$$\nD[s] = (x,y), \\quad s \\in \\mathcal{S}_N.\n$$\nWhen multiple pairs yield the same $s$, we keep the first encountered to enforce determinism.\n\n- For a given $n \\le N$, perform a deterministic scan of the set $\\mathcal{S}_N$ in ascending order of $s$. For each $s \\in \\mathcal{S}_N$ with $s \\le n$, check if $t = n - s$ also lies in $\\mathcal{S}_N$; that is, check if $t \\in D$. If such $s$ and $t$ are found, we have $n = s + t$ with $s = x^2 + y^2$ and $t = u^2 + v^2$ for $(x,y) = D[s]$ and $(u,v) = D[t]$. Then\n$$\nn = x^2 + y^2 + u^2 + v^2,\n$$\nand the quadruple $(x,y,u,v)$ forms a valid representation. We canonicalize it by sorting to obtain $(a,b,c,d)$ with $a \\le b \\le c \\le d$, guaranteeing a deterministic output.\n\nCorrectness justification. The enumeration builds $\\mathcal{S}_N$ completely for nonnegative pairs $(x,y)$ up to the bound imposed by $N$, since any square $x^2$ with $x \\le \\lfloor \\sqrt{N} \\rfloor$ is included. For each test case $n$ in the given suite, the four-square theorem assures the existence of $(a,b,c,d)$ such that $a^2 + b^2 + c^2 + d^2 = n$. Then $s_1 = a^2 + b^2 \\in \\mathcal{S}_N$ and $s_2 = c^2 + d^2 \\in \\mathcal{S}_N$, with $s_1 + s_2 = n$. Since we iterate $s$ in ascending order, we must encounter either $s_1$ or $s_2$ eventually, and when we do, $n - s$ is the other one; both are present in $D$ because they are sums of two squares bounded by $N$. Thus the search always locates a valid decomposition, and the corresponding quadruple exists and is constructed explicitly.\n\nBoundary and edge cases:\n- For $n = 0$, we have the representation $(0,0,0,0)$.\n- For perfect squares like $n = 1024 = 32^2$, the algorithm will discover decompositions such as $1024 = 1024 + 0 = 32^2 + 0^2 + 0^2 + 0^2$.\n- For integers of the form $4^a(8b+7)$, such as $7$ and $65535$, which are not representable as sums of three squares, the construction via two sums of two squares remains valid and finds a four-square representation, consistent with modular restrictions on squares modulo $8$.\n\nComplexity considerations. Building $D$ requires iterating $x,y$ up to $\\lfloor \\sqrt{N} \\rfloor$, which is $O\\!\\left( \\left\\lfloor \\sqrt{N} \\right\\rfloor^2 \\right)$. The search for each $n$ scans $|\\mathcal{S}_N|$ values up to $n$, performing $O(1)$ dictionary lookups per candidate $s$. For the provided test suite, where $N$ is moderate, this yields efficient execution within the constraints of the runtime environment.\n\nOutput format. For each test case $n$ in the order given, the program outputs a list $[a,b,c,d]$ of nonnegative integers such that $a^2 + b^2 + c^2 + d^2 = n$, with $a \\le b \\le c \\le d$. The final printed line is a single string encoding the list of these lists in order, namely\n$$\n[\\,[a_1,b_1,c_1,d_1],\\,[a_2,b_2,c_2,d_2],\\,\\dots\\,],\n$$\nwhere each $[a_i,b_i,c_i,d_i]$ corresponds to the $i$-th test case from the test suite.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef build_sum_of_two_squares_map(N: int):\n    \"\"\"\n    Build a dictionary mapping s = x^2 + y^2 (s <= N) to one canonical pair (x, y),\n    with x, y >= 0 and x, y <= floor(sqrt(N)).\n    Determinism is ensured by scanning x and y in ascending order and storing\n    the first occurrence for each sum s.\n    \"\"\"\n    max_root = int(N**0.5)\n    sum_map = {}\n    for x in range(max_root + 1):\n        x2 = x * x\n        for y in range(max_root + 1):\n            s = x2 + y * y\n            if s > N:\n                # Since y increases, further y will only increase s; break inner loop.\n                break\n            # Store only the first encountered pair for determinism.\n            if s not in sum_map:\n                sum_map[s] = (x, y)\n    # For deterministic iteration order later, also keep a sorted list of keys.\n    keys_sorted = sorted(sum_map.keys())\n    return sum_map, keys_sorted\n\ndef four_squares_via_two_sums(n: int, sum_map: dict, keys_sorted: list):\n    \"\"\"\n    Given n and a precomputed sum-of-two-squares map up to max N,\n    find a decomposition n = s + t with s, t in sum_map.\n    Return the canonical sorted quadruple [a, b, c, d] with a^2 + b^2 + c^2 + d^2 = n.\n    \"\"\"\n    if n == 0:\n        return [0, 0, 0, 0]\n    # Iterate sums s in ascending order up to n\n    for s in keys_sorted:\n        if s > n:\n            break\n        t = n - s\n        if t in sum_map:\n            x, y = sum_map[s]\n            u, v = sum_map[t]\n            quadruple = sorted([x, y, u, v])\n            # Verify correctness (defensive check in case of logic errors)\n            if quadruple[0]**2 + quadruple[1]**2 + quadruple[2]**2 + quadruple[3]**2 == n:\n                return quadruple\n    # In theory, for all n this should not happen due to Lagrange's theorem.\n    # As a fallback (should never trigger for the provided test suite),\n    # perform a direct nested search.\n    max_root = int(n**0.5)\n    for a in range(max_root + 1):\n        a2 = a * a\n        for b in range(max_root + 1):\n            b2 = b * b\n            for c in range(max_root + 1):\n                c2 = c * c\n                d2 = n - (a2 + b2 + c2)\n                if d2 < 0:\n                    break\n                d = int(d2**0.5)\n                if d * d == d2:\n                    quadruple = sorted([a, b, c, d])\n                    return quadruple\n    # If no representation found (should not occur), return a sentinel.\n    return [0, 0, 0, 0]\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [0, 1, 7, 15, 23, 310, 999, 1024, 12345, 65535]\n    max_n = max(test_cases)\n\n    # Precompute the map of sums of two squares up to max_n.\n    sum_map, keys_sorted = build_sum_of_two_squares_map(max_n)\n\n    results = []\n    for n in test_cases:\n        quad = four_squares_via_two_sums(n, sum_map, keys_sorted)\n        results.append(quad)\n\n    # Final print statement in the exact required format.\n    # Single line: list of lists with comma-separated integers.\n    print(\"[\" + \",\".join(\"[\" + \",\".join(map(str, quad)) + \"]\" for quad in results) + \"]\")\n\nsolve()\n```", "id": "3016910"}]}