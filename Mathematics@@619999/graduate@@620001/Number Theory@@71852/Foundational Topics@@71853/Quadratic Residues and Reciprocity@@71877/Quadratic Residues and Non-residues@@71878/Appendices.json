{"hands_on_practices": [{"introduction": "A deep understanding of number theory arises not just from memorizing theorems, but from dissecting the intricate machinery of their proofs. This exercise challenges you to act as a reviewer of a mathematical argument by analyzing a common but flawed modification to the proof of Gauss's lemma [@problem_id:3013379]. By pinpointing the logical failure in the proposed method, you will gain a more profound appreciation for why the standard construction of the proof is both subtle and necessary.", "problem": "Let $p$ be an odd prime and let $a \\in \\mathbb{Z}$ with $\\gcd(a,p)=1$. The Legendre symbol $\\left(\\frac{a}{p}\\right)$ is defined by $\\left(\\frac{a}{p}\\right)=1$ if $a$ is a quadratic residue modulo $p$ and $\\left(\\frac{a}{p}\\right)=-1$ otherwise. In one standard route toward relating $\\left(\\frac{a}{p}\\right)$ to a sign coming from a product, many proofs consider the least positive residues of the multiples $j a$ modulo $p$ for $1 \\le j \\le \\frac{p-1}{2}$ and then perform a parity count relative to the threshold $\\frac{p}{2}$.\n\nA student instead proposes to take $j$ through the full range $1 \\le j \\le p-1$, to count how many least positive residues of $j a \\bmod p$ lie in the open interval $\\left(\\frac{p}{2},p\\right)$, and to use the parity of this count as a proxy for $\\left(\\frac{a}{p}\\right)$. Identify the precise logical error in this proposal and select the minimal correction that makes the counting argument valid.\n\nChoose the single best answer.\n\nA. Over the full range $1 \\le j \\le p-1$, the multiset of least positive residues of $j a \\bmod p$ is a permutation of $\\{1,2,\\dots,p-1\\}$, and for each pair $\\{j,p-j\\}$ the corresponding residues $r_j$ and $r_{p-j}$ satisfy $r_{p-j}=p-r_j$. Since $p$ is odd, exactly one of $r_j$ and $r_{p-j}$ lies in $\\left(\\frac{p}{2},p\\right)$, so the proposed count is always $\\frac{p-1}{2}$, independent of $a$. Thus the method cannot distinguish residues from nonresidues. The minimal correction is to break this symmetry by restricting to $1 \\le j \\le \\frac{p-1}{2}$ (equivalently, to choose one representative from each pair $\\{j,p-j\\}$), and then to perform the parity count relative to $\\frac{p}{2}$.\n\nB. The only mistake is the omission of $j=0$. If one counts least positive residues for $0 \\le j \\le p-1$ and uses the parity of those exceeding $\\frac{p}{2}$, the method becomes valid without further change.\n\nC. The defect arises from the choice of threshold $\\frac{p}{2}$. Keeping $1 \\le j \\le p-1$ but counting those least positive residues in $\\left(\\frac{p}{3},p\\right)$ instead restores correctness for all odd primes $p$.\n\nD. The argument fails only when $p \\equiv 1 \\pmod{4}$. When $p \\equiv 3 \\pmod{4}$, taking $1 \\le j \\le p-1$ and counting those least positive residues in $\\left(\\frac{p}{2},p\\right)$ does yield the correct parity for $\\left(\\frac{a}{p}\\right)$.\n\nE. There is no error: because multiplication by $a$ permutes the nonzero residue classes modulo $p$, the number of least positive residues of $j a \\bmod p$ that lie in $\\left(\\frac{p}{2},p\\right)$ depends on $a$, so the parity correctly recovers $\\left(\\frac{a}{p}\\right)$ for all $a$.", "solution": "The user-provided problem statement is valid. It is a well-posed question within the domain of elementary number theory, based on established mathematical principles.\n\nThe student's proposal is to calculate the Legendre symbol $\\left(\\frac{a}{p}\\right)$ by counting the number of least positive residues of $ja \\pmod p$ for $j$ in the range $1 \\le j \\le p-1$ that fall into the interval $\\left(\\frac{p}{2},p\\right)$, and then checking the parity of this count.\n\nLet's analyze this proposal.\nLet $S = \\{1, 2, \\dots, p-1\\}$. The student considers the multiset of least positive residues $R_a = \\{ (ja \\pmod p) \\mid j \\in S \\}$.\nSince $p$ is a prime number and $\\gcd(a,p)=1$, the map $x \\mapsto ax$ is an automorphism of the multiplicative group of integers modulo $p$, $(\\mathbb{Z}/p\\mathbb{Z})^\\times$. The set of least positive representatives of the elements in $(\\mathbb{Z}/p\\mathbb{Z})^\\times$ is precisely the set $S$.\nTherefore, for any $a$ with $\\gcd(a,p)=1$, the set of residues $R_a$ is simply a permutation of the set $S$. As sets, they are identical:\n$$R_a = \\{1, 2, \\dots, p-1\\}$$\nThe student proposes to count the number of elements in $R_a$ that are in the open interval $\\left(\\frac{p}{2}, p\\right)$. Let this count be $N$. Since $R_a$ is always the set $\\{1, 2, \\dots, p-1\\}$ regardless of $a$, the count $N$ will be independent of $a$.\n\nLet's calculate $N$. The integers $k$ such that $1 \\le k \\le p-1$ and $\\frac{p}{2} < k < p$ are the integers from $\\lfloor \\frac{p}{2} \\rfloor + 1$ to $p-1$.\nSince $p$ is an odd prime, we can write $p = 2k_0+1$ for some integer $k_0 \\ge 1$. Then $\\frac{p-1}{2} = k_0$, and $\\frac{p}{2} = k_0 + \\frac{1}{2}$.\nThe condition becomes $k_0 + \\frac{1}{2} < k < 2k_0+1$. The integers satisfying this are $k_0+1, k_0+2, \\dots, 2k_0$.\nThe number of these integers is $N = 2k_0 - (k_0+1) + 1 = k_0$.\nThus, the count is always $N = k_0 = \\frac{p-1}{2}$.\n\nThe student's method proposes that $\\left(\\frac{a}{p}\\right)$ is given by the parity of $N$, specifically $(-1)^N = (-1)^{(p-1)/2}$.\nFrom the theory of quadratic residues, it is a known result (as part of the first supplement to the law of quadratic reciprocity) that $\\left(\\frac{-1}{p}\\right) = (-1)^{(p-1)/2}$.\nSo, the student's method does not calculate $\\left(\\frac{a}{p}\\right)$, but rather calculates $\\left(\\frac{-1}{p}\\right)$, a value which is independent of $a$. This method fails to distinguish between quadratic residues and non-residues for a given $p$. This is the precise logical error.\n\nThe standard method that the student's proposal resembles is Gauss's Lemma. Gauss's Lemma restricts the range of $j$ to $1 \\le j \\le \\frac{p-1}{2}$. Let $m$ be the number of least positive residues of $ja \\pmod p$ for $j \\in \\{1, \\dots, \\frac{p-1}{2}\\}$ that are greater than $\\frac{p}{2}$. Then Gauss's Lemma states that $\\left(\\frac{a}{p}\\right) = (-1)^m$. The count $m$ *does* depend on $a$, unlike the student's count $N$. The reason for the failure of the student's method is the symmetric range $1 \\le j \\le p-1$. For any $j_0 \\in \\{1, \\dots, p-1\\}$, let $r_{j_0}$ be the least positive residue of $j_0 a \\pmod p$. Then for $j = p - j_0$, the residue is $(p-j_0)a \\pmod p \\equiv -j_0 a \\pmod p$, which has a least positive residue of $p-r_{j_0}$. The set of residues $\\{r_j\\}$ for $j=1, \\dots, p-1$ consists of pairs $(r_{j_0}, p-r_{j_0})$. Since $p$ is odd, $p/2$ is not an integer. For any pair $(r, p-r)$, exactly one element is in the interval $\\left(\\frac{p}{2}, p\\right)$. There are $\\frac{p-1}{2}$ such pairs of indices $\\{j_0, p-j_0\\}$, so the total count is always $\\frac{p-1}{2}$. Restricting $j$ to $1 \\le j \\le \\frac{p-1}{2}$ breaks this symmetry and allows for a count that depends on $a$.\n\nNow, we evaluate each option.\n\nA. This option correctly states that the set of residues is a permutation of $\\{1, 2, \\dots, p-1\\}$. It correctly identifies the symmetry: for each pair of indices $\\{j, p-j\\}$, the residues are $r_j$ and $p-r_j$. It correctly concludes that this implies exactly one of these two residues is in $\\left(\\frac{p}{2}, p\\right)$. It correctly deduces that the total count is therefore always $\\frac{p-1}{2}$, independent of $a$, which is the core error. It then correctly identifies the minimal correction: restrict the range of $j$ to $1 \\le j \\le \\frac{p-1}{2}$, which breaks the symmetry and turns the flawed argument into Gauss's Lemma. This option is a complete and accurate analysis. This is **Correct**.\n\nB. This option suggests including $j=0$. The product $0 \\cdot a = 0$, so the residue is $0$. The number $0$ is not in the interval $\\left(\\frac{p}{2}, p\\right)$. Adding this does not change the count of residues in that interval. The total count would remain $\\frac{p-1}{2}$, and the method would still be independent of $a$. This is **Incorrect**.\n\nC. This option suggests changing the threshold from $\\frac{p}{2}$ to $\\frac{p}{3}$. As shown in the initial analysis, the set of residues to be counted is always $\\{1, 2, \\dots, p-1\\}$. Counting how many of these fall into $\\left(\\frac{p}{3}, p\\right)$ would yield a count of $(p-1) - \\lfloor\\frac{p}{3}\\rfloor$. This number is, again, independent of $a$. The fundamental flaw of using the full range $1 \\le j \\le p-1$ is not addressed. This is **Incorrect**.\n\nD. This option claims the argument only fails for $p \\equiv 1 \\pmod{4}$. As derived, the student's method always yields $(-1)^{(p-1)/2}$. If $p \\equiv 3 \\pmod{4}$, then $\\frac{p-1}{2}$ is odd, so the method's result is always $-1$. However, for any prime $p$, there exist quadratic residues $a$ for which $\\left(\\frac{a}{p}\\right)=1$ (for instance, $a=1$). Therefore, the method fails for $p \\equiv 3 \\pmod{4}$ just as it fails for $p \\equiv 1 \\pmod{4}$. The claim is false. This is **Incorrect**.\n\nE. This option claims there is no error. This is verifiably false. It correctly notes that multiplication by $a$ permutes the residue classes, but draws the incorrect conclusion that the count must therefore depend on $a$. The set of elements being permuted is fixed, so the number of elements with a certain property (being greater than $\\frac{p}{2}$) is independent of the specific permutation. This is **Incorrect**.\n\nThe only option that correctly identifies the error, explains its origin, and proposes the correct minimal fix is A.", "answer": "$$\\boxed{A}$$", "id": "3013379"}, {"introduction": "Having explored the subtleties of proofs for prime moduli, we now shift our focus to constructing solutions for composite moduli. This fundamental practice [@problem_id:3021799] requires you to synthesize the theory of quadratic residues with the Chinese Remainder Theorem to determine the exact number of solutions to congruences of the form $x^2 \\equiv a \\pmod{n}$, where $n$ is a product of two distinct odd primes. Mastering this technique is crucial as it forms a cornerstone for understanding the structure of solutions in $\\mathbb{Z}/n\\mathbb{Z}$ and has direct applications in algorithms like integer factorization.", "problem": "Let $p$ and $q$ be distinct odd primes and let $n = pq$. For $a \\in \\mathbb{Z}$, consider the congruence $x^{2} \\equiv a \\pmod{n}$. Starting from the definitions of quadratic residues modulo an odd prime and the Chinese Remainder Theorem (CRT), derive the exact number of solutions $x \\in \\mathbb{Z}/n\\mathbb{Z}$ to $x^{2} \\equiv a \\pmod{n}$ in the following two cases:\n\n- Case (i): $\\gcd(a,n) = 1$ (that is, $a$ is a unit modulo $n$).\n- Case (ii): $p \\mid a$ and $q \\nmid a$.\n\nYour derivation must be explicit and self-contained, beginning from the foundational facts that for an odd prime $r$, the congruence $x^{2} \\equiv b \\pmod{r}$ has either zero, one, or two solutions in $\\mathbb{Z}/r\\mathbb{Z}$ depending on whether $b \\equiv 0 \\pmod{r}$, whether $b$ is a quadratic residue modulo $r$, or whether $b$ is a quadratic non-residue modulo $r$, respectively; and that the Chinese Remainder Theorem (CRT) identifies $\\mathbb{Z}/n\\mathbb{Z} \\cong \\mathbb{Z}/p\\mathbb{Z} \\times \\mathbb{Z}/q\\mathbb{Z}$. Express your final answers in closed form using the Legendre symbols $\\left( \\frac{a}{p} \\right)$ and $\\left( \\frac{a}{q} \\right)$. No numerical approximation is required.", "solution": "The problem asks for the number of solutions to the congruence $x^2 \\equiv a \\pmod{n}$, where $n=pq$ for distinct odd primes $p$ and $q$, under two different conditions on $a \\in \\mathbb{Z}$. The derivation will be based on the foundational principles specified: the Chinese Remainder Theorem (CRT) and the properties of quadratic residues modulo an odd prime.\n\nLet $N$ denote the number of solutions $x \\in \\mathbb{Z}/n\\mathbb{Z}$. The congruence $x^2 \\equiv a \\pmod{n}$ is equivalent to the system of simultaneous congruences:\n$$\n\\begin{cases}\nx^2 \\equiv a \\pmod{p} \\\\\nx^2 \\equiv a \\pmod{q}\n\\end{cases}\n$$\nThe Chinese Remainder Theorem establishes an isomorphism of rings $\\mathbb{Z}/n\\mathbb{Z} \\cong \\mathbb{Z}/p\\mathbb{Z} \\times \\mathbb{Z}/q\\mathbb{Z}$. This implies that for each pair of solutions $(x_p, x_q)$, where $x_p$ is a solution to the first congruence and $x_q$ is a solution to the second, there exists a unique solution $x \\pmod{n}$ that satisfies both. Therefore, the total number of solutions $N$ is the product of the number of solutions to each individual congruence. Let $N_p$ be the number of solutions to $x^2 \\equiv a \\pmod{p}$ and $N_q$ be the number of solutions to $x^2 \\equiv a \\pmod{q}$. Then, $N = N_p \\times N_q$.\n\nWe are given the rule for the number of solutions to $x^2 \\equiv b \\pmod{r}$ for an odd prime $r$. This number can be conveniently expressed using the Legendre symbol, $\\left(\\frac{b}{r}\\right)$. The Legendre symbol is defined as:\n$$\n\\left(\\frac{b}{r}\\right) =\n\\begin{cases}\n1 & \\text{if } b \\text{ is a quadratic residue modulo } r \\text{ and } r \\nmid b \\\\\n-1 & \\text{if } b \\text{ is a quadratic non-residue modulo } r \\\\\n0 & \\text{if } r \\mid b\n\\end{cases}\n$$\nThe number of solutions to $x^2 \\equiv b \\pmod{r}$ is precisely $1 + \\left(\\frac{b}{r}\\right)$. This formula holds for all three cases:\n- If $b$ is a quadratic residue modulo $r$, there are $2$ solutions, and $1 + \\left(\\frac{b}{r}\\right) = 1 + 1 = 2$.\n- If $b$ is a quadratic non-residue modulo $r$, there are $0$ solutions, and $1 + \\left(\\frac{b}{r}\\right) = 1 + (-1) = 0$.\n- If $r \\mid b$, there is $1$ solution ($x \\equiv 0 \\pmod{r}$), and $1 + \\left(\\frac{b}{r}\\right) = 1 + 0 = 1$.\n\nApplying this to our system, we have $N_p = 1 + \\left(\\frac{a}{p}\\right)$ and $N_q = 1 + \\left(\\frac{a}{q}\\right)$.\nThus, the total number of solutions to $x^2 \\equiv a \\pmod{n}$ is given by the general formula:\n$$\nN = \\left(1 + \\left(\\frac{a}{p}\\right)\\right) \\left(1 + \\left(\\frac{a}{q}\\right)\\right)\n$$\nWe now analyze the two specified cases using this formula.\n\nCase (i): $\\gcd(a, n) = 1$.\nThe condition $\\gcd(a, n) = 1$ is equivalent to $\\gcd(a, pq) = 1$. Since $p$ and $q$ are prime, this implies that $p \\nmid a$ and $q \\nmid a$.\nAs a result, $a \\not\\equiv 0 \\pmod{p}$ and $a \\not\\equiv 0 \\pmod{q}$.\nThis means that the Legendre symbols $\\left(\\frac{a}{p}\\right)$ and $\\left(\\frac{a}{q}\\right)$ cannot be $0$; they must be either $1$ or $-1$.\nThe number of solutions $N$ is given directly by our general formula. There is no further simplification required, as this expression provides the exact number of solutions based on the quadratic character of $a$ with respect to $p$ and $q$.\nThe number of solutions is $N = \\left(1 + \\left(\\frac{a}{p}\\right)\\right) \\left(1 + \\left(\\frac{a}{q}\\right)\\right)$.\nFor example, if $a$ is a quadratic residue modulo both $p$ and $q$, then $\\left(\\frac{a}{p}\\right) = 1$ and $\\left(\\frac{a}{q}\\right) = 1$, so $N = (1+1)(1+1) = 4$. If $a$ is a quadratic non-residue modulo either $p$ or $q$ (or both), then at least one of the factors is $1-1=0$, making $N=0$.\n\nCase (ii): $p \\mid a$ and $q \\nmid a$.\nWe again use the general formula for $N$.\nThe condition $p \\mid a$ signifies that $a \\equiv 0 \\pmod{p}$. By the definition of the Legendre symbol, this implies $\\left(\\frac{a}{p}\\right) = 0$.\nThe number of solutions to $x^2 \\equiv a \\pmod{p}$ is $N_p = 1 + \\left(\\frac{a}{p}\\right) = 1 + 0 = 1$. This corresponds to the single solution $x \\equiv 0 \\pmod{p}$.\nThe condition $q \\nmid a$ signifies that $a \\not\\equiv 0 \\pmod{q}$. Therefore, the Legendre symbol $\\left(\\frac{a}{q}\\right)$ is either $1$ or $-1$.\nThe number of solutions to $x^2 \\equiv a \\pmod{q}$ is $N_q = 1 + \\left(\\frac{a}{q}\\right)$. This evaluates to $2$ if $a$ is a quadratic residue modulo $q$, and $0$ if $a$ is a quadratic non-residue modulo $q$.\nThe total number of solutions is the product $N = N_p \\times N_q$.\nSubstituting the values for $N_p$ and $N_q$:\n$$\nN = 1 \\times \\left(1 + \\left(\\frac{a}{q}\\right)\\right) = 1 + \\left(\\frac{a}{q}\\right)\n$$\nThis is the final closed-form expression for the number of solutions in this case. The number of solutions is $2$ if $\\left(\\frac{a}{q}\\right) = 1$ and $0$ if $\\left(\\frac{a}{q}\\right) = -1$.", "answer": "$$\n\\boxed{\\begin{pmatrix} \\left(1 + \\left(\\frac{a}{p}\\right)\\right) \\left(1 + \\left(\\frac{a}{q}\\right)\\right) & 1 + \\left(\\frac{a}{q}\\right) \\end{pmatrix}}\n$$", "id": "3021799"}, {"introduction": "Our final practice bridges the gap between abstract theory and concrete, efficient computation, moving beyond counting solutions to actually finding them. The challenge [@problem_id:3021789] is to derive, analyze, and implement Cipolla's algorithm, a powerful method for computing square roots in a finite field $\\mathbb{F}_p$ by cleverly working within its quadratic extension, $\\mathbb{F}_{p^2}$. This advanced exercise will test your ability to connect concepts from field theory, such as the Frobenius endomorphism, with practical algorithmic design and complexity analysis.", "problem": "Let $p$ be an odd prime and let $\\mathbb{F}_{p}$ denote the finite field of $p$ elements. An element $a \\in \\mathbb{F}_{p}$ is called a quadratic residue modulo $p$ if there exists $x \\in \\mathbb{F}_{p}$ such that $x^{2} \\equiv a \\ (\\mathrm{mod}\\ p)$. The Legendre symbol $\\left( \\frac{a}{p} \\right)$ is defined for $a \\in \\mathbb{F}_{p}^{\\times}$ by $\\left( \\frac{a}{p} \\right) = 1$ if $a$ is a quadratic residue and $\\left( \\frac{a}{p} \\right) = -1$ otherwise, and by $\\left( \\frac{0}{p} \\right) = 0$. Euler’s criterion asserts that for $a \\in \\mathbb{F}_{p}^{\\times}$, $a^{(p-1)/2} \\equiv \\left( \\frac{a}{p} \\right) \\ (\\mathrm{mod}\\ p)$.\n\nStarting from the foundational properties of finite fields, quadratic residues, Euler’s criterion, and the Frobenius endomorphism, derive an algorithm that, when $a$ is a quadratic residue modulo $p$, computes a square root of $a$ by working in the quadratic extension field $\\mathbb{F}_{p^2}$ constructed from $\\mathbb{F}_{p}$ via adjoining a root of an irreducible quadratic over $\\mathbb{F}_{p}$. Your derivation must begin with the core definitions and laws and proceed to a complete, logically sound method that transforms the problem of extracting square roots in $\\mathbb{F}_{p}$ into exponentiation within $\\mathbb{F}_{p^2}$. Establish the correctness of your method purely from first principles of field theory in characteristic $p$, including the action of the Frobenius endomorphism on $\\mathbb{F}_{p^2}$, and justify why the output lies in $\\mathbb{F}_{p}$ when $a$ is a quadratic residue.\n\nAnalyze the expected running time of your algorithm under the standard bit-complexity model for arithmetic in $\\mathbb{Z}/p\\mathbb{Z}$, and prove that the algorithm runs in expected time that is polynomial in $\\log p$, by quantifying both the expected number of trials required to find a suitable quadratic non-residue and the cost of exponentiation in $\\mathbb{F}_{p^2}$.\n\nThen implement the derived algorithm as a program. The program must:\n- Accept no input and use the following fixed test suite of pairs $(a,p)$ with $p$ an odd prime:\n  1. $(0,3)$,\n  2. $(2,3)$,\n  3. $(10,13)$,\n  4. $(2,13)$,\n  5. $(643499475,1000000007)$,\n  6. $(5,11)$,\n  7. $(3,11)$.\n- For each test case, compute one square root $r \\in \\{0,1,\\dots,p-1\\}$ of $a$ modulo $p$ if it exists, and output the smaller of the two roots $r$ and $p-r$ when $a \\neq 0$. If no square root exists in $\\mathbb{F}_{p}$, output $-1$. For the case $a=0$, output $0$.\n- Produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite, with no spaces. For example, the format must be like \"[r_1,r_2,\\dots,r_7]\" where each $r_i$ is the integer result for the $i$-th test case.\n\nYour reasoning must avoid heuristic shortcuts and must be grounded in the stated base of definitions and properties. No physical quantities are involved, and there is no angle unit. All numeric answers in the test suite are integers. The final program’s output must be in the exact single-line format specified above.", "solution": "The problem requires the derivation, complexity analysis, and implementation of an algorithm to find the square root of a number $a$ in a finite field $\\mathbb{F}_{p}$ where $p$ is an odd prime. The method must be based on arithmetic in the quadratic extension field $\\mathbb{F}_{p^2}$. The algorithm in question is commonly known as Cipolla's algorithm.\n\nFirst, we must determine if a square root of $a \\in \\mathbb{F}_p$ exists. The element $a=0$ has the unique square root $x=0$. For a non-zero element $a \\in \\mathbb{F}_p^\\times$, a square root exists if and only if $a$ is a quadratic residue modulo $p$. This can be efficiently tested using Euler's criterion, which states that $\\left( \\frac{a}{p} \\right) \\equiv a^{(p-1)/2} \\pmod p$. If $a^{(p-1)/2} \\equiv 1 \\pmod p$, $a$ is a quadratic residue. If $a^{(p-1)/2} \\equiv -1 \\pmod p$, $a$ is a quadratic non-residue and no square root exists in $\\mathbb{F}_p$.\n\nAssuming $a$ is a non-zero quadratic residue, we proceed to find a square root.\n\n**1. Derivation of the Algorithm**\n\nThe core idea is to find an element in an extension field $\\mathbb{F}_{p^2}$ whose square is $a$, and then show that this element must lie in the base field $\\mathbb{F}_p$.\n\n**1.1. Constructing the Field Extension $\\mathbb{F}_{p^2}$**\nA quadratic extension $\\mathbb{F}_{p^2}$ can be constructed as a quotient ring $\\mathbb{F}_p[x] / (f(x))$, where $f(x)$ is an irreducible quadratic polynomial over $\\mathbb{F}_p$. A simple choice for such a polynomial is $f(x) = x^2 - n$, where $n$ is a quadratic non-residue in $\\mathbb{F}_p$. The irreducibility of $x^2-n$ is guaranteed if it has no roots in $\\mathbb{F}_p$, which is true if and only if $n$ is not a square in $\\mathbb{F}_p$, i.e., $n$ is a quadratic non-residue. We represent $\\mathbb{F}_{p^2}$ as the set of elements $\\{u + v\\omega \\mid u, v \\in \\mathbb{F}_p\\}$, where $\\omega$ is a formal root of $x^2-n$, so $\\omega^2 = n$.\n\nThe algorithm begins by finding an element $t \\in \\mathbb{F}_p$ such that $n = t^2 - a$ is a quadratic non-residue. Such a $t$ is guaranteed to exist and can be found efficiently by randomly choosing values for $t$ and testing if $\\left(\\frac{t^2-a}{p}\\right) = -1$ using Euler's criterion. With $n = t^2 - a$ being a non-residue, we construct $\\mathbb{F}_{p^2} \\cong \\mathbb{F}_p[x] / (x^2 - n)$.\n\n**1.2. The Square Root Formula**\nThe algorithm asserts that a square root of $a$ is given by the element $x = (t + \\omega)^{(p+1)/2}$ in $\\mathbb{F}_{p^2}$. We must prove two things: first, that $x^2 = a$, and second, that $x \\in \\mathbb{F}_p$.\n\n**Proof that $x^2 = a$:**\nWe compute $x^2$:\n$$x^2 = \\left((t + \\omega)^{(p+1)/2}\\right)^2 = (t + \\omega)^{p+1} = (t + \\omega)^p (t + \\omega)$$\nTo evaluate $(t + \\omega)^p$, we use the properties of the Frobenius endomorphism $\\phi(z) = z^p$ in a field of characteristic $p$. For any $u, v \\in \\mathbb{F}_p$, we have $(u+v)^p = u^p + v^p$. Since elements of $\\mathbb{F}_p$ are fixed by the Frobenius map (by Fermat's Little Theorem, $u^p=u$), we have:\n$$(t + \\omega)^p = t^p + \\omega^p = t + \\omega^p$$\nNow we must evaluate $\\omega^p$. We know $\\omega^2 = n$.\n$$\\omega^p = \\omega \\cdot \\omega^{p-1} = \\omega \\cdot (\\omega^2)^{(p-1)/2} = \\omega \\cdot n^{(p-1)/2}$$\nBy our choice of $n=t^2-a$, it is a quadratic non-residue modulo $p$. Therefore, by Euler's criterion, $n^{(p-1)/2} \\equiv -1 \\pmod p$.\nSubstituting this back, we get $\\omega^p = \\omega \\cdot (-1) = -\\omega$.\nThus, the action of the Frobenius endomorphism on our element is $(t + \\omega)^p = t - \\omega$.\nNow we can complete the computation of $x^2$:\n$$x^2 = (t - \\omega)(t + \\omega) = t^2 - \\omega^2$$\nBy definition of $\\omega$, we have $\\omega^2 = n = t^2 - a$.\n$$x^2 = t^2 - (t^2 - a) = a$$\nThis proves that $x = (t + \\omega)^{(p+1)/2}$ is indeed a square root of $a$ in the field $\\mathbb{F}_{p^2}$.\n\n**Proof that $x \\in \\mathbb{F}_p$:**\nAn element $z$ of the extension field $\\mathbb{F}_{p^2}$ belongs to the base field $\\mathbb{F}_p$ if and only if it is fixed by the Frobenius endomorphism, i.e., $z^p = z$. Let's compute $x^p$:\n$$x^p = \\left((t + \\omega)^{(p+1)/2}\\right)^p = ((t+\\omega)^p)^{(p+1)/2}$$\nWe already established that $(t+\\omega)^p = t - \\omega$. So,\n$$x^p = (t - \\omega)^{(p+1)/2}$$\nTo show this equals $x$, consider that $(t - \\omega)(t + \\omega) = t^2 - \\omega^2 = a$. Thus, $t-\\omega = a(t+\\omega)^{-1}$.\n$$x^p = \\left(a(t+\\omega)^{-1}\\right)^{(p+1)/2} = a^{(p+1)/2} \\cdot \\left((t+\\omega)^{-1}\\right)^{(p+1)/2} = a^{(p+1)/2} \\cdot \\left((t+\\omega)^{(p+1)/2}\\right)^{-1} = a^{(p+1)/2} \\cdot x^{-1}$$\nWe have $a^{(p+1)/2} = a \\cdot a^{(p-1)/2}$. Since $a$ is a quadratic residue, $a^{(p-1)/2} = 1$. So, $a^{(p+1)/2} = a$.\nThis gives $x^p = a \\cdot x^{-1}$. Multiplying by $x$, we get $x^{p+1} = a$.\nThis is not directly what we need. Let us use a more direct approach. We have shown $x^2=a$. Thus, $x^{p-1} = (x^2)^{(p-1)/2} = a^{(p-1)/2}$. As $a$ is a quadratic residue, $a^{(p-1)/2}=1$. Therefore, $x^{p-1}=1$. Multiplying by $x$ (since $a \\neq 0$, $x \\neq 0$), we get $x^p = x$. This confirms that $x$ is in the base field $\\mathbb{F}_p$.\n\nThus, the algorithm correctly computes a square root of $a$ in $\\mathbb{F}_p$. The other root is $-x \\equiv p-x \\pmod p$.\n\n**2. Complexity Analysis**\n\nThe algorithm consists of three main steps:\n1.  Checking if $a$ is a quadratic residue.\n2.  Finding an element $t$ such that $n = t^2 - a$ is a quadratic non-residue.\n3.  Performing an exponentiation in $\\mathbb{F}_{p^2}$.\n\nThe complexity is analyzed in the standard bit-complexity model, where arithmetic operations on integers of size $p$ take time polynomial in $\\log p$. A multiplication or division modulo $p$ takes $O((\\log p)^2)$ time.\n\n**Step 1:** Checking $\\left(\\frac{a}{p}\\right)$ via $a^{(p-1)/2} \\pmod p$ requires modular exponentiation, which can be done in $O(\\log((p-1)/2)) = O(\\log p)$ modular multiplications. The total time for this step is $O((\\log p)^3)$.\n\n**Step 2:** Finding $t$. We iterate through $t=1, 2, 3, \\dots$, calculate $n=t^2-a$, and check if $n$ is a non-residue using Euler's criterion. The number of values of $t \\in \\mathbb{F}_p$ for which $t^2-a$ is a quadratic non-residue is approximately $(p-1)/2$. This means the probability of a randomly chosen $t$ being successful is approximately $1/2$. Therefore, the expected number of trials to find a suitable $t$ is approximately $2$.\nEach trial involves one squaring, one subtraction, and one modular exponentiation to test $n$. The cost of each trial is dominated by the exponentiation, taking $O((\\log p)^3)$ time. The expected time for this step is thus $O((\\log p)^3)$.\n\n**Step 3:** Exponentiation in $\\mathbb{F}_{p^2}$. We compute $x=(t+\\omega)^{(p+1)/2}$. This is a modular exponentiation in $\\mathbb{F}_{p^2}$ with an exponent of size $O(p)$, which takes $O(\\log p)$ multiplications in $\\mathbb{F}_{p^2}$.\nAn arithmetic operation in $\\mathbb{F}_{p^2}$ is more costly than in $\\mathbb{F}_p$. A multiplication of two elements $(u_1 + v_1\\omega)$ and $(u_2 + v_2\\omega)$ is:\n$(u_1u_2 + v_1v_2n) + (u_1v_2 + u_2v_1)\\omega$.\nThis takes $4$ multiplications and $2$ additions in $\\mathbb{F}_p$ (or $3$ multiplications using Karatsuba's method). The cost of one $\\mathbb{F}_{p^2}$ multiplication is $O((\\log p)^2)$.\nThe total time for the exponentiation is $O(\\log p) \\times O((\\log p)^2) = O((\\log p)^3)$.\n\n**Total Complexity:** The expected running time of the algorithm is the sum of the complexities of these steps, which is dominated by modular exponentiations. The total expected time complexity is $O((\\log p)^3)$, which is polynomial in the input size $\\log p$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy import ...\n\ndef solve():\n    \"\"\"\n    Solves the problem for a fixed test suite of (a, p) pairs.\n    It computes a square root of a modulo p if one exists.\n    \"\"\"\n\n    test_cases = [\n        (0, 3),\n        (2, 3),\n        (10, 13),\n        (2, 13),\n        (643499475, 1000000007),\n        (5, 11),\n        (3, 11),\n    ]\n\n    def sqrt_mod_p(a, p):\n        \"\"\"\n        Computes a square root of a modulo p using Cipolla's algorithm.\n        Returns the smaller root, or -1 if no root exists.\n        \"\"\"\n        a %= p\n        if a == 0:\n            return 0\n        if p == 2:\n            return a\n\n        # Step 1: Check if a is a quadratic residue using Euler's criterion.\n        legendre = pow(a, (p - 1) // 2, p)\n        if legendre == p - 1:\n            return -1  # a is a quadratic non-residue\n\n        # If p = 3 (mod 4), there's a simpler formula.\n        # But this problem asks for the F_p^2 based derivation which works for all odd p.\n        # We will implement the general Cipolla's algorithm as required.\n        \n        # Step 2: Find t such that t^2 - a is a quadratic non-residue.\n        t = 1\n        while True:\n            n = (t * t - a) % p\n            if pow(n, (p - 1) // 2, p) == p - 1:\n                break\n            t += 1\n\n        # We need to perform arithmetic in F_p^2 = F_p[x] / (x^2 - n)\n        # An element is represented as a tuple (u, v) for u + v*omega.\n        \n        def f_p2_mul(x, y, n_val, p_val):\n            \"\"\"\n            Multiplies two numbers in F_p^2.\n            x = (x_u, x_v), y = (y_u, y_v)\n            \"\"\"\n            # (x_u + x_v*w) * (y_u + y_v*w) = x_u*y_u + (x_u*y_v + x_v*y_u)*w + x_v*y_v*w^2\n            # = (x_u*y_u + x_v*y_v*n) + (x_u*y_v + x_v*y_u)*w\n            res_u = (x[0] * y[0] + x[1] * y[1] * n_val) % p_val\n            res_v = (x[0] * y[1] + x[1] * y[0]) % p_val\n            return (res_u, res_v)\n        \n        def f_p2_pow(base, exp, n_val, p_val):\n            \"\"\"\n            Exponentiation in F_p^2 using binary exponentiation (exponentiation by squaring).\n            \"\"\"\n            res = (1, 0) # Multiplicative identity in F_p^2\n            while exp > 0:\n                if exp % 2 == 1:\n                    res = f_p2_mul(res, base, n_val, p_val)\n                base = f_p2_mul(base, base, n_val, p_val)\n                exp //= 2\n            return res\n\n        # Step 3: Compute x = (t + omega)^((p+1)/2).\n        # The base is (t, 1) which represents t + omega.\n        # The exponent is (p + 1) // 2.\n        base = (t, 1)\n        exponent = (p + 1) // 2\n        \n        root_pair = f_p2_pow(base, exponent, n, p)\n\n        # The result must be in F_p, so its imaginary part is 0.\n        # The root is the real part.\n        r1 = root_pair[0]\n        \n        # The other root is p - r1.\n        r2 = p - r1\n\n        # The problem asks for the smaller of the two roots.\n        return min(r1, r2)\n        \n    results = []\n    for a, p in test_cases:\n        result = sqrt_mod_p(a, p)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "3021789"}]}