{"hands_on_practices": [{"introduction": "The theory of binary quadratic forms guarantees that every equivalence class contains a single, unique 'reduced' representative. This exercise ([@problem_id:3010008]) provides essential hands-on practice with the reduction algorithm, the constructive procedure used to find this representative. By manually applying the unimodular transformations, you will develop a concrete understanding of how a form is systematically simplified and why the process must terminate on a unique result, a cornerstone for defining the class number.", "problem": "Let $f(x,y) = a x^{2} + b x y + c y^{2}$ be a binary quadratic form with integer coefficients, discriminant $D = b^{2} - 4 a c$, and $a > 0$. Suppose $f$ is primitive and positive definite (that is, $D < 0$ and $\\gcd(a,b,c) = 1$). Two forms $[a,b,c]$ and $[a',b',c']$ are said to be equivalent if there exists a matrix $M \\in \\mathrm{SL}_{2}(\\mathbb{Z})$ (the special linear group of degree two over the integers) such that $f'(x,y) = f((x,y)M)$, which preserves discriminant and positive definiteness. A positive definite form $[a,b,c]$ is said to be reduced if it satisfies $|b| \\leq a \\leq c$, and in the case $|b| = a$ or $a = c$ one additionally has $b \\geq 0$.\n\nStarting from the primitive positive definite form $[a,b,c] = [103, 78, 59]$ with $D = -18224$, use only the definitions above and the effect of elementary unimodular substitutions to explicitly run the reduction procedure and produce a reduced representative in its equivalence class. In your argument, derive each substitution choice by solving appropriate inequalities so that the middle coefficient is driven into the canonical interval and the leading coefficient is not exceeded by the trailing coefficient.\n\nThen, verify the uniqueness of the output by showing that an alternative initial sequence of unimodular substitutions, chosen differently, nevertheless results in the same reduced representative. Conclude why this uniqueness ensures that counting reduced representatives yields a well-defined class number for $D = -18224$.\n\nYour final answer must be the reduced representative written as the ordered triple of its coefficients. Express your final answer as a row vector using the $\\mathrm{pmatrix}$ environment. No rounding is required.", "solution": "The problem statement is a well-posed exercise in the classical theory of binary quadratic forms. All givens are consistent, mathematically sound, and grounded in established number theory. The definitions of a primitive positive definite form, equivalence via $\\mathrm{SL}_{2}(\\mathbb{Z})$ action, and a reduced form are standard. The discriminant of the initial form $[103, 78, 59]$ is correctly calculated as $D = 78^{2} - 4(103)(59) = 6084 - 24308 = -18224$. The form is primitive as $\\gcd(103, 78, 59) = 1$ (since $103$ and $59$ are prime numbers not dividing $78$) and positive definite as $a=103 > 0$ and $D < 0$. The problem is therefore valid.\n\nThe reduction of a primitive positive definite binary quadratic form $[a,b,c]$ is an algorithmic procedure designed to find a unique representative in its equivalence class that satisfies the conditions $|b| \\leq a \\leq c$, with $b \\geq 0$ if $|b|=a$ or $a=c$. The procedure involves applying a sequence of transformations corresponding to matrices in $\\mathrm{SL}_{2}(\\mathbb{Z})$.\n\nThe standard reduction algorithm consists of two main operations:\n1.  The transformation corresponding to the matrix $S = \\begin{pmatrix} 0 & -1 \\\\ 1 & 0 \\end{pmatrix}$. This transformation maps the form $[a,b,c]$ to $[c, -b, a]$ and is used when $a > c$.\n2.  The transformation corresponding to the matrix $T_k = \\begin{pmatrix} 1  k \\\\ 0  1 \\end{pmatrix}$ for some integer $k$. This maps the form $[a,b,c]$ to $[a, b+2ak, ak^2+bk+c]$. This transformation is used when $|b| > a$. The integer $k$ is chosen such that the new middle coefficient, $b' = b+2ak$, satisfies $|b'| \\leq a$.\n\nLet us now execute this reduction procedure for the given form $[a,b,c] = [103, 78, 59]$.\n\n**Path 1: Standard Reduction Algorithm**\n\n1.  **Initial Form:** $[a_0, b_0, c_0] = [103, 78, 59]$.\n    We check the reduction conditions: $|b| \\leq a \\leq c$.\n    - $|78| \\leq 103$: This is true.\n    - $103 \\leq 59$: This is false.\n    Since $a_0  c_0$, we must apply the transformation corresponding to $S$.\n    The new form is $[a_1, b_1, c_1] = [59, -78, 103]$.\n\n2.  **Second Form:** $[a_1, b_1, c_1] = [59, -78, 103]$.\n    We check the reduction conditions:\n    - $|-78| \\leq 59$: This is false, as $78  59$.\n    Since $|b_1|  a_1$, we must apply a shear transformation $T_k$ to reduce the magnitude of the middle coefficient. We need to choose an integer $k$ such that the new middle coefficient, $b_2 = b_1 + 2a_1k$, satisfies $|b_2| \\leq a_1$.\n    We must solve the inequality for an integer $k$:\n    $$|-78 + 2(59)k| \\leq 59$$\n    $$-59 \\leq -78 + 118k \\leq 59$$\n    Adding $78$ to all parts gives:\n    $$19 \\leq 118k \\leq 137$$\n    Dividing by $118$ gives:\n    $$\\frac{19}{118} \\leq k \\leq \\frac{137}{118}$$\n    Numerically, this is approximately $0.161 \\leq k \\leq 1.161$. The unique integer $k$ in this interval is $k=1$.\n    We apply the transformation with $k=1$ to the form $[59, -78, 103]$.\n    - $a_2 = a_1 = 59$.\n    - $b_2 = b_1 + 2a_1k = -78 + 2(59)(1) = -78 + 118 = 40$.\n    - $c_2 = a_1k^2 + b_1k + c_1 = 59(1)^2 + (-78)(1) + 103 = 59 - 78 + 103 = 84$.\n    The new form is $[a_2, b_2, c_2] = [59, 40, 84]$.\n\n3.  **Third Form:** $[a_2, b_2, c_2] = [59, 40, 84]$.\n    We check the reduction conditions:\n    - $|40| \\leq 59$: True.\n    - $59 \\leq 84$: True.\n    Both conditions $|b| \\leq a \\leq c$ are satisfied. We also check the boundary cases: $|b| = a$ ($40 \\neq 59$) and $a=c$ ($59 \\neq 84$) are not met, so no further conditions on $b$ apply.\n    The form $[59, 40, 84]$ is the reduced representative.\n\n**Path 2: Alternative Sequence of Substitutions**\n\nTo verify uniqueness, we start again with $[a_0, b_0, c_0] = [103, 78, 59]$ but choose a different initial transformation. Instead of the standard step of applying $S$, we can apply the transformation corresponding to the matrix $U_k = \\begin{pmatrix} 1  0 \\\\ k  1 \\end{pmatrix}$. This transformation maps the form $[a,b,c]$ to $[a+bk+ck^2, b+2ck, c]$.\n\n1.  **Initial Form:** $[a_0, b_0, c_0] = [103, 78, 59]$.\n    We apply the transformation $U_k$ and choose an integer $k$ to minimize the new leading coefficient, $a_1 = a_0+b_0k+c_0k^2 = 103+78k+59k^2$. This is a quadratic in $k$ which opens upwards, so its minimum is near the vertex at $k = -b_0/(2c_0) = -78/(2 \\times 59) = -39/59 \\approx -0.66$. The integer $k$ that minimizes $a_1$ is the nearest integer to this value, which is $k=-1$.\n    With $k=-1$, the transformation matrix is $U_{-1} = \\begin{pmatrix} 1  0 \\\\ -1  1 \\end{pmatrix}$. Applying this to $[103, 78, 59]$:\n    - $a_1 = 103 + 78(-1) + 59(-1)^2 = 103 - 78 + 59 = 84$.\n    - $b_1 = 78 + 2(59)(-1) = 78 - 118 = -40$.\n    - $c_1 = 59$.\n    The new form is $[a_1, b_1, c_1] = [84, -40, 59]$.\n\n2.  **Second Form:** $[a_1, b_1, c_1] = [84, -40, 59]$.\n    We check the reduction conditions:\n    - $|-40| \\leq 84$: True.\n    - $84 \\leq 59$: False.\n    Since $a_1  c_1$, we must now apply the transformation $S$. This maps $[a,b,c]$ to $[c,-b,a]$.\n    The new form is $[a_2, b_2, c_2] = [59, -(-40), 84] = [59, 40, 84]$.\n\n3.  **Third Form:** $[a_2, b_2, c_2] = [59, 40, 84]$.\n    This is the same form obtained at the end of Path 1. As established before, it is reduced.\n\nBoth paths, despite starting with different valid unimodular substitutions, converge to the same unique reduced form $[59, 40, 84]$.\n\n**Conclusion on the Class Number**\n\nThe class number $h(D)$ for a given discriminant $D$ is the number of distinct equivalence classes of primitive positive definite binary quadratic forms. The reduction algorithm is a constructive proof that every such form is equivalent to at least one reduced form. A deeper result, which our exercise illustrates, is that this reduced representative is *unique*.\n\nOur demonstration that two different sequences of valid transformations applied to the same initial form lead to the identical reduced form provides empirical evidence for this uniqueness property. Because every form in an equivalence class reduces to the same unique representative, there is a one-to-one correspondence between the set of equivalence classes and the set of reduced forms of that discriminant.\n\nFurthermore, the conditions for a form $[a,b,c]$ to be reduced ($|b| \\leq a \\leq c$ and $b^2-4ac = D  0$) imply that there are only a finite number of such forms for any given $D$. Specifically, $3a^2 \\leq 4a^2 - b^2 \\leq 4ac - b^2 = -D$, so $a \\leq \\sqrt{|D|/3}$. This bounds $a$, and therefore also $b$, and for each pair $(a,b)$, $c$ is determined. Since there are finitely many choices for $a$ and $b$, there are finitely many reduced forms.\n\nThe uniqueness of the reduced representative guarantees that we can find the class number by simply enumerating this finite set of reduced forms. This ensures that the class number is a well-defined, finite integer, a fundamental concept in algebraic number theory.", "answer": "$$ \\boxed{ \\begin{pmatrix} 59  40  84 \\end{pmatrix} } $$", "id": "3010008"}, {"introduction": "Beyond identifying individual classes, the power of this theory lies in the group structure of the set of classes, $\\mathrm{Cl}(D)$. This exercise ([@problem_id:3009985]) makes the abstract group operation concrete by walking through Dirichlet's method for Gauss composition. You will combine two forms of the same discriminant to produce a third, gaining practical skill in applying the congruence conditions that define this fundamental operation.", "problem": "Let $D$ be the discriminant of a primitive, positive definite, integral binary quadratic form. Consider the discriminant $D=-23$, and the two forms with this discriminant given by $[a,b,c]=[2,1,3]$ and $[a',b',c']=[3,1,2]$. Using only foundational properties of discriminants, congruence classes, and the law of composition of classes of binary quadratic forms, carry out the following steps:\n\n- Justify that the coprimality condition $\\gcd(a,a')=\\gcd(2,3)=1$ allows the composed form to be chosen with leading coefficient $A=a\\,a'$.\n\n- Determine the unique integer $B$ such that $B\\equiv b \\pmod{2a}$, $B\\equiv b' \\pmod{2a'}$, $B^{2}\\equiv D \\pmod{4A}$, and $-AB\\leq A$.\n\n- Define $C$ by $C=\\dfrac{B^{2}-D}{4A}$ and verify that $C$ is an integer, so that $[A,B,C]$ is a valid integral form of discriminant $D$.\n\nProvide, as your final answer, the value of $B$. Do not round; an exact integer is required.", "solution": "The problem statement is a valid exercise in the classical theory of binary quadratic forms. It asks for the application of Dirichlet's composition law to two specific forms. All provided data is mathematically sound and internally consistent. The forms $[2,1,3]$ and $[3,1,2]$ are primitive, positive definite, integral binary quadratic forms, both with discriminant $b^2 - 4ac = 1^2 - 4(2)(3) = 1^2 - 4(3)(2) = 1 - 24 = -23$. The entire problem is contained within the established framework of number theory. We may proceed with the solution.\n\nThe problem asks to perform three tasks related to the composition of two primitive, positive definite, integral binary quadratic forms, $f(x,y) = ax^2 + bxy + cy^2$ and $f'(x',y') = a'x'^2 + b'x'y' + c'y'^2$.\nThe specific forms are given by $[a,b,c]=[2,1,3]$ and $[a',b',c']=[3,1,2]$. Both have the discriminant $D = -23$.\n\nThe composed form is denoted by $[A,B,C]$.\n\n- **Justification of the leading coefficient $A=a\\,a'$**\n\nThe law of composition for two binary quadratic forms $[a,b,c]$ and $[a',b',c']$ of the same discriminant $D$ provides a method to construct a composite form $[A,B,C]$. For the special but important case where the leading coefficients are coprime, i.e., $\\gcd(a,a')=1$, Dirichlet's method defines the leading coefficient of the composite form as $A=a\\,a'$. In this problem, we are given $a=2$ and $a'=3$, and indeed $\\gcd(2,3)=1$. The justification for this choice of $A$ is that it is the first step in a constructive algorithm that is guaranteed to produce a valid composite form. The subsequent steps demonstrate that integers $B$ and $C$ can be found such that $[A,B,C] = [a\\,a', B, C]$ is an integral form of discriminant $D$. The coprimality condition $\\gcd(a,a')=1$ is crucial as it guarantees, via the Chinese Remainder Theorem, the existence and uniqueness of the integer $B$ (modulo $2aa'$) that satisfies the required congruences, which we will now determine.\n\n- **Determination of the integer $B$**\n\nThe integer $B$ is uniquely determined by a system of congruences and an inequality. The given parameters are $a=2$, $b=1$, $a'=3$, $b'=1$, $D=-23$.\nThe leading coefficient of the composed form is $A=a\\,a' = (2)(3) = 6$.\n\nThe conditions for $B$ are:\n1.  $B \\equiv b \\pmod{2a}$. Substituting the values, we get $B \\equiv 1 \\pmod{2(2)}$, which is $B \\equiv 1 \\pmod{4}$.\n2.  $B \\equiv b' \\pmod{2a'}$. Substituting the values, we get $B \\equiv 1 \\pmod{2(3)}$, which is $B \\equiv 1 \\pmod{6}$.\n3.  $B^2 \\equiv D \\pmod{4A}$. Substituting the values, we get $B^2 \\equiv -23 \\pmod{4(6)}$, which is $B^2 \\equiv -23 \\pmod{24}$.\n4.  $-A  B \\leq A$. Substituting the value of $A$, we get $-6  B \\leq 6$.\n\nWe first solve the system of linear congruences for $B$:\nFrom $B \\equiv 1 \\pmod{4}$, we can write $B = 4k+1$ for some integer $k$.\nSubstituting this into the second congruence:\n$4k+1 \\equiv 1 \\pmod{6}$\n$4k \\equiv 0 \\pmod{6}$\nThis implies that $4k$ is a multiple of $6$. Let $4k = 6j$ for some integer $j$. Dividing by $2$ gives $2k = 3j$. Since $\\gcd(2,3)=1$, $k$ must be a multiple of $3$. So, we can write $k=3m$ for some integer $m$.\nSubstituting this back into the expression for $B$:\n$B = 4(3m)+1 = 12m+1$\nThis means $B$ must satisfy the congruence $B \\equiv 1 \\pmod{12}$. This single condition encapsulates the first two congruences.\n\nNow, we check this result against the third condition, $B^2 \\equiv -23 \\pmod{24}$.\nSince $-23 = -1 \\times 24 + 1$, we have $-23 \\equiv 1 \\pmod{24}$. So the condition becomes $B^2 \\equiv 1 \\pmod{24}$.\nIf $B = 12m+1$, then\n$B^2 = (12m+1)^2 = 144m^2 + 24m + 1 = 24(6m^2+m) + 1$.\nThus, $B^2 \\equiv 1 \\pmod{24}$. The condition is satisfied for any integer $m$.\n\nFinally, we use the inequality $-6  B \\leq 6$ to find the unique value of $B$. We are looking for an integer $B$ of the form $12m+1$ in this interval.\nIf $m=0$, then $B=1$. This value satisfies $-6  1 \\leq 6$.\nIf $m=1$, then $B=13$, which is outside the interval.\nIf $m=-1$, then $B=-11$, which is also outside the interval.\nTherefore, the unique integer $B$ satisfying all conditions is $B=1$.\n\n- **Verification that $C$ is an integer**\n\nThe coefficient $C$ of the composite form is defined as $C = \\frac{B^2 - D}{4A}$.\nUsing the values $B=1$, $D=-23$, and $A=6$, we calculate $C$:\n$$ C = \\frac{1^2 - (-23)}{4(6)} = \\frac{1+23}{24} = \\frac{24}{24} = 1 $$\nSince $C=1$, $C$ is an integer.\nThis confirms that $[A,B,C]=[6,1,1]$ is a valid integral binary quadratic form. Let's check its discriminant: $B^2 - 4AC = 1^2 - 4(6)(1) = 1-24 = -23$, which is the correct discriminant $D$.\n\nThe problem asks for the value of $B$. As determined above, $B=1$.", "answer": "$$\\boxed{1}$$", "id": "3009985"}, {"introduction": "A primary goal in studying quadratic forms is to compute the class number $h(D)$, a deep arithmetic invariant. This practice ([@problem_id:3009973]) bridges theory and application by tasking you with designing an algorithm to enumerate all reduced forms for a given discriminant. This exercise translates the theoretical bounds on the coefficients of reduced forms into a practical, efficient counting strategy, a foundational skill in computational number theory.", "problem": "Design and implement an algorithm that, for a given negative discriminant $D0$ with $D\\equiv 0 \\pmod{4}$ or $D\\equiv 1 \\pmod{4}$, computes the class number $h(D)$ of primitive, positive definite binary quadratic forms of discriminant $D$ by explicitly enumerating reduced forms, and analyze the time complexity in terms of $|D|$. Begin from fundamental definitions: a binary quadratic form is $f(x,y)=ax^2+bxy+cy^2$ with integer coefficients $a,b,c$, its discriminant is $D=b^2-4ac$, a form is positive definite if $D0$ and $a0$, and primitive if $\\gcd(a,b,c)=1$. The class number $h(D)$ is the number of proper equivalence classes under the action of the special linear group of degree two over the integers $\\mathrm{SL}_2(\\mathbb{Z})$. Use the well-tested fact that every proper equivalence class of primitive, positive definite forms of discriminant $D0$ contains a unique reduced representative satisfying the inequalities $-ab\\le a$ and $a\\le c$, together with the uniqueness tie-break condition that if $a=c$ then $b\\ge 0$. Also use the classical bound for reduced forms that $a\\le \\sqrt{|D|/3}$.\n\nYour tasks are:\n- Specify a correct enumeration algorithm that iterates $a$ over the range $1\\le a\\le \\left\\lfloor \\sqrt{|D|/3}\\right\\rfloor$, iterates admissible $b$ respecting the parity constraint $b\\equiv D\\pmod{2}$ and the inequality $-ab\\le a$, enforces integrality of $c=(b^2-D)/(4a)$, checks $a\\le c$, applies the tie-break $a=c\\Rightarrow b\\ge 0$, and imposes primitivity $\\gcd(a,b,c)=1$. The algorithm must count the number of such reduced triples $(a,b,c)$, which equals $h(D)$.\n- Justify correctness from first principles: explain why reduced forms represent unique classes and why the bound on $a$ ensures completeness.\n- Analyze the time complexity $T(D)$ as a function of $|D|$ for a straightforward implementation that scans admissible $b$ values per $a$, and discuss how modular constraints $b^2\\equiv D\\pmod{4a}$ affect the average number of candidates and the resulting complexity. Your analysis must express $T(D)$ using big-$\\mathcal{O}$ notation in terms of $|D|$.\n- Implement the algorithm in the specified execution environment and produce outputs for the provided test suite.\n\nUse the following test suite of discriminants:\n- $D\\in\\{-3,-4,-7,-8,-11,-15,-19,-20,-23,-24,-43,-67,-163\\}$.\n\nFor each input $D$ in the test suite, your program must compute and return the integer $h(D)$.\n\nFinal output format: your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite, for example $[r_1,r_2,\\dots,r_n]$ where each $r_i$ is the computed integer $h(D_i)$ for the corresponding $D_i$ in the test suite. No units are involved, and no angles or percentages appear in this problem.", "solution": "The problem statement is parsed and validated. It is found to be scientifically grounded, well-posed, and objective. The problem is a standard exercise in computational algebraic number theory, based on the classical theory of binary quadratic forms developed by Gauss. All definitions, conditions, and constraints are standard and self-consistent. The problem is therefore deemed **valid** and a solution is provided below.\n\nThe problem requires the design, analysis, and implementation of an algorithm to compute the class number $h(D)$ for a given negative discriminant $D$. The method specified is the explicit enumeration of primitive, positive definite, reduced binary quadratic forms of discriminant $D$.\n\nA binary quadratic form is a function $f(x,y) = ax^2 + bxy + cy^2$ with integer coefficients $a$, $b$, and $c$. Its discriminant is $D = b^2 - 4ac$. A form is positive definite if $D  0$ and $a  0$. It is primitive if its coefficients are coprime, i.e., $\\gcd(a, b, c) = 1$. The class number $h(D)$ is the number of equivalence classes of such forms under the action of the group $\\mathrm{SL}_2(\\mathbb{Z})$.\n\nA fundamental theorem states that each equivalence class of primitive, positive definite forms contains exactly one **reduced form**. A form $(a,b,c)$ is reduced if its coefficients satisfy:\n$1$. $-a  b \\le a$\n$2$. $a \\le c$\n$3$. If $a=c$, then $b \\ge 0$.\n\nCounting the number of these unique reduced forms for a given discriminant $D$ is therefore equivalent to finding the class number $h(D)$.\n\n### Algorithm Specification\n\nThe algorithm counts the number of integer triples $(a,b,c)$ that satisfy all the conditions for being a primitive, positive definite, reduced form of discriminant $D$.\n\n$1$. Initialize the class number count, $h(D)$, to $0$.\n$2$. Determine the search bound for the coefficient $a$. For a reduced form, a classical bound states that $a \\le \\sqrt{|D|/3}$. Let $A_{max} = \\lfloor\\sqrt{-D/3}\\rfloor$.\n$3$. Iterate through all possible integer values for $a$ from $1$ up to $A_{max}$.\n$4$. For each value of $a$, iterate through all possible integer values for $b$ that satisfy the reduction condition $-a  b \\le a$.\n$5$. For each pair $(a,b)$, perform the following checks:\n    a. **Parity:** The discriminant equation $D = b^2 - 4ac$ implies $b^2 \\equiv D \\pmod{4}$ and thus $b \\equiv D \\pmod{2}$. Skip any $b$ that does not have the same parity as $D$.\n    b. **Integrality of $c$:** From the discriminant equation, $c = \\frac{b^2 - D}{4a}$. Check if $(b^2 - D)$ is divisible by $4a$. If not, this $(a,b)$ pair does not correspond to a valid form, so continue to the next value of $b$. If it is divisible, compute $c = (b^2 - D)/(4a)$.\n    c. **Reduction Condition:** Check if the condition $a \\le c$ is met. If $ac$, the form is not reduced, so continue to the next $b$.\n    d. **Reduction Tie-Breaker:** If $a=c$, the reduction condition requires $b \\ge 0$. If $b0$, the form is not the unique reduced representative, so continue to the next $b$.\n    e. **Primitivity:** Check if $\\gcd(a,b,c)=1$. If the greatest common divisor is greater than $1$, the form is not primitive. Continue to the next $b$.\n$6$. If the triple $(a,b,c)$ satisfies all the above conditions, it represents a unique equivalence class. Increment the count $h(D)$ by $1$.\n$7$. After iterating through all possible values of $a$ and $b$, the final value of the counter $h(D)$ is the class number.\n\n### Justification of Correctness\n\nThe correctness of this algorithm hinges on two key results from the theory of quadratic forms:\n$1$. **Unique Representation:** As stated, every proper equivalence class of primitive, positive definite forms of discriminant $D0$ contains precisely one reduced form satisfying the given inequalities. Therefore, a complete enumeration of such reduced forms yields a count equal to the class number $h(D)$. The algorithm systematically checks every potential candidate triple $(a,b,c)$ against the definition of a reduced form.\n\n$2$. **Completeness of Search (Bound on $a$):** The search space for the coefficient $a$ is finite and bounded. This bound ensures that the algorithm does not miss any reduced forms. The bound $a \\le \\sqrt{|D|/3}$ is derived as follows. For a reduced form, we have $-a  b \\le a$, which implies $b^2 \\le a^2$. We also have $a \\le c$. Starting with the discriminant $D = b^2 - 4ac$, we rearrange and take the absolute value:\n$$|D| = 4ac - b^2$$\nSince $a  0$ for a positive definite form and we know $a \\le c$, we have $4ac \\ge 4a^2$. Substituting this and $b^2 \\le a^2$ into the equation:\n$$|D| = 4ac - b^2 \\ge 4a(a) - a^2 = 3a^2$$\nThis gives the inequality $3a^2 \\le |D|$, which implies $a^2 \\le |D|/3$. Since $a$ is positive, we take the positive square root:\n$$a \\le \\sqrt{\\frac{|D|}{3}}$$\nThe algorithm iterates through all integers $a$ from $1$ up to this established theoretical maximum, guaranteeing that no possible reduced form is missed. The subsequent checks for $b$ and $c$ correctly and completely enforce the remaining conditions.\n\n### Time Complexity Analysis\n\nThe time complexity, $T(D)$, is determined by the nested loops and the cost of the operations within them. Let $d = |D|$.\n\n$1$. The outer loop iterates on $a$ from $1$ to $\\lfloor \\sqrt{d/3} \\rfloor$. The number of iterations is $\\mathcal{O}(\\sqrt{d})$.\n$2$. The inner loop iterates on $b$ from $-a+1$ to $a$. The number of iterations for a given $a$ is $2a$.\n$3$. A straightforward implementation, as specified in the problem, scans through all these $b$ values. The total number of $(a,b)$ pairs considered is the sum $\\sum_{a=1}^{\\lfloor\\sqrt{d/3}\\rfloor} 2a$. This sum is approximately $(\\lfloor\\sqrt{d/3}\\rfloor)^2 \\approx d/3$. Thus, the number of times the inner block is executed is $\\mathcal{O}(d)$.\n$4$. Inside the inner loop, the following operations are performed for each $(a,b)$ pair:\n    - Parity check, arithmetic for $c$, and inequality checks ($a \\le c$, $b \\ge 0$) are all constant time operations, $\\mathcal{O}(1)$.\n    - The most expensive operation is the primitivity test, $\\gcd(a,b,c)$. The Euclidean algorithm for $\\gcd(x,y)$ has a complexity of $\\mathcal{O}(\\log(\\min(|x|,|y|)))$. For our triples, the coefficients are bounded: $a = \\mathcal{O}(\\sqrt{d})$, $|b| = \\mathcal{O}(\\sqrt{d})$, and $c = (b^2+d)/(4a) = \\mathcal{O}(d/a)$. The logarithm of these values is $\\mathcal{O}(\\log d)$. So, computing $\\gcd(a,b,c)$ takes $\\mathcal{O}(\\log d)$ time.\n\nCombining these, the total time complexity for this straightforward scanning algorithm is the number of pairs checked multiplied by the cost per check:\n$$ T(D) = \\mathcal{O}(d) \\times \\mathcal{O}(\\log d) = \\mathcal{O}(|D|\\log|D|) $$\n\nThe problem also asks to discuss the effect of the modular constraint $b^2 \\equiv D \\pmod{4a}$. In the straightforward algorithm, this is used as a simple check. However, a more sophisticated algorithm could use this congruence to avoid iterating through all $b$ values. Instead, one could solve the quadratic congruence $x^2 \\equiv D \\pmod{4a}$ for $x$ in the range $(-a, a]$. The number of solutions to such a congruence, let's call it $\\rho(4a)$, is typically very small. On average, it is a small constant. A number-theoretic algorithm like Tonelli-Shanks or Cipolla's algorithm (generalized for composite moduli) could find these solutions more efficiently than a linear scan. If we assume that, on average, there is a constant number of solutions for $b$ for each $a$, the total number of candidate triples $(a,b,c)$ to check would be $\\sum_{a=1}^{\\sqrt{d/3}} \\mathcal{O}(1) = \\mathcal{O}(\\sqrt{d})$. In this improved (but not \"straightforward scan\") scenario, the complexity would be reduced to $\\mathcal{O}(\\sqrt{|D|}\\log|D|)$, dominated by running the primality tests on the much smaller set of candidates. The specified \"straightforward\" algorithm, however, remains $\\mathcal{O}(|D|\\log|D|)$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Main function to compute and print class numbers for the test suite.\n    \"\"\"\n\n    # The test suite of discriminants specified in the problem.\n    test_cases = [\n        -3, -4, -7, -8, -11, -15, -19, -20, -23, -24, -43, -67, -163\n    ]\n\n    results = []\n    for D in test_cases:\n        h_D = compute_class_number(D)\n        results.append(h_D)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef compute_class_number(D: int) - int:\n    \"\"\"\n    Computes the class number h(D) for a negative discriminant D by\n    enumerating reduced, primitive, positive definite binary quadratic forms.\n    \"\"\"\n    # A binary quadratic form is ax^2 + bxy + cy^2.\n    # Discriminant D = b^2 - 4ac.\n    # Positive definite: D  0 and a  0.\n    # Primitive: gcd(a, b, c) = 1.\n    # Reduced form conditions:\n    # 1. -a  b = a\n    # 2. a = c\n    # 3. If a = c, then b = 0.\n\n    if D = 0 or (D % 4 != 0 and D % 4 != 1):\n        raise ValueError(\"D must be a negative integer congruent to 0 or 1 mod 4.\")\n\n    h = 0\n    abs_D = -D\n    \n    # Bound on coefficient a for reduced forms: a = sqrt(|D|/3)\n    a_max = int(np.sqrt(abs_D / 3.0))\n\n    for a in range(1, a_max + 1):\n        # Iterate through possible b values: -a  b = a\n        for b in range(-a + 1, a + 1):\n            \n            # Parity check: b must have same parity as D.\n            # D = b^2 - 4ac = D = b^2 (mod 2) = D = b (mod 2)\n            if (b % 2) != (D % 2):\n                continue\n\n            # Calculate c = (b^2 - D) / 4a and check for integrality.\n            # D is negative, so b^2 - D is b^2 + |D|.\n            numerator = b**2 + abs_D\n            denominator = 4 * a\n            \n            if numerator % denominator != 0:\n                continue\n            \n            c = numerator // denominator\n\n            # Check reduction conditions\n            # Condition 2: a = c\n            if a  c:\n                continue\n            \n            # Condition 3 (tie-breaker): if a == c, then b must be non-negative.\n            if a == c and b  0:\n                continue\n            \n            # A potential reduced form (a,b,c) is found.\n            # Check for primitivity: gcd(a, b, c) = 1.\n            # Note: math.gcd in Python 3.9+ handles only two arguments.\n            if math.gcd(math.gcd(a, b), c) == 1:\n                h += 1\n                \n    return h\n\nsolve()\n```", "id": "3009973"}]}