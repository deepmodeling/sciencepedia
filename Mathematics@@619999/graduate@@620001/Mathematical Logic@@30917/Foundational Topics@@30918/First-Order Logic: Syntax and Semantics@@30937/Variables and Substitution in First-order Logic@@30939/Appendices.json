{"hands_on_practices": [{"introduction": "Mastering substitution in first-order logic begins with a firm grasp of its mechanics. This exercise focuses on a foundational skill: distinguishing between free and bound variables and applying the rules of capture-avoiding substitution. By working through this concrete example [@problem_id:2988595], you will practice identifying variable occurrences, recognizing the potential for variable capture, and applying alpha-renaming to ensure the logical integrity of the formula is preserved.", "problem": "Work in first-order logic (FOL) over a signature containing a single binary predicate symbol $R$, a single unary function symbol $f$, and no constant symbols. Variables are drawn from a countable set that includes $x$, $y$, $z$, and $w$. Recall the fundamental syntactic definitions: a quantifier $\\forall v$ or $\\exists v$ binds each occurrence of the variable $v$ within its scope; an occurrence of a variable is free if it is not within the scope of any quantifier that binds it; and the scope of a quantifier is the formula immediately following it. Use standard capture-avoiding substitution: for a term $t$ and variable $v$, the substitution $\\varphi[v := t]$ replaces all free occurrences of $v$ in $\\varphi$ by $t$, and if a quantifier binds a variable that appears free in $t$, rename that bound variable to a fresh variable before performing the substitution to avoid variable capture.\n\nConsider the following constructed formula:\n$$\n\\varphi \\;=\\; \\big(R(x,y) \\;\\land\\; \\forall x \\,\\big(R(x,z) \\;\\lor\\; \\exists y \\, R(y,x)\\big)\\big)\\;\\;\\lor\\;\\; \\forall z \\,\\big(R(f(y),z) \\;\\land\\; \\exists x \\, R(z,x)\\big).\n$$\nIn $\\varphi$, the variable $x$ occurs both as a free variable and as a bound variable in different parts of the formula. Explain, in terms of scopes of the quantifiers present, which occurrences of $x$ are free and which are bound, and why these occurrences are separated by their respective quantifier scopes.\n\nThen, compute the result of performing the capture-avoiding substitution $\\varphi[y := f(x)]$, where any necessary renaming of bound variables must use the fresh variable $w$. After this substitution, determine the number of free occurrences of $x$ in the resulting formula. Provide your answer as a single integer. No rounding is necessary.", "solution": "The problem is well-posed and grounded in the standard principles of first-order logic. All terms, definitions, and the formula are provided, allowing for a rigorous and unique solution.\n\nThe problem consists of three parts:\n1.  Analyze the occurrences of the variable $x$ in the given formula $\\varphi$ to determine which are free and which are bound.\n2.  Compute the result of the capture-avoiding substitution $\\varphi[y := f(x)]$.\n3.  Count the number of free occurrences of the variable $x$ in the resulting formula.\n\nLet the given formula be\n$$\n\\varphi \\;=\\; \\big(R(x,y) \\;\\land\\; \\forall x \\,\\big(R(x,z) \\;\\lor\\; \\exists y \\, R(y,x)\\big)\\big)\\;\\;\\lor\\;\\; \\forall z \\,\\big(R(f(y),z) \\;\\land\\; \\exists x \\, R(z,x)\\big).\n$$\n\n**Part 1: Analysis of Free and Bound Occurrences of $x$ in $\\varphi$**\n\nTo determine whether an occurrence of a variable is free or bound, we must identify the quantifiers and their scopes. An occurrence is bound if it lies within the scope of a quantifier that binds that variable. Otherwise, it is free.\n\nThe formula $\\varphi$ is a disjunction $\\psi_1 \\lor \\psi_2$, where:\n- $\\psi_1 = R(x,y) \\;\\land\\; \\forall x \\,\\big(R(x,z) \\;\\lor\\; \\exists y \\, R(y,x)\\big)$\n- $\\psi_2 = \\forall z \\,\\big(R(f(y),z) \\;\\land\\; \\exists x \\, R(z,x)\\big)$\n\nLet's analyze the occurrences of $x$:\n1.  The first occurrence of $x$ is in the atomic formula $R(x,y)$. This subformula is part of a conjunction, where the other conjunct is $\\forall x (\\dots)$. The scope of this quantifier, $\\forall x$, is the subformula $\\big(R(x,z) \\;\\lor\\; \\exists y \\, R(y,x)\\big)$. The initial $R(x,y)$ is outside this scope. There are no other quantifiers binding this $x$. Therefore, this occurrence of $x$ is **free**.\n\n2.  The second occurrence is the quantifier $\\forall x$ itself.\n\n3.  The third occurrence is in $R(x,z)$. This lies inside the scope of the quantifier $\\forall x$. Thus, this occurrence of $x$ is **bound**.\n\n4.  The fourth occurrence is in $R(y,x)$, which is within the scope of $\\exists y$. This entire subformula, $\\exists y \\, R(y,x)$, is in turn within the scope of $\\forall x$. The binding quantifier for a variable is the innermost one that contains it in its scope. Here, it is bound by $\\forall x$. Thus, this occurrence of $x$ is **bound**.\n\n5.  The fifth occurrence is the quantifier $\\exists x$ in $\\psi_2$.\n\n6.  The sixth occurrence is in $R(z,x)$ within $\\psi_2$. This lies inside the scope of the quantifier $\\exists x$. Thus, this occurrence of $x$ is **bound**.\n\nIn summary, the variable $x$ has one free occurrence in $\\varphi$ (in the term $R(x,y)$) and multiple bound occurrences, consistent with the problem statement.\n\n**Part 2: Computing the Substitution $\\varphi[y := f(x)]$**\n\nThe substitution is $\\varphi[y := f(x)]$. The variable being substituted is $y$, and the term being substituted is $t = f(x)$. The set of free variables in the term $t$ is $FV(t) = \\{x\\}$.\n\nThe problem provides a specific rule for capture-avoiding substitution: \"if a quantifier binds a variable that appears free in $t$, rename that bound variable to a fresh variable before performing the substitution\".\n\nWe apply this rule:\n1.  Identify quantifiers in $\\varphi$ that bind a variable from $FV(t)=\\{x\\}$. These are the quantifier $\\forall x$ in $\\psi_1$ and the quantifier $\\exists x$ in $\\psi_2$.\n2.  According to the rule, these bound variables must be renamed. The problem specifies using the fresh variable $w$.\n\nThis renaming step is performed on $\\varphi$ *before* the substitution for $y$. Let's call the renamed formula $\\varphi_{\\text{renamed}}$:\n$$\n\\varphi_{\\text{renamed}} = \\big(R(x,y) \\;\\land\\; \\forall w \\,\\big(R(w,z) \\;\\lor\\; \\exists y \\, R(y,w)\\big)\\big)\\;\\;\\lor\\;\\; \\forall z \\,\\big(R(f(y),z) \\;\\land\\; \\exists w \\, R(z,w)\\big).\n$$\n\nNow, we perform the substitution $[y := f(x)]$ on $\\varphi_{\\text{renamed}}$. This involves replacing all *free* occurrences of $y$ with the term $f(x)$. The free occurrences of $y$ in $\\varphi$ (and thus in $\\varphi_{\\text{renamed}}$) are:\n- In the atomic formula $R(x,y)$.\n- In the atomic formula $R(f(y),z)$.\n\nPerforming the replacements:\n- $R(x,y)$ becomes $R(x,f(x))$.\n- $R(f(y),z)$ becomes $R(f(f(x)),z)$.\n\nSubstituting these back into $\\varphi_{\\text{renamed}}$, we obtain the final resulting formula, which we will call $\\varphi'$:\n$$\n\\varphi' = \\big(R(x,f(x)) \\;\\land\\; \\forall w \\,\\big(R(w,z) \\;\\lor\\; \\exists y \\, R(y,w)\\big)\\big)\\;\\;\\lor\\;\\; \\forall z \\,\\big(R(f(f(x)),z) \\;\\land\\; \\exists w \\, R(z,w)\\big).\n$$\n\n**Part 3: Counting Free Occurrences of $x$ in the Resulting Formula**\n\nWe must now find the number of free occurrences of the variable $x$ in the formula $\\varphi'$. Let's analyze its structure $\\varphi' = \\varphi'_1 \\lor \\varphi'_2$.\n\n- Analysis of $\\varphi'_1 = R(x,f(x)) \\;\\land\\; \\forall w \\,\\big(R(w,z) \\;\\lor\\; \\exists y \\, R(y,w)\\big)$:\n    - In the subformula $R(x,f(x))$, the first argument is $x$. This occurrence of $x$ is not within the scope of any quantifier binding $x$. It is **free**.\n    - The second argument is $f(x)$. The occurrence of $x$ within this term is also not within the scope of any quantifier binding $x$. It is **free**.\n    - The rest of $\\varphi'_1$ is the subformula $\\forall w (\\dots)$, which does not contain the variable $x$.\n    - Thus, there are $2$ free occurrences of $x$ in $\\varphi'_1$.\n\n- Analysis of $\\varphi'_2 = \\forall z \\,\\big(R(f(f(x)),z) \\;\\land\\; \\exists w \\, R(z,w)\\big)$:\n    - The main quantifier is $\\forall z$.\n    - Inside its scope, we have the conjunct $R(f(f(x)),z)$. The variable $x$ occurs once, inside the term $f(f(x))$. This occurrence is not within the scope of the quantifier $\\exists w$, and it is not bound by $\\forall z$ (since $x \\ne z$). Therefore, this occurrence of $x$ is **free**.\n    - The other conjunct, $\\exists w \\, R(z,w)$, does not contain the variable $x$.\n    - Thus, there is $1$ free occurrence of $x$ in $\\varphi'_2$.\n\nThe total number of free occurrences of $x$ in $\\varphi'$ is the sum of the counts from $\\varphi'_1$ and $\\varphi'_2$.\nTotal count = $2 + 1 = 3$.\n\nThe number of free occurrences of $x$ in the resulting formula is $3$.", "answer": "$$\n\\boxed{3}\n$$", "id": "2988595"}, {"introduction": "Why do the syntactic rules of substitution exist in the first place? This practice moves from pure symbol manipulation to the semantic foundations of logic, grounding abstract formalisms in a concrete model. The goal is to see that careful substitution rules are not arbitrary but are designed to uphold the fundamental principle that substituting terms denoting the same object should not alter a statement's truth. This exercise will help you connect the syntax of substitution to the semantics of truth evaluation via Tarski's framework [@problem_id:2988636].", "problem": "Let $\\mathcal{L}$ be a first-order language with equality whose non-logical symbols are: a constant symbol $0$, binary function symbols $+$ and $\\cdot$, a unary function symbol $-$, and a unary predicate symbol $N$. Consider the $\\mathcal{L}$-structure $\\mathcal{M}$ with domain $|\\mathcal{M}| = \\mathbb{R}$ interpreting these symbols as follows: $0^{\\mathcal{M}}$ is the real number $0$, $+^{\\mathcal{M}}$ is real addition, $\\cdot^{\\mathcal{M}}$ is real multiplication, $-^{\\mathcal{M}}$ is the real unary minus, and $N^{\\mathcal{M}} = \\{ r \\in \\mathbb{R} \\mid r \\ge 0 \\}$. Let $s$ be a variable assignment with $s(x) = 2$ and $s(y) = -5$.\n\nWork entirely from the Tarskian semantics for first-order logic with equality: the interpretation of function symbols as total functions on the domain, the interpretation of predicate symbols as relations on the domain, and the interpretation of $=$ as actual equality on the domain. Use only these foundations and the definition of the semantic evaluation function $\\llbracket \\cdot \\rrbracket^{\\mathcal{M}}_{s}$ for terms and formulas. Interpret truth values through the characteristic function into $\\{0,1\\}$, where true is $1$ and false is $0$.\n\nDefine the terms $t_{1} \\coloneqq x + y$ and $t_{2} \\coloneqq y + x$. First, explain why (purely semantically) substituting the equal-denoting terms $t_{1}$ and $t_{2}$ into the predicate $N$ preserves truth in $\\mathcal{M}$ under $s$. Then compute the semantic value\n$$\n\\llbracket N(x + y) \\leftrightarrow N(y + x) \\rrbracket^{\\mathcal{M}}_{s} \\in \\{0,1\\}.\n$$\nYour final answer must be the single number in $\\{0,1\\}$ corresponding to the truth value under the above interpretation; no rounding is required and no units apply.", "solution": "The problem is valid as it is a well-defined exercise in applying the standard Tarskian semantics for first-order logic. It is self-contained, scientifically grounded in mathematical logic, and objective.\n\nThe problem asks for two things: first, a semantic explanation for why substituting the terms $t_1 \\coloneqq x+y$ and $t_2 \\coloneqq y+x$ into the predicate $N$ preserves the truth value in the given structure $\\mathcal{M}$ and under the variable assignment $s$. Second, it requires the computation of the semantic value of the formula $N(x+y) \\leftrightarrow N(y+x)$.\n\nLet us begin with the first part. The explanation must be purely semantic, based on the Tarskian definition of truth. The truth of an atomic formula of the form $P(t)$ in a structure $\\mathcal{M}$ under an assignment $s$, denoted $\\mathcal{M} \\models_s P(t)$, is determined by whether the object denoted by the term $t$ belongs to the set denoted by the predicate symbol $P$. Formally, $\\mathcal{M} \\models_s P(t)$ if and only if $\\llbracket t \\rrbracket^{\\mathcal{M}}_{s} \\in P^{\\mathcal{M}}$, where $\\llbracket t \\rrbracket^{\\mathcal{M}}_{s}$ is the semantic evaluation of the term $t$ in the domain $|\\mathcal{M}|$ and $P^{\\mathcal{M}}$ is the interpretation of the predicate symbol $P$.\n\nThe core of the argument lies in showing that the terms $t_1$ and $t_2$ denote the same element in the domain $|\\mathcal{M}| = \\mathbb{R}$. We compute their semantic values using the provided assignment $s$, where $s(x) = 2$ and $s(y) = -5$.\n\nThe semantic evaluation of a term is defined recursively. For a variable $v$, $\\llbracket v \\rrbracket^{\\mathcal{M}}_{s} = s(v)$. For a term of the form $f(t'_1, \\dots, t'_n)$, $\\llbracket f(t'_1, \\dots, t'_n) \\rrbracket^{\\mathcal{M}}_{s} = f^{\\mathcal{M}}(\\llbracket t'_1 \\rrbracket^{\\mathcal{M}}_{s}, \\dots, \\llbracket t'_n \\rrbracket^{\\mathcal{M}}_{s})$.\n\nFor the term $t_1 \\coloneqq x+y$:\n$$\n\\llbracket t_1 \\rrbracket^{\\mathcal{M}}_{s} = \\llbracket x+y \\rrbracket^{\\mathcal{M}}_{s} = +^{\\mathcal{M}}(\\llbracket x \\rrbracket^{\\mathcal{M}}_{s}, \\llbracket y \\rrbracket^{\\mathcal{M}}_{s})\n$$\nSubstituting the values from the assignment $s$:\n$$\n\\llbracket x \\rrbracket^{\\mathcal{M}}_{s} = s(x) = 2\n$$\n$$\n\\llbracket y \\rrbracket^{\\mathcal{M}}_{s} = s(y) = -5\n$$\nThe interpretation of the function symbol $+$ is real addition, so $+^{\\mathcal{M}}$ is the addition operator on $\\mathbb{R}$.\n$$\n\\llbracket t_1 \\rrbracket^{\\mathcal{M}}_{s} = 2 + (-5) = -3\n$$\nFor the term $t_2 \\coloneqq y+x$:\n$$\n\\llbracket t_2 \\rrbracket^{\\mathcal{M}}_{s} = \\llbracket y+x \\rrbracket^{\\mathcal{M}}_{s} = +^{\\mathcal{M}}(\\llbracket y \\rrbracket^{\\mathcal{M}}_{s}, \\llbracket x \\rrbracket^{\\mathcal{M}}_{s}) = (-5) + 2 = -3\n$$\nThus, we have established that $\\llbracket t_1 \\rrbracket^{\\mathcal{M}}_{s} = \\llbracket t_2 \\rrbracket^{\\mathcal{M}}_{s} = -3$. The two terms denote the very same real number. This is a direct consequence of the fact that the interpretation of $+$, which is real addition, is a commutative function.\n\nNow, consider the truth values of the atomic formulas $N(t_1)$ and $N(t_2)$.\nAccording to Tarskian semantics:\n- $\\mathcal{M} \\models_s N(t_1)$ if and only if $\\llbracket t_1 \\rrbracket^{\\mathcal{M}}_{s} \\in N^{\\mathcal{M}}$.\n- $\\mathcal{M} \\models_s N(t_2)$ if and only if $\\llbracket t_2 \\rrbracket^{\\mathcal{M}}_{s} \\in N^{\\mathcal{M}}$.\n\nSince $\\llbracket t_1 \\rrbracket^{\\mathcal{M}}_{s} = \\llbracket t_2 \\rrbracket^{\\mathcal{M}}_{s}$, let's call this common denotation $d = -3$. The conditions for truth become:\n- $\\mathcal{M} \\models_s N(t_1)$ if and only if $d \\in N^{\\mathcal{M}}$.\n- $\\mathcal{M} \\models_s N(t_2)$ if and only if $d \\in N^{\\mathcal{M}}$.\n\nThese two conditions are identical. Therefore, the formula $N(t_1)$ is true if and only if the formula $N(t_2)$ is true. Their truth values must be the same under the assignment $s$. This is the essence of why substitution of terms denoting the same object preserves truth. The truth of a predicate is a property of the objects in the domain, not the syntactic terms used to refer to them.\n\nNow, for the second part, we must compute the semantic value $\\llbracket N(x + y) \\leftrightarrow N(y + x) \\rrbracket^{\\mathcal{M}}_{s}$. The interpretation of truth values is a characteristic function mapping to $\\{0,1\\}$, where true is $1$ and false is $0$. The semantics of the biconditional $\\leftrightarrow$ is such that $\\llbracket \\phi \\leftrightarrow \\psi \\rrbracket^{\\mathcal{M}}_{s} = 1$ if $\\llbracket \\phi \\rrbracket^{\\mathcal{M}}_{s} = \\llbracket \\psi \\rrbracket^{\\mathcal{M}}_{s}$, and $0$ otherwise.\n\nFirst, let's evaluate $\\llbracket N(x+y) \\rrbracket^{\\mathcal{M}}_{s}$. This value is $1$ if $\\mathcal{M} \\models_s N(x+y)$ and $0$ otherwise. We have already determined that $\\llbracket x+y \\rrbracket^{\\mathcal{M}}_{s} = -3$. The interpretation of the predicate $N$ is $N^{\\mathcal{M}} = \\{ r \\in \\mathbb{R} \\mid r \\ge 0 \\}$. We check if the denotation of the term is in this set:\nIs $-3 \\in \\{ r \\in \\mathbb{R} \\mid r \\ge 0 \\}$? No, because $-3 < 0$.\nTherefore, $\\mathcal{M} \\not\\models_s N(x+y)$, which means the formula is false. Its semantic value is:\n$$\n\\llbracket N(x+y) \\rrbracket^{\\mathcal{M}}_{s} = 0\n$$\nNext, let's evaluate $\\llbracket N(y+x) \\rrbracket^{\\mathcal{M}}_{s}$. We have already determined that $\\llbracket y+x \\rrbracket^{\\mathcal{M}}_{s} = -3$.\nIs $-3 \\in \\{ r \\in \\mathbb{R} \\mid r \\ge 0 \\}$? No, for the same reason.\nTherefore, $\\mathcal{M} \\not\\models_s N(y+x)$, which means this formula is also false. Its semantic value is:\n$$\n\\llbracket N(y+x) \\rrbracket^{\\mathcal{M}}_{s} = 0\n$$\nWe now compute the value of the full formula:\n$$\n\\llbracket N(x + y) \\leftrightarrow N(y + x) \\rrbracket^{\\mathcal{M}}_{s}\n$$\nWe compare the semantic values of the two sub-formulas:\n$$\n\\llbracket N(x+y) \\rrbracket^{\\mathcal{M}}_{s} = 0\n$$\n$$\n\\llbracket N(y+x) \\rrbracket^{\\mathcal{M}}_{s} = 0\n$$\nSince the two values are equal ($0 = 0$), the biconditional is true. Therefore, its semantic value is $1$.\n$$\n\\llbracket N(x + y) \\leftrightarrow N(y + x) \\rrbracket^{\\mathcal{M}}_{s} = 1\n$$\nThis result confirms the conclusion from the first part of the problem: the two atomic formulas $N(x+y)$ and $N(y+x)$ have the same truth value (in this case, both are false), making the biconditional between them true.", "answer": "$$\\boxed{1}$$", "id": "2988636"}, {"introduction": "Understanding a rule often requires seeing what happens when it's broken. This hands-on practice provides a classic counterexample to illustrate the breakdown of logical equivalence when substitution is performed naively, leading to variable capture. By computing the starkly different truth values of a correct, capture-avoiding substitution versus an incorrect, capturing one [@problem_id:2988600], you will gain a deep appreciation for why the formal machinery of $\\alpha$-conversion is an indispensable component of sound logical reasoning.", "problem": "Consider first-order logic (FOL) with variables ranging over a nonempty domain. Let $\\mathrm{FV}(t)$ denote the set of free variables of term $t$, and let $\\varphi[x := t]$ denote capture-avoiding substitution of term $t$ for all free occurrences of variable $x$ in formula $\\varphi$, defined in the usual way by structural recursion with $\\alpha$-conversion of bound variables to avoid variable capture. A standard commutation law states: if $y \\neq x$ and $y \\notin \\mathrm{FV}(t)$, then $(\\forall y\\,\\varphi)[x := t]$ is equivalent to $\\forall y\\,(\\varphi[x := t])$. Using only the fundamental semantics of FOL (Tarski semantics for quantifiers and equality) and the definition of capture-avoiding substitution with $\\alpha$-conversion, illustrate the failure of this law when $y \\in \\mathrm{FV}(t)$ by working in the language with equality only and domain the natural numbers.\n\nConcretely, let the language be $\\mathcal{L} = \\{=\\}$, the structure be $\\mathcal{M} = (\\mathbb{N}, =)$ where equality is interpreted as actual equality on $\\mathbb{N}$, and let the assignment $g$ map the variable $y$ to $0$ (the values of other variables under $g$ are irrelevant unless mentioned). Let $\\varphi$ be the formula $x = y$, and let $t$ be the term $y$. Note that $y \\in \\mathrm{FV}(t)$. Define the following two formulas:\n- The left-hand side uses capture-avoiding substitution with $\\alpha$-conversion: $((\\forall y\\,\\varphi)[x := t])$.\n- The right-hand side uses direct inner substitution: $(\\forall y\\,(\\varphi[x := t]))$.\n\nCompute the truth values of both formulas in $\\mathcal{M}$ under $g$ using the standard semantics, encode truth as $1$ and falsity as $0$, and then compute the numerical difference $V_{\\mathrm{RHS}} - V_{\\mathrm{LHS}}$, where $V_{\\mathrm{RHS}}$ and $V_{\\mathrm{LHS}}$ are the encoded truth values of the right-hand side and left-hand side formulas, respectively. Provide your final answer as a single real number. No rounding is required.", "solution": "The problem requires us to analyze the failure of the commutation of substitution and universal quantification when the condition of variable freshness is not met. We are asked to compute the truth values of two formulas in a specific model and then find the numerical difference of their encoded values.\n\nLet the language be $\\mathcal{L} = \\{=\\}$, the structure be $\\mathcal{M} = (\\mathbb{N}, =)$ with domain the natural numbers $\\mathbb{N}=\\{0, 1, 2, \\dots\\}$, and the interpretation of the equality symbol as identity on $\\mathbb{N}$. The variable assignment $g$ is such that $g(y) = 0$. The formula $\\varphi$ is $x = y$, and the term $t$ is $y$. We are to substitute $x$ with $t$. The commutation law being tested is $(\\forall y\\,\\varphi)[x := t] \\equiv \\forall y\\,(\\varphi[x := t])$, which holds if $y \\notin \\mathrm{FV}(t)$. Here, $t$ is $y$, so $\\mathrm{FV}(t) = \\mathrm{FV}(y) = \\{y\\}$. The condition $y \\notin \\mathrm{FV}(t)$ is violated, as $y \\in \\{y\\}$.\n\nWe will evaluate the truth values of the left-hand side (LHS) and right-hand side (RHS) formulas as defined in the problem. Truth is encoded as $1$ and falsity as $0$.\n\n**1. Evaluation of the Left-Hand Side (LHS)**\n\nThe LHS formula is defined as $((\\forall y\\,\\varphi)[x := t])$, which means we must apply capture-avoiding substitution.\nThe specific formula is $(\\forall y\\,(x=y))[x := y]$.\nIn the formula $\\forall y\\,(x=y)$, the variable $x$ is free. The substitution $[x := y]$ attempts to replace this free $x$ with $y$. However, this would place the new $y$ within the scope of the quantifier $\\forall y$, causing the substituted variable to be \"captured\".\n\nA capture-avoiding substitution requires renaming the bound variable to avoid this capture. We perform an $\\alpha$-conversion on $\\forall y\\,(x=y)$. We choose a fresh variable $z$ (where $z$ is distinct from $x$ and $y$) and rename the bound variable $y$ to $z$.\nThe formula $\\forall y\\,(x=y)$ is logically equivalent to $\\forall z\\,((x=y)[y:=z])$, which is $\\forall z\\,(x=z)$.\n\nNow, we can safely perform the substitution $[x := y]$ on the $\\alpha$-converted formula $\\forall z\\,(x=z)$:\n$$ (\\forall z\\,(x=z))[x := y] $$\nSince the variable $z$ of the quantifier is not free in the term $y$ (i.e., $z \\notin \\mathrm{FV}(y)$), we can move the substitution inside the quantifier:\n$$ \\forall z\\,((x=z)[x := y]) $$\nThis results in the formula:\n$$ \\forall z\\,(y=z) $$\nLet's call this the LHS formula, $\\varphi_{\\mathrm{LHS}}$. We now determine its truth value in the structure $\\mathcal{M}$ under the assignment $g$.\nThe statement $\\mathcal{M}, g \\models \\forall z\\,(y=z)$ is true if and only if for every element $d \\in \\mathbb{N}$, the statement $\\mathcal{M}, g[z \\mapsto d] \\models y=z$ is true.\nHere, $g[z \\mapsto d]$ is the assignment that maps $z$ to $d$ and any other variable $v \\neq z$ to $g(v)$.\nUnder the assignment $g[z \\mapsto d]$, the term $y$ evaluates to $g[z \\mapsto d](y) = g(y) = 0$. The term $z$ evaluates to $g[z \\mapsto d](z) = d$.\nSo, the condition becomes: for every $d \\in \\mathbb{N}$, the equality $0 = d$ must hold.\nThis is false. For example, if we choose $d=1$, then $0=1$ is false. The universal quantification fails.\nTherefore, the LHS formula $\\varphi_{\\mathrm{LHS}}$ is false in $\\mathcal{M}$ under $g$.\nThe encoded truth value is $V_{\\mathrm{LHS}} = 0$.\n\n**2. Evaluation of the Right-Hand Side (RHS)**\n\nThe RHS formula is defined as $(\\forall y\\,(\\varphi[x := t]))$, which means we perform the substitution on the inner formula $\\varphi$ first, and then apply the quantifier.\nThe specific formula is $\\forall y\\,((x=y)[x := y])$.\nFirst, we compute the inner substitution $(x=y)[x := y]$. This means we replace all free occurrences of $x$ in $x=y$ with the term $y$. The result is the formula $y=y$.\nNext, we apply the universal quantifier $\\forall y$ to this result.\nThe RHS formula, $\\varphi_{\\mathrm{RHS}}$, is therefore:\n$$ \\forall y\\,(y=y) $$\nWe now determine the truth value of this formula in $\\mathcal{M}$ under $g$.\nThe statement $\\mathcal{M}, g \\models \\forall y\\,(y=y)$ is true if and only if for every element $d \\in \\mathbb{N}$, the statement $\\mathcal{M}, g[y \\mapsto d] \\models y=y$ is true.\nUnder the assignment $g[y \\mapsto d]$, the term $y$ evaluates to $g[y \\mapsto d](y) = d$.\nSo, the condition becomes: for every $d \\in \\mathbb{N}$, the equality $d = d$ must hold.\nThis is true, as equality is a reflexive relation. The statement holds for all $d \\in \\mathbb{N}$.\nTherefore, the RHS formula $\\varphi_{\\mathrm{RHS}}$ is true in $\\mathcal{M}$ under $g$.\nThe encoded truth value is $V_{\\mathrm{RHS}} = 1$.\n\n**3. Final Calculation**\n\nThe problem asks for the numerical difference $V_{\\mathrm{RHS}} - V_{\\mathrm{LHS}}$.\nUsing the values we computed:\n- $V_{\\mathrm{LHS}} = 0$\n- $V_{\\mathrm{RHS}} = 1$\n\nThe difference is $V_{\\mathrm{RHS}} - V_{\\mathrm{LHS}} = 1 - 0 = 1$.\n\nThis example demonstrates that when a substitution introduces a variable that is captured by a quantifier, performing a naive substitution inside the quantifier (RHS) can lead to a different semantic meaning than a correctly defined capture-avoiding substitution (LHS). The commutation law $(\\forall y\\,\\varphi)[x := t] \\equiv \\forall y\\,(\\varphi[x := t])$ fails when $y \\in \\mathrm{FV}(t)$.", "answer": "$$\n\\boxed{1}\n$$", "id": "2988600"}]}