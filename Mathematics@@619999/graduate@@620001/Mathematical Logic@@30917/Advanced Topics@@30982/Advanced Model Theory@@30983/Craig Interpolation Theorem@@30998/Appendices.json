{"hands_on_practices": [{"introduction": "This first practice exercise grounds our understanding of Craig interpolation in its fundamental, semantic roots within propositional logic. You will explore a constructive method for generating an interpolant using existential quantification, a technique that directly connects the interpolant to the common information shared between formulas. This exercise [@problem_id:2971064] will solidify your grasp of the interpolant's role by having you both prove the general method and apply it to a concrete CNF instance.", "problem": "Let $X$ and $Y$ be disjointly generated finite sets of propositional variables with possible overlap $X \\cap Y \\neq \\varnothing$. Consider propositional formulas $A$ over variables from $X$ only and $B$ over variables from $Y$ only, with the semantic assumption that $A \\Rightarrow B$ is valid (that is, for every truth valuation of the union of variables, whenever $A$ is true, $B$ is also true). The Craig interpolation theorem in propositional logic asserts the existence of an interpolant $I$ that contains only variables from $X \\cap Y$ and satisfies $A \\Rightarrow I$ and $I \\Rightarrow B$. Using only truth-functional semantics of propositional logic and the semantic definition of the propositional existential quantifier, prove that the formula $I := \\exists(X \\setminus Y)\\, A$ is an interpolant and argue that $I$ mentions only variables in $X \\cap Y$. Here, for a propositional variable $v$, the existential quantification is defined as $\\exists v\\, \\varphi := \\varphi[v:=\\top] \\lor \\varphi[v:=\\bot]$, and for a set $V$ of variables, $\\exists V\\, \\varphi$ denotes iterated elimination of all variables in $V$ in any order.\n\nThen, for the concrete Conjunctive Normal Form (CNF) instance (Conjunctive Normal Form (CNF) is a conjunction of disjunctions of literals) with\n- $X = \\{p, q, r\\}$ and $Y = \\{q, s\\}$, so $X \\cap Y = \\{q\\}$,\n- $A$ given by the CNF $A := (\\neg p \\lor q) \\land (\\neg r \\lor q) \\land (p \\lor r)$,\n- $B$ given by $B := q$,\n\nperform the following:\n- Verify $A \\Rightarrow B$ by producing a resolution refutation of $A \\land \\neg B$.\n- Compute the interpolant $I := \\exists\\{p,r\\}\\, A$ explicitly by carrying out the existential eliminations, simplifying the resulting formula to a logically equivalent formula over $q$ only.\n\nExpress your final answer as a single closed-form propositional formula using only the variable $q$. No rounding is required. Your final answer must be the computed interpolant $I$ in simplest logical form.", "solution": "The problem is evaluated to be valid as it is scientifically grounded in mathematical logic, well-posed, objective, and internally consistent.\n\nThe problem consists of two parts. First, a theoretical proof concerning the construction of a Craig interpolant using existential quantification. Second, a concrete application of this construction to a specific instance.\n\n### Part 1: Theoretical Proof\n\nLet $X$ and $Y$ be finite sets of propositional variables. Let $A$ be a formula with variables from $X$, denoted $\\text{vars}(A) \\subseteq X$, and $B$ be a formula with variables from $Y$, denoted $\\text{vars}(B) \\subseteq Y$. We are given that $A \\Rightarrow B$ is a valid implication, which we write as $A \\models B$. This means for any truth valuation $\\mathcal{M}$ over the variables in $X \\cup Y$, if $\\mathcal{M} \\models A$, then $\\mathcal{M} \\models B$.\n\nWe are asked to prove that the formula $I := \\exists(X \\setminus Y) A$ is a Craig interpolant. This requires proving three properties:\n$1.$ The variables of $I$ are contained in $X \\cap Y$.\n$2.$ $A \\Rightarrow I$ is valid ($A \\models I$).\n$3.$ $I \\Rightarrow B$ is valid ($I \\models B$).\n\nLet $V = X \\setminus Y$. The existential quantifier over a set of variables $V = \\{v_1, v_2, \\dots, v_k\\}$ is defined as the iterated application of the single-variable quantifier, $\\exists V \\varphi := \\exists v_1 \\exists v_2 \\dots \\exists v_k \\varphi$. The single-variable quantification is defined as $\\exists v \\varphi := \\varphi[v:=\\top] \\lor \\varphi[v:=\\bot]$.\n\n**1. Variables of the Interpolant $I$**\n\nThe formula $A$ has variables in $X$, i.e., $\\text{vars}(A) \\subseteq X$. The formula $I$ is constructed by existentially quantifying out all variables in the set $V = X \\setminus Y$. Existential quantification of a variable $v$ in a formula $\\varphi$ removes $v$ from the set of free variables of the resulting formula. Therefore, the variables of $I$ are a subset of $\\text{vars}(A) \\setminus V$.\n$$ \\text{vars}(I) \\subseteq \\text{vars}(A) \\setminus (X \\setminus Y) \\subseteq X \\setminus (X \\setminus Y) $$\nUsing set theory, $X \\setminus (X \\setminus Y) = X \\cap (X \\setminus Y)^c = X \\cap (X^c \\cup Y) = (X \\cap X^c) \\cup (X \\cap Y) = \\emptyset \\cup (X \\cap Y) = X \\cap Y$.\nThus, $\\text{vars}(I) \\subseteq X \\cap Y$. The first property is satisfied.\n\n**2. Proof of $A \\models I$**\n\nWe need to show that $A \\Rightarrow \\exists(X \\setminus Y)A$ is a validity. We can prove this by induction on the number of quantified variables in $X \\setminus Y$. Let's first prove the base case for a single variable $v$: $A \\models \\exists v A$.\nLet $\\mathcal{M}$ be an arbitrary truth valuation. We must show that if $\\mathcal{M} \\models A$, then $\\mathcal{M} \\models \\exists v A$.\nAssume $\\mathcal{M} \\models A$. The truth value assigned to the variable $v$ by $\\mathcal{M}$, which we denote $\\mathcal{M}(v)$, is either $\\top$ or $\\bot$.\nCase 1: $\\mathcal{M}(v) = \\top$. The satisfaction of $A$ by $\\mathcal{M}$ is equivalent to the satisfaction of $A[v:=\\top]$ by $\\mathcal{M}$ (since $v$ is already assigned $\\top$). Thus, $\\mathcal{M} \\models A[v:=\\top]$. From this, it follows that $\\mathcal{M} \\models A[v:=\\top] \\lor A[v:=\\bot]$, which is the definition of $\\mathcal{M} \\models \\exists v A$.\nCase 2: $\\mathcal{M}(v) = \\bot$. Similarly, the satisfaction of $A$ by $\\mathcal{M}$ implies $\\mathcal{M} \\models A[v:=\\bot]$. This again implies $\\mathcal{M} \\models A[v:=\\top] \\lor A[v:=\\bot]$, so $\\mathcal{M} \\models \\exists v A$.\nIn both cases, if $\\mathcal{M} \\models A$, then $\\mathcal{M} \\models \\exists v A$. Therefore, $A \\models \\exists v A$.\n\nNow, let $X \\setminus Y = \\{v_1, v_2, \\dots, v_k\\}$. We have $A \\models \\exists v_1 A$. Let $A_1 = \\exists v_1 A$. Applying the same logic to $A_1$, we get $A_1 \\models \\exists v_2 A_1$, which means $\\exists v_1 A \\models \\exists v_2 (\\exists v_1 A)$. By transitivity of semantic entailment, $A \\models \\exists v_2 \\exists v_1 A$. Continuing this process for all variables $v_1, \\dots, v_k$, we conclude that $A \\models \\exists v_k \\dots \\exists v_1 A$, which is $A \\models I$. The second property is satisfied.\n\n**3. Proof of $I \\models B$**\n\nWe are given $A \\models B$. We need to show that $I \\models B$, which is $\\exists(X \\setminus Y)A \\models B$.\nLet $\\mathcal{M}$ be an arbitrary valuation for the variables in $\\text{vars}(I) \\cup \\text{vars}(B)$. Since $\\text{vars}(I) \\subseteq X \\cap Y$ and $\\text{vars}(B) \\subseteq Y$, the valuation $\\mathcal{M}$ is defined for variables in $(X \\cap Y) \\cup Y = Y$.\nAssume $\\mathcal{M} \\models I$. By definition, $I = \\exists(X \\setminus Y)A$. Semantically, this is equivalent to the disjunction over all possible truth assignments to the variables in $V = X \\setminus Y$. Let $\\Sigma$ be the set of all $2^{|V|}$ truth assignments $\\sigma: V \\to \\{\\top, \\bot\\}$. Then $I \\equiv \\bigvee_{\\sigma \\in \\Sigma} A[V:=\\sigma]$, where $A[V:=\\sigma]$ is the formula $A$ with variables in $V$ replaced by their assigned truth values from $\\sigma$.\nThe assumption $\\mathcal{M} \\models I$ means that $\\mathcal{M} \\models \\bigvee_{\\sigma \\in \\Sigma} A[V:=\\sigma]$. This implies there exists at least one assignment $\\sigma_0 \\in \\Sigma$ such that $\\mathcal{M} \\models A[V:=\\sigma_0]$.\nLet's define a new valuation $\\mathcal{M}^*$ over all variables in $X \\cup Y$. Let $\\mathcal{M}^*$ agree with $\\mathcal{M}$ on all variables in $Y$, and let it agree with $\\sigma_0$ on all variables in $V = X \\setminus Y$. Since $X \\cup Y = Y \\cup (X \\setminus Y)$, $\\mathcal{M}^*$ is a complete valuation for all variables in $A$ and $B$.\nThe satisfaction $\\mathcal{M} \\models A[V:=\\sigma_0]$ means that the formula $A$ is true when its variables in $Y \\cap X$ are valued according to $\\mathcal{M}$ and its variables in $X \\setminus Y$ are valued according to $\\sigma_0$. This is precisely the condition for $\\mathcal{M}^* \\models A$.\nSince we are given $A \\models B$, from $\\mathcal{M}^* \\models A$ we can conclude $\\mathcal{M}^* \\models B$.\nThe variables of $B$ are all in $Y$. The valuation $\\mathcal{M}^*$ agrees with $\\mathcal{M}$ on all variables in $Y$. Therefore, the truth value of $B$ under $\\mathcal{M}^*$ is the same as its truth value under $\\mathcal{M}$. So, from $\\mathcal{M}^* \\models B$, we conclude $\\mathcal{M} \\models B$.\nWe have shown that for any relevant valuation $\\mathcal{M}$, if $\\mathcal{M} \\models I$, then $\\mathcal{M} \\models B$. Thus, $I \\models B$. The third property is satisfied.\n\nThis completes the theoretical proof.\n\n### Part 2: Concrete Example\n\nWe are given:\n- $X = \\{p, q, r\\}$ and $Y = \\{q, s\\}$. This gives $X \\cap Y = \\{q\\}$ and $X \\setminus Y = \\{p, r\\}$.\n- $A := (\\neg p \\lor q) \\land (\\neg r \\lor q) \\land (p \\lor r)$.\n- $B := q$.\n\n**1. Verification of $A \\Rightarrow B$ via Resolution**\n\nWe need to show that $A \\land \\neg B$ is unsatisfiable. We convert $A \\land \\neg B$ to a set of clauses and derive the empty clause ($\\Box$) by resolution.\n$A \\land \\neg B \\equiv ((\\neg p \\lor q) \\land (\\neg r \\lor q) \\land (p \\lor r)) \\land (\\neg q)$.\nThe set of clauses is $S = \\{\\{\\neg p, q\\}, \\{\\neg r, q\\}, \\{p, r\\}, \\{\\neg q\\}\\}$.\nThe resolution refutation proceeds as follows:\n$1.$ $\\{\\neg p, q\\}$ (from $A$)\n$2.$ $\\{\\neg r, q\\}$ (from $A$)\n$3.$ $\\{p, r\\}$ (from $A$)\n$4.$ $\\{\\neg q\\}$ (from $\\neg B$)\n$5.$ $\\{\\neg p\\}$ (from resolving $1$ and $4$ on $q$)\n$6.$ $\\{\\neg r\\}$ (from resolving $2$ and $4$ on $q$)\n$7.$ $\\{r\\}$ (from resolving $3$ and $5$ on $p$)\n$8.$ $\\Box$ (from resolving $6$ and $7$ on $r$)\nThe derivation of the empty clause proves that $A \\land \\neg B$ is unsatisfiable, which confirms that $A \\Rightarrow B$ is a validity.\n\n**2. Computation of the Interpolant $I$**\n\nThe interpolant is $I := \\exists(X \\setminus Y) A = \\exists\\{p, r\\} A$. We can eliminate the variables $p$ and $r$ in any order.\n$$ I = \\exists p \\exists r ((\\neg p \\lor q) \\land (\\neg r \\lor q) \\land (p \\lor r)) $$\nFirst, let's eliminate $r$. Let $\\varphi(p, q, r) = (\\neg p \\lor q) \\land (\\neg r \\lor q) \\land (p \\lor r)$.\n$$ \\exists r \\varphi(p, q, r) = \\varphi(p, q, r:=\\top) \\lor \\varphi(p, q, r:=\\bot) $$\nSubstituting $r=\\top$:\n$$ \\varphi(p, q, \\top) = (\\neg p \\lor q) \\land (\\neg \\top \\lor q) \\land (p \\lor \\top) = (\\neg p \\lor q) \\land (\\bot \\lor q) \\land \\top = (\\neg p \\lor q) \\land q $$\nBy the absorption law $(X \\lor Y) \\land X \\equiv X$, we have $(\\neg p \\lor q) \\land q \\equiv q$.\nSubstituting $r=\\bot$:\n$$ \\varphi(p, q, \\bot) = (\\neg p \\lor q) \\land (\\neg \\bot \\lor q) \\land (p \\lor \\bot) = (\\neg p \\lor q) \\land (\\top \\lor q) \\land p = (\\neg p \\lor q) \\land p $$\nBy the distributive law, $(\\neg p \\lor q) \\land p = (\\neg p \\land p) \\lor (q \\land p) = \\bot \\lor (p \\land q) \\equiv p \\land q$.\nSo, $\\exists r \\varphi(p, q, r) \\equiv q \\lor (p \\land q)$.\nBy the absorption law $X \\lor (Y \\land X) \\equiv X$, we have $q \\lor (p \\land q) \\equiv q$.\n\nNow we eliminate $p$ from the resulting formula $q$:\n$$ I = \\exists p (q) $$\nSince the formula $q$ does not contain the variable $p$, the quantification has no effect:\n$$ \\exists p (q) = q[p:=\\top] \\lor q[p:=\\bot] = q \\lor q \\equiv q $$\nThe computed interpolant is $I=q$.\n\nTo verify, let's check the properties for $I=q$:\n$1.$ $\\text{vars}(I) = \\{q\\}$, which is indeed $X \\cap Y$.\n$2.$ $A \\Rightarrow I$ is $A \\Rightarrow q$, which we already verified is valid.\n$3.$ $I \\Rightarrow B$ is $q \\Rightarrow q$, which is trivially valid.\nThe result is consistent.", "answer": "$$\\boxed{q}$$", "id": "2971064"}, {"introduction": "Building upon the semantic view, we now shift to a proof-theoretic perspective, which is central to many automated reasoning tools. This practice introduces the powerful McMillan-style algorithm for extracting an interpolant directly from a resolution refutation proof. By working through the steps of this algorithm [@problem_id:2971043], you will see how the structure of a proof of unsatisfiability inherently contains the information needed to construct a valid interpolant.", "problem": "Let $\\mathcal{L}$ be a propositional vocabulary partitioned into three disjoint sets of variables: the set of symbols common to both sides $S$, the set of symbols local to the left side $L_{A}$, and the set of symbols local to the right side $L_{B}$. Consider the following instance intended for the Craig interpolation theorem (CIT). Let $S=\\{s\\}$, $L_{A}=\\{a,b\\}$, and $L_{B}=\\varnothing$. Define\n- the left formula $A$ as the conjunction of clauses $(s \\lor a)$, $(s \\lor b)$, and $(\\neg a \\lor \\neg b)$,\n- the right formula $B$ as the single literal $s$.\nYou will work with the conjunction $A\\land\\neg B$ and use the resolution rule to prove its unsatisfiability, then perform McMillan-style interpolant extraction on that resolution proof.\n\nUsing only fundamental laws and core definitions from propositional logic and the resolution rule, and without appealing to any shortcut formulas, do the following:\n1. Put $A\\land\\neg B$ into clause form and construct a complete resolution refutation of $A\\land\\neg B$ (derive the empty clause).\n2. Perform McMillan-style interpolant extraction along your resolution proof, respecting the partition of symbols $S=\\{s\\}$, $L_{A}=\\{a,b\\}$, and $L_{B}=\\varnothing$. At each step, explicitly indicate the interpolant associated with each initial clause and each resolvent, and justify the combination rule you use based on the category of the pivot variable (common, $A$-local, or $B$-local).\n3. Provide the final interpolant as a closed-form propositional formula over the shared vocabulary $S$ only, simplified as much as possible.\n\nYour final answer must be a single closed-form symbolic expression (no equations or inequalities). No numerical rounding is required. Express the final interpolant using standard propositional connectives in LaTeX.", "solution": "The problem requires the derivation of a Craig interpolant for a given implication $A \\implies B$ using a resolution refutation of $A \\land \\neg B$. We will follow the specified steps: first, construct a resolution proof, and second, apply the McMillan-style algorithm to extract the interpolant from the proof.\n\nThe problem defines the logical context as follows:\nThe propositional vocabulary $\\mathcal{L}$ is partitioned into three disjoint sets:\n- The set of shared symbols, $S = \\{s\\}$.\n- The set of symbols local to formula $A$, $L_A = \\{a, b\\}$.\n- The set of symbols local to formula $B$, $L_B = \\varnothing$.\n\nThe formulas $A$ and $B$ are defined as:\n- $A \\equiv (s \\lor a) \\land (s \\lor b) \\land (\\neg a \\lor \\neg b)$.\n- $B \\equiv s$.\n\nThe Craig Interpolation Theorem states that if $A \\implies B$ is a valid implication, there exists an interpolant formula $I$ such that:\n1. $A \\implies I$ is valid.\n2. $I \\implies B$ is valid.\n3. The variables in $I$ are a subset of the shared vocabulary, i.e., $\\text{Var}(I) \\subseteq \\text{Var}(A) \\cap \\text{Var}(B) = S$.\n\nTo find such an interpolant, we first demonstrate that a resolution refutation exists for $A \\land \\neg B$, which is equivalent to proving that $A \\implies B$ is a tautology.\n\n**Part 1: Resolution Refutation of $A \\land \\neg B$**\n\nThe formula to be refuted is $A \\land \\neg B$. We convert this to clause form (Conjunctive Normal Form).\nThe clauses from $A$ are:\n$C_1: \\{s, a\\}$\n$C_2: \\{s, b\\}$\n$C_3: \\{\\neg a, \\neg b\\}$\n\nThe formula $\\neg B$ is $\\neg s$. The corresponding clause is:\n$C_4: \\{\\neg s\\}$\n\nThe set of clauses for $A \\land \\neg B$ is $\\{C_1, C_2, C_3, C_4\\}$. We now derive the empty clause, denoted $\\bot$, using the resolution rule, $ \\text{Res}(C_i, C_j, p) = (C_i \\setminus \\{p\\}) \\cup (C_j \\setminus \\{\\neg p\\}) $. We construct a proof that first eliminates the local variables from $L_A$.\n\n1.  Resolve $C_1 = \\{s, a\\}$ and $C_3 = \\{\\neg a, \\neg b\\}$ on the pivot variable $a$:\n    $C_5 = \\text{Res}(C_1, C_3, a) = \\{s, \\neg b\\}$.\n\n2.  Resolve $C_2 = \\{s, b\\}$ and the newly derived clause $C_5 = \\{s, \\neg b\\}$ on the pivot variable $b$:\n    $C_6 = \\text{Res}(C_2, C_5, b) = \\{s, s\\} = \\{s\\}$.\n\n3.  Resolve $C_6 = \\{s\\}$ and $C_4 = \\{\\neg s\\}$ on the pivot variable $s$:\n    $C_7 = \\text{Res}(C_6, C_4, s) = \\{\\} = \\bot$.\n\nThe derivation of the empty clause $\\bot$ constitutes a valid resolution refutation. This confirms that $A \\land \\neg B$ is unsatisfiable and thus an interpolant exists.\n\n**Part 2: McMillan-Style Interpolant Extraction**\n\nWe now apply a McMillan-style algorithm to the resolution proof generated above. For each clause $C$ in the proof (both initial and derived), we compute a partial interpolant $I(C)$ over the shared vocabulary $S = \\{s\\}$.\n\nThe rules for computing interpolants are as follows:\n\n- **Initialization:**\n    1. For any initial clause $C$ derived from $A$, its interpolant $I(C)$ is the disjunction of all literals in $C$ whose variables belong to the shared set $S$. If no such literals exist, the interpolant is $\\bot$ (false).\n    2. For any initial clause $C$ derived from $\\neg B$, its interpolant $I(C)$ is $\\top$ (true).\n\n- **Combination at Resolution Step:**\n    Let $C = \\text{Res}(C_i, C_j, p)$, where $p$ is the pivot variable.\n    1. If $p \\in L_A$ (the pivot is $A$-local), the new interpolant is $I(C) = I(C_i) \\lor I(C_j)$.\n    2. If $p \\in L_B$ (the pivot is $B$-local), the new interpolant is $I(C) = I(C_i) \\land I(C_j)$. In this problem, $L_B = \\varnothing$, so this case will not occur.\n    3. If $p \\in S$ (the pivot is shared), the new interpolant is $I(C) = I(C_i) \\land I(C_j)$. This simplified rule is applicable when one parent clause is purely derived from $A$-clauses and the other from $B$-clauses.\n\nWe now trace the interpolants through the resolution proof:\n\n- **Initial Clause Interpolants:**\n    - $C_1 = \\{s, a\\}$ is from $A$. The shared literal is $s$.\n      $I(C_1) = s$.\n    - $C_2 = \\{s, b\\}$ is from $A$. The shared literal is $s$.\n      $I(C_2) = s$.\n    - $C_3 = \\{\\neg a, \\neg b\\}$ is from $A$. It contains no shared literals.\n      $I(C_3) = \\bot$.\n    - $C_4 = \\{\\neg s\\}$ is from $\\neg B$.\n      $I(C_4) = \\top$.\n\n- **Derived Clause Interpolants:**\n\n    - **Step 1:** $C_5 = \\text{Res}(C_1, C_3, a)$.\n      - The pivot is $a$. Since $a \\in L_A = \\{a, b\\}$, this is an $A$-local pivot.\n      - We use the rule $I(C_5) = I(C_1) \\lor I(C_3)$.\n      - $I(C_5) = s \\lor \\bot \\equiv s$.\n\n    - **Step 2:** $C_6 = \\text{Res}(C_2, C_5, b)$.\n      - The pivot is $b$. Since $b \\in L_A = \\{a, b\\}$, this is an $A$-local pivot.\n      - We use the rule $I(C_6) = I(C_2) \\lor I(C_5)$.\n      - $I(C_6) = s \\lor s \\equiv s$.\n\n    - **Step 3:** $C_7 = \\bot = \\text{Res}(C_6, C_4, s)$.\n      - The pivot is $s$. Since $s \\in S = \\{s\\}$, this is a shared pivot.\n      - The parents are $C_6$ (derived purely from $A$-clauses) and $C_4$ (a $\\neg B$-clause).\n      - We use the rule $I(C_7) = I(C_6) \\land I(C_4)$.\n      - $I(\\bot) = s \\land \\top \\equiv s$.\n\n**Part 3: Final Interpolant**\n\nThe interpolant for the implication $A \\implies B$ is the interpolant computed for the empty clause, $I(\\bot)$.\nTherefore, the final interpolant is $I = s$.\n\nWe verify that $I=s$ is a valid interpolant:\n1.  $\\text{Var}(I) = \\{s\\}$, which is a subset of the shared vocabulary $S = \\{s\\}$. This condition holds.\n2.  $A \\implies I$ must be valid. This means $A \\land \\neg I$ must be unsatisfiable. $A \\land \\neg s \\equiv ((s \\lor a) \\land (s \\lor b) \\land (\\neg a \\lor \\neg b)) \\land \\neg s$. If $s$ is false, this simplifies to $(a) \\land (b) \\land (\\neg a \\lor \\neg b)$, which is a contradiction. Thus, $A \\implies s$ is valid.\n3.  $I \\implies B$ must be valid. This is $s \\implies s$, which is a trivial tautology.\n\nThe derived formula $s$ satisfies all properties of a Craig interpolant for the given instance. It is already in its simplest form.", "answer": "$$\\boxed{s}$$", "id": "2971043"}, {"introduction": "Our final practice extends the concept of interpolation beyond pure logic into the realm of Satisfiability Modulo Theories (SMT), focusing on the quantifier-free theory of arrays. You will design and apply an interpolation algorithm based on index and element projections, a key technique for handling specific theories in modern solvers. This exercise [@problem_id:2971036] demonstrates how interpolation is adapted to reason about complex data structures, a crucial capability in applications like formal verification and program analysis.", "problem": "Consider the quantifier-free theory of arrays in the sense of the McCarthy axioms, with an index sort and an element sort both identified with the integers. The theory has two primitive operations: for any array term $a$, index term $i$, and element term $v$, the term $\\mathit{write}(a,i,v)$ denotes an array identical to $a$ except that the value at index $i$ is $v$, and the term $\\mathit{read}(a,i)$ (written $a[i]$) denotes the element stored in array $a$ at index $i$. The theory is axiomatized by the read-over-write laws:\n- $\\mathit{read}(\\mathit{write}(a,i,v),i) = v$.\n- For all indices $i,j$, if $i \\neq j$ then $\\mathit{read}(\\mathit{write}(a,i,v),j) = \\mathit{read}(a,j)$.\n\nCraig’s interpolation theorem states: whenever formulas $A$ and $B$ are such that $A \\land B$ is unsatisfiable, there exists a formula $I$ over the signature shared by $A$ and $B$ such that $A \\models I$ and $I \\land B$ is unsatisfiable.\n\nDesign an algorithm that, given unsatisfiable quantifier-free array constraints $A$ and $B$, constructs a quantifier-free Craig interpolant using index and element projections. Your algorithm should start from the axioms above and basic propositional reasoning. It must:\n- Explain how to form an index projection that records equalities or disequalities among indices appearing in $A$ when read-over-write is applied, in a way that respects the shared signature constraint.\n- Explain how to form an element projection that records equalities among element terms forced by $A$ under the same application of read-over-write.\n- Explain how to combine these projections into a quantifier-free interpolant that uses only shared symbols and is implied by $A$.\n\nThen, apply your algorithm to the following specific instance. Let $i$ and $k$ be shared index variables, $v$ a shared element variable, and $a$ and $b$ array variables local to $A$. Consider\n$$ A \\equiv \\big( b = \\mathit{write}(a,i,1) \\big) \\land \\big( v = \\mathit{read}(b,k) \\big) $$\n$$ B \\equiv \\big( i = k \\big) \\land \\big( v \\neq 1 \\big) $$\n\nProve that $A \\land B$ is unsatisfiable in the quantifier-free array theory using only the axioms above, carry out your index and element projection algorithm step by step on this instance, and compute a single closed-form analytic expression for the interpolant $I$ over the shared signature $\\{i,k,v\\}$. The final answer must be the syntactic expression of $I$ in LaTeX. No rounding is required, and there are no physical units involved. Express the final interpolant as a single formula.", "solution": "The problem is valid. It is a well-posed question within the established field of mathematical logic and automated reasoning, specifically concerning Satisfiability Modulo Theories (SMT) and Craig interpolation for the theory of arrays. All terms are formally defined, and the task is to derive a specific logical formula based on a clearly stated set of axioms and initial formulas.\n\nThe overall task is to first describe a general algorithm for constructing a Craig interpolant in the quantifier-free theory of arrays and then apply it to a specific instance.\n\n### General Algorithm for Interpolation in the Theory of Arrays\n\nLet $A$ and $B$ be two quantifier-free formulas in the theory of arrays such that their conjunction $A \\land B$ is unsatisfiable. Let $\\Sigma_A$ and $\\Sigma_B$ be the sets of non-logical symbols (variables, constants, functions) in $A$ and $B$, respectively. The shared signature is $\\Sigma_{sh} = \\Sigma_A \\cap \\Sigma_B$. A Craig interpolant $I$ is a formula such that:\n1.  $A \\models I$ ($A$ entails $I$).\n2.  $I \\land B$ is unsatisfiable.\n3.  The signature of $I$ is a subset of $\\Sigma_{sh}$.\n\nThe algorithm constructs $I$ from a proof that $A \\land B$ is unsatisfiable. The core idea is to trace the consequences of $A$, but only propagate information that is expressible using the shared signature $\\Sigma_{sh}$.\n\n**Step 1: Proof Generation and Substitution**\nFirst, we demonstrate that $A \\land B$ is unsatisfiable. For quantifier-free theories, this typically involves substituting equals for equals and applying theory axioms until an explicit contradiction (e.g., $\\perp$, or $x=y \\land x \\neq y$) is derived. During this process, we eliminate variables local to $A$ (i.e., those in $\\Sigma_A \\setminus \\Sigma_{sh}$) by substituting their definitions from $A$ into other parts of the reasoning derived from $A$. This often isolates a term of the form $\\mathit{read}(\\mathit{write}(\\dots))$.\n\n**Step 2: Forming Index and Element Projections**\nThe application of the read-over-write axioms is the central step for deriving consequences in the theory of arrays. When we encounter a term like $\\mathit{read}(\\mathit{write}(a,i,v),j)$ derived from $A$, we perform a case split based on the indices $i$ and $j$:\n\n- **Case 1:** $i = j$. The term simplifies to $v$.\n- **Case 2:** $i \\neq j$. The term simplifies to $\\mathit{read}(a,j)$.\n\nThis case split leads to the generation of projections:\n\n- An **index projection** is a formula involving only indices from the shared signature $\\Sigma_{sh}$. It represents a condition on these indices. In the case split above, if both $i$ and $j$ are in $\\Sigma_{sh}$, then the formula $i=j$ (and its negation $i \\neq j$) is a candidate for an index projection. This projection captures the circumstances under which $A$ yields specific information.\n\n- An **element projection** is a formula involving only element-sorted terms from the shared signature $\\Sigma_{sh}$. It represents a consequence for these terms that holds under a specific index projection. For example, if under the index projection $i=j$, the original array term simplifies to a shared value $v$, leading to a derived equality like $t=v$ where $t$ is also shared, then $t=v$ is a candidate for an element projection. If a case leads to a consequence involving local variables (e.g., $\\mathit{read}(a,j)$ where $a$ is local to $A$), that branch of reasoning is discarded for the purpose of building the interpolant, as it is not expressible in $\\Sigma_{sh}$.\n\n**Step 3: Combining Projections into the Interpolant**\nThe interpolant $I$ is constructed as a logical combination of the derived projections. For each index projection $C_{idx}$ that leads to a corresponding element projection $C_{elem}$ expressible in $\\Sigma_{sh}$, we have shown that $A \\models (C_{idx} \\Rightarrow C_{elem})$. The final interpolant $I$ is the conjunction of all such implications derived from the proof. This can often be simplified into a single logical formula.\n\n### Application to the Specific Instance\n\nWe are given:\n- $A \\equiv \\big( b = \\mathit{write}(a,i,1) \\big) \\land \\big( v = \\mathit{read}(b,k) \\big)$\n- $B \\equiv \\big( i = k \\big) \\land \\big( v \\neq 1 \\big)$\n- The shared signature is $\\Sigma_{sh} = \\{i, k, v\\}$. The array variables $a$ and $b$ are local to $A$.\n\n**Step 1: Prove Unsatisfiability of $A \\land B$**\n\n1.  Assume $A \\land B$.\n2.  From $A$, we have the equalities $b = \\mathit{write}(a,i,1)$ and $v = \\mathit{read}(b,k)$.\n3.  Substitute the expression for $b$ from the first equality into the second: $v = \\mathit{read}(\\mathit{write}(a,i,1), k)$. This consequence is derived solely from $A$.\n4.  From $B$, we have the equality $i = k$.\n5.  Apply the condition $i=k$ to the expression derived in step 3. The indices of the $\\mathit{read}$ and $\\mathit{write}$ operations are now equal.\n6.  By the first axiom of arrays, $\\mathit{read}(\\mathit{write}(a,i,v'),i) = v'$, we have $\\mathit{read}(\\mathit{write}(a,i,1),k) = 1$ since $i=k$.\n7.  Combining steps 3 and 6, we deduce $v = 1$.\n8.  From $B$, we also have the in-equality $v \\neq 1$.\n9.  Steps 7 and 8 yield the contradiction $(v = 1) \\land (v \\neq 1)$.\n10. Thus, $A \\land B$ is unsatisfiable.\n\n**Step 2: Carry out the Projection Algorithm**\n\nWe now re-enact the proof, carefully tracking which information is expressible in $\\Sigma_{sh} = \\{i, k, v\\}$.\n\n1.  **Substitution in $A$**: As in the proof, we start from $A$ and substitute the local variable $b$. This yields the key consequence of $A$:\n    $$v = \\mathit{read}(\\mathit{write}(a,i,1), k)$$\n\n2.  **Case Split and Projections**: We analyze the term $\\mathit{read}(\\mathit{write}(a,i,1), k)$ using the array axioms. The indices involved are $i$ and $k$. Both are in the shared signature $\\Sigma_{sh}$.\n\n    - **Case (a):** $i = k$.\n        - This is a condition on shared indices. This formula, $i=k$, is our **index projection**.\n        - Under this assumption, the first array axiom applies: $\\mathit{read}(\\mathit{write}(a,i,1),k) = 1$.\n        - Substituting this back into the consequence from Step 1 gives $v = 1$.\n        - The variable $v$ is in $\\Sigma_{sh}$, and $1$ is a constant. Thus, the formula $v=1$ is expressible in $\\Sigma_{sh}$. This is our **element projection** corresponding to the index projection $i=k$.\n\n    - **Case (b):** $i \\neq k$.\n        - This condition, $i \\neq k$, is another potential index projection.\n        - Under this assumption, the second array axiom applies: $\\mathit{read}(\\mathit{write}(a,i,1),k) = \\mathit{read}(a,k)$.\n        - The consequence from Step 1 becomes $v = \\mathit{read}(a,k)$.\n        - The term $\\mathit{read}(a,k)$ depends on the variable $a$, which is local to $A$ and not in $\\Sigma_{sh}$. Therefore, this equality cannot be part of the interpolant. This path does not yield a useful element projection.\n\n**Step 3: Combine Projections into the Interpolant $I$**\n\nOur analysis found only one path that yields a non-trivial consequence in the shared signature: the case where $i=k$ implies $v=1$. This gives us the implication:\n$$ (i=k) \\Rightarrow (v=1) $$\nLet's define our interpolant $I$ as this formula: $I \\equiv (i=k) \\Rightarrow (v=1)$. We must verify that it satisfies the three conditions for a Craig interpolant.\n\n1.  **$A \\models I$**: Our derivation in Step 2 shows that from $A$, we can derive $v = \\mathit{read}(\\mathit{write}(a,i,1),k)$. If we assume the antecedent of $I$, which is $i=k$, this expression simplifies to $v=1$ (the consequent of $I$) by the array axioms. This formally shows that $A$ entails $(i=k) \\Rightarrow (v=1)$.\n\n2.  **$I \\land B$ is unsatisfiable**: We test the conjunction of $I \\equiv (i=k) \\Rightarrow (v=1)$ and $B \\equiv (i=k) \\land (v \\neq 1)$:\n    $$ \\big( (i=k) \\Rightarrow (v=1) \\big) \\land \\big( (i=k) \\land (v \\neq 1) \\big) $$\n    From the conjuncts $(i=k) \\Rightarrow (v=1)$ and $i=k$, we can infer $v=1$ by modus ponens. This contradicts the other conjunct, $v \\neq 1$. Therefore, $I \\land B$ is unsatisfiable.\n\n3.  **Signature of $I$ is in $\\Sigma_{sh}$**: The formula $I \\equiv (i=k) \\Rightarrow (v=1)$ contains only the symbols $i$, $k$, $v$, the equality predicate, and the constant $1$. All these symbols are in the shared signature $\\Sigma_{sh} = \\{i,k,v\\}$ (constants and logical connectives are considered shared by default).\n\nThe formula $I \\equiv (i=k) \\Rightarrow (v=1)$ satisfies all the properties of a Craig interpolant for the given $A$ and $B$. This formula can also be expressed in the logically equivalent form $(i \\neq k) \\lor (v=1)$. We provide the implicative form as the final answer, as it most directly reflects the reasoning of the projection algorithm.", "answer": "$$ \\boxed{(i = k) \\Rightarrow (v = 1)} $$", "id": "2971036"}]}