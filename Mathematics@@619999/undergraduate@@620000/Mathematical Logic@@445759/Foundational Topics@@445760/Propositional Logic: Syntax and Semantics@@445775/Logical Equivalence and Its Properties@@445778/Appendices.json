{"hands_on_practices": [{"introduction": "Understanding logical equivalence begins with its precise formal definition. Two formulas are equivalent if they have the same truth value in every possible scenario, a condition captured by their biconditional, $\\varphi \\leftrightarrow \\psi$, being a tautology (or valid). This exercise challenges you to distinguish this strong condition from the weaker notion of satisfiability, where formulas might match in some cases but not others. By finding pairs of formulas whose biconditional is satisfiable but not valid, you will solidify your grasp on what it truly means for two statements to be logically interchangeable [@problem_id:3046361].", "problem": "In classical propositional logic, two formulas $\\,\\varphi\\,$ and $\\,\\psi\\,$ are logically equivalent precisely when the biconditional $\\,\\varphi \\leftrightarrow \\psi\\,$ is valid, that is, true under every propositional valuation. Select all options that give a pair of formulas $\\,(\\varphi,\\psi)\\,$ such that $\\,\\varphi \\leftrightarrow \\psi\\,$ is satisfiable but not valid, thereby showing that $\\,\\varphi\\,$ and $\\,\\psi\\,$ are not logically equivalent.\n\nA. $(\\,p,\\; p \\lor q\\,)$\n\nB. $(\\,p \\lor q,\\; q \\lor p\\,)$\n\nC. $(\\,p,\\; \\lnot p\\,)$\n\nD. $(\\,p \\land q,\\; p\\,)$\n\nE. $(\\,p \\lor \\lnot p,\\; q \\to p\\,)$", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- Field of study: Classical propositional logic.\n- Definition: Two formulas $\\varphi$ and $\\psi$ are logically equivalent if and only if the biconditional $\\varphi \\leftrightarrow \\psi$ is valid.\n- Definition: A formula is valid if it is true under every propositional valuation.\n- Task: Select all options providing a pair $(\\varphi, \\psi)$ for which $\\varphi \\leftrightarrow \\psi$ is satisfiable but not valid.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientific Grounding**: The problem is formulated within the standard framework of classical propositional logic. The definitions of logical equivalence, validity, and satisfiability are all standard and foundational to the field.\n- **Well-Posed**: The problem is well-posed. The condition \"satisfiable but not valid\" is a precise logical property. For any given pair of formulas $(\\varphi, \\psi)$, the truth value of the biconditional $\\varphi \\leftrightarrow \\psi$ under all possible valuations can be determined systematically (e.g., via a truth table). This allows for a unique and verifiable determination of which options satisfy the stated criteria.\n- **Objective**: The problem is stated in formal, objective language without ambiguity or subjective elements.\n\n**Step 3: Verdict and Action**\nThe problem statement is valid as it is scientifically grounded, well-posed, objective, and self-contained. The solution process may proceed.\n\n**Solution Derivation**\nThe problem requires us to identify all pairs of formulas $(\\varphi, \\psi)$ from the given options such that the biconditional formula $\\varphi \\leftrightarrow \\psi$ is satisfiable but not valid.\n\nLet a propositional valuation be a function $v$ that assigns a truth value, True ($T$) or False ($F$), to each propositional variable.\n\nA formula $\\chi$ is **satisfiable** if there exists at least one valuation $v$ such that $v(\\chi) = T$.\nFor the biconditional $\\varphi \\leftrightarrow \\psi$, this means there is at least one valuation $v$ where $v(\\varphi)$ and $v(\\psi)$ have the same truth value, i.e., $v(\\varphi) = v(\\psi)$.\n\nA formula $\\chi$ is **valid** (a tautology) if for every valuation $v$, $v(\\chi) = T$.\nThe condition that $\\varphi \\leftrightarrow \\psi$ is **not valid** means there exists at least one valuation $v'$ such that $v'(\\varphi \\leftrightarrow \\psi) = F$. This occurs when $v'(\\varphi)$ and $v'(\\psi)$ have different truth values, i.e., $v'(\\varphi) \\neq v'(\\psi)$.\n\nIn summary, we are searching for pairs $(\\varphi, \\psi)$ that are not logically equivalent (as their biconditional is not valid), but for which there is at least one case where they share the same truth value (making their biconditional satisfiable).\n\nWe will now analyze each option using truth tables.\n\n**A. $(\\varphi,\\; \\psi) = (p,\\; p \\lor q)$**\nWe examine the formula $\\varphi \\leftrightarrow \\psi$, which is $p \\leftrightarrow (p \\lor q)$.\nThe truth table is as follows:\n| $v(p)$ | $v(q)$ | $v(\\varphi) = v(p)$ | $v(\\psi) = v(p \\lor q)$ | $v(\\varphi \\leftrightarrow \\psi)$ |\n|---|---|---|---|---|\n| $T$ | $T$ | $T$ | $T$ | $T$ |\n| $T$ | $F$ | $T$ | $T$ | $T$ |\n| $F$ | $T$ | $F$ | $T$ | $F$ |\n| $F$ | $F$ | $F$ | $F$ | $T$ |\n\nThe formula $p \\leftrightarrow (p \\lor q)$ is true for valuations $(v_1(p)=T, v_1(q)=T)$, $(v_2(p)=T, v_2(q)=F)$, and $(v_3(p)=F, v_3(q)=F)$. Since it can be true, it is **satisfiable**.\nThe formula is false for the valuation $(v_4(p)=F, v_4(q)=T)$. Since it can be false, it is **not valid**.\nThis option meets both conditions.\n**Verdict: Correct.**\n\n**B. $(\\varphi,\\; \\psi) = (p \\lor q,\\; q \\lor p)$**\nWe examine the formula $(p \\lor q) \\leftrightarrow (q \\lor p)$. This relates to the commutative property of disjunction.\n| $v(p)$ | $v(q)$ | $v(\\varphi) = v(p \\lor q)$ | $v(\\psi) = v(q \\lor p)$ | $v(\\varphi \\leftrightarrow \\psi)$ |\n|---|---|---|---|---|\n| $T$ | $T$ | $T$ | $T$ | $T$ |\n| $T$ | $F$ | $T$ | $T$ | $T$ |\n| $F$ | $T$ | $T$ | $T$ | $T$ |\n| $F$ | $F$ | $F$ | $F$ | $T$ |\n\nThe formula $(p \\lor q) \\leftrightarrow (q \\lor p)$ is true for all possible valuations. Therefore, it is **satisfiable** and **valid**.\nThis option fails the \"not valid\" condition. The formulas are logically equivalent.\n**Verdict: Incorrect.**\n\n**C. $(\\varphi,\\; \\psi) = (p,\\; \\lnot p)$**\nWe examine the formula $p \\leftrightarrow \\lnot p$.\n| $v(p)$ | $v(\\varphi) = v(p)$ | $v(\\psi) = v(\\lnot p)$ | $v(\\varphi \\leftrightarrow \\psi)$ |\n|---|---|---|---|\n| $T$ | $T$ | $F$ | $F$ |\n| $F$ | $F$ | $T$ | $F$ |\n\nThe formula $p \\leftrightarrow \\lnot p$ is false for all possible valuations. A formula that is always false is a contradiction. As such, it is **not satisfiable**.\nThis option fails the \"satisfiable\" condition.\n**Verdict: Incorrect.**\n\n**D. $(\\varphi,\\; \\psi) = (p \\land q,\\; p)$**\nWe examine the formula $(p \\land q) \\leftrightarrow p$.\n| $v(p)$ | $v(q)$ | $v(\\varphi) = v(p \\land q)$ | $v(\\psi) = v(p)$ | $v(\\varphi \\leftrightarrow \\psi)$ |\n|---|---|---|---|---|\n| $T$ | $T$ | $T$ | $T$ | $T$ |\n| $T$ | $F$ | $F$ | $T$ | $F$ |\n| $F$ | $T$ | $F$ | $F$ | $T$ |\n| $F$ | $F$ | $F$ | $F$ | $T$ |\n\nThe formula $(p \\land q) \\leftrightarrow p$ is true for valuations $(v_1(p)=T, v_1(q)=T)$, $(v_2(p)=F, v_2(q)=T)$, and $(v_3(p)=F, v_3(q)=F)$. Since it can be true, it is **satisfiable**.\nThe formula is false for the valuation $(v_4(p)=T, v_4(q)=F)$. Since it can be false, it is **not valid**.\nThis option meets both conditions.\n**Verdict: Correct.**\n\n**E. $(\\varphi,\\; \\psi) = (p \\lor \\lnot p,\\; q \\to p)$**\nThe formula $\\varphi = p \\lor \\lnot p$ is a tautology; it is true under every valuation.\nWe examine the formula $(p \\lor \\lnot p) \\leftrightarrow (q \\to p)$.\nSince $v(p \\lor \\lnot p)$ is always $T$, the truth value of the biconditional is the same as the truth value of $q \\to p$. So we need to determine if $q \\to p$ is satisfiable but not valid.\n| $v(p)$ | $v(q)$ | $v(\\psi) = v(q \\to p)$ | $v(\\varphi \\leftrightarrow \\psi)=v(T \\leftrightarrow (q \\to p))$ |\n|---|---|---|---|\n| $T$ | $T$ | $T$ | $T$ |\n| $T$ | $F$ | $T$ | $T$ |\n| $F$ | $T$ | $F$ | $F$ |\n| $F$ | $F$ | $T$ | $T$ |\n\nThe resulting truth column for the biconditional is $(T, T, F, T)$.\nThe formula is true for multiple valuations, so it is **satisfiable**.\nThe formula is false when $v(p)=F$ and $v(q)=T$, so it is **not valid**.\nThis option meets both conditions.\n**Verdict: Correct.**\n\nIn summary, options A, D, and E present pairs of formulas whose biconditional is satisfiable but not valid.", "answer": "$$\\boxed{ADE}$$", "id": "3046361"}, {"introduction": "One of the most powerful consequences of logical equivalence is the principle of substitution. This principle guarantees that if you replace a part of a larger formula with a logically equivalent expression, the truth value of the entire formula remains unchanged. This practice asks you to demonstrate this principle from first principles, proving that replacing a formula $\\alpha$ with an equivalent formula $\\beta$ inside a complex logical context $C[\\cdot]$ results in an equivalent overall formula [@problem_id:3046400]. This exercise confirms that logical equivalence is a structural property that is preserved during the composition of formulas.", "problem": "Let $p$, $q$, $r$, $s$, and $t$ be propositional variables. Define the single-hole context $C[\\cdot]$ by\n$$\nC[\\cdot] \\;:=\\; \\bigl((\\,p \\lor (\\cdot)\\,) \\to (\\,r \\land \\neg(\\cdot)\\,)\\bigr) \\leftrightarrow \\bigl(q \\to (\\cdot)\\bigr),\n$$\nand let $\\alpha := (s \\to t)$ and $\\beta := (\\neg s \\lor t)$. Using only the fundamental, truth-functional semantics of the propositional connectives (that is, the definition of the valuation of $\\neg$, $\\lor$, $\\land$, $\\to$, and $\\leftrightarrow$ in terms of the valuations of their immediate subformulas), argue from first principles that $\\alpha$ and $\\beta$ are logically equivalent and that replacing $\\alpha$ by $\\beta$ within the context $C[\\cdot]$ preserves overall equivalence. Then, let $N$ be the exact number of valuations $v : \\{p,q,r,s,t\\} \\to \\{0,1\\}$ such that $C[\\alpha]$ and $C[\\beta]$ evaluate to different truth values under $v$. Compute $N$. Provide your final answer as a single exact integer. No rounding is required.", "solution": "The problem requires a three-part argument concerning propositional logic. First, to prove the logical equivalence of two formulas, $\\alpha$ and $\\beta$, from first principles. Second, to prove that substituting $\\beta$ for $\\alpha$ within a given context $C[\\cdot]$ preserves logical equivalence, again from first principles. Third, to compute the number of valuations $N$ for which the resulting formulas, $C[\\alpha]$ and $C[\\beta]$, yield different truth values.\n\nLet the set of propositional variables be $\\{p, q, r, s, t\\}$. A valuation $v$ is a function $v : \\{p,q,r,s,t\\} \\to \\{0,1\\}$, where $0$ represents False and $1$ represents True.\n\nThe formulas and the context are defined as:\n$\\alpha := (s \\to t)$\n$\\beta := (\\neg s \\lor t)$\n$C[\\cdot] \\;:=\\; \\bigl((\\,p \\lor (\\cdot)\\,) \\to (\\,r \\land \\neg(\\cdot)\\,)\\bigr) \\leftrightarrow \\bigl(q \\to (\\cdot)\\bigr)$\n\nThe truth-functional semantics for the logical connectives are defined for any subformulas $A$ and $B$ and any valuation $v$ as follows:\n$v(\\neg A) = 1 - v(A)$\n$v(A \\lor B) = \\max\\{v(A), v(B)\\}$\n$v(A \\land B) = \\min\\{v(A), v(B)\\}$\n$v(A \\to B) = 1$ if $v(A) \\le v(B)$ (i.e., not the case that $v(A)=1$ and $v(B)=0$), and $0$ otherwise.\n$v(A \\leftrightarrow B) = 1$ if $v(A) = v(B)$, and $0$ otherwise.\n\n**Part 1: Proving the logical equivalence of $\\alpha$ and $\\beta$.**\n\nTwo formulas are logically equivalent if they evaluate to the same truth value under all possible valuations of their propositional variables. The formulas $\\alpha$ and $\\beta$ depend only on the variables $s$ and $t$. There are $2^2 = 4$ possible valuations for the pair $(s, t)$. We must verify that $v(\\alpha) = v(\\beta)$ for each case.\n\nCase 1: $v(s) = 0$, $v(t) = 0$.\n$v(\\alpha) = v(s \\to t) = v(0 \\to 0) = 1$.\n$v(\\beta) = v(\\neg s \\lor t) = v(\\neg 0 \\lor 0) = v(1 \\lor 0) = \\max\\{1, 0\\} = 1$.\nIn this case, $v(\\alpha) = v(\\beta)$.\n\nCase 2: $v(s) = 0$, $v(t) = 1$.\n$v(\\alpha) = v(s \\to t) = v(0 \\to 1) = 1$.\n$v(\\beta) = v(\\neg s \\lor t) = v(\\neg 0 \\lor 1) = v(1 \\lor 1) = \\max\\{1, 1\\} = 1$.\nIn this case, $v(\\alpha) = v(\\beta)$.\n\nCase 3: $v(s) = 1$, $v(t) = 0$.\n$v(\\alpha) = v(s \\to t) = v(1 \\to 0) = 0$.\n$v(\\beta) = v(\\neg s \\lor t) = v(\\neg 1 \\lor 0) = v(0 \\lor 0) = \\max\\{0, 0\\} = 0$.\nIn this case, $v(\\alpha) = v(\\beta)$.\n\nCase 4: $v(s) = 1$, $v(t) = 1$.\n$v(\\alpha) = v(s \\to t) = v(1 \\to 1) = 1$.\n$v(\\beta) = v(\\neg s \\lor t) = v(\\neg 1 \\lor 1) = v(0 \\lor 1) = \\max\\{0, 1\\} = 1$.\nIn this case, $v(\\alpha) = v(\\beta)$.\n\nSince for every possible valuation of $s$ and $t$, the truth value of $\\alpha$ is identical to the truth value of $\\beta$, the formulas are logically equivalent. We denote this by $\\alpha \\equiv \\beta$. This is a well-known equivalence defining the material conditional.\n\n**Part 2: Proving the logical equivalence of $C[\\alpha]$ and $C[\\beta]$.**\n\nWe must demonstrate from first principles that $C[\\alpha] \\equiv C[\\beta]$. The principle of truth-functionality states that the truth value of a compound formula is uniquely determined by the truth values of its immediate subformulas. This principle can be extended by induction to show that the truth value of a formula is uniquely determined by the truth values of its atomic propositional variables.\n\nLet $v$ be an arbitrary valuation for the variables $\\{p, q, r, s, t\\}$. The truth value of the formula $C[\\phi]$ under $v$, where $\\phi$ is any formula, is computed based on the values $v(p)$, $v(q)$, $v(r)$, and $v(\\phi)$. We can express this functional dependency as:\n$v(C[\\phi]) = f(v(p), v(q), v(r), v(\\phi))$.\nThe function $f$ represents the fixed structure of the context $C[\\cdot]$ applied to the truth values of its inputs. Specifically:\n$f(x, y, z, w) = \\bigl((x \\lor w) \\to (z \\land \\neg w)\\bigr) \\leftrightarrow (y \\to w)$.\n\nTo find the valuation of $C[\\alpha]$, we compute:\n$v(C[\\alpha]) = f(v(p), v(q), v(r), v(\\alpha))$.\n\nTo find the valuation of $C[\\beta]$, we compute:\n$v(C[\\beta]) = f(v(p), v(q), v(r), v(\\beta))$.\n\nFrom Part 1, we established that $\\alpha \\equiv \\beta$, which means that for any valuation $v$, $v(\\alpha) = v(\\beta)$.\nLet $v_p = v(p)$, $v_q = v(q)$, $v_r = v(r)$, and $v_\\alpha = v(\\alpha)$, $v_\\beta = v(\\beta)$. We know $v_\\alpha = v_\\beta$.\nTherefore, for any valuation $v$, the arguments passed to the function $f$ are identical in both cases:\n$v(C[\\alpha]) = f(v_p, v_q, v_r, v_\\alpha)$\n$v(C[\\beta]) = f(v_p, v_q, v_r, v_\\beta) = f(v_p, v_q, v_r, v_\\alpha)$\n\nSince the function $f$ is deterministic (i.e., a given set of inputs yields exactly one output) and it receives the exact same inputs for both $C[\\alpha]$ and $C[\\beta]$ under any valuation $v$, its output must be the same.\nThus, $v(C[\\alpha]) = v(C[\\beta])$ for all possible valuations $v$.\nBy the definition of logical equivalence, this demonstrates that $C[\\alpha] \\equiv C[\\beta]$. This confirms the general principle of substitution of logically equivalent subformulas.\n\n**Part 3: Computing the number $N$.**\n\nThe problem asks for $N$, defined as the exact number of valuations $v : \\{p,q,r,s,t\\} \\to \\{0,1\\}$ such that $v(C[\\alpha])$ and $v(C[\\beta])$ evaluate to different truth values. This condition can be written as $v(C[\\alpha]) \\neq v(C[\\beta])$.\n\nIn Part 2, we proved that for any and every valuation $v$, it is the case that $v(C[\\alpha]) = v(C[\\beta])$. This is the very meaning of the logical equivalence $C[\\alpha] \\equiv C[\\beta]$.\nTherefore, there are no valuations for which $v(C[\\alpha]) \\neq v(C[\\beta])$. The set of valuations that satisfy this inequality is the empty set.\n\nThe number $N$ is the cardinality of this empty set.\nConsequently, $N = 0$.\nThe total number of variables is $5$, so there are $2^5 = 32$ total valuations. For all $32$ of these valuations, $C[\\alpha]$ and $C[\\beta]$ produce the same truth value. For $0$ of these valuations, they produce different truth values.", "answer": "$$\\boxed{0}$$", "id": "3046400"}, {"introduction": "Logical equivalence finds critical application in automated reasoning, particularly in preparing formulas for SAT solvers, which require input in Conjunctive Normal Form (CNF). While naive conversion methods can cause an exponential explosion in formula size, a more sophisticated technique preserves satisfiability while ensuring linear growth. This exercise challenges you to evaluate different pipelines for CNF conversion and identify the one that correctly uses auxiliary variables to create an equisatisfiable formula efficiently, a method known as the Tseitin transformation [@problem_id:3046374]. This demonstrates how theoretical concepts enable powerful, real-world computational tools.", "problem": "Let $\\varphi$ be a propositional formula over a finite set of propositional atoms. The goal is to design a pipeline that converts $\\varphi$ into a formula in Conjunctive Normal Form (CNF), suitable for input to a Boolean Satisfiability Problem (SAT) solver, while avoiding exponential blowup in size. A pipeline is considered equivalence-preserving in the conservative-extension sense if, for every valuation $\\nu$ of the original atoms, the following holds:\n$$\n\\nu \\vDash \\varphi \\quad \\text{if and only if} \\quad \\exists \\hat{\\nu}\\,(\\hat{\\nu} \\text{ extends } \\nu \\text{ and } \\hat{\\nu} \\vDash \\Phi),\n$$\nwhere $\\Phi$ is the CNF output of the pipeline and $\\hat{\\nu}$ is a valuation of both the original atoms and any fresh atoms introduced by the pipeline. In addition, the pipeline must ensure that the size of $\\Phi$ is bounded by $O(n)$, where $n$ is the size of $\\varphi$ measured by the number of symbols.\n\nThe following fundamental base must be used implicitly by any correct pipeline or justification: the truth-functional semantics of $\\neg$, $\\land$, $\\lor$, $\\rightarrow$, and $\\leftrightarrow$; the definition of logical equivalence as truth equality under all valuations; the algebraic laws of propositional logic including elimination of $\\rightarrow$ and $\\leftrightarrow$, De Morgan’s laws, associativity, commutativity, and distributivity; and the definition of Conjunctive Normal Form as a conjunction of disjunctions of literals.\n\nSelect the option that correctly specifies such a pipeline. Each option describes a sequence of transformations and the properties claimed.\n\nA. Eliminate $\\rightarrow$ and $\\leftrightarrow$ in $\\varphi$; push $\\neg$ inward to obtain Negation Normal Form via De Morgan’s laws; repeatedly distribute $\\lor$ over $\\land$ until CNF is obtained. This pipeline claims to preserve logical equivalence exactly (no fresh atoms), and to have output size at most $O(n)$.\n\nB. Construct a parse tree for $\\varphi$. Introduce a fresh atom $v_{\\psi}$ for every subformula $\\psi$ of $\\varphi$. For each node, add CNF clauses that enforce $v_{\\psi} \\leftrightarrow \\operatorname{op}(v_{\\psi_1},\\dots,v_{\\psi_k})$, where $\\operatorname{op}$ is the corresponding connective at the node and $v_{\\psi_i}$ are the fresh atoms of its immediate subformulas. For example, for a conjunction $\\psi = \\alpha \\land \\beta$ add the $3$ clauses $(\\neg v_{\\psi} \\lor v_{\\alpha})$, $(\\neg v_{\\psi} \\lor v_{\\beta})$, and $(\\neg v_{\\alpha} \\lor \\neg v_{\\beta} \\lor v_{\\psi})$; for a disjunction $\\psi = \\alpha \\lor \\beta$ add $(\\neg v_{\\alpha} \\lor v_{\\psi})$, $(\\neg v_{\\beta} \\lor v_{\\psi})$, and $(\\neg v_{\\psi} \\lor v_{\\alpha} \\lor v_{\\beta})$; and for a negation $\\psi = \\neg \\alpha$ add $(\\neg v_{\\psi} \\lor \\neg v_{\\alpha})$ and $(v_{\\psi} \\lor v_{\\alpha})$. Conjoin all such clauses and finally conjoin the unit clause $v_{\\varphi}$. This pipeline claims to be a conservative extension that preserves equivalence over the original atoms (as stated above) and yields a CNF of size $O(n)$.\n\nC. As in Option B, introduce a fresh atom $v_{\\psi}$ for each subformula $\\psi$, but for each connective only encode the forward implication from the fresh atom to the components, for instance for $\\psi = \\alpha \\land \\beta$ add only $(\\neg v_{\\psi} \\lor v_{\\alpha})$ and $(\\neg v_{\\psi} \\lor v_{\\beta})$, and for $\\psi = \\alpha \\lor \\beta$ add only $(\\neg v_{\\alpha} \\lor v_{\\psi})$ and $(\\neg v_{\\beta} \\lor v_{\\psi})$. Conclude by conjoining $v_{\\varphi}$. This pipeline claims to be equivalence-preserving in the conservative-extension sense and linear in size.\n\nD. As in Option B, introduce fresh atoms and biconditional constraints for every subformula, but omit conjoining $v_{\\varphi}$ at the end. Return only the conjunction of all definitional clauses. This pipeline claims to be equivalence-preserving in the conservative-extension sense and linear in size.\n\nE. First convert $\\varphi$ to Disjunctive Normal Form by distributing $\\land$ over $\\lor$, then apply a clause-learning resolution scheme to derive a CNF that is logically equivalent to $\\varphi$ and linear in size by reusing derived clauses. This pipeline claims to preserve equivalence and avoid blowup.\n\nWhich option satisfies the stated requirements?", "solution": "The user requires a critical validation of the problem statement, followed by a detailed solution and evaluation of options for converting a propositional formula $\\varphi$ into an equisatisfiable formula $\\Phi$ in Conjunctive Normal Form (CNF) such that the size of $\\Phi$ is linear in the size of $\\varphi$.\n\n**Problem Validation**\n\n**Step 1: Extract Givens**\n-   Let $\\varphi$ be a propositional formula over a finite set of propositional atoms.\n-   Goal: Convert $\\varphi$ into a CNF formula $\\Phi$.\n-   Requirement 1 (Equivalence): The conversion must be \"equivalence-preserving in the conservative-extension sense,\" defined as: for every valuation $\\nu$ of the original atoms, $\\nu \\vDash \\varphi$ if and only if there exists a valuation $\\hat{\\nu}$ that extends $\\nu$ and satisfies $\\Phi$ (i.e., $\\hat{\\nu} \\vDash \\Phi$).\n-   Requirement 2 (Size): The size of $\\Phi$ must be bounded by $O(n)$, where $n$ is the size of $\\varphi$.\n-   Implicit Knowledge Base: Semantics of propositional connectives ($\\neg$, $\\land$, $\\lor$, $\\rightarrow$, $\\leftrightarrow$), logical equivalence, algebraic laws of logic (e.g., De Morgan's, distributivity), and the definition of CNF.\n\n**Step 2: Validate Using Extracted Givens**\n-   **Scientifically Grounded:** The problem is a standard, fundamental topic in computational logic and theoretical computer science. The conversion of propositional formulas to CNF is a crucial preprocessing step for modern SAT solvers. The distinction between a naive, exponential conversion and a sophisticated, linear-time conversion (via a Tseitin-style transformation) is a core concept.\n-   **Well-Posed:** The problem is clearly defined. It specifies the input ($\\varphi$), the desired output format (CNF), and two precise constraints (equisatisfiability and linear size). The question asks to identify the correct procedure from a list of options. A unique, correct answer is expected.\n-   **Objective:** The problem statement is written in precise, formal language derived from mathematical logic. It is free of ambiguity and subjectivity.\n\n**Step 3: Verdict and Action**\nThe problem statement is valid. It is a well-posed, scientifically sound question from the field of logic and computation. I will now proceed with the solution derivation and option analysis.\n\n**Solution Derivation**\n\nThe primary challenge is to satisfy both the equisatisfiability and the linear size complexity requirements. A naive approach using logical equivalences, particularly the distributive law, fails the size requirement.\n\nConsider the distributive law: $(\\alpha \\land \\beta) \\lor \\gamma \\equiv (\\alpha \\lor \\gamma) \\land (\\beta \\lor \\gamma)$. While this transformation preserves logical equivalence, repeated application can lead to an exponential increase in the formula's size. For instance, converting $\\varphi = (\\alpha_1 \\land \\beta_1) \\lor (\\alpha_2 \\land \\beta_2) \\lor \\dots \\lor (\\alpha_k \\land \\beta_k)$ to CNF using distributivity results in a formula with $2^k$ clauses, which is exponential in the size of $\\varphi$, $O(k)$.\n\nTo avoid this exponential blowup, it is necessary to introduce new variables. This is the basis of the Tseitin transformation. The transformation operates as follows:\n1.  Construct the parse tree for the formula $\\varphi$.\n2.  For each subformula $\\psi$ (including the full formula $\\varphi$ itself), introduce a fresh propositional atom, say $v_{\\psi}$. This new atom is intended to be true if and only if the subformula $\\psi$ is true.\n3.  For each non-atomic subformula $\\psi$, assert the logical equivalence $v_{\\psi} \\leftrightarrow \\psi$. Since $\\psi$ is constructed from its immediate subformulas (e.g., $\\psi = \\psi_1 \\text{ op } \\psi_2$), this equivalence is expressed in terms of the new variables corresponding to those subformulas, e.g., $v_{\\psi} \\leftrightarrow (v_{\\psi_1} \\text{ op } v_{\\psi_2})$.\n4.  Each such equivalence is converted into a small set of clauses (its CNF representation). For any binary connective, this results in a constant number of clauses (at most $3$) of constant length.\n5.  The final CNF formula, $\\Phi$, is the conjunction of the clauses generated for every subformula, plus a final unit clause $(v_{\\varphi})$ that asserts the entire original formula must be true.\n\nThe number of subformulas in $\\varphi$ is linear in its size $n$. Since each subformula generates a constant amount of new CNF material, the total size of $\\Phi$ is $O(n)$. This procedure satisfies the linear size constraint.\n\nIt also satisfies the conservative extension requirement. Let $\\Phi$ be the formula generated by the Tseitin transformation.\n-   If $\\nu \\vDash \\varphi$, one can define an extension $\\hat{\\nu}$ by setting the value of each new variable $v_{\\psi}$ to the truth value of the subformula $\\psi$ under $\\nu$. By construction, this $\\hat{\\nu}$ will satisfy all the equivalence clauses. Since $\\nu \\vDash \\varphi$, $\\hat{\\nu}(v_{\\varphi})$ will be true, satisfying the final unit clause $(v_{\\varphi})$. Thus, $\\hat{\\nu} \\vDash \\Phi$.\n-   Conversely, if $\\hat{\\nu} \\vDash \\Phi$ for some extension $\\hat{\\nu}$ of $\\nu$, then the unit clause $(v_{\\varphi})$ implies that $\\hat{\\nu}(v_{\\varphi})$ is true. The equivalence clauses then guarantee that the truth value of $v_{\\psi}$ under $\\hat{\\nu}$ matches the truth value of the expression it represents, all the way down to the original atoms. Therefore, the truth value of $\\varphi$ under $\\nu$ must be true. Hence, $\\nu \\vDash \\varphi$.\n\nThis confirms that the Tseitin transformation is a correct pipeline satisfying both stated requirements. Now we evaluate the options.\n\n**Option-by-Option Analysis**\n\n**A. Eliminate $\\rightarrow$ and $\\leftrightarrow$ in $\\varphi$; push $\\neg$ inward to obtain Negation Normal Form via De Morgan’s laws; repeatedly distribute $\\lor$ over $\\land$ until CNF is obtained. This pipeline claims to preserve logical equivalence exactly (no fresh atoms), and to have output size at most $O(n)$.**\nThis option describes the textbook \"naive\" conversion algorithm. While it does produce a logically equivalent CNF, its complexity is its downfall. As explained above, distributing $\\lor$ over $\\land$ leads to a worst-case exponential growth in the size of the formula. For example, converting $\\varphi_k = (a_1 \\land b_1) \\lor \\dots \\lor (a_k \\land b_k)$ into CNF results in a formula of size exponential in $k$. Therefore, the claim that the output size is at most $O(n)$ is false.\n**Verdict:** **Incorrect**.\n\n**B. Construct a parse tree for $\\varphi$. Introduce a fresh atom $v_{\\psi}$ for every subformula $\\psi$ of $\\varphi$. For each node, add CNF clauses that enforce $v_{\\psi} \\leftrightarrow \\operatorname{op}(v_{\\psi_1},\\dots,v_{\\psi_k})$, where $\\operatorname{op}$ is the corresponding connective at the node and $v_{\\psi_i}$ are the fresh atoms of its immediate subformulas. For example, for a conjunction $\\psi = \\alpha \\land \\beta$ add the $3$ clauses $(\\neg v_{\\psi} \\lor v_{\\alpha})$, $(\\neg v_{\\psi} \\lor v_{\\beta})$, and $(\\neg v_{\\alpha} \\lor \\neg v_{\\beta} \\lor v_{\\psi})$; for a disjunction $\\psi = \\alpha \\lor \\beta$ add $(\\neg v_{\\alpha} \\lor v_{\\psi})$, $(\\neg v_{\\beta} \\lor v_{\\psi})$, and $(\\neg v_{\\psi} \\lor v_{\\alpha} \\lor v_{\\beta})$; and for a negation $\\psi = \\neg \\alpha$ add $(\\neg v_{\\psi} \\lor \\neg v_{\\alpha})$ and $(v_{\\psi} \\lor v_{\\alpha})$. Conjoin all such clauses and finally conjoin the unit clause $v_{\\varphi}$. This pipeline claims to be a conservative extension that preserves equivalence over the original atoms (as stated above) and yields a CNF of size $O(n)$.**\nThis option provides a precise and correct description of the Tseitin transformation. The example clauses are the correct CNF encodings of the required biconditionals:\n-   $v_{\\psi} \\leftrightarrow (v_{\\alpha} \\land v_{\\beta}) \\equiv (\\neg v_{\\psi} \\lor v_{\\alpha}) \\land (\\neg v_{\\psi} \\lor v_{\\beta}) \\land (\\neg v_{\\alpha} \\lor \\neg v_{\\beta} \\lor v_{\\psi})$.\n-   $v_{\\psi} \\leftrightarrow (v_{\\alpha} \\lor v_{\\beta}) \\equiv (\\neg v_{\\alpha} \\lor v_{\\psi}) \\land (\\neg v_{\\beta} \\lor v_{\\psi}) \\land (\\neg v_{\\psi} \\lor v_{\\alpha} \\lor v_{\\beta})$.\n-   $v_{\\psi} \\leftrightarrow \\neg v_{\\alpha} \\equiv (\\neg v_{\\psi} \\lor \\neg v_{\\alpha}) \\land (v_{\\psi} \\lor v_{\\alpha})$.\nThe procedure correctly includes conjoining all definitional clauses and the final unit clause $(v_{\\varphi})$. As demonstrated in the derivation above, this method satisfies both the equisatisfiability and linear size requirements.\n**Verdict:** **Correct**.\n\n**C. As in Option B, introduce a fresh atom $v_{\\psi}$ for each subformula $\\psi$, but for each connective only encode the forward implication from the fresh atom to the components, for instance for $\\psi = \\alpha \\land \\beta$ add only $(\\neg v_{\\psi} \\lor v_{\\alpha})$ and $(\\neg v_{\\psi} \\lor v_{\\beta})$, and for $\\psi = \\alpha \\lor \\beta$ add only $(\\neg v_{\\alpha} \\lor v_{\\psi})$ and $(\\neg v_{\\beta} \\lor v_{\\psi})$. Conclude by conjoining $v_{\\varphi}$. This pipeline claims to be equivalence-preserving in the conservative-extension sense and linear in size.**\nThis option proposes using only a one-way implication instead of a biconditional. This is known as a one-sided or polarity-based Tseitin encoding, but the implementation described here is flawed. Let's analyze the provided clauses. For $\\psi=\\alpha \\lor \\beta$, the clauses are $(\\neg v_{\\alpha} \\lor v_{\\psi})$ and $(\\neg v_{\\beta} \\lor v_{\\psi})$, which together encode $(v_{\\alpha} \\lor v_{\\beta}) \\rightarrow v_{\\psi}$. Let the full formula be $\\varphi = a \\lor b$. According to the option, the resulting CNF $\\Phi$ would be $(\\neg a \\lor v_{\\varphi}) \\land (\\neg b \\lor v_{\\varphi}) \\land (v_{\\varphi})$. Consider the valuation $\\nu$ where $\\nu(a) = \\text{false}$ and $\\nu(b) = \\text{false}$. This valuation does not satisfy $\\varphi$. However, we can find an extension $\\hat{\\nu}$ that satisfies $\\Phi$: let $\\hat{\\nu}(a) = \\text{false}$, $\\hat{\\nu}(b) = \\text{false}$, and $\\hat{\\nu}(v_{\\varphi}) = \\text{true}$. $\\Phi$ becomes $(\\neg \\text{false} \\lor \\text{true}) \\land (\\neg \\text{false} \\lor \\text{true}) \\land (\\text{true})$, which is true. So we have found a satisfying assignment for $\\Phi$ whose restriction to the original variables does *not* satisfy $\\varphi$. This violates the \"if\" part of the required \"if and only if\" condition ($\\nu \\vDash \\varphi$ **if** $\\exists \\hat{\\nu} \\dots \\vDash \\Phi$). The pipeline is not equivalence-preserving as required.\n**Verdict:** **Incorrect**.\n\n**D. As in Option B, introduce fresh atoms and biconditional constraints for every subformula, but omit conjoining $v_{\\varphi}$ at the end. Return only the conjunction of all definitional clauses. This pipeline claims to be equivalence-preserving in the conservative-extension sense and linear in size.**\nThis option omits the crucial final step of asserting that the top-level formula is true. The conjunction of the definitional clauses, let's call it $\\Phi_D$, only describes the relationships between the subformulas. $\\Phi_D$ is almost always satisfiable. For instance, a satisfying assignment can be found by setting all new variables and all original atoms to false. This assignment satisfies all the biconditional clauses. So, $\\Phi_D$ is satisfiable even if $\\varphi$ is a contradiction (e.g., $\\varphi = a \\land \\neg a$). For $\\varphi = a \\land \\neg a$, which is unsatisfiable, the definitional clauses would be satisfiable, for example, by setting $a, v_{a \\land \\neg a}$ to false and $v_{\\neg a}$ to true. This clearly violates the equisatisfiability requirement.\n**Verdict:** **Incorrect**.\n\n**E. First convert $\\varphi$ to Disjunctive Normal Form by distributing $\\land$ over $\\lor$, then apply a clause-learning resolution scheme to derive a CNF that is logically equivalent to $\\varphi$ and linear in size by reusing derived clauses. This pipeline claims to preserve equivalence and avoid blowup.**\nThis option is flawed in multiple ways. First, converting an arbitrary formula to DNF can itself cause an exponential blowup in size. For instance, converting a formula already in CNF, like $\\varphi = (a_1 \\lor b_1) \\land \\dots \\land (a_k \\lor b_k)$, into DNF yields $2^k$ disjuncts. This initial step alone violates the linear size requirement. Second, \"clause-learning resolution scheme\" is not a standard algorithm for conversion between normal forms; it's a component of modern SAT solvers for guiding the search process. The claim that such a scheme can recover a linear-size CNF from an potentially exponential DNF is unsubstantiated and not generally true.\n**Verdict:** **Incorrect**.", "answer": "$$\\boxed{B}$$", "id": "3046374"}]}