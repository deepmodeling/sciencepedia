{"hands_on_practices": [{"introduction": "The truth table is the ultimate definition of a Boolean function's behavior. This exercise [@problem_id:3040339] walks you through the fundamental process of translating a function's truth table into its two canonical normal forms. By constructing the full Disjunctive Normal Form (DNF) from the function's satisfying assignments and the full Conjunctive Normal Form (CNF) from its falsifying assignments, you will gain a concrete understanding of their structure and the direct relationship they have to the function's definition.", "problem": "Consider the propositional formula $x \\to y$ over Boolean variables $x$ and $y$, where $x$ and $y$ each take values in $\\{0,1\\}$, with $0$ interpreted as \"false\" and $1$ interpreted as \"true.\" Use the classical semantics of implication in propositional logic: the statement $p \\to q$ is false exactly when $p$ is true and $q$ is false, and is true otherwise. Construct the complete truth table for $x \\to y$ over all $2^{2}$ assignments. Using the truth table and the standard definitions below, derive both the full Disjunctive Normal Form (DNF) and the full Conjunctive Normal Form (CNF) of $x \\to y$.\n\nDefinitions to be used:\n- Disjunctive Normal Form (DNF) is a disjunction of conjunctions of literals, where a literal is a variable or its negation. The full DNF is obtained by taking a disjunction of all minterms corresponding to satisfying assignments, with each minterm being a conjunction containing all variables, appearing positively if the variable is assigned $1$ and negatively if assigned $0$.\n- Conjunctive Normal Form (CNF) is a conjunction of disjunctions of literals. The full CNF is obtained by taking a conjunction of all maxterms corresponding to falsifying assignments, with each maxterm being a disjunction containing all variables, where a variable appears negated if it is assigned $1$ and appears unnegated if it is assigned $0$, so that the maxterm is false exactly on that assignment.\n\nAfter deriving the full DNF and full CNF, count the number of disjunctive terms in the full DNF and the number of conjunctive clauses in the full CNF. Let $\\mathcal{R}$ be the ratio defined by\n$$\n\\mathcal{R} = \\frac{\\text{number of disjunctive terms in the full DNF}}{\\text{number of conjunctive clauses in the full CNF}}.\n$$\nCompute $\\mathcal{R}$ and provide it as your final answer. No rounding is required.", "solution": "The problem is subjected to validation before a solution is attempted.\n\n### Step 1: Extract Givens\n-   **Propositional Formula:** $x \\to y$\n-   **Variables and Domain:** Boolean variables $x$ and $y$, each taking values in $\\{0,1\\}$, where $0$ represents \"false\" and $1$ represents \"true\".\n-   **Semantics of Implication:** The statement $p \\to q$ is false exactly when $p$ is true and $q$ is false, and is true otherwise.\n-   **Task:** Construct the complete truth table for $x \\to y$.\n-   **Definition of Full Disjunctive Normal Form (DNF):** A disjunction of all minterms corresponding to satisfying assignments. A minterm is a conjunction of all variables, appearing positively if the variable is assigned $1$ and negatively if assigned $0$.\n-   **Definition of Full Conjunctive Normal Form (CNF):** A conjunction of all maxterms corresponding to falsifying assignments. A maxterm is a disjunction of all variables, where a variable appears negated if assigned $1$ and unnegated if assigned $0$.\n-   **Final Calculation:** Compute the ratio $\\mathcal{R} = \\frac{\\text{number of disjunctive terms in the full DNF}}{\\text{number of conjunctive clauses in the full CNF}}$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is well-defined within the framework of classical propositional logic. The definitions for implication, DNF, and CNF are standard and consistent. The tasks are specified clearly and lead to a unique, derivable result. The problem is self-contained, scientifically grounded in mathematical logic, and objective. It does not violate any of the invalidity criteria.\n\n### Step 3: Verdict and Action\nThe problem is valid. A solution will be provided.\n\nThe first step is to construct the complete truth table for the propositional formula $x \\to y$. The variables $x$ and $y$ can take values in $\\{0, 1\\}$, leading to $2^2 = 4$ possible assignments of truth values. According to the provided semantics, $x \\to y$ is false (evaluates to $0$) only when $x$ is true ($1$) and $y$ is false ($0$). In all other cases, it is true (evaluates to $1$).\n\nThe truth table is as follows:\n\n| Row | $x$ | $y$ | $x \\to y$ |\n|:---:|:---:|:---:|:---------:|\n| $1$ | $0$ | $0$ |     $1$     |\n| $2$ | $0$ | $1$ |     $1$     |\n| $3$ | $1$ | $0$ |     $0$     |\n| $4$ | $1$ | $1$ |     $1$     |\n\nNext, we derive the full Disjunctive Normal Form (DNF). The full DNF is a disjunction of minterms, where each minterm corresponds to a satisfying assignment (i.e., a row in the truth table where the formula evaluates to $1$). A minterm is a conjunction of all literals (a variable or its negation). A variable appears in its positive form if its value is $1$ in the assignment, and in its negated form if its value is $0$.\n\nFrom the truth table, the satisfying assignments for $x \\to y$ are:\n-   Row $1$: $(x=0, y=0)$\n-   Row $2$: $(x=0, y=1)$\n-   Row $4$: $(x=1, y=1)$\n\nWe construct the minterm for each of these assignments:\n-   For $(x=0, y=0)$, the minterm is $(\\lnot x \\land \\lnot y)$.\n-   For $(x=0, y=1)$, the minterm is $(\\lnot x \\land y)$.\n-   For $(x=1, y=1)$, the minterm is $(x \\land y)$.\n\nThe full DNF is the disjunction of these minterms:\n$$(\\lnot x \\land \\lnot y) \\lor (\\lnot x \\land y) \\lor (x \\land y)$$\nThe number of disjunctive terms in the full DNF is the number of satisfying assignments, which is $3$.\n\nNext, we derive the full Conjunctive Normal Form (CNF). The full CNF is a conjunction of maxterms, where each maxterm corresponds to a falsifying assignment (i.e., a row where the formula evaluates to $0$). A maxterm is a disjunction of all literals. A variable appears in its negated form if its value is $1$ in the assignment, and in its positive form if its value is $0$. This construction ensures the maxterm itself evaluates to $0$ for that specific assignment.\n\nFrom the truth table, there is a single falsifying assignment for $x \\to y$:\n-   Row $3$: $(x=1, y=0)$\n\nWe construct the maxterm for this assignment:\n-   For $(x=1, y=0)$, the variable $x$ (value $1$) appears negated, and the variable $y$ (value $0$) appears unnegated. The maxterm is $(\\lnot x \\lor y)$.\n\nThe full CNF is simply this single maxterm:\n$$(\\lnot x \\lor y)$$\nThe number of conjunctive clauses in the full CNF is the number of falsifying assignments, which is $1$.\n\nFinally, we compute the ratio $\\mathcal{R}$ as defined in the problem statement:\n$$\n\\mathcal{R} = \\frac{\\text{number of disjunctive terms in the full DNF}}{\\text{number of conjunctive clauses in the full CNF}}\n$$\nSubstituting the counted values:\n$$\n\\mathcal{R} = \\frac{3}{1} = 3\n$$", "answer": "$$\\boxed{3}$$", "id": "3040339"}, {"introduction": "While canonical forms provide a complete description of a function, they are often not the most efficient representation. This practice [@problem_id:1358964] moves beyond construction to the essential skill of optimization. By simplifying a DNF expression that represents a practical \"safety alarm\" system, you will apply the laws of Boolean algebra to minimize logical complexity, a core task in digital circuit design and software engineering.", "problem": "A system controller for a small chemical reactor relies on three binary sensors: $S_1$ (temperature), $S_2$ (pressure), and $S_3$ (coolant flow). A signal is represented by a logical variable, which is true (logical 1) if the sensor reading is above a certain threshold and false (logical 0) otherwise.\n\nThe safety alarm function $F(S_1, S_2, S_3)$ is defined to be true if and only if any of the following conditions are met:\n1.  Sensor $S_1$ is false, sensor $S_2$ is false, and sensor $S_3$ is true.\n2.  Sensor $S_1$ is false, sensor $S_2$ is true, and sensor $S_3$ is true.\n3.  Sensor $S_1$ is true, sensor $S_2$ is true, and sensor $S_3$ is true.\n\nThis corresponds to a Disjunctive Normal Form (DNF), an OR of ANDs. To optimize the controller's logic, it is necessary to find an equivalent DNF representation that uses the fewest possible literals. A literal is a variable or its negation (e.g., $S_1$ and $\\lnot S_1$ are both literals). The total number of literals in a DNF expression is the sum of the number of literals in each of its product terms.\n\nWhat is the minimum total number of literals required to express the function $F$ in an equivalent DNF?", "solution": "We are given the function in DNF as\n$$F = (\\lnot S_{1} \\land \\lnot S_{2} \\land S_{3}) \\lor (\\lnot S_{1} \\land S_{2} \\land S_{3}) \\lor (S_{1} \\land S_{2} \\land S_{3}).$$\nFirst, factor out $S_{3}$, which appears in every term:\n$$F = S_{3} \\land \\big[(\\lnot S_{1} \\land \\lnot S_{2}) \\lor (\\lnot S_{1} \\land S_{2}) \\lor (S_{1} \\land S_{2})\\big].$$\nSimplify the bracketed expression. Combine the first two terms:\n$$(\\lnot S_{1} \\land \\lnot S_{2}) \\lor (\\lnot S_{1} \\land S_{2}) = \\lnot S_{1} \\land (\\lnot S_{2} \\lor S_{2}) = \\lnot S_{1}.$$\nThus\n$$F = S_{3} \\land \\big[\\lnot S_{1} \\lor (S_{1} \\land S_{2})\\big].$$\nUse distributivity $X \\lor (Y \\land Z) = (X \\lor Y) \\land (X \\lor Z)$ with $X=\\lnot S_{1}$, $Y=S_{1}$, $Z=S_{2}$:\n$$\\lnot S_{1} \\lor (S_{1} \\land S_{2}) = (\\lnot S_{1} \\lor S_{1}) \\land (\\lnot S_{1} \\lor S_{2}) = 1 \\land (\\lnot S_{1} \\lor S_{2}) = \\lnot S_{1} \\lor S_{2}.$$\nTherefore the minimized sum-of-products form is\n$$F = S_{3} \\land (\\lnot S_{1} \\lor S_{2}) = (\\lnot S_{1} \\land S_{3}) \\lor (S_{2} \\land S_{3}).$$\nThis DNF has two product terms, each with two literals, for a total of $4$ literals.\n\nTo see that this is minimal, note:\n- Because $F(1,0,1)=0$, any implicant that includes $S_{3}$ alone would incorrectly cover $(1,0,1)$, so each product term must include at least one of $\\lnot S_{1}$ or $S_{2}$ in addition to $S_{3}$; hence each term requires at least two literals.\n- The three on-states at $(0,0,1)$, $(0,1,1)$, and $(1,1,1)$ cannot be covered by a single 2-literal term without also covering $(1,0,1)$, so at least two product terms are necessary.\n\nThus the lower bound of $2$ terms times $2$ literals equals $4$, which is achieved by $F = (\\lnot S_{1} \\land S_{3}) \\lor (S_{2} \\land S_{3})$.", "answer": "$$\\boxed{4}$$", "id": "1358964"}, {"introduction": "For complex problems, converting formulas into a standard form like CNF is a critical first step for automated solvers. This advanced practice [@problem_id:3040370] explores the crucial task of encoding constraints for computational logic. By comparing a direct conversion with the powerful Tseitin transformation for the exclusive-OR ($\\oplus$) function, you will discover the trade-offs involved and appreciate why modern tools for automated reasoning rely on such structure-preserving techniques.", "problem": "Let $x$ and $y$ be propositional variables, and let $\\oplus$ denote Exclusive OR (XOR), so that $x \\oplus y$ is true exactly when $x$ and $y$ have different truth values. A Conjunctive Normal Form (CNF) is a conjunction of disjunctions of literals, and a Disjunctive Normal Form (DNF) is a disjunction of conjunctions of literals. The Tseitin transformation introduces auxiliary variables to represent subformulas and enforces equivalence by adding clauses, preserving satisfiability in linear size.\n\nYou will encode the constraint $x \\oplus y$ into CNF in two ways and analyze their properties with respect to clause counts and propagation. Throughout, use only fundamental propositional equivalences, including the definitions of $\\leftrightarrow$ and $\\rightarrow$, De Morgan’s laws, and distributivity of $\\lor$ over $\\land$.\n\n1. Using only the variables $x$ and $y$, derive a CNF that is logically equivalent to $x \\oplus y$, starting from the definition $x \\oplus y \\equiv (x \\land \\lnot y) \\lor (\\lnot x \\land y)$ and converting to CNF by correct application of distributivity and simplification.\n\n2. Introduce an auxiliary variable $a$ and derive a Tseitin-style CNF that enforces $a \\leftrightarrow (x \\oplus y)$. Then add the unit clause $(a)$ to assert the XOR constraint via the auxiliary variable. Your clause set must be obtained by first rewriting $\\leftrightarrow$ into implications, then each implication $p \\rightarrow q$ into $\\lnot p \\lor q$, pushing negations in via De Morgan’s laws, and distributing $\\lor$ over $\\land$ to reach CNF, simplifying tautologies when they arise. Do not eliminate clauses by unit propagation during this counting step.\n\n3. For both encodings, reason from the definition of Unit Propagation (UP) and the notion of a propagation-complete encoding as follows: an encoding of a constraint on variables $V$ is called propagation complete if for any partial assignment to $V$, whenever the constraint logically forces a literal or detects inconsistency, UP on the CNF also forces the same literal or derives the empty clause. Argue whether each of your two encodings is propagation complete with respect to the variables $x$ and $y$ under the assertion of the XOR constraint.\n\nDefine the overhead ratio $R$ as the total number of clauses in the Tseitin-based encoding including the unit clause $(a)$, counted before any simplification by unit propagation or subsumption, divided by the number of clauses in the naive CNF from part $1$. Compute $R$ exactly. Your final answer must be this exact ratio as a single reduced fraction or equivalent closed-form expression; no rounding is required.", "solution": "This problem requires the derivation and analysis of two different Conjunctive Normal Form (CNF) encodings for the Exclusive OR (XOR) constraint, followed by a comparison of their properties.\n\nFirst, we address the task of deriving a CNF logically equivalent to $x \\oplus y$ using only the variables $x$ and $y$. The definition of XOR is given as $x \\oplus y \\equiv (x \\land \\lnot y) \\lor (\\lnot x \\land y)$. This is the Disjunctive Normal Form (DNF) of the XOR function. To convert this DNF into a CNF, we apply the distributive law of disjunction over conjunction. The general form of this law when applied to two conjunctions is $(A \\land B) \\lor (C \\land D) \\equiv (A \\lor C) \\land (A \\lor D) \\land (B \\lor C) \\land (B \\lor D)$.\n\nLet $A=x$, $B=\\lnot y$, $C=\\lnot x$, and $D=y$. Substituting these into the distributive law gives:\n$$\n(x \\land \\lnot y) \\lor (\\lnot x \\land y) \\equiv (x \\lor \\lnot x) \\land (x \\lor y) \\land (\\lnot y \\lor \\lnot x) \\land (\\lnot y \\lor y)\n$$\nWe observe that two of the resulting clauses are tautologies:\n- $(x \\lor \\lnot x)$ is always true.\n- $(\\lnot y \\lor y)$ is always true.\nIn a conjunction, a clause that is always true can be removed without changing the logical meaning of the expression. Therefore, the expression simplifies to:\n$$\n(x \\lor y) \\land (\\lnot x \\lor \\lnot y)\n$$\nThis is the CNF for $x \\oplus y$. It consists of two clauses: $(x \\lor y)$ and $(\\lnot x \\lor \\lnot y)$. The number of clauses in this direct encoding is $2$.\n\nSecond, we derive a Tseitin-style CNF for the same constraint. We introduce an auxiliary variable $a$ and enforce the equivalence $a \\leftrightarrow (x \\oplus y)$. To assert the XOR constraint, we will later add the unit clause $(a)$. The problem specifies the conversion procedure. The equivalence is first written as a conjunction of two implications:\n$$\na \\leftrightarrow (x \\oplus y) \\equiv (a \\rightarrow (x \\oplus y)) \\land ((x \\oplus y) \\rightarrow a)\n$$\nWe convert each implication to its disjunctive form ($\\lnot p \\lor q$).\nThe first part is $a \\rightarrow (x \\oplus y)$, which becomes $\\lnot a \\lor (x \\oplus y)$. To convert this to CNF, we substitute the CNF of $x \\oplus y$ we derived earlier:\n$$\n\\lnot a \\lor ((x \\lor y) \\land (\\lnot x \\lor \\lnot y))\n$$\nNow, we distribute $\\lnot a \\lor \\dots$ over the conjunction:\n$$\n(\\lnot a \\lor (x \\lor y)) \\land (\\lnot a \\lor (\\lnot x \\lor \\lnot y))\n$$\nThis gives two clauses: $(\\lnot a \\lor x \\lor y)$ and $(\\lnot a \\lor \\lnot x \\lor \\lnot y)$.\n\nThe second part is $(x \\oplus y) \\rightarrow a$, which becomes $\\lnot(x \\oplus y) \\lor a$. We need the CNF of $\\lnot(x \\oplus y)$. Logically, $\\lnot(x \\oplus y)$ is equivalent to $x \\leftrightarrow y$, which has the DNF $(x \\land y) \\lor (\\lnot x \\land \\lnot y)$. To follow the problem's instructions, we must push the negation inward on the DNF of $x \\oplus y$:\n$$\n\\lnot((x \\land \\lnot y) \\lor (\\lnot x \\land y)) \\lor a\n$$\nApplying De Morgan's laws:\n$$\n(\\lnot(x \\land \\lnot y) \\land \\lnot(\\lnot x \\land y)) \\lor a\n$$\n$$\n((\\lnot x \\lor y) \\land (x \\lor \\lnot y)) \\lor a\n$$\nNow, we distribute $\\lor a$ over the conjunction:\n$$\n((\\lnot x \\lor y) \\lor a) \\land ((x \\lor \\lnot y) \\lor a)\n$$\nThis gives two more clauses: $(\\lnot x \\lor y \\lor a)$ and $(x \\lor \\lnot y \\lor a)$.\nIn total, the CNF for $a \\leftrightarrow (x \\oplus y)$ consists of four clauses:\n$1$. $(\\lnot a \\lor x \\lor y)$\n$2$. $(\\lnot a \\lor \\lnot x \\lor \\lnot y)$\n$3$. $(a \\lor \\lnot x \\lor y)$\n$4$. $(a \\lor x \\lor \\lnot y)$\n\nTo assert the XOR constraint, we add the unit clause $(a)$. The complete Tseitin-based encoding therefore contains these four clauses plus the clause $(a)$, for a total of $5$ clauses before any simplification.\n\nThird, we analyze the propagation completeness of both encodings with respect to the variables $x$ and $y$. An encoding is propagation complete if, for any partial assignment, logical inference is mirrored by unit propagation (UP).\n\nFor the direct encoding, $(\\lnot x \\lor \\lnot y) \\land (x \\lor y)$:\nAssume we make the partial assignment $x=\\top$. The CNF becomes $(\\lnot \\top \\lor \\lnot y) \\land (\\top \\lor y)$, which simplifies to $(\\bot \\lor \\lnot y) \\land \\top$. This further simplifies to the unit clause $(\\lnot y)$. Unit propagation on this clause forces the assignment $y=\\bot$. This deduction matches the logical requirement of $x \\oplus y$: if $x$ is true, $y$ must be false.\nSimilarly, if we assign $x=\\bot$, the CNF becomes $(\\lnot \\bot \\lor \\lnot y) \\land (\\bot \\lor y)$, which is $(\\top \\lor \\lnot y) \\land y$, simplifying to the unit clause $(y)$. UP forces $y=\\top$. This also matches logical deduction.\nThe same reasoning applies symmetrically if we assign a truth value to $y$ first. Thus, the direct encoding is propagation complete.\n\nFor the Tseitin-based encoding, the full set of clauses is $\\{(\\lnot a \\lor x \\lor y), (\\lnot a \\lor \\lnot x \\lor \\lnot y), (a \\lor \\lnot x \\lor y), (a \\lor x \\lor \\lnot y), (a)\\}$.\nThe XOR constraint is asserted via the unit clause $(a)$. Unit propagation on $(a)$ sets $a=\\top$. This immediately simplifies the clause set:\n- $(\\lnot a \\lor x \\lor y)$ becomes $(\\bot \\lor x \\lor y) \\Rightarrow (x \\lor y)$.\n- $(\\lnot a \\lor \\lnot x \\lor \\lnot y)$ becomes $(\\bot \\lor \\lnot x \\lor \\lnot y) \\Rightarrow (\\lnot x \\lor \\lnot y)$.\n- $(a \\lor \\lnot x \\lor y)$ becomes $(\\top \\lor \\lnot x \\lor y)$, which is a tautology and is removed.\n- $(a \\lor x \\lor \\lnot y)$ becomes $(\\top \\lor x \\lor \\lnot y)$, which is a tautology and is removed.\nThe set of clauses that constrain the variables $x$ and $y$ after propagating $(a)$ is $\\{ (x \\lor y), (\\lnot x \\lor \\lnot y) \\}$. This is identical to the direct encoding from the first part. Consequently, any subsequent unit propagation based on a partial assignment to $x$ or $y$ will behave exactly as in the direct encoding. Therefore, the Tseitin-based encoding, when combined with the unit clause asserting the constraint, is also propagation complete with respect to the variables $x$ and $y$.\n\nFinally, we compute the overhead ratio $R$. This is defined as the total number of clauses in the Tseitin-based encoding (including the unit clause, before simplification) divided by the number of clauses in the direct CNF.\nNumber of clauses in direct CNF, $N_{direct} = 2$.\nNumber of clauses in Tseitin encoding, $N_{Tseitin} = 4 + 1 = 5$.\nThe ratio $R$ is:\n$$\nR = \\frac{N_{Tseitin}}{N_{direct}} = \\frac{5}{2}\n$$", "answer": "$$\\boxed{\\frac{5}{2}}$$", "id": "3040370"}]}