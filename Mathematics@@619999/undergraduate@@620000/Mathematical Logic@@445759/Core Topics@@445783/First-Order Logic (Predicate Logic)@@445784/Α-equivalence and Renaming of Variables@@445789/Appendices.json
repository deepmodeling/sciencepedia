{"hands_on_practices": [{"introduction": "The concept of $\\alpha$-equivalence is founded on the idea of safely renaming bound variables without altering a formula's meaning. This first exercise [@problem_id:3060304], set in the familiar context of first-order logic, asks you to apply the foundational definition of capture-avoiding substitution. By carefully analyzing the constraints on choosing a new variable, you will solidify your understanding of the critical distinction and interaction between free and bound variables.", "problem": "Consider standard first-order logic (FOL) with a signature containing unary predicate symbols $P$ and $Q$, and a countably infinite set of variables. Let $x$, $y$, and $z$ denote distinct variables. Using only the foundational definitions of free and bound variables and the definition of $\\alpha$-equivalence as equality up to capture-avoiding renaming of bound variables, analyze the pair of formulas\n$$\\exists x\\,(P(x)\\wedge Q(y)) \\quad\\text{and}\\quad \\exists z\\,(P(z)\\wedge Q(y)).$$\nAssume that $y$ is intended to be free in both formulas. Determine whether these two formulas are $\\alpha$-equivalent by reasoning from the definitions, and justify precisely the constraint that must be imposed on the choice of the renaming variable $z$ to avoid variable capture. For the purpose of providing a single calculational output, define the indicator\n$$I \\;=\\; \\begin{cases}\n1 & \\text{if } \\exists x\\,(P(x)\\wedge Q(y)) \\text{ and } \\exists z\\,(P(z)\\wedge Q(y)) \\text{ are } \\alpha\\text{-equivalent},\\\\\n0 & \\text{otherwise.}\n\\end{cases}$$\nReport the value of $I$ as your final answer. No rounding is required, and no units apply.", "solution": "The problem requires an analysis of the $\\alpha$-equivalence of two formulas in first-order logic, based on the foundational definitions of free and bound variables and capture-avoiding renaming.\n\nFirst, let us establish the necessary definitions.\nA variable occurrence in a formula is *bound* if it falls within the scope of a quantifier (such as $\\forall$ or $\\exists$) that uses that variable. Otherwise, the occurrence is *free*. The scope of the quantifier in a formula of the form $\\exists v\\,\\psi$ is the subformula $\\psi$.\n\nThe first formula is $\\phi_1 = \\exists x\\,(P(x)\\wedge Q(y))$.\nThe quantifier is $\\exists x$. Its scope is the subformula $\\psi = P(x)\\wedge Q(y)$.\nWithin the scope $\\psi$, the occurrences of both $x$ (in $P(x)$) and $y$ (in $Q(y)$) are free relative to $\\psi$ itself. The set of free variables within the subformula $\\psi$ is thus $FV(\\psi) = \\{x, y\\}$.\nIn the full formula $\\phi_1$, the quantifier $\\exists x$ binds the variable $x$. Therefore, the set of free variables in $\\phi_1$ is $FV(\\phi_1) = FV(\\psi) \\setminus \\{x\\} = \\{x, y\\} \\setminus \\{x\\} = \\{y\\}$. This is consistent with the problem's assumption that $y$ is intended to be free.\n\nThe second formula is $\\phi_2 = \\exists z\\,(P(z)\\wedge Q(y))$.\nThe quantifier is $\\exists z$. Its scope is the subformula $\\psi' = P(z)\\wedge Q(y)$.\nBy a similar analysis, the set of free variables within the subformula $\\psi'$ is $FV(\\psi') = \\{z, y\\}$.\nIn the full formula $\\phi_2$, the quantifier $\\exists z$ binds the variable $z$. The set of free variables in $\\phi_2$ is $FV(\\phi_2) = FV(\\psi') \\setminus \\{z\\} = \\{z, y\\} \\setminus \\{z\\} = \\{y\\}$.\n\nTwo formulas are defined as $\\alpha$-equivalent if one can be obtained from the other by a valid, capture-avoiding renaming of its bound variables. We need to determine if $\\phi_2$ can be obtained from $\\phi_1$ by such a renaming.\n\nThe process involves renaming the bound variable $x$ in $\\phi_1 = \\exists x\\,\\psi$ to a new variable $z$, resulting in the formula $\\exists z\\,\\psi[x\\to z]$, where $\\psi[x\\to z]$ denotes the substitution of all free occurrences of $x$ in $\\psi$ with $z$. Applying this substitution to $\\psi = P(x)\\wedge Q(y)$ yields $\\psi[x\\to z] = P(z)\\wedge Q(y)$, so the resulting formula is indeed $\\phi_2$.\n\nThe critical step is to determine if this renaming is *valid*. A renaming is valid if and only if it is \"capture-avoiding\". Variable capture occurs if the new bound variable (here, $z$) is identical to another variable that was free in the original scope (here, $\\psi$), causing that free variable to become bound by the new quantifier. This would alter the logical meaning of the formula.\n\nTo avoid variable capture, the new bound variable $z$ must not coincide with any of the other free variables in the scope $\\psi$. The set of free variables in $\\psi = P(x)\\wedge Q(y)$ is $FV(\\psi) = \\{x, y\\}$. The variable being replaced is $x$. The set of *other* free variables in the scope is $FV(\\psi) \\setminus \\{x\\} = \\{y\\}$.\nTherefore, the precise constraint that must be imposed on the choice of the renaming variable $z$ is that $z$ must not be a member of this set. Mathematically, the condition is $z \\notin (FV(\\psi) \\setminus \\{x\\})$, which in this case is $z \\neq y$.\n\nThe problem statement provides the crucial information that \"$x$, $y$, and $z$ denote distinct variables.\" This explicitly given condition guarantees that the constraint $z \\neq y$ is satisfied.\n\nSince the condition for a capture-avoiding renaming is met, the transformation from $\\phi_1$ to $\\phi_2$ is a valid $\\alpha$-conversion. Consequently, the two formulas are $\\alpha$-equivalent.\nGiven the definition of the indicator $I$:\n$$I \\;=\\; \\begin{cases}\n1 & \\text{if } \\exists x\\,(P(x)\\wedge Q(y)) \\text{ and } \\exists z\\,(P(z)\\wedge Q(y)) \\text{ are } \\alpha\\text{-equivalent},\\\\\n0 & \\text{otherwise.}\n\\end{cases}$$\nwe conclude that the value of $I$ is $1$.", "answer": "$$\\boxed{1}$$", "id": "3060304"}, {"introduction": "We now transition to the untyped lambda calculus, a core formalism in logic and computer science for studying functions and computation. This practice [@problem_id:3060354] highlights a crucial property that serves as a powerful test for non-equivalence: for two terms to be $\\alpha$-equivalent, they must have identical sets of free variables. By rigorously computing and comparing the free variables of two seemingly similar terms, you will learn to identify fundamental semantic differences that are not apparent from the surface syntax.", "problem": "In the untyped lambda calculus, consider the syntax of terms given by $t ::= x \\mid t_1\\,t_2 \\mid \\lambda x.\\,t$, where $x$ ranges over a countably infinite set of variables. The set of free variables $\\mathrm{FV}(t)$ is defined inductively by the fundamental rules: $\\mathrm{FV}(x) = \\{x\\}$, $\\mathrm{FV}(t_1\\,t_2) = \\mathrm{FV}(t_1) \\cup \\mathrm{FV}(t_2)$, and $\\mathrm{FV}(\\lambda x.\\,t) = \\mathrm{FV}(t) \\setminus \\{x\\}$. Alpha-equivalence ($\\alpha$-equivalence) is the smallest congruence identifying terms that differ only by consistent renaming of bound variables using capture-avoiding substitution: if $z \\notin \\mathrm{FV}(M)$, then $\\lambda x.\\,M \\equiv_{\\alpha} \\lambda z.\\,M[z/x]$, and $\\equiv_{\\alpha}$ is preserved under application and abstraction.\n\nLet $M = \\lambda x.\\,(x\\ y)$ and $N = \\lambda y.\\,(y\\ y)$. Define the indicator\n$$\nI \\;=\\; \\begin{cases}\n1 & \\text{if } M \\equiv_{\\alpha} N,\\\\\n0 & \\text{otherwise.}\n\\end{cases}\n$$\nUsing only the core definitions above and rigorous reasoning about free and bound variables and capture-avoiding renaming, determine the value of $I$ by examining the status of the variable $y$ in $M$ and $N$. Your final answer must be the single number $0$ or $1$.", "solution": "The problem statement is validated as scientifically grounded, well-posed, and objective. It is a formal problem within the well-established framework of untyped lambda calculus. All definitions are standard and sufficient to derive a unique solution.\n\nThe task is to determine the value of the indicator $I$, which depends on whether the lambda terms $M = \\lambda x.\\,(x\\ y)$ and $N = \\lambda y.\\,(y\\ y)$ are $\\alpha$-equivalent. Two terms are $\\alpha$-equivalent, denoted by $\\equiv_{\\alpha}$, if one can be obtained from the other by a series of renamings of bound variables. A critical property of $\\alpha$-equivalence is that it preserves the set of free variables. That is, if two terms $T_1$ and $T_2$ are $\\alpha$-equivalent, then it must be the case that their sets of free variables are identical: $T_1 \\equiv_{\\alpha} T_2 \\implies \\mathrm{FV}(T_1) = \\mathrm{FV}(T_2)$. We can use this necessary condition to test for non-equivalence. If the sets of free variables are different, the terms cannot be $\\alpha$-equivalent.\n\nWe proceed by computing the set of free variables for each term, $M$ and $N$, using the provided inductive rules.\n\nFirst, let's analyze the term $M = \\lambda x.\\,(x\\ y)$.\nThe set of free variables is calculated as $\\mathrm{FV}(\\lambda x.\\,t) = \\mathrm{FV}(t) \\setminus \\{x\\}$.\nIn our case, the body of the abstraction is the term $t = (x\\ y)$.\nWe first find the free variables of the body:\n$$\n\\mathrm{FV}(x\\ y) = \\mathrm{FV}(x) \\cup \\mathrm{FV}(y)\n$$\nUsing the base case of the definition, $\\mathrm{FV}(x) = \\{x\\}$ and $\\mathrm{FV}(y) = \\{y\\}$.\nThus,\n$$\n\\mathrm{FV}(x\\ y) = \\{x\\} \\cup \\{y\\} = \\{x, y\\}\n$$\nNow, we apply the rule for lambda abstraction to find the free variables of $M$:\n$$\n\\mathrm{FV}(M) = \\mathrm{FV}(\\lambda x.\\,(x\\ y)) = \\mathrm{FV}(x\\ y) \\setminus \\{x\\} = \\{x, y\\} \\setminus \\{x\\} = \\{y\\}\n$$\nIn the term $M$, the variable $x$ is bound by the lambda abstraction, while the variable $y$ is free.\n\nNext, we analyze the term $N = \\lambda y.\\,(y\\ y)$.\nThe set of free variables is calculated as $\\mathrm{FV}(\\lambda y.\\,t) = \\mathrm{FV}(t) \\setminus \\{y\\}$.\nHere, the body of the abstraction is the term $t = (y\\ y)$.\nWe find the free variables of the body:\n$$\n\\mathrm{FV}(y\\ y) = \\mathrm{FV}(y) \\cup \\mathrm{FV}(y)\n$$\nUsing the base case $\\mathrm{FV}(y) = \\{y\\}$, we get:\n$$\n\\mathrm{FV}(y\\ y) = \\{y\\} \\cup \\{y\\} = \\{y\\}\n$$\nNow, we apply the rule for lambda abstraction to find the free variables of $N$:\n$$\n\\mathrm{FV}(N) = \\mathrm{FV}(\\lambda y.\\,(y\\ y)) = \\mathrm{FV}(y\\ y) \\setminus \\{y\\} = \\{y\\} \\setminus \\{y\\} = \\emptyset\n$$\nIn the term $N$, both occurrences of the variable $y$ are bound by the lambda abstraction. The term $N$ has no free variables.\n\nWe now compare the sets of free variables for $M$ and $N$:\n$$\n\\mathrm{FV}(M) = \\{y\\}\n$$\n$$\n\\mathrm{FV}(N) = \\emptyset\n$$\nSince $\\mathrm{FV}(M) \\neq \\mathrm{FV}(N)$, the necessary condition for $\\alpha$-equivalence is not satisfied. Therefore, the terms $M$ and $N$ are not $\\alpha$-equivalent:\n$$\nM \\not\\equiv_{\\alpha} N\n$$\nThe indicator $I$ is defined as:\n$$\nI \\;=\\; \\begin{cases}\n1 & \\text{if } M \\equiv_{\\alpha} N,\\\\\n0 & \\text{otherwise.}\n\\end{cases}\n$$\nBecause we have rigorously shown that $M \\not\\equiv_{\\alpha} N$, the condition evaluates to \"otherwise\".\nTherefore, the value of the indicator is $I = 0$.", "answer": "$$\\boxed{0}$$", "id": "3060354"}, {"introduction": "This final exercise challenges your grasp of more subtle aspects of variable binding, namely variable shadowing and vacuous quantification. When binders are nested, an inner binder can \"shadow\" an outer one with the same name, a concept that requires careful application of scoping rules. This problem [@problem_id:3060326] requires you to dissect two structurally distinct terms to determine if they are equivalent, reinforcing that $\\alpha$-equivalence is about semantic identity, not just syntactic similarity.", "problem": "Consider the untyped $\\lambda$-calculus terms $t_{1} = \\lambda x.(\\lambda x.(x\\ x))$ and $t_{2} = \\lambda y.(\\lambda z.(z\\ z))$. Using only the formal definitions of free and bound variables, capture-avoiding $\\alpha$-conversion, and the inductive definition of $\\alpha$-equivalence as the least congruence closed under capture-avoiding renaming of bound variables, determine whether $t_{1}$ and $t_{2}$ are $\\alpha$-equivalent. Your derivation must explicitly justify each renaming step by verifying the relevant free-variable side conditions and must explain how variable shadowing is handled in these terms.\n\nProvide your final answer as a single number: write $1$ if $t_{1}$ and $t_{2}$ are $\\alpha$-equivalent, and write $0$ otherwise. No rounding is required. Do not include any units.", "solution": "The problem is to determine whether the two $\\lambda$-calculus terms $t_1 = \\lambda x.(\\lambda x.(x\\ x))$ and $t_2 = \\lambda y.(\\lambda z.(z\\ z))$ are $\\alpha$-equivalent. This determination will be made by rigorously applying the formal definitions of free variables, capture-avoiding $\\alpha$-conversion, and $\\alpha$-equivalence.\n\nFirst, let us state the necessary definitions.\nThe set of free variables of a term $M$, denoted $FV(M)$, is defined inductively:\n1.  $FV(v) = \\{v\\}$ for any variable $v$.\n2.  $FV(M\\ N) = FV(M) \\cup FV(N)$ for any terms $M$ and $N$.\n3.  $FV(\\lambda v.M) = FV(M) \\setminus \\{v\\}$ for any variable $v$ and term $M$.\n\nA variable occurrence $v$ in a term is bound if it is within a subterm of the form $\\lambda v.M$. If an occurrence is not bound, it is free. In cases of nested abstractions with the same variable name, an occurrence is bound by the innermost abstraction. This phenomenon is known as variable shadowing.\n\nCapture-avoiding $\\alpha$-conversion (or renaming) states that for an abstraction $\\lambda x.M$, we can rename the bound variable $x$ to a new variable $y$, written $\\lambda x.M \\to_\\alpha \\lambda y.(M[x \\mapsto y])$, if and only if $y$ does not appear as a free variable in $M$ (i.e., $y \\notin FV(M)$) and $y$ is not equal to $x$. The notation $M[x \\mapsto y]$ represents the substitution of all free occurrences of $x$ in $M$ with $y$.\n\n$\\alpha$-equivalence, denoted $=_\\alpha$, is the smallest equivalence relation containing $\\to_\\alpha$. It is a congruence, meaning it is preserved by the term constructors. Specifically:\n- If $M =_\\alpha N$, then $\\lambda v.M =_\\alpha \\lambda v.N$.\n- If $M_1 =_\\alpha M_2$ and $N_1 =_\\alpha N_2$, then $(M_1\\ N_1) =_\\alpha (M_2\\ N_2)$.\n\nWe now analyze the term $t_1 = \\lambda x.(\\lambda x.(x\\ x))$. This term exhibits variable shadowing. The outer binder is $\\lambda x$, and its scope is the term $M_1 = \\lambda x.(x\\ x)$. The inner binder is also $\\lambda x$, and its scope is the term $M_2 = (x\\ x)$. The two occurrences of the variable $x$ in $(x\\ x)$ are within the scope of both binders. However, according to the rule of innermost scope, they are bound by the inner $\\lambda x$. Consequently, there are no free occurrences of $x$ in the body of the outer abstraction for it to bind. To verify this formally, we compute the free variables of the body of the outer $\\lambda x$, which is the term $M_1$:\n$FV(M_1) = FV(\\lambda x.(x\\ x)) = FV(x\\ x) \\setminus \\{x\\}$.\n$FV(x\\ x) = FV(x) \\cup FV(x) = \\{x\\} \\cup \\{x\\} = \\{x\\}$.\nTherefore, $FV(M_1) = \\{x\\} \\setminus \\{x\\} = \\emptyset$.\nSince the body of the outer abstraction $\\lambda x$ has no free variables, this binder is vacuous.\n\nNext, we analyze the term $t_2 = \\lambda y.(\\lambda z.(z\\ z))$. The body of the outer abstraction $\\lambda y$ is the term $N = \\lambda z.(z\\ z)$. We compute its free variables:\n$FV(N) = FV(\\lambda z.(z\\ z)) = FV(z\\ z) \\setminus \\{z\\}$.\n$FV(z\\ z) = FV(z) \\cup FV(z) = \\{z\\} \\cup \\{z\\} = \\{z\\}$.\nTherefore, $FV(N) = \\{z\\} \\setminus \\{z\\} = \\emptyset$.\nSimilar to $t_1$, the outer binder $\\lambda y$ in $t_2$ is also vacuous.\n\nNow we can construct a chain of $\\alpha$-equivalences to check if $t_1 =_\\alpha t_2$. The strategy is to show that both terms can be transformed into a common form.\n\nStep 1: Rename the outer bound variable of $t_1$.\nWe have $t_1 = \\lambda x.M_1$, where $M_1 = \\lambda x.(x\\ x)$. We want to rename the outer $x$ to $y$ to match the outer variable of $t_2$. The rule for $\\alpha$-conversion is $\\lambda x.M_1 \\to_\\alpha \\lambda y.(M_1[x \\mapsto y])$ if $y \\notin FV(M_1)$. We have already calculated that $FV(M_1) = \\emptyset$. The condition $y \\notin \\emptyset$ is trivially true for any variable $y$. The substitution $M_1[x \\mapsto y]$ means we replace all free occurrences of $x$ in $M_1$ with $y$. Since there are no free occurrences of $x$ in $M_1$, the substitution has no effect: $M_1[x \\mapsto y] = M_1$.\nThus, we have $t_1 = \\lambda x.(\\lambda x.(x\\ x)) =_\\alpha \\lambda y.(\\lambda x.(x\\ x))$.\n\nStep 2: Rename the inner bound variable of the new term.\nThe new term is $\\lambda y.(\\lambda x.(x\\ x))$. Let's focus on its body, $\\lambda x.(x\\ x)$. We want to rename the bound variable $x$ to $z$ to match the inner structure of $t_2$. The body of this inner abstraction is $(x\\ x)$. The set of free variables in this body is $FV(x\\ x) = \\{x\\}$. The renaming condition is that the new variable, $z$, is not in this set. Assuming $z$ is a distinct variable from $x$, the condition $z \\notin \\{x\\}$ is true.\nThe substitution is $(x\\ x)[x \\mapsto z]$, which results in $(z\\ z)$.\nTherefore, $\\lambda x.(x\\ x) =_\\alpha \\lambda z.((x\\ x)[x \\mapsto z]) = \\lambda z.(z\\ z)$.\n\nStep 3: Apply the congruence property.\nSince $\\lambda x.(x\\ x) =_\\alpha \\lambda z.(z\\ z)$, the congruence rule for abstraction allows us to substitute the equivalent term within the larger expression from Step 1:\n$\\lambda y.(\\lambda x.(x\\ x)) =_\\alpha \\lambda y.(\\lambda z.(z\\ z))$.\n\nStep 4: Combine the steps.\nBy transitivity of $\\alpha$-equivalence, we combine the results from our steps:\n$t_1 = \\lambda x.(\\lambda x.(x\\ x))$\n$=_\\alpha \\lambda y.(\\lambda x.(x\\ x))$ (from Step 1)\n$=_\\alpha \\lambda y.(\\lambda z.(z\\ z))$ (from Steps 2 and 3)\nThe resulting term, $\\lambda y.(\\lambda z.(z\\ z))$, is exactly $t_2$.\nTherefore, we have formally shown that $t_1 =_\\alpha t_2$.\n\nThe key to this equivalence lies in the variable shadowing present in $t_1$. The outer $\\lambda x$ is a vacuous binder, meaning it does not bind any variable occurrences. As a result, it can be renamed to any other variable (like $y$) without altering the term's meaning, as that new variable will also be a vacuous binder. Once the outer variables match, the inner abstractions $\\lambda x.(x\\ x)$ and $\\lambda z.(z\\ z)$ are straightforwardly shown to be $\\alpha$-equivalent by a simple renaming of their respective bound variables.\n\nBecause $t_1$ is $\\alpha$-equivalent to $t_2$, the answer is $1$.", "answer": "$$\\boxed{1}$$", "id": "3060326"}]}