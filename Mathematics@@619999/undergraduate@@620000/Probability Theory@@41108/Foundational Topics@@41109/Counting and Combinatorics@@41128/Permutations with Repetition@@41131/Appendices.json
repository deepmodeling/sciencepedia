{"hands_on_practices": [{"introduction": "This first exercise establishes the bedrock principle of permutations with repetition. When arranging a collection of items where some are identical, simply calculating the factorial of the total number of items leads to overcounting. This problem [@problem_id:1386528] walks you through the fundamental technique of correcting for this overcounting by dividing by the permutations of each group of identical items, a concept formalized by the multinomial coefficient.", "problem": "A robotics laboratory is programming a cleaning robot for its daily maintenance schedule. The schedule consists of a sequence of 10 discrete tasks that are executed one after another. The engineering team has determined that for a full day's work, the schedule must be composed of the following specific tasks:\n- 3 'Data Processing' tasks\n- 2 'Workspace Cleaning' tasks\n- 2 'Battery Charging' tasks\n- 1 'System Diagnostics' task\n- 1 'Status Reporting' task\n- 1 'Return to Dock' task\n\nA valid daily schedule is any unique ordering of these 10 tasks. Determine the total number of distinct daily schedules that can be programmed for the robot.", "solution": "The problem asks for the number of distinct sequences (schedules) that can be formed from a collection of 10 tasks, where some tasks are identical. This is a combinatorial problem that involves finding the number of permutations of a multiset.\n\nFirst, we identify the total number of tasks to be arranged. Let this total number be $n$. The sum of the individual task counts is $n = 3 + 2 + 2 + 1 + 1 + 1 = 10$.\n\nIf all 10 tasks were distinct, there would be $10!$ possible arrangements. However, since some tasks are identical, we must correct for the overcounting that arises from permuting these identical tasks among themselves. For a group of $k$ identical items, there are $k!$ ways to arrange them, but all these arrangements are indistinguishable. Therefore, we must divide the total number of permutations by the factorial of the count of each identical item.\n\nThe counts for each type of task are as follows:\n- $n_1 = 3$ for 'Data Processing'\n- $n_2 = 2$ for 'Workspace Cleaning'\n- $n_3 = 2$ for 'Battery Charging'\n- $n_4 = 1$ for 'System Diagnostics'\n- $n_5 = 1$ for 'Status Reporting'\n- $n_6 = 1$ for 'Return to Dock'\n\nThe general formula for the number of distinct permutations of $n$ objects, where there are $n_1$ identical objects of a first type, $n_2$ identical objects of a second type, ..., and $n_k$ identical objects of a $k$-th type, is given by the multinomial coefficient:\n$$ \\frac{n!}{n_1! n_2! \\dots n_k!} $$\nApplying this formula to our specific problem, the number of distinct schedules is:\n$$ \\frac{10!}{3! \\cdot 2! \\cdot 2! \\cdot 1! \\cdot 1! \\cdot 1!} $$\nSince $1! = 1$, the expression simplifies to:\n$$ \\frac{10!}{3! \\cdot 2! \\cdot 2!} $$\nNext, we calculate the values of the factorials:\n$10! = 10 \\times 9 \\times 8 \\times 7 \\times 6 \\times 5 \\times 4 \\times 3 \\times 2 \\times 1 = 3,628,800$\n$3! = 3 \\times 2 \\times 1 = 6$\n$2! = 2 \\times 1 = 2$\n\nNow, we substitute these numerical values back into our formula:\n$$ \\text{Number of schedules} = \\frac{3,628,800}{6 \\cdot 2 \\cdot 2} = \\frac{3,628,800}{24} $$\nFinally, we perform the division to get the result:\n$$ \\frac{3,628,800}{24} = 151,200 $$\nThus, there are 151,200 distinct daily schedules that can be programmed for the robot.", "answer": "$$\\boxed{151200}$$", "id": "1386528"}, {"introduction": "Building upon the basics, this problem introduces a common and important type of restriction: ensuring certain items are never adjacent to one another. To solve this, we employ a clever and powerful combinatorial strategy often called the \"gap method\" [@problem_id:1391267]. This technique involves first arranging the unrestricted items to create a series of \"gaps\" and then placing the restricted items into these gaps, which is an invaluable approach for many constrained arrangement problems.", "problem": "A specialized networking protocol is designed to transmit a sequence of packets between two nodes. Each sequence consists of a fixed number of packets of two distinct types: data packets and control packets. For the purpose of this analysis, all data packets are considered identical to each other, and all control packets are considered identical to each other.\n\nThe protocol operates under a fundamental constraint to ensure network stability: no two control packets can be transmitted adjacently. All packets in the designated batch must be transmitted.\n\nConsider a batch that contains exactly 18 data packets and 6 control packets. Determine the total number of distinct, valid transmission sequences that can be formed according to this protocol.", "solution": "Let $D$ denote a data packet and $C$ denote a control packet. All $D$ are identical among themselves, and all $C$ are identical among themselves. The constraint is that no two $C$ can be adjacent.\n\nFirst, arrange the $18$ data packets $D$ in a line. This creates $18+1=19$ distinct gaps where control packets can be placed: one before the first $D$, one after the last $D$, and one between each consecutive pair of $D$. Placing at most one $C$ in any gap guarantees that no two $C$ are adjacent. Conversely, any valid sequence with no adjacent $C$ arises uniquely by choosing which of these $19$ gaps receive a $C$.\n\nTherefore, the number of valid sequences equals the number of ways to choose $6$ gaps from the $19$ available:\n$$\n\\text{Number of sequences}=\\binom{19}{6}.\n$$\nEvaluating,\n$$\n\\binom{19}{6}=\\frac{19!}{6!\\,13!}=\\frac{19\\cdot 18\\cdot 17\\cdot 16\\cdot 15\\cdot 14}{6\\cdot 5\\cdot 4\\cdot 3\\cdot 2\\cdot 1}=27132.\n$$", "answer": "$$\\boxed{27132}$$", "id": "1391267"}, {"introduction": "Our final practice bridges the gap between pure counting and probability theory. Instead of just asking \"how many ways?\", we now ask \"what is the probability of a specific outcome?\". This problem [@problem_id:1379157] challenges you to use your understanding of multiset permutations to analyze a randomly shuffled sequence. By calculating the ratio of favorable arrangements to all possible arrangements, you will derive a general formula, demonstrating how combinatorics is a cornerstone of probability.", "problem": "In a data communication system, a stream of $N$ data packets is to be transmitted. The stream is composed of packets of $K$ different types. For each type $k$ (where $k=1, 2, \\dots, K$), there are $n_k$ identical packets. The total number of packets is $N = \\sum_{k=1}^{K} n_k$. Before transmission, the packets are stored in a buffer that shuffles their order, resulting in a sequence that is a uniformly random permutation of the original multiset of packets. What is the probability that the first packet and the last packet in the shuffled sequence are of the same type? Express your answer as a single closed-form analytic expression in terms of $N$ and the individual counts $n_k$ for $k=1, \\dots, K$.", "solution": "Assume $N \\geq 2$ so that both the first and last positions exist and are distinct. Let the event that the first packet is of type $k$ be denoted by $F=k$, and the event that the last packet is of type $k$ be denoted by $L=k$. By the law of total probability,\n$$\n\\Pr(\\text{first and last are the same type})=\\sum_{k=1}^{K}\\Pr(F=k)\\Pr(L=k\\mid F=k).\n$$\nBecause the shuffled sequence is a uniformly random permutation of the multiset, the probability that the first packet is of type $k$ is\n$$\n\\Pr(F=k)=\\frac{n_{k}}{N}.\n$$\nConditioned on $F=k$, the remaining multiset has $N-1$ packets in total, with $n_{k}-1$ of type $k$. The last position is uniformly distributed among these remaining packets, so\n$$\n\\Pr(L=k\\mid F=k)=\\frac{n_{k}-1}{N-1}.\n$$\nTherefore,\n$$\n\\Pr(\\text{first and last are the same type})=\\sum_{k=1}^{K}\\frac{n_{k}}{N}\\cdot\\frac{n_{k}-1}{N-1}=\\frac{\\sum_{k=1}^{K}n_{k}(n_{k}-1)}{N(N-1)}.\n$$\nThis can also be interpreted as the ratio of the number of ordered pairs of distinct positions occupied by the same type, $\\sum_{k}n_{k}(n_{k}-1)$, to the total number of ordered pairs of distinct positions, $N(N-1)$. For completeness, if $N=1$, the first and last packet coincide and the probability is $1$, consistent with the direct interpretation of the event.", "answer": "$$\\boxed{\\frac{\\sum_{k=1}^{K} n_{k}\\left(n_{k}-1\\right)}{N\\left(N-1\\right)}}$$", "id": "1379157"}]}