{"hands_on_practices": [{"introduction": "This first exercise is a cornerstone for understanding the Neumann problem. By solving a one-dimensional boundary value problem from first principles, you will see exactly how the Fourier cosine series arises as the natural basis for this problem. This practice is essential for internalizing the role of the \"zero mode\" and deriving the critical compatibility condition that must be satisfied by the source term and boundary data for a solution to exist [@problem_id:3040833].", "problem": "Consider the one-dimensional Neumann boundary value problem on the interval $\\left(0,L\\right)$ for an unknown function $u:\\left[0,L\\right]\\to\\mathbb{R}$ governed by the ordinary differential equation $-u''(x)=f(x)$, where $f\\in L^{2}\\!\\left(0,L\\right)$ is a given source term. The boundary fluxes are specified by $u'(0)=h_{0}$ and $u'(L)=h_{L}$, where $h_{0},h_{L}\\in\\mathbb{R}$ are given constants. Your task is to solve the problem by expanding $u$ in a cosine series associated with the Neumann eigenfunctions of $-d^{2}/dx^{2}$ on $\\left(0,L\\right)$, starting from first principles (integration by parts, orthogonality, and eigenfunction expansions). In your derivation, construct a lifting that enforces the inhomogeneous boundary fluxes, reduce to a homogeneous Neumann problem for the residual, and determine the Fourier cosine coefficients symbolically. Identify and explain the role of the zero mode (the constant eigenfunction) in the solvability of the residual equation, and derive the necessary compatibility condition that the data must satisfy. Finally, fix the additive constant (which is undetermined in Neumann problems) by imposing the normalization $\\int_{0}^{L}u(x)\\,dx=0$, and report the resulting explicit series representation for $u(x)$ in terms of $L$, $h_{0}$, $h_{L}$, and the cosine coefficients of $f$. Define the cosine coefficients for $n\\geq 1$ by\n$$\nf_{n}\\;=\\;\\frac{2}{L}\\int_{0}^{L}f(y)\\,\\cos\\!\\left(\\frac{n\\pi y}{L}\\right)\\,dy.\n$$\nYour final answer must be a single closed-form analytic expression for $u(x)$ expressed as the sum of an explicit polynomial in $x$ and a cosine series with the above coefficients. Do not provide an inequality or an equation to be solved. There is no rounding required.", "solution": "The user wants to solve the one-dimensional Neumann boundary value problem:\n$$\n-u''(x) = f(x), \\quad x \\in (0, L)\n$$\nwith inhomogeneous boundary conditions\n$$\nu'(0) = h_{0}, \\quad u'(L) = h_{L}\n$$\nand an additional normalization constraint\n$$\n\\int_{0}^{L} u(x) \\, dx = 0.\n$$\nThe source term is $f \\in L^2(0, L)$, and $h_0, h_L$ are real constants. The solution is to be found using an eigenfunction expansion in terms of cosine functions.\n\nFirst, we address the inhomogeneous boundary conditions by introducing a \"lifting\" function. We seek a simple function $v(x)$ that satisfies the given boundary conditions, i.e., $v'(0) = h_0$ and $v'(L) = h_L$. A quadratic polynomial of the form $v(x) = Ax^2 + Bx$ is a suitable candidate. Its derivative is $v'(x) = 2Ax + B$.\nApplying the boundary conditions:\n$$\nv'(0) = B = h_0\n$$\n$$\nv'(L) = 2AL + B = h_L \\implies 2AL + h_0 = h_L \\implies A = \\frac{h_L - h_0}{2L}\n$$\nThus, a lifting function is given by:\n$$\nv(x) = \\frac{h_L - h_0}{2L}x^2 + h_0 x\n$$\nWe now express the solution $u(x)$ as the sum of this lifting function and a residual function $w(x)$, i.e., $u(x) = v(x) + w(x)$. We substitute this into the original differential equation and boundary conditions to find the problem that $w(x)$ must solve.\n\nThe differential equation for $w(x)$ is:\n$$\n-(v(x) + w(x))'' = f(x) \\implies -v''(x) - w''(x) = f(x)\n$$\n$$\n-w''(x) = f(x) + v''(x)\n$$\nWe compute the second derivative of $v(x)$:\n$$\nv'(x) = \\frac{h_L - h_0}{L}x + h_0 \\implies v''(x) = \\frac{h_L - h_0}{L}\n$$\nSo, the differential equation for $w(x)$ becomes:\n$$\n-w''(x) = f(x) + \\frac{h_L - h_0}{L}\n$$\nLet's define a new source term $g(x) = f(x) + \\frac{h_L - h_0}{L}$. The equation is $-w''(x) = g(x)$.\n\nThe boundary conditions for $w(x)$ are found from $u'(x) = v'(x) + w'(x)$:\n$$\nu'(0) = v'(0) + w'(0) \\implies h_0 = h_0 + w'(0) \\implies w'(0) = 0\n$$\n$$\nu'(L) = v'(L) + w'(L) \\implies h_L = h_L + w'(L) \\implies w'(L) = 0\n$$\nSo, $w(x)$ solves a Neumann problem with homogeneous boundary conditions:\n$$\n-w''(x) = g(x), \\quad w'(0) = 0, \\quad w'(L) = 0\n$$\nTo solve this problem, we use the method of eigenfunction expansion. The relevant eigenfunctions are those of the operator $-d^2/dx^2$ on $(0, L)$ with homogeneous Neumann boundary conditions. These are given by $\\phi_n(x) = \\cos(\\frac{n\\pi x}{L})$ for $n=0, 1, 2, \\dots$, with corresponding eigenvalues $\\lambda_n = (\\frac{n\\pi}{L})^2$.\n\nThe eigenfunction for $n=0$ is $\\phi_0(x) = \\cos(0) = 1$, with eigenvalue $\\lambda_0 = 0$. This is the \"zero mode\". Its existence has a profound consequence for the solvability of the problem. To see this, we can integrate the equation for $w(x)$ over the domain $(0, L)$:\n$$\n\\int_{0}^{L} -w''(x) \\, dx = \\int_{0}^{L} g(x) \\, dx\n$$\n$$\n[-w'(x)]_{0}^{L} = \\int_{0}^{L} g(x) \\, dx\n$$\n$$\n-w'(L) + w'(0) = \\int_{0}^{L} g(x) \\, dx\n$$\nUsing the homogeneous boundary conditions $w'(0)=w'(L)=0$, the left side vanishes, leading to the compatibility condition:\n$$\n\\int_{0}^{L} g(x) \\, dx = 0\n$$\nSubstituting the definition of $g(x)$:\n$$\n\\int_{0}^{L} \\left(f(x) + \\frac{h_L - h_0}{L}\\right) \\, dx = 0\n$$\n$$\n\\int_{0}^{L} f(x) \\, dx + \\frac{h_L - h_0}{L} \\int_{0}^{L} \\, dx = 0\n$$\n$$\n\\int_{0}^{L} f(x) \\, dx + (h_L - h_0) = 0 \\implies \\int_{0}^{L} f(x) \\, dx = h_0 - h_L\n$$\nThis is the necessary condition that the data $(f, h_0, h_L)$ must satisfy for a solution to exist.\n\nAssuming this condition holds, we proceed to find $w(x)$. We expand both $w(x)$ and $g(x)$ in the basis of Neumann eigenfunctions:\n$$\nw(x) = \\sum_{n=0}^{\\infty} w_n \\cos\\left(\\frac{n\\pi x}{L}\\right)\n$$\n$$\ng(x) = \\sum_{n=0}^{\\infty} g_n \\cos\\left(\\frac{n\\pi x}{L}\\right)\n$$\nSubstituting these series into $-w''(x) = g(x)$:\n$$\n-\\frac{d^2}{dx^2} \\sum_{n=0}^{\\infty} w_n \\cos\\left(\\frac{n\\pi x}{L}\\right) = \\sum_{n=0}^{\\infty} g_n \\cos\\left(\\frac{n\\pi x}{L}\\right)\n$$\n$$\n\\sum_{n=0}^{\\infty} w_n \\left(\\frac{n\\pi}{L}\\right)^2 \\cos\\left(\\frac{n\\pi x}{L}\\right) = \\sum_{n=0}^{\\infty} g_n \\cos\\left(\\frac{n\\pi x}{L}\\right)\n$$\nEquating the coefficients of the basis functions, we get $w_n \\lambda_n = g_n$ for each $n$.\nFor $n \\ge 1$, $\\lambda_n = (\\frac{n\\pi}{L})^2 \\ne 0$, so the coefficients are uniquely determined:\n$$\nw_n = \\frac{g_n}{\\lambda_n} = \\frac{L^2}{n^2\\pi^2} g_n\n$$\nFor $n = 0$, $\\lambda_0 = 0$, and the equation is $w_0 \\cdot 0 = g_0$. The compatibility condition $\\int_0^L g(x) dx = 0$ is equivalent to $g_0 = \\frac{1}{L}\\int_0^L g(x) dx = 0$. Since $g_0=0$, the equation $0=0$ is satisfied, but $w_0$ remains undetermined. This reflects the fact that if $w(x)$ is a solution, so is $w(x)+C$ for any constant $C$. The coefficient $w_0$ represents this arbitrary additive constant.\n\nNext, we express the coefficients $g_n$ in terms of the given data. For $n \\ge 1$:\n$$\ng_n = \\frac{2}{L}\\int_{0}^{L} g(x)\\cos\\left(\\frac{n\\pi x}{L}\\right)dx = \\frac{2}{L}\\int_{0}^{L} \\left(f(x) + \\frac{h_L - h_0}{L}\\right)\\cos\\left(\\frac{n\\pi x}{L}\\right)dx\n$$\n$$\ng_n = \\frac{2}{L}\\int_{0}^{L} f(x)\\cos\\left(\\frac{n\\pi x}{L}\\right)dx + \\frac{2(h_L - h_0)}{L^2}\\int_{0}^{L}\\cos\\left(\\frac{n\\pi x}{L}\\right)dx\n$$\nThe first term is the definition of $f_n$. The second integral is $\\left[\\frac{L}{n\\pi}\\sin\\left(\\frac{n\\pi x}{L}\\right)\\right]_0^L = 0$ for $n \\ge 1$.\nThus, $g_n = f_n$ for $n \\ge 1$.\nThe coefficients for $w(x)$ are $w_n = \\frac{L^2}{n^2\\pi^2}f_n$ for $n \\ge 1$.\n\nThe solution for $w(x)$ is:\n$$\nw(x) = w_0 + \\sum_{n=1}^{\\infty} \\frac{L^2}{n^2\\pi^2}f_n \\cos\\left(\\frac{n\\pi x}{L}\\right)\n$$\nCombining with the lifting function $v(x)$, the general solution for $u(x)$ is:\n$$\nu(x) = v(x) + w(x) = \\frac{h_L - h_0}{2L}x^2 + h_0 x + w_0 + \\sum_{n=1}^{\\infty} \\frac{L^2}{n^2\\pi^2}f_n \\cos\\left(\\frac{n\\pi x}{L}\\right)\n$$\nFinally, we use the normalization condition $\\int_0^L u(x) dx = 0$ to determine the constant $w_0$.\n$$\n\\int_{0}^{L} \\left( \\frac{h_L - h_0}{2L}x^2 + h_0 x + w_0 + \\sum_{n=1}^{\\infty} \\frac{L^2}{n^2\\pi^2}f_n \\cos\\left(\\frac{n\\pi x}{L}\\right) \\right) dx = 0\n$$\nThe integral of each cosine term in the series over $(0, L)$ is zero. We only need to integrate the polynomial part and the constant $w_0$:\n$$\n\\int_{0}^{L} \\left( \\frac{h_L - h_0}{2L}x^2 + h_0 x + w_0 \\right) dx = 0\n$$\n$$\n\\left[ \\frac{h_L - h_0}{6L}x^3 + \\frac{h_0}{2}x^2 + w_0 x \\right]_0^L = 0\n$$\n$$\n\\frac{(h_L - h_0)L^3}{6L} + \\frac{h_0 L^2}{2} + w_0 L = 0\n$$\n$$\n\\frac{(h_L - h_0)L^2}{6} + \\frac{3h_0 L^2}{6} + w_0 L = 0\n$$\nDividing by $L$ (since $L>0$):\n$$\n\\frac{(h_L - h_0 + 3h_0)L}{6} + w_0 = 0 \\implies \\frac{(h_L + 2h_0)L}{6} + w_0 = 0\n$$\n$$\nw_0 = -\\frac{L(h_L + 2h_0)}{6}\n$$\nSubstituting this value for $w_0$ gives the unique solution for $u(x)$ that satisfies all conditions. The final expression is the sum of a polynomial and a cosine series, as requested.\n$$\nu(x) = \\frac{h_L - h_0}{2L}x^2 + h_0 x - \\frac{L(h_L + 2h_0)}{6} + \\sum_{n=1}^{\\infty} \\frac{L^2}{n^2\\pi^2} f_n \\cos\\left(\\frac{n\\pi x}{L}\\right)\n$$", "answer": "$$\n\\boxed{\\frac{h_{L}-h_{0}}{2L}x^{2} + h_{0}x - \\frac{L(h_{L} + 2h_{0})}{6} + \\sum_{n=1}^{\\infty} \\frac{L^{2}}{n^{2}\\pi^{2}} f_{n} \\cos\\left(\\frac{n\\pi x}{L}\\right)}\n$$", "id": "3040833"}, {"introduction": "Building on the foundational one-dimensional case, we now extend the principles to a two-dimensional Poisson equation on a simple rectangular domain. This practice reinforces the concepts of separation of variables, eigenfunction expansions, and the solvability condition in a higher-dimensional context. The specific structure of the forcing term simplifies the calculation of Fourier coefficients, allowing you to focus on how the eigenvalues of the Laplacian dictate the solution's form [@problem_id:3041106].", "problem": "Consider the rectangle domain $\\Omega=(0,\\ell)\\times(0,h)$ with $\\ell=3$ and $h=2$. Let $u:\\overline{\\Omega}\\to\\mathbb{R}$ solve the partial differential equation (PDE) $-\\Delta u=f$ in $\\Omega$ with the homogeneous Neumann boundary condition $\\partial_{\\nu}u=0$ on $\\partial\\Omega$, where $\\partial_{\\nu}$ denotes the outward normal derivative. The forcing is\n$$\nf(x,y)=4\\cos\\!\\left(\\frac{2\\pi x}{3}\\right)\\cos\\!\\left(\\frac{\\pi y}{2}\\right)+6\\cos\\!\\left(\\frac{\\pi x}{3}\\right)+2\\cos(\\pi y).\n$$\nUsing separation of variables and the cosine series associated with homogeneous Neumann boundary conditions on a rectangle, derive from first principles the unique solution with zero spatial average, that is, the unique solution $u$ such that $\\int_{\\Omega}u\\,dx\\,dy=0$. Your derivation must explicitly address the role of the zero mode and the solvability condition. Express your final answer as a single closed-form analytic expression for $u(x,y)$. No numerical approximation is required.", "solution": "The problem as stated is a classical Neumann boundary value problem for the Poisson equation on a rectangular domain. A rigorous validation is required before proceeding to a solution.\n\nFirst, we establish the necessary solvability condition for the problem $-\\Delta u = f$ in a domain $\\Omega$ with homogeneous Neumann boundary conditions $\\partial_{\\nu}u=0$ on the boundary $\\partial\\Omega$. By integrating the PDE over the domain $\\Omega$ and applying the divergence theorem, we have:\n$$\n-\\int_{\\Omega} \\Delta u \\, d A = \\int_{\\Omega} f \\, d A\n$$\nThe divergence theorem states $\\int_{\\Omega} \\nabla \\cdot \\mathbf{F} \\, d A = \\int_{\\partial\\Omega} \\mathbf{F} \\cdot \\nu \\, dS$. Letting $\\mathbf{F} = \\nabla u$, we have $\\nabla \\cdot \\mathbf{F} = \\Delta u$. Thus:\n$$\n\\int_{\\Omega} \\Delta u \\, d A = \\int_{\\partial\\Omega} \\nabla u \\cdot \\nu \\, dS = \\int_{\\partial\\Omega} \\partial_{\\nu}u \\, dS\n$$\nGiven the boundary condition $\\partial_{\\nu}u=0$, the right-hand side is zero. Therefore, the solvability condition is:\n$$\n\\int_{\\Omega} f \\, d A = 0\n$$\nWe must verify if the given forcing function $f(x,y)$ satisfies this condition on the domain $\\Omega=(0,3)\\times(0,2)$. The area element is $dA = dx\\,dy$. We compute the integral:\n$$\n\\int_0^2 \\int_0^3 \\left[ 4\\cos\\left(\\frac{2\\pi x}{3}\\right)\\cos\\left(\\frac{\\pi y}{2}\\right)+6\\cos\\left(\\frac{\\pi x}{3}\\right)+2\\cos(\\pi y) \\right] dx\\,dy\n$$\nWe can evaluate the integral of each term separately.\nFor the first term:\n$$\n\\int_0^2 \\int_0^3 4\\cos\\left(\\frac{2\\pi x}{3}\\right)\\cos\\left(\\frac{\\pi y}{2}\\right) dx\\,dy = 4 \\left( \\int_0^3 \\cos\\left(\\frac{2\\pi x}{3}\\right) dx \\right) \\left( \\int_0^2 \\cos\\left(\\frac{\\pi y}{2}\\right) dy \\right)\n$$\nThe individual integrals are $\\int_0^3 \\cos\\left(\\frac{2\\pi x}{3}\\right) dx = \\left[\\frac{3}{2\\pi}\\sin\\left(\\frac{2\\pi x}{3}\\right)\\right]_0^3 = 0$ and $\\int_0^2 \\cos\\left(\\frac{\\pi y}{2}\\right) dy = \\left[\\frac{2}{\\pi}\\sin\\left(\\frac{\\pi y}{2}\\right)\\right]_0^2 = 0$. Thus, the integral of the first term is $0$.\nFor the second term:\n$$\n\\int_0^2 \\int_0^3 6\\cos\\left(\\frac{\\pi x}{3}\\right) dx\\,dy = 6 \\left( \\int_0^3 \\cos\\left(\\frac{\\pi x}{3}\\right) dx \\right) \\left( \\int_0^2 dy \\right) = 6 \\left( \\left[\\frac{3}{\\pi}\\sin\\left(\\frac{\\pi x}{3}\\right)\\right]_0^3 \\right) (2) = 6(0)(2) = 0\n$$\nFor the third term:\n$$\n\\int_0^2 \\int_0^3 2\\cos(\\pi y) dx\\,dy = 2 \\left( \\int_0^3 dx \\right) \\left( \\int_0^2 \\cos(\\pi y) dy \\right) = 2(3) \\left( \\left[\\frac{1}{\\pi}\\sin(\\pi y)\\right]_0^2 \\right) = 6(0) = 0\n$$\nThe total integral of $f$ over $\\Omega$ is $0+0+0 = 0$. The solvability condition is satisfied. If a solution exists, it is unique up to an additive constant. The problem provides the additional constraint $\\int_{\\Omega}u\\,dx\\,dy=0$ to fix this constant, thus ensuring a unique solution. The problem is therefore valid, self-contained, and well-posed.\n\nWe proceed with the solution using separation of variables and eigenfunction expansion. The eigenfunctions of the negative Laplacian $-\\Delta$ on the rectangle $\\Omega=(0,\\ell)\\times(0,h)$ with homogeneous Neumann boundary conditions are given by\n$$\n\\phi_{mn}(x,y) = \\cos\\left(\\frac{m\\pi x}{\\ell}\\right)\\cos\\left(\\frac{n\\pi y}{h}\\right)\n$$\nfor integers $m, n \\ge 0$. These functions form an orthogonal basis for $L^2(\\Omega)$.\nThe corresponding eigenvalues $\\lambda_{mn}$ are found by applying the operator:\n$$\n-\\Delta\\phi_{mn} = -\\left(\\frac{\\partial^2}{\\partial x^2} + \\frac{\\partial^2}{\\partial y^2}\\right)\\cos\\left(\\frac{m\\pi x}{\\ell}\\right)\\cos\\left(\\frac{n\\pi y}{h}\\right) = \\left(\\left(\\frac{m\\pi}{\\ell}\\right)^2 + \\left(\\frac{n\\pi}{h}\\right)^2\\right)\\phi_{mn}\n$$\nSo, the eigenvalues are $\\lambda_{mn} = \\pi^2\\left(\\frac{m^2}{\\ell^2}+\\frac{n^2}{h^2}\\right)$.\n\nWe expand the solution $u(x,y)$ and the forcing term $f(x,y)$ as series in these eigenfunctions:\n$$\nu(x,y) = \\sum_{m=0}^\\infty \\sum_{n=0}^\\infty u_{mn} \\cos\\left(\\frac{m\\pi x}{\\ell}\\right)\\cos\\left(\\frac{n\\pi y}{h}\\right)\n$$\n$$\nf(x,y) = \\sum_{m=0}^\\infty \\sum_{n=0}^\\infty f_{mn} \\cos\\left(\\frac{m\\pi x}{\\ell}\\right)\\cos\\left(\\frac{n\\pi y}{h}\\right)\n$$\nSubstituting these expansions into the PDE $-\\Delta u = f$:\n$$\n-\\Delta \\left( \\sum_{m,n} u_{mn} \\phi_{mn}(x,y) \\right) = \\sum_{m,n} f_{mn} \\phi_{mn}(x,y)\n$$\n$$\n\\sum_{m,n} u_{mn} (-\\Delta \\phi_{mn}(x,y)) = \\sum_{m,n} f_{mn} \\phi_{mn}(x,y)\n$$\n$$\n\\sum_{m,n} u_{mn} \\lambda_{mn} \\phi_{mn}(x,y) = \\sum_{m,n} f_{mn} \\phi_{mn}(x,y)\n$$\nBy orthogonality, we can equate the coefficients for each mode $(m,n)$:\n$$\nu_{mn} \\lambda_{mn} = f_{mn}\n$$\nFor the zero mode $(m,n)=(0,0)$, the eigenfunction is $\\phi_{00}=1$ and the eigenvalue is $\\lambda_{00} = 0$. The equation becomes $u_{00} \\cdot 0 = f_{00}$. This implies that we must have $f_{00}=0$. The coefficient $f_{00}$ is the spatial average of $f$: $f_{00} = \\frac{1}{\\ell h}\\int_\\Omega f\\,dx\\,dy$. The condition $f_{00}=0$ is precisely the solvability condition we verified earlier. For this mode, $u_{00}$ is undetermined by the PDE. This coefficient corresponds to the average value of the solution: $\\frac{1}{\\ell h}\\int_\\Omega u\\,dx\\,dy = u_{00}$. The problem specifies that the solution must have zero spatial average, $\\int_\\Omega u\\,dx\\,dy=0$, which directly implies $u_{00}=0$.\n\nFor all other modes, $(m,n) \\neq (0,0)$, the eigenvalue $\\lambda_{mn} > 0$. We can solve for the coefficients $u_{mn}$:\n$$\nu_{mn} = \\frac{f_{mn}}{\\lambda_{mn}}\n$$\nNow, we identify the coefficients $f_{mn}$ by inspection of the given forcing function, with $\\ell=3$ and $h=2$:\n$$\nf(x,y)=4\\cos\\left(\\frac{2\\pi x}{3}\\right)\\cos\\left(\\frac{\\pi y}{2}\\right)+6\\cos\\left(\\frac{\\pi x}{3}\\right)+2\\cos(\\pi y)\n$$\nThe basis functions are $\\cos\\left(\\frac{m\\pi x}{3}\\right)\\cos\\left(\\frac{n\\pi y}{2}\\right)$.\n1. The term $4\\cos\\left(\\frac{2\\pi x}{3}\\right)\\cos\\left(\\frac{\\pi y}{2}\\right)$ corresponds to $m=2$, $n=1$. So, $f_{21}=4$.\n2. The term $6\\cos\\left(\\frac{\\pi x}{3}\\right) = 6\\cos\\left(\\frac{1\\pi x}{3}\\right)\\cos\\left(\\frac{0\\pi y}{2}\\right)$ corresponds to $m=1$, $n=0$. So, $f_{10}=6$.\n3. The term $2\\cos(\\pi y) = 2\\cos\\left(\\frac{0\\pi x}{3}\\right)\\cos\\left(\\frac{2\\pi y}{2}\\right)$ corresponds to $m=0$, $n=2$. So, $f_{02}=2$.\nAll other coefficients $f_{mn}$ are zero.\n\nNext, we calculate the required eigenvalues $\\lambda_{mn} = \\pi^2\\left(\\frac{m^2}{3^2}+\\frac{n^2}{2^2}\\right) = \\pi^2\\left(\\frac{m^2}{9}+\\frac{n^2}{4}\\right)$:\n- For $(m,n)=(2,1)$: $\\lambda_{21} = \\pi^2\\left(\\frac{2^2}{9}+\\frac{1^2}{4}\\right) = \\pi^2\\left(\\frac{4}{9}+\\frac{1}{4}\\right) = \\pi^2\\left(\\frac{16+9}{36}\\right) = \\frac{25\\pi^2}{36}$.\n- For $(m,n)=(1,0)$: $\\lambda_{10} = \\pi^2\\left(\\frac{1^2}{9}+\\frac{0^2}{4}\\right) = \\frac{\\pi^2}{9}$.\n- For $(m,n)=(0,2)$: $\\lambda_{02} = \\pi^2\\left(\\frac{0^2}{9}+\\frac{2^2}{4}\\right) = \\pi^2\\left(\\frac{4}{4}\\right) = \\pi^2$.\n\nFinally, we compute the coefficients for the solution $u(x,y)$:\n- $u_{00}=0$.\n- $u_{21} = \\frac{f_{21}}{\\lambda_{21}} = \\frac{4}{25\\pi^2/36} = \\frac{144}{25\\pi^2}$.\n- $u_{10} = \\frac{f_{10}}{\\lambda_{10}} = \\frac{6}{\\pi^2/9} = \\frac{54}{\\pi^2}$.\n- $u_{02} = \\frac{f_{02}}{\\lambda_{02}} = \\frac{2}{\\pi^2}$.\n- All other $u_{mn}=0$.\n\nThe unique solution $u(x,y)$ with zero spatial average is obtained by assembling these components:\n$$\nu(x,y) = u_{00} + u_{21}\\cos\\left(\\frac{2\\pi x}{3}\\right)\\cos\\left(\\frac{\\pi y}{2}\\right) + u_{10}\\cos\\left(\\frac{\\pi x}{3}\\right) + u_{02}\\cos\\left(\\pi y\\right)\n$$\nSubstituting the calculated coefficients gives the final expression for the solution.\n$$\nu(x,y) = \\frac{144}{25\\pi^2}\\cos\\left(\\frac{2\\pi x}{3}\\right)\\cos\\left(\\frac{\\pi y}{2}\\right) + \\frac{54}{\\pi^2}\\cos\\left(\\frac{\\pi x}{3}\\right) + \\frac{2}{\\pi^2}\\cos(\\pi y)\n$$", "answer": "$$\n\\boxed{\\frac{144}{25\\pi^2}\\cos\\left(\\frac{2\\pi x}{3}\\right)\\cos\\left(\\frac{\\pi y}{2}\\right) + \\frac{54}{\\pi^2}\\cos\\left(\\frac{\\pi x}{3}\\right) + \\frac{2}{\\pi^2}\\cos(\\pi y)}\n$$", "id": "3041106"}, {"introduction": "Our final practice bridges the gap between continuous theory and discrete numerical methods, a vital connection in modern science and engineering. You will use the method of manufactured solutions to verify that a Finite Element Method (FEM) discretization correctly captures the discrete analogue of the Neumann compatibility condition. This exercise demonstrates how fundamental mathematical constraints must be respected in computational models and provides hands-on experience with numerical verification techniques [@problem_id:3041063].", "problem": "Consider the Neumann boundary value problem for the Laplace operator: find a function $u$ on the domain $\\Omega = [0,1]^2 \\subset \\mathbb{R}^2$ such that\n$$\n-\\Delta u = f \\quad \\text{in } \\Omega, \n\\qquad \n\\partial_{\\nu} u = g \\quad \\text{on } \\partial\\Omega,\n$$\nwhere $\\Delta$ is the Laplacian, $\\nu$ is the outward unit normal vector to $\\partial\\Omega$, and $\\partial_{\\nu} u := \\nabla u \\cdot \\nu$. The weak formulation of this Neumann problem reads: find $u \\in H^1(\\Omega)$ such that for all $v \\in H^1(\\Omega)$,\n$$\n\\int_{\\Omega} \\nabla u \\cdot \\nabla v \\, dx = \\int_{\\Omega} f\\, v \\, dx + \\int_{\\partial\\Omega} g\\, v \\, ds,\n$$\nsubject to a normalization condition (for example, zero mean) to ensure uniqueness. A necessary compatibility condition for solvability is\n$$\n\\int_{\\Omega} f \\, dx + \\int_{\\partial\\Omega} g \\, ds = 0.\n$$\nYou are asked to construct and verify this compatibility condition in a discrete Finite Element Method (FEM) context for a specific manufactured solution.\n\nUse the manufactured solution\n$$\nu(x,y) = \\cos(2\\pi x) + \\cos(2\\pi y),\n$$\nwith homogeneous Neumann boundary data $g = \\partial_{\\nu} u \\big|_{\\partial\\Omega}$. Starting from the fundamental definitions of the gradient and Laplacian, compute\n$$\nf(x,y) := -\\Delta u(x,y),\n$$\nand verify analytically that $g \\equiv 0$ on $\\partial\\Omega$. Then, confirm the discrete compatibility condition by assembling the right-hand side load vector in a linear Finite Element Method (FEM) using piecewise affine (first-order) basis functions on a conforming triangulation of $\\Omega$.\n\nFollow these requirements to build a single program that performs the discrete verification:\n\n- Mesh construction:\n  - Partition $\\Omega$ into a uniform grid with $N$ subdivisions per coordinate direction (mesh size $h = 1/N$), where $N \\in \\mathbb{N}$.\n  - Split each grid square into two triangles along the diagonal to obtain a conforming triangular mesh.\n\n- Discrete right-hand side assembly:\n  - For each triangle $T$, assemble the elemental domain contribution to the load vector entries $b_i$ as\n    $$\n    b_i^{(T)} \\approx \\int_T f \\, \\varphi_i \\, dx,\n    $$\n    where $\\{\\varphi_i\\}$ are the local piecewise affine basis functions.\n  - Use a symmetric three-point quadrature rule on each triangle (degree-$2$ accurate) with barycentric quadrature points and equal weights to approximate these integrals.\n  - For each boundary edge $e \\subset \\partial\\Omega$, assemble the boundary contribution\n    $$\n    b_i^{(e)} \\approx \\int_e g \\, \\varphi_i \\, ds\n    $$\n    using the midpoint rule on segments.\n  - Sum all elemental and boundary contributions to obtain the global load vector entries $b_i$.\n\n- Discrete compatibility condition to verify:\n  - Using the partition of unity property $\\sum_i \\varphi_i \\equiv 1$ on each element, the sum of the assembled right-hand side entries satisfies\n    $$\n    \\sum_i b_i \\approx \\sum_{T} \\int_T f \\left(\\sum_i \\varphi_i\\right) dx + \\sum_{e \\subset \\partial\\Omega} \\int_e g \\left(\\sum_i \\varphi_i\\right) ds \\approx \\int_{\\Omega} f \\, dx + \\int_{\\partial\\Omega} g \\, ds.\n    $$\n  - Since $g \\equiv 0$ for the chosen $u$, the exact compatibility reads $\\int_{\\Omega} f \\, dx = 0$. Your numerical assembly should approximate this identity.\n\n- Acceptance criterion:\n  - Let $h = 1/N$. Define a tolerance\n    $$\n    \\mathrm{tol}(N) = C \\, h^2,\n    $$\n    with $C = 5$.\n  - For each mesh, compute the assembled sum $S(N) := \\sum_i b_i$ and return whether\n    $$\n    |S(N)| \\le \\mathrm{tol}(N).\n    $$\n\n- Test suite:\n  - Use the set of subdivisions $N \\in \\{\\, 1, 2, 4, 8 \\,\\}$ to test a coarse mesh, moderate meshes, and a finer mesh.\n  - For each $N$ in the set, output a boolean indicating whether the discrete compatibility holds within the specified tolerance.\n\n- Final output format:\n  - Your program should produce a single line of output containing the results as a comma-separated list of booleans enclosed in square brackets, for example, $[\\mathrm{True},\\mathrm{False},\\mathrm{True},\\mathrm{True}]$.\n\nNo user input is to be read. No external files are to be used. All angles are in radians. There are no physical units in this problem. The only accepted output is the single line described above, aggregating the four boolean results in the order $N \\in [\\,1,2,4,8\\,]$.", "solution": "The user wants to solve a numerical verification problem in the context of the Finite Element Method (FEM) for a Neumann boundary value problem on the unit square $\\Omega = [0,1]^2$.\n\n### Step 1: Problem Validation\n\nThe problem statement has been carefully examined and is determined to be **valid**.\n\n-   **Givens**: All necessary information is provided: the PDE $(-\\Delta u = f)$, the domain $(\\Omega = [0,1]^2)$, the Neumann boundary condition $(\\partial_\\nu u = g)$, the manufactured solution $u(x,y) = \\cos(2\\pi x) + \\cos(2\\pi y)$, the FEM discretization method (piecewise affine P1 elements), the mesh structure (uniform grid with squares split into two triangles), the specific quadrature rules for domain and boundary integrals, the test cases $N \\in \\{1, 2, 4, 8\\}$, and a precise acceptance criterion $|S(N)| \\le 5/N^2$.\n-   **Scientific Grounding**: The problem is well-grounded in the theory of numerical analysis for partial differential equations. The use of a manufactured solution to verify code correctness and compatibility conditions is a standard technique.\n-   **Well-Posedness and Objectivity**: The problem is unambiguous, objective, and its steps lead to a unique, computable result.\n\nHaving confirmed its validity, I will proceed with a full solution.\n\n### Step 2: Analytical Formulation\n\nFirst, we derive the source term $f$ and verify the boundary condition $g$ from the given manufactured solution $u(x,y) = \\cos(2\\pi x) + \\cos(2\\pi y)$.\n\nThe gradient of $u$ is:\n$$\n\\nabla u(x,y) = \\left( \\frac{\\partial u}{\\partial x}, \\frac{\\partial u}{\\partial y} \\right) = (-2\\pi \\sin(2\\pi x), -2\\pi \\sin(2\\pi y))\n$$\n\nThe Laplacian of $u$ is:\n$$\n\\Delta u = \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} = -4\\pi^2 \\cos(2\\pi x) - 4\\pi^2 \\cos(2\\pi y) = -4\\pi^2 (\\cos(2\\pi x) + \\cos(2\\pi y))\n$$\n\nThe source term $f$ is defined as $f = -\\Delta u$, so:\n$$\nf(x,y) = 4\\pi^2 (\\cos(2\\pi x) + \\cos(2\\pi y))\n$$\n\nThe boundary data $g$ is the normal derivative $\\partial_\\nu u = \\nabla u \\cdot \\nu$ on the boundary $\\partial\\Omega$.\n-   On the boundary $x=0$, $\\nu = (-1, 0)$. $\\partial_\\nu u = -(-2\\pi \\sin(0)) = 0$.\n-   On the boundary $x=1$, $\\nu = (1, 0)$. $\\partial_\\nu u = -2\\pi \\sin(2\\pi) = 0$.\n-   On the boundary $y=0$, $\\nu = (0, -1)$. $\\partial_\\nu u = -(-2\\pi \\sin(0)) = 0$.\n-   On the boundary $y=1$, $\\nu = (0, 1)$. $\\partial_\\nu u = -2\\pi \\sin(2\\pi) = 0$.\nThus, the boundary data $g$ is identically zero on $\\partial\\Omega$.\n\nThe compatibility condition for solvability is $\\int_{\\Omega} f \\, dx + \\int_{\\partial\\Omega} g \\, ds = 0$. Since $g \\equiv 0$, this simplifies to $\\int_{\\Omega} f \\, dx = 0$. Let's verify this analytically:\n$$\n\\int_0^1 \\int_0^1 4\\pi^2 (\\cos(2\\pi x) + \\cos(2\\pi y)) \\, dx \\, dy = 4\\pi^2 \\int_0^1 \\left[ \\frac{\\sin(2\\pi x)}{2\\pi} + x\\cos(2\\pi y) \\right]_{x=0}^{x=1} dy\n$$\n$$\n= 4\\pi^2 \\int_0^1 \\cos(2\\pi y) \\, dy = 4\\pi^2 \\left[ \\frac{\\sin(2\\pi y)}{2\\pi} \\right]_0^1 = 0\n$$\nThe analytical condition holds.\n\n### Step 3: Discrete Formulation and Assembly\n\nThe problem requires verifying the discrete analogue of the compatibility condition. The sum of the entries of the assembled global load vector, $S(N) = \\sum_i b_i$, approximates the compatibility integral:\n$$\nS(N) = \\sum_i b_i \\approx \\int_\\Omega f \\, dx + \\int_{\\partial \\Omega} g \\, ds\n$$\nSince $g \\equiv 0$, the boundary contributions are zero. We only need to assemble the domain contributions.\n\nFor a triangular element $T$ with vertices $V_a, V_b, V_c$, the elemental load vector entries $b_a^{(T)}, b_b^{(T)}, b_c^{(T)}$ are computed by approximating the integrals $\\int_T f \\varphi_i \\, dx$, where $\\varphi_i$ is the P1 basis function associated with vertex $V_i$.\n\nThe specified quadrature rule is a symmetric 3-point rule on the triangle, using the midpoints of the edges as quadrature points ($Q_1, Q_2, Q_3$) with equal weights. The integral of a function $F$ over $T$ is approximated as:\n$$\n\\int_T F \\, dx \\approx \\frac{\\text{Area}(T)}{3} (F(Q_1) + F(Q_2) + F(Q_3))\n$$\nIn our case, $F = f \\varphi_i$. For the basis function $\\varphi_a$ (which is $1$ at $V_a$ and $0$ at other vertices), its values at the edge midpoints are $\\varphi_a(Q_1)=0$, $\\varphi_a(Q_2)=1/2$, $\\varphi_a(Q_3)=1/2$, where $Q_1$ is opposite to $V_a$, and $Q_2, Q_3$ are adjacent. The contribution to the load vector entry for vertex $V_a$ from triangle $T$ is:\n$$\nb_a^{(T)} = \\int_T f \\varphi_a \\,dx \\approx \\frac{\\text{Area}(T)}{3} \\left( f(Q_1)\\varphi_a(Q_1) + f(Q_2)\\varphi_a(Q_2) + f(Q_3)\\varphi_a(Q_3) \\right) = \\frac{\\text{Area}(T)}{6} (f(Q_2) + f(Q_3))\n$$\nThe mesh consists of $N \\times N$ squares, each of size $h \\times h$ where $h=1/N$. Each square is split into two triangles, each with area $h^2/2$. The coefficient for assembly will be $\\frac{h^2/2}{6} = \\frac{h^2}{12}$.\n\n### Step 4: Algorithm Implementation\n\nThe program will iterate through $N \\in \\{1, 2, 4, 8\\}$. For each $N$:\n1.  Initialize an $(N+1) \\times (N+1)$ zero matrix `b` to store the load vector entries.\n2.  Iterate through each of the $N \\times N$ squares in the grid.\n3.  For each square, define the two triangles it contains.\n4.  For each triangle, calculate the coordinates of its three edge-midpoint quadrature points.\n5.  Evaluate the source function `f` at these quadrature points.\n6.  Use the formula from Step 3 to calculate the three elemental contributions and add them to the corresponding entries in the global `b` matrix.\n7.  After iterating through all triangles, compute the total sum $S(N) = \\sum_{i,j} b_{ij}$.\n8.  Check if $|S(N)|$ is less than or equal to the tolerance $\\mathrm{tol}(N) = 5/N^2$.\n9.  Store the boolean result.\n\nFinally, the program will print the list of boolean results in the specified format `[result1,result2,result3,result4]`.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef f(x, y):\n    \"\"\"\n    Source term f(x,y) = -Delta u(x,y) for the manufactured solution\n    u(x,y) = cos(2*pi*x) + cos(2*pi*y).\n    \"\"\"\n    pi = np.pi\n    return 4 * pi**2 * (np.cos(2 * pi * x) + np.cos(2 * pi * y))\n\ndef verify_compatibility(N):\n    \"\"\"\n    Constructs the mesh for a given N, assembles the load vector b,\n    and verifies the discrete compatibility condition sum(b) ~ 0.\n\n    Args:\n        N (int): The number of subdivisions per coordinate direction.\n\n    Returns:\n        bool: True if |sum(b)| <= tol(N), False otherwise.\n    \"\"\"\n    h = 1.0 / N\n    # Initialize the global load vector b. Node (i,j) maps to b[j, i].\n    b = np.zeros((N + 1, N + 1))\n    \n    # Pre-calculate the coefficient for elemental contributions.\n    # The area of each triangle is h^2/2. The quadrature formula for an\n    # elemental load vector entry involves a factor of Area(T)/6.\n    # So, coeff = (h^2/2) / 6 = h^2 / 12.\n    coeff = h**2 / 12.0\n\n    # Loop over each square in the grid to assemble contributions from the \n    # two triangles within it.\n    for j_idx in range(N):  # Corresponds to the y-index of the square's bottom-left corner\n        for i_idx in range(N):  # Corresponds to the x-index of the square's bottom-left corner\n            \n            # Coordinates of the square's corners\n            x_i = i_idx * h\n            x_ip1 = (i_idx + 1) * h\n            y_j = j_idx * h\n            y_jp1 = (j_idx + 1) * h\n\n            # --- Triangle 1: vertices (i,j), (i+1,j), (i+1,j+1) ---\n            # Quadrature points are midpoints of the triangle's edges.\n            # v0=(i, j), v1=(i+1, j), v2=(i+1, j+1)\n            # q_opp_v0 = midpoint of edge v1-v2\n            q_opp_v0 = (x_ip1, y_j + h / 2.0)\n            # q_opp_v1 = midpoint of edge v0-v2 (on the diagonal)\n            q_opp_v1 = (x_i + h / 2.0, y_j + h / 2.0)\n            # q_opp_v2 = midpoint of edge v0-v1\n            q_opp_v2 = (x_i + h / 2.0, y_j)\n            \n            # Evaluate the source function f at the quadrature points\n            f_at_q_opp_v0 = f(q_opp_v0[0], q_opp_v0[1])\n            f_at_q_opp_v1 = f(q_opp_v1[0], q_opp_v1[1])\n            f_at_q_opp_v2 = f(q_opp_v2[0], q_opp_v2[1])\n            \n            # Assemble elemental contributions for T1.\n            # a node's load vector entry gets contributions from the f-values\n            # atmidpoints of adjacent edges.\n            b[j_idx, i_idx]           += coeff * (f_at_q_opp_v1 + f_at_q_opp_v2)\n            b[j_idx, i_idx + 1]       += coeff * (f_at_q_opp_v0 + f_at_q_opp_v2)\n            b[j_idx + 1, i_idx + 1]   += coeff * (f_at_q_opp_v0 + f_at_q_opp_v1)\n\n            # --- Triangle 2: vertices (i,j), (i+1,j+1), (i,j+1) ---\n            # v0=(i,j), v1=(i+1,j+1), v2=(i,j+1)\n            # q_opp_v0 = midpoint of edge v1-v2\n            q_opp_v0_t2 = (x_i + h / 2.0, y_jp1)\n            # q_opp_v1 = midpoint of edge v0-v2\n            q_opp_v1_t2 = (x_i, y_j + h / 2.0)\n            # q_opp_v2 = midpoint of edge v0-v1 (same as q_opp_v1 of T1)\n            \n            # Evaluate f at the new quadrature points\n            f_at_q_opp_v0_t2 = f(q_opp_v0_t2[0], q_opp_v0_t2[1])\n            f_at_q_opp_v1_t2 = f(q_opp_v1_t2[0], q_opp_v1_t2[1])\n            # Reuse f-value from the shared diagonal edge midpoint\n            f_at_q_opp_v2_t2 = f_at_q_opp_v1\n\n            # Assemble elemental contributions for T2.\n            b[j_idx, i_idx]           += coeff * (f_at_q_opp_v2_t2 + f_at_q_opp_v1_t2)\n            b[j_idx + 1, i_idx + 1]   += coeff * (f_at_q_opp_v0_t2 + f_at_q_opp_v2_t2)\n            b[j_idx + 1, i_idx]       += coeff * (f_at_q_opp_v0_t2 + f_at_q_opp_v1_t2)\n\n    # The sum of the load vector entries approximates the integral of f.\n    # The boundary integral part is zero since g=0.\n    S_N = np.sum(b)\n    \n    # Define the tolerance for the check.\n    tol_N = 5.0 / (N**2)\n    \n    # Return whether the absolute sum is within tolerance.\n    return abs(S_N) <= tol_N\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [1, 2, 4, 8]\n\n    results = []\n    for N in test_cases:\n        # Main logic to calculate the result for one case goes here.\n        result = verify_compatibility(N)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    # The map(str,...) ensures 'True' and 'False' are used instead of '1' and '0'.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "3041063"}]}