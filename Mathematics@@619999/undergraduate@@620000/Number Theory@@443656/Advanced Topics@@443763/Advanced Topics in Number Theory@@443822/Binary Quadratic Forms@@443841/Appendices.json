{"hands_on_practices": [{"introduction": "Before we can classify or analyze binary quadratic forms, we must first have a systematic method for finding them. This practice guides you through the process of designing and implementing a fundamental algorithm to enumerate all reduced positive definite forms for a given negative discriminant $D$. Mastering this computational technique [@problem_id:3082340] is the essential first step for any deeper exploration of quadratic forms, as it provides the complete set of objects to study for any given discriminant.", "problem": "Consider a binary quadratic form $f(x,y)=ax^2+bxy+cy^2$ with integers $a$, $b$, and $c$. The discriminant of $f$ is the integer $D=b^2-4ac$. A form is called positive definite if $D0$ and $a0$. A positive definite form is called reduced if it satisfies the inequalities $|b|\\le a\\le c$ and, in the boundary cases where $|b|=a$ or $a=c$, it additionally satisfies $b\\ge 0$. As a foundational fact, the discriminant of any integral binary quadratic form satisfies $D\\equiv 0$ or $D\\equiv 1\\pmod{4}$.\n\nUsing these core definitions and facts, design and implement an algorithm that, given a negative discriminant $D0$, lists all reduced positive definite binary quadratic forms of discriminant $D$. Your algorithm must rely on the bound $a\\le \\sqrt{|D|/3}$, derived from the reduction inequalities together with $D=b^2-4ac0$, to ensure a finite search over $a$. The algorithm must:\n- Reject $D$ that do not satisfy $D\\equiv 0$ or $D\\equiv 1\\pmod{4}$ by returning an empty list for such $D$.\n- Enumerate all integer triples $(a,b,c)$ with $a0$ satisfying $D=b^2-4ac$, the strict inequality $-ab\\le a$, the inequality $a\\le c$, and the boundary sign condition that if $|b|=a$ or $a=c$ then $b\\ge 0$. Only triples that simultaneously satisfy all these conditions are to be included.\n- Use the bound $a\\le \\sqrt{|D|/3}$ to limit the $a$-search.\n- For each valid $(a,b,c)$, include the reduced form $[a,b,c]$ exactly once.\n\nYour program must evaluate the following test suite of discriminants:\n- $D_1=-3$\n- $D_2=-4$\n- $D_3=-23$\n- $D_4=-20$\n- $D_5=-15$\n- $D_6=-14$\n\nThe answer for each $D_i$ must be a list of lists of integers, each inner list representing a reduced form $[a,b,c]$. Collect the results for all test cases into a single output line. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with each test case result in the same list format and with no spaces. For example, a valid output format is $[[[a_1,b_1,c_1],\\dots],[\\dots],\\dots]$ with no spaces anywhere in the line.", "solution": "The problem as stated is formally sound and constitutes a well-posed question within the mathematical discipline of number theory. All definitions, constraints, and objectives are provided with sufficient clarity and are internally consistent. The problem is grounded in the standard theory of binary quadratic forms, and the proposed algorithmic constraints, including the bound on the coefficient $a$, are correct deductions from the foundational principles. Therefore, I will proceed with a complete solution.\n\nThe objective is to enumerate all reduced positive definite binary quadratic forms $f(x,y) = ax^2 + bxy + cy^2$ for a given negative discriminant $D = b^2 - 4ac  0$. The coefficients $a$, $b$, and $c$ are integers.\n\nA binary quadratic form is defined as positive definite if its discriminant $D  0$ and the leading coefficient $a  0$. Such a form is considered reduced if it satisfies the inequalities $|b| \\le a \\le c$. An additional boundary condition is imposed: if $|b|=a$ or if $a=c$, then the coefficient $b$ must be non-negative, i.e., $b \\ge 0$.\n\nA fundamental property of the discriminant of any integral binary quadratic form is that it must be congruent to $0$ or $1$ modulo $4$. That is, $D \\equiv 0 \\pmod{4}$ or $D \\equiv 1 \\pmod{4}$. Any integer $D$ that does not satisfy this condition cannot be the discriminant of such a form.\n\nThe algorithm to find all reduced forms of a given discriminant $D$ leverages these definitions and properties to construct a finite search.\n\n**Algorithmic Procedure**\n\n1.  **Discriminant Validity Check:** The first step is to validate the input discriminant $D$. If $D$ does not satisfy the congruence $D \\equiv 0 \\pmod{4}$ or $D \\equiv 1 \\pmod{4}$, no integral forms of discriminant $D$ exist. In this case, the set of reduced forms is empty.\n\n2.  **Establish Search Bounds:** For a reduced positive definite form, the coefficients are constrained by the inequalities $|b| \\le a \\le c$. We can use this to derive a bound on the coefficient $a$. The discriminant is $D = b^2 - 4ac$. Since the form is positive definite, $D  0$. Let $|D| = -D$. The discriminant equation can be written as $4ac = b^2 + |D|$.\n    From the reduction conditions, we have $b^2 \\le a^2$ and $c \\ge a$. Substituting these into the discriminant relation yields:\n    $$4a^2 \\le 4ac = b^2 + |D| \\le a^2 + |D|$$\n    This implies $3a^2 \\le |D|$, which gives $a^2 \\le |D|/3$. Since $a  0$ for a positive definite form, we obtain a crucial upper bound for the search on $a$:\n    $$a \\le \\sqrt{\\frac{|D|}{3}}$$\n    This inequality guarantees that the search for the coefficient $a$ is finite.\n\n3.  **Systematic Enumeration:** The algorithm proceeds by iterating through all possible integer values for $a$ and $b$ that satisfy the reduction conditions and the derived bound.\n    - **Loop over $a$:** We iterate through all integers $a$ starting from $1$ up to $\\lfloor\\sqrt{|D|/3}\\rfloor$.\n    - **Loop over $b$:** For each value of $a$, we iterate through possible integer values of $b$. The problem statement specifies the range $-a  b \\le a$. This range is equivalent to the condition $|b| \\le a$, with the specific exclusion of $b = -a$ (for $a0$). This is correct, as the boundary condition for a reduced form states that if $|b| = a$, then $b \\ge 0$. Since $a0$, this forces $b=a$, thereby excluding $b=-a$.\n\n4.  **Determine $c$ and Verify:** For each pair $(a, b)$ found in the loops, the coefficient $c$ is determined by the discriminant formula:\n    $$4ac = b^2 - D \\implies c = \\frac{b^2 - D}{4a}$$\n    For $c$ to be an integer, the numerator $b^2 - D$ must be an integer multiple of $4a$. If this condition is met, we obtain an integer triple $(a, b, c)$.\n\n5.  **Final Reduction Checks:** This triple $(a, b, c)$ must be checked against the remaining reduction conditions:\n    - $a \\le c$: The calculated value of $c$ must be greater than or equal to $a$.\n    - **Boundary Condition:** The condition \"if $|b|=a$ or $a=c$, then $b \\ge 0$\" must be satisfied. As established, the loop for $b$ from $-a+1$ to $a$ automatically handles the case $|b|=a$. Thus, we only need to verify the condition for the case $a=c$: if $a=c$, then we must have $b \\ge 0$.\n\nAny triple $(a, b, c)$ that is generated and passes all these checks corresponds to a unique reduced positive definite binary quadratic form of discriminant $D$. The algorithm collects all such triples.\n\n**Example Walkthrough: $D = -20$**\n\n1.  **Validity:** $D = -20 \\equiv 0 \\pmod{4}$. Valid.\n2.  **Bounds:** $|D| = 20$. The search bound for $a$ is $a \\le \\sqrt{20/3} \\approx 2.58$, so we search for $a \\in \\{1, 2\\}$.\n3.  **Enumeration:**\n    - For $a=1$:\n        - We iterate $b$ in the range $-1  b \\le 1$, so $b \\in \\{0, 1\\}$.\n        - If $b=0$: $c = \\frac{0^2 - (-20)}{4(1)} = 5$. We have the triple $(1, 0, 5)$.\n            - Check: $a \\le c$ ($1 \\le 5$) is true. The boundary cases $|b|=a$ and $a=c$ do not apply. This is a reduced form.\n        - If $b=1$: $1^2 - (-20) = 21$, which is not divisible by $4a=4$. No integer $c$.\n    - For $a=2$:\n        - We iterate $b$ in the range $-2  b \\le 2$, so $b \\in \\{-1, 0, 1, 2\\}$.\n        - If $b=-1, 0, 1$: The numerator $b^2 - (-20)$ is $21, 20, 21$ respectively. None are divisible by $4a=8$. No integer $c$.\n        - If $b=2$: $c = \\frac{2^2 - (-20)}{4(2)} = \\frac{24}{8} = 3$. We have the triple $(2, 2, 3)$.\n            - Check: $a \\le c$ ($2 \\le 3$) is true. The boundary case $|b|=a$ applies ($|2|=2$). The condition $b \\ge 0$ is met ($2 \\ge 0$). This is a reduced form.\n\nThe set of reduced forms for $D=-20$ is thus $\\{[1,0,5], [2,2,3]\\}$. This procedure is applied to all test cases to generate the final output.", "answer": "```python\nimport numpy as np\n\ndef find_reduced_forms(D: int) - list[list[int]]:\n    \"\"\"\n    Calculates all reduced positive definite binary quadratic forms for a given discriminant D.\n\n    Args:\n        D: A negative integer discriminant.\n\n    Returns:\n        A list of lists, where each inner list [a, b, c] represents a\n        reduced form. Returns an empty list if D is not a valid discriminant.\n    \"\"\"\n    # Step 1: Validate the discriminant. D must be negative and congruent to 0 or 1 mod 4.\n    if D = 0 or (D % 4 != 0 and D % 4 != 1):\n        return []\n\n    reduced_forms = []\n    abs_D = -D\n    \n    # Step 2: Establish the search bound for 'a'.\n    a_max = int(np.sqrt(abs_D / 3.0))\n\n    # Step 3: Iterate through possible values of a and b.\n    # Loop over a from 1 up to the calculated max.\n    for a in range(1, a_max + 1):\n        # Loop over b from -a  b = a, which is range(-a + 1, a + 1).\n        # This range for b ensures that if |b|=a, then b=a  0, satisfying one\n        # of the boundary conditions automatically.\n        for b in range(-a + 1, a + 1):\n            \n            # Step 4: Determine c and check for integer divisibility.\n            # From D = b^2 - 4ac, we have 4ac = b^2 - D.\n            numerator = b**2 - D\n            denominator = 4 * a\n            \n            if numerator % denominator == 0:\n                c = numerator // denominator\n                \n                # Step 5: Check the remaining reduction conditions.\n                # The conditions are |b| = a = c and boundary conditions.\n                # The loops for a and b already ensure |b| = a.\n                \n                # Condition 1: a = c\n                cond1_a_le_c = (a = c)\n                \n                # Condition 2: Boundary condition check\n                # If a=c, we must have b = 0. The case |b|=a is handled by the b-loop range.\n                cond2_boundary = (a != c or b = 0)\n                \n                if cond1_a_le_c and cond2_boundary:\n                    reduced_forms.append([a, b, c])\n                        \n    return reduced_forms\n\ndef solve():\n    \"\"\"\n    Solves the problem for the given test suite of discriminants and\n    prints the result in the specified format.\n    \"\"\"\n    test_cases = [\n        -3,\n        -4,\n        -23,\n        -20,\n        -15,\n        -14,\n    ]\n\n    all_results = []\n    for D in test_cases:\n        result = find_reduced_forms(D)\n        all_results.append(result)\n\n    # Format the final output string as per problem specification:\n    # A single line, comma-separated, enclosed in brackets, with no spaces.\n    # Example: [[[1,1,1]],[[1,0,1]],[],...]\n    output_str = '[' + ','.join([str(res).replace(' ', '') for res in all_results]) + ']'\n    print(output_str)\n\nsolve()\n```", "id": "3082340"}, {"introduction": "Beyond simple classification, some quadratic forms exhibit special symmetries, which are captured mathematically by their automorphism groups. This exercise challenges you to determine these finite groups for the principal forms of discriminants $D=-3$ and $D=-4$ by solving the underlying algebraic equations that define invariance [@problem_id:3082299]. Calculating these automorphism groups offers a deeper insight into the unique geometric structure of these specific forms and their connections to units in quadratic number fields.", "problem": "Let $Q(x,y)=ax^2+bxy+cy^2$ be a binary quadratic form with integer coefficients and discriminant $D=b^2-4ac$. For negative discriminant $D$, a form is positive definite. The principal form in each discriminant class is the reduced form with $a=1$ and minimal $b$ consistent with $D$.\n\nDefine the automorphism group of the form $[a,b,c]$ as\n$$\\mathrm{Aut}(Q)=\\left\\{M\\in \\mathrm{SL}_{2}(\\mathbb{Z})\\mid Q(M\\cdot(x,y))=Q(x,y)\\text{ for all }(x,y)\\in\\mathbb{Z}^2\\right\\},$$\nwhere $\\mathrm{SL}_{2}(\\mathbb{Z})$ denotes the Special Linear Group of degree $2$ over the integers (the group of $2\\times 2$ integer matrices with determinant $1$).\n\nConsider the principal forms for $D=-3$ and $D=-4$:\n- For $D=-3$, the principal form is $Q_{-3}(x,y)=x^2+xy+y^2$.\n- For $D=-4$, the principal form is $Q_{-4}(x,y)=x^2+y^2$.\n\nStarting only from the definitions above and fundamental properties of positive definite binary quadratic forms (such as finiteness of the automorphism group), determine $\\mathrm{Aut}(Q_{-3})$ and $\\mathrm{Aut}(Q_{-4})$ as subgroups of $\\mathrm{SL}_{2}(\\mathbb{Z})$ by exhibiting explicit generators and systematically ruling out any additional orientation-preserving automorphisms. Then, as your final calculation, report the order of $\\mathrm{Aut}(Q_{-3})$ and of $\\mathrm{Aut}(Q_{-4})$.\n\nProvide your final answer as the pair of group orders for $D=-3$ and $D=-4$ written as a row matrix. No rounding is required.", "solution": "The problem requires the determination of the automorphism groups $\\mathrm{Aut}(Q_{-3})$ and $\\mathrm{Aut}(Q_{-4})$ for the principal binary quadratic forms $Q_{-3}(x,y)=x^2+xy+y^2$ and $Q_{-4}(x,y)=x^2+y^2$, respectively. The automorphism group $\\mathrm{Aut}(Q)$ consists of all matrices $M \\in \\mathrm{SL}_{2}(\\mathbb{Z})$ that leave the form $Q$ invariant. Let $M = \\begin{pmatrix} p  q \\\\ r  s \\end{pmatrix}$ be a matrix in $\\mathrm{SL}_{2}(\\mathbb{Z})$, which means $p, q, r, s \\in \\mathbb{Z}$ and the determinant $ps - qr = 1$. The action of $M$ on a vector $(x,y)$ transforms it to $(x', y') = (px+qy, rx+sy)$. The condition for $M$ to be in $\\mathrm{Aut}(Q)$ is $Q(x', y') = Q(x,y)$ for all integers $x, y$. This polynomial identity implies that the coefficients of the respective powers of $x$ and $y$ must be identical.\n\n**Part 1: Determination of $\\mathrm{Aut}(Q_{-4})$**\n\nThe form is $Q_{-4}(x,y) = x^2+y^2$. The invariance condition is:\n$$Q_{-4}(px+qy, rx+sy) = (px+qy)^2 + (rx+sy)^2 = x^2+y^2$$\nExpanding the left-hand side, we get:\n$$(p^2x^2 + 2pqxy + q^2y^2) + (r^2x^2 + 2rsxy + s^2y^2) = x^2+y^2$$\nCollecting terms by powers of $x$ and $y$:\n$$(p^2+r^2)x^2 + (2pq+2rs)xy + (q^2+s^2)y^2 = 1 \\cdot x^2 + 0 \\cdot xy + 1 \\cdot y^2$$\nEquating the coefficients of $x^2$, $xy$, and $y^2$ yields a system of equations for the integers $p, q, r, s$:\n1. $p^2+r^2 = 1$\n2. $2pq+2rs = 0 \\implies pq+rs = 0$\n3. $q^2+s^2 = 1$\n\nFrom equation (1), since $p, r$ are integers, the only possible solutions are $(p,r) \\in \\{(1,0), (-1,0), (0,1), (0,-1)\\}$.\nSimilarly, from equation (3), the only possible solutions for $(q,s)$ are $(q,s) \\in \\{(1,0), (-1,0), (0,1), (0,-1)\\}$.\n\nWe test the possibilities systematically, subject to the constraints $pq+rs=0$ and $ps-qr=1$.\n\nCase A: $p=1, r=0$.\nFrom $pq+rs=0$, we have $q=0$. Then from $q^2+s^2=1$, we get $s^2=1$, so $s=\\pm 1$.\nThe determinant condition $ps-qr=1$ becomes $(1)s - (0)(0) = s = 1$. Thus, $s=1$.\nThis gives the matrix $M_{1} = \\begin{pmatrix} 1  0 \\\\ 0  1 \\end{pmatrix} = I$.\n\nCase B: $p=-1, r=0$.\nFrom $pq+rs=0$, we have $-q=0$, so $q=0$. Then $q^2+s^2=1$ implies $s^2=1$, so $s=\\pm 1$.\nThe determinant condition $ps-qr=1$ becomes $(-1)s - (0)(0) = -s = 1$. Thus, $s=-1$.\nThis gives the matrix $M_{2} = \\begin{pmatrix} -1  0 \\\\ 0  -1 \\end{pmatrix} = -I$.\n\nCase C: $p=0, r=1$.\nFrom $pq+rs=0$, we have $s=0$. Then $q^2+s^2=1$ implies $q^2=1$, so $q=\\pm 1$.\nThe determinant condition $ps-qr=1$ becomes $(0)(0) - q(1) = -q = 1$. Thus, $q=-1$.\nThis gives the matrix $M_{3} = \\begin{pmatrix} 0  -1 \\\\ 1  0 \\end{pmatrix}$.\n\nCase D: $p=0, r=-1$.\nFrom $pq+rs=0$, we have $-s=0$, so $s=0$. Then $q^2+s^2=1$ implies $q^2=1$, so $q=\\pm 1$.\nThe determinant condition $ps-qr=1$ becomes $(0)(0) - q(-1) = q = 1$. Thus, $q=1$.\nThis gives the matrix $M_{4} = \\begin{pmatrix} 0  1 \\\\ -1  0 \\end{pmatrix}$.\n\nNo other combinations for $(p,r)$ are possible. The four matrices found are:\n$$I = \\begin{pmatrix} 1  0 \\\\ 0  1 \\end{pmatrix}, \\quad -I = \\begin{pmatrix} -1  0 \\\\ 0  -1 \\end{pmatrix}, \\quad S = \\begin{pmatrix} 0  -1 \\\\ 1  0 \\end{pmatrix}, \\quad S^{-1} = \\begin{pmatrix} 0  1 \\\\ -1  0 \\end{pmatrix}$$\nLet's check the group structure with the generator $S=M_3$.\n$S^2 = \\begin{pmatrix} 0  -1 \\\\ 1  0 \\end{pmatrix} \\begin{pmatrix} 0  -1 \\\\ 1  0 \\end{pmatrix} = \\begin{pmatrix} -1  0 \\\\ 0  -1 \\end{pmatrix} = -I$.\n$S^3 = S \\cdot S^2 = \\begin{pmatrix} 0  -1 \\\\ 1  0 \\end{pmatrix} \\begin{pmatrix} -1  0 \\\\ 0  -1 \\end{pmatrix} = \\begin{pmatrix} 0  1 \\\\ -1  0 \\end{pmatrix} = S^{-1}$.\n$S^4 = (S^2)^2 = (-I)^2 = I$.\nThe group $\\mathrm{Aut}(Q_{-4})$ is a cyclic group of order $4$, generated by $S$. The order is $|\\mathrm{Aut}(Q_{-4})| = 4$.\n\n**Part 2: Determination of $\\mathrm{Aut}(Q_{-3})$**\n\nThe form is $Q_{-3}(x,y) = x^2+xy+y^2$. The invariance condition is:\n$$Q_{-3}(px+qy, rx+sy) = (px+qy)^2 + (px+qy)(rx+sy) + (rx+sy)^2 = x^2+xy+y^2$$\nExpanding the left-hand side and collecting terms:\n$$(p^2+pr+r^2)x^2 + (2pq+ps+qr+2rs)xy + (q^2+qs+s^2)y^2 = 1 \\cdot x^2 + 1 \\cdot xy + 1 \\cdot y^2$$\nThis gives the following system of equations:\n1. $p^2+pr+r^2 = 1$\n2. $q^2+qs+s^2 = 1$\n3. $2pq+ps+qr+2rs = 1$\n\nWe use the determinant condition $ps-qr=1$. Substituting $ps = 1+qr$ into equation (3):\n$2pq+(1+qr)+qr+2rs = 1 \\implies 2pq+2qr+2rs+1=1 \\implies pq+qr+rs=0$.\nSo the system for the integers $p,q,r,s$ is:\n(A) $p^2+pr+r^2=1$\n(B) $q^2+qs+s^2=1$\n(C) $pq+qr+rs=0$\n(D) $ps-qr=1$\n\nFrom equation (A), viewing it as a quadratic in $p$, $p = \\frac{-r \\pm \\sqrt{r^2-4(r^2-1)}}{2} = \\frac{-r \\pm \\sqrt{4-3r^2}}{2}$. For $p$ to be an integer, $4-3r^2$ must be a perfect square and non-negative. This implies $r^2 \\le 4/3$, so $r \\in \\{-1, 0, 1\\}$.\nIf $r=0$, $p^2=1 \\implies p=\\pm1$.\nIf $r=1$, $p^2+p=0 \\implies p(p+1)=0 \\implies p=0$ or $p=-1$.\nIf $r=-1$, $p^2-p=0 \\implies p(p-1)=0 \\implies p=0$ or $p=1$.\nThe possible pairs $(p,r)$ are: $(1,0), (-1,0), (0,1), (0,-1), (1,-1), (-1,1)$.\nSimilarly, the possible pairs for $(q,s)$ from (B) are $(1,0), (-1,0), (0,1), (0,-1), (1,-1), (-1,1)$.\n\nWe now test these pairs against (C) and (D).\nCase 1: $(p,r)=(1,0)$. (D) gives $s=1$. (C) gives $q=0$. This implies $(q,s)=(0,1)$, which satisfies (B). Matrix: $\\begin{pmatrix} 1  0 \\\\ 0  1 \\end{pmatrix} = I$.\nCase 2: $(p,r)=(-1,0)$. (D) gives $-s=1 \\implies s=-1$. (C) gives $-q=0 \\implies q=0$. This implies $(q,s)=(0,-1)$, which satisfies (B). Matrix: $\\begin{pmatrix} -1  0 \\\\ 0  -1 \\end{pmatrix} = -I$.\nCase 3: $(p,r)=(0,1)$. (D) gives $-q=1 \\implies q=-1$. (C) gives $q+s=0 \\implies s=-q=1$. This implies $(q,s)=(-1,1)$, which satisfies (B) since $(-1)^2+(-1)(1)+1^2=1$. Matrix: $\\begin{pmatrix} 0  -1 \\\\ 1  1 \\end{pmatrix}$.\nCase 4: $(p,r)=(0,-1)$. (D) gives $q=1$. (C) gives $-q-s=0 \\implies s=-q=-1$. This implies $(q,s)=(1,-1)$, which satisfies (B). Matrix: $\\begin{pmatrix} 0  1 \\\\ -1  -1 \\end{pmatrix}$.\nCase 5: $(p,r)=(1,-1)$. (D) gives $s+q=1$. (C) gives $q-q-s=0 \\implies s=0$. Then $q=1$. This implies $(q,s)=(1,0)$, which satisfies (B). Matrix: $\\begin{pmatrix} 1  1 \\\\ -1  0 \\end{pmatrix}$.\nCase 6: $(p,r)=(-1,1)$. (D) gives $-s-q=1$. (C) gives $-q+q+s=0 \\implies s=0$. Then $q=-1$. This implies $(q,s)=(-1,0)$, which satisfies (B). Matrix: $\\begin{pmatrix} -1  -1 \\\\ 1  0 \\end{pmatrix}$.\n\nThese are the 6 unique matrices in $\\mathrm{Aut}(Q_{-3})$. Let $T = \\begin{pmatrix} 0  -1 \\\\ 1  1 \\end{pmatrix}$. We compute its powers:\n$T^1 = \\begin{pmatrix} 0  -1 \\\\ 1  1 \\end{pmatrix}$\n$T^2 = \\begin{pmatrix} 0  -1 \\\\ 1  1 \\end{pmatrix}^2 = \\begin{pmatrix} -1  -1 \\\\ 1  0 \\end{pmatrix}$\n$T^3 = T \\cdot T^2 = \\begin{pmatrix} 0  -1 \\\\ 1  1 \\end{pmatrix} \\begin{pmatrix} -1  -1 \\\\ 1  0 \\end{pmatrix} = \\begin{pmatrix} -1  0 \\\\ 0  -1 \\end{pmatrix} = -I$\n$T^4 = T \\cdot T^3 = \\begin{pmatrix} 0  -1 \\\\ 1  1 \\end{pmatrix} (-I) = \\begin{pmatrix} 0  1 \\\\ -1  -1 \\end{pmatrix}$\n$T^5 = T^2 \\cdot T^3 = \\begin{pmatrix} -1  -1 \\\\ 1  0 \\end{pmatrix} (-I) = \\begin{pmatrix} 1  1 \\\\ -1  0 \\end{pmatrix}$\n$T^6 = (T^3)^2 = (-I)^2 = I$\nAll 6 matrices are powers of $T$. Thus, $\\mathrm{Aut}(Q_{-3})$ is a cyclic group of order $6$, generated by $T$. The order is $|\\mathrm{Aut}(Q_{-3})| = 6$.\n\nThe final answer requires the order of $\\mathrm{Aut}(Q_{-3})$ and of $\\mathrm{Aut}(Q_{-4})$.\nOrder of $\\mathrm{Aut}(Q_{-3})$ is $6$.\nOrder of $\\mathrm{Aut}(Q_{-4})$ is $4$.\nThe problem asks for the pair of group orders for $D=-3$ and $D=-4$.", "answer": "$$\n\\boxed{\n\\begin{pmatrix} 6  4 \\end{pmatrix}\n}\n$$", "id": "3082299"}, {"introduction": "A central question in the theory of quadratic forms is determining which integers can be represented by a given form. This computational exercise delves into this question by tasking you with comparing the sets of integers represented by different forms sharing the same discriminant [@problem_id:3082328]. By observing which numbers are produced by each form, you will uncover empirical evidence for the powerful idea that distinct equivalence classes represent distinct sets of prime numbers, a cornerstone of class field theory.", "problem": "Let $f(x,y)=ax^2+bxy+cy^2$ be a primitive positive definite binary quadratic form with integer coefficients $a$, $b$, and $c$. The discriminant is $D=b^2-4ac$. Two forms are properly equivalent if one can be obtained from the other by an element of the special linear group $\\mathrm{SL}_{2}(\\mathbb{Z})$ acting on the variables. A form is reduced if it is properly equivalent to a form satisfying $|b|\\le a\\le c$, and if either $|b|=a$ or $a=c$ then $b\\ge 0$. The principal form is the unique reduced form in the principal class (the identity element of the class group). A positive integer $n$ is said to be properly represented by $f$ if there exist integers $x$ and $y$ with $\\gcd(x,y)=1$ and $f(x,y)=n$. In this problem, work with discriminant $D=-20$.\n\nStarting from the core definitions above (binary quadratic form, discriminant, proper equivalence, reduced form, and proper representation), carry out the following:\n\n1. Determine all reduced primitive positive definite forms of discriminant $D=-20$, and identify the principal form among them.\n\n2. For the principal form $f_1$ of discriminant $D=-20$ and for one other reduced form $f_2$ of the same discriminant, compute, for each bound $N\\in\\{30,50,100\\}$, the following sets of positive integers:\n   - $S_1(N)=\\{\\,n\\in\\mathbb{Z}_{0}\\mid n\\le N,\\ \\exists x,y\\in\\mathbb{Z},\\ \\gcd(x,y)=1,\\ f_1(x,y)=n\\,\\}$.\n   - $S_2(N)=\\{\\,n\\in\\mathbb{Z}_{0}\\mid n\\le N,\\ \\exists x,y\\in\\mathbb{Z},\\ \\gcd(x,y)=1,\\ f_2(x,y)=n\\,\\}$.\n   - $I(N)=S_1(N)\\cap S_2(N)$.\n   - $A_1(N)=S_1(N)\\setminus S_2(N)$.\n   - $A_2(N)=S_2(N)\\setminus S_1(N)$.\n\n3. Your program must compute these sets using only first-principles logic derived from the definitions. Specifically, use the positivity of the form and the inequality $f(x,y)\\le N$ to bound the integer search over $(x,y)$. You may use the fact that for fixed $y$, the values of $x$ satisfying $f(x,y)\\le N$ solve a quadratic inequality in $x$, and that for fixed $y$ the minimum of $f(x,y)$ as a function of $x$ occurs at $x=-\\frac{by}{2a}$ with value $\\frac{-D}{4a}\\,y^2$, to deduce a bound on $|y|$. No other prepackaged results about representation are allowed.\n\n4. Test suite and required outputs:\n   - Use the two reduced forms you found in step $1$ and take the principal form as $f_1$ and the other reduced form as $f_2$.\n   - Use the bounds $N=30$, $N=50$, and $N=100$.\n   - For $N=30$ and $N=50$, output summaries consisting of integer counts in the order $[\\ |S_1(N)|,\\ |S_2(N)|,\\ |I(N)|,\\ |A_1(N)|,\\ |A_2(N)|\\ ]$.\n   - For $N=100$, output the detailed sorted lists in the order $[\\ S_1(100),\\ S_2(100),\\ I(100),\\ A_1(100),\\ A_2(100)\\ ]$.\n   - Final output format: Your program should produce a single line of output containing a list of three items, namely the two count summaries for $N=30$ and $N=50$, followed by the detailed lists for $N=100$. Precisely, the line must be of the form\n     $$\n     [\\ [c_{1,30},c_{2,30},c_{I,30},c_{A_{1},30},c_{A_{2},30}],\\ [c_{1,50},c_{2,50},c_{I,50},c_{A_{1},50},c_{A_{2},50}],\\ [\\ S_1(100),\\ S_2(100),\\ I(100),\\ A_1(100),\\ A_2(100)\\ ]\\ ].\n     $$\n   There are no physical units or angles involved.\n\nYour final answer must be a complete, runnable program as specified below that prints exactly one line in the format described above. The answers must be expressed as integers or lists of integers as indicated, with each list sorted in increasing order and without duplicates.", "solution": "We begin from the definitions of a binary quadratic form, discriminant, reduced form, and proper representation. Let $f(x,y)=ax^2+bxy+cy^2$ be a primitive positive definite form, so $a0$, $c0$, and $D=b^2-4ac0$. The reduced condition for $D0$ is $|b|\\le a\\le c$ and, if either $|b|=a$ or $a=c$, then $b\\ge 0$. Proper representation of a positive integer $n$ by $f$ means there exist integers $x$ and $y$ with $\\gcd(x,y)=1$ such that $f(x,y)=n$.\n\nStep $1$: Find reduced forms of discriminant $D=-20$ and identify the principal form.\n\nWe solve $b^2-4ac=-20$ under the reduced constraints. Because $D\\equiv 0\\pmod{4}$, the coefficient $b$ must be even. We inspect small even $b$ and integer pairs $(a,c)$.\n\n- Case $b=0$: Then $-4ac=-20$, hence $ac=5$. With $a\\le c$ and $a0$, we obtain $(a,c)=(1,5)$. The form is $(a,b,c)=(1,0,5)$. It satisfies $|b|=0\\le a=1\\le c=5$ and is reduced. This is the principal form, because it has $a=1$ in the reduced list.\n\n- Case $b=\\pm 2$: Then $4-4ac=-20$, hence $4ac=24$ and $ac=6$. Considering $a\\le c$ and $|b|\\le a$, we take $(a,c)=(2,3)$. The reduced condition when $|b|=a$ requires $b\\ge 0$, hence $(a,b,c)=(2,2,3)$ is reduced and primitive.\n\n- Case $|b|\\ge 4$: For $b=\\pm 4$, we get $16-4ac=-20$, hence $ac=9$. The constraint $|b|\\le a$ forces $a\\ge 4$, but the factorization $ac=9$ with $a\\le c$ gives no solution with $a\\ge 4$. Larger $|b|$ give no solutions with $a\\le c$.\n\nTherefore, the reduced primitive positive definite forms of discriminant $D=-20$ are exactly $(1,0,5)$ and $(2,2,3)$, of which $(1,0,5)$ is the principal form.\n\nStep $2$: Represented sets up to a bound $N$ for two forms.\n\nLet $f_1(x,y)=x^2+5y^2$ and $f_2(x,y)=2x^2+2xy+3y^2$. For a given $N$, we define\n- $S_1(N)=\\{\\,n\\le N:\\exists x,y\\in\\mathbb{Z},\\ \\gcd(x,y)=1,\\ f_1(x,y)=n\\,\\}$,\n- $S_2(N)=\\{\\,n\\le N:\\exists x,y\\in\\mathbb{Z},\\ \\gcd(x,y)=1,\\ f_2(x,y)=n\\,\\}$,\nand the comparison sets $I(N)=S_1(N)\\cap S_2(N)$, $A_1(N)=S_1(N)\\setminus S_2(N)$, $A_2(N)=S_2(N)\\setminus S_1(N)$.\n\nStep $3$: Algorithm derived from first principles.\n\nFor fixed $y$, the form $f(x,y)$ is a quadratic function of $x$. The inequality $f(x,y)\\le N$ constrains $x$ to lie between the real roots of $ax^2+bxy+cy^2-N\\le 0$, provided the discriminant in $x$ is nonnegative. The discriminant in $x$ is\n$$\n\\Delta_x(y)=b^2y^2-4a(cy^2-N)=-Dy^2+4aN0,\n$$\nsince $D0$. Therefore, the allowed integer $x$ satisfy\n$$\n\\frac{-by-\\sqrt{\\Delta_x(y)}}{2a}\\le x\\le \\frac{-by+\\sqrt{\\Delta_x(y)}}{2a}.\n$$\nBecause $x$ must be an integer, it suffices to use the integer bound with $\\lfloor \\sqrt{\\Delta_x(y)}\\rfloor$, which is exact at the integer level:\n$$\nx_{\\min}(y)=\\left\\lceil\\frac{-by-\\lfloor\\sqrt{\\Delta_x(y)}\\rfloor}{2a}\\right\\rceil,\\quad\nx_{\\max}(y)=\\left\\lfloor\\frac{-by+\\lfloor\\sqrt{\\Delta_x(y)}\\rfloor}{2a}\\right\\rfloor.\n$$\nFor fixed $y$, the minimal value of $f(x,y)$ as a function of $x$ occurs at $x^{*}=-\\frac{by}{2a}$ and equals\n$$\nf_{\\min}(y)=\\left(c-\\frac{b^2}{4a}\\right)y^2=\\frac{4ac-b^2}{4a}y^2=\\frac{-D}{4a}y^2.\n$$\nHence $f(x,y)\\le N$ for some $x$ implies $f_{\\min}(y)\\le N$, so\n$$\n|y|\\le \\sqrt{\\frac{4aN}{-D}}.\n$$\nThis yields a complete and finite search over $y$, and for each such $y$ a finite search over integer $x\\in[x_{\\min}(y),x_{\\max}(y)]$. For each integer pair $(x,y)$ encountered, we check $\\gcd(x,y)=1$ and $1\\le f(x,y)\\le N$, and collect $f(x,y)$ into a set. Finally we sort the resulting set.\n\nStep $4$: Applying to $D=-20$.\n\nWe take $f_1(x,y)=x^2+5y^2$ and $f_2(x,y)=2x^2+2xy+3y^2$. For each $N\\in\\{30,50,100\\}$, we compute $S_1(N)$ and $S_2(N)$ by the algorithm above, then form $I(N)$, $A_1(N)$, and $A_2(N)$, and produce the outputs in the required format.\n\nThe program implements exactly the bounding strategy derived above, including the bound $|y|\\le \\left\\lfloor \\sqrt{\\frac{4aN}{-D}}\\right\\rfloor$ and the integer interval for $x$ using $\\lfloor\\sqrt{\\Delta_x(y)}\\rfloor$. It then returns:\n- For $N=30$: $[\\,|S_1(30)|,\\ |S_2(30)|,\\ |I(30)|,\\ |A_1(30)|,\\ |A_2(30)|\\,]$.\n- For $N=50$: $[\\,|S_1(50)|,\\ |S_2(50)|,\\ |I(50)|,\\ |A_1(50)|,\\ |A_2(50)|\\,]$.\n- For $N=100$: $[\\,S_1(100),\\ S_2(100),\\ I(100),\\ A_1(100),\\ A_2(100)\\,]$ with each list sorted.\n\nBy direct computation (which the program performs), the reduced forms are $f_1(x,y)=x^2+5y^2$ (principal) and $f_2(x,y)=2x^2+2xy+3y^2$, and the resulting sets up to $N=100$ are disjoint with\n$$\nS_1(100)=\\{1,5,6,9,14,21,29,30,41,45,46,49,54,61,69,70,81,86,89,94\\},\n$$\n$$\nS_2(100)=\\{2,3,7,10,15,18,23,27,35,42,43,47,58,63,67,82,83,87,90,98\\}.\n$$\nThus $I(100)=\\varnothing$, $A_1(100)=S_1(100)$, and $A_2(100)=S_2(100)$. For $N=30$ and $N=50$, the corresponding counts computed by the same method are\n$$\n[\\,8,8,0,8,8\\,]\\ \\text{for}\\ N=30,\\quad [\\,12,12,0,12,12\\,]\\ \\text{for}\\ N=50.\n$$\nThe program prints these in the exact single-line format requested.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport math\nfrom typing import List, Tuple, Set\n\ndef integer_sqrt(n: int) - int:\n    \"\"\"Return floor(sqrt(n)) for n = 0.\"\"\"\n    if n  0:\n        raise ValueError(\"integer_sqrt domain error\")\n    return int(math.isqrt(n))\n\ndef ceil_div(a: int, b: int) - int:\n    \"\"\"Return ceil(a/b) for integers, b != 0.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    # Python's // is floor division; use identity ceil(a/b) = -floor((-a)/b)\n    return -(-a // b)\n\ndef reduced_forms_discriminant_neg(D: int) - List[Tuple[int,int,int]]:\n    \"\"\"\n    Enumerate reduced primitive positive definite binary quadratic forms (a,b,c)\n    of negative discriminant D (0), satisfying |b| = a = c and if |b|=a or a=c then b = 0.\n    Restrict to primitive forms gcd(a,b,c)=1.\n    \"\"\"\n    if D = 0:\n        raise ValueError(\"D must be negative\")\n    forms = []\n    # Standard bound for a in reduced positive definite case: 1 = a = sqrt(|D|/3)\n    a_max = int(math.floor(math.sqrt(abs(D) / 3))) + 5  # generous bound\n    for a in range(1, a_max + 1):\n        # b congruence: D == b^2 mod 4 implies b has parity of D\n        # For D even, b even; for D odd, b odd.\n        b_parity = D  1  # 0 if even, 1 if odd\n        # b ranges from -a to a\n        for b in range(-a, a + 1):\n            if (b  1) != b_parity:\n                continue\n            # compute c from discriminant equation: b^2 - 4ac = D - c = (b^2 - D) / (4a)\n            numer = b*b - D\n            denom = 4 * a\n            if numer % denom != 0:\n                continue\n            c = numer // denom\n            if a  c:\n                continue\n            # positive definite requires a  0 and c  0\n            if c = 0:\n                continue\n            # reduced tie-breaker: if |b| = a or a = c, then b = 0\n            if (abs(b) == a or a == c) and b  0:\n                continue\n            # primitive:\n            if math.gcd(a, math.gcd(b, c)) != 1:\n                continue\n            # verify discriminant exactly\n            if b*b - 4*a*c != D:\n                continue\n            forms.append((a,b,c))\n    # Sort canonically: by a, then by b, then by c\n    forms.sort()\n    return forms\n\ndef represented_set_up_to_N(a: int, b: int, c: int, D: int, N: int, proper: bool = True) - List[int]:\n    \"\"\"\n    Compute sorted list of positive integers n = N that are (properly) represented by f(x,y) = a x^2 + b x y + c y^2\n    with discriminant D = b^2 - 4ac (0). Proper means gcd(x,y)=1.\n    \"\"\"\n    if D != b*b - 4*a*c:\n        raise ValueError(\"Inconsistent discriminant\")\n    if N  1:\n        return []\n    # Bound on y from f_min(y) = (-D/(4a)) y^2 = N\n    # So |y| = sqrt(4 a N / (-D))\n    y_bound_sq = (4 * a * N) // (-D) if D  0 else 0\n    y_bound = int(math.floor(math.sqrt(y_bound_sq)))\n    represented: Set[int] = set()\n    two_a = 2 * a\n    for y in range(-y_bound, y_bound + 1):\n        # Discriminant in x for inequality f(x,y) = N\n        delta_x = -D * (y * y) + 4 * a * N  # guaranteed nonnegative\n        k = integer_sqrt(delta_x)\n        qmin = -b * y - k\n        qmax = -b * y + k\n        x_min = ceil_div(qmin, two_a)\n        x_max = qmax // two_a  # floor division\n        for x in range(x_min, x_max + 1):\n            if proper and math.gcd(x, y) != 1:\n                continue\n            n = a * x * x + b * x * y + c * y * y\n            if 1 = n = N:\n                represented.add(n)\n    return sorted(represented)\n\ndef solve():\n    # Discriminant and forms\n    D = -20\n    forms = reduced_forms_discriminant_neg(D)\n    # Identify principal form: the reduced form with a=1\n    principal_forms = [f for f in forms if f[0] == 1]\n    if not principal_forms:\n        raise RuntimeError(\"Principal form not found\")\n    f1 = principal_forms[0]  # principal: (1,0,5)\n    # Choose another reduced form distinct from principal\n    others = [f for f in forms if f != f1]\n    if not others:\n        raise RuntimeError(\"No other reduced form found\")\n    f2 = others[0]  # e.g., (2,2,3)\n\n    # Test suite bounds\n    test_Ns = [30, 50, 100]\n\n    results = []\n    for N in test_Ns:\n        S1 = represented_set_up_to_N(f1[0], f1[1], f1[2], D, N, proper=True)\n        S2 = represented_set_up_to_N(f2[0], f2[1], f2[2], D, N, proper=True)\n        set_S1 = set(S1)\n        set_S2 = set(S2)\n        I = sorted(set_S1.intersection(set_S2))\n        A1 = sorted(set_S1.difference(set_S2))\n        A2 = sorted(set_S2.difference(set_S1))\n        if N in (30, 50):\n            # summary counts\n            results.append([len(S1), len(S2), len(I), len(A1), len(A2)])\n        else:\n            # detailed lists for N=100\n            results.append([S1, S2, I, A1, A2])\n\n    # Final print statement in the exact required format.\n    print(f\"{results}\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "3082328"}]}