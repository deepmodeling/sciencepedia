{"hands_on_practices": [{"introduction": "Dirichlet's theorem on arithmetic progressions is a powerful statement about the distribution of prime numbers. Before we can explore its depths, we must first master its fundamental condition: the residue class must be relatively prime to the modulus. This exercise [@problem_id:3084158] provides direct practice in identifying the specific arithmetic progressions for a given modulus to which the theorem applies.", "problem": "Let $q$ be a positive integer modulus and consider arithmetic progressions of the form $qn+a$ with integer $n$ and residue $a$ modulo $q$. Dirichlet's theorem on arithmetic progressions asserts that if $\\gcd(a,q)=1$, where $\\gcd$ denotes the Greatest Common Divisor (GCD), then there are infinitely many primes in the progression $qn+a$. Using only the definitions of Euler's totient function $\\varphi(q)$ as the number of residues modulo $q$ that are relatively prime to $q$, and the notion of the reduced residue system modulo $q$, determine the following for the specific modulus $q=12$:\n\n1. Compute $\\varphi(12)$ from first principles by identifying the residues modulo $12$ that are relatively prime to $12$.\n2. Enumerate all residues $a$ with $0 \\le a \\le 11$ such that $\\gcd(a,12)=1$, which are precisely the classes eligible under Dirichletâ€™s theorem for modulus $12$.\n\nList the admissible residues in increasing order. Provide your final answer as a single row matrix whose first entry is $\\varphi(12)$, followed by the admissible residues in increasing order. No rounding is required, and no units are involved.", "solution": "The problem requires the determination of two quantities for the modulus $q=12$: first, the value of Euler's totient function, $\\varphi(12)$, and second, the explicit set of residues $a$ modulo $12$ that are relatively prime to $12$. These are the residues for which Dirichlet's theorem on arithmetic progressions guarantees that the sequence $12n+a$ contains infinitely many prime numbers.\n\nAccording to the definition provided, $\\varphi(q)$ is the number of residues modulo $q$ that are relatively prime to $q$. We are asked to compute this from first principles for $q=12$. The residues modulo $12$ are the integers in the set $\\{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\\}$. For each residue $a$ in this set, we must determine if it is relatively prime to $12$, i.e., if $\\gcd(a, 12) = 1$.\n\nAn integer is relatively prime to $12$ if and only if it shares no prime factors with $12$. The prime factorization of $12$ is $12 = 2^2 \\cdot 3$. Thus, an integer $a$ is relatively prime to $12$ if and only if $a$ is not divisible by $2$ and not divisible by $3$. We now systematically check each residue $a$ in the range $0 \\le a \\le 11$.\n\n1.  For $a=0$: $\\gcd(0, 12) = 12$. Since $12 \\ne 1$, $0$ is not relatively prime to $12$.\n2.  For $a=1$: $\\gcd(1, 12) = 1$. Thus, $1$ is relatively prime to $12$.\n3.  For $a=2$: $\\gcd(2, 12) = 2$. Since $2 \\ne 1$, $2$ is not relatively prime to $12$.\n4.  For $a=3$: $\\gcd(3, 12) = 3$. Since $3 \\ne 1$, $3$ is not relatively prime to $12$.\n5.  For $a=4$: $\\gcd(4, 12) = 4$. Since $4 \\ne 1$, $4$ is not relatively prime to $12$.\n6.  For $a=5$: $\\gcd(5, 12) = 1$. Thus, $5$ is relatively prime to $12$.\n7.  For $a=6$: $\\gcd(6, 12) = 6$. Since $6 \\ne 1$, $6$ is not relatively prime to $12$.\n8.  For $a=7$: $\\gcd(7, 12) = 1$. Thus, $7$ is relatively prime to $12$.\n9.  For $a=8$: $\\gcd(8, 12) = 4$. Since $4 \\ne 1$, $8$ is not relatively prime to $12$.\n10. For $a=9$: $\\gcd(9, 12) = 3$. Since $3 \\ne 1$, $9$ is not relatively prime to $12$.\n11. For $a=10$: $\\gcd(10, 12) = 2$. Since $2 \\ne 1$, $10$ is not relatively prime to $12$.\n12. For $a=11$: $\\gcd(11, 12) = 1$. Thus, $11$ is relatively prime to $12$.\n\nThe residues $a$ in the range $0 \\le a \\le 11$ that are relatively prime to $12$ are $\\{1, 5, 7, 11\\}$. This set is the reduced residue system modulo $12$.\n\nFor the first part of the problem, we compute $\\varphi(12)$ by counting the number of elements in this set.\n$$\n\\varphi(12) = |\\{1, 5, 7, 11\\}| = 4\n$$\n\nFor the second part of the problem, we enumerate these admissible residues in increasing order:\n$$\n1, 5, 7, 11\n$$\n\nThe final answer is required to be a single row matrix where the first entry is $\\varphi(12)$ and the subsequent entries are the admissible residues in increasing order. Combining our results, we get the value $\\varphi(12)=4$ and the residues $1, 5, 7, 11$. The resulting matrix is therefore composed of the elements $4, 1, 5, 7, 11$.", "answer": "$$\n\\boxed{\\begin{pmatrix} 4 & 1 & 5 & 7 & 11 \\end{pmatrix}}\n$$", "id": "3084158"}, {"introduction": "The proof of Dirichlet's theorem is a masterpiece of analytic number theory, introducing tools that can isolate specific arithmetic progressions from the sea of all integers. At the heart of this machinery lie the orthogonality relations for Dirichlet characters. This practice problem [@problem_id:3084154] allows you to compute a character sum and directly witness the \"sifting\" power of orthogonality, a key step in counting primes within a single progression.", "problem": "Let $q=5$. A Dirichlet character modulo $q$ is a completely multiplicative function $\\chi:\\mathbb{Z}\\to\\mathbb{C}$ that is periodic modulo $q$, satisfies $\\chi(n)=0$ whenever $\\gcd(n,q)>1$, and restricts to a group homomorphism from $\\left(\\mathbb{Z}/q\\mathbb{Z}\\right)^{\\times}$ into $\\mathbb{C}^{\\times}$. There are exactly $\\varphi(q)$ such characters modulo $q$, where $\\varphi$ denotes Euler's totient function, and they form a finite abelian group under pointwise multiplication. The orthogonality of characters on finite abelian groups underlies the proof of Dirichlet's theorem on arithmetic progressions, by allowing one to isolate residue classes modulo $q$.\n\nCompute the exact value of\n$$\nS \\;=\\; \\sum_{\\chi \\bmod 5} \\chi(2),\n$$\nwhere the sum ranges over all Dirichlet characters modulo $5$ (including the principal character). Then briefly interpret your computation in terms of the orthogonality of characters and its role in isolating the residue class $1 \\bmod 5$. Your final answer must be a single exact number; no rounding is required.", "solution": "The problem statement is valid. It is a well-defined question in number theory, grounded in the standard theory of Dirichlet characters, and contains all necessary information for a unique solution.\n\nThe problem asks for the computation of the sum\n$$\nS \\;=\\; \\sum_{\\chi \\bmod 5} \\chi(2)\n$$\nwhere the sum traverses all Dirichlet characters modulo $q=5$.\n\nA Dirichlet character $\\chi$ modulo an integer $q$ can be viewed as a character of the finite abelian group $G = \\left(\\mathbb{Z}/q\\mathbb{Z}\\right)^{\\times}$, the multiplicative group of integers modulo $q$. The elements of this group are the residue classes $n \\pmod q$ such that $\\gcd(n,q)=1$. The order of this group is given by Euler's totient function, $|G| = \\varphi(q)$.\n\nFor the given modulus $q=5$, the group is $G = \\left(\\mathbb{Z}/5\\mathbb{Z}\\right)^{\\times}$. Since $5$ is a prime number, the group consists of the residue classes $\\{1, 2, 3, 4\\} \\pmod 5$. The order of the group is $|G| = \\varphi(5) = 5-1=4$.\n\nThe set of characters $\\hat{G}$ of a finite abelian group $G$ possesses a fundamental property known as the orthogonality relations. The first orthogonality relation concerns the sum of the values of all characters evaluated at a single group element $a \\in G$:\n$$\n\\sum_{\\chi \\in \\hat{G}} \\chi(a) =\n\\begin{cases}\n|G| & \\text{if } a = e \\\\\n0 & \\text{if } a \\neq e\n\\end{cases}\n$$\nHere, $e$ denotes the identity element of the group $G$.\n\nIn our specific problem, the group is $G = \\left(\\mathbb{Z}/5\\mathbb{Z}\\right)^{\\times}$, its order is $|G| = \\varphi(5)=4$, and its identity element is the residue class $1 \\pmod 5$. The sum is evaluated at the element $a=2 \\pmod 5$.\n\nWe apply the orthogonality relation. Since the element $a=2$ is not the identity element $e=1$ in the group $\\left(\\mathbb{Z}/5\\mathbb{Z}\\right)^{\\times}$ (i.e., $2 \\not\\equiv 1 \\pmod 5$), we are in the second case of the relation. Therefore, the sum must be zero.\n$$\nS = \\sum_{\\chi \\bmod 5} \\chi(2) = 0\n$$\n\nThis can be verified by explicit construction. The group $G = \\left(\\mathbb{Z}/5\\mathbb{Z}\\right)^{\\times}$ is a cyclic group of order $4$, and a generator is $g=2$. The $\\varphi(5)=4$ distinct characters, which we can label $\\chi_k$ for $k \\in \\{0, 1, 2, 3\\}$, are determined by their values on this generator. The value $\\chi_k(g)$ must be a $4$-th root of unity. Specifically, we can define $\\chi_k(2) = \\exp(2\\pi i k/4) = i^k$.\nThe values of the four characters at argument $2$ are:\n\\begin{itemize}\n    \\item For $k=0$ (the principal character): $\\chi_0(2) = i^0 = 1$\n    \\item For $k=1$: $\\chi_1(2) = i^1 = i$\n    \\item For $k=2$: $\\chi_2(2) = i^2 = -1$\n    \\item For $k=3$: $\\chi_3(2) = i^3 = -i$\n\\end{itemize}\nThe sum is then\n$$\nS = \\chi_0(2) + \\chi_1(2) + \\chi_2(2) + \\chi_3(2) = 1 + i + (-1) + (-i) = 0\n$$\nThis direct computation confirms the result obtained from the orthogonality relation.\n\nThe interpretation of this result relates to the role of characters in isolating residue classes. The orthogonality relation implies that the function defined by\n$$\nf(n) = \\frac{1}{\\varphi(q)} \\sum_{\\chi \\bmod q} \\chi(n)\n$$\nacts as a characteristic function for the residue class $1 \\pmod q$ among integers $n$ coprime to $q$. That is, $f(n)=1$ if $n \\equiv 1 \\pmod q$, and $f(n)=0$ if $n \\not\\equiv 1 \\pmod q$ (and $\\gcd(n,q)=1$). This \"sifting\" or \"filtering\" property is fundamental to the proof of Dirichlet's theorem on arithmetic progressions, as it allows one to count primes within a specific progression. Our calculation, $S = \\sum_{\\chi \\bmod 5} \\chi(2) = 0$, is a direct demonstration of this principle. The sum evaluates to $0$ precisely because $2 \\not\\equiv 1 \\pmod 5$. Had the sum been over $\\chi(1)$, the result would have been $\\varphi(5)=4$, corresponding to the case where the characteristic function is non-zero.", "answer": "$$\\boxed{0}$$", "id": "3084154"}, {"introduction": "Dirichlet's theorem guarantees that progressions like $4n+1$ and $4n+3$ both contain infinitely many primes, and a deeper analysis shows that primes are asymptotically shared equally between them. But how does this play out for finite numbers? This computational exercise [@problem_id:3084184] invites you to write a program to count primes in different residue classes and observe this \"prime number race\" for yourself, offering an empirical window into the deep structure of prime distribution.", "problem": "Let $q$ be a positive integer and let $a$ be an integer with $0 \\le a < q$. The arithmetic progression defined by the pair $(a,q)$ is the set $\\{a + kq : k \\in \\mathbb{Z}_{\\ge 0}\\}$. Dirichlet's theorem on arithmetic progressions asserts that if the greatest common divisor (GCD) $\\gcd(a,q)=1$, then there are infinitely many prime numbers in that progression. A central qualitative consequence is that for a fixed modulus $q$ and for residue classes $a$ that are coprime to $q$, primes become asymptotically equidistributed among these residue classes. In this problem, you will investigate finite counts of primes in specific residue classes to observe how this qualitative behavior manifests for finite bounds.\n\nYou must write a program that, for each test case, computes the following quantities:\n- Given an upper bound $B$, a modulus $q$, and two residue classes $r_1$ and $r_2$ with $0 \\le r_1, r_2 < q$ and $\\gcd(r_1,q)=\\gcd(r_2,q)=1$, count:\n  1. $C_1(B;q,r_1) = \\sum_{p \\le B,\\, p \\equiv r_1 \\bmod q} 1$, where the sum is over prime numbers $p$.\n  2. $C_2(B;q,r_2) = \\sum_{p \\le B,\\, p \\equiv r_2 \\bmod q} 1$, where the sum is over prime numbers $p$.\n- Compute the difference $D(B;q,r_1,r_2) = C_1(B;q,r_1) - C_2(B;q,r_2)$.\n\nYour program must implement the computation from first principles based on:\n- The definition of prime numbers: an integer $p \\ge 2$ is prime if its only positive divisors are $1$ and $p$.\n- The definition of congruence: integers $x$ and $y$ satisfy $x \\equiv y \\bmod q$ if $q$ divides $x-y$.\n- The requirement that only primes $p \\le B$ are counted, and only those with $p \\equiv r_1 \\bmod q$ or $p \\equiv r_2 \\bmod q$ are included in the respective sums.\n\nYou should implement a correct and efficient prime enumeration up to the largest bound $B$ appearing in the test suite. No physical units or angle units are involved in this problem.\n\nTest Suite:\n- Case 1 (happy path, classic comparison inspired by Dirichlet's theorem): $B=200$, $q=4$, $r_1=1$, $r_2=3$.\n- Case 2 (boundary behavior with very small bound): $B=3$, $q=4$, $r_1=1$, $r_2=3$.\n- Case 3 (larger bound to observe closer balance): $B=1000$, $q=4$, $r_1=1$, $r_2=3$.\n- Case 4 (different modulus with two coprime residue classes): $B=200$, $q=3$, $r_1=1$, $r_2=2$.\n\nFor each test case, your program must output the list $[C_1(B;q,r_1), C_2(B;q,r_2), D(B;q,r_1,r_2)]$ as integers. Your program should produce a single line of output containing the results for all test cases aggregated into a single list of lists, with no spaces, in the format:\n`[[C_1,C_2,D],[C_1,C_2,D],[C_1,C_2,D],[C_1,C_2,D]]`.", "solution": "The user-provided problem has been analyzed and validated according to the specified criteria.\n\n### Problem Validation\n\n**Step 1: Extract Givens**\n\n- **Definitions**:\n  - Arithmetic progression for $(a,q)$: $\\{a + kq : k \\in \\mathbb{Z}_{\\ge 0}\\}$.\n  - Dirichlet's theorem on arithmetic progressions: If $\\gcd(a,q)=1$, the progression $\\{a + kq\\}$ contains infinitely many primes.\n  - Prime number: An integer $p \\ge 2$ with only positive divisors $1$ and $p$.\n  - Congruence: $x \\equiv y \\bmod q$ if $q$ divides $x-y$.\n- **Quantities to compute**: For a given upper bound $B$, modulus $q$, and residue classes $r_1, r_2$:\n  1. $C_1(B;q,r_1) = \\sum_{p \\le B,\\, p \\equiv r_1 \\bmod q} 1$, where the sum is over prime numbers $p$.\n  2. $C_2(B;q,r_2) = \\sum_{p \\le B,\\, p \\equiv r_2 \\bmod q} 1$, where the sum is over prime numbers $p$.\n  3. $D(B;q,r_1,r_2) = C_1(B;q,r_1) - C_2(B;q,r_2)$.\n- **Constraints**:\n  - $q$ is a positive integer.\n  - $0 \\le r_1, r_2 < q$.\n  - $\\gcd(r_1,q)=1$ and $\\gcd(r_2,q)=1$.\n  - The sums are over primes $p \\le B$.\n- **Test Suite**:\n  - Case 1: $B=200$, $q=4$, $r_1=1$, $r_2=3$.\n  - Case 2: $B=3$, $q=4$, $r_1=1$, $r_2=3$.\n  - Case 3: $B=1000$, $q=4$, $r_1=1$, $r_2=3$.\n  - Case 4: $B=200$, $q=3$, $r_1=1$, $r_2=2$.\n- **Output Format**: A single list of lists, with no spaces, e.g., `[[C_1,C_2,D],[C_1,C_2,D],...]`.\n\n**Step 2: Validate Using Extracted Givens**\n\nThe problem is found to be valid.\n- **Scientifically Grounded**: The problem is based on established concepts in number theory, namely prime numbers, modular arithmetic, and Dirichlet's theorem on arithmetic progressions. The premises are factually correct.\n- **Well-Posed**: The problem is clearly defined. For any given set of valid inputs $(B, q, r_1, r_2)$, the quantities $C_1$, $C_2$, and $D$ are uniquely determinable. All necessary parameters are provided for each test case.\n- **Objective**: The language is precise and mathematical, free of ambiguity or subjective claims.\n- The test cases provided satisfy the stated constraints, specifically $\\gcd(r_1,q)=1$ and $\\gcd(r_2,q)=1$ for each case. For instance, in Case 1, $\\gcd(1,4)=1$ and $\\gcd(3,4)=1$. In Case 4, $\\gcd(1,3)=1$ and $\\gcd(2,3)=1$.\n- The computational task is well-defined and feasible within typical computational limits.\n\n**Step 3: Verdict and Action**\n\nThe problem is **valid**. A solution will be provided.\n\n### Principle-Based Solution\n\nThe solution to this problem requires two main computational steps: first, generating all prime numbers up to the maximum required bound, and second, iterating through these primes to count how many fall into the specified residue classes for each test case.\n\n**1. Prime Number Generation**\n\nThe problem requires a method to identify prime numbers \"from first principles.\" A highly efficient and standard algorithm for generating all primes up to a specific limit $N$ is the Sieve of Eratosthenes. The largest bound specified in the test suite is $B=1000$, so we will set our sieve limit to $N=1000$.\n\nThe Sieve of Eratosthenes proceeds as follows:\n- Create a boolean array, `is_prime`, of size $N+1$, and initialize all entries from index $2$ to $N$ as `True`. The entries for $0$ and $1$ are marked as `False`, as they are not prime.\n- Start with the first prime number, $p=2$.\n- Mark all multiples of $p$ (i.e., $2p, 3p, 4p, \\dots$) up to $N$ as `False` in the `is_prime` array, as they are composite.\n- Find the next number greater than $p$ that is still marked as `True`. This is the next prime number. Repeat the process of marking its multiples as `False`.\n- This process continues until $p$ exceeds $\\sqrt{N}$. The reason for this upper bound on $p$ is that any composite number $c \\le N$ must have at least one prime factor less than or equal to $\\sqrt{c} \\le \\sqrt{N}$.\n\nAfter the sieve is complete, the `is_prime` array serves as a complete lookup table for primality for all integers up to $N$. `is_prime[i]` is `True` if and only if $i$ is a prime number. This pre-computation is performed only once for the entire set of test cases.\n\n**2. Counting Primes in Residue Classes**\n\nWith the pre-computed `is_prime` array, we can now address each test case $(B, q, r_1, r_2)$. For each case, we need to compute $C_1(B;q,r_1)$, $C_2(B;q,r_2)$, and their difference $D$.\n\nThe algorithm for a single test case is:\n- Initialize two counters, $c_1 = 0$ and $c_2 = 0$.\n- Iterate through all integers $p$ from $2$ to the given bound $B$.\n- For each $p$, check if it is prime by looking up `is_prime[p]`.\n- If $p$ is prime, compute its residue modulo $q$, which is $p \\pmod q$.\n  - If $p \\pmod q = r_1$, increment the counter $c_1$.\n  - If $p \\pmod q = r_2$, increment the counter $c_2$.\n- After the loop completes, the final counts are $C_1 = c_1$ and $C_2 = c_2$.\n- The difference is then computed as $D = C_1 - C_2$.\n\nThis procedure is repeated for each test case in the suite, and the results $[C_1, C_2, D]$ for each case are collected. The final output is formatted as a single string, representing a list of these result lists, with no extraneous characters or spaces.\n\nThis method correctly implements the definitions provided in the problem statement, relying on the fundamental definitions of primality and modular arithmetic, and uses an efficient algorithm suitable for the given constraints.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the prime counting problem for the given test cases.\n    \n    The method involves two main steps:\n    1. Pre-computation: Generate all primes up to the maximum bound specified\n       in the test suite using an efficient Sieve of Eratosthenes. The largest\n       bound is 1000.\n    2. Case-by-case processing: For each test case (B, q, r1, r2), iterate\n       through numbers up to the bound B, use the sieve to check for primality,\n       and count the primes that fall into the required residue classes r1 and r2\n       modulo q.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (B, q, r1, r2)\n        (200, 4, 1, 3),  # Case 1\n        (3, 4, 1, 3),    # Case 2\n        (1000, 4, 1, 3), # Case 3\n        (200, 3, 1, 2)   # Case 4\n    ]\n\n    # Find the maximum bound needed for the sieve.\n    max_B = 0\n    if test_cases:\n        max_B = max(case[0] for case in test_cases)\n    \n    # Step 1: Sieve of Eratosthenes to find all primes up to max_B.\n    # is_prime[i] will be True if i is prime.\n    # We use a numpy array for efficient boolean indexing and slicing.\n    is_prime = np.ones(max_B + 1, dtype=bool)\n    if max_B >= 0:\n        is_prime[0] = False\n    if max_B >= 1:\n        is_prime[1] = False\n        \n    # The sieve loop only needs to go up to sqrt(max_B).\n    for p in range(2, int(np.sqrt(max_B)) + 1):\n        if is_prime[p]:\n            # Mark all multiples of p as not prime.\n            # Start marking from p*p, as smaller multiples are already marked.\n            is_prime[p*p :: p] = False\n\n    # A list to store the results of each test case.\n    results = []\n\n    # Step 2: Process each test case.\n    for B, q, r1, r2 in test_cases:\n        # C1 corresponds to r1, C2 corresponds to r2.\n        c1 = 0\n        c2 = 0\n        \n        # Iterate through numbers up to the specific bound B for this case.\n        # We start from 2, the first prime.\n        for p in range(2, B + 1):\n            if is_prime[p]:  # Check if p is prime using the pre-computed sieve.\n                residue = p % q\n                if residue == r1:\n                    c1 += 1\n                elif residue == r2:\n                    c2 += 1\n                    \n        # Calculate the difference D.\n        d = c1 - c2\n        \n        # Append the result triplet for the current case.\n        results.append([c1, c2, d])\n\n    # Final print statement in the exact required format.\n    # The format is [[C1,C2,D],[C1,C2,D],...] with no spaces.\n    # We build the string manually to ensure no spaces are introduced.\n    result_str_parts = []\n    for res_list in results:\n        # Format each inner list as \"[val1,val2,val3]\"\n        result_str_parts.append(f\"[{res_list[0]},{res_list[1]},{res_list[2]}]\")\n    \n    # Join the inner lists with commas and wrap with outer brackets.\n    final_output_str = f\"[{','.join(result_str_parts)}]\"\n    print(final_output_str)\n\nsolve()\n```", "id": "3084184"}]}