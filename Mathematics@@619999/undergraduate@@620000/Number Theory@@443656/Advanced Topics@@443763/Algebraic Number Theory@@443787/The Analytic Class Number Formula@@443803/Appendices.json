{"hands_on_practices": [{"introduction": "The analytic class number formula connects deep invariants of a number field. One of the most fundamental of these is the discriminant $D_K$, which encodes information about the field's arithmetic structure and appears prominently in the formula. This practice guides you through calculating the discriminant for quadratic fields from first principles, a crucial skill for applying the formula correctly. [@problem_id:3090168]", "problem": "Let $d$ be a squarefree integer with $d \\neq 0,1$, and let $K=\\mathbb{Q}(\\sqrt{d})$. In preparation for applying the analytic class number formula, determine the field discriminant $D_{K}$ by proceeding from first principles as follows:\n\n1. Using only the definition that an algebraic integer is a root of a monic polynomial with coefficients in $\\mathbb{Z}$ and the expressions for the field trace and norm from $K$ to $\\mathbb{Q}$, classify all integral elements of $K$ of the form $\\alpha=a+b\\sqrt{d}$ with $a,b \\in \\mathbb{Q}$. Conclude an explicit $\\mathbb{Z}$-basis for the ring of integers $\\mathcal{O}_{K}$ in terms of $d$.\n\n2. Using the definition of the discriminant of a number field as the discriminant of a $\\mathbb{Z}$-basis of its ring of integers via the trace pairing, compute $D_{K}$ in terms of $d$.\n\n3. Apply your result to compute the exact values of $D_{K}$ for $K=\\mathbb{Q}(\\sqrt{5})$ and for $K=\\mathbb{Q}(\\sqrt{-7})$.\n\nProvide your final answer as two exact integers in the order corresponding to $d=5$ and $d=-7$.", "solution": "The problem requires the determination of the field discriminant $D_K$ for a quadratic field $K=\\mathbb{Q}(\\sqrt{d})$, where $d$ is a squarefree integer not equal to $0$ or $1$. The process will follow three specified steps.\n\n1. Classification of integral elements and finding a $\\mathbb{Z}$-basis for $\\mathcal{O}_K$.\n\nAn element $\\alpha \\in K = \\mathbb{Q}(\\sqrt{d})$ is an algebraic integer if it is a root of a monic polynomial with integer coefficients. Let $\\alpha = a + b\\sqrt{d}$ where $a,b \\in \\mathbb{Q}$. If $b=0$, then $\\alpha = a \\in \\mathbb{Q}$. For $\\alpha$ to be an algebraic integer, it must be in $\\mathbb{Z}$. If $b \\neq 0$, the minimal polynomial of $\\alpha$ over $\\mathbb{Q}$ is a quadratic given by:\n$$ P(x) = (x - \\alpha)(x - \\bar{\\alpha}) = x^2 - (\\alpha+\\bar{\\alpha})x + \\alpha\\bar{\\alpha} = 0 $$\nwhere $\\bar{\\alpha} = a - b\\sqrt{d}$ is the conjugate of $\\alpha$. The coefficients of $P(x)$ are related to the field trace and norm from $K$ to $\\mathbb{Q}$:\n$$ \\mathrm{Tr}_{K/\\mathbb{Q}}(\\alpha) = \\alpha + \\bar{\\alpha} = (a+b\\sqrt{d}) + (a-b\\sqrt{d}) = 2a $$\n$$ \\mathrm{N}_{K/\\mathbb{Q}}(\\alpha) = \\alpha\\bar{\\alpha} = (a+b\\sqrt{d})(a-b\\sqrt{d}) = a^2 - b^2d $$\nFor $\\alpha$ to be an algebraic integer, the coefficients of its minimal polynomial must be integers. Thus, we require:\n(i) $\\mathrm{Tr}_{K/\\mathbb{Q}}(\\alpha) = 2a \\in \\mathbb{Z}$\n(ii) $\\mathrm{N}_{K/\\mathbb{Q}}(\\alpha) = a^2 - b^2d \\in \\mathbb{Z}$\n\nFrom condition (i), $a$ must be a half-integer. Let $2a = k$ for some integer $k \\in \\mathbb{Z}$, so $a = \\frac{k}{2}$.\nSubstituting this into condition (ii):\n$$ \\left(\\frac{k}{2}\\right)^2 - b^2d \\in \\mathbb{Z} \\implies \\frac{k^2}{4} - b^2d \\in \\mathbb{Z} $$\nMultiplying by $4$ gives $k^2 - 4b^2d \\in \\mathbb{Z}$. Since $k^2$ is an integer, this implies $4b^2d$ must be an integer. Let $b = \\frac{p}{q}$ with $p,q \\in \\mathbb{Z}$, $q \\neq 0$, and $\\gcd(p,q)=1$.\nThen $4 \\left(\\frac{p}{q}\\right)^2 d = \\frac{4p^2d}{q^2}$ must be an integer. Since $\\gcd(p,q)=1$, we have $\\gcd(p^2, q^2)=1$. This forces $q^2$ to divide $4d$.\nSince $d$ is a squarefree integer, any prime factor of $d$ appears with exponent $1$. Let $p'$ be an odd prime. If $p'$ divides $q$, then $p'^2$ must divide $q^2$, and thus $p'^2$ must divide $4d$. As $d$ is squarefree, $p'^2$ cannot divide $d$. Thus, $q$ cannot have any odd prime factors. This means $q$ must be a power of $2$, say $q=2^j$ for some integer $j \\ge 0$.\nSo, $q^2 = 2^{2j}$ must divide $4d$. This implies $2^{2j-2}$ must divide $d$. Since $d$ is squarefree, the highest power of $2$ that can divide $d$ is $2^1$. Therefore, we must have $2j-2 \\le 1$, which implies $2j \\le 3$, so $j \\le 1.5$. As $j$ must be an integer, the only possibilities are $j=0$ and $j=1$. This means $q$ can be $1$ or $2$.\nSo, $b$ must also be a half-integer. Let $2b=m$ for some integer $m \\in \\mathbb{Z}$, so $b = \\frac{m}{2}$.\n\nNow we return to the condition $k^2 - 4b^2d \\in \\mathbb{Z}$. Substituting $b=\\frac{m}{2}$, we get $k^2 - 4(\\frac{m}{2})^2 d = k^2 - m^2d$. This must be an integer, which is already true since $k,m,d$ are integers. The condition was $a^2 - b^2d \\in \\mathbb{Z}$, which is $\\frac{k^2}{4} - \\frac{m^2 d}{4} \\in \\mathbb{Z}$. This means $k^2 - m^2d$ must be divisible by $4$:\n$$ k^2 - m^2d \\equiv 0 \\pmod 4 $$\nWe analyze this congruence based on the value of $d$ modulo $4$. Note that since $d$ is squarefree, $d$ cannot be divisible by $4$, so $d \\not\\equiv 0 \\pmod 4$.\n\nCase A: $d \\equiv 1 \\pmod 4$.\nThe congruence becomes $k^2 - m^2 \\equiv 0 \\pmod 4$, or $k^2 \\equiv m^2 \\pmod 4$. The squares modulo $4$ are $0^2 \\equiv 0$, $1^2 \\equiv 1$, $2^2 \\equiv 0$, $3^2 \\equiv 1$. Thus, $k^2$ and $m^2$ can only be $0$ or $1$ modulo $4$. The condition $k^2 \\equiv m^2 \\pmod 4$ implies that $k$ and $m$ must have the same parity.\nIf $k, m$ are both even, say $k=2k'$ and $m=2m'$, then $a=k' \\in \\mathbb{Z}$ and $b=m' \\in \\mathbb{Z}$.\nIf $k, m$ are both odd, say $k=2k'+1$ and $m=2m'+1$, then $a=k'+\\frac{1}{2}$ and $b=m'+\\frac{1}{2}$.\nThe elements $\\alpha = a+b\\sqrt{d}$ can be written as $\\alpha = \\frac{k+m\\sqrt{d}}{2}$. Let $\\omega = \\frac{1+\\sqrt{d}}{2}$. Then $\\alpha = \\frac{k-m}{2} + m\\frac{1+\\sqrt{d}}{2} = \\frac{k-m}{2} + m\\omega$. Since $k$ and $m$ have the same parity, $k-m$ is an even integer, so $\\frac{k-m}{2} \\in \\mathbb{Z}$. Thus, any integer $\\alpha$ is a $\\mathbb{Z}$-linear combination of $1$ and $\\omega$. The ring of integers is $\\mathcal{O}_K = \\mathbb{Z}[\\frac{1+\\sqrt{d}}{2}]$, and a $\\mathbb{Z}$-basis for $\\mathcal{O}_K$ is $\\{1, \\frac{1+\\sqrt{d}}{2}\\}$.\n\nCase B: $d \\equiv 2 \\pmod 4$.\nThe congruence is $k^2 - 2m^2 \\equiv 0 \\pmod 4$.\nIf $m$ is odd, $m^2 \\equiv 1 \\pmod 4$, so $k^2 - 2 \\equiv 0 \\pmod 4$, which means $k^2 \\equiv 2 \\pmod 4$. This is impossible.\nThus, $m$ must be even. So $m^2 \\equiv 0 \\pmod 4$. The congruence becomes $k^2 \\equiv 0 \\pmod 4$, which implies $k$ must also be even.\nSo, both $k=2a$ and $m=2b$ must be even. This means $a$ and $b$ must be integers.\nThe ring of integers is $\\mathcal{O}_K = \\mathbb{Z}[\\sqrt{d}]$, and a $\\mathbb{Z}$-basis for $\\mathcal{O}_K$ is $\\{1, \\sqrt{d}\\}$.\n\nCase C: $d \\equiv 3 \\pmod 4$.\nThe congruence is $k^2 - 3m^2 \\equiv 0 \\pmod 4$, or $k^2 + m^2 \\equiv 0 \\pmod 4$.\nIf $k$ is odd and $m$ is odd, $k^2 \\equiv 1$ and $m^2 \\equiv 1 \\pmod 4$, so $k^2+m^2 \\equiv 1+1=2 \\pmod 4$. This does not satisfy the congruence.\nIf one is odd and one is even, say $k$ odd and $m$ even, then $k^2+m^2 \\equiv 1+0=1 \\pmod 4$. This also fails.\nThe only way to satisfy $k^2+m^2 \\equiv 0 \\pmod 4$ is if both $k$ and $m$ are even.\nAs in the case $d \\equiv 2 \\pmod 4$, this implies $a,b \\in \\mathbb{Z}$.\nThe ring of integers is $\\mathcal{O}_K = \\mathbb{Z}[\\sqrt{d}]$, and a $\\mathbb{Z}$-basis for $\\mathcal{O}_K$ is $\\{1, \\sqrt{d}\\}$.\n\nSummary for Part 1:\n- If $d \\equiv 1 \\pmod 4$, a $\\mathbb{Z}$-basis for $\\mathcal{O}_K$ is $\\{\\omega_1, \\omega_2\\} = \\{1, \\frac{1+\\sqrt{d}}{2}\\}$.\n- If $d \\equiv 2, 3 \\pmod 4$, a $\\mathbb{Z}$-basis for $\\mathcal{O}_K$ is $\\{\\omega_1, \\omega_2\\} = \\{1, \\sqrt{d}\\}$.\n\n2. Computation of the field discriminant $D_K$.\n\nThe discriminant of $K$ is defined as the determinant of the matrix whose $(i,j)$-entry is $\\mathrm{Tr}_{K/\\mathbb{Q}}(\\omega_i \\omega_j)$, where $\\{\\omega_1, \\omega_2\\}$ is a $\\mathbb{Z}$-basis for $\\mathcal{O}_K$.\n$$ D_K = \\det \\begin{pmatrix} \\mathrm{Tr}(\\omega_1^2)  \\mathrm{Tr}(\\omega_1 \\omega_2) \\\\ \\mathrm{Tr}(\\omega_2 \\omega_1)  \\mathrm{Tr}(\\omega_2^2) \\end{pmatrix} $$\n\nCase 1: $d \\equiv 2, 3 \\pmod 4$.\nThe basis is $\\{\\omega_1, \\omega_2\\} = \\{1, \\sqrt{d}\\}$. We compute the required traces:\n- $\\mathrm{Tr}(\\omega_1^2) = \\mathrm{Tr}(1^2) = \\mathrm{Tr}(1) = 2$.\n- $\\mathrm{Tr}(\\omega_1 \\omega_2) = \\mathrm{Tr}(\\sqrt{d}) = 0$.\n- $\\mathrm{Tr}(\\omega_2^2) = \\mathrm{Tr}((\\sqrt{d})^2) = \\mathrm{Tr}(d) = 2d$.\nThe discriminant is:\n$$ D_K = \\det \\begin{pmatrix} 2  0 \\\\ 0  2d \\end{pmatrix} = (2)(2d) - (0)(0) = 4d $$\n\nCase 2: $d \\equiv 1 \\pmod 4$.\nThe basis is $\\{\\omega_1, \\omega_2\\} = \\{1, \\frac{1+\\sqrt{d}}{2}\\}$. Let $\\omega = \\frac{1+\\sqrt{d}}{2}$.\n- $\\mathrm{Tr}(\\omega_1^2) = \\mathrm{Tr}(1) = 2$.\n- $\\mathrm{Tr}(\\omega_1 \\omega_2) = \\mathrm{Tr}(\\omega) = \\mathrm{Tr}(\\frac{1}{2} + \\frac{1}{2}\\sqrt{d}) = 2(\\frac{1}{2}) = 1$.\n- $\\omega_2^2 = \\omega^2 = \\left(\\frac{1+\\sqrt{d}}{2}\\right)^2 = \\frac{1+2\\sqrt{d}+d}{4} = \\frac{1+d}{4} + \\frac{1}{2}\\sqrt{d}$.\n- $\\mathrm{Tr}(\\omega_2^2) = \\mathrm{Tr}(\\omega^2) = \\mathrm{Tr}\\left(\\frac{1+d}{4} + \\frac{1}{2}\\sqrt{d}\\right) = 2\\left(\\frac{1+d}{4}\\right) = \\frac{1+d}{2}$.\nThe discriminant is:\n$$ D_K = \\det \\begin{pmatrix} 2  1 \\\\ 1  \\frac{1+d}{2} \\end{pmatrix} = 2\\left(\\frac{1+d}{2}\\right) - (1)(1) = (1+d) - 1 = d $$\n\n3. Application to specific fields.\n\nFor $K=\\mathbb{Q}(\\sqrt{5})$:\nWe have $d=5$. We check the congruence class of $d$ modulo $4$: $5 \\equiv 1 \\pmod 4$.\nThis falls under Case 2 of the discriminant calculation. The discriminant is $D_K = d$.\nTherefore, for $K=\\mathbb{Q}(\\sqrt{5})$, the discriminant is $D_K = 5$.\n\nFor $K=\\mathbb{Q}(\\sqrt{-7})$:\nWe have $d=-7$. We check the congruence class of $d$ modulo $4$: $-7 = -8+1 \\equiv 1 \\pmod 4$.\nThis also falls under Case 2 of the discriminant calculation, where $D_K = d$.\nTherefore, for $K=\\mathbb{Q}(\\sqrt{-7})$, the discriminant is $D_K = -7$.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n5  -7\n\\end{pmatrix}\n}\n$$", "id": "3090168"}, {"introduction": "The true power of the analytic class number formula lies in its ability to bridge the worlds of analysis and algebra. This exercise puts you in the driver's seat, asking you to derive the explicit formula for the class number $h_K$ and then use known analytic $L$-values to compute this key algebraic invariant. This process reveals how complex analysis can be used to unlock secrets about the structure of number fields. [@problem_id:3090140]", "problem": "Let $K$ be an imaginary quadratic field with discriminant $D0$, class number $h_K$, and $w_K$ equal to the number of roots of unity contained in $K$. Let $\\chi_D$ denote the Kronecker symbol associated with $D$, and let $L(s,\\chi_D)$ denote the Dirichlet $L$-function attached to $\\chi_D$. Starting from foundational definitions and facts, proceed as follows:\n\n- Use the definition of a root of unity and degree considerations of cyclotomic fields to justify that $w_K=4$ for $D=-4$ and $w_K=6$ for $D=-3$.\n- Using the factorization of the Dedekind zeta function $\\zeta_K(s)$ of a quadratic field as $\\zeta_K(s)=\\zeta(s)\\,L(s,\\chi_D)$ together with the standard properties of $\\zeta_K(s)$ near $s=1$ for imaginary quadratic fields, derive an explicit expression for $h_K$ in terms of $L(1,\\chi_D)$, $w_K$, and $|D|$.\n- With the known values $L(1,\\chi_{-4})=\\frac{\\pi}{4}$ and $L(1,\\chi_{-3})=\\frac{\\pi}{3\\sqrt{3}}$, compute the corresponding class numbers $h_K$ for $D=-4$ and $D=-3$.\n\nYour final answers must be exact integers. No rounding is required.", "solution": "The problem is divided into three parts. We will address each in sequence.\n\n**Part 1: Determination of $w_K$ for $D=-4$ and $D=-3$**\n\nLet $K$ be an imaginary quadratic field. The roots of unity contained in $K$ form a finite cyclic group, denoted $\\mu(K)$. The order of this group is $w_K = |\\mu(K)|$.\nLet $\\zeta_m = \\exp(2\\pi i / m)$ be a primitive $m$-th root of unity. If $\\zeta_m \\in K$, then the cyclotomic field $\\mathbb{Q}(\\zeta_m)$ must be a subfield of $K$. The degree of a cyclotomic field over $\\mathbb{Q}$ is given by Euler's totient function, $[\\mathbb{Q}(\\zeta_m):\\mathbb{Q}] = \\phi(m)$.\nSince $K$ is a quadratic field, its degree over $\\mathbb{Q}$ is $[K:\\mathbb{Q}] = 2$.\nTherefore, if $\\mathbb{Q}(\\zeta_m) \\subseteq K$, it must be that $\\phi(m)$ divides $[K:\\mathbb{Q}]$, i.e., $\\phi(m) | 2$.\nThe only integer values of $\\phi(m)$ that divide $2$ are $1$ and $2$.\nWe find the possible values of $m$:\n- $\\phi(m) = 1$: This implies $m=1$ or $m=2$. The corresponding roots of unity are $1$ and $-1$. These are present in any number field that is a subfield of $\\mathbb{C}$ and contains $\\mathbb{Q}$. Thus, $w_K \\ge 2$ for any imaginary quadratic field.\n- $\\phi(m) = 2$: This implies $m=3$, $m=4$, or $m=6$.\n\nIf $K$ contains a primitive $m$-th root of unity, then $w_K$ must be a multiple of $m$. The order $w_K$ is the largest integer $m$ such that $\\zeta_m \\in K$. Consequently, for any imaginary quadratic field $K$, $w_K$ can only be $2$, $4$, or $6$.\n\nCase $D=-4$: The field is $K = \\mathbb{Q}(\\sqrt{-4}) = \\mathbb{Q}(\\sqrt{-1}) = \\mathbb{Q}(i)$. This field contains the primitive $4$-th root of unity, $i$. The set of all roots of unity in $\\mathbb{Q}(i)$ is $\\{1, i, i^2, i^3\\} = \\{1, i, -1, -i\\}$. This is a cyclic group of order $4$. Thus, for $D=-4$, $w_K=4$. The condition $\\mathbb{Q}(\\zeta_4) = \\mathbb{Q}(i) \\subseteq K$ forces $K = \\mathbb{Q}(i)$ as both are quadratic extensions of $\\mathbb{Q}$.\n\nCase $D=-3$: The field is $K = \\mathbb{Q}(\\sqrt{-3})$. A primitive $3$-rd root of unity is $\\zeta_3 = \\frac{-1+i\\sqrt{3}}{2}$. The field $\\mathbb{Q}(\\zeta_3)$ is $\\mathbb{Q}(\\sqrt{-3})$, which has discriminant $D=-3$. So, $K = \\mathbb{Q}(\\zeta_3)$ contains $\\zeta_3$. The group of roots of unity in $K$ must therefore contain the group generated by $\\zeta_3$, which is $\\{1, \\zeta_3, \\zeta_3^2\\}$. However, the group of roots of unity must also contain $-1$. If a field contains $\\zeta_3$, it also contains $-\\zeta_3^2 = -(\\frac{-1-i\\sqrt{3}}{2}) = \\frac{1+i\\sqrt{3}}{2} = \\zeta_6$, which is a primitive $6$-th root of unity. The group of roots of unity is cyclic, and if it contains a primitive $6$-th root of unity, its order is $6$. The elements are $\\{1, \\zeta_6, \\zeta_6^2, \\zeta_6^3, \\zeta_6^4, \\zeta_6^5\\}$. Thus, for $D=-3$, $w_K=6$.\n\nFor any other discriminant $D  -4$, the field $K=\\mathbb{Q}(\\sqrt{D})$ is not $\\mathbb{Q}(i)$ or $\\mathbb{Q}(\\sqrt{-3})$, so it cannot contain primitive $3$-rd or $4$-th roots of unity. In those cases, $w_K=2$.\n\n**Part 2: Derivation of the class number formula**\n\nThe Dedekind zeta function of a number field $K$, $\\zeta_K(s)$, is defined for $\\mathrm{Re}(s)1$ by the series $\\zeta_K(s) = \\sum_{\\mathfrak{a} \\subseteq \\mathcal{O}_K} \\frac{1}{N(\\mathfrak{a})^s}$, where the sum is over all nonzero integral ideals of the ring of integers $\\mathcal{O}_K$.\nThe analytic class number formula provides the residue of $\\zeta_K(s)$ at its simple pole at $s=1$:\n$$ \\lim_{s \\to 1} (s-1)\\zeta_K(s) = \\frac{2^{r_1}(2\\pi)^{r_2} h_K R_K}{w_K \\sqrt{|D|}} $$\nHere, $r_1$ is the number of real embeddings of $K$, $r_2$ is the number of pairs of conjugate complex embeddings, $h_K$ is the class number, $R_K$ is the regulator, $w_K$ is the number of roots of unity, and $D$ is the discriminant.\n\nFor an imaginary quadratic field $K=\\mathbb{Q}(\\sqrt{d})$ with $d0$:\n- There are no real embeddings, so $r_1=0$.\n- There is one pair of complex embeddings (inclusion and complex conjugation), so $r_2=1$.\n- The rank of the unit group is $r_1+r_2-1 = 0+1-1=0$. The regulator $R_K$ is by convention taken to be $1$ in this case.\n\nSubstituting these values into the general formula gives the residue for an imaginary quadratic field:\n$$ \\lim_{s \\to 1} (s-1)\\zeta_K(s) = \\frac{2^0 (2\\pi)^1 h_K \\cdot 1}{w_K \\sqrt{|D|}} = \\frac{2\\pi h_K}{w_K \\sqrt{|D|}} $$\n\nThe problem provides the factorization of the Dedekind zeta function for a quadratic field:\n$$ \\zeta_K(s) = \\zeta(s) L(s, \\chi_D) $$\nwhere $\\zeta(s)$ is the Riemann zeta function and $L(s, \\chi_D)$ is the Dirichlet $L$-function associated with the Kronecker symbol $\\chi_D$.\n\nWe analyze the behavior of the factors near $s=1$:\n- The Riemann zeta function $\\zeta(s)$ has a simple pole at $s=1$ with residue $1$, i.e., $\\lim_{s \\to 1} (s-1)\\zeta(s) = 1$.\n- For a quadratic field, the discriminant $D$ is not a perfect square, so the character $\\chi_D$ is non-principal. For a non-principal Dirichlet character, the $L$-function $L(s, \\chi_D)$ is analytic for $\\mathrm{Re}(s)0$ and in particular is finite and non-zero at $s=1$. Its value is $L(1, \\chi_D)$.\n\nUsing this information, we can calculate the residue of $\\zeta_K(s)$ from its factored form:\n$$ \\lim_{s \\to 1} (s-1)\\zeta_K(s) = \\lim_{s \\to 1} (s-1)\\zeta(s) L(s, \\chi_D) = \\left(\\lim_{s \\to 1} (s-1)\\zeta(s)\\right) \\left(\\lim_{s \\to 1} L(s, \\chi_D)\\right) = 1 \\cdot L(1, \\chi_D) = L(1, \\chi_D) $$\n\nEquating the two expressions for the residue, we get:\n$$ \\frac{2\\pi h_K}{w_K \\sqrt{|D|}} = L(1, \\chi_D) $$\nSolving for the class number $h_K$, we obtain the desired explicit expression:\n$$ h_K = \\frac{w_K \\sqrt{|D|}}{2\\pi} L(1, \\chi_D) $$\n\n**Part 3: Computation of $h_K$ for $D=-4$ and $D=-3$**\n\nWe use the formula derived in Part 2 and the given values.\n\n- For $D=-4$:\n  The field is $K = \\mathbb{Q}(i)$. We have $|D| = 4$, so $\\sqrt{|D|} = 2$.\n  From Part 1, we determined $w_K = 4$.\n  We are given $L(1, \\chi_{-4}) = \\frac{\\pi}{4}$.\n  Substituting these values into the formula:\n  $$ h_K = \\frac{4 \\cdot \\sqrt{4}}{2\\pi} \\cdot \\frac{\\pi}{4} = \\frac{4 \\cdot 2}{2\\pi} \\cdot \\frac{\\pi}{4} = \\frac{8}{2\\pi} \\cdot \\frac{\\pi}{4} = \\frac{8\\pi}{8\\pi} = 1 $$\n  The class number for $D=-4$ is $1$.\n\n- For $D=-3$:\n  The field is $K = \\mathbb{Q}(\\sqrt{-3})$. We have $|D| = 3$, so $\\sqrt{|D|} = \\sqrt{3}$.\n  From Part 1, we determined $w_K = 6$.\n  We are given $L(1, \\chi_{-3}) = \\frac{\\pi}{3\\sqrt{3}}$.\n  Substituting these values into the formula:\n  $$ h_K = \\frac{6 \\cdot \\sqrt{3}}{2\\pi} \\cdot \\frac{\\pi}{3\\sqrt{3}} = \\frac{6\\sqrt{3}}{2\\pi} \\cdot \\frac{\\pi}{3\\sqrt{3}} = \\frac{6\\pi\\sqrt{3}}{6\\pi\\sqrt{3}} = 1 $$\n  The class number for $D=-3$ is $1$.\n\nThe final answers are the calculated class numbers for $D=-4$ and $D=-3$, respectively.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n1  1\n\\end{pmatrix}\n}\n$$", "id": "3090140"}, {"introduction": "While the class number formula provides an exact value for $L(1, \\chi_D)$, numerically computing this value from its series definition presents a challenge due to slow convergence. This computational practice introduces the powerful technique of summation by parts to dramatically accelerate the series convergence, offering a practical glimpse into the methods of analytic number theory. You will implement and compare both naive and accelerated methods, gaining a tangible understanding of the analytic side of the formula. [@problem_id:3090180]", "problem": "You are asked to implement and compare two numerical estimators for the Dirichlet $L$-value at $s=1$ associated with a quadratic Dirichlet character $\\chi_D$, where $\\chi_D(n)$ is the primitive quadratic character modulo $\\lvert D \\rvert$ given by the Kronecker symbol $\\left(\\dfrac{D}{n}\\right)$ for a fundamental discriminant $D$. The target quantity is $L(1,\\chi_D)$, defined by the Dirichlet series $L(s,\\chi_D)=\\sum_{n=1}^{\\infty} \\dfrac{\\chi_D(n)}{n^s}$ for $\\Re(s)1$ and analytically continued to $s=1$. Your goal is to implement, from first principles, a program that approximates $L(1,\\chi_D)$ using two approaches: the naive partial sum and a convergence-accelerated partial summation based estimator. You must derive the partial summation identity specialized to $s=1$ starting from the definitions below and then design the corresponding algorithm.\n\nStart from the following fundamental base:\n- The Dirichlet series definition $L(s,\\chi_D)=\\sum_{n=1}^{\\infty} \\dfrac{\\chi_D(n)}{n^s}$ for $\\Re(s)1$, and that $\\chi_D$ is completely multiplicative and periodic modulo $\\lvert D \\rvert$ with $\\chi_D(n)=0$ if $\\gcd(n,\\lvert D \\rvert)1$.\n- Abel (partial) summation principle for series with monotone weight functions, derivable from the discrete version of integration by parts for series. You must work from this principle to build an identity appropriate for approximating $L(1,\\chi_D)$ using the cumulative sum $S(x)=\\sum_{n\\le x}\\chi_D(n)$.\n- The Kronecker symbol $\\left(\\dfrac{D}{n}\\right)$ as the canonical realization of $\\chi_D(n)$ for fundamental discriminant $D$, characterized by: $\\left(\\dfrac{D}{n}\\right)=0$ when $\\gcd(n,\\lvert D \\rvert)1$; and for $\\gcd(n,\\lvert D \\rvert)=1$, it agrees with the Jacobi symbol on odd parts together with the standard factor for powers of $2$, namely $\\left(\\dfrac{D}{2}\\right)=0$ if $D$ is even and $\\left(\\dfrac{D}{2}\\right)=(-1)^{\\frac{D^2-1}{8}}$ if $D$ is odd.\n\nTasks:\n1) Derive, from the base listed above, a discrete partial summation identity that expresses the truncated series $\\sum_{n\\le M}\\dfrac{\\chi_D(n)}{n}$ in terms of the cumulative sums $S(n)=\\sum_{k\\le n}\\chi_D(k)$ and a telescoping weight built from the function $1/n$. Then explain why this identity yields a convergence-accelerated estimator for $L(1,\\chi_D)$ when truncated at a large $M$, and how a tail bound of order $O\\!\\left(\\dfrac{\\sup_{t\\ge M}\\lvert S(t)\\rvert}{M}\\right)$ arises.\n2) Design and implement an algorithm to compute $\\chi_D(n)$ for all $1\\le n\\le M$, using the Kronecker symbol definition with:\n   - Immediate zero when $\\gcd(n,\\lvert D \\rvert)1$.\n   - For $\\gcd(n,\\lvert D \\rvert)=1$, factor out $2^{\\nu_2(n)}$ from $n$, use the factor $\\left(\\dfrac{D}{2}\\right)^{\\nu_2(n)}$ when $D$ is odd, and reduce to the Jacobi symbol $\\left(\\dfrac{D}{n_{\\text{odd}}}\\right)$ with $n_{\\text{odd}}$ odd. Implement the Jacobi symbol via quadratic reciprocity and the law of the factor of $2$ modulo $8$.\n   - Note: You must not factor $n$ into primes; instead, use the reciprocity law and the binary handling of the factor of $2$ to compute the Jacobi symbol.\n3) Implement two estimators for $L(1,\\chi_D)$:\n   - The naive partial sum: $L_{\\text{naive}}(N,D)=\\sum_{n=1}^{N}\\dfrac{\\chi_D(n)}{n}$ for a truncation parameter $N$.\n   - The partial summation estimator: $L_{\\text{ps}}(M,D)$ obtained by applying your derived discrete partial summation identity with truncation parameter $M$ (do not include any additional tail correction beyond what the identity produces at $M$). Also compute the explicit bound proxy $\\dfrac{\\max_{1\\le n\\le M}\\lvert S(n)\\rvert}{M}$ that upper bounds the absolute value of the omitted tail up to a multiplicative constant independent of $M$.\n4) For each test case given below, compute both $L_{\\text{naive}}(N,D)$ and $L_{\\text{ps}}(M,D)$. Your program should output a single line with all results, as a comma-separated list enclosed in square brackets. For each test case, output two floats in this order: first $L_{\\text{naive}}(N,D)$, then $L_{\\text{ps}}(M,D)$. Do not print any additional text.\n\nNo physical units are involved.\n\nTest suite (each case is a triple $(D,N,M)$):\n- Case 1 (happy path, small odd conductor): $(-3, 20000, 200000)$.\n- Case 2 (Gaussian integers case, small even conductor): $(-4, 20000, 200000)$.\n- Case 3 (another imaginary quadratic, odd conductor): $(-7, 20000, 200000)$.\n- Case 4 (real quadratic with odd conductor): $(5, 50000, 300000)$.\n- Case 5 (real quadratic with even conductor): $(8, 50000, 300000)$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, ordered as\n  $\\big[L_{\\text{naive}}(N_1,D_1),L_{\\text{ps}}(M_1,D_1),L_{\\text{naive}}(N_2,D_2),L_{\\text{ps}}(M_2,D_2),\\dots\\big]$.\n- All outputs must be floats.", "solution": "The core of this problem is to approximate the value of the Dirichlet $L$-function $L(1, \\chi_D) = \\sum_{n=1}^\\infty \\frac{\\chi_D(n)}{n}$ for a primitive quadratic character $\\chi_D$ associated with a fundamental discriminant $D$. We will derive and implement two estimators: a naive partial sum and a more rapidly converging estimator derived from the principle of summation by parts.\n\n**1. Derivation of the Partial Summation Identity and Convergence Analysis**\n\nThe principle of summation by parts, the discrete analogue of integration by parts, provides a method to transform a slowly converging series into a more manageable form. Let $\\{a_n\\}_{n=1}^\\infty$ and $\\{f_n\\}_{n=1}^\\infty$ be two sequences of complex numbers. Let $S_n = \\sum_{k=1}^n a_k$ be the partial sums of $\\{a_n\\}$, with $S_0 = 0$. Then for any integer $M \\ge 1$:\n$$ \\sum_{n=1}^M a_n f_n = \\sum_{n=1}^M (S_n - S_{n-1}) f_n $$\nBy rearranging the terms (a process known as Abel's transformation):\n$$ \\sum_{n=1}^M a_n f_n = \\sum_{n=1}^M S_n f_n - \\sum_{n=1}^M S_{n-1} f_n = \\sum_{n=1}^M S_n f_n - \\sum_{k=0}^{M-1} S_k f_{k+1} $$\n$$ = S_M f_M - S_0 f_1 + \\sum_{n=1}^{M-1} S_n f_n - \\sum_{n=1}^{M-1} S_n f_{n+1} $$\nSince $S_0 = 0$, we arrive at the discrete summation by parts identity:\n$$ \\sum_{n=1}^M a_n f_n = S_M f_M + \\sum_{n=1}^{M-1} S_n (f_n - f_{n+1}) $$\nFor our problem, we set $a_n = \\chi_D(n)$ and $f_n = 1/n$. The cumulative sum is $S(n) = \\sum_{k=1}^n \\chi_D(k)$. The difference term is $f_n - f_{n+1} = \\frac{1}{n} - \\frac{1}{n+1} = \\frac{1}{n(n+1)}$. Substituting these into the identity gives the desired relationship for the truncated series:\n$$ \\sum_{n=1}^M \\frac{\\chi_D(n)}{n} = \\frac{S(M)}{M} + \\sum_{n=1}^{M-1} \\frac{S(n)}{n(n+1)} $$\nThis identity is exact for the partial sum up to $M$. To estimate $L(1, \\chi_D)$, we consider the limit as $M \\to \\infty$. For any non-principal Dirichlet character $\\chi_D$, the sum $S(x) = \\sum_{n \\le x} \\chi_D(n)$ is bounded. The Pólya-Vinogradov inequality gives a bound $|S(x)| \\le C\\sqrt{|D|} \\log|D|$ for some constant $C$. As $M \\to \\infty$, the term $\\frac{S(M)}{M}$ tends to $0$ because $S(M)$ is bounded. This yields an expression for the $L$-value as an infinite series:\n$$ L(1, \\chi_D) = \\sum_{n=1}^\\infty \\frac{S(n)}{n(n+1)} $$\nThis new series provides a superior estimator. The terms of the original series $\\sum \\frac{\\chi_D(n)}{n}$ decay as $O(1/n)$, leading to slow, conditional convergence. The terms of the transformed series $\\sum \\frac{S(n)}{n(n+1)}$ decay as $O(1/n^2)$ (since $S(n)$ is bounded), ensuring absolute and much faster convergence.\n\nThe partial summation estimator $L_{\\text{ps}}(M, D)$ is defined by truncating this accelerated series. The problem specifies using the identity for the finite sum as the estimator, which is:\n$$ L_{\\text{ps}}(M,D) = \\frac{S(M)}{M} + \\sum_{n=1}^{M-1} \\frac{S(n)}{n(n+1)} $$\nThe error of this estimator is the tail of the infinite series, which we can bound:\n$$ \\left| L(1, \\chi_D) - L_{\\text{ps}}(M, D) \\right| = \\left| \\sum_{n=M}^\\infty \\frac{S(n)}{n(n+1)} - \\frac{S(M)}{M} \\right| $$\nUsing the identity again, $L(1,\\chi_D) = \\lim_{K \\to \\infty} \\left( \\frac{S(K)}{K} + \\sum_{n=1}^{K-1} \\frac{S(n)}{n(n+1)} \\right)$, the error is more simply seen as the tail of the accelerated series starting from $n=M$:\n$$ \\text{Error} = \\left| \\sum_{n=M}^{\\infty} \\frac{S(n)}{n(n+1)} \\right| \\le \\sum_{n=M}^{\\infty} \\frac{|S(n)|}{n(n+1)} \\le \\left(\\sup_{t \\ge M} |S(t)|\\right) \\sum_{n=M}^{\\infty} \\left(\\frac{1}{n} - \\frac{1}{n+1}\\right) $$\nThe latter sum is a telescoping series equal to $1/M$. Thus, the error is bounded by:\n$$ \\text{Error} \\le \\frac{\\sup_{t \\ge M} |S(t)|}{M} $$\nThis demonstrates that the error decreases at a rate of at least $O(1/M)$, confirming the convergence acceleration. The quantity $\\frac{\\max_{1\\le n\\le M}|S(n)|}{M}$ serves as a computable proxy for the magnitude of this error bound.\n\n**2. Algorithm for the Kronecker Symbol $\\chi_D(n)$**\n\nThe character $\\chi_D(n)$ is computed as the Kronecker symbol $\\left(\\frac{D}{n}\\right)$. The algorithm avoids factoring $n$ into primes, instead relying on the symbol's multiplicative properties and reciprocity laws. For an integer $n  0$:\n\n1.  **Base Cases and Divisibility**: If $\\gcd(D, n)  1$, $\\left(\\frac{D}{n}\\right) = 0$. If $n=1$, $\\left(\\frac{D}{n}\\right) = 1$. For implementation, factors of $|D|$ are pre-identified for efficient GCD checking.\n\n2.  **Factor out Powers of 2**: Express $n$ as $n = 2^k m$, where $m$ is odd. By multiplicativity, $\\left(\\frac{D}{n}\\right) = \\left(\\frac{D}{2}\\right)^k \\left(\\frac{D}{m}\\right)$.\n\n3.  **Compute $\\left(\\frac{D}{2}\\right)$**: If $k  0$, we need this term. Since $\\gcd(D, n) = 1$, $D$ must be odd. The value is given by $\\left(\\frac{D}{2}\\right) = (-1)^{(D^2-1)/8}$. This is $1$ if $D \\equiv 1, 7 \\pmod 8$, and $-1$ if $D \\equiv 3, 5 \\pmod 8$.\n\n4.  **Compute $\\left(\\frac{D}{m}\\right)$**: This is the Jacobi symbol, for which there is an efficient iterative algorithm analogous to the Euclidean algorithm for GCD.\n    - If $D  0$, we use $\\left(\\frac{D}{m}\\right) = \\left(\\frac{-1}{m}\\right)\\left(\\frac{|D|}{m}\\right)$. The term $\\left(\\frac{-1}{m}\\right) = (-1)^{(m-1)/2}$.\n    - To compute $\\left(\\frac{a}{b}\\right)$ for $a, b  0$ with $b$ odd:\n        a. Reduce $a \\pmod b$.\n        b. Repeatedly extract factors of $2$ from $a$. For each factor, multiply the total result by $\\left(\\frac{2}{b}\\right) = (-1)^{(b^2-1)/8}$.\n        c. After $a$ is odd, apply the Law of Quadratic Reciprocity: $\\left(\\frac{a}{b}\\right) = \\left(\\frac{b}{a}\\right) (-1)^{(a-1)(b-1)/4}$.\n        d. Repeat the process with the smaller-modulus pair $(b, a \\pmod b)$ until the top argument becomes $1$.\n\n**3. Implementation of Estimators**\n\nThe two estimators are implemented as follows:\n- **$L_{\\text{naive}}(N,D)$**: The naive partial sum is a direct implementation of $\\sum_{n=1}^{N}\\frac{\\chi_D(n)}{n}$.\n- **$L_{\\text{ps}}(M,D)$**: The partial summation estimator is given by $\\frac{S(M)}{M} + \\sum_{n=1}^{M-1} \\frac{S(n)}{n(n+1)}$.\n\nThe overall computation proceeds efficiently:\n1.  For a given test case $(D,N,M)$, determine the maximum index required, $K = \\max(N, M)$.\n2.  Create a vector to store $\\chi_D(n)$ for $n=1, \\dots, K$. This is populated by calling the Kronecker symbol algorithm for each $n$.\n3.  Create a second vector to store the cumulative sums $S(n) = \\sum_{k=1}^n \\chi_D(k)$. This is computed via a single pass: $S(n) = S(n-1) + \\chi_D(n)$.\n4.  The sums for $L_{\\text{naive}}$ and $L_{\\text{ps}}$ are then computed using vectorized operations on these pre-computed arrays, which is highly efficient. For example, $L_{\\text{naive}}(N,D)$ is calculated as `np.sum(chi_vals[1:N+1] / np.arange(1, N+1))`.\n\nThis strategy minimizes redundant calculations and leverages optimized numerical libraries for the summation steps.", "answer": "```python\nimport numpy as np\nimport math\n\ndef get_optimized_gcd_check(D):\n    \"\"\"Returns a simple function to check for gcd(D, n)  1.\"\"\"\n    abs_D = abs(D)\n    if abs_D == 3:\n        return lambda n: n % 3 == 0\n    if abs_D == 4:\n        return lambda n: n % 2 == 0\n    if abs_D == 5:\n        return lambda n: n % 5 == 0\n    if abs_D == 7:\n        return lambda n: n % 7 == 0\n    if abs_D == 8:\n        return lambda n: n % 2 == 0\n    # Fallback for general D\n    return lambda n: math.gcd(abs_D, n)  1\n\ndef jacobi(a, n):\n    \"\"\"\n    Computes the Jacobi symbol (a/n) for n  0 odd.\n    Assumes a is non-negative.\n    \"\"\"\n    if n = 0 or n % 2 == 0:\n        raise ValueError(\"n must be a positive odd integer.\")\n    if n == 1:\n        return 1\n    \n    a %= n\n    t = 1\n    while a != 0:\n        while a % 2 == 0:\n            a //= 2\n            n_mod_8 = n % 8\n            if n_mod_8 == 3 or n_mod_8 == 5:\n                t = -t\n        \n        a, n = n, a\n        \n        # Apply quadratic reciprocity law\n        if a % 4 == 3 and n % 4 == 3:\n            t = -t\n        \n        a %= n\n        \n    if n == 1:\n        return t\n    else:\n        return 0\n\ndef make_kronecker_func(D, gcd_check):\n    \"\"\"\n    Returns a specialized Kronecker symbol function for a given D.\n    \"\"\"\n    def kronecker(n):\n        if n == 0:\n            return 0\n        if gcd_check(n):\n            return 0\n        if n == 1:\n            return 1\n\n        k = 0\n        while n % 2 == 0:\n            k += 1\n            n //= 2\n        \n        if k  0:\n            D_mod_8 = D % 8\n            if D_mod_8 == 3 or D_mod_8 == 5:\n                term_2 = -1 if k % 2 != 0 else 1\n            else: # D_mod_8 == 1 or 7\n                term_2 = 1\n        else:\n            term_2 = 1\n        \n        if n == 1:\n            return term_2\n        \n        d = D\n        if d  0:\n            # (-1/n) = (-1)^((n-1)/2)\n            sign_neg_d = -1 if (n - 1) // 2 % 2 != 0 else 1\n            d = -d\n        else:\n            sign_neg_d = 1\n            \n        return term_2 * sign_neg_d * jacobi(d, n)\n\n    return kronecker\n\ndef get_chi_and_S(D, max_val):\n    \"\"\"\n    Computes chi_D(n) and its cumulative sum S(n) up to max_val.\n    \"\"\"\n    gcd_check = get_optimized_gcd_check(D)\n    kronecker_func = make_kronecker_func(D, gcd_check)\n\n    chi_vals = np.zeros(max_val + 1)\n    for n in range(1, max_val + 1):\n        chi_vals[n] = kronecker_func(n)\n\n    S_vals = np.cumsum(chi_vals)\n    return chi_vals, S_vals\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases.\n    \"\"\"\n    test_cases = [\n        (-3, 20000, 200000),\n        (-4, 20000, 200000),\n        (-7, 20000, 200000),\n        (5, 50000, 300000),\n        (8, 50000, 300000),\n    ]\n\n    results = []\n    \n    for D, N, M in test_cases:\n        max_val = max(N, M)\n        chi_vals, S_vals = get_chi_and_S(D, max_val)\n\n        # Estimator 1: Naive partial sum\n        n_range_naive = np.arange(1, N + 1)\n        l_naive = np.sum(chi_vals[1 : N + 1] / n_range_naive)\n        results.append(l_naive)\n\n        # Estimator 2: Partial summation\n        n_range_ps = np.arange(1, M, dtype=np.float64)\n        sum_part = np.sum(S_vals[1:M] / (n_range_ps * (n_range_ps + 1.0)))\n        \n        if M  0:\n            tail_term = S_vals[M] / float(M)\n        else:\n            tail_term = 0.0\n\n        l_ps = sum_part + tail_term\n        results.append(l_ps)\n        \n    print(f\"[{','.join(f'{r:.12f}' for r in results)}]\")\n\nsolve()\n```", "id": "3090180"}]}