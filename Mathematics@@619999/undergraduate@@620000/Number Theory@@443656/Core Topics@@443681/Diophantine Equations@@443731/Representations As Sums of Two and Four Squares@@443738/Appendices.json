{"hands_on_practices": [{"introduction": "Understanding the structure of all possible representations of an integer $n$ as a sum of two squares begins with the concept of a *primitive* representation, where the components are coprime. This practice guides you to explore the foundational principle that any representation is simply a scaled version of a primitive one [@problem_id:3089702]. By working through the provided statements, you will gain an intuition for the key identity connecting the total number of representations, $r_2(n)$, to the primitive representations of the integers $m$ that arise from dividing $n$ by its square factors.", "problem": "Let $n$ be a positive integer. Define $r_2(n)$ to be the number of ordered integer pairs $(x,y)$ with $x^2 + y^2 = n$, counting all sign choices and orderings. Define a representation $(x,y)$ to be primitive if $\\gcd(x,y) = 1$, where $\\gcd$ denotes the Greatest Common Divisor (gcd). Consider the effect of representations with a zero component and the relationship between $r_2(n)$ and the number of primitive representations.\n\nSelect all statements that are true:\n\nA. If $n$ is not a perfect square, then $r_2(n)$ equals the number of primitive representations. If $n = k^2$ with $k > 1$, then $r_2(k^2)$ exceeds the number of primitive representations by exactly $4$, and the only nonprimitive representations are those with a zero component.\n\nB. For every $n$, one has the identity\n$$\nr_2(n) \\;=\\; \\sum_{d^2 \\mid n} r_2^{\\mathrm{prim}}\\!\\left(\\frac{n}{d^2}\\right),\n$$\nwhere $r_2^{\\mathrm{prim}}(m)$ denotes the number of primitive representations of $m$. Moreover, representations with a zero component occur if and only if $n$ is a perfect square $k^2$, in which case $(\\pm k,0)$ and $(0,\\pm k)$ contribute exactly $4$ to $r_2(k^2)$, and these are primitive only when $k=1$.\n\nC. If $n$ is squarefree and has no prime factor congruent to $3$ modulo $4$, then $r_2(n)$ equals the number of primitive representations. If $n$ is squarefree and has at least one prime factor congruent to $3$ modulo $4$, then both $r_2(n)$ and the number of primitive representations are $0$.\n\nD. The difference $r_2(n) - r_2^{\\mathrm{prim}}(n)$ is $0$ for all $n$ unless $n$ is a perfect square.", "solution": "The problem statement defines $r_2(n)$ as the number of integer solutions $(x,y)$ to $x^2+y^2=n$, and a primitive representation as one where $\\gcd(x,y)=1$. We are asked to evaluate several statements concerning the relationship between $r_2(n)$ and the number of primitive representations, which we denote by $r_2^{\\mathrm{prim}}(n)$.\n\nThe core of this problem lies in the relationship between all representations of an integer $n$ as a sum of two squares and its primitive representations. Let $(x,y)$ be an integer pair such that $x^2+y^2=n$. Let $d = \\gcd(x,y)$. By definition, $d$ is a positive integer. We can write $x=dX$ and $y=dY$ for some integers $X$ and $Y$ with $\\gcd(X,Y)=1$. Substituting these into the equation gives:\n$$\n(dX)^2 + (dY)^2 = n \\\\\nd^2(X^2+Y^2) = n\n$$\nThis equation shows that $d^2$ must be a square divisor of $n$. For any such $d$, the pair $(X,Y)$ is a primitive representation of the integer $m = n/d^2$.\n\nConversely, given any square divisor $d^2$ of $n$ (with $d>0$), and any primitive representation $(X,Y)$ of $m=n/d^2$, we can construct a representation $(x,y)=(dX, dY)$ of $n$. The greatest common divisor of this new representation is $\\gcd(dX,dY) = d \\cdot \\gcd(X,Y) = d \\cdot 1 = d$.\n\nThis establishes a bijection that partitions the set of all representations of $n$ based on the greatest common divisor of their components. This leads to the fundamental identity:\n$$\nr_2(n) = \\sum_{d^2 \\mid n} r_2^{\\mathrm{prim}}\\left(\\frac{n}{d^2}\\right)\n$$\nwhere the sum is over all positive integers $d$ such that $d^2$ is a divisor of $n$. We will use this identity to evaluate each option.\n\n### Option A Analysis\n\nThe statement is: \"If $n$ is not a perfect square, then $r_2(n)$ equals the number of primitive representations. If $n = k^2$ with $k > 1$, then $r_2(k^2)$ exceeds the number of primitive representations by exactly $4$, and the only nonprimitive representations are those with a zero component.\"\n\nThis statement contains two main claims.\n1.  **Claim 1:** If $n$ is not a perfect square, then $r_2(n) = r_2^{\\mathrm{prim}}(n)$.\n    From our fundamental identity, the difference between $r_2(n)$ and $r_2^{\\mathrm{prim}}(n)$ is:\n    $$r_2(n) - r_2^{\\mathrm{prim}}(n) = \\sum_{d>1, d^2 \\mid n} r_2^{\\mathrm{prim}}\\left(\\frac{n}{d^2}\\right)$$\n    The claim asserts this difference is $0$ if $n$ is not a perfect square. This would require the sum on the right-hand side to be zero. A sum of non-negative integers is zero if and only if each term is zero. However, it is possible for an integer $n$ to have a square divisor $d^2>1$ without $n$ itself being a perfect square. In such a case, the sum might be non-zero.\n    Consider the counterexample $n=18$. $18 = 2 \\cdot 3^2$. This is not a perfect square. The square divisors of $18$ are $1^2=1$ and $3^2=9$.\n    The identity gives $r_2(18) = r_2^{\\mathrm{prim}}(18) + r_2^{\\mathrm{prim}}(18/3^2) = r_2^{\\mathrm{prim}}(18) + r_2^{\\mathrm{prim}}(2)$.\n    A representation for $2$ is $1^2+1^2=2$. The pairs $(\\pm 1, \\pm 1)$ are the $4$ solutions. Since $\\gcd(\\pm 1, \\pm 1)=1$, all are primitive. Thus, $r_2^{\\mathrm{prim}}(2) = 4$.\n    Therefore, $r_2(18) - r_2^{\\mathrm{prim}}(18) = 4 \\neq 0$. This contradicts the claim. The first part of the statement is false.\n\n2.  **Claim 2:** If $n=k^2$ with $k > 1$, then $r_2(k^2) - r_2^{\\mathrm{prim}}(k^2) = 4$, and the only non-primitive representations are those with a zero component.\n    Let's check the sub-claim that the only non-primitive representations are those with a zero component. A non-primitive representation $(x,y)$ has $\\gcd(x,y)>1$. A representation with a zero component, e.g., $(k,0)$ for $n=k^2$, is non-primitive if $k>1$ since $\\gcd(k,0)=k$.\n    Consider the counterexample $n=100=10^2$. So $k=10$. We have the representation $(6,8)$: $6^2+8^2=36+64=100$. Here $\\gcd(6,8)=2>1$, so this is a non-primitive representation. Neither component is zero. This falsifies the second part of the claim.\n    Let's also check the first part of the claim, $r_2(k^2) - r_2^{\\mathrm{prim}}(k^2) = 4$ for $k>1$. For $k=10$, the difference is $\\sum_{d>1, d^2 | 100} r_2^{\\mathrm{prim}}(100/d^2)$. Divisors of $10$ are $1, 2, 5, 10$, so $d$ can be $2, 5, 10$.\n    $r_2(100) - r_2^{\\mathrm{prim}}(100) = r_2^{\\mathrm{prim}}(100/4) + r_2^{\\mathrm{prim}}(100/25) + r_2^{\\mathrm{prim}}(100/100) = r_2^{\\mathrm{prim}}(25) + r_2^{\\mathrm{prim}}(4) + r_2^{\\mathrm{prim}}(1)$.\n    $r_2^{\\mathrm{prim}}(1)$: $x^2+y^2=1, \\gcd(x,y)=1$. Solutions are $(\\pm 1,0), (0,\\pm 1)$. $\\gcd(\\pm 1,0)=1$. So $r_2^{\\mathrm{prim}}(1)=4$.\n    $r_2^{\\mathrm{prim}}(4)$: $x^2+y^2=4, \\gcd(x,y)=1$. Solutions are $(\\pm 2,0), (0,\\pm 2)$. $\\gcd(\\pm 2,0)=2 \\neq 1$. So $r_2^{\\mathrm{prim}}(4)=0$.\n    $r_2^{\\mathrm{prim}}(25)$: $x^2+y^2=25, \\gcd(x,y)=1$. Solutions are $(\\pm 3, \\pm 4), (\\pm 4, \\pm 3)$. $\\gcd(\\pm 3, \\pm 4)=1$. There are $8$ such primitive representations. So $r_2^{\\mathrm{prim}}(25)=8$.\n    The difference is $8+0+4=12 \\neq 4$. This falsifies the first part of the claim.\n\nBoth claims in statement A are false.\nVerdict for A: **Incorrect**.\n\n### Option B Analysis\n\nThe statement is: \"For every $n$, one has the identity $r_2(n) \\;=\\; \\sum_{d^2 \\mid n} r_2^{\\mathrm{prim}}\\!\\left(\\frac{n}{d^2}\\right)$, where $r_2^{\\mathrm{prim}}(m)$ denotes the number of primitive representations of $m$. Moreover, representations with a zero component occur if and only if $n$ is a perfect square $k^2$, in which case $(\\pm k,0)$ and $(0,\\pm k)$ contribute exactly $4$ to $r_2(k^2)$, and these are primitive only when $k=1$.\"\n\nThis statement consists of three parts.\n1.  **The identity:** $r_2(n) = \\sum_{d^2|n} r_2^{\\mathrm{prim}}(n/d^2)$. As established in the preamble, this identity is a standard and correct result derived from partitioning the set of all representations by their greatest common divisor.\n2.  **Representations with a zero component:** A representation $(x,y)$ has a zero component if $x=0$ or $y=0$. If $y=0$, $x^2=n$. This requires $n$ to be a perfect square, say $n=k^2$ for some positive integer $k$. Then $x=\\pm k$, giving two representations $(\\pm k, 0)$. Similarly, if $x=0$, $y^2=n$ gives representations $(0, \\pm k)$. Thus, such representations exist if and only if $n$ is a perfect square $k^2$. They are $(k,0), (-k,0), (0,k), (0,-k)$, which are $4$ distinct representations. This part is correct.\n3.  **Primitivity of zero-component representations:** For the representation $(k,0)$, we have $\\gcd(k,0)=k$. For it to be primitive, we need $k=1$. The same applies to $(-k,0), (0,k), (0,-k)$. Thus, these four representations are primitive if and only if $k=1$. This is also correct.\n\nAll parts of statement B are correct.\nVerdict for B: **Correct**.\n\n### Option C Analysis\n\nThe statement is: \"If $n$ is squarefree and has no prime factor congruent to $3$ modulo $4$, then $r_2(n)$ equals the number of primitive representations. If $n$ is squarefree and has at least one prime factor congruent to $3$ modulo $4$, then both $r_2(n)$ and the number of primitive representations are $0$.\"\n\nThis statement consists of two conditional claims.\n1.  **Claim 1:** If $n$ is squarefree and has no prime factor $\\equiv 3 \\pmod 4$, then $r_2(n) = r_2^{\\mathrm{prim}}(n)$.\n    An integer $n$ is squarefree if its only square divisor is $1$. In this case, the sum in our fundamental identity only has one term corresponding to $d=1$:\n    $$r_2(n) = \\sum_{d^2 \\mid n} r_2^{\\mathrm{prim}}\\left(\\frac{n}{d^2}\\right) = r_2^{\\mathrm{prim}}\\left(\\frac{n}{1^2}\\right) = r_2^{\\mathrm{prim}}(n)$$\n    This equality $r_2(n)=r_2^{\\mathrm{prim}}(n)$ holds for **any** squarefree integer $n$. The additional condition that $n$ has no prime factor congruent to $3$ modulo $4$ does not alter the truth of this implication. In fact, this condition ensures that $r_2(n)$ is non-zero, but the equality holds regardless. The claim is therefore correct.\n\n2.  **Claim 2:** If $n$ is squarefree and has at least one prime factor $p \\equiv 3 \\pmod 4$, then $r_2(n)=0$ and $r_2^{\\mathrm{prim}}(n)=0$.\n    According to a fundamental theorem on sums of two squares (a generalization of Fermat's theorem), a positive integer $N$ can be written as a sum of two squares if and only if every prime factor of $N$ of the form $4j+3$ appears with an even exponent in the prime factorization of $N$.\n    Here, $n$ is squarefree, which means all prime factors in its factorization have an exponent of $1$. If $n$ is divisible by a prime $p \\equiv 3 \\pmod 4$, this prime appears with exponent $1$, which is odd. By the theorem, $n$ cannot be written as a sum of two squares, so $r_2(n)=0$.\n    As established in Claim 1, for any squarefree $n$, we have $r_2(n) = r_2^{\\mathrm{prim}}(n)$. Since $r_2(n)=0$, it follows immediately that $r_2^{\\mathrm{prim}}(n)=0$. Thus, this claim is also correct.\n\nBoth claims in statement C are correct.\nVerdict for C: **Correct**.\n\n### Option D Analysis\n\nThe statement is: \"The difference $r_2(n) - r_2^{\\mathrm{prim}}(n)$ is $0$ for all $n$ unless $n$ is a perfect square.\"\n\nThe phrase \"for all $n$ unless $n$ is a perfect square\" is logically equivalent to \"for all $n$ that are not perfect squares\". So the statement claims: if $n$ is not a perfect square, then $r_2(n) - r_2^{\\mathrm{prim}}(n) = 0$.\nThis is precisely the first claim made in statement A, which we have already proven false with the counterexample $n=18$. For $n=18$, which is not a perfect square, we found $r_2(18)-r_2^{\\mathrm{prim}}(18)=4 \\neq 0$.\nAnother counterexample: $n=50=2 \\cdot 5^2$. This is not a perfect square. The square divisors are $1$ and $25$.\n$r_2(50) - r_2^{\\mathrm{prim}}(50) = r_2^{\\mathrm{prim}}(50/5^2) = r_2^{\\mathrm{prim}}(2) = 4 \\neq 0$.\nThe statement is therefore false.\nVerdict for D: **Incorrect**.\n\nIn summary, statements B and C are true, while A and D are false.", "answer": "$$\\boxed{BC}$$", "id": "3089702"}, {"introduction": "While Fermat's theorem on sums of two squares tells us *that* a prime $p \\equiv 1 \\pmod{4}$ can be written as a sum of two squares, it does not tell us *how*. This computational exercise bridges that gap by having you implement Cornacchia’s algorithm, a beautiful and efficient method for finding the specific integer solution [@problem_id:3089708]. Translating this number-theoretic procedure into code will provide a deep, hands-on understanding of how abstract concepts like quadratic residues and the Euclidean algorithm combine to produce a concrete result.", "problem": "Implement a complete program that, for each given prime input $p$, attempts to find nonnegative integers $a$ and $b$ such that $a^2 + b^2 = p$ using Cornacchia’s algorithm. Your implementation must be grounded in first principles of number theory: use the concept of quadratic residues modulo a prime, Euler’s criterion for the Legendre symbol, and the Tonelli–Shanks algorithm to compute a square root modulo a prime. The mathematical foundation you may use includes the following well-tested facts and core definitions:\n- For an odd prime $p$, the Legendre symbol $\\left(\\frac{n}{p}\\right)$ equals $n^{\\frac{p-1}{2}} \\bmod p \\in \\{1,p-1\\}$ by Euler’s criterion, indicating whether $n$ is a quadratic residue modulo $p$.\n- For an odd prime $p$ with $p \\equiv 1 \\pmod{4}$, the integer $-1$ is a quadratic residue modulo $p$.\n- The Tonelli–Shanks algorithm deterministically computes a square root of a quadratic residue modulo an odd prime $p$.\n- Cornacchia’s algorithm, specialized to the case $D = 1$, uses any $r$ with $r^2 \\equiv -1 \\pmod p$ and the Euclidean algorithm to produce a candidate $x$ with $x^2 \\le p$, then checks whether $p - x^2$ is a perfect square.\n\nYour task:\n- Implement Cornacchia’s algorithm for the specific Diophantine equation $a^2 + b^2 = p$ with $p$ a prime.\n- When $p = 2$, return the trivial representation $1^2 + 1^2 = 2$.\n- When $p \\equiv 3 \\pmod{4}$, no nontrivial representation exists, and your program must return no pair.\n- When $p \\equiv 1 \\pmod{4}$, use the Tonelli–Shanks algorithm to compute a square root of $-1 \\bmod p$ and then carry out Cornacchia’s descent to obtain a candidate pair.\n- Your program must verify that the pair $(a,b)$ it outputs satisfies $a^2 + b^2 = p$. If no valid pair is found, output that no representation exists.\n\nInput specification for this challenge:\n- There is no external input. Your program must run on its own over the fixed test suite below.\n\nTest suite:\n- Primes to test: $[2, 5, 13, 29, 37, 97, 101, 109, 149, 3, 7, 11, 999983, 104729]$.\n\nOutput specification:\n- For each $p$ in the test suite, produce either:\n  - A list $[a,b]$ of two nonnegative integers ordered so that $a \\ge b \\ge 0$ satisfying $a^2 + b^2 = p$, or\n  - The empty list $[]$ if no such representation exists.\n- Aggregate the results for all test cases into a single line of output containing the results as a comma-separated list of the per-test-case outputs, enclosed in square brackets. For example, an output could look like $[[a_1,b_1],[],[a_3,b_3],\\dots]$ with no spaces.\n\nYour implementation must be self-contained, use only the standard library (plus the permitted libraries), and must not read from input nor write any additional text beyond the single required output line. All integers and expressions are unitless pure numbers; no physical units or angles are involved. The final output is a list of lists of integers as specified above.", "solution": "The problem of representing a prime number $p$ as a sum of two squares, i.e., finding non-negative integers $a$ and $b$ such that $a^2 + b^2 = p$, is a classical problem in number theory. The conditions for the existence of such a representation are given by Fermat's theorem on sums of two squares, which states that an odd prime $p$ can be expressed as a sum of two squares if and only if $p \\equiv 1 \\pmod{4}$. The prime $2$ is a special case, $2=1^2+1^2$. The problem as stated is well-posed and scientifically sound, providing a clear path to a solution through established algorithms. We will proceed by analyzing the cases for $p$ and applying Cornacchia's algorithm where appropriate.\n\nThe solution is partitioned into three cases based on the prime $p$:\n\n1.  **Case $p=2$**: The prime $p=2$ is the only even prime. The representation is trivially $2 = 1^2 + 1^2$. The pair of integers is $(1, 1)$.\n\n2.  **Case $p \\equiv 3 \\pmod{4}$**: For any integer $x$, its square $x^2$ can only be congruent to $0$ or $1$ modulo $4$.\n    - If $x$ is even, $x=2k$ for some integer $k$. Then $x^2 = (2k)^2 = 4k^2 \\equiv 0 \\pmod{4}$.\n    - If $x$ is odd, $x=2k+1$ for some integer $k$. Then $x^2 = (2k+1)^2 = 4k^2+4k+1 \\equiv 1 \\pmod{4}$.\n    Consequently, a sum of two squares, $a^2+b^2$, can only be congruent to $0+0=0$, $0+1=1$, or $1+1=2$ modulo $4$. A sum of two squares can never be congruent to $3$ modulo $4$. Since the given prime $p$ satisfies $p \\equiv 3 \\pmod{4}$, no integers $a, b$ can exist such that $a^2+b^2=p$.\n\n3.  **Case $p \\equiv 1 \\pmod{4}$**: For primes of this form, Fermat's theorem guarantees that a unique representation as a sum of two non-negative squares exists (up to ordering). The problem requires a constructive approach using Cornacchia's algorithm, which we now detail.\n\n**Cornacchia's Algorithm for $a^2 + b^2 = p$**\n\nThe algorithm is based on a constructive proof of Fermat's theorem. The existence of a solution pair $(a,b)$ for $p=a^2+b^2$ implies $a^2 \\equiv -b^2 \\pmod p$. Assuming $b \\not\\equiv 0 \\pmod p$ (which must be true, otherwise $p$ would be a perfect square, which is impossible for a prime), $b$ has a multiplicative inverse modulo $p$. Thus, we can write $(a \\cdot b^{-1})^2 \\equiv -1 \\pmod p$. This shows that a necessary condition for $p$ to be a sum of two squares is that $-1$ must be a quadratic residue modulo $p$. Cornacchia's algorithm constructively reverses this line of reasoning.\n\n**Step 1: Compute a square root of $-1$ modulo $p$**\n\nFor a prime $p$ such that $p \\equiv 1 \\pmod{4}$, we must first find an integer $r$ satisfying $r^2 \\equiv -1 \\pmod p$. The existence of such a root is guaranteed by Euler's criterion for the Legendre symbol:\n$$ \\left(\\frac{-1}{p}\\right) \\equiv (-1)^{\\frac{p-1}{2}} \\pmod p $$\nSince $p \\equiv 1 \\pmod{4}$, we can write $p=4k+1$ for some integer $k \\ge 1$. Then the exponent is $\\frac{p-1}{2} = \\frac{4k}{2} = 2k$, which is an even integer. Therefore, $\\left(\\frac{-1}{p}\\right) = 1$, confirming that $-1$ is a quadratic residue modulo $p$.\n\nTo compute $r$, we use the **Tonelli-Shanks algorithm**, a general method for finding square roots modulo a prime.\nLet $n \\equiv -1 \\pmod p$. The algorithm proceeds as follows:\n1.  Decompose $p-1$ as $p-1 = 2^S \\cdot Q$, where $Q$ is odd.\n2.  Find a quadratic non-residue $z$ modulo $p$. This can be done by testing integers $z=2, 3, \\dots$ and checking if $\\left(\\frac{z}{p}\\right) = z^{(p-1)/2} \\equiv -1 \\pmod p$. Such a $z$ is guaranteed to exist and is typically small.\n3.  Initialize the variables for the main loop:\n    -   $M \\leftarrow S$\n    -   $c \\leftarrow z^Q \\pmod p$\n    -   $t \\leftarrow n^Q \\pmod p$\n    -   $R \\leftarrow n^{(Q+1)/2} \\pmod p$\n4.  Repeatedly update the variables until $t \\equiv 1 \\pmod p$. In each iteration:\n    -   If $t \\equiv 1 \\pmod p$, the loop terminates and $R$ is a square root of $n$.\n    -   Find the smallest exponent $i \\in \\{1, 2, \\dots, M-1\\}$ such that $t^{2^i} \\equiv 1 \\pmod p$.\n    -   Compute a factor $b \\leftarrow c^{2^{M-i-1}} \\pmod p$.\n    -   Update the variables: $M \\leftarrow i$, $c \\leftarrow b^2 \\pmod p$, $t \\leftarrow t \\cdot c \\pmod p$, and $R \\leftarrow R \\cdot b \\pmod p$.\nLet the computed root be $r_0$. If $r_0 > p/2$, we may use $r = p - r_0$ for convenience, though the algorithm works with either root.\n\n**Step 2: Apply the Euclidean Algorithm (Cornacchia's Descent)**\n\nWith a root $r$ of $r^2+1 \\equiv 0 \\pmod p$ in hand, we apply the standard Euclidean algorithm to the pair $(p, r)$.\nWe generate the sequence of remainders $r_0=p, r_1=r, r_2 = r_0 \\pmod{r_1}, \\dots$.\nLet the sequence be defined by $r_{k+1} = r_{k-1} \\pmod{r_k}$. We continue this process until we find the first remainder $r_k$ such that $r_k < \\sqrt{p}$. Let this remainder be $x=r_k$. Thue's Lemma guarantees that such a remainder exists and provides the foundation for why this $x$ is a valid candidate.\n\n**Step 3: Test the Candidate Solution**\n\nLet $x$ be the candidate integer found in Step 2. We compute the value $s = p - x^2$. If $s$ is a perfect square, i.e., $s=y^2$ for some integer $y>0$, then we have found the representation $p = x^2+y^2$. We can verify if $s$ is a perfect square by computing its integer square root $y = \\lfloor\\sqrt{s}\\rfloor$ and checking if $y^2 = s$. If it is, the pair of integers is $(x,y)$. The final result is then ordered such that $a \\ge b$, so we set $a = \\max(x,y)$ and $b = \\min(x,y)$. If $s$ is not a perfect square, Cornacchia's algorithm has failed. However, for a prime $p \\equiv 1 \\pmod 4$, theory guarantees it will succeed.\n\nThis completes the full algorithm. The implementation will systematically apply these steps to each prime in the test suite.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport math\nimport numpy as np\n# from scipy import ...\n\ndef solve():\n    \"\"\"\n    Main function to run the algorithm on the test suite and print the results.\n    \"\"\"\n    test_cases = [2, 5, 13, 29, 37, 97, 101, 109, 149, 3, 7, 11, 999983, 104729]\n\n    results = []\n    for p in test_cases:\n        pair = find_sum_two_squares(p)\n        results.append(pair)\n\n    # Format the final output string as specified.\n    # str(list) adds spaces, so we build the string representation manually.\n    formatted_results = []\n    for res in results:\n        if res:\n            formatted_results.append(f\"[{res[0]},{res[1]}]\")\n        else:\n            formatted_results.append(\"[]\")\n    \n    print(f\"[{','.join(formatted_results)}]\")\n\ndef find_sum_two_squares(p: int) -> list[int]:\n    \"\"\"\n    Finds a representation of a prime p as a sum of two squares.\n    \n    Args:\n        p: A prime number.\n    \n    Returns:\n        A list [a, b] with a >= b >= 0 such that a^2 + b^2 = p,\n        or an empty list if no such representation exists.\n    \"\"\"\n    if p == 2:\n        return [1, 1]\n    \n    if p % 4 == 3:\n        return []\n\n    # Case p % 4 == 1\n    # Step 1: Find a square root of -1 mod p using Tonelli-Shanks\n    r = tonelli_shanks(p - 1, p)\n    \n    # Cornacchia's algorithm\n    # Step 2: Use Euclidean algorithm to find a candidate x\n    # We can choose the smaller root of -1 mod p\n    r = min(r, p - r)\n    \n    p_sqrt = math.isqrt(p)\n    \n    a, b = p, r\n    while b > p_sqrt:\n        a, b = b, a % b\n    \n    x = b\n    \n    # Step 3: Check if p - x^2 is a perfect square\n    s = p - x*x\n    if s > 0:\n        y = math.isqrt(s)\n        if y*y == s:\n            result = sorted([x, y], reverse=True)\n            # Verification\n            if result[0]**2 + result[1]**2 == p:\n                return result\n\n    return []\n\ndef tonelli_shanks(n: int, p: int) -> int:\n    \"\"\"\n    Tonelli-Shanks algorithm to find a square root of n modulo p.\n    Assumes p is an odd prime and n is a quadratic residue modulo p.\n    \n    Args:\n        n: An integer that is a quadratic residue modulo p.\n        p: An odd prime number.\n        \n    Returns:\n        An integer x such that x^2 % p == n.\n    \"\"\"\n    # Simple case for p % 4 == 3\n    if p % 4 == 3:\n        return pow(n, (p + 1) // 4, p)\n\n    # Decompose p-1 = 2^S * Q\n    Q = p - 1\n    S = 0\n    while Q % 2 == 0:\n        Q //= 2\n        S += 1\n\n    # Find a quadratic non-residue z\n    z = 2\n    while pow(z, (p - 1) // 2, p) == 1:\n        z += 1\n\n    # Initialize\n    M = S\n    c = pow(z, Q, p)\n    t = pow(n, Q, p)\n    R = pow(n, (Q + 1) // 2, p)\n\n    # Main loop\n    while t != 1:\n        if t == 0:\n            return 0\n        \n        i = 0\n        temp_t = t\n        while temp_t != 1:\n            temp_t = (temp_t * temp_t) % p\n            i += 1\n            if i == M: # Should not happen if n is a quadratic residue\n                return -1 \n        \n        power = M - i - 1\n        b = pow(c, 2**power, p)\n        \n        M = i\n        c = (b * b) % p\n        t = (t * c) % p\n        R = (R * b) % p\n        \n    return R\n\nif __name__ == '__main__':\n    solve()\n\n```", "id": "3089708"}, {"introduction": "Just as the Brahmagupta-Fibonacci identity ensures that the set of sums of two squares is closed under multiplication, a similar property holds for sums of four squares, a cornerstone of Lagrange's theorem. This property is not a coincidence but a consequence of the algebra of Hamilton quaternions [@problem_id:3089687]. In this exercise, you will step into this non-commutative world to perform a direct calculation, verifying that the norm of a product of quaternions equals the product of their norms and, in doing so, seeing the Euler four-square identity in action.", "problem": "Let $a$, $b$, $c$, and $d$ be integers and identify the quadruple $\\left(a,b,c,d\\right)$ with the Hamilton quaternion $q \\coloneqq a + b\\,\\mathbf{i} + c\\,\\mathbf{j} + d\\,\\mathbf{k}$, where $\\mathbf{i}$, $\\mathbf{j}$, and $\\mathbf{k}$ satisfy $\\mathbf{i}^2=\\mathbf{j}^2=\\mathbf{k}^2=-1$ and $\\mathbf{i}\\mathbf{j}=\\mathbf{k}$, $\\mathbf{j}\\mathbf{k}=\\mathbf{i}$, $\\mathbf{k}\\mathbf{i}=\\mathbf{j}$ together with anti-commutativity $\\mathbf{j}\\mathbf{i}=-\\mathbf{k}$, $\\mathbf{k}\\mathbf{j}=-\\mathbf{i}$, $\\mathbf{i}\\mathbf{k}=-\\mathbf{j}$. The squared norm of $q$ is defined by $N(q)\\coloneqq a^2+b^2+c^2+d^2$. The composition of sums of four squares arises from multiplying such quaternions and comparing squared norms.\n\nUsing only these definitions, carry out the following with the small integer quadruples $\\left(1,2,2,3\\right)$ and $\\left(1,1,2,2\\right)$:\n\n- Interpret them as quaternions $q \\coloneqq 1 + 2\\,\\mathbf{i} + 2\\,\\mathbf{j} + 3\\,\\mathbf{k}$ and $r \\coloneqq 1 + 1\\,\\mathbf{i} + 2\\,\\mathbf{j} + 2\\,\\mathbf{k}$.\n- Compute the product $s \\coloneqq q\\,r$ using only the multiplication rules stated above, and then compute $N(s)$ directly from its components.\n- Separately compute $N(q)$ and $N(r)$, form the product $N(q)\\,N(r)$, and verify numerically that it matches your computed $N(s)$ by explicit calculation.\n\nReport the common numerical value of $N(s)$ and $N(q)\\,N(r)$. Your final answer must be a single integer. Do not round.", "solution": "We begin from the definitions of Hamilton quaternions and their multiplication rules, together with the definition of the squared norm $N(a + b\\,\\mathbf{i} + c\\,\\mathbf{j} + d\\,\\mathbf{k}) \\coloneqq a^2 + b^2 + c^2 + d^2$.\n\nFirst, interpret the given quadruples as quaternions:\n- $q \\coloneqq 1 + 2\\,\\mathbf{i} + 2\\,\\mathbf{j} + 3\\,\\mathbf{k}$,\n- $r \\coloneqq 1 + 1\\,\\mathbf{i} + 2\\,\\mathbf{j} + 2\\,\\mathbf{k}$.\n\nCompute the product $s \\coloneqq q\\,r$ by distributivity and the multiplication rules $\\mathbf{i}^2=\\mathbf{j}^2=\\mathbf{k}^2=-1$, $\\mathbf{i}\\mathbf{j}=\\mathbf{k}$, $\\mathbf{j}\\mathbf{k}=\\mathbf{i}$, $\\mathbf{k}\\mathbf{i}=\\mathbf{j}$, and anti-commutativity for reversed order:\n\nExpand $q\\,r$ term by term:\n- From $1 \\cdot r$: $1 + 1\\,\\mathbf{i} + 2\\,\\mathbf{j} + 2\\,\\mathbf{k}$.\n- From $2\\,\\mathbf{i} \\cdot r$: $2\\,\\mathbf{i} + 2\\,\\mathbf{i}^2 + 4\\,\\mathbf{i}\\mathbf{j} + 4\\,\\mathbf{i}\\mathbf{k} = 2\\,\\mathbf{i} - 2 + 4\\,\\mathbf{k} - 4\\,\\mathbf{j}$, using $\\mathbf{i}^2=-1$, $\\mathbf{i}\\mathbf{j}=\\mathbf{k}$, $\\mathbf{i}\\mathbf{k}=-\\mathbf{j}$.\n- From $2\\,\\mathbf{j} \\cdot r$: $2\\,\\mathbf{j} + 2\\,\\mathbf{j}\\mathbf{i} + 4\\,\\mathbf{j}^2 + 4\\,\\mathbf{j}\\mathbf{k} = 2\\,\\mathbf{j} - 2\\,\\mathbf{k} - 4 + 4\\,\\mathbf{i}$, using $\\mathbf{j}\\mathbf{i}=-\\mathbf{k}$, $\\mathbf{j}^2=-1$, $\\mathbf{j}\\mathbf{k}=\\mathbf{i}$.\n- From $3\\,\\mathbf{k} \\cdot r$: $3\\,\\mathbf{k} + 3\\,\\mathbf{k}\\mathbf{i} + 6\\,\\mathbf{k}\\mathbf{j} + 6\\,\\mathbf{k}^2 = 3\\,\\mathbf{k} + 3\\,\\mathbf{j} - 6\\,\\mathbf{i} - 6$, using $\\mathbf{k}\\mathbf{i}=\\mathbf{j}$, $\\mathbf{k}\\mathbf{j}=-\\mathbf{i}$, $\\mathbf{k}^2=-1$.\n\nNow group scalar, $\\mathbf{i}$, $\\mathbf{j}$, and $\\mathbf{k}$ parts:\n\n- Scalar part: $1 + (-2) + (-4) + (-6) = -11$.\n- $\\mathbf{i}$ part: $1 + 2 + 4 + (-6) = 1$.\n- $\\mathbf{j}$ part: $2 + (-4) + 2 + 3 = 3$.\n- $\\mathbf{k}$ part: $2 + 4 + (-2) + 3 = 7$.\n\nThus,\n$$\ns \\coloneqq q\\,r = -11 + 1\\,\\mathbf{i} + 3\\,\\mathbf{j} + 7\\,\\mathbf{k}.\n$$\n\nCompute its squared norm:\n$$\nN(s) = (-11)^2 + 1^2 + 3^2 + 7^2 = 121 + 1 + 9 + 49 = 180.\n$$\n\nNow compute $N(q)$ and $N(r)$ separately:\n- $N(q) = 1^2 + 2^2 + 2^2 + 3^2 = 1 + 4 + 4 + 9 = 18$.\n- $N(r) = 1^2 + 1^2 + 2^2 + 2^2 = 1 + 1 + 4 + 4 = 10$.\n\nTheir product is\n$$\nN(q)\\,N(r) = 18 \\cdot 10 = 180.\n$$\n\nWe have verified numerically, by direct computation from the definitions, that $N(s)$ equals $N(q)\\,N(r)$ for these specific tuples, and the common value is $180$. Hence the requested value is $180$.", "answer": "$$\\boxed{180}$$", "id": "3089687"}]}