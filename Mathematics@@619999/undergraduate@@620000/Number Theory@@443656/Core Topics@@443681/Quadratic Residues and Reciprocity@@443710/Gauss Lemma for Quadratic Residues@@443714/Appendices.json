{"hands_on_practices": [{"introduction": "The best way to truly grasp a new mathematical tool is to apply it directly. This first exercise provides a hands-on opportunity to walk through the mechanics of Gauss's Lemma step-by-step. By manually calculating the least absolute residues and counting the negatives for a specific case, you will build a concrete intuition for how the lemma connects the properties of modular arithmetic to the value of the Legendre symbol [@problem_id:3085442].", "problem": "Let $p$ be an odd prime and let the least absolute residue of an integer $x$ modulo $p$ be the unique integer $\\rho$ with $-\\frac{p-1}{2} \\le \\rho \\le \\frac{p-1}{2}$ such that $\\rho \\equiv x \\pmod{p}$. For $p=41$ and $a=13$, consider the set of multiples $\\{13, 26, \\dots, 13 \\cdot 20\\}$ and their least absolute residues modulo $41$. Let $m$ denote the number of negative elements among these least absolute residues. Using the definition of the Legendre symbol $\\left(\\frac{a}{p}\\right)$ and the content of Gauss's lemma for quadratic residues as a foundational tool, determine the exact value of the Legendre symbol $\\left(\\frac{13}{41}\\right)$ by explicitly computing $m$ from these residues and deducing the sign determined by $(-1)^m$. \n\nYour final answer must be the single numeric value of $\\left(\\frac{13}{41}\\right)$.", "solution": "The user-provided problem is valid as it is an entirely self-contained, well-posed, and scientifically grounded problem within the domain of elementary number theory. It requests a direct application of a standard theorem, Gauss's lemma, with all necessary parameters provided.\n\nThe problem asks to determine the value of the Legendre symbol $\\left(\\frac{13}{41}\\right)$ by explicitly applying Gauss's lemma. Let $p$ be an odd prime and $a$ be an integer not divisible by $p$. Gauss's lemma states that\n$$\n\\left(\\frac{a}{p}\\right) = (-1)^m\n$$\nwhere $m$ is the number of integers in the set $S = \\{a, 2a, 3a, \\dots, \\frac{p-1}{2}a\\}$ whose least non-negative residues modulo $p$ are greater than $\\frac{p}{2}$. An equivalent condition is that $m$ is the number of elements in $S$ that have a negative least absolute residue modulo $p$.\n\nIn this problem, we are given $a=13$ and $p=41$. Since $41$ is an odd prime and $13$ is not a multiple of $41$, the Legendre symbol $\\left(\\frac{13}{41}\\right)$ is well-defined.\n\nFirst, we identify the range of integers $k$ for the multiples $ka$. The set of multiples is defined for $k$ from $1$ to $\\frac{p-1}{2}$.\nFor $p=41$, we have $\\frac{p-1}{2} = \\frac{41-1}{2} = 20$.\nThus, we must consider the set of multiples $S = \\{13k \\mid 1 \\le k \\le 20\\}$.\n\nThe problem defines the least absolute residue of an integer $x$ modulo $p$ to be the unique integer $\\rho$ such that $-\\frac{p-1}{2} \\le \\rho \\le \\frac{p-1}{2}$, which is the interval $[-20, 20]$ for $p=41$.\n\nWe need to find $m$, the number of multiples $13k$ for $k=1, \\dots, 20$ that have a negative least absolute residue modulo $41$. A residue is negative in this system if its standard least non-negative residue $r$ (where $0 \\le r < p$) falls in the range $\\frac{p}{2} < r < p$. For $p=41$, this means $20.5 < r < 41$.\n\nWe will now compute the least non-negative residue $r_k = 13k \\pmod{41}$ for each $k$ from $1$ to $20$ and determine if $r_k > 20.5$. The count of such cases will be our value for $m$.\n\nFor $k=1$: $13 \\cdot 1 = 13 \\equiv 13 \\pmod{41}$. $13 \\ngtr 20.5$. Least absolute residue is $13$.\nFor $k=2$: $13 \\cdot 2 = 26 \\equiv 26 \\pmod{41}$. $26 > 20.5$. Least absolute residue is $26 - 41 = -15$. (Count: 1)\nFor $k=3$: $13 \\cdot 3 = 39 \\equiv 39 \\pmod{41}$. $39 > 20.5$. Least absolute residue is $39 - 41 = -2$. (Count: 2)\nFor $k=4$: $13 \\cdot 4 = 52 \\equiv 11 \\pmod{41}$. $11 \\ngtr 20.5$. Least absolute residue is $11$.\nFor $k=5$: $13 \\cdot 5 = 65 \\equiv 24 \\pmod{41}$. $24 > 20.5$. Least absolute residue is $24 - 41 = -17$. (Count: 3)\nFor $k=6$: $13 \\cdot 6 = 78 \\equiv 37 \\pmod{41}$. $37 > 20.5$. Least absolute residue is $37 - 41 = -4$. (Count: 4)\nFor $k=7$: $13 \\cdot 7 = 91 = 2 \\cdot 41 + 9 \\equiv 9 \\pmod{41}$. $9 \\ngtr 20.5$. Least absolute residue is $9$.\nFor $k=8$: $13 \\cdot 8 = 104 = 2 \\cdot 41 + 22 \\equiv 22 \\pmod{41}$. $22 > 20.5$. Least absolute residue is $22 - 41 = -19$. (Count: 5)\nFor $k=9$: $13 \\cdot 9 = 117 = 2 \\cdot 41 + 35 \\equiv 35 \\pmod{41}$. $35 > 20.5$. Least absolute residue is $35 - 41 = -6$. (Count: 6)\nFor $k=10$: $13 \\cdot 10 = 130 = 3 \\cdot 41 + 7 \\equiv 7 \\pmod{41}$. $7 \\ngtr 20.5$. Least absolute residue is $7$.\nFor $k=11$: $13 \\cdot 11 = 143 = 3 \\cdot 41 + 20 \\equiv 20 \\pmod{41}$. $20 \\ngtr 20.5$. Least absolute residue is $20$.\nFor $k=12$: $13 \\cdot 12 = 156 = 3 \\cdot 41 + 33 \\equiv 33 \\pmod{41}$. $33 > 20.5$. Least absolute residue is $33 - 41 = -8$. (Count: 7)\nFor $k=13$: $13 \\cdot 13 = 169 = 4 \\cdot 41 + 5 \\equiv 5 \\pmod{41}$. $5 \\ngtr 20.5$. Least absolute residue is $5$.\nFor $k=14$: $13 \\cdot 14 = 182 = 4 \\cdot 41 + 18 \\equiv 18 \\pmod{41}$. $18 \\ngtr 20.5$. Least absolute residue is $18$.\nFor $k=15$: $13 \\cdot 15 = 195 = 4 \\cdot 41 + 31 \\equiv 31 \\pmod{41}$. $31 > 20.5$. Least absolute residue is $31 - 41 = -10$. (Count: 8)\nFor $k=16$: $13 \\cdot 16 = 208 = 5 \\cdot 41 + 3 \\equiv 3 \\pmod{41}$. $3 \\ngtr 20.5$. Least absolute residue is $3$.\nFor $k=17$: $13 \\cdot 17 = 221 = 5 \\cdot 41 + 16 \\equiv 16 \\pmod{41}$. $16 \\ngtr 20.5$. Least absolute residue is $16$.\nFor $k=18$: $13 \\cdot 18 = 234 = 5 \\cdot 41 + 29 \\equiv 29 \\pmod{41}$. $29 > 20.5$. Least absolute residue is $29 - 41 = -12$. (Count: 9)\nFor $k=19$: $13 \\cdot 19 = 247 = 6 \\cdot 41 + 1 \\equiv 1 \\pmod{41}$. $1 \\ngtr 20.5$. Least absolute residue is $1$.\nFor $k=20$: $13 \\cdot 20 = 260 = 6 \\cdot 41 + 14 \\equiv 14 \\pmod{41}$. $14 \\ngtr 20.5$. Least absolute residue is $14$.\n\nBy counting the instances where the least non-negative residue is greater than $20.5$ (which correspond to negative least absolute residues), we find there are $9$ such cases.\nTherefore, $m=9$.\n\nAccording to Gauss's lemma, the value of the Legendre symbol is given by $(-1)^m$.\n$$\n\\left(\\frac{13}{41}\\right) = (-1)^m = (-1)^9 = -1\n$$\nThis means that $13$ is a quadratic non-residue modulo $41$.", "answer": "$$\\boxed{-1}$$", "id": "3085442"}, {"introduction": "Once you understand how to apply a formula, the next crucial step is to understand why it is constructed the way it is. This practice challenges you to analyze a common misconception about the range of summation in Gauss's Lemma. By identifying the logical flaw in extending the sum over all residues, you will solidify your understanding of the critical role symmetry plays in the lemma's proof and why the range must be restricted to $\\{1, 2, \\dots, \\frac{p-1}{2}\\}$ [@problem_id:3013379].", "problem": "Let $p$ be an odd prime and let $a \\in \\mathbb{Z}$ with $\\gcd(a,p)=1$. The Legendre symbol $\\left(\\frac{a}{p}\\right)$ is defined by $\\left(\\frac{a}{p}\\right)=1$ if $a$ is a quadratic residue modulo $p$ and $\\left(\\frac{a}{p}\\right)=-1$ otherwise. In one standard route toward relating $\\left(\\frac{a}{p}\\right)$ to a sign coming from a product, many proofs consider the least positive residues of the multiples $j a$ modulo $p$ for $1 \\le j \\le \\frac{p-1}{2}$ and then perform a parity count relative to the threshold $\\frac{p}{2}$.\n\nA student instead proposes to take $j$ through the full range $1 \\le j \\le p-1$, to count how many least positive residues of $j a \\bmod p$ lie in the open interval $\\left(\\frac{p}{2},p\\right)$, and to use the parity of this count as a proxy for $\\left(\\frac{a}{p}\\right)$. Identify the precise logical error in this proposal and select the minimal correction that makes the counting argument valid.\n\nChoose the single best answer.\n\nA. Over the full range $1 \\le j \\le p-1$, the multiset of least positive residues of $j a \\bmod p$ is a permutation of $\\{1,2,\\dots,p-1\\}$, and for each pair $\\{j,p-j\\}$ the corresponding residues $r_j$ and $r_{p-j}$ satisfy $r_{p-j}=p-r_j$. Since $p$ is odd, exactly one of $r_j$ and $r_{p-j}$ lies in $\\left(\\frac{p}{2},p\\right)$, so the proposed count is always $\\frac{p-1}{2}$, independent of $a$. Thus the method cannot distinguish residues from nonresidues. The minimal correction is to break this symmetry by restricting to $1 \\le j \\le \\frac{p-1}{2}$ (equivalently, to choose one representative from each pair $\\{j,p-j\\}$), and then to perform the parity count relative to $\\frac{p}{2}$.\n\nB. The only mistake is the omission of $j=0$. If one counts least positive residues for $0 \\le j \\le p-1$ and uses the parity of those exceeding $\\frac{p}{2}$, the method becomes valid without further change.\n\nC. The defect arises from the choice of threshold $\\frac{p}{2}$. Keeping $1 \\le j \\le p-1$ but counting those least positive residues in $\\left(\\frac{p}{3},p\\right)$ instead restores correctness for all odd primes $p$.\n\nD. The argument fails only when $p \\equiv 1 \\pmod{4}$. When $p \\equiv 3 \\pmod{4}$, taking $1 \\le j \\le p-1$ and counting those least positive residues in $\\left(\\frac{p}{2},p\\right)$ does yield the correct parity for $\\left(\\frac{a}{p}\\right)$.\n\nE. There is no error: because multiplication by $a$ permutes the nonzero residue classes modulo $p$, the number of least positive residues of $j a \\bmod p$ that lie in $\\left(\\frac{p}{2},p\\right)$ depends on $a$, so the parity correctly recovers $\\left(\\frac{a}{p}\\right)$ for all $a$.", "solution": "The user-provided problem statement is valid. It is a well-posed question within the domain of elementary number theory, based on established mathematical principles.\n\nThe student's proposal is to calculate the Legendre symbol $\\left(\\frac{a}{p}\\right)$ by counting the number of least positive residues of $ja \\pmod p$ for $j$ in the range $1 \\le j \\le p-1$ that fall into the interval $\\left(\\frac{p}{2},p\\right)$, and then checking the parity of this count.\n\nLet's analyze this proposal.\nLet $S = \\{1, 2, \\dots, p-1\\}$. The student considers the multiset of least positive residues $R_a = \\{ (ja \\pmod p) \\mid j \\in S \\}$.\nSince $p$ is a prime number and $\\gcd(a,p)=1$, the map $x \\mapsto ax$ is an automorphism of the multiplicative group of integers modulo $p$, $(\\mathbb{Z}/p\\mathbb{Z})^\\times$. The set of least positive representatives of the elements in $(\\mathbb{Z}/p\\mathbb{Z})^\\times$ is precisely the set $S$.\nTherefore, for any $a$ with $\\gcd(a,p)=1$, the set of residues $R_a$ is simply a permutation of the set $S$. As sets, they are identical:\n$$R_a = \\{1, 2, \\dots, p-1\\}$$\nThe student proposes to count the number of elements in $R_a$ that are in the open interval $\\left(\\frac{p}{2}, p\\right)$. Let this count be $N$. Since $R_a$ is always the set $\\{1, 2, \\dots, p-1\\}$ regardless of $a$, the count $N$ will be independent of $a$.\n\nLet's calculate $N$. The integers $k$ such that $1 \\le k \\le p-1$ and $\\frac{p}{2} < k < p$ are the integers from $\\lfloor \\frac{p}{2} \\rfloor + 1$ to $p-1$.\nSince $p$ is an odd prime, we can write $p = 2k_0+1$ for some integer $k_0 \\ge 1$. Then $\\frac{p-1}{2} = k_0$, and $\\frac{p}{2} = k_0 + \\frac{1}{2}$.\nThe condition becomes $k_0 + \\frac{1}{2} < k < 2k_0+1$. The integers satisfying this are $k_0+1, k_0+2, \\dots, 2k_0$.\nThe number of these integers is $N = 2k_0 - (k_0+1) + 1 = k_0$.\nThus, the count is always $N = k_0 = \\frac{p-1}{2}$.\n\nThe student's method proposes that $\\left(\\frac{a}{p}\\right)$ is given by the parity of $N$, specifically $(-1)^N = (-1)^{(p-1)/2}$.\nFrom the theory of quadratic residues, it is a known result (as part of the first supplement to the law of quadratic reciprocity) that $\\left(\\frac{-1}{p}\\right) = (-1)^{(p-1)/2}$.\nSo, the student's method does not calculate $\\left(\\frac{a}{p}\\right)$, but rather calculates $\\left(\\frac{-1}{p}\\right)$, a value which is independent of $a$. This method fails to distinguish between quadratic residues and non-residues for a given $p$. This is the precise logical error.\n\nThe standard method that the student's proposal resembles is Gauss's Lemma. Gauss's Lemma restricts the range of $j$ to $1 \\le j \\le \\frac{p-1}{2}$. Let $m$ be the number of least positive residues of $ja \\pmod p$ for $j \\in \\{1, \\dots, \\frac{p-1}{2}\\}$ that are greater than $\\frac{p}{2}$. Then Gauss's Lemma states that $\\left(\\frac{a}{p}\\right) = (-1)^m$. The count $m$ *does* depend on $a$, unlike the student's count $N$. The reason for the failure of the student's method is the symmetric range $1 \\le j \\le p-1$. For any $j_0 \\in \\{1, \\dots, p-1\\}$, let $r_{j_0}$ be the least positive residue of $j_0 a \\pmod p$. Then for $j = p - j_0$, the residue is $(p-j_0)a \\pmod p \\equiv -j_0 a \\pmod p$, which has a least positive residue of $p-r_{j_0}$. The set of residues $\\{r_j\\}$ for $j=1, \\dots, p-1$ consists of pairs $(r_{j_0}, p-r_{j_0})$. Since $p$ is odd, $p/2$ is not an integer. For any pair $(r, p-r)$, exactly one element is in the interval $\\left(\\frac{p}{2}, p\\right)$. There are $\\frac{p-1}{2}$ such pairs of indices $\\{j_0, p-j_0\\}$, so the total count is always $\\frac{p-1}{2}$. Restricting $j$ to $1 \\le j \\le \\frac{p-1}{2}$ breaks this symmetry and allows for a count that depends on $a$.\n\nNow, we evaluate each option.\n\nA. This option correctly states that the set of residues is a permutation of $\\{1, 2, \\dots, p-1\\}$. It correctly identifies the symmetry: for each pair of indices $\\{j, p-j\\}$, the residues are $r_j$ and $p-r_j$. It correctly concludes that this implies exactly one of these two residues is in $\\left(\\frac{p}{2}, p\\right)$. It correctly deduces that the total count is therefore always $\\frac{p-1}{2}$, independent of $a$, which is the core error. It then correctly identifies the minimal correction: restrict the range of $j$ to $1 \\le j \\le \\frac{p-1}{2}$, which breaks the symmetry and turns the flawed argument into Gauss's Lemma. This option is a complete and accurate analysis. This is **Correct**.\n\nB. This option suggests including $j=0$. The product $0 \\cdot a = 0$, so the residue is $0$. The number $0$ is not in the interval $\\left(\\frac{p}{2}, p\\right)$. Adding this does not change the count of residues in that interval. The total count would remain $\\frac{p-1}{2}$, and the method would still be independent of $a$. This is **Incorrect**.\n\nC. This option suggests changing the threshold from $\\frac{p}{2}$ to $\\frac{p}{3}$. As shown in the initial analysis, the set of residues to be counted is always $\\{1, 2, \\dots, p-1\\}$. Counting how many of these fall into $\\left(\\frac{p}{3}, p\\right)$ would yield a count of $(p-1) - \\lfloor\\frac{p}{3}\\rfloor$. This number is, again, independent of $a$. The fundamental flaw of using the full range $1 \\le j \\le p-1$ is not addressed. This is **Incorrect**.\n\nD. This option claims the argument only fails for $p \\equiv 1 \\pmod{4}$. As derived, the student's method always yields $(-1)^{(p-1)/2}$. If $p \\equiv 3 \\pmod{4}$, then $\\frac{p-1}{2}$ is odd, so the method's result is always $-1$. However, for any prime $p$, there exist quadratic residues $a$ for which $\\left(\\frac{a}{p}\\right)=1$ (for instance, $a=1$). Therefore, the method fails for $p \\equiv 3 \\pmod{4}$ just as it fails for $p \\equiv 1 \\pmod{4}$. The claim is false. This is **Incorrect**.\n\nE. This option claims there is no error. This is verifiably false. It correctly notes that multiplication by $a$ permutes the residue classes, but draws the incorrect conclusion that the count must therefore depend on $a$. The set of elements being permuted is fixed, so the number of elements with a certain property (being greater than $\\frac{p}{2}$) is independent of the specific permutation. This is **Incorrect**.\n\nThe only option that correctly identifies the error, explains its origin, and proposes the correct minimal fix is A.", "answer": "$$\\boxed{A}$$", "id": "3013379"}, {"introduction": "Moving from theory to application is a hallmark of a mature scientific understanding. This final practice guides you to translate the abstract procedure of Gauss's Lemma into a concrete computational algorithm. Designing this algorithm and analyzing its efficiency not only tests your comprehension of the lemma but also connects this classical number theory result to the modern field of computational mathematics, where such tools are fundamental [@problem_id:3085438].", "problem": "Let $p$ be an odd prime and let $a$ be any integer. The Legendre symbol $\\left(\\frac{a}{p}\\right)$ is defined by the following three-way classification: $\\left(\\frac{a}{p}\\right)=0$ if $p$ divides $a$, $\\left(\\frac{a}{p}\\right)=1$ if $a$ is a quadratic residue modulo $p$, and $\\left(\\frac{a}{p}\\right)=-1$ otherwise. Design and implement an algorithm that computes $\\left(\\frac{a}{p}\\right)$ by the following procedure grounded in Gauss’s lemma: reduce $a$ modulo $p$ to a representative in $\\{0,1,2,\\dots,p-1\\}$; if the reduced value is $0$, return $0$. Otherwise, for each integer $k$ from $1$ to $\\frac{p-1}{2}$, reduce $ka$ modulo $p$ and then map the result to its least absolute residue in the interval $(-\\frac{p}{2}, \\frac{p}{2}]$; count how many of these least absolute residues are negative, and use this count to determine $\\left(\\frac{a}{p}\\right)$. Your design must start from fundamental definitions of the Legendre symbol and least absolute residues and be justified by first principles; avoid introducing any ready-made shortcut formulas for the symbol itself.\n\nIn addition to the algorithm design, analyze its running time as a function of $p$. State your complexity in Big-Oh notation and justify it under the Random Access Machine (RAM) model of computation, where each arithmetic operation on integers of size $O(\\log p)$ bits is counted as $O(1)$ time. Also discuss the bit complexity when the cost of each arithmetic operation scales with the number of bits involved.\n\nImplement the algorithm in a single, complete program that hardcodes the following test suite of $(a,p)$ pairs and produces their Legendre symbol values in the specified order:\n- Test $1$: $a=2$, $p=3$.\n- Test $2$: $a=3$, $p=7$.\n- Test $3$: $a=5$, $p=11$.\n- Test $4$: $a=2$, $p=29$.\n- Test $5$: $a=0$, $p=19$.\n- Test $6$: $a=-1$, $p=13$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $\\left[\\,r_1,r_2,\\dots,r_6\\,\\right]$), where each $r_i$ is the integer value of $\\left(\\frac{a}{p}\\right)$ for the corresponding test. The only allowed output types are boolean, integer, float, or a list of these fundamental types; for this task, each $r_i$ must be an integer from the set $\\{-1,0,1\\}$.", "solution": "The problem statement is evaluated as valid. It presents a well-defined task in computational number theory that is scientifically sound, self-contained, and consistent. The task is to design, analyze, and implement an algorithm for computing the Legendre symbol using a procedure based on Gauss's lemma.\n\n### Algorithm Design and Theoretical Justification\n\nThe objective is to compute the Legendre symbol $\\left(\\frac{a}{p}\\right)$ for an integer $a$ and an odd prime $p$.\n\n**1. Definition of the Legendre Symbol**\n\nThe Legendre symbol $\\left(\\frac{a}{p}\\right)$ is defined for an integer $a$ and an odd prime $p$ as follows:\n$$\n\\left(\\frac{a}{p}\\right) = \n\\begin{cases}\n\\phantom{-}0 & \\text{if } a \\equiv 0 \\pmod{p} \\\\\n\\phantom{-}1 & \\text{if } a \\not\\equiv 0 \\pmod{p} \\text{ and there exists an integer } x \\text{ such that } x^2 \\equiv a \\pmod{p} \\\\\n-1 & \\text{if } a \\not\\equiv 0 \\pmod{p} \\text{ and no such } x \\text{ exists}\n\\end{cases}\n$$\nAn integer $a$ satisfying the second case is called a quadratic residue modulo $p$. An integer satisfying the third case is a quadratic non-residue modulo $p$.\n\n**2. Gauss's Lemma**\n\nThe specified algorithm is a direct application of Gauss's lemma, a fundamental theorem for computing the Legendre symbol. The lemma is stated as follows:\n\nLet $p$ be an odd prime and let $a$ be an integer such that $\\gcd(a, p) = 1$. Consider the set of integers $S$:\n$$ S = \\left\\{ a, 2a, 3a, \\dots, \\left(\\frac{p-1}{2}\\right)a \\right\\} $$\nLet $n$ be the number of elements in $S$ whose least non-negative residue modulo $p$ is greater than $\\frac{p}{2}$. Then, the Legendre symbol is given by:\n$$ \\left(\\frac{a}{p}\\right) = (-1)^n $$\n\nThe problem asks to count the number of negative least absolute residues. Let's formalize this connection. The set of least absolute residues modulo $p$ is the set of integers in the interval $(-\\frac{p}{2}, \\frac{p}{2}]$. For an odd prime $p$, this integer set is $\\{ -\\frac{p-1}{2}, \\dots, -1, 0, 1, \\dots, \\frac{p-1}{2} \\}$.\nFor any integer $m$, its least non-negative residue modulo $p$ is a value $r \\in \\{0, 1, \\dots, p-1\\}$. Its least absolute residue, $r'$, is related to $r$ as follows:\n- If $0 \\le r \\le \\frac{p-1}{2}$, then $r' = r$. These values are non-negative.\n- If $\\frac{p+1}{2} \\le r \\le p-1$, then $r' = r-p$. These values are negative, specifically $r' \\in \\{-\\frac{p-1}{2}, \\dots, -1\\}$.\n\nThe condition $r > \\frac{p}{2}$ is equivalent to $r \\ge \\frac{p+1}{2}$ for an integer $r$. Thus, counting the number of elements $ka \\in S$ for which the least non-negative residue $r = (ka \\pmod p)$ satisfies $r > \\frac{p}{2}$ is identical to counting the number of elements for which the least absolute residue is negative. The integer $n$ in Gauss's lemma is precisely this count.\n\n**3. Algorithm**\n\nBased on the preceding principles, a formal algorithm is designed as follows:\n\n**Input**: An integer $a$ and an odd prime $p$.\n**Output**: The value of the Legendre symbol $\\left(\\frac{a}{p}\\right) \\in \\{-1, 0, 1\\}$.\n\n1.  **Handle Divisibility**: Compute the residue $a' = a \\pmod p$. Per the definition, if $a' = 0$, the Legendre symbol is $0$. The algorithm returns $0$ and terminates.\n\n2.  **Initialize Counter**: If $a' \\neq 0$, initialize a counter $n=0$. This counter will store the number of residues greater than $\\frac{p}{2}$.\n\n3.  **Iterate and Count**: Loop through the integers $k$ from $1$ to $\\frac{p-1}{2}$, inclusive. For each $k$:\n    a. Calculate the product $m = k \\cdot a'$.\n    b. Find the least non-negative residue $r = m \\pmod p$.\n    c. Check if $r > \\frac{p}{2}$. If this condition is true, increment the counter $n$.\n\n4.  **Determine Result**: After the loop completes, the value of the Legendre symbol is determined by the parity of $n$.\n    - If $n$ is even, $\\left(\\frac{a}{p}\\right) = (-1)^n = 1$.\n    - If $n$ is odd, $\\left(\\frac{a}{p}\\right) = (-1)^n = -1$.\n    The algorithm returns $1$ or $-1$ accordingly.\n\n### Complexity Analysis\n\nThe analysis is performed first under the Random Access Machine (RAM) model and then considering bit complexity.\n\n**1. RAM Model Analysis**\n\nThis model assumes that arithmetic operations (addition, multiplication, division with remainder) on integers that fit within a machine word take constant time, $O(1)$. We assume that $p$, and thus all intermediate values like $k$, $a'$, and $r$, fit within a machine word. This aligns with the problem's specification of operating on integers of size $O(\\log p)$ bits.\n\n- **Step 1 (Residue computation)**: Calculating $a' = a \\pmod p$ takes $O(1)$ time, assuming $a$ also fits within a constant number of machine words.\n- **Step 2 (Initialization)**: $n=0$ takes $O(1)$ time.\n- **Step 3 (Loop)**: The loop executes $\\frac{p-1}{2}$ times, which is $O(p)$ iterations.\n    - Inside the loop, the multiplication $k \\cdot a'$, the modulo operation $m \\pmod p$, the comparison $r > \\frac{p}{2}$, and the potential increment of $n$ are all considered $O(1)$ operations under this model.\n    - Therefore, the total time for the loop is $O(p) \\times O(1) = O(p)$.\n- **Step 4 (Final Result)**: Checking the parity of $n$ is an $O(1)$ operation.\n\nThe dominant part of the algorithm is the loop. Consequently, the total time complexity of the algorithm under the RAM model is $O(p)$.\n\n**2. Bit Complexity Analysis**\n\nThis model accounts for the size of the numbers in bits. Let $b = \\lceil \\log_2 p \\rceil$ be the number of bits required to represent $p$. All integers $k$, $a'$, and $r$ are of size $O(b) = O(\\log p)$. Let $M(b)$ denote the time complexity for multiplying two $b$-bit integers. Using standard schoolbook multiplication, $M(b) = O(b^2)$. Division with remainder for two $b$-bit numbers has a similar complexity, $O(M(b))$.\n\n- **Step 1 (Residue computation)**: Assuming $a$ has a size comparable to $p$, calculating $a' = a \\pmod p$ takes $O(M(b))$.\n- **Step 3 (Loop)**: The loop runs $O(p)$ times.\n    - Inside the loop, the integers $k$ and $a'$ have $O(b)$ bits.\n    - The product $k \\cdot a'$ results in an integer of up to $2b$ bits. The multiplication takes $O(M(b))$ time.\n    - The modulo operation $(k \\cdot a') \\pmod p$ involves a division of a $O(b)$-bit number by another $O(b)$-bit number, taking $O(M(b))$ time.\n    - The total time for one iteration of the loop is dominated by these arithmetic operations, amounting to $O(M(b))$.\n- **Total Complexity**: The total bit complexity is the number of iterations multiplied by the complexity of each iteration: $O(p \\cdot M(\\log p))$.\n\nIf we assume schoolbook multiplication where $M(b) = O(b^2)$, the bit complexity is $O(p \\cdot (\\log p)^2)$. Using faster multiplication algorithms like Karatsuba ($M(b) = O(b^{\\log_2 3})$) or Schönhage-Strassen ($M(b) = O(b \\log b \\log \\log b)$) would yield a correspondingly lower overall complexity.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy import ...\n\ndef compute_legendre(a: int, p: int) -> int:\n    \"\"\"\n    Computes the Legendre symbol (a/p) using Gauss's Lemma.\n\n    Args:\n        a: An integer.\n        p: An odd prime number.\n\n    Returns:\n        The Legendre symbol, which is 1, -1, or 0.\n    \"\"\"\n    # Step 1: Reduce a modulo p. If a is divisible by p, the symbol is 0.\n    # The definition is (a/p) = 0 if a is congruent to 0 mod p.\n    if a % p == 0:\n        return 0\n\n    # According to Gauss's lemma, we need to count the number of residues\n    # in a specific set that are greater than p/2.\n    # The set is {1*a, 2*a, ..., ((p-1)/2)*a} mod p.\n    \n    # Step 2: Initialize a counter for residues greater than p/2.\n    # This counter corresponds to n in the formula (-1)^n.\n    n = 0\n    \n    # The upper bound for the loop, (p-1)/2.\n    upper_bound = (p - 1) // 2\n    \n    # Step 3: Iterate from k=1 to (p-1)/2 and count relevant residues.\n    for k in range(1, upper_bound + 1):\n        # Calculate the least non-negative residue of k*a mod p.\n        residue = (k * a) % p\n        \n        # Check if the residue is in the upper half of the range [1, p-1].\n        # This is equivalent to its least absolute residue being negative.\n        if residue > p / 2:\n            n += 1\n            \n    # Step 4: Determine the Legendre symbol based on the parity of n.\n    # (a/p) = (-1)^n.\n    if n % 2 == 0:\n        return 1\n    else:\n        return -1\n\ndef solve():\n    \"\"\"\n    Solves the problem by running the specified test cases through\n    the Legendre symbol computation algorithm.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (2, 3),   # Test 1\n        (3, 7),   # Test 2\n        (5, 11),  # Test 3\n        (2, 29),  # Test 4\n        (0, 19),  # Test 5\n        (-1, 13)  # Test 6\n    ]\n\n    results = []\n    for a, p in test_cases:\n        # Calculate the Legendre symbol for the current case.\n        result = compute_legendre(a, p)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3085438"}]}