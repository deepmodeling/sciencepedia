{"hands_on_practices": [{"introduction": "The power of modular exponentiation lies in its incredible efficiency, which is directly tied to the binary representation of the exponent. This first practice invites you to look under the hood of the \"square-and-multiply\" algorithm. By analyzing the binary structure of a large exponent, you will demystify the source of this efficiency and gain a concrete understanding of why the number of operations grows logarithmically, not linearly, with the size of the exponent [@problem_id:3087339].", "problem": "Let $e = 10^{6}$ be the exponent in the modular exponentiation problem $a^{e} \\bmod n$, where $a$ and $n$ are fixed integers with $n \\geq 2$ and $a \\geq 1$. \n\nFirst, compute the binary expansion of $e$, that is, write $e$ uniquely in the form $e = \\sum_{i=0}^{t-1} b_{i} 2^{i}$ with $b_{i} \\in \\{0,1\\}$ and $b_{t-1} = 1$. Then, consider the standard left-to-right square-and-multiply method for modular exponentiation, defined as follows: initialize $r \\leftarrow a$, then scan the remaining bits of $e$ from the next most significant down to the least significant; at each step, replace $r$ by $r^{2} \\bmod n$, and if the current bit is $1$, additionally replace $r$ by $r \\cdot a \\bmod n$. \n\nAssume the cost model in which each modular squaring and each modular multiplication by $a$ is counted as one modular multiplication. Using the binary expansion of $e$, determine the total number of modular multiplications required by this method to compute $a^{e} \\bmod n$. Express your final answer as a single integer. Do not compute $a^{e} \\bmod n$ itself.", "solution": "The problem is valid as it is scientifically grounded in computational number theory, well-posed with a clear algorithmic description and cost model, and objectively stated.\n\nThe problem requires us to determine the total number of modular multiplications needed to compute $a^{e} \\bmod n$ using a specific version of the left-to-right square-and-multiply algorithm, for the exponent $e = 10^{6}$. The cost model counts each modular squaring and each modular multiplication by $a$ as one modular multiplication.\n\nFirst, let's analyze the given algorithm and its associated cost. The exponent $e$ has a unique binary expansion $e = \\sum_{i=0}^{t-1} b_{i} 2^{i}$, where $b_{i} \\in \\{0,1\\}$ and the most significant bit is $b_{t-1} = 1$. The number of bits in this representation is $t$. This number is given by $t = \\lfloor \\log_{2}(e) \\rfloor + 1$.\n\nThe algorithm is defined as follows:\n1. Initialize $r \\leftarrow a$. This step corresponds to the most significant bit $b_{t-1}=1$ and, according to the problem description, is an initialization that does not incur a cost.\n2. Scan the remaining bits of $e$ from the next most significant down to the least significant. These are the bits $b_{t-2}, b_{t-3}, \\dots, b_0$. The number of such bits is $(t-2) - 0 + 1 = t-1$.\n3. At each step, a modular squaring is performed: $r$ is replaced by $r^{2} \\bmod n$. Since there are $t-1$ steps in the loop (one for each bit from $b_{t-2}$ to $b_0$), the total number of modular squarings is $t-1$.\n4. At each step, if the current bit is $1$, an additional modular multiplication is performed: $r$ is replaced by $r \\cdot a \\bmod n$. The number of these additional multiplications is equal to the number of set bits (bits equal to $1$) among $b_{t-2}, b_{t-3}, \\dots, b_0$.\n\nLet $H(e)$ denote the Hamming weight of $e$, which is the total number of bits equal to $1$ in its binary expansion. Since we know $b_{t-1}=1$, the number of set bits in the remaining part of the expansion ($b_{t-2}, \\dots, b_0$) is $H(e)-1$.\n\nThe total number of modular multiplications, denoted by $C$, is the sum of the number of squarings and the number of additional multiplications by $a$.\nNumber of squarings = $t-1 = (\\lfloor \\log_{2}(e) \\rfloor + 1) - 1 = \\lfloor \\log_{2}(e) \\rfloor$.\nNumber of multiplications by $a = H(e)-1$.\nTherefore, the total cost is $C = (\\lfloor \\log_{2}(e) \\rfloor) + (H(e)-1)$.\n\nWe are given the exponent $e = 10^{6}$. To find the cost $C$, we need to compute $\\lfloor \\log_{2}(10^{6}) \\rfloor$ and $H(10^{6})$.\n\nFirst, let's compute $\\lfloor \\log_{2}(10^{6}) \\rfloor$:\n$\\log_{2}(10^{6}) = 6 \\log_{2}(10)$. We know that $2^{3} = 8$ and $2^{4} = 16$, so $3  \\log_{2}(10)  4$.\nTherefore, $6 \\times 3  6 \\log_{2}(10)  6 \\times 4$, which means $18  \\log_{2}(10^{6})  24$.\nFor a more precise calculation:\n$2^{19} = 524288$\n$2^{20} = 1048576$\nSince $2^{19}  10^{6}  2^{20}$, it follows that $19  \\log_{2}(10^{6})  20$.\nThus, the floor is $\\lfloor \\log_{2}(10^{6}) \\rfloor = 19$.\nThis means the binary representation of $e=10^6$ has $t = 19+1 = 20$ bits. The number of squarings is $t-1 = 19$.\n\nNext, we need to find the binary representation of $e=10^{6}$ to determine its Hamming weight, $H(10^{6})$. We can do this by repeatedly dividing by $2$:\n$1000000 = 2 \\times 500000 + 0$\n$500000 = 2 \\times 250000 + 0$\n$250000 = 2 \\times 125000 + 0$\n$125000 = 2 \\times 62500 + 0$\n$62500 = 2 \\times 31250 + 0$\n$31250 = 2 \\times 15625 + 0$\n$15625 = 2 \\times 7812 + 1$\n$7812 = 2 \\times 3906 + 0$\n$3906 = 2 \\times 1953 + 0$\n$1953 = 2 \\times 976 + 1$\n$976 = 2 \\times 488 + 0$\n$488 = 2 \\times 244 + 0$\n$244 = 2 \\times 122 + 0$\n$122 = 2 \\times 61 + 0$\n$61 = 2 \\times 30 + 1$\n$30 = 2 \\times 15 + 0$\n$15 = 2 \\times 7 + 1$\n$7 = 2 \\times 3 + 1$\n$3 = 2 \\times 1 + 1$\n$1 = 2 \\times 0 + 1$\nReading the remainders from bottom to top, the binary representation of $10^{6}$ is:\n$e = (11110100001001000000)_2$.\nThis is a $20$-bit number, which is consistent with our calculation of $t=20$.\nThe Hamming weight, $H(10^{6})$, is the number of $1$s in this representation:\n$H(10^{6}) = 1+1+1+1+1+1+1 = 7$.\n\nNow we can calculate the total number of modular multiplications using our formula:\n$C = (\\lfloor \\log_{2}(10^{6}) \\rfloor) + (H(10^{6})-1)$.\n$C = 19 + (7 - 1) = 19 + 6 = 25$.\n\nThe total number of modular multiplications required is the sum of $19$ squarings and $6$ multiplications by $a$. This gives a total of $25$ operations.", "answer": "$$\n\\boxed{25}\n$$", "id": "3087339"}, {"introduction": "A true test of understanding a mathematical concept lies in exploring its behavior at the boundaries. This exercise moves beyond typical scenarios to probe several critical edge cases for modular exponentiation, such as a zero exponent, a base that is a multiple of the modulus, and a modulus of one. Working through these seemingly simple cases [@problem_id:3087384] builds a robust and complete mental model, ensuring your knowledge is not just procedural but foundational.", "problem": "Consider the modular exponentiation map $f(a,e,n) = a^{e} \\bmod n$, where $a$, $e$, and $n$ are integers, and the value is interpreted as the unique residue in $\\{0,1,2,\\dots,n-1\\}$ that is congruent to $a^{e}$ modulo $n$. The Hamming weight of the binary expansion of a nonnegative integer $e$ is the number of $1$-bits in its base-$2$ representation. Construct and analyze the following four test vectors, each designed to stress a distinct edge case relevant to the paradigm of modular exponentiation by repeated squaring, and determine the exact outputs $f(a,e,n)$:\n\n- Vector $\\mathrm{V1}$ (zero exponent): $(a,e,n) = (\\,37,\\,0,\\,101\\,)$.\n- Vector $\\mathrm{V2}$ (zero base modulo $n$): $(a,e,n) = (\\,100,\\,13,\\,25\\,)$ with $100 \\equiv 0 \\pmod{25}$ and $e0$.\n- Vector $\\mathrm{V3}$ (modulus equal to $1$): $(a,e,n) = (\\,123456,\\,5,\\,1\\,)$.\n- Vector $\\mathrm{V4}$ (maximal Hamming weight exponent for its bit-length): $(a,e,n) = (\\,13,\\,31,\\,101\\,)$, where $31$ has binary expansion $11111$, so its Hamming weight equals its bit-length $5$.\n\nUsing only the foundational properties of integer exponents and congruences, determine $f(a,e,n)$ for each vector. Report the four outputs in the order $\\mathrm{V1}$, $\\mathrm{V2}$, $\\mathrm{V3}$, $\\mathrm{V4}$ as a single row matrix. No rounding is required; provide exact integer residues.", "solution": "The problem as stated is scientifically grounded, well-posed, objective, and self-contained. It presents four distinct, valid instances of modular exponentiation, each testing a fundamental property or edge case. The problem is therefore valid and a solution can be derived. We will determine the value of $f(a,e,n) = a^{e} \\bmod n$ for each of the four specified vectors using the foundational properties of integer arithmetic and congruences. The result is the unique integer residue in the set $\\{0, 1, \\dots, n-1\\}$.\n\nVector $\\mathrm{V1}$: $(a,e,n) = (37, 0, 101)$.\nThis vector tests the case of a zero exponent. The fundamental property of integer exponents states that for any non-zero number $x$, $x^0 = 1$. In modular arithmetic, this translates to $a^0 \\equiv 1 \\pmod n$ provided that $a$ is not a multiple of $n$, i.e., $a \\not\\equiv 0 \\pmod n$. In this case, $a=37$ and $n=101$. Since $101$ is a prime number and $37$ is an integer such that $0  37  101$, $37$ is not a multiple of $101$. Thus, $37 \\not\\equiv 0 \\pmod{101}$.\nApplying the property, we have:\n$$f(37,0,101) = 37^0 \\bmod 101$$\n$$37^0 \\equiv 1 \\pmod{101}$$\nThe result is $1$.\n\nVector $\\mathrm{V2}$: $(a,e,n) = (100, 13, 25)$.\nThis vector tests the case where the base is a multiple of the modulus. The fundamental property of congruences is that if $x \\equiv y \\pmod n$, then $x^k \\equiv y^k \\pmod n$ for any positive integer $k$.\nHere, $a=100$, $n=25$, and $e=13$. We first evaluate the base modulo the modulus:\n$$100 = 4 \\times 25$$\nThis implies $100 \\equiv 0 \\pmod{25}$.\nThe exponent is $e=13$, which is a positive integer. We can substitute the base with its residue:\n$$f(100,13,25) = 100^{13} \\bmod 25$$\n$$100^{13} \\equiv 0^{13} \\pmod{25}$$\nFor any positive exponent $e > 0$, $0^e = 0$. Since $13 > 0$:\n$$0^{13} = 0$$\nTherefore:\n$$100^{13} \\equiv 0 \\pmod{25}$$\nThe result is $0$.\n\nVector $\\mathrm{V3}$: $(a,e,n) = (123456, 5, 1)$.\nThis vector tests the edge case of a modulus equal to $1$. By the definition of congruence, $x \\equiv y \\pmod n$ if and only if $n$ divides $(x-y)$. For a modulus of $n=1$, any integer $z$ is congruent to $0 \\pmod 1$ because $1$ divides $(z-0)$, as $1$ divides any integer.\nIn this case, $a=123456$ and $e=5$. The quantity $a^e = 123456^5$ is some large integer. Let this integer be $Z$.\n$$Z = 123456^5$$\nAccording to the property of modulus $1$:\n$$Z \\equiv 0 \\pmod 1$$\nThe problem asks for the unique residue in the set $\\{0, 1, \\dots, n-1\\}$. For $n=1$, this set is $\\{0\\}$. The only possible result is $0$.\nTherefore:\n$$f(123456,5,1) = 123456^5 \\bmod 1 = 0$$\nThe result is $0$.\n\nVector $\\mathrm{V4}$: $(a,e,n) = (13, 31, 101)$.\nThis vector requires a full modular exponentiation calculation. The analysis is well-suited to the method of repeated squaring, as suggested by the problem's reference to the exponent's Hamming weight. We need to compute $13^{31} \\pmod{101}$.\nThe binary expansion of the exponent $e=31$ is $11111_2$, so $31 = 16+8+4+2+1$. This means:\n$$13^{31} = 13^{16+8+4+2+1} = 13^{16} \\cdot 13^8 \\cdot 13^4 \\cdot 13^2 \\cdot 13^1 \\pmod{101}$$\nWe compute the powers of $13$ by repeated squaring, taking the modulus at each step to keep the intermediate numbers small.\n$$13^1 \\equiv 13 \\pmod{101}$$\n$$13^2 = 169 = 1 \\cdot 101 + 68 \\equiv 68 \\pmod{101}$$\n$$13^4 \\equiv (13^2)^2 \\equiv 68^2 = 4624 = 45 \\cdot 101 + 79 \\equiv 79 \\pmod{101}$$\n$$13^8 \\equiv (13^4)^2 \\equiv 79^2 = 6241 = 61 \\cdot 101 + 80 \\equiv 80 \\pmod{101}$$\n$$13^{16} \\equiv (13^8)^2 \\equiv 80^2 = 6400 = 63 \\cdot 101 + 37 \\equiv 37 \\pmod{101}$$\nNow, we multiply these intermediate results together, modulo $101$:\n$$13^{31} \\equiv 13^1 \\cdot 13^2 \\cdot 13^4 \\cdot 13^8 \\cdot 13^{16} \\pmod{101}$$\nWe can combine them sequentially:\n$$13^3 = 13^1 \\cdot 13^2 \\equiv 13 \\cdot 68 = 884 = 8 \\cdot 101 + 76 \\equiv 76 \\pmod{101}$$\n$$13^7 = 13^3 \\cdot 13^4 \\equiv 76 \\cdot 79 = 6004 = 59 \\cdot 101 + 45 \\equiv 45 \\pmod{101}$$\n$$13^{15} = 13^7 \\cdot 13^8 \\equiv 45 \\cdot 80 = 3600 = 35 \\cdot 101 + 65 \\equiv 65 \\pmod{101}$$\n$$13^{31} = 13^{15} \\cdot 13^{16} \\equiv 65 \\cdot 37 = 2405 = 23 \\cdot 101 + 82 \\equiv 82 \\pmod{101}$$\nThe result is $82$.\n\nThe four outputs for vectors $\\mathrm{V1}$, $\\mathrm{V2}$, $\\mathrm{V3}$, and $\\mathrm{V4}$ are, in order, $1$, $0$, $0$, and $82$.", "answer": "$$\\boxed{\\begin{pmatrix} 1  0  0  82 \\end{pmatrix}}$$", "id": "3087384"}, {"introduction": "In number theory, powerful theorems like Euler's totient theorem provide elegant shortcuts for complex calculations, but they come with crucial preconditions. This practice serves as a critical lesson in mathematical rigor, demonstrating what happens when such a condition—in this case, the requirement that the base and modulus be relatively prime—is not met. By working through a concrete counterexample [@problem_id:3087438], you will see firsthand why applying theorems without verifying their assumptions can lead to incorrect results, reinforcing the importance of careful, precise reasoning.", "problem": "Let $n=45$ be a composite modulus, let $a=9$ be a base with $\\gcd(a,n)\\neq 1$, and let $e=120$ be an exponent. Using modular exponentiation by repeated squaring, compute the residue $r\\equiv a^{e}\\pmod{n}$ without appealing to any theorem that presumes $a$ is a unit modulo $n$. Separately, compute $\\varphi(n)$ and form the reduced exponent $e'\\equiv e\\pmod{\\varphi(n)}$, then compute $r'\\equiv a^{e'}\\pmod{n}$ (again by repeated squaring). Report the integer difference $\\Delta=r-r'$ as your final answer. In your explanation, starting from the foundational definitions of congruence, Euler’s totient function $\\varphi(n)$, and the multiplicative group of units modulo $n$, justify why reducing $e$ modulo $\\varphi(n)$ presumes an assumption that fails in this setup with $\\gcd(a,n)\\neq 1$.", "solution": "The problem is deemed valid as it is self-contained, scientifically grounded in number theory, and well-posed. We proceed with the solution.\n\nThe problem asks for several computations and a theoretical justification regarding modular exponentiation. We address each part systematically.\n\nFirst, we compute $r \\equiv a^e \\pmod{n}$ for $a=9$, $e=120$, and $n=45$ using modular exponentiation by repeated squaring. The exponent in binary representation is $e=120_{10} = 64 + 32 + 16 + 8 = 2^6 + 2^5 + 2^4 + 2^3$, which is $1111000_2$. We need to compute $a^{120} = a^{64} a^{32} a^{16} a^8 \\pmod{n}$.\n\nWe compute the required powers of $a=9$ modulo $n=45$:\n$$9^1 \\equiv 9 \\pmod{45}$$\n$$9^2 = 81 \\equiv 36 \\pmod{45}$$\n$$9^4 \\equiv (9^2)^2 \\equiv 36^2 = 1296 \\pmod{45}$$\nTo reduce $1296 \\pmod{45}$, we divide $1296$ by $45$. $1296 = 28 \\times 45 + 36$. Thus,\n$$9^4 \\equiv 36 \\pmod{45}$$\nWe observe that once we obtain the value $36$, squaring it repeatedly will yield $36$ again modulo $45$:\n$$36^2 \\equiv 36 \\pmod{45}$$\nTherefore, for any integer $k \\ge 2$, $9^{2^k} \\equiv 36 \\pmod{45}$.\nThis applies to $9^4, 9^8, 9^{16}, 9^{32}, 9^{64}$.\n$$9^8 \\equiv (9^4)^2 \\equiv 36^2 \\equiv 36 \\pmod{45}$$\n$$9^{16} \\equiv (9^8)^2 \\equiv 36^2 \\equiv 36 \\pmod{45}$$\n$$9^{32} \\equiv (9^{16})^2 \\equiv 36^2 \\equiv 36 \\pmod{45}$$\n$$9^{64} \\equiv (9^{32})^2 \\equiv 36^2 \\equiv 36 \\pmod{45}$$\n\nNow we can compute $r$:\n$$r \\equiv 9^{120} \\pmod{45}$$\n$$r \\equiv 9^{64+32+16+8} \\pmod{45}$$\n$$r \\equiv 9^{64} \\cdot 9^{32} \\cdot 9^{16} \\cdot 9^8 \\pmod{45}$$\n$$r \\equiv 36 \\cdot 36 \\cdot 36 \\cdot 36 \\pmod{45}$$\nSince $36 \\cdot 36 \\equiv 36 \\pmod{45}$, this simplifies to:\n$$r \\equiv (36 \\cdot 36) \\cdot (36 \\cdot 36) \\equiv 36 \\cdot 36 \\equiv 36 \\pmod{45}$$\nSo, the correct residue is $r=36$.\n\nSecond, we compute Euler's totient function, $\\varphi(n)$, for $n=45$. The prime factorization of $n$ is $45 = 3^2 \\cdot 5^1$. The totient function is multiplicative for relatively prime arguments, so:\n$$\\varphi(45) = \\varphi(3^2) \\cdot \\varphi(5)$$\nUsing the formula $\\varphi(p^k) = p^k - p^{k-1}$:\n$$\\varphi(3^2) = 3^2 - 3^1 = 9 - 3 = 6$$\n$$\\varphi(5) = 5^1 - 5^0 = 5 - 1 = 4$$\nTherefore:\n$$\\varphi(45) = 6 \\cdot 4 = 24$$\n\nThird, we compute the reduced exponent $e' \\equiv e \\pmod{\\varphi(n)}$.\n$$e' \\equiv 120 \\pmod{24}$$\nSince $120 = 5 \\times 24 + 0$, we have $e' \\equiv 0 \\pmod{24}$. We choose the representative $e'=0$.\n\nFourth, we compute $r' \\equiv a^{e'} \\pmod{n}$.\n$$r' \\equiv 9^0 \\pmod{45}$$\nBy definition, for any non-zero base, $x^0=1$. Thus:\n$$r' = 1$$\n\nFifth, we calculate the difference $\\Delta = r - r'$.\n$$\\Delta = 36 - 1 = 35$$\n\nFinally, we provide the justification for why reducing the exponent $e$ modulo $\\varphi(n)$ is invalid in this case, starting from foundational definitions.\n\nThe relation of congruence modulo $n$, denoted by $a \\equiv b \\pmod{n}$, signifies that $n$ divides the difference $a-b$. This relation partitions the integers $\\mathbb{Z}$ into $n$ equivalence classes, forming the ring of integers modulo $n$, denoted $\\mathbb{Z}_n$ or $\\mathbb{Z}/n\\mathbb{Z}$.\n\nEuler's totient function, $\\varphi(n)$, counts the number of positive integers less than or equal to $n$ that are relatively prime to $n$. These integers correspond to the equivalence classes $[a]_n$ in $\\mathbb{Z}_n$ for which $\\gcd(a,n)=1$.\n\nThe set of these particular equivalence classes forms the multiplicative group of units modulo $n$, denoted $(\\mathbb{Z}/n\\mathbb{Z})^\\times$. An element $[a]_n$ is a \"unit\" because it has a multiplicative inverse modulo $n$, a property guaranteed if and only if $\\gcd(a,n)=1$. The order of this group (its number of elements) is precisely $|\\left(\\mathbb{Z}/n\\mathbb{Z}\\right)^\\times| = \\varphi(n)$.\n\nEuler's totient theorem is a statement about this group. It asserts that for any integer $a$ such that $\\gcd(a,n)=1$, it holds that:\n$$a^{\\varphi(n)} \\equiv 1 \\pmod{n}$$\nThis is a direct consequence of Lagrange's theorem from group theory, which states that the order of any element of a finite group divides the order of the group. For an element $[a]_n \\in (\\mathbb{Z}/n\\mathbb{Z})^\\times$, its order must divide $\\varphi(n)$, which implies $a^{\\varphi(n)} \\equiv 1 \\pmod n$.\n\nThe procedure for reducing an exponent $e$ modulo $\\varphi(n)$ is predicated entirely on Euler's theorem. If we wish to compute $a^e \\pmod n$, we can write $e = q\\varphi(n) + e'$, where $e' = e \\pmod{\\varphi(n)}$ and $q$ is an integer. The computation proceeds as:\n$$a^e = a^{q\\varphi(n) + e'} = (a^{\\varphi(n)})^q \\cdot a^{e'}$$\nIf $\\gcd(a,n)=1$, then $a^{\\varphi(n)} \\equiv 1 \\pmod{n}$, and we can substitute this into the equation:\n$$a^e \\equiv 1^q \\cdot a^{e'} \\equiv a^{e'} \\pmod{n}$$\nThis substitution is the critical step that justifies reducing the exponent.\n\nIn the given problem, $a=9$ and $n=45$. We compute the greatest common divisor:\n$$\\gcd(9, 45) = 9$$\nSince $\\gcd(9, 45) = 9 \\neq 1$, the integer $a=9$ is not relatively prime to the modulus $n=45$. Consequently, the congruence class $[9]_{45}$ is not an element of the multiplicative group of units $(\\mathbb{Z}/45\\mathbb{Z})^\\times$. Euler's totient theorem does not apply to this base $a$.\n\nThe premise for the exponent reduction, $a^{\\varphi(n)} \\equiv 1 \\pmod{n}$, is not guaranteed to hold. In fact, we can show it is false. We calculated $\\varphi(45)=24$. Let's compute $9^{24} \\pmod{45}$:\n$$9^{24} = 9^{16+8} = 9^{16} \\cdot 9^8 \\pmod{45}$$\nFrom our earlier work, $9^{16} \\equiv 36 \\pmod{45}$ and $9^8 \\equiv 36 \\pmod{45}$.\n$$9^{24} \\equiv 36 \\cdot 36 \\equiv 36 \\pmod{45}$$\nClearly, $9^{24} \\not\\equiv 1 \\pmod{45}$. The fundamental assumption required for the simplification fails. Therefore, the procedure of reducing the exponent $e=120$ to $e'=0$ modulo $\\varphi(45)=24$ is mathematically invalid. This explains why the result $r'=1$ obtained through this flawed method differs from the correct result $r=36$ obtained by direct computation.", "answer": "$$\\boxed{35}$$", "id": "3087438"}]}