{"hands_on_practices": [{"introduction": "The Dirichlet hyperbola method is fundamentally a geometric counting argument. This first practice problem provides a concrete, hands-on opportunity to visualize this process by explicitly partitioning the summation region for $\\sum_{n \\le 100} d(n)$, where $d(n)$ is the divisor function. By manually calculating the number of integer points in each sub-region, you will build a solid intuition for how the method cleverly reorganizes a difficult sum into manageable parts [@problem_id:3090772].", "problem": "Let $f$ and $g$ be arithmetic functions on the positive integers, and let their Dirichlet convolution $(f * g)$ be defined by $(f * g)(n) = \\sum_{ab = n} f(a) g(b)$. Starting from this definition and the counting interpretation of the inequality $ab \\leq x$ as a region in the integer lattice under the hyperbola $ab = x$, derive the Dirichlet hyperbola method decomposition that partitions the sum $\\sum_{n \\leq x} (f * g)(n)$ into three pieces by splitting at the hyperbola vertex. Then, specialize to the case $f = g = 1$ and $x = 100$, where $1$ denotes the constant function $1(n) = 1$ for all positive integers $n$. \n\nCarry out the following steps:\n- Explicitly construct the hyperbola partition for $x = 100$ by describing the three regions in terms of inequalities on $a$ and $b$ with the splitting line at $a = \\sqrt{100}$ and $b = \\sqrt{100}$. Use the greatest integer function (floor function) $\\lfloor \\cdot \\rfloor$ where needed.\n- Compute the three sums arising from the decomposition when $f = g = 1$.\n- Verify numerically that the decomposition yields the exact equality with the original sum $\\sum_{n \\leq 100} d(n)$, where $d(n)$ is the number of positive divisors of $n$.\n\nProvide the final value of $\\sum_{n \\leq 100} d(n)$ as a single integer. No rounding is required.", "solution": "The problem asks for a derivation of the sum $\\sum_{n \\leq x} (f * g)(n)$ using the Dirichlet hyperbola method, and then to apply this method to the specific case where $x = 100$ and $f$ and $g$ are the constant function $1(n)=1$ for all positive integers $n$.\n\nFirst, we derive the general decomposition. The sum in question is given by:\n$$ S(x) = \\sum_{n=1}^{\\lfloor x \\rfloor} (f * g)(n) $$\nUsing the definition of the Dirichlet convolution, $(f * g)(n) = \\sum_{ab=n} f(a)g(b)$, we can rewrite the sum as:\n$$ S(x) = \\sum_{n=1}^{\\lfloor x \\rfloor} \\sum_{ab=n} f(a)g(b) $$\nThis is equivalent to summing over all pairs of positive integers $(a, b)$ such that their product $ab \\leq x$:\n$$ S(x) = \\sum_{ab \\leq x} f(a)g(b) $$\nThe condition $ab \\leq x$ for positive integers $a$ and $b$ defines a region in the first quadrant of the integer lattice, on or below the hyperbola $ab=x$. The Dirichlet hyperbola method provides a way to count the points in this region by partitioning it.\n\nLet $u$ be a positive real parameter, which we will set to $u = \\sqrt{x}$. The region of summation, $R = \\{(a, b) \\in \\mathbb{Z}^+ \\times \\mathbb{Z}^+ \\mid ab \\leq x\\}$, can be partitioned into three disjoint subregions by splitting at $a = u$ and $b = u$:\n1.  $R_1 = \\{(a, b) \\in R \\mid a \\leq u, b \\leq u\\}$\n2.  $R_2 = \\{(a, b) \\in R \\mid a \\leq u, b > u\\}$\n3.  $R_3 = \\{(a, b) \\in R \\mid a > u, b \\leq u\\}$\nNote that if $a > u$ and $b > u$ then $ab > u^2=x$, so there are no points in this fourth quadrant of the partition satisfying $ab \\leq x$. The union $R_1 \\cup R_2 \\cup R_3$ is the entire region $R$.\n\nThe total sum $S(x)$ is the sum of the contributions from these three disjoint regions:\n$$ S(x) = \\sum_{(a,b) \\in R_1} f(a)g(b) + \\sum_{(a,b) \\in R_2} f(a)g(b) + \\sum_{(a,b) \\in R_3} f(a)g(b) $$\nLet $F(y) = \\sum_{k=1}^{\\lfloor y \\rfloor} f(k)$ and $G(y) = \\sum_{k=1}^{\\lfloor y \\rfloor} g(k)$ be the summatory functions of $f$ and $g$. The sums over each region can be expressed as:\n- Sum over $R_1$: $\\sum_{a=1}^{\\lfloor u \\rfloor} \\sum_{b=1}^{\\lfloor u \\rfloor} f(a)g(b) = \\left(\\sum_{a=1}^{\\lfloor u \\rfloor} f(a)\\right) \\left(\\sum_{b=1}^{\\lfloor u \\rfloor} g(b)\\right) = F(\\lfloor u \\rfloor)G(\\lfloor u \\rfloor)$.\n- Sum over $R_2$: $\\sum_{a=1}^{\\lfloor u \\rfloor} f(a) \\sum_{b=\\lfloor u \\rfloor+1}^{\\lfloor x/a \\rfloor} g(b) = \\sum_{a=1}^{\\lfloor u \\rfloor} f(a) \\left( G(\\lfloor x/a \\rfloor) - G(\\lfloor u \\rfloor) \\right)$.\n- Sum over $R_3$: $\\sum_{b=1}^{\\lfloor u \\rfloor} g(b) \\sum_{a=\\lfloor u \\rfloor+1}^{\\lfloor x/b \\rfloor} f(a) = \\sum_{b=1}^{\\lfloor u \\rfloor} g(b) \\left( F(\\lfloor x/b \\rfloor) - F(\\lfloor u \\rfloor) \\right)$.\n\nNow, we specialize to the case given in the problem: $f(n) = g(n) = 1$ for all $n \\in \\mathbb{Z}^+$, and $x = 100$.\nFor this case, the convolution is the divisor function, $d(n) = (1 * 1)(n) = \\sum_{d|n} 1$. The sum we wish to compute is $\\sum_{n=1}^{100} d(n)$.\nThe summatory functions are $F(y) = G(y) = \\sum_{k=1}^{\\lfloor y \\rfloor} 1 = \\lfloor y \\rfloor$.\nThe splitting parameter is $u = \\sqrt{x} = \\sqrt{100} = 10$. Thus, $\\lfloor u \\rfloor = 10$.\n\nThe partition of the region $ab \\leq 100$ is as follows:\n- Region 1: $R_1 = \\{(a,b) \\in \\mathbb{Z}^+ \\times \\mathbb{Z}^+ \\mid 1 \\le a \\le 10, 1 \\le b \\le 10\\}$.\n- Region 2: $R_2 = \\{(a,b) \\in \\mathbb{Z}^+ \\times \\mathbb{Z}^+ \\mid 1 \\le a \\le 10, 10 < b \\le \\lfloor 100/a \\rfloor\\}$.\n- Region 3: $R_3 = \\{(a,b) \\in \\mathbb{Z}^+ \\times \\mathbb{Z}^+ \\mid 10 < a \\le \\lfloor 100/b \\rfloor, 1 \\le b \\le 10\\}$.\n\nWe now compute the three sums arising from this decomposition. Since $f(a)=g(b)=1$ for all $a,b$, the sum over a region is simply the number of integer points in that region.\n\nSum for Region 1:\nThe number of points in $R_1$ is the size of the $10 \\times 10$ square:\n$$ \\text{Sum}_1 = \\sum_{a=1}^{10} \\sum_{b=1}^{10} 1 = 10 \\times 10 = 100 $$\n\nSum for Region 2:\nThe number of points in $R_2$ is:\n$$ \\text{Sum}_2 = \\sum_{a=1}^{10} \\sum_{b=11}^{\\lfloor 100/a \\rfloor} 1 = \\sum_{a=1}^{10} \\max(0, \\lfloor 100/a \\rfloor - 10) $$\nThe term is non-zero only for $a < 10$.\n$a=1: \\lfloor 100/1 \\rfloor - 10 = 100 - 10 = 90$\n$a=2: \\lfloor 100/2 \\rfloor - 10 = 50 - 10 = 40$\n$a=3: \\lfloor 100/3 \\rfloor - 10 = 33 - 10 = 23$\n$a=4: \\lfloor 100/4 \\rfloor - 10 = 25 - 10 = 15$\n$a=5: \\lfloor 100/5 \\rfloor - 10 = 20 - 10 = 10$\n$a=6: \\lfloor 100/6 \\rfloor - 10 = 16 - 10 = 6$\n$a=7: \\lfloor 100/7 \\rfloor - 10 = 14 - 10 = 4$\n$a=8: \\lfloor 100/8 \\rfloor - 10 = 12 - 10 = 2$\n$a=9: \\lfloor 100/9 \\rfloor - 10 = 11 - 10 = 1$\n$a=10: \\lfloor 100/10 \\rfloor - 10 = 10 - 10 = 0$\n$$ \\text{Sum}_2 = 90 + 40 + 23 + 15 + 10 + 6 + 4 + 2 + 1 + 0 = 191 $$\n\nSum for Region 3:\nThe number of points in $R_3$ is:\n$$ \\text{Sum}_3 = \\sum_{b=1}^{10} \\sum_{a=11}^{\\lfloor 100/b \\rfloor} 1 = \\sum_{b=1}^{10} \\max(0, \\lfloor 100/b \\rfloor - 10) $$\nBy symmetry with the calculation for $\\text{Sum}_2$, we have:\n$$ \\text{Sum}_3 = 191 $$\n\nFinally, we verify numerically that the decomposition yields the exact value for the original sum. The total sum is the sum of the counts from the three disjoint regions:\n$$ \\sum_{n=1}^{100} d(n) = \\text{Sum}_1 + \\text{Sum}_2 + \\text{Sum}_3 = 100 + 191 + 191 = 482 $$\nThe method of partitioning the summation region is an exact counting procedure. Therefore, the numerical calculation confirms that the sum of the values from the three pieces correctly gives the total sum. The final value is the result of this exact calculation.", "answer": "$$\\boxed{482}$$", "id": "3090772"}, {"introduction": "Understanding a powerful method also means understanding its limitations and the reasons for its specific structure. This exercise [@problem_id:3090749] explores a thought experiment: what happens if we naively apply the counting principle without a proper overlap correction and choose a poor splitting parameter? By analyzing this flawed approach, you will gain a deeper appreciation for why the standard hyperbola method, with its splitting at $\\sqrt{x}$, is constructed so carefully.", "problem": "Let $d(n)$ denote the number of positive divisors of $n$, so $d=\\mathbf{1} * \\mathbf{1}$ is the Dirichlet convolution of the constant function $\\mathbf{1}(n)=1$ with itself. For a real number $x \\geq 1$, the summatory divisor function is $S(x)=\\sum_{n \\leq x} d(n)$, which counts the number of pairs $(a,b)$ of positive integers such that $ab \\leq x$. The Dirichlet hyperbola method rewrites such convolution sums by splitting at a parameter $y \\geq 1$ and correcting for the double-counted overlap region. Consider the naive omission of the overlap correction, which yields the expression\n$$\nN(x,y) \\coloneqq \\sum_{a \\leq y} \\left\\lfloor \\frac{x}{a} \\right\\rfloor \\;+\\; \\sum_{b \\leq y} \\left\\lfloor \\frac{x}{b} \\right\\rfloor.\n$$\nConstruct a concrete counterexample showing that choosing $y$ far from $\\sqrt{x}$ can cause $N(x,y)$ to be a gross overestimate of $S(x)$. Specifically, take $y=x$ with $x$ a positive integer, and compute the multiplicative overestimate factor\n$$\n\\frac{N(x,x)}{S(x)}.\n$$\nGive your answer as a single exact number.", "solution": "The user wants to find the value of the expression $\\frac{N(x,x)}{S(x)}$ where $x$ is a positive integer.\n\nFirst, we must validate the problem statement.\nAll givens are extracted and validated as follows:\n- The divisor function is $d(n)$, the number of positive divisors of an integer $n$.\n- The Dirichlet convolution identity $d = \\mathbf{1} * \\mathbf{1}$ is correctly stated, where $\\mathbf{1}(n)=1$ for all $n$.\n- The summatory divisor function is $S(x)=\\sum_{n \\leq x} d(n)$, where $x \\ge 1$ is a real number. This is the sum of the divisor function up to $x$.\n- A correct geometric interpretation is given: $S(x)$ counts the number of pairs of positive integers $(a,b)$ such that $ab \\leq x$.\n- An expression $N(x,y)$ is defined for $x, y \\ge 1$ as $N(x,y) \\coloneqq \\sum_{a \\leq y} \\left\\lfloor \\frac{x}{a} \\right\\rfloor + \\sum_{b \\leq y} \\left\\lfloor \\frac{x}{b} \\right\\rfloor$.\n- The task is to evaluate the ratio $\\frac{N(x,x)}{S(x)}$ for a positive integer $x$. The problem asks for the result as a single exact number, which implies the result is independent of the specific integer value of $x$.\n\nThe problem is scientifically grounded in standard number theory, well-posed, and objective. The quantities are clearly defined, and there are no contradictions. The problem is therefore deemed valid. We proceed to the solution.\n\nThe problem requires the calculation of the multiplicative overestimate factor $\\frac{N(x,x)}{S(x)}$ for any positive integer $x$.\n\nLet's first analyze the numerator, $N(x,x)$. The definition provided is:\n$$\nN(x,y) = \\sum_{a \\leq y} \\left\\lfloor \\frac{x}{a} \\right\\rfloor + \\sum_{b \\leq y} \\left\\lfloor \\frac{x}{b} \\right\\rfloor\n$$\nWe are instructed to set $y=x$. Since $x$ is a positive integer, the sums run from $1$ to $x$.\n$$\nN(x,x) = \\sum_{a=1}^{x} \\left\\lfloor \\frac{x}{a} \\right\\rfloor + \\sum_{b=1}^{x} \\left\\lfloor \\frac{x}{b} \\right\\rfloor\n$$\nThe summation variables $a$ and $b$ are dummy variables, so the two sums on the right-hand side are identical. We can combine them:\n$$\nN(x,x) = 2 \\sum_{k=1}^{x} \\left\\lfloor \\frac{x}{k} \\right\\rfloor\n$$\n\nNext, let's analyze the denominator, $S(x)$. By definition, $S(x)$ is the summatory divisor function:\n$$\nS(x) = \\sum_{n=1}^{x} d(n)\n$$\nwhere we use $n=1, \\dots, x$ since $x$ is an integer.\nThe divisor function $d(n)$ is defined as the number of positive divisors of $n$, which can be written as a sum:\n$$\nd(n) = \\sum_{k|n, k>0} 1\n$$\nSubstituting this into the expression for $S(x)$:\n$$\nS(x) = \\sum_{n=1}^{x} \\left( \\sum_{k|n} 1 \\right) = \\sum_{n=1}^{x} \\sum_{k|n} 1\n$$\nThis is a sum over all pairs of positive integers $(n, k)$ such that $n \\leq x$ and $k$ divides $n$. We can change the order of summation. The condition $k|n$ means that $n = mk$ for some positive integer $m$. The condition $n \\leq x$ becomes $mk \\leq x$.\nSo, we are summing $1$ over all pairs of positive integers $(k,m)$ for which their product $km \\leq x$.\n$$\nS(x) = \\sum_{\\substack{k \\ge 1, m \\ge 1 \\\\ km \\le x}} 1\n$$\nLet's now re-examine the sum $\\sum_{k=1}^{x} \\lfloor \\frac{x}{k} \\rfloor$. The term $\\lfloor \\frac{x}{k} \\rfloor$ counts the number of positive integers $m$ such that $m \\leq \\frac{x}{k}$, which is equivalent to $mk \\leq x$.\nTherefore, we can rewrite the sum as a double summation:\n$$\n\\sum_{k=1}^{x} \\left\\lfloor \\frac{x}{k} \\right\\rfloor = \\sum_{k=1}^{x} \\sum_{m=1}^{\\lfloor x/k \\rfloor} 1\n$$\nThe conditions on this sum are $k \\in \\{1, 2, \\dots, x\\}$ and $m \\in \\{1, 2, \\dots, \\lfloor x/k \\rfloor\\}$. The condition on $m$ is equivalent to $mk \\leq x$. If $k > x$, $\\lfloor x/k \\rfloor = 0$, so the sum over $k$ can be extended to all $k \\geq 1$.\n$$\n\\sum_{k=1}^{x} \\left\\lfloor \\frac{x}{k} \\right\\rfloor = \\sum_{\\substack{k \\ge 1, m \\ge 1 \\\\ km \\le x}} 1\n$$\nComparing this with our expression for $S(x)$, we find a crucial identity:\n$$\nS(x) = \\sum_{k=1}^{x} \\left\\lfloor \\frac{x}{k} \\right\\rfloor\n$$\nThis identity is a fundamental result in number theory, sometimes known as the hyperbola method with the parameter set to $x$.\n\nNow we can substitute this identity back into our expression for $N(x,x)$:\n$$\nN(x,x) = 2 \\sum_{k=1}^{x} \\left\\lfloor \\frac{x}{k} \\right\\rfloor = 2 S(x)\n$$\nWe are asked to compute the ratio $\\frac{N(x,x)}{S(x)}$.\n$$\n\\frac{N(x,x)}{S(x)} = \\frac{2 S(x)}{S(x)}\n$$\nFor any positive integer $x$, $S(x) = \\sum_{n=1}^{x} d(n) \\ge d(1) = 1$. Thus, $S(x)$ is never zero. We can safely cancel $S(x)$ from the numerator and denominator.\n$$\n\\frac{N(x,x)}{S(x)} = 2\n$$\nThe result is a constant value of $2$, independent of the specific choice of the positive integer $x$. This demonstrates that the naive expression $N(x,x)$ is a \"gross overestimate\" of the true sum $S(x)$ by a factor of exactly $2$.", "answer": "$$\\boxed{2}$$", "id": "3090749"}, {"introduction": "The true power of the hyperbola method in modern number theory lies not just in its elegance, but in its computational efficiency. This final practice moves from theory to application, guiding you to develop an algorithm that computes the summatory divisor function in $O(\\sqrt{x})$ time [@problem_id:3090756]. By exploiting the piecewise-constant nature of the function $\\lfloor x/k \\rfloor$, you will see how a clever insight transforms a linear-time calculation into a much faster one.", "problem": "You are to derive, implement, and analyze an algorithm based on the Dirichlet hyperbola method to compute the summatory divisor function. Let $d(n)$ denote the number of positive divisors of the integer $n$. Define the summatory function $D(x)$ by\n$$\nD(x) = \\sum_{n \\le x} d(n),\n$$\nfor any integer $x \\ge 0$. Starting only from the fundamental definition that $d(n)$ counts positive divisors of $n$ and the identity that counting divisor pairs corresponds to counting lattice points $(a,b)$ with $ab \\le x$, derive an algorithm that computes $D(x)$ in $O(\\sqrt{x})$ time by grouping indices $n$ with equal values of the floor function $\\left\\lfloor \\frac{x}{n} \\right\\rfloor$. The grouping strategy should be used to avoid iterating over all $n \\le x$ and should rely on the observation that $\\left\\lfloor \\frac{x}{n} \\right\\rfloor$ takes the same value over contiguous ranges of $n$.\n\nYour program must implement this algorithm for a fixed test suite and output the results in the specified format. The test suite consists of the following integer values of $x$:\n- $x = 0$ (boundary case),\n- $x = 1$ (smallest nontrivial case),\n- $x = 2$ (very small case),\n- $x = 10$ (small case),\n- $x = 100$ (moderate case),\n- $x = 999999$ (large case just below a round threshold),\n- $x = 1000000$ (large case at a round threshold).\n\nFor each $x$ in the test suite, your program must compute $D(x)$ as an integer. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite (for example, if the results were $r_1, r_2, \\ldots, r_7$, the output must be in the exact format $[r_1,r_2,r_3,r_4,r_5,r_6,r_7]$).\n\nNo physical units or angles are involved in this problem. All quantities are pure integers. Ensure that your algorithm achieves $O(\\sqrt{x})$ time complexity by grouping indices with equal values of $\\left\\lfloor \\frac{x}{n} \\right\\rfloor$.", "solution": "The objective is to derive and implement an algorithm to compute the summatory divisor function, $D(x) = \\sum_{n \\le x} d(n)$, in $O(\\sqrt{x})$ time, where $d(n)$ is the number of positive divisors of $n$. The derivation will follow the principle of the Dirichlet hyperbola method and will utilize the specified optimization of grouping indices.\n\nFirst, we express $D(x)$ in a more tractable form. The definition of the divisor function is $d(n) = \\sum_{k|n, k>0} 1$. Substituting this into the definition of $D(x)$ for an integer $x \\ge 0$ gives:\n$$\nD(x) = \\sum_{n=1}^{\\lfloor x \\rfloor} d(n) = \\sum_{n=1}^{\\lfloor x \\rfloor} \\sum_{k|n} 1\n$$\nThe double summation counts pairs of positive integers $(n, k)$ such that $k$ divides $n$ and $n \\le x$. The condition $k|n$ implies that $n = km$ for some positive integer $m$. The condition $n \\le x$ thus becomes $km \\le x$. This allows us to re-index the sum over pairs of positive integers $(k,m)$ such that their product $km \\le x$:\n$$\nD(x) = \\sum_{k,m \\in \\mathbb{Z}^+; km \\le x} 1\n$$\nGeometrically, this sum represents the number of integer lattice points $(k,m)$ in the first quadrant that lie on or under the hyperbola $km = x$.\n\nTo evaluate this sum, we can iterate through one variable, say $k$, and for each $k$, sum up the valid counts for $m$. The variable $k$ can range from $1$ to $\\lfloor x \\rfloor$. For a fixed $k$, the condition $km \\le x$ is equivalent to $m \\le \\frac{x}{k}$. Since $m$ must be an integer, the number of possible values for $m$ is $\\lfloor \\frac{x}{k} \\rfloor$. This leads to the following identity for $D(x)$:\n$$\nD(x) = \\sum_{k=1}^{\\lfloor x \\rfloor} \\left\\lfloor \\frac{x}{k} \\right\\rfloor\n$$\nA naive algorithm to compute this sum would iterate $k$ from $1$ to $\\lfloor x \\rfloor$, which has a time complexity of $O(x)$. For large $x$, this is inefficient.\n\nThe problem requires an $O(\\sqrt{x})$ algorithm, achieved by grouping indices. We observe that the term $\\lfloor \\frac{x}{k} \\rfloor$ is a non-increasing step function of $k$. It takes the same value for many consecutive values of $k$. We can exploit this by grouping terms with the same value of $\\lfloor \\frac{x}{k} \\rfloor$ and calculating their contribution to the sum in a single step.\n\nLet us formalize this grouping strategy. We iterate through blocks of indices. Let a block start at index $k$. The value of the floor function for this block is $v = \\lfloor \\frac{x}{k} \\rfloor$. We need to find the largest index $k_{end}$ such that for all integers $i$ with $k \\le i \\le k_{end}$, we have $\\lfloor \\frac{x}{i} \\rfloor = v$.\n\nThe condition $\\lfloor \\frac{x}{i} \\rfloor = v$ is equivalent to the inequality $v \\le \\frac{x}{i} < v+1$.\nThe left part of the inequality, $v \\le \\frac{x}{i}$, implies $i \\le \\frac{x}{v}$. Since $i$ must be an integer, $i \\le \\lfloor \\frac{x}{v} \\rfloor$.\nThe right part, $\\frac{x}{i} < v+1$, implies $i > \\frac{x}{v+1}$.\nFor any $i \\ge k$, we have $\\frac{x}{i} \\le \\frac{x}{k}$, so $\\lfloor \\frac{x}{i} \\rfloor \\le \\lfloor \\frac{x}{k} \\rfloor = v$. Therefore, we only need to find the largest $i$ that satisfies $v \\le \\lfloor \\frac{x}{i} \\rfloor$. This occurs at $i = \\lfloor \\frac{x}{v} \\rfloor$.\nThus, for a starting index $k$, the block of indices for which $\\lfloor \\frac{x}{i} \\rfloor$ remains constant at $v = \\lfloor \\frac{x}{k} \\rfloor$ is $[k, k_{end}]$, where $k_{end} = \\lfloor \\frac{x}{v} \\rfloor = \\lfloor \\frac{x}{\\lfloor x/k \\rfloor} \\rfloor$.\n\nThe number of terms in this block is $(k_{end} - k + 1)$. The contribution of this entire block to the total sum is $(k_{end} - k + 1) \\times v$. After processing this block, the next index to consider is $k_{end} + 1$.\n\nThe algorithm is as follows:\n1. Initialize a total sum $S = 0$ and the starting index $k = 1$.\n2. While $k \\le x$:\n   a. If $k > x$, terminate. For an integer $x$, this is equivalent to $k > \\lfloor x \\rfloor$.\n   b. Calculate the value $v = \\lfloor \\frac{x}{k} \\rfloor$. If $v=0$, all subsequent terms are $0$, so we can terminate.\n   c. Determine the end of the current block, $k_{end} = \\lfloor \\frac{x}{v} \\rfloor$.\n   d. Add the contribution of this block to the total sum: $S \\leftarrow S + (k_{end} - k + 1) \\times v$.\n   e. Update the index to the start of the next block: $k \\leftarrow k_{end} + 1$.\n3. The final result is $D(x) = S$.\n\nTo analyze the complexity, we count the number of iterations. The loop advances $k$ in jumps. The number of unique values of $\\lfloor \\frac{x}{k} \\rfloor$ for $k=1, \\dots, \\lfloor x \\rfloor$ determines the number of iterations.\n- For $k \\in [1, \\lfloor\\sqrt{x}\\rfloor]$, there are at most $\\lfloor\\sqrt{x}\\rfloor$ distinct values of $k$, and thus at most $\\lfloor\\sqrt{x}\\rfloor$ distinct values of $\\lfloor\\frac{x}{k}\\rfloor$.\n- For $k \\in (\\lfloor\\sqrt{x}\\rfloor, \\lfloor x \\rfloor]$, we have $k > \\sqrt{x}$, which implies $\\frac{x}{k} < \\sqrt{x}$. So, the value $v = \\lfloor \\frac{x}{k} \\rfloor$ is an integer in the range $[1, \\lfloor\\sqrt{x}\\rfloor - 1]$. There are at most $\\lfloor\\sqrt{x}\\rfloor - 1$ distinct values in this range.\nThe total number of distinct values of $\\lfloor \\frac{x}{k} \\rfloor$, and therefore the number of loop iterations, is bounded by $2\\lfloor\\sqrt{x}\\rfloor$. Each iteration involves a few arithmetic operations, taking constant time. Thus, the overall time complexity of this algorithm is $O(\\sqrt{x})$. This meets the requirements of the problem.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef divisor_summatory_function(x: int) -> int:\n    \"\"\"\n    Computes the summatory divisor function D(x) = sum_{n <= x} d(n)\n    using the Dirichlet hyperbola method optimized with index grouping.\n\n    The identity D(x) = sum_{k=1}^{x} floor(x/k) is used. The sum is\n    computed in O(sqrt(x)) time by grouping terms where floor(x/k)\n    is constant.\n\n    Args:\n        x: A non-negative integer.\n\n    Returns:\n        The integer value of D(x).\n    \"\"\"\n    if x < 1:\n        return 0\n\n    # According to the problem statement, all quantities are integers.\n    # Python's integers support arbitrary precision, so overflow is not a concern\n    # for the given test cases.\n    x = int(x)\n\n    total_sum = 0\n    k = 1\n    while k <= x:\n        # v is the value of floor(x/k) for the current block of indices.\n        v = x // k\n\n        # k_end is the last index for which floor(x/i) has the value v.\n        # k_end = floor(x / v)\n        k_end = x // v\n\n        # The number of indices in the block [k, k_end] is (k_end - k + 1).\n        # Add the contribution of this block to the total sum.\n        num_terms = k_end - k + 1\n        total_sum += num_terms * v\n\n        # Jump to the start of the next block.\n        k = k_end + 1\n\n    return total_sum\n\ndef solve():\n    \"\"\"\n    Runs the calculation for the test suite specified in the problem statement\n    and prints the results in the required format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        0,          # boundary case\n        1,          # smallest nontrivial case\n        2,          # very small case\n        10,         # small case\n        100,        # moderate case\n        999999,     # large case just below a round threshold\n        1000000     # large case at a round threshold\n    ]\n\n    results = []\n    for x_val in test_cases:\n        result = divisor_summatory_function(x_val)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "3090756"}]}