{"hands_on_practices": [{"introduction": "The Pollard rho and p-1 algorithms represent a significant leap in integer factorization, moving from deterministic but slow methods to clever probabilistic approaches. To truly grasp their ingenuity, there's no substitute for hands-on practice. We begin with Pollard's rho method, an algorithm that finds factors by detecting cycles in a sequence of pseudorandom numbers generated modulo the integer we wish to factor. This first exercise [@problem_id:3088119] guides you through an explicit run of the algorithm, demonstrating how Floyd's cycle-finding technique uncovers a factor by identifying when the sequence's path collides modulo a hidden prime divisor.", "problem": "Let $n$ be the composite integer $697$. Consider Pollard's rho factorization method using the polynomial map $f(x) \\equiv x^{2} + 1 \\pmod{n}$ with initial seed $x_{0} = 2$. Implement Floyd's cycle-finding algorithm (Floyd) by generating two sequences $(x_{k})$ and $(y_{k})$ defined by $x_{k+1} \\equiv f(x_{k}) \\pmod{n}$ and $y_{k+1} \\equiv f(f(y_{k})) \\pmod{n}$, respectively, starting from $x_{0} = y_{0} = 2$. At each iteration $k \\geq 1$, compute the Greatest Common Divisor (GCD), $d_{k} = \\gcd(|x_{k} - y_{k}|, n)$.\n\nUsing only the foundational properties of modular arithmetic and the definition of the Greatest Common Divisor, justify why this procedure can reveal a nontrivial factor of $n$ once the residues of the iterates coincide modulo a prime divisor of $n$, even though they may not coincide modulo $n$. Then, explicitly run the algorithm for successive iterations, showing the values of $x_{k}$, $y_{k}$, and $d_{k}$ until the first iteration where $1 < d_{k} < n$. \n\nGive your final answer as the exact integer equal to the first nontrivial factor thus discovered. No rounding is required.", "solution": "The problem is valid as it presents a well-defined mathematical task based on established principles in number theory, namely Pollard's rho algorithm for integer factorization. The provided integer, function, and initial conditions are complete and consistent, allowing for a unique solution.\n\nFirst, we will provide the theoretical justification for why the procedure works. Let $n$ be a composite integer and let $p$ be an unknown prime factor of $n$. The algorithm generates a sequence $(x_k)$ starting from a seed $x_0$ using the iteration $x_{k+1} \\equiv f(x_k) \\pmod n$. Let's analyze the behavior of this sequence modulo the prime factor $p$.\n\nLet us define a second sequence $(z_k)$ by $z_k \\equiv x_k \\pmod p$. The recurrence relation for this sequence is $z_{k+1} \\equiv f(z_k) \\pmod p$, since if $x_{k+1} = f(x_k) - m \\cdot n$ for some integer $m$, then $x_{k+1} \\pmod p = (f(x_k) - m \\cdot n) \\pmod p$. As $p|n$, $m \\cdot n \\equiv 0 \\pmod p$, so $x_{k+1} \\equiv f(x_k) \\pmod p$. This is equivalent to $z_{k+1} \\equiv f(z_k) \\pmod p$.\n\nThe sequence $(z_k)$ takes values in the finite set $\\{0, 1, \\dots, p-1\\}$. By the pigeonhole principle, this sequence must eventually repeat, thus becoming periodic. Floyd's cycle-finding algorithm is designed to find such a cycle by generating two sequences: a \"tortoise\" sequence $(x_k)$ that moves one step at a time, and a \"hare\" sequence $(y_k)$ that moves two steps at a time. Specifically, $x_{k+1} = f(x_k)$ and $y_{k+1} = f(f(y_k))$, with $x_0 = y_0$. Note that $y_k \\equiv x_{2k} \\pmod n$ for all $k \\geq 0$.\n\nA collision occurs modulo $p$ at the first iteration $k \\geq 1$ where the residues coincide, i.e., $z_k \\equiv z_{2k} \\pmod p$. This is equivalent to $x_k \\equiv x_{2k} \\pmod p$, which is the same as $x_k \\equiv y_k \\pmod p$.\nThis congruence means that $x_k - y_k$ is a multiple of $p$, so $p | (x_k - y_k)$.\nBy definition, $p$ is a prime factor of $n$, so we also have $p | n$.\nTherefore, $p$ is a common divisor of $|x_k - y_k|$ and $n$. By the definition of the greatest common divisor (GCD), $d_k = \\gcd(|x_k - y_k|, n)$ must be a multiple of $p$. Since $p$ is a prime, $p > 1$, which ensures that $d_k > 1$.\n\nThe algorithm succeeds in finding a nontrivial factor if $d_k < n$. This situation occurs if $x_k \\equiv y_k \\pmod p$ but $x_k \\not\\equiv y_k \\pmod n$. Because the sequence $(z_k)$ has a much smaller space of possible values ($p$) compared to the sequence $(x_k)$ (which has $n$ possibilities), it is highly probable that a collision will occur modulo $p$ long before a collision occurs modulo $n$. Thus, we expect to find a $k$ where $d_k$ is a proper divisor of $n$. The algorithm fails only in the unlikely event that $x_k \\equiv y_k \\pmod q$ for all prime factors $q$ of $n$ at the same first collision step $k$, which would result in $d_k = n$.\n\nNow, we execute the algorithm for $n = 697$, $f(x) \\equiv x^2 + 1 \\pmod{697}$, and $x_0 = y_0 = 2$.\n\n**Iteration $k=1$:**\n$x_1 \\equiv f(x_0) \\equiv f(2) \\equiv 2^2 + 1 \\equiv 5 \\pmod{697}$.\n$y_1 \\equiv f(f(y_0)) \\equiv f(f(2)) \\equiv f(5) \\equiv 5^2 + 1 \\equiv 26 \\pmod{697}$.\n$d_1 = \\gcd(|x_1 - y_1|, n) = \\gcd(|5 - 26|, 697) = \\gcd(21, 697)$.\nUsing the Euclidean algorithm: $697 = 33 \\times 21 + 4$, $21 = 5 \\times 4 + 1$. Thus, $d_1 = 1$.\n\n**Iteration $k=2$:**\n$x_2 \\equiv f(x_1) \\equiv f(5) \\equiv 26 \\pmod{697}$.\n$y_2 \\equiv f(f(y_1)) \\equiv f(f(26))$.\n$f(26) \\equiv 26^2 + 1 \\equiv 676 + 1 \\equiv 677 \\pmod{697}$.\n$f(677) \\equiv 677^2 + 1 \\equiv (-20)^2 + 1 \\equiv 400 + 1 \\equiv 401 \\pmod{697}$. So, $y_2 = 401$.\n$d_2 = \\gcd(|x_2 - y_2|, n) = \\gcd(|26 - 401|, 697) = \\gcd(375, 697)$.\nThe prime factorization of $375$ is $3 \\times 5^3$. Since $697$ is not divisible by $3$ or $5$, $d_2 = 1$.\n\n**Iteration $k=3$:**\n$x_3 \\equiv f(x_2) \\equiv f(26) \\equiv 677 \\pmod{697}$.\n$y_3 \\equiv f(f(y_2)) \\equiv f(f(401))$.\n$f(401) \\equiv 401^2 + 1 \\equiv 160802 \\equiv 230 \\times 697 + 492 \\equiv 492 \\pmod{697}$.\n$f(492) \\equiv 492^2 + 1 \\equiv 242065 \\equiv 347 \\times 697 + 206 \\equiv 206 \\pmod{697}$. So, $y_3 = 206$.\n$d_3 = \\gcd(|x_3 - y_3|, n) = \\gcd(|677 - 206|, 697) = \\gcd(471, 697)$.\n$471 = 3 \\times 157$. Neither $3$ nor $157$ divides $697$. Thus, $d_3 = 1$.\n\n**Iteration $k=4$:**\n$x_4 \\equiv f(x_3) \\equiv f(677) \\equiv 401 \\pmod{697}$.\n$y_4 \\equiv f(f(y_3)) \\equiv f(f(206))$.\n$f(206) \\equiv 206^2 + 1 \\equiv 42437 \\equiv 60 \\times 697 + 617 \\equiv 617 \\pmod{697}$.\n$f(617) \\equiv 617^2 + 1 \\equiv (-80)^2 + 1 \\equiv 6401 \\equiv 9 \\times 697 + 128 \\equiv 128 \\pmod{697}$. So, $y_4 = 128$.\n$d_4 = \\gcd(|x_4 - y_4|, n) = \\gcd(|401 - 128|, 697) = \\gcd(273, 697)$.\n$273 = 3 \\times 7 \\times 13$. None of these prime factors divide $697$. Thus, $d_4 = 1$.\n\n**Iteration $k=5$:**\n$x_5 \\equiv f(x_4) \\equiv f(401) \\equiv 492 \\pmod{697}$.\n$y_5 \\equiv f(f(y_4)) \\equiv f(f(128))$.\n$f(128) \\equiv 128^2 + 1 \\equiv 16385 \\equiv 23 \\times 697 + 354 \\equiv 354 \\pmod{697}$.\n$f(354) \\equiv 354^2 + 1 \\equiv 125317 \\equiv 179 \\times 697 + 554 \\equiv 554 \\pmod{697}$. So, $y_5 = 554$.\n$d_5 = \\gcd(|x_5 - y_5|, n) = \\gcd(|492 - 554|, 697) = \\gcd(62, 697)$.\n$62 = 2 \\times 31$. Neither factor divides $697$. Thus, $d_5 = 1$.\n\n**Iteration $k=6$:**\n$x_6 \\equiv f(x_5) \\equiv f(492) \\equiv 206 \\pmod{697}$.\n$y_6 \\equiv f(f(y_5)) \\equiv f(f(554))$.\n$f(554) \\equiv 554^2 + 1 \\equiv 306917 \\equiv 440 \\times 697 + 237 \\equiv 237 \\pmod{697}$.\n$f(237) \\equiv 237^2 + 1 \\equiv 56170 \\equiv 80 \\times 697 + 410 \\equiv 410 \\pmod{697}$. So, $y_6 = 410$.\n$d_6 = \\gcd(|x_6 - y_6|, n) = \\gcd(|206 - 410|, 697) = \\gcd(204, 697)$.\nTo compute $\\gcd(204, 697)$, we use the Euclidean algorithm:\n$697 = 3 \\times 204 + 85$\n$204 = 2 \\times 85 + 34$\n$85 = 2 \\times 34 + 17$\n$34 = 2 \\times 17 + 0$\nThe GCD is $17$.\nSo, $d_6 = 17$.\n\nAt iteration $k=6$, we find $d_6 = 17$. Since $1 < 17 < 697$, this is a nontrivial factor of $697$. The algorithm terminates, having successfully found a factor.\n\nThe values computed at each step are:\n$k=1: x_1=5, y_1=26, d_1=1$\n$k=2: x_2=26, y_2=401, d_2=1$\n$k=3: x_3=677, y_3=206, d_3=1$\n$k=4: x_4=401, y_4=128, d_4=1$\n$k=5: x_5=492, y_5=554, d_5=1$\n$k=6: x_6=206, y_6=410, d_6=17$\nThe first nontrivial factor discovered is $17$.", "answer": "$$\\boxed{17}$$", "id": "3088119"}, {"introduction": "Next, we explore the Pollard p-1 method, which uses a completely different strategy based on number theory rather than random walks. Its success hinges on the prime factorization of $p-1$, where $p$ is an unknown factor of the number $n$ we are trying to factor. This exercise [@problem_id:3088143] challenges you to analyze a case where one prime factor has a 'smooth' $p-1$ value (meaning all its prime factors are small) and another does not, revealing precisely why and when the algorithm succeeds in isolating a factor.", "problem": "Let $n=(2^{31}-1)\\cdot G$, where $G$ is a prime satisfying $2^{17}-100<G<2^{17}+100$ and such that $G-1$ has at least one prime divisor $q$ with $q>331$. Consider Pollard’s $p-1$ factorization method, stage $1$, with base $a=2$ and smoothness bound $B_{1}=331$. Let $M=\\mathrm{lcm}\\{1,2,\\dots,B_{1}\\}$ denote the least common multiple of the integers from $1$ to $B_{1}$, and define $d=\\gcd(2^{M}-1,n)$, where $\\gcd$ denotes the greatest common divisor (gcd).\n\nStarting only from the facts that for a prime $p$ and integer $a$ with $\\gcd(a,p)=1$ the multiplicative order of $a$ modulo $p$ divides $p-1$, and that if the multiplicative order of $a$ modulo $p$ divides $M$ then $a^{M}\\equiv 1 \\pmod{p}$, analyze whether stage $1$ of Pollard’s $p-1$ method can succeed on $n$ with the given parameters. Then, perform the necessary computations to determine the value of $d=\\gcd(2^{M}-1,n)$ and hence identify the nontrivial prime factor of $n$ that stage $1$ reveals.\n\nGive your final answer as the integer equal to that nontrivial prime factor of $n$. No rounding is required.", "solution": "The problem asks for an analysis of the success of stage $1$ of Pollard's $p-1$ factorization method for a given integer $n$ and specific parameters, and to compute the resulting non-trivial factor.\n\nThe integer to be factored is $n=(2^{31}-1)\\cdot G$. The prime factors of $n$ are $p_1 = 2^{31}-1$ and $p_2 = G$. It is a well-established fact in number theory that $p_1 = 2^{31}-1$ is a Mersenne prime. The problem states that $G$ is a prime satisfying $2^{17}-100 < G < 2^{17}+100$.\n\nThe Pollard $p-1$ method's first stage attempts to find a non-trivial factor of $n$ by computing $d = \\gcd(a^M - 1, n)$. The parameters given are the base $a=2$ and the smoothness bound $B_1 = 331$. The value $M$ is defined as the least common multiple of all integers from $1$ to $B_1$, i.e., $M = \\mathrm{lcm}\\{1, 2, \\dots, 331\\}$.\n\nA prime factor $p$ of $n$ will be a factor of $d$ if and only if $p$ divides $a^M - 1$. This is equivalent to the congruence $a^M \\equiv 1 \\pmod{p}$.\nThe problem provides two key facts:\n1. For a prime $p$ and an integer $a$ with $\\gcd(a,p)=1$, the multiplicative order of $a$ modulo $p$, denoted $\\mathrm{ord}_p(a)$, divides $p-1$.\n2. If $\\mathrm{ord}_p(a)$ divides $M$, then $a^M \\equiv 1 \\pmod{p}$.\n\nCombining these, a sufficient condition for $p$ to be a factor of $d$ is that $p-1$ divides $M$. A number $k$ divides $M = \\mathrm{lcm}\\{1, 2, \\dots, B_1\\}$ if and only if every prime power factor of $k$ is less than or equal to $B_1$.\n\nLet's analyze the two prime factors of $n$ separately.\n\nFirst, consider the factor $p_1 = 2^{31}-1$. We must examine the prime factorization of $p_1-1$:\n$p_1-1 = (2^{31}-1)-1 = 2^{31}-2 = 2(2^{30}-1)$.\nWe use the difference of squares identity, $x^2-1 = (x-1)(x+1)$:\n$2^{30}-1 = (2^{15}-1)(2^{15}+1)$.\nSo, $p_1-1 = 2(2^{15}-1)(2^{15}+1)$.\n\nNow, we factor the terms $2^{15}-1$ and $2^{15}+1$:\n$2^{15}-1 = (2^5-1)(2^{10}+2^5+1) = 31 \\cdot (1024+32+1) = 31 \\cdot 1057$.\nChecking for small prime factors of $1057$: $1057 = 7 \\cdot 151$.\nSo, $2^{15}-1 = 7 \\cdot 31 \\cdot 151$.\n\n$2^{15}+1 = (2^5+1)(2^{10}-2^5+1) = 33 \\cdot (1024-32+1) = (3 \\cdot 11) \\cdot 993$.\nChecking for prime factors of $993$: $993 = 3 \\cdot 331$.\nSo, $2^{15}+1 = 3 \\cdot 11 \\cdot 3 \\cdot 331 = 3^2 \\cdot 11 \\cdot 331$.\n\nCombining these results, the full factorization of $p_1-1$ is:\n$p_1-1 = 2 \\cdot (7 \\cdot 31 \\cdot 151) \\cdot (3^2 \\cdot 11 \\cdot 331) = 2 \\cdot 3^2 \\cdot 7 \\cdot 11 \\cdot 31 \\cdot 151 \\cdot 331$.\nThe prime power factors of $p_1-1$ are $2^1=2$, $3^2=9$, $7^1=7$, $11^1=11$, $31^1=31$, $151^1=151$, and $331^1=331$.\nThe smoothness bound is $B_1=331$. Every prime power factor of $p_1-1$ is less than or equal to $331$. Therefore, $p_1-1$ must divide $M = \\mathrm{lcm}\\{1, 2, \\dots, 331\\}$.\nSince $\\mathrm{ord}_{p_1}(2)$ divides $p_1-1$, it follows that $\\mathrm{ord}_{p_1}(2)$ divides $M$.\nFrom the given facts, this implies $2^M \\equiv 1 \\pmod{p_1}$.\nThus, $p_1$ divides $2^M-1$.\n\nNext, consider the factor $p_2 = G$. The problem states that $G-1$ has at least one prime divisor $q$ with $q > 331$.\nThe prime factors of $M = \\mathrm{lcm}\\{1, 2, \\dots, 331\\}$ are all less than or equal to $331$. Since $G-1$ has a prime factor $q>331$, $G-1$ cannot divide $M$.\nThe sufficient condition for the method to find $G$ is not met. For the method to fail to discover the factor $G$, it must be the case that $G$ does not divide $2^M-1$, which means $\\mathrm{ord}_G(2)$ does not divide $M$.\nWhile it is not theoretically impossible for $\\mathrm{ord}_G(2)$ to be a divisor of $M$ (if $\\mathrm{ord}_G(2)$ were a divisor of $(G-1)/q$), the Pollard $p-1$ method's analysis relies on the heuristic that $\\mathrm{ord}_p(a)$ is likely to be large and share any large prime factors of $p-1$. The problem is structured to have a deterministic outcome, which implies we should follow this standard analysis. Therefore, we conclude that the presence of the large prime factor $q > 331$ in $G-1$ prevents $\\mathrm{ord}_G(2)$ from dividing $M$.\nThis leads to $2^M \\not\\equiv 1 \\pmod{G}$, which means $\\gcd(2^M-1, G) = 1$.\n\nNow we can determine the value of $d$:\n$d = \\gcd(2^M-1, n) = \\gcd(2^M-1, p_1 G)$.\nSince $p_1$ and $G$ are distinct primes, $\\gcd(p_1, G)=1$. We can use the property $\\gcd(A, BC) = \\gcd(A, B) \\cdot \\gcd(A, C)$ if $\\gcd(B,C)=1$.\n$d = \\gcd(2^M-1, p_1) \\cdot \\gcd(2^M-1, G)$.\nFrom our analysis:\n$\\gcd(2^M-1, p_1) = p_1$, because $p_1$ divides $2^M-1$.\n$\\gcd(2^M-1, G) = 1$, because we concluded $G$ does not divide $2^M-1$.\nTherefore, $d=p_1 \\cdot 1 = p_1$.\n\nThe result of stage $1$ is the factor $d=p_1$. Since $G$ is a prime (and thus $G>1$), we have $1 < p_1 < p_1 G = n$. The factor $d=p_1$ is non-trivial. Thus, stage $1$ of the algorithm succeeds.\n\nThe problem asks for the integer value of this non-trivial prime factor, which is $p_1 = 2^{31}-1$.\nWe compute its value:\n$2^{31} - 1 = 2 \\cdot 2^{30} - 1 = 2 \\cdot (2^{10})^3 - 1 = 2 \\cdot (1024)^3 - 1$.\n$1024^2 = 1048576$.\n$1024^3 = 1048576 \\cdot 1024 = 1073741824$.\n$2^{31} = 2 \\cdot 1073741824 = 2147483648$.\n$p_1 = 2^{31}-1 = 2147483648 - 1 = 2147483647$.\n\nThe non-trivial prime factor of $n$ found by stage $1$ of Pollard's $p-1$ method is $2147483647$.", "answer": "$$\\boxed{2147483647}$$", "id": "3088143"}, {"introduction": "An essential part of mastering any algorithm is understanding its limitations and potential failure modes. The Pollard p-1 method can sometimes fail by returning the trivial factor $n$, which occurs if the chosen parameters cause the condition $a^{M} \\equiv 1$ to hold for all prime factors of $n$ simultaneously. This final practice problem [@problem_id:3088200] delves into this scenario, asking you to explain the failure and then devise a more refined, two-stage strategy to recover a factor, turning a potential dead end into a successful factorization.", "problem": "Let $n = p q$ be the product of two distinct odd primes $p$ and $q$, and let $a$ be an integer with $\\gcd(a,n) = 1$. Pollard’s $p-1$ method chooses a smooth exponent $M$ (for example, the least common multiple of many small integers) and computes $g = \\gcd(a^{M} - 1, n)$, hoping to obtain a nontrivial factor of $n$. The method relies on the fact that in the multiplicative group modulo a prime $r$, the order of any element divides $r-1$ by Fermat’s Little Theorem, so if $r-1$ divides $M$ then $a^M \\equiv 1 \\pmod{r}$. Suppose that for the chosen $M$ one has $a^{M} \\equiv 1 \\pmod{p}$ and $a^{M} \\equiv 1 \\pmod{q}$. Explain why $g$ may equal $n$ in this case by reasoning from the structure of the multiplicative groups modulo $p$ and $q$ and the Chinese Remainder Theorem (CRT). Then, select the strategy that correctly describes how to recover a nontrivial factor from this situation without changing the base $a$ or the smoothness bound, by appropriately organizing the exponentiation so that a successful greatest common divisor appears before both congruences are simultaneously satisfied.\n\nWhich option is correct?\n\nA. Because $a^{M} \\equiv 1 \\pmod{p}$ and $a^{M} \\equiv 1 \\pmod{q}$, the integer $a^{M} - 1$ is divisible by both $p$ and $q$, so $g = \\gcd(a^{M} - 1, n)$ can equal $n$. To recover a factor, write $M$ as a product of prime powers and form an increasing sequence $M_1 \\mid M_2 \\mid \\cdots \\mid M$, computing $g_i = \\gcd(a^{M_i} - 1, n)$ at each step. Stop at the first $i$ with $1 < g_i < n$, which yields a nontrivial factor. If $g = n$ at the end, backtrack within the last prime-power block by testing intermediate powers to isolate an index where one prime divides $a^{M_i} - 1$ but the other does not.\n\nB. Because $\\mathbb{Z}_{n}^{\\times}$ is cyclic of known order, taking $g = \\gcd\\!\\left(a^{M/2} - 1, n\\right)$ must split $n$ into its primes.\n\nC. Because the failure is caused by the base $a$, choosing any different $a$ and recomputing always recovers a factor, so no further organization of the exponent is needed.\n\nD. Because $\\gcd(a^{M} - 1, n) = 1$ whenever $a^{M} \\equiv 1 \\pmod{p}$ and $a^{M} \\equiv 1 \\pmod{q}$, use the Chinese Remainder Theorem (CRT) to compute $\\varphi(n)$ and deduce $p$ and $q$ directly.", "solution": "We begin with the structure of multiplicative groups modulo primes. For a prime $r$, the group of units modulo $r$ is $\\mathbb{Z}_{r}^{\\times}$, which has cardinality $r-1$. By Fermat’s Little Theorem, for any $a$ with $\\gcd(a,r) = 1$, one has $a^{r-1} \\equiv 1 \\pmod{r}$. Equivalently, the order of $a$ in $\\mathbb{Z}_{r}^{\\times}$ divides $r-1$.\n\nPollard’s $p-1$ method exploits this divisibility: if $M$ is chosen so that $p-1 \\mid M$, then $a^{M} \\equiv 1 \\pmod{p}$. If, in addition, $q-1 \\nmid M$, then typically $a^{M} \\not\\equiv 1 \\pmod{q}$, and thus $a^{M} - 1$ is divisible by $p$ but not by $q$. In that case, $g = \\gcd(a^{M} - 1, n)$ is expected to reveal the factor $p$.\n\nNow suppose $a^{M} \\equiv 1 \\pmod{p}$ and also $a^{M} \\equiv 1 \\pmod{q}$. Since $n = p q$, the Chinese Remainder Theorem (CRT) implies that congruences modulo $p$ and modulo $q$ combine to give a congruence modulo $n$. Specifically, if an integer $x$ satisfies $x \\equiv 1 \\pmod{p}$ and $x \\equiv 1 \\pmod{q}$, then $x \\equiv 1 \\pmod{n}$. Applying this to $x = a^{M}$, we have $a^{M} \\equiv 1 \\pmod{n}$, so $a^{M} - 1$ is divisible by both $p$ and $q$, hence by $n$. Therefore\n$$\ng \\;=\\; \\gcd(a^{M} - 1, n) \\;=\\; n,\n$$\nwhich is the trivial greatest common divisor that yields no factor.\n\nTo recover a nontrivial factor in this situation without changing the base $a$ or the smoothness bound, one should organize the exponentiation so that a greatest common divisor is computed at intermediate exponents before both congruences are simultaneously satisfied. Concretely, factor the smooth exponent $M$ as a product of prime powers,\n$$\nM \\;=\\; \\prod_{\\ell \\leq B} \\ell^{e_{\\ell}},\n$$\nand define an increasing chain of exponents\n$$\nM_1 \\mid M_2 \\mid \\cdots \\mid M_k \\;=\\; M,\n$$\nwhere each $M_{i+1}$ multiplies $M_i$ by a small prime $\\ell$ or a prime power $\\ell^{e}$. Compute $g_i = \\gcd(a^{M_i} - 1, n)$ at each step. If at some index $i$ one has $p-1 \\mid M_i$ but $q-1 \\nmid M_i$, then $a^{M_i} \\equiv 1 \\pmod{p}$ while $a^{M_i} \\not\\equiv 1 \\pmod{q}$, and hence $1 < g_i < n$, yielding a nontrivial factor. If the final step yields $g_k = n$, backtrack within the last prime-power block: if $M_k = M_{k-1} \\cdot \\ell^{e}$, compute successively $b_j \\equiv a^{M_{k-1} \\cdot \\ell^{j}} \\pmod{n}$ for $j = 1,2,\\dots,e$, and at each $j$ test $g_j = \\gcd(b_j - 1, n)$. There will be a first index $j^{\\ast}$ where the other prime’s congruence $a^{M_{k-1} \\cdot \\ell^{j^{\\ast}}} \\equiv 1 \\pmod{q}$ turns on; just before that, $g_{j^{\\ast}-1}$ satisfies $1 < g_{j^{\\ast}-1} < n$ and furnishes a factor.\n\nWe now assess each option:\n\nA. This option correctly explains why $g$ can equal $n$: if $a^{M} \\equiv 1$ modulo both $p$ and $q$, then $a^{M} - 1$ is divisible by both primes, so $\\gcd(a^{M} - 1, n) = n$. The recovery method described—decomposing $M$ into prime-power blocks, computing $\\gcd(a^{M_i} - 1, n)$ along an increasing sequence of exponents, and backtracking within the last block if needed—matches the principle-based approach derived above and is a standard way to extract a factor before both congruences hold simultaneously. Verdict: Correct.\n\nB. This option incorrectly asserts that $\\mathbb{Z}_{n}^{\\times}$ is cyclic of known order and that taking a half-exponent must split $n$. In general, $\\mathbb{Z}_{n}^{\\times}$ for composite $n$ is not cyclic, and its order is $\\varphi(n)$, which is unknown without factoring $n$. Even if the Carmichael function $\\lambda(n)$ were known, $\\gcd(a^{\\lambda(n)/2} - 1, n)$ does not guarantee a split. Verdict: Incorrect.\n\nC. This option states that choosing a different base $a$ and recomputing always recovers a factor. While changing $a$ is a sensible heuristic to avoid the simultaneous congruence, it does not always succeed and provides no guarantee. The claim of certainty makes the statement false as written. Verdict: Incorrect.\n\nD. This option claims $\\gcd(a^{M} - 1, n) = 1$ under the simultaneous congruences and suggests computing $\\varphi(n)$ directly via the Chinese Remainder Theorem. The greatest common divisor is $n$, not $1$, in this case, and one cannot compute $\\varphi(n)$ without already knowing the factorization of $n$. Verdict: Incorrect.", "answer": "$$\\boxed{A}$$", "id": "3088200"}]}