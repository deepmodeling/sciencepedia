{"hands_on_practices": [{"introduction": "The stark contrast between the difficulty of factoring a number and the ease of testing its primality lies at the heart of modern cryptography. We begin our exploration with the most fundamental approach to factorization: trial division. This exercise [@problem_id:3088395] grounds our understanding by first proving the crucial optimization that a composite number $n$ must have a prime factor less than or equal to $\\sqrt{n}$, and then applying this principle to factor a multi-digit number by hand. Mastering this method provides a concrete appreciation for the computational cost of factorization, setting the stage for the more sophisticated primality tests to follow.", "problem": "Let $n \\in \\mathbb{Z}_{\\geq 2}$. Using only the foundational definitions of divisibility and composite numbers, first establish the following claim: if $n$ is composite, then there exists an integer divisor $d$ with $2 \\leq d \\leq \\sqrt{n}$ such that $d \\mid n$. Then, design and carry out a computation that leverages this bound to factor the specific integer $n = 246246$ by trial division. Your procedure should test successive potential prime divisors in increasing order and may update the upper bound to the square root of the current cofactor as factors are found. Present the final prime factorization of $246246$ as a single product of primes in nondecreasing order. Provide the exact expression; no rounding is required.", "solution": "The problem consists of two parts. The first is a proof regarding the divisors of a composite number, and the second is the application of this result to factor a specific integer. I will address each part in sequence.\n\nPart 1: Proof of the divisor bound property\n\nWe are tasked to prove the following claim: if an integer $n \\in \\mathbb{Z}_{\\geq 2}$ is composite, then there exists an integer divisor $d$ of $n$ such that $2 \\leq d \\leq \\sqrt{n}$.\n\nLet $n$ be a composite number, with $n \\geq 2$. By the definition of a composite number, there exist integers $a$ and $b$ such that $n = a \\cdot b$, with the constraints $1 < a < n$ and $1 < b < n$.\n\nSince $n = a \\cdot b$, it cannot be the case that both $a > \\sqrt{n}$ and $b > \\sqrt{n}$. To show this, assume for the sake of contradiction that both inequalities hold simultaneously. If $a > \\sqrt{n}$ and $b > \\sqrt{n}$, then their product would satisfy the inequality:\n$$a \\cdot b > \\sqrt{n} \\cdot \\sqrt{n}$$\n$$a \\cdot b > n$$\nThis contradicts our starting point that $n = a \\cdot b$. Therefore, the assumption that both $a > \\sqrt{n}$ and $b > \\sqrt{n}$ must be false.\n\nThis implies that at least one of the factors, $a$ or $b$, must be less than or equal to $\\sqrt{n}$. Without loss of generality, let us assume $a \\leq b$. Then we have:\n$$a^2 \\leq a \\cdot b = n$$\nTaking the square root of both sides, we obtain:\n$$a \\leq \\sqrt{n}$$\nFrom the definition of a composite number, we have the condition $1 < a$. Since $a$ is an integer, this is equivalent to $a \\geq 2$.\n\nBy choosing $d = a$, we have found an integer divisor of $n$ that satisfies the condition $2 \\leq d \\leq \\sqrt{n}$. This completes the proof. It is worth noting that this proof guarantees the existence of any divisor in this range, not necessarily a prime one. However, the smallest such divisor $d$ must be prime. This is because if $d$ were composite, it would have a divisor $d'$ such that $1 < d' < d$, and $d'$ would also divide $n$, contradicting the minimality of $d$. This corollary is the basis for the trial division algorithm.\n\nPart 2: Factorization of $n = 246246$\n\nWe will now apply the principle demonstrated above to find the prime factorization of $n = 246246$. The procedure is to test for divisibility by successive prime numbers starting from $2$, up to the square root of the number being factored. When a factor is found, we divide it out, obtaining a smaller cofactor, and then we update the upper bound for our search to the square root of this new cofactor.\n\nStep 1: Initial factorization\nThe number to factor is $n_0 = 246246$. The number is even, so it is divisible by the first prime, $p_1 = 2$.\n$$246246 = 2 \\times 123123$$\nOur remaining cofactor to be factored is $n_1 = 123123$.\n\nStep 2: Factoring the first cofactor, $n_1 = 123123$\nThe upper bound for our search for prime divisors is $\\sqrt{123123} \\approx 350.89$. We test successive primes.\nThe next prime is $p=3$. The sum of the digits of $n_1$ is $1+2+3+1+2+3 = 12$, which is divisible by $3$. Thus, $n_1$ is divisible by $3$.\n$$123123 = 3 \\times 41041$$\nThe factorization so far is $246246 = 2 \\times 3 \\times 41041$. The new cofactor to be factored is $n_2 = 41041$.\n\nStep 3: Factoring the second cofactor, $n_2 = 41041$\nThe new upper bound is $\\sqrt{41041} \\approx 202.58$. We continue testing primes, starting from the last successful factor, $3$. The sum of digits of $n_2$ is $4+1+0+4+1 = 10$, not divisible by $3$. The number does not end in $0$ or $5$, so it is not divisible by $5$. We test the next prime, $p=7$.\n$$41041 \\div 7 = 5863$$\nThe division is exact. So, $p_3=7$ is a factor.\nThe factorization is now $246246 = 2 \\times 3 \\times 7 \\times 5863$. The new cofactor is $n_3 = 5863$.\n\nStep 4: Factoring the third cofactor, $n_3 = 5863$\nThe new upper bound is $\\sqrt{5863} \\approx 76.57$. We continue testing primes, starting from $7$.\n$5863 \\div 7$ yields a remainder, so $7$ is not a repeated factor. We test the next prime, $p=11$. The alternating sum of digits is $3 - 6 + 8 - 5 = 0$. Since this sum is $0$, the number is divisible by $11$.\n$$5863 \\div 11 = 533$$\nSo, $p_4=11$ is a factor.\nThe factorization is now $246246 = 2 \\times 3 \\times 7 \\times 11 \\times 533$. The new cofactor is $n_4 = 533$.\n\nStep 5: Factoring the fourth cofactor, $n_4 = 533$\nThe new upper bound is $\\sqrt{533} \\approx 23.09$. We test primes starting from $11$.\n$533$ is not divisible by $11$ (alternating sum $3-3+5=5$). We test the next prime, $p=13$.\n$$533 \\div 13 = 41$$\nThe division is exact. So, $p_5=13$ is a factor.\nThe factorization is now $246246 = 2 \\times 3 \\times 7 \\times 11 \\times 13 \\times 41$. The new cofactor is $n_5 = 41$.\n\nStep 6: Factoring the final cofactor, $n_5 = 41$\nThe new upper bound is $\\sqrt{41} \\approx 6.4$. The primes less than this bound are $2$, $3$, and $5$.\n$41$ is not divisible by $2$ (it is odd).\n$41$ is not divisible by $3$ (sum of digits is $5$).\n$41$ is not divisible by $5$.\nSince $41$ has no prime factors less than or equal to its square root, it must be a prime number. Thus, $p_6 = 41$ is the final prime factor.\n\nCombining all the prime factors found in nondecreasing order, we get the complete prime factorization of $246246$.\n$246246 = 2 \\times 3 \\times 7 \\times 11 \\times 13 \\times 41$.\nA quick verification: $2 \\times 3 \\times 7 = 42$. Also, $11 \\times 13 = 143$. And $7 \\times 11 \\times 13 = 1001$. So, $2 \\times 3 \\times (7 \\times 11 \\times 13) \\times 41 = 6 \\times 1001 \\times 41 = 6006 \\times 41 = 246246$. The result is correct.\n\nThe final prime factorization presented as a single product of primes in nondecreasing order is $2 \\times 3 \\times 7 \\times 11 \\times 13 \\times 41$.", "answer": "$$\\boxed{2 \\times 3 \\times 7 \\times 11 \\times 13 \\times 41}$$", "id": "3088395"}, {"introduction": "Instead of the brute-force search for factors, modern primality testing asks a more subtle question: does a number *behave* like a prime? The Miller-Rabin test is a powerful probabilistic algorithm that answers this by checking for specific properties that all primes must satisfy. In this practice problem [@problem_id:3088381], you will perform a step-by-step iteration of the Miller-Rabin test on a composite number that famously deceives simpler tests, learning how a \"witness to compositeness\" is found and how it can even reveal a factor of the number without a full factorization attempt.", "problem": "Consider the odd composite integer $n=341$ and the base $a=2$. The Miller–Rabin strong probable prime test proceeds by writing $n-1=2^{r}d$ with $d$ odd, computing the modular power $x_{0}\\equiv a^{d} \\pmod{n}$, and then forming the square chain $x_{j+1}\\equiv x_{j}^{2}\\pmod{n}$ for $j=0,1,\\dots,r-1$. In this framework, a step that witnesses compositeness occurs when $x_{j}\\equiv 1 \\pmod{n}$ for some $j\\geq 1$ while $x_{j-1}\\not\\equiv \\pm 1 \\pmod{n}$, which exhibits a nontrivial square root of $1$ modulo $n$. Using the definitions of modular arithmetic, exponentiation, and the decomposition of $n-1$, execute a complete Miller–Rabin iteration for the given $n$ and $a$: determine $r$ and $d$, compute $x_{0}$ and the subsequent $x_{j}$ values up to $j=r$, identify the earliest step witnessing compositeness, and then use the Greatest Common Divisor (GCD) to extract a nontrivial factor of $n$ from that step.\n\nProvide as your final answer the exact integer value of $\\gcd\\!\\big(x_{j-1}-1,n\\big)$ associated with the first witnessing step. Do not round; express your answer as an exact integer.", "solution": "The problem statement is a valid application of the Miller-Rabin primality test, a well-defined algorithm in number theory. All necessary data ($n=341$, $a=2$) and definitions are provided, and the problem is self-contained, objective, and scientifically sound. We may proceed with the solution.\n\nThe objective is to execute one iteration of the Miller–Rabin test for the integer $n=341$ with base $a=2$, identify the step that witnesses its compositeness, and use that information to find a nontrivial factor.\n\nFirst, we must decompose $n-1$ into the form $2^r d$, where $d$ is an odd integer.\nGiven $n=341$, we have $n-1 = 340$.\nWe factor out powers of $2$ from $340$:\n$$340 = 10 \\times 34 = (2 \\times 5) \\times (2 \\times 17) = 4 \\times 85 = 2^2 \\times 85$$\nHere, $d=85$ is odd. Thus, we identify $r=2$ and $d=85$.\n\nThe Miller–Rabin test sequence is defined by $x_0 \\equiv a^d \\pmod{n}$ and $x_{j+1} \\equiv x_j^2 \\pmod{n}$ for $j=0, 1, \\dots, r-1$.\n\nWe begin by computing $x_0$:\n$$x_0 \\equiv a^d \\pmod{n} \\equiv 2^{85} \\pmod{341}$$\nTo compute this modular exponentiation efficiently, we use the method of binary exponentiation (also known as repeated squaring). The binary representation of the exponent $d=85$ is $1010101_2$, which corresponds to the sum of powers of two: $85 = 64 + 16 + 4 + 1$.\nWe compute the required powers of $2$ modulo $341$:\n$$\\begin{align*} 2^1 &\\equiv 2 \\pmod{341} \\\\ 2^2 &\\equiv 4 \\pmod{341} \\\\ 2^4 &\\equiv 4^2 \\equiv 16 \\pmod{341} \\\\ 2^8 &\\equiv 16^2 \\equiv 256 \\pmod{341} \\\\ 2^{16} &\\equiv 256^2 = 65536 \\pmod{341} \\end{align*}$$\nTo reduce $65536$, we divide by $341$: $65536 = 192 \\times 341 + 4$. So, $2^{16} \\equiv 4 \\pmod{341}$.\n$$\\begin{align*} 2^{32} &\\equiv 4^2 \\equiv 16 \\pmod{341} \\\\ 2^{64} &\\equiv 16^2 \\equiv 256 \\pmod{341} \\end{align*}$$\nNow, we combine these results to find $2^{85}$:\n$$2^{85} = 2^{64} \\cdot 2^{16} \\cdot 2^4 \\cdot 2^1$$\n$$x_0 \\equiv 2^{85} \\equiv 256 \\cdot 4 \\cdot 16 \\cdot 2 \\pmod{341}$$\nLet's compute the product step by step:\n$$256 \\cdot 4 = 1024$$\nDividing $1024$ by $341$ gives $1024 = 3 \\times 341 + 1$, so $1024 \\equiv 1 \\pmod{341}$.\nSubstituting this back into the expression for $x_0$:\n$$x_0 \\equiv (1) \\cdot 16 \\cdot 2 \\equiv 32 \\pmod{341}$$\nSo, $x_0 = 32$.\n\nThe test first checks if $x_0 \\equiv \\pm 1 \\pmod{n}$. Since $32 \\not\\equiv 1 \\pmod{341}$ and $32 \\not\\equiv -1 \\pmod{341}$ (as $-1 \\equiv 340 \\pmod{341}$), the test proceeds to the next step.\n\nNext, we compute the sequence $x_j$ for $j=1, \\dots, r-1$. Since $r=2$, we only need to compute $x_1$.\n$$x_1 \\equiv x_0^2 \\pmod{n} \\equiv 32^2 \\pmod{341}$$\n$$x_1 \\equiv 1024 \\pmod{341}$$\nAs determined earlier, $1024 = 3 \\times 341 + 1$. Therefore:\n$$x_1 \\equiv 1 \\pmod{341}$$\nThe test has found that for $j=1$, we have $x_1 \\equiv 1 \\pmod{341}$. The condition for witnessing compositeness is met because $x_1 \\equiv 1 \\pmod{n}$ while the previous term in the sequence, $x_{1-1}=x_0=32$, is not congruent to $\\pm 1 \\pmod{n}$. This is the first step that witnesses that $n$ is composite.\n\nThe existence of such an $x_0$ means it is a nontrivial square root of $1$ modulo $n$. That is, $x_0^2 \\equiv 1 \\pmod{n}$ but $x_0 \\not\\equiv \\pm 1 \\pmod{n}$. This can be rewritten as $x_0^2 - 1 \\equiv 0 \\pmod{n}$, or $(x_0 - 1)(x_0 + 1) \\equiv 0 \\pmod{n}$.\nThis implies that $n$ divides the product $(x_0 - 1)(x_0 + 1)$. Since $n$ does not divide $x_0-1$ (because $x_0 \\not\\equiv 1 \\pmod n$) and $n$ does not divide $x_0+1$ (because $x_0 \\not\\equiv -1 \\pmod n$), $n$ must share a nontrivial factor with each of $(x_0 - 1)$ and $(x_0 + 1)$.\n\nThe problem asks to extract a nontrivial factor using the Greatest Common Divisor (GCD) from the witnessing step. Specifically, we must calculate $\\gcd(x_{j-1}-1, n)$ where $j=1$ is the first witnessing step.\nThis requires computing $\\gcd(x_0 - 1, n)$.\nSubstituting the values we found:\n$$\\gcd(32 - 1, 341) = \\gcd(31, 341)$$\nTo calculate this GCD, we can use the Euclidean algorithm. Since $31$ is a prime number, we can simply test if $31$ is a divisor of $341$.\n$$341 \\div 31 = 11$$\nThe division is exact. Therefore, $31$ is a divisor of $341$, and the greatest common divisor is $31$.\n$$\\gcd(31, 341) = 31$$\nThis is the nontrivial factor of $n=341$ extracted from the Miller-Rabin test.", "answer": "$$\\boxed{31}$$", "id": "3088381"}, {"introduction": "While probabilistic tests like Miller-Rabin provide near certainty, how can one create an undeniable, mathematically rigorous *proof* of primality that is easier to check than to find? This question leads us to the concept of a primality certificate, a cornerstone idea in computational complexity theory. This exercise [@problem_id:3088386] introduces the Pratt certificate, where proving a number $p$ is prime involves a clever use of its factors of $p-1$. By constructing and verifying a certificate for the prime number $97$, you will gain insight into how primality can be certified efficiently, formally placing the problem of primality testing into the complexity class NP.", "problem": "Consider the task of certifying that a given integer $n$ is prime using a succinct certificate that can be verified in polynomial time relative to $\\log n$. One classical approach is the Pratt certificate: for a claimed prime $p$, one supplies the complete prime factorization of $p-1$ and, for each node $n$ in the resulting factor tree, a base $a_{n}$ with $1<a_{n}<n$ such that $a_{n}^{n-1}\\equiv 1 \\pmod{n}$ and, for every prime $q$ dividing $n-1$, $a_{n}^{(n-1)/q}\\not\\equiv 1 \\pmod{n}$. Leaves are the base prime $2$. The verification consists of checking these congruences for each node and confirming the provided subfactorizations, using only basic arithmetic operations.\n\nYour tasks are:\n\n- Using only foundational facts from elementary number theory and finite group theory (definitions of prime, the multiplicative group of units modulo $n$, Fermat's little theorem, and Lagrange's theorem on orders dividing group sizes), explain why such a certificate, if valid, proves that $p$ is prime and why its verification is feasible in time polynomial in $\\log p$.\n\n- Carry out this program concretely for $p=97$ by constructing and verifying a Pratt certificate. Proceed as follows:\n  1. Factor $p-1$ fully into primes, and recursively factor each $q-1$ for the primes $q$ that appear, until reaching $2$.\n  2. Exhibit explicit choices of bases $a_{n}$ for each non-leaf node $n$ in the certificate tree; you may take $a_{97}=5$ and $a_{3}=2$. Verify, using modular arithmetic, that for each such node $n$ the conditions $a_{n}^{n-1}\\equiv 1 \\pmod{n}$ and $a_{n}^{(n-1)/q}\\not\\equiv 1 \\pmod{n}$ hold for every prime $q$ dividing $n-1$.\n  3. Justify, from first principles, why the existence of the above data implies that $97$ is prime and why the verification requires only a number of bit operations polynomial in $\\log 97$. In your justification, clearly articulate the role of Lagrange's theorem on the order of an element dividing the group order, and explain why no integer factorization of $97$ is required to verify the certificate, thus relating this to membership in nondeterministic polynomial time (NP).\n\n- Let $S$ denote the sum of all exponents appearing in the modular congruence checks across the entire certificate tree you verify; include both the exponents used in the equalities of the form $a_{n}^{e}\\equiv 1 \\pmod{n}$ and the exponents used in the inequalities of the form $a_{n}^{e}\\not\\equiv 1 \\pmod{n}$ at every non-leaf node. Compute the exact value of $S$.\n\nGive your final answer as a single exact integer. No rounding is required.", "solution": "The problem asks for an explanation of the Pratt certificate for primality, a concrete construction and verification for the integer $p=97$, and the calculation of a sum $S$ related to the verification exponents.\n\nFirst, we address the theoretical foundation of the Pratt certificate. The goal is to prove that a number $p$ is prime. The core of the proof relies on finding an element of order $p-1$ in the multiplicative group of integers modulo $p$, denoted $(\\mathbb{Z}/p\\mathbb{Z})^\\times$. The order of this group is given by Euler's totient function, $\\phi(p)$. By definition, $p$ is prime if and only if $\\phi(p) = p-1$. The certificate provides the necessary information to prove that $\\phi(p) = p-1$. The certificate for a prospective prime $p$ supplies a witness integer $a_p$ with $1 < a_p < p$, along with the complete prime factorization of $p-1$, say $p-1 = q_1^{k_1} q_2^{k_2} \\cdots q_m^{k_m}$. For each prime factor $q_i$, a recursive certificate of its primality is also part of the overall certificate. The witness $a_p$ must satisfy two conditions:\n1. $a_p^{p-1} \\equiv 1 \\pmod{p}$\n2. $a_p^{(p-1)/q_i} \\not\\equiv 1 \\pmod{p}$ for all $i \\in \\{1, 2, \\dots, m\\}$\n\nTo see why these conditions prove primality, let $k$ be the order of $a_p$ in the group $(\\mathbb{Z}/p\\mathbb{Z})^\\times$. The first condition, $a_p^{p-1} \\equiv 1 \\pmod{p}$, implies by definition of order that $k$ must divide $p-1$. Suppose, for the sake of contradiction, that $k$ is a proper divisor of $p-1$, i.e., $k < p-1$. If $k$ is a proper divisor, then the integer $(p-1)/k$ is greater than $1$ and must have at least one prime factor, say $q_j$. This means $q_j$ divides $(p-1)/k$, which can be written as $k$ divides $(p-1)/q_j$. If $k$ divides $(p-1)/q_j$, then there exists an integer $c$ such that $(p-1)/q_j = kc$. This implies $a_p^{(p-1)/q_j} = a_p^{kc} = (a_p^k)^c \\equiv 1^c \\equiv 1 \\pmod{p}$. However, this result directly contradicts the second condition of the certificate. Therefore, our initial assumption that $k$ is a proper divisor of $p-1$ must be false. The only remaining possibility is that the order of $a_p$ is exactly $k = p-1$.\n\nAccording to Lagrange's theorem from finite group theory, the order of any element of a finite group must divide the order of the group. In our case, the order of the element $a_p$, which is $p-1$, must divide the order of the group $(\\mathbb{Z}/p\\mathbb{Z})^\\times$, which is $\\phi(p)$. So, we have $(p-1) | \\phi(p)$. For any integer $p > 1$, it is known that $\\phi(p) \\leq p-1$. The only way for $(p-1)$ to divide $\\phi(p)$ under this constraint is for the two values to be equal: $\\phi(p) = p-1$. This equality holds if and only if $p$ is a prime number. The logic recursively applies to the prime factors $q_i$ of $p-1$, down to a base case, the prime $2$.\n\nThe verification of this certificate is feasible in polynomial time with respect to the input size, which is the number of bits in $p$, i.e., $O(\\log p)$. The certificate consists of a tree of primes. The depth of this tree is at most $O(\\log p)$ since any prime factor $q$ of $n-1$ is less than $n$, typically $q \\le (n-1)/2$. The total number of nodes in the tree is also bounded, typically by $O(\\log p)$. For each non-leaf node $n$ in the tree, the verifier must perform a few checks:\n1. Confirm that $n-1$ equals the product of its claimed prime factors. This involves a small number of multiplications.\n2. Verify the $1 + \\omega(n-1)$ congruences, where $\\omega(n-1)$ is the number of distinct prime factors of $n-1$. Each congruence is a modular exponentiation of the form $a^b \\pmod n$. Using the method of binary exponentiation (repeated squaring), this can be computed in $O(\\log b)$ multiplications of numbers of size $O(\\log n)$. A single modular exponentiation can thus be performed in time polynomial in $\\log n$, for example $O((\\log n)^3)$.\nSince the number of nodes and the number of checks per node are small (polynomial in $\\log p$), and each check takes polynomial time, the total verification time is polynomial in $\\log p$.\n\nNow, we will carry out this program for $p=97$.\n1. We construct the certificate tree. The root node is $p=97$. We must factor $p-1 = 96$. The prime factorization is $96 = 2^5 \\times 3^1$. The distinct prime factors are $2$ and $3$. The prime $2$ is a leaf node (base case). The prime $3$ is a non-leaf node, which itself requires certification. To certify $3$, we factor $3-1 = 2$. The only prime factor is $2$, a leaf. The certificate tree thus consists of nodes for $97$, $3$, and $2$.\n\n2. We exhibit and verify the bases.\nFor the node $n=97$, we are given the base $a_{97}=5$. The prime factors of $97-1=96$ are $q_1=2$ and $q_2=3$. We must verify:\n- $a_{97}^{96} \\equiv 1 \\pmod{97}$: Using Fermat's Little Theorem, which a verifier can check explicitly: $5^{96} \\equiv 1 \\pmod{97}$. We calculate intermediate powers: $5^2=25$, $5^4 \\equiv 43$, $5^8 \\equiv 6$, $5^{16} \\equiv 36$, $5^{32} \\equiv 35$, $5^{64} \\equiv 35^2 = 1225 \\equiv 1225 - 12 \\times 97 = 1225 - 1164 = 61 \\pmod{97}$. Then $5^{96} = 5^{64} \\times 5^{32} \\equiv 61 \\times 35 = 2135 \\equiv 2135 - 22 \\times 97 = 2135 - 2134 = 1 \\pmod{97}$. The condition holds.\n- $a_{97}^{(97-1)/2} = 5^{48} \\not\\equiv 1 \\pmod{97}$: $5^{48} = 5^{32} \\times 5^{16} \\equiv 35 \\times 36 = 1260 \\equiv 1260 - 12 \\times 97 = 1260 - 1164 = 96 \\equiv -1 \\pmod{97}$. Since $96 \\not\\equiv 1 \\pmod{97}$, this condition holds.\n- $a_{97}^{(97-1)/3} = 5^{32} \\not\\equiv 1 \\pmod{97}$: As calculated above, $5^{32} \\equiv 35 \\pmod{97}$. Since $35 \\not\\equiv 1 \\pmod{97}$, this condition holds.\n\nFor the node $n=3$, we are given the base $a_3=2$. The prime factor of $3-1=2$ is $q_1=2$. We must verify:\n- $a_3^{3-1} = 2^2 \\equiv 1 \\pmod 3$: $2^2=4 \\equiv 1 \\pmod 3$. This holds.\n- $a_3^{(3-1)/2} = 2^1 \\not\\equiv 1 \\pmod 3$: $2^1=2 \\not\\equiv 1 \\pmod 3$. This holds.\n\n3. The existence of this verified data proves that $97$ is prime. The checks for $a_{97}=5$ establish that its order modulo $97$ is exactly $96$. By Lagrange's theorem, this implies that $\\phi(97)$ is a multiple of $96$. Since $\\phi(97) \\le 97-1=96$, it must be that $\\phi(97)=96$, which proves $97$ is prime. This reasoning is conditioned on the primality of the factors of $96$, i.e., $2$ and $3$. The primality of $2$ is axiomatic, and the primality of $3$ is proven by the successful verification for the node $n=3$. The verification process for $97$ did not require factoring any number; the factorization of $96$ was provided as part of the certificate. This demonstrates that primality testing is in the complexity class **NP** (Nondeterministic Polynomial time), as a \"yes\" answer (\"97 is prime\") can be verified in polynomial time given an appropriate certificate (the guess).\n\nFinally, we compute the sum $S$ of all exponents appearing in the modular congruence checks.\nFor the node $n=97$, the exponents are from the checks $5^{96} \\equiv 1 \\pmod{97}$, $5^{48} \\not\\equiv 1 \\pmod{97}$, and $5^{32} \\not\\equiv 1 \\pmod{97}$. The exponents are $96$, $48$, and $32$.\nFor the node $n=3$, the exponents are from the checks $2^2 \\equiv 1 \\pmod 3$ and $2^1 \\not\\equiv 1 \\pmod 3$. The exponents are $2$ and $1$.\nThe total sum $S$ is the sum of all these exponents:\n$$S = 96 + 48 + 32 + 2 + 1$$\n$$S = 176 + 3$$\n$$S = 179$$\nThe exact value of $S$ is $179$.", "answer": "$$\n\\boxed{179}\n$$", "id": "3088386"}]}