{"hands_on_practices": [{"introduction": "The elegance of the Diffie-Hellman key exchange lies in a simple yet powerful property of modular exponentiation. This first exercise guides you through verifying this property, both theoretically and with a concrete example [@problem_id:3086462]. By working through the calculations from both participants' perspectives, you will confirm that they independently arrive at the identical shared secret, forming the foundation of this cryptographic method.", "problem": "Consider the multiplicative group modulo a prime $p$ of integers $G = (\\mathbb{Z}/p\\mathbb{Z})^{\\times}$, with group operation given by multiplication modulo $p$. The foundational facts you may use are: for prime $p$, $G$ is a finite group of order $p-1$; exponentiation $g^{n}$ for $g \\in G$ and $n \\in \\mathbb{N}$ is defined by repeated application of the group operation; and reduction modulo $p$ is compatible with multiplication. Two parties run Diffie–Hellman Key Exchange (DHKE), choosing a publicly known base $g \\in G$ and private exponents $a$ and $b$. They publish $A \\equiv g^{a} \\pmod{p}$ and $B \\equiv g^{b} \\pmod{p}$ and then each computes a shared secret using the other’s public value and their own private exponent.\n\nUsing only the group axioms, the definition of exponentiation in groups, and standard properties of modular arithmetic, first justify why both parties obtain the same element of $G$ when computing their shared secret from $A$, $B$, $a$, and $b$. Then, for the concrete parameters $p=23$, $g=5$, $a=6$, and $b=15$, compute $A$ and $B$ explicitly. Finally, compute the shared secret from each side and verify that the two computations coincide, giving the common value as a single integer in the range $1$ to $p-1$. No rounding is required.", "solution": "The problem statement is valid. It is a well-posed problem in elementary number theory and cryptography, grounded in established mathematical principles and containing all necessary information for a unique solution.\n\nThe problem asks for two parts: first, a theoretical justification for why the Diffie-Hellman Key Exchange protocol results in a common shared secret, and second, a concrete calculation to demonstrate this for a given set of parameters.\n\n**Part 1: Justification of the Shared Secret**\n\nLet the two parties be Party 1 and Party 2. They operate within the multiplicative group of integers modulo a prime $p$, denoted $G = (\\mathbb{Z}/p\\mathbb{Z})^{\\times}$. The group operation is multiplication modulo $p$. A public base element $g \\in G$ is chosen. Party 1 chooses a private integer exponent $a$, and Party 2 chooses a private integer exponent $b$.\n\nParty 1 computes their public value $A$ as:\n$$A \\equiv g^a \\pmod{p}$$\n\nParty 2 computes their public value $B$ as:\n$$B \\equiv g^b \\pmod{p}$$\n\nThey exchange these public values. Party 1 then computes the shared secret, $S_1$, by raising the received public value $B$ to their own private exponent $a$:\n$$S_1 \\equiv B^a \\pmod{p}$$\nSubstituting the definition of $B$, we have:\n$$S_1 \\equiv (g^b)^a \\pmod{p}$$\n\nParty 2 computes the shared secret, $S_2$, by raising the received public value $A$ to their own private exponent $b$:\n$$S_2 \\equiv A^b \\pmod{p}$$\nSubstituting the definition of $A$, we have:\n$$S_2 \\equiv (g^a)^b \\pmod{p}$$\n\nTo show that $S_1$ and $S_2$ are the same, we must demonstrate that $(g^b)^a \\equiv (g^a)^b \\pmod{p}$. This relies on a fundamental property of exponentiation within any group. Let $x$ be an element of a group, and let $m, n \\in \\mathbb{N}$. The expression $x^m$ is defined as the repeated application of the group operation on $x$ for $m$ times.\nThen, $(x^m)^n$ is the element $x^m$ operated on itself $n$ times:\n$$(x^m)^n = \\underbrace{(x^m) \\cdot (x^m) \\cdots (x^m)}_{n \\text{ times}}$$\nExpanding each $x^m$:\n$$(x^m)^n = \\underbrace{(\\underbrace{x \\cdot x \\cdots x}_{m \\text{ times}}) \\cdot (\\underbrace{x \\cdot x \\cdots x}_{m \\text{ times}}) \\cdots (\\underbrace{x \\cdot x \\cdots x}_{m \\text{ times}})}_{n \\text{ blocks}}$$\nBecause the group operation is associative (one of the group axioms), we can remove the parentheses grouping the blocks. The total number of times $x$ is operated on itself is the product of $m$ and $n$, which is $m \\times n$.\nThus, $(x^m)^n = x^{mn}$.\n\nApplying this property to our expressions for $S_1$ and $S_2$:\nFor $S_1$:\n$$S_1 \\equiv (g^b)^a \\equiv g^{ba} \\pmod{p}$$\nFor $S_2$:\n$$S_2 \\equiv (g^a)^b \\equiv g^{ab} \\pmod{p}$$\n\nSince the multiplication of integers is commutative, we have $a \\times b = b \\times a$, or $ab = ba$. Therefore, the exponents are equal, which implies the resulting group elements are equal:\n$$g^{ab} = g^{ba}$$\nFrom this, it follows directly that:\n$$S_1 \\equiv g^{ba} \\equiv g^{ab} \\equiv S_2 \\pmod{p}$$\nBoth parties, by performing their respective computations, arrive at the same element of the group $G$. This common element is their shared secret. The security of this method relies on the computational difficulty of determining a private exponent $a$ given the public values $g$, $p$, and $A=g^a \\pmod{p}$ (this is the discrete logarithm problem).\n\n**Part 2: Concrete Calculation**\n\nThe given parameters are $p=23$, $g=5$, $a=6$, and $b=15$. All computations are performed modulo $23$.\n\nFirst, we compute the public values $A$ and $B$.\n\nComputation of $A$:\n$$A \\equiv g^a \\pmod{p} \\equiv 5^6 \\pmod{23}$$\nWe can compute this by successive squaring or direct evaluation:\n$5^1 \\equiv 5 \\pmod{23}$\n$5^2 = 25 \\equiv 2 \\pmod{23}$\n$5^3 \\equiv 5^2 \\cdot 5 \\equiv 2 \\cdot 5 = 10 \\pmod{23}$\n$5^6 = (5^3)^2 \\equiv 10^2 = 100 \\pmod{23}$\nTo reduce $100$ modulo $23$, we find $100 = 4 \\times 23 + 8$.\nThus, $A \\equiv 8 \\pmod{23}$. The public value for Party 1 is $A=8$.\n\nComputation of $B$:\n$$B \\equiv g^b \\pmod{p} \\equiv 5^{15} \\pmod{23}$$\nWe use exponentiation by squaring for efficiency. The exponent is $15$, which in binary is $1111_2$, so $15 = 8 + 4 + 2 + 1$.\n$5^1 \\equiv 5 \\pmod{23}$\n$5^2 \\equiv (5^1)^2 \\equiv 5^2 = 25 \\equiv 2 \\pmod{23}$\n$5^4 \\equiv (5^2)^2 \\equiv 2^2 = 4 \\pmod{23}$\n$5^8 \\equiv (5^4)^2 \\equiv 4^2 = 16 \\pmod{23}$\nNow, we combine these to find $5^{15}$:\n$B \\equiv 5^{15} = 5^{8+4+2+1} = 5^8 \\cdot 5^4 \\cdot 5^2 \\cdot 5^1 \\pmod{23}$\n$B \\equiv 16 \\cdot 4 \\cdot 2 \\cdot 5 \\pmod{23}$\n$16 \\cdot 4 = 64 \\equiv 2 \\times 23 + 18 \\equiv 18 \\pmod{23}$\nSo, $B \\equiv 18 \\cdot 2 \\cdot 5 \\pmod{23}$\n$18 \\cdot 2 = 36 \\equiv 1 \\times 23 + 13 \\equiv 13 \\pmod{23}$\nSo, $B \\equiv 13 \\cdot 5 \\pmod{23}$\n$13 \\cdot 5 = 65 \\equiv 2 \\times 23 + 19 \\equiv 19 \\pmod{23}$\nThe public value for Party 2 is $B=19$.\n\nFinally, we compute the shared secret from each party's perspective and verify they are equal.\n\nParty 1's computation of the shared secret $S_1$:\n$$S_1 \\equiv B^a \\pmod{p} \\equiv 19^6 \\pmod{23}$$\nWe can use the fact that $19 \\equiv -4 \\pmod{23}$:\n$S_1 \\equiv (-4)^6 = 4^6 \\pmod{23}$\nWe have already computed powers of $4$ to find $5^8$:\n$4^1 \\equiv 4 \\pmod{23}$\n$4^2 \\equiv 16 \\pmod{23}$\n$4^3 \\equiv 4^2 \\cdot 4 \\equiv 16 \\cdot 4 = 64 \\equiv 18 \\pmod{23}$\n$S_1 \\equiv 4^6 = (4^3)^2 \\equiv 18^2 \\pmod{23}$\n$18^2 = 324$. To reduce $324$ modulo $23$: $324 = 14 \\times 23 + 2$.\n$S_1 \\equiv 2 \\pmod{23}$.\n\nParty 2's computation of the shared secret $S_2$:\n$$S_2 \\equiv A^b \\pmod{p} \\equiv 8^{15} \\pmod{23}$$\nAgain, we use exponentiation by squaring for the exponent $15 = 8 + 4 + 2 + 1$.\n$8^1 \\equiv 8 \\pmod{23}$\n$8^2 = 64 \\equiv 18 \\pmod{23}$\n$8^4 \\equiv (8^2)^2 \\equiv 18^2 \\equiv 2 \\pmod{23}$ (from the calculation of $S_1$)\n$8^8 \\equiv (8^4)^2 \\equiv 2^2 = 4 \\pmod{23}$\nNow, we combine these to find $8^{15}$:\n$S_2 \\equiv 8^{15} = 8^{8+4+2+1} = 8^8 \\cdot 8^4 \\cdot 8^2 \\cdot 8^1 \\pmod{23}$\n$S_2 \\equiv 4 \\cdot 2 \\cdot 18 \\cdot 8 \\pmod{23}$\n$4 \\cdot 2 = 8$\n$S_2 \\equiv 8 \\cdot 18 \\cdot 8 \\pmod{23}$\n$8 \\cdot 18 = 144 \\equiv 6 \\times 23 + 6 \\equiv 6 \\pmod{23}$\n$S_2 \\equiv 6 \\cdot 8 \\pmod{23}$\n$6 \\cdot 8 = 48 \\equiv 2 \\times 23 + 2 \\equiv 2 \\pmod{23}$.\n\nThe computations confirm that both parties arrive at the same shared secret: $S_1 = 2$ and $S_2 = 2$. This common value is an integer in the required range from $1$ to $22$.\nThe shared secret is $2$.", "answer": "$$\\boxed{2}$$", "id": "3086462"}, {"introduction": "The security of the Diffie-Hellman protocol hinges on the computational difficulty of the discrete logarithm problem. This practice challenges you to step into the role of an analyst and break the encryption for a small-scale example using the baby-step giant-step algorithm [@problem_id:3090662]. By deriving this square-root time method from first principles, you will gain a deeper appreciation for the balance between an attack's elegance and the computational resources required to execute it.", "problem": "In the context of the Diffie–Hellman key exchange over a finite cyclic group, the security rests on the hardness of the discrete logarithm problem in the multiplicative group of a finite field. Consider the finite cyclic group of units modulo a prime $p$, namely $G = \\mathbb{F}_{p}^{\\times}$, with $|G| = n = p - 1$. A generator $g \\in G$ satisfies that the map $x \\mapsto g^{x}$ hits every element of $G$. The discrete logarithm problem asks, given $g$ and $h \\in G$, to find the exponent $x \\in \\{0,1,\\dots,n-1\\}$ such that $g^{x} \\equiv h \\pmod{p}$.\n\nWork in the prime field with $p = 29$, and take the concrete generator $g = 2 \\in \\mathbb{F}_{29}^{\\times}$ and the target element $h = 21 \\in \\mathbb{F}_{29}^{\\times}$. Starting only from the group axioms and standard facts about cyclic groups, derive a square-root time method by partitioning the unknown exponent $x$ into two bounded parts, and then fully execute this method to determine the unique $x \\in \\{0,1,\\dots,n-1\\}$ such that $2^{x} \\equiv 21 \\pmod{29}$. As part of your derivation, justify the memory and time usage of your method in terms of $n = |G|$.\n\nReport as your final answer only the integer value of $x$ in $\\{0,1,\\dots,n-1\\}$. No rounding is needed and no units are involved.", "solution": "We begin from the structure of the multiplicative group $G = \\mathbb{F}_{p}^{\\times}$, which is cyclic of order $n = p - 1$ for any prime $p$. Here $p = 29$, so $n = 28$. An element $g \\in G$ is a generator if its order is $n$. To verify that $g = 2$ is a generator, it suffices to check that $2^{n/q} \\not\\equiv 1 \\pmod{29}$ for each prime divisor $q$ of $n$. The factorization is $28 = 2^{2} \\cdot 7$, so the prime divisors are $2$ and $7$. We compute\n- $2^{28/2} = 2^{14} \\pmod{29}$. We have $2^{5} \\equiv 32 \\equiv 3 \\pmod{29}$, so $2^{10} \\equiv 3^{2} \\equiv 9 \\pmod{29}$ and $2^{14} \\equiv 2^{10} \\cdot 2^{4} \\equiv 9 \\cdot 16 \\equiv 144 \\equiv 28 \\not\\equiv 1 \\pmod{29}$.\n- $2^{28/7} = 2^{4} \\equiv 16 \\not\\equiv 1 \\pmod{29}$.\nTherefore, $2$ is a generator of $\\mathbb{F}_{29}^{\\times}$.\n\nWe are given $h = 21$ and must solve $2^{x} \\equiv 21 \\pmod{29}$ with $x \\in \\{0,1,\\dots,27\\}$. We derive a square-root time method, commonly known as the baby-step giant-step method, from first principles as follows. Let $m$ be a positive integer to be chosen on the order of $\\sqrt{n}$. Write the unknown exponent as\n$$\nx = i m + j,\n$$\nwhere $0 \\leq i, j < m$. Using the group law and the fact that exponentiation distributes over multiplication of exponents, we have\n$$\n2^{x} \\equiv 2^{i m + j} \\equiv \\left(2^{m}\\right)^{i} \\cdot 2^{j} \\equiv h \\pmod{29}.\n$$\nRearranging by multiplying both sides by $\\left(2^{m}\\right)^{-i}$ yields\n$$\nh \\cdot \\left(2^{-m}\\right)^{i} \\equiv 2^{j} \\pmod{29}.\n$$\nThis identity shows that if we precompute the set of “baby steps” $\\{2^{j} \\bmod 29 : 0 \\leq j < m\\}$ and store them in a table keyed by their values, then we can search for a match among the “giant steps” $h \\cdot \\left(2^{-m}\\right)^{i} \\bmod 29$ as $i$ ranges from $0$ to $m-1$. When a match $h \\cdot \\left(2^{-m}\\right)^{i} \\equiv 2^{j}$ occurs, we recover the solution $x = i m + j$. Choosing $m = \\lceil \\sqrt{n} \\rceil$ balances the search ranges for $i$ and $j$ and yields square-root complexity.\n\nWe now execute this plan concretely. Here $n = 28$, so we take\n$$\nm = \\lceil \\sqrt{28} \\rceil = 6.\n$$\nBaby steps: compute $2^{j} \\bmod 29$ for $j = 0,1,2,3,4,5$:\n- $j = 0$: $2^{0} \\equiv 1$.\n- $j = 1$: $2^{1} \\equiv 2$.\n- $j = 2$: $2^{2} \\equiv 4$.\n- $j = 3$: $2^{3} \\equiv 8$.\n- $j = 4$: $2^{4} \\equiv 16$.\n- $j = 5$: $2^{5} \\equiv 32 \\equiv 3 \\pmod{29}$.\n\nStore the mapping of values to exponents $j$: $1 \\mapsto 0$, $2 \\mapsto 1$, $4 \\mapsto 2$, $8 \\mapsto 3$, $16 \\mapsto 4$, $3 \\mapsto 5$.\n\nCompute the giant-step multiplier $c = 2^{-m} \\bmod 29$. First compute $2^{m} \\bmod 29$:\n$$\n2^{6} \\equiv 64 \\equiv 64 - 58 \\equiv 6 \\pmod{29}.\n$$\nThe inverse of $6$ modulo $29$ is found by the extended Euclidean algorithm. We have $29 = 4 \\cdot 6 + 5$, $6 = 1 \\cdot 5 + 1$, hence $1 = 6 - 1 \\cdot 5 = 6 - (29 - 4 \\cdot 6) = 5 \\cdot 6 - 29$, so the inverse of $6$ modulo $29$ is $5$. Therefore,\n$$\nc = (2^{6})^{-1} \\equiv 6^{-1} \\equiv 5 \\pmod{29}.\n$$\n\nGiant steps: starting with $h = 21$, iterate $h \\cdot c^{i} \\bmod 29$ for $i = 0,1,2,3,4,5$ until we find a match in the baby-step table.\n- $i = 0$: $21 \\cdot c^{0} \\equiv 21$. This is not among $\\{1,2,3,4,8,16\\}$.\n- $i = 1$: $21 \\cdot c \\equiv 21 \\cdot 5 \\equiv 105 \\equiv 105 - 87 \\equiv 18 \\pmod{29}$. Not in the table.\n- $i = 2$: multiply the previous value by $c$: $18 \\cdot 5 \\equiv 90 \\equiv 90 - 87 \\equiv 3 \\pmod{29}$. This matches the baby step value $3$, which corresponds to $j = 5$.\n\nWe have found $i = 2$ and $j = 5$, hence\n$$\nx = i m + j = 2 \\cdot 6 + 5 = 17.\n$$\nVerification: $2^{17} \\equiv -8 \\equiv 21 \\pmod{29}$, since $2^{14} \\equiv -1$ and $2^{17} \\equiv 2^{14} \\cdot 2^{3} \\equiv (-1) \\cdot 8 \\equiv -8 \\equiv 21 \\pmod{29}$.\n\nComplexity analysis: Let $n = |G|$. Choosing $m = \\lceil \\sqrt{n} \\rceil$ yields:\n- Memory: storing the baby-step table of size $m$ consumes $O(m) = O(\\sqrt{n})$ space.\n- Time: computing the $m$ baby steps takes $O(m)$ group operations; computing each of up to $m$ giant steps and looking up in a hash/dictionary takes expected $O(1)$ per step, for overall additional $O(m)$. Thus the total time is $O(m) + O(m) = O(\\sqrt{n})$.\nThis square-root time and memory complexity underlies the classic meet-in-the-middle attack on the discrete logarithm problem and illustrates why sufficiently large $n$ is required for security in Diffie–Hellman key exchange.\n\nTherefore, the required discrete logarithm is $x = 17$.", "answer": "$$\\boxed{17}$$", "id": "3090662"}, {"introduction": "Not all discrete logarithm problems are equally hard; the choice of the prime modulus $p$ is critical to security. In this exercise, you will investigate a case where $p-1$ is a power of 2, a structure that renders the system vulnerable to the efficient Pohlig-Hellman algorithm [@problem_id:1349539]. By using this specialized method to find a secret key, you will see firsthand why careful parameter generation is a cornerstone of modern cryptography.", "problem": "Two cryptography interns, Alice and Bob, are tasked with auditing a legacy secure communication system. The system uses the Diffie-Hellman (DH) key exchange protocol to establish a shared secret key over an insecure channel.\n\nThe DH protocol works as follows:\n1. Alice and Bob publicly agree on a large prime modulus $p$ and a generator $g$ of the multiplicative group of integers modulo $p$.\n2. Alice chooses a secret integer $a$, computes her public key $A = g^a \\pmod{p}$, and sends $A$ to Bob.\n3. Bob chooses a secret integer $b$, computes his public key $B = g^b \\pmod{p}$, and sends $B$ to Alice.\n4. Alice computes the shared secret as $K = B^a \\pmod{p}$.\n5. Bob computes the shared secret as $K = A^b \\pmod{p}$.\n\nAn eavesdropper, Eve, can intercept the public values $p$, $g$, $A$, and $B$, but not the secret integers $a$ or $b$. The security of DH relies on the difficulty of computing $a$ from $g$ and $A$ (the discrete logarithm problem).\n\nThe interns discover that the legacy system was configured with a prime number $p$ for which $p-1$ is a power of 2. This choice is known to make the system cryptographically weak. Eve has intercepted the following public information from one of Alice's sessions:\n- Prime modulus: $p = 257$\n- Generator: $g = 3$\n- Alice's public key: $A = 201$\n\nTo demonstrate the vulnerability of this choice of $p$ to their supervisor, you are asked to play the role of Eve and find Alice's secret integer key $a$. Find the integer value of $a$, given that $1 \\le a < p-1$.", "solution": "We are to solve the discrete logarithm $3^{a} \\equiv 201 \\pmod{257}$ with $1 \\leq a < 256$, exploiting that $p-1=256=2^{8}$ is a power of $2$. In the cyclic multiplicative group modulo $p$ of order $2^{8}$, the Pohlig–Hellman reduction for the $2$-power case allows us to recover the bits of $a$ sequentially.\n\nLet $N=256=2^{8}$ and define $g_{0}=g^{N/2}=g^{128}$. Since $g$ is a primitive root, $g^{(p-1)/2} \\equiv -1 \\pmod{p}$ by Euler’s criterion, so\n$$\ng_{0} \\equiv 3^{128} \\equiv -1 \\equiv 256 \\pmod{257}.\n$$\nWrite $a=\\sum_{j=0}^{7} a_{j} 2^{j}$ with $a_{j} \\in \\{0,1\\}$. Set $h_{0}=A=201$. For $j=0,1,\\dots,7$ we compute\n$$\nt_{j} \\equiv h_{j}^{N/2^{j+1}} \\pmod{257},\n$$\nand use $t_{j} \\in \\{1, g_{0}\\}$ to decode $a_{j}$: $t_{j} \\equiv 1$ gives $a_{j}=0$, and $t_{j} \\equiv g_{0}$ gives $a_{j}=1$. After determining $a_{j}$, update\n$$\nh_{j+1} \\equiv h_{j} \\cdot g^{-a_{j} 2^{j}} \\pmod{257}.\n$$\nWe carry out the computations explicitly.\n\nStep $j=0$:\nCompute $t_{0} \\equiv h_{0}^{128} \\pmod{257}$. By repeated squaring:\n$$\n201^{2} \\equiv 52,\\quad 201^{4} \\equiv 134,\\quad 201^{8} \\equiv 223,\\quad 201^{16} \\equiv 128,\n$$\n$$\n201^{32} \\equiv 193,\\quad 201^{64} \\equiv 241,\\quad 201^{128} \\equiv 241^{2} \\equiv 256 \\pmod{257}.\n$$\nThus $t_{0} \\equiv 256 \\equiv g_{0}$, so $a_{0}=1$. Update $h_{1} \\equiv 201 \\cdot 3^{-1} \\pmod{257}$. Since $3^{-1} \\equiv 86 \\pmod{257}$, we get $h_{1} \\equiv 201 \\cdot 86 \\equiv 67 \\pmod{257}$.\n\nStep $j=1$:\nCompute $t_{1} \\equiv h_{1}^{64} \\pmod{257}$. By squaring:\n$$\n67^{2} \\equiv 120,\\quad 67^{4} \\equiv 8,\\quad 67^{8} \\equiv 64,\\quad 67^{16} \\equiv 241,\n$$\n$$\n67^{32} \\equiv 256,\\quad 67^{64} \\equiv 1 \\pmod{257}.\n$$\nSo $t_{1} \\equiv 1$, hence $a_{1}=0$, and $h_{2} \\equiv h_{1} \\equiv 67$.\n\nStep $j=2$:\nCompute $t_{2} \\equiv h_{2}^{32} \\equiv 67^{32} \\equiv 256 \\pmod{257}$, so $a_{2}=1$. Update $h_{3} \\equiv 67 \\cdot 3^{-4} \\pmod{257}$. Since $3^{4}=81$ and $81^{-1} \\equiv 165 \\pmod{257}$, we have $3^{-4} \\equiv 165$, hence $h_{3} \\equiv 67 \\cdot 165 \\equiv 4 \\pmod{257}$.\n\nStep $j=3$:\nCompute $t_{3} \\equiv h_{3}^{16} \\equiv 4^{16} \\equiv 1 \\pmod{257}$ (since $4^{4} \\equiv 256$ and $4^{8} \\equiv 1$), thus $a_{3}=0$, and $h_{4} \\equiv 4$.\n\nStep $j=4$:\nCompute $t_{4} \\equiv h_{4}^{8} \\equiv 4^{8} \\equiv 1 \\pmod{257}$, so $a_{4}=0$, and $h_{5} \\equiv 4$.\n\nStep $j=5$:\nCompute $t_{5} \\equiv h_{5}^{4} \\equiv 4^{4} \\equiv 256 \\pmod{257}$, so $a_{5}=1$. Update $h_{6} \\equiv 4 \\cdot 3^{-32} \\pmod{257}$. Compute $3^{32}$ by squaring:\n$$\n3^{2} \\equiv 9,\\quad 3^{4} \\equiv 81,\\quad 3^{8} \\equiv 136,\\quad 3^{16} \\equiv 249,\\quad 3^{32} \\equiv 64 \\pmod{257}.\n$$\nThus $3^{-32} \\equiv 64^{-1} \\equiv 253 \\pmod{257}$ (since $64 \\cdot 253 \\equiv 1$), giving $h_{6} \\equiv 4 \\cdot 253 \\equiv 241 \\pmod{257}$.\n\nStep $j=6$:\nCompute $t_{6} \\equiv h_{6}^{2} \\equiv 241^{2} \\equiv 256 \\pmod{257}$, so $a_{6}=1$. Update $h_{7} \\equiv 241 \\cdot 3^{-64} \\pmod{257}$. Using $3^{64} \\equiv (3^{32})^{2} \\equiv 64^{2} \\equiv 241 \\pmod{257}$, its inverse is $241^{-1} \\equiv 16 \\pmod{257}$ (since $241 \\equiv -16$ and $16 \\cdot (-16) \\equiv -256 \\equiv 1$), so $h_{7} \\equiv 241 \\cdot 16 \\equiv 1 \\pmod{257}$.\n\nStep $j=7$:\nCompute $t_{7} \\equiv h_{7}^{1} \\equiv 1 \\pmod{257}$, hence $a_{7}=0$.\n\nCollecting bits, we have\n$$\n(a_{7}a_{6}\\dots a_{1}a_{0})=(0\\,1\\,1\\,0\\,0\\,1\\,0\\,1) \\text{ read from } j=7 \\text{ down to } j=0,\n$$\nequivalently\n$$\na=a_{0}+2 a_{1}+4 a_{2}+8 a_{3}+16 a_{4}+32 a_{5}+64 a_{6}+128 a_{7}=1+0+4+0+0+32+64+0=101.\n$$\nVerification:\n$$\n3^{101} \\equiv 3^{64} \\cdot 3^{32} \\cdot 3^{4} \\cdot 3 \\equiv 241 \\cdot 64 \\cdot 81 \\cdot 3 \\equiv 4 \\cdot 81 \\cdot 3 \\equiv 67 \\cdot 3 \\equiv 201 \\pmod{257},\n$$\nas required. Therefore Alice’s secret exponent is $a=101$.", "answer": "$$\\boxed{101}$$", "id": "1349539"}]}