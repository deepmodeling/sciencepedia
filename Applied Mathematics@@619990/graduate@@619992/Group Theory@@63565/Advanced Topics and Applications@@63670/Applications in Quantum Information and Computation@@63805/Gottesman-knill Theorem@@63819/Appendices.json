{"hands_on_practices": [{"introduction": "We begin with a direct, hands-on calculation to see the Gottesman-Knill theorem in action. By tracking the evolution of a well-known stabilizer state, the Greenberger-Horne-Zeilinger (GHZ) state, as it passes through a sequence of elementary Clifford gates, we can determine the exact probability of a specific measurement outcome. This exercise reinforces the fundamental rules of quantum gate operations and provides a baseline for appreciating the more efficient simulation methods we explore next [@problem_id:686508].", "problem": "A system of three qubits is initially prepared in the standard Greenberger-Horne-Zeilinger (GHZ) state, which is a stabilizer state defined as:\n$$\n|\\psi_{GHZ}\\rangle = \\frac{1}{\\sqrt{2}}(|000\\rangle + |111\\rangle)\n$$\nA quantum circuit $U$ composed of Clifford gates is then applied to the system. The circuit is a sequence of three gates, $U = U_3 U_2 U_1$, acting in order from right to left:\n1.  $U_1 = H_1$: A Hadamard gate is applied to the first qubit.\n2.  $U_2 = S_2$: A Phase gate (S-gate) is applied to the second qubit.\n3.  $U_3 = \\text{CNOT}_{31}$: A Controlled-NOT gate is applied with the third qubit as the control and the first qubit as the target.\n\nThe actions of these gates on the computational basis states are as follows:\n- Hadamard gate on qubit $i$: $H_i|0\\rangle_i = \\frac{1}{\\sqrt{2}}(|0\\rangle_i+|1\\rangle_i)$, $H_i|1\\rangle_i = \\frac{1}{\\sqrt{2}}(|0\\rangle_i-|1\\rangle_i)$.\n- Phase gate on qubit $i$: $S_i|0\\rangle_i = |0\\rangle_i$, $S_i|1\\rangle_i = i|1\\rangle_i$.\n- CNOT gate with control $c$ and target $t$: $\\text{CNOT}_{ct}|x_c x_t\\rangle = |x_c, x_t \\oplus x_c\\rangle$, where $\\oplus$ denotes addition modulo 2. For this problem, the qubits are ordered $|q_1 q_2 q_3\\rangle$.\n\nAccording to the Gottesman-Knill theorem, the evolution of a stabilizer state under a Clifford circuit and the subsequent measurement outcome probabilities can be efficiently simulated on a classical computer.\n\nDerive the exact probability of measuring the system in the computational basis state $|111\\rangle$ after the full circuit $U$ has been applied to the initial GHZ state.", "solution": "We track the state in the computational basis $|q_1q_2q_3\\rangle$.\n\n1. Initial GHZ state:\n$$|\\psi_0\\rangle=\\frac{1}{\\sqrt{2}}\\bigl(|000\\rangle+|111\\rangle\\bigr)$$\n\n2. After $U_1=H_1$ on qubit 1:\n$$|\\psi_1\\rangle=\\frac{1}{\\sqrt{2}}\\bigl(H_1|000\\rangle+H_1|111\\rangle\\bigr)\n=\\frac{1}{2}\\Bigl[(|0\\rangle+|1\\rangle)\\!|00\\rangle+(|0\\rangle-|1\\rangle)\\!|11\\rangle\\Bigr]$$\n$$\\quad=\\frac{1}{2}\\bigl(|000\\rangle+|100\\rangle+|011\\rangle-|111\\rangle\\bigr)$$\n\n3. After $U_2=S_2$ on qubit 2 ($S|0\\rangle=|0\\rangle$, $S|1\\rangle=i|1\\rangle$):\n$$|\\psi_2\\rangle=\\frac{1}{2}\\bigl(|000\\rangle+|100\\rangle+i\\,|011\\rangle-i\\,|111\\rangle\\bigr)$$\n\n4. After $U_3=\\text{CNOT}_{31}$ (control $q_3$, target $q_1$): flip $q_1$ if $q_3=1$,\n$$|a\\,b\\,c\\rangle\\mapsto|a\\oplus c,b,c\\rangle.$$\nThus\n$$|\\psi_\\text{out}\\rangle\n=\\frac{1}{2}\\bigl(|000\\rangle+|100\\rangle+i\\,|111\\rangle-i\\,|011\\rangle\\bigr)$$\n\n5. The amplitude for $|111\\rangle$ is $i/2$, so the measurement probability is\n$$P(111)=\\bigl|\\tfrac{i}{2}\\bigr|^2=\\frac{1}{4}$$.", "answer": "$$\\boxed{\\frac{1}{4}}$$", "id": "686508"}, {"introduction": "While tracking the full state vector works for a few qubits, it quickly becomes intractable for larger systems. The power of the Gottesman-Knill theorem lies in the stabilizer formalism, which shifts the focus from evolving exponential-sized state vectors to evolving a small set of operators. This practice demonstrates the core principle that Clifford gates map Pauli operators to other Pauli operators, a property that allows for efficient classical simulation [@problem_id:686453].", "problem": "In the theory of fault-tolerant quantum computation, the Gottesman-Knill theorem is a cornerstone result. It states that a quantum circuit composed of gates from the Clifford group can be efficiently simulated on a classical computer. The Clifford group gates include the Hadamard gate, the Phase gate, and the CNOT gate. A key insight is that these gates map operators from the Pauli group to other operators within the Pauli group (up to a phase factor). This property allows for a compact description of the evolution of a quantum state under such circuits, known as the stabilizer formalism.\n\nConsider a two-qubit quantum system. The Hilbert space is spanned by the computational basis $\\{|00\\rangle, |01\\rangle, |10\\rangle, |11\\rangle\\}$. The standard Pauli operators are given by:\n$$\nX = \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}, \\quad Y = \\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix}, \\quad Z = \\begin{pmatrix} 1 & 0 \\\\ 0 & -1 \\end{pmatrix}\n$$\nThe identity operator is $I$. An operator $P_k$ denotes the Pauli operator $P \\in \\{X, Y, Z, I\\}$ acting on the $k$-th qubit. For instance, $X_1 = X \\otimes I$ and $Z_2 = I \\otimes Z$.\n\nThe Hadamard gate and the Controlled-NOT (CNOT) gate are given by:\n$$\nH = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & 1 \\\\ 1 & -1 \\end{pmatrix}, \\quad \\text{CNOT} = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\end{pmatrix}\n$$\nIn a two-qubit system, $\\text{CNOT}_{12}$ denotes a CNOT gate with qubit 1 as the control and qubit 2 as the target. The operator $H \\otimes H$ applies a Hadamard gate to each of the two qubits.\n\nConsider the quantum circuit described by the unitary operator $U = \\text{CNOT}_{12}(H \\otimes H)$. An initial Hermitian operator $P$ is transformed by this circuit into $P' = U P U^\\dagger$. Let the initial operator be $P = \\frac{1}{\\sqrt{2}} (Z_1 + X_2)$.\n\nDerive the matrix element $\\langle 01 | P' | 10 \\rangle$ of the transformed operator $P'$.", "solution": "The goal is to compute the matrix element $\\langle 01 | P' | 10 \\rangle$, where $P' = UPU^\\dagger$, with $U = \\text{CNOT}_{12}(H \\otimes H)$ and $P = \\frac{1}{\\sqrt{2}} (Z_1 + X_2)$.\n\nFirst, we express the transformed operator $P'$ using the linearity of the transformation:\n$$\nP' = U P U^\\dagger = U \\left( \\frac{1}{\\sqrt{2}} (Z_1 + X_2) \\right) U^\\dagger = \\frac{1}{\\sqrt{2}} (U Z_1 U^\\dagger + U X_2 U^\\dagger)\n$$\nWe need to find the transformations of the Pauli operators $Z_1$ and $X_2$ under conjugation by $U$. This can be done efficiently using the known transformation rules for Pauli operators under Clifford gates, rather than by direct matrix multiplication of the $4 \\times 4$ matrices.\n\nThe transformation $O \\to U O U^\\dagger$ is a composition of two transformations: first conjugation by $H \\otimes H$, and then by $\\text{CNOT}_{12}$.\nLet's analyze the action of each gate on the Pauli operators.\n\nThe Hadamard gate swaps $X$ and $Z$: $H X H^\\dagger = H X H = Z$ and $H Z H^\\dagger = H Z H = X$.\nThe action of $H \\otimes H$ on a tensor product of Pauli operators is:\n$$\n(H \\otimes H) (P_a \\otimes P_b) (H \\otimes H)^\\dagger = (H P_a H) \\otimes (H P_b H)\n$$\nThe action of $\\text{CNOT}_{12}$ on the generators of the two-qubit Pauli group is:\n- $X_1 \\to X_1 X_2$\n- $Z_1 \\to Z_1$\n- $X_2 \\to X_2$\n- $Z_2 \\to Z_1 Z_2$\n\nNow, we compute the two terms $U Z_1 U^\\dagger$ and $U X_2 U^\\dagger$.\n\n**1. Transformation of $Z_1$:**\n$$\nU Z_1 U^\\dagger = \\text{CNOT}_{12} (H \\otimes H) Z_1 (H \\otimes H)^\\dagger \\text{CNOT}_{12}^\\dagger\n$$\nSince $H$ and CNOT are Hermitian and unitary ($H^\\dagger=H, \\text{CNOT}^\\dagger=\\text{CNOT}$), we can write:\n$$\nU Z_1 U^\\dagger = \\text{CNOT}_{12} \\left[ (H \\otimes H) (Z \\otimes I) (H \\otimes H) \\right] \\text{CNOT}_{12}\n$$\nFirst, let's compute the inner part:\n$$\n(H \\otimes H) (Z \\otimes I) (H \\otimes H) = (HZH) \\otimes (HIH) = X \\otimes I = X_1\n$$\nNow, we apply the $\\text{CNOT}_{12}$ conjugation:\n$$\n\\text{CNOT}_{12} X_1 \\text{CNOT}_{12} = X_1 X_2\n$$\nSo, we have $U Z_1 U^\\dagger = X_1 X_2$.\n\n**2. Transformation of $X_2$:**\n$$\nU X_2 U^\\dagger = \\text{CNOT}_{12} \\left[ (H \\otimes H) (I \\otimes X) (H \\otimes H) \\right] \\text{CNOT}_{12}\n$$\nThe inner part is:\n$$\n(H \\otimes H) (I \\otimes X) (H \\otimes H) = (HIH) \\otimes (HXH) = I \\otimes Z = Z_2\n$$\nNow, we apply the $\\text{CNOT}_{12}$ conjugation:\n$$\n\\text{CNOT}_{12} Z_2 \\text{CNOT}_{12} = Z_1 Z_2\n$$\nSo, we have $U X_2 U^\\dagger = Z_1 Z_2$.\n\n**3. Constructing the final operator $P'$:**\nSubstituting these results back into the expression for $P'$:\n$$\nP' = \\frac{1}{\\sqrt{2}} (X_1 X_2 + Z_1 Z_2)\n$$\n\n**4. Calculating the matrix element:**\nTo find the matrix element $\\langle 01 | P' | 10 \\rangle$, we can write the operators $X_1 X_2$ and $Z_1 Z_2$ in matrix form in the standard computational basis $\\{|00\\rangle, |01\\rangle, |10\\rangle, |11\\rangle\\}$.\n$$\nX_1 X_2 = X \\otimes X = \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix} \\otimes \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix} = \\begin{pmatrix} 0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 1 & 0 & 0 & 0 \\end{pmatrix}\n$$\n$$\nZ_1 Z_2 = Z \\otimes Z = \\begin{pmatrix} 1 & 0 \\\\ 0 & -1 \\end{pmatrix} \\otimes \\begin{pmatrix} 1 & 0 \\\\ 0 & -1 \\end{pmatrix} = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\ 0 & -1 & 0 & 0 \\\\ 0 & 0 & -1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{pmatrix}\n$$\nThe matrix for $P'$ is:\n$$\nP' = \\frac{1}{\\sqrt{2}} (X_1 X_2 + Z_1 Z_2) = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & 0 & 0 & 1 \\\\ 0 & -1 & 1 & 0 \\\\ 0 & 1 & -1 & 0 \\\\ 1 & 0 & 0 & 1 \\end{pmatrix}\n$$\nThe matrix element $\\langle 01 | P' | 10 \\rangle$ corresponds to the entry in the second row and third column of the matrix $P'$. Let's denote the basis vectors as $e_1 = |00\\rangle, e_2 = |01\\rangle, e_3 = |10\\rangle, e_4 = |11\\rangle$. Then we are looking for the element $P'_{23}$.\n$$\n\\langle 01 | P' | 10 \\rangle = P'_{23} = \\frac{1}{\\sqrt{2}} (1) = \\frac{1}{\\sqrt{2}}\n$$\nAlternatively, we can compute the action of the operators on the state $|10\\rangle$:\n$$\nP'|10\\rangle = \\frac{1}{\\sqrt{2}} (X_1 X_2 + Z_1 Z_2) |10\\rangle = \\frac{1}{\\sqrt{2}} ( (X \\otimes X) |1\\rangle \\otimes |0\\rangle + (Z \\otimes Z) |1\\rangle \\otimes |0\\rangle )\n$$\n$$\n(X \\otimes X) |10\\rangle = (X|1\\rangle) \\otimes (X|0\\rangle) = |0\\rangle \\otimes |1\\rangle = |01\\rangle\n$$\n$$\n(Z \\otimes Z) |10\\rangle = (Z|1\\rangle) \\otimes (Z|0\\rangle) = (-|1\\rangle) \\otimes ( |0\\rangle) = -|10\\rangle\n$$\nSo,\n$$\nP'|10\\rangle = \\frac{1}{\\sqrt{2}} (|01\\rangle - |10\\rangle)\n$$\nFinally, we take the inner product with $\\langle 01|$:\n$$\n\\langle 01 | P' | 10 \\rangle = \\langle 01 | \\left( \\frac{1}{\\sqrt{2}} (|01\\rangle - |10\\rangle) \\right) = \\frac{1}{\\sqrt{2}} (\\langle 01 | 01 \\rangle - \\langle 01 | 10 \\rangle) = \\frac{1}{\\sqrt{2}} (1 - 0) = \\frac{1}{\\sqrt{2}}\n$$", "answer": "$$\n\\boxed{\\frac{1}{\\sqrt{2}}}\n$$", "id": "686453"}, {"introduction": "The ultimate key to efficient classical simulation is mapping the action of Clifford gates onto linear algebra over the finite field $\\mathbb{F}_2$. This exercise explores this powerful connection through the symplectic representation of a Clifford operator, which is simply a classical binary matrix. You will discover how a classical algorithm like Gaussian elimination can deconstruct this matrix to determine the number of fundamental gates, such as CNOTs, needed to build the circuit, making the link between abstract algebra and physical implementation concrete [@problem_id:686409].", "problem": "An $n$-qubit Clifford operator $U$ can be completely characterized by its action on the Pauli group generators $\\{X_i, Z_i\\}_{i=1}^n$. This action is described by a $2n \\times 2n$ binary symplectic matrix $S \\in \\text{Sp}(2n, \\mathbb{F}_2)$, often called a stabilizer tableau. The matrix $S$ must satisfy the condition $S^T \\Omega S = \\Omega \\pmod 2$, where $\\Omega = \\begin{pmatrix} 0_n & I_n \\\\ I_n & 0_n \\end{pmatrix}$.\n\nThe tableau is defined such that its rows encode the images of the initial generators:\n$$\nU X_i U^\\dagger = (-1)^{s_i} \\prod_{j=1}^n X_j^{S_{i,j}} Z_j^{S_{i,n+j}}\n$$\n$$\nU Z_i U^\\dagger = (-1)^{t_i} \\prod_{j=1}^n X_j^{S_{n+i,j}} Z_j^{S_{n+i,n+j}}\n$$\nwhere phase factors are ignored for this problem. We can partition the tableau $S$ into four $n \\times n$ blocks:\n$$\nS = \\begin{pmatrix} A & B \\\\ C & D \\end{pmatrix}\n$$\nAny Clifford operator can be synthesized using a circuit of Hadamard (H), Phase (S), and Controlled-NOT (CNOT) gates. The synthesis of a Clifford operator $U$ given by $S$ can be achieved by finding a sequence of gates whose application reduces $S$ to the identity matrix.\n\nA CNOT gate with control qubit $c$ and target qubit $t$ (denoted $\\text{CNOT}_{c,t}$) applied to an existing circuit modifies the circuit's overall tableau by the row operations:\n1. Row $c \\to$ Row $c$ + Row $t$\n2. Row $n+t \\to$ Row $n+t$ + Row $n+c$\n(All additions are modulo 2).\n\nFor this problem, we are only concerned with the transformation of the $A$ block. The effect of applying a $\\text{CNOT}_{c,t}$ gate as part of the synthesis procedure (i.e., to reduce $A$ towards identity) is equivalent to the elementary row operation $R_c \\to R_c + R_t$ on the matrix $A$.\n\nConsider the following 3-qubit Clifford operator given by its symplectic tableau $S$:\n$$\nS = \\begin{pmatrix}\n1 & 0 & 1 & 0 & 0 & 0 \\\\\n1 & 1 & 1 & 0 & 0 & 0 \\\\\n0 & 1 & 1 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 1 & 1 \\\\\n1 & 0 & 0 & 1 & 1 & 1 \\\\\n1 & 0 & 0 & 1 & 0 & 1\n\\end{pmatrix}\n$$\nYour task is to calculate the number of CNOT gates required to transform the top-left $3 \\times 3$ submatrix $A$ into the identity matrix $I_3$ by using the standard Gaussian elimination algorithm outlined below.\n\n**Algorithm:**\n1.  **Forward Elimination:** Transform $A$ into an upper triangular matrix. For each column $c$ from $1$ to $n-1$, and for each row $r$ from $c+1$ to $n$, if the element $A_{rc}$ is 1, apply the operation $R_r \\to R_r + R_c$. This corresponds to one CNOT gate.\n2.  **Backward Substitution:** Transform the resulting upper triangular matrix into the identity matrix. For each column $c$ from $n$ down to $2$, and for each row $r$ from $1$ to $c-1$, if the element $A_{rc}$ is 1, apply the operation $R_r \\to R_r + R_c$. This also corresponds to one CNOT gate.\n\nWhat is the total number of CNOT gates required?", "solution": "Let \n$$\nA=\\begin{pmatrix}\n1&0&1\\\\\n1&1&1\\\\\n0&1&1\n\\end{pmatrix}.\n$$\n\nAlgorithm:\n1. Forward elimination (columns $c=1\\ldots2$):\n  c=1: for r=2,3\n    - $A_{2,1}=1$: apply $R_2\\to R_2+R_1$ (1 CNOT). \n      $$R_2=(1,1,1)+(1,0,1)=(0,1,0).$$\n    - $A_{3,1}=0$: no op.\n    Now \n    $$\n    A=\\begin{pmatrix}\n    1&0&1\\\\\n    0&1&0\\\\\n    0&1&1\n    \\end{pmatrix}.\n    $$\n  c=2: for r=3 \n    - $A_{3,2}=1$: apply $R_3\\to R_3+R_2$ (1 CNOT).\n      $$R_3=(0,1,1)+(0,1,0)=(0,0,1).$$\n    Now\n    $$\n    A=\\begin{pmatrix}\n    1&0&1\\\\\n    0&1&0\\\\\n    0&0&1\n    \\end{pmatrix}.\n    $$\nTotal forward CNOTs: $1+1=2$.\n\n2. Backward substitution (columns $c=3\\ldots2$ downward):\n  c=3: for r=1,2\n    - $A_{1,3}=1$: apply $R_1\\to R_1+R_3$ (1 CNOT).\n      $$R_1=(1,0,1)+(0,0,1)=(1,0,0).$$\n    - $A_{2,3}=0$: no op.\n    Now\n    $$\n    A=\\begin{pmatrix}\n    1&0&0\\\\\n    0&1&0\\\\\n    0&0&1\n    \\end{pmatrix}.\n    $$\n  c=2: for r=1 \n    - $A_{1,2}=0$: no op.\nTotal backward CNOTs: $1$.\n\nHence total CNOT gates = $2+1=3$.", "answer": "$$\\boxed{3}$$", "id": "686409"}]}