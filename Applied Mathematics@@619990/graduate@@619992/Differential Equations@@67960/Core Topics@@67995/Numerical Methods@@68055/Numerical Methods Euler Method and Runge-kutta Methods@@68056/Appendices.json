{"hands_on_practices": [{"introduction": "The forward Euler method is prized for its simplicity, but this simplicity comes at a cost, particularly regarding numerical stability. This exercise uses the well-known logistic model for population growth to provide a hands-on exploration of this crucial concept. By determining the critical step size that leads to a non-physical result, you will gain a tangible understanding of how the stability of a numerical solution depends on both the step size $h$ and the parameters of the differential equation itself [@problem_id:1126852]. This is a fundamental skill in applying numerical methods effectively.", "problem": "The logistic equation is a common model for population growth, given by the ordinary differential equation:\n$$\ny'(t) = r y(t) \\left(1 - \\frac{y(t)}{K}\\right)\n$$\nHere, $y(t)$ is the population at time $t$, $r$ is the intrinsic growth rate, and $K$ is the carrying capacity of the environment. Both $r$ and $K$ are positive real constants.\n\nConsider an initial condition $y(0) = y_0$ where the initial population is greater than the carrying capacity, i.e., $y_0 > K$. The exact solution in this case shows that the population will decrease over time, asymptotically approaching the carrying capacity $K$ from above.\n\nWhen solving this differential equation numerically using the forward Euler method, the choice of the time step $h$ is crucial for obtaining a physically meaningful solution. The forward Euler update rule is given by $y_{n+1} = y_n + h f(t_n, y_n)$. If $h$ is too large, the numerical solution can become negative, which is not possible for a population.\n\nDetermine the critical step size, $h_c$, for which the first step of the forward Euler method, starting from $y_0$, produces a value of exactly zero ($y_1 = 0$). This value $h_c$ marks the threshold for stability in the first step; any step size $h > h_c$ will result in a non-physical negative population $y_1 < 0$. Your final answer should be an expression in terms of $r$, $K$, and $y_0$.", "solution": "We apply the forward Euler update to the logistic equation,\n$$\ny_{n+1}=y_n+h\\,r\\,y_n\\Bigl(1-\\frac{y_n}{K}\\Bigr).\n$$\nFor the first step $n=0$, this gives\n$$\ny_1=y_0+h\\,r\\,y_0\\Bigl(1-\\frac{y_0}{K}\\Bigr).\n$$\nWe require $y_1=0$, hence\n$$\n0=y_0+h\\,r\\,y_0\\Bigl(1-\\frac{y_0}{K}\\Bigr).\n$$\nDividing by $y_0\\neq0$,\n$$\n0=1+h\\,r\\Bigl(1-\\frac{y_0}{K}\\Bigr)\n\\;\\;\\Longrightarrow\\;\\;\nh\\,r\\Bigl(1-\\frac{y_0}{K}\\Bigr)=-1.\n$$\nSolving for $h$,\n$$\nh=\\frac{-1}{r\\bigl(1-\\frac{y_0}{K}\\bigr)}\n=\\frac{1}{r\\bigl(\\frac{y_0}{K}-1\\bigr)}\n=\\frac{K}{r\\,(y_0-K)}.\n$$", "answer": "$$\\boxed{\\frac{K}{r\\,(y_0-K)}}$$", "id": "1126852"}, {"introduction": "While the Euler method is first-order, the family of Runge-Kutta methods offers higher-order accuracy. However, not all methods of the same order are identical. This practice invites you to look under the hood of two popular second-order methods: Heun's method and the explicit midpoint method. By applying both to a general linear ODE and directly comparing their algebraic forms, you will uncover a surprising and insightful relationship between them, deepening your understanding of how different formulations can achieve the same order of accuracy [@problem_id:1126960].", "problem": "Consider the initial value problem for a linear ordinary differential equation:\n$$\ny'(t) = a y(t) + b\n$$\nwith the initial condition $y(t_0) = y_0$, where $a$ and $b$ are real constants.\nWe wish to approximate the solution at $t_1 = t_0 + h$ using two different second-order Runge-Kutta methods with a step size $h$.\n\nThe first method is **Heun's method** (also known as the improved Euler method or the trapezoidal rule), defined by the iteration for a general function $f(t,y)$:\n$$\n\\begin{aligned}\nk_1 &= f(t_n, y_n) \\\\\nk_2 &= f(t_n + h, y_n + h k_1) \\\\\ny_{n+1} &= y_n + \\frac{h}{2}(k_1 + k_2)\n\\end{aligned}\n$$\n\nThe second method is the **explicit midpoint method**, defined by the iteration:\n$$\n\\begin{aligned}\nk_1^* &= f(t_n, y_n) \\\\\nk_2^* &= f(t_n + \\frac{h}{2}, y_n + \\frac{h}{2} k_1^*) \\\\\ny_{n+1} &= y_n + h k_2^*\n\\end{aligned}\n$$\n\nLet $y_1^{\\text{Heun}}$ be the approximation of $y(t_1)$ after one step starting from $(t_0, y_0)$ using Heun's method, and let $y_1^{\\text{midpoint}}$ be the approximation of $y(t_1)$ after one step using the explicit midpoint method.\n\nDerive an expression for the difference $D = y_1^{\\text{Heun}} - y_1^{\\text{midpoint}}$ in terms of the parameters $a, b, y_0,$ and $h$.", "solution": "We have the ODE \n$$y'=f(t,y)=a\\,y+b,\\quad y(t_0)=y_0.$$\n\n1. Heun’s method:\n$$k_1=f(t_0,y_0)=a y_0+b,$$\n$$k_2=f\\bigl(t_0+h,\\;y_0+h\\,k_1\\bigr)\n   =a\\bigl(y_0+h(a y_0+b)\\bigr)+b\n   =a y_0+a^2y_0h+a b h+b.$$\nHence\n$$y_1^{\\rm Heun}\n=y_0+\\frac{h}{2}(k_1+k_2)\n=y_0+\\frac{h}{2}\\Bigl(2(a y_0+b)+a^2y_0h+a b h\\Bigr)$$\n$$\\quad\n=y_0+h(a y_0+b)+\\frac{a^2y_0h^2}{2}+\\frac{a b h^2}{2}.$$\n\n2. Explicit midpoint:\n$$k_1^*=a y_0+b,$$\n$$k_2^*=f\\Bigl(t_0+\\frac{h}{2},\\;y_0+\\frac{h}{2}k_1^*\\Bigr)\n=a\\Bigl(y_0+\\frac{h}{2}(a y_0+b)\\Bigr)+b\n=a y_0+\\frac{a^2y_0h}{2}+\\frac{a b h}{2}+b.$$\nThus\n$$y_1^{\\rm midpoint}\n=y_0+h k_2^*\n=y_0+h\\Bigl(a y_0+b+\\tfrac{a^2y_0h}{2}+\\tfrac{a b h}{2}\\Bigr)$$\n$$\\quad\n=y_0+h(a y_0+b)+\\frac{a^2y_0h^2}{2}+\\frac{a b h^2}{2}.$$\n\nSince both formulas coincide, their difference is\n$$D=y_1^{\\rm Heun}-y_1^{\\rm midpoint}=0.$$", "answer": "$$\\boxed{0}$$", "id": "1126960"}, {"introduction": "In many scientific applications, we encounter \"stiff\" differential equations, where standard explicit methods like those discussed previously can be inefficient or unstable. This advanced exercise introduces a method for analyzing a solver's performance on such problems using the Prothero-Robinson test equation. Instead of just computing a solution, you will analyze the local truncation error of Heun's method to see how it behaves in the presence of stiffness [@problem_id:1126958]. This practice is key to understanding why specialized methods are often required for stiff systems and how to assess a method's fitness for these challenging problems.", "problem": "The Prothero-Robinson problem is a standard test equation used to analyze the behavior of numerical methods for stiff ordinary differential equations (ODEs). It is given by\n$$\ny'(t) = \\lambda (y(t) - g(t)) + g'(t), \\quad y(0) = g(0)\n$$\nwhere $g(t)$ is a smooth, slowly varying function, and $\\lambda$ is a complex number with a large negative real part, i.e., $\\text{Re}(\\lambda) \\ll 0$. The exact solution to this ODE is simply $y(t) = g(t)$. A key feature of a good numerical method for stiff problems is that its error should not be significantly affected by the large magnitude of $\\lambda$.\n\nConsider the application of the explicit second-order Runge-Kutta method known as the improved Euler method or Heun's method to this problem. The method is defined by the following steps:\n$$\n\\begin{align*}\nk_1 &= f(t_n, y_n) \\\\\nk_2 &= f(t_n + h, y_n + h k_1) \\\\\ny_{n+1} &= y_n + \\frac{h}{2} (k_1 + k_2)\n\\end{align*}\n$$\nwhere $h$ is the step size and $f(t,y) = \\lambda(y(t)-g(t)) + g'(t)$.\n\nTo analyze the method's accuracy, we examine the local truncation error (LTE) after a single step. Assume the computation starts on the exact solution, so $y_n = g(t_n)$. The LTE is defined as $LTE = y_{n+1} - y(t_{n+1}) = y_{n+1} - g(t_{n+1})$. For a small step size $h$, the LTE can be expanded as a power series in $h$. The dominant terms of this expansion for the Prothero-Robinson problem can be written in the form:\n$$\nLTE = C_1 \\lambda g''(t_n) h^3 + C_2 g'''(t_n) h^3 + O(h^4)\n$$\nwhere $g''(t_n)$ and $g'''(t_n)$ are the second and third derivatives of $g(t)$ evaluated at $t_n$. The coefficient $C_1$ quantifies the error contribution from the stiff part of the equation.\n\nYour task is to derive the value of the coefficient $C_1$.", "solution": "We have the Prothero–Robinson ODE  \n$$y'(t)=\\lambda\\bigl(y(t)-g(t)\\bigr)+g'(t),\\quad y(0)=g(0),$$  \nwith exact solution $y(t)=g(t)$.  Applying Heun’s method with step size $h$ and assuming $y_n=g(t_n)$, we set  \n$$k_1=f(t_n,y_n)=\\lambda\\bigl(g(t_n)-g(t_n)\\bigr)+g'(t_n)=g'(t_n)\\,, $$  \n$$k_2=f\\bigl(t_n+h,\\;g(t_n)+h\\,k_1\\bigr) \n=\\lambda\\Bigl(g(t_n)+h\\,g'(t_n)-g(t_n+h)\\Bigr)+g'(t_n+h)\\,. $$  \nExpand $g$ in Taylor series about $t_n$:\n$$g(t_n+h)=g+hg'+\\tfrac{h^2}{2}g''+\\tfrac{h^3}{6}g'''+O(h^4),$$  \n$$g'(t_n+h)=g'+hg''+\\tfrac{h^2}{2}g'''+\\tfrac{h^3}{6}g''''+O(h^4).$$  \nThus\n$$g(t_n)+h\\,g'(t_n)-g(t_n+h)\n=-\\frac{h^2}{2}g''-\\frac{h^3}{6}g'''+O(h^4),$$  \nso\n$$k_2\n=g'+h\\,g''+\\frac{h^2}{2}g'''-\\frac{\\lambda h^2}{2}g''\n+\\frac{h^3}{6}g''''-\\frac{\\lambda h^3}{6}g'''+O(h^4).$$  \nHeun’s update gives\n$$y_{n+1}=g+\\frac{h}{2}(k_1+k_2)\n=g+h\\,g'+\\frac{h^2}{2}g''+\\frac{h^3}{4}g'''-\\frac{\\lambda h^3}{4}g''+O(h^4).$$  \nSubtracting the exact solution at $t_{n+1}$,\n$$g(t_n+h)=g+h\\,g'+\\tfrac{h^2}{2}g''+\\tfrac{h^3}{6}g'''+O(h^4),$$  \nyields the local truncation error\n$$LTE=y_{n+1}-g(t_n+h)\n=-\\frac{\\lambda h^3}{4}g''+\\frac{h^3}{12}g'''+O(h^4).$$  \nHence the coefficient of $\\lambda g''\\,h^3$ is \n$$C_1=-\\frac14.$$", "answer": "$$\\boxed{-\\frac{1}{4}}$$", "id": "1126958"}]}