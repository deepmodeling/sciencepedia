{"hands_on_practices": [{"introduction": "Before diving into complex simulations, it is crucial to understand the theoretical landscape. This exercise explores why standard tools for analyzing dynamical systems, such as Bendixson's criterion, are insufficient for the Van der Pol oscillator. By examining the divergence of the system's vector field, you will learn why this powerful theorem cannot be used to rule out the existence of the very feature we are interested in—a limit cycle—thus motivating the need for the numerical and analytical techniques that follow [@problem_id:1689776].", "problem": "Consider the van der Pol oscillator, a non-conservative oscillator with non-linear damping. Its dynamics can be described by the following system of first-order ordinary differential equations:\n$$\n\\frac{dx}{dt} = y\n$$\n$$\n\\frac{dy}{dt} = -x + \\mu(1-x^2)y\n$$\nwhere $\\mu$ is a positive constant representing the strength of the non-linear damping.\n\nBendixson's criterion is a result in the theory of dynamical systems that can be used to rule out the existence of closed orbits (limit cycles) within certain regions of the phase plane. The criterion is based on the properties of the vector field associated with the system.\n\nBased on an analysis of this system, which of the following statements correctly explains the applicability of Bendixson's criterion to the van der Pol oscillator for all $x, y \\in \\mathbb{R}$?\n\nA. The divergence of the system's vector field is always positive for $\\mu > 0$, so Bendixson's criterion proves that no limit cycles exist.\n\nB. The divergence of the system's vector field is always negative for $\\mu > 0$, so Bendixson's criterion proves that no limit cycles exist.\n\nC. The divergence of the system's vector field is identically zero, meaning Bendixson's criterion is inconclusive.\n\nD. The divergence of the system's vector field changes sign depending on the value of $x$. Therefore, Bendixson's criterion cannot be used to rule out the existence of a limit cycle in the entire phase plane.\n\nE. The divergence of the system's vector field changes sign depending on the value of $y$. Therefore, Bendixson's criterion cannot be used to rule out the existence of a limit cycle in the entire phase plane.", "solution": "The system is given by $\\dot{x}=y$ and $\\dot{y}=-x+\\mu(1-x^{2})y$. Denote the vector field by $F(x,y)=(f_{1}(x,y),f_{2}(x,y))$ with $f_{1}(x,y)=y$ and $f_{2}(x,y)=-x+\\mu(1-x^{2})y$.\n\nBendixson’s criterion states: if on a simply connected region $R$ the divergence $\\partial f_{1}/\\partial x+\\partial f_{2}/\\partial y$ is of one sign and not identically zero, then there is no nonconstant periodic orbit lying entirely in $R$.\n\nCompute the divergence:\n$$\n\\frac{\\partial f_{1}}{\\partial x}+\\frac{\\partial f_{2}}{\\partial y}\n=\\frac{\\partial}{\\partial x}(y)+\\frac{\\partial}{\\partial y}\\big(-x+\\mu(1-x^{2})y\\big)\n=0+\\mu(1-x^{2})\n=\\mu(1-x^{2}).\n$$\nFor $\\mu>0$, the sign of $\\mu(1-x^{2})$ depends on $x$: it is positive for $|x|1$, zero for $|x|=1$, and negative for $|x|1$. Therefore, over the entire plane the divergence changes sign (and vanishes on the curves $x=\\pm 1$), so the hypothesis of Bendixson’s criterion is not satisfied on the whole plane. Consequently, Bendixson’s criterion cannot be used to rule out the existence of a limit cycle in the entire phase plane.\n\nThis corresponds to the statement that the divergence changes sign depending on $x$, not $y$, so the correct choice is D.", "answer": "$$\\boxed{D}$$", "id": "1689776"}, {"introduction": "Theory can only take us so far; to truly grasp the behavior of the Van der Pol oscillator, we must see it in action. This hands-on programming exercise guides you through implementing the fourth-order Runge-Kutta method to simulate the system's dynamics from scratch [@problem_id:2395985]. By running simulations with different initial conditions, you will computationally verify one of the oscillator's most celebrated properties: its convergence to a unique, stable limit cycle, providing concrete evidence of its self-sustaining nature.", "problem": "You are to write a complete, runnable program that uses the classical fourth-order Runge–Kutta method to study the van der Pol oscillator. The van der Pol oscillator is the second-order ordinary differential equation (ODE) $$\\frac{d^2 x}{dt^2} - \\mu \\left(1 - x^2\\right)\\frac{dx}{dt} + x = 0,$$ which you must convert to a first-order system by defining $y = \\frac{dx}{dt}$, so that $$\\frac{dx}{dt} = y,\\quad \\frac{dy}{dt} = \\mu \\left(1 - x^2\\right) y - x.$$ All variables are dimensionless.\n\nYour task is to implement the classical fourth-order Runge–Kutta time-stepping method with a fixed step size to advance the state $(x,y)$ in time, for the right-hand side defined above. Do not use any adaptive time-stepping.\n- For each simulation, define a total time $T$ and discard an initial transient of duration $T_{\\mathrm{trans}}$ from the analysis. Over the remaining data, compute an amplitude estimate $$A = \\frac{1}{2}\\left(\\max x - \\min x\\right),$$ where the extrema are taken over the time interval $[T - T_{\\mathrm{trans}}, T]$.\n- For a given $\\mu$, simulate two trajectories with distinct initial conditions, one “inside” and one “outside” the eventual limit cycle, and compute the two amplitudes $A_{\\mathrm{in}}$ and $A_{\\mathrm{out}}$. Then compute a boolean convergence indicator defined by $$\\left|A_{\\mathrm{in}} - A_{\\mathrm{out}}\\right|  \\varepsilon,$$ with a prescribed tolerance $\\varepsilon$.\n\nFundamental basis you may assume: the definition of an ordinary differential equation, the notion of an initial value problem, and Newtonian kinematics linking $\\frac{dx}{dt}$, $\\frac{dy}{dt}$, and state evolution. You must not use any prebuilt ODE solvers.\n\nUse the following test suite of parameter values, time grids, and tolerances:\n- Test $1$ (nonstiff, visible convergence to a unique limit cycle): $\\mu = 1$, $T = 120$, $T_{\\mathrm{trans}} = 60$, $h = 0.01$, initial conditions $(x_0,y_0) = (0.1,0.1)$ and $(x_0,y_0) = (3.0,0.0)$, tolerance $\\varepsilon = 2\\times 10^{-2}$.\n- Test $2$ (more nonlinear, relaxation oscillations; small fixed step to control error): $\\mu = 5$, $T = 200$, $T_{\\mathrm{trans}} = 100$, $h = 0.002$, initial conditions $(x_0,y_0) = (0.1,0.1)$ and $(x_0,y_0) = (3.0,0.0)$, tolerance $\\varepsilon = 5\\times 10^{-2}$.\n- Test $3$ (boundary case with no nonlinearity and no attracting limit cycle): $\\mu = 0$, $T = 60$, $T_{\\mathrm{trans}} = 30$, $h = 0.01$, initial conditions $(x_0,y_0) = (0.1,0.1)$ and $(x_0,y_0) = (3.0,0.0)$, tolerance $\\varepsilon = 5\\times 10^{-2}$.\n\nFor each test, compute the pair of amplitudes $A_{\\mathrm{in}}$ and $A_{\\mathrm{out}}$, and also compute the boolean convergence indicator defined above. Your program must aggregate all results into a single line of output containing the $9$ values in the following order:\n$$[A_{1,\\mathrm{in}}, A_{1,\\mathrm{out}}, C_1, A_{2,\\mathrm{in}}, A_{2,\\mathrm{out}}, C_2, A_{3,\\mathrm{in}}, A_{3,\\mathrm{out}}, C_3],$$\nwhere $C_k$ is the boolean convergence indicator for test $k$.\n\nFinal output format requirement: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, $\\left[\\dots\\right]$. No extra text should be printed.\n\nAngle units are not applicable. There are no physical units since the system is nondimensional. All numeric values must be represented as floating-point numbers or booleans as appropriate in the final output. The program must be self-contained and must not read any input. Ensure that your implementation adheres strictly to the classical fourth-order Runge–Kutta method and the specified time-stepping parameters, without using any external ODE solvers.", "solution": "The solution involves implementing the classical fourth-order Runge-Kutta (RK4) method to numerically integrate the van der Pol system of ODEs. The second-order equation is first converted into a system of two first-order equations by defining the state vector $\\mathbf{z}(t) = [x(t), y(t)]^T$, where $y = dx/dt$. The system is then given by:\n$$ \\frac{d\\mathbf{z}}{dt} = \\mathbf{f}(\\mathbf{z}, \\mu) = \\begin{pmatrix} y \\\\ \\mu(1-x^2)y - x \\end{pmatrix} $$\nThe RK4 method advances the solution from time $t_n$ to $t_{n+1} = t_n + h$ using the following formula:\n$$ \\mathbf{z}_{n+1} = \\mathbf{z}_n + \\frac{h}{6}(\\mathbf{k}_1 + 2\\mathbf{k}_2 + 2\\mathbf{k}_3 + \\mathbf{k}_4) $$\nwhere the slopes are calculated as:\n$$ \\mathbf{k}_1 = \\mathbf{f}(\\mathbf{z}_n, \\mu) $$\n$$ \\mathbf{k}_2 = \\mathbf{f}(\\mathbf{z}_n + \\frac{h}{2}\\mathbf{k}_1, \\mu) $$\n$$ \\mathbf{k}_3 = \\mathbf{f}(\\mathbf{z}_n + \\frac{h}{2}\\mathbf{k}_2, \\mu) $$\n$$ \\mathbf{k}_4 = \\mathbf{f}(\\mathbf{z}_n + h\\mathbf{k}_3, \\mu) $$\nThis process is repeated for the total number of steps required to reach the final time $T$. For each test case, two simulations are run with the specified \"inside\" and \"outside\" initial conditions.\n\nAfter each simulation, the trajectory data for $x(t)$ from the time interval $[T_{\\mathrm{trans}}, T]$ is analyzed to find the maximum and minimum values of $x$. The amplitude $A$ is then computed using the formula $A = \\frac{1}{2}(\\max x - \\min x)$.\n\nFinally, the amplitudes from the \"inside\" ($A_{\\mathrm{in}}$) and \"outside\" ($A_{\\mathrm{out}}$) simulations are compared. The boolean convergence indicator $C$ is set to `True` if $|A_{\\mathrm{in}} - A_{\\mathrm{out}}|  \\varepsilon$, and `False` otherwise. For $\\mu > 0$, the system is expected to converge to a unique limit cycle, resulting in $C$ being `True`. For $\\mu=0$, the system is a simple harmonic oscillator whose amplitude depends on initial conditions, so $C$ is expected to be `False`. The code implements these steps for each test case and aggregates the results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the van der Pol oscillator problem for a set of test cases.\n    Implements the classical RK4 method and analyzes trajectory convergence.\n    \"\"\"\n\n    def f(z, mu):\n        \"\"\"\n        Calculates the derivative vector for the van der Pol system.\n        z: state vector [x, y]\n        mu: nonlinearity parameter\n        \"\"\"\n        x, y = z\n        dxdt = y\n        dydt = mu * (1.0 - x**2) * y - x\n        return np.array([dxdt, dydt])\n\n    def rk4_step(z, h, mu):\n        \"\"\"\n        Performs a single step of the classical 4th-order Runge-Kutta method.\n        z: current state vector [x, y]\n        h: time step\n        mu: nonlinearity parameter\n        \"\"\"\n        k1 = f(z, mu)\n        k2 = f(z + 0.5 * h * k1, mu)\n        k3 = f(z + 0.5 * h * k2, mu)\n        k4 = f(z + h * k3, mu)\n        return z + (h / 6.0) * (k1 + 2.0 * k2 + 2.0 * k3 + k4)\n\n    def run_simulation(mu, ic, T, h):\n        \"\"\"\n        Runs a full simulation for the van der Pol oscillator.\n        mu: nonlinearity parameter\n        ic: initial condition (x0, y0)\n        T: total simulation time\n        h: time step\n        Returns: array of x-positions over time.\n        \"\"\"\n        n_steps = int(T / h)\n        x_history = np.zeros(n_steps + 1)\n        \n        z = np.array(ic, dtype=float)\n        x_history[0] = z[0]\n        \n        for i in range(n_steps):\n            z = rk4_step(z, h, mu)\n            x_history[i+1] = z[0]\n            \n        return x_history\n\n    def calculate_amplitude(x_history, T_trans, h):\n        \"\"\"\n        Calculates the asymptotic amplitude from the trajectory.\n        x_history: array of x-positions\n        T_trans: duration of transient to discard\n        h: time step\n        \"\"\"\n        # The analysis is over the interval [T_trans, T].\n        # The start index corresponds to time t = T_trans.\n        analysis_start_index = int(T_trans / h)\n        \n        # Slice the history to get the analysis window\n        analysis_window = x_history[analysis_start_index:]\n        \n        max_x = np.max(analysis_window)\n        min_x = np.min(analysis_window)\n        \n        return 0.5 * (max_x - min_x)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (mu, T, T_trans, h, ic_in, ic_out, epsilon)\n        (1.0, 120.0, 60.0, 0.01, (0.1, 0.1), (3.0, 0.0), 2e-2),\n        (5.0, 200.0, 100.0, 0.002, (0.1, 0.1), (3.0, 0.0), 5e-2),\n        (0.0, 60.0, 30.0, 0.01, (0.1, 0.1), (3.0, 0.0), 5e-2)\n    ]\n\n    all_results = []\n    \n    for mu, T, T_trans, h, ic_in, ic_out, epsilon in test_cases:\n        # Run simulation for the \"inside\" trajectory\n        x_history_in = run_simulation(mu, ic_in, T, h)\n        A_in = calculate_amplitude(x_history_in, T_trans, h)\n        \n        # Run simulation for the \"outside\" trajectory\n        x_history_out = run_simulation(mu, ic_out, T, h)\n        A_out = calculate_amplitude(x_history_out, T_trans, h)\n        \n        # Calculate the boolean convergence indicator\n        C = abs(A_in - A_out)  epsilon\n        \n        all_results.extend([A_in, A_out, C])\n\n    # Final print statement in the exact required format.\n    # map(str, ...) converts floats and booleans to their string representations.\n    print(f\"[{','.join(map(str, all_results))}]\")\n\nsolve()\n```", "id": "2395985"}, {"introduction": "A powerful application of scientific models lies in their ability to connect theory with observation. In this practice, you will act as an analyst examining the output of a system in the highly nonlinear regime ($\\mu \\gg 1$), where the system exhibits characteristic 'relaxation oscillations'. Using an analytical approximation for the trajectory, you will learn to work backward from a measured quantity—the oscillation period—to estimate the underlying physical parameter $\\mu$ that governs the system's behavior [@problem_id:1943841].", "problem": "The dynamics of a self-sustained oscillation can be modeled by the van der Pol oscillator equation, given by:\n$$ \\frac{d^{2}x}{dt^{2}} - \\mu(1-x^{2})\\frac{dx}{dt} + x = 0 $$\nwhere $x(t)$ is the displacement as a function of time $t$, and $\\mu$ is a positive dimensionless parameter that controls the nonlinearity and damping.\n\nA numerical simulation of this system is performed for an unknown, large value of $\\mu$. The system is observed to settle into a stable limit cycle, also known as a relaxation oscillation. In the phase plane, defined by coordinates $(x, v)$ where $v = dx/dt$, this cycle consists of segments of slow evolution punctuated by extremely rapid jumps.\n\nIt is found that the total period of one full oscillation is $T = 403.4$.\n\nFurther analysis of the simulation data reveals that during the slow segments, which account for almost the entire duration of the period, the trajectory in the phase plane adheres closely to the curve described by the equation:\n$$ v = \\frac{x}{\\mu(1-x^{2})} $$\nOne of these slow segments corresponds to the trajectory moving from an extremum at $x=2$ to a point of instability at $x=1$. A second, symmetric slow segment sees the trajectory move from $x=-2$ to $x=-1$. You may assume the time taken for the rapid jumps connecting these slow segments is negligible.\n\nUsing this information, estimate the value of the parameter $\\mu$ used in the simulation. Round your final answer to three significant figures.", "solution": "The problem asks us to estimate the parameter $\\mu$ of the van der Pol oscillator given the total period of oscillation and a description of the trajectory in the phase plane for large $\\mu$.\n\nThe key information is that the period $T$ is dominated by two \"slow\" segments, and during these segments, the velocity $v = dx/dt$ is well-approximated by $v = \\frac{x}{\\mu(1-x^2)}$. The time spent during the rapid jumps is considered negligible.\n\nLet's calculate the time taken for one of the slow segments. The relationship between time $t$ and position $x$ is given by $v = dx/dt$. We can express an infinitesimal time interval $dt$ as:\n$$ dt = \\frac{dx}{v(x)} $$\nSubstituting the given expression for $v(x)$ during the slow segment:\n$$ dt = \\frac{dx}{\\frac{x}{\\mu(1-x^2)}} = \\frac{\\mu(1-x^2)}{x} dx $$\nThe problem states that one slow segment corresponds to the motion from $x_i = 2$ to $x_f = 1$. The time for this segment, which we'll call $T_{slow,1}$, can be found by integrating $dt$ between these limits:\n$$ T_{slow,1} = \\int_{x_i}^{x_f} \\frac{\\mu(1-x^2)}{x} dx = \\int_{2}^{1} \\mu \\left(\\frac{1}{x} - x\\right) dx $$\nWe can take the constant $\\mu$ out of the integral:\n$$ T_{slow,1} = \\mu \\int_{2}^{1} \\left(\\frac{1}{x} - x\\right) dx $$\nNow, we evaluate the definite integral:\n$$ T_{slow,1} = \\mu \\left[ \\ln|x| - \\frac{x^2}{2} \\right]_{2}^{1} $$\nPlugging in the limits of integration:\n$$ T_{slow,1} = \\mu \\left( \\left(\\ln(1) - \\frac{1^2}{2}\\right) - \\left(\\ln(2) - \\frac{2^2}{2}\\right) \\right) $$\n$$ T_{slow,1} = \\mu \\left( \\left(0 - \\frac{1}{2}\\right) - \\left(\\ln(2) - 2\\right) \\right) $$\n$$ T_{slow,1} = \\mu \\left( -\\frac{1}{2} - \\ln(2) + 2 \\right) = \\mu \\left(\\frac{3}{2} - \\ln(2)\\right) $$\nThe problem states that the full limit cycle consists of two such symmetric slow segments. The second segment runs from $x=-2$ to $x=-1$. Due to the symmetry of the integrand function $f(x) = \\frac{1}{x}-x$ (since $f(-x) = -f(x)$) and the symmetric limits, the time for the second segment $T_{slow,2}$ is equal to $T_{slow,1}$.\n$$ T_{slow,2} = \\int_{-2}^{-1} \\mu \\left(\\frac{1}{x} - x\\right) dx = \\mu \\left[ \\ln|x| - \\frac{x^2}{2} \\right]_{-2}^{-1} = \\mu \\left( (\\ln(1)-\\frac{1}{2}) - (\\ln(2)-\\frac{4}{2}) \\right) = \\mu \\left(\\frac{3}{2} - \\ln(2)\\right) $$\nThe total period $T$ is the sum of the durations of these two slow segments, as the time for the fast jumps is negligible.\n$$ T \\approx T_{slow,1} + T_{slow,2} = 2 \\times \\mu \\left(\\frac{3}{2} - \\ln(2)\\right) = \\mu (3 - 2\\ln(2)) $$\nWe are given that the measured period is $T = 403.4$. We can now solve for $\\mu$:\n$$ 403.4 = \\mu (3 - 2\\ln(2)) $$\n$$ \\mu = \\frac{403.4}{3 - 2\\ln(2)} $$\nNow we compute the numerical value. Using the value $\\ln(2) \\approx 0.693147$:\n$$ 3 - 2\\ln(2) \\approx 3 - 2(0.693147) = 3 - 1.386294 = 1.613706 $$\n$$ \\mu = \\frac{403.4}{1.613706} \\approx 249.989... $$\nThe problem asks to round the final answer to three significant figures.\n$$ \\mu \\approx 250. $$\nTo express this unambiguously with three significant figures, we write it in scientific notation.\n$$ \\mu \\approx 2.50 \\times 10^2 $$", "answer": "$$\\boxed{2.50 \\times 10^{2}}$$", "id": "1943841"}]}