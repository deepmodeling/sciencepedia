{"hands_on_practices": [{"introduction": "Mastering Boolean algebra begins with understanding its fundamental laws, which act as the rules of the game for simplifying digital logic. This first practice focuses on applying these core axioms—such as the distributive, complement, and absorption laws—to methodically reduce a complex expression to its simplest form. This skill is directly analogous to simplifying traditional algebraic equations and is the foundation for creating efficient and cost-effective digital circuits. [@problem_id:1353546]", "problem": "An engineer is designing the control logic for an automated hydroponics farm. The system monitors three conditions using binary sensors:\n-   `W`: Water level is adequate (1 if true, 0 if false).\n-   `N`: Nutrient concentration is adequate (1 if true, 0 if false).\n-   `L`: Light exposure is adequate (1 if true, 0 if false).\n\nA central \"All Systems Green\" indicator light is activated based on a complex logical expression, $F(W, N, L)$, which evaluates to 1 if the light should be on. The initial logic specification, derived from combining requirements from different subsystems, is given by:\n\n$$F(W, N, L) = (W \\land L) \\lor (W \\land \\neg L) \\lor (W \\land N \\land L)$$\n\nTo reduce the number of logic gates in the final circuit and improve reliability, the engineer needs to find the most simplified, but logically equivalent, expression for $F(W, N, L)$. Using the fundamental laws of Boolean algebra, determine the simplest form of the given expression from the choices below.\n\nA. $W \\lor L$\n\nB. $W \\lor (N \\land L)$\n\nC. $W \\land N$\n\nD. $W$\n\nE. $L$", "solution": "We start with the given Boolean expression:\n$$F(W,N,L) = (W \\land L) \\lor (W \\land \\neg L) \\lor (W \\land N \\land L).$$\nApply the distributive law $A \\land B \\lor A \\land C = A \\land (B \\lor C)$ to the first two terms with $A=W$, $B=L$, and $C=\\neg L$:\n$$(W \\land L) \\lor (W \\land \\neg L) = W \\land (L \\lor \\neg L).$$\nSubstitute this into $F$:\n$$F = \\big(W \\land (L \\lor \\neg L)\\big) \\lor (W \\land N \\land L).$$\nUse the complement law $L \\lor \\neg L = 1$:\n$$F = (W \\land 1) \\lor (W \\land N \\land L).$$\nUse the identity law $X \\land 1 = X$:\n$$F = W \\lor (W \\land N \\land L).$$\nUse the absorption law $X \\lor (X \\land Y) = X$ with $X=W$ and $Y=N \\land L$:\n$$F = W.$$\nThus the simplest equivalent expression is $W$, which corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1353546"}, {"introduction": "De Morgan's theorems are a vital tool in a circuit designer's toolkit, offering an elegant way to find the complement of any Boolean expression. This is crucial for tasks like converting between Sum-of-Products (SOP) and Product-of-Sums (POS) forms or inverting logic. In this exercise, you will apply De Morgan's laws in a practical scenario to derive a 'system-safe' signal by negating an alarm function, a common task in designing reliable systems. [@problem_id:1926516]", "problem": "In the design of a safety monitoring system for an industrial process, an alarm function `F` is defined based on the status of three sensors: A, B, and C. The alarm is triggered (i.e., `F=1`) if either of two conditions is met:\n1. Sensor A is active (`A=1`) and Sensor B is inactive (`B=0`).\n2. Sensor A is inactive (`A=0`) and Sensor C is active (`C=1`).\n\nA 'system-safe' indicator light, represented by the logic function `S`, must be illuminated only when the alarm `F` is NOT triggered. Your task is to derive the Boolean expression for this 'system-safe' function `S`. Using the theorems of Boolean algebra, simplify this expression to its minimal Product-of-Sums (POS) form. A POS expression is one where several OR terms (sums) are ANDed (multiplied) together, such as `(X+Y)(Y'+Z)`.", "solution": "First, we translate the problem description into a Boolean expression for the alarm function `F`.\nThe first condition, \"Sensor A is active (`A=1`) and Sensor B is inactive (`B=0`)\", corresponds to the Boolean product term $A B'$.\nThe second condition, \"Sensor A is inactive (`A=0`) and Sensor C is active (`C=1`)\", corresponds to the product term $A' C$.\nSince the alarm is triggered if either condition is met, the function `F` is the logical OR (sum) of these two terms:\n$$F = A B' + A' C$$\nThe problem asks for the expression for the 'system-safe' indicator `S`, which is active when the alarm `F` is not triggered. This means `S` is the complement of `F`.\n$$S = F' = (A B' + A' C)'$$\nNow, we simplify this expression into its minimal Product-of-Sums (POS) form using Boolean algebra.\n\nStep 1: Apply De Morgan's Theorem to the overall expression.\nDe Morgan's theorem for a sum of terms states that $(X + Y)' = X' \\cdot Y'$. Applying this to our expression for `S`, where $X = AB'$ and $Y = A'C$:\n$$S = (A B')' \\cdot (A' C)'$$\n\nStep 2: Apply De Morgan's Theorem to each individual term.\nDe Morgan's theorem for a product of terms states that $(X \\cdot Y)' = X' + Y'$. We apply this to both factors in our expression for `S`.\n\nFor the first factor, $(A B')'$:\n$$(A B')' = A' + (B')'$$\nThe double complement $(B')'$ simplifies to $B$. So,\n$$(A B')' = A' + B$$\n\nFor the second factor, $(A' C)'$:\n$$(A' C)' = (A')' + C'$$\nThe double complement $(A')'$ simplifies to $A$. So,\n$$(A' C)' = A + C'$$\n\nStep 3: Combine the simplified terms to get the final POS expression.\nSubstituting the results from Step 2 back into the expression for `S` from Step 1:\n$$S = (A' + B)(A + C')$$\n\nThis final expression represents the logic for the 'system-safe' indicator `S`. It is in Product-of-Sums (POS) form, as it is a product of two sum terms, $(A' + B)$ and $(A + C')$. This is the minimal POS form, as it is derived by complementing a minimal Sum-of-Products (SOP) expression ($F=AB'+A'C$ is a minimal SOP, and the direct complement of a minimal SOP yields a minimal POS). No further algebraic simplification is possible.", "answer": "$$\\boxed{(A' + B)(A + C')}$$", "id": "1926516"}, {"introduction": "While algebraic simplification is effective, it can sometimes be unsystematic. The Karnaugh map (K-map) provides a powerful graphical method for simplifying Boolean functions, ensuring you find the minimal expression. This practice will guide you through using a K-map to simplify a function into its Product-of-Sums (POS) form by grouping zeros (representing maxterms), which is a standard industry technique for optimizing logic for certain types of hardware. [@problem_id:1353555]", "problem": "A digital logic circuit is specified by a three-variable Boolean function $F(A,B,C)$. The output of this function is $F=1$ when the 3-bit binary input $(A,B,C)$, interpreted as a binary number, represents the decimal integers 0, 1, 4, 6, or 7. For all other input combinations, the output is $F=0$. To optimize the circuit for a particular type of programmable logic device, the function must be implemented in its minimal product-of-sums (POS) form. Determine this minimal POS expression for $F(A,B,C)$.", "solution": "The problem asks for the minimal product-of-sums (POS) expression for a Boolean function $F(A,B,C)$. The function is defined by its minterms, which are the input combinations for which the function's output is 1.\n\nThe given minterms are $m(0, 1, 4, 6, 7)$. This means:\n$F(A,B,C) = \\sum m(0, 1, 4, 6, 7)$\n\nA product-of-sums expression is formed by ANDing (multiplying) several sum terms. To find the minimal POS expression, it is most efficient to work with the maxterms of the function. Maxterms are the input combinations for which the function's output is 0.\n\nFor a 3-variable function, the total set of minterms (or maxterms) is indexed from 0 to $2^3 - 1 = 7$. The maxterms for $F$ are the integers from 0 to 7 that are not in the minterm list.\nMaxterms of F = $\\{0, 1, 2, 3, 4, 5, 6, 7\\} - \\{0, 1, 4, 6, 7\\} = \\{2, 3, 5\\}$.\nSo, we can write the function in its canonical POS form:\n$F(A,B,C) = \\prod M(2, 3, 5)$.\n\nTo simplify this expression, we use a Karnaugh map (K-map). We will place 0s in the K-map for each maxterm. The binary representations for the maxterms are:\n- Maxterm 2: binary 010 ($A=0, B=1, C=0$)\n- Maxterm 3: binary 011 ($A=0, B=1, C=1$)\n- Maxterm 5: binary 101 ($A=1, B=0, C=1$)\n\nLet's construct the 3-variable K-map and place the 0s:\n\n```\n        BC\n      00  01  11  10\n    A 0 | 1 | 1 | 0 | 0 |\n      1 | 1 | 0 | 1 | 1 |\n```\nIn the map above, the positions are:\n- Row $A=0$, Column $BC=11$ corresponds to maxterm 3 (011).\n- Row $A=0$, Column $BC=10$ corresponds to maxterm 2 (010).\n- Row $A=1$, Column $BC=01$ corresponds to maxterm 5 (101).\n\nNow, we group adjacent 0s. The groups must be rectangular and contain a number of cells that is a power of two (1, 2, 4, etc.). We aim to create the largest possible groups to cover all the 0s.\n\n1.  **Group 1**: We can group the two adjacent 0s in the first row. This group covers maxterms 2 and 3.\n2.  **Group 2**: The remaining 0 at maxterm 5 cannot be combined with any other 0, so it forms a group by itself.\n\nNext, we derive the sum term for each group. For a POS expression derived from grouping 0s:\n- If a variable has a constant value of 0 within the group, it appears as itself in the sum term.\n- If a variable has a constant value of 1 within the group, it appears as its complement in the sum term.\n- If a variable changes value within the group, it is eliminated from the term.\n\n**Derivation for Group 1 (maxterms 2 and 3):**\n- In this group, variable $A$ is constant at 0. So, the term includes $A$.\n- Variable $B$ is constant at 1. So, the term includes $B'$.\n- Variable $C$ changes from 0 to 1, so it is eliminated.\n- The sum term for this group is $(A + B')$.\n\n**Derivation for Group 2 (maxterm 5):**\n- In this group, variable $A$ is 1. So, the term includes $A'$.\n- Variable $B$ is 0. So, the term includes $B$.\n- Variable $C$ is 1. So, the term includes $C'$.\n- The sum term for this group is $(A' + B + C')$.\n\nThe final minimal POS expression is the product (AND) of the sum terms derived from all the groups.\n$F(A,B,C) = (A + B')(A' + B + C')$", "answer": "$$\\boxed{(A + B')(A' + B + C')}$$", "id": "1353555"}]}