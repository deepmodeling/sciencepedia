{"hands_on_practices": [{"introduction": "This first practice introduces a cornerstone of practical circuit design: the use of \"don't-care\" conditions. We will design a simple \"month-checker\" circuit, where certain binary inputs are invalid and can be strategically used to simplify our logic further than would otherwise be possible [@problem_id:1383969]. Mastering this technique is essential for creating efficient and cost-effective digital systems by exploiting specified operational constraints.", "problem": "A digital logic circuit is being designed to act as a \"month-checker.\" The circuit takes a 4-bit binary input, represented by the variables $W$, $X$, $Y$, and $Z$, where $W$ is the most significant bit. This 4-bit number, $WXYZ$, corresponds to a month of the year, with `0001` representing January, `0010` representing February, and so on, up to `1100` for December.\n\nThe circuit's single output, $F$, should be HIGH (logic 1) if the month corresponding to the input has exactly 31 days. For all other valid months, the output should be LOW (logic 0). The months with 31 days are January, March, May, July, August, October, and December.\n\nBinary input values that do not correspond to a valid month (i.e., values less than 1 or greater than 12) are considered \"don't-care\" conditions. You may use these don't-care conditions to simplify the circuit's logic.\n\nDetermine the minimal Sum-of-Products (SOP) expression for the output function $F(W, X, Y, Z)$. Use standard Boolean notation where a prime (e.g., $W'$) denotes negation.", "solution": "Let the 4-bit input be $WXYZ$ with $W$ the most significant bit. The months that should produce $F=1$ are January, March, May, July, August, October, and December, corresponding to minterms\n$$\nm_{1},\\, m_{3},\\, m_{5},\\, m_{7},\\, m_{8},\\, m_{10},\\, m_{12}.\n$$\nInputs not representing valid months are don't cares:\n$$\nd: m_{0},\\, m_{13},\\, m_{14},\\, m_{15}.\n$$\nThus the function specification is\n$$\nF=\\Sigma m(1,3,5,7,8,10,12),\\quad d=\\Sigma m(0,13,14,15).\n$$\nConstruct a $4$-variable Karnaugh map with rows indexed by $WX\\in\\{00,01,11,10\\}$ and columns by $YZ\\in\\{00,01,11,10\\}$. Place $1$ in cells for the listed minterms and $X$ in cells for the don't cares.\n\nForm the largest implicants using the don't cares to minimize the Sum-of-Products:\n- A $2\\times 2$ block covering rows $WX=10,11$ and columns $YZ=00,10$ corresponds to $W=1$ and $Z=0$ (since $X$ and $Y$ vary), yielding the product term $WZ'$.\n- A $2\\times 2$ block covering rows $WX=00,01$ and columns $YZ=01,11$ corresponds to $W=0$ and $Z=1$, yielding the product term $W'Z$.\n\nCombining these implicants gives the minimal SOP:\n$$\nF(W,X,Y,Z)=WZ'+W'Z.\n$$\nThis expression covers all required minterms and uses the don't cares to eliminate $X$ and $Y$, and it is minimal in SOP form.", "answer": "$$\\boxed{WZ'+W'Z}$$", "id": "1383969"}, {"introduction": "While minimal Sum-of-Products or Product-of-Sums forms are fundamental, they do not always yield the most efficient circuit in terms of gate or input count. This exercise challenges you to look beyond two-level logic and use algebraic factorization to create a multi-level circuit [@problem_id:1383979]. By minimizing the total gate input count, you will learn a practical optimization strategy that directly impacts circuit cost and performance.", "problem": "An engineer is designing a digital circuit to implement the Boolean function $F(A,B,C,D)$ given by the sum-of-products expression $F(A,B,C,D) = AC + A D' + BC + B D'$. The available components are AND gates, OR gates, and NOT gates of any required number of inputs. For the purpose of optimizing the design for cost and efficiency, the primary metric is the total number of gate inputs. A gate input is a single connection to an input terminal of a gate. For example, a 3-input AND gate contributes 3 to the total gate input count. Assume that the primary inputs $A, B, C, D$ and their complements $A', B', C', D'$ are all available at no cost (i.e., you do not need to count the inputs to the NOT gates that generate the complements). What is the minimum possible total gate input count for a multi-level circuit that implements the function $F$?", "solution": "We start from the given sum-of-products expression\n$$\nF(A,B,C,D)=AC+AD'+BC+BD'.\n$$\nUse Boolean distributivity $XY+XZ=X(Y+Z)$ to factor by $A$ and $B$ in pairs:\n$$\nAC+BC=(A+B)C,\\qquad AD'+BD'=(A+B)D'.\n$$\nTherefore,\n$$\nF=(A+B)C+(A+B)D'.\n$$\nApply distributivity again with $X=(A+B)$ to obtain the factored product-of-sums form:\n$$\nF=(A+B)\\big(C+D'\\big).\n$$\nThis form directly yields a multi-level realization using two OR gates and one AND gate:\n- Compute $S_{1}=A+B$ with a 2-input OR gate (cost: $2$ gate inputs).\n- Compute $S_{2}=C+D'$ with a 2-input OR gate (cost: $2$ gate inputs). The complemented input $D'$ is available at no cost as per the problem statement.\n- Compute $F=S_{1}S_{2}$ with a 2-input AND gate (cost: $2$ gate inputs).\n\nThe total gate input count for this implementation is\n$$\n2+2+2=6.\n$$\nTo see this is minimal, note that $F$ requires both an OR over $\\{A,B\\}$ and an OR over $\\{C,D'\\}$ combined by an AND, so at least three gates are necessary (a single gate cannot produce an AND of ORs, and two gates cannot realize the required AND-of-ORs or OR-of-ANDs structure). With AND/OR gates, each useful gate has at least two inputs, so any realization with at least three gates has a total gate input count of at least $2+2+2=6$. Since the above realization achieves this bound, it is optimal.", "answer": "$$\\boxed{6}$$", "id": "1383979"}, {"introduction": "Modern digital systems are often built from standard cells, like multiplexers. This advanced problem requires you to synthesize a function using only 2-to-1 multiplexers, a common building block in technologies like Field-Programmable Gate Arrays (FPGAs) [@problem_id:1383927]. This task demonstrates how Shannon's expansion theorem provides a powerful and systematic method for mapping any Boolean function onto a network of such universal logic elements.", "problem": "A 4-variable Boolean function $F(A, B, C, D)$ is defined by the sum of its minterms as:\n$$ F(A, B, C, D) = \\sum m(0, 1, 4, 6, 9, 11, 13, 15) $$\nYour task is to synthesize this function using a network composed exclusively of 2-to-1 Multiplexer (MUX) cells. A 2-to-1 MUX cell has two data inputs $I_0$ and $I_1$, one select input $S$, and one output $Y$. Its function is given by the Boolean expression $Y = S' \\cdot I_0 + S \\cdot I_1$, where $S'$ denotes the complement of $S$. The primary input variables $A, B, C, D$ and the constant logic levels '0' (false) and '1' (true) are available to be connected to any data or select input.\n\nDetermine the minimum number of 2-to-1 MUX cells required to implement the function $F(A, B, C, D)$.", "solution": "We start from the given function\n$$F(A,B,C,D)=\\sum m(0,1,4,6,9,11,13,15).$$\nUse Shannon decomposition with respect to $A$:\n$$F = A' F_{A=0}(B,C,D) + A F_{A=1}(B,C,D).$$\nCompute the cofactors.\n\n1) For $A=1$, the minterms from the set in the range $8$ to $15$ are $\\{9,11,13,15\\}$, which are exactly those with $D=1$ (independent of $B,C$). Hence\n$$F_{A=1}(B,C,D)=D.$$\n\n2) For $A=0$, the minterms from the set in the range $0$ to $7$ are $\\{0,1,4,6\\}$. Writing these explicitly and factoring:\n$$F_{A=0} = B' C' D' + B' C' D + B C' D' + B C D'$$\n$$= B' C'(D'+D) + B D'(C'+C) = B' C' + B D'.$$\n\nTherefore the global decomposition is\n$$F = A'(B' C' + B D') + A D.$$\n\nNow synthesize using only 2-to-1 MUX cells with $Y = S' \\cdot I_{0} + S \\cdot I_{1}$, with available primary inputs $A,B,C,D$ and constants $0,1$.\n\n- Top level: Use one MUX with select $S=A$, so that\n  $$Y = A' \\cdot I_{0} + A \\cdot I_{1},$$\n  where choose $I_{0} = B' C' + B D'$ and $I_{1} = D$. This uses $1$ MUX, and $I_{1}$ is a direct connection to $D$.\n\n- Implement $I_{0} = H(B,C,D) = B' C' + B D'$ by Shannon decomposition on $B$:\n  $$H = B' \\cdot C' + B \\cdot D'.$$\n  This is exactly a 2-to-1 MUX with select $S=B$, data $I_{0}=C'$, $I_{1}=D'$. This uses $1$ MUX, provided we have $C'$ and $D'$ available.\n\n- Generate $C'$ and $D'$ using 2-to-1 MUX cells configured as inverters:\n  $$C' = C' \\cdot 1 + C \\cdot 0 \\quad \\text{via MUX with } S=C,\\; I_{0}=1,\\; I_{1}=0,$$\n  $$D' = D' \\cdot 1 + D \\cdot 0 \\quad \\text{via MUX with } S=D,\\; I_{0}=1,\\; I_{1}=0.$$\n  Each of these uses $1$ MUX.\n\nCounting cells:\n- $1$ MUX for the top-level decomposition on $A$,\n- $1$ MUX for combining $C'$ and $D'$ with select $B$,\n- $1$ MUX to generate $C'$,\n- $1$ MUX to generate $D'$.\n\nTotal MUX cells used: $4$.\n\nMinimality argument: The subfunction $H(B,C,D)=B' C' + B D'$ must be implemented somewhere because $F_{A=1}=D$ while $F_{A=0}=H$. For $H$, no matter which select variable is chosen for a single 2-to-1 MUX decomposition, its data functions necessarily require two complemented literals:\n- If $S=B$, then $I_{0}=C'$ and $I_{1}=D'$.\n- If $S=C$, then $I_{0}=B'+D'$ and $I_{1}=B D'$.\n- If $S=D$, then $I_{0}=B+C'$ and $I_{1}=B' C'$.\nIn all cases two distinct complemented primary inputs appear. Since only $A,B,C,D,0,1$ are directly available, each complemented literal requires at least one 2-to-1 MUX used as an inverter. Thus $H$ needs at least $2$ MUX for these inversions plus at least $1$ MUX to select between its two data functions, totaling at least $3$ MUX for $H$. Because $F$ also requires combining $F_{A=0}$ and $F_{A=1}$ with respect to $A$ (they are not identical, as $F_{A=1}=D$ and $F_{A=0}=H$), an additional top-level MUX is necessary. Hence any realization needs at least $3+1=4$ MUX. The constructed network achieves this bound, so the minimum number is $4$.", "answer": "$$\\boxed{4}$$", "id": "1383927"}]}