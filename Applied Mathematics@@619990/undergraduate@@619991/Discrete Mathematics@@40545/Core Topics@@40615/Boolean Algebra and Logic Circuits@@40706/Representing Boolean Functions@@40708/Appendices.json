{"hands_on_practices": [{"introduction": "A core skill in digital logic design is translating the requirements of a real-world problem into a precise mathematical expression. This exercise provides a practical scenario of a weighted voting system, challenging you to model its logic as a Boolean function. By determining the conditions for a proposal's approval, you will practice identifying the function's minterms and then simplifying them into a minimal Sum-of-Products ($SOP$) form, a foundational step in creating an efficient digital circuit [@problem_id:1396779].", "problem": "A committee of three members—Alex, Ben, and Casey—votes on proposals. Let the Boolean variables $x, y, \\text{and } z$ represent the votes of Alex, Ben, and Casey, respectively, where a value of 1 signifies a 'Yes' vote and 0 signifies a 'No' vote.\n\nDue to seniority, Alex's 'Yes' vote is given a weight of 2, while the 'Yes' votes from Ben and Casey each have a weight of 1. A 'No' vote from any member contributes a weight of 0. A proposal is approved if the sum of the weights of the 'Yes' votes is at least 3.\n\nDetermine the simplified sum-of-products (SOP) expression for the Boolean function $F(x, y, z)$ that outputs 1 if a proposal is approved and 0 otherwise. In your final expression, the variables within each product term must be in alphabetical order (e.g., $xyz$).", "solution": "Let $x,y,z \\in \\{0,1\\}$ represent the votes of Alex, Ben, and Casey, respectively. The weighted sum of the votes is $2x + y + z$, and the proposal is approved when $2x + y + z \\geq 3$. Therefore,\n$$\nF(x,y,z)=1 \\iff 2x + y + z \\geq 3.\n$$\nIf $x=0$, then $2x + y + z = y + z \\leq 2 < 3$, so no approval is possible; hence $x=1$ is necessary. With $x=1$, the condition becomes\n$$\n2 + y + z \\geq 3 \\iff y + z \\geq 1,\n$$\nwhich means at least one of $y$ or $z$ must be $1$. The approving input combinations are thus $(x,y,z)=(1,1,0),(1,0,1),(1,1,1)$. The canonical SOP is\n$$\nF = x y \\overline{z} + x \\overline{y} z + x y z.\n$$\nSimplify using Boolean algebra:\n$$\nx y \\overline{z} + x y z = x y(\\overline{z} + z) = x y,\n$$\nso\n$$\nF = x y + x \\overline{y} z = x\\big(y + \\overline{y} z\\big).\n$$\nUse the identity $y + \\overline{y} z = (y + \\overline{y})(y + z) = y + z$ to obtain\n$$\nF = x(y + z) = x y + x z.\n$$\nEach product term is in alphabetical order, giving the simplified SOP.", "answer": "$$\\boxed{xy+xz}$$", "id": "1396779"}, {"introduction": "In many practical systems, certain input combinations are impossible or irrelevant to the function's output, creating what are known as \"don't-care\" conditions. This exercise demonstrates how to leverage these don't-cares as a powerful tool for logic simplification. By strategically using these conditions, you can often find a more minimal Sum-of-Products ($SOP$) expression, which translates directly to a more efficient and cost-effective circuit design [@problem_id:1396752].", "problem": "A Boolean function $F(w, x, y, z)$ is defined over four variables. The function evaluates to 1 for the set of minterms identified by the decimal indices $\\sum m(0, 2, 8, 10)$. For the set of input combinations corresponding to decimal indices $d(5, 13)$, the function's output is considered a \"don't-care\" condition. For all other input combinations, the function evaluates to 0.\n\nDetermine the minimal Sum-of-Products (SOP) expression for the function $F$. In your answer, use juxtaposition for the AND operation, the `+` symbol for the OR operation, and the prime symbol to denote the complement of a variable (e.g., the complement of $w$ is $w'$).", "solution": "We are given a four-variable Boolean function with minterms at decimal indices 0, 2, 8, 10, and don't-cares at 5, 13. Using the standard variable order $(w,x,y,z)$ where $w$ is the most significant bit and $z$ is the least significant bit, the minterms correspond to:\n- $m(0) = w'x'y'z'$,\n- $m(2) = w'x'yz'$,\n- $m(8) = wx'y'z'$,\n- $m(10) = wx'yz'$.\n\nThus, the canonical SOP form is\n$$\nF = w'x'y'z' + w'x'yz' + wx'y'z' + wx'yz'.\n$$\nFactor by grouping using Boolean algebra. First group the terms with $w'$ and with $w$:\n$$\nF = w'x'z'(y' + y) + wx'z'(y' + y).\n$$\nUse the complementarity law $y' + y = 1$ to simplify:\n$$\nF = w'x'z' + wx'z'.\n$$\nNow factor out $x'z'$:\n$$\nF = x'z'(w' + w).\n$$\nAgain use the complementarity law $w' + w = 1$:\n$$\nF = x'z'.\n$$\nThis single implicant $x'z'$ exactly covers the four specified minterms $(0,2,8,10)$ and includes no other minterms. The don't-care conditions at $d(5,13)$ are not needed for this simplification and do not enable any further reduction, since any one-literal implicant would cover minterms explicitly defined as $0$.\n\nTherefore, the minimal SOP expression is $x'z'$.", "answer": "$$\\boxed{x'z'}$$", "id": "1396752"}, {"introduction": "The ultimate purpose of representing a Boolean function is often to build a physical circuit that implements its logic. This practice focuses on that final step, translating an abstract Boolean expression into a tangible hardware implementation using standard logic gates. You will take a function given in Product-of-Sums ($POS$) form and determine the resources needed for a direct realization, reinforcing the fundamental link between algebraic representation and digital hardware [@problem_id:1396742].", "problem": "A digital circuit is required to implement a Boolean function $f(w, x, y, z)$ given in its product-of-sums form:\n$$f(w, x, y, z) = ((\\neg w) \\lor x \\lor (\\neg z)) \\land (w \\lor (\\neg y) \\lor z)$$\nThe implementation must be constructed using only standard logic gates: 2-input OR gates, 2-input AND gates, and 1-input NOT gates. The circuit should be a direct, multi-level implementation of the expression as written, without any algebraic simplification.\n\nWhat is the minimum total number of gates required to build this circuit?\n\nA. 5\nB. 6\nC. 7\nD. 8\nE. 9", "solution": "We implement the given product-of-sums expression\n$$f(w,x,y,z)=((\\neg w)\\lor x\\lor(\\neg z))\\land(w\\lor(\\neg y)\\lor z)$$\ndirectly using only 2-input OR gates, 2-input AND gates, and 1-input NOT gates.\n\nFirst, count the required NOT gates by identifying complemented literals. The expression contains $(\\neg w)$, $(\\neg z)$, and $(\\neg y)$, while $w$, $x$, and $z$ also appear uncomplemented. Each complemented variable requires one inverter, and a single inverter output can be fanned out to all occurrences of that complement. Therefore, the number of NOT gates is\n$$\\text{NOT gates} = 3 \\quad \\text{for } \\neg w,\\ \\neg z,\\ \\neg y.$$\n\nNext, implement each 3-input OR using only 2-input OR gates. An $n$-input OR realized by a binary tree of 2-input OR gates requires $n-1$ gates. For $n=3$, each clause needs\n$$\\text{OR gates per clause} = 3-1=2.$$\nThere are two such clauses, so\n$$\\text{total OR gates} = 2+2=4.$$\n\nFinally, the top-level conjunction is the AND of the two clause outputs, which uses a single 2-input AND gate:\n$$\\text{AND gates} = 1.$$\n\nSumming all required gates gives\n$$\\text{total gates} = \\text{NOT}+\\text{OR}+\\text{AND} = 3+4+1=8.$$\n\nNo algebraic simplification is applied, and sharing of inverted signals is allowed by fan-out, so this is the minimum under the stated constraints. Among the options, this corresponds to D.", "answer": "$$\\boxed{D}$$", "id": "1396742"}]}