{"hands_on_practices": [{"introduction": "In mathematics, we often take properties like associativity for granted, where $(a+b)+c = a+(b+c)$. However, in the world of digital logic, we must rigorously verify the properties of each operation. This first exercise challenges the assumption of associativity by focusing on the NAND gate, a fundamental building block in modern electronics. By finding specific inputs where the grouping of operations changes the outcome, you will develop a crucial appreciation for how circuit structure dictates function [@problem_id:1382099].", "problem": "An engineer is testing a custom-built processing unit. The design relies on chaining two-input NAND gates to process three binary signals, $A$, $B$, and $C$. The engineer notices that the order of operations matters, specifically that the circuit configuration for `(A NAND B) NAND C` produces a different output than the configuration for `A NAND (B NAND C)` for certain inputs. The NAND operation is defined in Boolean algebra as $X \\text{ NAND } Y = (X \\cdot Y)'$, where `·` represents the logical AND and `'` represents the logical NOT (e.g., $1' = 0$ and $0' = 1$).\n\nYour task is to identify all input combinations from the list below for which these two circuit configurations yield different results. An input combination is given as an ordered triplet $(A, B, C)$.\n\nSelect all of the following input combinations $(A, B, C)$ that result in $(A \\text{ NAND } B) \\text{ NAND } C \\neq A \\text{ NAND } (B \\text{ NAND } C)$.\n\nA. (0, 0, 1)\n\nB. (0, 1, 0)\n\nC. (1, 1, 1)\n\nD. (1, 0, 1)\n\nE. (1, 1, 0)", "solution": "We use the Boolean definition of NAND: for any Boolean $X,Y$, $X \\text{ NAND } Y = (X \\cdot Y)'$, where $\\cdot$ is logical AND and $'$ is logical NOT. We also use De Morgan’s law $(X \\cdot Y)' = X' + Y'$, where $+$ denotes logical OR, and the involution law $(X')' = X$.\n\nFirst simplify the two expressions symbolically.\n\nLeft expression:\nLet $D = A \\text{ NAND } B = (A \\cdot B)'$. Then\n$$(A \\text{ NAND } B) \\text{ NAND } C = D \\text{ NAND } C = (D \\cdot C)' = ((A \\cdot B)' \\cdot C)'.$$\nBy De Morgan’s law,\n$$((A \\cdot B)' \\cdot C)' = ((A \\cdot B)')' + C' = A \\cdot B + C'.$$\n\nRight expression:\nLet $E = B \\text{ NAND } C = (B \\cdot C)'$. Then\n$$A \\text{ NAND } (B \\text{ NAND } C) = A \\text{ NAND } E = (A \\cdot E)' = (A \\cdot (B \\cdot C)')'.$$\nBy De Morgan’s law,\n$$(A \\cdot (B \\cdot C)')' = A' + ((B \\cdot C)')' = A' + B \\cdot C.$$\n\nThus,\n$$(A \\text{ NAND } B) \\text{ NAND } C = A \\cdot B + C', \\quad A \\text{ NAND } (B \\text{ NAND } C) = A' + B \\cdot C.$$\nWe must find inputs where $A \\cdot B + C' \\neq A' + B \\cdot C$.\n\nEvaluate each listed option:\n\nA. $(A,B,C) = (0,0,1)$:\n$$A \\cdot B + C' = 0 \\cdot 0 + 1' = 0 + 0 = 0,$$\n$$A' + B \\cdot C = 0' + 0 \\cdot 1 = 1 + 0 = 1.$$\nDifferent ⇒ select A.\n\nB. $(A,B,C) = (0,1,0)$:\n$$A \\cdot B + C' = 0 \\cdot 1 + 0' = 0 + 1 = 1,$$\n$$A' + B \\cdot C = 0' + 1 \\cdot 0 = 1 + 0 = 1.$$\nEqual ⇒ do not select B.\n\nC. $(A,B,C) = (1,1,1)$:\n$$A \\cdot B + C' = 1 \\cdot 1 + 1' = 1 + 0 = 1,$$\n$$A' + B \\cdot C = 1' + 1 \\cdot 1 = 0 + 1 = 1.$$\nEqual ⇒ do not select C.\n\nD. $(A,B,C) = (1,0,1)$:\n$$A \\cdot B + C' = 1 \\cdot 0 + 1' = 0 + 0 = 0,$$\n$$A' + B \\cdot C = 1' + 0 \\cdot 1 = 0 + 0 = 0.$$\nEqual ⇒ do not select D.\n\nE. $(A,B,C) = (1,1,0)$:\n$$A \\cdot B + C' = 1 \\cdot 1 + 0' = 1 + 1 = 1,$$\n$$A' + B \\cdot C = 1' + 1 \\cdot 0 = 0 + 0 = 0.$$\nDifferent ⇒ select E.\n\nTherefore, the inputs that yield different results are A and E.", "answer": "$$\\boxed{AE}$$", "id": "1382099"}, {"introduction": "Once we understand the behavior of individual gates, we can combine them to represent complex logical relationships using Boolean expressions. These expressions can be standardized into forms like Sum-of-Products (SOP) or Product-of-Sums (POS), which are essential for circuit analysis and implementation. This practice will guide you through the systematic process of converting a given SOP expression into its canonical POS equivalent, a core skill for mapping abstract logic onto physical hardware [@problem_id:1382102].", "problem": "In digital electronics, Boolean functions are often manipulated into standard forms for analysis or implementation. A designer is working on a safety monitoring circuit with three binary inputs, $A$, $B$, and $C$. The circuit's output, $F$, is a single binary signal that triggers an alarm. The logic for the alarm is defined by the Boolean expression $F(A, B, C) = A'B + AC'$. In this notation, the prime symbol (e.g., $A'$) denotes the logical NOT operation, the plus symbol ($+$) denotes the logical OR operation, and juxtaposition (e.g., $XY$) denotes the logical AND operation.\n\nFor implementation using a specific type of programmable logic technology, the expression must be converted into its canonical Product-of-Sums (POS) form. A canonical Product-of-Sums expression is a logical product (AND) of maxterms, where each maxterm is a logical sum (OR) of all input variables, with each variable appearing exactly once in either its complemented or uncomplemented form.\n\nDetermine the canonical Product-of-Sums expression for the function $F(A, B, C)$.", "solution": "We are given the Boolean function $F(A,B,C) = A'B + AC'$, where $'$ denotes logical NOT, $+$ denotes logical OR, and juxtaposition denotes logical AND. To obtain the canonical Product-of-Sums (POS), we need the product of maxterms corresponding to the input combinations for which $F=0$.\n\nFirst, evaluate $F$ for all $8$ combinations of $(A,B,C)$:\n- For $(A,B,C)=(0,0,0)$: $A'B=1\\cdot 0=0$, $AC'=0\\cdot 1=0$, so $F=0$.\n- For $(0,0,1)$: $A'B=1\\cdot 0=0$, $AC'=0\\cdot 0=0$, so $F=0$.\n- For $(0,1,0)$: $A'B=1\\cdot 1=1$, so $F=1$.\n- For $(0,1,1)$: $A'B=1\\cdot 1=1$, so $F=1$.\n- For $(1,0,0)$: $AC'=1\\cdot 1=1$, so $F=1$.\n- For $(1,0,1)$: $A'B=0\\cdot 0=0$, $AC'=1\\cdot 0=0$, so $F=0$.\n- For $(1,1,0)$: $AC'=1\\cdot 1=1$, so $F=1$.\n- For $(1,1,1)$: $A'B=0\\cdot 1=0$, $AC'=1\\cdot 0=0$, so $F=0$.\n\nThus $F=0$ at indices $0,1,5,7$ (with index formed by the binary number $ABC$). The canonical POS is the product of the corresponding maxterms. For an assignment $(A,B,C)=(a,b,c)$, the associated maxterm is the sum in which each variable appears uncomplemented if its value is $0$ and complemented if its value is $1$, so that the sum evaluates to $0$ at that assignment.\n\nTherefore:\n- Index $0$ $(0,0,0)$ gives maxterm $(A + B + C)$.\n- Index $1$ $(0,0,1)$ gives maxterm $(A + B + C')$.\n- Index $5$ $(1,0,1)$ gives maxterm $(A' + B + C')$.\n- Index $7$ $(1,1,1)$ gives maxterm $(A' + B' + C')$.\n\nMultiplying these maxterms yields the canonical POS:\n$$F(A,B,C) = (A + B + C)(A + B + C')(A' + B + C')(A' + B' + C').$$", "answer": "$$\\boxed{(A + B + C)(A + B + C')(A' + B + C')(A' + B' + C')}$$", "id": "1382102"}, {"introduction": "This final practice moves from analysis to synthesis, tackling a common real-world engineering constraint: building a complex function from a limited inventory of parts. You will construct a 'compatibility checker' (an XNOR gate) using only two-input NOR gates, which, like NAND gates, are 'universal' building blocks. This exercise not only demonstrates the power of universal gates but also provides excellent practice in applying Boolean algebra, especially De Morgan's laws, to achieve a specific design goal [@problem_id:1382064].", "problem": "A hardware engineer is tasked with designing a simple module for a legacy control system. This module functions as a 'compatibility checker'. It receives two single-bit digital signals, which we will denote as $A$ and $B$. The module's specification requires it to produce a high logic output (representing '1') if and only if the inputs $A$ and $B$ are identical (i.e., both are '0' or both are '1'). Otherwise, the module must produce a low logic output (representing '0').\nDue to a surplus in the component inventory, the engineer must build this module using only two-input NOR gates. A two-input NOR gate with inputs $X$ and $Y$ produces an output that is the logical negation of an OR operation on its inputs.\n\nWhat is the absolute minimum number of two-input NOR gates required to construct this compatibility checker module?", "solution": "We need the function that is high if and only if $A$ and $B$ are equal, i.e., the logical equivalence (XNOR):\n$$\nF = A \\odot B = (A \\oplus B)' = (A'B + AB')' = (A + B)(A' + B').\n$$\nWe are restricted to two-input NOR gates. A two-input NOR implements\n$$\n\\operatorname{NOR}(X,Y) = (X + Y)'.\n$$\n\nConstructing $F$ with four two-input NOR gates:\n1) Let $p = \\operatorname{NOR}(A,B) = (A + B)' = A'B'$ by De Morgan.\n\n2) Let $q = \\operatorname{NOR}(A,p) = (A + p)'$. Substitute $p = A'B'$ to simplify the inner sum:\n$$\nA + p = A + A'B' = (A + A')(A + B') = 1 \\cdot (A + B') = A + B',\n$$\nso\n$$\nq = (A + B')' = A'B.\n$$\n\n3) Let $r = \\operatorname{NOR}(B,p) = (B + p)' = (B + A'B')'$. Simplify similarly:\n$$\nB + A'B' = (B + A')(B + B') = (A' + B)\\cdot 1 = A' + B,\n$$\nhence\n$$\nr = (A' + B)' = AB'.\n$$\n\n4) Finally, take\n$$\nF = \\operatorname{NOR}(q,r) = (q + r)' = (A'B + AB')' = A \\odot B.\n$$\n\nThus, the circuit uses exactly four two-input NOR gates and realizes $F$.\n\nWhy fewer than four NOR gates are impossible:\n- The final gate must be a NOR whose inputs are some intermediate functions $U$ and $V$ of $A$ and $B$, so $F = (U + V)'$ and hence $F' = U + V$.\n- Since $F' = A'B + AB'$ and its only prime implicants are $A'B$ and $AB'$, any sum representation $U + V$ that equals $F'$ must provide, up to redundancy, both implicants. Therefore, we need two distinct intermediate signals behaving like $A'B$ and $AB'$ (or functions equivalent to them).\n- Each of $A'B$ and $AB'$ depends on a complemented literal of a different variable. With only primary inputs $A$ and $B$ available, producing both requires at least two prior operations (you cannot obtain both $A'$ and $B'$ or their equivalents from zero or one NOR gate). Consequently, together with the final NOR, at least four NOR gates are required.\n\nTherefore, the absolute minimum number of two-input NOR gates to implement the XNOR (compatibility checker) is four.", "answer": "$$\\boxed{4}$$", "id": "1382064"}]}