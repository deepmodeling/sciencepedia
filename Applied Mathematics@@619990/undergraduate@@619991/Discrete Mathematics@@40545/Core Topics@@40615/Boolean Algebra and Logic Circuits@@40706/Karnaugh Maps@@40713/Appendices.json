{"hands_on_practices": [{"introduction": "We begin our hands-on journey with a foundational exercise that cuts to the core of why Karnaugh maps are so powerful. This problem demonstrates the fundamental principle of simplifying a Boolean expression by grouping adjacent cells. By visually identifying and circling adjacent 1s on the map, you will directly apply the algebraic simplification rule $AB + AB' = A$ in a graphical context, revealing the elegance and efficiency of the K-map method [@problem_id:1379353].", "problem": "A digital logic circuit is being designed with three input variables, denoted as $X$, $Y$, and $Z$. The output of the circuit, $F(X,Y,Z)$, is initially defined to be always 0 for all possible input combinations. For a new specification, the output must be modified to be 1 only for the input combinations corresponding to the minterms $m_2$ (binary 010) and $m_6$ (binary 110). In this convention, $X$ is the most significant bit and $Z$ is the least significant bit.\n\nUsing a Karnaugh map (K-map), a graphical method used for simplifying Boolean algebra expressions, determine the simplified boolean expression for the output function $F(X,Y,Z)$ in its minimal Sum of Products (SOP) form.", "solution": "The function is specified to be 1 only for minterms $m_{2}$ and $m_{6}$, with $(X,Y,Z)$ and $X$ most significant. Translating minterms to product terms:\n- $m_{2}$ corresponds to $(0,1,0)$, hence the product term $X'YZ'$.\n- $m_{6}$ corresponds to $(1,1,0)$, hence the product term $XYZ'$.\n\nThus the canonical SOP is\n$$F(X,Y,Z)=X'YZ'+XYZ'.$$\n\nUsing Boolean algebra (distributive law) to factor common literals,\n$$F=YZ'(X'+X).$$\n\nUsing the complementarity law $X'+X=1$, we get\n$$F=YZ'.$$\n\nInterpreting this via a Karnaugh map: the 1s at $m_{2}$ and $m_{6}$ are adjacent along the $X$ dimension, so they form a size-2 group that eliminates $X$ and preserves $Y=1$ and $Z=0$, yielding the same minimal SOP $YZ'$.", "answer": "$$\\boxed{YZ'}$$", "id": "1379353"}, {"introduction": "Having practiced the basics of grouping, we now move to a more nuanced challenge: ensuring our simplification is truly minimal. A common pitfall is to identify valid groups that do not, however, result in the simplest possible expression. This exercise puts you in the role of a design reviewer, tasked with analyzing a proposed solution and identifying why it falls short of being optimal, reinforcing the crucial strategy of always forming the largest possible groups of adjacent minterms [@problem_id:1379411].", "problem": "A junior digital logic designer, Alex, is tasked with simplifying a 4-variable Boolean function $F(A, B, C, D)$ to its minimal Sum-of-Products (SOP) form. The function is defined by the minterms for which its output is true: $F(A, B, C, D) = \\sum m(0, 2, 5, 7, 8, 10, 13, 15)$.\n\nAlex uses a Karnaugh map (K-map) where the rows correspond to the values of variables AB in the Gray code order (00, 01, 11, 10) and the columns correspond to the values of variables CD, also in Gray code order (00, 01, 11, 10). After grouping the 1s, Alex produces an SOP expression derived from the following three product terms:\n- $P_1 = BD$\n- $P_2 = A'B'D'$\n- $P_3 = AB'D'$\n\nThe proposed simplified function is $F_{Alex} = BD + A'B'D' + AB'D'$. Upon review, you notice that this expression is not the minimal SOP form. Which of the following statements provides the best explanation for why Alex's result is not minimal?\n\nA. The term $BD$ is invalid because K-map groups must not contain more than two 1s unless they cover an entire row or column.\n\nB. The groups corresponding to the terms $A'B'D'$ and $AB'D'$ should have been combined into a single, larger group.\n\nC. It is impossible to cover all the specified minterms with only three groups; at least four groups are required.\n\nD. The group that generates the term $BD$ is redundant because all of its minterms are already covered by other essential prime implicants.\n\nE. A Product-of-Sums (POS) simplification should have been used, as the number of 0s is equal to the number of 1s.", "solution": "We are given the function $F(A,B,C,D)=\\sum m(0,2,5,7,8,10,13,15)$ and Alex’s proposal $F_{Alex}=BD+A'B'D'+AB'D'$ derived from K-map groupings.\n\nFirst, verify the coverage of Alex’s terms in minterms:\n- $BD$ corresponds to $B=1$ and $D=1$, with $A$ and $C$ free. This covers minterms $m5\\,(0101)$, $m7\\,(0111)$, $m13\\,(1101)$, and $m15\\,(1111)$, all of which are in the given set.\n- $A'B'D'$ corresponds to $A=0$, $B=0$, $D=0$, with $C$ free, covering $m0\\,(0000)$ and $m2\\,(0010)$.\n- $AB'D'$ corresponds to $A=1$, $B=0$, $D=0$, with $C$ free, covering $m8\\,(1000)$ and $m10\\,(1010)$.\n\nThus $F_{Alex}$ indeed covers exactly the specified minterms. However, this expression is not minimal. Use Boolean algebra to combine terms that differ only in $A$:\n$$\nA'B'D' + AB'D' = (A' + A)B'D' = 1\\cdot B'D' = B'D'.\n$$\nTherefore,\n$$\nF_{Alex} = BD + A'B'D' + AB'D' = BD + B'D'.\n$$\nIn K-map terms, the two groups corresponding to $A'B'D'$ and $AB'D'$ should be combined into a single larger group of four cells yielding $B'D'$. The remaining group $BD$ is already a maximal group of four. The minimal SOP is hence $F=BD+B'D'$, which uses fewer product terms and fewer literals than Alex’s expression.\n\nConsequently, the best explanation is that the groups for $A'B'D'$ and $AB'D'$ should have been merged into one, giving $B'D'$.", "answer": "$$\\boxed{B}$$", "id": "1379411"}, {"introduction": "Our final practice problem elevates the K-map from a tool for single-function simplification to a method for system-level optimization. In real-world digital design, we often need to implement multiple functions using shared logic resources like a Programmable Logic Array (PLA). This problem challenges you to minimize a set of three functions by identifying product terms that can be shared among them, thereby reducing overall hardware complexity and cost [@problem_id:1379385]. This exercise provides direct insight into practical, efficient circuit design.", "problem": "In the design of a custom Application-Specific Integrated Circuit (ASIC), a logic synthesis tool is tasked with optimizing a set of Boolean functions to be implemented on a Programmable Logic Array (PLA). A PLA is a type of programmable logic device with a programmable AND-plane and a programmable OR-plane. To minimize the silicon area, it is crucial to find the minimum number of unique product terms (the outputs of the AND-plane) that can be shared to realize all the output functions.\n\nYou are given a system of three 3-variable Boolean functions, $F_1, F_2, F_3$, of input variables $A, B, C$. The functions are specified by their on-sets (the set of minterms for which the function is true):\n- $F_1(A,B,C) = \\sum m(2, 3, 5, 7)$\n- $F_2(A,B,C) = \\sum m(3, 5, 6, 7)$\n- $F_3(A,B,C) = \\sum m(0, 1, 2, 6)$\n\nYour task is to determine the minimal set of product terms required to implement all three functions simultaneously. Based on this minimal set, select the correct PLA programming table from the options below.\n\nThe PLA table is structured as follows:\n- The `Term` column lists the logic expression for each unique product term.\n- The `A`, `B`, `C` columns describe the AND-plane programming. A `1` means the variable is included as is, a `0` means it is complemented (e.g., $A'$), and a `-` (dash) means the variable is not part of the term.\n- The `F1`, `F2`, `F3` columns describe the OR-plane programming. A `1` means the product term in that row is included in the sum-of-products expression for that function. A `.` (dot) means it is not.\n\nWhich of the following tables represents a minimal correct implementation?\n\n**A.**\n| Term | A | B | C | F1| F2| F3|\n|:----:|:-:|:-:|:-:|:-:|:-:|:-:|\n| A'B  | 0 | 1 | - | 1 | . | . |\n| AC   | 1 | - | 1 | 1 | 1 | . |\n| AB   | 1 | 1 | - | . | 1 | . |\n| BC   | - | 1 | 1 | . | 1 | . |\n| A'B' | 0 | 0 | - | . | . | 1 |\n| BC'  | - | 1 | 0 | . | . | 1 |\n\n**B.**\n| Term | A | B | C | F1| F2| F3|\n|:----:|:-:|:-:|:-:|:-:|:-:|:-:|\n| A'B' | 0 | 0 | - | . | . | 1 |\n| BC'  | - | 1 | 0 | 1 | . | 1 |\n| BC   | - | 1 | 1 | 1 | 1 | . |\n| AC   | 1 | - | 1 | 1 | 1 | . |\n| AB   | 1 | 1 | - | . | 1 | . |\n\n**C.**\n| Term | A | B | C | F1| F2| F3|\n|:----:|:-:|:-:|:-:|:-:|:-:|:-:|\n| A'B  | 0 | 1 | - | 1 | 1 | . |\n| AC   | 1 | - | 1 | 1 | 1 | 1 |\n| AB   | 1 | 1 | - | . | 1 | . |\n| BC   | - | 1 | 1 | . | 1 | . |\n| A'B' | 0 | 0 | - | . | . | 1 |\n| BC'  | - | 1 | 0 | . | . | 1 |\n\n**D.**\n| Term | A | B | C | F1| F2| F3|\n|:----:|:-:|:-:|:-:|:-:|:-:|:-:|\n| A'B  | 0 | 1 | - | 1 | . | . |\n| AC   | 1 | - | 1 | 1 | . | . |\n| AB   | 1 | 1 | - | . | 1 | . |\n| BC   | - | 1 | 1 | . | 1 | . |\n| AC_2 | 1 | - | 1 | . | 1 | . |\n| A'B' | 0 | 0 | - | . | . | 1 |\n| BC'  | - | 1 | 0 | . | . | 1 |", "solution": "We first translate each on-set into binary minterms using the standard indexing $m(A,B,C)=4A+2B+C$:\n$$\n\\begin{aligned}\nF_{1}&:\\{2,3,5,7\\}=\\{010,011,101,111\\},\\\\\nF_{2}&:\\{3,5,6,7\\}=\\{011,101,110,111\\},\\\\\nF_{3}&:\\{0,1,2,6\\}=\\{000,001,010,110\\}.\n\\end{aligned}\n$$\n\nMinimize each function individually via prime implicant grouping.\n\nFor $F_{1}$, group adjacent minterms:\n- $010$ and $011$ give $A'B$.\n- $101$ and $111$ give $AC$.\nThus a minimal SOP is\n$$\nF_{1}=A'B+AC.\n$$\nNo larger implicant can replace $A'B$ without also covering $110$ (off for $F_{1}$), and no larger implicant can replace $AC$ without also covering $100$ or $001$ (both off for $F_{1}$), so these two are essential.\n\nFor $F_{2}$, the four on-set minterms are the three edges around $111$ plus $111$ itself. The three prime implicants are:\n- $011$ and $111$ give $BC$.\n- $101$ and $111$ give $AC$.\n- $110$ and $111$ give $AB$.\nAny two of $\\{AB,AC,BC\\}$ miss one required minterm, hence the minimal cover is\n$$\nF_{2}=AB+AC+BC.\n$$\n\nFor $F_{3}$, group adjacent minterms:\n- $000$ and $001$ give $A'B'$.\n- $010$ and $110$ give $BC'$.\nThus a minimal SOP is\n$$\nF_{3}=A'B'+BC'.\n$$\n\nCollect the unique product terms needed across all three minimized expressions:\n$$\n\\{A'B,\\ AC,\\ AB,\\ BC,\\ A'B',\\ BC'\\}.\n$$\nThis is $6$ product terms. We now argue that fewer than $6$ unique terms are impossible. Function $F_{2}$ alone requires at least $3$ distinct two-literal implicants $\\{AB,AC,BC\\}$; $F_{3}$ requires at least $2$ distinct implicants (e.g., $A'B'$ and $BC'$) to avoid turning on off-minterms. For $F_{1}$, the minterm $010$ cannot be correctly covered by any of $\\{AB,AC,BC,A'B',BC'\\}$ without also incorrectly covering $110$ (for instance, $BC'$ covers both $010$ and $110$), so $A'B$ is additionally required. Since $AC$ is already among the $F_{2}$ terms, $F_{1}$ needs exactly one more unique term beyond those, yielding a lower bound of $3+2+1=6$ unique product terms. Therefore $6$ is minimal.\n\nFinally, we match to the given PLA tables. The minimal set and correct OR-plane connections are:\n- $F_{1}=A'B+AC$,\n- $F_{2}=AB+AC+BC$,\n- $F_{3}=A'B'+BC'$,\nwhich is exactly option A. Options B and C connect product terms to outputs in ways that produce incorrect minterms (e.g., $F_{1}$ in B includes $BC'$ and $BC$, yielding $B$ and turning on $110$; C connects $A'B$ to $F_{2}$ and $AC$ to $F_{3}$, both incorrect). Option D duplicates $AC$ as a separate row, increasing the count to $7$, hence not minimal.\n\nTherefore, the minimal correct implementation is A.", "answer": "$$\\boxed{A}$$", "id": "1379385"}]}