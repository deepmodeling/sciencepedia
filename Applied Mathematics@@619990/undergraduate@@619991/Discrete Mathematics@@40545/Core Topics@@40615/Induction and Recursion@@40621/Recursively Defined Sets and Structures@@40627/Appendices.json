{"hands_on_practices": [{"introduction": "Recursive definitions often describe a process of generation, like taking steps on a grid starting from an initial point. This exercise shows how to translate such a dynamic process into a static algebraic property. By analyzing the structure of the allowed steps, we can derive a concise condition that any point reachable through this process must satisfy, allowing us to test for membership in the set without retracing every possible path [@problem_id:1395553].", "problem": "Consider a set of points $S$ in the Cartesian plane with integer coordinates. The set $S$ is defined recursively as follows:\n- **Basis:** The point $(0,0)$ is in $S$.\n- **Recursion:** If a point $(x, y)$ is in $S$, then the points $(x+2, y+1)$ and $(x+1, y+2)$ are also in $S$.\n- **Closure:** Only points generated by the rules above are in $S$.\n\nWhich of the following points belong to the set $S$? There may be more than one correct option. Concatenate the letters of all correct options in alphabetical order for your answer.\n\nA) $(13, 11)$\n\nB) $(15, 12)$\n\nC) $(12, 14)$\n\nD) $(10, 15)$\n\nE) $(14, 13)$", "solution": "Each step adds either $(2,1)$ or $(1,2)$ to the current point, so after $m$ uses of $(2,1)$ and $n$ uses of $(1,2)$, every point in $S$ has the form\n$$\n(x,y) = m(2,1) + n(1,2),\n$$\nwith $m,n \\in \\mathbb{Z}_{\\ge 0}$. This gives the linear system\n$$\nx = 2m + n, \\quad y = m + 2n.\n$$\nSolve for $m$ and $n$:\n$$\n2x - y = 2(2m + n) - (m + 2n) = 3m \\;\\Rightarrow\\; m = \\frac{2x - y}{3},\n$$\n$$\n2y - x = 2(m + 2n) - (2m + n) = 3n \\;\\Rightarrow\\; n = \\frac{2y - x}{3}.\n$$\nHence $(x,y) \\in S$ if and only if $m$ and $n$ computed above are integers with $m,n \\ge 0$, i.e., $2x - y$ and $2y - x$ are nonnegative multiples of $3$.\n\nCheck each option:\n\nA) $(13,11)$: $m = \\frac{2\\cdot 13 - 11}{3} = \\frac{15}{3} = 5$, $n = \\frac{2\\cdot 11 - 13}{3} = \\frac{9}{3} = 3$; valid.\n\nB) $(15,12)$: $m = \\frac{30 - 12}{3} = \\frac{18}{3} = 6$, $n = \\frac{24 - 15}{3} = \\frac{9}{3} = 3$; valid.\n\nC) $(12,14)$: $m = \\frac{24 - 14}{3} = \\frac{10}{3}$; not an integer; invalid.\n\nD) $(10,15)$: $m = \\frac{20 - 15}{3} = \\frac{5}{3}$; not an integer; invalid.\n\nE) $(14,13)$: $m = \\frac{28 - 13}{3} = \\frac{15}{3} = 5$, $n = \\frac{26 - 14}{3} = \\frac{12}{3} = 4$; valid.\n\nThus the correct options are A, B, and E.", "answer": "$$\\boxed{ABE}$$", "id": "1395553"}, {"introduction": "Beyond simply identifying members of a set, we often want to count how many of them have a specific property, such as a given length. This practice demonstrates how the recursive rules that define a set of strings can be directly translated into a recurrence relation. Solving this relation allows us to count the strings efficiently, revealing a deep connection between recursive structures and the powerful tools of enumerative combinatorics [@problem_id:1395524].", "problem": "Consider the set of all binary strings, which are sequences of 0s and 1s. A specific subset of these strings, which we will call the set $S$, is defined using the following recursive rules:\n\n- **Basis Step:** The empty string $\\lambda$ is in $S$.\n- **Recursive Step:** For any string $w$ that is already in $S$:\n    1. The string formed by appending a '1' to $w$, denoted as $w1$, is also in $S$.\n    2. If the string $w$ does not end with the digit '0', then the string formed by appending a '0' to $w$, denoted as $w0$, is also in $S$.\n\nNo other strings are in $S$ except those that can be generated by applying these rules. Based on this definition, determine the total number of strings in $S$ that have a length of exactly 15.", "solution": "Interpret the rules defining $S$ as enforcing that no two consecutive zeros can appear. This is because:\n- Appending $1$ is always permitted, so no restriction arises from $1$s.\n- Appending $0$ is permitted only when the current string does not end with $0$, which is equivalent to forbidding the creation of a substring $00$.\n- Conversely, any binary string with no $00$ can be constructed from left to right by appending each symbol; each $1$ is always allowed, and each $0$ is allowed precisely because it follows a $1$ (or is the first symbol, since the empty string does not end with $0$).\nTherefore, $S$ is exactly the set of binary strings with no two consecutive zeros.\n\nLet $a_{n}$ denote the number of strings in $S$ of length $n$. Define:\n- $x_{n}$ as the number of valid strings of length $n$ that end with $1$.\n- $y_{n}$ as the number of valid strings of length $n$ that end with $0$.\nThen $a_{n} = x_{n} + y_{n}$.\n\nBy the construction rules:\n- Appending $1$ to any valid string of length $n-1$ yields a valid string of length $n$ ending with $1$, so\n$$\nx_{n} = a_{n-1}.\n$$\n- Appending $0$ is allowed only to strings of length $n-1$ that end with $1$, so\n$$\ny_{n} = x_{n-1}.\n$$\nThus,\n$$\na_{n} = x_{n} + y_{n} = a_{n-1} + x_{n-1}.\n$$\nSince every valid string of length $n-1$ that ends with $1$ is obtained by appending $1$ to a valid string of length $n-2$, we have\n$$\nx_{n-1} = a_{n-2}.\n$$\nTherefore, the sequence $\\{a_{n}\\}$ satisfies the Fibonacci-type recurrence\n$$\na_{n} = a_{n-1} + a_{n-2} \\quad \\text{for } n \\geq 2.\n$$\n\nInitial conditions follow from the rules:\n- $a_{0} = 1$ (only the empty string).\n- $a_{1} = 2$ (both $0$ and $1$ are allowed from the empty string, which does not end with $0$).\n\nLet $\\{F_{n}\\}$ be the Fibonacci sequence defined by $F_{0} = 0$, $F_{1} = 1$, and $F_{n} = F_{n-1} + F_{n-2}$ for $n \\geq 2$. Then by induction,\n$$\na_{n} = F_{n+2} \\quad \\text{for all } n \\geq 0,\n$$\nsince $a_{0} = 1 = F_{2}$ and $a_{1} = 2 = F_{3}$, and the recurrence matches.\n\nTherefore,\n$$\na_{15} = F_{17}.\n$$\nEvaluating the Fibonacci number up to index $17$ gives $F_{17} = 1597$. Hence, the total number of strings in $S$ of length exactly $15$ is $1597$.", "answer": "$$\\boxed{1597}$$", "id": "1395524"}, {"introduction": "A recursive definition acts as a precise blueprint for a set, but not all blueprints are correct. A valid definition must be both *sound* (generating only members of the target set) and *complete* (generating all members of the target set). This exercise challenges you to act as a verifier, critically analyzing several proposed definitions to find the one that perfectly captures the desired set, sharpening your understanding of what makes a recursive definition logically robust [@problem_id:1395530].", "problem": "Let $S$ be the set of all finite strings over the alphabet $\\Sigma = \\{a, b\\}$ such that for any string $w \\in S$, the number of $a$'s in $w$ is exactly twice the number of $b$'s in $w$. We use $n_a(w)$ and $n_b(w)$ to denote the number of occurrences of the symbols $a$ and $b$ in a string $w$, respectively. Thus, the set is formally defined as $S = \\{w \\in \\{a, b\\}^* \\mid n_a(w) = 2n_b(w)\\}$. The empty string, denoted by $\\lambda$, is in $S$ since $n_a(\\lambda) = 0$ and $n_b(\\lambda) = 0$.\n\nWhich of the following choices provides a correct and complete recursive definition for the set $S$?\n\nA.\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** If $u \\in S$ and $v \\in S$, then their concatenation $uv \\in S$. Furthermore, the strings $auavb$, $aubva$, and $buava$ are also in $S$.\n\nB.\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** If $u \\in S$ and $v \\in S$, then the strings $auavb$, $aubva$, and $buava$ are in $S$.\n\nC.\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** If $w \\in S$, then the string $aawb$ is in $S$. Additionally, if $u \\in S$ and $v \\in S$, then their concatenation $uv \\in S$.\n\nD.\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** The strings $aab$, $aba$, and $baa$ are in $S$. Additionally, if $u \\in S$ and $v \\in S$, then their concatenation $uv \\in S$.\n\nE.\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** If $w \\in S$, then the strings $aabw$, $abaw$, and $baaw$ are in $S$.", "solution": "To find the correct recursive definition for the set $S = \\{w \\in \\{a, b\\}^* \\mid n_a(w) = 2n_b(w)\\}$, we must evaluate each option to see if it is both *sound* and *complete*. A definition is sound if it only generates strings that belong to $S$. A definition is complete if it can generate every string that belongs to $S$.\n\nFirst, let's establish the soundness of two common types of rules that appear in the options.\n1.  **Concatenation Rule:** If $u \\in S$ and $v \\in S$, then $n_a(u) = 2n_b(u)$ and $n_a(v) = 2n_b(v)$. For their concatenation $uv$, the number of $a$'s is $n_a(uv) = n_a(u) + n_a(v) = 2n_b(u) + 2n_b(v) = 2(n_b(u) + n_b(v)) = 2n_b(uv)$. Thus, the concatenation rule \"if $u, v \\in S$, then $uv \\in S$\" is sound. Many strings in $S$ are formed by concatenation (e.g., `aabbaa` is in $S$, and can be seen as the concatenation of `aab` and `baa`, both of which are also in $S$). A complete definition must account for such strings.\n\n2.  **The Basis Step:** The empty string $\\lambda$ has $n_a(\\lambda)=0$ and $n_b(\\lambda)=0$. Since $0=2 \\times 0$, $\\lambda \\in S$. All options correctly include this basis step.\n\nNow, let's analyze each option:\n\n**Option A:**\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** If $u, v \\in S$, then $uv \\in S$. Also, $auavb \\in S$, $aubva \\in S$, and $buava \\in S$.\n*   **Soundness:** The `uv` rule is sound. For the rule generating $w' = auavb$ from $u, v \\in S$:\n    $n_a(w') = n_a(u) + n_a(v) + 2 = 2n_b(u) + 2n_b(v) + 2 = 2(n_b(u) + n_b(v) + 1)$.\n    $n_b(w') = n_b(u) + n_b(v) + 1$.\n    So, $n_a(w') = 2n_b(w')$. This rule is sound. The same logic holds for its permutations `aubva` and `buava`. The definition is sound.\n*   **Completeness:** This definition includes the concatenation rule, which handles composite strings. The other rules, $auavb$ and its permutations, are designed to generate the \"prime\" strings in $S$ (those that cannot be decomposed into smaller non-empty strings from $S$). For example, by taking $u=\\lambda$ and $v=\\lambda$, we generate $aab, aba, baa$. This structure, combining concatenation with rules for generating prime words, is known to be complete for this type of language. This option appears correct.\n\n**Option B:**\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** If $u, v \\in S$, then $auavb \\in S$, $aubva \\in S$, and $buava \\in S$.\n*   **Soundness:** The rules are sound, as shown for Option A.\n*   **Completeness:** This definition lacks a rule for concatenation. Consider the string `aabbaa`. We know `aabbaa` is in $S$ since $n_a=4, n_b=2$. This string can be seen as the concatenation of `aab` and `baa`. The rules in this option can generate `aab` (with $u=\\lambda, v=\\lambda$) and `baa` (with $u=\\lambda, v=\\lambda$). However, there is no rule to combine them. We cannot form `aabbaa` using the given recursive step, as it would have to match one of the forms (e.g., $auavb$), which is impossible. For instance, to match $auavb$, $u$ would have to be `a`, which is not in $S$. So, this definition is incomplete.\n\n**Option C:**\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** If $w \\in S$, then $aawb \\in S$. If $u, v \\in S$, then $uv \\in S$.\n*   **Soundness:** The `uv` rule is sound. Let's check the `aawb` rule. If $w \\in S$, $n_a(w)=2n_b(w)$. For $w'=aawb$, $n_a(w')=n_a(w)+2$ and $n_b(w')=n_b(w)+1$. So, $n_a(w')=2n_b(w)+2=2(n_b(w)+1)=2n_b(w')$. The rule is sound.\n*   **Completeness:** This definition can generate `aab` (by setting $w=\\lambda$) and all concatenations involving it. However, it can never generate the strings `aba` or `baa`, both of which are in $S$. The prime-generating rule `aawb` can only produce strings that start with `aa` and end with `b`, relative to the inner string $w$. Thus, this definition is incomplete.\n\n**Option D:**\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** The strings $aab$, $aba$, and $baa$ are in $S$. If $u, v \\in S$, then $uv \\in S$.\n*   **Soundness:** The base cases `aab`, `aba`, `baa` are all in $S$. The `uv` rule is sound. The definition is sound.\n*   **Completeness:** This definition allows for building strings by concatenating the fundamental units `aab`, `aba`, and `baa`. However, there are other \"prime\" strings in $S$. For example, consider the string `aaaabb`. It is in $S$ as $n_a=4, n_b=2$. It cannot be formed by concatenating any non-empty strings from $S$, so it is a prime string. This definition has no way to generate `aaaabb`, as it is not a concatenation of `aab`, `aba`, or `baa`. Thus, the definition is incomplete.\n\n**Option E:**\n*   **Basis Step:** $\\lambda \\in S$.\n*   **Recursive Step:** If $w \\in S$, then $aabw \\in S$, $abaw \\in S$, and $baaw \\in S$.\n*   **Soundness:** If $w \\in S$, then for $w'=aabw$, $n_a(w') = n_a(aab)+n_a(w)=2+2n_b(w)$, and $n_b(w')=n_b(aab)+n_b(w)=1+n_b(w)$. $2n_b(w')=2(1+n_b(w))=2+2n_b(w)$. So this rule is sound. The same applies to `abaw` and `baaw`.\n*   **Completeness:** This definition only allows for prefixing existing strings. It fails to generate strings where the fundamental blocks are arranged differently. Consider the prime string `aaaabb` again. To generate it, it must be of the form $aabw'$, $abaw'$, or $baaw'$. This would imply $w'=aabb$ or $w'=aab$ respectively. But $aabb$ is not in $S$. Thus, `aaaabb` cannot be generated. This definition is incomplete.\n\n**Conclusion:**\nOnly Option A provides a set of rules that is both sound and complete. It correctly includes a rule for concatenation to build composite strings and a set of rules that can generate all prime strings from smaller strings already in the set.", "answer": "$$\\boxed{A}$$", "id": "1395530"}]}