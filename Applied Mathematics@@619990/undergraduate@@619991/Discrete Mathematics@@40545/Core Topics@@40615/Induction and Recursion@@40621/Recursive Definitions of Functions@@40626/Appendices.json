{"hands_on_practices": [{"introduction": "The journey into recursive thinking often begins with understanding how a problem's solution can be built from the solutions to its smaller instances. This first practice provides a classic and intuitive scenario to explore this very idea. By considering the final move made to reach a target, we can define the total number of paths in terms of the number of paths to previous positions, laying the groundwork for a powerful problem-solving technique [@problem_id:1395306].", "problem": "An autonomous maintenance robot operates on a one-dimensional track, with positions marked by non-negative integers: 0, 1, 2, 3, ... The robot starts at position 0. The robot's movement is restricted to two types of forward-only moves: it can either advance its position by 1 unit (a \"step\") or by 2 units (a \"jump\"). A \"traversal sequence\" is a specific ordered a sequence of these moves. For example, to reach position 3, the robot could use the sequence (step, step, step), or (step, jump), or (jump, step). Your task is to determine the total number of distinct traversal sequences the robot can use to arrive exactly at the target position $n=10$.", "solution": "Let $a_{n}$ denote the number of traversal sequences that reach position $n$ using moves of size $1$ (step) or $2$ (jump).\n\nBase cases:\n- To remain at position $0$, there is exactly one sequence (the empty sequence), so $a_{0}=1$.\n- To reach position $1$, there is exactly one sequence (one step), so $a_{1}=1$.\n\nRecurrence relation:\nFor $n \\geq 2$, the last move is either a step (coming from $n-1$) or a jump (coming from $n-2$). These two cases are disjoint and cover all possibilities. Therefore,\n$$\na_{n}=a_{n-1}+a_{n-2}.\n$$\n\nCompute successively up to $n=10$:\n$$\n\\begin{aligned}\na_{0}&=1,\\\\\na_{1}&=1,\\\\\na_{2}&=a_{1}+a_{0}=1+1=2,\\\\\na_{3}&=a_{2}+a_{1}=2+1=3,\\\\\na_{4}&=a_{3}+a_{2}=3+2=5,\\\\\na_{5}&=a_{4}+a_{3}=5+3=8,\\\\\na_{6}&=a_{5}+a_{4}=8+5=13,\\\\\na_{7}&=a_{6}+a_{5}=13+8=21,\\\\\na_{8}&=a_{7}+a_{6}=21+13=34,\\\\\na_{9}&=a_{8}+a_{7}=34+21=55,\\\\\na_{10}&=a_{9}+a_{8}=55+34=89.\n\\end{aligned}\n$$\n\nAs a combinatorial cross-check, one can also sum over the number of jumps $j$. If there are $j$ jumps and $n-2j$ steps, the total number of moves is $n-j$, and the number of sequences is the number of ways to choose positions for the $j$ jumps:\n$$\na_{n}=\\sum_{j=0}^{\\lfloor n/2 \\rfloor} \\binom{n-j}{j}.\n$$\nFor $n=10$,\n$$\na_{10}=\\sum_{j=0}^{5} \\binom{10-j}{j}\n=\\binom{10}{0}+\\binom{9}{1}+\\binom{8}{2}+\\binom{7}{3}+\\binom{6}{4}+\\binom{5}{5}\n=1+9+28+35+15+1=89,\n$$\nwhich matches the recurrence result.", "answer": "$$\\boxed{89}$$", "id": "1395306"}, {"introduction": "Building on the basic principle of recursion, we now explore situations where tracking a single count is insufficient. Some problems require us to maintain multiple states, such as the parity (even or odd) of a certain element. This practice challenges you to define a relationship not just with a single previous state, but with a system of related states, demonstrating how mutual recurrences can elegantly solve more complex counting problems [@problem_id:1395316].", "problem": "In a digital communication system, messages are encoded as strings of characters from the alphabet $\\{A, B, C\\}$. A special error-checking protocol is interested in the parity of the occurrences of the character 'A'. Let $S_n$ be the number of valid message strings of length $n$ that contain an even number of 'A's. For example, for $n=2$, the strings 'BB', 'BC', 'CB', 'CC', and 'AA' are valid, so $S_2 = 5$. Find a closed-form expression for $S_n$ for any non-negative integer $n$.", "solution": "We consider strings of length $n$ over the alphabet $\\{A,B,C\\}$ and count those with an even number of $A$'s. Let $S_{n}$ denote the count of such strings, and let $T_{n}$ denote the count of strings with an odd number of $A$'s. Clearly, the total number of strings is $3^{n}$, so we have the identity\n$$\nS_{n}+T_{n}=3^{n}.\n$$\nDefine, for each string $s$, the weight $w(s)=(-1)^{a(s)}$, where $a(s)$ is the number of occurrences of $A$ in $s$. Then $w(s)=+1$ if $s$ has an even number of $A$'s and $w(s)=-1$ if $s$ has an odd number of $A$'s. Summing over all strings gives\n$$\n\\sum_{s} w(s) \\;=\\; S_{n}-T_{n}.\n$$\nThis sum factorizes positionwise: at each position, the contribution to the sum over choices is $(-1)$ for $A$, $+1$ for $B$, and $+1$ for $C$, so the per-position sum is $(-1)+1+1=1$. Therefore,\n$$\n\\sum_{s} w(s) \\;=\\; 1^{n}=1,\n$$\nwhich implies\n$$\nS_{n}-T_{n}=1.\n$$\nCombining $S_{n}+T_{n}=3^{n}$ and $S_{n}-T_{n}=1$ and solving for $S_{n}$ yields\n$$\nS_{n}=\\frac{(S_{n}+T_{n})+(S_{n}-T_{n})}{2}=\\frac{3^{n}+1}{2}.\n$$\n\nEquivalently, one may derive a recurrence by appending one character: appending $B$ or $C$ to a valid string preserves even parity, giving $2S_{n}$ strings, and appending $A$ to an odd-parity string (of which there are $3^{n}-S_{n}$) also yields even parity, so\n$$\nS_{n+1}=2S_{n}+(3^{n}-S_{n})=S_{n}+3^{n},\n$$\nwith $S_{0}=1$. Summing this telescopes to\n$$\nS_{n}=1+\\sum_{k=0}^{n-1}3^{k}=1+\\frac{3^{n}-1}{2}=\\frac{3^{n}+1}{2},\n$$\nwhich matches the result above.", "answer": "$$\\boxed{\\frac{3^{n}+1}{2}}$$", "id": "1395316"}, {"introduction": "Recursive definitions are not limited to sequential problems; they are also the natural language for describing complex, nested structures. This final practice moves from linear sequences to hierarchical compositions, exploring the ways an expression can be structured. You will discover a different form of recurrence, one that involves summing over all possible ways to split the problem into two smaller, independent subproblemsâ€”a pattern that appears frequently in computer science and combinatorics [@problem_id:1395328].", "problem": "Consider a non-associative binary operator, denoted by `*`, acting on a set of variables $\\{v_0, v_1, v_2, \\dots\\}$. An expression involving this operator is only well-defined if it is fully parenthesized. For example, for three variables, the expression $v_0 * v_1 * v_2$ is ambiguous, but $(v_0 * v_1) * v_2$ and $v_0 * (v_1 * v_2)$ are two distinct, well-defined expressions.\n\nLet $W(n)$ be the function that counts the number of distinct ways to fully parenthesize a product of $n+1$ variables, $v_0 * v_1 * \\dots * v_n$, for $n \\ge 0$.\n\nCalculate the value of $W(5)$.", "solution": "A fully parenthesized product of $n+1$ variables corresponds bijectively to a full binary tree with $n$ internal nodes (each internal node representing an application of the binary operator and each leaf a variable). Let $W(n)$ denote the number of such structures. The outermost operation splits the sequence into a left block and a right block; if the left subtree has $k$ internal nodes, then the right subtree has $n-1-k$ internal nodes, for $k=0,1,\\dots,n-1$. This yields the Catalan recurrence with base case $W(0)=1$:\n$$\nW(0)=1,\\quad W(n)=\\sum_{k=0}^{n-1} W(k)\\,W(n-1-k)\\quad \\text{for } n\\ge 1.\n$$\nCompute successively:\n$$\nW(1)=W(0)W(0)=1,\n$$\n$$\nW(2)=W(0)W(1)+W(1)W(0)=1+1=2,\n$$\n$$\nW(3)=W(0)W(2)+W(1)W(1)+W(2)W(0)=2+1+2=5,\n$$\n$$\nW(4)=W(0)W(3)+W(1)W(2)+W(2)W(1)+W(3)W(0)=5+2+2+5=14,\n$$\n$$\nW(5)=W(0)W(4)+W(1)W(3)+W(2)W(2)+W(3)W(1)+W(4)W(0)=14+5+4+5+14=42.\n$$\nEquivalently, $W(n)$ is the $n$th Catalan number with closed form\n$$\nW(n)=\\frac{1}{n+1}\\binom{2n}{n},\n$$\nso\n$$\nW(5)=\\frac{1}{6}\\binom{10}{5}=\\frac{1}{6}\\cdot 252=42,\n$$\nconsistent with the recurrence computation.", "answer": "$$\\boxed{42}$$", "id": "1395328"}]}