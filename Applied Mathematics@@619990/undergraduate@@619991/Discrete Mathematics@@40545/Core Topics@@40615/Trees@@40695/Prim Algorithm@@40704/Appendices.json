{"hands_on_practices": [{"introduction": "The best way to understand an algorithm is to apply it. This first practice problem places you in the role of a network designer tasked with connecting a central hub to several peripheral buildings at minimum cost. By modeling this scenario as a weighted graph, you will use Prim's algorithm to iteratively build a Minimum Spanning Tree (MST), developing a practical feel for its greedy, step-by-step approach to finding the most economical network design [@problem_id:1392201].", "id": "1392201", "problem": "A technology company is designing a fiber-optic communication network for its new campus. The network consists of a central server hub and 6 peripheral office buildings. For the purposes of this problem, we can model the hub and the buildings as vertices in a graph. Let the hub be vertex $H$ and the six office buildings be vertices $B_1, B_2, B_3, B_4, B_5, B_6$.\n\nThe network design has two types of possible connections:\n1.  **Direct-to-Hub Links**: These are connections from the central hub $H$ to each office building $B_i$. Due to varying terrain and distance, the cost for these links is not uniform. The cost to connect the hub $H$ to any of the buildings $B_1, B_2, B_3, B_4,$ or $B_5$ is 1 unit of cost per link. The connection to building $B_6$ is more difficult, costing 3 units.\n2.  **Inter-Building Links**: The six office buildings are arranged in a circle. It is possible to lay cable between adjacent buildings. The cost to connect any adjacent pair of buildings (i.e., $(B_1, B_2)$, $(B_2, B_3)$, $(B_3, B_4)$, $(B_4, B_5)$, $(B_5, B_6)$, and $(B_6, B_1)$) is 2 units of cost per link.\n\nThe company wants to build a network that connects all 7 locations (the hub and all 6 buildings) with the minimum possible total cost. What is this minimum total cost?\n\n", "solution": "The problem asks for the minimum cost to connect all 7 locations, which is equivalent to finding the total weight of the Minimum Spanning Tree (MST) for the graph described. The graph has 7 vertices: $V = \\{H, B_1, B_2, B_3, B_4, B_5, B_6\\}$. We can use Prim's algorithm to find the MST.\n\nPrim's algorithm builds an MST by iteratively adding the cheapest edge that connects a vertex in the growing MST to a vertex outside the MST.\n\nLet $S$ be the set of vertices already included in the MST, and let $T$ be the total cost of the MST.\n\n**Step 1: Initialization**\nWe can start the algorithm from any vertex. Let's choose the central hub, $H$.\nInitialize $S = \\{H\\}$ and $T = 0$.\n\n**Step 2: Iterative Construction**\nWe look for the minimum-weight edge connecting a vertex in $S$ to a vertex in $V \\setminus S$.\n\n**Iteration 1:**\nThe edges connecting $H \\in S$ to vertices in $V \\setminus S$ are:\n- $(H, B_1)$, weight 1\n- $(H, B_2)$, weight 1\n- $(H, B_3)$, weight 1\n- $(H, B_4)$, weight 1\n- $(H, B_5)$, weight 1\n- $(H, B_6)$, weight 3\n\nThe minimum weight is 1. We can choose any of the first five edges. Let's choose $(H, B_1)$.\n- Add edge $(H, B_1)$ to the MST.\n- Update $S = \\{H, B_1\\}$.\n- Update $T = 0 + 1 = 1$.\n\n**Iteration 2:**\nThe edges connecting $S=\\{H, B_1\\}$ to $V \\setminus S = \\{B_2, B_3, B_4, B_5, B_6\\}$ are:\n- From $H$: $(H, B_2)$, w=1; $(H, B_3)$, w=1; $(H, B_4)$, w=1; $(H, B_5)$, w=1; $(H, B_6)$, w=3.\n- From $B_1$: $(B_1, B_2)$, w=2; $(B_1, B_6)$, w=2.\n\nThe minimum weight among these is 1. We choose one of the direct-to-hub links, for example, $(H, B_2)$.\n- Add edge $(H, B_2)$ to the MST.\n- Update $S = \\{H, B_1, B_2\\}$.\n- Update $T = 1 + 1 = 2$.\n\n**Iterations 3, 4, 5:**\nWe continue this process. The cheapest available edges are always the remaining direct-to-hub links of weight 1.\n- **Iteration 3:** Add edge $(H, B_3)$. $S = \\{H, B_1, B_2, B_3\\}$, $T = 2 + 1 = 3$.\n- **Iteration 4:** Add edge $(H, B_4)$. $S = \\{H, B_1, B_2, B_3, B_4\\}$, $T = 3 + 1 = 4$.\n- **Iteration 5:** Add edge $(H, B_5)$. $S = \\{H, B_1, B_2, B_3, B_4, B_5\\}$, $T = 4 + 1 = 5$.\n\nAfter 5 iterations, we have added all five hub links of weight 1. The vertices $H, B_1, B_2, B_3, B_4, B_5$ are all connected.\n\n**Iteration 6:**\nNow, $S = \\{H, B_1, B_2, B_3, B_4, B_5\\}$ and the only vertex not in the MST is $B_6$. We need to find the cheapest edge connecting a vertex in $S$ to $B_6$. The possible edges are:\n- From $H$: $(H, B_6)$, weight 3.\n- From an adjacent building in $S$:\n    - $(B_1, B_6)$, weight 2.\n    - $(B_5, B_6)$, weight 2.\n\nComparing the weights $\\{3, 2, 2\\}$, the minimum is 2. We can choose either $(B_1, B_6)$ or $(B_5, B_6)$. Let's choose $(B_5, B_6)$.\n- Add edge $(B_5, B_6)$ to the MST.\n- Update $S = \\{H, B_1, B_2, B_3, B_4, B_5, B_6\\}$.\n- Update $T = 5 + 2 = 7$.\n\n**Step 3: Termination**\nAll 7 vertices are now in the set $S$. The algorithm terminates. The MST consists of the five direct-to-hub links of weight 1 ($(H, B_1)$ through $(H, B_5)$) and one inter-building link of weight 2 (either $(B_1, B_6)$ or $(B_5, B_6)$).\n\nThe total minimum cost is the sum of the weights of the edges in the MST:\n$T = (1+1+1+1+1) + 2 = 5 + 2 = 7$.\n\nAlternatively, using Kruskal's algorithm, we would sort all edges by weight and add them if they don't form a cycle:\n1.  Add the 5 edges of weight 1: $(H, B_1), ..., (H, B_5)$. Cost = 5. This forms one component $\\{H, B_1, ..., B_5\\}$ and a separate component $\\{B_6\\}$.\n2.  Next, consider edges of weight 2. To connect the component $\\{B_6\\}$ to the main component, we can use edge $(B_1, B_6)$ or $(B_5, B_6)$, both of weight 2. Adding one of them connects all vertices. For instance, add $(B_5, B_6)$. Cost becomes $5+2=7$. All vertices are now connected. Any further edge additions would create a cycle. This confirms the result.\n\nThe minimum total cost to connect all locations is 7 units.", "answer": "$$\\boxed{7}$$"}, {"introduction": "It is crucial to understand not only how an algorithm works, but *why* it is correct. This exercise challenges you with a plausible but flawed modification of Prim's algorithm, which makes a greedy choice based only on the last vertex added to the tree. By comparing the result of this incorrect procedure to the true MST generated by Prim's algorithm, you will uncover the importance of the cut property and appreciate why selecting the minimal edge from the *entire* growing tree is essential for guaranteeing optimality [@problem_id:1528057].", "id": "1528057", "problem": "A computer science student, Alex, is studying graph algorithms and comes up with a modified procedure for finding a spanning tree in a connected, undirected, weighted graph. Alex believes this algorithm will always find a Minimum Spanning Tree (MST).\n\n**Alex's Algorithm:**\n1.  Initialize a tree, $T$, with an arbitrary starting vertex, $v_0$.\n2.  Let $v_{last}$ be the vertex most recently added to $T$.\n3.  Find the edge $(v_{last}, u)$ that has the minimum weight among all edges connecting $v_{last}$ to a vertex $u$ not yet in $T$.\n4.  Add this edge and the vertex $u$ to the tree $T$.\n5.  Repeat steps 2-4 until all vertices from the graph are included in $T$.\n\nYour task is to analyze the performance of Alex's algorithm on a specific graph.\n\nConsider an undirected, weighted graph $G$ with a set of vertices $V = \\{A, B, C, D\\}$ and a set of edges $E$ with the following weights:\n- $w(A,B) = 1$\n- $w(A,C) = 2$\n- $w(C,D) = 3$\n- $w(B,D) = 4$\n- $w(A,D) = 5$\n\nAssuming the process starts at vertex A for both Alex's algorithm and the standard Prim's algorithm for finding a true MST, calculate the total weight of the spanning tree produced by Alex's algorithm and the total weight of the true Minimum Spanning Tree.\n\nPresent your answer as a pair of numbers, (Weight from Alex's Algorithm, Weight of MST), using the LaTeX `pmatrix` environment for a row matrix.\n\n", "solution": "We analyze Alex's algorithm first. Initialize the tree with vertex $A$, so $T=\\{A\\}$ and $v_{\\text{last}}=A$. Among edges incident to $A$ that go to vertices not yet in $T$, the candidates are $(A,B)$ with weight $1$, $(A,C)$ with weight $2$, and $(A,D)$ with weight $5$. The minimum is $(A,B)$, so we add edge $(A,B)$ and vertex $B$. Now $T=\\{A,B\\}$ and $v_{\\text{last}}=B$. From $B$ to vertices not yet in $T$, the only candidate is $(B,D)$ with weight $4$ (since $(B,A)$ goes to an already included vertex and there is no edge $(B,C)$). We add $(B,D)$ and $D$, so $T=\\{A,B,D\\}$ and $v_{\\text{last}}=D$. From $D$ to vertices not yet in $T$, the candidates are $(D,C)$ with weight $3$, $(D,A)$ with weight $5$, and $(D,B)$ with weight $4$, but only $(D,C)$ reaches a new vertex. We add $(D,C)$ and $C$. All vertices are now included. The total weight of Alex's tree is therefore\n$$\nw_{\\text{Alex}}=w(A,B)+w(B,D)+w(D,C)=1+4+3=8.\n$$\n\nNow apply Prim's algorithm starting at $A$. Initialize $T=\\{A\\}$. Among all edges crossing from $T$ to $V\\setminus T$, the candidates are $(A,B)$ with weight $1$, $(A,C)$ with weight $2$, and $(A,D)$ with weight $5$. The minimum is $(A,B)$ with weight $1$, so add $B$ and the edge $(A,B)$. Now $T=\\{A,B\\}$. The edges crossing from $T$ to $V\\setminus T=\\{C,D\\}$ are $(A,C)$ with weight $2$, $(A,D)$ with weight $5$, and $(B,D)$ with weight $4$. The minimum is $(A,C)$ with weight $2$, so add $C$ and edge $(A,C)$. Now $T=\\{A,B,C\\}$. The edges crossing to $V\\setminus T=\\{D\\}$ are $(C,D)$ with weight $3$, $(B,D)$ with weight $4$, and $(A,D)$ with weight $5$. The minimum is $(C,D)$ with weight $3$, so add $D$ and edge $(C,D)$. The total weight of the MST found by Prim's algorithm is\n$$\nw_{\\text{MST}}=w(A,B)+w(A,C)+w(C,D)=1+2+3=6.\n$$\n\nTherefore, the pair of total weights is $\\left(8,6\\right)$, reported as a row matrix using the $\\mathrm{pmatrix}$ environment.", "answer": "$$\\boxed{\\begin{pmatrix}8 & 6\\end{pmatrix}}$$"}, {"introduction": "A Minimum Spanning Tree is designed to minimize the total weight of all edges in a spanning tree, but does this guarantee the shortest path between any two individual vertices? This exercise directly addresses this common misconception. You will first construct an MST for a given network and then compare the path length between two specific nodes within that MST to the absolute shortest path available in the original graph, clarifying the distinct objectives of MST algorithms versus shortest-path algorithms like Dijkstra's [@problem_id:1392177].", "id": "1392177", "problem": "A municipal government is planning to install a fiber-optic network to connect six key administrative buildings, labeled A, B, C, D, E, and F. The cost, in tens of thousands of dollars, to lay a direct cable between any two buildings has been calculated. To ensure all buildings are connected at the lowest possible installation cost, the city will build a network corresponding to a Minimum Spanning Tree (MST) of the potential connections.\n\nThe graph of all possible connections $G$ has vertices $V = \\{A, B, C, D, E, F\\}$, and the weighted, undirected edges are given as follows:\n- (A, B) with weight 3\n- (A, E) with weight 10\n- (A, F) with weight 14\n- (B, C) with weight 2\n- (B, D) with weight 5\n- (C, D) with weight 8\n- (C, E) with weight 4\n- (E, F) with weight 6\n\nOnce the MST network is constructed, we are interested in the communication path between building A and building F.\nLet $W_{MST}$ be the total cost of the path between A and F *using only a path within the constructed MST network*.\nLet $W_{SP}$ be the cost of the absolute shortest path between A and F in the original graph $G$ (considering all available edges).\n\nCalculate the values of $W_{MST}$ and $W_{SP}$. Provide your answer as an ordered pair $(W_{MST}, W_{SP})$.\n\n", "solution": "The problem asks for two quantities: the weight of the path between vertices A and F in the Minimum Spanning Tree (MST) of the given graph $G$, denoted as $W_{MST}$, and the weight of the shortest path between A and F in the original graph $G$, denoted as $W_{SP}$.\n\n**Part 1: Finding the Minimum Spanning Tree (MST)**\n\nWe can find the MST of the graph $G$ using Prim's algorithm. Let's start the algorithm at vertex A. We will maintain a set of vertices, $S$, that are already in the MST. Initially, $S = \\emptyset$. We will also keep track of the edges in our MST.\n\n1.  **Initialization**: Start with an arbitrary vertex. Let's choose A. Let the set of visited vertices be $S = \\{A\\}$. The set of edges in the MST is empty.\n\n2.  **Iteration 1**: Find the cheapest edge connecting a vertex in $S$ to a vertex outside $S$. The edges from A are (A, B) with weight 3, (A, E) with weight 10, and (A, F) with weight 14. The minimum weight edge is (A, B) with weight 3.\n    - Add edge (A, B) to the MST.\n    - Add vertex B to $S$. Now $S = \\{A, B\\}$.\n    - MST Edges: `{(A, B)}`\n\n3.  **Iteration 2**: Find the cheapest edge connecting a vertex in $\\{A, B\\}$ to a vertex in $\\{C, D, E, F\\}$. The candidate edges are:\n    - From A: (A, E) weight 10, (A, F) weight 14.\n    - From B: (B, C) weight 2, (B, D) weight 5.\n    The minimum weight edge is (B, C) with weight 2.\n    - Add edge (B, C) to the MST.\n    - Add vertex C to $S$. Now $S = \\{A, B, C\\}$.\n    - MST Edges: `{(A, B), (B, C)}`\n\n4.  **Iteration 3**: Find the cheapest edge from $\\{A, B, C\\}$ to $\\{D, E, F\\}$. Candidate edges are:\n    - From A: (A, E) weight 10, (A, F) weight 14.\n    - From B: (B, D) weight 5.\n    - From C: (C, D) weight 8, (C, E) weight 4.\n    The minimum weight edge is (C, E) with weight 4.\n    - Add edge (C, E) to the MST.\n    - Add vertex E to $S$. Now $S = \\{A, B, C, E\\}$.\n    - MST Edges: `{(A, B), (B, C), (C, E)}`\n\n5.  **Iteration 4**: Find the cheapest edge from $\\{A, B, C, E\\}$ to $\\{D, F\\}$. Candidate edges are:\n    - From A: (A, F) weight 14.\n    - From B: (B, D) weight 5.\n    - From C: (C, D) weight 8.\n    - From E: (E, F) weight 6.\n    The minimum weight edge is (B, D) with weight 5.\n    - Add edge (B, D) to the MST.\n    - Add vertex D to $S$. Now $S = \\{A, B, C, E, D\\}$.\n    - MST Edges: `{(A, B), (B, C), (C, E), (B, D)}`\n\n6.  **Iteration 5**: Find the cheapest edge from $\\{A, B, C, E, D\\}$ to $\\{F\\}$. Candidate edges are:\n    - From A: (A, F) weight 14.\n    - From E: (E, F) weight 6.\n    The minimum weight edge is (E, F) with weight 6.\n    - Add edge (E, F) to the MST.\n    - Add vertex F to $S$. Now $S = \\{A, B, C, D, E, F\\}$. All vertices are in the set.\n    - MST Edges: `{(A, B), (B, C), (C, E), (B, D), (E, F)}`\n\nThe algorithm terminates. The edges in the MST are (A, B), (B, C), (C, E), (B, D), and (E, F).\n\n**Part 2: Calculating $W_{MST}$**\n\nNow we find the path between A and F using only the edges of the MST. By inspecting the MST edges, the unique path from A to F is A $\\rightarrow$ B $\\rightarrow$ C $\\rightarrow$ E $\\rightarrow$ F.\nThe total weight of this path is the sum of the weights of its edges:\n$W_{MST} = \\text{weight}(A, B) + \\text{weight}(B, C) + \\text{weight}(C, E) + \\text{weight}(E, F)$\n$W_{MST} = 3 + 2 + 4 + 6 = 15$.\n\n**Part 3: Calculating $W_{SP}$**\n\nNext, we find the shortest path between A and F in the original graph $G$. We can use Dijkstra's algorithm or inspect the possible paths.\n\nLet's list the relevant paths from A to F and their weights:\n-   **Path 1**: The direct edge (A, F). Weight = 14.\n-   **Path 2**: The path found in the MST: A $\\rightarrow$ B $\\rightarrow$ C $\\rightarrow$ E $\\rightarrow$ F. Weight = 15.\n-   **Path 3**: Another path via vertex E: A $\\rightarrow$ E $\\rightarrow$ F. Weight = weight(A, E) + weight(E, F) = 10 + 6 = 16.\n\nComparing the weights of these paths (14, 15, 16), the minimum weight is 14. Any other path, such as one involving vertex D, would be even longer. For instance, A $\\rightarrow$ B $\\rightarrow$ D $\\rightarrow$ C $\\rightarrow$ E $\\rightarrow$ F has weight $3+5+8+4+6 = 26$.\nThus, the shortest path in the original graph is the direct edge (A, F).\nThe weight of the shortest path is $W_{SP} = 14$.\n\n**Conclusion**\n\nWe have calculated both values:\n-   The cost of the path in the MST is $W_{MST} = 15$.\n-   The cost of the shortest path in the original graph is $W_{SP} = 14$.\n\nThe final answer is the ordered pair $(15, 14)$.", "answer": "$$\\boxed{\\begin{pmatrix}15 & 14\\end{pmatrix}}$$"}]}