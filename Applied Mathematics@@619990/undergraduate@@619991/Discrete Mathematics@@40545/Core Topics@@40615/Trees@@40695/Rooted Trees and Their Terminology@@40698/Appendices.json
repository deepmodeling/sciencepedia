{"hands_on_practices": [{"introduction": "Rooted trees are not just abstract concepts; they are fundamental data structures in computer science. This first exercise bridges theory and practice by introducing the parent array, a common and efficient way to represent a tree's structure in memory. You will practice a core skill: traversing the tree's hierarchy to calculate the depth of each node, a key property for analyzing network layouts and data dependencies. [@problem_id:1397558]", "problem": "In the design of a hierarchical data processing system, a network of $n$ nodes, indexed from $0$ to $n-1$, is structured as a rooted tree. The parent of any non-root node $i$ is given by $P[i]$, and the single root node $r$ is identified by the unique value $P[r] = -1$.\n\nThe \"depth\" of a node is defined as the number of edges on the unique path from the root node to that node. Consequently, the root node itself has a depth of $0$.\n\nA key performance metric for this network, called the \"Hierarchy Imbalance Index\" ($I$), is defined as the sum of the squares of the depths of all nodes in the system. That is, if $d(i)$ is the depth of node $i$, the index is given by $I = \\sum_{i=0}^{n-1} (d(i))^2$.\n\nConsider a system with $n=12$ nodes. The tree structure is specified by the parent array $P$:\n$P = [1, 4, 10, 1, -1, 3, 7, 9, 9, 4, 4, 8]$\n\nCalculate the Hierarchy Imbalance Index for this system.", "solution": "We are given a rooted tree on nodes indexed $0$ to $11$ with parent array $P$, where the root $r$ is the unique index with $P[r] = -1$. From $P[4] = -1$ we identify the root as $r=4$, hence $d(4)=0$. For any non-root node $i$, the depth satisfies the recurrence $d(i) = d(P[i]) + 1$.\n\nUsing $P = [1, 4, 10, 1, -1, 3, 7, 9, 9, 4, 4, 8]$:\n- Children of $4$ are $1, 9, 10$; therefore $d(1)=1$, $d(9)=1$, $d(10)=1$.\n- Then:\n$$d(0) = d(1)+1 = 2,\\quad d(3) = d(1)+1 = 2,$$\n$$d(2) = d(10)+1 = 2,$$\n$$d(7) = d(9)+1 = 2,\\quad d(8) = d(9)+1 = 2,$$\n$$d(5) = d(3)+1 = 3,\\quad d(6) = d(7)+1 = 3,\\quad d(11) = d(8)+1 = 3.$$\n\nCollecting depths:\n$$d(4)=0,$$\n$$d(1)=d(9)=d(10)=1,$$\n$$d(0)=d(2)=d(3)=d(7)=d(8)=2,$$\n$$d(5)=d(6)=d(11)=3.$$\n\nThe Hierarchy Imbalance Index is $I = \\sum_{i=0}^{11} d(i)^{2}$. Grouping by depth:\n- One node at depth $0$: contribution $0$.\n- Three nodes at depth $1$: contribution $3 \\cdot 1^{2} = 3$.\n- Five nodes at depth $2$: contribution $5 \\cdot 2^{2} = 20$.\n- Three nodes at depth $3$: contribution $3 \\cdot 3^{2} = 27$.\n\nThus,\n$$I = 0 + 3 + 20 + 27 = 50.$$", "answer": "$$\\boxed{50}$$", "id": "1397558"}, {"introduction": "While the definitions of rooted trees are general, certain specific types of trees have powerful, predictable properties. This problem focuses on the full binary tree, where every node has either zero or two children, a structure common in everything from search algorithms to file systems. You will apply a fundamental theorem connecting the number of internal nodes and leaves to solve a practical problem, demonstrating how theoretical insights can directly inform real-world design and cost analysis. [@problem_id:1397591]", "problem": "A technology company uses a specific hierarchical data structure to organize its distributed computing tasks. This structure is modeled as a rooted tree where each node represents a task. In this tree, a node is called an **internal node** if it has at least one child, and a **leaf node** if it has no children. The company's design mandates that this tree must be a **full binary tree**, which is a tree where every node has either zero or exactly two children.\n\nThe tasks are run on two different types of virtual machines. Internal nodes, which perform computation and routing, run on 'Processing' machines. Leaf nodes, which represent final outputs or data storage points, run on 'Storage' machines. The daily operational cost for a single 'Processing' machine is $350, and for a single 'Storage' machine is $120.\n\nIf the data structure is designed to have exactly 125 internal nodes, what is the total daily operational cost for all the machines required to run this entire task tree? Express your answer in dollars.", "solution": "The problem asks for the total daily operational cost of a hierarchical task structure modeled as a full binary tree. The cost is determined by the number of internal nodes and leaf nodes.\n\nFirst, let's define the variables based on the information given in the problem statement:\n- Let $I$ be the number of internal nodes. We are given $I = 125$.\n- Let $L$ be the number of leaf nodes. This value is currently unknown.\n- Let $C_P$ be the cost of a 'Processing' machine for an internal node. We are given $C_P = 350$ dollars.\n- Let $C_S$ be the cost of a 'Storage' machine for a leaf node. We are given $C_S = 120$ dollars.\n\nThe total daily operational cost, let's call it $C_{\\text{total}}$, can be expressed as the sum of the costs for all internal nodes and all leaf nodes:\n$$C_{\\text{total}} = (I \\times C_P) + (L \\times C_S)$$\n\nTo find $C_{\\text{total}}$, we first need to determine the value of $L$. The problem states the tree is a **full binary tree**. For any non-empty full binary tree, there is a fundamental relationship between the number of internal nodes ($I$) and the number of leaf nodes ($L$). This relationship is $L = I + 1$.\n\nWe can derive this property as follows. Let $n$ be the total number of nodes in the tree. By definition, every node is either an internal node or a leaf node, so $n = I + L$.\nAnother way to count the nodes is by considering the parent-child relationships. Every node in the tree, except for the root, has exactly one parent. Therefore, the total number of children in the tree is $n-1$.\nIn a full binary tree, only internal nodes have children, and each internal node has exactly two children. So, the total number of children can also be expressed as $2 \\times I$.\nBy equating the two expressions for the total number of children, we get:\n$$n - 1 = 2I$$\nNow, we substitute $n = I + L$ into this equation:\n$$(I + L) - 1 = 2I$$\nSubtracting $I$ from both sides gives:\n$$L - 1 = I$$\n$$L = I + 1$$\nThis confirms the relationship for any non-empty full binary tree.\n\nNow we can use this relationship to find the number of leaf nodes in our specific tree. Given $I = 125$:\n$$L = 125 + 1 = 126$$\n\nSo, the data structure has 125 internal nodes and 126 leaf nodes. We can now calculate the total daily cost using the cost formula:\n$$C_{\\text{total}} = (I \\times C_P) + (L \\times C_S)$$\nSubstitute the known values:\n$$C_{\\text{total}} = (125 \\times 350) + (126 \\times 120)$$\n\nLet's calculate each part:\nCost for internal nodes:\n$$125 \\times 350 = 43750$$\nCost for leaf nodes:\n$$126 \\times 120 = 15120$$\n\nFinally, sum these costs to find the total cost:\n$$C_{\\text{total}} = 43750 + 15120 = 58870$$\n\nThe total daily operational cost for the entire task tree is $58870. The problem asks for the answer to be expressed in dollars, so the value is 58870.", "answer": "$$\\boxed{58870}$$", "id": "1397591"}, {"introduction": "Understanding the basic properties of trees allows us to tackle more complex design challenges. This final practice poses an optimization puzzle: how do you construct a tree that meets specific constraints on size and height, while maximizing the number of leaves? Solving this requires you to think critically about the trade-offs between a tree's depth and its breadth, a core concept in designing efficient hierarchical structures. [@problem_id:1397568]", "problem": "In the field of data science, hierarchical data is often modeled using a structure known as a rooted tree. The formal definitions for the properties of such a tree are as follows:\n\n- A **rooted tree** is a collection of nodes called **vertices** connected by directed **edges**, such that there is one specially designated vertex, the **root**, and for every other vertex, there is a unique path of edges leading from the root to it.\n- If an edge exists from vertex $u$ to vertex $v$, $u$ is called the **parent** of $v$, and $v$ is a **child** of $u$.\n- A vertex that has no children is called a **leaf**. A vertex that has at least one child is called an **internal vertex**.\n- The **level** of a vertex is the number of edges in the unique path from the root to that vertex. The root is at level 0.\n- The **height** of a rooted tree is the maximum level of any vertex in the tree.\n\nConsider a specific rooted tree that is known to have exactly 20 vertices and a height of 5. What is the maximum possible number of leaves this tree can have?", "solution": "Let $N$ be the total number of vertices, $h$ the height, $L$ the number of leaves, and $I$ the number of internal vertices. For any rooted tree,\n$$\nN = L + I.\n$$\nGiven $h=5$, there must exist a path of length $5$ edges from the root to some vertex, i.e., vertices at levels $0,1,2,3,4,5$. The vertices at levels $0$ through $4$ each have at least one child (the next vertex on the path), so they are internal. Hence,\n$$\nI \\geq 5.\n$$\nWith $N=20$, this implies\n$$\nL = N - I \\leq 20 - 5 = 15.\n$$\nTo show this bound is attainable, construct a path of length $5$ from the root (levels $0$ to $5$), which uses $6$ vertices. The vertices at levels $0$ to $4$ are internal, and the vertex at level $5$ is a leaf. Attach each of the remaining $20 - 6 = 14$ vertices as a single child to any of the internal vertices at levels $0$ to $4$ (e.g., all to the vertex at level $4$). These added vertices are leaves at levels at most $5$, so the height remains $5$, and no new internal vertices are created beyond the existing $5$. Thus $L=1+14=15$ is achieved.\n\nTherefore, the maximum possible number of leaves is $15$.", "answer": "$$\\boxed{15}$$", "id": "1397568"}]}