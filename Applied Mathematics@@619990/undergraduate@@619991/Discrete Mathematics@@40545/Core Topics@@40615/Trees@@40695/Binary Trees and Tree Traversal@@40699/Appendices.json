{"hands_on_practices": [{"introduction": "A binary tree with unique node labels can be uniquely reconstructed if we know its in-order traversal and either its pre-order or post-order traversal. This exercise puts that core principle into practice, challenging you to deduce a tree’s structure from its given traversal sequences [@problem_id:1352772]. Mastering this fundamental skill is essential for understanding how tree data is represented and manipulated in various algorithms.", "problem": "A non-empty binary tree is defined by its unique node traversals. The post-order traversal of a specific binary tree with 7 nodes, labeled with unique characters, is given by the sequence `[D, E, B, F, G, C, A]`. The in-order traversal of the same tree is given by the sequence `[D, B, E, A, F, C, G]`.\n\nBased on these two traversals, determine the in-order traversal of the right subtree of the root node.\n\nSelect the correct sequence from the options below.\n\nA. `F, C, G`\n\nB. `F, G, C`\n\nC. `C, F, G`\n\nD. `D, B, E`\n\nE. `G, C, F`", "solution": "We are given the post-order traversal $[D,E,B,F,G,C,A]$ and the in-order traversal $[D,B,E,A,F,C,G]$ of the same binary tree with unique node labels.\n\nBy the definition of post-order traversal (left, right, root), the last element in the post-order sequence is the root. Therefore, the root is $A$.\n\nBy the definition of in-order traversal (left, root, right), locating $A$ in the in-order sequence $[D,B,E,A,F,C,G]$ partitions the tree into:\n- Left subtree in-order: $[D,B,E]$\n- Right subtree in-order: $[F,C,G]$\n\nThe question asks for the in-order traversal of the right subtree of the root, which we have identified as $[F,C,G]$. To fully confirm the structure: in the original post-order sequence, the nodes of the right subtree appear immediately before the root $A$. These nodes are $[F,G,C]$. The last element of this sub-sequence, $C$, must be the root of the right subtree. Now, looking at the in-order sequence for the right subtree, $[F,C,G]$, with $C$ as the root, the left part is $[F]$ and the right part is $[G]$. This structure is consistent.\n\nThe in-order traversal of the right subtree of the root is `F, C, G`. This corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1352772"}, {"introduction": "How do the special properties of a data structure change our problem-solving approach? This problem introduces the Binary Search Tree (BST), where an inherent ordering constraint allows you to derive a tree's full structure from just its pre-order traversal—a feat impossible for a general binary tree [@problem_id:1352792]. This practice highlights the analytical power we gain when working with structured data.", "problem": "A Binary Search Tree (BST) is a rooted binary tree data structure with the key of each internal node being greater than all keys in the respective node's left subtree and less than the ones in its right subtree. The three most common depth-first traversal methods for a binary tree are:\n- Pre-order traversal: Visit the root, traverse the left subtree, then traverse the right subtree.\n- In-order traversal: Traverse the left subtree, visit the root, then traverse the right subtree.\n- Post-order traversal: Traverse the left subtree, traverse the right subtree, then visit the root.\n\nYou are given the sequence of node values obtained from a pre-order traversal of a particular BST. The sequence is: `[30, 20, 10, 25, 40, 35, 45]`.\n\nWithout constructing the tree visually, determine the correct post-order traversal sequence for this BST.\n\nSelect the correct sequence from the options below.\n\nA. `10, 25, 20, 35, 45, 40, 30`\n\nB. `10, 20, 25, 30, 35, 40, 45`\n\nC. `45, 35, 40, 25, 10, 20, 30`\n\nD. `35, 45, 40, 10, 25, 20, 30`", "solution": "Use the BST property and traversal definitions:\n\n1) In a BST, all keys in the left subtree of the root are less than the root, and all keys in the right subtree are greater. In a pre-order traversal, the first element is the root, followed by the pre-order of the left subtree, then the pre-order of the right subtree.\n\nGiven the pre-order sequence $[30,20,10,25,40,35,45]$, the root is $30$. Partition the remaining elements into the left and right subtrees by comparing with $30$:\n$$\\text{Left subsequence: }[20,10,25]\\quad(\\text{all }<30),\\qquad \\text{Right subsequence: }[40,35,45]\\quad(\\text{all }>30).$$\n\n2) Recurse on the left subsequence $[20,10,25]$. The root is $20$. Partition by comparing with $20$:\n$$\\text{Left of }20:\\ [10],\\qquad \\text{Right of }20:\\ [25].$$\nThus the left subtree has root $20$ with left child $10$ and right child $25$.\n\n3) Recurse on the right subsequence $[40,35,45]$. The root is $40$. Partition by comparing with $40$:\n$$\\text{Left of }40:\\ [35],\\qquad \\text{Right of }40:\\ [45].$$\nThus the right subtree has root $40$ with left child $35$ and right child $45$.\n\n4) Compute the post-order (left, right, root):\n- Left subtree post-order: visit $[10]$, then $[25]$, then $20$, giving $[10,25,20]$.\n- Right subtree post-order: visit $[35]$, then $[45]$, then $40$, giving $[35,45,40]$.\n- Whole tree post-order: left $[10,25,20]$, right $[35,45,40]$, then root $30$, yielding\n$$[10,25,20,35,45,40,30].$$\n\n5) Compare with the options: this matches option A.", "answer": "$$\\boxed{A}$$", "id": "1352792"}, {"introduction": "Now, let's apply our knowledge to a practical \"debugging\" scenario. A key property of a Binary Search Tree is that its in-order traversal yields a perfectly sorted list, meaning any deviation from this order signals a structural error. This exercise challenges you to analyze a corrupted sequence to pinpoint a data swap, demonstrating how theoretical properties are used to maintain data integrity in real-world systems [@problem_id:1352833].", "problem": "A data acquisition system is designed to log a series of distinct measurements. The system stores these measurements as nodes in a Binary Search Tree (BST), a data structure where for any given node, all values in its left subtree are smaller than the node's value, and all values in its right subtree are larger. To export the data, the system performs an inorder traversal, which, for a correctly formed BST, should produce a sequence of values in strictly ascending order.\n\nDuring a routine data integrity check, the system outputs the following sequence, which is known to be the result of an inorder traversal of a BST where exactly two nodes have had their values swapped due to a memory glitch:\n$$\nS = [22, 35, 94, 48, 56, 65, 71, 89, 41, 99, 105]\n$$\nYour task is to identify the two values that were swapped. Represent your answer as a $1 \\times 2$ matrix, with the smaller number appearing first. For example, if you determine the swapped numbers are 5 and 10, your answer should be formatted as $\\begin{pmatrix} 5 & 10 \\end{pmatrix}$.", "solution": "For a valid Binary Search Tree (BST), an inorder traversal yields a strictly increasing sequence. If exactly two node values are swapped, then in the inorder sequence there will be either one or two index positions where the order condition fails, namely positions where $S_{i} > S_{i+1}$. If the swapped elements are non-adjacent in the correct order, two such violations occur; if they are adjacent, only one occurs.\n\nGiven $S = [22, 35, 94, 48, 56, 65, 71, 89, 41, 99, 105]$, we scan for indices $i$ with $S_{i} > S_{i+1}$:\n- Compare $22 < 35$ and $35 < 94$: no violation.\n- At $94$ and $48$, we have $94 > 48$: first violation. Record the larger preceding element as a candidate $x = 94$.\n- Continue: $48 < 56 < 65 < 71 < 89$: no violations.\n- At $89$ and $41$, we have $89 > 41$: second violation. Record the smaller following element as the other candidate $y = 41$.\n- Continue: $41 < 99 < 105$: no further violations.\n\nWith two violations, the swapped values are the first violation’s larger element and the second violation’s smaller element, namely $x = 94$ and $y = 41$.\n\nVerification by swapping these two in $S$ gives:\n$$[22, 35, 41, 48, 56, 65, 71, 89, 94, 99, 105],$$\nwhich is strictly increasing, confirming the identification.\n\nTherefore, the swapped values are $41$ and $94$, and the required $1 \\times 2$ matrix with the smaller first is $\\begin{pmatrix} 41 & 94 \\end{pmatrix}$.", "answer": "$$\\boxed{\\begin{pmatrix} 41 & 94 \\end{pmatrix}}$$", "id": "1352833"}]}