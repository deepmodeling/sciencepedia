{"hands_on_practices": [{"introduction": "This first practice is about getting comfortable with the core mechanics of Kruskal's algorithm. We will simulate the initial steps of building a Minimum Spanning Tree (MST) for a network, just as one would in a real-world scenario. This exercise solidifies the two fundamental actions: sorting edges by weight and iteratively adding the cheapest available edge that does not form a cycle [@problem_id:1517280].", "problem": "A technology company is designing a private, encrypted Wide Area Network (WAN) to connect its eight major data centers, labeled DC1 through DC8. The goal is to establish a network topology that connects all data centers, either directly or indirectly, with the minimum possible annual leasing cost for the fiber-optic links. The available point-to-point links and their associated annual costs (in thousands of dollars) are listed below. The list is provided in a pre-sorted order based on another internal metric, not by cost.\n\n*   (DC5, DC7) - Cost: 17\n*   (DC1, DC2) - Cost: 11\n*   (DC3, DC8) - Cost: 20\n*   (DC5, DC6) - Cost: 13\n*   (DC1, DC5) - Cost: 18\n*   (DC2, DC4) - Cost: 15\n*   (DC7, DC8) - Cost: 16\n*   (DC1, DC3) - Cost: 14\n*   (DC3, DC4) - Cost: 12\n*   (DC2, DC6) - Cost: 19\n\nThe network engineering team decides to apply Kruskal's algorithm to determine the optimal set of links to lease. What is the set of links that constitutes the network after the first five links have been successfully added according to the algorithm?\n\nA. `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3), (DC7, DC8)}`\n\nB. `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3), (DC2, DC4)}`\n\nC. `{(DC1, DC2), (DC3, DC4), (DC1, DC3), (DC5, DC7), (DC1, DC5)}`\n\nD. `{(DC3, DC8), (DC2, DC6), (DC1, DC5), (DC5, DC7), (DC7, DC8)}`", "solution": "Kruskal's algorithm constructs a Minimum Spanning Tree (MST) by iteratively selecting the edge with the lowest weight from a list of all available edges, provided that adding the edge does not form a cycle with the edges already selected.\n\nFirst, we must sort all available links (edges) by their cost (weight) in non-decreasing order.\n\nThe provided list is:\n*   (DC5, DC7), Cost: 17\n*   (DC1, DC2), Cost: 11\n*   (DC3, DC8), Cost: 20\n*   (DC5, DC6), Cost: 13\n*   (DC1, DC5), Cost: 18\n*   (DC2, DC4), Cost: 15\n*   (DC7, DC8), Cost: 16\n*   (DC1, DC3), Cost: 14\n*   (DC3, DC4), Cost: 12\n*   (DC2, DC6), Cost: 19\n\nSorting these by cost gives the following ordered list:\n1.  (DC1, DC2), Cost: 11\n2.  (DC3, DC4), Cost: 12\n3.  (DC5, DC6), Cost: 13\n4.  (DC1, DC3), Cost: 14\n5.  (DC2, DC4), Cost: 15\n6.  (DC7, DC8), Cost: 16\n7.  (DC5, DC7), Cost: 17\n8.  (DC1, DC5), Cost: 18\n9.  (DC2, DC6), Cost: 19\n10. (DC3, DC8), Cost: 20\n\nNext, we trace the algorithm. Initially, each data center is in its own disjoint set, representing a forest of eight components: `{DC1}, {DC2}, {DC3}, {DC4}, {DC5}, {DC6}, {DC7}, {DC8}`. The set of selected edges is empty.\n\n**Step 1 (First successful addition):**\nWe consider the lowest-cost edge: (DC1, DC2) with a cost of 11. The data centers DC1 and DC2 are in different sets (`{DC1}` and `{DC2}`). Adding this edge will not create a cycle. So, we add it.\n*   Selected Edges: `{(DC1, DC2)}`\n*   Sets are now: `{{DC1, DC2}, {DC3}, {DC4}, {DC5}, {DC6}, {DC7}, {DC8}}`\n\n**Step 2 (Second successful addition):**\nThe next-lowest-cost edge is (DC3, DC4) with a cost of 12. DC3 and DC4 are in different sets (`{DC3}` and `{DC4}`). We add this edge.\n*   Selected Edges: `{(DC1, DC2), (DC3, DC4)}`\n*   Sets are now: `{{DC1, DC2}, {DC3, DC4}, {DC5}, {DC6}, {DC7}, {DC8}}`\n\n**Step 3 (Third successful addition):**\nThe next edge is (DC5, DC6) with a cost of 13. DC5 and DC6 are in different sets (`{DC5}` and `{DC6}`). We add this edge.\n*   Selected Edges: `{(DC1, DC2), (DC3, DC4), (DC5, DC6)}`\n*   Sets are now: `{{DC1, DC2}, {DC3, DC4}, {DC5, DC6}, {DC7}, {DC8}}`\n\n**Step 4 (Fourth successful addition):**\nThe next edge is (DC1, DC3) with a cost of 14. DC1 is in the set `{DC1, DC2}` and DC3 is in the set `{DC3, DC4}`. Since these are different sets, adding the edge does not create a cycle. We add it and merge the two sets.\n*   Selected Edges: `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3)}`\n*   Sets are now: `{{DC1, DC2, DC3, DC4}, {DC5, DC6}, {DC7}, {DC8}}`\n\n**Step 5 (Cycle detection):**\nThe next edge is (DC2, DC4) with a cost of 15. We check which sets DC2 and DC4 belong to. DC2 is in `{DC1, DC2, DC3, DC4}` and DC4 is also in `{DC1, DC2, DC3, DC4}`. Since they are in the same set, adding this edge would create a cycle (specifically, DC1-DC2-DC4-DC3-DC1). Therefore, we **reject** this edge.\n\n**Step 6 (Fifth successful addition):**\nWe move to the next edge in the sorted list: (DC7, DC8) with a cost of 16. DC7 is in `{DC7}` and DC8 is in `{DC8}`. These are different sets, so we add the edge. This is our fifth successfully added edge.\n*   Selected Edges: `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3), (DC7, DC8)}`\n*   Sets are now: `{{DC1, DC2, DC3, DC4}, {DC5, DC6}, {DC7, DC8}}`\n\nThe process stops here as we were asked for the set of the first five successfully added edges. The resulting set is `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3), (DC7, DC8)}`.\n\nComparing this result with the given options, we find that it matches option A.", "answer": "$$\\boxed{A}$$", "id": "1517280"}, {"introduction": "A crucial part of Kruskal's algorithm is knowing when *not* to add an edge. This practice focuses squarely on the concept of cycle detection, which is the decision-making core of the algorithm. By identifying the first edge that must be discarded, you will sharpen your understanding of how the algorithm maintains a forest of components and cleverly avoids creating loops [@problem_id:1379932].", "problem": "A telecommunications company is planning to lay a network of fiber optic cables to connect a set of data centers. The company has identified 7 data centers, labeled A, B, C, D, E, F, and G. The potential cable links between these centers and their associated installation costs (in thousands of dollars) have been determined. To minimize the total installation cost while ensuring all centers are connected, the engineering team uses Kruskal's algorithm to find a Minimum Spanning Tree (MST).\n\nThe list of all potential cable links has been sorted by cost in non-decreasing order. Your task is to apply Kruskal's algorithm to this list and identify the first cable link that the algorithm would discard because its inclusion would form a cycle.\n\nThe sorted list of potential links, labeled `e1` through `e9`, is as follows:\n- `e1`: (A, B), cost 2\n- `e2`: (C, D), cost 3\n- `e3`: (E, F), cost 4\n- `e4`: (A, C), cost 5\n- `e5`: (G, A), cost 6\n- `e6`: (B, D), cost 7\n- `e7`: (F, G), cost 8\n- `e8`: (E, G), cost 9\n- `e9`: (D, F), cost 10\n\nWhich of the following links is the first one to be discarded by Kruskal's algorithm?\n\nA. `e3`: (E, F), cost 4\n\nB. `e4`: (A, C), cost 5\n\nC. `e5`: (G, A), cost 6\n\nD. `e6`: (B, D), cost 7\n\nE. `e7`: (F, G), cost 8", "solution": "Kruskal's algorithm processes edges in non-decreasing order of weight, adding an edge if and only if its endpoints are in different connected components; an edge is discarded precisely when its endpoints already lie in the same component, since its inclusion would form a cycle.\n\nInitialize with all vertices isolated: components are $ \\{A\\}, \\{B\\}, \\{C\\}, \\{D\\}, \\{E\\}, \\{F\\}, \\{G\\} $.\n\nProcess edges in the given sorted order:\n1) $e_{1} = (A,B)$: $A$ and $B$ are in different components, so include $e_{1}$. Components become $ \\{A,B\\}, \\{C\\}, \\{D\\}, \\{E\\}, \\{F\\}, \\{G\\} $.\n2) $e_{2} = (C,D)$: $C$ and $D$ are in different components, so include $e_{2}$. Components become $ \\{A,B\\}, \\{C,D\\}, \\{E\\}, \\{F\\}, \\{G\\} $.\n3) $e_{3} = (E,F)$: $E$ and $F$ are in different components, so include $e_{3}$. Components become $ \\{A,B\\}, \\{C,D\\}, \\{E,F\\}, \\{G\\} $.\n4) $e_{4} = (A,C)$: $A \\in \\{A,B\\}$ and $C \\in \\{C,D\\}$ are in different components, so include $e_{4}$. Components merge to $ \\{A,B,C,D\\}, \\{E,F\\}, \\{G\\} $.\n5) $e_{5} = (G,A)$: $G \\in \\{G\\}$ and $A \\in \\{A,B,C,D\\}$ are in different components, so include $e_{5}$. Components become $ \\{A,B,C,D,G\\}, \\{E,F\\} $.\n6) $e_{6} = (B,D)$: $B, D \\in \\{A,B,C,D,G\\}$ are already in the same component. Adding $e_{6}$ would create a cycle, so $e_{6}$ is the first edge discarded by Kruskal's algorithm.\n\nTherefore, the first discarded link is $e_{6}$, which corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1379932"}, {"introduction": "Let's move from executing the algorithm from scratch to leveraging its powerful underlying principles for a more efficient solution. This problem explores the cycle property of MSTs, providing a shortcut for updating an existing network when a new, cheaper connection becomes available. This demonstrates how a deep understanding of graph theory can solve dynamic problems elegantly, without needing to re-run the entire algorithm from the beginning [@problem_id:1379918].", "problem": "A technology company manages a network of six data centers, labeled A, B, C, D, E, and F. For redundancy and performance, all data centers must be connected through a network topology that forms a tree structure. The cost of maintaining a direct fiber optic link between any two centers is given in abstract \"cost points\".\n\nAn initial analysis determined that the Minimum Spanning Tree (MST), which connects all six data centers with the minimum possible total cost, is formed by the following set of links and their associated costs:\n- (A, D) with a cost of 8\n- (B, D) with a cost of 3\n- (C, D) with a cost of 4\n- (C, E) with a cost of 6\n- (E, F) with a cost of 9\n\nDue to a new hardware upgrade, a potential new link between centers B and F can now be established with a significantly reduced cost of 5 cost points. All other link costs remain unchanged.\n\nYour task is to determine the total cost of the new Minimum Spanning Tree for the network after this new link (B, F) becomes available. Express your answer as a single integer.", "solution": "We are given an existing minimum spanning tree (MST) on vertices $\\{A,B,C,D,E,F\\}$ consisting of the edges\n$$(A,D):8,\\quad (B,D):3,\\quad (C,D):4,\\quad (C,E):6,\\quad (E,F):9.$$\nThe total cost of this MST is\n$$8+3+4+6+9=30.$$\n\nA new edge $e=(B,F)$ with weight $w(e)=5$ is added, with all other edge weights unchanged. By the cycle property for MSTs: if an edge $e$ is added to a tree $T$, it forms a unique cycle $C$ with the path in $T$ between the endpoints of $e$. If $w(e)$ is less than the maximum weight edge on $C$, then replacing that maximum edge by $e$ yields a spanning tree of strictly smaller total weight, and that new tree is an MST.\n\nIn the given MST, the unique path between $B$ and $F$ is\n$$B \\xleftrightarrow{3} D \\xleftrightarrow{4} C \\xleftrightarrow{6} E \\xleftrightarrow{9} F,$$\nso the cycle formed by adding $(B,F)$ has edge weights $\\{3,4,6,9,5\\}$, and the maximum weight on the original path is $9$, corresponding to the edge $(E,F)$. Since $5  9$, we replace $(E,F):9$ by $(B,F):5$.\n\nThe new MST total cost is therefore\n$$30-9+5=26.$$\nBy the cycle property, this tree is optimal.", "answer": "$$\\boxed{26}$$", "id": "1379918"}]}