{"hands_on_practices": [{"introduction": "Mastering the construction of Minimum Spanning Trees (MSTs) begins with understanding the core algorithms. This first exercise focuses on Prim's algorithm, a greedy approach that builds an MST by progressively adding the cheapest edge that connects a vertex in the growing tree to a vertex outside of it. By tracing the first few steps of this algorithm [@problem_id:1534169], you'll gain a concrete understanding of how it incrementally builds an optimal solution from a single starting point.", "problem": "Consider an undirected, weighted graph with a set of vertices $V = \\{A, B, C, D, E, F, G\\}$ and a set of edges with corresponding weights. The edges and their weights are given as follows:\n(A, B) with weight 7\n(A, C) with weight 4\n(A, D) with weight 5\n(B, C) with weight 6\n(B, D) with weight 3\n(B, E) with weight 5\n(C, F) with weight 8\n(D, E) with weight 2\n(D, F) with weight 9\n(E, G) with weight 4\n(F, G) with weight 1\n\nA Minimum Spanning Tree (MST) is constructed for this graph using an algorithm that operates as follows: It starts with a tree containing only a single designated starting vertex. Then, in each subsequent step, it identifies the edge with the smallest weight that connects a vertex currently in the tree to a vertex outside the tree, and adds this edge and the new vertex to the tree. This process is repeated until all vertices are in the tree.\n\nIf the algorithm starts with vertex A, what are the first three edges added to the tree, in the order they are added?\n\nA. [(A, C), (A, D), (D, E)]\n\nB. [(F, G), (D, E), (B, D)]\n\nC. [(A, C), (A, D), (D, B)]\n\nD. [(A, C), (C, B), (B, D)]\n\nE. [(A, B), (B, D), (D, E)]", "solution": "We apply Prim’s algorithm starting at vertex $A$. Let $T_{k}$ denote the set of vertices in the tree after $k$ edges have been added, and let $\\delta(T)$ denote the set of edges with exactly one endpoint in $T$.\n\nInitialization: $T_{0}=\\{A\\}$. The candidate edges are $\\delta(T_{0})=\\{(A,B),(A,C),(A,D)\\}$ with weights $7,4,5$, respectively. The minimum-weight edge is $(A,C)$ with weight $4$. Add $(A,C)$, so $T_{1}=\\{A,C\\}$.\n\nNext step: The candidate edges are $\\delta(T_{1})=\\{(A,B),(A,D),(B,C),(C,F)\\}$ with weights $7,5,6,8$, respectively. The minimum-weight edge is $(A,D)$ with weight $5$. Add $(A,D)$, so $T_{2}=\\{A,C,D\\}$.\n\nNext step: The candidate edges are $\\delta(T_{2})=\\{(A,B),(B,C),(C,F),(B,D),(D,E),(D,F)\\}$ with weights $7,6,8,3,2,9$, respectively. The minimum-weight edge is $(D,E)$ with weight $2$. Add $(D,E)$, so $T_{3}=\\{A,C,D,E\\}$.\n\nTherefore, the first three edges added, in order, are $(A,C)$, $(A,D)$, $(D,E)$, which matches option A.", "answer": "$$\\boxed{A}$$", "id": "1534169"}, {"introduction": "While Prim's algorithm grows a single tree component, Kruskal's algorithm takes a different approach by building a forest of trees that eventually merge into one MST. It does this by repeatedly selecting the lowest-cost edge that doesn't form a cycle. This practice problem [@problem_id:1401674] sharpens your ability to apply Kruskal's algorithm, adding the practical consideration of a defined weight function and specific tie-breaking rules, which are essential details in computational implementations.", "problem": "Consider the complete graph $K_4$ whose vertex set is $V = \\{1, 2, 3, 4\\}$. The weight of an edge between any two distinct vertices $u$ and $v$ is given by the function $w(u,v) = u+v$.\n\nKruskal's algorithm is used to find a Minimum Spanning Tree (MST) for this graph. The algorithm iteratively adds edges to a growing forest, selecting the edge with the lowest weight from the set of edges not yet considered, under the condition that adding the edge does not form a cycle. If there is a tie in edge weights, the edge $(u,v)$ with the smaller value of $\\min(u,v)$ is considered first. If there is still a tie, the one with the smaller value of $\\max(u,v)$ is considered first.\n\nDetermine the ordered sequence of the first three edges that are added to the forest by Kruskal's algorithm. Which of the following represents this sequence?\n\nA. $((1,2), (1,3), (1,4))$\n\nB. $((1,2), (1,3), (2,3))$\n\nC. $((1,4), (1,2), (1,3))$\n\nD. $((3,4), (2,4), (2,3))$\n\nE. $((1,2), (2,3), (3,4))$", "solution": "We are given the complete graph on $V=\\{1,2,3,4\\}$ with edge weights defined by $w(u,v)=u+v$ for distinct $u,v\\in V$. Kruskal's algorithm selects edges in nondecreasing order of weight, subject to not creating a cycle, and uses the specified tie-breakers: for equal weights, first compare $\\min(u,v)$ (smaller first), and if still tied, compare $\\max(u,v)$ (smaller first).\n\nList all edges and their weights using $w(u,v)=u+v$:\n- $(1,2)$ with $w(1,2)=1+2=3$,\n- $(1,3)$ with $w(1,3)=1+3=4$,\n- $(1,4)$ with $w(1,4)=1+4=5$,\n- $(2,3)$ with $w(2,3)=2+3=5$,\n- $(2,4)$ with $w(2,4)=2+4=6$,\n- $(3,4)$ with $w(3,4)=3+4=7$.\n\nSort edges by increasing weight, applying the tie-breakers for equal weights. The only tie is at weight $5$ between $(1,4)$ and $(2,3)$. Compare $\\min(1,4)=1$ versus $\\min(2,3)=2$, so $(1,4)$ precedes $(2,3)$. Thus the consideration order is:\n$$(1,2),\\ (1,3),\\ (1,4),\\ (2,3),\\ (2,4),\\ (3,4).$$\n\nRun Kruskal's algorithm:\n- Consider $(1,2)$: it connects two distinct components, so add it.\n- Consider $(1,3)$: it connects two distinct components, so add it. The current forest has edges $(1,2)$ and $(1,3)$; the components are $\\{1,2,3\\}$ and $\\{4\\}$.\n- Consider $(1,4)$: it connects $\\{1,2,3\\}$ to $\\{4\\}$, so it does not form a cycle; add it.\n\nAfter adding these three edges, we have a spanning tree (since $|V|-1=3$), and the ordered sequence of the first three added edges is $((1,2),(1,3),(1,4))$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1401674"}, {"introduction": "Beyond simply finding an MST, real-world applications often require us to understand its stability. For instance, what happens if the cost of a connection in our optimal network increases? This final exercise [@problem_id:1401657] delves into sensitivity analysis, challenging you to determine how much the weight of an MST edge can increase before the tree is no longer minimal. Solving this requires applying the crucial cycle property of MSTs, offering deeper insight into the structural properties that guarantee optimality.", "problem": "InterNode Systems is designing a private fiber-optic network to connect its six main server hubs, labeled A, B, C, D, E, and F. The cost, in thousands of dollars, to lay a direct cable between any two hubs has been determined. Not all direct connections are feasible. The available connections and their costs are as follows:\n\n- (A, B): 3\n- (A, C): 5\n- (A, D): 8\n- (B, C): 2\n- (B, D): 4\n- (B, E): 7\n- (C, D): 6\n- (D, E): 2\n- (D, F): 9\n- (E, F): 5\n\nThe network engineering team has already determined an optimal network topology, which is a Minimum Spanning Tree (MST) that connects all six hubs with the lowest possible total cost.\n\nDue to new municipal regulations, the cost of the specific connection between hub B and hub D is subject to a potential increase. The company wants to determine the \"cost tolerance\" of this link. What is the maximum possible amount the cost of the (B, D) connection can be increased before the original network topology is no longer a minimum-cost solution?", "solution": "We first determine the minimum spanning tree (MST) using Kruskal’s algorithm. Order the available edges by increasing cost:\n$$(B,C):2,\\quad (D,E):2,\\quad (A,B):3,\\quad (B,D):4,\\quad (A,C):5,\\quad (E,F):5,\\quad (C,D):6,\\quad (B,E):7,\\quad (A,D):8,\\quad (D,F):9.$$\nStarting with disjoint hubs, add edges in this order while avoiding cycles:\n1. Add $(B,C)$ with weight $2$.\n2. Add $(D,E)$ with weight $2$.\n3. Add $(A,B)$ with weight $3$.\n4. Add $(B,D)$ with weight $4$.\n5. Add $(E,F)$ with weight $5$.\nAt this point all six hubs are connected with $5$ edges, so the MST is\n$$T=\\{(B,C),(D,E),(A,B),(B,D),(E,F)\\}.$$\n\nWe now compute the cost tolerance for the MST edge $(B,D)$. By the cycle property and standard sensitivity analysis for MSTs, if a tree edge $e$ has weight $w(e)$, then increasing $w(e)$ preserves optimality of $T$ as long as\n$$w(e)\\leq \\min\\{w(f): f \\text{ is a non-tree edge whose fundamental cycle in } T \\text{ contains } e\\}.$$\nEquivalently, the maximum allowable increase is\n$$\\min_{f:\\, e\\in \\text{cycle}(T+f)} w(f)-w(e).$$\n\nList the non-tree edges and check whether their fundamental cycles in $T$ include $(B,D)$ by examining the unique path in $T$ between their endpoints:\n- For $(A,C)$, the path is $A\\text{--}B\\text{--}C$; it does not include $(B,D)$.\n- For $(C,D)$, the path is $C\\text{--}B\\text{--}D$; it includes $(B,D)$, with $w=6$.\n- For $(B,E)$, the path is $B\\text{--}D\\text{--}E$; it includes $(B,D)$, with $w=7$.\n- For $(A,D)$, the path is $A\\text{--}B\\text{--}D$; it includes $(B,D)$, with $w=8$.\n- For $(D,F)$, the path is $D\\text{--}E\\text{--}F$; it does not include $(B,D)$.\n\nHence the minimum replacement edge weight among those whose cycles contain $(B,D)$ is $6$, from $(C,D)$. The current weight is $w(B,D)=4$, so the maximum increase that preserves the MST is\n$$6-4=2.$$\nThis amount is in the given unit of thousands of dollars.", "answer": "$$\\boxed{2}$$", "id": "1401657"}]}