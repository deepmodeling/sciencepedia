{"hands_on_practices": [{"introduction": "This first practice problem tackles a common scenario in resource management: allocating identical resources (like units of computing time) among distinct recipients (like project modules). The key is to handle the constraint that each module must receive a minimum allocation. This exercise demonstrates a powerful and elegant technique in combinatorics—often called \"stars and bars\"—where we first satisfy the minimum requirements and then count the ways to distribute the remainder, transforming the problem into a simpler form [@problem_id:1365531].", "problem": "A lead data scientist for a project named 'Titan Generative Model' (TGM) needs to allocate computational resources for the week. There is a total budget of 20 indivisible units of computing time (measured in teracycle-hours) to be distributed among 5 distinct sub-modules of the TGM. Company policy dictates that for any sub-module to be active and contribute to the weekly model build, it must be allocated a minimum of 2 teracycle-hours. How many different ways can the data scientist allocate the entire budget of 20 teracycle-hours to the 5 sub-modules, ensuring that each one meets this minimum activity requirement?", "solution": "Let $x_{1},x_{2},x_{3},x_{4},x_{5}$ be the integer allocations to the five distinct sub-modules. The constraints are $x_{i} \\in \\mathbb{Z}_{\\ge 0}$, $x_{i} \\ge 2$ for all $i$, and\n$$\nx_{1}+x_{2}+x_{3}+x_{4}+x_{5}=20.\n$$\nIntroduce nonnegative integer variables $y_{i}=x_{i}-2$ for $i=1,2,3,4,5$. Then $y_{i} \\ge 0$ and\n$$\n\\sum_{i=1}^{5} y_{i}=\\left(\\sum_{i=1}^{5} x_{i}\\right)-10=20-10=10.\n$$\nThe number of nonnegative integer solutions to $\\sum_{i=1}^{5} y_{i}=10$ is given by the stars-and-bars formula:\n$$\n\\binom{10+5-1}{5-1}=\\binom{14}{4}.\n$$\nCompute the binomial coefficient:\n$$\n\\binom{14}{4}=\\frac{14 \\cdot 13 \\cdot 12 \\cdot 11}{4 \\cdot 3 \\cdot 2 \\cdot 1}=1001.\n$$\nTherefore, there are $1001$ valid allocations.", "answer": "$$\\boxed{1001}$$", "id": "1365531"}, {"introduction": "We now shift our focus from identical objects to distinct ones, a fundamental change that requires a different counting method. This problem models the assignment of unique error codes to different software modules, a scenario where each object (the error code) is unique. You will explore how to handle a dependency constraint—that two specific items must be assigned together—by conceptually treating them as a single entity, which streamlines the problem and provides a clear application of the multiplication principle [@problem_id:1365578].", "problem": "A team of software engineers is designing the error handling system for a new operating system. The system is composed of $k$ distinct kernel modules. The team needs to assign each of a set of $n$ unique error codes to exactly one of these $k$ modules. This assignment determines which module is responsible for logging and handling a specific error.\n\nDue to a shared resource dependency between two specific error conditions, the lead architect has mandated that a particular error code, $E_A$, and another specific error code, $E_B$, must be assigned to the same kernel module. The other $n-2$ error codes can be assigned to any module independently.\n\nGiven that $n$ and $k$ are integers with $n \\ge 2$ and $k \\ge 1$, determine the total number of distinct ways to assign all $n$ error codes to the $k$ modules according to this constraint. Express your answer as a closed-form analytic expression in terms of $n$ and $k$.", "solution": "Model an assignment as a function from the set of $n$ distinct error codes to the set of $k$ distinct kernel modules. Without constraints there are $k^{n}$ such functions.\n\nImpose the constraint that the two specific error codes $E_{A}$ and $E_{B}$ must be assigned to the same module. First choose the common module for $E_{A}$ and $E_{B}$; there are $k$ choices. Then, for each of the remaining $n-2$ error codes, choose any of the $k$ modules independently; this yields $k^{n-2}$ choices.\n\nBy the multiplication principle, the total number of valid assignments is\n$$\nk \\cdot k^{n-2} = k^{n-1}.\n$$\nThis expression is valid for all integers $n \\ge 2$ and $k \\ge 1$.", "answer": "$$\\boxed{k^{n-1}}$$", "id": "1365578"}, {"introduction": "This final practice problem integrates the concepts of distributing distinct objects with a more complex set of real-world constraints. Here, we must not only assign distinct developers to distinct projects but also ensure that no project is left empty, all while respecting a mandatory pairing of two developers. Solving this requires moving beyond simple counting and applying the powerful Principle of Inclusion-Exclusion to systematically subtract the arrangements that violate the \"no empty project\" rule, a key technique for counting surjective functions [@problem_id:1365587].", "problem": "A project manager at a technology firm is responsible for assigning 8 distinct software developers to 4 distinct ongoing projects. The projects are codenamed Alpha, Bravo, Charlie, and Delta. For the project plan to be approved, the assignment must satisfy two critical conditions:\n1.  Due to resource allocation policies, every project must be assigned at least one developer.\n2.  A mentorship program is in place for a specific Senior Developer and a specific Junior Developer. To ensure effective collaboration, these two developers must be assigned to the same project.\n\nGiven these constraints, how many different ways can the manager assign the developers to the projects?", "solution": "Label the specific Senior and Junior developers as $S$ and $J$. The constraint that $S$ and $J$ must be on the same project allows us to treat them as a single paired entity for assignment purposes. Thus, we have $7$ entities (the pair plus the other $6$ distinct developers) to assign to $4$ distinct projects, with the requirement that every project receives at least one entity.\n\nThis is the number of surjective functions from a $7$-element set to a $4$-element labeled set, which can be counted by the inclusion–exclusion principle. Let $A_{p}$ be the event that project $p$ is empty. Then the number of valid assignments is\n$$\nN=\\sum_{k=0}^{4}(-1)^{k}\\binom{4}{k}(4-k)^{7}.\n$$\nExplicitly,\n$$\nN=4^{7}-\\binom{4}{1}3^{7}+\\binom{4}{2}2^{7}-\\binom{4}{3}1^{7}+\\binom{4}{4}0^{7}.\n$$\nCompute each term:\n$$\n4^{7}=16384,\\quad 3^{7}=2187,\\quad 2^{7}=128,\\quad 1^{7}=1,\\quad 0^{7}=0,\n$$\nand\n$$\n\\binom{4}{1}=4,\\quad \\binom{4}{2}=6,\\quad \\binom{4}{3}=4,\\quad \\binom{4}{4}=1.\n$$\nTherefore,\n$$\nN=16384-4\\cdot 2187+6\\cdot 128-4\\cdot 1+1\\cdot 0=16384-8748+768-4=8400.\n$$\nHence, there are $8400$ valid assignments.", "answer": "$$\\boxed{8400}$$", "id": "1365587"}]}