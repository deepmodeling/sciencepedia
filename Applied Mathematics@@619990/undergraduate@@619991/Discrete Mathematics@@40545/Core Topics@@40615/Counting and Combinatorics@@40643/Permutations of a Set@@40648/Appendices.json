{"hands_on_practices": [{"introduction": "This first exercise grounds us in the fundamentals of combinatorial counting. We will use the multiplication principle to determine the number of possible arrangements when certain positions are restricted. The hypothetical security system scenario [@problem_id:1390701] provides a practical context for applying this core concept, which is essential for solving a wide range of permutation problems.", "problem": "A legacy security system, the Phonetic Authentication Key (PAK) system, is being audited. The system generates unique access codes by creating an arrangement of all the letters from the set {S, U, B, D, O, M, A, I, N}. According to the system's design specification, a valid access code must adhere to two strict rules: the first character must be a vowel (A, E, I, O, U), and the last character must be a consonant. All letters in the set must be used exactly once in each generated code. How many distinct valid access codes can be generated by this system?", "solution": "The problem asks for the number of distinct arrangements (permutations) of a set of letters subject to specific constraints on the first and last positions. We can solve this by using the multiplication principle of counting.\n\nFirst, let's identify the characteristics of the given set of letters: {S, U, B, D, O, M, A, I, N}.\nThe total number of distinct letters is $n = 9$.\n\nNext, we partition this set into vowels and consonants.\nThe vowels in the set are {U, O, A, I}. The number of vowels is $n_v = 4$.\nThe consonants in the set are {S, B, D, M, N}. The number of consonants is $n_c = 5$.\nAs a check, we can confirm that $n_v + n_c = 4 + 5 = 9 = n$.\n\nWe need to construct a 9-letter arrangement that starts with a vowel and ends with a consonant. Let's consider the number of choices we have for each position in the arrangement.\n\nStep 1: Choose the first letter.\nThe first character of the access code must be a vowel. There are $n_v = 4$ available vowels, so there are 4 choices for the first position.\n\nStep 2: Choose the last letter.\nThe last character of the access code must be a consonant. There are $n_c = 5$ available consonants, so there are 5 choices for the last position. The choice for the last position is independent of the choice for the first position.\n\nStep 3: Arrange the remaining letters.\nAfter placing a vowel in the first position and a consonant in the last position, we have used 2 letters from the original set of 9. This leaves $9 - 2 = 7$ letters to be arranged in the 7 middle positions (positions 2 through 8). These 7 remaining letters can be any combination of the unused vowels and consonants.\n\nThe number of ways to arrange $k$ distinct items is given by $k!$ (k-factorial). In this case, we need to arrange the 7 remaining distinct letters. The number of ways to do this is $7!$.\n\n$7! = 7 \\times 6 \\times 5 \\times 4 \\times 3 \\times 2 \\times 1 = 5040$.\n\nStep 4: Combine the results using the multiplication principle.\nThe total number of distinct valid access codes is the product of the number of choices for each step:\nTotal arrangements = (Choices for the first position) $\\times$ (Choices for the last position) $\\times$ (Arrangements for the middle positions)\nTotal arrangements = $4 \\times 5 \\times 7!$\n\nNow, we substitute the value of $7!$:\nTotal arrangements = $4 \\times 5 \\times 5040$\nTotal arrangements = $20 \\times 5040$\nTotal arrangements = $100800$.\n\nTherefore, there are 100,800 distinct valid access codes that can be generated by the system.", "answer": "$$\\boxed{100800}$$", "id": "1390701"}, {"introduction": "Moving beyond simply counting permutations, we now treat them as algebraic objects. This practice explores the concepts of permutation composition and inverses, which are foundational to abstract algebra and its applications, such as cryptography. By solving for an unknown permutation $\\pi$ in the equation $\\pi \\circ \\sigma = \\tau$ [@problem_id:1390740], you will practice manipulating permutations as functions.", "problem": "In a simplified model of a secure network switch, data packets are rearranged according to predefined rules called permutations. Consider a set of four data packets, uniquely identified by the labels $S = \\{1, 2, 3, 4\\}$.\n\nA permutation on $S$ is a reordering of its elements. We represent permutations using disjoint cycle notation. For example, the permutation $(1\\ 3\\ 2)$ maps 1 to 3, 3 to 2, and 2 to 1, while leaving any other elements fixed. The composition of two permutations, $\\pi_2 \\circ \\pi_1$, indicates that permutation $\\pi_1$ is applied first, followed by permutation $\\pi_2$.\n\nSuppose an initial shuffling of the packets is performed by a known permutation $\\sigma = (1\\ 2\\ 4)$. An unknown cryptographic transformation, represented by a permutation $\\pi$, is then applied to the result. The final arrangement of the packets is observed to be equivalent to the single permutation $\\tau = (2\\ 3\\ 4)$.\n\nThis process is described by the equation $\\pi \\circ \\sigma = \\tau$. Given $\\sigma = (1\\ 2\\ 4)$ and $\\tau = (2\\ 3\\ 4)$, determine the unknown permutation $\\pi$. Express your answer in disjoint cycle notation.", "solution": "We are given permutations on the set $S=\\{1,2,3,4\\}$ with the composition convention that in $\\pi_{2}\\circ\\pi_{1}$, $\\pi_{1}$ is applied first. The equation is\n$$\n\\pi\\circ\\sigma=\\tau,\n$$\nwith $\\sigma=(1\\ 2\\ 4)$ and $\\tau=(2\\ 3\\ 4)$. Since permutations are bijections and composition is associative, we can compose on the right by $\\sigma^{-1}$ to isolate $\\pi$:\n$$\n\\pi\\circ\\sigma=\\tau\\quad\\Longrightarrow\\quad \\pi=\\tau\\circ\\sigma^{-1},\n$$\nbecause $\\sigma\\circ\\sigma^{-1}=\\operatorname{id}$.\n\nCompute the inverse of $\\sigma$. For a cycle, the inverse is obtained by reversing the cycle order, so\n$$\n\\sigma^{-1}=(1\\ 4\\ 2).\n$$\nNow compute $\\pi(x)=\\tau(\\sigma^{-1}(x))$ for each $x\\in S$.\n\n- For $x=1$: $\\sigma^{-1}(1)=4$, and $\\tau(4)=2$, hence $\\pi(1)=2$.\n- For $x=2$: $\\sigma^{-1}(2)=1$, and $\\tau(1)=1$, hence $\\pi(2)=1$.\n- For $x=3$: $\\sigma^{-1}(3)=3$, and $\\tau(3)=4$, hence $\\pi(3)=4$.\n- For $x=4$: $\\sigma^{-1}(4)=2$, and $\\tau(2)=3$, hence $\\pi(4)=3$.\n\nThus $\\pi$ swaps $1$ and $2$, and $3$ and $4$, so in disjoint cycle notation,\n$$\n\\pi=(1\\ 2)(3\\ 4).\n$$\nA quick check: $(\\pi\\circ\\sigma)(1)=\\pi(2)=1=\\tau(1)$, $(\\pi\\circ\\sigma)(2)=\\pi(4)=3=\\tau(2)$, $(\\pi\\circ\\sigma)(3)=\\pi(3)=4=\\tau(3)$, $(\\pi\\circ\\sigma)(4)=\\pi(1)=2=\\tau(4)$, confirming the result.", "answer": "$$\\boxed{(1\\ 2)(3\\ 4)}$$", "id": "1390740"}, {"introduction": "Our final practice delves into the powerful concept of cycle notation to analyze the internal structure of a permutation. Understanding the cycle decomposition of a permutation allows us to predict its behavior after repeated applications, such as finding its fixed points. The thought experiment involving a cryptographic rotor machine [@problem_id:1390671] provides a compelling illustration of how a permutation's cycle lengths determine its long-term properties.", "problem": "A prototype for a simple cryptographic rotor machine is designed to scramble signals across a set of 12 parallel communication channels, which are labeled with the integers from 1 to 12. The scrambling process is governed by a permutation $\\pi$ of the set $S = \\{1, 2, ..., 12\\}$. A permutation is a bijection from a set to itself. The specific permutation $\\pi$ used by the machine is given in cycle notation as:\n$$ \\pi = (1\\ 2\\ 3\\ 4)(5\\ 6\\ 7\\ 8\\ 9\\ 10\\ 11\\ 12) $$\nThis notation means that for the first cycle $(1\\ 2\\ 3\\ 4)$, channel 1 is mapped to 2, 2 to 3, 3 to 4, and 4 back to 1. The elements in the second cycle are mapped similarly. Elements not in a cycle of length greater than one are implicitly fixed. However, in this case, all elements of $S$ are included in the cycles shown.\n\nFor one full cycle of operation, the machine applies this permutation four times in succession. The resulting transformation is thus described by the permutation $\\pi^4$, which is the composition of $\\pi$ with itself four times.\n\nA channel is considered \"unscrambled\" by this process if it is a fixed point of the overall transformation $\\pi^4$. A fixed point of a permutation $\\sigma$ is an element $x \\in S$ such that $\\sigma(x) = x$. How many unscrambled channels are there after one full cycle of the machine's operation?", "solution": "We are given the permutation $\\pi=(1\\ 2\\ 3\\ 4)(5\\ 6\\ 7\\ 8\\ 9\\ 10\\ 11\\ 12)$ on $S=\\{1,2,\\ldots,12\\}$ and the machine applies $\\pi$ four times, giving the overall transformation $\\pi^{4}$. A channel $x$ is unscrambled if and only if it is a fixed point of $\\pi^{4}$, i.e., $\\pi^{4}(x)=x$.\n\nA fundamental property of permutations in cycle form is: if $x$ lies in a cycle of length $L$ of $\\pi$, then\n$$\n\\pi^{k}(x)=x \\iff L \\mid k.\n$$\nThis follows because the orbit of $x$ under $\\pi$ has size $L$, so $\\pi^{L}(x)=x$ is the minimal positive power returning $x$ to itself.\n\nApply this to each disjoint cycle of $\\pi$ with $k=4$:\n- For the cycle $(1\\ 2\\ 3\\ 4)$, the length is $L=4$. Since $4 \\mid 4$, every element in this 4-cycle is fixed by $\\pi^{4}$. Thus $1,2,3,4$ are fixed points of $\\pi^{4}$.\n- For the cycle $(5\\ 6\\ 7\\ 8\\ 9\\ 10\\ 11\\ 12)$, the length is $L=8$. Since $8 \\nmid 4$, no element in this 8-cycle is fixed by $\\pi^{4}$. Indeed, $\\pi^{4}$ acts as a shift by $4$ positions on this cycle, pairing elements but fixing none.\n\nTherefore, the total number of fixed points (unscrambled channels) of $\\pi^{4}$ is $4$.", "answer": "$$\\boxed{4}$$", "id": "1390671"}]}