{"hands_on_practices": [{"introduction": "This first practice problem immerses you in a common real-world scenario: network design optimization. You will explore the concept of a Minimum Spanning Tree (MST), which is fundamental for finding the cheapest way to connect a set of points. By calculating how the total cost of an optimal network changes when a single connection becomes cheaper, you will gain a deeper intuition for the stability of MSTs and the mechanics of greedy algorithms like Kruskal's or Prim's. [@problem_id:1414573]", "problem": "A telecommunications company is tasked with connecting five remote research stations, designated Alpha, Bravo, Charlie, Delta, and Echo, with a network of high-speed data cables. The goal is to ensure all stations are connected (either directly or indirectly) while minimizing the total length of cable used, thereby minimizing cost. The possible direct connections and their associated costs (in thousands of dollars) are as follows:\n\n- Alpha to Bravo: 10\n- Alpha to Charlie: 25\n- Alpha to Delta: 30\n- Bravo to Charlie: 12\n- Bravo to Echo: 18\n- Charlie to Delta: 8\n- Charlie to Echo: 20\n- Delta to Echo: 15\n\nRecently, a breakthrough in directional drilling technology has made the route between Alpha and Charlie much easier to navigate. As a result, a new cost for the Alpha-to-Charlie connection has been reduced from 25 to 9 thousand dollars. All other costs remain unchanged.\n\nCalculate the total reduction in the minimum network cost (in thousands of dollars) that results from this technological improvement.", "solution": "We must find the total cost of the Minimum Spanning Tree (MST) both before and after the cost change. We can use Kruskal’s algorithm, which involves sorting all edges by weight and adding them to the tree if they don't form a cycle.\n\n**1. MST Cost Before Improvement**\nThe original edge weights are: $CD: 8$, $AB: 10$, $BC: 12$, $DE: 15$, $BE: 18$, $CE: 20$, $AC: 25$, $AD: 30$.\nLet's build the MST:\n1.  Add edge $CD$ (cost 8). Components: {C,D}, {A}, {B}, {E}.\n2.  Add edge $AB$ (cost 10). Components: {C,D}, {A,B}, {E}.\n3.  Add edge $BC$ (cost 12). This connects the {A,B} and {C,D} components. No cycle. Components: {A,B,C,D}, {E}.\n4.  Add edge $DE$ (cost 15). This connects station E to the main component. No cycle. All stations are now connected.\nThe edges in the MST are $CD$, $AB$, $BC$, and $DE$.\nThe total minimum cost before the improvement is:\n$$8 + 10 + 12 + 15 = 45$$\n\n**2. MST Cost After Improvement**\nThe cost for edge $AC$ is now 9. The new sorted list of edges by weight is: $CD: 8$, $AC: 9$, $AB: 10$, $BC: 12$, $DE: 15$, $BE: 18$, $CE: 20$, $AD: 30$.\nLet's build the new MST:\n1.  Add edge $CD$ (cost 8). Components: {C,D}, {A}, {B}, {E}.\n2.  Add edge $AC$ (cost 9). This connects station A to the {C,D} component. No cycle. Components: {A,C,D}, {B}, {E}.\n3.  Add edge $AB$ (cost 10). This connects station B. No cycle. Components: {A,B,C,D}, {E}.\n4.  Skip edge $BC$ (cost 12). Stations B and C are already in the same connected component, so this edge would create a cycle (A-B-C-A).\n5.  Add edge $DE$ (cost 15). This connects station E. All stations are now connected.\nThe edges in the new MST are $CD$, $AC$, $AB$, and $DE$.\nThe new total minimum cost is:\n$$8 + 9 + 10 + 15 = 42$$\n\n**3. Cost Reduction**\nThe total reduction in the minimum network cost is the difference between the old and new costs:\n$$45 - 42 = 3$$", "answer": "$$\\boxed{3}$$", "id": "1414573"}, {"introduction": "Next, we shift from overall network connectivity to finding the most efficient route between two specific points. This exercise introduces the single-source shortest path problem in a special, but important, type of network: a Directed Acyclic Graph (DAG). The hypothetical scenario involves logistics costs, where some routes might even be profitable (negative weight). This practice is crucial for understanding how to apply dynamic programming on a topologically sorted graph to efficiently find shortest paths, a powerful technique that works even when standard methods like Dijkstra's algorithm do not. [@problem_id:1414557]", "problem": "A specialized logistics company designs a transportation network for high-value cargo between six data centers, labeled A, B, C, D, E, and F. The network consists of several one-way, direct routes, each with an associated cost. Due to special agreements and backhauling opportunities, some routes have a negative cost, representing a net profit. The network is guaranteed to be acyclic, meaning there are no routes that lead back to a previously visited data center.\n\nThe available routes and their costs are as follows:\n- From A to B, the cost is 4 units.\n- From A to C, the cost is 2 units.\n- From B to C, the cost is 5 units.\n- From B to D, the cost is 10 units.\n- From C to E, the cost is 3 units.\n- From D to F, the cost is 11 units.\n- From E to D, the cost is 4 units.\n- From E to F, the cost is -5 units.\n\nYour task is to determine the minimum possible total cost to transport a single package from the starting data center A to the final destination F.", "solution": "Let the directed acyclic graph have vertices $V=\\{A,B,C,D,E,F\\}$ and weighted edges $(u,v)$ with costs $w(u,v)$. We seek the minimum total cost from $A$ to $F$, i.e., a path $A \\to \\cdots \\to F$ minimizing the sum of edge costs along the path.\n\nBecause the graph is acyclic, we can compute shortest-path distances by dynamic programming along a topological order. One valid topological order consistent with the given edges is $A,B,C,E,D,F$, since all edges go from an earlier to a later vertex in this order:\n- $A \\to B$, $A \\to C$,\n- $B \\to C$, $B \\to D$,\n- $C \\to E$,\n- $E \\to D$, $E \\to F$,\n- $D \\to F$.\n\nInitialize distances with $d(A)=0$ and $d(v)=+\\infty$ for $v \\in \\{B,C,D,E,F\\}$. For each vertex $u$ in the topological order, relax its outgoing edges using\n$$\nd(v) \\leftarrow \\min\\{d(v),\\, d(u)+w(u,v)\\} \\quad \\text{for each edge } (u,v).\n$$\n\nProcess $A$:\n$$\nd(B)=\\min\\{+\\infty,\\, d(A)+w(A,B)\\}=\\min\\{+\\infty,\\, 0+4\\}=4,\n$$\n$$\nd(C)=\\min\\{+\\infty,\\, d(A)+w(A,C)\\}=\\min\\{+\\infty,\\, 0+2\\}=2.\n$$\n\nProcess $B$:\n$$\nd(C)=\\min\\{2,\\, d(B)+w(B,C)\\}=\\min\\{2,\\, 4+5\\}=\\min\\{2,9\\}=2,\n$$\n$$\nd(D)=\\min\\{+\\infty,\\, d(B)+w(B,D)\\}=\\min\\{+\\infty,\\, 4+10\\}=14.\n$$\n\nProcess $C$:\n$$\nd(E)=\\min\\{+\\infty,\\, d(C)+w(C,E)\\}=\\min\\{+\\infty,\\, 2+3\\}=5.\n$$\n\nProcess $E$:\n$$\nd(D)=\\min\\{14,\\, d(E)+w(E,D)\\}=\\min\\{14,\\, 5+4\\}=\\min\\{14,9\\}=9,\n$$\n$$\nd(F)=\\min\\{+\\infty,\\, d(E)+w(E,F)\\}=\\min\\{+\\infty,\\, 5+(-5)\\}=0.\n$$\n\nProcess $D$:\n$$\nd(F)=\\min\\{0,\\, d(D)+w(D,F)\\}=\\min\\{0,\\, 9+11\\}=\\min\\{0,20\\}=0.\n$$\n\nAt termination, the minimum total cost from $A$ to $F$ is $d(F)=0$. The minimizing path can be read from the relaxations: $A \\to C \\to E \\to F$ with total cost\n$$\nw(A,C)+w(C,E)+w(E,F)=2+3+(-5)=0.\n$$\n\nTherefore, the minimum possible total cost is $0$.", "answer": "$$\\boxed{0}$$", "id": "1414557"}, {"introduction": "This final problem presents a more complex challenge that requires you to think beyond standard algorithms and adapt your models to fit unique constraints. The scenario, though stylized, represents a common issue in advanced pathfinding where the validity of a path depends on its structure, in this case, the number of steps taken. You will learn to solve this by augmenting the graph's state space—a powerful technique that transforms a constrained problem into a larger, standard shortest path problem. This exercise develops your ability to model and solve non-trivial problems using fundamental graph theory principles. [@problem_id:1414596]", "problem": "In an advanced chronodynamics laboratory, a series of $N=5$ stable temporal \"Anchors\", labeled 1 through 5, have been established. These Anchors are interconnected by a network of one-way \"Phase Tunnels\". A specialized probe, the Pathfinder, is designed to navigate this network.\n\nThe Pathfinder possesses an intrinsic property called \"Parity Charge\", which can be in one of two states: 'even' or 'odd'. The probe starts at Anchor 1 with an 'even' Parity Charge. Each time the Pathfinder traverses a Phase Tunnel, its Parity Charge flips state (from 'even' to 'odd', or 'odd' to 'even'). For a mission to be successful, the probe must arrive at its destination Anchor with an 'even' Parity Charge.\n\nThe energy cost to traverse a tunnel from Anchor $u$ to Anchor $v$ is not constant; it depends on the Pathfinder's Parity Charge upon *entering* the tunnel at Anchor $u$. The specific energy costs are given as follows:\n\n**Costs for entering with an 'even' Parity Charge ($E_{\\text{even}}$):**\n- Tunnel 1 to 2: 10 units\n- Tunnel 1 to 3: 100 units\n- Tunnel 2 to 3: 10 units\n- Tunnel 2 to 4: 50 units\n- Tunnel 3 to 5: 100 units\n- Tunnel 4 to 3: 10 units\n- Tunnel 4 to 5: 20 units\n\n**Costs for entering with an 'odd' Parity Charge ($E_{\\text{odd}}$):**\n- Tunnel 1 to 2: 10 units\n- Tunnel 1 to 3: 5 units\n- Tunnel 2 to 3: 10 units\n- Tunnel 2 to 4: 10 units\n- Tunnel 3 to 5: 10 units\n- Tunnel 4 to 3: 10 units\n- Tunnel 4 to 5: 20 units\n\nAny tunnel connection not listed has an infinite energy cost. The probe's mission is to travel from the starting Anchor 1 to the destination Anchor 5.\n\nDetermine the minimum total energy cost required for the Pathfinder to complete its mission successfully. Express your answer as a single integer.", "solution": "We model the parity-dependent costs by augmenting the graph. The state of our probe is defined by a pair $(i, p)$, where $i \\in \\{1,2,3,4,5\\}$ is its current Anchor location and $p \\in \\{\\text{even}, \\text{odd}\\}$ is its Parity Charge. This creates a new graph with $2 \\times 5 = 10$ nodes.\nA tunnel traversal from Anchor $u$ to $v$ corresponds to an edge in this new graph. Since the parity flips, an edge from state $(u, \\text{even})$ will lead to state $(v, \\text{odd})$, and an edge from $(u, \\text{odd})$ will lead to state $(v, \\text{even})$.\n- A traversal from $u$ to $v$ starting with an 'even' charge has cost $E_{\\text{even}}(u \\to v)$ and corresponds to an edge from $(u, \\text{even}) \\to (v, \\text{odd})$.\n- A traversal from $u$ to $v$ starting with an 'odd' charge has cost $E_{\\text{odd}}(u \\to v)$ and corresponds to an edge from $(u, \\text{odd}) \\to (v, \\text{even})$.\n\nThe mission is to find the minimum-cost path from the start state $(1, \\text{even})$ to the target state $(5, \\text{even})$. Since all costs are non-negative, we can use Dijkstra's algorithm on this augmented graph. Let $d(i, p)$ be the minimum cost to reach state $(i, p)$.\n\n1.  **Initialization**: Set $d(1, \\text{even}) = 0$. All other distances are $\\infty$.\n\n2.  **Relax from $(1, \\text{even})$**:\n    -   $1 \\to 2$ ($E_{\\text{even}}=10$): leads to state $(2, \\text{odd})$. Set $d(2, \\text{odd}) = 10$.\n    -   $1 \\to 3$ ($E_{\\text{even}}=100$): leads to state $(3, \\text{odd})$. Set $d(3, \\text{odd}) = 100$.\n\n3.  **Settle $(2, \\text{odd})$** (distance 10, the current minimum):\n    -   $2 \\to 3$ ($E_{\\text{odd}}=10$): leads to $(3, \\text{even})$. Cost $10+10=20$. Set $d(3, \\text{even}) = 20$.\n    -   $2 \\to 4$ ($E_{\\text{odd}}=10$): leads to $(4, \\text{even})$. Cost $10+10=20$. Set $d(4, \\text{even}) = 20$.\n\n4.  **Settle $(3, \\text{even})$** (distance 20):\n    -   $3 \\to 5$ ($E_{\\text{even}}=100$): leads to $(5, \\text{odd})$. Cost $20+100=120$. Set $d(5, \\text{odd}) = 120$.\n\n5.  **Settle $(4, \\text{even})$** (distance 20):\n    -   $4 \\to 3$ ($E_{\\text{even}}=10$): leads to $(3, \\text{odd})$. Cost $20+10=30$. Update $d(3, \\text{odd}) = \\min(100, 30) = 30$.\n    -   $4 \\to 5$ ($E_{\\text{even}}=20$): leads to $(5, \\text{odd})$. Cost $20+20=40$. Update $d(5, \\text{odd}) = \\min(120, 40) = 40$.\n\n6.  **Settle $(3, \\text{odd})$** (distance 30):\n    -   $3 \\to 5$ ($E_{\\text{odd}}=10$): leads to $(5, \\text{even})$. Cost $30+10=40$. Set $d(5, \\text{even}) = 40$.\n\nAt this point, we have found a path to the destination state $(5, \\text{even})$ with a total cost of 40. The remaining unsettled states in our priority queue all have distances of 40 or greater ($d(5, \\text{odd})=40$). Therefore, 40 is the minimum possible cost.\n\nThe optimal path corresponding to this cost is:\n$$(1, \\text{even}) \\xrightarrow{10} (2, \\text{odd}) \\xrightarrow{10} (4, \\text{even}) \\xrightarrow{10} (3, \\text{odd}) \\xrightarrow{10} (5, \\text{even})$$\nThe total cost is $10 + 10 + 10 + 10 = 40$. The probe traverses four tunnels, an even number, so it correctly arrives at Anchor 5 with an 'even' Parity Charge.", "answer": "$$\\boxed{40}$$", "id": "1414596"}]}