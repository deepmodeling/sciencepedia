{"hands_on_practices": [{"introduction": "To truly understand Dijkstra's algorithm, we must move beyond theory and see it in action. This first exercise guides you through a manual trace of the algorithm on a small network. By tracking the distance estimates at each step, you will build an intuition for the core mechanics of vertex selection and edge relaxation, which are the fundamental building blocks of finding the shortest path [@problem_id:1363296].", "problem": "A network administrator is analyzing routing paths in a small data center. The network consists of six servers, labeled A, B, C, D, E, and F. The latency (in milliseconds) between directly connected servers is given by the following undirected connections:\n- A to B: 4\n- A to C: 2\n- B to C: 5\n- B to D: 10\n- C to E: 3\n- D to E: 4\n- D to F: 11\n- E to F: 1\n\nA standard single-source shortest path algorithm is run from the source server A to find the minimum latency paths to all other servers. The algorithm maintains an array of current shortest path estimates from A to every server. Initially, the estimate for A is 0, and for all other servers, it is infinity. The algorithm iteratively finalizes the server with the smallest current estimate among all unfinalized servers, and then updates the estimates for its neighbors.\n\nYour task is to trace the state of this array of estimates. Provide the sequence of six arrays, where the k-th array shows the estimates immediately after the k-th server has been finalized. For your answer, represent the estimates for servers in the order (A, B, C, D, E, F). Present the sequence of arrays as a matrix where each row corresponds to the state of the estimates after a server has been finalized. Use the symbol `\\infty` to represent an infinite estimate.", "solution": "We apply Dijkstra’s algorithm from source $A$. Let $d(X)$ denote the current estimate of the shortest distance from $A$ to server $X$. Initially, $d(A)=0$ and $d(B)=d(C)=d(D)=d(E)=d(F)=\\infty$. At each step, finalize the unfinalized server with the smallest $d(\\cdot)$ and relax its neighbors using $d(v) \\leftarrow \\min\\{d(v), d(u)+w(u,v)\\}$ for each adjacent $v$ of the finalized $u$.\n\nStep 1: Finalize $A$ with $d(A)=0$. Relax neighbors:\n- $d(B) \\leftarrow \\min(\\infty, 0+4)=4$,\n- $d(C) \\leftarrow \\min(\\infty, 0+2)=2$.\nState after 1st finalization (A,B,C,D,E,F):\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & \\infty & \\infty & \\infty\n\\end{pmatrix}\n$$\n\nStep 2: Finalize $C$ with $d(C)=2$. Relax neighbors:\n- $d(B) \\leftarrow \\min(4, 2+5)=4$ (no change),\n- $d(E) \\leftarrow \\min(\\infty, 2+3)=5$.\nState after 2nd finalization:\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & \\infty & 5 & \\infty\n\\end{pmatrix}\n$$\n\nStep 3: Finalize $B$ with $d(B)=4$. Relax neighbor:\n- $d(D) \\leftarrow \\min(\\infty, 4+10)=14$.\nState after 3rd finalization:\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & 14 & 5 & \\infty\n\\end{pmatrix}\n$$\n\nStep 4: Finalize $E$ with $d(E)=5$. Relax neighbors:\n- $d(D) \\leftarrow \\min(14, 5+4)=9$,\n- $d(F) \\leftarrow \\min(\\infty, 5+1)=6$.\nState after 4th finalization:\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}\n$$\n\nStep 5: Finalize $F$ with $d(F)=6$. Relax neighbor:\n- $d(D) \\leftarrow \\min(9, 6+11)=9$ (no change).\nState after 5th finalization:\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}\n$$\n\nStep 6: Finalize $D$ with $d(D)=9$. No further improvements.\nState after 6th finalization:\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}\n$$\n\nCollecting the six arrays as rows in order of finalization yields:\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & \\infty & \\infty & \\infty \\\\\n0 & 4 & 2 & \\infty & 5 & \\infty \\\\\n0 & 4 & 2 & 14 & 5 & \\infty \\\\\n0 & 4 & 2 & 9 & 5 & 6 \\\\\n0 & 4 & 2 & 9 & 5 & 6 \\\\\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}\n$$", "answer": "$$\\boxed{\\begin{pmatrix}\n0 & 4 & 2 & \\infty & \\infty & \\infty \\\\\n0 & 4 & 2 & \\infty & 5 & \\infty \\\\\n0 & 4 & 2 & 14 & 5 & \\infty \\\\\n0 & 4 & 2 & 9 & 5 & 6 \\\\\n0 & 4 & 2 & 9 & 5 & 6 \\\\\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}}$$", "id": "1363296"}, {"introduction": "Real-world optimization is rarely about a single metric; the \"best\" route might be the fastest, the cheapest, or the one with the fewest stops. This practice demonstrates the flexibility of Dijkstra's algorithm by showing how it can be adapted to handle multiple, prioritized objectives [@problem_id:1496472]. By defining a composite cost—in this case, an ordered pair of (time, transfers)—and using lexicographical comparison during the relaxation step, we can extend the algorithm to solve more nuanced problems, a powerful technique in logistics and network design.", "problem": "A new interplanetary delivery service, \"Stellar Express,\" has been contracted to transport a vital, cryo-cooled telescope component from their main depot on Earth (E) to a newly established research outpost on Mars (M). The transportation network consists of several orbital stations and Lagrange point hubs, which can be modeled as a weighted directed graph where nodes are locations and edge weights represent the travel time in days.\n\nThe primary objective is to find a route with the minimum possible total travel time. However, each transfer between stations (i.e., traversing an edge in the graph) introduces a fixed risk of equipment malfunction and incurs significant procedural costs. Therefore, as a secondary objective, among all routes that achieve the minimum total travel time, the company must select the one that involves the minimum number of station-to-station transfers.\n\nThe available routes and their corresponding travel times are as follows:\n- Earth (E) to Station A: 3 days\n- Earth (E) to Station B: 2 days\n- Earth (E) to Station D: 9 days\n- Station A to Mars (M): 5 days\n- Station A to Station D: 4 days\n- Station B to Station C: 3 days\n- Station C to Station D: 1 day\n- Station C to Mars (M): 3 days\n- Station D to Mars (M): 1 day\n\nAll routes are one-way in the direction specified. Your task is to determine the optimal path from Earth (E) to Mars (M) according to the company's dual criteria.\n\nProvide the minimum total travel time and the corresponding number of transfers for this optimal path.", "solution": "We model the network as a directed graph with nodes $E, A, B, C, D, M$ and edge travel times $w(u,v)$ as given. The primary objective is to minimize total time; the secondary objective is to minimize the number of transfers (edges) among all time-optimal paths. We therefore define the path cost from $E$ to any node $v$ as an ordered pair $(T(v), K(v))$ where $T(v)$ is the minimum total time and $K(v)$ is the minimum number of edges among paths that achieve $T(v)$. We compare such pairs lexicographically: $(t_{1},k_{1})<(t_{2},k_{2})$ if $t_{1}<t_{2}$, or $t_{1}=t_{2}$ and $k_{1}<k_{2}$.\n\nWe apply a Dijkstra-style relaxation using this lexicographic order. Initialize:\n$$\n(T(E),K(E))=(0,0), \\quad (T(v),K(v))=(\\infty,\\infty)\\ \\text{for all }v\\neq E.\n$$\nRelax outgoing edges from $E$:\n$$\n(T(A),K(A))=(3,1),\\quad (T(B),K(B))=(2,1),\\quad (T(D),K(D))=(9,1).\n$$\nSelect the unsettled node with smallest lexicographic cost: $B$ with $(2,1)$. Relax from $B$:\n$$\n(T(C),K(C))=(2+3,1+1)=(5,2).\n$$\nNext smallest is $A$ with $(3,1)$. Relax from $A$:\n$$\n(T(M),K(M))=(3+5,1+1)=(8,2),\\quad (T(D),K(D))=(3+4,1+1)=(7,2)\\ \\text{(improves from }(9,1)\\text{)}.\n$$\nNext smallest is $C$ with $(5,2)$. Relax from $C$:\n$$\n(T(D),K(D))=(5+1,2+1)=(6,3)\\ \\text{(improves from }(7,2)\\text{)},\\quad (T(M),K(M))=(5+3,2+1)=(8,3).\n$$\nSince $(8,2)$ is lexicographically smaller than $(8,3)$, we keep $(T(M),K(M))=(8,2)$.\n\nNext smallest is $D$ with $(6,3)$. Relax from $D$:\n$$\n(T(M),K(M))=(6+1,3+1)=(7,4)\\ \\text{(improves from }(8,2)\\text{)}.\n$$\nFinally, $M$ has $(7,4)$ and no further improvement is possible. Thus the optimal path has minimum total travel time $7$ and, among all time-optimal paths, the minimum number of transfers $4$. One such path is $E\\to B\\to C\\to D\\to M$ with times $2+3+1+1=7$ and $4$ edges.", "answer": "$$\\boxed{\\begin{pmatrix}7 & 4\\end{pmatrix}}$$", "id": "1496472"}, {"introduction": "Networks are rarely static, as links can be upgraded and latencies can change. While re-running a full shortest-path computation is always an option, it is often inefficient for minor updates. This exercise explores a more practical and optimized approach for dynamic graphs, specifically how to update path latencies after an edge weight decreases [@problem_id:1496504]. Understanding this incremental update procedure reveals a deeper insight into how cost improvements propagate through a network and is a key concept in advanced routing protocols.", "problem": "Consider a small corporate network represented as a directed graph where servers are vertices and network links are weighted edges. The weight of an edge represents the communication latency in milliseconds (ms). The network consists of six servers: a source server `S`, a sink server `T`, and four intermediate servers `A`, `B`, `C`, and `D`.\n\nThe network topology and original latencies are defined by the following set of directed edges and their weights:\n- (S, A) with weight 3\n- (S, B) with weight 5\n- (A, B) with weight 1\n- (A, C) with weight 2\n- (B, C) with weight 2\n- (B, D) with weight 6\n- (C, D) with weight 1\n- (C, T) with weight 8\n- (D, T) with weight 3\n\nA network administrator has already run Dijkstra's algorithm to find the shortest path latencies from the source server `S` to all other servers in the network. The results are:\n- `d[S] = 0`\n- `d[A] = 3`\n- `d[B] = 4`\n- `d[C] = 5`\n- `d[D] = 6`\n- `d[T] = 9`\n\nNow, suppose the network link from server `S` to server `B` is upgraded with a new fiber optic cable, which reduces its latency from 5 ms to 1 ms.\n\nTo update the shortest path latencies for the entire network, a full re-run of Dijkstra's algorithm can be avoided. Instead, a more efficient update procedure can be used, which propagates the improvement starting from the modified edge. This procedure identifies vertices whose shortest path distances can be improved and sequentially relaxes their outgoing edges. A relaxation operation on an edge `(x, y)` is the check to see if the path to `y` can be shortened by going through `x`, i.e., evaluating the condition `d[x] + weight(x, y) < d[y]`.\n\nCalculate the total number of relaxation operations that are performed during this efficient update procedure. Your count should only include the relaxations that occur *after* the shortest path distance to vertex `B` is initially updated due to the edge-weight change.", "solution": "We start from the given graph with original shortest path distances $d[S]=0$, $d[A]=3$, $d[B]=4$, $d[C]=5$, $d[D]=6$, $d[T]=9$. The edge $(S,B)$ has its weight decreased from $5$ to $1$. A relaxation on $(x,y)$ checks whether $d[x]+\\text{weight}(x,y)<d[y]$; if so, we update $d[y]$ and then propagate by relaxing outgoing edges of $y$.\n\nFirst, consider the modified edge $(S,B)$. Since $d[S]+1=1<d[B]=4$, we update $d[B]\\leftarrow 1$. Per the problem, we do not count the relaxation that updated $B$; we only count relaxations performed after this update.\n\nFrom this point, we propagate improvements by relaxing outgoing edges of any vertex whose distance was improved. Let $R$ denote the total number of relaxation operations counted after $d[B]$ is updated.\n\n1) Process $B$ (outgoing edges $(B,C)$ and $(B,D)$), performing two relaxations:\n$$d[C]\\stackrel{?}{>}d[B]+w(B,C)\\;\\Longleftrightarrow\\;5\\stackrel{?}{>}1+2=3\\;\\Rightarrow\\;d[C]\\leftarrow 3,$$\n$$d[D]\\stackrel{?}{>}d[B]+w(B,D)\\;\\Longleftrightarrow\\;6\\stackrel{?}{>}1+6=7\\;\\Rightarrow\\;\\text{no update}.$$\nCount so far: $R=2$. The improvement to $C$ triggers processing $C$.\n\n2) Process $C$ (outgoing edges $(C,D)$ and $(C,T)$), performing two relaxations:\n$$d[D]\\stackrel{?}{>}d[C]+w(C,D)\\;\\Longleftrightarrow\\;6\\stackrel{?}{>}3+1=4\\;\\Rightarrow\\;d[D]\\leftarrow 4,$$\n$$d[T]\\stackrel{?}{>}d[C]+w(C,T)\\;\\Longleftrightarrow\\;9\\stackrel{?}{>}3+8=11\\;\\Rightarrow\\;\\text{no update}.$$\nCount update: $R=2+2=4$. The improvement to $D$ triggers processing $D$.\n\n3) Process $D$ (outgoing edge $(D,T)$), performing one relaxation:\n$$d[T]\\stackrel{?}{>}d[D]+w(D,T)\\;\\Longleftrightarrow\\;9\\stackrel{?}{>}4+3=7\\;\\Rightarrow\\;d[T]\\leftarrow 7.$$\nCount update: $R=4+1=5$. The improvement to $T$ does not lead to further relaxations because $T$ has no outgoing edges.\n\nTherefore, the total number of relaxation operations after $d[B]$ is initially updated is $R=5$.", "answer": "$$\\boxed{5}$$", "id": "1496504"}]}