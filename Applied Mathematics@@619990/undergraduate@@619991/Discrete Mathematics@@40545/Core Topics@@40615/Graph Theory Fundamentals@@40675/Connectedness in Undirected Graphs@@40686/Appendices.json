{"hands_on_practices": [{"introduction": "The first step in analyzing a network's structure often involves basic counting. This practice explores a fundamental principle of graph theory: the relationship between the number of vertices ($V$), the number of edges ($E$), and the presence of cycles. You will use this principle to determine if a network must contain a redundant pathway based solely on these simple counts, providing a powerful first-pass diagnostic tool. [@problem_id:1495017]", "problem": "A municipal engineering team is analyzing the design of a new water distribution network. The network can be modeled as a simple graph where each junction where pipes meet or end is a vertex, and each continuous pipe segment connecting two junctions is an edge. The preliminary design for a suburb consists of a total of $V$ junctions and $E$ pipes. After a review, the lead engineer notes that the number of pipes is strictly greater than the number of junctions minus one, i.e., $E > V - 1$.\n\nBased solely on this information, which of the following statements about the water network's graph structure must be true?\n\nA. The network is connected, meaning it is possible to get from any junction to any other junction.\n\nB. The network must contain at least one cycle, meaning there is at least one path a water molecule could take that starts and ends at the same junction without immediately reversing direction.\n\nC. The network cannot be disconnected; it must form a single component.\n\nD. Every junction in the network must have at least two pipes connected to it.\n\nE. The network forms a single connected component that contains redundant pathways.", "solution": "Let $G$ be a simple undirected graph with $V$ vertices and $E$ edges, and suppose $E>V-1$. Let $c$ denote the number of connected components of $G$, so $c\\geq 1$.\n\nKey fact about acyclic graphs (forests): If $G$ is acyclic, then each component with $v_{i}$ vertices has exactly $v_{i}-1$ edges. Summing over all components,\n$$\nE=\\sum_{i=1}^{c}(v_{i}-1)=\\left(\\sum_{i=1}^{c}v_{i}\\right)-c=V-c\\leq V-1,\n$$\nwith equality if and only if $c=1$ (i.e., $G$ is a tree).\n\nTaking the contrapositive, if $E>V-1$ then $G$ cannot be acyclic. Therefore $G$ must contain at least one cycle. This makes statement B necessarily true.\n\nWe now test the other statements and show they are not forced by $E>V-1$.\n\nConnectedness (A, C, E): The inequality $E>V-1$ does not imply connectedness. For instance, let $m\\geq 4$ and take one component to be $K_{m}$ (which has $\\binom{m}{2}$ edges) and add one isolated vertex. Then\n$$\nV=m+1,\\quad E=\\binom{m}{2}=\\frac{m(m-1)}{2}>m=V-1,\n$$\nbut the graph is disconnected. Hence A, C, and E are not guaranteed.\n\nMinimum degree condition (D): The inequality $E>V-1$ does not force every vertex to have degree at least $2$. For example, start with the star $K_{1,r}$ for $r\\geq 3$, which has $V=r+1$ and $E=r=V-1$. Add one extra edge between two distinct leaves. The new graph has\n$$\nE'=E+1=V>V-1,\n$$\nbut the leaves not used in the added edge still have degree $1$. Thus D is not guaranteed.\n\nTherefore, the only statement that must be true is B.", "answer": "$$\\boxed{B}$$", "id": "1495017"}, {"introduction": "Moving beyond simply identifying the existence of cycles, we can quantify the redundancy in a connected network. This exercise introduces the concept of a spanning tree—a minimal backbone connecting all nodes—and asks you to precisely calculate the number of essential \"tree edges\" versus \"non-tree edges\". This helps in understanding how many connections are fundamental for connectivity and how many provide alternative routes. [@problem_id:1483535]", "problem": "Consider a large, connected, undirected graph $G$ which represents a complex infrastructure network. The graph consists of $n$ nodes (junctions) and $m$ edges (connections). To establish a core, loop-free communication backbone, an algorithm such as Breadth-First Search (BFS) or Depth-First Search (DFS) is run on the graph, starting from an arbitrary node. The output of such a traversal on a connected graph is a spanning tree.\n\nWith respect to this generated spanning tree, every edge in the original graph $G$ can be classified into one of two categories: 'tree edges', which are the edges belonging to the spanning tree, and 'non-tree edges' (also known as back edges, forward edges, or cross edges depending on the algorithm and context), which are the edges of $G$ not included in the spanning tree.\n\nDetermine the number of tree edges and the number of non-tree edges that will be found, regardless of the starting node or whether BFS or DFS is used. Express your answer for the number of tree edges and the number of non-tree edges, respectively, in terms of $n$ and $m$.", "solution": "Let $G=(V,E)$ be a connected, undirected graph with $|V|=n$ and $|E|=m$. Running either BFS or DFS from any starting node constructs a spanning tree $T$ because:\n- The traversal visits all $n$ vertices (connectedness).\n- Each time a new vertex is first discovered, exactly one edge (to its parent in the traversal) is added to $T$.\n- No cycles are formed in $T$ by construction.\n\nIn a tree on $n$ vertices, the number of edges is $n-1$. Therefore, the number of tree edges is\n$$\n|E_{T}|=n-1.\n$$\nThe edges of $G$ partition into tree edges and non-tree edges, so\n$$\nm=|E|=|E_{T}|+|E_{\\text{non-tree}}|.\n$$\nHence, the number of non-tree edges is\n$$\n|E_{\\text{non-tree}}|=m-|E_{T}|=m-(n-1)=m-n+1.\n$$\nThese counts are independent of the starting node and of whether BFS or DFS is used, since any spanning tree on $n$ vertices has exactly $n-1$ edges.", "answer": "$$\\boxed{\\begin{pmatrix} n-1 & m-n+1 \\end{pmatrix}}$$", "id": "1483535"}, {"introduction": "While counting tells us that a graph has cycles, we often need an algorithm to actually find them. This problem puts you in the role of a network engineer implementing a Breadth-First Search (BFS) to explore a network. Your task is to identify the exact event during the traversal that serves as a definitive signal for the presence of a cycle, bridging the gap between theoretical properties and practical implementation. [@problem_id:1354171]", "problem": "A network engineering team at a startup, \"CloudConnect\", is implementing a new routing protocol for their data centers. The network of servers is modeled as a connected, undirected graph where servers are vertices and direct data links are edges. A critical component of the protocol is a routine that checks for redundant pathways, which manifest as cycles in the graph. To perform this check, the protocol initiates a Breadth-First Search (BFS) from an arbitrary source server.\n\nThe BFS algorithm systematically explores the graph layer by layer. It uses a queue to manage the servers to visit, a `visited` flag for each server to track discovery, and a `parent` pointer for each server to reconstruct the discovery path (i.e., `parent[v]` is the server `u` that first discovered `v`).\n\nYour task is to identify the precise condition that, when encountered during the execution of this BFS traversal, unambiguously indicates that the network graph contains at least one cycle.\n\nAssume the BFS is running on a connected, undirected graph. Let `u` be the server currently being processed (i.e., just removed from the front of the queue), and let `v` be a neighbor of `u` according to the graph's adjacency list.\n\nWhich of the following events is a necessary and sufficient condition to detect a cycle?\n\nA. When processing server `u`, the algorithm discovers a neighboring server `v` that has already been marked as `visited`.\n\nB. When processing server `u`, the algorithm discovers a neighboring server `v` that has already been marked as `visited` and is the `parent` of `u` in the BFS tree.\n\nC. After the BFS traversal is complete, the total number of nodes in the `parent` array is not equal to the total number of servers in the graph.\n\nD. When processing server `u`, the algorithm discovers a neighboring server `v` that has already been marked as `visited` and is not the `parent` of `u` in the BFS tree.\n\nE. The BFS queue becomes empty, but the number of visited servers is less than the total number of servers in the graph.", "solution": "We model the network as a connected, undirected graph and run a BFS from some source. For each vertex $w \\neq s$ discovered by BFS, the edge $(\\mathrm{parent}[w], w)$ belongs to the BFS tree $T$. The structure $T$ is a spanning tree of the graph (because the graph is connected and BFS reaches every vertex), hence $T$ has a unique simple path between any two vertices in it.\n\nSufficiency of D: Suppose that while processing a vertex $u$, we inspect an adjacent vertex $v$ such that $v$ is already marked $\\mathrm{visited}$ and $v \\neq \\mathrm{parent}[u]$. Consider the unique path in the BFS tree $T$ from $u$ to $v$, denoted $P_{T}(u,v)$. Because $T$ is a tree, $P_{T}(u,v)$ is simple and unique. Adding the non-tree edge $(u,v)$ to $P_{T}(u,v)$ yields a simple cycle:\n$$\n\\text{cycle} = P_{T}(u,v) \\cup \\{(u,v)\\}.\n$$\nTherefore, encountering a $\\mathrm{visited}$ neighbor $v$ that is not $\\mathrm{parent}[u]$ guarantees that the graph contains a cycle.\n\nNecessity of D: Suppose the graph contains a cycle. Let $T$ be the BFS tree defined by the $\\mathrm{parent}$ pointers. Because the graph has a cycle, there exists at least one original edge $e = (a,b)$ that is not in $T$ (no tree on the same vertex set can contain all cycle edges). Since $T$ spans all vertices, there is a unique path in $T$ between $a$ and $b$. During BFS, let $x$ be the endpoint of $e$ that is processed later, and let $y$ be the other endpoint. When $x$ is processed, $y$ is already marked $\\mathrm{visited}$, and because $e \\notin T$, we have $\\mathrm{parent}[x] \\neq y$. When examining edge $(x,y)$ from $x$’s adjacency list, the algorithm finds a neighbor $y$ that is $\\mathrm{visited}$ and not the $\\mathrm{parent}$ of $x$. Hence the event in D must occur if the graph has a cycle.\n\nTherefore, D is a necessary and sufficient condition.\n\nWhy the other options fail:\n- A is not sufficient: in any connected acyclic graph (a tree), when processing a vertex $u$, the neighbor $v = \\mathrm{parent}[u]$ is already $\\mathrm{visited}$, yet there is no cycle.\n- B is not sufficient and is uninformative: encountering the already $\\mathrm{visited}$ parent happens systematically for every non-root vertex in any BFS tree, regardless of cycles.\n- C is irrelevant: the size of the $\\mathrm{parent}$ array is a fixed implementation detail; in a connected graph, BFS visits all vertices and fills $\\mathrm{parent}[w]$ for all $w \\neq s$ whether or not cycles exist.\n- E contradicts connectedness: in a connected graph BFS visits all vertices, so the queue becomes empty only after visiting the entire vertex set; this condition cannot hold and says nothing about cycles.\n\nThus the precise necessary and sufficient condition is option D.", "answer": "$$\\boxed{D}$$", "id": "1354171"}]}