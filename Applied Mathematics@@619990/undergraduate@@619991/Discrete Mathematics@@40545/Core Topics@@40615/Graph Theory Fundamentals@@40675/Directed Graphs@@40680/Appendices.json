{"hands_on_practices": [{"introduction": "The first step in applying graph theory to real-world situations is translating a problem's description into a formal mathematical structure. This exercise provides practice in this crucial skill by modeling a set of project task dependencies as a directed graph and representing it with an adjacency list. Mastering this translation is a foundational skill for implementing graph algorithms and solving practical problems [@problem_id:1364479].", "problem": "In modern software development, projects are often broken down into smaller, manageable tasks. The relationships between these tasks can be modeled using a directed graph, where an edge from one task to another signifies a dependency.\n\nConsider a small software project consisting of four main tasks:\n*   T1: Develop Application Programming Interface (API) Endpoints\n*   T2: Design Database Schema\n*   T3: Build Frontend User Interface\n*   T4: Write User Documentation\n\nThe project manager has outlined the following dependencies:\n1.  Developing the API Endpoints (T1) can only begin after the Database Schema (T2) is designed.\n2.  Building the Frontend User Interface (T3) requires that both the API Endpoints (T1) and the Database Schema (T2) are completed.\n3.  Writing the User Documentation (T4) depends on the completion of both the API Endpoints (T1) and the Frontend User Interface (T3).\n\nLet these dependencies be modeled by a directed graph $G = (V, E)$, where the set of vertices $V = \\{\\text{T1, T2, T3, T4}\\}$ represents the tasks. A directed edge $(u, v) \\in E$ exists if task $u$ is a direct prerequisite for task $v$.\n\nYour task is to determine the correct adjacency list representation for this directed graph. The adjacency list must be formatted according to the following rules:\n*   The list of source vertices (T1, T2, T3, T4) must be sorted in lexicographical order.\n*   For each source vertex, its list of adjacent vertices must also be sorted in lexicographical order (e.g., `[T1, T3]` is correct, `[T3, T1]` is incorrect).\n*   An empty list of adjacent vertices is denoted by `[]`.\n\nWhich of the following options correctly represents the adjacency list for the described task dependency graph?\n\nA.\nT1: [T2]\nT2: []\nT3: [T1, T2]\nT4: [T1, T3]\n\nB.\nT1: [T3, T4]\nT2: [T1]\nT3: [T4]\nT4: []\n\nC.\nT1: [T3, T4]\nT2: [T1, T3]\nT3: [T4]\nT4: []\n\nD.\nT1: [T3, T4]\nT2: [T3, T1]\nT3: [T4]\nT4: []\n\nE.\nT1: [T3, T4]\nT2: [T1, T3, T4]\nT3: [T4]\nT4: []", "solution": "A directed edge points from each prerequisite task to the task that depends on it. Let $G=(V,E)$ with $V=\\{\\text{T1},\\text{T2},\\text{T3},\\text{T4}\\}$. From the dependencies:\n1. T1 can only begin after T2, so $(\\text{T2},\\text{T1})\\in E$.\n2. T3 requires T1 and T2, so $(\\text{T1},\\text{T3})\\in E$ and $(\\text{T2},\\text{T3})\\in E$.\n3. T4 depends on T1 and T3, so $(\\text{T1},\\text{T4})\\in E$ and $(\\text{T3},\\text{T4})\\in E$.\n\nThus the outgoing adjacency sets are:\n$$\\text{Adj}(\\text{T1})=\\{\\text{T3},\\text{T4}\\},\\quad \\text{Adj}(\\text{T2})=\\{\\text{T1},\\text{T3}\\},\\quad \\text{Adj}(\\text{T3})=\\{\\text{T4}\\},\\quad \\text{Adj}(\\text{T4})=\\varnothing.$$\nSorting each list lexicographically yields:\nT1: [T3, T4], T2: [T1, T3], T3: [T4], T4: [].\nComparing with the options, this matches option C exactly and respects the required ordering.", "answer": "$$\\boxed{C}$$", "id": "1364479"}, {"introduction": "Many complex networks can be better understood by breaking them down into their fundamental building blocks. This practice focuses on identifying Strongly Connected Components (SCCs), which are maximal groups of vertices where every vertex is reachable from every other within the group. This powerful decomposition technique reveals the underlying cyclic structures and high-level organization within a directed graph [@problem_id:1497280].", "problem": "A directed graph (digraph) is a fundamental structure used to model relationships where direction matters, such as one-way street networks, dependency charts in project management, or the flow of information in a communication network. A key concept in analyzing digraphs is the decomposition into strongly connected components.\n\nA **strongly connected component (SCC)** of a directed graph is a maximal set of vertices $C$ such that for every pair of vertices $u$ and $v$ in $C$, there is a directed path from $u$ to $v$ and a directed path from $v$ to $u$. The set of all SCCs forms a partition of the graph's vertices.\n\nConsider a digraph $G = (V, E)$ with the vertex set $V = \\{1, 2, 3, 4, 5, 6, 7, 8\\}$ and the edge set $E$ containing the following directed edges:\n$E = \\{(1, 2), (2, 3), (2, 7), (3, 1), (3, 4), (4, 5), (5, 6), (6, 4), (6, 8)\\}$.\n\nDetermine the partition of the vertex set $V$ into its strongly connected components. Which of the following represents this partition?\n\nA. $\\{\\{1, 2, 3\\}, \\{4, 5, 6\\}, \\{7\\}, \\{8\\}\\}$\n\nB. $\\{\\{1, 2, 3, 4, 5, 6, 7, 8\\}\\}$\n\nC. $\\{\\{1, 2, 3, 7\\}, \\{4, 5, 6\\}, \\{8\\}\\}$\n\nD. $\\{\\{1\\}, \\{2, 3\\}, \\{4, 5, 6\\}, \\{7\\}, \\{8\\}\\}$\n\nE. $\\{\\{1, 2, 3\\}, \\{4, 5, 6, 8\\}, \\{7\\}\\}$", "solution": "We analyze mutual reachability to determine the strongly connected components (SCCs) of the digraph $G=(V,E)$ with $V=\\{1,2,3,4,5,6,7,8\\}$ and $E=\\{(1,2),(2,3),(2,7),(3,1),(3,4),(4,5),(5,6),(6,4),(6,8)\\}$, using the definition that an SCC is a maximal subset $C \\subseteq V$ such that for every $u,v \\in C$ there are directed paths from $u$ to $v$ and from $v$ to $u$.\n\nFirst, consider the vertices $\\{1,2,3\\}$. The edges $(1,2)$, $(2,3)$, and $(3,1)$ yield the directed cycle $1 \\to 2 \\to 3 \\to 1$. Therefore:\n- $1 \\to 2$ directly, $2 \\to 1$ via $2 \\to 3 \\to 1$,\n- $2 \\to 3$ directly, $3 \\to 2$ via $3 \\to 1 \\to 2$,\n- $1 \\to 3$ via $1 \\to 2 \\to 3$, and $3 \\to 1$ directly.\nHence all pairs in $\\{1,2,3\\}$ are mutually reachable. There are edges leaving this set, namely $(2,7)$ and $(3,4)$, but there are no edges in $E$ that return from $7$ or from any of $\\{4,5,6,8\\}$ to $\\{1,2,3\\}$. In particular, $7$ has no outgoing edges, and within $\\{4,5,6,8\\}$ the only outgoing edges are $(4,5)$, $(5,6)$, $(6,4)$, and $(6,8)$, none of which go to $\\{1,2,3\\}$. Therefore there is no directed path from any vertex outside $\\{1,2,3\\}$ back into $\\{1,2,3\\}$, so the maximal SCC containing $1$ is $C_{1}=\\{1,2,3\\}$.\n\nNext, consider the vertices $\\{4,5,6\\}$. The edges $(4,5)$, $(5,6)$, and $(6,4)$ form the directed cycle $4 \\to 5 \\to 6 \\to 4$. Thus:\n- $4 \\to 5$ directly and $5 \\to 4$ via $5 \\to 6 \\to 4$,\n- $5 \\to 6$ directly and $6 \\to 5$ via $6 \\to 4 \\to 5$,\n- $4 \\to 6$ via $4 \\to 5 \\to 6$ and $6 \\to 4$ directly.\nHence all pairs in $\\{4,5,6\\}$ are mutually reachable. There is an outgoing edge $(6,8)$ leaving this set, but $8$ has no outgoing edges and thus cannot reach back to any of $\\{4,5,6\\}$. There is an incoming edge $(3,4)$ from $\\{1,2,3\\}$, but there is no path from $\\{4,5,6\\}$ back to any of $\\{1,2,3\\}$. Therefore the maximal SCC here is $C_{2}=\\{4,5,6\\}$.\n\nNow consider vertex $7$. It has a single incoming edge $(2,7)$ and no outgoing edges in $E$. Hence from $7$ there is no directed path to any other vertex, and no other vertex is reachable from $7$ except itself by the trivial path. Thus $7$ forms a singleton SCC, $C_{3}=\\{7\\}$.\n\nFinally, consider vertex $8$. It has a single incoming edge $(6,8)$ and no outgoing edges in $E$. Hence from $8$ there is no directed path to any other vertex, and no other vertex is reachable from $8$ except itself by the trivial path. Thus $8$ forms a singleton SCC, $C_{4}=\\{8\\}$.\n\nCollecting these, the partition of $V$ into SCCs is $\\{\\{1,2,3\\},\\{4,5,6\\},\\{7\\},\\{8\\}\\}$, which matches option A.", "answer": "$$\\boxed{A}$$", "id": "1497280"}, {"introduction": "When a set of tasks has prerequisites but no circular dependencies, the relationships can be modeled as a Directed Acyclic Graph (DAG). A key challenge in such scenarios is to determine a valid linear sequence for executing the tasks, a process known as topological sorting. This problem moves beyond simply finding one valid order to counting all possible valid schedules, offering deeper insight into the combinatorial nature of DAGs and their applications in project planning [@problem_id:1364426].", "problem": "A software company is structuring its deployment pipeline for a new project consisting of three independent microservices: an Authentication service, a Billing service, and a Catalog service. The deployment of each service involves two distinct tasks: deploying the backend and deploying the frontend.\n\nFor each of the three services, the backend component must be successfully deployed before its corresponding frontend component can be deployed.\nLet the tasks be denoted as follows:\n- Authentication service: $A_B$ (Backend) and $A_F$ (Frontend).\n- Billing service: $B_B$ (Backend) and $B_F$ (Frontend).\n- Catalog service: $C_B$ (Backend) and $C_F$ (Frontend).\n\nThe dependencies are:\n1. $A_B$ must be completed before $A_F$.\n2. $B_B$ must be completed before $B_F$.\n3. $C_B$ must be completed before $C_F$.\n\nThere are no other dependencies between any of the six tasks. A full deployment plan is a specific linear sequence of all six tasks. How many distinct valid deployment plans are possible?", "solution": "We have six distinct tasks: $A_B, A_F, B_B, B_F, C_B, C_F$, with precedence constraints $A_B \\prec A_F$, $B_B \\prec B_F$, and $C_B \\prec C_F$, and no other dependencies. A valid deployment plan is a linear order (permutation) of the six tasks respecting these three constraints.\n\nWithout constraints, the number of linear orders of six distinct tasks is\n$$\n6!.\n$$\nThe three constraints each restrict the relative order within a disjoint pair. Consider the following combinatorial argument. Partition the set of all $6!$ permutations into equivalence classes where two permutations are equivalent if one can be obtained from the other by independently swapping the two elements within any subset of the three disjoint pairs $\\{A_B, A_F\\}$, $\\{B_B, B_F\\}$, and $\\{C_B, C_F\\}$. For each of the three pairs, there are exactly $2$ possible internal orders, so each equivalence class has size\n$$\n2^{3}.\n$$\nWithin any such class, exactly one permutation places each backend before its corresponding frontend, hence exactly one permutation satisfies all three precedence constraints. Therefore, the total number of valid deployment plans is\n$$\n\\frac{6!}{2^{3}}.\n$$\nEvaluating,\n$$\n\\frac{6!}{2^{3}}=\\frac{720}{8}=90.\n$$\nThus, there are $90$ distinct valid deployment plans.", "answer": "$$\\boxed{90}$$", "id": "1364426"}]}