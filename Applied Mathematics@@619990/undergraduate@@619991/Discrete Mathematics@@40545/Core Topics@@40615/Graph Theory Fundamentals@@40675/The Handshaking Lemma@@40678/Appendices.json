{"hands_on_practices": [{"introduction": "The Handshaking Lemma provides a surprisingly simple yet powerful \"reality check\" for any proposed network or graph structure. This first exercise challenges you to apply the lemma in its most direct form: to determine whether a given network configuration is even possible to construct based on the number of connections for each node. It's a fundamental test of your understanding of how local properties (the degree of each vertex) constrain the global structure of a graph.[@problem_id:1408468]", "problem": "In a clandestine intelligence agency, the spymaster, \"M\", is designing a secure, point-to-point communication network for a critical mission involving 14 field agents. The network is modeled as a graph where each agent is a vertex and a direct, secure communication line between two agents is an edge. M's junior analyst proposes a network configuration with the following specifications for the number of direct contacts each agent should have:\n\n- Seven of the agents will each have exactly 5 direct contacts.\n- The other seven agents will each have exactly 4 direct contacts.\n\nM reviews the proposal and immediately identifies a fundamental flaw, rendering the proposed network impossible to construct. Which of the following statements provides the correct reason for the impossibility of this network design?\n\nA. The proposed network is impossible because the total number of communication links' endpoints (the sum of contacts for all spies) must be an even number.\n\nB. The proposed network is impossible because with 14 spies, no single spy can have fewer than 6 contacts for the network to be secure.\n\nC. The proposed network is impossible because it would force the network to be split into two disconnected groups of seven.\n\nD. The proposed network is perfectly feasible and can be constructed in multiple ways.\n\nE. The proposed network is impossible because the number of spies with an odd number of contacts must be zero.", "solution": "Model the network as a simple undirected graph with vertex set of size $14$, where each vertex represents an agent and each edge represents a mutual direct contact. By the handshaking lemma, the sum of the degrees over all vertices equals twice the number of edges:\n$$\n\\sum_{v \\in V} \\deg(v) = 2|E|.\n$$\nTherefore, the left-hand side must be an even integer. The proposed degree sequence assigns degree $5$ to seven vertices and degree $4$ to seven vertices, so the total sum of degrees is\n$$\n7 \\cdot 5 + 7 \\cdot 4 = 35 + 28 = 63.\n$$\nSince $63$ is odd, it cannot equal $2|E|$, which is even. This contradiction shows the proposed network is impossible. This matches statement A. Note that an equivalent obstruction is that the number of vertices with odd degree must be even, while here there are $7$ such vertices; however, statement E incorrectly claims this number must be zero, not merely even.", "answer": "$$\\boxed{A}$$", "id": "1408468"}, {"introduction": "Moving beyond simple possibility checks, the Handshaking Lemma is a crucial tool for quantifying the properties of a graph. This practice problem asks you to use the lemma to first calculate the current state of a network—its total number of edges—and then determine the work needed to reach a desired final state. It demonstrates how the lemma serves as a computational bridge between local information (individual connections) and a global property (the total number of collaborations).[@problem_id:1408471]", "problem": "A new Decentralized Autonomous Research Organization (DARO) has been formed with 15 members. To track joint projects, they maintain a collaboration network, which can be modeled as a simple graph where each researcher is a vertex and a direct one-on-one collaboration between two researchers is an edge. The number of collaborations for a particular researcher is their degree in the graph.\n\nCurrently, the network is incomplete. The state of collaborations is as follows:\n- Exactly 4 of the researchers have each collaborated with 9 others.\n- Exactly 6 of the researchers have each collaborated with 8 others.\n- The remaining 5 researchers have each collaborated with 10 others.\n\nThe ultimate goal of the DARO is to achieve a fully connected state, defined as a network where every possible pair of distinct researchers has a collaboration. How many new one-on-one collaborations must be formed to transition the network from its current state to the fully connected state?", "solution": "Let $n=15$ be the number of researchers. A fully connected network is the complete graph $K_{n}$, which has\n$$\nE_{\\text{complete}}=\\binom{n}{2}=\\binom{15}{2}=\\frac{15\\cdot 14}{2}=105\n$$\nedges.\n\nBy the handshaking lemma, the number of edges in the current network equals half the sum of the degrees. The degree data give a total degree sum\n$$\n\\sum \\deg = 4\\cdot 9 + 6\\cdot 8 + 5\\cdot 10 = 36 + 48 + 50 = 134,\n$$\nso the current number of edges is\n$$\nE_{\\text{current}}=\\frac{1}{2}\\sum \\deg = \\frac{134}{2}=67.\n$$\n\nTherefore, the number of new collaborations required to reach $K_{15}$ is\n$$\nE_{\\text{complete}} - E_{\\text{current}} = 105 - 67 = 38.\n$$", "answer": "$$\\boxed{38}$$", "id": "1408471"}, {"introduction": "The consequences of the Handshaking Lemma extend beyond static analysis into the design of dynamic network algorithms. A key corollary states that the number of vertices with an odd degree must be even. This advanced problem challenges you to think algorithmically: given a set of \"unbalanced\" nodes, how can they pair up to resolve this imbalance in a distributed system with no central controller? This exercise bridges graph theory with practical challenges in computer science, such as network self-healing and protocol design.[@problem_id:1408433]", "problem": "In a decentralized peer-to-peer network, a subset of nodes finds themselves in an \"unbalanced\" state, characterized by having an odd number of active connections (an odd degree in the graph model of the network). Let this set of unbalanced nodes be denoted by $V_{odd}$. From the handshaking lemma, we know the number of such nodes must be even, so let $|V_{odd}| = 2k$ for some integer $k \\ge 1$. To restore balance to the entire network, exactly $k$ new, direct connections must be established exclusively between pairs of nodes within $V_{odd}$, such that every node in $V_{odd}$ increases its degree by one, thereby achieving an even degree.\n\nEach node $v \\in V_{odd}$ has a unique positive integer ID, denoted `id(v)`. The nodes must coordinate among themselves to form these $k$ pairs using a distributed algorithm. An algorithm is considered fully distributed if it does not rely on a single, pre-determined or elected special node (a \"leader\") to centrally compute and dictate the pairings for all other nodes. Every node must execute the same local protocol.\n\nWhich of the following proposed distributed protocols, executed by every node in $V_{odd}$, is guaranteed to correctly form the $k$ required pairings and terminate?\n\nA. **Highest-ID-First Protocol:** Each currently unpaired node $v$ sends a \"PAIR_REQUEST\" message to the unpaired node $u$ that has the highest ID. When a node receives one or more such requests, it accepts the request from the sender with the highest ID, forms a permanent pair with that sender, and both nodes cease further participation. The process repeats among the remaining unpaired nodes.\n\nB. **Random Handshake Protocol:** Each unpaired node $v$ randomly selects another unpaired node $u$ and sends it a \"PAIR_REQUEST\" message. If node $v$ sends a request to $u$ and also receives a request from $u$ in the same communication round, they form a pair and cease further participation. If a symmetric request is not found, the node tries again with a new random selection in the next round.\n\nC. **Parallel Sort-and-Pair Protocol:** The protocol occurs in two phases. First, all nodes in $V_{odd}$ engage in a discovery phase to learn the IDs of all other nodes in $V_{odd}$. After this phase, every node possesses a complete list of the $2k$ IDs. Second, each node independently sorts this list of IDs in ascending order to produce an identical ordered list, $L = (u_1, u_2, \\dots, u_{2k})$. The node then determines its partner based on this list: for $j = 1, \\dots, k$, node $u_{2j-1}$ is designated to pair with node $u_{2j}$. To establish the connection, node $u_{2j-1}$ sends a single \"CONNECT\" message to $u_{2j}$, which is immediately accepted.\n\nD. **Symmetric Broadcast Protocol:** Each unpaired node $v$ broadcasts a \"PAIR_REQUEST\" message containing its ID to all other unpaired nodes. When a node $u$ receives a request from $v$, it checks if it has also sent a request to $v$. If this symmetric condition is met, the two nodes form a pair and cease participation. To resolve conflicts where a node might find symmetric links with multiple others, a node always prioritizes the potential partner with the lowest ID.", "solution": "We are given a set $V_{odd}$ with $|V_{odd}|=2k$, and the goal is to design a fully distributed protocol that deterministically produces exactly $k$ disjoint pairs within $V_{odd}$, so that every node increases its degree by one and becomes even. A correct protocol must guarantee:\n- Safety: every node in $V_{odd}$ is paired with exactly one other node in $V_{odd}$.\n- Liveness/termination: the procedure finishes in finite time.\n- Full distribution: no single leader centrally computes or dictates all pairings; every node executes the same local rules.\n\nWe examine each option.\n\nAnalysis of A (Highest-ID-First Protocol):\n- The rule states: each currently unpaired node $v$ sends a request to the unpaired node $u$ with the highest ID. Literal application implies that if $v$ is itself the node with the highest ID, then $u=v$, which would require self-targeting. Since self-pairing is not allowed, the rule is ill-defined for the maximum-ID node. Therefore, as stated, A is not guaranteed to be well-defined or correct.\n- Even ignoring the self-targeting issue, the rule presupposes that each node can determine which nodes are currently unpaired and who has the highest ID among them. No discovery or consensus mechanism to maintain this dynamic global knowledge is specified. In an asynchronous setting, nodes could simultaneously target a node that has just paired and ceased participation, leading to indefinite retries without a guaranteed convergence mechanism. Hence A is not guaranteed to terminate correctly as specified.\n\nAnalysis of B (Random Handshake Protocol):\n- Nodes choose partners uniformly at random and only pair on symmetric choices in the same round. While pairs may form over time, there is a nonzero probability that some nodes never obtain symmetric choices in finite rounds. Therefore termination is not guaranteed; correctness is not ensured with certainty. Thus B fails the guarantee requirement.\n\nAnalysis of C (Parallel Sort-and-Pair Protocol):\n- Phase 1 ensures every node learns the full set of IDs in $V_{odd}$, so each node obtains an identical list $L=(u_{1},u_{2},\\dots,u_{2k})$ sorted in ascending order of IDs.\n- Phase 2 defines a deterministic pairing function: for each $j \\in \\{1,\\dots,k\\}$, pair $(u_{2j-1},u_{2j})$. This induces a perfect matching of $V_{odd}$ because the pairs are disjoint and cover all $2k$ nodes exactly once.\n- Only $u_{2j-1}$ sends a single \"CONNECT\" to $u_{2j}$, and $u_{2j}$ accepts immediately. Since each node appears in exactly one pair, there are no conflicts. Termination occurs after one connect step per pair following the discovery phase.\n- No leader is elected or predesignated; all nodes execute identical steps and compute the same deterministic pairing locally. Therefore C is fully distributed, safe, and guaranteed to terminate.\n\nAnalysis of D (Symmetric Broadcast Protocol):\n- Each node broadcasts to all others, so for any two distinct nodes $u$ and $v$, both have sent to each other in the same round. The symmetric condition is thus satisfied for all pairs simultaneously. The conflict resolution rule \"choose the lowest ID\" makes many nodes choose the same lowest-ID partner. For example, with IDs $u_{1}<u_{2}<u_{3}<u_{4}$, nodes $u_{3}$ and $u_{4}$ both prioritize $u_{1}$, while $u_{1}$ prioritizes $u_{2}$. Without an explicit, globally consistent commit/ack mechanism ensuring that both endpoints select each other, the rule can produce conflicting simultaneous pair attempts. The protocol as specified does not provide a mechanism to avoid or resolve such conflicts deterministically in one round, nor does it specify a discovery/update phase to guarantee convergence across rounds to the set of remaining unpaired nodes. Hence D is not guaranteed to produce a correct perfect matching and terminate.\n\nTherefore, only the Parallel Sort-and-Pair Protocol (C) is guaranteed to correctly form the $k$ pairings and terminate in a fully distributed manner.", "answer": "$$\\boxed{C}$$", "id": "1408433"}]}