{"hands_on_practices": [{"introduction": "The first step in applying mathematical principles to real-world problems is often learning how to translate them into an abstract model. The Four Color Theorem is a statement about planar graphs, so to use it for coloring maps, we must first represent a map as a graph. This exercise [@problem_id:1541737] guides you through this fundamental process by constructing a \"dual graph,\" where each region becomes a vertex and each shared border becomes an edge.", "problem": "In graph theory, a geographical map can be modeled as a planar graph. An important related structure is the dual graph. For a given map, its dual graph is constructed by creating a vertex for each region of the map (including the unbounded outer region) and adding an edge between two vertices if and only if the corresponding regions share a common border.\n\nConsider the fictional island of Cartographia, surrounded by the Great Ocean. The island is divided into six countries: Aethelgard, Brynnland, Cyrendale, Drakenheim, Eldoria, and Faelands. The layout is described by the borders shared between countries:\n- Aethelgard shares borders with Brynnland and Faelands.\n- Brynnland shares borders with Aethelgard and Cyrendale.\n- Cyrendale shares borders with Brynnland and Drakenheim.\n- Drakenheim is a landlocked country, sharing all of its borders with Cyrendale, Eldoria, and Faelands.\n- Eldoria shares borders with Drakenheim and Faelands.\n- Faelands shares borders with Aethelgard, Drakenheim, and Eldoria.\n\nAll countries not specified as landlocked are coastal, meaning they each share a border with the surrounding Great Ocean.\n\nWhat is the total number of edges in the dual graph for the map of Cartographia?", "solution": "The problem asks for the total number of edges in the dual graph of a given map. According to the definition provided, the vertices of the dual graph correspond to the regions of the map, and the edges of the dual graph correspond to the shared borders between these regions. Therefore, to find the total number of edges in the dual graph, we need to count the total number of border segments on the map.\n\nFirst, let's identify all the regions on the map. There are six countries and one outer region:\n1.  Aethelgard (A)\n2.  Brynnland (B)\n3.  Cyrendale (C)\n4.  Drakenheim (D)\n5.  Eldoria (E)\n6.  Faelands (F)\n7.  The Great Ocean (O)\n\nThese 7 regions will be the vertices of the dual graph.\n\nNext, we count the number of borders. We can categorize the borders into two types: internal borders (between two countries) and coastal borders (between a country and the Great Ocean).\n\nLet's list the internal borders by systematically going through the description. We list each pair of bordering countries once.\n1.  Border between Aethelgard and Brynnland: 1 edge.\n2.  Border between Aethelgard and Faelands: 1 edge.\n3.  Border between Brynnland and Cyrendale: 1 edge. (The border with Aethelgard is already counted).\n4.  Border between Cyrendale and Drakenheim: 1 edge. (The border with Brynnland is already counted).\n5.  Border between Drakenheim and Eldoria: 1 edge. (The border with Cyrendale is already counted).\n6.  Border between Drakenheim and Faelands: 1 edge.\n7.  Border between Eldoria and Faelands: 1 edge. (The border with Drakenheim is already counted).\n\nLet's verify we have not missed any from the description.\n- A borders B, F: Counted.\n- B borders A, C: Counted.\n- C borders B, D: Counted.\n- D borders C, E, F: Counted.\n- E borders D, F: Counted.\n- F borders A, D, E: Counted.\nThe total number of internal borders is 7.\n\nNow, let's count the coastal borders. The problem states that all countries not specified as landlocked are coastal. Drakenheim is explicitly stated to be landlocked. Therefore, the coastal countries are Aethelgard, Brynnland, Cyrendale, Eldoria, and Faelands. Each of these 5 countries shares a border with the Great Ocean.\n1.  Border between Aethelgard and the Ocean: 1 edge.\n2.  Border between Brynnland and the Ocean: 1 edge.\n3.  Border between Cyrendale and the Ocean: 1 edge.\n4.  Border between Eldoria and the Ocean: 1 edge.\n5.  Border between Faelands and the Ocean: 1 edge.\nThe total number of coastal borders is 5.\n\nThe total number of edges in the dual graph is the sum of the internal borders and the coastal borders.\nTotal edges = (Number of internal borders) + (Number of coastal borders)\nTotal edges = $7 + 5 = 12$.\n\nAs a check, we can use the handshaking lemma on the dual graph. The degree of a vertex in the dual graph is the number of regions adjacent to the corresponding region on the map.\n- $\\deg(A) = $ borders with B, F, O = 3.\n- $\\deg(B) = $ borders with A, C, O = 3.\n- $\\deg(C) = $ borders with B, D, O = 3.\n- $\\deg(D) = $ borders with C, E, F = 3.\n- $\\deg(E) = $ borders with D, F, O = 3.\n- $\\deg(F) = $ borders with A, D, E, O = 4.\n- $\\deg(O) = $ borders with A, B, C, E, F = 5.\nThe sum of degrees is $3 + 3 + 3 + 3 + 3 + 4 + 5 = 24$.\nBy the handshaking lemma, the sum of degrees is twice the number of edges ($2|E|$).\n$2|E| = 24$, so $|E| = 12$.\nThe result is confirmed.", "answer": "$$\\boxed{12}$$", "id": "1541737"}, {"introduction": "While the theorem guarantees that four colors are always sufficient, it doesn't mean they are always necessary, as many simple maps can be colored with fewer. This thought experiment [@problem_id:1407441] challenges you to visualize a scenario where four colors are indispensable, providing a clear and intuitive justification for the \"four\" in the Four Color Theorem. By modeling a map where every region is adjacent to every other, you will see precisely why three colors are not enough.", "problem": "A graphic designer is tasked with creating a logo for a new environmental alliance formed by four organizations: an organization for Forests (F), one for Oceans (O), a third for Mountains (M), and a fourth for Deserts (D). The design brief specifies that the logo must consist of four distinct, contiguous regions, one for each organization. A key constraint is that every organization's region must be adjacent to the other three, symbolizing their interconnected and collaborative nature. To distinguish the regions, they must be filled with different colors. According to the rules of coloring, any two adjacent regions must have different colors. What is the minimum number of colors the designer needs to complete this logo according to the specifications?", "solution": "Model the logo as a planar map and its adjacency as a graph: assign one vertex to each region $F, O, M, D$, and connect two vertices by an edge if the corresponding regions share a boundary segment. The requirement that every region is adjacent to each of the other three means the adjacency graph is the complete graph on four vertices, $G \\cong K_{4}$.\n\nA valid coloring of the logo corresponds to a proper vertex coloring of $G$, i.e., an assignment of colors to vertices such that adjacent vertices receive different colors. The minimum number of colors needed is the chromatic number $\\chi(G)$.\n\nSince $G \\cong K_{4}$ has a clique of size $4$, its clique number is $\\omega(G)=4$, and hence\n$$\n\\chi(G) \\geq \\omega(G) = 4.\n$$\nThis lower bound can also be seen directly: if only $3$ colors were used on $4$ regions, by the pigeonhole principle two regions would share a color; but in $K_{4}$ every pair of regions is adjacent, so any two identically colored regions would violate the adjacency rule. Therefore at least $4$ colors are necessary.\n\nConversely, $4$ colors suffice by assigning a distinct color to each of the four mutually adjacent regions, which yields a proper coloring. Hence\n$$\n\\chi(K_{4})=4.\n$$\n\nTherefore, the minimum number of colors required is $4$.", "answer": "$$\\boxed{4}$$", "id": "1407441"}, {"introduction": "A fascinating aspect of the Four Color Theorem is the gap between knowing a solution exists and actually finding one efficiently. This exercise [@problem_id:1407388] demonstrates that even though a 4-coloring is guaranteed for any planar graph, a simple and intuitive \"greedy\" algorithm can fail to find an optimal coloring. By stepping through a specific coloring sequence, you will gain insight into the computational complexity hidden behind this famously simple-to-state theorem.", "problem": "In the study of graph theory, the Four Color Theorem guarantees that any planar graph can be colored with at most four colors such that no two adjacent vertices share the same color. However, finding such a coloring is not always straightforward. Simple algorithms, like the greedy coloring algorithm, can sometimes fail to find an optimal coloring and may use more colors than necessary.\n\nThis problem explores such a scenario. Consider a planar graph $G=(V, E)$ with the vertex set $V = \\{a_1, a_2, a_3, b_1, b_2, b_3, c, d\\}$. The edge set $E$ is defined by the following adjacencies:\n- The vertices $\\{a_1, a_2, a_3\\}$ form a complete subgraph (a triangle).\n- The vertices $\\{b_1, b_2, b_3\\}$ form a complete subgraph (a triangle).\n- Vertex $c$ is adjacent to $a_1, a_2,$ and $a_3$.\n- Vertex $d$ is adjacent to $b_1, b_2,$ and $b_3$.\n- Vertex $c$ is adjacent to vertex $d$.\n\nA greedy coloring algorithm is applied to this graph. The algorithm processes vertices sequentially according to a specified ordering. For each vertex, it assigns the smallest positive integer (which represents a color index, e.g., 1, 2, 3, ...) that has not been used by any of its neighbors that have already been colored in the sequence.\n\nThe vertices are processed in the following specific order:\n$a_1, b_1, a_2, b_2, a_3, b_3, c, d$\n\nYour task is to determine the color index that the algorithm assigns to the final vertex in the sequence, $d$.", "solution": "The problem asks for the color index assigned to vertex $d$ by a greedy coloring algorithm. We will simulate the algorithm step-by-step, following the given vertex ordering: $a_1, b_1, a_2, b_2, a_3, b_3, c, d$. The colors are represented by the smallest available positive integers $\\{1, 2, 3, \\ldots\\}$. Let $c(v)$ denote the color assigned to vertex $v$.\n\n1.  **Process $a_1$**: This is the first vertex. It has no previously colored neighbors. The algorithm assigns the smallest available color.\n    $c(a_1) = 1$.\n\n2.  **Process $b_1$**: The neighbors of $b_1$ are $\\{b_2, b_3, d\\}$. None of these have been colored yet. The algorithm assigns the smallest available color.\n    $c(b_1) = 1$.\n\n3.  **Process $a_2$**: The neighbors of $a_2$ are $\\{a_1, a_3, c\\}$. The only previously colored neighbor is $a_1$. The color used by its neighbors is $\\{c(a_1)\\} = \\{1\\}$. The smallest color not in this set is 2.\n    $c(a_2) = 2$.\n\n4.  **Process $b_2$**: The neighbors of $b_2$ are $\\{b_1, b_3, d\\}$. The only previously colored neighbor is $b_1$. The color used by its neighbors is $\\{c(b_1)\\} = \\{1\\}$. The smallest color not in this set is 2.\n    $c(b_2) = 2$.\n\n5.  **Process $a_3$**: The neighbors of $a_3$ are $\\{a_1, a_2, c\\}$. The previously colored neighbors are $a_1$ and $a_2$. The set of colors used by these neighbors is $\\{c(a_1), c(a_2)\\} = \\{1, 2\\}$. The smallest color not in this set is 3.\n    $c(a_3) = 3$.\n\n6.  **Process $b_3$**: The neighbors of $b_3$ are $\\{b_1, b_2, d\\}$. The previously colored neighbors are $b_1$ and $b_2$. The set of colors used by these neighbors is $\\{c(b_1), c(b_2)\\} = \\{1, 2\\}$. The smallest color not in this set is 3.\n    $c(b_3) = 3$.\n\n7.  **Process $c$**: The neighbors of $c$ are $\\{a_1, a_2, a_3, d\\}$. The previously colored neighbors are $a_1, a_2,$ and $a_3$. The set of colors used by these neighbors is $\\{c(a_1), c(a_2), c(a_3)\\} = \\{1, 2, 3\\}$. The smallest color not in this set is 4.\n    $c(c) = 4$.\n\n8.  **Process $d$**: This is the final vertex. The neighbors of $d$ are $\\{b_1, b_2, b_3, c\\}$. All of these neighbors have been colored in the preceding steps. The set of colors used by its neighbors is $\\{c(b_1), c(b_2), c(b_3), c(c)\\} = \\{1, 2, 3, 4\\}$. The smallest positive integer not in this set is 5. Therefore, the algorithm must assign a new color.\n    $c(d) = 5$.\n\nThe color index assigned to the final vertex, $d$, is 5. This demonstrates that while the graph is 4-colorable (a fact guaranteed by the Four Color Theorem as it is planar, and can be verified independently), this specific application of the greedy algorithm results in a 5-coloring.", "answer": "$$\\boxed{5}$$", "id": "1407388"}]}