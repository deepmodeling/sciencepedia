{"hands_on_practices": [{"introduction": "This first exercise grounds the abstract concept of the chromatic number in a tangible, real-world scenario. You will model a chemical storage puzzle as a graph, where vertices represent chemicals and edges represent incompatibilities. This practice is designed to develop your skill in translating practical constraints into a formal graph problem, showing how finding the minimum number of storage cabinets is equivalent to determining the chromatic number of the corresponding graph [@problem_id:1405215].", "problem": "A chemistry lab needs to store a set of six distinct reactive chemicals, labeled C1, C2, C3, C4, C5, and C6. Due to their volatile nature, certain pairs of chemicals cannot be stored in the same cabinet. The safety protocol specifies the following pairs as incompatible:\n- C1 and C2\n- C2 and C3\n- C3 and C4\n- C4 and C5\n- C5 and C6\n\nAny pair of chemicals not on this list is considered safe to store together. To minimize costs, the lab manager wants to determine the absolute minimum number of storage cabinets required to store all six chemicals according to these safety rules.\n\nWhat is this minimum number of cabinets?", "solution": "Model the constraints as a graph $G$ whose vertices are the chemicals $C_{1},C_{2},C_{3},C_{4},C_{5},C_{6}$, with an edge between two vertices if the corresponding chemicals are incompatible and thus cannot be stored in the same cabinet. The given incompatible pairs are exactly the edges of the path $C_{1}-C_{2}-C_{3}-C_{4}-C_{5}-C_{6}$, so $G$ is the path graph on six vertices.\n\nStoring chemicals in cabinets so that no incompatible pair shares a cabinet is equivalent to partitioning the vertex set into independent sets of $G$. The minimum number of such cabinets equals the chromatic number $\\chi(G)$, the least number of colors needed to properly color $G$ so that adjacent vertices receive different colors.\n\nA path graph is bipartite: its vertices can be partitioned into two independent sets according to parity of indices. Explicitly, take\n- one set $\\{C_{1},C_{3},C_{5}\\}$,\n- the other set $\\{C_{2},C_{4},C_{6}\\}$.\nAll edges of the path connect a vertex from one set to a vertex from the other, and there are no edges within either set. Therefore a $2$-coloring exists, so $\\chi(G) \\leq 2$.\n\nSince $G$ has at least one edge, $\\chi(G) \\neq 1$; with one cabinet, some adjacent incompatible pair would be placed together, which violates the constraints. Hence $\\chi(G) \\geq 2$.\n\nCombining these, $\\chi(G)=2$, so the minimum number of cabinets required is $2$. An explicit feasible assignment is: cabinet A contains $C_{1},C_{3},C_{5}$ and cabinet B contains $C_{2},C_{4},C_{6}$.", "answer": "$$\\boxed{2}$$", "id": "1405215"}, {"introduction": "Having established the basics, this problem challenges a common intuition: that a graph requiring $k$ colors must contain a clique of size $k$. You are tasked with designing a network that is triangle-free, meaning its clique number $\\omega(G) = 2$, yet requires three distinct frequency channels, meaning its chromatic number $\\chi(G) = 3$. This exercise [@problem_id:1405216] illuminates the crucial role of odd cycles in determining a graph's chromatic number, forcing a deeper understanding beyond just local density.", "problem": "A company is designing a wireless communication network. The network consists of several identical transmission towers, which can be modeled as vertices in a simple graph $G$. A communication link between two towers is represented by an edge. To prevent signal interference, any two towers connected by an edge must operate on different frequency channels.\n\nThe engineering team has two specific design constraints:\n1. The network must be \"triangle-free\". This means there is no set of three distinct towers where each tower is directly linked to the other two.\n2. The network design is such that it is impossible to schedule all communications using only two frequency channels; at least three are required.\n\nGiven these constraints, what is the minimum possible number of towers required to build such a network?", "solution": "Let $G$ be a simple graph modeling the network. The requirement that adjacent towers use different frequency channels is exactly graph coloring; the minimum number of channels needed is the chromatic number $\\chi(G)$. The constraints translate to:\n- Triangle-free: $G$ has no $K_{3}$ subgraph.\n- Not 2-colorable: $\\chi(G) \\ge 3$.\n\nA fundamental theorem in graph theory states that a graph is bipartite if and only if it contains no odd cycle. Equivalently, $G$ is not 2-colorable if and only if $G$ contains an odd cycle $C_{2k+1}$ for some integer $k \\ge 1$. Since $G$ is triangle-free, it cannot contain $C_{3}$; hence any odd cycle in $G$ must have length at least $5$. Therefore, any such $G$ must contain a cycle $C_{2k+1}$ with $2k+1 \\ge 5$, which implies that $|V(G)| \\ge 5$. This gives the lower bound that at least $5$ vertices (towers) are necessary.\n\nTo show that $5$ suffices, consider the cycle graph $C_{5}$. It is triangle-free because its shortest cycle has length $5$, so it contains no $K_{3}$. Moreover, for cycles, one has $\\chi(C_{n})=2$ when $n$ is even and $\\chi(C_{n})=3$ when $n$ is odd. In particular, $\\chi(C_{5})=3$, so $C_{5}$ is not 2-colorable and requires exactly $3$ colors. Thus the constraints are satisfied with $5$ vertices.\n\nCombining the lower bound and the explicit example, the minimum possible number of towers is $5$.", "answer": "$$\\boxed{5}$$", "id": "1405216"}, {"introduction": "While knowing the chromatic number is useful, finding it is often computationally difficult. This practice shifts our focus from theoretical properties to a practical algorithm used to find a valid coloring: the greedy algorithm. By analyzing the same set of conflicting tasks with two different orderings [@problem_id:1539406], you will directly observe how this heuristic's performance can vary, sometimes yielding an optimal solution and other times a sub-optimal one, which highlights a fundamental challenge in combinatorial optimization.", "problem": "A technology firm is developing an automated scheduling system for a set of six specialized computational tasks: $A_1, A_2, A_3, B_1, B_2, B_3$. Due to resource dependencies, some pairs of tasks are \"conflicting\" and cannot be run in the same time slot. The conflict rules are as follows:\n\n1.  There are no conflicts between any two tasks from the set $\\{A_1, A_2, A_3\\}$.\n2.  There are no conflicts between any two tasks from the set $\\{B_1, B_2, B_3\\}$.\n3.  A conflict exists between a task $A_i$ and a task $B_j$ if and only if their indices are different, i.e., $i \\neq j$.\n\nThe scheduling system uses a greedy algorithm. It processes tasks one by one according to a given ordered list. For each task, it assigns the smallest positive integer time slot (1, 2, 3, ...) that is not already being used by any of the previously scheduled tasks that conflict with the current task.\n\nYour goal is to analyze the performance of this algorithm with two different task orderings.\n\n-   First, consider the ordering $\\sigma_1 = (A_1, B_1, A_2, B_2, A_3, B_3)$. Let $k_1$ be the total number of distinct time slots used for this ordering.\n-   Second, consider the ordering $\\sigma_2 = (A_1, A_2, A_3, B_1, B_2, B_3)$. Let $k_2$ be the total number of distinct time slots used for this ordering.\n\nDetermine the values of $k_1$ and $k_2$. Provide your answer as a pair of integers $(k_1, k_2)$.", "solution": "We model the situation as graph coloring under the greedy algorithm: each task is a vertex, edges represent conflicts, and the algorithm assigns to each vertex, in the given order, the smallest positive integer not used by any already colored conflicting vertices.\n\nConflicts are defined as follows:\n- No conflicts within $\\{A_{1}, A_{2}, A_{3}\\}$ and none within $\\{B_{1}, B_{2}, B_{3}\\}$.\n- $A_{i}$ conflicts with $B_{j}$ if and only if $i \\neq j$.\n\nFor $\\sigma_{1} = (A_{1}, B_{1}, A_{2}, B_{2}, A_{3}, B_{3})$:\n- $A_{1}$: no earlier conflicting tasks, assign color $1$.\n- $B_{1}$: does not conflict with $A_{1}$, assign color $1$.\n- $A_{2}$: conflicts with $B_{1}$ (color $1$), so color $1$ is forbidden; assign color $2$.\n- $B_{2}$: conflicts with $A_{1}$ (color $1$), so color $1$ is forbidden; assign color $2$.\n- $A_{3}$: conflicts with $B_{1}$ (color $1$) and $B_{2}$ (color $2$); colors $1$ and $2$ are forbidden; assign color $3$.\n- $B_{3}$: conflicts with $A_{1}$ (color $1$) and $A_{2}$ (color $2$); colors $1$ and $2$ are forbidden; assign color $3$.\nThus $k_{1} = 3$.\n\nFor $\\sigma_{2} = (A_{1}, A_{2}, A_{3}, B_{1}, B_{2}, B_{3})$:\n- $A_{1}$: no earlier conflicting tasks, assign color $1$.\n- $A_{2}$: no conflict with $A_{1}$, assign color $1$.\n- $A_{3}$: no conflict with $A_{1}, A_{2}$, assign color $1$.\n- $B_{1}$: conflicts with $A_{2}$ and $A_{3}$ (both color $1$); color $1$ is forbidden; assign color $2$.\n- $B_{2}$: conflicts with $A_{1}$ and $A_{3}$ (color $1$); color $1$ is forbidden; assign color $2$.\n- $B_{3}$: conflicts with $A_{1}$ and $A_{2}$ (color $1$); color $1$ is forbidden; assign color $2$.\nThus $k_{2} = 2$.\n\nTherefore, $(k_{1}, k_{2}) = (3, 2)$.", "answer": "$$\\boxed{(3, 2)}$$", "id": "1539406"}]}