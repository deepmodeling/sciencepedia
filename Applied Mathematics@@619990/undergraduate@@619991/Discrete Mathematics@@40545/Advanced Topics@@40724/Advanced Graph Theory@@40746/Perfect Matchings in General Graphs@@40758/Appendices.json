{"hands_on_practices": [{"introduction": "Let's begin our hands-on exploration by tackling a fundamental counting problem. Before delving into complex theorems about existence, it's crucial to have a solid grasp of what a perfect matching is. This exercise [@problem_id:1390456] provides a perfect opportunity to do so by asking you to count the number of distinct perfect matchings in the complete graph $K_6$. This practice solidifies the definition by translating it into a tangible combinatorial puzzle, honing your skills in counting partitions.", "problem": "In graph theory, an undirected graph consists of a set of vertices and a set of edges, where each edge connects a pair of distinct vertices. A **matching** in a graph is a set of edges where no two edges share a common vertex. A matching is called a **perfect matching** if every vertex in the graph is an endpoint of exactly one edge in the matching.\n\nA **complete graph** on $n$ vertices, denoted as $K_n$, is a graph where every pair of distinct vertices is connected by a unique edge.\n\nConsider the complete graph on 6 vertices, $K_6$. Calculate the total number of distinct perfect matchings in this graph.", "solution": "A perfect matching in $K_{6}$ corresponds to partitioning the $6$ labeled vertices into $3$ disjoint unordered pairs. Count all ways to arrange the $6$ vertices and then divide by the symmetries of pairing:\n- There are $6!$ permutations of the $6$ vertices.\n- Each pair can be internally swapped in $2$ ways, contributing a factor of $2^{3}$ for $3$ pairs.\n- The $3$ pairs themselves can be ordered in $3!$ ways.\n\nTherefore, the total number of distinct perfect matchings is\n$$\n\\frac{6!}{2^{3} \\cdot 3!}.\n$$\nEvaluating,\n$$\n\\frac{6!}{2^{3} \\cdot 3!}=\\frac{720}{8 \\cdot 6}=\\frac{720}{48}=15.\n$$\nEquivalently, using the double factorial form for $K_{2n}$, the count is $(2n-1)!!$, which for $n=3$ gives $5 \\cdot 3 \\cdot 1=15$.", "answer": "$$\\boxed{15}$$", "id": "1390456"}, {"introduction": "Moving from counting to existence, we now ask a more profound question: can a graph's local properties guarantee the existence of a global structure like a perfect matching? This problem [@problem_id:1390472] explores this question within the context of 3-regular graphs, where every vertex has a uniform number of connections. Using proof by contradiction and foundational concepts, you will demonstrate a non-obvious property for an entire class of graphs, an essential skill in a mathematician's toolkit.", "problem": "In network theory, a common topology is a *k-regular graph*, where every node (vertex) has exactly *k* connections (edges). A *simple graph* is one with no loops (edges from a vertex to itself) and no more than one edge between any two vertices. A critical property for some network protocols is the existence of a *perfect matching*, which is a set of edges where no two edges share a vertex, and every vertex in the graph is an endpoint of exactly one edge in the set. This corresponds to partitioning all nodes into disjoint pairs of directly connected nodes.\n\nAn edge in a connected graph is called a *bridge* if its removal increases the number of connected components of the graph.\n\nA systems architect is investigating communication networks with 8 nodes, where each node is connected to exactly 3 other nodes. They are interested in the possibility of designing such a network that *cannot* be perfectly partitioned into communicating pairs. Which of the following statements correctly describes this situation?\n\nA. Every simple, 3-regular graph with 8 vertices has a perfect matching.\n\nB. There exists exactly one simple, 3-regular graph with 8 vertices (up to isomorphism) that does not have a perfect matching.\n\nC. There are exactly two distinct simple, 3-regular graphs with 8 vertices (up to isomorphism) that do not have a perfect matching.\n\nD. There are more than two distinct simple, 3-regular graphs with 8 vertices (up to isomorphism) that do not have a perfect matching.", "solution": "Let $G$ be a simple $3$-regular graph on $n=8$ vertices. We show that $G$ must have a perfect matching.\n\nWe use the following theorem: Petersen's theorem states that every bridgeless cubic (that is, $3$-regular) graph has a perfect matching. Therefore, if a cubic graph has no perfect matching, it must contain a bridge.\n\nAssume for contradiction that $G$ has no perfect matching. Then $G$ must have a bridge $e=uv$. Consider the graph $G-e$, which has exactly two connected components; let one component be $H$ with $m$ vertices (containing $u$), and the other component be $H'$ with $n-m$ vertices (containing $v$), where $n=8$.\n\nIn the component $H$, the degrees of vertices are as follows: vertex $u$ has degree $2$ (since it lost the edge $e$), and every other vertex still has degree $3$ (no other edges were removed). Therefore, the sum of degrees in $H$ is\n$$\n\\sum_{x \\in V(H)} \\deg_{H}(x) = 2 + 3(m-1) = 3m - 1.\n$$\nBy the Handshaking Lemma, the sum of degrees in any finite graph is twice the number of edges and hence even. Thus $3m - 1$ is even, which implies that $m$ is odd:\n$$\n3m - 1 \\equiv 0 \\pmod{2} \\;\\Longrightarrow\\; 3m \\equiv 1 \\pmod{2} \\;\\Longrightarrow\\; m \\equiv 1 \\pmod{2}.\n$$\nThe same reasoning applies to $H'$, so both components have odd order. Since $m + (n - m) = n = 8$, the only way both component sizes are odd is that one has size $3$ and the other has size $5$.\n\nNow, because $G$ is simple and $3$-regular, in each component all vertices except the bridge-endpoint must have degree $3$ within that component. In a simple graph on $m$ vertices, the maximum possible degree is $m-1$. Therefore, to allow vertices of degree $3$ in $H$, we must have\n$$\nm - 1 \\geq 3 \\;\\Longrightarrow\\; m \\geq 4.\n$$\nCombining this with the parity constraint $m$ odd gives $m \\geq 5$. Hence each component of $G-e$ must have at least $5$ vertices, implying\n$$\nn \\geq 5 + 5 = 10,\n$$\nwhich contradicts $n=8$.\n\nTherefore, $G$ has no bridge. By Petersen's theorem, every bridgeless cubic graph has a perfect matching, so $G$ has a perfect matching. Since our argument did not assume connectivity beyond the bridge argument, this conclusion holds for all simple $3$-regular graphs on $8$ vertices.\n\nThus, every simple, 3-regular graph with $8$ vertices has a perfect matching, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1390472"}, {"introduction": "The existence of a perfect matching is a theoretical guarantee, but in practice, we need effective methods to find one. This final exercise [@problem_id:1390501] shifts our focus to the algorithmic challenge of finding perfect matchings. You will analyze a common-sense \"greedy\" algorithm and discover its limitations by constructing a counterexample. This experience is vital, as it highlights a key lesson in computer science: the most intuitive solution is not always the correct one, motivating the need for more sophisticated and robust algorithms.", "problem": "A systems architect is designing a communication network. The network is represented as a graph $G=(V, E)$, where vertices in $V$ are servers and edges in $E$ are direct communication links. A 'pairing' is a set of links where no two links share a server. A 'perfect pairing', also known as a perfect matching, is a pairing that involves all servers in the network.\n\nThe architect proposes a simple greedy algorithm, which we'll call `MinDegree-Greedy`, to find a perfect pairing:\n1. Initialize an empty pairing, $M$.\n2. While there are still servers in the network:\n   a. Identify a server $u$ that has the minimum number of active connections (i.e., a vertex of minimum degree in the current graph).\n   b. Choose one of $u$'s connections, say to a server $v$, and add the link $\\{u, v\\}$ to the pairing $M$.\n   c. Decommission servers $u$ and $v$ and all links connected to them from the network.\n3. The final set $M$ is the proposed pairing.\n\nThe algorithm is considered to have 'failed' if it terminates but $M$ is not a perfect pairing (meaning some servers are left unpaired). The architect needs to identify a network topology where the `MinDegree-Greedy` algorithm could fail, even though a perfect pairing is guaranteed to exist for that topology.\n\nGiven the following graph descriptions, which one represents a network where the `MinDegree-Greedy` algorithm can fail? Assume that if there are multiple choices for a minimum-degree vertex or for an edge connected to it, the algorithm is allowed to make any of those choices. All graphs listed below are guaranteed to have at least one perfect pairing.\n\nA. A graph with 6 vertices arranged in a single cycle (a hexagonal network, often denoted $C_6$).\n\nB. A graph with 8 vertices consisting of two separate, non-connected squares (two disjoint 4-cycles, denoted $C_4 \\cup C_4$).\n\nC. A graph with 6 vertices constructed by taking two separate triangles (3-cycles) and adding a single edge that connects one vertex from the first triangle to one vertex from the second.\n\nD. A graph with 8 vertices arranged in a single path (a line of 8 servers, denoted $P_8$).", "solution": "We analyze each listed graph, using the definition that a failure occurs if the algorithm makes only allowed choices (always selecting a vertex of minimum degree and any incident edge) but eventually leaves at least one vertex unmatched because the next step becomes impossible (for example, encountering a vertex of degree zero while vertices remain).\n\nA. For $C_{6}$, all vertices initially have degree $2$. Choosing any edge $\\{u,v\\}$ removes $u$ and $v$ and leaves the remaining $4$ vertices as a path $P_{4}$. On a path, endpoints have degree $1$ and the algorithm is forced to take an endpoint edge each time. Iterating reduces $P_{4}$ to $P_{2}$ and then to the empty graph, producing a perfect matching. Therefore, the algorithm cannot fail on $C_{6}$.\n\nB. For $C_{4} \\cup C_{4}$, each vertex initially has degree $2$. If the algorithm picks an edge in one $C_{4}$, say $\\{u,v\\}$, removing them leaves their component as a single edge on the remaining two vertices, while the other $C_{4}$ is untouched. The single edge’s endpoints now have degree $1$, strictly smaller than degree $2$ in the untouched $C_{4}$, so the algorithm must next take that single edge, completing that component. It then proceeds on the remaining $C_{4}$ exactly as in part A, yielding a perfect matching. Hence no failure occurs on $C_{4} \\cup C_{4}$.\n\nC. Consider two triangles connected by a single bridge. Label the first triangle’s vertices $a_{1},a_{2},a_{3}$ with $a_{1}$ incident to the bridge, and the second triangle’s vertices $b_{1},b_{2},b_{3}$ with $b_{1}$ incident to the bridge. Degrees are $\\deg(a_{1})=\\deg(b_{1})=3$ and $\\deg(a_{2})=\\deg(a_{3})=\\deg(b_{2})=\\deg(b_{3})=2$, so the minimum degree is $2$, attained by $a_{2},a_{3},b_{2},b_{3}$. A perfect matching exists: take the bridge $\\{a_{1},b_{1}\\}$ and inside each triangle match the two non-bridge vertices, for example $\\{a_{2},a_{3}\\}$ and $\\{b_{2},b_{3}\\}$.\n\nHowever, the algorithm can fail via allowed choices. Choose a minimum-degree vertex, say $a_{2}$, and then choose the incident edge $\\{a_{2},a_{1}\\}$. Removing $a_{2}$ and $a_{1}$ deletes all edges incident to them, in particular removing both edges from $a_{3}$ (namely $\\{a_{3},a_{1}\\}$ and $\\{a_{3},a_{2}\\}$). This isolates $a_{3}$, leaving it with degree $0$ while other vertices remain. The next step cannot select an edge incident to $a_{3}$, so the algorithm is stuck with vertices left unmatched. Therefore, `MinDegree-Greedy` can fail on this graph despite the existence of a perfect matching.\n\nD. For $P_{8}$, the two endpoints have degree $1$, which is the minimum. The algorithm must pick an endpoint and its unique incident edge, reducing $P_{8}$ to $P_{6}$; repeating reduces successively to $P_{4}$, $P_{2}$, and then the empty graph. This always yields a perfect matching, so the algorithm cannot fail on $P_{8}$.\n\nConsequently, among the given options, only the graph in option C allows a valid sequence of greedy choices that leads to failure.", "answer": "$$\\boxed{C}$$", "id": "1390501"}]}