{"hands_on_practices": [{"introduction": "The first step in translating a language description into a concrete machine is often to sketch out a Non-deterministic Finite Automaton (NFA). NFAs are powerful design tools because their non-determinism elegantly handles languages defined by choices ('or') or patterns that can appear anywhere ('contains a substring'). In this exercise [@problem_id:1396488], you will practice this fundamental skill by designing an NFA to recognize strings containing specific substrings, a common task in areas like text parsing and pattern matching.", "problem": "A computer scientist is designing a parser for a simple command language. The alphabet for the language is defined as $\\Sigma = \\{a, b, c\\}$. A command string is considered valid if and only if it contains the substring `ac` or the substring `abc`. To recognize these valid commands, a Non-deterministic Finite Automaton (NFA) is to be constructed.\n\nWhat is the minimum number of states (including the start state and any final states) required for an NFA that accepts this language of valid commands?", "solution": "Let the language be $L$. A string $w$ is in $L$ if it is of the form $x \\cdot s \\cdot y$, where $x, y \\in \\Sigma^*$ (any string of symbols from the alphabet $\\Sigma$) and $s$ is either `ac` or `abc`. We want to find the minimum number of states for a Non-deterministic Finite Automaton (NFA) that accepts $L$.\n\nThe two required substrings, `ac` and `abc`, share a common prefix `a`. We can use this overlap to design an efficient NFA. Let's construct the NFA state by state.\n\n1.  **Start State ($q_0$)**: This is the initial state. Before we have encountered any part of the target substrings, we are in this state. Any characters can be read without moving us closer to a final state, so we need a loop back to this state for any symbol. However, the symbol `a` is special as it's the start of both target substrings. Therefore, upon reading an `a`, the NFA must non-deterministically choose to either remain in $q_0$ (to handle cases where the `a` is not the start of the required substring, e.g., in a string like `baac`) or move to a new state that signifies the start of a potential match.\n    - Let $q_0$ be the start state.\n    - Transitions from $q_0$: $\\delta(q_0, a) = \\{q_0, q_1\\}$, $\\delta(q_0, b) = \\{q_0\\}$, $\\delta(q_0, c) = \\{q_0\\}$.\n\n2.  **State after 'a' ($q_1$)**: This state represents the knowledge that we have just seen an `a` that might be the prefix of `ac` or `abc`.\n    - From $q_1$, if the next symbol is `c`, we have successfully found the substring `ac`. We must transition to a final (accepting) state. Let's call this final state $q_f$. So, we add the transition $\\delta(q_1, c) = \\{q_f\\}$.\n    - From $q_1$, if the next symbol is `b`, we might be forming the substring `abc`. We need to move to a new state to remember that we have seen `ab`. Let's call this state $q_2$. So, we add the transition $\\delta(q_1, b) = \\{q_2\\}$.\n    - If the next symbol is `a`, the sequence for both `ac` and `abc` is broken. This non-deterministic path terminates. The machine relies on the other path (where it stayed in $q_0$ on the first `a`) to find a valid substring later.\n\n3.  **State after 'ab' ($q_2$)**: This state represents having seen the prefix `ab`.\n    - From $q_2$, if the next symbol is `c`, we have found the substring `abc`. We must transition to the final state $q_f$. So, we add the transition $\\delta(q_2, c) = \\{q_f\\}$.\n    - For any other symbol (`a` or `b`), the sequence `abc` is broken, and this path terminates.\n\n4.  **Final State ($q_f$)**: This is an accepting state. Reaching this state means we have found either `ac` or `abc`. Since the language accepts any string that *contains* one of these substrings, any characters that appear after the substring do not change the string's validity. Therefore, once in the final state, the NFA should remain in it, regardless of the subsequent input. This is a common \"trap\" accepting state.\n    - Transitions from $q_f$: $\\delta(q_f, a) = \\{q_f\\}$, $\\delta(q_f, b) = \\{q_f\\}$, $\\delta(q_f, c) = \\{q_f\\}$.\n\nThe constructed NFA has four states: $\\{q_0, q_1, q_2, q_f\\}$, with $q_0$ as the start state and $q_f$ as the sole final state.\n\nNow, we must argue that 4 is the minimum number of states. We can do this by showing that all four states are necessary because they represent distinct, distinguishable information about the string processed so far. Two states are distinguishable if there is some string that, when starting from one state, leads to acceptance, but when starting from the other, does not.\n\n-   **$q_f$ vs. non-final states ($q_0, q_1, q_2$)**: $q_f$ is a final state, while the others are not. They are distinguished by the empty string $\\epsilon$.\n\n-   **$q_0$ vs. $q_1$**: From $q_1$, the input string `c` leads to the final state $q_f$. From $q_0$, the input string `c` leads back to $q_0$, which is not a final state for the path. Thus, $q_0$ and $q_1$ are distinguishable.\n\n-   **$q_0$ vs. $q_2$**: From $q_2$, the input string `c` leads to $q_f$. From $q_0$, `c` leads to $q_0$. Thus, $q_0$ and $q_2$ are distinguishable.\n\n-   **$q_1$ vs. $q_2$**: This is the key comparison. From both $q_1$ and $q_2$, the input string `c` leads to acceptance. However, consider the input string `bc`. From $q_1$, reading `b` takes us to state $q_2$, and then reading `c` takes us to state $q_f$ (acceptance). So, the string `bc` is accepted starting from $q_1$. From $q_2$, there is no transition on `b`, so the path dies and the string `bc` is not accepted. Thus, $q_1$ and $q_2$ are distinguishable.\n\nSince all four states ($q_0, q_1, q_2, q_f$) are pairwise distinguishable, no two states can be merged. Therefore, a minimum of 4 states is required.", "answer": "$$\\boxed{4}$$", "id": "1396488"}, {"introduction": "While NFAs are excellent for conceptual design, most real-world software and hardware implementations require the predictability of a Deterministic Finite Automaton (DFA). The subset construction is the cornerstone algorithm that bridges this gap by systematically converting any NFA into an equivalent DFA. This hands-on practice [@problem_id:1396478] will guide you through this crucial process, reinforcing your understanding of the formal relationship between these two types of automata and the trade-offs involved.", "problem": "Consider a Nondeterministic Finite Automaton (NFA), denoted as $M$, which is designed to accept the set of all binary strings that have a '1' as the second-to-last character. The alphabet for this automaton is $\\Sigma = \\{0, 1\\}$.\n\nThe NFA $M$ is formally defined by the 5-tuple $(Q, \\Sigma, \\delta, q_0, F)$, where:\n- The set of states is $Q = \\{q_0, q_1, q_2\\}$.\n- The alphabet is $\\Sigma = \\{0, 1\\}$.\n- The start state is $q_0$.\n- The set of final (accepting) states is $F = \\{q_2\\}$.\n- The transition function, $\\delta: Q \\times \\Sigma \\to \\mathcal{P}(Q)$, where $\\mathcal{P}(Q)$ is the power set of $Q$, is given by the following table:\n\n| State   | Input '0' | Input '1'   |\n|---------|-----------|-------------|\n| $q_0$   | $\\{q_0\\}$ | $\\{q_0, q_1\\}$|\n| $q_1$   | $\\{q_2\\}$ | $\\{q_2\\}$   |\n| $q_2$   | $\\emptyset$ | $\\emptyset$   |\n\nYour task is to convert this NFA into an equivalent Deterministic Finite Automaton (DFA) using the standard subset construction algorithm. In your construction, you should only include the states that are reachable from the DFA's start state.\n\nAfter performing the conversion, determine the total number of states in the resulting DFA.", "solution": "We apply the subset construction to convert the given NFA $M=(Q,\\Sigma,\\delta,q_{0},F)$ into a DFA $M'=(Q',\\Sigma,\\delta',S_{0},F')$, where:\n- $Q' \\subseteq \\mathcal{P}(Q)$ consists of all subsets of $Q$ reachable from $S_{0}$,\n- $S_{0}=\\{q_{0}\\}$ (there are no $\\epsilon$-moves, so the $\\epsilon$-closure of $q_{0}$ is $\\{q_{0}\\}$),\n- $\\delta'(S,a)=\\bigcup_{q\\in S}\\delta(q,a)$ for $S\\subseteq Q$ and $a\\in\\Sigma$,\n- $F'=\\{S\\subseteq Q: S\\cap F\\neq\\emptyset\\}$.\n\nCompute reachable subsets starting from $S_{0}=\\{q_{0}\\}$. Using the given NFA transitions $\\delta(q_{0},0)=\\{q_{0}\\}$, $\\delta(q_{0},1)=\\{q_{0},q_{1}\\}$, $\\delta(q_{1},0)=\\{q_{2}\\}$, $\\delta(q_{1},1)=\\{q_{2}\\}$, $\\delta(q_{2},0)=\\emptyset$, $\\delta(q_{2},1)=\\emptyset$:\n\n1. From $\\{q_{0}\\}$:\n$$\n\\delta'(\\{q_{0}\\},0)=\\delta(q_{0},0)=\\{q_{0}\\},\\quad\n\\delta'(\\{q_{0}\\},1)=\\delta(q_{0},1)=\\{q_{0},q_{1}\\}.\n$$\nReachable so far: $\\{q_{0}\\}$, $\\{q_{0},q_{1}\\}$.\n\n2. From $\\{q_{0},q_{1}\\}$:\n$$\n\\delta'(\\{q_{0},q_{1}\\},0)=\\delta(q_{0},0)\\cup\\delta(q_{1},0)=\\{q_{0}\\}\\cup\\{q_{2}\\}=\\{q_{0},q_{2}\\},\n$$\n$$\n\\delta'(\\{q_{0},q_{1}\\},1)=\\delta(q_{0},1)\\cup\\delta(q_{1},1)=\\{q_{0},q_{1}\\}\\cup\\{q_{2}\\}=\\{q_{0},q_{1},q_{2}\\}.\n$$\nNew reachable subsets: $\\{q_{0},q_{2}\\}$, $\\{q_{0},q_{1},q_{2}\\}$.\n\n3. From $\\{q_{0},q_{2}\\}$:\n$$\n\\delta'(\\{q_{0},q_{2}\\},0)=\\delta(q_{0},0)\\cup\\delta(q_{2},0)=\\{q_{0}\\}\\cup\\emptyset=\\{q_{0}\\},\n$$\n$$\n\\delta'(\\{q_{0},q_{2}\\},1)=\\delta(q_{0},1)\\cup\\delta(q_{2},1)=\\{q_{0},q_{1}\\}\\cup\\emptyset=\\{q_{0},q_{1}\\}.\n$$\nNo new subsets.\n\n4. From $\\{q_{0},q_{1},q_{2}\\}$:\n$$\n\\delta'(\\{q_{0},q_{1},q_{2}\\},0)=\\delta(q_{0},0)\\cup\\delta(q_{1},0)\\cup\\delta(q_{2},0)=\\{q_{0}\\}\\cup\\{q_{2}\\}\\cup\\emptyset=\\{q_{0},q_{2}\\},\n$$\n$$\n\\delta'(\\{q_{0},q_{1},q_{2}\\},1)=\\delta(q_{0},1)\\cup\\delta(q_{1},1)\\cup\\delta(q_{2},1)=\\{q_{0},q_{1}\\}\\cup\\{q_{2}\\}\\cup\\emptyset=\\{q_{0},q_{1},q_{2}\\}.\n$$\nNo new subsets.\n\nThus the reachable DFA states are exactly $\\{q_{0}\\}$, $\\{q_{0},q_{1}\\}$, $\\{q_{0},q_{2}\\}$, and $\\{q_{0},q_{1},q_{2}\\}$. The empty set and any subset not containing $q_{0}$ are unreachable because for every $a\\in\\Sigma$, $\\delta(q_{0},a)$ contains $q_{0}$, preventing transitions to subsets without $q_{0}$ or to $\\emptyset$. Therefore, the total number of states in the resulting DFA, counting only reachable states, is $4$.", "answer": "$$\\boxed{4}$$", "id": "1396478"}, {"introduction": "For any regular language, there exists one unique, most efficient machine that recognizes it, known as the minimal DFA. This exercise [@problem_id:1396516] challenges you to determine the number of states in this minimal automaton by analyzing the language's structure, a method rooted in the principles of the Myhill-Nerode theorem. By reasoning about the distinct 'memory' requirements of the language, you can deduce the size of its most compact representation, a key skill in both theoretical analysis and efficient implementation.", "problem": "Let $\\Sigma = \\{0, 1\\}$ be the binary alphabet. For any string $w \\in \\Sigma^*$, let $|w|_0$ denote the number of occurrences of the symbol '0' in $w$, and let $|w|_1$ denote the number of occurrences of the symbol '1' in $w$.\n\nConsider the language $L$ over $\\Sigma$ defined as:\n$$ L = \\{ w \\in \\Sigma^* \\mid |w|_0 \\text{ is even, and } |w|_1 \\equiv 1 \\pmod 3 \\} $$\n\nA Deterministic Finite Automaton (DFA) is a finite-state machine that accepts or rejects a given string of symbols. For any regular language, there exists a unique DFA with the minimum possible number of states that accepts it. This automaton is called the minimal DFA.\n\nWhat is the number of states in the minimal DFA that accepts the language $L$?", "solution": "We track two independent modular properties of a string $w \\in \\{0,1\\}^{*}$:\n1) The parity of the number of $0$'s, i.e., whether $|w|_{0} \\bmod 2$ is $0$ (even) or $1$ (odd).\n2) The residue of the number of $1$'s modulo $3$, i.e., $|w|_{1} \\bmod 3 \\in \\{0,1,2\\}$.\n\nDefine a DFA $A$ that recognizes even number of $0$'s:\n- States: $\\{E,O\\}$ where $E$ means $|w|_{0} \\equiv 0 \\pmod{2}$ and $O$ means $|w|_{0} \\equiv 1 \\pmod{2}$.\n- Start state: $E$.\n- Accepting states: $\\{E\\}$.\n- Transitions: on input $0$, toggle between $E$ and $O$; on input $1$, stay in the same state.\nThis DFA is minimal with $2$ states because $E$ and $O$ are distinguishable by the empty suffix: one is accepting and the other is not.\n\nDefine a DFA $B$ that tracks $|w|_{1} \\bmod 3$:\n- States: $\\{0,1,2\\}$ representing the residue class of $|w|_{1} \\pmod{3}$.\n- Start state: $0$.\n- Accepting states: $\\{1\\}$.\n- Transitions: on input $1$, move from $r$ to $r+1 \\pmod{3}$; on input $0$, stay in the same state.\nThis DFA is minimal with $3$ states. To see pairwise distinguishability, take distinct $r_{1}, r_{2} \\in \\{0,1,2\\}$ and append $t$ ones where $t \\equiv 1 - r_{1} \\pmod{3}$. From $r_{1}$ this reaches the accepting state $1$, while from $r_{2}$ it reaches $r_{2} + t \\equiv r_{2} - r_{1} + 1 \\pmod{3}$, which equals $1$ if and only if $r_{2} = r_{1}$. Thus distinct residues are distinguishable.\n\nTo recognize $L = \\{ w \\mid |w|_{0} \\equiv 0 \\pmod{2} \\text{ and } |w|_{1} \\equiv 1 \\pmod{3} \\}$, take the standard product construction $C = A \\times B$:\n- States: $\\{E,O\\} \\times \\{0,1,2\\}$, totaling $2 \\times 3 = 6$ states.\n- Start state: $(E,0)$.\n- Accepting states: $\\{(E,1)\\}$, since both conditions must hold.\n- Transitions: on input $0$, $(z,r) \\mapsto (\\text{toggle}(z), r)$; on input $1$, $(z,r) \\mapsto (z, r+1 \\pmod{3})$.\n\nReachability: All $6$ states are reachable from $(E,0)$ by suitable strings. For example:\n- $(O,0)$ via $0$,\n- $(E,1)$ via $1$,\n- $(O,1)$ via $10$,\n- $(E,2)$ via $11$,\n- $(O,2)$ via $110$.\n\nMinimality of $C$: We show any two distinct states are distinguishable.\n- If $(z_{1}, r_{1})$ and $(z_{2}, r_{2})$ have $r_{1} \\neq r_{2}$, append $t$ ones with $t \\equiv 1 - r_{1} \\pmod{3}$. Then the first reaches ones-residue $1$, while the second reaches a residue not equal to $1$. Next, append $s$ zeros with $s \\equiv 0 \\pmod{2}$ if $z_{1} = E$ and $s \\equiv 1 \\pmod{2}$ if $z_{1} = O$ to make the first component even. The first string accepts, while the second rejects regardless of its zero parity because its ones residue is not $1$. Hence they are distinguishable.\n- If $r_{1} = r_{2}$ but $z_{1} \\neq z_{2}$, append $t$ ones with $t \\equiv 1 - r_{1} \\pmod{3}$ so both reach ones-residue $1$. Then append an odd number of zeros to toggle parity: exactly one of the two reaches even parity. Thus exactly one accepts, so they are distinguishable.\n\nTherefore, all $6$ product states lie in distinct Myhill-Nerode equivalence classes, so the minimal DFA for $L$ has exactly $6$ states.\n\nHence, the number of states in the minimal DFA that accepts $L$ is $6$.", "answer": "$$\\boxed{6}$$", "id": "1396516"}]}