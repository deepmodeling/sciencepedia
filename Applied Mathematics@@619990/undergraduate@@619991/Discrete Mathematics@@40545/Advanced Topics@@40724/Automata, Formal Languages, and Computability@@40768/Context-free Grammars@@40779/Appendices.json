{"hands_on_practices": [{"introduction": "Designing a context-free grammar from scratch is a foundational skill for working with formal languages. This first practice challenges you to construct a grammar for a language of binary palindromes, a classic example that showcases the power of recursive production rules. By identifying rules that build strings symmetrically from the center outwards, you will develop a core intuition for how CFGs generate complex patterns from simple components [@problem_id:1359838].", "problem": "In the design of a specialized data transmission protocol, messages are encoded as binary strings. To enhance error detection and simplify routing hardware, two strict rules are imposed on all valid message packets:\n1.  Every valid packet must be a palindrome, meaning the string reads the same forwards and backwards.\n2.  Every valid packet must begin and end with the bit '1'.\n\nThe set of all such valid packets forms a language, let's call it $L$. For instance, '1', '11', '101', and '11011' are all strings in $L$, while '10', '010', and '1011' are not.\n\nTo create a parser for this protocol, one needs a formal description of the language $L$. A Context-Free Grammar (CFG) is a set of production rules used to generate all possible strings in a language. A grammar consists of:\n-   A set of terminal symbols (here, $\\{0, 1\\}$).\n-   A set of non-terminal symbols (represented by uppercase letters).\n-   A designated start symbol (here, $S$).\n-   A set of production rules of the form $A \\to \\alpha$, where $A$ is a non-terminal and $\\alpha$ is a string of terminals and non-terminals. The symbol `|` is used to denote alternatives for a production rule (e.g., $A \\to \\alpha | \\beta$), and $\\varepsilon$ represents the empty string.\n\nYour task is to identify which of the following Context-Free Grammars correctly generates the language $L$.\n\nA. The grammar with non-terminal $\\{S\\}$ and productions:\n$S \\to 1S1 \\mid 0S0 \\mid 1 \\mid 0 \\mid \\varepsilon$\n\nB. The grammar with non-terminal $\\{S\\}$ and productions:\n$S \\to 1 \\mid 1S1$\n\nC. The grammar with non-terminals $\\{S, P\\}$ and productions:\n$S \\to 1 \\mid 1P1$\n$P \\to 0P0 \\mid 1P1 \\mid 0 \\mid 1 \\mid \\varepsilon$\n\nD. The grammar with non-terminals $\\{S, P\\}$ and productions:\n$S \\to 1 \\mid 1P1$\n$P \\to 0P0 \\mid 1P1 \\mid 0 \\mid 1$\n\nE. The grammar with non-terminals $\\{S, P\\}$ and productions:\n$S \\to 1 \\mid 1P1$\n$P \\to 0P0 \\mid 1P1 \\mid \\varepsilon$", "solution": "We define the target language $L$ as all binary strings that are palindromes and begin and end with $1$. Equivalently, a string $w$ is in $L$ if and only if either $w=1$ or there exists a palindrome $x$ (possibly empty) over $\\{0,1\\}$ such that $w=1x1$. The necessity follows because removing the first and last symbol of a palindrome that starts and ends with $1$ yields a palindrome; the sufficiency follows because $1x1$ is a palindrome whenever $x$ is a palindrome.\n\nWe now test each grammar against this characterization.\n\nGrammar A: $S \\to 1S1 \\mid 0S0 \\mid 1 \\mid 0 \\mid \\varepsilon$. This generates all binary palindromes, including $0$ and $\\varepsilon$. Since $0,\\varepsilon \\notin L$, this grammar strictly overgenerates and is not equal to $L$.\n\nGrammar B: $S \\to 1 \\mid 1S1$. Any derivation either yields $1$ or adds matching $1$’s around a previously derived string. Therefore all derived strings consist only of $1$’s and have odd length. In particular, $11 \\notin \\mathcal{L}(G_{B})$, but $11 \\in L$. Hence this grammar undergenerates and is not equal to $L$.\n\nGrammar D: $S \\to 1 \\mid 1P1$, $P \\to 0P0 \\mid 1P1 \\mid 0 \\mid 1$. Here $P$ cannot derive $\\varepsilon$. Thus $S$ cannot derive $11$ (which would require $P \\Rightarrow \\varepsilon$). Since $11 \\in L$, this grammar undergenerates and is not equal to $L$.\n\nGrammar E: $S \\to 1 \\mid 1P1$, $P \\to 0P0 \\mid 1P1 \\mid \\varepsilon$. Here $P$ derives exactly the even-length palindromes (base $\\varepsilon$ and symmetric growth). Consequently, $S$ derives $1$ and strings $1x1$ with $x$ even-length, i.e., all even-length palindromes starting and ending with $1$, plus the single symbol $1$. It cannot derive odd-length palindromes of length at least $3$ such as $101$ or $111$, which are in $L$. Hence it undergenerates and is not equal to $L$.\n\nGrammar C: $S \\to 1 \\mid 1P1$, $P \\to 0P0 \\mid 1P1 \\mid 0 \\mid 1 \\mid \\varepsilon$. The nonterminal $P$ derives all binary palindromes (including $\\varepsilon$). Soundness: If $S \\Rightarrow 1$, then $1 \\in L$. If $S \\Rightarrow 1P1 \\Rightarrow^{*} 1x1$ with $x$ a palindrome, then $1x1$ is a palindrome beginning and ending with $1$, hence in $L$. Completeness: Let $w \\in L$. If $w=1$, then $S \\Rightarrow 1$. Otherwise, write $w=1x1$ with $x$ a palindrome (including possibly $\\varepsilon$); since $P$ generates all palindromes, $P \\Rightarrow^{*} x$, so $S \\Rightarrow 1P1 \\Rightarrow^{*} 1x1 = w$. Therefore Grammar C generates exactly $L$.\n\nThus the unique correct grammar among the options is C.", "answer": "$$\\boxed{C}$$", "id": "1359838"}, {"introduction": "Real-world grammars can often contain redundant or \"useless\" rules that complicate analysis and implementation. This exercise guides you through the systematic process of simplifying a grammar by eliminating non-generating and non-reachable symbols. Mastering this two-step algorithm is a crucial practical skill for creating minimal and efficient grammars, ensuring that every part of your formal description serves a purpose [@problem_id:1359823].", "problem": "Consider a Context-Free Grammar (CFG) denoted by $G = (V, T, P, S)$, where $V$ is the set of variables, $T$ is the set of terminals, $P$ is the set of productions, and $S$ is the start symbol.\n\nLet the components of $G$ be defined as follows:\n-   The set of variables is $V = \\{S, A, B, C, D, F\\}$.\n-   The set of terminals is $T = \\{a, b, c\\}$.\n-   The start symbol is $S$.\n-   The set of productions $P$ is given by:\n    $S \\to aA \\mid C$\n    $A \\to bS \\mid D$\n    $B \\to aB \\mid b$\n    $C \\to cC$\n    $D \\to a$\n    $F \\to cS \\mid A$\n\nA symbol $X \\in V \\cup T$ is defined as *generating* if there exists at least one derivation starting from $X$ that results in a string of terminals. A variable $Y \\in V$ is defined as *reachable* if there exists a derivation starting from the start symbol $S$ that produces a sentential form containing $Y$. A variable is considered *useless* if it is either non-generating or non-reachable.\n\nYour task is to simplify the given grammar $G$ by systematically removing all useless symbols and their associated productions. This is a two-step process:\n1.  First, remove all non-generating variables and any productions that involve them.\n2.  Second, using the grammar resulting from the first step, remove all non-reachable variables and their corresponding productions.\n\nChoose the option that correctly lists the set of productions $P'$ for the final, reduced grammar $G'$.\n\nA.\n$S \\to aA$\n$A \\to bS \\mid D$\n$D \\to a$\n\nB.\n$S \\to aA$\n$A \\to bS \\mid D$\n$B \\to aB \\mid b$\n$D \\to a$\n$F \\to cS \\mid A$\n\nC.\n$S \\to aA \\mid C$\n$A \\to bS \\mid D$\n$C \\to cC$\n$D \\to a$\n\nD.\n$S \\to aA$\n$A \\to bS \\mid a$", "solution": "We identify useless symbols by first removing all non-generating variables and any productions that mention them, then removing all non-reachable variables from the resulting grammar.\n\nStep 1 (non-generating variables):\nA symbol is generating if it can derive a string of terminals. Terminals in $T$ are generating by definition. For variables:\n- $D \\to a$ implies $D$ is generating.\n- $A \\to D$ and $D \\Rightarrow a$ imply $A$ is generating, since $A \\Rightarrow D \\Rightarrow a$.\n- $S \\to aA$ and $A \\Rightarrow D \\Rightarrow a$ imply $S$ is generating, since $S \\Rightarrow aA \\Rightarrow aD \\Rightarrow aa$.\n- $B \\to b$ implies $B$ is generating.\n- $F \\to A$ and $A$ is generating imply $F$ is generating; also $F \\to cS$ with $S$ generating gives a terminal string.\n- $C \\to cC$ has no derivation to terminals, so $C$ is non-generating.\n\nRemove $C$ and any productions that involve $C$. From $P$, remove $C \\to cC$ and the alternative $S \\to C$. The grammar after Step 1 is:\n$$\nS \\to aA\n$$\n$$\nA \\to bS \\mid D\n$$\n$$\nB \\to aB \\mid b\n$$\n$$\nD \\to a\n$$\n$$\nF \\to cS \\mid A\n$$\n\nStep 2 (non-reachable variables):\nA variable is reachable if some sentential form derived from $S$ contains it.\n- $S$ is reachable by definition.\n- From $S \\to aA$, $A$ is reachable.\n- From $A \\to bS \\mid D$, both $S$ (already) and $D$ are reachable.\n- $D \\to a$ introduces no new variables.\n- No right-hand side contains $B$ or $F$, so they are not reachable from $S$.\n\nRemove non-reachable variables $B$ and $F$ and their productions. The final grammar is:\n$$\nS \\to aA\n$$\n$$\nA \\to bS \\mid D\n$$\n$$\nD \\to a\n$$\nThis matches option A. Note that replacing $D$ inline to get $A \\to bS \\mid a$ is not part of the specified useless-symbol elimination and is therefore not performed here.\n\nThus, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1359823"}, {"introduction": "Not all grammars that correctly generate a language are equally useful; some possess a subtle but critical flaw known as ambiguity. An ambiguous grammar allows a single string to be parsed in multiple ways, creating uncertainty for compilers and interpreters. In this final practice, you will analyze a string by finding its distinct leftmost derivations, a direct method for proving ambiguity and understanding its practical consequences in parser design [@problem_id:1359841].", "problem": "A team of network engineers is developing a firmware for a new high-speed packet router. The structure of valid packets is described by a formal language over the alphabet $\\{0, 1\\}$. The language, let's call it $L$, contains all binary strings $w$ that satisfy one of the two following conditions:\n1. $w$ is a non-empty sequence consisting only of the digit '1'.\n2. $w$ consists of zero or more '1's followed by a single '0'.\n\nTwo competing Context-Free Grammars, $G_1$ and $G_2$, have been proposed to generate this language $L$. For the router's parser to be efficient and fully deterministic, the chosen grammar must be unambiguous. A grammar is unambiguous if every string in the language it generates has exactly one unique leftmost derivation.\n\nThe first proposal, Grammar $G_1$, is defined by the following productions, with $S$ as the start symbol:\n$S \\to 1S \\mid 0 \\mid Y$\n$Y \\to 1Y \\mid 1$\n\nThe second proposal, Grammar $G_2$, is defined by these productions, with $S$ as the start symbol:\n$S \\to A \\mid B$\n$A \\to 1A \\mid 0$\n$B \\to 1B \\mid 1$\n\nYour task is to analyze the behavior of these two grammars for the specific packet string `111`. Determine the total number of distinct leftmost derivations for the string `111` using Grammar $G_1$ (let this be $N_1$) and the total number of distinct leftmost derivations for the same string using Grammar $G_2$ (let this be $N_2$).\n\nPresent your answer as a row matrix containing the two integer values $(N_1, N_2)$.", "solution": "The language is $L=1^{+}\\cup 1^{*}0$, which includes $111$ via the $1^{+}$ branch. We count distinct leftmost derivations for $111$ in each grammar.\n\nFor $G_{1}$:\nThe productions are $S\\to 1S\\mid 0\\mid Y$ and $Y\\to 1Y\\mid 1$. To produce a string of only $1$'s, a derivation must eventually use $S\\to Y$ and never $S\\to 0$. Let $k$ be the number of initial applications of $S\\to 1S$ before the first $S\\to Y$. Then after $k$ steps we have $1^{k}S$, then $1^{k}Y$, and $Y$ must derive exactly $3-k$ ones. Since $Y\\to 1Y\\mid 1$ yields a unique leftmost derivation for a fixed length (apply $Y\\to 1Y$ exactly $n-1$ times then $Y\\to 1$ to produce $n$ ones), each $k$ gives exactly one leftmost derivation provided $3-k\\geq 1$, i.e., $k\\in\\{0,1,2\\}$. Concretely, the three leftmost derivations are:\n$$S\\Rightarrow Y\\Rightarrow 1Y\\Rightarrow 11Y\\Rightarrow 111,$$\n$$S\\Rightarrow 1S\\Rightarrow 1Y\\Rightarrow 11Y\\Rightarrow 111,$$\n$$S\\Rightarrow 1S\\Rightarrow 11S\\Rightarrow 11Y\\Rightarrow 111.$$\nHence $N_{1}=3$.\n\nFor $G_{2}$:\nThe productions are $S\\to A\\mid B$, $A\\to 1A\\mid 0$, $B\\to 1B\\mid 1$. Since $A$ derives only strings ending in $0$, the only way to derive $111$ is $S\\Rightarrow B$. Then $B\\to 1B\\mid 1$ is the same shape as $Y$ above and yields a unique leftmost derivation for a fixed number of $1$'s. To obtain three $1$'s, we must apply $B\\to 1B$ twice and then $B\\to 1$:\n$$S\\Rightarrow B\\Rightarrow 1B\\Rightarrow 11B\\Rightarrow 111.$$\nTherefore $N_{2}=1$.\n\nThus the required row matrix is $\\begin{pmatrix}N_{1} & N_{2}\\end{pmatrix}=\\begin{pmatrix}3 & 1\\end{pmatrix}$.", "answer": "$$\\boxed{\\begin{pmatrix}3 & 1\\end{pmatrix}}$$", "id": "1359841"}]}