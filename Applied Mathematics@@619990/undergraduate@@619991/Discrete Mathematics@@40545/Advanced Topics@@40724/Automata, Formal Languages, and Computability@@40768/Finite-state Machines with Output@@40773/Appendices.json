{"hands_on_practices": [{"introduction": "The first step in mastering finite-state machines is to understand their mechanics. This practice provides a direct, hands-on opportunity to trace the behavior of a Mealy machine, where the output is determined by both the current state and the input symbol. By following the machine's path through its states for a given input string, you will solidify your understanding of how these machines process information and generate outputs step-by-step [@problem_id:1370727].", "problem": "A Mealy machine is a type of finite-state machine where the output is determined by both its current state and the current input. Consider a Mealy machine $M$ defined by the following components:\n- A set of states $S = \\{s_0, s_1, s_2, s_3\\}$, with $s_0$ being the start state.\n- An input alphabet $\\Sigma = \\{0, 1\\}$.\n- An output alphabet $\\Gamma = \\{a, b, c\\}$.\n\nThe machine's behavior is described by its transition function $g: S \\times \\Sigma \\to S$ and its output function $h: S \\times \\Sigma \\to \\Gamma$. The combined transition and output table is given below. Each entry is a pair (next state, output).\n\n| Current State | Input 0             | Input 1             |\n|:--------------|:--------------------|:--------------------|\n| $s_0$         | ($s_2$, $a$)        | ($s_1$, $b$)        |\n| $s_1$         | ($s_0$, $c$)        | ($s_3$, $a$)        |\n| $s_2$         | ($s_2$, $b$)        | ($s_0$, $c$)        |\n| $s_3$         | ($s_1$, $a$)        | ($s_3$, $b$)        |\n\nGiven the input string `1011`, determine the output string produced by the machine $M$. Your answer should be the sequence of output characters concatenated together without any spaces or delimiters.", "solution": "We process the input string symbol by symbol starting from the start state $s_{0}$. For a Mealy machine, on each input symbol $x$, we produce an output $h(\\text{state}, x)$ and move to the next state $g(\\text{state}, x)$.\n\nLet the input be $x_{1}x_{2}x_{3}x_{4} = 1,0,1,1$. Initialize $q_{0} = s_{0}$.\n\n- For $x_{1} = 1$: from the table at $(s_{0}, 1)$, we have $(g(s_{0}, 1), h(s_{0}, 1)) = (s_{1}, b)$. Thus $q_{1} = s_{1}$ and $y_{1} = b$.\n- For $x_{2} = 0$: from the table at $(s_{1}, 0)$, we have $(g(s_{1}, 0), h(s_{1}, 0)) = (s_{0}, c)$. Thus $q_{2} = s_{0}$ and $y_{2} = c$.\n- For $x_{3} = 1$: from the table at $(s_{0}, 1)$, we have $(g(s_{0}, 1), h(s_{0}, 1)) = (s_{1}, b)$. Thus $q_{3} = s_{1}$ and $y_{3} = b$.\n- For $x_{4} = 1$: from the table at $(s_{1}, 1)$, we have $(g(s_{1}, 1), h(s_{1}, 1)) = (s_{3}, a)$. Thus $q_{4} = s_{3}$ and $y_{4} = a$.\n\nConcatenating the outputs in order gives $y_{1}y_{2}y_{3}y_{4} = bcba$.", "answer": "$$\\boxed{bcba}$$", "id": "1370727"}, {"introduction": "Beyond simple execution, a crucial skill for any engineer or computer scientist is the ability to verify and debug a system. This exercise challenges you to analyze a Mealy machine designed as a sequence detector and find a flaw in its logic. Your task is to discover the shortest input sequence that causes the machine's output to deviate from its specification, honing your skills in logical analysis and systematic testing [@problem_id:1370700].", "problem": "A Mealy machine is a type of finite-state machine where the output depends on both the current state and the current input. An engineer has designed a Mealy machine intended to function as an overlapping sequence detector. The machine is supposed to process a binary input string and output a `1` if and only if the three most recently received bits form the sequence `010`. For all other cases, it should output a `0`.\n\nThe machine is defined by the set of states $S = \\{S_0, S_1, S_2\\}$, the input alphabet $\\Sigma = \\{0, 1\\}$, the output alphabet $\\Gamma = \\{0, 1\\}$, and the initial state $S_0$. The machine's behavior is specified by the following transition and output table:\n\n| Current State | Input | Next State | Output |\n| :---: | :---: | :---: | :---: |\n| $S_0$ | 0 | $S_1$ | 0 |\n| $S_0$ | 1 | $S_0$ | 0 |\n| $S_1$ | 0 | $S_1$ | 0 |\n| $S_1$ | 1 | $S_2$ | 0 |\n| $S_2$ | 0 | $S_0$ | 1 |\n| $S_2$ | 1 | $S_0$ | 0 |\n\nHowever, there is a flaw in this design. The machine does not always produce the correct output according to its specification. Find the binary input string of the minimum possible length for which the machine's output string differs from the correctly specified output string. The correct output for an input string $w = w_1w_2...w_k$ is an output string $z = z_1z_2...z_k$ where $z_i=1$ if $w_{i-2}w_{i-1}w_i = 010$ and $z_i=0$ otherwise. For $i  3$, the output $z_i$ is always $0$.", "solution": "Let $w = b_{1}b_{2}\\dots b_{k}$ be the input, and let the machine output be $y_{1}y_{2}\\dots y_{k}$, while the correct output per specification is $z_{1}z_{2}\\dots z_{k}$ with $z_{i}=1$ if and only if $i\\geq 3$ and $b_{i-2}b_{i-1}b_{i}=010$, and $z_{i}=0$ otherwise (in particular $z_{1}=z_{2}=0$).\n\nWe simulate the Mealy machine with initial state $S_{0}$. Denote by $s_{i}$ the state just before reading $b_{i}$; thus $s_{1}=S_{0}$, and upon reading $b_{i}$ in state $s_{i}$ the output $y_{i}$ is produced and the machine moves to $s_{i+1}$ as specified by the table.\n\nStep 1: For $i=1$ and $i=2$, the table shows all outputs are $0$ from $S_{0}$ and $S_{1}$, and it is impossible to reach $S_{2}$ within two steps from $S_{0}$. Therefore $y_{1}=y_{2}=0=z_{1}=z_{2}$ for all inputs; no mismatch can occur at $i=1,2$.\n\nStep 2: For $i=3$, the machine outputs $1$ only on the transition $(S_{2},0)\\to S_{0}$ with output $1$. From $S_{0}$, the only way to have $s_{3}=S_{2}$ after two inputs is to read $b_{1}b_{2}=01$ (because $S_{0}\\xrightarrow{0}S_{1}\\xrightarrow{1}S_{2}$). Hence $y_{3}=1$ if and only if $b_{1}b_{2}b_{3}=010$, which matches the specification $z_{3}=1$ exactly in that case, and $0$ otherwise. Therefore no mismatch can occur at $i=3$.\n\nStep 3: For $i=4$, the specification has $z_{4}=1$ if and only if $b_{2}b_{3}b_{4}=010$, i.e., the input is of the form $x010$ with $x\\in\\{0,1\\}$. The machine outputs $y_{4}=1$ exactly when $s_{4}=S_{2}$ and $b_{4}=0$. Compute $s_{4}$ for all length-$3$ prefixes:\n- If $b_{1}b_{2}b_{3}\\in\\{001,101\\}$ then $s_{4}=S_{2}$; otherwise $s_{4}\\in\\{S_{0},S_{1}\\}$.\nThus $y_{4}=1$ occurs exactly for inputs $0010$ and $1010$, which are precisely the inputs with $b_{2}b_{3}b_{4}=010$. For all other inputs $y_{4}=0$, and in those cases $z_{4}=0$ as well. Hence no mismatch can occur at $i=4$.\n\nStep 4: Consider $i=5$. Take $w=01010$. The correct outputs are computed by sliding the window of length $3$:\n- $z_{1}=0$, $z_{2}=0$,\n- $z_{3}=1$ because $b_{1}b_{2}b_{3}=010$,\n- $z_{4}=0$ because $b_{2}b_{3}b_{4}=101$,\n- $z_{5}=1$ because $b_{3}b_{4}b_{5}=010$.\nThus $z=00101$.\n\nSimulate the machine on $w=01010$:\n- $i=1$: $s_{1}=S_{0}$, input $0$ gives $y_{1}=0$, $s_{2}=S_{1}$.\n- $i=2$: $s_{2}=S_{1}$, input $1$ gives $y_{2}=0$, $s_{3}=S_{2}$.\n- $i=3$: $s_{3}=S_{2}$, input $0$ gives $y_{3}=1$, $s_{4}=S_{0}$ (note the reset to $S_{0}$).\n- $i=4$: $s_{4}=S_{0}$, input $1$ gives $y_{4}=0$, $s_{5}=S_{0}$.\n- $i=5$: $s_{5}=S_{0}$, input $0$ gives $y_{5}=0$, $s_{6}=S_{1}$.\nThus $y=00100$.\n\nComparing, $y_{5}=0$ while $z_{5}=1$, so there is a mismatch at position $5$. By the arguments for $i\\leq 4$ above, no mismatch can occur for any shorter input. Therefore the minimum-length revealing input string is $01010$.", "answer": "$$\\boxed{01010}$$", "id": "1370700"}, {"introduction": "Now, let's turn our attention to the Moore machine, which differs from a Mealy machine in that its output depends solely on the current state. This exercise presents a unique challenge: instead of predicting the output from a given input, you must work in reverse. Given a desired output sequence, your goal is to determine all possible input strings that could have produced it, deepening your intuition for the strict state-output relationship that defines a Moore machine [@problem_id:1370719].", "problem": "Consider a Moore machine designed for a simple digital signal processing task. A Moore machine is defined by a set of states, an input alphabet, an output alphabet, a transition function, an output function, and a designated start state. The output of a Moore machine is determined exclusively by its current state.\n\nThe machine is formally defined as $M = (S, s_{start}, \\Sigma, \\Lambda, T, G)$, with the following components:\n-   The set of states is $S = \\{q_0, q_1, q_2\\}$.\n-   The start state is $s_{start} = q_0$.\n-   The input alphabet is $\\Sigma = \\{0, 1\\}$.\n-   The output alphabet is $\\Lambda = \\{0, 1\\}$.\n\nThe machine's behavior is governed by its transition function $T: S \\times \\Sigma \\to S$ and its output function $G: S \\to \\Lambda$, which are specified as follows:\n\n**Output Function G:**\n-   $G(q_0) = 1$\n-   $G(q_1) = 0$\n-   $G(q_2) = 1$\n\n**Transition Function T:**\n-   $T(q_0, 0) = q_1$\n-   $T(q_0, 1) = q_2$\n-   $T(q_1, 0) = q_0$\n-   $T(q_1, 1) = q_2$\n-   $T(q_2, 0) = q_0$\n-   $T(q_2, 1) = q_1$\n\nWhen an input string is processed, the machine starts in state $q_0$. The first character of the output string is $G(q_0)$. Then, for each character in the input string, the machine transitions to a new state and produces the output corresponding to that new state. For an input string of length $k$, the output string will have length $k+1$.\n\nDetermine the set of all possible input strings of length two that cause the machine to produce the output string `101`.\n\nA. $\\{00, 11\\}$\n\nB. $\\{01, 10\\}$\n\nC. $\\{00, 01\\}$\n\nD. $\\{10, 11\\}$\n\nE. $\\{01, 11\\}$\n\nF. The empty set $\\emptyset$", "solution": "Let the input string of length two be denoted by $x_1x_2$, where $x_1, x_2 \\in \\{0, 1\\}$. For a Moore machine, the output string is generated based on the sequence of states visited. The machine starts in the initial state $s_{start} = q_0$. The initial output is $G(q_0)$. After processing the first input character $x_1$, the machine transitions to a new state, let's call it $q'$, where $q' = T(q_0, x_1)$. The second output character is $G(q')$. After processing the second input character $x_2$, the machine transitions to a final state, let's call it $q''$, where $q'' = T(q', x_2)$. The third output character is $G(q'')$.\n\nSo, for an input string $x_1x_2$, the sequence of states is $q_0 \\xrightarrow{x_1} q' \\xrightarrow{x_2} q''$. The corresponding output string is $G(q_0)G(q')G(q'')$. We are given that this output string must be `101`.\n\nLet's break down the problem by comparing the required output with the machine's output function $G$:\n\n1.  **First output character (from the start state):**\n    The desired first output is `1`. The machine's output from the start state $q_0$ is $G(q_0)$. From the problem definition, $G(q_0) = 1$. This matches, so the condition is met without any constraints on the input.\n\n2.  **Second output character (after the first input $x_1$):**\n    The desired second output is `0`. This output is generated by the state $q' = T(q_0, x_1)$. We need to find the state(s) whose output is `0`. Looking at the output function $G$:\n    $G(q_0) = 1$\n    $G(q_1) = 0$\n    $G(q_2) = 1$\n    The only state that produces an output of `0` is $q_1$. Therefore, the state after the first transition, $q'$, must be $q_1$.\n    So, we must have $T(q_0, x_1) = q_1$.\n    Now we look at the transition function $T$ starting from $q_0$:\n    $T(q_0, 0) = q_1$\n    $T(q_0, 1) = q_2$\n    To reach state $q_1$ from $q_0$, the input $x_1$ must be `0`. So, the first character of our input string is fixed: $x_1 = 0$.\n\n3.  **Third output character (after the second input $x_2$):**\n    The desired third output is `1`. This output is generated by the state $q'' = T(q', x_2)$. We already determined that $q'$ must be $q_1$. So, we need to find $x_2$ such that the machine transitions from $q_1$ to a state $q''$ where $G(q'') = 1$.\n    From the output function $G$, the states that produce an output of `1` are $q_0$ and $q_2$.\n    Therefore, the destination state $q''$ can be either $q_0$ or $q_2$. We need to check which inputs $x_2$ cause a transition from $q_1$ to either $q_0$ or $q_2$.\n    Let's look at the transitions from state $q_1$:\n    $T(q_1, 0) = q_0$\n    $T(q_1, 1) = q_2$\n\n    *   **Case 1:** The machine transitions to $q_0$. This happens if the input is $x_2 = 0$. Since $G(q_0) = 1$, this is a valid path. Combining with $x_1 = 0$, this gives the input string $x_1x_2 = 00$.\n    *   **Case 2:** The machine transitions to $q_2$. This happens if the input is $x_2 = 1$. Since $G(q_2) = 1$, this is also a valid path. Combining with $x_1 = 0$, this gives the input string $x_1x_2 = 01$.\n\n4.  **Conclusion:**\n    We have found two possible input strings of length two that produce the output `101`: `00` and `01`.\n    Let's verify them:\n    -   Input `00`: $q_0 \\xrightarrow{0} q_1 \\xrightarrow{0} q_0$. Output sequence: $G(q_0)G(q_1)G(q_0) = 101$. Correct.\n    -   Input `01`: $q_0 \\xrightarrow{0} q_1 \\xrightarrow{1} q_2$. Output sequence: $G(q_0)G(q_1)G(q_2) = 101$. Correct.\n\n    The set of all possible input strings is $\\{00, 01\\}$. This corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1370719"}]}