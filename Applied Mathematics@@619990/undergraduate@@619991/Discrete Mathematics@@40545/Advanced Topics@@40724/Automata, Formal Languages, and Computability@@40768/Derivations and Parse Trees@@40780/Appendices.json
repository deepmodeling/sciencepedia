{"hands_on_practices": [{"introduction": "The first step in mastering formal grammars is to become fluent in the process of derivation. This practice provides a hands-on opportunity to apply production rules sequentially to generate a specific string. By performing a leftmost derivation for a fully parenthesized arithmetic expression, you will build a foundational skill essential for understanding how compilers interpret code and how languages are formally defined [@problem_id:1362640].", "problem": "Consider the following context-free grammar $G$ designed to generate fully parenthesized arithmetic expressions. The grammar has a set of terminals $T = \\{ `(`, `)`, `v`, `+`, `*`, `-` $\\}$, a set of non-terminals (or variables) $N = \\{ E, \\text{Op} \\}$, and a start symbol $S = E$. The production rules are labeled for reference:\n\n-   $P_1: E \\rightarrow (E \\text{ Op } E)$\n-   $P_2: E \\rightarrow v$\n-   $P_3: \\text{Op} \\rightarrow +$\n-   $P_4: \\text{Op} \\rightarrow *$\n-   $P_5: \\text{Op} \\rightarrow -$\n\nA leftmost derivation is a sequence of rule applications where, at each step, the leftmost non-terminal in the current string is replaced according to one of the production rules.\n\nWhich of the following sequences of production rule labels represents the correct leftmost derivation of the string `(((v+v)*v)-v)`?\n\nA. `P1, P2, P5, P1, P2, P4, P1, P2, P3, P2`\n\nB. `P1, P2, P3, P1, P2, P4, P1, P2, P5, P2`\n\nC. `P1, P1, P1, P2, P3, P2, P4, P2, P5, P2`\n\nD. `P1, P1, P1, P2, P5, P2, P4, P2, P3, P2`\n\nE. `P1, P1, P2, P3, P2, P4, P2, P5, P2, P1`", "solution": "We are given the grammar with productions\n$P_1: E \\to (E\\ \\mathrm{Op}\\ E)$, $P_2: E \\to v$, $P_3: \\mathrm{Op} \\to +$, $P_4: \\mathrm{Op} \\to *$, $P_5: \\mathrm{Op} \\to -$,\nand we must produce the string $(((v+v)*v)-v)$ by a leftmost derivation, i.e., always expanding the leftmost non-terminal.\n\nObserve that the target string has the outermost structure $(\\ \\cdot\\ -\\ v)$, so the first expansion must be $P_1$ and the final $\\mathrm{Op}$ at top level must be $-$. The left operand of this top-level $-$ is $((v+v)*v)$, which itself has the form $(\\ (v+v)\\ *\\ v\\ )$, and the innermost $(v+v)$ fixes the first $\\mathrm{Op}$ inside to be $+$.\n\nCarrying out the leftmost derivation step-by-step:\n\nStart: $E$\n\n1) Apply $P_1$ to the leftmost $E$:\n$$E \\Rightarrow (E\\ \\mathrm{Op}\\ E).$$\n\n2) Expand the leftmost $E$ (the left operand) with $P_1$ to match the needed nested form:\n$$(E\\ \\mathrm{Op}\\ E) \\Rightarrow ((E\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n3) Expand the leftmost $E$ again (to build the innermost $(v+v)$) with $P_1$:\n$$((E\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((E\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n4) Expand the leftmost $E$ to a terminal with $P_2$:\n$$(((E\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((v\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n5) Choose the innermost operator to be $+$ with $P_3$:\n$$(((v\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((v + E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n6) Expand the next leftmost $E$ to $v$ with $P_2$:\n$$(((v + E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((v + v)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n7) Choose the next operator (between $(v+v)$ and the next $E$) to be $*$ with $P_4$:\n$$(((v + v)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((v + v) * E)\\ \\mathrm{Op}\\ E).$$\n\n8) Expand the next leftmost $E$ to $v$ with $P_2$:\n$$(((v + v) * E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((v + v) * v)\\ \\mathrm{Op}\\ E).$$\n\n9) Choose the top-level operator to be $-$ with $P_5$:\n$$(((v + v) * v)\\ \\mathrm{Op}\\ E) \\Rightarrow (((v + v) * v) - E).$$\n\n10) Finally, expand the last $E$ to $v$ with $P_2$:\n$$(((v + v) * v) - E) \\Rightarrow (((v + v) * v) - v).$$\n\nThe sequence of production labels used is\n$P_1, P_1, P_1, P_2, P_3, P_2, P_4, P_2, P_5, P_2$,\nwhich matches option C.", "answer": "$$\\boxed{C}$$", "id": "1362640"}, {"introduction": "A derivation is more than just a sequence of string replacements; it has a direct and intuitive visual counterpart: the parse tree. This exercise bridges the gap between the linear process of derivation and the hierarchical structure of a parse tree, showing how one defines the other. Using a grammar designed for a specialized communication protocol, you will first find a unique derivation and then analyze the structure of the resulting tree by determining its height [@problem_id:1362660].", "problem": "In the design of a specialized communication protocol for a network of environmental sensors, data payloads are transmitted as binary strings. A key feature of this protocol is the reservation of the substring `11` as a high-priority \"attention\" signal. To prevent data from being misinterpreted as this signal, all valid data strings generated by the sensors are forbidden from containing the substring `11`.\n\nA formal model for this system is given by a Context-Free Grammar (CFG), denoted as $G$. This grammar generates the language of all valid, non-empty data strings. The components of $G$ are defined as follows:\n\n-   **Terminal symbols:** $\\{0, 1\\}$\n-   **Non-terminal symbols (Variables):** $\\{S, A\\}$\n-   **Start Symbol:** $S$\n-   **Production Rules:**\n    1.  $S \\to 0S$\n    2.  $S \\to 1A$\n    3.  $S \\to 0$\n    4.  $S \\to 1$\n    5.  $A \\to 0S$\n    6.  $A \\to 0$\n\nYour task is to analyze the structure of a specific data string, `10010`, as generated by this grammar. First, find the unique leftmost derivation of this string. Then, based on this derivation, determine the height of its corresponding parse tree. The height of a parse tree is defined as the number of edges in the longest path from the root node to any leaf node. A tree consisting of a single node has a height of 0.\n\nWhat is the height of the parse tree for the string `10010`?", "solution": "We seek the unique leftmost derivation of the string $10010$ using the given CFG. A leftmost derivation always expands the leftmost nonterminal at each step. To begin the string with $1$, from $S$ we must use $S \\to 1A$ (since $S \\to 1$ would terminate too early). Proceeding leftmost at each stage and matching the next needed terminal symbol yields:\n$$\nS \\Rightarrow 1A \\quad (\\text{by } S \\to 1A)\n$$\n$$\n\\Rightarrow 10S \\quad (\\text{by } A \\to 0S)\n$$\n$$\n\\Rightarrow 100S \\quad (\\text{by } S \\to 0S)\n$$\n$$\n\\Rightarrow 1001A \\quad (\\text{by } S \\to 1A)\n$$\n$$\n\\Rightarrow 10010 \\quad (\\text{by } A \\to 0)\n$$\nThis leftmost derivation is unique because at each step the next terminal to match forces the choice of production.\n\nTo determine the height of the parse tree (the number of edges on the longest root-to-leaf path), follow the chain of nonterminals along the derivation that leads to the final terminal:\n$$\nS \\to A \\to S \\to S \\to A \\to 0.\n$$\nCounting edges along this path gives $5$ edges: $S \\to A$ (1), $A \\to S$ (2), $S \\to S$ (3), $S \\to A$ (4), $A \\to 0$ (5). No longer path exists because each step follows the only nonterminal child in the applied production until the final terminal is produced. Therefore, the parse tree height is $5$.", "answer": "$$\\boxed{5}$$", "id": "1362660"}, {"introduction": "While many grammars produce a single, unambiguous structure for each valid string, some do not. This exercise explores the crucial concept of ambiguity, where a single string can be interpreted in multiple ways. By calculating the total number of distinct parse trees for an expression using a classic ambiguous grammar, you will gain a concrete understanding of why ambiguity is a critical issue in compiler design and natural language processing, and you'll discover a surprising connection to the field of combinatorics [@problem_id:1362657].", "problem": "Consider a context-free grammar $G$ designed to parse simple arithmetic expressions. The grammar has a single non-terminal symbol $E$ (for expression), two terminal symbols representing operators, `+` and `*`, and one terminal symbol `id` representing an identifier or a number. The production rules of the grammar $G$ are as follows:\n\n1.  $E \\rightarrow E + E$\n2.  $E \\rightarrow E * E$\n3.  $E \\rightarrow \\text{id}$\n\nThis grammar is ambiguous because it does not enforce any operator precedence or associativity. As a result, a single string can have multiple valid derivations, each corresponding to a distinct parse tree.\n\nYour task is to determine the total number of distinct parse trees for the string `id+id*id+id*id`.", "solution": "We encode the input string as $a_{1}\\,o_{1}\\,a_{2}\\,o_{2}\\,a_{3}\\,o_{3}\\,a_{4}\\,o_{4}\\,a_{5}$, where $a_{i}$ are the five occurrences of $\\text{id}$ and $(o_{1},o_{2},o_{3},o_{4})=(+,*,+,*)$. For the grammar $E \\rightarrow E+E \\mid E*E \\mid \\text{id}$, a parse tree for this fixed token sequence is obtained by choosing a binary split at some operator position $o_{k}$, making it the root operator, and then recursively parsing the left substring $a_{1}\\,o_{1}\\,\\dots,\\,a_{k}$ and the right substring $a_{k+1}\\,o_{k+1}\\,\\dots,\\,a_{5}$. Because the operator tokens are fixed in position, once a split $k$ is chosen, the operator at the root is forced to be $o_{k}$; hence the number of parse trees depends only on how many ways we can fully parenthesize the five operands, not on the particular operator symbols.\n\nLet $T(m)$ be the number of parse trees for a substring with $m$ operands (and thus $m-1$ operators). The base case is $T(1)=1$. For $m \\geq 2$, every parse is obtained by choosing a split after the $k$-th operand for some $k \\in \\{1,\\dots,m-1\\}$, yielding the recurrence\n$$\nT(m)=\\sum_{k=1}^{m-1} T(k)\\,T(m-k).\n$$\nThis is the Catalan recurrence, so $T(m)=C_{m-1}$, where\n$$\nC_{r}=\\frac{1}{r+1}\\binom{2r}{r}.\n$$\nFor our string there are $m=5$ operands, hence the number of distinct parse trees is\n$$\nT(5)=C_{4}=\\frac{1}{5}\\binom{8}{4}=\\frac{1}{5}\\cdot 70=14.\n$$\nTherefore, the total number of distinct parse trees is $14$.", "answer": "$$\\boxed{14}$$", "id": "1362657"}]}