{"hands_on_practices": [{"introduction": "The power of a Non-deterministic Finite Automaton (NFA) lies in its ability to explore multiple computation paths simultaneously. This exercise helps you visualize this process by manually tracing the \"set of active states\" as an NFA reads an input string. This hands-on simulation builds a strong intuition for the subset construction, the formal algorithm used to convert any NFA into an equivalent Deterministic Finite Automaton (DFA) [@problem_id:1367326].", "id": "1367326", "problem": "Consider a Nondeterministic Finite Automaton (NFA), denoted as $N$, which is formally defined by the 5-tuple $(Q, \\Sigma, \\delta, q_0, F)$. The components are defined as follows:\n- The set of states is $Q = \\{q_0, q_1, q_2\\}$.\n- The input alphabet is $\\Sigma = \\{a, b\\}$.\n- The start state is $q_0$.\n- The set of final (or accepting) states is $F = \\{q_2\\}$.\n- The transition function $\\delta: Q \\times \\Sigma \\to \\mathcal{P}(Q)$, where $\\mathcal{P}(Q)$ is the power set of $Q$, is given by:\n  - $\\delta(q_0, a) = \\{q_0, q_1\\}$\n  - $\\delta(q_0, b) = \\{q_0\\}$\n  - $\\delta(q_1, a) = \\emptyset$\n  - $\\delta(q_1, b) = \\{q_2\\}$\n  - $\\delta(q_2, a) = \\emptyset$\n  - $\\delta(q_2, b) = \\emptyset$\n\nWhen an NFA processes an input string, it can be in multiple states simultaneously. The set of all states that the NFA could be in after processing a given portion of the input is called the \"set of active states\". It is a fundamental result in automata theory that for any NFA, there exists an equivalent Deterministic Finite Automaton (DFA) where each state in the DFA corresponds to a set of active states in the NFA.\n\nGiven the NFA $N$ described above, determine the set of active states after processing the input string `aba` starting from the initial state $q_0$.\n\nA. $\\{q_0\\}$\nB. $\\{q_0, q_1\\}$\nC. $\\{q_0, q_2\\}$\nD. $\\{q_1, q_2\\}$\nE. $\\{q_0, q_1, q_2\\}$\n\n", "solution": "We model the evolution of the set of active states using the standard NFA update rule: if $S_{i}$ is the set of active states after reading the first $i$ symbols, then for the next input symbol $x \\in \\Sigma$,\n$$\nS_{i+1}=\\bigcup_{q \\in S_{i}} \\delta(q,x).\n$$\nThere are no $\\epsilon$-transitions in this NFA, so no $\\epsilon$-closure is needed. Start with the initial set $S_{0}=\\{q_{0}\\}$.\n\nProcess the first symbol $a$:\n$$\nS_{1}=\\bigcup_{q \\in \\{q_{0}\\}} \\delta(q,a)=\\delta(q_{0},a)=\\{q_{0},q_{1}\\}.\n$$\n\nProcess the next symbol $b$:\n$$\nS_{2}=\\bigcup_{q \\in \\{q_{0},q_{1}\\}} \\delta(q,b)=\\delta(q_{0},b)\\cup \\delta(q_{1},b)=\\{q_{0}\\}\\cup \\{q_{2}\\}=\\{q_{0},q_{2}\\}.\n$$\n\nProcess the final symbol $a$:\n$$\nS_{3}=\\bigcup_{q \\in \\{q_{0},q_{2}\\}} \\delta(q,a)=\\delta(q_{0},a)\\cup \\delta(q_{2},a)=\\{q_{0},q_{1}\\}\\cup \\emptyset=\\{q_{0},q_{1}\\}.\n$$\n\nTherefore, after processing the input string `aba`, the set of active states is $\\{q_{0},q_{1}\\}$, which corresponds to option B.", "answer": "$$\\boxed{B}$$"}, {"introduction": "The fundamental equivalence between NFAs and DFAs is a cornerstone of automata theory, formally demonstrated through the subset construction algorithm. This practice guides you through a complete conversion, transforming a given NFA into its equivalent minimal DFA [@problem_id:1367335]. By executing the algorithm step-by-step, you will gain practical mastery of the conversion process and observe how a compact NFA can unfold into a larger, yet fully deterministic, machine.", "id": "1367335", "problem": "Consider a Nondeterministic Finite Automaton (NFA), denoted as $N$, which is formally defined by the 5-tuple $(Q, \\Sigma, \\delta, q_{start}, F)$. The components are specified as follows:\n- The set of states is $Q = \\{s_0, s_1\\}$.\n- The input alphabet is $\\Sigma = \\{a, b\\}$.\n- The starting state is $q_{start} = s_0$.\n- The set of final (or accepting) states is $F = \\{s_1\\}$.\n- The transition function $\\delta: Q \\times \\Sigma \\to \\mathcal{P}(Q)$, where $\\mathcal{P}(Q)$ is the power set of $Q$, is given by the following table:\n\n| State | Input 'a' | Input 'b' |\n|:-----:|:---------:|:---------:|\n| $s_0$ | $\\{s_1\\}$   | $\\{s_0, s_1\\}$ |\n| $s_1$ | $\\{s_0\\}$   | $\\{s_1\\}$   |\n\nIt is a known theorem in automata theory that for any NFA, there exists an equivalent Deterministic Finite Automaton (DFA) that recognizes the same language. Using the standard subset construction algorithm, one can construct such a DFA. After constructing the equivalent DFA, it should be minimized to have the fewest possible states.\n\nHow many final (accepting) states are in the minimal DFA that is equivalent to the NFA $N$ described above?\n\nA. 0\nB. 1\nC. 2\nD. 3\n\n", "solution": "The problem asks for the number of final states in the minimal Deterministic Finite Automaton (DFA) equivalent to the given Nondeterministic Finite Automaton (NFA). We will use the subset construction algorithm to find the equivalent DFA, and then count its final states. The DFA generated by the subset construction from an NFA with no unreachable states from its start state will itself have no unreachable states. It can then be checked for minimality.\n\nThe given NFA is $N = (Q, \\Sigma, \\delta, s_0, F)$, where:\n- $Q = \\{s_0, s_1\\}$\n- $\\Sigma = \\{a, b\\}$\n- Start state is $s_0$\n- Final states $F = \\{s_1\\}$\n- Transition function $\\delta$ is as given in the problem statement.\n\nThe states of the equivalent DFA, let's call it $M$, will be subsets of the NFA's state set $Q$. The start state of $M$ is the set containing the start state of $N$.\nLet's denote the states of $M$ as $S_i$.\n\n1.  **Start State:** The start state of $M$ is $S_{start} = \\{s_0\\}$. Let's call this state $S_0$.\n\n2.  **Explore from $S_0 = \\{s_0\\}$:** We compute the transitions from this state for each symbol in the alphabet $\\Sigma=\\{a,b\\}$.\n    - For input 'a': $\\delta_M(S_0, a) = \\delta(s_0, a) = \\{s_1\\}$. This is a new state. Let's call it $S_1 = \\{s_1\\}$.\n    - For input 'b': $\\delta_M(S_0, b) = \\delta(s_0, b) = \\{s_0, s_1\\}$. This is another new state. Let's call it $S_2 = \\{s_0, s_1\\}$.\n\n3.  **Explore from $S_1 = \\{s_1\\}$:** Now we compute transitions for the new state $S_1$.\n    - For input 'a': $\\delta_M(S_1, a) = \\delta(s_1, a) = \\{s_0\\} = S_0$. This state already exists.\n    - For input 'b': $\\delta_M(S_1, b) = \\delta(s_1, b) = \\{s_1\\} = S_1$. This state already exists.\n\n4.  **Explore from $S_2 = \\{s_0, s_1\\}$:** We compute transitions for the state $S_2$. A transition from a set of states is the union of the transitions from each state in the set.\n    - For input 'a': $\\delta_M(S_2, a) = \\delta(s_0, a) \\cup \\delta(s_1, a) = \\{s_1\\} \\cup \\{s_0\\} = \\{s_0, s_1\\} = S_2$.\n    - For input 'b': $\\delta_M(S_2, b) = \\delta(s_0, b) \\cup \\delta(s_1, b) = \\{s_0, s_1\\} \\cup \\{s_1\\} = \\{s_0, s_1\\} = S_2$.\n\nWe have now explored all reachable states. The set of states for our new DFA $M$ is $Q_M = \\{S_0, S_1, S_2\\} = \\{\\{s_0\\}, \\{s_1\\}, \\{s_0, s_1\\}\\}$. The DFA has 3 states.\n\n5.  **Identify Final States:** A state in the DFA is a final state if it contains at least one final state from the original NFA. The set of final states in the NFA is $F = \\{s_1\\}$.\n    - $S_0 = \\{s_0\\}$ does not contain $s_1$. Thus, $S_0$ is not a final state.\n    - $S_1 = \\{s_1\\}$ contains $s_1$. Thus, $S_1$ is a final state.\n    - $S_2 = \\{s_0, s_1\\}$ contains $s_1$. Thus, $S_2$ is a final state.\n    The set of final states in $M$ is $F_M = \\{S_1, S_2\\}$.\n\n6.  **Check for Minimality:** The DFA produced by the subset construction is minimal if all its states are distinguishable.\n    - $S_0$ is non-final, while $S_1$ and $S_2$ are final. Therefore, $S_0$ is distinguishable from both $S_1$ and $S_2$.\n    - To distinguish between $S_1$ and $S_2$ (both final states), we check their transitions.\n        - On input 'a', $\\delta_M(S_1, a) = S_0$ (a non-final state).\n        - On input 'a', $\\delta_M(S_2, a) = S_2$ (a final state).\n    Since the input 'a' takes $S_1$ and $S_2$ to states of different finality (one non-final, one final), $S_1$ and $S_2$ are distinguishable.\n    Since all three states are distinguishable from one another, the constructed 3-state DFA is minimal.\n\n7.  **Count the Final States:** The set of final states is $F_M = \\{S_1, S_2\\}$. The number of final states is $|F_M| = 2$.", "answer": "$$\\boxed{C}$$"}, {"introduction": "While NFAs and DFAs recognize the same class of languages, they do not share all operational properties. For instance, finding a language's complement is simple with a DFA but surprisingly complex for an NFA. This problem challenges you to discover why swapping the final and non-final states of an NFA fails to create an automaton for the complement language [@problem_id:1367357]. By identifying a string that defies this simple approach, you will uncover a key nuance of non-determinism and appreciate why converting to a DFA is often a necessary step.", "id": "1367357", "problem": "In the theory of computation, a standard method for constructing an automaton for the complement of a language $L$ is to start with a Deterministic Finite Automaton (DFA) that recognizes $L$ and then swap its set of final states with its set of non-final states. This procedure, however, is not generally valid for Nondeterministic Finite Automata (NFAs).\n\nThis problem asks you to explore this failure. Consider the NFA $N$ defined by the 5-tuple $(Q, \\Sigma, \\delta, q_0, F)$, where:\n- The set of states is $Q = \\{q_s, q_f\\}$.\n- The alphabet is $\\Sigma = \\{a, b\\}$.\n- The start state is $q_s$.\n- The set of final states is $F = \\{q_f\\}$.\n- The transition function $\\delta: Q \\times \\Sigma \\to \\mathcal{P}(Q)$, where $\\mathcal{P}(Q)$ is the power set of $Q$, is given by:\n    - $\\delta(q_s, a) = \\{q_s, q_f\\}$\n    - $\\delta(q_s, b) = \\{q_s\\}$\n    - $\\delta(q_f, a) = \\emptyset$ (the empty set)\n    - $\\delta(q_f, b) = \\emptyset$\n\nLet $L(N)$ be the language accepted by $N$.\nNow, construct a new NFA, $N'$, by swapping the final and non-final states of $N$. The new automaton is $N' = (Q, \\Sigma, \\delta, q_s, Q \\setminus F)$. Let $L(N')$ be the language accepted by $N'$.\n\nA key indicator that $L(N')$ is not the complement of $L(N)$ is the existence of a string that is accepted by both automata. If $L(N')$ were the true complement of $L(N)$, no string could be in both languages.\n\nYour task is to find the shortest non-empty string $w$ over the alphabet $\\Sigma$ that is accepted by both the original automaton $N$ and the modified automaton $N'$.\n\n", "solution": "We analyze the NFA $N=(Q,\\Sigma,\\delta,q_{s},F)$ with $Q=\\{q_{s},q_{f}\\}$, $\\Sigma=\\{a,b\\}$, start state $q_{s}$, accepting set $F=\\{q_{f}\\}$, and transitions $\\delta(q_{s},a)=\\{q_{s},q_{f}\\}$, $\\delta(q_{s},b)=\\{q_{s}\\}$, and $\\delta(q_{f},a)=\\delta(q_{f},b)=\\emptyset$.\n\nFirst, characterize $L(N)$. A string $w$ is accepted by $N$ if and only if there exists a run that ends in $q_{f}$ after reading all symbols of $w$. The only way to enter $q_{f}$ is by reading an $a$ in state $q_{s}$ and taking the transition to $q_{f}$. Since $\\delta(q_{f},x)=\\emptyset$ for all $x\\in\\Sigma$, once $q_{f}$ is reached, no further input can be read. Therefore, in any accepting run, the transition into $q_{f}$ must occur on the last symbol of the input, and that last symbol must be $a$. Conversely, for any string ending with $a$, there exists a run that stays in $q_{s}$ on all earlier symbols (choosing $q_{s}$ from $\\delta(q_{s},a)$ when needed and using $\\delta(q_{s},b)=\\{q_{s}\\}$), and then takes the transition $q_{s}\\xrightarrow{a}q_{f}$ on the final symbol. Hence\n$$\nL(N)=\\{xa\\mid x\\in\\{a,b\\}^{*}\\},\n$$\nthe set of all nonempty strings whose last symbol is $a$.\n\nNow construct $N'=(Q,\\Sigma,\\delta,q_{s},Q\\setminus F)$, so the only accepting state is $q_{s}$. A string $w$ is accepted by $N'$ if and only if there exists a run that ends in $q_{s}$. From $q_{s}$, on input $a$ we can choose to remain in $q_{s}$ (since $\\delta(q_{s},a)$ contains $q_{s}$), and on input $b$ we must go to $q_{s}$ (since $\\delta(q_{s},b)=\\{q_{s}\\}$). Therefore, for every $w\\in\\Sigma^{*}$ there exists a run that stays in $q_{s}$ throughout and hence ends in $q_{s}$. Thus\n$$\nL(N')=\\Sigma^{*}.\n$$\n\nTherefore, $L(N)\\cap L(N')=L(N)=\\{xa\\mid x\\in\\{a,b\\}^{*}\\}$. The shortest nonempty string in this set is $w=a$, of length $1$, which is accepted by $N$ (by taking $q_{s}\\xrightarrow{a}q_{f}$) and accepted by $N'$ (by taking $q_{s}\\xrightarrow{a}q_{s}$).", "answer": "$$\\boxed{a}$$"}]}