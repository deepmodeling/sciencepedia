{"hands_on_practices": [{"introduction": "Let's begin with a foundational application of Moore machines: computing a running checksum. This exercise demonstrates how states can be cleverly defined to track an accumulating value, such as the sum of digits in a data stream. By designing a machine that calculates a sum modulo 3, you will practice the core skill of mapping a mathematical operation directly onto the states and transitions of a finite automaton. [@problem_id:1386329]", "problem": "A component in a digital communication system is designed to compute a running checksum for an incoming binary data stream. This component is modeled as a Moore machine.\n\nA Moore machine is a type of finite automaton, formally defined by a 6-tuple $(Q, \\Sigma, \\Gamma, \\delta, \\lambda, q_{start})$, where:\n- $Q$ is a finite set of states.\n- $\\Sigma$ is the input alphabet.\n- $\\Gamma$ is the output alphabet.\n- $\\delta: Q \\times \\Sigma \\to Q$ is the transition function, which determines the next state based on the current state and input symbol.\n- $\\lambda: Q \\to \\Gamma$ is the output function, where the output depends only on the current state.\n- $q_{start} \\in Q$ is the start state.\n\nFor this specific problem, the machine processes an input string of binary digits from left to right. The machine's output after having processed any number of input digits is defined as the sum of all digits processed up to that point, calculated modulo 3. The machine starts in a state corresponding to an empty input string (where the sum is 0).\n\nThe machine's input alphabet is $\\Sigma = \\{0, 1\\}$ and its output alphabet is $\\Gamma = \\{0, 1, 2\\}$. Let the states of the machine be denoted by $S_0, S_1, S_2$, where being in state $S_i$ signifies that the sum of all binary digits processed so far is congruent to $i$ modulo 3. The start state is $S_0$.\n\nWhich of the following options correctly describes a portion of the transition function $\\delta$ for this Moore machine?\n\nA. $\\delta(S_1, 1) = S_1$ and $\\delta(S_2, 1) = S_2$\n\nB. $\\delta(S_0, 1) = S_1$ and $\\delta(S_1, 1) = S_2$\n\nC. $\\delta(S_0, 0) = S_1$ and $\\delta(S_1, 0) = S_2$\n\nD. $\\delta(S_1, 1) = S_0$ and $\\delta(S_2, 0) = S_0$\n\nE. $\\delta(S_2, 1) = S_1$ and $\\delta(S_0, 1) = S_0$", "solution": "By definition, being in state $S_{i}$ means the sum of processed bits so far is congruent to $i$ modulo $3$. Upon reading a new input bit $a \\in \\{0,1\\}$, the new sum modulo $3$ becomes $(i + a) \\bmod 3$. Therefore, the transition function must satisfy\n$$\n\\delta(S_{i}, a) = S_{(i+a)\\bmod 3}.\n$$\nIn particular:\n- For $a=0$, $\\delta(S_{i},0)=S_{i}$ for all $i$.\n- For $a=1$, $\\delta(S_{0},1)=S_{1}$, $\\delta(S_{1},1)=S_{2}$, and $\\delta(S_{2},1)=S_{0}$.\n\nNow check the options:\n- A states $\\delta(S_{1},1)=S_{1}$ and $\\delta(S_{2},1)=S_{2}$, which contradicts $\\delta(S_{1},1)=S_{2}$ and $\\delta(S_{2},1)=S_{0}$, so A is false.\n- B states $\\delta(S_{0},1)=S_{1}$ and $\\delta(S_{1},1)=S_{2}$, which matches the derived transitions, so B is true.\n- C states $\\delta(S_{0},0)=S_{1}$ and $\\delta(S_{1},0)=S_{2}$, but for $a=0$ we must have self-loops, so C is false.\n- D states $\\delta(S_{1},1)=S_{0}$ and $\\delta(S_{2},0)=S_{0}$, both contradict the derived rules, so D is false.\n- E states $\\delta(S_{2},1)=S_{1}$ and $\\delta(S_{0},1)=S_{0}$, both contradict the derived rules, so E is false.\n\nHence, the correct option is B.", "answer": "$$\\boxed{B}$$", "id": "1386329"}, {"introduction": "Building on the basics, our next challenge involves pattern recognition. We will design a Moore machine that verifies if an input string consists of strictly alternating bits, a common requirement in data encoding schemes. This practice will introduce the concept of states as a form of memory to recall the previous input, and it highlights the utility of a 'trap state' to efficiently handle invalid sequences. [@problem_id:1386354]", "problem": "A Moore machine is a type of finite automaton where the output is determined solely by the current state. It is formally defined by a 6-tuple $(Q, \\Sigma, \\Delta, \\delta, \\lambda, q_0)$, where:\n- $Q$ is a finite set of states.\n- $\\Sigma$ is the input alphabet.\n- $\\Delta$ is the output alphabet.\n- $\\delta: Q \\times \\Sigma \\to Q$ is the transition function.\n- $\\lambda: Q \\to \\Delta$ is the output function.\n- $q_0 \\in Q$ is the start state.\n\nThe output of the machine for an input string is the sequence of outputs from the states visited, starting with the output of the initial state $q_0$.\n\nConsider a Moore machine designed to validate a data stream. The machine takes a binary input string from the alphabet $\\Sigma = \\{0, 1\\}$ and produces a binary output from the alphabet $\\Delta = \\{0, 1\\}$. The machine must output $1$ if the portion of the input string processed so far is \"alternating,\" and $0$ otherwise. A string is defined as \"alternating\" if its characters strictly alternate between $0$ and $1$ (e.g., `0`, `1`, `01`, `10`, `010`). The empty string is also considered alternating. A string is not alternating if it contains consecutive identical characters (e.g., `00`, `11`, `100`).\n\nWhich of the following options correctly defines the states $Q$, start state $q_0$, output function $\\lambda$, and transition function $\\delta$ for such a machine?\n\nA. $Q = \\{S_0, S_1, S_2\\}$, $q_0 = S_0$.\n   The output function is $\\lambda(S_0)=1, \\lambda(S_1)=1, \\lambda(S_2)=0$.\n   The transition function $\\delta$ is:\n| Present State | Input 0 | Input 1 |\n|---|---|---|\n| $S_0$ | $S_1$ | $S_1$ |\n| $S_1$ | $S_2$ | $S_2$ |\n| $S_2$ | $S_2$ | $S_2$ |\n\nB. $Q = \\{S_0, S_A, S_B, S_F\\}$, $q_0 = S_0$.\n   The output function is $\\lambda(S_0)=1, \\lambda(S_A)=1, \\lambda(S_B)=1, \\lambda(S_F)=0$.\n   The transition function $\\delta$ is:\n| Present State | Input 0 | Input 1 |\n|---|---|---|\n| $S_0$ | $S_A$ | $S_B$ |\n| $S_A$ | $S_F$ | $S_B$ |\n| $S_B$ | $S_A$ | $S_F$ |\n| $S_F$ | $S_F$ | $S_F$ |\n\nC. $Q = \\{S_0, S_A, S_B, S_F\\}$, $q_0 = S_0$.\n   The output function is $\\lambda(S_0)=0, \\lambda(S_A)=1, \\lambda(S_B)=1, \\lambda(S_F)=0$.\n   The transition function $\\delta$ is:\n| Present State | Input 0 | Input 1 |\n|---|---|---|\n| $S_0$ | $S_A$ | $S_B$ |\n| $S_A$ | $S_F$ | $S_B$ |\n| $S_B$ | $S_A$ | $S_F$ |\n| $S_F$ | $S_F$ | $S_F$ |\n\nD. $Q = \\{S_0, S_A, S_B\\}$, $q_0 = S_0$.\n   The output function is $\\lambda(S_0)=1, \\lambda(S_A)=1, \\lambda(S_B)=1$.\n   The transition function $\\delta$ is:\n| Present State | Input 0 | Input 1 |\n|---|---|---|\n| $S_0$ | $S_A$ | $S_B$ |\n| $S_A$ | $S_0$ | $S_B$ |\n| $S_B$ | $S_A$ | $S_0$ |", "solution": "To solve this problem, we need to determine the states required to remember the necessary information about the input string seen so far. The machine's output depends on whether the string is strictly alternating.\n\nLet's analyze the properties a state must capture:\n1.  The initial state, representing the empty string. The problem states the empty string is alternating, so the output for this state must be $1$.\n2.  The string is alternating and the last character was a $0$. The machine needs to remember this to check if the next character is a $1$. The output for this state must be $1$.\n3.  The string is alternating and the last character was a $1$. The machine needs to remember this to check if the next character is a $0$. The output for this state must be $1$.\n4.  The alternating pattern has been broken (e.g., `00` or `11` occurred). Once the pattern is broken, it remains broken for any subsequent characters. This is a \"failure\" or \"trap\" state. The output for this state must be $0$.\n\nBased on this analysis, we can define four distinct states:\n- $S_0$: The initial state. Corresponds to the empty string. The string is alternating. Output $\\lambda(S_0) = 1$.\n- $S_A$: The state reached after processing a valid alternating string that ends in $0$. The string is alternating. Output $\\lambda(S_A) = 1$.\n- $S_B$: The state reached after processing a valid alternating string that ends in $1$. The string is alternating. Output $\\lambda(S_B) = 1$.\n- $S_F$: The failure state. Reached when the alternating pattern is broken. The string is not alternating. Output $\\lambda(S_F) = 0$.\n\nNow, let's define the transitions $\\delta(q, i)$ for each state $q$ and input $i$:\n\n- **From state $S_0$ (start state):**\n  - If the input is $0$, the new string is `0`, which is alternating and ends in $0$. We transition to $S_A$. So, $\\delta(S_0, 0) = S_A$.\n  - If the input is $1$, the new string is `1`, which is alternating and ends in $1$. We transition to $S_B$. So, $\\delta(S_0, 1) = S_B$.\n\n- **From state $S_A$ (alternating, ends in $0$):**\n  - If the input is $0$, the string now ends in `00`. The pattern is broken. We transition to the failure state, $S_F$. So, $\\delta(S_A, 0) = S_F$.\n  - If the input is $1$, the string now ends in `01`. The pattern is maintained, and the string now ends in $1$. We transition to $S_B$. So, $\\delta(S_A, 1) = S_B$.\n\n- **From state $S_B$ (alternating, ends in $1$):**\n  - If the input is $0$, the string now ends in `10`. The pattern is maintained, and the string now ends in $0$. We transition to $S_A$. So, $\\delta(S_B, 0) = S_A$.\n  - If the input is $1$, the string now ends in `11`. The pattern is broken. We transition to the failure state, $S_F$. So, $\\delta(S_B, 1) = S_F$.\n\n- **From state $S_F$ (failure state):**\n  - Once the pattern is broken, any additional input cannot fix it. The string will remain non-alternating. Therefore, the machine should stay in the failure state regardless of the input.\n  - So, $\\delta(S_F, 0) = S_F$ and $\\delta(S_F, 1) = S_F$.\n\nLet's summarize our derived machine:\n- $Q = \\{S_0, S_A, S_B, S_F\\}$\n- $q_0 = S_0$\n- Output function: $\\lambda(S_0)=1, \\lambda(S_A)=1, \\lambda(S_B)=1, \\lambda(S_F)=0$.\n- Transition function $\\delta$:\n| Present State | Input 0 | Input 1 |\n|---|---|---|\n| $S_0$ | $S_A$ | $S_B$ |\n| $S_A$ | $S_F$ | $S_B$ |\n| $S_B$ | $S_A$ | $S_F$ |\n| $S_F$ | $S_F$ | $S_F$ |\n\nNow we compare this correct design with the given options.\n\n- **Option A:** This machine has only 3 states. It merges the \"ends in 0\" and \"ends in 1\" states into a single state $S_1$. From $S_1$, any input leads to the failure state $S_2$. This is incorrect. For example, for input `01`, the path is $S_0 \\xrightarrow{0} S_1 \\xrightarrow{1} S_2$. The output for string `01` would be 0 (from state $S_2$), but `01` is alternating. So, A is incorrect.\n\n- **Option B:** This option exactly matches our derived machine in terms of states, start state, output function, and transition function. This is the correct option.\n\n- **Option C:** This machine has the correct state structure and transitions, but the output function is $\\lambda(S_0)=0$. This implies that the empty string is not alternating, which contradicts the problem statement. So, C is incorrect.\n\n- **Option D:** This machine has 3 states and no permanent failure state. If a non-alternating input is received (e.g., `0` in state $S_A$), it transitions back to the start state $S_0$. Let's test this with the string `001`. The state path is $S_0 \\xrightarrow{0} S_A \\xrightarrow{0} S_0 \\xrightarrow{1} S_B$. The machine goes through states $S_A$, $S_0$, and $S_B$ after reading the inputs. The outputs for the strings `0`, `00`, and `001` would be $\\lambda(S_A)=1$, $\\lambda(S_0)=1$, and $\\lambda(S_B)=1$. The output for `00` should be $0$, but here it is $1$. Thus, this machine does not correctly identify non-alternating strings. So, D is incorrect.\n\nTherefore, the only correct specification is Option B.", "answer": "$$\\boxed{B}$$", "id": "1386354"}, {"introduction": "Our final practice explores a concept central to digital logic and signal processing: creating a signal delay. You will construct a Moore machine that acts as a \"two-step synchronizer,\" outputting the input it received two steps prior. This problem illustrates how states can be used to maintain a fixed-size 'history' of recent inputs, functioning much like a digital shift register. [@problem_id:1386370]", "problem": "A Moore machine is to be designed as a \"two-step signal synchronizer\". The machine reads a binary input string, one bit at a time from left to right. For any given time step $t \\ge 3$, the output of the machine must be equal to the input bit that was received at time step $t-2$. For the first two time steps ($t=1$ and $t=2$), the specific inputs from times $t-1$ and $t-2$ are not available. For these cases, the machine should produce a default output of 0.\n\nThe states of the machine can be labeled as $S_{ab}$, where $a$ and $b$ represent the inputs received at times $t-2$ and $t-1$, respectively. The machine starts in an initial state corresponding to the assumption that the two preceding bits were both 0.\n\nThe machine processes the input string `10110`. After the entire string has been processed, what is the final state of the machine, and what is the output associated with that final state?\n\nA. The final state corresponds to the history '10', and its output is 1.\n\nB. The final state corresponds to the history '10', and its output is 0.\n\nC. The final state corresponds to the history '01', and its output is 0.\n\nD. The final state corresponds to the history '11', and its output is 1.\n\nE. The final state corresponds to the history '00', and its output is 0.", "solution": "We model the Moore machine with states labeled $S_{ab}$ where $a$ is the input at time $t-2$ and $b$ is the input at time $t-1$. In a Moore machine, the output depends only on the current state, so the output function is $\\lambda(S_{ab})=a$, which satisfies the requirement that at any time $t \\ge 3$ the output equals the input received at time $t-2$. The initial state is $S_{00}$ to encode the default history of two zeros, ensuring outputs $0$ at $t=1$ and $t=2$.\n\nThe transition function updates the two-bit history by shifting in the new input bit $c$: $\\delta(S_{ab},c)=S_{bc}$.\n\nWe process the input string `10110` step by step, starting from $S_{00}$:\n- After reading $1$: $S_{00} \\xrightarrow{1} S_{01}$.\n- After reading $0$: $S_{01} \\xrightarrow{0} S_{10}$.\n- After reading $1$: $S_{10} \\xrightarrow{1} S_{01}$.\n- After reading $1$: $S_{01} \\xrightarrow{1} S_{11}$.\n- After reading $0$: $S_{11} \\xrightarrow{0} S_{10}$.\n\nThus, after the entire string is processed, the final state is $S_{10}$. Its associated Moore output is $\\lambda(S_{10})=1$.\nTherefore, the correct choice is that the final state corresponds to the history $10$ and its output is $1$, which matches option A.", "answer": "$$\\boxed{A}$$", "id": "1386370"}]}