{"hands_on_practices": [{"introduction": "Before designing your own Mealy machines, it's essential to understand their operational mechanics. This first exercise provides a pre-defined machine and asks you to trace its behavior for a given input string. By stepping through the process, you'll gain a concrete understanding of how the current state and input combine to determine both the next state and the immediate output, which is the core mechanic of any Mealy machine. [@problem_id:1383513]", "problem": "A Mealy machine is a type of finite-state machine that generates an output based on its current state and the current input. It is formally defined by a 6-tuple $(Q, \\Sigma, \\Lambda, \\delta, \\lambda, q_0)$, where:\n- $Q$ is a finite set of states.\n- $\\Sigma$ is a finite set called the input alphabet.\n- $\\Lambda$ is a finite set called the output alphabet.\n- $\\delta: Q \\times \\Sigma \\to Q$ is the transition function.\n- $\\lambda: Q \\times \\Sigma \\to \\Lambda$ is the output function.\n- $q_0 \\in Q$ is the initial state.\n\nConsider a Mealy machine $M$ designed to detect changes in a sequence of characters. The machine is defined as follows:\n- The set of states is $Q = \\{S_0, S_a, S_b, S_c\\}$.\n- The input alphabet is $\\Sigma = \\{a, b, c\\}$.\n- The output alphabet is $\\Lambda = \\{0, 1\\}$.\n- The initial state is $q_0 = S_0$.\n- The transition function $\\delta: Q \\times \\Sigma \\to Q$ is defined by the rule $\\delta(q, i) = S_i$ for any state $q \\in Q$ and any input symbol $i \\in \\Sigma$. (For example, $\\delta(S_b, c) = S_c$).\n- The output function $\\lambda: Q \\times \\Sigma \\to \\Lambda$ is defined as:\n    1. For the initial state, $\\lambda(S_0, i) = 0$ for any input $i \\in \\Sigma$.\n    2. For any other state $S_x$ where $x \\in \\{a, b, c\\}$, the output is given by:\n       $\\lambda(S_x, i) = 0$ if the input symbol $i$ is the same as the state's subscript $x$.\n       $\\lambda(S_x, i) = 1$ if the input symbol $i$ is different from the state's subscript $x$.\n\nGiven the input string `abacabcaab`, what is the corresponding output string produced by the machine $M$?\n\nA) `0111111101`\n\nB) `1111111101`\n\nC) `0010000010`\n\nD) `0101011001`\n\nE) `0110110101`", "solution": "We are given a Mealy machine with states $Q=\\{S_0, S_a, S_b, S_c\\}$, input alphabet $\\Sigma=\\{a,b,c\\}$, and output alphabet $\\Lambda=\\{0,1\\}$. The transition function is $\\delta(q,i)=S_i$ for any $q\\in Q$ and $i\\in\\Sigma$, so after reading symbol $i$ the next state is $S_i$. The output function is $\\lambda(S_0,i)=0$ for any $i$, and for $S_x$ with $x\\in\\{a,b,c\\}$, $\\lambda(S_x,i)=0$ if $i=x$ and $\\lambda(S_x,i)=1$ if $i \\neq x$. This means the machine outputs $0$ on the first symbol and subsequently outputs $0$ exactly when the current input equals the previous input symbol (since the state encodes the previous input), and $1$ when the input changes.\n\nWe process the input string 'abacabcaab' symbol by symbol, tracking the current state, output, and next state using $\\lambda$ and $\\delta$:\n- Start in $S_0$.\n- Read 'a': current state $S_0$, output $\\lambda(S_0,a)=0$, next state $\\delta(S_0,a)=S_a$.\n- Read 'b': current state $S_a$, since $b \\neq a$, output $\\lambda(S_a,b)=1$, next state $S_b$.\n- Read 'a': current state $S_b$, since $a \\neq b$, output $1$, next state $S_a$.\n- Read 'c': current state $S_a$, since $c \\neq a$, output $1$, next state $S_c$.\n- Read 'a': current state $S_c$, since $a \\neq c$, output $1$, next state $S_a$.\n- Read 'b': current state $S_a$, since $b \\neq a$, output $1$, next state $S_b$.\n- Read 'c': current state $S_b$, since $c \\neq b$, output $1$, next state $S_c$.\n- Read 'a': current state $S_c$, since $a \\neq c$, output $1$, next state $S_a$.\n- Read 'a': current state $S_a$, since $a=a$, output $0$, next state $S_a$.\n- Read 'b': current state $S_a$, since $b \\neq a$, output $1$, next state $S_b$.\n\nCollecting the outputs in order yields the string `0111111101`, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1383513"}, {"introduction": "Now that you can trace a Mealy machine's execution, the next step is to design one from a set of requirements. This practice challenges you to construct a machine that detects a specific sequence within a stream of data. This task highlights how states can serve as a form of memory to 'remember' recent inputs, a fundamental concept in using finite automata for pattern recognition. [@problem_id:1383551]", "problem": "A Mealy machine is a type of finite state machine whose output values are determined by both its current state and the current input. It is formally defined as a sextuple $(S, S_0, \\Sigma, \\Omega, \\delta, \\lambda)$ where:\n- $S$ is a finite set of states.\n- $S_0 \\in S$ is the start state.\n- $\\Sigma$ is a finite set called the input alphabet.\n- $\\Omega$ is a finite set called the output alphabet.\n- $\\delta: S \\times \\Sigma \\to S$ is the state-transition function.\n- $\\lambda: S \\times \\Sigma \\to \\Omega$ is the output function.\n\nConsider a simple data stream monitoring system designed to be a Mealy machine. The system processes an input stream of characters from the input alphabet $\\Sigma = \\{a, b\\}$ and produces an output from the alphabet $\\Omega = \\{0, 1\\}$. The system is designed to detect a specific pattern: it must output a '1' if the current input character is the third consecutive 'a' in the stream, and it must output a '0' in all other cases.\n\nThe machine uses three states, $S = \\{S_0, S_1, S_2\\}$, with $S_0$ as the start state. The meaning of each state is as follows:\n- $S_0$: The initial state. The machine is in this state if the string of inputs processed so far does not end in 'a' (i.e., it is empty or ends in 'b').\n- $S_1$: The machine is in this state if the string of inputs processed so far ends in exactly one 'a'.\n- $S_2$: The machine is in this state if the string of inputs processed so far ends in exactly two consecutive 'a's.\n\nWhich of the following tables correctly represents the transition function $\\delta$ (`Next State`) and output function $\\lambda$ (`Output`) for this Mealy machine?\n\nA.\n| Current State | Input | Next State | Output |\n| :--- | :--- | :--- | :--- |\n| $S_0$ | a | $S_1$ | 0 |\n| $S_0$ | b | $S_0$ | 0 |\n| $S_1$ | a | $S_2$ | 0 |\n| $S_1$ | b | $S_0$ | 0 |\n| $S_2$ | a | $S_2$ | 1 |\n| $S_2$ | b | $S_0$ | 0 |\n\nB.\n| Current State | Input | Next State | Output |\n| :--- | :--- | :--- | :--- |\n| $S_0$ | a | $S_1$ | 0 |\n| $S_0$ | b | $S_0$ | 0 |\n| $S_1$ | a | $S_2$ | 0 |\n| $S_1$ | b | $S_0$ | 0 |\n| $S_2$ | a | $S_0$ | 1 |\n| $S_2$ | b | $S_0$ | 0 |\n\nC.\n| Current State | Input | Next State | Output |\n| :--- | :--- | :--- | :--- |\n| $S_0$ | a | $S_1$ | 0 |\n| $S_0$ | b | $S_0$ | 0 |\n| $S_1$ | a | $S_2$ | 1 |\n| $S_1$ | b | $S_0$ | 0 |\n| $S_2$ | a | $S_2$ | 0 |\n| $S_2$ | b | $S_0$ | 0 |\n\nD.\n| Current State | Input | Next State | Output |\n| :--- | :--- | :--- | :--- |\n| $S_0$ | a | $S_1$ | 0 |\n| $S_0$ | b | $S_0$ | 0 |\n| $S_1$ | a | $S_2$ | 0 |\n| $S_1$ | b | $S_1$ | 0 |\n| $S_2$ | a | $S_2$ | 1 |\n| $S_2$ | b | $S_0$ | 0 |", "solution": "We use the Mealy definition: the output depends on the current state and the current input. The requirement “output 1 if and only if the current input character is the third consecutive a” means:\n- The only situation that produces output 1 is when, before reading the current input, we have already seen exactly two consecutive a’s at the end of the processed prefix, and the current input is 'a'.\n- In all other state-input pairs, the output must be 0.\n\nBy the given intended roles of the states:\n- $S_0$ represents that the processed prefix ends with zero consecutive a’s (i.e., it is empty or ends with 'b').\n- $S_1$ represents that the processed prefix ends with exactly one consecutive a.\n- $S_2$ represents that the processed prefix ends with exactly two consecutive a’s.\n\nTherefore, the output function $\\lambda$ must satisfy:\n- $\\lambda(S_2, a) = 1$,\n- and $\\lambda(S, x) = 0$ for all other pairs $(S, x) \\in \\{S_0, S_1, S_2\\} \\times \\{a, b\\}$ with $(S, x) \\neq (S_2, a)$.\n\nNext, we derive the transition function $\\delta$ by counting how many consecutive a’s the string ends with after reading the current input:\n- From $S_0$:\n  - On input 'a': the new suffix count is $1$, so $\\delta(S_0, a) = S_1$.\n  - On input 'b': the new suffix count is $0$, so $\\delta(S_0, b) = S_0$.\n- From $S_1$:\n  - On input 'a': the new suffix count is $2$, so $\\delta(S_1, a) = S_2$.\n  - On input 'b': the new suffix count is $0$, so $\\delta(S_1, b) = S_0$.\n- From $S_2$:\n  - On input 'a': this input is the third consecutive 'a', so $\\lambda(S_2, a) = 1$. After consuming this 'a', the processed string ends with at least three a’s. With three states, the standard construction to keep detecting any further a’s correctly (while preserving the ability to emit 1 whenever the current 'a' is preceded by at least two a’s) is to remain in $S_2$ on input 'a', i.e., $\\delta(S_2, a) = S_2$.\n  - On input 'b': the new suffix count is $0$, so $\\delta(S_2, b) = S_0$, and $\\lambda(S_2, b) = 0$.\n\nPutting these together yields the table:\n- From state $S_0$ with input 'a': Next state $S_1$, Output 0.\n- From state $S_0$ with input 'b': Next state $S_0$, Output 0.\n- From state $S_1$ with input 'a': Next state $S_2$, Output 0.\n- From state $S_1$ with input 'b': Next state $S_0$, Output 0.\n- From state $S_2$ with input 'a': Next state $S_2$, Output 1.\n- From state $S_2$ with input 'b': Next state $S_0$, Output 0.\n\nComparing with the options, this corresponds exactly to option A. Options B, C, and D each violate one of the derived conditions:\n- B incorrectly sends $(S_2, a)$ to $S_0$, which disrupts correct tracking of consecutive a’s.\n- C incorrectly outputs $1$ on $(S_1, a)$, treating the second 'a' as the third.\n- D incorrectly keeps $(S_1, b)$ in $S_1$ even though a 'b' should reset to zero consecutive a’s.\n\nHence, A is the correct table.", "answer": "$$\\boxed{A}$$", "id": "1383551"}, {"introduction": "While Mealy machines are powerful abstract models, their behavior in physical circuits reveals important practical considerations. This exercise explores a key characteristic: because the output depends directly on the current input as well as the state, it can change asynchronously between clock cycles. This thought experiment will help you understand the concept of output 'glitches' and why timing is a critical factor when implementing Mealy machines in hardware. [@problem_id:1968918]", "problem": "A Mealy finite-state machine is designed to detect a specific input sequence. The machine is defined by the following parameters:\n- A set of states $Q = \\{S_0, S_1\\}$.\n- A single-bit input, $X$, where the input alphabet is $\\Sigma = \\{0, 1\\}$.\n- A single-bit output, $Z$, where the output alphabet is $\\Gamma = \\{0, 1\\}$.\n- A state-transition function, $\\delta: Q \\times \\Sigma \\to Q$, which determines the next state.\n- An output function, $\\lambda: Q \\times \\Sigma \\to \\Gamma$, which determines the current output.\n\nThe machine's state updates on the rising edge of a periodic clock signal. The transition and output functions are defined as follows:\n\nState-Transition Function $\\delta(q, X)$:\n- $\\delta(S_0, 0) = S_0$\n- $\\delta(S_0, 1) = S_1$\n- $\\delta(S_1, 0) = S_0$\n- $\\delta(S_1, 1) = S_1$\n\nOutput Function $\\lambda(q, X)$:\n- $\\lambda(S_0, 0) = 0$\n- $\\lambda(S_0, 1) = 0$\n- $\\lambda(S_1, 0) = 1$\n- $\\lambda(S_1, 1) = 0$\n\nNow, consider a scenario where the machine is currently in state $S_1$ and the input $X$ has been stable at a value of $1$ for some time. Then, exactly halfway between two consecutive rising clock edges, the input $X$ makes a single transition from $1$ to $0$.\n\nWhich of the following statements most accurately describes the behavior of the output $Z$ during the interval starting from just before the input change to just after the second rising clock edge?\n\nA. The output $Z$ remains at $0$ throughout the entire interval between the two clock edges.\n\nB. The output $Z$ transitions from $0$ to $1$ precisely at the second rising clock edge and stays at $1$ for one full clock cycle.\n\nC. The output $Z$ transitions from $0$ to $1$ at the moment the input $X$ changes from $1$ to $0$, and then transitions back to $0$ shortly after the next rising clock edge.\n\nD. The output $Z$ transitions from $0$ to $1$ at the moment the input $X$ changes from $1$ to $0$, and remains at $1$ until the input $X$ changes again in a future clock cycle.\n\nE. The output $Z$ is temporarily undefined or enters a metastable state because the input changes asynchronously to the clock.", "solution": "We analyze the Mealy machine using the given state-transition and output functions, noting that in a Mealy machine the output $Z$ is a combinational function of the current state $q$ and the current input $X$, while the state $q$ only updates on rising clock edges.\n\nGiven:\n- State-transition function $\\delta(q,X)$:\n$$\n\\delta(S_0,0)=S_0,\\quad \\delta(S_0,1)=S_1,\\quad \\delta(S_1,0)=S_0,\\quad \\delta(S_1,1)=S_1.\n$$\n- Output function $\\lambda(q,X)$:\n$$\n\\lambda(S_0,0)=0,\\quad \\lambda(S_0,1)=0,\\quad \\lambda(S_1,0)=1,\\quad \\lambda(S_1,1)=0.\n$$\n\nAssume two consecutive rising edges at times $t_k$ and $t_{k+1}$, and the input transition occurs at $t_m$, exactly halfway between them, so $t_k < t_m < t_{k+1}$ and $t_m - t_k = t_{k+1} - t_m$. The machine is in state $S_1$ prior to $t_m$, and $X$ has been stable at $1$ before $t_m$.\n\n1) For $t < t_m$ (just before the input change): the state is $q=S_1$ and the input is $X=1$. Hence the output is\n$$\nZ=\\lambda(S_1,1)=0.\n$$\n\n2) At $t=t_m^+$ (immediately after the input changes from $1$ to $0$): the state has not yet updated because there is no rising clock edge at $t_m$, so $q$ remains $S_1$, while the input becomes $X=0$. Therefore, by the Mealy output function,\n$$\nZ=\\lambda(S_1,0)=1.\n$$\nThus, the output transitions from $0$ to $1$ at the moment the input changes.\n\n3) For $t_m < t < t_{k+1}$: the state is still $q=S_1$ (no clock edge yet), and the input remains $X=0$, so the output remains\n$$\nZ=\\lambda(S_1,0)=1.\n$$\n\n4) At $t=t_{k+1}^+$ (immediately after the next rising edge): the state updates according to the transition function with the current input $X=0$:\n$$\nq^{+}=\\delta(S_1,0)=S_0.\n$$\nWith $q^{+}=S_0$ and $X=0$, the output becomes\n$$\nZ=\\lambda(S_0,0)=0.\n$$\nHence the output returns to $0$ shortly after the next rising clock edge (allowing for propagation through the state elements and output logic).\n\nSince the input transition occurs exactly halfway between clock edges, there is no sampling near a clock edge, so metastability is not implicated. The behavior matches the statement that $Z$ goes high at the input transition and returns low after the next rising edge.\n\nTherefore, the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1968918"}]}