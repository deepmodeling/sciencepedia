{"hands_on_practices": [{"introduction": "Many real-world optimization challenges, from logistics to scheduling, become clearer when modeled as abstract graph problems. This first exercise guides you through translating a practical scenario—forming a committee with incompatible members—into a formal graph-theoretic framework. Mastering this translation [@problem_id:1357916] is the first step toward analyzing a problem's computational complexity and classifying it within classes like P or NP.", "problem": "A university is forming a student advisory committee. This real-world selection process can be modeled as a formal problem in computer science. Consider the following scenario:\n\nThere are $n$ applicants for the committee. Due to various conflicts of interest and interpersonal issues, a list of pairs of applicants who are incompatible with each other is provided. The goal is to form a committee of size $k$ such that no two members of the committee are incompatible.\n\nTo analyze the computational complexity of this task, the problem is modeled using a graph $G=(V, E)$, where the set of vertices $V$ corresponds to the set of $n$ applicants, and an undirected edge $(u, v)$ exists in the set of edges $E$ if and only if applicants $u$ and $v$ are incompatible.\n\nThe decision problem is: \"Given the graph $G$ and an integer $k$, does a valid committee of size $k$ exist?\"\n\nThis committee selection problem is equivalent to a well-known problem in complexity theory. Which of the following standard computational problems is it?\n\nA. CLIQUE\nB. INDEPENDENT SET\nC. VERTEX COVER\nD. HAMILTONIAN PATH\nE. 2-SATISFIABILITY (2-SAT)\nF. EULERIAN PATH", "solution": "We formalize the committee selection as follows. Let $G=(V,E)$ be an undirected graph where $V$ is the set of $n$ applicants and $(u,v)\\in E$ if and only if applicants $u$ and $v$ are incompatible. A valid committee of size $k$ is a subset $S\\subseteq V$ such that $|S|=k$ and no two members of $S$ are incompatible. Formally, this requires\n$$\n\\forall u,v\\in S,\\ u\\neq v \\implies (u,v)\\notin E.\n$$\nBy definition in graph theory, a set $S\\subseteq V$ is an independent set if and only if no edge of $E$ has both endpoints in $S$, equivalently\n$$\n\\forall u,v\\in S,\\ u\\neq v \\implies (u,v)\\notin E.\n$$\nComparing the two conditions, the committee feasibility condition is exactly the definition of an independent set. Therefore, the decision problem “Given $G$ and $k$, does there exist a committee of size $k$ with no incompatible pair?” is precisely the INDEPENDENT SET problem: decide whether $G$ has an independent set of size at least $k$.\n\nFor completeness, note that a CLIQUE would require all pairs in $S$ to be adjacent, which would correspond to modeling compatibility as edges rather than incompatibility; VERTEX COVER, HAMILTONIAN PATH, 2-SATISFIABILITY, and EULERIAN PATH do not match the stated constraint structure. Hence, the correct standard problem is INDEPENDENT SET.", "answer": "$$\\boxed{B}$$", "id": "1357916"}, {"introduction": "A key insight in complexity theory is that a problem's difficulty is not absolute; it is deeply tied to the structure of its inputs. This practice demonstrates this principle by examining the task of finding the longest path in a network, a problem that is famously NP-hard for general graphs. By focusing on networks with a tree structure, you will discover how constraints can transform a computationally intractable problem into one that is efficiently solvable [@problem_id:1357913].", "problem": "A network architect is designing a communication network for a new corporate campus. To minimize latency and potential points of failure, the network topology is designed as a **tree**, which is a connected graph with no cycles. In this network, each node represents a router, and each edge represents a direct, symmetric communication link.\n\nThe architect needs to identify the path with the maximum possible latency between any two routers in the network. This corresponds to finding the **longest simple path** in the graph, where a simple path is one that does not repeat any nodes, and the length of a path is defined as the number of edges it contains.\n\nIn the general theory of algorithms, problems are often classified into complexity classes. The class **P** (Polynomial time) includes all decision problems that can be solved by an algorithm in a time that is a polynomial function of the size of the input. The class **NP** (Nondeterministic Polynomial time) includes all decision problems for which a given solution can be verified for correctness in polynomial time. It is known that for a general, arbitrary graph, the problem of finding the longest simple path is NP-hard, meaning it is at least as hard as the most difficult problems in NP.\n\nGiven that the network is specifically structured as a tree, how does this constraint affect the computational complexity of finding the longest simple path between any two nodes?\n\nSelect the correct classification for the \"Longest Path in a Tree\" problem.\n\nA. The problem is in P.\nB. The problem is NP-complete (and therefore not in P, assuming P ≠ NP).\nC. The problem is in NP but is not NP-complete, and it is not known to be in P.\nD. The problem is undecidable.", "solution": "Let the network be modeled as a tree $T=(V,E)$, where by definition $T$ is connected and acyclic, so $|E|=|V|-1$. The longest simple path in a tree is its diameter, defined as\n$$\nD \\equiv \\max_{x,y \\in V} \\mathrm{dist}(x,y),\n$$\nwhere $\\mathrm{dist}(x,y)$ is the number of edges on the unique simple path between $x$ and $y$.\n\nThere is a linear-time algorithm to compute $D$ in a tree using two breadth-first searches (or depth-first searches), relying on the fact that in a tree there is a unique simple path between any two vertices:\n1. Choose an arbitrary node $r \\in V$ and run a BFS to compute $d_{r}(v)=\\mathrm{dist}(r,v)$ for all $v \\in V$. Let\n$$\nu \\in \\arg\\max_{v \\in V} d_{r}(v).\n$$\n2. Run a BFS from $u$ to compute $d_{u}(v)=\\mathrm{dist}(u,v)$ for all $v \\in V$. Let\n$$\nv \\in \\arg\\max_{w \\in V} d_{u}(w).\n$$\nThen the path from $u$ to $v$ is a longest simple path in $T$ and its length is the diameter:\n$$\nD = d_{u}(v).\n$$\n\nCorrectness sketch: In a tree, between any two vertices there is a unique simple path, so BFS from any start vertex computes exact graph distances. A vertex maximizing distance from an arbitrary start $r$ is a leaf and is an endpoint of some diameter; running BFS from such an endpoint $u$ finds the other endpoint $v$ that maximizes $\\mathrm{dist}(u,\\cdot)$, yielding the diameter length $D$.\n\nTime complexity: A BFS on $T$ runs in time $O(|V|+|E|)$. Since $|E|=|V|-1$, a BFS on a tree runs in $O(|V|)$. Performing two BFS traversals therefore runs in $O(|V|)$ time, which is polynomial in the input size. Hence, the longest path in a tree can be found in polynomial (indeed linear) time.\n\nTherefore, the computational complexity classification of the problem is that it is in the class P.\n\nThus the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1357913"}, {"introduction": "The theory of NP-completeness is built upon the concept of reduction, a formal method for proving that one problem is at least as hard as another. This exercise provides a hands-on introduction to this powerful tool by exploring the deep relationship between two seemingly opposite problems in social network analysis. You will learn how to formally relate the FRIEND-GROUP (CLIQUE) problem to the STRANGER-GROUP (INDEPENDENT SET) problem [@problem_id:1357884], showing that their computational complexities are intrinsically linked.", "problem": "In the study of social networks, we can model a network as a graph $G = (V, E)$, where the set of vertices $V$ represents people, and an edge $(u, v) \\in E$ indicates that person $u$ and person $v$ are friends. We can define two fundamental group-finding problems:\n\n1.  The **FRIEND-GROUP** problem: Given a social network graph $G$ and a positive integer $k$, determine if there exists a group of $k$ people who are all mutual friends. Formally, is there a subset of vertices $C \\subseteq V$ such that $|C|=k$ and for every distinct pair of vertices $u, v \\in C$, the edge $(u, v)$ is in $E$?\n\n2.  The **STRANGER-GROUP** problem: Given a social network graph $G$ and a positive integer $k$, determine if there exists a group of $k$ people who are all mutual strangers. Formally, is there a subset of vertices $I \\subseteq V$ such that $|I|=k$ and for every distinct pair of vertices $u, v \\in I$, the edge $(u, v)$ is *not* in $E$?\n\nSuppose you are given a hypothetical supercomputer, an \"oracle,\" that can solve any instance of the STRANGER-GROUP problem instantly. Your task is to use this oracle to solve the FRIEND-GROUP problem. You must devise a procedure that takes an input $(G, k)$ for the FRIEND-GROUP problem, transforms it into an input $(G', k')$ for the STRANGER-GROUP problem, queries the oracle with $(G', k')$, and uses the oracle's yes/no answer to correctly solve the original problem. The entire transformation process must be computationally efficient (i.e., executable in polynomial time with respect to the size of the input graph $G$).\n\nWhich of the following procedures correctly describes how to solve the FRIEND-GROUP problem for an input $(G, k)$ using the STRANGER-GROUP oracle?\n\nA. Construct a new graph $G'$ with the same set of vertices as $G$. An edge exists between two vertices in $G'$ if and only if there is *no* edge between them in $G$. Call the oracle with the input $(G', k)$.\nB. Use the original graph $G$ and call the oracle with the input $(G, k)$.\nC. Construct a new graph $G'$ with the same set of vertices as $G$. An edge exists between two vertices in $G'$ if and only if there is *no* edge between them in $G$. Let $|V|$ be the total number of people in the network. Call the oracle with the input $(G', |V| - k)$.\nD. Construct a new graph $G'$ by adding a single new vertex and connecting it to every vertex in $G$. Call the oracle with the input $(G', k)$.\nE. Construct a new graph $G'$ with the same set of vertices as $G$. An edge exists between two vertices in $G'$ if and only if there *is* an edge between them in $G$. Call the oracle with the input $(G', k)$.", "solution": "We formalize the two decision problems in graph-theoretic terms. The FRIEND-GROUP problem on input $(G,k)$ asks whether $G=(V,E)$ contains a clique $C \\subseteq V$ of size $k$, i.e., for all distinct $u,v \\in C$, $(u,v) \\in E$. The STRANGER-GROUP problem on input $(G,k)$ asks whether $G$ contains an independent set $I \\subseteq V$ of size $k$, i.e., for all distinct $u,v \\in I$, $(u,v) \\notin E$.\n\nTo solve FRIEND-GROUP using a STRANGER-GROUP oracle, construct the complement graph $G'=(V,E')$ of $G$ defined by\n$$\nE' \\;=\\; \\{\\, (u,v) \\in V \\times V \\;\\mid\\; u \\neq v \\text{ and } (u,v) \\notin E \\,\\}.\n$$\nThis construction can be performed in time polynomial in $|V|$, since it requires checking adjacency for each unordered pair of distinct vertices.\n\nWe prove correctness of the reduction:\n- If $C \\subseteq V$ with $|C|=k$ is a clique in $G$, then for all distinct $u,v \\in C$ we have $(u,v) \\in E$. By the definition of $G'$, this implies $(u,v) \\notin E'$, hence no two vertices in $C$ are adjacent in $G'$. Therefore $C$ is an independent set of size $k$ in $G'$.\n- Conversely, if $I \\subseteq V$ with $|I|=k$ is an independent set in $G'$, then for all distinct $u,v \\in I$ we have $(u,v) \\notin E'$, which by complementarity implies $(u,v) \\in E$. Therefore $I$ is a clique of size $k$ in $G$.\n\nThus, $G$ has a clique of size $k$ if and only if $G'$ has an independent set of size $k$. Therefore, given $(G,k)$ for FRIEND-GROUP, we construct $G'$ as above and query the STRANGER-GROUP oracle with $(G', k)$. The oracle answers “yes” if and only if the original FRIEND-GROUP instance is a “yes” instance.\n\nAmong the provided procedures, option A precisely describes this reduction. Option B queries the oracle on $(G,k)$, which tests for an independent set in $G$ rather than a clique in $G$. Option C incorrectly changes the parameter to $|V|-k$, which pertains to the relationship between independent set and vertex cover, not clique. Option D’s graph modification does not establish the required equivalence. Option E is equivalent to B and is incorrect for the same reason.\n\nTherefore, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1357884"}]}