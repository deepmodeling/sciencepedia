{"hands_on_practices": [{"introduction": "The proof of the Cook-Levin theorem rests on translating the entire computation of a Turing machine into a single, massive Boolean formula in a specific format called Conjunctive Normal Form (CNF). Before tackling the whole machine, this exercise provides essential practice in converting a standard logical expression into CNF, a foundational skill for understanding the reduction. [@problem_id:1405691]", "problem": "In the study of computational complexity, the Cook-Levin theorem establishes that the Boolean Satisfiability Problem (SAT) is NP-complete. A crucial part of the theorem's proof involves transforming a logical formula, which represents the computation of a non-deterministic Turing machine, into an equivalent formula in Conjunctive Normal Form (CNF). A CNF is a logical formula that is a conjunction (AND) of one or more clauses, where each clause is a disjunction (OR) of literals (a variable or its negation).\n\nSuppose a small part of such a transformation requires converting the Boolean expression $\\phi = (p \\lor q) \\rightarrow (r \\land s)$ into its equivalent CNF. The variables $p, q, r,$ and $s$ represent propositions about the machine's state. Which of the following expressions is a logically equivalent CNF representation of $\\phi$?\n\nA. $(\\neg p \\lor r) \\land (\\neg q \\lor r) \\land (\\neg p \\lor s) \\land (\\neg q \\lor s)$\nB. $(\\neg p \\lor \\neg q \\lor r) \\land (\\neg p \\lor \\neg q \\lor s)$\nC. $(\\neg p \\lor r) \\land (\\neg q \\lor s)$\nD. $p \\lor q \\lor \\neg r \\lor \\neg s$\nE. $(\\neg p \\land \\neg q) \\lor (r \\land s)$", "solution": "We start with the given formula $\\phi = (p \\lor q) \\rightarrow (r \\land s)$. Using the implication equivalence $a \\rightarrow b \\equiv \\neg a \\lor b$, we have:\n$$\n\\phi \\equiv \\neg(p \\lor q) \\lor (r \\land s).\n$$\nApply distributivity $X \\lor (Y \\land Z) \\equiv (X \\lor Y) \\land (X \\lor Z)$ with $X=\\neg(p \\lor q)$, $Y=r$, and $Z=s$:\n$$\n\\phi \\equiv \\left(\\neg(p \\lor q) \\lor r\\right) \\land \\left(\\neg(p \\lor q) \\lor s\\right).\n$$\nUse De Morgan's law $\\neg(p \\lor q) \\equiv (\\neg p \\land \\neg q)$ in each disjunction:\n$$\n\\phi \\equiv \\left((\\neg p \\land \\neg q) \\lor r\\right) \\land \\left((\\neg p \\land \\neg q) \\lor s\\right).\n$$\nDistribute using $(A \\land B) \\lor C \\equiv (A \\lor C) \\land (B \\lor C)$ on each parenthesis:\n$$\n(\\neg p \\lor r) \\land (\\neg q \\lor r) \\land (\\neg p \\lor s) \\land (\\neg q \\lor s).\n$$\nThis is a conjunction of disjunctions of literals, hence a CNF, and it matches option A. Note that option E is logically equivalent to $\\phi$ but is not in CNF.", "answer": "$$\\boxed{A}$$", "id": "1405691"}, {"introduction": "With the mechanics of CNF in hand, we can begin to model a Turing machine's behavior. A crucial rule is that each tape cell can only contain one symbol at any given moment. This practice demonstrates how to use CNF clauses to enforce this fundamental \"exactly-one\" constraint, which is a key component of the overall formula that represents the machine's entire computation. [@problem_id:1405676]", "problem": "In the proof of the Cook-Levin theorem, a polynomial-time non-deterministic Turing Machine (TM) computation is converted into a Boolean satisfiability problem. This is done by constructing a formula $\\Phi$ in Conjunctive Normal Form (CNF) that is satisfiable if and only if the TM accepts its input.\n\nConsider a part of this construction for a TM with a tape alphabet $\\Gamma = \\{s_0, s_1, s_B\\}$, where $s_B$ is the blank symbol. The state of the tape is described by a set of Boolean variables $P_{i,j,s}$, where $P_{i,j,s}$ is true if and only if at time step $i$, tape cell $j$ contains the symbol $s$.\n\nOne of the fundamental constraints to enforce is that at any given time, each tape cell must contain exactly one symbol from the alphabet.\n\nFor the specific instance of time step $i=5$ and tape cell $j=2$, let the variables be $A = P_{5,2,s_0}$, $B = P_{5,2,s_1}$, and $C = P_{5,2,s_B}$. Which of the following formulas, written in CNF, correctly expresses the constraint that tape cell 2 holds exactly one symbol from the set $\\{s_0, s_1, s_B\\}$ at time 5?\n\nA. $(A \\lor B \\lor C) \\land (\\neg A \\lor \\neg B) \\land (\\neg A \\lor \\neg C) \\land (\\neg B \\lor \\neg C)$\nB. $(A \\lor B \\lor C)$\nC. $(\\neg A \\lor \\neg B) \\land (\\neg A \\lor \\neg C) \\land (\\neg B \\lor \\neg C)$\nD. $(A \\land B \\land C)$\nE. $(A \\lor \\neg B) \\land (\\neg A \\lor C) \\land (B \\lor \\neg C)$", "solution": "We are encoding the Cook-Levin \"exactly one symbol per tape cell at a given time\" constraint using Boolean variables. For time step $i=5$ and tape cell $j=2$, define\n$$\nA = P_{5,2,s_{0}}, \\quad B = P_{5,2,s_{1}}, \\quad C = P_{5,2,s_{B}}.\n$$\nThe requirement that the cell contains exactly one symbol from $\\{s_0, s_1, s_B\\}$ means:\n1) At least one of $A,B,C$ is true.\n2) At most one of $A,B,C$ is true.\n\nThe \"at least one\" part is the single clause\n$$\nA \\lor B \\lor C.\n$$\nThe \"at most one\" part forbids any pair from being simultaneously true, equivalently\n$$\n\\lnot(A \\land B), \\quad \\lnot(A \\land C), \\quad \\lnot(B \\land C),\n$$\nwhich in CNF is\n$$\n(\\lnot A \\lor \\lnot B) \\land (\\lnot A \\lor \\lnot C) \\land (\\lnot B \\lor \\lnot C).\n$$\nCombining both gives the CNF\n$$\n(A \\lor B \\lor C) \\land (\\lnot A \\lor \\lnot B) \\land (\\lnot A \\lor \\lnot C) \\land (\\lnot B \\lor \\lnot C),\n$$\nwhich corresponds to option A.\n\nTo confirm the other options are incorrect:\n- B includes only the \"at least one\" part and allows multiple symbols simultaneously.\n- C includes only the \"at most one\" part and allows all three to be false.\n- D forces all three to be true, which violates exclusivity.\n- E is not equivalent to exactly-one; for instance, with $A=\\text{false}$, $B=\\text{false}$, $C=\\text{false}$, each clause in E evaluates as\n$A \\lor \\lnot B = \\text{false} \\lor \\text{true} = \\text{true}$, $\\lnot A \\lor C = \\text{true} \\lor \\text{false} = \\text{true}$, $B \\lor \\lnot C = \\text{false} \\lor \\text{true} = \\text{true}$,\nso E is satisfied even though none of $A,B,C$ is true, violating the \"at least one\" requirement.\n\nTherefore, the correct CNF is option A.", "answer": "$$\\boxed{A}$$", "id": "1405676"}, {"introduction": "The Cook-Levin reduction is powerful because it can be adapted to various computational models, not just the simplest Turing machines. This thought experiment challenges you to extend the modeling technique from a standard single-tape machine to a more complex two-tape machine. By determining how to expand the set of propositional variables needed, you'll gain a deeper appreciation for the systematic and scalable nature of this landmark proof. [@problem_id:1456015]", "problem": "In the context of computational complexity, we often want to prove a problem is NP-complete by showing that a Non-deterministic Turing Machine (NTM) can be represented by a propositional logic formula. This involves creating a set of propositional variables that can fully describe the machine's configuration at every step of its computation.\n\nConsider a specific type of NTM that uses two independent, infinite, read/write tapes, which we'll call Tape 1 and Tape 2. The input string of length $n$ is initially written on Tape 1, and Tape 2 is initially blank. The machine's transition function is of the form $\\delta(q, \\sigma_1, \\sigma_2) \\to \\{(q', \\sigma'_1, \\sigma'_2, D_1, D_2), \\dots\\}$, where $q$ is the current state, $\\sigma_1$ and $\\sigma_2$ are the symbols read from Tape 1 and Tape 2 respectively, and in the resulting new state $q'$, the machine writes symbols $\\sigma'_1$ and $\\sigma'_2$ and moves the heads on each tape according to directions $D_1, D_2 \\in \\{\\text{Left, Right}\\}$. The machine is guaranteed to halt within $p(n)$ steps, where $p(n)$ is a polynomial in $n$.\n\nA standard construction for a single-tape NTM uses variables to encode the machine's state ($Q_{q,t}$), the head's position ($H_{i,t}$), and the symbol in each tape cell ($S_{i,\\sigma,t}$) at each time step $t$. How must this set of variables be expanded to correctly and directly model the configuration of the two-tape NTM described above?\n\nA. Add a second set of head-position variables, one for each tape. The original single set of tape-cell variables is sufficient, as the machine's state dictates which tape is being modified.\nB. Add a second set of head-position variables (one for each tape) and a second, independent set of tape-cell-content variables (one for each tape).\nC. Augment the state variables to indicate the active tape, for example, $Q_{q,k,t}$ where $k \\in \\{1, 2\\}$, and augment the head-position variables to indicate the active tape. The tape-cell variables do not need to be changed.\nD. Keep the state variables the same, but create new variable types that encode pairs of values, such as a variable for the pair of head positions $(i_1, i_2)$ and a variable for the pair of symbols $(\\sigma_1, \\sigma_2)$ being read.\nE. No new types of variables are needed. The two tapes can be modeled as a single, combined tape, and the standard set of variables can be used on this larger tape.", "solution": "The core task is to define a set of propositional variables that can uniquely describe the complete configuration of the two-tape Non-deterministic Turing Machine (NTM) at any time step $t$ during its computation, up to a polynomial time bound $T=p(n)$ and a polynomial space bound $S=p(n)$. A complete configuration, also known as an Instantaneous Description (ID), must capture everything about the machine's state.\n\nFor the specified two-tape NTM, a configuration at time $t$ consists of:\n1.  The machine's current state.\n2.  The position of the head on Tape 1.\n3.  The position of the head on Tape 2.\n4.  The entire contents of Tape 1.\n5.  The entire contents of Tape 2.\n\nWe need to create propositional variables that represent each of these components. Let's analyze the requirements for each component based on the standard single-tape construction. The indices for time $t$ will range from $0$ to $T$, and indices for tape position $i$ will range from $0$ to $S$.\n\n**1. Machine State:**\nThe machine has a single finite set of states. At any time $t$, it is in exactly one state. This is identical to the single-tape case. We can define the variables:\n$Q_{q,t}$ is true if and only if the machine is in state $q$ at time $t$. This part of the variable set does not change.\n\n**2. Head Positions:**\nThe machine has two independent heads, one for each tape. The position of the head on Tape 1 is independent of the position of the head on Tape 2. To capture this, we cannot use a single set of head-position variables. We need one set for each head.\nLet's define them as:\n- $H_{1,i,t}$ is true if and only if the head of Tape 1 is at position $i$ at time $t$.\n- $H_{2,i,t}$ is true if and only if the head of Tape 2 is at position $i$ at time $t$.\nTherefore, we must introduce a second, distinct set of head-position variables to track the second head.\n\n**3. Tape Contents:**\nThe two tapes are independent read/write tapes. The contents of Tape 1 can change at each step based on the transition function, and independently, the contents of Tape 2 can also change. A single set of variables $S_{i,\\sigma,t}$ is insufficient because it cannot distinguish between \"cell $i$ on Tape 1 has symbol $\\sigma$\" and \"cell $i$ on Tape 2 has symbol $\\sigma$\". To correctly model the system, we need to track the contents of each tape separately.\nWe define two sets of variables for the tape cell contents:\n- $S_{1,i,\\sigma,t}$ is true if and only if cell $i$ of Tape 1 contains the symbol $\\sigma$ at time $t$.\n- $S_{2,i,\\sigma,t}$ is true if and only if cell $i$ of Tape 2 contains the symbol $\\sigma$ at time $t$.\nThis means we must also introduce a second, independent set of tape-cell-content variables.\n\n**Conclusion:**\nTo directly model the two-tape NTM, we must augment the single-tape variable set by adding a new set of variables for the second head's position and a new set of variables for the second tape's contents. This corresponds to choice B.\n\nLet's review the other options:\n- **A** is incorrect because the tape contents evolve independently. A single set of cell-content variables cannot capture the distinct strings on the two tapes.\n- **C** is incorrect because the NTM has a single central state, not a state \"per tape\". The transition function depends on the single state and symbols from all tapes.\n- **D** is incorrect because propositional variables are atomic (they are simply true or false). They cannot encode composite structures like pairs. One would need a much more complex set of variables to represent a pair, which would ultimately be equivalent to having two separate sets of variables.\n- **E** describes a method for *simulating* a multi-tape machine on a single-tape machine. While this simulation is possible, the problem asks for a *direct* modeling of the two-tape machine's configuration for the construction of the propositional formula. The Cook-Levin theorem proof constructs the formula based on the machine's actual definition, not a simulation of it. Therefore, this is not the correct approach for the direct construction.", "answer": "$$\\boxed{B}$$", "id": "1456015"}]}