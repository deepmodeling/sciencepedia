{"hands_on_practices": [{"introduction": "This exercise introduces one of the most intuitive approximation algorithms through the lens of a common scheduling problem. Minimizing the total completion time, or \"makespan,\" is a classic NP-hard challenge, but we can find near-optimal solutions using a simple greedy heuristic. This practice explores the Longest Processing Time (LPT) first strategy, where you will schedule jobs in descending order of their duration to see how effectively this approach balances the load across multiple machines [@problem_id:1349787].", "problem": "A research team is managing a small high-performance computing cluster for running scientific simulations. The cluster consists of $m=3$ identical compute nodes that can process jobs in parallel. The team needs to run a batch of 6 computational jobs with the following processing times, given in hours: 9, 8, 7, 6, 5, and 2.\n\nThe cluster's automated scheduler uses a specific \"High-Demand First\" protocol to assign these jobs. This protocol operates as follows:\n1. All jobs are arranged in a queue, sorted in descending order of their required processing time.\n2. The scheduler takes the jobs from the front of the queue one by one and assigns each job to the compute node that currently has the minimum total processing time assigned to it. If there is a tie for the minimally loaded node, any of the tied nodes may be chosen.\n\nCalculate the final completion time for the entire batch of jobs, also known as the makespan. The makespan is defined as the total time elapsed from the start until the very last job on any node is finished. Express your answer in hours.", "solution": "We apply the stated \"High-Demand First\" protocol, which is the longest-processing-time-first rule on $m=3$ identical parallel machines. First, sort the jobs in descending order of processing times. The given times are already in descending order:\n$$9,\\,8,\\,7,\\,6,\\,5,\\,2.$$\nLet $L_{1},L_{2},L_{3}$ denote the current total assigned load (in hours) on nodes $1,2,3$, respectively. Initially,\n$$L_{1}=0,\\quad L_{2}=0,\\quad L_{3}=0.$$\nProcess the jobs one by one, always assigning the next job to a node with the minimum current load (breaking ties arbitrarily, as permitted):\n\n1. Assign $9$ to a minimally loaded node (all are tied). Choose node $1$:\n$$L_{1}=0+9=9,\\quad L_{2}=0,\\quad L_{3}=0.$$\n2. Assign $8$ to a minimally loaded node (nodes $2$ and $3$ are tied at $0$). Choose node $2$:\n$$L_{1}=9,\\quad L_{2}=0+8=8,\\quad L_{3}=0.$$\n3. Assign $7$ to the minimally loaded node (node $3$ with $0$):\n$$L_{1}=9,\\quad L_{2}=8,\\quad L_{3}=0+7=7.$$\n4. Assign $6$ to the minimally loaded node (node $3$ with $7$):\n$$L_{1}=9,\\quad L_{2}=8,\\quad L_{3}=7+6=13.$$\n5. Assign $5$ to the minimally loaded node (node $2$ with $8$):\n$$L_{1}=9,\\quad L_{2}=8+5=13,\\quad L_{3}=13.$$\n6. Assign $2$ to the minimally loaded node (node $1$ with $9$):\n$$L_{1}=9+2=11,\\quad L_{2}=13,\\quad L_{3}=13.$$\n\nThe final node loads are $L_{1}=11$, $L_{2}=13$, $L_{3}=13$. The makespan, defined as the finishing time of the last job, is the maximum load:\n$$C_{\\max}=\\max\\{L_{1},L_{2},L_{3}\\}=13.$$\nTherefore, the total completion time for the batch is $13$ hours.", "answer": "$$\\boxed{13}$$", "id": "1349787"}, {"introduction": "The Set Cover problem is a fundamental NP-hard problem with applications ranging from logistics to bioinformatics. This exercise demonstrates the power of a different kind of greedy approach: one that makes the best local choice at each step. By repeatedly selecting the set that covers the most currently uncovered elements, you will build a solution and explore the mechanics of this famous approximation algorithm, gaining insight into its iterative decision-making process [@problem_id:1462666].", "problem": "The SET-COVER problem is a classic question in computer science. Given a universe of elements $U$ and a collection of subsets of $U$, denoted by $\\mathcal{S}$, the objective is to identify a sub-collection of $\\mathcal{S}$, called a cover, that contains the minimum possible number of sets whose union is equal to the universe $U$.\n\nSince finding the exact minimum cover is computationally difficult (it is an NP-hard problem), approximation algorithms are often used. A common approach is the greedy algorithm, defined by the following procedure:\n1. Initialize the set of uncovered elements, $U_{\\text{unc}}$, to be the entire universe $U$.\n2. Initialize the cover, $C$, to be an empty set.\n3. While $U_{\\text{unc}}$ is not empty:\n   a. Select a set $S$ from the original collection $\\mathcal{S}$ that covers the maximum number of elements currently in $U_{\\text{unc}}$. If there is a tie for the maximum, the set with the smallest index is chosen (e.g., $S_i$ is chosen over $S_j$ if $i  j$).\n   b. Add the selected set $S$ to the cover $C$.\n   c. Update $U_{\\text{unc}}$ by removing the elements of the selected set $S$ (i.e., $U_{\\text{unc}} \\leftarrow U_{\\text{unc}} \\setminus S$).\n4. The algorithm terminates and returns the cover $C$.\n\nConsider a specific instance of the SET-COVER problem defined by:\n- The universe $U = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\\}$.\n- The collection of sets $\\mathcal{S} = \\{S_1, S_2, S_3, S_4, S_5, S_6\\}$, where:\n  - $S_1 = \\{1, 2, 3, 4, 5\\}$\n  - $S_2 = \\{6, 7, 8, 9\\}$\n  - $S_3 = \\{10, 11, 12\\}$\n  - $S_4 = \\{1, 6, 10, 11\\}$\n  - $S_5 = \\{2, 3, 7, 8\\}$\n  - $S_6 = \\{4, 9, 12\\}$\n\nLet $C_{\\text{greedy}}$ be the set cover found by applying the greedy algorithm to this instance. Calculate the sum of the cardinalities (sizes) of all sets in $C_{\\text{greedy}}$. That is, compute the value of the expression $\\sum_{S \\in C_{\\text{greedy}}} |S|$.", "solution": "We apply the greedy algorithm as specified. At each iteration, we select a set maximizing the marginal coverage, measured by $|S \\cap U_{\\text{unc}}|$, with ties broken by the smallest index.\n\nInitialize $U_{\\text{unc}} = U = \\{1,2,3,4,5,6,7,8,9,10,11,12\\}$ and $C = \\emptyset$.\n\nFirst iteration: Compute $|S_{i} \\cap U_{\\text{unc}}|$ for all $i$.\n- $|S_{1} \\cap U_{\\text{unc}}| = |S_{1}| = 5$.\n- $|S_{2} \\cap U_{\\text{unc}}| = 4$.\n- $|S_{3} \\cap U_{\\text{unc}}| = 3$.\n- $|S_{4} \\cap U_{\\text{unc}}| = 4$.\n- $|S_{5} \\cap U_{\\text{unc}}| = 4$.\n- $|S_{6} \\cap U_{\\text{unc}}| = 3$.\nThe maximum is $5$, attained uniquely by $S_{1}$. Select $S_{1}$. Update $C \\leftarrow \\{S_{1}\\}$ and $U_{\\text{unc}} \\leftarrow U_{\\text{unc}} \\setminus S_{1} = \\{6,7,8,9,10,11,12\\}$.\n\nSecond iteration: Compute $|S_{i} \\cap U_{\\text{unc}}|$.\n- $|S_{1} \\cap U_{\\text{unc}}| = 0$.\n- $|S_{2} \\cap U_{\\text{unc}}| = |\\{6,7,8,9\\}| = 4$.\n- $|S_{3} \\cap U_{\\text{unc}}| = |\\{10,11,12\\}| = 3$.\n- $|S_{4} \\cap U_{\\text{unc}}| = |\\{6,10,11\\}| = 3$.\n- $|S_{5} \\cap U_{\\text{unc}}| = |\\{7,8\\}| = 2$.\n- $|S_{6} \\cap U_{\\text{unc}}| = |\\{9,12\\}| = 2$.\nThe maximum is $4$, attained uniquely by $S_{2}$. Select $S_{2}$. Update $C \\leftarrow \\{S_{1}, S_{2}\\}$ and $U_{\\text{unc}} \\leftarrow U_{\\text{unc}} \\setminus S_{2} = \\{10,11,12\\}$.\n\nThird iteration: Compute $|S_{i} \\cap U_{\\text{unc}}|$.\n- $|S_{1} \\cap U_{\\text{unc}}| = 0$.\n- $|S_{2} \\cap U_{\\text{unc}}| = 0$.\n- $|S_{3} \\cap U_{\\text{unc}}| = |\\{10,11,12\\}| = 3$.\n- $|S_{4} \\cap U_{\\text{unc}}| = |\\{10,11\\}| = 2$.\n- $|S_{5} \\cap U_{\\text{unc}}| = 0$.\n- $|S_{6} \\cap U_{\\text{unc}}| = |\\{12\\}| = 1$.\nThe maximum is $3$, attained uniquely by $S_{3}$. Select $S_{3}$. Update $C \\leftarrow \\{S_{1}, S_{2}, S_{3}\\}$ and $U_{\\text{unc}} \\leftarrow \\emptyset$. The algorithm terminates.\n\nThus $C_{\\text{greedy}} = \\{S_{1}, S_{2}, S_{3}\\}$, and the requested sum is\n$$\\sum_{S \\in C_{\\text{greedy}}} |S| = |S_{1}| + |S_{2}| + |S_{3}| = 5 + 4 + 3 = 12.$$", "answer": "$$\\boxed{12}$$", "id": "1462666"}, {"introduction": "For some NP-hard problems, we can design algorithms that get arbitrarily close to the optimal solution. This exercise delves into this powerful concept with a Fully Polynomial-Time Approximation Scheme (FPTAS) for the 0-1 Knapsack problem. You will use a technique of scaling and rounding the item values based on a precision parameter $\\epsilon$, transforming the problem to find a high-quality approximate solution and demonstrating the trade-off between accuracy and computational effort [@problem_id:1349838].", "problem": "The Interstellar Projects Commission (IPC) is finalizing its payload selection for a forthcoming deep-space mission. The rocket has a strict payload mass capacity that cannot be exceeded. Each candidate project has an associated mass and a designated \"scientific value\" score. The goal is to select a subset of projects that maximizes the total scientific value without exceeding the mass capacity.\n\nThis selection problem is a variant of the NP-hard 0-1 Knapsack Problem. Since finding the exact optimal solution for a large number of projects is computationally infeasible, the IPC uses a Fully Polynomial-Time Approximation Scheme (FPTAS). An FPTAS for a maximization problem, for any given precision parameter $\\epsilon  0$, finds a solution with a total value of at least $(1 - \\epsilon)$ times the optimal value, and does so in time that is polynomial in both the input size and $1/\\epsilon$.\n\nThe specific FPTAS algorithm employed by the IPC works as follows:\n1.  Given $n$ projects, let $V_{\\max}$ be the maximum scientific value of any single project.\n2.  A scaling factor $K$ is computed as $K = \\frac{\\epsilon V_{\\max}}{n}$.\n3.  For each project $i$ with original value $v_i$, a new scaled-down integer value is calculated as $v'_i = \\lfloor \\frac{v_i}{K} \\rfloor$.\n4.  The algorithm then finds the optimal solution to a new knapsack problem using the original masses but these new scaled values $v'_i$. The combination of projects that yields the maximum possible total scaled value (sum of $v'_i$) within the mass capacity is chosen.\n\nSuppose there are three candidate projects with the following properties:\n-   **Project Alpha**: Scientific Value = 100, Mass = 10 kg\n-   **Project Beta**: Scientific Value = 51, Mass = 5 kg\n-   **Project Gamma**: Scientific Value = 51, Mass = 5 kg\n\nThe rocket's total mass capacity for these projects is 10 kg. The IPC has set the precision parameter $\\epsilon = 0.1$. If multiple combinations of projects yield the same maximum total scaled value, the IPC's protocol is to choose the combination with the highest total original scientific value.\n\nYour task is to determine the total scientific value of the payload combination selected by this FPTAS algorithm. Provide the final answer as a single integer.", "solution": "We apply the given FPTAS precisely. There are $n=3$ projects, and the maximum single-project scientific value is $V_{\\max}=100$. With $\\epsilon=0.1$, the scaling factor is\n$$\nK=\\frac{\\epsilon V_{\\max}}{n}=\\frac{\\left(\\frac{1}{10}\\right)\\cdot 100}{3}=\\frac{10}{3}.\n$$\nFor each project with original value $v_i$, the scaled value is $v'_i=\\left\\lfloor \\frac{v_{i}}{K}\\right\\rfloor=\\left\\lfloor v_{i}\\cdot \\frac{3}{10}\\right\\rfloor$. Therefore,\n$$\nv_{\\text{Alpha}}'=\\left\\lfloor 100\\cdot \\frac{3}{10}\\right\\rfloor=\\left\\lfloor 30\\right\\rfloor=30,\\quad\nv_{\\text{Beta}}'=\\left\\lfloor 51\\cdot \\frac{3}{10}\\right\\rfloor=\\left\\lfloor \\frac{153}{10}\\right\\rfloor=15,\\quad\nv_{\\text{Gamma}}'=\\left\\lfloor 51\\cdot \\frac{3}{10}\\right\\rfloor=\\left\\lfloor \\frac{153}{10}\\right\\rfloor=15.\n$$\nThe masses remain $10$ kg for Alpha and $5$ kg each for Beta and Gamma, and the capacity is $10$ kg. We solve the scaled knapsack optimally:\n- Taking Alpha alone yields total scaled value $30$ with mass $10$ kg.\n- Taking Beta and Gamma together yields total scaled value $15+15=30$ with mass $5+5=10$ kg.\n- Any set including Alpha with either Beta or Gamma exceeds capacity, and taking a single Beta or a single Gamma yields scaled value $15$, which is suboptimal.\n\nThus, the maximum total scaled value achievable is $30$, and there is a tie between Alpha alone and the pair Beta+Gamma. By the specified tie-breaking rule, we choose the combination with the higher total original scientific value. The original totals are $100$ for Alpha alone and $51+51=102$ for Beta+Gamma, so the algorithm selects Beta+Gamma. Hence, the total scientific value of the selected payload is $102$.", "answer": "$$\\boxed{102}$$", "id": "1349838"}]}