{"hands_on_practices": [{"introduction": "The first step to understanding network bottlenecks is to master the concept of a cut. This exercise [@problem_id:1361015] provides a hands-on opportunity to apply the definition of cut capacity in a structured, grid-based network. By calculating the total capacity of edges crossing from one set of vertices to another, you will build a foundational skill for analyzing network flows and their limitations.", "problem": "Consider a simplified model for a data bus network on a microprocessor chip. The network is represented as a directed graph whose vertices are arranged in a $3 \\times 3$ grid. We label each vertex by its integer coordinates $(i, j)$, where $i$ is the row number ($1 \\le i \\le 3$) and $j$ is the column number ($1 \\le j \\le 3$). A source vertex $s$ is located at $(1, 1)$ and a sink vertex $t$ is at $(3, 3)$.\nDirected edges, representing data links, only exist from a vertex $(i, j)$ to the vertex $(i+1, j)$ in the row below (for $i < 3$) and from $(i, j)$ to the vertex $(i, j+1)$ in the column to the right (for $j < 3$). Every edge in the network has a capacity of 1.\nFor analysis purposes, the vertices are partitioned into two sets, $S$ and $T$, which define an $s-t$ cut. A vertex $(i, j)$ is placed in set $S$ if the sum of its coordinates, $i+j$, is less than or equal to 4. All other vertices are in set $T$.\nCalculate the capacity of this cut $(S, T)$.", "solution": "We model the network as a directed graph on the set of vertices $\\{(i,j) : 1 \\leq i \\leq 3,\\, 1 \\leq j \\leq 3\\}$ with directed edges from $(i,j)$ to $(i+1,j)$ when $i<3$ and from $(i,j)$ to $(i,j+1)$ when $j<3$. Each edge has capacity $1$.\n\nThe cut is defined by the partition $S=\\{(i,j): i+j \\leq 4\\}$ and $T=\\{(i,j): i+j \\geq 5\\}$. Explicitly listing the vertices:\n- $S=\\{(1,1),(1,2),(1,3),(2,1),(2,2),(3,1)\\}$ since their sums $2,3,4,3,4,4$ are all less than or equal to $4$.\n- $T=\\{(2,3),(3,2),(3,3)\\}$ since their sums $5,5,6$ are greater than or equal to $5$.\n\nThe capacity of a directed $s$-$t$ cut $(S,T)$ is the sum of capacities of all directed edges from $S$ to $T$:\n$$\n\\mathrm{cap}(S,T)=\\sum_{(u,v)\\in E,\\, u\\in S,\\, v\\in T} c(u,v).\n$$\nSince $c(u,v)=1$ for every edge, $\\mathrm{cap}(S,T)$ equals the number of directed edges from $S$ to $T$.\n\nWe enumerate all outgoing edges from each vertex in $S$ and count those whose head lies in $T$:\n- From $(1,1)$: to $(1,2)$ and $(2,1)$, both in $S$; contributes $0$.\n- From $(1,2)$: to $(1,3)$ and $(2,2)$, both in $S$; contributes $0$.\n- From $(1,3)$: to $(2,3)$ which is in $T$; contributes $1$.\n- From $(2,1)$: to $(2,2)$ and $(3,1)$, both in $S$; contributes $0$.\n- From $(2,2)$: to $(2,3)$ in $T$ and to $(3,2)$ in $T$; contributes $2$.\n- From $(3,1)$: to $(3,2)$ in $T$; contributes $1$.\n\nSumming these contributions gives $1+2+1=4$. Therefore,\n$$\n\\mathrm{cap}(S,T)=4.\n$$", "answer": "$$\\boxed{4}$$", "id": "1361015"}, {"introduction": "While calculating the capacity of a given cut is essential, the ultimate goal in many applications is to find the cut with the minimum possible capacity. This practice [@problem_id:1360971] moves beyond simple calculation and introduces an analytical approach to optimizing a cut. You will investigate how moving a single vertex can change the total cut capacity, providing a concrete glimpse into the logic behind powerful network optimization algorithms.", "problem": "Consider a flow network represented by a directed graph $G = (V, E)$, with a set of vertices $V = \\{s, a, b, c, d, t\\}$, where $s$ is the source and $t$ is the sink. The edges and their corresponding capacities are given as a list of tuples (edge, capacity):\n*   $(s, a), 10$\n*   $(s, b), 12$\n*   $(a, c), 8$\n*   $(a, d), 4$\n*   $(b, a), 3$\n*   $(b, d), 9$\n*   $(c, t), 15$\n*   $(d, c), 5$\n*   $(d, t), 7$\n\nAn $s-t$ cut is a partition of the vertices $V$ into two sets, $S$ and $T$, such that $s \\in S$ and $t \\in T$. The capacity of the cut, denoted $c(S, T)$, is the sum of the capacities of all edges that have their starting vertex in $S$ and their ending vertex in $T$.\n\nLet's consider an initial cut defined by the set $S_0 = \\{s, a, b\\}$ and its complement $T_0 = V \\setminus S_0 = \\{c, d, t\\}$.\n\nWe want to determine if this cut can be improved (i.e., its capacity can be decreased) by moving a single vertex from $T_0$ to $S_0$. The sink vertex $t$ must remain in the sink-side set. Which of the following vertices, if moved from $T_0$ to $S_0$, would result in a new cut with a strictly smaller capacity?\n\nA. Vertex $c$\n\nB. Vertex $d$\n\nC. Both vertices $c$ and $d$\n\nD. Neither vertex $c$ nor $d$\n\nE. The initial cut is already a minimum cut.", "solution": "The problem asks us to determine whether moving a vertex from the set $T_0 = \\{c, d, t\\}$ to the set $S_0 = \\{s, a, b\\}$ will decrease the capacity of the cut $(S_0, T_0)$. The sink vertex $t$ cannot be moved. The candidate vertices for moving are therefore $c$ and $d$.\n\nFirst, let's calculate the capacity of the initial cut, $c(S_0, T_0)$. The capacity of a cut $(S, T)$ is the sum of capacities of all edges $(u, v)$ where $u \\in S$ and $v \\in T$.\nFor the initial cut $(S_0, T_0)$, where $S_0 = \\{s, a, b\\}$ and $T_0 = \\{c, d, t\\}$, the edges directed from $S_0$ to $T_0$ are:\n- $(a, c)$ with capacity 8\n- $(a, d)$ with capacity 4\n- $(b, d)$ with capacity 9\n\nThe capacity of the initial cut is the sum of these capacities:\n$c(S_0, T_0) = c(a, c) + c(a, d) + c(b, d) = 8 + 4 + 9 = 21$.\n\nNow, let's analyze the effect of moving a vertex $v \\in T_0$ (where $v \\neq t$) to $S_0$. Let the new cut be $(S', T')$ where $S' = S_0 \\cup \\{v\\}$ and $T' = T_0 \\setminus \\{v\\}$. We want to find the change in capacity, $\\Delta c(v) = c(S', T') - c(S_0, T_0)$. A decrease in capacity means $\\Delta c(v) < 0$.\n\nWhen we move vertex $v$ from $T_0$ to $S_0$:\n1.  Any edge $(u, v)$ with $u \\in S_0$ was part of the original cut capacity. In the new cut, this edge becomes an internal edge within $S'$, so its capacity is removed from the cut's total. This contributes $-\\sum_{u \\in S_0} c(u, v)$ to the change in capacity.\n2.  Any edge $(v, w)$ with $w \\in T_0, w \\neq v$ was an internal edge within $T_0$ and did not contribute to the original cut capacity. In the new cut, this edge goes from $S'$ to $T'$, so its capacity is added to the cut's total. This contributes $+\\sum_{w \\in T_0 \\setminus \\{v\\}} c(v, w)$ to the change in capacity.\n\nCombining these, the total change in capacity from moving vertex $v$ is:\n$\\Delta c(v) = \\left( \\sum_{w \\in T_0 \\setminus \\{v\\}} c(v, w) \\right) - \\left( \\sum_{u \\in S_0} c(u, v) \\right)$.\n\nWe will now apply this to our candidate vertices, $c$ and $d$.\n\n**Case 1: Move vertex $c$**\nHere, $v=c$. The new sets would be $S' = \\{s, a, b, c\\}$ and $T' = \\{d, t\\}$.\n- The sum of capacities of edges from $c$ to other vertices in $T_0 = \\{c, d, t\\}$ is the sum of capacities of edges from $c$ to $\\{d, t\\}$. The only such edge is $(c, t)$. So, $\\sum_{w \\in T_0 \\setminus \\{c\\}} c(c, w) = c(c, t) = 15$.\n- The sum of capacities of edges from $S_0 = \\{s, a, b\\}$ to $c$. The only such edge is $(a, c)$. So, $\\sum_{u \\in S_0} c(u, c) = c(a, c) = 8$.\n\nThe change in capacity is $\\Delta c(c) = 15 - 8 = 7$.\nSince $\\Delta c(c) > 0$, moving vertex $c$ increases the cut capacity from 21 to $21 + 7 = 28$. Thus, this is not an improvement.\n\n**Case 2: Move vertex $d$**\nHere, $v=d$. The new sets would be $S'' = \\{s, a, b, d\\}$ and $T'' = \\{c, t\\}$.\n- The sum of capacities of edges from $d$ to other vertices in $T_0 = \\{c, d, t\\}$ is the sum of capacities of edges from $d$ to $\\{c, t\\}$. These edges are $(d, c)$ and $(d, t)$. So, $\\sum_{w \\in T_0 \\setminus \\{d\\}} c(d, w) = c(d, c) + c(d, t) = 5 + 7 = 12$.\n- The sum of capacities of edges from $S_0 = \\{s, a, b\\}$ to $d$. These edges are $(a, d)$ and $(b, d)$. So, $\\sum_{u \\in S_0} c(u, d) = c(a, d) + c(b, d) = 4 + 9 = 13$.\n\nThe change in capacity is $\\Delta c(d) = 12 - 13 = -1$.\nSince $\\Delta c(d) < 0$, moving vertex $d$ decreases the cut capacity from 21 to $21 - 1 = 20$. This is an improvement.\n\nBased on our analysis, only moving vertex $d$ from $T_0$ to $S_0$ results in a new cut with a strictly smaller capacity. Therefore, option B is the correct answer. Since we found an improvement, the initial cut is not a minimum cut, so option E is incorrect.", "answer": "$$\\boxed{B}$$", "id": "1360971"}, {"introduction": "Real-world networks, from logistics to distributed computing, often involve flows from multiple sources to multiple destinations, not just a single source-sink pair $s-t$. This problem [@problem_id:1360967] demonstrates how to generalize the concept of a cut to analyze such multi-terminal networks. Your task is to find the minimum capacity cut that separates a set of source vertices from a set of sink vertices, a crucial step in identifying system-wide bottlenecks.", "problem": "A distributed computing company operates a network of servers for a large-scale data processing pipeline. The network consists of a set of servers, interconnected by directional fiber optic links, each with a specific maximum data transmission rate (bandwidth).\n\nThe network has eight servers, labeled $v_1, v_2, \\dots, v_8$.\nTwo of these servers, forming the set $A = \\{v_1, v_2\\}$, act as primary data sources, continuously generating raw data.\nTwo other servers, forming the set $B = \\{v_7, v_8\\}$, are designated as processing hubs, where the final data analysis occurs. The sets $A$ and $B$ are disjoint.\nThe remaining servers ($v_3, v_4, v_5, v_6$) are intermediate routers that forward data through the network.\n\nThe directed connections and their respective bandwidths, in Gigabits per second (Gbps), are listed below:\n- From $v_1$ to $v_3$, capacity 10\n- From $v_1$ to $v_4$, capacity 15\n- From $v_2$ to $v_4$, capacity 8\n- From $v_3$ to $v_5$, capacity 12\n- From $v_3$ to $v_6$, capacity 5\n- From $v_4$ to $v_5$, capacity 7\n- From $v_4$ to $v_6$, capacity 10\n- From $v_5$ to $v_7$, capacity 18\n- From $v_5$ to $v_8$, capacity 6\n- From $v_6$ to $v_7$, capacity 4\n- From $v_6$ to $v_8$, capacity 20\n\nTo assess the network's resilience, the company wants to determine the system's primary bottleneck. Specifically, they need to find the minimum total bandwidth of a set of links that, if they were all to fail simultaneously, would completely sever all possible data paths from any server in set $A$ to any server in set $B$.\n\nCalculate this minimum total bandwidth. Express your answer in Gbps.", "solution": "Interpret the task as a minimum $A$–$B$ cut problem in a directed capacitated network, where $A=\\{v_{1},v_{2}\\}$ are sources and $B=\\{v_{7},v_{8}\\}$ are sinks. By the max-flow min-cut theorem, the minimum total bandwidth to remove to separate all $A \\to B$ paths equals the value of the maximum flow from $A$ to $B$. This is equivalent to adding a super-source connected to $v_{1},v_{2}$ with infinite capacity and a super-sink fed by $v_{7},v_{8}$ with infinite capacity, and computing the minimum $s$–$t$ cut among original edges.\n\nBecause the graph is layered with edges only from $\\{v_{1},v_{2}\\}$ to $\\{v_{3},v_{4}\\}$, then to $\\{v_{5},v_{6}\\}$, then to $\\{v_{7},v_{8}\\}$, any $A$–$B$ cut can be represented by choosing which of the intermediate nodes lie on the source side. Fix $v_{1},v_{2}$ on the source side and $v_{7},v_{8}$ on the sink side. Let $x_{3},x_{4}\\in\\{0,1\\}$ indicate whether $v_{3},v_{4}$ are on the source side (value $1$) or sink side (value $0$), and $y_{5},y_{6}\\in\\{0,1\\}$ indicate whether $v_{5},v_{6}$ are on the source side.\n\nThe cut capacity $C$ is the sum of capacities of edges directed from the source side to the sink side. Accounting edge by edge:\n- From $v_{1}$: $v_{1}\\to v_{3}$ contributes $10(1-x_{3})$, and $v_{1}\\to v_{4}$ contributes $15(1-x_{4})$.\n- From $v_{2}$: $v_{2}\\to v_{4}$ contributes $8(1-x_{4})$.\n- From $v_{3}$: $v_{3}\\to v_{5}$ contributes $12\\,x_{3}(1-y_{5})$, and $v_{3}\\to v_{6}$ contributes $5\\,x_{3}(1-y_{6})$.\n- From $v_{4}$: $v_{4}\\to v_{5}$ contributes $7\\,x_{4}(1-y_{5})$, and $v_{4}\\to v_{6}$ contributes $10\\,x_{4}(1-y_{6})$.\n- From $v_{5}$: $v_{5}\\to v_{7}$ and $v_{5}\\to v_{8}$ contribute $18\\,y_{5}$ and $6\\,y_{5}$, summing to $24\\,y_{5}$.\n- From $v_{6}$: $v_{6}\\to v_{7}$ and $v_{6}\\to v_{8}$ contribute $4\\,y_{6}$ and $20\\,y_{6}$, summing to $24\\,y_{6}$.\n\nThus\n$$\nC(x_{3},x_{4},y_{5},y_{6})\n=10(1-x_{3})+23(1-x_{4})\n+x_{3}\\bigl[12(1-y_{5})+5(1-y_{6})\\bigr]\n+x_{4}\\bigl[7(1-y_{5})+10(1-y_{6})\\bigr]\n+24y_{5}+24y_{6}.\n$$\n\nEvaluate and minimize over the four choices of $(x_{3},x_{4})$, optimizing $(y_{5},y_{6})$ for each:\n\n1) $x_{3}=0,x_{4}=0$: Then\n$$\nC=10+23+24y_{5}+24y_{6},\n$$\nminimized at $y_{5}=y_{6}=0$, giving $C=33$.\n\n2) $x_{3}=1,x_{4}=0$: Then\n$$\nC=23+\\bigl[12(1-y_{5})+5(1-y_{6})\\bigr]+24y_{5}+24y_{6}\n=23+17+12y_{5}+19y_{6},\n$$\nminimized at $y_{5}=y_{6}=0$, giving $C=40$.\n\n3) $x_{3}=0,x_{4}=1$: Then\n$$\nC=10+\\bigl[7(1-y_{5})+10(1-y_{6})\\bigr]+24y_{5}+24y_{6}\n=10+17+17y_{5}+14y_{6},\n$$\nminimized at $y_{5}=y_{6}=0$, giving $C=27$.\n\n4) $x_{3}=1,x_{4}=1$: Then\n$$\nC=\\bigl[12(1-y_{5})+5(1-y_{6})\\bigr]+\\bigl[7(1-y_{5})+10(1-y_{6})\\bigr]+24y_{5}+24y_{6}\n=34+5y_{5}+9y_{6},\n$$\nminimized at $y_{5}=y_{6}=0$, giving $C=34$.\n\nThe minimum over all cases is $27$. Therefore, the minimum total bandwidth of a set of links whose simultaneous failure disconnects all $A$–$B$ paths is $27$.\n\nTo confirm tightness, construct a feasible flow of value $27$. Send $10$ from $v_{1}$ to $v_{3}$, $9$ from $v_{1}$ to $v_{4}$, and $8$ from $v_{2}$ to $v_{4}$, totaling $27$ out of sources. From $v_{3}$ send $5$ to $v_{5}$ and $5$ to $v_{6}$; from $v_{4}$ send $7$ to $v_{5}$ and $10$ to $v_{6}$; then from $v_{5}$ send $12$ to $v_{7}$, and from $v_{6}$ send $15$ to $v_{8}$. All edge capacities are respected, so a $27$-flow exists. By max-flow min-cut, the minimum cut capacity equals $27$.\n\nHence the required minimum total bandwidth is $27$ Gbps.", "answer": "$$\\boxed{27}$$", "id": "1360967"}]}