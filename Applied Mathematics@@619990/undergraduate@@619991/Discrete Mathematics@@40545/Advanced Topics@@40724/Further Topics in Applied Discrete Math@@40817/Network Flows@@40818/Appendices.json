{"hands_on_practices": [{"introduction": "A core principle in any flow network is the law of conservation. For a flow to be valid, whatever enters an intermediate node must also leave it, ensuring no loss or creation of flow within the network. This exercise [@problem_id:1387800] challenges you to act as a network auditor, verifying whether this fundamental \"flow in equals flow out\" rule holds for each node in a proposed data routing plan.", "problem": "In a small-scale data center, a network is designed to route data packets from a source server, `s`, to a sink server, `t`. The network consists of a set of vertices `V = {s, t, A, B, C, D}` and a set of directed edges representing data pathways. An engineer has proposed a flow distribution, represented by a function `f(u, v)` which denotes the number of data packets per second flowing from vertex `u` to vertex `v`.\n\nThe proposed flow values are as follows:\n- `f(s, A) = 10`\n- `f(s, B) = 12`\n- `f(A, C) = 6`\n- `f(A, D) = 4`\n- `f(B, C) = 7`\n- `f(B, D) = 4`\n- `f(C, t) = 13`\n- `f(D, t) = 8`\n\nFor a flow to be valid, it must satisfy the flow conservation property at every non-terminal vertex (i.e., any vertex other than the source `s` and the sink `t`). This property states that for any non-terminal vertex `v`, the total flow into `v` must equal the total flow out of `v`.\n\nWhich of the following non-terminal vertices violates the flow conservation property?\n\nA. Vertex A\n\nB. Vertex B\n\nC. Vertex C\n\nD. Vertex D", "solution": "To solve this problem, we need to check the flow conservation property for each of the non-terminal vertices: A, B, C, and D. The flow conservation property for a vertex `v` states that the sum of flows on all incoming edges must equal the sum of flows on all outgoing edges. Let's denote the total incoming flow to a vertex `v` as `Flow_in(v)` and the total outgoing flow as `Flow_out(v)`.\n\n**Check Vertex A:**\nThe edges providing flow into vertex A come from the source `s`. The only incoming edge is `(s, A)`.\n`Flow_in(A) = f(s, A) = 10`\n\nThe edges carrying flow out of vertex A go to vertices C and D. The outgoing edges are `(A, C)` and `(A, D)`.\n`Flow_out(A) = f(A, C) + f(A, D) = 6 + 4 = 10`\n\nSince `Flow_in(A) = 10` and `Flow_out(A) = 10`, the flow conservation property is satisfied for vertex A.\n\n**Check Vertex B:**\nThe edges providing flow into vertex B come from the source `s`. The only incoming edge is `(s, B)`.\n`Flow_in(B) = f(s, B) = 12`\n\nThe edges carrying flow out of vertex B go to vertices C and D. The outgoing edges are `(B, C)` and `(B, D)`.\n`Flow_out(B) = f(B, C) + f(B, D) = 7 + 4 = 11`\n\nSince `Flow_in(B) = 12` and `Flow_out(B) = 11`, the total incoming flow does not equal the total outgoing flow ($12 \\neq 11$). Therefore, vertex B violates the flow conservation property.\n\n**Check Vertex C:**\nThe edges providing flow into vertex C come from vertices A and B. The incoming edges are `(A, C)` and `(B, C)`.\n`Flow_in(C) = f(A, C) + f(B, C) = 6 + 7 = 13`\n\nThe edges carrying flow out of vertex C go to the sink `t`. The only outgoing edge is `(C, t)`.\n`Flow_out(C) = f(C, t) = 13`\n\nSince `Flow_in(C) = 13` and `Flow_out(C) = 13`, the flow conservation property is satisfied for vertex C.\n\n**Check Vertex D:**\nThe edges providing flow into vertex D come from vertices A and B. The incoming edges are `(A, D)` and `(B, D)`.\n`Flow_in(D) = f(A, D) + f(B, D) = 4 + 4 = 8`\n\nThe edges carrying flow out of vertex D go to the sink `t`. The only outgoing edge is `(D, t)`.\n`Flow_out(D) = f(D, t) = 8`\n\nSince `Flow_in(D) = 8` and `Flow_out(D) = 8`, the flow conservation property is satisfied for vertex D.\n\nBased on these calculations, the only non-terminal vertex that violates the flow conservation property is vertex B.", "answer": "$$\\boxed{B}$$", "id": "1387800"}, {"introduction": "Once we have a valid, but not necessarily maximal, flow, how can we improve it? The key lies in finding an \"augmenting path\"â€”a route from the source $s$ to the sink $t$ with available capacity. This practice [@problem_id:1387807] lets you focus on the mechanics of this process, including the powerful idea that you can increase total throughput by rerouting existing flow, which corresponds to using backward edges in the residual graph.", "problem": "Consider a directed graph representing a flow network with a set of vertices $V = \\{s, u, v, w, t\\}$, where $s$ is the source and $t$ is the sink. The edges of the network and their corresponding integer capacities $c(x, y)$ are given as follows:\n- $c(s, u) = 15$\n- $c(s, v) = 12$\n- $c(u, w) = 10$\n- $c(u, t) = 8$\n- $c(v, u) = 5$\n- $c(v, w) = 9$\n- $c(w, t) = 20$\n\nAn existing integer-valued flow $f$ is defined on this network. The edges with non-zero flow are:\n- $f(s, u) = 10$\n- $f(s, v) = 8$\n- $f(u, w) = 7$\n- $f(u, t) = 3$\n- $f(v, w) = 8$\n- $f(w, t) = 15$\n\nAll other edges have a flow of $0$.\n\nNow, consider the directed path $P = (s, v, w, u, t)$. Augment the current flow $f$ along this path $P$ by the largest possible integer amount to produce a new flow, $f'$.\n\nDetermine the new flow values $f'(s, v)$, $f'(v, w)$, $f'(u, w)$, and $f'(u, t)$. Your answer should be a row matrix with these four values in the specified order.", "solution": "We work in the residual network. For any edge $(x,y)$, the forward residual capacity is $r(x,y)=c(x,y)-f(x,y)$, and for a backward residual edge $(y,x)$ it is $r(y,x)=f(x,y)$.\n\nThe given augmenting path is $P=(s,v,w,u,t)$, which corresponds in the residual network to the edges $s \\to v$ (forward), $v \\to w$ (forward), $w \\to u$ (backward of $u \\to w$), and $u \\to t$ (forward). Compute residual capacities along $P$:\n$$\n\\begin{align*}\nr(s,v) &= c(s,v)-f(s,v)=12-8=4 \\\\\nr(v,w) &= c(v,w)-f(v,w)=9-8=1 \\\\\nr(w,u) &= f(u,w)=7 \\\\\nr(u,t) &= c(u,t)-f(u,t)=8-3=5\n\\end{align*}\n$$\nThe bottleneck augmentation amount is the minimum residual capacity along the path:\n$$\n\\Delta=\\min\\{4,1,7,5\\}=1.\n$$\nUpdate the flow: for each forward edge $(x,y)$ on $P$, set $f'(x,y)=f(x,y)+\\Delta$; for the backward step $w \\to u$, decrease the corresponding forward flow by $\\Delta$, i.e., $f'(u,w)=f(u,w)-\\Delta$. Therefore,\n$$\n\\begin{align*}\nf'(s,v) &= 8+1=9 \\\\\nf'(v,w) &= 8+1=9 \\\\\nf'(u,w) &= 7-1=6 \\\\\nf'(u,t) &= 3+1=4\n\\end{align*}\n$$\nAll updated flows respect capacities and remain nonnegative, so this is the valid augmented flow.", "answer": "$$\\boxed{\\begin{pmatrix} 9 & 9 & 6 & 4 \\end{pmatrix}}$$", "id": "1387807"}, {"introduction": "The Ford-Fulkerson algorithm provides a classic method for finding the maximum possible flow in a network by iteratively finding and using augmenting paths. This exercise [@problem_id:1387823] puts you in the driver's seat for one complete iteration of this algorithm. You will apply your skills to identify an augmenting path and use it to increase the network's total throughput, moving the current flow closer to the maximum.", "problem": "A logistics company manages a distribution network represented by a directed graph. The nodes are a source depot (S), a destination city (T), and four intermediate transfer hubs (U, V, W, X). The directed links between these nodes represent one-way roads, and each has a maximum capacity measured in cargo units per hour.\n\nThe network's structure and capacities, denoted by $c(i, j)$ for the link from node $i$ to node $j$, are as follows:\n- $c(S, U) = 10$\n- $c(S, V) = 8$\n- $c(U, V) = 4$\n- $c(U, W) = 7$\n- $c(V, W) = 3$\n- $c(V, X) = 6$\n- $c(W, T) = 9$\n- $c(X, T) = 5$\nAny link not listed has a capacity of zero.\n\nA traffic analysis reveals the current flow, $f(i, j)$, on some of the links:\n- $f(S, U) = 6$\n- $f(U, W) = 6$\n- $f(W, T) = 6$\n- $f(S, V) = 4$\n- $f(V, X) = 4$\n- $f(X, T) = 4$\nThe flow on all other links is zero. The current total flow from the source S to the sink T is 10 cargo units per hour.\n\nTo increase the throughput, you must perform a single iteration of the Ford-Fulkerson algorithm. Your task is to find an augmenting path from S to T in the residual graph. To ensure a unique path, you must use a Breadth-First Search (BFS) that explores the neighbors of any given node in alphabetical order. Based on this specific augmenting path, what is the new total flow value from S to T?\n\nExpress your answer as a single integer, representing the total flow in cargo units per hour.", "solution": "We form the residual graph for the current flow. For each directed link with capacity $c(i,j)$ and current flow $f(i,j)$, the forward residual capacity is $r(i,j)=c(i,j)-f(i,j)$, and the reverse residual capacity is $r(j,i)=f(i,j)$. Using the given data:\n- On $S \\to U$: $r(S,U)=10-6=4$ and $r(U,S)=6$.\n- On $S \\to V$: $r(S,V)=8-4=4$ and $r(V,S)=4$.\n- On $U \\to V$: $r(U,V)=4-0=4$ and $r(V,U)=0$.\n- On $U \\to W$: $r(U,W)=7-6=1$ and $r(W,U)=6$.\n- On $V \\to W$: $r(V,W)=3-0=3$ and $r(W,V)=0$.\n- On $V \\to X$: $r(V,X)=6-4=2$ and $r(X,V)=4$.\n- On $W \\to T$: $r(W,T)=9-6=3$ and $r(T,W)=6$.\n- On $X \\to T$: $r(X,T)=5-4=1$ and $r(T,X)=4$.\n\nWe run a single BFS from $S$ in the residual graph, exploring neighbors of each node in alphabetical order. Starting at $S$, its neighbors with positive residuals are $U$ and $V$, enqueued as $U$ then $V$. Processing $U$ next, and exploring its neighbors in alphabetical order, we encounter $W$ via $U \\to W$ since $r(U,W)=1>0$, so we enqueue $W$. Processing $V$ next, we enqueue $X$ via $V \\to X$ since $r(V,X)=2>0$. Processing $W$ next, we discover $T$ via $W \\to T$ since $r(W,T)=3>0$. Thus the BFS finds the augmenting path $S \\to U \\to W \\to T$.\n\nThe bottleneck residual capacity on this path is the minimum of the residual capacities along its edges:\n$$\\Delta=\\min\\{r(S,U),\\,r(U,W),\\,r(W,T)\\}=\\min\\{4,\\,1,\\,3\\}=1.$$\nAugmenting by $\\Delta$ increases the total flow by $1$, so the new total flow value is\n$$|f'|=|f|+\\Delta=10+1=11.$$", "answer": "$$\\boxed{11}$$", "id": "1387823"}]}