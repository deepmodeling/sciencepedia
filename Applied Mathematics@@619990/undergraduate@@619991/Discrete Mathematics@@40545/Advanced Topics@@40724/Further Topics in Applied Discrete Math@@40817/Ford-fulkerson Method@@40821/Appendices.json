{"hands_on_practices": [{"introduction": "The Ford-Fulkerson method is an iterative process, and understanding its core mechanics is the first step toward mastery. This exercise provides a hands-on opportunity to execute a single, fundamental iteration of the algorithm. By constructing a residual graph and finding an augmenting path, you'll see precisely how flow is increased step-by-step through a network [@problem_id:1387823].", "problem": "A logistics company manages a distribution network represented by a directed graph. The nodes are a source depot (S), a destination city (T), and four intermediate transfer hubs (U, V, W, X). The directed links between these nodes represent one-way roads, and each has a maximum capacity measured in cargo units per hour.\n\nThe network's structure and capacities, denoted by $c(i, j)$ for the link from node $i$ to node $j$, are as follows:\n- $c(S, U) = 10$\n- $c(S, V) = 8$\n- $c(U, V) = 4$\n- $c(U, W) = 7$\n- $c(V, W) = 3$\n- $c(V, X) = 6$\n- $c(W, T) = 9$\n- $c(X, T) = 5$\nAny link not listed has a capacity of zero.\n\nA traffic analysis reveals the current flow, $f(i, j)$, on some of the links:\n- $f(S, U) = 6$\n- $f(U, W) = 6$\n- $f(W, T) = 6$\n- $f(S, V) = 4$\n- $f(V, X) = 4$\n- $f(X, T) = 4$\nThe flow on all other links is zero. The current total flow from the source S to the sink T is 10 cargo units per hour.\n\nTo increase the throughput, you must perform a single iteration of the Ford-Fulkerson algorithm. Your task is to find an augmenting path from S to T in the residual graph. To ensure a unique path, you must use a Breadth-First Search (BFS) that explores the neighbors of any given node in alphabetical order. Based on this specific augmenting path, what is the new total flow value from S to T?\n\nExpress your answer as a single integer, representing the total flow in cargo units per hour.", "solution": "We form the residual graph for the current flow. For each directed link with capacity $c(i,j)$ and current flow $f(i,j)$, the forward residual capacity is $r(i,j)=c(i,j)-f(i,j)$, and the reverse residual capacity is $r(j,i)=f(i,j)$. Using the given data:\n- On $S \\to U$: $r(S,U)=10-6=4$ and $r(U,S)=6$.\n- On $S \\to V$: $r(S,V)=8-4=4$ and $r(V,S)=4$.\n- On $U \\to V$: $r(U,V)=4-0=4$ and $r(V,U)=0$.\n- On $U \\to W$: $r(U,W)=7-6=1$ and $r(W,U)=6$.\n- On $V \\to W$: $r(V,W)=3-0=3$ and $r(W,V)=0$.\n- On $V \\to X$: $r(V,X)=6-4=2$ and $r(X,V)=4$.\n- On $W \\to T$: $r(W,T)=9-6=3$ and $r(T,W)=6$.\n- On $X \\to T$: $r(X,T)=5-4=1$ and $r(T,X)=4$.\n\nWe run a single BFS from $S$ in the residual graph, exploring neighbors of each node in alphabetical order. Starting at $S$, its neighbors with positive residuals are $U$ and $V$, enqueued as $U$ then $V$. Processing $U$ next, and exploring its neighbors in alphabetical order, we encounter $W$ via $U \\to W$ since $r(U,W)=1>0$, so we enqueue $W$. Processing $V$ next, we enqueue $X$ via $V \\to X$ since $r(V,X)=2>0$. Processing $W$ next, we discover $T$ via $W \\to T$ since $r(W,T)=3>0$. Thus the BFS finds the augmenting path $S \\to U \\to W \\to T$.\n\nThe bottleneck residual capacity on this path is the minimum of the residual capacities along its edges:\n$$\\Delta=\\min\\{r(S,U),\\,r(U,W),\\,r(W,T)\\}=\\min\\{4,\\,1,\\,3\\}=1.$$\nAugmenting by $\\Delta$ increases the total flow by $1$, so the new total flow value is\n$$|f'|=|f|+\\Delta=10+1=11.$$", "answer": "$$\\boxed{11}$$", "id": "1387823"}, {"introduction": "Beyond the mechanics of individual steps, the true power of the Ford-Fulkerson method lies in the celebrated max-flow min-cut theorem it proves. This problem guides you through running the algorithm to completion to find the maximum flow and then identifying a corresponding minimum cut. This practice provides a concrete verification of the theorem, showing that the maximum amount of flow a network can handle is exactly determined by its narrowest bottleneck [@problem_id:1408993].", "problem": "Consider a small-scale data transmission network represented by a directed graph. The network has a source node S, a sink node T, and four intermediate routing nodes A, B, C, and D. The directed links and their corresponding maximum data carrying capacities (in arbitrary units of flow) are given as follows:\n- From S to A with capacity 10.\n- From S to C with capacity 12.\n- From A to B with capacity 7.\n- From A to D with capacity 4.\n- From B to T with capacity 10.\n- From C to D with capacity 9.\n- From D to B with capacity 3.\n- From D to T with capacity 8.\n\nAll links are one-way as specified. There are no other links in the network. The goal is to determine the throughput of this network.\n\nCalculate the value of the maximum flow from the source S to the sink T, and calculate the capacity of a minimum S-T cut. Provide the two integer values in the specified order: maximum flow value first, followed by the minimum cut capacity.", "solution": "Let $G=(V,E)$ be the directed graph with source $S$, sink $T$, and intermediate nodes $A,B,C,D$. For each directed edge $(u,v)\\in E$, let the capacity be $c_{uv}$ and the flow be $f_{uv}$, with $0\\leq f_{uv}\\leq c_{uv}$. Flow conservation holds at intermediate nodes: for each $v\\in\\{A,B,C,D\\}$,\n$$\n\\sum_{u:(u,v)\\in E} f_{uv}=\\sum_{w:(v,w)\\in E} f_{vw}.\n$$\nThe capacities are:\n$$\nc_{S,A}=10,\\quad c_{S,C}=12,\\quad c_{A,B}=7,\\quad c_{A,D}=4,\\quad c_{B,T}=10,\\quad c_{C,D}=9,\\quad c_{D,B}=3,\\quad c_{D,T}=8.\n$$\n\nApply the Ford–Fulkerson method using augmenting paths and residual capacities.\n\n1) Augment along the path $S\\to A\\to B\\to T$. The bottleneck is\n$$\n\\min\\{c_{S,A},c_{A,B},c_{B,T}\\}=\\min\\{10,7,10\\}=7.\n$$\nSend $7$ units: set $f_{S,A}=7$, $f_{A,B}=7$, $f_{B,T}=7$.\n\n2) Augment along the path $S\\to C\\to D\\to T$. The bottleneck is\n$$\n\\min\\{c_{S,C},c_{C,D},c_{D,T}\\}=\\min\\{12,9,8\\}=8.\n$$\nSend $8$ units: set $f_{S,C}=8$, $f_{C,D}=8$, $f_{D,T}=8$.\n\n3) Consider the path $S\\to A\\to D\\to B\\to T$ in the residual network. The current forward residual capacities on these arcs are\n$$\nr_{S,A}=c_{S,A}-f_{S,A}=10-7=3,\\quad r_{A,D}=c_{A,D}-f_{A,D}=4-0=4,\n$$\n$$\nr_{D,B}=c_{D,B}-f_{D,B}=3-0=3,\\quad r_{B,T}=c_{B,T}-f_{B,T}=10-7=3.\n$$\nThe bottleneck is $\\min\\{3,4,3,3\\}=3$. Augment $3$ units along this path: update\n$$\nf_{S,A}=7+3=10,\\quad f_{A,D}=0+3=3,\\quad f_{D,B}=0+3=3,\\quad f_{B,T}=7+3=10.\n$$\n\nCompute the total flow value after these augmentations. At the sink,\n$$\n|f|=f_{B,T}+f_{D,T}=10+8=18.\n$$\nAlternatively, at the source,\n$$\n|f|=f_{S,A}+f_{S,C}=10+8=18.\n$$\n\nVerify that no further augmenting path exists. In the residual graph, the forward residual capacities to $T$ are $r_{B,T}=10-10=0$ and $r_{D,T}=8-8=0$. From $S$, the reachable nodes via residual edges are $S\\to C$ (with $r_{S,C}=12-8=4$), then $C\\to D$ (with $r_{C,D}=9-8=1$), and also $D\\to A$ via the reverse of $A\\to D$ (with residual $f_{A,D}=3$), hence $A$ is reachable. Node $B$ is not reachable because $r_{A,B}=7-7=0$ and $r_{D,B}=3-3=0$, and $T$ is not reachable because $r_{B,T}=0$ and $r_{D,T}=0$. Therefore the reachable set is $R=\\{S,A,C,D\\}$.\n\nThe capacity of the cut $(R,\\overline{R})$ is the sum of capacities of edges from $R$ to $\\overline{R}=\\{B,T\\}$:\n$$\nc(R,\\overline{R})=c_{A,B}+c_{D,B}+c_{D,T}=7+3+8=18.\n$$\nBy the max-flow min-cut theorem, the maximum flow equals the minimum cut capacity, which matches the constructed flow value. Hence the maximum $S$–$T$ flow is $18$ and the minimum cut capacity is $18$.", "answer": "$$\\boxed{\\begin{pmatrix} 18 & 18 \\end{pmatrix}}$$", "id": "1408993"}, {"introduction": "While the Ford-Fulkerson method is guaranteed to work, *how* we choose the augmenting path at each step can dramatically affect its performance. This insightful problem presents a hypothetical scenario constructed to reveal a critical weakness in making arbitrary or naive path choices, leading to a surprisingly high number of iterations. This exercise [@problem_id:1541549] powerfully illustrates why more sophisticated path-finding strategies, like using Breadth-First Search (the basis of the Edmonds-Karp algorithm), are essential for creating an efficient algorithm.", "problem": "Consider a flow network defined by a set of vertices $V = \\{s, a, b, t\\}$, where $s$ is the source and $t$ is the sink. The network has a set of directed edges with associated integer capacities. Let the capacity of an edge from vertex $u$ to vertex $v$ be denoted by $c(u, v)$. The edges and their capacities are defined as follows:\n- $c(s, a) = C$\n- $c(s, b) = C$\n- $c(a, t) = C$\n- $c(b, t) = C$\n- $c(a, b) = 1$\nAll other edges that are not listed have a capacity of 0. For this problem, let the constant $C = 500$.\n\nYou are to find the maximum flow from $s$ to $t$ using the Ford-Fulkerson algorithm. However, you must follow a specific rule for choosing the augmenting path at each iteration: if multiple augmenting paths exist in the current residual graph, you must always select the path that has the smallest bottleneck capacity. If there is a tie for the smallest bottleneck capacity, you may choose any one of the tied paths.\n\nCalculate the total number of augmentations (i.e., iterations) that the Ford-Fulkerson algorithm will perform to find the maximum flow under this specific path selection strategy.", "solution": "Let $G=(V,E)$ be the directed network with source $s$, sink $t$, capacities $c(u,v)$ as given, and initial flow $f\\equiv 0$. Let $c_{f}(u,v)$ denote the residual capacity under flow $f$. For any $s$–$t$ path $P$ in the current residual graph, its bottleneck is $\\beta(P)=\\min_{(u,v)\\in P}c_{f}(u,v)$. Ford–Fulkerson augments by $\\delta=\\beta(P)$ along $P$, updating residuals by\n$$\nc_{f}^{\\text{new}}(u,v)=c_{f}(u,v)-\\delta\\quad\\text{for forward edges on }P,\\quad\nc_{f}^{\\text{new}}(v,u)=c_{f}(v,u)+\\delta\\quad\\text{for their reverse edges},\n$$\nand the flow value increases by $\\delta$.\n\nInitially, the residual edges are $s\\to a$, $s\\to b$, $a\\to t$, $b\\to t$ with capacity $C$, and $a\\to b$ with capacity $1$. The available $s$–$t$ residual paths include:\n- $P_{1}: s\\to a\\to b\\to t$ with $\\beta(P_{1})=\\min\\{C,1,C\\}=1$,\n- $P_{2}: s\\to a\\to t$ with $\\beta(P_{2})=C$,\n- $P_{3}: s\\to b\\to t$ with $\\beta(P_{3})=C$.\nBy the rule, the algorithm must pick a path with the smallest bottleneck, hence it picks $P_{1}$ and augments $\\delta=1$.\n\nAfter augmenting along $P_{1}$, the residual capacities change to\n$$\nc_{f}(s,a)=C-1,\\quad c_{f}(a,s)=1,\\quad c_{f}(a,b)=0,\\quad c_{f}(b,a)=1,\\quad c_{f}(b,t)=C-1,\\quad c_{f}(t,b)=1,\n$$\nwith $c_{f}(s,b)=C$ and $c_{f}(a,t)=C$ unchanged. Now an $s$–$t$ path with the smallest bottleneck is\n$$\nP_{4}: s\\to b\\to a\\to t\\quad\\text{with}\\quad\\beta(P_{4})=\\min\\{C,1,C\\}=1,\n$$\nso the algorithm augments again by $\\delta=1$ along $P_{4}$.\n\nInductive invariant. After $2m$ augmentations (for some integer $m\\geq 0$), the residual capacities satisfy\n$$\nc_{f}(s,a)=c_{f}(s,b)=c_{f}(a,t)=c_{f}(b,t)=C-m,\\quad c_{f}(a,b)=1,\\quad c_{f}(b,a)=0,\n$$\nand all other residual edges are the corresponding reverse edges with capacities determined by flow conservation. This holds for $m=0$ initially. Given it holds for $m$, the next augmentation must choose $P_{1}: s\\to a\\to b\\to t$, whose bottleneck is\n$$\n\\beta(P_{1})=\\min\\{c_{f}(s,a),c_{f}(a,b),c_{f}(b,t)\\}=\\min\\{C-m,1,C-m\\}=1,\n$$\nprovided $C-m>0$. Augmenting by $1$ yields, after $2m+1$ augmentations,\n$$\nc_{f}(s,a)=C-m-1,\\quad c_{f}(b,t)=C-m-1,\\quad c_{f}(s,b)=C-m,\\quad c_{f}(a,t)=C-m,\\quad c_{f}(a,b)=0,\\quad c_{f}(b,a)=1.\n$$\nThen the smallest-bottleneck path is $P_{4}: s\\to b\\to a\\to t$ with bottleneck\n$$\n\\beta(P_{4})=\\min\\{c_{f}(s,b),c_{f}(b,a),c_{f}(a,t)\\}=\\min\\{C-m,1,C-m\\}=1,\n$$\nagain assuming $C-m>0$. Augmenting by $1$ along $P_{4}$ restores the even-index form with $m$ replaced by $m+1$, proving the invariant.\n\nTermination and count. The alternation between $P_{1}$ and $P_{4}$ continues as long as $C-m>0$. The largest $m$ for which the two augmentations at stage $m$ are possible is $m=C-1$. After performing those two augmentations, we reach $m=C$, at which point\n$$\nc_{f}(s,a)=c_{f}(s,b)=c_{f}(a,t)=c_{f}(b,t)=0,\n$$\nso there is no residual path from $s$ to $t$ and the algorithm terminates. Therefore, the total number of augmentations performed is\n$$\n2C.\n$$\nBy the max-flow min-cut theorem, the maximum flow value is $\\min\\{c(s,a)+c(s,b),\\,c(a,t)+c(b,t)\\}=2C$, and since each augmentation adds exactly $1$ unit of flow (the chosen bottleneck), exactly $2C$ augmentations are necessary and sufficient.\n\nSubstituting $C=500$ gives a total of $2\\cdot 500=1000$ augmentations.", "answer": "$$\\boxed{1000}$$", "id": "1541549"}]}