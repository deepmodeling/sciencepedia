{"hands_on_practices": [{"introduction": "Applying abstract logical rules often begins with translating everyday language into formal expressions. This first exercise provides a clear, hypothetical scenario from combinatorial theory to practice this crucial skill. By defining the conditions for a 'stably tileable' board, you will use De Morgan's laws to determine the exact opposite condition, a common task in defining error states or exceptions in specifications. [@problem_id:1361503]", "problem": "In a theoretical study of combinatorial tiling, a rectangular board with integer dimensions `M` rows and `N` columns is defined as \"stably tileable\" if and only if two conditions are met simultaneously:\n\n1.  The total number of squares on the board, `A = M * N`, is divisible by 6.\n2.  Both dimensions, `M` and `N`, are strictly greater than 1.\n\nA board that is not \"stably tileable\" is referred to as \"unstably tileable\".\n\nWhich of the following logical statements accurately and completely describes the condition for a board to be \"unstably tileable\"?\n\nA. The total area is not divisible by 6, or at least one dimension is equal to 1.\n\nB. The total area is not divisible by 6, and at least one dimension is equal to 1.\n\nC. The total area is divisible by 6, and both dimensions are equal to 1.\n\nD. The total area is not divisible by 6, or both dimensions are strictly greater than 1.\n\nE. The total area is divisible by 2 or 3, and at least one dimension is equal to 1.", "solution": "Let $A = M N$ with $M,N$ integers representing counts of rows and columns, hence $M,N \\in \\mathbb{Z}_{\\ge 1}$. The board is stably tileable if and only if both conditions hold:\n$$S:\\quad (6 \\mid A)\\ \\land\\ (M>1\\ \\land\\ N>1).$$\nA board is unstably tileable precisely when the negation of $S$ holds:\n$$U \\equiv \\lnot S = \\lnot\\big((6 \\mid A)\\ \\land\\ (M>1\\ \\land\\ N>1)\\big).$$\nBy De Morgan’s law $\\lnot(P \\land Q) \\equiv (\\lnot P) \\lor (\\lnot Q)$,\n$$U = (6 \\nmid A)\\ \\lor\\ \\lnot(M>1\\ \\land\\ N>1).$$\nApplying De Morgan’s law again,\n$$\\lnot(M>1\\ \\land\\ N>1) \\equiv (M \\le 1)\\ \\lor\\ (N \\le 1).$$\nSince $M,N \\in \\mathbb{Z}_{\\ge 1}$, $(M \\le 1)$ is equivalent to $(M=1)$ and $(N \\le 1)$ is equivalent to $(N=1)$. Therefore,\n$$U \\equiv (6 \\nmid A)\\ \\lor\\ (M=1)\\ \\lor\\ (N=1).$$\nThis is exactly the statement: “The total area is not divisible by $6$, or at least one dimension is equal to $1$,” which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1361503"}, {"introduction": "De Morgan’s laws are fundamental principles of duality that extend beyond simple propositions into the realm of predicate logic. This practice problem challenges you to negate a statement involving both disjunction and quantifiers, a common structure in mathematics and computer science theory. Working with a binary matrix provides a concrete object to think about as you combine De Morgan's laws with the rules for negating 'for all' ($\\forall$) and 'there exists' ($\\exists$) quantifiers. [@problem_id:1361524]", "problem": "Consider an arbitrary $m \\times n$ matrix $A$, where $m, n \\ge 1$ are integers and each entry of the matrix is either 0 or 1 (a binary matrix). Let $\\Phi$ be the following proposition regarding such a matrix:\n\n\"Every row has at least one 1, or every column has at least one 0.\"\n\nWhich one of the following statements is logically equivalent to the negation of the proposition $\\Phi$?\n\nA. There exists a row consisting entirely of 0s, and there exists a column consisting entirely of 1s.\n\nB. There exists a row consisting entirely of 0s, or there exists a column consisting entirely of 1s.\n\nC. Every row contains at least one 0, and every column contains at least one 1.\n\nD. There exists a row consisting entirely of 1s, and there exists a column consisting entirely of 0s.\n\nE. Every row consists entirely of 0s, and every column consists entirely of 1s.\n\nF. Every row consists entirely of 1s, or every column consists entirely of 0s.", "solution": "Let rows be indexed by $i \\in \\{1,\\dots,m\\}$ and columns by $j \\in \\{1,\\dots,n\\}$. Define the predicates:\n- \"Row $i$ has at least one $1$\" as $(\\exists j)\\, [A_{ij}=1]$.\n- \"Column $j$ has at least one $0$\" as $(\\exists i)\\, [A_{ij}=0]$.\n\nThe proposition $\\Phi$ is:\n$$\n\\Phi \\equiv \\left[(\\forall i)(\\exists j)\\, A_{ij}=1\\right] \\lor \\left[(\\forall j)(\\exists i)\\, A_{ij}=0\\right].\n$$\n\nNegate $\\Phi$ using De Morgan's law $\\neg(X \\lor Y) \\equiv (\\neg X) \\land (\\neg Y)$:\n$$\n\\neg \\Phi \\equiv \\neg\\left[(\\forall i)(\\exists j)\\, A_{ij}=1\\right] \\land \\neg\\left[(\\forall j)(\\exists i)\\, A_{ij}=0\\right].\n$$\n\nNegate the quantified statements using $\\neg(\\forall x)(\\exists y)\\, P(x,y) \\equiv (\\exists x)(\\forall y)\\, \\neg P(x,y)$:\n$$\n\\neg\\left[(\\forall i)(\\exists j)\\, A_{ij}=1\\right] \\equiv (\\exists i)(\\forall j)\\, \\neg(A_{ij}=1),\n$$\n$$\n\\neg\\left[(\\forall j)(\\exists i)\\, A_{ij}=0\\right] \\equiv (\\exists j)(\\forall i)\\, \\neg(A_{ij}=0).\n$$\n\nSince the matrix is binary, $\\neg(A_{ij}=1)$ is equivalent to $A_{ij}=0$, and $\\neg(A_{ij}=0)$ is equivalent to $A_{ij}=1$. Therefore,\n$$\n\\neg \\Phi \\equiv \\left[(\\exists i)(\\forall j)\\, A_{ij}=0\\right] \\land \\left[(\\exists j)(\\forall i)\\, A_{ij}=1\\right].\n$$\n\nThis states: there exists a row consisting entirely of $0$s, and there exists a column consisting entirely of $1$s, which matches option A.", "answer": "$$\\boxed{A}$$", "id": "1361524"}, {"introduction": "The true power of logical equivalences like De Morgan's laws is revealed in their practical applications, particularly in computer science and digital logic design. This exercise simulates a real-world engineering task: converting a system's status description into a standardized format known as Conjunctive Normal Form (CNF), which is essential for implementation on hardware like FPGAs. You will see how a multi-step application of De Morgan's laws, alongside other logical rules, provides a systematic method for this critical transformation. [@problem_id:1361525]", "problem": "An engineer is designing a fault-tolerance system for a satellite's primary communication array. The array's functional integrity is described by a Boolean expression $F$, where the array is considered operational if $F$ evaluates to true. The variables $c_1, c_2$ represent the status of two independent control circuits, $s$ represents a stable signal lock, and $d_1, d_2$ represent the status of two data channels. The logical operators are denoted as $\\wedge$ (AND), $\\vee$ (OR), $\\neg$ (NOT), and $\\rightarrow$ (implication).\n\nThe integrity formula is given by:\n$$F = (c_1 \\wedge c_2) \\rightarrow (s \\vee (d_1 \\wedge \\neg d_2))$$\n\nA safety-critical alert must be triggered if the array becomes non-operational, which corresponds to the condition where $\\neg F$ is true. For processing by a specialized onboard Field-Programmable Gate Array (FPGA), the non-operational condition $\\neg F$ must be converted into an equivalent logical expression in Conjunctive Normal Form (CNF). A formula is in CNF if it is a conjunction (logical AND) of one or more \"clauses,\" where each clause is a disjunction (logical OR) of one or more \"literals.\" A literal is a variable or its negation. For conciseness, clauses with a single literal do not require parentheses.\n\nWhich of the following expressions represents the correct CNF of the non-operational condition $\\neg F$?\n\nA. $c_1 \\wedge c_2 \\wedge \\neg s \\wedge (\\neg d_1 \\vee d_2)$\n\nB. $c_1 \\wedge c_2 \\wedge (\\neg s \\vee \\neg d_1 \\vee d_2)$\n\nC. $c_1 \\wedge c_2 \\wedge \\neg s \\wedge (\\neg d_1 \\wedge d_2)$\n\nD. $(c_1 \\wedge c_2) \\vee (\\neg s \\wedge (\\neg d_1 \\vee d_2))$\n\nE. $(\\neg c_1 \\vee \\neg c_2) \\wedge s \\wedge (d_1 \\vee \\neg d_2)$", "solution": "We start with the given formula $F = (c_{1} \\wedge c_{2}) \\rightarrow (s \\vee (d_{1} \\wedge \\neg d_{2}))$ and compute its negation $\\neg F$, then convert it to CNF.\n\nUse the implication equivalence $p \\rightarrow q \\equiv \\neg p \\vee q$ to rewrite the inner structure before negating:\n$$\n\\neg F = \\neg\\big( (c_{1} \\wedge c_{2}) \\rightarrow (s \\vee (d_{1} \\wedge \\neg d_{2})) \\big)\n= \\neg\\big( \\neg(c_{1} \\wedge c_{2}) \\vee (s \\vee (d_{1} \\wedge \\neg d_{2})) \\big).\n$$\nApply De Morgan’s law $\\neg(X \\vee Y) \\equiv \\neg X \\wedge \\neg Y$ and double negation:\n$$\n\\neg F = \\neg\\neg(c_{1} \\wedge c_{2}) \\wedge \\neg\\big( s \\vee (d_{1} \\wedge \\neg d_{2}) \\big)\n= (c_{1} \\wedge c_{2}) \\wedge \\big( \\neg s \\wedge \\neg(d_{1} \\wedge \\neg d_{2}) \\big).\n$$\nApply De Morgan’s law to $\\neg(d_{1} \\wedge \\neg d_{2})$ and simplify using double negation:\n$$\n\\neg(d_{1} \\wedge \\neg d_{2}) \\equiv \\neg d_{1} \\vee \\neg\\neg d_{2} = \\neg d_{1} \\vee d_{2}.\n$$\nSubstitute back to obtain:\n$$\n\\neg F = (c_{1} \\wedge c_{2}) \\wedge \\big( \\neg s \\wedge (\\neg d_{1} \\vee d_{2}) \\big)\n= c_{1} \\wedge c_{2} \\wedge \\neg s \\wedge (\\neg d_{1} \\vee d_{2}).\n$$\nThis is already in CNF as a conjunction of clauses: $c_{1}$, $c_{2}$, $\\neg s$, and $(\\neg d_{1} \\vee d_{2})$. This matches option A.", "answer": "$$\\boxed{A}$$", "id": "1361525"}]}