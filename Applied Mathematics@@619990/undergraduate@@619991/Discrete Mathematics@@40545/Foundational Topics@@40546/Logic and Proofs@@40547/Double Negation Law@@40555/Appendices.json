{"hands_on_practices": [{"introduction": "Mastering logical equivalences is a cornerstone of discrete mathematics and computer science. This first exercise provides essential practice in simplifying a compound proposition where the Double Negation Law is the crucial first step. By working through this simplification, you will see how the rule $\\neg(\\neg p) \\equiv p$ works in tandem with other fundamental equivalences, such as De Morgan’s laws and the definition of implication, to streamline complex logical statements [@problem_id:1366543].", "problem": "Consider the propositional variables $p$, $q$, and $r$. A compound proposition is constructed as follows: $(\\neg(\\neg p) \\land q) \\rightarrow r$. Your task is to simplify this expression. Which of the following propositions is logically equivalent to the given expression?\n\nA. $(\\neg p \\lor \\neg q) \\lor r$\n\nB. $(p \\land q) \\land \\neg r$\n\nC. $(\\neg p \\land \\neg q) \\lor r$\n\nD. $(\\neg p \\land q) \\rightarrow r$\n\nE. $(p \\lor q) \\rightarrow r$", "solution": "We start with the given proposition:\n$$(\\neg(\\neg p) \\land q) \\rightarrow r.$$\n\n1. Apply double negation: $\\neg(\\neg p) \\equiv p$. Hence,\n$$(p \\land q) \\rightarrow r.$$\n\n2. Use the implication equivalence: $a \\rightarrow b \\equiv \\neg a \\lor b$. With $a = p \\land q$ and $b = r$, we obtain\n$$\\neg(p \\land q) \\lor r.$$\n\n3. Apply De Morgan’s law: $\\neg(p \\land q) \\equiv \\neg p \\lor \\neg q$. Therefore,\n$$(\\neg p \\lor \\neg q) \\lor r.$$\n\n4. By associativity and commutativity of $\\lor$, this matches option A.\n\nThus, the given expression is logically equivalent to $(\\neg p \\lor \\neg q) \\lor r$, which is option A.", "answer": "$$\\boxed{A}$$", "id": "1366543"}, {"introduction": "Logical principles are not just abstract concepts; they form the bedrock of the automated systems we interact with daily. This practice problem demonstrates the Double Negation Law within a tangible, hypothetical scenario: the logic of a university library's access control system. You will translate real-world conditions into truth values for propositions like $p$ and $q$, and see firsthand how the logical equivalence $\\neg(\\neg p) \\equiv p$ is used to evaluate system conditions and produce a concrete output, bridging the gap between formal logic and its practical applications in engineering [@problem_id:1366520].", "problem": "An engineer is designing the logic for an automated access control system for a new university library. The system's decision-making process is based on evaluating a set of logical propositions. Let the following atomic propositions be defined:\n\n- `p`: The user presents a valid ID card.\n- `q`: The access attempt occurs after standard operating hours.\n- `r`: The library is open for a special, officially sanctioned event.\n\nThe system relies on two intermediate conditions, $C_1$ and $C_2$, to function:\n- The first condition, $C_1$, which verifies the user's status, is given by the logical proposition: $C_1 \\equiv \\neg(\\neg p)$.\n- The second condition, $C_2$, which checks for authorized timing, is given by: $C_2 \\equiv (\\neg q) \\lor r$.\n\nFor internal diagnostics, the system calculates a numerical score, $S$, based on these conditions. The score is determined by the formula $S = 7 \\cdot V(C_1) + 4 \\cdot V(C_2)$, where $V(X)$ is a function that returns the integer `1` if the proposition `X` is true, and `0` if `X` is false.\n\nConsider a specific scenario: A student with a valid ID card attempts to enter the library after it has closed for the day. At this time, no special events are scheduled.\n\nCalculate the diagnostic score `S` generated by the system for this particular scenario.", "solution": "We are given atomic propositions $p$, $q$, and $r$, and conditions $C_{1} \\equiv \\neg(\\neg p)$ and $C_{2} \\equiv (\\neg q) \\lor r$. The diagnostic score is $S = 7 \\cdot V(C_{1}) + 4 \\cdot V(C_{2})$, where $V(X)=1$ if $X$ is true and $V(X)=0$ if $X$ is false.\n\nIn the scenario described:\n- The user presents a valid ID card, so $p$ is true.\n- The access attempt occurs after standard operating hours, so $q$ is true.\n- There is no special event, so $r$ is false.\n\nEvaluate $C_{1}$:\n- By the double negation law, $\\neg(\\neg p) \\equiv p$.\n- Since $p$ is true, $C_{1}$ is true, hence $V(C_{1})=1$.\n\nEvaluate $C_{2}$:\n- $C_{2} \\equiv (\\neg q) \\lor r$.\n- Since $q$ is true, $\\neg q$ is false; and since $r$ is false, the disjunction $(\\neg q) \\lor r$ is false.\n- Therefore, $C_{2}$ is false, hence $V(C_{2})=0$.\n\nCompute the score:\n$$S = 7 \\cdot V(C_{1}) + 4 \\cdot V(C_{2}) = 7 \\cdot 1 + 4 \\cdot 0 = 7.$$", "answer": "$$\\boxed{7}$$", "id": "1366520"}, {"introduction": "The principles of logic scale from simple propositions to the more expressive framework of predicate logic, which allows us to reason about entire collections of objects. This problem extends the Double Negation Law to a context involving quantifiers, such as \"for all\" ($\\forall$) and \"there exists\" ($\\exists$). By translating a natural language requirement for a server monitoring system into precise logical notation, you will explore the powerful interplay between quantifier negation and double negation, a concept vital for fields like software engineering, database theory, and formal verification [@problem_id:1366545].", "problem": "A system administrator is monitoring a large farm of servers. For security auditing purposes, a server is categorized as either 'compromised' or 'secure'. Let the domain of discourse be the set of all servers in the farm, and let $C(s)$ be the predicate \"server $s$ is compromised\".\n\nThe automated monitoring system is programmed to trigger a 'critical alert' for the entire farm if the following condition, expressed in natural language, is met: \"It is not the case that all servers in the farm are secure.\"\n\nWhich of the following statements in predicate logic is logically equivalent to the condition that triggers a 'critical alert'?\n\nA. $\\exists s, C(s)$\n\nB. $\\forall s, C(s)$\n\nC. $\\exists s, \\neg C(s)$\n\nD. $\\neg (\\exists s, C(s))$\n\nE. $\\forall s, \\neg C(s)$", "solution": "Let $C(s)$ denote \"server $s$ is compromised.\" Then \"server $s$ is secure\" is logically $\\neg C(s)$. The natural language condition \"It is not the case that all servers in the farm are secure\" translates to the negation of a universal statement about security:\n$$\n\\neg \\left(\\forall s,\\ \\neg C(s)\\right).\n$$\nApply the quantifier negation law $\\neg(\\forall s,\\ P(s)) \\equiv \\exists s,\\ \\neg P(s)$ with $P(s) \\equiv \\neg C(s)$:\n$$\n\\neg \\left(\\forall s,\\ \\neg C(s)\\right) \\equiv \\exists s,\\ \\neg(\\neg C(s)).\n$$\nUse double negation $\\neg(\\neg C(s)) \\equiv C(s)$ to obtain:\n$$\n\\exists s,\\ C(s).\n$$\nThus, the condition is logically equivalent to \"There exists a server that is compromised,\" which corresponds to option A. For completeness, note that:\n- Option B, $\\forall s,\\ C(s)$, states all servers are compromised, which is stronger than needed.\n- Option C, $\\exists s,\\ \\neg C(s)$, states there exists a secure server, the opposite direction.\n- Option D, $\\neg(\\exists s,\\ C(s))$, is equivalent to $\\forall s,\\ \\neg C(s)$, i.e., all secure, which is the negation of the alert condition.\n- Option E, $\\forall s,\\ \\neg C(s)$, is exactly \"all secure,\" again the negation of the alert condition.\nTherefore, the only logically equivalent statement is $\\exists s,\\ C(s)$.", "answer": "$$\\boxed{A}$$", "id": "1366545"}]}