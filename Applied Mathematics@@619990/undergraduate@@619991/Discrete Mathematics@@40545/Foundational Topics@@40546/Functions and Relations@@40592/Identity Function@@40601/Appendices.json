{"hands_on_practices": [{"introduction": "The concept of an inverse function is fundamentally linked to the identity function. When a function is composed with its inverse, the result is the identity function, effectively \"undoing\" the original operation. This practice uses the intuitive analogy of an encoder and decoder to give you hands-on experience in finding the inverse of a given function, a core skill in algebra and computer science [@problem_id:1375117].", "problem": "In a secure data transmission system, a numerical signal is processed through two stages. The first stage is an 'encoder' and the second is a 'decoder'. The encoder is a function $f: \\mathbb{R} \\to \\mathbb{R}$ that transforms an input real number $x$ according to the rule $f(x) = 8x^3 - 1$. The second stage is a decoder, which is another function $g: \\mathbb{R} \\to \\mathbb{R}$.\n\nFor the system to work correctly, applying the decoder function to the output of the encoder function must perfectly recover the original input signal. This requirement means that the composition of the two functions, $(g \\circ f)$, must be equivalent to the identity function on the set of real numbers. The identity function, denoted as $id_{\\mathbb{R}}$, is defined as $id_{\\mathbb{R}}(x) = x$ for all $x \\in \\mathbb{R}$.\n\nGiven the encoding function $f(x)$, determine the mathematical expression for the corresponding decoding function $g(x)$ that satisfies the condition $(g \\circ f)(x) = x$ for all real numbers $x$.", "solution": "We require a decoder function $g:\\mathbb{R}\\to\\mathbb{R}$ such that $(g\\circ f)(x)=x$ for all $x\\in\\mathbb{R}$, where $f(x)=8x^{3}-1$. This means $g$ must be the inverse of $f$.\n\nTo find the inverse, set $y=f(x)=8x^{3}-1$ and solve for $x$ in terms of $y$:\n$$\ny+1=8x^{3},\n$$\n$$\n\\frac{y+1}{8}=x^{3},\n$$\n$$\nx=\\sqrt[3]{\\frac{y+1}{8}}.\n$$\nThus the inverse function is $g(y)=\\sqrt[3]{\\frac{y+1}{8}}$. Renaming the input variable, we write\n$$\ng(x)=\\sqrt[3]{\\frac{x+1}{8}}.\n$$\nVerification:\n$$\n(g\\circ f)(x)=g(8x^{3}-1)=\\sqrt[3]{\\frac{(8x^{3}-1)+1}{8}}=\\sqrt[3]{\\frac{8x^{3}}{8}}=\\sqrt[3]{x^{3}}=x,\n$$\nwhich holds for all real $x$. Therefore, this $g$ satisfies the required condition.", "answer": "$$\\boxed{\\sqrt[3]{\\frac{x+1}{8}}}$$", "id": "1375117"}, {"introduction": "The identity function acts as a neutral element in the world of function composition, much like the number $1$ in multiplication or $0$ in addition. Inserting an identity function into a chain of composed functions will not change the final output, a property that is useful for theoretical proofs and practical applications like software debugging. This problem models a data-processing pipeline to help you visualize how the identity function fits into a sequence of operations while respecting the domains and codomains of each step [@problem_id:1375056].", "problem": "A data processing system operates on three types of data: integers (denoted by the set $\\mathbb{Z}$), strings (denoted by $S$), and booleans (denoted by $B$). The system uses a set of predefined elementary transformation functions:\n- $\\text{encode}: \\mathbb{Z} \\to S$, which converts an integer into its string representation.\n- $\\text{validate}: S \\to B$, which returns `true` if the input string is a valid token and `false` otherwise.\n- $\\text{quantify}: B \\to \\mathbb{Z}$, which maps `true` to the integer `1` and `false` to the integer `0`.\n\nA standard processing pipeline, named `pipeline_A`, is defined as the composition of these functions to transform an initial integer input. The pipeline is defined as $\\text{pipeline\\_A} = \\text{quantify} \\circ \\text{validate} \\circ \\text{encode}$.\n\nFor debugging and logging purposes, the system also includes three identity functions, one for each data type:\n- $\\text{pass\\_Z}: \\mathbb{Z} \\to \\mathbb{Z}$, where $\\text{pass\\_Z}(x) = x$ for any integer $x$.\n- $\\text{pass\\_S}: S \\to S$, where $\\text{pass\\_S}(x) = x$ for any string $x$.\n- $\\text{pass\\_B}: B \\to B$, where $\\text{pass\\_B}(x) = x$ for any boolean $x$.\n\nA new requirement is introduced: a revised pipeline, `pipeline_B`, must be created. This new pipeline must perform the exact same transformations as `pipeline_A`, but with an added \"check-pointing\" step. This check-pointing step must occur immediately after the `validate` function has produced its boolean output and before any subsequent processing. The check-pointing is achieved by passing the data through the appropriate identity function for that data type.\n\nWhich of the following expressions correctly represents `pipeline_B`?\n\nA. $\\text{quantify} \\circ \\text{validate} \\circ \\text{pass\\_S} \\circ \\text{encode}$\n\nB. $\\text{pass\\_Z} \\circ \\text{quantify} \\circ \\text{validate} \\circ \\text{encode}$\n\nC. $\\text{quantify} \\circ \\text{pass\\_B} \\circ \\text{validate} \\circ \\text{encode}$\n\nD. $\\text{quantify} \\circ \\text{validate} \\circ \\text{encode} \\circ \\text{pass\\_Z}$\n\nE. $\\text{pass\\_B} \\circ \\text{quantify} \\circ \\text{validate} \\circ \\text{encode}$", "solution": "We are given three elementary functions with types:\n- $\\,\\mathrm{encode}:\\mathbb{Z}\\to S$,\n- $\\,\\mathrm{validate}:S\\to B$,\n- $\\,\\mathrm{quantify}:B\\to \\mathbb{Z}$.\n\nFunction composition is defined so that for $f:Y\\to Z$ and $g:X\\to Y$, one has $(f\\circ g)(x)=f(g(x))$.\n\nThe standard pipeline is\n$$\n\\mathrm{pipeline\\_A}=\\mathrm{quantify}\\circ \\mathrm{validate}\\circ \\mathrm{encode}:\\mathbb{Z}\\to \\mathbb{Z},\n$$\nwith the type flow $\\mathbb{Z}\\xrightarrow{\\mathrm{encode}}S\\xrightarrow{\\mathrm{validate}}B\\xrightarrow{\\mathrm{quantify}}\\mathbb{Z}$.\n\nIdentity functions are:\n- $\\mathrm{pass\\_Z}:\\mathbb{Z}\\to\\mathbb{Z}$ with $\\mathrm{pass\\_Z}(z)=z$ for all $z\\in\\mathbb{Z}$,\n- $\\mathrm{pass\\_S}:S\\to S$ with $\\mathrm{pass\\_S}(s)=s$ for all $s\\in S$,\n- $\\mathrm{pass\\_B}:B\\to B$ with $\\mathrm{pass\\_B}(b)=b$ for all $b\\in B$.\n\nThe requirement is to insert a check-point immediately after $\\mathrm{validate}$ produces a boolean and before any subsequent processing. Since $\\mathrm{validate}$ outputs in $B$, the appropriate identity is $\\mathrm{pass\\_B}:B\\to B$. Therefore, the revised pipeline must be\n$$\n\\mathrm{pipeline\\_B}=\\mathrm{quantify}\\circ \\mathrm{pass\\_B}\\circ \\mathrm{validate}\\circ \\mathrm{encode}.\n$$\n\nTo verify correctness and equivalence with $\\mathrm{pipeline\\_A}$, for any $x\\in\\mathbb{Z}$,\n$$\n\\mathrm{pipeline\\_B}(x)\n=\\mathrm{quantify}\\big(\\mathrm{pass\\_B}(\\mathrm{validate}(\\mathrm{encode}(x)))\\big)\n=\\mathrm{quantify}\\big(\\mathrm{validate}(\\mathrm{encode}(x))\\big)\n=\\mathrm{pipeline\\_A}(x),\n$$\nusing the identity law $\\mathrm{pass\\_B}(b)=b$ for all $b\\in B$.\n\nNow match with the options:\n- A: $\\mathrm{quantify}\\circ \\mathrm{validate}\\circ \\mathrm{pass\\_S}\\circ \\mathrm{encode}$ inserts $\\mathrm{pass\\_S}$ between $\\mathrm{encode}$ and $\\mathrm{validate}$, not after $\\mathrm{validate}$.\n- B: $\\mathrm{pass\\_Z}\\circ \\mathrm{quantify}\\circ \\mathrm{validate}\\circ \\mathrm{encode}$ inserts after $\\mathrm{quantify}$, not after $\\mathrm{validate}$.\n- C: $\\mathrm{quantify}\\circ \\mathrm{pass\\_B}\\circ \\mathrm{validate}\\circ \\mathrm{encode}$ inserts $\\mathrm{pass\\_B}$ exactly after $\\mathrm{validate}$ and before $\\mathrm{quantify}$, with correct types.\n- D: $\\mathrm{quantify}\\circ \\mathrm{validate}\\circ \\mathrm{encode}\\circ \\mathrm{pass\\_Z}$ inserts before $\\mathrm{encode}$, not after $\\mathrm{validate}$.\n- E: $\\mathrm{pass\\_B}\\circ \\mathrm{quantify}\\circ \\mathrm{validate}\\circ \\mathrm{encode}$ is ill-typed since $\\mathrm{quantify}$ outputs in $\\mathbb{Z}$ but $\\mathrm{pass\\_B}$ expects input in $B$.\n\nTherefore, the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1375056"}, {"introduction": "While we often find a distinct inverse for a function, some special functions act as their own inverse; applying the function twice returns you to the original input. Such a function is called an involution, and its composition with itself, $f \\circ f$, results in the identity function. This exercise challenges you to examine functions on a discrete set to distinguish between an involution and the identity function itself, reinforcing the precise definition and unique properties of the identity map [@problem_id:1375094].", "problem": "Let $S = \\{a, b, c\\}$ be a set. A function $f: S \\to S$ is called an *involution* if it is its own inverse. This means that for every element $x \\in S$, the composition of the function with itself returns the original element, i.e., $f(f(x)) = x$.\n\nThe identity function on $S$, denoted by $\\text{id}_S$, is defined as $\\text{id}_S(x) = x$ for all $x \\in S$. The identity function is one example of an involution.\n\nConsider the following functions from $S$ to $S$, each defined by listing its set of ordered pairs $(x, y)$ where $y = f(x)$. Which of these functions is an involution but is **not** the identity function?\n\nA. $f_A = \\{(a, a), (b, b), (c, c)\\}$\n\nB. $f_B = \\{(a, b), (b, c), (c, a)\\}$\n\nC. $f_C = \\{(a, c), (b, b), (c, a)\\}$\n\nD. $f_D = \\{(a, b), (b, b), (c, b)\\}$", "solution": "An involution on $S=\\{a,b,c\\}$ satisfies $f(f(x))=x$ for every $x\\in S$. We check each option by computing $f(f(x))$ for all $x$ and also verify whether the function equals the identity.\n\n- For A: $f_{A}=\\{(a,a),(b,b),(c,c)\\}$ gives $f_{A}(x)=x$ for all $x$, so $f_{A}(f_{A}(x))=x$ for all $x$. Thus $f_{A}$ is an involution, but it is exactly the identity, so it does not meet the “not the identity” requirement.\n\n- For B: $f_{B}(a)=b$, $f_{B}(b)=c$, $f_{B}(c)=a$. Then $f_{B}(f_{B}(a))=f_{B}(b)=c\\neq a$, so $f_{B}$ is not an involution.\n\n- For C: $f_{C}(a)=c$, $f_{C}(b)=b$, $f_{C}(c)=a$. Then $f_{C}(f_{C}(a))=f_{C}(c)=a$, $f_{C}(f_{C}(b))=f_{C}(b)=b$, and $f_{C}(f_{C}(c))=f_{C}(a)=c$. Hence $f_{C}(f_{C}(x))=x$ for all $x$, so $f_{C}$ is an involution. Moreover, $f_{C}(a)=c\\neq a$, so it is not the identity.\n\n- For D: $f_{D}(a)=b$, $f_{D}(b)=b$, $f_{D}(c)=b$. Then $f_{D}(f_{D}(a))=f_{D}(b)=b\\neq a$, so $f_{D}$ is not an involution.\n\nTherefore, the only function that is an involution but not the identity is option C.", "answer": "$$\\boxed{C}$$", "id": "1375094"}]}