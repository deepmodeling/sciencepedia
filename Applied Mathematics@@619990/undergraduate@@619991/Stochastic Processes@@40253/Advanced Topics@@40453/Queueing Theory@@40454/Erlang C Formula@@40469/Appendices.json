{"hands_on_practices": [{"introduction": "To begin our hands-on exploration of the Erlang C formula, we will start with a foundational application. This first problem situates us in a modern, relatable context—a university rendering farm—which can be modeled as a classic multi-server queueing system. Your task is to extract the key system parameters from the scenario and use them to calculate the probability that a new job must wait, a direct application of the Erlang C formula that solidifies the core concepts [@problem_id:1299667].", "problem": "A university's Digital Media Lab operates a rendering farm for students in animation and visual effects courses. The farm consists of 5 identical high-performance computing nodes. Job requests for rendering are submitted to a central system. Assume that job submissions follow a Poisson process with an average arrival rate of 12 jobs per hour. The time required for a node to complete a single rendering job is exponentially distributed with an average processing time of 20 minutes. If a job is submitted and all 5 nodes are already busy, the job is placed in a queue and will be processed on a first-come, first-served basis as a node becomes available. The queue can accommodate a very large number of waiting jobs.\n\nCalculate the probability that a newly submitted rendering job will have to wait in the queue before its processing begins. Round your final answer to four significant figures.", "solution": "This scenario describes a classic multi-server queuing system. The problem asks for the probability that an arriving job finds all servers busy and must therefore wait in the queue. The arrivals are described by a Poisson process and the service times are exponentially distributed, which corresponds to an M/M/c queuing model. In this context, the probability of queuing is given by the Erlang C formula.\n\nFirst, let's define the parameters of the system from the problem statement.\nThe number of servers (computing nodes) is $c = 5$.\nThe average arrival rate of jobs is $\\lambda = 12$ jobs per hour.\nThe average service time for a job is 20 minutes. We must convert this to hours to be consistent with the unit of $\\lambda$.\nAverage service time = $20 \\text{ minutes} \\times \\frac{1 \\text{ hour}}{60 \\text{ minutes}} = \\frac{1}{3}$ hours.\nThe service rate per server, $\\mu$, is the reciprocal of the average service time:\n$$ \\mu = \\frac{1}{1/3 \\text{ hours/job}} = 3 \\text{ jobs/hour} $$\nThe offered load, or traffic intensity, $A$, is a dimensionless quantity defined as the ratio of the total arrival rate to the service rate of a single server.\n$$ A = \\frac{\\lambda}{\\mu} = \\frac{12 \\text{ jobs/hour}}{3 \\text{ jobs/hour}} = 4 $$\nThe quantity $A$ is typically measured in Erlangs. For a stable queue where the number of jobs in the queue does not grow infinitely, the utilization factor $\\rho = A/c$ must be less than 1.\n$$ \\rho = \\frac{A}{c} = \\frac{4}{5} = 0.8 $$\nSince $\\rho = 0.8  1$, the system is stable.\n\nThe probability that an arriving job has to wait in the queue, $P_{\\text{queue}}$, is given by the Erlang C formula, denoted $C(c, A)$:\n$$ P_{\\text{queue}} = C(c, A) = \\frac{\\frac{A^c}{c!} \\frac{c}{c-A}}{\\sum_{k=0}^{c-1} \\frac{A^k}{k!} + \\frac{A^c}{c!} \\frac{c}{c-A}} $$\nA more convenient form for calculation is:\n$$ C(c, A) = \\frac{\\frac{A^c}{c!(1 - \\rho)}}{\\sum_{k=0}^{c-1} \\frac{A^k}{k!} + \\frac{A^c}{c!(1 - \\rho)}} $$\nLet's calculate the two main components of this formula with $c=5$ and $A=4$.\n\nFirst, the term appearing in the numerator and the denominator:\n$$ \\frac{A^c}{c!(1 - \\rho)} = \\frac{4^5}{5!(1 - 0.8)} = \\frac{1024}{120 \\times 0.2} = \\frac{1024}{24} = \\frac{128}{3} \\approx 42.6667 $$\nNext, the summation in the denominator:\n$$ \\sum_{k=0}^{c-1} \\frac{A^k}{k!} = \\sum_{k=0}^{4} \\frac{4^k}{k!} = \\frac{4^0}{0!} + \\frac{4^1}{1!} + \\frac{4^2}{2!} + \\frac{4^3}{3!} + \\frac{4^4}{4!} $$\nCalculating each term:\n$$ \\frac{4^0}{0!} = \\frac{1}{1} = 1 $$\n$$ \\frac{4^1}{1!} = \\frac{4}{1} = 4 $$\n$$ \\frac{4^2}{2!} = \\frac{16}{2} = 8 $$\n$$ \\frac{4^3}{3!} = \\frac{64}{6} = \\frac{32}{3} \\approx 10.6667 $$\n$$ \\frac{4^4}{4!} = \\frac{256}{24} = \\frac{32}{3} \\approx 10.6667 $$\nSumming these values:\n$$ \\sum_{k=0}^{4} \\frac{4^k}{k!} = 1 + 4 + 8 + \\frac{32}{3} + \\frac{32}{3} = 13 + \\frac{64}{3} = \\frac{39+64}{3} = \\frac{103}{3} \\approx 34.3333 $$\nNow we can substitute these results back into the Erlang C formula:\n$$ C(5, 4) = \\frac{\\frac{128}{3}}{\\frac{103}{3} + \\frac{128}{3}} = \\frac{\\frac{128}{3}}{\\frac{103 + 128}{3}} = \\frac{128}{231} $$\nFinally, we compute the numerical value and round it to four significant figures:\n$$ P_{\\text{queue}} = \\frac{128}{231} \\approx 0.5541125541... $$\nRounding to four significant figures gives 0.5541.", "answer": "$$\\boxed{0.5541}$$", "id": "1299667"}, {"introduction": "Having mastered the basic calculation, we now move to a more practical and common use case: system design and capacity planning. In this exercise, you will step into the role of a manager designing a call center and needing to meet a specific service level objective. Instead of calculating a probability from a fixed system, you will determine the minimum number of servers (agents) required to keep the probability of waiting below a given threshold, demonstrating the formula's power in making crucial operational decisions [@problem_id:1334592].", "problem": "A software company, Innovate Solutions, is setting up a new call center to provide technical support for its main product. Based on market analysis, customer calls are expected to arrive following a Poisson process, with an average rate of 40 calls per hour. The company plans to hire a team of technically skilled agents. The time required for an agent to handle a single customer call is modeled by an exponential distribution, with an average duration of 6 minutes. All agents are assumed to have identical performance.\n\nThe system can be modeled as an M/M/c queue, where arrivals are Markovian (Poisson), service times are Markovian (exponential), and there are `c` parallel identical servers (the agents). Calls are handled in the order they arrive. If all agents are busy, new callers are placed in a single queue and wait on hold.\n\nThe management at Innovate Solutions has established a service level objective: the long-run probability that a new caller has to wait on hold before being connected to an agent must be strictly less than 5%.\n\nWhat is the minimum integer number of agents, $c$, that the company must hire to meet this service level objective?", "solution": "Arrivals follow a Poisson process with rate $\\lambda = 40$ per hour. Each agent’s service time is exponential with mean $6$ minutes. Converting to hours, $6 \\text{ minutes} = \\frac{6}{60} = \\frac{1}{10}$ hour, so the per-agent service rate is\n$$\n\\mu = \\frac{1}{\\frac{1}{10}} = 10 \\text{ per hour}.\n$$\nThe offered load (Erlangs) is\n$$\nA = \\frac{\\lambda}{\\mu} = \\frac{40}{10} = 4.\n$$\nFor an M/M/c queue, stability requires $\\rho = \\frac{\\lambda}{c\\mu} = \\frac{A}{c}  1$, hence $c > A$, so $c \\geq 5$.\n\nThe long-run probability that an arrival must wait (all servers busy) is given by the Erlang C formula:\n$$\nP_{\\text{wait}}(c) = \\frac{\\frac{A^{c}}{c!}\\frac{c}{c-A}}{\\sum_{n=0}^{c-1}\\frac{A^{n}}{n!} + \\frac{A^{c}}{c!}\\frac{c}{c-A}}.\n$$\nWith $A=4$, we compute $P_{\\text{wait}}(c)$ for $c = 5, 6, 7, 8, 9$ and compare to $0.05$.\n\nFor $c=5$:\n$$\n\\sum_{n=0}^{4}\\frac{4^{n}}{n!} = 1+4+8+\\frac{64}{6}+\\frac{256}{24} = 13+\\frac{64}{3} = \\frac{103}{3},\n$$\n$$\n\\frac{4^{5}}{5!}\\frac{5}{5-4} = \\frac{1024}{120}\\cdot 5 = \\frac{128}{3}.\n$$\nThus the denominator is $\\frac{103}{3}+\\frac{128}{3} = 77$, and\n$$\nP_{\\text{wait}}(5) = \\frac{\\frac{128}{3}}{77} = \\frac{128}{231} > 0.05.\n$$\n\nFor $c=6$:\n$$\n\\sum_{n=0}^{5}\\frac{4^{n}}{n!} = \\frac{103}{3}+\\frac{1024}{120} = \\frac{643}{15},\\quad \\frac{4^{6}}{6!}\\frac{6}{6-4} = \\frac{4096}{720}\\cdot 3 = \\frac{256}{15},\n$$\nso\n$$\nP_{\\text{wait}}(6) = \\frac{\\frac{256}{15}}{\\frac{643}{15}+\\frac{256}{15}} = \\frac{256}{899} > 0.05.\n$$\n\nFor $c=7$:\n$$\n\\sum_{n=0}^{6}\\frac{4^{n}}{n!} = \\frac{643}{15}+\\frac{4096}{720} = \\frac{2185}{45},\\quad \\frac{4^{7}}{7!}\\frac{7}{7-4} = \\frac{16384}{5040}\\cdot \\frac{7}{3} = \\frac{1024}{135},\n$$\nso\n$$\nP_{\\text{wait}}(7) = \\frac{\\frac{1024}{135}}{\\frac{2185}{45}+\\frac{1024}{135}} = \\frac{1024}{7579} > 0.05.\n$$\n\nFor $c=8$:\n$$\n\\sum_{n=0}^{7}\\frac{4^{n}}{n!} = \\frac{2185}{45}+\\frac{16384}{5040} = \\frac{16319}{315},\\quad \\frac{4^{8}}{8!}\\frac{8}{8-4} = \\frac{65536}{40320}\\cdot 2 = \\frac{1024}{315},\n$$\nso\n$$\nP_{\\text{wait}}(8) = \\frac{\\frac{1024}{315}}{\\frac{16319}{315}+\\frac{1024}{315}} = \\frac{1024}{17343}.\n$$\nTo compare with $0.05 = \\frac{1}{20}$, note that\n$$\n\\frac{1024}{17343} > \\frac{1}{20} \\quad \\text{since} \\quad 1024 \\cdot 20 = 20480 > 17343,\n$$\nhence $P_{\\text{wait}}(8) > 0.05$.\n\nFor $c=9$:\n$$\n\\sum_{n=0}^{8}\\frac{4^{n}}{n!} = \\frac{16319}{315}+\\frac{65536}{40320} = \\frac{16831}{315},\\quad \\frac{4^{9}}{9!}\\frac{9}{9-4} = \\frac{262144}{362880}\\cdot \\frac{9}{5} = \\frac{2048}{1575},\n$$\nso\n$$\nP_{\\text{wait}}(9) = \\frac{\\frac{2048}{1575}}{\\frac{16831}{315}+\\frac{2048}{1575}} = \\frac{2048}{86203}.\n$$\nCompare with $0.05 = \\frac{1}{20}$:\n$$\n\\frac{2048}{86203}  \\frac{1}{20} \\quad \\text{since} \\quad 2048 \\cdot 20 = 40960  86203.\n$$\nTherefore $P_{\\text{wait}}(9)  0.05$, while $c=8$ does not meet the objective. Hence the minimum integer $c$ is $9$.", "answer": "$$\\boxed{9}$$", "id": "1334592"}, {"introduction": "Our final practice takes us into the realm of system analysis and performance monitoring by posing an inverse problem. In many real-world situations, we can easily observe outcomes (like how many customers had to wait) but not the underlying parameters like traffic intensity. This advanced problem challenges you to use a known probability of delay—estimated from empirical data—to work backward and calculate the offered traffic load, $A$ [@problem_id:1299669]. This technique is invaluable for understanding and diagnosing the performance of existing queueing systems.", "problem": "A small cloud-native company operates a customer support chat system staffed by two technicians. The system is designed such that incoming support requests are assigned to a technician if one is available; otherwise, the request is placed into a single queue to be handled by the next available technician. Analysis of historical data has established that the arrival of requests follows a Poisson process and that the time taken by a technician to resolve a request is exponentially distributed. The system can thus be accurately modeled as an M/M/2 queueing system.\n\nFor capacity planning purposes, the company wishes to estimate the offered traffic load. However, the monitoring system only records a binary outcome for each arriving request: whether the request was handled immediately or had to wait in the queue. Over a representative one-week period, a total of $N=7,500$ requests were received. Of these, $K=975$ requests had to wait in the queue before being assigned to a technician.\n\nAssuming the system is in a stable, steady-state condition, calculate a point estimate for the offered traffic load $A$, measured in Erlangs. Round your final answer to three significant figures.", "solution": "The arrival process is Poisson, so by PASTA the observed fraction of arrivals that wait equals the steady-state probability of delay, which for an M/M/2 queue is the Erlang C delay probability. Let $A = \\lambda/\\mu$ be the offered load (in Erlangs) and let $p$ denote the probability an arrival waits. For $c=2$ servers, the Erlang C formula gives\n$$\np = \\frac{\\frac{A^{2}}{2!}\\frac{2}{2-A}}{\\sum_{n=0}^{1}\\frac{A^{n}}{n!}+\\frac{A^{2}}{2!}\\frac{2}{2-A}} = \\frac{\\frac{A^{2}}{2-A}}{1+A+\\frac{A^{2}}{2-A}} = \\frac{A^{2}}{(1+A)(2-A)+A^{2}}.\n$$\nSince $(1+A)(2-A)+A^{2} = 2+A$, this simplifies to\n$$\np = \\frac{A^{2}}{2+A}.\n$$\nEquating this to the empirical proportion $p = \\frac{K}{N}$ yields\n$$\n\\frac{A^{2}}{2+A} = \\frac{K}{N}\\quad\\Longrightarrow\\quad A^{2}-\\frac{K}{N}A - 2\\frac{K}{N} = 0.\n$$\nSolving the quadratic for $A$ and taking the positive root (requiring $A2$ for stability) gives\n$$\nA = \\frac{\\frac{K}{N}+\\sqrt{\\left(\\frac{K}{N}\\right)^{2}+8\\frac{K}{N}}}{2}.\n$$\nWith $K=975$ and $N=7500$, we have $\\frac{K}{N} = 0.13$, so\n$$\nA = \\frac{0.13+\\sqrt{0.13^{2}+8\\cdot 0.13}}{2} = \\frac{0.13+\\sqrt{1.0569}}{2}\\approx\\frac{0.13+1.0280565}{2}\\approx 0.579028.\n$$\nRounded to three significant figures, the point estimate is $0.579$ Erlangs.", "answer": "$$\\boxed{0.579}$$", "id": "1299669"}]}