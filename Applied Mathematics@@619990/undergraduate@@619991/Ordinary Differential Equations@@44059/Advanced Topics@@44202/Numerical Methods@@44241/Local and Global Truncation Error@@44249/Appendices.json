{"hands_on_practices": [{"introduction": "The first step in understanding the accuracy of numerical methods is to quantify the error introduced in a single step. This is known as the local truncation error (LTE). This exercise provides hands-on practice in calculating the principal term of the LTE for the widely used Forward Euler method when applied to the logistic population model, a cornerstone of mathematical biology. By working through this problem, you will master the fundamental technique of using Taylor series to analyze how well a numerical step approximates the true solution of a differential equation [@problem_id:2185071].", "problem": "The logistic model for population growth is a common example in the study of Ordinary Differential Equations (ODEs). It is described by the equation:\n$$\n\\frac{dP(t)}{dt} = r P(t) \\left(1 - \\frac{P(t)}{K}\\right)\n$$\nwhere $P(t)$ is the population at time $t$, $r$ is the intrinsic growth rate, and $K$ is the carrying capacity.\n\nConsider approximating the solution to this ODE using the Forward Euler method, which advances the solution from time $t_n$ to $t_{n+1} = t_n + h$ using the formula $P_{n+1} = P_n + h f(t_n, P_n)$, where $h$ is the step size and $f(t, P) = \\frac{dP}{dt}$.\n\nThe local truncation error at step $n+1$ is defined as the error incurred in a single step, assuming the value at the beginning of the step, $P_n$, is exact (i.e., $P_n = P(t_n)$). It is given by $T_{n+1} = P(t_{n+1}) - P_{n+1}$. The principal term of this error is the lowest-order non-zero term in its Taylor series expansion with respect to $h$.\n\nDetermine the principal term of the local truncation error for the Forward Euler method applied to the logistic equation. Express your answer in terms of the step size $h$, the population $P_n$ at step $n$, and the model parameters $r$ and $K$.", "solution": "We are given the logistic ODE\n$$\n\\frac{dP}{dt} = f(P) = r P \\left(1 - \\frac{P}{K}\\right),\n$$\nand the Forward Euler update\n$$\nP_{n+1} = P_{n} + h f(P_{n}),\n$$\nwith the local truncation error defined as\n$$\nT_{n+1} = P(t_{n+1}) - P_{n+1},\n$$\nassuming $P_{n} = P(t_{n})$.\n\nUsing the Taylor expansion of the exact solution about $t_{n}$,\n$$\nP(t_{n+1}) = P(t_{n}) + h P'(t_{n}) + \\frac{h^{2}}{2} P''(t_{n}) + \\mathcal{O}(h^{3}),\n$$\nand substituting $P_{n+1} = P(t_{n}) + h f(P(t_{n})) = P(t_{n}) + h P'(t_{n})$, we obtain\n$$\nT_{n+1} = \\frac{h^{2}}{2} P''(t_{n}) + \\mathcal{O}(h^{3}).\n$$\nThus, the principal term is $\\frac{h^{2}}{2} P''(t_{n})$. It remains to compute $P''(t_{n})$ for the logistic equation.\n\nSince $P'(t) = f(P(t))$ with no explicit $t$-dependence, by the chain rule,\n$$\nP''(t) = \\frac{d}{dt} f(P(t)) = f'(P(t))\\,P'(t).\n$$\nCompute $f'(P)$:\n$$\nf(P) = r P - \\frac{r}{K} P^{2} \\quad \\Rightarrow \\quad f'(P) = r - \\frac{2r}{K} P = r\\left(1 - \\frac{2P}{K}\\right).\n$$\nTherefore,\n$$\nP''(t) = r\\left(1 - \\frac{2P(t)}{K}\\right)\\, \\left[r P(t)\\left(1 - \\frac{P(t)}{K}\\right)\\right]\n= r^{2} P(t)\\left(1 - \\frac{P(t)}{K}\\right)\\left(1 - \\frac{2P(t)}{K}\\right).\n$$\nEvaluating at $t_{n}$ where $P(t_{n}) = P_{n}$ gives\n$$\nP''(t_{n}) = r^{2} P_{n}\\left(1 - \\frac{P_{n}}{K}\\right)\\left(1 - \\frac{2P_{n}}{K}\\right).\n$$\nHence, the principal term of the local truncation error is\n$$\n\\frac{h^{2}}{2}\\, r^{2} P_{n}\\left(1 - \\frac{P_{n}}{K}\\right)\\left(1 - \\frac{2P_{n}}{K}\\right).\n$$", "answer": "$$\\boxed{\\frac{h^{2}}{2}\\, r^{2} P_{n}\\left(1 - \\frac{P_{n}}{K}\\right)\\left(1 - \\frac{2P_{n}}{K}\\right)}$$", "id": "2185071"}, {"introduction": "After mastering the mechanics of calculating local error, it's vital to build a strong conceptual foundation. This practice confronts a common yet subtle misconception about where numerical error originates [@problem_id:2185054]. By analyzing a seemingly simple case, $y'(t)=t$, you will learn that a numerical method's accuracy depends on how well it approximates the *true solution's* behavior (which may be complex), not just the form of the derivative function $f(t,y)$. This insight is crucial for developing an intuition for why even the simplest ODEs can pose challenges for numerical solvers.", "problem": "A student is analyzing the numerical solution of the ordinary differential equation (ODE) $y'(t) = t$ with an initial condition $y(t_0) = y_0$. The student uses Euler's method, where the numerical solution is advanced from step $n$ to $n+1$ using the formula $y_{n+1} = y_n + h f(t_n, y_n)$, where $h$ is the step size and $f(t,y) = y'(t)$. For this specific ODE, the update rule becomes $y_{n+1} = y_n + h t_n$.\n\nThe student asserts the following: \"The local truncation error, which is the error introduced in a single step, can be made exactly zero for this particular ODE. Since the update rule $y_n + h t_n$ is purely linear in $t_n$, and the function $f(t,y)=t$ is also linear, there is no higher-order behavior to approximate. Therefore, the approximation must be exact, and the local truncation error is zero.\"\n\nThis reasoning is flawed. Which of the following statements provides the most accurate and fundamental explanation for why the student's claim is incorrect?\n\nA. The student is confusing local truncation error with global truncation error. The global error, which accumulates over many steps, is never zero, but the local error for this ODE is indeed zero at each step.\n\nB. The claim is incorrect because the local truncation error includes contributions from floating-point arithmetic. Even if the theoretical error were zero, computational round-off errors would make it non-zero in practice.\n\nC. The local truncation error for Euler's method is only zero if the true solution to the ODE is a linear function of $t$. For the ODE $y'(t)=t$, the true solution is a quadratic function.\n\nD. Any numerical method of a finite order, such as the first-order Euler's method, will always have a non-zero local truncation error for any ODE where the solution is not a constant.", "solution": "We analyze the local truncation error (LTE) of Euler’s method for the ODE $y'(t)=t$, $y(t_{0})=y_{0}$.\n\n1) Exact solution and exact increment over one step:\nIntegrating $y'(t)=t$ gives the exact solution\n$$\ny(t)=y_{0}+\\frac{1}{2}\\left(t^{2}-t_{0}^{2}\\right).\n$$\nOver a single step from $t_{n}$ to $t_{n+1}=t_{n}+h$, the exact increment is\n$$\ny(t_{n+1})-y(t_{n})=\\frac{1}{2}\\left((t_{n}+h)^{2}-t_{n}^{2}\\right)=t_{n}h+\\frac{1}{2}h^{2}.\n$$\n\n2) Euler’s method increment:\nEuler’s method gives\n$$\ny_{n+1}=y_{n}+h f(t_{n},y_{n})=y_{n}+h t_{n}.\n$$\nIf we start from the exact value $y(t_{n})$, the method’s one-step increment is $h t_{n}$.\n\n3) Local truncation error:\nUsing the standard (unscaled) defect definition,\n$$\n\\text{LTE}_{n+1}=y(t_{n+1})-y(t_{n})-h f(t_{n},y(t_{n}))=\\left(t_{n}h+\\frac{1}{2}h^{2}\\right)-h t_{n}=\\frac{1}{2}h^{2}\\neq 0.\n$$\nEquivalently, using Taylor’s theorem about $t_{n}$,\n$$\ny(t_{n}+h)=y(t_{n})+h y'(t_{n})+\\frac{1}{2}h^{2}y''(\\xi_{n})\n$$\nfor some $\\xi_{n}\\in[t_{n},t_{n}+h]$. Here $y'(t)=t$ and $y''(t)=1$, so the remainder term is exactly $\\frac{1}{2}h^{2}$. Thus Euler’s method, which matches only the first-order term $h y'(t_{n})$, has a non-zero LTE of order $h^{2}$.\n\n4) Conceptual reason the student’s claim is incorrect:\nEuler’s method has zero LTE only when the exact solution is linear in $t$ so that $y''\\equiv 0$ and the second-order term vanishes. For $y'(t)=t$, the exact solution $y(t)$ is quadratic in $t$, with $y''(t)=1\\neq 0$, so the local truncation error cannot be zero.\n\nTherefore, the most accurate and fundamental explanation among the choices is that Euler’s LTE is zero only if the true solution is linear in $t$, which it is not for $y'(t)=t$. Hence option C is correct. The other options are incorrect: A falsely asserts the LTE is zero here; B confuses theoretical truncation error with round-off; D is too strong since higher-order methods (e.g., trapezoidal rule) can be exact for certain non-constant solutions such as this case.", "answer": "$$\\boxed{C}$$", "id": "2185054"}, {"introduction": "While local error measures inaccuracy at each step, the ultimate concern in any simulation is the global error—the total accumulated error at the end of the computation. This problem bridges the gap between local and global error by exploring their practical relationship [@problem_id:2185101]. It demonstrates how the 'order' of a method, which is determined by its local truncation error, dictates how the global error scales with the step size $h$. Understanding this scaling law, $E \\approx C h^p$, is essential for predicting how changes in step size will affect the accuracy and efficiency of your numerical solutions.", "problem": "A numerical analyst is studying the accuracy of a stable numerical method for solving an ordinary differential equation over a fixed interval. The method is known to be a second-order method. In a first computational experiment, using a constant step size of $h$, the analyst computes the solution and finds that the global truncation error at the end of the interval is approximately $\\epsilon$.\n\nIn a second experiment, the analyst decides to change the step size to $2h$ while keeping all other parameters and the differential equation the same. Assuming the method remains stable and the relationship between global error and step size holds in this range, what is the estimated global truncation error for this second experiment?\n\nA. $\\frac{\\epsilon}{4}$\n\nB. $\\frac{\\epsilon}{2}$\n\nC. $\\epsilon$\n\nD. $2\\epsilon$\n\nE. $4\\epsilon$", "solution": "A stable method of order $p$ has a global truncation error at a fixed final time that scales as $E(h)=C h^{p}$ for some constant $C$ independent of $h$, provided the method remains stable and the asymptotic error relation holds.\n\nGiven that the method is second-order, $p=2$. For step size $h$, the observed global error is $\\epsilon$, so\n$$\n\\epsilon = C h^{2}.\n$$\nIf the step size is changed to $2h$, the new global error is\n$$\nE(2h) = C (2h)^{2} = 4 C h^{2} = 4 \\epsilon.\n$$\nTherefore, doubling the step size multiplies the global error by $4$, which corresponds to option E.", "answer": "$$\\boxed{E}$$", "id": "2185101"}]}