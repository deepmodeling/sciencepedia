{"hands_on_practices": [{"introduction": "The phenomenon of stochastic resonance hinges on the synchronization of two timescales: the period of an external drive and the intrinsic, noise-induced switching time of the system. This intrinsic timescale is quantified by the Kramers escape rate, which describes how frequently a particle, agitated by noise, will hop over a potential barrier. This first exercise [@problem_id:3078238] provides direct practice in calculating this crucial rate for the canonical double-well potential, connecting the abstract formula to concrete properties of the system like barrier height and local curvature.", "problem": "Consider the overdamped one-dimensional stochastic differential equation (SDE)\n$$\n\\mathrm{d}x_{t} = -U'(x_{t})\\,\\mathrm{d}t + \\sqrt{2D}\\,\\mathrm{d}W_{t},\n$$\nwhere $W_{t}$ is a standard Wiener process, $D>0$ is the noise intensity, and the double-well potential is\n$$\nU(x) = \\frac{1}{4}x^{4} - \\frac{1}{2}x^{2}.\n$$\nIn the small-noise regime, the interwell transition rate $k(D)$ governs the timescale over which trajectories escape from a well at the local minimum $x_{m}$ to cross the saddle at $x_{s}$. This transition rate is the quantity that sets the matching condition in stochastic resonance when a weak periodic drive is present. For the potential $U(x)$, the minima are at $x_{m}=\\pm 1$, the saddle point is at $x_{s}=0$, and the barrier height from a minimum to the saddle is $\\Delta U = \\frac{1}{4}$.\n\nStarting from the fundamental framework of the Fokker–Planck description for escape in the overdamped limit and the well-tested small-noise asymptotics for one-dimensional barriers, determine the explicit closed-form expression for $k(D)$ by evaluating the needed local curvatures $U''(x_{m})$ and $U''(x_{s})$ and the barrier height $\\Delta U=\\frac{1}{4}$ for the given $U(x)$. Express your final answer as a function of $D$ only. No rounding is required. Provide no units in your final expression.", "solution": "The problem asks for the interwell transition rate $k(D)$ for a particle in a double-well potential $U(x)$ subject to white noise, as described by an overdamped one-dimensional stochastic differential equation (SDE). The SDE is given by:\n$$\n\\mathrm{d}x_{t} = -U'(x_{t})\\,\\mathrm{d}t + \\sqrt{2D}\\,\\mathrm{d}W_{t}\n$$\nThe potential is specified as:\n$$\nU(x) = \\frac{1}{4}x^{4} - \\frac{1}{2}x^{2}\n$$\nThe problem is set in the small-noise regime ($D \\to 0$), where the escape from a potential well is a rare event. The rate of such an escape can be calculated using Kramers' rate theory, which provides an asymptotic formula for the escape rate derived from the corresponding Fokker-Planck equation. For a one-dimensional system governed by the given SDE, the Kramers escape rate $k$ from a local minimum at $x_{m}$ over a potential barrier with its saddle point at $x_{s}$ is given by the formula:\n$$\nk(D) = \\frac{\\sqrt{U''(x_{m}) |U''(x_{s})|}}{2\\pi} \\exp\\left(-\\frac{\\Delta U}{D}\\right)\n$$\nwhere $U''(x)$ is the second derivative of the potential, representing the local curvature, and $\\Delta U = U(x_{s}) - U(x_{m})$ is the height of the potential barrier.\n\nThe problem provides the locations of the minima, $x_{m}=\\pm 1$, the saddle point, $x_{s}=0$, and the barrier height, $\\Delta U = \\frac{1}{4}$. We must first verify these and compute the necessary curvatures.\n\nFirst, we compute the first and second derivatives of the potential $U(x)$:\n$$\nU'(x) = \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\frac{1}{4}x^{4} - \\frac{1}{2}x^{2}\\right) = x^{3} - x\n$$\n$$\nU''(x) = \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(x^{3} - x\\right) = 3x^{2} - 1\n$$\nThe critical points are found by setting $U'(x) = 0$:\n$$\nx^{3} - x = x(x^{2}-1) = x(x-1)(x+1) = 0\n$$\nThis gives critical points at $x = -1$, $x = 0$, and $x = 1$.\n\nTo classify these points, we use the second derivative test:\nAt $x = \\pm 1$:\n$$\nU''(\\pm 1) = 3(\\pm 1)^{2} - 1 = 3 - 1 = 2\n$$\nSince $U''(\\pm 1) = 2 > 0$, the points $x_{m} = \\pm 1$ are local minima, as stated in the problem. The curvature at either minimum is $U''(x_{m}) = 2$. Due to the symmetry of the potential, we can choose the escape from the well at $x_{m}=1$ to the well at $x_{m}=-1$.\n\nAt $x = 0$:\n$$\nU''(0) = 3(0)^{2} - 1 = -1\n$$\nSince $U''(0) = -1 < 0$, the point $x_{s} = 0$ is a local maximum, which acts as the saddle point between the two wells. This also confirms the information given in the problem. The curvature at the saddle point is $U''(x_{s}) = -1$.\n\nFinally, we can verify the barrier height $\\Delta U$:\nThe potential at the minimum $x_{m} = 1$ is:\n$$\nU(x_{m}) = U(1) = \\frac{1}{4}(1)^{4} - \\frac{1}{2}(1)^{2} = \\frac{1}{4} - \\frac{1}{2} = -\\frac{1}{4}\n$$\nThe potential at the saddle point $x_{s} = 0$ is:\n$$\nU(x_{s}) = U(0) = \\frac{1}{4}(0)^{4} - \\frac{1}{2}(0)^{2} = 0\n$$\nThe barrier height is therefore:\n$$\n\\Delta U = U(x_{s}) - U(x_{m}) = 0 - \\left(-\\frac{1}{4}\\right) = \\frac{1}{4}\n$$\nThis confirms the value $\\Delta U = \\frac{1}{4}$ provided in the problem statement.\n\nNow we have all the components needed for the Kramers' rate formula:\n- Curvature at the minimum: $U''(x_{m}) = 2$\n- Curvature at the saddle: $U''(x_{s}) = -1$, so its absolute value is $|U''(x_{s})| = 1$.\n- Barrier height: $\\Delta U = \\frac{1}{4}$.\n\nSubstituting these values into the rate formula:\n$$\nk(D) = \\frac{\\sqrt{U''(x_{m}) |U''(x_{s})|}}{2\\pi} \\exp\\left(-\\frac{\\Delta U}{D}\\right)\n$$\n$$\nk(D) = \\frac{\\sqrt{(2) \\cdot (1)}}{2\\pi} \\exp\\left(-\\frac{1/4}{D}\\right)\n$$\n$$\nk(D) = \\frac{\\sqrt{2}}{2\\pi} \\exp\\left(-\\frac{1}{4D}\\right)\n$$\nThis is the explicit closed-form expression for the interwell transition rate $k(D)$ as a function of the noise intensity $D$.", "answer": "$$\n\\boxed{\\frac{\\sqrt{2}}{2\\pi}\\exp\\left(-\\frac{1}{4D}\\right)}\n$$", "id": "3078238"}, {"introduction": "To observe stochastic resonance computationally, we must simulate the particle's random walk as described by the Langevin equation. This practice [@problem_id:3078198] guides you through setting up the most common tool for this job, the Euler–Maruyama numerical scheme. More importantly, it tackles a critical practical issue: choosing an appropriate time step $\\Delta t$. A step that is too large will fail to resolve the system's dynamics and lead to inaccurate or unstable results, so learning to base $\\Delta t$ on the physical timescales of the problem is a vital skill for any computational physicist.", "problem": "Consider the Itô Stochastic Differential Equation (SDE) $dx_t=-U'(x_t)\\,dt+A\\cos(\\omega t)\\,dt+\\sqrt{2D}\\,dW_t$, where $U(x)$ is a twice continuously differentiable potential, $A$ is a deterministic forcing amplitude, $\\omega$ is a forcing angular frequency given in radians per second, $D$ is a strictly positive diffusion level, and $W_t$ is a standard Wiener process. Your tasks are:\n1. Starting from the definition of an Itô Stochastic Differential Equation and the properties of Wiener process increments, derive a single-step explicit Euler–Maruyama update that approximates the evolution of $x_t$ on a uniform grid $t_n=n\\Delta t$. The resulting update must be expressed in terms of $x_n$, $t_n$, and a mean-zero Gaussian increment whose variance is $\\Delta t$.\n2. Using linearization of the deterministic drift near each local minimum of $U(x)$ and the period of the external forcing, justify and then specify a choice of time step $\\Delta t$ that resolves both the forcing period and the fastest intrawell relaxation. Constrain $\\Delta t$ so that it is smaller than both a forcing-resolution threshold and a relaxation-resolution threshold. Use the following quantitative resolution targets:\n   - At least $N_T=200$ time steps per forcing period $T=\\dfrac{2\\pi}{\\omega}$.\n   - At least $N_\\tau=20$ time steps per fastest intrawell relaxation time $\\tau_{\\min}=\\dfrac{1}{\\max_{x\\in\\mathcal{M}}U''(x)}$, where $\\mathcal{M}$ is the set of local minima of $U(x)$ and $U''(x)$ denotes the second derivative of $U(x)$.\n   Under these targets, set $\\Delta t=\\min\\left(\\dfrac{T}{N_T},\\dfrac{\\tau_{\\min}}{N_\\tau}\\right)$.\n3. Implement a program that, for each test case listed below, computes the recommended $\\Delta t$ in seconds and outputs the result rounded to $6$ decimal places. The angle unit for $\\omega$ must be radians, and all time values must be expressed in seconds. The program may assume that friction is nondimensionalized to unity so that the linearized relaxation rate equals $U''(x^\\ast)$ at a minimum $x^\\ast$.\n\nUse the following test suite of potentials and parameters, designed to probe typical, boundary, and edge scenarios in stochastic resonance modeling with explicit Euler–Maruyama discretization:\n- Test Case $1$ (double-well quartic potential): $U(x)=\\dfrac{a}{4}x^4-\\dfrac{b}{2}x^2$, with $a=1.0$, $b=1.0$, $A=0.2$, $\\omega=0.5$, $D=0.02$. For this potential, the local minima are at $x=\\pm\\sqrt{\\frac{b}{a}}$, and the curvature at each minimum equals $U''(x)=2b$.\n- Test Case $2$ (harmonic potential): $U(x)=\\dfrac{k}{2}x^2$, with $k=10.0$, $A=0.05$, $\\omega=5.0$, $D=0.01$. The curvature at the unique minimum equals $U''(0)=k$.\n- Test Case $3$ (harmonic potential, stiff drift): $U(x)=\\dfrac{k}{2}x^2$, with $k=100.0$, $A=0.10$, $\\omega=1.0$, $D=0.05$.\n- Test Case $4$ (harmonic potential, fast forcing): $U(x)=\\dfrac{k}{2}x^2$, with $k=2.0$, $A=0.10$, $\\omega=100.0$, $D=0.05$.\n- Test Case $5$ (harmonic potential, slow forcing): $U(x)=\\dfrac{k}{2}x^2$, with $k=5.0$, $A=0.10$, $\\omega=0.01$, $D=0.05$.\n\nProgram requirements:\n- For each test case, compute $$\\Delta t=\\min\\left(\\frac{2\\pi/\\omega}{N_T},\\frac{1/\\max U''(x_{\\min})}{N_\\tau}\\right)$$ using $N_T=200$ and $N_\\tau=20$, where $\\max U''(x_{\\min})$ denotes the largest curvature among minima.\n- Output a single line containing the results as a comma-separated list enclosed in square brackets, with each $\\Delta t$ rounded to $6$ decimal places and expressed in seconds. For example, the output format must be exactly like $[\\Delta t_1,\\Delta t_2,\\Delta t_3,\\Delta t_4,\\Delta t_5]$.\n\nYour program must be a complete, runnable implementation and must not read any input or write any files.", "solution": "The problem is scientifically grounded, well-posed, and objective. All parameters and constraints are clearly defined, allowing for a unique and meaningful solution. We may therefore proceed with the derivation and calculation.\n\nThe problem asks for three tasks: first, to derive the explicit Euler–Maruyama update rule for a given Itô Stochastic Differential Equation (SDE); second, to justify the choice of the simulation time step $\\Delta t$; and third, to implement a program to calculate this $\\Delta t$ for a set of test cases.\n\n**1. Derivation of the Euler–Maruyama Update**\n\nThe system's evolution is described by the following Itô SDE:\n$$dx_t = -U'(x_t)\\,dt + A\\cos(\\omega t)\\,dt + \\sqrt{2D}\\,dW_t$$\nThis can be written in integral form. Integrating from time $t_n$ to $t_{n+1} = t_n + \\Delta t$, we have:\n$$x(t_{n+1}) - x(t_n) = \\int_{t_n}^{t_{n+1}} \\left(-U'(x_s) + A\\cos(\\omega s)\\right) ds + \\int_{t_n}^{t_{n+1}} \\sqrt{2D}\\,dW_s$$\nThe Euler–Maruyama method provides a first-order approximation for this integral equation. The core idea is to assume that the integrands are approximately constant over the small time interval $[t_n, t_{n+1}]$ and can be evaluated at the beginning of the interval, $t_n$.\n\nLet $x_n = x(t_n)$. The deterministic integral (the drift term) is approximated as:\n$$\\int_{t_n}^{t_{n+1}} \\left(-U'(x_s) + A\\cos(\\omega s)\\right) ds \\approx \\left(-U'(x_n) + A\\cos(\\omega t_n)\\right) \\Delta t$$\nThe stochastic integral (the diffusion term) is evaluated as:\n$$\\int_{t_n}^{t_{n+1}} \\sqrt{2D}\\,dW_s = \\sqrt{2D} \\int_{t_n}^{t_{n+1}} dW_s = \\sqrt{2D} (W_{t_{n+1}} - W_{t_n})$$\nThe increment of the Wiener process, $\\Delta W_n = W_{t_{n+1}} - W_{t_n}$, is a Gaussian random variable with mean $E[\\Delta W_n] = 0$ and variance $Var[\\Delta W_n] = t_{n+1} - t_n = \\Delta t$. Thus, $\\Delta W_n$ is a realization of a random variable distributed as $\\mathcal{N}(0, \\Delta t)$. As requested, this is a mean-zero Gaussian increment with variance $\\Delta t$. We can represent this increment as $\\Delta W_n = \\sqrt{\\Delta t} Z_n$, where $Z_n$ is a standard normal random variable, $Z_n \\sim \\mathcal{N}(0, 1)$.\n\nSubstituting these approximations back into the integral equation yields the single-step explicit Euler–Maruyama update rule:\n$$x_{n+1} = x_n + \\left(-U'(x_n) + A\\cos(\\omega t_n)\\right) \\Delta t + \\sqrt{2D} \\Delta W_n$$\nOr, written in terms of a standard normal deviate $Z_n$:\n$$x_{n+1} = x_n + \\left(-U'(x_n) + A\\cos(\\omega t_n)\\right) \\Delta t + \\sqrt{2D\\Delta t} Z_n$$\nThis equation describes the approximate evolution of the state variable $x$ on a discrete time grid $t_n = n\\Delta t$.\n\n**2. Justification and Specification of the Time Step $\\Delta t$**\n\nA numerical simulation must use a time step $\\Delta t$ that is small enough to resolve all relevant physical timescales of the system. Failure to do so can lead to numerical instability and inaccurate results. The given SDE has two distinct deterministic timescales that dictate the choice of $\\Delta t$.\n\nThe first timescale is related to the external periodic forcing, $A\\cos(\\omega t)$. The period of this forcing is $T = \\frac{2\\pi}{\\omega}$. To capture the sinusoidal variation accurately, the time step $\\Delta t$ must be a small fraction of this period. The problem specifies a resolution requirement of at least $N_T = 200$ time steps per period. This imposes the constraint:\n$$\\Delta t \\le \\frac{T}{N_T} = \\frac{2\\pi}{\\omega N_T}$$\n\nThe second timescale is the intrawell relaxation time. In the absence of forcing and noise, the particle's dynamics are governed by the deterministic ODE $\\frac{dx}{dt} = -U'(x)$. Near a local minimum $x^\\ast$ of the potential $U(x)$, we can linearize the drift term by performing a Taylor expansion of $U'(x)$ around $x=x^\\ast$: $U'(x) \\approx U'(x^\\ast) + U''(x^\\ast)(x - x^\\ast)$.\nSince $x^\\ast$ is a minimum, the first derivative is zero, $U'(x^\\ast) = 0$. Letting $\\delta x = x - x^\\ast$ be the displacement from the minimum, the linearized equation of motion becomes:\n$\\frac{d(\\delta x)}{dt} = -U''(x^\\ast) \\delta x$\nThis linear ODE has a solution of the form $\\delta x(t) = \\delta x(0) e^{-t/\\tau_{relax}}$, where the relaxation time $\\tau_{relax}$ is given by $\\tau_{relax} = \\frac{1}{U''(x^\\ast)}$. This is the characteristic time it takes for the particle to relax back to the bottom of the potential well after a small perturbation. The problem statement confirms this by assuming a unit friction coefficient. For a numerical method like forward Euler to be stable and accurate, the time step $\\Delta t$ must be significantly smaller than this relaxation time.\n\nThe potential $U(x)$ may have multiple local minima, each with a potentially different curvature $U''(x^\\ast)$ and thus a different relaxation time. The most stringent constraint comes from the fastest relaxation process, which occurs in the well with the highest curvature (the \"steepest\" well). This corresponds to the minimum relaxation time, $\\tau_{\\min}$:\n$$\\tau_{\\min} = \\frac{1}{\\max_{x\\in\\mathcal{M}} U''(x)}$$\nwhere $\\mathcal{M}$ is the set of all local minima. The problem specifies a resolution of at least $N_\\tau = 20$ time steps for this fastest relaxation. This imposes the second constraint:\n$$\\Delta t \\le \\frac{\\tau_{\\min}}{N_\\tau} = \\frac{1}{N_\\tau \\max_{x\\in\\mathcal{M}} U''(x)}$$\n\nTo ensure that both the forcing and the fastest internal dynamics are resolved, $\\Delta t$ must satisfy both constraints simultaneously. Therefore, we must choose $\\Delta t$ to be no larger than the minimum of these two upper bounds. The problem directs us to set $\\Delta t$ to this minimum value:\n$$\\Delta t = \\min\\left(\\frac{T}{N_T}, \\frac{\\tau_{\\min}}{N_\\tau}\\right) = \\min\\left(\\frac{2\\pi}{\\omega N_T}, \\frac{1}{N_\\tau \\max_{x\\in\\mathcal{M}} U''(x)}\\right)$$\nThis choice ensures the numerical stability and accuracy of the Euler–Maruyama simulation with respect to the dominant deterministic timescales.\n\n**3. Implementation and Calculation for Test Cases**\n\nWe will now implement a program to compute $\\Delta t$ using the derived formula for the given test cases, with constants $N_T = 200$ and $N_\\tau = 20$. The required parameters are the forcing frequency $\\omega$ and the maximum curvature at the potential minima, $\\max U''(x_{\\min})$.\n\nFor each test case:\n- **Test Case 1**: $U(x)=\\frac{a}{4}x^4-\\frac{b}{2}x^2$ with $a=1.0, b=1.0$, and $\\omega=0.5$. The curvature at the minima is given as $2b=2.0$.\n  $\\Delta t_{force} = \\frac{2\\pi}{0.5 \\times 200} = \\frac{\\pi}{50} \\approx 0.062832$.\n  $\\Delta t_{relax} = \\frac{1}{20 \\times 2.0} = \\frac{1}{40} = 0.025$.\n  $\\Delta t = \\min(0.062832, 0.025) = 0.025$.\n\n- **Test Case 2**: $U(x)=\\frac{k}{2}x^2$ with $k=10.0$ and $\\omega=5.0$. The curvature is $k=10.0$.\n  $\\Delta t_{force} = \\frac{2\\pi}{5.0 \\times 200} = \\frac{\\pi}{500} \\approx 0.006283$.\n  $\\Delta t_{relax} = \\frac{1}{20 \\times 10.0} = \\frac{1}{200} = 0.005$.\n  $\\Delta t = \\min(0.006283, 0.005) = 0.005$.\n\n- **Test Case 3**: $U(x)=\\frac{k}{2}x^2$ with $k=100.0$ and $\\omega=1.0$. The curvature is $k=100.0$.\n  $\\Delta t_{force} = \\frac{2\\pi}{1.0 \\times 200} = \\frac{\\pi}{100} \\approx 0.031416$.\n  $\\Delta t_{relax} = \\frac{1}{20 \\times 100.0} = \\frac{1}{2000} = 0.0005$.\n  $\\Delta t = \\min(0.031416, 0.0005) = 0.0005$.\n\n- **Test Case 4**: $U(x)=\\frac{k}{2}x^2$ with $k=2.0$ and $\\omega=100.0$. The curvature is $k=2.0$.\n  $\\Delta t_{force} = \\frac{2\\pi}{100.0 \\times 200} = \\frac{\\pi}{10000} \\approx 0.000314$.\n  $\\Delta t_{relax} = \\frac{1}{20 \\times 2.0} = \\frac{1}{40} = 0.025$.\n  $\\Delta t = \\min(0.000314, 0.025) = 0.000314$.\n\n- **Test Case 5**: $U(x)=\\frac{k}{2}x^2$ with $k=5.0$ and $\\omega=0.01$. The curvature is $k=5.0$.\n  $\\Delta t_{force} = \\frac{2\\pi}{0.01 \\times 200} = \\pi \\approx 3.141593$.\n  $\\Delta t_{relax} = \\frac{1}{20 \\times 5.0} = \\frac{1}{100} = 0.01$.\n  $\\Delta t = \\min(3.141593, 0.01) = 0.01$.\n\nThe program in the final answer will implement these calculations.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the recommended Euler-Maruyama time step Delta t for a series of\n    SDE test cases based on stability and accuracy criteria.\n    \"\"\"\n\n    # Define the constants from the problem statement.\n    N_T = 200  # Resolution for forcing period\n    N_tau = 20  # Resolution for relaxation time\n\n    # Define the test cases from the problem statement.\n    # Each case is a dictionary containing the angular frequency 'omega' and\n    # the maximum second derivative of the potential at its minima 'max_U_pp'.\n    test_cases = [\n        # Test Case 1 (double-well quartic potential)\n        # U(x) = (a/4)x^4 - (b/2)x^2, a=1.0, b=1.0\n        # omega = 0.5, U''(x_min) = 2b = 2.0\n        {'omega': 0.5, 'max_U_pp': 2.0},\n\n        # Test Case 2 (harmonic potential)\n        # U(x) = (k/2)x^2, k=10.0, omega=5.0\n        # U''(0) = k = 10.0\n        {'omega': 5.0, 'max_U_pp': 10.0},\n\n        # Test Case 3 (harmonic potential, stiff drift)\n        # U(x) = (k/2)x^2, k=100.0, omega=1.0\n        # U''(0) = k = 100.0\n        {'omega': 1.0, 'max_U_pp': 100.0},\n\n        # Test Case 4 (harmonic potential, fast forcing)\n        # U(x) = (k/2)x^2, k=2.0, omega=100.0\n        # U''(0) = k = 2.0\n        {'omega': 100.0, 'max_U_pp': 2.0},\n\n        # Test Case 5 (harmonic potential, slow forcing)\n        # U(x) = (k/2)x^2, k=5.0, omega=0.01\n        # U''(0) = k = 5.0\n        {'omega': 0.01, 'max_U_pp': 5.0},\n    ]\n\n    results = []\n    for case in test_cases:\n        omega = case['omega']\n        max_U_pp = case['max_U_pp']\n\n        # Calculate the time step constraint from the forcing period T.\n        # T = 2*pi / omega\n        # delta_t_force = T / N_T\n        delta_t_force = (2 * np.pi / omega) / N_T\n\n        # Calculate the time step constraint from the fastest relaxation time tau_min.\n        # tau_min = 1 / max_U_pp\n        # delta_t_relax = tau_min / N_tau\n        tau_min = 1.0 / max_U_pp\n        delta_t_relax = tau_min / N_tau\n\n        # The final time step delta_t is the minimum of the two constraints.\n        delta_t = min(delta_t_force, delta_t_relax)\n\n        # Format the result to 6 decimal places as a string.\n        # Using f-string formatting is more reliable than round() for display purposes.\n        results.append(f\"{delta_t:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "3078198"}, {"introduction": "Having established the theoretical escape rate and a robust numerical method, we are now ready to put everything together and observe stochastic resonance in action. This final practice [@problem_id:3078235] involves running a full simulation of the periodically driven system and applying signal processing techniques to analyze its output. By computing the power spectral density from the simulated trajectory, you will calculate the signal-to-noise ratio (SNR) and witness how the system's ability to detect the weak periodic signal is paradoxically enhanced by an optimal amount of noise.", "problem": "Consider the overdamped Langevin equation (an Itô stochastic differential equation) for a particle in a symmetric double-well potential subject to a weak sinusoidal drive, given by\n$$\ndx_t = \\left(x_t - x_t^3 + A \\cos(\\omega t)\\right)\\,dt + \\sqrt{2D}\\,dW_t,\n$$\nwhere $x_t$ is the state variable, $A$ is the drive amplitude, $\\omega$ is the angular frequency (in radians per second), $D$ is the noise intensity (dimensionless), and $W_t$ is a standard Wiener process. The deterministic drift originates from the potential $U(x) = \\frac{x^4}{4} - \\frac{x^2}{2}$, since $-U'(x) = x - x^3$. Work in dimensionless units for $x$ and $A$, and seconds for time.\n\nYour tasks are:\n1. Starting from the definition of the Itô stochastic differential equation, discretize the dynamics using the Euler–Maruyama method with a uniform time step $\\Delta t$. Simulate $M$ independent realizations of the trajectory $\\{x_n\\}_{n=0}^{N-1}$ over a total time $T$, where $N = T / \\Delta t$.\n2. For each realization, compute the Discrete Fourier Transform (DFT) of the mean-removed signal $\\{x_n - \\bar{x}\\}$, where $\\bar{x}$ is the temporal average of the realization. Use the one-sided periodogram to estimate the power spectral density around the drive frequency. Explicitly, let $X_k$ be the discrete Fourier transform at frequency bin $k$. Define the one-sided periodogram by\n$$\nP_k = \\frac{\\Delta t}{N} \\left|X_k\\right|^2,\n$$\nwith the standard one-sided adjustment that multiplies by $2$ for bins strictly between zero frequency and the Nyquist frequency.\n3. Average the periodograms over $M$ realizations to reduce variance, obtaining $\\overline{P}_k$.\n4. Estimate the signal-to-noise ratio (SNR) at the drive angular frequency $\\omega$ by taking the ratio of the averaged periodogram at the bin $k_0$ corresponding to the drive frequency $f_0 = \\omega/(2\\pi)$ to the average of the neighboring bins in a band around $k_0$, excluding the central bin and its immediate neighbors. Let the frequency resolution be $\\Delta f = 1/T$ and $k_0 = \\text{round}(f_0 / \\Delta f)$. Use a symmetric band of width $B$ bins on each side, and compute the noise floor as the arithmetic mean of $\\overline{P}_k$ for $k \\in [k_0 - B, k_0 + B]$ excluding $k_0$, $k_0 - 1$, $k_0 + 1$, and any non-positive or out-of-range indices. Then define\n$$\n\\text{SNR} = \\frac{\\overline{P}_{k_0}}{\\text{mean noise floor}}.\n$$\nThe SNR is a dimensionless quantity.\n\nUse the following parameter values for all simulations unless varied in the test suite: $\\Delta t = 0.01$, $T = 200$, $A = 0.25$, $\\omega = 2\\pi \\cdot 0.05$, and $B = 8$. Initialize each realization at $x_0 = -1$. Use a fixed random seed for reproducibility, and express angles in radians.\n\nTest Suite:\n- Case 1 (happy path, low noise, small ensemble): $D = 0.02$, $M = 5$.\n- Case 2 (near-resonant noise, larger ensemble): $D = 0.12$, $M = 20$.\n- Case 3 (high noise, larger ensemble): $D = 0.60$, $M = 20$.\n\nYour program must:\n- Implement the Euler–Maruyama scheme for simulating the trajectories.\n- Compute and average the periodograms as specified.\n- Compute the SNR for each test case.\n- Produce a single line of output containing the three SNR values as a comma-separated list enclosed in square brackets, with no spaces, in the order of the test suite, for example, $[s_1,s_2,s_3]$.\n\nNo external input is required. The only allowed libraries are the Python standard library, NumPy, and SciPy. Angles must be handled in radians; time is in seconds; $x$ and $A$ are dimensionless. The final outputs must be floats. The numerical values should be computed by your program.", "solution": "The problem requires the numerical analysis of stochastic resonance in a system described by an overdamped Langevin equation. The analysis involves simulating the system's dynamics, computing its power spectrum, and estimating the signal-to-noise ratio (SNR) for different noise intensities.\n\nThe state variable $x_t$ of the particle evolves according to the Itô stochastic differential equation (SDE):\n$$\ndx_t = \\left(x_t - x_t^3 + A \\cos(\\omega t)\\right)\\,dt + \\sqrt{2D}\\,dW_t\n$$\nThis equation models the motion of a particle in a bistable potential $U(x) = \\frac{x^4}{4} - \\frac{x^2}{2}$, subject to a weak periodic driving force with amplitude $A$ and angular frequency $\\omega$, and a stochastic force characterized by a standard Wiener process $W_t$ with noise intensity $D$. The term $-(x-x^3)$ is the deterministic force $-U'(x)$.\n\nThe solution is developed in three stages: numerical integration of the SDE, estimation of the power spectral density (PSD), and calculation of the SNR.\n\n**1. Numerical Simulation: The Euler–Maruyama Method**\nThe continuous SDE is discretized to enable numerical simulation. We use the Euler–Maruyama method, a first-order scheme for SDEs. The general form of the SDE is $dX_t = f(X_t, t)\\,dt + g(X_t, t)\\,dW_t$. For a uniform time step $\\Delta t$, the discrete update rule is:\n$$\nx_{n+1} = x_n + f(x_n, t_n)\\Delta t + g(x_n, t_n)\\Delta W_n\n$$\nwhere $x_n \\approx x(t_n)$ at time $t_n = n \\Delta t$. The term $\\Delta W_n = W_{t_{n+1}} - W_{t_n}$ represents the increment of the Wiener process over $\\Delta t$. These increments are independent, normally distributed random variables with mean $0$ and variance $\\Delta t$, i.e., $\\Delta W_n \\sim \\mathcal{N}(0, \\Delta t)$. Computationally, this is implemented as $\\Delta W_n = \\sqrt{\\Delta t} Z_n$, where $Z_n$ is a random variable drawn from the standard normal distribution, $Z_n \\sim \\mathcal{N}(0, 1)$.\n\nFor the given problem, the drift term is $f(x, t) = x - x^3 + A \\cos(\\omega t)$ and the diffusion term is a constant $g(x, t) = \\sqrt{2D}$. Substituting these into the Euler-Maruyama formula, we obtain the iterative scheme for the particle's state:\n$$\nx_{n+1} = x_n + \\left(x_n - x_n^3 + A \\cos(\\omega t_n)\\right)\\Delta t + \\sqrt{2D\\Delta t} Z_n\n$$\nStarting from the initial condition $x_0 = -1$, we generate a trajectory $\\{x_n\\}_{n=0}^{N-1}$ of total length $N = T/\\Delta t$ steps. This process is repeated for $M$ independent realizations to ensure statistically robust results.\n\n**2. Power Spectral Density (PSD) Estimation**\nThe PSD reveals how the power of a signal is distributed over different frequencies. Here, it allows us to see the system's response to the periodic drive.\n\nFor each of the $M$ simulated trajectories, we first compute the mean-removed signal $y_n = x_n - \\bar{x}$, where $\\bar{x} = \\frac{1}{N}\\sum_{i=0}^{N-1} x_i$. The Discrete Fourier Transform (DFT) of $\\{y_n\\}$ is defined as:\n$$\nY_k = \\sum_{n=0}^{N-1} y_n e^{-i 2\\pi kn/N}\n$$\nfor frequency bins $k = 0, 1, \\dots, N-1$. The frequency corresponding to bin $k$ is $f_k = k/T = k/(N\\Delta t)$.\n\nThe problem specifies using the one-sided periodogram, which accounts for the fact that for a real signal, the power spectrum is symmetric around the DC component. The two-sided periodogram is first calculated as $P_k^{\\text{2-sided}} = \\frac{\\Delta t}{N}|Y_k|^2$. The one-sided periodogram $P_k$ is then obtained by folding the negative frequency components onto the positive ones:\n$$\nP_k = \\begin{cases}\n\\frac{\\Delta t}{N} |Y_0|^2 & \\text{for } k=0 \\text{ (DC component)} \\\\\n2 \\cdot \\frac{\\Delta t}{N} |Y_k|^2 & \\text{for } 0 < k < N/2 \\\\\n\\frac{\\Delta t}{N} |Y_{N/2}|^2 & \\text{for } k=N/2 \\text{ (Nyquist frequency, if } N \\text{ is even)} \\\\\n\\end{cases}\n$$\nTo reduce estimator variance, the periodograms from all $M$ realizations are averaged:\n$$\n\\overline{P}_k = \\frac{1}{M} \\sum_{m=1}^{M} P_k^{(m)}\n$$\nwhere $P_k^{(m)}$ is the periodogram from the $m$-th realization.\n\n**3. Signal-to-Noise Ratio (SNR) Calculation**\nThe SNR is a measure of the strength of the signal peak (due to the external drive) relative to the background noise level in the spectrum.\n\nFirst, we identify the frequency bin $k_0$ corresponding to the drive frequency $f_0 = \\omega/(2\\pi)$. The frequency resolution is $\\Delta f = 1/T$. The bin index is given by $k_0 = \\text{round}(f_0 / \\Delta f) = \\text{round}(\\omega T / (2\\pi))$. With the provided parameters $\\omega = 2\\pi \\cdot 0.05$ and $T=200$, the signal bin is $k_0 = \\text{round}(0.05 \\cdot 200) = 10$. The signal power, $S$, is the value of the averaged periodogram at this bin: $S = \\overline{P}_{k_0}$.\n\nNext, the noise floor, $N_{floor}$, is estimated by averaging the periodogram over a band of frequencies near the signal peak, excluding the peak itself to avoid bias. The problem specifies a symmetric band of width $B=8$ bins on each side of $k_0$, excluding the bins $\\{k_0-1, k_0, k_0+1\\}$. The set of indices for noise calculation is thus $\\mathcal{K}_{noise} = \\{k \\mid k \\in [k_0-B, k_0+B]\\} \\setminus \\{k_0-1, k_0, k_0+1\\}$, with appropriate handling of boundary conditions (e.g., $k>0$). For $k_0=10$ and $B=8$, the indices are $k \\in \\{2, 3, ..., 8\\} \\cup \\{12, 13, ..., 18\\}$. The noise floor is the arithmetic mean over these bins:\n$$\nN_{floor} = \\frac{1}{|\\mathcal{K}_{noise}|} \\sum_{k \\in \\mathcal{K}_{noise}} \\overline{P}_k\n$$\nFinally, the SNR is computed as the ratio of the signal power to the noise floor:\n$$\n\\text{SNR} = \\frac{S}{N_{floor}} = \\frac{\\overline{P}_{k_0}}{N_{floor}}\n$$\nThis procedure is executed for each case in the test suite to determine the SNR as a function of the noise intensity $D$. The phenomenon of stochastic resonance predicts that the SNR will be maximized at a non-zero, optimal value of $D$.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Simulates a driven bistable system described by a Langevin equation\n    to calculate the Signal-to-Noise Ratio (SNR) for different noise intensities.\n    \"\"\"\n    \n    # --- Fixed Parameters ---\n    dt = 0.01          # Time step (s)\n    T = 200.0          # Total time (s)\n    A = 0.25           # Drive amplitude (dimensionless)\n    omega = 2.0 * np.pi * 0.05  # Drive angular frequency (rad/s)\n    B = 8              # Bandwidth for noise floor calculation (bins)\n    x0 = -1.0          # Initial condition\n    \n    # --- Derived Parameters ---\n    N = int(T / dt)    # Number of time steps\n    t_array = np.linspace(0, T, N, endpoint=False) # Time array\n    \n    # Frequency bin of the drive signal\n    f0 = omega / (2.0 * np.pi)\n    df = 1.0 / T\n    k0 = int(round(f0 / df))\n    \n    # Set a fixed random seed for reproducibility\n    np.random.seed(0)\n\n    # --- Test Suite ---\n    test_cases = [\n        # (D: noise intensity, M: number of realizations)\n        (0.02, 5),\n        (0.12, 20),\n        (0.60, 20),\n    ]\n\n    results = []\n    \n    for D, M in test_cases:\n        # Array to store the sum of periodograms over all realizations\n        # The length for a real FFT of size N is N//2 + 1\n        avg_periodogram = np.zeros(N // 2 + 1)\n        \n        for _ in range(M):\n            # --- 1. Euler–Maruyama Simulation ---\n            x = np.zeros(N)\n            x[0] = x0\n            \n            # Generate all random numbers for the Wiener process at once for efficiency\n            Z = np.random.normal(0.0, 1.0, N - 1)\n            \n            for n in range(N - 1):\n                drift = (x[n] - x[n]**3 + A * np.cos(omega * t_array[n])) * dt\n                diffusion = np.sqrt(2 * D * dt) * Z[n]\n                x[n + 1] = x[n] + drift + diffusion\n        \n            # --- 2. Power Spectral Density (PSD) Estimation ---\n            # Remove the temporal mean of the signal\n            y = x - np.mean(x)\n            \n            # Compute the DFT using rfft for real-valued signals\n            Yk = np.fft.rfft(y)\n            \n            # Compute the one-sided periodogram as per the problem definition\n            # The two-sided is (dt/N) * |Yk|^2. One-sided is twice that,\n            # except at DC and Nyquist frequencies.\n            periodogram = (dt / N) * np.abs(Yk)**2\n            periodogram[1:-1] *= 2.0  # Apply the factor of 2\n\n            avg_periodogram += periodogram\n\n        # Average the periodogram over M realizations\n        avg_periodogram /= M\n        \n        # --- 3. Signal-to-Noise Ratio (SNR) Calculation ---\n        # Signal power is the peak at the drive frequency bin\n        signal_power = avg_periodogram[k0]\n        \n        # Define the indices for the noise floor calculation\n        # Bins from [k0-B, k0+B] excluding [k0-1, k0, k0+1]\n        noise_indices = []\n        # Lower band\n        noise_indices.extend(range(max(0, k0 - B), max(0, k0 - 1)))\n        # Upper band\n        noise_indices.extend(range(min(len(avg_periodogram), k0 + 2), \n                                   min(len(avg_periodogram), k0 + B + 1)))\n\n        # Ensure indices are unique and valid (though handled by ranges above)\n        noise_indices = sorted(list(set(noise_indices)))\n        \n        if not noise_indices:\n             # This case should not happen with the given parameters but is a safeguard.\n            mean_noise_floor = np.nan\n        else:\n            mean_noise_floor = np.mean(avg_periodogram[noise_indices])\n        \n        if mean_noise_floor > 0:\n            snr = signal_power / mean_noise_floor\n        else:\n            snr = np.inf # Or handle as an error, np.inf is a reasonable choice.\n\n        results.append(snr)\n\n    # Format the output as a comma-separated list in brackets\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3078235"}]}