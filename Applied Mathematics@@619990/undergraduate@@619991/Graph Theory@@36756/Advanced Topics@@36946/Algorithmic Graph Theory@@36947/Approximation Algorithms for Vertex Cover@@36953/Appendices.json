{"hands_on_practices": [{"introduction": "Since finding the absolute smallest vertex cover for a graph $G=(V,E)$ is an NP-hard problem, we often turn to approximation algorithms. This exercise [@problem_id:1481691] introduces a fundamental approach that guarantees a solution no worse than twice the optimal size. You will learn to leverage a simpler structure, a maximal matching $M$, to construct a valid vertex cover $C$, and in doing so, gain a concrete understanding of what a performance guarantee means in practice.", "problem": "In the field of computational complexity theory, the Vertex Cover problem is a classic example of an NP-hard problem. Given a graph, the goal is to find a subset of vertices of minimum size such that every edge in the graph is connected to at least one vertex in the subset. Such a subset is called an optimal (or minimum) vertex cover, and its size for a graph $G$ is denoted by $\\tau(G)$.\n\nSince finding the optimal solution is computationally difficult for large graphs, approximation algorithms are often used. One such algorithm is the maximal matching-based 2-approximation algorithm. It guarantees a solution that is no more than twice the size of the optimal solution. The algorithm proceeds as follows:\n1.  Begin with an empty set for the matching, $M = \\emptyset$. A matching is a set of edges where no two edges share a common vertex.\n2.  Construct a **maximal matching**. A matching is maximal if it cannot be extended by adding any other edge from the graph. For this problem, you will construct the maximal matching using a specific greedy procedure: Iterate through a pre-defined list of edges, and for each edge, add it to $M$ if and only if it does not share an endpoint with any edge already in $M$.\n3.  The resulting vertex cover, which we will call $C_{approx}$, is formed by taking all endpoints of the edges in the maximal matching $M$.\n\nConsider an undirected graph $G = (V, E)$ with the vertex set $V = \\{A, B, C, D, E, F, G, H\\}$ and the edge set $E = \\{(A,B), (A,C), (B,C), (C,D), (D,E), (D,F), (E,F), (F,G), (G,H)\\}$.\n\nTo construct the maximal matching, process the edges from the set $E$ in the following specific order:\n$(G,H), (F,G), (E,F), (D,F), (D,E), (C,D), (B,C), (A,C), (A,B)$.\n\nYour task is to calculate the approximation ratio for this particular execution. The approximation ratio is defined as the ratio of the size of the generated vertex cover to the size of the optimal vertex cover, i.e., $\\frac{|C_{approx}|}{\\tau(G)}$.\n\nCalculate this approximation ratio. Express your final answer as a decimal number rounded to two significant figures.", "solution": "We follow the specified greedy construction of a maximal matching. Initialize $M=\\emptyset$ and process edges in the given order, adding an edge if it shares no endpoint with any edge already in $M$.\n\n- Process $(G,H)$: add, so $M=\\{(G,H)\\}$ with used endpoints $\\{G,H\\}$.\n- $(F,G)$ shares $G$, so skip.\n- $(E,F)$ shares no endpoint with $\\{G,H\\}$, so add: $M=\\{(G,H),(E,F)\\}$ with used endpoints $\\{E,F,G,H\\}$.\n- $(D,F)$ shares $F$, so skip.\n- $(D,E)$ shares $E$, so skip.\n- $(C,D)$ shares no endpoint with $\\{E,F,G,H\\}$, so add: $M=\\{(G,H),(E,F),(C,D)\\}$ with used endpoints $\\{C,D,E,F,G,H\\}$.\n- $(B,C)$ shares $C$, so skip.\n- $(A,C)$ shares $C$, so skip.\n- $(A,B)$ shares no endpoint with current $M$, so add: $M=\\{(G,H),(E,F),(C,D),(A,B)\\}$ with used endpoints $\\{A,B,C,D,E,F,G,H\\}$.\n\nThus the maximal matching has size $|M|=4$, and the 2-approximation algorithm outputs the vertex cover $C_{approx}$ consisting of all endpoints of edges in $M$, hence $C_{approx}=V$ and\n$$\n|C_{approx}|=8.\n$$\n\nNext, compute the optimal vertex cover size $\\tau(G)$. A general lower bound is given by the size of a maximum matching $\\nu(G)$:\n$$\n\\tau(G)\\geq \\nu(G).\n$$\nSince we found a matching of size $4$, $\\nu(G)\\geq 4$, hence $\\tau(G)\\geq 4$.\n\nWe show $\\tau(G)\\geq 5$. The subgraph on $\\{A,B,C\\}$ is a triangle, so any vertex cover must include at least $2$ vertices from $\\{A,B,C\\}$. Similarly, the subgraph on $\\{D,E,F\\}$ is a triangle, so it must include at least $2$ vertices from $\\{D,E,F\\}$. If $\\tau(G)=4$, then the cover consists of exactly $2$ from $\\{A,B,C\\}$ and $2$ from $\\{D,E,F\\}$, leaving no vertex from $\\{G,H\\}$. This would leave the edge $(G,H)$ uncovered, a contradiction. Therefore\n$$\n\\tau(G)\\geq 5.\n$$\n\nWe now exhibit a vertex cover of size $5$ to prove optimality. Take\n$$\nS=\\{A,C,D,E,G\\}.\n$$\nThis set covers:\n- the triangle on $\\{A,B,C\\}$ via $A$ and $C$;\n- the edge $(C,D)$ via $C$ or $D$;\n- the triangle on $\\{D,E,F\\}$ via $D$ and $E$;\n- the path edges $(F,G)$ and $(G,H)$ via $G$.\n\nHence $S$ is a vertex cover of size $5$, so\n$$\n\\tau(G)=5.\n$$\n\nTherefore, the approximation ratio is\n$$\n\\frac{|C_{approx}|}{\\tau(G)}=\\frac{8}{5}=1.6,\n$$\nwhich in decimal form to two significant figures is $1.6$.", "answer": "$$\\boxed{1.6}$$", "id": "1481691"}, {"introduction": "What if we build a vertex cover using a more direct greedy approach? This practice problem [@problem_id:1481665] explores an intuitive heuristic: repeatedly select the vertex that covers the maximum number of remaining uncovered edges. By executing this algorithm on a sample graph and calculating its approximation ratio, you'll discover how different greedy strategies can yield varying results and gain insight into the design of heuristic algorithms.", "problem": "A cybersecurity analyst is tasked with deploying a monitoring software package across a small, critical sub-network. The network consists of nodes (e.g., servers, routers) and direct communication links between them. The network can be modeled as a simple, undirected graph $G = (V, E)$, where $V$ is the set of nodes and $E$ is the set of links.\n\nThe set of nodes is $V = \\{\\text{A, B, C, D, E, F, G, H, I, J, K, L, M}\\}$.\nThe communication links are $E = \\{(\\text{A, B}), (\\text{A, C}), (\\text{A, D}), (\\text{A, E}), (\\text{B, F}), (\\text{B, G}), (\\text{C, H}), (\\text{C, I}), (\\text{D, J}), (\\text{D, K}), (\\text{E, L}), (\\text{E, M})\\}$.\n\nTo ensure full coverage, the software must be installed on a subset of nodes, called a vertex cover, such that every communication link is connected to at least one node running the software. Finding the smallest possible set of nodes is computationally difficult. Therefore, the analyst uses a greedy approximation algorithm. The algorithm works as follows: repeatedly select the node that is connected to the greatest number of currently unsecured links. This node is added to the set of monitored nodes, and all links connected to it are now considered secured. This process continues until all links in the network are secured. In case of a tie for the greatest number of unsecured links, the node that comes first in alphabetical order is chosen.\n\nYour task is to determine the performance of this greedy algorithm for this specific network. Calculate the actual approximation ratio, which is defined as the size of the vertex cover found by the greedy algorithm divided by the size of a true minimum vertex cover for the given graph. Express your answer as a decimal rounded to three significant figures.", "solution": "Model the network as the simple undirected graph $G=(V,E)$ with $V=\\{\\text{A,B,C,D,E,F,G,H,I,J,K,L,M}\\}$ and \n$$E=\\{(\\text{A,B}),(\\text{A,C}),(\\text{A,D}),(\\text{A,E}),(\\text{B,F}),(\\text{B,G}),(\\text{C,H}),(\\text{C,I}),(\\text{D,J}),(\\text{D,K}),(\\text{E,L}),(\\text{E,M})\\}.$$\nThe greedy algorithm repeatedly selects the vertex incident to the maximum number of currently unsecured edges (ties broken alphabetically), adds it to the cover, and marks its incident edges secured.\n\nInitially, vertex degrees with respect to all edges are: $\\deg(\\text{A})=4$, $\\deg(\\text{B})=\\deg(\\text{C})=\\deg(\\text{D})=\\deg(\\text{E})=3$, and all leaves have degree $1$. The greedy choice is $\\text{A}$ (unique maximum degree $4$). After selecting $\\text{A}$, edges $(\\text{A,B}),(\\text{A,C}),(\\text{A,D}),(\\text{A,E})$ are secured. The remaining unsecured edges are $(\\text{B,F}),(\\text{B,G}),(\\text{C,H}),(\\text{C,I}),(\\text{D,J}),(\\text{D,K}),(\\text{E,L}),(\\text{E,M})$.\n\nOn this residual graph, degrees are $\\deg(\\text{B})=\\deg(\\text{C})=\\deg(\\text{D})=\\deg(\\text{E})=2$ and each leaf has degree $1$. The algorithm selects among $\\{\\text{B,C,D,E}\\}$ by alphabetical order: it picks $\\text{B}$, securing $(\\text{B,F}),(\\text{B,G})$; then $\\text{C}$, securing $(\\text{C,H}),(\\text{C,I})$; then $\\text{D}$, securing $(\\text{D,J}),(\\text{D,K})$; and finally $\\text{E}$, securing $(\\text{E,L}),(\\text{E,M})$. At this point, all edges are secured. Hence the greedy vertex cover found is\n$$C_{\\text{greedy}}=\\{\\text{A,B,C,D,E}\\},\\quad |C_{\\text{greedy}}|=5.$$\n\nNext, determine the size of a minimum vertex cover $|C^{\\ast}|$. The graph is a tree and thus bipartite, so by Kőnig’s theorem the size of a minimum vertex cover equals the size of a maximum matching. For each branch centered at $\\text{B},\\text{C},\\text{D},\\text{E}$, at most one edge among $\\{(\\text{A,child}),(\\text{child,leaf1}),(\\text{child,leaf2})\\}$ can be in a matching because these three edges share the child. Therefore any matching has size at most $4$. This bound is tight: for example,\n$$M=\\{(\\text{B,F}),(\\text{C,H}),(\\text{D,J}),(\\text{E,L})\\}$$\nis a matching of size $4$. Hence the maximum matching size is $4$, and therefore\n$$|C^{\\ast}|=4.$$\n\nAlternatively, one can exhibit a minimum vertex cover directly: $C^{\\ast}=\\{\\text{B,C,D,E}\\}$ covers all edges since each edge is incident to one of these vertices, and no smaller cover is possible because omitting any among $\\{\\text{B,C,D,E}\\}$ would force including both of its two leaves and possibly $\\text{A}$ to cover all three incident edges, which is not fewer vertices.\n\nThe approximation ratio is defined as\n$$\\rho=\\frac{|C_{\\text{greedy}}|}{|C^{\\ast}|}=\\frac{5}{4}=1.25.$$\nRounded to three significant figures, this is $1.25$.", "answer": "$$\\boxed{1.25}$$", "id": "1481665"}, {"introduction": "Rather than constructing a solution from nothing, local search algorithms start with an existing solution and iteratively try to improve it. This problem [@problem_id:1481689] has you analyze such an algorithm that refines a vertex cover $C$ by attempting to swap vertices from inside and outside the cover. This exercise is key to understanding a critical concept in optimization: the \"local optimum,\" a solution that appears optimal from a limited perspective but may not be the true global optimum.", "problem": "An IT company is developing a novel local search heuristic to find a small vertex cover in a graph $G=(V, E)$. A vertex cover is a subset of vertices $C \\subseteq V$ such that every edge in $E$ has at least one endpoint in $C$. The goal is to find a vertex cover with the minimum possible number of vertices.\n\nThe proposed algorithm is as follows:\n1.  **Initialization**: Start with a given candidate set $C \\subseteq V$ which is guaranteed to be a vertex cover.\n2.  **Reduction Step**: While the current cover $C$ is not minimal (i.e., there exists a vertex $u \\in C$ such that $C \\setminus \\{u\\}$ is also a vertex cover), update $C$ to $C \\setminus \\{u\\}$ and repeat this step.\n3.  **Swap Step**: After the reduction step terminates, the current cover $C$ is minimal. The algorithm now searches for a 'swap'. A swap is defined by a pair of vertices $(u, v)$ where $u \\in C$ and $v \\in V \\setminus C$. If the new set $C' = (C \\setminus \\{u\\}) \\cup \\{v\\}$ is also a vertex cover, the algorithm performs the swap by setting $C \\leftarrow C'$ and returns to Step 2 to attempt further reductions.\n4.  **Termination**: If the current minimal cover $C$ has no possible reduction (by definition of completing Step 2) and no valid swap can be found in Step 3, the algorithm terminates and returns $C$ as its result.\n\nConsider a specific bipartite graph constructed as follows. The vertex set is partitioned into two disjoint sets, $A = \\{a_1, a_2\\}$ and $B = \\{b_1, b_2, b_3\\}$. An edge exists between a vertex from set $A$ and a vertex from set $B$ if and only if they are from different sets. Specifically, the graph is a complete bipartite graph $K_{2,3}$.\n\nThe algorithm is initialized with the starting vertex cover $C_0 = B = \\{b_1, b_2, b_3\\}$.\n\nYour task is to analyze the execution of this algorithm. Determine the size of the vertex cover returned by the algorithm. Then, determine the size of a true minimum vertex cover for this graph.\n\nExpress your answer as a pair of integers $(S_L, S_O)$, where $S_L$ is the size of the locally optimal cover returned by the algorithm, and $S_O$ is the size of the globally optimal (minimum) vertex cover.", "solution": "We analyze the algorithm on the graph $K_{2,3}$ with parts $A=\\{a_{1},a_{2}\\}$ and $B=\\{b_{1},b_{2},b_{3}\\}$, initialized at $C_{0}=B=\\{b_{1},b_{2},b_{3}\\}$.\n\nStep 2 (Reduction): A cover $C$ is not minimal if there exists $u \\in C$ such that $C \\setminus \\{u\\}$ is still a vertex cover. Take any $u=b_{j} \\in C_{0}$. Consider $C_{0}\\setminus\\{b_{j}\\}=\\{b_{1},b_{2},b_{3}\\}\\setminus\\{b_{j}\\}$. The edges incident to $b_{j}$ are $(a_{1},b_{j})$ and $(a_{2},b_{j})$. Since $a_{1},a_{2} \\notin C_{0}\\setminus\\{b_{j}\\}$ and $b_{j} \\notin C_{0}\\setminus\\{b_{j}\\}$, each of these edges would have neither endpoint in $C_{0}\\setminus\\{b_{j}\\}$, so $C_{0}\\setminus\\{b_{j}\\}$ is not a vertex cover. Hence no $b_{j}$ can be removed, and $C_{0}$ is minimal. Therefore Step 2 terminates with $C=B$ of size $3$.\n\nStep 3 (Swap): A swap replaces some $u \\in C$ with some $v \\in V \\setminus C$ while preserving the vertex cover property. Here $C=B$ and $V\\setminus C=A$. Let $u=b_{j}$ and $v=a_{i}$, and define $C'=(C\\setminus\\{b_{j}\\})\\cup\\{a_{i}\\}$. Consider the edge $(a_{k},b_{j})$ where $\\{i,k\\}=\\{1,2\\}$. In $C'$, we have $a_{k} \\notin C'$ and $b_{j} \\notin C'$, so $(a_{k},b_{j})$ is uncovered. Therefore no such swap produces a vertex cover, and Step 3 finds no valid swap. The algorithm terminates and returns $C=B$ with size $S_{L}=3$.\n\nGlobal optimum: The set $A=\\{a_{1},a_{2}\\}$ is a vertex cover, since every edge of $K_{2,3}$ is incident to a vertex in $A$, so there exists a vertex cover of size $2$. By Kőnig’s theorem (or the matching lower bound), $\\alpha^{\\ast}=\\nu$ for bipartite graphs, where $\\alpha^{\\ast}$ is the minimum vertex cover size and $\\nu$ is the maximum matching size. In $K_{2,3}$, $\\nu=2$ (match each $a_{i}$ to a distinct $b_{j}$), hence any vertex cover has size at least $2$. Since the cover $A$ attains size $2$, the minimum vertex cover size is $S_{O}=2$.\n\nTherefore, the algorithm returns a locally optimal cover of size $3$, while the globally optimal vertex cover has size $2$.", "answer": "$$\\boxed{\\begin{pmatrix} 3 & 2 \\end{pmatrix}}$$", "id": "1481689"}]}