{"hands_on_practices": [{"introduction": "While the Max-Cut problem is NP-hard for general graphs, it's essential to recognize that for certain classes of graphs, the solution can be found efficiently. This first exercise explores one such fundamental case: bipartite graphs. By understanding why Max-Cut is tractable on these graphs, you'll gain insight into the structural properties that make partitioning problems easy or hard [@problem_id:1481525].", "problem": "In network analysis, a common problem is to partition the nodes of a network into two groups to maximize the connections between the groups. This is formally known as the Maximum Cut (MAX-CUT) problem. Given a graph $G = (V, E)$, where $V$ is the set of vertices (nodes) and $E$ is the set of edges (connections), a cut is a partition of $V$ into two disjoint sets, $S_1$ and $S_2$. The size of the cut is the number of edges connecting a vertex in $S_1$ to a vertex in $S_2$. The MAX-CUT problem seeks to find a cut with the largest possible size. In general, MAX-CUT is an NP-hard problem, meaning it is widely believed that no efficient (polynomial-time) algorithm exists to find the exact solution for all possible graphs.\n\nNow, consider a special type of graph called a bipartite graph. A graph is bipartite if its vertices can be divided into two disjoint and independent sets, $U$ and $W$, such that every edge in the graph connects a vertex in $U$ to one in $W$. Let a given bipartite graph have a total of $|E|$ edges.\n\nWhich of the following statements correctly describes both the size of the maximum cut for any bipartite graph with $|E|$ edges and the implication for the computational complexity of the MAX-CUT problem on this class of graphs?\n\nA. The maximum cut has a size of $|E|/2$. The problem remains NP-hard, but a good approximation is possible.\n\nB. The maximum cut has a size of $|E|$. The problem can be solved in polynomial time for bipartite graphs.\n\nC. The maximum cut size depends on the specific structure of the bipartite graph, not just $|E|$. The problem remains NP-hard.\n\nD. The maximum cut has a size of $|E|$. The problem is still NP-hard, but it admits a perfect approximation scheme.\n\nE. The maximum cut has a size of at least $|E|/2$. The problem can be solved in polynomial time for bipartite graphs.", "solution": "By definition, a cut of a graph $G=(V,E)$ is a partition $(S_1,S_2)$ of $V$, and its size is the number of edges with one endpoint in $S_1$ and the other in $S_2$. The MAX-CUT problem seeks a cut of maximum size.\n\nSuppose $G$ is bipartite with bipartition $(U,W)$, meaning every edge has one endpoint in $U$ and the other in $W$. Consider the cut obtained by taking $S_1=U$ and $S_2=W$. Since every edge connects a vertex in $U$ to a vertex in $W$ by the definition of bipartiteness, every edge is counted by this cut. Therefore, the size of this cut equals the total number of edges:\n$$\n\\text{cut size}(U,W)=|E|.\n$$\nNo cut can have size larger than $|E|$, since there are only $|E|$ edges in total. Hence the maximum cut size is exactly\n$$\n\\max_{(S_1,S_2)}\\text{cut size}(S_1,S_2)=|E|.\n$$\n\nRegarding computational complexity, finding such a maximum cut on bipartite graphs is straightforward. One can find a bipartition $(U,W)$ in polynomial time using, for example, a breadth-first search to 2-color the graph, and then output the cut $(U,W)$, which has size $|E|$. Therefore, on bipartite graphs, MAX-CUT is solvable in polynomial time.\n\nThus, the correct statement is that the maximum cut has size $|E|$ and the problem is polynomial-time solvable for bipartite graphs.", "answer": "$$\\boxed{B}$$", "id": "1481525"}, {"introduction": "When faced with an NP-hard problem, one of the simplest and often surprisingly effective strategies is randomization. This practice introduces a basic randomized algorithm where each vertex is assigned to a partition with a coin flip. By analyzing its performance on a star graph, you will determine the optimal cut and calculate the exact probability that this simple random process achieves it, highlighting the difference between finding *an* answer and finding the *best* answer [@problem_id:1481517].", "problem": "Consider a star graph, denoted $S_n$, for an integer $n \\geq 3$. This graph consists of $n$ vertices: one central vertex and $n-1$ peripheral \"leaf\" vertices. The central vertex is connected by an edge to each of the $n-1$ leaves, and there are no other edges in the graph.\n\nA cut of a graph is a partition of its vertices into two disjoint sets, which we can call $U$ and $W$. The size of the cut is defined as the number of edges that have one endpoint in $U$ and the other in $W$. The goal of the Max-Cut problem is to find a partition that maximizes this size.\n\nNow, consider a simple randomized algorithm for finding a cut. For each vertex in $S_n$, the algorithm assigns it to set $U$ with probability $1/2$ or to set $W$ with probability $1/2$, with each assignment being independent of all others.\n\nYour task is to find two quantities. First, determine the size of the maximum possible cut (Max-Cut) for the star graph $S_n$. Second, calculate the exact probability that the described randomized algorithm produces a cut of this maximum size.\n\nProvide your final answer as two expressions in terms of $n$: the size of the Max-Cut and the calculated probability, in that order.", "solution": "In the star graph $S_n$ there are $n-1$ edges, each incident to the unique central vertex. For any cut $(U,W)$, an edge contributes to the cut size if and only if its endpoints are separated. Therefore, the cut size equals the number of leaves placed on the side opposite to the central vertex. This number is maximized when the central vertex is placed in one part and all $n-1$ leaves are placed in the other part. Since the total number of edges is $n-1$, this upper bound is attainable, hence the maximum cut size is\n$$\nn-1.\n$$\n\nFor the randomized algorithm, each vertex independently goes to $U$ with probability $\\frac{1}{2}$ and to $W$ with probability $\\frac{1}{2}$. A maximum cut occurs exactly when all leaves are on the side opposite to the central vertex. There are two disjoint favorable configurations: central vertex in $U$ and all leaves in $W$, or central vertex in $W$ and all leaves in $U$. The probability of the first configuration is\n$$\n\\frac{1}{2}\\left(\\frac{1}{2}\\right)^{n-1}=\\left(\\frac{1}{2}\\right)^{n},\n$$\nand the second configuration has the same probability. By additivity over disjoint events, the total probability that the algorithm produces a maximum cut is\n$$\n2\\left(\\frac{1}{2}\\right)^{n}=2^{1-n}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix} n-1 & 2^{1-n} \\end{pmatrix}}$$", "id": "1481517"}, {"introduction": "Randomized algorithms provide excellent performance guarantees on average, but what if we need a deterministic procedure? This final practice introduces the method of conditional expectations, a powerful technique for converting a randomized algorithm into a deterministic one. You will perform the first step of this derandomization process, making a calculated decision for a single vertex that guarantees the expected size of the final cut does not decrease, providing a glimpse into how probabilistic guarantees can be transformed into concrete algorithmic steps [@problem_id:1481479].", "problem": "Consider an undirected graph $G=(V, E)$, where $V$ is a set of vertices and $E$ is a set of edges. The Maximum Cut (MAX-CUT) problem seeks to find a partition of the vertices $V$ into two disjoint sets, $S_1$ and $S_2$, such that the number of edges with one endpoint in $S_1$ and the other in $S_2$ is maximized.\n\nA simple randomized algorithm for MAX-CUT assigns each vertex to either $S_1$ or $S_2$ with equal probability, independently for each vertex. This randomized approach can be derandomized using the method of conditional expectations. The derandomized procedure considers vertices one by one in a fixed order, say $v_1, v_2, \\dots, v_n$. For each vertex $v_i$ ($i=1, \\dots, n$), it makes a deterministic choice to place it in either $S_1$ or $S_2$. The choice is made to maximize the conditional expectation of the final total cut size. This expectation is conditioned on the placements determined for vertices $v_1, \\dots, v_{i-1}$ and the tentative placement for $v_i$, while averaging over all possible random placements of the subsequent vertices $v_{i+1}, \\dots, v_n$.\n\nSuppose you are given a graph with the vertex set $V=\\{v_1, v_2, v_3, v_4, v_5\\}$ and the edge set $E = \\{(v_1, v_2), (v_1, v_4), (v_2, v_3), (v_2, v_5), (v_3, v_4), (v_4, v_5)\\}$.\n\nYour task is to perform the first calculation in this derandomization process. Calculate the conditional expected size of the cut, given that vertex $v_1$ is placed into partition $S_1$. Express your answer as a single real number.", "solution": "Let $X$ denote the total cut size and for each edge $e \\in E$ define the indicator $X_e$ that equals $1$ if $e$ is cut and $0$ otherwise. Then\n$$\n\\mathbb{E}[X \\mid v_1 \\in S_1] \\;=\\; \\sum_{e \\in E} \\mathbb{E}[X_e \\mid v_1 \\in S_1] \\;=\\; \\sum_{e \\in E} \\mathbb{P}(e\\ \\text{is cut} \\mid v_1 \\in S_1).\n$$\nConsider edges incident to $v_1$: $(v_1,v_2)$ and $(v_1,v_4)$. Given $v_1 \\in S_1$, each of $v_2$ and $v_4$ independently goes to $S_1$ or $S_2$ with probability $\\frac{1}{2}$ each, so\n$$\n\\mathbb{P}((v_1,v_2)\\ \\text{is cut} \\mid v_1 \\in S_1) \\;=\\; \\mathbb{P}(v_2 \\in S_2) \\;=\\; \\frac{1}{2},\n$$\nand similarly for $(v_1,v_4)$. For edges not incident to $v_1$, namely $(v_2,v_3), (v_2,v_5), (v_3,v_4), (v_4,v_5)$, both endpoints are independently assigned to $S_1$ or $S_2$ with probability $\\frac{1}{2}$, hence\n$$\n\\mathbb{P}((u,w)\\ \\text{is cut} \\mid v_1 \\in S_1) \\;=\\; \\mathbb{P}(u \\in S_1, w \\in S_2) + \\mathbb{P}(u \\in S_2, w \\in S_1) \\;=\\; 2 \\cdot \\frac{1}{2} \\cdot \\frac{1}{2} \\;=\\; \\frac{1}{2}.\n$$\nThere are $6$ edges in total, each contributing $\\frac{1}{2}$ in expectation, so\n$$\n\\mathbb{E}[X \\mid v_1 \\in S_1] \\;=\\; 6 \\cdot \\frac{1}{2} \\;=\\; 3.\n$$", "answer": "$$\\boxed{3}$$", "id": "1481479"}]}