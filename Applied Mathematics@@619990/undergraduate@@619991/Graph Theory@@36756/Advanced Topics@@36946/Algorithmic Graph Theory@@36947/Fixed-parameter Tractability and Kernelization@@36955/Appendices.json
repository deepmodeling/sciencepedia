{"hands_on_practices": [{"introduction": "Kernelization is a core technique in fixed-parameter tractability, allowing us to simplify large problem instances by applying polynomial-time reduction rules. This exercise provides hands-on practice with this fundamental concept by asking you to repeatedly apply simple, safe rules to a graph for the Feedback Vertex Set problem. By doing so, you will directly observe how a complex graph is reduced to a smaller, \"hard\" kernel, which is the essence of this preprocessing approach [@problem_id:1504250].", "problem": "In computational complexity theory, the Feedback Vertex Set (FVS) problem is a classic graph problem. For an undirected graph $G=(V, E)$, a feedback vertex set is a subset of vertices $S \\subseteq V$ such that the graph $G-S$, obtained by removing the vertices in $S$ and all incident edges, is acyclic (i.e., a forest). The decision version of the FVS problem asks, for a given graph $G$ and an integer parameter $k$, whether there exists a feedback vertex set of size at most $k$.\n\nThis problem is computationally hard in general. However, it is fixed-parameter tractable, which means we can design a kernelization algorithm. A kernelization algorithm consists of a set of polynomial-time reduction rules that transform a problem instance $(G, k)$ into an equivalent, smaller instance $(G', k')$. An instance is considered equivalent if a solution for it can be used to construct a solution for the original instance. For FVS, a rule is safe if any minimum FVS for $G'$ can be transformed into a minimum FVS for $G$ (and vice-versa). An instance is irreducible if no more reduction rules can be applied. The final irreducible instance is called the kernel.\n\nConsider the following two simple reduction rules for the FVS problem:\n- **Rule A (Isolated Vertex Removal):** If a vertex $v$ has a degree of 0, an equivalent instance is formed by removing $v$ from the graph. The new instance is $(G-v, k)$.\n- **Rule B (Leaf Vertex Removal):** If a vertex $v$ has a degree of 1, an equivalent instance is formed by removing $v$ from the graph. The new instance is $(G-v, k)$.\n\nYou are given an undirected graph $G$ with the vertex set $V = \\{v_1, v_2, v_3, v_4, v_5, v_6, v_7, v_8, v_9, v_{10}, v_{11}, v_{12}\\}$ and the edge set $E$ containing the following edges: $\\{v_2, v_3\\}$, $\\{v_3, v_4\\}$, $\\{v_4, v_2\\}$, $\\{v_5, v_6\\}$, $\\{v_6, v_7\\}$, $\\{v_7, v_5\\}$, $\\{v_4, v_5\\}$, $\\{v_2, v_8\\}$, $\\{v_8, v_9\\}$, $\\{v_6, v_{10}\\}$, and $\\{v_{11}, v_{12}\\}$.\n\nStarting with the graph $G$, apply Rule A and Rule B repeatedly in any order until the graph is irreducible (i.e., no more applications of either rule are possible). What is the total number of vertices in the final, irreducible graph?", "solution": "We begin with the undirected graph $G=(V,E)$ where $V=\\{v_{1},v_{2},v_{3},v_{4},v_{5},v_{6},v_{7},v_{8},v_{9},v_{10},v_{11},v_{12}\\}$ and edges $E=\\{\\{v_{2},v_{3}\\},\\{v_{3},v_{4}\\},\\{v_{4},v_{2}\\},\\{v_{5},v_{6}\\},\\{v_{6},v_{7}\\},\\{v_{7},v_{5}\\},\\{v_{4},v_{5}\\},\\{v_{2},v_{8}\\},\\{v_{8},v_{9}\\},\\{v_{6},v_{10}\\},\\{v_{11},v_{12}\\}\\}$. We compute initial degrees by counting incident edges:\n$$\n\\deg(v_{1})=0,\\quad \\deg(v_{2})=3,\\quad \\deg(v_{3})=2,\\quad \\deg(v_{4})=3,\\quad \\deg(v_{5})=3,\\quad \\deg(v_{6})=3,\n$$\n$$\n\\deg(v_{7})=2,\\quad \\deg(v_{8})=2,\\quad \\deg(v_{9})=1,\\quad \\deg(v_{10})=1,\\quad \\deg(v_{11})=1,\\quad \\deg(v_{12})=1.\n$$\nWe repeatedly apply Rule A (remove isolated vertex) and Rule B (remove leaf).\n\n1) Apply Rule A to $v_{1}$ since $\\deg(v_{1})=0$. The new vertex set is $V_{1}=V\\setminus\\{v_{1}\\}$. Degrees of all other vertices are unchanged.\n\n2) Apply Rule B to $v_{9}$ since $\\deg(v_{9})=1$ with neighbor $v_{8}$. Remove $v_{9}$: $V_{2}=V_{1}\\setminus\\{v_{9}\\}$. Update the neighbor’s degree:\n$$\n\\deg_{2}(v_{8})=\\deg(v_{8})-1=1.\n$$\n\n3) Apply Rule B to $v_{8}$ since now $\\deg_{2}(v_{8})=1$ with neighbor $v_{2}$. Remove $v_{8}$: $V_{3}=V_{2}\\setminus\\{v_{8}\\}$. Update the neighbor’s degree:\n$$\n\\deg_{3}(v_{2})=\\deg(v_{2})-1=2.\n$$\n\n4) Apply Rule B to $v_{10}$ since $\\deg(v_{10})=1$ with neighbor $v_{6}$. Remove $v_{10}$: $V_{4}=V_{3}\\setminus\\{v_{10}\\}$. Update the neighbor’s degree:\n$$\n\\deg_{4}(v_{6})=\\deg(v_{6})-1=2.\n$$\n\n5) Apply Rule B to $v_{11}$ since $\\deg(v_{11})=1$ with neighbor $v_{12}$. Remove $v_{11}$: $V_{5}=V_{4}\\setminus\\{v_{11}\\}$. Update the neighbor’s degree:\n$$\n\\deg_{5}(v_{12})=\\deg(v_{12})-1=0.\n$$\n\n6) Apply Rule A to $v_{12}$ since now $\\deg_{5}(v_{12})=0$. Remove $v_{12}$: $V_{6}=V_{5}\\setminus\\{v_{12}\\}$.\n\nThe remaining vertices are $V_{6}=\\{v_{2},v_{3},v_{4},v_{5},v_{6},v_{7}\\}$. The remaining edges are those not incident to removed vertices:\n$$\nE_{6}=\\{\\{v_{2},v_{3}\\},\\{v_{3},v_{4}\\},\\{v_{4},v_{2}\\},\\{v_{5},v_{6}\\},\\{v_{6},v_{7}\\},\\{v_{7},v_{5}\\},\\{v_{4},v_{5}\\}\\}.\n$$\nCompute final degrees:\n$$\n\\deg_{6}(v_{2})=2,\\quad \\deg_{6}(v_{3})=2,\\quad \\deg_{6}(v_{4})=3,\\quad \\deg_{6}(v_{5})=3,\\quad \\deg_{6}(v_{6})=2,\\quad \\deg_{6}(v_{7})=2.\n$$\nThere are no vertices of degree $0$ or $1$, so no further applications of Rule A or Rule B are possible. The instance is irreducible. Therefore, the total number of vertices in the final irreducible graph is $|V_{6}|=6$.", "answer": "$$\\boxed{6}$$", "id": "1504250"}, {"introduction": "While applying reduction rules is a mechanical process, designing and verifying them requires a deeper understanding of their mathematical soundness. A rule is only useful if it is \"safe\"—meaning it doesn't change the answer to the problem. This practice challenges you to analyze a common reduction rule for the Dominating Set problem and identify the formal argument that proves its safety, a crucial skill for anyone designing advanced algorithms [@problem_id:1504226].", "problem": "In graph theory, a **dominating set** for a graph $G=(V, E)$ is a subset of vertices $D \\subseteq V$ such that every vertex not in $D$ is adjacent to at least one vertex in $D$. The **$k$-Dominating Set** problem asks whether a given graph $G$ has a dominating set of size at most $k$. This problem is a classic NP-hard problem.\n\nOne approach to tackling such problems is through **Fixed-Parameter Tractability (FPT)**. A core technique in FPT is **kernelization**, which involves using polynomial-time **reduction rules** to simplify a problem instance $(G, k)$ into an equivalent, smaller instance $(G', k')$. A reduction rule is considered \"safe\" if the original instance $(G, k)$ has a solution if and only if the reduced instance $(G', k')$ has a solution.\n\nLet's consider a specific scenario in an undirected graph $G$. For any vertex $x \\in V$, its **closed neighborhood**, denoted $N[x]$, is the set containing $x$ and all of its adjacent vertices. Suppose we have two distinct vertices, $u$ and $v$, such that the closed neighborhood of $u$ is a subset of the closed neighborhood of $v$, i.e., $N[u] \\subseteq N[v]$.\n\nA common reduction rule for this situation is to remove the vertex $u$. The argument for this rule's safety relies on a crucial observation about the structure of any potential minimum-sized dominating set. Specifically, it can be proven that if any minimum dominating set for $G$ exists, then there *must* also exist a minimum dominating set that does not contain the vertex $u$.\n\nWhich of the following statements provides the most accurate and complete justification for this specific claim (i.e., that a minimum dominating set can always be found that excludes $u$)?\n\nA. If a minimum dominating set $D$ contains $u$, we can create a new set $D^* = D \\setminus \\{u\\}$. This new set is smaller than $D$, and because $N[u] \\subseteq N[v]$, it still dominates almost all the same vertices. This implies that $D$ was not minimum, a contradiction.\n\nB. If a minimum dominating set $D$ contains $u$, we can construct a new set $D^* = (D \\setminus \\{u\\}) \\cup \\{v\\}$. Any vertex originally dominated by $u$ belongs to $N[u]$. Since $N[u] \\subseteq N[v]$, that vertex is also in $N[v]$ and is therefore dominated by $v$ in the new set $D^*$. All other vertices remain dominated by the other members of $D$. The size of $D^*$ is at most the size of $D$, so we have found a dominating set of no greater size that does not contain $u$.\n\nC. Because $N[u] \\subseteq N[v]$, vertex $v$ is more central to the graph. Central vertices are more likely to be in a minimum dominating set. Therefore, any algorithm searching for a minimum dominating set should prioritize selecting $v$ over $u$, meaning we can safely assume $u$ is not selected.\n\nD. Any dominating set must dominate $u$. The vertices that can dominate $u$ are in the set $N[u]$. Since $N[u] \\subseteq N[v]$, it is always more efficient to use $v$ to dominate the vertices in $N[u]$ than to use $u$ itself. Therefore, $u$ should never be selected as part of a minimum dominating set.\n\nE. Let $D$ be a minimum dominating set containing $u$. To dominate $u$, $D$ must contain a vertex from $N[u]$. Since $u \\in D$, this condition is met. Because $N[u] \\subseteq N[v]$, this implies $D$ must also contain a vertex from $N[v]$, which means $u$ can be removed without affecting the dominating property.", "solution": "We recall the definitions. For a graph $G=(V,E)$ and a vertex $x\\in V$, the closed neighborhood is $N[x]=\\{x\\}\\cup\\{y\\in V:\\{x,y\\}\\in E\\}$. A set $D\\subseteq V$ is a dominating set if for every $w\\in V$ there exists $d\\in D$ such that $w\\in N[d]$. Suppose $u,v\\in V$ are distinct and satisfy $N[u]\\subseteq N[v]$.\n\nClaim: If $D$ is a minimum dominating set and $u\\in D$, then there exists a minimum dominating set $D^{*}$ with $u\\notin D^{*}$.\n\nProof. Define $D^{\\prime}=(D\\setminus\\{u\\})\\cup\\{v\\}$. We show $D^{\\prime}$ is a dominating set and $|D^{\\prime}|\\leq |D|$. First, by construction, either $v\\in D$ already, in which case $D^{\\prime}=D\\setminus\\{u\\}$ and $|D^{\\prime}|=|D|-1$, or $v\\notin D$, in which case $|D^{\\prime}|=|D|$. Hence in all cases $|D^{\\prime}|\\leq |D|$.\n\nNext, we verify the dominating property. Let $w\\in V$ be arbitrary. Since $D$ is a dominating set, there exists some $d\\in D$ with $w\\in N[d]$. If $d\\neq u$, then $d\\in D\\setminus\\{u\\}\\subseteq D^{\\prime}$, hence $w$ remains dominated by $d$ in $D^{\\prime}$. If $d=u$, then $w\\in N[u]$. Because $N[u]\\subseteq N[v]$, it follows that $w\\in N[v]$. Since $v\\in D^{\\prime}$ by definition, $w$ is dominated by $v$ in $D^{\\prime}$. Therefore every $w\\in V$ is dominated by some vertex in $D^{\\prime}$, so $D^{\\prime}$ is a dominating set.\n\nBecause $D$ was minimum (of minimum cardinality), the inequality $|D^{\\prime}|\\leq |D|$ implies $|D^{\\prime}|=|D|$, so $D^{\\prime}$ is also a minimum dominating set. Moreover, if $v\\in D$, then $D^{\\prime}=D\\setminus\\{u\\}$ already excludes $u$; if $v\\notin D$, then $D^{\\prime}$ excludes $u$ by construction. Thus, in either case, there exists a minimum dominating set that does not contain $u$.\n\nThis argument is exactly captured by option B. The other options are deficient: A removes $u$ without guaranteeing domination for vertices uniquely dominated by $u$; C appeals to heuristic “centrality” rather than a correctness proof; D asserts “more efficient” without a formal replacement argument; E incorrectly infers that the presence of some vertex in $N[v]$ within $D$ (possibly only $u$ itself) allows removing $u$ without replacement, which is not justified. Hence the most accurate and complete justification is given by B.", "answer": "$$\\boxed{B}$$", "id": "1504226"}, {"introduction": "When a problem doesn't admit a small kernel, we can often turn to another powerful FPT technique: the bounded search tree. This approach explores a solution space that, while potentially huge, has a size bounded by a function of the parameter $k$. This exercise guides you through analyzing the efficiency of such a search tree algorithm, demonstrating how we can gain confidence that our algorithm is truly fixed-parameter tractable [@problem_id:1504264].", "problem": "A graph is called an \"even-degree graph\" if every vertex in the graph has an even degree. A computer scientist is working on the **Even-Degree Subgraph by Vertex Deletion** problem: given a graph $G=(V, E)$ and an integer parameter $k$, can we delete at most $k$ vertices to obtain an even-degree subgraph?\n\nThey propose the following bounded search tree algorithm, named `Solve(G, k)`:\n1.  Identify the set $O$ of vertices with odd degree in the current graph $G$.\n2.  If the set $O$ is empty, the condition is met. Return `TRUE`.\n3.  If $k=0$ and the set $O$ is not empty, we have no more vertices to delete. Return `FALSE`.\n4.  Select an odd-degree vertex $v \\in O$.\n5.  Branch on all possible single-vertex deletions within the closed neighborhood of $v$, denoted $N[v] = \\{v\\} \\cup N(v)$, where $N(v)$ is the set of neighbors of $v$. For each vertex $u \\in N[v]$:\n    a. Recursively call the algorithm `Solve(G-u, k-1)`.\n    b. If this recursive call returns `TRUE`, then a solution is found. Immediately return `TRUE`.\n6.  If all branches have been explored and none returned `TRUE`, then no solution is possible via this path. Return `FALSE`.\n\nFor your analysis, you can rely on an established (but unproven here) result from graph theory: in step 4, it is always possible to select an odd-degree vertex $v$ whose degree in the current graph, $\\deg(v)$, is bounded by $2k'+1$, where $k'$ is the current budget for deletions in that recursive call.\n\nYour task is to determine a tight upper bound on the number of leaves in the search tree generated by this algorithm for an initial budget of $k$. Express your answer as a mathematical expression in terms of $k$.", "solution": "Let $L(k)$ denote the maximum number of leaves in the search tree produced by the algorithm when invoked with budget $k$.\n\nBase cases:\n- If $k=0$, the algorithm returns immediately in step 2 or step 3 without branching, hence $L(0) \\leq 1$.\n\nInductive branching bound:\n- Consider a recursive call with current budget $k' \\geq 1$. By the given graph-theoretic guarantee, there exists an odd-degree vertex $v$ with $\\deg(v) \\leq 2k' + 1$.\n- The algorithm branches on all vertices in $N[v]$, so the number of branches at this node is at most\n$$\n|N[v]| \\leq \\deg(v) + 1 \\leq 2k' + 2.\n$$\n- Each branch reduces the budget by one, so the number of leaves satisfies the recurrence\n$$\nL(k') \\leq (2k' + 2)\\,L(k' - 1), \\quad \\text{for } k' \\geq 1,\n$$\nwith $L(0) \\leq 1$.\n\nUnfolding the recurrence from $k$ down to $0$ yields\n$$\nL(k) \\leq \\prod_{i=1}^{k} (2i + 2)\\,L(0) \\leq \\prod_{i=1}^{k} (2i + 2).\n$$\nEvaluate the product:\n$$\n\\prod_{i=1}^{k} (2i + 2) = 2^{k} \\prod_{i=1}^{k} (i + 1) = 2^{k} (k + 1)!.\n$$\n\nTherefore, the number of leaves is upper-bounded by $2^{k} (k+1)!$. This bound is tight for this branching scheme and degree bound, since there exist worst-case instances in which at each level the chosen odd-degree vertex achieves $\\deg(v) = 2k' + 1$ and no branch terminates early before exhausting the budget, realizing the full product of branching factors.", "answer": "$$\\boxed{2^{k}(k+1)!}$$", "id": "1504264"}]}