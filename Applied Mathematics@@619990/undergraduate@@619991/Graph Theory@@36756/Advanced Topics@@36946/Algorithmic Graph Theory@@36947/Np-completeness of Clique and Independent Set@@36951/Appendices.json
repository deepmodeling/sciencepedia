{"hands_on_practices": [{"introduction": "The Maximum Independent Set problem is a cornerstone of graph theory and a classic example of an NP-hard problem, meaning no known efficient algorithm can find the optimal solution for all graphs. However, \"hard in general\" does not mean \"hard in all cases.\" This exercise invites you to explore this idea by focusing on a highly structured graph: the grid graph. By leveraging the graph's unique properties, you can devise a simple and elegant strategy to find the maximum independent set, illustrating a key principle in algorithm design: exploiting structure can turn intractable problems into solvable ones. [@problem_id:1524159]", "id": "1524159", "problem": "An independent set of vertices in a graph is a set of vertices where no two vertices are adjacent. The problem of finding the *maximum independent set* (the independent set with the largest possible number of vertices) is famously difficult for general graphs and is a central problem in computer science and graph theory. However, for certain highly structured graphs, the problem can be solved efficiently.\n\nConsider an $m \\times n$ grid graph, denoted $G_{m,n}$. The vertices of this graph can be pictured as the cells in a grid with $m$ rows and $n$ columns. We can label each vertex with integer coordinates $(i,j)$ where $1 \\le i \\le m$ and $1 \\le j \\le n$. An edge exists between two vertices if their corresponding cells are adjacent either horizontally or vertically, but not diagonally. That is, an edge connects vertex $(i,j)$ to vertex $(i', j')$ if and only if $|i-i'| + |j-j'|=1$.\n\nDetermine a simple, closed-form expression for the size of the maximum independent set of $G_{m,n}$ in terms of the positive integers $m$ and $n$.\n\n", "solution": "Color the vertices of the grid graph $G_{m,n}$ in a checkerboard pattern by parity of the coordinate sum: assign color class $B=\\{(i,j): i+j \\text{ is even}\\}$ and $W=\\{(i,j): i+j \\text{ is odd}\\}$. For any edge, the endpoints differ by exactly one in $i$ or $j$, so their sums have opposite parity. Therefore there are no edges within $B$ nor within $W$, and both $B$ and $W$ are independent sets. Their sizes satisfy $|B|+|W|=mn$ and $||B|-|W||\\leq 1$, hence $\\max\\{|B|,|W|\\}=\\left\\lceil \\frac{mn}{2}\\right\\rceil$. This gives the lower bound\n$$\n\\alpha(G_{m,n}) \\geq \\left\\lceil \\frac{mn}{2} \\right\\rceil.\n$$\n\nTo prove the matching upper bound, tile the $m\\times n$ grid by disjoint dominoes (each domino is a $1\\times 2$ or $2\\times 1$ pair of adjacent cells). If at least one of $m$ or $n$ is even, the grid can be partitioned entirely into $\\frac{mn}{2}$ dominoes. If both $m$ and $n$ are odd, the grid can be partitioned into $\\frac{mn-1}{2}$ dominoes plus one leftover single cell. In any case, in each domino the two cells are adjacent, so any independent set can include at most one vertex from each domino. Therefore, when at least one of $m,n$ is even,\n$$\n\\alpha(G_{m,n}) \\leq \\frac{mn}{2} = \\left\\lceil \\frac{mn}{2} \\right\\rceil,\n$$\nand when both $m,n$ are odd,\n$$\n\\alpha(G_{m,n}) \\leq \\frac{mn-1}{2} + 1 = \\frac{mn+1}{2} = \\left\\lceil \\frac{mn}{2} \\right\\rceil.\n$$\nCombining the lower and upper bounds yields\n$$\n\\alpha(G_{m,n}) = \\left\\lceil \\frac{mn}{2} \\right\\rceil.\n$$\nThis closed form is achieved by taking the larger of the two checkerboard color classes.", "answer": "$$\\boxed{\\left\\lceil \\frac{mn}{2} \\right\\rceil}$$"}, {"introduction": "Understanding the precise meaning of NP-completeness is crucial for any computer scientist or mathematician. It's a common misconception that if a problem is NP-complete, any variation of it is computationally intractable. This practice problem directly challenges that notion by examining the CLIQUE problem, the equally famous counterpart to the Independent Set problem. By considering a fixed clique size $k=4$, you will analyze how the problem's complexity changes, revealing that it becomes solvable in polynomial time and thus belongs to the class P. [@problem_id:1524175]", "id": "1524175", "problem": "A social network is modeled as a graph $G=(V, E)$, where the set of vertices $V$ represents the users and an edge $(u, v)$ in the set of edges $E$ exists if and only if user $u$ and user $v$ are friends. The size of the network is given by $n = |V|$, the number of users.\n\nA data science team is tasked with a project to identify \"quartets,\" which are defined as groups of 4 distinct users who are all mutually friends with each other. A junior developer on the team recalls from their algorithms course that the general CLIQUE problem (which asks: \"Given a graph $G$ and an integer $k$, does $G$ have a clique of size $k$?\") is NP-complete. They are concerned that their task of finding quartets will be computationally intractable for a network with millions of users.\n\nAs a senior engineer, you need to correctly characterize the computational complexity of the specific problem of determining if at least one such quartet exists in the network. Which of the following statements is the most accurate description of this problem?\n\nA. The problem is NP-complete because finding a quartet is a special case of the CLIQUE problem with $k=4$.\nB. The problem is in the complexity class P, as an algorithm with a running time polynomial in $n$ can be designed to solve it.\nC. The problem is undecidable, meaning no algorithm can solve it for all possible graphs.\nD. The problem is solvable in logarithmic time, i.e., $O(\\log n)$, by using advanced graph traversal techniques.\nE. The problem's complexity is exponential, $O(4^n)$, because one must check all possible subsets of 4-user groups.\n\n", "solution": "We are given a graph $G=(V,E)$ with $n=|V|$ and must decide whether there exists a $4$-clique (a set of $4$ distinct vertices that are all pairwise adjacent). This is the decision version of the $k$-CLIQUE problem with $k=4$ fixed.\n\nKey observation: The general CLIQUE problem is NP-complete when the clique size $k$ is part of the input. However, when $k$ is a fixed constant, there is a straightforward polynomial-time algorithm. Specifically, to decide whether there exists a $4$-clique, we can enumerate all $4$-subsets of $V$ and check whether each induces a complete subgraph.\n\nThe number of $4$-subsets is\n$$\n\\binom{n}{4}.\n$$\nFor each chosen $4$-subset, we need to check whether all $\\binom{4}{2}$ pairs among the $4$ vertices are edges in $E$. Using an adjacency matrix representation, each edge query is $O(1)$ time, and since $\\binom{4}{2}$ is a constant, the total time per subset is $O(1)$. Therefore, the total running time is\n$$\nO\\!\\left(\\binom{n}{4}\\right)=O\\!\\left(n^{4}\\right),\n$$\nwhich is polynomial in $n$. Hence, the problem is in the class P.\n\nNow we evaluate the options:\n- A is incorrect because NP-completeness applies when $k$ varies with the input; for fixed $k=4$, the problem is solvable in polynomial time.\n- B is correct as shown by the $O(n^{4})$ algorithm above.\n- C is incorrect because the problem is decidable on finite inputs; the brute-force algorithm described always halts.\n- D is incorrect because $O(\\log n)$ is not achievable under standard input models; even reading the input requires at least linear time in the input size.\n- E is incorrect because checking all $4$-subsets is $O(n^{4})$, not $O(4^{n})$. Indeed, $\\binom{n}{4}=\\Theta(n^{4})$.\n\nTherefore, the most accurate description is that the problem lies in P.", "answer": "$$\\boxed{B}$$"}, {"introduction": "Having seen that some specialized graph problems are easy and that the definition of 'hard' is nuanced, we now confront the original challenge: what do we do for general graphs where the problem remains NP-hard? In practice, we often turn to heuristicsâ€”fast, intuitive algorithms that provide a \"good enough\" solution, even if not provably optimal. This exercise introduces a simple 'Minimum-Degree-First' greedy algorithm and asks you to apply it to a carefully constructed graph. Your task will not only be to execute the algorithm but also to implicitly discover its limitations, a vital lesson in the real-world application of theoretical concepts. [@problem_id:1524145]", "id": "1524145", "problem": "In graph theory, an independent set of a graph is a set of vertices where no two vertices in the set are adjacent. Finding the maximum independent set (an independent set of the largest possible size) is a computationally hard problem. One heuristic approach is a greedy algorithm.\n\nConsider the following 'Minimum-Degree-First' greedy algorithm for finding an independent set in a given graph $G=(V, E)$:\n1. Initialize the independent set $S$ to be empty.\n2. While the graph $G$ is not empty:\n    a. Select a vertex $v$ that has the minimum degree in the current graph. If there is a tie for the minimum degree, choose the vertex that comes first in lexicographical order (e.g., 'a' before 'b', 'v1' before 'v2').\n    b. Add the selected vertex $v$ to the set $S$.\n    c. Remove $v$ and all of its neighbors from the graph $G$.\n3. Return the set $S$.\n\nYou are given a specific undirected graph $G$ defined by its vertex set $V$ and edge set $E$.\nThe vertex set is $V = \\{c, s_1, s_2, s_3, s_4, p_1, p_2, p_3, p_4\\}$.\nThe edge set $E$ is constructed as follows:\n1. The vertex $c$ is connected to each vertex in the set $\\{s_1, s_2, s_3, s_4\\}$.\n2. The set of vertices $\\{p_1, p_2, p_3, p_4\\}$ forms a complete graph (a clique), meaning every vertex in this set is connected to every other vertex in this set.\n3. Every vertex from the set $\\{s_1, s_2, s_3, s_4\\}$ is connected to every vertex from the set $\\{p_1, p_2, p_3, p_4\\}$.\nThere are no other edges in the graph.\n\nApply the 'Minimum-Degree-First' algorithm to this graph $G$. What is the size of the independent set produced by this algorithm?\n\n", "solution": "We analyze the given graph $G=(V,E)$ with $V=\\{c,s_{1},s_{2},s_{3},s_{4},p_{1},p_{2},p_{3},p_{4}\\}$ and edges defined by:\n- $c$ adjacent to each $s_{i}$ for $i\\in\\{1,2,3,4\\}$,\n- $\\{p_{1},p_{2},p_{3},p_{4}\\}$ induces a $K_{4}$ (each $p_{j}$ adjacent to all other $p$-vertices),\n- each $s_{i}$ adjacent to each $p_{j}$,\n- no other edges.\n\nCompute initial degrees:\n- $\\deg(c)=4$ since $c$ is adjacent to $s_{1},s_{2},s_{3},s_{4}$.\n- For each $i\\in\\{1,2,3,4\\}$, $\\deg(s_{i})=1+4=5$ since each $s_{i}$ is adjacent to $c$ and to all four $p_{j}$, and there are no $s$-$s$ edges.\n- For each $j\\in\\{1,2,3,4\\}$, $\\deg(p_{j})=3+4=7$ since each $p_{j}$ is adjacent to the other three $p$-vertices and to all four $s_{i}$, and there is no $p$-$c$ edge.\n\nStep-by-step application of the Minimum-Degree-First algorithm:\n1. The minimum degree is $4$, uniquely attained by $c$. Select $v=c$, add $c$ to the independent set $S$, and remove $c$ and all its neighbors $\\{s_{1},s_{2},s_{3},s_{4}\\}$ from $G$.\n2. The remaining graph has vertex set $\\{p_{1},p_{2},p_{3},p_{4}\\}$ and is the clique $K_{4}$. Each remaining vertex has degree $3$. The tie is broken lexicographically, so select $v=p_{1}$. Add $p_{1}$ to $S$ and remove $p_{1}$ and its neighbors $\\{p_{2},p_{3},p_{4}\\}$. The graph is now empty.\n\nThe algorithm terminates with $S=\\{c,p_{1}\\}$, which has size $2$.", "answer": "$$\\boxed{2}$$"}]}