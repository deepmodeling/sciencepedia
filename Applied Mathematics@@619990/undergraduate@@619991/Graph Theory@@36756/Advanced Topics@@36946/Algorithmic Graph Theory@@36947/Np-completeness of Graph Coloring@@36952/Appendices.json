{"hands_on_practices": [{"introduction": "Before delving into the formal theory of NP-completeness, it's insightful to build an intuition for why graph coloring is considered a \"hard\" problem. One might first attempt to solve it using a simple, intuitive heuristic like the greedy algorithm. This practice demonstrates that while such methods are fast, their performance can be surprisingly poor, highlighting the need for a more robust way to classify computational difficulty [@problem_id:1456809].", "problem": "In computational complexity theory, the graph coloring problem is a central topic. A common heuristic to find a coloring for a graph is the greedy coloring algorithm.\n\nThe greedy coloring algorithm works as follows: Given a simple graph $G=(V, E)$ and a predetermined ordering of its vertices $\\sigma = (v_1, v_2, \\dots, v_n)$, the algorithm processes the vertices one by one according to this order. For each vertex $v_i$, it assigns the smallest positive integer (color) that has not already been assigned to any of its neighbors that appear before it in the ordering $\\sigma$. This smallest available color is formally known as the minimum excluded value or '$\\text{mex}$' of the set of its neighbors' colors.\n\nConsider a simple graph $G$ constructed with a set of 14 vertices, $V = \\{a_1, a_2, \\dots, a_7\\} \\cup \\{b_1, b_2, \\dots, b_7\\}$. The edge set $E$ is defined such that an edge exists between vertex $a_i$ and vertex $b_j$ if and only if their indices are different, i.e., $i \\neq j$. There are no edges between any two 'a' vertices or any two 'b' vertices.\n\nThe vertices of this graph are processed using the specific ordering $\\sigma = (a_1, b_1, a_2, b_2, a_3, b_3, a_4, b_4, a_5, b_5, a_6, b_6, a_7, b_7)$.\n\nHow many distinct colors does the greedy coloring algorithm use for the graph $G$ with the specified vertex ordering $\\sigma$?", "solution": "Let $G=(V,E)$ with $V=\\{a_{1},\\dots,a_{7}\\}\\cup\\{b_{1},\\dots,b_{7}\\}$ and $E=\\{(a_{i},b_{j}) : i\\neq j\\}$. There are no edges among the $a$-vertices nor among the $b$-vertices. Let the vertex order be $\\sigma=(a_{1},b_{1},a_{2},b_{2},\\dots,a_{7},b_{7})$. The greedy algorithm assigns to each vertex $v$ the color\n$$\nc(v)=\\operatorname{mex}\\big(\\{c(u): u\\in N(v)\\cap \\text{(previous vertices in }\\sigma)\\}\\big),\n$$\nwhere $N(v)$ is the neighbor set of $v$.\n\nProcess the vertices in order:\n- For $a_{1}$, no neighbors have appeared yet, so the forbidden set is empty and $c(a_{1})=1$.\n- For $b_{1}$, its neighbors are $a_{i}$ with $i\\neq 1$, but among previously processed vertices only $a_{1}$ exists and $a_{1}$ is not adjacent to $b_{1}$. Thus the forbidden set is empty and $c(b_{1})=1$.\n\nWe claim inductively that for each $k$ with $1\\leq k\\leq 7$,\n$$\nc(a_{k})=k \\quad \\text{and} \\quad c(b_{k})=k.\n$$\nThe base case $k=1$ holds as shown. Assume it holds for all $t$ with $1\\leq t\\leq k-1$. Consider $a_{k}$. Its neighbors among previously processed vertices are exactly $b_{1},\\dots,b_{k-1}$ (since $b_{j}$ is adjacent to $a_{k}$ for all $j\\neq k$ and only $b_{1},\\dots,b_{k-1}$ have appeared). By the induction hypothesis, $c(b_{j})=j$ for $1\\leq j\\leq k-1$. Hence the forbidden colors for $a_{k}$ are $\\{1,2,\\dots,k-1\\}$ and\n$$\nc(a_{k})=\\operatorname{mex}(\\{1,2,\\dots,k-1\\})=k.\n$$\nNext consider $b_{k}$. Its neighbors are $a_{i}$ with $i\\neq k$. Among the previously processed $a$-vertices are $a_{1},\\dots,a_{k}$, but $a_{k}$ is not adjacent to $b_{k}$. Therefore the neighbors of $b_{k}$ that have appeared are $a_{1},\\dots,a_{k-1}$, which by the induction hypothesis have colors $1,2,\\dots,k-1$. Thus the forbidden colors for $b_{k}$ are $\\{1,2,\\dots,k-1\\}$ and\n$$\nc(b_{k})=\\operatorname{mex}(\\{1,2,\\dots,k-1\\})=k.\n$$\nBy induction, for all $k\\in\\{1,\\dots,7\\}$ we have $c(a_{k})=k$ and $c(b_{k})=k$. Therefore the greedy algorithm uses exactly the colors $\\{1,2,\\dots,7\\}$, i.e., $7$ distinct colors.", "answer": "$$\\boxed{7}$$", "id": "1456809"}, {"introduction": "The cornerstone of NP-completeness theory is the concept of a polynomial-time reduction, a formal method for proving that one problem is at least as hard as another. This exercise serves as a gentle introduction to this powerful idea. By constructing a simple transformation from an arbitrary graph $G$ to a new graph $G'$, you will demonstrate a direct logical equivalence between the $k$-coloring problem and a $(k+1)$-coloring problem, providing a tangible first step into the world of complexity reductions [@problem_id:1524394].", "problem": "In computational graph theory, a central problem is determining the chromatic number of a graph. A graph $G=(V, E)$, consisting of a set of vertices $V$ and a set of edges $E$, is said to be *$k$-colorable* if it is possible to assign one of $k$ available colors to each vertex such that no two adjacent vertices share the same color.\n\nConsider an arbitrary graph $G=(V, E)$ and a positive integer $k$. A new graph, which we will call $G'$, is constructed from $G$ using the following procedure:\n1.  A single new vertex, $v_{new}$, is created. The vertex set of $G'$ is $V' = V \\cup \\{v_{new}\\}$.\n2.  The edge set of $G'$ is formed by taking all the edges of $G$ and adding new edges connecting $v_{new}$ to every vertex in the original set $V$. That is, $E' = E \\cup \\{ (v, v_{new}) \\mid v \\in V \\}$.\n\nLet's analyze the relationship between the colorability of the original graph $G$ and the newly constructed graph $G'$. Specifically, we are interested in the connection between the existence of a $k$-coloring for $G$ and the existence of a $(k+1)$-coloring for $G'$.\n\nWhich of the following statements correctly describes this relationship?\n\nA. $G$ has a $k$-coloring if and only if $G'$ has a $(k+1)$-coloring.\n\nB. $G$ has a $k$-coloring only if $G'$ has a $(k+1)$-coloring, but the converse is not always true.\n\nC. $G$ has a $k$-coloring if $G'$ has a $(k+1)$-coloring, but the converse is not always true.\n\nD. The existence of a $(k+1)$-coloring for $G'$ is guaranteed, regardless of whether $G$ has a $k$-coloring.\n\nE. The existence of a $k$-coloring for $G$ is completely independent of the existence of a $(k+1)$-coloring for $G'$.", "solution": "To determine the correct relationship between the $k$-colorability of $G$ and the $(k+1)$-colorability of $G'$, we must prove the logical implication in both directions. Let the set of available colors be represented by integers.\n\nFirst, let's prove the forward direction: **If $G$ has a $k$-coloring, then $G'$ has a $(k+1)$-coloring.**\n\nAssume that $G$ is $k$-colorable. This means there exists a coloring function $c: V \\to \\{1, 2, \\dots, k\\}$ such that for every edge $(u, v) \\in E$, we have $c(u) \\neq c(v)$.\n\nWe need to construct a valid $(k+1)$-coloring for $G'$, let's call it $c'$. The graph $G'$ has vertex set $V' = V \\cup \\{v_{new}\\}$. We can define $c'$ as follows:\n- For every vertex $v$ in the original set $V$, let $c'(v) = c(v)$.\n- For the new vertex $v_{new}$, let $c'(v_{new}) = k+1$.\n\nNow, we must verify that $c'$ is a valid coloring for $G'$ using colors from the set $\\{1, 2, \\dots, k+1\\}$. A coloring is valid if no two adjacent vertices have the same color. We check all edges in $G'$'s edge set, $E'$.\n1.  Consider an edge $(u, v)$ that was originally in $G$ (i.e., $(u, v) \\in E$). By our definition of $c'$, we have $c'(u) = c(u)$ and $c'(v) = c(v)$. Since $c$ is a valid $k$-coloring for $G$, we know $c(u) \\neq c(v)$. Therefore, $c'(u) \\neq c'(v)$, so this condition is satisfied.\n2.  Consider a new edge of the form $(v, v_{new})$, where $v \\in V$. By our definition, $c'(v) = c(v)$, so its color is in the set $\\{1, 2, \\dots, k\\}$. The color of the new vertex is $c'(v_{new}) = k+1$. Since $c'(v) \\leq k$ and $c'(v_{new}) = k+1$, it is guaranteed that $c'(v) \\neq c'(v_{new})$.\n\nSince all edges in $G'$ connect vertices of different colors, $c'$ is a valid $(k+1)$-coloring for $G'$. Thus, we have shown that if $G$ is $k$-colorable, then $G'$ is $(k+1)$-colorable.\n\nNext, let's prove the reverse direction: **If $G'$ has a $(k+1)$-coloring, then $G$ has a $k$-coloring.**\n\nAssume that $G'$ is $(k+1)$-colorable. This means there exists a coloring function $c': V' \\to \\{1, 2, \\dots, k+1\\}$ such that for every edge $(u', v') \\in E'$, we have $c'(u') \\neq c'(v')$.\n\nLet's examine the color assigned to the new vertex, $v_{new}$. Let this color be $C_{new} = c'(v_{new})$. By construction, $v_{new}$ is adjacent to every vertex $v \\in V$. Therefore, for any $v \\in V$, the color $c'(v)$ must be different from $C_{new}$.\nThis means that all vertices in the original set $V$ must be colored using colors from the set $\\{1, 2, \\dots, k+1\\} \\setminus \\{C_{new}\\}$. This set of available colors for $V$ contains exactly $(k+1) - 1 = k$ distinct colors.\n\nNow, let's define a coloring $c$ for the original graph $G$ by restricting the coloring $c'$ to the vertex set $V$. That is, for every $v \\in V$, we set $c(v) = c'(v)$.\nWe need to check if $c$ is a valid $k$-coloring for $G$.\n1.  The colors used for $c$ are a subset of $\\{1, 2, \\dots, k+1\\} \\setminus \\{C_{new}\\}$, which has size $k$. So, $c$ uses at most $k$ colors. We can relabel them to be $\\{1, 2, ..., k\\}$ if necessary.\n2.  Consider any edge $(u, v) \\in E$. Since $E$ is a subset of $E'$, this edge also exists in $G'$. Because $c'$ is a valid coloring for $G'$, we know that $c'(u) \\neq c'(v)$. By our definition of $c$, this implies $c(u) \\neq c(v)$.\n\nSince all adjacent vertices in $G$ have different colors under $c$, and $c$ uses at most $k$ colors, $c$ is a valid $k$-coloring for $G$. Thus, we have shown that if $G'$ is $(k+1)$-colorable, then $G$ is $k$-colorable.\n\nSince the implication holds in both directions (\"if $G$ is $k$-colorable, then $G'$ is $(k+1)$-colorable\" and \"if $G'$ is $(k+1)$-colorable, then $G$ is $k$-colorable\"), the two statements are logically equivalent. This corresponds to the \"if and only if\" condition. Therefore, option A is the correct statement.", "answer": "$$\\boxed{A}$$", "id": "1524394"}, {"introduction": "Proving that 3-COLORING is NP-complete involves a sophisticated reduction from another known NP-complete problem, such as Exact Cover by 3-Sets (X3C). These reductions often involve constructing clever \"gadgets\" within the graph to mimic the constraints of the original problem. This advanced practice challenges you to think critically about the logic of such proofs by analyzing a proposed reduction and identifying its critical flaw, a key skill in understanding and creating complex computational arguments [@problem_id:1524392].", "problem": "To establish the NP-completeness of the graph 3-COLORING problem, one can provide a polynomial-time reduction from a known NP-complete problem. This problem explores a potential reduction from the Exact Cover by 3-Sets (X3C) problem.\n\nThe 3-COLORING decision problem asks if the vertices of a given graph $G$ can be colored using at most three colors such that no two adjacent vertices share the same color.\n\nThe Exact Cover by 3-Sets (X3C) decision problem is defined as follows: Given a universe set $U = \\{u_1, u_2, \\dots, u_{3q}\\}$ of size $3q$ and a collection $S = \\{S_1, S_2, \\dots, S_m\\}$ of 3-element subsets of $U$, does there exist a subcollection $S' \\subseteq S$ of size $q$ that forms a partition of $U$? (This means the sets in $S'$ are pairwise disjoint and their union is $U$.)\n\nConsider a proposed construction of a graph $G$ from an instance $(U, S)$ of X3C. The graph is intended to be 3-colorable if and only if the X3C instance has a solution. The construction uses the following components:\n\n1.  **Base Gadget**: Three special vertices, $v_T, v_F, v_B$, are connected to form a triangle. In any valid 3-coloring, these must receive three distinct colors. We can label these colors as True (T), False (F), and Base (B) respectively, without loss of generality.\n\n2.  **Element Gadgets**: For each element $u_i \\in U$, two vertices, $x_i$ and $\\bar{x}_i$, are created. They are connected to each other by an edge, and both are also connected to the Base vertex $v_B$. This structure forces the colors of $x_i$ and $\\bar{x}_i$ to be a permutation of (T, F) in any valid 3-coloring.\n\n3.  **Set Gadget**: For each set $S_j = \\{u_a, u_b, u_c\\} \\in S$, a simple \"selector\" gadget is proposed. It consists of a single new vertex, $s_j$. This vertex is connected by edges to the three corresponding element vertices: ($s_j, x_a$), ($s_j, x_b$), and ($s_j, x_c$).\n\nThe intention is that the coloring of the graph should correspond to a valid exact cover. For example, the color of an $s_j$ vertex might indicate whether $S_j$ is in the cover $S'$, and the color of an $x_i$ vertex might indicate whether the element $u_i$ has been covered.\n\nHowever, this simple set gadget has a critical logical flaw that makes the reduction invalid. Which of the following statements best identifies this flaw?\n\nA) The gadget does not ensure that if a set $S_j$ is \"selected,\" all of its elements $\\{u_a, u_b, u_c\\}$ are concurrently marked as \"covered.\"\n\nB) The gadget fails to enforce the \"exactly one\" coverage constraint of X3C, as it does not create a coloring conflict when an element is covered by multiple sets.\n\nC) The gadget is uncolorable if the associated element vertices $x_a, x_b, x_c$ are all assigned the same color (e.g., all T or all F).\n\nD) The gadget is too restrictive; for any X3C instance that has a solution, the resulting graph is uncolorable.\n\nE) The structure of the gadget relies on the sets having exactly 3 elements and cannot be generalized, which is a requirement for a valid reduction.", "solution": "We analyze the constraints enforced by the proposed gadgets under 3-coloring with colors labeled $T$, $F$, and $B$.\n\n1) By construction, the base triangle on $v_{T}, v_{F}, v_{B}$ forces these three vertices to receive three distinct colors, which we label $T, F, B$.\n\n2) For each element $u_{i} \\in U$, the element gadget with vertices $x_{i}$ and $\\bar{x}_{i}$ has edges $(x_{i}, \\bar{x}_{i})$, $(x_{i}, v_{B})$, and $(\\bar{x}_{i}, v_{B})$. Since $v_{B}$ is colored $B$, neither $x_{i}$ nor $\\bar{x}_{i}$ can be $B$, and the edge $(x_{i}, \\bar{x}_{i})$ forces $\\{x_{i}, \\bar{x}_{i}\\}$ to be a permutation of $\\{T, F\\}$. Thus, for every $i$, $x_{i} \\in \\{T, F\\}$ and $\\bar{x}_{i}$ is the other color in $\\{T, F\\}$.\n\n3) For each set $S_{j}=\\{u_{a}, u_{b}, u_{c}\\}$, the set gadget introduces a single vertex $s_{j}$ with edges $(s_{j}, x_{a})$, $(s_{j}, x_{b})$, $(s_{j}, x_{c})$. Since each $x_{\\ell}$ for $\\ell \\in \\{a,b,c\\}$ is in $\\{T, F\\}$, the only constraints on $s_{j}$ are that its color differs from the colors currently assigned to $x_{a}$, $x_{b}$, and $x_{c}$. In particular:\n- If among $x_{a}, x_{b}, x_{c}$ both $T$ and $F$ occur, then $s_{j}$ can always be $B$.\n- If all of $x_{a}, x_{b}, x_{c}$ equal $T$ (respectively $F$), then $s_{j}$ can be $F$ or $B$ (respectively $T$ or $B$).\nThus the gadget never becomes uncolorable and does not inherently force a unique choice for $s_{j}$.\n\nTo assess whether this encodes X3C’s exact cover constraint, fix any convention that interprets a color of $s_{j}$ as “selected” (e.g., take $s_{j}=T$ to mean $S_{j}$ is chosen, and interpret $x_{i}=F$ as “$u_{i}$ is covered”). If $s_{j}=T$, then the edges $(s_{j}, x_{a})$, $(s_{j}, x_{b})$, $(s_{j}, x_{c})$ force $x_{a}, x_{b}, x_{c} \\neq T$, hence each of $x_{a}, x_{b}, x_{c}$ must be $F$; so a single selected set $S_{j}$ can indeed force its incident $x$-vertices to the “covered” color. However, this mechanism does not prevent multiple sets sharing an element from being selected simultaneously: if $u_{a}$ lies in $S_{j}$ and $S_{k}$, then setting $x_{a}=F$ allows both $s_{j}=T$ and $s_{k}=T$ without any coloring conflict, since neither $s_{j}$ nor $s_{k}$ is adjacent to the other, and both only need to differ from $x_{a}=F$. The same reasoning applies to their other neighbors. Consequently, an element can be “covered” by two or more selected sets without violating 3-colorability. This violates the “exactly one” coverage requirement of X3C.\n\nTherefore, the critical flaw is that the selector gadget fails to enforce that each element is covered by exactly one selected set; there is no coloring conflict when multiple $s_{j}$ adjacent to the same $x_{i}$ all take the “selected” color.\n\nThis matches statement B. For completeness, note that:\n- A is not the core issue, since a chosen color for $s_{j}$ can force all three neighbors to the complementary color, so “selection implies coverage” can be arranged, but it still fails uniqueness.\n- C is false because if $x_{a}, x_{b}, x_{c}$ all share a color (say $T$), then $s_{j}$ may be $F$ or $B$, so the gadget remains colorable.\n- D is false; the gadget is too weak, not too restrictive.\n- E is irrelevant; X3C inherently uses 3-element sets.\n\nHence, B best identifies the flaw.", "answer": "$$\\boxed{B}$$", "id": "1524392"}]}