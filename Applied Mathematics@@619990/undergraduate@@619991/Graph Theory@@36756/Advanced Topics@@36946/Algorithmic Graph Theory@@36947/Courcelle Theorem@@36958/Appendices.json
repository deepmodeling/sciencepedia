{"hands_on_practices": [{"introduction": "Understanding treewidth begins with hands-on calculation. This exercise asks you to determine the treewidth of a specific graph, a crucial step in predicting the performance of fixed-parameter tractable algorithms [@problem_id:1492835]. By constructing a tree decomposition, you will gain a concrete understanding of how this structural parameter quantifies a graph's 'tree-likeness' and its importance in modern algorithmics.", "problem": "A computer scientist is analyzing the performance of a fixed-parameter tractable algorithm. The algorithm's runtime on an input graph $G$ with $n$ vertices is bounded by a function of the form $O(f(k) \\cdot p(n))$, where $p(n)$ is a polynomial in $n$ and $f(k)$ is a function that depends only on a structural graph parameter $k$ known as the treewidth. For the problem she is studying, finding a maximum independent set, the exponential part of the complexity is given by $f(k) = 3^k$.\n\nShe is interested in the performance on a specific test graph $G = (V, E)$, where the set of vertices is $V = \\{v_1, v_2, v_3, v_4, v_5\\}$ and the set of edges is $E = \\{\\{v_1, v_2\\}, \\{v_2, v_3\\}, \\{v_3, v_4\\}, \\{v_4, v_1\\}, \\{v_1, v_5\\}, \\{v_2, v_5\\}\\}$.\n\nTo predict the algorithm's behavior, calculate the value of the parameter-dependent factor $f(k)$ for this graph $G$. The final answer should be a single integer.", "solution": "We are given an FPT running time of the form $O(f(k)\\cdot p(n))$ with $f(k)=3^{k}$, where $k$ is the treewidth of the input graph $G$. Therefore, to compute $f(k)$ for the given $G$, we must determine the treewidth $k$ of $G$.\n\nGraph structure: $V=\\{v_{1},v_{2},v_{3},v_{4},v_{5}\\}$ and $E=\\{\\{v_{1},v_{2}\\},\\{v_{2},v_{3}\\},\\{v_{3},v_{4}\\},\\{v_{4},v_{1}\\},\\{v_{1},v_{5}\\},\\{v_{2},v_{5}\\}\\}$. The subgraph on $\\{v_{1},v_{2},v_{3},v_{4}\\}$ is a $4$-cycle, and $\\{v_{1},v_{2},v_{5}\\}$ forms a triangle.\n\nLower bound on treewidth: The clique number $\\omega(G)$ is at least $3$ because $\\{v_{1},v_{2},v_{5}\\}$ is a triangle. A standard bound is $\\operatorname{tw}(G)\\geq \\omega(G)-1$, hence\n$$\n\\operatorname{tw}(G)\\geq 3-1=2.\n$$\n\nUpper bound via an explicit tree decomposition: Consider the following bags\n$$\nB_{1}=\\{v_{1},v_{2},v_{5}\\},\\quad B_{2}=\\{v_{1},v_{2},v_{3}\\},\\quad B_{3}=\\{v_{1},v_{3},v_{4}\\}.\n$$\nArrange them in a path $B_{1}\\text{—}B_{2}\\text{—}B_{3}$. Verify the tree decomposition properties:\n- Edge coverage: $\\{v_{1},v_{2}\\}\\subseteq B_{1}$ (also in $B_{2}$), $\\{v_{2},v_{3}\\}\\subseteq B_{2}$, $\\{v_{3},v_{4}\\}\\subseteq B_{3}$, $\\{v_{4},v_{1}\\}\\subseteq B_{3}$, $\\{v_{1},v_{5}\\}\\subseteq B_{1}$, $\\{v_{2},v_{5}\\}\\subseteq B_{1}$.\n- Running intersection: The vertices appear in connected subtrees: $v_{5}$ only in $B_{1}$; $v_{2}$ in $B_{1},B_{2}$; $v_{3}$ in $B_{2},B_{3}$; $v_{4}$ only in $B_{3}$; $v_{1}$ in all three bags, which are connected as a path.\n\nThe maximum bag size is $3$, so the width is $3-1=2$. Therefore,\n$$\n\\operatorname{tw}(G)\\leq 2.\n$$\nCombining with the lower bound, we conclude $\\operatorname{tw}(G)=2$.\n\nFinally, using $f(k)=3^{k}$, we obtain\n$$\nf(k)=3^{2}=9.\n$$", "answer": "$$\\boxed{9}$$", "id": "1492835"}, {"introduction": "Courcelle's theorem connects graph structure to logical expressibility, making Monadic Second-Order (MSO) logic a central concept. This first practice in MSO logic challenges you to translate a simple graph property—the absence of isolated vertices—into a formal logical sentence [@problem_id:1492852]. Mastering this translation is the first step toward leveraging the full power of the theorem for algorithmic applications.", "problem": "In the study of algorithmic graph theory, Monadic Second-Order (MSO) logic provides a powerful formal language for expressing properties of graphs. A key result, Courcelle's theorem, states that any graph property expressible in MSO logic can be decided in linear time for graphs of bounded treewidth.\n\nLet's consider MSO logic on simple, undirected graphs $G=(V, E)$, where $V$ is the set of vertices and $E$ is the set of edges. The language uses the following components:\n- Lowercase variables $u, v, w, \\dots$ to represent individual vertices.\n- Uppercase variables $X, Y, Z, \\dots$ to represent sets of vertices.\n- The standard logical connectives $\\land$ (and), $\\lor$ (or), $\\neg$ (not), $\\to$ (implies).\n- Quantifiers $\\forall$ (for all) and $\\exists$ (there exists), which can be applied to both vertex variables and set variables.\n- An adjacency predicate $\\text{adj}(u, v)$, which is true if and only if there is an edge between vertex $u$ and vertex $v$.\n- A membership predicate $u \\in X$, which is true if and only if vertex $u$ is in the set of vertices $X$.\n- The equality predicate $u=v$.\n\nYour task is to identify the MSO formula that correctly expresses the property that a graph has no isolated vertices. An isolated vertex is a vertex with degree zero.\n\nWhich of the following MSO formulas expresses that a graph $G$ has no isolated vertices?\n\nA. $\\forall v (\\exists u (\\text{adj}(v, u)))$\n\nB. $\\exists v (\\forall u (\\neg\\text{adj}(v, u)))$\n\nC. $\\exists v (\\forall u (\\text{adj}(v, u)))$\n\nD. $\\forall v (\\forall u (v = u \\lor \\text{adj}(v, u)))$\n\nE. $\\forall X ( (\\exists x (x \\in X)) \\to (\\exists y \\exists z (y \\in X \\land z \\notin X \\land \\text{adj}(y, z))) )$", "solution": "We want an MSO formula over simple, undirected graphs that asserts: for every vertex, there is at least one neighbor. Formally, “no isolated vertices” means that for every vertex $v \\in V$, the degree of $v$ is at least $1$, i.e., there exists some $u \\in V$ such that $\\text{adj}(v,u)$ holds. Because the graphs are simple, $\\text{adj}(v,v)$ is always false, so there is no need to explicitly enforce $u \\neq v$ in the formula; any witness $u$ for which $\\text{adj}(v,u)$ holds must automatically be distinct from $v$.\n\nEvaluate each option:\n\n- Option A: $\\forall v\\,\\exists u\\,\\text{adj}(v,u)$. This directly states: for every vertex $v$, there exists a vertex $u$ adjacent to $v$. This is exactly the property “no isolated vertices,” since each $v$ has at least one neighbor. In the empty graph, the universal quantifier is vacuously true, which matches the conventional interpretation that the empty graph has no isolated vertices.\n\n- Option B: $\\exists v\\,\\forall u\\,\\lnot\\text{adj}(v,u)$. This says there exists a vertex with no adjacent vertices, i.e., there is an isolated vertex. This is the negation of the desired property.\n\n- Option C: $\\exists v\\,\\forall u\\,\\text{adj}(v,u)$. In simple graphs, the case $u=v$ makes $\\text{adj}(v,v)$ false, so this formula is false for every nonempty simple graph. Even if one implicitly restricted to $u \\neq v$, it would require a universal (dominating) vertex, which is stronger than needed.\n\n- Option D: $\\forall v\\,\\forall u\\,(v = u \\lor \\text{adj}(v,u))$. For each pair of distinct vertices $u \\neq v$, this requires $\\text{adj}(v,u)$, i.e., the graph is complete. This is strictly stronger than “no isolated vertices.”\n\n- Option E: $\\forall X\\big((\\exists x\\,(x \\in X)) \\to (\\exists y\\,\\exists z\\,(y \\in X \\land z \\notin X \\land \\text{adj}(y,z)))\\big)$. Taking $X=V$ with $V \\neq \\varnothing$, the antecedent is true and the consequent requires a vertex $z \\notin V$, which is impossible. Hence the formula is false for any nonempty graph, so it does not express the desired property.\n\nTherefore, the correct formula is Option A.", "answer": "$$\\boxed{A}$$", "id": "1492852"}, {"introduction": "Building on the basics of MSO, this problem explores how to express more precise and complex graph properties. You will formulate a sentence for 2-regularity, which requires specifying an exact count rather than simple existence [@problem_id:1492856]. This task highlights the subtlety and expressive power of MSO logic, particularly the use of auxiliary vertex sets to enforce cardinality constraints.", "problem": "In the study of logic on graphs, Monadic Second-Order (MSO) logic provides a powerful language to express graph properties. We consider simple, undirected graphs $G=(V,E)$, where $V$ is a finite set of vertices and $E$ is a set of 2-element subsets of $V$ representing edges.\n\nThe language of MSO logic for graphs allows quantification over vertices (first-order, e.g., $\\forall v$, $\\exists u$) and over sets of vertices (second-order, e.g., $\\forall S$, $\\exists Y$). The logic uses lowercase letters like $u, v, w, \\dots$ for vertex variables and uppercase letters like $S, X, Y, \\dots$ for set variables. The available atomic formulas are:\n- $u=v$ (equality of vertices)\n- $u \\in S$ (vertex $u$ is in set $S$)\n- $\\text{adj}(u,v)$ (adjacency predicate, true if there is an edge between $u$ and $v$)\n\nThese can be combined using standard logical connectives: $\\land$ (and), $\\lor$ (or), $\\neg$ (not), $\\rightarrow$ (implies), and $\\leftrightarrow$ (if and only if).\n\nYour task is to identify which of the following MSO sentences correctly and precisely expresses the property that a graph is **2-regular**. A graph is 2-regular if and only if every vertex in the graph has a degree of exactly two.\n\nA. $\\forall v \\exists S ( (\\exists x \\exists y (x \\neq y \\land x \\in S \\land y \\in S \\land \\forall z (z \\in S \\rightarrow (z=x \\lor z=y)))) \\land (\\forall u (u \\in S \\leftrightarrow \\text{adj}(v,u))) )$\n\nB. $\\forall v \\exists x \\exists y (x \\neq y \\land \\text{adj}(v,x) \\land \\text{adj}(v,y))$\n\nC. $\\forall v \\exists S ( (\\exists x \\exists y (x \\neq y \\land x \\in S \\land y \\in S \\land \\forall z (z \\in S \\rightarrow (z=x \\lor z=y)))) \\land (\\forall u (\\text{adj}(v,u) \\rightarrow u \\in S)) )$\n\nD. $\\forall v \\exists x \\exists y (\\forall z (\\text{adj}(v,z) \\leftrightarrow (z=x \\lor z=y)))$\n\nE. $\\forall v \\exists S ( (\\exists x \\exists y (x \\in S \\land y \\in S)) \\land (\\forall u (u \\in S \\leftrightarrow \\text{adj}(v,u))) )$", "solution": "We want an MSO sentence that is true for exactly those simple undirected graphs in which every vertex has degree exactly two, i.e., for all vertices $v$, the neighborhood $N(v)$ has cardinality exactly $2$.\n\nAnalyze option A:\nThe sentence is\n$$\n\\forall v \\exists S\\Big( \\big(\\exists x \\exists y \\big(x \\neq y \\land x \\in S \\land y \\in S \\land \\forall z (z \\in S \\rightarrow (z=x \\lor z=y))\\big)\\big) \\land \\big(\\forall u (u \\in S \\leftrightarrow \\text{adj}(v,u))\\big) \\Big).\n$$\nThe first conjunct asserts that $S$ has exactly two distinct elements $x$ and $y$: it requires $x \\neq y$, both $x$ and $y$ are in $S$, and that every $z \\in S$ must be either $x$ or $y$, hence $|S|=2$. The second conjunct asserts that $S$ is exactly the neighborhood of $v$, i.e., for all $u$, $u \\in S$ if and only if $\\text{adj}(v,u)$. Therefore, for each $v$, $N(v)=S$ and $|N(v)|=|S|=2$. Hence option A expresses precisely that every vertex has degree exactly $2$. Conversely, if the graph is $2$-regular, then for each $v$ we can take $S=N(v)$, which has exactly two distinct elements, and both conjuncts hold. Thus A is correct.\n\nAnalyze option B:\n$$\n\\forall v \\exists x \\exists y (x \\neq y \\land \\text{adj}(v,x) \\land \\text{adj}(v,y)).\n$$\nThis requires that each $v$ has at least two distinct neighbors, but it does not forbid a third neighbor. Therefore it does not enforce degree exactly $2$, only degree at least $2$. Hence B is not correct.\n\nAnalyze option C:\n$$\n\\forall v \\exists S\\Big( \\big(\\exists x \\exists y (x \\neq y \\land x \\in S \\land y \\in S \\land \\forall z (z \\in S \\rightarrow (z=x \\lor z=y)))\\big) \\land \\big(\\forall u (\\text{adj}(v,u) \\rightarrow u \\in S)\\big) \\Big).\n$$\nThe first conjunct still enforces that $|S|=2$, but the second conjunct only enforces $N(v) \\subseteq S$. Hence $\\deg(v) \\leq 2$ is enforced, not equality. In particular, a vertex of degree $0$ or $1$ satisfies the condition (choose any $S$ of size $2$ with $N(v)\\subseteq S$). Thus C is not correct.\n\nAnalyze option D:\n$$\n\\forall v \\exists x \\exists y (\\forall z (\\text{adj}(v,z) \\leftrightarrow (z=x \\lor z=y))).\n$$\nThis purports to enforce $N(v)=\\{x,y\\}$ as a set, but it omits the constraint $x \\neq y$. If $x=y$, the right-hand side becomes $(z=x)$, which enforces that $N(v)$ has size exactly $1$. Therefore graphs where some vertex has degree $1$ would satisfy the sentence for that vertex, and the global statement allows all vertices to have degree $1$. Hence D does not characterize degree exactly $2$.\n\nAnalyze option E:\n$$\n\\forall v \\exists S \\Big( (\\exists x \\exists y (x \\in S \\land y \\in S)) \\land (\\forall u (u \\in S \\leftrightarrow \\text{adj}(v,u))) \\Big).\n$$\nThe second conjunct forces $S=N(v)$. The first conjunct requires merely that $S$ contains (not necessarily distinct) $x$ and $y$. Since there is no $x \\neq y$, this only guarantees that $S$ is nonempty if $x=y$, or that $|S| \\geq 2$ if $x \\neq y$ is witnessed. Because the quantifiers over $x,y$ are existential, the weakest requirement is chosen: the sentence is satisfied whenever $N(v)$ is nonempty, i.e., $\\deg(v)\\geq 1$. Thus E does not enforce degree exactly $2$.\n\nTherefore, the only sentence that correctly and precisely expresses that every vertex has degree exactly $2$ is option A.", "answer": "$$\\boxed{A}$$", "id": "1492856"}]}