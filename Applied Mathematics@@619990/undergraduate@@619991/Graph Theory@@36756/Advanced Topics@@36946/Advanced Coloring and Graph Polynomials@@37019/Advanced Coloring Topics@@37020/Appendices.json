{"hands_on_practices": [{"introduction": "We begin our hands-on exploration with a foundational method for graph coloring: the greedy algorithm. This practice demonstrates a crucial lesson that while simple to implement, the algorithm's performance can be highly dependent on the order in which vertices are processed [@problem_id:1479819]. This exercise is designed to build your intuition for why the 'obvious' approach can sometimes yield a result far from the optimal minimum, highlighting the need for more sophisticated coloring techniques.", "problem": "The greedy coloring algorithm is a method for assigning colors to the vertices of a graph. It processes the vertices in a specified sequence, let's say $(w_1, w_2, \\dots, w_n)$. For each vertex $w_i$ in this sequence, the algorithm assigns it the smallest positive integer (representing a color) that has not been used on any of its neighbors that appear earlier in the sequence (i.e., its neighbors in the set $\\{w_1, w_2, \\dots, w_{i-1}\\}$).\n\nConsider a simple graph $G$ constructed as follows. The vertex set consists of two disjoint sets of vertices, $U = \\{u_1, u_2, u_3, u_4, u_5\\}$ and $V = \\{v_1, v_2, v_3, v_4, v_5\\}$. The edge set $E$ is defined such that an edge exists between a vertex $u_i \\in U$ and a vertex $v_j \\in V$ if and only if their integer subscripts are different (i.e., $i \\neq j$). There are no edges connecting two vertices within the set $U$, nor are there any edges connecting two vertices within the set $V$.\n\nSuppose the greedy coloring algorithm is applied to this graph $G$ using the specific vertex ordering $\\sigma = (u_1, v_1, u_2, v_2, u_3, v_3, u_4, v_4, u_5, v_5)$.\n\nWhat is the total number of distinct colors used by the algorithm to color all vertices of the graph?", "solution": "Let $c(w)$ denote the color assigned to vertex $w$. The greedy rule assigns to $w_{i}$ the smallest positive integer not used by its earlier neighbors.\n\nThe graph $G$ is bipartite with parts $U=\\{u_{1},u_{2},u_{3},u_{4},u_{5}\\}$ and $V=\\{v_{1},v_{2},v_{3},v_{4},v_{5}\\}$, and edges only between $U$ and $V$, with $u_{i}$ adjacent to $v_{j}$ if and only if $i\\neq j$. There are no edges within $U$ or within $V$. The order is $\\sigma=(u_{1},v_{1},u_{2},v_{2},u_{3},v_{3},u_{4},v_{4},u_{5},v_{5})$.\n\nStep-by-step application of the greedy rule:\n1) $u_{1}$ has no earlier neighbors, so $c(u_{1})=1$.\n2) $v_{1}$ is not adjacent to $u_{1}$ (since $1=1$), so it has no earlier neighbors; hence $c(v_{1})=1$.\n3) $u_{2}$ is adjacent to $v_{1}$ (since $1\\neq 2$) and not to $u_{1}$. The forbidden set is $\\{c(v_{1})\\}=\\{1\\}$, so $c(u_{2})=2$.\n4) $v_{2}$ is adjacent to $u_{1}$ (since $1\\neq 2$) and not to $u_{2}$. The forbidden set is $\\{c(u_{1})\\}=\\{1\\}$, so $c(v_{2})=2$.\n5) $u_{3}$ is adjacent to $v_{1}$ and $v_{2}$, so the forbidden set is $\\{c(v_{1}),c(v_{2})\\}=\\{1,2\\}$, hence $c(u_{3})=3$.\n6) $v_{3}$ is adjacent to $u_{1}$ and $u_{2}$, so the forbidden set is $\\{c(u_{1}),c(u_{2})\\}=\\{1,2\\}$, hence $c(v_{3})=3$.\n7) $u_{4}$ is adjacent to $v_{1},v_{2},v_{3}$, so the forbidden set is $\\{1,2,3\\}$, hence $c(u_{4})=4$.\n8) $v_{4}$ is adjacent to $u_{1},u_{2},u_{3}$, so the forbidden set is $\\{1,2,3\\}$, hence $c(v_{4})=4$.\n9) $u_{5}$ is adjacent to $v_{1},v_{2},v_{3},v_{4}$, so the forbidden set is $\\{1,2,3,4\\}$, hence $c(u_{5})=5$.\n10) $v_{5}$ is adjacent to $u_{1},u_{2},u_{3},u_{4}$, so the forbidden set is $\\{1,2,3,4\\}$, hence $c(v_{5})=5$.\n\nThus the distinct colors used are $\\{1,2,3,4,5\\}$, totaling $5$.", "answer": "$$\\boxed{5}$$", "id": "1479819"}, {"introduction": "Moving beyond assigning colors from a universal set, this exercise introduces list coloring, a powerful generalization where each vertex has its own specific list of permissible colors. This scenario is common in real-world applications like scheduling, where different tasks have unique constraints [@problem_id:1479827]. By working through this practical problem, you will learn to navigate these additional complexities and apply systematic reasoning to find a valid coloring.", "problem": "A university is planning the final exam schedule for five courses: Algorithms (A), Biology (B), Chemistry (C), Data Structures (D), and English (E). Some pairs of courses have a high number of student overlaps, so their exams cannot be scheduled at the same time. The scheduling conflicts are as follows:\n- English (E) has a conflict with all four other courses.\n- Algorithms (A) has conflicts with Biology (B) and Data Structures (D).\n- Biology (B) has conflicts with Algorithms (A) and Chemistry (C).\n- Chemistry (C) has conflicts with Biology (B) and Data Structures (D).\n- Data Structures (D) has conflicts with Chemistry (C) and Algorithms (A).\n\nFurthermore, due to classroom availability, each course has a limited list of possible time slots, represented by integers. The lists of available slots for each course are:\n- $L(E) = \\{1, 2, 3\\}$\n- $L(A) = \\{1, 2\\}$\n- $L(B) = \\{1, 3\\}$\n- $L(C) = \\{2, 3\\}$\n- $L(D) = \\{1, 2\\}$\n\nA valid exam schedule is an assignment of a single time slot to each course from its list of available slots, such that no two conflicting courses are assigned the same time slot. How many distinct valid exam schedules are possible? Provide the answer as an integer.", "solution": "We model the problem as a list-coloring of a graph. The vertices are the courses $A,B,C,D,E$. The conflict edges are:\n- $E$ adjacent to each of $A,B,C,D$,\n- $A$ adjacent to $B$ and $D$,\n- $B$ adjacent to $A$ and $C$,\n- $C$ adjacent to $B$ and $D$,\n- $D$ adjacent to $C$ and $A$.\nThus $A,B,C,D$ form a 4-cycle $(A\\text{-}B\\text{-}C\\text{-}D\\text{-}A)$, and $E$ connects to all four.\n\nThe available time slots (lists) are:\n$$L(E)=\\{1,2,3\\},\\quad L(A)=\\{1,2\\},\\quad L(B)=\\{1,3\\},\\quad L(C)=\\{2,3\\},\\quad L(D)=\\{1,2\\}.$$\n\nWe condition on the choice of $E$'s slot and count the number of valid list-colorings of the 4-cycle with the induced pruned lists. Let $N_{s}$ be the number of valid assignments for $A,B,C,D$ when $E$ is assigned slot $s\\in\\{1,2,3\\}$. The total number of valid schedules is\n$$N_{\\text{total}}=N_{1}+N_{2}+N_{3}.$$\n\nCase $E=1$: remove $1$ from the lists of $A,B,D$ (and $C$ is unchanged). The pruned lists are\n$$L'(A)=\\{2\\},\\quad L'(B)=\\{3\\},\\quad L'(C)=\\{2,3\\},\\quad L'(D)=\\{2\\}.$$\nSince $A$ and $D$ are adjacent and both forced to $2$, the edge $A\\text{-}D$ cannot be satisfied. Hence\n$$N_{1}=0.$$\n\nCase $E=2$: remove $2$ from the lists of $A,C,D$ (and $B$ is unchanged). The pruned lists are\n$$L'(A)=\\{1\\},\\quad L'(B)=\\{1,3\\},\\quad L'(C)=\\{3\\},\\quad L'(D)=\\{1\\}.$$\nSince $A$ and $D$ are adjacent and both forced to $1$, the edge $A\\text{-}D$ cannot be satisfied. Hence\n$$N_{2}=0.$$\n\nCase $E=3$: remove $3$ from the lists of $B,C$ (and $A,D$ are unchanged). The pruned lists are\n$$L'(A)=\\{1,2\\},\\quad L'(B)=\\{1\\},\\quad L'(C)=\\{2\\},\\quad L'(D)=\\{1,2\\}.$$\nNow $B=1$ and $C=2$ are forced. The edge $A\\text{-}B$ forces $A\\neq 1$, so $A=2$. The edge $C\\text{-}D$ forces $D\\neq 2$, so $D=1$. The remaining edge $D\\text{-}A$ is satisfied since $1\\neq 2$. Therefore there is exactly one valid assignment in this case:\n$$N_{3}=1.$$\n\nSumming over the three cases gives\n$$N_{\\text{total}}=0+0+1=1.$$", "answer": "$$\\boxed{1}$$", "id": "1479827"}, {"introduction": "Our final practice shifts from algorithms to the structural properties of graphs themselves, introducing the elegant concept of perfect graphs. For this special class of graphs, the chromatic number $\\chi(G)$ is guaranteed to equal the clique number $\\omega(G)$, connecting the coloring problem to a structural parameter [@problem_id:1479763]. This exercise challenges you to calculate both invariants for a specific graph, allowing you to test for perfection and appreciate the deep properties that can make coloring a much more tractable problem.", "problem": "A new type of wireless communication network is being designed with 7 nodes, labeled $v_1, v_2, \\ldots, v_7$. The interference pattern between these nodes is modeled by a simple, undirected conflict graph, $G$. An edge exists between two distinct nodes, $v_i$ and $v_j$, if and only if they interfere with each other. If two nodes interfere, they must be assigned different communication frequencies.\n\nThe specific topology of this network is as follows: the nodes are conceptually arranged in a circle, and any two nodes interfere with each other if and only if they are *not* immediate neighbors in this circular arrangement. The standard 7-vertex cycle graph, $C_7$, has the vertex set $\\{v_1, \\ldots, v_7\\}$ and edge set $\\{(v_1, v_2), (v_2, v_3), \\ldots, (v_6, v_7), (v_7, v_1)\\}$. The conflict graph $G$ is therefore the complement of $C_7$, denoted as $G = \\bar{C_7}$.\n\nTo analyze the frequency requirements, we use the following graph-theoretic concepts:\n- The **clique number**, $\\omega(G)$, is the size of the largest subset of nodes in which every node interferes with every other node in the subset.\n- The **chromatic number**, $\\chi(G)$, is the minimum number of distinct frequencies required for the entire network such that no two interfering nodes are assigned the same frequency.\n- A graph is defined as **perfect** if, for any induced subgraph (including the graph itself), its chromatic number is equal to its clique number. A direct consequence is that if a graph $G$ is perfect, then it must satisfy $\\chi(G) = \\omega(G)$.\n\nFor the given conflict graph $G = \\bar{C_7}$, determine its clique number, its chromatic number, and whether the graph is perfect. Select the option that correctly states these three properties.\n\nA. The clique number is 2, the chromatic number is 3, and the graph is not perfect.\n\nB. The clique number is 3, the chromatic number is 3, and the graph is perfect.\n\nC. The clique number is 3, the chromatic number is 4, and the graph is not perfect.\n\nD. The clique number is 4, the chromatic number is 4, and the graph is perfect.\n\nE. The clique number is 2, the chromatic number is 2, and the graph is perfect.", "solution": "Let $G=\\bar{C_{7}}$. A clique in $G$ is an independent set in $C_{7}$, so $\\omega(G)=\\alpha(C_{7})$.\n\nTo compute $\\alpha(C_{7})$, first note that $\\{v_{1},v_{3},v_{5}\\}$ is an independent set, so $\\alpha(C_{7}) \\geq 3$. For an upper bound, in a cycle, between any two selected vertices in an independent set there must be at least one unselected vertex along the circular order. Hence the number of vertices is at least $2|S|$ if $S$ is independent, giving $2|S| \\leq 7$, which implies $|S| \\leq 3$. Therefore $\\alpha(C_{7})=3$, and thus\n$$\n\\omega(G)=3.\n$$\n\nNext, $\\chi(G)=\\chi(\\bar{C_{7}})$ equals the minimum number of cliques in a partition of $V(C_{7})$. Since $C_{7}$ is triangle-free, its cliques are only edges and singletons. A partition into cliques therefore corresponds to taking a matching (disjoint edges) and leaving the remaining vertices as singletons. The maximum matching size of $C_{7}$ is $3$, covering $6$ vertices, so any clique partition uses at least $3$ edges plus $1$ singleton, i.e., at least $4$ parts. This is attained, for example, by the partition $\\{(v_{1},v_{2}), (v_{3},v_{4}), (v_{5},v_{6}), \\{v_{7}\\}\\}$. Hence\n$$\n\\chi(G)=4.\n$$\n\nFinally, a graph is perfect only if $\\chi(H)=\\omega(H)$ for every induced subgraph $H$, in particular for $H=G$ itself. Here $\\chi(G)=4$ and $\\omega(G)=3$, so $\\chi(G) \\neq \\omega(G)$, and $G$ is not perfect. Equivalently, by the Strong Perfect Graph Theorem, $\\bar{C_{7}}$ is an odd antihole and thus not perfect.\n\nTherefore, the correct option is that the clique number is $3$, the chromatic number is $4$, and the graph is not perfect.", "answer": "$$\\boxed{C}$$", "id": "1479763"}]}