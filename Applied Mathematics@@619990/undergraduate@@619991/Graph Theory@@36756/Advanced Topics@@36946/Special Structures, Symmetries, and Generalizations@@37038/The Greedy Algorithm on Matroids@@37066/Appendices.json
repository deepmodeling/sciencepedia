{"hands_on_practices": [{"introduction": "Building an optimal team from a pool of candidates with varied skills is a common challenge in management and project planning. This scenario can be elegantly modeled using a partition matroid, where constraints are placed on the number of members from different departments or specializations. This first practice will guide you through applying the greedy algorithm to find the highest-value team, demonstrating how a simple, intuitive strategy of picking the best available candidates sequentially leads to a provably optimal result in this structured context [@problem_id:1542053].", "problem": "A technology startup is assembling an elite research and development team for a new project. The available experts come from three distinct fields: Quantum Computing ($E_1$), Machine Learning ($E_2$), and Cryptography ($E_3$). The team's composition must adhere to specific departmental constraints: at most one expert from Quantum Computing, at most two from Machine Learning, and at most one from Cryptography.\n\nThe available experts and their associated \"productivity scores\" are listed below:\n\n**Field $E_1$: Quantum Computing**\n*   Alice: 8\n*   Bob: 5\n\n**Field $E_2$: Machine Learning**\n*   Carol: 10\n*   David: 9\n*   Eve: 7\n*   Frank: 4\n\n**Field $E_3$: Cryptography**\n*   Grace: 11\n*   Heidi: 6\n\nThe startup aims to form a team with the largest possible number of members that satisfies the departmental constraints. Among all teams of this maximum possible size, the goal is to select the one with the highest possible total productivity score. What is this maximum possible total productivity score?\n\nA. 33\n\nB. 35\n\nC. 37\n\nD. 38\n\nE. 39", "solution": "This problem can be modeled using a partition matroid. Let the ground set $E$ be the set of all available experts. This set is partitioned into three disjoint subsets: $E_1$ (Quantum Computing), $E_2$ (Machine Learning), and $E_3$ (Cryptography).\n\nThe departmental constraints define the structure of the matroid. A set of experts (a team) $I \\subseteq E$ is considered an \"independent set\" if it satisfies the following conditions:\n*   $|I \\cap E_1| \\leq d_1 = 1$\n*   $|I \\cap E_2| \\leq d_2 = 2$\n*   $|I \\cap E_3| \\leq d_3 = 1$\n\nThe problem asks to form a team with the \"largest possible number of members,\" which corresponds to finding a \"basis\" of the matroid. A basis is a maximal independent set. For a partition matroid, all bases have the same size, which is called the rank of the matroid, given by $r(M) = \\sum_i d_i$.\nIn this case, the rank is $r(M) = d_1 + d_2 + d_3 = 1 + 2 + 1 = 4$. So, the optimal team will have exactly 4 members.\n\nThe objective is to find a basis with the maximum total weight (productivity score). This can be achieved using the greedy algorithm, which is guaranteed to find an optimal basis for any matroid.\n\n**Step 1: Sort the experts**\nWe begin by sorting all experts in the ground set $E$ in descending order of their productivity scores.\n\n| Expert | Department | Score |\n| :---   | :---         | :---  |\n| Grace  | Cryptography ($E_3$) | 11    |\n| Carol  | Machine Learning ($E_2$) | 10  |\n| David  | Machine Learning ($E_2$) | 9   |\n| Alice  | Quantum Computing ($E_1$) | 8   |\n| Eve    | Machine Learning ($E_2$) | 7   |\n| Heidi  | Cryptography ($E_3$) | 6   |\n| Bob    | Quantum Computing ($E_1$) | 5   |\n| Frank  | Machine Learning ($E_2$) | 4   |\n\n**Step 2: Apply the Greedy Algorithm**\nWe initialize an empty team (solution set) $A = \\emptyset$. We also initialize counters for the number of members selected from each department: $c_1 = 0$, $c_2 = 0$, $c_3 = 0$. We then iterate through the sorted list of experts, adding an expert to our team $A$ if and only if doing so does not violate the departmental constraints.\n\n1.  **Consider Grace** (Score 11, Dept $E_3$): The current count for Cryptography is $c_3=0$. Since $0 < d_3=1$, we can add Grace.\n    *   $A = \\{\\text{Grace}\\}$.\n    *   Update counts: $c_3=1$.\n\n2.  **Consider Carol** (Score 10, Dept $E_2$): The current count for Machine Learning is $c_2=0$. Since $0 < d_2=2$, we can add Carol.\n    *   $A = \\{\\text{Grace, Carol}\\}$.\n    *   Update counts: $c_2=1$.\n\n3.  **Consider David** (Score 9, Dept $E_2$): The current count for Machine Learning is $c_2=1$. Since $1 < d_2=2$, we can add David.\n    *   $A = \\{\\text{Grace, Carol, David}\\}$.\n    *   Update counts: $c_2=2$.\n\n4.  **Consider Alice** (Score 8, Dept $E_1$): The current count for Quantum Computing is $c_1=0$. Since $0 < d_1=1$, we can add Alice.\n    *   $A = \\{\\text{Grace, Carol, David, Alice}\\}$.\n    *   Update counts: $c_1=1$.\n\nAt this point, the size of our team $A$ is 4, which is equal to the rank of the matroid. We have found a basis, and since we used the greedy algorithm, it must be a basis of maximum weight. The algorithm terminates.\n\n**Step 3: Calculate the Total Score**\nThe optimal team consists of the experts {Grace, Carol, David, Alice}. We sum their productivity scores to find the maximum possible total score:\nTotal Score = Score(Grace) + Score(Carol) + Score(David) + Score(Alice)\nTotal Score = $11 + 10 + 9 + 8 = 38$.\n\nThis corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1542053"}, {"introduction": "The problem of designing an efficient network is a cornerstone of graph theory, and its solution is famously found using algorithms for finding minimum or maximum spanning trees. The underlying structure that guarantees the success of algorithms like Kruskal's is a graphic matroid, where independent sets are the acyclic subgraphs (forests) of the network. This exercise connects the abstract theory of matroids to the concrete application of building a communications network, and it also delves into the interesting case where multiple optimal network designs can exist due to ties in link costs [@problem_id:1542085].", "problem": "A company is designing a communication network to connect 5 of its data centers, labeled $V_1, V_2, V_3, V_4$, and $V_5$. A cost, representing a combination of strategic value and engineering effort, is associated with establishing a direct link between any two centers. The company aims to build a backbone network with the MAXIMUM possible total cost. This network must satisfy two conditions: it must connect all data centers (ensuring a communication path exists between any two centers), and it must be minimal (containing no redundant links, where a redundant link is one that completes a closed loop within the network).\n\nThe available links and their associated costs are as follows:\n- ($V_1, V_2$): 5\n- ($V_1, V_3$): 5\n- ($V_2, V_3$): 5\n- ($V_1, V_4$): 4\n- ($V_1, V_5$): 3\n- ($V_4, V_5$): 2\n- ($V_2, V_4$): 1\n- ($V_3, V_5$): 1\n\nDetermine the total number of distinct backbone networks that achieve the maximum possible cost.", "solution": "We model the required backbone network as a maximum-weight spanning tree (connected, acyclic, spanning all five vertices) of the given weighted graph. By Kruskal's algorithm for maximum spanning trees, we sort edges by nonincreasing weight and add each edge if it connects two different components; this yields a tree of maximum total weight. We also use the cut property: for any cut, the unique maximum-weight edge crossing that cut must belong to every maximum-weight spanning tree.\n\nList edges by weight tiers:\n- Weight $5$: $(V_{1},V_{2}), (V_{1},V_{3}), (V_{2},V_{3})$ (these form $K_{3}$ on $\\{V_{1},V_{2},V_{3}\\}$).\n- Weight $4$: $(V_{1},V_{4})$.\n- Weight $3$: $(V_{1},V_{5})$.\n- Weight $2$: $(V_{4},V_{5})$.\n- Weight $1$: $(V_{2},V_{4}), (V_{3},V_{5})$.\n\nProcess by descending weight:\n1) At weight $5$, among $\\{V_{1},V_{2},V_{3}\\}$, to avoid a cycle we can include exactly $2$ of the $3$ edges, forming a tree on these three vertices. Any two yield the same contribution $5+5$ and keep acyclicity. The number of choices here equals the number of spanning trees of $K_{3}$, which is $3$ (equivalently, choose which one of the three edges is omitted).\n\n2) Consider the cut $\\{V_{4}\\}$ versus its complement. The crossing edges are $(V_{1},V_{4})$ of weight $4$, $(V_{2},V_{4})$ of weight $1$, and $(V_{4},V_{5})$ of weight $2$. The unique maximum is $(V_{1},V_{4})$, so by the cut property it must be included in every maximum-weight spanning tree.\n\n3) Consider the cut $\\{V_{5}\\}$ versus its complement. The crossing edges are $(V_{1},V_{5})$ of weight $3$, $(V_{3},V_{5})$ of weight $1$, and $(V_{4},V_{5})$ of weight $2$. The unique maximum is $(V_{1},V_{5})$, so by the cut property it must be included in every maximum-weight spanning tree.\n\nAfter steps 1)–3), we have selected $4$ edges: two of weight $5$, plus $(V_{1},V_{4})$ of weight $4$, and $(V_{1},V_{5})$ of weight $3$. These $4$ edges connect all $5$ vertices and form a tree (starting from a tree on $\\{V_{1},V_{2},V_{3}\\}$, each of $(V_{1},V_{4})$ and $(V_{1},V_{5})$ attaches a new leaf), so no further edge can be added without creating a cycle. The total weight is\n$$\n5+5+4+3=17.\n$$\nReplacing any of the forced edges with a lower-weight alternative strictly reduces the total, so this is the maximum possible cost. The only freedom is the choice of the two weight-$5$ edges among the three available, and there are exactly $3$ such choices. Therefore, the total number of distinct maximum-cost backbone networks is $3$.", "answer": "$$\\boxed{3}$$", "id": "1542085"}, {"introduction": "We have seen that the greedy algorithm finds the optimal solution for partition and graphic matroids, but what makes these structures so special? The guarantee of optimality is not universal; it relies on the specific axioms that define a matroid. This final practice explores an 'almost-matroid'—an independence system that fails a crucial matroid property—to illustrate this point. By observing how a different but intuitive 'local improvement' algorithm fails to find the global optimum, you will gain a deeper appreciation for why the matroid axioms are essential for the greedy strategy's success [@problem_id:1542039].", "problem": "In combinatorial optimization, greedy algorithms often provide optimal solutions for problems with a special structure known as a matroid. However, for more general independence systems, or when using different algorithmic approaches, sub-optimal solutions can be reached.\n\nConsider a \"single-swap local improvement\" algorithm. It begins with an arbitrary basis (a maximal independent set) and repeatedly seeks to improve it. An improvement step consists of finding a non-basis element $y$ and a basis element $x$ such that replacing $x$ with $y$ results in a new set that is also a basis and has a strictly greater total weight. The algorithm terminates and outputs its current basis when no such single-element swap can increase the total weight. This terminal state is a local optimum.\n\nYou are to analyze this algorithm's performance on a specific weighted independence system. The system is defined on a ground set of elements $E = E_1 \\cup E_2$, where the partitions are $E_1 = \\{a_1, a_2\\}$ and $E_2 = \\{b_1, b_2, b_3, b_4\\}$. The weights of the elements are given by:\n- $w(a_1) = 6$\n- $w(a_2) = 5$\n- $w(b_1) = 4$\n- $w(b_2) = 4$\n- $w(b_3) = 4$\n- $w(b_4) = 1$\n\nA subset $I \\subseteq E$ is defined to be **independent** if it satisfies all of the following rules:\n1. The number of elements from $E_1$ in $I$ is at most one: $|I \\cap E_1| \\leq 1$.\n2. The number of elements from $E_2$ in $I$ is at most two: $|I \\cap E_2| \\leq 2$.\n3. A special condition: if $a_1$ is in $I$, then $I$ cannot contain more than one element from the set $\\{b_1, b_2, b_3\\}$. Formally, if $a_1 \\in I$, then $|I \\cap \\{b_1, b_2, b_3\\}| \\leq 1$.\n\nThe 'single-swap local improvement' algorithm is initiated with the starting basis $B_{start} = \\{a_1, b_1, b_4\\}$.\n\nLet $W_{local}$ be the total weight of the basis at which the algorithm terminates, and let $W_{opt}$ be the total weight of the true globally optimal basis for this independence system. Calculate the ratio $\\frac{W_{local}}{W_{opt}}$. Round your final answer to four significant figures.", "solution": "We first characterize the bases of the independence system. For any independent set $I$, by rules 1 and 2 we have\n$$\n|I| = |I \\cap E_{1}| + |I \\cap E_{2}| \\leq 1 + 2 = 3.\n$$\nSince the set $\\{a_{2}, b_{1}, b_{2}\\}$ is independent and has size $3$, the maximum possible size is $3$, so bases are exactly the independent sets of size $3$.\n\nEnumerate bases and their weights:\n- Bases containing $a_{1}$: by rule 3, with $a_{1}$ we can take at most one from $\\{b_{1}, b_{2}, b_{3}\\}$, and by rule 2 we can have at most two from $E_{2}$; therefore the only size-$3$ possibilities are $\\{a_{1}, b_{4}, b_{i}\\}$ with $i \\in \\{1,2,3\\}$. Each has total weight $w(a_{1}) + w(b_{4}) + w(b_{i}) = 6 + 1 + 4 = 11$.\n- Bases containing $a_{2}$: no special restriction applies, so any two distinct elements of $E_{2}$ can be chosen. There are two types:\n  - Two from $\\{b_{1}, b_{2}, b_{3}\\}$: weight $w(a_{2}) + 4 + 4 = 5 + 4 + 4 = 13$.\n  - One from $\\{b_{1}, b_{2}, b_{3}\\}$ and $b_{4}$: weight $w(a_{2}) + 4 + 1 = 10$.\nHence the globally optimal basis weight is\n$$\nW_{\\mathrm{opt}} = 13.\n$$\n\nNow analyze the single-swap local improvement from the starting basis $B_{\\mathrm{start}} = \\{a_{1}, b_{1}, b_{4}\\}$, which has weight\n$$\nW(B_{\\mathrm{start}}) = w(a_{1}) + w(b_{1}) + w(b_{4}) = 6 + 4 + 1 = 11.\n$$\nThe candidates $y \\in E \\setminus B_{\\mathrm{start}}$ are $\\{a_{2}, b_{2}, b_{3}\\}$. For each $y$, we try all $x \\in B_{\\mathrm{start}}$ and require that $(B_{\\mathrm{start}} \\setminus \\{x\\}) \\cup \\{y\\}$ be a basis (i.e., independent of size $3$) and have strictly larger weight.\n\n- $y = a_{2}$:\n  - $x = a_{1}$ gives $\\{a_{2}, b_{1}, b_{4}\\}$ with weight $5 + 4 + 1 = 10 < 11$, not an improvement.\n  - $x \\in \\{b_{1}, b_{4}\\}$ would yield two elements from $E_{1}$, violating $|I \\cap E_{1}| \\leq 1$, so invalid.\n\n- $y = b_{2}$:\n  - $x = b_{1}$ gives $\\{a_{1}, b_{2}, b_{4}\\}$ with weight $6 + 4 + 1 = 11$, not strictly larger.\n  - $x = b_{4}$ gives $\\{a_{1}, b_{1}, b_{2}\\}$, which violates rule 3 because with $a_{1}$ it contains two elements from $\\{b_{1}, b_{2}, b_{3}\\}$, so invalid.\n  - $x = a_{1}$ gives $\\{b_{1}, b_{4}, b_{2}\\}$ with three elements from $E_{2}$, violating $|I \\cap E_{2}| \\leq 2$, so invalid.\n\n- $y = b_{3}$: by symmetry with $b_{2}$, the only valid swap is $x = b_{1}$ giving $\\{a_{1}, b_{3}, b_{4}\\}$ of weight $11$, not strictly larger; the other two swaps are invalid for the same reasons as above.\n\nTherefore, no single swap yields a strictly higher weight. The algorithm terminates at the starting basis with\n$$\nW_{\\mathrm{local}} = 11.\n$$\nThus,\n$$\n\\frac{W_{\\mathrm{local}}}{W_{\\mathrm{opt}}} = \\frac{11}{13} \\approx 0.8461538\\ldots\n$$\nRounded to four significant figures, this is $0.8462$.", "answer": "$$\\boxed{0.8462}$$", "id": "1542039"}]}