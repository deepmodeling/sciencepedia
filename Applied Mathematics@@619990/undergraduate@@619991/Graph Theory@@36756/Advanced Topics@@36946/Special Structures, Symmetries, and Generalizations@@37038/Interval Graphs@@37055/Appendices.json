{"hands_on_practices": [{"introduction": "Our first practice exercise bridges the gap between a real-world scenario and its abstract representation. By modeling a project's task schedule as a set of intervals, you will construct the corresponding interval graph from scratch [@problem_id:1514695]. This foundational practice is key to visualizing how overlaps create connections and understanding the basic properties of the resulting graph structure.", "problem": "In project management, tasks with overlapping time schedules create resource conflicts. These conflicts can be modeled using an interval graph. Consider a project with six tasks, labeled A, B, C, D, E, and F. The time intervals (in arbitrary units) required for each task are given as closed intervals below:\n- Task A: $[1, 5]$\n- Task B: $[2, 6]$\n- Task C: $[4, 8]$\n- Task D: $[7, 10]$\n- Task E: $[9, 11]$\n- Task F: $[12, 14]$\n\nAn interval graph $G$ is constructed for this project schedule. The vertices of the graph correspond to the tasks, and an edge is drawn between two vertices if and only if their corresponding time intervals overlap. Two intervals are considered to overlap if they have at least one point in common, including endpoints (e.g., $[1, 2]$ and $[2, 3]$ are considered to overlap).\n\nWhich of the following statements about the resulting graph $G$ is true?\n\nA. The graph $G$ is connected.\nB. The graph $G$ contains a cycle of length 4.\nC. The maximum degree of any vertex in $G$ is 3.\nD. The graph $G$ is a tree.\nE. The graph $G$ has exactly three connected components.", "solution": "We model the interval graph using the rule that two closed intervals $[x,y]$ and $[u,v]$ overlap if and only if $\\max(x,u) \\le \\min(y,v)$. The intervals are\n$A:[1,5]$, $B:[2,6]$, $C:[4,8]$, $D:[7,10]$, $E:[9,11]$, $F:[12,14]$.\n\nCheck overlaps pairwise:\n- $A$ with $B$: $\\max(1,2)=2 \\le \\min(5,6)=5$, so $A\\sim B$.\n- $A$ with $C$: $\\max(1,4)=4 \\le \\min(5,8)=5$, so $A\\sim C$.\n- $A$ with $D$: $\\max(1,7)=7 \\nleq \\min(5,10)=5$, so no edge.\n- $A$ with $E$: $\\max(1,9)=9 \\nleq \\min(5,11)=5$, so no edge.\n- $A$ with $F$: $\\max(1,12)=12 \\nleq \\min(5,14)=5$, so no edge.\n\n- $B$ with $C$: $\\max(2,4)=4 \\le \\min(6,8)=6$, so $B\\sim C$.\n- $B$ with $D$: $\\max(2,7)=7 \\nleq \\min(6,10)=6$, so no edge.\n- $B$ with $E$: $\\max(2,9)=9 \\nleq \\min(6,11)=6$, so no edge.\n- $B$ with $F$: $\\max(2,12)=12 \\nleq \\min(6,14)=6$, so no edge.\n\n- $C$ with $D$: $\\max(4,7)=7 \\le \\min(8,10)=8$, so $C\\sim D$.\n- $C$ with $E$: $\\max(4,9)=9 \\nleq \\min(8,11)=8$, so no edge.\n- $C$ with $F$: $\\max(4,12)=12 \\nleq \\min(8,14)=8$, so no edge.\n\n- $D$ with $E$: $\\max(7,9)=9 \\le \\min(10,11)=10$, so $D\\sim E$.\n- $D$ with $F$: $\\max(7,12)=12 \\nleq \\min(10,14)=10$, so no edge.\n\n- $E$ with $F$: $\\max(9,12)=12 \\nleq \\min(11,14)=11$, so no edge.\n\nThus the edge set is $\\{AB, AC, BC, CD, DE\\}$. The degrees are $\\deg(A)=2$, $\\deg(B)=2$, $\\deg(C)=3$, $\\deg(D)=2$, $\\deg(E)=1$, $\\deg(F)=0$. Therefore the maximum degree is $3$, attained at $C$.\n\nConnectivity: vertices $A,B,C,D,E$ form a connected component via the path $A$–$B$–$C$–$D$–$E$ (with a triangle among $A,B,C$), and $F$ is isolated. Hence there are exactly $2$ connected components, so the graph is not connected and not a tree.\n\nCycle analysis: there is a $3$-cycle on $A,B,C$. To have a $4$-cycle, we would need four vertices $v_{1},v_{2},v_{3},v_{4}$ with edges $v_{1}v_{2}, v_{2}v_{3}, v_{3}v_{4}, v_{4}v_{1}$. Checking candidates among $A$–$E$ shows no such quartet, since none of $A$–$D$, $A$–$E$, $B$–$D$, $B$–$E$, $C$–$E$ are edges, so no 4-cycle exists.\n\nEvaluate statements:\n- A: False (graph not connected).\n- B: False (no cycle of length $4$).\n- C: True (maximum degree is $3$).\n- D: False (graph not connected and contains a cycle).\n- E: False (there are $2$, not $3$, components).\n\nHence, only C is correct.", "answer": "$$\\boxed{C}$$", "id": "1514695"}, {"introduction": "Understanding what a concept *is* often involves understanding what it *is not*. This practice challenges you to think about the inherent geometric constraints of interval representations by examining why a simple cycle graph, $C_4$, cannot be an interval graph [@problem_id:1534410]. This exercise reveals the deep connection between a graph's structure and its potential representation on a one-dimensional line.", "problem": "An undirected graph $G=(V, E)$ is called an **interval graph** if its vertices can be put into one-to-one correspondence with a set of intervals on the real line, such that two vertices are adjacent if and only if their corresponding intervals have a non-empty intersection.\n\nConsider the cycle graph on four vertices, denoted as $C_4$. This graph has a vertex set $V = \\{v_1, v_2, v_3, v_4\\}$ and an edge set $E = \\{(v_1, v_2), (v_2, v_3), (v_3, v_4), (v_4, v_1)\\}$. The graph $C_4$ is a well-known example of a graph that is *not* an interval graph.\n\nWhich of the following statements provides a correct and rigorous explanation for why $C_4$ cannot be an interval graph?\n\nA. Let the vertices be labeled in cyclic order. The non-adjacent vertices $v_1$ and $v_3$ share the same neighborhood, $\\{v_2, v_4\\}$. If an interval representation existed, the necessarily disjoint intervals for $v_1$ and $v_3$ would both need to be intersected by the intervals for $v_2$ and $v_4$. This would force the intervals for $v_2$ and $v_4$ to both span the gap between the intervals for $v_1$ and $v_3$, causing them to intersect. This contradicts the fact that $v_2$ and $v_4$ are non-adjacent.\n\nB. The graph $C_4$ is not an interval graph because it is a bipartite graph. Many bipartite graphs, such as complete bipartite graphs $K_{m,n}$ where $m,n \\ge 2$, are not interval graphs, and $C_4$ falls into this category by virtue of its structure.\n\nC. Any cycle graph $C_n$ with $n \\ge 4$ vertices cannot be an interval graph. The attempt to arrange intervals on a one-dimensional line to represent a cyclic structure will always fail, because the interval for the last vertex $v_n$ must intersect the interval for the first vertex $v_1$ without intersecting other required non-adjacent vertices, which is geometrically impossible.\n\nD. A graph is an interval graph if and only if it does not contain an asteroidal triple (an independent set of three vertices such that there is a path between any two that does not contain any neighbor of the third vertex) and is chordal. The graph $C_4$ contains an asteroidal triple, specifically the vertices $\\{v_1, v_2, v_3\\}$, and is therefore not an interval graph.", "solution": "We recall the definition: in an interval representation, two vertices are adjacent if and only if their corresponding intervals intersect, and non-adjacent vertices must have disjoint intervals.\n\nAssume, for contradiction, that $C_{4}$ has an interval representation. Label the vertices cyclically as $v_{1},v_{2},v_{3},v_{4}$, and let their intervals be $I_{1},I_{2},I_{3},I_{4}$, respectively. Since $v_{1}$ and $v_{3}$ are non-adjacent, their intervals must be disjoint: $I_{1}\\cap I_{3}=\\varnothing$. Because $v_{2}$ is adjacent to both $v_{1}$ and $v_{3}$, its interval must intersect both $I_{1}$ and $I_{3}$: $I_{2}\\cap I_{1}\\neq\\varnothing$ and $I_{2}\\cap I_{3}\\neq\\varnothing$. Similarly, $v_{4}$ is adjacent to both $v_{1}$ and $v_{3}$, so $I_{4}\\cap I_{1}\\neq\\varnothing$ and $I_{4}\\cap I_{3}\\neq\\varnothing$.\n\nLet the disjoint intervals $I_{1}$ and $I_{3}$ be separated on the real line by a nonempty open gap $G$, namely the open interval between the right endpoint of $I_{1}$ and the left endpoint of $I_{3}$. For an interval to intersect both $I_{1}$ and $I_{3}$, it must contain a point in $I_{1}$ and a point in $I_{3}$. Since intervals are convex subsets of the real line, any such interval must contain the entire closed segment between those two points, and in particular it must contain the gap $G$. Therefore both $I_{2}$ and $I_{4}$ contain $G$, which implies $I_{2}\\cap I_{4}\\neq\\varnothing$.\n\nHowever, $v_{2}$ and $v_{4}$ are non-adjacent in $C_{4}$, so their intervals must be disjoint. This contradiction shows that no interval representation of $C_{4}$ exists. This is exactly the rigorous reasoning presented in option A.\n\nOption B is incorrect because being bipartite does not preclude being an interval graph (e.g., trees are both interval and bipartite). Option C states a true fact (cycles $C_{n}$ with $n\\geq 4$ are not interval graphs) but gives a non-rigorous justification. Option D cites a correct characterization of interval graphs (chordal and asteroidal-triple-free) but incorrectly claims that $C_{4}$ contains an asteroidal triple; moreover, $C_{4}$ fails chordality, which alone suffices to rule it out.", "answer": "$$\\boxed{A}$$", "id": "1534410"}, {"introduction": "The special structure of interval graphs is not just a theoretical curiosity; it allows us to solve complex optimization problems with surprisingly simple and efficient algorithms. This final practice places you in the role of a systems administrator managing a supercomputer, tasked with minimizing job offloading to prevent system overload [@problem_id:1514663]. You will apply your understanding of interval graph properties to develop a strategy for solving this resource allocation problem, which is a classic application with wide-ranging importance.", "problem": "A supercomputer facility needs to schedule a set of scientific jobs. Each job is characterized by a continuous time interval during which it must be actively processed. The facility's core processing unit can handle at most $k$ jobs concurrently. If at any moment in time more than $k$ jobs are running simultaneously, the system will overload and fail. To prevent this, system administrators can choose to offload some jobs to an external cloud service, effectively removing them from the local schedule. The goal is to ensure system stability by minimizing the number of offloaded jobs.\n\nYou are given a set of 8 jobs and a concurrency limit of $k=2$. The time intervals for the jobs are given as [start time, end time]:\n- Job 1: [1, 5]\n- Job 2: [2, 6]\n- Job 3: [3, 7]\n- Job 4: [4, 8]\n- Job 5: [9, 11]\n- Job 6: [10, 14]\n- Job 7: [12, 13]\n- Job 8: [15, 17]\n\nWhat is the minimum number of jobs that must be offloaded to ensure that no more than 2 jobs are ever running at the same time?", "solution": "We formalize the problem as minimizing the number of intervals removed so that the concurrency never exceeds the limit. Let $k=2$ and define the concurrency function $c(t)$ to be the number of active jobs at time $t$. A necessary lower bound on the number of removals is\n$$\nR_{\\min} \\geq \\max_{t} \\max\\{0,\\, c(t) - k\\}.\n$$\nFor interval graphs, removing the minimum number of intervals to ensure $c(t) \\leq k$ for all $t$ can be achieved by a sweep-line greedy algorithm: process jobs in order of increasing start time, maintain at most $k$ active jobs, and whenever the number of overlapping jobs would exceed $k$, offload the job with the latest end time among the overlapping set. This strategy is optimal because removing the latest-finishing job minimizes future conflicts.\n\nWe compute $c(t)$ over the given intervals:\n- Jobs are: $[1,5], [2,6], [3,7], [4,8], [9,11], [10,14], [12,13], [15,17]$.\n\nOn the interval $[1,8]$:\n- For $t \\in (1,2)$: $c(t)=1$ (job 1).\n- For $t \\in (2,3)$: $c(t)=2$ (jobs 1, 2).\n- For $t \\in (3,4)$: $c(t)=3$ (jobs 1, 2, 3).\n- For $t \\in (4,5)$: $c(t)=4$ (jobs 1, 2, 3, 4).\n- For $t \\in (5,6)$: $c(t)=3$ (jobs 2, 3, 4).\n- For $t \\in (6,7)$: $c(t)=2$ (jobs 3, 4).\n- For $t \\in (7,8)$: $c(t)=1$ (job 4).\n\nOn the later intervals:\n- For $t \\in (9,10)$: $c(t)=1$ (job 5).\n- For $t \\in (10,11)$: $c(t)=2$ (jobs 5, 6).\n- For $t \\in (11,12)$: $c(t)=1$ (job 6).\n- For $t \\in (12,13)$: $c(t)=2$ (jobs 6, 7).\n- For $t \\in (13,14)$: $c(t)=1$ (job 6).\n- For $t \\in (15,17)$: $c(t)=1$ (job 8).\n\nThus the maximum concurrency is $\\max_{t} c(t)=4$, attained on $(4,5)$. The lower bound gives $R_{\\min} \\geq 4-2=2$.\n\nWe now apply the optimal greedy removal:\n- Process by start times: add $[1,5]$ and $[2,6]$ (two active).\n- When $[3,7]$ starts, there would be three active. Offload the one with latest end time among $\\{[1,5],[2,6],[3,7]\\}$, namely $[3,7]$.\n- When $[4,8]$ starts, again three candidates $\\{[1,5],[2,6],[4,8]\\}$; offload the latest finisher $[4,8]$.\n- The remaining jobs never exceed two concurrent in the later segments, as checked above.\n\nThis removes exactly two jobs and ensures $c(t) \\leq 2$ for all $t$. Since this matches the lower bound, it is optimal.\n\nTherefore, the minimum number of jobs that must be offloaded is $2$.", "answer": "$$\\boxed{2}$$", "id": "1514663"}]}