{"hands_on_practices": [{"introduction": "The first step in mastering the concept of condensation is to apply the procedure to a concrete example. This exercise provides a small, manageable digraph and guides you through the fundamental process of identifying its strongly connected components (SCCs) and then determining the edges of the resulting condensation graph. Completing this practice will help solidify your understanding of how a potentially complex digraph is simplified into its essential, acyclic structure of inter-component relationships [@problem_id:1491380].", "problem": "Consider a directed graph (digraph) $G$ with vertex set $V = \\{v_1, v_2, v_3, v_4, v_5\\}$ and edge set $E = \\{(v_1, v_2), (v_2, v_3), (v_3, v_1), (v_1, v_4), (v_4, v_5), (v_2, v_5)\\}$.\n\nA strongly connected component (SCC) of a digraph is a maximal subgraph where for every ordered pair of vertices $(u, w)$ in the subgraph, there is a directed path from $u$ to $w$.\n\nThe condensation of $G$, denoted $G^{SCC}$, is a directed graph constructed as follows:\n1. Each vertex of $G^{SCC}$ represents one of the strongly connected components of $G$.\n2. An edge exists in $G^{SCC}$ from the vertex representing SCC $C_i$ to the vertex representing SCC $C_j$ (for $i \\neq j$) if and only if there is at least one edge in $G$ from a vertex in $C_i$ to a vertex in $C_j$.\n\nDetermine the total number of edges in the condensation graph $G^{SCC}$.", "solution": "We first determine the strongly connected components (SCCs) of $G$ using the definition: a subgraph is strongly connected if for every ordered pair of vertices $(u,w)$ in it, there is a directed path from $u$ to $w$, and it is maximal with this property.\n\nConsider the vertices $v_{1}, v_{2}, v_{3}$ with edges $(v_{1},v_{2})$, $(v_{2},v_{3})$, $(v_{3},v_{1})$. These form a directed cycle, hence for any $u,w \\in \\{v_{1},v_{2},v_{3}\\}$ there exists a directed path from $u$ to $w$. Therefore,\n$$\nC_{1}=\\{v_{1},v_{2},v_{3}\\}\n$$\nis strongly connected. It is maximal because neither $v_{4}$ nor $v_{5}$ can reach any of $v_{1},v_{2},v_{3}$ (no outgoing edges from $v_{5}$, and $v_{4}$ has only $(v_{4},v_{5})$), so adding $v_{4}$ or $v_{5}$ would violate strong connectivity.\n\nNext, examine $v_{4}$ and $v_{5}$. There is an edge $(v_{4},v_{5})$, so $v_{4}$ reaches $v_{5}$, but there is no edge from $v_{5}$ to $v_{4}$ nor any path from $v_{5}$ to $v_{4}$. Also, $v_{5}$ has no outgoing edges. Hence neither $\\{v_{4},v_{5}\\}$ nor $\\{v_{4}\\}\\cup C_{1}$ nor $\\{v_{5}\\}\\cup C_{1}$ is strongly connected. Therefore the remaining SCCs are the singletons\n$$\nC_{2}=\\{v_{4}\\}, \\quad C_{3}=\\{v_{5}\\}.\n$$\n\nThus the vertex set of the condensation graph is\n$$\nV^{SCC}=\\{C_{1},C_{2},C_{3}\\}.\n$$\n\nBy the definition of the condensation edges, for $i \\neq j$ there is an edge $(C_{i},C_{j})$ in $G^{SCC}$ if and only if there exists $(u,w) \\in E$ with $u \\in C_{i}$ and $w \\in C_{j}$. We check all inter-component edges in $G$:\n- From $C_{1}$ to $C_{2}$: $(v_{1},v_{4})$ exists, so $(C_{1},C_{2}) \\in E^{SCC}$.\n- From $C_{1}$ to $C_{3}$: $(v_{2},v_{5})$ exists, so $(C_{1},C_{3}) \\in E^{SCC}$.\n- From $C_{2}$ to $C_{3}$: $(v_{4},v_{5})$ exists, so $(C_{2},C_{3}) \\in E^{SCC}$.\n- There are no edges from $C_{2}$ to $C_{1}$, from $C_{3}$ to $C_{1}$, or from $C_{3}$ to $C_{2}$, since no such edges exist in $E$.\n\nTherefore,\n$$\nE^{SCC}=\\{(C_{1},C_{2}),\\,(C_{1},C_{3}),\\,(C_{2},C_{3})\\},\n$$\nand the total number of edges in $G^{SCC}$ is\n$$\n|E^{SCC}|=3.\n$$", "answer": "$$\\boxed{3}$$", "id": "1491380"}, {"introduction": "Moving from analysis to synthesis is a crucial step in developing a deeper understanding. Instead of finding the condensation of a given graph, this problem challenges you to work in reverse: to construct a digraph whose condensation has a specific, predetermined shape. This exercise sharpens your intuition about how the internal structure of SCCs (the cycles) and the \"bridge\" edges connecting them dictate the final topology of the condensation graph [@problem_id:1491379].", "problem": "In graph theory, a directed graph (or digraph) $G$ consists of a set of vertices $V$ and a set of ordered pairs of vertices called edges $E$. A strongly connected component (SCC) of a digraph is a maximal set of vertices $C \\subseteq V$ such that for every pair of vertices $u, v \\in C$, there is a directed path from $u$ to $v$ and a directed path from $v$ to $u$.\n\nThe condensation of a digraph $G$ is a new digraph $G_{SCC}$ constructed by contracting each SCC of $G$ into a single vertex. Specifically, if $C_1, C_2, \\dots, C_k$ are the SCCs of $G$, then the vertices of $G_{SCC}$ are $\\{v_1, v_2, \\dots, v_k\\}$, where $v_i$ corresponds to $C_i$. There is a directed edge from $v_i$ to $v_j$ in $G_{SCC}$ (for $i \\neq j$) if and only if there exists an edge $(u,w)$ in the original graph $G$ where $u \\in C_i$ and $w \\in C_j$.\n\nConsider a digraph $G = (V, E)$ with vertex set $V = \\{1, 2, 3, 4, 5, 6, 7\\}$. Which of the following sets of edges $E$ results in a digraph whose condensation has exactly three vertices, where one vertex is a source (it has no incoming edges) and the other two are sinks (they have no outgoing edges)?\n\nA. $E = \\{(1,2), (2,3), (3,1), (4,5), (5,4), (6,7), (7,6), (1,4), (2,6)\\}$\n\nB. $E = \\{(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,1)\\}$\n\nC. $E = \\{(1,2), (2,3), (3,1), (4,5), (5,4), (6,7), (7,6), (1,4), (4,6)\\}$\n\nD. $E = \\{(1,2), (1,3), (4,5), (5,4), (6,7), (7,6), (2,4), (3,6)\\}$", "solution": "We need a digraph whose condensation has exactly three vertices, one being a source (no incoming edges from other SCCs) and the other two being sinks (no outgoing edges to other SCCs). This requires that the original digraph $G=(V,E)$ has exactly three strongly connected components (SCCs), and that between these SCCs the only inter-SCC edges go from a single SCC to each of the other two, with no other inter-SCC edges.\n\nAnalyze each option by identifying SCCs and inter-SCC edges.\n\nOption A: $E=\\{(1,2),(2,3),(3,1),(4,5),(5,4),(6,7),(7,6),(1,4),(2,6)\\}$.\n- The edges $(1,2),(2,3),(3,1)$ form a directed cycle on $\\{1,2,3\\}$, so $C_{1}=\\{1,2,3\\}$ is an SCC.\n- The edges $(4,5),(5,4)$ form $C_{2}=\\{4,5\\}$ as an SCC.\n- The edges $(6,7),(7,6)$ form $C_{3}=\\{6,7\\}$ as an SCC.\n- Inter-SCC edges: $(1,4)$ gives $C_{1}\\to C_{2}$; $(2,6)$ gives $C_{1}\\to C_{3}$. There are no edges from $C_{2}$ or $C_{3}$ to any other SCC, and no edges into $C_{1}$ from other SCCs.\n- The condensation $G_{SCC}$ thus has three vertices $v_{1},v_{2},v_{3}$ corresponding to $C_{1},C_{2},C_{3}$, with edges $v_{1}\\to v_{2}$ and $v_{1}\\to v_{3}$. Then $v_{1}$ has indegree $0$ (a source) and $v_{2},v_{3}$ have outdegree $0$ (sinks). This matches the requirement.\n\nOption B: $E=\\{(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,1)\\}$.\n- These edges form a single directed cycle on all vertices $\\{1,2,3,4,5,6,7\\}$, so the entire graph is one SCC.\n- The condensation has one vertex, not three. This does not match.\n\nOption C: $E=\\{(1,2),(2,3),(3,1),(4,5),(5,4),(6,7),(7,6),(1,4),(4,6)\\}$.\n- SCCs are as in Option A: $C_{1}=\\{1,2,3\\}$, $C_{2}=\\{4,5\\}$, $C_{3}=\\{6,7\\}$.\n- Inter-SCC edges: $(1,4)$ gives $C_{1}\\to C_{2}$; $(4,6)$ gives $C_{2}\\to C_{3}$.\n- The condensation is a path $v_{1}\\to v_{2}\\to v_{3}$, yielding exactly one source ($v_{1}$) and exactly one sink ($v_{3}$), with $v_{2}$ neither a source nor a sink. This does not match the requirement of two sinks.\n\nOption D: $E=\\{(1,2),(1,3),(4,5),(5,4),(6,7),(7,6),(2,4),(3,6)\\}$.\n- $(4,5),(5,4)$ gives SCC $C_{2}=\\{4,5\\}$.\n- $(6,7),(7,6)$ gives SCC $C_{3}=\\{6,7\\}$.\n- Vertex $1$ has only outgoing edges to $2$ and $3$, with no path back; thus $1$ is its own SCC $C_{1}=\\{1\\}$.\n- Vertex $2$ has an edge to $4$ and no path back; thus $2$ is its own SCC $C_{4}=\\{2\\}$.\n- Vertex $3$ has an edge to $6$ and no path back; thus $3$ is its own SCC $C_{5}=\\{3\\}$.\n- Therefore there are five SCCs, not three. This does not match.\n\nOnly Option A yields exactly three SCCs with condensation having one source and two sinks.", "answer": "$$\\boxed{A}$$", "id": "1491379"}, {"introduction": "This practice bridges the gap between abstract graph theory and its practical application in computer science. It prompts you to consider the real-world performance implications of building a condensation graph, based on the underlying data structure used to represent the original digraph. By analyzing the asymptotic time complexity for adjacency matrix versus adjacency list representations, you will gain valuable insight into how algorithmic efficiency is crucial in software that analyzes large-scale systems, such as the dependency networks in codebases [@problem_id:1491385].", "problem": "A software engineering team is designing a system for analyzing dependency hierarchies in large codebases. The dependency structure is modeled as a directed graph $G = (V, E)$, where the set of vertices $V$ represents software modules and a directed edge $(u, v) \\in E$ indicates that module $u$ has a dependency on module $v$. The number of modules is $n = |V|$ and the number of dependencies is $m = |E|$.\n\nTo simplify the overall structure and identify groups of mutually dependent modules, the team plans to compute the condensation graph of $G$. The condensation graph is formed by treating each of the Strongly Connected Components (SCCs) of $G$ as a single vertex. An edge exists from one SCC-vertex to another if there is at least one edge in the original graph $G$ from a module in the first SCC to a module in the second SCC.\n\nTwo junior engineers have proposed different approaches for the implementation.\n-   **Proposal 1**: Represent the graph $G$ using an adjacency matrix.\n-   **Proposal 2**: Represent the graph $G$ using an adjacency list.\n\nYour task is to determine the tightest worst-case asymptotic time complexity for building the condensation graph for each proposal, using standard algorithms (e.g., Tarjan's or Kosaraju's algorithm for finding SCCs). Let $T_{matrix}$ be the time complexity for Proposal 1 and $T_{list}$ be the time complexity for Proposal 2.\n\nWhich of the following options correctly represents the pair of complexities $(T_{matrix}, T_{list})$?\n\nA. $(T_{matrix} = O(n^2), T_{list} = O(n+m))$\n\nB. $(T_{matrix} = O(n+m), T_{list} = O(n^2))$\n\nC. $(T_{matrix} = O(n^3), T_{list} = O(nm))$\n\nD. $(T_{matrix} = O(n^2), T_{list} = O(n \\log n + m))$", "solution": "Let $G=(V,E)$ with $|V|=n$ and $|E|=m$. Building the condensation graph consists of two main phases: (i) computing the strongly connected components (SCCs) using a standard DFS-based algorithm such as Tarjan's or Kosaraju's, and (ii) contracting each SCC to a single vertex and creating edges between SCC-vertices induced by edges of $G$.\n\nFor an adjacency list representation:\n- A DFS-based SCC algorithm visits each vertex once and scans each adjacency list exactly once. The total time to compute SCCs is therefore $O(n+m)$.\n- To build condensation edges, iterate once over all edges $(u,v)\\in E$. If $\\operatorname{comp}(u)\\neq \\operatorname{comp}(v)$, add an edge from $\\operatorname{comp}(u)$ to $\\operatorname{comp}(v)$ in the condensation graph. Deduplication of parallel edges can be achieved in $O(1)$ amortized time per candidate edge using hashing or with marking structures indexed by component identifiers. Thus this phase is $O(m)$, and the total remains $O(n+m)$.\nHence $T_{list}=O(n+m)$, which is tight because merely reading the input requires $\\Omega(n+m)$ time in the worst case.\n\nFor an adjacency matrix representation:\n- In a DFS-based SCC algorithm, exploring the outgoing edges of a vertex requires scanning its entire row of the adjacency matrix, which costs $O(n)$ per explored vertex. Over all vertices, this yields $O(n^{2})$. Tarjan's algorithm performs one such pass; Kosaraju's performs two passes, still $O(n^{2})$.\n- To build condensation edges, one must enumerate existing edges. With an adjacency matrix, this requires inspecting entries of the matrix; in the worst case this necessitates scanning all $n^{2}$ entries to find all ones. Therefore this phase is $O(n^{2})$.\nHence $T_{matrix}=O(n^{2})$, which is tight because for dense graphs with $m=\\Theta(n^{2})$ any algorithm must at least read $\\Theta(n^{2})$ input bits to enumerate the edges.\n\nCombining these yields the pair $(T_{matrix},T_{list})=(O(n^{2}),O(n+m))$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1491385"}]}