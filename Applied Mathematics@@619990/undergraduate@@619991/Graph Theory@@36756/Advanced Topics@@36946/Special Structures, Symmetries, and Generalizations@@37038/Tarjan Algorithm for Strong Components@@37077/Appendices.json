{"hands_on_practices": [{"introduction": "To master Tarjan's algorithm, we must first understand its behavior on the simplest possible non-trivial case: a single, directed cycle. This exercise asks you to analyze how the algorithm's core variables, the discovery time $disc[v]$ and the low-link value $low[v]$, evolve as the depth-first search traverses a cycle. By deriving general formulas for these values, you will gain a foundational insight into how a back edge is detected and used to unify all vertices in a cycle into a single strongly connected component [@problem_id:1537554].", "problem": "Consider a directed graph $G = (V, E)$ consisting of a single simple cycle of length $n$, where $n \\ge 2$. The set of vertices is $V = \\{v_0, v_1, \\ldots, v_{n-1}\\}$. The set of edges is $E = \\{(v_i, v_{(i+1) \\pmod{n}}) \\mid i = 0, 1, \\ldots, n-1\\}$.\n\nWe apply Tarjan's algorithm for finding Strongly Connected Components (SCCs) to this graph. The algorithm initiates a Depth-First Search (DFS) starting from vertex $v_0$. During the traversal, the algorithm maintains and computes two values for each vertex $v$:\n\n1.  A **discovery time**, denoted `disc[v]`. This is an integer value from a global counter that starts at 0. When a vertex $v$ is first visited, `disc[v]` is set to the current value of the counter, and then the counter is incremented.\n2.  A **low-link value**, denoted `low[v]`. This value is initialized to `low[v] = disc[v]`. The low-link value of a vertex $u$ is then updated by taking the minimum of its current `low[u]` and the `low` values of its successors in the DFS tree. Additionally, if an edge $(u, w)$ leads to a vertex $w$ that has already been visited and is currently on the DFS recursion stack, `low[u]` is updated by taking the minimum of its current value and `disc[w]`.\n\nAfter the algorithm completes its traversal starting from $v_0$ and all recursive calls have returned, what are the final values of `disc[v_i]` and `low[v_i]` for an arbitrary vertex $v_i$, where $0 \\le i \\le n-1$?\n\nExpress your answer as a pair of symbolic expressions in terms of $i$. The first expression should be for `disc[v_i]` and the second for `low[v_i]`.", "solution": "We analyze Tarjan’s algorithm on the directed graph that is a single simple cycle $v_{0} \\to v_{1} \\to \\cdots \\to v_{n-1} \\to v_{0}$, with a DFS starting at $v_{0}$. The global counter for discovery times starts at $0$, and when a vertex is first visited, it is assigned the current counter and the counter is then incremented.\n\nFirst, the DFS order is forced by the unique outgoing edge of each vertex: starting at $v_{0}$, the algorithm visits $v_{1}$, then $v_{2}$, and so on, until $v_{n-1}$. Therefore, the discovery times are assigned in sequence:\n$$\n\\text{disc}[v_{0}] = 0,\\ \\text{disc}[v_{1}] = 1,\\ \\ldots,\\ \\text{disc}[v_{i}] = i,\\ \\ldots,\\ \\text{disc}[v_{n-1}] = n-1.\n$$\nThus, for arbitrary $i$ with $0 \\leq i \\leq n-1$,\n$$\n\\text{disc}[v_{i}] = i.\n$$\n\nNext, low-link values are initialized as $\\text{low}[v] = \\text{disc}[v]$ when a vertex $v$ is first visited. They are then updated as follows: for an edge $(u, w)$,\n- if $w$ is unvisited, after recursively visiting $w$, set $\\text{low}[u] = \\min(\\text{low}[u], \\text{low}[w])$;\n- if $w$ is already visited and currently on the DFS stack, set $\\text{low}[u] = \\min(\\text{low}[u], \\text{disc}[w])$.\n\nWhen exploring $v_{n-1}$, its successor is $v_{0}$, which has already been visited and remains on the recursion stack (since no SCC has been popped yet). By the second update rule,\n$$\n\\text{low}[v_{n-1}] = \\min(\\text{low}[v_{n-1}], \\text{disc}[v_{0}]) = \\min(n-1, 0) = 0,\n$$\nusing $n \\geq 2$ so that $n-1 \\geq 1$.\n\nNow return in the recursion to $v_{n-2}$, whose tree child is $v_{n-1}$. Apply the first update rule:\n$$\n\\text{low}[v_{n-2}] = \\min(\\text{low}[v_{n-2}], \\text{low}[v_{n-1}]) = \\min(n-2, 0) = 0.\n$$\nProceeding similarly upward for each $k$ from $n-3$ down to $0$,\n$$\n\\text{low}[v_{k}] = \\min(\\text{low}[v_{k}], \\text{low}[v_{k+1}]) = \\min(k, 0) = 0.\n$$\nTherefore, for every $i$ with $0 \\leq i \\leq n-1$,\n$$\n\\text{low}[v_{i}] = 0.\n$$\n\nCombining both results, for an arbitrary vertex $v_{i}$,\n$$\n\\text{disc}[v_{i}] = i,\\quad \\text{low}[v_{i}] = 0.\n$$\nThese values are consistent with the fact that all vertices belong to a single SCC whose root is $v_{0}$ with the minimum discovery time $0$.", "answer": "$$\\boxed{\\begin{pmatrix} i & 0 \\end{pmatrix}}$$", "id": "1537554"}, {"introduction": "Building on the fundamentals, this next practice challenges you to perform a detailed trace of Tarjan's algorithm on a more intricate graph structure. Here, two cycles are joined at a single vertex, forcing the algorithm to navigate nested recursive calls and update low-link values across different paths. By tracking the state of the vertex stack at a key moment, you will solidify your understanding of the algorithm's precise, step-by-step execution and its robust handling of complex connectivity [@problem_id:1537540].", "problem": "Consider a directed graph $G = (V, E)$ with a set of vertices $V = \\{0, 1, 2, 3, 4\\}$ and a set of edges $E$ defined by the following adjacency list:\n- 0: [1, 3]\n- 1: [2]\n- 2: [0]\n- 3: [4]\n- 4: [0]\n\nYou are to trace the execution of Tarjan's algorithm for finding Strongly Connected Components (SCCs). The algorithm starts its initial Depth First Search (DFS) from vertex 0. The standard implementation of Tarjan's algorithm is used, which maintains a stack of vertices, a discovery time (or id) for each vertex, and a low-link value for each vertex.\n\nAssume the following conventions for the algorithm's execution:\n1.  Vertices are processed in the order they are first discovered by the DFS.\n2.  When a vertex has multiple outgoing edges, its neighbors are explored in ascending order of their integer labels.\n3.  A global timer, initialized to 0, is used to assign the discovery time `id` to each new vertex, and is incremented after each assignment.\n4.  The low-link value of a vertex is initialized to its discovery time.\n\nWhat are the contents of the algorithm's stack, listed from bottom to top, at the precise moment *just before* the vertices of the first identified SCC begin to be popped from the stack?\n\nA. 0, 1, 2, 3, 4\n\nB. 0, 3, 4, 1, 2\n\nC. 0, 1, 2\n\nD. 4, 3, 2, 1, 0\n\nE. 0", "solution": "We execute Tarjan’s algorithm starting DFS at vertex 0, with a global timer initialized to 0. For each discovered vertex $v$, we set $\\mathrm{id}[v]$ to the current timer, set $\\mathrm{low}[v] = \\mathrm{id}[v]$, push $v$ onto the stack, mark it on-stack, and increment the timer. Neighbors are explored in ascending order.\n\n1. Discover $0$: set $\\mathrm{id}[0]=0$, $\\mathrm{low}[0]=0$, push $0$; timer becomes $1$. From $0$, first explore neighbor $1$ (since $1<3$).\n2. Discover $1$: set $\\mathrm{id}[1]=1$, $\\mathrm{low}[1]=1$, push $1$; timer becomes $2$. From $1$, explore neighbor $2$.\n3. Discover $2$: set $\\mathrm{id}[2]=2$, $\\mathrm{low}[2]=2$, push $2$; timer becomes $3$. From $2$, explore neighbor $0$.\n   - Since $0$ is on the stack, update $\\mathrm{low}[2] = \\min(\\mathrm{low}[2], \\mathrm{id}[0]) = \\min(2,0)=0$.\n   - Return to $1$: update $\\mathrm{low}[1] = \\min(\\mathrm{low}[1], \\mathrm{low}[2]) = \\min(1,0)=0$.\n   - Return to $0$: update $\\mathrm{low}[0] = \\min(\\mathrm{low}[0], \\mathrm{low}[1]) = \\min(0,0)=0$.\n3. Continue at $0$ with its next neighbor $3$.\n4. Discover $3$: set $\\mathrm{id}[3]=3$, $\\mathrm{low}[3]=3$, push $3$; timer becomes $4$. From $3$, explore neighbor $4$.\n5. Discover $4$: set $\\mathrm{id}[4]=4$, $\\mathrm{low}[4]=4$, push $4$; timer becomes $5$. From $4$, explore neighbor $0$.\n   - Since $0$ is on the stack, update $\\mathrm{low}[4] = \\min(\\mathrm{low}[4], \\mathrm{id}[0]) = \\min(4,0)=0$.\n   - Return to $3$: update $\\mathrm{low}[3] = \\min(\\mathrm{low}[3], \\mathrm{low}[4]) = \\min(3,0)=0$.\n   - Return to $0$: update $\\mathrm{low}[0] = \\min(\\mathrm{low}[0], \\mathrm{low}[3]) = \\min(0,0)=0$.\n\nNow all neighbors of $0$ have been processed. Since $\\mathrm{low}[0] = \\mathrm{id}[0]=0$, $0$ is identified as the root of an SCC, and the algorithm will begin popping vertices from the stack until $0$ is popped. Up to this precise moment just before popping begins, no earlier vertex had $\\mathrm{low}[v]=\\mathrm{id}[v]$ (for $v \\in \\{1,2,3,4\\}$ we have $\\mathrm{low}[v]=0 \\neq \\mathrm{id}[v]$), so nothing has been popped yet.\n\nTherefore, the stack from bottom to top, just before popping begins, contains the vertices in their order of discovery: $0, 1, 2, 3, 4$.", "answer": "$$\\boxed{A}$$", "id": "1537540"}, {"introduction": "The final step in our practice is to transition from mechanical tracing to high-level structural reasoning. Instead of just running the algorithm, this problem asks you to predict its outcome when a graph's structure is altered by a single edge. By analyzing how adding a 'back-edge' to a simple path consolidates multiple vertices into a single large SCC, you will develop a deeper intuition for graph connectivity and the powerful analytical capabilities of this algorithm [@problem_id:1537538].", "problem": "Let a directed graph $G_0 = (V, E_0)$ be defined by a set of $n$ vertices $V = \\{v_1, v_2, \\ldots, v_n\\}$ and a set of edges $E_0 = \\{(v_k, v_{k+1}) \\mid 1 \\le k < n\\}$. This graph forms a simple directed path.\n\nA new graph, $G = (V, E)$, is created by adding a single edge $e = (v_i, v_j)$ to $G_0$, where the indices $i$ and $j$ are integers satisfying the condition $1 \\le j < i \\le n$.\n\nA Strongly Connected Component (SCC) of a directed graph is a maximal subgraph where for any two vertices $u$ and $w$ in the subgraph, there exists a directed path from $u$ to $w$ and a directed path from $w$ to $u$.\n\nDetermine the total number of SCCs in the resulting graph $G$. Present your answer as a closed-form expression in terms of $n$, $i$, and $j$.", "solution": "In the directed path graph $G_{0}$ with vertices $v_{1} \\to v_{2} \\to \\cdots \\to v_{n}$, for any $u<w$ there is a directed path from $v_{u}$ to $v_{w}$ but no path from $v_{w}$ back to $v_{u}$. Therefore, in $G_{0}$ each vertex forms its own strongly connected component (SCC).\n\nAdd the edge $e=(v_{i},v_{j})$ with $1 \\leq j < i \\leq n$. Consider the set of vertices with indices from $j$ to $i$. For any $a,b$ with $j \\leq a,b \\leq i$, there is a directed path from $v_{a}$ to $v_{b}$ constructed as follows: go forward along the path from $v_{a}$ to $v_{i}$, traverse the added edge to $v_{j}$, then go forward along the path from $v_{j}$ to $v_{b}$. By symmetry, there is also a path from $v_{b}$ to $v_{a}$ using the same mechanism. Hence, $\\{v_{j},v_{j+1},\\ldots,v_{i}\\}$ is a single SCC.\n\nNo vertex with index less than $j$ can be in this SCC: for $k<j$, although there is a path $v_{k} \\to \\cdots \\to v_{j}$, there is no directed path from $v_{j}$ (or any vertex in $\\{v_{j},\\ldots,v_{i}\\}$) back to $v_{k}$ because the only edges besides the added one go from lower to higher indices. Thus each $v_{1},\\ldots,v_{j-1}$ remains a singleton SCC.\n\nNo vertex with index greater than $i$ can be in this SCC: from $\\{v_{j},\\ldots,v_{i}\\}$ there is a path to any $v_{k}$ with $k>i$ along forward edges, but there is no path from such a $v_{k}$ back to any vertex with index $\\leq i$ due to the forward-only structure of the original path. Moreover, for $i<k<\\ell \\leq n$, there is a path $v_{k} \\to \\cdots \\to v_{\\ell}$ but not back, so each $v_{i+1},\\ldots,v_{n}$ is also a singleton SCC.\n\nTherefore, the total number of SCCs in $G$ is the sum of the one SCC formed by $\\{v_{j},\\ldots,v_{i}\\}$, the $(j-1)$ singleton SCCs before $v_{j}$, and the $(n-i)$ singleton SCCs after $v_{i}$:\n$$\n(j-1) + 1 + (n - i) = n - i + j.\n$$\nThis expression is already in closed form in terms of $n$, $i$, and $j$.", "answer": "$$\\boxed{n - i + j}$$", "id": "1537538"}]}