{"hands_on_practices": [{"introduction": "To begin our hands-on exploration, we start with the most elementary form of a Directed Acyclic Graph (DAG): a simple path. Understanding the properties of sources and sinks in this fundamental structure is the first step toward analyzing more complex networks. This exercise will help you solidify the core definitions in a clear and uncluttered setting, forming a solid base for the concepts to come [@problem_id:1533651].", "problem": "Consider a Directed Acyclic Graph (DAG) denoted by $G$, which is constructed on a set of $n$ vertices, labeled $V = \\{v_1, v_2, \\dots, v_n\\}$, where $n$ is an integer and $n \\ge 2$. The structure of the graph is defined by its edges: for every integer $i$ from $1$ to $n-1$, there is a directed edge from vertex $v_i$ to vertex $v_{i+1}$. These are the only edges present in the graph $G$.\n\nIn any directed graph, a vertex is called a **source** if its in-degree is 0 (i.e., it has no incoming edges). A vertex is called a **sink** if its out-degree is 0 (i.e., it has no outgoing edges).\n\nBased on this information, determine the total number of vertices in $G$ that are either a source or a sink.\n\nA. 1\n\nB. 2\n\nC. $n$\n\nD. $n-1$\n\nE. The number depends on the value of $n$.", "solution": "The graph $G$ has vertex set $V=\\{v_{1},v_{2},\\dots,v_{n}\\}$ and edge set defined as follows: for each integer $i$ with $1 \\leq i \\leq n-1$, there is exactly one directed edge from $v_{i}$ to $v_{i+1}$. Thus the edge set is $E=\\{(v_{i},v_{i+1}) : i=1,2,\\dots,n-1\\}$, and there are no other edges.\n\nCompute in-degree and out-degree of each vertex:\n- For $v_{1}$, there is no edge entering $v_{1}$, so its in-degree is $0$, and there is one edge leaving $v_{1}$ to $v_{2}$, so its out-degree is $1$. Hence $v_{1}$ is a source and not a sink.\n- For $v_{n}$, there is one edge entering $v_{n}$ from $v_{n-1}$, so its in-degree is $1$, and there is no edge leaving $v_{n}$, so its out-degree is $0$. Hence $v_{n}$ is a sink and not a source.\n- For any $v_{i}$ with $2 \\leq i \\leq n-1$, there is exactly one incoming edge from $v_{i-1}$ and exactly one outgoing edge to $v_{i+1}$, so its in-degree is $1$ and its out-degree is $1$. Hence such $v_{i}$ is neither a source nor a sink.\n\nTherefore, exactly two vertices are either a source or a sink, namely $v_{1}$ (source) and $v_{n}$ (sink). This corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1533651"}, {"introduction": "After mastering the basics, it's essential to challenge our assumptions and develop a more nuanced understanding. A common intuition might suggest that every DAG must have a balanced number of starting points (sources) and ending points (sinks), but is this truly the case? This problem hones your critical thinking skills by tasking you with finding a counterexample, a fundamental practice in mathematics and computer science for precisely defining the boundaries of a theorem or concept [@problem_id:1533666].", "problem": "A directed graph $G$ is defined by a set of vertices $V$ and a set of edges $E$, where each edge is an ordered pair of vertices $(u,v)$ representing a directed connection from vertex $u$ to vertex $v$.\n\nWithin this context, we define the following terms:\n- A **source** is a vertex with an in-degree of 0.\n- A **sink** is a vertex with an out-degree of 0.\n- A **Directed Acyclic Graph (DAG)** is a directed graph that contains no directed cycles (i.e., there is no path of edges that starts and ends at the same vertex).\n\nConsider the following claim: \"For any non-empty Directed Acyclic Graph, the number of sources is always equal to the number of sinks.\"\n\nYour task is to identify which of the following graphs, described by their vertex set $V$ and edge set $E$, serves as a counterexample to this claim.\n\nA. $V = \\{1, 2, 3\\}, E = \\{(1, 2), (1, 3)\\}$\n\nB. $V = \\{1, 2, 3\\}, E = \\{(1, 2), (2, 3)\\}$\n\nC. $V = \\{1, 2, 3\\}, E = \\{(1, 2), (2, 3), (3, 1)\\}$\n\nD. $V = \\{1, 2, 3, 4\\}, E = \\{(1, 3), (1, 4), (2, 3), (2, 4)\\}$", "solution": "We test each option to find a non-empty Directed Acyclic Graph (DAG) in which the number of sources (vertices with in-degree zero) is not equal to the number of sinks (vertices with out-degree zero). For each graph, we compute in-degrees and out-degrees, verify acyclicity, and compare the counts of sources and sinks.\n\nOption A: For the graph with $V=\\{1,2,3\\}$ and $E=\\{(1,2),(1,3)\\}$, the degrees are: $\\deg^{-}(1)=0$ and $\\deg^{+}(1)=2$ (edges to $2$ and $3$), $\\deg^{-}(2)=1$ and $\\deg^{+}(2)=0$ (incoming from $1$ only), $\\deg^{-}(3)=1$ and $\\deg^{+}(3)=0$ (incoming from $1$ only). The set of sources is $\\{1\\}$ (count $1$), and the set of sinks is $\\{2,3\\}$ (count $2$). There is no directed cycle, since all edges go from $1$ to $\\{2,3\\}$ and neither $2$ nor $3$ has outgoing edges. Thus this is a non-empty DAG where the number of sources is not equal to the number of sinks, so it is a counterexample.\n\nOption B: For the graph with $V=\\{1,2,3\\}$ and $E=\\{(1,2),(2,3)\\}$, the degrees are: $\\deg^{-}(1)=0$, $\\deg^{+}(1)=1$; $\\deg^{-}(2)=1$, $\\deg^{+}(2)=1$; $\\deg^{-}(3)=1$, $\\deg^{+}(3)=0$. The set of sources is $\\{1\\}$ (count $1$), and the set of sinks is $\\{3\\}$ (count $1$). This is a DAG (a directed path), and the counts are equal, so it is not a counterexample.\n\nOption C: The graph with $V=\\{1,2,3\\}$ and $E=\\{(1,2),(2,3),(3,1)\\}$ contains the directed cycle $1 \\to 2 \\to 3 \\to 1$, so it is not a DAG and therefore cannot serve as a counterexample to the claim, which is restricted to DAGs.\n\nOption D: For the graph with $V=\\{1,2,3,4\\}$ and $E=\\{(1,3),(1,4),(2,3),(2,4)\\}$, the degrees are: $\\deg^{-}(1)=0$, $\\deg^{+}(1)=2$; $\\deg^{-}(2)=0$, $\\deg^{+}(2)=2$; $\\deg^{-}(3)=2$, $\\deg^{+}(3)=0$; $\\deg^{-}(4)=2$, $\\deg^{+}(4)=0$. The set of sources is $\\{1,2\\}$ (count $2$), and the set of sinks is $\\{3,4\\}$ (count $2$). There is no directed cycle since all edges go from vertices in $\\{1,2\\}$ to vertices in $\\{3,4\\}$, so it is a DAG. The counts are equal, so it is not a counterexample.\n\nTherefore, the only valid counterexample among the options is A.", "answer": "$$\\boxed{A}$$", "id": "1533666"}, {"introduction": "The abstract concepts of graph theory become truly powerful when applied to tangible, real-world problems. This practice situates sources and sinks in a practical scenario involving software library dependencies, a common application of DAGs in computer science. By working with a graph represented as an adjacency list, you will learn to translate the abstract property of a sink—a vertex with an out-degree of zero—into a direct, computational procedure [@problem_id:1533678].", "problem": "CodeWeavers Inc. manages a complex ecosystem of internal software libraries. The relationships between these libraries are modeled as a Directed Acyclic Graph (DAG), where a directed edge from library $u$ to library $v$, denoted $(u, v)$, signifies that library $u$ is a direct dependency for library $v$. The company needs to identify all \"top-level\" libraries, which are defined as libraries that are not dependencies for any other library in the system. In graph theory terms, these are the sink vertices of the dependency graph.\n\nThe structure of this dependency graph, consisting of 12 libraries labeled with integers from 0 to 11, is provided as an adjacency list representation. In this representation, `Adj[i]` is a list of libraries that depend on library $i$.\n\n- `Adj[0] = [1, 4]`\n- `Adj[1] = [2, 3]`\n- `Adj[2] = []`\n- `Adj[3] = [5]`\n- `Adj[4] = [5]`\n- `Adj[5] = [6]`\n- `Adj[6] = []`\n- `Adj[7] = [8, 9]`\n- `Adj[8] = [10]`\n- `Adj[9] = [10]`\n- `Adj[10] = [11]`\n- `Adj[11] = []`\n\nYour task is to identify all the top-level libraries (sinks). Present your answer as a row matrix of vertex IDs in increasing order.", "solution": "We model the libraries as a directed acyclic graph $G=(V,E)$ with $V=\\{0,1,\\dots,11\\}$. A directed edge $(u,v)\\in E$ means $u$ is a direct dependency of $v$. The adjacency list is given so that $\\mathrm{Adj}[i]$ lists the vertices $v$ such that $(i,v)\\in E$.\n\nTop-level libraries (sinks) are vertices that are not dependencies of any other library. In graph terms, a sink is a vertex $v\\in V$ with outdegree zero. Let $d^{+}(v)$ denote the outdegree of $v$. Then $v$ is a sink if and only if $d^{+}(v)=0$, which is equivalent to $\\mathrm{Adj}[v]$ being the empty list.\n\nWe examine each vertex’s adjacency list:\n- $\\mathrm{Adj}[0]$ is `[1, 4]`, so $d^{+}(0)>0$.\n- $\\mathrm{Adj}[1]$ is `[2, 3]`, so $d^{+}(1)>0$.\n- $\\mathrm{Adj}[2]$ is `[]`, so $d^{+}(2)=0$ (sink).\n- $\\mathrm{Adj}[3]$ is `[5]`, so $d^{+}(3)>0$.\n- $\\mathrm{Adj}[4]$ is `[5]`, so $d^{+}(4)>0$.\n- $\\mathrm{Adj}[5]$ is `[6]`, so $d^{+}(5)>0$.\n- $\\mathrm{Adj}[6]$ is `[]`, so $d^{+}(6)=0$ (sink).\n- $\\mathrm{Adj}[7]$ is `[8, 9]`, so $d^{+}(7)>0$.\n- $\\mathrm{Adj}[8]$ is `[10]`, so $d^{+}(8)>0$.\n- $\\mathrm{Adj}[9]$ is `[10]`, so $d^{+}(9)>0$.\n- $\\mathrm{Adj}[10]$ is `[11]`, so $d^{+}(10)>0$.\n- $\\mathrm{Adj}[11]$ is `[]`, so $d^{+}(11)=0$ (sink).\n\nTherefore, the sink vertices are $2$, $6$, and $11$. In increasing order, the row matrix is $\\begin{pmatrix}2 & 6 & 11\\end{pmatrix}$.", "answer": "$$\\boxed{\\begin{pmatrix}2 & 6 & 11\\end{pmatrix}}$$", "id": "1533678"}]}