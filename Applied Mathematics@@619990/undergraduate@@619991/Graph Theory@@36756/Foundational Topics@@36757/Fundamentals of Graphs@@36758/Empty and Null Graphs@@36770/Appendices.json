{"hands_on_practices": [{"introduction": "Understanding a graph's structure often involves examining its complement. This exercise invites you to explore the relationship between an empty graph $E_n$ and a complete graph $K_n$, which is the complement of $E_n$. By determining for which values of $n$ these two fundamental graph structures are isomorphic, you will reinforce your understanding of graph complements and the power of using necessary conditions, like the number of edges, to simplify a problem. [@problem_id:1501252]", "problem": "In graph theory, a simple graph is an ordered pair $G = (V, E)$, where $V$ is a set of vertices and $E$ is a set of 2-element subsets of $V$, representing edges.\n\nThe **empty graph** on $n$ vertices, denoted $E_n$, is the graph with $n$ vertices and no edges.\n\nThe **complement** of a simple graph $G=(V, E)$, denoted $\\bar{G}$, is a graph with the same vertex set $V$. An edge exists between two distinct vertices in $\\bar{G}$ if and only if there is no edge between them in $G$.\n\nTwo graphs $G_1$ and $G_2$ are said to be **isomorphic**, written $G_1 \\cong G_2$, if there exists a one-to-one correspondence between their vertex sets that preserves adjacency. That is, two vertices are connected by an edge in $G_1$ if and only if their corresponding vertices are connected by an edge in $G_2$.\n\nConsidering these definitions, determine the complete set of non-negative integer values of $n$ for which the empty graph $E_n$ is isomorphic to its complement, $\\bar{E_n}$.\n\nA. {$0, 1$}\n\nB. {$1$}\n\nC. {$0, 1, 4, 5$}\n\nD. {All non-negative integers $n$}\n\nE. {No such $n$ exists}", "solution": "The problem asks for the set of all non-negative integers $n$ such that the empty graph on $n$ vertices, $E_n$, is isomorphic to its complement, $\\bar{E_n}$.\n\nA fundamental property of isomorphic graphs is that they must have the same number of vertices and the same number of edges. This provides a necessary condition for isomorphism. Let's use this condition to narrow down the possible values of $n$.\n\nLet $|V(G)|$ denote the number of vertices in a graph $G$, and $|E(G)|$ denote the number of edges.\n\nBy definition, the empty graph $E_n$ has $n$ vertices and 0 edges.\nSo, $|V(E_n)| = n$ and $|E(E_n)| = 0$.\n\nNow, let's consider the complement of the empty graph, $\\bar{E_n}$.\nThe complement $\\bar{E_n}$ has the same vertex set as $E_n$, so $|V(\\bar{E_n})| = n$.\nThe edges in $\\bar{E_n}$ are precisely the pairs of vertices that are *not* connected in $E_n$. Since $E_n$ has no edges, $\\bar{E_n}$ must have an edge between every pair of distinct vertices. A graph where every pair of distinct vertices is connected by an edge is called a complete graph. Therefore, $\\bar{E_n}$ is the complete graph on $n$ vertices, denoted $K_n$.\n\nThe number of edges in a complete graph on $n$ vertices, $K_n$, is the number of ways to choose 2 vertices from the set of $n$ vertices, which is given by the binomial coefficient $\\binom{n}{2}$.\nSo, $|E(\\bar{E_n})| = |E(K_n)| = \\binom{n}{2} = \\frac{n(n-1)}{2}$.\n\nFor $E_n$ to be isomorphic to $\\bar{E_n}$, they must have the same number of edges. We set their edge counts equal:\n$|E(E_n)| = |E(\\bar{E_n})|$\n$$0 = \\frac{n(n-1)}{2}$$\n\nThis equation is true if and only if $n(n-1) = 0$. The solutions for $n$ are $n=0$ and $n=1$.\nThese are the only possible values of $n$ for which the graphs can be isomorphic. For any integer $n \\ge 2$, the number of edges in $\\bar{E_n}$ is positive, while the number of edges in $E_n$ is zero, so they cannot be isomorphic.\n\nWe must now verify if the isomorphism holds for these two specific cases.\nCase 1: $n=0$.\nThe empty graph $E_0$ has 0 vertices and 0 edges. Its complement $\\bar{E_0}$ is also the graph with 0 vertices and 0 edges. Two graphs with 0 vertices are trivially isomorphic. So, $n=0$ is a solution.\n\nCase 2: $n=1$.\nThe empty graph $E_1$ has 1 vertex and 0 edges. Its complement $\\bar{E_1}$ also has 1 vertex. The number of possible edges is $\\binom{1}{2}=0$. So, $\\bar{E_1}$ also has 0 edges. Both $E_1$ and $\\bar{E_1}$ are identical graphs (a single vertex), so they are isomorphic. Thus, $n=1$ is a solution.\n\nCombining both cases, the set of non-negative integers $n$ for which $E_n \\cong \\bar{E_n}$ is {$0, 1$}.\n\nThis corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1501252"}, {"introduction": "Graph algorithms are designed to process a wide variety of structures, from densely connected networks to sparse ones. This practice problem challenges you to predict the behavior of the Breadth-First Search (BFS) algorithm on an extreme case: an empty graph with no edges. Analyzing this scenario provides deep insight into the core mechanics of BFS and demonstrates how the algorithm correctly handles disconnectedness. [@problem_id:1501283]", "problem": "A computer science student is testing their new implementation of the Breadth-First Search (BFS) algorithm. The student decides to test the algorithm on a special case: an empty graph.\n\nConsider an empty graph, denoted as $E_n$, which consists of a set of $n$ vertices, $V = \\{1, 2, \\dots, n\\}$, and an empty set of edges, $E = \\emptyset$. For this test, the student uses $n=20$ and chooses vertex $s=7$ as the starting point for the BFS traversal.\n\nThe student's BFS implementation is designed to populate two arrays:\n1. A distance array, `dist`, where `dist[i]` stores the length of the shortest path from the start vertex $s$ to vertex $i$. This array is initialized such that `dist[i] = \\infty` for all vertices $i \\in V$.\n2. A parent array, `p`, where `p[i]` stores the predecessor of vertex $i$ on a shortest path from $s$. This array is initialized such that `p[i] = \\text{null}` for all vertices $i \\in V$.\n\nThe standard BFS algorithm begins by setting `dist[s] = 0` and adding `s` to a queue. It then repeatedly extracts a vertex from the queue and explores its neighbors.\n\nWhich of the following options correctly describes the final state of the `dist` and `p` arrays after the algorithm, initiated from vertex $s=7$, finishes running on the empty graph $E_{20}$?\n\nA. `dist[7] = 0`, and `dist[i] = \\infty` for all $i \\in V \\setminus \\{7\\}$. The parent array `p` has `p[i] = \\text{null}` for all $i \\in V$.\n\nB. `dist[7] = 0`, and `dist[i] = 1` for all $i \\in V \\setminus \\{7\\}$. The parent array `p` has `p[7] = \\text{null}` and `p[i] = 7` for all $i \\in V \\setminus \\{7\\}$.\n\nC. `dist[i] = 0` for all $i \\in V$. The parent array `p` has `p[i] = \\text{null}` for all $i \\in V$.\n\nD. The algorithm never terminates because the graph is disconnected, leading to an infinite loop.\n\nE. `dist[7] = 0`, and `dist[i] = \\infty` for all $i \\in V \\setminus \\{7\\}$. The parent array `p` has `p[7] = 7` and `p[i] = \\text{null}` for all $i \\in V \\setminus \\{7\\}$.", "solution": "Let the graph be $E_{20} = (V,E)$ with $V = \\{1,2,\\dots,20\\}$ and $E = \\emptyset$. The BFS is started at $s=7$.\n\nInitialization as specified: for all $i \\in V$, set $\\mathrm{dist}[i] = \\infty$ and $p[i] = \\text{null}$. Then set $\\mathrm{dist}[7] = 0$ and enqueue $7$.\n\nBFS processes vertices by repeatedly dequeuing a vertex $u$ and, for each neighbor $v \\in \\mathrm{Adj}(u)$, if $\\mathrm{dist}[v] = \\infty$ then set\n$$\n\\mathrm{dist}[v] = \\mathrm{dist}[u] + 1, \\quad p[v] = u,\n$$\nand enqueue $v$.\n\nSince $E = \\emptyset$, we have $\\mathrm{Adj}(u) = \\emptyset$ for every $u \\in V$. Therefore, when $u=7$ is dequeued, the neighbor loop does nothing, no new vertices are enqueued, and the queue becomes empty. The algorithm terminates.\n\nConsequently, no vertex other than $7$ is discovered; thus, for all $i \\in V \\setminus \\{7\\}$, $\\mathrm{dist}[i] = \\infty$ and $p[i] = \\text{null}$. For the start vertex, $\\mathrm{dist}[7] = 0$ and, per the standard BFS convention, $p[7] = \\text{null}$ (the parent of the root is not set to itself).\n\nThis matches option A and contradicts the alternatives: B would require edges from $7$ to all other vertices; C falsely sets all distances to $0$; D is false because BFS terminates even on disconnected graphs; E incorrectly sets $p[7] = 7$.", "answer": "$$\\boxed{A}$$", "id": "1501283"}, {"introduction": "Graph coloring is a powerful tool for solving resource allocation problems where conflicts must be avoided. This exercise presents a scenario of assigning frequencies to non-interfering sensors, a situation that can be elegantly modeled as coloring an empty graph. By solving this, you will derive the chromatic polynomial for any empty graph, $P(E_n, k)$, a foundational result in the study of graph coloring that serves as a baseline for more complex graphs. [@problem_id:1501294]", "problem": "A telecommunications agency is responsible for assigning operating frequencies to a set of $n$ newly deployed, autonomous environmental sensors. These sensors are scattered across a vast, remote region. Due to the large distances separating them, the radio signal from any one sensor cannot be detected by, and thus cannot interfere with, any other sensor in the set. The agency has a list of $k$ distinct, approved frequencies available for use. Each of the $n$ sensors must be assigned exactly one frequency from this list. How many distinct ways are there to assign frequencies to the entire set of $n$ sensors? Express your answer as a closed-form expression in terms of $n$ and $k$.", "solution": "Each sensor is a distinct object that must be assigned exactly one frequency from a set of $k$ distinct frequencies. Because no sensor can interfere with any other, there are no constraints linking the choices across sensors.\n\nFor each sensor $i$ in the set of $n$ sensors, the number of available choices is $k$. By the rule of product, the total number of assignments is the product of the choices for each sensor:\n$$\n\\prod_{i=1}^{n} k = k^{n}.\n$$\nEquivalently, this counts the number of functions from an $n$-element set (sensors) to a $k$-element set (frequencies), which is $k^{n}$.", "answer": "$$\\boxed{k^{n}}$$", "id": "1501294"}]}