{"hands_on_practices": [{"introduction": "Weighted graphs are powerful tools for modeling real-world systems where connections have associated costs, such as travel time in a transportation network or latency in a data network. Before we can optimize a route, we must first master the fundamental skill of calculating the total cost of any given path. This exercise [@problem_id:1555066] provides a practical scenario to do just that, requiring you to determine the total travel time along predefined routes by summing the weights of their constituent edges.", "problem": "A futuristic city, Aethelburg, operates a delivery network using pneumatic tubes. The time, $T$, it takes for a package to traverse a tube segment is calculated using the formula $T = \\alpha L$, where $L$ is the length of the segment in kilometers and $\\alpha$ is a time coefficient given in minutes per kilometer. The value of $\\alpha$ depends on the pressure gradient classification of the tube: Class 1 tubes have $\\alpha = 2.5$ min/km, and Class 2 tubes have $\\alpha = 3.5$ min/km.\n\nThe network contains several nodes, including the Central Hub (CH), North Station (NS), West District (WD), East Plaza (EP), and South Terminal (ST). A package must be sent from the Central Hub to the South Terminal. Two potential routes are under consideration:\n\n-   **Route Alpha**: A path from Central Hub to North Station, and then to South Terminal.\n-   **Route Beta**: A path from Central Hub to West District, then to East Plaza, and finally to South Terminal.\n\nThe properties of the tube segments comprising these routes are as follows:\n-   The segment from Central Hub to North Station has a length of 4.0 km and is Class 1.\n-   The segment from North Station to South Terminal has a length of 6.2 km and is Class 2.\n-   The segment from Central Hub to West District has a length of 3.5 km and is Class 2.\n-   The segment from West District to East Plaza has a length of 2.0 km and is Class 1.\n-   The segment from East Plaza to South Terminal has a length of 4.8 km and is Class 1.\n\nDetermine the total travel time for the faster of the two routes. Express your answer in minutes, rounded to three significant figures.", "solution": "The traversal time for a tube segment is given by the linear relation $T=\\alpha L$, where $L$ is in kilometers and $\\alpha$ is in minutes per kilometer. For Class 1 tubes, $\\alpha=2.5$, and for Class 2 tubes, $\\alpha=3.5$.\n\nFor Route Alpha (Central Hub $\\to$ North Station $\\to$ South Terminal), compute times segment-wise and sum:\n$$T_{\\text{CH}\\to\\text{NS}}=\\alpha_{1}L=2.5\\times 4.0=10.0\\ \\text{min}$$\n$$T_{\\text{NS}\\to\\text{ST}}=\\alpha_{2}L=3.5\\times 6.2=21.7\\ \\text{min}$$\n$$T_{\\text{Alpha}}=10.0+21.7=31.7\\ \\text{min}$$\n\nFor Route Beta (Central Hub $\\to$ West District $\\to$ East Plaza $\\to$ South Terminal), compute times and sum:\n$$T_{\\text{CH}\\to\\text{WD}}=\\alpha_{2}L=3.5\\times 3.5=12.25\\ \\text{min}$$\n$$T_{\\text{WD}\\to\\text{EP}}=\\alpha_{1}L=2.5\\times 2.0=5.0\\ \\text{min}$$\n$$T_{\\text{EP}\\to\\text{ST}}=\\alpha_{1}L=2.5\\times 4.8=12.0\\ \\text{min}$$\n$$T_{\\text{Beta}}=12.25+5.0+12.0=29.25\\ \\text{min}$$\n\nComparing totals, $T_{\\text{Beta}}=29.25\\ \\text{min}$ is less than $T_{\\text{Alpha}}=31.7\\ \\text{min}$, so Route Beta is faster. Rounding to three significant figures:\n$$29.25\\ \\text{min}\\to 29.3\\ \\text{min}.$$", "answer": "$$\\boxed{29.3}$$", "id": "1555066"}, {"introduction": "Once we know how to calculate the cost of a path, the natural next question is: how do we find the path with the least possible cost? This is one of the most fundamental problems in graph theory, and Dijkstra's algorithm is a classic and efficient method for solving it. This practice [@problem_id:1414565] invites you to trace the execution of Dijkstra's algorithm step-by-step, building an intuition for how it systematically explores a network to discover and finalize the shortest paths from a starting point.", "problem": "Consider a network of data centers represented by a weighted undirected graph $G=(V, E)$, where the vertices are the data centers and the weights on the edges represent the latency in milliseconds for a data packet to travel between two-way connections.\n\nThe set of data centers is $V = \\{S, T, U, V, W, X, Y\\}$.\n\nThe network connections and their corresponding latencies are given as a list of edges with their weights:\n- (S, T) with weight 6\n- (S, U) with weight 2\n- (T, U) with weight 5\n- (T, V) with weight 1\n- (U, V) with weight 4\n- (U, W) with weight 8\n- (V, W) with weight 3\n- (V, X) with weight 7\n- (W, Y) with weight 2\n- (X, Y) with weight 4\n\nYour task is to trace the execution of Dijkstra's algorithm to find the shortest path from the source vertex $S$ to all other vertices. An \"iteration\" of the algorithm is defined as the process of selecting one vertex from the set of unvisited vertices and finalizing its shortest path distance. In cases where multiple unvisited vertices have the same minimum tentative distance, the vertex that comes first alphabetically should be chosen.\n\nAfter exactly three iterations, a set of vertices will have their shortest path distances from $S$ finalized. Calculate the sum of these final shortest path distances.", "solution": "We are asked to simulate the first three iterations of Dijkstra's algorithm on the given graph, starting from the source vertex $S$. We will maintain a set of visited vertices, for which the shortest path has been finalized, and a record of the tentative shortest distances from $S$ to every other vertex.\n\nLet $d(v)$ be the shortest distance found so far from the source $S$ to vertex $v$.\nLet $P$ be the priority queue of unvisited vertices, ordered by their distance $d(v)$.\nLet $K$ be the set of visited vertices.\n\n**Initialization:**\n- The set of visited vertices is empty: $K = \\emptyset$.\n- The initial distances are set to $d(S) = 0$ and $d(v) = \\infty$ for all other vertices $v \\in V \\setminus \\{S\\}$.\n- The state of the distances is:\n  $d(S) = 0$, $d(T) = \\infty$, $d(U) = \\infty$, $d(V) = \\infty$, $d(W) = \\infty$, $d(X) = \\infty$, $d(Y) = \\infty$.\n\n**Iteration 1:**\n1.  Select the unvisited vertex with the smallest distance. This is $S$, with $d(S) = 0$.\n2.  Add $S$ to the set of visited vertices. $K = \\{S\\}$. The distance $d(S)=0$ is now final.\n3.  Update the distances of the neighbors of $S$, which are $T$ and $U$.\n    - For neighbor $T$: The new potential distance is $d(S) + \\text{weight}(S, T) = 0 + 6 = 6$. Since $6 < d(T) = \\infty$, we update $d(T) = 6$.\n    - For neighbor $U$: The new potential distance is $d(S) + \\text{weight}(S, U) = 0 + 2 = 2$. Since $2 < d(U) = \\infty$, we update $d(U) = 2$.\n4.  After the first iteration, the distances are:\n    $d(S) = 0$, $d(T) = 6$, $d(U) = 2$, $d(V) = \\infty$, $d(W) = \\infty$, $d(X) = \\infty$, $d(Y) = \\infty$.\n    The set of visited vertices is $K = \\{S\\}$.\n\n**Iteration 2:**\n1.  Select the unvisited vertex with the smallest tentative distance. The unvisited vertices are $\\{T, U, V, W, X, Y\\}$. Their distances are $\\{6, 2, \\infty, \\infty, \\infty, \\infty\\}$. The minimum is $d(U) = 2$. So, we select $U$.\n2.  Add $U$ to the set of visited vertices. $K = \\{S, U\\}$. The distance $d(U)=2$ is now final.\n3.  Update the distances of the neighbors of $U$, which are $S, T, V, W$.\n    - Neighbor $S$ is already visited, so we ignore it.\n    - For neighbor $T$: The new potential distance is $d(U) + \\text{weight}(U, T) = 2 + 5 = 7$. The current distance is $d(T)=6$. Since $7 \\not< 6$, we do not update $d(T)$.\n    - For neighbor $V$: The new potential distance is $d(U) + \\text{weight}(U, V) = 2 + 4 = 6$. Since $6 < d(V) = \\infty$, we update $d(V) = 6$.\n    - For neighbor $W$: The new potential distance is $d(U) + \\text{weight}(U, W) = 2 + 8 = 10$. Since $10 < d(W) = \\infty$, we update $d(W) = 10$.\n4.  After the second iteration, the distances are:\n    $d(S) = 0$, $d(T) = 6$, $d(U) = 2$, $d(V) = 6$, $d(W) = 10$, $d(X) = \\infty$, $d(Y) = \\infty$.\n    The set of visited vertices is $K = \\{S, U\\}$.\n\n**Iteration 3:**\n1.  Select the unvisited vertex with the smallest tentative distance. The unvisited vertices are $\\{T, V, W, X, Y\\}$. Their distances are $\\{6, 6, 10, \\infty, \\infty\\}$. We have a tie between $T$ and $V$, both with distance 6. The problem states to break ties alphabetically, so we select $T$.\n2.  Add $T$ to the set of visited vertices. $K = \\{S, U, T\\}$. The distance $d(T)=6$ is now final.\n3.  Update the distances of the neighbors of $T$, which are $S, U, V$.\n    - Neighbors $S$ and $U$ are already visited, so we ignore them.\n    - For neighbor $V$: The new potential distance is $d(T) + \\text{weight}(T, V) = 6 + 1 = 7$. The current distance is $d(V)=6$. Since $7 \\not< 6$, we do not update $d(V)$.\n4.  After the third iteration, the distances remain:\n    $d(S) = 0$, $d(T) = 6$, $d(U) = 2$, $d(V) = 6$, $d(W) = 10$, $d(X) = \\infty$, $d(Y) = \\infty$.\n    The set of visited vertices is $K = \\{S, U, T\\}$.\n\n**Final Calculation:**\nThe set of vertices with finalized shortest path distances after three iterations is $K = \\{S, U, T\\}$.\nThe final shortest path distances for these vertices are:\n- $d(S) = 0$\n- $d(U) = 2$\n- $d(T) = 6$\n\nThe sum of these distances is $0 + 2 + 6 = 8$.", "answer": "$$\\boxed{8}$$", "id": "1414565"}, {"introduction": "While algorithms like Dijkstra's guarantee an optimal solution, it is tempting to think a simpler, more intuitive strategy might also work. For instance, what if we just always choose the cheapest next step available from our current location? This 'greedy' approach is explored in this practice [@problem_id:1414580], where you will compare the path found by such a heuristic against the true shortest path. This comparison is critical for understanding why local optimization does not always lead to global optimization and highlights the subtle brilliance behind guaranteed shortest path algorithms.", "problem": "A small experimental computer network consists of six nodes: A, B, C, D, E, and F. The cost to send a data packet between any two directly connected nodes is a positive integer value representing latency. The network topology and associated costs are described by the following connections:\n- A is connected to B with a cost of 2, and to C with a cost of 4.\n- B is connected to C with a cost of 3, and to D with a cost of 7.\n- C is connected to E with a cost of 1.\n- D is connected to E with a cost of 2, and to F with a cost of 1.\n- E is connected to F with a cost of 2.\nAll connections are bidirectional.\n\nA programmer implements a \"Naive Greedy Routing\" (NGR) algorithm to determine a path for a packet from a source to a destination. The NGR algorithm works as follows: from the current node, the packet is always forwarded to the directly connected, unvisited node that has the link with the lowest cost. If there is a tie for the lowest cost, the packet is sent to the node that comes first alphabetically. This process is repeated until the packet reaches the destination node. The path cannot visit the same node more than once.\n\nYour task is to compare the path generated by this NGR algorithm with the genuinely optimal path. Determine the total cost for a packet to travel from the starting node A to the destination node F using two different methods:\n1. The path determined by the Naive Greedy Routing (NGR) algorithm.\n2. The path with the absolute minimum possible total cost.\n\nProvide your answer as a row matrix `[C_NGR, C_min]`, where `C_NGR` is the total cost of the NGR path and `C_min` is the total cost of the absolute shortest path.", "solution": "We model the network as an undirected weighted graph with nodes $A,B,C,D,E,F$ and edges with costs: $A$-$B$ with cost $2$, $A$-$C$ with cost $4$, $B$-$C$ with cost $3$, $B$-$D$ with cost $7$, $C$-$E$ with cost $1$, $D$-$E$ with cost $2$, and $D$-$F$ with cost $1$, $E$-$F$ with cost $2$.\n\nNaive Greedy Routing (NGR) from $A$ to $F$: At each step, choose among unvisited neighbors the edge of minimum cost; if tied, pick the alphabetically first neighbor. Starting at $A$, the unvisited neighbors are $B$ (cost $2$) and $C$ (cost $4$); choose $B$. From $B$, unvisited neighbors are $C$ (cost $3$) and $D$ (cost $7$); choose $C$. From $C$, the only unvisited neighbor is $E$ (cost $1$); choose $E$. From $E$, unvisited neighbors are $D$ (cost $2$) and $F$ (cost $2$); tie broken alphabetically gives $D$. From $D$, the only unvisited neighbor leading forward is $F$ (cost $1$). Thus the NGR path is $A \\to B \\to C \\to E \\to D \\to F$ with total cost\n$$\nC_{\\mathrm{NGR}}=2+3+1+2+1=9.\n$$\n\nAbsolute shortest path from $A$ to $F$: Apply Dijkstra’s algorithm. Initialize $d(A)=0$; neighbors give $d(B)=2$, $d(C)=4$, others infinite. Settle $B$ next: update $d(D)=\\min(\\infty,2+7)=9$, $d(C)$ remains $\\min(4,2+3)=4$. Settle $C$: update $d(E)=\\min(\\infty,4+1)=5$. Settle $E$: update $d(D)=\\min(9,5+2)=7$, $d(F)=\\min(\\infty,5+2)=7$. Settle $D$: update $d(F)=\\min(7,7+1)=7$. Settle $F$ with $d(F)=7$. A corresponding shortest path is $A \\to C \\to E \\to F$ with cost\n$$\nC_{\\min}=4+1+2=7.\n$$\n\nTherefore, the requested row matrix is $\\begin{pmatrix}C_{\\mathrm{NGR}} & C_{\\min}\\end{pmatrix}=\\begin{pmatrix}9 & 7\\end{pmatrix}$.", "answer": "$$\\boxed{\\begin{pmatrix} 9 & 7 \\end{pmatrix}}$$", "id": "1414580"}]}