{"hands_on_practices": [{"introduction": "The most fundamental problem in network analysis is finding the shortest path between two points. In many contexts, such as social networks or simple computer networks, \"shortest\" simply means the path that traverses the fewest links or \"hops\". This exercise [@problem_id:1497489] provides a hands-on opportunity to apply the Breadth-First Search (BFS) algorithm, the essential tool for this task. By systematically exploring the graph layer by layer from a starting point, BFS guarantees that you discover the shortest path in any unweighted graph.", "problem": "A systems engineer is analyzing the network topology of a small data center. The data center consists of 8 servers, labeled with integers from 0 to 7. A data packet can travel between two servers in a single \"hop\" if there is a direct communication link between them. The network is undirected, meaning if server A can send a packet to server B in one hop, server B can also send a packet to server A in one hop.\n\nThe network connections are described as follows:\n- Server 0 is connected to servers 1, 3, and 4.\n- Server 1 is connected to servers 0 and 2.\n- Server 2 is connected to servers 1, 5, and 6.\n- Server 3 is connected to servers 0 and 5.\n- Server 4 is connected to server 0.\n- Server 5 is connected to servers 2, 3, and 7.\n- Server 6 is connected to server 2.\n- Server 7 is connected to server 5.\n\nServer 0 is designated as the primary source for a daily backup process. The engineer needs to determine the minimum number of hops required for a data packet to travel from server 0 to every other server in the network.\n\nYour task is to find this minimum number of hops, which is also known as the distance, from server 0 to each of the servers 1, 2, 3, 4, 5, 6, and 7. Present your final answer as a sequence of seven integers, corresponding to the distances $d(0,1)$, $d(0,2)$, $d(0,3)$, $d(0,4)$, $d(0,5)$, $d(0,6)$, and $d(0,7)$, in this exact order.", "solution": "The problem asks for the minimum number of hops from a source server (vertex) to all other servers in a network (graph). This is equivalent to finding the shortest path distances in an unweighted graph. The standard algorithm for solving this problem is the Breadth-First Search (BFS).\n\nLet's represent the network as a graph $G=(V, E)$, where the set of vertices is $V = \\{0, 1, 2, 3, 4, 5, 6, 7\\}$ and the edges are defined by the connections. The source vertex is $s = 0$. We need to find the distance $d(s, v)$ for all $v \\in V \\setminus \\{s\\}$.\n\nWe will use a queue to manage the vertices to visit and an array, `dist`, to store the minimum distance from the source to each vertex. We initialize $dist[0] = 0$ and $dist[v] = \\infty$ for all other vertices $v$.\n\n1.  **Initialization:**\n    -   Initialize a queue `Q`.\n    -   Initialize a distance array `dist` of size 8, with $dist[0] = 0$ and all other entries as $\\infty$.\n    -   Enqueue the source vertex 0 into `Q`.\n    -   Initial state: `Q = [0]`, `dist = [0, $\\infty$, $\\infty$, $\\infty$, $\\infty$, $\\infty$, $\\infty$, $\\infty$]`.\n\n2.  **Iteration 1 (Level 0):**\n    -   Dequeue vertex 0. `Q` is now empty.\n    -   Explore the neighbors of 0: {1, 3, 4}.\n    -   For each neighbor `v`, if `dist[v]` is $\\infty$, we update its distance and enqueue it.\n        -   Neighbor 1: `dist[1]` is $\\infty$. Set `dist[1] = dist[0] + 1 = 1`. Enqueue 1.\n        -   Neighbor 3: `dist[3]` is $\\infty$. Set `dist[3] = dist[0] + 1 = 1`. Enqueue 3.\n        -   Neighbor 4: `dist[4]` is $\\infty$. Set `dist[4] = dist[0] + 1 = 1`. Enqueue 4.\n    -   State after processing vertex 0: `Q = [1, 3, 4]`, `dist = [0, 1, $\\infty$, 1, 1, $\\infty$, $\\infty$, $\\infty$]`.\n\n3.  **Iteration 2 (Level 1):**\n    -   Dequeue vertex 1. `Q` is now `[3, 4]`.\n    -   Explore the neighbors of 1: {0, 2}.\n        -   Neighbor 0: `dist[0]` is 0 (not $\\infty$), so we do nothing.\n        -   Neighbor 2: `dist[2]` is $\\infty$. Set `dist[2] = dist[1] + 1 = 2`. Enqueue 2.\n    -   State: `Q = [3, 4, 2]`, `dist = [0, 1, 2, 1, 1, $\\infty$, $\\infty$, $\\infty$]`.\n\n4.  **Iteration 3 (Level 1):**\n    -   Dequeue vertex 3. `Q` is now `[4, 2]`.\n    -   Explore the neighbors of 3: {0, 5}.\n        -   Neighbor 0: `dist[0]` is 0, do nothing.\n        -   Neighbor 5: `dist[5]` is $\\infty$. Set `dist[5] = dist[3] + 1 = 2`. Enqueue 5.\n    -   State: `Q = [4, 2, 5]`, `dist = [0, 1, 2, 1, 1, 2, $\\infty$, $\\infty$]`.\n\n5.  **Iteration 4 (Level 1):**\n    -   Dequeue vertex 4. `Q` is now `[2, 5]`.\n    -   Explore the neighbors of 4: {0}.\n        -   Neighbor 0: `dist[0]` is 0, do nothing.\n    -   State remains: `Q = [2, 5]`, `dist = [0, 1, 2, 1, 1, 2, $\\infty$, $\\infty$]`.\n\n6.  **Iteration 5 (Level 2):**\n    -   Dequeue vertex 2. `Q` is now `[5]`.\n    -   Explore the neighbors of 2: {1, 5, 6}.\n        -   Neighbor 1: `dist[1]` is 1, do nothing.\n        -   Neighbor 5: `dist[5]` is 2, do nothing.\n        -   Neighbor 6: `dist[6]` is $\\infty$. Set `dist[6] = dist[2] + 1 = 3`. Enqueue 6.\n    -   State: `Q = [5, 6]`, `dist = [0, 1, 2, 1, 1, 2, 3, $\\infty$]`.\n\n7.  **Iteration 6 (Level 2):**\n    -   Dequeue vertex 5. `Q` is now `[6]`.\n    -   Explore the neighbors of 5: {2, 3, 7}.\n        -   Neighbor 2: `dist[2]` is 2, do nothing.\n        -   Neighbor 3: `dist[3]` is 1, do nothing.\n        -   Neighbor 7: `dist[7]` is $\\infty$. Set `dist[7] = dist[5] + 1 = 3`. Enqueue 7.\n    -   State: `Q = [6, 7]`, `dist = [0, 1, 2, 1, 1, 2, 3, 3]`.\n\n8.  **Iteration 7 (Level 3):**\n    -   Dequeue vertex 6. `Q` is now `[7]`.\n    -   Explore the neighbors of 6: {2}.\n        -   Neighbor 2: `dist[2]` is 2, do nothing.\n    -   No change in `dist`.\n\n9.  **Iteration 8 (Level 3):**\n    -   Dequeue vertex 7. `Q` is now empty.\n    -   Explore the neighbors of 7: {5}.\n        -   Neighbor 5: `dist[5]` is 2, do nothing.\n    -   No change in `dist`.\n\nThe queue `Q` is now empty, so the algorithm terminates. The final `dist` array contains the shortest path distances from vertex 0 to all other vertices.\n\nFinal distances: `dist` = `[0, 1, 2, 1, 1, 2, 3, 3]`.\n\nThe problem asks for the distances from server 0 to servers 1, 2, 3, 4, 5, 6, and 7, in that order. These correspond to `dist[1]`, `dist[2]`, ..., `dist[7]`.\n\n-   $d(0, 1) = 1$\n-   $d(0, 2) = 2$\n-   $d(0, 3) = 1$\n-   $d(0, 4) = 1$\n-   $d(0, 5) = 2$\n-   $d(0, 6) = 3$\n-   $d(0, 7) = 3$\n\nThe required sequence of integers is (1, 2, 1, 1, 2, 3, 3).", "answer": "$$\n\\boxed{\\begin{pmatrix} 1 & 2 & 1 & 1 & 2 & 3 & 3 \\end{pmatrix}}\n$$", "id": "1497489"}, {"introduction": "Building on the concept of simple hop count, we now consider networks where connections have varying costs, such as time delay, distance, or financial expense. In these weighted graphs, a path with few hops might not be the \"cheapest\". This practice [@problem_id:1497507] introduces Dijkstra's algorithm, a cornerstone of graph theory for finding the minimum cost path from a single source in a graph with non-negative edge weights. Working through this problem will solidify your understanding of how to make strategic, cost-aware decisions at each step to find the optimal route.", "problem": "A new high-speed data network is being established to connect a set of five research stations in Antarctica. The stations are named IceBase, PolarPoint, GlacierHub, DeepField, and AuroraStation. Due to the extreme environment, direct fiber-optic links have only been established between certain pairs of stations. The time it takes for a data packet to travel along a direct link is known as the latency.\n\nThe network topology and its associated latencies are described as follows:\n- A link exists between IceBase and PolarPoint with a latency of 4 milliseconds (ms).\n- A link exists between IceBase and GlacierHub with a latency of 10 ms.\n- A link exists between PolarPoint and GlacierHub with a latency of 3 ms.\n- A link exists between PolarPoint and DeepField with a latency of 18 ms.\n- A link exists between GlacierHub and DeepField with a latency of 7 ms.\n- A link exists between GlacierHub and AuroraStation with a latency of 2 ms.\n- A link exists between DeepField and AuroraStation with a latency of 1 ms.\n\nAll links are bidirectional, meaning data can travel in either direction with the same latency. A data packet can be relayed through intermediate stations to reach its destination.\n\nCalculate the minimum total latency for a data packet to travel from IceBase to DeepField. Express your answer as an integer in milliseconds.", "solution": "Model the network as an undirected weighted graph with vertices $V=\\{\\text{IceBase},\\text{PolarPoint},\\text{GlacierHub},\\text{DeepField},\\text{AuroraStation}\\}$ and edge weights $w(u,v)$ equal to the given latencies (in milliseconds). The problem asks for the minimum total latency from IceBase to DeepField, which is the shortest-path problem: minimize the sum of edge weights along a path. Because all edge weights are nonnegative, Dijkstra's algorithm applies.\n\nLet $d(x)$ denote the current best-known distance from IceBase to node $x$, initialized as $d(\\text{IceBase})=0$ and $d(x)=+\\infty$ for other nodes. Iteratively relax edges from the unvisited node with smallest $d(x)$.\n\nInitialization:\n$d(\\text{IceBase})=0$, $d(\\text{PolarPoint})=+\\infty$, $d(\\text{GlacierHub})=+\\infty$, $d(\\text{DeepField})=+\\infty$, $d(\\text{AuroraStation})=+\\infty$.\n\nFrom IceBase, relax neighbors:\n- $d(\\text{PolarPoint})=\\min\\{+\\infty,\\,0+w(\\text{IceBase},\\text{PolarPoint})\\}=\\min\\{+\\infty,\\,0+4\\}=4$.\n- $d(\\text{GlacierHub})=\\min\\{+\\infty,\\,0+w(\\text{IceBase},\\text{GlacierHub})\\}=\\min\\{+\\infty,\\,0+10\\}=10$.\n\nSelect the unvisited node with smallest tentative distance: PolarPoint with $d=4$. Relax its neighbors:\n- Through PolarPoint to GlacierHub: $d(\\text{GlacierHub})=\\min\\{10,\\,4+w(\\text{PolarPoint},\\text{GlacierHub})\\}=\\min\\{10,\\,4+3\\}=7$.\n- Through PolarPoint to DeepField: $d(\\text{DeepField})=\\min\\{+\\infty,\\,4+w(\\text{PolarPoint},\\text{DeepField})\\}=\\min\\{+\\infty,\\,4+18\\}=22$.\n\nSelect next smallest: GlacierHub with $d=7$. Relax its neighbors:\n- Through GlacierHub to DeepField: $d(\\text{DeepField})=\\min\\{22,\\,7+w(\\text{GlacierHub},\\text{DeepField})\\}=\\min\\{22,\\,7+7\\}=14$.\n- Through GlacierHub to AuroraStation: $d(\\text{AuroraStation})=\\min\\{+\\infty,\\,7+w(\\text{GlacierHub},\\text{AuroraStation})\\}=\\min\\{+\\infty,\\,7+2\\}=9$.\n\nSelect next smallest: AuroraStation with $d=9$. Relax its neighbor DeepField:\n- Through AuroraStation to DeepField: $d(\\text{DeepField})=\\min\\{14,\\,9+w(\\text{AuroraStation},\\text{DeepField})\\}=\\min\\{14,\\,9+1\\}=10$.\n\nSelect next smallest: DeepField with $d=10$. Since this is the destination, the algorithm can terminate with the minimum total latency $d(\\text{DeepField})=10$. A corresponding shortest path is IceBase $\\to$ PolarPoint $\\to$ GlacierHub $\\to$ AuroraStation $\\to$ DeepField with total latency $4+3+2+1=10$.", "answer": "$$\\boxed{10}$$", "id": "1497507"}, {"introduction": "While calculating the distance between two specific nodes is crucial, understanding the global structure of a network requires a higher-level view. We can use the concept of distance to define powerful metrics like the *radius* and *diameter* of a graph, which measure a network's overall compactness and worst-case communication delay, respectively. This problem [@problem_id:1497466] challenges you to think beyond simple pathfinding and explore the deep relationship between these structural invariants, specifically constructing a network where $diam(G) = 2 \\cdot rad(G)$.", "problem": "In network analysis, a communication network is modeled as a connected, unweighted, undirected graph $G=(V, E)$, where $V$ is the set of nodes (e.g., servers or routers) and $E$ is the set of links (e.g., fiber optic cables). The distance $d(u,v)$ between two nodes $u$ and $v$ is the number of links in a shortest path connecting them.\n\nThe *eccentricity* of a node $v$, denoted $\\epsilon(v)$, is the maximum distance from $v$ to any other node in the network: $\\epsilon(v) = \\max_{u \\in V} d(v,u)$. Two important metrics for network performance are derived from eccentricity:\n1. The *radius* of the network, $rad(G)$, is the minimum eccentricity among all nodes. A node $c$ with $\\epsilon(c) = rad(G)$ is called a central node and represents an ideal location for a critical service.\n   $rad(G) = \\min_{v \\in V} \\epsilon(v)$.\n2. The *diameter* of the network, $diam(G)$, is the maximum eccentricity among all nodes. This represents the worst-case communication delay in the network.\n   $diam(G) = \\max_{v \\in V} \\epsilon(v)$.\n\nA network design team proposes a new architecture. A key characteristic of this architecture is that its diameter is exactly twice its radius. Given that the proposed network must have a radius of $R$, where $R$ is a positive integer, what is the minimum possible number of nodes this network can have? Express your answer in terms of $R$.", "solution": "We are given a connected, unweighted, undirected graph with radius $R$ and diameter equal to $2R$. We seek the minimum possible number of vertices.\n\nFirst, we establish a general lower bound on the number of vertices in terms of the diameter. If $diam(G)=D$, then there exist vertices $x,y$ such that $d(x,y)=D$. Any shortest $x$–$y$ path is simple and has exactly $D$ edges, hence it visits $D+1$ distinct vertices. Therefore,\n$$\n|V|\\ge D+1.\n$$\nWith $D=2R$, this gives\n$$\n|V|\\ge 2R+1.\n$$\n\nNext, we verify that this bound is achievable while also ensuring $rad(G)=R$ and $diam(G)=2R$. Consider the path graph $P_{2R+1}$ with vertices $v_{0},v_{1},\\dots,v_{2R}$ in a line. The endpoints $v_{0}$ and $v_{2R}$ satisfy $d(v_{0},v_{2R})=2R$, so\n$$\ndiam(P_{2R+1})=2R.\n$$\nLet $c=v_{R}$ be the middle vertex. For any $k\\in\\{0,1,\\dots,2R\\}$, the distance to $v_{k}$ is $d(v_{R},v_{k})=|R-k|\\le R$, and the farthest vertices from $v_{R}$ are the endpoints $v_{0}$ and $v_{2R}$ at distance $R$. Hence\n$$\n\\epsilon(v_{R})=R.\n$$\nTherefore,\n$$\nrad(P_{2R+1})\\le R.\n$$\nOn the other hand, for any connected graph the triangle inequality implies that for any center $c$ and any diametral pair $x,y$ with $d(x,y)=D$,\n$$\nD=d(x,y)\\le d(x,c)+d(c,y)\\le 2\\,\\epsilon(c),\n$$\nso $\\epsilon(c)\\ge \\frac{D}{2}$ and thus\n$$\nrad(G)\\ge \\left\\lceil \\frac{diam(G)}{2}\\right\\rceil.\n$$\nWith $diam(P_{2R+1})=2R$, this yields $rad(P_{2R+1})\\ge R$. Combined with $rad(P_{2R+1})\\le R$, we conclude $rad(P_{2R+1})=R$.\n\nHence the path on $2R+1$ vertices achieves $rad=R$ and $diam=2R$, matching the lower bound $|V|\\ge 2R+1$. Therefore, the minimum possible number of nodes is $2R+1$.", "answer": "$$\\boxed{2R+1}$$", "id": "1497466"}]}