{"hands_on_practices": [{"introduction": "Before we can analyze or count circuits, it is crucial to first understand the structural properties a graph must have for circuits to exist at all. This exercise challenges you to apply the fundamental definition of a circuit to a common topology, the star graph, which serves as a canonical example of a tree. By investigating this structure, you will develop a core understanding of acyclic graphs and the conditions that prevent cycles from forming [@problem_id:1489019].", "problem": "In graph theory, a **star graph**, denoted as $K_{1,n}$, is a simple graph with $n+1$ vertices. One vertex is designated as the \"center,\" which is connected to the other $n$ \"leaf\" vertices. The leaf vertices are not connected to each other. This structure implies there are exactly $n$ edges, each connecting the center to one of the leaves.\n\nA **circuit** (also known as a simple cycle) is defined as a path within a graph that starts and ends at the same vertex. A circuit must contain at least three distinct vertices, and no vertices are repeated except for the starting and ending vertex. The length of a circuit is the number of edges it comprises.\n\nConsider a star graph $K_{1,n}$ for any integer $n \\ge 2$. Which of the following statements correctly characterizes all possible lengths of a circuit that can exist within such a graph?\n\nA. The only possible circuit length is 2.\nB. The only possible circuit length is 3.\nC. The possible circuit lengths are all even integers $2k$, where $1 \\le k \\le n$.\nD. The possible circuit lengths are all integers from 3 up to $n$.\nE. No circuits can exist in a star graph.", "solution": "Let $K_{1,n}$ be the star graph with center vertex $c$ and leaves $v_{1},\\dots,v_{n}$, where each edge is of the form $\\{c,v_{i}\\}$ and no edges exist between leaves.\n\nA circuit must contain at least three distinct vertices. Let's attempt to construct a walk starting from a vertex and returning to it. In $K_{1,n}$, every edge is incident to the center $c$, so any walk of length greater than 1 must include $c$. Suppose a walk starts at a leaf $v_i$. The only possible first step is to $c$. From $c$, the walk can go to another leaf $v_j$ (or back to $v_i$). To form a closed walk, it must eventually return to $v_i$, which requires taking the edge $\\{c, v_i\\}$. Any path from a leaf to itself must therefore pass through $c$ at least twice (e.g., $v_i \\to c \\to v_j \\to c \\to \\dots \\to v_i$).\n\nConsider any walk that starts and ends at the same vertex. If it is to be a circuit, it cannot repeat vertices (other than the start/end vertex). Any walk starting from a leaf $v_i$ must go to $c$. To continue to another vertex and eventually return to $v_i$, it must pass through $c$ again, repeating a vertex. Thus, no circuit can start or end at a leaf.\n\nThe only remaining possibility is a circuit involving only the center $c$. But a circuit must contain at least three distinct vertices, so this is impossible.\n\nAlternatively, consider a walk starting at the center $c$. It must go to some leaf $v_i$. From $v_i$, the only neighbor is $c$. Returning immediately to $c$ creates the walk $c \\to v_i \\to c$ of length 2. This walk contains only two distinct vertices, so by the problem's definition, it is not a circuit. Since it is impossible to proceed from $v_i$ to any vertex other than $c$, no circuit of length 3 or more can be formed.\n\nFinally, a star graph $K_{1,n}$ is a tree (it is connected and has $(n+1)$ vertices and $n$ edges). By definition, trees are acyclic, meaning they contain no circuits. Therefore, no circuits can exist in a star graph.", "answer": "$$\\boxed{E}$$", "id": "1489019"}, {"introduction": "The terminology used in graph theory is precise, and mastering it is key to solving complex problems. This practice moves beyond the basic idea of a circuit to explore the subtle yet important distinctions between a general \"closed walk,\" a \"non-backtracking walk,\" and a \"simple cycle.\" By analyzing walks on the famous Petersen graph, a structure renowned for its unique properties, you will sharpen your ability to apply these definitions correctly and understand their implications [@problem_id:1489056].", "problem": "The Petersen graph is an undirected graph with 10 vertices and 15 edges. A key property of this graph is that its girth (the length of its shortest cycle) is 5. This means there are no cycles of length 3 or 4 in the Petersen graph.\n\nTo analyze walks in this graph, we use the following precise definitions:\n- A **walk** of length $k$ is a sequence of vertices $(v_0, v_1, \\dots, v_k)$ such that for any $i \\in \\{0, \\dots, k-1\\}$, the pair $\\{v_i, v_{i+1}\\}$ constitutes an edge in the graph.\n- A walk is **closed** if its starting and ending vertices are the same, i.e., $v_0 = v_k$.\n- A walk is **non-backtracking** if it never immediately reverses direction. Formally, for a walk $(v_0, v_1, \\dots, v_k)$, we must have $v_{i+1} \\neq v_{i-1}$ for all $i \\in \\{1, \\dots, k-1\\}$.\n- A **simple cycle** is defined as a closed, non-backtracking walk of length $k \\ge 3$ where the first $k$ vertices, $(v_0, v_1, \\dots, v_{k-1})$, are all distinct.\n\nUsing these definitions, determine the length of the shortest closed, non-backtracking walk in the Petersen graph that is **not** a simple cycle.", "solution": "Let $G$ be the Petersen graph. A closed, non-backtracking walk $(v_{0}, v_{1}, \\dots, v_{k}=v_0)$ is not a simple cycle if and only if there is a repetition among the vertices $v_{0}, \\dots, v_{k-1}$. This repetition implies the existence of an \"inner\" closed walk. If a vertex is repeated, say $v_i = v_j$ for $0 \\le i  j  k$, then the sub-walk $(v_i, v_{i+1}, \\dots, v_j)$ forms a closed non-backtracking walk of length $j-i$. By taking the first such repetition, we can ensure this sub-walk is a simple cycle. Because the girth of the Petersen graph is 5, any such cycle must have length at least 5. Thus, we must have $j-i \\ge 5$.\n\nWe now rule out all lengths $k  7$:\n- If $k \\le 4$, any closed non-backtracking walk would imply the existence of a simple cycle of length $k \\le 4$, which is impossible since the girth is 5.\n- If $k=5$, any closed non-backtracking walk must be a simple 5-cycle. If there were a vertex repetition among $v_0, \\dots, v_4$, it would imply a cycle of length less than 5. Thus, any such walk is a simple cycle, which is not what we are looking for.\n- If $k=6$, for the walk $(v_0, \\dots, v_6=v_0)$ not to be a simple cycle, there must be a repetition among $v_0, \\dots, v_5$. Any such repetition must form an inner simple cycle of length $j-i \\ge 5$. Given the constraints $0 \\le i  j \\le 5$, the only possibility is a cycle of length 5, which requires $i=0$ and $j=5$. This means $v_0=v_5$. Since the walk is closed and has length 6, we must have $v_6=v_0$. The final step of the walk is therefore from $v_5$ to $v_6$. With $v_5=v_0$ and $v_6=v_0$, this step would be from $v_0$ to $v_0$, which requires a loop edge. The Petersen graph is a simple graph and has no loops. Therefore, no such walk of length 6 exists.\n\nAny such walk must therefore have length $k \\ge 7$.\n\nWe now exhibit a closed, non-backtracking walk of length 7 in the Petersen graph that is not a simple cycle. Using the standard labeling with outer vertices $0,1,2,3,4$ and inner vertices $0',1',2',3',4'$, where outer vertices $i$ and $i+1 \\pmod 5$ are connected, each vertex $i$ is connected to its corresponding inner vertex $i'$, and inner vertices $i'$ and $i \\pm 2 \\pmod 5$ are connected. Consider the sequence:\n$$\n0 \\to 1 \\to 1' \\to 3' \\to 3 \\to 2 \\to 1 \\to 0\n$$\n- **Closed:** The walk starts and ends at vertex 0.\n- **Non-backtracking:** Each step $v_{i-1} \\to v_i \\to v_{i+1}$ is verified: for instance, at vertex 1 (position 6), the previous vertex was 2 and the next is 0, so $0 \\neq 2$. This holds for all steps.\n- **Not a simple cycle:** The sequence of the first 7 vertices is $(0, 1, 1', 3', 3, 2, 1)$. Vertex 1 appears twice (at positions 1 and 6). This violates the condition that vertices $v_0, \\dots, v_{k-1}$ must be distinct.\n\nSince walks of length $k \\le 6$ are impossible and we have constructed a valid walk of length 7, the shortest possible length is 7.", "answer": "$$\\boxed{7}$$", "id": "1489056"}, {"introduction": "After exploring single circuits, we can investigate how they combine to form larger structures, such as tours that traverse an entire graph. This problem provides a hands-on application of Hierholzer's algorithm, a classic and intuitive method for constructing an Eulerian circuitâ€”a closed walk that visits every edge exactly once. By systematically executing this procedure based on a clear set of rules, you will gain practical insight into how a complex tour can be built by discovering and merging smaller, simpler circuits [@problem_id:1489039].", "problem": "A robotics company is designing a maintenance routine for a network of five critical servers, labeled $V_1, V_2, V_3, V_4, V_5$. The network is configured as a complete graph, meaning every server has a direct, two-way data link (an edge) to every other server. A diagnostic drone must perform a complete systems check by traversing every single data link exactly once. The tour must start and end at server $V_1$.\n\nDue to a priority alert, the drone's tour must begin by traversing the link from server $V_1$ to server $V_3$. The full tour is constructed by a specific, deterministic algorithm based on Hierholzer's method, as follows:\n\n1.  First, an initial closed circuit, $C_0$, is formed. This circuit must start at $V_1$, is required to take the edge $\\{V_1, V_3\\}$ as its first step, and is completed by returning to $V_1$. At each step of building this circuit (and any subsequent circuits), if multiple unused edges are available to extend the path from the current vertex, the drone must always choose the edge that leads to the available server with the smallest subscript index. The circuit is complete when the drone returns to a vertex from which there are no unused edges.\n2.  The current overall tour is maintained in a sequence $T$. Initially, $T$ is set to the vertex sequence of $C_0$.\n3.  As long as there are edges in the graph that have not been traversed, repeat the following:\n    a. Scan the vertices of the current tour $T$ in the order they appear (from start to finish). Identify the first vertex $u$ in this sequence that is an endpoint of at least one untraversed edge.\n    b. Starting from this vertex $u$, create a new closed circuit, $C_i$, using only the remaining untraversed edges, again applying the \"smallest-index\" tie-breaking rule whenever a choice of path is possible.\n    c. Splice the new circuit $C_i$ into the tour $T$ at the first occurrence of the vertex $u$. The new tour $T$ is formed by following the old tour up to (but not including) the vertex $u$, then traversing the entire circuit $C_i$ (which starts and ends at $u$), and finally continuing with the rest of the old tour starting from the vertex that originally followed $u$.\n\nFollowing this exact procedure, determine the sequence of servers visited. What is the label of the 6th server in this final tour sequence? (The starting server $V_1$ at the beginning of the tour is counted as the 1st server).", "solution": "The network is the complete graph $K_{5}$ on vertices $\\{V_{1},V_{2},V_{3},V_{4},V_{5}\\}$. Since every vertex has degree $4$ (an even number), the graph has an Eulerian circuit. We follow the specified Hierholzer-based algorithm.\n\n**Step 1: Construct the initial circuit $C_0$.**\nThe circuit starts at $V_1$ and must first traverse the edge $\\{V_1, V_3\\}$. From each subsequent vertex, we choose the unused edge leading to the smallest-indexed neighbor. We continue until we arrive at a vertex with no available unused edges, which must be the starting vertex $V_1$.\n\n- Start at $V_1$. Path: $(V_1)$.\n- Forced step: $V_1 \\to V_3$. Path: $(V_1, V_3)$. Used edges: $\\{\\{V_1,V_3\\}\\}$.\n- From $V_3$, available neighbors are $V_1, V_2, V_4, V_5$. Choose smallest index: $V_1$. This is not an unused edge. Smallest index via an unused edge is $V_2$. Path: $(V_1, V_3, V_2)$. Used edges: $\\{\\{V_1,V_3\\}, \\{V_3,V_2\\}\\}$.\n- From $V_2$, smallest unused neighbor is $V_1$. Path: $(V_1, V_3, V_2, V_1)$. Used edges: $\\{\\{V_1,V_3\\}, \\{V_3,V_2\\}, \\{V_2,V_1\\}\\}$.\n- From $V_1$, smallest unused neighbor is $V_4$. Path: $(V_1, V_3, V_2, V_1, V_4)$.\n- From $V_4$, smallest unused neighbor is $V_2$. Path: $(V_1, V_3, V_2, V_1, V_4, V_2)$.\n- From $V_2$, smallest unused neighbor is $V_5$. Path: $(V_1, V_3, V_2, V_1, V_4, V_2, V_5)$.\n- From $V_5$, smallest unused neighbor is $V_1$. Path: $(V_1, V_3, V_2, V_1, V_4, V_2, V_5, V_1)$.\n- Now at $V_1$. All edges incident to $V_1$ ($\\{V_1,V_2\\}, \\{V_1,V_3\\}, \\{V_1,V_4\\}, \\{V_1,V_5\\}$) have now been used. The circuit building process terminates.\nThe initial circuit (closed trail) is $C_0 = (V_1, V_3, V_2, V_1, V_4, V_2, V_5, V_1)$.\n\n**Step 2: Initialize the tour $T$.**\n$T = (V_1, V_3, V_2, V_1, V_4, V_2, V_5, V_1)$.\nThe edges used in $C_0$ are $\\{V_1,V_3\\}, \\{V_3,V_2\\}, \\{V_2,V_1\\}, \\{V_1,V_4\\}, \\{V_4,V_2\\}, \\{V_2,V_5\\}, \\{V_5,V_1\\}$.\nThe remaining unused edges are $\\{V_3,V_4\\}, \\{V_3,V_5\\}, \\{V_4,V_5\\}$.\n\n**Step 3: Find and merge new circuits.**\n- Scan $T$: The first vertex with an untraversed edge is $V_3$ (at index 2). So, $u = V_3$.\n- Build a new circuit $C_1$ from $u=V_3$ using only the unused edges:\n  - From $V_3$, smallest unused neighbor is $V_4$. Path: $(V_3, V_4)$.\n  - From $V_4$, smallest unused neighbor is $V_5$. Path: $(V_3, V_4, V_5)$.\n  - From $V_5$, smallest unused neighbor is $V_3$. Path: $(V_3, V_4, V_5, V_3)$.\n  - So, $C_1 = (V_3, V_4, V_5, V_3)$.\n- Splice $C_1$ into $T$ at the first occurrence of $V_3$:\n  - Original $T$: $(V_1, \\mathbf{V_3}, V_2, V_1, V_4, V_2, V_5, V_1)$.\n  - New $T$: $(V_1, \\underbrace{V_3, V_4, V_5, V_3}_{C_1}, V_2, V_1, V_4, V_2, V_5, V_1)$.\n  - The final tour is $T = (V_1, V_3, V_4, V_5, V_3, V_2, V_1, V_4, V_2, V_5, V_1)$.\n- All edges have now been traversed, so the algorithm terminates.\n\n**Step 4: Find the 6th server.**\nThe sequence of servers is $(V_1, V_3, V_4, V_5, V_3, V_2, V_1, V_4, V_2, V_5, V_1)$.\n1. $V_1$\n2. $V_3$\n3. $V_4$\n4. $V_5$\n5. $V_3$\n6. $V_2$\n\nThe 6th server in the final tour sequence is $V_2$.", "answer": "$$\\boxed{V_{2}}$$", "id": "1489039"}]}