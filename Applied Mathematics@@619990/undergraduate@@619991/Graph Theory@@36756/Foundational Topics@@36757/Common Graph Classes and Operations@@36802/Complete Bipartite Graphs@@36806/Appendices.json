{"hands_on_practices": [{"introduction": "Understanding the fundamental properties of a graph family often begins by identifying its simplest members. This practice explores the conditions under which a complete bipartite graph $K_{m,n}$ loses all its cycles and becomes a tree. By applying the defining characteristic of trees—that they are connected graphs with exactly one fewer edge than vertices—you will derive a simple yet powerful algebraic condition on $m$ and $n$ [@problem_id:1490792]. This exercise solidifies the connection between a graph's local structure (all-to-all connections between partitions) and its global properties (being acyclic).", "problem": "A technology company is designing a new type of fault-tolerant network. The network consists of two distinct types of nodes: $m$ \"hub\" nodes and $n$ \"client\" nodes, where $m$ and $n$ are positive integers. The design specification is that every hub node must be directly connected to every client node to ensure complete communication coverage. However, there are no direct connections between any two hub nodes, nor are there any connections between any two client nodes.\n\nFor a network to be maximally efficient in terms of its wiring cost (i.e., the number of connections) while ensuring all nodes are part of a single connected component, it must have the structure of a tree. In graph theory, a tree is defined as a connected graph that contains no cycles.\n\nIdentify the necessary and sufficient condition on the positive integers $m$ and $n$ for the described network architecture to form a tree.\n\nA. $m = n$\n\nB. $m=1$ and $n=1$\n\nC. $m=1$ or $n=1$\n\nD. $m+n$ is an odd number\n\nE. Either $m=2, n=2$ or $m=1, n=1$", "solution": "Interpret the described network as the complete bipartite graph $K_{m,n}$: there are $m$ hub vertices and $n$ client vertices, every hub is connected to every client, and there are no edges within either part. Thus the number of vertices is\n$$\nV=m+n\n$$\nand the number of edges is\n$$\nE=mn.\n$$\nA tree is a connected, acyclic graph. For a connected graph, being a tree is equivalent to having exactly $V-1$ edges. First, $K_{m,n}$ is connected for all positive integers $m,n$ because:\n- any hub is directly adjacent to every client, so any hub-client pair is connected by a path of length $1$,\n- any two hubs (or two clients) are connected by a path of length $2$ through any vertex in the other part.\n\nTherefore $K_{m,n}$ is a tree if and only if\n$$\nE=V-1 \\quad \\Longleftrightarrow \\quad mn = m+n-1.\n$$\nRewriting,\n$$\nmn - m - n + 1 = 0 \\quad \\Longleftrightarrow \\quad (m-1)(n-1)=0.\n$$\nSince $m$ and $n$ are positive integers, this holds if and only if $m=1$ or $n=1$. In these cases, $K_{1,n}$ or $K_{m,1}$ is a star graph, which is acyclic, hence a tree. If $m \\geq 2$ and $n \\geq 2$, then $(m-1)(n-1) \\geq 1$, so $E \\geq V$, and in fact $K_{m,n}$ contains a $4$-cycle, so it is not a tree.\n\nThus the necessary and sufficient condition is $m=1$ or $n=1$, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1490792"}, {"introduction": "Once we establish that complete bipartite graphs are generally not trees for $m,n \\ge 2$, a natural next step is to quantify their cyclical nature. This exercise asks you to count the number of 4-cycles ($C_4$) in $K_{m,n}$, which are the shortest possible cycles in any bipartite graph with at least four vertices [@problem_id:1490837]. This practice is a foundational exercise in combinatorial graph theory, demonstrating how the unique structure of $K_{m,n}$ allows for an elegant counting argument based on selecting vertices from each partition.", "problem": "In a new research initiative at a large technology company, a team is formed consisting of $m$ machine learning engineers and $n$ distinct, newly-proposed AI projects. To foster maximum collaboration and knowledge sharing in the initial brainstorming phase, the company mandates that every engineer must contribute to every project. This arrangement can be modeled as a simple graph where the set of vertices is the union of the engineers and the projects. An edge connects an engineer and a project if and only if that engineer is assigned to work on that project.\n\nThe project lead is interested in quantifying a specific type of four-way interaction, termed a \"redundancy quartet\". A redundancy quartet is defined as a set of four distinct entities, comprising two distinct engineers (say, $E_1$ and $E_2$) and two distinct projects (say, $P_1$ and $P_2$), where both engineers are assigned to both projects. Such a structure implies that the work of $E_1$ on project $P_1$ is directly mirrored by $E_2$ on $P_1$, and similarly for project $P_2$.\n\nDerive a general formula for the total number of unique redundancy quartets that can be formed in this network, expressing your answer in terms of $m$ and $n$.", "solution": "Model the arrangement as the complete bipartite graph $K_{m,n}$ with the $m$ engineers on one side and the $n$ projects on the other, since every engineer is connected to every project. A redundancy quartet is a set of four distinct vertices consisting of two engineers and two projects such that all four cross edges between these two engineers and these two projects are present. In $K_{m,n}$, once two distinct engineers and two distinct projects are chosen, all required edges necessarily exist, so each such choice yields exactly one redundancy quartet.\n\nCounting unordered selections:\n- The number of ways to choose two distinct engineers is $\\binom{m}{2}$.\n- The number of ways to choose two distinct projects is $\\binom{n}{2}$.\n\nBy the multiplication principle, the total number of redundancy quartets is\n$$\n\\binom{m}{2}\\binom{n}{2}.\n$$\nEquivalently, this can be written as\n$$\n\\frac{m(m-1)}{2}\\cdot\\frac{n(n-1)}{2}=\\frac{m(m-1)n(n-1)}{4}.\n$$\nBoth forms are analytically equivalent.", "answer": "$$\\boxed{\\binom{m}{2}\\binom{n}{2}}$$", "id": "1490837"}, {"introduction": "Complete bipartite graphs are not just theoretical constructs; they are powerful models for real-world allocation and pairing problems. This practice delves into the concept of a maximum matching, which seeks the largest possible set of disjoint edges in a graph [@problem_id:1490831]. You will determine the size of a maximum matching in $K_{m,n}$, revealing how the graph's complete connectivity between partitions simplifies this classic optimization problem to a straightforward comparison of the partition sizes.", "problem": "A software company is organizing a one-day collaborative coding event. There are two groups of developers participating: $m$ frontend developers and $n$ backend developers. For the main event, the organizers want to form as many developer pairs as possible. Each pair must consist of exactly one frontend developer and one backend developer. Due to the nature of the tasks, any frontend developer can be paired with any backend developer. During the event, any individual developer can belong to at most one pair.\n\nGiven the number of frontend developers, $m$, and the number of backend developers, $n$, determine the maximum number of pairs that can be formed simultaneously. Your answer should be a general expression in terms of $m$ and $n$.", "solution": "Let $P$ denote the maximum number of pairs formed, where each pair consists of exactly one frontend developer and exactly one backend developer, and no individual belongs to more than one pair.\n\nEach pair uses one frontend developer, so the total number of pairs cannot exceed the number of frontend developers. Therefore,\n$$\nP \\leq m.\n$$\nSimilarly, each pair uses one backend developer, so the total number of pairs cannot exceed the number of backend developers. Therefore,\n$$\nP \\leq n.\n$$\nCombining these two upper bounds gives\n$$\nP \\leq \\min(m,n).\n$$\nIt remains to show that $\\min(m,n)$ pairs can actually be formed. Because any frontend developer can be paired with any backend developer, the bipartite compatibility graph is complete. We can pair developers greedily: match each developer from the smaller group with a distinct developer from the larger group until the smaller group is exhausted. This constructs exactly $\\min(m,n)$ disjoint pairs. Hence, this upper bound is achievable.\n\nTherefore,\n$$\nP=\\min(m,n).\n$$", "answer": "$$\\boxed{\\min(m,n)}$$", "id": "1490831"}]}