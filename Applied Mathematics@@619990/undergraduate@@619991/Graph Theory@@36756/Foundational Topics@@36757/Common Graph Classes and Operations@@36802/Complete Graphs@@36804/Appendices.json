{"hands_on_practices": [{"introduction": "Understanding a complex object often begins by counting its fundamental components. In a complete graph $K_n$, the simplest non-trivial complete subgraph is the triangle, $K_3$. This exercise [@problem_id:1491069] challenges you to connect the geometric idea of a triangle to the combinatorial principle of combinations, a foundational skill in graph theory.", "problem": "In a decentralized secure messaging system, there are $n$ servers. For maximum resilience and data integrity, each server maintains a direct, encrypted communication channel with every other server in the system. This network topology is equivalent to a complete graph $K_n$, where servers are vertices and communication channels are edges.\n\nA critical security operation, known as a 'triad verification', requires a group of three distinct servers where each server in the group can directly communicate with the other two.\n\nDerive a general formula for the total number of unique triad verification groups that can be formed in a system with $n$ servers, where $n \\geq 3$. Express your answer as a function of $n$.", "solution": "The problem asks for the total number of unique \"triad verification groups\" in a system of $n$ servers where every server is connected to every other. In the language of graph theory, the system is represented by a complete graph $K_n$, where the servers are the vertices and the communication channels are the edges.\n\nA \"triad verification group\" is defined as a set of three distinct servers, all mutually connected. In the graph $K_n$, this corresponds to a set of three vertices such that an edge exists between every pair of vertices in the set. This structure is precisely a triangle, also known as a complete subgraph on 3 vertices, or $K_3$.\n\nThe problem is therefore equivalent to finding the total number of distinct subgraphs isomorphic to $K_3$ within a $K_n$.\n\nIn a complete graph $K_n$, an edge exists between any two distinct vertices. This means that if we select any set of three vertices, they will automatically form a triangle, as all three possible edges connecting them are guaranteed to be present.\n\nConsequently, the task of counting the number of triangles simplifies to counting the number of ways to choose a subset of 3 vertices from the total set of $n$ vertices. The order in which we choose the three vertices does not matter, as the group {Server A, Server B, Server C} is the same as {Server B, Server A, Server C}. This is a classic combinatorics problem of combinations.\n\nThe number of ways to choose $k$ items from a set of $n$ distinct items is given by the binomial coefficient, denoted as $\\binom{n}{k}$, which is calculated as:\n$$ \\binom{n}{k} = \\frac{n!}{k!(n-k)!} $$\nFor our specific problem, we are choosing $k=3$ vertices from a set of $n$ vertices. Substituting these values into the formula, we get:\n$$ \\text{Number of triads} = \\binom{n}{3} = \\frac{n!}{3!(n-3)!} $$\nWe can expand the factorial terms to simplify the expression:\n$$ \\frac{n!}{3!(n-3)!} = \\frac{n \\times (n-1) \\times (n-2) \\times (n-3)!}{(3 \\times 2 \\times 1) \\times (n-3)!} $$\nThe $(n-3)!$ term in the numerator and the denominator cancels out:\n$$ \\binom{n}{3} = \\frac{n(n-1)(n-2)}{3!} $$\nSince $3! = 3 \\times 2 \\times 1 = 6$, the final formula is:\n$$ \\frac{n(n-1)(n-2)}{6} $$\nThis expression gives the total number of unique triad verification groups for any $n \\geq 3$.", "answer": "$$\\boxed{\\frac{n(n-1)(n-2)}{6}}$$", "id": "1491069"}, {"introduction": "Complete graphs are maximally connected, but what happens when we slightly perturb that perfect structure? This problem [@problem_id:1491134] explores graph coloring, a concept with wide applications from scheduling to register allocation. By analyzing the chromatic number of a complete graph with one edge removed, $\\chi(K_n - e)$, you will develop a deeper intuition for how graph properties respond to small changes.", "problem": "A project management system is used to coordinate a set of $n$ distinct, resource-intensive tasks, where $n \\geq 3$. In the initial project plan, every task conflicts with every other task, meaning no two tasks can be performed simultaneously in the same time slot.\n\nFollowing a system optimization, a \"compatibility patch\" is applied that resolves the conflict between exactly one pair of tasks. Let's call this pair Task A and Task B. This patch allows Task A and Task B to be scheduled in the same time slot if needed. All other pairs of tasks remain in conflict with each other. For example, Task A still conflicts with every task other than Task B, and Task C still conflicts with every other task.\n\nDetermine the minimum number of distinct time slots required to schedule all $n$ tasks under these new conditions. Express your answer as a function of $n$.", "solution": "Model the tasks and conflicts as a simple graph: each task is a vertex, and an edge between two vertices indicates a conflict that prevents simultaneous scheduling. The minimum number of time slots needed equals the chromatic number of the conflict graph, denoted $\\chi$.\n\nInitially, the conflict graph is the complete graph $K_{n}$, which has chromatic number $\\chi(K_{n})=n$. After the patch, exactly one conflict (the edge between Task A and Task B) is removed, so the new graph is $G=K_{n}-e$, where $e$ is the edge $\\{A,B\\}$.\n\nLower bound: The clique number $\\omega(G)$ is at least $n-1$ because the $n-1$ vertices obtained by removing either $A$ or $B$ still form a complete subgraph $K_{n-1}$. Therefore,\n$$\n\\chi(G) \\geq \\omega(G) = n-1.\n$$\n\nUpper bound: Construct a proper coloring with $n-1$ colors by assigning the same color to $A$ and $B$ (which is allowed since they are non-adjacent in $G$) and assigning distinct new colors to each of the remaining $n-2$ vertices. This uses exactly $n-1$ colors and is proper.\n\nCombining the bounds,\n$$\n\\chi(G)=n-1.\n$$\n\nThus, the minimum number of distinct time slots required is $n-1$.", "answer": "$$\\boxed{n-1}$$", "id": "1491134"}, {"introduction": "Real-world networks are rarely simple; they are often constructed from densely connected modules or communities. This practice [@problem_id:1491093] moves beyond analyzing a single $K_n$ to examining a larger network built from complete subgraphs. Your task is to count the total number of four-vertex cliques ($K_4$) in this composite structure, honing your ability to perform systematic case analysis on complex graphs.", "problem": "A network of 8 microprocessors, labeled 1 through 8, is being analyzed for its cluster connectivity. The connections form an undirected graph $G$ with the vertex set $V = \\{1, 2, 3, 4, 5, 6, 7, 8\\}$. The graph is constructed in two stages:\n\n1.  Two fully interconnected sets of processors are established. The first set involves processors $\\{1, 2, 3, 4\\}$, forming a complete graph on these four vertices. The second set involves processors $\\{5, 6, 7, 8\\}$, also forming a complete graph on these four vertices.\n2.  Additional high-speed links are added such that every processor in the set $\\{1, 2\\}$ is connected to every processor in the set $\\{5, 6\\}$.\n\nA \"quad-core computational unit\" is defined as a set of 4 distinct processors where every processor in the set is directly connected to every other processor in that set. In graph theory terms, this corresponds to a $K_4$ subgraph. Determine the total number of distinct quad-core computational units in this network.", "solution": "Let $A=\\{1,2,3,4\\}$ and $B=\\{5,6,7,8\\}$. The induced subgraphs on $A$ and on $B$ are each $K_{4}$. The only cross edges are between $\\{1,2\\}$ and $\\{5,6\\}$, namely $(1,5)$, $(1,6)$, $(2,5)$, $(2,6)$.\n\nA quad-core computational unit is a $4$-vertex clique. We count all $4$-subsets $S\\subset V$ whose induced subgraph is complete.\n\nFirst, $S\\subset A$ yields exactly one $K_{4}$, namely $A$ itself, contributing\n$$\n\\binom{4}{4}=1.\n$$\nSimilarly, $S\\subset B$ yields exactly one $K_{4}$, namely $B$ itself, contributing\n$$\n\\binom{4}{4}=1.\n$$\n\nNow consider mixed $S$ with $S\\cap A\\neq\\varnothing$ and $S\\cap B\\neq\\varnothing$. For $S$ to be a clique, every vertex in $S\\cap A$ must be adjacent to every vertex in $S\\cap B$. The only cross adjacencies present are between $\\{1,2\\}$ and $\\{5,6\\}$, so necessarily $S\\cap A\\subseteq\\{1,2\\}$ and $S\\cap B\\subseteq\\{5,6\\}$. Since $|S|=4$, the only possibility is $|S\\cap A|=2$ and $|S\\cap B|=2$, which forces $S=\\{1,2,5,6\\}$. This contributes\n$$\n\\binom{2}{2}\\binom{2}{2}=1.\n$$\nNo $3+1$ or $1+3$ split can work because it would require a cross adjacency that does not exist.\n\nTherefore, the total number of $K_{4}$ subgraphs is\n$$\n\\binom{4}{4}+\\binom{4}{4}+\\binom{2}{2}\\binom{2}{2}=1+1+1=3.\n$$", "answer": "$$\\boxed{3}$$", "id": "1491093"}]}