{"hands_on_practices": [{"introduction": "The foundation of any flow network is the principle of conservation, which states that for any node other than the source or sink, the total flow entering must equal the total flow leaving. This exercise provides a practical check on this fundamental rule by asking you to audit a given flow assignment for a specific server node. Calculating the net flow will allow you to determine if the network's state is valid, a critical first step in network analysis and diagnostics. [@problem_id:1504829]", "problem": "A technology company, DataStream Inc., is conducting an audit of the data flow within its internal server network. The network is modeled as a directed graph where servers are vertices and network links are directed edges. The company has a main data center, which acts as the source $s$, and a primary backup archive, which acts as the sink $t$.\n\nThe network consists of the set of vertices $V = \\{s, v_1, v_2, v_3, v_4, t\\}$. An intern has measured the current data flow rate, denoted by $f(u,v)$, for each active connection $(u,v)$ in the network. The flow rates are measured in terabits per second (Tb/s). The recorded flows are as follows:\n\n- $f(s, v_1) = 12$\n- $f(s, v_2) = 15$\n- $f(v_1, v_2) = 5$\n- $f(v_1, v_3) = 7$\n- $f(v_2, v_3) = 9$\n- $f(v_2, v_4) = 11$\n- $f(v_3, v_4) = 8$\n- $f(v_3, t) = 5$\n- $f(v_4, t) = 18$\n\nFor any vertex $v$ that is neither the source nor the sink, the flow conservation principle requires that the total flow into $v$ must equal the total flow out of $v$. The net flow at a vertex $v$ is defined as the total flow into $v$ minus the total flow out of $v$. Your task is to verify the intern's measurements by calculating the net flow for the server represented by vertex $v_3$.\n\nExpress your answer for the net flow at $v_3$ as a single number in Tb/s.", "solution": "By the flow conservation principle, the net flow at a vertex $v$ (not source or sink) is defined as total inflow minus total outflow:\n$$\\text{net}(v) = \\sum_{u} f(u,v) - \\sum_{w} f(v,w).$$\nFor $v_3$, the incoming edges are $(v_1,v_3)$ and $(v_2,v_3)$, and the outgoing edges are $(v_3,v_4)$ and $(v_3,t)$. Therefore,\n$$\\text{net}(v_3) = f(v_1,v_3) + f(v_2,v_3) - f(v_3,v_4) - f(v_3,t).$$\nSubstituting the given values:\n$$\\text{net}(v_3) = 7 + 9 - 8 - 5 = 16 - 13 = 3.$$\nThus, the net flow at $v_3$ is $3$ Tb/s; since this is nonzero, the given measurements violate flow conservation at $v_3$.", "answer": "$$\\boxed{3}$$", "id": "1504829"}, {"introduction": "Beyond simple calculations, a deep understanding of flow networks comes from reasoning about how a network's structure constrains the flow. This practice challenges you to think logically about the implications of specific topological features, such as a node having no incoming connections. By applying the flow conservation principle, you can deduce the behavior of flow through such a node without needing any specific flow values, sharpening your abstract problem-solving skills. [@problem_id:1504841]", "problem": "A flow network is formally defined as a tuple $(G, s, t, c)$, where $G=(V, E)$ is a finite directed graph with a set of vertices $V$ and a set of edges $E$. The network has two distinguished vertices: a source $s \\in V$ and a sink $t \\in V$, where $s \\neq t$. The function $c: E \\to \\mathbb{R}_{\\ge 0}$ defines the capacity for each edge, representing the maximum amount of flow that can pass through it.\n\nA flow in the network is a function $f: E \\to \\mathbb{R}_{\\ge 0}$ that must satisfy two conditions:\n1.  **Capacity Constraint**: For every edge $e \\in E$, the flow $f(e)$ must satisfy $0 \\le f(e) \\le c(e)$.\n2.  **Flow Conservation**: For every vertex $v \\in V \\setminus \\{s, t\\}$, the total flow entering $v$ must equal the total flow leaving $v$. Symbolically, this is expressed as:\n    $$ \\sum_{u \\in V \\text{ s.t. } (u,v) \\in E} f((u,v)) = \\sum_{w \\in V \\text{ s.t. } (v,w) \\in E} f((v,w)) $$\n\nThe in-degree of a vertex is the number of incoming edges, and the out-degree is the number of outgoing edges. Based on these definitions, which one of the following statements is always true for any flow network?\n\nA. A vertex with an in-degree of 0 must be the designated source $s$.\n\nB. A vertex with an out-degree of 0 must be the designated sink $t$.\n\nC. If a vertex $v$ is neither the source nor the sink ($v \\notin \\{s, t\\}$) and has an in-degree of 0, then for any valid flow, the flow on all edges originating from $v$ must be zero.\n\nD. If the sink $t$ has an in-degree of 0, the maximum flow value from $s$ to $t$ can be strictly positive.", "solution": "We use only the capacity constraint $0 \\leq f(e) \\leq c(e)$ for all edges $e \\in E$ and flow conservation at every $v \\in V \\setminus \\{s,t\\}$:\n$$\n\\sum_{u \\in V : (u,v) \\in E} f((u,v)) \\;=\\; \\sum_{w \\in V : (v,w) \\in E} f((v,w)).\n$$\n\nAssess A: “A vertex with an in-degree of $0$ must be the designated source $s$.” This is not always true. A graph may contain a vertex $v \\neq s$ with in-degree $0$ (for example, an isolated vertex or a vertex with only outgoing edges), which is permitted by the definitions. Therefore A is not always true.\n\nAssess B: “A vertex with an out-degree of $0$ must be the designated sink $t$.” This is also not always true. A graph may contain a vertex $v \\neq t$ with out-degree $0$ (a dead-end), and the definitions do not forbid such vertices. Therefore B is not always true.\n\nAssess C: Let $v \\notin \\{s,t\\}$ have in-degree $0$. Then the left-hand side of flow conservation at $v$ is zero:\n$$\n\\sum_{u : (u,v) \\in E} f((u,v)) \\;=\\; 0.\n$$\nHence by conservation,\n$$\n\\sum_{w : (v,w) \\in E} f((v,w)) \\;=\\; 0.\n$$\nEach term $f((v,w))$ is nonnegative by the capacity constraint. A sum of nonnegative terms equals $0$ if and only if each term equals $0$. Therefore, for any valid flow, all edges originating from $v$ must carry zero flow. Thus C is always true.\n\nAssess D: If $t$ has in-degree $0$, then there are no edges $(u,t) \\in E$. Hence no flow unit can enter $t$, so the total flow delivered to $t$ is $0$ for any feasible flow. Therefore the maximum flow value from $s$ to $t$ cannot be strictly positive. Thus D is false.\n\nThe only statement that is always true is C.", "answer": "$$\\boxed{C}$$", "id": "1504841"}, {"introduction": "Real-world problems often don't fit perfectly into standard textbook models; for example, a network may have multiple sources or sinks. This advanced practice moves beyond simple network analysis to algorithmic adaptation, asking you to find the maximum flow in a multi-source network. Rather than using the standard trick of adding a \"super-source,\" you'll modify the path-finding logic itself, providing a deeper insight into how augmenting path algorithms fundamentally work. [@problem_id:1504817]", "problem": "A data logistics company, QuantumLeap Dynamics, needs to transfer a large scientific dataset from its redundant storage facilities to a central supercomputer for processing. The company's network can be modeled as a directed graph where nodes represent data centers, routers, and the supercomputer, and the edges represent fiber optic links with a specific maximum data transfer rate.\n\nThe network consists of the following nodes:\n- Two source data centers: `DC1` and `DC2`.\n- Two network routers: `R1` and `R2`.\n- One sink supercomputer: `SC`.\n\nThe directed links and their corresponding capacities, in terabytes per hour (TB/h), are as follows:\n- `(DC1, R1)`: 10 TB/h\n- `(DC1, R2)`: 5 TB/h\n- `(DC2, R1)`: 6 TB/h\n- `(DC2, R2)`: 8 TB/h\n- `(R1, R2)`: 4 TB/h\n- `(R1, SC)`: 12 TB/h\n- `(R2, SC)`: 9 TB/h\n\nYour task is to determine the maximum possible total data transfer rate from the two data centers (`DC1` and `DC2`) combined to the supercomputer (`SC`).\n\nTo solve this, you must use an augmenting path-based algorithm, such as Edmonds-Karp. However, you are explicitly forbidden from modifying the network topology, for instance, by adding a consolidated \"super-source\" node that connects to `DC1` and `DC2`. Your method must instead adapt the initialization of the algorithm's path-finding search to handle the two distinct sources directly.\n\nExpress your final answer as a single numerical value for the maximum flow in TB/h.", "solution": "The problem asks for the maximum flow in a multi-source, single-sink network. The standard method for solving such problems is to create a \"super-source\" node `S*`, add directed edges from `S*` to each of the real sources (`DC1`, `DC2`) with infinite capacity, and then find the max flow from `S*` to the sink `SC`. However, the problem explicitly forbids this modification of the graph.\n\nWe must therefore adapt an augmenting path algorithm, like the Edmonds-Karp algorithm, to handle multiple sources. The Edmonds-Karp algorithm repeatedly finds a shortest augmenting path (in terms of the number of edges) in the residual graph using a Breadth-First Search (BFS) and augments flow along this path. The adaptation required is in the initialization of the BFS. Instead of starting the search from a single source node, we initialize the BFS queue with all source nodes (`DC1` and `DC2`). This effectively searches for a path from *any* of the sources to the sink.\n\nLet the flow function be denoted by $f(u, v)$ and the capacity by $c(u, v)$. The residual capacity from node $u$ to $v$ is $c_f(u, v) = c(u, v) - f(u, v)$. Initially, the flow is zero everywhere, so the residual graph is identical to the original graph. The total flow is $F = 0$.\n\n**Iteration 1:**\nWe search for an augmenting path from $\\{\\text{DC1}, \\text{DC2}\\}$ to `SC` in the residual graph.\nInitialize BFS queue: $Q = [\\text{DC1}, \\text{DC2}]$.\nThe BFS will explore paths. Two shortest paths of length 2 exist: $DC1 \\to R1 \\to SC$ and $DC1 \\to R2 \\to SC$. A third, $DC2 \\to R1 \\to SC$, is also of length 2. The algorithm can pick any. Let's select $DC1 \\to R1 \\to SC$.\nThe residual capacities along this path are $c_f(\\text{DC1}, \\text{R1}) = 10$ and $c_f(\\text{R1}, \\text{SC}) = 12$.\nThe bottleneck capacity is $\\min(10, 12) = 10$.\nWe augment the flow by 10. $F = 0 + 10 = 10$.\nUpdate residual capacities:\n- $c_f(\\text{DC1}, \\text{R1})$ decreases to $10 - 10 = 0$. A reverse edge $(\\text{R1}, \\text{DC1})$ is created with capacity $c_f(\\text{R1}, \\text{DC1}) = 10$.\n- $c_f(\\text{R1}, \\text{SC})$ decreases to $12 - 10 = 2$. A reverse edge $(\\text{SC}, \\text{R1})$ is created with capacity $c_f(\\text{SC}, \\text{R1}) = 10$.\n\n**Iteration 2:**\nSearch for a new augmenting path. Initialize BFS queue: $Q = [\\text{DC1}, \\text{DC2}]$.\nThe shortest path is now $DC2 \\to R2 \\to SC$ with length 2.\nThe residual capacities are $c_f(\\text{DC2}, \\text{R2}) = 8$ and $c_f(\\text{R2}, \\text{SC}) = 9$.\nThe bottleneck capacity is $\\min(8, 9) = 8$.\nWe augment the flow by 8. $F = 10 + 8 = 18$.\nUpdate residual capacities:\n- $c_f(\\text{DC2}, \\text{R2})$ decreases to $8 - 8 = 0$. Reverse edge $c_f(\\text{R2}, \\text{DC2}) = 8$.\n- $c_f(\\text{R2}, \\text{SC})$ decreases to $9 - 8 = 1$. Reverse edge $c_f(\\text{SC}, \\text{R2}) = 8$.\n\n**Iteration 3:**\nSearch for a new augmenting path. Initialize BFS queue: $Q = [\\text{DC1}, \\text{DC2}]$.\nA shortest path is $DC1 \\to R2 \\to SC$ with length 2.\nThe residual capacities are $c_f(\\text{DC1}, \\text{R2}) = 5$ and $c_f(\\text{R2}, \\text{SC}) = 1$.\nThe bottleneck capacity is $\\min(5, 1) = 1$.\nWe augment the flow by 1. $F = 18 + 1 = 19$.\nUpdate residual capacities:\n- $c_f(\\text{DC1}, \\text{R2})$ decreases to $5 - 1 = 4$. $c_f(\\text{R2}, \\text{DC1})$ increases to 1.\n- $c_f(\\text{R2}, \\text{SC})$ decreases to $1 - 1 = 0$. $c_f(\\text{SC}, \\text{R2})$ increases to $8 + 1 = 9$.\n\n**Iteration 4:**\nSearch for a new augmenting path. Initialize BFS queue: $Q = [\\text{DC1}, \\text{DC2}]$.\nA shortest path is $DC2 \\to R1 \\to SC$ with length 2.\nThe residual capacities are $c_f(\\text{DC2}, \\text{R1}) = 6$ and $c_f(\\text{R1}, \\text{SC}) = 2$.\nThe bottleneck capacity is $\\min(6, 2) = 2$.\nWe augment the flow by 2. $F = 19 + 2 = 21$.\nUpdate residual capacities:\n- $c_f(\\text{DC2}, \\text{R1})$ decreases to $6 - 2 = 4$. $c_f(\\text{R1}, \\text{DC2})$ becomes 2.\n- $c_f(\\text{R1}, \\text{SC})$ decreases to $2 - 2 = 0$. $c_f(\\text{SC}, \\text{R1})$ increases to $10 + 2 = 12$.\n\n**Iteration 5:**\nSearch for a new augmenting path. Initialize BFS queue: $Q = [\\text{DC1}, \\text{DC2}]$.\nLet's trace the reachable nodes from $\\{\\text{DC1}, \\text{DC2}\\}$.\n- From `DC1`, we can reach `R2` (residual capacity 4).\n- From `DC2`, we can reach `R1` (residual capacity 4) and `R2` (residual capacity 0, cannot use).\n- So, from sources, we can reach `R1` and `R2`.\n- From `R1`, can we reach `SC`? No, $c_f(\\text{R1}, \\text{SC}) = 0$. Can we go elsewhere? We can go to `R2` ($c_f(\\text{R1}, \\text{R2}) = 4$).\n- From `R2`, can we reach `SC`? No, $c_f(\\text{R2}, \\text{SC}) = 0$.\n- Let's check path $DC2 \\to R1 \\to R2$. From `R2`, we cannot reach `SC`. So this path does not lead to the sink.\nThe BFS will explore the set of reachable nodes: $\\{\\text{DC1}, \\text{DC2}, \\text{R1}, \\text{R2}\\}$. Since `SC` cannot be reached from any of these nodes in the current residual graph, the search terminates. No more augmenting paths exist.\n\nThe algorithm terminates. The maximum flow is the sum of all augmentations.\n$F_{\\text{max}} = 10 + 8 + 1 + 2 = 21$.\n\nThis result can be verified by the max-flow min-cut theorem. Consider the cut $C = (\\{\\text{DC1}, \\text{DC2}, \\text{R1}, \\text{R2}\\}, \\{\\text{SC}\\})$. This cut separates the sources from the sink. The capacity of the cut is the sum of capacities of all edges going from the source-side partition to the sink-side partition.\n$\\text{Capacity}(C) = c(\\text{R1}, \\text{SC}) + c(\\text{R2}, \\text{SC}) = 12 + 9 = 21$.\nSince we found a flow of 21 and a cut of capacity 21, by the max-flow min-cut theorem, this must be the maximum flow.\n\nThe maximum total data transfer rate is 21 TB/h.", "answer": "$$\\boxed{21}$$", "id": "1504817"}]}