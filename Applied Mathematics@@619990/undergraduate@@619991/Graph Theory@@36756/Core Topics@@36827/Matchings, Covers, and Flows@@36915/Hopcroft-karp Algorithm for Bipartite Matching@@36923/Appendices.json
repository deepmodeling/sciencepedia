{"hands_on_practices": [{"introduction": "To master an algorithm, it is essential to trace its execution on fundamental graph structures. This first practice exercise examines the initial phase of the Hopcroft-Karp algorithm on a complete bipartite graph, $K_{n,n}$, starting from scratch. By analyzing this scenario, you will build a solid understanding of how the algorithm identifies the length of the shortest augmenting paths and gathers a maximal set of these paths to rapidly increase the matching size [@problem_id:1512374].", "problem": "An algorithm designer is analyzing the performance of the Hopcroft-Karp algorithm for finding a maximum cardinality matching in a bipartite graph. The specific graph under consideration is the complete bipartite graph, denoted $K_{n,n}$, where $n$ is a positive integer. This graph consists of two disjoint sets of vertices, $U = \\{u_1, u_2, \\dots, u_n\\}$ and $V = \\{v_1, v_2, \\dots, v_n\\}$, with an edge connecting every vertex in $U$ to every vertex in $V$.\n\nThe Hopcroft-Karp algorithm works in phases to augment a matching $M$. A single phase is defined by the following sequence of operations:\n1.  A Breadth-First Search (BFS) is initiated simultaneously from all unmatched vertices in partition $U$. This search constructs a layered graph and determines the length, $k$, of the shortest augmenting path(s) relative to the current matching $M$. If the search finds no augmenting paths, the algorithm terminates as the current matching is maximum.\n2.  Following the BFS, a Depth-First Search (DFS) is used to find a maximal set of vertex-disjoint augmenting paths, $\\mathcal{P} = \\{P_1, P_2, \\dots, P_m\\}$, where each path in the set has the length $k$ found in the previous step.\n3.  The matching is then augmented by taking the symmetric difference with all paths found: $M_{\\text{new}} = M \\oplus P_1 \\oplus P_2 \\oplus \\dots \\oplus P_m$.\n\nThe analysis starts with an empty matching, $M_0 = \\emptyset$. Determine the cardinality (i.e., the number of edges) of the matching after the completion of exactly one full phase of the Hopcroft-Karp algorithm on the graph $K_{n,n}$. Express your answer as a function of $n$.", "solution": "We analyze one Hopcroft-Karp phase on $K_{n,n}$ starting from the empty matching $M_{0}=\\emptyset$.\n\nBy definition of the BFS step in Hopcroft-Karp, we start simultaneously from all free vertices in $U$. With $M_{0}=\\emptyset$, every vertex in $U$ and $V$ is free. The BFS grows layers by traversing unmatched edges from $U$ to $V$ and matched edges from $V$ to $U$. Since there are no matched edges initially, the first expansion from $U$ via unmatched edges reaches all vertices in $V$. Because all vertices in $V$ are free, the BFS discovers free vertices in $V$ at distance $1$, so the length of the shortest augmenting paths is\n$$\nk=1.\n$$\n\nTherefore, every shortest augmenting path is a single edge $\\{u,v\\}$ with $u\\in U$ free and $v\\in V$ free. In the DFS step, the algorithm finds a maximal set $\\mathcal{P}$ of vertex-disjoint augmenting paths of length $k=1$, i.e., a maximal set of disjoint edges between free vertices in $U$ and $V$. Let $m=|\\mathcal{P}|$.\n\nBecause the graph is complete bipartite, any free $u\\in U$ is adjacent to any free $v\\in V$. Suppose, for contradiction, that $m<n$. Then after selecting $m$ disjoint edges, there remain $n-m>0$ free vertices in $U$ and $n-m>0$ free vertices in $V$. Pick any remaining free $u\\in U$ and free $v\\in V$; the edge $\\{u,v\\}$ is present in $K_{n,n}$ and forms an augmenting path of length $1$ that is vertex-disjoint from all paths in $\\mathcal{P}$, contradicting the maximality of $\\mathcal{P}$. Hence we must have\n$$\nm=n.\n$$\n\nThe augmentation step replaces $M_{0}$ by\n$$\nM_{\\text{new}} \\;=\\; M_{0}\\,\\oplus\\,\\bigoplus_{P\\in\\mathcal{P}} P,\n$$\nand since each augmenting path increases the matching size by $1$, the new matching cardinality is\n$$\n|M_{\\text{new}}| \\;=\\; |M_{0}| + m \\;=\\; 0 + n \\;=\\; n.\n$$\n\nThus, after exactly one full phase, the matching has cardinality $n$.", "answer": "$$\\boxed{n}$$", "id": "1512374"}, {"introduction": "The elegance of the Hopcroft-Karp algorithm lies not just in finding augmenting paths, but in its methodical, phased approach to finding a maximal set of the *shortest* ones simultaneously. This exercise presents a carefully constructed graph to highlight the algorithm's efficiency compared to a simpler, greedy strategy of augmenting one path at a time. Working through this problem will reveal precisely why the phased augmentation strategy is a powerful design choice that avoids worst-case scenarios [@problem_id:1512380].", "problem": "Consider a bipartite graph $G = (U \\cup V, E)$ defined by a parameter $k$. The two partitions of vertices are $U = \\{u_1, u_2, \\dots, u_{k+1}\\}$ and $V = \\{v_1, v_2, \\dots, v_{k+1}\\}$. For this specific problem, let the parameter be $k=5$.\n\nThe set of edges $E$ is constructed as the union of three subsets of edges:\n1.  A set of \"direct\" edges: $E_1 = \\{ (u_i, v_i) \\mid 1 \\le i \\le k \\}$\n2.  A set of \"crossing\" edges: $E_2 = \\{ (u_i, v_{i+1}) \\mid 1 \\le i < k \\}$\n3.  A set of \"end\" edges: $E_3 = \\{ (u_{k+1}, v_1), (u_k, v_{k+1}) \\}$\n\nThe total edge set is $E = E_1 \\cup E_2 \\cup E_3$. The matching in the graph is initially empty.\n\nWe want to compare the performance of two algorithms for finding a maximum matching, starting from the empty matching.\n\n**Algorithm A (Simple Augmenting Path):** This algorithm iteratively finds augmenting paths. In each iteration, it performs a single Depth-First Search (DFS) starting from the available free vertices in $U$ (considered in ascending order of their index, e.g., $u_1, u_2, \\dots, u_{k+1}$) to find the first available augmenting path. When exploring from any vertex, its neighbors are visited in ascending order of their index (e.g., from $u_i$, neighbor $v_j$ is explored before $v_l$ if $j < l$). Once a single augmenting path is found, the matching is augmented, and the iteration ends. The process repeats until no more augmenting paths can be found.\n\n**Algorithm B (Hopcroft-Karp):** This algorithm proceeds in phases (which we will call iterations). In each iteration, it first uses a Breadth-First Search (BFS) to determine the length of the shortest augmenting path(s). Then, it uses a Depth-First Search (DFS) to find a maximal set of vertex-disjoint augmenting paths of that specific length. The matching is then augmented with all paths found in this set. The iteration ends, and the process repeats.\n\nCalculate the ratio $\\frac{N_A}{N_B}$, where $N_A$ is the total number of iterations required by Algorithm A to find a maximum matching, and $N_B$ is the total number of iterations required by Algorithm B.", "solution": "We instantiate the graph for $k=5$:\n- $U=\\{u_{1},u_{2},u_{3},u_{4},u_{5},u_{6}\\}$ and $V=\\{v_{1},v_{2},v_{3},v_{4},v_{5},v_{6}\\}$.\n- $E_{1}=\\{(u_{i},v_{i}) \\mid 1 \\leq i \\leq 5\\}$, $E_{2}=\\{(u_{i},v_{i+1}) \\mid 1 \\leq i \\leq 4\\}$, $E_{3}=\\{(u_{6},v_{1}),(u_{5},v_{6})\\}$, and $E=E_{1}\\cup E_{2}\\cup E_{3}$.\n\nFirst, the maximum matching size equals $6$ because the perfect matching\n$$\\{(u_{6},v_{1}),(u_{1},v_{2}),(u_{2},v_{3}),(u_{3},v_{4}),(u_{4},v_{5}),(u_{5},v_{6})\\}$$\nexists.\n\nAlgorithm A (simple augmenting path, DFS, one path per iteration, starting free $u$ in ascending order and visiting neighbors in ascending order):\n- Start with the empty matching. Iteration $1$: from $u_{1}$, the first neighbor visited is $v_{1}$, which is free, so we augment by $(u_{1},v_{1})$.\n- Iteration $2$: from the next free $u$, namely $u_{2}$, the first neighbor visited is $v_{2}$ (free), so augment by $(u_{2},v_{2})$.\n- Iteration $3$: from $u_{3}$, augment by $(u_{3},v_{3})$.\n- Iteration $4$: from $u_{4}$, augment by $(u_{4},v_{4})$.\n- Iteration $5$: from $u_{5}$, neighbors are $v_{5}$ then $v_{6}$; $v_{5}$ is free, so augment by $(u_{5},v_{5})$.\n\nAfter these $5$ iterations, the matching is $M=\\{(u_{1},v_{1}),(u_{2},v_{2}),(u_{3},v_{3}),(u_{4},v_{4}),(u_{5},v_{5})\\}$; the free vertices are $u_{6}$ and $v_{6}$. Iteration $6$: starting from $u_{6}$, DFS follows the unique alternating chain (using unmatched from $U$ to $V$, matched from $V$ to $U$) to the free $v_{6}$:\n$$u_{6}-v_{1}-u_{1}-v_{2}-u_{2}-v_{3}-u_{3}-v_{4}-u_{4}-v_{5}-u_{5}-v_{6}.$$\nThis is an augmenting path of length $11$ edges. Augmenting along it produces the perfect matching $\\{(u_{6},v_{1}),(u_{1},v_{2}),(u_{2},v_{3}),(u_{3},v_{4}),(u_{4},v_{5}),(u_{5},v_{6})\\}$. Thus Algorithm A uses\n$$N_{A}=6.$$\n\nAlgorithm B (Hopcroftâ€“Karp, phases consisting of a BFS to the shortest augmenting paths and a DFS to find a maximal set of vertex-disjoint augmenting paths of that length):\n- Phase $1$ BFS: all $u \\in U$ are free; every neighbor in $V$ is reached at distance $1$, so the shortest augmenting paths have length $1$. The DFS that finds a maximal set of vertex-disjoint shortest augmenting paths, when processing free $u$ in ascending order and neighbors in ascending order, selects\n$$\\{(u_{1},v_{1}),(u_{2},v_{2}),(u_{3},v_{3}),(u_{4},v_{4}),(u_{5},v_{5})\\},$$\nleaving $u_{6}$ unmatched because its only neighbor $v_{1}$ is already used in this set. This set is maximal among length-$1$ paths. After augmentation, the matching is $M=\\{(u_{1},v_{1}),\\dots,(u_{5},v_{5})\\}$.\n- Phase $2$ BFS: the only free vertices are $u_{6}$ and $v_{6}$. The BFS layering reveals the unique shortest augmenting path\n$$u_{6}-v_{1}-u_{1}-v_{2}-u_{2}-v_{3}-u_{3}-v_{4}-u_{4}-v_{5}-u_{5}-v_{6},$$\nof length $11$ edges. The DFS finds this single path, and augmentation yields the perfect matching.\n\nTherefore,\n$$N_{B}=2.$$\n\nThe requested ratio is\n$$\\frac{N_{A}}{N_{B}}=\\frac{6}{2}=3.$$", "answer": "$$\\boxed{3}$$", "id": "1512380"}, {"introduction": "Real-world networks are often dynamic, changing as new connections form. This final practice explores how to efficiently handle such updates without recomputing everything from the ground up. Given a maximum matching in a graph, your task is to determine the new maximum matching size after a single edge is added. This problem reinforces the central role of the augmenting path, the key structure that the Hopcroft-Karp algorithm is designed to find, and shows its utility in an incremental update scenario [@problem_id:1512347].", "problem": "Consider a bipartite graph $G = (U \\cup V, E)$, where the two vertex partitions are $U = \\{u_1, u_2, u_3, u_4, u_5\\}$ and $V = \\{v_1, v_2, v_3, v_4, v_5\\}$. The set of edges is $E = \\{(u_1, v_2), (u_2, v_3), (u_4, v_5), (u_2, v_2), (u_3, v_3), (u_4, v_4)\\}$.\n\nYou are given that the set $M = \\{(u_2, v_2), (u_3, v_3), (u_4, v_4)\\}$ is a maximum matching for the graph $G$.\n\nNow, a single new edge, $e' = (u_3, v_4)$, is added to the graph, forming a new graph $G' = (U \\cup V, E \\cup \\{e'\\})$.\n\nWhat is the size of a maximum matching in the new graph $G'$?\n\nA) 2\n\nB) 3\n\nC) 4\n\nD) 5\n\nE) 6", "solution": "We are given a bipartite graph $G=(U\\cup V,E)$ with $U=\\{u_{1},u_{2},u_{3},u_{4},u_{5}\\}$, $V=\\{v_{1},v_{2},v_{3},v_{4},v_{5}\\}$, and \n$$E=\\{(u_{1},v_{2}),(u_{2},v_{3}),(u_{4},v_{5}),(u_{2},v_{2}),(u_{3},v_{3}),(u_{4},v_{4})\\}.$$\nThe matching $M=\\{(u_{2},v_{2}),(u_{3},v_{3}),(u_{4},v_{4})\\}$ is maximum in $G$, so $|M|=3$. In $M$, the unmatched vertices are $u_{1},u_{5}$ in $U$ and $v_{1},v_{5}$ in $V$.\n\nA new edge $e'=(u_{3},v_{4})$ is added, forming $G'$. To determine whether the maximum matching size increases, we look for an $M$-augmenting path in $G'$. By definition (Berge's theorem), if there exists an $M$-augmenting path, then there is a matching larger than $M$.\n\nConsider the path\n$$u_{1}-v_{2}-u_{2}-v_{3}-u_{3}-v_{4}-u_{4}-v_{5}.$$\nAlong this path, the edges alternate between non-matching and matching with respect to $M$:\n- $(u_{1},v_{2})\\notin M$,\n- $(u_{2},v_{2})\\in M$,\n- $(u_{2},v_{3})\\notin M$,\n- $(u_{3},v_{3})\\in M$,\n- $(u_{3},v_{4})=e'\\notin M$,\n- $(u_{4},v_{4})\\in M$,\n- $(u_{4},v_{5})\\notin M$.\n\nThis path starts at the unmatched $u_{1}$ and ends at the unmatched $v_{5}$, so it is an $M$-augmenting path in $G'$. Augmenting $M$ along this path (taking the symmetric difference with its edges) yields a new matching\n$$M'=\\{(u_{1},v_{2}),(u_{2},v_{3}),(u_{3},v_{4}),(u_{4},v_{5})\\},$$\nwhich has size $|M'|=4$.\n\nTo see that no matching of size $5$ is possible, observe that $u_{5}$ has no incident edges and $v_{1}$ has no incident edges in $G'$, so neither can be matched. Therefore any matching can include at most $4$ edges. Hence the maximum matching size in $G'$ is exactly $4$.\n\nThus, the correct option is $C$.", "answer": "$$\\boxed{C}$$", "id": "1512347"}]}