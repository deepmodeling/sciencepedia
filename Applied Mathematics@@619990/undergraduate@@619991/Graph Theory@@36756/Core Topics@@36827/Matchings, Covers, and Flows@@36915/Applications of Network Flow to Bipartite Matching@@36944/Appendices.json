{"hands_on_practices": [{"introduction": "We begin with a classic scenario that directly models the concept of bipartite matching: the assignment problem. This exercise asks you to find the maximum number of successful pairings between two distinct sets—students and projects—based on a list of preferences. By translating this real-world situation into a bipartite graph, you can apply matching algorithms to find an optimal solution, a fundamental skill in resource allocation [@problem_id:1481302].", "problem": "The computer science department at a university is allocating final year projects to its students. There are five students: Alex, Ben, Chloe, David, and Emily. There are also five available projects, identified as P1, P2, P3, P4, and P5. Each project can be assigned to at most one student, and each student can be assigned at most one project.\n\nThe department wants to assign as many students as possible to a project they have expressed interest in. The students' preferences are as follows:\n- Alex is interested in projects P1 and P2.\n- Ben is interested in project P1.\n- Chloe is interested in projects P2 and P3.\n- David is interested in projects P3 and P4.\n- Emily is interested in project P3.\n\nWhat is the maximum number of students that can be assigned to a project from their preference list?", "solution": "We model the situation as a bipartite graph $G=(U,V,E)$ where the left part $U$ is the set of students and the right part $V$ is the set of projects. Specifically,\n$$\nU=\\{\\text{Alex},\\ \\text{Ben},\\ \\text{Chloe},\\ \\text{David},\\ \\text{Emily}\\},\\quad V=\\{\\text{P1},\\ \\text{P2},\\ \\text{P3},\\ \\text{P4},\\ \\text{P5}\\}.\n$$\nEdges represent expressed interest:\n$$\nE=\\{(\\text{Alex},\\text{P1}),(\\text{Alex},\\text{P2}),(\\text{Ben},\\text{P1}),(\\text{Chloe},\\text{P2}),(\\text{Chloe},\\text{P3}),(\\text{David},\\text{P3}),(\\text{David},\\text{P4}),(\\text{Emily},\\text{P3})\\}.\n$$\nA matching $M\\subseteq E$ assigns each student to at most one project and each project to at most one student. We seek to maximize $|M|$.\n\nUpper bound: Let $V'=\\{\\text{projects with at least one incident edge}\\}=\\{\\text{P1},\\text{P2},\\text{P3},\\text{P4}\\}$. Since $\\text{P5}$ has no interested students, any matching can use only projects from $V'$, hence\n$$\n|M| \\leq |V'| = 4.\n$$\nEquivalently, by Hall’s theorem, for the subset $S=U$ we have $N(S)=V'$ with $|N(S)|=4<|S|=5$, so a matching of size $5$ is impossible.\n\nConstruction achieving the bound: We exhibit a matching of size $4$:\n$$\nM=\\{(\\text{David},\\text{P4}),\\ (\\text{Emily},\\text{P3}),\\ (\\text{Chloe},\\text{P2}),\\ (\\text{Ben},\\text{P1})\\}.\n$$\nEach pair lies in $E$, no student or project is repeated, and $|M|=4$. Since $4$ is both an upper bound and is attained, the maximum number of students that can be assigned to a project from their preference list is $4$.", "answer": "$$\\boxed{4}$$", "id": "1481302"}, {"introduction": "Moving beyond direct applications, many problems can be solved by uncovering a hidden bipartite structure, and this exercise challenges you to solve a geometric tiling puzzle by reframing it as a graph problem [@problem_id:1481314]. The key insight lies in using a coloring scheme to partition the board's squares into two sets, demonstrating that placing dominoes is equivalent to finding a matching in the resulting bipartite graph. This practice illustrates the power of abstraction in problem-solving.", "problem": "An 8x8 chessboard is modified by removing a specific set of its squares. A square is identified by its row and column coordinates, $(r, c)$, where $1 \\le r, c \\le 8$. The set of all squares $(r, c)$ for which $r$ is an even number and $c$ is an odd number are removed from the board. What is the maximum number of non-overlapping dominoes that can be placed on the remaining squares of the board? A single domino must cover exactly two squares that are adjacent by sharing a common edge.", "solution": "Color the $8 \\times 8$ board by parity: declare a square $(r,c)$ black if $r+c$ is even and white if $r+c$ is odd. Any domino placed on adjacent squares covers exactly one black and one white square, since adjacent squares have opposite parity.\n\nThe removed set is\n$$\nS=\\{(r,c): r \\text{ even},\\, c \\text{ odd}\\}.\n$$\nFor $(r,c) \\in S$, $r+c$ is odd, so every removed square is white. Initially the board has $32$ white and $32$ black squares. The number of removed squares is\n$$\n|S|=4 \\times 4=16,\n$$\nsince there are $4$ even rows and $4$ odd columns. Hence the remaining counts are\n$$\n\\text{white}_{\\text{remain}}=32-16=16, \\quad \\text{black}_{\\text{remain}}=32.\n$$\nBecause each domino covers one white and one black square, the number of dominoes is at most\n$$\n\\min(16,32)=16.\n$$\n\nTo attain $16$, explicitly tile as follows. The remaining white squares are exactly those with $r$ odd and $c$ even. For each such white square $(r,c)$, place a horizontal domino covering $(r,c-1)$ and $(r,c)$. The neighbor $(r,c-1)$ is black because $(r+c-1)$ is even, it lies on the board since $c \\in \\{2,4,6,8\\}$ implies $c-1 \\in \\{1,3,5,7\\}$, and it was not removed because its row $r$ is odd. The mapping $(r,c) \\mapsto (r,c-1)$ is injective, so these dominoes are disjoint. Therefore $16$ dominoes can be placed.\n\nThus the maximum number of non-overlapping dominoes is $16$.", "answer": "$$\\boxed{16}$$", "id": "1481314"}, {"introduction": "Bipartite matching's utility extends to solving complex scheduling and sequencing problems, and this practice explores how to determine the minimum resources needed for a set of tasks with prerequisite dependencies [@problem_id:1481321]. The solution hinges on Dilworth's Theorem, a profound result that connects the minimum path cover of a directed acyclic graph (DAG) to the maximum matching in an associated bipartite graph. This exercise showcases the deep theoretical connections within graph theory and their practical applications.", "problem": "A research team at a specialized laboratory is fabricating a new type of quantum processing unit. The fabrication process is broken down into a set of 10 distinct tasks, labeled A through J. Due to the nature of the materials and processes involved, certain tasks must be completed before others can begin. These prerequisite dependencies, which represent direct \"must precede\" relationships, are as follows:\n\n*   Task A must be completed before tasks C and D.\n*   Task B must be completed before tasks D and E.\n*   Task C must be completed before tasks F and G.\n*   Task D must be completed before tasks G and H.\n*   Task E must be completed before tasks H and I.\n*   Task G must be completed before task J.\n*   Task H must be completed before task J.\n\nThe laboratory can run multiple fabrication lines in parallel. Each line can execute a sequence of tasks, one at a time, as long as the prerequisite ordering is respected for all tasks assigned to that line. To optimize resource usage, the team wants to determine the absolute minimum number of parallel fabrication lines required to complete all 10 tasks. What is this minimum number?", "solution": "Model the prerequisite structure as a directed acyclic graph (DAG) with vertices $V=\\{A,B,C,D,E,F,G,H,I,J\\}$ and directed edges given by the prerequisite relations:\n$$\nA\\to C,\\quad A\\to D,\\quad B\\to D,\\quad B\\to E,\\quad C\\to F,\\quad C\\to G,\\quad D\\to G,\\quad D\\to H,\\quad E\\to H,\\quad E\\to I,\\quad G\\to J,\\quad H\\to J.\n$$\nThe minimum number of parallel fabrication lines that can execute all tasks in sequences consistent with the prerequisites equals the size of a minimum path cover by directed paths in this DAG. A standard theorem for DAGs states that the size of a minimum path cover equals\n$$\n|V|-\\nu,\n$$\nwhere $\\nu$ is the size of a maximum matching in the bipartite graph constructed as follows: take two copies of $V$, say $V_{L}$ and $V_{R}$, and for every edge $u\\to v$ in the DAG include a bipartite edge $u_{L}\\to v_{R}$.\n\nConstruct the bipartite edges corresponding to the prerequisites:\n$$\nA_{L}\\to C_{R},\\ A_{L}\\to D_{R};\\quad B_{L}\\to D_{R},\\ B_{L}\\to E_{R};\\quad C_{L}\\to F_{R},\\ C_{L}\\to G_{R};\n$$\n$$\nD_{L}\\to G_{R},\\ D_{L}\\to H_{R};\\quad E_{L}\\to H_{R},\\ E_{L}\\to I_{R};\\quad G_{L}\\to J_{R};\\quad H_{L}\\to J_{R}.\n$$\n\nUpper bound on $\\nu$: partition the right-side vertices by the limited left-side suppliers:\n- $\\{C_{R},D_{R}\\}$ can be matched only from $\\{A_{L},B_{L}\\}$, contributing at most $2$ matched rights.\n- $\\{F_{R},G_{R},H_{R},I_{R}\\}$ can be matched only from $\\{C_{L},D_{L},E_{L}\\}$, contributing at most $3$ matched rights.\n- $\\{J_{R}\\}$ can be matched only from $\\{G_{L},H_{L}\\}$, contributing at most $1$ matched right.\nHence\n$$\n\\nu\\leq 2+3+1=6.\n$$\n\nAchievability of $\\nu=6$: select the following matching of size $6$ with pairwise distinct left and right endpoints:\n$$\nA_{L}\\to C_{R},\\quad B_{L}\\to E_{R},\\quad C_{L}\\to F_{R},\\quad D_{L}\\to G_{R},\\quad E_{L}\\to I_{R},\\quad G_{L}\\to J_{R}.\n$$\nTherefore $\\nu=6$.\n\nWith $|V|=10$, the minimum path cover size is\n$$\n10-\\nu=10-6=4.\n$$\nAn explicit path cover of size $4$ using DAG edges is, for example, the four paths $A\\to C\\to F$, $B\\to E\\to I$, $D\\to G\\to J$, and $H$, which covers all $10$ tasks with $4$ directed paths. Hence, the absolute minimum number of parallel fabrication lines required is $4$.", "answer": "$$\\boxed{4}$$", "id": "1481321"}]}