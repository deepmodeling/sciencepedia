{"hands_on_practices": [{"introduction": "We begin our exploration with one of the most fundamental graph structures: the cycle. Finding the minimum number of vertices needed to cover every edge in a cycle graph, $C_n$, is a perfect starting point for building intuition. This exercise [@problem_id:1522358] introduces a core problem-solving technique: first, establishing a theoretical lower bound on the solution size, and then proving this bound is tight by constructing an explicit vertex cover that meets it.", "problem": "A circular park features a series of $n$ distinct lampposts, where $n \\ge 3$ is an integer. The lampposts are arranged in a circle and are labeled sequentially from $L_1$ to $L_n$. A straight sidewalk segment connects each lamppost $L_i$ to its adjacent lamppost $L_{i+1}$ for $i=1, \\ldots, n-1$. Additionally, a final sidewalk segment connects lamppost $L_n$ back to $L_1$, completing the circular pathway.\n\nTo ensure the entire pathway is secure at night, security cameras must be installed. A camera can only be placed at the top of a lamppost. A single camera placed at lamppost $L_i$ is capable of monitoring all sidewalk segments directly connected to $L_i$. The objective is to determine the minimum number of cameras needed to monitor every sidewalk segment in the park.\n\nFind a single, concise, closed-form mathematical expression for this minimum number of cameras as a function of $n$.", "solution": "Model the park as the cycle graph on $n$ vertices, with lampposts $L_{1},\\ldots,L_{n}$ as vertices and sidewalk segments as edges $(L_{i},L_{i+1})$ for $i=1,\\ldots,n-1$ and $(L_{n},L_{1})$. Placing a camera at $L_{i}$ covers exactly the two edges incident to $L_{i}$. Hence the task is to find a minimum vertex cover of the cycle, i.e., a smallest set of vertices that meets every edge.\n\nLet $k$ be the minimum number of cameras. Since each camera covers at most $2$ sidewalk segments and there are $n$ segments in total, we must have the counting bound\n$$\n2k \\ge n,\n$$\nwhich implies\n$$\nk \\ge \\frac{n}{2} \\quad \\Rightarrow \\quad k \\ge \\left\\lceil \\frac{n}{2} \\right\\rceil.\n$$\n\nTo show this lower bound is tight, construct a placement with exactly $\\left\\lceil \\frac{n}{2} \\right\\rceil$ cameras that covers all edges. Choose cameras on every other lamppost around the cycle. If $n$ is even, selecting $L_{1},L_{3},\\ldots,L_{n-1}$ gives $n/2$ cameras and every edge has an endpoint among these. If $n$ is odd, selecting $L_{1},L_{3},\\ldots,L_{n}$ gives $(n+1)/2$ cameras and again every edge has at least one selected endpoint. Therefore,\n$$\nk \\le \\left\\lceil \\frac{n}{2} \\right\\rceil.\n$$\n\nCombining the lower and upper bounds yields\n$$\nk = \\left\\lceil \\frac{n}{2} \\right\\rceil.\n$$", "answer": "$$\\boxed{\\left\\lceil \\frac{n}{2} \\right\\rceil}$$", "id": "1522358"}, {"introduction": "When faced with a hard problem like Minimum Vertex Cover, a common impulse is to use a \"greedy\" strategy that makes the most obvious choice at each step. This practice [@problem_id:1522337] asks you to critically examine one such heuristic, where you repeatedly select the vertex with the highest remaining degree. By analyzing a graph specifically designed to challenge this algorithm, you will discover that locally optimal choices do not always lead to a globally optimal solution, offering a crucial insight into algorithmic complexity.", "problem": "In graph theory, a vertex cover of a graph is a subset of its vertices such that every edge in the graph is incident to at least one vertex in the subset. A minimum vertex cover is a vertex cover with the smallest possible number of vertices.\n\nOne common heuristic for finding a small vertex cover is the \"Max-Degree Greedy Algorithm\". This algorithm works as follows:\n1. Initialize an empty vertex cover, $\\mathcal{C}$.\n2. While the graph still has edges:\n   a. Select a vertex `v` that has the highest current degree in the graph.\n   b. Add `v` to the cover $\\mathcal{C}$.\n   c. Remove `v` and all edges incident to it from the graph.\n3. Return $\\mathcal{C}$ as the vertex cover.\n\nIn case of a tie for the highest degree, any of the tied vertices may be chosen. While this algorithm is simple, it does not always produce a minimum vertex cover.\n\nConsider a specific graph $G_k$ constructed for an integer $k \\ge 3$. The graph has three disjoint sets of vertices: $V_A = \\{a\\}$, $V_B = \\{b_1, b_2, \\dots, b_k\\}$, and $V_C = \\{c_1, c_2, \\dots, c_k\\}$.\nThe edges of the graph are defined as follows:\n- For each $i$ from $1$ to $k$, there is an edge connecting the vertex $a$ to the vertex $b_i$.\n- For each $i$ from $1$ to $k$, there is an edge connecting the vertex $b_i$ to the vertex $c_i$.\nThere are no other edges.\n\nLet $\\mathcal{C}_G$ be the vertex cover for $G_k$ produced by the Max-Degree Greedy Algorithm, and let $\\mathcal{C}^*$ be a true minimum vertex cover for $G_k$. Determine the ratio of their sizes, $|\\mathcal{C}_G| / |\\mathcal{C}^*|$. Express your answer as a function of $k$.", "solution": "We analyze the graph $G_{k}$ with vertex sets $V_{A}=\\{a\\}$, $V_{B}=\\{b_{1},\\dots,b_{k}\\}$, and $V_{C}=\\{c_{1},\\dots,c_{k}\\}$, and edges $\\{(a,b_{i}) : i=1,\\dots,k\\}$ and $\\{(b_{i},c_{i}) : i=1,\\dots,k\\}$. The degrees are $\\deg(a)=k$, $\\deg(b_{i})=2$, and $\\deg(c_{i})=1$.\n\nGreedy cover size $|\\mathcal{C}_{G}|$:\n- By the Max-Degree Greedy Algorithm, at the first iteration the unique maximum-degree vertex is $a$ (since $k \\ge 3$), so $a$ is selected. This adds $1$ to the cover.\n- Removing $a$ and its incident edges leaves the $k$ disjoint edges $\\{(b_{i},c_{i}) : i=1,\\dots,k\\}$, a matching. In this residual graph, every remaining vertex has degree $1$, so each subsequent greedy choice selects one endpoint of one remaining edge and removes exactly that single edge.\n- Since there are $k$ such edges, exactly $k$ additional selections are needed to remove them all. Therefore,\n$$\n|\\mathcal{C}_{G}| = 1 + k.\n$$\n\nMinimum cover size $|\\mathcal{C}^{*}|$:\n- The $k$ edges $\\{(b_{i},c_{i})\\}$ form a matching. Any vertex cover must include at least one endpoint of each of these $k$ pairwise disjoint edges, hence\n$$\n|\\mathcal{C}^{*}| \\ge k.\n$$\n- This lower bound is attained by selecting all vertices $\\{b_{1},\\dots,b_{k}\\}$, which covers every edge $(a,b_{i})$ and $(b_{i},c_{i})$. Thus,\n$$\n|\\mathcal{C}^{*}| = k.\n$$\n\nRatio:\n$$\n\\frac{|\\mathcal{C}_{G}|}{|\\mathcal{C}^{*}|} = \\frac{k+1}{k}.\n$$", "answer": "$$\\boxed{\\frac{k+1}{k}}$$", "id": "1522337"}, {"introduction": "While the Minimum Vertex Cover problem is computationally difficult for general graphs, it can be solved efficiently for certain important graph classes. This final practice [@problem_id:1522363] focuses on trees, which are connected graphs without cycles. Here, you will develop a systematic, recursive algorithm to find the exact size of a minimum vertex cover, demonstrating the power of dynamic programming and how exploiting a graph's structure can lead to elegant and efficient solutions.", "problem": "In graph theory, a **vertex cover** of a graph is a subset of its vertices such that every edge of the graph is incident to at least one vertex in the subset. A **minimum vertex cover** is a vertex cover with the smallest possible number of vertices.\n\nA **tree** is a connected graph that contains no cycles.\n\nConsider a specific tree, $T$, defined by a set of vertices $V = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13\\}$ and a set of edges $E$ consisting of the following pairs:\n(1, 2), (1, 3), (1, 4), (2, 5), (2, 6), (3, 7), (4, 8), (4, 9), (7, 10), (7, 11), (8, 12), (8, 13).\n\nDetermine the size of the minimum vertex cover for this tree $T$.", "solution": "A minimum vertex cover on a tree can be computed by dynamic programming on a rooted tree. Root $T$ at vertex $1$ and for each vertex $v$ define:\n- $\\text{in}(v)$: the minimum size of a vertex cover of the subtree rooted at $v$ given that $v$ is included in the cover.\n- $\\text{out}(v)$: the minimum size of a vertex cover of the subtree rooted at $v$ given that $v$ is excluded from the cover.\n\nFor any vertex $v$ with children $\\text{ch}(v)$, the standard recurrences are:\n$$\n\\text{in}(v)=1+\\sum_{u\\in \\text{ch}(v)}\\min\\big(\\text{in}(u),\\text{out}(u)\\big),\\qquad\n\\text{out}(v)=\\sum_{u\\in \\text{ch}(v)}\\text{in}(u).\n$$\nFor a leaf $v$ (i.e., $\\text{ch}(v)=\\varnothing$), the base values are\n$$\n\\text{in}(v)=1,\\qquad \\text{out}(v)=0.\n$$\n\nFrom the given edges, choose children sets consistent with rooting at $1$:\n$$\n\\text{ch}(1)=\\{2,3,4\\},\\quad \\text{ch}(2)=\\{5,6\\},\\quad \\text{ch}(3)=\\{7\\},\\quad \\text{ch}(4)=\\{8,9\\},\n$$\n$$\n\\text{ch}(7)=\\{10,11\\},\\quad \\text{ch}(8)=\\{12,13\\},\\quad \\text{and}\\quad 5,6,9,10,11,12,13\\ \\text{are leaves}.\n$$\n\nCompute bottom-up.\n\nFor each leaf $v\\in\\{5,6,9,10,11,12,13\\}$:\n$$\n\\text{in}(v)=1,\\quad \\text{out}(v)=0.\n$$\n\nFor $v=2$ with children $5,6$:\n$$\n\\text{in}(2)=1+\\min(1,0)+\\min(1,0)=1,\\qquad \\text{out}(2)=1+1=2.\n$$\n\nFor $v=7$ with children $10,11$:\n$$\n\\text{in}(7)=1+\\min(1,0)+\\min(1,0)=1,\\qquad \\text{out}(7)=1+1=2.\n$$\n\nFor $v=8$ with children $12,13$:\n$$\n\\text{in}(8)=1+\\min(1,0)+\\min(1,0)=1,\\qquad \\text{out}(8)=1+1=2.\n$$\n\nFor $v=3$ with child $7$:\n$$\n\\text{in}(3)=1+\\min\\big(\\text{in}(7),\\text{out}(7)\\big)=1+\\min(1,2)=2,\\qquad \\text{out}(3)=\\text{in}(7)=1.\n$$\n\nFor $v=4$ with children $8,9$:\n$$\n\\text{in}(4)=1+\\min\\big(\\text{in}(8),\\text{out}(8)\\big)+\\min\\big(\\text{in}(9),\\text{out}(9)\\big)=1+\\min(1,2)+\\min(1,0)=2,\n$$\n$$\n\\text{out}(4)=\\text{in}(8)+\\text{in}(9)=1+1=2.\n$$\n\nFinally, for the root $v=1$ with children $2,3,4$:\n$$\n\\text{in}(1)=1+\\min\\big(\\text{in}(2),\\text{out}(2)\\big)+\\min\\big(\\text{in}(3),\\text{out}(3)\\big)+\\min\\big(\\text{in}(4),\\text{out}(4)\\big)\n=1+\\min(1,2)+\\min(2,1)+\\min(2,2)=5,\n$$\n$$\n\\text{out}(1)=\\text{in}(2)+\\text{in}(3)+\\text{in}(4)=1+2+2=5.\n$$\n\nThe size of a minimum vertex cover of $T$ is $\\min\\big(\\text{in}(1),\\text{out}(1)\\big)=5$.", "answer": "$$\\boxed{5}$$", "id": "1522363"}]}