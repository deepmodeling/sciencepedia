{"hands_on_practices": [{"introduction": "The first step in mastering matching theory is to grasp the critical difference between a *maximal* and a *maximum* matching. While a maximum matching is always maximal, the converse is not true. This exercise [@problem_id:1521207] challenges you to explore this distinction by constructing a scenario where a maximal matching is significantly smaller than the maximum possible, demonstrating why simply adding edges until no more can be added is not enough to guarantee optimality.", "problem": "In graph theory, a **matching** in a graph is a set of edges where no two edges share a common vertex. A matching is called **maximal** if it cannot be extended by adding any other edge available in the graph. In other words, every edge in the graph that is not in the maximal matching has at least one endpoint in common with an edge that is in the matching. A matching is called **maximum** if it is a matching that contains the largest possible number of edges for the given graph. Note that a maximum matching is always maximal, but a maximal matching is not necessarily maximum.\n\nConsider a simple graph $G$ that is constructed as the disjoint union of 13 identical copies of the path graph $P_4$. A path graph $P_4$ consists of 4 vertices and 3 edges, forming a simple path (e.g., vertices $v_1, v_2, v_3, v_4$ and edges $(v_1, v_2), (v_2, v_3), (v_3, v_4)$).\n\nDetermine the size of the smallest possible maximal matching in the graph $G$.", "solution": "Let $G$ be the disjoint union of $13$ copies of $P_4$. For a disjoint union of graphs, a matching $M$ in $G$ is maximal if and only if its restriction to each connected component is a maximal matching in that component. The forward direction holds because if $M$ were maximal in $G$ but not maximal in some component, an additional edge from that component could be added to $M$, contradicting maximality. The converse holds because if each component has a maximal matching, then no further edge in any component can be added to $M$, so $M$ is maximal in $G$.\n\nTherefore, the size of the smallest maximal matching in $G$ equals the sum over components of the smallest sizes of maximal matchings in each copy of $P_4$. Since all $13$ copies are identical, it suffices to find the smallest size of a maximal matching in $P_4$.\n\nLabel the vertices of $P_4$ as $v_1, v_2, v_3, v_4$ with edges $(v_1, v_2)$, $(v_2, v_3)$, $(v_3, v_4)$. Consider matchings:\n- A matching of size $0$ is not maximal, since an edge such as $(v_2, v_3)$ can be added.\n- For size $1$, take $M=\\{(v_2, v_3)\\}$. The remaining edges $(v_1, v_2)$ and $(v_3, v_4)$ each share a vertex with $(v_2, v_3)$, so no additional edge can be added; hence $M$ is maximal. If instead one chooses $\\{(v_1, v_2)\\}$ or $\\{(v_3, v_4)\\}$, then the other endpoint edge $(v_3, v_4)$ or $(v_1, v_2)$ can be added, so these are not maximal.\n\nThus, the smallest size of a maximal matching in $P_4$ is $1$. Summing over $13$ disjoint copies gives a smallest possible maximal matching in $G$ of size $13 \\times 1 = 13$.", "answer": "$$\\boxed{13}$$", "id": "1521207"}, {"introduction": "The key to transforming a non-maximum matching into a larger one lies in finding a specific structure: an augmenting path. This exercise [@problem_id:1521208] provides a clear and intuitive setting—a simple path graph—to practice identifying these crucial paths. By working through this problem, you will solidify your understanding of alternating paths and learn to spot the unique properties of an augmenting path, which always begins and ends at unmatched vertices.", "problem": "A distributed computing network consists of a linear array of $N=100$ processing nodes, labeled sequentially from $v_1$ to $v_{100}$. A node $v_i$ is connected only to nodes $v_{i-1}$ (for $i>1$) and $v_{i+1}$ (for $i<100$), forming a path graph $P_{100}$. A set of dedicated high-speed communication links, denoted by $M$, is established between pairs of adjacent nodes. A link exists in $M$ between node $v_i$ and node $v_{i+1}$ if and only if the index $i$ is an even integer. This set of links $M$ constitutes a matching, meaning no node is an endpoint of more than one link in $M$.\n\nFor a given matching, a path is called an *alternating path* if its edges alternately belong to the matching and do not belong to the matching. An *augmenting path* with respect to $M$ is a simple alternating path whose start and end nodes are both \"unmatched\" (i.e., not an endpoint of any edge in $M$).\n\nGiven this specific configuration of nodes and links, determine the length of the longest possible augmenting path. The length of a path is defined as the number of edges it contains.", "solution": "Let the path graph be $P_{100}$ with vertices $v_1, \\dots, v_{100}$ and edges $(v_i, v_{i+1})$ for $i=1, \\dots, 99$. The matching $M$ is defined by\n$$\nM=\\{(v_i, v_{i+1}) : i \\text{ is even, } 2 \\leq i \\leq 98\\}.\n$$\nA vertex is unmatched iff it is not incident to any edge in $M$. The edge $(v_1, v_2)$ has index $i=1$ (odd) and the edge $(v_{99}, v_{100})$ has index $i=99$ (odd). Since these edges are not in $M$ and no other edges are incident to $v_1$ or $v_{100}$, both $v_1$ and $v_{100}$ are unmatched.\n\nConsider the simple path\n$$\n\\gamma=(v_1, v_2, \\dots, v_{100}).\n$$\nIts length is the number of edges it contains:\n$$\n\\ell(\\gamma)=100-1=99.\n$$\nFor each $i \\in \\{1, \\dots, 99\\}$, the edge $(v_i, v_{i+1})$ belongs to $M$ if and only if $i$ is even. Therefore, as $i$ increases by $1$ along $\\gamma$, the membership of $(v_i, v_{i+1})$ in $M$ alternates (since parity alternates). The first edge $(v_1, v_2)$ is not in $M$ and the last edge $(v_{99}, v_{100})$ is not in $M$. Since its endpoints $v_1$ and $v_{100}$ are unmatched, $\\gamma$ is an augmenting path.\n\nNo augmenting path (indeed, no simple path) in $P_{100}$ can have more than $99$ edges, because a simple path in a path graph on $100$ vertices has maximum length $100-1=99$. Therefore, the longest possible augmenting path has length $99$.", "answer": "$$\\boxed{99}$$", "id": "1521208"}, {"introduction": "Finding an augmenting path is more than just a diagnostic tool; it is the central mechanism for improving a matching. This practical exercise [@problem_id:1521183] simulates a real-world resource allocation problem, guiding you through the complete augmenting path algorithm. You will start with an initial matching, identify an augmenting path, and then use it to construct a new, larger matching, directly applying theory to solve a tangible problem.", "problem": "A tech incubator is organizing a mentorship program. They have a group of six junior developers and a group of six senior mentors. To ensure productive pairings, a developer can only be paired with a mentor if they share a common technological stack. Each developer can be paired with at most one mentor, and each mentor with at most one developer.\n\nThe developers are labeled $D_1, D_2, D_3, D_4, D_5$, and $D_6$.\nThe mentors are labeled $M_1, M_2, M_3, M_4, M_5$, and $M_6$.\n\nThe list of possible pairings based on skill compatibility is as follows:\n- $D_1$ is compatible with $M_1$.\n- $D_2$ is compatible with $M_1$ and $M_2$.\n- $D_3$ is compatible with $M_2$ and $M_3$.\n- $D_4$ is compatible with $M_4$.\n- $D_5$ is compatible with $M_5$.\n- $D_6$ is compatible with $M_5$.\n\nAn initial set of pairings has been proposed: $\\{ (D_2, M_1), (D_3, M_2), (D_4, M_4), (D_5, M_5) \\}$.\nThis initial plan leaves some developers and mentors unpaired. It is possible to create a new set of pairings that includes one more pair than the initial set, thereby increasing the total number of people involved in the program.\n\nWhich of the following represents a valid and improved set of pairings containing exactly one more pair than the initial set?\n\nA. $\\{ (D_1, M_1), (D_2, M_2), (D_3, M_3), (D_4, M_4), (D_5, M_5) \\}$\n\nB. $\\{ (D_2, M_1), (D_3, M_2), (D_4, M_4), (D_5, M_5), (D_6, M_5) \\}$\n\nC. $\\{ (D_1, M_1), (D_2, M_2), (D_4, M_4), (D_5, M_5) \\}$\n\nD. $\\{ (D_1, M_1), (D_3, M_3), (D_4, M_4), (D_5, M_5), (D_6, M_5) \\}$", "solution": "Model the situation as a bipartite graph with developers $\\{D_1,D_2,D_3,D_4,D_5,D_6\\}$ on one side and mentors $\\{M_1,M_2,M_3,M_4,M_5,M_6\\}$ on the other. The possible pairings (edges) based on compatibility are $(D_1, M_1)$, $(D_2, M_1)$, $(D_2, M_2)$, $(D_3, M_2)$, $(D_3, M_3)$, $(D_4, M_4)$, $(D_5, M_5)$, and $(D_6, M_5)$.\n\nThe initial matching is\n$$\nM_0=\\{(D_2,M_1),(D_3,M_2),(D_4,M_4),(D_5,M_5)\\},\n$$\nwith cardinality $|M_0|=4$. We seek a matching with exactly one more pair, i.e., a matching of size $5$. By the augmenting path method, if there exists an alternating path that starts and ends at unmatched vertices and alternates between non-matching and matching edges, then flipping the status of edges along this path increases the matching size by $1$.\n\nThe unmatched developers are $D_1$ and $D_6$. The unmatched mentors are $M_3$ and $M_6$. Let's start from an unmatched developer, $D_1$.\nThe edge $(D_1, M_1)$ is not in $M_0$.\nThe mentor $M_1$ is matched with $D_2$ via the edge $(D_2, M_1) \\in M_0$.\nThe developer $D_2$ is also compatible with $M_2$, and the edge $(D_2, M_2)$ is not in $M_0$.\nThe mentor $M_2$ is matched with $D_3$ via the edge $(D_3, M_2) \\in M_0$.\nThe developer $D_3$ is also compatible with $M_3$, and the edge $(D_3, M_3)$ is not in $M_0$.\nThe mentor $M_3$ is currently unmatched.\nThus we have found an augmenting path:\n$$\nD_1 - M_1 - D_2 - M_2 - D_3 - M_3\n$$\nTo augment the matching, we take the symmetric difference of $M_0$ with the set of edges in the path. This means we remove the path's matched edges from $M_0$ and add the path's non-matched edges to $M_0$.\n- Remove from $M_0$: $(D_2, M_1)$ and $(D_3, M_2)$.\n- Add to $M_0$: $(D_1, M_1)$, $(D_2, M_2)$, and $(D_3, M_3)$.\nThe unaffected pairs $(D_4, M_4)$ and $(D_5, M_5)$ remain. This yields the new matching:\n$$\nM_1=\\{(D_1,M_1),(D_2,M_2),(D_3,M_3),(D_4,M_4),(D_5,M_5)\\},\n$$\nwith $|M_1|=5$, exactly one more than $|M_0|$. Every pair in $M_1$ respects compatibility and no mentor or developer appears more than once.\n\nComparing with the options:\n- Option A matches $M_1$ exactly and is valid.\n- Option B contains both $(D_5, M_5)$ and $(D_6, M_5)$, violating the one-to-one constraint for $M_5$.\n- Option C has only $4$ pairs, not an increase in size.\n- Option D again assigns $M_5$ to two developers, $(D_5, M_5)$ and $(D_6, M_5)$, violating the one-to-one constraint.\n\nTherefore, the valid improved set is Option A.", "answer": "$$\\boxed{A}$$", "id": "1521183"}]}