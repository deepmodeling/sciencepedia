{"hands_on_practices": [{"introduction": "When first encountering perfect matchings in balanced bipartite graphs, a natural question arises: if every vertex has at least one connection, is that enough to guarantee a perfect matching? This exercise challenges that intuition directly. By finding a specific counterexample [@problem_id:1520060], you'll develop a deeper appreciation for the subtleties of graph structures and understand why stronger conditions, like Hall's Marriage Theorem, are necessary.", "problem": "In graph theory, a bipartite graph is a graph whose vertices can be divided into two disjoint and independent sets, $U$ and $V$, such that every edge connects a vertex in $U$ to one in $V$. The graph is called **balanced** if the two sets have the same number of vertices, i.e., $|U|=|V|$. A **perfect matching** in a balanced bipartite graph is a set of edges where no two edges share a common vertex, and every vertex in the graph is an endpoint of exactly one edge in the set.\n\nConsider the following proposition:\n\"For any balanced bipartite graph $G=(U \\cup V, E)$ with $|U|=|V| \\ge 1$, if the degree of every vertex in the graph is at least 1 (i.e., $\\deg(v) \\ge 1$ for all $v \\in U \\cup V$), then $G$ must have a perfect matching.\"\n\nYour task is to identify which one of the following graphs, described by their vertex sets and edge sets, serves as a counterexample to this proposition.\n\nA. Bipartite graph with partitions $U = \\{u_1, u_2\\}$ and $V = \\{v_1, v_2\\}$, and edge set $E = \\{(u_1, v_1), (u_1, v_2), (u_2, v_1), (u_2, v_2)\\}$.\n\nB. Bipartite graph with partitions $U = \\{u_1, u_2, u_3\\}$ and $V = \\{v_1, v_2\\}$, and edge set $E = \\{(u_1, v_1), (u_2, v_1), (u_3, v_2)\\}$.\n\nC. Bipartite graph with partitions $U = \\{u_1, u_2, u_3\\}$ and $V = \\{v_1, v_2, v_3\\}$, and edge set $E = \\{(u_1, v_1), (u_2, v_1), (u_3, v_2), (u_3, v_3)\\}$.\n\nD. Bipartite graph with partitions $U = \\{u_1, u_2, u_3\\}$ and $V = \\{v_1, v_2, v_3\\}$, and edge set $E = \\{(u_1, v_1), (u_2, v_2), (u_3, v_3)\\}$.", "solution": "We seek a counterexample to the proposition: a balanced bipartite graph $G=(U \\cup V,E)$ with $|U|=|V| \\ge 1$ and $\\deg(x) \\ge 1$ for all $x \\in U \\cup V$, yet $G$ has no perfect matching. By Hall's theorem, a bipartite graph has a perfect matching if and only if for every subset $S \\subseteq U$, the neighborhood satisfies $|N(S)| \\ge |S|$.\n\nOption A: $|U|=|V|=2$, and $E$ contains all four possible edges, so $G$ is $K_{2,2}$. Every vertex has degree at least $1$ and indeed there are perfect matchings (for instance, $\\{(u_{1},v_{1}),(u_{2},v_{2})\\}$). Hence A is not a counterexample.\n\nOption B: $|U|=3$ and $|V|=2$, so $|U| \\ne |V|$. The hypothesis $|U|=|V|$ fails, so B cannot be a counterexample to the stated proposition.\n\nOption C: $|U|=|V|=3$. Degrees are\n$$\n\\deg(u_{1})=1,\\quad \\deg(u_{2})=1,\\quad \\deg(u_{3})=2,\\quad \\deg(v_{1})=2,\\quad \\deg(v_{2})=1,\\quad \\deg(v_{3})=1,\n$$\nso $\\deg(x) \\ge 1$ for all vertices. However, $v_{2}$ and $v_{3}$ are both adjacent only to $u_{3}$, so any matching that covers both $v_{2}$ and $v_{3}$ would need to use $u_{3}$ twice, which is impossible. Equivalently, Hall's condition fails for $S=\\{u_{1},u_{2}\\}$ since\n$$\nN(\\{u_{1},u_{2}\\})=\\{v_{1}\\},\\quad |N(\\{u_{1},u_{2}\\})|=12=|\\{u_{1},u_{2}\\}|,\n$$\nso no perfect matching exists. Thus C satisfies the hypothesis but violates the conclusion, making it a counterexample.\n\nOption D: $|U|=|V|=3$, and $E=\\{(u_{1},v_{1}),(u_{2},v_{2}),(u_{3},v_{3})\\}$ is itself a perfect matching. Hence D is not a counterexample.\n\nTherefore, the counterexample is given by option C.", "answer": "$$\\boxed{C}$$", "id": "1520060"}, {"introduction": "One of the cornerstones of bipartite graph theory is Kőnig's theorem, which establishes a profound duality between the size of a maximum matching and the size of a minimum vertex cover. This practice problem [@problem_id:1521177] allows you to verify this theorem on a concrete example. Calculating both values will provide a tangible understanding of this elegant relationship and build foundational skills for analyzing graph properties.", "problem": "Consider a bipartite graph $G = (L \\cup R, E)$, where the disjoint sets of vertices are $L = \\{l_1, l_2, l_3, l_4, l_5\\}$ and $R = \\{r_1, r_2, r_3, r_4, r_5\\}$. The set of edges $E$ that connect vertices from $L$ to $R$ is given as:\n$E = \\{\\{l_1, r_2\\}, \\{l_1, r_4\\}, \\{l_2, r_1\\}, \\{l_2, r_3\\}, \\{l_3, r_2\\}, \\{l_3, r_5\\}, \\{l_4, r_3\\}, \\{l_4, r_4\\}, \\{l_5, r_5\\}\\}$.\n\nFor context, a *matching* in a graph is a set of edges where no two edges share a common vertex. A *maximum matching* is a matching that contains the largest possible number of edges. A *vertex cover* of a graph is a subset of vertices such that every edge is incident to at least one vertex in the subset. A *minimum vertex cover* is a vertex cover with the smallest possible cardinality.\n\nYour task is to determine two values for the graph G:\n1. The cardinality (size) of a maximum matching.\n2. The cardinality (size) of a minimum vertex cover.\n\nProvide your answer as a pair of integers, $(m, c)$, where $m$ is the cardinality of the maximum matching and $c$ is the cardinality of the minimum vertex cover.", "solution": "We are given a bipartite graph $G=(L \\cup R, E)$ with $L=\\{l_{1},l_{2},l_{3},l_{4},l_{5}\\}$ and $R=\\{r_{1},r_{2},r_{3},r_{4},r_{5}\\}$, and edges\n$$\nE=\\{\\{l_{1},r_{2}\\},\\{l_{1},r_{4}\\},\\{l_{2},r_{1}\\},\\{l_{2},r_{3}\\},\\{l_{3},r_{2}\\},\\{l_{3},r_{5}\\},\\{l_{4},r_{3}\\},\\{l_{4},r_{4}\\},\\{l_{5},r_{5}\\}\\}.\n$$\n\nTo find the cardinality $m$ of a maximum matching, note first that any matching in a bipartite graph has size at most $\\min(|L|,|R|)=5$, so $m \\leq 5$. We construct an explicit matching of size $5$ by selecting the following edges:\n$$\nM=\\{\\{l_{2},r_{1}\\},\\{l_{4},r_{3}\\},\\{l_{1},r_{4}\\},\\{l_{3},r_{2}\\},\\{l_{5},r_{5}\\}\\}.\n$$\nThese edges are pairwise vertex-disjoint: the left endpoints are $l_{2},l_{4},l_{1},l_{3},l_{5}$ (all distinct) and the right endpoints are $r_{1},r_{3},r_{4},r_{2},r_{5}$ (all distinct). Therefore $M$ is a matching of size $5$. Since $m \\leq 5$ and there exists a matching of size $5$, it follows that $m=5$.\n\nTo find the cardinality $c$ of a minimum vertex cover, use the general inequality that in any graph, the size of a minimum vertex cover is at least the size of a maximum matching, because each edge in a matching is disjoint and requires at least one distinct vertex to cover it. Hence $c \\geq m=5$. On the other hand, the set $L$ itself is a vertex cover, since every edge in $E$ is incident to a vertex in $L$. Therefore there exists a vertex cover of size $|L|=5$, which implies $c \\leq 5$. Combining both inequalities yields $c=5$. This also agrees with Kőnig's theorem, which states that in bipartite graphs the size of a maximum matching equals the size of a minimum vertex cover.\n\nThus the required pair is $(m,c)=(5,5)$.", "answer": "$$\\boxed{\\begin{pmatrix} 5  5 \\end{pmatrix}}$$", "id": "1521177"}, {"introduction": "Beyond their theoretical properties, we often need to find maximum matchings algorithmically; however, not all algorithms are created equal. This problem explores a scenario where a simple 'greedy' approach, which makes locally optimal choices, fails to produce a globally optimal solution [@problem_id:1520052]. By analyzing this specific case, you will quantify the performance gap and gain valuable insights into the design and limitations of greedy algorithms in optimization problems.", "problem": "In a large-scale distributed computing environment, a resource manager needs to assign tasks to processing nodes. For a given integer parameter $k \\ge 1$, the system consists of two sets of nodes: a set of $2k$ \"provider\" nodes $A$ and a set of $2k$ \"requester\" nodes $B$. The nodes are grouped into $k$ independent clusters, indexed from $1$ to $k$. For each index $i \\in \\{1, \\ldots, k\\}$, cluster $i$ consists of two provider nodes, $\\{a_{i,1}, a_{i,2}\\}$, and two requester nodes, $\\{b_{i,1}, b_{i,2}\\}$.\n\nThe compatibility between providers and requesters within any cluster $i$ is defined as follows, forming a bipartite graph:\n1.  **Direct Links**: Node $a_{i,1}$ can serve node $b_{i,1}$, and node $a_{i,2}$ can serve node $b_{i,2}$. These form the set of direct links.\n2.  **Backup Link**: Node $a_{i,1}$ can also serve node $b_{i,2}$. This forms the set of backup links.\nThere are no other compatibilities; specifically, nodes from different clusters cannot be connected.\n\nThe system uses a simple, deterministic greedy algorithm for assignment. The algorithm prioritizes backup links over direct links. It operates in two sequential phases:\n- **Phase 1**: The algorithm iterates through all possible backup links in the entire system. For each backup link $(u, v)$ it considers, if both node $u$ and node $v$ are currently unassigned, it assigns them to each other.\n- **Phase 2**: After completing Phase 1, the algorithm iterates through all possible direct links. For each direct link $(u, v)$ it considers, if both node $u$ and node $v$ are currently unassigned, it assigns them to each other.\n\nThe order of consideration of links within each phase does not affect the outcome for this specific system architecture. Let $N_{greedy}(k)$ be the total number of assignments made by this greedy algorithm, and let $N_{opt}(k)$ be the maximum possible number of assignments (the size of a maximum matching) for the system.\n\nDetermine the performance ratio $\\frac{N_{opt}(k)}{N_{greedy}(k)}$ for this system. The result is a constant value independent of $k$.", "solution": "The problem asks for the performance ratio of a specific greedy matching algorithm against an optimal matching on a specially constructed family of bipartite graphs. Let's analyze the number of assignments made by the greedy algorithm, $N_{greedy}(k)$, and the maximum possible number of assignments, $N_{opt}(k)$.\n\nFirst, let's formally define the bipartite graph $G_k = (L_k \\cup R_k, E_k)$ for a given $k \\ge 1$.\nThe two partitions of vertices are the provider nodes and requester nodes:\n$L_k = \\bigcup_{i=1}^{k} \\{a_{i,1}, a_{i,2}\\}$\n$R_k = \\bigcup_{i=1}^{k} \\{b_{i,1}, b_{i,2}\\}$\nThe size of each partition is $|L_k| = |R_k| = 2k$.\n\nThe edge set $E_k$ is composed of direct links and backup links.\nThe set of backup links is $E_{backup} = \\{ (a_{i,1}, b_{i,2}) \\mid i=1, \\ldots, k \\}$.\nThe set of direct links is $E_{direct} = \\{ (a_{i,1}, b_{i,1}), (a_{i,2}, b_{i,2}) \\mid i=1, \\ldots, k \\}$.\nThe total edge set is $E_k = E_{backup} \\cup E_{direct}$. The graph consists of $k$ disjoint identical components, one for each index $i$.\n\n**Step 1: Calculate the size of the greedy matching, $N_{greedy}(k)$.**\nThe greedy algorithm proceeds in two phases. Let $M_G$ denote the matching constructed by the algorithm.\n\n**Phase 1: Process Backup Links**\nThe algorithm considers all edges in $E_{backup}$. Let's consider the edge $(a_{i,1}, b_{i,2})$ for an arbitrary cluster $i$. Initially, all nodes are unassigned. Since the clusters are disjoint, the assignment within one cluster does not affect the initial state of another.\nFor each $i \\in \\{1, \\ldots, k\\}$, the algorithm considers the backup link $(a_{i,1}, b_{i,2})$. Both nodes $a_{i,1}$ and $b_{i,2}$ are unassigned, so this edge is added to the matching $M_G$. This happens for every cluster $i$.\nAfter Phase 1 is complete, the matching consists of all backup links:\n$M_G = \\{ (a_{i,1}, b_{i,2}) \\mid i=1, \\ldots, k \\}$.\nAt this point, the size of the matching is $k$.\nThe set of assigned nodes are:\n- From partition $L_k$: $\\{a_{1,1}, a_{2,1}, \\ldots, a_{k,1}\\}$\n- From partition $R_k$: $\\{b_{1,2}, b_{2,2}, \\ldots, b_{k,2}\\}$\n\n**Phase 2: Process Direct Links**\nThe algorithm now considers all edges in $E_{direct}$. An edge can only be added if both its endpoints are unassigned.\nThe direct links are of two types for each cluster $i$: $(a_{i,1}, b_{i,1})$ and $(a_{i,2}, b_{i,2})$.\n- For the link $(a_{i,1}, b_{i,1})$: The node $a_{i,1}$ was already assigned in Phase 1 to $b_{i,2}$. Therefore, this link cannot be added to the matching.\n- For the link $(a_{i,2}, b_{i,2})$: The node $b_{i,2}$ was already assigned in Phase 1 to $a_{i,1}$. Therefore, this link cannot be added to the matching.\nThis holds true for all $i \\in \\{1, \\ldots, k\\}$. Thus, no new edges are added to the matching in Phase 2.\n\nThe final matching produced by the greedy algorithm is $M_G = \\{ (a_{i,1}, b_{i,2}) \\mid i=1, \\ldots, k \\}$.\nThe size of this matching is $N_{greedy}(k) = |M_G| = k$.\n\n**Step 2: Calculate the size of the maximum matching, $N_{opt}(k)$.**\nThe graph $G_k$ is a disjoint union of $k$ identical subgraphs, one for each cluster $i$. The maximum matching of $G_k$ is the union of the maximum matchings of these subgraphs. Let's find the maximum matching for a single cluster $i$.\nThe subgraph for cluster $i$ has nodes $\\{a_{i,1}, a_{i,2}\\}$ and $\\{b_{i,1}, b_{i,2}\\}$ and edges $(a_{i,1}, b_{i,1}), (a_{i,2}, b_{i,2}), (a_{i,1}, b_{i,2})$.\nWe can find a perfect matching in this subgraph, for example, by choosing the two direct links:\n$M_i^* = \\{ (a_{i,1}, b_{i,1}), (a_{i,2}, b_{i,2}) \\}$.\nThis matching covers all four nodes in the subgraph for cluster $i$. Its size is 2. Since a perfect matching covers all vertices, it must be a maximum matching for the subgraph. The size of the maximum matching for one cluster is 2.\n\nTo find the maximum matching for the entire graph $G_k$, we sum the sizes of the maximum matchings for each of the $k$ disjoint clusters.\n$N_{opt}(k) = \\sum_{i=1}^{k} |M_i^*| = \\sum_{i=1}^{k} 2 = 2k$.\n\n**Step 3: Calculate the performance ratio.**\nThe performance ratio is the size of the optimal matching divided by the size of the greedy matching.\n$$ \\text{Performance Ratio} = \\frac{N_{opt}(k)}{N_{greedy}(k)} = \\frac{2k}{k} = 2 $$\nThe ratio is 2, independent of the value of $k$ (for $k \\ge 1$).", "answer": "$$\\boxed{2}$$", "id": "1520052"}]}