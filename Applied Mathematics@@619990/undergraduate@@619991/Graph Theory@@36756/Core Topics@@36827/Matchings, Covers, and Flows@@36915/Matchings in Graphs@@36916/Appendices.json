{"hands_on_practices": [{"introduction": "To begin our practical exploration of matchings, we start with a fundamental question: what is the maximum number of pairs we can form in a simple, structured network? This problem asks you to consider a network of devices arranged in a ring, a scenario that maps directly to the cycle graph, $C_n$. By determining the maximum number of simultaneous communication links, you will be calculating the matching number, a core parameter in graph theory, and discovering how it depends on the basic structure of the graph. [@problem_id:1520409]", "problem": "A technology company is deploying a new peer-to-peer communication system among $n$ devices, where $n$ is an integer greater than or equal to 3. The devices are arranged in a logical ring topology, meaning each device, labeled $d_i$, can communicate directly only with its two immediate neighbors, $d_{i-1}$ and $d_{i+1}$ (indices are taken modulo $n$, so $d_{n+1}$ is $d_1$ and $d_0$ is $d_n$).\n\nA \"communication link\" is established when two adjacent devices pair up to exchange a large data packet. When a link is established, the two involved devices are considered \"occupied\" and cannot participate in any other communication link. The objective is to maximize the number of simultaneous, non-overlapping communication links across the entire network.\n\nDetermine a single, closed-form expression for the maximum number of communication links that can be active at any given moment, expressed in terms of $n$. Your expression should be valid for any integer $n \\ge 3$.", "solution": "First, we model this problem using graph theory. The $n$ devices can be represented as the vertices of a graph $G$, and the potential communication pathways between adjacent devices can be represented as the edges. Since the devices are in a ring topology where each device is connected to its two immediate neighbors, the resulting graph is a cycle graph on $n$ vertices, denoted $C_n$.\n\nA set of simultaneous, non-overlapping communication links corresponds to a set of edges in $C_n$ where no two edges share a common vertex. By definition, this is a matching in the graph. The problem asks for the maximum number of such links, which is equivalent to finding the size of a maximum matching in $C_n$. The size of a maximum matching is also known as the matching number, denoted $\\alpha'(G)$.\n\nWe can determine the value of $\\alpha'(C_n)$ by considering two cases based on the parity of $n$.\n\nCase 1: $n$ is an even integer.\nLet $n = 2k$ for some integer $k \\ge 2$ (since $n \\ge 3$, the smallest even $n$ is 4). Let the vertices be labeled consecutively $v_1, v_2, \\dots, v_{2k}$ around the cycle. We can construct a matching by selecting every other edge along the cycle. For example, consider the set of edges $M = \\{\\{v_1, v_2\\}, \\{v_3, v_4\\}, \\dots, \\{v_{2k-1}, v_{2k}\\}\\}$. Each vertex $v_i$ appears in at most one edge in this set. For instance, $v_2$ is in $\\{v_1, v_2\\}$, but its other neighbor $v_3$ is paired with $v_4$, not $v_2$. This set $M$ is a valid matching. The number of edges in this matching is $k$. Since $n = 2k$, we have $k = n/2$. So, we have found a matching of size $n/2$.\nA matching of size $m$ involves $2m$ distinct vertices. In any graph with $n$ vertices, the size of any matching $m$ must satisfy $2m \\le n$, which implies $m \\le n/2$. Since we have found a matching of size $n/2$, this must be a maximum matching. Thus, for even $n$, $\\alpha'(C_n) = n/2$.\n\nCase 2: $n$ is an odd integer.\nLet $n = 2k+1$ for some integer $k \\ge 1$ (since $n \\ge 3$, the smallest odd $n$ is 3). Let the vertices be labeled $v_1, v_2, \\dots, v_{2k+1}$. We can try to construct a matching similarly to the even case. Consider the set of edges $M = \\{\\{v_1, v_2\\}, \\{v_3, v_4\\}, \\dots, \\{v_{2k-1}, v_{2k}\\}\\}$. This is a valid matching and its size is $k$. The vertices involved are $v_1, \\dots, v_{2k}$. The vertex $v_{2k+1}$ is left unmatched. The neighbors of $v_{2k+1}$ are $v_1$ and $v_{2k}$. Both of these vertices are already used in the matching $M$ (in edges $\\{v_1, v_2\\}$ and $\\{v_{2k-1}, v_{2k}\\}$ respectively), so no more edges can be added to $M$.\nThe size of this matching is $k$. Since $n = 2k+1$, we can express $k$ as $k = (n-1)/2$. So we have found a matching of size $(n-1)/2$.\nAs before, for any matching of size $m$, we must have $2m \\le n$. For odd $n=2k+1$, this means $2m \\le 2k+1$, which implies $m \\le k + 1/2$. Since $m$ must be an integer, the maximum possible size is $m \\le k$. We have constructed a matching of size $k$, so this is a maximum matching. Thus, for odd $n$, $\\alpha'(C_n) = (n-1)/2$.\n\nFinally, we combine both cases into a single closed-form expression.\nIf $n$ is even, $n=2k$, the maximum size is $k = n/2$.\nIf $n$ is odd, $n=2k+1$, the maximum size is $k = (n-1)/2$.\n\nWe can use the floor function, $\\lfloor x \\rfloor$, which gives the greatest integer less than or equal to $x$, to represent this result compactly.\nIf $n$ is even, $n=2k$, then $\\lfloor n/2 \\rfloor = \\lfloor 2k/2 \\rfloor = \\lfloor k \\rfloor = k$. This matches our result.\nIf $n$ is odd, $n=2k+1$, then $\\lfloor n/2 \\rfloor = \\lfloor (2k+1)/2 \\rfloor = \\lfloor k + 0.5 \\rfloor = k$. This also matches our result.\n\nTherefore, for any integer $n \\ge 3$, the maximum number of simultaneous communication links is given by the expression $\\lfloor n/2 \\rfloor$.", "answer": "$$\\boxed{\\lfloor \\frac{n}{2} \\rfloor}$$", "id": "1520409"}, {"introduction": "Having established the goal of finding a maximum matching, we now turn to the algorithmic method for achieving it. How can we be sure a matching is as large as possible, and if it isn't, how can we improve it? This practice introduces the concept of an $M$-augmenting path, which is the cornerstone of many classical matching algorithms. By tracing such a path in a server-task assignment scenario, you will perform the key step in an iterative process that enlarges a given matching. [@problem_id:1520390]", "problem": "In a distributed computing system, a set of servers must be assigned to a set of computational tasks. The system's scheduler aims to maximize the number of concurrently running tasks by finding a maximum matching in a bipartite graph representation of the system.\n\nLet the set of servers be $A = \\{s_1, s_2, s_3, s_4, s_5\\}$ and the set of tasks be $B = \\{t_1, t_2, t_3, t_4, t_5\\}$. The bipartite graph is $G = (A \\cup B, E)$, where an edge $(s_i, t_j) \\in E$ indicates that server $s_i$ is capable of performing task $t_j$. The set of possible assignments (edges) is given by:\n$E = \\{ (s_1, t_2), (s_1, t_3), (s_2, t_1), (s_2, t_4), (s_3, t_1), (s_3, t_2), (s_4, t_3), (s_4, t_5), (s_5, t_5) \\}$.\n\nThe scheduler has already found an initial, non-maximal matching $M$, which is a subset of $E$:\n$M = \\{ (s_2, t_1), (s_3, t_2), (s_4, t_3) \\}$.\n\nTo improve the current assignment, the scheduler must find an $M$-augmenting path. An $M$-augmenting path is an alternating path (its edges alternate between being in $E \\setminus M$ and in $M$) whose start and end vertices are both unmatched by $M$.\n\nIdentify the shortest $M$-augmenting path that starts at the server $s_1$. The path should be represented as an ordered sequence of vertices.\n\nWhich of the following represents this path?\n\nA. $(s_1, t_2, s_3, t_1, s_2, t_4)$\n\nB. $(s_1, t_3, s_4, t_5)$\n\nC. $(s_5, t_5)$\n\nD. $(s_1, t_2, s_3)$\n\nE. $(s_1, t_2, s_4, t_5)$", "solution": "We are given a bipartite graph $G=(A\\cup B,E)$ with $A=\\{s_{1},s_{2},s_{3},s_{4},s_{5}\\}$ and $B=\\{t_{1},t_{2},t_{3},t_{4},t_{5}\\}$, edges $E=\\{(s_{1},t_{2}),(s_{1},t_{3}),(s_{2},t_{1}),(s_{2},t_{4}),(s_{3},t_{1}),(s_{3},t_{2}),(s_{4},t_{3}),(s_{4},t_{5}),(s_{5},t_{5})\\}$, and a current matching $M=\\{(s_{2},t_{1}),(s_{3},t_{2}),(s_{4},t_{3})\\}$. A matching pairs $s_{2}$ with $t_{1}$, $s_{3}$ with $t_{2}$, and $s_{4}$ with $t_{3}$. Therefore, unmatched servers are $s_{1}$ and $s_{5}$, and unmatched tasks are $t_{4}$ and $t_{5}$.\n\nBy definition, an $M$-augmenting path is an alternating path whose edges alternate between $E\\setminus M$ and $M$, starting and ending at vertices unmatched by $M$. Since we must start at $s_{1}$ (unmatched), the first edge must be in $E\\setminus M$.\n\nFrom $s_{1}$, the available edges are $(s_{1},t_{2})$ and $(s_{1},t_{3})$, both in $E\\setminus M$. Each target task here is matched in $M$: $t_{2}$ is matched to $s_{3}$ and $t_{3}$ is matched to $s_{4}$. Thus, the next step must follow the unique $M$-edge incident to that task:\n- If we take $(s_{1},t_{3})\\in E\\setminus M$, then we must go $(t_{3},s_{4})\\in M$. From $s_{4}$, we must take an edge in $E\\setminus M$; the available edges out of $s_{4}$ are $(s_{4},t_{3})\\in M$ and $(s_{4},t_{5})\\in E\\setminus M$. Taking $(s_{4},t_{5})$ reaches $t_{5}$, which is unmatched. Therefore, the path\n$$\n(s_{1},t_{3},s_{4},t_{5})\n$$\nis an $M$-augmenting path with alternating pattern $E\\setminus M$, $M$, $E\\setminus M$ and endpoints $s_{1}$ and $t_{5}$ both unmatched.\n\n- If instead we take $(s_{1},t_{2})\\in E\\setminus M$, then we must go to $(t_{2},s_{3})\\in M$. From $s_{3}$, the only $E\\setminus M$ edge is $(s_{3},t_{1})$, and $t_{1}$ is matched to $s_{2}$ via $(t_{1},s_{2})\\in M$. From $s_{2}$, an $E\\setminus M$ edge is $(s_{2},t_{4})$, reaching unmatched $t_{4}$. This yields the path\n$$\n(s_{1},t_{2},s_{3},t_{1},s_{2},t_{4}),\n$$\nwhich is also an $M$-augmenting path but has more edges.\n\nBetween these, the shortest $M$-augmenting path starting at $s_{1}$ is $(s_{1},t_{3},s_{4},t_{5})$, which matches option B. The other options are invalid for the following reasons: C does not start at $s_{1}$; D does not end at an unmatched vertex and does not alternate to an unmatched endpoint; E includes a non-edge $(t_{2},s_{4})$ and violates alternation because $t_{2}$ is matched to $s_{3}$, not $s_{4}$.\n\nTherefore, the correct choice is B.", "answer": "$$\\boxed{B}$$", "id": "1520390"}, {"introduction": "Our final practice moves from computation and algorithms to formal proof and structural properties. While many graphs can have numerous different perfect matchings, some graph families exhibit much stricter behavior. This exercise challenges you to investigate the nature of perfect matchings in trees, which are connected graphs without any cycles. By reasoning about the structural constraints of a tree, you will uncover a fundamental and elegant theorem regarding the uniqueness of perfect matchings within this important class of graphs. [@problem_id:1520413]", "problem": "In graph theory, a graph is an ordered pair $G=(V,E)$ consisting of a set $V$ of vertices and a set $E$ of edges. A tree is a connected graph that contains no cycles. A matching $M$ in a graph is a subset of its edges where no two edges in $M$ share a common vertex. A perfect matching is a matching that covers every vertex in the graph. Note that a graph must have an even number of vertices to possess a perfect matching.\n\nConsider the properties of matchings specifically within trees. Based on the definitions provided, which one of the following statements about an arbitrary tree $T$ is always true?\n\nA. If the number of vertices in $T$ is even and greater than 2, then $T$ must have a perfect matching.\n\nB. If $T$ has a perfect matching $M$, then removing any edge from $M$ and any two vertices from $T$ will result in a graph that also has a perfect matching.\n\nC. It is possible for a tree to have exactly two distinct perfect matchings.\n\nD. If $T$ has a perfect matching, it is unique.\n\nE. A tree has a perfect matching if and only if all of its vertices have an odd degree.", "solution": "We analyze each statement for an arbitrary tree $T$ using definitions of matchings and perfect matchings, and standard structural facts about matchings.\n\nA. False. Consider the star $K_{1,3}$, which is a tree on $4$ vertices (an even number). Any matching can include at most one edge (since all edges share the center), so no matching can cover all $4$ vertices. Hence there is no perfect matching, contradicting the claim that even order implies existence.\n\nB. False. Let $T=P_{4}$ with vertices $v_{1}-v_{2}-v_{3}-v_{4}$. The matching $M=\\{v_{1}v_{2},\\,v_{3}v_{4}\\}$ is a perfect matching. Remove the edge $v_{1}v_{2}\\in M$ and remove the vertices $v_{1}$ and $v_{3}$. The remaining graph has vertices $\\{v_{2},v_{4}\\}$ and no edge between them, so it has no perfect matching. Since the statement quantifies over any edge from $M$ and any two vertices, a single counterexample suffices to refute it.\n\nC and D hinge on a fundamental property: If $M$ and $N$ are two perfect matchings in any graph, then their symmetric difference $M\\triangle N$ is a disjoint union of even cycles. Justification: In a perfect matching, every vertex has degree $1$ within the matching. For the symmetric difference, at each vertex either the same edge from $M$ and $N$ is used (then degree $0$ in $M\\triangle N$) or two different matched edges meet (one from $M$, one from $N$), giving degree $2$ in $M\\triangle N$. Hence every connected component of $M\\triangle N$ is $2$-regular, i.e., a cycle, and edges alternate between $M$ and $N$, so each cycle has even length. For a tree $T$, which contains no cycles, this forces $M\\triangle N=\\varnothing$, hence $M=N$. Therefore:\n- C is false: a tree cannot have two distinct perfect matchings.\n- D is true: if a tree has a perfect matching, it is unique.\n\nE. False. The path $P_{4}$ has a perfect matching (as above), yet two of its vertices have degree $2$ (even), so it is not true that all vertices must have odd degree. Thus the “only if” direction already fails.\n\nThe only statement that is always true is D.", "answer": "$$\\boxed{D}$$", "id": "1520413"}]}