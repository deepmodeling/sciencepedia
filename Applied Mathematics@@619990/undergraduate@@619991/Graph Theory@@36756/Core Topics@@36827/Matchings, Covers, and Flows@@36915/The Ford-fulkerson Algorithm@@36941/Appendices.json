{"hands_on_practices": [{"introduction": "The best way to truly understand an algorithm is to trace its execution step-by-step. This exercise guides you through the core mechanics of the Ford-Fulkerson algorithm, where you will manually find augmenting paths and update the flow in a residual graph. By working through the first few iterations, you will build a concrete mental model of how flow is incrementally increased until the maximum is reached [@problem_id:1541570].", "problem": "A disaster relief agency is coordinating the distribution of supplies from a Central Depot (`S`) to a Stricken Town (`T`). The supplies are moved through a network of intermediate transfer points (`A`, `B`, `C`, `D`). The road network between these locations can be modeled as a directed graph where each edge represents a one-way route with a maximum capacity, measured in \"units of supplies per hour\".\n\nThe network is defined by the following directed edges and their capacities:\n- From `S` to `A`: capacity 10\n- From `S` to `B`: capacity 8\n- From `A` to `C`: capacity 7\n- From `A` to `D`: capacity 4\n- From `B` to `D`: capacity 6\n- From `C` to `T`: capacity 9\n- From `D` to `C`: capacity 2\n- From `D` to `T`: capacity 12\n\nAll other potential directed edges in the network have a capacity of 0.\n\nYour task is to calculate the total flow from the Central Depot `S` to the Stricken Town `T` after performing exactly two iterations of the Ford-Fulkerson algorithm. The augmenting paths must be found using a depth-first search (DFS) starting from the source `S`. When exploring from any given node, you must consider its neighbors in alphabetical order.\n\nProvide the final answer as a single integer.", "solution": "We apply Ford-Fulkerson with depth-first search starting at $S$, exploring neighbors in alphabetical order at each step, and augment along the first $S$–$T$ path found. Residual capacity on edge $(u,v)$ is denoted $r(u,v)$, initialized to the given capacity $c(u,v)$, with reverse edges initialized to zero. Each augmentation updates residuals by decreasing $r(u,v)$ by the path flow and increasing $r(v,u)$ by the same amount, preserving flow conservation.\n\nIteration 1 (initial residuals $r=c$): From $S$, DFS explores $A$ before $B$. From $A$, it explores $C$ before $D$. From $C$, it goes to $T$. The first augmenting path found is $S \\to A \\to C \\to T$. Its bottleneck is\n$$\n\\Delta f_{1}=\\min\\{c(S,A),c(A,C),c(C,T)\\}=\\min\\{10,7,9\\}=7.\n$$\nUpdate residuals: $r(S,A)=10-7=3$, $r(A,S)=7$; $r(A,C)=7-7=0$, $r(C,A)=7$; $r(C,T)=9-7=2$, $r(T,C)=7$.\n\nIteration 2 (using updated residuals): From $S$, DFS again explores $A$ first since $r(S,A)=3>0$. From $A$, it tries $C$ first but $r(A,C)=0$, so it proceeds to $D$ with $r(A,D)=4>0$. From $D$, it explores $C$ before $T$; $r(D,C)=2>0$. From $C$, it goes to $T$ with $r(C,T)=2>0$. The first augmenting path found is $S \\to A \\to D \\to C \\to T$. Its bottleneck is\n$$\n\\Delta f_{2}=\\min\\{r(S,A),r(A,D),r(D,C),r(C,T)\\}=\\min\\{3,4,2,2\\}=2.\n$$\nUpdate residuals: $r(S,A)=3-2=1$, $r(A,S)=7+2=9$; $r(A,D)=4-2=2$, $r(D,A)=2$; $r(D,C)=2-2=0$, $r(C,D)=2$; $r(C,T)=2-2=0$, $r(T,C)=7+2=9$.\n\nAfter exactly two augmentations, the total flow value from $S$ to $T$ is\n$$\n|f|=\\Delta f_{1}+\\Delta f_{2}=7+2=9.\n$$", "answer": "$$\\boxed{9}$$", "id": "1541570"}, {"introduction": "The power of the Ford-Fulkerson algorithm lies not just in finding the maximum flow, but in its deep connection to the network's structure, as captured by the max-flow min-cut theorem. This problem challenges you to think about this duality by identifying a network where the minimum cut capacity is a specific value formed by multiple edges, not a single bottleneck. This practice sharpens your ability to analyze a network's structure and its capacity limits beyond just the obvious paths [@problem_id:1541522].", "problem": "Consider a directed graph representing a flow network. Each network has a designated source vertex, $s$, and a sink vertex, $t$. The networks are defined by their set of vertices $V$ and a set of directed edges $E$. Each edge $(u, v) \\in E$ has an associated integer capacity $c(u, v) > 0$.\n\nAccording to the max-flow min-cut theorem, the maximum flow from $s$ to $t$ in a network is equal to the minimum capacity of an $s$-$t$ cut. An $s$-$t$ cut is a partition of the vertices $V$ into two disjoint sets, $S$ and $T$, such that $s \\in S$ and $t \\in T$. The capacity of the cut $(S,T)$ is the sum of the capacities of all edges $(u,v)$ where $u \\in S$ and $v \\in T$.\n\nYour task is to identify which of the following four networks satisfies **both** of these conditions simultaneously:\n1. The capacity of the minimum $s$-$t$ cut is exactly 10.\n2. No single edge in the network has a capacity equal to 10.\n\nThe networks are described as a list of vertices and a list of edges with their capacities in the format (start_vertex, end_vertex, capacity).\n\nA. Vertices $V = \\{s, u, v, w, x, t\\}$. Edges and capacities $E = \\{(s, u, 11), (s, v, 11), (u, w, 6), (v, x, 4), (w, t, 12), (x, t, 12)\\}$.\n\nB. Vertices $V = \\{s, u, v, w, x, t\\}$. Edges and capacities $E = \\{(s, u, 13), (s, v, 13), (u, w, 8), (v, x, 4), (w, t, 14), (x, t, 14)\\}$.\n\nC. Vertices $V = \\{s, u, v, w, t, z\\}$. Edges and capacities $E = \\{(s, u, 6), (s, v, 4), (u, w, 10), (v, w, 10), (w, t, 10)\\}$. The vertex $z$ is isolated.\n\nD. Vertices $V = \\{s, u, v, w, x, t\\}$. Edges and capacities $E = \\{(s, u, 7), (s, v, 7), (u, w, 7), (v, x, 7), (w, t, 7), (x, t, 7)\\}$.", "solution": "We use the max-flow min-cut theorem: for each network, the maximum $s$-$t$ flow equals the capacity of a minimum $s$-$t$ cut. For the given graphs, there are two edge-disjoint $s$-$t$ paths; the achievable total flow is the sum of the bottlenecks on the two paths, provided this does not exceed the total capacity out of $s$ or into $t$. We then compare with an explicit cut to certify the min-cut value and check whether any single edge has capacity $10$.\n\nNetwork A:\n- Paths: $s \\to u \\to w \\to t$ and $s \\to v \\to x \\to t$.\n- Path bottlenecks:\n$$\n\\min\\{c(s,u),c(u,w),c(w,t)\\}=\\min\\{11,6,12\\}=6,\\quad \\min\\{c(s,v),c(v,x),c(x,t)\\}=\\min\\{11,4,12\\}=4.\n$$\n- Sum of bottlenecks: $6+4=10$.\n- Out of $s$: $c(s,u)+c(s,v)=11+11=22$, into $t$: $c(w,t)+c(x,t)=12+12=24$, so these do not restrict below $10$.\n- Construct cut $(S,T)$ with $S=\\{s,u,v\\}$ and $T=\\{w,x,t\\}$. Its capacity is\n$$\nc(u,w)+c(v,x)=6+4=10.\n$$\nThus the maximum flow is $10$ and the minimum cut capacity is $10$. No edge has capacity $10$ since the multiset of capacities is $\\{11,11,6,4,12,12\\}$.\n\nNetwork B:\n- Path bottlenecks:\n$$\n\\min\\{13,8,14\\}=8,\\quad \\min\\{13,4,14\\}=4,\\quad \\text{sum }=12.\n$$\n- Out of $s$: $26$, into $t$: $28$. Hence maximum flow is $12$. Any cut matching that is at least $12$, so the minimum cut capacity is $12\\neq 10$. Condition $1$ fails.\n\nNetwork C:\n- Out of $s$: $c(s,u)+c(s,v)=6+4=10$, into $t$: $c(w,t)=10$. Hence any $s$-$t$ flow is at most $10$, and sending $6$ units along $s \\to u \\to w \\to t$ and $4$ units along $s \\to v \\to w \\to t$ achieves $10$, so the minimum cut capacity is $10$.\n- However, there are edges with capacity $10$ (namely $c(u,w)=10$, $c(v,w)=10$, and $c(w,t)=10$), violating condition $2$.\n\nNetwork D:\n- Path bottlenecks:\n$$\n\\min\\{7,7,7\\}=7,\\quad \\min\\{7,7,7\\}=7,\\quad \\text{sum }=14.\n$$\n- Out of $s$: $14$, into $t$: $14$. Hence maximum flow is $14$, so the minimum cut capacity is $14\\neq 10$. Condition $1$ fails.\n\nOnly Network A satisfies both that the minimum $s$-$t$ cut has capacity $10$ and that no single edge has capacity $10$.", "answer": "$$\\boxed{A}$$", "id": "1541522"}, {"introduction": "While the Ford-Fulkerson algorithm is guaranteed to find the maximum flow for integer capacities, its efficiency can be a surprising weakness depending on the choice of augmenting paths. This classic thought experiment demonstrates how a poor path selection strategy can lead to a very large number of iterations, even in a small network. By analyzing this specific scenario [@problem_id:1541549], you will gain a crucial insight into why refined path-finding methods, such as those in the Edmonds-Karp algorithm, are essential for practical performance.", "problem": "Consider a flow network defined by a set of vertices $V = \\{s, a, b, t\\}$, where $s$ is the source and $t$ is the sink. The network has a set of directed edges with associated integer capacities. Let the capacity of an edge from vertex $u$ to vertex $v$ be denoted by $c(u, v)$. The edges and their capacities are defined as follows:\n- $c(s, a) = C$\n- $c(s, b) = C$\n- $c(a, t) = C$\n- $c(b, t) = C$\n- $c(a, b) = 1$\nAll other edges that are not listed have a capacity of 0. For this problem, let the constant $C = 500$.\n\nYou are to find the maximum flow from $s$ to $t$ using the Ford-Fulkerson algorithm. However, you must follow a specific rule for choosing the augmenting path at each iteration: if multiple augmenting paths exist in the current residual graph, you must always select the path that has the smallest bottleneck capacity. If there is a tie for the smallest bottleneck capacity, you may choose any one of the tied paths.\n\nCalculate the total number of augmentations (i.e., iterations) that the Ford-Fulkerson algorithm will perform to find the maximum flow under this specific path selection strategy.", "solution": "Let $G=(V,E)$ be the directed network with source $s$, sink $t$, capacities $c(u,v)$ as given, and initial flow $f\\equiv 0$. Let $c_{f}(u,v)$ denote the residual capacity under flow $f$. For any $s$–$t$ path $P$ in the current residual graph, its bottleneck is $\\beta(P)=\\min_{(u,v)\\in P}c_{f}(u,v)$. Ford–Fulkerson augments by $\\delta=\\beta(P)$ along $P$, updating residuals by\n$$\nc_{f}^{\\text{new}}(u,v)=c_{f}(u,v)-\\delta\\quad\\text{for forward edges on }P,\\quad\nc_{f}^{\\text{new}}(v,u)=c_{f}(v,u)+\\delta\\quad\\text{for their reverse edges},\n$$\nand the flow value increases by $\\delta$.\n\nInitially, the residual edges are $s\\to a$, $s\\to b$, $a\\to t$, $b\\to t$ with capacity $C$, and $a\\to b$ with capacity $1$. The available $s$–$t$ residual paths include:\n- $P_{1}: s\\to a\\to b\\to t$ with $\\beta(P_{1})=\\min\\{C,1,C\\}=1$,\n- $P_{2}: s\\to a\\to t$ with $\\beta(P_{2})=C$,\n- $P_{3}: s\\to b\\to t$ with $\\beta(P_{3})=C$.\nBy the rule, the algorithm must pick a path with the smallest bottleneck, hence it picks $P_{1}$ and augments $\\delta=1$.\n\nAfter augmenting along $P_{1}$, the residual capacities change to\n$$\nc_{f}(s,a)=C-1,\\quad c_{f}(a,s)=1,\\quad c_{f}(a,b)=0,\\quad c_{f}(b,a)=1,\\quad c_{f}(b,t)=C-1,\\quad c_{f}(t,b)=1,\n$$\nwith $c_{f}(s,b)=C$ and $c_{f}(a,t)=C$ unchanged. Now an $s$–$t$ path with the smallest bottleneck is\n$$\nP_{4}: s\\to b\\to a\\to t\\quad\\text{with}\\quad\\beta(P_{4})=\\min\\{C,1,C\\}=1,\n$$\nso the algorithm augments again by $\\delta=1$ along $P_{4}$.\n\nInductive invariant. After $2m$ augmentations (for some integer $m\\geq 0$), the residual capacities satisfy\n$$\nc_{f}(s,a)=c_{f}(s,b)=c_{f}(a,t)=c_{f}(b,t)=C-m,\\quad c_{f}(a,b)=1,\\quad c_{f}(b,a)=0,\n$$\nand all other residual edges are the corresponding reverse edges with capacities determined by flow conservation. This holds for $m=0$ initially. Given it holds for $m$, the next augmentation must choose $P_{1}: s\\to a\\to b\\to t$, whose bottleneck is\n$$\n\\beta(P_{1})=\\min\\{c_{f}(s,a),c_{f}(a,b),c_{f}(b,t)\\}=\\min\\{C-m,1,C-m\\}=1,\n$$\nprovided $C-m>0$. Augmenting by $1$ yields, after $2m+1$ augmentations,\n$$\nc_{f}(s,a)=C-m-1,\\quad c_{f}(b,t)=C-m-1,\\quad c_{f}(s,b)=C-m,\\quad c_{f}(a,t)=C-m,\\quad c_{f}(a,b)=0,\\quad c_{f}(b,a)=1.\n$$\nThen the smallest-bottleneck path is $P_{4}: s\\to b\\to a\\to t$ with bottleneck\n$$\n\\beta(P_{4})=\\min\\{c_{f}(s,b),c_{f}(b,a),c_{f}(a,t)\\}=\\min\\{C-m,1,C-m\\}=1,\n$$\nagain assuming $C-m>0$. Augmenting by $1$ along $P_{4}$ restores the even-index form with $m$ replaced by $m+1$, proving the invariant.\n\nTermination and count. The alternation between $P_{1}$ and $P_{4}$ continues as long as $C-m>0$. The largest $m$ for which the two augmentations at stage $m$ are possible is $m=C-1$. After performing those two augmentations, we reach $m=C$, at which point\n$$\nc_{f}(s,a)=c_{f}(s,b)=c_{f}(a,t)=c_{f}(b,t)=0,\n$$\nso there is no residual path from $s$ to $t$ and the algorithm terminates. Therefore, the total number of augmentations performed is\n$$\n2C.\n$$\nBy the max-flow min-cut theorem, the maximum flow value is $\\min\\{c(s,a)+c(s,b),\\,c(a,t)+c(b,t)\\}=2C$, and since each augmentation adds exactly $1$ unit of flow (the chosen bottleneck), exactly $2C$ augmentations are necessary and sufficient.\n\nSubstituting $C=500$ gives a total of $2\\cdot 500=1000$ augmentations.", "answer": "$$\\boxed{1000}$$", "id": "1541549"}]}