{"hands_on_practices": [{"introduction": "The push-relabel algorithm's power lies in its two fundamental operations: `push` and `relabel`. To truly grasp the algorithm, one must first master the precise conditions under which each operation is applied, such as a node having positive excess, $e(u) > 0$, and an edge being admissible. This practice exercise [@problem_id:1529547] provides a direct, hands-on opportunity to do just that by tracing the algorithm's state changes through a few distinct operations. It is an essential first step in developing a working command of this powerful max-flow technique.", "problem": "Consider a flow network with a source node $s$, a sink node $t$, and two intermediate nodes $a$ and $b$. The directed edges and their integer capacities $c(u, v)$ are given as follows: $c(s, a) = 15$, $c(s, b) = 7$, $c(a, b) = 4$, $c(a, t) = 9$, and $c(b, t) = 12$. All other pairs of nodes have zero capacity.\n\nThe network is in an intermediate state during the execution of a push-relabel algorithm for finding the maximum flow. A pre-flow $f$ has been established, resulting in the following height function $h$ and excess flow function $e$ for each node:\n- Heights: $h(s) = 4, h(a) = 0, h(b) = 0, h(t) = 0$.\n- Excesses: $e(s) = -22, e(a) = 15, e(b) = 7, e(t) = 0$.\nThe current non-zero flows are $f(s, a) = 15$ and $f(s, b) = 7$. All other flows $f(u, v)$ are zero.\n\nThe push-relabel algorithm operates on active nodes, which are defined as any node $u$ (other than $s$ or $t$) with a positive excess, $e(u) > 0$. The algorithm uses two main operations on an active node $u$:\n1.  **Push**: A push from node $u$ to an adjacent node $v$ is applicable if $e(u) > 0$, the residual capacity $c_f(u, v) > 0$, and the height condition $h(u) = h(v) + 1$ is met. The amount of flow pushed is $\\min(e(u), c_f(u, v))$. The residual capacity is defined as $c_f(u,v) = c(u,v) - f(u,v)$.\n2.  **Relabel**: A relabel operation on node $u$ is applicable if $e(u) > 0$ and no push operation is applicable from $u$. The height of $u$ is updated to:\n$$h(u) = 1 + \\min\\{h(v) \\mid c_f(u, v) > 0\\}$$\n\nStarting with the active node $a$, determine the state of the network after exactly two valid operations have been performed. The algorithm follows these specific rules:\n- An operation is performed on the selected active node. If the node remains active, it is selected again for the next operation.\n- When choosing an operation for a node, a `push` is always performed if applicable. A `relabel` is only performed if no `push` is possible.\n- If a `push` is possible to multiple neighboring nodes, the neighbor that comes first in alphabetical order is chosen as the destination.\n\nWhich of the following options correctly describes the heights and excesses of nodes $a$ and $b$ after these two operations?\n\nA. $h(a) = 1$, $e(a) = 11$, and $h(b) = 0$, $e(b) = 11$.\n\nB. $h(a) = 1$, $e(a) = 6$, and $h(b) = 0$, $e(b) = 7$.\n\nC. $h(a) = 1$, $e(a) = 15$, and $h(b) = 0$, $e(b) = 7$.\n\nD. $h(a) = 0$, $e(a) = 11$, and $h(b) = 0$, $e(b) = 11$.\n\nE. $h(a) = 1$, $e(a) = 11$, and $h(b) = 1$, $e(b) = 11$.", "solution": "The directed edges with capacities are $c(s,a)=15$, $c(s,b)=7$, $c(a,b)=4$, $c(a,t)=9$, $c(b,t)=12$, and all others zero. The current non-zero flows are $f(s,a)=15$ and $f(s,b)=7$, with heights $h(s)=4$, $h(a)=0$, $h(b)=0$, $h(t)=0$ and excesses $e(s)=-22$, $e(a)=15$, $e(b)=7$, $e(t)=0$.\n\nResidual capacities from node $a$ are computed as $c_{f}(u,v)=c(u,v)-f(u,v)$ for forward edges and $c_{f}(v,u)=f(u,v)$ for reverse edges of current flow. Thus,\n$$\nc_{f}(a,b)=c(a,b)-f(a,b)=4-0=4,\\quad c_{f}(a,t)=c(a,t)-f(a,t)=9-0=9,\\quad c_{f}(a,s)=f(s,a)=15.\n$$\nA push from $a$ to a neighbor $v$ requires $e(a)>0$, $c_{f}(a,v)>0$, and $h(a)=h(v)+1$. With $h(a)=0$ and $h(b)=h(t)=0$, $h(s)=4$, the conditions $0=h(b)+1$, $0=h(t)+1$, $0=h(s)+1$ all fail. Therefore, no push is possible from $a$, and a relabel is applicable. By the relabel rule,\n$$\nh(a)\\leftarrow 1+\\min\\{h(v)\\mid c_{f}(a,v)>0\\}=1+\\min\\{h(s),h(b),h(t)\\}=1+\\min\\{4,0,0\\}=1.\n$$\nThis completes the first operation; $e(a)=15$ remains positive, so $a$ is selected again.\n\nWith $h(a)=1$, the push admissibility condition $h(a)=h(v)+1$ holds for $v=b$ and $v=t$ since $h(b)=h(t)=0$, but not for $v=s$ since $h(s)=4$. By the tie-breaking rule (alphabetical order), push from $a$ to $b$ is chosen. The push amount is\n$$\n\\Delta=\\min\\{e(a),c_{f}(a,b)\\}=\\min\\{15,4\\}=4.\n$$\nUpdating the flow and excesses,\n$$\nf(a,b)\\leftarrow f(a,b)+4=4,\\quad e(a)\\leftarrow e(a)-4=11,\\quad e(b)\\leftarrow e(b)+4=11,\n$$\nand heights remain $h(a)=1$, $h(b)=0$.\n\nTherefore, after exactly two operations, we have $h(a)=1$, $e(a)=11$, $h(b)=0$, $e(b)=11$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1529547"}, {"introduction": "Beyond simply executing individual steps, a deeper understanding of the push-relabel method comes from predicting its behavior. A `push` operation not only moves excess flow but can also create a new active node which, due to the current height function, may have no admissible edges and thus immediately require a `relabel` operation. This practice [@problem_id:1529542] challenges you to analyze several scenarios to identify an initial state that leads to this specific outcome, highlighting the crucial and dynamic relationship between node heights and the set of admissible edges.", "problem": "Consider the execution of a generic preflow-push algorithm on a flow network. The network is a directed graph $G=(V, E)$ with a source $s$, a sink $t$, and a capacity function $c(x,y)$ for each edge $(x,y) \\in E$. The state of the algorithm is defined by a preflow function $f$ and a height function $h$.\n\nThe following definitions are used:\n- The **excess flow** at a node $x$ is $e(x) = \\sum_{w \\in V} f(w,x) - \\sum_{y \\in V} f(x,y)$.\n- A node $x \\in V \\setminus \\{s,t\\}$ is **active** if $e(x) > 0$.\n- The **residual capacity** of an edge $(x,y)$ is $c_f(x,y) = c(x,y) - f(x,y)$. Back-edges created by the flow have residual capacity $c_f(y,x) = f(x,y)$.\n- An edge $(x,y)$ is **admissible** if $c_f(x,y) > 0$ and $h(x) = h(y) + 1$.\n- A **push** operation is applicable to an active node $x$ if there is an admissible edge $(x,y)$. The algorithm pushes $\\delta = \\min(e(x), c_f(x,y))$ units of flow from $x$ to $y$.\n- A **relabel** operation is applicable to an active node $x$ if it has no admissible outgoing edges. The height $h(x)$ is updated to $1 + \\min\\{h(y) \\mid (x,y) \\in E \\text{ and } c_f(x,y)>0\\}$.\n\nLet the graph be defined by the set of vertices $V = \\{s, u, v, w, t\\}$ and the set of edges with their capacities:\n$c(s,u)=20$, $c(u,v)=10$, $c(v,w)=15$, $c(w,t)=10$.\n\nSuppose the algorithm is in a state where node $u$ is active, node $v$ is not active (i.e., $e(v)=0$), and the only admissible edge leaving $u$ is $(u,v)$. A single push operation is then performed on the edge $(u,v)$.\n\nWhich of the following initial states, specified by the preflow $f$ and height function $h$, results in a new state where node $v$ becomes active and has no admissible edges (and thus must be relabeled)?\n\nThe preflow $f$ is given by non-zero flow values; all other edge flows are zero. The height function $h$ is given as a list of values for $(h(s), h(u), h(v), h(w), h(t))$.\n\nA. $f(s,u)=13, f(u,v)=8, f(v,w)=8, f(w,t)=8$; $h=(5, 3, 2, 2, 0)$\n\nB. $f(s,u)=13, f(u,v)=8, f(v,w)=8, f(w,t)=8$; $h=(5, 3, 2, 1, 0)$\n\nC. $f(s,u)=8, f(u,v)=8, f(v,w)=8, f(w,t)=8$; $h=(5, 3, 2, 2, 0)$\n\nD. $f(s,u)=13, f(u,v)=9, f(v,w)=8, f(w,t)=8$; $h=(5, 3, 2, 2, 0)$", "solution": "The problem asks to identify which initial state, after a single push from node $u$ to node $v$, results in a state where $v$ is active but has no admissible edges. Let's analyze each option based on the preconditions and postconditions.\n\n**Preconditions:**\n1.  Node $u$ is active: $e(u) > 0$.\n2.  Node $v$ is not active: $e(v) = 0$.\n3.  The edge $(u,v)$ is admissible: $c_f(u,v) > 0$ and $h(u) = h(v) + 1$.\n4.  $(u,v)$ is the only admissible edge from $u$.\n\n**Postconditions (after the push on $(u,v)$):**\n1.  Node $v$ becomes active: new $e(v) > 0$.\n2.  Node $v$ has no admissible edges.\n\nLet's check each option.\n\n**Analysis of Option A:**\nState: $f(s,u)=13, f(u,v)=8, f(v,w)=8, f(w,t)=8$; $h=(5, 3, 2, 2, 0)$.\n\n1.  **Check Preconditions:**\n    - Excess at $u$: $e(u) = f(s,u) - f(u,v) = 13 - 8 = 5$. Since $e(u)>0$, $u$ is active. (Condition 1 OK)\n    - Excess at $v$: $e(v) = f(u,v) - f(v,w) = 8 - 8 = 0$. Since $e(v)=0$, $v$ is not active. (Condition 2 OK)\n    - Admissibility of $(u,v)$:\n        - Residual capacity: $c_f(u,v) = c(u,v) - f(u,v) = 10 - 8 = 2$. Since $c_f(u,v) > 0$.\n        - Height condition: $h(u)=3$, $h(v)=2$. $h(u) = h(v) + 1$ is true.\n        - Therefore, $(u,v)$ is an admissible edge. (Condition 3 OK)\n    - Uniqueness of admissible edge from $u$: $u$ has only one outgoing edge, $(u,v)$, so it is trivially the only admissible one. (Condition 4 OK)\n    \n    All preconditions are met. Now, perform the push on $(u,v)$.\n    - Push amount: $\\delta = \\min(e(u), c_f(u,v)) = \\min(5, 2) = 2$.\n\n2.  **Analyze the New State:**\n    - New flow on $(u,v)$: $f'(u,v) = f(u,v) + \\delta = 8 + 2 = 10$.\n    - New excess at $u$: $e'(u) = e(u) - \\delta = 5 - 2 = 3$.\n    - New excess at $v$: $e'(v) = e(v) + \\delta = 0 + 2 = 2$.\n    - Since $e'(v) = 2 > 0$, node $v$ is now active. (Postcondition 1 OK)\n\n3.  **Check Admissible Edges from $v$ in the New State:**\n    - The only outgoing edge from $v$ is $(v,w)$.\n    - Check if $(v,w)$ is admissible:\n        - Residual capacity: $c_f(v,w) = c(v,w) - f(v,w) = 15 - 8 = 7 > 0$.\n        - Height condition: $h(v)=2$, $h(w)=2$. The condition $h(v) = h(w) + 1$ is false ($2 \\neq 2+1$).\n    - Since the height condition fails, $(v,w)$ is not admissible. As this is the only outgoing edge with positive residual capacity, node $v$ has no admissible edges. (Postcondition 2 OK)\n\nConclusion: Option A satisfies all conditions.\n\n**Analysis of Option B:**\nState: $f(s,u)=13, f(u,v)=8, f(v,w)=8, f(w,t)=8$; $h=(5, 3, 2, 1, 0)$.\nThe flows are identical to Option A, so the preconditions regarding excesses and residual capacities are met. Let's check the heights.\n1.  **Check Preconditions:**\n    - $e(u)=5 > 0$ (active), $e(v)=0$ (not active).\n    - Admissibility of $(u,v)$: $h(u)=3$, $h(v)=2 \\implies h(u)=h(v)+1$. $c_f(u,v)=2>0$. Edge is admissible.\n    - All preconditions are met. Perform the push.\n    - Push amount: $\\delta = \\min(e(u), c_f(u,v)) = \\min(5, 2) = 2$.\n\n2.  **Analyze the New State:**\n    - New excess at $v$: $e'(v) = 0 + 2 = 2$. $v$ is active. (Postcondition 1 OK)\n\n3.  **Check Admissible Edges from $v$ in the New State:**\n    - Outgoing edge is $(v,w)$.\n    - Check if $(v,w)$ is admissible:\n        - Residual capacity: $c_f(v,w) = 15 - 8 = 7 > 0$.\n        - Height condition: $h(v)=2$, $h(w)=1$. The condition $h(v) = h(w) + 1$ is true ($2 = 1+1$).\n    - Since both conditions are met, $(v,w)$ is an admissible edge. Node $v$ has an admissible edge and does not need to be relabeled. It can perform a push to $w$.\n\nConclusion: Option B fails to meet the second postcondition.\n\n**Analysis of Option C:**\nState: $f(s,u)=8, f(u,v)=8, f(v,w)=8, f(w,t)=8$; $h=(5, 3, 2, 2, 0)$.\n1.  **Check Preconditions:**\n    - Excess at $u$: $e(u) = f(s,u) - f(u,v) = 8 - 8 = 0$.\n    - Since $e(u)=0$, node $u$ is not active. This violates precondition 1. A push operation cannot be initiated from $u$.\n\nConclusion: Option C fails to meet the preconditions of the problem.\n\n**Analysis of Option D:**\nState: $f(s,u)=13, f(u,v)=9, f(v,w)=8, f(w,t)=8$; $h=(5, 3, 2, 2, 0)$.\n1.  **Check Preconditions:**\n    - Excess at $u$: $e(u) = f(s,u) - f(u,v) = 13 - 9 = 4 > 0$. $u$ is active.\n    - Excess at $v$: $e(v) = f(u,v) - f(v,w) = 9 - 8 = 1$.\n    - Since $e(v)=1 > 0$, node $v$ is already active. This violates precondition 2, which states that node $v$ is not active.\n\nConclusion: Option D fails to meet the preconditions of the problem.\n\nBased on the detailed analysis, only Option A correctly describes an initial state that leads to the specified outcome.", "answer": "$$\\boxed{A}$$", "id": "1529542"}, {"introduction": "A truly proficient algorithm designer knows not only *how* an algorithm works, but *why* it is correct. The initialization conditions of the push-relabel algorithm, particularly setting the source's height to $h(s) = |V|$, are critical design choices, not arbitrary ones. This advanced practice [@problem_id:1529590] presents a thought experiment: what happens if this rule is violated? By investigating the consequences of this seemingly small change, you will gain a profound insight into the theoretical guarantees that ensure the algorithm finds the correct maximum flow.", "problem": "Consider a flow network $G=(V, E)$ with a source vertex $s$, a sink vertex $t$, and a capacity function $c: V \\times V \\to \\mathbb{R}_{\\ge 0}$. The push-relabel algorithm finds the maximum flow by manipulating a preflow $f$ and maintaining a height function $h: V \\to \\mathbb{N}$ for all vertices.\n\nThe standard initialization procedure for the algorithm is as follows:\n1.  Initialize a preflow $f$ by saturating all edges leaving the source: $f(s, u) = c(s, u)$ for all vertices $u$ where $(s, u) \\in E$, and $f(u, v) = 0$ for all other edges.\n2.  Initialize the excess flow at each vertex: $e(v) = \\sum_{u \\in V} f(u, v) - \\sum_{u \\in V} f(v, u)$ for all $v \\in V$.\n3.  Initialize the height function: $h(s) = |V|$ and $h(v) = 0$ for all $v \\in V \\setminus \\{s\\}$. The height of the sink, $h(t)$, is fixed at 0 for the entire algorithm.\n\nThe algorithm then repeatedly applies `push` and `relabel` operations to overflowing vertices $u \\in V \\setminus \\{s,t\\}$ (i.e., vertices with $e(u)>0$) until no such operations are possible. A key property maintained by these operations is that for any edge $(u, v)$ in the residual graph $G_f$, the inequality $h(u) \\leq h(v) + 1$ holds.\n\nNow, suppose an engineer implements the algorithm but makes a mistake in the initialization of the source's height, setting $h(s) = |V| - 2$ instead of $h(s) = |V|$. All other initialization steps and the main loop of the algorithm (which selects overflowing vertices from the set $V \\setminus \\{s, t\\}$) remain unchanged. Assume the network has at least four vertices, i.e., $|V| \\ge 4$.\n\nWhich of the following statements most accurately describes the consequence of this incorrect initialization?\n\nA. The algorithm is still guaranteed to terminate and compute the maximum flow, but it may require significantly more `relabel` operations compared to the standard version.\n\nB. The algorithm is no longer guaranteed to terminate and may enter an infinite loop, for example, by cyclically pushing flow between a set of vertices.\n\nC. The algorithm will terminate, but it is not guaranteed to find the maximum flow. The final flow value might be strictly less than the maximum possible flow.\n\nD. The algorithm will immediately fail. The initial preflow cannot be processed because a `push` operation from the source $s$ requires $h(s)$ to be exactly one greater than a neighbor's height, a condition which is not met.\n\nE. The algorithm might push flow back to the source vertex $s$, causing its excess $e(s)$ to become positive. This violates a fundamental invariant of terminating preflows and will cause the algorithm to crash or fail to terminate.", "solution": "We recall the push-relabel framework and its invariants. The algorithm maintains a preflow $f$ and a height function $h:V\\to\\mathbb{N}$ such that for every residual edge $(u,v)$ in the residual graph $G_{f}$, the inequality $h(u)\\leq h(v)+1$ holds. Pushes are allowed only along admissible edges $(u,v)$ with positive residual capacity and $h(u)=h(v)+1$. Relabel sets $h(u)\\leftarrow 1+\\min\\{h(w):(u,w)\\text{ residual}\\}$ for an overflowing $u$. The main loop never selects $s$ or $t$ as overflowing vertices to process.\n\nIn the standard initialization $h(s)=|V|$ and $h(v)=0$ for $v\\neq s$, one immediate and crucial consequence is that there is never an $s\\to t$ residual path at any time: along any residual path $s=v_{0},v_{1},\\dots,v_{k}=t$, chaining $h(v_{i})\\leq h(v_{i+1})+1$ gives\n$$\nh(s)\\leq h(t)+k\\leq k\\leq |V|-1,\n$$\nwhich contradicts $h(s)=|V|$. This fact is used in the correctness proof: upon termination (no overflowing nonterminal vertices), the preflow is a feasible flow, and since there is no $s\\to t$ residual path, the flow is maximum.\n\nNow suppose $h(s)=|V|-2$ instead, with all other initialization steps unchanged. First, the initial height labeling is still valid: for any residual edge $(u,v)$ right after setup, $h(u)\\leq h(v)+1$ holds because all non-$s$ heights are $0$ and $h(s)=|V|-2$, so, for example, on backward residual edges $(u,s)$ we have $h(u)=0\\leq (|V|-2)+1$. Moreover, the algorithm will still terminate: the usual height bound adapts as follows. For any residual path $u=w_{0},w_{1},\\dots,w_{m}=s$, chaining along residual edges yields\n$$\nh(u)\\leq h(s)+m\\leq h(s)+(|V|-1).\n$$\nSince $h(s)=|V|-2$, we obtain a uniform bound for all heights\n$$\nh(u)\\leq (|V|-2)+(|V|-1)=2|V|-3,\n$$\nso each relabel strictly increases an integer height bounded above, implying finitely many relabels and hence termination.\n\nHowever, the key correctness argument above breaks: with $h(s)=|V|-2$, the inequality\n$$\nh(s)\\leq h(t)+k=k\n$$\ndoes not prevent an $s\\to t$ residual path of length $k\\geq |V|-2$ from existing. Consequently, it is possible for the algorithm to reach a feasible flow (no overflowing nonterminal vertices) while an $s\\to t$ residual path still exists, i.e., before reaching a maximum flow. This can indeed happen, as the following explicit example demonstrates.\n\nConstruct a network with $|V|=4$ vertices $\\{s,u,v,t\\}$ and capacities:\n- $(s,u)$ with capacity $1$,\n- $(s,v)$ with capacity $1$,\n- $(u,v)$ with capacity $1$,\n- $(v,t)$ with capacity $1$,\nand no other edges. The maximum $s\\!-\\!t$ flow is $2$ (via $s\\to v\\to t$ and $s\\to u\\to v\\to t$).\n\nInitialize preflow by saturating edges out of $s$: $f(s,u)=1$, $f(s,v)=1$, all other $f=0$. Excesses are $e(u)=1$, $e(v)=1$, $e(s)=-2$, $e(t)=0$. Set heights to $h(s)=|V|-2=2$ and $h(u)=h(v)=h(t)=0$.\n\nFollow the push-relabel rules (only non-$s$, non-$t$ vertices are selected):\n1) At $u$ (with $e(u)=1$), since $h(u)=0$ and $h(v)=0$, relabel $u$ to $h(u)=1$ and push $1$ along $(u,v)$. Now $e(u)=0$, $e(v)=2$.\n2) At $v$ (with $e(v)=2$), since $h(v)=0$ and $h(t)=0$, relabel $v$ to $h(v)=1$ and push $1$ along $(v,t)$. Now $e(v)=1$, $e(t)=1$.\n3) Still at $v$ (with $e(v)=1$), the admissible condition fails on $(v,u)$ and $(v,s)$ because $h(v)=1$, $h(u)=1$, $h(s)=2$. Relabel $v$ to $h(v)=2$. Now $(v,u)$ is admissible since $h(v)=h(u)+1=2$, so push $1$ from $v$ to $u$ (along the residual backedge of $(u,v)$). Now $e(v)=0$, $e(u)=1$.\n4) At $u$ (with $e(u)=1$), neither $(u,v)$ nor $(u,s)$ is admissible for $h(u)=1$ (neighbors have heights $2$ and $2$). Relabel $u$ to $h(u)=3$. Now $(u,s)$ is admissible since $h(u)=h(s)+1=3$, so push $1$ from $u$ to $s$ along the residual backedge of $(s,u)$. Now $e(u)=0$.\n\nAt this point, there are no overflowing nonterminal vertices, so the algorithm terminates. The resulting flow has value $1$ (only the unit sent along $s\\to v\\to t$ remains). Yet there is a residual $s\\to t$ path $s\\to u\\to v\\to t$ with positive residual capacity on each edge, so the flow is not maximum. This shows that with $h(s)=|V|-2$, the algorithm can terminate without finding a maximum flow.\n\nTherefore:\n- It terminates (so B is false).\n- It need not find the maximum flow (so A is false and C is correct).\n- Pushes from $s$ are not required by the main loop (so D is false).\n- Pushing back to $s$ and even making $e(s)>0$ can occur in standard push-relabel and does not violate any fundamental invariant that would cause a crash (so E is false).\n\nHence the most accurate description is that the algorithm will terminate but is not guaranteed to find the maximum flow.", "answer": "$$\\boxed{C}$$", "id": "1529590"}]}