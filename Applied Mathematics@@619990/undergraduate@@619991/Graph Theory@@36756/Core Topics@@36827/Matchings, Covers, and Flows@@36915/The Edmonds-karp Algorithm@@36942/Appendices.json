{"hands_on_practices": [{"introduction": "Mastering any algorithm begins with understanding its fundamental mechanics. This first practice exercise guides you through a manual trace of the initial steps of the Edmonds-Karp algorithm. By methodically applying Breadth-First Search (BFS) to find the shortest augmenting paths and updating the residual graph, you will build a solid intuition for how the algorithm progressively increases network flow. This foundational skill is essential for diagnosing the algorithm's behavior in more complex networks [@problem_id:1540089].", "problem": "An intelligence agency is analyzing a communication network represented by a directed graph. The nodes are operatives, and the directed edges represent secure one-way communication channels. The capacity of each channel is exactly one data packet per unit of time. The agency wants to determine the data flow from a source operative, 'HQ', to a target operative, 'Target'.\n\nThe network is defined by the following channels (edges):\n- HQ to Alpha\n- HQ to Bravo\n- Alpha to Charlie\n- Alpha to Delta\n- Bravo to Alpha\n- Bravo to Delta\n- Charlie to Target\n- Delta to Echo\n- Echo to Charlie\n- Echo to Target\n\nYou are tasked with analyzing the flow using the Edmonds-Karp algorithm, which finds augmenting paths via a Breadth-First Search (BFS) on the residual graph. Assume that when the BFS must choose between multiple nodes at the same distance from the source to add to its queue, it adds them in lexicographical (alphabetical) order.\n\nCalculate the total flow from HQ to Target after the first two path augmentations have been completed.", "solution": "We model the problem as a unit-capacity directed network and apply the Edmonds-Karp algorithm, which repeatedly finds a shortest augmenting path from the source to the sink via a BFS in the residual graph, breaking ties among equally distant nodes in lexicographical order.\n\nAll capacities are $1$, so for any simple $s$–$t$ path in the residual graph, the bottleneck (minimum residual capacity along the path) is $1$. We denote the residual capacity by $c_{r}(\\cdot,\\cdot)$.\n\nInitial residual graph equals the given graph. Perform the first BFS from HQ:\n- Start with HQ in the queue. From HQ, the residual neighbors are Alpha and Bravo; enqueue in alphabetical order: Alpha, then Bravo. Parents set: $\\text{parent}(\\text{Alpha})=\\text{HQ}$, $\\text{parent}(\\text{Bravo})=\\text{HQ}$.\n- Dequeue Alpha. Its residual neighbors are Charlie and Delta; enqueue Charlie, then Delta. Set $\\text{parent}(\\text{Charlie})=\\text{Alpha}$, $\\text{parent}(\\text{Delta})=\\text{Alpha}$.\n- Dequeue Bravo. Its neighbors Alpha and Delta are already discovered; no change.\n- Dequeue Charlie. Its residual neighbor Target is discovered; set $\\text{parent}(\\text{Target})=\\text{Charlie}$ and stop BFS.\n\nThe first augmenting path is HQ → Alpha → Charlie → Target. The augmentation amount is\n$$\n\\Delta f_{1}=\\min\\{c_{r}(\\text{HQ},\\text{Alpha}),\\,c_{r}(\\text{Alpha},\\text{Charlie}),\\,c_{r}(\\text{Charlie},\\text{Target})\\}=1.\n$$\nUpdate the residual graph along these edges: each used forward edge gets residual capacity $0$ and a unit-capacity reverse edge is created.\n\nPerform the second BFS on the updated residual graph:\n- From HQ, only Bravo has positive residual capacity; enqueue Bravo. Set $\\text{parent}(\\text{Bravo})=\\text{HQ}$.\n- Dequeue Bravo. Its residual neighbors are Alpha and Delta; enqueue Alpha, then Delta. Set $\\text{parent}(\\text{Alpha})=\\text{Bravo}$, $\\text{parent}(\\text{Delta})=\\text{Bravo}$.\n- Dequeue Alpha. Its residual neighbors include Delta (forward) and HQ (reverse), but Delta is already discovered and HQ is the source; no new nodes enqueued.\n- Dequeue Delta. Its residual neighbor Echo is enqueued. Set $\\text{parent}(\\text{Echo})=\\text{Delta}$.\n- Dequeue Echo. Its residual neighbors are Charlie and Target; enqueue Charlie, then Target. Upon discovering Target, set $\\text{parent}(\\text{Target})=\\text{Echo}$ and stop BFS.\n\nThe second augmenting path is HQ → Bravo → Delta → Echo → Target. The augmentation amount is\n$$\n\\Delta f_{2}=\\min\\{c_{r}(\\text{HQ},\\text{Bravo}),\\,c_{r}(\\text{Bravo},\\text{Delta}),\\,c_{r}(\\text{Delta},\\text{Echo}),\\,c_{r}(\\text{Echo},\\text{Target})\\}=1.\n$$\n\nAfter completing these two augmentations, the total flow value from HQ to Target is\n$$\n|f|=\\Delta f_{1}+\\Delta f_{2}=1+1=2.\n$$", "answer": "$$\\boxed{2}$$", "id": "1540089"}, {"introduction": "A key insight of modern flow algorithms is that finding the maximum flow may require \"undoing\" a previous flow decision. This exercise is specifically designed to highlight the crucial role of backward edges in the residual graph, which represent the option to reroute flow. By working through a scenario where the only augmenting path involves pushing flow back against an existing path, you will gain a deeper understanding of the flexibility and power that residual graphs bring to the Edmonds-Karp algorithm [@problem_id:1540106].", "problem": "Consider a flow network represented by a directed graph $G = (V, E)$, where the set of vertices is $V = \\{s, t, a, b\\}$. The vertex $s$ is the source and $t$ is the sink. The network has five directed edges with the following integer capacities:\n- $c(s, a) = 20$\n- $c(s, b) = 20$\n- $c(b, a) = 20$\n- $c(a, t) = 20$\n- $c(b, t) = 20$\n\nAn initial, non-zero flow $f$ is established in the network. This flow consists of 20 units sent along the path $s \\rightarrow b \\rightarrow a \\rightarrow t$. That is, $f(s, b) = 20$, $f(b, a) = 20$, and $f(a, t) = 20$. The flow on all other edges is zero. The total value of this initial flow is $|f|=20$.\n\nStarting from this initial flow $f$, the Edmonds-Karp algorithm is applied to find the maximum flow from $s$ to $t$. The first step of the algorithm is to find an augmenting path in the residual graph $G_f$ using a Breadth-First Search (BFS) starting from the source $s$.\n\nDetermine the amount of flow that will be sent along this first augmenting path. Express your answer as an integer.", "solution": "We use the standard residual network construction for a flow $f$ on a capacity graph $(G,c)$. For each directed edge $(u,v)\\in E$ with capacity $c(u,v)$ and current flow $f(u,v)$, the residual capacities are defined by:\n- Forward residual capacity $r_{f}(u,v) = c(u,v) - f(u,v)$.\n- Backward residual capacity $r_{f}(v,u) = f(u,v)$.\n\nThe given capacities and initial flow are:\n- $c(s,a)=20$, $f(s,a)=0$.\n- $c(s,b)=20$, $f(s,b)=20$.\n- $c(b,a)=20$, $f(b,a)=20$.\n- $c(a,t)=20$, $f(a,t)=20$.\n- $c(b,t)=20$, $f(b,t)=0$.\n\nCompute residual capacities:\n- From $s$: $r_{f}(s,a)=20-0=20$, $r_{f}(s,b)=20-20=0$.\n- From $a$: $r_{f}(a,t)=20-20=0$, and the backward residual to $b$ is $r_{f}(a,b)=f(b,a)=20$; also $r_{f}(a,s)=f(s,a)=0$.\n- From $b$: $r_{f}(b,t)=20-0=20$, $r_{f}(b,a)=20-20=0$, and the backward to $s$ is $r_{f}(b,s)=f(s,b)=20$.\n- From $t$: $r_{f}(t,a)=f(a,t)=20$, $r_{f}(t,b)=f(b,t)=0$.\n\nEdmonds-Karp runs a BFS from $s$ over edges with positive residual capacity. Starting at $s$, the only neighbor with positive residual is $a$ via $s \\rightarrow a$. From $a$, the only outgoing residual edge with positive capacity is to $b$ via the backward edge $a \\rightarrow b$. From $b$, there is a forward residual edge to $t$ with positive capacity $b \\rightarrow t$. Therefore, the shortest augmenting path found by BFS is:\n$$\ns \\rightarrow a \\rightarrow b \\rightarrow t.\n$$\nThe augmenting amount is the bottleneck (minimum residual capacity) along this path:\n$$\n\\Delta = \\min\\{r_{f}(s,a),\\, r_{f}(a,b),\\, r_{f}(b,t)\\} = \\min\\{20,\\, 20,\\, 20\\} = 20.\n$$\nThus, the first augmenting path carries $20$ units of additional flow.", "answer": "$$\\boxed{20}$$", "id": "1540106"}, {"introduction": "Real-world networks are not static; their capacities can change due to failures or upgrades. Instead of re-running the entire max-flow computation from scratch, a far more efficient approach is to adapt the existing flow. This advanced problem challenges you to apply the principles of residual graphs to a practical scenario: updating a maximum flow after an edge capacity has decreased. This practice moves beyond simple execution of the algorithm and into the realm of dynamic network optimization, a vital skill for network engineers and logisticians [@problem_id:1540154].", "problem": "A distributed computing network is modeled as a directed graph where nodes are servers and edges are communication links. The capacity of each link, given in Terabits per second (Tbps), represents its maximum data transfer rate. A crucial data synchronization task requires sending the maximum possible data rate from a source server, $S$, to a target server, $T$.\n\nThe network consists of six servers: $S, A, B, C, D, T$. The links and their capacities are defined as follows:\n- $c(S, A) = 10$\n- $c(S, B) = 10$\n- $c(A, B) = 1$\n- $c(A, C) = 7$\n- $c(B, D) = 6$\n- $c(C, D) = 4$\n- $c(C, T) = 9$\n- $c(D, T) = 12$\n\nAn initial analysis using the Edmonds-Karp algorithm determined that the maximum flow (data rate) from $S$ to $T$ is 13 Tbps. The specific flow values, $f(u, v)$, on each link for this maximum flow are:\n- $f(S, A) = 7$\n- $f(S, B) = 6$\n- $f(A, C) = 7$\n- $f(B, D) = 6$\n- $f(C, T) = 7$\n- $f(D, T) = 6$\nFlow on all other links, such as $(A,B)$ and $(C,D)$, is 0.\n\nSuddenly, the primary link between servers $B$ and $D$ is physically damaged, and its capacity $c(B, D)$ catastrophically drops from 6 Tbps to 0 Tbps. To avoid re-running the entire resource-intensive max-flow computation from scratch, you are tasked to devise a more efficient method to determine the new maximum flow.\n\nWhat is the new maximum flow value from $S$ to $T$ after the capacity of link $(B,D)$ is reduced? Express your answer in Tbps.", "solution": "The problem asks for the new maximum flow in a network after a single edge's capacity has decreased. We are given the initial network, its capacities, and a specific maximum flow distribution $f$ with value $|f| = 13$ Tbps.\n\n**Step 1: Identify the Flow Violation**\nThe capacity of the edge $(u, v) = (B, D)$ is reduced from $c(B, D) = 6$ to $c'(B, D) = 0$.\nThe initial flow on this edge is $f(B, D) = 6$.\nThe new capacity is less than the flow currently assigned to it, making the flow $f$ invalid. The amount of the violation, or the excess flow that needs to be removed or rerouted, is:\n$$ \\Delta = f(B, D) - c'(B, D) = 6 - 0 = 6 \\text{ Tbps} $$\n\n**Step 2: Understand the Updating Algorithm**\nWhen we reduce the flow on edge $(B,D)$ by $\\Delta=6$ to match the new capacity, we disrupt flow conservation. Let's check flow conservation at nodes $B$ and $D$ for this new, invalid flow state:\n- At node $B$: The total inflow is $f(S,B) + f(A,B) = 6+0 = 6$. The new outflow towards D is $0$. This creates an excess of 6 units at B.\n- At node $D$: The original inflow from B was 6. The new inflow from B is 0. The outflow is $f(D,T)=6$. This creates a deficit of 6 units at D.\n\nTo restore a valid flow, we must resolve this $\\Delta=6$ imbalance. The excess at B must be removed, and the deficit at D must be filled. The most direct way to do this is to remove the now-invalidated flow from the network entirely. This involves two subproblems in the residual graph $G_f$ of the original valid flow:\n1. Can the excess of 6 at B be \"returned\" to the source S? We calculate the max flow from B to S, $\\delta_{B \\to S}$.\n2. Can the deficit of 6 at D be \"filled\" from the sink T? We calculate the max flow from T to D, $\\delta_{T \\to D}$.\n\nIf we can return all 6 units from B to S (i.e., $\\delta_{B \\to S} \\ge 6$) and fill the deficit of 6 at D from T (i.e., $\\delta_{T \\to D} \\ge 6$), then the entire 6 units of flow that used the B-D link can be cleanly removed from the network. The new total flow will be the original total flow minus this removed amount.\n\n**Step 3: Construct the Residual Graph**\nThe residual graph $G_f$ is built from the original flow $f$. Its capacities are $c_f(x,y) = c(x,y) - f(x,y)$ for forward edges and $c_f(y,x) = f(x,y)$ for backward edges.\n- **Forward residual capacities:**\n  $c_f(S, A) = 10-7=3$\n  $c_f(S, B) = 10-6=4$\n  $c_f(A, B) = 1-0=1$\n  $c_f(A, C) = 7-7=0$\n  $c_f(B, D) = 6-6=0$\n  $c_f(C, D) = 4-0=4$\n  $c_f(C, T) = 9-7=2$\n  $c_f(D, T) = 12-6=6$\n- **Backward residual capacities:**\n  $c_f(A, S) = 7$\n  $c_f(B, S) = 6$\n  $c_f(C, A) = 7$\n  $c_f(D, B) = 6$\n  $c_f(T, C) = 7$\n  $c_f(T, D) = 6$\n\n**Step 4: Calculate Rerouting Flows**\nWe have an excess of $\\Delta=6$ at $B$ and a deficit of $\\Delta=6$ at $D$.\n\n**Subproblem 1: Max flow from B to S in $G_f$.**\nWe need to find paths from $B$ to $S$ and their capacities.\n- Path 1: A direct backward edge $B \\to S$. Its capacity is $c_f(B, S) = f(S, B) = 6$.\n- Since there are no other residual paths from B that lead to S, the max flow from $B$ to $S$ is $\\delta_{B \\to S} = 6$.\n\n**Subproblem 2: Max flow from T to D in $G_f$.**\nWe need to find paths from $T$ to $D$ and their capacities.\n- Path 1: A direct backward edge $T \\to D$. Its capacity is $c_f(T, D) = f(D, T) = 6$.\n- Path 2: $T \\to C \\to D$.\n  - Edge $T \\to C$ is a backward edge with capacity $c_f(T, C) = f(C, T) = 7$.\n  - Edge $C \\to D$ is a forward edge with capacity $c_f(C, D) = c(C, D) - f(C, D) = 4 - 0 = 4$.\n  - The bottleneck capacity of this path is $\\min(7, 4) = 4$.\n- The two paths, $T \\to D$ and $T \\to C \\to D$, are edge-disjoint from each other, so we can sum their capacities to find the max flow.\n- The max flow from $T$ to $D$ is $\\delta_{T \\to D} = 6 + 4 = 10$.\n\n**Step 5: Calculate the New Maximum Flow Value**\nWe have an excess of $\\Delta=6$ at $B$ that needs to be routed away. We found that we can route up to $\\delta_{B \\to S}=6$ from $B$ to $S$. Since $6 \\le 6$, we can resolve the entire excess at $B$ by returning it to the source.\nWe have a deficit of $\\Delta=6$ at $D$ that needs to be filled. We found we can source up to $\\delta_{T \\to D}=10$ from $T$ to $D$. Since $6 \\le 10$, we can fill the entire deficit at $D$.\n\nSince we can fully resolve the imbalance of $\\Delta=6$, the total network flow must be reduced by exactly this amount.\n- Original max flow value: $|f| = 13$ Tbps.\n- Reduction amount: $\\Delta_{reduction} = 6$ Tbps.\n- New max flow value: $|f'| = |f| - \\Delta_{reduction} = 13 - 6 = 7$ Tbps.\n\nThe logic is that the 6 units of flow that previously went through the S-B-D-T path are now blocked. We were able to \"return\" the 6 units from B back to the source S, and \"pull\" 6 units to D from the sink T, effectively canceling this path's contribution. The new maximum flow is what's left. The only remaining flow path from the original maximum flow is S-A-C-T, which carries 7 Tbps. No new augmenting paths can be created, so the new maximum flow is 7 Tbps.", "answer": "$$\\boxed{7}$$", "id": "1540154"}]}