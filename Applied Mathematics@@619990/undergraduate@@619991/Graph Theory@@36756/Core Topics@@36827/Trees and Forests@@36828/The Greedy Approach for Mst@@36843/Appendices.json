{"hands_on_practices": [{"introduction": "Kruskal's algorithm provides a classic illustration of the greedy method, where we build a solution by making locally optimal choices at each step. This exercise challenges you to apply this algorithm to a practical network design problem, focusing on the crucial step of identifying and rejecting an edge that would form a cycle. Mastering this process is key to understanding how a sequence of simple, greedy decisions culminates in a globally optimal Minimum Spanning Tree.", "problem": "A team of engineers is designing a cost-effective communication network to connect seven remote data centers, labeled A, B, C, D, E, F, and G. The cost of establishing a direct link between any two centers is given. The network is represented as a weighted, undirected graph where the vertices are the data centers and the edges are the potential links with their associated costs as weights. The list of all possible links and their costs is as follows:\n\n*   (B, C) with cost 10\n*   (F, G) with cost 7\n*   (A, F) with cost 11\n*   (A, C) with cost 5\n*   (C, D) with cost 3\n*   (D, G) with cost 8\n*   (E, F) with cost 4\n*   (A, B) with cost 2\n*   (E, G) with cost 9\n*   (B, D) with cost 6\n\nTo minimize the total cost, the team decides to build a Minimum Spanning Tree (MST) for this network using Kruskal's algorithm. Which of the following edges is the first one to be considered by the algorithm but is ultimately rejected because its inclusion would form a cycle?\n\nA. (B, C)\n\nB. (D, G)\n\nC. (E, G)\n\nD. (A, C)\n\nE. (B, D)", "solution": "Kruskal's algorithm selects edges in nondecreasing order of weight, adding an edge if and only if it connects two different components; an edge is rejected precisely when its endpoints are already connected (which would create a cycle).\n\nOrder the edges by weight:\n$$(A,B):2,\\ (C,D):3,\\ (E,F):4,\\ (A,C):5,\\ (B,D):6,\\ (F,G):7,\\ (D,G):8,\\ (E,G):9,\\ (B,C):10,\\ (A,F):11.$$\n\nProceed step by step, maintaining the forest of components:\n1. Consider $(A,B)$ with cost $2$: components $\\{A,B\\},\\ \\{C\\},\\ \\{D\\},\\ \\{E\\},\\ \\{F\\},\\ \\{G\\}$. Add it.\n2. Consider $(C,D)$ with cost $3$: components $\\{A,B\\},\\ \\{C,D\\},\\ \\{E\\},\\ \\{F\\},\\ \\{G\\}$. Add it.\n3. Consider $(E,F)$ with cost $4$: components $\\{A,B\\},\\ \\{C,D\\},\\ \\{E,F\\},\\ \\{G\\}$. Add it.\n4. Consider $(A,C)$ with cost $5$: this connects $\\{A,B\\}$ and $\\{C,D\\}$, so add it. Components become $\\{A,B,C,D\\},\\ \\{E,F\\},\\ \\{G\\}$.\n5. Consider $(B,D)$ with cost $6$: both $B$ and $D$ are already in the same component $\\{A,B,C,D\\}$, so adding $(B,D)$ would create a cycle. This is the first edge that is considered and rejected.\n\nTherefore, the first rejected edge is $(B,D)$, which corresponds to option E.", "answer": "$$\\boxed{E}$$", "id": "1542323"}, {"introduction": "A Minimum Spanning Tree guarantees the cheapest way to connect all nodes in a network, but does this mean it also provides the shortest path between any two individual nodes? This critical question delves into the fundamental distinction between the global optimization goal of an MST and the local optimization of a shortest path. By analyzing the relationship between the path cost within an MST and the true shortest path, you will gain a deeper appreciation for the specific problems that greedy algorithms are designed to solve.", "problem": "A network engineering team is tasked with designing a backbone for a regional internet service provider. The design involves connecting a set of $n$ server hubs. The cost of laying a direct fiber-optic cable between any two hubs $u$ and $v$ is given by a positive weight $w(u,v)$, which is proportional to the distance. To minimize the total infrastructure cost, the team decides to build a network corresponding to a Minimum Spanning Tree (MST) of the complete graph of all $n$ hubs, where the vertices are the hubs and the edge weights are the costs $w(u,v)$. An MST connects all hubs with the minimum possible total cable cost.\n\nAfter the MST-based network is constructed, a data packet needs to be sent from a source hub $S$ to a destination hub $D$. The path for the packet is constrained to only use the cables built as part of the MST. Let the total cost (sum of edge weights) of this unique path in the MST be $C_{\\mathrm{MST}}(S, D)$.\n\nNow, consider the original hypothetical scenario where a direct cable could have been laid between *any* two hubs. The true shortest path in this original complete graph would have a cost $C_{\\mathrm{Shortest}}(S, D)$, which represents the minimum possible cost to get a packet from $S$ to $D$ if any connection were possible.\n\nWhich of the following statements correctly describes the general relationship between $C_{\\mathrm{MST}}(S, D)$ and $C_{\\mathrm{Shortest}}(S, D)$ for any arbitrary pair of hubs $S$ and $D$ in any such network?\n\nA. $C_{\\mathrm{MST}}(S, D)$ is always equal to $C_{\\mathrm{Shortest}}(S, D)$.\n\nB. $C_{\\mathrm{MST}}(S, D)$ is always strictly greater than $C_{\\mathrm{Shortest}}(S, D)$ unless $S$ and $D$ are directly connected by an edge in the MST.\n\nC. It is possible for $C_{\\mathrm{MST}}(S, D)$ to be strictly greater than $C_{\\mathrm{Shortest}}(S, D)$. This can occur because the greedy choice of an MST algorithm is to add the next cheapest edge to the growing tree, which does not guarantee that the resulting path between any two nodes is the shortest possible.\n\nD. It is possible for $C_{\\mathrm{MST}}(S, D)$ to be strictly less than $C_{\\mathrm{Shortest}}(S, D)$, since the MST algorithm is specifically designed to find the minimum cost structure.", "solution": "Let $G=(V,E,w)$ be the complete weighted graph on the $n$ hubs, with $w(u,v)>0$ for all $\\{u,v\\}\\in E$. Let $T=(V,E_{T})$ be a minimum spanning tree (MST) of $G$.\n\nFor any two hubs $S,D\\in V$, define:\n- The shortest-path cost in $G$ as\n$$\nC_{\\mathrm{Shortest}}(S,D) \\equiv d_{G}(S,D) = \\min_{P\\in\\mathcal{P}_{G}(S,D)} \\sum_{e\\in P} w(e),\n$$\nwhere $\\mathcal{P}_{G}(S,D)$ is the set of all $S$–$D$ paths in $G$.\n- The MST-path cost as\n$$\nC_{\\mathrm{MST}}(S,D) \\equiv d_{T}(S,D) = \\sum_{e\\in P_{T}(S,D)} w(e),\n$$\nwhere $P_{T}(S,D)$ is the unique $S$–$D$ path in the tree $T$.\n\nSince $E_{T}\\subseteq E$, the unique path $P_{T}(S,D)$ is one candidate path among all $S$–$D$ paths in $G$. Therefore,\n$$\nd_{G}(S,D) \\leq d_{T}(S,D),\n$$\ni.e.,\n$$\nC_{\\mathrm{Shortest}}(S,D) \\leq C_{\\mathrm{MST}}(S,D)\n$$\nfor all $S,D\\in V$. This immediately implies that $C_{\\mathrm{MST}}(S,D)$ can never be strictly less than $C_{\\mathrm{Shortest}}(S,D)$, so option D is false.\n\nTo see that equality need not hold (so A is false) and that strict inequality can occur (supporting C), construct a symbolic example with three vertices $a,b,c$ and edge weights parameterized by $x>0$ and $y>0$ satisfying $x<y<2x$. Let\n$$\nw(a,b)=x,\\quad w(b,c)=x,\\quad w(a,c)=y.\n$$\nThe MST consists of the two lightest edges, so $E_{T}=\\{\\{a,b\\},\\{b,c\\}\\}$. Then\n$$\nC_{\\mathrm{MST}}(a,c)=d_{T}(a,c)=x+x=2x,\n$$\nwhile in $G$ the shortest $a$–$c$ path has cost\n$$\nC_{\\mathrm{Shortest}}(a,c)=d_{G}(a,c)=\\min\\{y,2x\\}=y,\n$$\nand because $y<2x$, we have $C_{\\mathrm{MST}}(a,c)>C_{\\mathrm{Shortest}}(a,c)$. This proves that strict inequality is possible, which matches option C.\n\nTo refute B (which claims strict inequality unless $S$ and $D$ are adjacent in the MST), modify the same construction to $y=2x$. Then $a$ and $c$ are not adjacent in $T$, yet\n$$\nC_{\\mathrm{MST}}(a,c)=2x=C_{\\mathrm{Shortest}}(a,c),\n$$\nso equality can hold even when $S$ and $D$ are not directly connected by an MST edge. Hence B is false.\n\nTherefore, the correct statement is that it is possible for $C_{\\mathrm{MST}}(S,D)$ to be strictly greater than $C_{\\mathrm{Shortest}}(S,D)$ because the MST’s greedy objective (minimizing total tree weight) does not ensure shortest-path optimality between arbitrary pairs. This is exactly option C.", "answer": "$$\\boxed{C}$$", "id": "1542324"}, {"introduction": "While finding the Minimum Spanning Tree gives us the single most cost-effective network, real-world scenarios often demand considering alternatives for resilience. This problem challenges you to find the second-cheapest spanning tree, moving beyond simple algorithm application to strategic analysis. To solve it, you will leverage the cycle property of MSTs, demonstrating how a deep understanding of the optimal solution allows us to intelligently explore other valid, near-optimal configurations.", "problem": "A technology company is designing a next-generation distributed computing network to link its six major data centers, labeled A, B, C, D, E, and F. The cost to establish a high-bandwidth connection between any two centers is determined by geographic and logistical factors. A connection is only feasible between specific pairs of centers, and all possible connection costs are distinct. The available connections and their associated costs, in millions of dollars, are as follows:\n\n- (A, B): 3\n- (A, C): 5\n- (A, D): 8\n- (B, C): 4\n- (B, E): 7\n- (B, F): 10\n- (C, D): 2\n- (C, E): 12\n- (C, F): 9\n- (D, E): 11\n- (D, F): 6\n- (E, F): 1\n\nA valid network must ensure that all data centers are connected, directly or indirectly, while containing no cyclical paths (i.e., the network must form a spanning tree). The company has already identified the network with the absolute minimum total cost. For strategic planning and resilience analysis, they now need to determine the total cost of the *second-cheapest* valid network configuration.\n\nCalculate the total cost of this second-cheapest network. Express your answer as a single number in millions of dollars.", "solution": "We model the data centers and feasible connections as a connected, weighted, undirected graph on vertices $\\{A,B,C,D,E,F\\}$ with distinct edge weights. A valid network with no cycles connecting all vertices is a spanning tree. The minimum spanning tree (MST) can be found by Kruskal's algorithm, which adds edges in strictly increasing order of weight, skipping any edge that would create a cycle, and stops after obtaining $n-1$ edges for $n$ vertices.\n\nSort the edges increasingly by weight:\n$$EF:1,\\ CD:2,\\ AB:3,\\ BC:4,\\ AC:5,\\ DF:6,\\ BE:7,\\ AD:8,\\ CF:9,\\ BF:10,\\ DE:11,\\ CE:12.$$\nApply Kruskal's algorithm step by step:\n- Add $EF$ (no cycle).\n- Add $CD$ (no cycle).\n- Add $AB$ (no cycle).\n- Add $BC$ (no cycle).\n- Skip $AC$ (it would create the cycle $A\\!-\\!B\\!-\\!C\\!-\\!A$).\n- Add $DF$ (it connects the two current components).\n\nWe now have $5$ edges on $6$ vertices, so this forms the MST:\n$$\\{EF,\\,CD,\\,AB,\\,BC,\\,DF\\}$$\nwith total weight\n$$w_{\\text{MST}}=1+2+3+4+6=16.$$\n\nBecause all edge weights are distinct, the MST is unique. The second-cheapest spanning tree can be obtained by considering each non-tree edge $e=\\{u,v\\}$ with weight $w(e)$, locating the unique path $P$ between $u$ and $v$ in the MST, finding $w_{\\max}(P)$, the maximum edge weight on $P$, and forming a new tree by replacing that maximum-weight edge on $P$ with $e$. The resulting total weight is\n$$w_{\\text{MST}}+w(e)-w_{\\max}(P),$$\nand, due to uniqueness, $w(e)>w_{\\max}(P)$ so the increase is positive. The second-best tree corresponds to the minimal such increase over all non-tree edges.\n\nList the non-MST edges and compute the increases:\n- $AC:5$, path $A\\!-\\!B\\!-\\!C$ has edge weights $3,4$, so $w_{\\max}=4$, increase $=5-4=1$.\n- $BE:7$, path $B\\!-\\!C\\!-\\!D\\!-\\!F\\!-\\!E$ has edge weights $4,2,6,1$, so $w_{\\max}=6$, increase $=7-6=1$.\n- $AD:8$, path $A\\!-\\!B\\!-\\!C\\!-\\!D$ has edge weights $3,4,2$, so $w_{\\max}=4$, increase $=8-4=4$.\n- $CF:9$, path $C\\!-\\!D\\!-\\!F$ has edge weights $2,6$, so $w_{\\max}=6$, increase $=9-6=3$.\n- $BF:10$, path $B\\!-\\!C\\!-\\!D\\!-\\!F$ has edge weights $4,2,6$, so $w_{\\max}=6$, increase $=10-6=4$.\n- $DE:11$, path $D\\!-\\!F\\!-\\!E$ has edge weights $6,1$, so $w_{\\max}=6$, increase $=11-6=5$.\n- $CE:12$, path $C\\!-\\!D\\!-\\!F\\!-\\!E$ has edge weights $2,6,1$, so $w_{\\max}=6$, increase $=12-6=6$.\n\nThe minimal increase is $1$, achieved by $AC$ and by $BE$. Therefore the second-cheapest spanning tree has total cost\n$$16+1=17.$$", "answer": "$$\\boxed{17}$$", "id": "1542331"}]}