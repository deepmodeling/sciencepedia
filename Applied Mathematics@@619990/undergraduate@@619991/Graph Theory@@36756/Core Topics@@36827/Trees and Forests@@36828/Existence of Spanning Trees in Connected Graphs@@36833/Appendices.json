{"hands_on_practices": [{"introduction": "Before we can build something correctly, we must first have a precise definition of what we are building. This first exercise challenges you to analyze a proposed algorithm for finding a spanning tree and identify its fundamental flaw. By spotting the error, you will reinforce your understanding of the essential properties that a subgraph must have to be considered a true spanning tree for a given graph.", "problem": "In graph theory, a **graph** $G=(V, E)$ is an ordered pair $(V, E)$, where $V$ is a set of vertices and $E$ is a set of edges connecting pairs of vertices. This problem considers only simple, undirected graphs, meaning edges do not have a direction and there is at most one edge between any two vertices. A graph is **connected** if there is a path between any two of its vertices.\n\nA **subgraph** of $G$ is a graph whose vertices and edges are subsets of the vertices and edges of $G$. A **spanning subgraph** is a subgraph that includes all the vertices of the original graph $G$. A **tree** is a connected graph that contains no cycles. A **spanning tree** of a connected graph $G$ is a spanning subgraph that is also a tree.\n\nA computer science student proposes the following algorithm to find a spanning tree for any given non-trivial (more than one vertex), simple, connected graph $G=(V,E)$:\n\n**Algorithm:**\n1.  Choose an arbitrary vertex $v \\in V$.\n2.  Construct a subgraph $H=(V', E')$, where the vertex set $V'$ consists of $v$ and all vertices adjacent to $v$ in $G$. The edge set $E'$ consists of all edges from $E$ that are incident to $v$.\n\nThe student claims that the resulting subgraph $H$ is always a spanning tree of the original graph $G$. However, this claim is flawed. Which of the following statements correctly identifies the fundamental flaw in the student's reasoning?\n\nA. The subgraph $H$ is not guaranteed to be a spanning subgraph of $G$.\nB. The subgraph $H$ is not guaranteed to be acyclic.\nC. The subgraph $H$ is not guaranteed to be connected.\nD. The algorithm only works if the chosen vertex $v$ is the vertex with the minimum degree in $G$.\nE. The number of edges in $H$ is not guaranteed to be one less than the number of vertices in $G$.", "solution": "Let $G=(V,E)$ be a non-trivial, simple, connected graph. The algorithm chooses $v\\in V$ and constructs $H=(V',E')$ with\n$$\nV'=\\{v\\}\\cup N_{G}(v),\\qquad E'=\\{\\,e\\in E:\\text{$e$ is incident to $v$}\\,\\},\n$$\nwhere $N_{G}(v)$ is the set of vertices adjacent to $v$ in $G$.\n\nFirst, verify connectivity and acyclicity of $H$. For any $u\\in V'\\setminus\\{v\\}$, by construction the edge $vu\\in E'$, so every vertex in $V'$ is adjacent to $v$. Hence $H$ is connected. Moreover, all edges in $E'$ are incident to $v$, and no edges among the neighbors are included; therefore no cycle can exist in $H$, since any cycle not entirely incident to $v$ would require an edge between two neighbors of $v$, which is absent. Thus $H$ is a star $K_{1,d_{G}(v)}$, a tree.\n\nCount vertices and edges of $H$:\n$$\n|V'|=d_{G}(v)+1,\\qquad |E'|=d_{G}(v),\n$$\nso $|E'|=|V'|-1$. Therefore $H$ is a tree on $V'$. However, a spanning tree of $G$ must be a tree whose vertex set is all of $V$. The construction only guarantees $V'\\subseteq V$, and $V'=V$ holds if and only if $d_{G}(v)=|V|-1$, i.e., $v$ is adjacent to every other vertex. In a general connected graph this is not guaranteed.\n\nTherefore, the fundamental flaw is that $H$ need not be spanning. Statement A correctly identifies this. While it is also true that $|E'|$ need not equal $|V|-1$ (statement E), that is a consequence of $H$ not being spanning, not the fundamental issue.", "answer": "$$\\boxed{A}$$", "id": "1502736"}, {"introduction": "Having established the precise definition of a spanning tree, let's explore a simple and deterministic method to construct one. This practice considers a fully connected network, a complete graph $K_n$, and walks through creating a specific 'star-shaped' spanning tree [@problem_id:1502709]. Analyzing the properties of this resulting structure provides a concrete proof that spanning trees exist and introduces a fundamental topology in network design.", "problem": "A systems architect is tasked with designing a basic communication network connecting a set of $n$ identical processing nodes, where $n \\ge 2$. The initial topology is a complete graph, denoted $K_n$, where every node is directly connected to every other node. To minimize operational costs while maintaining full connectivity, the architect decides to implement a spanning tree structure. A spanning tree is a subgraph that includes all $n$ nodes and is a tree (i.e., it is connected and has no cycles).\n\nThe architect employs a simple, deterministic algorithm to create this spanning tree:\n1. One node is arbitrarily selected and designated as the 'primary hub'. Let's label this node $v_1$.\n2. The remaining $n-1$ nodes are labeled $v_2, v_3, \\dots, v_n$.\n3. An edge is created between the primary hub $v_1$ and every other node $v_i$ for $i=2, 3, \\dots, n$. No other edges are included in the spanning tree.\n\nThe number of direct connections a node has in this new network is called its degree. For the spanning tree constructed using this algorithm, determine the maximum degree found among all $n$ nodes. Express your answer as a formula in terms of $n$.", "solution": "A spanning tree on $n$ vertices must have exactly $n-1$ edges. The algorithm connects the primary hub $v_1$ to every other node $v_i$ for $i=2,\\dots,n$, creating exactly $n-1$ edges, all incident to $v_1$. Therefore,\n$$\n\\deg(v_1)=n-1\n$$\nEach non-hub node $v_i$ for $i \\ge 2$ receives exactly one edge, namely $(v_1,v_i)$, so\n$$\n\\deg(v_i)=1 \\quad \\text{for all } i=2,\\dots,n\n$$\nHence, the maximum degree among all nodes is achieved at $v_1$ and equals $n-1$. As a consistency check, the handshaking lemma gives\n$$\n\\sum_{i=1}^{n} \\deg(v_i) = 2(n-1) = (n-1) + (n-1)\\cdot 1,\n$$\nwhich matches the degrees computed above. Therefore, the maximum degree is $n-1$.", "answer": "$$\\boxed{n-1}$$", "id": "1502709"}, {"introduction": "A connected graph that is not itself a tree contains cycles, which implies the existence of multiple, distinct spanning trees. This exercise provides a hands-on look at the fundamental transformation process between them [@problem_id:1502730]. By adding an edge to a given spanning tree and then removing another to break the newly formed cycle, you will practice the 'edge-swapping' technique that underpins many advanced graph algorithms and proofs.", "problem": "Consider an undirected, connected graph $G$ with a vertex set $V = \\{v_1, v_2, v_3, v_4, v_5, v_6\\}$ and an edge set $E(G) = \\{\\{v_1, v_2\\}, \\{v_1, v_3\\}, \\{v_2, v_3\\}, \\{v_2, v_4\\}, \\{v_3, v_5\\}, \\{v_4, v_5\\}, \\{v_4, v_6\\}, \\{v_5, v_6\\}\\}$.\n\nLet $T$ be a specific spanning tree of $G$ with the edge set $E(T) = \\{\\{v_1, v_2\\}, \\{v_2, v_4\\}, \\{v_4, v_6\\}, \\{v_4, v_5\\}, \\{v_5, v_3\\}\\}$.\n\nA new graph, $T'$, can be formed by adding an edge from $G$ that is not in $T$ and subsequently removing an edge from $T$ to break the resulting cycle. Suppose we add the edge $e = \\{v_1, v_3\\}$ to the tree $T$. Which of the following edges, if removed from $T$, would result in $T'$ being a valid spanning tree?\n\nA. $\\{v_4, v_6\\}$\nB. $\\{v_2, v_3\\}$\nC. $\\{v_2, v_4\\}$\nD. $\\{v_1, v_4\\}$", "solution": "We use the fundamental property: adding any edge $e$ to a tree $T$ creates exactly one simple cycle, and removing any edge on that cycle (other than $e$) results in a new spanning tree.\n\nGiven $T$ with\n$$\nE(T)=\\{\\{v_1,v_2\\},\\{v_2,v_4\\},\\{v_4,v_6\\},\\{v_4,v_5\\},\\{v_5,v_3\\}\\},\n$$\nthe unique path in $T$ between $v_1$ and $v_3$ is\n$$\nv_1-v_2-v_4-v_5-v_3,\n$$\nwith edge set\n$$\n\\{\\{v_1,v_2\\},\\{v_2,v_4\\},\\{v_4,v_5\\},\\{v_5,v_3\\}\\}.\n$$\nAfter adding $e=\\{v_1,v_3\\}$, the unique cycle formed is\n$$\nC=\\{\\{v_1,v_3\\},\\{v_1,v_2\\},\\{v_2,v_4\\},\\{v_4,v_5\\},\\{v_5,v_3\\}\\}.\n$$\nHence, removing any one of $\\{{v_1},{v_2}\\}$, $\\{{v_2},{v_4}\\}$, $\\{{v_4},{v_5}\\}$, or $\\{{v_5},{v_3}\\}$ yields a valid spanning tree.\n\nComparing with the options:\n- A. $\\{v_4,v_6\\}$ is not on the cycle, and removing it disconnects $v_6$, so it is invalid.\n- B. $\\{v_2,v_3\\}$ is not in $T$, so it cannot be the edge removed from $T$.\n- C. $\\{v_2,v_4\\}$ is on the cycle, so removing it yields a valid spanning tree.\n- D. $\\{v_1,v_4\\}$ is not in $T$ (and not even in $E(G)$), so it cannot be removed from $T$.\n\nTherefore, the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1502730"}]}