{"hands_on_practices": [{"introduction": "While Cayley's formula gives us the total count of labeled trees, many practical applications in fields like network design require us to count trees that meet specific criteria. This first exercise provides a foundational hands-on experience by using the powerful correspondence between labeled trees and Prüfer sequences. By translating vertex degree constraints into properties of these sequences, you will develop the essential skill of counting trees that satisfy specific nodal requirements [@problem_id:1486040].", "problem": "In the study of network topologies, a fundamental structure is the tree. A labeled tree on $n$ vertices consists of a set of vertices $V = \\{1, 2, \\dots, n\\}$ and a set of $n-1$ edges connecting these vertices such that the resulting graph is connected and contains no cycles.\n\nThe degree of a vertex is the number of edges incident to it. A vertex is called a leaf if its degree is exactly 1.\n\nConsider labeled trees on $n$ vertices, where $n \\geq 3$. Let $k$ be an integer satisfying $1 \\leq k \\leq n-2$. Your task is to find a general formula, expressed in terms of $n$ and $k$, for the total number of distinct labeled trees on $n$ vertices that simultaneously satisfy the following two conditions:\n1.  The vertex labeled '1' is a leaf.\n2.  The vertex labeled '2' has a degree of exactly $k$.", "solution": "Use the Prüfer code for labeled trees: each tree on $n$ labeled vertices corresponds bijectively to a sequence of length $n-2$ over the alphabet $\\{1,2,\\dots,n\\}$. In this encoding, the degree of a vertex $v$ equals the number of occurrences of $v$ in the Prüfer sequence plus $1$. Therefore:\n- The condition that vertex $1$ is a leaf is equivalent to vertex $1$ appearing $0$ times in the Prüfer sequence.\n- The condition that vertex $2$ has degree exactly $k$ is equivalent to vertex $2$ appearing exactly $k-1$ times in the Prüfer sequence.\n\nWe must count the number of sequences of length $n-2$ over $\\{1,2,\\dots,n\\}$ in which:\n- Symbol $1$ appears exactly $0$ times,\n- Symbol $2$ appears exactly $k-1$ times,\n- The remaining $n-k-1$ positions are filled with symbols from $\\{3,4,\\dots,n\\}$.\n\nFirst choose the positions of the $k-1$ copies of $2$, which can be done in $\\binom{n-2}{k-1}$ ways. The remaining $n-k-1$ positions can each be filled independently with any of the $n-2$ symbols in $\\{3,4,\\dots,n\\}$, giving $(n-2)^{n-k-1}$ possibilities. By the bijection, each such sequence corresponds to a unique labeled tree satisfying the two conditions. Thus the total number is\n$$\n\\binom{n-2}{k-1}(n-2)^{n-k-1}.\n$$\n\nAs a cross-check via the degree-sequence formula, the number of labeled trees with degree sequence $(d_{1},d_{2},\\dots,d_{n})$ (with $\\sum d_{i}=2(n-1)$) is $(n-2)!/\\prod_{i=1}^{n}(d_{i}-1)!$. Setting $d_{1}=1$, $d_{2}=k$, and writing $x_{i}=d_{i}-1\\geq 0$ for $i\\geq 3$, the $x_{i}$ sum to $n-k-1$. Summing over all such $(x_{3},\\dots,x_{n})$ yields\n$$\n\\frac{(n-2)!}{(k-1)!}\\sum_{x_{3}+\\cdots+x_{n}=n-k-1}\\frac{1}{\\prod_{i=3}^{n}x_{i}!}\n=\\frac{(n-2)!}{(k-1)!(n-k-1)!}(n-2)^{n-k-1}\n=\\binom{n-2}{k-1}(n-2)^{n-k-1},\n$$\nwhich matches the Prüfer-sequence count.", "answer": "$$\\boxed{\\binom{n-2}{k-1}(n-2)^{\\,n-k-1}}$$", "id": "1486040"}, {"introduction": "Building on the direct application of Prüfer sequences, we can now explore trees defined by more global or extremal properties, such as the maximum degree found in the entire graph. This practice challenges you to solve for the number of trees that feature a single, dominant \"hub\" node connected to nearly all other nodes. Successfully solving this requires combining combinatorial counting with logical deductions about the structural consequences of such a high degree, pushing your problem-solving skills to the next level [@problem_id:1486033].", "problem": "In the design of decentralized communication networks, tree topologies are often used to ensure connectivity without redundant paths. Consider a network of $n$ nodes, where each node is distinctly labeled. A specific set of network designs are characterized by having a 'pseudo-centralized' structure. This structure is defined by the property that the most connected node (the one with the highest degree) is linked to exactly $n-2$ other nodes. For any integer $n \\ge 5$, determine the total number of distinct labeled tree networks that satisfy this condition. Express your answer as a formula in terms of $n$.", "solution": "We work with labeled trees on the vertex set $\\{1,2,\\ldots,n\\}$ and use Prüfer codes. For a labeled tree on $n$ vertices, its Prüfer code is a sequence of length $n-2$ over $\\{1,\\ldots,n\\}$, and the degree of a vertex $i$ satisfies\n$$\n\\deg(i)=1+\\text{(number of occurrences of $i$ in the Prüfer sequence)}.\n$$\n\nWe seek trees whose maximum degree is exactly $n-2$. First, for $n\\geq 5$, there cannot be two distinct vertices with degree $n-2$. Indeed, if two vertices had degree $n-2$, then the sum of degrees would be at least\n$$\n2(n-2)+(n-2)\\cdot 1=3n-6,\n$$\nsince the other $n-2$ vertices have degree at least $1$. But a tree on $n$ vertices has total degree $2(n-1)$, and $3n-6 > 2n-2$ for $n\\geq 5$, a contradiction. Hence, for $n\\geq 5$, there is a unique vertex $v$ with degree $n-2$.\n\nIn the Prüfer code, $\\deg(v)=n-2$ implies that $v$ appears exactly $n-3$ times. Since the sequence has length $n-2$, the remaining $1$ occurrence must belong to exactly one other vertex $w$, while all other vertices appear $0$ times. Thus, the Prüfer sequence consists of exactly two distinct symbols: $v$ appearing $n-3$ times and $w$ appearing once. Conversely, any such Prüfer sequence yields a tree whose maximum degree is $n-2$ (attained uniquely at $v$).\n\nCounting these sequences:\n- Choose $v$ (the unique vertex of degree $n-2$): $n$ choices.\n- Choose $w\\neq v$ (the unique vertex of degree $2$): $n-1$ choices.\n- Choose the position of the single occurrence of $w$ in the Prüfer sequence of length $n-2$: $n-2$ choices.\n\nTherefore, the total number of labeled trees with maximum degree exactly $n-2$ is\n$$\nn(n-1)(n-2).\n$$\n\nThis count is valid for all integers $n\\geq 5$ as required.", "answer": "$$\\boxed{n(n-1)(n-2)}$$", "id": "1486033"}, {"introduction": "Our focus so far has been on vertex degrees, but what if our constraints are about the connections themselves? This final practice introduces a different and highly versatile technique: a generalization of Cayley's formula for counting trees that must contain a specific set of edges. By leveraging this method within a simple inclusion-exclusion framework, you will learn how to enumerate trees based on edge-level constraints, significantly broadening your toolkit for tackling complex graph counting problems [@problem_id:1486060].", "problem": "Consider a set of $n$ distinct labeled vertices, $V = \\{v_1, v_2, \\dots, v_n\\}$, where $n \\ge 3$. A tree on these vertices is an undirected graph that connects all vertices and contains no cycles. The total number of distinct trees that can be formed on these $n$ labeled vertices is given by Cayley's formula as $n^{n-2}$.\n\nYour task is to find the number of labeled trees on the vertex set $V$ that do not simultaneously contain both the edge $\\{v_1, v_2\\}$ and the edge $\\{v_1, v_3\\}$.\n\nProvide a closed-form expression for this number in terms of $n$.", "solution": "We begin with Cayley’s formula: the total number of labeled trees on $n$ distinct labeled vertices is $n^{n-2}$.\n\nWe must subtract the number of trees that contain both edges $\\{v_{1},v_{2}\\}$ and $\\{v_{1},v_{3}\\}$. Consider the fixed forest $F$ consisting of these two edges. Its components are:\n- one component on the vertex set $\\{v_{1},v_{2},v_{3}\\}$ of size $3$ (a tree with $2$ edges),\n- and $n-3$ isolated vertices, each a component of size $1$.\n\nThus, the forest $F$ has $k=n-2$ components with sizes $s_{1}=3$ and $s_{2}=\\dots=s_{k}=1$.\n\nA standard generalization of Cayley’s formula (obtainable via contraction and the weighted Prüfer/Cayley identity) states that the number of labeled trees on $n$ vertices containing a fixed forest $F$ with component sizes $s_{1},\\dots,s_{k}$ is\n$$\nn^{k-2}\\prod_{i=1}^{k}s_{i}.\n$$\nThis follows by contracting each component to a super-vertex to obtain a tree on $k$ labeled super-vertices and summing over all such trees with multiplicative weights $s_{i}^{\\deg(i)}$, which evaluates to $(\\sum s_{i})^{k-2}\\prod s_{i}=n^{k-2}\\prod s_{i}$.\n\nApplying this to $F$ gives the number of trees containing both $\\{v_{1},v_{2}\\}$ and $\\{v_{1},v_{3}\\}$ as\n$$\nn^{(n-2)-2}\\cdot 3=n^{n-4}\\cdot 3=3n^{n-4}.\n$$\n\nTherefore, the number of labeled trees that do not simultaneously contain both edges is\n$$\nn^{n-2}-3n^{n-4}.\n$$", "answer": "$$\\boxed{n^{\\,n-2}-3\\,n^{\\,n-4}}$$", "id": "1486060"}]}