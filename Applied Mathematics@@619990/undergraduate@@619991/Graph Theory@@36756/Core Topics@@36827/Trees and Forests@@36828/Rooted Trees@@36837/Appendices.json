{"hands_on_practices": [{"introduction": "Understanding rooted trees begins with the ability to visualize them from a set of relationships. This foundational exercise challenges you to translate a list of parent-child pairs into a coherent tree structure. By doing so, you will practice applying the core definitions of a tree's components, such as its height, leaves, and the depth of its nodes [@problem_id:1531605].", "problem": "A hierarchical data structure is described by a set of parent-child relationships. The structure consists of nodes labeled with uppercase letters. The relationships are given as a set of ordered pairs `(P, C)`, where `P` is the parent of `C`.\n\nThe set of relationships is: `{(F, B), (F, J), (B, A), (B, D), (D, C), (D, E), (J, G), (J, K), (G, I), (K, H), (K, L)}`.\n\nA few definitions are necessary for this structure:\n- The **root** is the single node that has no parent.\n- A **leaf** is a node that has no children.\n- The **depth** of a node is the number of edges on the unique path from the root to that node. By definition, the depth of the root is 0.\n- The **height** of the entire structure is the maximum depth among all nodes in the structure.\n\nBased on the provided relationships, determine the following three values:\n1. The height of the structure.\n2. The total number of leaves in the structure.\n3. The depth of the node `K`.\n\nProvide your answers as a single row matrix `(h, l, d)`, where `h` is the height, `l` is the number of leaves, and `d` is the depth of node `K`.", "solution": "Let the set of relationships be $R=\\{(F,B),(F,J),(B,A),(B,D),(D,C),(D,E),(J,G),(J,K),(G,I),(K,H),(K,L)\\}$. Let $P$ be the set of all parents appearing in $R$ and $C$ the set of all children:\n$$P=\\{F,B,D,J,G,K\\},\\quad C=\\{B,J,A,D,C,E,G,K,I,H,L\\}.$$\nThe root is the node with no parent, i.e., the unique element of $P\\setminus C$, which is $F$.\n\nDefine the depth function $d(\\cdot)$ by $d(F)=0$ and, for each $(u,v)\\in R$, $d(v)=d(u)+1$. Applying this recursively:\n- From $(F,B)$ and $(F,J)$: $d(B)=1$, $d(J)=1$.\n- From $(B,A)$ and $(B,D)$: $d(A)=2$, $d(D)=2$.\n- From $(D,C)$ and $(D,E)$: $d(C)=3$, $d(E)=3$.\n- From $(J,G)$ and $(J,K)$: $d(G)=2$, $d(K)=2$.\n- From $(G,I)$: $d(I)=3$.\n- From $(K,H)$ and $(K,L)$: $d(H)=3$, $d(L)=3$.\n\nThe height is the maximum depth:\n$$h=\\max\\{d(v)\\colon v\\in V\\}=3.$$\n\nA leaf is a node with no children, i.e., a node $v$ for which there is no $w$ with $(v,w)\\in R$. The leaves are $\\{A,C,E,I,H,L\\}$, so the total number of leaves is\n$$l=6.$$\n\nThe depth of node $K$ is\n$$d=d(K)=2.$$", "answer": "$$\\boxed{\\begin{pmatrix} 3 & 6 & 2 \\end{pmatrix}}$$", "id": "1531605"}, {"introduction": "While analyzing individual trees is useful, a deeper understanding comes from discovering universal properties that govern entire classes of trees. This problem guides you to explore the fixed mathematical relationship between the number of leaves and internal vertices in any full $m$-ary tree [@problem_id:1531606]. Mastering this principle is crucial for analyzing the efficiency and capacity of hierarchical data structures, from database indexes to computer networks.", "problem": "In the field of computer science, rooted trees are fundamental data structures used for organizing information hierarchically. Consider a specialized tree structure designed for a high-performance database indexing system. This structure is modeled as a **full m-ary tree**.\n\nLet's define our terms:\n- A **rooted tree** is a tree in which one vertex has been designated as the root.\n- An **m-ary tree** is a rooted tree where every vertex has at most $m$ children.\n- A **full m-ary tree** is a specific type of m-ary tree where every vertex that is not a leaf has exactly $m$ children.\n- A **leaf** is a vertex with no children.\n- An **internal vertex** is any vertex that has at least one child (i.e., any vertex that is not a leaf).\n\nThe database system is implemented using a full 5-ary tree. A system diagnostic reveals that the tree currently contains exactly 21 leaves. Based on this information, determine the number of internal vertices in the tree.", "solution": "Let $m$ denote the arity, $i$ the number of internal vertices, $l$ the number of leaves, $V$ the total number of vertices, and $E$ the number of edges.\n\nIn a rooted tree, the number of edges satisfies\n$$\nE = V - 1.\n$$\nIn a full $m$-ary tree, every internal vertex has exactly $m$ children, so the total number of edges also equals the sum of outdegrees of all vertices, which is contributed solely by internal vertices:\n$$\nE = m i.\n$$\nThe total number of vertices is the sum of internal vertices and leaves:\n$$\nV = i + l.\n$$\nEquating the two expressions for $E$ gives\n$$\nm i = V - 1 = i + l - 1.\n$$\nRearranging,\n$$\nl = (m - 1)i + 1.\n$$\nFor a full $5$-ary tree with $l = 21$, substitute $m = 5$ and $l = 21$:\n$$\n21 = (5 - 1)i + 1 = 4i + 1.\n$$\nSolve for $i$:\n$$\n4i = 20 \\quad \\Rightarrow \\quad i = 5.\n$$\nTherefore, the number of internal vertices is $5$.", "answer": "$$\\boxed{5}$$", "id": "1531606"}, {"introduction": "Rooted trees are not just static objects; we often need to perform computations on them, such as navigating their structure to find relationships between nodes. This practice problem shifts our focus to algorithmic thinking by introducing the parent array, a common and efficient way to represent a tree in memory [@problem_id:1531615]. You will develop a procedure to find the Lowest Common Manager, an important concept equivalent to the Lowest Common Ancestor (LCA) in graph theory, by tracing paths to the root.", "problem": "In a modern technology company, the organizational structure is modeled as a rooted tree. Each employee is represented by a node, and the reporting structure is defined by a parent array. The company has $N=15$ employees, indexed from 0 to 14. The structure is given by a zero-indexed parent array `P` of size 15, where `P[i]` is the index of the direct manager of employee `i`. The President of the company is the root of the tree and has no manager, which is denoted by `P[i] = -1` for the root employee `i`.\n\nThe parent array `P` is given as:\n`P = [10, 3, 0, 8, 1, 0, 3, 1, -1, 4, 8, 10, 4, 14, 3]`\n\nWe define two concepts for this hierarchy:\n1.  **Depth**: The depth of an employee's node is the number of managers in the chain of command strictly above them. For example, the President is at depth 0. An employee whose manager is the President is at depth 1.\n2.  **Lowest Common Manager (LCM)**: For any two distinct employees, their Lowest Common Manager is the manager who is an ancestor to both employees and is located at the greatest possible depth in the organizational tree.\n\nGiven this structure, determine the depth of the Lowest Common Manager for employee $e_1 = 9$ and employee $e_2 = 7$.", "solution": "The problem asks for the depth of the Lowest Common Manager (LCM) of two employees, $e_1 = 9$ and $e_2 = 7$, within an organizational hierarchy represented by a parent array `P`.\n\nFirst, let's identify the root of the tree. The root is the employee `i` for whom `P[i] = -1`. Inspecting the array `P`, we find that `P[8] = -1`, so employee 8 is the President and the root of the tree.\n\nThe core of the solution involves three main steps:\n1.  Find the chain of command (the path to the root) for employee `e_1 = 9`.\n2.  Find the chain of command for employee `e_2 = 7`.\n3.  Identify the Lowest Common Manager (LCM) from these two paths and calculate its depth.\n\n**Step 1: Find the path to the root for employee 9.**\nWe trace the managers of employee 9 upwards until we reach the root (employee 8, where the parent is -1).\n- The starting employee is `9`.\n- The manager of `9` is `P[9] = 4`.\n- The manager of `4` is `P[4] = 1`.\n- The manager of `1` is `P[1] = 3`.\n- The manager of `3` is `P[3] = 8`.\n- The manager of `8` is `P[8] = -1`, which indicates we have reached the root.\n\nThe path from employee 9 to the root is `9 -> 4 -> 1 -> 3 -> 8`. We can list the set of all ancestors for employee 9 (including the employee themselves): `{9, 4, 1, 3, 8}`.\n\n**Step 2: Find the path to the root for employee 7.**\nSimilarly, we trace the managers for employee 7 upwards.\n- The starting employee is `7`.\n- The manager of `7` is `P[7] = 1`.\n- The manager of `1` is `P[1] = 3`.\n- The manager of `3` is `P[3] = 8`.\n- The manager of `8` is `P[8] = -1`. We have reached the root.\n\nThe path from employee 7 to the root is `7 -> 1 -> 3 -> 8`. The set of ancestors for employee 7 is `{7, 1, 3, 8}`.\n\n**Step 3: Identify the LCM and calculate its depth.**\nThe LCM is the common ancestor of both employees that has the greatest depth. Let's find the set of common ancestors by intersecting the two ancestor sets we found:\nCommon Ancestors = `{9, 4, 1, 3, 8}` $\\cap$ `{7, 1, 3, 8}` = `{1, 3, 8}`.\n\nNow we must determine which of these common ancestors (`1`, `3`, or `8`) has the greatest depth. The depth of a node is the number of steps it takes to reach the root from that node.\n\n-   **Depth of employee 8:** Employee 8 is the root. The path to the root is trivial (0 steps). So, `depth(8) = 0`.\n-   **Depth of employee 3:** The path from 3 to the root is `3 -> 8`. This takes 1 step. So, `depth(3) = 1`.\n-   **Depth of employee 1:** The path from 1 to the root is `1 -> 3 -> 8`. This takes 2 steps. So, `depth(1) = 2`.\n\nComparing the depths of the common ancestors: `depth(1) = 2`, `depth(3) = 1`, `depth(8) = 0`. The greatest depth is 2, which corresponds to employee 1.\n\nTherefore, the Lowest Common Manager (LCM) of employees 9 and 7 is employee 1.\n\nThe problem asks for the depth of this LCM. As we just calculated, the depth of employee 1 is 2.", "answer": "$$\\boxed{2}$$", "id": "1531615"}]}