{"hands_on_practices": [{"introduction": "This first exercise provides a foundational test of your understanding of sibling relationships. By considering a special but important type of rooted tree—a star graph—you will apply the definition of siblings and connect it directly to fundamental counting principles from combinatorics [@problem_id:1525686]. This practice helps solidify the core concepts in a clear and structured setting.", "problem": "In graph theory, a rooted tree is a directed graph in which a special vertex is distinguished, called the root, and for every other vertex $v$, there is a unique directed path from the root to $v$. This structure defines familial relationships between vertices. For any non-root vertex $v$, its parent is the unique vertex $u$ such that there is a directed edge from $u$ to $v$. Conversely, $v$ is a child of $u$. Two distinct vertices are called siblings if they share the same parent. A vertex with no children is called a leaf.\n\nConsider a specific rooted tree constructed on a set of $n$ vertices, where $n \\ge 3$. In this tree, one vertex is designated as the root. All other $n-1$ vertices are leaves.\n\nDetermine a closed-form expression in terms of $n$ for the total number of distinct pairs of vertices that are siblings.", "solution": "A rooted tree on $n$ vertices with exactly one root and all other $n-1$ vertices as leaves is a star rooted at the root. By definition, two distinct vertices are siblings if they share the same parent. In this tree, every leaf has the root as its unique parent, so all $n-1$ leaves share the same parent and thus any two distinct leaves are siblings. The root has no parent and therefore has no siblings.\n\nThe total number of distinct sibling pairs equals the number of unordered pairs of leaves, which is the number of $2$-element subsets of a set of size $n-1$. By basic combinatorics, this count is\n$$\n\\binom{n-1}{2}=\\frac{(n-1)(n-2)}{2}.\n$$\nThus, the closed-form expression for the number of sibling pairs is $\\frac{(n-1)(n-2)}{2}$.", "answer": "$$\\boxed{\\frac{(n-1)(n-2)}{2}}$$", "id": "1525686"}, {"introduction": "Moving from abstract concepts to practical application, this problem challenges you to work with a common computer science representation of a tree. You will use the parent, child, and grandchild definitions to navigate a hierarchy defined by data arrays, a skill essential for tasks like parsing file systems or querying databases [@problem_id:1525692]. This exercise demonstrates how theoretical graph properties are implemented and queried in real-world systems.", "problem": "A hierarchical system of software components is modeled as a rooted tree where components are represented by nodes labeled with integers. The tree structure is defined using a left-child, right-sibling representation. For each component `v`, its structural relationship to other components is given by three values: `parent[v]`, `left_child[v]`, and `right_sibling[v]`.\n- `parent[v]` is the integer label of the parent component of `v`. The root component has a parent value of -1.\n- `left_child[v]` is the label of the first component in the list of `v`'s children. If `v` has no children (i.e., it is a leaf), this value is -1.\n- `right_sibling[v]` is the label of the next component that shares the same parent as `v`. If `v` is the last child in its sibling list, this value is -1.\n\nA component `Y` is a child of component `X` if `parent[Y]` is `X`. A component `Z` is a grandchild of component `X` if the parent of `Z` is a child of `X`.\n\nConsider a system with 11 components, labeled 0 through 10, defined by the following arrays:\n- `parent` = `[-1, 0, 1, 1, 2, 2, 3, 0, 7, 7, 7]`\n- `left_child` = `[1, 2, 4, 6, -1, -1, -1, 8, -1, -1, -1]`\n- `right_sibling` = `[-1, 1, 7, 3, -1, 5, -1, -1, 9, 10, -1]`\n\nBased on this structure, identify the set of all grandchildren of component 1.\n\nA. {2, 3}\n\nB. {4, 5, 6}\n\nC. {2, 3, 4, 5, 6}\n\nD. {8, 9, 10}\n\nE. {4, 5}", "solution": "A node $Y$ is a child of node $X$ if and only if $\\text{parent}[Y]=X$. Therefore, the set of children of node $1$ is\n$$\\{v \\mid \\text{parent}[v]=1\\}.$$\nFrom the given array $\\text{parent}=[-1,0,1,1,2,2,3,0,7,7,7]$, we read off that $\\text{parent}[2]=1$ and $\\text{parent}[3]=1$, so the children of $1$ are\n$$\\{2,3\\}.$$\n\nA node $Z$ is a grandchild of node $X$ if and only if $\\text{parent}[Z]$ is a child of $X$, equivalently\n$$\\{Z \\mid \\text{parent}[Z] \\in \\{v \\mid \\text{parent}[v]=X\\}\\}.$$\nWith $X=1$ and children $\\{2,3\\}$, the grandchildren are\n$$\\{Z \\mid \\text{parent}[Z]\\in\\{2,3\\}\\}.$$\nFrom the parent array, $\\text{parent}[4]=2$, $\\text{parent}[5]=2$, and $\\text{parent}[6]=3$, hence the set of all grandchildren of $1$ is\n$$\\{4,5,6\\}.$$\n\nAmong the options, this corresponds to choice B.", "answer": "$$\\boxed{B}$$", "id": "1525692"}, {"introduction": "This final practice moves beyond analyzing a given tree to questioning whether a tree with certain properties can exist at all. By exploring a proposed design rule, you will combine the definition of a child with the fundamental relationship between the number of vertices and edges in any tree [@problem_id:1525689]. This type of feasibility analysis trains you to think critically about the structural constraints that govern all hierarchical models.", "problem": "A computer science student is exploring constraints on hierarchical structures. They are considering a data structure modeled as a **rooted tree**, which is a collection of items called nodes, where one special node is designated as the root, and every other node is a descendant of the root. In a rooted tree, a node $P$ is the parent of a node $C$ if there is a direct link from $P$ to $C$; in this case, $C$ is a **child** of $P$.\n\nThe student proposes a design rule for a tree with a total of $N$ nodes: \"Every node in the tree must have a distinct number of children.\" For instance, if a tree has 3 nodes, and this rule is applied, the number of children for the three nodes must be three different non-negative integers.\n\nYour task is to determine for which of the following numbers of total nodes $N$ is it mathematically possible to construct a rooted tree that satisfies this design rule.\n\nSelect all values of $N$ for which such a construction is possible.\n\nA. $N = 3$\n\nB. $N = 4$\n\nC. $N = 5$\n\nD. $N = 1$\n\nE. $N = 2$", "solution": "Let the numbers of children of the $N$ nodes be $d_{1},d_{2},\\ldots,d_{N}$. In any rooted tree, each edge contributes exactly once to the child count, so the sum of all child counts equals the total number of edges. A tree on $N$ nodes has $N-1$ edges, hence\n$$\n\\sum_{i=1}^{N} d_{i} = N - 1.\n$$\nThe design rule requires that $d_{1},\\ldots,d_{N}$ are $N$ distinct nonnegative integers. In any rooted tree there is at least one leaf, so at least one $d_{i}=0$, and with distinctness exactly one such zero occurs. To minimize the sum of $N$ distinct nonnegative integers, we must take\n$$\n\\{d_{1},\\ldots,d_{N}\\} = \\{0,1,2,\\ldots,N-1\\},\n$$\nwhich yields the minimal possible sum\n$$\n\\sum_{i=1}^{N} d_{i} \\ge 0+1+2+\\cdots+(N-1) = \\frac{N(N-1)}{2}.\n$$\nTherefore a necessary condition is\n$$\n\\frac{N(N-1)}{2} \\le N-1.\n$$\nThis inequality is equivalent to\n$$\nN(N-1) \\le 2(N-1) \\quad\\Longleftrightarrow\\quad (N-1)(N-2) \\le 0,\n$$\nwhich holds exactly for $1 \\le N \\le 2$. Thus the only possible values among the given options are $N=1$ and $N=2$.\n\nThese values are also sufficient:\n- For $N=1$, take the single node (the root) with $d_{1}=0$.\n- For $N=2$, take a root with one child, giving the multiset $\\{1,0\\}$, which are distinct and sum to $1=N-1$.\n\nFor $N\\ge 3$, the minimal sum $\\frac{N(N-1)}{2}$ exceeds $N-1$, making such a tree impossible.\n\nHence the correct options are $N=1$ and $N=2$, i.e., D and E.", "answer": "$$\\boxed{DE}$$", "id": "1525689"}]}