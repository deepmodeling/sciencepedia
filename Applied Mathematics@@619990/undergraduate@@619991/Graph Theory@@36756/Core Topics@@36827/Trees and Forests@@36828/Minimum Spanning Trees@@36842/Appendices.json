{"hands_on_practices": [{"introduction": "One of the most fundamental skills in network optimization is the ability to apply algorithms to find a Minimum Spanning Tree (MST). This first practice provides a concrete scenario to apply Prim's algorithm, a method that grows an MST by progressively adding the cheapest connection from the tree to a new vertex. Mastering this step-by-step process [@problem_id:1384198] is key to understanding how efficient networks are constructed from a single starting point.", "problem": "An aerospace engineering firm is tasked with designing a foundational communication network for a new Martian colony. The network must connect six key settlements, ensuring data can be relayed between any two locations, either directly or indirectly. The cost of establishing a direct communication link between any two settlements is given by a \"latency-energy cost index\", a dimensionless quantity that factors in signal travel time, atmospheric interference, and power requirements. A lower index signifies a more efficient link.\n\nThe six settlements are: Ares Prime (A), Valles Marineris Base (B), Olympus Mons Observatory (C), Hellas Planitia Colony (D), Syrtis Major Hub (E), and Elysium Outpost (F).\n\nThe potential communication links and their associated cost indices are as follows:\n- A to B: 5\n- A to C: 6\n- A to D: 4\n- B to C: 2\n- B to E: 9\n- C to D: 2\n- C to E: 5\n- C to F: 8\n- D to F: 7\n- E to F: 3\n\nTo ensure a standardized and verifiable network topology, a construction protocol must be followed. Using Prim's algorithm, starting from the settlement Ares Prime (A), determine the minimum possible total cost index for building a network that connects all six settlements.", "solution": "We model the settlements as vertices of an undirected weighted graph and the potential links as edges with given weights (cost indices). Prim's algorithm builds a minimum spanning tree by starting from a specified vertex and repeatedly adding the minimum-weight edge that connects the current tree to a new vertex.\n\nInitialize with Ares Prime (A): let the current tree vertex set be $S = \\{A\\}$. The edges leaving $S$ are $A\\text{-}B$ with weight $5$, $A\\text{-}C$ with weight $6$, and $A\\text{-}D$ with weight $4$. The smallest is $A\\text{-}D$ with weight $4$, so add $D$. Now $S = \\{A,D\\}$ and the running total is $4$.\n\nFrom $S = \\{A,D\\}$, the candidate edges crossing to $V \\setminus S$ are $A\\text{-}B$ with $5$, $A\\text{-}C$ with $6$, $D\\text{-}C$ with $2$, and $D\\text{-}F$ with $7$. The smallest is $C\\text{-}D$ with weight $2$, so add $C$. Now $S = \\{A,D,C\\}$ and the running total is $4+2$.\n\nFrom $S = \\{A,D,C\\}$, the candidate edges are $C\\text{-}B$ with $2$, $C\\text{-}E$ with $5$, $C\\text{-}F$ with $8$, $D\\text{-}F$ with $7$, and $A\\text{-}B$ with $5$. The smallest is $B\\text{-}C$ with weight $2$, so add $B$. Now $S = \\{A,D,C,B\\}$ and the running total is $4+2+2$.\n\nFrom $S = \\{A,D,C,B\\}$, the candidate edges are $C\\text{-}E$ with $5$, $C\\text{-}F$ with $8$, $D\\text{-}F$ with $7$, and $B\\text{-}E$ with $9$. The smallest is $C\\text{-}E$ with weight $5$, so add $E$. Now $S = \\{A,D,C,B,E\\}$ and the running total is $4+2+2+5$.\n\nFrom $S = \\{A,D,C,B,E\\}$, the remaining candidate edges are $E\\text{-}F$ with $3$, $D\\text{-}F$ with $7$, and $C\\text{-}F$ with $8$. The smallest is $E\\text{-}F$ with weight $3$, so add $F$. Now all six settlements are connected and the algorithm terminates.\n\nThe total minimum cost index is the sum of the selected edge weights:\n$$4 + 2 + 2 + 5 + 3 = 16.$$", "answer": "$$\\boxed{16}$$", "id": "1384198"}, {"introduction": "While Prim's algorithm builds a network from one location, Kruskal's algorithm takes a global view by considering all potential connections from cheapest to most expensive. This exercise [@problem_id:1522123] simulates a realistic network expansion, challenging you to integrate a new hub into an existing infrastructure. By applying Kruskal's method, you will learn to construct an MST by creating a \"forest\" of minimal-cost connections that eventually unify into a single, optimal tree.", "problem": "A technology company is expanding its private cloud infrastructure across several data centers. The existing network connects $N=5$ data centers, labeled $F_1, F_2, F_3, F_4, F_5$. The network topology was designed as a Minimum Spanning Tree (MST) to minimize the length of high-bandwidth fiber optic cable used. The specific connections and their lengths (in kilometers) in the existing MST are as follows:\n- A cable of length 5 km connects $F_1$ and $F_2$.\n- A cable of length 6 km connects $F_2$ and $F_3$.\n- A cable of length 20 km connects $F_1$ and $F_4$.\n- A cable of length 7 km connects $F_4$ and $F_5$.\n\nThe company is now adding a new central hub, $H$, to the infrastructure. To ensure full connectivity, dedicated fiber links are planned from the hub $H$ to each of the five existing data centers. The length of the cable required to connect the hub $H$ to facility $F_i$ (for $i=1, 2, 3, 4, 5$) is determined by the formula:\n$$L(H, F_i) = 30 - 4i$$\nwhere $L$ is the length in kilometers and $i$ is the index of the facility.\n\nTo maintain optimal resource allocation, the entire network of six locations ($F_1, \\dots, F_5$, and $H$) must be reconfigured into a new MST. Calculate the total length of fiber optic cable, in kilometers, required for this new Minimum Spanning Tree. Express your answer as an integer.", "solution": "We are to form the Minimum Spanning Tree (MST) on the graph with vertices $F_1, F_2, F_3, F_4, F_5, H$, where the existing inter-facility links are exactly those given from the original MST, and the new hub links have lengths specified by $L(H,F_i)=30-4i$ for $i=1,2,3,4,5$.\n\nFirst, list all available edges and their weights:\n- Existing inter-facility links:\n  - $F_1F_2$ with weight $5$,\n  - $F_2F_3$ with weight $6$,\n  - $F_1F_4$ with weight $20$,\n  - $F_4F_5$ with weight $7$.\n- New hub links from $H$:\n  - $HF_1$ with weight $30-4\\cdot 1=26$,\n  - $HF_2$ with weight $30-4\\cdot 2=22$,\n  - $HF_3$ with weight $30-4\\cdot 3=18$,\n  - $HF_4$ with weight $30-4\\cdot 4=14$,\n  - $HF_5$ with weight $30-4\\cdot 5=10$.\n\nTo find the MST on $6$ nodes, we apply Kruskalâ€™s algorithm: sort all edges by nondecreasing weight and add them if and only if they connect two different components, stopping when $5$ edges (which is $6-1$) have been added.\n\nSort the edges by weight:\n$5, 6, 7, 10, 14, 18, 20, 22, 26$.\n\nProceed step by step:\n1. Add $F_1F_2$ with weight $5$; components: $\\{F_1,F_2\\}$, others isolated.\n2. Add $F_2F_3$ with weight $6$; components: $\\{F_1,F_2,F_3\\}$ and $\\{F_4\\}$, $\\{F_5\\}$, $\\{H\\}$.\n3. Add $F_4F_5$ with weight $7$; components: $\\{F_1,F_2,F_3\\}$, $\\{F_4,F_5\\}$, $\\{H\\}$.\n4. Add $HF_5$ with weight $10$; components: $\\{F_1,F_2,F_3\\}$, $\\{F_4,F_5,H\\}$.\n5. Consider $HF_4$ with weight $14$; this would connect $H$ and $F_4$ which are already in the same component $\\{F_4,F_5,H\\}$, so it would create a cycle and is skipped.\n6. Add $HF_3$ with weight $18$; this connects $\\{F_1,F_2,F_3\\}$ to $\\{F_4,F_5,H\\}$, merging all vertices into a single component.\n\nWe now have $5$ edges, so the MST is complete. The total length is the sum of the included edge weights:\n$$5+6+7+10+18=46.$$\n\nTherefore, the required total length of fiber optic cable for the new Minimum Spanning Tree is $46$ kilometers.", "answer": "$$\\boxed{46}$$", "id": "1522123"}, {"introduction": "After practicing the \"how\" of building MSTs, it is crucial to understand the \"what\" and \"why\" on a deeper level. A common point of confusion is the relationship between the unique path connecting two vertices in an MST and the shortest possible path between them in the original graph. This final practice [@problem_id:1384197] is a conceptual exercise designed to clarify this important distinction, reinforcing the core property that an MST minimizes the total network weight, not necessarily the path length between any two specific vertices.", "problem": "Consider a connected, undirected graph $G=(V, E, w)$, where $V$ is a set of vertices, $E$ is a set of edges, and $w: E \\to \\mathbb{R}^+$ is a function assigning a strictly positive weight to each edge. A Minimum Spanning Tree (MST), denoted as $T$, is a subgraph of $G$ that connects all the vertices together, without any cycles and with the minimum possible total edge weight.\n\nFor any two distinct vertices $u, v \\in V$, let $P_T(u,v)$ denote the unique path between $u$ and $v$ within the MST $T$. Let $W(P)$ be the weight of a path $P$, defined as the sum of the weights of all edges in $P$. A shortest path between $u$ and $v$ in the original graph $G$ is a path with the minimum possible weight $W(P)$ among all paths connecting $u$ and $v$ in $G$.\n\nWhich of the following statements correctly describes the relationship between paths in an MST and shortest paths in the original graph $G$?\n\nA. For any pair of vertices $u, v$, the path $P_T(u,v)$ is always a shortest path between $u$ and $v$ in the graph $G$.\n\nB. For any pair of vertices $u, v$, the path $P_T(u,v)$ is a shortest path between $u$ and $v$ in the graph $G$ if and only if all edge weights in $G$ are unique.\n\nC. For any pair of vertices $u, v$, the path $P_T(u,v)$ is the unique path in $G$ that minimizes the weight of the heaviest single edge along the path.\n\nD. For any edge $(u,v)$ that is part of the MST $T$, the path consisting of only this edge is a shortest path from $u$ to $v$ in the original graph $G$.", "solution": "We analyze each option using standard properties of minimum spanning trees and shortest paths.\n\nFirst, recall the definitions. For an MST $T$ of $G$, the unique path between $u$ and $v$ in $T$ is $P_{T}(u,v)$. Its weight is $W(P_{T}(u,v))=\\sum_{e \\in P_{T}(u,v)} w(e)$. A shortest $u$-$v$ path in $G$ is any path $P$ minimizing $W(P)$ over all $u$-$v$ paths in $G$. The bottleneck of a path $P$ is $\\max_{e \\in P} w(e)$.\n\nOption A claims that $P_{T}(u,v)$ is always a shortest path in $G$. This is false in general. Consider a triangle on vertices $\\{a,b,c\\}$ with weights $w(\\{a,b\\})=2$, $w(\\{b,c\\})=2$, $w(\\{a,c\\})=3$. An MST uses edges $\\{a,b\\}$ and $\\{b,c\\}$. Then $P_{T}(a,c)$ is the path $a$-$b$-$c$ with total weight $2+2=4$, whereas the shortest path in $G$ between $a$ and $c$ is the single edge $\\{a,c\\}$ with weight $3$. Therefore A is false.\n\nOption B states that $P_{T}(u,v)$ is a shortest path if and only if all edge weights are unique. This is also false. A counterexample with unique weights: take three vertices $\\{a,b,c\\}$ with $w(\\{a,b\\})=1$, $w(\\{b,c\\})=2$, $w(\\{a,c\\})=\\frac{5}{2}$. The MST consists of edges $\\{a,b\\}$ and $\\{b,c\\}$. Then $P_{T}(a,c)$ has total weight $1+2=3$, but the shortest path between $a$ and $c$ is the direct edge of weight $\\frac{5}{2}$. Hence uniqueness of edge weights does not ensure $P_{T}(u,v)$ is a shortest path, so B is false.\n\nOption C asserts that $P_{T}(u,v)$ is the unique path in $G$ minimizing the maximum edge weight along the path. It is true that for any MST $T$ and any $u,v$, the path $P_{T}(u,v)$ minimizes the bottleneck value $\\max_{e \\in P} w(e)$ over all $u$-$v$ paths $P$ (the minimax or minimum-bottleneck path property of MSTs). However, uniqueness is not guaranteed. For a counterexample, let $G$ consist of two connected subgraphs $A$ and $B$ joined by a single bridge edge $e=\\{x,y\\}$ of weight $t$, with all edges within $A$ and $B$ having weight strictly less than $t$. For any $u \\in A$ and $v \\in B$, every $u$-$v$ path must contain $e$, so every such path has bottleneck exactly $t$, and there are many distinct $u$-$v$ paths achieving this same bottleneck. Thus uniqueness fails, and C is false.\n\nOption D says that if $(u,v)$ is an MST edge, then the single-edge path is a shortest $u$-$v$ path in $G$. This is true. Suppose $(u,v) \\in E(T)$, and assume for contradiction that there exists a $u$-$v$ path $P$ in $G$ with $W(P)  w(\\{u,v\\})$. Because all edge weights are strictly positive, this strict inequality implies that for every edge $e \\in P$, one has $w(e)  w(\\{u,v\\})$; indeed, if any $e \\in P$ had $w(e) \\geq w(\\{u,v\\})$, then $W(P) \\geq w(e) \\geq w(\\{u,v\\})$, contradicting $W(P)  w(\\{u,v\\})$. The union of $P$ with the edge $\\{u,v\\}$ forms a cycle $C$ in which $\\{u,v\\}$ is strictly heavier than all other edges. By the cycle property of MSTs, no MST can contain an edge that is strictly the heaviest edge on some cycle. This contradicts $(u,v) \\in E(T)$. Therefore, no path $P$ with $W(P)  w(\\{u,v\\})$ exists, and the single-edge path of weight $w(\\{u,v\\})$ is a shortest $u$-$v$ path in $G$. Hence D is true.\n\nCombining the above, only D is correct.", "answer": "$$\\boxed{D}$$", "id": "1384197"}]}