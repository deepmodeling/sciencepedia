{"hands_on_practices": [{"introduction": "Graph coloring is a powerful tool for solving a wide variety of resource allocation and scheduling puzzles. This first practice grounds the abstract concept of $k$-coloring in a tangible, real-world scenario of assigning communication frequencies to a sensor network. The challenge is to translate the physical constraints into a graph model and then determine the minimum number of frequencies—the graph's chromatic number—needed for an interference-free operation [@problem_id:1515398].", "problem": "A technology company is designing a distributed sensor network for environmental monitoring within a square agricultural plot. The plot is partitioned into a uniform $3 \\times 3$ grid of smaller square cells. A single sensor is placed at the geometric center of each of the nine cells. To avoid signal interference, any two sensors located in cells that share a common border must operate on different communication frequencies. Cells that only meet at a corner are not considered to share a common border. The company's goal is to minimize operational costs by using the smallest possible number of distinct communication frequencies.\n\nWhat is the minimum number of distinct frequencies required to operate the entire sensor network without any interference?", "solution": "Model the network as a graph $G=(V,E)$ where each vertex in $V$ corresponds to one of the $9$ cells in the $3\\times 3$ grid, and an edge in $E$ connects two vertices if and only if the corresponding cells share a common border. The minimum number of distinct frequencies required equals the chromatic number $\\chi(G)$, the least number of colors needed for a proper vertex coloring.\n\nIndex the cells by coordinates $(i,j)$ with $i,j\\in\\{1,2,3\\}$, and define adjacency by\n$$\n(i,j)\\sim(i',j') \\quad \\text{if and only if} \\quad |i-i'|+|j-j'|=1,\n$$\nwhich encodes sharing a common border and excludes corner-only contact.\n\nLower bound: Since $G$ has at least one edge (for example, between $(1,1)$ and $(1,2)$), any proper coloring must use at least two colors. Hence,\n$$\n\\chi(G)\\geq 2.\n$$\n\nUpper bound: Define a $2$-coloring using the parity of the coordinate sum:\n$$\nc(i,j) \\equiv (i+j) \\bmod 2,\n$$\nmapping $c=0$ to one frequency and $c=1$ to a second frequency. If $(i,j)\\sim(i',j')$, then either $i=i'$ and $|j-j'|=1$, or $j=j'$ and $|i-i'|=1$. In both cases,\n$$\n(i+j)-(i'+j')=\\pm 1,\n$$\nso $i+j$ and $i'+j'$ have opposite parity, implying $c(i,j)\\neq c(i',j')$. Therefore this is a proper $2$-coloring, and\n$$\n\\chi(G)\\leq 2.\n$$\n\nCombining the bounds gives $\\chi(G)=2$. Thus, the minimum number of distinct frequencies needed is $2$.", "answer": "$$\\boxed{2}$$", "id": "1515398"}, {"introduction": "While some graphs, like the grid in our previous exercise, are easily colored with just two colors, many are not. What is the fundamental property that forces us to use a third color? This problem presents a fascinating thought experiment: you are asked to find the smallest possible graph that is not 2-colorable yet contains no triangles [@problem_id:1515455]. Solving this will reveal the crucial role of odd cycles in graph colorability and demonstrate that the chromatic number $\\chi(G)$ can be strictly greater than the clique number $\\omega(G)$.", "problem": "In graph theory, a `$k$-coloring` of a graph is an assignment of one of `$k$` available colors to each vertex of the graph such that no two adjacent vertices receive the same color. A graph is said to be `$k$-colorable` if it admits a `$k$-coloring`.\n\nA *triangle* in a graph is a cycle of length 3, meaning a set of three vertices where each vertex is connected to the other two by an edge.\n\nConsider a graph $G$ that satisfies two properties:\n1. $G$ is not 2-colorable.\n2. $G$ contains no triangles.\n\nWhat is the minimum number of vertices that such a graph $G$ can have?", "solution": "A graph is 2-colorable if and only if it is bipartite. A graph is bipartite if and only if it contains no odd cycle. Therefore, if $G$ is not 2-colorable, then $G$ must contain an odd cycle; denote such a cycle by $C_{2k+1}$ with $k \\in \\mathbb{N}$.\n\nThe condition that $G$ contains no triangles excludes the case $2k+1=3$, so the shortest possible odd cycle in $G$ must have length at least $5$. Hence any such $G$ must have at least $5$ vertices.\n\nThis lower bound is attained by the $5$-cycle $C_{5}$, which has $5$ vertices, contains no triangles, and is not 2-colorable because it is an odd cycle. Therefore, the minimum number of vertices is $5$.", "answer": "$$\\boxed{5}$$", "id": "1515455"}, {"introduction": "Finding the true chromatic number $\\chi(G)$ of a graph is computationally very difficult for all but the simplest cases. In practice, computer scientists often rely on efficient algorithms, like the greedy coloring algorithm, to find a valid, though not necessarily optimal, coloring. This exercise lets you step into the role of the algorithm itself, demonstrating how the choice of vertex ordering can dramatically affect the outcome [@problem_id:1515409]. You will discover that even for a simple bipartite graph, a poor ordering can lead the greedy algorithm to use more colors than the absolute minimum, a key lesson in algorithmic limitations.", "problem": "The greedy coloring algorithm is a heuristic method for coloring the vertices of a graph. Given a specific ordering of the vertices, the algorithm iterates through them one by one. For each vertex, it assigns the smallest positive integer (representing a color) that has not already been assigned to any of its neighbors that appear earlier in the ordering.\n\nConsider a simple undirected graph $G$ with vertex set $V = \\{A, B, C, D, E, F\\}$ and edge set $E = \\{(A, B), (A, D), (B, C), (C, D), (D, E), (E, F)\\}$. This graph is known to be bipartite, and therefore its chromatic number (the minimum number of colors needed for a valid coloring) is 2.\n\nHowever, the number of colors used by the greedy algorithm, denoted $\\chi_g(G, \\pi)$ for a given vertex ordering $\\pi$, can be greater than the chromatic number $\\chi(G)$.\n\nWhich of the following vertex orderings, when used with the greedy coloring algorithm on graph $G$, will result in the algorithm using 3 colors? Select all that apply.\n\nA. $(A, C, E, B, D, F)$\n\nB. $(A, B, C, D, E, F)$\n\nC. $(A, F, B, E, D, C)$\n\nD. $(A, C, B, D, F, E)$\n\nE. $(C, D, E, B, F, A)$", "solution": "Let $c(v)$ denote the color assigned to vertex $v$. At each step of the greedy algorithm, when processing vertex $v$, let $S(v)$ be the set of colors already used by its earlier neighbors; then assign $c(v)$ to be the smallest positive integer not in $S(v)$.\n\nThe graph has edges $(A,B)$, $(A,D)$, $(B,C)$, $(C,D)$, $(D,E)$, $(E,F)$, so the neighbor sets are:\n$N(A)=\\{B,D\\}$, $N(B)=\\{A,C\\}$, $N(C)=\\{B,D\\}$, $N(D)=\\{A,C,E\\}$, $N(E)=\\{D,F\\}$, $N(F)=\\{E\\}$.\n\nOption A: $(A, C, E, B, D, F)$\n- $A$: $S(A)=\\varnothing \\Rightarrow c(A)=1$.\n- $C$: $S(C)=\\varnothing \\Rightarrow c(C)=1$.\n- $E$: $S(E)=\\varnothing \\Rightarrow c(E)=1$.\n- $B$: earlier neighbors $A,C$ give $S(B)=\\{1\\} \\Rightarrow c(B)=2$.\n- $D$: earlier neighbors $A,C,E$ give $S(D)=\\{1\\} \\Rightarrow c(D)=2$.\n- $F$: earlier neighbor $E$ gives $S(F)=\\{1\\} \\Rightarrow c(F)=2$.\nColors used: $\\{1,2\\}$, so not 3.\n\nOption B: $(A, B, C, D, E, F)$\n- $A$: $S(A)=\\varnothing \\Rightarrow c(A)=1$.\n- $B$: earlier neighbor $A$ gives $S(B)=\\{1\\} \\Rightarrow c(B)=2$.\n- $C$: earlier neighbor $B$ gives $S(C)=\\{2\\} \\Rightarrow c(C)=1$.\n- $D$: earlier neighbors $A,C$ give $S(D)=\\{1\\} \\Rightarrow c(D)=2$.\n- $E$: earlier neighbor $D$ gives $S(E)=\\{2\\} \\Rightarrow c(E)=1$.\n- $F$: earlier neighbor $E$ gives $S(F)=\\{1\\} \\Rightarrow c(F)=2$.\nColors used: $\\{1,2\\}$, so not 3.\n\nOption C: $(A, F, B, E, D, C)$\n- $A$: $S(A)=\\varnothing \\Rightarrow c(A)=1$.\n- $F$: $S(F)=\\varnothing \\Rightarrow c(F)=1$.\n- $B$: earlier neighbor $A$ gives $S(B)=\\{1\\} \\Rightarrow c(B)=2$.\n- $E$: earlier neighbor $F$ gives $S(E)=\\{1\\} \\Rightarrow c(E)=2$.\n- $D$: earlier neighbors $A,E$ give $S(D)=\\{1,2\\} \\Rightarrow c(D)=3$.\n- $C$: earlier neighbors $B,D$ give $S(C)=\\{2,3\\} \\Rightarrow c(C)=1$.\nColors used: $\\{1,2,3\\}$, so this uses 3.\n\nOption D: $(A, C, B, D, F, E)$\n- $A$: $S(A)=\\varnothing \\Rightarrow c(A)=1$.\n- $C$: $S(C)=\\varnothing \\Rightarrow c(C)=1$.\n- $B$: earlier neighbors $A,C$ give $S(B)=\\{1\\} \\Rightarrow c(B)=2$.\n- $D$: earlier neighbors $A,C$ give $S(D)=\\{1\\} \\Rightarrow c(D)=2$.\n- $F$: $S(F)=\\varnothing \\Rightarrow c(F)=1$.\n- $E$: earlier neighbors $D,F$ give $S(E)=\\{1,2\\} \\Rightarrow c(E)=3$.\nColors used: $\\{1,2,3\\}$, so this uses 3.\n\nOption E: $(C, D, E, B, F, A)$\n- $C$: $S(C)=\\varnothing \\Rightarrow c(C)=1$.\n- $D$: earlier neighbor $C$ gives $S(D)=\\{1\\} \\Rightarrow c(D)=2$.\n- $E$: earlier neighbor $D$ gives $S(E)=\\{2\\} \\Rightarrow c(E)=1$.\n- $B$: earlier neighbor $C$ gives $S(B)=\\{1\\} \\Rightarrow c(B)=2$.\n- $F$: earlier neighbor $E$ gives $S(F)=\\{1\\} \\Rightarrow c(F)=2$.\n- $A$: earlier neighbors $B,D$ give $S(A)=\\{2\\} \\Rightarrow c(A)=1$.\nColors used: $\\{1,2\\}$, so not 3.\n\nTherefore, the greedy algorithm uses 3 colors for orderings C and D only.", "answer": "$$\\boxed{CD}$$", "id": "1515409"}]}