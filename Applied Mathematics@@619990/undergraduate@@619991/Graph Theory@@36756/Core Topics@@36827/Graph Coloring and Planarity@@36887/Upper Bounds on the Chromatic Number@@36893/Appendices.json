{"hands_on_practices": [{"introduction": "Mastering the theory of graph coloring begins with hands-on application. This first practice exercise walks you through the Welsh-Powell algorithm, a classic greedy method for finding an upper bound on a graph's chromatic number, $\\chi(G)$. By systematically ordering vertices by degree and assigning colors, you will gain a practical understanding of how heuristic algorithms tackle computationally hard problems like graph coloring [@problem_id:1552856].", "problem": "Consider an undirected graph $G = (V, E)$ with the vertex set $V = \\{A, B, C, D, E, F, G\\}$ and the edge set $E$ containing the following pairs:\n$E = \\{(A, B), (A, C), (A, D), (A, F), (B, C), (B, D), (B, E), (C, E), (C, F), (D, G), (E, G)\\}$.\n\nThe Welsh-Powell algorithm is a greedy algorithm used to find a coloring of a graph. It provides an upper bound for the chromatic number of the graph. The steps of the algorithm are as follows:\n1.  Compute the degree of each vertex in the graph.\n2.  List the vertices in descending order of their degrees. In cases of a tie in degree, vertices should be ordered alphabetically.\n3.  Assign the first color to the first vertex in the sorted list.\n4.  Iterate through the rest of the sorted list of vertices. For each vertex, if it is not adjacent to any vertex already colored with the current color, assign this color to it.\n5.  If there are still uncolored vertices, choose the first uncolored vertex in the sorted list and assign a new, second color to it.\n6.  Repeat the process described in step 4 for all uncolored vertices with the new color.\n7.  Continue this process, introducing a new color each time all remaining uncolored vertices are adjacent to at least one vertex of the current color, until all vertices are colored.\n\nBy applying the Welsh-Powell algorithm to the graph $G$, determine the total number of colors used to achieve a valid coloring. What is this number?", "solution": "Compute vertex degrees by counting incident edges:\n$$\\deg(A)=4,\\ \\deg(B)=4,\\ \\deg(C)=4,\\ \\deg(D)=3,\\ \\deg(E)=3,\\ \\deg(F)=2,\\ \\deg(G)=2.$$\nSort vertices in descending degree with alphabetical tie-breaks:\n$(A, B, C, D, E, F, G)$.\nFirst color: assign color 1 to $A$. Traverse the list; a vertex can receive color 1 if it is non-adjacent to all color-1 vertices. $B,C,D,F$ are adjacent to $A$ and cannot receive color 1; $E$ is not adjacent to $A$ and receives color 1; $G$ is adjacent to $E$ and thus cannot receive color 1. After this pass, color 1 is on $\\{A,E\\}$.\n\nSecond color: the first uncolored vertex in the order is $B$, assign color 2 to $B$. Continue traversal: $C$ is adjacent to $B$ so skip; $D$ is adjacent to $B$ so skip; $F$ is non-adjacent to $B$ and gets color 2; $G$ is non-adjacent to both $B$ and $F$ and gets color 2. After this pass, color 2 is on $\\{B,F,G\\}$.\n\nThird color: remaining uncolored vertices are $C$ and $D$. Assign color 3 to $C$, then check $D$; since there is no edge between $C$ and $D$, $D$ also receives color 3. After this pass, all vertices are colored with colors $\\{1,2,3\\}$.\n\nThus, the Welsh-Powell algorithm uses a total of $3$ colors on this graph.", "answer": "$$\\boxed{3}$$", "id": "1552856"}, {"introduction": "While greedy algorithms provide a straightforward path to an upper bound, their performance can be surprisingly fragile. This problem explores the critical impact of vertex ordering on the outcome of a greedy coloring procedure [@problem_id:1552858]. By comparing two different orderings on the same family of graphs, you will see firsthand how a simple change in strategy can lead to dramatically different results, highlighting a key subtlety in algorithmic graph theory.", "problem": "Consider a family of graphs, which we will call Staggered Bipartite Graphs, denoted by $S_n$ for any integer $n \\ge 2$. The graph $S_n$ has a set of $2n$ vertices, $V = \\{a_1, a_2, \\dots, a_n\\} \\cup \\{b_1, b_2, \\dots, b_n\\}$. An edge exists between a vertex $a_i$ and a vertex $b_j$ if and only if their indices are different, i.e., $i \\neq j$. There are no edges connecting vertices within the set $\\{a_1, \\ldots, a_n\\}$, nor within the set $\\{b_1, \\ldots, b_n\\}$.\n\nThe greedy coloring algorithm colors a graph by processing its vertices one by one according to a specified ordering. For each vertex, it assigns the smallest positive integer color that has not already been used by any of its previously colored neighbors.\n\nLet's consider two different vertex orderings for $S_n$:\n1. Ordering $\\pi_1$: The vertices are ordered by first listing all 'a' vertices and then all 'b' vertices: $(a_1, a_2, \\dots, a_n, b_1, b_2, \\dots, b_n)$.\n2. Ordering $\\pi_2$: The vertices are ordered by alternating between the 'a' and 'b' sets based on their indices: $(a_1, b_1, a_2, b_2, \\dots, a_n, b_n)$.\n\nLet $k_1$ be the number of colors used by the greedy algorithm for the graph $S_n$ with ordering $\\pi_1$.\nLet $k_2$ be the number of colors used by the greedy algorithm for the graph $S_n$ with ordering $\\pi_2$.\n\nFind an expression for the ratio $\\frac{k_2}{k_1}$ in terms of $n$.", "solution": "We are given the graph $S_{n}$ on vertex sets $A=\\{a_{1},\\dots,a_{n}\\}$ and $B=\\{b_{1},\\dots,b_{n}\\}$ with edges exactly between $a_{i}$ and $b_{j}$ for $i\\neq j$. There are no edges within $A$ or within $B$. The greedy coloring assigns to each vertex, in a given order, the smallest positive integer not used by any of its previously colored neighbors.\n\nFirst consider ordering $\\pi_{1}=(a_{1},\\dots,a_{n},b_{1},\\dots,b_{n})$.\n- For each $a_{i}$, when it is processed, none of its neighbors are colored yet because all neighbors of $a_{i}$ lie in $B$, which appears later in the order. Hence, each $a_{i}$ receives color $1$.\n- For each $b_{j}$, its previously colored neighbors are all $a_{i}$ with $i\\neq j$, and all of those have color $1$. Therefore color $1$ is forbidden and the smallest available color is $2$. Since there are no edges among vertices of $B$, each $b_{j}$ also takes color $2$.\nThus the greedy algorithm uses exactly $k_{1}=2$ colors under $\\pi_{1}$.\n\nNext consider ordering $\\pi_{2}=(a_{1},b_{1},a_{2},b_{2},\\dots,a_{n},b_{n})$. We can show by induction on the index $i$ that for $i \\ge 2$, vertices $a_i$ and $b_i$ are assigned color $i$, while $a_1$ and $b_1$ are assigned color 1.\n- For $i=1$: $a_1$ has no previously colored neighbors, so it gets color 1. Then $b_1$ has no edge to $a_1$, so it also has no previously colored neighbors and receives color 1.\n- For $i > 1$: When processing $a_{i}$, its previously colored neighbors are exactly $b_{1}, b_{2}, \\dots, b_{i-1}$. It can be shown that these vertices use the colors $\\{1, 2, \\dots, i-1\\}$. The smallest available color for $a_{i}$ is therefore $i$. Next, for $b_{i}$, its previously colored neighbors are exactly $a_{1}, a_{2}, \\dots, a_{i-1}$. These also use colors $\\{1, 2, \\dots, i-1\\}$. The smallest available color for $b_i$ is also $i$.\nThis pattern continues up to $i=n$, where the algorithm has used precisely the colors $1, 2, \\dots, n$. Thus, $k_2=n$.\n\nTherefore the ratio is\n$$\n\\frac{k_{2}}{k_{1}}=\\frac{n}{2}.\n$$", "answer": "$$\\boxed{\\frac{n}{2}}$$", "id": "1552858"}, {"introduction": "Building on the insight that vertex ordering matters, we can formalize the search for a 'good' ordering through the concept of graph degeneracy. This exercise introduces degeneracy, $d(G)$, a structural parameter that guarantees an upper bound on the chromatic number via the relation $\\chi(G) \\le d(G)+1$ [@problem_id:1552838]. By constructing a specific vertex ordering for a complex graph, you will learn how to calculate its degeneracy and appreciate the deep connection between a graph's structure and its colorability.", "problem": "A graph $G$ is called $k$-degenerate if every subgraph of $G$ has a vertex of degree at most $k$. The smallest integer $k$ for which $G$ is $k$-degenerate is called the degeneracy of $G$. An equivalent way to define the degeneracy is through a vertex ordering: the degeneracy is the smallest integer $k$ such that there exists an ordering of the vertices of $G$, say $(v_1, v_2, \\ldots, v_N)$, where each vertex $v_i$ has at most $k$ neighbors in the set $\\{v_{i+1}, \\ldots, v_N\\}$.\n\nConsider a special graph called the Bridged Wheels Graph, denoted $BW_n$, constructed for an integer $n \\geq 3$. The construction is as follows:\n1. Start with two identical and disjoint copies of a wheel graph. Each wheel graph is built from a central hub vertex and an $n$-cycle of 'rim' vertices, where the hub is connected to every rim vertex. So each wheel graph has $n+1$ vertices.\n2. Let the central hub of the first wheel graph be $c_1$ and its rim vertices be $(u_1, u_2, \\ldots, u_n)$ arranged in a cycle. The edges of this cycle are $(u_i, u_{i+1})$ for $i=1,\\dots,n-1$, and $(u_n, u_1)$.\n3. Let the central hub of the second wheel graph be $c_2$ and its rim vertices be $(v_1, v_2, \\ldots, v_n)$ arranged in a similar cycle.\n4. The graph $BW_n$ is formed by taking the union of these two wheel graphs and adding a set of 'bridge' edges. For each $i$ from $1$ to $n$, an edge is added connecting vertex $u_i$ to vertex $v_i$.\n\nDetermine the degeneracy of the Bridged Wheels Graph $BW_n$ for any integer $n \\ge 5$.", "solution": "Let $G$ be the Bridged Wheels Graph $BW_n$. We first determine the degrees of all vertices in $G$ for $n \\ge 5$. The graph $G$ has $2(n+1)$ vertices in total: two hub vertices, $\\{c_1, c_2\\}$, and $2n$ rim vertices, $\\{u_1, \\ldots, u_n\\}$ and $\\{v_1, \\ldots, v_n\\}$.\n\n1.  **Hub vertices ($c_1, c_2$):** The hub $c_1$ is connected to all its $n$ rim vertices $u_1, \\ldots, u_n$. The hub $c_2$ is connected to all its $n$ rim vertices $v_1, \\ldots, v_n$. Therefore, $\\deg(c_1) = \\deg(c_2) = n$.\n\n2.  **Rim vertices ($u_i, v_i$):**\n    For each vertex $u_i$ on the first rim, its neighbors are:\n    - The central hub $c_1$.\n    - Its two neighbors on the cycle, $u_{i-1}$ and $u_{i+1}$ (indices are taken modulo $n$, in the set $\\{1, \\ldots, n\\}$).\n    - The corresponding vertex on the other rim, $v_i$, via a bridge edge.\n    Thus, for each $i \\in \\{1,\\ldots,n\\}$, $\\deg(u_i) = 1 + 2 + 1 = 4$.\n    Similarly, for each vertex $v_i$ on the second rim, $\\deg(v_i) = 1 + 2 + 1 = 4$.\n\nThe set of degrees of all vertices in $G$ is $\\{n, 4\\}$. Since the problem states $n \\ge 5$, the minimum degree of any vertex in $G$ is $\\delta(G) = \\min(n, 4) = 4$.\n\nNow, let $d(G)$ denote the degeneracy of $G$. The degeneracy of a graph is always greater than or equal to the minimum degree of any of its subgraphs. In particular, $d(G)$ must be greater than or equal to the minimum degree of $G$ itself. So, we have a lower bound for the degeneracy:\n$$d(G) \\ge \\delta(G) = 4$$\n\nTo find an upper bound, we use the equivalent definition of degeneracy and construct a vertex ordering. We need to find an ordering of the vertices $(p_1, p_2, \\ldots, p_{2n+2})$ such that any vertex $p_j$ has at most $k$ neighbors among the vertices that appear later in the sequence, $(p_{j+1}, \\ldots, p_{2n+2})$. If we can find such an ordering for $k=4$, we will have shown that $d(G) \\le 4$.\n\nConsider the following ordering $\\mathcal{O}$:\n$$ \\mathcal{O} = (u_1, u_2, \\ldots, u_n, v_1, v_2, \\ldots, v_n, c_1, c_2) $$\nLet's analyze the number of \"forward neighbors\" (neighbors that appear later in $\\mathcal{O}$) for each vertex.\n\n- **For a vertex $u_i$ where $1 \\le i \\le n$:** The neighbors of $u_i$ are $\\{u_{i-1}, u_{i+1}, c_1, v_i\\}$.\n    - If $i=1$, its neighbors are $\\{u_n, u_2, c_1, v_1\\}$. In the ordering $\\mathcal{O}$, all these neighbors appear after $u_1$. So, $u_1$ has 4 forward neighbors.\n    - If $1 < i < n$, its neighbors are $\\{u_{i-1}, u_{i+1}, c_1, v_i\\}$. The vertex $u_{i-1}$ appears before $u_i$ in $\\mathcal{O}$. The vertices $u_{i+1}, c_1, v_i$ all appear after $u_i$. So, $u_i$ has 3 forward neighbors.\n    - If $i=n$, its neighbors are $\\{u_{n-1}, u_1, c_1, v_n\\}$. The vertices $u_{n-1}$ and $u_1$ appear before $u_n$. The vertices $c_1$ and $v_n$ appear after $u_n$. So, $u_n$ has 2 forward neighbors.\nThe maximum number of forward neighbors for any vertex in the block $\\{u_1, \\ldots, u_n\\}$ is 4.\n\n- **For a vertex $v_i$ where $1 \\le i \\le n$:** The neighbors of $v_i$ are $\\{v_{i-1}, v_{i+1}, c_2, u_i\\}$.\n    - For any $i$, the vertex $u_i$ appears in the first block of the ordering, so it is always a \"backward neighbor\".\n    - If $i=1$, its neighbors are $\\{v_n, v_2, c_2, u_1\\}$. The backward neighbor is $u_1$. The forward neighbors are $\\{v_n, v_2, c_2\\}$. So, $v_1$ has 3 forward neighbors.\n    - If $1 < i < n$, its neighbors are $\\{v_{i-1}, v_{i+1}, c_2, u_i\\}$. The backward neighbors are $v_{i-1}$ and $u_i$. The forward neighbors are $\\{v_{i+1}, c_2\\}$. So, $v_i$ has 2 forward neighbors.\n    - If $i=n$, its neighbors are $\\{v_{n-1}, v_1, c_2, u_n\\}$. The backward neighbors are $v_{n-1}$, $v_1$, and $u_n$. The only forward neighbor is $c_2$. So, $v_n$ has 1 forward neighbor.\nThe maximum number of forward neighbors for any vertex in the block $\\{v_1, \\ldots, v_n\\}$ is 3.\n\n- **For the hub vertices $c_1$ and $c_2$:**\n    - The neighbors of $c_1$ are $\\{u_1, \\ldots, u_n\\}$. All these vertices appear before $c_1$ in the ordering $\\mathcal{O}$. Thus, $c_1$ has 0 forward neighbors.\n    - The neighbors of $c_2$ are $\\{v_1, \\ldots, v_n\\}$. All these vertices appear before $c_2$ in $\\mathcal{O}$. Thus, $c_2$ has 0 forward neighbors.\n\nThe maximum number of forward neighbors over all vertices in the graph for this ordering $\\mathcal{O}$ is 4 (achieved by vertex $u_1$). This demonstrates that the degeneracy of $G$ is at most 4.\n$$d(G) \\le 4$$\n\nCombining our two results, $d(G) \\ge 4$ and $d(G) \\le 4$, we conclude that the degeneracy of the Bridged Wheels Graph $BW_n$ for $n \\ge 5$ is exactly 4.", "answer": "$$\\boxed{4}$$", "id": "1552838"}]}