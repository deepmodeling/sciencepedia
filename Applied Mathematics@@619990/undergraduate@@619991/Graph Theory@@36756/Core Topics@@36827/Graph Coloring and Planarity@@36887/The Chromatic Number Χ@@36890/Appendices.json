{"hands_on_practices": [{"introduction": "Many real-world optimization puzzles, like scheduling meetings with conflicting participants, can be elegantly solved using graph coloring. This first practice exercise [@problem_id:1405225] guides you through this modeling process. You will translate a set of scheduling constraints into a graph and then determine its chromatic number, representing the minimum number of time slots needed, by analyzing its fundamental structure.", "problem": "A university is organizing a series of strategic planning meetings for the upcoming academic year. There is one central steering committee and six specialized sub-committees focused on different areas: Academics, Finance, Infrastructure, Student Life, Research, and Community Outreach. For effective coordination, the following meeting constraints must be observed:\n\n1.  The central steering committee must meet individually with each of the six sub-committees.\n2.  The sub-committees have a circular dependency for resource allocation. The Academics committee must coordinate with both the Community Outreach and the Finance committees. The Finance committee must coordinate with the Academics and Infrastructure committees. The Infrastructure committee must coordinate with the Finance and Student Life committees. The Student Life committee must coordinate with the Infrastructure and Research committees. The Research committee must coordinate with the Student Life and Community Outreach committees. Finally, the Community Outreach committee must coordinate with the Research and Academics committees.\n\nMeetings are to be scheduled into discrete, non-overlapping time slots. If two committees need to coordinate or meet with each other, they cannot be scheduled in the same time slot. What is the minimum number of time slots required to schedule all seven committee meetings according to these constraints?", "solution": "Model the situation as a graph $G=(V,E)$, where each vertex in $V$ is a committee and an edge in $E$ connects two committees that cannot meet in the same time slot. Let $V=\\{S,A,F,I,L,R,C\\}$ denote the central steering committee $S$ and the six sub-committees: Academics $A$, Finance $F$, Infrastructure $I$, Student Life $L$, Research $R$, and Community Outreach $C$. The constraints imply:\n1) $S$ is adjacent to each of $A,F,I,L,R,C$.\n2) The sub-committees form a $6$-cycle: $(A,F)$, $(F,I)$, $(I,L)$, $(L,R)$, $(R,C)$, $(C,A)$.\n\nThus $G$ is the wheel on $7$ vertices with rim $C_{6}$. Minimizing time slots is equivalent to finding the chromatic number $\\chi(G)$, the minimum $k$ for which there exists a proper vertex coloring $f:V\\to\\{1,\\dots,k\\}$ with $f(u)\\neq f(v)$ whenever $(u,v)\\in E$.\n\nFirst, color the rim $C_{6}$. Since $C_{6}$ is an even cycle, it is bipartite, hence $\\chi(C_{6})=2$. Therefore we can color the six sub-committees alternately with two colors, say assign color $1$ to $A,I,R$ and color $2$ to $F,L,C$. The hub $S$ is adjacent to all six rim vertices, which collectively use both colors $1$ and $2$, so $S$ cannot use either of those colors. Assign a third color, say color $3$, to $S$. This yields a proper $3$-coloring of $G$, so $\\chi(G)\\leq 3$.\n\nTo show that fewer than three colors are impossible, suppose $\\chi(G)\\leq 2$. Then the rim $C_{6}$ can indeed be colored with two colors, using both colors among the neighbors of $S$. Since $S$ is adjacent to all six rim vertices, $S$ would have to avoid both colors simultaneously, which is impossible with only two colors. Hence $\\chi(G)\\geq 3$.\n\nCombining the bounds gives $\\chi(G)=3$. Therefore, the minimum number of time slots required is $3$.", "answer": "$$\\boxed{3}$$", "id": "1405225"}, {"introduction": "Finding the exact chromatic number of a graph is computationally difficult, so in practice, we often rely on efficient algorithms like the greedy coloring method. This exercise [@problem_id:1539406] reveals a crucial aspect of such algorithms: their outcome can depend heavily on the order of operations. By applying the greedy algorithm to the same set of tasks using two different sequences, you will see firsthand how the choice of ordering can impact the efficiency of the resulting coloring.", "problem": "A technology firm is developing an automated scheduling system for a set of six specialized computational tasks: $A_1, A_2, A_3, B_1, B_2, B_3$. Due to resource dependencies, some pairs of tasks are \"conflicting\" and cannot be run in the same time slot. The conflict rules are as follows:\n\n1.  There are no conflicts between any two tasks from the set $\\{A_1, A_2, A_3\\}$.\n2.  There are no conflicts between any two tasks from the set $\\{B_1, B_2, B_3\\}$.\n3.  A conflict exists between a task $A_i$ and a task $B_j$ if and only if their indices are different, i.e., $i \\neq j$.\n\nThe scheduling system uses a greedy algorithm. It processes tasks one by one according to a given ordered list. For each task, it assigns the smallest positive integer time slot (1, 2, 3, ...) that is not already being used by any of the previously scheduled tasks that conflict with the current task.\n\nYour goal is to analyze the performance of this algorithm with two different task orderings.\n\n-   First, consider the ordering $\\sigma_1 = (A_1, B_1, A_2, B_2, A_3, B_3)$. Let $k_1$ be the total number of distinct time slots used for this ordering.\n-   Second, consider the ordering $\\sigma_2 = (A_1, A_2, A_3, B_1, B_2, B_3)$. Let $k_2$ be the total number of distinct time slots used for this ordering.\n\nDetermine the values of $k_1$ and $k_2$. Provide your answer as a pair of integers $(k_1, k_2)$.", "solution": "We model the situation as graph coloring under the greedy algorithm: each task is a vertex, edges represent conflicts, and the algorithm assigns to each vertex, in the given order, the smallest positive integer not used by any already colored conflicting vertices.\n\nConflicts are defined as follows:\n- No conflicts within $\\{A_{1}, A_{2}, A_{3}\\}$ and none within $\\{B_{1}, B_{2}, B_{3}\\}$.\n- $A_{i}$ conflicts with $B_{j}$ if and only if $i \\neq j$.\n\nFor $\\sigma_{1} = (A_{1}, B_{1}, A_{2}, B_{2}, A_{3}, B_{3})$:\n- $A_{1}$: no earlier conflicting tasks, assign color $1$.\n- $B_{1}$: does not conflict with $A_{1}$, assign color $1$.\n- $A_{2}$: conflicts with $B_{1}$ (color $1$), so color $1$ is forbidden; assign color $2$.\n- $B_{2}$: conflicts with $A_{1}$ (color $1$), so color $1$ is forbidden; assign color $2$.\n- $A_{3}$: conflicts with $B_{1}$ (color $1$) and $B_{2}$ (color $2$); colors $1$ and $2$ are forbidden; assign color $3$.\n- $B_{3}$: conflicts with $A_{1}$ (color $1$) and $A_{2}$ (color $2$); colors $1$ and $2$ are forbidden; assign color $3$.\nThus $k_{1} = 3$.\n\nFor $\\sigma_{2} = (A_{1}, A_{2}, A_{3}, B_{1}, B_{2}, B_{3})$:\n- $A_{1}$: no earlier conflicting tasks, assign color $1$.\n- $A_{2}$: no conflict with $A_{1}$, assign color $1$.\n- $A_{3}$: no conflict with $A_{1}, A_{2}$, assign color $1$.\n- $B_{1}$: conflicts with $A_{2}$ and $A_{3}$ (both color $1$); color $1$ is forbidden; assign color $2$.\n- $B_{2}$: conflicts with $A_{1}$ and $A_{3}$ (color $1$); color $1$ is forbidden; assign color $2$.\n- $B_{3}$: conflicts with $A_{1}$ and $A_{2}$ (color $1$); color $1$ is forbidden; assign color $2$.\nThus $k_{2} = 2$.\n\nTherefore, $(k_{1}, k_{2}) = (3, 2)$.", "answer": "$$\\boxed{\\begin{pmatrix} 3 & 2 \\end{pmatrix}}$$", "id": "1539406"}, {"introduction": "A common intuition is that a graph needs many colors because it contains a large cliqueâ€”a set of vertices all connected to each other. This final practice [@problem_id:1539352] challenges that idea by guiding you through a fascinating graph construction. You will determine the chromatic number of a graph that is triangle-free, yet requires four colors, illustrating the profound concept that chromatic number can be driven by more complex global structures.", "problem": "A robotics lab is scheduling diagnostic tests for a set of 11 newly developed components. The set of components is labeled $V = \\{p_1, p_2, u_1, u_2, w, s_1, s_2, s_3, s_4, s_5, z\\}$. Due to shared resources and signal interference, some pairs of tests cannot be run at the same time and must be assigned to different time slots.\n\nThe interference constraints are defined as follows:\n\n1.  A \"core\" set of 5 components, $C = \\{p_1, p_2, u_1, u_2, w\\}$, has the following pairs of components that interfere with each other: $(p_1, p_2)$, $(p_2, u_1)$, $(u_1, w)$, $(w, u_2)$, and $(u_2, p_1)$.\n\n2.  A \"secondary\" set of 5 components, $S = \\{s_1, s_2, s_3, s_4, s_5\\}$, is linked to the core set. Let the core components be ordered as $c_1=p_1, c_2=p_2, c_3=u_1, c_4=u_2, c_5=w$. For each $i \\in \\{1, \\dots, 5\\}$, the secondary component $s_i$ interferes with every component that its corresponding core component $c_i$ interferes with. For example, since $c_1=p_1$ interferes with $p_2$ and $u_2$, the secondary component $s_1$ interferes with both $p_2$ and $u_2$.\n\n3.  A final \"master\" component, $z$, interferes with all 5 secondary components in the set $S$.\n\nThere are no other interference pairs. Specifically, there is no interference between any two components within the secondary set $S$, and no interference between any two components within the core set $C$ other than those explicitly listed in rule 1.\n\nDetermine the minimum number of time slots required to schedule all 11 component tests without any interference.", "solution": "Model the situation as a graph coloring problem. The minimum number of time slots equals the chromatic number $\\chi(G)$ of the interference graph $G$ on the vertex set $V=\\{p_{1},p_{2},u_{1},u_{2},w,s_{1},s_{2},s_{3},s_{4},s_{5},z\\}$.\n\nFirst, identify the core subgraph on $C=\\{p_{1},p_{2},u_{1},u_{2},w\\}$: the given interference pairs $(p_{1},p_{2})$, $(p_{2},u_{1})$, $(u_{1},w)$, $(w,u_{2})$, $(u_{2},p_{1})$ form a $5$-cycle $C_{5}$. It is a standard result that an odd cycle is not bipartite and satisfies $\\chi(C_{2k+1})=3$, hence $\\chi(G)\\geq 3$.\n\nNext, we show that $3$ colors do not suffice for $G$. Any proper $3$-coloring of $C_{5}$, up to permutation and rotation of colors, has the pattern $(a,b,c,a,b)$ around the cycle in order $(p_{1},p_{2},u_{1},w,u_{2})$. Using the definition of the secondary vertices:\n- $s_{1}$ is adjacent to $p_{2}$ and $u_{2}$, both colored $b$, so $s_{1}\\in\\{a,c\\}$.\n- $s_{2}$ is adjacent to $p_{1}$ and $u_{1}$, colored $a$ and $c$, so $s_{2}=b$.\n- $s_{3}$ is adjacent to $p_{2}$ and $w$, colored $b$ and $a$, so $s_{3}=c$.\n- $s_{4}$ is adjacent to $w$ and $p_{1}$, both colored $a$, so $s_{4}\\in\\{b,c\\}$.\n- $s_{5}$ is adjacent to $u_{1}$ and $u_{2}$, colored $c$ and $b$, so $s_{5}=a$.\n\nThus the secondary set $S=\\{s_{1},\\dots,s_{5}\\}$ necessarily uses all three colors $a$, $b$, $c$ (since $s_{2}=b$, $s_{3}=c$, $s_{5}=a$ are forced). The master vertex $z$ is adjacent to every vertex in $S$, so $z$ must avoid all colors used on $S$ and therefore requires a fourth color. This contradicts the possibility of a $3$-coloring. Therefore $\\chi(G)\\geq 4$.\n\nTo prove $\\chi(G)\\leq 4$, exhibit a $4$-coloring. Color the core $C$ by $(p_{1},p_{2},u_{1},w,u_{2})=(a,b,c,a,b)$ as above. Then assign $s_{2}=b$, $s_{3}=c$, $s_{5}=a$, with $s_{1}\\in\\{a,c\\}$ and $s_{4}\\in\\{b,c\\}$ to avoid their respective neighbors; this is valid since each $s_{i}$ only avoids the colors on its two core neighbors and there are no edges within $S$. Finally, assign $z=d$, a new color different from $a$, $b$, $c$. Since $z$ is not adjacent to any core vertex and is adjacent to all of $S$, this yields a proper $4$-coloring.\n\nCombining the lower and upper bounds, $\\chi(G)=4$. Hence the minimum number of time slots required is $4$.", "answer": "$$\\boxed{4}$$", "id": "1539352"}]}