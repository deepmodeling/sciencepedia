{"hands_on_practices": [{"introduction": "The Traveling Salesman Problem is computationally hard, meaning finding the absolute best solution can be incredibly time-consuming. We often rely on heuristic algorithms that find good, though not necessarily perfect, solutions quickly. The Nearest Neighbor (NN) algorithm is one of the most intuitive \"construction\" heuristics, where you build a tour from scratch. This practice [@problem_id:1547148] allows you to apply this fundamental greedy method, building a tour step-by-step by always choosing the next closest location.", "problem": "A robotic planetary rover is tasked with a sample collection mission at five distinct scientific sites on an asteroid, designated Alpha ($\\text{A}$), Beta ($\\text{B}$), Gamma ($\\text{C}$), Delta ($\\text{D}$), and Epsilon ($\\text{E}$). The rover must start at site Alpha, visit every other site exactly once, and then return to Alpha to complete its tour. The travel time, in minutes, between any two sites is given by the following table:\n\n| From / To | Alpha ($\\text{A}$) | Beta ($\\text{B}$) | Gamma ($\\text{C}$) | Delta ($\\text{D}$) | Epsilon ($\\text{E}$) |\n|:---------:|:----------:|:----------:|:-----------:|:----------:|:-------------:|\n| Alpha ($\\text{A}$) |     0      |     12     |      25     |     18     |       30      |\n| Beta ($\\text{B}$)  |     12     |      0     |      15     |     22     |       19      |\n| Gamma ($\\text{C}$) |     25     |     15     |       0     |     28     |       11      |\n| Delta ($\\text{D}$) |     18     |     22     |      28     |      0     |       20      |\n| Epsilon ($\\text{E}$)|     30     |     19     |      11     |     20     |        0      |\n\nTo determine its path, the rover uses the Nearest Neighbor algorithm. Starting from site Alpha, the rover repeatedly travels to the nearest unvisited site until all sites have been visited, at which point it returns to Alpha.\n\nCalculate the total travel time for the tour generated by this algorithm. Express your answer in minutes.", "solution": "The Nearest Neighbor algorithm selects, at each step, the unvisited site with the smallest travel time from the current site. Starting at Alpha (A), the unvisited set initially is $\\{ \\text{B}, \\text{C}, \\text{D}, \\text{E} \\}$.\n\nFrom A, the travel times are $A \\to B: 12$, $A \\to C: 25$, $A \\to D: 18$, $A \\to E: 30$. The minimum is $12$, so go to B. The cumulative time after the first move is\n$$\nT_{1} = 12.\n$$\n\nFrom B, the unvisited set is $\\{ \\text{C}, \\text{D}, \\text{E} \\}$, with travel times $B \\to C: 15$, $B \\to D: 22$, $B \\to E: 19$. The minimum is $15$, so go to C. The cumulative time becomes\n$$\nT_{2} = T_{1} + 15 = 12 + 15 = 27.\n$$\n\nFrom C, the unvisited set is $\\{ \\text{D}, \\text{E} \\}$, with travel times $C \\to D: 28$, $C \\to E: 11$. The minimum is $11$, so go to E. The cumulative time becomes\n$$\nT_{3} = T_{2} + 11 = 27 + 11 = 38.\n$$\n\nFrom E, the only remaining unvisited site is D, with travel time $E \\to D: 20$. Go to D. The cumulative time becomes\n$$\nT_{4} = T_{3} + 20 = 38 + 20 = 58.\n$$\n\nAll sites have been visited; return to the start A with travel time $D \\to A: 18$. The total tour time is\n$$\nT = T_{4} + 18 = 58 + 18 = 76.\n$$", "answer": "$$\\boxed{76}$$", "id": "1547148"}, {"introduction": "While the Nearest Neighbor algorithm is simple and fast, its \"short-sighted\" focus on the next best step can lead to inefficient overall tours. A crucial skill in computer science and operations research is evaluating an algorithm's performance. This exercise [@problem_id:1411136] provides a hands-on demonstration of this principle by asking you to compare the NN solution against the true optimal tour for a specific hypothetical layout. Calculating the performance ratio will help you quantify the heuristic's error and understand why greedy choices are not always globally wise.", "problem": "A logistics company is optimizing its delivery routes using autonomous drones. For a test run, a drone is tasked with visiting a set of four locations, labeled P, Q, R, and S. The drone's home base is at location P. The Cartesian coordinates of the four locations in a 2D plane are given in arbitrary units of distance as follows:\n- P: (0, 0)\n- Q: (6, 0)\n- R: (12, 0)\n- S: (3, 2)\n\nThe travel distance between any two points is the standard Euclidean distance. The drone is programmed with a simple \"Nearest Neighbor Greedy Algorithm\" to determine its path. This algorithm works as follows: starting from its current location, the drone always travels to the nearest unvisited location. This process is repeated until all locations have been visited, after which the drone returns to its starting base, P. In case of a tie for the nearest unvisited location, the drone is programmed to choose the location that comes first in alphabetical order (P < Q < R < S).\n\nLet $L_{greedy}$ be the total length of the tour generated by this algorithm starting from P. Let $L_{opt}$ be the length of the absolute shortest possible tour that visits all four locations and returns to P.\n\nCalculate the performance ratio $\\frac{L_{greedy}}{L_{opt}}$. Round your final answer to four significant figures.", "solution": "The Euclidean distance between points $A(x_{1},y_{1})$ and $B(x_{2},y_{2})$ is \n$$\nd(A,B)=\\sqrt{(x_{2}-x_{1})^{2}+(y_{2}-y_{1})^{2}}.\n$$\nCompute needed distances:\n$$\nd(P,Q)=\\sqrt{(6-0)^{2}+(0-0)^{2}}=6,\\quad d(P,R)=\\sqrt{(12-0)^{2}}=12,\\quad d(P,S)=\\sqrt{(3-0)^{2}+(2-0)^{2}}=\\sqrt{13},\n$$\n$$\nd(S,Q)=\\sqrt{(6-3)^{2}+(0-2)^{2}}=\\sqrt{13},\\quad d(S,R)=\\sqrt{(12-3)^{2}+(0-2)^{2}}=\\sqrt{85},\\quad d(Q,R)=\\sqrt{(12-6)^{2}}=6.\n$$\n\nNearest Neighbor Greedy Algorithm from $P$:\n- From $P$: nearest unvisited is $S$ because $\\sqrt{13}<6<12$, so $P\\to S$.\n- From $S$: nearest among unvisited $\\{Q,R\\}$ is $Q$ since $\\sqrt{13}<\\sqrt{85}$, so $S\\to Q$.\n- From $Q$: only $R$ remains, so $Q\\to R$.\n- Return to $P$: $R\\to P$.\n\nThus,\n$$\nL_{greedy}=d(P,S)+d(S,Q)+d(Q,R)+d(R,P)=\\sqrt{13}+\\sqrt{13}+6+12=18+2\\sqrt{13}.\n$$\n\nTo find $L_{opt}$, evaluate all tours starting and ending at $P$:\n$$\n\\begin{aligned}\nP\\to Q\\to R\\to S\\to P &: 6+6+\\sqrt{85}+\\sqrt{13}=12+\\sqrt{85}+\\sqrt{13},\\\\\nP\\to Q\\to S\\to R\\to P &: 6+\\sqrt{13}+\\sqrt{85}+12=18+\\sqrt{13}+\\sqrt{85},\\\\\nP\\to R\\to Q\\to S\\to P &: 12+6+\\sqrt{13}+\\sqrt{13}=18+2\\sqrt{13},\\\\\nP\\to R\\to S\\to Q\\to P &: 12+\\sqrt{85}+\\sqrt{13}+6=18+\\sqrt{85}+\\sqrt{13},\\\\\nP\\to S\\to Q\\to R\\to P &: \\sqrt{13}+\\sqrt{13}+6+12=18+2\\sqrt{13},\\\\\nP\\to S\\to R\\to Q\\to P &: \\sqrt{13}+\\sqrt{85}+6+6=12+\\sqrt{85}+\\sqrt{13}.\n\\end{aligned}\n$$\nThe minimum is \n$$\nL_{opt}=12+\\sqrt{85}+\\sqrt{13}.\n$$\n\nTherefore, the performance ratio is\n$$\n\\frac{L_{greedy}}{L_{opt}}=\\frac{18+2\\sqrt{13}}{12+\\sqrt{85}+\\sqrt{13}}.\n$$\nUsing $\\sqrt{13}\\approx 3.605551275$ and $\\sqrt{85}\\approx 9.219544457$ gives\n$$\nL_{greedy}\\approx 25.211102551,\\quad L_{opt}\\approx 24.825095733,\\quad \\frac{L_{greedy}}{L_{opt}}\\approx 1.015549056,\n$$\nwhich rounds to four significant figures as $1.016$.", "answer": "$$\\boxed{1.016}$$", "id": "1411136"}, {"introduction": "Instead of building a tour from scratch, we can also start with any valid tour and try to improve it. This is the basis of \"local search\" or \"improvement\" heuristics, like the classic 2-opt algorithm, which systematically swaps pairs of edges to find shorter routes. This practice [@problem_id:1411108] explores a critical concept in optimization: the local optimum. You will analyze a tour that cannot be improved by any single 2-opt swap, yet is still not the best possible tour, illustrating a fundamental challenge that more advanced optimization algorithms are designed to overcome.", "problem": "A new generation of autonomous delivery drones operates in a city with five key distribution centers, labeled A, B, C, D, and E. To optimize battery life, the drones must follow a tour that starts at a center, visits every other center exactly once, and returns to the start. The travel times (in minutes) between any two centers are fixed and are given by the following symmetric matrix:\n\n$$\n\\begin{pmatrix}\n & \\text{A} & \\text{B} & \\text{C} & \\text{D} & \\text{E} \\\\\n\\text{A} & 0 & 10 & 10 & 10 & 10 \\\\\n\\text{B} & 10 & 0 & 10 & 30 & 15 \\\\\n\\text{C} & 10 & 10 & 0 & 10 & 30 \\\\\n\\text{D} & 10 & 30 & 10 & 0 & 10 \\\\\n\\text{E} & 10 & 15 & 30 & 10 & 0\n\\end{pmatrix}\n$$\n\nA tour's route can be improved using a \"path-swap\" maneuver. This maneuver involves selecting two non-consecutive flight paths in the current tour, say from center $X_1$ to $X_2$ and from $Y_1$ to $Y_2$, and replacing them with new paths from $X_1$ to $Y_1$ and $X_2$ to $Y_2$. The sequence of centers between $X_2$ and $Y_1$ is reversed to form a new valid tour. A tour is considered locally optimal if no single path-swap maneuver can decrease its total travel time.\n\nWhile the globally optimal tour is the one with the absolute shortest travel time, other locally optimal tours can exist. Your task is to identify which of the following tours is locally optimal but is **not** the globally optimal tour.\n\nA. A → B → C → D → E → A\n\nB. A → C → B → E → D → A\n\nC. D → A → C → E → B → D\n\nD. A → B → D → C → E → A", "solution": "Let $w(X,Y)$ denote the travel time between centers $X$ and $Y$. A $2$-opt (path-swap) between non-consecutive edges $(x_{1},x_{2})$ and $(y_{1},y_{2})$ that appear in the tour as $x_{1}-x_{2}-\\dots-y_{1}-y_{2}$ replaces them by $(x_{1},y_{1})$ and $(x_{2},y_{2})$; it is improving if and only if\n$$\nw(x_{1},x_{2})+w(y_{1},y_{2})>w(x_{1},y_{1})+w(x_{2},y_{2}).\n$$\n\nFirst, any tour uses $5$ edges, each at least $10$, so the total is at least $50$. Tour A is\n$$\nA\\to B\\to C\\to D\\to E\\to A,\n$$\nwith length\n$$\nw(A,B)+w(B,C)+w(C,D)+w(D,E)+w(E,A)=10+10+10+10+10=50,\n$$\nso $50$ is the global optimum.\n\nNow test local optimality for the remaining tours.\n\nTour B: $A\\to C\\to B\\to E\\to D\\to A$ has edges $(A,C),(C,B),(B,E),(E,D),(D,A)$. The five nonadjacent edge pairs yield the following $2$-opt tests (using the tour order to determine reconnections):\n1. $(A,C)$ with $(B,E)$:\n$$\nw(A,C)+w(B,E)\\stackrel{?}{>}w(A,B)+w(C,E)\\;\\Longleftrightarrow\\;10+15\\stackrel{?}{>}10+30,\n$$\nfalse.\n2. $(C,B)$ with $(E,D)$:\n$$\n10+10\\stackrel{?}{>}30+30,\n$$\nfalse.\n3. $(B,E)$ with $(D,A)$:\n$$\n15+10\\stackrel{?}{>}30+10,\n$$\nfalse.\n4. $(E,D)$ with $(A,C)$:\n$$\n10+10\\stackrel{?}{>}10+10,\n$$\nfalse (equality).\n5. $(D,A)$ with $(C,B)$:\n$$\n10+10\\stackrel{?}{>}10+10,\n$$\nfalse (equality).\nNo strictly improving $2$-opt exists, so Tour B is locally optimal. Its total length is\n$$\n10+10+15+10+10=55>50,\n$$\nso it is not globally optimal.\n\nTour C: $D\\to A\\to C\\to E\\to B\\to D$ contains edges $(C,E)$ and $(B,D)$, which are nonadjacent in the tour order. Test the $2$-opt swap:\n$$\nw(C,E)+w(B,D)>w(C,B)+w(E,D)\\;\\Longleftrightarrow\\;30+30>10+10,\n$$\ntrue, so Tour C is not locally optimal.\n\nTour D: $A\\to B\\to D\\to C\\to E\\to A$ contains nonadjacent edges $(B,D)$ and $(C,E)$. Test:\n$$\nw(B,D)+w(C,E)>w(B,C)+w(D,E)\\;\\Longleftrightarrow\\;30+30>10+10,\n$$\ntrue, so Tour D is not locally optimal.\n\nTherefore, among the given options, the unique tour that is locally optimal but not globally optimal is Tour B.", "answer": "$$\\boxed{B}$$", "id": "1411108"}]}