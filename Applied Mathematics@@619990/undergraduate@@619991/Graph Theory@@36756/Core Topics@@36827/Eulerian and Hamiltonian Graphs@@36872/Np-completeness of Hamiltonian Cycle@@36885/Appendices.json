{"hands_on_practices": [{"introduction": "While determining the existence of a Hamiltonian cycle is a notoriously difficult problem in general, certain conditions can provide a definitive \"yes\". This practice explores one such powerful shortcut, Ore's Theorem, which guarantees a Hamiltonian cycle if a graph is sufficiently dense. By applying this theorem to a given network, you will practice calculating vertex degrees and checking the condition for non-adjacent vertices, gaining insight into how structural properties can bypass computational complexity. [@problem_id:1524672]", "problem": "In the field of network science, analyzing routing paths is a fundamental task. A particularly interesting problem is determining if a network allows for a tour that visits every node exactly once before returning to the start, a structure known in graph theory as a Hamiltonian cycle. The general problem of finding such a cycle is NP-complete, which implies that no known algorithm can solve it efficiently for all possible networks.\n\nHowever, for certain classes of graphs, mathematical theorems provide sufficient conditions that guarantee the existence of a Hamiltonian cycle, allowing us to bypass the computationally expensive search. One of the most well-known results is Ore's Theorem.\n\n**Ore's Theorem**: Let $G$ be a simple graph with $n \\ge 3$ vertices. If for every pair of distinct, non-adjacent vertices $u$ and $v$, the sum of their degrees satisfies the inequality $\\deg(u) + \\deg(v) \\ge n$, then $G$ contains a Hamiltonian cycle.\n\nIt is important to note that this is a sufficient, but not necessary, condition. If a graph fails to meet the condition, Ore's Theorem is inconclusive, and the graph may or may not have a Hamiltonian cycle.\n\nConsider a simple graph $G=(V, E)$ representing a computer network with a set of $n=7$ servers, $V = \\{S_1, S_2, S_3, S_4, S_5, S_6, S_7\\}$. The direct connections (edges) between the servers are specified by their adjacency lists:\n- $S_1$ is connected to: $S_2, S_3, S_4$\n- $S_2$ is connected to: $S_1, S_3, S_6$\n- $S_3$ is connected to: $S_1, S_2, S_4, S_5$\n- $S_4$ is connected to: $S_1, S_3, S_7$\n- $S_5$ is connected to: $S_3, S_6, S_7$\n- $S_6$ is connected to: $S_2, S_5, S_7$\n- $S_7$ is connected to: $S_4, S_5, S_6$\n\nBy applying Ore's Theorem to this specific network graph $G$, which of the following statements is the correct conclusion?\n\nA. Ore's Theorem guarantees that a Hamiltonian cycle exists because the condition $\\deg(u) + \\deg(v) \\ge n$ holds for all pairs of non-adjacent vertices.\n\nB. Ore's Theorem is inconclusive because the condition fails for the non-adjacent pair $\\{S_3, S_6\\}$.\n\nC. Ore's Theorem is inconclusive because the condition fails for the non-adjacent pair $\\{S_2, S_4\\}$.\n\nD. Ore's Theorem is inconclusive because the condition fails for the pair $\\{S_1, S_3\\}$, which are non-adjacent.\n\nE. Ore's Theorem guarantees that no Hamiltonian cycle exists in the graph because its condition is not met for at least one pair of non-adjacent vertices.", "solution": "By Ore's Theorem, for a simple graph with $n \\ge 3$ vertices, if for every pair of distinct non-adjacent vertices $u, v$ we have $\\deg(u) + \\deg(v) \\ge n$, then the graph is Hamiltonian. Here $n=7$, so the condition to check is $\\deg(u) + \\deg(v) \\ge 7$ for all non-adjacent pairs.\n\nCompute degrees from the adjacency lists:\n- $\\deg(S_1) = 3$ (neighbors $S_2, S_3, S_4$).\n- $\\deg(S_2) = 3$ (neighbors $S_1, S_3, S_6$).\n- $\\deg(S_3) = 4$ (neighbors $S_1, S_2, S_4, S_5$).\n- $\\deg(S_4) = 3$ (neighbors $S_1, S_3, S_7$).\n- $\\deg(S_5) = 3$ (neighbors $S_3, S_6, S_7$).\n- $\\deg(S_6) = 3$ (neighbors $S_2, S_5, S_7$).\n- $\\deg(S_7) = 3$ (neighbors $S_4, S_5, S_6$).\n\nEvaluate the option-specific pairs:\n- For option D, the pair $\\{S_1, S_3\\}$ are adjacent (both lists include each other), so Ore's condition does not apply to them; the statement claiming they are non-adjacent is false.\n- For option B, the pair $\\{S_3, S_6\\}$ are non-adjacent. Their degrees satisfy $\\deg(S_3) + \\deg(S_6) = 4 + 3 = 7$, which meets the condition $\\deg(u) + \\deg(v) \\ge 7$. Therefore this pair does not cause the condition to fail, so option B is false.\n- For option C, the pair $\\{S_2, S_4\\}$ are non-adjacent. Their degrees satisfy $\\deg(S_2) + \\deg(S_4) = 3 + 3 = 6$, and since $6  7$, the Ore condition fails for this pair:\n$$\\deg(S_2) + \\deg(S_4) = 6  7 = n.$$\nTherefore Ore's Theorem does not guarantee a Hamiltonian cycle in this graph. It is inconclusive.\n\nConsequently, option A is false because the condition does not hold for all non-adjacent pairs, and option E is false because failure of the sufficient condition does not preclude the existence of a Hamiltonian cycle.\n\nThus the correct conclusion is that Ore's Theorem is inconclusive due to the non-adjacent pair $\\{S_2, S_4\\}$ failing the degree-sum condition.", "answer": "$$\\boxed{C}$$", "id": "1524672"}, {"introduction": "Just as there are tools to confirm a Hamiltonian cycle, there are methods to definitively rule one out. This exercise is based on a fundamental necessary condition: if a graph possesses a Hamiltonian cycle, it cannot be easily \"shattered\" by removing a few vertices. You will investigate a graph's structure to find a vertex cut $S$ where the number of resulting components, $c(G-S)$, is greater than the size of the cut, $|S|$, providing a rigorous proof of non-Hamiltonicity. [@problem_id:1524667]", "problem": "A crucial property for analyzing network structures is related to their robustness against node failures. One such property concerns determining whether a set of nodes can be removed to fragment the network into a disproportionately large number of disconnected pieces.\n\nConsider an undirected graph $G=(V,E)$ with the vertex set $V = \\{a_1, a_2, a_3, b_1, b_2, b_3, c_1, c_2, c_3, s_1, s_2\\}$ and the edge set $E$ consisting of the following edges:\n- Edges forming three distinct triangles: $(a_1, a_2), (a_2, a_3), (a_3, a_1)$; and $(b_1, b_2), (b_2, b_3), (b_3, b_1)$; and $(c_1, c_2), (c_2, c_3), (c_3, c_1)$.\n- Edges connecting the vertex $s_1$ to each of the three triangles: $(s_1, a_1), (s_1, b_1), (s_1, c_1)$.\n- Edges connecting the vertex $s_2$ to each of the three triangles: $(s_2, a_2), (s_2, b_2), (s_2, c_2)$.\n\nWhich of the following vertex subsets $S \\subset V$ has the property that the number of connected components of the graph $G-S$ is strictly greater than the number of vertices in $S$? The graph $G-S$ is formed by removing the vertices in $S$ and all edges incident to them.\n\nA. $S = \\{s_1, s_2\\}$\n\nB. $S = \\{a_1, b_1, c_1\\}$\n\nC. $S = \\{a_3, b_3, c_3\\}$\n\nD. $S = \\{a_1, a_2\\}$\n\nE. $S = \\{s_1, a_1\\}$", "solution": "We analyze each candidate subset $S$ by removing its vertices and incident edges, then counting the number of connected components in $G-S$, denoted $c(G-S)$, and comparing it to $|S|$. The property required is $c(G-S) > |S|$.\n\nOption A: $S = \\{s_1, s_2\\}$. Removing both $s_1$ and $s_2$ leaves exactly the three disjoint triangles on $\\{a_1, a_2, a_3\\}$, $\\{b_1, b_2, b_3\\}$, and $\\{c_1, c_2, c_3\\}$. Hence,\n$$\nc(G-S) = 3, \\quad |S| = 2, \\quad \\text{so } 3 > 2.\n$$\nThus A satisfies the property.\n\nOption B: $S = \\{a_1, b_1, c_1\\}$. Removing these splits each triangle by one vertex: in each of the three, the remaining two vertices are connected by the edge between the $2$- and $3$-nodes. Vertex $s_2$ connects to $a_2, b_2, c_2$, and within each pair $\\{x_2, x_3\\}$ ($x\\in\\{a,b,c\\}$) there is an edge, so $s_2$, $a_2, a_3, b_2, b_3, c_2, c_3$ are in one component. Vertex $s_1$ remains but is isolated (its neighbors were removed). Therefore,\n$$\nc(G-S) = 2, \\quad |S| = 3, \\quad \\text{so } 2 \\not> 3.\n$$\nThus B does not satisfy the property.\n\nOption C: $S = \\{a_3, b_3, c_3\\}$. Each triangle reduces to the edge between its $1$- and $2$-nodes. The vertices $s_1$ and $s_2$ are present and connect to the $1$- and $2$-nodes respectively, yielding a single connected component containing all remaining vertices. Hence,\n$$\nc(G-S) = 1, \\quad |S| = 3, \\quad \\text{so } 1 \\not> 3.\n$$\nThus C does not satisfy the property.\n\nOption D: $S = \\{a_1, a_2\\}$. In triangle $A$, only $a_3$ remains and becomes isolated. Triangles $B$ and $C$ are intact, and $s_1$ connects to $b_1, c_1$ while $s_2$ connects to $b_2, c_2$; together, these form one connected component. Therefore,\n$$\nc(G-S) = 2, \\quad |S| = 2, \\quad \\text{so } 2 \\not> 2.\n$$\nThus D does not satisfy the property.\n\nOption E: $S = \\{s_1, a_1\\}$. Triangle $A$ reduces to the edge $a_2 a_3$, and $s_2$ connects to $a_2, b_2, c_2$; with the full triangles $B$ and $C$ still intact, all remaining vertices are connected via $s_2$. Hence,\n$$\nc(G-S) = 1, \\quad |S| = 2, \\quad \\text{so } 1 \\not> 2.\n$$\nThus E does not satisfy the property.\n\nOnly option A yields $c(G-S) > |S|$.", "answer": "$$\\boxed{A}$$", "id": "1524667"}, {"introduction": "The theory of NP-completeness often centers on \"decision\" problems (answering yes/no), but practical applications require \"search\" solutions (finding the actual object). This thought experiment delves into the profound relationship between the two, a concept known as self-reduction. You will devise a procedure that uses a hypothetical \"black-box\" decider for the Hamiltonian path problem to construct the actual path, revealing how the power to decide implies the power to find. [@problem_id:1524648]", "problem": "A bioinformatics research team is working on a new method for genome assembly. The process involves reconstructing a full Deoxyribonucleic acid (DNA) sequence from a large collection of shorter DNA fragments. This reconstruction problem can be modeled using a directed graph, $G = (N, A)$, where the set of nodes $N$ represents the DNA fragments, and the set of directed arcs $A$ represents potential overlaps between pairs of fragments (an arc from fragment $u$ to fragment $v$ means $v$ can follow $u$). A successful assembly of the entire genome corresponds to finding a Hamiltonian path in this graph, which is a path that visits every node exactly once.\n\nThe team has access to a powerful, but costly, proprietary software library. This library provides a single \"black-box\" function, `hasHamiltonianPath(G')`, which takes a directed graph `G'` as input. It returns `True` if `G'` contains at least one Hamiltonian path, and `False` otherwise. The function provides no information about the path itself, only its existence.\n\nYou are tasked with devising a procedure that uses this `hasHamiltonianPath` function to determine the exact sequence of arcs that form a single, complete Hamiltonian path. Your procedure must work for any given directed graph $G=(N,A)$ which is guaranteed to contain at least one Hamiltonian path. The licensing agreement for the software bills per function call, so your primary goal is to determine the upper bound on the number of calls required.\n\nWhat is the maximum number of times your procedure would need to call the `hasHamiltonianPath` function to construct one full Hamiltonian path for a graph with $|N|=V$ vertices and $|A|=E$ arcs? Express your answer as a closed-form analytic expression in terms of $V$ and $E$.", "solution": "We are given a directed graph $G=(N,A)$ with $|N|=V$ vertices and $|A|=E$ arcs, guaranteed to contain at least one Hamiltonian path (HP), and access to an oracle function $\\mathrm{hasHamiltonianPath}(\\cdot)$ that decides existence of a HP. The goal is to recover the exact set of arcs of one Hamiltonian path while minimizing the number of oracle calls, and to bound the maximum number of calls required.\n\nDefine the following self-reduction procedure. Fix any ordering of the arcs $A=\\{e_{1},e_{2},\\dots,e_{E}\\}$. Initialize $H_{0}=G$. For $i=1,2,\\dots,E$, do:\n- If $e_{i}\\notin A(H_{i-1})$, set $H_{i}=H_{i-1}$ and make no oracle call.\n- If $e_{i}\\in A(H_{i-1})$, query the oracle on $H_{i-1}\\setminus\\{e_{i}\\}$. If $\\mathrm{hasHamiltonianPath}(H_{i-1}\\setminus\\{e_{i}\\})=\\mathrm{True}$, set $H_{i}=H_{i-1}\\setminus\\{e_{i}\\}$ (permanently delete $e_{i}$). Otherwise, set $H_{i}=H_{i-1}$ (keep $e_{i}$).\n\nAfter completing all $E$ iterations, output the remaining graph $H_{E}$ by listing its arcs; this is the recovered Hamiltonian path.\n\nWe justify correctness and bound the number of oracle calls.\n\nInvariant (preservation of Hamiltonicity): For every $i$, the graph $H_{i}$ has at least one Hamiltonian path. This holds by induction: it is true for $H_{0}=G$ by assumption. At each step, if we delete $e_{i}$ then the deletion is made only when $\\mathrm{hasHamiltonianPath}(H_{i-1}\\setminus\\{e_{i}\\})=\\mathrm{True}$, so $H_{i}$ still has a HP; otherwise we do not delete $e_{i}$ and clearly preserve any existing HP.\n\nMinimality at termination: Let $H^{\\star}=H_{E}$. By construction, for every arc $f\\in A(H^{\\star})$ we must have $\\mathrm{hasHamiltonianPath}(H^{\\star}\\setminus\\{f\\})=\\mathrm{False}$; otherwise that arc would have been deleted when it was considered. Therefore $H^{\\star}$ is minimal with respect to edge deletion among subgraphs that still admit a Hamiltonian path.\n\nStructure of a minimal HP-containing subgraph: We claim that $H^{\\star}$ consists of exactly the arcs of a single Hamiltonian path, hence $|A(H^{\\star})|=V-1$ and the arcs of that unique path are precisely the output.\n\nProof: First, $H^{\\star}$ cannot contain two distinct Hamiltonian paths. If it did, there would exist an arc $a$ used by one of the paths but not by the other. Then $H^{\\star}\\setminus\\{a\\}$ would still contain a Hamiltonian path (the one avoiding $a$), contradicting minimality. Hence $H^{\\star}$ has a unique HP $P$. Second, $H^{\\star}$ cannot contain any arc not belonging to $P$, because deleting such an arc would leave $P$ intact and thus preserve a HP, again contradicting minimality. Therefore every arc of $H^{\\star}$ lies on $P$, which implies $A(H^{\\star})$ is exactly the $V-1$ arcs of $P$.\n\nNumber of oracle calls: We call the oracle at most once for each $e_{i}$ with $e_{i}\\in A(H_{i-1})$. Since we process each of the $E$ original arcs in a fixed order and never re-test any arc, the number of oracle calls is at most $E$. We do not need an initial call on $G$, because the problem guarantees that $G$ is Hamiltonian; all intermediate calls are exactly those used to decide deletions. Thus the maximum number of calls required by this procedure to construct one full Hamiltonian path is $E$.\n\nTherefore, an explicit closed-form upper bound in terms of $V$ and $E$ is $E$.", "answer": "$$\\boxed{E}$$", "id": "1524648"}]}