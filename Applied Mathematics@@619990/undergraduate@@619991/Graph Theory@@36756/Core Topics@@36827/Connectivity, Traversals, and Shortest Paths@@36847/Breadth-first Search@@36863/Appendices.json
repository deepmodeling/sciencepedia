{"hands_on_practices": [{"introduction": "This first practice is about getting your hands dirty with the Breadth-First Search (BFS) algorithm itself. By manually tracing the traversal on a small graph, you will solidify your understanding of the queue-based mechanism and the level-by-level exploration that defines BFS. This exercise is foundational for mastering the algorithm's operational details, including handling neighbors in a specific, predetermined order. [@problem_id:1485198]", "problem": "In a small-scale, isolated data center, a network of 8 servers, labeled 1 through 8, are interconnected. The network topology is bidirectional and is represented by an $8 \\times 8$ adjacency matrix $A$, where $A_{ij} = 1$ if there is a direct link between server $i$ and server $j$, and $A_{ij} = 0$ otherwise. The matrix $A$ is given by:\n$$\nA = \\begin{pmatrix}\n0  1  1  1  0  0  0  0 \\\\\n1  0  0  0  0  0  0  0 \\\\\n1  0  0  0  1  1  0  0 \\\\\n1  0  0  0  0  0  0  0 \\\\\n0  0  1  0  0  0  0  1 \\\\\n0  0  1  0  0  0  1  0 \\\\\n0  0  0  0  0  1  0  0 \\\\\n0  0  0  0  1  0  0  0\n\\end{pmatrix}\n$$\nA broadcast protocol is initiated to distribute a critical update from a source server to all other servers in the network. The protocol uses a Breadth-First Search (BFS) algorithm to determine the order in which servers are visited. The traversal starts at server 3. When exploring the neighbors of a server, if multiple unvisited neighbors are found, they are added to the visit queue in ascending order of their server labels (e.g., server 2 would be enqueued before server 4).\n\nDetermine the sequence of server labels in the order they are first discovered (i.e., marked as \"visited\") during the BFS traversal.", "solution": "Interpret the graph from the symmetric adjacency matrix $A$ as an undirected graph. The neighbor sets read from the rows are:\n$$\nN(1)=\\{2,3,4\\},\\quad N(2)=\\{1\\},\\quad N(3)=\\{1,5,6\\},\\quad N(4)=\\{1\\},\n$$\n$$\nN(5)=\\{3,8\\},\\quad N(6)=\\{3,7\\},\\quad N(7)=\\{6\\},\\quad N(8)=\\{5\\}.\n$$\nUse BFS starting at server $3$. Principle: enqueue the start node and mark it visited; then iteratively dequeue a node, scan its neighbors in ascending order, and enqueue any unvisited neighbor immediately upon discovery (marking it visited at that time). The order of discovery is the order nodes are first enqueued.\n\nInitialize: queue $Q=[\\,]$, visited sequence empty. Enqueue $3$ and mark visited. Discovery order so far: $3$; queue $Q=[3]$.\n\nDequeue $3$. Its neighbors in ascending order are $1,5,6$. None are visited, so enqueue them in that order and mark visited upon enqueue. Discovery order: $3,1,5,6$; queue $Q=[1,5,6]$.\n\nDequeue $1$. Its neighbors are $2,3,4$ in ascending order. Among these, $3$ is already visited; enqueue $2$ then $4$. Discovery order: $3,1,5,6,2,4$; queue $Q=[5,6,2,4]$.\n\nDequeue $5$. Its neighbors are $3,8$. Node $3$ is visited; enqueue $8$. Discovery order: $3,1,5,6,2,4,8$; queue $Q=[6,2,4,8]$.\n\nDequeue $6$. Its neighbors are $3,7$. Node $3$ is visited; enqueue $7$. Discovery order: $3,1,5,6,2,4,8,7$; queue $Q=[2,4,8,7]$.\n\nDequeue $2$. Neighbor $1$ is already visited; no change. Queue $Q=[4,8,7]$.\n\nDequeue $4$. Neighbor $1$ is visited; no change. Queue $Q=[8,7]$.\n\nDequeue $8$. Neighbor $5$ is visited; no change. Queue $Q=[7]$.\n\nDequeue $7$. Neighbor $6$ is visited; no change. Queue empty; BFS completes.\n\nThus, the order of first discovery is $3,1,5,6,2,4,8,7$.", "answer": "$$\\boxed{\\begin{pmatrix}3  1  5  6  2  4  8  7\\end{pmatrix}}$$", "id": "1485198"}, {"introduction": "Beyond simple traversal, BFS is most famous for finding the shortest path in unweighted graphs. This exercise challenges you to apply this core property to a less obvious problem: finding the length of the shortest cycle that includes a specific edge. Solving this requires a clever problem transformation, a key skill in algorithmic thinking, before applying the standard BFS procedure. [@problem_id:1485215]", "problem": "A city's newly constructed metro system connects several key districts. The system can be modeled as an unweighted, undirected graph where the stations are represented by nodes and the direct tracks between them are represented by edges. The system has 8 stations, labeled with integers from 0 to 7.\n\nThe network of tracks is defined by the following set of edges:\n`{(0, 1), (0, 2), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 7)}`\n\nA special maintenance check is required for the track connecting station 0 and station 1. An inspection train must complete a full cycle that includes traversing this specific track. The train starts at station 0, travels directly to station 1 along the specified track, and then must return to station 0 by traversing a sequence of other available tracks.\n\nWhat is the minimum total number of tracks the inspection train must travel along to complete this entire round trip journey?", "solution": "Model the metro as an unweighted, undirected graph with vertex set $\\{0,1,2,3,4,5,6,7\\}$ and edge set $\\{(0,1),(0,2),(1,3),(2,4),(2,5),(3,6),(4,6),(5,7)\\}$. The inspection train must traverse edge $(0,1)$ from $0$ to $1$, then return from $1$ to $0$ without using the same track $(1,0)$. Therefore, the minimum total number of tracks equals the length $1$ for $(0,1)$ plus the shortest path length from $1$ to $0$ in the graph with edge $(0,1)$ removed.\n\nRemove $(0,1)$ and perform a breadth-first search from $1$:\n- From $1$, the only neighbor is $3$, so $\\operatorname{dist}(1,3)=1$.\n- From $3$, the only new neighbor is $6$, so $\\operatorname{dist}(1,6)=2$.\n- From $6$, the only new neighbor is $4$, so $\\operatorname{dist}(1,4)=3$.\n- From $4$, the only new neighbor is $2$, so $\\operatorname{dist}(1,2)=4$.\n- From $2$, a neighbor is $0$, so $\\operatorname{dist}(1,0)=5$.\n\nBy properties of BFS on unweighted graphs, this is the shortest possible return path length. Hence the minimum total number of tracks traversed is\n$$1+\\operatorname{dist}_{G\\setminus\\{(0,1)\\}}(1,0)=1+5=6.$$", "answer": "$$\\boxed{6}$$", "id": "1485215"}, {"introduction": "This practice demonstrates that the BFS framework is not just for finding paths but can be extended to gather more complex information. You will adapt the algorithm to count the total number of distinct shortest paths between two nodes, a common problem in network routing and analysis. This exercise highlights how a fundamental algorithm can be augmented to solve more sophisticated counting problems. [@problem_id:1485209]", "problem": "In a small-scale, experimental distributed computing network, tasks are routed between different compute nodes. The network consists of 10 nodes, labeled 0 through 9. The connections between these nodes are bidirectional, forming an unweighted graph where each connection represents a single hop. The network topology is defined by the following direct communication links:\n```\n(0, 1), (0, 2), (0, 3)\n(1, 4)\n(2, 4), (2, 5)\n(3, 5), (3, 6)\n(4, 7)\n(5, 7), (5, 8)\n(6, 8)\n(7, 9)\n(8, 9)\n```\n\nA task needs to be sent from the master node, which is Node 0, to a specific execution node, which is Node 9. For resiliency and load-balancing analysis, it is necessary to determine the number of distinct optimal transmission paths between Node 0 and Node 9. An optimal path is defined as a path with the minimum possible number of hops.\n\nCalculate the total number of distinct optimal paths from Node 0 to Node 9.", "solution": "We model the network as an undirected, unweighted graph, so the optimal paths are shortest paths in terms of hop count. Let $D(v)$ denote the minimum number of hops from node $0$ to node $v$, and let $C(v)$ denote the number of shortest paths from node $0$ to node $v$. Initialize $D(0)=0$ and $C(0)=1$.\n\nFrom the direct links, the neighbors of $0$ are $1$, $2$, and $3$, so\n$$D(1)=D(2)=D(3)=1,\\quad C(1)=C(2)=C(3)=1.$$\n\nNext, determine nodes at distance $2$. From the given edges:\n- Node $4$ is adjacent to $1$ and $2$, hence $D(4)=2$ and\n$$C(4)=C(1)+C(2)=1+1=2.$$\n- Node $5$ is adjacent to $2$ and $3$, hence $D(5)=2$ and\n$$C(5)=C(2)+C(3)=1+1=2.$$\n- Node $6$ is adjacent to $3$, hence $D(6)=2$ and\n$$C(6)=C(3)=1.$$\n\nNext, determine nodes at distance $3$. From the edges:\n- Node $7$ is adjacent to $4$ and $5$, both at distance $2$, so $D(7)=3$ and\n$$C(7)=C(4)+C(5)=2+2=4.$$\n- Node $8$ is adjacent to $5$ and $6$, both at distance $2$, so $D(8)=3$ and\n$$C(8)=C(5)+C(6)=2+1=3.$$\n\nFinally, node $9$ is adjacent to $7$ and $8$, both at distance $3$, so $D(9)=4$ and the number of distinct optimal (shortest) paths is\n$$C(9)=C(7)+C(8)=4+3=7.$$\n\nTherefore, the total number of distinct optimal paths from node $0$ to node $9$ is $7$.", "answer": "$$\\boxed{7}$$", "id": "1485209"}]}