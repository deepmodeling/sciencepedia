{"hands_on_practices": [{"introduction": "Understanding network resilience is a cornerstone of robust system design. Menger's theorem provides a powerful mathematical framework for this, stating that the maximum number of edge-disjoint paths between two points is equal to the minimum number of links you must cut to separate them. This first exercise [@problem_id:1522000] invites you to apply the edge version of Menger's theorem to a common network architecture, a complete bipartite graph, to quantify its link-level redundancy.", "problem": "A data center's network architecture is designed for high redundancy using a complete bipartite topology. The network consists of two distinct sets of servers: a set $U$ containing $m$ compute servers and a set $V$ containing $n$ storage servers. The network is fully interconnected between sets, meaning every compute server in set $U$ has a dedicated, direct link to every storage server in set $V$. There are no direct links between servers belonging to the same set.\n\nConsider a specific compute server, $u_0 \\in U$, and a specific storage server, $v_0 \\in V$. We are interested in the resilience of the connection between them, which can be quantified by the number of independent pathways for data transfer. Two communication paths are defined as 'link-disjoint' if they do not share any network links.\n\nGiven a configuration with $m=27$ compute servers and $n=35$ storage servers, calculate the maximum number of link-disjoint paths that can exist between server $u_0$ and server $v_0$.", "solution": "Model the network as the complete bipartite graph $K_{m,n}$ with partite sets $U$ and $V$, where $|U|=m$ and $|V|=n$. The degree of any vertex in $U$ is $n$, and the degree of any vertex in $V$ is $m$. For the specific vertices $u_{0} \\in U$ and $v_{0} \\in V$, the number of link-disjoint paths equals the maximum number of edge-disjoint $u_{0}$–$v_{0}$ paths.\n\nBy the edge version of Menger's theorem, the maximum number of edge-disjoint $u_{0}$–$v_{0}$ paths equals the size of a minimum $u_{0}$–$v_{0}$ edge cut. An upper bound is obtained by observing that removing all edges incident to $u_{0}$ (there are $n$ such edges) or all edges incident to $v_{0}$ (there are $m$ such edges) disconnects $u_{0}$ from $v_{0}$. Therefore,\n$$\n\\lambda(u_{0},v_{0}) \\le \\min\\{m,n\\}.\n$$\nTo show this bound is tight, construct $\\min\\{m,n\\}$ edge-disjoint $u_{0}$–$v_{0}$ paths.\n\nCase 1: $n \\le m$. Use $n$ edge-disjoint paths. One path is the direct edge $(u_{0},v_{0})$. For each $v \\in V \\setminus \\{v_{0}\\}$, select a distinct $u \\in U \\setminus \\{u_{0}\\}$ (possible since $|V \\setminus \\{v_{0}\\}|=n-1 \\le m-1=|U \\setminus \\{u_{0}\\}|$) and form the length-$3$ path with vertex sequence $u_{0}, v, u, v_{0}$. These $n$ paths are pairwise edge-disjoint because:\n- Their first edges incident to $u_{0}$ are distinct (they are $(u_{0},v)$ with different $v$ or $(u_{0},v_{0})$),\n- The last edges incident to $v_{0}$ are distinct (they are $(u,v_{0})$ with distinct $u$ or $(u_{0},v_{0})$),\n- The middle edges $(v,u)$ are all distinct by the distinct pairing.\n\nHence $\\lambda(u_{0},v_{0}) \\ge n$.\n\nCase 2: $m \\le n$. Symmetrically, use $m$ edge-disjoint paths. One path is $(u_{0},v_{0})$. For each $u \\in U \\setminus \\{u_{0}\\}$, select a distinct $v \\in V \\setminus \\{v_{0}\\}$ (possible since $|U \\setminus \\{u_{0}\\}|=m-1 \\le n-1=|V \\setminus \\{v_{0}\\}|$) and form the path with vertex sequence $u_{0}, v, u, v_{0}$. The same edge-disjointness argument applies, giving $\\lambda(u_{0},v_{0}) \\ge m$.\n\nCombining both cases yields\n$$\n\\lambda(u_{0},v_{0})=\\min\\{m,n\\}.\n$$\nFor $m=27$ and $n=35$, we obtain\n$$\n\\lambda(u_{0},v_{0})=\\min\\{27,35\\}=27.\n$$\nThus, the maximum number of link-disjoint paths between $u_{0}$ and $v_{0}$ is $27$.", "answer": "$$\\boxed{27}$$", "id": "1522000"}, {"introduction": "Moving beyond link failures, we now consider resilience against node failures, such as a processor or server going offline. The vertex version of Menger's theorem is the perfect tool for this analysis, relating the maximum number of vertex-disjoint paths to the minimum size of a vertex separator. This practice problem [@problem_id:1521977] presents a specific processor architecture, giving you a chance to calculate its connectivity and appreciate how the theorem handles cases with both direct and indirect connections.", "problem": "A new multi-core processor architecture is being designed for high-performance computing. The architecture consists of a central processing unit (CPU), which we denote as vertex $C$, and a set of $n=8$ specialized processing cores, denoted as vertices $P_1, P_2, \\ldots, P_8$.\n\nThe communication network topology is defined as follows:\n1. The CPU, $C$, is directly connected to every specialized core $P_i$ for $i=1, \\ldots, 8$.\n2. The specialized cores are interconnected to form a linear array. Specifically, for each $i$ from $1$ to $7$, core $P_i$ is connected to core $P_{i+1}$. There are no other connections between the cores.\n\nA key metric for the design's resilience is its connectivity. Determine the maximum number of paths between the CPU, $C$, and the end-of-array core, $P_1$, that are vertex-disjoint. Two paths are considered vertex-disjoint if they do not share any intermediate vertices.", "solution": "Let the vertex representing the CPU, $C$, be denoted by $s$, and the vertices representing the cores $P_i$ be denoted by $v_i$. The graph $G=(V, E)$ under consideration has the vertex set $V = \\{s, v_1, v_2, \\ldots, v_8\\}$. The edge set $E$ is defined by the problem statement and consists of two types of edges:\n1.  \"Spoke\" edges: $(s, v_i)$ for all $i \\in \\{1, \\ldots, 8\\}$.\n2.  \"Array\" edges: $(v_i, v_{i+1})$ for all $i \\in \\{1, \\ldots, 7\\}$.\n\nWe are asked to find the maximum number of internally vertex-disjoint paths between the source vertex $s$ and the target vertex $v_1$.\n\nFirst, we observe that the vertices $s$ and $v_1$ are directly connected by the edge $(s, v_1)$. This connection forms the path $s \\to v_1$. This path is of length 1 and has no intermediate vertices. This is our first path.\n\nTo find any other paths that are vertex-disjoint from this one and from each other, we can apply Menger's Theorem (vertex version). A standard statement of this theorem relates the maximum number of internally vertex-disjoint paths between two non-adjacent vertices to the minimum size of a vertex separator. Since our vertices $s$ and $v_1$ are adjacent, we can adapt this approach. The total number of vertex-disjoint paths in the original graph $G$ will be $1$ (for the direct path $s \\to v_1$) plus the maximum number of internally vertex-disjoint paths between $s$ and $v_1$ in the modified graph $G' = G - (s, v_1)$, where the direct edge is removed.\n\nIn the graph $G'$, the vertices $s$ and $v_1$ are not adjacent. By Menger's Theorem, the maximum number of internally vertex-disjoint $s-v_1$ paths in $G'$ is equal to the minimum size of an $s-v_1$ vertex separator. An $s-v_1$ vertex separator is a set of vertices $X \\subseteq V \\setminus \\{s, v_1\\}$ whose removal from $G'$ disconnects all paths from $s$ to $v_1$.\n\nLet's analyze the connectivity to $v_1$ in the graph $G'$. In the original graph $G$, the neighbors of $v_1$ are $s$ and $v_2$. In $G'$, the edge $(s, v_1)$ has been removed, so the only neighbor of $v_1$ is $v_2$. Consequently, any path from $s$ to $v_1$ in $G'$ must necessarily pass through the vertex $v_2$ just before reaching $v_1$.\n\nThis observation implies that if we remove the vertex $v_2$ from $G'$, vertex $v_1$ becomes isolated from all other vertices in the graph except for itself, meaning no paths from $s$ to $v_1$ can exist. Therefore, the set $X = \\{v_2\\}$ is an $s-v_1$ vertex separator in $G'$.\n\nThe size of this separator is $|X| = 1$. A vertex separator for non-adjacent vertices cannot be empty. Thus, a separator of size 1 is the smallest possible size. This means the minimum size of an $s-v_1$ vertex separator in $G'$ is 1.\n\nBy Menger's Theorem, the maximum number of internally vertex-disjoint $s-v_1$ paths in $G'$ is 1. We can explicitly construct this single path: $s \\to v_2 \\to v_1$. The set of intermediate vertices for this path is $\\{v_2\\}$.\n\nFinally, we combine our results for the original graph $G$. We have found two paths:\n1.  Path 1: The direct path $s \\to v_1$. Its set of intermediate vertices is the empty set, $\\emptyset$.\n2.  Path 2: The path through the array, $s \\to v_2 \\to v_1$. Its set of intermediate vertices is $\\{v_2\\}$.\n\nThe sets of intermediate vertices for these two paths are $\\emptyset$ and $\\{v_2\\}$. Since these sets are disjoint, the two paths are indeed internally vertex-disjoint.\n\nThe total maximum number of such paths is the sum of the path from the direct edge and the paths from the min-cut calculation in $G'$, which is $1 + 1 = 2$.", "answer": "$$\\boxed{2}$$", "id": "1521977"}, {"introduction": "This final practice serves as a capstone, challenging you to synthesize your understanding of Menger's theorem in a more complex, multi-part network. Here, you will not only calculate the connectivity but also explicitly demonstrate the theorem's core duality: the maximum number of vertex-disjoint paths equals the minimum size of a vertex cut. By tackling this problem [@problem_id:1521994], you will strengthen your ability to analyze intricate network topologies and identify critical failure points.", "problem": "A large-scale scientific computing grid is composed of two physically separate clusters, \"Orion\" and \"Cygnus\". The internal network of each cluster is configured as a tree, meaning there is exactly one simple path of network switches and servers between any two nodes within the same cluster.\n\nTo facilitate high-throughput data transfer between the clusters, four redundant, direct communication links have been established. These links connect specific gateway nodes in Orion to corresponding gateway nodes in Cygnus:\n- Link 1: Connects node $O_1$ in Orion to node $C_1$ in Cygnus.\n- Link 2: Connects node $O_2$ in Orion to node $C_2$ in Cygnus.\n- Link 3: Connects node $O_3$ in Orion to node $C_3$ in Cygnus.\n- Link 4: Connects node $O_4$ in Orion to node $C_4$ in Cygnus.\nAll eight gateway nodes ($O_1, O_2, O_3, O_4, C_1, C_2, C_3, C_4$) are distinct.\n\nA researcher needs to transfer a large dataset from a source node $S$ in Orion to a target node $T$ in Cygnus. The resilience of this transfer against node failures is a concern. The network topology has the following specific characteristics regarding the paths from $S$ to the Orion gateways and from the Cygnus gateways to $T$:\n\n1.  **In the Orion cluster:** The unique network paths from the source node $S$ to the gateway nodes $O_1$ and $O_2$ are not completely distinct. They merge at an intermediate node $J_O$ and share the path segment from $S$ to $J_O$. The paths from $S$ to $O_3$ and from $S$ to $O_4$ are completely disjoint from each other and are also disjoint from the paths to $O_1$ and $O_2$, except for the common starting node $S$. For clarity, $S, J_O, O_1, O_2$ are all distinct nodes.\n\n2.  **In the Cygnus cluster:** The unique network paths from the gateway nodes $C_2$ and $C_3$ to the target node $T$ are not completely distinct. They merge at an intermediate node $J_C$ and share the path segment from $J_C$ to $T$. The paths from $C_1$ and $C_4$ to $T$ are completely disjoint from each other and are also disjoint from the paths from $C_2$ and $C_3$, except for the common ending node $T$. For clarity, $T, J_C, C_2, C_3$ are all distinct nodes.\n\nAccording to the vertex-version of Menger's Theorem, the minimum number of nodes (excluding $S$ and $T$) that must fail to sever all possible communication routes between $S$ and $T$ is equal to the maximum number of internally vertex-disjoint paths between $S$ and $T$.\n\nCalculate this minimum number of nodes.", "solution": "Because each cluster is a tree, there is a unique simple path between any two vertices within the same cluster. Any $S$–$T$ path must consist of three segments concatenated in order: the unique path in Orion from $S$ to some $O_{i}$, the cross edge $O_{i}C_{i}$, and the unique path in Cygnus from $C_{i}$ to $T$.\n\nLower bound via three internally vertex-disjoint $S$–$T$ paths:\n- Use link $1$: take the unique path $S \\rightsquigarrow O_{1}$ (which passes through $J_{O}$), then the cross edge $O_{1}C_{1}$, then the unique path $C_{1} \\rightsquigarrow T$. By the hypothesis, $S \\rightsquigarrow O_{1}$ is disjoint from the $S \\rightsquigarrow O_{3}$ and $S \\rightsquigarrow O_{4}$ paths except at $S$, and $C_{1} \\rightsquigarrow T$ is disjoint from $C_{3} \\rightsquigarrow T$ and $C_{4} \\rightsquigarrow T$ except at $T$.\n- Use link $3$: take $S \\rightsquigarrow O_{3}$, then $O_{3}C_{3}$, then $C_{3} \\rightsquigarrow T$. By the hypothesis, $S \\rightsquigarrow O_{3}$ is disjoint from $S \\rightsquigarrow O_{1}$ and $S \\rightsquigarrow O_{4}$ except at $S$, and $C_{3} \\rightsquigarrow T$ is disjoint from $C_{1} \\rightsquigarrow T$ and $C_{4} \\rightsquigarrow T$ except at $T$.\n- Use link $4$: take $S \\rightsquigarrow O_{4}$, then $O_{4}C_{4}$, then $C_{4} \\rightsquigarrow T$.\n\nThe three resulting $S$–$T$ paths (via links $1,3,4$) are internally vertex-disjoint because:\n- On the Orion side, the paths $S \\rightsquigarrow O_{1}$, $S \\rightsquigarrow O_{3}$, and $S \\rightsquigarrow O_{4}$ are pairwise disjoint except at $S$ by assumption.\n- The cross-link endpoints $O_{1},O_{3},O_{4},C_{1},C_{3},C_{4}$ are all distinct.\n- On the Cygnus side, the paths $C_{1} \\rightsquigarrow T$, $C_{3} \\rightsquigarrow T$, and $C_{4} \\rightsquigarrow T$ are pairwise disjoint except at $T$ by assumption.\n\nTherefore, the maximum number of internally vertex-disjoint $S$–$T$ paths satisfies\n$$\\text{max disjoint paths} \\geq 3.$$\n\nUpper bound via a vertex cut of size $3$:\nConsider the vertex set $\\{J_{O}, J_{C}, O_{4}\\}$. Removing $J_{O}$ destroys both $S \\rightsquigarrow O_{1}$ and $S \\rightsquigarrow O_{2}$, hence every $S$–$T$ path using links $1$ or $2$. Removing $J_{C}$ destroys both $C_{2} \\rightsquigarrow T$ and $C_{3} \\rightsquigarrow T$, hence every $S$–$T$ path using links $2$ or $3$. Removing $O_{4}$ destroys every $S$–$T$ path using link $4$. Thus every $S$–$T$ path is intercepted by at least one of these three vertices, so\n$$\\text{min vertex cut} \\leq 3.$$\n\nBy the vertex-version of Menger’s Theorem, the minimum size of an $S$–$T$ vertex cut equals the maximum number of internally vertex-disjoint $S$–$T$ paths. Combining the lower and upper bounds,\n$$\\text{min vertex cut} = \\text{max disjoint paths} = 3.$$", "answer": "$$\\boxed{3}$$", "id": "1521994"}]}