{"hands_on_practices": [{"introduction": "The first step to mastering Depth-First Search is to understand its fundamental mechanics. This exercise requires a manual trace of the algorithm's execution on a given graph, a process that is essential for building intuition. By methodically tracking the discovery and finish times for each vertex, you will gain a concrete understanding of the recursive \"go as deep as possible, then backtrack\" nature of DFS. These timestamps are not merely a procedural detail; they are the foundation for more advanced applications like topological sorting and finding strongly connected components. [@problem_id:1362166]", "problem": "A software build system uses a \"dependency resolution protocol\" to determine the correct order for compiling a set of interconnected code modules. The protocol operates on a graph of modules and their dependencies. This process involves assigning two timestamps to each module: a \"discovery time\" and a \"finish time\".\n\nThe protocol is as follows:\n1.  A global timestamp counter is initialized to 1.\n2.  The process begins at a starting module. If no start is specified, it begins with the module that comes first in alphabetical order.\n3.  When a module is visited for the first time, it is marked \"discovered,\" its discovery time is set to the current value of the global timestamp, and the timestamp is incremented by 1.\n4.  The system then examines the neighbors of the just-discovered module. It recursively calls the protocol on the first unvisited neighbor found, according to alphabetical order.\n5.  After the recursive calls for all of a module's neighbors have returned, the module is marked \"finished,\" its finish time is set to the current value of the global timestamp, and the timestamp is incremented by 1. The process then returns to where it was called from.\n6.  If the initial traversal completes and there are still unvisited modules, the process is repeated starting from the unvisited module that comes first in alphabetical order.\n\nConsider a project with eight modules: A, B, C, D, E, F, G, H. The dependency relationships are symmetric (i.e., if X depends on Y, then Y depends on X) and are defined as follows:\n-   Module A is connected to B, D, and E.\n-   Module B is connected to A and C.\n-   Module C is connected to B, G, and H.\n-   Module D is connected to A and F.\n-   Module E is connected to A and F.\n-   Module F is connected to D, E, and G.\n-   Module G is connected to C and F.\n-   Module H is connected to C.\n\nStarting the protocol from module A, determine the discovery and finish times for all eight modules. Which of the following options correctly lists the `(discovery_time, finish_time)` pairs for all modules, ordered alphabetically from A to H?\n\nA. A:(1,16), B:(8,9), C:(7,12), D:(2,15), E:(4,5), F:(3,14), G:(6,13), H:(10,11)\n\nB. A:(1, 16), B:(2, 15), C:(3, 14), D:(8, 9), E:(6, 7), F:(5, 10), G:(4, 11), H:(12, 13)\n\nC. A:(1, 16), B:(2, 15), C:(3, 14), D:(6, 7), E:(8, 9), F:(5, 10), G:(4, 11), H:(12, 13)\n\nD. A:(1, 16), B:(2, 15), C:(3, 12), D:(6, 7), E:(8, 9), F:(5, 10), G:(4, 11), H:(13, 14)", "solution": "We perform a depth-first traversal with a global timestamp $t$ initialized to $1$, starting at $A$, and exploring neighbors in alphabetical order. On first visit to a node $v$, set its discovery time $d(v)=t$ and increment $t$ by $1$. After all recursive calls for $v$’s neighbors return, set its finish time $f(v)=t$ and increment $t$ by $1$.\n\nInitialize $t=1$.\n\nStart at $A$ with neighbors in order $B,D,E$.\n$$d(A)=1,\\quad t=2$$\nGo to $B$ (first unvisited neighbor of $A$). Neighbors of $B$ in order $A,C$.\n$$d(B)=2,\\quad t=3$$\n$A$ is already visited; go to $C$. Neighbors of $C$ in order $B,G,H$.\n$$d(C)=3,\\quad t=4$$\n$B$ is visited; go to $G$. Neighbors of $G$ in order $C,F$.\n$$d(G)=4,\\quad t=5$$\n$C$ is visited; go to $F$. Neighbors of $F$ in order $D,E,G$.\n$$d(F)=5,\\quad t=6$$\nGo to $D$ (first unvisited). Neighbors of $D$ in order $A,F$.\n$$d(D)=6,\\quad t=7$$\nBoth $A$ and $F$ are visited; finish $D$:\n$$f(D)=7,\\quad t=8$$\nReturn to $F$; next neighbor is $E$ (unvisited).\n$$d(E)=8,\\quad t=9$$\nNeighbors of $E$ are $A,F$, both visited; finish $E$:\n$$f(E)=9,\\quad t=10$$\nBack to $F$; next neighbor $G$ is visited; finish $F$:\n$$f(F)=10,\\quad t=11$$\nBack to $G$; no more neighbors; finish $G$:\n$$f(G)=11,\\quad t=12$$\nBack to $C$; next neighbor is $H$ (unvisited).\n$$d(H)=12,\\quad t=13$$\n$H$’s neighbor $C$ is visited; finish $H$:\n$$f(H)=13,\\quad t=14$$\nBack to $C$; no more neighbors; finish $C$:\n$$f(C)=14,\\quad t=15$$\nBack to $B$; no more neighbors; finish $B$:\n$$f(B)=15,\\quad t=16$$\nBack to $A$; remaining neighbors $D,E$ are already visited; finish $A$:\n$$f(A)=16,\\quad t=17$$\n\nThus the discovery/finish times are:\n- $A:(1,16)$\n- $B:(2,15)$\n- $C:(3,14)$\n- $D:(6,7)$\n- $E:(8,9)$\n- $F:(5,10)$\n- $G:(4,11)$\n- $H:(12,13)$\n\nThis matches option C.", "answer": "$$\\boxed{C}$$", "id": "1362166"}, {"introduction": "As Depth-First Search traverses a graph, it implicitly traces out a path, forming a structure known as a DFS tree. The shape of this tree—specifically its depth and branching—provides a visual map of the exploration process. This problem investigates how the choice of a starting vertex and a consistent tie-breaking rule can influence the resulting DFS tree, even on a simple and symmetric graph like a cycle. By analyzing the tree's height, you will develop a deeper appreciation for how the algorithm's deterministic rules interact with graph topology. [@problem_id:1496226]", "problem": "Consider an undirected cycle graph, denoted as $C_{10}$, with a set of vertices $V = \\{v_1, v_2, \\dots, v_{10}\\}$. The edges of this graph connect vertices cyclically, meaning the edge set is $E = \\{(v_i, v_{i+1}) \\mid i = 1, \\dots, 9\\} \\cup \\{(v_{10}, v_1)\\}$.\n\nA Depth-First Search (DFS) is to be performed on this graph. During the search, whenever a vertex has multiple unvisited neighbors, the neighbors are to be visited in increasing order of their vertex index. For example, if exploring from a vertex with unvisited neighbors $v_2$ and $v_8$, the DFS will proceed to $v_2$ first.\n\nThe height of a rooted tree is defined as the number of edges on the longest downward path from the root to a leaf node.\n\nWe will consider two separate cases for the DFS traversal:\n1.  The DFS starts at vertex $v_1$. Let the height of the resulting DFS tree be $H_1$.\n2.  The DFS starts at vertex $v_2$. Let the height of the resulting DFS tree be $H_2$.\n\nDetermine the values of $H_1$ and $H_2$. Report your answer as the ordered pair $(H_1, H_2)$.", "solution": "Let the undirected cycle be $C_{10}$ with vertices $V=\\{v_{1},v_{2},\\dots,v_{10}\\}$ and edges $E=\\{(v_{i},v_{i+1})\\mid i=1,\\dots,9\\}\\cup\\{(v_{10},v_{1})\\}$. For each $v_{i}$, its neighbors are $N(v_{i})=\\{v_{i-1},v_{i+1}\\}$ with indices interpreted modulo $10$ so that $v_{0}=v_{10}$ and $v_{11}=v_{1}$. The DFS rule is: at any step, among the unvisited neighbors of the current vertex, visit the one(s) in increasing index order.\n\nCase 1: start at $v_{1}$. At $v_{1}$, the unvisited neighbors are $\\{v_{2},v_{10}\\}$, so DFS chooses $v_{2}$ first. For $k=2,\\dots,9$, at $v_{k}$ the neighbors are $\\{v_{k-1},v_{k+1}\\}$; the parent $v_{k-1}$ is already visited, so the only unvisited neighbor is $v_{k+1}$, which is then visited. Upon reaching $v_{10}$, both neighbors $v_{9}$ and $v_{1}$ are visited, so DFS backtracks without adding new tree edges. Therefore, the DFS tree consists of the path\n$$v_{1}-v_{2}-v_{3}-\\cdots -v_{10},$$\nwhich has $9$ edges from the root $v_{1}$ to the leaf $v_{10}$. Hence $H_{1}=9$.\n\nCase 2: start at $v_{2}$. At $v_{2}$, the unvisited neighbors are $\\{v_{1},v_{3}\\}$, so DFS chooses $v_{1}$ first. At $v_{1}$, the unvisited neighbor with smallest index is $v_{10}$ (since $v_{2}$ is already visited), so DFS proceeds to $v_{10}$. Continuing, at each step from $v_{10}$ down to $v_{4}$, the only unvisited neighbor is the next lower-index neighbor, yielding the sequence\n$$v_{2}-v_{1}-v_{10}-v_{9}-v_{8}-v_{7}-v_{6}-v_{5}-v_{4}-v_{3}.$$\nAt $v_{3}$, both neighbors are visited, so DFS backtracks, and when it returns to $v_{2}$, the other neighbor $v_{3}$ is already visited. Thus the DFS tree is again a single path on all $10$ vertices rooted at $v_{2}$, whose longest root-to-leaf path (from $v_{2}$ to $v_{3}$) has $9$ edges. Hence $H_{2}=9$.\n\nTherefore, $(H_{1},H_{2})=(9,9)$.", "answer": "$$\\boxed{(9, 9)}$$", "id": "1496226"}, {"introduction": "Beyond simple graph traversal, the true power of search algorithms like DFS lies in their adaptability to solve complex, constrained problems. This practice moves from standard execution to creative problem-solving, inspired by a hypothetical robotics scenario. You will be challenged to find a path that adheres to a special rule—alternating colors on consecutive edges. This requires modifying the search state or logic, demonstrating how the core principles of graph traversal can be extended to tackle novel challenges in routing, logistics, and network analysis. [@problem_id:1496213]", "problem": "An advanced robotic explorer is navigating a network of tunnels on a newly discovered planet. The tunnels are color-coded for different transport systems. The network can be modeled as an undirected graph where vertices represent junctions and edges represent tunnels. Each tunnel is colored either Red ('R') or Blue ('B').\n\nThe explorer must travel from a starting junction to a destination junction. To conserve energy and prevent system overloads, its movement is restricted to a \"strictly alternating color path\". A path is considered to have a strictly alternating color sequence if for any three consecutive vertices $v_i, v_{i+1}, v_{i+2}$ on the path, the color of the edge $(v_i, v_{i+1})$ is different from the color of the edge $(v_{i+1}, v_{i+2})$. The path must be simple, meaning it cannot visit any junction more than once. The first edge of the path can be of either color.\n\nYou are given the structure of the tunnel network:\n- The set of junctions (vertices) is `{0, 1, 2, 3, 4, 5, 6, 7, 8}`.\n- The start junction is `0`, and the destination is `8`.\n- The tunnels (edges) are given as a list of `(junction1, junction2, color)` triplets:\n  - `(0, 1, 'B')`\n  - `(0, 2, 'R')`\n  - `(1, 3, 'R')`\n  - `(2, 5, 'B')`\n  - `(3, 4, 'B')`\n  - `(3, 6, 'R')`\n  - `(4, 6, 'R')`\n  - `(4, 7, 'R')`\n  - `(5, 3, 'R')`\n  - `(6, 8, 'B')`\n  - `(7, 8, 'R')`\n\nYour task is to determine the length of the shortest possible strictly alternating color path from junction `0` to junction `8`. The length of a path is defined as the number of edges it contains. If no such path exists, your answer should be -1.", "solution": "We model the tunnel network as an undirected graph on vertices $\\{0, 1, 2, 3, 4, 5, 6, 7, 8\\}$ with colored edges. A strictly alternating color path requires consecutive edges to have different colors, and the path must be simple (no vertex repeated). We search for a shortest strictly alternating simple path from $0$ to $8$ by increasing path length.\n\nLength $2$: A path $0\\to x\\to 8$ must have $x$ adjacent to both $0$ and $8$ and the two edge colors different. The neighbors are $\\mathcal{N}(0)=\\{1,2\\}$ and $\\mathcal{N}(8)=\\{6,7\\}$. Since $\\{1,2\\}\\cap\\{6,7\\}=\\varnothing$, no length $2$ path exists.\n\nLength $3$: Consider $0\\to a\\to b\\to 8$. The last step must be from a neighbor of $8$.\n- If $b=6$, then $(6,8)$ has color $\\text{B}$, so the preceding edge $(a,6)$ must be color $\\text{R}$, which forces $a\\in\\{3,4\\}$. The first edge $(0,a)$ must then be color $\\text{B}$, which forces $a=1$. Since $1\\notin\\{3,4\\}$, this case is impossible.\n- If $b=7$, then $(7,8)$ has color $\\text{R}$, so $(a,7)$ must be color $\\text{B}$. Vertex $7$ has no incident $\\text{B}$ edge, so this case is impossible.\nTherefore, no length $3$ alternating path exists.\n\nLength $4$: Consider $0\\to a\\to b\\to c\\to 8$.\n- Starting with $(0,1)$ of color $\\text{B}$ forces $(1,3)$ of color $\\text{R}$, then $(3,4)$ of color $\\text{B}$, so the last edge must be from $4$ to $8$ with color $\\text{R}$. There is no edge $(4,8)$, so this branch fails.\n- Starting with $(0,2)$ of color $\\text{R}$ forces $(2,5)$ of color $\\text{B}$, then $(5,3)$ of color $\\text{R}$, so the last edge must be from $3$ to $8$ with color $\\text{B}$. There is no edge $(3,8)$, so this branch fails.\nTherefore, no length $4$ alternating path exists.\n\nLength $5$: Try the path\n$$0\\to 1\\to 3\\to 4\\to 6\\to 8.$$\nThe colors along edges are $(0,1):\\text{B}$, $(1,3):\\text{R}$, $(3,4):\\text{B}$, $(4,6):\\text{R}$, $(6,8):\\text{B}$, which strictly alternate as $\\text{B},\\text{R},\\text{B},\\text{R},\\text{B}$. All vertices are distinct, so the path is simple. This gives a valid strictly alternating simple path of length $5$.\n\nSince no paths of lengths $2,3,4$ exist and a length $5$ path exists, the shortest possible strictly alternating simple path from $0$ to $8$ has length $5$.", "answer": "$$\\boxed{5}$$", "id": "1496213"}]}