{"hands_on_practices": [{"introduction": "Mastering shortest path algorithms begins with understanding Dijkstra's algorithm, the cornerstone for finding the quickest route from a single starting point in a network where all travel times or costs are non-negative. This exercise provides a practical scenario involving network latency to guide you through the step-by-step execution of the algorithm. By manually tracking how distances are updated and which nodes are \"settled\", you will build a strong intuition for its elegant, greedy approach to problem-solving. [@problem_id:1532819]", "problem": "A small data center's network consists of one central Router, labeled `R`, and five servers, labeled `S1`, `S2`, `S3`, `S4`, and `S5`. Data packets can travel between certain pairs of devices, and each connection has an associated latency, measured in milliseconds (ms). The network topology and latencies are as follows:\n\n- `R` is connected to `S1` with a latency of 10 ms.\n- `R` is connected to `S2` with a latency of 3 ms.\n- `R` is connected to `S3` with a latency of 8 ms.\n- `S1` is connected to `S2` with a latency of 4 ms.\n- `S1` is connected to `S4` with a latency of 2 ms.\n- `S2` is connected to `S3` with a latency of 2 ms.\n- `S2` is connected to `S4` with a latency of 9 ms.\n- `S3` is connected to `S5` with a latency of 5 ms.\n- `S4` is connected to `S5` with a latency of 1 ms.\n\nAll connections are bidirectional, meaning the latency is the same in either direction. Determine the minimum possible latency for a data packet to travel from the central Router `R` to each of the five servers: `S1`, `S2`, `S3`, `S4`, and `S5`.\n\nProvide the final latencies for `S1`, `S2`, `S3`, `S4`, and `S5`, in that specific order. The final answer should be a set of numbers, expressed in ms.", "solution": "We are asked to find the minimum-latency paths from the source node $R$ to the destinations $S_1, S_2, S_3, S_4, S_5$ in an undirected weighted network. All latencies are nonnegative, so Dijkstra’s algorithm applies. Let $d(X)$ denote the current best-known latency from $R$ to node $X$. Initialize $d(R)=0$ and $d(S_i)=\\infty$ for all $i$, then relax along edges from the settled node with the smallest tentative distance at each step.\n\nInitialization using edges from $R$:\n- From $R$ to $S_1$: $d(S_1)=\\min(\\infty,10)=10$.\n- From $R$ to $S_2$: $d(S_2)=\\min(\\infty,3)=3$.\n- From $R$ to $S_3$: $d(S_3)=\\min(\\infty,8)=8$.\n- No direct edges from $R$ to $S_4$ or $S_5$: $d(S_4)=\\infty$, $d(S_5)=\\infty$.\n\nSettle the smallest tentative node $S_2$ with $d(S_2)=3$ and relax its neighbors:\n- Edge $S_2$–$S_1$ with weight $4$: $d(S_1)=\\min(10,3+4)=7$.\n- Edge $S_2$–$S_3$ with weight $2$: $d(S_3)=\\min(8,3+2)=5$.\n- Edge $S_2$–$S_4$ with weight $9$: $d(S_4)=\\min(\\infty,3+9)=12$.\n\nNow tentative distances are $d(S_1)=7$, $d(S_3)=5$, $d(S_4)=12$, $d(S_5)=\\infty$. Settle $S_3$ with $d(S_3)=5$ and relax its neighbors:\n- Edge $S_3$–$S_5$ with weight $5$: $d(S_5)=\\min(\\infty,5+5)=10$.\n- Edge $S_3$–$S_2$ offers $5+2=7$, which does not improve $d(S_2)=3$.\n\nNow tentative distances are $d(S_1)=7$, $d(S_4)=12$, $d(S_5)=10$. Settle $S_1$ with $d(S_1)=7$ and relax its neighbors:\n- Edge $S_1$–$S_4$ with weight $2$: $d(S_4)=\\min(12,7+2)=9$.\n- Edge $S_1$–$S_2$ offers $7+4=11$, which does not improve $d(S_2)=3$.\n\nNow tentative distances are $d(S_4)=9$, $d(S_5)=10$. Settle $S_4$ with $d(S_4)=9$ and relax its neighbors:\n- Edge $S_4$–$S_5$ with weight $1$: $d(S_5)=\\min(10,9+1)=10$ (no change).\n\nFinally, settle $S_5$ with $d(S_5)=10$. All nodes are settled, yielding the minimal latencies:\n- $d(S_1)=7$\n- $d(S_2)=3$\n- $d(S_3)=5$\n- $d(S_4)=9$\n- $d(S_5)=10$\n\nThese are in milliseconds as required by the problem statement; the final answer lists the numerical values in the specified order.", "answer": "$$\\boxed{\\begin{pmatrix}7  3  5  9  10\\end{pmatrix}}$$", "id": "1532819"}, {"introduction": "While Dijkstra's algorithm is efficient, its logic falters when a graph contains edges with negative weights, a scenario that can arise in problems involving costs and gains. This is where the Bellman-Ford algorithm proves its value. This practice problem lets you trace the core mechanism of Bellman-Ford: a systematic process of iteratively relaxing every edge in the graph, which guarantees finding the correct shortest paths even in the presence of negative weights, as long as there are no negative-weight cycles. [@problem_id:1532774]", "problem": "Consider a directed, weighted graph with a set of vertices $V = \\{S, A, B, C, D\\}$ and a set of specified directed edges with associated weights. The task is to find the shortest path cost estimates from a source vertex $S$ to all other vertices.\n\nThe initial cost estimates $d(v)$ for any vertex $v \\in V$ are $d(S) = 0$ and $d(v) = \\infty$ for all $v \\neq S$.\n\nWe will perform an iterative process to update these cost estimates. A single \"pass\" of the process consists of relaxing the graph's edges in a specific, fixed order. For each edge $(u, v)$ with weight $w(u,v)$ in the sequence, the cost estimate to vertex $v$ is updated according to the rule: $d(v) = \\min(d(v), d(u) + w(u,v))$.\n\nThe graph's edges and the fixed order for relaxation in each pass are as follows:\n1. Edge $(A, B)$ with weight $-4$.\n2. Edge $(S, C)$ with weight $2$.\n3. Edge $(B, D)$ with weight $3$.\n4. Edge $(C, D)$ with weight $7$.\n5. Edge $(S, A)$ with weight $5$.\n6. Edge $(C, A)$ with weight $-1$.\n\nDetermine the cost estimates $d(A)$, $d(B)$, $d(C)$, and $d(D)$ after exactly two full passes of this relaxation process have been completed. Express your answer as a list of four numbers corresponding to the final costs for vertices A, B, C, and D in that order.", "solution": "We apply the relaxation rule for each directed edge $(u,v)$ with weight $w(u,v)$ in the fixed order, using $d(v) \\leftarrow \\min(d(v), d(u)+w(u,v))$, starting from $d(S)=0$ and $d(A)=d(B)=d(C)=d(D)=\\infty$.\n\nPass 1 begins with $d(A)=\\infty$, $d(B)=\\infty$, $d(C)=\\infty$, $d(D)=\\infty$. Relaxing $(A,B)$ with weight $-4$ gives $d(B)=\\min(\\infty, \\infty-4)=\\infty$. Relaxing $(S,C)$ with weight $2$ gives $d(C)=\\min(\\infty, 0+2)=2$. Relaxing $(B,D)$ with weight $3$ gives $d(D)=\\min(\\infty, \\infty+3)=\\infty$. Relaxing $(C,D)$ with weight $7$ gives $d(D)=\\min(\\infty, 2+7)=9$. Relaxing $(S,A)$ with weight $5$ gives $d(A)=\\min(\\infty, 0+5)=5$. Relaxing $(C,A)$ with weight $-1$ gives $d(A)=\\min(5, 2-1)=1$. At the end of pass 1, the estimates are $d(A)=1$, $d(B)=\\infty$, $d(C)=2$, $d(D)=9$.\n\nPass 2 starts from $d(A)=1$, $d(B)=\\infty$, $d(C)=2$, $d(D)=9$. Relaxing $(A,B)$ with weight $-4$ gives $d(B)=\\min(\\infty, 1-4)=-3$. Relaxing $(S,C)$ with weight $2$ gives $d(C)=\\min(2, 0+2)=2$. Relaxing $(B,D)$ with weight $3$ gives $d(D)=\\min(9, -3+3)=0$. Relaxing $(C,D)$ with weight $7$ gives $d(D)=\\min(0, 2+7)=0$. Relaxing $(S,A)$ with weight $5$ gives $d(A)=\\min(1, 0+5)=1$. Relaxing $(C,A)$ with weight $-1$ gives $d(A)=\\min(1, 2-1)=1$. Therefore, after exactly two full passes, the final cost estimates in the order $(A,B,C,D)$ are $1$, $-3$, $2$, and $0$.", "answer": "$$\\boxed{\\begin{pmatrix}1  -3  2  0\\end{pmatrix}}$$", "id": "1532774"}, {"introduction": "So far, we have focused on finding shortest paths from a single source. However, what if we need to know the shortest route between every pair of locations in a network? For this, we turn to the Floyd-Warshall algorithm, a powerful dynamic programming method for solving the all-pairs shortest path problem. This exercise asks you to perform the initial iterations of the algorithm, giving you a hands-on look at how it systematically builds up a complete matrix of shortest paths by considering each vertex, one by one, as a potential intermediate point. [@problem_id:1504965]", "problem": "Consider a weighted directed graph with 4 vertices, labeled 1, 2, 3, and 4. The costs of the direct paths between any two vertices are given by an initial distance matrix $D^{(0)}$. In this matrix, the element $D^{(0)}_{ij}$ represents the weight of the directed edge from vertex $i$ to vertex $j$. If no direct edge exists from $i$ to $j$, the weight is considered infinite ($\\infty$). The self-distance $D^{(0)}_{ii}$ is 0 for all vertices.\n\nThe initial distance matrix $D^{(0)}$ is given as:\n$$ D^{(0)} = \\begin{pmatrix} 0  4  \\infty  7 \\\\ \\infty  0  1  \\infty \\\\ 6  \\infty  0  2 \\\\ 3  -2  \\infty  0 \\end{pmatrix} $$\n\nThe Floyd-Warshall algorithm computes the all-pairs shortest paths by iteratively updating this matrix. In the $k$-th iteration (for $k=1, 2, \\dots, 4$), the algorithm considers paths that use vertex $k$ as an intermediate vertex to potentially find a shorter path between any two vertices $i$ and $j$.\n\nStarting with the given matrix $D^{(0)}$, perform the first two iterations of the Floyd-Warshall algorithm to compute the matrices $D^{(1)}$ (using $k=1$) and $D^{(2)}$ (using $k=2$). Your task is to determine the final state of the distance matrix after the second iteration, $D^{(2)}$.", "solution": "We use the Floyd-Warshall update rule: for each iteration $k$ and for all $i,j$,\n$$\nD^{(k)}_{ij}=\\min\\left(D^{(k-1)}_{ij},\\,D^{(k-1)}_{ik}+D^{(k-1)}_{kj}\\right).\n$$\nGiven\n$$\nD^{(0)}=\\begin{pmatrix}\n0  4  \\infty  7\\\\\n\\infty  0  1  \\infty\\\\\n6  \\infty  0  2\\\\\n3  -2  \\infty  0\n\\end{pmatrix},\n$$\nwe perform the first iteration with $k=1$, using $D^{(1)}_{ij}=\\min\\left(D^{(0)}_{ij},\\,D^{(0)}_{i1}+D^{(0)}_{1j}\\right)$.\n\nFor $i=1$:\n- $j=1$: $\\min(0, 0+0)=0$.\n- $j=2$: $\\min(4, 0+4)=4$.\n- $j=3$: $\\min(\\infty, 0+\\infty)=\\infty$.\n- $j=4$: $\\min(7, 0+7)=7$.\n\nFor $i=2$ (since $D^{(0)}_{21}=\\infty$, all via $1$ are $\\infty$):\n- $j=1$: $\\min(\\infty, \\infty)=\\infty$.\n- $j=2$: $\\min(0, \\infty)=0$.\n- $j=3$: $\\min(1, \\infty)=1$.\n- $j=4$: $\\min(\\infty, \\infty)=\\infty$.\n\nFor $i=3$ (with $D^{(0)}_{31}=6$):\n- $j=1$: $\\min(6, 6+0)=6$.\n- $j=2$: $\\min(\\infty, 6+4)=10$.\n- $j=3$: $\\min(0, 6+\\infty)=0$.\n- $j=4$: $\\min(2, 6+7)=2$.\n\nFor $i=4$ (with $D^{(0)}_{41}=3$):\n- $j=1$: $\\min(3, 3+0)=3$.\n- $j=2$: $\\min(-2, 3+4)=-2$.\n- $j=3$: $\\min(\\infty, 3+\\infty)=\\infty$.\n- $j=4$: $\\min(0, 3+7)=0$.\n\nThus\n$$\nD^{(1)}=\\begin{pmatrix}\n0  4  \\infty  7\\\\\n\\infty  0  1  \\infty\\\\\n6  10  0  2\\\\\n3  -2  \\infty  0\n\\end{pmatrix}.\n$$\n\nNext, perform the second iteration with $k=2$, using $D^{(2)}_{ij}=\\min\\left(D^{(1)}_{ij},\\,D^{(1)}_{i2}+D^{(1)}_{2j}\\right)$.\n\nFor $i=1$ (with $D^{(1)}_{12}=4$):\n- $j=1$: $\\min(0, 4+\\infty)=0$.\n- $j=2$: $\\min(4, 4+0)=4$.\n- $j=3$: $\\min(\\infty, 4+1)=5$.\n- $j=4$: $\\min(7, 4+\\infty)=7$.\n\nFor $i=2$ (with $D^{(1)}_{22}=0$):\n- $j=1$: $\\min(\\infty, 0+\\infty)=\\infty$.\n- $j=2$: $\\min(0, 0+0)=0$.\n- $j=3$: $\\min(1, 0+1)=1$.\n- $j=4$: $\\min(\\infty, 0+\\infty)=\\infty$.\n\nFor $i=3$ (with $D^{(1)}_{32}=10$):\n- $j=1$: $\\min(6, 10+\\infty)=6$.\n- $j=2$: $\\min(10, 10+0)=10$.\n- $j=3$: $\\min(0, 10+1)=0$.\n- $j=4$: $\\min(2, 10+\\infty)=2$.\n\nFor $i=4$ (with $D^{(1)}_{42}=-2$):\n- $j=1$: $\\min(3, -2+\\infty)=3$.\n- $j=2$: $\\min(-2, -2+0)=-2$.\n- $j=3$: $\\min(\\infty, -2+1)=-1$.\n- $j=4$: $\\min(0, -2+\\infty)=0$.\n\nTherefore, the matrix after the second iteration is\n$$\nD^{(2)}=\\begin{pmatrix}\n0  4  5  7\\\\\n\\infty  0  1  \\infty\\\\\n6  10  0  2\\\\\n3  -2  -1  0\n\\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}0  4  5  7 \\\\ \\infty  0  1  \\infty \\\\ 6  10  0  2 \\\\ 3  -2  -1  0\\end{pmatrix}}$$", "id": "1504965"}]}