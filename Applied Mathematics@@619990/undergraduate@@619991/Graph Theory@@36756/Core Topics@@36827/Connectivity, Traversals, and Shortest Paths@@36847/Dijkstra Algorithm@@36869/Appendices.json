{"hands_on_practices": [{"introduction": "To truly understand an algorithm, we must first learn to execute it by hand. This initial practice provides a classic scenario for applying Dijkstra's algorithm: finding the shortest paths in a computer network based on latency. By manually stepping through the algorithm for this small, well-defined graph, you will build a solid foundation in its core mechanics—initialization, neighbor relaxation, and the greedy selection of nodes. Mastering this fundamental procedure is the essential first step toward solving more complex graph problems [@problem_id:1496519].", "id": "1496519", "problem": "Consider a small-scale data center network composed of six servers, labeled A, B, C, D, E, and F. The network topology is defined by a set of bidirectional connections between these servers. The 'cost' of sending data between two directly connected servers, measured in milliseconds of latency, is given. The connections and their associated costs are as follows:\n\n- A and B: 7 ms\n- A and C: 9 ms\n- A and F: 14 ms\n- B and C: 10 ms\n- B and D: 15 ms\n- C and D: 11 ms\n- C and F: 2 ms\n- D and E: 6 ms\n- E and F: 9 ms\n\nA data packet needs to be routed from the source server, A, to all other servers in the network. Determine the shortest path latency from server A to each of the other five servers (B, C, D, E, and F).\n\nPresent your answer as a single row matrix containing the five calculated latencies, in the specific order of servers B, C, D, E, and F.\n\n", "solution": "We model the network as an undirected weighted graph with vertices $\\{A,B,C,D,E,F\\}$ and edge weights given by $w(A,B)=7$, $w(A,C)=9$, $w(A,F)=14$, $w(B,C)=10$, $w(B,D)=15$, $w(C,D)=11$, $w(C,F)=2$, $w(D,E)=6$, $w(E,F)=9$. All weights are nonnegative, so Dijkstra's algorithm yields the single-source shortest path distances from $A$.\n\nInitialize the tentative distances with\n$$\nd(A)=0,\\quad d(B)=\\infty,\\quad d(C)=\\infty,\\quad d(D)=\\infty,\\quad d(E)=\\infty,\\quad d(F)=\\infty.\n$$\nRelax neighbors of $A$:\n$$\nd(B)\\gets \\min\\{d(B),\\,d(A)+w(A,B)\\}=\\min\\{\\infty,\\,0+7\\}=7,\n$$\n$$\nd(C)\\gets \\min\\{d(C),\\,d(A)+w(A,C)\\}=\\min\\{\\infty,\\,0+9\\}=9,\n$$\n$$\nd(F)\\gets \\min\\{d(F),\\,d(A)+w(A,F)\\}=\\min\\{\\infty,\\,0+14\\}=14.\n$$\nCurrent tentative distances: $d(B)=7$, $d(C)=9$, $d(F)=14$, $d(D)=\\infty$, $d(E)=\\infty$. Select the smallest tentative distance to finalize: finalize $B$ with $d(B)=7$.\n\nRelax neighbors of $B$:\n$$\nd(C)\\gets \\min\\{d(C),\\,d(B)+w(B,C)\\}=\\min\\{9,\\,7+10\\}=9,\n$$\n$$\nd(D)\\gets \\min\\{d(D),\\,d(B)+w(B,D)\\}=\\min\\{\\infty,\\,7+15\\}=22.\n$$\nSelect next smallest tentative: finalize $C$ with $d(C)=9$.\n\nRelax neighbors of $C$:\n$$\nd(D)\\gets \\min\\{d(D),\\,d(C)+w(C,D)\\}=\\min\\{22,\\,9+11\\}=20,\n$$\n$$\nd(F)\\gets \\min\\{d(F),\\,d(C)+w(C,F)\\}=\\min\\{14,\\,9+2\\}=11.\n$$\nSelect next smallest tentative: finalize $F$ with $d(F)=11$.\n\nRelax neighbors of $F$:\n$$\nd(E)\\gets \\min\\{d(E),\\,d(F)+w(E,F)\\}=\\min\\{\\infty,\\,11+9\\}=20,\n$$\n$$\nd(C)\\gets \\min\\{d(C),\\,d(F)+w(C,F)\\}=\\min\\{9,\\,11+2\\}=9.\n$$\nRemaining tentative distances are $d(D)=20$ and $d(E)=20$. Finalize $D$ with $d(D)=20$ and relax:\n$$\nd(E)\\gets \\min\\{d(E),\\,d(D)+w(D,E)\\}=\\min\\{20,\\,20+6\\}=20.\n$$\nFinalize $E$ with $d(E)=20$.\n\nThus the shortest path latencies from $A$ are\n$$\nd(B)=7,\\quad d(C)=9,\\quad d(D)=20,\\quad d(E)=20,\\quad d(F)=11.\n$$\nIn the required order $(B,C,D,E,F)$, the result is the row matrix shown in the final answer.", "answer": "$$\\boxed{\\begin{pmatrix}7 & 9 & 20 & 20 & 11\\end{pmatrix}}$$"}, {"introduction": "Understanding *how* an algorithm works is one thing; understanding *why* it works is another. This exercise takes the form of a debugging challenge, asking you to predict the outcome of Dijkstra's algorithm when a crucial step—initializing distances to infinity—is done incorrectly. By analyzing the consequences of this hypothetical but common bug, you will gain a deeper appreciation for the logical principles that ensure the algorithm's correctness and why every detail of its design is critical [@problem_id:1363278].", "id": "1363278", "problem": "A computer science student is implementing Dijkstra's algorithm to find the shortest path in a directed, weighted graph. The graph has vertices labeled with uppercase letters and non-negative integer edge weights. Her implementation correctly identifies a source vertex, but due to a bug, it initializes the distances to all other vertices to `0` instead of infinity. The distance to the source vertex itself is correctly initialized to `0`. The algorithm then proceeds as usual, using a priority queue to iteratively select the unvisited vertex with the smallest known distance. In the case of a tie in distance values, the priority queue selects the vertex that comes first alphabetically.\n\nThe graph is defined by the following set of directed edges and their weights:\n*   S -> A, weight 5\n*   S -> B, weight 1\n*   A -> T, weight 1\n*   B -> C, weight 2\n*   C -> T, weight 4\n\nThe source vertex is `S` and the target vertex is `T`. What is the distance from `S` to `T` that the student's faulty algorithm will compute?\n\nA. 0\nB. 7\nC. 6\nD. 8\nE. The algorithm will not terminate.\n\n", "solution": "Let $V=\\{S,A,B,C,T\\}$ and let $w(u,v)\\ge 0$ denote the edge weights as given. Dijkstra's algorithm maintains tentative distances $d:V\\to \\mathbb{R}_{\\ge 0}\\cup\\{+\\infty\\}$ and relaxes edges using the rule: if $d(u)+w(u,v)<d(v)$, then set $d(v)\\leftarrow d(u)+w(u,v)$.\n\nDue to the bug, the initialization is $d(v)=0$ for all $v\\in V$, including $d(S)=0$. The priority queue keys are these $d$ values. With all keys equal, the tie-breaking is alphabetical, so the extract-min order will be $A,B,C,S,T$.\n\nExtract $A$ first: $d(A)=0$. Relax its outgoing edge $A\\to T$ with $w(A,T)=1$. The relaxation condition checks\n$$\nd(A)+w(A,T)=0+1<d(T)=0,\n$$\nwhich is false, so no update occurs.\n\nExtract $B$ next: $d(B)=0$. Relax $B\\to C$ with $w(B,C)=2$:\n$$\nd(B)+w(B,C)=0+2<d(C)=0,\n$$\nfalse, so no update.\n\nExtract $C$ next: $d(C)=0$. Relax $C\\to T$ with $w(C,T)=4$:\n$$\nd(C)+w(C,T)=0+4<d(T)=0,\n$$\nfalse, so no update.\n\nExtract $S$ next: $d(S)=0$. Relax $S\\to A$ with $w(S,A)=5$ and $S\\to B$ with $w(S,B)=1$:\n$$\nd(S)+w(S,A)=0+5<d(A)=0 \\quad \\text{and} \\quad d(S)+w(S,B)=0+1<d(B)=0,\n$$\nboth false, so no updates.\n\nExtract $T$ last: there are no outgoing edges to relax.\n\nAt every step, because all current $d(\\cdot)=0$ and all given $w(\\cdot,\\cdot)>0$, the inequality $d(u)+w(u,v)<d(v)$ never holds, so all $d$ values remain $0$. The algorithm terminates after all vertices are extracted. Therefore, the computed distance to $T$ is\n$$\nd(T)=0.\n$$", "answer": "$$\\boxed{A}$$"}, {"introduction": "Dijkstra's algorithm is not just a rigid procedure but a flexible problem-solving framework. This advanced practice explores its adaptability by introducing a more complex, real-world constraint: multi-objective optimization. Here, the goal is not only to find the path with the minimum travel time but also, among those, the one with the fewest intermediate stops. This problem challenges you to modify the very definition of \"cost,\" demonstrating how the algorithm's greedy approach can be extended to handle sophisticated, layered objectives [@problem_id:1496472].", "id": "1496472", "problem": "A new interplanetary delivery service, \"Stellar Express,\" has been contracted to transport a vital, cryo-cooled telescope component from their main depot on Earth (E) to a newly established research outpost on Mars (M). The transportation network consists of several orbital stations and Lagrange point hubs, which can be modeled as a weighted directed graph where nodes are locations and edge weights represent the travel time in days.\n\nThe primary objective is to find a route with the minimum possible total travel time. However, each transfer between stations (i.e., traversing an edge in the graph) introduces a fixed risk of equipment malfunction and incurs significant procedural costs. Therefore, as a secondary objective, among all routes that achieve the minimum total travel time, the company must select the one that involves the minimum number of station-to-station transfers.\n\nThe available routes and their corresponding travel times are as follows:\n- Earth (E) to Station A: 3 days\n- Earth (E) to Station B: 2 days\n- Earth (E) to Station D: 9 days\n- Station A to Mars (M): 5 days\n- Station A to Station D: 4 days\n- Station B to Station C: 3 days\n- Station C to Station D: 1 day\n- Station C to Mars (M): 3 days\n- Station D to Mars (M): 1 day\n\nAll routes are one-way in the direction specified. Your task is to determine the optimal path from Earth (E) to Mars (M) according to the company's dual criteria.\n\nProvide the minimum total travel time and the corresponding number of transfers for this optimal path.\n\n", "solution": "We model the network as a directed graph with nodes $E, A, B, C, D, M$ and edge travel times $w(u,v)$ as given. The primary objective is to minimize total time; the secondary objective is to minimize the number of transfers (edges) among all time-optimal paths. We therefore define the path cost from $E$ to any node $v$ as an ordered pair $(T(v), K(v))$ where $T(v)$ is the minimum total time and $K(v)$ is the minimum number of edges among paths that achieve $T(v)$. We compare such pairs lexicographically: $(t_{1},k_{1})<(t_{2},k_{2})$ if $t_{1}<t_{2}$, or $t_{1}=t_{2}$ and $k_{1}<k_{2}$.\n\nWe apply a Dijkstra-style relaxation using this lexicographic order. Initialize:\n$$\n(T(E),K(E))=(0,0), \\quad (T(v),K(v))=(\\infty,\\infty)\\ \\text{for all }v\\neq E.\n$$\nRelax outgoing edges from $E$:\n$$\n(T(A),K(A))=(3,1),\\quad (T(B),K(B))=(2,1),\\quad (T(D),K(D))=(9,1).\n$$\nSelect the unsettled node with smallest lexicographic cost: $B$ with $(2,1)$. Relax from $B$:\n$$\n(T(C),K(C))=(2+3,1+1)=(5,2).\n$$\nNext smallest is $A$ with $(3,1)$. Relax from $A$:\n$$\n(T(M),K(M))=(3+5,1+1)=(8,2),\\quad (T(D),K(D))=(3+4,1+1)=(7,2)\\ \\text{(improves from }(9,1)\\text{)}.\n$$\nNext smallest is $C$ with $(5,2)$. Relax from $C$:\n$$\n(T(D),K(D))=(5+1,2+1)=(6,3)\\ \\text{(improves from }(7,2)\\text{)},\\quad (T(M),K(M))=(5+3,2+1)=(8,3).\n$$\nSince $(8,2)$ is lexicographically smaller than $(8,3)$, we keep $(T(M),K(M))=(8,2)$.\n\nNext smallest is $D$ with $(6,3)$. Relax from $D$:\n$$\n(T(M),K(M))=(6+1,3+1)=(7,4)\\ \\text{(improves from }(8,2)\\text{)}.\n$$\nFinally, $M$ has $(7,4)$ and no further improvement is possible. Thus the optimal path has minimum total travel time $7$ and, among all time-optimal paths, the minimum number of transfers $4$. One such path is $E\\to B\\to C\\to D\\to M$ with times $2+3+1+1=7$ and $4$ edges.", "answer": "$$\\boxed{\\begin{pmatrix}7 & 4\\end{pmatrix}}$$"}]}